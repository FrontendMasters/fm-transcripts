WEBVTT

1
00:00:00.160 --> 00:00:05.685
All right, so go into breadth first
traversal here, you can see here I have

2
00:00:05.685 --> 00:00:11.403
a tree here and what you'll get out at
the end is, A through K in the alphabet.

3
00:00:14.056 --> 00:00:16.407
Let's see if there's anything I
need to tell you about first.

4
00:00:23.626 --> 00:00:29.105
Yeah, and actually you can do
this iteratively or recursively.

5
00:00:29.105 --> 00:00:32.735
They both end up being relatively similar.

6
00:00:35.215 --> 00:00:37.725
So I'll leave it up to you if you wanna
do it recursively or iteratively.

7
00:00:39.370 --> 00:00:41.462
We'll do both of them when we come back so
you can see what they look like.

8
00:00:47.581 --> 00:00:51.140
Let's do iterative first.

9
00:00:51.140 --> 00:00:52.860
I don't know,
it depends on what you want to do.

10
00:00:52.860 --> 00:00:56.480
We'll do, my notes here have recursive
first, we'll do recursive first.

11
00:00:57.640 --> 00:01:02.460
So if the queue has no length,
this is the base case, right.

12
00:01:05.720 --> 00:01:07.880
Then you would just return the array,
right.

13
00:01:11.810 --> 00:01:14.791
Okay, const node equals queue.shift,
right.

14
00:01:14.791 --> 00:01:17.226
Because we're gonna pull
something off the front.

15
00:01:17.226 --> 00:01:22.133
Array.push, node.value.

16
00:01:25.166 --> 00:01:30.202
Then you can just gonna say a for
array.left,

17
00:01:30.202 --> 00:01:33.568
or sorry, not array but node.

18
00:01:33.568 --> 00:01:38.861
If node.left, then queue.push,

19
00:01:38.861 --> 00:01:42.540
node.left, okay.

20
00:01:42.540 --> 00:01:48.850
Same thing but for right, so
if node.right queue.push node.right.

21
00:01:51.310 --> 00:01:59.801
And then you're just gonna say return
breadthFirstTraverse queue and array

22
00:02:04.460 --> 00:02:07.051
So this is a recursive approach to this.

23
00:02:09.322 --> 00:02:13.570
Let's run the test to make
sure I got to unskip this.

24
00:02:18.170 --> 00:02:22.122
And make sure that
traverse is working okay,

25
00:02:22.122 --> 00:02:27.120
traversals breadth first test,
there it is, working.

26
00:02:27.120 --> 00:02:31.440
All right, so let's do this again but

27
00:02:31.440 --> 00:02:38.874
let's do const breadthFirstTraverse2
equals queue, array.

28
00:02:41.064 --> 00:02:48.197
And we're gonna say while queue.length,

29
00:02:48.197 --> 00:02:53.788
we're gonna say const node equals

30
00:02:53.788 --> 00:02:58.618
queue.shift array.push.

31
00:03:01.241 --> 00:03:02.768
Node.value.

32
00:03:06.342 --> 00:03:07.770
Just do this, right?

33
00:03:09.680 --> 00:03:11.308
Add the same thing here.

34
00:03:13.110 --> 00:03:14.970
And then at the end you
just return the array.

35
00:03:18.070 --> 00:03:21.046
So let's just change these so
this is two and this is one so

36
00:03:21.046 --> 00:03:23.092
we can see if this passes our unit test.

37
00:03:28.923 --> 00:03:32.531
It's now like that, traverse, there we go.

38
00:03:32.531 --> 00:03:36.481
All right,
run our unit test one more time.

39
00:03:40.890 --> 00:03:45.680
Lo and behold,
traversals breadth first traverse.

40
00:03:45.680 --> 00:03:47.130
This also works as well.

41
00:03:47.130 --> 00:03:48.470
I kinda like this solution.

42
00:03:48.470 --> 00:03:51.445
I think it's gonna be more performance and
I also just,

43
00:03:51.445 --> 00:03:54.860
not that that's really
what I'm concerned about.

44
00:03:54.860 --> 00:03:57.142
I think this code is easier to read,
because I understand,

45
00:03:57.142 --> 00:04:00.180
I don't have to conceptualize
what's happening with recursion.

46
00:04:00.180 --> 00:04:04.010
I can just say, as long as there's stuff
in the queue, keep processing the queue.

47
00:04:04.010 --> 00:04:05.070
That makes a lot of sense to me.

48
00:04:07.090 --> 00:04:08.730
You can get there with this, right?

49
00:04:08.730 --> 00:04:11.384
It's fine, but I do prefer this.

