WEBVTT

1
00:00:00.790 --> 00:00:02.320
So the question is is on line 40?

2
00:00:02.320 --> 00:00:04.450
Here, why are we concatenating left and
right?

3
00:00:05.530 --> 00:00:11.087
And the answer to that question is one
of these is empty left and right, right?

4
00:00:11.087 --> 00:00:15.520
So, we just need to make sure that those
results get concatenated onto the end of

5
00:00:15.520 --> 00:00:18.099
results so
that we capture all those numbers,

6
00:00:18.099 --> 00:00:21.870
because we know everything that's
in that's left in either left or

7
00:00:21.870 --> 00:00:25.640
right is by definition gonna be
larger what's already in results,

8
00:00:25.640 --> 00:00:29.380
which is why we can just freely
concatenate what's ever in there.

9
00:00:30.450 --> 00:00:33.448
&gt;&gt; I just was wondering like what's,
like the policy for

10
00:00:33.448 --> 00:00:36.300
using built in JavaScript functions?

11
00:00:36.300 --> 00:00:41.123
Like cuz I seen the other problems and
stuff and

12
00:00:41.123 --> 00:00:45.700
different solutions
where some use built in

13
00:00:45.700 --> 00:00:50.535
JavaScript methods like
reverse shift here.

14
00:00:50.535 --> 00:00:56.490
And then others trying to find
solutions that are just more basic.

15
00:00:56.490 --> 00:00:57.229
Yes.

16
00:00:57.229 --> 00:01:01.640
Just wondering what, in your experience,
what does that look like?

17
00:01:03.040 --> 00:01:09.649
&gt;&gt; So I think the question is,
in particular around push and shift here.

18
00:01:09.649 --> 00:01:12.200
And the question being like,
what's our policy?

19
00:01:12.200 --> 00:01:16.773
What's the recommendation of when
you can use shift and push and

20
00:01:16.773 --> 00:01:19.991
when should you drop
into something lower and

21
00:01:19.991 --> 00:01:24.564
maybe do the direct manipulation
yourself because the, yeah,

22
00:01:24.564 --> 00:01:30.236
this shift functionality could actually
be quite inefficient in terms of how,

23
00:01:30.236 --> 00:01:33.391
it depends on how
the array is implemented.

24
00:01:33.391 --> 00:01:35.220
In this particular case,
I just want you to learn.

25
00:01:35.220 --> 00:01:38.732
So if you understand that
stuff is coming off the front,

26
00:01:38.732 --> 00:01:43.514
we could have done this with counters and
said, and have two, four loops and

27
00:01:43.514 --> 00:01:47.773
an ion and a jade that's moving
forward and that would have probably

28
00:01:47.773 --> 00:01:51.760
been more efficient in terms of
not Jocelyn the arrays around.

29
00:01:54.170 --> 00:01:54.730
That's fine.

30
00:01:54.730 --> 00:01:56.300
If you wanted to do that that makes sense.

31
00:01:56.300 --> 00:01:58.985
It probably will be more efficient.

32
00:01:58.985 --> 00:02:03.046
In this particular case, I just want you
to learn how the algorithm works and

33
00:02:03.046 --> 00:02:07.060
I'm not interested in having the absolute
most effective way of doing it.

34
00:02:08.350 --> 00:02:10.190
So it depends.

35
00:02:10.190 --> 00:02:14.710
Sorry, I apologize that that
is the answer yet once again.

36
00:02:14.710 --> 00:02:17.815
If you are extremely
sensitive to performance,

37
00:02:17.815 --> 00:02:20.777
then these are things
you have to worry about.

38
00:02:20.777 --> 00:02:21.708
If you're not,

39
00:02:21.708 --> 00:02:26.040
then I'd say this is more readable then
trying to keep track of two counters.

40
00:02:27.510 --> 00:02:29.430
&gt;&gt; Okay, that makes sense.

41
00:02:29.430 --> 00:02:30.200
&gt;&gt; Yep, good question.

42
00:02:31.340 --> 00:02:35.690
&gt;&gt; Yeah, I tried my hand in fighting
the merge part of this thing and

43
00:02:35.690 --> 00:02:37.175
I recursive styles.

44
00:02:37.175 --> 00:02:41.644
Well,
&gt;&gt; I guess yeah, I guess you could,

45
00:02:41.644 --> 00:02:46.800
instead of saying ,merge stuff goes here.

46
00:02:48.430 --> 00:02:54.380
Instead of having a merge function here, I
guess that works, but I wouldn't do that.

47
00:02:54.380 --> 00:03:00.360
&gt;&gt; That wasn't the thing like the merge
function is separate in what I did but

48
00:03:00.360 --> 00:03:02.686
it's also it calls itself.

49
00:03:03.748 --> 00:03:05.055
Merges it in little parts.

50
00:03:09.069 --> 00:03:14.062
I think there is a reason,
is there a performance reason

51
00:03:14.062 --> 00:03:18.110
to prefer an iterative
approach in merging?

52
00:03:20.500 --> 00:03:24.700
&gt;&gt; I'd have to think about that, but
I can't see this being any clear, right?

53
00:03:24.700 --> 00:03:27.585
The reason why you would wanna do this
recursively is if you made the code look

54
00:03:27.585 --> 00:03:28.950
better, and like can read better.

55
00:03:30.580 --> 00:03:33.170
But I don't know about you this
I find this code quite readable.

56
00:03:35.200 --> 00:03:37.720
But it's obviously
a point of opinion here.

57
00:03:39.370 --> 00:03:43.858
I would not make merge recursive,
I can't think of a good reason to do that.

58
00:03:46.518 --> 00:03:49.425
You could, probably,
I'd have to think about it.

59
00:03:51.885 --> 00:03:55.229
But I'll say this that typically
merge is not made recursive.

60
00:03:59.117 --> 00:04:03.146
But to answer the online question here,

61
00:04:03.146 --> 00:04:08.610
you could absolutely do this
just move this up in here.

62
00:04:11.110 --> 00:04:16.014
And then this would just be sorted left.

63
00:04:20.021 --> 00:04:22.585
Sorted right?

64
00:04:27.326 --> 00:04:32.425
And then you would just return and
then you'd have to do the return,

65
00:04:32.425 --> 00:04:36.550
concat, Yeah,
all that stuff would just end up here.

66
00:04:50.320 --> 00:04:51.560
And I think this should still work.

67
00:04:51.560 --> 00:04:52.601
What did I do?

68
00:04:56.334 --> 00:04:58.353
I hope this needs to be sorted left.

69
00:05:02.876 --> 00:05:04.780
There we go, and that works.

70
00:05:04.780 --> 00:05:08.500
So, the reason why I don't,
[COUGH] excuse me.

71
00:05:08.500 --> 00:05:13.359
The reason why I don't like that is
because I really liked having all this

72
00:05:13.359 --> 00:05:16.320
separated into one little merge function.

73
00:05:16.320 --> 00:05:18.080
One, this is now usable in other places.

74
00:05:18.080 --> 00:05:19.950
Not that I think you would,
but it would be.

75
00:05:21.090 --> 00:05:25.013
But more importantly, you can actually
write unit tests individually for

76
00:05:25.013 --> 00:05:25.890
merge, right?

77
00:05:25.890 --> 00:05:31.158
So you can actually test this one piece
of function in isolation by itself.

78
00:05:31.158 --> 00:05:32.324
And that's always a good thing.

79
00:05:36.246 --> 00:05:40.287
As much as possible in general,
just as a general programming rule,

80
00:05:40.287 --> 00:05:44.770
one function does one thing,
as much as possible, right?

81
00:05:44.770 --> 00:05:47.960
Again, remember rule number one
here is there are no rules.

82
00:05:47.960 --> 00:05:51.104
So if there's, if it makes sense
to have a function do two things,

83
00:05:51.104 --> 00:05:52.240
then by all means do it.

84
00:05:53.440 --> 00:05:53.944
In this case,

85
00:05:53.944 --> 00:05:56.508
I think it makes a lot of sense to
separate this into two separate things.

