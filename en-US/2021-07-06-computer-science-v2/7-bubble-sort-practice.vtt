WEBVTT

1
00:00:00.380 --> 00:00:05.057
I'm gonna give you some time to try and
implement bubble sort yourself.

2
00:00:05.057 --> 00:00:11.594
So, should be able to click on here if,
I think mine I actually have it open here.

3
00:00:11.594 --> 00:00:19.758
So Come

4
00:00:19.758 --> 00:00:22.375
back here to our code sandbox.

5
00:00:22.375 --> 00:00:26.277
And I want you to work
on bubble sort.test.

6
00:00:29.569 --> 00:00:34.119
And you can go ahead and
delete the .skip here.

7
00:00:40.733 --> 00:00:42.970
And you can go ahead and
get started on that.

8
00:00:42.970 --> 00:00:44.660
You can look here at the test.

9
00:00:44.660 --> 00:00:48.440
You can call it right here, or
you can write all the code here.

10
00:00:48.440 --> 00:00:51.989
As you can see here,
I now have one failed test.

11
00:00:51.989 --> 00:00:58.584
Now, and actually I'll show you how to do
this when we get back after you try this,

12
00:00:58.584 --> 00:01:03.076
but there's a cool little thing
I added here that you can

13
00:01:03.076 --> 00:01:07.594
visualize your sorting happening
as well as it goes on.

14
00:01:07.594 --> 00:01:11.198
And I'll show you how to do this when you
get back but if you wannna give it a shot

15
00:01:11.198 --> 00:01:14.970
right now, you'll put your
bubble sort code here in sort.

16
00:01:14.970 --> 00:01:17.828
And then anytime that you wanna
take a snapshot of the array,

17
00:01:17.828 --> 00:01:20.641
which basically means that
the beginning of every 4 loop.

18
00:01:22.910 --> 00:01:25.876
It'll actually visualize you over time
of how your bubble sort's working,

19
00:01:25.876 --> 00:01:26.707
which is kinda cool.

20
00:01:28.856 --> 00:01:32.195
But I would say do it here, for
us to do it here in the bubble sort here.

21
00:01:32.195 --> 00:01:36.029
Again, let's actually
do that first as well.

22
00:01:38.558 --> 00:01:40.982
In fact, I might just commit that.

23
00:01:43.431 --> 00:01:48.420
Well, stay on page.

24
00:01:48.420 --> 00:01:54.300
If you wanna get rid of all
the console stuff here,

25
00:01:54.300 --> 00:02:00.320
it's under pathfinding and
under the solution and

26
00:02:00.320 --> 00:02:06.490
you just need to log out or
remove the log maze parts.

27
00:02:09.907 --> 00:02:12.369
But I'll do that here in just a second.

28
00:02:19.178 --> 00:02:23.640
So just another kind of pro tip here
as you're doing your code sandboxes.

29
00:02:23.640 --> 00:02:25.550
I tend to leave these skips on here.

30
00:02:25.550 --> 00:02:29.115
Let's do the test out skip
until I'm fairly certain that

31
00:02:29.115 --> 00:02:31.200
I have at least a good first shot.

32
00:02:33.160 --> 00:02:38.750
It's really easy to get infinite loops,
if you're just letting it run.

33
00:02:38.750 --> 00:02:42.145
In fact, I think code sandbox
lets you yeah, actually,

34
00:02:42.145 --> 00:02:46.940
let me show you that as well, that's
probably a useful thing here as well.

35
00:02:46.940 --> 00:02:49.862
This little blue circle up here,
this toggle file watching,

36
00:02:49.862 --> 00:02:53.360
it'll actually just run your code as
you're typing which is kinda slow.

37
00:02:53.360 --> 00:02:56.922
So if you just click on that.

38
00:02:56.922 --> 00:02:59.661
It won't try and
run it every single time that you type,

39
00:02:59.661 --> 00:03:03.276
which is probably a good thing,
especially when you get into recursion,

40
00:03:03.276 --> 00:03:05.160
you can actually crash your browser.

41
00:03:07.100 --> 00:03:12.014
Another kinda pro tip here is if you've
created your own code sandbox account,

42
00:03:12.014 --> 00:03:16.776
you can just save the file before you try
running it, so that if it does crash,

43
00:03:16.776 --> 00:03:18.710
you don't lose all your work.

44
00:03:19.770 --> 00:03:21.541
Also, don't refresh the page.

45
00:03:21.541 --> 00:03:24.926
I probably should have told you all this
maybe a bit sooner but now you know,

46
00:03:24.926 --> 00:03:28.290
coz if you refresh the page, it's gonna
drop all of your changes as well.

47
00:03:30.020 --> 00:03:32.191
Okay.
So first thing here,

48
00:03:32.191 --> 00:03:36.190
is we wanna do create
a variable called swapped.

49
00:03:37.840 --> 00:03:39.870
We'll set that equal to false.

50
00:03:39.870 --> 00:03:44.280
This is just gonna be the, I think
the term for is the sentinel variable.

51
00:03:46.050 --> 00:03:48.046
That as soon as we swap
anything in the array,

52
00:03:48.046 --> 00:03:50.050
that means we have to do another loop,
okay?

53
00:03:51.330 --> 00:03:55.599
Here you can do a while loop, but I never
get to use do loops and whenever I get to

54
00:03:55.599 --> 00:03:59.380
use a do loop, I feel like I must
because I never otherwise use them.

55
00:03:59.380 --> 00:04:03.750
So I'm gonna say do which is
very similar to a while loop.

56
00:04:06.450 --> 00:04:09.430
What's the difference between
a do loop and a while loop?

57
00:04:09.430 --> 00:04:14.862
Well, a do loop always happens at
least once, which in this case,

58
00:04:14.862 --> 00:04:19.716
you always wanna least check
if it's sorted or not, okay?

59
00:04:19.716 --> 00:04:22.080
So I have this do loop here.

60
00:04:22.080 --> 00:04:27.440
And I'm going to say, on the first thing,
swapped equals false.

61
00:04:28.720 --> 00:04:32.714
That's the first thing at the beginning of
every single array, we're going to assume

62
00:04:32.714 --> 00:04:36.379
that nothing has been swapped, and
then we're going to, if something does get

63
00:04:36.379 --> 00:04:39.740
swapped, then we will set swap to true
which will cause it to loop again.

64
00:04:40.890 --> 00:04:45.580
When I say 4, let i equals zero.

65
00:04:45.580 --> 00:04:51.460
I as less than num style

66
00:04:51.460 --> 00:04:57.347
length i++, okay?

67
00:04:57.347 --> 00:05:03.256
And then in here, we're going to say if

68
00:05:03.256 --> 00:05:08.995
numbs of i is greater than nums of i + 1

69
00:05:13.059 --> 00:05:16.785
Then we're gonna swap the numbers
const temp equals nums i,

70
00:05:16.785 --> 00:05:21.118
you could write some function that
does this as well, it's up to you.

71
00:05:21.118 --> 00:05:29.404
Nums i equals nums of i + 1.

72
00:05:31.650 --> 00:05:38.959
Nums of i plus 1 = temp,

73
00:05:38.959 --> 00:05:43.021
and swapped = true.

74
00:05:49.416 --> 00:05:52.984
It's basically it right there.

75
00:05:52.984 --> 00:05:57.900
There are a number of things here that
I could do that could speed this up.

76
00:05:57.900 --> 00:06:01.748
For sure, I tried to write just
the simplest code possible for

77
00:06:01.748 --> 00:06:04.020
you all to understand this.

78
00:06:04.020 --> 00:06:07.835
But a really good exercise for
you to do later is to go and actually,

79
00:06:07.835 --> 00:06:12.693
like, for example, I could track how many
iterations I've been through, right?

80
00:06:12.693 --> 00:06:18.090
And I could have like const iterations and
are actually have to be alette.

81
00:06:18.090 --> 00:06:21.520
And that could do a ++ at
the end of every loop here and

82
00:06:21.520 --> 00:06:24.200
then I could say minus iterations right?

83
00:06:24.200 --> 00:06:27.434
And that would Allow me to do
less than less loop throughs,

84
00:06:27.434 --> 00:06:30.410
I think that could actually
make this even minus one.

85
00:06:32.430 --> 00:06:33.590
I think that actually does work.

86
00:06:35.150 --> 00:06:40.740
But let's actually try and
see if this actually works as it Is, And

87
00:06:40.740 --> 00:06:42.692
we'll click play.

88
00:06:48.610 --> 00:06:50.915
Yeah, I got to return this at the end.

89
00:06:50.915 --> 00:06:51.769
Yeah, thank you.

90
00:06:55.573 --> 00:06:57.261
All right, so let's try that again.

91
00:07:01.634 --> 00:07:10.100
Sometimes it gets unhappy
of That should be working.

92
00:07:10.100 --> 00:07:13.220
But let's go ahead and go take a look
at the solution just to make sure here.

93
00:07:14.710 --> 00:07:16.408
Yeah, and you can see here I mean,

94
00:07:16.408 --> 00:07:19.056
that's basically the code
that I wrote right there.

95
00:07:22.873 --> 00:07:26.264
If you are seeing that
where it doesn't do that,

96
00:07:26.264 --> 00:07:31.309
what I would do is I would just save,
refresh the entire thing cuz again,

97
00:07:31.309 --> 00:07:34.390
code sandbox can find
itself in a bad state.

98
00:07:37.070 --> 00:07:43.202
So, the next thing I kinda
wanna show you here, Is,

99
00:07:43.202 --> 00:07:46.878
let's just go ahead and refresh this.

100
00:08:00.356 --> 00:08:03.516
Bubble sort, you running now?

101
00:08:06.842 --> 00:08:07.713
Yeah, there we go.

102
00:08:07.713 --> 00:08:08.800
Now it is running.

103
00:08:08.800 --> 00:08:10.604
Cool.
All right, so

104
00:08:10.604 --> 00:08:15.930
let's do some fun little
visualization here.

105
00:08:15.930 --> 00:08:18.843
I'm just gonna copy the body
of bubble sort here, and

106
00:08:18.843 --> 00:08:22.730
then I can have this thing
under source called sort.js.

107
00:08:22.730 --> 00:08:25.520
You can actually just come in here and
paste this.

108
00:08:26.540 --> 00:08:29.110
And I'm gonna uncomment
these snapshots right here.

109
00:08:30.510 --> 00:08:32.400
And let's just call this nums.

110
00:08:34.670 --> 00:08:41.316
All right, so now if I go over here and
browser, Okay?

111
00:08:41.316 --> 00:08:43.322
And then they come in here into sort,

112
00:08:43.322 --> 00:08:46.110
you can actually visualize
what's going on here.

113
00:08:47.670 --> 00:08:50.869
So the one thing this will do for
you is actually do duplicates for you, so

114
00:08:50.869 --> 00:08:54.226
as long as you just, so if I call snapshot
multiple times in a row with the same

115
00:08:54.226 --> 00:08:57.400
array, it'll cut it out so you can
only see what happens when it swaps.

116
00:08:59.230 --> 00:09:03.550
So you can see I took 71 snapshots
by putting a snapshot here and

117
00:09:03.550 --> 00:09:06.914
then one of the ends just
to get the final product.

118
00:09:06.914 --> 00:09:10.220
And it actually only got
22 unique snapshots.

119
00:09:10.220 --> 00:09:14.015
But you can see here, the nine bubbles up,

120
00:09:14.015 --> 00:09:18.556
the eight bubbles up the seven bubbles up,
right?

121
00:09:18.556 --> 00:09:21.160
And you can kind of see that bubble
sort kinda working over time.

122
00:09:23.130 --> 00:09:25.374
Or I mean,
we can do make this even bigger.

123
00:09:30.277 --> 00:09:32.345
This will be pretty ineffective.

124
00:09:36.173 --> 00:09:40.377
You can see I kinda made it unhappy cuz
this is what happens when you use n

125
00:09:40.377 --> 00:09:41.739
squared algorithms.

126
00:09:45.760 --> 00:09:46.940
I've actually locked up my browser.

127
00:09:46.940 --> 00:09:49.750
That's how inefficient this this sword is.

128
00:09:50.960 --> 00:09:51.460
There we go.

129
00:09:52.780 --> 00:09:54.320
It's also a lot of react rendering.

130
00:09:55.320 --> 00:09:59.090
You can see here this took
almost 9000 snapshots.

131
00:10:01.080 --> 00:10:05.908
And it has to have 2555 unique snapshots.

132
00:10:05.908 --> 00:10:10.075
You can see here the 97
bubbles up until it finds 100,

133
00:10:10.075 --> 00:10:14.767
then it finds 99,
that's gonna bubble up until it finds 100

134
00:10:17.207 --> 00:10:20.069
99 actually is the biggest cuz
it's going from that to 100.

135
00:10:20.069 --> 00:10:24.109
You can look how long
this this rendering is.

136
00:10:24.109 --> 00:10:26.935
But it's kinda pretty to watch all
the colors kinda come together, right?

137
00:10:29.085 --> 00:10:30.942
Anyway, I think it's cool.

138
00:10:30.942 --> 00:10:35.702
&gt;&gt; In the f check there, are you
intentionally going out of bounds and

139
00:10:35.702 --> 00:10:39.870
relying on a number greater
than undefined will be false?

140
00:10:41.350 --> 00:10:43.654
&gt;&gt; Yeah, so
the question is here on line 13.

141
00:10:44.700 --> 00:10:49.538
This obviously at some point is
going to go out of bounds and

142
00:10:49.538 --> 00:10:54.574
it just ends up working okay,
so I just never bothered fixing

143
00:10:54.574 --> 00:11:00.226
it coz really only pops to go outside
the array once and it doesn't.

144
00:11:00.226 --> 00:11:04.020
But you totally could say and no,

145
00:11:04.020 --> 00:11:08.077
this is gonna try and re render again.

146
00:11:08.077 --> 00:11:12.759
&gt;&gt; You could just start the for
loop from i = 1 and

147
00:11:12.759 --> 00:11:15.770
do the check with i and i- 1.

148
00:11:15.770 --> 00:11:18.121
&gt;&gt; Yep, there's a lot of ways
you could handle that and

149
00:11:18.121 --> 00:11:20.300
that would totally be fine as well.

150
00:11:20.300 --> 00:11:22.699
So anyway, I found this kinda fun.

151
00:11:22.699 --> 00:11:24.810
Feel free to to play around with this.

152
00:11:24.810 --> 00:11:30.270
This will work for
all of the basically non recursive sorts.

153
00:11:30.270 --> 00:11:32.230
So this will work with
like the radix sort.

154
00:11:32.230 --> 00:11:37.540
This will work with selection or
insertion, all those sorts.

