WEBVTT

1
00:00:00.240 --> 00:00:02.709
All right, so for the first code
that we're gonna write today,

2
00:00:02.709 --> 00:00:04.500
we're gonna be writing bubble sort.

3
00:00:04.500 --> 00:00:08.469
Now bubble sort is actually not
a algorithm that you're ever going to use

4
00:00:08.469 --> 00:00:09.910
directly in production.

5
00:00:11.130 --> 00:00:15.994
Because there are algorithms that are just
strictly better than bubble sort,

6
00:00:15.994 --> 00:00:20.708
but it really fits super well with the
mental model that humans would think of

7
00:00:20.708 --> 00:00:22.051
how to sort numbers.

8
00:00:25.106 --> 00:00:30.678
So the first thing I'll tell you today,
a lot of algorithms is about sorting.

9
00:00:30.678 --> 00:00:34.068
We're gonna be doing, I think,
six different sorts today.

10
00:00:34.068 --> 00:00:39.246
And the reason for that is it's
demonstrative of the ability to

11
00:00:39.246 --> 00:00:44.522
write algorithms in the sense of
we're trying to show how you can

12
00:00:44.522 --> 00:00:49.621
take a large set of numbers and
do a holistic action with them.

13
00:00:49.621 --> 00:00:54.284
And the various different strategies that
you can do to minimize the work that

14
00:00:54.284 --> 00:00:59.018
that you're doing, and which is to say
that you may not ever write quicksort or

15
00:00:59.018 --> 00:01:01.480
merge sort, insertion sort directly.

16
00:01:01.480 --> 00:01:05.929
In fact, I imagine you never will
because the language is actually

17
00:01:05.929 --> 00:01:08.540
better at doing it than you are.

18
00:01:08.540 --> 00:01:12.822
But you will be able to take
apart these algorithms and

19
00:01:12.822 --> 00:01:16.257
use them kind of piecemeal here and there.

20
00:01:16.257 --> 00:01:18.565
I remember I've interviewed
at Facebook years and

21
00:01:18.565 --> 00:01:20.960
years ago to be on the React core team.

22
00:01:20.960 --> 00:01:25.430
And the algorithm that I used to solve
the question that they asked was

23
00:01:25.430 --> 00:01:30.070
actually merge sort, just kind of
dissected and reput back together.

24
00:01:32.140 --> 00:01:36.501
So that's kind of the mindset I want
you to have here is you're probably

25
00:01:36.501 --> 00:01:39.555
not gonna sort too many
numbers directly by hand,

26
00:01:39.555 --> 00:01:44.450
by code, but you will use these algorithms
kind of pieced apart and reapplied.

27
00:01:45.720 --> 00:01:49.579
Okay, so I'm just giving you some
justification of why I'm gonna have you

28
00:01:49.579 --> 00:01:50.996
sort so many damn numbers.

29
00:01:53.637 --> 00:01:55.820
So this is kind of a fun little graphic.

30
00:01:55.820 --> 00:02:01.105
It's from Wikipedia of how bubble
sort actually looks over time.

31
00:02:01.105 --> 00:02:02.327
And the way that works,

32
00:02:02.327 --> 00:02:06.080
you can see that the biggest numbers
bubble up to the top, right?

33
00:02:06.080 --> 00:02:11.547
That's why it's called bubble sort is cuz
the biggest numbers over time end up being

34
00:02:11.547 --> 00:02:16.796
bubbling up to the top, and then it sorts
the smaller part of the array over time.

35
00:02:18.682 --> 00:02:24.146
And the way it works is this,
is you're just gonna go over the array,

36
00:02:24.146 --> 00:02:29.140
and if the item at index one is
bigger than the item at index two,

37
00:02:29.140 --> 00:02:34.030
then you're gonna swap index one and
index two, right?

38
00:02:34.030 --> 00:02:35.506
And then you're just
gonna keep doing that.

39
00:02:35.506 --> 00:02:38.700
You're gonna say,
is this one bigger than this one?

40
00:02:38.700 --> 00:02:41.090
No, okay, next item,
is this one bigger than this one?

41
00:02:41.090 --> 00:02:42.358
Yes, swap them, right?

42
00:02:42.358 --> 00:02:45.469
And then you just kinda swap them.

43
00:02:45.469 --> 00:02:49.103
So let's look at kind
of a drawn out version.

44
00:02:49.103 --> 00:02:53.665
So let's say we're gonna sort
this one here, 1, 5, 4, 3, 2.

45
00:02:53.665 --> 00:03:00.095
The first question you ask starting at the
beginning, is 1 and 5 out of order, right?

46
00:03:00.095 --> 00:03:02.649
Is 1 larger than 5?

47
00:03:02.649 --> 00:03:03.970
It's not, right?

48
00:03:03.970 --> 00:03:08.303
Next thing, is 5 larger than 4?

49
00:03:08.303 --> 00:03:10.170
Yes, then you swap.

50
00:03:10.170 --> 00:03:14.480
And then you end up with an array
that looks like this 1, 4, 5, 2, 3.

51
00:03:14.480 --> 00:03:18.200
Now, notice here that 5 is
the largest item in the array.

52
00:03:18.200 --> 00:03:22.190
So is it larger than those things?

53
00:03:22.190 --> 00:03:25.170
The answer is always going to be yes,
right?

54
00:03:25.170 --> 00:03:28.341
So that's why 5 is going
to bubble to the top.

55
00:03:31.066 --> 00:03:32.540
So are 5 and 2 out of order?

56
00:03:32.540 --> 00:03:35.590
Yes, swap, are 5 and 3 out of order?

57
00:03:35.590 --> 00:03:41.912
Yes, swap, and now we've gone through
the entire iteration once, right?

58
00:03:41.912 --> 00:03:43.564
We've gone through the entire array.

59
00:03:43.564 --> 00:03:44.580
Is it sorted yet?

60
00:03:46.300 --> 00:03:48.880
No, right, 4 is still here out of order.

61
00:03:50.850 --> 00:03:55.165
So that's kind of the inner, or
sorry, yeah, what we did here,

62
00:03:55.165 --> 00:04:00.120
this is the inner loop, which is asking,
are the two numbers out of order?

63
00:04:00.120 --> 00:04:03.992
And then there's an outer loop that says,
hey, during my last iteration,

64
00:04:03.992 --> 00:04:05.030
did anything swap?

65
00:04:06.180 --> 00:04:09.690
If the answer to that question is yes,
then you do it again.

66
00:04:09.690 --> 00:04:14.265
If you go through it and nothing swaps,
that means the array is sorted and

67
00:04:14.265 --> 00:04:15.771
you're done, right?

68
00:04:17.930 --> 00:04:20.940
So end of the array, did anything swap?

69
00:04:20.940 --> 00:04:21.830
The answer is yes.

70
00:04:21.830 --> 00:04:24.021
So then we start all over again.

71
00:04:24.021 --> 00:04:25.323
1 and 4 out of order?

72
00:04:25.323 --> 00:04:27.670
No, 4 and 2 out of order?

73
00:04:27.670 --> 00:04:29.855
Yes, so you swap those.

74
00:04:29.855 --> 00:04:31.320
Are 4 and 3 out of order?

75
00:04:31.320 --> 00:04:35.530
Yes, swap, and
we've reached the end of the array again.

76
00:04:35.530 --> 00:04:38.160
Now notice we don't have to ask,
are 4 and 5 out of order?

77
00:04:39.380 --> 00:04:40.835
This is a bit of an optimization.

78
00:04:40.835 --> 00:04:42.978
You don't actually have to do this.

79
00:04:42.978 --> 00:04:46.846
But after the first iteration, you can
guarantee that the last item in the array

80
00:04:46.846 --> 00:04:50.558
is definitely the largest item, right,
because it'll bubble to the top.

81
00:04:50.558 --> 00:04:54.124
Which means we can progressively look
at less than the rest of the array.

82
00:04:56.207 --> 00:05:00.392
So after two iterations,
we can guarantee that the last two items

83
00:05:00.392 --> 00:05:04.198
are definitely the largest two
items in the array, right,

84
00:05:04.198 --> 00:05:06.952
due to the method of
how bubble sort works.

85
00:05:09.647 --> 00:05:12.390
Okay, so are 4 and 5 out of order?

86
00:05:12.390 --> 00:05:15.530
No, in fact, so this question
here was technically unnecessary.

87
00:05:17.380 --> 00:05:19.270
You hit the end of the array,
did anything swap?

88
00:05:19.270 --> 00:05:22.420
The answer's yes,
we had a couple swaps here.

89
00:05:22.420 --> 00:05:26.522
And now notice it actually is sorted,
right 1, 2, 3, 4, 5.

90
00:05:26.522 --> 00:05:29.267
But because something swapped
in the last iteration,

91
00:05:29.267 --> 00:05:31.243
we have to go through it again, right?

92
00:05:33.170 --> 00:05:37.993
[COUGH] So are 1 and 2 out of order,
2 and 3, 3 and 4, 4 and 5?

93
00:05:37.993 --> 00:05:41.800
And then here, we hit the end of
the array and nothing swapped.

94
00:05:41.800 --> 00:05:48.308
So now we know this is in order.

95
00:05:48.308 --> 00:05:52.790
So since nothing swapped, we break
the outer loop, and we're done, right?

96
00:05:52.790 --> 00:05:55.903
So that is the end of that
particular sorting algorithm.

97
00:05:59.410 --> 00:06:03.916
So I talked about this a little bit,
which is after the first run through,

98
00:06:03.916 --> 00:06:05.891
the largest item's at the end.

99
00:06:05.891 --> 00:06:09.678
After the second iteration, the second
largest item's at the end, so on and

100
00:06:09.678 --> 00:06:10.210
so forth.

101
00:06:13.850 --> 00:06:17.501
Cool, so that's optimization right there.

102
00:06:17.501 --> 00:06:19.030
It would make a difference
in the coefficient.

103
00:06:19.030 --> 00:06:21.728
It wouldn't actually make
the big O any better.

104
00:06:24.910 --> 00:06:27.515
But it does guarantee that
it'd run a little bit faster.

105
00:06:29.668 --> 00:06:31.230
So what's the time complexity?

106
00:06:31.230 --> 00:06:33.220
What's the computational
complexity of this algorithm?

107
00:06:34.810 --> 00:06:39.620
&gt;&gt; Someone online is saying,
the best case scenario is four of n.

108
00:06:39.620 --> 00:06:43.918
&gt;&gt; Yep, so let's talk about
the average case first, and

109
00:06:43.918 --> 00:06:47.010
then we'll loop back to the best case.

110
00:06:48.440 --> 00:06:51.850
&gt;&gt; And they're saying the average
case is O of n squared.

111
00:06:51.850 --> 00:06:56.750
&gt;&gt; Yeah, so there's gonna be
an outer while loop, right?

112
00:06:56.750 --> 00:06:59.473
That's gonna say while something swapped,

113
00:06:59.473 --> 00:07:02.920
then continue doing the inner
part of that loop, right?

114
00:07:04.580 --> 00:07:06.680
And then the inner loop is gonna be a for

115
00:07:06.680 --> 00:07:10.630
loop, which is going to loop over
the array every single time, right?

116
00:07:12.958 --> 00:07:16.590
So we have a outer while loop and
an inner for loop.

117
00:07:16.590 --> 00:07:17.831
What does that look like?

118
00:07:20.880 --> 00:07:23.290
It's gonna be n squared, right?

119
00:07:27.147 --> 00:07:30.178
So that's gonna be the average case and
it's also gonna be, well,

120
00:07:30.178 --> 00:07:32.950
we'll talk about worst case
here in just a second.

121
00:07:32.950 --> 00:07:35.545
But the average case here is that we
have an outer loop and an inner loop,

122
00:07:35.545 --> 00:07:37.290
which means we're gonna
end up with n squared.

123
00:07:37.290 --> 00:07:39.748
Because every item in
a bubble sort more or

124
00:07:39.748 --> 00:07:43.630
less has to be compared to
every other item in the array.

125
00:07:43.630 --> 00:07:46.751
That's kinda the question that
you're gonna ask yourself is,

126
00:07:46.751 --> 00:07:50.409
does every item in the array, at some
point say, is this larger than this?

127
00:07:50.409 --> 00:07:52.333
And the answer for a bubble sort is yeah,

128
00:07:52.333 --> 00:07:54.716
every item will see every
other item in the array.

129
00:07:57.437 --> 00:08:00.310
So that's gonna make the average
case of this n squared.

130
00:08:01.800 --> 00:08:07.384
The worst case scenario for
a bubble sort is a reverse sorted list.

131
00:08:07.384 --> 00:08:10.570
So if this came in as 5, 4, 3, 2, 1,

132
00:08:10.570 --> 00:08:15.460
that means that we're gonna have
to do a lot of swapping, right?

133
00:08:15.460 --> 00:08:19.595
And we're gonna have to ask,
is this greater than this?

134
00:08:19.595 --> 00:08:26.270
So that's gonna be the worst case
scenario is a reverse sorted list.

135
00:08:26.270 --> 00:08:32.910
The best case scenario is going to be n,
which is going to be a sorted list, right?

136
00:08:32.910 --> 00:08:38.170
Cuz if this was 1, 2, 3, 4, 5,
it would go through the array once and

137
00:08:38.170 --> 00:08:41.024
say, hey, we did no swaps, I'm done.

138
00:08:44.840 --> 00:08:47.232
What's the spatial complexity of this?

139
00:08:50.294 --> 00:08:52.139
It's just, sorry, go ahead.

140
00:08:52.139 --> 00:08:56.411
&gt;&gt; [INAUDIBLE]
&gt;&gt; It's constant, that's correct.

141
00:08:56.411 --> 00:08:58.479
We're not creating any additional arrays.

142
00:08:58.479 --> 00:08:59.920
We're not doing anything like that.

143
00:08:59.920 --> 00:09:04.657
We're just operating on the array itself,
which means that no new memory is

144
00:09:04.657 --> 00:09:09.114
being called into use here,
which means it's gonna be constant time.

145
00:09:14.273 --> 00:09:14.773
Okay?

146
00:09:19.700 --> 00:09:25.277
So the next question, which we haven't
talked about yet, is this sort stable?

147
00:09:27.800 --> 00:09:31.204
And again,
we haven't talked about that yet.

148
00:09:31.204 --> 00:09:35.246
A stable sort that says if two items
are considered equal in this sort,

149
00:09:35.246 --> 00:09:38.890
are they guaranteed to be in
the same order when they come back?

150
00:09:40.190 --> 00:09:44.928
So here,
I have a little array that says state,

151
00:09:44.928 --> 00:09:50.507
which has Sarah Dresner,
Shirley Wu, and Scott Moss.

152
00:09:50.507 --> 00:09:54.372
Scott and Shirley both live in California.

153
00:09:54.372 --> 00:09:57.151
And let's say we were sorting by state.

154
00:09:57.151 --> 00:10:00.764
For this to be a stable sort,
we'd have to guarantee because Shirley

155
00:10:00.764 --> 00:10:03.770
came first in the array that
she would come before Scott.

156
00:10:05.980 --> 00:10:11.352
Some sorting algorithms do not guarantee
that, right, that if one of them comes

157
00:10:11.352 --> 00:10:16.970
first, it may not come first when it comes
back, and that would be an unstable sort.

158
00:10:18.660 --> 00:10:20.040
Sometimes that's important to you.

159
00:10:20.040 --> 00:10:21.858
Sometimes that's not important to you.

160
00:10:23.920 --> 00:10:30.741
So in this particular case, Yes,

161
00:10:30.741 --> 00:10:35.114
bubble sort is considered a stable sort,
right?

162
00:10:35.114 --> 00:10:39.826
Because you just would never swap them,
which means that in this particular case,

163
00:10:39.826 --> 00:10:44.487
Shirley would be guaranteed to be ahead of
Scott if we did this sort based on speed.

164
00:10:48.137 --> 00:10:53.760
And the last one that we didn't talk about
is this sort is what's called destructive.

165
00:10:55.486 --> 00:10:57.990
That means that it's actually
operating on the array itself.

166
00:10:57.990 --> 00:11:01.036
So if I pass an input into bubble sort,

167
00:11:01.036 --> 00:11:05.702
it's going to operate on bubble sort or
the array itself,

168
00:11:05.702 --> 00:11:11.605
which means that if I wanted to keep
a copy of the original unsorted array,

169
00:11:11.605 --> 00:11:15.440
I would have to make a copy beforehand,
right?

170
00:11:15.440 --> 00:11:18.464
Some sorts will return
brand new arrays and

171
00:11:18.464 --> 00:11:24.020
do not operate on the original array,
which those would not be destructive.

172
00:11:24.020 --> 00:11:24.803
But in this case,

173
00:11:24.803 --> 00:11:28.270
bubble sort is destructive cuz it's
actually modifying the original input.

174
00:11:30.030 --> 00:11:31.834
Which if any of you
are functional programmers,

175
00:11:31.834 --> 00:11:33.230
that feels really gross, right?

176
00:11:33.230 --> 00:11:34.903
But sometimes that's a good thing, right?

177
00:11:37.069 --> 00:11:40.200
Because we're not increasing
some of the spatial complexity.

178
00:11:40.200 --> 00:11:42.100
So again, it's a trade-off.

179
00:11:42.100 --> 00:11:45.737
In this particular case, it's okay
to operate on the original input.

180
00:11:48.112 --> 00:11:50.040
And you should in this particular case.

181
00:11:53.229 --> 00:11:56.860
So again,
functional programmers love rules.

182
00:11:56.860 --> 00:11:59.160
Never operate on the input.

183
00:12:00.500 --> 00:12:03.910
And I want to refer you back to
our trade-off's number one rule,

184
00:12:03.910 --> 00:12:05.440
there are no rules, right?

185
00:12:05.440 --> 00:12:08.410
So in this particular case,
we want to modify our inputs.

