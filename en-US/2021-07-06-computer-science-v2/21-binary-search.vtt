WEBVTT

1
00:00:00.290 --> 00:00:04.136
I imagine many of you kind of like
conceptually already understand this,

2
00:00:04.136 --> 00:00:07.436
even if you haven't put a name
to necessarily this algorithm.

3
00:00:07.436 --> 00:00:08.666
But it's useful for

4
00:00:08.666 --> 00:00:13.370
you to just kind of put a name to it right
at once make sure you understand it.

5
00:00:13.370 --> 00:00:16.233
The act of searching is kind
of similar to sorting and

6
00:00:16.233 --> 00:00:20.310
the fact that you are comparing
numbers one to each other.

7
00:00:20.310 --> 00:00:21.635
But in this particular case,

8
00:00:21.635 --> 00:00:25.398
we're not trying to get all the numbers in
one particular order we're actually just

9
00:00:25.398 --> 00:00:27.730
trying to find one particular
element in the array.

10
00:00:27.730 --> 00:00:32.601
If you're running a search on a array
that's not sorted, the only kind of

11
00:00:32.601 --> 00:00:37.003
search you can really do is linear
right which is you just write a for

12
00:00:37.003 --> 00:00:40.495
loop or a while loop and
say like is this it?

13
00:00:40.495 --> 00:00:41.345
Is this it?

14
00:00:41.345 --> 00:00:42.105
Is this it?

15
00:00:42.105 --> 00:00:43.699
And you just kinda go pick for

16
00:00:43.699 --> 00:00:46.895
that that just checks every
single element in the array.

17
00:00:48.075 --> 00:00:53.815
However, if you have an array that's
already sorted, you can use binary search.

18
00:00:53.815 --> 00:00:57.257
And I imagine if you're old
enough to remember phonebooks,

19
00:00:57.257 --> 00:01:00.775
[LAUGH] Which may not be everyone
that's watching this video.

20
00:01:02.850 --> 00:01:06.262
The way that you search in a phonebook
if you're looking for I don't know,

21
00:01:06.262 --> 00:01:10.073
hold in the phonebook, you open it to the
middle, you're gonna land on like M or N.

22
00:01:10.073 --> 00:01:13.810
And then you're gonna split the difference
and go halfway between M and N, right?

23
00:01:13.810 --> 00:01:16.402
And then you're just
gonna keep going half and

24
00:01:16.402 --> 00:01:20.918
half and a half until eventually learn on
the Hs than the HOs and the HLs, right and

25
00:01:20.918 --> 00:01:23.330
then eventually we'll find holes right.

26
00:01:23.330 --> 00:01:28.272
So this algorithm of splitting the array
in half and then half and then half and

27
00:01:28.272 --> 00:01:33.061
in half until eventually you land on
the exact correct element it's called

28
00:01:33.061 --> 00:01:34.900
the binary search, right?

29
00:01:37.500 --> 00:01:40.330
So, imagine we have this array here,
again,

30
00:01:40.330 --> 00:01:45.210
binary search works only if it is sorted,
right, and we're looking for 12.

31
00:01:45.210 --> 00:01:48.915
So what you do you always you
just start in the middle, right?

32
00:01:48.915 --> 00:01:54.505
So the middle is 19,
you say is 19 equal to 12?

33
00:01:54.505 --> 00:01:58.435
No, it's smaller and then you go to the
left and you split the difference there.

34
00:01:58.435 --> 00:02:00.445
So you look in the middle
of the smaller half.

35
00:02:00.445 --> 00:02:06.275
So between 19 and 0,
that middle is going to be ten, right?

36
00:02:06.275 --> 00:02:07.985
You ask this ten equal to 12?

37
00:02:07.985 --> 00:02:10.300
The answer no it's not.

38
00:02:10.300 --> 00:02:11.598
So you go larger, right?

39
00:02:11.598 --> 00:02:14.811
And you go right and
you look in the middle of the larger half,

40
00:02:14.811 --> 00:02:19.200
which is between, in this case
just between 10 and 12, right?

41
00:02:19.200 --> 00:02:21.829
And then you just look there,
which is going to be 12.

42
00:02:21.829 --> 00:02:25.327
And then you ask as well be equals to 12,
yes,

43
00:02:25.327 --> 00:02:28.430
you found the element that makes sense.

44
00:02:28.430 --> 00:02:32.930
Just keeps cutting the array in
half until eventually you find

45
00:02:32.930 --> 00:02:35.878
that the item that you're looking for.

46
00:02:35.878 --> 00:02:41.128
One of the questions you might
ask is like, if it's of length 3,

47
00:02:41.128 --> 00:02:44.768
do I go to the smaller side or
the larger side?

48
00:02:44.768 --> 00:02:46.945
Doesn't matter, just pick 1.

49
00:02:46.945 --> 00:02:50.606
I think in this particular case
I went to the smaller side,

50
00:02:50.606 --> 00:02:53.908
which is why we looked at
10 first instead of 12.

51
00:02:57.010 --> 00:03:01.560
Any questions about
the algorithm of binary search?

52
00:03:01.560 --> 00:03:03.300
Is this best done recursively?

53
00:03:03.300 --> 00:03:07.695
No, I would say this is much better
done with a loop than it is.

54
00:03:07.695 --> 00:03:11.610
Yeah, I guess you could totally
do this with recursively.

55
00:03:11.610 --> 00:03:15.328
I probably would do this with had loop.

56
00:03:18.517 --> 00:03:21.909
Let me just make sure that I'm
not telling you lies here.

57
00:03:24.770 --> 00:03:25.853
Search.

58
00:03:32.143 --> 00:03:37.257
Yep, either way though, I mean, honestly,

59
00:03:37.257 --> 00:03:42.778
binary search,
even on extremely large arrays.

60
00:03:45.083 --> 00:03:45.780
Is really effective.

61
00:03:45.780 --> 00:03:49.852
So you probably would be fine to do
it in recursive ways as well, but

62
00:03:49.852 --> 00:03:51.540
my solution is iterative.

63
00:03:54.790 --> 00:03:56.409
What is the O of this?

64
00:03:58.020 --> 00:04:01.820
Well, we're not looking at every
element in the array, right?

65
00:04:01.820 --> 00:04:06.478
So it's not n it's gonna be less than n
because we're just starting in the middle

66
00:04:06.478 --> 00:04:09.300
and then we're going to
the side that we need to.

67
00:04:09.300 --> 00:04:11.520
So we're not looking at
every element in the array.

68
00:04:11.520 --> 00:04:15.520
So less than n, we do have to look
at some elements in the array.

69
00:04:15.520 --> 00:04:20.651
And it also we get economies of scale
if we have extremely large datasets.

70
00:04:20.651 --> 00:04:24.460
So that puts us at login, right?

71
00:04:24.460 --> 00:04:30.710
So binary search as an algorithm
is time complexity, login.

72
00:04:30.710 --> 00:04:34.028
And if you don't create any
additional data in the process, so

73
00:04:34.028 --> 00:04:35.285
it's constant space.

