WEBVTT

1
00:00:00.120 --> 00:00:05.857
That is radix sort, I'm gonna give you
some time now to work on the exercise,

2
00:00:05.857 --> 00:00:08.610
just head over to your code sandbox.

3
00:00:09.860 --> 00:00:14.135
Head over to the radix sort test dot js,
and then we'll come back and

4
00:00:14.135 --> 00:00:16.392
we'll do this exercise together.

5
00:00:22.984 --> 00:00:27.933
So, let's do the get digit function first,
so

6
00:00:27.933 --> 00:00:32.156
const string equals number two string.

7
00:00:32.156 --> 00:00:38.228
Reason why we do this is now we
can actually use chart at, right,

8
00:00:38.228 --> 00:00:45.610
which is a little kit that allows us
to return one part of the number.

9
00:00:45.610 --> 00:00:50.034
You also totally could have done
some mathematics with mod and

10
00:00:50.034 --> 00:00:53.620
that would work as well
that might even be easier.

11
00:00:54.740 --> 00:00:58.213
I don't know this is the way I did it,
you can do it however you want to.

12
00:00:58.213 --> 00:01:05.063
Okay, const size equals string dot length,

13
00:01:05.063 --> 00:01:10.651
const mod equals, longest number,

14
00:01:10.651 --> 00:01:16.555
minus size and then we return string.

15
00:01:16.555 --> 00:01:19.908
place minus mod or 0.

16
00:01:24.574 --> 00:01:28.822
So now this will return, so
now I can just use this getdigit

17
00:01:28.822 --> 00:01:33.258
function to get back a specific
digit that I'm looking for.

18
00:01:35.688 --> 00:01:40.860
Okay, get longest number, there's
again many ways to figure this out.

19
00:01:41.970 --> 00:01:47.538
But what we're gonna do here is,
let longest equals to 0.

20
00:01:47.538 --> 00:01:51.820
I mean, you could do this with a reduce.

21
00:01:51.820 --> 00:01:56.934
There's a bunch of ways to do this,
but let's just do it with for

22
00:01:56.934 --> 00:02:00.930
a for loop, set like fortnight,
no, it's not.

23
00:02:02.390 --> 00:02:06.446
Alright, let i equals zero,

24
00:02:06.446 --> 00:02:11.151
i is less than My get longest number

25
00:02:11.151 --> 00:02:16.017
right should be an array is less than

26
00:02:16.017 --> 00:02:20.236
array dot length i plus plus and

27
00:02:20.236 --> 00:02:24.310
then counts current length.

28
00:02:24.310 --> 00:02:29.127
Length equals array

29
00:02:29.127 --> 00:02:33.942
at i dot 2 string dot

30
00:02:33.942 --> 00:02:38.580
length, right.

31
00:02:38.580 --> 00:02:44.990
So if this was 3000, this would return
current length would be 4, right?

32
00:02:44.990 --> 00:02:47.304
And I'm just looking for
what the longest number is there so

33
00:02:47.304 --> 00:02:49.028
I can know what to provide
get digit up here.

34
00:02:53.417 --> 00:02:57.729
Okay, and then I'm gonna say,

35
00:02:57.729 --> 00:03:02.210
longest equals current length.

36
00:03:03.730 --> 00:03:08.583
Is greater than longest,
then it's gonna be

37
00:03:08.583 --> 00:03:13.710
equal to current length,
otherwise longest.

38
00:03:13.710 --> 00:03:16.610
This is a ternary for those of you
that are not familiar with it,

39
00:03:16.610 --> 00:03:19.380
it's just a condensed if statement right?

40
00:03:19.380 --> 00:03:23.039
So if current length is longer than
the new longest will be the current length

41
00:03:23.039 --> 00:03:25.970
otherwise it will stay what it
already was which is longest.

42
00:03:25.970 --> 00:03:30.368
You could totally put this
in an if statement as well,

43
00:03:30.368 --> 00:03:35.860
I just like turn arrays, okay,
then down here we return longest.

44
00:03:37.100 --> 00:03:43.860
So now we have a function that'll get
us the longest number in array, cool.

45
00:03:48.530 --> 00:03:57.480
Const longest number is equal get
the longest number with the array.

46
00:03:57.480 --> 00:04:01.103
So that's that, okay, here we just need

47
00:04:01.103 --> 00:04:05.879
to create the data structure
that we're going to use.

48
00:04:05.879 --> 00:04:11.671
I just did like a little shortcut here
a const buckets equals new array.

49
00:04:16.185 --> 00:04:23.578
Of length 10 dot fill,

50
00:04:28.756 --> 00:04:36.562
Dot map, And this will just fill
it with brand new empty arrays.

51
00:04:36.562 --> 00:04:38.929
You totally could have made a for loop or

52
00:04:38.929 --> 00:04:43.594
something like that would make these
buckets as well, but suppose we say this

53
00:04:43.594 --> 00:04:48.008
line 42 all it does is it creates
an array of 10 empty arrays, right?

54
00:04:53.341 --> 00:04:54.610
Cool.

55
00:04:58.980 --> 00:05:04.307
So let's do this then we'll do a for

56
00:05:04.307 --> 00:05:07.867
loop, let i equals 0.

57
00:05:10.639 --> 00:05:17.218
I'm sorry,
let i equal longest number minus 1.

58
00:05:21.707 --> 00:05:27.050
I is greater than or
equal to zero, i minus minus.

59
00:05:29.710 --> 00:05:34.690
So we're gonna start like if this is,
4 is the longest up here,

60
00:05:34.690 --> 00:05:40.400
then we're to start at 3,
we're going to go down to 0, okay?

61
00:05:40.400 --> 00:05:43.780
First thing in here is while
there's something in the array.

62
00:05:43.780 --> 00:05:46.192
So while array dot length.

63
00:05:49.248 --> 00:05:53.141
We're gonna say const current
equals array dot shift, so

64
00:05:53.141 --> 00:05:58.083
we're gonna pull the first thing off
the array, I'm gonna say buckets,

65
00:06:00.903 --> 00:06:08.483
Getdigit, Current, i, longest number.

66
00:06:11.013 --> 00:06:14.886
Calling this getDigit function
that we have up here, right?

67
00:06:17.823 --> 00:06:20.892
Dot push current, okay,

68
00:06:20.892 --> 00:06:25.780
so we'll have those ten arrays, right?

69
00:06:25.780 --> 00:06:28.910
And we're just enqueuing it
somewhere into one of these, right?

70
00:06:28.910 --> 00:06:34.227
So if this was like this one here,
let's say 1244.

71
00:06:34.227 --> 00:06:37.441
For the first iteration,
it's going to grab this four number and

72
00:06:37.441 --> 00:06:40.840
it's going to push it into the four spot,
the four buckets, right?

73
00:06:43.000 --> 00:06:45.750
And then when we're done,
we will pull that back out.

74
00:06:48.910 --> 00:06:52.460
But let's see the going back
to our little graphic here.

75
00:06:53.670 --> 00:06:56.386
It's this part that we're doing,
the part where it's pushing it in.

76
00:07:00.389 --> 00:07:03.429
Right, that's what this
first enqueuing is doing.

77
00:07:03.429 --> 00:07:07.061
So we're pushing into these 0
through 9 buckets over here.

78
00:07:11.961 --> 00:07:14.890
Okay, that's what that
while loop is gonna do.

79
00:07:14.890 --> 00:07:19.083
So after this is done, we're gonna have
all of our numbers bucketed by whatever

80
00:07:19.083 --> 00:07:20.470
place we're sorting by.

81
00:07:24.000 --> 00:07:30.175
Okay, and then we have to go ahead and
dq all of these,

82
00:07:30.175 --> 00:07:34.860
so we're gonna say for let J equal zero.

83
00:07:37.000 --> 00:07:43.006
J is less than 10 J plus, plus,
you could also say,buckets

84
00:07:43.006 --> 00:07:47.637
dot length, but
it's always going to be 10.

85
00:07:47.637 --> 00:07:54.590
Right, unless you're gonna be like
doing hexadecimal bucket sorting.

86
00:07:54.590 --> 00:08:00.788
I mean you could there's no
reason why it wouldn't work.

87
00:08:00.788 --> 00:08:05.383
Why while, buckets, J dot length,

88
00:08:05.383 --> 00:08:09.848
you're just going to pop them off.

89
00:08:09.848 --> 00:08:14.242
Array dot push buckets J shift, so

90
00:08:14.242 --> 00:08:22.271
we're going to be taking them off
of the front of the buckets and

91
00:08:22.271 --> 00:08:28.499
you're going to be pushing
them onto the array.

92
00:08:32.565 --> 00:08:37.597
Then down here you
are going to return array.

93
00:08:42.582 --> 00:08:44.803
All right.

94
00:08:46.845 --> 00:08:51.863
So let's make sure that
this is not auto running,

95
00:08:51.863 --> 00:08:56.071
we're gonna take this off of skip.

96
00:08:56.071 --> 00:09:01.043
And we're gonna see if
we can run this code

97
00:09:01.043 --> 00:09:06.442
under radix sort make
sure that this actually

98
00:09:06.442 --> 00:09:11.430
is running radix sort right there works.

99
00:09:14.710 --> 00:09:18.790
So, let's take this one off to see if
it works with even bigger number sets.

100
00:09:20.420 --> 00:09:25.720
Run it again and
looks like it's still working, cool.

101
00:09:28.280 --> 00:09:32.849
So just for fun,
I'm gonna copy all of this.

102
00:09:38.477 --> 00:09:39.839
Ones that don't need that and

103
00:09:39.839 --> 00:09:43.549
let's hop over to our sort visualizer
because this actually will work for that.

104
00:09:47.407 --> 00:09:50.535
And paste this over here and

105
00:09:50.535 --> 00:09:56.388
I'm just going to call this
sort instead of radix.

106
00:10:00.109 --> 00:10:01.039
Okay, and then we'll head over to our
little browser here, we'll click on sort.

107
00:10:09.421 --> 00:10:15.241
And let's also modify

108
00:10:15.241 --> 00:10:22.906
this just a second with this.

109
00:10:25.938 --> 00:10:31.537
Okay, and then here,

110
00:10:31.537 --> 00:10:38.910
when I call it with sort nuns.

111
00:10:41.500 --> 00:10:43.320
And then here we do have to snapshot.

112
00:10:44.910 --> 00:10:50.188
So, we'll first snapshot with the array,

113
00:10:50.188 --> 00:10:54.754
snap shot array and let's snapshot at

114
00:10:54.754 --> 00:10:59.936
the end of all every
one of these snapshot.

115
00:10:59.936 --> 00:11:06.146
Here with the array, so
we're only getting seven unique snapshots,

116
00:11:06.146 --> 00:11:13.610
right because we're only doing it at the
end of all the bucketing and D bucketing.

117
00:11:13.610 --> 00:11:18.481
We could code up a more
capable bucket visualizer but

118
00:11:18.481 --> 00:11:21.700
this is what we have for right now.

119
00:11:23.640 --> 00:11:28.582
But notice after one iteration
all the zeros are at

120
00:11:28.582 --> 00:11:33.172
the beginning 1, right, 2,3,4,5,

121
00:11:33.172 --> 00:11:37.761
right, and
then after the second iteration,

122
00:11:37.761 --> 00:11:42.370
it's 0,01,02,03,05,06.

123
00:11:42.370 --> 00:11:47.575
Right, after the third iteration,
it's sorted by the hundreds,

124
00:11:47.575 --> 00:11:51.430
so 001,002,008, so on and so forth.

125
00:11:51.430 --> 00:11:56.180
After the third iteration, it's sorted by
the thousands than the tens of thousands.

126
00:11:56.180 --> 00:11:59.540
And then afterwards,
this bottom one is totally sorted.

127
00:12:07.310 --> 00:12:11.260
Pretty wild, right, I can't imagine
how people come up with these things.

128
00:12:11.260 --> 00:12:15.990
So the question is, what's mod here,
I didn't know what to call it.

129
00:12:15.990 --> 00:12:18.634
[LAUGH] Because you need
the last number in the array and

130
00:12:18.634 --> 00:12:21.570
then we're counting backwards, right?

131
00:12:21.570 --> 00:12:25.456
Which is a weird way to do math and
code, right.

132
00:12:25.456 --> 00:12:30.370
So on the zero with iteration I need
the ones place which is going to be

133
00:12:30.370 --> 00:12:33.145
the last index in the string, right?

134
00:12:33.145 --> 00:12:39.115
So if I have, let's say,
the longest number is 100.

135
00:12:39.115 --> 00:12:41.635
And I'm asking for the zero with element,

136
00:12:41.635 --> 00:12:45.305
actually the two index of that string,
right?

137
00:12:45.305 --> 00:12:49.015
So, this took me a bit of trial and
error to get this exactly right.

138
00:12:51.110 --> 00:12:54.749
So if it took you some trial error or you
didn't find like couldn't figure it out,

139
00:12:54.749 --> 00:12:55.610
I do not blame you.

140
00:12:55.610 --> 00:12:59.263
This actually probably took me 20 minutes
of just like following my brow with my

141
00:12:59.263 --> 00:13:01.900
computer before I finally figured it out.

142
00:13:01.900 --> 00:13:05.567
Valid question, does this kind of
defeat the purpose of the entire

143
00:13:05.567 --> 00:13:08.000
sword like in terms of
like its complexity?

144
00:13:09.780 --> 00:13:13.338
Let's go with yes and no,
sorted slash, it depends, right,

145
00:13:13.338 --> 00:13:15.500
everyone loves that damn answer now.

146
00:13:17.070 --> 00:13:20.130
One, you're not really doing
much heavy lifting here, right?

147
00:13:20.130 --> 00:13:21.834
Like you're not doing any comparisons,

148
00:13:21.834 --> 00:13:25.152
you're not doing anything like that
really you're just asking for the length.

149
00:13:25.152 --> 00:13:29.600
So on one hand, not particularly,
on the other hand,

150
00:13:29.600 --> 00:13:35.390
you are looking at every number here and
grabbing the lengths.

151
00:13:35.390 --> 00:13:39.300
We do need this longest number just to
make sure that the math here is correct.

152
00:13:39.300 --> 00:13:42.468
I'm sure there's probably a more
efficient way of doing this.

153
00:13:42.468 --> 00:13:45.540
But this is already hard
enough to conceptualize.

154
00:13:45.540 --> 00:13:50.156
So I wanted to kind of take a shortcut so
that you all could probably focus on

155
00:13:50.156 --> 00:13:54.774
the more important part of this,
which is the bucketing part of this, but

156
00:13:54.774 --> 00:14:02.146
you could probably What
do I want to say here,

157
00:14:02.146 --> 00:14:07.040
you could probably combine this
into one more effective function.

158
00:14:07.040 --> 00:14:10.980
Right, but I didn't wanna overload
you with with concepts here.

159
00:14:12.620 --> 00:14:16.469
And in other words, I haven't
thought of a better way to do it but

160
00:14:16.469 --> 00:14:17.908
there probably is one.

161
00:14:19.353 --> 00:14:23.696
But I guess another thing I would say
is like if you were actually deploying

162
00:14:23.696 --> 00:14:27.562
radix sort in production and
you were writing the code yourself.

163
00:14:27.562 --> 00:14:31.850
You'd probably have to have some knowledge
beforehand of what kind of ranges of

164
00:14:31.850 --> 00:14:34.090
numbers you'd be dealing with, right?

165
00:14:36.280 --> 00:14:37.946
Well, I imagined many
of you did get met and

166
00:14:37.946 --> 00:14:40.650
some of you probably
didn't get it as well.

167
00:14:40.650 --> 00:14:45.300
That's totally fine, this is kind of
again, a difficult one to conceptualize.

168
00:14:45.300 --> 00:14:49.670
But hopefully you're grasping at
least the the method here, right?

169
00:14:49.670 --> 00:14:53.623
I'm actually less concerned that you
successfully pass the unit test and

170
00:14:53.623 --> 00:14:56.820
I'm more concerned about does
the sort makes sense to you.

171
00:14:58.520 --> 00:15:02.580
Like that's the most important thing
here is like this, this kind of pattern

172
00:15:02.580 --> 00:15:07.290
of like, hey, let's take this apart and
compare things piece by piece, right?

173
00:15:07.290 --> 00:15:12.361
That kind of concept is one that I really
want you to walk away with here, because

174
00:15:12.361 --> 00:15:17.600
that actually could be useful to you later
while you're writing code somewhere.

175
00:15:17.600 --> 00:15:22.420
You also totally could write radix sort
for something like strings, right?

176
00:15:22.420 --> 00:15:26.483
Instead of queueing this buckets here,
in an array of 10,

177
00:15:26.483 --> 00:15:28.561
this could be an array of 26.

178
00:15:28.561 --> 00:15:31.650
If you're doing like the English alphabet,
right?

179
00:15:31.650 --> 00:15:36.802
And you could do bucket sorting that way,
or radix sort rather using letters,

180
00:15:36.802 --> 00:15:40.250
right, that totally works as well or
hexadecimal.

181
00:15:40.250 --> 00:15:45.490
And it would be 16 buckets or binary
actually, binaries are really effective.

182
00:15:45.490 --> 00:15:50.092
Use case for this, right, because
you would just be queuing zeros and

183
00:15:50.092 --> 00:15:51.110
ones, right?

184
00:15:53.000 --> 00:15:56.094
We should go pretty fast, so, yeah,

185
00:15:56.094 --> 00:16:01.233
just another interesting kind
of arrow to keep in your quiver.

