WEBVTT

1
00:00:00.681 --> 00:00:05.060
The next Sort that I wanna talk about
with you is one called Radix Sort.

2
00:00:05.060 --> 00:00:09.820
Sometimes this is called Bucket Sort,
though actually technically Bucket Sort is

3
00:00:09.820 --> 00:00:12.612
something different,
but it's very similar.

4
00:00:12.612 --> 00:00:19.080
In any case, this is something
called a non-comparison sort,

5
00:00:19.080 --> 00:00:23.873
in that you'd never
actually directly compare

6
00:00:23.873 --> 00:00:29.291
numbers to each other use
a method called bucketing.

7
00:00:29.291 --> 00:00:32.638
And you can see kind of see that
happening here, it's really strange.

8
00:00:32.638 --> 00:00:37.800
So you can't even really measure it with
big O in the sense that, it's not gonna

9
00:00:37.800 --> 00:00:42.903
be N squared, or anything like that,
it's actually going to be I think, MK?

10
00:00:42.903 --> 00:00:46.993
[LAUGH] But
we'll get into that here in just a second.

11
00:00:46.993 --> 00:00:50.991
So yeah it's a non-comparison sorting.

12
00:00:50.991 --> 00:00:55.866
We do something by actually
comparing different number of places

13
00:00:55.866 --> 00:00:58.974
instead of comparing numbers directly.

14
00:00:58.974 --> 00:01:02.441
And I'll get into that
here in just a second.

15
00:01:02.441 --> 00:01:05.340
So we're gonna sort parts
of the array first, right?

16
00:01:05.340 --> 00:01:10.235
So let's take a look at this array
that I have here in my notes 109, 224,

17
00:01:10.235 --> 00:01:11.357
901 and 58.

18
00:01:11.357 --> 00:01:14.879
So the first thing that you're
gonna do is you're actually

19
00:01:14.879 --> 00:01:16.931
going to sort it by the ones first.

20
00:01:16.931 --> 00:01:21.870
So 9, 4, 1, 8.

21
00:01:21.870 --> 00:01:29.318
So you can see here, after the first pass,
we have 901, 224, 58 and 129, right?

22
00:01:29.318 --> 00:01:33.366
So you can see it's actually
sorted by the ones place.

23
00:01:33.366 --> 00:01:37.900
Then we're going to sort it again but
by the tens place, right?

24
00:01:37.900 --> 00:01:43.321
So after the second round,
we have 901, 109,

25
00:01:43.321 --> 00:01:50.796
224 and 58, then we're gonna sort
of one more time by the hundreds.

26
00:01:50.796 --> 00:01:53.445
So at this point we'll have 058, right?

27
00:01:53.445 --> 00:01:58.582
000 here, 109, 224 and 901.

28
00:01:58.582 --> 00:02:04.119
And you can see after having done that,
sorting it by the hundreds

29
00:02:04.119 --> 00:02:10.673
place which is the largest place that
there is we end up having a sorted array.

30
00:02:10.673 --> 00:02:13.200
Kind of a mind bending way of sorting.

31
00:02:13.200 --> 00:02:16.547
It's not something that a human would
ever kind of think of directly.

32
00:02:16.547 --> 00:02:20.705
So you can kind of see
that happening here.

33
00:02:20.705 --> 00:02:25.329
It'll sort them into buckets by zeros,
ones, twos, threes and

34
00:02:25.329 --> 00:02:29.296
fours, and you do it for
however many places there are.

35
00:02:29.296 --> 00:02:31.225
So in this particular case,
there's up to 1000.

36
00:02:31.225 --> 00:02:33.631
So we do that sort four different times.

37
00:02:38.948 --> 00:02:40.024
Makes sense?

38
00:02:40.024 --> 00:02:42.335
Sort of?

39
00:02:45.030 --> 00:02:48.169
So, again, what's the big O of this?

40
00:02:48.169 --> 00:02:52.795
The big O of this is gonna be
a little bit different than we're

41
00:02:52.795 --> 00:02:57.423
used to because we have to account for
this how many buckets or

42
00:02:57.423 --> 00:03:01.164
how many times we have to do the sorting,
right?

43
00:03:01.164 --> 00:03:04.979
So we're gonna call that term k or

44
00:03:04.979 --> 00:03:09.348
w in this case, let's just go with k.

45
00:03:09.348 --> 00:03:13.931
And instead of being On squared,
you end up being which is n times n,

46
00:03:13.931 --> 00:03:15.713
you end up being n times k.

47
00:03:15.713 --> 00:03:19.872
So it's kind of n squared
in the sense that it's two

48
00:03:19.872 --> 00:03:23.462
different terms multiplied to each other.

49
00:03:23.462 --> 00:03:26.782
So you might ask me,
is this better than n log n?

50
00:03:26.782 --> 00:03:32.272
Well, as you may have guessed being this
fun of the course, it depends, right?

51
00:03:32.272 --> 00:03:35.422
It depends on what the distribution
of your numbers are, right?

52
00:03:35.422 --> 00:03:40.760
So if you have a lot of very long numbers
that are distributed really well, right?

53
00:03:40.760 --> 00:03:46.908
So there's like kind of a uniform
distribution with lots of terms, right?

54
00:03:46.908 --> 00:03:52.605
So if you have, hundreds of 1000s that
are distributed across that entire range,

55
00:03:52.605 --> 00:03:56.442
then radix sort actually ends
up being a pretty good sort.

56
00:03:56.442 --> 00:04:00.586
But if you're sorting 500 numbers and
they're all between 0 and 100,

57
00:04:00.586 --> 00:04:02.530
it tends to be kind of inefficient and

58
00:04:02.530 --> 00:04:06.693
you'd be better off with something like
quick-sort or something like that.

59
00:04:09.608 --> 00:04:13.546
So, spatial complexity n being n plus k,

60
00:04:13.546 --> 00:04:19.637
where n is the length and
k is how many places there are to sort by.

61
00:04:19.637 --> 00:04:26.544
So it's not great on spatial complexity
because you have to do a lot of bucketing.

62
00:04:26.544 --> 00:04:30.474
So that's why it's only favorite
employees specific circumstances.

63
00:04:30.474 --> 00:04:35.617
But I wanted to show you how
you can sort things without

64
00:04:35.617 --> 00:04:40.769
actually ever directly comparing numbers,
right?

65
00:04:40.769 --> 00:04:42.023
So like in this case,

66
00:04:42.023 --> 00:04:46.070
109 is actually never directly
compared to like 901, right?

67
00:04:46.070 --> 00:04:50.216
The only thing they're ever compared
by is just by these buckets.

68
00:04:53.667 --> 00:04:58.090
So I'm gonna give you a chance to try and
code this up.

69
00:04:58.090 --> 00:05:00.527
I'm gonna help you kinda get started here.

70
00:05:04.866 --> 00:05:07.026
That's fine.

71
00:05:08.970 --> 00:05:11.977
And actually, I'll just come back to here.

72
00:05:11.977 --> 00:05:14.234
That was quick-sort.

73
00:05:14.234 --> 00:05:16.444
Let's get into radix sort.

74
00:05:21.801 --> 00:05:23.355
Okay, so you can see here,

75
00:05:23.355 --> 00:05:26.877
these are all the numbers that
you're going to be sorting by.

76
00:05:26.877 --> 00:05:30.052
And if you wanna just do something for
fun here, you can actually do this.

77
00:05:30.052 --> 00:05:32.964
It'll just sort 99 very long numbers for
you.

78
00:05:32.964 --> 00:05:35.580
So you can see how efficient
this actually can be.

79
00:05:35.580 --> 00:05:37.997
But this is kind of
extra credit down here.

80
00:05:37.997 --> 00:05:40.786
Let's focus on this one up here.

81
00:05:44.834 --> 00:05:49.019
Okay, so we're gonna do a radix sort here.

82
00:05:49.019 --> 00:05:53.908
So, I'm gonna just advise
you on some helper

83
00:05:53.908 --> 00:05:59.193
functions I think you should code for
yourself.

84
00:05:59.193 --> 00:06:03.405
One should be function getDigit.

85
00:06:05.906 --> 00:06:10.210
We give it a number, a place,
and the longest number.

86
00:06:16.930 --> 00:06:23.320
So for example,
if I put into let's say I have a number

87
00:06:23.320 --> 00:06:28.719
like 1391, so that would be the number.

88
00:06:31.473 --> 00:06:36.998
And I give it a place of 0
cuz I want the 0 with place.

89
00:06:36.998 --> 00:06:39.338
And I have the longest number in here.

90
00:06:42.197 --> 00:06:45.937
It's like, correct my doing got to
make sure I'm doing this right way.

91
00:06:54.986 --> 00:06:57.472
And then the longest number in here.

92
00:06:57.472 --> 00:07:01.347
So the longest number would
be like the longest number in

93
00:07:01.347 --> 00:07:03.250
your particular set rise.

94
00:07:03.250 --> 00:07:08.799
So if I had a number like 30,000 in
my set, or let's even look at this,

95
00:07:08.799 --> 00:07:12.817
the longest number in this
set is of length 4, right?

96
00:07:12.817 --> 00:07:18.824
So 3000, 1244, so the longest number
in that particular case would be 4.

97
00:07:20.641 --> 00:07:22.610
Actually is there.

98
00:07:22.610 --> 00:07:28.929
And 4 in this getDigit
that should return here.

99
00:07:35.045 --> 00:07:39.304
The one right?

100
00:07:39.304 --> 00:07:45.611
Number equals that place equals that and

101
00:07:45.611 --> 00:07:49.512
longest number equals 4

102
00:08:03.729 --> 00:08:07.797
Sorry, I'm just making sure
that I get this correct.

103
00:08:07.797 --> 00:08:11.905
Anyway, this getDigit helper
here is gonna help you here.

104
00:08:11.905 --> 00:08:15.229
So that you can just provide
these numbers here so

105
00:08:15.229 --> 00:08:18.158
that it helps you with the bucket sorting.

106
00:08:18.158 --> 00:08:25.657
Then I would also just write
a function called get longest number?

107
00:08:25.657 --> 00:08:27.863
A lot of times you'll know this
going into your data set, right?

108
00:08:27.863 --> 00:08:32.496
You'll know that the longest
stuff will be of length 4,

109
00:08:32.496 --> 00:08:36.461
length 5, or length 6 or
something like that.

110
00:08:36.461 --> 00:08:39.658
But in this particular case,
I will just provide that here,

111
00:08:39.658 --> 00:08:45.162
get longest number And
in this particular case,

112
00:08:45.162 --> 00:08:49.735
get longest member if you call it on
this data set, it would return 4, right?

113
00:08:56.018 --> 00:09:00.982
Right, the reason why you need longest
number here, that's what I was trying to

114
00:09:00.982 --> 00:09:05.581
remember is, let's say the longest
number in your data set is 3000 but

115
00:09:05.581 --> 00:09:07.495
you give it number 3, right?

116
00:09:07.495 --> 00:09:11.993
So the longest number here is gonna,
or so not the longest number, but

117
00:09:11.993 --> 00:09:13.835
the place will be 4 on that.

118
00:09:13.835 --> 00:09:17.269
So you'll actually get back to 0,
does that makes sense?

119
00:09:19.534 --> 00:09:25.161
Okay, and then let's go into
what radix sorting is gonna do.

120
00:09:25.161 --> 00:09:27.745
So find the longest number

121
00:09:30.954 --> 00:09:37.461
Create how many buckets you need.

122
00:09:37.461 --> 00:09:43.749
In our case, since we're doing base 10
math, this will be an array of arrays.

123
00:09:52.142 --> 00:09:56.924
Right and then you'll have a bucket for
0123456789.

124
00:09:58.493 --> 00:10:03.412
Okay, then here you'll have a for loop For

125
00:10:03.412 --> 00:10:07.352
how many iterations you need to do.

126
00:10:07.352 --> 00:10:09.695
So that will be based on
the longest number, right?

127
00:10:09.695 --> 00:10:14.938
Because you need to do one iteration for
each of the longest numbers.

128
00:10:14.938 --> 00:10:18.733
And then basically what you do is you
gonna throw them in the buckets and

129
00:10:18.733 --> 00:10:22.350
then you're gonna dequeue them
back out into your final results.

130
00:10:22.350 --> 00:10:25.219
And you'll keep doing that back and forth
until you end up with the correct answer.

131
00:10:28.369 --> 00:10:33.492
So inside that for loop you'll have

132
00:10:42.621 --> 00:10:48.635
Nq, which is the word for
just like throwing something

133
00:10:48.635 --> 00:10:53.746
into an array the numbers
into their buckets.

134
00:10:56.343 --> 00:10:57.693
This will probably be a while loop.

135
00:10:57.693 --> 00:10:59.043
That's why I have that.

136
00:10:59.043 --> 00:11:03.811
And then here we're gonna have another for

137
00:11:03.811 --> 00:11:09.308
Loop, For

138
00:11:09.308 --> 00:11:14.206
each bucket where you

139
00:11:14.206 --> 00:11:20.741
dequeue all of the results.

140
00:11:23.629 --> 00:11:26.029
That's more or less kinda step-by-step
what you're going to be doing.

141
00:11:26.029 --> 00:11:29.724
I kinda diagram this modality because it's
kinda an abstract one to think about.

142
00:11:29.724 --> 00:11:34.388
But the idea again,
let's just go back to our visual

143
00:11:34.388 --> 00:11:38.208
here to kind of just
take this step by step.

144
00:11:38.208 --> 00:11:42.178
So notice for each one of these,

145
00:11:42.178 --> 00:11:47.922
it's enqueuing them I
just make that bigger.

146
00:11:47.922 --> 00:11:49.375
There we go.

147
00:11:49.375 --> 00:11:51.913
First by the 0's, right?

148
00:11:51.913 --> 00:11:56.134
0's, 1's, 2's, 3's, 7's, right?

149
00:11:56.134 --> 00:11:59.680
You can see the highlighted in red of
the one that it's enqueuing at the moment.

150
00:12:02.115 --> 00:12:06.254
Then, what it does notice,
it just dequeues them out in order, right?

151
00:12:06.254 --> 00:12:11.340
So, all the 0's are coming out,
all the 1's are coming out.

152
00:12:11.340 --> 00:12:15.800
And so after the first iteration
we have this array that's

153
00:12:15.800 --> 00:12:18.631
sorted by the 1's places, right?

154
00:12:18.631 --> 00:12:22.654
And then it does it again, notice that
the red ones are now the 10's, right?

155
00:12:22.654 --> 00:12:25.801
So now we're sorting by the 10's place.

156
00:12:25.801 --> 00:12:27.542
And that goes back into these buckets.

157
00:12:27.542 --> 00:12:29.951
Notice that nothing's ever
being compared to each other.

158
00:12:29.951 --> 00:12:31.675
We're never asking,
is this bigger than this?

159
00:12:31.675 --> 00:12:35.385
We're just putting in,
into the buckets and

160
00:12:35.385 --> 00:12:39.397
then back out into
the general results already.

161
00:12:39.397 --> 00:12:43.100
Okay, so this gets put back into
these buckets by the 10s place.

162
00:12:43.100 --> 00:12:48.081
Notice that 1and 7 are in the 0,
right because they have no 10s place.

163
00:12:48.081 --> 00:12:50.397
And then these just get
dequeued out again.

164
00:12:50.397 --> 00:12:56.702
And now notice that it's sorted by
the 10s and the 1s place right so

165
00:12:56.702 --> 00:13:01.917
1, 7, 10 20, 21, 20, 22, 27, 30,

166
00:13:01.917 --> 00:13:06.500
38, 43, 77, 80, 82, 93, 99.

167
00:13:06.500 --> 00:13:09.818
And then we do it again for the hundreds.

168
00:13:09.818 --> 00:13:12.704
And then notice that it's
sorted now by the hundreds.

169
00:13:15.799 --> 00:13:20.835
Right, notice that 793 is
the last one in here now.

170
00:13:20.835 --> 00:13:25.185
Whereas one is still the first one,
and then you do it one more time for

171
00:13:25.185 --> 00:13:26.769
the 1,000s place.

172
00:13:28.411 --> 00:13:31.774
And then you dequeue all that back,
and there you go.

173
00:13:31.774 --> 00:13:36.305
Now everything is sorted without ever
asking is this bigger than this?

174
00:13:36.305 --> 00:13:38.087
There's no If statements in there,

175
00:13:38.087 --> 00:13:40.560
it's just putting things in in and
out of buckets.

