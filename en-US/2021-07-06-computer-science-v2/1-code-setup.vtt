WEBVTT

1
00:00:00.183 --> 00:00:05.201
This course we're gonna be
doing inside of code sandbox.

2
00:00:05.201 --> 00:00:09.163
So, I put a box in here you can click and
say edit on code sandbox.

3
00:00:14.406 --> 00:00:16.013
Let's just get you oriented a little bit.

4
00:00:16.013 --> 00:00:18.580
It might say that to you,
it's fine to say some of the main branch.

5
00:00:24.540 --> 00:00:27.338
As you may notice this looks
a lot like Visual Studio code.

6
00:00:27.338 --> 00:00:31.978
It's cuz it is very similar to
Visual Studio code cuz it's embedding

7
00:00:31.978 --> 00:00:33.580
VS code in the browser.

8
00:00:33.580 --> 00:00:37.182
What you'll see here is you'll see,

9
00:00:37.182 --> 00:00:41.243
we have this project
that is a GitHub repo.

10
00:00:41.243 --> 00:00:44.901
You can see here it's bt holds slash
out of the algorithms exercises.

11
00:00:44.901 --> 00:00:49.479
So, if you find any mistakes,
feel free to open a PR there.

12
00:00:49.479 --> 00:00:51.249
And we have these source documents.

13
00:00:51.249 --> 00:00:54.166
This is gonna be helpful for
us when we're doing sorts and trees,

14
00:00:54.166 --> 00:00:55.930
they're kind of like little visuals.

15
00:00:55.930 --> 00:01:00.511
Visualizer helpers but for the most part,
you can ignore the source directory.

16
00:01:00.511 --> 00:01:05.129
The stuff that you're most curious about
here are gonna be here in the specs.

17
00:01:05.129 --> 00:01:09.990
These are gonna be unit tests that you and
I are going to make passed together.

18
00:01:09.990 --> 00:01:14.607
So, if we look at the first one here,
which is going to be bubble sort

19
00:01:14.607 --> 00:01:18.338
right there, you can see
a bubble sort dot test dot j s.

20
00:01:18.338 --> 00:01:22.303
If I click on that one,
I have a little exercise here.

21
00:01:22.303 --> 00:01:26.991
It's got a little unit test here
that we're gonna make pass and

22
00:01:26.991 --> 00:01:30.448
then the code goes here
inside of bubblesort.

23
00:01:30.448 --> 00:01:35.577
So, that's what you and
I are gonna be doing all day today is

24
00:01:35.577 --> 00:01:41.027
just writing code that hopefully
makes these unit tests pass.

25
00:01:41.027 --> 00:01:44.248
Now there's also here,
the bubblesort solution.

26
00:01:44.248 --> 00:01:46.462
So, if I clicked on this,

27
00:01:46.462 --> 00:01:52.124
it would show me the actual solution
to whatever I was looking for.

28
00:01:52.124 --> 00:01:56.359
This isn't a test, no one's grading
you on this, if it's helpful for you,

29
00:01:56.359 --> 00:02:00.335
feel free to go ahead and peek over in
the solution anytime that you need to

30
00:02:00.335 --> 00:02:03.750
like I'm not up here judging you for
looking at the solution.

31
00:02:03.750 --> 00:02:08.345
Our number one shared goal together
as you are just to learn what

32
00:02:08.345 --> 00:02:10.695
about these algorithms right?

33
00:02:10.695 --> 00:02:15.293
Please Google everything, please look at
the solutions, please ask your friends.

34
00:02:15.293 --> 00:02:18.167
Ask your rubber ducky or
dog or something like that.

35
00:02:18.167 --> 00:02:20.179
I don't care, whatever it takes for
you to learn.

36
00:02:20.179 --> 00:02:23.635
That is the thing that you should
be doing and if you're not doing

37
00:02:23.635 --> 00:02:27.806
the thing that's gonna help you learn,
then you're doing the wrong thing.

38
00:02:27.806 --> 00:02:30.436
And again, the wrong thing to do
is just to sit there and stress.

39
00:02:30.436 --> 00:02:33.190
If you're doing that, let's reevaluate or

40
00:02:33.190 --> 00:02:36.241
re approach the problem
do something different.

41
00:02:36.241 --> 00:02:40.470
Now, the one thing I'm gonna say,
is there's a lot of value in struggle.

42
00:02:40.470 --> 00:02:44.485
And when I say that I mean sitting there
and just trying to reason through it,

43
00:02:44.485 --> 00:02:48.895
just using all of your brainpower to kind
of power through reasoning through that.

44
00:02:48.895 --> 00:02:53.464
And it's hard and it's exhausting and
this may not be what you want to do.

45
00:02:53.464 --> 00:02:57.232
But that moment of struggle is really
where I think you can learn a lot.

46
00:02:57.232 --> 00:03:01.869
So, I'm just going to invite you to
embrace the struggle a little bit.

47
00:03:01.869 --> 00:03:05.041
But don't embrace it so much that you
get stressed out or too stressed out.

48
00:03:05.041 --> 00:03:09.525
It's a little stressful and
we kind of have to deal with that.

49
00:03:09.525 --> 00:03:14.349
But you know yourself better than
anyone else just listen to yourself and

50
00:03:14.349 --> 00:03:15.780
follow your dreams.

51
00:03:15.780 --> 00:03:18.858
This is really what I wanna say.

52
00:03:18.858 --> 00:03:25.494
Anyway, let's, go ahead and get started.

53
00:03:25.494 --> 00:03:27.269
It is possible to run
this locally as well.

54
00:03:27.269 --> 00:03:30.237
So, this is actually all
just running with jest.

55
00:03:30.237 --> 00:03:31.661
Yeah, sorry one more thing.

56
00:03:31.661 --> 00:03:35.334
Let's go back here.

57
00:03:38.226 --> 00:03:42.397
Back here in code sandbox before I forget.

58
00:03:42.397 --> 00:03:46.600
She just leaves us open all right, so

59
00:03:46.600 --> 00:03:52.845
here in code sandbox,
you can see I have this browser.

60
00:03:52.845 --> 00:03:55.440
And then I have tests here.

61
00:03:55.440 --> 00:03:59.444
So if I click on tests,
again here on the right side,

62
00:03:59.444 --> 00:04:05.652
this is actually running just for me and I
can see all of my specs that are running.

63
00:04:05.652 --> 00:04:07.836
When I say a spec,
I just mean a test file.

64
00:04:07.836 --> 00:04:09.859
I don't know why I'm
stuck in that term spec.

65
00:04:09.859 --> 00:04:13.487
But like, I used to write ruby tests,
which is our spec, and

66
00:04:13.487 --> 00:04:18.415
that term just stuck in my brain and I'm
sorry, it's just not coming out I tried.

67
00:04:18.415 --> 00:04:23.385
Tried to shake the Ruby out of me and
it just didn't come out.

68
00:04:23.385 --> 00:04:25.614
So, that's what that's
why they're called specs.

69
00:04:25.614 --> 00:04:29.691
I think it's a Ruby term, or maybe it
came from before that's why I know it,

70
00:04:29.691 --> 00:04:30.668
anyway, tests.

71
00:04:30.668 --> 00:04:33.688
So, this will show you all the tests here.

72
00:04:33.688 --> 00:04:36.908
This is where you can actually see
where the tests are passing and

73
00:04:36.908 --> 00:04:40.496
where they're failing and
why they're failing and things like that.

74
00:04:40.496 --> 00:04:43.681
You can see here there's 53
tests currently passing and

75
00:04:43.681 --> 00:04:47.134
there's 97 tests total that
we're gonna try and make pass.

76
00:04:47.134 --> 00:04:49.624
Don't worry, you don't have to write
97 things some things have multiple

77
00:04:49.624 --> 00:04:50.134
tests on them.

78
00:04:50.134 --> 00:04:57.534
And then the last thing here
is down here in console.

79
00:04:57.534 --> 00:04:58.973
This is actually like the console.

80
00:04:58.973 --> 00:05:03.060
So, if you want to do a console log here,

81
00:05:03.060 --> 00:05:06.804
it will show up here in the dev tools.

82
00:05:06.804 --> 00:05:11.947
Yeah, so it'll show up here
in the dev tools as well.

83
00:05:11.947 --> 00:05:15.522
You can see here, this is actually
logging out from the code here, but

84
00:05:15.522 --> 00:05:19.173
this gets pretty noisy because code
sandbox puts a lot of stuff in here.

85
00:05:19.173 --> 00:05:22.862
So, I would say just use this one down
here where it says console down here.

86
00:05:22.862 --> 00:05:28.963
If you're looking at this and say like,
where all these numbers coming from,

87
00:05:28.963 --> 00:05:34.432
there's actually a, maze path
finding lesson that we're gonna do.

88
00:05:34.432 --> 00:05:38.356
And it actually has like
a little helper logger tool and

89
00:05:38.356 --> 00:05:41.011
that's where that's coming from.

90
00:05:41.011 --> 00:05:44.240
And we'll comment that
out in just a second.

91
00:05:44.240 --> 00:05:46.455
So, that we can ignore it a little bit.

92
00:05:46.455 --> 00:05:48.652
Okay.that's good to know.

93
00:05:48.652 --> 00:05:51.727
You can actually clone this repo and
run all the code locally and

94
00:05:51.727 --> 00:05:55.570
you can run it the Jest, that's all what
these tests are run by is Jest digest.

95
00:05:55.570 --> 00:05:58.909
So, feel free to go say git clone,
this repo and

96
00:05:58.909 --> 00:06:02.426
you can do NPM run test and
it'll run everything.

97
00:06:04.213 --> 00:06:07.809
Last thing here on all of the tests.

98
00:06:07.809 --> 00:06:12.551
So, you can see here
it says test dot skip.

99
00:06:12.551 --> 00:06:14.771
That means it's not gonna try and
run this unit test.

100
00:06:14.771 --> 00:06:19.560
I do this so that just like it's not,
you can see as soon as I do this,

101
00:06:19.560 --> 00:06:22.689
it's gonna say hey bubblesort is failing.

102
00:06:25.494 --> 00:06:29.580
Let's get rid of that for a second.

103
00:06:29.580 --> 00:06:33.987
That's because this test now it's trying
to run a test on bubblesort it's not

104
00:06:33.987 --> 00:06:34.598
working.

105
00:06:34.598 --> 00:06:39.076
So, I would just say take this
test by test and do it that way.

106
00:06:39.076 --> 00:06:40.832
One more thing here.

107
00:06:40.832 --> 00:06:45.956
I would go ahead and
just fork this repo to your own repo.

108
00:06:45.956 --> 00:06:48.630
That's gonna help you as well
because then you can save your work.

109
00:06:48.630 --> 00:06:52.062
And if you don't have
a code sandbox account,

110
00:06:52.062 --> 00:06:55.671
probably makes sense to sign up for
that as well.

