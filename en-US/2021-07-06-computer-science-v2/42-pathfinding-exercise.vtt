WEBVTT

1
00:00:00.090 --> 00:00:01.960
Okay so
I'm gonna give you these graphs here.

2
00:00:04.010 --> 00:00:08.870
And I want you to find the shortest
path between these two different things.

3
00:00:10.180 --> 00:00:15.680
So everything that is a two in
this is point A or point B, right?

4
00:00:15.680 --> 00:00:19.989
It's one of the points I want you to
find the shortest path between the twos.

5
00:00:21.310 --> 00:00:24.810
And anything that is a one,
is a wall right?

6
00:00:24.810 --> 00:00:26.826
So you can't go through ones.

7
00:00:30.894 --> 00:00:33.700
Okay, and these just get more and
more complex.

8
00:00:36.550 --> 00:00:40.180
And I also give you if you wanna
check the edge cases right?

9
00:00:40.180 --> 00:00:42.888
So this one for example they're
right next to each other, and

10
00:00:42.888 --> 00:00:44.670
in this one it's actually impossible.

11
00:00:46.400 --> 00:00:48.435
But again,
this is extra credit down here so

12
00:00:48.435 --> 00:00:51.950
don't worry about this I'm more
concerned about these ones.

13
00:00:51.950 --> 00:00:55.820
This one, it's kinda hard to see but
this is actually a spiraling graph right?

14
00:00:55.820 --> 00:00:58.526
So the two here is, this is possible but

15
00:00:58.526 --> 00:01:02.000
you can see here it
spirals through this wall.

16
00:01:02.000 --> 00:01:05.043
So this one's pretty difficult.

17
00:01:05.043 --> 00:01:08.560
I would recommend just taking
this one at a time, right?

18
00:01:08.560 --> 00:01:10.612
So instead of saying
all these all at once,

19
00:01:10.612 --> 00:01:13.070
I would just start with the four by four.

20
00:01:13.070 --> 00:01:17.350
And then I would just say,
start skip this one,

21
00:01:17.350 --> 00:01:21.844
.skip this one, and
.skip this one down here and

22
00:01:21.844 --> 00:01:25.696
just worry about the 4
by 4 one at first and

23
00:01:25.696 --> 00:01:31.280
then worry about the 6 by 6, and
I would work for it that way.

24
00:01:33.070 --> 00:01:40.680
The other thing that I gave you here is I
wrote this ridiculously colorful logger.

25
00:01:40.680 --> 00:01:45.040
So if you want something that's gonna kind
of help you visualize what's happening

26
00:01:45.040 --> 00:01:46.985
with your maze, this will help you.

27
00:01:51.910 --> 00:01:58.790
You have to give it an array of arrays,
sorry an array of objects.

28
00:01:58.790 --> 00:02:03.933
And that has to have an opened by and
a number, zero means no one owns it.

29
00:02:03.933 --> 00:02:08.805
One means it's owned by A and
two means it's owned by two.

30
00:02:08.805 --> 00:02:11.152
So let's see if I can, there we go.

31
00:02:11.152 --> 00:02:14.444
This is what this object has to
look like for this logger to work.

32
00:02:18.300 --> 00:02:22.880
The close to be true or false where
if it's true it's a unpassable wall.

33
00:02:22.880 --> 00:02:29.660
And then the length is how far it is
away from the node that you're tracking.

34
00:02:30.820 --> 00:02:35.173
So let's just pop in here and
I can show you what that looks like.

35
00:02:39.409 --> 00:02:46.747
Log maze there and log maze there, okay?

36
00:02:46.747 --> 00:02:50.732
And then let's run these again so
you can kind of see what that looks like.

37
00:02:50.732 --> 00:02:53.819
Play.

38
00:02:58.349 --> 00:03:01.939
So this is what it ends up
logging out is these mazes.

39
00:03:01.939 --> 00:03:08.732
So you can see this as the 15 by 15 one,
0 0 is where it starts right?

40
00:03:08.732 --> 00:03:09.993
And 0 0 here.

41
00:03:09.993 --> 00:03:16.177
The green ones are visited by A, the red
ones or pink ones are visited by B.

42
00:03:16.177 --> 00:03:18.130
So that's what this logger
thing will do for you.

43
00:03:18.130 --> 00:03:20.019
It'll show you step by step,

44
00:03:20.019 --> 00:03:24.390
you can see the path finding
algorithm working here, right?

45
00:03:24.390 --> 00:03:29.060
So these double dots represent
places that it hasn't visited yet.

46
00:03:29.060 --> 00:03:33.743
And the Xs represent the waltz.

47
00:03:33.743 --> 00:03:36.128
So use that if you want
to you don't have to.

48
00:03:36.128 --> 00:03:41.085
I just found it easy for me to kind of
visualize how things were pathfinding.

49
00:03:44.517 --> 00:03:47.329
Okay, any questions about any of this?

50
00:03:48.900 --> 00:03:53.290
&gt;&gt; Besides being fun, why is it useful?

51
00:03:53.290 --> 00:04:01.470
&gt;&gt; There, I have found, well I guess
one is just applying breadth traversal.

52
00:04:01.470 --> 00:04:05.298
And I'm actually trying to show you less
why pathfinding and mazes is useful, and

53
00:04:05.298 --> 00:04:09.128
I'm actually trying to have more show you
why breadth first traversal is just used

54
00:04:09.128 --> 00:04:12.565
everywhere and
you probably don't even realize it.

55
00:04:12.565 --> 00:04:16.072
Like the ability to find how near
something is to something else is

56
00:04:16.072 --> 00:04:17.775
extremely useful.

57
00:04:17.775 --> 00:04:21.095
So that's probably the core concept
I want you to take away from that.

58
00:04:21.095 --> 00:04:25.574
Secondly I have been asked this exact
question in interview with large tech

59
00:04:25.574 --> 00:04:29.413
company that probably shouldn't
tell you which one it was, but

60
00:04:29.413 --> 00:04:31.920
one you've heard of we'll go with that.

61
00:04:31.920 --> 00:04:38.507
So this will be useful in interviews,
to it is fun.

62
00:04:38.507 --> 00:04:40.100
[LAUGH] And do I have reason number three?

63
00:04:40.100 --> 00:04:41.613
I don't know.

64
00:04:41.613 --> 00:04:45.882
If I guess you end up working on
the Google Maps team this will probably be

65
00:04:45.882 --> 00:04:48.240
something that you might think about.

66
00:04:48.240 --> 00:04:53.027
But beyond that,
I don't know if I've actually had to find

67
00:04:53.027 --> 00:04:56.390
how near two things are on a graph before.

68
00:04:57.840 --> 00:05:01.590
I have had to use, graph traversal,
but not necessarily pathfinding.

