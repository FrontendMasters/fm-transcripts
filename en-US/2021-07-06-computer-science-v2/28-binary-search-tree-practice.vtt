WEBVTT

1
00:00:00.710 --> 00:00:07.010
So, let's go edit on code is code sandbox.

2
00:00:07.010 --> 00:00:14.005
Top over to trees or
I think they call it bst right here,

3
00:00:14.005 --> 00:00:18.731
bst.test and I want you to implement

4
00:00:22.198 --> 00:00:24.331
I think I just have to add I don't
think I actually have you do.

5
00:00:34.608 --> 00:00:38.619
Let me just check to make sure that
I asked you to do the right things.

6
00:00:38.619 --> 00:00:42.027
So I just have you do add,
I don't actually have you ever do delete.

7
00:00:42.027 --> 00:00:46.511
So as a stretch goal, maybe later
when your brain kind of recovers from

8
00:00:46.511 --> 00:00:50.920
learning all this stuff, you might
come back and try and do deletes.

9
00:00:50.920 --> 00:00:55.026
But for now, let's just go ahead and
stick to adds, so

10
00:00:55.026 --> 00:00:58.795
let's actually just kinda
get you started here.

11
00:01:01.924 --> 00:01:06.505
Bst, So

12
00:01:06.505 --> 00:01:12.352
I might give you a constructor here and
just set this.root = null,

13
00:01:12.352 --> 00:01:16.058
it's probably a good one to do right away.

14
00:01:18.637 --> 00:01:25.656
You're gonna do an add which
is gonna take a value,okay.

15
00:01:25.656 --> 00:01:30.129
So you're gonna have to have some

16
00:01:30.129 --> 00:01:34.931
logic around,if this is the root.

17
00:01:40.289 --> 00:01:40.978
Okay, and

18
00:01:40.978 --> 00:01:45.582
then you're gonna have to do some sort
of find the correct place to add.

19
00:01:50.307 --> 00:01:54.498
And so
there's two ways you can do the add,

20
00:01:54.498 --> 00:01:58.109
here in my particular course notes,

21
00:01:58.109 --> 00:02:02.432
I do it via a while loop,
so this could be or.

22
00:02:02.432 --> 00:02:09.501
Another thing you could do here is you
could create a node class down here,

23
00:02:09.501 --> 00:02:13.620
that's a constructor that takes a value.

24
00:02:13.620 --> 00:02:17.614
You'll say this.value = value,

25
00:02:17.614 --> 00:02:24.280
you'll say this.left = null,
and this.right = null.

26
00:02:24.280 --> 00:02:29.539
You could potentially if you wanted
to create an add method on this,

27
00:02:29.539 --> 00:02:34.535
that takes the value and
then this could be called recursively.

28
00:02:36.890 --> 00:02:37.902
So that's another potential.

29
00:02:37.902 --> 00:02:42.462
We'll be doing it with the while
loop here but just know that's also

30
00:02:42.462 --> 00:02:46.862
another possibility here,
depending on how you wanted to do it.

31
00:02:50.249 --> 00:02:58.647
And then The other thing
that might be helpful.

32
00:03:06.878 --> 00:03:11.591
Is if you do a toObject method here and

33
00:03:11.591 --> 00:03:17.528
just return the root, so this return.root.

34
00:03:17.528 --> 00:03:25.047
I actually wrote a little
visualization helper for you.

35
00:03:25.047 --> 00:03:33.781
So if you hop over to The source here and
look at tree.js.

36
00:03:38.333 --> 00:03:44.145
This will actually help you visualize
your whole app here if this will load.

37
00:03:44.145 --> 00:03:47.139
So you can see here I had this tree,

38
00:03:47.139 --> 00:03:52.321
if you return it to an object and
it has value left and right.

39
00:03:52.321 --> 00:03:55.294
You can ignore height, cuz we'll talk
about height here in just a second, so

40
00:03:55.294 --> 00:03:55.945
ignore height.

41
00:03:58.133 --> 00:04:01.100
But if you pass it a root node
that has left and right nodes,

42
00:04:01.100 --> 00:04:03.836
this will actually visualize it here for
you as well.

43
00:04:08.742 --> 00:04:11.044
But you don't have to do that right now,

44
00:04:11.044 --> 00:04:14.445
I'll show you how to do it when
we do our solution together.

45
00:04:14.445 --> 00:04:16.737
For now,
just get all the adds working correctly.

46
00:04:16.737 --> 00:04:23.056
&gt;&gt; How is this any different from running
a binary search on the sorted array?

47
00:04:23.056 --> 00:04:26.954
&gt;&gt; How is this any different than
running a binary search [INAUDIBLE]?

48
00:04:26.954 --> 00:04:32.712
Well, one's an algorithm for
finding something in a sorted array,

49
00:04:32.712 --> 00:04:38.189
and one of them is a data structure
used for storing information.

50
00:04:38.189 --> 00:04:39.112
Now you might ask,

51
00:04:39.112 --> 00:04:42.944
why would you ever use a binary search
tree over something like a sorted array?

52
00:04:42.944 --> 00:04:46.740
And it has to do with how you would
allocate things in memory, right?

53
00:04:46.740 --> 00:04:50.956
So for a sorted array, you might try
store that as a, an array list right,

54
00:04:50.956 --> 00:04:54.094
where everything is laid
out sequentially in memory.

55
00:04:54.094 --> 00:04:56.504
Which is not usually gonna
be possible particularly for

56
00:04:56.504 --> 00:04:58.360
something like a database index, right?

57
00:04:58.360 --> 00:05:01.310
Cuz those database indexes could
be pointed to objects that

58
00:05:01.310 --> 00:05:02.498
are enormous, right?

59
00:05:02.498 --> 00:05:06.862
So this would be more, something where you
cannot be constrained by the memory you

60
00:05:06.862 --> 00:05:09.909
can kind of point to wherever
things want to be in memory.

61
00:05:13.682 --> 00:05:17.819
There's other uses for trees too,
that's just kinda the most classic one and

62
00:05:17.819 --> 00:05:20.401
the one that I have in my
head at the moment [LAUGH].

63
00:05:20.401 --> 00:05:24.861
But it's, yeah, I guess at the end
of the day one's a algorithm for

64
00:05:24.861 --> 00:05:29.400
finding things on a sorted array and
one of them is a data structure for

65
00:05:29.400 --> 00:05:33.172
storing lots of data in memory or
on disk for that matter.

66
00:05:33.172 --> 00:05:34.645
So, it depends.

67
00:05:34.645 --> 00:05:37.546
&gt;&gt; A big chunk in the heap memory,

68
00:05:37.546 --> 00:05:44.460
you can just sprinkle it around
then use pointers to [INAUDIBLE].

69
00:05:44.460 --> 00:05:49.200
&gt;&gt; Exactly Yeah,
&gt;&gt; It's less prone to, it's fragmenting

70
00:05:49.200 --> 00:05:53.827
the memory alert, but
it can find the space for

71
00:05:53.827 --> 00:05:58.351
itself easier on a fragment, yeah, right.

72
00:05:58.351 --> 00:06:02.929
Fragmentation is something far less
concerning these days with just how memory

73
00:06:02.929 --> 00:06:03.892
works, right.

74
00:06:03.892 --> 00:06:07.967
It used to be much bigger concern, but,
and in fact in this case, it's helpful,

75
00:06:07.967 --> 00:06:11.927
right, because we don't have to worry
about knowing ahead of time how much data

76
00:06:11.927 --> 00:06:13.194
we're gonna allocate.

77
00:06:19.610 --> 00:06:23.672
So the first thing that
we're gonna wanna do,

78
00:06:23.672 --> 00:06:27.327
with our tree is, just gonna erase this.

79
00:06:27.327 --> 00:06:32.235
If this.root ===null,

80
00:06:32.235 --> 00:06:39.192
then we need to create the root, right.

81
00:06:39.192 --> 00:06:45.593
So we'll say this.root = new Node(value),
right, that's it.

82
00:06:45.593 --> 00:06:50.811
Otherwise wanna say let
current = this.root,

83
00:06:50.811 --> 00:06:55.774
and then we're gonna use
a while loop to try and

84
00:06:55.774 --> 00:06:58.460
find where it should go.

85
00:07:00.779 --> 00:07:05.438
So we're gonna say while and

86
00:07:05.438 --> 00:07:11.068
let me make sure this is not running

87
00:07:11.068 --> 00:07:17.670
when I do this because we're gonna write

88
00:07:17.670 --> 00:07:22.924
a quick while true loop, cool.

89
00:07:22.924 --> 00:07:27.723
So we're gonna do a while true loop
because we want this loop to just

90
00:07:27.723 --> 00:07:31.078
keep running until we tell it to stop,
right.

91
00:07:31.078 --> 00:07:36.758
There's always gonna be somewhere to
put the add or to put this new node.

92
00:07:36.758 --> 00:07:40.664
So we're never going to run into
a place where we don't wanna it.

93
00:07:40.664 --> 00:07:46.916
So that's why this is an okay opportunity
for us to use a while true loop.

94
00:07:46.916 --> 00:07:51.898
So first thing I'm gonna say is

95
00:07:51.898 --> 00:07:56.689
if current.value &gt; value,

96
00:07:56.689 --> 00:08:04.367
then go left other otherwise go right,
right.

97
00:08:07.854 --> 00:08:12.126
Then inside of here we'll say,
if there's a current.left

98
00:08:16.209 --> 00:08:20.030
Then we're gonna say current is assigned,
current.left.

99
00:08:20.030 --> 00:08:21.976
I mean, the loop run again.

100
00:08:25.194 --> 00:08:30.186
If it's not then we're finally
supposed to add it and we say,

101
00:08:30.186 --> 00:08:34.122
current.left is assigned
new Node with value.

102
00:08:38.804 --> 00:08:42.907
Okay, if we go right then we're
gonna say the opposite logics.

103
00:08:42.907 --> 00:08:44.380
If current.right

104
00:08:53.173 --> 00:08:57.212
Then we're gonna say,
current is assigned current.right and

105
00:08:57.212 --> 00:08:58.866
we let the loop run again.

106
00:08:58.866 --> 00:09:06.801
Otherwise, we say current.right
is assigned new Node with value

107
00:09:15.012 --> 00:09:21.046
Okay, in these two cases here 36 and
44, we're gonna say break.

108
00:09:25.804 --> 00:09:28.757
You could also just say return,
which is fine as well.

109
00:09:28.757 --> 00:09:30.461
But I'm gonna say brake.

110
00:09:30.461 --> 00:09:34.780
If you're not familiar with brake,
it just basically means,

111
00:09:34.780 --> 00:09:38.865
hey, I'm in a loop right now
stop being in the loop,okay.

112
00:09:38.865 --> 00:09:44.504
And then I need to get
out of the while loop,

113
00:09:44.504 --> 00:09:49.830
out of the else, in every case I'm going

114
00:09:49.830 --> 00:09:55.482
to return this, which is the tree itself.

115
00:09:55.482 --> 00:10:00.570
Okay, and then two objects just

116
00:10:00.570 --> 00:10:06.984
returns this.root, so that's okay.

117
00:10:06.984 --> 00:10:13.106
So, this should work, let's try.

118
00:10:15.423 --> 00:10:19.947
And let's just make sure that
I take the skip out of here,

119
00:10:19.947 --> 00:10:25.623
I did not So let's try that again.

120
00:10:25.623 --> 00:10:33.849
And bst test is working, cool.

121
00:10:33.849 --> 00:10:37.020
So for funsies let's paste
this over into our visualizer.

122
00:10:39.882 --> 00:10:46.252
Let me go over here into tree, and
I'm just going to paste this right here.

123
00:10:49.557 --> 00:10:53.982
Then we're gonna pop over to our
little tree visualizer here, and

124
00:10:53.982 --> 00:10:56.995
you can see,
this is what my tree looks like.

125
00:10:56.995 --> 00:11:00.294
It's very large at the moment,
maybe a bit too large,

126
00:11:00.294 --> 00:11:04.111
let's do something much smaller,
maybe with 10 elements.

127
00:11:05.913 --> 00:11:10.810
And so you can see here,
it helps me visualize what

128
00:11:10.810 --> 00:11:15.836
my tree ends up looking like,
kinda cool, right?

129
00:11:24.515 --> 00:11:28.828
So you can see this binary search tree and
particular in this case,

130
00:11:28.828 --> 00:11:31.302
it's not super balanced, right?.

131
00:11:31.302 --> 00:11:36.583
So if I try and find 4,
I have to go through 92867 or 86534,

132
00:11:36.583 --> 00:11:43.131
till eventually I find 4, it'd be great if
it was a little bit more balanced, right.

133
00:11:43.131 --> 00:11:48.042
In the sense of, everything was a bit
closer to the root and it was kinda

134
00:11:48.042 --> 00:11:53.222
laid out better, we're kind of at
the mercy of how the numbers are added.

135
00:11:53.222 --> 00:11:57.194
For example, if I don't shuffle these,

136
00:11:57.194 --> 00:12:02.414
let's just visualize what
this looks like when I say,

137
00:12:02.414 --> 00:12:05.602
const nums =.range(10).

138
00:12:11.316 --> 00:12:12.168
What did I do wrong here?

139
00:12:12.168 --> 00:12:13.391
&gt;&gt; You forgot to [CROSSTALK].

140
00:12:13.391 --> 00:12:18.135
&gt;&gt; Yeah, it's getting late in the day,
my friends.

141
00:12:18.135 --> 00:12:19.947
So this looks really hairy.

142
00:12:19.947 --> 00:12:24.227
So you can see here I got 0, and

143
00:12:24.227 --> 00:12:30.666
then it goes to 123456789, right?

144
00:12:30.666 --> 00:12:32.759
So it's all just in one leg.

145
00:12:32.759 --> 00:12:37.705
So if I search for 9,
I got to go through 9 hops.

146
00:12:37.705 --> 00:12:41.869
This is why you're actually not
gonna see binary search trees,

147
00:12:41.869 --> 00:12:45.966
in production ever just normal
straight binary search trees.

148
00:12:45.966 --> 00:12:48.534
Because they run into these
worst case scenarios and

149
00:12:48.534 --> 00:12:50.702
it's not that uncommon to see him, right.

150
00:12:50.702 --> 00:12:54.578
So we're gonna talk about another one
called avielle trees that mitigate this,

151
00:12:54.578 --> 00:12:58.055
but there's lots of strategies for
doing this like red-black trees and

152
00:12:58.055 --> 00:13:00.400
other ones that I can't
think about top my head.

153
00:13:06.738 --> 00:13:09.346
But when you get a random distribution
like this, this isn't terrible, right?

154
00:13:09.346 --> 00:13:10.950
The max depth here is 6.

155
00:13:10.950 --> 00:13:14.374
Or let's do 50 again.

156
00:13:14.374 --> 00:13:16.924
Max depth 11 I mean not great, but

157
00:13:16.924 --> 00:13:22.714
it's a lot better than searching through
50 things, 11 is more palatable.

158
00:13:22.714 --> 00:13:24.304
How about 150?

159
00:13:24.304 --> 00:13:29.137
15, so by tripling it I only
added at most four more hops.

160
00:13:29.137 --> 00:13:33.144
950, 20 right, so you can see,

161
00:13:33.144 --> 00:13:39.543
this is where the logarithmic
lookups really help, right?

162
00:13:39.543 --> 00:13:42.117
So now I have 950 elements
in this array and

163
00:13:42.117 --> 00:13:45.180
at most I have 20 hops to
find what I'm looking for.

164
00:13:45.180 --> 00:13:46.881
It's not too bad, right?

165
00:13:46.881 --> 00:13:50.283
But, if I change this to
const nums down here,

166
00:13:50.283 --> 00:13:54.033
in fact we can just do it,
and I did 100, right,

167
00:13:54.033 --> 00:13:59.039
this is the worst case scenario
now where I have max depth of 100.

168
00:14:03.542 --> 00:14:08.368
If it's unclear this line 56 here
is adding them in order, right,

169
00:14:08.368 --> 00:14:12.862
from 0 to 99, as opposed to 55
is taking the same numbers but

170
00:14:12.862 --> 00:14:15.548
shuffling them in some random order.

