WEBVTT

1
00:00:00.210 --> 00:00:05.690
This is a recursive sort,
this one's pretty difficult.

2
00:00:05.690 --> 00:00:09.659
I would say this is gonna be the first
very challenging thing that I'm gonna have

3
00:00:09.659 --> 00:00:11.510
to do during the body of this course.

4
00:00:12.810 --> 00:00:17.698
So if this feels hard, it is hard, so
I just want to give you permission before

5
00:00:17.698 --> 00:00:20.346
hand to be okay that
this is gonna be hard.

6
00:00:22.712 --> 00:00:27.730
All right, so
let's apply a recursion to sorting a list.

7
00:00:28.840 --> 00:00:33.530
Kinda like insertion sort, where you
assume that a list of 1 is already sorted.

8
00:00:33.530 --> 00:00:37.860
We're going to take that and
we're going to apply that to sorting.

9
00:00:40.040 --> 00:00:44.520
So the idea here is that we
have a list of length 10.

10
00:00:44.520 --> 00:00:48.630
And we're going to take that and
break that into two lists of length 5.

11
00:00:48.630 --> 00:00:52.573
And then break that again into things of
two and three, and then eventually you're

12
00:00:52.573 --> 00:00:55.952
going to break everything down into
lists lists of length one, right,

13
00:00:55.952 --> 00:00:56.870
using recursion.

14
00:00:58.180 --> 00:01:02.390
Once you arrive to a list of length one,
that list is sorted.

15
00:01:02.390 --> 00:01:04.009
That's the base case, right?

16
00:01:05.190 --> 00:01:07.411
So you return that list of length one, and

17
00:01:07.411 --> 00:01:11.530
then you're going to stitch
together in a sorted fashion.

18
00:01:11.530 --> 00:01:13.470
The two lists that are coming back, right?

19
00:01:13.470 --> 00:01:16.800
So if I get a list of length one and
a list of length one,

20
00:01:16.800 --> 00:01:20.205
those are two sorted lists and
then I can write a merging

21
00:01:20.205 --> 00:01:24.740
function that's gonna take two sorted
lists and stitch them together.

22
00:01:26.520 --> 00:01:29.240
So let's see if I can kind of
show you this a little bit.

23
00:01:31.890 --> 00:01:38.200
So let's say I called merge sort on
this function here of 1,5, 7 ,4, 2, 3,6.

24
00:01:39.720 --> 00:01:46.934
Okay, I'm then going to call merge
sort on 1,5,4,1,5,7,4 and 2,3,6.

25
00:01:46.934 --> 00:01:49.928
Okay, then I'm going to do
this part first, right,

26
00:01:49.928 --> 00:01:53.199
because that's how the recursion
is going to go, right?

27
00:01:53.199 --> 00:01:54.503
It's going to go down one side and

28
00:01:54.503 --> 00:01:58.230
it's going to kind of go through the
various different parts of the the tree.

29
00:01:58.230 --> 00:02:02.700
Okay, so I'm gonna take this
list merge 1,5,7,4, that's gonna

30
00:02:02.700 --> 00:02:07.672
be broken down into merge sort of 1, 5,
which also be broken down into this, but

31
00:02:07.672 --> 00:02:12.528
we'll do the first one first, then that's
gonna be broken down into merge 1.

32
00:02:12.528 --> 00:02:15.116
We're sort of 1 and merge sort of 5, so

33
00:02:15.116 --> 00:02:18.938
you can see here we're three
levels deep in our recursion.

34
00:02:20.347 --> 00:02:24.953
Okay, so so far all we've been doing,
we haven't been doing anything other than

35
00:02:24.953 --> 00:02:27.906
just breaking big arrays
down into smaller arrays.

36
00:02:28.970 --> 00:02:35.310
Okay, so we hit here one is of length one,
this is the base case, right?

37
00:02:35.310 --> 00:02:38.748
So this level of recursion is
just going to return back up so

38
00:02:38.748 --> 00:02:40.650
returns the sorted list of one.

39
00:02:41.800 --> 00:02:45.080
Okay, then it's going to call this
one over here, merge sort of five.

40
00:02:45.080 --> 00:02:49.800
So, this is of length one, this is
the base case, and it's going to return.

41
00:02:50.910 --> 00:02:55.217
So now we have merge sort on
both of these from depth 3,

42
00:02:55.217 --> 00:02:59.070
they're gonna be returning
back up to depth 2.

43
00:03:00.540 --> 00:03:03.000
So now we're gonna call
this merge function.

44
00:03:03.000 --> 00:03:05.790
Notice that merge sort and
merge are slightly different.

45
00:03:05.790 --> 00:03:09.810
Merge sort, this is a recursive function,
merge is not a recursive function.

46
00:03:12.190 --> 00:03:17.130
Merge is just a function then you're gonna
write that you pass in two sorted lists.

47
00:03:17.130 --> 00:03:22.938
Now I'm extra emphasis on sorted,
right, it has to be already sorted or

48
00:03:22.938 --> 00:03:27.430
all of our assumptions about
this are gonna break down.

49
00:03:29.700 --> 00:03:33.624
So what merge does is it just, again
merges together two sorted lists will

50
00:03:33.624 --> 00:03:37.740
basically just iterate through both of
those lists and say, all right is 1 or

51
00:03:37.740 --> 00:03:39.310
5 smaller?

52
00:03:39.310 --> 00:03:42.210
Want a smaller,
add it to the sorted lists, right?

53
00:03:43.520 --> 00:03:45.172
So, once the one of the arrays is empty,

54
00:03:45.172 --> 00:03:47.320
then you can just add
everything on the right array.

55
00:03:47.320 --> 00:03:51.342
So, in this case it's just 5, right,
so, then we return back here.

56
00:03:51.342 --> 00:03:56.100
1, 5 that's a new sorted list, right,
that's what that merge algorithm does.

57
00:03:56.100 --> 00:03:59.640
It just takes two sorted lists
makes one sorted list returns that.

58
00:04:02.130 --> 00:04:05.550
Okay, so
now we have the sorted list of 1, 5.

59
00:04:08.380 --> 00:04:10.860
Notice that that's actually
originally what it was.

60
00:04:10.860 --> 00:04:14.224
But it doesn't know that until it's
actually run the whole gambit of

61
00:04:14.224 --> 00:04:14.870
merge sort.

62
00:04:16.950 --> 00:04:23.011
Okay, so now it's going to pop back up
to here because this part returned,

63
00:04:23.011 --> 00:04:27.950
right merge 1, 5,
due to how recursion works, right?

64
00:04:27.950 --> 00:04:35.780
This is now finished, it's, returned back
and it returned this 1,5, all right.

65
00:04:35.780 --> 00:04:38.609
So now we're popping back
up here to depth 2 and

66
00:04:38.609 --> 00:04:41.100
we're going to run merge sort on 7, 4.

67
00:04:42.210 --> 00:04:50.470
Okay, so that's going to get broken down
again to merge seven and merge four.

68
00:04:50.470 --> 00:04:55.039
Sorry, merge sort 7 and merge sort 4,
these are gonna be base case,

69
00:04:55.039 --> 00:04:59.298
base case there, and then those
are gonna get returned back, and

70
00:04:59.298 --> 00:05:05.230
that's gonna merge, it's gonna get called
on this list and this list, right?

71
00:05:05.230 --> 00:05:09.042
So you're gonna ask the question,
is 4 or 7 smaller, 4 smaller so

72
00:05:09.042 --> 00:05:11.470
you get this in the new array.

73
00:05:11.470 --> 00:05:14.670
Right arrays now empty,
right, this one's now empty.

74
00:05:14.670 --> 00:05:17.810
So we can just blindly concatenate
everything that's left in the left array.

75
00:05:17.810 --> 00:05:21.650
That's just one item, right,
so now we have 4, 7, okay.

76
00:05:25.220 --> 00:05:30.254
Now we return that back,
that gets returned

77
00:05:30.254 --> 00:05:34.620
back up to here, right, this level.

78
00:05:37.090 --> 00:05:40.985
So now we're gonna call merge
on these two lists, right, the,

79
00:05:40.985 --> 00:05:43.046
1,5 which we got from up here.

80
00:05:43.046 --> 00:05:48.647
And the 4, 7 that we got here,
again, very critical,

81
00:05:48.647 --> 00:05:54.510
these are both sorted and
we know that, is 1 or 4 smaller?

82
00:05:54.510 --> 00:05:56.911
1, you add 1, is 5 or 4 smaller,

83
00:05:56.911 --> 00:06:00.480
because we're just going
down the list here, right?

84
00:06:00.480 --> 00:06:03.828
So we go to here and
we're comparing 5 to 4,

85
00:06:03.828 --> 00:06:08.160
you say 4 is smaller,
so we have 1, 4 here.

86
00:06:08.160 --> 00:06:12.102
Then you ask is 5 or 7 smaller,
5 is to get 1,4,5 and

87
00:06:12.102 --> 00:06:18.240
then left to raise now empty, which is,
cause all that's left is 7, right?

88
00:06:18.240 --> 00:06:23.088
And then you just add that to the race, so
now we have a larger list of 1, 4, 5,7.

89
00:06:23.088 --> 00:06:28.257
Okay, and it's just this, right,
all you're doing is breaking

90
00:06:28.257 --> 00:06:33.150
everything down to small problems and
building them back up and

91
00:06:33.150 --> 00:06:38.360
you're building them back
together by using merge, right?

92
00:06:38.360 --> 00:06:41.196
I also see people call merge stitch,
right,

93
00:06:41.196 --> 00:06:44.792
because you're stitching
together two sorted arrays.

94
00:06:44.792 --> 00:06:49.600
So 2,3 ,6 that's gonna get
broken down to 2 and 3 and 6,

95
00:06:49.600 --> 00:06:52.990
2 and 3, 2 is base case 3 is base case.

96
00:06:52.990 --> 00:06:56.009
Then we're going to call merge 2 and 3,

97
00:06:56.009 --> 00:06:59.300
then out of that we get
returns sorted array.

98
00:07:00.940 --> 00:07:05.853
This should be 2,3, not 2,4,
but yeah, 2,3 right there.

99
00:07:08.241 --> 00:07:12.146
Merge sort of 6, that's a base case,
we return that, so

100
00:07:12.146 --> 00:07:16.074
now we're gonna merge together 2,
3, and 6, right?

101
00:07:16.074 --> 00:07:21.720
And by the end of that we get this
return sorted array 2, 3, and 6, right?

102
00:07:21.720 --> 00:07:26.533
So now we're back up to the point
of here at the beginning,

103
00:07:26.533 --> 00:07:30.080
we have merge this and merge this, right.

104
00:07:31.560 --> 00:07:36.702
So that's what this is, and
this is where we get our really big stitch

105
00:07:36.702 --> 00:07:42.033
together is 1 or 2 smaller 1 for
2 smaller 2 is 3, or 4 smaller 3.

106
00:07:42.033 --> 00:07:47.064
And you can see together this gets
stitched all the way until it is that

107
00:07:47.064 --> 00:07:52.531
the right away gets empty and we
concatenate everything in the left array,

108
00:07:52.531 --> 00:07:56.200
and we end up with 1, 2, 3, 4, 5, 6, 7.

109
00:07:56.200 --> 00:08:02.360
So that was a long journey,
thank you for sticking with me.

110
00:08:02.360 --> 00:08:07.756
That is the entire algorithm, right, you
have two functions you have merge sort and

111
00:08:07.756 --> 00:08:12.164
merge, the only thing that merge does
is it takes two sorted lists and

112
00:08:12.164 --> 00:08:14.640
makes one sorted list.

113
00:08:14.640 --> 00:08:18.475
That's all merge does, it's totally blind
to the rest of the world, doesn't care,

114
00:08:18.475 --> 00:08:19.280
not recursive.

115
00:08:19.280 --> 00:08:22.579
It's just one simple function
that takes two sorted lists and

116
00:08:22.579 --> 00:08:24.410
makes one sorted list.

117
00:08:24.410 --> 00:08:28.919
And then you got merge sort that all it
does is it breaks big arrays down into

118
00:08:28.919 --> 00:08:33.796
smaller arrays and then it concatenates
the things that come back from its merge

119
00:08:33.796 --> 00:08:36.962
sort recursive calls and
passes those into merge.

120
00:08:40.048 --> 00:08:42.543
So here's kind of a visual
representation of it.

121
00:08:45.244 --> 00:08:46.456
And you might be asking,

122
00:08:46.456 --> 00:08:50.050
do I put does the left array have to
be bigger than the right array, right?

123
00:08:50.050 --> 00:08:53.840
This one is a length 4, this is like 3,
it doesn't matter, right?

124
00:08:53.840 --> 00:08:56.226
You can even be inconsistent,
it doesn't matter.

125
00:08:58.651 --> 00:09:03.182
Okay, so this breaks this down into
eventually lists of length 1, and

126
00:09:03.182 --> 00:09:05.900
then it stitches them back together.

127
00:09:05.900 --> 00:09:09.148
Until eventually you end up
back here with a sorted list.

