WEBVTT

1
00:00:00.670 --> 00:00:05.439
So this data structure is ends up
being one of the more useful ones and

2
00:00:05.439 --> 00:00:07.120
it's used a lot.

3
00:00:07.120 --> 00:00:11.950
A graph is basically just a tree
that doesn't have a root, right?

4
00:00:11.950 --> 00:00:13.243
So you're gonna have a node,

5
00:00:13.243 --> 00:00:16.670
and that node is gonna be connected
to lots of other notes, right?

6
00:00:16.670 --> 00:00:21.050
Whereas trees we have this sort of
hierarchy right where you have like a root

7
00:00:21.050 --> 00:00:25.013
and it has children and those have
children's Graphs are more other

8
00:00:25.013 --> 00:00:28.510
similar to that, but
they don't have hierarchy, right?

9
00:00:28.510 --> 00:00:31.478
You have this graph or this node and
this node and this node, and

10
00:00:31.478 --> 00:00:33.170
they're connected to each other.

11
00:00:33.170 --> 00:00:35.430
But not any one of them is
going to be the parent.

12
00:00:35.430 --> 00:00:36.750
Right, they're just connected.

13
00:00:38.280 --> 00:00:41.098
So a really good way of thinking
about that would be your friends on

14
00:00:41.098 --> 00:00:42.730
Facebook, right?

15
00:00:42.730 --> 00:00:44.732
You have this person, and

16
00:00:44.732 --> 00:00:50.280
they're all connected to each
other via friendships, right?

17
00:00:50.280 --> 00:00:54.500
But they're not necessarily have
any sort of hierarchy, right?

18
00:00:54.500 --> 00:00:56.940
There's no one friend that
owns the other friend.

19
00:00:56.940 --> 00:01:00.500
I don't know, maybe you have a weird
friend group, my friends don't own me.

20
00:01:00.500 --> 00:01:03.042
Like in the Facebook example
we can have a node and

21
00:01:03.042 --> 00:01:06.080
the node can be represented as
a row in a database, right?

22
00:01:07.100 --> 00:01:11.443
So I could have 100 people that
exist in my friends database right?

23
00:01:11.443 --> 00:01:14.495
And then I probably have
like a separate table,

24
00:01:14.495 --> 00:01:17.633
that would probably call
something like edges.

25
00:01:17.633 --> 00:01:20.640
So an edge is typically what you
would call the thing that connects to

26
00:01:20.640 --> 00:01:21.890
different things.

27
00:01:21.890 --> 00:01:24.730
And an edge describes a relationship.

28
00:01:24.730 --> 00:01:28.698
So if I have person here, person here,
and then I have an edge between them,

29
00:01:28.698 --> 00:01:31.950
that edge would be the friendship, right?

30
00:01:31.950 --> 00:01:35.490
But, you can imagine there might be
multiple different kinds of edges, right?

31
00:01:35.490 --> 00:01:40.185
So in a previous course that I taught
on front of masters called the complete

32
00:01:40.185 --> 00:01:43.836
intro to databases,
I talk about a database called Neo for

33
00:01:43.836 --> 00:01:46.180
j which is a graph database.

34
00:01:46.180 --> 00:01:52.300
And, the example that I given that is you
have movies, actors and directors right?

35
00:01:52.300 --> 00:01:56.090
Directors are connected to movies via,
they are the director, right?

36
00:01:56.090 --> 00:01:58.900
So that's the name of the edge,
there's directed.

37
00:01:58.900 --> 00:02:02.770
Actors are connected to movies via acted,
right?

38
00:02:02.770 --> 00:02:07.648
So an actor, its relationship to a movie
is that it acted in the movie, so.

39
00:02:07.648 --> 00:02:11.680
As you can see, you can have
different types of edges as well.

40
00:02:13.820 --> 00:02:15.811
Another interesting kinda caveat,

41
00:02:15.811 --> 00:02:19.030
there is a Facebook friendship
is bidirectional, right?

42
00:02:19.030 --> 00:02:23.327
So if I add you on Facebook, you have to
approve me adding you on Facebook, and

43
00:02:23.327 --> 00:02:26.520
therefore, we become friends
with each other, right?

44
00:02:26.520 --> 00:02:29.300
So that relationship exists in both ways.

45
00:02:29.300 --> 00:02:30.869
I am your friend, you are my friend.

46
00:02:32.350 --> 00:02:36.100
Let's consider Twitter for
example, where I just follow you.

47
00:02:36.100 --> 00:02:38.211
So that's unidirectional,
that I follow you but

48
00:02:38.211 --> 00:02:40.940
you don't necessarily have
to follow me back, right?

49
00:02:40.940 --> 00:02:43.787
So that would be an example
of a unidirectional edge.

50
00:02:46.046 --> 00:02:47.230
Cool.

51
00:02:47.230 --> 00:02:51.483
So that kind of just describes at a very
base level of like what a graph data

52
00:02:51.483 --> 00:02:52.406
structure is.

53
00:02:52.406 --> 00:02:58.320
And a graph database like Neo for j is
just a very large graph data structure.

54
00:02:59.860 --> 00:03:01.266
If you're interested in that,

55
00:03:01.266 --> 00:03:04.240
I highly suggest taking my course
the complete intro to databases.

56
00:03:04.240 --> 00:03:05.230
I talked a lot about it.

57
00:03:05.230 --> 00:03:06.170
It's kind of fun.

58
00:03:06.170 --> 00:03:08.190
I think it's approachable to anyone.

59
00:03:08.190 --> 00:03:12.230
If you're this far in this course, you can
definitely take that course and be okay.

60
00:03:12.230 --> 00:03:16.770
I'm gonna assert that I
think this course is harder.

61
00:03:16.770 --> 00:03:18.120
Graphs are everywhere.

62
00:03:19.250 --> 00:03:21.060
So we talked about social networks.

63
00:03:21.060 --> 00:03:24.470
That's kind of the easiest one to think
about, but your Internet of Things, right.

64
00:03:24.470 --> 00:03:26.954
So all of your various devices
that talk to each other,

65
00:03:26.954 --> 00:03:29.510
those are almost always
represented as graphs.

66
00:03:29.510 --> 00:03:34.970
Neural network, machine learning
libraries like TensorFlow, or pytorch.

67
00:03:34.970 --> 00:03:36.630
Those have tons of graphs in them.

68
00:03:37.790 --> 00:03:42.085
Everything that we're kind of just
modeling in terms of like sensors,

69
00:03:42.085 --> 00:03:44.519
and mapping the virtual world or sorry,

70
00:03:44.519 --> 00:03:48.220
mapping the natural world
to the virtual world.

71
00:03:48.220 --> 00:03:49.540
Just everything is a graph, right?

72
00:03:49.540 --> 00:03:51.997
Everything is just describing
a relationship between two

73
00:03:51.997 --> 00:03:52.905
different objects.

74
00:03:54.975 --> 00:03:59.776
So, let's talk about social network
cuz I think that's kinda of

75
00:03:59.776 --> 00:04:03.110
an easier one to conceptualize.

76
00:04:03.110 --> 00:04:07.080
We're going to be tracing
a virtual made up social network.

77
00:04:07.080 --> 00:04:09.480
That's definitely not LinkedIn.

78
00:04:09.480 --> 00:04:12.883
So the idea is that you have a bunch
of co workers that are connected to

79
00:04:12.883 --> 00:04:14.650
each other, right?

80
00:04:14.650 --> 00:04:18.750
And each one of those co
workers has a title, right?

81
00:04:18.750 --> 00:04:22.060
So this person is a programmer,
this person is an architect, right.

82
00:04:22.060 --> 00:04:25.671
And they have various different
connections that are on this social

83
00:04:25.671 --> 00:04:26.249
network.

84
00:04:29.145 --> 00:04:31.190
What if we wanna do some sort of analysis,
right?

85
00:04:31.190 --> 00:04:35.888
So let's say, I want to find out the most
common job title in my social network,

86
00:04:35.888 --> 00:04:36.810
right?

87
00:04:36.810 --> 00:04:41.847
I'm connected to five people, and I wanna
find out how many are the most common job

88
00:04:41.847 --> 00:04:47.910
title, and not only my connections, but
my connections, connections, right?

89
00:04:47.910 --> 00:04:51.110
So how would you go about
thinking about doing that, right?

90
00:04:51.110 --> 00:04:53.342
So let's say I have me here, and

91
00:04:53.342 --> 00:04:57.250
I wanna find out the most
common in two degrees, right?

92
00:04:57.250 --> 00:05:02.360
So I wanna find out what Maria's,
Bob's, Alice's and Sally's are, right?

93
00:05:02.360 --> 00:05:05.280
I'm not connected to Alice, so
I have no edge between me and Alice.

94
00:05:05.280 --> 00:05:07.100
And I'm not connected to Sally.

95
00:05:07.100 --> 00:05:08.979
I'm just connected to Bob and Maria.

96
00:05:11.430 --> 00:05:15.475
Well, I don't wanna analyze who
Maria's connected to, or sorry,

97
00:05:15.475 --> 00:05:18.751
who Alice is connected to and
who Sally is connected to,

98
00:05:18.751 --> 00:05:21.143
I just wanna analyze these four people.

99
00:05:21.143 --> 00:05:23.690
Cuz Alice and Sally could be
connected to a lot more people.

100
00:05:26.620 --> 00:05:29.642
Well, let's think back to
the the algorithms that we

101
00:05:29.642 --> 00:05:31.530
learned earlier in this course.

102
00:05:32.840 --> 00:05:36.909
If I did a depth first traversal of this
social network, I would not only analyze

103
00:05:36.909 --> 00:05:40.556
Sally's, I would analyze Sally's
connections, and that person's

104
00:05:40.556 --> 00:05:45.660
connections, and that person's connections
because I'd be going deep first, right?

105
00:05:45.660 --> 00:05:50.107
So it doesn't make any sense for us to
do any sort of depth first traversal.

106
00:05:50.107 --> 00:05:52.793
But what if we did breadth
first traversal, and

107
00:05:52.793 --> 00:05:55.990
just limited how many degrees we went,
right?

108
00:05:55.990 --> 00:05:59.573
With breadth first traversal, we can say,
I wanna look at the first layer, or

109
00:05:59.573 --> 00:06:02.030
the second layer, or
the third layer, right?

110
00:06:02.030 --> 00:06:05.440
And we can look at just the people
in those kinda connections.

111
00:06:05.440 --> 00:06:09.510
So we're actually gonna use that exact
same algorithm, breadth first traversal.

112
00:06:09.510 --> 00:06:12.330
And we're just gonna apply to
a graph where there's no root.

113
00:06:12.330 --> 00:06:14.200
But everything works exactly the same,
right?

114
00:06:14.200 --> 00:06:16.750
We're still gonna use a queue and
all that kind of stuff.

115
00:06:16.750 --> 00:06:18.562
So when you're looking
at the problem here,

116
00:06:18.562 --> 00:06:21.756
maybe take a gander at the code that you
wrote for your breadth first traversal,

117
00:06:21.756 --> 00:06:23.202
cuz it's gonna be pretty similar.

118
00:06:26.850 --> 00:06:30.856
So, if I wanted to find out.

119
00:06:32.098 --> 00:06:38.320
All these people's job titles,
I would me to the queue first, right?

120
00:06:38.320 --> 00:06:39.690
Just like a breadth first traversal.

121
00:06:41.050 --> 00:06:44.510
Then I would dequeue me and I would add
my job to the tally, so program manager.

122
00:06:46.140 --> 00:06:49.270
Then I would queue my connections,
Bob and Maria.

123
00:06:49.270 --> 00:06:55.290
Then I would dequeue Bob, and add Bob's
job to the tally, Bob to designer.

124
00:06:55.290 --> 00:07:00.130
And then I would queue Bob's connections,
Sally and Alice.

125
00:07:02.310 --> 00:07:07.882
Then I would dequeue Maria, cuz she'd
be the next person in my queue here,

126
00:07:07.882 --> 00:07:10.987
so I queue her so I'm connected to Maria.

127
00:07:10.987 --> 00:07:14.270
And that Maria she's
also a program manager.

128
00:07:14.270 --> 00:07:17.890
And then I would queue
Maria's connections.

129
00:07:17.890 --> 00:07:20.290
So, that would be just Alice, right?

130
00:07:21.500 --> 00:07:22.450
But here's the thing.

131
00:07:22.450 --> 00:07:25.158
I already queued Alice because
I'm connected to Bob, and

132
00:07:25.158 --> 00:07:26.660
Bob is also connected to Alice.

133
00:07:28.210 --> 00:07:32.460
So I would have to make sure that I ignore
Alice or she'd get double count, right.

134
00:07:32.460 --> 00:07:35.216
So that's one thing about
graphs is whereas trees,

135
00:07:35.216 --> 00:07:39.660
I can guarantee this branch doesn't
connect to this other branch, right?.

136
00:07:39.660 --> 00:07:43.529
So I can be guaranteed that all these
nodes that are being entered into my queue

137
00:07:43.529 --> 00:07:44.720
are unique.

138
00:07:44.720 --> 00:07:47.060
That's not necessarily true in a graph,
right?

139
00:07:47.060 --> 00:07:50.480
I can be friends with you, you can
be friends with that person, right?

140
00:07:50.480 --> 00:07:53.948
And also others of my connections can be
friends with that person without me ever

141
00:07:53.948 --> 00:07:55.490
being friends with that person.

142
00:07:55.490 --> 00:07:57.910
So we don't have any sort of guarantee,
right?

143
00:07:59.790 --> 00:08:04.350
So, that's just one necessary concern that
you should concern yourself with is like,

144
00:08:04.350 --> 00:08:07.381
hey, make sure I don't add
duplicate people to my queue.

145
00:08:10.636 --> 00:08:14.613
Okay, so after I do that and after
I've processed brought Bob and Sally,

146
00:08:14.613 --> 00:08:19.470
I've actually already done my first
iteration one degree of separation, right?

147
00:08:19.470 --> 00:08:24.290
So if I was just doing one degree of
separation, then I'd already be done.

148
00:08:24.290 --> 00:08:26.300
out it would be one for loop, right?

149
00:08:27.300 --> 00:08:31.082
And then if I wanted to do a second
degree, I would just do through that for

150
00:08:31.082 --> 00:08:34.640
loop again, and
I would just enter the queue again.

151
00:08:34.640 --> 00:08:39.550
And, that's how you kind of do these
various different degrees of separation.

152
00:08:41.115 --> 00:08:44.675
So does anyone have any questions
about how to process a graph?

153
00:08:46.685 --> 00:08:48.665
&gt;&gt; So quick question about duplicates.

154
00:08:50.085 --> 00:08:52.815
I guess they would need to have
some sort of unique value, right?

155
00:08:52.815 --> 00:08:54.685
In this case, that would be Alice.

156
00:08:54.685 --> 00:08:59.885
So we would check if this is already
in our array, we just ignore it, right?

157
00:08:59.885 --> 00:09:00.385
We just keep it?

158
00:09:01.545 --> 00:09:05.530
&gt;&gt; Yeah, so the question is it's like,
what's a good mechanism for

159
00:09:05.530 --> 00:09:07.459
detecting duplicates in this.

160
00:09:07.459 --> 00:09:12.311
In the code that, cuz this is actually
the problem that I'm gonna have you

161
00:09:12.311 --> 00:09:14.890
solve here in just a second.

162
00:09:14.890 --> 00:09:16.690
All of the people have an ID.

163
00:09:16.690 --> 00:09:19.399
And I just add that ID to a set and
I say, hey,

164
00:09:19.399 --> 00:09:22.855
if this is already in my set,
don't add it to the queue.

165
00:09:25.115 --> 00:09:28.580
That's a pretty elegant way of
handling it, but it's up to you.

166
00:09:28.580 --> 00:09:29.110
You can handle it.

167
00:09:29.110 --> 00:09:31.910
There's a lot of ways to to handle that.

168
00:09:31.910 --> 00:09:32.693
It's a good question.

169
00:09:38.243 --> 00:09:44.020
Cool, and again, feel free to pop over
here to the Complete Intro to Databases.

170
00:09:45.140 --> 00:09:49.870
Down here there is these
whole section on graphs.

171
00:09:49.870 --> 00:09:53.085
We talk a lot about connection and
edges, and

172
00:09:53.085 --> 00:09:56.660
how to do this at super large scales,
right?

173
00:09:56.660 --> 00:10:01.150
How does Facebook manage its social graph,
those kind of things.

174
00:10:01.150 --> 00:10:03.800
So, definitely take a look at that.

175
00:10:03.800 --> 00:10:04.820
Okay, so question?

176
00:10:06.380 --> 00:10:07.760
&gt;&gt; Yeah, question about graphs.

177
00:10:07.760 --> 00:10:12.970
How do you limit the amount of loops
when you don't know the node to stop at?

178
00:10:15.037 --> 00:10:21.820
&gt;&gt; How do you limit the amount of loops
when you don't know the user to stop that.

179
00:10:21.820 --> 00:10:24.980
Okay, so that's a good question.

180
00:10:24.980 --> 00:10:29.854
Let's go take a look at traversals here,

181
00:10:29.854 --> 00:10:32.650
and the solution here.

182
00:10:34.010 --> 00:10:37.680
So we're gonna be looking at this one,
the iterative one.

183
00:10:37.680 --> 00:10:42.060
So we have the while (queue.length), okay.

184
00:10:42.060 --> 00:10:46.270
So one degree of separation is
everyone that I know, right?

185
00:10:48.540 --> 00:10:54.700
So what I can do to start this queue here,
say skip here, so don't do anything weird.

186
00:10:58.490 --> 00:11:00.780
I have this queue that
I'm making right now.

187
00:11:00.780 --> 00:11:05.549
So if I'm just going to go for
just one degree of separation,

188
00:11:05.549 --> 00:11:08.780
all I have to do is say const.

189
00:11:08.780 --> 00:11:14.190
My connections = me.connections right?

190
00:11:14.190 --> 00:11:17.530
Then I would just say
my connections.length.

191
00:11:17.530 --> 00:11:23.380
Bam, this would just be one
degree of separation, right?

192
00:11:24.410 --> 00:11:26.950
Now, if inside of this
particular while loop.

193
00:11:28.320 --> 00:11:30.135
Let's go back and say this is queue now.

194
00:11:34.987 --> 00:11:42.159
And here inside of my while loop here,
what I end up doing is I say, alright,

195
00:11:42.159 --> 00:11:47.470
queue.push, connection.connections, right?

196
00:11:47.470 --> 00:11:50.890
So my connection's connections,
let's just call this person.

197
00:11:50.890 --> 00:11:56.705
So, and
I'll just say this is a const newQueue.

198
00:11:59.049 --> 00:12:00.409
Or let.

199
00:12:04.771 --> 00:12:08.200
Okay?

200
00:12:08.200 --> 00:12:10.462
And I'll put some actually new queue.

201
00:12:13.238 --> 00:12:17.030
So what I'm gonna be doing when I do
this new queue.pushperson.connections.

202
00:12:17.030 --> 00:12:20.742
What I'm doing, alright this is
actually not be pushed but can cap,

203
00:12:20.742 --> 00:12:21.966
whatever it's fine.

204
00:12:27.328 --> 00:12:31.270
This is basically preparing
the queue to process again, right?

205
00:12:32.290 --> 00:12:34.398
And then instead of
having a while loop here,

206
00:12:34.398 --> 00:12:36.830
you're just going to have a for loop.

207
00:12:36.830 --> 00:12:41.930
That's going to go for
only so many loops, right?

208
00:12:41.930 --> 00:12:45.210
So by just tracking how many times
you're queuing up the users, or

209
00:12:45.210 --> 00:12:48.667
how many times you're processing
your connection's connections,

210
00:12:48.667 --> 00:12:52.383
that's how you can limit how many
degrees of separation you're gonna go.

211
00:12:52.383 --> 00:12:57.493
But basically, when you're processing one
degree of separation, you're getting ready

212
00:12:57.493 --> 00:13:02.202
to process the next one by queuing up all
of their connections, until eventually get

213
00:13:02.202 --> 00:13:06.670
to the point is like, okay, I've now
processed three degrees of separation.

214
00:13:06.670 --> 00:13:08.681
I'm gonna start processing that right,

215
00:13:08.681 --> 00:13:12.770
despite the fact you actually have queued
up a fourth degree of separation process.

216
00:13:14.330 --> 00:13:16.294
Hopefully that kinda gives
you some indication.

217
00:13:19.251 --> 00:13:20.250
That's how I did it.

218
00:13:20.250 --> 00:13:23.925
I think it's as far as I know
the only way to do how to do it.

219
00:13:23.925 --> 00:13:28.159
And then if that still doesn't make sense,
then we'll come back and

220
00:13:28.159 --> 00:13:31.155
we'll do it together and
we can talk through it.

221
00:13:31.155 --> 00:13:34.359
Right, let me unbreak my
breadth first traversal.

