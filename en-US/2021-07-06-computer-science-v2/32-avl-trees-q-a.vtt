WEBVTT

1
00:00:01.620 --> 00:00:05.708
Okay, let's take some
questions about AVL trees.

2
00:00:12.235 --> 00:00:13.610
&gt;&gt; I guess I can go first.

3
00:00:13.610 --> 00:00:18.030
I'm kind of struggling where
to put AVL trees conceptually.

4
00:00:18.030 --> 00:00:20.250
So the way I see computer science, right?

5
00:00:20.250 --> 00:00:23.240
It's, I guess I'm up.

6
00:00:23.240 --> 00:00:26.590
Three is here, drugs there,
all that stuff.

7
00:00:26.590 --> 00:00:27.900
And then there's a VM please.

8
00:00:28.960 --> 00:00:32.170
I don't really get how they
fit in the big picture.

9
00:00:33.730 --> 00:00:36.286
I don't know.
I just don't strike me.

10
00:00:36.286 --> 00:00:36.835
&gt;&gt; Yep.

11
00:00:36.835 --> 00:00:39.061
&gt;&gt; I'm trying to put it
somewhere desperate.

12
00:00:39.061 --> 00:00:43.465
&gt;&gt; For sure, no,
I totally understand where you problem is.

13
00:00:43.465 --> 00:00:44.004
[COUGH] So

14
00:00:44.004 --> 00:00:48.850
the question is, what the hell do I do
with this knowledge that I have now?

15
00:00:48.850 --> 00:00:49.730
Why did I learn this?

16
00:00:49.730 --> 00:00:51.760
Why did you subject me to this torture?

17
00:00:51.760 --> 00:00:55.724
Valid question, honestly,
I'm not totally sure myself sometimes.

18
00:00:57.562 --> 00:01:00.230
It's not cuz I'm a sadist or
something like that.

19
00:01:01.430 --> 00:01:05.537
I mean a bit, but it's for fun.

20
00:01:05.537 --> 00:01:09.600
So the time that you want
self balancing trees, so

21
00:01:09.600 --> 00:01:14.960
I'm gonna say self balancing
trees as opposed to AVL trees.

22
00:01:14.960 --> 00:01:18.060
Because something like a red black tree
which does the same thing just with

23
00:01:18.060 --> 00:01:19.860
different methodologies is better.

24
00:01:19.860 --> 00:01:22.176
It just works better but
it's harder to implement.

25
00:01:22.176 --> 00:01:26.500
So, with self-balancing trees.

26
00:01:26.500 --> 00:01:31.541
Basically, you wanna think about using
these when you have huge amounts of data

27
00:01:31.541 --> 00:01:36.300
like 9,500 things and you need to be
able to find things very quickly.

28
00:01:37.880 --> 00:01:42.579
So, you're willing to sacrifice ad
performance and delete performance for

29
00:01:42.579 --> 00:01:44.180
extreme searchability.

30
00:01:45.200 --> 00:01:47.760
That's really like, hey,
self balancing trees,

31
00:01:47.760 --> 00:01:49.690
that's gonna be the thing that I need.

32
00:01:50.960 --> 00:01:55.060
So again, database indexes is like,
is a good example of this.

33
00:01:55.060 --> 00:01:58.130
I have 1 million things in my database.

34
00:01:59.150 --> 00:02:03.395
I have I mean, how many Facebook users
are there right, a billion users, and

35
00:02:03.395 --> 00:02:05.960
I need to be able to look
up any user at any time.

36
00:02:05.960 --> 00:02:09.301
You're gonna use some sort of
self-balancing tree probably for

37
00:02:09.301 --> 00:02:10.400
that index, right?

38
00:02:10.400 --> 00:02:15.482
Where you can say, give me user number
1350, and that'll go into the tree,

39
00:02:15.482 --> 00:02:19.460
and it'll find that really quickly and
hand you back the user.

40
00:02:20.700 --> 00:02:25.090
That's the part where self-balancing
trees end up being super useful for you.

41
00:02:26.920 --> 00:02:27.660
Does that make sense?

42
00:02:29.360 --> 00:02:33.926
&gt;&gt; Yes, it does.
So I guess, like it's a scalable tree,

43
00:02:33.926 --> 00:02:36.010
circle, right?

44
00:02:36.010 --> 00:02:36.540
That's what it is.

45
00:02:36.540 --> 00:02:37.810
&gt;&gt; That's exactly what it is.

46
00:02:37.810 --> 00:02:41.000
It's a extreme scalable tree.

47
00:02:42.050 --> 00:02:47.051
&gt;&gt; About the rotations is
there like an explanation,

48
00:02:47.051 --> 00:02:53.924
that's much easier to or analogy for
what happens during a rotation.

49
00:02:53.924 --> 00:02:56.059
&gt;&gt; I mean the best
&gt;&gt; I mean the concept I'm really

50
00:02:56.059 --> 00:02:57.220
struggling to understand.

51
00:02:58.570 --> 00:03:00.510
&gt;&gt; Weird so I totally understand.

52
00:03:00.510 --> 00:03:03.877
And honestly these videos are the best
things I can show you, right?

53
00:03:03.877 --> 00:03:09.952
[COUGH] Basically, you're just trying
to make the depth of the tree flatter,

54
00:03:09.952 --> 00:03:14.450
so I tried to do here with
the the video that you can watch.

55
00:03:14.450 --> 00:03:21.080
If you go to visualgo.net,
which is where these videos are from.

56
00:03:21.080 --> 00:03:28.680
They have here binary search trees and
you can click on here.

57
00:03:29.710 --> 00:03:31.160
yeah cool, I got it.

58
00:03:31.160 --> 00:03:33.940
And then they have like a little
AVL tree module up here.

59
00:03:35.830 --> 00:03:43.949
So you can insert in here, Click Go.

60
00:03:43.949 --> 00:03:46.303
And you can see here it will
actually go through and

61
00:03:46.303 --> 00:03:48.770
insert all those things for you.

62
00:03:48.770 --> 00:03:50.811
You can kind of visualize
what's happening.

63
00:03:53.464 --> 00:03:55.668
So that's the best thing
I can say of like,

64
00:03:55.668 --> 00:03:58.250
how to kind of conceptually
visualize them more.

65
00:04:00.420 --> 00:04:03.662
As far as like the specific logic
of what it's actually doing for

66
00:04:03.662 --> 00:04:05.230
you like this code right here.

67
00:04:06.380 --> 00:04:10.428
It's just doing that mechanism
of rotating the tree around.

68
00:04:14.560 --> 00:04:18.599
&gt;&gt; So, if you were to explain
the difference between the left and

69
00:04:18.599 --> 00:04:22.750
the right rotation Apart from like,

70
00:04:22.750 --> 00:04:27.370
visualizing it isn't there's
no real there's no easy way.

71
00:04:27.370 --> 00:04:31.800
&gt;&gt; There's no like,
conceptual analogy to make there.

72
00:04:31.800 --> 00:04:34.800
It's just moving nodes around in
a tree to make it look flatter.

73
00:04:38.570 --> 00:04:41.240
A right rotation, right?

74
00:04:41.240 --> 00:04:42.920
Is this right child?

75
00:04:42.920 --> 00:04:44.710
There's two here, the left child.

76
00:04:44.710 --> 00:04:46.250
There is zero here.

77
00:04:46.250 --> 00:04:49.470
And you're trying to make it so 8 is gonna
be the root node of this, and then you're

78
00:04:49.470 --> 00:04:52.660
gonna have a left child of 7 and a right
child of 9, right, cuz that's flatter.

79
00:04:54.440 --> 00:04:56.501
So it means that there are less hops,
right, so

80
00:04:56.501 --> 00:04:59.813
that you end up with trees that are really
nice and pretty, like these ones.

81
00:05:02.637 --> 00:05:07.816
That's the whole point of why you do it,
and then the the actual

82
00:05:07.816 --> 00:05:13.315
mechanism that you do it is just,
again, these steps right here.

83
00:05:18.668 --> 00:05:22.502
But beyond that,
it's just it's really abstract [LAUGH] And

84
00:05:22.502 --> 00:05:27.238
I'm not sure if I can make that abstract
concept any more concrete than it is

85
00:05:27.238 --> 00:05:30.635
because it's just inherently
an abstract concept.

86
00:05:34.602 --> 00:05:37.926
Is that a sufficiently
unsatisfying explanation of that?

87
00:05:41.998 --> 00:05:48.423
&gt;&gt; I think I'll just go to visual go and
try to little concept on that.

88
00:05:48.423 --> 00:05:50.810
&gt;&gt; I would say that would
probably be your best bet, yeah.

89
00:05:52.430 --> 00:05:52.950
&gt;&gt; Thanks.

90
00:05:52.950 --> 00:05:54.340
&gt;&gt; Yep, of course.

91
00:05:54.340 --> 00:05:55.640
Is there another question?

92
00:05:55.640 --> 00:06:00.080
&gt;&gt; This height thing is a bit confusing,
the balancing thing.

93
00:06:00.080 --> 00:06:06.193
Correct me if I'm wrong, the balancing
thing is like if height of the like,

94
00:06:06.193 --> 00:06:12.060
left and right is like minus is greater
than or less than or less than 1.

95
00:06:12.060 --> 00:06:15.310
So is it balanced is it or like what like.

96
00:06:15.310 --> 00:06:18.190
&gt;&gt; So the difference has to be 2, right?.

97
00:06:18.190 --> 00:06:22.820
So again looking,
let's look at this tree, right?

98
00:06:22.820 --> 00:06:29.560
so this 6 Itself has a height of,
I call it 3 in mind, right?

99
00:06:29.560 --> 00:06:34.660
Because this is height 1,
this is height 2, and this is height 3.

100
00:06:34.660 --> 00:06:41.436
So it's left height, sorry,
the height of its left child is 2,

101
00:06:41.436 --> 00:06:49.280
and the height of its right child is 1,
so they're balanced, right?

102
00:06:49.280 --> 00:06:52.940
Cuz 1 is only 1 different than 2.

103
00:06:52.940 --> 00:06:55.699
So as long as it doesn't have
a difference of 2 or more,

104
00:06:55.699 --> 00:06:57.420
then it's considered balanced.

105
00:06:58.930 --> 00:07:03.960
If I added 2 here, so this would have,
the 2 would go here, right?

106
00:07:03.960 --> 00:07:08.683
This would now have a left height of 3,
and this would now have a right height of

107
00:07:08.683 --> 00:07:13.000
1, so it'd be out of balance, and
it'd be out of balance on the left.

108
00:07:14.821 --> 00:07:18.556
So we'd have to balance here.

109
00:07:18.556 --> 00:07:19.970
Does that make sense?

110
00:07:19.970 --> 00:07:22.170
&gt;&gt; Yeah, what if you had a 0 then?

111
00:07:22.170 --> 00:07:25.291
Then the height of 6 would be 4, is it?

112
00:07:25.291 --> 00:07:28.865
&gt;&gt; So if I added a 0 to this tree,
where I'd go here, right?

113
00:07:28.865 --> 00:07:31.240
Same thing with we'd still have to rotate.

114
00:07:33.654 --> 00:07:37.103
&gt;&gt; Yeah, but
the height of the 6 word like 1, 2, 3,

115
00:07:37.103 --> 00:07:41.094
4, is that's how I've been I'm
just confused with the like

116
00:07:41.094 --> 00:07:45.810
the current node we have given
it as a height of 1, right?

117
00:07:45.810 --> 00:07:47.478
Then it's like a,

118
00:07:47.478 --> 00:07:53.227
it's children predecessors
would be the counting 2, 3, 4.

119
00:07:53.227 --> 00:07:54.510
&gt;&gt; Let's see if I can just explain it.

120
00:07:54.510 --> 00:07:58.625
So, if we added 0 to this tree,
the 0 would go here, right?

121
00:07:58.625 --> 00:08:01.971
&gt;&gt; Yeah
&gt;&gt; This would have a left height of 1

122
00:08:01.971 --> 00:08:03.438
a right height of 0.

123
00:08:03.438 --> 00:08:10.680
This would have a left height of 2 and
a right height of 1, that's fine.

124
00:08:12.440 --> 00:08:18.080
This would have a left height of 3,
and a right height of 1.

125
00:08:18.080 --> 00:08:20.334
This 6 would be out of balance, and so

126
00:08:20.334 --> 00:08:24.902
we would rotate left
&gt;&gt; But yeah,

127
00:08:24.902 --> 00:08:27.361
little bit confusing yeah, but yeah.

128
00:08:27.361 --> 00:08:31.471
[LAUGH]
&gt;&gt; It's inherently confusing,

129
00:08:31.471 --> 00:08:35.455
[LAUGH] I didn't invent the algorithm.

130
00:08:35.455 --> 00:08:41.560
[LAUGH] Yeah,
it just takes some getting used to.

131
00:08:41.560 --> 00:08:46.810
And again, this visual algo is actually
pretty helpful and understanding.

132
00:08:46.810 --> 00:08:48.960
When to rotate left when
to rotate like right.

133
00:08:50.190 --> 00:08:55.384
&gt;&gt; Yeah, another thing like
the approach that we followed in

134
00:08:55.384 --> 00:09:01.350
this AVL trees like we applied
the methods on all on load, right?

135
00:09:01.350 --> 00:09:06.002
But can we follow the approach
that we follow it on

136
00:09:06.002 --> 00:09:10.780
the binary search tree
like on the tree node?

137
00:09:10.780 --> 00:09:15.656
Pre bootlicker we applied to makers like
adding or checking these is it balanced or

138
00:09:15.656 --> 00:09:18.999
not like
&gt;&gt; This is what we were talking about

139
00:09:18.999 --> 00:09:24.006
before, so the question is in the BS tree,
just bring it up here,

140
00:09:24.006 --> 00:09:30.480
in the BS tree we have all the the root
the logic here for adding the tree.

141
00:09:30.480 --> 00:09:31.360
Use the while loop.

142
00:09:32.690 --> 00:09:40.780
And here in the AVL tree, we switch to
a recursive add that exists on the node.

143
00:09:40.780 --> 00:09:43.720
Could you do it with a iterative
approach on the tree?

144
00:09:43.720 --> 00:09:47.484
And I think the answer is no, I think
you have to do it recursively because

145
00:09:47.484 --> 00:09:51.703
the balance has to be
checked on the way up And

146
00:09:51.703 --> 00:09:55.930
I don't think there's another way to
handle it, though, I could be wrong.

147
00:09:55.930 --> 00:09:58.920
That's just my intuition in terms
of how I chose to implement it.

148
00:09:59.970 --> 00:10:04.280
Because I think you have
to update the heights and

149
00:10:04.280 --> 00:10:11.550
you have to update the rotations in which
case you would need to do that recursively

