WEBVTT

1
00:00:00.150 --> 00:00:03.303
Let's build some trees.

2
00:00:04.782 --> 00:00:06.294
So we know trees.test.js.

3
00:00:10.381 --> 00:00:13.296
And the first thing we're gonna
do here is under the create tree,

4
00:00:13.296 --> 00:00:16.160
we're gonna create this new node
with an empty string, right?

5
00:00:16.160 --> 00:00:19.780
Cuz remember I was telling you the root
node needs to be an empty string.

6
00:00:21.150 --> 00:00:27.695
And then we're just gonna say for
let i equals zero, i is less than words,

7
00:00:27.695 --> 00:00:35.400
dot length words being all the words that
I'm getting back from the test here.

8
00:00:35.400 --> 00:00:36.835
There'll be the city names.

9
00:00:36.835 --> 00:00:43.629
I plus plus and
when I say const word equal words I and

10
00:00:43.629 --> 00:00:51.630
then we're just gonna say
root.add word.to lowercase.

11
00:00:51.630 --> 00:00:54.847
We're gonna keep everything
in lowercase here so

12
00:00:54.847 --> 00:00:59.069
we don't get too caught up on
what's lowercase and what's not.

13
00:01:02.216 --> 00:01:02.716
Okay.

14
00:01:03.950 --> 00:01:06.293
So this is all we're gonna do for
create tree,

15
00:01:06.293 --> 00:01:09.852
we're just basically going to put
all of the logic here into the node.

16
00:01:15.062 --> 00:01:20.190
Okay, here in the root node,
let's make a constructor.

17
00:01:22.960 --> 00:01:24.830
This is gonna take in a string.

18
00:01:28.660 --> 00:01:32.030
I'm gonna say this children
is an empty array.

19
00:01:34.120 --> 00:01:37.100
This dot terminus is what I call that,
but you could call it whatever you want.

20
00:01:37.100 --> 00:01:42.120
Basically what I'm saying is like,
am I on a valid word right now, right?

21
00:01:42.120 --> 00:01:44.840
So, if I'm searching for Sandy.

22
00:01:46.640 --> 00:01:51.990
Sandy is going to be valid like a valid
term, so, this will be true for that.

23
00:01:51.990 --> 00:01:56.520
And it will also have children, that's
what I'm trying to illustrate there.

24
00:01:58.730 --> 00:02:05.140
This value is going to be equal
to a string of zero, right?

25
00:02:05.140 --> 00:02:10.870
So the first letter is going to be
of the string is gonna be its value.

26
00:02:10.870 --> 00:02:15.946
So again, we're kind of trying to
build B and then I'm gonna cut

27
00:02:15.946 --> 00:02:21.980
pass the string Austin to another node,
and then the string stun and then t.

28
00:02:21.980 --> 00:02:26.738
Right, so basically this node is going to
build itself with all of its children.

29
00:02:30.624 --> 00:02:34.137
And then I say here if string.length.

30
00:02:37.435 --> 00:02:42.994
Is greater than one, so
if it's more than just a character

31
00:02:42.994 --> 00:02:47.890
then I need to say this
.children.push new node.

32
00:02:47.890 --> 00:02:53.477
Right, so we're gonna recursively
create new nodes of string substring.

33
00:02:56.859 --> 00:03:00.280
One, basically what I'm saying here is,

34
00:03:00.280 --> 00:03:04.374
if you pass me Boston,
I'm gonna make the value B.

35
00:03:04.374 --> 00:03:10.842
And then I'm gonna create a new
node in my children of oston.

36
00:03:15.258 --> 00:03:17.774
All right, cool.

37
00:03:17.774 --> 00:03:23.880
Else this dot terminus equals true

38
00:03:38.091 --> 00:03:39.176
Cool, all right.

39
00:03:50.537 --> 00:03:55.330
Okay, then we're gonna create
another one here called add string.

40
00:03:55.330 --> 00:04:02.076
I wanna say const value equals string,

41
00:04:02.076 --> 00:04:06.984
zero, constant next equals

42
00:04:06.984 --> 00:04:12.299
string, dot substring one and

43
00:04:12.299 --> 00:04:18.084
then we're just gonna do a four.

44
00:04:18.084 --> 00:04:20.718
Let i = 0,

45
00:04:28.842 --> 00:04:32.435
I is less than this, but

46
00:04:32.435 --> 00:04:38.007
children dot length I plus plus const

47
00:04:38.007 --> 00:04:43.800
child equals this dot children I.

48
00:04:43.800 --> 00:04:45.533
We're just kind of looking here for

49
00:04:45.533 --> 00:04:48.780
where we're gonna put our new
string here whenever we called add.

50
00:04:51.510 --> 00:04:55.487
All right so
cons child equal this dot children,

51
00:04:55.487 --> 00:05:01.212
then we're gonna say,
if child's dot value, triple equals value.

52
00:05:04.441 --> 00:05:09.287
Then inside of here we're gonna
say if next is the particular

53
00:05:09.287 --> 00:05:12.625
next substring that we're looking for.

54
00:05:15.485 --> 00:05:19.835
Then we're gonna say child that add next.

55
00:05:22.335 --> 00:05:30.070
Otherwise else child dot
terminus equals true, right?

56
00:05:30.070 --> 00:05:32.724
Cuz when we're adding something
new either we have more to add or

57
00:05:32.724 --> 00:05:35.390
we've reached the end,
in which case we're going to say cool.

58
00:05:35.390 --> 00:05:37.320
This is a complete string right here.

59
00:05:43.300 --> 00:05:45.400
Yeah, and
I got too many curly braces here.

60
00:05:47.860 --> 00:05:50.944
Okay, and then once we've found that here,
we're gonna say return.

61
00:05:55.268 --> 00:05:57.180
Okay, and then inside of that.

62
00:06:00.935 --> 00:06:01.903
Instead of add.

63
00:06:07.070 --> 00:06:08.466
So here.

64
00:06:13.615 --> 00:06:15.909
So, outside of that for
loop thumps, so for loop

65
00:06:24.806 --> 00:06:28.617
This return should be inside of this one.

66
00:06:28.617 --> 00:06:32.253
Yep, okay, so
line 38 should be here on 37.

67
00:06:32.253 --> 00:06:35.507
It should be inside of this if value here.

68
00:06:37.557 --> 00:06:38.186
Yep, okay, cool.

69
00:06:38.186 --> 00:06:40.169
I was getting confused there for a second.

70
00:06:44.901 --> 00:06:49.125
Then down here, we're just gonna say

71
00:06:49.125 --> 00:06:54.015
this.children.push, new node string.

72
00:06:54.015 --> 00:06:55.810
Okay, cool.

73
00:06:55.810 --> 00:06:59.330
So just kind of to work backwards through
this or work forwards through it rather.

74
00:07:00.440 --> 00:07:02.836
Whenever we're trying to add a new string,

75
00:07:02.836 --> 00:07:06.395
we're trying to get to the point at
the end of this where we can just

76
00:07:06.395 --> 00:07:09.600
concatenate holistically
a whole new node to it, right?

77
00:07:10.670 --> 00:07:13.310
So again, going back to here.

78
00:07:13.310 --> 00:07:15.724
We're gonna go if we're trying to add.

79
00:07:18.209 --> 00:07:19.047
I don't know.

80
00:07:22.256 --> 00:07:27.105
Bolton, right, which is another city,
we would start at the node we go to B,

81
00:07:27.105 --> 00:07:30.538
we'd go to o and
then we'd see that there's no l here,

82
00:07:30.538 --> 00:07:33.920
at which points would say
cool add lton here, right?

83
00:07:35.100 --> 00:07:38.120
So what this is doing is this is finding.

84
00:07:38.120 --> 00:07:40.610
It goes until the end until
it runs out of places to go.

85
00:07:40.610 --> 00:07:45.120
And then it says, cool, I found that
place, add the rest of the new string.

86
00:07:46.280 --> 00:07:51.183
Unless, let's say we had a city for
some reason called Bossed right, it would

87
00:07:51.183 --> 00:07:56.260
find here like, okay, this is the end and
then it would just mark t as a terminus.

88
00:07:57.330 --> 00:07:59.200
And if called self good,
everything's good to go.

89
00:08:00.840 --> 00:08:02.957
So that's what happens here.

90
00:08:07.339 --> 00:08:09.627
Yep, that's what happens here in add.

91
00:08:14.566 --> 00:08:19.547
Okay, so let's write complete, so
we're gonna say let completions,

92
00:08:19.547 --> 00:08:21.600
cuz we wanna find all of them.

93
00:08:21.600 --> 00:08:25.420
If you ask for San, we wanna get
San Diego, San Francisco, all of those, so

94
00:08:25.420 --> 00:08:26.998
that's why that's an array.

95
00:08:26.998 --> 00:08:30.042
And then we're gonna say,

96
00:08:33.000 --> 00:08:37.270
For let I equal 0.

97
00:08:37.270 --> 00:08:42.448
I is less than this dot children dot

98
00:08:42.448 --> 00:08:47.983
length i plus plus and when I say const

99
00:08:47.983 --> 00:08:52.997
child equals this dot children.

100
00:08:52.997 --> 00:08:58.130
I lm not gonna say completions

101
00:09:00.753 --> 00:09:09.232
Equals completions.concat(child).

102
00:09:09.232 --> 00:09:13.830
And we're gonna write a second
method here called _complete.

103
00:09:13.830 --> 00:09:16.690
This one's going to be like
the externally facing that people

104
00:09:16.690 --> 00:09:17.956
are going to call this API.

105
00:09:17.956 --> 00:09:23.180
But we're gonna write our own
complete internally called _complete

106
00:09:23.180 --> 00:09:29.570
with string empty string and array, and
then we're gonna write a recursive method.

107
00:09:29.570 --> 00:09:33.075
That's actually going to recursively call
complete on all of the children to make

108
00:09:33.075 --> 00:09:36.043
sure that we get all of the various
different possible completions.

109
00:09:41.484 --> 00:09:44.080
So underscore complete here,
we're just gonna write that above.

110
00:09:45.090 --> 00:09:47.674
And it's gonna take in the search string,
so

111
00:09:47.674 --> 00:09:50.560
the one the string that we're building,
okay?

112
00:09:50.560 --> 00:09:54.940
So search we're gonna take in built which
we've stuffed we've already built so far.

113
00:09:56.710 --> 00:10:01.713
And then we're also going to take in, they
already made suggestions, right, because

114
00:10:01.713 --> 00:10:06.330
you might get multiple suggestions for
completions whatever you wanna call it.

115
00:10:09.075 --> 00:10:15.145
So we're gonna say if suggestions.length

116
00:10:15.145 --> 00:10:20.065
is less than or equal to 3, and

117
00:10:20.065 --> 00:10:24.840
sorry, the suggestions rather.

118
00:10:24.840 --> 00:10:29.967
We're only gonna start autocompleting if
they've typed three things in, right?

119
00:10:29.967 --> 00:10:32.955
I'm sure you've noticed that on Twitter
you have to type like three things and

120
00:10:32.955 --> 00:10:35.552
if you're looking for something or
otherwise won't complete it.

121
00:10:35.552 --> 00:10:40.722
That's what that's doing or

122
00:10:40.722 --> 00:10:45.270
search and search 0 is not

123
00:10:45.270 --> 00:10:49.620
equal to this dot value.

124
00:10:49.620 --> 00:10:55.140
So this is saying, hey,
you called complete.

125
00:10:55.140 --> 00:10:57.630
This is not a match with
the particular element I'm on.

126
00:10:57.630 --> 00:11:03.690
So let's say I was searching for BO,
and I was on the A child is a K.

127
00:11:03.690 --> 00:11:05.897
This doesn't match, so
I'm not gonna do anything here,

128
00:11:05.897 --> 00:11:07.260
I'm just gonna return right away.

129
00:11:08.900 --> 00:11:09.903
In either one of these cases,

130
00:11:09.903 --> 00:11:12.000
what we just wanna do is we just
wanna return the suggestions.

131
00:11:20.850 --> 00:11:21.797
Okay.

132
00:11:26.271 --> 00:11:29.812
So if this terminus if we found
something that is a complete thing,

133
00:11:29.812 --> 00:11:32.040
then we're just gonna say suggestions.

134
00:11:33.088 --> 00:11:37.312
You know what I was,
the suggestions here is the completions.

135
00:11:37.312 --> 00:11:42.054
I'm sorry, remember what the exact
code I wrote here [LAUGH] So

136
00:11:42.054 --> 00:11:47.130
the suggestions here is all
the ones that we have found so far.

137
00:11:47.130 --> 00:11:49.400
We're only gonna suggest to
up to three at a time right?

138
00:11:49.400 --> 00:11:50.942
If someone starts typing San and

139
00:11:50.942 --> 00:11:55.170
you suggest them 700 cities named San
they're just gonna get overwhelmed.

140
00:11:55.170 --> 00:12:00.134
So in this particular case, we're just
going to suggest them the top three.

141
00:12:00.134 --> 00:12:06.172
So suggestions dot push and then hear what
we're gonna say it was gonna put built

142
00:12:09.218 --> 00:12:13.561
Built, And this star value.

143
00:12:18.606 --> 00:12:23.289
So built so far like so
if we're searching for Boston, right?

144
00:12:25.330 --> 00:12:28.690
This is going to find built,
which will get to bosto, and

145
00:12:28.690 --> 00:12:32.690
it's gonna find N as the next
one being the terminus, right?

146
00:12:32.690 --> 00:12:36.530
In which case, this will push
into the suggestions Boston.

147
00:12:39.700 --> 00:12:42.489
If you feel like this is more clear,
you can also do.

148
00:12:45.283 --> 00:12:48.807
In fact let's just put it that way,
built plus this dot value,

149
00:12:48.807 --> 00:12:51.080
that might be a bit clear.

150
00:12:51.080 --> 00:12:53.966
It's just string concatenation,

151
00:12:53.966 --> 00:12:58.203
I was doing it with a template
string before, okay?

152
00:12:58.203 --> 00:13:00.379
Then under that we're gonna
say this dot children.

153
00:13:04.479 --> 00:13:10.110
And then yeah, let's just do it
this way for let I equals zero.

154
00:13:11.200 --> 00:13:16.420
i is less than this dot
children dot length.

155
00:13:18.670 --> 00:13:23.300
I plus plus, and
we're just gonna say child.

156
00:13:24.490 --> 00:13:27.844
Complete, sorry,
child dot underscore complete.

157
00:13:31.030 --> 00:13:38.465
Where we say const child is assigned
this.children i, like that.

158
00:13:38.465 --> 00:13:43.652
Child.complete, search.substring one so
everything from

159
00:13:43.652 --> 00:13:48.750
the first character, so
you cut out the 0th element of this.

160
00:13:49.820 --> 00:13:53.822
So again, if we're searching and
we typed b,

161
00:13:53.822 --> 00:14:00.050
we'll cut this one out and
then we'll pass that one on, right.

162
00:14:00.050 --> 00:14:00.550
So that's what that's doing.

163
00:14:03.661 --> 00:14:10.301
Built plus this dot value and suggestions.

164
00:14:15.973 --> 00:14:21.350
And, you can say suggestions
equal here if you want to.

165
00:14:21.350 --> 00:14:23.133
It doesn't really matter,

166
00:14:23.133 --> 00:14:29.210
because we're operating directly with on
suggestions we say, push here, right?

167
00:14:29.210 --> 00:14:33.300
But if you want, you can say
suggestions equals child like that.

168
00:14:33.300 --> 00:14:36.461
And then at the very bottom here,
we're gonna say return suggestions.

169
00:14:46.962 --> 00:14:47.669
All right.

170
00:14:49.820 --> 00:14:51.660
So I think that should be it.

171
00:14:54.870 --> 00:14:55.997
Make sure that my stuff works here.

172
00:15:03.129 --> 00:15:11.497
One failed skimmer that path
finding madness log maze.

173
00:15:18.852 --> 00:15:22.023
Okay, they're, there,
let's try that again.

174
00:15:25.778 --> 00:15:28.557
So let's pop into why our test is failing.

175
00:15:31.463 --> 00:15:35.220
Completions is undefined,
that seems like it could be a problem.

176
00:15:36.800 --> 00:15:38.680
It's because I don't return them.

177
00:15:38.680 --> 00:15:39.602
Start with that.

178
00:15:42.729 --> 00:15:43.674
Return completions

179
00:16:01.751 --> 00:16:03.988
All right, so
this one complete is still undefined.

180
00:16:18.524 --> 00:16:20.220
Not sure what I did here,
all right, one more time.

181
00:16:21.290 --> 00:16:25.282
There we go, and
does that is passing now, okay?

182
00:16:25.282 --> 00:16:30.030
So this is how you basically
do type ahead like this.

183
00:16:30.030 --> 00:16:32.276
I don't know if this was
invented at Twitter, but

184
00:16:32.276 --> 00:16:34.265
certainly Twitter's one made it popular.

185
00:16:34.265 --> 00:16:38.136
Of everything that I've showed you today,
trees are actually one of the more recent

186
00:16:38.136 --> 00:16:41.040
innovations in computer science for
dealing with type ahead.

187
00:16:42.770 --> 00:16:45.556
Again, it's still depth first
traversal on the tree, right,

188
00:16:45.556 --> 00:16:49.980
which is something from the 50's,
60's, 70's, probably even before that.

189
00:16:49.980 --> 00:16:55.030
But using it as like a type of
head kind of guests UI trick.

190
00:16:55.030 --> 00:16:57.790
That's more more of one of
the recent innovations here.

191
00:17:00.520 --> 00:17:02.829
All right, any questions about trees?

192
00:17:04.980 --> 00:17:10.980
&gt;&gt; So to add more order to say words,
you would add weight to them, right.

193
00:17:10.980 --> 00:17:13.070
That's how we would solve the problem.

194
00:17:13.070 --> 00:17:15.670
&gt;&gt; Yeah, so let's say one of the words was
more important than the others, right?

195
00:17:15.670 --> 00:17:19.277
Like let's say you want to suggest,
based on population, right,

196
00:17:19.277 --> 00:17:22.790
that would be like a good
indication you can suggest.

197
00:17:22.790 --> 00:17:24.680
Boston before bountiful, right?

198
00:17:25.820 --> 00:17:28.327
In this particular case,
the way that we did it here,

199
00:17:28.327 --> 00:17:30.297
you would just add Boston first, right?

200
00:17:30.297 --> 00:17:32.430
And that would make it come up first.

201
00:17:32.430 --> 00:17:33.970
So you could do it that way.

202
00:17:33.970 --> 00:17:36.863
The other thing you could do is you could
put exactly what you said which is like

203
00:17:36.863 --> 00:17:39.180
a priority or a weight or
something like that.

204
00:17:39.180 --> 00:17:41.561
So you'd have to do all
of the completions and

205
00:17:41.561 --> 00:17:45.336
then you'd have to kinda sorted out
by which one had a higher priority.

206
00:17:45.336 --> 00:17:49.614
Or actually probably a better way of doing
that is, every time you added something

207
00:17:49.614 --> 00:17:52.652
new, you would just make sure
that it would be reordered so

208
00:17:52.652 --> 00:17:55.770
that the higher priority ones
end up being higher, right?

209
00:17:56.800 --> 00:18:01.259
Cuz the advantage of this tree is that
if you go down here to the suggestions,

210
00:18:01.259 --> 00:18:02.590
this part right here.

211
00:18:03.910 --> 00:18:05.800
This actually quits after three times,
right?

212
00:18:05.800 --> 00:18:09.230
So, it's actually quite fast, so, it can
do completions really, really quick.

213
00:18:09.230 --> 00:18:12.894
And if I have to go do all of
the completions every single time,

214
00:18:12.894 --> 00:18:17.560
every time that I type B,
it's just going to slow to a crawl right?

215
00:18:17.560 --> 00:18:20.060
Before it does all of those completions.

216
00:18:20.060 --> 00:18:23.189
So that's why I would be inclined
to say is that you should build

217
00:18:23.189 --> 00:18:26.980
the data structure in such a way that
the higher priority ones come up first.

