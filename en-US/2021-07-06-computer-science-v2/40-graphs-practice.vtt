WEBVTT

1
00:00:00.000 --> 00:00:05.286
All right, so
let's pop over to our code sandbox again.

2
00:00:05.286 --> 00:00:08.285
We're gonna go into the graph here.

3
00:00:08.285 --> 00:00:11.380
So the first thing here is you're
gonna see there is a job site js.

4
00:00:11.380 --> 00:00:15.950
This is a very long file with
a lot of people with randomly

5
00:00:15.950 --> 00:00:19.680
generated names, titles and companies.

6
00:00:19.680 --> 00:00:25.250
So again, I didn't write these,
I generated these.

7
00:00:26.310 --> 00:00:29.370
And these people are all
connected to random people.

8
00:00:30.630 --> 00:00:37.386
Right, so this person 27
Reuven Dowbekin is connected to id 33,

9
00:00:37.386 --> 00:00:41.818
43, 503, 940, 175, 825.

10
00:00:41.818 --> 00:00:43.474
So these are all the connections
that this person has.

11
00:00:43.474 --> 00:00:50.080
And some people, this one has only three,
this person has four right?

12
00:00:50.080 --> 00:00:51.240
So there's a varying amount.

13
00:00:53.120 --> 00:00:57.520
So this describes our social
network of people I think there

14
00:00:57.520 --> 00:01:00.869
are 1000 people in this particular set.

15
00:01:03.245 --> 00:01:03.939
Okay.

16
00:01:06.543 --> 00:01:11.950
If we head over to our function here
I kind of describe a little bit.

17
00:01:12.970 --> 00:01:15.930
This is what the items
the objects look right?

18
00:01:15.930 --> 00:01:20.500
They have an id, they have a name
accompany a title and a connection.

19
00:01:20.500 --> 00:01:27.860
And I gave you here a function that you
can just call like get user 12 right?

20
00:01:27.860 --> 00:01:28.890
And this will hand you back.

21
00:01:30.100 --> 00:01:33.050
The user that's associated with id 12,
right?

22
00:01:33.050 --> 00:01:34.610
So that's what this function is there for.

23
00:01:36.610 --> 00:01:41.574
So actually, if I said get user 308,
it would literally hand me back this

24
00:01:41.574 --> 00:01:45.736
object Okay.

25
00:01:48.584 --> 00:01:55.220
So what I want you to do, now if you can
get rid of this, this is not true anymore.

26
00:01:57.460 --> 00:01:59.677
You can ignore that code
pen link that's in there.

27
00:02:06.077 --> 00:02:11.000
So, find most common title, what I want
you to do is I'm gonna give you an id.

28
00:02:11.000 --> 00:02:13.777
So I'll give you id 30 on this one, and

29
00:02:13.777 --> 00:02:17.390
then I'll give you degrees of separation,
right?

30
00:02:17.390 --> 00:02:22.140
So, the one degree of separation would
be all the people that I'm connected to.

31
00:02:22.140 --> 00:02:25.267
And two degrees of separation would
be the people I'm connected to and

32
00:02:25.267 --> 00:02:27.730
the people they are connected to, right?

33
00:02:27.730 --> 00:02:31.700
So on to three degrees, which is the
people those people are connected to and

34
00:02:31.700 --> 00:02:33.760
all the people that are inside of that.

35
00:02:33.760 --> 00:02:38.761
And the last one here which
is the extra credit one,

36
00:02:38.761 --> 00:02:43.181
user id 1with seven degrees of separation,

37
00:02:43.181 --> 00:02:48.089
which is all 1000 users except five,
right?

38
00:02:51.926 --> 00:02:53.260
Yeah, so that's what I want you to do.

39
00:02:53.260 --> 00:02:57.992
I want you to find the most common
job title amongst all of these

40
00:02:57.992 --> 00:03:00.690
people in these networks.

41
00:03:00.690 --> 00:03:03.733
There should be exactly one answer.

42
00:03:03.733 --> 00:03:07.221
If you did help here down in this yeah,

43
00:03:07.221 --> 00:03:12.349
I actually do have this little
function that I commented

44
00:03:12.349 --> 00:03:17.040
out here that logs things
out in a very useful way.

45
00:03:17.040 --> 00:03:19.200
So that can be helpful to you as well.

46
00:03:19.200 --> 00:03:22.486
If you need something that's going
to log something out for you

47
00:03:26.747 --> 00:03:31.644
So first thing we're gonna do down
here in the findMostCommonTitle,

48
00:03:31.644 --> 00:03:33.726
we're gonna create a queue.

49
00:03:33.726 --> 00:03:41.020
So let queue = and then we're just
gonna just queue up ourselves, okay?

50
00:03:42.200 --> 00:03:47.690
We're gonna create a new set,
so const seen = new set.

51
00:03:47.690 --> 00:03:49.551
And with one fun thing with sets,

52
00:03:49.551 --> 00:03:52.820
you can give them an array of
things to see their data with.

53
00:03:54.450 --> 00:03:58.160
You don't want to requeue
the id right there.

54
00:03:58.160 --> 00:04:03.955
So we're going to add ourselves
to the already seen set.

55
00:04:03.955 --> 00:04:08.639
And then we're going to have a jobs
objects where we're going to keep

56
00:04:08.639 --> 00:04:12.130
track of all the jobs that
we're gonna see, okay?

57
00:04:14.443 --> 00:04:19.398
Okay, now we're gonna write a for
loop, let i = 0, i is less than or

58
00:04:19.398 --> 00:04:22.140
equal to degrees of separation.

59
00:04:22.140 --> 00:04:27.222
Right because we're only

60
00:04:27.222 --> 00:04:32.535
gonna go so many degrees and

61
00:04:32.535 --> 00:04:38.084
then i++ const new queue.

62
00:04:38.084 --> 00:04:39.730
New queue equals empty array.

63
00:04:40.980 --> 00:04:44.986
And then here we're gonna
say while queue.length.

64
00:04:46.212 --> 00:04:52.173
So the first thing we do is I'm gonna

65
00:04:52.173 --> 00:04:59.534
say const user get user with queue.shift.

66
00:05:00.730 --> 00:05:02.758
So we're gonna pull the first user off.

67
00:05:09.193 --> 00:05:12.835
Okay, and then here I'm gonna
queue up the next iteration.

68
00:05:18.649 --> 00:05:21.470
And the way I'm gonna do
that is I'm gonna save for.

69
00:05:21.470 --> 00:05:27.693
Let j=0, j is less than users,

70
00:05:27.693 --> 00:05:35.037
user rather.connections.length.

71
00:05:38.482 --> 00:05:38.982
J++.

72
00:05:42.583 --> 00:05:47.308
I'm gonna say const connection

73
00:05:47.308 --> 00:05:51.859
= user.connections(j).

74
00:05:54.693 --> 00:05:57.580
Then here, I'm just going to say if
I've already seen this user before.

75
00:05:59.410 --> 00:06:01.240
Or rather if I haven't
seen this user before.

76
00:06:02.830 --> 00:06:06.710
Seen.has(connection).

77
00:06:06.710 --> 00:06:10.950
So if I've seen this user before I'm
not gonna add them to the new queue.

78
00:06:10.950 --> 00:06:17.562
Otherwise, I'm gonna say
newQueue.push(connection)

79
00:06:17.562 --> 00:06:23.920
seen.add(connection) so
I don't add the user again.

80
00:06:30.340 --> 00:06:33.436
Okay, so
this is the part where I'm queuing up for

81
00:06:33.436 --> 00:06:35.514
the next particular iteration.

82
00:06:38.795 --> 00:06:43.691
And then down here, I'm just gonna

83
00:06:43.691 --> 00:06:48.594
say jobs[user.title] = jobs,

84
00:06:51.282 --> 00:06:53.583
user.title.

85
00:06:57.493 --> 00:07:01.930
So if I've seen the user before,
or sorry, the job title.

86
00:07:01.930 --> 00:07:03.590
So let's say it's program manager.

87
00:07:05.110 --> 00:07:10.096
If I've seen it before,
if it already exists,

88
00:07:10.096 --> 00:07:15.583
then what I want to do
is jobs(user.title) +1,

89
00:07:15.583 --> 00:07:18.690
or I want to be 1, right?

90
00:07:18.690 --> 00:07:21.280
So if I've never seen it before,
then I'm going to start it with one.

91
00:07:22.430 --> 00:07:25.190
So if this is two,
then I wanna make it three.

92
00:07:25.190 --> 00:07:27.310
If it doesn't exist,
then I wanna make it one.

93
00:07:27.310 --> 00:07:29.313
That's what this little
bit of logic is doing.

94
00:07:35.040 --> 00:07:35.540
Okay?

95
00:07:40.603 --> 00:07:43.170
And then at the end of this
I'll have this newQueue, right?

96
00:07:43.170 --> 00:07:48.990
Which is gonna be the new things, the next
level of connections I wanna process.

97
00:07:48.990 --> 00:07:51.553
All I have to do is at the end of this.

98
00:07:54.104 --> 00:08:00.946
Loop here is I'll just
say queue = newQueue.

99
00:08:03.601 --> 00:08:08.063
Okay, so this four loop is gonna
determine how many degrees

100
00:08:08.063 --> 00:08:12.630
breadth first traversal I'm
gonna do it on my connections.

101
00:08:13.900 --> 00:08:17.140
And what this is doing is this is
queuing up the next level of connection.

102
00:08:17.140 --> 00:08:21.525
So for example, if this is three right I
actually will have the fourth level of

103
00:08:21.525 --> 00:08:25.640
connection's ready to process,
but it just won't do it right.

104
00:08:25.640 --> 00:08:29.800
Because this will prevent
me from looping again.

105
00:08:32.885 --> 00:08:37.857
Okay, now I'm going to end up
with this object called jobs

106
00:08:37.857 --> 00:08:42.226
which kinda look something
like program manager.

107
00:08:49.269 --> 00:08:55.780
Designer 3 right and
I need to turn this into a sorted list.

108
00:08:55.780 --> 00:08:58.020
There's a bunch of ways to do that.

109
00:08:58.020 --> 00:09:00.150
I'm happy with any way
that you choose to do it.

110
00:09:00.150 --> 00:09:01.810
I'm just gonna go with object keys.

111
00:09:03.230 --> 00:09:06.230
So I'm gonna say const jobkeys.

112
00:09:06.230 --> 00:09:09.620
This actually probably would be better
off broken into a different function.

113
00:09:09.620 --> 00:09:15.175
I just didn't, Object.keys[jobs].

114
00:09:15.175 --> 00:09:19.500
This will give me back an array of all
the keys that are in the jobs object.

115
00:09:22.039 --> 00:09:29.040
And then here, I'm just gonna loop over
it and say let biggestNumber=jobs.

116
00:09:29.040 --> 00:09:32.869
Excuse me [COUGH] sorry,

117
00:09:32.869 --> 00:09:37.082
let biggestNumber=Jobs

118
00:09:37.082 --> 00:09:44.184
(jobkeys)(0) Let

119
00:09:44.184 --> 00:09:53.678
jobName =jobKeys(0)

120
00:09:56.990 --> 00:09:59.058
And then I'm just gonna do a for
loop over this and try and

121
00:09:59.058 --> 00:10:00.600
find the one that has the biggest number.

122
00:10:03.680 --> 00:10:08.274
You could absolutely do this
with like a reduce as well.

123
00:10:08.274 --> 00:10:11.035
If you're into functional
programming like that, but

124
00:10:11.035 --> 00:10:13.600
I find reduces are frequently
pretty hard to read.

125
00:10:13.600 --> 00:10:17.737
So I'm just gonna do with a for

126
00:10:17.737 --> 00:10:23.871
loop i is less than jobkeys.length i++.

127
00:10:25.904 --> 00:10:31.263
Const currentJob =jobkeys(i).

128
00:10:35.867 --> 00:10:36.703
If jobs.

129
00:10:40.139 --> 00:10:44.153
CurrentJob.

130
00:10:46.113 --> 00:10:54.093
Is bigger than biggestNumber
then jobName =currentJob and

131
00:10:54.093 --> 00:11:00.826
biggestNumber is assigned
jobs(currentJob).

132
00:11:07.784 --> 00:11:12.264
Okay, at the end of this
little bit right here,

133
00:11:12.264 --> 00:11:17.080
I will have the job name which
will be the job that has

134
00:11:17.080 --> 00:11:21.242
the most connections in my social network.

135
00:11:23.506 --> 00:11:28.668
Okay, and then down here we
can just say return jobName.

136
00:11:33.089 --> 00:11:36.139
Okay, we'll move skip down here.

137
00:11:39.050 --> 00:11:41.274
And we will run this.

138
00:11:43.272 --> 00:11:47.332
And if you look down here at graph,

139
00:11:47.332 --> 00:11:51.962
you can see here that graph is passing.

140
00:11:51.962 --> 00:11:54.424
So one more we'll see if that
works with extra credit.

141
00:12:00.436 --> 00:12:02.408
And looks like it is.

142
00:12:04.985 --> 00:12:10.162
So just for kind of funsies,
let's go grab over here from the solution

143
00:12:10.162 --> 00:12:15.449
this little bit here, which is I just
wrote a little utility to log out.

144
00:12:15.449 --> 00:12:16.567
All of the.

145
00:12:19.521 --> 00:12:21.501
See all the job titles sorted.

146
00:12:23.055 --> 00:12:29.515
All right so let's try running that.

147
00:12:31.959 --> 00:12:38.661
Play, you can see down here this
is actually logging out for

148
00:12:38.661 --> 00:12:43.098
us all the various different job keys.

149
00:12:43.098 --> 00:12:44.815
Let's get that too.

150
00:12:44.815 --> 00:12:46.505
And then we'll clear this and
run it again.

151
00:12:49.895 --> 00:12:52.654
So you can see here geological
engineer that has 16.

152
00:12:52.654 --> 00:12:55.598
The rest of us have 15
that's the last one.

153
00:12:55.598 --> 00:12:57.416
That's the extra credit.

154
00:12:57.416 --> 00:13:02.258
The one here with user 307
with 4 degrees of separation.

155
00:13:02.258 --> 00:13:06.318
Pharmacist is 11.

156
00:13:06.318 --> 00:13:09.342
Graphic designer on this one is 5.

157
00:13:11.588 --> 00:13:15.860
And the top one here,
sorry yeah, that would be 0.5.

158
00:13:15.860 --> 00:13:20.908
Librarian here is 3 with
2 degrees of separation.

159
00:13:24.618 --> 00:13:27.939
Cool, so any questions on graph?

160
00:13:29.840 --> 00:13:34.505
Is it always going to have or
is any solution always going to have

161
00:13:34.505 --> 00:13:39.420
that amount of time complexity in it for
graph traversal?

162
00:13:39.420 --> 00:13:41.560
&gt;&gt; Yeah, okay, I get your question.

163
00:13:41.560 --> 00:13:45.140
So, I guess the question really is
like what's the complexity of this?

164
00:13:45.140 --> 00:13:47.390
Cuz it's not n cubed.

165
00:13:47.390 --> 00:13:50.889
So I know I told you to look out for
yeah, that's good question.

166
00:13:50.889 --> 00:13:57.687
I know I told you to look for for nested
loops, but in reality here it's not like

167
00:13:57.687 --> 00:14:03.465
this is looping over everything
in the particular array, right?

168
00:14:03.465 --> 00:14:06.530
It's looping over a very small subsection
of things to the point that we can

169
00:14:06.530 --> 00:14:08.215
basically ignore it, right?

170
00:14:08.215 --> 00:14:11.735
Because, like if we look back
at our jobs array, right?

171
00:14:11.735 --> 00:14:13.636
If it was n cubed, that means for

172
00:14:13.636 --> 00:14:17.794
every additional person that we put
in this that we would be increasing

173
00:14:17.794 --> 00:14:22.860
the amount of processing that we'd have
to do by a significant amount right?

174
00:14:22.860 --> 00:14:27.801
This means that everything would
have to relate to everything else in

175
00:14:27.801 --> 00:14:33.730
the array twice in like a exponential
fashion, which is not true, right?

176
00:14:33.730 --> 00:14:41.587
Everything that we add to the jobs array
actually really only adds basically,

177
00:14:41.587 --> 00:14:46.120
a negligible amount of complexity, right?

178
00:14:48.020 --> 00:14:50.652
So and the reason for that,
if you're looking at this,

179
00:14:50.652 --> 00:14:52.730
I'm looping over everything in the array.

180
00:14:52.730 --> 00:14:57.230
So it's important to know like
what you're actually looping over.

181
00:14:57.230 --> 00:15:01.145
In this particular case, we're not
looping over everything in the array,

182
00:15:01.145 --> 00:15:03.665
we're just looping over connections,
right.

183
00:15:03.665 --> 00:15:08.642
And those connections is never very much,
now, if every user is connected

184
00:15:08.642 --> 00:15:13.625
to every other user in the array,
then we be in a world of hurt here, right?

185
00:15:13.625 --> 00:15:17.949
But in this particular one,
we're just really asking,

186
00:15:17.949 --> 00:15:22.554
have I seen this connection before,
no, cool, I'm good.

187
00:15:22.554 --> 00:15:25.220
So the complexity here is really
determined on how many degrees of

188
00:15:25.220 --> 00:15:26.727
separation we're going out there.

189
00:15:26.727 --> 00:15:31.904
The more degrees of separation
that we're fanning out too,

190
00:15:31.904 --> 00:15:36.810
we're getting exponentially
more complexity.

191
00:15:36.810 --> 00:15:40.222
So any big how, here is going to have to
include however many degrees of separation

192
00:15:40.222 --> 00:15:41.420
that we're going to go out.

193
00:15:41.420 --> 00:15:45.793
It's going to be in terms of
the degrees of separation.

194
00:15:45.793 --> 00:15:46.730
And as far as what a few.

195
00:15:46.730 --> 00:15:51.268
&gt;&gt; How deep in the graph, we're like
the tree like structure that we're going,

196
00:15:51.268 --> 00:15:54.460
that's just going to
exponentially increase.

197
00:15:54.460 --> 00:15:56.830
&gt;&gt; Right.
&gt;&gt; Exactly, okay, that makes sense.

198
00:15:56.830 --> 00:15:57.760
Thank you.

199
00:15:57.760 --> 00:15:58.930
&gt;&gt; Yeah, of course.

200
00:15:58.930 --> 00:16:03.810
I mean, have you heard of
the degrees of Kevin Bacon right?

201
00:16:03.810 --> 00:16:08.300
Any actor can be connected to Kevin Bacon
with like 7 degrees of separation.

202
00:16:08.300 --> 00:16:11.147
That's because once you go
out 7 degrees of separation,

203
00:16:11.147 --> 00:16:14.480
you're now interacting with
half of the world's populace.

204
00:16:14.480 --> 00:16:15.830
Right or something weird like that.

205
00:16:17.080 --> 00:16:20.930
So, yeah, it's exponential based on that.

206
00:16:20.930 --> 00:16:21.720
So yeah, good question.

207
00:16:21.720 --> 00:16:22.600
Thank you.

208
00:16:22.600 --> 00:16:27.538
&gt;&gt; If we use the max heap to sort
the traversals would it be more efficient

209
00:16:27.538 --> 00:16:31.213
than just a linear iteration
on the results array?

210
00:16:31.213 --> 00:16:32.503
&gt;&gt; If you used.

211
00:16:35.488 --> 00:16:37.550
So here, we use a max heap.

212
00:16:39.980 --> 00:16:45.900
So no, I don't think so.

213
00:16:45.900 --> 00:16:50.198
So, this is a linear search, right this
is basically the definition of a linear

214
00:16:50.198 --> 00:16:52.443
search, which a linear search is just and

215
00:16:52.443 --> 00:16:55.475
right because we look at every
single item in the array.

216
00:16:55.475 --> 00:17:00.462
And when you have an unsorted array,
which is basically what this is,

217
00:17:00.462 --> 00:17:05.210
your best case scenario is that you
look at every item in the array.

218
00:17:05.210 --> 00:17:10.059
Whereas if you're making a max heap,
it's going to be n plus a bit

219
00:17:10.059 --> 00:17:14.824
more because you're doing some
unnecessary comparisons to get

220
00:17:14.824 --> 00:17:20.360
ready to do like heapify and be able
to do either dq or like a heap sort.

221
00:17:20.360 --> 00:17:25.775
So you're doing extra work that you
don't actually really need to do.

222
00:17:27.489 --> 00:17:31.254
So I really appreciate where that person's
head is going because they are thinking

223
00:17:31.254 --> 00:17:34.280
about it as, hey, I need to find
the biggest number on this array.

224
00:17:35.460 --> 00:17:37.500
Heaps are very good for that.

225
00:17:37.500 --> 00:17:40.080
So that's a good brain space to be in.

226
00:17:40.080 --> 00:17:42.850
And I think that's like, don't lose that.

227
00:17:42.850 --> 00:17:47.243
But in this particular case, literally the
most effective thing you can do is just

228
00:17:47.243 --> 00:17:50.050
a for loop saying,
are you the biggest number?

229
00:17:50.050 --> 00:17:51.460
Nope.
Are you the biggest number?

230
00:17:51.460 --> 00:17:56.240
Until you eventually get to the end,
you will have found the, biggest number.

231
00:17:56.240 --> 00:17:59.397
Now the difference in
complexity here is miniscule,

232
00:17:59.397 --> 00:18:03.700
to the point that I wouldn't really
care so much if I saw that in code.

233
00:18:03.700 --> 00:18:04.688
It's just overkill.

234
00:18:07.468 --> 00:18:14.460
And in reality, we could've just used,
I think there's an -.max, right?

235
00:18:14.460 --> 00:18:20.376
That's probably what I would've used
because that does that automatically for

236
00:18:20.376 --> 00:18:23.670
you, but yeah, cool, good question.

237
00:18:23.670 --> 00:18:29.630
And yeah, definitely go check out that
Neo4j stuff, if you enjoyed this.

238
00:18:29.630 --> 00:18:33.568
We just basically implemented a bunch
of stuff that Neo4j just does for you,

239
00:18:33.568 --> 00:18:35.567
allows you to write queries that like,

240
00:18:35.567 --> 00:18:39.590
hey, give me the most common job
title within 5 degrees of my network.

241
00:18:39.590 --> 00:18:42.823
And Neo4j is like, cool, I got that and
it can just go do all that processing for

242
00:18:42.823 --> 00:18:45.160
you automatically just by
writing really cool queries.

243
00:18:46.820 --> 00:18:49.448
And now you have the foundational
knowledge that you would need to

244
00:18:49.448 --> 00:18:51.090
understand what's actually going on.

