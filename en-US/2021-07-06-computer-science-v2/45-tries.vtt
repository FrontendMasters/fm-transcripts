WEBVTT

1
00:00:00.780 --> 00:00:02.050
Let's keep going.

2
00:00:03.410 --> 00:00:04.710
So we just did pathfinding.

3
00:00:07.120 --> 00:00:10.690
And now we're going to do,
how do you think you would pronounce that?

4
00:00:12.550 --> 00:00:14.000
It's tries.

5
00:00:14.000 --> 00:00:15.564
And I did not make that up,

6
00:00:15.564 --> 00:00:18.775
that's actually the correct
way to pronounce that.

7
00:00:18.775 --> 00:00:24.312
So I still call this tries despite
the fact that it's spelled trie but

8
00:00:24.312 --> 00:00:27.950
let me explain to you
why it's called a trie.

9
00:00:29.220 --> 00:00:32.110
It's actually from the word from retrieve,
right?

10
00:00:32.110 --> 00:00:34.510
So, this is in the middle of this right?

11
00:00:34.510 --> 00:00:36.610
So how do you say retrieve like that?

12
00:00:36.610 --> 00:00:38.640
So it's trie in the sense of retrieve.

13
00:00:41.350 --> 00:00:46.189
However, the funny thing too in order to
implant the trie you must use tries as in

14
00:00:46.189 --> 00:00:48.260
like these kind of tries.

15
00:00:48.260 --> 00:00:50.860
So, I just have a immense
amount of disdain for

16
00:00:50.860 --> 00:00:55.480
whatever person thought that was a good
name for that particular data structure.

17
00:00:55.480 --> 00:00:56.670
But here we are, that's what it's called.

18
00:00:59.060 --> 00:01:03.197
So what is a trie,
beyond being just a trie.

19
00:01:03.197 --> 00:01:08.180
It's a trie that's optimized for
searching, by prefix.

20
00:01:09.620 --> 00:01:12.682
So almost exclusively,
as far as I know, this is useful for

21
00:01:12.682 --> 00:01:16.194
like typeahead, I don't know if
you've ever heard of typeahead.

22
00:01:16.194 --> 00:01:18.435
But it's the idea if I start typing S, A,

23
00:01:18.435 --> 00:01:22.598
N it's gonna auto-complete to
San Francisco, San Diego, San Jose right,

24
00:01:22.598 --> 00:01:26.150
it's gonna start trying
to guess what I'm doing.

25
00:01:26.150 --> 00:01:30.785
The best way to implement those sorts of
typeaheads is using this data structure

26
00:01:30.785 --> 00:01:31.621
called trie.

27
00:01:34.670 --> 00:01:35.190
Okay, so

28
00:01:35.190 --> 00:01:39.489
a trie starts with a root node which is
typically just an empty string, right.

29
00:01:39.489 --> 00:01:41.775
Basically represents nothing.

30
00:01:41.775 --> 00:01:46.510
Then you'll have notes coming off for
the first letter that someone might type.

31
00:01:48.560 --> 00:01:49.570
So let's take a look at this one.

32
00:01:49.570 --> 00:01:51.450
That's B, right?

33
00:01:51.450 --> 00:01:57.080
So you'd have like an empty string, root
node, then someone would type B, right?

34
00:01:57.080 --> 00:01:57.969
And then people,

35
00:01:57.969 --> 00:02:02.230
the typeahead was start trying to
guess what the person's asking for.

36
00:02:02.230 --> 00:02:06.394
So let's say that they were
trying to get to Boston, right?

37
00:02:06.394 --> 00:02:11.900
They would type b-o, and then off of this,
o node, there'd be s, t, o, n for Boston.

38
00:02:11.900 --> 00:02:16.522
But there would also be b-o-i-s-e for
Boise so that's kind of

39
00:02:16.522 --> 00:02:21.562
the idea here with tries is trying to
guess what the user is trying to do,

40
00:02:21.562 --> 00:02:26.794
so that you can kind of like help them
with whatever they're trying to do.

41
00:02:30.773 --> 00:02:34.797
So each one of these write b-o,
the b the s, the t,

42
00:02:34.797 --> 00:02:38.590
the o they enter their
own individual nodes.

43
00:02:38.590 --> 00:02:41.672
In this particular case
there's probably not another

44
00:02:41.672 --> 00:02:44.360
US city that starts with b-o-s-t-o right?

45
00:02:44.360 --> 00:02:48.632
So there's probably only one end off
of the Boston search term here, but

46
00:02:48.632 --> 00:02:50.662
some of them as you might imagine,

47
00:02:50.662 --> 00:02:54.460
there's lots of American cities
that start with b-o, right.

48
00:02:54.460 --> 00:03:01.729
So this is gonna have like 15 different
sorts of notes hanging off of it.

49
00:03:01.729 --> 00:03:06.267
So, in fact, some of them that that can
be kind of difficult is there's American

50
00:03:06.267 --> 00:03:09.800
cities that are self contained and
other ones right.

51
00:03:09.800 --> 00:03:12.170
So that like there's
a city called Sandy and

52
00:03:12.170 --> 00:03:16.440
there's a city called Sandy Springs but
these are both valid cities.

53
00:03:16.440 --> 00:03:18.710
So you can have to provide for
both of those.

54
00:03:18.710 --> 00:03:21.333
So this is y here this y node, right,

55
00:03:21.333 --> 00:03:26.328
let's say that b-o-s-t was a valid
city this t would have a complete

56
00:03:26.328 --> 00:03:31.630
flag on it that says that b-o-s-t
is actually a valid city.

57
00:03:31.630 --> 00:03:35.594
But it would also say I also have children
too, by the ways because Boston is also

58
00:03:35.594 --> 00:03:41.764
a valid city Cool.

59
00:03:41.764 --> 00:03:43.269
What else?

60
00:03:43.269 --> 00:03:47.740
So like, let's take San Francisco and San
Diego, those have a space in them, right?

61
00:03:47.740 --> 00:03:48.963
So it's san&lt;space&gt;,

62
00:03:48.963 --> 00:03:52.610
you would just treat that space as
if it was a normal character, right?

63
00:03:52.610 --> 00:03:54.910
There's no special
consideration given to spaces.

64
00:03:56.810 --> 00:04:01.794
And yeah,
that's really about the entire idea here

65
00:04:01.794 --> 00:04:05.880
is you're just going to make these tries.

66
00:04:07.410 --> 00:04:11.914
This b-o right this could
have infinite amount of

67
00:04:11.914 --> 00:04:17.060
children there could be a b-o-i a b-o-s,
a b-o-n,

68
00:04:17.060 --> 00:04:22.340
a b-o-f, right,
as many as you have cities to justify.

69
00:04:22.340 --> 00:04:24.190
So let's talk about how you
would build one of these.

