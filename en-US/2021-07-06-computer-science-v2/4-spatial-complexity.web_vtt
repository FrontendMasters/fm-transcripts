WEBVTT

1
00:00:00.470 --> 00:00:02.536
No, it's always talking about time for
the most part, right?

2
00:00:02.536 --> 00:00:05.192
Or computational complexity.

3
00:00:05.192 --> 00:00:09.950
I think, for the most part I call it,
in this class, computational complexity.

4
00:00:09.950 --> 00:00:14.614
But I think, it's actually probably
referred to more, as time complexity, but

5
00:00:14.614 --> 00:00:17.740
you can kind of more or
less tie those things together.

6
00:00:17.740 --> 00:00:21.143
They're not totally the same,
but for the sake of this course,

7
00:00:21.143 --> 00:00:22.412
they are totally same.

8
00:00:22.412 --> 00:00:27.032
And it's the idea of,
if I give this more inputs,

9
00:00:27.032 --> 00:00:31.102
how many more CPU cycles
is this gonna take,

10
00:00:31.102 --> 00:00:35.176
how much longer is this gonna take, right?

11
00:00:35.176 --> 00:00:38.270
And when I talk about Big O, and
when people talk about Big O,

12
00:00:38.270 --> 00:00:40.942
without referring to what
they're talking about,

13
00:00:40.942 --> 00:00:43.871
they're almost always talking
about time complexity.

14
00:00:43.871 --> 00:00:47.972
There is another type of complexity
that's called space complexity or

15
00:00:47.972 --> 00:00:49.280
spatial complexity.

16
00:00:50.574 --> 00:00:55.233
And that's, basically,
how much RAM are you gonna take, RAM or

17
00:00:55.233 --> 00:01:00.420
hard disk space, how much stuff do
you need to store, for an algorithm?

18
00:01:00.420 --> 00:01:03.131
And sometimes this ends up
being really important,

19
00:01:03.131 --> 00:01:06.341
this used to be extremely important
to me in my job at Netflix.

20
00:01:06.341 --> 00:01:10.273
Because I was working on things
like Roku sticks, and PS3s, and

21
00:01:10.273 --> 00:01:14.581
things like that, that had very,
very precious little bit of memory.

22
00:01:14.581 --> 00:01:19.136
&gt;&gt; Will complexity be the same for
network transfers, as well?

23
00:01:19.136 --> 00:01:22.539
Like the size of
the transfer you're making,

24
00:01:22.539 --> 00:01:26.822
would that be evaluated as
spatial complexity, as well?

25
00:01:26.822 --> 00:01:31.242
&gt;&gt; So the question is would
you have considered network

26
00:01:31.242 --> 00:01:36.174
transfer to be the same sort
of thing as space complexity?

27
00:01:36.174 --> 00:01:41.210
I don't think so, I think I would
consider that in a different vein.

28
00:01:41.210 --> 00:01:46.268
You totally could consider that
in a Big O way, I just haven't.

29
00:01:46.268 --> 00:01:52.430
But no, this was much more like,
how much stuff am I storing, locally?

30
00:01:52.430 --> 00:01:57.285
And then you could probably consider
network traffic, and in a yet

31
00:01:57.285 --> 00:01:58.682
different thing.

32
00:01:58.682 --> 00:02:01.703
That's a good question,
I'll have to think more about that,

33
00:02:01.703 --> 00:02:03.645
cuz I haven't really thought about it.

34
00:02:04.838 --> 00:02:06.287
But, anyway, for the sake of this class,

35
00:02:06.287 --> 00:02:08.476
we're just talking about how
much RAM you're taking, right?

36
00:02:08.476 --> 00:02:10.667
How much stuff you're creating.

37
00:02:12.395 --> 00:02:17.889
So yeah, when I was working at Netflix and
working on the Roku stick, the PS3,

38
00:02:17.889 --> 00:02:23.137
all that kind of stuff, those devices
actually have plenty of CPU, right?

39
00:02:23.137 --> 00:02:28.015
So they're not hampered in that particular
sense, but they just have no memory.

40
00:02:28.015 --> 00:02:31.406
They don't give any of the programs
that are running on them no memory.

41
00:02:31.406 --> 00:02:36.677
And so from when we were signing people up
on Netflix, that's what I used to work on.

42
00:02:36.677 --> 00:02:40.254
We had to be extremely careful of
how much RAM we were taking because,

43
00:02:40.254 --> 00:02:44.386
that could really hamper user's viewing
experience, or sign up experience,

44
00:02:44.386 --> 00:02:45.760
in this particular case.

45
00:02:45.760 --> 00:02:49.534
So that's why, you don't always have
to consider spatial complexity, but

46
00:02:49.534 --> 00:02:52.100
when it's important it
tends to be very important.

47
00:02:52.100 --> 00:02:56.945
So let's talk about that.

48
00:02:58.059 --> 00:02:59.138
So if we're gonna do something
that's linear, right?

49
00:02:59.138 --> 00:03:03.773
If you remember linear is Big O of N,
if it has linear spatial

50
00:03:03.773 --> 00:03:08.965
complexity that would be say,
like if we had an array of ten items,

51
00:03:08.965 --> 00:03:13.538
our algorithm would probably
create ten arrays, right?

52
00:03:13.538 --> 00:03:16.840
So you can see here,
when we take an array, and

53
00:03:16.840 --> 00:03:22.280
we make more arrays out of that array,
that just tends to churn up RAM space.

54
00:03:22.280 --> 00:03:26.541
And for something like a PS3,
which is very, very memory limited,

55
00:03:26.541 --> 00:03:28.386
that can be a bit of a problem.

56
00:03:28.386 --> 00:03:31.316
Because if you're churning
through a lot of memory,

57
00:03:31.316 --> 00:03:34.450
that ends up being a really
bad user experience, right?

58
00:03:34.450 --> 00:03:38.638
So we were always talking about
the spatial complexity, and

59
00:03:38.638 --> 00:03:43.332
we never wanted to do anything that
had linear spatial complexity.

60
00:03:43.332 --> 00:03:46.658
But typically, the thing that you're
doing, is you're creating additional

61
00:03:46.658 --> 00:03:50.194
arrays, that's what causes spatial
complexity, it's not always true, right?

62
00:03:50.194 --> 00:03:54.075
You can be creating other
temporary variables but normally,

63
00:03:54.075 --> 00:03:56.909
at least in the terms
of sorting algorithms,

64
00:03:56.909 --> 00:04:01.249
it's gonna be arrays that are gonna
cause that spatial complexity.

65
00:04:01.249 --> 00:04:04.757
Logarithmic, as you might imagine,
you create less overtime, right?

66
00:04:04.757 --> 00:04:10.047
So if I have 10 arrays, maybe create 7
arrays, by 100 it'll create 12 arrays,

67
00:04:10.047 --> 00:04:13.337
you can see this kind of like
this diminishing return.

68
00:04:13.337 --> 00:04:15.530
That would be considered logarithmic.

69
00:04:15.530 --> 00:04:18.419
Constant would, basically, what you'd say,

70
00:04:18.419 --> 00:04:21.594
either if I have an array,
I'll create five arrays.

71
00:04:21.594 --> 00:04:26.482
But if it's of length 1 million or length
10, I always create five arrays, right?

72
00:04:26.482 --> 00:04:29.003
That would be considered constant, right?

73
00:04:29.003 --> 00:04:32.685
Because it's the same
amount no matter what.

74
00:04:32.685 --> 00:04:36.047
And let's talk about quadratic, this
is actually kind of an interesting one,

75
00:04:36.047 --> 00:04:40.037
cuz this is something that I actually
did at one of my former companies.

76
00:04:40.037 --> 00:04:46.813
Let's say we had to evaluate
the distance between two zip codes.

77
00:04:46.813 --> 00:04:51.897
And a zip code is a, they more or less
exists all over the world on the sense of,

78
00:04:51.897 --> 00:04:56.840
it's a number that refers to a parcel
of land in the United States, right?

79
00:04:56.840 --> 00:05:02.638
So for example, I live in 9103, and
let's say, which is a zip code in Seattle.

80
00:05:02.638 --> 00:05:08.667
Let's say I wanna calculate
the distance between that and

81
00:05:08.667 --> 00:05:13.351
10001, which is I think is in New York.

82
00:05:13.351 --> 00:05:15.755
You can see that I have
these two zip codes, and

83
00:05:15.755 --> 00:05:18.232
I wanna calculate
the distance between those.

84
00:05:18.232 --> 00:05:23.139
Now, let's say that computation is really
expensive, so we wanna pre-compute,

85
00:05:23.139 --> 00:05:26.815
all of those various different
distances between each other.

86
00:05:26.815 --> 00:05:30.426
Well, that says for
every item that I add to that database,

87
00:05:30.426 --> 00:05:34.470
I have to now create an additional
item in the database, or sorry,

88
00:05:34.470 --> 00:05:38.462
an additional item for
every other item in the database, right?

89
00:05:38.462 --> 00:05:43.280
So if I have 10,000 zip codes in my
database and they add a new zip code to

90
00:05:43.280 --> 00:05:48.503
the database, that means I need to
create 10,000 new items and store them.

91
00:05:50.057 --> 00:05:51.430
This would be quadratic, right?

92
00:05:51.430 --> 00:05:54.249
Because every item that
you add to the database,

93
00:05:54.249 --> 00:05:57.700
that means they have to add
even more the next time, right?

94
00:05:57.700 --> 00:06:01.505
And it just grows kind of out
of control at that point.

95
00:06:01.505 --> 00:06:04.780
Now, we actually did this that one
of the companies that I worked at,

96
00:06:04.780 --> 00:06:07.051
we only did it for
zip codes in the state of Utah.

97
00:06:07.051 --> 00:06:10.419
But the reason we did that is because,
it was so expensive for

98
00:06:10.419 --> 00:06:14.791
us to call an API to get that information
of the distance between two zip codes.

99
00:06:14.791 --> 00:06:18.936
That it was cheaper for
us to just buy a really big database and

100
00:06:18.936 --> 00:06:20.897
put it all in there, right?

101
00:06:20.897 --> 00:06:22.836
But that to me was kinda funny,

102
00:06:22.836 --> 00:06:26.424
cuz it was an example of
a quadratic spatial complexity.

103
00:06:26.424 --> 00:06:29.962
Typically, you never wanna have
quadratic spatial complexities,

104
00:06:29.962 --> 00:06:33.265
that's really the only time I've
ever seen it be appropriate.

105
00:06:33.265 --> 00:06:37.280
So there's a great question on here, how
does this apply to functional programming,

106
00:06:37.280 --> 00:06:40.752
because functional programming,
churns through a lot of stuff, right?

107
00:06:40.752 --> 00:06:44.711
There's a lot of arrays being created and
destroyed.

108
00:06:44.711 --> 00:06:49.691
The first thing I wanna say to you, is
that, normally it doesn't matter, right?

109
00:06:49.691 --> 00:06:54.869
Normally, it doesn't matter that if
you're looping through 100 things or

110
00:06:54.869 --> 00:06:59.584
10 things, or probably even 1,000 things,
you are creating and

111
00:06:59.584 --> 00:07:04.470
destroying a lot of stuff, but
modern computers are pretty fast, right?

112
00:07:04.470 --> 00:07:07.793
Even an old Android phone should be
able to handle that fairly well.

113
00:07:07.793 --> 00:07:11.934
So normally, it doesn't matter.

114
00:07:11.934 --> 00:07:16.318
But the second thing I wanna say,
is that, when it does matter, functional

115
00:07:16.318 --> 00:07:20.429
programming is usually the first
thing you kinda have to refactor out,

116
00:07:20.429 --> 00:07:24.697
because it does unnecessarily frequently
churn through a lot of memory.

117
00:07:24.697 --> 00:07:29.569
For example, we had to basically
ban functional programming in that

118
00:07:29.569 --> 00:07:32.929
Netflix TV code repo,
because of that reason,

119
00:07:32.929 --> 00:07:37.299
we just could not afford to churn
through all of those arrays.

120
00:07:37.299 --> 00:07:41.592
So yeah, rule number one, if it
doesn't matter, it doesn't matter, and

121
00:07:41.592 --> 00:07:42.742
ignore it, right?

122
00:07:42.742 --> 00:07:47.167
Rule number two is, yeah,
frequently you have to refactor out

123
00:07:47.167 --> 00:07:51.605
functional programming style,
code when space is a concern.

124
00:07:51.605 --> 00:07:55.557
Does that answer your question?

125
00:07:55.557 --> 00:08:00.986
&gt;&gt; So basically, we can combine
different [INAUDIBLE], yeah, so?

126
00:08:00.986 --> 00:08:01.778
&gt;&gt; Yep.

127
00:08:01.778 --> 00:08:04.659
&gt;&gt; Use other style of programming,
yeah, okay, thank you.

128
00:08:04.659 --> 00:08:06.356
&gt;&gt; Yep, for sure.

129
00:08:06.356 --> 00:08:07.632
And we'll get into, I think,

130
00:08:07.632 --> 00:08:09.899
my next section here is
actually on trade offs, it is.

131
00:08:09.899 --> 00:08:14.298
But typically, you just wanna wait for
it to become a problem,

132
00:08:14.298 --> 00:08:16.379
before you solve it, right?

133
00:08:16.379 --> 00:08:18.408
People like to solve problems
before they have them,

134
00:08:18.408 --> 00:08:19.908
and that's a really bad idea, right?

135
00:08:19.908 --> 00:08:22.372
So wait for it to become a problem, and

136
00:08:22.372 --> 00:08:25.769
then when it's the problem
then go refactor it out.

137
00:08:25.769 --> 00:08:28.917
&gt;&gt; Premature optimization.

138
00:08:28.917 --> 00:08:31.472
&gt;&gt; Yeah, premature optimization,
it's a mouthful.

139
00:08:31.472 --> 00:08:37.666
[LAUGH] Yeah, so the question is what's
driving these constraints, right?

140
00:08:37.666 --> 00:08:38.432
And I mean,

141
00:08:38.432 --> 00:08:43.806
most frequently your boss isn't gonna know
where those constraints are gonna be.

142
00:08:43.806 --> 00:08:48.738
So that's why it's on you to ask
a lot of these questions like, hey,

143
00:08:48.738 --> 00:08:53.007
am I running on a low-end
Android device in rural America?

144
00:08:53.007 --> 00:08:57.363
Or am I running on a super
computing cluster that has

145
00:08:57.363 --> 00:09:01.933
basically infinite space and
computational power?

146
00:09:01.933 --> 00:09:04.673
Cuz those are gonna be very
wildly different answers, right?

147
00:09:04.673 --> 00:09:08.258
Or in this particular case,
I think the PS3 is a great example of,

148
00:09:08.258 --> 00:09:11.396
you know that you're extremely
memory constrained, but

149
00:09:11.396 --> 00:09:14.483
that PS3 processors was very,
very powerful, right?

150
00:09:14.483 --> 00:09:18.926
So that means that anything that we could
shove towards this time complexity side,

151
00:09:18.926 --> 00:09:23.051
I mean we could do really inefficient
things with the CPU because those cycles

152
00:09:23.051 --> 00:09:24.271
were very cheap to us.

153
00:09:24.271 --> 00:09:27.566
Whereas we had to be super conservative
with our memory usage, right?

154
00:09:27.566 --> 00:09:30.395
Whereas, normally,
like when I'm coding for the cloud, right?

155
00:09:30.395 --> 00:09:32.778
I mean, I work on Azure at the moment.

156
00:09:32.778 --> 00:09:36.095
I can just throw more RAM at it,
RAM's cheap, right?

157
00:09:36.095 --> 00:09:40.261
So I can use really inefficient
spatial complexity things.

158
00:09:40.261 --> 00:09:45.963
The question you should be asking
yourself is, where is this running?

159
00:09:45.963 --> 00:09:49.722
What kind of devices is this
going to be running on?

160
00:09:49.722 --> 00:09:51.698
And how important is it to the user?

161
00:09:51.698 --> 00:09:54.731
And how big of inputs am I expecting,
right?

162
00:09:54.731 --> 00:09:57.462
Cuz if the answer is you're
only gonna be evaluating two or

163
00:09:57.462 --> 00:10:00.150
three items at a time,
it just doesn't matter, right?

164
00:10:00.150 --> 00:10:03.817
In which case,
write the simplest code possible.

165
00:10:03.817 --> 00:10:07.920
So yeah, just to wrap up
here on spatial complexity.

166
00:10:07.920 --> 00:10:10.618
Again, this is just another
ruler that I'm giving

167
00:10:10.618 --> 00:10:13.010
you to measure your
approaches to problems.

168
00:10:13.010 --> 00:10:16.617
So that you can decide,
based on whatever the the task is at hand,

169
00:10:16.617 --> 00:10:19.516
to choose what kind of
algorithm you're gonna use.

170
00:10:19.516 --> 00:10:23.027
And it's never gonna be like, well,
we're gonna use Quicksort, and

171
00:10:23.027 --> 00:10:24.149
we're gonna do that.

172
00:10:24.149 --> 00:10:28.714
Normally all this stuff that I'm about
to teach you in this course is actually

173
00:10:28.714 --> 00:10:33.578
built into the language, and you don't
actually really need to know how to do it.

174
00:10:33.578 --> 00:10:40.908
It's gonna be much more like, hey, we're
creating type ahead for our search bar.

175
00:10:40.908 --> 00:10:45.396
And we can either pre-compute that with
trees, or we can do it on the fly and

176
00:10:45.396 --> 00:10:49.826
just rely on the CPU to do that on
the fly, which is the correct thing to do.

177
00:10:49.826 --> 00:10:53.433
And again, I hope your answer to
that question is, it depends, right?

178
00:10:53.433 --> 00:10:55.090
Where's this gonna run?

179
00:10:55.090 --> 00:10:56.757
What kind of devices,?

180
00:10:56.757 --> 00:10:57.775
What are my users doing?

181
00:10:57.775 --> 00:10:59.868
How big is that dataset, right?

182
00:10:59.868 --> 00:11:03.640
Those are the kind of questions that I'm
hoping that I'm just gonna ram into your

183
00:11:03.640 --> 00:11:06.692
head, so that you know to ask that
question continually is like,

184
00:11:06.692 --> 00:11:07.980
give me more information.

