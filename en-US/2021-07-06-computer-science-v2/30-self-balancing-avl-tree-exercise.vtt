WEBVTT

1
00:00:00.410 --> 00:00:01.849
A lot of information.

2
00:00:03.640 --> 00:00:05.693
I'm gonna give you
an opportunity to do this.

3
00:00:05.693 --> 00:00:08.200
But we're gonna walk through this
kinda piece by piece first and

4
00:00:08.200 --> 00:00:11.290
then I'm gonna give you some
time to do the exercise.

5
00:00:11.290 --> 00:00:16.242
So let's pop over to our CodeSandbox here.

6
00:00:16.242 --> 00:00:21.500
And we're gonna pop into AVL and
do AVL test here.

7
00:00:22.580 --> 00:00:26.977
Most of your actual logic
is gonna live in the node.

8
00:00:26.977 --> 00:00:32.975
So I'm gonna say here we're
going to code a constructor, And

9
00:00:32.975 --> 00:00:35.545
we're gonna say this.root = null,

10
00:00:39.340 --> 00:00:44.295
We're gonna do an add,
It's gonna take in a value.

11
00:00:48.920 --> 00:00:50.471
And actually, let's just go ahead and

12
00:00:50.471 --> 00:00:52.306
do this together before
I let you get started.

13
00:00:52.306 --> 00:00:55.743
I'm gonna say if this.root,

14
00:00:55.743 --> 00:01:00.239
then this.root = new Node(value),

15
00:01:00.239 --> 00:01:08.845
else what you're gonna do is you're
gonna say this.root.add(value).

16
00:01:08.845 --> 00:01:13.863
And then we're gonna put all
of the add logic on the node.

17
00:01:17.272 --> 00:01:21.532
Okay, and then we're gonna
put two object method here,

18
00:01:21.532 --> 00:01:24.557
if you wanna use that visualizer again.

19
00:01:27.390 --> 00:01:33.716
That's just going to return this.node,
return this.root, rather.

20
00:01:36.211 --> 00:01:41.367
Okay, this is the complete tree method,
you don't have to do anything else here.

21
00:01:42.788 --> 00:01:43.926
That's it.

22
00:01:46.964 --> 00:01:53.175
Okay, on the node,
We're gonna put a constructor,

23
00:01:59.426 --> 00:02:04.850
There we're gonna say this.left = null,

24
00:02:04.850 --> 00:02:07.640
this.right = null.

25
00:02:07.640 --> 00:02:12.594
We're gonna say this.value = value,

26
00:02:12.594 --> 00:02:17.701
so you also need to accept the value here.

27
00:02:21.638 --> 00:02:24.427
And we're gonna say this.height = 1,

28
00:02:24.427 --> 00:02:29.860
cuz we have to keep track of a height to
know when we need to rotate things, right?

29
00:02:29.860 --> 00:02:33.056
So make sure when you're
adding new nodes to your tree,

30
00:02:33.056 --> 00:02:35.921
make sure you're updating
the height on the fly.

31
00:02:38.820 --> 00:02:41.204
Okay, you're gonna have an add method,

32
00:02:44.078 --> 00:02:48.348
Which is gonna take in a value,
this is recursive, right?

33
00:02:48.348 --> 00:02:51.393
So, you're gonna have this add
method called the add method on

34
00:02:51.393 --> 00:02:53.030
its children, right?

35
00:02:53.030 --> 00:02:56.606
So if I have going back to here,

36
00:02:58.375 --> 00:03:03.098
Let's look at this tree I guess,
if I call add on 15,

37
00:03:03.098 --> 00:03:09.483
what I'm gonna do is, I'm gonna call and
I'm gonna add let's say 13.

38
00:03:09.483 --> 00:03:14.848
I'll say tree.add(13), and
then I'm gonna say this.route add 13,

39
00:03:14.848 --> 00:03:17.620
it's gonna call this on its left child.

40
00:03:17.620 --> 00:03:21.810
So it's gonna say this.left add 13,
this.right add 13, right?

41
00:03:21.810 --> 00:03:25.390
And it's gonna just go down the tree until
eventually finds the correct space, right?

42
00:03:26.940 --> 00:03:30.821
&gt;&gt; Would this be the recursive
method that you talked about for

43
00:03:30.821 --> 00:03:32.461
the binary search tree?

44
00:03:32.461 --> 00:03:36.145
&gt;&gt; If you did the recursive way
with the binary search tree,

45
00:03:36.145 --> 00:03:38.850
this is the same logic, mostly, right?

46
00:03:38.850 --> 00:03:42.169
It's, you're definitely
on a good start there.

47
00:03:42.169 --> 00:03:42.995
&gt;&gt; That's okay.

48
00:03:42.995 --> 00:03:45.332
&gt;&gt; Cool, good question.

49
00:03:45.332 --> 00:03:52.237
So, basically here you're gonna
decide to go left or right.

50
00:03:54.189 --> 00:03:57.805
It's gonna look a lot like that while loop
that we wrote if you wrote it like I did.

51
00:04:02.926 --> 00:04:04.184
Okay,

52
00:04:14.140 --> 00:04:16.798
Until eventually you're
gonna find the right place.

53
00:04:19.620 --> 00:04:23.461
Find the correct place to add,

54
00:04:26.257 --> 00:04:30.462
And again, make sure you update,

55
00:04:30.462 --> 00:04:34.816
you're updating heights, okay?

56
00:04:36.638 --> 00:04:42.889
The very last thing that you wanna call
on this add is this stop balance method.

57
00:04:47.280 --> 00:04:50.281
Okay, and
then we're gonna make a balance method.

58
00:04:56.660 --> 00:05:01.275
You're going to basically on every node,

59
00:05:01.275 --> 00:05:06.540
you're gonna ask,
is this node out of balance?

60
00:05:06.540 --> 00:05:11.491
By checking the highest, right, remember
if it has two or more different switches,

61
00:05:11.491 --> 00:05:13.500
if it has two difference, right?

62
00:05:14.680 --> 00:05:19.023
Then that's you need to call a rotate.

63
00:05:23.370 --> 00:05:26.798
So, So

64
00:05:26.798 --> 00:05:31.593
if it is out of balance, if it's
not out of balance then do nothing.

65
00:05:31.593 --> 00:05:39.917
If not out of balance do nothing,

66
00:05:39.917 --> 00:05:45.872
if it is balance ask is,

67
00:05:48.226 --> 00:05:55.277
All right, do I need to do,
do I need to single or double rotate?

68
00:05:55.277 --> 00:06:02.983
So, if single just call rotate on self,

69
00:06:02.983 --> 00:06:09.103
if double call rotate on child,

70
00:06:09.103 --> 00:06:11.835
then on self.

71
00:06:16.304 --> 00:06:23.263
&gt;&gt; On line 16 is that supposed to be if
it is balance or if it's out of balance?

72
00:06:23.263 --> 00:06:26.355
&gt;&gt; Yeah, sorry if it is out of balance.

73
00:06:26.355 --> 00:06:32.869
Thank you, appreciate it, Okay?

74
00:06:37.332 --> 00:06:41.811
Then, we're gonna write two
methods down here called rotateRR,

75
00:06:45.079 --> 00:06:47.917
And rotateLL.

76
00:06:50.478 --> 00:06:52.835
Why they're called RR and
LL I'm not exactly sure, but

77
00:06:52.835 --> 00:06:55.760
I think everyone calls them that so
I just continue to call them that.

78
00:06:56.820 --> 00:07:03.674
So, You call rotateLL if
the left child is heavy,

79
00:07:03.674 --> 00:07:08.159
you call rotateRR,
if the right child is heavy.

80
00:07:08.159 --> 00:07:12.467
So it's from the right
to the left is right,

81
00:07:12.467 --> 00:07:15.851
from the left to the right is left.

82
00:07:15.851 --> 00:07:17.770
And then when you call
these rotate methods,

83
00:07:17.770 --> 00:07:20.405
you're gonna have to do some
updating on the heights as well.

84
00:07:20.405 --> 00:07:25.539
So I wrote a function called
updateInNewLocation().

85
00:07:27.775 --> 00:07:32.193
So if you're doing an RR,
sorry, if you're doing a LL,

86
00:07:32.193 --> 00:07:35.323
you're gonna say at the bottom of this,

87
00:07:35.323 --> 00:07:41.696
this.right.updateInNewLocation(),
this.updateInNewLocation().

88
00:07:45.446 --> 00:07:49.524
Rotate and then rotate this one you say

89
00:07:49.524 --> 00:07:57.957
this.left.updateInNewLocation()
this.updateInNewLocation().

90
00:08:01.790 --> 00:08:06.680
Okay, here, You're just

91
00:08:06.680 --> 00:08:10.684
basically gonna calculate the new height,
that's all this is gonna do.

92
00:08:10.684 --> 00:08:12.972
So basically you're gonna say, do I have
a left child, do have a right child?

93
00:08:12.972 --> 00:08:19.571
If I have neither than I'm of height 1, in
the heights I include myself as height 1.

94
00:08:19.571 --> 00:08:21.407
So actually,
an empty child I had is height 1, but

95
00:08:21.407 --> 00:08:22.580
as long as you're consistent.

96
00:08:22.580 --> 00:08:27.424
If you wanna call a node with no
children 0, that's totally fine too,

97
00:08:27.424 --> 00:08:28.896
I just stuck with 1.

98
00:08:31.336 --> 00:08:34.870
And that's really it.

99
00:08:39.623 --> 00:08:44.877
So the one thing I wanna say and
just re-emphasize too,

100
00:08:46.650 --> 00:08:51.433
For the rotate, which is definitely
the hardest code to write here,

101
00:08:51.433 --> 00:08:55.630
follow, This logic exactly.

102
00:08:55.630 --> 00:09:00.654
This is literally line for
line the code that you need to write.

103
00:09:00.654 --> 00:09:02.644
If you do this,
if you can translate this into code,

104
00:09:02.644 --> 00:09:04.240
that's the correct way to do rotations.

105
00:09:05.560 --> 00:09:11.382
&gt;&gt; Going down trying to find the final
note to add the new value to.

106
00:09:11.382 --> 00:09:11.882
&gt;&gt; Yep.

107
00:09:14.080 --> 00:09:18.882
&gt;&gt; If the current node has
just one child on one side and

108
00:09:18.882 --> 00:09:26.376
if I'm adding to that single child,
I think that's right place for rotation?

109
00:09:26.376 --> 00:09:33.084
So I think I can know beforehand,
I'm not sure about this, can I?

110
00:09:33.084 --> 00:09:39.124
I'm going down trying to
find a node to add to and

111
00:09:39.124 --> 00:09:44.416
I have this node which has a single child.

112
00:09:44.416 --> 00:09:49.220
And I'm sending the value
towards that child,

113
00:09:49.220 --> 00:09:54.637
there is a rotation waiting to happen,
is that true?

114
00:09:54.637 --> 00:09:55.974
&gt;&gt; Probably.

115
00:09:57.962 --> 00:10:01.050
Are you saying that you can do
this without a recursion and

116
00:10:01.050 --> 00:10:02.540
you could do it with a loop?

117
00:10:02.540 --> 00:10:04.167
Is that what you're asking?

118
00:10:04.167 --> 00:10:07.691
So to answer your question,
it probably is,

119
00:10:07.691 --> 00:10:11.783
I'd have to write the code
to really think about it.

120
00:10:11.783 --> 00:10:16.757
But the reason why you wanna do
recursion is because you want to update

121
00:10:16.757 --> 00:10:19.940
all the heights on the way back up.

122
00:10:19.940 --> 00:10:24.712
So I guess if you were willing
to keep a queue of items that

123
00:10:24.712 --> 00:10:27.668
you need to update the heights of.

124
00:10:27.668 --> 00:10:33.551
So you could like keep like a list of
all the nodes that you've looked at so

125
00:10:33.551 --> 00:10:37.609
far, so that on the way back up,
you can add them.

126
00:10:37.609 --> 00:10:39.937
Then that would probably would be okay,

127
00:10:39.937 --> 00:10:43.140
I guess you could just do
it on the way down too.

128
00:10:43.140 --> 00:10:46.677
Yeah, I guess there are a couple
of ways to, write this.

129
00:10:46.677 --> 00:10:48.590
This is just the way that
made the most sense to me.

130
00:10:50.360 --> 00:10:52.613
&gt;&gt; Just trying to make sense
of how this thing works.

131
00:10:52.613 --> 00:10:55.678
That's why not because I'm
trying to avoid recursion.

132
00:10:55.678 --> 00:10:57.140
&gt;&gt; It's okay.

133
00:10:57.140 --> 00:11:02.689
It's still possible to use recursion and
know beforehand, right?

134
00:11:02.689 --> 00:11:06.500
&gt;&gt; Yeah, I think that's possible.

135
00:11:08.020 --> 00:11:08.705
But again,

136
00:11:08.705 --> 00:11:13.169
there might be some unforeseen issue
that I'm not thinking of at the moment.

137
00:11:14.670 --> 00:11:17.376
But I'd love to see it, so
if you wanna try writing it, let me know,

138
00:11:17.376 --> 00:11:18.146
that'd be great.

