WEBVTT

1
00:00:00.240 --> 00:00:04.100
The first thing that I want you to
do here in this find shortest path,

2
00:00:04.100 --> 00:00:09.560
you can write another function that does
this, or I just do it right here in line.

3
00:00:09.560 --> 00:00:13.634
I need to create a, basically a grid
that's the same size of this maze, but

4
00:00:13.634 --> 00:00:16.510
that I can like add objects to, right?

5
00:00:16.510 --> 00:00:20.507
So I'm just gonna write like a really,
oops, don't do that.

6
00:00:20.507 --> 00:00:26.550
Const this maze's called visited,
that's what I'm gonna call it.

7
00:00:26.550 --> 00:00:28.500
And I'm just gonna write this
in terms of a quick map.

8
00:00:28.500 --> 00:00:33.584
But you could totally do this with a for
loop or something like that.

9
00:00:36.956 --> 00:00:39.868
Actually, maybe let's even just
do this in terms of, well,

10
00:00:39.868 --> 00:00:42.270
let's just make a whole
different function.

11
00:00:42.270 --> 00:00:50.509
Okay, here we go, function,
Generate (visited).

12
00:00:52.280 --> 00:00:56.237
And it's gonna take in the maze,
I think, and that's it.

13
00:01:02.180 --> 00:01:06.055
In here we're gonna make
an array called visited.

14
00:01:06.055 --> 00:01:13.600
So const visited equals empty array.

15
00:01:13.600 --> 00:01:18.450
And here we're gonna write a for

16
00:01:18.450 --> 00:01:21.862
loop, for let i = 0,

17
00:01:21.862 --> 00:01:27.264
i is less than maze.length i++.

18
00:01:35.894 --> 00:01:44.229
Okay, so this is gonna be looping over
the y axis of our particular array.

19
00:01:44.229 --> 00:01:48.264
Cuz, remember our array's 2D.

20
00:01:48.264 --> 00:01:55.535
And then inside of that,
we're gonna do another for

21
00:01:55.535 --> 00:01:59.994
loop, for let, i or let j = 0,

22
00:01:59.994 --> 00:02:06.124
j is less than maze( i.length), j++.

23
00:02:06.124 --> 00:02:09.505
And actually we could probably make this
a little bit better, let's make i here.

24
00:02:13.941 --> 00:02:16.753
We're gonna make that y.

25
00:02:16.753 --> 00:02:20.096
And then instead of j here,
we're gonna make this x.

26
00:02:20.096 --> 00:02:23.041
Just to make a little bit, so
we can keep track of x and y.

27
00:02:26.330 --> 00:02:28.612
Okay, and then we're going to say,

28
00:02:34.722 --> 00:02:39.844
Yeah, const new, or coordinate,

29
00:02:39.844 --> 00:02:43.951
let's call it coordinate,

30
00:02:45.829 --> 00:02:49.085
Is a new object that is,

31
00:02:58.080 --> 00:03:00.335
Yeah, it's gonna have closed,

32
00:03:09.570 --> 00:03:15.095
And that's gonna be if maze(

33
00:03:15.095 --> 00:03:20.184
y x is triple equal to 1).

34
00:03:26.834 --> 00:03:29.260
Length is 0 because nothing
has touched it yet, right?

35
00:03:29.260 --> 00:03:32.427
So we haven't actually started
traversing our maze yet.

36
00:03:32.427 --> 00:03:35.141
And it hasn't been opened by anyone.

37
00:03:38.137 --> 00:03:41.822
So I'm gonna make these little variables
at the top just help me keep track.

38
00:03:41.822 --> 00:03:50.422
So I'm gonna say const, Null_one = 0,

39
00:03:50.422 --> 00:03:58.100
const by_A = 1, and const by_B = 2.

40
00:03:58.100 --> 00:04:00.282
And then that way I can
say open by null_one.

41
00:04:00.282 --> 00:04:02.870
And this makes more sense
than open by zero, right?

42
00:04:02.870 --> 00:04:04.860
This just makes it a little
bit easier to read.

43
00:04:06.670 --> 00:04:07.930
So I'm gonna have this coordinate.

44
00:04:10.240 --> 00:04:16.187
Here we're gonna have this const
yaxis is gonna be equal to new array.

45
00:04:16.187 --> 00:04:25.687
And what we're just gonna do here is
we're going to, Push into the y axis.

46
00:04:25.687 --> 00:04:34.387
So we're gonna say yaxis,
Dot push(coordinate).

47
00:04:36.950 --> 00:04:41.568
And then down here after this for
loop, we're gonna say,

48
00:04:45.204 --> 00:04:49.681
Visited.push( yaxis).

49
00:04:52.164 --> 00:04:55.569
Then down here return visited.

50
00:04:55.569 --> 00:04:59.220
So the code that I have here in
my notes looks fairly similar.

51
00:04:59.220 --> 00:05:06.120
I just did the exact same thing with
a map instead of a couple of for loops.

52
00:05:07.390 --> 00:05:11.731
So let's just make sure that this
actually looks like the way I think it's

53
00:05:11.731 --> 00:05:12.511
gonna look.

54
00:05:12.511 --> 00:05:18.744
Console.log, Oops,

55
00:05:22.656 --> 00:05:27.125
const visited = generate(visited),

56
00:05:28.770 --> 00:05:34.369
With maze and console.log(visited).

57
00:05:37.026 --> 00:05:40.602
Okay, so let's do this.

58
00:05:40.602 --> 00:05:44.083
We don't wanna skip this anymore.

59
00:05:44.083 --> 00:05:45.341
And we'll just do that.

60
00:05:45.341 --> 00:05:48.568
And then we'll click play and
see what comes out.

61
00:05:51.519 --> 00:05:54.692
So you can see here I got an array back.

62
00:05:54.692 --> 00:05:59.839
That's actually new to this
as well with graph test.

63
00:06:01.200 --> 00:06:05.299
Get rid of that, okay.

64
00:06:05.299 --> 00:06:09.352
Back in pathfinding.test.

65
00:06:11.191 --> 00:06:14.600
So you can see here each one
of these has length, for

66
00:06:14.600 --> 00:06:17.940
this one, closed false,
length, open by zero.

67
00:06:22.612 --> 00:06:25.740
So this all looks like it's above board.

68
00:06:25.740 --> 00:06:27.340
But this is all I did, right?

69
00:06:27.340 --> 00:06:30.980
I basically took this and
I made it into my own data structure.

70
00:06:30.980 --> 00:06:35.167
So I can keep track of what's opened,
what's not opened,

71
00:06:35.167 --> 00:06:36.934
all that kinda of stuff.

72
00:06:39.340 --> 00:06:43.492
And let's actually do this for this one
as well, just so I make sure that this,

73
00:06:47.605 --> 00:06:50.763
6 by 6, good news, these are all six.

74
00:06:50.763 --> 00:06:55.340
And I just wanna make sure on row 4 here,
sorry,

75
00:06:55.340 --> 00:06:59.985
row 5, That these are closed.

76
00:06:59.985 --> 00:07:01.000
And they are, okay, cool.

77
00:07:01.000 --> 00:07:02.857
So this looks like it's generating okay.

78
00:07:04.800 --> 00:07:07.045
So now I have a data structure
that I can work with.

79
00:07:08.580 --> 00:07:12.583
That one should be open, open,
and this one should be closed.

80
00:07:12.583 --> 00:07:14.760
Close, cool, great.

81
00:07:14.760 --> 00:07:15.559
That works great.

82
00:07:17.340 --> 00:07:22.550
So now we have this generated visited
maze here that we can work with.

83
00:07:23.760 --> 00:07:29.991
And the first thing that we're gonna
do is we're gonna say, visited[ [ya],

84
00:07:31.677 --> 00:07:36.296
[xa])] is assigned, or,

85
00:07:36.296 --> 00:07:40.744
sorry, opened by A, right?

86
00:07:42.447 --> 00:07:45.100
So we're gonna start with our maze.

87
00:07:45.100 --> 00:07:46.880
And we're gonna spiral out from there.

88
00:07:46.880 --> 00:07:50.804
And this looks a little weird for
people, because we're used to x comma y.

89
00:07:50.804 --> 00:07:55.304
But just think about in the sense of
that we're opening the y axis first and

90
00:07:55.304 --> 00:07:57.347
inside of the y axis is the x axis.

91
00:07:57.347 --> 00:08:02.588
That's why it's ya, xa Same

92
00:08:02.588 --> 00:08:07.101
thing here visited

93
00:08:07.101 --> 00:08:12.464
ybxb.openedby by b.

94
00:08:12.464 --> 00:08:19.405
Okay, and now we'll have like on this one,
we're opening this one correctly,

95
00:08:19.405 --> 00:08:24.529
we're opening like that,
right, wherever the twos are.

96
00:08:28.360 --> 00:08:29.803
Okay?

97
00:08:29.803 --> 00:08:32.757
Then we're gonna do an aq and a bq.

98
00:08:32.757 --> 00:08:37.729
So let aq assigned, and we're just

99
00:08:37.729 --> 00:08:43.440
gonna queue up our very first note here.

100
00:08:43.440 --> 00:08:49.654
So visited, Actually we can
just even copy this, right?

101
00:08:52.737 --> 00:08:57.559
And let bq equal that.

102
00:09:01.802 --> 00:09:07.645
And this is just gonna work exactly like
how it worked with our graph, right?

103
00:09:07.645 --> 00:09:11.362
We're just going to go through our aq and
our bq, we're gonna spiral them out where

104
00:09:11.362 --> 00:09:14.725
we're going to read first traverse
until they crossover with each other.

105
00:09:15.965 --> 00:09:18.450
So, our outer loop,
how far do we wanna go?

106
00:09:19.890 --> 00:09:23.330
We wanna go until we find that they
meet or they don't meet, right?

107
00:09:23.330 --> 00:09:27.875
So we're gonna say while

108
00:09:27.875 --> 00:09:33.293
aq.length and bq.length.

109
00:09:33.293 --> 00:09:35.312
Whereas before on our social graph,

110
00:09:35.312 --> 00:09:37.981
we wanted to limit how far
out we would traverse,

111
00:09:37.981 --> 00:09:42.740
in this case, we wanna go as far as we
possibly can until we find the answer.

112
00:09:42.740 --> 00:09:47.600
So, if we get through all of this and
we don't find anything,

113
00:09:47.600 --> 00:09:52.366
then we're gonna say return
negative one where negative one

114
00:09:52.366 --> 00:09:55.460
means I didn't find the path, right?

115
00:09:55.460 --> 00:10:01.036
There's no path between these
two particular things, okay?

116
00:10:03.431 --> 00:10:08.581
Then up here we're gonna have an iteration
number let iteration equals zero.

117
00:10:08.581 --> 00:10:13.040
And the first thing we're gonna
say is iteration plus, plus.

118
00:10:13.040 --> 00:10:17.654
This is so we can mark that, like if
we're exploring here this will be one,

119
00:10:17.654 --> 00:10:22.960
this will be one, this will be two,
this will be two, this will be two, right?

120
00:10:22.960 --> 00:10:28.369
That's why we're gonna keep track here of

121
00:10:28.369 --> 00:10:33.935
the iteration const a neighbors equals aq.

122
00:10:44.523 --> 00:10:51.433
So, I wrote all these with reduces,

123
00:10:51.433 --> 00:10:56.140
which I don't think is the best
way actually to demonstrate this.

124
00:11:06.850 --> 00:11:07.486
All right, so

125
00:11:07.486 --> 00:11:11.039
let's write a function down here before
we get into this called get neighbors.

126
00:11:14.009 --> 00:11:17.806
Function get neighbors.

127
00:11:23.168 --> 00:11:24.732
So we're gonna give it our visited graph.

128
00:11:26.875 --> 00:11:29.940
We're gonna give it x and
we're gonna give it y.

129
00:11:31.660 --> 00:11:35.567
So, basically what I want to do
with this function is I wanna say,

130
00:11:35.567 --> 00:11:37.556
if I give you a coordinate x and y,

131
00:11:37.556 --> 00:11:41.770
give me back all of the neighbors
that exist for that particular item.

132
00:11:45.180 --> 00:11:47.876
So I'm gonna give it an empty array.

133
00:11:47.876 --> 00:11:52.485
And then basically all we wanna do here
is we just wanna check to make sure that

134
00:11:52.485 --> 00:11:57.474
we're not going out of bounds and that
we haven't already visited that, right?

135
00:11:57.474 --> 00:12:03.220
So, if y minus one is greater than or
equal to zero, right?

136
00:12:03.220 --> 00:12:06.606
So if we're going up and
we're not going to negative one,

137
00:12:06.606 --> 00:12:10.350
right, we're not going out of
bounds of our particular array.

138
00:12:12.689 --> 00:12:18.896
And, we haven't already visited it, right?

139
00:12:18.896 --> 00:12:23.454
Because we don't wanna revisit
the same things over and over again.

140
00:12:23.454 --> 00:12:26.949
Y minus 1 x,

141
00:12:30.151 --> 00:12:35.040
So this is just going up
one bit on the same x-axis.

142
00:12:35.040 --> 00:12:36.510
Axis, it's a hard word.

143
00:12:38.480 --> 00:12:40.053
And it's not closed.

144
00:12:47.558 --> 00:12:49.569
That's y minus 1, so
it's actually going left.

145
00:12:52.943 --> 00:12:57.929
Yep, then neighbors, oops.

146
00:13:04.267 --> 00:13:12.950
Neighbors.push visited y minus 1x.

147
00:13:12.950 --> 00:13:17.433
So we're just gonna do the same thing for
all of our neighbors, right,

148
00:13:17.433 --> 00:13:20.210
we're gonna go left, up, right and down.

149
00:13:21.390 --> 00:13:25.130
So, luckily these are all kind of
minor variations of each other, right?

150
00:13:25.130 --> 00:13:30.146
So this one is gonna be
instead of y minus 1 plus 1,

151
00:13:30.146 --> 00:13:35.163
okay, and
instead of going out of bounds this way,

152
00:13:35.163 --> 00:13:39.850
we're just gonna go to
visited zero.length.

153
00:13:42.527 --> 00:13:45.823
I'm assuming that it's a square,
not a square but

154
00:13:45.823 --> 00:13:48.210
at least rectangular grid, right?

155
00:13:48.210 --> 00:13:50.414
So it's not jagged on the edges,

156
00:13:50.414 --> 00:13:54.050
which is why I'm just looking
at visited zero, okay?

157
00:13:54.050 --> 00:14:00.108
And then here will be plus 1 and

158
00:14:00.108 --> 00:14:07.568
that's it, right, plus 1, okay?

159
00:14:07.568 --> 00:14:11.889
And we're gonna do this again, but

160
00:14:11.889 --> 00:14:17.796
we're gonna do x minus 1
that's greater than or

161
00:14:17.796 --> 00:14:22.276
equal to 0 and y, x minus 1 closed.

162
00:14:27.869 --> 00:14:28.775
Okay?

163
00:14:30.663 --> 00:14:33.755
Same thing here,
this is gonna be x minus 1.

164
00:14:37.347 --> 00:14:38.860
And this is up.

165
00:14:42.341 --> 00:14:45.755
Then one more time for x plus 1.

166
00:14:48.724 --> 00:14:53.105
And this is for visited.length

167
00:14:56.692 --> 00:15:00.315
And visited x plus 1,

168
00:15:00.315 --> 00:15:04.521
x plus 1 and this is down.

169
00:15:08.099 --> 00:15:08.850
Okay?

170
00:15:08.850 --> 00:15:13.010
And then here,
this will return to us neighbors, right?

171
00:15:13.010 --> 00:15:17.578
So now we can give it any sort of
visited array with x and y and

172
00:15:17.578 --> 00:15:21.880
we'll get the valid neighbors for
us to nq after this.

173
00:15:23.230 --> 00:15:27.805
So, what we're gonna do here is
we're gonna get the neighbors for

174
00:15:27.805 --> 00:15:32.394
a neighbor so const a neighbors,
this is assigned get neighbors.

175
00:15:40.333 --> 00:15:42.180
We have to go through axis to it this way.

176
00:15:42.180 --> 00:15:45.589
So we're going to say four let I,

177
00:15:50.490 --> 00:15:52.810
Equal zero.

178
00:15:52.810 --> 00:15:56.010
I is less than aq.

179
00:15:57.910 --> 00:16:00.458
.length, i++.

180
00:16:01.899 --> 00:16:06.186
And we're gonna say, Let

181
00:16:06.186 --> 00:16:12.409
aNeighbors, Equal empty

182
00:16:12.409 --> 00:16:21.934
array, aNeighbors.push,

183
00:16:26.755 --> 00:16:28.830
For all the neighbors in the aQueue.

184
00:16:28.830 --> 00:16:35.394
So we're gonna say aQueue, const neighbor,

185
00:16:37.401 --> 00:16:42.531
const coordinate = aQueue that.

186
00:16:42.531 --> 00:16:48.110
We could have totally done it this way.

187
00:16:48.110 --> 00:16:49.680
In fact, let's just do it this way.

188
00:16:49.680 --> 00:16:51.539
Sorry, one more time.

189
00:16:51.539 --> 00:16:56.933
While aQueue.length,
we're gonna say const coordinate,

190
00:17:04.287 --> 00:17:08.473
aQueue.shift, okay?

191
00:17:08.473 --> 00:17:10.601
So now we can have a coordinate here, and

192
00:17:10.601 --> 00:17:13.743
this is gonna keep going until
all of this has been emptied.

193
00:17:13.743 --> 00:17:17.741
And we're gonna say aNeighbors.concat,

194
00:17:21.423 --> 00:17:26.028
Get neighbors of visited

195
00:17:26.028 --> 00:17:32.833
coordinate.x and coordinate.y.

196
00:17:32.833 --> 00:17:33.920
There we go.

197
00:17:36.829 --> 00:17:39.220
Took me a second, but we got there.

198
00:17:39.220 --> 00:17:42.967
But the basic idea here is we're gonna go
through everything that's in the queue and

199
00:17:42.967 --> 00:17:45.680
we're going to enqueue all
of its valid neighbors.

200
00:17:45.680 --> 00:17:49.490
So then we're gonna have this aNeighbors,
and this is gonna have to be equal.

201
00:17:49.490 --> 00:17:57.609
So we have to say a, Like that cuz concat
gives you back a new array, right?

202
00:17:59.640 --> 00:18:05.090
At the end of this aNeighbors is gonna
have all of the valid neighbors on there.

203
00:18:05.090 --> 00:18:06.637
So we're gonna have to go and

204
00:18:06.637 --> 00:18:10.449
modify all of these to be opened by
a with all of their correct lengths.

205
00:18:14.864 --> 00:18:18.235
Okay, so let's go ahead and do that.

206
00:18:18.235 --> 00:18:25.078
We're gonna say, Let's even just say this,
gather a neighbors.

207
00:18:25.078 --> 00:18:30.986
And then process

208
00:18:30.986 --> 00:18:36.473
a neighbors for

209
00:18:36.473 --> 00:18:40.697
let i = 0,

210
00:18:42.615 --> 00:18:48.229
i is less than i, or sorry,
neighbors.length, i++.

211
00:18:52.435 --> 00:18:58.610
Const neighbor = aNeighbors(i).

212
00:19:07.521 --> 00:19:08.970
I'm seeing neighbor so many times.

213
00:19:08.970 --> 00:19:10.793
It's losing all meaning to me.

214
00:19:10.793 --> 00:19:13.057
Have you ever had that happen to you?

215
00:19:13.057 --> 00:19:15.410
I think it's called semantization or
something like that,

216
00:19:15.410 --> 00:19:16.425
where you say something so

217
00:19:16.425 --> 00:19:19.667
many times that you don't think you're
actually spelling it correctly anymore.

218
00:19:19.667 --> 00:19:20.188
That just happened.

219
00:19:20.188 --> 00:19:25.228
All right, if neighbor.openedBy

220
00:19:25.228 --> 00:19:30.436
=== B, BY_B, then guess what,

221
00:19:30.436 --> 00:19:35.476
we found the answer, hallelujah,

222
00:19:35.476 --> 00:19:42.539
return neighbor.length + iteration, right?

223
00:19:42.539 --> 00:19:47.700
So this is just saying if I have spun out
and I've encountered the next thing that

224
00:19:47.700 --> 00:19:53.265
has been opened by b when I'm doing it
on a, it means cool, we found the path.

225
00:19:53.265 --> 00:19:58.162
So we add my length that I have of
how far away I am from my origin plus

226
00:19:58.162 --> 00:20:04.050
the iteration, which is how far away
you are from the other one, right?

227
00:20:04.050 --> 00:20:06.964
Then you've found the correct one.

228
00:20:09.978 --> 00:20:17.681
All right,
else if neighbor.openedBy === NO_ONE, so

229
00:20:17.681 --> 00:20:25.096
if this hasn't been opened before, Then

230
00:20:25.096 --> 00:20:29.300
we're gonna say neighbor.length, we're
gonna consider this one visited, right?

231
00:20:29.300 --> 00:20:33.224
So neighbor.length = iteration,

232
00:20:33.224 --> 00:20:39.766
neighbor.openedBy BY_A,

233
00:20:39.766 --> 00:20:46.050
and aQeue.push neighbor.

234
00:20:47.699 --> 00:20:49.966
Right, so
it means that we've gotten one forward,

235
00:20:49.966 --> 00:20:52.953
we're not going to queue this neighbor
that we're looking at now for

236
00:20:52.953 --> 00:20:56.320
the next iteration so that we can go ahead
and process it on the next go around.

