WEBVTT

1
00:00:00.180 --> 00:00:04.188
I bring these up ArrayList here and
now linkless after this because,

2
00:00:04.188 --> 00:00:08.070
first of all I'm using Java
terminology and I apologize for that.

3
00:00:08.070 --> 00:00:10.554
But I don't also know of any
better terminology for this and

4
00:00:10.554 --> 00:00:14.010
I think it's important for
you to know these two data structures.

5
00:00:14.010 --> 00:00:17.129
We're talking two different ways that
you could implement an array, right?

6
00:00:17.129 --> 00:00:22.340
Like if I was gonna go write my own
standard library with my own array types.

7
00:00:22.340 --> 00:00:26.031
These are kind of the two
chief ways of doing it,

8
00:00:26.031 --> 00:00:28.902
this is really awkward for us to try.

9
00:00:28.902 --> 00:00:32.660
And model this in JavaScript because
Java JavaScript doesn't really

10
00:00:32.660 --> 00:00:38.075
give you a choice, we have one array data
type, and it's just called array, right?

11
00:00:38.075 --> 00:00:41.300
But if you're in a language like Java or
other languages like that,

12
00:00:41.300 --> 00:00:45.832
they actually give you a choice of what
type of array that you're going to use.

13
00:00:45.832 --> 00:00:49.100
And you choose one depending on what
kind of operations you're going to be

14
00:00:49.100 --> 00:00:51.002
doing with your array.

15
00:00:51.002 --> 00:00:54.264
Again, JavaScript being the high
level language that it is,

16
00:00:54.264 --> 00:00:55.775
doesn't give you a choice.

17
00:00:58.111 --> 00:01:02.649
So an ArrayList again,
imagining in your head that

18
00:01:02.649 --> 00:01:08.320
you're implementing an array for
yourself, right?

19
00:01:08.320 --> 00:01:12.461
An ArrayList is kind of how you would
think of it, right like that's how most

20
00:01:12.461 --> 00:01:15.644
of us would conceptualize how
to put something in memory.

21
00:01:18.044 --> 00:01:23.671
So, again, pretend for a second
that JavaScript has no array tied,

22
00:01:23.671 --> 00:01:28.340
so for right now you can't
say x equals square brackets.

23
00:01:29.390 --> 00:01:33.021
I want you to think about how would you
implement an array yourself using just

24
00:01:33.021 --> 00:01:33.540
objects.

25
00:01:36.620 --> 00:01:40.413
So for an ArrayList basically, I think
imagine most of you would say like, okay.

26
00:01:40.413 --> 00:01:44.231
Well if I'm going to
be doing with objects,

27
00:01:44.231 --> 00:01:48.160
I can just say that let's
just put it in here.

28
00:01:49.700 --> 00:01:57.597
You might have an object that
looks like my array equals object,

29
00:01:57.597 --> 00:02:02.285
I could just say array 0 or .0 = 1.

30
00:02:02.285 --> 00:02:06.551
I guess it doesn't like dot, so

31
00:02:06.551 --> 00:02:13.450
you do array 0 = 1, array 1= 2, right?

32
00:02:13.450 --> 00:02:16.414
So I mean obviously at the end of the day
this looks actually fairly similar to what

33
00:02:16.414 --> 00:02:18.210
would be implementing it as, right.

34
00:02:18.210 --> 00:02:22.210
But imagine this would be like
sequentially allocated in memory, right.

35
00:02:22.210 --> 00:02:26.695
So basically all of the various different
items in your array would be co located in

36
00:02:26.695 --> 00:02:27.900
memory.

37
00:02:27.900 --> 00:02:31.466
So that if you were asking for
like hey I want index 4,

38
00:02:31.466 --> 00:02:33.941
basically we would hop into memory.

39
00:02:33.941 --> 00:02:37.315
We'd look for index 0 and
then we will go four places over and

40
00:02:37.315 --> 00:02:40.180
we would arrive at our item in the array,
right?

41
00:02:40.180 --> 00:02:44.561
So everything is just located right next
to each other in memory, that makes sense?

42
00:02:47.274 --> 00:02:51.194
The advantage of this is it makes lookups
super easy, right if I know the index and

43
00:02:51.194 --> 00:02:53.920
I know the object,
I know exactly where it is in memory.

44
00:02:55.240 --> 00:02:59.638
Cuz you can think of memory is
just like one super long array,

45
00:02:59.638 --> 00:03:04.350
right with various different
addresses that we could look at.

46
00:03:04.350 --> 00:03:08.581
Yeah, so that makes lookups super
easy because we can just say, okay,

47
00:03:08.581 --> 00:03:11.623
go to this place in memory and
go seven places over.

48
00:03:11.623 --> 00:03:18.197
And then you have array index 6,
while it's super advantageous for

49
00:03:18.197 --> 00:03:23.877
lookups it's kinda disadvantageous for
like deletions.

50
00:03:23.877 --> 00:03:28.230
Possibly for additions, certainly for
shifting things around, right?

51
00:03:28.230 --> 00:03:33.198
Because if I wanna delete,
let's say I have an array of size 10,

52
00:03:33.198 --> 00:03:35.339
so let's even go like this.

53
00:03:35.339 --> 00:03:39.688
So now I have 2=3, right and

54
00:03:39.688 --> 00:03:45.040
I have an array that has 0,1, 2 and

55
00:03:45.040 --> 00:03:50.573
3, if I delete index 0 what happens?

56
00:03:52.322 --> 00:03:57.106
I now have to go and shift everything up,

57
00:03:57.106 --> 00:04:03.297
right now I have to say
array 1 is assigned array 0,

58
00:04:03.297 --> 00:04:08.249
other way around array 0 is assigned 1.

59
00:04:10.470 --> 00:04:15.607
And I have to say array
1 is assigned array 2.

60
00:04:17.854 --> 00:04:21.641
And now if I say array again, and

61
00:04:21.641 --> 00:04:26.350
then I have to finally say delete array 2.

62
00:04:28.511 --> 00:04:29.967
So now if I look at my array now,

63
00:04:29.967 --> 00:04:33.280
that's what I had to do to actually
delete something out of the array.

64
00:04:34.840 --> 00:04:39.545
That's kind of burdensome, right
[LAUGH] Now imagine if my array is of

65
00:04:39.545 --> 00:04:42.960
size 10,000 and I want to delete arrays 0.

66
00:04:44.530 --> 00:04:50.632
I don't have to go shift 9999 things
in memory, that doesn't sound like fun,

67
00:04:50.632 --> 00:04:55.184
that actually sounds pretty
computationally inefficient.

68
00:04:55.184 --> 00:05:00.346
So that's where ArrayList
kind of falls apart

69
00:05:00.346 --> 00:05:05.250
because it makes these deletions, right.

70
00:05:05.250 --> 00:05:07.515
Or if I wanna insert something
straight in the middle,

71
00:05:07.515 --> 00:05:08.950
that becomes really burdensome.

72
00:05:10.480 --> 00:05:13.616
So that's why ArrayList for
arrays is really good for

73
00:05:13.616 --> 00:05:18.030
things you have to do a lot of lookups on,
a lot of addition.

74
00:05:18.030 --> 00:05:20.712
And then adding things to the end
typically isn't too bad as long as you

75
00:05:20.712 --> 00:05:22.040
have sufficient space in memory.

76
00:05:22.040 --> 00:05:25.947
All that kind of stuff is great, but
as soon as you wanna do a lot of deletions

77
00:05:25.947 --> 00:05:29.004
and additions in the middle
ArrayList is not a good thing.

78
00:05:34.218 --> 00:05:38.073
Yeah, keep in mind you do have to do
a lookup in a deletion in order to do

79
00:05:38.073 --> 00:05:39.070
a deletion.

80
00:05:39.070 --> 00:05:42.342
This is true regardless,
we kind of ignore that part of it but

81
00:05:42.342 --> 00:05:45.160
let's talk about the big O's of this.

82
00:05:45.160 --> 00:05:49.920
So, a big O of an ArrayList
lookup in terms of

83
00:05:49.920 --> 00:05:54.566
like if I asked you for
array one like this.

84
00:05:54.566 --> 00:05:58.952
This would be constant time, right because
I'll have to do is find the object,

85
00:05:58.952 --> 00:06:00.955
hop over one space, there it is.

86
00:06:00.955 --> 00:06:05.889
That's considered constant time for a
lookup, however if I wanna do a deletion,

87
00:06:05.889 --> 00:06:06.755
what is that?

88
00:06:08.635 --> 00:06:12.305
That actually ends up being N, right?

89
00:06:12.305 --> 00:06:15.285
Because I have to shift everything over in
memory every single time that I do that.

