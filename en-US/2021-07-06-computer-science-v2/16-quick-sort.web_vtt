WEBVTT

1
00:00:00.485 --> 00:00:07.289
The next thing that we wanna
talk about is quick sort.

2
00:00:07.289 --> 00:00:10.449
So every time that you
call .sort in JavaScript,

3
00:00:10.449 --> 00:00:14.748
usually it's calling merge sort,
sometimes it calls quick sort.

4
00:00:14.748 --> 00:00:19.453
And when I talk about that,
I'm actually just talking about this,

5
00:00:19.453 --> 00:00:24.656
right, where it's you call, on an array
.sort, and it gives you an array

6
00:00:24.656 --> 00:00:29.718
back that is sorted, right,
that's what I mean when I say like .sort.

7
00:00:29.718 --> 00:00:32.321
Most of the time it calls merge sort, for

8
00:00:32.321 --> 00:00:36.842
the reasons that we talked about
previously, which is it's stable,

9
00:00:36.842 --> 00:00:41.380
it's average case scenario is really good,
all those kinda things.

10
00:00:42.820 --> 00:00:46.098
Quick sort has some interesting
properties, but one,

11
00:00:46.098 --> 00:00:50.351
it's better spatially in terms of that
it uses uses less memory to do, so

12
00:00:50.351 --> 00:00:56.040
occasionally engines like V8 at least it
used to, I'm not sure if it does anymore.

13
00:00:56.040 --> 00:00:59.820
Sometimes we'll call quick sort,
it just depends.

14
00:01:02.185 --> 00:01:08.030
Okay, so it is another what we
call divide and conquer algorithm.

15
00:01:09.940 --> 00:01:11.700
When I say divide and conquer,

16
00:01:11.700 --> 00:01:15.222
you can basically just replace
that with recursive, right,

17
00:01:15.222 --> 00:01:20.322
cuz you're dividing the big problem into
smaller problems, it's divide and conquer.

18
00:01:20.322 --> 00:01:25.290
It takes kind of a similar approach
that it's gonna break a big array down

19
00:01:25.290 --> 00:01:27.270
into smaller arrays.

20
00:01:27.270 --> 00:01:32.232
But it does throw in a slightly different
fashion, so let's talk about that.

21
00:01:32.232 --> 00:01:37.084
So let's say we have this array,
this array here of 4, 9,

22
00:01:37.084 --> 00:01:41.970
3, 5,
it's gonna choose what's called a pivot.

23
00:01:41.970 --> 00:01:46.477
Right, so a pivot is going to
be the last number here, the 5.

24
00:01:46.477 --> 00:01:51.910
Everything that's smaller than the pivot
is gonna be put into a left array.

25
00:01:51.910 --> 00:01:54.666
Everything that's larger than the pivot
is going to be put into the right

26
00:01:54.666 --> 00:01:56.000
array, right?.

27
00:01:56.000 --> 00:02:00.851
So this is the pivot 5, 5 has made
the pivot since this last thing array and

28
00:02:00.851 --> 00:02:04.091
then we're going to divide
this into two arrays.

29
00:02:04.091 --> 00:02:07.867
Four and three because they're smaller
than five are gonna be put into

30
00:02:07.867 --> 00:02:08.642
a left array.

31
00:02:08.642 --> 00:02:14.427
So 4, 3 get put into this array and
9 is the only one that's bigger than 5,

32
00:02:14.427 --> 00:02:17.465
so it gets put into a right array, okay?

33
00:02:17.465 --> 00:02:21.787
Then we call quick sort on
this array here 4,3 and

34
00:02:21.787 --> 00:02:25.212
we call quick sort, again on 9, okay?

35
00:02:25.212 --> 00:02:28.070
Let's go down to 4,3, 3 is made the pivot.

36
00:02:29.180 --> 00:02:33.616
Everything that is smaller gets put
into a left array, which is nothing,

37
00:02:33.616 --> 00:02:38.285
and everything that's bigger gets put
into a right array, which is just 4.

38
00:02:38.285 --> 00:02:41.734
Those both immediately return because
those are both base cases, right?

39
00:02:41.734 --> 00:02:46.718
The base cases either length 0 or length
1, right, cuz those are already sorted.

40
00:02:46.718 --> 00:02:51.452
And then what you do is you call concat

41
00:02:51.452 --> 00:02:56.060
on left array pivot, right array.

42
00:02:56.060 --> 00:02:58.790
So in this case the pivot was 3,

43
00:02:58.790 --> 00:03:03.861
the left array was empty array,
and the right array was 4.

44
00:03:03.861 --> 00:03:07.757
So it's left array,
which is blank, nothing,

45
00:03:07.757 --> 00:03:13.360
pivot which is 3, and
then right array which is 4, okay?

46
00:03:13.360 --> 00:03:18.911
So then this returns [3,
4] from this quick sort called here.

47
00:03:21.226 --> 00:03:25.014
And then we have 9 here, right, so
this is gonna be this one here,

48
00:03:25.014 --> 00:03:26.310
base case returns 9.

49
00:03:26.310 --> 00:03:31.536
And then up here,
we're gonna call concat on left array 3,

50
00:03:31.536 --> 00:03:35.531
4 pivot, which is 5, and then right array,

51
00:03:35.531 --> 00:03:39.636
which is 9, so we end up with 3, 4, 5, 9.

52
00:03:42.970 --> 00:03:49.540
Kinda clever, right, so unlike merge sort,
we all are gonna have one function.

53
00:03:49.540 --> 00:03:55.159
The one function is just gonna be
the quick sort function that's it and

54
00:03:55.159 --> 00:03:58.440
that's basically the whole thing.

55
00:03:58.440 --> 00:04:03.185
That's what quick sort is in a nutshell.

56
00:04:03.185 --> 00:04:07.400
I've kind of found this for you,
which is a visual representation of it.

57
00:04:07.400 --> 00:04:11.518
It is actually possible to do quick sort
in place without actually breaking it down

58
00:04:11.518 --> 00:04:15.170
into separate arrays, which gives
it much better spatial complexity.

59
00:04:15.170 --> 00:04:16.925
Don't worry about that today,

60
00:04:16.925 --> 00:04:20.632
today just use all the arrays let's
go hog wild with all the arrays.

61
00:04:20.632 --> 00:04:22.907
This is easier to conceptualize, but

62
00:04:22.907 --> 00:04:25.687
just know that it is
possible to do it in place.

63
00:04:30.591 --> 00:04:36.100
So, one thing I wanted to call out here,
which people kind of find confusing.

64
00:04:36.100 --> 00:04:39.822
Notice when I do the breakdown
here from [4, 9],

65
00:04:39.822 --> 00:04:42.979
I make 5 pivot, and I have [4, 9, 3].

66
00:04:42.979 --> 00:04:46.700
Notice that the pivot doesn't
go into either array, right?

67
00:04:46.700 --> 00:04:50.657
So I have [4, 3] in one array and
I have [9] in the other array and

68
00:04:50.657 --> 00:04:52.010
5 is not in either one.

69
00:04:53.030 --> 00:04:56.843
Some people find that confusing just
keep in mind the pivot doesn't go into

70
00:04:56.843 --> 00:04:57.640
either array.

71
00:05:00.762 --> 00:05:05.481
Okay, let's talk about big O.

72
00:05:05.481 --> 00:05:11.860
So what's the worst case for a quick sort?

73
00:05:13.240 --> 00:05:17.362
Imagine if this was [1,2,3,4,5,6,7],

74
00:05:17.362 --> 00:05:21.445
7 was the pivot,
7 is the largest item in the array.

75
00:05:21.445 --> 00:05:24.921
So that means everything is gonna go on
the left array, and nothing's gonna go on

76
00:05:24.921 --> 00:05:28.105
the right array, and it's gonna keep
breaking down that array that way.

77
00:05:29.335 --> 00:05:33.214
So the worst case there is that you
get no benefit from the recursion and

78
00:05:33.214 --> 00:05:35.137
you end up with n squared, right?

79
00:05:35.137 --> 00:05:36.676
Because every item is
gonna be looked at and

80
00:05:36.676 --> 00:05:38.227
compared to every other item in the array.

81
00:05:39.617 --> 00:05:43.270
So sorted lists are actually
a disaster for quick sort,

82
00:05:43.270 --> 00:05:45.612
same with reverse sorted, right?

83
00:05:45.612 --> 00:05:49.684
Cuz you have the same problem
everything goes in the right array.

84
00:05:49.684 --> 00:05:52.660
There are ways to mitigate that risk.

85
00:05:52.660 --> 00:05:56.849
Which you can actually instead of just
saying automatically 5 is the pivot,

86
00:05:56.849 --> 00:06:00.973
you could say, I'm gonna look at 4,
9 and 5 and I'm gonna find the middle

87
00:06:00.973 --> 00:06:04.662
most elements and make that my pivot,
this is called quick sort 3.

88
00:06:04.662 --> 00:06:08.488
In which case you end up with a much
better average case scenario of just n log

89
00:06:08.488 --> 00:06:11.000
n, right,
which is the average case scenario.

90
00:06:13.970 --> 00:06:16.765
But the way that we're gonna do it today,
we're not doing quick sort three,

91
00:06:16.765 --> 00:06:17.980
we're just gonna do quick sort.

92
00:06:17.980 --> 00:06:21.828
The worst case scenario is a sort of list.

93
00:06:21.828 --> 00:06:23.975
What's the best case scenario?

94
00:06:23.975 --> 00:06:28.378
The more shuffled the array
is the better quick sort is.

95
00:06:28.378 --> 00:06:32.507
So that's both the best case in
mostly the average case as well,

96
00:06:32.507 --> 00:06:34.120
which is n log n, right?

97
00:06:34.120 --> 00:06:37.115
Because not every element is being
compared to every other elements in

98
00:06:37.115 --> 00:06:37.630
the array.

99
00:06:37.630 --> 00:06:42.270
So we end up with n log n just like merge
sort, but it has better spatial complexity

100
00:06:42.270 --> 00:06:45.151
and technically can probably
go a little faster.

101
00:06:45.151 --> 00:06:47.090
So some better coefficients.

102
00:06:49.477 --> 00:06:53.490
And we are gonna do it as
a nondestructive version, but

103
00:06:53.490 --> 00:06:59.437
it is possible to do a destructive version
which has better spatial complexity.

104
00:07:01.932 --> 00:07:04.001
So I think the way that we're gonna do it,

105
00:07:04.001 --> 00:07:06.793
it would be basically n in
terms of spatial complexity.

106
00:07:06.793 --> 00:07:08.659
But if you do it destructively,

107
00:07:08.659 --> 00:07:11.780
you still have to make some
allocations on the stack.

108
00:07:11.780 --> 00:07:13.966
Which would make it log n, cool.

109
00:07:13.966 --> 00:07:18.515
There are some variations of quick sort,
like quicksort 3,

110
00:07:18.515 --> 00:07:22.199
that's what I was telling
you about just before.

111
00:07:22.199 --> 00:07:26.114
There are some other variations but
they're almost all variations

112
00:07:26.114 --> 00:07:30.724
around how you choose the pivot,
cuz that's obviously pivotal, nice.

113
00:07:30.724 --> 00:07:35.991
[LAUGH] It's pivotal, I'm just
seeing everyone shaking their heads

114
00:07:35.991 --> 00:07:41.178
like dear God, it's too late for
a dad joke like that, [LAUGH].

115
00:07:41.178 --> 00:07:44.280
It's very important how
you choose your pivot.

116
00:07:44.280 --> 00:07:48.297
So that's where all the variations of
quick sort come in and you can actually

117
00:07:48.297 --> 00:07:52.711
check that out on the Wikipedia page that
it'll run down a bunch of those variations

