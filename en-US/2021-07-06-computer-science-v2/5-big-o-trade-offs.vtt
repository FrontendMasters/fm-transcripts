WEBVTT

1
00:00:00.102 --> 00:00:03.557
So we just talked about
spatial complexity.

2
00:00:03.557 --> 00:00:09.128
Let's go ahead and pop into
a whole section just on tradeoffs.

3
00:00:09.128 --> 00:00:13.131
And again, I actually think this is
the most important part of this course.

4
00:00:13.131 --> 00:00:16.859
I'm gonna show you a bunch
of novel techniques for

5
00:00:16.859 --> 00:00:21.851
sorting things and storing information,
all that kind of stuff.

6
00:00:21.851 --> 00:00:28.794
But the point here is, I wanted to show
you can do things multiple different ways.

7
00:00:28.794 --> 00:00:31.552
And you can decide which one's better or

8
00:00:31.552 --> 00:00:35.300
worse depending on what
the problem constraints are.

9
00:00:36.675 --> 00:00:40.738
And I think, again,
when you're getting into interviews and

10
00:00:40.738 --> 00:00:45.721
talking to an interviewer at a tech
company, if you can discuss the tradeoffs

11
00:00:45.721 --> 00:00:49.800
with them, you're gonna be a leg
up on everyone else, right?

12
00:00:49.800 --> 00:00:53.121
So you can get in there and it's like,
okay, well, we could do it this way, but

13
00:00:53.121 --> 00:00:54.223
we're trading off time.

14
00:00:54.223 --> 00:00:58.191
Or we can do it this way, and
it's gonna cost more on our servers, blah,

15
00:00:58.191 --> 00:00:58.985
blah, blah.

16
00:00:58.985 --> 00:01:04.459
And you can discuss money versus customer
experience or things like that, right?

17
00:01:04.459 --> 00:01:09.443
To me, I have, at this point,
done way too many interviews.

18
00:01:09.443 --> 00:01:12.285
I find that as an interviewer very,

19
00:01:12.285 --> 00:01:18.160
very impressive when a developer is
able to kind of discuss these kind of,

20
00:01:18.160 --> 00:01:24.451
I guess business logic kind of things
based on the constraints that they have.

21
00:01:24.451 --> 00:01:32.101
So I'm just giving you a big hint there
that I think that's a really good idea.

22
00:01:33.202 --> 00:01:36.369
And then just like when you're
writing code, looking at something and

23
00:01:36.369 --> 00:01:38.974
just kinda getting these,
people call them code smells.

24
00:01:38.974 --> 00:01:43.395
But the idea of just these intuitions
of hey, I have a for loop here, and

25
00:01:43.395 --> 00:01:46.138
I'm putting another for loop inside of it.

26
00:01:46.138 --> 00:01:51.661
That's what n square looks like,
this might be a bad idea, right?

27
00:01:51.661 --> 00:01:55.367
That's another thing that I'm kinda
trying to help you understand here.

28
00:01:57.746 --> 00:02:02.274
Yeah, and just thinking about something
in terms of, could this be done better?

29
00:02:02.274 --> 00:02:05.210
And, again,
better is a very subjective term, and

30
00:02:05.210 --> 00:02:08.081
I'm trying to help you
understand the trade offs so

31
00:02:08.081 --> 00:02:11.574
that you can decide what better
means in any particular case.

32
00:02:14.451 --> 00:02:19.397
So my first rule here that I put, and I'll
just zoom in here a little bit on this is,

33
00:02:19.397 --> 00:02:21.431
there are no rules here, right?

34
00:02:21.431 --> 00:02:25.307
There is no always do blink, right?

35
00:02:25.307 --> 00:02:27.600
That's one of the very,
very big keys here.

36
00:02:27.600 --> 00:02:31.186
We talked about best and
worst case scenarios, right?

37
00:02:31.186 --> 00:02:36.894
Sometimes you wanna lean into those best
case scenarios, and sometimes a less

38
00:02:36.894 --> 00:02:42.442
effective algorithm in terms of average
case might have a better best case.

39
00:02:42.442 --> 00:02:45.025
And you might always have a best
case scenario in front of you and

40
00:02:45.025 --> 00:02:47.721
you know that, in which case,
you wanna lean into the best case.

41
00:02:47.721 --> 00:02:52.632
But sometimes, you don't know what
you're gonna get, in which case,

42
00:02:52.632 --> 00:02:57.636
you really wanna lean into the worst and
average case scenarios, right?

43
00:02:57.636 --> 00:03:01.277
So that's one thing here is,
just learn that there are no rules and

44
00:03:01.277 --> 00:03:04.348
you have to reevaluate every
problem in a unique light.

45
00:03:04.348 --> 00:03:09.127
There are frequently
multiple right choices.

46
00:03:09.127 --> 00:03:12.687
It's not like someone's up
there grading you saying

47
00:03:12.687 --> 00:03:16.770
you should have chosen quick sort
instead of merge sort this time.

48
00:03:16.770 --> 00:03:24.109
Frequently, those are both very
effective answers to the same question.

49
00:03:24.109 --> 00:03:28.845
Remember how I told you Big O says
ignore the 3 and the 3x squared?

50
00:03:28.845 --> 00:03:31.344
Sometimes you can't ignore the 3, right?

51
00:03:31.344 --> 00:03:36.550
So even though I taught you Big O and
Big O ignores all

52
00:03:36.550 --> 00:03:41.650
of the coefficients,
the incidentals, right?

53
00:03:41.650 --> 00:03:45.602
If you have a for
loop that does has 10,000 lines in it,

54
00:03:45.602 --> 00:03:51.197
sometimes that coefficient ends up being
enormous and you can't ignore it, right?

55
00:03:51.197 --> 00:03:56.294
So, again, Big O is just one tool,
it's a very blunt instruments

56
00:03:56.294 --> 00:04:01.118
in terms of that it ignores a lot
of the incidental details, and

57
00:04:01.118 --> 00:04:05.683
sometimes the incidental
details are actually critical.

58
00:04:05.683 --> 00:04:07.857
So be aware of that.

59
00:04:12.532 --> 00:04:19.741
Yeah, Sometimes Big O can even be
a bad tool to use in the sense of,

60
00:04:19.741 --> 00:04:25.026
let's imagine, and this is actually
a real story from my career.

61
00:04:25.026 --> 00:04:30.463
I had a job that ingested a bunch of data
from a partner once a day and ran and

62
00:04:30.463 --> 00:04:36.005
did a bunch of processing and then
stored a bunch of stuff in our database.

63
00:04:36.005 --> 00:04:41.495
And I spent just tons of time trying to
optimize that cuz it was a lot of data,

64
00:04:41.495 --> 00:04:42.117
right?

65
00:04:42.117 --> 00:04:45.588
But here's the thing,
that job happened once a day, and

66
00:04:45.588 --> 00:04:48.202
it didn't matter if it took 30 minutes.

67
00:04:48.202 --> 00:04:50.520
No one was waiting on it, right?

68
00:04:50.520 --> 00:04:53.403
It was just updating our database
with the freshest data, right?

69
00:04:53.403 --> 00:04:55.376
So this was really early in my career.

70
00:04:55.376 --> 00:04:59.999
I spent just hours, and days, and weeks,
trying to optimize this to get this down

71
00:04:59.999 --> 00:05:03.493
from, I think I had it 45 seconds
I was trying to get it done.

72
00:05:03.493 --> 00:05:07.227
I was like,
this should run in under a second.

73
00:05:07.227 --> 00:05:11.960
It was a massive waste of time, it didn't
matter that it took 45 seconds, right?

74
00:05:11.960 --> 00:05:15.657
So in this particular case,
I was doing myself and

75
00:05:15.657 --> 00:05:20.771
my company a big disservice by
focusing on something not important.

76
00:05:22.761 --> 00:05:26.700
So those things are only important
when a user's being affected or

77
00:05:26.700 --> 00:05:29.387
it's causing downtime or things like that.

78
00:05:29.387 --> 00:05:32.967
If you're just making a computer wait
a little bit longer, who cares, right?

79
00:05:32.967 --> 00:05:34.813
Who cares that that job took 45 seconds?

80
00:05:34.813 --> 00:05:35.771
No one.

81
00:05:35.771 --> 00:05:38.430
I guess, except me, right?

82
00:05:38.430 --> 00:05:42.325
I cared [LAUGH].

83
00:05:42.325 --> 00:05:47.099
This is probably the most
important thing in here.

84
00:05:47.099 --> 00:05:48.189
Readability and

85
00:05:48.189 --> 00:05:52.555
maintainability are actually
the most important things in code.

86
00:05:52.555 --> 00:05:55.709
I think I heard Kyle Simpson say this,
I don't know if he invented it.

87
00:05:55.709 --> 00:05:58.784
He's a smart guy, but
it might have been someone else.

88
00:05:58.784 --> 00:06:01.041
But he said that code is communication and

89
00:06:01.041 --> 00:06:05.245
that it's more important that a human
can read it than a computer can read it.

90
00:06:05.245 --> 00:06:08.503
And that really challenged my worldview,
the first time I heard it.

91
00:06:08.503 --> 00:06:13.123
And then I realized further and further
it's like, if the only thing was important

92
00:06:13.123 --> 00:06:16.699
was computer time,
we would just be writing assembly, right?

93
00:06:16.699 --> 00:06:18.204
You and I both could learn assembly and

94
00:06:18.204 --> 00:06:21.412
I think everyone that's watching this
course is capable of learning assembly.

95
00:06:21.412 --> 00:06:24.590
Why don't we write assembly?

96
00:06:24.590 --> 00:06:26.157
Or why don't we all write C?

97
00:06:26.157 --> 00:06:31.096
You can write web servers in C, I've done
that before, why don't we all write C?

98
00:06:31.096 --> 00:06:34.693
Well, JavaScript is a lot easier to read,
right?

99
00:06:34.693 --> 00:06:37.828
It's a lot easier to write as well,
but it's a lot easier to read and

100
00:06:37.828 --> 00:06:39.326
it's a lot easier to maintain.

101
00:06:39.326 --> 00:06:40.693
Why do we like TypeScript?

102
00:06:40.693 --> 00:06:42.765
TypeScript is even easier to maintain.

103
00:06:42.765 --> 00:06:45.847
I maintain that this is at
all kind of derived from

104
00:06:45.847 --> 00:06:48.259
the fact that code is communication.

105
00:06:50.618 --> 00:06:53.153
Code is communication to your future self,

106
00:06:53.153 --> 00:06:57.541
it's communication to future developers
that have to maintain your code.

107
00:06:57.541 --> 00:07:02.405
So always, always optimize for
readability and maintainability.

108
00:07:02.405 --> 00:07:05.547
If you have something that's very
simple and it's n squared and

109
00:07:05.547 --> 00:07:09.445
you have something that's hyper optimized
and it's n, the n squared one might

110
00:07:09.445 --> 00:07:13.190
still be the better answer, if it's
a lot easier for you to maintain later.

111
00:07:13.190 --> 00:07:20.857
Only go for that n code, if the
constraints actually call for it, right?

112
00:07:20.857 --> 00:07:25.331
So that's what I'm saying here,
readability and maintainability should be

113
00:07:25.331 --> 00:07:29.820
number 1 on your list, and only optimize
when you actually need to optimize.

114
00:07:33.329 --> 00:07:35.140
Always err on the side of simple.

115
00:07:35.140 --> 00:07:38.604
If you can choose from complex and
simple, simple code

116
00:07:38.604 --> 00:07:43.592
tends to just have less bugs because you
can understand it more holistically.

117
00:07:43.592 --> 00:07:46.993
So where you can, try and
write simple code.

118
00:07:46.993 --> 00:07:50.103
Human time is almost always more
valuable than computer time.

119
00:07:50.103 --> 00:07:54.608
In the sense of what I'm saying is,
if you can throw an additional server at

120
00:07:54.608 --> 00:07:59.398
the problem and it solves your problem,
as opposed to making you write a lot more

121
00:07:59.398 --> 00:08:04.287
code, usually, it's cheaper to run a
server than to pay you to write that code.

122
00:08:04.287 --> 00:08:09.310
So usually it's the right choice for you
to spend your time doing something else.

123
00:08:10.717 --> 00:08:13.639
Talked about this already, but
don't prematurely optimize.

124
00:08:13.639 --> 00:08:16.406
Try to have a perf problem
before you solve a perf problem.

125
00:08:16.406 --> 00:08:17.760
Again, these are high level principles.

126
00:08:17.760 --> 00:08:21.171
I refer you back to rule number 1
here is that there are no rules.

127
00:08:21.171 --> 00:08:24.388
Sometimes you can look at something as,
I know this is gonna be a problem and

128
00:08:24.388 --> 00:08:25.728
I'm going to fix it right now.

129
00:08:25.728 --> 00:08:34.219
But just know that you rarely know
your problems you're about to have.

130
00:08:34.219 --> 00:08:37.720
None of us are code psychics, or

131
00:08:37.720 --> 00:08:43.194
if you are,
I would like to hire you [LAUGH].

132
00:08:43.194 --> 00:08:46.557
And then 99%, and this actually should
probably be like 99.9999% of the time.

133
00:08:46.557 --> 00:08:52.683
You wanna use the built in features to the
language and not write the code yourself.

134
00:08:52.683 --> 00:08:57.127
So for example,
JavaScript has a .sort method, and

135
00:08:57.127 --> 00:09:01.487
it is faster than any sort
that you're gonna write.

136
00:09:01.487 --> 00:09:02.439
Is that really true?

137
00:09:02.439 --> 00:09:05.457
It's actually probably not true,
you probably could write a faster one.

138
00:09:05.457 --> 00:09:07.568
But the thing is V8 gets to cheat.

139
00:09:07.568 --> 00:09:12.066
V8 or SpiderMonkey or
any of the JavaScript engines,

140
00:09:12.066 --> 00:09:15.699
JavaScriptCore would be the other big one.

141
00:09:15.699 --> 00:09:17.624
They get to cheat because
they get to use C and

142
00:09:17.624 --> 00:09:20.500
you don't get to use C when
you're writing JavaScript, right?

143
00:09:20.500 --> 00:09:24.034
So they can drop into the internals
of the engine, sort your code and

144
00:09:24.034 --> 00:09:27.451
hand it back to you frequently
faster than you can do it yourself.

145
00:09:27.451 --> 00:09:32.449
But the other thing I'm gonna
say is that .sort has been so

146
00:09:32.449 --> 00:09:37.359
tested that it's pretty much
guaranteed to be bug free.

147
00:09:37.359 --> 00:09:42.235
If you hit a bug on .sort,
you are doing some just wild stuff and

148
00:09:42.235 --> 00:09:44.814
one, I congratulate you [LAUGH].

149
00:09:44.814 --> 00:09:50.731
And two, it would actually be really
cool thing for you to go fix.

150
00:09:50.731 --> 00:09:51.768
But suffice to say,

151
00:09:51.768 --> 00:09:55.916
.sort has been called on just about every
website out there on the Internet right

152
00:09:55.916 --> 00:09:59.715
now, which means that you're probably
not gonna hit the edge case on it.

153
00:09:59.715 --> 00:10:02.427
Whereas, if you write your
own sorting algorithm,

154
00:10:02.427 --> 00:10:06.320
I guarantee you're gonna have some
bugs that you just don't think about.

155
00:10:06.320 --> 00:10:10.309
So where you can, try and
lean into what other people have done.

156
00:10:10.309 --> 00:10:14.172
Install that module off of NPM,
call the .sort method,

157
00:10:14.172 --> 00:10:18.939
whatever you need to do, but
you'll have less surface area for bugs.

158
00:10:18.939 --> 00:10:23.621
And again, I'd rather spend my time
writing new and novel cool stuff for

159
00:10:23.621 --> 00:10:26.244
my company, rather than solving bugs.

160
00:10:26.244 --> 00:10:30.100
I don't know, maybe I'm strange in
that capacity, but I don't think so.

161
00:10:30.100 --> 00:10:34.476
So the question is, you go out
there you do what I just tell you,

162
00:10:34.476 --> 00:10:37.119
which is, do the unoptimized thing,

163
00:10:37.119 --> 00:10:41.260
do the simple thing, and
then you hit hockey stick growth.

164
00:10:41.260 --> 00:10:47.245
And now instead of having 10 users,
you now have 100,000 users and

165
00:10:47.245 --> 00:10:52.592
you find that you're gonna run into
a lot of performance problems.

166
00:10:52.592 --> 00:10:58.255
So one, congratulations,
[LAUGH] you're living the dream

167
00:10:58.255 --> 00:11:03.478
right there,
which is that you hit scaling problems.

168
00:11:03.478 --> 00:11:06.448
And that's kind of the advice
that I give startups,

169
00:11:06.448 --> 00:11:10.446
it's the advice that I give developers,
try and have good problems.

170
00:11:10.446 --> 00:11:12.814
And having scaling problems
are good problems.

171
00:11:12.814 --> 00:11:16.351
Now they're terrifying and
they're very difficult to solve, right?

172
00:11:16.351 --> 00:11:20.524
But it's why people say
never write Ruby on Rails.

173
00:11:20.524 --> 00:11:23.631
It's this unoptimized things and
look, Twitter had to rewrite and

174
00:11:23.631 --> 00:11:27.024
GitHub had to rewrite and blah, blah,
blah, and all that kind of stuff.

175
00:11:27.024 --> 00:11:30.336
Well, one,
they're billion dollar companies, and

176
00:11:30.336 --> 00:11:33.290
they can now pay people
to solve those problems.

177
00:11:33.290 --> 00:11:36.986
And if you hit hockey stick growth and
go from 10 to 100,000 users,

178
00:11:36.986 --> 00:11:40.913
I hope that you're making enough money now
that you can hire someone to go back and

179
00:11:40.913 --> 00:11:42.491
solve those scaling problems.

180
00:11:42.491 --> 00:11:45.740
I think the YC thing, the Y Combinator,

181
00:11:45.740 --> 00:11:50.240
which is the name of a VC firm is,
do unscalable things.

182
00:11:50.240 --> 00:11:55.005
I quite agree with that in the sense of,
again, normally you're not gonna,

183
00:11:55.005 --> 00:11:59.625
when you have 10 users, you typically
don't know what problems you're

184
00:11:59.625 --> 00:12:03.249
actually gonna have when
you have 100,000 users.

185
00:12:03.249 --> 00:12:07.028
You only know that you're gonna have those
problems when you hit 100,000 users.

186
00:12:07.028 --> 00:12:10.076
Which means you're probably not
gonna solve the right problems.

187
00:12:10.076 --> 00:12:12.956
You think, okay,
this is a bottleneck, this for

188
00:12:12.956 --> 00:12:17.965
loop is definitely gonna get bugged down,
and frequently it's actually over here and

189
00:12:17.965 --> 00:12:21.277
it's a different problem and
it's way bigger, right?

190
00:12:21.277 --> 00:12:24.285
So yes, that's gonna happen and

191
00:12:24.285 --> 00:12:29.126
you should feel very happy
when those things happen.

192
00:12:29.126 --> 00:12:30.449
Does that answer your question?

193
00:12:30.449 --> 00:12:33.835
Cool, other questions?

194
00:12:33.835 --> 00:12:35.766
&gt;&gt; I have one follow up question.

195
00:12:35.766 --> 00:12:41.708
So should we wait for that situation
when there is an increase for

196
00:12:41.708 --> 00:12:49.206
user audience in our app, or we need to
do some performance testing and fix code?

197
00:12:49.206 --> 00:12:53.627
And when should we do
that performance testing?

198
00:12:53.627 --> 00:12:58.784
&gt;&gt; Yes, I think that the crux of
that question is, when should we do

199
00:12:58.784 --> 00:13:05.106
that user tests, load testing and how
much should we do in those kinda things?

200
00:13:07.915 --> 00:13:13.047
It depends, [LAUGH] I think
the answer to that question is,

201
00:13:13.047 --> 00:13:17.656
how many users do you anticipate
in the very near term

202
00:13:17.656 --> 00:13:21.763
are gonna be using your application,
right?

203
00:13:21.763 --> 00:13:26.247
So let's say I work at a startup and
that startup has 10,000 users daily.

204
00:13:26.247 --> 00:13:30.466
I would probably try and load tests for up
to 30,000 users or something like that, or

205
00:13:30.466 --> 00:13:33.197
50,000 or 100,000 or something like that.

206
00:13:33.197 --> 00:13:38.292
Something that's within an order
of magnitude difference, so

207
00:13:38.292 --> 00:13:44.910
that I'm not gonna just fall over my next,
kinda scale up next little growth area.

208
00:13:44.910 --> 00:13:49.097
But I'm not gonna use or test, or
I'm not gonna load test for a million.

209
00:13:49.097 --> 00:13:51.684
I'm not gonna load test for
a billion, right?

210
00:13:51.684 --> 00:13:54.717
Really only Facebook gets to do that.

211
00:13:54.717 --> 00:14:00.352
[LAUGH] So, yeah, try and keep it within,

212
00:14:02.471 --> 00:14:04.874
Growing distance, within sight.

213
00:14:04.874 --> 00:14:07.365
But it's gonna really depend on
what you anticipate growth and

214
00:14:07.365 --> 00:14:09.811
then I guess it also depends on
what else is pressing, right?

215
00:14:09.811 --> 00:14:14.347
If you're doing that instead of
shipping new critical features,

216
00:14:14.347 --> 00:14:19.541
then you probably wanna minimize that and
go work on the critical features.

217
00:14:19.541 --> 00:14:23.773
So it's really a pretty
delicate balance depending

218
00:14:23.773 --> 00:14:28.014
on where you are in your
startup's growth pattern.

219
00:14:29.687 --> 00:14:35.279
&gt;&gt; So what you're saying mean
that we need to be prepared for

220
00:14:35.279 --> 00:14:37.847
the most nearest future.

221
00:14:37.847 --> 00:14:38.908
&gt;&gt; Yeah.

222
00:14:38.908 --> 00:14:43.738
&gt;&gt; Not far away, but in a way for
reasonable future, yeah, okay.

223
00:14:43.738 --> 00:14:48.370
&gt;&gt; Yeah, I think that's a good summation
is be prepared for the visible future.

224
00:14:48.370 --> 00:14:52.918
Cuz it's possible to spend just
infinite cycles on optimization, and

225
00:14:52.918 --> 00:14:55.507
that's not useful to anybody, right?

226
00:14:55.507 --> 00:15:00.648
What's useful is providing value for
your users.

227
00:15:00.648 --> 00:15:06.325
Let's go with unnamed company, one that
many of you have probably heard of.

228
00:15:06.325 --> 00:15:10.988
I had one particular problem,
their search bar was incredibly slow,

229
00:15:10.988 --> 00:15:13.604
just while the inappropriately slow.

230
00:15:13.604 --> 00:15:17.931
And I was so upset, and I still use
the products I liked the product, but

231
00:15:17.931 --> 00:15:20.257
the search bar drove me just bananas.

232
00:15:20.257 --> 00:15:22.120
And I asked one of the engineers,
I was like, why is it so slow?

233
00:15:22.120 --> 00:15:23.886
I'm so upset all the time.

234
00:15:23.886 --> 00:15:27.636
[LAUGH] And basically what they said is,
we looked at that and

235
00:15:27.636 --> 00:15:32.211
is just the gnarliest problem of how
we did this when we first started it.

236
00:15:32.211 --> 00:15:36.872
They were loading just this huge amount
of data set into a device that has no

237
00:15:36.872 --> 00:15:39.059
business loading that much data.

238
00:15:39.059 --> 00:15:42.377
And they basically said, it's gonna
require a huge rewrite of this, and

239
00:15:42.377 --> 00:15:46.083
we have to ship a bunch of stuff before we
can get back to this performance problem.

240
00:15:46.083 --> 00:15:49.736
And I was upset on one hand as a user,
on the other hand,

241
00:15:49.736 --> 00:15:53.311
I totally agree with that
approach of it did work, and

242
00:15:53.311 --> 00:15:57.141
those features that they were shipping,
they did need.

243
00:15:57.141 --> 00:15:58.030
So in that case,

244
00:15:58.030 --> 00:16:02.294
ignoring the performance problem
temporarily was actually the correct call.

245
00:16:02.294 --> 00:16:04.749
And it's fixed now, right?

246
00:16:04.749 --> 00:16:10.488
I still give them endless crap about it,
and they deserve it, yeah.

247
00:16:10.488 --> 00:16:12.866
Anyway, it's a balance.

248
00:16:15.836 --> 00:16:19.701
Okay, let's get into writing some code.

249
00:16:19.701 --> 00:16:24.466
You're all probably sick of
listening to me talk at you.

250
00:16:24.466 --> 00:16:27.440
We are gonna get into Bubble Sort.

