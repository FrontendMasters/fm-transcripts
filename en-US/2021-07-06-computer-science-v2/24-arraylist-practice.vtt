WEBVTT

1
00:00:00.370 --> 00:00:05.210
Let's go ahead and
go implement something with ArrayList.

2
00:00:05.210 --> 00:00:10.101
So I have the arrays up here we're
going to get ArrayList.test.

3
00:00:10.101 --> 00:00:14.390
And I have a couple of things
that I want you to do here.

4
00:00:16.050 --> 00:00:18.800
So I want you to implement an object.

5
00:00:18.800 --> 00:00:20.451
You have this class here, ArrayList.

6
00:00:23.271 --> 00:00:28.730
And I want you to have an integer for
the length, right?

7
00:00:28.730 --> 00:00:32.570
So you're gonna have to keep track of what
the length of your particular object is.

8
00:00:32.570 --> 00:00:35.400
I want you to implement a push and
a pop method, so

9
00:00:35.400 --> 00:00:39.070
this is basically gonna be a stack
at the end of the day, right?

10
00:00:40.700 --> 00:00:43.430
So you can push numbers on the end, right?

11
00:00:43.430 --> 00:00:44.900
You can pop numbers off the end.

12
00:00:46.590 --> 00:00:51.133
And then I want you to implement a get
function and then a delete function.

13
00:00:51.133 --> 00:00:54.671
Which accepts an index,
removes the value from the list and

14
00:00:54.671 --> 00:00:58.220
then it will do a collapse on
that particular part, right?

15
00:00:58.220 --> 00:01:00.658
So if I delete from index
1 of my length 10 array,

16
00:01:00.658 --> 00:01:04.033
you're gonna have to collapse all
those various different methods.

17
00:01:04.033 --> 00:01:06.699
And so if you've never
worked with classes before,

18
00:01:06.699 --> 00:01:10.040
let's just make sure that you get
a clear not testing on classes.

19
00:01:12.600 --> 00:01:14.850
So you're gonna have a constructor,
probably.

20
00:01:16.850 --> 00:01:22.613
This is where every time that
I call new right here, Right,

21
00:01:22.613 --> 00:01:27.000
where I say new ArrayList right here,
the constructor method gets run.

22
00:01:27.000 --> 00:01:32.280
So here you're going to
instantiate all your variables.

23
00:01:35.769 --> 00:01:41.091
You're gonna have a push method,
which is going to accept a value.

24
00:01:44.362 --> 00:01:48.630
And this is going to add an item
to the end of the array.

25
00:01:50.550 --> 00:01:55.050
A pop method which doesn't have anything.

26
00:01:55.050 --> 00:02:00.687
This is going to remove
the last item in the array.

27
00:02:07.893 --> 00:02:10.586
Okay, and returns it.

28
00:02:11.711 --> 00:02:16.264
You're gonna have a get method,

29
00:02:16.264 --> 00:02:20.306
Which is going to take an index, And

30
00:02:20.306 --> 00:02:24.776
returns that item from the array,

31
00:02:27.474 --> 00:02:29.500
And you're gonna have a delete method.

32
00:02:30.560 --> 00:02:39.192
Which takes an index removes
item from the array and

33
00:02:39.192 --> 00:02:44.140
collapses, The array.

34
00:02:44.140 --> 00:02:46.451
When I say collapse, right?

35
00:02:46.451 --> 00:02:47.770
You need to shift everything over.

36
00:02:47.770 --> 00:02:49.150
So you can call this collapse.

37
00:02:49.150 --> 00:02:49.970
You can call it shift.

38
00:02:49.970 --> 00:02:55.520
You can do whatever you want there, okay?

39
00:02:59.080 --> 00:03:02.240
You are not allowed to use
arrays at all for this.

40
00:03:04.190 --> 00:03:09.939
So everything needs to be done
in terms of just saying I mean,

41
00:03:09.939 --> 00:03:13.340
let me just look at how I did it here.

42
00:03:16.575 --> 00:03:17.231
Yeah, so

43
00:03:17.231 --> 00:03:22.730
I have something here that I just said
this .data equals empty object, right?

44
00:03:22.730 --> 00:03:27.320
And then I use the data object to store
all these various different values in.

45
00:03:29.830 --> 00:03:31.170
In fact, I'll just do this for you.

46
00:03:31.170 --> 00:03:33.420
This is the constructor that I have.

47
00:03:35.240 --> 00:03:36.559
So go ahead and just copy that.

48
00:03:40.114 --> 00:03:43.690
Cool, any questions
about the exercise here?

49
00:03:45.480 --> 00:03:51.260
&gt;&gt; So if it's not found the index for
the good function what it should return?

50
00:03:51.260 --> 00:03:53.140
Avoid zero is good, undefined.

51
00:03:53.140 --> 00:03:54.160
I don't think I test you on it.

52
00:03:54.160 --> 00:03:55.130
So I don't think it matters.

53
00:03:55.130 --> 00:03:58.594
But in that particular case, I would.

54
00:03:58.594 --> 00:04:04.804
You can either throw an array out of
bounds or you could return undefined

55
00:04:10.555 --> 00:04:16.302
So, push for
an ArrayList is pretty straightforward.

56
00:04:16.302 --> 00:04:21.372
This.data, this.length,

57
00:04:23.329 --> 00:04:30.522
Equals value, this .length plus plus.

58
00:04:30.522 --> 00:04:32.940
This is the advantage of ArrayList.

59
00:04:32.940 --> 00:04:36.695
This is a very,
very straightforward operation.

60
00:04:36.695 --> 00:04:41.728
Pop pretty similar so cons response

61
00:04:41.728 --> 00:04:46.089
whatever you wanna call this,

62
00:04:46.089 --> 00:04:52.139
equals this .data, this .length-1.

63
00:04:55.702 --> 00:05:00.571
You probably wanna have some sort of logic
to make sure that you're not popping

64
00:05:00.571 --> 00:05:01.990
off and array link 0.

65
00:05:01.990 --> 00:05:05.490
In this particular case,
I'm not really worried about corner cases.

66
00:05:05.490 --> 00:05:07.020
I just wanted to kind
of get the gist here.

67
00:05:07.020 --> 00:05:12.770
I'm gonna say delete this .data,

68
00:05:12.770 --> 00:05:16.225
this .length -1.

69
00:05:18.787 --> 00:05:25.141
This .length, minus minus return response.

70
00:05:27.205 --> 00:05:30.260
Okay, that'll remove something
off the end of there.

71
00:05:31.400 --> 00:05:38.007
The get it's the most beautiful
part of this is return.

72
00:05:38.007 --> 00:05:41.288
This.data index.

73
00:05:43.175 --> 00:05:47.920
Right, the whole reason for
ArrayList is that this is very fast and

74
00:05:47.920 --> 00:05:50.160
very simple, right?

75
00:05:50.160 --> 00:05:53.730
As you can imagine, there's basically no
bugs that that could happen here, right?

76
00:05:53.730 --> 00:05:58.218
I guess you'd have to worry about array or
index out of bounds, but

77
00:05:58.218 --> 00:06:00.156
that would be just about it.

78
00:06:04.008 --> 00:06:05.822
Okay, and then delete.

79
00:06:09.313 --> 00:06:13.264
This is where things get a little hairy.

80
00:06:13.264 --> 00:06:20.485
We're gonna say const
response = this.data[index].

81
00:06:23.023 --> 00:06:25.040
And then we'll return this at the end.

82
00:06:26.850 --> 00:06:29.670
You could also could just return true or
something like that.

83
00:06:29.670 --> 00:06:31.023
That's totally up to you.

84
00:06:31.023 --> 00:06:34.270
But here we're gonna have to
do something to delete this.

85
00:06:34.270 --> 00:06:36.337
So I'm gonna write a method
called collapsed two.

86
00:06:36.337 --> 00:06:40.000
So I'm gonna say this,
this collapsed to index,

87
00:06:40.000 --> 00:06:43.490
if you've never seen
the underscore leading,

88
00:06:43.490 --> 00:06:48.309
this is kind of how you symbolize
in JavaScript a private method.

89
00:06:48.309 --> 00:06:54.281
Since JavaScript until very recently
didn't have private methods.

90
00:06:54.281 --> 00:06:59.511
Technically, you can put up a pound

91
00:06:59.511 --> 00:07:04.350
here, And then you could say collapse to

92
00:07:11.123 --> 00:07:16.597
Yeah, so this actually is not enabled
right now in the in code sandbox and

93
00:07:16.597 --> 00:07:19.129
we're not gonna to go enable it.

94
00:07:19.129 --> 00:07:21.700
But that's how you would actually do
a real private method in JavaScript.

95
00:07:22.880 --> 00:07:26.138
Let's just replace that
with an underscore.

96
00:07:26.138 --> 00:07:28.291
Honestly, I like this better anyway,

97
00:07:28.291 --> 00:07:31.954
it allows me to mess with the function
which is kind of fun, right?

98
00:07:31.954 --> 00:07:35.130
It's fun to mess with the react
internals and stuff like that.

99
00:07:35.130 --> 00:07:38.110
But apparently they don't like it.

100
00:07:38.110 --> 00:07:39.460
[LAUGH] All right, so

101
00:07:39.460 --> 00:07:44.520
we're gonna have this method called
collapse to what it takes in an index.

102
00:07:44.520 --> 00:07:50.007
And we're gonna say for, let i=0.

103
00:07:51.958 --> 00:07:57.098
Sorry, let i=index rather i is

104
00:07:57.098 --> 00:08:03.272
less than the length i ++.

105
00:08:05.146 --> 00:08:09.317
Okay, and then we're gonna say

106
00:08:09.317 --> 00:08:13.961
this .data i = this .data i+1,

107
00:08:16.944 --> 00:08:21.471
Then we're gonna to eventually
say delete this .data,

108
00:08:21.471 --> 00:08:27.508
this .length -1 cuz we're eventually
gonna move that to kinda our we're

109
00:08:27.508 --> 00:08:34.044
removing the last one from the array and
then we're gonna say this.length--.

110
00:08:38.867 --> 00:08:43.215
So this is starting i at the index and
then from there until the end,

111
00:08:43.215 --> 00:08:47.560
we're going to shift everything
over to the left one.

112
00:08:47.560 --> 00:08:49.706
That's what this part does, this for loop,

113
00:08:49.706 --> 00:08:52.080
we're going to delete the one at the end,
right?

114
00:08:52.080 --> 00:08:54.880
And then we're going to
detriment the length.

115
00:08:57.363 --> 00:09:04.287
Okay, and that should be, Enough, I think
for us to pass the unit tests here.

116
00:09:07.331 --> 00:09:09.290
So if we go down to arrays.

117
00:09:10.492 --> 00:09:12.863
And I think I need to remove the skip,
I do.

118
00:09:18.056 --> 00:09:20.840
Let's see all messed up,
this.data is not a function.

119
00:09:22.132 --> 00:09:30.020
Yep, sorry, that should be square
brackets, not, Parentheses.

120
00:09:30.020 --> 00:09:30.660
Let's try that again.

121
00:09:30.660 --> 00:09:33.720
And there we go, passing the tests.

122
00:09:34.770 --> 00:09:38.125
I hope you gained a healthy
appreciation of what arrays do for you.

123
00:09:38.125 --> 00:09:41.139
[LAUGH] If nothing else,

124
00:09:41.139 --> 00:09:45.969
that's one good takeaway from this.

125
00:09:45.969 --> 00:09:51.110
The question is, could we technically
we use the delete method for pop?

126
00:09:51.110 --> 00:09:52.910
Yeah, I think that would
absolutely totally work.

127
00:09:52.910 --> 00:09:58.637
It's probably even as you just say this.

128
00:09:58.637 --> 00:10:03.815
Well, I guess you'd have to,

129
00:10:03.815 --> 00:10:07.998
yeah, return this start

130
00:10:07.998 --> 00:10:12.588
delete this .index -1.

131
00:10:12.588 --> 00:10:16.626
&gt;&gt; That's going to be
this dot length minus.

132
00:10:17.819 --> 00:10:25.075
Because of the length to be
the index rate, this .length .index

133
00:10:25.075 --> 00:10:30.195
&gt;&gt; Yeah sorry, not, yeah, length.

134
00:10:30.195 --> 00:10:32.810
And normally hold it does pass.

135
00:10:32.810 --> 00:10:36.770
Yep, so that's probably even better to
just reuse the logic that you have.

136
00:10:36.770 --> 00:10:39.500
&gt;&gt; Shouldn't it also have
a big function as well, or

137
00:10:39.500 --> 00:10:41.710
it's four different data structures?

138
00:10:43.010 --> 00:10:44.642
&gt;&gt; She does have a what as well?

139
00:10:44.642 --> 00:10:45.142
&gt;&gt; A peak.

140
00:10:46.470 --> 00:10:50.622
&gt;&gt; Yeah, I mean,
if we were implementing a truth stack,

141
00:10:50.622 --> 00:10:57.058
you would have a peak as well, which would
be basically this .length- 1, right?

142
00:10:57.058 --> 00:10:59.700
But we're not implementing a true stack.

143
00:10:59.700 --> 00:11:00.690
Did I say peak up here?

144
00:11:02.180 --> 00:11:05.660
Yeah, so, yeah, to be a real stack,
you would have peak as well.

145
00:11:07.330 --> 00:11:08.010
&gt;&gt; Good, thanks.

146
00:11:08.010 --> 00:11:08.510
&gt;&gt; Yep.

147
00:11:12.740 --> 00:11:14.108
Cool other questions?

148
00:11:19.664 --> 00:11:25.230
So takeaway here get really
great with the ArrayList.

149
00:11:25.230 --> 00:11:27.650
Delete kind of annoying.

150
00:11:27.650 --> 00:11:32.344
So if you have something that you're going
to be reading from and unnecessarily

151
00:11:32.344 --> 00:11:37.750
adding and removing a lot of things
from ArrayList, typically your best bet.

152
00:11:37.750 --> 00:11:41.951
Now, if we have something that's
going to be Written to and

153
00:11:41.951 --> 00:11:46.510
deleted from a whole lot but
not necessarily read from as much.

154
00:11:46.510 --> 00:11:48.826
There's another thing we can
use called LinkeLists and

155
00:11:48.826 --> 00:11:50.410
that's what we're going to do next.

