WEBVTT

1
00:00:00.227 --> 00:00:02.229
So let's go ahead and do the add first.

2
00:00:03.635 --> 00:00:09.284
So we're gonna say if, This.

3
00:00:09.284 --> 00:00:16.502
Or we'll say if value is
less than this dot value,

4
00:00:18.148 --> 00:00:21.247
Then we're gonna ask if
I have a left child.

5
00:00:21.247 --> 00:00:24.497
So if this dot left,

6
00:00:26.203 --> 00:00:31.279
Then we're gonna call this dot
left dot add with value and

7
00:00:31.279 --> 00:00:34.463
recursively go down the tree here.

8
00:00:34.463 --> 00:00:39.732
Else, This dot left

9
00:00:39.732 --> 00:00:45.834
equals new node, Value.

10
00:00:51.759 --> 00:00:55.925
Then here we need to adjust
the heights a little bit.

11
00:00:55.925 --> 00:01:01.304
So we're gonna say if no this dot right.

12
00:01:02.955 --> 00:01:08.126
Or this dot right dot height,

13
00:01:09.359 --> 00:01:12.618
Is less than this dot left,

14
00:01:13.924 --> 00:01:19.193
Dot height, Then we just need to make

15
00:01:19.193 --> 00:01:24.943
sure that say this dot height equals
this dot left dot height plus one.

16
00:01:28.074 --> 00:01:31.104
So if we're modifying
the height here as we're going,

17
00:01:31.104 --> 00:01:34.140
we wanna just make sure that
we're updating it as we go.

18
00:01:34.140 --> 00:01:37.897
And we're gonna have the mere logic in
the else but just for the other side.

19
00:01:39.797 --> 00:01:42.223
So this is go left.

20
00:01:43.289 --> 00:01:47.307
And this is go right.

21
00:01:47.307 --> 00:01:51.643
So we're gonna say if this dot right,

22
00:01:51.643 --> 00:01:56.935
we're gonna say this dot
right dot add value.

23
00:01:58.446 --> 00:02:06.853
Else this dot right equals
new node with value.

24
00:02:06.853 --> 00:02:09.263
And same logic here.

25
00:02:09.263 --> 00:02:14.447
If this dot left, Or

26
00:02:14.447 --> 00:02:19.172
this dot right dot height is greater

27
00:02:19.172 --> 00:02:23.803
than this dot left dot height.

28
00:02:23.803 --> 00:02:27.994
Then we just wanna make
sure that we say this dot

29
00:02:27.994 --> 00:02:32.515
height equals this dot
right dot height plus one.

30
00:02:35.966 --> 00:02:38.250
So that's all of the add right there.

31
00:02:38.250 --> 00:02:39.620
As you can see here it looks.

32
00:02:40.840 --> 00:02:45.735
This is basically just a BST add done
recursively with the addition of we're

33
00:02:45.735 --> 00:02:49.160
worrying about adding heights at the end.

34
00:02:49.160 --> 00:02:53.599
Otherwise this is exactly
the same as the idea of adding

35
00:02:53.599 --> 00:02:55.926
an add to a BST recursively.

36
00:02:55.926 --> 00:02:58.618
With the only difference being here
that we call balance down here.

37
00:03:01.453 --> 00:03:02.325
Okay?

38
00:03:06.367 --> 00:03:07.717
I'm just gonna delete all this.

39
00:03:09.433 --> 00:03:13.932
So the first thing we're
gonna do in balance is say

40
00:03:13.932 --> 00:03:18.226
const right height is
assigned this dot right.

41
00:03:18.226 --> 00:03:22.943
If we have one,
then this dot right dot height.

42
00:03:22.943 --> 00:03:30.454
Otherwise it's zero const left height is
assigned this dot left if we have one.

43
00:03:30.454 --> 00:03:36.960
It's gonna be this dot left dot height,
Or zero.

44
00:03:40.718 --> 00:03:48.179
So we're gonna say if left height is
greater than right height plus one.

45
00:03:48.179 --> 00:03:51.127
Meaning that there are two different,
right?

46
00:03:53.416 --> 00:03:56.100
There we're gonna say const.

47
00:03:56.100 --> 00:04:01.174
This is the part where we need to check
if we need to do a double rotation.

48
00:04:01.174 --> 00:04:03.088
So, bear with me for a second.

49
00:04:03.088 --> 00:04:07.875
We're gonna say const left right height

50
00:04:07.875 --> 00:04:12.245
is assigned this dot left dot right.

51
00:04:12.245 --> 00:04:19.848
If that exists, then we're gonna say this
dot left dot right dot height or zero.

52
00:04:24.540 --> 00:04:29.070
Same thing here for left,
left, height const.

53
00:04:30.560 --> 00:04:34.450
Left, left, height is assigned.

54
00:04:34.450 --> 00:04:36.190
This dot left dot left.

55
00:04:37.960 --> 00:04:42.060
And if that exists, then we say
you could also do a what is it?

56
00:04:42.060 --> 00:04:46.111
Nullish selectors I think
that's what they're called.

57
00:04:46.111 --> 00:04:48.542
No, I'm thinking the wrong thing.

58
00:04:48.542 --> 00:04:54.178
Where you just say,
question mark like this.

59
00:04:54.178 --> 00:04:56.169
Can't remember the name of that feature,
anyway.

60
00:04:56.169 --> 00:04:59.380
&gt;&gt; I believe it's called
[INAUDIBLE] stuff like that.

61
00:05:00.450 --> 00:05:02.310
&gt;&gt; Null coalescing, that sounds right.

62
00:05:02.310 --> 00:05:04.849
I believe you [LAUGH].

63
00:05:06.538 --> 00:05:09.490
But I don't think that's enabled in
Code Sandbox right now by default.

64
00:05:09.490 --> 00:05:10.707
So we're just gonna do it this way.

65
00:05:10.707 --> 00:05:16.450
Dot left dot height or zero.

66
00:05:16.450 --> 00:05:19.504
Now we can check if
this is basically bent.

67
00:05:19.504 --> 00:05:23.301
If it's bent,
then we're gonna do a rotation.

68
00:05:23.301 --> 00:05:26.623
So what we need to say here is if,

69
00:05:27.965 --> 00:05:35.233
Left right height is greater
than left left height,

70
00:05:35.233 --> 00:05:40.524
then we do this dot left dot rotate RR.

71
00:05:42.933 --> 00:05:46.932
So this is a double rotation here.

72
00:05:49.546 --> 00:05:54.032
If it's not,
then we just skip that part and

73
00:05:54.032 --> 00:05:57.200
we just say this dot rotate LL.

74
00:06:04.633 --> 00:06:09.962
So if we need to double rotation on the
left child we'll rotate to the right or

75
00:06:09.962 --> 00:06:11.140
from the right.

76
00:06:11.140 --> 00:06:15.525
And otherwise, and no matter what,
if we're inside of this block,

77
00:06:15.525 --> 00:06:18.865
we're always going to rotate
LL on the node itself.

78
00:06:21.122 --> 00:06:26.365
Here we're gonna say else if, Right

79
00:06:26.365 --> 00:06:31.821
height is greater than
left height plus one.

80
00:06:31.821 --> 00:06:35.122
Then we need to do a rotation.

81
00:06:35.122 --> 00:06:40.727
And same thing here, const right

82
00:06:40.727 --> 00:06:47.539
right height is equal to this dot right,

83
00:06:49.816 --> 00:06:57.518
Dot right this dot right dot height,
Or zero.

84
00:06:59.995 --> 00:07:07.841
Then const right left height is
assigned this dot right dot left.

85
00:07:12.203 --> 00:07:21.085
We'll say this dot right dot
left dot height, Or zero.

86
00:07:22.896 --> 00:07:31.623
Then if, Right left height,

87
00:07:31.623 --> 00:07:35.114
Is greater than right right height.

88
00:07:37.608 --> 00:07:44.050
Then we're gonna say this
dot right dot rotate LL.

89
00:07:46.109 --> 00:07:50.581
And then this dot rotate RR.

90
00:07:55.431 --> 00:07:58.797
This is a double rotation.

91
00:08:06.047 --> 00:08:11.324
So this is the all of the logic for
balancing that we run on on the node.

92
00:08:13.672 --> 00:08:18.106
Now we just need to go
program these two functions.

93
00:08:18.106 --> 00:08:20.766
Rotate LL and rotate RR.

94
00:08:20.766 --> 00:08:23.293
But the nice thing notice again,

95
00:08:23.293 --> 00:08:27.995
this logic and this logic,
it's the same function, right?

96
00:08:27.995 --> 00:08:31.171
Still works the same way.

97
00:08:31.171 --> 00:08:34.578
Which is nice, we don't have to code
four different ways of doing rotations.

98
00:08:34.578 --> 00:08:37.620
It's just two ways of doing rotations and
sometimes we do it twice.

99
00:08:40.717 --> 00:08:47.111
All right, this is gonna be fun,
let's do rotate RR first.

100
00:08:53.451 --> 00:08:58.190
So we're gonna say const value
before is assigned this dot value.

101
00:08:59.700 --> 00:09:05.420
Const left before is
assigned this dot left.

102
00:09:05.420 --> 00:09:12.334
This dot value is assigned
this dot right dot value.

103
00:09:12.334 --> 00:09:19.346
This dot left, Is assigned this dot right.

104
00:09:21.081 --> 00:09:25.610
This dot right is assigned
this dot right dot right.

105
00:09:25.610 --> 00:09:28.272
If you're looking at this thing
like how do I know how to do this?

106
00:09:28.272 --> 00:09:30.235
I looked it up [LAUGH].

107
00:09:30.235 --> 00:09:33.067
I can't remember this from memory.

108
00:09:36.516 --> 00:09:42.518
This dot left, Dot right.

109
00:09:42.518 --> 00:09:45.297
Well that's nice for the sandbox.

110
00:09:46.942 --> 00:09:49.306
There we go.

111
00:09:50.703 --> 00:09:54.001
This dot left is assigned this dot right,

112
00:09:54.001 --> 00:09:58.147
this dot right is assigned
this dot right dot right,

113
00:09:58.147 --> 00:10:02.778
this dot left dot right is
assigned this dot left dot left.

114
00:10:02.778 --> 00:10:08.251
This dot left dot left
is assigned left before.

115
00:10:10.544 --> 00:10:18.326
This dot left dot value
is assigned value before.

116
00:10:18.326 --> 00:10:23.993
This dot left dot update in new location.

117
00:10:23.993 --> 00:10:28.401
This dot update in new location
which I already had down there.

118
00:10:34.038 --> 00:10:36.975
Make sure I got that right, this top left.

119
00:10:36.975 --> 00:10:38.325
So I actually had these backwards.

120
00:10:38.325 --> 00:10:40.460
I did, sorry about that.

121
00:10:48.313 --> 00:10:49.358
Cool.

122
00:10:51.636 --> 00:10:54.434
So that is a right rotation.

123
00:10:55.693 --> 00:10:57.155
And now the nice thing,

124
00:10:57.155 --> 00:11:01.559
that left rotation is just the exact
mere opposite of what we did there.

125
00:11:02.696 --> 00:11:09.177
So const value before is
assigned this dot value.

126
00:11:10.695 --> 00:11:16.361
Const right before is
assigned this dot right.

127
00:11:16.361 --> 00:11:19.593
This dot value is assigned this dot value.

128
00:11:19.593 --> 00:11:23.441
Sorry, this dot left dot value,
left dot value.

129
00:11:25.476 --> 00:11:29.346
This dot right is assigned this dot left.

130
00:11:30.837 --> 00:11:37.172
This dot left is assigned
this dot left dot left.

131
00:11:37.172 --> 00:11:44.977
This dot right dot left is
assigned this dot right dot right.

132
00:11:48.701 --> 00:11:53.014
This dot right dot right
is equal to right before.

133
00:11:56.383 --> 00:12:00.550
This dot right dot value
equals value before.

134
00:12:04.759 --> 00:12:09.311
And then this dot right dot update new
location and this dot update new location.

135
00:12:09.311 --> 00:12:14.207
Cool, so those are the two rotations.

136
00:12:18.248 --> 00:12:23.290
Now we're just gonna do the update
new location and then we are golden.

137
00:12:23.290 --> 00:12:29.417
So if this dot right, And

138
00:12:29.417 --> 00:12:35.314
this dot left meaning there
are no children for this.

139
00:12:36.475 --> 00:12:42.702
Then this dot height is equal to one.

140
00:12:42.702 --> 00:12:50.271
Else if, This dot right.

141
00:12:52.439 --> 00:12:57.631
Or, This dot left and

142
00:12:57.631 --> 00:13:02.157
this dot right dot height,

143
00:13:03.173 --> 00:13:07.805
Is less than this dot left dot height.

144
00:13:10.236 --> 00:13:16.537
So again, if I don't have a right child or
I do have a left child.

145
00:13:16.537 --> 00:13:21.454
And the right height is less
than the left height which

146
00:13:21.454 --> 00:13:26.164
means that we need to take
the height from the left.

147
00:13:26.164 --> 00:13:30.704
Yep, then we're gonna
say this dot height is

148
00:13:30.704 --> 00:13:35.136
assigned this dot left
dot height plus one.

149
00:13:35.136 --> 00:13:36.464
Because we rotated it and

150
00:13:36.464 --> 00:13:40.716
now the height needs to be adjusted to
whatever the left height's rotation is.

151
00:13:40.716 --> 00:13:48.705
So the left's height plus one is right
because it's the parent of the child.

152
00:13:48.705 --> 00:13:53.018
Else, otherwise we can just
say this dot height is

153
00:13:53.018 --> 00:13:56.929
assigned this dot right
dot height plus one.

154
00:13:59.115 --> 00:14:01.733
So basically what we're saying,

155
00:14:01.733 --> 00:14:06.162
if this is a leaf node aka has
no children its height is one.

156
00:14:06.162 --> 00:14:12.018
If the left child has the greater height,
then use its height and add one.

157
00:14:12.018 --> 00:14:19.307
Otherwise use the right child and
add one to its height.

158
00:14:20.633 --> 00:14:25.541
Right, because the height is always gonna

159
00:14:25.541 --> 00:14:29.775
be one more than one of its children.

160
00:14:33.783 --> 00:14:37.051
That was a little bit of code [LAUGH].

161
00:14:37.051 --> 00:14:40.370
Hopefully you stuck with me.

162
00:14:40.370 --> 00:14:45.011
Let's see if our AVL tree

163
00:14:45.011 --> 00:14:50.541
actually passes unit tests.

164
00:14:52.386 --> 00:14:56.480
Let's click play.

165
00:14:56.480 --> 00:14:59.616
AVL test is now passing.

166
00:15:01.049 --> 00:15:08.382
Cool, I was very afraid it
wasn't going to [LAUGH].

167
00:15:08.382 --> 00:15:10.558
So I'll take questions
here in just a second.

168
00:15:10.558 --> 00:15:14.124
But I wanna show you because I
think this is the coolest part.

169
00:15:14.124 --> 00:15:17.094
We're gonna copy and
paste this tree into our tree visualizer.

170
00:15:24.051 --> 00:15:29.992
Save it, I'm gonna pop over to our
browser and look at our tree visualizer.

171
00:15:32.847 --> 00:15:35.393
Look how flat this tree is.

172
00:15:38.447 --> 00:15:39.937
How cool is that, right?

173
00:15:39.937 --> 00:15:41.855
It's super flat.

174
00:15:44.999 --> 00:15:46.944
So we have max depth of 12.

175
00:15:46.944 --> 00:15:49.377
And how many things are we
adding to it right now?

176
00:15:49.377 --> 00:15:54.000
950 items in the array, or
sorry that we're adding all at once.

177
00:15:55.210 --> 00:15:57.811
That's unbelievable.

178
00:15:57.811 --> 00:16:02.451
So that means despite the fact that
we have 950 things in our tree,

179
00:16:02.451 --> 00:16:04.374
at most, we have 12 hops.

180
00:16:04.374 --> 00:16:07.153
So that means we can
find data really quickly.

181
00:16:07.153 --> 00:16:09.836
So let's take a look at this as well.

182
00:16:09.836 --> 00:16:15.847
Now you can see,
if we're adding 100 things, And

183
00:16:15.847 --> 00:16:21.600
we're adding them in order,
This makes a very flat tree.

184
00:16:21.600 --> 00:16:26.253
So we kind of do away with that problem
that we had before where it's super bent.

185
00:16:26.253 --> 00:16:29.891
Or sorry, not super bent,
but it's super straight.

186
00:16:29.891 --> 00:16:33.678
So that's pretty cool too.

187
00:16:33.678 --> 00:16:36.935
I'm just gonna add 9,500 here,
see what happens.

188
00:16:36.935 --> 00:16:39.320
It's probably gonna take a second.

189
00:16:40.860 --> 00:16:46.304
So I went from 950 to
9,500 items in my tree.

190
00:16:46.304 --> 00:16:49.460
And now at most I have 16 hops to
find the item I'm looking for.

191
00:16:50.820 --> 00:16:52.490
Again, I think that's really cool.

192
00:16:53.550 --> 00:16:55.430
Maybe I just have a warped
sense of what's cool [LAUGH].

