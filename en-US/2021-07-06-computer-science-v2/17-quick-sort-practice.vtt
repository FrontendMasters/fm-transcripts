WEBVTT

1
00:00:00.820 --> 00:00:05.770
I want to give you a shot to go do this,
so

2
00:00:05.770 --> 00:00:11.620
we're gonna pop back
over to quick sort here,

3
00:00:11.620 --> 00:00:15.220
quick sort, okay, and so,

4
00:00:15.220 --> 00:00:21.150
here we're gonna say base case, right?

5
00:00:21.150 --> 00:00:26.523
So what is base case, array of length
zero or one in this particular case,

6
00:00:26.523 --> 00:00:30.870
we actually will see lots of
arrays of length zero, right?

7
00:00:30.870 --> 00:00:32.608
Because if there's nothing
in the left array,

8
00:00:32.608 --> 00:00:35.173
we're going to call quick sort on that,
and we need to handle that, so

9
00:00:35.173 --> 00:00:37.356
make sure you're providing for
length zero or length one.

10
00:00:39.558 --> 00:00:40.453
Choose pivot.

11
00:00:42.985 --> 00:00:47.081
Here we're gonna separate into left and
right arrays.

12
00:00:50.889 --> 00:00:51.847
Call quick sort.

13
00:00:57.139 --> 00:00:58.081
On, left and right arrays.

14
00:01:01.460 --> 00:01:03.069
Return, Left.

15
00:01:06.488 --> 00:01:09.556
Can cat, Pivot, great.

16
00:01:13.928 --> 00:01:17.224
That's it, that's the whole thing.

17
00:01:18.989 --> 00:01:22.935
Probably, I might have diagrammed
that a little too out for you, but

18
00:01:22.935 --> 00:01:25.044
everyone can use a wind today [LAUGH] so

19
00:01:25.044 --> 00:01:28.599
I'm gonna give you 15 minutes
to go ahead and get this done.

20
00:01:29.690 --> 00:01:33.377
And then you and I are gonna come back and
do this together,

21
00:01:33.377 --> 00:01:36.688
and again make sure you move
test out skip there, and

22
00:01:36.688 --> 00:01:41.090
yeah again this sorting visualizer
is not gonna help you with this.

23
00:01:41.090 --> 00:01:45.265
So the question is this,
if I have duplicate in my array, so

24
00:01:45.265 --> 00:01:50.274
if I have five and my pivot is five does
the duplicate five go on the left or

25
00:01:50.274 --> 00:01:52.000
does it go on the right?

26
00:01:52.000 --> 00:01:57.934
And the answer is, doesn't matter, because
it's gonna get sorted either way and

27
00:01:57.934 --> 00:02:03.410
I don't believe quicksort is stable,
off top my head have to look.

28
00:02:03.410 --> 00:02:08.102
But in any case, in general with those
kind of calls, it's just be consistent,

29
00:02:08.102 --> 00:02:12.725
so, if it's gonna go left always put in
the left, if it's gonna go right always

30
00:02:12.725 --> 00:02:16.050
put it in the right, but
in the end it just be consistent.

31
00:02:22.526 --> 00:02:26.840
Let's go ahead and go through this, so

32
00:02:26.840 --> 00:02:32.461
base case here,
if nums style length is less than or

33
00:02:32.461 --> 00:02:37.064
equal to one, then you just return nums.

34
00:02:40.632 --> 00:02:46.236
Okay, gonna choose a pivot,
and in our case,

35
00:02:46.236 --> 00:02:52.416
we're just always going to
go with the last one, so

36
00:02:52.416 --> 00:02:58.915
const pivot equals nums of
nums dot length minus one.

37
00:03:03.175 --> 00:03:05.622
So that's gonna be our pivot.

38
00:03:08.274 --> 00:03:11.876
And we'll separate into left and
right arrays, so

39
00:03:11.876 --> 00:03:17.673
we're gonna say const left equals empty
array, const right equals empty array.

40
00:03:20.732 --> 00:03:27.299
And then we're gonna say,
four let I equals zero,

41
00:03:27.299 --> 00:03:32.491
I is less than nums dot length minus one,

42
00:03:32.491 --> 00:03:37.072
cuz the pivot is the last number, so

43
00:03:37.072 --> 00:03:43.523
we don't wanna capture that one,
I plus, plus.

44
00:03:46.928 --> 00:03:53.980
And we're gonna say if nums
of I is less than pivot.

45
00:03:56.130 --> 00:04:01.273
Then we're going to say left dot

46
00:04:01.273 --> 00:04:06.416
push nums of I else, all right,

47
00:04:06.416 --> 00:04:10.987
dot push nums of I, okay, so

48
00:04:10.987 --> 00:04:16.892
now we have a pivot we have a left array

49
00:04:16.892 --> 00:04:23.387
which contains everything is smaller.

50
00:04:23.387 --> 00:04:28.360
We have a right array which contains

51
00:04:28.360 --> 00:04:32.836
everything that's larger, so

52
00:04:32.836 --> 00:04:40.460
we can say const sorted left,
equals quick sort left,

53
00:04:40.460 --> 00:04:46.777
const sorted right
equals quick Sort right.

54
00:04:53.699 --> 00:04:58.258
And then I actually think that's just
straight up valid JavaScript, so

55
00:04:58.258 --> 00:05:02.890
I think you can just say that, this
would actually have to be sorted left,

56
00:05:02.890 --> 00:05:04.929
sorted left, sorted, right.

57
00:05:13.479 --> 00:05:19.528
That works, after I wrote the skip,
and quick sort,

58
00:05:19.528 --> 00:05:24.100
do right, there it is, so pivots fine,

59
00:05:24.100 --> 00:05:29.479
even though this is just
a number concat is smart

60
00:05:29.479 --> 00:05:34.730
enough to say it's like
this is just a number.

61
00:05:34.730 --> 00:05:37.340
It's not an array, so I'm just going
to insert this as an item in the array.

62
00:05:37.340 --> 00:05:42.536
If you look to my course notes, I actually

63
00:05:42.536 --> 00:05:47.879
combined two these three
lines into one and

64
00:05:47.879 --> 00:05:53.074
I said return dot dot dot quick sort left,

65
00:05:53.074 --> 00:05:59.030
pivot dot dot dot quicksort right,
like this.

66
00:06:00.350 --> 00:06:04.718
This should work as well, but
let's just make sure quick, so

67
00:06:04.718 --> 00:06:11.150
where are you right there, click play, and
you can see there that also works as well.

68
00:06:11.150 --> 00:06:15.293
This is called the spread operator,
it's new as of yes five, so

69
00:06:15.293 --> 00:06:19.667
I think it's actually like six
years old now, this is saying like,

70
00:06:19.667 --> 00:06:24.080
this is an array please spread this
out over this new array, right?

71
00:06:25.210 --> 00:06:28.230
But this line and
this line end up being equivalent.

