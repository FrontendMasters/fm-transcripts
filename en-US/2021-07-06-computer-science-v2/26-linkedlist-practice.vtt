WEBVTT

1
00:00:00.164 --> 00:00:04.618
Let's do some searching, soul searching.

2
00:00:04.618 --> 00:00:08.005
I'm gonna change linearSearch
to be called soulSearch instead.

3
00:00:08.005 --> 00:00:08.526
Just kidding.

4
00:00:08.526 --> 00:00:11.620
Let's just do this
linearSearch really quick.

5
00:00:11.620 --> 00:00:16.507
It's just one really simple for

6
00:00:16.507 --> 00:00:20.130
loop here, let i = 0.

7
00:00:20.130 --> 00:00:22.887
And there's just a trillion
different ways you could do this.

8
00:00:22.887 --> 00:00:27.447
I'm gonna do with a for loop because
we've been doing that the whole time.

9
00:00:27.447 --> 00:00:33.014
But you absolutely could
have done a reduce,

10
00:00:33.014 --> 00:00:38.983
a filter, for each, Something like that.

11
00:00:38.983 --> 00:00:40.029
Anyone of those would have been fine.

12
00:00:40.029 --> 00:00:48.094
If id === array i.id,

13
00:00:48.094 --> 00:00:54.699
then return array i.

14
00:00:54.699 --> 00:01:00.238
Otherwise, you can return null,
you can return undefined.

15
00:01:00.238 --> 00:01:05.280
I'm gonna do return void 0,
which is undefined, right?

16
00:01:08.045 --> 00:01:13.941
Okay, so here we do that, remove the skip.

17
00:01:13.941 --> 00:01:16.368
Take a look at the tests.

18
00:01:16.368 --> 00:01:17.340
Run them again.

19
00:01:17.340 --> 00:01:20.653
We should here on search.

20
00:01:20.653 --> 00:01:26.416
So far so good, nothing broken, cool.

21
00:01:26.416 --> 00:01:27.577
binarySearch here.

22
00:01:27.577 --> 00:01:32.331
Let's do let min = 0.

23
00:01:35.646 --> 00:01:40.018
Let max = array.length- 1.

24
00:01:40.018 --> 00:01:44.496
Again, array here by definition
must be a sorted array or

25
00:01:44.496 --> 00:01:47.304
binarySearch is not going to work.

26
00:01:47.304 --> 00:01:54.299
Whereas, linearSearch here, it can
be done on any array, sorted or not.

27
00:01:54.299 --> 00:01:57.335
Okay, let index, let element.

28
00:02:00.571 --> 00:02:08.719
Okay, and then you're gonna say while
min is less than or equal to max,

29
00:02:11.746 --> 00:02:15.543
Index is going to be equal to math.floor,

30
00:02:19.474 --> 00:02:22.811
And here we're gonna say (min + max) / 2.

31
00:02:25.359 --> 00:02:30.741
So again, we're kind of just
moving halfway between these.

32
00:02:30.741 --> 00:02:37.109
That's what this index is,
the math.floor((min + max) / 2 equals.

33
00:02:37.109 --> 00:02:40.928
And then we're gonna say element,

34
00:02:40.928 --> 00:02:46.537
at that particular array,
is equal to array index.

35
00:02:46.537 --> 00:02:49.663
So this is whatever the element is here.

36
00:02:49.663 --> 00:02:56.147
So we're gonna say here if
element.id is greater than id,

37
00:02:59.576 --> 00:03:05.159
Then min is going to
be equal to index + 1.

38
00:03:05.159 --> 00:03:09.569
So that we're setting the minimum

39
00:03:09.569 --> 00:03:14.587
index to be 1 greater than the elements

40
00:03:14.587 --> 00:03:19.613
that we were just looking for, right?

41
00:03:19.613 --> 00:03:23.747
Or so the element that we were just
looking at rather, not looking for.

42
00:03:23.747 --> 00:03:28.560
Else if element.id is greater than id,

43
00:03:28.560 --> 00:03:36.075
then max is going to be equal to
index- 1 as you might imagine.

44
00:03:36.075 --> 00:03:40.202
So if the item that we're looking
at is greater than the thing that

45
00:03:40.202 --> 00:03:44.868
we're looking for, then we're going
to move the max one underneath it.

46
00:03:47.916 --> 00:03:52.135
So if it's not less than,
and it's not greater than,

47
00:03:52.135 --> 00:03:56.264
then that means by definition,
it's that, right,

48
00:03:56.264 --> 00:04:00.703
we found the thing,
in which case we say return element.

49
00:04:04.345 --> 00:04:09.591
Okay, so if it's in the array,
this logic will find it.

50
00:04:09.591 --> 00:04:13.634
If this while loop breaks, which means
that the max and the min overlap.

51
00:04:13.634 --> 00:04:17.654
That means we have looked at the entire
array and we did not find it.

52
00:04:17.654 --> 00:04:20.883
At which case you can return null,
return void 0.

53
00:04:20.883 --> 00:04:24.498
I like undefined because it just
means that that's not there, right?

54
00:04:24.498 --> 00:04:27.539
You technically could have
something that's null in the array.

55
00:04:27.539 --> 00:04:30.403
But again, we're splitting hairs.

56
00:04:30.403 --> 00:04:34.585
It depends on the semantics you want
to assign to undefined or null.

57
00:04:36.261 --> 00:04:38.388
But I think actually
undefined is a better answer.

58
00:04:38.388 --> 00:04:41.005
So let's just go with that.

59
00:04:41.005 --> 00:04:43.938
Okay, so that should do that.

60
00:04:43.938 --> 00:04:49.525
Let's go ahead and remove this and
see if our tests pass.

61
00:04:52.596 --> 00:04:58.027
And looking down here at search,
search.test.js, looks like it works.

62
00:05:03.321 --> 00:05:08.571
All right, so the first thing
on push that we're gonna do,

63
00:05:08.571 --> 00:05:14.358
we're gonna say const node = new node,
with the value, right?

64
00:05:14.358 --> 00:05:18.191
I wanna say this.length++.

65
00:05:18.191 --> 00:05:23.240
I wanna say if I don't have a head,
this.head,

66
00:05:23.240 --> 00:05:27.682
then we're gonna say this.head = node.

67
00:05:27.682 --> 00:05:35.569
Otherwise, simply we'll just
say this.tail.next = node.

68
00:05:35.569 --> 00:05:37.457
And this.tail,

69
00:05:44.320 --> 00:05:46.420
= node, right?

70
00:05:46.420 --> 00:05:51.234
So the idea here is no matter what,
whatever you're pushing on a list is

71
00:05:51.234 --> 00:05:55.023
definitely gonna be the last
item in the array, right?

72
00:05:55.023 --> 00:06:00.316
So this.tail is always gonna be
assigned the new node no matter what.

73
00:06:00.316 --> 00:06:03.152
If you're pushing in a new head, or sorry,

74
00:06:03.152 --> 00:06:07.769
if you're pushing into an empty list,
it's also going to be the head.

75
00:06:07.769 --> 00:06:11.120
Otherwise, the tail.next is
gonna be the node, right?

76
00:06:11.120 --> 00:06:16.251
And then again here at the bottom,
we're always

77
00:06:16.251 --> 00:06:21.516
going to assign the tail
to be the new node, okay?

78
00:06:21.516 --> 00:06:26.232
Pop, we're just gonna
do return this.delete,

79
00:06:28.870 --> 00:06:31.756
This.length- 1, right?

80
00:06:31.756 --> 00:06:34.936
And then we'll code up the delete
here in just a second.

81
00:06:34.936 --> 00:06:40.835
For the find, we're just gonna
say if index is greater than or

82
00:06:40.835 --> 00:06:45.380
equal to this.length, return null, right?

83
00:06:45.380 --> 00:06:49.468
So if you try and find something that's
out of bounds, just return nothing.

84
00:06:49.468 --> 00:06:53.084
Otherwise, let current = this.head.

85
00:06:54.572 --> 00:07:00.660
Then we'll do a for
loop here, for let i = 0,

86
00:07:00.660 --> 00:07:05.514
i is less than or equal to index- 1.

87
00:07:05.514 --> 00:07:10.631
And then i++, and we're just
gonna say current = current.next.

88
00:07:10.631 --> 00:07:15.386
And we'll just kind of be
looping through all of those

89
00:07:15.386 --> 00:07:19.412
nodes until we arrive on
the one that we want.

90
00:07:19.412 --> 00:07:21.930
And then at the bottom,
we'll return current.

91
00:07:21.930 --> 00:07:25.987
So this is just gonna be an internal
find sort of method here so

92
00:07:25.987 --> 00:07:27.589
that we can find nodes.

93
00:07:27.589 --> 00:07:31.375
We never wanna return nodes directly to
the consumer of this linked list cuz they

94
00:07:31.375 --> 00:07:33.421
wouldn't know what to do with it, right?

95
00:07:33.421 --> 00:07:34.929
This is an internal data structure here.

96
00:07:34.929 --> 00:07:40.336
Forget, We're

97
00:07:40.336 --> 00:07:45.194
just gonna say const node =

98
00:07:45.194 --> 00:07:50.058
this._find(index).

99
00:07:50.058 --> 00:07:55.720
And here we can say if
there's no node here,

100
00:07:55.720 --> 00:07:58.481
then return void 0.

101
00:07:58.481 --> 00:08:04.717
If you wanna return undefined,
otherwise return node.value.

102
00:08:04.717 --> 00:08:08.655
So that's the get, pretty straightforward.

103
00:08:08.655 --> 00:08:12.006
And then delete is where things tend
to get a little bit more hairy.

104
00:08:12.006 --> 00:08:17.517
So the first thing we wanna do is we want
to handle if they try and delete the head.

105
00:08:17.517 --> 00:08:22.070
So if index === 0,
then we need to handle that specifically.

106
00:08:22.070 --> 00:08:25.972
So const head = this.head.

107
00:08:25.972 --> 00:08:27.543
And we're gonna say if head.

108
00:08:27.543 --> 00:08:34.749
Then we're gonna say
this.head = head.next.

109
00:08:41.398 --> 00:08:45.451
Otherwise, we're gonna
say this.head = null,

110
00:08:45.451 --> 00:08:50.539
because we need to handle it differently,
if it's the only item

111
00:08:50.539 --> 00:08:55.455
in the array versus it's just
the head of a long list, right?

112
00:08:55.455 --> 00:08:57.641
That's what this is doing here.

113
00:08:59.783 --> 00:09:05.150
And then here underneath that,
we'll just say

114
00:09:05.150 --> 00:09:10.258
this.length -- and return head.value.

115
00:09:10.258 --> 00:09:15.046
So that handles it if we're
trying to delete the head.

116
00:09:15.046 --> 00:09:22.966
Otherwise, we need to say const
node = this._find(index- 1), right?

117
00:09:22.966 --> 00:09:27.564
So this is gonna find the node previous
to the one that we wanna delete.

118
00:09:27.564 --> 00:09:33.061
We're gonna say const excise,
as in the node that we wanna cut out,

119
00:09:33.061 --> 00:09:36.442
is gonna be equal to node.next, right?

120
00:09:36.442 --> 00:09:40.640
Then we're gonna say if there's no excise,

121
00:09:42.380 --> 00:09:46.713
Then here you could throw an error or
something like that, we can return void 0.

122
00:09:46.713 --> 00:09:49.480
You can do it if you want,
I returned null.

123
00:09:49.480 --> 00:09:51.680
Depends on what kinda semantics
you wanna assign to it.

124
00:09:51.680 --> 00:09:57.924
Then we're gonna say
node.next = excise.next.

125
00:09:57.924 --> 00:10:04.394
I'm gonna say if there's no node.next,

126
00:10:04.394 --> 00:10:09.433
then this.tail = node.next.

127
00:10:15.171 --> 00:10:20.358
And this.length --, And

128
00:10:20.358 --> 00:10:24.060
return excise.value.

129
00:10:27.763 --> 00:10:32.370
Okay, so
let's see if that passes our tests.

130
00:10:32.370 --> 00:10:34.445
And it does, looks great.

131
00:10:37.350 --> 00:10:41.981
So again, this is kind of where linked
list fall down, is that anytime you

132
00:10:41.981 --> 00:10:46.014
wanna do a look up, you have to
loop through everything to try and

133
00:10:46.014 --> 00:10:51.193
find the thing that you're looking for,
which is not necessarily always ideal.

134
00:10:51.193 --> 00:10:54.454
But this is where it's kinda really great,
is these deletes.

135
00:10:54.454 --> 00:10:58.789
Despite the fact that this code
is kinda not fun to look at,

136
00:10:58.789 --> 00:11:01.097
it's constant time, right?

137
00:11:01.097 --> 00:11:04.106
All you got to do is move
the pointer from here to here.

138
00:11:04.106 --> 00:11:05.937
And it's just pointing at a new node.

139
00:11:05.937 --> 00:11:09.473
And we don't have to shift our
entire array over like we had to do

140
00:11:09.473 --> 00:11:10.485
with array list.

141
00:11:12.700 --> 00:11:18.560
Okay, so, questions about linked lists.

142
00:11:18.560 --> 00:11:22.443
&gt;&gt; So just a question on line 48.

143
00:11:24.297 --> 00:11:31.634
So, why is there index- 1,
less than or equal to index- 1.

144
00:11:31.634 --> 00:11:37.921
Why can't we do i less than index?

145
00:11:37.921 --> 00:11:39.849
&gt;&gt; Cuz that's what's correct.

146
00:11:39.849 --> 00:11:43.052
[LAUGH] I mean, we can look here.

147
00:11:43.052 --> 00:11:44.752
&gt;&gt; I'm just thinking,
what's the difference, right?

148
00:11:44.752 --> 00:11:52.232
i less than index or
i less than or equal to index- 1.

149
00:11:52.232 --> 00:11:54.860
&gt;&gt; I think it's just
because we need to find,

150
00:11:54.860 --> 00:11:58.080
that's the way that those
nodes had been numbered.

151
00:11:58.080 --> 00:12:05.167
I guess you could restructure it so
that the indexes would be different.

152
00:12:05.167 --> 00:12:09.939
Like which index refers to which node,
because it all

153
00:12:09.939 --> 00:12:14.830
depends on what kind of
semantic value assigned to it.

154
00:12:14.830 --> 00:12:20.153
But yeah, I think that's the one that
we'll find the correct one cuz we're just

155
00:12:20.153 --> 00:12:25.567
looping through all these currents until
we find the one that we're looking for.

156
00:12:25.567 --> 00:12:29.446
&gt;&gt; I think what she's saying you can
remove -1, if you remove less than or

157
00:12:29.446 --> 00:12:31.650
equal, if you just make it less than.

158
00:12:31.650 --> 00:12:34.494
&gt;&gt; I got you.
I see what you're saying.

159
00:12:34.494 --> 00:12:36.352
&gt;&gt; Yeah, that's what I meant.

160
00:12:36.352 --> 00:12:39.578
&gt;&gt; Totally.

161
00:12:39.578 --> 00:12:43.974
&gt;&gt; Yeah, and
the other question is, in line 65,

162
00:12:43.974 --> 00:12:50.853
we are making a head-tail model,
but we are not making the tail to.

163
00:12:52.873 --> 00:12:58.908
&gt;&gt; This is true, Yep,

164
00:12:58.908 --> 00:13:04.146
that would have been a bug,
so that's correct.

165
00:13:07.089 --> 00:13:08.054
Good call.

166
00:13:11.060 --> 00:13:13.594
As you can see,
these tests are not exhaustive either.

167
00:13:13.594 --> 00:13:16.758
So I'm sure there's probably
more bugs buried in here.

168
00:13:16.758 --> 00:13:21.626
Again, really what I'm going for, the core
of what I really wanted you to see was

169
00:13:21.626 --> 00:13:24.791
this logic of how to find
something in a linked list.

170
00:13:24.791 --> 00:13:29.580
And this logic here of just
moving the pointer around, right?

171
00:13:29.580 --> 00:13:33.294
Again, the point of this course is not,
so one, thank you for

172
00:13:33.294 --> 00:13:34.805
helping me find the bug.

173
00:13:34.805 --> 00:13:38.768
I think that's good to show people.

174
00:13:38.768 --> 00:13:42.017
But more what I'm interested in,
what you find here is,

175
00:13:42.017 --> 00:13:43.850
what's the actual logic here?

