WEBVTT

1
00:00:00.200 --> 00:00:04.022
All right, so the first thing
on push that we're gonna do,

2
00:00:04.022 --> 00:00:08.236
we're gonna say const node equals
new node with a value, right?

3
00:00:08.236 --> 00:00:13.754
We're gonna say this length plus plus.

4
00:00:13.754 --> 00:00:17.392
We're gonna say, if I don't have a head,

5
00:00:17.392 --> 00:00:21.949
this dot head,
then we say this dot head equals node.

6
00:00:24.080 --> 00:00:29.049
Otherwise, simply we'll just say this dot

7
00:00:29.049 --> 00:00:34.027
tail dot next equals node and
this dot tail.

8
00:00:40.582 --> 00:00:42.770
Equals node, right?

9
00:00:42.770 --> 00:00:46.255
So, the idea here is no matter what.

10
00:00:46.255 --> 00:00:49.549
Whatever you're pushing on a list is
definitely going to be the last item

11
00:00:49.549 --> 00:00:51.260
in the array, right.

12
00:00:51.260 --> 00:00:54.721
So this dot tale is always going to
be assigned node, the the new node,

13
00:00:54.721 --> 00:00:55.550
no matter what.

14
00:00:57.310 --> 00:01:01.510
If you're pushing in a new head, or sorry
if you're pushing into an empty list.

15
00:01:01.510 --> 00:01:05.391
It's also going to be the head, otherwise.

16
00:01:05.391 --> 00:01:09.231
The tail dot next is gonna be the node,
right?

17
00:01:09.231 --> 00:01:11.303
And then again here at the bottom,

18
00:01:11.303 --> 00:01:14.740
we're always going to assign
the tail to be the new node.

19
00:01:15.810 --> 00:01:16.310
Okay.

20
00:01:17.810 --> 00:01:22.419
Pop, we're just gonna do
return this dot delete.

21
00:01:25.284 --> 00:01:27.297
This dot length minus 1, right?

22
00:01:27.297 --> 00:01:29.970
And then we'll cut up the delete
here in just a second.

23
00:01:31.230 --> 00:01:36.029
For the find, we're just gonna
say if index is greater than or

24
00:01:36.029 --> 00:01:38.950
equal to this dot length.

25
00:01:38.950 --> 00:01:40.330
Returned no, right?

26
00:01:41.610 --> 00:01:45.640
So if we try and find something that's
out of bounds just return nothing.

27
00:01:45.640 --> 00:01:48.890
Otherwise let current
equals this dot head.

28
00:01:48.890 --> 00:01:54.240
Then we'll do a for
loop here for let I equals zero.

29
00:01:55.260 --> 00:01:58.780
I Is less than or equal to index minus 1.

30
00:01:58.780 --> 00:02:03.620
And then I plus plus.

31
00:02:03.620 --> 00:02:08.840
And we're just going to say
current equals current dot next.

32
00:02:09.880 --> 00:02:14.027
And we'll just kind of be looping through
all those nodes until we arrive on the one

33
00:02:14.027 --> 00:02:15.650
that we want.

34
00:02:15.650 --> 00:02:18.160
And then at the bottom
will return current.

35
00:02:18.160 --> 00:02:22.038
So this is just gonna be an internal
find sort of method here so

36
00:02:22.038 --> 00:02:23.830
that we can find nodes.

37
00:02:23.830 --> 00:02:27.600
We never wanna return nodes directly to
the consumer of this linked list because

38
00:02:27.600 --> 00:02:29.750
they wouldn't know what
to do with it right.

39
00:02:29.750 --> 00:02:31.410
This is an internal data structure here.

40
00:02:32.680 --> 00:02:33.180
Forget.

41
00:02:35.230 --> 00:02:41.020
We're just gonna say const node

42
00:02:41.020 --> 00:02:46.179
equals this dot find index.

43
00:02:46.179 --> 00:02:51.051
And here we can say if
there's no node here,

44
00:02:51.051 --> 00:02:57.107
then return for zero,
if you wanna return undefined,

45
00:02:57.107 --> 00:03:00.960
otherwise return node dot value.

46
00:03:00.960 --> 00:03:03.775
So that's the get,
pretty straightforward and

47
00:03:03.775 --> 00:03:08.360
then delete is where things tend
to get a little bit more hairy.

48
00:03:08.360 --> 00:03:12.737
So the first thing we wanna do is we wanna
handle, if they try and delete the head.

49
00:03:12.737 --> 00:03:18.230
So if index triple equals zero,
then we need to handle that specifically.

50
00:03:18.230 --> 00:03:25.287
So const head equals this dot head and
we're gonna say if head,

51
00:03:25.287 --> 00:03:31.027
they want to say this dot
head equals head dot next.

52
00:03:37.405 --> 00:03:42.302
Otherwise, we're gonna say this dot
head equals null because we need to

53
00:03:42.302 --> 00:03:43.999
handle it differently.

54
00:03:45.270 --> 00:03:51.730
If it's the only item in the array versus,
it's just the head of a long list, right?

55
00:03:51.730 --> 00:03:53.084
That's what this is doing here.

56
00:03:55.853 --> 00:03:59.749
And then here underneath that,
we'll just say this dot length.

57
00:03:59.749 --> 00:04:04.961
Minus minus and return head dot value.

58
00:04:04.961 --> 00:04:10.711
So that handles it if we're
trying to delete the head,

59
00:04:10.711 --> 00:04:19.092
otherwise we need to say const node equals
this dot find index minus 1, right?

60
00:04:19.092 --> 00:04:23.650
So this is going to find the node
previous to the one that we wanna delete.

61
00:04:23.650 --> 00:04:28.504
We're gonna say const excise as in
the the node that we want to cut out is

62
00:04:28.504 --> 00:04:31.320
gonna be equal to node dot next, right?

63
00:04:31.320 --> 00:04:37.992
Then we're going to say,
if there's no excise.

64
00:04:37.992 --> 00:04:41.138
Then here we could throw an error or
something like that,

65
00:04:41.138 --> 00:04:44.880
we can return void zero you can do
whatever you want I returned null.

66
00:04:46.110 --> 00:04:48.390
Depends on what kind of semantics
you want to assign to it.

67
00:04:48.390 --> 00:04:54.135
Then we're gonna say node dot
next equals excise dot next.

68
00:04:56.225 --> 00:04:59.605
I'm gonna say if there's node dot next.

69
00:05:01.125 --> 00:05:05.044
Then this dot tail is
equal to node dot next.

70
00:05:10.261 --> 00:05:13.645
And this done link minus minus.

71
00:05:16.549 --> 00:05:19.952
And return excise dot value.

72
00:05:24.862 --> 00:05:28.275
Okay, so
let's see if that passes our tests.

73
00:05:28.275 --> 00:05:33.426
And thus, was great.

74
00:05:33.426 --> 00:05:39.140
So again,
this is kind of where link less fall down.

75
00:05:39.140 --> 00:05:42.259
Is that anytime you wanna do a look up,
you have to loop through everything to try

76
00:05:42.259 --> 00:05:44.040
and find the thing that
you're looking for.

77
00:05:44.040 --> 00:05:46.600
Just not necessarily always ideal.

78
00:05:46.600 --> 00:05:51.972
But, this is where it's kind of really
great as these deletes, despite the fact

79
00:05:51.972 --> 00:05:57.230
that this codes kind of like not fun
to look at, it's constant time, right?

80
00:05:57.230 --> 00:06:00.350
All you got to do is move
the pointer from here to here.

81
00:06:00.350 --> 00:06:03.895
It's just pointing at a new node and
we don't have to

82
00:06:03.895 --> 00:06:08.338
like shift our entire array over
like we had to do with array list.

83
00:06:08.338 --> 00:06:12.460
Okay, so questions about linked lists.

84
00:06:14.678 --> 00:06:17.318
&gt;&gt; So intersect question on line 48.

85
00:06:20.123 --> 00:06:24.434
So why is there like a index
minus one record less than or

86
00:06:24.434 --> 00:06:29.510
equal to index minus one
because we can we give like a.

87
00:06:29.510 --> 00:06:31.984
[INAUDIBLE] Than index.

88
00:06:31.984 --> 00:06:37.640
Because that's what's correct
[LAUGH] I mean we can look here.

89
00:06:37.640 --> 00:06:42.602
&gt;&gt; Just thinking like
what [INAUDIBLE] right?

90
00:06:42.602 --> 00:06:49.201
I less than index for [INAUDIBLE]
&gt;&gt; I think it's

91
00:06:49.201 --> 00:06:54.010
just because we need to find, that's the
way that those nodes had been numbered.

92
00:06:54.010 --> 00:06:58.680
It's, I guess you could restructure it,
so that the indexes would be different.

93
00:07:01.750 --> 00:07:05.376
Like what refers to which index refers to
which node because it's all depends on

94
00:07:05.376 --> 00:07:07.390
what kind of semantic
value assigned to it.

95
00:07:10.900 --> 00:07:15.193
Yeah, that's, I think that's just that's
the one that we'll find the correct one

96
00:07:15.193 --> 00:07:18.951
because we're just looping through all
these current until we find the one

97
00:07:18.951 --> 00:07:20.280
that we're looking for.

98
00:07:21.700 --> 00:07:25.651
&gt;&gt; I think what she's saying you can
remove minus 1, if you remove less than or

99
00:07:25.651 --> 00:07:28.000
equal if you just make it less than.

100
00:07:28.000 --> 00:07:30.720
&gt;&gt; Got you.
I see what you're saying.

101
00:07:30.720 --> 00:07:34.850
&gt;&gt; Yeah [INAUDIBLE]
&gt;&gt; Totally.

102
00:07:35.850 --> 00:07:40.659
&gt;&gt; Yeah, and
the other question is in line 65, like a,

103
00:07:40.659 --> 00:07:47.158
we are making a head tool model, but
we are not making the tail to [INAUDIBLE]

104
00:07:49.170 --> 00:07:52.248
&gt;&gt; This is true.

105
00:07:54.434 --> 00:07:55.191
Yep.

106
00:07:57.257 --> 00:07:58.852
That would have been a bug.

107
00:07:58.852 --> 00:08:00.080
So that's correct.

108
00:08:03.186 --> 00:08:04.080
Good call.

109
00:08:07.642 --> 00:08:09.870
As you can see,
these tests are not exhaustive either.

110
00:08:09.870 --> 00:08:12.080
So I'm sure there's probably
more bugs buried in here.

111
00:08:13.120 --> 00:08:17.382
Again, really what I'm going for is the
core of it, what I really wanted you to

112
00:08:17.382 --> 00:08:21.360
see was this logic of how to
find something in a linked list.

113
00:08:21.360 --> 00:08:25.270
And this logic here of just
moving the pointer around.

114
00:08:25.270 --> 00:08:25.770
Right?

115
00:08:27.500 --> 00:08:29.930
Again, the point of this course
is not [INAUDIBLE] thank you for

116
00:08:29.930 --> 00:08:30.920
helping me find the bug.

117
00:08:30.920 --> 00:08:33.710
I think that's a good to show people.

118
00:08:33.710 --> 00:08:39.980
But more what I'm interested in, what you
find here is what's the actual logic here.

