WEBVTT

1
00:00:00.213 --> 00:00:03.840
So, let's talk about our
old friend recursion.

2
00:00:03.840 --> 00:00:06.625
I imagine many of you,
whether you've gotten to a CS program or

3
00:00:06.625 --> 00:00:08.265
not have had to deal with recursion.

4
00:00:08.265 --> 00:00:12.798
Just by virtue like, it shows up
somewhat frequently when coding.

5
00:00:12.798 --> 00:00:17.368
When I say somewhat frequently, I mean
it rarely shows up but it does show.

6
00:00:17.368 --> 00:00:18.362
Let's go with that.

7
00:00:21.510 --> 00:00:23.083
So the idea with recursion is,

8
00:00:23.083 --> 00:00:27.143
what happens if you have a problem that's
just really too big to solve, right?

9
00:00:27.143 --> 00:00:32.680
You're asked to sorta an array
with a million numbers in it.

10
00:00:32.680 --> 00:00:33.658
Well, what you can do is,

11
00:00:33.658 --> 00:00:35.887
you can break that problem
down into two problems, right?

12
00:00:35.887 --> 00:00:40.203
So you can solve one for
500,000 and one for 500,000.

13
00:00:40.203 --> 00:00:42.913
Then you can continue splitting
that down until eventually,

14
00:00:42.913 --> 00:00:45.410
you will end at a problem that
you do know how to solve.

15
00:00:45.410 --> 00:00:49.608
And then you can re-stitch
the solutions back together again.

16
00:00:49.608 --> 00:00:51.400
That's kinda the idea
of recursion is like,

17
00:00:51.400 --> 00:00:53.286
break a big problem into
two smaller problems,

18
00:00:53.286 --> 00:00:57.270
until eventually you have a small enough
problem that you know how to solve.

19
00:00:57.270 --> 00:00:58.736
The entire gist of it.

20
00:01:02.391 --> 00:01:10.193
So, in English, if you recursively
define something in English.

21
00:01:10.193 --> 00:01:13.760
Like here's my example here,
what is a seafarer?

22
00:01:13.760 --> 00:01:15.423
It's one who fares the sea.

23
00:01:15.423 --> 00:01:19.905
Which is the most pointless definition
of the word seafarer ever, right?

24
00:01:19.905 --> 00:01:23.870
But notice that I'm using the word seafare
in the definition of seafarer, right?

25
00:01:23.870 --> 00:01:27.827
It's something that's
defined in terms of itself.

26
00:01:27.827 --> 00:01:30.384
Which in English doesn't
really serve you too much, but

27
00:01:30.384 --> 00:01:33.166
in computer science it actually
ends up being fairly useful.

28
00:01:35.372 --> 00:01:40.000
So, let's look at like the dumbest
most pointless version of

29
00:01:40.000 --> 00:01:42.940
a recursive function encoding.

30
00:01:42.940 --> 00:01:47.040
I have this function here
that all does is it logs out.

31
00:01:47.040 --> 00:01:50.310
This actually should be current,
doesn't matter.

32
00:01:50.310 --> 00:01:51.562
In any case

33
00:01:56.069 --> 00:02:00.960
Notice that count To calls count To in and
of itself, right?

34
00:02:00.960 --> 00:02:05.704
So, this function count To,
is defined in terms of itself.

35
00:02:07.770 --> 00:02:11.306
So let's actually,
I can even just copy and paste this,

36
00:02:11.306 --> 00:02:13.600
I'm gonna bring up my console here.

37
00:02:14.919 --> 00:02:18.041
And I'm gonna say function and I'm
actually gonna modify this to say current,

38
00:02:18.041 --> 00:02:19.448
cuz that's actually what I meant.

39
00:02:22.560 --> 00:02:26.721
And I say count To (10).

40
00:02:26.721 --> 00:02:28.388
What do you expect this to do?

41
00:02:30.470 --> 00:02:35.002
I wanna think I have to give it a 0 or

42
00:02:35.002 --> 00:02:38.582
1, something like that.

43
00:02:38.582 --> 00:02:39.830
What do you expect us to do?

44
00:02:39.830 --> 00:02:44.654
&gt;&gt; [INAUDIBLE]
&gt;&gt; Yep, it's going to go count 1, 2, 3,

45
00:02:44.654 --> 00:02:48.161
4, 5, 6, 7, 8, 9, 10, right?

46
00:02:50.021 --> 00:02:52.630
There's no for loop in here though,
how did that work?

47
00:02:54.150 --> 00:02:58.495
Well calls count To, and then eventually,
it calls count To again.

48
00:02:58.495 --> 00:03:01.019
And it goes through this over and
over again until

49
00:03:01.019 --> 00:03:04.911
I realize that this case right here if,
and then it stops calling count To.

50
00:03:06.780 --> 00:03:09.952
So again, this is not a useful
recursive function, but

51
00:03:09.952 --> 00:03:14.217
this is a recursive function in that,
it's a function that calls itself.

52
00:03:17.160 --> 00:03:22.206
Now, I imagine most of you can imagine
a better way of writing this, right.

53
00:03:22.206 --> 00:03:27.235
A simple for loop, a forereach,
a map, any one of those things would

54
00:03:27.235 --> 00:03:31.859
have been clearer than this,
abomination of code right here.

55
00:03:31.859 --> 00:03:34.257
But I wanted to demonstrate
to you just basically that,

56
00:03:34.257 --> 00:03:37.430
you can make basically anything
recursive if you really try hard enough.

57
00:03:38.860 --> 00:03:46.163
And, if you've ever written code or in
languages like racket, or scheme, or Lisp.

58
00:03:46.163 --> 00:03:49.422
Or basically any Lisp,
sort of oriented language,

59
00:03:49.422 --> 00:03:52.466
this is actually the only
way of doing a for loop.

60
00:03:54.024 --> 00:03:58.830
Which is with recursion.

61
00:03:58.830 --> 00:04:00.257
Definitely not a scheme class.

62
00:04:00.257 --> 00:04:03.704
Though, I'll just toss
out a recommendation.

63
00:04:03.704 --> 00:04:06.764
Not that I'm gonna teach you
how to write scheme, but

64
00:04:06.764 --> 00:04:11.700
it made me a better programmer to go and
learn a little bit of how to write scheme.

65
00:04:11.700 --> 00:04:13.533
So, and it's a fun weekend project.

66
00:04:13.533 --> 00:04:16.679
It's because it's a pretty simple language
&gt;&gt; Isn't map.

67
00:04:16.679 --> 00:04:22.943
You had a map function usually
recursive by definition.

68
00:04:22.943 --> 00:04:25.660
&gt;&gt; The map function is
recursive by definition.

69
00:04:27.910 --> 00:04:30.828
I don't think so, am I missing something?

70
00:04:32.984 --> 00:04:38.262
&gt;&gt; I mean I've been dabbling with
functional languages a lot recently,

71
00:04:38.262 --> 00:04:42.240
so I might be stuck in that space but
&gt;&gt; I mean it's more iterative, right?

72
00:04:42.240 --> 00:04:43.773
Cuz with a map function,

73
00:04:43.773 --> 00:04:48.163
you provided mapping which is then
call on every single item the array.

74
00:04:48.163 --> 00:04:51.827
and function isn't calling itself, right?

75
00:04:51.827 --> 00:04:54.557
So that map is undefined
in terms of itself.

76
00:04:54.557 --> 00:04:56.851
Which is what a recursive function is.

77
00:04:58.940 --> 00:05:04.678
&gt;&gt; I think since in functional languages,
you don't have iteration.

78
00:05:04.678 --> 00:05:09.490
I mean, maybe that's the only way to make
a map function in a functional language.

79
00:05:11.480 --> 00:05:15.174
&gt;&gt; Yeah, I guess if you're gonna
implement map in something like Lua.

80
00:05:15.174 --> 00:05:20.496
Or not Lua, but Lisp,
inherently because those languages

81
00:05:20.496 --> 00:05:25.828
model loops as recursion,
then I guess it would have to be.

82
00:05:25.828 --> 00:05:31.669
So the question is,
there's a couple of questions there.

83
00:05:31.669 --> 00:05:32.900
That's unpack it just a little bit.

84
00:05:33.980 --> 00:05:40.033
The first thing is,
if I put in max as infinity.

85
00:05:40.033 --> 00:05:42.320
Yeah cuz it's never gonna stop counting,
right.

86
00:05:42.320 --> 00:05:47.255
So, with normal recursion,
this says this actually would just get

87
00:05:47.255 --> 00:05:50.816
tail called optimize it probably would,
okay?

88
00:05:50.816 --> 00:05:53.860
So you'd actually get an infinite loop and
not a stack overflow, right?

89
00:05:53.860 --> 00:05:58.273
Because if it's tail call optimized,
you'd be modeled as a loop and

90
00:05:58.273 --> 00:06:00.033
not a recursive function.

91
00:06:00.033 --> 00:06:02.626
So you'd actually end
up in an infinite loop,

92
00:06:02.626 --> 00:06:05.560
which is maybe mildly better
than a stack overflow.

93
00:06:06.620 --> 00:06:08.991
But, let's actually define
both of those things.

94
00:06:08.991 --> 00:06:12.140
Infinite iteration, is when you
have a loop that never ends, right?

95
00:06:13.230 --> 00:06:18.566
So, if I do a while loop like while true,
right, that's an infinite loop.

96
00:06:18.566 --> 00:06:23.125
Something like this, while true,
something like that,

97
00:06:23.125 --> 00:06:27.509
this would be an infinite loop
cuz this would never end.

98
00:06:27.509 --> 00:06:32.950
Whereas if I count to here
a max of positive infinity.

99
00:06:32.950 --> 00:06:34.915
That would also never finish, right?

100
00:06:34.915 --> 00:06:37.064
And that would be a stack overflow.

101
00:06:37.064 --> 00:06:41.452
Because eventually JavaScript engine
just kinda gives up, like hey,

102
00:06:41.452 --> 00:06:43.800
you've taken all of my stack memory.

103
00:06:45.070 --> 00:06:48.347
I'm just gonna go puke
in the corner basically.

104
00:06:50.091 --> 00:06:53.689
Now, let's talk about tail call
optimization for just a second.

105
00:06:53.689 --> 00:06:58.348
One, it's still kind of a murky
proposition in JavaScript,

106
00:06:58.348 --> 00:07:01.870
that it is part of ES 5 or ES 2015.

107
00:07:01.870 --> 00:07:07.935
But I don't think every engine
implements tail call optimization yet.

108
00:07:07.935 --> 00:07:11.400
So in other words,
don't rely on tail call optimization.

109
00:07:11.400 --> 00:07:16.396
And what tail call optimization is,
if you make the last line of

110
00:07:16.396 --> 00:07:21.221
your recursive function,
a return of your recursive call.

111
00:07:21.221 --> 00:07:27.673
Then technically a programming language
can automatically turn that into a loop.

112
00:07:27.673 --> 00:07:35.242
Which is inherently faster and more
memory efficient than a recursive call.

113
00:07:35.242 --> 00:07:40.437
So, I don't know if this does
because it lacks return.

114
00:07:40.437 --> 00:07:44.091
That, if it would happen,
I think it would.

115
00:07:44.091 --> 00:07:45.620
But it also depends on the engine, right?

116
00:07:45.620 --> 00:07:48.277
I don't know if spider monkey does it,
I don't know if he does it.

117
00:07:48.277 --> 00:07:51.220
Because there was always controversy
of how to implement that.

118
00:07:51.220 --> 00:07:54.470
Anyway, that whole last part
about tail call optimization,

119
00:07:54.470 --> 00:07:58.231
not something you really need to care
about for the sake of this course.

120
00:07:58.231 --> 00:08:02.222
But it's something interesting, you can go
read up on yourself on how to do it and

121
00:08:02.222 --> 00:08:02.820
what it is.

122
00:08:04.100 --> 00:08:07.806
&gt;&gt; What is the purpose of the list
parameter, looks unused in this case?

123
00:08:07.806 --> 00:08:08.660
&gt;&gt; It is, yeah.

124
00:08:10.760 --> 00:08:15.301
I was gonna have to populate
that array there with

125
00:08:15.301 --> 00:08:19.527
the counted numbers and
I did not take it out.

126
00:08:19.527 --> 00:08:23.792
So yeah, the list thing here is,
pointless for the moment.

127
00:08:23.792 --> 00:08:25.862
When is recursion useful?

128
00:08:25.862 --> 00:08:32.433
Well, when you find yourself in
the definition of your problem.

129
00:08:32.433 --> 00:08:36.029
Modeling it in terms of smaller
versions of the same problem,

130
00:08:36.029 --> 00:08:40.670
that's a good indication that your
problem could be solved recursively.

131
00:08:40.670 --> 00:08:44.666
So one of the classic examples that
people like to talk about with recursion,

132
00:08:44.666 --> 00:08:47.072
is something called
the Fibonacci sequence.

133
00:08:47.072 --> 00:08:50.113
Now, again,
I don't wanna veer too mathy here.

134
00:08:50.113 --> 00:08:53.644
But the idea of
the Fibonacci sequences is,

135
00:08:53.644 --> 00:08:59.380
the Fibonacci(3) is the Fibonacci(2)
+ the Fibonacci(1).

136
00:08:59.380 --> 00:09:00.013
All right.

137
00:09:00.013 --> 00:09:04.627
And the definition of the Fibonacci
(100) is, Fibonacci + 99 +

138
00:09:04.627 --> 00:09:09.630
the Fibonacci(98) +
the Fibonacci(97)+ the Fibonacci(98).

139
00:09:09.630 --> 00:09:10.891
So on and so forth.

140
00:09:12.670 --> 00:09:15.663
That you can generalize
as the Fibonacci(n),

141
00:09:15.663 --> 00:09:19.459
is the Fibonacci(n-1) + Fibonacci(n-2),
right.

142
00:09:19.459 --> 00:09:22.520
And what is the Fibonacci(n-1)?

143
00:09:22.520 --> 00:09:27.040
Well, that's the Fibonacci(n-2)
+ Fibonacci(n-3), right?

144
00:09:27.040 --> 00:09:32.036
And you can kind of expand that out,
to eventually you

145
00:09:32.036 --> 00:09:37.143
arrive at what the Fibonacci(2)
is defined to be 1 and

146
00:09:37.143 --> 00:09:41.095
the Fibonacci(1) is defined to be 1 and
the Fibonacci(0) is defined to be 0.

147
00:09:41.095 --> 00:09:43.265
Those are like kind of like the givens.

148
00:09:45.220 --> 00:09:51.586
So, as you might imagine the
Fibonacci(3)= Fibonacci(2)+ Fibonacci(1).

149
00:09:51.586 --> 00:09:54.590
So the Fibonacci(3) = 2.

150
00:09:56.890 --> 00:10:01.921
The Fibonacci(4) would
be the Fibonacci(3),

151
00:10:01.921 --> 00:10:07.072
which we just found out
as 2+ Fibonacci(2)=1.

152
00:10:07.072 --> 00:10:10.611
What I just say, 3, 4.

153
00:10:11.999 --> 00:10:16.281
Anyway, it's kinda hard to keep all
this in your head, right [LAUGH].

154
00:10:18.418 --> 00:10:23.236
So, there are negative Fibonacci numbers,
we're ignoring them.

155
00:10:23.236 --> 00:10:24.918
Please for the sake of this course,

156
00:10:24.918 --> 00:10:27.619
we're just talking about
positive Fibonacci numbers.

157
00:10:30.718 --> 00:10:35.607
So, the first thing is, when you're
talking about recursion is, always,

158
00:10:35.607 --> 00:10:39.440
always, always just define
your base case first.

159
00:10:39.440 --> 00:10:43.270
The base case is when your
your recursion stops, right?

160
00:10:43.270 --> 00:10:47.750
Cuz if you don't ever stop your recursion,
then you get stack overflows.

161
00:10:47.750 --> 00:10:50.901
So, for example up here in our count To,

162
00:10:50.901 --> 00:10:54.811
this if statement right here,
is your base case.

163
00:10:54.811 --> 00:10:57.950
So, if current is greater than max,
then return, right.

164
00:10:57.950 --> 00:11:02.488
That's when we've decided like, okay,
we've satisfied all the conditions,

165
00:11:02.488 --> 00:11:05.262
we're now done,
we're not recursing anymore.

166
00:11:07.730 --> 00:11:12.385
So, this is our base case that if n=2,
look at this one,

167
00:11:12.385 --> 00:11:17.616
equal to 2 or equal to 1,
then return 1, otherwise return 0.

168
00:11:17.616 --> 00:11:21.375
So we have the n=2 or the n=1.

169
00:11:21.375 --> 00:11:22.120
Don't click on it.

170
00:11:24.200 --> 00:11:27.622
So the base case here is that we return
1 and if we somehow end up on 0,

171
00:11:27.622 --> 00:11:28.979
we shouldn't end up on 0.

172
00:11:28.979 --> 00:11:31.784
But if we did, then you return 0.

173
00:11:31.784 --> 00:11:33.523
Okay?

174
00:11:33.523 --> 00:11:36.680
And then we just define the Fibonacci
in terms of what our definition was.

175
00:11:36.680 --> 00:11:40.889
So the Fibonacci(5) is
the return the Fibonacci(5-1),

176
00:11:40.889 --> 00:11:44.265
which is 4, and (5-2), which is 3, right.

177
00:11:44.265 --> 00:11:48.010
Which then calls this, until eventually
those arrive to their base cases.

178
00:11:48.010 --> 00:11:51.558
And then, those return until eventually
we kind of add all those numbers up and

179
00:11:51.558 --> 00:11:53.135
we end up with the correct answer.

180
00:11:54.478 --> 00:12:00.664
&gt;&gt; So, Fibonacci(2), right.

181
00:12:00.664 --> 00:12:01.854
That makes sense.

182
00:12:08.040 --> 00:12:10.092
So on and so forth.

183
00:12:15.268 --> 00:12:19.779
So you can see here, 2+3= 5, 3+ 5= 8,

184
00:12:19.779 --> 00:12:23.092
5+ 8= 13, 8+13=21.

185
00:12:27.456 --> 00:12:27.956
Okay?

186
00:12:29.680 --> 00:12:32.824
Let's break this down into what
the calls actually break down into,

187
00:12:32.824 --> 00:12:35.215
you'll often see recursion
modeled as like a tree.

188
00:12:35.215 --> 00:12:37.760
Because essentially that's what it's
kind of breaking itself down into.

189
00:12:38.850 --> 00:12:42.505
So, here if I call Fibonacci(5).

190
00:12:42.505 --> 00:12:47.152
This is gonna call this and it's gonna
call Fibonacci(4), which is this call.

191
00:12:47.152 --> 00:12:50.046
And Fibonacci(3),
which is gonna be this call.

192
00:12:50.046 --> 00:12:53.335
And that's gonna break down into
these various different calls.

193
00:12:53.335 --> 00:12:59.889
Fibonacci(4) is gonna call 3 and it's
gonna call Fibonacci(2) which is 1, right?

194
00:12:59.889 --> 00:13:03.395
And then Fibonacci(3) will break
down into 2 and 1, these are both 1.

195
00:13:03.395 --> 00:13:07.770
So this is gonna be 1+1, which is
gonna return 2+1, which is gonna be 3.

196
00:13:07.770 --> 00:13:12.236
So, Fibonacci(4)=3 and then Fibonacci(3)
over here, is gonna be 1+1, which is 2.

197
00:13:12.236 --> 00:13:17.254
And then these two are gonna add together,
which is 3+2, which is gonna be 5.

198
00:13:20.056 --> 00:13:23.636
Now, at the end of the day,
what did I end up doing?

199
00:13:23.636 --> 00:13:27.240
I ended up adding 1 to itself a whole lot,
right?

200
00:13:27.240 --> 00:13:30.616
This is a whole lot of adding 1 together.

201
00:13:30.616 --> 00:13:34.907
So, if I end up doing something like,
Fibonacci(15),

202
00:13:34.907 --> 00:13:37.187
which is a fairly large number.

203
00:13:37.187 --> 00:13:40.816
610, how many times did I add 1 to itself?

204
00:13:42.652 --> 00:13:45.485
610 times, right.

205
00:13:45.485 --> 00:13:48.668
16, right 987.

206
00:13:48.668 --> 00:13:52.530
If start getting into really big numbers
of Fibonacci, it gets kinda ugly.

207
00:13:54.380 --> 00:13:57.486
Notice how long that took,
it's not instant.

208
00:14:02.790 --> 00:14:05.237
I did 35 there and it took a good worth.

209
00:14:05.237 --> 00:14:09.214
2 seconds of my very good
MacBook to compute that, right.

210
00:14:11.042 --> 00:14:14.146
So, as you can see here,
this is actually super inefficient.

211
00:14:18.051 --> 00:14:23.750
But the code here is really quite nice,
right?

212
00:14:25.410 --> 00:14:29.820
In the sense of like, it's kinda elegant
in the sense of like, it's fairly easy to

213
00:14:29.820 --> 00:14:34.371
read that the Fibonacci(5) is gonna
be the Fibonacci(4) + Fibonacci(3).

214
00:14:34.371 --> 00:14:38.104
So, you'll find this is frequently
the case with recursive calls is.

215
00:14:38.104 --> 00:14:40.863
It might not be the most
efficient way of doing things, but

216
00:14:40.863 --> 00:14:43.467
you can often end up with
fairly elegant looking code.

217
00:14:46.170 --> 00:14:47.724
Now, what's the shame about this?

218
00:14:49.750 --> 00:14:54.388
We have Fibonacci(3),
how many times do we call Fibonacci(3),

219
00:14:54.388 --> 00:14:56.640
instead of the Fibonacci(5)?

220
00:14:56.640 --> 00:14:59.890
At least twice, right?

221
00:14:59.890 --> 00:15:02.345
Well, exactly twice.

222
00:15:02.345 --> 00:15:04.181
But imagine when we call Fibonacci (15),

223
00:15:04.181 --> 00:15:07.260
how many times do you think
we call Fibonacci (3)?

224
00:15:07.260 --> 00:15:08.652
A lot.

225
00:15:08.652 --> 00:15:10.970
Does the Fibonacci(3) change over time?

226
00:15:13.120 --> 00:15:17.885
No, the Fibonacci(3) is
always defined to be 2.

227
00:15:17.885 --> 00:15:21.684
So, this would actually be pretty
effective if we did something called

228
00:15:21.684 --> 00:15:22.771
memorialization.

229
00:15:22.771 --> 00:15:27.803
Where we could actually say, hey, once
you've completed the Fibonacci(4) to be,

230
00:15:27.803 --> 00:15:31.142
whatever it is 3,
don't compute that anymore, right?

231
00:15:31.142 --> 00:15:32.435
It's always gonna be that, so

232
00:15:32.435 --> 00:15:36.620
if you ever see that again, just return
the same answer that I got last time.

233
00:15:36.620 --> 00:15:39.377
So, not necessary the point
of this course but

234
00:15:39.377 --> 00:15:43.986
I just wanted to call out that this would
be a perfect case for a memorization.

235
00:15:48.180 --> 00:15:52.658
You can rewrite Fibonacci as in a for

236
00:15:52.658 --> 00:15:57.739
loop instead of as a recursion, right.

237
00:15:57.739 --> 00:15:59.944
And you end up with code
that looks like this,

238
00:15:59.944 --> 00:16:02.689
which is just numbers adding
itself together, right?

239
00:16:05.970 --> 00:16:07.879
It's a little less clear,

240
00:16:07.879 --> 00:16:12.113
I might argue that this code
might be easier to read, right?

241
00:16:12.113 --> 00:16:15.887
But this is, 500 times faster and

242
00:16:15.887 --> 00:16:19.918
probably even more than 500 times.

243
00:16:19.918 --> 00:16:23.258
So if I call here, let's see,

244
00:16:23.258 --> 00:16:28.150
Fibonacci(16) or Fibonacci(35).

245
00:16:28.150 --> 00:16:31.292
Notice how much faster this is going,
let's do 100.

246
00:16:33.362 --> 00:16:36.000
Notice that this is just kicking
out huge numbers really quickly.

247
00:16:37.420 --> 00:16:41.912
If you did Fibonacci(100),
with the previous way that we had defined

248
00:16:41.912 --> 00:16:46.128
the Fibonacci sequence,
it probably would have crashed my browser.

249
00:16:46.128 --> 00:16:50.108
So, it's another one of those things where
in this case, the iterative approach is so

250
00:16:50.108 --> 00:16:50.830
much better.

251
00:16:50.830 --> 00:16:52.998
It's probably almost always
going to be the correct answer.

252
00:16:52.998 --> 00:16:55.419
And this isn't terrible code.

253
00:16:55.419 --> 00:17:00.451
I might read some comments in there,
but in general this is gonna be better.

254
00:17:00.451 --> 00:17:04.371
But, yeah this is to say that, frequently
recursive problems can be rewritten

255
00:17:04.371 --> 00:17:06.370
as iterative solutions but not always.

