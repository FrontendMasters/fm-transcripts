WEBVTT

1
00:00:00.140 --> 00:00:04.198
So another really good use case for and
this would work iteratively as well

2
00:00:04.198 --> 00:00:07.086
the recursive this would
be a really cool solution.

3
00:00:07.086 --> 00:00:11.121
Let's say you had all of these numbers
here and they were arbitrarily nested,

4
00:00:11.121 --> 00:00:14.436
right, like you can see here,
this 14 here is pretty nested.

5
00:00:15.993 --> 00:00:20.098
You can write this as iterative and you
can unwrap arrays and things like that.

6
00:00:20.098 --> 00:00:23.833
You could also just call a recursive
add call on all of these,

7
00:00:23.833 --> 00:00:25.968
and these would work really well.

8
00:00:29.880 --> 00:00:33.014
So let's actually give
you a shot at doing this.

9
00:00:33.014 --> 00:00:37.394
So I'm gonna go edit here on SandBox.

10
00:00:37.394 --> 00:00:40.402
And we're gonna pop over
to code sandbox here.

11
00:00:44.610 --> 00:00:47.738
And we're gonna go to files.

12
00:00:47.738 --> 00:00:49.838
And we're gonna go to nested edition.

13
00:00:49.838 --> 00:00:53.462
So it's in recursion.

14
00:00:53.462 --> 00:00:57.868
There's one here called
nested arrays.test.js.

15
00:01:00.141 --> 00:01:05.499
And what I want you to do is I want you
to go and write code in a recursive

16
00:01:05.499 --> 00:01:11.798
fashion that takes all the numbers in
the array and adds them together, right.

17
00:01:11.798 --> 00:01:19.668
So this should be 10 + 12 +
14 +1 + 16 + 20 + 10 + 11.

18
00:01:19.668 --> 00:01:20.868
And I want you to use recursion.

19
00:01:25.592 --> 00:01:28.187
So one you can definitely use flat and
that's cheating.

20
00:01:28.187 --> 00:01:32.144
Do not use flatten for this, or flat or

21
00:01:32.144 --> 00:01:38.207
smush depending on when you
started writing JavaScript,

22
00:01:38.207 --> 00:01:41.561
but I don't want you to do that.

23
00:01:41.561 --> 00:01:43.219
I want you to write this with recursion,
so

24
00:01:43.219 --> 00:01:45.119
we're gonna give you just
a bit of time for this.

25
00:01:45.119 --> 00:01:49.869
But just think about first
what's your base case?

26
00:01:49.869 --> 00:01:54.507
In this case your base cases if
you're adding a number right and

27
00:01:54.507 --> 00:01:58.981
not adding an array of arrays
when you recurse more, right?

28
00:01:58.981 --> 00:02:02.366
And then yeah, then you can just go
into return a number at the end.

29
00:02:08.887 --> 00:02:13.496
I remember the first time
I learned recursion and

30
00:02:13.496 --> 00:02:19.575
I was a buddy young lad young
strapping lad in Bountiful, Utah.

31
00:02:19.575 --> 00:02:22.774
My brother would make me write code
before I could play video games.

32
00:02:22.774 --> 00:02:25.719
And just the moment that it clicked for
me is wait,

33
00:02:25.719 --> 00:02:30.643
I call the function inside of itself, the
call is coming from inside the function.

34
00:02:30.643 --> 00:02:32.061
That's funnier than I thought it'd be.

35
00:02:32.061 --> 00:02:35.388
Anyway, I don't know.

36
00:02:35.388 --> 00:02:36.583
It just melts my mind.

37
00:02:36.583 --> 00:02:38.061
It made me feel like I had superpowers.

38
00:02:38.061 --> 00:02:40.267
So it was cool experience for me.

39
00:02:40.267 --> 00:02:42.269
Hopefully it's a cool experience for you.

40
00:02:42.269 --> 00:02:46.008
Imagine some of you probably have written
recursive functions before but for

41
00:02:46.008 --> 00:02:48.262
some of you might be
a really cool experience.

42
00:02:48.262 --> 00:02:53.851
All right, so I'm gonna have ,let

43
00:02:53.851 --> 00:02:58.880
some function, equals 0, and

44
00:02:58.880 --> 00:03:04.468
I'm gonna say 4 let i equals zero,

45
00:03:04.468 --> 00:03:09.327
i is less than array.length.

46
00:03:09.327 --> 00:03:14.428
I plus, plus And I'm going to

47
00:03:14.428 --> 00:03:20.354
say const current = array[i].

48
00:03:24.494 --> 00:03:30.258
And then I'm going to
say if array.isarray.

49
00:03:30.258 --> 00:03:34.463
This is just a nice little helper function
that lets you check if something's

50
00:03:34.463 --> 00:03:35.051
an array.

51
00:03:35.051 --> 00:03:37.885
Then we need to recurse, right?

52
00:03:37.885 --> 00:03:42.028
So when I say sum, plus equals,

53
00:03:42.028 --> 00:03:49.398
whatever comes back from
nested add of current, right?

54
00:03:49.398 --> 00:03:52.993
Else otherwise it's the number you
can assume it's always a number.

55
00:03:52.993 --> 00:03:57.142
Sum plus equals current and we keep
on our merry way with our for loop.

56
00:03:59.592 --> 00:04:02.247
Then down here we're gonna say return sum.

57
00:04:07.413 --> 00:04:10.183
So our base case,
interestingly enough is not at the top.

58
00:04:10.183 --> 00:04:12.268
I would say frequently is at the top.

59
00:04:12.268 --> 00:04:14.230
I would say usually is at the top.

60
00:04:14.230 --> 00:04:18.351
But in this particular case,
it wasn't, okay, but

61
00:04:18.351 --> 00:04:23.126
the base case is here,
which is to say that it's not an array.

62
00:04:23.126 --> 00:04:25.962
Right and then we keep going.

63
00:04:25.962 --> 00:04:30.975
And then here you can see it's gonna
come down with the nested data and

64
00:04:30.975 --> 00:04:36.349
it's gonna call this again and
again until we eventually get our answer.

65
00:04:36.349 --> 00:04:39.793
So let's try this, make sure that it
works the way that we think it should.

66
00:04:44.587 --> 00:04:50.253
And recursion,
nested arrays, and it works.

67
00:04:53.514 --> 00:04:57.888
Now you absolutely totally could
do this with iteration and

68
00:04:57.888 --> 00:05:03.750
just on unpacking arrays that way, but
this is actually a nice elegant solution

69
00:05:03.750 --> 00:05:09.102
that we use this nested add function and
I would say this is totally fine.

70
00:05:09.102 --> 00:05:14.111
You might get a little bit more
performance out of a Iterative solution,

71
00:05:14.111 --> 00:05:18.231
but even for pretty deep arrays
this should be plenty fine.

72
00:05:21.887 --> 00:05:25.273
So any questions about nested AP?

73
00:05:28.162 --> 00:05:32.655
&gt;&gt; What would be the time complexity for
this?

74
00:05:32.655 --> 00:05:34.679
&gt;&gt; Good question.

75
00:05:34.679 --> 00:05:36.435
The time complexity.

76
00:05:36.435 --> 00:05:43.316
&gt;&gt; [INAUDIBLE]
&gt;&gt; Yeah,

77
00:05:43.316 --> 00:05:48.373
so what's the time complexity
of our solution here?

78
00:05:48.373 --> 00:05:53.276
This is an interesting one to model
because the depth of the recursion

79
00:05:53.276 --> 00:05:57.923
is not gonna be dependent on how
long the array is, but the depth of

80
00:05:57.923 --> 00:06:03.439
the recursion is gonna be determined
by how nested these arrays are, right?

81
00:06:03.439 --> 00:06:07.003
So you can see here this
only has of length one but

82
00:06:07.003 --> 00:06:09.781
it's nested a whole bunch, right?

83
00:06:09.781 --> 00:06:13.063
So we'd actually probably have to
introduce some sort of third variable here

84
00:06:13.063 --> 00:06:13.979
or second variable.

85
00:06:13.979 --> 00:06:17.924
So we have n, typically the next
thing you introduce is k, right?

86
00:06:17.924 --> 00:06:22.488
So this would probably be of
complexity n because we would have

87
00:06:22.488 --> 00:06:26.789
certainly have to link loop
over everything in the array,

88
00:06:26.789 --> 00:06:32.785
plus we'd probably have to times it by k,
which would be the depth of recursion.

89
00:06:32.785 --> 00:06:36.625
So n k probably might need
to check me on that one.

90
00:06:36.625 --> 00:06:42.126
It's kind of hard to model some of these
things as big O because some of them

91
00:06:42.126 --> 00:06:47.920
don't lend themselves super well the big
O analysis but that would be my guess

