WEBVTT

1
00:00:00.330 --> 00:00:01.940
So let's pop over here to LinkedList.

2
00:00:04.300 --> 00:00:07.949
LinkedList, instead of having
everything co-located in memory, so

3
00:00:07.949 --> 00:00:09.846
it's all just one after each other.

4
00:00:09.846 --> 00:00:13.016
Basically, you kind of embrace
a little bit of chaos and say, well,

5
00:00:13.016 --> 00:00:16.639
they're gonna be all over memory, but
basically, we're gonna have nodes.

6
00:00:16.639 --> 00:00:21.940
Let's say, okay, this node holds 22,
this one holds 2, this one holds 77.

7
00:00:21.940 --> 00:00:24.560
And they just point to each
other in memory, right?

8
00:00:24.560 --> 00:00:27.012
So, 22 doesn't know about
the rest of the list,

9
00:00:27.012 --> 00:00:29.590
all it knows about is where
the next thing is, right?

10
00:00:29.590 --> 00:00:33.106
2 doesn't know about anything
else besides where 77 is, right?

11
00:00:33.106 --> 00:00:36.400
And they just had these nodes
that point to each other.

12
00:00:38.060 --> 00:00:40.584
Now, this makes it hard for reads, right?

13
00:00:40.584 --> 00:00:43.369
Because if I wanna get index 10 over here,

14
00:00:43.369 --> 00:00:46.844
I have to follow the entire
chain to get there, right?

15
00:00:46.844 --> 00:00:48.465
It's not necessarily ideal.

16
00:00:48.465 --> 00:00:50.400
But you can see here this is doing an add.

17
00:00:52.370 --> 00:00:55.800
And the adds are really great, cuz all
you have to do is you add something.

18
00:00:55.800 --> 00:01:00.620
Let me just step through here.

19
00:01:00.620 --> 00:01:04.220
So, yeah, here, this is doing a find,
until it finds where it's supposed to go.

20
00:01:06.230 --> 00:01:08.350
And then it's going to land right here,
right?

21
00:01:08.350 --> 00:01:09.877
So, we create this new node.

22
00:01:09.877 --> 00:01:15.550
All we have to do to add this between
43 and 76 is, move the pointer for

23
00:01:15.550 --> 00:01:20.773
next from 76 to 50, and
then add 50's next pointer to 76.

24
00:01:20.773 --> 00:01:25.417
And all of a sudden we've added something
to the middle of the list, right?

25
00:01:25.417 --> 00:01:29.435
By the same token, if we wanted
to do something like delete 43,

26
00:01:29.435 --> 00:01:33.542
all we'd have to do is go to 6,
change its next pointer to be 76.

27
00:01:33.542 --> 00:01:35.620
And all of a sudden it's
totally deleted from the array.

28
00:01:35.620 --> 00:01:38.335
We don't have to do anything else, right?

29
00:01:38.335 --> 00:01:44.627
So that's the distinct
advantage of LinkedLists,

30
00:01:44.627 --> 00:01:49.489
is that it becomes very easy to delete and

31
00:01:49.489 --> 00:01:52.755
add things in the middle.

32
00:01:52.755 --> 00:01:53.950
[INAUDIBLE].

33
00:01:53.950 --> 00:01:56.055
All right, so with LinkedLists,

34
00:01:56.055 --> 00:02:00.210
we're gonna have two classes
that we're going to implement.

35
00:02:00.210 --> 00:02:02.555
We're gonna have like a LinkedList class,
right?

36
00:02:02.555 --> 00:02:04.510
Like we had an ArrayList class.

37
00:02:04.510 --> 00:02:07.690
We're also going to have a node class,
right?

38
00:02:07.690 --> 00:02:10.350
So, the node class is gonna
have two things on it.

39
00:02:10.350 --> 00:02:15.274
All it's gonna have is next,
and the value, right?

40
00:02:15.274 --> 00:02:20.335
So, again, this 2 node right here,
has a value of 2 and

41
00:02:20.335 --> 00:02:23.820
a next of the 77 node, and that is it.

42
00:02:23.820 --> 00:02:28.460
It doesn't know about what's before it,
it doesn't know about what's after it.

43
00:02:28.460 --> 00:02:34.310
By the same token, the LinkedList class,
all it has is the head, right?

44
00:02:34.310 --> 00:02:37.617
So 22 here is the head,
which is the first note in the array, and

45
00:02:37.617 --> 00:02:40.520
then it doesn't know where
everything else is, right?

46
00:02:40.520 --> 00:02:45.672
So you have to follow it,
to try and get that.

47
00:02:47.290 --> 00:02:53.088
So, let's dissect the delete really
quick with a LinkedList, right?

48
00:02:53.088 --> 00:02:59.520
So we have these notes here, so
[a] and these pointers, right?

49
00:03:00.920 --> 00:03:05.810
So let's say that we wanted to delete
index 2, which is this one here,

50
00:03:05.810 --> 00:03:07.946
this one that says [c] in it.

51
00:03:07.946 --> 00:03:16.044
We'd first seek or do a get till
we get to the [b] here, right?

52
00:03:16.044 --> 00:03:19.519
Then we will change the [b] to
be the next of the [c], right?

53
00:03:19.519 --> 00:03:24.504
So that [b] now points to [d],
and then that's it.

54
00:03:26.593 --> 00:03:33.216
Decrement the length, return
the deleted node, and that would be it.

55
00:03:33.216 --> 00:03:37.964
Same things if this is doing
an insertion up here between the 43 and

56
00:03:37.964 --> 00:03:42.985
the 76, you find 43,
you point 43 to 50 and then you're done.

57
00:03:42.985 --> 00:03:49.856
And then, well, and you point 50 to 76.

58
00:03:52.374 --> 00:04:00.680
So, the lookups on a LinkedList are n,
right?

59
00:04:00.680 --> 00:04:03.453
Because you have to loop through the
entire list until you find the thing that

60
00:04:03.453 --> 00:04:04.680
you're looking for.

61
00:04:04.680 --> 00:04:07.950
The gets and lookups are not great.

62
00:04:07.950 --> 00:04:10.685
However, the deletes and
the insertions are constant time, right?

63
00:04:10.685 --> 00:04:14.675
Because all you have to do is change
your pointers and you're done.

64
00:04:14.675 --> 00:04:19.495
So, again, if you're deleting and
inserting into the middle of a list,

65
00:04:19.495 --> 00:04:21.930
LinkedLists are amazing.

66
00:04:21.930 --> 00:04:23.949
But if you're doing a lot of reads and

67
00:04:23.949 --> 00:04:28.330
not doing much modification of the list,
then don't use LinkedLists.

68
00:04:28.330 --> 00:04:30.640
There are variations of LinkedLists,
as well.

69
00:04:30.640 --> 00:04:35.095
One of those is a doubly LinkedList,
which will have a next, but

70
00:04:35.095 --> 00:04:38.475
it will also have a previous, right?

71
00:04:38.475 --> 00:04:41.624
So, if you can see that something
is going to be closer to the end of

72
00:04:41.624 --> 00:04:43.801
the Linked List,
you can start on the tail and

73
00:04:43.801 --> 00:04:46.745
then backtrack to find the thing
that you're looking for.

74
00:04:46.745 --> 00:04:51.173
So, it kinda helps a little
bit with those, gets, right?

75
00:04:51.173 --> 00:04:55.486
You can never have to go
more than half of the array.

76
00:04:55.486 --> 00:05:00.412
But, at the same time,
instead of just having to change, next,

77
00:05:00.412 --> 00:05:06.610
you'll also have to change previous for
the insertions and the deletions.

78
00:05:06.610 --> 00:05:10.755
Do I have any practical use cases for
LinkedLists?

79
00:05:10.755 --> 00:05:14.725
I think the answer for JavaScript,
it's basically, never.

80
00:05:14.725 --> 00:05:20.343
You would almost never implement
this yourself because JavaScript

81
00:05:20.343 --> 00:05:27.253
arrays are still probably gonna be faster
than anything that you could implement.

82
00:05:27.253 --> 00:05:31.792
If I was writing something in C,
or C++, or Java, or

83
00:05:31.792 --> 00:05:36.755
something like that,
it can make a pretty big difference.

84
00:05:36.755 --> 00:05:38.583
One of the nice things
about LinkedLists is,

85
00:05:38.583 --> 00:05:41.338
you don't have to pre-declare
how big they're gonna be, right?

86
00:05:41.338 --> 00:05:44.700
Because you can always just
add something to the end.

87
00:05:44.700 --> 00:05:47.810
Because you can go anywhere
you want in memory.

88
00:05:49.100 --> 00:05:52.578
With ArrayList you kinda have to
pre-declare how much memory you wanna use,

89
00:05:52.578 --> 00:05:54.300
which means that can be inefficient.

90
00:05:56.080 --> 00:06:01.043
I think the Java ones are actually smart
enough to reallocate themselves, but

91
00:06:01.043 --> 00:06:03.988
nonetheless, that's a downfall, as well.

92
00:06:03.988 --> 00:06:06.510
In terms of a practical example,

93
00:06:06.510 --> 00:06:12.373
I'm struggling to think of a concrete
necessarily example, at the moment.

94
00:06:12.373 --> 00:06:17.686
But the general idea is,
if you need to insert into the middle or

95
00:06:17.686 --> 00:06:22.899
delete from some sort of array,
which I'm sure you can fathom

96
00:06:22.899 --> 00:06:29.840
situations where you're doing a lot
of deleting and modifying of arrays.

97
00:06:29.840 --> 00:06:31.760
LinkedLists is where
that's really gonna shine.

98
00:06:31.760 --> 00:06:35.453
But for the most part,
ArrayLists kind of tend to be the default,

99
00:06:35.453 --> 00:06:39.969
because most of the time we tend to read
more from arrays instead of modify them.

100
00:06:41.120 --> 00:06:45.440
So, that's the best general
advice I'm gonna give you.

101
00:06:45.440 --> 00:06:48.575
It's not really super top of mind,
again, cuz JavaScript, for

102
00:06:48.575 --> 00:06:51.318
the most part you don't really
have to care about these.

