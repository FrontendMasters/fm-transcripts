WEBVTT

1
00:00:00.274 --> 00:00:06.667
All right,
let's hop into the CodeSandbox here,

2
00:00:06.667 --> 00:00:09.348
it's under Search.

3
00:00:11.822 --> 00:00:14.392
So search.test.js.

4
00:00:17.848 --> 00:00:19.955
I have two for you here to try.

5
00:00:19.955 --> 00:00:25.539
You can do a linear search, if you
want to, which is just really you're

6
00:00:25.539 --> 00:00:30.949
gonna loop over and say, is this it,
is this it, is this it, right?

7
00:00:30.949 --> 00:00:34.270
Feel free to skip that one, I'm actually
less interested in you doing that one.

8
00:00:34.270 --> 00:00:39.235
I'm more interested in you
doing the binary search here.

9
00:00:39.235 --> 00:00:42.043
So here we have a binary search.

10
00:00:46.109 --> 00:00:47.190
Here, right?

11
00:00:47.190 --> 00:00:49.944
And we're looking for
someone here in this, right?

12
00:00:49.944 --> 00:00:52.251
In this case, we're looking for 23.

13
00:01:00.440 --> 00:01:04.943
Study them in there it is looking for,
right?

14
00:01:04.943 --> 00:01:06.135
Okay?

15
00:01:10.249 --> 00:01:13.185
So I'm gonna call it binary
search with 23, right?

16
00:01:13.185 --> 00:01:18.239
And what I want you to do here on this
unit test is, I want you to write a binary

17
00:01:18.239 --> 00:01:23.806
search where you look for ID 23 and you
return back to me this particular object.

18
00:01:26.286 --> 00:01:29.232
And then if you have extra time, go ahead
and give the linear search a shot too.

19
00:01:35.124 --> 00:01:40.913
All right, let's do some searching,
soul searching.

20
00:01:40.913 --> 00:01:46.560
I'm gonna change LinearSearch to be
called soul search instead, just kidding.

21
00:01:46.560 --> 00:01:48.054
Let's just do this linear
search really quick.

22
00:01:48.054 --> 00:01:53.439
It's just one really simple for
loop here, let i = 0,

23
00:01:53.439 --> 00:01:59.641
and there's a just a trillion
different ways you could do this.

24
00:01:59.641 --> 00:02:06.618
I'm gonna do with a for loop because
we've been doing that the whole time,

25
00:02:06.618 --> 00:02:12.403
but you absolutely could have
done a reduce a filter for each.

26
00:02:14.873 --> 00:02:18.058
Something like that,
any one of those would have been fine.

27
00:02:18.058 --> 00:02:24.367
if (id === array[i].id),

28
00:02:24.367 --> 00:02:28.998
then return array[i].

29
00:02:31.242 --> 00:02:36.739
Otherwise, you can return null,
you can return undefined.

30
00:02:36.739 --> 00:02:41.459
I'm gonna do return void 0,
which is undefined, right?

31
00:02:44.598 --> 00:02:50.644
Okay, so here we do that, remove the skip.

32
00:02:50.644 --> 00:02:56.086
Take a look at the tests and
run them again.

33
00:02:56.086 --> 00:03:02.790
We should here on search, so
far so good, nothing broken, cool.

34
00:03:02.790 --> 00:03:06.375
Binary search here,

35
00:03:06.375 --> 00:03:10.754
let's do, let min = 0,

36
00:03:10.754 --> 00:03:16.144
let max = array.length-1.

37
00:03:16.144 --> 00:03:20.981
Again, array here, by definition,
must be a sorted array or

38
00:03:20.981 --> 00:03:23.781
binary search is not going to work.

39
00:03:23.781 --> 00:03:31.243
Whereas, linear search here it can be
done on any array, sorted or not, okay?

40
00:03:31.243 --> 00:03:34.020
Let index, let element.

41
00:03:37.271 --> 00:03:45.217
Okay, and
then you just say while(min &lt;= max),

42
00:03:45.217 --> 00:03:51.727
index is going to be equal to Math.floor.

43
00:03:55.790 --> 00:04:02.195
And here we're gonna say
(min + max) divided by 2.

44
00:04:02.195 --> 00:04:07.571
So again, we're kinda just
moving halfway between these.

45
00:04:07.571 --> 00:04:09.521
That's what this index is,

46
00:04:09.521 --> 00:04:13.515
the Math.floor(( min +
max) divided by 2) equals.

47
00:04:13.515 --> 00:04:17.924
And then we're gonna say element at that

48
00:04:17.924 --> 00:04:23.117
particular array is equal to array[index].

49
00:04:23.117 --> 00:04:26.316
So this is whatever the element is here.

50
00:04:26.316 --> 00:04:32.859
So we're gonna say here if
element.id is greater than id.

51
00:04:35.891 --> 00:04:41.637
Then min is going to
be equal to index + 1.

52
00:04:41.637 --> 00:04:46.010
So that we're setting the minimum

53
00:04:46.010 --> 00:04:51.136
index to be one greater than the elements

54
00:04:51.136 --> 00:04:56.131
that we were just looking for, right?

55
00:04:56.131 --> 00:05:00.222
Also the element that we were just
looking at rather, not looking for.

56
00:05:00.222 --> 00:05:04.922
Else if element.id is greater than id,

57
00:05:04.922 --> 00:05:12.541
then max is going to be equal to index- 1,
as you might imagine.

58
00:05:12.541 --> 00:05:17.264
So if the item that we're looking at is
greater than the thing that we're looking

59
00:05:17.264 --> 00:05:20.675
for, then we're going to move
the max one underneath it.

60
00:05:24.446 --> 00:05:28.205
So if it's not less than,
and it's not greater than,

61
00:05:28.205 --> 00:05:31.899
then that means by definition,
it's that, right?

62
00:05:31.899 --> 00:05:36.058
We found the thing,
in which case we say return element.

63
00:05:40.683 --> 00:05:46.022
Okay, so if it's in the array,
this logic will find it.

64
00:05:46.022 --> 00:05:50.297
If this while loop breaks, which means
that the max and the min overlap,

65
00:05:50.297 --> 00:05:54.236
that means we have looked at the entire
array and we did not find it.

66
00:05:54.236 --> 00:05:57.502
In which case you can return null,
return void 0.

67
00:05:57.502 --> 00:06:01.343
I like undefined because it just
means that that's not there, right?

68
00:06:01.343 --> 00:06:04.826
You technically could have
something that's null in the array,

69
00:06:04.826 --> 00:06:06.862
but again, we're splitting hairs.

70
00:06:06.862 --> 00:06:12.123
It depends on the semantics you want
to assign to undefined or null, but

71
00:06:12.123 --> 00:06:17.577
I think actually undefined a better
answer, so let's just go with that.

72
00:06:17.577 --> 00:06:20.461
Okay, so that should do that.

73
00:06:20.461 --> 00:06:25.472
Let's go ahead and remove this and
see if our tests pass.

74
00:06:28.804 --> 00:06:34.316
And looking down here at search.test.js,
looks like it works.

