[00:00:00]
>> Let's do some searching, soul searching. I'm gonna change linearSearch to be called soulSearch instead. Just kidding. Let's just do this linearSearch really quick. It's just one really simple for loop here, let i = 0. And there's just a trillion different ways you could do this. I'm gonna do with a for loop because we've been doing that the whole time.

[00:00:27]
But you absolutely could have done a reduce, a filter, for each, Something like that. Anyone of those would have been fine. If id === array i.id, then return array i. Otherwise, you can return null, you can return undefined. I'm gonna do return void 0, which is undefined, right?

[00:01:08]
Okay, so here we do that, remove the skip. Take a look at the tests. Run them again. We should here on search. So far so good, nothing broken, cool. binarySearch here. Let's do let min = 0. Let max = array.length- 1. Again, array here by definition must be a sorted array or binarySearch is not going to work.

[00:01:47]
Whereas, linearSearch here, it can be done on any array, sorted or not. Okay, let index, let element. Okay, and then you're gonna say while min is less than or equal to max, Index is going to be equal to math.floor, And here we're gonna say (min + max) / 2.

[00:02:25]
So again, we're kind of just moving halfway between these. That's what this index is, the math.floor((min + max) / 2 equals. And then we're gonna say element, at that particular array, is equal to array index. So this is whatever the element is here. So we're gonna say here if element.id is greater than id, Then min is going to be equal to index + 1.

[00:03:05]
So that we're setting the minimum index to be 1 greater than the elements that we were just looking for, right? Or so the element that we were just looking at rather, not looking for. Else if element.id is greater than id, then max is going to be equal to index- 1 as you might imagine.

[00:03:36]
So if the item that we're looking at is greater than the thing that we're looking for, then we're going to move the max one underneath it. So if it's not less than, and it's not greater than, then that means by definition, it's that, right, we found the thing, in which case we say return element.

[00:04:04]
Okay, so if it's in the array, this logic will find it. If this while loop breaks, which means that the max and the min overlap. That means we have looked at the entire array and we did not find it. At which case you can return null, return void 0.

[00:04:20]
I like undefined because it just means that that's not there, right? You technically could have something that's null in the array. But again, we're splitting hairs. It depends on the semantics you want to assign to undefined or null. But I think actually undefined is a better answer. So let's just go with that.

[00:04:41]
Okay, so that should do that. Let's go ahead and remove this and see if our tests pass. And looking down here at search, search.test.js, looks like it works. All right, so the first thing on push that we're gonna do, we're gonna say const node = new node, with the value, right?

[00:05:14]
I wanna say this.length++. I wanna say if I don't have a head, this.head, then we're gonna say this.head = node. Otherwise, simply we'll just say this.tail.next = node. And this.tail, = node, right? So the idea here is no matter what, whatever you're pushing on a list is definitely gonna be the last item in the array, right?

[00:05:55]
So this.tail is always gonna be assigned the new node no matter what. If you're pushing in a new head, or sorry, if you're pushing into an empty list, it's also going to be the head. Otherwise, the tail.next is gonna be the node, right? And then again here at the bottom, we're always going to assign the tail to be the new node, okay?

[00:06:21]
Pop, we're just gonna do return this.delete, This.length- 1, right? And then we'll code up the delete here in just a second. For the find, we're just gonna say if index is greater than or equal to this.length, return null, right? So if you try and find something that's out of bounds, just return nothing.

[00:06:49]
Otherwise, let current = this.head. Then we'll do a for loop here, for let i = 0, i is less than or equal to index- 1. And then i++, and we're just gonna say current = current.next. And we'll just kind of be looping through all of those nodes until we arrive on the one that we want.

[00:07:19]
And then at the bottom, we'll return current. So this is just gonna be an internal find sort of method here so that we can find nodes. We never wanna return nodes directly to the consumer of this linked list cuz they wouldn't know what to do with it, right?

[00:07:33]
This is an internal data structure here. Forget, We're just gonna say const node = this._find(index). And here we can say if there's no node here, then return void 0. If you wanna return undefined, otherwise return node.value. So that's the get, pretty straightforward. And then delete is where things tend to get a little bit more hairy.

[00:08:12]
So the first thing we wanna do is we want to handle if they try and delete the head. So if index === 0, then we need to handle that specifically. So const head = this.head. And we're gonna say if head. Then we're gonna say this.head = head.next. Otherwise, we're gonna say this.head = null, because we need to handle it differently, if it's the only item in the array versus it's just the head of a long list, right?

[00:08:55]
That's what this is doing here. And then here underneath that, we'll just say this.length -- and return head.value. So that handles it if we're trying to delete the head. Otherwise, we need to say const node = this._find(index- 1), right? So this is gonna find the node previous to the one that we wanna delete.

[00:09:27]
We're gonna say const excise, as in the node that we wanna cut out, is gonna be equal to node.next, right? Then we're gonna say if there's no excise, Then here you could throw an error or something like that, we can return void 0. You can do it if you want, I returned null.

[00:09:49]
Depends on what kinda semantics you wanna assign to it. Then we're gonna say node.next = excise.next. I'm gonna say if there's no node.next, then this.tail = node.next. And this.length --, And return excise.value. Okay, so let's see if that passes our tests. And it does, looks great. So again, this is kind of where linked list fall down, is that anytime you wanna do a look up, you have to loop through everything to try and find the thing that you're looking for, which is not necessarily always ideal.

[00:10:51]
But this is where it's kinda really great, is these deletes. Despite the fact that this code is kinda not fun to look at, it's constant time, right? All you got to do is move the pointer from here to here. And it's just pointing at a new node. And we don't have to shift our entire array over like we had to do with array list.

[00:11:12]
Okay, so, questions about linked lists.
>> So just a question on line 48. So, why is there index- 1, less than or equal to index- 1. Why can't we do i less than index?
>> Cuz that's what's correct. [LAUGH] I mean, we can look here.
>> I'm just thinking, what's the difference, right?

[00:11:44]
i less than index or i less than or equal to index- 1.
>> I think it's just because we need to find, that's the way that those nodes had been numbered. I guess you could restructure it so that the indexes would be different. Like which index refers to which node, because it all depends on what kind of semantic value assigned to it.

[00:12:14]
But yeah, I think that's the one that we'll find the correct one cuz we're just looping through all these currents until we find the one that we're looking for.
>> I think what she's saying you can remove -1, if you remove less than or equal, if you just make it less than.

[00:12:31]

>> I got you. I see what you're saying.
>> Yeah, that's what I meant.
>> Totally.
>> Yeah, and the other question is, in line 65, we are making a head-tail model, but we are not making the tail to.
>> This is true, Yep, that would have been a bug, so that's correct.

[00:13:07]
Good call. As you can see, these tests are not exhaustive either. So I'm sure there's probably more bugs buried in here. Again, really what I'm going for, the core of what I really wanted you to see was this logic of how to find something in a linked list.

[00:13:24]
And this logic here of just moving the pointer around, right? Again, the point of this course is not, so one, thank you for helping me find the bug. I think that's good to show people. But more what I'm interested in, what you find here is, what's the actual logic here?

