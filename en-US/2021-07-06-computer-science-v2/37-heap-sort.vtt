WEBVTT

1
00:00:00.500 --> 00:00:05.241
Alright, let's talk about heap sort.

2
00:00:05.241 --> 00:00:09.024
Heap sort is kind of another
really interesting one.

3
00:00:09.024 --> 00:00:14.237
You kind of are gonna emulate a tree
inside of an array and then by doing that

4
00:00:14.237 --> 00:00:19.301
we're able to kind of identify what
the largest number in the array is.

5
00:00:19.301 --> 00:00:24.289
And then we can use that data structure to
then sort a list by knowing always what

6
00:00:24.289 --> 00:00:26.572
the largest number in the array is.

7
00:00:26.572 --> 00:00:30.481
So, let's kind of unpack
that a little bit more.

8
00:00:30.481 --> 00:00:32.674
So again, a heap is an array.

9
00:00:32.674 --> 00:00:39.538
A heap is inherently array, but
it represents a tree like data structure.

10
00:00:39.538 --> 00:00:44.062
You're gonna find that these heap data
structures are kind kind of similar to

11
00:00:44.062 --> 00:00:46.441
binary search trees, but not totally.

12
00:00:49.589 --> 00:00:51.694
Heaps are used a lot in computing,

13
00:00:51.694 --> 00:00:55.917
they're typically used to represent
things like priority queues.

14
00:00:55.917 --> 00:01:00.108
And so, a priority queue is a queue, but

15
00:01:00.108 --> 00:01:06.161
every item in the queue has
a priority associated with it.

16
00:01:06.161 --> 00:01:08.258
A good example is like network stacks,
right.

17
00:01:08.258 --> 00:01:12.308
Some Internet traffic that you have
is more important than other pieces

18
00:01:12.308 --> 00:01:14.070
of Internet traffic you have.

19
00:01:14.070 --> 00:01:17.075
A good example that would be like,
if you're doing Netflix and

20
00:01:17.075 --> 00:01:20.760
Dropbox at the same time, you want that
Netflix traffic to be the most highest

21
00:01:20.760 --> 00:01:23.653
priority because you don't want
your video to stutter, but

22
00:01:23.653 --> 00:01:25.551
your Dropbox can sync whenever right.

23
00:01:25.551 --> 00:01:29.343
If your Dropbox drops some packets or it
gets slowed down or something like that,

24
00:01:29.343 --> 00:01:30.472
that's totally fine.

25
00:01:30.472 --> 00:01:36.380
You're gonna take 90 minutes instead
of an hour to sync all your changes.

26
00:01:36.380 --> 00:01:42.643
So, that's all represented by a heap
typically, not always but frequently.

27
00:01:42.643 --> 00:01:46.527
So, anytime that you're
talking about priority queues,

28
00:01:46.527 --> 00:01:49.867
your brains just automatically go heaps,
right,

29
00:01:49.867 --> 00:01:53.531
cuz that's just like those
two just kinda go together.

30
00:01:56.010 --> 00:02:01.182
Okay, so let's talk about
the difference between a binary heap

31
00:02:01.182 --> 00:02:06.371
which is an array and a BST,
which is a tree like data structure.

32
00:02:06.371 --> 00:02:09.151
So BST is typically made
up of node objects.

33
00:02:09.151 --> 00:02:13.535
Typically, I imagine you can model it
other ways, but the way that we just did

34
00:02:13.535 --> 00:02:18.073
it together, it was made up of nodes,
whereas a binary heap is always an array.

35
00:02:18.073 --> 00:02:21.965
The biggest difference here
in a binary search tree,

36
00:02:21.965 --> 00:02:25.250
there is a strict rule
that if you have a node,

37
00:02:25.250 --> 00:02:31.148
everything on the left is smaller and
everything on the right is bigger, right.

38
00:02:31.148 --> 00:02:33.181
That's a strict rule for
a binary search tree.

39
00:02:33.181 --> 00:02:36.401
If it doesn't adhere to those rules,
it's not a binary a search tree.

40
00:02:36.401 --> 00:02:39.460
That's not necessarily
true in a binary heap.

41
00:02:39.460 --> 00:02:42.899
In a binary heap,
the only rule is in fact,

42
00:02:42.899 --> 00:02:46.914
you can see it here,
the numbers that are higher so

43
00:02:46.914 --> 00:02:52.471
like the 7 is always bigger than
the numbers that are lower, right.

44
00:02:52.471 --> 00:02:55.217
So in this particular case, well,

45
00:02:55.217 --> 00:02:59.986
I have another one down here,
yeah, let's look at this one.

46
00:03:02.071 --> 00:03:05.030
So this 100, it's bigger than 19 and
it's bigger than 36.

47
00:03:05.030 --> 00:03:09.386
So the only guarantee that I can
make about a binary heap is that,

48
00:03:09.386 --> 00:03:12.947
all the numbers underneath it are smaller,
right.

49
00:03:12.947 --> 00:03:16.853
So if I have 19 here, all the numbers
underneath 19 the only thing I know about

50
00:03:16.853 --> 00:03:18.530
them, is that they're smaller.

51
00:03:18.530 --> 00:03:24.575
There's no semantics of what goes left and
what goes right, the only thing is

52
00:03:24.575 --> 00:03:30.904
that I know is that anything that's lower
than it in the tree is smaller, right.

53
00:03:30.904 --> 00:03:33.203
So, you can see here I have 3 over here,
right, so

54
00:03:33.203 --> 00:03:36.163
this wouldn't be a binary search
tree because 3 is on the right.

55
00:03:36.163 --> 00:03:42.875
But it is a valid binary heap
because 3 is smaller than 19.

56
00:03:42.875 --> 00:03:44.121
Does that make sense so far?

57
00:03:47.938 --> 00:03:50.111
Cool, so that's the next rule.

58
00:03:52.878 --> 00:03:57.072
If you do an in order traversal of a BST,
you get an order array, right.

59
00:03:57.072 --> 00:03:59.342
That's one of the things that you and
I looked at previously.

60
00:03:59.342 --> 00:04:04.544
That's not true with a binary heap, right,
we could do an in order traversal here,

61
00:04:04.544 --> 00:04:07.934
right, and you would not get
a sorted list out of that.

62
00:04:07.934 --> 00:04:12.255
And then probably one of the last really
big differences is that a binary heap is

63
00:04:12.255 --> 00:04:13.642
always a complete tree.

64
00:04:13.642 --> 00:04:15.325
Let's see what I mean when I say complete.

65
00:04:17.180 --> 00:04:20.417
It always fills out as
maximally as possible, right.

66
00:04:20.417 --> 00:04:25.361
So notice that 2 and 7 are here
underneath the 17 and 3 has no children.

67
00:04:25.361 --> 00:04:30.154
If I moved 7 to be underneath 3, that
wouldn't be or let's say 7 underneath 25,

68
00:04:30.154 --> 00:04:32.684
even though that would
be adhering to the rule

69
00:04:32.684 --> 00:04:36.964
that 7 is smaller than 25 smaller
than 36 which is smaller than 100.

70
00:04:36.964 --> 00:04:39.463
It wouldn't be a maximal tree or

71
00:04:39.463 --> 00:04:44.751
a complete tree because we have to
fill out this part first, right.

72
00:04:44.751 --> 00:04:49.677
So if we were gonna add another number
to this, let's say we're gonna add 1,

73
00:04:49.677 --> 00:04:53.277
right, the 1 would go
underneath this 3 here, right.

74
00:04:53.277 --> 00:04:59.356
It has to,
we couldn't put it anywhere else Cool,

75
00:04:59.356 --> 00:05:03.552
so that's what I mean when I say
it is a complete binary tree.

76
00:05:06.361 --> 00:05:08.850
Binary heaps come in two flavors.

77
00:05:08.850 --> 00:05:10.461
This is a max heap.

78
00:05:10.461 --> 00:05:13.392
Max heaps are useful for
sorting numbers, right.

79
00:05:13.392 --> 00:05:19.495
So, we'll just see here in just a second
how to turn this into a sorted list.

80
00:05:19.495 --> 00:05:25.622
But there's also a min heap, right, which
you could use to do a reverse sorted list.

81
00:05:25.622 --> 00:05:30.213
And the only difference between max heap
and a min heap, this is a max because

82
00:05:30.213 --> 00:05:33.970
the top node, the root node is
the largest number in the heap.

83
00:05:36.200 --> 00:05:38.384
The min heap would be the opposite,
right, so

84
00:05:38.384 --> 00:05:41.746
1 would be the root node here cuz
it's the smallest number in the heap.

85
00:05:44.621 --> 00:05:47.402
Don't have to worry about the date today,
we're just doing max heaps.

86
00:05:51.790 --> 00:05:56.516
Okay, so how do we represent
this tree here as an array?

87
00:05:58.043 --> 00:06:02.939
Well for any array in the index, or
sorry, in any index in the array,

88
00:06:02.939 --> 00:06:06.908
so let's say like 19 here,
which would be index one,

89
00:06:06.908 --> 00:06:10.708
the way you find this left
child is this formula here,

90
00:06:10.708 --> 00:06:15.450
which is 2n+1, and
then you find this right child has 2n+2.

91
00:06:15.450 --> 00:06:22.095
So this is 0, so
2 times 0 plus 1, so that's 1.

92
00:06:22.095 --> 00:06:27.940
The left child of 100 is at index 1,
and the right child is at index 2.

93
00:06:27.940 --> 00:06:32.918
If we go down to this one here,
the index 1,

94
00:06:32.918 --> 00:06:36.559
its left child will be 2n + 1.

95
00:06:36.559 --> 00:06:41.587
So that's 2 plus 1, so
its left child is at index 3, and

96
00:06:41.587 --> 00:06:47.040
its right child as at 2n + 2,
so 2 times 1, 2 plus 2 is 4.

97
00:06:47.040 --> 00:06:53.475
So you can see that here is the array
representation of this binary heap.

98
00:06:53.475 --> 00:07:00.394
0 is the route 100 it's left child
is at 19 it's right child this here,

99
00:07:00.394 --> 00:07:05.078
36 at index 2, okay, and
then it's left child,

100
00:07:05.078 --> 00:07:10.082
17, right, is here and 3,
then 36 is left child,

101
00:07:10.082 --> 00:07:16.055
25 is there and then right child is 1,
right, 2, 7, right.

102
00:07:16.055 --> 00:07:18.837
So you kinda just go down
the list right that, so

103
00:07:18.837 --> 00:07:21.631
it's like a totally flat
structure like that.

104
00:07:21.631 --> 00:07:26.650
And again, this is the formula 2n +1 finds
the left child for any index in the array.

105
00:07:26.650 --> 00:07:32.020
So if I had index 10, and
I wanted to know where its left child was,

106
00:07:32.020 --> 00:07:36.178
I'd say 2 times n, 20, right, plus 1, 21.

107
00:07:36.178 --> 00:07:40.772
So, the left child of
index 10 is at index 21,

108
00:07:45.178 --> 00:07:48.793
Okay, that's how we get everything
down into a squished array.

109
00:07:50.780 --> 00:07:53.929
That's why it's also it's important
that it's a complete tree, right,

110
00:07:53.929 --> 00:07:56.300
cuz we're just adding numbers
on to the end of the array.

111
00:07:58.600 --> 00:08:00.541
That's why we don't have
any holes in our tree.

112
00:08:04.145 --> 00:08:06.767
Okay, good so far?

113
00:08:10.370 --> 00:08:17.400
Okay, So once you construct a heap, right?

114
00:08:17.400 --> 00:08:19.245
So once we make this data structure, and

115
00:08:19.245 --> 00:08:22.358
I'll show you how to make this data
structure here in just a second.

116
00:08:22.358 --> 00:08:26.820
The one thing that you always
know is that the index 0 is

117
00:08:26.820 --> 00:08:29.351
the largest item in the array.

118
00:08:29.351 --> 00:08:31.539
100% of the time, right?

119
00:08:31.539 --> 00:08:35.859
Because the rule that this one has to be
larger than the things underneath it,

120
00:08:35.859 --> 00:08:40.244
lends itself to the fact that the root
has to be the largest because it's larger

121
00:08:40.244 --> 00:08:40.920
than this.

122
00:08:40.920 --> 00:08:42.180
It's larger than this.

123
00:08:42.180 --> 00:08:44.024
And these are both larger than
everything underneath them.

124
00:08:44.024 --> 00:08:47.088
Therefore, 100 must be the largest thing.

125
00:08:50.515 --> 00:08:57.533
So all we do with a heap sort,
is we turn an array into a heap, right?

126
00:08:57.533 --> 00:09:02.203
So we turn an array so
it looks something like this, right?

127
00:09:02.203 --> 00:09:07.280
Then we just take the top root off,
so we just remove index 0.

128
00:09:07.280 --> 00:09:09.444
And we remake the heap.

129
00:09:09.444 --> 00:09:13.737
So in this particular case,
36 would be the largest item here.

130
00:09:13.737 --> 00:09:16.595
So what would happen, we would remove 100.

131
00:09:16.595 --> 00:09:19.020
We'd put that into our new sorted array.

132
00:09:19.020 --> 00:09:21.160
We'd move 36 up, right?

133
00:09:21.160 --> 00:09:23.260
So now 36 would be the root.

134
00:09:23.260 --> 00:09:26.740
And then we'd moved 25 up to be here,
right?

135
00:09:26.740 --> 00:09:32.010
So then, yeah, so
we keep moving things up.

136
00:09:32.010 --> 00:09:33.851
That process is called heapifier.

137
00:09:38.269 --> 00:09:41.621
And then we just kind
of continue to do that.

138
00:09:41.621 --> 00:09:44.668
We remove items from the array and
then we heapify the array,

139
00:09:44.668 --> 00:09:46.353
again to make it a max heap again.

140
00:09:49.505 --> 00:09:56.595
So, The first

141
00:09:56.595 --> 00:09:59.556
step of making a max heap.

142
00:09:59.556 --> 00:10:02.274
If I have an array that's
not a max heap already.

143
00:10:02.274 --> 00:10:04.746
So let's go through it step by step here.

144
00:10:04.746 --> 00:10:08.145
Let's say this is our
initial array right here, and

145
00:10:08.145 --> 00:10:13.640
we're gonna do heap sort on this,
5, 3, 2, 10, 1, 9, 8, 6, 4, 7.

146
00:10:13.640 --> 00:10:16.798
The first thing that you're gonna do,
is you're gonna start at index 4,

147
00:10:16.798 --> 00:10:17.607
which is this one.

148
00:10:17.607 --> 00:10:19.853
Then we're going to work backwards here.

149
00:10:19.853 --> 00:10:21.271
And we're gonna call heapify,

150
00:10:21.271 --> 00:10:24.693
which is a function that I'm gonna show
you how to write here in just a second.

151
00:10:24.693 --> 00:10:29.218
On every item in the array, all heapify
does is it makes sure that this

152
00:10:29.218 --> 00:10:33.369
particular item is bigger than
all of its children in the heap.

153
00:10:36.422 --> 00:10:38.739
Okay, so I'm gonna start this one.

154
00:10:38.739 --> 00:10:44.437
The left child is index 9,
which is this one value 7.

155
00:10:44.437 --> 00:10:48.809
And it's right index would be,
sorry, right child would be index 10,

156
00:10:48.809 --> 00:10:51.630
which is out of bounds, right?

157
00:10:51.630 --> 00:10:54.148
So we have 1 here.

158
00:10:54.148 --> 00:10:56.369
We have 7,
which is going to this left child.

159
00:10:56.369 --> 00:11:01.461
And it's out of bounds, so
it doesn't have a right child.

160
00:11:01.461 --> 00:11:05.370
7 is larger than 1, so we're gonna
swap the left child and the parent.

161
00:11:05.370 --> 00:11:09.740
So after that, you get 7 and 1, right?

162
00:11:09.740 --> 00:11:15.494
That's all that happened there,
is these just swapped places, Okay?

163
00:11:15.494 --> 00:11:19.460
Then we're gonna run that
again on this one, index 3.

164
00:11:20.460 --> 00:11:25.410
Its left child is index 7,
which has value 6 here, right?

165
00:11:25.410 --> 00:11:29.128
And its right child is index 8, value 4.

166
00:11:29.128 --> 00:11:33.962
So these two right here
are the child of this one.

167
00:11:36.820 --> 00:11:39.101
Neither is larger than 10,
so we don't do anything.

168
00:11:39.101 --> 00:11:42.540
And we just go to the next iteration,
okay?

169
00:11:42.540 --> 00:11:48.210
We're now going to index 2,
value 2, which is this one, right?

170
00:11:51.590 --> 00:11:56.496
Index 2, value 2,
left child is index 5, value 9.

171
00:11:56.496 --> 00:12:00.540
And the right child is 6, index 8, right?

172
00:12:00.540 --> 00:12:05.352
So these two are the child
of this one here.

173
00:12:05.352 --> 00:12:08.497
So obviously 9 is the largest here,
and it's larger than 2.

174
00:12:08.497 --> 00:12:12.158
So we're just gonna swap 2 and 9.

175
00:12:12.158 --> 00:12:20.858
So now we have 9 here and
2 has gone there, Okay?

176
00:12:25.146 --> 00:12:27.893
Then we're gonna go to index 1 value 3.

177
00:12:27.893 --> 00:12:30.441
So we're going here.

178
00:12:30.441 --> 00:12:35.160
The left child is index 3 value 10,
so this one.

179
00:12:35.160 --> 00:12:38.804
And the right child is index 4 value 7,
this one.

180
00:12:38.804 --> 00:12:46.207
So these two are the child of this one,
Okay?

181
00:12:46.207 --> 00:12:50.347
We call heapify on that, obviously 10
is gonna be the largest number there.

182
00:12:50.347 --> 00:12:52.706
So you're just gonna swap those two.

183
00:12:56.433 --> 00:13:00.716
So we swap 3 and 10.

184
00:13:00.716 --> 00:13:06.545
But now we have to call heapify on
the one that we swapped with, right?

185
00:13:06.545 --> 00:13:10.847
Because now we don't necessarily have
that guarantee that we had before.

186
00:13:10.847 --> 00:13:15.551
So we moved 3 to here, and now we
have to call heapify on this one, and

187
00:13:15.551 --> 00:13:18.975
make sure that it's bigger
than it's children.

188
00:13:18.975 --> 00:13:22.902
Its left child is 6, and
it's right child is 4.

189
00:13:22.902 --> 00:13:24.003
6 is the biggest one of those.

190
00:13:24.003 --> 00:13:26.975
So we're gonna swap 3 and 6 here.

191
00:13:26.975 --> 00:13:34.224
So we end up with 3 being all the way
down there now, and 6 being over here.

192
00:13:37.040 --> 00:13:39.355
Okay, last one we have the root.

193
00:13:40.405 --> 00:13:44.727
So its left child is 10,
and its right child is 9.

194
00:13:44.727 --> 00:13:45.766
10 is the biggest.

195
00:13:45.766 --> 00:13:48.304
So we're gonna move 10 and 5.

196
00:13:48.304 --> 00:13:50.478
Then we're gonna call heapify again on 5,

197
00:13:50.478 --> 00:13:53.575
to make sure that it is
in the correct place.

198
00:13:53.575 --> 00:13:58.814
Its left child is 6, and
it's right child is 7.

199
00:13:58.814 --> 00:14:00.544
7 is the biggest there.

200
00:14:00.544 --> 00:14:02.063
So we'll move 7 and 5.

201
00:14:02.063 --> 00:14:04.837
So now 7 is here, 5 is down here.

202
00:14:08.293 --> 00:14:11.564
Okay, we currently call heapify on that.

203
00:14:11.564 --> 00:14:18.495
Its left child is 1, and it doesn't have
a right child cuz that's out of bounds.

204
00:14:18.495 --> 00:14:20.375
So that's fine.

205
00:14:20.375 --> 00:14:24.477
That's okay.
So now that we've done this initial

206
00:14:24.477 --> 00:14:30.233
heapifizition, I guess is
how we would say it, right?

207
00:14:30.233 --> 00:14:33.810
Now this is considered a max heap, right?

208
00:14:33.810 --> 00:14:36.170
This is now officially a max heap,
we've built one.

209
00:14:38.120 --> 00:14:44.374
So all we're gonna do now, and this is
actually kind of fun in my opinion.

210
00:14:44.374 --> 00:14:46.520
Maybe I have a warped sense of what's fun.

211
00:14:46.520 --> 00:14:47.360
That's probably true.

212
00:14:47.360 --> 00:14:50.420
I probably admit that too
much in this course as well.

213
00:14:50.420 --> 00:14:53.500
Anyway, you're stuck listening to me,
anyway.

214
00:14:53.500 --> 00:14:57.823
What we're gonna do is,
now we're gonna actually go through and

215
00:14:57.823 --> 00:14:59.880
do the sorting process.

216
00:14:59.880 --> 00:15:04.279
So the one thing that we know, for sure,
with this max heap that we have here,

217
00:15:04.279 --> 00:15:06.725
is 10 is definitely the biggest number.

218
00:15:06.725 --> 00:15:09.486
Anything else we can't super guarantee,
but

219
00:15:09.486 --> 00:15:12.256
we can guarantee 10's the biggest number.

220
00:15:12.256 --> 00:15:15.763
So, all we're gonna do is
we're gonna swap 10 and 1.

221
00:15:15.763 --> 00:15:20.099
So 10 and
the last number in your heap, okay?

222
00:15:20.099 --> 00:15:23.391
So now we've moved 10 here to
the last number in the heap.

223
00:15:23.391 --> 00:15:26.710
And you and I both know now,
that's the correct place for it, right?

224
00:15:26.710 --> 00:15:29.730
Because it's the last index in our array.

225
00:15:29.730 --> 00:15:31.770
And it is the biggest number, okay?

226
00:15:33.370 --> 00:15:35.613
Well, now 1's out of place, right?

227
00:15:35.613 --> 00:15:36.794
That's not correct.

228
00:15:36.794 --> 00:15:38.761
So what are we gonna do?

229
00:15:38.761 --> 00:15:40.600
We're just gonna call heapify on it,
right?

230
00:15:41.780 --> 00:15:46.931
Cuz we know everything underneath here
was a correct heap until we swapped this.

231
00:15:46.931 --> 00:15:49.251
But as long as we call heapify on this,
right?

232
00:15:49.251 --> 00:15:51.885
So that's actually moved 1.

233
00:15:51.885 --> 00:15:56.720
So you had 7 and 9 here when
you moved the 9 up here, right?

234
00:15:56.720 --> 00:16:00.260
And then we have to call
the heapify again on that one.

235
00:16:00.260 --> 00:16:04.264
And that's going to move
it with the 8 here.

236
00:16:06.547 --> 00:16:12.920
Okay, and then we would call heapify on
this again, but it has no children, right?

237
00:16:12.920 --> 00:16:19.960
So now, again this 9 for sure is
the largest value in our heap, right?

238
00:16:19.960 --> 00:16:24.170
Definitely, so
all we're gonna do again is swap 9 and 4.

239
00:16:25.210 --> 00:16:26.479
So cuz now we know for

240
00:16:26.479 --> 00:16:30.831
sure 9 and 10 are definitely the two
biggest numbers in our array.

241
00:16:30.831 --> 00:16:35.709
Okay, now we have 4 up here and
we just call heapify again, on this one.

242
00:16:35.709 --> 00:16:38.753
So on and so forth,
just swapping it to the end and

243
00:16:38.753 --> 00:16:41.890
calling heapify to get it
back to being a max heap.

244
00:16:41.890 --> 00:16:46.146
Until eventually,
you end up with a sorted list.

245
00:16:50.841 --> 00:16:57.330
Okay, [LAUGH] that is how
you create a max heap.

246
00:16:58.630 --> 00:17:03.253
And how to create a max heap and
also how to do heap sort.

247
00:17:08.329 --> 00:17:12.440
Question then ends up being,
what is the big O of heap sort?

248
00:17:14.720 --> 00:17:17.820
It has constant space complexity, right?

249
00:17:17.820 --> 00:17:19.390
Cuz we're not creating
anything additionally.

250
00:17:22.030 --> 00:17:23.300
I wanna say it's n squared.

251
00:17:25.920 --> 00:17:29.309
I'm gonna show you how many cheated this.

252
00:17:29.309 --> 00:17:33.640
There is a website called Big-O
cheat sheet, and it's exactly that.

253
00:17:34.910 --> 00:17:38.007
So heapsort is n log(n).

254
00:17:38.007 --> 00:17:40.296
Yeah, I guess that makes sense because
not every number has been compared to

255
00:17:40.296 --> 00:17:41.680
every other number.

256
00:17:41.680 --> 00:17:45.260
And you will get an economy of scale as
he started going larger and larger, yep.

257
00:17:45.260 --> 00:17:50.174
So heapsort here,
n log(n) with spatial time complexity of,

258
00:17:50.174 --> 00:17:53.270
sorry, space complexity of constant.

259
00:17:54.400 --> 00:17:59.670
&gt;&gt; So what would be like a good use case
for heapsort besides priority queue?

260
00:18:00.790 --> 00:18:01.780
Only priority queue, right?

261
00:18:03.540 --> 00:18:10.586
&gt;&gt; Yeah, I mean the question is,
when is a good use case for heapsort?

262
00:18:10.586 --> 00:18:15.810
It's got a really good average case,
so like merge sort.

263
00:18:16.950 --> 00:18:21.012
No matter if it's big or small,
like whenever you're creating a max heap,

264
00:18:21.012 --> 00:18:24.439
whether it's a sorted list or
a non sorted list or a random list,

265
00:18:24.439 --> 00:18:26.741
it's very predictable in the way it acts.

266
00:18:26.741 --> 00:18:29.429
Couple that with the fact
that it doesn't have any

267
00:18:29.429 --> 00:18:32.030
additional memory that it has to incur.

268
00:18:32.030 --> 00:18:37.794
And I could see it being useful in
a situation where memory is a concern but

269
00:18:37.794 --> 00:18:40.547
you still need an n log(n) sort.

270
00:18:40.547 --> 00:18:44.750
And you need to be able to handle
sorted lists, reverse sorted lists,

271
00:18:44.750 --> 00:18:46.257
randomly sorted lists.

272
00:18:46.257 --> 00:18:49.659
And you didn't necessarily have any
guarantees about how your data is gonna

273
00:18:49.659 --> 00:18:50.625
look when it came in.

274
00:18:51.750 --> 00:18:54.918
I would say in that very specific case,

275
00:18:54.918 --> 00:18:59.622
you could have a good use case for
perhaps using heapsort,

276
00:18:59.622 --> 00:19:05.382
with the only caveat there is perhaps
quicksort would still be better.

277
00:19:05.382 --> 00:19:10.419
[LAUGH] Yeah, so very likely
merge sort and quicksort more or

278
00:19:10.419 --> 00:19:15.356
less are almost always the sorts
that you wanna use cuz they

279
00:19:15.356 --> 00:19:19.680
just end up being better sorts in general.

280
00:19:19.680 --> 00:19:22.736
But I could see heapsort
being useful in this case.

281
00:19:22.736 --> 00:19:25.526
I would say just in general, the most
useful thing you're gonna take away

282
00:19:25.526 --> 00:19:27.520
from this is what is a heap and,
how do I build a heap?

283
00:19:28.650 --> 00:19:32.530
&gt;&gt; If the arrays are resorted,
it would just return the array, correct?

284
00:19:32.530 --> 00:19:36.350
&gt;&gt; So the question is, what happens
if the array is already sorted?

285
00:19:36.350 --> 00:19:38.990
It wouldn't just return the array.

286
00:19:38.990 --> 00:19:42.404
You would build a max heap, like it would
be like merge sort where it would just

287
00:19:42.404 --> 00:19:44.620
go through all the steps, right?

288
00:19:44.620 --> 00:19:47.970
The heap sort is not gonna care
that it's already sorted, right?

289
00:19:47.970 --> 00:19:50.560
It's just gonna go ahead and
build this max heap.

290
00:19:50.560 --> 00:19:52.610
And then, do its heap sorting.

291
00:19:54.310 --> 00:19:58.640
Yeah, in those particular cases where you
suspect the array might already be sorted.

292
00:19:58.640 --> 00:20:00.810
Insertion sort is typically
the one that you wanna choose.

