WEBVTT

1
00:00:00.600 --> 00:00:04.581
Trees are another way to structure
data that they're not arrays so

2
00:00:04.581 --> 00:00:09.558
that's the first thing that you should be
aware here, like we're not going to be re

3
00:00:09.558 --> 00:00:13.630
implementing arrays like we were
with ArrayList and linked lists.

4
00:00:13.630 --> 00:00:17.780
Trees are usually used for
special case kind of things.

5
00:00:21.110 --> 00:00:23.938
So one we're gonna be
doing binary search trees.

6
00:00:23.938 --> 00:00:26.540
Not all trees necessary have
to be in sorted order but

7
00:00:26.540 --> 00:00:29.840
binary search trees actually
do have to be right?

8
00:00:29.840 --> 00:00:36.705
So for example, like an array of this 1,
5, 2, 7, 3, this is a totally valid array.

9
00:00:36.705 --> 00:00:39.795
But this would not be
a valid binary search tree.

10
00:00:41.785 --> 00:00:47.069
Binary search trees have ordered to them
and they must be sorted at all times or

11
00:00:47.069 --> 00:00:50.184
it's not technically a binary search tree.

12
00:00:50.184 --> 00:00:55.209
If we add 5 to this tree here that had 1,
4, 6, 7, the 5 actually

13
00:00:55.209 --> 00:01:00.012
has to come between these two or
it will not be a binary search tree.

14
00:01:02.602 --> 00:01:05.772
There's many,
many variations of tree structures.

15
00:01:05.772 --> 00:01:07.685
There's B trees, there's red black trees,

16
00:01:07.685 --> 00:01:10.686
there's ABL trees, there's binary
search trees, there's N trees.

17
00:01:10.686 --> 00:01:13.847
There's tons, and tons, and
tons of types of trees.

18
00:01:13.847 --> 00:01:17.586
We're just gonna be looking
at two of them today,

19
00:01:17.586 --> 00:01:21.960
which are binary search trees,
as well as Avielle trees.

20
00:01:21.960 --> 00:01:24.465
At its core tree is pretty
similar to a linked list,

21
00:01:24.465 --> 00:01:26.430
that you're gonna have a node.

22
00:01:26.430 --> 00:01:31.676
And those nodes have next counters or
next pointers, right?

23
00:01:31.676 --> 00:01:33.400
We're gonna call those children, right?

24
00:01:33.400 --> 00:01:37.388
Because there's some inherent idea of
hierarchy here that you have one node and

25
00:01:37.388 --> 00:01:41.570
that node has two children, and that has
two children, and that has two children.

26
00:01:43.660 --> 00:01:49.701
That's important to know about trees as
they have these sorts of hierarchies.

27
00:01:49.701 --> 00:01:53.191
The first one we're gonna be
looking at is a binary search tree.

28
00:01:53.191 --> 00:01:56.311
Are often abbreviate abbreviated as BSTs.

29
00:01:56.311 --> 00:01:59.481
So you'll probably hear me call that.

30
00:01:59.481 --> 00:02:05.320
The binary part means that the node
only has two children, right?

31
00:02:05.320 --> 00:02:08.550
As opposed to a three tree which
will have three children, right.

32
00:02:08.550 --> 00:02:11.149
So binary means two children at most.

33
00:02:11.149 --> 00:02:16.309
So it can have zero children,
one child or two children.

34
00:02:16.309 --> 00:02:20.761
And then the search part means
that it's made for searching.

35
00:02:20.761 --> 00:02:22.880
Are particularly well suited for
searching anyways.

36
00:02:25.310 --> 00:02:29.340
So let's take a look at one such binary
search tree that we have here in

37
00:02:29.340 --> 00:02:30.040
our notes.

38
00:02:31.180 --> 00:02:32.090
So we have 8.

39
00:02:32.090 --> 00:02:35.140
This 8 is gonna be considered
the root of the tree.

40
00:02:35.140 --> 00:02:37.237
I don't know why trees
always go from top down but

41
00:02:37.237 --> 00:02:39.500
that's just the way that
they're always modeled.

42
00:02:41.310 --> 00:02:45.115
So here at the root, 8, everything left.

43
00:02:45.115 --> 00:02:50.125
So in this subtree here is
all smaller than eight.

44
00:02:50.125 --> 00:02:55.265
Everything that's in the right tree, so
the 10, 14, 13 that's all bigger than 8.

45
00:02:56.265 --> 00:02:59.176
That's always true for
every node in the tree always or

46
00:02:59.176 --> 00:03:01.350
it's not a binary search tree.

47
00:03:01.350 --> 00:03:05.650
Right, so if you look here in this 3,
sub tree here, right?

48
00:03:05.650 --> 00:03:11.300
One is smaller than 3, 6, 4, 7 are all
bigger than 3, but all smaller than 8.

49
00:03:12.670 --> 00:03:13.540
That makes sense so far?

50
00:03:15.020 --> 00:03:20.186
So for example, if I put, I don't know,
9 here as the right child of the 7,

51
00:03:20.186 --> 00:03:25.275
that's no longer a valid binary search
tree because 9 is in the left subtree

52
00:03:25.275 --> 00:03:31.190
of 8, and it's bigger than 8, therefore,
it is not a compliant binary search tree.

53
00:03:33.560 --> 00:03:36.412
So I just wanna, again,
you need to be able to make those

54
00:03:36.412 --> 00:03:40.561
sorts of assumptions about your code,
or else, this is not gonna work, right?

55
00:03:44.905 --> 00:03:48.510
So why is this useful?

56
00:03:48.510 --> 00:03:54.082
Let's say I want the data
that's stored in this 4 node.

57
00:03:54.082 --> 00:03:58.283
The nice thing about a binary search
tree is you start with the root and

58
00:03:58.283 --> 00:04:01.840
then you say, okay,
is 4 smaller than or bigger than 8?

59
00:04:01.840 --> 00:04:06.300
Smaller, bigger, smaller, found, right?

60
00:04:07.430 --> 00:04:11.920
So lookups in binary search
trees are no worse than login.

61
00:04:11.920 --> 00:04:13.860
Well, it's not totally true.

62
00:04:13.860 --> 00:04:18.520
The average case scenario of
lookups in a binary search tree or

63
00:04:18.520 --> 00:04:22.386
login, right because we
can skip a bunch of nodes.

64
00:04:22.386 --> 00:04:25.441
So for example, if I'm looking for
4, I didn't have to look at 10.

65
00:04:25.441 --> 00:04:26.528
I didn't have to look at 14.

66
00:04:26.528 --> 00:04:27.460
I didn't have to look at 13.

67
00:04:27.460 --> 00:04:31.250
I didn't have to look at 7 and
I didn't have to look at 1, right?

68
00:04:32.290 --> 00:04:35.160
So the idea here is they
become really easy to find.

69
00:04:35.160 --> 00:04:40.100
So basically, you're prematurely
optimizing your data structure here for

70
00:04:40.100 --> 00:04:41.550
really fast lookups.

71
00:04:43.680 --> 00:04:49.000
The place that famously uses trees for
lookups is database indexes.

72
00:04:49.000 --> 00:04:52.717
So when you say hey MongoDB
make me an index of my IDs,

73
00:04:52.717 --> 00:04:57.869
what MongoDB does is it builds a tree
out of all of your IDs, and then it has

74
00:04:57.869 --> 00:05:03.646
pointers to all the various different
objects that it stores inside of MongoDB.

75
00:05:03.646 --> 00:05:05.800
Now, it's probably not
a binary search tree.

76
00:05:05.800 --> 00:05:09.521
It's probably some other variation of
a tree but it's almost certainly a tree.

77
00:05:11.627 --> 00:05:15.623
So that's why we wanna know how to use
these trees because it's really useful for

78
00:05:15.623 --> 00:05:16.755
really fast lookups.

79
00:05:19.532 --> 00:05:24.000
So again .find is called with 4 here,
right?

80
00:05:24.000 --> 00:05:30.532
Start with the root 8 for smaller so go
left, then you're here on route 3, right?

81
00:05:30.532 --> 00:05:33.560
Or no 3, 4 is larger so go right.

82
00:05:34.580 --> 00:05:37.670
Okay, so you're a node 6 now,
4 is smaller go left.

83
00:05:38.730 --> 00:05:40.440
And then you found here, this is node 4.

84
00:05:40.440 --> 00:05:41.710
So you found the thing
that you're looking at.

85
00:05:41.710 --> 00:05:45.107
So that's the logic of a lookup
inside of a binary search tree.

86
00:05:48.259 --> 00:05:53.158
So big O here, best case scenario is that
it's the root which would be a constant 10

87
00:05:53.158 --> 00:05:54.780
look up, right?

88
00:05:54.780 --> 00:05:56.840
So that's the best case scenario.

89
00:05:56.840 --> 00:06:00.938
The worst case scenario is that you
have to go through every single item in

90
00:06:00.938 --> 00:06:01.840
the array.

91
00:06:01.840 --> 00:06:02.560
Right, so

92
00:06:02.560 --> 00:06:07.520
actually I have it down here that
the worst case scenario looks like this.

93
00:06:08.910 --> 00:06:13.020
So if you add things in a poor order,
you can get 1, 2, 3,

94
00:06:13.020 --> 00:06:17.631
4, 5 and that means I have to go
through everything to find the 5.

95
00:06:17.631 --> 00:06:21.829
We'll talk about how to address that later
but that's the worst case for lookups.

96
00:06:27.110 --> 00:06:29.960
So how do we add elements to the array?

97
00:06:29.960 --> 00:06:34.100
Well, it's relatively the same.

98
00:06:34.100 --> 00:06:39.110
As a find, so let's say here I wanted
to add 7 to this tree right here.

99
00:06:43.070 --> 00:06:44.270
We start at 10.

100
00:06:44.270 --> 00:06:46.580
7 is smaller, so go left.

101
00:06:48.140 --> 00:06:52.070
It's larger than 5 so
go right it's smaller than it, go left.

102
00:06:52.070 --> 00:06:54.500
And there's no node here
as a left child of 8.

103
00:06:55.540 --> 00:06:58.323
So we just add it, right,
we put a brand new node there, and

104
00:06:58.323 --> 00:06:59.730
we end up with 7 right there.

105
00:07:00.840 --> 00:07:06.288
Okay, so delete a few extra steps.

106
00:07:06.288 --> 00:07:08.050
The Delete.

107
00:07:09.200 --> 00:07:13.630
So let's say we have the same tree here,
and we wanna delete 5.

108
00:07:15.750 --> 00:07:18.050
So that ends up being a problem.

109
00:07:18.050 --> 00:07:22.840
Because what do I put there instead,
I can't just not do anything there.

110
00:07:22.840 --> 00:07:26.180
Well, there's kind of two
different options there.

111
00:07:26.180 --> 00:07:31.030
You can put the greatest
left sub child there.

112
00:07:31.030 --> 00:07:34.530
So in this particular case,
the greatest left sub child would be 3.

113
00:07:34.530 --> 00:07:36.750
Okay, and I can put 3 there.

114
00:07:38.600 --> 00:07:41.470
And now the tree still works, right?

115
00:07:41.470 --> 00:07:44.021
So 10, 3, 8, 6, 7 that all still works.

116
00:07:44.021 --> 00:07:48.142
Or I can put the least right child.

117
00:07:48.142 --> 00:07:51.240
So the least right child in
here is gonna be 6, right?

118
00:07:52.240 --> 00:07:56.690
So, if I put 6 here,
the tree still works, right?

119
00:07:58.960 --> 00:08:03.120
So, in that particular case,
I'd have to move 6 up to here and

120
00:08:03.120 --> 00:08:05.871
then I have to move 7
to be the child of 8.

121
00:08:10.545 --> 00:08:15.975
So in this particular case, I would end up
with 6 being here and 7 being down here.

122
00:08:17.504 --> 00:08:21.470
So kind of the cheap way of doing
that as you call delete on 5.

123
00:08:21.470 --> 00:08:27.830
First thing you do is gonna call find on
5, which you're gonna find it here, right?

124
00:08:27.830 --> 00:08:29.121
Right there.

125
00:08:31.678 --> 00:08:33.392
Okay, we found 5.

126
00:08:33.392 --> 00:08:36.639
Then you do find least
right sub child with 5.

127
00:08:36.639 --> 00:08:41.643
In that particular case,
you're gonna find the 6 down here, this 6.

128
00:08:41.643 --> 00:08:45.723
And then all you're gonna do is you
are going to move the value of what was

129
00:08:45.723 --> 00:08:47.222
in this one up to this one.

130
00:08:47.222 --> 00:08:49.685
So that's why I put this marking here.

131
00:08:49.685 --> 00:08:51.967
So you can see this used to be 5, but

132
00:08:51.967 --> 00:08:56.675
now we've just replaced the value
of that 5 there with the 6.

133
00:08:56.675 --> 00:09:00.456
And then we took everything that's
the right child of this one and

134
00:09:00.456 --> 00:09:01.565
we just move it up.

135
00:09:02.745 --> 00:09:08.473
So in that particular case you end
up with 8 having a left child of 7.

136
00:09:16.115 --> 00:09:17.626
Make sense?

137
00:09:20.415 --> 00:09:21.004
Cool.

138
00:09:26.355 --> 00:09:31.220
So, there's a couple other variations
of this scenario, for example,

139
00:09:31.220 --> 00:09:36.011
if you'd call delete 15, and
it has no children, you just delete it.

140
00:09:36.011 --> 00:09:37.292
[LAUGH] Right?

141
00:09:37.292 --> 00:09:41.330
So here, you would just set
the right child of 10 to be nothing.

142
00:09:41.330 --> 00:09:47.441
So that's pretty easy one.

143
00:09:49.131 --> 00:09:52.031
So if I call delete 15, right?

144
00:09:52.031 --> 00:09:54.755
15 has no right child but
it does have a left child.

145
00:09:54.755 --> 00:09:59.018
So all you do is you just move the left
child up, and then you end up with that.

146
00:10:07.902 --> 00:10:10.560
Okay, we talked about worst case BSTs.

147
00:10:10.560 --> 00:10:13.331
If you add everything in
a sorted order to a BST,

148
00:10:13.331 --> 00:10:16.120
you end up with this
kind of straight line.

149
00:10:16.120 --> 00:10:20.692
Which is just like a really
crappy linked list right?

150
00:10:20.692 --> 00:10:26.978
We'll talk about how to mitigate that
with what's called a self balancing

151
00:10:26.978 --> 00:10:32.877
tree in the next lesson, but for
now we're gonna have you build BSTs.

152
00:10:32.877 --> 00:10:38.894
So we talked about why to use a tree you
basically optimizing for search ability.

153
00:10:38.894 --> 00:10:44.114
Because most trees have
an average case look up of log n,

154
00:10:44.114 --> 00:10:52.415
which is good Even on
extremely large data sets.

155
00:10:55.215 --> 00:11:00.660
Okay, so
anyone have any questions about BSTs?

156
00:11:00.660 --> 00:11:01.809
&gt;&gt; Yes sir I have.

157
00:11:01.809 --> 00:11:04.064
&gt;&gt; Okay.

158
00:11:04.064 --> 00:11:09.950
&gt;&gt; Is there any duplication is possible
in BST duplicate element like two.

159
00:11:09.950 --> 00:11:15.170
&gt;&gt; Let me make sure I'm
understanding you're asking,

160
00:11:15.170 --> 00:11:19.230
can you have duplicate elements in a BST?

161
00:11:21.490 --> 00:11:26.910
Yep, so you can either put them in
the left tree or the right tree, right?

162
00:11:26.910 --> 00:11:30.473
So let's say I added 15 to this one,
right?

163
00:11:30.473 --> 00:11:33.770
I can either put it in the left tree or
the right tree.

164
00:11:33.770 --> 00:11:36.321
And it doesn't matter just be consistent.

165
00:11:36.321 --> 00:11:41.560
The route is just the first elements
that you added to the tree.

166
00:11:43.600 --> 00:11:47.690
So if I start with an empty tree and
I call dot add with.

167
00:11:47.690 --> 00:11:50.400
6, right, then 6 is my root element.

168
00:11:50.400 --> 00:11:53.160
So it just depends on the order
that you added things to the tree.

169
00:11:55.424 --> 00:11:59.917
&gt;&gt; Is a doubly linked list, technically
a BST since both seem like that, but

170
00:11:59.917 --> 00:12:00.940
left and right?

171
00:12:02.360 --> 00:12:05.610
&gt;&gt; Is a doubly linked
list technically a BST?

172
00:12:05.610 --> 00:12:07.619
It's not for a couple of reasons.

173
00:12:09.310 --> 00:12:16.260
One, doubly linked lists don't
necessarily have an order, right?

174
00:12:16.260 --> 00:12:22.810
So, Right, if I have a doubly linked list,
it's not necessarily

175
00:12:22.810 --> 00:12:26.897
going to have everything smaller to the
left and everything bigger to the right.

176
00:12:26.897 --> 00:12:30.046
The other thing about
a doubly linked list is,

177
00:12:30.046 --> 00:12:35.292
it's circular in the sense of three or
cyclical I think is actually the term,

178
00:12:35.292 --> 00:12:40.318
3 would point to 8 and 8 would point
to 3 ,and that's not true for BST.

179
00:12:40.318 --> 00:12:42.535
3 actually doesn't have a pointer up,
right?

180
00:12:42.535 --> 00:12:47.145
It only has its pointer to its children,
only 8 has a pointer to this, right?

181
00:12:47.145 --> 00:12:51.846
So they're very similar in
the sense that they both have two

182
00:12:51.846 --> 00:12:53.923
pointers to other items.

183
00:12:53.923 --> 00:12:58.575
But not necessarily similar to the fact
that a doubly linked list is not a tree.

