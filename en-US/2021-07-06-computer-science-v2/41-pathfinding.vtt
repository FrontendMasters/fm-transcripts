WEBVTT

1
00:00:00.270 --> 00:00:02.740
This is going to be
very similar to graphs.

2
00:00:02.740 --> 00:00:04.940
This is gonna be very similar
to breadth first traversal.

3
00:00:04.940 --> 00:00:09.440
So keep those kinda things in your brain
while we're working on this, okay?

4
00:00:10.730 --> 00:00:14.880
Imagine you have a six by six grid
looks something like this, right?

5
00:00:14.880 --> 00:00:19.915
And you wanna get from point A to point B,
okay?

6
00:00:19.915 --> 00:00:27.140
So that's a 11 to 26, where 00 is this
one, we'll always do 00 on the top left.

7
00:00:30.170 --> 00:00:30.920
How would you do that?

8
00:00:30.920 --> 00:00:35.190
Like what algorithm would you write right
now to get from point A to point B?

9
00:00:38.010 --> 00:00:41.150
I imagine most you just say,
go towards it, right?

10
00:00:41.150 --> 00:00:45.435
So just say like, all right, I'm too
far to the left and then too far up,

11
00:00:45.435 --> 00:00:49.932
assuming you start from A so just go down
until you run out of space to go down or

12
00:00:49.932 --> 00:00:53.050
you're on the correct level,
and then head right.

13
00:00:54.380 --> 00:00:55.600
That would work, right?

14
00:00:55.600 --> 00:00:58.250
Cuz there's no obstacles here.

15
00:00:58.250 --> 00:01:02.629
They will just go here, here, here, here,
or you could do it the opposite saying,

16
00:01:02.629 --> 00:01:06.578
go right until I'm on the right thing and
say go here, here, here, here and

17
00:01:06.578 --> 00:01:08.720
then you'd arrive, right?

18
00:01:08.720 --> 00:01:10.360
Seems like it would work, right?

19
00:01:12.360 --> 00:01:17.870
Okay, yeah, exactly.

20
00:01:17.870 --> 00:01:21.420
This is what we diagram out, you just
go down until go there, it's five.

21
00:01:21.420 --> 00:01:26.700
That would be the shortest path
between point A and point B.

22
00:01:26.700 --> 00:01:34.070
Now, what if we add a wall
in the middle there?

23
00:01:34.070 --> 00:01:35.230
That gets a lot harder, right?

24
00:01:36.420 --> 00:01:39.010
Cuz if you try and do this, you're gonna
go here and then you're gonna hit a wall.

25
00:01:41.440 --> 00:01:45.014
Okay, well, you could try to be
exploring the wall and say, okay,

26
00:01:45.014 --> 00:01:49.550
I can't go that way, this way, down
again and then right again, I'd find it.

27
00:01:49.550 --> 00:01:54.095
So we could probably write some really
basic, go left and right to try and

28
00:01:54.095 --> 00:01:57.100
get around the wall kinda thing.

29
00:01:57.100 --> 00:02:01.890
But as you might imagine, this is gonna
spiral out of control really quickly.

30
00:02:01.890 --> 00:02:05.017
What happens if there's no a wall that
you have to go all the way down and

31
00:02:05.017 --> 00:02:06.501
then back up and around right, or

32
00:02:06.501 --> 00:02:09.364
what happens if there's all sorts
of various different walls?

33
00:02:09.364 --> 00:02:13.016
Cuz I could really easily trick your
algorithm, at which point you'd be writing

34
00:02:13.016 --> 00:02:16.090
so many special cases that it would
just be an absolute mess of code.

35
00:02:18.450 --> 00:02:23.116
Wouldn't it be better/easier if there was
just some algorithm that we could write

36
00:02:23.116 --> 00:02:25.860
that allowed us to always
solve these problems?

37
00:02:28.570 --> 00:02:35.362
So let's try something here and
it's called Dijkstra's algorithm.

38
00:02:35.362 --> 00:02:38.872
And the first thing I'll say is we're
actually not gonna do precisely Dijkstra's

39
00:02:38.872 --> 00:02:40.390
algorithm.

40
00:02:40.390 --> 00:02:44.098
Dijkstra's algorithm actually allows
you to be even more clever, but

41
00:02:44.098 --> 00:02:47.745
we're gonna be doing like the most
basic implementation of something

42
00:02:47.745 --> 00:02:51.230
that could be considered compliant
with Dijkstra's algorithm.

43
00:02:52.410 --> 00:02:56.637
And the idea here is that you spiral
outward from your points until you find

44
00:02:56.637 --> 00:02:58.080
a place where they meet.

45
00:02:59.920 --> 00:03:04.715
So what we're gonna do instead
is we're gonna go to A and

46
00:03:04.715 --> 00:03:08.706
we're gonna explore one
in every direction.

47
00:03:08.706 --> 00:03:10.860
Then we're gonna go to B and
we're gonna do the exact same thing.

48
00:03:10.860 --> 00:03:16.477
We're gonna explore one
in every direction.

49
00:03:16.477 --> 00:03:17.250
We haven't met yet.

50
00:03:17.250 --> 00:03:21.080
So we're gonna go back to A and we're
going to go one more in every direction.

51
00:03:21.080 --> 00:03:25.180
So this is to a way, to a way,
to a way, to a way, to a way, right?

52
00:03:26.730 --> 00:03:28.180
Assuming we can't go diagonal, right?

53
00:03:30.190 --> 00:03:32.670
The same thing was 0.2, 2222.

54
00:03:35.970 --> 00:03:39.430
Eventually, just going kinda
that spiraling outward.

55
00:03:39.430 --> 00:03:44.279
We're gonna find this point here where
this three and this three might meet.

56
00:03:45.860 --> 00:03:50.718
And all of sudden now we know a path
because we've spelled out where

57
00:03:50.718 --> 00:03:54.874
from both of them that if we go 1,
2, 3, 3, 2, 1,

58
00:03:54.874 --> 00:03:59.855
we have found the shortest possible
path between these two points.

59
00:04:05.437 --> 00:04:10.314
So this might look to you kinda
like breadth-first traversal and

60
00:04:10.314 --> 00:04:14.580
that's because it's actually
precisely to what it is.

61
00:04:14.580 --> 00:04:20.300
The name of this algorithm is
breadth-first pathfinding.

62
00:04:20.300 --> 00:04:24.450
And Dijkstra's algorithm is really just
that doing breadth-first traversals.

63
00:04:24.450 --> 00:04:28.643
Just with adding the ability to add
weights onto all those various different

64
00:04:28.643 --> 00:04:32.440
points, you can say, go towards it
first and then try and go left, or

65
00:04:32.440 --> 00:04:35.240
you can add some heuristics
to how it works.

66
00:04:35.240 --> 00:04:35.825
And ours,

67
00:04:35.825 --> 00:04:39.790
we're just doing dumb just spiral out
until you find the where it meets.

68
00:04:41.020 --> 00:04:47.310
So you can think of all these points like
1, 1, it's basically a graph, right?

69
00:04:47.310 --> 00:04:51.400
It's a graph of coordinates that connects
to other coordinates in the graph.

70
00:04:52.600 --> 00:04:57.280
So all we're doing here is we're
just spiraling out of our graph and

71
00:04:57.280 --> 00:05:03.194
we're just checking all the children in
a breadth-first traversal sorta pattern,

72
00:05:03.194 --> 00:05:03.700
okay?

73
00:05:05.000 --> 00:05:07.670
This is basically tree
traversal all over again.

74
00:05:07.670 --> 00:05:13.284
We're just using coordinates
instead of using

75
00:05:13.284 --> 00:05:18.765
connections on our network or
nodes in a tree.

76
00:05:18.765 --> 00:05:23.983
There's a really cool visualizer here that
I linked too down here in the bottom that,

77
00:05:23.983 --> 00:05:26.690
let's see, bidirectional.

78
00:05:26.690 --> 00:05:30.430
And let's just draw a line
between the two of these.

79
00:05:31.440 --> 00:05:32.750
And you can say start search and

80
00:05:32.750 --> 00:05:36.020
it'll show you except that's
not what we wanted to do.

81
00:05:36.020 --> 00:05:41.650
That's you want breadth-first search.

82
00:05:41.650 --> 00:05:44.900
Don't allow bidirectional start search.

83
00:05:46.310 --> 00:05:51.246
So this is literally what you and
I are doing together.

84
00:05:51.246 --> 00:05:54.755
And then eventually when it
finds somewhere that these meet,

85
00:05:54.755 --> 00:05:57.260
it'll take that path as the shortest path.

86
00:05:59.930 --> 00:06:03.609
And like this can handle pretty
difficult situations that you put it in.

87
00:06:05.560 --> 00:06:08.040
So now,
if we were trying to go directly to this,

88
00:06:08.040 --> 00:06:11.960
we would have a hell of a time
getting out of our little box here.

89
00:06:11.960 --> 00:06:16.947
But with this, it just spirals outward,
until eventually finds the space,

90
00:06:16.947 --> 00:06:22.410
until it keeps spiraling, until eventually
it's gonna find some way to get there.

91
00:06:26.380 --> 00:06:30.790
Now as some of you might be saying like,
that looks like it's kind of inefficient,

92
00:06:30.790 --> 00:06:34.381
cuz once you start getting to these
really deep traversals, yeah,

93
00:06:34.381 --> 00:06:36.090
it gets a little weird, right?

94
00:06:37.960 --> 00:06:40.988
Which is where some of these other ones,
like this is Dijkstra over here.

95
00:06:45.490 --> 00:06:49.454
But this just allows you to put some more
weight on going towards something instead

96
00:06:49.454 --> 00:06:50.550
of going away from it.

97
00:06:55.233 --> 00:06:59.040
But there you go.

98
00:06:59.040 --> 00:07:00.033
Okay.

99
00:07:05.010 --> 00:07:08.649
So I also linked a little Stack Overflow
here if you want somebody to decline

100
00:07:08.649 --> 00:07:11.541
the difference in depth between
breadth-first search and

101
00:07:11.541 --> 00:07:12.837
Dijkstra's algorithm.

102
00:07:16.642 --> 00:07:18.264
So this is still gonna work the same way,

103
00:07:18.264 --> 00:07:21.512
where you're just queuing like, you're
going to add something to a queue, and

104
00:07:21.512 --> 00:07:23.780
then you're gonna process
all the items in the queue.

105
00:07:23.780 --> 00:07:27.330
This works just like the graph, this
works just like breadth-first traversal.

106
00:07:27.330 --> 00:07:34.360
You're just using coordinates instead
of using people in a social graph.

107
00:07:35.390 --> 00:07:40.910
The other thing that you need to keep
track of is what has been visited by what.

108
00:07:40.910 --> 00:07:45.123
So I need to keep track of that this
point has been visited by A cuz what you

109
00:07:45.123 --> 00:07:48.141
need to check as soon as this
one is found you to say,

110
00:07:48.141 --> 00:07:52.937
okay, I'm point A, this has been visited
by A and this one's been visited by B.

111
00:07:52.937 --> 00:07:55.987
And then when you find that both
of them have been visited by

112
00:07:55.987 --> 00:08:00.250
different coordinates, then you know
that you found the shortest path there.

113
00:08:00.250 --> 00:08:04.293
So you're gonna have to do some strategy
of keeping track of this has been visited

114
00:08:04.293 --> 00:08:08.520
by A, this has been visited by B and
this has not been visited at all.

115
00:08:08.520 --> 00:08:14.298
So, again, be really inspired
by what you just did with graph,

116
00:08:14.298 --> 00:08:18.044
cuz the algorithm works pretty similar.

