WEBVTT

1
00:00:00.720 --> 00:00:02.142
What is the big O here?

2
00:00:06.580 --> 00:00:12.813
The nice thing about Merce sword is
every case is the worst case scenario.

3
00:00:12.813 --> 00:00:14.827
Every case is the best case scenario.

4
00:00:14.827 --> 00:00:16.764
Every case is the average case scenario.

5
00:00:16.764 --> 00:00:20.534
There's no difference between the best and
the worst case of merge sort, right?

6
00:00:20.534 --> 00:00:24.370
Imagine if this was just 1,
2, 3, 4, 5, 6, 7, right?

7
00:00:24.370 --> 00:00:27.462
This still would just get broken
down into seven arrays and

8
00:00:27.462 --> 00:00:29.110
then stitched back together.

9
00:00:29.110 --> 00:00:31.730
It actually makes zero
difference to merge sort.

10
00:00:31.730 --> 00:00:34.673
If it's reverse sorted, sorted,

11
00:00:34.673 --> 00:00:40.473
shuffled all those things you end
up with the exact same algorithm.

12
00:00:40.473 --> 00:00:41.774
So that's goodness, right?

13
00:00:41.774 --> 00:00:43.130
That's good news.

14
00:00:43.130 --> 00:00:49.284
That's why most JavaScript
engines like spider monkey v8.

15
00:00:49.284 --> 00:00:52.670
JavaScript core, most of them
use merge sort under the hood.

16
00:00:53.890 --> 00:00:57.643
So if you call .sort or
they're probably calling merge sort.

17
00:00:57.643 --> 00:01:02.671
They might be calling quicksort sometimes.

18
00:01:02.671 --> 00:01:04.740
We're about to do quick sorts so
don't worry about that.

19
00:01:07.410 --> 00:01:11.668
So that's the good thing about merge
sort is like, it's just a solid.

20
00:01:11.668 --> 00:01:15.012
If you don't know what's
coming in Mercer is always

21
00:01:15.012 --> 00:01:18.749
a safe bet that like this is
going to be pretty performant.

22
00:01:18.749 --> 00:01:22.750
So, let's talk about

23
00:01:22.750 --> 00:01:27.600
the big O of what it is then.

24
00:01:30.680 --> 00:01:33.672
Does every number get compared to
every other number in the array?

25
00:01:36.427 --> 00:01:39.890
No it doesn't.

26
00:01:39.890 --> 00:01:43.907
Because we're using the fact that,
if you have one sorted array, and

27
00:01:43.907 --> 00:01:45.756
you have another sorted array.

28
00:01:45.756 --> 00:01:50.192
If 1 is smaller than 2,
then I know that everything else in

29
00:01:50.192 --> 00:01:54.028
the array doesn't have to
be compared to 1 right?

30
00:01:54.028 --> 00:01:57.240
1, by being smaller the 2
is also smaller than 3.

31
00:01:57.240 --> 00:01:59.971
And also smaller than 6.

32
00:01:59.971 --> 00:02:04.065
So I'm taking a shortcut here that
by knowing that 2 is larger than 1,

33
00:02:04.065 --> 00:02:08.040
I also know that everything else in
that array is also bigger than 1.

34
00:02:09.130 --> 00:02:14.408
So I'm skipping a bunch of comparisons
that I otherwise would have to do.

35
00:02:14.408 --> 00:02:18.217
And the more and
more things I throw at Mercer sort so

36
00:02:18.217 --> 00:02:23.192
if this ends up being of length 200 and
this is of length 200.

37
00:02:23.192 --> 00:02:26.818
If one is smaller than two, then I know
that I don't have to compare one to

38
00:02:26.818 --> 00:02:28.968
the other 199 elements in there right?

39
00:02:28.968 --> 00:02:32.096
I'm skipping a lot of comparisons.

40
00:02:32.096 --> 00:02:35.550
So you could say this grows
logarithmically, right.

41
00:02:37.450 --> 00:02:40.736
By having more and
more I get the economies of scale and

42
00:02:40.736 --> 00:02:43.519
I don't have to make
all those comparisons.

43
00:02:43.519 --> 00:02:46.529
So I still have to look
at everything once.

44
00:02:47.720 --> 00:02:51.007
Every number gets looked at
which says that it's end, right?

45
00:02:51.007 --> 00:02:54.601
But I don't have to compare every number
to every other number, which is not,

46
00:02:54.601 --> 00:02:56.630
means I don't quite get to n,
I get to log n.

47
00:02:58.030 --> 00:03:04.878
So that's the big O of this computational
or this time complexity here is n log n.

48
00:03:04.878 --> 00:03:06.066
Let's see how I wrote that.

49
00:03:09.209 --> 00:03:13.640
So I don't know where it is anyway.

50
00:03:13.640 --> 00:03:19.023
This is n log n computational complexity.

51
00:03:19.023 --> 00:03:20.630
Because you have to look at
everything at least once.

52
00:03:20.630 --> 00:03:24.846
That's just the virtue of sorting is that
every number has to be at least looked at,

53
00:03:24.846 --> 00:03:27.633
which means that you're
looking at everything once.

54
00:03:27.633 --> 00:03:32.618
But you're not comparing one thing to
everything else which makes it log n.

55
00:03:32.618 --> 00:03:35.490
As opposed to Insertion Sort,
which it's worst case scenario.

56
00:03:35.490 --> 00:03:37.368
Every number is compared
to every other number.

57
00:03:37.368 --> 00:03:38.717
That's why that's n squared.

58
00:03:42.490 --> 00:03:43.908
So the trick here for

59
00:03:43.908 --> 00:03:49.006
n log n kind of sorting scenarios is
that you're looking for recursion.

60
00:03:49.006 --> 00:03:52.702
It's not always gonna make it log n but
very frequently makes it log n.

61
00:03:57.457 --> 00:04:05.370
Okay, spatial complexity, notice here that
we're creating a lot of arrays, right?

62
00:04:05.370 --> 00:04:09.110
We're breaking up one array down
into a bunch of other arrays.

63
00:04:09.110 --> 00:04:12.532
That means that we are no going to
have constant spacial complexity,

64
00:04:12.532 --> 00:04:16.390
we're actually going to have
some spacial complexity here.

65
00:04:16.390 --> 00:04:22.179
In fact, mercer ends up being one of
the worst ones because if you look here,

66
00:04:22.179 --> 00:04:26.171
every number gets at least
one array created for it.

67
00:04:26.171 --> 00:04:30.170
So if it's a one-to-one mappings
that means it's n right?

68
00:04:30.170 --> 00:04:32.828
So it's spatial complexities its' n.

69
00:04:32.828 --> 00:04:36.001
So for example, if you're on the ps3 and

70
00:04:36.001 --> 00:04:42.560
we were sorting huge numbers of numbers
merge sort might be a bad idea, right?

71
00:04:42.560 --> 00:04:45.394
Because it uses so much space.

72
00:04:45.394 --> 00:04:47.140
Might not be, but who knows.

73
00:04:49.760 --> 00:04:51.946
So space complexity is n.

74
00:04:58.120 --> 00:05:04.688
All right, so
let's pop over to our code sandbox.

75
00:05:04.688 --> 00:05:07.949
We're gonna be here in Merge Sort.

76
00:05:07.949 --> 00:05:12.988
The sort visualizer will not work for
merge sort or quick sort,

77
00:05:12.988 --> 00:05:18.997
because I didn't have a good way of
breaking down the snapshots very well.

78
00:05:18.997 --> 00:05:19.670
So I just didn't try.

79
00:05:22.720 --> 00:05:26.745
So why don't we go ahead and

80
00:05:26.745 --> 00:05:30.426
give Mercer sort a shot?

81
00:05:30.426 --> 00:05:33.222
What let's just like quickly
go over the base case,

82
00:05:33.222 --> 00:05:36.156
the base case is what you get
an array of length 1 or 0.

83
00:05:36.156 --> 00:05:39.490
It should always be length 1 but
just say length 1 or length 0.

84
00:05:39.490 --> 00:05:40.927
Then you just return that array.

85
00:05:40.927 --> 00:05:41.930
You don't do anything to it.

86
00:05:41.930 --> 00:05:45.122
That's the base case.

87
00:05:45.122 --> 00:05:48.426
You're gonna have to split the array into,
you're gonna call merge sort on the left

88
00:05:48.426 --> 00:05:50.625
side, you're gonna call merge
sort on the right side.

89
00:05:50.625 --> 00:05:55.905
And then you're gonna write
another function const

90
00:05:55.905 --> 00:06:00.830
merge equals sorted array 1,
sorted array 2.

91
00:06:02.510 --> 00:06:10.409
And that is going to
return one sorted array.

92
00:06:10.409 --> 00:06:14.022
Let's actually just I'm going to
just diagram this out for you.

93
00:06:14.022 --> 00:06:22.510
Here are you going to base
case Return if length 1 or 0.

94
00:06:24.660 --> 00:06:27.850
Break into two smaller arrays.

95
00:06:32.798 --> 00:06:37.330
Call, mercer sort on left and right.

96
00:06:38.380 --> 00:06:40.366
Here, I'm just using terms left and right.

97
00:06:40.366 --> 00:06:43.840
You can call them array one,
array two, array A, array B.

98
00:06:43.840 --> 00:06:47.762
I don't know why I like having some like
cardinality to it of like this goes left,

99
00:06:47.762 --> 00:06:48.638
this goes right.

100
00:06:48.638 --> 00:06:50.530
In reality that doesn't make a difference.

101
00:06:50.530 --> 00:06:57.619
It does make a difference in Quicksort
it doesn't emerge sort, okay?

102
00:06:57.619 --> 00:07:05.490
And then you're gonna return
the merge of left and right.

103
00:07:06.710 --> 00:07:09.909
So the first thing we want to
work on is the base case, right?

104
00:07:09.909 --> 00:07:19.312
So, If nums.length is less than 2.

105
00:07:19.312 --> 00:07:23.779
So if it's of length 1 or length 0 cuz
you can't have length negative of arrays,

106
00:07:23.779 --> 00:07:26.670
then we're going to just return.

107
00:07:26.670 --> 00:07:28.346
It's already sorted but
we're not gonna do anything.

108
00:07:28.346 --> 00:07:28.960
I think to it.

109
00:07:28.960 --> 00:07:29.950
This is the base case.

110
00:07:29.950 --> 00:07:33.614
Everything's good.

111
00:07:33.614 --> 00:07:38.650
I'm going to break this into a little
bit easier to read logic here.

112
00:07:38.650 --> 00:07:43.949
So I'm going to say cons
length equals num sort length.

113
00:07:48.084 --> 00:07:55.790
Cons middle equals math.floor
length divided by 2.

114
00:07:57.250 --> 00:08:01.621
So math dot floor if you don't remember,
always rounds down on a number right?

115
00:08:01.621 --> 00:08:08.507
So if this is of length 7,
then middle is going to come back as 4.

116
00:08:13.390 --> 00:08:20.470
Constant left equals nums.slice,
0 to the middle.

117
00:08:22.750 --> 00:08:25.792
slices, if you don't remember is
going to return to a sub array.

118
00:08:25.792 --> 00:08:30.619
So this is going to be the smaller left
array which is gonna be from zero to

119
00:08:30.619 --> 00:08:32.316
the middle of the array.

120
00:08:32.316 --> 00:08:37.870
And then const right is
going to be nums slice.

121
00:08:39.280 --> 00:08:43.517
And we can if we just give it middle, then
it'll automatically go to the end, right?

122
00:08:43.517 --> 00:08:45.415
So this is gonna be
everything on the left.

123
00:08:45.415 --> 00:08:47.885
This is gonna be everything on the right

124
00:08:54.270 --> 00:08:58.848
Now you say const sorted,

125
00:08:58.848 --> 00:09:02.393
left equals merge.

126
00:09:02.393 --> 00:09:06.475
Sort left, const sorted,

127
00:09:06.475 --> 00:09:11.978
right equals merge, sort, right?

128
00:09:14.750 --> 00:09:19.383
And then down here,
we're just gonna say return,

129
00:09:19.383 --> 00:09:23.384
merge, sort of left, sorted, all right.

130
00:09:28.237 --> 00:09:30.451
Cool?

131
00:09:30.451 --> 00:09:34.796
That is all you need to do.

132
00:09:38.819 --> 00:09:41.190
Put this above here so
the comments are in the right place.

133
00:09:42.990 --> 00:09:47.414
That's all merge sort is break
things down into smaller arrays and

134
00:09:47.414 --> 00:09:49.550
then merge them back together.

135
00:09:49.550 --> 00:09:53.652
So, merge, I'm just going to
call this left and right,

136
00:09:53.652 --> 00:09:56.480
that's a bit easier for me to think of.

137
00:09:56.480 --> 00:09:59.567
But just again, just reiterating and
I keep repeating and

138
00:09:59.567 --> 00:10:02.470
the reason why I keep repeating
this because I forget.

139
00:10:02.470 --> 00:10:05.280
Left and right are already sorted.

140
00:10:05.280 --> 00:10:09.572
Just let's make a be abundantly
clear it's you need to

141
00:10:09.572 --> 00:10:14.530
merge doesn't work if left and
right aren't already sorted.

142
00:10:14.530 --> 00:10:17.760
So you don't have to handle the case of
what happens if left or right is unsorted.

143
00:10:18.950 --> 00:10:24.136
That means something else broke,
something else broke somewhere else.

144
00:10:24.136 --> 00:10:26.544
Okay const results.

145
00:10:26.544 --> 00:10:27.725
There's gonna be an empty array.

146
00:10:31.301 --> 00:10:37.763
And then I'm gonna do this
with kinda a fun way,

147
00:10:37.763 --> 00:10:46.177
which I'm gonna say while left.length and
right.length.

148
00:10:46.177 --> 00:10:51.420
And I'm gonna say if left of 0 is

149
00:10:51.420 --> 00:10:56.478
less than or equal to right 0.

150
00:11:01.559 --> 00:11:05.198
Okay, then we're gonna say results.push,
so

151
00:11:05.198 --> 00:11:08.581
we're gonna put on the end
the front of left.

152
00:11:08.581 --> 00:11:10.374
So we're gonna say left.shift.

153
00:11:12.290 --> 00:11:14.479
And again, JavaScript has weird naming for

154
00:11:14.479 --> 00:11:17.629
these kind of things shift is
like popping off the front right?

155
00:11:17.629 --> 00:11:20.734
CF pop which removes the last
item of the array and returns it.

156
00:11:20.734 --> 00:11:23.264
Shift does it from the front, right?

157
00:11:23.264 --> 00:11:25.922
Other languages will call this dq, right?

158
00:11:29.091 --> 00:11:32.670
I guess it depends depends on what
the language is trying to do anyways.

159
00:11:32.670 --> 00:11:38.073
Suffice to say shift removes the first
item in the array and returns it.

160
00:11:38.073 --> 00:11:42.039
So this is gonna take the front
item off of the left and

161
00:11:42.039 --> 00:11:44.844
push it on the end of results, okay?

162
00:11:44.844 --> 00:11:49.967
Else, we're gonna say results.push,
right.shift,

163
00:11:49.967 --> 00:11:57.505
because we're not taking the left thing,
we're gonna take the right thing, okay?

164
00:11:57.505 --> 00:11:59.439
Now again,
we're removing things from left and

165
00:11:59.439 --> 00:12:01.762
right eventually we're going
to run out of things right?

166
00:12:01.762 --> 00:12:05.972
Either left is going to empty or
right is going to empty first right?

167
00:12:05.972 --> 00:12:08.280
One of them by definition
of what we're doing here.

168
00:12:09.780 --> 00:12:15.461
This is gonna break and one of them
is still gonna have stuff left in it.

169
00:12:15.461 --> 00:12:20.215
So what we can do after that is we can say

170
00:12:20.215 --> 00:12:25.425
return results.concat left and right.

171
00:12:27.460 --> 00:12:29.148
Now why does this work?

172
00:12:29.148 --> 00:12:32.765
Results is gonna be an already
sorted list that was building, and

173
00:12:32.765 --> 00:12:35.980
one of left and
right is gonna be empty, right?

174
00:12:35.980 --> 00:12:38.242
What happens if you call
a concat on an empty array?

175
00:12:40.350 --> 00:12:45.627
Nothing, right, nothing happens cuz it's
empty and there's nothing to concat.

176
00:12:45.627 --> 00:12:47.952
So one of these is just going to
concatenate all of its numbers, right?

177
00:12:47.952 --> 00:12:51.725
And we know everything that's left is
going to be larger than what's already in

178
00:12:51.725 --> 00:12:53.996
results because it's at
the end of that array.

179
00:12:53.996 --> 00:12:58.292
So it makes sense.

180
00:12:58.292 --> 00:13:00.600
I mean you can have this keep
going until they both have.

181
00:13:02.030 --> 00:13:03.555
If you did this instead or,

182
00:13:09.430 --> 00:13:13.217
You'd have to mess around here
with the if logic to say like,

183
00:13:13.217 --> 00:13:18.180
if left out length and right.length and
left is smaller than right, right?

184
00:13:18.180 --> 00:13:20.591
Then do that.

185
00:13:20.591 --> 00:13:24.095
But we don't have to do that because we're
just going to do this concut down here and

186
00:13:24.095 --> 00:13:24.806
this'll work.

187
00:13:29.877 --> 00:13:34.930
Okay, that is all of merge sort.

188
00:13:38.920 --> 00:13:42.086
I mean, that's what nine to.

189
00:13:42.086 --> 00:13:46.305
30 some odd lines of code,
some of the white-space it's, I mean,

190
00:13:46.305 --> 00:13:50.680
let's go ahead and run and make sure
that I'm not pulling your leg here.

191
00:13:53.380 --> 00:13:57.618
But if we go down to merge sort doesn't
feel like running it right now.

192
00:13:59.691 --> 00:14:01.840
Merge sort, and I'm doing skip down here.

193
00:14:01.840 --> 00:14:03.361
So that's actually correct.

194
00:14:05.990 --> 00:14:07.542
And now I try running it again.

195
00:14:09.810 --> 00:14:11.972
Merge sort is passing.

196
00:14:16.861 --> 00:14:20.640
So again this is hard, right?

197
00:14:20.640 --> 00:14:24.015
If you didn't quite get it, or
if you struggled with this,

198
00:14:24.015 --> 00:14:26.729
there's a lot of abstract
stuff going on here.

199
00:14:26.729 --> 00:14:31.164
And I can only do this with some ease
because I've done this so many times.

200
00:14:31.164 --> 00:14:32.460
Because I've taught it to a lot of people.

