WEBVTT

1
00:00:00.000 --> 00:00:05.158
We are gonna do some tree traversals,
I promise these are like

2
00:00:05.158 --> 00:00:10.329
a million times easier so
you can kinda rest easy for a second.

3
00:00:10.329 --> 00:00:14.765
Again, that AVL tree is the most difficult
thing that you're gonna learn in this

4
00:00:14.765 --> 00:00:15.298
course.

5
00:00:15.298 --> 00:00:18.865
So if you survived this far,
you're over the crest of the mountain now,

6
00:00:18.865 --> 00:00:20.397
it's all downhill from here.

7
00:00:23.175 --> 00:00:26.709
So let's talk about traversals.

8
00:00:26.709 --> 00:00:31.663
And these actually end up being
kind of important just in general,

9
00:00:31.663 --> 00:00:36.351
with traversing graphs and
traversing paths, and mazes, and

10
00:00:36.351 --> 00:00:39.019
trees, and all that kind of stuff.

11
00:00:39.019 --> 00:00:40.960
So let's talk about a tree traversal.

12
00:00:40.960 --> 00:00:45.343
So a tree traversal in this particular
case, imagine I gave you this tree,

13
00:00:45.343 --> 00:00:47.221
I just handed it to you and said,

14
00:00:47.221 --> 00:00:50.864
I want an array of all the numbers
in this array or in this tree.

15
00:00:50.864 --> 00:00:51.875
How would you do that?

16
00:00:54.884 --> 00:00:59.742
There's a couple ways of doing it, and
these are called traversals, right?

17
00:00:59.742 --> 00:01:04.939
So let's say I gave you this binary
search tree, and I wanted everything.

18
00:01:04.939 --> 00:01:08.142
Just I don't care what
order they come back in.

19
00:01:08.142 --> 00:01:10.847
Just give me all of the numbers
that exist in the array.

20
00:01:10.847 --> 00:01:14.627
You could do what's called
a pre-order traversal,

21
00:01:14.627 --> 00:01:20.095
which is I'm gonna give you 8,
3, 1, 6, 4, 7, 10, 14, 13.

22
00:01:20.095 --> 00:01:26.141
So basically, just the order that
you visit all the nodes in, right?

23
00:01:26.141 --> 00:01:29.671
So since I start on the root node,
I'm going to give you 8 first,

24
00:01:29.671 --> 00:01:33.030
then I'm gonna go to the left child and
I'm gonna give you 3.

25
00:01:33.030 --> 00:01:37.545
Then I'm gonna the left child and
I always go to the left first then right.

26
00:01:37.545 --> 00:01:42.659
Then I give you 6, then 4, then 7,
then 10, then 14, then 13.

27
00:01:43.801 --> 00:01:47.871
So this is called depth first
traversal because we're going

28
00:01:47.871 --> 00:01:50.171
as deep as we can first.

29
00:01:50.171 --> 00:01:53.331
And you can see here again
using this tree up here,

30
00:01:53.331 --> 00:01:58.087
we call the method we'll call it
pre-order traversal on the root node 8.

31
00:01:58.087 --> 00:02:02.712
We add 8 to the array, then we call
pre-order traverse on the left child 3,

32
00:02:02.712 --> 00:02:04.077
we add 3 to our array.

33
00:02:04.077 --> 00:02:08.658
We call pre-order traversal on
the left child 1 just here, right?

34
00:02:08.658 --> 00:02:15.035
Maybe I can zoom out a bit so you can
maybe see a little bit of what's going on.

35
00:02:15.035 --> 00:02:18.211
So 1 has no children so
you return up to here, and

36
00:02:18.211 --> 00:02:23.802
since we're doing this recursively,
then we're going to process 6 next, right?

37
00:02:23.802 --> 00:02:27.072
And so on and so forth until you
process everything in the array.

38
00:02:29.302 --> 00:02:34.298
That's called pre-order traversal,
and you'll end up with this

39
00:02:34.298 --> 00:02:39.128
this array here 8, 3,
1, 6, 4, 7, 10, 14, 13.

40
00:02:39.128 --> 00:02:43.178
If I'm asking you for just every number
in the array, that's great, right?

41
00:02:43.178 --> 00:02:48.858
That's you successfully fulfilled
everything that I'm looking for.

42
00:02:51.179 --> 00:02:53.964
Now, given this as a binary search tree,

43
00:02:53.964 --> 00:02:57.239
what if I wanted everything
in numerical order?

44
00:02:57.239 --> 00:03:00.480
So I want 1, 3, 4, 6, 7,

45
00:03:00.480 --> 00:03:05.416
8, 10,13, 14, how would you do that?

46
00:03:06.834 --> 00:03:09.965
Well honestly,
it's the same thing basically,

47
00:03:09.965 --> 00:03:13.028
we just changed when we
add numbers to the array.

48
00:03:13.028 --> 00:03:17.129
So what we're gonna do is we're
going to go as far left as we can.

49
00:03:17.129 --> 00:03:22.384
So I'm gonna do call post, or this is
gonna be called in-order traversal.

50
00:03:22.384 --> 00:03:27.249
I'm gonna call in-order traversal on 8,
then I'm gonna call in-order traversal on

51
00:03:27.249 --> 00:03:30.083
3, I'm gonna call it
in-order traversal on 1.

52
00:03:30.083 --> 00:03:35.297
1 has no left child, so
I add 1 to the array then I return.

53
00:03:35.297 --> 00:03:39.602
Then I add 3 to the array, and then I
call in-order traversal on the right.

54
00:03:39.602 --> 00:03:45.856
So the only thing that's changing here is
when I add the item to the array, right?

55
00:03:45.856 --> 00:03:49.801
Same exact logic go left, then go right.

56
00:03:49.801 --> 00:03:54.151
But with pre-order traversal,
it's add to the array, go left, go right.

57
00:03:54.151 --> 00:03:57.955
If it's in-order to reversal,
it's go left, add to the array, go right.

58
00:03:57.955 --> 00:04:01.941
And then as you might imagine,
there is a post-order traversal,

59
00:04:01.941 --> 00:04:04.728
which is go left, go right,
add to the array.

60
00:04:07.996 --> 00:04:09.434
And just to demonstrate the difference.

61
00:04:09.434 --> 00:04:12.445
Pre-order traversal gives you that number,

62
00:04:12.445 --> 00:04:17.309
in-order traversal gives you these
numbers, and then post-order where

63
00:04:17.309 --> 00:04:22.190
I'm adding everything after I visit
both the left and right child is this.

64
00:04:23.482 --> 00:04:28.551
So with post-order, always your
route will just be last, right?

65
00:04:28.551 --> 00:04:30.060
Because that's the first
thing that you call it with

66
00:04:36.848 --> 00:04:44.118
So, Why are we learning three different
ways of doing the same thing?

67
00:04:44.118 --> 00:04:46.748
It's a good question you might ask.

68
00:04:46.748 --> 00:04:53.315
If you want a sorted list out of an array,
you're gonna use in-order traversal.

69
00:04:53.315 --> 00:04:55.689
If you wanted to make a deep
copy of a tree, right?

70
00:04:55.689 --> 00:04:59.062
So if I gave you this tree and said, hey,

71
00:04:59.062 --> 00:05:02.745
I want a copy of this,
how would you do that?

72
00:05:02.745 --> 00:05:07.154
In this case, pre-order traversal
is really helpful because you can

73
00:05:07.154 --> 00:05:09.929
create a new node and
then add the children.

74
00:05:09.929 --> 00:05:12.351
So deep copies,
you'd probably use a pre-order traversal.

75
00:05:12.351 --> 00:05:16.562
And then post-order would be great if
you're trying to actually delete all

76
00:05:16.562 --> 00:05:17.894
the items in the array.

77
00:05:17.894 --> 00:05:22.053
Because what you'd wanna do is you want to
visit both children, delete all of them,

78
00:05:22.053 --> 00:05:24.997
and then delete the node itself,
and then return, right?

79
00:05:24.997 --> 00:05:28.580
So post-order traversal would be something
you'd probably do with a deletion.

