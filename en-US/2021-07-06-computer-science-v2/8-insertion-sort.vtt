WEBVTT

1
00:00:00.520 --> 00:00:04.328
So, we just talked about bubble sort and
I said bubble sorts,

2
00:00:04.328 --> 00:00:07.780
probably not one you're ever going to use.

3
00:00:07.780 --> 00:00:12.018
And the reason why you're probably
never gonna use bubble sort and

4
00:00:12.018 --> 00:00:16.862
actually me rephrase, you'll never
actually use bubble sort in any sort of

5
00:00:16.862 --> 00:00:19.983
real setting,
it's strictly a teaching tool.

6
00:00:19.983 --> 00:00:23.680
And that's because insertion
sort is just strictly better.

7
00:00:23.680 --> 00:00:27.035
There's no situation that you're
gonna find that bubble sort,

8
00:00:27.035 --> 00:00:30.250
outperforms selections or,
sorry, Insertion Sort.

9
00:00:30.250 --> 00:00:33.917
There's another sort called selection
sort that we're not doing today that is

10
00:00:33.917 --> 00:00:35.500
occasionally useful.

11
00:00:35.500 --> 00:00:39.444
But we're gonna go with insertion Sort
because one, I think it's a bit easier to

12
00:00:39.444 --> 00:00:43.160
conceptualize, and two, I think it's
more useful in general algorithm.

13
00:00:45.740 --> 00:00:47.528
So insertion sort, again,

14
00:00:47.528 --> 00:00:52.500
works kinda in a way that the human
brain maps sorting in its head.

15
00:00:52.500 --> 00:00:57.011
So you can see here in this little GIF,
what is doing is

16
00:00:57.011 --> 00:01:01.840
it's starting at an array of length one,
so zero right?

17
00:01:01.840 --> 00:01:06.484
And it's saying okay the very from array

18
00:01:06.484 --> 00:01:12.091
previous to index one is a sorted array,
right?

19
00:01:12.091 --> 00:01:15.763
So you have a basically a sub
array of length one and

20
00:01:15.763 --> 00:01:19.430
an array of length one is always sorted,
right?

21
00:01:19.430 --> 00:01:22.264
So if I have an array and
it's just one number in there,

22
00:01:22.264 --> 00:01:25.779
that's a sorted array because you
can't do anything else to that,

23
00:01:25.779 --> 00:01:29.440
it's just sorted because there's
only one number in there, right?

24
00:01:31.840 --> 00:01:35.023
So we're gonna take advantage
of that concept and say, okay,

25
00:01:35.023 --> 00:01:39.226
what we're gonna do is we're gonna take
the next number that this case, index 1,

26
00:01:39.226 --> 00:01:42.450
and we're going to insert
that in a sorted way.

27
00:01:42.450 --> 00:01:45.207
So I have a list down here.

28
00:01:45.207 --> 00:01:48.185
We're basically gonna say
everything before index 1 so

29
00:01:48.185 --> 00:01:51.760
basically just index 0 in this
particular way is sorted, right.

30
00:01:51.760 --> 00:01:57.140
So 3, this part of the array is sorted and
this part of the array is unsorted.

31
00:01:57.140 --> 00:01:59.561
Then we're gonna take 2 here and

32
00:01:59.561 --> 00:02:04.327
we're going to insert that into
the sorted place for it, right?

33
00:02:04.327 --> 00:02:07.942
So you're gonna say is 2 larger than 3?

34
00:02:07.942 --> 00:02:08.442
No.

35
00:02:09.930 --> 00:02:13.520
Move 3 to the right beginning of
the list and insert 2 at index 0, right?

36
00:02:13.520 --> 00:02:17.628
So basically we're just going to be
shifting those numbers over as we iterate

37
00:02:17.628 --> 00:02:18.140
over it.

38
00:02:19.530 --> 00:02:22.047
Once we get to the beginning of the list,

39
00:02:22.047 --> 00:02:25.760
then we know that 2 was at
the beginning of the list, okay?

40
00:02:26.870 --> 00:02:31.963
Now we're gonna take index 5 here, so
we're gonna say, is index 5 larger than 3?

41
00:02:31.963 --> 00:02:35.821
And then we're gonna say insert after 3,
in which case,

42
00:02:35.821 --> 00:02:40.190
it is already after 3, so
we don't have to do anything.

43
00:02:40.190 --> 00:02:43.660
So this just stays where it is, okay?

44
00:02:43.660 --> 00:02:46.394
Then we're gonna start at index 4 here.

45
00:02:46.394 --> 00:02:49.147
We're gonna say is index 4 larger than 5?

46
00:02:49.147 --> 00:02:51.530
No, move to the right.

47
00:02:51.530 --> 00:02:56.153
So basically, 5 is going to end up here.

48
00:02:56.153 --> 00:03:00.199
And then we're gonna say is 4 larger
than 3, is we're gonna say yes, so

49
00:03:00.199 --> 00:03:02.500
basically 4 gets inserted where 5 was.

50
00:03:05.965 --> 00:03:09.699
10?
And then after that we have 2, 3, 4, 5.

51
00:03:09.699 --> 00:03:11.975
And again,
we're gonna ask is 1 larger than 5?

52
00:03:11.975 --> 00:03:13.173
Move 5 to the right.

53
00:03:13.173 --> 00:03:14.314
Is 1 larger than 4?

54
00:03:14.314 --> 00:03:15.355
Move 4 to the right.

55
00:03:15.355 --> 00:03:16.480
Is 1 larger than 3?

56
00:03:16.480 --> 00:03:17.657
Move 3 to the right.

57
00:03:17.657 --> 00:03:18.803
Is 1 larger than 2?

58
00:03:18.803 --> 00:03:20.109
No, move 2 to the right.

59
00:03:20.109 --> 00:03:23.840
And eventually we reached
the beginning of the list and

60
00:03:23.840 --> 00:03:29.046
we're going to insert it at index
0 which is gonna be 1, 2, 3, 4, 5.

61
00:03:29.046 --> 00:03:32.410
So basically we just continually shift
all the numbers over until eventually it

62
00:03:32.410 --> 00:03:35.118
finds like okay, this is where it goes and
then we put it there and

63
00:03:35.118 --> 00:03:36.591
then we start the loop over again.

64
00:03:38.755 --> 00:03:39.689
Make sense?

65
00:03:41.970 --> 00:03:45.210
&gt;&gt; Looks like reverse bubble so.

66
00:03:45.210 --> 00:03:46.350
&gt;&gt; It kind of does, doesn't it?

67
00:03:46.350 --> 00:03:47.800
Yeah, I could definitely see that logic.

68
00:03:52.420 --> 00:03:53.194
Yeah, this,

69
00:03:53.194 --> 00:03:56.997
I thought this graph was actually
pretty helpful coz you can see them,

70
00:03:56.997 --> 00:04:01.460
shifting the numbers over until eventually
they find where it's supposed to go.

71
00:04:02.760 --> 00:04:04.820
Is cuz you can see this number
continually shift over.

72
00:04:12.254 --> 00:04:14.990
All right, so what's the big O of this?

73
00:04:14.990 --> 00:04:19.280
What's the worst case scenario for
this particular algorithm.

74
00:04:20.870 --> 00:04:24.560
Well, it's gonna be a reverse
sorted list again, right?

75
00:04:24.560 --> 00:04:28.922
Because that means we're gonna continually
have to shift everything over as much

76
00:04:28.922 --> 00:04:30.640
as possible, right?

77
00:04:30.640 --> 00:04:32.913
Every single time that we
can shift something over,

78
00:04:32.913 --> 00:04:36.167
we're gonna have to do that until
everything has to arrive at the beginning

79
00:04:36.167 --> 00:04:37.730
of the list from the end of the list.

80
00:04:39.580 --> 00:04:41.849
So reverse sorted list,
worst case scenario,

81
00:04:41.849 --> 00:04:45.720
best case scenario is you get a sorted
list and nothing ever has to shift, right?

82
00:04:45.720 --> 00:04:48.999
We get one iteration through,

83
00:04:48.999 --> 00:04:53.674
nothing moves and everything works great.

84
00:04:55.743 --> 00:04:57.640
So what's the average case scenario?

85
00:04:57.640 --> 00:05:00.262
Well, the average case
scenario is that more or less,

86
00:05:00.262 --> 00:05:03.190
you're gonna have some
sort of shuffled array.

87
00:05:03.190 --> 00:05:06.463
And most items gonna be compared
against most other items and

88
00:05:06.463 --> 00:05:08.460
you end up with basically n squared.

89
00:05:10.970 --> 00:05:15.312
Now it is better than bubble
sort coz it actually will

90
00:05:15.312 --> 00:05:19.963
do substantially left less
work than bubble sort does.

91
00:05:19.963 --> 00:05:21.950
But it's still n squared, right?

92
00:05:21.950 --> 00:05:23.840
It's n squared with better coefficients.

93
00:05:25.690 --> 00:05:28.500
Now, why is this still a useful algorithm?

94
00:05:30.070 --> 00:05:34.053
Let's say that you had an array that you
were getting back from your database and

95
00:05:34.053 --> 00:05:36.010
it was mostly sorted.

96
00:05:36.010 --> 00:05:40.778
Let's say you knew ahead of time
that is a list of length 100, and

97
00:05:40.778 --> 00:05:45.140
you know for a fact 98 of those
are gonna be in a sorted order.

98
00:05:46.660 --> 00:05:49.320
Insertion sort is really good for
that, right?

99
00:05:49.320 --> 00:05:53.914
When you know that you have mostly
sorted lists or totally sorted lists,

100
00:05:53.914 --> 00:05:58.886
insertion sort is really really good at
handling those kinda situations and so

101
00:05:58.886 --> 00:06:03.859
that's when you would use an insertion
sort over something like click sort and

102
00:06:03.859 --> 00:06:09.249
merge sort which have better average case
but worst best case, if that makes sense.

103
00:06:13.993 --> 00:06:17.880
Spatial complexity we're still at constant
time because we're not creating any

104
00:06:17.880 --> 00:06:19.295
additional stuff on the fly.

105
00:06:19.295 --> 00:06:23.544
I mean, I guess we have some swapping and
moving to do but for the most part,

106
00:06:23.544 --> 00:06:27.130
we're doing that like we're
doing what's in place, right?

107
00:06:27.130 --> 00:06:29.700
So we're having destructive sort.

108
00:06:31.800 --> 00:06:35.275
So that's not too bad.

109
00:06:35.275 --> 00:06:37.070
And I believe it is stable.

110
00:06:40.480 --> 00:06:41.295
Yeah.
And yeah,

111
00:06:41.295 --> 00:06:44.400
insertion sort can be stable as
long as you implement it as such.

112
00:06:47.600 --> 00:06:48.310
Okay.

113
00:06:48.310 --> 00:06:53.060
Does anyone have any questions
about insertion sort?

114
00:06:53.060 --> 00:06:57.434
&gt;&gt; I'm thinking it's like
one of the interesting cases

115
00:06:57.434 --> 00:07:01.612
would be something like
an event log from a server,

116
00:07:01.612 --> 00:07:07.053
where you think that it would be
mostly sorted by time for example,

117
00:07:07.053 --> 00:07:12.495
but sometimes some events just
don't follow the the order because

118
00:07:12.495 --> 00:07:17.490
the server received them a bit late and
you have to fix those.

119
00:07:20.040 --> 00:07:22.470
Is that a good case for
using something like this?

120
00:07:24.620 --> 00:07:29.439
&gt;&gt; Yeah, I can see that something like
where you're maybe getting network

121
00:07:29.439 --> 00:07:31.098
traffic from a server and

122
00:07:31.098 --> 00:07:35.842
maybe it's like a UDP so it can come
out of order or something like that.

123
00:07:35.842 --> 00:07:39.633
I could see insertion sort
being useful in that case,

124
00:07:39.633 --> 00:07:43.690
typically network traffic
is a priority queue, right?

125
00:07:43.690 --> 00:07:48.646
So some network traffic is more important
than other pieces of traffic in

126
00:07:48.646 --> 00:07:52.886
which case, priority queues
always go together with heaps.

127
00:07:52.886 --> 00:07:56.909
We'll be talking about heaps later.

128
00:07:56.909 --> 00:08:00.397
But in the strict case of like you're
getting a mostly sorted list of traffic

129
00:08:00.397 --> 00:08:03.723
back and you wanna make sure that it's
in the correct order or messages or

130
00:08:03.723 --> 00:08:04.780
something like that.

131
00:08:06.360 --> 00:08:06.970
Yeah, totally.

132
00:08:06.970 --> 00:08:09.595
I mean anything that's
gonna be mostly sorted and

133
00:08:09.595 --> 00:08:13.427
you need it to be totally sorted cuz
this is the perfect use case for that.

134
00:08:13.427 --> 00:08:21.360
And actually, sometimes we'll actually
combine these sorts together.

135
00:08:21.360 --> 00:08:26.309
So you'll start maybe with an insertion
sort, and if it goes for too many cycles,

136
00:08:26.309 --> 00:08:30.360
then you'll actually fall back
into a like a quick sort.

137
00:08:30.360 --> 00:08:33.090
So, you'll see like, hey,
maybe this is already sorted, we'll check.

138
00:08:33.090 --> 00:08:34.460
We'll do like three iterations.

139
00:08:34.460 --> 00:08:37.520
And if we get beyond that, it's like,
okay, this is too unsorted.

140
00:08:37.520 --> 00:08:40.920
We'll break down into quick sort or
something like that.

141
00:08:40.920 --> 00:08:44.660
So you can actually kinda combine these
together to get the the best case scenario

142
00:08:44.660 --> 00:08:45.870
of an insertion sort, but

143
00:08:45.870 --> 00:08:49.340
also cover the average case with something
like a merge sort of quick sort.

144
00:08:50.490 --> 00:08:53.640
So, we won't be doing that today but
it actually might be a fun exercise for

145
00:08:53.640 --> 00:08:54.440
you to try as well.

