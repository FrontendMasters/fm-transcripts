WEBVTT

1
00:00:00.320 --> 00:00:03.471
Let's talk about self balancing trees.

2
00:00:06.221 --> 00:00:10.731
So we're gonna talk about something called
AVL trees which is going to respond to

3
00:00:10.731 --> 00:00:14.907
that problem that we just had that we
have these kind of worst case scenarios

4
00:00:14.907 --> 00:00:18.180
that we have to go through 100 hops and
100 numbers.

5
00:00:21.030 --> 00:00:23.370
An AVL tree is the same as a BST.

6
00:00:23.370 --> 00:00:26.530
So every AVL tree is a BST.

7
00:00:26.530 --> 00:00:28.190
So that's one thing to keep in mind.

8
00:00:28.190 --> 00:00:30.270
Not all BSTs are AVLs.

9
00:00:30.270 --> 00:00:34.156
So an AVL tree is a specialized
version of a binary search tree.

10
00:00:37.223 --> 00:00:39.531
And the good news here is you
can add numbers in order,

11
00:00:39.531 --> 00:00:41.960
and it'll automatically
bounce out your tree for you.

12
00:00:41.960 --> 00:00:44.850
It has a self balancing
mechanism built into the tree.

13
00:00:46.730 --> 00:00:49.240
So AVL trees are not
necessarily the best ones.

14
00:00:49.240 --> 00:00:52.749
In fact, I would venture to say that
you'll never use AVL trees directly in

15
00:00:52.749 --> 00:00:54.170
production as well.

16
00:00:54.170 --> 00:00:55.808
But it's a really good,

17
00:00:55.808 --> 00:01:00.020
perhaps most simple self balancing
tree that we can talk about.

18
00:01:01.180 --> 00:01:05.611
If you're wondering what AVL stand for,
it stands for

19
00:01:05.611 --> 00:01:11.982
the last names of the authors, which
is Adelson, Velsky and Landis, right?

20
00:01:11.982 --> 00:01:13.065
Hence, AVL.

21
00:01:16.496 --> 00:01:17.348
Okay.

22
00:01:20.150 --> 00:01:25.746
So the nice thing about AVL trees is,
things mostly work the same.

23
00:01:25.746 --> 00:01:31.793
The deletes work the same, the ads work
the same, the finds all work the same.

24
00:01:31.793 --> 00:01:35.930
All that stuff ends up being exactly
the same except for one key part.

25
00:01:35.930 --> 00:01:38.353
So when you go down and you do an ad,

26
00:01:38.353 --> 00:01:42.291
you'll actually perform
what's called a balancing.

27
00:01:42.291 --> 00:01:47.370
And that's actually going to allow you
to make sure they have a balanced tree.

28
00:01:49.190 --> 00:01:52.010
So let's take a look at this one here.

29
00:01:52.010 --> 00:01:54.100
I'll just make this full size so
you can see.

30
00:01:55.820 --> 00:01:58.230
So we're going to add a number here.

31
00:01:59.330 --> 00:02:02.690
So the first thing you do is you're
gonna do exactly like a BST.

32
00:02:02.690 --> 00:02:05.540
You're gonna find where it should go,
okay?

33
00:02:05.540 --> 00:02:07.520
So we're gonna add a child
to the eight here.

34
00:02:09.010 --> 00:02:15.695
Okay, so
I added nine here to the eight, right?

35
00:02:15.695 --> 00:02:19.670
So this is still a valid BST right now,
right?

36
00:02:19.670 --> 00:02:22.100
Nothing here is a miss for a BST.

37
00:02:23.420 --> 00:02:28.030
However, this tree right here
ends up being out of balance.

38
00:02:28.030 --> 00:02:31.430
This is much lower than like say,
the 71 over here.

39
00:02:31.430 --> 00:02:36.363
So we wanna do some sort of balancing
to make sure that these lookups stay

40
00:02:36.363 --> 00:02:37.360
really fast.

41
00:02:39.320 --> 00:02:43.072
So, what it's gonna do is it's
gonna go up the tree and say, hey,

42
00:02:43.072 --> 00:02:44.350
is this leg balanced?

43
00:02:44.350 --> 00:02:45.400
Is this leg balanced?

44
00:02:45.400 --> 00:02:46.850
Is this leg balanced?

45
00:02:46.850 --> 00:02:50.160
It's gonna land on the seven,
and the seven is out of balance.

46
00:02:50.160 --> 00:02:54.993
And the way we're gonna define
our balance is the right child

47
00:02:54.993 --> 00:02:59.910
has two height difference
from the left child, right?

48
00:02:59.910 --> 00:03:03.610
So the left child height of
the seven is zero, right?

49
00:03:03.610 --> 00:03:06.920
It has no left children so
it has no height on its left side.

50
00:03:06.920 --> 00:03:10.860
The right height,
it has eight and nine, right?

51
00:03:10.860 --> 00:03:13.470
So it has a right height of two.

52
00:03:14.720 --> 00:03:18.780
So it's going to balance itself through
what's called a rotation, okay?

53
00:03:21.670 --> 00:03:26.080
So let's kind of just step
back through that, right?

54
00:03:26.080 --> 00:03:29.692
So it's going to move eight to be
the root of this little sub tree.

55
00:03:29.692 --> 00:03:34.501
It's gonna make seven the left sub child,
and nine the right sub child.

56
00:03:36.726 --> 00:03:43.787
So you can see there now it's balanced and
now everything is balanced, right?

57
00:03:47.846 --> 00:03:49.090
And there you go.

58
00:03:49.090 --> 00:03:51.310
So that's called a single rotation.

59
00:03:51.310 --> 00:03:53.390
I think it's technically a left rotation.

60
00:03:55.090 --> 00:03:57.240
As you might imagine,
you can rotate the other way, right?

61
00:03:58.250 --> 00:04:01.260
So, the right child is heavy.

62
00:04:04.690 --> 00:04:08.226
But as you may imagine, you can also have
the left child be heavy in which case,

63
00:04:08.226 --> 00:04:09.576
we would rotate to the right.

64
00:04:14.582 --> 00:04:15.790
And that's it.

65
00:04:15.790 --> 00:04:19.178
That's the only difference here
that we're really concerned about,

66
00:04:19.178 --> 00:04:20.199
is these rotations.

67
00:04:22.850 --> 00:04:27.671
So before I advance there, does anyone
have any questions about single rotations?

68
00:04:31.325 --> 00:04:32.533
At least conceptually.

69
00:04:36.913 --> 00:04:37.529
All right?

70
00:04:40.218 --> 00:04:44.320
So let's talk through what
the rotations look like.

71
00:04:45.670 --> 00:04:49.360
I have five, eight and I try,
which is currently a valid AVL, right?

72
00:04:51.170 --> 00:04:54.170
This is a left height of zero and
a right height of one, right?

73
00:04:54.170 --> 00:04:56.333
Which is not too different, right?

74
00:04:56.333 --> 00:05:00.220
It needs to be two different so if I had
like a nine here for example, right?

75
00:05:00.220 --> 00:05:04.356
This is now not a valid AVL tree
because this five is out of balance.

76
00:05:06.433 --> 00:05:09.614
Okay, so I call ad with nine.

77
00:05:09.614 --> 00:05:13.196
I do a normal BST add which
puts it down here on node C.

78
00:05:16.287 --> 00:05:21.460
Now, I have to do a balanced
check on my way up.

79
00:05:22.490 --> 00:05:27.580
So whereas before on the BST you and
I did a iterative add, right?

80
00:05:27.580 --> 00:05:31.260
So we used a while loop to find
the correct place to put the node.

81
00:05:31.260 --> 00:05:35.383
On an AVL tree we're gonna do it
recursively because on the way back up,

82
00:05:35.383 --> 00:05:36.978
in fact you can see it here.

83
00:05:39.942 --> 00:05:40.980
So I add nine.

84
00:05:42.590 --> 00:05:46.690
And then every node on the way up,
you can see where it says eight.

85
00:05:46.690 --> 00:05:48.591
It's saying, am I imbalance?

86
00:05:48.591 --> 00:05:51.656
Now does it on the seven,
it says am I imbalance and it says no.

87
00:05:51.656 --> 00:05:53.530
And that's when we start
doing the rotation.

88
00:05:53.530 --> 00:05:57.356
So on the recursion up,
we're asking every single node,

89
00:05:57.356 --> 00:05:59.940
are you balanced after I added, okay?

90
00:06:02.020 --> 00:06:07.581
So, check the balance of node C,
left height is zero, right height is zero.

91
00:06:07.581 --> 00:06:09.988
Node C here is in balance.

92
00:06:09.988 --> 00:06:15.160
On node B the left height is zero,
the right height is one.

93
00:06:15.160 --> 00:06:17.740
So node B is in balance.

94
00:06:17.740 --> 00:06:19.912
It checks on node A.

95
00:06:19.912 --> 00:06:23.080
And it says the left height is zero,
the right height is two.

96
00:06:23.080 --> 00:06:25.549
That's a difference of two,
so this is out of balance.

97
00:06:27.070 --> 00:06:30.380
So, it's unbalanced, right heavy,
child is right heavy.

98
00:06:33.110 --> 00:06:38.675
When I say child is right heavy,
it means that it goes five, eight.

99
00:06:38.675 --> 00:06:40.485
And then its child is on the right,

100
00:06:40.485 --> 00:06:43.825
not on the left cuz that ends
up being important, right?

101
00:06:43.825 --> 00:06:45.844
So if this was five, eight, seven,

102
00:06:45.844 --> 00:06:48.655
we would have to do something
slightly different.

103
00:06:49.655 --> 00:06:51.943
In other words,
if it's a straight line like this,

104
00:06:51.943 --> 00:06:53.980
we're gonna do a single
rotation to the left.

105
00:06:56.700 --> 00:06:57.845
See, I always messes up.

106
00:06:57.845 --> 00:07:01.205
This is technically a right rotation
cuz the right child is heavy.

107
00:07:01.205 --> 00:07:04.309
Anyway, doesn't matter.

108
00:07:04.309 --> 00:07:09.318
So what we're gonna do
here is this is the entire

109
00:07:09.318 --> 00:07:15.469
logic of a rotation diagram,
step by step for you, okay?

110
00:07:15.469 --> 00:07:22.200
So node A, yeah, you're gonna swap
the values of node A and node B.

111
00:07:23.410 --> 00:07:26.470
So five is gonna go here and
eight is gonna go here.

112
00:07:28.980 --> 00:07:33.000
Make node B's the left child of A.

113
00:07:33.000 --> 00:07:37.300
So you're gonna move node B to B
here as the left child of node A.

114
00:07:39.080 --> 00:07:40.830
Make node C, the right child.

115
00:07:40.830 --> 00:07:47.774
So node c will be the right
child of node A, okay?

116
00:07:50.006 --> 00:07:52.830
We're gonna move node B's
right child to its left child.

117
00:07:52.830 --> 00:07:56.210
In this case, they're both nulls so
this step ends up not doing anything.

118
00:07:56.210 --> 00:07:59.514
And then you're gonna make
node A's original left child,

119
00:07:59.514 --> 00:08:01.110
which was null in this case.

120
00:08:01.110 --> 00:08:02.980
So this is also not a necessary step.

121
00:08:02.980 --> 00:08:05.018
The left child of node B.

122
00:08:05.018 --> 00:08:07.684
And then you just need to make sure you
update the heights on all of them when

123
00:08:07.684 --> 00:08:09.130
you're coming back out.

124
00:08:09.130 --> 00:08:10.370
So this is what you end up with.

125
00:08:13.310 --> 00:08:17.450
Where eight is the root,
five is over here, and nine is over here.

126
00:08:17.450 --> 00:08:20.004
The thing that I wanna make
sure you understand here,

127
00:08:20.004 --> 00:08:22.180
notice that node B's
value used to be eight.

128
00:08:22.180 --> 00:08:25.040
And node B's value down here is now five,
right?

129
00:08:25.040 --> 00:08:29.385
So we do swap some values around,
whereas these nodes are, yeah,

130
00:08:29.385 --> 00:08:31.491
the nodes are changing values.

131
00:08:36.780 --> 00:08:37.800
Make sense?

132
00:08:37.800 --> 00:08:39.070
Good so far?

133
00:08:41.460 --> 00:08:41.960
All right.

134
00:08:43.000 --> 00:08:44.970
So I showed you a right rotation, right?

135
00:08:44.970 --> 00:08:47.900
Which is moving from
the right to the left.

136
00:08:47.900 --> 00:08:49.211
As you might imagine,

137
00:08:49.211 --> 00:08:52.940
the left rotation is the exact
mirror of what I just did, right?

138
00:08:58.027 --> 00:08:58.527
Okay?

139
00:09:00.630 --> 00:09:03.030
So this is the generalized formula here.

140
00:09:03.030 --> 00:09:05.866
Like literally I went line by line
in my code and I diagrammed out.

141
00:09:05.866 --> 00:09:09.262
If you follow these steps exactly,
this works in every case.

142
00:09:12.923 --> 00:09:15.255
Now let's talk about double rotations.

143
00:09:20.867 --> 00:09:23.932
I should say, this is the hardest
thing you're gonna do today.

144
00:09:23.932 --> 00:09:27.344
I probably should have led with that,
but here we are.

145
00:09:27.344 --> 00:09:29.601
[LAUGH] All right.

146
00:09:29.601 --> 00:09:32.820
So, double rotations.

147
00:09:32.820 --> 00:09:39.390
We are going to add nine to this array or
to this BST, right?

148
00:09:41.280 --> 00:09:44.890
So we have this existing tree,
we're gonna find where to add nine.

149
00:09:44.890 --> 00:09:46.290
Nine should go here, right?

150
00:09:48.700 --> 00:09:51.160
And so we end up with this tree.

151
00:09:52.720 --> 00:09:55.510
As you can see here,
number seven here is out of balance.

152
00:09:55.510 --> 00:09:59.126
It has a right height of two and
a left height of zero.

153
00:10:00.350 --> 00:10:02.940
So this is not gonna work,
we need to perform a rotation.

154
00:10:04.630 --> 00:10:06.040
Now, here's the problem.

155
00:10:07.090 --> 00:10:11.367
If you notice, if you remember the other
one, this line was straight so

156
00:10:11.367 --> 00:10:14.445
it had a right child and
then a right child, right?

157
00:10:16.595 --> 00:10:19.665
That's allowed us to do a single
rotation and everything was fixed.

158
00:10:20.815 --> 00:10:25.745
The problem with this is if it's a bent
one, right, so you go right then left.

159
00:10:25.745 --> 00:10:31.632
This is a right rotation but
a left child heavy.

160
00:10:31.632 --> 00:10:34.400
So we actually have to do what's
called a double rotation.

161
00:10:34.400 --> 00:10:42.870
Now, the good news is you're just using
the same rotation method just twice.

162
00:10:42.870 --> 00:10:47.397
So the first thing we're gonna do is
we're gonna do a right rotate or sorry,

163
00:10:47.397 --> 00:10:49.185
a left rotation on this 11.

164
00:10:56.311 --> 00:10:58.425
And it doesn't actually show,
it does, okay.

165
00:11:02.316 --> 00:11:06.090
All right, so
we're gonna do that right rotation.

166
00:11:07.550 --> 00:11:10.050
So now we're right heavy again, right?

167
00:11:10.050 --> 00:11:14.330
So we made nine the child here and
11 the right child.

168
00:11:15.500 --> 00:11:18.430
So basically,
we switch to these positions, right?

169
00:11:18.430 --> 00:11:22.146
So now nine is coming over here,
11 is going down here.

170
00:11:24.284 --> 00:11:27.909
And now we have a straight one, and

171
00:11:27.909 --> 00:11:33.909
now we can just perform a normal
right rotation on seven,

172
00:11:33.909 --> 00:11:38.730
and then we end up with
this rotation here.

173
00:11:38.730 --> 00:11:41.789
So that nine is now the root,
seven is now the left child and

174
00:11:41.789 --> 00:11:43.420
eleven is now the right child.

175
00:11:43.420 --> 00:11:45.588
And everything is balanced, and happy.

176
00:11:49.613 --> 00:11:50.586
Hold on.

177
00:11:59.966 --> 00:12:04.577
So just to, yeah, feel free to
watch that a few times to kind of

178
00:12:04.577 --> 00:12:08.150
understand exactly how
the rotations happen.

179
00:12:10.740 --> 00:12:14.927
So one right rotation, sorry,
left rotation on the nine, and

180
00:12:14.927 --> 00:12:19.280
then a right rotation on the seven
is technically how that works.

181
00:12:21.220 --> 00:12:25.410
So let's just visualize
why you do it this way.

182
00:12:25.410 --> 00:12:28.490
So I have five and eight,
right, and I wanna add seven.

183
00:12:29.630 --> 00:12:33.550
So now I have a right
heavy child on the five.

184
00:12:35.710 --> 00:12:40.183
So if I perform a single
rotation just on the five here,

185
00:12:40.183 --> 00:12:43.976
I end up with this tree
where eight is the root,

186
00:12:43.976 --> 00:12:48.180
five is the left child and
seven is the right child.

187
00:12:49.880 --> 00:12:52.416
Still out of balance, didn't help, right?

188
00:12:52.416 --> 00:12:53.855
I just have a different problem now.

189
00:12:55.495 --> 00:12:59.027
So the correct thing to do here
when you have a tree like this,

190
00:12:59.027 --> 00:13:03.271
where seven is the left child,
is I'm gonna call right rotate on eight.

191
00:13:03.271 --> 00:13:05.315
It's literally just the same method,
right?

192
00:13:05.315 --> 00:13:10.243
I don't have to write anything special,
I just call left rotate,

193
00:13:10.243 --> 00:13:12.715
[LAUGH] call left rotate on eight.

194
00:13:12.715 --> 00:13:17.189
So now I have five, seven, eight, and
I have this straight line here, right?

195
00:13:18.750 --> 00:13:22.416
And then I call,
right rotate on five here, and

196
00:13:22.416 --> 00:13:26.090
I end up with five,
seven, eight, like that.

