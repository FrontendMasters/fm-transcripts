WEBVTT

1
00:00:00.392 --> 00:00:04.951
So let's go ahead, and go set this up.

2
00:00:07.662 --> 00:00:15.294
We're gonna pop over to our code sandbox,
that's fine.

3
00:00:17.534 --> 00:00:19.419
We're gonna go into heapsort.

4
00:00:23.812 --> 00:00:27.432
Okay, and then I gave you,
you do not have to do it this way.

5
00:00:27.432 --> 00:00:29.595
I'm just trying to kind
of help you along and

6
00:00:29.595 --> 00:00:31.532
give you the skeleton of how to do this.

7
00:00:32.762 --> 00:00:35.963
I suggest you break this down
into three functions, right,

8
00:00:35.963 --> 00:00:38.800
heapsort which is actually
what's gonna be called.

9
00:00:38.800 --> 00:00:43.321
Then this function called heapify, which
is just my favorite word in this entire

10
00:00:43.321 --> 00:00:46.379
course is it there's some
good words in this course but

11
00:00:46.379 --> 00:00:48.870
heapify is a pretty good one.

12
00:00:48.870 --> 00:00:51.430
This is actually that
process that's gonna check.

13
00:00:51.430 --> 00:00:52.980
Okay, am I in the right place?

14
00:00:52.980 --> 00:00:54.130
Am I bigger than my children?

15
00:00:54.130 --> 00:00:55.780
Do I need to swap these?

16
00:00:55.780 --> 00:00:58.630
So that would take in the array,
the index and

17
00:00:58.630 --> 00:01:03.070
the heap size and then you can figure
out where you need to move things.

18
00:01:05.120 --> 00:01:08.660
And then createMaxHeap.

19
00:01:08.660 --> 00:01:13.174
This is basically going to be the function
that just loops over your array and

20
00:01:13.174 --> 00:01:15.160
calls heapify in reverse order.

21
00:01:15.160 --> 00:01:19.253
I actually even gave you here in
the course notes, the loop, right,

22
00:01:19.253 --> 00:01:23.380
this is the loop that you're going
to write of what to loop over.

23
00:01:23.380 --> 00:01:28.200
This is the for loop that you're going
to put inside of your createMaxHeap.

24
00:01:30.140 --> 00:01:31.585
The reason I gave this
to this because it took

25
00:01:31.585 --> 00:01:32.965
me way too long to figure this out myself.

26
00:01:32.965 --> 00:01:37.899
I didn't want you to have to struggle on
something that didn't seem like it was

27
00:01:37.899 --> 00:01:39.035
that useful too.

28
00:01:40.145 --> 00:01:43.025
Cool, and then you'll put that
here inside of createMaxHeap.

29
00:01:44.735 --> 00:01:52.904
And then I wrote one more function
here just called swapPlace.

30
00:01:52.904 --> 00:01:57.635
Just takes a index1,

31
00:01:57.635 --> 00:02:02.368
index2 and an array.

32
00:02:02.368 --> 00:02:05.351
And all this does is swap
two items in an array,

33
00:02:05.351 --> 00:02:08.420
because you have to do so
much swapping in here.

34
00:02:08.420 --> 00:02:11.633
It's nice to just have kind of a helper
function that does it for you.

35
00:02:11.633 --> 00:02:14.690
Again, I'm just kind of
throwing out ideas here.

36
00:02:14.690 --> 00:02:19.700
You're welcome to do however,
we're where you see fit.

37
00:02:19.700 --> 00:02:23.516
There's not much recursion in here, the
only place that you're gonna use a little

38
00:02:23.516 --> 00:02:25.820
bit of recursion is inside of heapify.

39
00:02:25.820 --> 00:02:28.851
So heapify does call itself sometimes

40
00:02:34.191 --> 00:02:37.975
Let's hop into this heapsort function.

41
00:02:37.975 --> 00:02:42.092
I don't know why I feel like I have
to like extra emphasize the P in

42
00:02:42.092 --> 00:02:45.920
heap,but every time it says heap sort,
I don't know.

43
00:02:45.920 --> 00:02:52.610
Anyway, array=createMaxHeap(array).

44
00:02:54.120 --> 00:02:56.910
Okay, so we're gonna go into it.

45
00:02:56.910 --> 00:03:00.399
We'll create a MaxHeap down here and
this function down here, but

46
00:03:00.399 --> 00:03:03.480
after that point we'll have a MaxHeap.

47
00:03:03.480 --> 00:03:11.890
Then all we're gonna do is we're
gonna say let i=array.length-1.

48
00:03:11.890 --> 00:03:14.500
So we're gonna start from the back, right?

49
00:03:14.500 --> 00:03:16.460
I is greater than 0.

50
00:03:16.460 --> 00:03:20.542
Obviously we don't need
a heapify on 0 with time, right,

51
00:03:20.542 --> 00:03:25.607
because once everything has been swapped,
inherently the last number or

52
00:03:25.607 --> 00:03:30.771
the first number, the 0 with index will
be the smallest item in the array.

53
00:03:30.771 --> 00:03:38.127
Hence the greater than and
not greater than or equal, and then i- -.

54
00:03:38.127 --> 00:03:40.743
Okay, so
we're going backwards over the array.

55
00:03:40.743 --> 00:03:45.354
All we're gonna do is we're going to

56
00:03:45.354 --> 00:03:49.979
call swap place, 0, i, an array.

57
00:03:49.979 --> 00:03:58.040
And then all we're gonna do
is say heapify(array 0, i).

58
00:03:58.040 --> 00:04:02.502
Okay, so this is the core sorting
part of the algorithm right here.

59
00:04:02.502 --> 00:04:06.659
Create a MaxHeap,
then just work backwards over the array,

60
00:04:06.659 --> 00:04:10.176
swap places, and
then call heapify, that's it.

61
00:04:13.320 --> 00:04:20.970
CreateMaxHeap, let's do swap place first
because that's what I have my notes first.

62
00:04:20.970 --> 00:04:26.807
Pretty simple, you're just gonna say,

63
00:04:26.807 --> 00:04:32.978
let temp = array[index 1] array[index

64
00:04:32.978 --> 00:04:37.995
1] is signed array[index2].

65
00:04:40.067 --> 00:04:47.234
Array[index2] is assigned
temp return array.

66
00:04:51.807 --> 00:04:56.259
Okay, that's swap place.

67
00:04:56.259 --> 00:04:57.842
Let's go down and do,

68
00:05:01.898 --> 00:05:06.935
CreateMaxHeap, this one.

69
00:05:06.935 --> 00:05:12.253
Here we're gonna say, for and
we're just going to do that, for

70
00:05:12.253 --> 00:05:19.162
loop that I was talking about let i
= math.floor, (array.length/2)-1.

71
00:05:21.394 --> 00:05:25.658
I is greater than or equal to 0, i--.

72
00:05:27.814 --> 00:05:29.864
Kind of a bit of a mouthful there.

73
00:05:32.553 --> 00:05:39.114
Okay, and then we just call heapify
on array, i and then array.length.

74
00:05:42.087 --> 00:05:43.977
So you might be asking,
what is this length?

75
00:05:43.977 --> 00:05:48.542
This heapSize, right,
is because as we're sorting our array,

76
00:05:48.542 --> 00:05:51.949
the length of our array kind of changes,
right.

77
00:05:51.949 --> 00:05:54.917
Because as we're doing this part.

78
00:05:57.368 --> 00:05:59.010
This i's was changing, right?

79
00:05:59.010 --> 00:06:02.030
So that everything before
the i in here is sorted.

80
00:06:02.030 --> 00:06:05.210
So we want to exclude those
from our heapify, right?

81
00:06:05.210 --> 00:06:13.150
So going back to here, basically when
we're starting arriving to here, right?

82
00:06:13.150 --> 00:06:14.920
We want to kind of remove
these from our heap.

83
00:06:14.920 --> 00:06:19.200
These two are no longer
children in our heap, right?

84
00:06:19.200 --> 00:06:22.771
So that's what that array size
of the heap size represents,

85
00:06:22.771 --> 00:06:26.440
as we want to say everything
in here is the unsorted heap.

86
00:06:26.440 --> 00:06:28.750
Everything over here is
the sorted part of the array.

87
00:06:28.750 --> 00:06:32.160
We kind of divide our array that way.

88
00:06:32.160 --> 00:06:35.775
And what's keeping track of
that is this heapSize variable.

89
00:06:35.775 --> 00:06:38.410
That's when you're doing a createMax Heap.

90
00:06:38.410 --> 00:06:40.933
You're just passing
array.length as the heapSize.

91
00:06:40.933 --> 00:06:46.266
Whereas this changes here for
this heapify code.

92
00:06:46.266 --> 00:06:49.044
Hopefully makes a little bit of sense.

93
00:06:49.044 --> 00:06:52.190
All right, let's get into the heapify.

94
00:06:52.190 --> 00:06:54.140
This is just a lot of
conditional logic here.

95
00:06:56.150 --> 00:06:57.830
So let's grab the left and
the right child.

96
00:06:57.830 --> 00:07:02.607
That's the first thing we'll do,

97
00:07:02.607 --> 00:07:07.080
left =2* index + 1, right?

98
00:07:07.080 --> 00:07:12.870
And same thing here,
right, is that + 2, okay?

99
00:07:12.870 --> 00:07:17.011
So for whatever item in our array here
the index we now have the left child and

100
00:07:17.011 --> 00:07:18.010
the right child.

101
00:07:19.770 --> 00:07:25.039
And we're going to

102
00:07:25.039 --> 00:07:32.284
say if heapSize&gt;left and

103
00:07:32.284 --> 00:07:41.190
array(largest) let's see.

104
00:07:41.190 --> 00:07:43.490
I forgot to do this variable as well.

105
00:07:43.490 --> 00:07:49.930
Let largestvalueindex=index.

106
00:07:49.930 --> 00:07:53.835
And so what I'm just gonna keep track
of in this particular variable is,

107
00:07:53.835 --> 00:07:58.330
where is the largest values index, and
then I'll just use if statements to check.

108
00:08:00.960 --> 00:08:02.955
I'm sure there's a more elegant
way you could probably do this.

109
00:08:02.955 --> 00:08:05.679
I was just trying to be clear.

110
00:08:05.679 --> 00:08:13.463
So largestvalueindex&gt; array( left),

111
00:08:13.463 --> 00:08:21.620
then largestvalueindex is assigned left.

112
00:08:21.620 --> 00:08:24.620
And then we'll ask the same question for
the right side.

113
00:08:24.620 --> 00:08:29.380
In fact, you could probably even just copy
and paste it and modify it a little bit.

114
00:08:31.370 --> 00:08:33.100
Change this to right.

115
00:08:33.100 --> 00:08:38.231
In fact,
everything just changes to the right yep,

116
00:08:38.231 --> 00:08:40.920
so right, right, right.

117
00:08:40.920 --> 00:08:42.865
So I had to change right
three different times there.

118
00:08:49.877 --> 00:08:53.260
Okay, so after asking these two questions.

119
00:08:53.260 --> 00:08:58.079
We all know is the parent,
the left child or the right child,

120
00:08:58.079 --> 00:09:01.685
the largest item of
those particular three.

121
00:09:01.685 --> 00:09:05.075
And then all I have to do
here is I have to say,

122
00:09:05.075 --> 00:09:08.570
if largestvalueindex
is not equal to index.

123
00:09:08.570 --> 00:09:14.018
So basically do I need to do something if,

124
00:09:14.018 --> 00:09:19.001
so first thing, swapPlace of index,

125
00:09:19.001 --> 00:09:24.480
largestvalueindex and array, okay.

126
00:09:24.480 --> 00:09:28.464
So this will actually do like the swapping
that we were talking about and then.

127
00:09:28.464 --> 00:09:34.026
We just need to make sure that we
call heapify on the child array,

128
00:09:34.026 --> 00:09:37.120
largestvalueindex and heapSize.

129
00:09:48.192 --> 00:09:50.796
That's it should be.

130
00:09:50.796 --> 00:09:55.188
Let's go ahead and run this make sure
that I'm not telling you sweet little

131
00:09:55.188 --> 00:10:00.067
lies, And none to do that.

132
00:10:00.067 --> 00:10:01.397
But that, it's not running.

133
00:10:01.397 --> 00:10:04.456
Why is this not running, please run.

134
00:10:07.639 --> 00:10:09.735
I didn't call it the test
I skip down there.

135
00:10:11.422 --> 00:10:12.283
Now let's try it.

136
00:10:20.551 --> 00:10:23.576
Run, run, run, run, one failed.

137
00:10:26.898 --> 00:10:32.182
Array is undefined, and where's that?

138
00:10:34.648 --> 00:10:35.820
14.

139
00:10:44.988 --> 00:10:50.133
CreateMaxHeap, I didn't return the array,
return array.

140
00:10:54.561 --> 00:10:57.444
So line 23 there,
I had to put a return array.

141
00:10:57.444 --> 00:10:58.514
Let's try that again.

142
00:11:05.746 --> 00:11:07.951
There you go, that worked.

143
00:11:07.951 --> 00:11:14.539
So yeah, make sure down here you
are returning the array though honestly.

144
00:11:14.539 --> 00:11:17.433
You could have just said create
Max because it modifies the array

145
00:11:17.433 --> 00:11:18.189
itself anyway.

146
00:11:21.038 --> 00:11:26.765
Right, make sure that I'm not
telling you more lies But

147
00:11:26.765 --> 00:11:30.769
yeah, that should work, it does.

148
00:11:30.769 --> 00:11:35.310
Either way, we'll leave it like
that because I have it in my notes.

149
00:11:35.310 --> 00:11:38.702
I like doing things like this
where I say it's assigned to this.

150
00:11:38.702 --> 00:11:42.057
So people are aware,
hey array here it's getting overwritten,

151
00:11:42.057 --> 00:11:45.540
despite the fact that semantically
it ends up being the same thing.

152
00:11:48.570 --> 00:11:52.270
Okay, any questions about heapsort?

153
00:11:52.270 --> 00:11:54.400
&gt;&gt; Yeah, confused by recursion.

154
00:11:54.400 --> 00:11:57.240
What's your base case,
how does it exit, how does it stop?

155
00:11:58.420 --> 00:12:01.280
&gt;&gt; Yeah, so the question is,
what's the base case in the recursion?

156
00:12:01.280 --> 00:12:04.330
Valid question because typically
we want to put it up here, right?

157
00:12:04.330 --> 00:12:09.204
So it's pretty obvious, in this particular
case, the base case is when you

158
00:12:09.204 --> 00:12:13.940
start going out like either a swap
doesn't happen or you go out of bounds.

159
00:12:13.940 --> 00:12:17.200
So I guess that either case,
it's when a swap doesn't happen, right?

160
00:12:17.200 --> 00:12:21.262
So this only happens when
largest value index changes, and

161
00:12:21.262 --> 00:12:25.580
eventually you're going to go
outside of your array, right?

162
00:12:25.580 --> 00:12:30.050
So, eventually you're going to
start asking the question is like,

163
00:12:30.050 --> 00:12:36.980
looking at this one, Like 7,
right, or index 8 here.

164
00:12:36.980 --> 00:12:41.770
This doesn't have any children,
therefore swap cannot happen, right?

165
00:12:41.770 --> 00:12:44.980
And therefore that's the base cases
when there's no swap to happen.

166
00:12:46.830 --> 00:12:48.460
Does that make sense?

167
00:12:48.460 --> 00:12:49.210
&gt;&gt; Yeah, it makes sense.

168
00:12:49.210 --> 00:12:52.810
&gt;&gt; Cool, good question,
thank you, other questions?

169
00:12:53.850 --> 00:12:56.670
So how does the number
heapSize change over time?

170
00:12:56.670 --> 00:12:58.630
Is that a fair assessment of the question?

171
00:12:58.630 --> 00:13:00.860
&gt;&gt; Yes, that's correct,
I just forgot the link.

172
00:13:00.860 --> 00:13:04.800
&gt;&gt; That's good, yeah, it's a weird word.

173
00:13:04.800 --> 00:13:09.350
So the,
how does the heapSize change over time?

174
00:13:09.350 --> 00:13:11.789
So let's talk about because
heapify is going to change and

175
00:13:11.789 --> 00:13:14.010
we kind of use it in two different places.

176
00:13:14.010 --> 00:13:15.620
It does the same thing.

177
00:13:15.620 --> 00:13:17.350
But we use it in two different ways,
kind of.

178
00:13:17.350 --> 00:13:20.170
So the first time we use it is
here instead of createMaxHeap.

179
00:13:22.040 --> 00:13:24.213
And this is where we were
starting in the middle.

180
00:13:24.213 --> 00:13:28.419
Again, if we go up to my example up here,
right,

181
00:13:28.419 --> 00:13:32.848
we start here,
when we're doing createMaxHeap.

182
00:13:34.977 --> 00:13:37.784
And the reason why we don't start there is
because these don't have children, right?

183
00:13:37.784 --> 00:13:40.806
So we would never have to swap them with
anything because they have no children

184
00:13:40.806 --> 00:13:41.370
to swap with.

185
00:13:41.370 --> 00:13:46.950
So we start here because this is the first
one to guarantee to have a child, right?

186
00:13:46.950 --> 00:13:49.690
So here, the entire array is the heap.

187
00:13:49.690 --> 00:13:51.823
We have nothing on the sorted
part of the array yet,

188
00:13:51.823 --> 00:13:54.160
this entire thing is considered the heap.

189
00:13:54.160 --> 00:14:00.560
Therefore, that's why here,
the heapSize is the array.length.

190
00:14:00.560 --> 00:14:05.375
Now when we get down to this part here,
which is we're actually doing the sorting.

191
00:14:07.185 --> 00:14:08.835
Let's scroll down to that.

192
00:14:11.635 --> 00:14:15.425
Now the heap size is not actually all
ten elements of the arrays, right?

193
00:14:15.425 --> 00:14:20.245
Now the heap size is just index 8 and
below, right?

194
00:14:20.245 --> 00:14:22.185
So the first 9 elements in the array.

195
00:14:23.335 --> 00:14:27.283
So that's why heapSize on this very,
very first iteration.

196
00:14:27.283 --> 00:14:32.954
There's gonna be a 9, yeah 9.

197
00:14:36.567 --> 00:14:39.410
And that's gonna decrease over time,
right?

198
00:14:39.410 --> 00:14:46.350
Because this sorted part of the race you
have 10 here, then 9, then 8, then 7.

199
00:14:46.350 --> 00:14:49.383
So it's just gonna work backwards,
until eventually,

200
00:14:49.383 --> 00:14:51.475
the entire array ends up being sorted.

