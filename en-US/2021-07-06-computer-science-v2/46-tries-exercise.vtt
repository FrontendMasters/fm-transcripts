WEBVTT

1
00:00:00.000 --> 00:00:05.019
The exercise is under trees.

2
00:00:05.019 --> 00:00:10.338
Inside of trees is cities dot j s and

3
00:00:10.338 --> 00:00:14.924
in here I have I think 926 of

4
00:00:14.924 --> 00:00:19.518
the largest cities in the US.

5
00:00:19.518 --> 00:00:25.821
So, your particular task right now,
is going to be to construct a tree.

6
00:00:25.821 --> 00:00:29.374
Out of all of these various different
cities in the United States.

7
00:00:29.374 --> 00:00:31.145
I don't think there's any duplicants.

8
00:00:31.145 --> 00:00:32.313
In here, right?

9
00:00:32.313 --> 00:00:36.033
But you're gonna have a note for
our a note for m a note for E,

10
00:00:36.033 --> 00:00:40.518
and each one of those is going to have
various different notes off of it.

11
00:00:43.313 --> 00:00:49.108
So what you're gonna do, down here,
as you can see in the unit test

12
00:00:52.914 --> 00:00:55.914
You're gonna call something
that's called create tree.

13
00:00:55.914 --> 00:00:57.880
Once you have a function up here,

14
00:00:57.880 --> 00:01:02.879
that's gonna create a data structure with
all these various different nodes in it.

15
00:01:02.879 --> 00:01:05.936
It's gonna give you a list.

16
00:01:05.936 --> 00:01:09.566
So for the first one I only give
you 10 cities for the second one,

17
00:01:09.566 --> 00:01:13.922
I give you 10 cities for the third one,
give me 25 last one 200 200 and

18
00:01:13.922 --> 00:01:17.885
then eventually I start giving you 500 and
then all of them, right?

19
00:01:21.512 --> 00:01:27.878
And then under that, I'm gonna ask
you to give me a function on that

20
00:01:27.878 --> 00:01:33.363
tree that you give me back called complete
and I'm gonna give you a string here.

21
00:01:33.363 --> 00:01:36.327
So let's take a look at cities again.

22
00:01:36.327 --> 00:01:43.554
If I go up to the first 10 cities, which
will be all of these ones right here,

23
00:01:43.554 --> 00:01:48.448
there's San Diego,
San Antonio and in San Jose,

24
00:01:48.448 --> 00:01:52.696
right so
these three cities will be in there.

25
00:01:52.696 --> 00:01:57.653
So in that test here,
if I start asking you to complete

26
00:01:57.653 --> 00:02:02.609
san you should give me back San Antonio,
San Diego and

27
00:02:02.609 --> 00:02:07.456
San Jose doesn't matter
what order It's up to you,

28
00:02:07.456 --> 00:02:10.342
but that's the job to do here.

29
00:02:16.695 --> 00:02:21.469
I think that should be pretty
good explanation here.

30
00:02:21.469 --> 00:02:25.448
Any questions about the exercise or
how to do it,

31
00:02:25.448 --> 00:02:29.923
you're just gonna be building
a big tree of all these.

32
00:02:29.923 --> 00:02:33.964
Do keep in mind that like, again,
going back to our picture here,

33
00:02:33.964 --> 00:02:36.500
there's an O here and there's an O here.

34
00:02:36.500 --> 00:02:41.850
So you'll have hundreds of O nodes, right,
and they'll just be in different places.

35
00:02:41.850 --> 00:02:44.846
So don't try and we use the same
O node for everything, right?

36
00:02:44.846 --> 00:02:46.919
You're not gonna have just 26 nodes.

37
00:02:46.919 --> 00:02:52.010
For this particular data structure,
you're gonna have thousands of nodes.

38
00:02:56.319 --> 00:03:01.610
Yeah, and then someone asks for
you to complete Bo, what you're going

39
00:03:01.610 --> 00:03:06.562
to do is going to say all right,
go to the root node hop to be hopped.

40
00:03:06.562 --> 00:03:07.129
Right, and

41
00:03:07.129 --> 00:03:10.645
then ask what are all the auto completions
that I can get out of this this and

42
00:03:10.645 --> 00:03:14.585
you'll just say, okay, well I'm gonna
go down this path I'm gonna get Boston.

43
00:03:14.585 --> 00:03:17.570
I'm gonna go down this path and
get Boise and

44
00:03:17.570 --> 00:03:20.885
then I'm gonna return
those as my answer right.

45
00:03:20.885 --> 00:03:24.353
So this is more depth first traversal,
right?

46
00:03:24.353 --> 00:03:26.815
We're depth first traversing these trees.

