WEBVTT

1
00:00:00.320 --> 00:00:02.653
We just did depth-first traversal.

2
00:00:02.653 --> 00:00:08.656
So let's hop down here and
do breadth-first traversal.

3
00:00:08.656 --> 00:00:11.840
Going back to our little fun tree here,
same tree,

4
00:00:11.840 --> 00:00:15.634
what if I want you to look at
the nearest nodes first, right?

5
00:00:15.634 --> 00:00:20.654
So that,
the nearest nodes to 8 are 3 and 10.

6
00:00:20.654 --> 00:00:24.186
And then 1, 6, 14, and then 4,7,13, right?

7
00:00:24.186 --> 00:00:28.960
So we're actually moving
down level by level, right?

8
00:00:28.960 --> 00:00:32.095
This is called a breadth-first
traversal because we went for

9
00:00:32.095 --> 00:00:36.024
breadth first as opposed to those which
were going as deep as possible first.

10
00:00:36.024 --> 00:00:39.798
Now we're trying to go as
close as possible first.

11
00:00:45.121 --> 00:00:51.453
Okay, so a breadth-first traversal
of this array is going to be 8,

12
00:00:51.453 --> 00:00:55.613
3, 10, 1, 6, 14, 4, 7, 13.

13
00:00:59.309 --> 00:01:02.330
So how do you do that?

14
00:01:02.330 --> 00:01:05.920
Well, we're gonna do it with a queue.

15
00:01:05.920 --> 00:01:07.595
So a queue, if you remember,

16
00:01:07.595 --> 00:01:12.025
the first item that you add to it is the
first item that you get out of it, right?

17
00:01:12.025 --> 00:01:16.445
It's kinda like standing in line, right,
the first person who stands in line is

18
00:01:16.445 --> 00:01:19.380
the first person that gets on the ride or
on whatever.

19
00:01:22.300 --> 00:01:26.188
So what we're gonna do is we're
going to add 8 to our queue.

20
00:01:26.188 --> 00:01:29.962
And then we're going to pull off 8,
add it to our array, and

21
00:01:29.962 --> 00:01:33.380
then we're going to enqueue
both of its children.

22
00:01:33.380 --> 00:01:36.543
So we're gonna to add 3 and
10 to our queue.

23
00:01:36.543 --> 00:01:40.420
We're then going to process 3, right?

24
00:01:40.420 --> 00:01:43.190
And then we're going to
enqueue both of it's children.

25
00:01:43.190 --> 00:01:46.630
So our queue right now will be 10,
1, 6, right?

26
00:01:49.110 --> 00:01:50.878
So on and so forth.

27
00:01:50.878 --> 00:01:52.279
Every time that you pull a node off,

28
00:01:52.279 --> 00:01:55.689
you're gonna grab its value, you're gonna
add both of its children to the queue, and

29
00:01:55.689 --> 00:01:57.760
then just keep processing
until the queue is empty.

30
00:02:00.990 --> 00:02:05.020
So, start by adding 8
to the queue like this.

31
00:02:06.540 --> 00:02:11.325
Process 8, and when I say process, I just
mean add it to the final array, right?

32
00:02:11.325 --> 00:02:13.557
So we process 8.

33
00:02:13.557 --> 00:02:16.983
So we add that to the final array
which is equal to 8 right now.

34
00:02:16.983 --> 00:02:23.027
And then we enqueue 3 and
10 to the processing queue.

35
00:02:23.027 --> 00:02:25.340
So we have 3 and
10 in our queue right now.

36
00:02:27.300 --> 00:02:29.920
We're going to dequeue 3,
which is the first item in the array.

37
00:02:31.030 --> 00:02:33.550
And the queue right now
is just gonna be 10.

38
00:02:33.550 --> 00:02:36.670
We're gonna enqueue 3's children.

39
00:02:36.670 --> 00:02:41.606
So we're gonna have 10, 1, and
6 in our array right now in our queue,

40
00:02:41.606 --> 00:02:45.150
and we're gonna add 3 to the final array.

41
00:02:45.150 --> 00:02:46.284
So we have 8 and 3.

42
00:02:48.450 --> 00:02:51.773
Okay, we're gonna dequeue 10,
this one here.

43
00:02:55.303 --> 00:02:59.480
Dequeue 10, so the queue right
now is just gonna be 1 and 6.

44
00:02:59.480 --> 00:03:01.926
We're gonna add 10's
children to the queue.

45
00:03:01.926 --> 00:03:06.871
So, it's gonna be 1,
6, and 14 in the queue.

46
00:03:06.871 --> 00:03:09.073
And we're gonna add 10
to the final array here.

47
00:03:09.073 --> 00:03:11.492
So we have a 8, 3, 10, right?

48
00:03:11.492 --> 00:03:15.784
8, 3, and 10.

49
00:03:15.784 --> 00:03:17.236
We're gonna dequeue 1,

50
00:03:17.236 --> 00:03:20.735
which is the first one in here in
the queue of things to process.

51
00:03:20.735 --> 00:03:25.170
And the queue now is just 6 and 14.

52
00:03:25.170 --> 00:03:27.073
We're gonna dequeue 10, we did that.

53
00:03:27.073 --> 00:03:29.311
We're gonna queue 1's children.

54
00:03:29.311 --> 00:03:32.460
I doesn't have any children,
so nothing gets added.

55
00:03:32.460 --> 00:03:36.661
We're gonna then add 1 to the final array,
we end up with 8, 3, 10, and 1, right?

56
00:03:36.661 --> 00:03:41.076
And I hope you're seeing the pattern here,
which you pull off an item of the queue,

57
00:03:41.076 --> 00:03:44.830
you add it to the final array, and
then you enqueue it's children.

58
00:03:44.830 --> 00:03:46.140
And you just keep doing that.

59
00:03:46.140 --> 00:03:48.070
It's not recursive, it's iterative.

60
00:03:48.070 --> 00:03:52.170
And you just keep doing that until you've
gone through everything in your queue.

61
00:03:54.020 --> 00:03:59.261
So again, our final array here will be 8,
3, 10, 1, 6, 14, 4, 7, 13.

62
00:04:03.665 --> 00:04:06.757
So you might ask now,
why is this any different or

63
00:04:06.757 --> 00:04:09.860
better than depth-first traversals, right?

64
00:04:09.860 --> 00:04:12.640
Why do I need to learn four
different ways to traverse things?

65
00:04:13.680 --> 00:04:15.630
Well, this is really good for
nearness, right?

66
00:04:16.650 --> 00:04:21.221
What if I wanna find, I don't know,

67
00:04:21.221 --> 00:04:25.355
the nearest 6 to the 8, right?

68
00:04:25.355 --> 00:04:27.521
Now, if I was doing
depth-first traversal and

69
00:04:27.521 --> 00:04:30.011
I had a 6 way down here that
was super deep in the array,

70
00:04:30.011 --> 00:04:34.060
I would find that one first, right,
because depth is gonna go deep first.

71
00:04:34.060 --> 00:04:38.859
So you need to do something
like breadth-first traversal.

72
00:04:38.859 --> 00:04:42.263
This actually ends up being one of the
more useful ones that I'm teaching you,

73
00:04:42.263 --> 00:04:45.309
because we're gonna do pathfinding and
graphs here in just a second,

74
00:04:45.309 --> 00:04:48.400
which use breadth-first
traversal quite a lot.

75
00:04:48.400 --> 00:04:51.702
So if this isn't quite concrete
why this is useful, believe me,

76
00:04:51.702 --> 00:04:55.980
in the next two lessons, you're gonna find
out very concretely why this is useful.

