WEBVTT

1
00:00:00.550 --> 00:00:03.366
Let's hop back over to our recursion.

2
00:00:03.366 --> 00:00:06.705
I wanted to give you
a couple of examples here.

3
00:00:06.705 --> 00:00:11.826
Just because we're about to hop into
some really heavy recursion, so I wanted

4
00:00:11.826 --> 00:00:17.115
to make sure that I really hammered home
that you got recursion done pretty well.

5
00:00:17.115 --> 00:00:21.547
So, I'm actually gonna have you
do another exercise in recursion.

6
00:00:21.547 --> 00:00:25.327
So, we did up here, fibonacci.

7
00:00:25.327 --> 00:00:25.916
Right?

8
00:00:25.916 --> 00:00:31.368
Which the definition of
fibonacci is n-1 + n-2.

9
00:00:31.368 --> 00:00:34.491
Of the Fibonacci calls.

10
00:00:34.491 --> 00:00:37.295
Factorials are pretty similar,

11
00:00:37.295 --> 00:00:43.311
that if you have 5 exclamation point
which is how you write factorial.

12
00:00:43.311 --> 00:00:47.985
A factorial is defined
by n(n- 1) factorial.

13
00:00:49.236 --> 00:00:54.722
So, the factorial of 5 is 5
times the factorial of 4.

14
00:00:54.722 --> 00:00:56.696
Factorial, right?

15
00:00:56.696 --> 00:01:02.230
So what this actually ends up being is,

16
00:01:02.230 --> 00:01:07.437
if I have 5 factorial, let's see.

17
00:01:08.786 --> 00:01:14.105
5 factorial is going to be equal

18
00:01:14.105 --> 00:01:19.035
to 5x4x3x2x1, right?

19
00:01:19.035 --> 00:01:23.992
Because 5 factorial is
the 5 times 4 factorial.

20
00:01:23.992 --> 00:01:27.975
And he 4 factorial is this right?

21
00:01:29.616 --> 00:01:32.374
And then 3 factorial is this.

22
00:01:33.618 --> 00:01:36.788
And then 2 factorial is this.

23
00:01:44.147 --> 00:01:45.616
Does that makes sense?

24
00:01:45.616 --> 00:01:49.654
So again, this would actually be even
easier to write as an iterative solution.

25
00:01:49.654 --> 00:01:54.516
But I want you to write this in
recursive solution that it's

26
00:01:54.516 --> 00:01:58.025
the factorial 5 is 5 times factorial 4.

27
00:02:01.733 --> 00:02:05.638
And then the factorial of
1 is just defined to be 1.

28
00:02:05.638 --> 00:02:09.072
But let's pop over here to the test.

29
00:02:09.072 --> 00:02:10.479
Talk about what's going in here.

30
00:02:10.479 --> 00:02:12.538
What's your base case?

31
00:02:14.255 --> 00:02:15.366
&gt;&gt; One.

32
00:02:15.366 --> 00:02:17.147
&gt;&gt; Yep.
Good call.

33
00:02:17.147 --> 00:02:22.056
It's gonna be 1 and
that's just, you can return 1.

34
00:02:22.056 --> 00:02:26.911
[COUGH] Then on your return call, like
whenever you're gonna do the recursion,

35
00:02:26.911 --> 00:02:29.741
how many recursive calls
you're gonna have?

36
00:02:29.741 --> 00:02:31.322
Just one, right?

37
00:02:31.322 --> 00:02:37.207
Whereas Fibonacci was the Fibonacci of 5
is the Fibonacci of 4 plus a Fibonacci 3.

38
00:02:37.207 --> 00:02:42.178
The factorial 5 is 5 times
the factorial 4, right?

39
00:02:42.178 --> 00:02:46.409
So you actually have one recursive call as
opposed to Fibonacci where you had two.

40
00:02:51.922 --> 00:02:58.898
So first thing, base case,
if num is greater than 2, sorry,

41
00:02:58.898 --> 00:03:03.914
less than 2 rather, less than 2 Return 1.

42
00:03:05.989 --> 00:03:10.832
Otherwise, we're just gonna return

43
00:03:10.832 --> 00:03:15.530
num times factorial of num minus 1.

44
00:03:17.125 --> 00:03:20.785
Or n here.

45
00:03:20.785 --> 00:03:22.809
Here we go.

46
00:03:22.809 --> 00:03:25.473
Whatever you call it, that there.

47
00:03:25.473 --> 00:03:28.124
So let's go back to num
cuz I think that's clear.

48
00:03:28.124 --> 00:03:29.675
Well, maybe not.

49
00:03:29.675 --> 00:03:30.222
Anyway.

50
00:03:32.524 --> 00:03:35.093
So let's go ahead and
try and run these tests.

51
00:03:35.093 --> 00:03:39.595
We'll click play here Play and

52
00:03:39.595 --> 00:03:45.879
then down here on recursion factorial,
you'll see that we passed our test.

53
00:03:48.400 --> 00:03:53.118
So again, this would be 100
times faster if we wrote this in

54
00:03:53.118 --> 00:03:57.380
terms of a loop not in terms
of a recursive function, but

55
00:03:57.380 --> 00:04:01.302
I find this pretty descriptive
of what it is right?

56
00:04:01.302 --> 00:04:04.660
It's number of times factorial of n-1.

57
00:04:04.660 --> 00:04:09.084
These still kind of have to
get that like Brainspace have,

58
00:04:09.084 --> 00:04:13.161
this is the body of a one
part of the function, right?

59
00:04:13.161 --> 00:04:17.807
So this factorial function actually does
more work than just the two lines inside

60
00:04:17.807 --> 00:04:18.572
of it right?

61
00:04:18.572 --> 00:04:22.665
Because this is still gonna
run several essentially

62
00:04:22.665 --> 00:04:26.392
iterations of it several
levels of recursion.

63
00:04:30.782 --> 00:04:32.793
Cool.

64
00:04:32.793 --> 00:04:36.699
Any questions about factorials or
recursion or anything like that?

65
00:04:36.699 --> 00:04:38.521
So the question is.

66
00:04:38.521 --> 00:04:42.820
It can get pretty hard to conceptualize
what's happening in the middle of

67
00:04:42.820 --> 00:04:44.078
recursion, right?

68
00:04:44.078 --> 00:04:48.287
It's hard to keep all that stuff in your
brain because our brains don't really

69
00:04:48.287 --> 00:04:50.663
think in recursive manners right we think.

70
00:04:50.663 --> 00:04:55.682
Think very much in a linear
imperative way of thinking.

71
00:04:55.682 --> 00:04:59.260
So coming into this more, I would
say it's slightly more declarative.

72
00:04:59.260 --> 00:05:05.212
This slightly more abstract way of
problem solving can be quite difficult.

73
00:05:05.212 --> 00:05:07.285
So what kind of tips and tricks do I have?

74
00:05:07.285 --> 00:05:09.935
Working through it one,
just accept that it's kind of hard and

75
00:05:09.935 --> 00:05:11.541
that your brain is not built that way.

76
00:05:11.541 --> 00:05:12.102
Right?

77
00:05:12.102 --> 00:05:15.083
So, if it feels hard,
that's because it just is hard.

78
00:05:15.083 --> 00:05:16.192
Okay?

79
00:05:16.192 --> 00:05:17.518
That's the first thing.

80
00:05:17.518 --> 00:05:19.709
The second thing that I'll tell you is,

81
00:05:19.709 --> 00:05:23.264
the first I try when I'm starting
to write a recursive function.

82
00:05:23.264 --> 00:05:24.401
What's the base case?

83
00:05:24.401 --> 00:05:26.379
That's the first question
that I asked myself.

84
00:05:26.379 --> 00:05:28.749
And where's the recursion happening?

85
00:05:28.749 --> 00:05:31.496
Typically at the end, not always.

86
00:05:31.496 --> 00:05:34.381
I try and
get those kind of pieces down first.

87
00:05:34.381 --> 00:05:40.710
And that kind of like, frames my brain in
terms of like, okay, here's what I'm done.

88
00:05:40.710 --> 00:05:46.513
And here's when I recurs that kind
of provides a base level structure

89
00:05:46.513 --> 00:05:51.627
of what I'm expecting to get
done in any level of recursion.

90
00:05:51.627 --> 00:05:55.998
The other thing that kind
of helps me is when I'm

91
00:05:55.998 --> 00:06:00.386
writing this factorial
function on line 15.

92
00:06:00.386 --> 00:06:04.629
It's kind of hard to accept that's going
to return the right thing because I

93
00:06:04.629 --> 00:06:07.560
haven't necessarily
completed writing that yet.

94
00:06:07.560 --> 00:06:12.418
But what you need to do is think,
if I call factorial n-1 I

95
00:06:12.418 --> 00:06:17.191
need to assume that what comes
back from that is correct.

96
00:06:17.191 --> 00:06:21.762
So you need to before you have finished
writing the function assume that it's

97
00:06:21.762 --> 00:06:24.096
going to give you back correct output.

98
00:06:24.096 --> 00:06:28.684
So kind of building that base level
assumption into your coding helps me kind

99
00:06:28.684 --> 00:06:33.487
of move forward because sometimes I get
hung up is like well If I haven't written

100
00:06:33.487 --> 00:06:37.734
factorial yet, then how is factorial
gonna give me the right answer?

101
00:06:37.734 --> 00:06:42.110
And you kind of have to work backwards
from okay, assume everything is correct.

102
00:06:42.110 --> 00:06:45.238
Now we need to go forward and
actually make it correct.

103
00:06:47.372 --> 00:06:52.204
So I don't know those are my
three best shots of providing you

104
00:06:52.204 --> 00:06:54.586
some sort of structure to it.

105
00:06:54.586 --> 00:06:56.658
Sometimes it helps to
get on a whiteboard and

106
00:06:56.658 --> 00:06:58.733
just kind of diagram out the calls, right?

107
00:06:58.733 --> 00:07:00.379
Like, model it as a tree.

108
00:07:00.379 --> 00:07:02.630
That certainly helps as well.

109
00:07:02.630 --> 00:07:05.657
Certainly when I was in college,
I had a huge whiteboard my room and

110
00:07:05.657 --> 00:07:07.613
I just would just diagram everything out.

111
00:07:07.613 --> 00:07:10.126
But you can do that with paper and
things like that.

112
00:07:10.126 --> 00:07:11.518
That always helps as well.

113
00:07:11.518 --> 00:07:15.155
Anything that you can do
to make the abstract more

114
00:07:15.155 --> 00:07:18.358
concrete in your brain is just gonna help.

115
00:07:20.633 --> 00:07:21.565
&gt;&gt; Thank you.

116
00:07:21.565 --> 00:07:22.274
&gt;&gt; Yep.
&gt;&gt; [INAUDIBLE]

117
00:07:22.274 --> 00:07:22.914
&gt;&gt; Yeah, no problem.

118
00:07:22.914 --> 00:07:25.484
Any other questions?

119
00:07:25.484 --> 00:07:26.950
&gt;&gt; Yeah, I got a question.

120
00:07:26.950 --> 00:07:31.542
So based on your explanation,
I guess it's a good idea to think about

121
00:07:31.542 --> 00:07:36.699
recursion as a promise like, well,
yeah, that'd be correct assumption.

122
00:07:36.699 --> 00:07:39.148
&gt;&gt; Yeah, based on my explanation,

123
00:07:39.148 --> 00:07:43.525
it'd be correct to think of
recursion as a promise almost.

124
00:07:43.525 --> 00:07:48.207
I mean, promise in the sense of
you'd get to treat it like something

125
00:07:48.207 --> 00:07:50.601
good is going to come back from it.

126
00:07:50.601 --> 00:07:51.637
Yeah, definitely.

127
00:07:51.637 --> 00:07:52.810
It's not asynchronous.

128
00:07:52.810 --> 00:07:54.837
All right.

129
00:07:54.837 --> 00:08:00.529
&gt;&gt; [INAUDIBLE]
&gt;&gt; Yeah, it's a future value for sure.

130
00:08:00.529 --> 00:08:03.608
But yeah, I just wanna make sure that
people aren't getting caught up that it's

131
00:08:03.608 --> 00:08:04.707
not asynchronous, right?

132
00:08:04.707 --> 00:08:08.711
So the question is here
inside of this nested array,

133
00:08:08.711 --> 00:08:11.450
it's const current equals array.

134
00:08:11.450 --> 00:08:13.542
And then it's gonna recurs,
and call it again.

135
00:08:13.542 --> 00:08:16.240
Well, because those
are different contexts.

136
00:08:16.240 --> 00:08:16.830
It'll be fine.

