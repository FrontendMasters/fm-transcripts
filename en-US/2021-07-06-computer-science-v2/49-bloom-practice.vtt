WEBVTT

1
00:00:00.000 --> 00:00:05.752
So we're gonna come over
here to our exercises,

2
00:00:05.752 --> 00:00:10.254
and we're gonna go to Bloom Filters.

3
00:00:13.041 --> 00:00:15.819
Okay, and let's take a look at this.

4
00:00:15.819 --> 00:00:18.538
So first of all I have three
hashing functions here for

5
00:00:18.538 --> 00:00:20.478
you that I have already built for you.

6
00:00:20.478 --> 00:00:22.036
You don't have to do anything about them,

7
00:00:22.036 --> 00:00:23.691
you don't have to
understand how they work.

8
00:00:23.691 --> 00:00:29.606
They use a library called xxhashjs, which
is just a really fast hashing algorithm.

9
00:00:29.606 --> 00:00:32.662
They'll take a string and
turn it into a number, and

10
00:00:32.662 --> 00:00:36.773
then I turned that number into
a number between 0 and 199, right?

11
00:00:36.773 --> 00:00:40.317
So that you can use a bloom
filter of size 100.

12
00:00:43.662 --> 00:00:47.198
So the first thing I'll say here for
your bloom filter, in fact,

13
00:00:47.198 --> 00:00:50.948
this just kind of set this up for
you so you can get rolling right away.

14
00:00:50.948 --> 00:00:53.478
Bloom filters solutions.

15
00:00:57.206 --> 00:00:59.880
So I would just put a constructor up here.

16
00:01:02.322 --> 00:01:08.157
And then I would just say like this._array

17
00:01:08.157 --> 00:01:13.525
= new Array(100).fill(0).

18
00:01:13.525 --> 00:01:17.402
So this will give you an array on
this ._array that is just filled with

19
00:01:17.402 --> 00:01:18.198
0s, right?

20
00:01:18.198 --> 00:01:20.982
And then you'll just be flipping those
to 1 just like how I showed you.

21
00:01:24.328 --> 00:01:29.133
So all you need to do is do an add
here and a contains here, and

22
00:01:29.133 --> 00:01:31.550
we'll go from there, cool.

23
00:01:31.550 --> 00:01:34.228
This is actually a fairly
straight forward one,

24
00:01:34.228 --> 00:01:38.034
I think I only end up writing ten lines
of code to get all this all done.

25
00:01:38.034 --> 00:01:40.144
So, yeah, cool.

26
00:01:46.146 --> 00:01:48.480
Let's build a bloom filter.

27
00:01:48.480 --> 00:01:53.461
So, the first thing we already built here
was this array = new Array(100).fill(0).

28
00:01:53.461 --> 00:01:59.170
We have an array of 100
things filled with 0s, right?

29
00:01:59.170 --> 00:02:04.752
So, to do an add really all we're
going to do is this._array.

30
00:02:06.961 --> 00:02:15.246
And then we're gonna put our three hashing
functions here, string = 1, right?

31
00:02:15.246 --> 00:02:18.809
And actually we're just gonna
do that three times for

32
00:02:18.809 --> 00:02:21.271
all of our three hashing functions.

33
00:02:26.390 --> 00:02:28.549
That's it,
that's all I gotta do to add something.

34
00:02:28.549 --> 00:02:32.309
So one big key thing that you
know about Bloom filters,

35
00:02:32.309 --> 00:02:34.852
we can't delete anything, right?

36
00:02:34.852 --> 00:02:37.672
Because how do you know what to delete and
what has previously used and

37
00:02:37.672 --> 00:02:38.652
what hasn't, right?

38
00:02:38.652 --> 00:02:40.098
There's no additional information here.

39
00:02:40.098 --> 00:02:44.338
So that's another kind of downfall of
Bloom filters is that they cannot delete

40
00:02:44.338 --> 00:02:49.922
from a Bloom filter, Okay?

41
00:02:49.922 --> 00:02:53.897
Then here with the contains,
all you're gonna do is return and

42
00:02:53.897 --> 00:02:56.456
I'm gonna show you a little trick here.

43
00:02:56.456 --> 00:03:00.758
If you put a double
exclamation point this is gonna

44
00:03:00.758 --> 00:03:03.940
coalesce it into a Boolean, right?

45
00:03:03.940 --> 00:03:12.524
So this is gonna take whatever this
comes back as a true or false.

46
00:03:12.524 --> 00:03:20.642
And I'll say this._array,
each one string and

47
00:03:20.642 --> 00:03:26.788
then I want to do this like this h2.

48
00:03:30.904 --> 00:03:35.138
Sorry, this one right
here is gonna be h2 and

49
00:03:35.138 --> 00:03:40.047
this one right here is gonna be h3,
just like that.

50
00:03:40.047 --> 00:03:43.828
So, yeah, let's talk about this
is a little bit clever, but

51
00:03:43.828 --> 00:03:45.656
let's just walk through it.

52
00:03:45.656 --> 00:03:49.194
Each one, so
this is gonna be either a 0 or a 1,

53
00:03:49.194 --> 00:03:54.159
this is gonna be a 0 or a 1, and
this is gonna be a 0 or a 1, right?

54
00:03:57.124 --> 00:03:59.914
0s, if you do this,

55
00:04:03.415 --> 00:04:06.943
I'll just ignore that's not helpful.

56
00:04:06.943 --> 00:04:09.281
Make a little bit bigger down here.

57
00:04:09.281 --> 00:04:14.793
If you look here in the bottom,
right, if I do, 0 == false,

58
00:04:14.793 --> 00:04:18.956
that's true, right, same with true == 1.

59
00:04:21.304 --> 00:04:26.525
So these things if you're willing to do,
what's the word I'm looking for?

60
00:04:29.432 --> 00:04:32.827
That's just escaping me,
the term there, anyway.

61
00:04:32.827 --> 00:04:38.709
If you're willing to convert
it from a number to a Boolean,

62
00:04:38.709 --> 00:04:43.781
then you can do it this way
with a double equal sign.

63
00:04:43.781 --> 00:04:50.721
So if I put !!0 that actually
comes back as false, right?

64
00:04:50.721 --> 00:04:56.358
And if I put !!1 that comes back as true.

65
00:04:56.358 --> 00:05:03.188
So if I do !!0(&amp;&amp;0 &amp;&amp;0), that's false,

66
00:05:03.188 --> 00:05:09.710
but if any one of these is true,
this comes back as or

67
00:05:09.710 --> 00:05:15.102
actually, Right?

68
00:05:17.240 --> 00:05:19.882
So only if they all come
back as 1 is it true.

69
00:05:25.372 --> 00:05:27.574
So now,
we should be able to run our test here.

70
00:05:29.722 --> 00:05:32.541
Let's reset my Zoom here play.

71
00:05:35.992 --> 00:05:41.246
And if you go look at
Bloom filters we got to

72
00:05:41.246 --> 00:05:47.122
not skip this, And click Play.

73
00:05:51.262 --> 00:05:52.581
And did that work?

74
00:05:52.581 --> 00:05:54.547
No.

75
00:05:57.163 --> 00:05:59.217
How these are all skipped, let's do this.

76
00:06:03.291 --> 00:06:11.003
Okay, one more time, let's try it,
Bloom filters, there we go.

77
00:06:15.797 --> 00:06:19.845
And let's click on that, you can see
that it's returning false and empty,

78
00:06:19.845 --> 00:06:23.465
handles one item, handles many items,
all that works super well.

79
00:06:26.414 --> 00:06:32.558
Okay, so you could have done this
in a much less clever way and

80
00:06:32.558 --> 00:06:37.499
just said like if this._array h1 === 1 and

81
00:06:37.499 --> 00:06:41.617
the h2 and h3, all that kind of stuff.

82
00:06:41.617 --> 00:06:46.531
And that would have probably been more
clear, but this seemed kind of terse and

83
00:06:46.531 --> 00:06:48.399
nice so I went well with that.

84
00:06:48.399 --> 00:06:50.144
That's it, that's all Bloom filters.

85
00:06:50.144 --> 00:06:52.141
Anyone have any questions
about Bloom filters?

86
00:06:54.470 --> 00:06:57.655
&gt;&gt; Yeah,
I got a question about implementation.

87
00:06:57.655 --> 00:06:59.537
Because it's JavaScript, right?

88
00:06:59.537 --> 00:07:02.619
Like no matter what our hash
function is gonna return,

89
00:07:02.619 --> 00:07:04.430
it's still gonna put it there.

90
00:07:04.430 --> 00:07:09.208
The fact that we create an array
of size 100 doesn't matter,

91
00:07:09.208 --> 00:07:11.513
right, like, technically.

92
00:07:11.513 --> 00:07:15.734
If it doesn't return the number
if it's gonna return the string,

93
00:07:15.734 --> 00:07:18.289
Is just gonna go there and
create a property.

94
00:07:18.289 --> 00:07:19.991
&gt;&gt; Yeah, that's true.

95
00:07:19.991 --> 00:07:22.161
Okay.

96
00:07:22.161 --> 00:07:25.600
&gt;&gt; I think, I mean, not good programming,

97
00:07:25.600 --> 00:07:30.234
but let's just triple check,
make sure that correct.

98
00:07:30.234 --> 00:07:35.250
If I say x = empty array,
and I say x(100) = 1,

99
00:07:35.250 --> 00:07:40.613
and then I asked for
x(100) gives me 1 back, yeah?

100
00:07:40.613 --> 00:07:43.964
So, you're absolutely correct.

101
00:07:43.964 --> 00:07:45.282
&gt;&gt; Okay, good.

102
00:07:45.282 --> 00:07:50.411
&gt;&gt; So, but here we created a number,
an array of 100.

103
00:07:50.411 --> 00:07:52.686
So I guess what you're saying is,

104
00:07:52.686 --> 00:07:57.167
JavaScript will dynamically allocate
that for you no matter what.

105
00:07:57.167 --> 00:08:04.135
So you could have just said new Array and
you can treat undefined as 0.

106
00:08:04.135 --> 00:08:05.962
Yeah, that would work with JavaScript.

107
00:08:09.239 --> 00:08:11.721
I don't know if I suggested it,
do I suggest it?

108
00:08:11.721 --> 00:08:13.622
I don't know if it matters,
honestly, I don't know.

109
00:08:13.622 --> 00:08:19.080
[LAUGH] It's good to have defined
boundaries to your problem.

110
00:08:19.080 --> 00:08:22.254
&gt;&gt; Yeah, just my problem is like,
it's kind of an illusion if our hash

111
00:08:22.254 --> 00:08:25.275
function is not just numeric,
right, it's still gonna work.

112
00:08:25.275 --> 00:08:27.575
Like we're not gonna know,
&gt;&gt; Yep.

113
00:08:29.694 --> 00:08:31.203
Yeah, yeah.

114
00:08:31.203 --> 00:08:35.176
And the only reason that does work is
cuz we have these modules right here for

115
00:08:35.176 --> 00:08:39.103
our hashing functions that guarantees
that it stays between 0 and 99.

