WEBVTT

1
00:00:00.270 --> 00:00:03.440
So let's go ahead and
give insertion sort of shot,

2
00:00:03.440 --> 00:00:06.030
you're gonna hear edit on code sandbox.

3
00:00:07.380 --> 00:00:10.937
We're gonna pop over to Insertion-sort.

4
00:00:17.371 --> 00:00:19.439
Can you ignore that part?

5
00:00:19.439 --> 00:00:22.902
So you'll have the test.skip here again,
make sure you delete that and

6
00:00:22.902 --> 00:00:24.220
write your code.

7
00:00:24.220 --> 00:00:28.715
And your code is gonna go
here into insertion sort, and

8
00:00:28.715 --> 00:00:31.460
yeah, go ahead and get started.

9
00:00:32.670 --> 00:00:37.450
So we're gonna pop into here,
this is InsertionSort.test.js.

10
00:00:38.740 --> 00:00:41.040
And we're gonna have two for loops here.

11
00:00:43.540 --> 00:00:48.620
We have an outer one that's
gonna loop over the array,

12
00:00:48.620 --> 00:00:53.707
starting with the first
element in the array, right?

13
00:00:53.707 --> 00:00:58.664
Cuz the zeroeth element will be
the sorted part of the array.

14
00:00:58.664 --> 00:01:02.199
[COUGH] And then we're gonna go
inner loop that's going to go over

15
00:01:02.199 --> 00:01:04.500
backwards to find out where it should go.

16
00:01:05.710 --> 00:01:11.819
So we're gonna say for, let i = 1,

17
00:01:11.819 --> 00:01:18.135
i is less than nums.length, i++.

18
00:01:23.600 --> 00:01:29.897
And I'm gonna turn this off autorun,
soft tab, okay?

19
00:01:29.897 --> 00:01:34.507
Then I will say let numberToInsert,
so this gonna be like

20
00:01:34.507 --> 00:01:39.420
the number that we're gonna be comparing,
= numbs(i).

21
00:01:39.420 --> 00:01:42.362
Then we're gonna say let j,

22
00:01:42.362 --> 00:01:47.639
cuz we're gonna keep track
of that number as well.

23
00:01:52.811 --> 00:01:58.785
Here, we're gonna say for let j= or

24
00:01:58.785 --> 00:02:03.792
let's put just j, j = i- 1,

25
00:02:03.792 --> 00:02:11.312
nums(j) is greater than numberToInsert and

26
00:02:11.312 --> 00:02:16.540
j is greater than or equal to 0.

27
00:02:18.090 --> 00:02:21.840
And then at the end of every loop,
we're gonna do j- -.

28
00:02:21.840 --> 00:02:24.252
Now again, there are multiple
ways you can totally write this,

29
00:02:24.252 --> 00:02:26.660
this is just the way
that I chose to do it.

30
00:02:26.660 --> 00:02:31.128
But here we're starting
with j being 1 below

31
00:02:31.128 --> 00:02:35.330
the number that we're trying to insert.

32
00:02:35.330 --> 00:02:39.740
And then we're asking,
is the number at that point,

33
00:02:39.740 --> 00:02:42.980
is that greater than number to insert?

34
00:02:44.590 --> 00:02:46.080
And is it greater than 0?

35
00:02:50.000 --> 00:02:53.345
And if not, then we're gonna just
move the number to the side, right?

36
00:02:53.345 --> 00:03:02.007
So we're gonna say nums(j + 1),
Is gonna be equal to nums j,

37
00:03:02.007 --> 00:03:05.483
so this is actually moving
the numbers backwards in the array.

38
00:03:08.355 --> 00:03:09.879
As soon as that's true,

39
00:03:09.879 --> 00:03:14.320
then we've arrived at the point that
the number is ready to be inserted.

40
00:03:14.320 --> 00:03:19.656
So we're gonna say nums(j

41
00:03:19.656 --> 00:03:25.228
+ 1) = numberToInsert.

42
00:03:25.228 --> 00:03:29.240
And again, if you arrive on the number
where it's already in its correct place,

43
00:03:29.240 --> 00:03:32.780
this is just going to assign a number
to itself, which is totally fine,

44
00:03:32.780 --> 00:03:34.089
no problems whatsoever.

45
00:03:34.089 --> 00:03:37.740
And then at the bottom,
we just say return nums.

46
00:03:42.981 --> 00:03:44.780
That's it.

47
00:03:44.780 --> 00:03:49.686
So the outer loop which is going forward
from assuming everything behind it,

48
00:03:49.686 --> 00:03:54.430
everything underneath i is going to
be the sorted part of the array.

49
00:03:54.430 --> 00:03:58.411
And then we're gonna have j, which is
going to work backwards through the sort

50
00:03:58.411 --> 00:04:00.840
of part of the array to
us insert the next thing.

51
00:04:03.320 --> 00:04:07.419
So in theory, we should be able to
put remove test.skip down there and

52
00:04:07.419 --> 00:04:08.329
run our tests.

53
00:04:10.320 --> 00:04:14.658
And hopefully, if we get into insertion
sort, it looks like we are passing there.

54
00:04:14.658 --> 00:04:16.010
Pretty cool.

55
00:04:18.599 --> 00:04:21.520
So let's just go visualize that for
funsies.

56
00:04:24.240 --> 00:04:28.425
Insert that,
we're gonna pop over to sort here.

57
00:04:34.591 --> 00:04:36.310
And where are we gonna snapshot?

58
00:04:36.310 --> 00:04:43.661
We wanna snapshot, Probably every
time at the end of this, right?

59
00:04:57.442 --> 00:05:01.205
Now this isn't truly ten
comparisons going on.

60
00:05:01.205 --> 00:05:05.307
But you can kinda see here that you
have here at the beginning of this,

61
00:05:05.307 --> 00:05:10.190
we can also snapshot beginning as well,
just so we can see where we start.

62
00:05:10.190 --> 00:05:15.710
Snapshot numbs, So

63
00:05:15.710 --> 00:05:19.626
you can see here this three right now
represents kind of the sorted part list.

64
00:05:19.626 --> 00:05:22.550
2 gets inserted before
the 0 at the beginning, and

65
00:05:22.550 --> 00:05:25.678
then A gets inserted the right place,
then 5, right?

66
00:05:25.678 --> 00:05:29.394
And so you can kind of see that insertion
going on until eventually down here,

67
00:05:29.394 --> 00:05:31.410
we end up with something that's sorted.

68
00:05:33.100 --> 00:05:39.258
Or we can do this for 50 or something like
that to see something a little bigger.

69
00:05:46.872 --> 00:05:50.750
But you can kind of see this blue
demarcate the sorted part of the list

70
00:05:50.750 --> 00:05:52.670
from the unsorted part, right?

71
00:05:52.670 --> 00:05:57.674
So everything before this 49 right here in
this particular row, that's all sorted,

72
00:05:57.674 --> 00:06:02.490
3, 4, 6, 7, 8, 16, and then everything
after that is the unsorted part.

73
00:06:06.460 --> 00:06:07.068
Pretty cool, right?

74
00:06:11.094 --> 00:06:15.510
And then down here at the bottom, you can
see we end up with a fully sorted list.

75
00:06:15.510 --> 00:06:20.521
The idea is that you
are moving numbers forward

76
00:06:20.521 --> 00:06:24.770
in the array, so 40 gets moved to 8.

77
00:06:24.770 --> 00:06:28.113
Let's just make this bigger and
let's make it smaller.

78
00:06:33.694 --> 00:06:38.329
So here,
let's look at this line down here, the 0,

79
00:06:38.329 --> 00:06:41.522
3, 4, 6, 7, 8, 9, right?

80
00:06:41.522 --> 00:06:44.654
So, we have 2's that's gonna be
the next number inserted into

81
00:06:44.654 --> 00:06:46.740
the unsorted part of the array.

82
00:06:46.740 --> 00:06:49.652
Everything 9 to 0 here, this is sorted.

83
00:06:49.652 --> 00:06:52.900
What it's gonna do on these iterations,
in fact, let's just visualize that,

84
00:06:52.900 --> 00:06:54.060
I think this would work.

85
00:06:54.060 --> 00:06:59.613
We just say this is gonna
get a lot bigger but

86
00:06:59.613 --> 00:07:02.396
snapshot(nums).

87
00:07:14.670 --> 00:07:19.605
So you can kind of see here now we start
having these redundant numbers, right,

88
00:07:19.605 --> 00:07:20.500
like 8 here.

89
00:07:20.500 --> 00:07:24.371
It's moving piece by piece the array
forward until eventually we create

90
00:07:24.371 --> 00:07:25.890
the correct space.

91
00:07:25.890 --> 00:07:29.982
The down here after this for loop,
kind of get rid of this, and

92
00:07:29.982 --> 00:07:31.890
move this over a little bit.

93
00:07:33.190 --> 00:07:36.541
So that this is moving everything
forward 1, right, so 8 moves to here,

94
00:07:36.541 --> 00:07:39.860
then it moves to here,
then here, then here, right?

95
00:07:39.860 --> 00:07:44.522
Until eventually, we arrive to this
part of the code right here, line 18,

96
00:07:44.522 --> 00:07:49.415
which is actually just going to insert
that number into the exact correct place.

97
00:07:51.212 --> 00:07:52.020
Does that make sense?

98
00:07:53.350 --> 00:07:58.329
So that's the actual part of the code
that's moving numbers forward until you

99
00:07:58.329 --> 00:08:02.260
create the space where we're
going to insert our new number.

100
00:08:04.680 --> 00:08:05.770
Hopefully, that makes sense.

101
00:08:06.840 --> 00:08:07.857
It's kind of abstract.

102
00:08:15.419 --> 00:08:16.710
It's better if I put it here.

103
00:08:20.981 --> 00:08:24.523
Yeah, again, you can see these numbers
kind of where they're duplicated and

104
00:08:24.523 --> 00:08:25.765
they're moving, right?

105
00:08:25.765 --> 00:08:31.040
So here, we've moved 5, 4, the number
we're trying to insert right now is what?

106
00:08:32.430 --> 00:08:33.155
9?

107
00:08:36.074 --> 00:08:38.780
Or something like that?

108
00:08:38.780 --> 00:08:40.749
We've kind of pulled that
number out of the array and

109
00:08:40.749 --> 00:08:41.966
we're waiting to insert that.

110
00:08:41.966 --> 00:08:44.023
That number is being held
here in number to insert and

111
00:08:44.023 --> 00:08:46.320
it's actually not being
reflected in the array.

112
00:08:46.320 --> 00:08:48.873
That's why you see the duplication,

113
00:08:48.873 --> 00:08:53.193
until eventually we rereinserts
that number here on line 18.

114
00:08:53.193 --> 00:08:53.881
Cool.

115
00:08:53.881 --> 00:08:55.373
I feel good about that explanation.

116
00:08:55.373 --> 00:08:55.873
[LAUGH]

