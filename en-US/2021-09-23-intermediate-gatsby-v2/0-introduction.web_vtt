WEBVTT

1
00:00:00.030 --> 00:00:01.830
We're gonna talk about Gatsby today.

2
00:00:01.830 --> 00:00:05.550
And today, we're gonna dig in to some
of the more advanced used cases of it.

3
00:00:05.550 --> 00:00:09.302
This is something that I think
it's really interesting.

4
00:00:09.302 --> 00:00:14.460
There's so much you can do with Gatsby
beyond what the initial impressions are.

5
00:00:14.460 --> 00:00:19.104
I think when you first look at Gatsby,
if you just went to the intro to Gatsby

6
00:00:19.104 --> 00:00:22.642
course that I did a couple days ago,
you may have have kind

7
00:00:22.642 --> 00:00:27.470
of gotten the impression that Gatsby
is reserved for building static sites.

8
00:00:27.470 --> 00:00:30.150
It's a really good tool for that.

9
00:00:30.150 --> 00:00:34.334
You can load data from anywhere,
you can put it up from the Internet, and

10
00:00:34.334 --> 00:00:35.950
it all happens very fast.

11
00:00:35.950 --> 00:00:38.710
But, Gatsby can do a lot more than that.

12
00:00:38.710 --> 00:00:42.794
And today, we're gonna dig into
what the opportunities are.

13
00:00:42.794 --> 00:00:47.467
What the additional things we can do
are with Gatsby that let us go more toward

14
00:00:47.467 --> 00:00:52.361
the app side of the spectrum and take
advantage of some of these dynamic things,

15
00:00:52.361 --> 00:00:54.970
and do some pretty powerful stuff.

16
00:00:54.970 --> 00:00:59.060
So first, let's go ahead and
go through just some basics.

17
00:00:59.060 --> 00:01:00.740
I'm gonna show a few slides here.

18
00:01:00.740 --> 00:01:04.495
If you've seen the intro to Gatsby
workshop, this is gonna look familiar but

19
00:01:04.495 --> 00:01:05.920
it's good to recap.

20
00:01:05.920 --> 00:01:11.540
So let's start by saying who I am?

21
00:01:11.540 --> 00:01:14.540
So I am Jason Lengstorf.

22
00:01:14.540 --> 00:01:18.000
I'm the VP of
Developer Experience at Netlify.

23
00:01:18.000 --> 00:01:21.152
I'm also the host of a show called
Learning with Jason which runs on Twitch.

24
00:01:21.152 --> 00:01:22.852
I pair program with people and

25
00:01:22.852 --> 00:01:25.980
we learn something new together
a couple times a week.

26
00:01:25.980 --> 00:01:27.800
I used to be on the Gatsby team.

27
00:01:27.800 --> 00:01:31.042
I am now over at Netlify as I said.

28
00:01:31.042 --> 00:01:33.708
But while I was at Gatsby,
I got to see a lot of cool things,

29
00:01:33.708 --> 00:01:35.298
work with a lot of amazing people.

30
00:01:35.298 --> 00:01:39.806
And I'm also a boop enthusiast, I really
like just being goofy on the Internet,

31
00:01:39.806 --> 00:01:42.470
I like corgis,
I like booping them on the nose.

32
00:01:42.470 --> 00:01:45.040
I like making websites about boop and
corgis on the nose.

33
00:01:45.040 --> 00:01:49.890
It's all really just
right here in my heart.

34
00:01:50.990 --> 00:01:53.430
So let's start with saying
what the heck is Gatsby?

35
00:01:53.430 --> 00:01:56.260
So, Gatsby is two things.

36
00:01:56.260 --> 00:02:01.138
If you start googling Gatsby,
it can get a little bit confusing, and

37
00:02:01.138 --> 00:02:06.015
that is because Gatsby is the name
of both an open source framework and

38
00:02:06.015 --> 00:02:09.120
a venture backed cloud company, right?

39
00:02:09.120 --> 00:02:12.580
And they are connected,
but they're not the same.

40
00:02:12.580 --> 00:02:14.164
And so
that can get a little bit confusing,

41
00:02:14.164 --> 00:02:16.490
it can be a little hard to
understand what's going on.

42
00:02:16.490 --> 00:02:18.745
So for the purposes of this workshop,

43
00:02:18.745 --> 00:02:21.923
we are only going to talk
about Gatsby the framework.

44
00:02:21.923 --> 00:02:25.050
We are not going to talk
about Gatsby cloud.

45
00:02:25.050 --> 00:02:29.569
So that helps it, at least in
the context of this, we are going to

46
00:02:29.569 --> 00:02:34.612
restrict all of our discussion around
the open source framework only.

47
00:02:34.612 --> 00:02:37.700
None of the features that we're using
today are restricted to Gatsby cloud.

48
00:02:37.700 --> 00:02:40.180
Nothing requires you to have
a Gatsby cloud account.

49
00:02:40.180 --> 00:02:42.740
This is all open source,
you can do whatever you want with it.

50
00:02:43.760 --> 00:02:46.240
So, what Gatsby is,
it's a static site generator.

51
00:02:46.240 --> 00:02:48.950
But as I said,
it can do a little bit more than that.

52
00:02:48.950 --> 00:02:52.584
Its primary thing is taking in data,
running a build step, and

53
00:02:52.584 --> 00:02:54.170
outputting static files.

54
00:02:54.170 --> 00:02:56.670
This is known as
the Jamstack architecture.

55
00:02:56.670 --> 00:03:01.277
And what that means is you decouple your
front end, because by putting them into

56
00:03:01.277 --> 00:03:05.979
static files, you're able to ship that
to a CDN, it's not reliant on a server.

57
00:03:05.979 --> 00:03:10.666
It can be completely decoupled from
any API's microservices back-ends that

58
00:03:10.666 --> 00:03:11.310
you have.

59
00:03:11.310 --> 00:03:15.049
It is also then pre-compiled
which is that build step.

60
00:03:16.180 --> 00:03:20.210
And that pre-compilation helps
cut down on resource usage.

61
00:03:20.210 --> 00:03:24.178
If you know that a page is always gonna
look the same no matter who looks at it,

62
00:03:24.178 --> 00:03:28.208
building that page ahead of time cuts
down on the server resources required to

63
00:03:28.208 --> 00:03:30.208
make that available to the Internet.

64
00:03:30.208 --> 00:03:34.034
You have the ability to put it
up on a CDN, CDN are cheap,

65
00:03:34.034 --> 00:03:38.960
they're very performant,
they are scalable, they're secure.

66
00:03:38.960 --> 00:03:41.152
It's pretty hard to take down a CDN.

67
00:03:41.152 --> 00:03:46.094
And so in the grand scheme of things,
if you've got a file that you can make

68
00:03:46.094 --> 00:03:51.276
static, putting it as a static file on
a CDN is probably one of the easiest ways

69
00:03:51.276 --> 00:03:56.430
to hit that kind of enterprise grade
of uptime and availability and scale.

70
00:03:56.430 --> 00:03:57.810
Gatsby is also built on React.

71
00:03:57.810 --> 00:04:02.778
So React is a Facebook framework
that gives us a lot of ability to

72
00:04:02.778 --> 00:04:07.540
modify the UI quickly through
pretty thoughtful APIs.

73
00:04:07.540 --> 00:04:10.399
It's a great way to handle
user interactivity.

74
00:04:10.399 --> 00:04:14.474
And stateful things across UI is where you
can kind of have a button over here and

75
00:04:14.474 --> 00:04:16.031
change some state over here.

76
00:04:16.031 --> 00:04:20.131
Things that are getting easier with native
web APIs, but especially when React

77
00:04:20.131 --> 00:04:24.430
first came to prominence, they weren't
easy, it was it was pretty challenging.

78
00:04:25.710 --> 00:04:27.420
Gatsby's also all in on GraphQL.

79
00:04:27.420 --> 00:04:34.187
GraphQL is a data layer that allows for
us to query for arbitrary nested data.

80
00:04:34.187 --> 00:04:39.170
You can start by looking at one object and
then look at the related object.

81
00:04:39.170 --> 00:04:40.962
So if you've ever used Rest,

82
00:04:40.962 --> 00:04:45.750
you would hit an end point for
let's say your blog posts or API/ posts.

83
00:04:45.750 --> 00:04:48.100
That's gonna come back
with a list of blogs.

84
00:04:48.100 --> 00:04:52.790
And then if you have comments,
it would give you an array of comment IDs.

85
00:04:52.790 --> 00:04:54.275
And then you would have to go and

86
00:04:54.275 --> 00:04:57.603
make a query for each one of those
comments if you wanted to show them.

87
00:04:57.603 --> 00:05:00.185
Which means that you're making tens or

88
00:05:00.185 --> 00:05:05.320
even hundreds of rest calls to load
one blogs worth of posts and comments.

89
00:05:05.320 --> 00:05:07.210
That can be really challenging.

90
00:05:07.210 --> 00:05:09.136
What GraphQL does instead,

91
00:05:09.136 --> 00:05:13.481
is it abstracts all that away into
a kind of a centralized layer.

92
00:05:13.481 --> 00:05:17.169
Where you're able to say I want my blog
and I also want all the comments and

93
00:05:17.169 --> 00:05:19.725
let me get the comment
author in the comment text.

94
00:05:19.725 --> 00:05:24.074
And GraphQL will bring all that data
together and let us make one request to

95
00:05:24.074 --> 00:05:27.667
the GraphQL endpoint that then
brings us back all that data.

96
00:05:27.667 --> 00:05:32.724
So it's, really really good when you're
dealing with loosely structured data.

97
00:05:32.724 --> 00:05:37.326
If you're doing data in your site that
will be related to itself kind of

98
00:05:37.326 --> 00:05:39.130
spread all over the place.

99
00:05:39.130 --> 00:05:43.592
Sometimes you'll need a subsection and
maybe you'll need something much broader

100
00:05:43.592 --> 00:05:47.090
in all over the place,
GraphQL is a great way to solve that.

101
00:05:47.090 --> 00:05:51.499
And when you're dealing with building
websites, especially websites that pull in

102
00:05:51.499 --> 00:05:54.808
data from all around the web,
which is how the Jamstack works.

103
00:05:54.808 --> 00:05:58.011
You might be pulling from a REST API,
multiple headless services,

104
00:05:58.011 --> 00:06:00.620
maybe you've got a headless CMS for
your blog.

105
00:06:00.620 --> 00:06:03.469
Maybe you've got a headless e-Commerce
system like you're using Shopify to

106
00:06:03.469 --> 00:06:04.340
manage your products.

107
00:06:05.340 --> 00:06:09.440
Maybe you're pulling in comments
from a third party system as well.

108
00:06:09.440 --> 00:06:14.696
Maybe you've got a custom back end that
has an API for some of your own data,

109
00:06:14.696 --> 00:06:18.940
all of that gets stitched
together in a Jamstack layer.

110
00:06:18.940 --> 00:06:22.192
And having this GraphQL layer to bring
those together and create relationships

111
00:06:22.192 --> 00:06:24.920
between them is really powerful,
gives you a lot of flexibility.

112
00:06:24.920 --> 00:06:26.730
So that's why Gatsby went all in on it.

113
00:06:26.730 --> 00:06:31.190
It's a really good use case for
building websites.

114
00:06:33.080 --> 00:06:36.930
Gatsby is also opinionated,
it wants you to do things a certain way.

115
00:06:36.930 --> 00:06:42.290
It's gonna give you very clear APIs, it's
got a lot of things that are done for you.

116
00:06:42.290 --> 00:06:43.773
But in order to get those benefits,

117
00:06:43.773 --> 00:06:45.810
you have to be willing to
work with the platform.

118
00:06:46.980 --> 00:06:49.920
I've watched a lot of people
make themselves really sad by

119
00:06:49.920 --> 00:06:54.060
trying to disagree with Gatsby's opinions
and then they'll dive into the babble

120
00:06:54.060 --> 00:06:58.209
configure the Webpack config to change it,
and it just leads to sadness, right?

121
00:06:58.209 --> 00:07:01.598
So Gatsby is an opinionated tool,
you get a lot for

122
00:07:01.598 --> 00:07:05.651
agreeing to follow the conventions
that Gatsby provides.

123
00:07:05.651 --> 00:07:09.464
If you find yourself constantly
fighting against what Gatsby does,

124
00:07:09.464 --> 00:07:11.896
you may wanna consider another framework,

125
00:07:11.896 --> 00:07:15.990
because the benefit of an opinionated
framework is what's done for you.

126
00:07:15.990 --> 00:07:19.074
If you are spending most of your
effort arguing with your framework,

127
00:07:19.074 --> 00:07:21.210
you've probably chosen
the wrong framework.

128
00:07:22.870 --> 00:07:26.752
Gatsby is perf-conscious, so one of the
core benefits of Gatsby outside of just

129
00:07:26.752 --> 00:07:29.547
when you build things to static files and
put them on a CDN,

130
00:07:29.547 --> 00:07:31.963
you're automatically
gonna get a perf benefit.

131
00:07:31.963 --> 00:07:34.754
Because the site loads faster,
there's less data to load,

132
00:07:34.754 --> 00:07:36.680
you don't have to keep servers running.

133
00:07:36.680 --> 00:07:39.584
So you don't have to
manage data round trips or

134
00:07:39.584 --> 00:07:42.940
scaling up servers making
them globally available.

135
00:07:42.940 --> 00:07:46.398
So you're just inherently faster gets.

136
00:07:46.398 --> 00:07:49.505
Gatsby also does a bunch of things like
pre-loading assets in the background.

137
00:07:49.505 --> 00:07:53.764
It will optimize your images, it will
do some just baseline compression and

138
00:07:53.764 --> 00:07:57.819
tree shaking and all the things that you
want it to do to make sure that your

139
00:07:57.819 --> 00:07:59.834
bundles are as small as they can be.

140
00:07:59.834 --> 00:08:01.634
That they're compressed properly,

141
00:08:01.634 --> 00:08:04.820
that they're only loaded when
they're actually needed.

142
00:08:04.820 --> 00:08:08.967
But that the browser is able to start
pre-loading them a little bit so

143
00:08:08.967 --> 00:08:10.692
that they feel even faster.

144
00:08:10.692 --> 00:08:12.218
And finally, Gatsby's convenient, right?

145
00:08:12.218 --> 00:08:13.616
That's its biggest value prop.

146
00:08:13.616 --> 00:08:16.586
Is that If you use Gatsby,
you get to go very far,

147
00:08:16.586 --> 00:08:21.676
very fast because of the way that it's set
up to just let you hit the ground running.

148
00:08:21.676 --> 00:08:24.306
It has a huge ecosystem,
a tonne of plugins,

149
00:08:24.306 --> 00:08:28.120
a tonne of third party sources
already integrated with it.

150
00:08:28.120 --> 00:08:32.950
And that means that you as a creator don't
need to argue with your framework or

151
00:08:32.950 --> 00:08:36.890
set up this boilerplate or
build the foundational stuff.

152
00:08:36.890 --> 00:08:39.230
You can just build
the thing you wanna build.

153
00:08:39.230 --> 00:08:41.309
And that makes it a great choice for

154
00:08:41.309 --> 00:08:44.560
you if you're trying to
stand up a marketing site.

155
00:08:44.560 --> 00:08:49.292
If you're trying to get a blog rolling, if
you wanna be a content creator and you're

156
00:08:49.292 --> 00:08:53.976
trying to get up and running, don't spend
all your time fine tuning your website.

157
00:08:53.976 --> 00:08:57.431
Just start publishing,
just get things out there,

158
00:08:57.431 --> 00:09:00.503
start that muscle of
being a content creator.

159
00:09:00.503 --> 00:09:02.482
It's also great for
agencies for that reason.

160
00:09:02.482 --> 00:09:06.962
There's just a lot of reasons why Gatsby
is a good like, hey, we need to move fast,

161
00:09:06.962 --> 00:09:08.830
Gatsby is probably a good choice.

162
00:09:09.910 --> 00:09:11.008
So specifically,

163
00:09:11.008 --> 00:09:15.890
what we're gonna cover today is a whole
bunch of Gatsby's more advanced features.

164
00:09:15.890 --> 00:09:18.141
So if you're interested
in the basics of Gatsby,

165
00:09:18.141 --> 00:09:21.730
how to make pages how to set up a project,
we're not gonna cover that today.

166
00:09:21.730 --> 00:09:25.045
That's going to be in the intro to
Gatsby workshop which you can watch

167
00:09:25.045 --> 00:09:26.600
on the front-end master site.

168
00:09:27.860 --> 00:09:32.660
What we're gonna cover today is we're
gonna be using a monorepo for a dev setup.

169
00:09:32.660 --> 00:09:37.320
So in a lot of bigger companies
I've seen they use monorepos.

170
00:09:37.320 --> 00:09:40.639
And especially if you're gonna
start building your custom plugins,

171
00:09:40.639 --> 00:09:41.427
custom themes,

172
00:09:41.427 --> 00:09:44.930
things like that, having a monorepo
is gonna make dev a whole lot easier.

173
00:09:44.930 --> 00:09:48.930
So we're gonna talk about how to
do that and what the benefits are.

174
00:09:48.930 --> 00:09:50.680
We're gonna set up custom pages.

175
00:09:50.680 --> 00:09:54.554
So not just like building a page
in the pages directory, but

176
00:09:54.554 --> 00:09:57.576
actually getting into
the Gatsby node APIs and

177
00:09:57.576 --> 00:10:03.099
creating pages using those node APIs with
custom context and all those good things.

178
00:10:03.099 --> 00:10:04.620
We're gonna look at custom data types.

179
00:10:04.620 --> 00:10:09.828
How do you get data into the Gatsby
GraphQL layer and not using a source plug

180
00:10:09.828 --> 00:10:15.048
in, but actually building your own
using the node APIs dropping data in.

181
00:10:15.048 --> 00:10:17.060
We're gonna look at custom
data relationships.

182
00:10:17.060 --> 00:10:21.201
So after you've created data, how can we
make it possible to do the nesting and

183
00:10:21.201 --> 00:10:23.410
the arbitrary queries?

184
00:10:23.410 --> 00:10:25.080
We're gonna look at custom resolvers.

185
00:10:25.080 --> 00:10:27.720
If we have some data and
we wanna get a derived field,

186
00:10:27.720 --> 00:10:30.490
we can build that right into
Gatsby's GraphQL layer.

187
00:10:30.490 --> 00:10:32.280
So we're gonna look at how to do that.

188
00:10:32.280 --> 00:10:33.731
You can do remote image handling.

189
00:10:33.731 --> 00:10:38.285
If you've got data that listen image
that's available on say unsplash or

190
00:10:38.285 --> 00:10:43.279
whatever service had the images before,
you can have Gatsby pull out locally and

191
00:10:43.279 --> 00:10:44.910
do optimization for you.

192
00:10:44.910 --> 00:10:46.500
We'll look at how to do that.

193
00:10:46.500 --> 00:10:47.640
We're gonna do theme development.

194
00:10:47.640 --> 00:10:51.343
So we're gonna build a theme that can
be shared between sites, reusable code.

195
00:10:51.343 --> 00:10:55.374
This is really, really good, especially
if you are in the agency space or

196
00:10:55.374 --> 00:10:59.405
if you work with clients where you need
to kind of basic boilerplate things

197
00:10:59.405 --> 00:11:01.720
that are always more or less the same.

198
00:11:01.720 --> 00:11:04.208
So that you don't have to do
the same general setup for

199
00:11:04.208 --> 00:11:05.660
everyone in your clients.

200
00:11:05.660 --> 00:11:07.470
We're gonna look at client only route.

201
00:11:07.470 --> 00:11:10.542
So, if you wanna build something
that shouldn't be server rendered.

202
00:11:10.542 --> 00:11:13.962
Let's say you've got an account page,
or you're doing a search,

203
00:11:13.962 --> 00:11:18.103
where some kind of user interaction is
required before you know what you're gonna

204
00:11:18.103 --> 00:11:21.320
display on the page,
we're gonna look at that.

205
00:11:21.320 --> 00:11:22.750
We're also gonna look at
serverless functions.

206
00:11:22.750 --> 00:11:27.532
So when you are working with
a client-only site, you can do a lot, but

207
00:11:27.532 --> 00:11:31.991
there are moments where you find
yourself wanting a node server or

208
00:11:31.991 --> 00:11:34.310
some kind of a back-end.

209
00:11:34.310 --> 00:11:39.430
Serverless functions are often a way to
very quickly stand up that little bit

210
00:11:39.430 --> 00:11:45.190
of back-end functionality you need without
the headache of actually standing up and

211
00:11:45.190 --> 00:11:46.476
scaling a server.

212
00:11:46.476 --> 00:11:50.443
Building a little bit of functionality
is fine, I love doing that as a dev.

213
00:11:50.443 --> 00:11:51.961
Building out a whole node server and

214
00:11:51.961 --> 00:11:55.352
figuring out how to get it into a docker
container and then figuring out how to get

215
00:11:55.352 --> 00:11:59.010
that deployed in a way that scales means
now I'm writing Kubernetes config.

216
00:11:59.010 --> 00:12:01.269
There's a lot to that,
I don't wanna do it,

217
00:12:01.269 --> 00:12:03.419
I would love to never
think about it again.

218
00:12:03.419 --> 00:12:06.381
And serverless functions make that,
generally speaking,

219
00:12:06.381 --> 00:12:10.503
I can almost always solve my problems with
a serverless function instead of having to

220
00:12:10.503 --> 00:12:12.490
actually stand up a whole node service.

221
00:12:13.820 --> 00:12:15.050
We're going to set a protected route.

222
00:12:15.050 --> 00:12:17.190
So we're not gonna do
actual authentication.

223
00:12:17.190 --> 00:12:22.256
We're not going to deal with usernames and
passwords, but we are gonna show how

224
00:12:22.256 --> 00:12:27.257
if you do have someone authenticated,
if you've used a service like Auth0.

225
00:12:27.257 --> 00:12:32.678
Or you've used Netlify identity or some
other thing that gives you like a token or

226
00:12:32.678 --> 00:12:37.304
Login status, we'll show you how to
make sure that Gatsby only shows

227
00:12:37.304 --> 00:12:40.190
pages to people who
are logged in that way.

228
00:12:41.420 --> 00:12:44.537
We're gonna look at deployment, how do
you get this thing up on the Internet?

229
00:12:44.537 --> 00:12:46.857
And especially when you're talking
about monorepo development,

230
00:12:46.857 --> 00:12:47.920
there's a little bit to that.

231
00:12:47.920 --> 00:12:50.840
So we wanna make sure that
we've got a good flow there.

232
00:12:50.840 --> 00:12:52.891
We're gonna do environment variables.

233
00:12:52.891 --> 00:12:56.962
Environment variables are a really good
way when you're working with third party

234
00:12:56.962 --> 00:12:59.263
services, you're gonna
have public keys for

235
00:12:59.263 --> 00:13:02.240
how you integrate with
somebody's JavaScript SDK.

236
00:13:02.240 --> 00:13:05.432
Or private keys so that you can get
access to data that shouldn't be

237
00:13:05.432 --> 00:13:08.852
publicly available on the web, so
that you can pull out a subset of it for

238
00:13:08.852 --> 00:13:10.810
display on the website.

239
00:13:10.810 --> 00:13:14.620
Those workflows are a little
head bendy at first.

240
00:13:14.620 --> 00:13:17.516
So if you've never worked
with environment variables,

241
00:13:17.516 --> 00:13:21.572
this will be a good kind of look at what
Gatsby does with environment variables.

242
00:13:21.572 --> 00:13:25.091
And how we can make sure that only
the public ones should be available

243
00:13:25.091 --> 00:13:29.289
to the website and everything else should
be restricted to the builds process and

244
00:13:29.289 --> 00:13:30.600
serverless functions.

