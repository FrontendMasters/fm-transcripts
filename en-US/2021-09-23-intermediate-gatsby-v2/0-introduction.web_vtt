WEBVTT

1
00:00:00.000 --> 00:00:02.185
We're gonna talk about Gatsby today and

2
00:00:02.185 --> 00:00:05.600
we're gonna dig into some of
the more advanced use cases of it.

3
00:00:05.600 --> 00:00:09.935
This is something that I think
it's really interesting there's so

4
00:00:09.935 --> 00:00:14.355
much you can do with Gatsby beyond
what the initial impressions are.

5
00:00:14.355 --> 00:00:19.127
I think when you first look at Gatsby
if you just went to the intro to Gatsby

6
00:00:19.127 --> 00:00:21.487
course that I did a couple days ago.

7
00:00:21.487 --> 00:00:25.741
You may have kinda gotten
the impression that Gatsby reserved for

8
00:00:25.741 --> 00:00:27.375
building static sites.

9
00:00:27.375 --> 00:00:31.536
It's a really good tool for that,
you can load data from anywhere,

10
00:00:31.536 --> 00:00:33.581
you can put it up on the internet.

11
00:00:33.581 --> 00:00:38.511
And it all happens very fast, but
Gatsby can do a lot more than that.

12
00:00:38.511 --> 00:00:42.883
And today we're gonna dig into
what the opportunities are,

13
00:00:42.883 --> 00:00:47.853
what the additional things we can do
are with Gatsby that let us go more

14
00:00:47.853 --> 00:00:50.524
toward the app side of the spectrum.

15
00:00:50.524 --> 00:00:53.179
And take advantage of some
of these dynamic things and

16
00:00:53.179 --> 00:00:54.775
do some pretty powerful stuff.

17
00:00:54.775 --> 00:00:58.498
So first, let's go ahead and
go through just some basics,

18
00:00:58.498 --> 00:01:00.663
I'm gonna show a few slides here.

19
00:01:00.663 --> 00:01:04.693
If you've seen the intro to Gatsby
workshop, this is gonna look familiar but

20
00:01:04.693 --> 00:01:05.814
it's good to recap.

21
00:01:05.814 --> 00:01:10.758
So let's start by saying who I am,

22
00:01:10.758 --> 00:01:14.347
so I am Jason Lengstorf.

23
00:01:14.347 --> 00:01:17.812
I'm the VP of developer
experience at Netlify.

24
00:01:17.812 --> 00:01:20.399
I'm also the host of a show
called learning with Jason

25
00:01:20.399 --> 00:01:22.929
which runs on Twitch I pair
program with people, and

26
00:01:22.929 --> 00:01:25.704
we learned something new
together a couple times a week.

27
00:01:25.704 --> 00:01:27.561
I used to be on the Gatsby team.

28
00:01:27.561 --> 00:01:31.829
I am now over at Netlify as I said,
but while I was at Gatsby got to see

29
00:01:31.829 --> 00:01:35.276
a lot of cool things work
with a lot of amazing people.

30
00:01:35.276 --> 00:01:39.940
And I'm also a booth enthusiast I really
like being goofy on the internet.

31
00:01:39.940 --> 00:01:42.319
I like corgis, I like boots on the nose.

32
00:01:42.319 --> 00:01:44.804
I like making websites about
whooping corgis on the nose.

33
00:01:44.804 --> 00:01:50.757
It's all really just
right here in my heart.

34
00:01:50.757 --> 00:01:53.235
So, let's start with saying
what the heck is Gatsby?

35
00:01:53.235 --> 00:01:56.023
So, Gatsby is two things.

36
00:01:56.023 --> 00:01:59.028
If you start googling Gatsby,
it can get a little bit confusing.

37
00:01:59.028 --> 00:02:04.165
And that is because Gatsby,
is the name of both an open source

38
00:02:04.165 --> 00:02:08.921
framework and
a venture backed cloud company, right.

39
00:02:08.921 --> 00:02:12.337
And they are connected but
they're not the same.

40
00:02:12.337 --> 00:02:14.091
And so
that can get a little bit confusing,

41
00:02:14.091 --> 00:02:16.347
it can be a little hard to
understand what's going on.

42
00:02:16.347 --> 00:02:18.720
So for the purposes of this workshop,

43
00:02:18.720 --> 00:02:22.068
we are only going to talk
about Gatsby the framework.

44
00:02:22.068 --> 00:02:24.953
We are not going to talk
about Gatsby cloud.

45
00:02:24.953 --> 00:02:30.027
So that helps it at least in the context
of this, we are going to restrict

46
00:02:30.027 --> 00:02:34.439
all of our discussion around
the open source framework only.

47
00:02:34.439 --> 00:02:37.766
None of the features that we're using
today are restricted to Gatsby cloud,

48
00:02:37.766 --> 00:02:40.085
nothing requires you to have
a Gatsby cloud account.

49
00:02:40.085 --> 00:02:43.621
This is all open source,
you can do whatever you want with it.

50
00:02:43.621 --> 00:02:47.149
So what Gatsby is, it's a static
site generator but as I said,

51
00:02:47.149 --> 00:02:51.611
it can do a little bit more than that, its
primary thing is taking in data running

52
00:02:51.611 --> 00:02:54.030
a build step and outputting static files.

53
00:02:54.030 --> 00:02:56.518
This is known as the jam
stack architecture.

54
00:02:56.518 --> 00:03:01.280
And what that means is, you decouple your
front end, because by putting them into

55
00:03:01.280 --> 00:03:05.713
static files you're able to ship that
to a CDN it's not reliant on a server.

56
00:03:05.713 --> 00:03:10.449
It can be completely decoupled from
any API's microservices backends that

57
00:03:10.449 --> 00:03:11.116
you have.

58
00:03:11.116 --> 00:03:15.941
It is also then precompiled,
which is that build step.

59
00:03:15.941 --> 00:03:20.023
And that pre compilation helps
cut down on resource usage.

60
00:03:20.023 --> 00:03:23.744
If you know that a page is always gonna
look the same no matter who looks at it.

61
00:03:23.744 --> 00:03:25.587
Building that page ahead of time,

62
00:03:25.587 --> 00:03:30.054
cuts down on the server resources required
to make that available to the internet.

63
00:03:30.054 --> 00:03:34.069
You have the ability to put it
up on a CDN, CDNs are cheap,

64
00:03:34.069 --> 00:03:38.856
they're very performant,
they are scalable, they're secure.

65
00:03:38.856 --> 00:03:42.761
It's pretty hard to take down a CDN and
so in the grand scheme of things.

66
00:03:42.761 --> 00:03:46.021
If you've got a file
that you can make static,

67
00:03:46.021 --> 00:03:50.953
putting it as a static file on a CDN
is probably one of the easiest ways,

68
00:03:50.953 --> 00:03:56.243
to hit that kind of enterprise grade
of uptime and availability and scale.

69
00:03:56.243 --> 00:04:02.110
Gatsby is also built on react, so react is
a Facebook framework that gives us a lot

70
00:04:02.110 --> 00:04:07.307
of ability to modify the UI quickly
through pretty thoughtful API's.

71
00:04:07.307 --> 00:04:11.561
It's a great way to handle user
interactivity, and stateful things across

72
00:04:11.561 --> 00:04:15.959
UI's where you can kind of have a button
over here change some state over here.

73
00:04:15.959 --> 00:04:19.321
Things that are getting
easier with native web API's.

74
00:04:19.321 --> 00:04:22.621
But especially when react
first came to prominence,

75
00:04:22.621 --> 00:04:25.567
they weren't easy it
was pretty challenging.

76
00:04:25.567 --> 00:04:27.214
Gatsby's also all in on graphql.

77
00:04:27.214 --> 00:04:31.758
All-in on graphql is a data layer
that allows for us to query for

78
00:04:31.758 --> 00:04:36.474
arbitrary nested data,
you can start by looking at one object and

79
00:04:36.474 --> 00:04:38.978
then look at the related objects.

80
00:04:38.978 --> 00:04:43.572
So if you've ever used rest, you would hit
an endpoint for let's say, your blog post.

81
00:04:43.572 --> 00:04:45.655
So slash API slash posts.

82
00:04:45.655 --> 00:04:47.870
That's gonna come back
with a list of blogs.

83
00:04:47.870 --> 00:04:52.742
And then if you have comments,
it would give you an array of comment IDs.

84
00:04:52.742 --> 00:04:55.082
And then you would have to go and
make a query for

85
00:04:55.082 --> 00:04:57.790
each one of those comments
if you wanted to show them.

86
00:04:57.790 --> 00:05:02.173
Which means that you're making tens or
even hundreds of rest calls,

87
00:05:02.173 --> 00:05:05.132
to load one blogs worth of posts and
comments.

88
00:05:05.132 --> 00:05:07.065
That can be really challenging.

89
00:05:07.065 --> 00:05:11.864
What graphql does instead is it abstracts
all that away into a kind of a centralized

90
00:05:11.864 --> 00:05:16.733
layer, where you're able to say I want my
blog and I also want all the comments, and

91
00:05:16.733 --> 00:05:19.679
let me get the comment
author in the comment text.

92
00:05:19.679 --> 00:05:22.483
And graphql will bring
all that data together.

93
00:05:22.483 --> 00:05:26.584
And let us make one request to the graphql
endpoint then that brings us back

94
00:05:26.584 --> 00:05:27.454
all that data.

95
00:05:27.454 --> 00:05:32.667
So it's, really, really good when you're
dealing with loosely structured data.

96
00:05:32.667 --> 00:05:36.866
If you're doing data in your site,
that will be related to itself,

97
00:05:36.866 --> 00:05:38.937
kinda spread all over the place.

98
00:05:38.937 --> 00:05:41.454
Sometimes you'll need
like a subsection and

99
00:05:41.454 --> 00:05:45.171
maybe you'll need something much
broader and all over the place.

100
00:05:45.171 --> 00:05:46.890
Graphql is a great way to solve that.

101
00:05:46.890 --> 00:05:51.156
And when you're dealing with building
websites, especially websites that pull in

102
00:05:51.156 --> 00:05:54.348
data from all around the web,
which is how the jam stack works.

103
00:05:54.348 --> 00:05:56.316
You might be pulling from a rest API,

104
00:05:56.316 --> 00:06:00.391
multiple headless services maybe you've
got a headless CMS for your blog.

105
00:06:00.391 --> 00:06:04.386
Maybe you've got a headless E commerce
system like you're using shopify to manage

106
00:06:04.386 --> 00:06:05.192
your products.

107
00:06:05.192 --> 00:06:09.259
Maybe you're pulling in comments
from a third party system as well.

108
00:06:09.259 --> 00:06:14.657
Maybe you've got a custom back end,
that has an API for some of your own data,

109
00:06:14.657 --> 00:06:18.745
all of that gets stitched
together in the jam stack layer.

110
00:06:18.745 --> 00:06:21.998
And having this graphql layer to bring
those together and create relationships

111
00:06:21.998 --> 00:06:24.726
between them, is really powerful
gives you a lot of flexibility.

112
00:06:24.726 --> 00:06:26.538
So that's why Gatsby went all in on it.

113
00:06:26.538 --> 00:06:32.939
It's a really good use case for
building websites.

114
00:06:32.939 --> 00:06:36.736
Gatsby's also opinionated,
it wants you to do things a certain way.

115
00:06:36.736 --> 00:06:42.188
It's gonna give you very clear APIs, it's
got a lot of things that are done for you.

116
00:06:42.188 --> 00:06:43.827
But in order to get those benefits,

117
00:06:43.827 --> 00:06:46.077
you have to be willing to
work with the platform.

118
00:06:46.077 --> 00:06:49.799
I have watched a lot of people make
themselves really sad by trying to

119
00:06:49.799 --> 00:06:51.835
disagree with Gatsby's opinions.

120
00:06:51.835 --> 00:06:55.050
And then they'll dive into the babble
configure the Web pack config to

121
00:06:55.050 --> 00:06:55.606
change it.

122
00:06:55.606 --> 00:06:58.020
And it just leads to sadness, right?

123
00:06:58.020 --> 00:07:01.818
So Gatsby is an opinionated tool,
you get a lot for

124
00:07:01.818 --> 00:07:06.347
agreeing to follow the conventions
that Gatsby provides.

125
00:07:06.347 --> 00:07:10.388
If you find yourself constantly
fighting against what Gatsby does.

126
00:07:10.388 --> 00:07:12.497
You may wanna consider another framework,

127
00:07:12.497 --> 00:07:16.031
because the benefit of an opinionated
framework is what's done for you.

128
00:07:16.031 --> 00:07:20.007
If you are spending most of your effort,
arguing with your framework,

129
00:07:20.007 --> 00:07:22.672
you've probably chosen
the wrong framework.

130
00:07:22.672 --> 00:07:26.013
Gatsby is perf conscious, so
one of the core benefits of Gatsby,

131
00:07:26.013 --> 00:07:29.778
outside of just when you build things
to static files and put them on a CDN,

132
00:07:29.778 --> 00:07:33.881
you're automatically gonna get a perf
benefit because the site loads faster.

133
00:07:33.881 --> 00:07:36.497
There's less data to load,
you don't have to keep servers running.

134
00:07:36.497 --> 00:07:40.686
So you don't have to manage data,
round trips or scaling up servers,

135
00:07:40.686 --> 00:07:42.747
making them globally available.

136
00:07:42.747 --> 00:07:44.671
So you just inherently faster,

137
00:07:44.671 --> 00:07:49.312
Gatsby also does a bunch of things like
pre loading assets in the background.

138
00:07:49.312 --> 00:07:51.867
It will optimize your images,

139
00:07:51.867 --> 00:07:56.495
it will do some baseline compression and
tree shaking.

140
00:07:56.495 --> 00:07:59.577
And all the things that you want it to
do to make sure that your bundles are as

141
00:07:59.577 --> 00:08:02.066
small as they can be,
that they're compressed properly,

142
00:08:02.066 --> 00:08:04.584
that they're only loaded when
they're actually needed.

143
00:08:04.584 --> 00:08:08.747
But the browser is able to start
pre-loading them a little bit so

144
00:08:08.747 --> 00:08:10.607
that they feel even faster.

145
00:08:10.607 --> 00:08:14.501
And finally Gatsby's convenient,
that's its biggest value prop,

146
00:08:14.501 --> 00:08:17.735
is that if you use Gatsby,
you get to go very far very fast,

147
00:08:17.735 --> 00:08:21.836
because of the way that it's set up to
just let you hit the ground running.

148
00:08:21.836 --> 00:08:24.378
It has huge ecosystem, a ton of plugins,

149
00:08:24.378 --> 00:08:27.876
a ton of third party sources
already integrated with it.

150
00:08:27.876 --> 00:08:33.000
And that means that you as a creator,
don't need to argue with your framework or

151
00:08:33.000 --> 00:08:36.759
set up this boilerplate or
build the foundational stuff.

152
00:08:36.759 --> 00:08:38.990
You can just build
the thing you wanna build.

153
00:08:38.990 --> 00:08:41.343
And that makes it a great choice for

154
00:08:41.343 --> 00:08:44.599
if you're trying to stand
up a marketing site.

155
00:08:44.599 --> 00:08:49.056
If you're trying to get a blog rolling,
if you wanna be a content creator and

156
00:08:49.056 --> 00:08:51.299
you're trying to get up and running.

157
00:08:51.299 --> 00:08:53.750
Don't spend all your time
fine tuning your website,

158
00:08:53.750 --> 00:08:56.043
just start publishing just
get things out there.

159
00:08:56.043 --> 00:09:00.624
Start that muscle of
being a content creator.

160
00:09:00.624 --> 00:09:02.412
It's also great for
agencies for that reason.

161
00:09:02.412 --> 00:09:06.169
There's just a lot of reasons
why Gatsby is a good like, hey,

162
00:09:06.169 --> 00:09:09.722
we need to move fast Gatsby
who's probably a good choice.

163
00:09:09.722 --> 00:09:10.812
So specifically,

164
00:09:10.812 --> 00:09:15.655
what we're gonna cover today is a whole
bunch of Gatsby's more advanced features.

165
00:09:15.655 --> 00:09:18.219
So if you're interested
in the basics of Gatsby,

166
00:09:18.219 --> 00:09:20.425
how to make pages ,how
to set up a project.

167
00:09:20.425 --> 00:09:24.465
We're not gonna cover that today
,that's gonna be in the intro to Gatsby

168
00:09:24.465 --> 00:09:27.668
workshop which you can watch
on the front and master site.

169
00:09:27.668 --> 00:09:32.513
What we're gonna cover today, is we're
gonna be using a monorepo for a dev setup.

170
00:09:32.513 --> 00:09:37.089
So in a lot of bigger companies
I've seen they use monorepos.

171
00:09:37.089 --> 00:09:40.479
And especially if you're gonna
start building your custom plugins,

172
00:09:40.479 --> 00:09:42.208
custom themes, things like that.

173
00:09:42.208 --> 00:09:44.747
Having a monorepos gonna
make dev a whole lot easier.

174
00:09:44.747 --> 00:09:48.774
So we're gonna talk about how to do
that and what's the benefits are.

175
00:09:48.774 --> 00:09:50.491
We're gonna set up custom pages.

176
00:09:50.491 --> 00:09:54.090
So not just building a page
in the pages directory, but

177
00:09:54.090 --> 00:09:57.300
actually getting into
the Gatsby node API's and

178
00:09:57.300 --> 00:10:03.029
creating pages using those node API's with
custom context and all those good things.

179
00:10:03.029 --> 00:10:04.382
We're gonna look at custom data types.

180
00:10:04.382 --> 00:10:08.036
How do you get data into
the Gatsby graphql layer,

181
00:10:08.036 --> 00:10:10.305
and not using a source plug in.

182
00:10:10.305 --> 00:10:14.846
But actually building your own using
the node API is dropping data in.

183
00:10:14.846 --> 00:10:16.912
We're gonna look at custom
data relationships.

184
00:10:16.912 --> 00:10:21.734
So after you've created data, how can we
make it possible to do the nesting and

185
00:10:21.734 --> 00:10:23.276
the arbitrary queries.

186
00:10:23.276 --> 00:10:24.887
We're gonna look at custom resolvers.

187
00:10:24.887 --> 00:10:27.775
If we have some data and
we wanna get a derived field,

188
00:10:27.775 --> 00:10:30.543
we can build right into
Gatsby's graphql layer.

189
00:10:30.543 --> 00:10:32.171
So we're gonna look at how to do that.

190
00:10:32.171 --> 00:10:37.022
You can do remote image handling,
if you've got that listen image that's

191
00:10:37.022 --> 00:10:41.720
available on say on splash or,
whatever service had the images before.

192
00:10:41.720 --> 00:10:44.931
You can have Gatsby pulled out locally and
do optimization for you,

193
00:10:44.931 --> 00:10:46.352
we'll look at how to do that.

194
00:10:46.352 --> 00:10:47.494
We're gonna do theme development.

195
00:10:47.494 --> 00:10:51.833
So we're gonna build a theme that can
be shared between sites, reusable code,

196
00:10:51.833 --> 00:10:55.199
this is really good especially if
you are in the agency space or

197
00:10:55.199 --> 00:10:59.084
if you work with clients where you
need some kind of basic boilerplate,

198
00:10:59.084 --> 00:11:01.576
things that are always more or
less the same.

199
00:11:01.576 --> 00:11:04.459
So that you don't have to do
the same general setup for

200
00:11:04.459 --> 00:11:05.943
everyone in your clients.

201
00:11:05.943 --> 00:11:07.366
We're gonna look at client only route.

202
00:11:07.366 --> 00:11:10.240
So if you wanna build something
that shouldn't be server rendered.

203
00:11:10.240 --> 00:11:12.578
Let's say you've got an account page or

204
00:11:12.578 --> 00:11:16.979
you're doing a surge where some kind
of user interaction is required before

205
00:11:16.979 --> 00:11:19.812
you know what you're gonna
display on the page.

206
00:11:19.812 --> 00:11:21.115
We're going to look at that.

207
00:11:21.115 --> 00:11:22.603
We're also gonna look at
server less functions.

208
00:11:22.603 --> 00:11:27.481
So when you are working with a client
only site, you can do a lot but

209
00:11:27.481 --> 00:11:32.364
there are moments where you find
yourself wanting a node server or

210
00:11:32.364 --> 00:11:34.165
some kind of a back end.

211
00:11:34.165 --> 00:11:38.245
Serverless functions are often
a way to very quickly stand up

212
00:11:38.245 --> 00:11:41.765
that little bit of back end
functionality you need,

213
00:11:41.765 --> 00:11:46.329
without the headache of actually
standing up and scaling a server.

214
00:11:46.329 --> 00:11:50.478
Building a little bit of functionality
is fine, I love doing that as a dev.

215
00:11:50.478 --> 00:11:52.028
Building out a whole node server and

216
00:11:52.028 --> 00:11:55.233
figuring out how to get it into a docker
container and then figuring out how

217
00:11:55.233 --> 00:11:58.867
to get that deployed in a way that scales
means now I'm writing Kubernetes config.

218
00:11:58.867 --> 00:12:00.669
There's a lot to that I don't wanna do it,

219
00:12:00.669 --> 00:12:02.479
I would love to never
think about it again.

220
00:12:02.479 --> 00:12:06.151
And serverless functions make that,
generally speaking,

221
00:12:06.151 --> 00:12:10.039
I can almost always solve my
problems with a serverless function

222
00:12:10.039 --> 00:12:13.724
instead of having to actually
stand up a whole note service.

223
00:12:13.724 --> 00:12:14.909
We're gonna set up protected routes.

224
00:12:14.909 --> 00:12:17.240
So we're not gonna do
actual authentication,

225
00:12:17.240 --> 00:12:19.987
we're not going to deal with usernames and
passwords.

226
00:12:19.987 --> 00:12:24.492
But we are gonna show how if you
do have someone authenticated,

227
00:12:24.492 --> 00:12:29.677
if you've used a service like auth 0 or
you've used Netlify identity or

228
00:12:29.677 --> 00:12:33.927
some other thing that gives you a token or
logged in status.

229
00:12:33.927 --> 00:12:38.321
Will show you how to make sure
the Gatsby only shows pages

230
00:12:38.321 --> 00:12:41.231
to people who are logged in that way.

231
00:12:41.231 --> 00:12:44.415
We're gonna look at deployment, how do
you get this thing up on the internet?

232
00:12:44.415 --> 00:12:46.724
And especially when you're talking
about monorepo development,

233
00:12:46.724 --> 00:12:47.784
there's a little bit to that.

234
00:12:47.784 --> 00:12:50.653
So we wanna make sure that
we've got a good flow there.

235
00:12:50.653 --> 00:12:52.760
We're gonna do environment variables.

236
00:12:52.760 --> 00:12:56.989
Environment variables are a really good
way when you're working with third party

237
00:12:56.989 --> 00:12:59.379
services, you're gonna
have public keys for

238
00:12:59.379 --> 00:13:02.152
how you integrate with
somebody's JavaScript SDK.

239
00:13:02.152 --> 00:13:06.101
Or private keys so that you can get
access to data that shouldn't be publicly

240
00:13:06.101 --> 00:13:09.307
available on the web, so
that you can pull out a subset of it for

241
00:13:09.307 --> 00:13:10.623
display on the website.

242
00:13:10.623 --> 00:13:14.384
Those workflows are little
head bendy at first.

243
00:13:14.384 --> 00:13:17.326
So if you've never worked
with environment variables,

244
00:13:17.326 --> 00:13:21.446
this will be a good kind of look at what
Gatsby does with environment variables.

245
00:13:21.446 --> 00:13:25.014
And how we can make sure that only
the public ones should be available

246
00:13:25.014 --> 00:13:29.396
to the website, and everything else should
be restricted to the builds process and

247
00:13:29.396 --> 00:13:30.600
serverless functions

