WEBVTT

1
00:00:00.150 --> 00:00:05.127
When you're building for Gatsby by
default, the way that Gatsby works,

2
00:00:05.127 --> 00:00:10.385
is to put all of the pages both server
side rendered and client side rendered.

3
00:00:10.385 --> 00:00:13.868
So you start by building the side
down the static files, so

4
00:00:13.868 --> 00:00:18.180
that if JavaScript is disabled,
you can still load the page.

5
00:00:18.180 --> 00:00:22.923
When the component hits the browser and
rehydrate's then,

6
00:00:22.923 --> 00:00:28.689
like JavaScript fires, mounts the page,
builds a react version of it and

7
00:00:28.689 --> 00:00:34.895
you end up with a fully functional
react app on top of the static route.

8
00:00:34.895 --> 00:00:39.274
In client-only rendering,
what you end up with is you run into these

9
00:00:39.274 --> 00:00:44.265
situations where let's say, for
example, you wanna build a search page.

10
00:00:44.265 --> 00:00:50.461
So your search results page cannot exist
without some kind of input from the user.

11
00:00:50.461 --> 00:00:56.049
We can't, it's completely impractical
to try to guess all of the possible

12
00:00:56.049 --> 00:01:01.500
search combinations that could exist and
build that ahead of time.

13
00:01:01.500 --> 00:01:05.158
So instead what we do is we wanna build
what's called a client-only route,

14
00:01:05.158 --> 00:01:07.400
where there is no server
side rendering step.

15
00:01:07.400 --> 00:01:12.482
We're instead going to say hey Gatsby,
only put this file out there,

16
00:01:12.482 --> 00:01:17.665
so that all of the logic happens
only when we get to the client.

17
00:01:17.665 --> 00:01:21.995
So if you load this with JavaScript
disabled, it's gonna be an empty page.

18
00:01:21.995 --> 00:01:23.648
So with that being said,

19
00:01:23.648 --> 00:01:28.855
what I wanna do is let's actually
build ourselves a search component.

20
00:01:28.855 --> 00:01:33.450
And the way I'm gonna do that is let's
start by giving it a few styles.

21
00:01:33.450 --> 00:01:37.128
So we're going to do a search.module.css.

22
00:01:37.128 --> 00:01:41.165
And this is because we're gonna have
a search field, search button, and

23
00:01:41.165 --> 00:01:43.260
like a clear reset button.

24
00:01:43.260 --> 00:01:48.295
And I wanna make sure that those aren't
just like, we're gonna do a little bit

25
00:01:48.295 --> 00:01:53.119
of styling on it, so we'll have a form
in that will make that display flex.

26
00:01:53.119 --> 00:01:57.685
I am a big fan of display flex if you
haven't already picked up on that, and

27
00:01:57.685 --> 00:02:03.640
we can go space between, so that they kind
of equally distributed across the page.

28
00:02:03.640 --> 00:02:06.846
We'll give them a gap of one REM, for

29
00:02:06.846 --> 00:02:12.250
the search input I want this
to be font size of one REM.

30
00:02:12.250 --> 00:02:16.525
So a thing that is a little bit
frustrating and a little bit confusing

31
00:02:16.525 --> 00:02:21.530
about inputs is by default,
they don't respect the document font size.

32
00:02:21.530 --> 00:02:24.377
So by doing this font size
one REM the font size and

33
00:02:24.377 --> 00:02:29.130
the input will actually be the same as
the font size for the rest of the CSS.

34
00:02:29.130 --> 00:02:32.632
And another little fun fact is if
you've ever been on a website and

35
00:02:32.632 --> 00:02:36.259
you tap into a search bar or
to enter your email and the page zooms in,

36
00:02:36.259 --> 00:02:39.485
that's because the font is
smaller than 16 pixels.

37
00:02:39.485 --> 00:02:44.299
So if you want to avoid your website
zooming in when people touch your

38
00:02:44.299 --> 00:02:49.335
inputs on a browser, make the font
bigger and it will stop doing that.

39
00:02:49.335 --> 00:02:54.660
So this is to make this will prevent
that from happening effectively.

40
00:02:54.660 --> 00:02:59.416
Then we're gonna set padding, on point
two five on the top and bottom, so

41
00:02:59.416 --> 00:03:03.788
that it's got a little bit of breathing
room, and one on the left and

42
00:03:03.788 --> 00:03:06.900
right to give it some input like shape.

43
00:03:06.900 --> 00:03:11.188
Then we'll set the width to be 100%,
and I want that to basically occupy all

44
00:03:11.188 --> 00:03:14.900
the available space that
the buttons aren't using.

45
00:03:14.900 --> 00:03:20.136
Then for the buttons,
we're gonna do a font size of 1rem,

46
00:03:20.136 --> 00:03:25.583
and we'll do just the same padding,
so let's do 0.25 and

47
00:03:25.583 --> 00:03:30.090
1, and I think that's good enough, right?

48
00:03:30.090 --> 00:03:35.390
So then let's go in and
let's make our first page.

49
00:03:35.390 --> 00:03:37.056
So I wanna create, so

50
00:03:37.056 --> 00:03:42.730
the way that Gatsby works is we looked
at these file-based routes here.

51
00:03:42.730 --> 00:03:46.530
Gatsby also supports something
called dynamic routes.

52
00:03:46.530 --> 00:03:50.068
So if we create, let's say,
a search folder.

53
00:03:50.068 --> 00:03:55.159
And in this I wanted to
make everything that hits

54
00:03:55.159 --> 00:04:00.519
that search route hit,
like the same component.

55
00:04:00.519 --> 00:04:06.429
We can do what's called a catch-all,
which is the brackets and

56
00:04:06.429 --> 00:04:10.812
three dots and then .js,
this is is very cool.

57
00:04:10.812 --> 00:04:15.669
It's very it's very helpful and it gives
us the ability to say If you hit search,

58
00:04:15.669 --> 00:04:19.813
go ahead and just bring everything
at this sub route into this page and

59
00:04:19.813 --> 00:04:23.220
we'll do stuff with it on the client side.

60
00:04:23.220 --> 00:04:26.823
So in here we are going to write
a react component as usual,

61
00:04:26.823 --> 00:04:28.446
import react from react.

62
00:04:30.400 --> 00:04:36.650
And then I also wanna get
the navigate library out of Gatsby.

63
00:04:36.650 --> 00:04:39.588
And what this navigate library does
is it lets us do programmatic.

64
00:04:39.588 --> 00:04:42.559
So the same thing that link does,
where it when you click it,

65
00:04:42.559 --> 00:04:45.400
it takes you to another page and
all those things.

66
00:04:45.400 --> 00:04:48.056
Navigate lets us do that but
programmatically,

67
00:04:48.056 --> 00:04:51.760
then I'm gonna get my style, so
my form, my input, and my button.

68
00:04:54.940 --> 00:04:58.920
And I don't know why it came out of that,
let's get it out of styles.

69
00:04:58.920 --> 00:05:04.204
Got to go up another level because
we're in the search folder

70
00:05:04.204 --> 00:05:09.385
here we're going to get styles and
search.module.css,

71
00:05:09.385 --> 00:05:13.529
then we can export default
function We'll call

72
00:05:13.529 --> 00:05:17.891
it search client only,
and this gives us params.

73
00:05:17.891 --> 00:05:22.097
So what params is,
is whatever is in the URL, and

74
00:05:22.097 --> 00:05:26.724
it gets broken up by slashes,
so if we have one thing.

75
00:05:26.724 --> 00:05:29.852
It'll show us like a little well,
let's just look at it and

76
00:05:29.852 --> 00:05:33.170
actually it's easier to
show than to explain.

77
00:05:33.170 --> 00:05:38.582
So what we'll do is we'll get query,
actually let's

78
00:05:38.582 --> 00:05:44.011
start by just doing this
let's console .log params.

79
00:05:44.011 --> 00:05:48.527
And then let's make it visual,

80
00:05:48.527 --> 00:05:53.546
let's do return pre JSON stringify

81
00:05:53.546 --> 00:06:00.121
params Okay, so this will give us
the ability to hit anything in the search,

82
00:06:00.121 --> 00:06:00.910
so let's look, we got started,
let's start the server.

83
00:06:00.910 --> 00:06:05.113
Now that this has started,

84
00:06:05.113 --> 00:06:10.411
when we look at the search we can see

85
00:06:10.411 --> 00:06:16.820
that because we used a catch-all route.

86
00:06:16.820 --> 00:06:22.260
It gives us this star, and that star
is like everything that's in here.

87
00:06:22.260 --> 00:06:26.680
And so we can put whatever we
want in here some more staff.

88
00:06:26.680 --> 00:06:30.150
And it'll just feed us that path,
whatever we put in here.

89
00:06:30.150 --> 00:06:33.250
And so, if we were to do
something like our search query,

90
00:06:33.250 --> 00:06:36.430
like we wanted to search for,
I don't know, The Hobbit.

91
00:06:38.080 --> 00:06:40.094
It just gives us the search
text right there,

92
00:06:40.094 --> 00:06:42.670
so we can actually build
a search form like that.

93
00:06:42.670 --> 00:06:45.240
It's all coming right through the page,
so let's do that.

94
00:06:45.240 --> 00:06:47.010
Let's build ourselves a search form.

95
00:06:48.270 --> 00:06:53.202
So what I'm gonna do is I want to in here,
get our query, and that'll be,

96
00:06:53.202 --> 00:06:56.546
we're going to decode
the URI components because

97
00:06:56.546 --> 00:07:00.800
we don't want any like percent 20s or
things like that.

98
00:07:00.800 --> 00:07:04.896
We will get whatever
comes out of params star.

99
00:07:07.401 --> 00:07:13.590
And then we want to use some react stuff,
so we're gonna store the current query.

100
00:07:13.590 --> 00:07:16.120
And then we'll have the ability
to set the current query.

101
00:07:16.120 --> 00:07:19.750
And that's gonna be react use state.

102
00:07:20.890 --> 00:07:24.222
And we'll start with
the whatever the query is,

103
00:07:24.222 --> 00:07:26.750
then we're gonna keep our results.

104
00:07:26.750 --> 00:07:29.900
So we're gonna do a search we want
to hold on to the search result.

105
00:07:29.900 --> 00:07:34.621
So have the ability to set the results,
and

106
00:07:34.621 --> 00:07:39.223
that's going to be in react, use state.

107
00:07:39.223 --> 00:07:43.436
And we'll set that to null by default, and

108
00:07:43.436 --> 00:07:47.190
then we want to do a status set status.

109
00:07:48.260 --> 00:07:52.380
And this,
I hope that David Corti who wrote x date

110
00:07:52.380 --> 00:07:57.307
is not watching because he's
gonna send me angry email but

111
00:07:57.307 --> 00:08:04.340
I'm gonna use a kind of a Status flag,
what are we doing?

112
00:08:04.340 --> 00:08:08.890
So then in here,
I'm going to add a couple functions.

113
00:08:10.410 --> 00:08:13.270
So the first one is,
we wanna be able to handle the search.

114
00:08:13.270 --> 00:08:17.820
And so when we get a search,
it's gonna be as form submission.

115
00:08:17.820 --> 00:08:20.340
And so the first thing that we wanna
do is prevent that form from actually

116
00:08:20.340 --> 00:08:20.852
submitting.

117
00:08:20.852 --> 00:08:23.460
We instead want to grab that here.

118
00:08:23.460 --> 00:08:25.650
So we're gonna prevent default.

119
00:08:25.650 --> 00:08:29.007
That'll prevent the form from
actually submitting in one set,

120
00:08:29.007 --> 00:08:30.780
let us deal with it.

121
00:08:30.780 --> 00:08:33.496
Then I wanna get the form data,

122
00:08:33.496 --> 00:08:38.315
which will be using the built
in browser form data API.

123
00:08:38.315 --> 00:08:43.000
If you've never used this, this is
something that when I learned about

124
00:08:43.000 --> 00:08:47.622
it as soon as Hinton pointed it out to me,
I felt like a dang superhero.

125
00:08:47.622 --> 00:08:53.178
I had been doing this the hard way
prior to this and wow is this easier.

126
00:08:53.178 --> 00:08:56.740
So I can actually just get
whatever the name of the field is.

127
00:08:56.740 --> 00:09:01.144
So if I've got my field down here,
let's set these up so

128
00:09:01.144 --> 00:09:03.882
we can kinda look at what happens.

129
00:09:03.882 --> 00:09:07.525
If I've got a form, and
the way that that form is gonna work,

130
00:09:07.525 --> 00:09:09.681
I'm not gonna fully mark it up yet.

131
00:09:09.681 --> 00:09:15.884
But if we've got an end input of a type
search and we give it a name of search,

132
00:09:15.884 --> 00:09:20.316
then what I can do up here
is do a form.getSearch, and

133
00:09:20.316 --> 00:09:23.686
I'll get whatever the value of this is.

134
00:09:23.686 --> 00:09:27.399
It's so easy, it's built into the browser.

135
00:09:27.399 --> 00:09:32.240
Yeah, form management used to scare me and

136
00:09:32.240 --> 00:09:36.550
now I don't mind it, I kinda like it.

137
00:09:37.720 --> 00:09:44.635
Then once we've got that, we can set the
current query to be whatever the query is.

138
00:09:44.635 --> 00:09:48.096
And then I'm also going
to navigate the browser.

139
00:09:48.096 --> 00:09:55.426
I wanna send us to search and
we will encode the URI component for

140
00:09:55.426 --> 00:10:00.958
queries, so
that if there's URL characters or

141
00:10:00.958 --> 00:10:08.449
any special characters in the string,
it won't break our URL.

142
00:10:08.449 --> 00:10:11.965
And once we've navigated, that'll be
the end of how we handle our search.

143
00:10:11.965 --> 00:10:15.345
So, the other thing that we
wanna handle is just a reset.

144
00:10:15.345 --> 00:10:19.180
So let's create a function
called handleSearch reset.

145
00:10:20.250 --> 00:10:28.800
That is going to just set the current
query to nothing, make it blank.

146
00:10:28.800 --> 00:10:31.856
And then we'll navigate back to search.

147
00:10:34.645 --> 00:10:36.890
Okay, so that's that function.

148
00:10:36.890 --> 00:10:42.280
And the last one I'm not gonna write
just yet, let's stub it out though.

149
00:10:42.280 --> 00:10:45.330
So it's gonna be a function
called bookSearch.

150
00:10:45.330 --> 00:10:47.088
It's gonna take a query.

151
00:10:47.088 --> 00:10:52.165
And that one is going to, Look up a book.

152
00:10:57.601 --> 00:11:02.109
So the other thing,
we're gonna do is, we wanna Watch for

153
00:11:02.109 --> 00:11:07.909
whenever the current query changes,
so we're gonna use effect for that.

154
00:11:07.909 --> 00:11:11.850
And the way that use effect works is we
pass in an array of what we want to track.

155
00:11:11.850 --> 00:11:14.607
So we're gonna pass in current query.

156
00:11:16.152 --> 00:11:18.890
And then we can do stuff whenever
the current query happens.

157
00:11:18.890 --> 00:11:25.104
So what I wanna do,
is if the current query, Is empty,

158
00:11:25.104 --> 00:11:30.138
we're just gonna set the result to null.

159
00:11:30.138 --> 00:11:32.200
And we'll just return, will be done,

160
00:11:32.200 --> 00:11:34.642
there's nothing else
that we wanna do there.

161
00:11:34.642 --> 00:11:37.873
Otherwise if the current
query is not empty,

162
00:11:37.873 --> 00:11:41.026
we gonna run this book search and
pass it in.

163
00:11:44.990 --> 00:11:48.150
So this is what's actually
gonna run our search.

164
00:11:48.150 --> 00:11:54.730
Whenever we update the current query here,
this will cause the search to run.

165
00:11:54.730 --> 00:11:56.996
And then in here is where
we'll set the result so

166
00:11:56.996 --> 00:11:59.570
that we can show it on the screen.

167
00:11:59.570 --> 00:12:02.090
So let's build out our our basic form.

168
00:12:02.090 --> 00:12:04.052
So let's tell people where they are.

169
00:12:04.052 --> 00:12:09.032
We'll say search for a book.

170
00:12:09.032 --> 00:12:16.524
And so
our form is gonna have class name of form.

171
00:12:16.524 --> 00:12:20.847
And on submit,
we're gonna run that handleSearch.

172
00:12:23.982 --> 00:12:31.040
Inside of that, we have the input, and
we'll give this a class name of input.

173
00:12:32.400 --> 00:12:34.210
Then we'll do a button.

174
00:12:34.210 --> 00:12:38.620
That button will have
a class name of button.

175
00:12:39.890 --> 00:12:44.900
The text on it will be search, and
that's really all that buttons gonna do.

176
00:12:44.900 --> 00:12:47.680
So, let's duplicate that one, and
this one's gonna be different.

177
00:12:47.680 --> 00:12:50.140
This is gonna be a type reset button.

178
00:12:50.140 --> 00:12:54.150
And this will say, what's it gonna say?

179
00:12:54.150 --> 00:12:58.254
We'll call it reset and
then let's also give it an unclick,

180
00:13:00.744 --> 00:13:03.009
Of handling the search reset.

181
00:13:04.858 --> 00:13:09.001
So effectively what we're doing here
is we're saying, in this search form,

182
00:13:09.001 --> 00:13:12.220
lets look what's it's looks like,
form is not undefined.

183
00:13:12.220 --> 00:13:12.720
What are they?

184
00:13:21.022 --> 00:13:22.020
There we go.

185
00:13:22.020 --> 00:13:26.996
So now we've got this this search and
so what a reset

186
00:13:26.996 --> 00:13:32.340
type is if I say some value if
I reset it clears the form.

187
00:13:32.340 --> 00:13:33.940
And this is also built into a search form.

188
00:13:33.940 --> 00:13:36.020
So there's, ways to do that.

189
00:13:36.020 --> 00:13:40.423
And then what we should see here is
we won't get any results yet but

190
00:13:40.423 --> 00:13:42.965
if I search we should see it update.

191
00:13:42.965 --> 00:13:48.515
There it is,
we get the hobbit up in the search bar.

192
00:13:48.515 --> 00:13:52.082
So pretty sweet,
pretty helpful very useful.

193
00:13:52.082 --> 00:13:56.910
And the next thing for us to do is
to actually write this book query.

194
00:13:56.910 --> 00:13:58.820
So let's do that.

195
00:13:58.820 --> 00:14:01.420
And the way that we're gonna do
that is we're gonna use that

196
00:14:01.420 --> 00:14:03.180
Open Library Search again.

197
00:14:03.180 --> 00:14:08.810
So the first thing I wanna do is I'm gonna
set the status of our document to loading.

198
00:14:08.810 --> 00:14:12.060
So this is kinda very
bad state management.

199
00:14:12.060 --> 00:14:20.253
Then we're gonna do a response which will
be a waiting fetch and I'm gonna HTTPS.

200
00:14:20.253 --> 00:14:27.680
We wanna hit open library.org, and
we're gonna hit the search.Jason endpoint.

201
00:14:27.680 --> 00:14:32.222
And this works with just a q and
then whatever our query is, so

202
00:14:32.222 --> 00:14:35.442
we can pass in the query and
just like that.

203
00:14:35.442 --> 00:14:38.578
Let me make that a little bit bigger so
we can actually see what's going on.

204
00:14:38.578 --> 00:14:39.695
So we're gonna fetch that.

205
00:14:39.695 --> 00:14:47.062
And then after we have fetched that, we'll
check down here if the rez is not okay.

206
00:14:47.062 --> 00:14:51.442
So if something went wrong with the query,
we will just throw a new error

207
00:14:51.442 --> 00:14:55.605
because that would mean that
something went wrong with the search.

208
00:14:55.605 --> 00:15:01.000
And so it's okay to fail if that's the
case, we probably want more graceful error

209
00:15:01.000 --> 00:15:06.174
handling but we're not going for
perfect, we're going for learning today.

210
00:15:08.917 --> 00:15:12.226
Okay, so if we get past here,
we know that we've got a good result.

211
00:15:12.226 --> 00:15:17.063
So let's get our results,
it'll be a wait, rest Jason,

212
00:15:17.063 --> 00:15:22.812
cuz we know we're getting back Jason
cuz we call the Jason endpoint.

213
00:15:22.812 --> 00:15:28.452
And then we can set our
results to result and

214
00:15:28.452 --> 00:15:32.375
we can set our status to idle.

215
00:15:32.375 --> 00:15:36.808
And so effectively what we've done now,
is we've created a little

216
00:15:36.808 --> 00:15:41.262
poorly managed state machine that
will say kinda where things are.

217
00:15:41.262 --> 00:15:42.096
And down here,

218
00:15:42.096 --> 00:15:46.440
what we can do is we can start to
respond to that in the UI a little bit.

219
00:15:46.440 --> 00:15:53.726
So what I'm gonna do is
if our status is loading,

220
00:15:53.726 --> 00:16:00.030
we wanna show something like loading

221
00:16:00.030 --> 00:16:03.939
Results, right, and

222
00:16:03.939 --> 00:16:08.876
then if our status is idle and

223
00:16:08.876 --> 00:16:14.019
and the current query is not,

224
00:16:14.019 --> 00:16:19.778
as all tryna push, is not empty,

225
00:16:19.778 --> 00:16:24.946
then we want to show results.

226
00:16:29.149 --> 00:16:31.591
Otherwise, we're just gonna show no.

227
00:16:34.980 --> 00:16:41.351
So let's get these results
shown here we'll say dot H2,

228
00:16:41.351 --> 00:16:47.593
say search results for
current query and then down here,

229
00:16:47.593 --> 00:16:53.510
we'll just set them up
as an unordered list.

230
00:16:53.510 --> 00:16:57.893
Make sure that we've got a result because
it's always possible that it comes back

231
00:16:57.893 --> 00:17:00.700
empty, and
then we'll go through the result docs.

232
00:17:00.700 --> 00:17:07.003
So what comes back from
the search is metadata and

233
00:17:07.003 --> 00:17:10.846
then docs is the actual like,

234
00:17:10.846 --> 00:17:16.685
list of results,
we can map those get to doc,

235
00:17:16.685 --> 00:17:21.970
and inside here we can set up a LI key.

236
00:17:21.970 --> 00:17:25.389
So doc, doc key that's
a unique field in there, and

237
00:17:25.389 --> 00:17:29.509
I'm just I don't want to teach
how the open Library API works,

238
00:17:29.509 --> 00:17:33.390
I'm kind of just flying
through what the fields are.

239
00:17:33.390 --> 00:17:37.619
What we could do is like run this in the
browser and look at the fields and then

240
00:17:37.619 --> 00:17:42.270
kind of reverse engineer it, but for the
sake of not getting too lost in the weeds.

241
00:17:42.270 --> 00:17:48.098
I'm trying to make sure that we
cover this as quickly as possible,

242
00:17:48.098 --> 00:17:53.927
so we've got the strong tag here
that's going to show the title and

243
00:17:53.927 --> 00:17:56.650
I want that to be the doc title.

244
00:17:58.880 --> 00:18:04.160
And then I'm going to put in who
the doc author is if the author is set,

245
00:18:04.160 --> 00:18:07.801
so I'm going to say doc author name,
which is,

246
00:18:07.801 --> 00:18:13.380
which is going to be an array actually,
oddly enough, being singular.

247
00:18:13.380 --> 00:18:17.551
And then we'll sit so
we'll say doc dot author name and

248
00:18:17.551 --> 00:18:23.800
then I want to optionally chain this
because it might be set and still empty.

249
00:18:23.800 --> 00:18:28.395
So just trying to guard against
unexpected KOs here, so

250
00:18:28.395 --> 00:18:32.500
let's save that, and
this should work, right,

251
00:18:32.500 --> 00:18:37.950
let's give it a try, so,
hey look, it's already doing it.

252
00:18:37.950 --> 00:18:42.422
So we've searched for the hobbit,
let's search for another book,

253
00:18:42.422 --> 00:18:47.049
ready player one, there we go,
we've got results, let's search for

254
00:18:47.049 --> 00:18:50.870
just just one more, what's another book?

255
00:18:50.870 --> 00:18:55.512
I've only read like two books apparently,

256
00:18:55.512 --> 00:19:00.906
another book that I've read
that I liked was Zen and

257
00:19:00.906 --> 00:19:04.820
the art of motorcycle maintenance.

258
00:19:04.820 --> 00:19:08.350
And there it is, so this is cool, right,
at and we can make this more useful.

259
00:19:08.350 --> 00:19:13.733
We can link to a doc page, we could figure
out a way to hook this ISBN up to another

260
00:19:13.733 --> 00:19:18.810
page where we could get more information
but I'm not worried about that.

261
00:19:18.810 --> 00:19:23.380
I just kind of want to show how you
would set up these client only pages.

262
00:19:23.380 --> 00:19:27.557
And as you can see like this is not
a particularly simple component but

263
00:19:27.557 --> 00:19:30.581
the nice thing about it
is that everything that's

264
00:19:30.581 --> 00:19:35.180
happening in here with the exception
of these navigate calls.

265
00:19:35.180 --> 00:19:38.394
These are all being done
as it's just react,

266
00:19:38.394 --> 00:19:44.246
the only Gatsby specific thing we're
pulling in here is this navigate function.

267
00:19:44.246 --> 00:19:49.080
And the fact that this file is named
something funky to make Gatsby pick it up

268
00:19:49.080 --> 00:19:53.700
wherever, the other thing that's
cool about this is, this is also a.

269
00:19:54.880 --> 00:19:59.237
Like it's URL navigable so if I visit
a page like I wanna come see the hobbit,

270
00:19:59.237 --> 00:20:03.592
it'll load the hobbit for me, so I didn't
like pull it out and put it in the in

271
00:20:03.592 --> 00:20:08.345
the query but so you could share it First
set of search results with somebody.

272
00:20:08.345 --> 00:20:12.798
And so this is nice, right,
it's kind of a stateful transfer of

273
00:20:12.798 --> 00:20:16.685
information if you store
the query in the URL like that.

