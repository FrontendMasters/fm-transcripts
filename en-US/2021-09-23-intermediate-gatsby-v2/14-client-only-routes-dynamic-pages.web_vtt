WEBVTT

1
00:00:00.150 --> 00:00:05.287
When you're building for Gatsby by
default, the way that Gatsby works is to

2
00:00:05.287 --> 00:00:10.360
put all of the pages, both server side
rendered and client side rendered.

3
00:00:10.360 --> 00:00:13.820
So you start by building
the site down to static files, so

4
00:00:13.820 --> 00:00:18.180
that if JavaScript is disabled,
you can still load the page.

5
00:00:18.180 --> 00:00:22.311
When the component hits the browser and
rehydrates,

6
00:00:22.311 --> 00:00:28.367
it then like JavaScript fires, mounts
the page builds a react version of it and

7
00:00:28.367 --> 00:00:34.895
you end up with a fully functional react
app on top of this the static route.

8
00:00:34.895 --> 00:00:39.192
In client only rendering,
what you end up with is you run into these

9
00:00:39.192 --> 00:00:44.265
situations where let's say, for
example, you wanna build a search page.

10
00:00:44.265 --> 00:00:51.535
So your search results page cannot exist
without some kind of input from the user.

11
00:00:51.535 --> 00:00:56.154
It's completely impractical to
try to guess all of the possible

12
00:00:56.154 --> 00:01:01.500
search combinations that could exist and
build that ahead of time.

13
00:01:01.500 --> 00:01:06.229
So instead what we do is we wanna build
what's called a client only route where

14
00:01:06.229 --> 00:01:08.703
there is no server side rendering step,

15
00:01:08.703 --> 00:01:13.286
we're instead gonna say hey Gatsby only,
like, put this file out there so

16
00:01:13.286 --> 00:01:17.665
that all of the logic happens
only when we get to the client.

17
00:01:17.665 --> 00:01:21.995
So if you load this with JavaScript
disabled, it's gonna be an empty page.

18
00:01:21.995 --> 00:01:27.595
So with that being said, what I wanna do
is let's actually build ourselves a search

19
00:01:27.595 --> 00:01:33.450
component and the way I'm gonna do that
is let's start by giving it a few styles.

20
00:01:33.450 --> 00:01:36.888
So we're going to do a search.module.CSS.

21
00:01:36.888 --> 00:01:41.022
And this is because we're gonna have
a search field search button and

22
00:01:41.022 --> 00:01:43.260
like a clear reset button.

23
00:01:43.260 --> 00:01:46.822
And I wanna make sure that those
aren't just like gencon jank,

24
00:01:46.822 --> 00:01:49.385
we're gonna do a little
bit of styling on it.

25
00:01:49.385 --> 00:01:53.230
So we'll have a form in that
will make that display flex.

26
00:01:53.230 --> 00:01:58.430
I am a big fan of display flex if you
haven't already picked up on that.

27
00:01:58.430 --> 00:02:03.640
And we can go space between so that they
kinda equally distributed across the page.

28
00:02:03.640 --> 00:02:06.440
We'll give them a gap of 1rem.

29
00:02:06.440 --> 00:02:12.250
For the search input,
I want this to be font size of 1rem.

30
00:02:12.250 --> 00:02:16.449
So a thing that is a little bit
frustrating and a little bit confusing

31
00:02:16.449 --> 00:02:21.530
about inputs, is by default,
they don't respect the document font size.

32
00:02:21.530 --> 00:02:24.239
So by doing this font size 1 rem,
the font size

33
00:02:24.239 --> 00:02:29.130
in the input will actually be the same as
the font size for the rest of the CSS.

34
00:02:29.130 --> 00:02:32.509
And another little fun fact is if
you've ever been on a website and

35
00:02:32.509 --> 00:02:36.705
you tap into like a search bar or
to enter your email and the page zooms in.

36
00:02:36.705 --> 00:02:39.485
That's because the font is
smaller than 16 pixels.

37
00:02:39.485 --> 00:02:44.299
So if you want to avoid your website
zooming in when people touch your

38
00:02:44.299 --> 00:02:49.335
inputs on a browser, make the font
bigger and it will stop doing that.

39
00:02:49.335 --> 00:02:54.660
So this will prevent that
from happening effectively.

40
00:02:54.660 --> 00:02:59.300
Then we're going to set padding,
or 0.25 on the top and bottom so

41
00:02:59.300 --> 00:03:03.700
that it's got a little bit of
breathing room and one on the left and

42
00:03:03.700 --> 00:03:06.900
right to give it some input like shape.

43
00:03:06.900 --> 00:03:09.262
Then we'll set the width to be 100%.

44
00:03:09.262 --> 00:03:13.188
And I want that to basically occupy all
the available space that the buttons

45
00:03:13.188 --> 00:03:14.900
aren't using.

46
00:03:14.900 --> 00:03:20.563
Then for the buttons,
we're gonna do a font size of 1 rem,

47
00:03:20.563 --> 00:03:24.655
and we'll do, just the the same padding.

48
00:03:24.655 --> 00:03:28.120
So let's do 0.25 and 1.

49
00:03:28.120 --> 00:03:30.090
And I think that's good enough, right?

50
00:03:30.090 --> 00:03:35.390
So then let's go in and
let's make our first page.

51
00:03:35.390 --> 00:03:42.730
So the way that Gatsby works is we
looked at these file based routes here.

52
00:03:42.730 --> 00:03:46.530
Gatsby also supports something
called dynamic routes.

53
00:03:46.530 --> 00:03:53.824
So if we create, let's say,
like a search folder And in this,

54
00:03:53.824 --> 00:03:59.640
I wanted to make everything that hits that
search route hit like the same component.

55
00:04:00.670 --> 00:04:03.742
We can do what's called a catch all,

56
00:04:03.742 --> 00:04:08.110
which is the brackets and
three dots and then dot js.

57
00:04:09.570 --> 00:04:14.643
This is very cool, it's very helpful and
it gives us the ability to say if you hit

58
00:04:14.643 --> 00:04:19.643
search, go ahead and just bring everything
at this sub route into this page and

59
00:04:19.643 --> 00:04:23.220
we'll do stuff with it on the client side.

60
00:04:23.220 --> 00:04:27.916
So in here we are going to write a react
component as usual import react from

61
00:04:27.916 --> 00:04:28.460
react.

62
00:04:30.640 --> 00:04:36.650
And then I also wanna get
the navigate library out of Gatsby.

63
00:04:36.650 --> 00:04:39.640
And what this navigate library does
is it lets us do programmatic.

64
00:04:39.640 --> 00:04:44.060
So the same thing that link does, where
when you click it, it takes you to another

65
00:04:44.060 --> 00:04:48.234
page and all those things, navigate
lets us do that but programmatically.

66
00:04:48.234 --> 00:04:51.620
Then I'm gonna get my style, so
my form, my input and my button.

67
00:04:54.600 --> 00:04:56.410
And I don't know why it came out of that.

68
00:04:56.410 --> 00:05:00.285
Let's get it out of styles,
got to go up another level,

69
00:05:00.285 --> 00:05:06.420
cuz we're in the search folder here we're
gonna get styles and search.module.CSS.

70
00:05:06.420 --> 00:05:10.620
Then we can export default function,

71
00:05:10.620 --> 00:05:18.110
we'll call it search client only and
this gives us params.

72
00:05:18.110 --> 00:05:24.147
So what params is, is whatever is in
the URL, and it gets broken up by slashes,

73
00:05:24.147 --> 00:05:30.470
so if we have one thing, it'll show us
like a little well, let's just look at it.

74
00:05:30.470 --> 00:05:33.170
And actually it's easier
to show than to explain.

75
00:05:33.170 --> 00:05:38.040
So what we'll do is we'll get query.

76
00:05:38.040 --> 00:05:44.011
Actually, let's start by just doing
this let's console.log params.

77
00:05:44.011 --> 00:05:48.365
And then let's make it visual,

78
00:05:48.365 --> 00:05:54.503
let's do return pre JSON stringify params.

79
00:05:59.148 --> 00:06:05.330
Okay, so this will give us the ability
to hit anything in the search.

80
00:06:05.330 --> 00:06:10.620
So let's look, we got started,
let's start the server.

81
00:06:10.620 --> 00:06:13.713
Now that this has started,
when we look at the search,

82
00:06:13.713 --> 00:06:18.510
we can see that because we used to
catch all route, it gives us this star.

83
00:06:18.510 --> 00:06:22.260
And that star is like
everything that's in here.

84
00:06:22.260 --> 00:06:26.680
And so we can put whatever we
want in here, some more stuff.

85
00:06:26.680 --> 00:06:30.150
And it'll just feed us that path,
whatever we put in here.

86
00:06:30.150 --> 00:06:34.731
And so if we were to do something like
our search query we wanted to search for,

87
00:06:34.731 --> 00:06:36.430
I don't know, the hobbit.

88
00:06:38.080 --> 00:06:40.040
It just gives us the search
text right there.

89
00:06:40.040 --> 00:06:42.147
So we can actually build
a search form like that and

90
00:06:42.147 --> 00:06:43.910
it's all coming right through the page.

91
00:06:43.910 --> 00:06:47.010
So let's do that,
let's build ourselves a search form.

92
00:06:48.270 --> 00:06:54.650
So what I'm gonna do is I want to in here,
get our query.

93
00:06:54.650 --> 00:06:57.920
And that'll be,
we're gonna decode the URL components.

94
00:06:57.920 --> 00:07:00.800
We don't want any like percent 20s or
things like that.

95
00:07:00.800 --> 00:07:04.821
We will get whatever
comes out of params star.

96
00:07:07.441 --> 00:07:10.740
And then we want to use some react stuff.

97
00:07:10.740 --> 00:07:13.099
So we're gonna store the current query and

98
00:07:13.099 --> 00:07:16.120
then we'll have the ability
to set the current query.

99
00:07:16.120 --> 00:07:19.750
And that's gonna be react use state.

100
00:07:20.890 --> 00:07:24.222
And we'll start with
the whatever the query is,

101
00:07:24.222 --> 00:07:26.750
then we're gonna keep our results.

102
00:07:26.750 --> 00:07:29.900
So we're gonna do a search,
we wanna hold on to the search result.

103
00:07:29.900 --> 00:07:34.186
So have the ability to set the results and

104
00:07:34.186 --> 00:07:38.770
that's going to be in react, use state.

105
00:07:38.770 --> 00:07:41.670
And we'll set that to null by default.

106
00:07:41.670 --> 00:07:47.190
And then we want to do a status and
set status.

107
00:07:48.260 --> 00:07:54.223
And this I hope that David Khurshid who
wrote x date is not watching because

108
00:07:54.223 --> 00:07:59.330
he's gonna send me angry email,
but I'm gonna use a kind of a.

109
00:08:00.750 --> 00:08:04.340
Status flag, like what are we doing?

110
00:08:04.340 --> 00:08:08.890
So then in here,
I'm going to add a couple functions.

111
00:08:10.410 --> 00:08:13.270
So the first one is we wanna
be able to handle the search.

112
00:08:13.270 --> 00:08:17.820
And so when we get a search, we're gonna
get, it's gonna be as form submission.

113
00:08:17.820 --> 00:08:20.345
And so the first thing that we wanna
do is prevent that form from actually

114
00:08:20.345 --> 00:08:20.860
submitting.

115
00:08:20.860 --> 00:08:25.650
We instead want to grab that here,
so we're gonna prevent default.

116
00:08:25.650 --> 00:08:29.007
That'll prevent the form from
actually submitting in one set,

117
00:08:29.007 --> 00:08:30.780
let us deal with it.

118
00:08:30.780 --> 00:08:33.424
Then I wanna get the form data,

119
00:08:33.424 --> 00:08:38.240
which will be using the built
in browser form data API.

120
00:08:38.240 --> 00:08:43.553
If you've never used this, this is
something that when I learned about it,

121
00:08:43.553 --> 00:08:48.451
as soon as Hinton pointed it out to me,
I felt like a dang superhero I had

122
00:08:48.451 --> 00:08:53.340
been doing this the hard way prior
to this and wow, is this easier.

123
00:08:53.340 --> 00:08:56.740
So I can actually just get
whatever the name of the field is.

124
00:08:56.740 --> 00:09:00.970
So if I've got my field down here,
let's set these up so

125
00:09:00.970 --> 00:09:03.940
we can kinda look at what happens.

126
00:09:03.940 --> 00:09:07.964
If I've got a form and
the way that form is gonna work,

127
00:09:07.964 --> 00:09:10.915
I'm not gonna fully mark it up yet, but

128
00:09:10.915 --> 00:09:16.955
if we've got an Input of a type search and
we give it a name of search.

129
00:09:16.955 --> 00:09:21.883
Then what I can do up here is do
a form.getsearchand I'll get whatever

130
00:09:21.883 --> 00:09:23.775
the value of this is.

131
00:09:23.775 --> 00:09:26.095
It's so easy, It's built into the browser.

132
00:09:27.515 --> 00:09:32.467
Yeah, form management has
really used to scare me and

133
00:09:32.467 --> 00:09:36.550
now I know I don't mind it,
I kinda like it.

134
00:09:37.720 --> 00:09:44.533
Then once we've got that we can set the
current query to be whatever the query is.

135
00:09:44.533 --> 00:09:51.667
And then I'm also going to navigate the
browser I wanna send this to search and

136
00:09:51.667 --> 00:09:55.948
we will encode the URL component for
queries so

137
00:09:55.948 --> 00:10:00.997
that we don't have any,
if there's URL characters or

138
00:10:00.997 --> 00:10:06.965
any special characters in the string,
it won't break our URL.

139
00:10:08.535 --> 00:10:11.965
And once we've navigated, that'll be
the end of how we handle our search.

140
00:10:11.965 --> 00:10:15.345
So, the other thing that we
wanna handle is just a reset.

141
00:10:15.345 --> 00:10:19.180
So let's create a function
called handle search reset.

142
00:10:20.250 --> 00:10:28.800
That is going to just set the current
query to nothing, make it blank.

143
00:10:28.800 --> 00:10:32.177
And then we'll navigate back to search.

144
00:10:34.720 --> 00:10:36.890
Okay, so that's that function.

145
00:10:36.890 --> 00:10:39.690
And the last one I'm not
gonna write just yet.

146
00:10:39.690 --> 00:10:42.280
Let's stub it out though.

147
00:10:42.280 --> 00:10:45.330
So it's gonna be a function
called Book Search.

148
00:10:45.330 --> 00:10:47.190
It's gonna take a query.

149
00:10:47.190 --> 00:10:52.279
And that one is going to, Look up a book.

150
00:10:57.630 --> 00:11:02.302
So the other thing that we're
gonna do is we want to watch for

151
00:11:02.302 --> 00:11:05.300
whenever the current query changes.

152
00:11:05.300 --> 00:11:06.860
So we're gonna use effect for that.

153
00:11:08.100 --> 00:11:11.850
And the way that use effect works is we
pass in an array of what we wanna track.

154
00:11:11.850 --> 00:11:13.430
So we're gonna pass in current query.

155
00:11:16.280 --> 00:11:18.890
And then we can do stuff whenever
the current query happens.

156
00:11:18.890 --> 00:11:24.580
So what I wanna do is if
the current query is empty.

157
00:11:24.580 --> 00:11:29.091
We're just gonna set
the result to know and

158
00:11:29.091 --> 00:11:32.650
we'll just return will be done.

159
00:11:32.650 --> 00:11:34.650
There's nothing else
that we wanna do there.

160
00:11:34.650 --> 00:11:37.668
Otherwise if the current
query is not empty,

161
00:11:37.668 --> 00:11:41.170
we're gonna run this Book Search and
and pass it in.

162
00:11:45.090 --> 00:11:48.663
So this is what's actually
gonna run our search,

163
00:11:48.663 --> 00:11:54.730
whenever we update the current query here,
this will cause the search to run.

164
00:11:54.730 --> 00:11:56.996
And then in here is where
we'll set the result so

165
00:11:56.996 --> 00:11:59.570
that we can show it on the screen.

166
00:11:59.570 --> 00:12:02.203
So let's build out our basic form, so

167
00:12:02.203 --> 00:12:07.760
let's tell people where they are,
we'll say, search for a book.

168
00:12:07.760 --> 00:12:10.800
And then in our form.

169
00:12:10.800 --> 00:12:16.338
So our form is gonna have
a class name of form and

170
00:12:16.338 --> 00:12:22.019
on submit we're gonna
run that handle search.

171
00:12:23.940 --> 00:12:31.040
Inside of that we have the input and
we'll give this a class name of input.

172
00:12:32.400 --> 00:12:34.210
Then we'll do a button.

173
00:12:34.210 --> 00:12:38.620
That button will have
a class name of button.

174
00:12:39.890 --> 00:12:43.150
The text on it will be search.

175
00:12:43.150 --> 00:12:44.900
And that's really all
that buttons gonna do.

176
00:12:44.900 --> 00:12:46.660
So let's duplicate that one.

177
00:12:46.660 --> 00:12:47.680
And this one's gonna be different.

178
00:12:47.680 --> 00:12:50.140
This is gonna be a type reset button.

179
00:12:50.140 --> 00:12:54.150
And this will say, what's it gonna say?

180
00:12:54.150 --> 00:12:55.820
We'll call it reset.

181
00:12:55.820 --> 00:12:58.487
And then let's also give it an unclick.

182
00:13:00.600 --> 00:13:02.990
Of handling the surgery set.

183
00:13:04.840 --> 00:13:08.619
So effectively what we're doing here
is we're saying, in this search form,

184
00:13:08.619 --> 00:13:10.290
let's look at what it looks like.

185
00:13:11.350 --> 00:13:12.220
Form is not defined.

186
00:13:12.220 --> 00:13:12.919
What are they?

187
00:13:20.960 --> 00:13:22.020
There we go.

188
00:13:22.020 --> 00:13:27.062
So now we've got this search and
so what a reset type is

189
00:13:27.062 --> 00:13:32.340
if I say some value If I reset
it clears the form, right?

190
00:13:32.340 --> 00:13:33.940
And this is also built into a search form.

191
00:13:33.940 --> 00:13:36.020
So there's ways to do that.

192
00:13:36.020 --> 00:13:40.325
And then what we should see here is
we won't get any results yet but

193
00:13:40.325 --> 00:13:42.965
if I search, we should see it update.

194
00:13:42.965 --> 00:13:43.825
There it is.

195
00:13:43.825 --> 00:13:48.515
We get the hobbit up in the screen,
in the search bar.

196
00:13:48.515 --> 00:13:52.175
So, pretty sweet,
pretty helpful, very useful.

197
00:13:52.175 --> 00:13:56.910
And the next thing for us to do is
to actually write this book query.

198
00:13:56.910 --> 00:13:58.820
So let's do that.

199
00:13:58.820 --> 00:14:01.628
And the way that we're gonna do
that is we're gonna use that open

200
00:14:01.628 --> 00:14:03.180
Library Search again.

201
00:14:03.180 --> 00:14:05.130
So the first thing I wanna do,

202
00:14:05.130 --> 00:14:08.810
is I'm gonna set the status
of our document to loading.

203
00:14:08.810 --> 00:14:12.060
So this is kind of very
bad state management.

204
00:14:12.060 --> 00:14:18.182
Then we're gonna do a response
which will be a waiting, fetch and

205
00:14:18.182 --> 00:14:23.340
I'm going to Https,
we wanna hit openlibrary.org.

206
00:14:23.340 --> 00:14:27.680
We're gonna hit the search.jsonendpoint.

207
00:14:27.680 --> 00:14:31.169
And this works with just a queue and
then whatever our query is, so

208
00:14:31.169 --> 00:14:33.270
we can pass in the query just like that.

209
00:14:34.480 --> 00:14:36.175
This is,
let me make that a little bit bigger so

210
00:14:36.175 --> 00:14:38.500
we can actually see what's going on.

211
00:14:38.500 --> 00:14:40.780
So we're gonna fetch that, and

212
00:14:40.780 --> 00:14:45.940
then after we have fetched that we'll
check down here if res is not okay.

213
00:14:45.940 --> 00:14:51.785
So if something went wrong with the with
the query, we will just throw a new error,

214
00:14:51.785 --> 00:14:56.701
because that would mean that something
went wrong with the search and

215
00:14:56.701 --> 00:14:59.686
so it's okay to fail if that's the case.

216
00:14:59.686 --> 00:15:04.930
We probably want more graceful error
handling we're not going for perfect.

217
00:15:04.930 --> 00:15:06.140
We're going for learning today.

218
00:15:09.010 --> 00:15:12.315
Okay, so If we get past here,
we know that we've got a good result.

219
00:15:12.315 --> 00:15:14.525
So let's get our results.

220
00:15:14.525 --> 00:15:16.326
It'll be await res Jason,

221
00:15:16.326 --> 00:15:21.505
because we know we're getting back Jason
because we call the Jason endpoint.

222
00:15:22.860 --> 00:15:27.460
And then,
we can set our results to result.

223
00:15:27.460 --> 00:15:30.850
And we can set our status to idle.

224
00:15:32.580 --> 00:15:37.534
And so effectively what we've done now,
is we've created a little poorly managed

225
00:15:37.534 --> 00:15:41.708
state machine, that will say kinda
where things are, and down here,

226
00:15:41.708 --> 00:15:46.440
what we can do is we can start to
respond to that in the UI a little bit.

227
00:15:46.440 --> 00:15:51.976
So, what I'm gonna do is if our status

228
00:15:51.976 --> 00:16:00.030
is loading we wanna show
something like loading.

229
00:16:00.030 --> 00:16:03.280
Results, right?

230
00:16:03.280 --> 00:16:07.835
And then if our status is idle and

231
00:16:07.835 --> 00:16:13.404
the current query is not, that's what

232
00:16:13.404 --> 00:16:18.485
I was trying to push, is not empty.

233
00:16:20.295 --> 00:16:23.904
Then we want to show results.

234
00:16:28.850 --> 00:16:31.423
Otherwise, we're just gonna show null.

235
00:16:35.077 --> 00:16:37.025
So let's get these results shown here.

236
00:16:37.025 --> 00:16:43.639
We'll do an h2, say search results for,

237
00:16:46.531 --> 00:16:53.510
CurrentQuery and then down here, we'll
just set them up as an unordered list.

238
00:16:53.510 --> 00:16:57.136
Make sure that we've got a result because
it's always possible that it comes

239
00:16:57.136 --> 00:16:58.290
back empty.

240
00:16:58.290 --> 00:17:00.700
And then we'll go through the result.docs.

241
00:17:00.700 --> 00:17:04.625
So what comes back from
the search is metadata and

242
00:17:04.625 --> 00:17:07.890
then docs is the actual list of results.

243
00:17:09.840 --> 00:17:15.030
We can map those, get to doc,

244
00:17:15.030 --> 00:17:21.970
and inside here we can set up a li key.

245
00:17:21.970 --> 00:17:26.930
So doc.key is a,
that's a unique field in there.

246
00:17:26.930 --> 00:17:31.312
And I don't wanna teach how
the open library API works.

247
00:17:31.312 --> 00:17:33.390
So I'm kinda just flying
through what the fields are.

248
00:17:33.390 --> 00:17:36.815
What we could do is run this in
the browser and look at the fields and

249
00:17:36.815 --> 00:17:38.638
then kind of reverse engineer it.

250
00:17:38.638 --> 00:17:42.774
But for the sake of not
getting too lost in the weeds,

251
00:17:42.774 --> 00:17:48.040
I'm trying to make sure that we
cover this as quickly as possible.

252
00:17:50.240 --> 00:17:54.546
So we've got the strong tag here
that's gonna show the title and

253
00:17:54.546 --> 00:17:56.788
I want that to be the doc.title.

254
00:17:58.734 --> 00:18:04.650
And then I'm gonna put in who
the doc.author is if the author is set,

255
00:18:04.650 --> 00:18:11.183
so I'm gonna say doc.author_name,
which is gonna be an array actually.

256
00:18:11.183 --> 00:18:17.590
Oddly enough, being singular, and then,
so we'll say, doc.author_name and

257
00:18:17.590 --> 00:18:23.800
then I wanna optionally chain this
because it might be set and still empty.

258
00:18:23.800 --> 00:18:29.250
So just trying to guard
against unexpected chaos here.

259
00:18:29.250 --> 00:18:31.180
So let's save that.

260
00:18:31.180 --> 00:18:33.890
And this should work, right?

261
00:18:33.890 --> 00:18:35.670
Let's give it a try.

262
00:18:35.670 --> 00:18:37.950
So, hey, look it's already doing it.

263
00:18:37.950 --> 00:18:39.120
So we've searched for the Hobbit.

264
00:18:39.120 --> 00:18:40.630
Let's search for another book.

265
00:18:40.630 --> 00:18:41.970
Ready Player One.

266
00:18:44.160 --> 00:18:45.950
There we go, we've got results.

267
00:18:45.950 --> 00:18:48.720
Let's search for just one more.

268
00:18:48.720 --> 00:18:50.870
What's another book?

269
00:18:50.870 --> 00:18:53.030
I've only read two books, apparently.

270
00:18:54.480 --> 00:19:00.446
Another book that I've read
that I liked was Zen and

271
00:19:00.446 --> 00:19:05.391
the Art of Motorcycle Maintenance.

272
00:19:05.391 --> 00:19:06.639
And there it is.
So this is cool, right?

273
00:19:06.639 --> 00:19:08.350
And we can make this more useful.

274
00:19:08.350 --> 00:19:12.965
We could link to a doc page, we could
figure out a way to hook this ISBM up to

275
00:19:12.965 --> 00:19:16.235
another page where we could
get more information.

276
00:19:16.235 --> 00:19:18.383
But I'm not worried about that,

277
00:19:18.383 --> 00:19:23.380
I just kinda wanna show how you would
set up these client-only pages.

278
00:19:23.380 --> 00:19:27.709
And as you can see, this is not
a particularly simple component but

279
00:19:27.709 --> 00:19:32.425
the nice thing about it is that
everything that's happening in here with

280
00:19:32.425 --> 00:19:34.996
the exception of this navigate calls.

281
00:19:34.996 --> 00:19:39.760
These are all being done as it's just
React, the only Gatsby specific thing

282
00:19:39.760 --> 00:19:43.037
we're pulling in here is
this navigate function and

283
00:19:43.037 --> 00:19:48.269
the fact that this file is named something
funky to make Gatsby pick it up wherever.

284
00:19:48.269 --> 00:19:56.425
The other thing that's called up is
this is also, it's URL navigable.

285
00:19:56.425 --> 00:20:00.007
So if I visit a page,
like I wanna come see the Hobbit,

286
00:20:00.007 --> 00:20:02.560
it'll load the Hobbit for me.

287
00:20:02.560 --> 00:20:05.161
So I didn't pull it out and
put it in the in the query.

288
00:20:05.161 --> 00:20:08.345
So you could share a set of
search results with somebody.

289
00:20:08.345 --> 00:20:10.061
And so this is nice, right?

290
00:20:10.061 --> 00:20:14.447
It's kind of a stateful transfer
of information if you store

291
00:20:14.447 --> 00:20:16.685
the query in the URL like that.

