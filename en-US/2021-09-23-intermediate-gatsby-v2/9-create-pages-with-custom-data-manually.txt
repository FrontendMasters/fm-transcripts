[00:00:00]
>> The first thing that we're gonna do if we wanna get a book listing, because we've got a cover, I want these to, like I don't wanna them to just be like big spaghetti things. So I'm gonna add a little bit of styling in here. And we're going to create a new folder called styles.

[00:00:14]
And we'll call this book.module.css. We're using the CSS module approach because it gives us scoped styles without having to install like a CSS and JS library or learn some specialty syntax of CSS. This is just plain old CSS, what you've always used, we just get to trust that it's gonna be scoped because of the way that CSS modules are implemented.

[00:00:34]
So in here, I've got a listing that's gonna be the actual book wrapper. We want that to be display flex because I want the cover and the details to live side by side and we'll give it a gap of 2ram and a margin-bottom of 2ram. Then we want a heading and the heading.

[00:00:58]
I'm just going to set a margin of 0 because otherwise, what will happen is the heading will get bumped below the book cover and it'll have this kind of like weird offset. And I don't wanna deal with that. So we're going to do that. And that's good enough like all I want is for this to just not be like completely un-styled.

[00:01:14]
So then I can create a template for this, because remember we do use that create page API, we need to have a template to use. So I'm gonna create a template called book. And in this, we're gonna import everything as react from react. And then we're going to import graphql.

[00:01:36]
And, my God, stop helping. And link from gatsby. And finally, we're gonna use that Gatsby image that we set up. So let's import GatsbyImage and getImage from gatsby-plugin-image. And then I am also going to import those styles we just created. So, listing and heading from our styles. So let's get the book.module.css.

[00:02:10]
And if we want to get a query, so this one is going to be a query because it includes the book ID. So we're gonna have our graphql. And inside of that, let's go out here and build a query for this. So this is running, so I can come over here.

[00:02:28]
And I wanna get a book. So let's close up author and instead we're gonna get book and I want my book to come in with a, I don't need the ISP and do I. I want a name, I want the author name and slug. I want the series and the series order.

[00:02:54]
Then I want the cover. And I want the cover to have a child image sharp and Gatsby image data. And we could set this to be whatever. I'm just gonna leave all the defaults because it's fine, but I am gonna restrict the width to 150 because I want the cover to be pretty small on the page.

[00:03:15]
And so once we've set that I can change this over to like, say book will get the ID equal string, and then we would wanna filter by the ID as well. So I have this and we want it to equal and we'll say it's going to equal the ID.

[00:03:35]
So I can copy this, bring it over here. In this is going to get us all the details about our book. And while I'm thinking about it, let's also get our buyLink in here. So now I have my data, we're going to get the individual book that we're trying to query for, and we can build our components.

[00:03:55]
So export default function BookPage, and we'll get data from our graphql query. Here, let's extract the book out of that data, so data.book; and then we can return a whole bunch of markup. So let's get a fragment setup. And then we will set the classname to be our listing, because that's the book listing.

[00:04:24]
And then we are going to use this GatsbyImage. And we'll pass in the image of from the book cover. And so this getImages a helper from Gatsby to dive in and get the image sharp and the GatsbyImage data and all the things that it needs, so that we don't have to remember to type all that out.

[00:04:43]
And then we can set the alt. I'm gonna cop out a little bit here and call the book,name. Probably better all text should be written. And we can set the h1, I'm going to set. This needs a class name of heading. Otherwise we'll get that awkward top margin that I don't want, and we'll use the book.name as our h1.

[00:05:09]
Let's set the author here. And we're gonna link to our author. So in here, we're going to link to book.author.slug. And then we want to do book.author.name, right? So we're just going to using this data, nothing too out of the ordinary here. And then we're gonna link through the book.series, if there is a book.series, we're gonna add some extra information.

[00:05:40]
So if there's a book series, we'll say, this is book.seriesOrder. Don't need that dollar sign there. This is (book.seriesOrder) of the book.series. And then finally below that, we can just start closing things up. So let's close up that div. That one's already closed. Okay, and then we'll take them back to a yet to be created all books listing and we'll just do the same thing a left arrow, HTML entity and back to all books.

[00:06:25]
Okay, so now that this is created, we can actually use it. So let's get into Gatsby node and in let's make this thing work. So what we're gonna have to do is pull in, in create pages. I'm gonna start collapsing these so that it's a little easier to see what we're working on.

[00:06:45]
There's another helper that you get in create pages called graphql. And this allows us to make a query against our graphql data layer while we are inside of the create pages API. So, by doing this, that means I can make a query down here. Now, this is a little bit unintuitive because in Gatsby components, it's a template tag.

[00:07:09]
In create pages, it's a function. So, [LAUGH] it's otherwise exactly the same. We're just gonna get query for all of our books. And what I want in this is allbook. We'll get the nodes. We will get the id, the series, and the name, all right? And I'm gonna get the result of that, we need to await this or else would get a promise.

[00:07:37]
And that means I need to make this async. This is a cool thing about Gatsby is the API is can be run synchronously or asynchronously. So if you ever wanna await something, you can just toss that async in front of it, and you'll be able to do that instead of having to do promise juggling.

[00:07:53]
Once we've got that result, we can set up a little bit of logic to determine our books. So let's get the books themselves out of here. And that's going to be result.data.allbook.nodes; okay? Then let's loop through them. So books.forEach, and we're using forEach here because we don't return anything, right?

[00:08:15]
That's when you would use forEach book. All right, so we've got our books were looping and I'm gonna start by getting the bookSlug. So, as you identified, whoever asked that question, we do indeed need to make that easier, why is that? That's not what we want at all.

[00:08:37]
We just wants slugify like that. Let's put that up here. So we've got slugify and we're going to slugify the book.name and again we're gonna go lower:true. And if we have a book.series, if it's no then we can create a page and that will be a path. It's gonna be bookSlug.

[00:09:14]
We're gonna set the component to be required.resolve. And we'll do src/templates/book.js. And for the context we're going to include the id; have book.id, and that so that we can look up the book when we get into that template. Remember we needed to have this variable, that's how we're getting it in, we pass that id as context and now we actually have it available to us.

[00:09:47]
So that will create our pages in that place. Then, if we do have a series I'm gonna create a seriesSlug, and we'll slugIfy the book.series. And again, we'll go lower:true and we can createPage. And I'm realizing now that this is ripe for refactoring. So this one would go seriesSlug.

[00:10:25]
And then again, it's the template in the book and again, it's the context and id. So I don't know why I didn't just check for the slug or something but it's okay. Me being good at this type of code is not the point of this work. [LAUGH] But we are gonna get what we need here of creating the page and we'll get the right template and the books get created at the right slug.

[00:10:50]
No matter what we are doing there and I caught a typo before it broke everything, what a great day. So let's stop and restart because we just updated our Gatsby node. And that's gonna take us out to local host here. And what I wanna be able to do is get to all of my books.

[00:11:15]
So what should happen is once this reloads, I should be able to click into one of these books and actually see it. So let's see how that goes. I'm gonna click in. And we're just waiting for this to finish. There it goes, all right, we refresh, and there is our book.

[00:11:37]
Okay, I can see something has screwed up. I needed to put all of this into a div so that it floats properly. So let's do that. There we got that looks better. That's more like what we wanted. So now we have the ability to display our books. They're sort of styled so that they look at least somewhat legible.

[00:12:01]
And then we come back to this /books page, which is not yet created. So I'm gonna create one more page here and this one can just be a regular old listing of books. So we're gonna import everything as react from react. We're going to import, graphql, Link from gatsby, we're going to import slugify.

[00:12:29]
I'm really now that it's been pointed out to me, I'm feeling very foolish about having duplicated all this slugify work. And we're gonna do this as a static query again, so let's export default function booksPage, and let's get the useStaticQuery in here again. So I'm gonna get data out of useStaticQuery.

[00:12:58]
That's gonna be our tag to graphql template and inside of it, I wanna getAllBooks. So we're gonna run a query for allBook, nodes. And then inside I want the id, the name, the author the name and slug have the author and the series name. And that's our graphql query Typos all over the place.

[00:13:33]
Let's, make that better. Okay, then down here, I can get the book out. So let's get books=data.allBook.nodes and then we can do our markup. So what I wanna do for this is again, we just wrap it in a fragment. We will stand up a heading, says books. And then we'll list through our books.

[00:13:58]
So we'll say books.map(book) and for each of these we are going to do a little bit of logic. And that logic is going to be to create a bookSlug. So again, we will slugify the book.name lower:true. Then we're gonna do this whole thing about generating the path again.

[00:14:28]
So if book.series, then we wanna create the seriesSlug. And that's gonna be slugify(book.series), (lower:true). And then we'll set the path to be book/seriesSlug, BookSlug. Or else we will set it to be path=/book/. BookSlug. Okay. Once we've got that, we can return our actual markup which will be a list item with a key.

[00:15:27]
That'll be the book.id. And then we're gonna set a link to the path and that's gonna be the book.name and then. We also wanna say by link to, and that's going to be to. We want to make this forces to the root because the author slug isn't a path.

[00:15:52]
It's just the author slug, so if we only put an author slug, what would happen is, it would make the links relative. So we're gonna link to the author's page with book.author.name. And that reminds me that we need to go book.author.slug. Okay, so you save all that and now, assuming I did all this right, which I think we did, I should be able to reload and get our books.

[00:16:22]
Okay, so let's do a quick check. We're on the books page, I click into a given book. Back to all books. I go to an author page, I get a list of their books go to all authors. And here we are okay, so we're authors, N.K Jemisin and click to a book.

[00:16:38]
We get the book, we go back to all books, we get a list. Click to an author, this is wonderful. Look how great this is. We have built ourselves a book club website.

