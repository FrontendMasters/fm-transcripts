[00:00:00]
>> So here's what I wanna do, I'm actually gonna use the serverless functions in a really rudimentary way. I want to fake authentication. And the reason I wanna do that is because the next thing that we gonna learn is how to actually do password protected pages. But so to do that, we're gonna use cookies.

[00:00:18]
And cookies are a very cool, like kind of underused, especially working in the web. I feel like a lot of us talked ourselves out of using cookies because they were hard and we didn't have servers available, so we just throw stuff in local storage or things like that.

[00:00:32]
It's not a great idea. Why not use a cookie? Cookies are surprisingly straightforward to use. Especially with serverless functions are really straightforward to use. And they give us a lot of security and power. You can restrict them to http only, you can restrict them to the same site.

[00:00:48]
There's a lot of extra cool things that you can do, that local storage doesn't provide. Let's go ahead and build ourselves, I'm just gonna rename this one we don't need a Hello function. So I'm gonna call one login. And in our login function, we are not gonna use the request object.

[00:01:03]
So to get it to not complain that I have an unused variable, I'm gonna lead with this _ which says yes, I know I'm not using that. Then I'm going to set a header. And the header that I wanna set is set cookie. And to set a cookie, you give it a name.

[00:01:21]
So we'll give this a unique name. We'll call it frontend masters off, then you give it a value. We're gonna mark it as true. I also wanna set the path that it's valid for which is the root path. So we're gonna set our header. It's going to set a cookie called frontend masters off=true.

[00:01:44]
And it's available to the whole site. We could like sub domain it if we wanted to. Then once I've got that, I'm just gonna send back some JSON, and it's gonna be a status of Ok. So this is a very simple function that I've just written. But what it's gonna do is when I come out here, if I look In my application, and I look in my cookies, you can see there's no cookies on this this localhost right now.

[00:02:12]
But when I go to log in, it is now set a cookie for me, right? So this cookie is now set and I can use that cookie elsewhere in my my site as a way of saying that somebody has done something. And I'm gonna use this to fake off, but you could also use this to personalize content.

[00:02:31]
Here's a really cool approach that I've seen my friend Joel does this, where when you sign up to a newsletter. They keep a cookie that says that you signed up and then they don't show you their opt in anymore. Because you've already opted in, you're part of their newsletter list.

[00:02:51]
So they can actually show you something different, like more articles to read or a download that you get access to because you're opted in. There's all these cool little personal touches that you can add. And it doesn't take a lot, right? Like all you have to do is send this back on the way back.

[00:03:07]
So o once we submit this, like, hey, we're done. We did it, we got it. That's great. And I didn't have to learn anything special. I didn't have to go figure out how servers work. I'm just able to do the serverless function. So next let's make another one of these, but this one is gonna be a duplicate and I want it to be a log out.

[00:03:30]
So how do we unset a cookie? And the way that you unset a cookie is you first we'll just negate the value. So even if it doesn't work, we'll knock that value to false, so that it would still fail. And then we set an expires in the past.

[00:03:47]
There's a specific RFC format that you have to use for dates in cookies, which is a little bit weird. So it's Thursday, and then the dates of 01 Jan, and then any year in the past is fine. It's also like 1970 and then a time in this format and we'll set it to GMT.

[00:04:13]
And basically what we're saying is, this cookie should be gone, like get rid of it. And just in case you don't get rid of it also set it to false. So if there's any like flicker in the middle where it's still available, the code should still fail if it's set to false.

[00:04:26]
So we can do that. And now if we pull open our application again, and we're in login, so there's our cookie. Let's go to log out. Cookie's gone, right? Let's log in again. And now if I move around to other parts of the site, like let's go to the books page, that cookies still there.

[00:04:49]
You see we can use that wherever we want. And then if I go to log out, oops API log out, I mean, Cookies gone. Now if I go back to books, there's no cookie there anymore, right? So we've given ourselves the ability to set and remove a cookie.

[00:05:06]
And then the last thing that I wanna do is, I want to check whether or not the that we are logged in. So let's add one more serverless function, and this one is going to check off status. So we'll call this one checkoff.js. And this one is going to export default function handler.

[00:05:27]
And that's gonna take a request and a response. And that will check if logged in. And the way we're gonna do this is we're gonna use the Boolean constructor, we'll call Boolean as a function which will force whatever's inside of it to be a Boolean of true or false.

[00:05:49]
And then we're gonna check if the request cookies exist at all, because they might not. And if they do, then we'll do wreck.cookies and we're gonna check for frontend-masters-auth. Which will give us back that value. And that is gonna tell us whether or not we're logged in. So then what I can do is res.json and just send that value back, so let's just send back logged in, okay?

[00:06:22]
So currently we don't have a cookie. So I would expect that if we go to check off it should say false. Okay, logged in false. Let's go log in. All right, we have the cookie. Let's go check our auth status again. We are logged in true, right? So this is the power of what we're doing.

[00:06:41]
Let's log out. Check that off again. Login false. One more time login, check off, log in true. So I mean, this is just like kinda mind boggling to me how straightforward this all is to build these routes in a server, it wouldn't necessarily be harder but it would definitely take longer.

[00:07:06]
And I think that's the power of this, is like you can develop at the speed of thought, because you're not slowing down to write boilerplate or stand up services, you're able to just like I have an idea. I need a server for that. Okay, let me throw a serverless function and I can do that thing.

[00:07:23]
It's a really nice flow. It's really helpful. But what we could do, looking at at the way that this login works, the the value that we set here could be like a JSON web token. It could be some details about your user that you could then use to display on the page like somebody's username and email.

[00:07:49]
There are a lot of ways that you could approach this, and it's as far as like local persistent storage goes as long as you're not doing very much, cookies are a pretty good way to keep a session alive. And I wouldn't put anything that you need to like keep keep like their,drafts or something like that.

[00:08:08]
But something that's coming from a database like I'm going out I'm checking to see, all right does author zero does this person have an account? Is it valid is the password correct? Great, give me back those details. Throw them in a cookie. Now we're not talking about zero anymore, right?

[00:08:19]
Until we do a logout or the the expiry of the cookie hits. It's a nice flow. It gives you a lot of flexibility. It keeps things pretty performing. You can build it fast

