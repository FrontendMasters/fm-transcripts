WEBVTT

1
00:00:00.157 --> 00:00:01.370
So let's take that a step further.

2
00:00:01.370 --> 00:00:03.892
Let's do the same thing for our books.

3
00:00:03.892 --> 00:00:06.010
And so I'm gonna actually just

4
00:00:11.371 --> 00:00:15.000
You can do a lot of this just
really quickly like that.

5
00:00:15.000 --> 00:00:19.965
And just double check that I don't
need to change any of these.

6
00:00:19.965 --> 00:00:21.060
Nope, those should all be good.

7
00:00:21.060 --> 00:00:24.420
So, we've got ourselves books now.

8
00:00:24.420 --> 00:00:26.130
Going in the same way
that our authors did.

9
00:00:26.130 --> 00:00:29.596
So let's Save, Stop and Restart.

10
00:00:33.300 --> 00:00:37.053
We now see that we also have book.

11
00:00:37.053 --> 00:00:40.560
So if I go in I can query the ID ISBN.

12
00:00:40.560 --> 00:00:44.316
Let's get the name Author.

13
00:00:48.720 --> 00:00:54.423
I am missing my series info
which is a little bit odd.

14
00:00:54.423 --> 00:00:55.730
There's no book slug is why.

15
00:00:57.100 --> 00:01:00.876
That's what I get for copy pasting.

16
00:01:00.876 --> 00:01:02.700
Let's try this one more time.

17
00:01:02.700 --> 00:01:05.300
She's okay.

18
00:01:05.300 --> 00:01:06.760
So let's try that again.

19
00:01:07.790 --> 00:01:09.352
And now there's there it is.

20
00:01:09.352 --> 00:01:12.150
There's our series in series order and
we get all of our books.

21
00:01:12.150 --> 00:01:14.387
So here's each of the books.

22
00:01:14.387 --> 00:01:17.420
And we can see down here that
the series order went No.

23
00:01:17.420 --> 00:01:24.768
All right, so e now have custom
data inside of our Gatsby layer.

24
00:01:24.768 --> 00:01:29.231
But there's a problem here, which is that
for my author, I'm getting this, but

25
00:01:29.231 --> 00:01:32.610
what if I wanna be able to
display the author's name, right?

26
00:01:32.610 --> 00:01:36.127
I would like to be able
to dig into that and

27
00:01:36.127 --> 00:01:40.265
get the author name, and
so in order to do that,

28
00:01:40.265 --> 00:01:45.973
we're gonna have to create
relationships between these nodes.

29
00:01:45.973 --> 00:01:51.340
So, let's first, talk about how
this will actually function.

30
00:01:51.340 --> 00:01:56.796
So if you imagine your data
as being login a REST API,

31
00:01:56.796 --> 00:02:03.989
what you get is your kind of
specifying what's called foreign keys.

32
00:02:03.989 --> 00:02:06.580
If you've know anything
about data normalization,

33
00:02:06.580 --> 00:02:08.950
then that you may have
heard of that term before.

34
00:02:08.950 --> 00:02:10.707
If you haven't, don't worry about it.

35
00:02:10.707 --> 00:02:15.580
It basically means In both objects,
there's something that matches.

36
00:02:15.580 --> 00:02:19.639
So if we look at our author and
get the nodes, so

37
00:02:19.639 --> 00:02:22.463
here we go the name and the slug.

38
00:02:25.270 --> 00:02:27.063
I stopped there.

39
00:02:27.063 --> 00:02:30.021
Okay, instead of starting that again,
I'm just going to go over here, and

40
00:02:30.021 --> 00:02:31.780
we're going to look at the authors.

41
00:02:31.780 --> 00:02:33.809
So the authors have a slug.

42
00:02:33.809 --> 00:02:39.868
And this value here matches
the value of author Here, right so

43
00:02:39.868 --> 00:02:46.640
these slugs are a unique identifier for
each author that can be used.

44
00:02:46.640 --> 00:02:47.955
This is what's called the foreign key.

45
00:02:47.955 --> 00:02:52.330
So this is our foreign key
relationship with the author data.

46
00:02:52.330 --> 00:02:55.663
So to create one of these in Gatsby,

47
00:02:55.663 --> 00:03:00.563
we're going to use what is
called the Create types.

48
00:03:00.563 --> 00:03:06.313
API, and
if you are running gatsby underneath

49
00:03:06.313 --> 00:03:11.470
graph qL is what's called a schema.

50
00:03:11.470 --> 00:03:15.839
And the schema is what gives us the
ability to like generate these queries out

51
00:03:15.839 --> 00:03:20.155
here the the fact that all this is done,
this is all built off of the schema.

52
00:03:20.155 --> 00:03:24.750
So looking at the query, this is what
the schema looks like under the hood.

53
00:03:24.750 --> 00:03:26.376
So as you can see,
this is pretty intimidating.

54
00:03:26.376 --> 00:03:27.810
There's quite a bit in here.

55
00:03:28.950 --> 00:03:30.460
But we don't need to
care about any of that.

56
00:03:30.460 --> 00:03:33.950
What we need to care about is specifically
the thing we're trying to accomplish.

57
00:03:33.950 --> 00:03:37.318
Which is that we want to add
a relationship between these two types

58
00:03:37.318 --> 00:03:37.818
of data.

59
00:03:37.818 --> 00:03:41.730
So I'm just gonna write a little bit
of GraphQL schema right in here.

60
00:03:41.730 --> 00:03:45.475
And the first thing that we wanna
do is we're gonna touch our author.

61
00:03:45.475 --> 00:03:48.620
Every data type in Gatsby is a node.

62
00:03:48.620 --> 00:03:52.068
So we have to implement
the node interface.

63
00:03:52.068 --> 00:03:56.511
And then Gatsby gives us some convenience
where it doesn't require us to re-declare

64
00:03:56.511 --> 00:03:57.260
every field.

65
00:03:57.260 --> 00:04:01.789
Gatsby does something called Inference
where it will look at the data that comes

66
00:04:01.789 --> 00:04:04.236
in and generate fields based on that data.

67
00:04:04.236 --> 00:04:06.050
Most of the time, this is fine.

68
00:04:06.050 --> 00:04:10.484
Sometimes you'll have to do a little
bit of messing around in here and

69
00:04:10.484 --> 00:04:13.924
that's where this create
types comes in very handy So

70
00:04:13.924 --> 00:04:17.976
what I want to do is I want my author
to have a list of their books,

71
00:04:17.976 --> 00:04:21.360
and I want books to have
access to the author object.

72
00:04:21.360 --> 00:04:25.200
So for each author,
I want to add a field called books and

73
00:04:25.200 --> 00:04:28.600
I want this to be an array
have their books.

74
00:04:28.600 --> 00:04:30.337
And I want this to be required.

75
00:04:30.337 --> 00:04:34.460
So you can either get an empty array,
or you'll get an array of books, but

76
00:04:34.460 --> 00:04:37.800
you can't get an array of No,
and you can't get the value.

77
00:04:37.800 --> 00:04:41.420
No, that's what these
exclamation points here mean.

78
00:04:41.420 --> 00:04:42.960
And I want to link this.

79
00:04:42.960 --> 00:04:47.937
So the way that linking works is
it's gonna say we need to link

80
00:04:47.937 --> 00:04:51.952
from a field and
we need to link by another field.

81
00:04:51.952 --> 00:04:57.720
So I in my from field have
what I want my foreign keys.

82
00:04:57.720 --> 00:05:02.169
So in author my foreign key
is the slug.And in the book,

83
00:05:02.169 --> 00:05:06.428
we're going to put this inside
of the author itself so

84
00:05:06.428 --> 00:05:11.558
the the book object will actually be book,
Dot author dot name.

85
00:05:11.558 --> 00:05:18.100
So when I want to link inside of
the name it's gonna be author dot slug.

86
00:05:18.100 --> 00:05:21.801
So the name and slug will live
inside of the author field on book.

87
00:05:21.801 --> 00:05:26.007
So that's how we link that one, and then
let's do the same thing in reverse for

88
00:05:26.007 --> 00:05:30.250
the book So that one's also gonna
implement the node interface.

89
00:05:30.250 --> 00:05:31.810
And this one gets an author.

90
00:05:31.810 --> 00:05:35.195
We're just gonna override
the author field and

91
00:05:35.195 --> 00:05:39.010
I'm gonna do that by
using the author type.

92
00:05:39.010 --> 00:05:45.544
Then this one link from author which is
the the field that's got the slug in it,

93
00:05:45.544 --> 00:05:49.506
and it's gonna link by
slug on the author type.

94
00:05:49.506 --> 00:05:54.140
So we're basically telling Gatsby,
these are this is what I want to happen.

95
00:05:54.140 --> 00:05:57.833
When I want when I search for authors
to get a books field that has a list or

96
00:05:57.833 --> 00:06:00.807
has information about the books
written by this author.

97
00:06:00.807 --> 00:06:04.905
And then if I'm on the book type, I want
access to information about the author of

98
00:06:04.905 --> 00:06:08.660
those books, and I'll show you
why this is cool in a second.

99
00:06:08.660 --> 00:06:11.363
That's all we have to do.

100
00:06:11.363 --> 00:06:16.721
So why don't we start it and I'll show
you what's cool about it right now?

101
00:06:16.721 --> 00:06:20.750
So, when we're allowing for
our books to have authors, and

102
00:06:20.750 --> 00:06:24.703
our authors to have books,we
could reverse this, right?

103
00:06:24.703 --> 00:06:27.160
Like we could just go deeper,
and deeper, and deeper.

104
00:06:27.160 --> 00:06:29.665
And then yeah, actually,
it's kind of cool.

105
00:06:29.665 --> 00:06:33.960
It's a cool way to be able to
do that sort of development.

106
00:06:33.960 --> 00:06:37.280
So, now that we've got this set up,

107
00:06:37.280 --> 00:06:42.423
if I'm looking at my author here,
and I pull up in books,

108
00:06:42.423 --> 00:06:47.696
I can now find the name and
ISBN of every book they written.

109
00:06:47.696 --> 00:06:51.480
Let me get the book out for a second so
we can see this more easily.

110
00:06:51.480 --> 00:06:54.955
So here's our author query,
and we've got nk jemisin.

111
00:06:54.955 --> 00:06:59.410
And here are all the books in
this database by NK Jemisin.

112
00:06:59.410 --> 00:07:02.650
That is pretty dang cool, right?

113
00:07:02.650 --> 00:07:04.800
But let's go the other way on this.

114
00:07:04.800 --> 00:07:09.620
And so now I'm gonna say I want
to look at all my books, and

115
00:07:09.620 --> 00:07:14.541
for my books, I want the author
to pull out their name, but

116
00:07:14.541 --> 00:07:18.375
then I also wanna pull
out their other books.

117
00:07:18.375 --> 00:07:22.930
So I'm gonna pull out all the books
that they've written with the IESPN.

118
00:07:22.930 --> 00:07:27.277
So we can get, here's the fifth
season it was written by Rik Jemisin.

119
00:07:27.277 --> 00:07:30.690
And here are all the other
books by NK Jemisin.

120
00:07:30.690 --> 00:07:36.258
So this is so much easier than having to
write a series of nested rest calls and

121
00:07:36.258 --> 00:07:39.999
doing the async await dance
of making sure all those

122
00:07:39.999 --> 00:07:43.051
promises have resolved before I move on.

123
00:07:43.051 --> 00:07:47.579
This felt like a game changer to me this
is when I finally went, I get why graph qL

124
00:07:47.579 --> 00:07:51.630
matters, because I spent a long time
looking at it going, I don't know.

125
00:07:51.630 --> 00:07:54.144
It just feels like complicated rest,
right?

126
00:07:54.144 --> 00:07:58.720
This is why it matters, this convenience,
this ability to say, hey,

127
00:07:58.720 --> 00:08:04.320
as a front end developer, you don't need
to string together tons of HTTP calls.

128
00:08:04.320 --> 00:08:06.645
You can say what you want.

129
00:08:06.645 --> 00:08:11.110
And GraphQL will abstract away all
the complexity of linking up that data.

130
00:08:11.110 --> 00:08:14.049
So this is the real power
of how this stuff works.

