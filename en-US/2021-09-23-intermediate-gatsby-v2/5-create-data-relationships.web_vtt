WEBVTT

1
00:00:00.210 --> 00:00:03.980
So let's take that a step further,
let's do the same thing for our books.

2
00:00:03.980 --> 00:00:06.333
And so, I'm gonna actually just,

3
00:00:11.245 --> 00:00:15.000
I think I can do a lot of this
just really quickly like that.

4
00:00:15.000 --> 00:00:19.406
And just double check that I don't
need to change any of these, nope,

5
00:00:19.406 --> 00:00:21.060
those should all be good.

6
00:00:21.060 --> 00:00:26.130
So we've got ourselves books now going
in the same way that our authors did.

7
00:00:26.130 --> 00:00:29.919
So let's save, stop, and restart.

8
00:00:33.220 --> 00:00:35.970
We now see that we also have book.

9
00:00:37.140 --> 00:00:41.210
So if I go in, I can query the ID, ISBN.

10
00:00:41.210 --> 00:00:44.301
Let's get the name, the author.

11
00:00:48.840 --> 00:00:54.479
I am missing my series info,
though, which is a little bit odd.

12
00:00:54.479 --> 00:01:01.000
There's no book slug is why,
that's what I get for copy pasting.

13
00:01:01.000 --> 00:01:02.700
Let's try this one more time.

14
00:01:02.700 --> 00:01:05.310
Jeez, okay.

15
00:01:05.310 --> 00:01:09.434
So let's try that again, and
now there it is, there's our series, and

16
00:01:09.434 --> 00:01:12.150
series order, and we get all of our books.

17
00:01:12.150 --> 00:01:14.353
So here's each of the books and

18
00:01:14.353 --> 00:01:18.940
we can see down here that the series
order went null, all right?

19
00:01:18.940 --> 00:01:24.780
All right, so, we now have custom
data inside of our Gatsby layer.

20
00:01:24.780 --> 00:01:29.180
But there's a problem here, which is
that for my author, I'm getting this but

21
00:01:29.180 --> 00:01:32.610
what if I wanna be able to
display the author's name, right?

22
00:01:32.610 --> 00:01:38.404
I would like to be able to dig into
that and get the author name, and so

23
00:01:38.404 --> 00:01:45.736
in order to do that, we're gonna have to
create relationships between these nodes.

24
00:01:45.736 --> 00:01:51.340
So let's first talk about how
this will actually function.

25
00:01:51.340 --> 00:01:56.493
So if you imagine your data
as being in a REST API,

26
00:01:56.493 --> 00:02:04.179
what you get is you're kind of
specifying what's called foreign keys.

27
00:02:04.179 --> 00:02:06.885
If you've know anything
about data normalization,

28
00:02:06.885 --> 00:02:09.119
then you may have heard
of that term before.

29
00:02:09.119 --> 00:02:11.437
If you haven't, don't worry about it,

30
00:02:11.437 --> 00:02:15.580
it basically means in both objects
there's something that matches.

31
00:02:15.580 --> 00:02:19.974
So if we look at our author and
get the nodes, so

32
00:02:19.974 --> 00:02:23.260
here we go, the name and the slug.

33
00:02:25.181 --> 00:02:28.189
I stopped the, okay,
instead of starting that again,

34
00:02:28.189 --> 00:02:31.710
I'm just gonna go over here and
we're gonna look at the authors.

35
00:02:31.710 --> 00:02:36.372
So the authors have a slug and
this value here

36
00:02:36.372 --> 00:02:40.910
matches the value of author here, right?

37
00:02:40.910 --> 00:02:43.956
So these slugs are a unique identifier for

38
00:02:43.956 --> 00:02:47.970
each author,
this is what's called the foreign key.

39
00:02:47.970 --> 00:02:52.282
So this is our foreign key
relationship with the author data.

40
00:02:52.282 --> 00:02:56.035
So to create one of these in Gatsby,

41
00:02:56.035 --> 00:03:01.681
we're gonna use what is
called the createTypes API.

42
00:03:01.681 --> 00:03:05.418
And if you are running Gatsby,

43
00:03:05.418 --> 00:03:11.321
underneath GraphQL is
what's called a schema.

44
00:03:11.321 --> 00:03:15.661
And the schema is what gives us
the ability to generate these queries out

45
00:03:15.661 --> 00:03:20.160
here, the fact that all this is done,
this is all built off of the schema.

46
00:03:20.160 --> 00:03:24.728
So looking at the query, this is what
the schema looks like under the hood.

47
00:03:24.728 --> 00:03:28.184
So as you can see this is pretty
intimidating, there's quite a bit in here,

48
00:03:28.184 --> 00:03:30.510
but we don't need to
care about any of that.

49
00:03:30.510 --> 00:03:34.078
What we need to care about is specifically
the thing we're trying to accomplish,

50
00:03:34.078 --> 00:03:37.880
which is that we wanna add a relationship
between these two types of data.

51
00:03:37.880 --> 00:03:41.323
So I'm just gonna write a little bit
of GraphQL schema right in here, and

52
00:03:41.323 --> 00:03:44.440
the first thing that we wanna do
is we're gonna touch our author.

53
00:03:45.550 --> 00:03:48.093
Every data type in Gatsby is a node, so

54
00:03:48.093 --> 00:03:52.304
we have to implement the node
interface and then Gatsby gives us

55
00:03:52.304 --> 00:03:57.239
some convenience where it doesn't
require us to redeclare every field.

56
00:03:57.239 --> 00:04:01.433
Gatsby does something called inference
where it will look at the data that comes

57
00:04:01.433 --> 00:04:04.280
in and generate fields based on that data.

58
00:04:04.280 --> 00:04:08.598
Most of the time this is fine, sometimes
you'll have to do a little bit of messing

59
00:04:08.598 --> 00:04:12.980
around in here and that's where this
createTypes comes in very handy.

60
00:04:12.980 --> 00:04:17.711
So what I wanna do is I want my author
to have a list of their books, and

61
00:04:17.711 --> 00:04:21.410
I want books to have access
to the author object.

62
00:04:21.410 --> 00:04:25.431
So for each author I wanna
add a field called books, and

63
00:04:25.431 --> 00:04:30.511
I want this to be an array of their
books and I want this to be required.

64
00:04:30.511 --> 00:04:34.119
So you can either get an empty array or
you'll get an array of books,

65
00:04:34.119 --> 00:04:37.727
but you can't get an array of null and
you can't get the value null,

66
00:04:37.727 --> 00:04:41.390
that's what these exclamation
points here mean.

67
00:04:41.390 --> 00:04:46.598
And I want to link this, so
the way that linking works is it's gonna

68
00:04:46.598 --> 00:04:51.820
say we need to link from a field and
we need to link by another field.

69
00:04:51.820 --> 00:04:57.870
So I, in my from field,
have what my foreign key is.

70
00:04:57.870 --> 00:05:01.030
So in author my foreign key is the slug.

71
00:05:01.030 --> 00:05:06.585
And in the book we're gonna put
this inside of the author itself,

72
00:05:06.585 --> 00:05:11.539
so the book object will
actually be book.author.name.

73
00:05:11.539 --> 00:05:16.743
So when I want to link inside of the name,
it's gonna be author.slug,

74
00:05:16.743 --> 00:05:21.970
so the name and slug will live
inside of the author field on book.

75
00:05:21.970 --> 00:05:25.966
So that's how we link that one and then
let's do the same thing in reverse for

76
00:05:25.966 --> 00:05:30.250
the book, so that one's also gonna
implement the node interface.

77
00:05:30.250 --> 00:05:35.370
And this one gets an author, we're just
gonna override the author field and

78
00:05:35.370 --> 00:05:39.010
I'm gonna do that by
using the author type.

79
00:05:39.010 --> 00:05:43.861
And then this one links, it's gonna
link from author which is the the field

80
00:05:43.861 --> 00:05:49.600
that's got the slug in it, and it's
gonna link by slug on the author type.

81
00:05:49.600 --> 00:05:53.961
So we're basically telling Gatsby
this is what I want to happen,

82
00:05:53.961 --> 00:05:58.721
I want when I search for authors to
get a books field that has information

83
00:05:58.721 --> 00:06:01.440
about the books written by this author.

84
00:06:01.440 --> 00:06:05.181
And then if I'm on the book type, I want
access to information about the author of

85
00:06:05.181 --> 00:06:08.660
those books, and I'll show you
why this is cool in a second.

86
00:06:08.660 --> 00:06:11.587
I mean actually that's it,
that's all we have to do.

87
00:06:11.587 --> 00:06:14.690
So why don't we start it and I'll show
you what's cool about it right now.

88
00:06:14.690 --> 00:06:19.676
So when we're allowing for
our books to have authors and

89
00:06:19.676 --> 00:06:24.996
our authors to have books,
we could recurse this, right?

90
00:06:24.996 --> 00:06:28.608
We could just go deeper, and
deeper, and deeper, and yeah,

91
00:06:28.608 --> 00:06:33.960
actually it's kinda cool, it's a cool way
to be able to do that sort of development.

92
00:06:33.960 --> 00:06:39.107
So now that we've got this set up,
if I'm looking at my author here and

93
00:06:39.107 --> 00:06:45.610
I pull open books, I can now find the name
and ISBN of every book they've written.

94
00:06:45.610 --> 00:06:51.480
Let me get the book out for a second so
we can see this more easily.

95
00:06:51.480 --> 00:06:55.530
So here's our author query,
and we've got NK Jemisin and

96
00:06:55.530 --> 00:06:59.260
here are all the books in
this database by NK Jemisin.

97
00:06:59.260 --> 00:07:01.994
That is pretty dang cool, right?

98
00:07:01.994 --> 00:07:05.378
But let's go the other way on this, and so

99
00:07:05.378 --> 00:07:09.729
now I'm gonna say I wanna
look at all my books, and for

100
00:07:09.729 --> 00:07:14.177
my books, I want the author
to pull out their name, but

101
00:07:14.177 --> 00:07:18.390
then I also wanna pull
out their other books.

102
00:07:18.390 --> 00:07:22.950
So I'm gonna pull out all the books
that they've written with the ISBN,

103
00:07:22.950 --> 00:07:27.433
so we can get, here's The Fifth Season,
it was written by NK Jemisin,

104
00:07:27.433 --> 00:07:30.690
and here are all the other
books by NK Jemisin.

105
00:07:30.690 --> 00:07:35.347
So this is so much easier than
having to write a series of

106
00:07:35.347 --> 00:07:40.313
nested REST calls and
doing the async await dance of making

107
00:07:40.313 --> 00:07:45.100
sure all those promises have
resolved before I move on.

108
00:07:45.100 --> 00:07:48.023
This felt like a game changer to me,
this is when I finally went

109
00:07:48.023 --> 00:07:51.208
I get why GraphQL matters, cuz I spent
a long time looking at it, going,

110
00:07:51.208 --> 00:07:53.950
I don't know, it just feels
like complicated REST, right?

111
00:07:53.950 --> 00:07:58.633
This is why it matters, this convenience,
this ability to say hey,

112
00:07:58.633 --> 00:08:04.150
as a front end developer, you don't need
to string together tons of HTTP calls.

113
00:08:04.150 --> 00:08:06.059
You can say what you want and

114
00:08:06.059 --> 00:08:11.040
GraphQL will abstract away all
the complexity of linking up that data.

115
00:08:11.040 --> 00:08:14.116
So this is the real power
of how this stuff works.

