WEBVTT

1
00:00:00.200 --> 00:00:05.306
And that dear friends, I believe is the
end of the coding we're gonna do today.

2
00:00:05.306 --> 00:00:10.071
So let's talk a little bit first and
foremost, if you wanna see the lessons,

3
00:00:10.071 --> 00:00:14.248
remember that you can go and
find the lesson that we follow today is on

4
00:00:14.248 --> 00:00:18.526
frontendmasters.learnwithJason
dev/intermediate-gatsby.

5
00:00:18.526 --> 00:00:23.940
The source code for the project is at
github.com/jlengstorf/frontend-masters-in-

6
00:00:23.940 --> 00:00:26.018
termediate-gatsby-project.

7
00:00:26.018 --> 00:00:29.241
The very succinctly named repo,
and that's gonna be on

8
00:00:29.241 --> 00:00:33.161
the progress branch because the main
branch is the starting point.

9
00:00:33.161 --> 00:00:37.945
So check out that progress branch if
you wanna see what we built today.

10
00:00:37.945 --> 00:00:41.057
So, if you are looking for
what to do next,

11
00:00:41.057 --> 00:00:44.001
if you wanna figure out next steps here.

12
00:00:44.001 --> 00:00:45.207
I mean at this point,

13
00:00:45.207 --> 00:00:49.630
everything else you're gonna want to do
is gonna be a deep dive into the docks.

14
00:00:49.630 --> 00:00:53.155
If the intro to gatsby
course that we did that you

15
00:00:53.155 --> 00:00:57.927
can find it'll be under my author
profile on front end masters.

16
00:00:57.927 --> 00:01:02.091
If that doesn't get you where you wanna
go along with this one that we did today,

17
00:01:02.091 --> 00:01:05.094
then you're starting to look
at more edge casey things.

18
00:01:05.094 --> 00:01:09.214
And the docs have really good references
all the API's are there they're

19
00:01:09.214 --> 00:01:10.019
documented.

20
00:01:10.019 --> 00:01:14.211
They're usually example repos attached
where you can see how something is used,

21
00:01:14.211 --> 00:01:17.689
how you can apply different
techniques to get different outcomes.

22
00:01:17.689 --> 00:01:21.610
You can also reach out to,
the Gatsby team is pretty responsive,

23
00:01:21.610 --> 00:01:26.340
you can you can send messages to me on
Twitter, you can open issues on the repo.

24
00:01:27.675 --> 00:01:30.875
In general, the repo should be for
project questions,

25
00:01:30.875 --> 00:01:34.083
hit me up on Twitter if you
have more general questions.

26
00:01:34.083 --> 00:01:40.312
Cuz I won't check the repo often enough
for it to be a good tech support venue.

27
00:01:40.312 --> 00:01:44.676
But I do love to hear from people, and
most importantly the way that you're

28
00:01:44.676 --> 00:01:48.012
gonna level up at Gatsby is
by building things in Gatsby.

29
00:01:48.012 --> 00:01:51.128
The reason that I can do all
of this stuff that I can do,

30
00:01:51.128 --> 00:01:54.608
is because I've probably
built over 100 Gatsby sites.

31
00:01:54.608 --> 00:01:58.616
And a lot of them are our teeny tiny goofy
little things that were just toys that I

32
00:01:58.616 --> 00:02:00.350
wanted to see if I could try.

33
00:02:00.350 --> 00:02:02.632
Like what if I did this
thing with themes or

34
00:02:02.632 --> 00:02:05.047
what happened if I set
up client side routing.

35
00:02:05.047 --> 00:02:08.559
Or he how do I make auth work that
little proof of concept we did today of

36
00:02:08.559 --> 00:02:09.600
protected routes.

37
00:02:09.600 --> 00:02:12.351
All of those little projects,
building them and

38
00:02:12.351 --> 00:02:14.710
shipping them strengthens that muscle.

39
00:02:14.710 --> 00:02:18.168
It's gonna make you better as
a developer to get those reps and

40
00:02:18.168 --> 00:02:22.573
do the thing over and over again, and
try it a little bit different every time.

41
00:02:22.573 --> 00:02:25.452
And that's gonna make you a really
excellent developer, more so

42
00:02:25.452 --> 00:02:28.436
than watching every tutorial in
the world you gonna get out there and

43
00:02:28.436 --> 00:02:30.023
you gotta actually build, right?

44
00:02:30.023 --> 00:02:34.863
So please get out there, go try something,
build something, send me a message and

45
00:02:34.863 --> 00:02:37.645
and show me what you built,
I'd love to see it.

46
00:02:37.645 --> 00:02:40.975
So fun things, silly things,
serious things work things,

47
00:02:40.975 --> 00:02:42.426
I'd love to see them all.

48
00:02:42.426 --> 00:02:47.634
So hit me up on Twitter and
send me a message show me what you built,

49
00:02:47.634 --> 00:02:51.538
and I hope you have a whole
lot of fun with Gatsby.

50
00:02:51.538 --> 00:02:56.962
&gt;&gt; Is there a limit to the amount of
processing a serverless function can do?

51
00:02:56.962 --> 00:03:00.549
&gt;&gt; Every serverless function is gonna
have memory limits and time limits,

52
00:03:00.549 --> 00:03:03.210
you can work around those
with different processes.

53
00:03:03.210 --> 00:03:07.464
So for example if you wanna
run a serverless function for

54
00:03:07.464 --> 00:03:11.447
longer than I think 20
seconds is the usual limit,

55
00:03:11.447 --> 00:03:15.717
then there's a pattern
called background functions.

56
00:03:15.717 --> 00:03:21.436
Which on Netlify is you just add a dot
background to the function name and

57
00:03:21.436 --> 00:03:25.069
it'll let it run for more than 20 seconds.

58
00:03:25.069 --> 00:03:31.125
Memory varies I think AWS lambda which
backs a lot of the services out there,

59
00:03:31.125 --> 00:03:33.221
has a six megabyte limit.

60
00:03:33.221 --> 00:03:39.899
So if you're trying to do like huge
images or other types of processing,

61
00:03:39.899 --> 00:03:44.611
you may need to look at
a different solution there.

62
00:03:44.611 --> 00:03:52.811
So those are the two real big limits,
Yeah, I think there's the memory limit,

63
00:03:52.811 --> 00:03:55.113
there's the time limit, and
I think that's everything.

64
00:03:55.113 --> 00:04:00.064
&gt;&gt; What of build time, generally speaking,
how are they affecting build time?

65
00:04:00.064 --> 00:04:04.032
&gt;&gt; Serverless functions
don't affect build time,

66
00:04:04.032 --> 00:04:09.210
you're deploying those as on demand,
so they run on demand.

67
00:04:09.210 --> 00:04:14.838
So there's a little bit of a bundling
cost but the bundling cost is negligible,

68
00:04:14.838 --> 00:04:19.298
it's a few seconds and
it doesn't really scale too linearly.

69
00:04:19.298 --> 00:04:23.978
And I think that if everybody's
not already using it here in

70
00:04:23.978 --> 00:04:29.127
pretty short order, esbuild is
gonna be the de facto standard for

71
00:04:29.127 --> 00:04:31.860
bundling serverless functions.

72
00:04:31.860 --> 00:04:38.057
And we saw on Netlify that if you're
bundling several dozen functions,

73
00:04:38.057 --> 00:04:44.978
esbuild's doing it in hundreds of
milliseconds, so it's unbelievably fast.

74
00:04:44.978 --> 00:04:49.553
And yeah I would not factor built time
in at all with the use of serverless

75
00:04:49.553 --> 00:04:50.400
functions.

