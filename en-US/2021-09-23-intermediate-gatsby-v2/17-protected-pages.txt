[00:00:00]
>> The next thing that I wanna dig into is, how can we use this information, these the several function and actually build out some protected routes, how do we create a section of our site where you need to be logged in to access it. And the way that we're gonna do that is we are going to create some new files.

[00:00:21]
So, let's jump in to our pages and create one in a folder called account, and we'll call this one login.js. So, what we're doing with login.js is we are going to create a form. And we're really just a button because what we're gonna do is let people call that serverless function, a more complete service you might have a username and password that people needed to use.

[00:00:52]
But our goal here is to demonstrate not to build something that we can ship to production. Then we're gonna use this navigate from Gatsby again, and that'll be if something goes wrong. If we're already logged in, we don't wanna stay on this page and so on and so forth.

[00:01:09]
So, what I wanna do is I'm gonna start, let's build out our component. So, let's export default function login page. And in this we're gonna do a login status and a set login status. Do react use state and we'll leave this one undefined, and I'm explicitly leaving it undefined because what I want to happen here is we haven't gotten any information yet.

[00:01:44]
So, what we can do then is let's return a button, and that button is gonna say login. And what I wanna do is if we're logged in, so if you are logged in, and that login status is true. What I wanna happen instead of actually seeing anything, is we should just immediately navigate.

[00:02:10]
And I wanna navigate over to account dashboard, which we'll have to create here in a second. And I'm gonna use a feature of the Gatsby API, which is replace, and I'll show you why here in a second, and then we'll return null. So that if for whatever reason, we still have to return a component, this it just doesn't know up.

[00:02:37]
So, this is not the most full featured page and it actually won't work the way that we want it to right now, but let's get this developed or get this running and develop so that we can look at the navigation behavior. Okay, so let's make sure we're logged out so that when we do get to this point, it doesn't immediately bounce us and then let's go to account login.

[00:03:03]
So here is our account login and right now this button doesn't do anything so when I click it, nothing happens. But if I want to set my login to true, what I want to happen is it'll, yeah, that's what we want is it should automatically redirect us. So I go to account login, and we immediately go to the dashboard because we're already logged in, we don't need to see the login page.

[00:03:35]
But if I go back, you see how it took me to the homepage. The reason that we want that replace is that if we don't do that, what happens is we cut off our users in the past. And what ends up happening is if I go to the homepage, and then from here, I tried to go to the account login page.

[00:03:56]
And I go, I didn't want to do that, let me go back home. Wait, why did that work, maybe I need to refresh. We go to account login, and then I tried to go back and it's apparently, outsmarting me for some reason. What does happen when it's not replacing?

[00:04:17]
I'm not sure why it's ignoring me on this is that it will cause, you hit login. And then you go to dashboard, and then when you try to hit back, you go to login again, which redirects you to dashboard. So you put people in a dead end where they can't use the back button anymore, and it's not the end of the world but it's an inconvenience.

[00:04:36]
It's something that you don't want to force people to deal with if they don't have to. So, what we are gonna do is use this replace attribute which causes the site to give us the behavior that we wanna bounce back and forth like that. So next, let's actually wire this thing up, so I want a function called a sync function login.

[00:05:04]
And login is going to pull the status out of await, we're gonna fetch and we wanna fetch api/login. So just write to that api that we wrote, and then we'll get it out as json. And we don't actually need this I don't know why VS code keeps trying to help.

[00:05:34]
So if the status is not okay,then we know that the function failed because that function will always return okay? So if the status is not okay, we're gonna throw a new error and we're just gonna put in the status because something definitely went weird. Otherwise, we will navigate to account dashboard.

[00:06:00]
All right, so what this will do is that'll let us do that navigation, and then, I don't know why I put this up here, this needs in here. So No, I'm overthinking things, okay, here we are. So we do want that to be out here. And then I also want the ability to check the login status and that's where this login status is gonna be.

[00:06:37]
So what we're actually gonna do is right when you log in, we're going to check the login. But first, why don't we just go ahead and have this thing login so I'm gonna unclick and we will log in then I need to set this back to, don't do that.

[00:06:57]
Right, yes, that's what we wanted. So we're pulling this out. Honestly, we could put this wherever we wanted, we could put it in here. So I'm just rearranging deck chairs at that point. But so let's go to our account login page, it takes us here. And if I look at our cookies again, when I log in, there's our cookie, and we're now on the dashboard that we still need to build.

[00:07:22]
So, this is pretty dang cool, but if I go back to my Login, you see how it shows us the login even though the cookie is set. So we need one more function that's gonna check for the presence of that cookie that we can run right at the get-go.

[00:07:38]
So, we're going to do an async function called checklogin, and this one is going to take the setter from react. So, when we have a login status, we wanna set login status, we're gonna pass that right through here. And in it, we're gonna get the logged in, will defaulted to false in case something goes wrong with the call, and we will await another fetch call.

[00:08:10]
To api check auth. And after that, we will get the response as json. And then we can just set that login status. So we'll set the login status to whatever logged in is, so that's either gonna be true or false. And if it's true, we'll get redirected, so by saving this and refreshing the page.

[00:08:46]
Nothing happens because we didn't actually call this yet. So, [LAUGH] let's actually call this, let's add a helper function down here, we're gonna use react, use effect. And as soon as the page loads which we signify with an empty array, we want to call, check login and we'll pass in that set login status.

[00:09:13]
So this should set up our loop, and there it goes. So now if I go to login, when I'm logged in, it'll work and if I go to api/logout, and then I go back to account login, oops. It takes me to the login. So that's a working login page, right?

[00:09:35]
And so there's a decent amount going on here. But again, we are largely just writing react, we're not doing a lot of gatsby here. The biggest thing that we're doing with gatsby is these navigation calls. So, because the serverless functions made it so straightforward to update that cookie and check that cookie value, we don't really have to do a whole lot to manage this auth.

[00:10:02]
And again, that's sort of the power of this approach is we're able to very quickly stand up the serverless functions and get things built instead of having to think really hard about how to get them built or get clever about implementing it in the browser in a way that secure.

[00:10:18]
So next, let's go ahead and build the dashboard page. And this dashboard page is going to be fairly straightforward, I don't know that it's gonna have anything super special in it. It's actually gonna be in an almost exact duplicate in terms of a lot of the functionality to the point that I might just copy paste it.

[00:10:43]
Let's throw this over and just say cuz we still wanna check the login, so if we were gonna have a bunch of dashboard pages, I would probably say let's try this out and put this into a custom hook or something. But given that we're only using it twice, I'm kind of okay with leaving it so that it's really clear what's going on.

[00:11:03]
The difference is that we are going to instead of tracking the login, we're going to track log out and call this function log out. And after we've logged out, we want to go to the login page, not the dashboard page. So let's call this one dashboard page, we will still set our login status and set login status.

[00:11:35]
We're still gonna check the login at instantiation but with this one, instead what we'll do is we'll check if it's false, and we will head over to the login page instead. And if you get here, we wanna actually show you a little bit of a dashboard. So we're not gonna put too much on this dashboard but what we can do is say each one, wow, look at all this secret stuff, and underneath it we can show a button.

[00:12:13]
Let's get that out of there, that in there and this one we will logout. Okay, so this will be our dashboard. And so what should happen now is if I try to go to login, it should bounce me back to the dashboard. But now if I log out, cookies gone.

[00:12:37]
And I go to the login page if I try to go to the dashboard, bounce back to the login, right? So, we've got a pretty solid experience here of going around to these different pages. And we could wrap this in a kind of require off sort of thing, and then us multiple pages with a require auth component around them that just did this navigation form.

[00:13:06]
This is the basic pattern that we're looking at when we get into authenticated routes. And the main difference is that when we check this off, the logic that we run in this function, this is the logic that would need to be based on your service. So, whatever service you're using, if you're using a JSON web token, you would send that as a header and then you would need to validate that against whatever service you're using and manage off.

[00:13:34]
Or if you're using cookies, you would need to make sure that whatever details you needed to set are set. So that somebody can't spoof it, there are things that definitely need to be considered about authentication. But the mechanics of it are pretty similar, everywhere that you'll go, you need some kind of way to validate the information.

[00:13:54]
Usually that means calling out to an off-service, and once you get that confirmation or a signal that it's not a valid login, you can either bounce somebody to the login page. Or you bounce them to where they're supposed to go and just send back this, yeah I am logged in or you're not logged in.

[00:14:10]
Then the app can kinda handle the rest of that. And honestly, we could make this even more, you could send a header that would be a redirect. So, after somebody hits this function, they get redirected to where they should be. There's a lot of stuff that you can do, and there's no hard and fast rule here.

[00:14:29]
But ultimately, it comes down to a pretty straight forward flow of saying are they logged in, yes or no? And then on the client side, checking that and showing people or not showing people things based on that yes or no flag from your serverless function. And then the last thing that I wanna do is what if somebody goes to just account directly.

[00:14:55]
I don't wanna have to build an account page, so why don't we just add a client only route in here? And this is actually something pretty cool about these client only routes is that, this one's a catch all. There fallback, so if dashboard exists, dashboard will still hit dashboard.js, but something that doesn't exist the route or if I put in some nonsense, will still hit this page.

[00:15:24]
So I can, in here I'll import everything as react. From react and then we're gonna get navigate again. And then down here, we're gonna do a very lightweight component that effectively is just a redirectS. So this is gonna redirect to the account dashboard. And I could add some off detection and stuff and redirect to the right place, but because that's already there with the dashboard, I'm just gonna be okay with an additional redirect.

[00:16:01]
So, we want this to run as soon as somebody hits the page, and we will navigate to account dashboard. And again, we wanna replace true so that they don't end up with a broken back button, and we'll just return nothing. So, we want that navigation to happen immediately and it will return null otherwise.

[00:16:26]
So let's, where did I mess up? Need to call it a function cuz it's function. There we go, okay, so now I can hit. Any route, will bounce me back to where I need to be and. If I go to just the the plain account route, takes me to the dashboard.

[00:16:54]
And so then from there we can go into the gatsby config and say, all right, let's add the account to our nav here. And I don't have to go straight to login or dashboard, I can just go to account and then when I hit that, it takes me where I need to go.

[00:17:11]
So I can log out, go to Books, go to Login, right? And we have access to this whole kinda nice experience with a protected route, we've got our list of books, our list of authors. These are all pretty powerful, pretty nice setups and good flows.

