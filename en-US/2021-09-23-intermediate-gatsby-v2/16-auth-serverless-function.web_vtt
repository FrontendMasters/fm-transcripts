WEBVTT

1
00:00:00.090 --> 00:00:01.357
So, here's what I wanna do,

2
00:00:01.357 --> 00:00:05.440
I'm actually gonna use these serverless
functions in a really rudimentary way.

3
00:00:05.440 --> 00:00:07.710
I want to fake authentication.

4
00:00:07.710 --> 00:00:12.568
And the reason I wanna do that is because
the next thing that we're gonna learn is

5
00:00:12.568 --> 00:00:15.407
how to actually do
password protected pages.

6
00:00:15.407 --> 00:00:18.461
But so,
to do that,we're gonna use cookies and

7
00:00:18.461 --> 00:00:23.745
cookies are a very cool, kind of
underused especially working in the web.

8
00:00:23.745 --> 00:00:27.154
I feel like a lot of us talked ourselves
out of using cookies because they were

9
00:00:27.154 --> 00:00:30.989
hard and we didn't have servers available,
so we just throw stuff in local storage or

10
00:00:30.989 --> 00:00:32.675
things like that.

11
00:00:32.675 --> 00:00:33.665
It's not a great idea.

12
00:00:33.665 --> 00:00:35.557
Why not use a cookie?
Cookies are surprisingly

13
00:00:35.557 --> 00:00:37.051
straightforward to use.

14
00:00:37.051 --> 00:00:41.840
Especially with serverless functions,
they are really straightforward to use.

15
00:00:41.840 --> 00:00:44.500
And they give us a lot of security and
power.

16
00:00:44.500 --> 00:00:45.876
You can restrict them to HTTP only.

17
00:00:45.876 --> 00:00:48.450
You can restrict them to the same site.

18
00:00:48.450 --> 00:00:52.379
There's a lot of extra cool things that
you can do that local storage doesn't

19
00:00:52.379 --> 00:00:53.050
provide.

20
00:00:53.050 --> 00:00:55.070
Let's go ahead and build ourselves.

21
00:00:55.070 --> 00:00:57.160
I'm just gonna rename this one,
we don't need a hello function.

22
00:00:57.160 --> 00:00:59.820
So I'm gonna call one login.

23
00:00:59.820 --> 00:01:03.410
And in our login function,
we are not gonna use the request object.

24
00:01:03.410 --> 00:01:06.193
So, to get it to not complain
that I have an unused variable,

25
00:01:06.193 --> 00:01:09.922
I'm gonna lead with this underscore which
says yes, I know I'm not using that.

26
00:01:09.922 --> 00:01:17.150
Then I'm going to set a header and
the header that I wanna set is Set-Cookie.

27
00:01:18.470 --> 00:01:21.580
And to set a cookie, you give it a name.

28
00:01:21.580 --> 00:01:22.851
So, we'll give this a unique name.

29
00:01:22.851 --> 00:01:28.530
We'll call it frontend-masters-auth,
then you give it a value.

30
00:01:28.530 --> 00:01:30.354
We're gonna mark it as true.

31
00:01:30.354 --> 00:01:34.850
I also wanna set the path that it's
valid for which is the root path.

32
00:01:35.900 --> 00:01:38.120
So, we're gonna set our header.

33
00:01:38.120 --> 00:01:44.680
It's going to set a cookie called
frontend-masters-auth=true.

34
00:01:44.680 --> 00:01:45.365
And it's available to the whole site.

35
00:01:45.365 --> 00:01:47.961
We could sub domain it if we wanted to.

36
00:01:47.961 --> 00:01:54.056
Then once I've got that,
I'm just gonna send back some JSON,

37
00:01:54.056 --> 00:01:57.290
and it's gonna be a status of ok.

38
00:01:58.410 --> 00:02:02.180
So, this is a very simple
function that I've just written.

39
00:02:02.180 --> 00:02:06.902
But what it's gonna do is when I come out
here, if I look in my application, and

40
00:02:06.902 --> 00:02:11.860
I look in my cookies, you can see there's
no cookies on this local host right now.

41
00:02:12.990 --> 00:02:18.460
But when I go to log in,
it is now set a cookie for me, right?

42
00:02:18.460 --> 00:02:22.918
So, this cookie is now set and I can use
that cookie elsewhere in my site as a way

43
00:02:22.918 --> 00:02:25.538
of saying that somebody
has done something.

44
00:02:25.538 --> 00:02:27.646
And I'm gonna use this to fake auth, but

45
00:02:27.646 --> 00:02:30.196
you could also use this
to personalize content.

46
00:02:30.196 --> 00:02:33.448
Here's a really cool
approach that I've seen.

47
00:02:33.448 --> 00:02:39.478
My friend, Joel, does this,
where when you sign up to a newsletter,

48
00:02:39.478 --> 00:02:43.671
they keep a cookie that
says that you signed up and

49
00:02:43.671 --> 00:02:48.540
then they don't show you
their opt in anymore.

50
00:02:48.540 --> 00:02:51.480
Because you've already opted in,
you're part of their newsletter list.

51
00:02:51.480 --> 00:02:55.564
So they can actually show you something
different, like more articles to read or

52
00:02:55.564 --> 00:02:58.910
a download that you get access
to because you're opted in.

53
00:02:58.910 --> 00:03:02.235
There's all these cool little
personal touches that you can add and

54
00:03:02.235 --> 00:03:03.817
it doesn't take a lot, right?

55
00:03:03.817 --> 00:03:07.290
All you have to do is send
this back on the way back.

56
00:03:07.290 --> 00:03:13.410
So once we submit this, hey,
we're done, we did it, we got it.

57
00:03:13.410 --> 00:03:14.510
That's great.

58
00:03:14.510 --> 00:03:17.424
And I didn't have to
learn anything special.

59
00:03:17.424 --> 00:03:18.889
I didn't have to go figure
out how servers work,

60
00:03:18.889 --> 00:03:20.301
I'm just able to do
the serverless function.

61
00:03:22.582 --> 00:03:26.400
So next, let's make another one of these.

62
00:03:26.400 --> 00:03:30.160
But this on is gonna be a duplicate and
I want it to be a log out.

63
00:03:30.160 --> 00:03:32.710
So, how do we unset a cookie?

64
00:03:32.710 --> 00:03:39.430
And the way that you unset a cookie is
you, first we'll just negate the value.

65
00:03:39.430 --> 00:03:42.730
So even if it doesn't work,
we'll knock that value to false so

66
00:03:42.730 --> 00:03:44.700
that it would still fail.

67
00:03:44.700 --> 00:03:47.380
And then, we set an expires in the past.

68
00:03:47.380 --> 00:03:52.749
There's a specific RFC format
that you have to use for

69
00:03:52.749 --> 00:03:57.990
dates in cookies,
which is a little bit weird.

70
00:03:57.990 --> 00:04:02.943
So, it's Thursday, and
then the dates of 01 Jan,

71
00:04:02.943 --> 00:04:06.368
and then any year in the past is fine.

72
00:04:06.368 --> 00:04:13.370
And so we'll set 1970 and then a time in
this format, and we'll set it to GMT.

73
00:04:13.370 --> 00:04:17.340
And basically what we're saying is,
this cookie should be gone.

74
00:04:17.340 --> 00:04:18.250
Get rid of it.

75
00:04:18.250 --> 00:04:20.937
And just in case you don't get rid of it,
also set it to false so

76
00:04:20.937 --> 00:04:23.889
if there's any flicker in the middle
where it's still available,

77
00:04:23.889 --> 00:04:26.730
the code should still fail
if it's set to false.

78
00:04:26.730 --> 00:04:28.180
So, we can do that.

79
00:04:28.180 --> 00:04:33.003
And now if we pull open our application
again and we're in login, so

80
00:04:33.003 --> 00:04:34.960
there's our cookie.

81
00:04:34.960 --> 00:04:35.460
Let's go to log out.

82
00:04:38.865 --> 00:04:40.720
Cookies gone, right?

83
00:04:40.720 --> 00:04:41.620
Let's log in again.

84
00:04:43.230 --> 00:04:47.058
And now if I move around to other parts
of the site, let's go to the books page,

85
00:04:47.058 --> 00:04:50.480
that cookie's still there,
you see we can use that wherever we want.

86
00:04:50.480 --> 00:04:54.751
And if I go to log out, oops, API log out,

87
00:04:54.751 --> 00:04:59.360
I mean, Cookie's gone.

88
00:04:59.360 --> 00:05:02.590
Now if I go back to books,
there's no cookie there anymore, right?

89
00:05:02.590 --> 00:05:06.381
So, we've given ourselves the ability
to set and remove a cookie.

90
00:05:06.381 --> 00:05:11.141
And then the last thing that
I wanna do is I want to

91
00:05:11.141 --> 00:05:15.440
check whether or
not that we are logged in.

92
00:05:15.440 --> 00:05:18.393
So let's add one more
serverless function and

93
00:05:18.393 --> 00:05:23.628
this one is going to check auth status,
so we'll call this one check-auth.js.

94
00:05:23.628 --> 00:05:28.762
And this one is going to export
default function handler and

95
00:05:28.762 --> 00:05:32.671
that's gonna take a request and
a response.

96
00:05:32.671 --> 00:05:35.739
And that will check if logged in.

97
00:05:35.739 --> 00:05:41.511
And the way we're gonna do this is we're
gonna use the Boolean constructor to,

98
00:05:41.511 --> 00:05:46.253
or we'll call Boolean as a function
which will force whatever's

99
00:05:46.253 --> 00:05:49.463
inside of it to be a Boolean of true or
false.

100
00:05:49.463 --> 00:05:56.990
Then, we're gonna check if the req.cookies
exist at all because they might not.

101
00:05:58.350 --> 00:06:04.015
And if they do, then we'll do
req.cookies and we're gonna check for

102
00:06:04.015 --> 00:06:09.304
frontend-masters-auth, which
will give us back that value.

103
00:06:11.687 --> 00:06:15.330
And that is gonna tell us whether or
not we're logged in.

104
00:06:15.330 --> 00:06:19.543
So then what I can do is res.json and
just send that value back.

105
00:06:19.543 --> 00:06:21.565
So, let's just send back logged in.

106
00:06:22.985 --> 00:06:25.505
Okay, so,
currently we don't have a cookie.

107
00:06:25.505 --> 00:06:29.915
So I would expect that if we go to
check-auth, it should say false.

108
00:06:29.915 --> 00:06:30.925
Okay, logged in false.

109
00:06:30.925 --> 00:06:32.372
Let's go log in.

110
00:06:32.372 --> 00:06:35.012
All right, we have the cookie.

111
00:06:35.012 --> 00:06:39.482
Let's go check our auth status again,
we are logged in true, right?

112
00:06:39.482 --> 00:06:40.731
So this is the power of what we're doing.

113
00:06:40.731 --> 00:06:41.474
Let's log out.

114
00:06:45.174 --> 00:06:47.372
Check that auth again.

115
00:06:47.372 --> 00:06:48.232
Login false.

116
00:06:49.362 --> 00:06:53.012
One more time, login,
check-auth, log in true.

117
00:06:53.012 --> 00:06:58.007
I mean this is just kind of mind boggling
to me how straightforward this all

118
00:06:58.007 --> 00:07:00.988
is like,
to build these routes in a server,

119
00:07:00.988 --> 00:07:06.590
it wouldn't necessarily be harder but
it would definitely take longer.

120
00:07:06.590 --> 00:07:11.735
And I think that that's the power of this,
is you can develop at the speed of thought

121
00:07:11.735 --> 00:07:16.527
because you're not slowing down to
write boilerplate or stand up services.

122
00:07:16.527 --> 00:07:20.385
You're able to just like, I have an idea,
I need a server for that.

123
00:07:20.385 --> 00:07:23.300
Okay, let me throw a serverless
function and I can do that thing.

124
00:07:23.300 --> 00:07:25.910
It's a really nice flow.

125
00:07:25.910 --> 00:07:28.460
It's really, really helpful.

126
00:07:28.460 --> 00:07:32.988
But what we could do,
looking at the way that this login works,

127
00:07:32.988 --> 00:07:37.370
the value that we set here
could be like a JSON web token.

128
00:07:37.370 --> 00:07:42.834
It could be some details about
your user that you could then use

129
00:07:42.834 --> 00:07:48.420
to display on the page,
like somebody's username and email.

130
00:07:49.850 --> 00:07:54.126
There are a lot of ways that you
could approach this and it's,

131
00:07:54.126 --> 00:08:00.010
as far as local persisted storage goes,
as long as you're not doing very much.

132
00:08:00.010 --> 00:08:02.770
Cookies are a pretty good
way to keep a session alive.

133
00:08:02.770 --> 00:08:05.715
And I wouldn't put anything you
need to keep keep, their drafts or

134
00:08:05.715 --> 00:08:08.723
something like that but
something that's coming from a database.

135
00:08:08.723 --> 00:08:12.535
I'm going out, I'm checking to see,
all right, does auth zero?

136
00:08:12.535 --> 00:08:13.950
Does this person have an account?

137
00:08:13.950 --> 00:08:15.700
Is it valid?
Is the password correct?

138
00:08:15.700 --> 00:08:17.310
Great, give me back those details.

139
00:08:17.310 --> 00:08:21.894
Throw them in a cookie, now I don't have
to talk to auth zero anymore, right,

140
00:08:21.894 --> 00:08:24.959
until we do a logout or
the expiry of the cookie hits.

141
00:08:26.110 --> 00:08:28.550
It's a nice flow.

142
00:08:28.550 --> 00:08:30.110
It gives you a lot of flexibility.

143
00:08:30.110 --> 00:08:33.730
It keeps things pretty performing,
you can build it fast.

