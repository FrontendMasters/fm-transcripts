WEBVTT

1
00:00:00.090 --> 00:00:01.311
So here's what I wanna do,

2
00:00:01.311 --> 00:00:05.440
I'm actually gonna use the serverless
functions in a really rudimentary way.

3
00:00:05.440 --> 00:00:07.710
I want to fake authentication.

4
00:00:07.710 --> 00:00:12.336
And the reason I wanna do that is because
the next thing that we gonna learn is how

5
00:00:12.336 --> 00:00:15.475
to actually do password protected pages.

6
00:00:15.475 --> 00:00:18.099
But so to do that,
we're gonna use cookies.

7
00:00:18.099 --> 00:00:23.745
And cookies are a very cool, like kind of
underused, especially working in the web.

8
00:00:23.745 --> 00:00:27.154
I feel like a lot of us talked ourselves
out of using cookies because they were

9
00:00:27.154 --> 00:00:30.989
hard and we didn't have servers available,
so we just throw stuff in local storage or

10
00:00:30.989 --> 00:00:32.675
things like that.

11
00:00:32.675 --> 00:00:33.922
It's not a great idea.
Why not use a cookie?

12
00:00:33.922 --> 00:00:37.950
Cookies are surprisingly
straightforward to use.

13
00:00:37.950 --> 00:00:41.840
Especially with serverless functions
are really straightforward to use.

14
00:00:41.840 --> 00:00:44.500
And they give us a lot of security and
power.

15
00:00:44.500 --> 00:00:48.450
You can restrict them to http only,
you can restrict them to the same site.

16
00:00:48.450 --> 00:00:50.975
There's a lot of extra cool
things that you can do,

17
00:00:50.975 --> 00:00:53.050
that local storage doesn't provide.

18
00:00:53.050 --> 00:00:54.575
Let's go ahead and build ourselves,

19
00:00:54.575 --> 00:00:57.160
I'm just gonna rename this one
we don't need a Hello function.

20
00:00:57.160 --> 00:00:59.820
So I'm gonna call one login.

21
00:00:59.820 --> 00:01:03.410
And in our login function,
we are not gonna use the request object.

22
00:01:03.410 --> 00:01:06.889
So to get it to not complain
that I have an unused variable,

23
00:01:06.889 --> 00:01:11.160
I'm gonna lead with this _ which says yes,
I know I'm not using that.

24
00:01:11.160 --> 00:01:13.490
Then I'm going to set a header.

25
00:01:14.630 --> 00:01:17.150
And the header that I
wanna set is set cookie.

26
00:01:18.470 --> 00:01:21.580
And to set a cookie, you give it a name.

27
00:01:21.580 --> 00:01:23.400
So we'll give this a unique name.

28
00:01:23.400 --> 00:01:28.070
We'll call it frontend masters off,
then you give it a value.

29
00:01:28.070 --> 00:01:29.480
We're gonna mark it as true.

30
00:01:30.720 --> 00:01:34.850
I also wanna set the path that it's
valid for which is the root path.

31
00:01:35.900 --> 00:01:38.120
So we're gonna set our header.

32
00:01:38.120 --> 00:01:44.680
It's going to set a cookie called
frontend masters off=true.

33
00:01:44.680 --> 00:01:45.900
And it's available to the whole site.

34
00:01:45.900 --> 00:01:48.680
We could like sub domain
it if we wanted to.

35
00:01:48.680 --> 00:01:54.284
Then once I've got that,
I'm just gonna send back some JSON,

36
00:01:54.284 --> 00:01:57.260
and it's gonna be a status of Ok.

37
00:01:58.410 --> 00:02:02.180
So this is a very simple
function that I've just written.

38
00:02:02.180 --> 00:02:06.836
But what it's gonna do is when I come out
here, if I look In my application, and I

39
00:02:06.836 --> 00:02:11.860
look in my cookies, you can see there's no
cookies on this this localhost right now.

40
00:02:12.990 --> 00:02:18.374
But when I go to log in,
it is now set a cookie for me, right?

41
00:02:18.374 --> 00:02:22.405
So this cookie is now set and
I can use that cookie elsewhere in my

42
00:02:22.405 --> 00:02:26.220
my site as a way of saying that
somebody has done something.

43
00:02:26.220 --> 00:02:28.350
And I'm gonna use this to fake off,

44
00:02:28.350 --> 00:02:31.475
but you could also use this
to personalize content.

45
00:02:31.475 --> 00:02:36.721
Here's a really cool approach that
I've seen my friend Joel does this,

46
00:02:36.721 --> 00:02:39.561
where when you sign up to a newsletter.

47
00:02:39.561 --> 00:02:43.713
They keep a cookie that
says that you signed up and

48
00:02:43.713 --> 00:02:48.540
then they don't show you
their opt in anymore.

49
00:02:48.540 --> 00:02:51.480
Because you've already opted in,
you're part of their newsletter list.

50
00:02:51.480 --> 00:02:55.564
So they can actually show you something
different, like more articles to read or

51
00:02:55.564 --> 00:02:58.910
a download that you get access
to because you're opted in.

52
00:02:58.910 --> 00:03:02.790
There's all these cool little
personal touches that you can add.

53
00:03:02.790 --> 00:03:04.290
And it doesn't take a lot, right?

54
00:03:04.290 --> 00:03:07.290
Like all you have to do is send
this back on the way back.

55
00:03:07.290 --> 00:03:12.210
So o once we submit this,
like, hey, we're done.

56
00:03:12.210 --> 00:03:13.410
We did it, we got it.

57
00:03:13.410 --> 00:03:14.510
That's great.

58
00:03:14.510 --> 00:03:17.990
And I didn't have to
learn anything special.

59
00:03:17.990 --> 00:03:19.870
I didn't have to go figure
out how servers work.

60
00:03:19.870 --> 00:03:21.120
I'm just able to do
the serverless function.

61
00:03:23.298 --> 00:03:28.034
So next let's make another one of these,
but this one is gonna be a duplicate and

62
00:03:28.034 --> 00:03:30.160
I want it to be a log out.

63
00:03:30.160 --> 00:03:32.710
So how do we unset a cookie?

64
00:03:32.710 --> 00:03:39.430
And the way that you unset a cookie is
you first we'll just negate the value.

65
00:03:39.430 --> 00:03:42.765
So even if it doesn't work,
we'll knock that value to false, so

66
00:03:42.765 --> 00:03:44.700
that it would still fail.

67
00:03:44.700 --> 00:03:47.380
And then we set an expires in the past.

68
00:03:47.380 --> 00:03:52.749
There's a specific RFC format
that you have to use for

69
00:03:52.749 --> 00:03:57.990
dates in cookies,
which is a little bit weird.

70
00:03:57.990 --> 00:04:03.046
So it's Thursday, and
then the dates of 01 Jan,

71
00:04:03.046 --> 00:04:06.700
and then any year in the past is fine.

72
00:04:06.700 --> 00:04:13.370
It's also like 1970 and then a time in
this format and we'll set it to GMT.

73
00:04:13.370 --> 00:04:18.250
And basically what we're saying is, this
cookie should be gone, like get rid of it.

74
00:04:18.250 --> 00:04:20.630
And just in case you don't get
rid of it also set it to false.

75
00:04:20.630 --> 00:04:23.906
So if there's any like flicker in
the middle where it's still available,

76
00:04:23.906 --> 00:04:26.730
the code should still fail
if it's set to false.

77
00:04:26.730 --> 00:04:28.180
So we can do that.

78
00:04:28.180 --> 00:04:33.045
And now if we pull open our application
again, and we're in login, so

79
00:04:33.045 --> 00:04:34.960
there's our cookie.

80
00:04:34.960 --> 00:04:35.802
Let's go to log out.

81
00:04:38.398 --> 00:04:40.720
Cookie's gone, right?

82
00:04:40.720 --> 00:04:41.620
Let's log in again.

83
00:04:43.230 --> 00:04:48.100
And now if I move around to other parts of
the site, like let's go to the books page,

84
00:04:48.100 --> 00:04:49.710
that cookies still there.

85
00:04:49.710 --> 00:04:51.590
You see we can use that wherever we want.

86
00:04:51.590 --> 00:04:55.039
And then if I go to log out,
oops API log out,

87
00:04:55.039 --> 00:04:59.360
I mean, Cookies gone.

88
00:04:59.360 --> 00:05:02.830
Now if I go back to books,
there's no cookie there anymore, right?

89
00:05:02.830 --> 00:05:06.960
So we've given ourselves the ability
to set and remove a cookie.

90
00:05:06.960 --> 00:05:10.619
And then the last thing
that I wanna do is,

91
00:05:10.619 --> 00:05:15.440
I want to check whether or
not the that we are logged in.

92
00:05:15.440 --> 00:05:19.890
So let's add one more serverless function,
and this one is going to check off status.

93
00:05:19.890 --> 00:05:22.480
So we'll call this one checkoff.js.

94
00:05:22.480 --> 00:05:26.850
And this one is going to export
default function handler.

95
00:05:27.900 --> 00:05:32.793
And that's gonna take a request and
a response.

96
00:05:32.793 --> 00:05:35.444
And that will check if logged in.

97
00:05:35.444 --> 00:05:41.295
And the way we're gonna do this is we're
gonna use the Boolean constructor,

98
00:05:41.295 --> 00:05:46.066
we'll call Boolean as a function
which will force whatever's

99
00:05:46.066 --> 00:05:49.418
inside of it to be a Boolean of true or
false.

100
00:05:49.418 --> 00:05:54.859
And then we're gonna check if
the request cookies exist at all,

101
00:05:54.859 --> 00:05:56.990
because they might not.

102
00:05:58.350 --> 00:06:02.634
And if they do,
then we'll do wreck.cookies and

103
00:06:02.634 --> 00:06:07.124
we're gonna check for
frontend-masters-auth.

104
00:06:08.480 --> 00:06:09.709
Which will give us back that value.

105
00:06:12.371 --> 00:06:15.091
And that is gonna tell us whether or
not we're logged in.

106
00:06:15.091 --> 00:06:19.613
So then what I can do is res.json and
just send that value back, so

107
00:06:19.613 --> 00:06:22.421
let's just send back logged in, okay?

108
00:06:22.421 --> 00:06:25.505
So currently we don't have a cookie.

109
00:06:25.505 --> 00:06:29.915
So I would expect that if we go
to check off it should say false.

110
00:06:29.915 --> 00:06:30.925
Okay, logged in false.

111
00:06:30.925 --> 00:06:32.372
Let's go log in.

112
00:06:32.372 --> 00:06:35.012
All right, we have the cookie.

113
00:06:35.012 --> 00:06:37.642
Let's go check our auth status again.

114
00:06:37.642 --> 00:06:39.482
We are logged in true, right?

115
00:06:39.482 --> 00:06:41.222
So this is the power of what we're doing.

116
00:06:41.222 --> 00:06:41.813
Let's log out.

117
00:06:45.517 --> 00:06:47.372
Check that off again.

118
00:06:47.372 --> 00:06:48.232
Login false.

119
00:06:49.362 --> 00:06:53.012
One more time login,
check off, log in true.

120
00:06:53.012 --> 00:06:57.975
So I mean, this is just like kinda mind
boggling to me how straightforward

121
00:06:57.975 --> 00:07:01.017
this all is to build
these routes in a server,

122
00:07:01.017 --> 00:07:06.590
it wouldn't necessarily be harder but
it would definitely take longer.

123
00:07:06.590 --> 00:07:11.094
And I think that's the power of this,
is like you can develop at the speed of

124
00:07:11.094 --> 00:07:15.172
thought, because you're not slowing
down to write boilerplate or

125
00:07:15.172 --> 00:07:19.293
stand up services,
you're able to just like I have an idea.

126
00:07:19.293 --> 00:07:20.385
I need a server for that.

127
00:07:20.385 --> 00:07:23.300
Okay, let me throw a serverless
function and I can do that thing.

128
00:07:23.300 --> 00:07:25.910
It's a really nice flow.

129
00:07:25.910 --> 00:07:27.800
It's really helpful.

130
00:07:27.800 --> 00:07:32.617
But what we could do, looking at
at the way that this login works,

131
00:07:32.617 --> 00:07:37.370
the the value that we set here
could be like a JSON web token.

132
00:07:37.370 --> 00:07:42.622
It could be some details about
your user that you could then

133
00:07:42.622 --> 00:07:48.420
use to display on the page like
somebody's username and email.

134
00:07:49.850 --> 00:07:54.526
There are a lot of ways that you could
approach this, and it's as far as like

135
00:07:54.526 --> 00:07:58.906
local persistent storage goes as
long as you're not doing very much,

136
00:07:58.906 --> 00:08:02.770
cookies are a pretty good
way to keep a session alive.

137
00:08:02.770 --> 00:08:06.563
And I wouldn't put anything that you need
to like keep keep like their,drafts or

138
00:08:06.563 --> 00:08:08.010
something like that.

139
00:08:08.010 --> 00:08:11.165
But something that's coming from
a database like I'm going out I'm checking

140
00:08:11.165 --> 00:08:13.950
to see, all right does author zero
does this person have an account?

141
00:08:13.950 --> 00:08:15.700
Is it valid is the password correct?

142
00:08:15.700 --> 00:08:17.310
Great, give me back those details.

143
00:08:17.310 --> 00:08:17.868
Throw them in a cookie.
Now

144
00:08:17.868 --> 00:08:19.167
we're not talking about zero anymore,
right?

145
00:08:19.167 --> 00:08:24.959
Until we do a logout or
the the expiry of the cookie hits.

146
00:08:26.060 --> 00:08:28.550
It's a nice flow.

147
00:08:28.550 --> 00:08:30.110
It gives you a lot of flexibility.

148
00:08:30.110 --> 00:08:32.360
It keeps things pretty performing.

149
00:08:32.360 --> 00:08:33.730
You can build it fast

