WEBVTT

1
00:00:00.110 --> 00:00:03.290
So I'm not gonna go into the low
level of Gatsby's image optimization.

2
00:00:03.290 --> 00:00:06.254
You can go watch the section
from the intro to Gatsby course,

3
00:00:06.254 --> 00:00:08.600
if you wanna get a download on that.

4
00:00:08.600 --> 00:00:13.657
But what we're gonna do here is I want to

5
00:00:13.657 --> 00:00:18.880
inject more stuff into our data object.

6
00:00:18.880 --> 00:00:21.775
Again, using a resolver.

7
00:00:21.775 --> 00:00:26.730
So, the way that I'm gonna do this is
actually by taking advantage of what's

8
00:00:26.730 --> 00:00:32.710
called a remote file node, which is built
into the Gatsby source file system.

9
00:00:32.710 --> 00:00:34.910
So if I come out here I'm
gonna install a couple things.

10
00:00:34.910 --> 00:00:38.800
So this is the first time we're
installing a package in our workspace.

11
00:00:38.800 --> 00:00:41.300
This is different than
a normal node installation.

12
00:00:41.300 --> 00:00:45.710
And it's a little bit hard to remember
if you don't always work in monorepos.

13
00:00:45.710 --> 00:00:49.218
So, I'm probably going to screw
this up at some point today,

14
00:00:49.218 --> 00:00:53.190
but I remembered this time, so
it's yarn workspace site ad.

15
00:00:53.190 --> 00:00:58.250
That is how you install a dependency
when you were using yarn workspaces.

16
00:00:58.250 --> 00:01:00.180
And I want to add a couple here.

17
00:01:00.180 --> 00:01:05.591
I want to add node-fetch because we're
gonna make a fetch request to an API,

18
00:01:05.591 --> 00:01:09.351
and I'm going to add
gatsby-source-filesystem.

19
00:01:11.932 --> 00:01:14.120
So let's get those installed.

20
00:01:14.120 --> 00:01:18.264
And the reason this is important
is that if I run npm install,

21
00:01:18.264 --> 00:01:23.140
it's going to put that into this package,
which is not useful.

22
00:01:23.140 --> 00:01:26.182
When we run yarn add it
ends up in this package,

23
00:01:26.182 --> 00:01:30.868
which is where it needs to be in order
to build and run the site properly.

24
00:01:30.868 --> 00:01:34.602
So that's a little gotcha when
you're working with workspaces.

25
00:01:34.602 --> 00:01:37.320
You just have to remember, or
else your build will fail and

26
00:01:37.320 --> 00:01:38.990
you'll be super confused.

27
00:01:38.990 --> 00:01:42.695
And then you'll remember it and
go fix it and it'll all be fine, but

28
00:01:42.695 --> 00:01:44.780
it's a good thing to try to remember.

29
00:01:46.300 --> 00:01:52.545
So now that we've done this, we've got
the file system, we've got our node-fetch.

30
00:01:52.545 --> 00:01:56.785
And I'm gonna go into gatsby-node here and
let's import the files we need.

31
00:01:56.785 --> 00:01:59.505
So right up at the top,
I'm going to get fetch, and

32
00:01:59.505 --> 00:02:01.925
that's going to be requiring node-fetch.

33
00:02:01.925 --> 00:02:08.115
And then I'm also going to
get createremotefileNode.

34
00:02:09.140 --> 00:02:10.640
And that comes out of, oops.

35
00:02:12.330 --> 00:02:13.950
That comes out of
gatsby-source-filesystem.

36
00:02:15.710 --> 00:02:19.850
So these are the two functions that
we needed to install things for.

37
00:02:19.850 --> 00:02:21.895
And then back down to the resolvers we go.

38
00:02:21.895 --> 00:02:27.029
So in here, in the resolvers, I am
going to bring in a whole bunch of new

39
00:02:27.029 --> 00:02:32.860
things that we're gonna have to use
as part of creating remote file node.

40
00:02:32.860 --> 00:02:37.345
Because the way create remote file
node works is we actually pass all

41
00:02:37.345 --> 00:02:40.500
the helpers down into
create remote file node.

42
00:02:40.500 --> 00:02:42.240
So I'm just going to import
a whole bunch of stuff.

43
00:02:42.240 --> 00:02:44.650
So let's get the actions.

44
00:02:44.650 --> 00:02:49.010
Let's get the cache,
let's get createnodeId.

45
00:02:49.010 --> 00:02:52.400
Let's get, let's see,
we've already got createResolvers.

46
00:02:52.400 --> 00:02:58.340
So then let's get, we need the store and
we need the reporter.

47
00:02:58.340 --> 00:03:02.600
And each of these like, so
the cache is the Gatsby cache.

48
00:03:02.600 --> 00:03:07.021
The store is,
I don't even know what the store is.

49
00:03:07.021 --> 00:03:10.145
It's something that Gatsby needs and
then the reporter is,

50
00:03:10.145 --> 00:03:12.360
if we want to put
anything in the terminal.

51
00:03:12.360 --> 00:03:18.122
So these kind of warnings and other,
sorry, not those ones, but the notices

52
00:03:18.122 --> 00:03:24.415
that we can post out from Gatsby,
those are done through the reporter.

53
00:03:24.415 --> 00:03:28.519
So in here then I want
to add another field.

54
00:03:28.519 --> 00:03:33.805
So this field is going
to be called cover And

55
00:03:33.805 --> 00:03:37.562
I want this one to be a type of file and
then for the resolve,

56
00:03:37.562 --> 00:03:41.247
because we're gonna make
a request using the fetch API,

57
00:03:41.247 --> 00:03:45.737
I'm gonna make this one async and
it's gonna get that source again.

58
00:03:48.688 --> 00:03:54.961
And inside, I want to make
a request to the, let's see,

59
00:03:54.961 --> 00:04:00.991
we're gonna make a request
to the openlibrary.org.

60
00:04:00.991 --> 00:04:08.054
So openlibrary.org is super cool,
openlibrary.org.

61
00:04:08.054 --> 00:04:12.188
This is a cool project where you can
kind of look at and read a bunch

62
00:04:12.188 --> 00:04:17.620
of books like anything that's open public
domain I think is the term for it.

63
00:04:17.620 --> 00:04:20.710
And just it's all very, very cool.

64
00:04:20.710 --> 00:04:23.093
But what's really cool about
it is down here at the bottom,

65
00:04:23.093 --> 00:04:24.389
they've got developer stuff.

66
00:04:24.389 --> 00:04:26.006
And we have a web API.

67
00:04:26.006 --> 00:04:28.220
And so we can look at books, right?

68
00:04:28.220 --> 00:04:29.082
This is super cool.

69
00:04:29.082 --> 00:04:32.849
So we are able to get
books based on the ISBNs.

70
00:04:34.469 --> 00:04:38.273
And that means, we can look up the cover
of this book using the open library,

71
00:04:38.273 --> 00:04:39.370
which is great.

72
00:04:39.370 --> 00:04:43.110
So I'm going to await, a fetch call.

73
00:04:43.110 --> 00:04:45.840
And this is a big long URL.

74
00:04:45.840 --> 00:04:49.535
So I'm gonna grab the ISBN API down here.

75
00:04:49.535 --> 00:04:55.758
So this is what I want,
it is a link to get the ISBN or

76
00:04:55.758 --> 00:04:59.624
the book data based on an ISBN.

77
00:04:59.624 --> 00:05:04.069
And we're gonna again drop in source.isbn.

78
00:05:04.069 --> 00:05:11.037
So, this will give us back a response with
the request from the open library API.

79
00:05:11.037 --> 00:05:12.540
And then I wanna check if it's okay.

80
00:05:12.540 --> 00:05:16.323
So, if it's broken, if we get an error.

81
00:05:16.323 --> 00:05:20.980
So if it's not response okay,
then I'm going to.

82
00:05:20.980 --> 00:05:24.590
I don't really care if this breaks.

83
00:05:24.590 --> 00:05:30.022
So instead I'm going to say,
we'll just warn and we'll say,

84
00:05:30.022 --> 00:05:35.670
error loading details about,
let's get source.name.

85
00:05:35.670 --> 00:05:41.321
And then we can say like
got response.status,

86
00:05:41.321 --> 00:05:45.000
which is like the http status.

87
00:05:45.000 --> 00:05:49.732
So, if it's missing you would get a 404,
if it's broken we'd get a 500,

88
00:05:49.732 --> 00:05:51.062
something like that.

89
00:05:51.062 --> 00:05:53.656
And then we can say what
the status text was.

90
00:05:53.656 --> 00:05:59.730
So, this would be the like, if the status
is 404, the text would be not found.

91
00:05:59.730 --> 00:06:03.767
That's the standard HTTP text for that.

92
00:06:03.767 --> 00:06:06.087
So, we'll just give
ourselves a helpful error so

93
00:06:06.087 --> 00:06:09.583
that we can actually figure out what's
going on if something's missing.

94
00:06:09.583 --> 00:06:14.080
And then we'll just return null.

95
00:06:14.080 --> 00:06:17.220
So there will be no cover for a book
where there's an error, and that's okay.

96
00:06:17.220 --> 00:06:18.450
We don't mind if there's no cover.

97
00:06:19.560 --> 00:06:26.450
Then I can get the covers out of
response.json, which I need to await.

98
00:06:28.380 --> 00:06:32.364
So if we look at what
actually comes in here,

99
00:06:32.364 --> 00:06:37.640
looking at this,
then we know that this is hard to read.

100
00:06:37.640 --> 00:06:38.680
Let's open it in the network tab.

101
00:06:38.680 --> 00:06:44.015
This is a tip when you get an API
response, you can come into the tab

102
00:06:44.015 --> 00:06:49.070
here and look at the network and
it will preview the response.

103
00:06:49.070 --> 00:06:50.940
So it's way easier to read.

104
00:06:50.940 --> 00:06:53.340
So what I'm looking for is covers.

105
00:06:53.340 --> 00:06:55.300
Now, this is not
particularly useful [LAUGH].

106
00:06:56.720 --> 00:06:59.590
I don't know how to actually use that.

107
00:06:59.590 --> 00:07:02.255
So I had to dig into this a little bit and
try to figure it out.

108
00:07:02.255 --> 00:07:06.950
And what I did was I
looked at the book page,

109
00:07:06.950 --> 00:07:09.961
and if you view this image.

110
00:07:12.838 --> 00:07:17.950
This is the cover Id and
everything else is boilerplate.

111
00:07:17.950 --> 00:07:25.470
So if we get that cover Id, then we can
use this format to create our cover.

112
00:07:25.470 --> 00:07:29.907
So now that I've got my covers
,I can go if covers.length,

113
00:07:29.907 --> 00:07:36.550
meaning if there's at least one cover
provided because there won't always be.

114
00:07:36.550 --> 00:07:38.300
I see a question.

115
00:07:39.490 --> 00:07:43.433
&gt;&gt; So the reporter has a method to let
graphql know that there's an error with

116
00:07:43.433 --> 00:07:44.270
the resolver?

117
00:07:45.320 --> 00:07:49.528
The reporter is a way to like Gatsby know
that there was something happening in

118
00:07:49.528 --> 00:07:50.640
the build process.

119
00:07:50.640 --> 00:07:55.013
So you can do a reporter.info and
just say, I got here or

120
00:07:55.013 --> 00:08:00.143
you can do a reporter.panic and
actually fail the Gatsby build.

121
00:08:00.143 --> 00:08:02.216
It's effectively a way for

122
00:08:02.216 --> 00:08:06.710
you to communicate within
the structure of Gatsby.

123
00:08:06.710 --> 00:08:11.664
It's a extra powerful consul.lug,

124
00:08:11.664 --> 00:08:14.458
is the short answer.

125
00:08:16.883 --> 00:08:22.012
So here, now that we know that
we've got at least one cover,

126
00:08:22.012 --> 00:08:28.450
what we can do is get a, we're gonna
return a create remote file node.

127
00:08:28.450 --> 00:08:35.234
So, this is similar to create node call,
in that it will take an object,

128
00:08:35.234 --> 00:08:41.450
but you're not passing it a node,
it's gonna create the node.

129
00:08:41.450 --> 00:08:44.480
Instead, we're passing it a bunch of
stuff that it needs to create the node.

130
00:08:44.480 --> 00:08:47.250
So the first thing is, what's the URL?

131
00:08:47.250 --> 00:08:52.895
Well, we wanna use this cover,
and if you remember,

132
00:08:52.895 --> 00:08:57.510
the cover was, and covers is an array.

133
00:08:57.510 --> 00:08:59.116
So we actually have to pull out the first.

134
00:09:01.079 --> 00:09:01.659
Covers 0,

135
00:09:01.659 --> 00:09:05.662
I just pulled out the first one I'm sure
there's probably a better way to do that.

136
00:09:05.662 --> 00:09:08.234
I'm happy with this one.

137
00:09:08.234 --> 00:09:14.109
And this then,
is our URL to a remote cover.

138
00:09:14.109 --> 00:09:16.732
But we don't wanna wait
on the openlibrary.org,

139
00:09:16.732 --> 00:09:18.929
we don't want to put
a strain on their CDN.

140
00:09:18.929 --> 00:09:22.029
We wanna make a local copy and
we want to optimize it so

141
00:09:22.029 --> 00:09:25.430
that we get the fastest possible images.

142
00:09:25.430 --> 00:09:25.995
So to do that,

143
00:09:25.995 --> 00:09:28.700
we're gonna pass in all these things
that we pulled in from Gatsby.

144
00:09:28.700 --> 00:09:35.540
So the store, the cache, createNode,
the createNodeId and reporter,

145
00:09:35.540 --> 00:09:40.631
all get tossed into this
create remote file node code.

146
00:09:40.631 --> 00:09:44.135
And if there's no cover,
we're just gonna return null.

147
00:09:45.832 --> 00:09:49.987
So, no matter what,
we will resolve this function, but

148
00:09:49.987 --> 00:09:53.580
it might be empty, right and so it's okay.

149
00:09:53.580 --> 00:09:57.180
If this is not returned,
we'll just get a null response.

150
00:09:58.480 --> 00:10:00.510
So let's save that.

151
00:10:00.510 --> 00:10:03.720
And let's run it.

152
00:10:03.720 --> 00:10:05.870
But we're not quite done yet
and I'll show you why.

153
00:10:05.870 --> 00:10:09.286
So what we're doing when we
create a remote file node,

154
00:10:09.286 --> 00:10:13.540
is we are taking a file and
we're putting it into the Gatsby system.

155
00:10:15.560 --> 00:10:19.970
But by default, file nodes aren't
image like optimized images.

156
00:10:19.970 --> 00:10:24.670
File nodes are just files, you can put
anything as a file node, a JSON file.

157
00:10:24.670 --> 00:10:29.680
JavaScript file, and image, CSV,
whatever, you can put it all in there.

158
00:10:29.680 --> 00:10:34.869
And so what we'll get is, if I reload,
I get my cover, and then I get

159
00:10:34.869 --> 00:10:40.988
a bunch of information about the cover,
but none of these are like public URLs.

160
00:10:40.988 --> 00:10:43.272
And none of these are,
what did I just miss?

161
00:10:45.884 --> 00:10:50.341
Dang it, I missed one step, which is that,

162
00:10:50.341 --> 00:10:57.360
I also needed to pull out the createNode
API from actions, whoops.

163
00:10:57.360 --> 00:10:59.870
Okay, so let's rebuild one more time.

164
00:10:59.870 --> 00:11:03.019
And so looking in here,
these are details about files,

165
00:11:03.019 --> 00:11:05.530
these are not details about images.

166
00:11:05.530 --> 00:11:08.043
So, we'll be able to
query quite a bit here,

167
00:11:08.043 --> 00:11:10.490
we'll be able to get
a lot of information but

168
00:11:10.490 --> 00:11:15.310
there's not actually anything that we can
use as part of our Gatsby site, just yet.

169
00:11:15.310 --> 00:11:19.150
This is more like meta information that
would allow the site to to function but

170
00:11:19.150 --> 00:11:23.625
you can see it's like, it's put in
the cache, the cache doesn't get deployed.

171
00:11:23.625 --> 00:11:26.445
So we can't actually use this just yet.

172
00:11:26.445 --> 00:11:27.725
And it's also not optimized.

173
00:11:27.725 --> 00:11:30.640
This is just a straight up copy
of whatever was on the internet,

174
00:11:30.640 --> 00:11:32.739
which means if this is
a 15 megabyte image.

175
00:11:32.739 --> 00:11:36.440
It's a 15 megabyte image there's
no optimization done here.

176
00:11:36.440 --> 00:11:41.530
So what we need to do to make this work
is, we need to add a couple more things.

177
00:11:41.530 --> 00:11:43.467
We're gonna use those
Gatsby image plugins.

178
00:11:43.467 --> 00:11:46.654
So yarn workspace site add, and

179
00:11:46.654 --> 00:11:51.496
we're gonna bring in gatsby-plugin-image,

180
00:11:51.496 --> 00:11:58.004
gatsby-plugin-sharpe, and
gatsby-trensformer-sharp.

181
00:11:58.004 --> 00:12:02.300
And the transformer is actually
the biggest part because what this does,

182
00:12:02.300 --> 00:12:04.668
is it looks for file nodes to be created.

183
00:12:04.668 --> 00:12:09.099
Checks if they are images and
then transforms those nodes into image

184
00:12:09.099 --> 00:12:13.030
sharp nodes,
which become children of the file nodes.

185
00:12:13.030 --> 00:12:15.189
So that's what's happening under the hood.

186
00:12:15.189 --> 00:12:18.490
And now that we've actually
looked at those Gatsby API's and

187
00:12:18.490 --> 00:12:19.769
how nodes get created.

188
00:12:19.769 --> 00:12:23.645
It's not everything that's happening but
you can kind of tell like, so this is,

189
00:12:23.645 --> 00:12:27.017
it's running the createNode API,
it's setting that parent value and

190
00:12:27.017 --> 00:12:28.330
setting children values.

191
00:12:28.330 --> 00:12:31.690
So that each of these gets run
the way that we want it to.

192
00:12:31.690 --> 00:12:35.500
And kind of built into this this
graphql structure that we want.

193
00:12:35.500 --> 00:12:42.330
So, as we get these installed,
I'm gonna head over to my gatsby.config.

194
00:12:42.330 --> 00:12:45.290
And let's set up our plugins.

195
00:12:45.290 --> 00:12:51.121
Array here we're gonna
include gatsby-plugin-image,

196
00:12:51.121 --> 00:12:57.427
gatsby-plugin-sharp, and
gatsby-transformer-sharp.

197
00:12:59.652 --> 00:13:03.155
And close out that array so that it
doesn't explode, everybody's happy,

198
00:13:03.155 --> 00:13:05.246
all right, so
let's try this one more time.

199
00:13:09.023 --> 00:13:14.160
And so what this does is,
this is bringing in all the internal

200
00:13:14.160 --> 00:13:18.311
stuff that Gatsby needs
to optimize our images.

201
00:13:20.988 --> 00:13:24.155
So as this builds, now when we download
the images, which will be cached, so

202
00:13:24.155 --> 00:13:27.010
we don't have to download them twice,
which is nice.

203
00:13:27.010 --> 00:13:31.372
The plugins will kick in and
they will optimize those images now,

204
00:13:31.372 --> 00:13:34.796
which is,
the major value proposition of Gatsby.

205
00:13:39.817 --> 00:13:43.870
All right, so let's take a look again.

206
00:13:43.870 --> 00:13:45.050
And let's see what we got here.

207
00:13:45.050 --> 00:13:48.416
So inside we've got,
instead of an absolute path,

208
00:13:48.416 --> 00:13:50.717
now I can look at child image sharp.

209
00:13:50.717 --> 00:13:54.240
And I'm going to use
the Gatsby image data.

210
00:13:54.240 --> 00:13:56.701
And I could set all of these but
I'm not gonna worry about it for

211
00:13:56.701 --> 00:13:59.038
now because we're just kind of
looking at it how it works.

212
00:13:59.038 --> 00:14:07.140
So I can query this and now I actually
get back an optimized Gatsby image.

213
00:14:07.140 --> 00:14:10.816
Based on our cover data, so
if I go look at this image

214
00:14:14.663 --> 00:14:19.540
Hey, we now have a local
optimized copy of this cover.

215
00:14:19.540 --> 00:14:23.047
And if I look at one that's got a bigger
cover cuz I think that one's got a pretty,

216
00:14:23.047 --> 00:14:23.830
pretty tiny one.

217
00:14:26.330 --> 00:14:27.620
Whoa, what did I do?

218
00:14:27.620 --> 00:14:33.710
Let's look at the I think the Blake crouch
one is big, so this is a fairly big image.

219
00:14:33.710 --> 00:14:38.570
And if I come and look at this out here,
so there's the big version of it.

220
00:14:38.570 --> 00:14:44.122
And then if I go in and look at the
smaller version like here is a tiny one,

221
00:14:44.122 --> 00:14:48.857
let me grab this, And drop that,

222
00:14:48.857 --> 00:14:52.050
Gatsby created a smaller
version of that image.

223
00:14:52.050 --> 00:14:56.670
So now we have an optimized set of
cover images for different resolutions,

224
00:14:56.670 --> 00:14:58.943
different uses inside the site, and

225
00:14:58.943 --> 00:15:03.660
that means that we're able to actually
build some stuff with this, right?

226
00:15:03.660 --> 00:15:09.720
So we've now like, I wanna just kind of
reiterate how freaking cool it is that

227
00:15:09.720 --> 00:15:16.390
we were able to do all of this in such
short order with relatively low effort.

228
00:15:16.390 --> 00:15:19.750
We were able to take
advantage of Gatsby's API's.

229
00:15:19.750 --> 00:15:21.670
And I know like I say low effort.

230
00:15:21.670 --> 00:15:22.821
I know we did a lot of code here.

231
00:15:22.821 --> 00:15:27.227
Like this is not a trivial thing that
you're just gonna drop in and do.

232
00:15:27.227 --> 00:15:31.413
But compared to the alternative of
standing up your own data layer and

233
00:15:31.413 --> 00:15:34.816
figuring out how to get all
these relationships going.

234
00:15:34.816 --> 00:15:38.327
And doing the dance of making all these
requests and downloading files and

235
00:15:38.327 --> 00:15:41.500
all the things that you need
to do to get this running.

236
00:15:41.500 --> 00:15:44.620
This is so much more approachable.

237
00:15:46.150 --> 00:15:48.199
So I find this really exciting.

238
00:15:48.199 --> 00:15:50.818
So we were able to generate
a derived field, but

239
00:15:50.818 --> 00:15:53.578
not only were we able to
generate derived fields.

240
00:15:53.578 --> 00:15:57.153
We're also able to do it where we're
like hitting third party API's as

241
00:15:57.153 --> 00:15:59.308
part of generating these derived fields.

242
00:15:59.308 --> 00:16:04.520
And getting whole images down that we can
then copy and optimize and make available.

243
00:16:04.520 --> 00:16:06.630
This is a really,
really powerful workflow.

244
00:16:07.790 --> 00:16:12.160
So now that we've got all of this data,
we've got our books, we've got our

245
00:16:12.160 --> 00:16:16.350
authors, I want to build a site for
a book club and let me commit our code.

246
00:16:16.350 --> 00:16:18.360
And then we can go ahead and
start doing that.

247
00:16:20.420 --> 00:16:21.550
Let's see how much should we add?

248
00:16:21.550 --> 00:16:26.040
We added quite a bit this time, so let's
add everything, we'll say git commit and

249
00:16:26.040 --> 00:16:27.020
let's see.

250
00:16:27.020 --> 00:16:33.010
Add remote file nodes and
optimized images.

251
00:16:33.010 --> 00:16:34.354
Okay, let's push that up.

