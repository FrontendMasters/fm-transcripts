WEBVTT

1
00:00:00.110 --> 00:00:03.545
So I'm not gonna go into the low
level of Gatsby's image optimization,

2
00:00:03.545 --> 00:00:06.868
you can go watch the section from
the intro to Gatsby course if you wanna

3
00:00:06.868 --> 00:00:08.600
get a download on that.

4
00:00:08.600 --> 00:00:14.932
But what we're gonna do here
is I want to inject more

5
00:00:14.932 --> 00:00:21.575
stuff into our data object again,
using a resolver.

6
00:00:21.575 --> 00:00:26.707
So, the way that I'm going to do this is
actually by taking advantage of what's

7
00:00:26.707 --> 00:00:32.710
called a remote file node, which is built
into the Gatsby source file system.

8
00:00:32.710 --> 00:00:34.910
So if I come out here,
I'm gonna install a couple things.

9
00:00:34.910 --> 00:00:38.800
So this is the first time we're
installing a package in our workspace.

10
00:00:38.800 --> 00:00:41.300
This is different than
a normal node installation.

11
00:00:41.300 --> 00:00:45.710
And it's a little bit hard to remember
if you don't always work in mono repos.

12
00:00:45.710 --> 00:00:48.740
So I'm probably going to screw
this up at some point today, but

13
00:00:48.740 --> 00:00:50.320
I remembered this time.

14
00:00:50.320 --> 00:00:53.381
So it's yarn workspace
site add that is how

15
00:00:53.381 --> 00:00:58.250
you install a dependency when
you were using yarn workspaces.

16
00:00:58.250 --> 00:01:00.240
And I want to add a couple here.

17
00:01:00.240 --> 00:01:05.220
I want to add node fetch, because we're
going to make a fetch request to an API.

18
00:01:05.220 --> 00:01:09.210
And I'm going to add
gatsby-source-filesystem.

19
00:01:12.040 --> 00:01:14.120
So let's get those installed.

20
00:01:14.120 --> 00:01:18.339
And the reason this is important
is that if I run npm install,

21
00:01:18.339 --> 00:01:23.140
it's gonna put that into this package,
which is not useful.

22
00:01:23.140 --> 00:01:25.991
When we run yarn ad it
ends up in this package,

23
00:01:25.991 --> 00:01:30.930
which is where it needs to be in order
to build and run the site properly.

24
00:01:30.930 --> 00:01:34.660
So that's a little gotcha when
you're working with workspaces.

25
00:01:34.660 --> 00:01:37.340
You just have to remember, or
else your build will fail and

26
00:01:37.340 --> 00:01:38.990
you'll be super confused.

27
00:01:38.990 --> 00:01:41.320
And then you'll remember it and
go fix it and it'll all be fine.

28
00:01:41.320 --> 00:01:46.134
But it's a good thing to try to remember.

29
00:01:46.134 --> 00:01:49.465
So, now that we've done this,
we've got the file system.

30
00:01:49.465 --> 00:01:54.085
We've got our node fetch, and
I'm going to go into Gatsby node here and

31
00:01:54.085 --> 00:01:56.785
let's import the files we need.

32
00:01:56.785 --> 00:02:00.544
So right up at the top,
I'm going to get fetch and

33
00:02:00.544 --> 00:02:03.680
that's gonna be requiring node fetch.

34
00:02:03.680 --> 00:02:08.115
And then I'm also going to get,
create remote file node.

35
00:02:09.140 --> 00:02:13.950
And that comes out of
gatsby-source-filesystem.

36
00:02:15.710 --> 00:02:19.850
So, these are the two functions that
we needed to install things for.

37
00:02:19.850 --> 00:02:21.890
And then back down to the resolvers,
we go.

38
00:02:21.890 --> 00:02:27.350
So, in here in the resolvers, I am going
to bring in a whole bunch of new things

39
00:02:27.350 --> 00:02:32.312
that we're gonna have to use,
as part of creating a remote file node.

40
00:02:32.312 --> 00:02:35.583
Because the way create
remote file node works,

41
00:02:35.583 --> 00:02:40.510
is we actually pass all the helpers
down into create remote file nodes.

42
00:02:40.510 --> 00:02:42.240
So I'm just gonna import
a whole bunch of stuff.

43
00:02:42.240 --> 00:02:44.650
So let's get the actions.

44
00:02:44.650 --> 00:02:46.360
Let's get the cash.

45
00:02:46.360 --> 00:02:49.010
Let's get create node ID.

46
00:02:49.010 --> 00:02:52.400
Let's get let's see,
we've already got create resolvers.

47
00:02:52.400 --> 00:02:57.969
So the then let's get we need the store,
and we need the reporter and

48
00:02:57.969 --> 00:03:02.600
each of these like so
the cash is the Gatsby cash.

49
00:03:02.600 --> 00:03:07.030
The store is I don't even
know what the store is.

50
00:03:07.030 --> 00:03:08.880
It's something that Gatsby needs.

51
00:03:08.880 --> 00:03:12.430
And then, the reporter is if we
wanna put anything in the terminal.

52
00:03:12.430 --> 00:03:18.163
So these kind of warnings and other,
sorry, not those ones but the notices

53
00:03:18.163 --> 00:03:24.415
that we can post out from Gatsby
those are done through the reporter.

54
00:03:24.415 --> 00:03:28.625
So, in here then I want
to add another field.

55
00:03:28.625 --> 00:03:30.714
So this field is going to be called cover.

56
00:03:33.594 --> 00:03:36.700
And I want this one to be
a type of file and then for

57
00:03:36.700 --> 00:03:41.211
the resolve because we're gonna
make a request using the fetch API,

58
00:03:41.211 --> 00:03:45.746
I'm gonna make this one async and
it's gonna get that source again.

59
00:03:48.684 --> 00:03:54.404
And inside,
I want to make a request to let's see,

60
00:03:54.404 --> 00:04:00.540
we're gonna make a request
to the open library.org.

61
00:04:00.540 --> 00:04:04.840
So open library.org is super cool,

62
00:04:04.840 --> 00:04:08.200
let's open library.org.

63
00:04:08.200 --> 00:04:13.065
This is a cool project where you can kinda
look at and read a bunch of books like

64
00:04:13.065 --> 00:04:17.620
anything that's open Public Domain
i think is the term for it.

65
00:04:17.620 --> 00:04:20.710
And just it's all very, very cool.

66
00:04:20.710 --> 00:04:22.864
But what's really cool about
it is down here at the bottom,

67
00:04:22.864 --> 00:04:24.480
they've got developer stuff.

68
00:04:24.480 --> 00:04:28.220
And we have a web API and so
we can look up books, right?

69
00:04:28.220 --> 00:04:29.140
This is super cool.

70
00:04:29.140 --> 00:04:32.910
So we are able to get books
based on their ISP ends.

71
00:04:34.640 --> 00:04:38.280
And that means we can look up the cover
of this book using the Open Library,

72
00:04:38.280 --> 00:04:39.370
which is great.

73
00:04:39.370 --> 00:04:45.840
So I'm going to await a fetch call and
this is a big long URL.

74
00:04:45.840 --> 00:04:49.630
So I'm gonna grab the ESPN API down here.

75
00:04:49.630 --> 00:04:51.570
So this is what I want.

76
00:04:51.570 --> 00:04:58.104
It is a link to get the ISBM, or
the book data based on an ISBM and

77
00:04:58.104 --> 00:05:02.644
we're gonna again drop in source.ISBM.

78
00:05:04.250 --> 00:05:08.812
So this will give us back
a response w with the request from

79
00:05:08.812 --> 00:05:10.630
the Open Library API.

80
00:05:10.630 --> 00:05:13.934
And then I want to check if it's okay so

81
00:05:13.934 --> 00:05:19.613
if it's broken if we get an error so,
if it's not response okay,

82
00:05:19.613 --> 00:05:24.590
then I'm going to,
I don't really care if this breaks.

83
00:05:24.590 --> 00:05:30.122
So instead, I'm gonna say,
we'll just warn, and we'll say,

84
00:05:30.122 --> 00:05:35.670
error loading details about,
let's get source.name.

85
00:05:35.670 --> 00:05:40.614
And then we can say like Like God's
response dot status which is

86
00:05:40.614 --> 00:05:44.437
the like the HTTP status,
so if it's missing and

87
00:05:44.437 --> 00:05:51.170
we'd get a 404 if it's broken,
we'd get a 500, something like that.

88
00:05:51.170 --> 00:05:53.810
And then we can say what
the status text was.

89
00:05:53.810 --> 00:05:59.730
So this would be the like, if the status
is 404, the text would be not found.

90
00:05:59.730 --> 00:06:03.461
That's the standard HTTP text for that.

91
00:06:03.461 --> 00:06:08.066
So we'll just give ourselves a helpful
error so that we can actually figure out

92
00:06:08.066 --> 00:06:13.370
what's going on if something's missing,
and then we'll just return null.

93
00:06:13.370 --> 00:06:16.480
So there will be no cover for
a book where there's an error.

94
00:06:16.480 --> 00:06:18.450
And that's okay we don't
mind if there's no cover.

95
00:06:19.560 --> 00:06:26.450
Then I can get the covers out of
response.json which I need to await.

96
00:06:28.380 --> 00:06:32.481
So, if we look at what
actually comes in here,

97
00:06:32.481 --> 00:06:37.640
looking at this,
then we know that this is hard to read.

98
00:06:37.640 --> 00:06:38.680
Let's open it in the Network tab.

99
00:06:38.680 --> 00:06:41.839
This is a tip when you
get an API response,

100
00:06:41.839 --> 00:06:45.993
you can come into the tab here and
look at the network and

101
00:06:45.993 --> 00:06:50.940
it will preview the response so
it's way easier to read.

102
00:06:50.940 --> 00:06:53.340
So what I'm looking for is covers.

103
00:06:53.340 --> 00:06:57.793
Now, this is not particularly
useful [LAUGH] I don't know how to

104
00:06:57.793 --> 00:06:59.590
actually use that.

105
00:06:59.590 --> 00:07:02.390
So I had to dig into this a little bit and
try to figure it out.

106
00:07:02.390 --> 00:07:04.982
And what I did was I
looked at the book page.

107
00:07:07.463 --> 00:07:09.818
And if you view this image,

108
00:07:13.066 --> 00:07:17.950
This is the cover ID, and
everything else is boilerplate.

109
00:07:17.950 --> 00:07:25.470
So if we get that cover ID then we can
use this format to create our cover.

110
00:07:25.470 --> 00:07:30.043
So now that I've got my covers,
I can go if(covers.length),

111
00:07:30.043 --> 00:07:36.600
meaning if there's at least one cover
provided because there won't always be.

112
00:07:36.600 --> 00:07:38.270
I see a question.

113
00:07:39.370 --> 00:07:42.573
&gt;&gt; So the reporter is a method to
let graph ql know that there's

114
00:07:42.573 --> 00:07:44.120
an error with the resolver.

115
00:07:45.320 --> 00:07:49.519
&gt;&gt; The reporter is a way to let Gatsby
know that there was something happening in

116
00:07:49.519 --> 00:07:50.640
the build process.

117
00:07:50.640 --> 00:07:55.288
So you can do a reporter.info and
just say like I got here, or

118
00:07:55.288 --> 00:08:00.317
you can do a reporter.panic and
actually fail the Gatsby build.

119
00:08:00.317 --> 00:08:02.344
It's effectively a way for

120
00:08:02.344 --> 00:08:06.700
you to communicate within
the structure of Gatsby.

121
00:08:06.700 --> 00:08:17.020
It's a extra powerful
console.log is the short answer.

122
00:08:17.020 --> 00:08:22.336
So here now that we know now that
we've got at least one cover,

123
00:08:22.336 --> 00:08:28.450
what we can do is, we're gonna
return a create remote file node.

124
00:08:28.450 --> 00:08:34.743
So this is similar to a create node
call in that it will take an object,

125
00:08:34.743 --> 00:08:41.450
but it's not you're not passing it
a node it's gonna create the node.

126
00:08:41.450 --> 00:08:44.480
Instead, we're passing it a bunch of
stuff that it needs to create the node.

127
00:08:44.480 --> 00:08:47.250
So the first thing is what's the URL?

128
00:08:47.250 --> 00:08:49.700
Well, we wanna use this cover.

129
00:08:49.700 --> 00:08:57.510
And if you remember,
the cover was a, Covers is an array.

130
00:08:57.510 --> 00:09:02.520
So we actually have to pull
out the first covers zero.

131
00:09:02.520 --> 00:09:03.460
I just pull out the first one.

132
00:09:03.460 --> 00:09:05.140
I'm sure there's probably
a better way to do that.

133
00:09:06.620 --> 00:09:08.430
I'm happy with this one.

134
00:09:08.430 --> 00:09:12.394
And this then is our URL
to a remote cover but

135
00:09:12.394 --> 00:09:16.920
we don't want to wait
on the openlibrary.org.

136
00:09:16.920 --> 00:09:18.370
We don't want to put
a strain on their CDN.

137
00:09:18.370 --> 00:09:21.813
We want to make a local copy and
we want to optimize it so

138
00:09:21.813 --> 00:09:25.430
that we get the fastest possible images.

139
00:09:25.430 --> 00:09:25.995
So to do that,

140
00:09:25.995 --> 00:09:28.700
we're gonna pass in all these things
that we pulled in from Gatsby.

141
00:09:28.700 --> 00:09:34.990
So the store, the cash create node
the create node ID and reporter.

142
00:09:34.990 --> 00:09:38.710
We all get tossed into this
create remote file node call.

143
00:09:40.770 --> 00:09:43.960
And if there's no cover,
we're just gonna return null.

144
00:09:45.930 --> 00:09:51.670
So, no matter what, we will resolve
this function, but it might be empty.

145
00:09:51.670 --> 00:09:57.180
Right and so it's okay if this is not
returned, we'll just get an old response.

146
00:09:58.480 --> 00:10:03.720
So let's save that and let's run it.

147
00:10:03.720 --> 00:10:05.870
But we're not quite done yet
and I'll show you why.

148
00:10:05.870 --> 00:10:10.565
So what we're doing when we create
a remote file node is we are taking a file

149
00:10:10.565 --> 00:10:13.540
and we're putting it
into the Gatsby system.

150
00:10:15.560 --> 00:10:19.970
But by default, file nodes aren't
image like optimized images.

151
00:10:19.970 --> 00:10:24.670
File nodes are just files you can put
anything as a file node a JSON file.

152
00:10:24.670 --> 00:10:29.680
JavaScript file and image, CSV,
whatever, you can put it all in there.

153
00:10:29.680 --> 00:10:35.203
And so what we'll get is if I re load,
I get my cover, and then I get a bunch

154
00:10:35.203 --> 00:10:41.100
of information about the cover, but
none of these are like public URLs.

155
00:10:41.100 --> 00:10:43.470
And none of these
are what did I just miss.

156
00:10:47.455 --> 00:10:49.082
I missed one step,

157
00:10:49.082 --> 00:10:55.200
which is that I also needed to pull
out the Create node API from actions.

158
00:10:56.790 --> 00:10:59.870
Whoops okay, so
let's rebuild one more time.

159
00:10:59.870 --> 00:11:03.470
And so looking in here,
these are details about files.

160
00:11:03.470 --> 00:11:05.530
These are not details about images.

161
00:11:05.530 --> 00:11:07.979
So we'll be able to
query quite a bit here,

162
00:11:07.979 --> 00:11:10.497
we'll be able to get
a lot of information but

163
00:11:10.497 --> 00:11:15.310
there's not actually anything that we can
use as part of our Gatsby site just yet.

164
00:11:15.310 --> 00:11:19.139
This is more like meta information that
would allow the site to function but

165
00:11:19.139 --> 00:11:23.625
you can see it's like it's put in
the cache, the cache doesn't get deployed.

166
00:11:23.625 --> 00:11:26.445
So we can't actually use this just yet.

167
00:11:26.445 --> 00:11:27.725
And it's also not optimized.

168
00:11:27.725 --> 00:11:30.601
This is just a straight up copy
of whatever was on the Internet,

169
00:11:30.601 --> 00:11:34.090
which means if this is a 15 megabyte
image there's a 15 megabyte image.

170
00:11:34.090 --> 00:11:36.440
There's no optimization done here.

171
00:11:36.440 --> 00:11:41.530
So what we need to do to make this work
is we need to add a couple more things.

172
00:11:41.530 --> 00:11:43.570
We're gonna use those
gatsby -image-plugins.

173
00:11:43.570 --> 00:11:51.650
So yarn workspace site add, and we're
going to bring in gatsby-plugin-image.

174
00:11:51.650 --> 00:11:57.500
Gatsby-plugin-sharp and
gatsby-trends former sharp.

175
00:11:58.840 --> 00:12:02.765
And the transformer is actually the
biggest part because what this does is it

176
00:12:02.765 --> 00:12:04.618
looks for file nodes to be created.

177
00:12:04.618 --> 00:12:09.465
Checks if they are images and then
transforms those nodes into image sharp

178
00:12:09.465 --> 00:12:13.030
nodes, which become
children of the file nodes.

179
00:12:13.030 --> 00:12:15.340
So that's what's happening under the hood.

180
00:12:15.340 --> 00:12:18.448
And now that we've actually
looked at those Gatsby API's and

181
00:12:18.448 --> 00:12:21.853
how nodes get created,
it's not everything that's happening but

182
00:12:21.853 --> 00:12:25.335
you can kind of tell like so
this is it's running the Create node API.

183
00:12:25.335 --> 00:12:28.579
It's setting that parent value and
setting children values so

184
00:12:28.579 --> 00:12:31.690
that each of these gets run
the way that we want it to.

185
00:12:31.690 --> 00:12:35.500
And kind of built into this
graph qL structure that we want.

186
00:12:35.500 --> 00:12:42.330
So as we get these installed I'm
gonna head over to my gatsby-config.

187
00:12:42.330 --> 00:12:46.795
And let's set up our
plugins array here we're

188
00:12:46.795 --> 00:12:50.805
going to include gatsby-plugin image,

189
00:12:50.805 --> 00:12:56.770
gatsby-plugin-sharp and
gatsby-transformer-sharp.

190
00:12:59.850 --> 00:13:03.690
And close out our array so
it doesn't explode, everybody's happy.

191
00:13:03.690 --> 00:13:05.201
All right, so
let's try this one more time.

192
00:13:08.991 --> 00:13:14.051
And so what this does is this
is bringing in all the internal

193
00:13:14.051 --> 00:13:18.298
stuff that gatsby needs
to optimize our images.

194
00:13:20.990 --> 00:13:24.076
So as this builds, now when we download
the images which will be cached so

195
00:13:24.076 --> 00:13:27.010
we don't have to download them twice,
which is nice.

196
00:13:27.010 --> 00:13:31.490
The plugins will kick in and
they will optimize those images now,

197
00:13:31.490 --> 00:13:34.834
which is the major value
proposition of Gatsby.

198
00:13:39.784 --> 00:13:45.050
All right, so let's take a look again,
and let's see what we got here.

199
00:13:45.050 --> 00:13:48.316
So inside we've got instead
of an absolute path,

200
00:13:48.316 --> 00:13:54.240
now I can look at child image sharp, and
I'm going to use the gatsby image data.

201
00:13:54.240 --> 00:13:56.745
And I could set all of these but
I'm not going to worry about it for

202
00:13:56.745 --> 00:13:59.038
now because we're just kind of
looking at it how it works.

203
00:13:59.038 --> 00:14:03.757
So, I can query this and
now I actually get back

204
00:14:03.757 --> 00:14:08.966
an optimized Gatsby image
based on our cover data.

205
00:14:08.966 --> 00:14:10.738
So if I go look at this image.

206
00:14:14.951 --> 00:14:19.540
Hey, we now have a local
optimized copy of this cover.

207
00:14:19.540 --> 00:14:25.417
And if I look at one that's got a bigger
cover cuz I think that one's got a pretty,

208
00:14:25.417 --> 00:14:26.207
tiny one.

209
00:14:26.207 --> 00:14:27.620
Whoa, what did I do?

210
00:14:27.620 --> 00:14:30.310
Let's look at the I think
the Blake Crouch one is big.

211
00:14:30.310 --> 00:14:33.846
So this, a fairly big image and
if I come and

212
00:14:33.846 --> 00:14:38.570
look at this out here, so
there's the big version of it.

213
00:14:38.570 --> 00:14:43.320
And then if I go in and
look at the smaller version like here is

214
00:14:43.320 --> 00:14:48.183
a tiny one and grab this, And

215
00:14:48.183 --> 00:14:52.050
drop that Gatsby created
a smaller version of that image.

216
00:14:52.050 --> 00:14:56.092
So now we have an optimized set of
cover images for different resolutions,

217
00:14:56.092 --> 00:14:58.400
different uses inside the site.

218
00:14:58.400 --> 00:15:03.094
And that means that we are able to
actually build some stuff with this,

219
00:15:03.094 --> 00:15:03.660
right?

220
00:15:03.660 --> 00:15:08.540
So we've now I want to just
kind of reiterate how freaking

221
00:15:08.540 --> 00:15:12.630
cool it is that we were
able to do all of this.

222
00:15:12.630 --> 00:15:17.235
In such short order with relatively
low effort we were able to take

223
00:15:17.235 --> 00:15:19.750
advantage of Gatsby's APIs.

224
00:15:19.750 --> 00:15:22.880
And I know, like I say, low-effort
I know we did a lot of code here.

225
00:15:22.880 --> 00:15:26.929
Like this is not a trivial thing that
you're just going to drop in and do.

226
00:15:26.929 --> 00:15:31.266
But compared to the alternative of
standing up your own data layer and

227
00:15:31.266 --> 00:15:34.797
figuring out how to get all
these relationships going.

228
00:15:34.797 --> 00:15:38.316
And doing the dance of making all these
requests and downloading files and

229
00:15:38.316 --> 00:15:41.500
all the things that you need
to do to get this running.

230
00:15:41.500 --> 00:15:44.620
This is so much more approachable.

231
00:15:46.150 --> 00:15:48.290
So I find this really exciting.

232
00:15:48.290 --> 00:15:51.810
So we were able to,
like generate a derived field.

233
00:15:51.810 --> 00:15:55.341
But not only were we able to generate dry
fields, we're also able to do it where

234
00:15:55.341 --> 00:15:59.500
we're like hitting third party API's as
part of generating these derived fields.

235
00:15:59.500 --> 00:16:04.520
And getting whole images down that we can
then copy and optimize and make available.

236
00:16:04.520 --> 00:16:06.630
This is a really,
really powerful workflow.

237
00:16:07.790 --> 00:16:11.222
So now that we've got all of this data,
we've got our books,

238
00:16:11.222 --> 00:16:14.522
we've got our authors I wanna
build a site for a book club and

239
00:16:14.522 --> 00:16:18.360
let me commit our code, and
then we can go ahead and start doing that.

240
00:16:20.420 --> 00:16:21.550
Let's see how much did we add?

241
00:16:21.550 --> 00:16:22.450
We added quite a bit this time.

242
00:16:22.450 --> 00:16:25.030
So let's add everything
we'll say git commit.

243
00:16:25.030 --> 00:16:32.150
And let's see add remote file nodes and
optimized images.

244
00:16:33.300 --> 00:16:34.377
Okay, let's push that up.

