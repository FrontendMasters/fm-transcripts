[00:00:00]
>> So I'm not gonna go into the low level of Gatsby's image optimization, you can go watch the section from the intro to Gatsby course if you wanna get a download on that. But what we're gonna do here is I want to inject more stuff into our data object again, using a resolver.

[00:00:21]
So, the way that I'm going to do this is actually by taking advantage of what's called a remote file node, which is built into the Gatsby source file system. So if I come out here, I'm gonna install a couple things. So this is the first time we're installing a package in our workspace.

[00:00:38]
This is different than a normal node installation. And it's a little bit hard to remember if you don't always work in mono repos. So I'm probably going to screw this up at some point today, but I remembered this time. So it's yarn workspace site add that is how you install a dependency when you were using yarn workspaces.

[00:00:58]
And I want to add a couple here. I want to add node fetch, because we're going to make a fetch request to an API. And I'm going to add gatsby-source-filesystem. So let's get those installed. And the reason this is important is that if I run npm install, it's gonna put that into this package, which is not useful.

[00:01:23]
When we run yarn ad it ends up in this package, which is where it needs to be in order to build and run the site properly. So that's a little gotcha when you're working with workspaces. You just have to remember, or else your build will fail and you'll be super confused.

[00:01:38]
And then you'll remember it and go fix it and it'll all be fine. But it's a good thing to try to remember. So, now that we've done this, we've got the file system. We've got our node fetch, and I'm going to go into Gatsby node here and let's import the files we need.

[00:01:56]
So right up at the top, I'm going to get fetch and that's gonna be requiring node fetch. And then I'm also going to get, create remote file node. And that comes out of gatsby-source-filesystem. So, these are the two functions that we needed to install things for. And then back down to the resolvers, we go.

[00:02:21]
So, in here in the resolvers, I am going to bring in a whole bunch of new things that we're gonna have to use, as part of creating a remote file node. Because the way create remote file node works, is we actually pass all the helpers down into create remote file nodes.

[00:02:40]
So I'm just gonna import a whole bunch of stuff. So let's get the actions. Let's get the cash. Let's get create node ID. Let's get let's see, we've already got create resolvers. So the then let's get we need the store, and we need the reporter and each of these like so the cash is the Gatsby cash.

[00:03:02]
The store is I don't even know what the store is. It's something that Gatsby needs. And then, the reporter is if we wanna put anything in the terminal. So these kind of warnings and other, sorry, not those ones but the notices that we can post out from Gatsby those are done through the reporter.

[00:03:24]
So, in here then I want to add another field. So this field is going to be called cover. And I want this one to be a type of file and then for the resolve because we're gonna make a request using the fetch API, I'm gonna make this one async and it's gonna get that source again.

[00:03:48]
And inside, I want to make a request to let's see, we're gonna make a request to the open library.org. So open library.org is super cool, let's open library.org. This is a cool project where you can kinda look at and read a bunch of books like anything that's open Public Domain i think is the term for it.

[00:04:17]
And just it's all very, very cool. But what's really cool about it is down here at the bottom, they've got developer stuff. And we have a web API and so we can look up books, right? This is super cool. So we are able to get books based on their ISP ends.

[00:04:34]
And that means we can look up the cover of this book using the Open Library, which is great. So I'm going to await a fetch call and this is a big long URL. So I'm gonna grab the ESPN API down here. So this is what I want. It is a link to get the ISBM, or the book data based on an ISBM and we're gonna again drop in source.ISBM.

[00:05:04]
So this will give us back a response w with the request from the Open Library API. And then I want to check if it's okay so if it's broken if we get an error so, if it's not response okay, then I'm going to, I don't really care if this breaks.

[00:05:24]
So instead, I'm gonna say, we'll just warn, and we'll say, error loading details about, let's get source.name. And then we can say like Like God's response dot status which is the like the HTTP status, so if it's missing and we'd get a 404 if it's broken, we'd get a 500, something like that.

[00:05:51]
And then we can say what the status text was. So this would be the like, if the status is 404, the text would be not found. That's the standard HTTP text for that. So we'll just give ourselves a helpful error so that we can actually figure out what's going on if something's missing, and then we'll just return null.

[00:06:13]
So there will be no cover for a book where there's an error. And that's okay we don't mind if there's no cover. Then I can get the covers out of response.json which I need to await. So, if we look at what actually comes in here, looking at this, then we know that this is hard to read.

[00:06:37]
Let's open it in the Network tab. This is a tip when you get an API response, you can come into the tab here and look at the network and it will preview the response so it's way easier to read. So what I'm looking for is covers. Now, this is not particularly useful [LAUGH] I don't know how to actually use that.

[00:06:59]
So I had to dig into this a little bit and try to figure it out. And what I did was I looked at the book page. And if you view this image, This is the cover ID, and everything else is boilerplate. So if we get that cover ID then we can use this format to create our cover.

[00:07:25]
So now that I've got my covers, I can go if(covers.length), meaning if there's at least one cover provided because there won't always be. I see a question.
>> So the reporter is a method to let graph ql know that there's an error with the resolver.
>> The reporter is a way to let Gatsby know that there was something happening in the build process.

[00:07:50]
So you can do a reporter.info and just say like I got here, or you can do a reporter.panic and actually fail the Gatsby build. It's effectively a way for you to communicate within the structure of Gatsby. It's a extra powerful console.log is the short answer. So here now that we know now that we've got at least one cover, what we can do is, we're gonna return a create remote file node.

[00:08:28]
So this is similar to a create node call in that it will take an object, but it's not you're not passing it a node it's gonna create the node. Instead, we're passing it a bunch of stuff that it needs to create the node. So the first thing is what's the URL?

[00:08:47]
Well, we wanna use this cover. And if you remember, the cover was a, Covers is an array. So we actually have to pull out the first covers zero. I just pull out the first one. I'm sure there's probably a better way to do that. I'm happy with this one.

[00:09:08]
And this then is our URL to a remote cover but we don't want to wait on the openlibrary.org. We don't want to put a strain on their CDN. We want to make a local copy and we want to optimize it so that we get the fastest possible images.

[00:09:25]
So to do that, we're gonna pass in all these things that we pulled in from Gatsby. So the store, the cash create node the create node ID and reporter. We all get tossed into this create remote file node call. And if there's no cover, we're just gonna return null.

[00:09:45]
So, no matter what, we will resolve this function, but it might be empty. Right and so it's okay if this is not returned, we'll just get an old response. So let's save that and let's run it. But we're not quite done yet and I'll show you why. So what we're doing when we create a remote file node is we are taking a file and we're putting it into the Gatsby system.

[00:10:15]
But by default, file nodes aren't image like optimized images. File nodes are just files you can put anything as a file node a JSON file. JavaScript file and image, CSV, whatever, you can put it all in there. And so what we'll get is if I re load, I get my cover, and then I get a bunch of information about the cover, but none of these are like public URLs.

[00:10:41]
And none of these are what did I just miss. I missed one step, which is that I also needed to pull out the Create node API from actions. Whoops okay, so let's rebuild one more time. And so looking in here, these are details about files. These are not details about images.

[00:11:05]
So we'll be able to query quite a bit here, we'll be able to get a lot of information but there's not actually anything that we can use as part of our Gatsby site just yet. This is more like meta information that would allow the site to function but you can see it's like it's put in the cache, the cache doesn't get deployed.

[00:11:23]
So we can't actually use this just yet. And it's also not optimized. This is just a straight up copy of whatever was on the Internet, which means if this is a 15 megabyte image there's a 15 megabyte image. There's no optimization done here. So what we need to do to make this work is we need to add a couple more things.

[00:11:41]
We're gonna use those gatsby -image-plugins. So yarn workspace site add, and we're going to bring in gatsby-plugin-image. Gatsby-plugin-sharp and gatsby-trends former sharp. And the transformer is actually the biggest part because what this does is it looks for file nodes to be created. Checks if they are images and then transforms those nodes into image sharp nodes, which become children of the file nodes.

[00:12:13]
So that's what's happening under the hood. And now that we've actually looked at those Gatsby API's and how nodes get created, it's not everything that's happening but you can kind of tell like so this is it's running the Create node API. It's setting that parent value and setting children values so that each of these gets run the way that we want it to.

[00:12:31]
And kind of built into this graph qL structure that we want. So as we get these installed I'm gonna head over to my gatsby-config. And let's set up our plugins array here we're going to include gatsby-plugin image, gatsby-plugin-sharp and gatsby-transformer-sharp. And close out our array so it doesn't explode, everybody's happy.

[00:13:03]
All right, so let's try this one more time. And so what this does is this is bringing in all the internal stuff that gatsby needs to optimize our images. So as this builds, now when we download the images which will be cached so we don't have to download them twice, which is nice.

[00:13:27]
The plugins will kick in and they will optimize those images now, which is the major value proposition of Gatsby. All right, so let's take a look again, and let's see what we got here. So inside we've got instead of an absolute path, now I can look at child image sharp, and I'm going to use the gatsby image data.

[00:13:54]
And I could set all of these but I'm not going to worry about it for now because we're just kind of looking at it how it works. So, I can query this and now I actually get back an optimized Gatsby image based on our cover data. So if I go look at this image.

[00:14:14]
Hey, we now have a local optimized copy of this cover. And if I look at one that's got a bigger cover cuz I think that one's got a pretty, tiny one. Whoa, what did I do? Let's look at the I think the Blake Crouch one is big. So this, a fairly big image and if I come and look at this out here, so there's the big version of it.

[00:14:38]
And then if I go in and look at the smaller version like here is a tiny one and grab this, And drop that Gatsby created a smaller version of that image. So now we have an optimized set of cover images for different resolutions, different uses inside the site.

[00:14:58]
And that means that we are able to actually build some stuff with this, right? So we've now I want to just kind of reiterate how freaking cool it is that we were able to do all of this. In such short order with relatively low effort we were able to take advantage of Gatsby's APIs.

[00:15:19]
And I know, like I say, low-effort I know we did a lot of code here. Like this is not a trivial thing that you're just going to drop in and do. But compared to the alternative of standing up your own data layer and figuring out how to get all these relationships going.

[00:15:34]
And doing the dance of making all these requests and downloading files and all the things that you need to do to get this running. This is so much more approachable. So I find this really exciting. So we were able to, like generate a derived field. But not only were we able to generate dry fields, we're also able to do it where we're like hitting third party API's as part of generating these derived fields.

[00:15:59]
And getting whole images down that we can then copy and optimize and make available. This is a really, really powerful workflow. So now that we've got all of this data, we've got our books, we've got our authors I wanna build a site for a book club and let me commit our code, and then we can go ahead and start doing that.

[00:16:20]
Let's see how much did we add? We added quite a bit this time. So let's add everything we'll say git commit. And let's see add remote file nodes and optimized images. Okay, let's push that up.

