WEBVTT

1
00:00:00.100 --> 00:00:04.494
The last thing that I wanna show is I
wanna show how to manage environment

2
00:00:04.494 --> 00:00:08.378
variables in Gatsby because it's,
very straightforward but

3
00:00:08.378 --> 00:00:11.320
there's a little bit of
a mental model around.

4
00:00:12.720 --> 00:00:17.215
Really all the static site generators,
anything that builds client side code

5
00:00:17.215 --> 00:00:21.644
usually has a convention for the
difference between an environment variable

6
00:00:21.644 --> 00:00:23.977
that should be available to the client.

7
00:00:23.977 --> 00:00:26.653
And one that should only be
available in the build process and

8
00:00:26.653 --> 00:00:29.880
in server less functions,
and Gatsby is no exception.

9
00:00:29.880 --> 00:00:36.300
So what we can do for this is I wanna
create a couple environment variables and

10
00:00:36.300 --> 00:00:40.540
I'll start by just having
a let's create a page.

11
00:00:40.540 --> 00:00:45.563
And our page is going to be called nvs.js.

12
00:00:45.563 --> 00:00:51.819
And so I want to import everything
is react from react and

13
00:00:51.819 --> 00:00:59.020
then we're going to export default
function and various page.

14
00:01:00.560 --> 00:01:05.060
And what I wanna do on this
page is just return details

15
00:01:05.060 --> 00:01:08.860
about what the environment variables are.

16
00:01:08.860 --> 00:01:11.450
So this is huge caveat here.

17
00:01:11.450 --> 00:01:14.010
What we're doing here is for
demo purposes.

18
00:01:14.010 --> 00:01:15.590
This is actually a terrible idea.

19
00:01:15.590 --> 00:01:18.850
Don't share your environment
variables publicly on your website.

20
00:01:21.140 --> 00:01:26.012
Now, an important thing to note is
that anything that is available to

21
00:01:26.012 --> 00:01:29.500
the client side is
embedded in public code.

22
00:01:29.500 --> 00:01:34.148
So if you put an API key that shouldn't
be public Into your Gatsby public

23
00:01:34.148 --> 00:01:36.050
environment variables.

24
00:01:36.050 --> 00:01:40.640
Someone can go inspect your bundle and
find that key.

25
00:01:40.640 --> 00:01:45.049
So it's really important that you
only expose things to Gatsby on

26
00:01:45.049 --> 00:01:48.110
the client side that
can be publicly shared.

27
00:01:48.110 --> 00:01:52.823
Because anything that you do will
be put into the code as a publicly

28
00:01:52.823 --> 00:01:56.350
available environment variable.

29
00:01:56.350 --> 00:01:59.920
So Let's just give ourselves a header
we'll say environment variables.

30
00:02:01.380 --> 00:02:05.490
And then down here I'm going
to just we're gonna dump two.

31
00:02:05.490 --> 00:02:10.910
So the first one is gonna be
called Gatsby public value.

32
00:02:10.910 --> 00:02:17.300
And we wanna show process dot
m dot Gatsby public value.

33
00:02:18.490 --> 00:02:21.770
And then the other one that we wanna
show is going to be called secret value.

34
00:02:24.945 --> 00:02:29.120
And these are two separate kinds of
environment variables in Gatsby.

35
00:02:29.120 --> 00:02:34.190
The first kind is prefixed
with Gatsby underscore.

36
00:02:34.190 --> 00:02:38.635
This is a signal to Gatsby B that
this variable is allowed to be

37
00:02:38.635 --> 00:02:40.645
on the client site.

38
00:02:40.645 --> 00:02:44.685
And this is a really important thing to
note because it's effectively an opt in.

39
00:02:44.685 --> 00:02:48.249
You're saying by prefixing this
environment variable with Gatsby

40
00:02:48.249 --> 00:02:49.480
underscore.

41
00:02:49.480 --> 00:02:52.610
I am acknowledging that I am
about to make this value public.

42
00:02:52.610 --> 00:02:57.080
It's going to go into my source,
bundle secret value down here, though.

43
00:02:57.080 --> 00:02:58.570
Gatsby is not gonna pick that up.

44
00:02:58.570 --> 00:03:01.335
So I'm actually expecting
that once we set these,

45
00:03:01.335 --> 00:03:03.470
this one shouldn't show me anything.

46
00:03:05.110 --> 00:03:06.390
But right now they're not set at all.

47
00:03:06.390 --> 00:03:07.900
So let's set some environment variable.

48
00:03:07.900 --> 00:03:11.104
So I'm gonna M set Gatsby public.

49
00:03:12.474 --> 00:03:16.554
Value and
I wanna set that to this is okay to share.

50
00:03:20.505 --> 00:03:26.386
Then I'm gonna run it again and
set secret value,

51
00:03:26.386 --> 00:03:33.120
this is a secret right, so
these are just placeholders.

52
00:03:33.120 --> 00:03:34.490
These aren't real environment variables.

53
00:03:34.490 --> 00:03:39.980
But this is how you would also
store your say, API token.

54
00:03:39.980 --> 00:03:42.337
If you were gonna read from GitHub or

55
00:03:42.337 --> 00:03:46.658
you wanted to send email with a service
like mail gun or send grid or

56
00:03:46.658 --> 00:03:51.590
something, you would have an API
key that identifies your account.

57
00:03:51.590 --> 00:03:52.970
And those need to stay secret.

58
00:03:52.970 --> 00:03:56.580
So those would not be
prefixed with Gatsby.

59
00:03:56.580 --> 00:04:01.332
And another thing that I'm doing here
is I'm using the the Netlify COI to set

60
00:04:01.332 --> 00:04:06.082
these because one of the things that is
a pain to me at least is trying to manage

61
00:04:06.082 --> 00:04:11.310
different dot n files and then like so I'm
working on a site and I've got my dot env.

62
00:04:11.310 --> 00:04:12.103
And then I deploy and

63
00:04:12.103 --> 00:04:15.180
then the site fails because
the environment variables aren't set.

64
00:04:15.180 --> 00:04:17.439
And then I like share it
with my co worker, and

65
00:04:17.439 --> 00:04:21.750
they can't get it running because they
don't have the environment variables.

66
00:04:21.750 --> 00:04:22.873
So by using the COI,

67
00:04:22.873 --> 00:04:27.640
what we're actually doing is we're
setting it at the project level.

68
00:04:27.640 --> 00:04:32.618
So when I ran this COI command what
actually ended up happening is

69
00:04:32.618 --> 00:04:36.303
in my project when I go to the build and
deploy and

70
00:04:36.303 --> 00:04:40.011
then environment,
these get set from the COI.

71
00:04:40.011 --> 00:04:42.962
And then what's even cooler is
what I'm about to show you here

72
00:04:42.962 --> 00:04:47.920
is when I run netlify dev Look at that,
from the site.

73
00:04:49.480 --> 00:04:53.470
From app.netlify.com these got
pulled down for local depth.

74
00:04:53.470 --> 00:04:57.453
So it'll also pick up dot n file so that
you don't have to like write a dot n or

75
00:04:57.453 --> 00:04:58.602
anything like that.

76
00:04:58.602 --> 00:05:02.128
But it is so nice to just set my
environment variables once and

77
00:05:02.128 --> 00:05:06.416
then not have to think about if I share
this site if I publish it environment

78
00:05:06.416 --> 00:05:07.744
variables are there.

79
00:05:07.744 --> 00:05:10.957
If I send it to a co worker and
they're on my netlify account,

80
00:05:10.957 --> 00:05:13.490
environment variables are already there.

81
00:05:13.490 --> 00:05:16.231
So all these things that
somebody would need are,

82
00:05:16.231 --> 00:05:19.470
they're all like managed
in a very nice way.

83
00:05:19.470 --> 00:05:21.327
So let's go check out
this inverse page and

84
00:05:21.327 --> 00:05:23.670
let's see if we got the expected outcome.

85
00:05:23.670 --> 00:05:26.210
And we did look so Gatsby public value.

86
00:05:26.210 --> 00:05:29.260
Okay, that's what I expected.

87
00:05:29.260 --> 00:05:32.546
We can see this, and it would show
up in the source code as well,

88
00:05:32.546 --> 00:05:35.600
if we were to use this somewhere
in like a react component.

89
00:05:36.970 --> 00:05:38.920
Secret value, though, is empty.

90
00:05:38.920 --> 00:05:40.050
It's not shared.

91
00:05:40.050 --> 00:05:44.423
And the reason that this works
is that what Gatsby is doing at

92
00:05:44.423 --> 00:05:49.800
build time is it's actually
replacing these values wholesale.

93
00:05:49.800 --> 00:05:55.130
So it is going in and looking for
process dot m dot Gatsby public value.

94
00:05:55.130 --> 00:05:58.490
And it will then remove this entirely.

95
00:05:58.490 --> 00:05:59.947
So the source code,

96
00:05:59.947 --> 00:06:05.020
what's actually being published
here is not this, it's the value.

97
00:06:08.010 --> 00:06:09.240
It's like that, right?

98
00:06:09.240 --> 00:06:12.160
So that's what's being done and
what's being shared.

99
00:06:12.160 --> 00:06:15.001
So this is a very cool process where,

100
00:06:15.001 --> 00:06:20.280
you basically said if it's prefixed
with Gatsby got to grab it.

101
00:06:20.280 --> 00:06:25.522
Another caveat to this, is that that
means that you can't do things like this,

102
00:06:25.522 --> 00:06:29.044
like Gatsby, public value,
equals process.env,

103
00:06:29.044 --> 00:06:34.146
unless they've changed this recently,
because this won't get picked up.

104
00:06:40.276 --> 00:06:45.179
Maybe they rewrote that it used to be that
it was it was like wholesale match like

105
00:06:45.179 --> 00:06:47.350
process dot and had to be present.

106
00:06:47.350 --> 00:06:51.370
But that's the thing to keep in mind
because that does happen in other

107
00:06:51.370 --> 00:06:53.410
frameworks like.

108
00:06:53.410 --> 00:06:58.330
I think next has that issue where you need
to use the whole life process.mstring.

109
00:06:58.330 --> 00:07:04.210
But it looks like Gatsby fixed it so good
for them, one less thing to worry about.

110
00:07:04.210 --> 00:07:07.808
So, the other thing though is that
once you've set an environment

111
00:07:07.808 --> 00:07:12.388
variable like this, you do wanna be able
to access it in your Serverless functions.

112
00:07:12.388 --> 00:07:15.383
Because that's what serverless
functions are there for

113
00:07:15.383 --> 00:07:19.170
is to do work with sensitive
details because they're secure.

114
00:07:19.170 --> 00:07:24.438
Nobody can get the code inside of
a serverless function unless it's like,

115
00:07:24.438 --> 00:07:28.720
unless they have access to
logging something out of it.

116
00:07:28.720 --> 00:07:31.283
So if you write the code and
you don't log any of your secrets,

117
00:07:31.283 --> 00:07:32.720
you can use them in here.

118
00:07:32.720 --> 00:07:35.020
And no one will be able to get at him.

119
00:07:35.020 --> 00:07:38.300
So it's a good way to do like secure
form submissions or sending mail or

120
00:07:38.300 --> 00:07:39.700
things like that.

121
00:07:39.700 --> 00:07:43.119
So if I create a API
call called n vair and

122
00:07:43.119 --> 00:07:47.992
this one is gonna export
default function handler, and

123
00:07:47.992 --> 00:07:54.700
we'll get a, we don't want to use
the rest, so we'll use the res.

124
00:07:54.700 --> 00:07:59.680
And then in here, I'm going to res.Json.

125
00:07:59.680 --> 00:08:03.845
And let's just get
the same thing from here.

126
00:08:07.573 --> 00:08:10.071
So we don't have to
retype all of this out.

127
00:08:20.389 --> 00:08:25.240
Okay, so
that is going to give us our values back.

128
00:08:25.240 --> 00:08:28.590
And again, big disclaimer,
this is a terrible idea.

129
00:08:28.590 --> 00:08:32.310
Don't return your environment
variables from a call.

130
00:08:32.310 --> 00:08:34.350
Looks like I need to restart to
get that function to pick up.

131
00:08:36.210 --> 00:08:37.050
It's not plural.

132
00:08:37.050 --> 00:08:38.370
That's what's wrong.

133
00:08:38.370 --> 00:08:39.190
There we go.

134
00:08:39.190 --> 00:08:42.298
So we can see that in
the serverless function,

135
00:08:42.298 --> 00:08:45.260
the environment variable is there.

136
00:08:45.260 --> 00:08:48.252
So this is how we can work
with these private values,

137
00:08:48.252 --> 00:08:53.640
like if I need to make a privileged call,
I would do it in a serverless function.

138
00:08:53.640 --> 00:08:58.320
And then I can return the results
of that without exposing my keys.

139
00:08:58.320 --> 00:09:01.767
So this is another way that that server
less functions kind of level you up

140
00:09:01.767 --> 00:09:05.553
as a developer as, they give you access
to do this sort of thing that otherwise,

141
00:09:05.553 --> 00:09:07.265
you'd have to go stand up a server.

142
00:09:07.265 --> 00:09:10.620
And you'd have to deal with all these
other things that there's nothing

143
00:09:10.620 --> 00:09:14.470
inherently wrong with them, but it's just
one more chore that you have to do before

144
00:09:14.470 --> 00:09:16.490
you can solve the problem at hand.

145
00:09:16.490 --> 00:09:20.567
And what I like about serverless functions
is we were just here we can just do

146
00:09:20.567 --> 00:09:21.681
the thing, right?

147
00:09:21.681 --> 00:09:27.480
So this then get this set up if
we wanna get add everything.

148
00:09:27.480 --> 00:09:34.170
And let's get commit,
we'll say add and their demo.

149
00:09:34.170 --> 00:09:39.980
It's, Just gonna add up big old
like this is not a great idea.

150
00:09:39.980 --> 00:09:40.940
Don't do this.

151
00:09:40.940 --> 00:09:44.879
So let's push and
we'll see when we go back to

152
00:09:44.879 --> 00:09:50.220
our deployments here that
it's already building.

153
00:09:50.220 --> 00:09:52.910
And it's gonna pull in our
environment variables.

154
00:09:52.910 --> 00:09:57.570
And we will get the same output on
the client side and this should happen.

155
00:09:57.570 --> 00:09:58.620
Hopefully we'll see how it goes.

156
00:09:58.620 --> 00:10:02.480
It should happen in about a minute
because the cache is warm.

157
00:10:03.530 --> 00:10:05.391
While we're waiting for this to build,

158
00:10:05.391 --> 00:10:09.070
does anybody have any questions because
we are starting to come to the end here.

159
00:10:11.450 --> 00:10:14.572
We're gonna do some further resources and
q&amp;a and

160
00:10:14.572 --> 00:10:17.120
then we're gonna call this thing a wrap.

161
00:10:17.120 --> 00:10:19.900
So if you've got questions for
today, now's the time

162
00:10:19.900 --> 00:10:22.819
&gt;&gt; The serverless functions piece kind of

163
00:10:22.819 --> 00:10:28.215
lifted their mental blocks around
the power of serverless functions and

164
00:10:28.215 --> 00:10:32.740
like cookies and
mental block around working through that.

165
00:10:33.940 --> 00:10:37.892
&gt;&gt; No joke when I,
started working with serverless functions,

166
00:10:37.892 --> 00:10:43.410
I think before I picked them up, I had in
my head, that there was just a ceiling.

167
00:10:43.410 --> 00:10:47.765
To what I was capable of unless I
wanted to go and be a full stack Dev.

168
00:10:47.765 --> 00:10:51.352
And I've been a full stack dev
the beginning of my career

169
00:10:51.352 --> 00:10:54.470
was actually more on the PHP MySQL side.

170
00:10:54.470 --> 00:10:59.771
And as I moved more into the front end,
I just found that I preferred that.

171
00:10:59.771 --> 00:11:03.626
I preferred working on the front
end It made me I don't know,

172
00:11:03.626 --> 00:11:06.350
it was just more fun for me, I guess.

173
00:11:06.350 --> 00:11:11.760
And so I would get to this certain
point in any project where I would just

174
00:11:11.760 --> 00:11:16.910
start looking at the tasks and
I'd be like, this isn't worth it.

175
00:11:16.910 --> 00:11:19.500
I don't wanna go that
far back into the stack.

176
00:11:19.500 --> 00:11:23.578
So whatever idea I had, I'd start talking
myself out of it, and start convincing

177
00:11:23.578 --> 00:11:27.063
myself that what I wanted to do was
was too ambitious, too expensive,

178
00:11:27.063 --> 00:11:31.560
too much time and just not worthy,
you will have a different idea right?

179
00:11:31.560 --> 00:11:36.409
When I adopted server less functions,
it was like this fog cleared and

180
00:11:36.409 --> 00:11:39.214
suddenly all of my ideas were possible.

181
00:11:39.214 --> 00:11:44.787
And so we've been able to do Just so
much goofy fun stuff we good example of,

182
00:11:44.787 --> 00:11:49.920
like serverless functions,
unblocking things is we wanted to build

183
00:11:49.920 --> 00:11:55.980
this thing for explorers where you could
like take courses and learn stuff.

184
00:11:55.980 --> 00:11:58.216
In order to do this,
I needed like I wanted OAuth,

185
00:11:58.216 --> 00:11:59.670
I wanted you to have an account.

186
00:11:59.670 --> 00:12:02.310
So we needed to set up
this OAuth workflow.

187
00:12:02.310 --> 00:12:04.470
Well, turns out that was
server less functions.

188
00:12:04.470 --> 00:12:06.470
I did this in three functions.

189
00:12:06.470 --> 00:12:10.741
And now I've got actual login and
I can go and have a dashboard, and

190
00:12:10.741 --> 00:12:16.200
all this apparently I achieved something
in my [LAUGH] I did something I guess.

191
00:12:16.200 --> 00:12:21.184
But I can see like now completed tasks in
jamstack explorers and I've like earned

192
00:12:21.184 --> 00:12:26.108
a certificate and downloading the
certificate is also a serverless function.

193
00:12:26.108 --> 00:12:30.221
We take your name and then we
generate a I think it's an SVG file,

194
00:12:30.221 --> 00:12:33.435
turn that into a PDF and
then we return that to you.

195
00:12:33.435 --> 00:12:37.377
And we with the missions out here
we're doing checks to see like,

196
00:12:37.377 --> 00:12:42.536
when you watch one of these, we're sending
off serverless function calls to track,

197
00:12:42.536 --> 00:12:44.987
how many seconds of it have you watched.

198
00:12:44.987 --> 00:12:48.680
All of these things are things that in my
mind, were like, that's too much work.

199
00:12:48.680 --> 00:12:51.130
I am not gonna build a server
that can manage that.

200
00:12:51.130 --> 00:12:55.260
But with serverless functions, each one
of these things is one tiny function.

201
00:12:55.260 --> 00:12:58.824
I don't think any function on this
project is more than a dozen or

202
00:12:58.824 --> 00:13:00.970
maybe two dozen lines of code.

203
00:13:00.970 --> 00:13:05.600
And that gives us the ability
to just build whatever we want.

204
00:13:05.600 --> 00:13:07.450
I'm completely unblocked.

205
00:13:07.450 --> 00:13:11.283
And so
if you wanna see some more like ambitious,

206
00:13:11.283 --> 00:13:16.520
like real world projects,
this is a good one the netlify explorers

207
00:13:16.520 --> 00:13:22.060
repo has a bunch of functions in it of,
here's how we handle our auth.

208
00:13:22.060 --> 00:13:25.993
And here's how we do certificates and
here's how we're checking whether or

209
00:13:25.993 --> 00:13:28.836
not you had an achievement,
sending off reward stuff,

210
00:13:28.836 --> 00:13:31.805
all sorts of funding things
that we can do in here.

211
00:13:31.805 --> 00:13:35.405
And all of that is possible with
serverless functions in a way that it

212
00:13:35.405 --> 00:13:39.134
wouldn't have been or would have
been significantly more complex for

213
00:13:39.134 --> 00:13:43.240
us to build had we tried to stand up
like an Explorer's micro service.

214
00:13:43.240 --> 00:13:47.310
That ran all of those as
one kind of back end.

215
00:13:47.310 --> 00:13:49.410
So yeah, It really does.

216
00:13:50.510 --> 00:13:54.945
I don't know I just I feel like
it gave me extra power like,

217
00:13:54.945 --> 00:13:59.494
instead of feeling like being
a front end dev has a ceiling.

218
00:13:59.494 --> 00:14:04.023
Now I feel like being a front
end dev is a superpower because

219
00:14:04.023 --> 00:14:09.124
the hard part in a lot of cases is
making it look and feel fun to use.

220
00:14:09.124 --> 00:14:13.684
And that's the part that I enjoy
that's the part that I'm good at is

221
00:14:13.684 --> 00:14:15.367
building fun websites.

222
00:14:15.367 --> 00:14:21.511
If I can jump over to my silly website and
make some goofy stuff that like

223
00:14:21.511 --> 00:14:27.456
let's make the website make a boot
noise whenever you click a button or

224
00:14:27.456 --> 00:14:31.590
have like, sound Effects things like that.

225
00:14:31.590 --> 00:14:34.473
But then when I wanna make it useful,

226
00:14:34.473 --> 00:14:39.966
I wanna pull stuff from different
services or I wanna hook in my blogs.

227
00:14:39.966 --> 00:14:42.256
Or something like all of
those things that we can do,

228
00:14:42.256 --> 00:14:44.455
I just have a serverless
function to enable that.

229
00:14:44.455 --> 00:14:47.294
So I can go pretty deep in
the stack without having to go

230
00:14:47.294 --> 00:14:50.555
tap on the shoulder of
somebody who's a back end Dev.

231
00:14:50.555 --> 00:14:54.240
So I feel like my world expanded
to the border of limitless,

232
00:14:54.240 --> 00:14:59.590
there's still stuff like I still every
once in a while, build a real server.

233
00:14:59.590 --> 00:15:03.181
I'm trying to do real time or I'm trying
to set up a graph qL subscription or

234
00:15:03.181 --> 00:15:04.630
something like that.

235
00:15:04.630 --> 00:15:08.451
But in almost all of the normal
day to day cases that I hit,

236
00:15:08.451 --> 00:15:14.270
I found that a serverless function gets me
there and takes me a fraction of the time.

237
00:15:14.270 --> 00:15:18.484
So I really am all in on serverless.

238
00:15:18.484 --> 00:15:21.680
I think it's such a cool way to work.

239
00:15:21.680 --> 00:15:25.617
And in such a power up for front end
developers, web developers to go out and

240
00:15:25.617 --> 00:15:27.630
just build whatever you can imagine.

241
00:15:29.070 --> 00:15:32.556
So our site's built, I wanna go and
just poke at it real quick and

242
00:15:32.556 --> 00:15:35.345
make sure that inverse
thing did what we expected.

243
00:15:36.985 --> 00:15:38.655
So here's our environment variables.

244
00:15:38.655 --> 00:15:43.415
Again, the secret value is not there,
public value is there in the website.

245
00:15:43.415 --> 00:15:48.724
And then we also have in
our API no trailing slash

246
00:15:48.724 --> 00:15:54.430
that the API has access
to our secret variables.

247
00:15:54.430 --> 00:15:58.974
So this is the the general experience
that you're looking at inside of

248
00:15:58.974 --> 00:16:02.526
Gatsby is you can share
these environment variables.

249
00:16:02.526 --> 00:16:05.550
You can do all that and
because we manage them with netlify,

250
00:16:05.550 --> 00:16:08.773
they were all kind of often out of
the way after we set them once.

251
00:16:08.773 --> 00:16:12.386
Instead of having to get that dot n file
from my local machine into settings on

252
00:16:12.386 --> 00:16:13.297
another machine.

