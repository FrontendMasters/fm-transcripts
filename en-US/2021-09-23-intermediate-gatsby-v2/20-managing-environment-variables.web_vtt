WEBVTT

1
00:00:00.000 --> 00:00:04.774
The last thing that I wanna show is,
I wanna show how to manage environment

2
00:00:04.774 --> 00:00:09.472
variables in Gatsby because it's
very straightforward, but there's

3
00:00:09.472 --> 00:00:14.413
a little bit of a mental model around
really all the static site generators.

4
00:00:14.413 --> 00:00:18.007
Anything that builds client side
code usually has a convention for

5
00:00:18.007 --> 00:00:21.986
the difference between an environment
variable that should be available

6
00:00:21.986 --> 00:00:26.090
to the client, and one that should only
be available in the build process and

7
00:00:26.090 --> 00:00:29.880
in serverless functions,
and Gatsby is no exception.

8
00:00:29.880 --> 00:00:36.007
So what we can do for this is I want to
create a couple environment variables,

9
00:00:36.007 --> 00:00:40.540
and I'll start by just having a,
let's create a page.

10
00:00:40.540 --> 00:00:46.115
And our page is going to
be called env-vars.js.

11
00:00:46.115 --> 00:00:52.955
And so I want to import
everything as React from react,

12
00:00:52.955 --> 00:01:00.560
and then we're gonna export
default function EnversPage.

13
00:01:00.560 --> 00:01:04.399
And what I want to do on
this page is just return

14
00:01:04.399 --> 00:01:08.860
details about what
the environment variables are.

15
00:01:08.860 --> 00:01:11.450
So this is, like huge caveat here.

16
00:01:11.450 --> 00:01:13.730
What we're doing here is for
demo purposes,

17
00:01:13.730 --> 00:01:15.590
this is actually a terrible idea.

18
00:01:15.590 --> 00:01:20.640
Don't share your environment
variables publicly on your website.

19
00:01:20.640 --> 00:01:24.831
Now, an important thing to
note is that anything that is

20
00:01:24.831 --> 00:01:29.500
available to the client side
is embedded in public code.

21
00:01:29.500 --> 00:01:34.520
So if you put an API key that shouldn't
be public into your Gatsby public

22
00:01:34.520 --> 00:01:40.640
environment variables, someone can go
inspect your bundle and find that key.

23
00:01:40.640 --> 00:01:45.193
So it's really important that you
only expose things to Gatsby on

24
00:01:45.193 --> 00:01:50.325
the client side that can be publicly
shared, because anything that you do

25
00:01:50.325 --> 00:01:56.350
will be put into the code as a publicly
available environment variable.

26
00:01:56.350 --> 00:01:59.920
So let's just give ourselves a header,
we'll say environment variables.

27
00:02:01.380 --> 00:02:05.490
And then down here, we're gonna dump two.

28
00:02:05.490 --> 00:02:10.739
So the first one is gonna be
called GATSBY_PUBLIC_VALUE.

29
00:02:10.739 --> 00:02:18.367
And we wanna show
process.env.GATSBY_PUBLIC_VALUE.

30
00:02:18.367 --> 00:02:21.655
And then, the other one that we wanna
show is gonna be called SECRET_VALUE.

31
00:02:24.911 --> 00:02:29.120
And these are two separate kinds of
environment variables in Gatsby.

32
00:02:29.120 --> 00:02:33.080
The first kind is prefixed with Gatsby_,

33
00:02:33.080 --> 00:02:40.645
this is a signal to get that this variable
is allowed to be on the client site.

34
00:02:40.645 --> 00:02:44.685
And this is a really important thing to
note because it's effectively an opt in.

35
00:02:44.685 --> 00:02:48.941
You're saying by prefixing this
environment variable with GATSBY_,

36
00:02:48.941 --> 00:02:52.610
I am acknowledging that I am
about to make this value public.

37
00:02:52.610 --> 00:02:54.180
It's going to go into my source bundle.

38
00:02:55.300 --> 00:02:58.570
Secret value down here though,
Gatsby's not going to pick that up.

39
00:02:58.570 --> 00:03:01.678
So I'm actually expecting
that once we set these,

40
00:03:01.678 --> 00:03:06.390
this one shouldn't show me anything,
but right now they're not set at all.

41
00:03:06.390 --> 00:03:07.950
So let's set some environment variables.

42
00:03:07.950 --> 00:03:12.880
So I'm going to env:set
GATSBY_PUBLIC_VALUE,

43
00:03:12.880 --> 00:03:16.807
and I wanna set that to thisisoktoshare.

44
00:03:18.487 --> 00:03:22.078
Then, I'm going to run it again and

45
00:03:22.078 --> 00:03:26.884
set SECRET_VALUE, thisisasecret, right?

46
00:03:26.884 --> 00:03:33.120
So these are just placeholders.

47
00:03:33.120 --> 00:03:36.387
These aren't real environment variables,
but

48
00:03:36.387 --> 00:03:39.980
this is how you would also store your say,
API token.

49
00:03:39.980 --> 00:03:42.512
If you were going to read from GitHub, or

50
00:03:42.512 --> 00:03:46.756
you wanted to send email with
a service like Mailgun, or Sendgrid,

51
00:03:46.756 --> 00:03:51.590
or something, you would have an API
key that identifies your account.

52
00:03:51.590 --> 00:03:52.970
And those need to stay secret.

53
00:03:52.970 --> 00:03:56.645
So those would not be
prefixed with Gatsby.

54
00:03:56.645 --> 00:04:01.951
And another thing that I'm doing here is
I'm using the netlify COI to set these,

55
00:04:01.951 --> 00:04:06.557
because one of the things that is a pain
to me at least is trying to manage

56
00:04:06.557 --> 00:04:08.999
different dot n files and then like.

57
00:04:08.999 --> 00:04:12.001
So I'm working on a site, and I've got
my DOT end, and then I deploy, and

58
00:04:12.001 --> 00:04:15.180
then the site fails because
the environment variables aren't set.

59
00:04:15.180 --> 00:04:17.439
And then I like share it with my coworker,
and

60
00:04:17.439 --> 00:04:21.750
they can't get it running because they
don't have the environment variables.

61
00:04:21.750 --> 00:04:22.873
So by using the CLI,

62
00:04:22.873 --> 00:04:27.640
what we're actually doing is we're
setting it at the project level.

63
00:04:27.640 --> 00:04:29.928
So when I ran this CLI command,

64
00:04:29.928 --> 00:04:35.473
what actually ended up happening is in
my project, when I go to the build and

65
00:04:35.473 --> 00:04:40.220
deploy and then environment,
these get set from the CLI.

66
00:04:40.220 --> 00:04:45.205
And then, what's even cooler is what
I'm about to show you here is when I

67
00:04:45.205 --> 00:04:50.191
run netlify dev, look at that from
the site, from app.netlify.com,

68
00:04:50.191 --> 00:04:53.470
these got pulled down for local depth.

69
00:04:53.470 --> 00:04:58.359
So it'll also pick up .n file so
that you don't have to like write a .n or

70
00:04:58.359 --> 00:04:59.816
anything like that.

71
00:04:59.816 --> 00:05:03.406
But it is so nice to just set my
environment variables once, and

72
00:05:03.406 --> 00:05:07.129
then not have to think about if I
share this site, if I publish it,

73
00:05:07.129 --> 00:05:09.190
environment variables are there.

74
00:05:09.190 --> 00:05:11.635
If I send it to a co-worker, and
they're on my netlify account,

75
00:05:11.635 --> 00:05:13.490
environment variables are already there.

76
00:05:13.490 --> 00:05:16.231
So all these things that
somebody would need are,

77
00:05:16.231 --> 00:05:19.470
they're all like managed
in a very nice way.

78
00:05:19.470 --> 00:05:23.670
So let's go check out this EnversPage, and
let's see if we got the expected outcome.

79
00:05:23.670 --> 00:05:27.092
And we did look so Gatsby public value.

80
00:05:27.092 --> 00:05:29.260
Okay, that's what I expected.

81
00:05:29.260 --> 00:05:33.484
We can see this, and it would show up in
the source code as well if we were to use

82
00:05:33.484 --> 00:05:35.600
this somewhere in a React component.

83
00:05:36.970 --> 00:05:40.050
SECRET_VALUE though is empty,
it's not shared.

84
00:05:40.050 --> 00:05:44.423
And the reason that this works
is that what Gatsby is doing at

85
00:05:44.423 --> 00:05:49.800
build time is it's actually
replacing these values wholesale.

86
00:05:49.800 --> 00:05:55.242
So it is going in and look for
process.m.GATSBY_PUBLIC_VALUE,

87
00:05:55.242 --> 00:05:58.352
and it will then remove this entirely.

88
00:05:58.352 --> 00:05:59.890
So the source code,

89
00:05:59.890 --> 00:06:05.237
what's actually being published
here is not this, it's the value.

90
00:06:07.832 --> 00:06:09.240
It's like that, right?

91
00:06:09.240 --> 00:06:12.160
So that's what's being done and
what's being shared.

92
00:06:12.160 --> 00:06:16.379
So this is a very cool process
where you basically said

93
00:06:16.379 --> 00:06:20.280
if it's prefixed with
Gatsby got to grab it.

94
00:06:20.280 --> 00:06:25.741
Another caveat to this is that, that
means that you can't do things like this,

95
00:06:25.741 --> 00:06:28.922
like GATSBY_PUBLIC_VALUE = process.n,

96
00:06:28.922 --> 00:06:34.072
unless they've changed this recently
because this won't get picked up.

97
00:06:39.106 --> 00:06:42.500
Maybe they rewrote that.

98
00:06:42.500 --> 00:06:47.450
It used to be that it was like wholesale
match, like process.env had to be present.

99
00:06:47.450 --> 00:06:51.967
But, that's a thing to keep in mind,
because that does happen in other

100
00:06:51.967 --> 00:06:56.863
frameworks like I think next has that
issue where you need to use the whole like

101
00:06:56.863 --> 00:07:02.510
process that M string, but it looks
like Gatsby fixed it so good for them.

102
00:07:02.510 --> 00:07:04.210
One less thing to worry about.

103
00:07:04.210 --> 00:07:07.747
So the other thing though,
is that once you've set an environment

104
00:07:07.747 --> 00:07:12.295
variable like this, you do want to be able
to access it in your serverless functions,

105
00:07:12.295 --> 00:07:15.327
because that's what serverless
functions are there for

106
00:07:15.327 --> 00:07:19.170
is to do work with sensitive
details because they're secure.

107
00:07:19.170 --> 00:07:23.724
Nobody can get the code inside
of a serverless function

108
00:07:23.724 --> 00:07:28.720
unless they have access to
logging something out of it.

109
00:07:28.720 --> 00:07:31.863
So if you write the code and
you don't log any of your secrets,

110
00:07:31.863 --> 00:07:35.020
you can use them in here, and
no one will be able to get at them.

111
00:07:35.020 --> 00:07:38.300
So it's a good way to do secure form
submissions, or sending mail, or

112
00:07:38.300 --> 00:07:39.700
things like that.

113
00:07:39.700 --> 00:07:43.585
So if I create an API called env-var, and

114
00:07:43.585 --> 00:07:48.691
this one is going to export
default function handler,

115
00:07:48.691 --> 00:07:54.700
Aland we don't want to use the req so
we'll use the res.

116
00:07:54.700 --> 00:07:58.420
And then in here, I'm going to res.json.

117
00:07:59.680 --> 00:08:03.891
And let's just get
the same thing from here.

118
00:08:07.544 --> 00:08:09.896
So we don't have to
re-type all of this out.

119
00:08:20.386 --> 00:08:24.620
Okay, so
that is going to give us our values back.

120
00:08:24.620 --> 00:08:28.541
And again, big old disclaimer,
this is a terrible idea,

121
00:08:28.541 --> 00:08:32.310
don't return your environment
variables from a call.

122
00:08:32.310 --> 00:08:34.350
Looks like I need to restart to
get that function to pick up.

123
00:08:36.000 --> 00:08:38.370
It's not plural, that's what's wrong.

124
00:08:38.370 --> 00:08:39.190
There we go.

125
00:08:39.190 --> 00:08:42.298
So we can see that in
the serverless function,

126
00:08:42.298 --> 00:08:45.260
the environment variable is there.

127
00:08:45.260 --> 00:08:48.607
So this is how we can work
with these private values,

128
00:08:48.607 --> 00:08:53.705
like if I need to make a privileged call,
I would do it in a serverless function,

129
00:08:53.705 --> 00:08:58.320
and then I can return the results
of that without exposing my keys.

130
00:08:58.320 --> 00:09:02.014
So this is another way that serverless
functions kind of level you up as

131
00:09:02.014 --> 00:09:05.956
a developer as they give you access to
do this sort of thing that otherwise,

132
00:09:05.956 --> 00:09:08.021
you'd have to go stand up a server, and

133
00:09:08.021 --> 00:09:10.868
you'd have to deal with all
these other things that.

134
00:09:10.868 --> 00:09:13.965
There's nothing inherently wrong with
them, but it's just one more chore that

135
00:09:13.965 --> 00:09:16.490
you have to do before you can
solve the problem at hand.

136
00:09:16.490 --> 00:09:19.915
And what I like about server less
functions is, we are just here,

137
00:09:19.915 --> 00:09:21.681
we can just do the thing, right?

138
00:09:21.681 --> 00:09:28.467
So, this then get this set up
if we wanna get add everything,

139
00:09:28.467 --> 00:09:34.606
and let's get commit,
we'll say add and their demo.

140
00:09:37.334 --> 00:09:40.940
Just gonna add up big old like this
is not a great idea, don't do this.

141
00:09:40.940 --> 00:09:47.060
So let's push, and we'll see when
we go back to our deployments here.

142
00:09:48.180 --> 00:09:52.910
That it's already building, and it's
gonna pull in our environment variables.

143
00:09:52.910 --> 00:09:57.570
And we would get the same output on
the client side and this should happen.

144
00:09:57.570 --> 00:09:58.620
Hopefully, we'll see how it goes.

145
00:09:58.620 --> 00:10:02.480
It should happen in about a minute
because the cache is warm.

146
00:10:03.530 --> 00:10:05.391
While we're waiting for this to build,

147
00:10:05.391 --> 00:10:09.070
does anybody have any questions because
we are starting to come to the end here.

148
00:10:11.440 --> 00:10:14.636
We're gonna do some further resources and
Q&amp;A, and

149
00:10:14.636 --> 00:10:17.130
then we're gonna call this thing a wrap.

150
00:10:17.130 --> 00:10:19.900
So if you've got questions for
today, now's the time.

151
00:10:19.900 --> 00:10:23.304
&gt;&gt; The serverless functions
piece kind of lifted

152
00:10:23.304 --> 00:10:28.017
their mental blocks around
the power of serverless functions,

153
00:10:28.017 --> 00:10:32.740
and like cookies and
mental block our own working through that.

154
00:10:33.940 --> 00:10:38.920
&gt;&gt; No joke, when I started working with
server less functions I think before

155
00:10:38.920 --> 00:10:43.815
I picked them up, I had in my head that
there was just a ceiling to what I was

156
00:10:43.815 --> 00:10:48.410
capable of unless I wanted to go and
be a full stack dev.

157
00:10:48.410 --> 00:10:50.211
And I've been a full stack dev,

158
00:10:50.211 --> 00:10:54.470
the beginning of my career was
actually more on the PHP MySQL side.

159
00:10:54.470 --> 00:10:57.254
And as I moved more into the front end,

160
00:10:57.254 --> 00:11:01.258
I just found that I preferred
working on the front end,

161
00:11:01.258 --> 00:11:06.350
it made me, I don't know,
it was just more fun for me, I guess.

162
00:11:06.350 --> 00:11:11.524
And so I would get to this certain
point in any project where I would just

163
00:11:11.524 --> 00:11:16.850
start looking at the tasks and
I'd be like, this isn't worth it.

164
00:11:16.850 --> 00:11:19.500
I don't want to go that
far back into the stack.

165
00:11:19.500 --> 00:11:22.887
So whatever idea I had,
I'd start talking myself out of it, and

166
00:11:22.887 --> 00:11:27.344
start convincing myself that what I wanted
to do was too ambitious, too expensive,

167
00:11:27.344 --> 00:11:31.462
too much time, and just not worthy,
you will have a different idea, right?

168
00:11:31.462 --> 00:11:36.405
When I adopted serverless functions,
it was like this fog cleared, and

169
00:11:36.405 --> 00:11:39.168
suddenly all of my ideas were possible.

170
00:11:39.168 --> 00:11:44.948
And so we've been able to do just so
much goofy fun stuff, the good example

171
00:11:44.948 --> 00:11:51.103
of serverless functions unblocking things
is we wanted to build this thing for

172
00:11:51.103 --> 00:11:55.980
explorers where you could take courses and
learn stuff.

173
00:11:55.980 --> 00:11:58.281
And in order to do this,
I needed like I wanted OAuth,

174
00:11:58.281 --> 00:11:59.670
I wanted you to have an account.

175
00:11:59.670 --> 00:12:02.310
So we needed to set up
this OAuth workflow.

176
00:12:02.310 --> 00:12:04.470
Well, turns out that was
serverless functions.

177
00:12:04.470 --> 00:12:06.470
I did this in like three functions.

178
00:12:06.470 --> 00:12:10.872
And now, I've got actual login and
I can go and have a dashboard and

179
00:12:10.872 --> 00:12:15.993
all this apparently I achieved something
in my [LAUGH] I did something I guess.

180
00:12:15.993 --> 00:12:20.635
But I can see like I I now completed tasks
in Jamstack explorers, and I've like

181
00:12:20.635 --> 00:12:25.926
earned a certificate, and downloading the
certificate is also a serverless function.

182
00:12:25.926 --> 00:12:30.084
We take your name and then we
generate a I think it's an SVG file,

183
00:12:30.084 --> 00:12:33.481
turn that into a PDF, and
then we return that to you.

184
00:12:33.481 --> 00:12:37.001
And with the missions out here,
we're doing checks to see like,

185
00:12:37.001 --> 00:12:41.609
when you watch one of these, we're sending
off serverless function calls to track,

186
00:12:41.609 --> 00:12:43.793
how many seconds of it have you watched.

187
00:12:43.793 --> 00:12:48.680
All of these things are things that in my
mind, were like, that's too much work.

188
00:12:48.680 --> 00:12:51.130
I am not going to build
a server that can manage that.

189
00:12:51.130 --> 00:12:55.260
But with serverless functions, each one
of these things is one tiny function.

190
00:12:55.260 --> 00:12:58.824
I don't think any function on this
project is more than a dozen or

191
00:12:58.824 --> 00:13:00.970
maybe two dozen lines of code.

192
00:13:00.970 --> 00:13:05.600
And that gives us the ability
to just build whatever we want.

193
00:13:05.600 --> 00:13:07.450
I'm completely unblocked.

194
00:13:07.450 --> 00:13:11.358
And so if you want to see
some more like ambitious,

195
00:13:11.358 --> 00:13:18.160
like real world projects, this is
a good one that nullify explorers repo.

196
00:13:18.160 --> 00:13:22.060
Has a bunch of functions in it,
here's how we handle our auth.

197
00:13:22.060 --> 00:13:25.845
And here's how we do certificates, and
here's how we're checking whether or

198
00:13:25.845 --> 00:13:28.499
not you had an achievement,
sending off reward stuff,

199
00:13:28.499 --> 00:13:31.805
all sorts of financing funding
things that we can do in here.

200
00:13:31.805 --> 00:13:35.322
And all of that is possible with
serverless functions in a way that it

201
00:13:35.322 --> 00:13:39.090
wouldn't have been, or would have
been significantly more complex for

202
00:13:39.090 --> 00:13:43.240
us to build, had we tried to stand
up like an Explorer's micro service.

203
00:13:43.240 --> 00:13:47.310
That ran all of those as
one kind of back end.

204
00:13:47.310 --> 00:13:54.470
So yeah, it really does, I don't know,
I feel like it gave me extra power.

205
00:13:54.470 --> 00:13:59.022
Like instead of feeling like being
a front-end dev has a ceiling now I feel

206
00:13:59.022 --> 00:14:02.180
like being a front-end
dev is a superpower.

207
00:14:02.180 --> 00:14:09.630
Because the hard part in a lot of cases
is making it look and feel fun to use.

208
00:14:09.630 --> 00:14:12.030
And that's the part that I enjoy.

209
00:14:12.030 --> 00:14:15.270
That's the part that I'm good at,
is building fun websites.

210
00:14:15.270 --> 00:14:21.066
If I can jump over to my silly website and
make some goofy stuff that like,

211
00:14:21.066 --> 00:14:27.150
[SOUND] Let's make the website make
a boop noise whenever you click a button,

212
00:14:27.150 --> 00:14:31.453
or have like [SOUND] Sound effects,
things like that.

213
00:14:31.453 --> 00:14:35.827
But then when I want to make it useful,
I want to pull stuff from different

214
00:14:35.827 --> 00:14:40.487
services, or I want to hook in my blogs,
or something like all of those things

215
00:14:40.487 --> 00:14:44.455
that we can do, I just have
a serverless function to enable that.

216
00:14:44.455 --> 00:14:47.416
So I can go pretty deep in
the stack without having to go tap

217
00:14:47.416 --> 00:14:50.555
on the shoulder of somebody
who's a back-end dev.

218
00:14:50.555 --> 00:14:54.308
So I feel like my world expanded
to the border of limitless,

219
00:14:54.308 --> 00:14:59.590
there's still stuff like I still every
once in a while build a real server.

220
00:14:59.590 --> 00:15:03.224
I'm trying to do real time, or I'm trying
to set up a graphql subscription, or

221
00:15:03.224 --> 00:15:04.630
something like that.

222
00:15:04.630 --> 00:15:09.170
But in almost all of the normal day
to day cases that I hit, I found that

223
00:15:09.170 --> 00:15:14.270
a serverless function gets me there,
and takes me a fraction of the time.

224
00:15:14.270 --> 00:15:19.166
So I really, like I'm all in on
serverless, I think it's such a cool way

225
00:15:19.166 --> 00:15:23.180
to work, and in such a power up for
front-end developers,

226
00:15:23.180 --> 00:15:27.630
web developers to go out and
just build whatever you can imagine.

227
00:15:29.070 --> 00:15:32.483
So our site's built, I wanna go and
just poke at it real quick and

228
00:15:32.483 --> 00:15:35.345
make sure that Env-vers
thing did what we expected.

229
00:15:36.985 --> 00:15:38.655
So here's our environment variables.

230
00:15:38.655 --> 00:15:43.415
Again, the secret value is not there,
public value is there in the website.

231
00:15:43.415 --> 00:15:49.023
And then, we also have in our API,
no trailing slash

232
00:15:49.023 --> 00:15:54.253
that the API has access
to our secret variables.

233
00:15:54.253 --> 00:15:58.716
So this is the general experience
that you're looking at inside of

234
00:15:58.716 --> 00:16:03.671
Gatsby is you can share these environment
variable, you can do all that.

235
00:16:03.671 --> 00:16:06.521
And because we manage them with netlify,
they were all kind

236
00:16:06.521 --> 00:16:10.055
of out of the way after we send them once
instead of having to get that dot and

237
00:16:10.055 --> 00:16:13.030
file from my local machine into
settings on another machine.

