WEBVTT

1
00:00:00.186 --> 00:00:03.829
The next thing that I wanna dig into is,
how can we use this information,

2
00:00:03.829 --> 00:00:07.742
these serverless function, and
actually build out some protected routes?

3
00:00:07.742 --> 00:00:12.740
How do we create a section
of our site where you need

4
00:00:12.740 --> 00:00:15.598
to be logged in to access it?

5
00:00:15.598 --> 00:00:21.080
And the way that we're gonna do that is
we are going to create some new files.

6
00:00:21.080 --> 00:00:24.914
So let's jump in to our pages and

7
00:00:24.914 --> 00:00:29.600
create one in a folder called account,

8
00:00:29.600 --> 00:00:34.006
and we'll call this one login.js.

9
00:00:34.006 --> 00:00:38.992
So what we're doing with login.js
is we are going to create a form,

10
00:00:38.992 --> 00:00:43.541
well, really just a button because
what we're gonna do is let

11
00:00:43.541 --> 00:00:46.530
people call that serverless function.

12
00:00:46.530 --> 00:00:50.383
In a more complete service,
you might have a username and

13
00:00:50.383 --> 00:00:55.360
password that people needed to use,
but our goal here is to demonstrate,

14
00:00:55.360 --> 00:00:59.070
not to build something that
we can ship to production.

15
00:00:59.070 --> 00:01:02.444
Then we're gonna use this
navigate from Gatsby again,

16
00:01:02.444 --> 00:01:04.969
and that'll be if something goes wrong.

17
00:01:04.969 --> 00:01:08.457
If we are already logged in,
we don't wanna stay on this page and

18
00:01:08.457 --> 00:01:09.499
so on and so forth.

19
00:01:09.499 --> 00:01:14.544
So, what I wanna do is I'm going to start,

20
00:01:14.544 --> 00:01:18.752
let's build out our component, so

21
00:01:18.752 --> 00:01:24.099
let's export default function LoginPage.

22
00:01:24.099 --> 00:01:30.295
And in this, we're gonna do
a loginStatus and a setloginStatus,

23
00:01:30.295 --> 00:01:35.952
do React.useState, and
we'll leave this one undefined.

24
00:01:35.952 --> 00:01:41.527
And I'm explicitly leaving it undefined
because what I want to happen here is,

25
00:01:41.527 --> 00:01:44.450
we haven't gotten any information yet.

26
00:01:44.450 --> 00:01:49.959
So, what we can do then is
let's return a button and

27
00:01:49.959 --> 00:01:53.430
that button is gonna say login.

28
00:01:53.430 --> 00:01:58.577
And what I wanna do is if we're logged in,
so

29
00:01:58.577 --> 00:02:04.433
if you are logged in and
that loginStatus is true.

30
00:02:04.433 --> 00:02:07.858
What I want to happen instead
of actually seeing anything,

31
00:02:07.858 --> 00:02:10.264
is we should just immediately navigate.

32
00:02:10.264 --> 00:02:15.392
And I wanna navigate over to account,
Oops,

33
00:02:15.392 --> 00:02:20.184
account/dashboard, which we'll
have to create here in a second.

34
00:02:20.184 --> 00:02:24.697
And I'm gonna use a feature of
the Gatsby API which is replace, and

35
00:02:24.697 --> 00:02:29.139
I'll show you why here in a second,
and then we'll return null.

36
00:02:29.139 --> 00:02:31.805
So that if for whatever reason,

37
00:02:31.805 --> 00:02:37.057
we still have to return a component,
it just doesn't null up.

38
00:02:37.057 --> 00:02:40.243
So this is not the most
full-featured page, and

39
00:02:40.243 --> 00:02:44.139
it actually won't work the way
that we want it to right now.

40
00:02:44.139 --> 00:02:48.330
But let's get this running in develop so

41
00:02:48.330 --> 00:02:53.764
that we can look at
the navigation behavior, okay.

42
00:02:53.764 --> 00:02:56.602
So let's make sure we're logged out so

43
00:02:56.602 --> 00:03:01.690
that when we do get to this point,
it doesn't immediately bounce us.

44
00:03:01.690 --> 00:03:05.771
And then let's go to account/login.

45
00:03:05.771 --> 00:03:09.703
So here is our account/login, and right
now this button doesn't do anything, so

46
00:03:09.703 --> 00:03:11.400
when I click it, nothing happens.

47
00:03:11.400 --> 00:03:19.846
But if I wanna set my login to true,
What I want to happen is it'll auto,

48
00:03:19.846 --> 00:03:24.630
yeah, that's what we want,
is it should automatically redirect us.

49
00:03:24.630 --> 00:03:29.610
So I go to account/login and
we immediately go to the dashboard,

50
00:03:29.610 --> 00:03:35.145
because we're already logged in,
we don't need to see the login page.

51
00:03:35.145 --> 00:03:41.120
But if I go back,
you see how it took me to the homepage.

52
00:03:41.120 --> 00:03:44.993
The reason that we want that replace
is that if we don't do that,

53
00:03:44.993 --> 00:03:48.525
what happens is we basically
cut off our users in the past.

54
00:03:48.525 --> 00:03:52.412
And what ends up happening is
if I go to the homepage, and

55
00:03:52.412 --> 00:03:56.319
then from here I tried to go
to the account/login page.

56
00:03:56.319 --> 00:04:00.335
And I go, I didn't wanna do that,
let me go back home.

57
00:04:00.335 --> 00:04:01.713
Wait, why did that work?

58
00:04:01.713 --> 00:04:02.929
Maybe I need to refresh.

59
00:04:06.310 --> 00:04:10.742
Let me go to account/login, and
then I tried to go back and

60
00:04:10.742 --> 00:04:14.639
it's apparently outsmarting me for
some reason.

61
00:04:14.639 --> 00:04:20.593
What does happen when it's not replacing,
I'm not sure why it's ignoring me on this,

62
00:04:20.593 --> 00:04:25.430
is that it will cause you to, you hit
Login and then you go to dashboard.

63
00:04:25.430 --> 00:04:27.530
And then when you try to hit Back,
you go to Login again,

64
00:04:27.530 --> 00:04:28.889
which redirects you to dashboard.

65
00:04:28.889 --> 00:04:33.262
So you put people in a dead end where they
can't use the Back button anymore, and

66
00:04:33.262 --> 00:04:36.470
it's not the end of the world but
it's an inconvenience.

67
00:04:36.470 --> 00:04:39.876
It's something that you don't want
to force people to deal with if they

68
00:04:39.876 --> 00:04:40.680
don't have to.

69
00:04:40.680 --> 00:04:46.712
So what we are gonna do is use this
replace attribute which causes the site to

70
00:04:46.712 --> 00:04:53.060
give us the behavior that we want, which
is to bounce back and forth like that.

71
00:04:53.060 --> 00:04:58.542
So next,
let's actually wire this thing up,

72
00:04:58.542 --> 00:05:04.458
so I want a function called
async function login.

73
00:05:04.458 --> 00:05:10.195
And login is going to pull
the status out of await,

74
00:05:10.195 --> 00:05:16.355
we're gonna fetch, and
we wanna fetch api/login.

75
00:05:16.355 --> 00:05:23.700
So just write to that API that we wrote,
and then we'll get it out as json.

76
00:05:27.190 --> 00:05:31.360
And we don't actually need this, I don't
know why VS Code keeps trying to help.

77
00:05:34.560 --> 00:05:39.376
So if the status is not ok,
then we know that the function

78
00:05:39.376 --> 00:05:44.000
failed because that function
will always return ok.

79
00:05:44.000 --> 00:05:47.697
So if the status is not ok,
we're gonna throw a new error, and

80
00:05:47.697 --> 00:05:52.410
we're just gonna put in the status
because something definitely went weird.

81
00:05:52.410 --> 00:05:57.555
Otherwise, we will navigate
to account/dashboard.

82
00:06:02.430 --> 00:06:07.661
All right, so what this will do is
that'll let us do that navigation,

83
00:06:07.661 --> 00:06:11.473
and then this,
I don't know why I put this up here,

84
00:06:11.473 --> 00:06:16.450
this needs to be, It needs to be in here.

85
00:06:22.642 --> 00:06:23.727
No, wait.

86
00:06:25.739 --> 00:06:26.690
I'm over thinking things.

87
00:06:26.690 --> 00:06:29.820
Okay, here we are, so
we do want that to be out here.

88
00:06:29.820 --> 00:06:33.835
And then I also want the ability
to check the loginSatus, and

89
00:06:33.835 --> 00:06:36.840
that's where this loginStatus is gonna be.

90
00:06:36.840 --> 00:06:41.716
So what we're actually gonna
do is write when you login,

91
00:06:41.716 --> 00:06:44.571
we're going to check the login.

92
00:06:44.571 --> 00:06:46.932
But first, why don't we just go ahead and
have this thing login?

93
00:06:46.932 --> 00:06:52.456
So, I'm gonna onClick and we will login,

94
00:06:52.456 --> 00:06:58.909
then I need to set this
back to not do that, right.

95
00:06:58.909 --> 00:06:59.844
Yes, that's what we wanted.

96
00:06:59.844 --> 00:07:02.923
So we're pulling this out, honestly,
we could put this wherever we wanted.

97
00:07:02.923 --> 00:07:05.274
We could put it in here.

98
00:07:05.274 --> 00:07:09.350
So I'm just rearranging
deck chairs at that point.

99
00:07:09.350 --> 00:07:13.139
So let's go to our account/login page,
it takes us here.

100
00:07:13.139 --> 00:07:18.385
And if I look at our cookies again,
when I login, there's our cookie and

101
00:07:18.385 --> 00:07:22.430
we're now on the dashboard
that we still need to build.

102
00:07:22.430 --> 00:07:26.849
So this is pretty dang cool,
but if I go back to my login,

103
00:07:26.849 --> 00:07:31.755
you see how it shows us the login
even though the cookie is set.

104
00:07:31.755 --> 00:07:34.701
So we need one more function
that's gonna check for

105
00:07:34.701 --> 00:07:38.410
the presence of that cookie that
we can run right at the get-go.

106
00:07:38.410 --> 00:07:43.634
So we're going to do an async
function called checkLogin,

107
00:07:43.634 --> 00:07:48.135
and this one is going to
take the setter from React.

108
00:07:48.135 --> 00:07:52.164
So when we have a login status,
we wanna set loginStatus,

109
00:07:52.164 --> 00:07:55.220
we're gonna pass that right through here.

110
00:07:55.220 --> 00:08:00.767
And in it, we're gonna get the loggedIn,
we'll default it to false in

111
00:08:00.767 --> 00:08:06.975
case something goes wrong with the call,
and we will await another fetch call,

112
00:08:10.330 --> 00:08:13.225
To api/check-auth.

113
00:08:15.900 --> 00:08:21.461
And after that,
we will get the response as json.

114
00:08:26.610 --> 00:08:30.615
And then,
we can just set that loginStatus.

115
00:08:30.615 --> 00:08:33.735
So we'll set the loginStatus
to whatever loggedIn is, so

116
00:08:33.735 --> 00:08:35.847
that's either gonna be true or false.

117
00:08:35.847 --> 00:08:40.240
And if it's true, we'll get redirected.

118
00:08:40.240 --> 00:08:44.090
So by saving this and refreshing the page,

119
00:08:46.595 --> 00:08:48.715
Nothing happens because we
didn't actually call this yet.

120
00:08:48.715 --> 00:08:55.027
So [LAUGH] let's actually call this,
let's add a helper function down here.

121
00:08:55.027 --> 00:08:57.778
We're gonna use React use effect.

122
00:09:00.097 --> 00:09:06.571
And as soon as the page loads which
we signify with an empty array,

123
00:09:06.571 --> 00:09:13.529
we want to call checkLogin, and
we'll pass in that setLoginStatus.

124
00:09:13.529 --> 00:09:17.370
So this should set up our loop,
and there it goes.

125
00:09:17.370 --> 00:09:21.330
So now if I go to login,
when I'm logged in, it'll work.

126
00:09:21.330 --> 00:09:26.568
And if I go to api/logout and
then I go back to account login,

127
00:09:26.568 --> 00:09:33.029
oops, It takes me to the login.

128
00:09:33.029 --> 00:09:35.860
So that's a working login page, right?

129
00:09:35.860 --> 00:09:39.353
And so there's a decent amount
going on here, but again,

130
00:09:39.353 --> 00:09:43.790
we are largely just writing React,
we're not doing a lot of Gatsby here.

131
00:09:43.790 --> 00:09:50.360
The biggest thing that we're doing
with Gatsby is these navigation calls.

132
00:09:50.360 --> 00:09:53.490
So because the serverless
functions made it so

133
00:09:53.490 --> 00:09:58.146
straightforward to update that cookie and
check that cookie value,

134
00:09:58.146 --> 00:10:02.089
we don't really have to do
a whole lot to manage this auth.

135
00:10:02.089 --> 00:10:05.964
And again, that's sort of the power of
this approach is we're able to very

136
00:10:05.964 --> 00:10:09.903
quickly stand up these serverless
functions and get things built instead of

137
00:10:09.903 --> 00:10:12.809
having to think really hard
about how to get them built.

138
00:10:12.809 --> 00:10:18.230
Also get clever about implementing it
in the browser in a way that's secure.

139
00:10:18.230 --> 00:10:21.590
So next, let's go ahead and
build the dashboard page.

140
00:10:24.560 --> 00:10:28.855
And this dashboard page is going
to be fairly straightforward,

141
00:10:28.855 --> 00:10:33.240
I don't know that it's gonna have
anything super special in it.

142
00:10:33.240 --> 00:10:38.608
It's actually gonna be an almost
exact duplicate in terms of a lot

143
00:10:38.608 --> 00:10:43.989
of the functionality to the point
that I might just copy paste it.

144
00:10:43.989 --> 00:10:48.760
Let's throw this over and just say,
cuz we still wanna check the login, so

145
00:10:48.760 --> 00:10:53.608
if we were gonna have a bunch of dashboard
pages, I would probably say let's

146
00:10:53.608 --> 00:10:57.279
try this out and
put this into a custom hook or something.

147
00:10:57.279 --> 00:11:01.387
But given that we're only using it twice,
I'm kinda okay with leaving it so

148
00:11:01.387 --> 00:11:03.710
that it's really clear what's going on.

149
00:11:03.710 --> 00:11:10.236
The difference is that we are going
to instead of tracking the login,

150
00:11:10.236 --> 00:11:15.760
we're gonna track log out and
call this function log out.

151
00:11:18.325 --> 00:11:24.640
And after we've logged out, we want to go
to the login page, not the dashboard page.

152
00:11:24.640 --> 00:11:31.540
So let's call this one Dashboardpage.

153
00:11:31.540 --> 00:11:35.331
We will still set our loginStatus and
setLoginStatus.

154
00:11:35.331 --> 00:11:40.097
We're still gonna check
the login at instantiation.

155
00:11:40.097 --> 00:11:45.265
But with this one, instead, what we'll
do is we'll check if it's false and

156
00:11:45.265 --> 00:11:48.220
we will head over to
the login page instead.

157
00:11:48.220 --> 00:11:52.890
And if you get here, we wanna actually
show you a little bit of a dashboard.

158
00:11:52.890 --> 00:11:58.878
So we're not gonna put too
much on this dashboard,

159
00:11:58.878 --> 00:12:02.915
but what we can do is say h1, wow,

160
00:12:02.915 --> 00:12:06.550
look at all this secret stuff.

161
00:12:06.550 --> 00:12:09.189
And underneath it, we can show a button.

162
00:12:13.142 --> 00:12:17.835
Let's get that out of there,
that in there,

163
00:12:17.835 --> 00:12:20.809
and this one we will logout.

164
00:12:24.760 --> 00:12:30.039
Okay, so this will be our dashboard,
and so what should happen now

165
00:12:30.039 --> 00:12:35.433
is if I try to go to login,
it should bounce me back to the dashboard.

166
00:12:35.433 --> 00:12:39.786
But now if I logout, cookie is gone and
I go to the login page.

167
00:12:39.786 --> 00:12:43.657
If I try to go to the dashboard,
bounce back to the login, right?

168
00:12:43.657 --> 00:12:50.342
So, we've got a pretty solid experience
here of going around to these different

169
00:12:50.342 --> 00:12:55.863
pages, and we could wrap this in
kinda require auth sort of thing.

170
00:12:55.863 --> 00:13:01.404
And then use multiple pages
with a require auth component

171
00:13:01.404 --> 00:13:06.145
around them that just did
this navigation form.

172
00:13:06.145 --> 00:13:10.949
This is the basic pattern that we're
looking at when we get into authenticated

173
00:13:10.949 --> 00:13:11.544
routes.

174
00:13:11.544 --> 00:13:16.554
And the main difference is that when we
check this auth, the logic that we run

175
00:13:16.554 --> 00:13:21.820
in this function, this is the logic that
would need to be based on your service.

176
00:13:21.820 --> 00:13:26.212
So whatever service you're using,
if you're using a JSON web token,

177
00:13:26.212 --> 00:13:29.577
you would send that as a header and
then you would need to

178
00:13:29.577 --> 00:13:33.989
validate that against whatever
service you're using to manage auth.

179
00:13:33.989 --> 00:13:37.665
Or if you're using cookies,
you would need to make sure that whatever

180
00:13:37.665 --> 00:13:41.171
details you needed to set are set so
that somebody can't spoof it.

181
00:13:41.171 --> 00:13:46.598
There are things that definitely need
to be considered about authentication,

182
00:13:46.598 --> 00:13:51.460
but the mechanics of it are pretty
similar everywhere that you'll go.

183
00:13:51.460 --> 00:13:54.312
You need some way to
validate the information,

184
00:13:54.312 --> 00:13:57.390
usually that means calling
out to an auth service.

185
00:13:57.390 --> 00:14:01.631
And once you get that confirmation or
a signal that it's not a valid login,

186
00:14:01.631 --> 00:14:04.592
you can either bounce somebody
to the login page, or

187
00:14:04.592 --> 00:14:07.446
you bounce them to where
they're supposed to go.

188
00:14:07.446 --> 00:14:11.682
And just send back this like, yeah, I am
logged in or you're not logged in, and

189
00:14:11.682 --> 00:14:14.160
then the app can kinda
handle the rest of that.

190
00:14:14.160 --> 00:14:16.385
And honestly,
we could make this even more,

191
00:14:16.385 --> 00:14:18.800
you could send a header
that would be a redirect.

192
00:14:18.800 --> 00:14:23.391
So after somebody hits this function, they
get redirected to where they should be.

193
00:14:23.391 --> 00:14:29.350
There's a lot of stuff that you can do,
and there's no hard and fast rule here.

194
00:14:29.350 --> 00:14:34.503
But ultimately, it comes down to a pretty
straight forward flow of saying,

195
00:14:34.503 --> 00:14:36.606
are they logged in, yes or no?

196
00:14:36.606 --> 00:14:41.118
And then on the client side, checking that
and showing people or not showing people

197
00:14:41.118 --> 00:14:44.736
things based on that yes or
no flag from your serverless function.

198
00:14:49.366 --> 00:14:52.556
And then the last thing
that I wanna do is,

199
00:14:52.556 --> 00:14:56.301
what if somebody goes to
just account directly?

200
00:14:56.301 --> 00:14:59.597
I don't wanna have to
build an account page,

201
00:14:59.597 --> 00:15:03.600
so why don't we just add
a client-only route in here?

202
00:15:03.600 --> 00:15:09.756
And this is actually something pretty
cool about these client-only routes,

203
00:15:09.756 --> 00:15:13.960
is that this one's a catch all,
they're fallback.

204
00:15:13.960 --> 00:15:18.628
So if dashboard exists,
dashboard will still hit dashboard.js, but

205
00:15:18.628 --> 00:15:23.449
something that doesn't exist like
the route or if I put in some nonsense,

206
00:15:23.449 --> 00:15:25.186
will still hit this page.

207
00:15:25.186 --> 00:15:30.026
So, I can in here, I'll import
everything as React, from React and

208
00:15:30.026 --> 00:15:32.790
then we're gonna get navigate again.

209
00:15:36.539 --> 00:15:40.918
And then down here,
we're gonna do a very lightweight

210
00:15:40.918 --> 00:15:44.830
component that effectively
is just a redirect.

211
00:15:44.830 --> 00:15:47.680
So this is gonna redirect
to the account dashboard.

212
00:15:47.680 --> 00:15:53.447
And I could add some auth detection and
stuff and redirect to the right place,

213
00:15:53.447 --> 00:15:57.617
but because that's already
there with the dashboard,

214
00:15:57.617 --> 00:16:01.629
I'm just gonna be okay with
an additional redirect.

215
00:16:01.629 --> 00:16:06.506
So we want this to run as soon
as somebody hits the page,

216
00:16:06.506 --> 00:16:10.659
and we will navigate to account/dashboard.

217
00:16:10.659 --> 00:16:13.196
And again, we wanna replace true so

218
00:16:13.196 --> 00:16:16.756
that they don't end up
with a broken back button.

219
00:16:16.756 --> 00:16:18.776
And we'll just return nothing.

220
00:16:18.776 --> 00:16:23.241
So we want that navigation
to happen immediately and

221
00:16:23.241 --> 00:16:26.186
it will return null, otherwise.

222
00:16:26.186 --> 00:16:31.856
So let's, Where did I mess up?

223
00:16:31.856 --> 00:16:33.926
Need to call it a function
because it's function.

224
00:16:38.689 --> 00:16:39.505
There we go.

225
00:16:39.505 --> 00:16:46.349
Okay, so now I can hit, Any route will
bounce me back to where I need to be.

226
00:16:46.349 --> 00:16:54.009
And, If I go to just the plain account
route, it takes me to the dashboard.

227
00:16:54.009 --> 00:16:59.093
And so then from there we can go into
the gatsby-config and say, all right,

228
00:16:59.093 --> 00:17:05.594
let's add the account to, Our nav here.

229
00:17:05.594 --> 00:17:09.246
And I don't have to go straight to login
or dashboard, I can just go to account,

230
00:17:09.246 --> 00:17:11.768
and then when I hit that,
it takes me where I need to go.

231
00:17:11.768 --> 00:17:16.479
So I can logout, go to Books,
go to Login, right?

232
00:17:16.479 --> 00:17:22.749
And we have access to this whole kinda
nice experience with a protected route.

233
00:17:22.749 --> 00:17:26.549
We've got our list of books,
our list of authors.

234
00:17:26.549 --> 00:17:33.220
These are all pretty powerful,
pretty nice setups, and good flows.

