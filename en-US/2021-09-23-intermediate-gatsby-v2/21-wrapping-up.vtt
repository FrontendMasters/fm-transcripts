WEBVTT

1
00:00:00.230 --> 00:00:05.430
And that, dear friends, I believe is the
end of the coding we're gonna do today.

2
00:00:05.430 --> 00:00:06.910
So let's talk a little bit.

3
00:00:06.910 --> 00:00:09.774
First and foremost,
if you wanna see the lessons,

4
00:00:09.774 --> 00:00:13.570
remember that you can go and
find the lesson that we follow today is on

5
00:00:13.570 --> 00:00:18.500
frontendmasters.learnwithjson.dev/interme-
diate-gatsby.

6
00:00:18.500 --> 00:00:24.238
The source code for the project is at
github.com/jlengstorf/frontend-masters-in-

7
00:00:24.238 --> 00:00:28.486
termediate-gatsby-project the very
succinctly named repo.

8
00:00:28.486 --> 00:00:31.634
And that's gonna be on the progress
branch because the main branch is

9
00:00:31.634 --> 00:00:33.250
the starting point.

10
00:00:33.250 --> 00:00:36.910
So check out that progress branch if
you wanna see what we built today.

11
00:00:38.080 --> 00:00:40.853
So, if you are looking for
what to do next,

12
00:00:40.853 --> 00:00:45.011
if you wanna figure out next steps here,
I mean, at this point,

13
00:00:45.011 --> 00:00:49.960
everything else you're gonna wanna do
is gonna be a deep dive into the docs.

14
00:00:49.960 --> 00:00:52.746
If the intro to Gatsby course that we did,

15
00:00:52.746 --> 00:00:58.010
that you can find it'll be under my
author profile on Frontend Masters.

16
00:00:58.010 --> 00:01:01.906
If that doesn't get you where you wanna
go along with this one that we did today,

17
00:01:01.906 --> 00:01:05.220
then you're starting to look
at more edge casey things.

18
00:01:05.220 --> 00:01:08.636
And the docs have really good references,
all the APIs are there,

19
00:01:08.636 --> 00:01:10.200
they're documented.

20
00:01:10.200 --> 00:01:13.830
They're usually example repos attached
where you can see how something is used,

21
00:01:13.830 --> 00:01:17.640
how you can apply different
techniques to get different outcomes.

22
00:01:17.640 --> 00:01:21.850
You can also reach out to the Gatsby
team is pretty responsive.

23
00:01:21.850 --> 00:01:24.640
You can send messages to me on Twitter.

24
00:01:24.640 --> 00:01:28.382
You can open issues on the repo,
in general,

25
00:01:28.382 --> 00:01:32.315
the repo should be for project questions.

26
00:01:32.315 --> 00:01:35.840
Hit me up on Twitter if you have more
general questions cuz I won't check

27
00:01:35.840 --> 00:01:39.035
the repo often enough for
it to be like a good tech support venue.

28
00:01:40.447 --> 00:01:42.307
But I do love to hear from people.

29
00:01:42.307 --> 00:01:43.682
And most importantly,

30
00:01:43.682 --> 00:01:48.157
the way that you're gonna level up at
Gatsby is by building things in Gatsby.

31
00:01:48.157 --> 00:01:52.531
The reason that I can do all of this stuff
that I can do is because I've probably

32
00:01:52.531 --> 00:01:54.431
built over 100 Gatsby sites.

33
00:01:54.431 --> 00:01:56.143
And a lot of them are teeny tiny,

34
00:01:56.143 --> 00:02:00.776
goofy little things that were just toys
that I wanted to see if I could try.

35
00:02:00.776 --> 00:02:02.767
What if I did this thing with themes or

36
00:02:02.767 --> 00:02:06.685
what happened if I set up client side
routing or hey, how do I make off work

37
00:02:06.685 --> 00:02:10.111
that little proof of concept we
did today of protected routes.

38
00:02:10.111 --> 00:02:14.710
All of those little projects building them
and shipping them strengthens that muscle.

39
00:02:14.710 --> 00:02:17.986
It's gonna make you better as
a developer to get those reps and

40
00:02:17.986 --> 00:02:22.081
do the thing over and over again and try
it a little bit different every time and

41
00:02:22.081 --> 00:02:24.992
that's gonna make you
a really excellent developer.

42
00:02:24.992 --> 00:02:28.220
More so than watching every tutorial in
the world, you gotta get out there and

43
00:02:28.220 --> 00:02:30.070
you gotta actually build, right?

44
00:02:30.070 --> 00:02:32.662
So please get out there, go try something,

45
00:02:32.662 --> 00:02:37.770
build something, send me a message and
show me what you built I'd love to see it.

46
00:02:37.770 --> 00:02:41.158
So, fun things, silly things,
serious things, work things,

47
00:02:41.158 --> 00:02:42.520
I'd love to see them all.

48
00:02:42.520 --> 00:02:47.473
So hit me up on Twitter and
send me a message show me what you built,

49
00:02:47.473 --> 00:02:51.680
and I hope you have a whole
lot of fun with Gatsby.

50
00:02:51.680 --> 00:02:55.869
&gt;&gt; Is there a limit to the amount of
processing like a serverless function

51
00:02:55.869 --> 00:02:56.580
cannot do.

52
00:02:57.580 --> 00:03:02.980
&gt;&gt; Yeah, every serverless function is
gonna have memory limits and time limits.

53
00:03:02.980 --> 00:03:04.910
You can work around those
with different processes.

54
00:03:04.910 --> 00:03:09.335
So for example,
if you wanna run a serverless function for

55
00:03:09.335 --> 00:03:14.212
longer than I think 20 seconds
is the usual limit then there's

56
00:03:14.212 --> 00:03:17.295
a pattern called background function.

57
00:03:17.295 --> 00:03:22.158
Which on Netlify is you just add a dot
background to the function name and

58
00:03:22.158 --> 00:03:25.250
it'll let it run for more than 20 seconds.

59
00:03:26.850 --> 00:03:30.874
Memory varies,
I think AWS Lambda which backs a lot of

60
00:03:30.874 --> 00:03:34.970
the services out there
has a six megabyte limit.

61
00:03:34.970 --> 00:03:40.856
So if you're trying to do huge images or
other types of processing,

62
00:03:40.856 --> 00:03:45.310
you may need to look at
a different solution there.

63
00:03:46.400 --> 00:03:49.554
So those are the two real big limits.

64
00:03:49.554 --> 00:03:52.632
Yeah, I think there's the memory limit,

65
00:03:52.632 --> 00:03:56.746
there's the time limit and
I think that's everything.

66
00:03:56.746 --> 00:03:58.935
&gt;&gt; How about build time,
generally speaking,

67
00:03:58.935 --> 00:04:00.670
how are they affecting build time?

68
00:04:01.860 --> 00:04:05.624
&gt;&gt; Serverless functions
don't affect build time,

69
00:04:05.624 --> 00:04:10.910
you're deploying those as like on demand,
so they run on demand.

70
00:04:10.910 --> 00:04:16.625
So there's a little bit of a bundling
cost but the bundling cost is negligible,

71
00:04:16.625 --> 00:04:21.160
it's a few seconds and
it doesn't really scale too linearly.

72
00:04:21.160 --> 00:04:26.113
And I think that if everybody's not
already using it here in pretty

73
00:04:26.113 --> 00:04:30.534
short order, IES build is gonna
be the de facto standard for

74
00:04:30.534 --> 00:04:33.680
bundling serverless functions.

75
00:04:33.680 --> 00:04:39.635
And we saw on Netlify that, if you're
bundling several dozen functions,

76
00:04:39.635 --> 00:04:44.190
IES build is doing it in
hundreds of milliseconds.

77
00:04:44.190 --> 00:04:48.671
So it's unbelievably fast, and, yeah,
I would say that I would not factor

78
00:04:48.671 --> 00:04:52.110
build time in at all with
the use of serverless functions.

