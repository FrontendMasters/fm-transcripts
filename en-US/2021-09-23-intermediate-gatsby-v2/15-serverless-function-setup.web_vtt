WEBVTT

1
00:00:00.380 --> 00:00:04.650
We are now in pretty good shape for
diving into these serverless functions.

2
00:00:05.670 --> 00:00:12.529
So serverless functions are our new thing
to Gatsby, not a new thing in general.

3
00:00:13.790 --> 00:00:15.817
So if you look at, like,

4
00:00:15.817 --> 00:00:20.936
when the jam stack came out as
a general architecture, right,

5
00:00:20.936 --> 00:00:28.050
there's this idea of precompile things
decouple your front end serve it on a CDN.

6
00:00:28.050 --> 00:00:34.230
These are such powerful concepts, but
there are things that you'll need to do.

7
00:00:34.230 --> 00:00:36.892
That can't be done client site,

8
00:00:36.892 --> 00:00:42.501
you'll find yourself in a situation
where you need to, for example,

9
00:00:42.501 --> 00:00:47.840
process a form input, or
send off an authenticated call to an API.

10
00:00:47.840 --> 00:00:51.160
If you're working with
a third party service,

11
00:00:51.160 --> 00:00:55.960
you wanna make a request to auth zero
to see if somebody is logged in.

12
00:00:55.960 --> 00:00:58.670
I'm gonna get a token
that has to be private.

13
00:00:58.670 --> 00:01:01.070
Can't put that in my client side code.

14
00:01:01.070 --> 00:01:03.598
So that creates a lot of challenges for

15
00:01:03.598 --> 00:01:08.900
front end developers because you'd
find yourself standing up a server.

16
00:01:08.900 --> 00:01:13.811
For one thing, like all I need
to do is make this auth call,

17
00:01:13.811 --> 00:01:18.390
but I have to stand up a whole server for
this.

18
00:01:18.390 --> 00:01:22.429
And there's a lot of boilerplate that goes
into it, like it's, and it's not just

19
00:01:22.429 --> 00:01:26.425
the code, standing up an express server
is pretty fast if you've done it before.

20
00:01:26.425 --> 00:01:30.327
Or if you look at FASTA phi or
some of the other options out there,

21
00:01:30.327 --> 00:01:32.870
they've made it very straightforward.

22
00:01:32.870 --> 00:01:37.510
So this isn't knocking on the technology,
it's more that after you

23
00:01:37.510 --> 00:01:42.150
build your Express server, so
you write that boilerplate, right?

24
00:01:42.150 --> 00:01:44.215
You've got to set up the server,
you've got to set up routing,

25
00:01:44.215 --> 00:01:45.800
you've got to do all of that.

26
00:01:45.800 --> 00:01:49.570
Then you have to get
that deployed somewhere.

27
00:01:49.570 --> 00:01:53.330
So you need to figure out
how do I get a node service.

28
00:01:53.330 --> 00:01:54.620
Deployed to the internet, okay.

29
00:01:54.620 --> 00:01:57.909
Well to do that,
I probably need to install like Docker or

30
00:01:57.909 --> 00:02:02.241
something because I'm gonna need to
deploy this out to whatever service.

31
00:02:02.241 --> 00:02:06.330
And if it's gonna scale, I need to be
able to deploy it to a lot of machines.

32
00:02:06.330 --> 00:02:10.136
And while, if I want to be able to
do that, maybe I need Kubernetes and

33
00:02:10.136 --> 00:02:13.480
suddenly You're so
far away from the original problem.

34
00:02:13.480 --> 00:02:15.900
You started out trying
to handle an auth call.

35
00:02:15.900 --> 00:02:18.070
That was what you wanted
to do is send an auth call.

36
00:02:18.070 --> 00:02:21.004
And you've moved three,
four steps deeper into the stack,

37
00:02:21.004 --> 00:02:24.990
trying to figure out how to make sure
this auth call is globally available.

38
00:02:24.990 --> 00:02:28.407
And it's gonna stand up to your launch day
traffic because you took out a giant ad

39
00:02:28.407 --> 00:02:32.360
somewhere in New York Expecting hundreds
of 1000s of people to try this at once.

40
00:02:32.360 --> 00:02:35.460
There's all these things that
just start to pile up, and

41
00:02:35.460 --> 00:02:37.810
suddenly you're not doing the job.

42
00:02:37.810 --> 00:02:41.030
You're doing all this Yak
shaving to get you to the job.

43
00:02:41.030 --> 00:02:43.540
And that is not fun,
that's not what we wanna do.

44
00:02:43.540 --> 00:02:45.300
That's not how we wanna spend our time.

45
00:02:45.300 --> 00:02:53.640
So instead, we want to be looking at how
can we just do the thing we came to do.

46
00:02:53.640 --> 00:02:57.359
And that's where serverless functions
emerged as a really good pattern,

47
00:02:57.359 --> 00:02:59.350
especially for jam stack sites.

48
00:02:59.350 --> 00:03:04.486
Because in the vast majority of cases,
you have one off server needs,

49
00:03:04.486 --> 00:03:08.080
make this off call, process this form.

50
00:03:08.080 --> 00:03:12.234
Pull this image that only comes from
a like a you wanna circumvent cores,

51
00:03:12.234 --> 00:03:15.230
something like that where
you wanna do a thing.

52
00:03:15.230 --> 00:03:18.140
You can't do it on the client,
you don't wanna stand up a server.

53
00:03:18.140 --> 00:03:24.278
A server less function lets you write
just a little bit of code that is server.

54
00:03:24.278 --> 00:03:27.278
And then it will automatically deploy and
scale and

55
00:03:27.278 --> 00:03:29.380
do all the stuff that it needs to do.

56
00:03:30.470 --> 00:03:34.090
So all you have to do is actually write
the little bit of code that you need.

57
00:03:34.090 --> 00:03:37.635
That is the power of this, right?

58
00:03:37.635 --> 00:03:40.935
I as a front end developer or
front end focus developer.

59
00:03:40.935 --> 00:03:43.415
I spend most of my time building for
the web.

60
00:03:43.415 --> 00:03:47.865
I can and I have done DevOps things.

61
00:03:47.865 --> 00:03:51.592
I can muddle my way through
whatever tutorial to figure out how

62
00:03:51.592 --> 00:03:55.410
to scale a server and
make sure it doesn't fall down.

63
00:03:55.410 --> 00:03:56.759
It's not what I'm best at,

64
00:03:56.759 --> 00:04:00.520
it's not even a thing that I would
say that I'm particularly good at.

65
00:04:00.520 --> 00:04:01.870
It's just a thing I can do.

66
00:04:03.620 --> 00:04:05.790
Writings node logical I'm good at that,

67
00:04:05.790 --> 00:04:10.420
that's like I can write JavaScript logic
that is absolutely within my wheelhouse.

68
00:04:10.420 --> 00:04:14.827
So if I can just do that part, and
then all the OPSI things happen for

69
00:04:14.827 --> 00:04:18.530
me as part of deploying
a serverless function.

70
00:04:18.530 --> 00:04:21.722
Suddenly I have a lot of capabilities
that I otherwise would have talked

71
00:04:21.722 --> 00:04:22.750
myself out of.

72
00:04:22.750 --> 00:04:24.640
Well, I'm not gonna deploy
this image service,

73
00:04:24.640 --> 00:04:26.350
because I don't wanna set up a server for
it.

74
00:04:26.350 --> 00:04:29.637
Or it would cost me a lot of money to
run a server that could handle this

75
00:04:29.637 --> 00:04:30.340
type of work.

76
00:04:30.340 --> 00:04:34.580
So I'm gonna skip this project Now with
serverless, like servos, deploys for free.

77
00:04:34.580 --> 00:04:38.030
You can get a whole lot of serverless you,
before it starts to cost you money.

78
00:04:38.030 --> 00:04:41.510
So suddenly I'm unblocked,
I can have a lot of ideas.

79
00:04:41.510 --> 00:04:44.540
I can try a lot of weird stuff,
and it's fast.

80
00:04:44.540 --> 00:04:47.280
I can deploy it,
I can get a serverless function deployed.

81
00:04:47.280 --> 00:04:50.729
Actually, why don't we just write
our first serverless function and

82
00:04:50.729 --> 00:04:52.970
just look at how fast this is to do.

83
00:04:52.970 --> 00:04:56.468
So I'm in my source folder,
I'm gonna create API and

84
00:04:56.468 --> 00:04:59.060
let's just do like a hello dot j s.

85
00:04:59.060 --> 00:05:04.950
And for this to work,
we go export default function handler.

86
00:05:04.950 --> 00:05:08.512
This is gonna give us a request and
a response object and

87
00:05:08.512 --> 00:05:11.775
I can send back something
like requests and okay.

88
00:05:13.405 --> 00:05:19.864
Right now this is not a particularly
fancy setup but if I run my server now.

89
00:05:23.366 --> 00:05:28.670
Because we're using Gatsby functions, and
because nullified of can recognize that

90
00:05:28.670 --> 00:05:33.900
and run everything, we're able to locally
work with server light capabilities.

91
00:05:33.900 --> 00:05:37.180
And then when we deploy this,
it's also just it's gonna just work.

92
00:05:37.180 --> 00:05:40.820
And so Gatsby sets us up where we
go to API, and then I go to hello.

93
00:05:40.820 --> 00:05:44.641
It says OK and if I go in here and
change it and I can say hello,

94
00:05:44.641 --> 00:05:48.780
front end masters, and
I'm gonna refresh this and there we go.

95
00:05:48.780 --> 00:05:52.970
So I'm now locally developing with, node.

96
00:05:52.970 --> 00:05:58.240
If you've seen express before,
this is kind of the express.

97
00:05:58.240 --> 00:06:01.241
Pattern where you get the request and
the response object, and

98
00:06:01.241 --> 00:06:03.330
then you can do whatever you want with it.

99
00:06:03.330 --> 00:06:07.535
And like if we wanted to send back JSON,
we can just say,

100
00:06:07.535 --> 00:06:12.465
the message is Hello front end masters,
and now we got JSON back.

101
00:06:12.465 --> 00:06:15.386
So we can do,
there's a lot here a lot that we're

102
00:06:15.386 --> 00:06:18.307
capable of doing without
having to learn a lot and

103
00:06:18.307 --> 00:06:22.960
without having to figure out like,
if I push this, it's just gonna be live.

104
00:06:22.960 --> 00:06:24.230
I don't have to deploy it.

105
00:06:24.230 --> 00:06:28.180
I don't have to scale it, I don't have to
think about what my uptime guarantees are.

106
00:06:28.180 --> 00:06:32.056
This is just up and running, and it's
globally available, and it's fast, and

107
00:06:32.056 --> 00:06:33.170
I'm happy.

108
00:06:33.170 --> 00:06:37.542
So that's the power of what we're doing
here is we're really unlocking a whole

109
00:06:37.542 --> 00:06:42.640
new area of innovation for web developers
by introducing these serverless functions.

110
00:06:42.640 --> 00:06:44.966
So if you've never tried them before,
you looked at them,

111
00:06:44.966 --> 00:06:49.140
you thought they were too hard, or it was
just, I don't wanna learn another thing.

112
00:06:49.140 --> 00:06:50.860
It's too late you already learned it,
I'm sorry.

113
00:06:50.860 --> 00:06:55.010
And now you can do it, so
don't let this block you anymore.

114
00:06:55.010 --> 00:06:58.180
Go out there and try stuff,
go build some ambitious things.

