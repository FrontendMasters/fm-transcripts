WEBVTT

1
00:00:00.380 --> 00:00:04.650
We are now in pretty good shape for
diving into these serverless functions.

2
00:00:05.670 --> 00:00:10.881
So serverless functions
are new thing to Gatsby,

3
00:00:10.881 --> 00:00:13.742
not a new thing in general.

4
00:00:13.742 --> 00:00:18.651
So if you look at,
when the Jamstack came out

5
00:00:18.651 --> 00:00:22.770
as a general architecture, right?

6
00:00:22.770 --> 00:00:27.500
There's this idea of precompile things,
decouple your front end,

7
00:00:27.500 --> 00:00:31.413
serve it on a CDN,
these are such powerful concepts, but

8
00:00:31.413 --> 00:00:36.404
there are things that you'll need to
do that can't be done client site.

9
00:00:36.404 --> 00:00:41.458
You'll find yourself in
a situation where you need to, for

10
00:00:41.458 --> 00:00:47.840
example, process a form input or
send off an authenticated call to an API.

11
00:00:47.840 --> 00:00:51.228
If you're working with
a third party service,

12
00:00:51.228 --> 00:00:55.960
I wanna make a request to auth zero
to see if somebody is logged in.

13
00:00:55.960 --> 00:00:58.630
I'm going to get a token
that has to be private.

14
00:00:58.630 --> 00:01:01.070
I can't put that in my client side code.

15
00:01:01.070 --> 00:01:03.598
So that creates a lot of challenges for

16
00:01:03.598 --> 00:01:08.900
front end developers because you'd
find yourself standing up a server.

17
00:01:08.900 --> 00:01:13.811
For one thing, like all I need
to do is make this auth call,

18
00:01:13.811 --> 00:01:18.390
but I have to stand up a whole server for
this.

19
00:01:18.390 --> 00:01:21.066
And there's a lot of
boilerplate that goes into it.

20
00:01:21.066 --> 00:01:22.815
It's and it's not just the code,

21
00:01:22.815 --> 00:01:25.420
like standing up an express
server is pretty fast.

22
00:01:25.420 --> 00:01:28.477
if you've done it before, or
if you look at FASTA phi or

23
00:01:28.477 --> 00:01:32.870
some of the other options out there,
they've made it very straightforward.

24
00:01:32.870 --> 00:01:35.460
So this isn't knocking on Technology.

25
00:01:35.460 --> 00:01:39.435
It's more that after you
build your express server, so

26
00:01:39.435 --> 00:01:42.150
you write that boilerplate, right?

27
00:01:42.150 --> 00:01:44.215
You've got to set up the server,
you've got to set up routing,

28
00:01:44.215 --> 00:01:45.800
you've got to do all of that.

29
00:01:45.800 --> 00:01:49.570
Then you have to get
that deployed somewhere.

30
00:01:49.570 --> 00:01:53.330
So you need to figure out
how do I get a node service.

31
00:01:53.330 --> 00:01:54.370
Deploy to the internet.

32
00:01:54.370 --> 00:01:57.684
Okay, well to do that I probably
need to install like Docker or

33
00:01:57.684 --> 00:02:01.767
something because I'm gonna need to
deploy this out to whatever service and

34
00:02:01.767 --> 00:02:05.652
if it's gonna scale I need to be able
to deploy it to a lot of machines and,

35
00:02:05.652 --> 00:02:08.750
well if I wanna be able to do
that maybe I need Kubernetes.

36
00:02:08.750 --> 00:02:13.306
And suddenly you're so far away from the
original problem you started out trying

37
00:02:13.306 --> 00:02:17.327
to handle an auth call that was what
you wanted to do is send an auth call.

38
00:02:17.327 --> 00:02:20.592
And you've moved three,
four steps deeper into the stack,

39
00:02:20.592 --> 00:02:24.990
trying to figure out how to make sure
this auth call is globally available.

40
00:02:24.990 --> 00:02:28.295
And it's going to stand up to your launch
day traffic because you took out a giant

41
00:02:28.295 --> 00:02:29.590
ad somewhere in New York City.

42
00:02:29.590 --> 00:02:32.360
Expecting, hundreds of 1000s
of people to try this at once.

43
00:02:32.360 --> 00:02:36.700
There's, all these things, that just
start, to pile up and suddenly you're not

44
00:02:36.700 --> 00:02:41.030
doing the job, you're doing all this
yak shaving to get you to the job.

45
00:02:41.030 --> 00:02:43.031
And that is not fun,
that's not what we wanna do,

46
00:02:43.031 --> 00:02:45.300
that's not how we wanna spend our time.

47
00:02:45.300 --> 00:02:50.298
So instead, we want to be looking at,
how can we,

48
00:02:50.298 --> 00:02:53.640
Just do the thing we came to do.

49
00:02:53.640 --> 00:02:57.359
And that's where serverless functions
emerged as a really good pattern,

50
00:02:57.359 --> 00:02:59.350
especially for jam stack sites.

51
00:02:59.350 --> 00:03:03.775
Because in the vast majority of cases,
you have one off server needs,

52
00:03:03.775 --> 00:03:08.725
make this off call, process this form,
pull this image that only comes from,

53
00:03:08.725 --> 00:03:13.601
you wanna circumvent cores.Something
like that where you wanna do a thing,

54
00:03:13.601 --> 00:03:18.140
you can't do it on the client,
you don't wanna set up a server.

55
00:03:18.140 --> 00:03:23.667
A server function, lets you write just a
little bit of code that is server like And

56
00:03:23.667 --> 00:03:26.920
then it will automatically deploy and
scale and

57
00:03:26.920 --> 00:03:29.380
do all the stuff that it needs to do.

58
00:03:30.470 --> 00:03:33.546
So all you have to do is actually write
the little bit of code that you need.

59
00:03:33.546 --> 00:03:36.263
That is the power of this this right?

60
00:03:36.263 --> 00:03:39.995
I as a front end developer or
front end focus developer,

61
00:03:39.995 --> 00:03:43.415
I spend most of my time building for
the web.

62
00:03:43.415 --> 00:03:46.268
I can and I have done DevOps II things.

63
00:03:46.268 --> 00:03:51.025
I can muddle my way through whatever
tutorial to figure out how to

64
00:03:51.025 --> 00:03:55.360
scale a server and
make sure it doesn't fall down.

65
00:03:55.360 --> 00:03:57.110
But it's not what I'm best at.

66
00:03:57.110 --> 00:04:00.520
It's not even a thing that I would
say that I'm particularly good at.

67
00:04:00.520 --> 00:04:01.870
It's just a thing I can do.

68
00:04:03.620 --> 00:04:06.260
Writings node logic,
though I'm good at that.

69
00:04:06.260 --> 00:04:10.420
That's like I can write JavaScript logic
that is absolutely within my wheelhouse.

70
00:04:10.420 --> 00:04:13.892
So if I can just do that part, and
then all the opsi things happen for

71
00:04:13.892 --> 00:04:16.510
me as part of deploying
a serverless function,.

72
00:04:16.510 --> 00:04:20.680
Suddenly, I have a lot of capabilities
that I otherwise would have talked myself

73
00:04:20.680 --> 00:04:23.561
out of, well,
I'm not gonna deploy this image service

74
00:04:23.561 --> 00:04:25.973
because i don't want to
set up a server for it.

75
00:04:25.973 --> 00:04:29.550
It would cost me a lot of money to
run a server that could handle this

76
00:04:29.550 --> 00:04:30.340
type of work.

77
00:04:30.340 --> 00:04:32.390
So, I'm gonna skip this project.

78
00:04:32.390 --> 00:04:34.358
Now with serverless like
serverless deploys for

79
00:04:34.358 --> 00:04:38.030
free you can get a whole lot of serverless
usage before it starts to cost you money.

80
00:04:38.030 --> 00:04:41.510
So suddenly I'm unblocked,
I can have a lot of ideas.

81
00:04:41.510 --> 00:04:43.280
I can try a lot of weird stuff.

82
00:04:43.280 --> 00:04:47.280
And it's fast I can deploy it,
I can get a server less function deployed.

83
00:04:47.280 --> 00:04:50.729
Actually, why don't we just write
our first server less function and

84
00:04:50.729 --> 00:04:52.970
just look at how fast this is to do.

85
00:04:52.970 --> 00:04:57.077
So I'm in my source folder
I'm going to create API and

86
00:04:57.077 --> 00:04:59.647
let's just do like a Hello.js.

87
00:04:59.647 --> 00:05:04.950
And for this to work,
we go export default function handler.

88
00:05:04.950 --> 00:05:08.808
This is going to give us a request and
a response object, and

89
00:05:08.808 --> 00:05:12.215
I can send back something like request,
send, OK.

90
00:05:13.229 --> 00:05:18.151
Right, now this is not
a particularly fancy setup, but

91
00:05:18.151 --> 00:05:23.917
if I run my server now, Because

92
00:05:23.917 --> 00:05:28.837
we're using Gatsby functions and because
netlify dev can can recognize that and

93
00:05:28.837 --> 00:05:33.900
run everything, we're able to locally,
work with server light capabilities.

94
00:05:33.900 --> 00:05:37.180
And then when we deploy this,
it's gonna just work.

95
00:05:37.180 --> 00:05:40.701
And so Gatsby sets us up where we go
to API and then I go to Hello And

96
00:05:40.701 --> 00:05:41.770
it says, okay.

97
00:05:41.770 --> 00:05:46.160
And if I go in here and change it and
I can say, hello, front end masters, and

98
00:05:46.160 --> 00:05:48.780
I'm going to refresh this,
and there we go.

99
00:05:48.780 --> 00:05:53.830
So I'm now locally developing with node.

100
00:05:53.830 --> 00:05:58.240
If you've seen express before,
this is kinda the express.

101
00:05:58.240 --> 00:06:01.198
pattern where you get the request and
the response object and

102
00:06:01.198 --> 00:06:03.330
then you can do whatever you want with it.

103
00:06:03.330 --> 00:06:06.975
And like if we wanted to send
back JSON we can just say,

104
00:06:06.975 --> 00:06:11.283
the message is Hello front end masters and
now we got JSON back.

105
00:06:11.283 --> 00:06:15.581
So there's a lot here there's
a lot that we're capable of doing

106
00:06:15.581 --> 00:06:19.733
without having to learn a lot,
without having to figure out.

107
00:06:19.733 --> 00:06:24.230
If I push this it's just gonna be
live I don't have to deploy it.

108
00:06:24.230 --> 00:06:25.280
I don't have to scale it.

109
00:06:25.280 --> 00:06:28.180
I don't have to think about
what my uptime guarantees are.

110
00:06:28.180 --> 00:06:30.170
This is just up and running.

111
00:06:30.170 --> 00:06:33.170
And it's globally available and
it's fast and I'm happy.

112
00:06:33.170 --> 00:06:37.542
So that's the power of what we're doing
here is we're really unlocking a whole

113
00:06:37.542 --> 00:06:42.640
new area of innovation for web developers
by introducing these serverless functions.

114
00:06:42.640 --> 00:06:45.923
So if you've never tried them before you
looked at them you thought they were too

115
00:06:45.923 --> 00:06:49.140
hard or it was just,
I don't wanna learn another thing.

116
00:06:49.140 --> 00:06:50.860
It's too late you already
learned it I'm sorry.

117
00:06:50.860 --> 00:06:55.010
And now you can do it, so
don't let this block you anymore.

118
00:06:55.010 --> 00:06:58.180
Go out there and
try stuff go build some ambitious things.

