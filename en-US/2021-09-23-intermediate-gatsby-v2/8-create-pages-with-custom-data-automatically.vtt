WEBVTT

1
00:00:00.106 --> 00:00:04.719
We are going to build out some
custom pages, so for the authors,

2
00:00:04.719 --> 00:00:07.464
we can do some pretty standard stuff.

3
00:00:07.464 --> 00:00:12.226
Now that we've got these authors, I wanna
be able to use the just the normal file

4
00:00:12.226 --> 00:00:16.792
based like we're gonna use the author
slug, and we're gonna build a page.

5
00:00:16.792 --> 00:00:21.671
So, let's start there, and
because I didn't add a slug for

6
00:00:21.671 --> 00:00:25.976
the books,
let's also add a helper called slug phi,

7
00:00:25.976 --> 00:00:30.857
which will let us turn the titles
of the books into URL slugs,

8
00:00:30.857 --> 00:00:33.850
so that we can make pages out of them.

9
00:00:33.850 --> 00:00:39.021
So now that I've got this, I'm gonna
start well let's create the page first.

10
00:00:39.021 --> 00:00:42.854
So I'm gonna create a new page in here,
and

11
00:00:42.854 --> 00:00:47.328
we're gonna call this
author Slug.js Now note,

12
00:00:47.328 --> 00:00:52.227
we're using curly braces here,
and then a data type,

13
00:00:52.227 --> 00:00:55.660
and the field we wanna use as the path.

14
00:00:55.660 --> 00:01:00.451
This is a way to dynamically generate
content based on the data in your graph qL

15
00:01:00.451 --> 00:01:00.976
layer.

16
00:01:00.976 --> 00:01:06.412
So by creating this, what I'm able
to do is Gatsby now will say,

17
00:01:06.412 --> 00:01:09.733
hey I see a file, for this author type,

18
00:01:09.733 --> 00:01:14.487
do we have authors,
do those authors have slug fields?

19
00:01:14.487 --> 00:01:20.449
If so, create one page for
each author in this array,

20
00:01:20.449 --> 00:01:26.159
it's a really powerful flow,
It's really nice.

21
00:01:26.159 --> 00:01:28.857
And it lets us get a whole
bunch of stuff done,

22
00:01:28.857 --> 00:01:33.207
very short order without having to
dig into further Gatsby node API's.

23
00:01:34.577 --> 00:01:37.379
And then finally we're
gonna use this slug phi.

24
00:01:37.379 --> 00:01:38.878
What did I import here,
that is not what I wanted.

25
00:01:38.878 --> 00:01:43.615
I wanted graph qL get
slug phi from slug phi.

26
00:01:44.922 --> 00:01:48.860
Okay, so first we're gonna do a query, and

27
00:01:48.860 --> 00:01:53.544
when you generate pages from
a F data type like this,

28
00:01:53.544 --> 00:01:58.759
the way that Gatsby will do it,
is it's gonna run a query,

29
00:01:58.759 --> 00:02:06.510
it'll build a query that is just for the
nodes, the ID and whatever field you used.

30
00:02:06.510 --> 00:02:11.975
So it's gonna generate this query,
for the ID in the slug.

31
00:02:11.975 --> 00:02:16.849
The ID in the slug will then
get passed in the page context,

32
00:02:16.849 --> 00:02:23.723
which to refresh your memory there,
the page context is, Here.

33
00:02:23.723 --> 00:02:28.030
And anything that gets passed here,
is available to the page,

34
00:02:28.030 --> 00:02:33.167
as the page context Prop, and also,
it'll get set as a graph qL variable.

35
00:02:33.167 --> 00:02:37.598
So I have the ability here,
let's do author page and

36
00:02:37.598 --> 00:02:42.545
this is gonna give us a graph qL variable,
which is the ID.

37
00:02:42.545 --> 00:02:45.304
And I don't remember what the type
of the idea is, so let's hover.

38
00:02:47.957 --> 00:02:53.389
And it's an ID type, so
I will say we need to get an ID.

39
00:02:53.389 --> 00:02:55.885
And then I wanna get a single author.

40
00:02:55.885 --> 00:02:58.104
So let's start the server here actually.

41
00:02:59.368 --> 00:03:04.265
So that I can I can build this query
in Gatsby instead of guessing at what

42
00:03:04.265 --> 00:03:05.185
things are.

43
00:03:15.084 --> 00:03:19.325
I think it's gonna yell about my
author page that's created and

44
00:03:19.325 --> 00:03:21.373
not saved, but that's okay.

45
00:03:21.373 --> 00:03:26.621
Let's get into the graphical,
I'm gonna copy paste my query here.

46
00:03:29.292 --> 00:03:33.643
All right, and
then this is expecting a query variable,

47
00:03:33.643 --> 00:03:36.272
which I can grab from down here, so

48
00:03:36.272 --> 00:03:41.200
we'll set an ID and our author ID
will have to find one of those.

49
00:03:41.200 --> 00:03:46.402
So let's, actually maybe start by
running this query so that I can get,

50
00:03:49.898 --> 00:03:55.111
Here is an author ID, so
we'll get this stuff for Nk Jemisin,

51
00:03:55.111 --> 00:04:01.047
so here will be our ID, I'm gonna
set that value and that's gonna be.

52
00:04:03.263 --> 00:04:06.887
The variable that's set by Gatsby.

53
00:04:06.887 --> 00:04:12.507
And then inside of this,
I wanna get an author and

54
00:04:12.507 --> 00:04:15.669
I want their ID to equal ID.

55
00:04:19.334 --> 00:04:21.260
Not equals why did it create that?

56
00:04:23.052 --> 00:04:27.788
Okay, inside of that I can get
their name and their slug and

57
00:04:27.788 --> 00:04:33.115
their books and see let's not
filter on that's not what I wanna.

58
00:04:33.115 --> 00:04:40.684
So what I want is,
with their name and then their books.

59
00:04:40.684 --> 00:04:44.243
For each book the ID,
the name, the series,

60
00:04:44.243 --> 00:04:49.115
the series order,
because we're gonna on each author page,

61
00:04:49.115 --> 00:04:53.519
to display their name, and
then a list of their books and

62
00:04:53.519 --> 00:04:59.074
if they are in a series I wanna say
like book one of the whatever series.

63
00:04:59.074 --> 00:05:03.549
So this will be our query and
this is what.

64
00:05:04.995 --> 00:05:09.053
Expecting type string
okay let's do a string.

65
00:05:10.066 --> 00:05:11.042
There we go.

66
00:05:11.042 --> 00:05:14.662
Okay, so it wants to string glad we
checked it because that would have failed

67
00:05:14.662 --> 00:05:15.689
otherwise, right?

68
00:05:15.689 --> 00:05:19.580
Again, a reason that I really liked this
flow of building the query in the browser,

69
00:05:19.580 --> 00:05:22.693
instead of trying to just write them
by hand is you get to run them and

70
00:05:22.693 --> 00:05:24.998
make sure the data comes
back the way you expect.

71
00:05:24.998 --> 00:05:29.910
But here we go, so if I get an author
with an ID of this string here generated

72
00:05:29.910 --> 00:05:34.902
by Gatsby, then I'm able to pull up
their name and a list of their books, so

73
00:05:34.902 --> 00:05:37.160
let's copy this move into here.

74
00:05:39.754 --> 00:05:45.112
All right, and now,
when we build out our page,

75
00:05:45.112 --> 00:05:50.209
that page is gonna have
access to this data, so

76
00:05:50.209 --> 00:05:57.021
let's do export default author page,
and that has the data.

77
00:05:57.021 --> 00:06:02.110
And in our data, we will have let's
start with the basics I guess

78
00:06:02.110 --> 00:06:08.153
we're gonna get the concept will be
the author and that'll be data author.

79
00:06:08.153 --> 00:06:13.999
And then we'll have our books,
which will be author dot books, okay.

80
00:06:13.999 --> 00:06:21.579
And then we can return
Just do a regular old div,

81
00:06:21.579 --> 00:06:26.447
I'm gonna do the author name And
then before we

82
00:06:26.447 --> 00:06:30.082
try to do anything with the books just
yet, let's just dump it and look at it.

83
00:06:37.983 --> 00:06:42.525
Okay, so this should put us in pretty
good shape, let's get out here and

84
00:06:42.525 --> 00:06:45.960
let's look at our 404 page,
what don't you like?

85
00:06:45.960 --> 00:06:48.367
Gotta call it a function
if you're using a function.

86
00:06:50.680 --> 00:06:55.930
All right, so here is our list and
you can see it generated a thing for

87
00:06:55.930 --> 00:07:00.444
each one, so let's jump in here,
and we've got a page and

88
00:07:00.444 --> 00:07:03.784
that page includes the book information.

89
00:07:03.784 --> 00:07:05.695
So how do we wanna do linking,

90
00:07:05.695 --> 00:07:09.522
let's think about the way that
we wanna books to be linked.

91
00:07:09.522 --> 00:07:12.648
I like my URLs to be descriptive, so

92
00:07:12.648 --> 00:07:18.189
if books are related to each other,
I want them to tell me that.

93
00:07:18.189 --> 00:07:22.735
So for a book like dark matter,
it's not part of a series, so

94
00:07:22.735 --> 00:07:27.030
I would want the URL to be slash book,
slash dark matter.

95
00:07:27.030 --> 00:07:31.697
But for one of these NK Jemisin
books that are part of the series,

96
00:07:31.697 --> 00:07:35.674
I would actually want that to
be included in the URL, so

97
00:07:35.674 --> 00:07:41.912
I would want it to be /books, or /book/the
broken Earth trilogy/the stones guy.

98
00:07:41.912 --> 00:07:45.927
That's the way that I would want that
to work so that I know in my head,

99
00:07:45.927 --> 00:07:48.973
that I'm looking at a book
that is part of a series and

100
00:07:48.973 --> 00:07:54.550
I can kinda group those just by looking
at URLs, and understand what I'm reading.

101
00:07:54.550 --> 00:07:58.058
So, that means we need to generate our
URLs a little bit differently, and

102
00:07:58.058 --> 00:08:00.941
I also wanna make sure that these
show up in order, like if for

103
00:08:00.941 --> 00:08:05.400
whatever reason these got entered as book
two went in first and then one and three.

104
00:08:05.400 --> 00:08:08.497
I don't want that to show up on the site,
so I wanna sort them as well.

105
00:08:08.497 --> 00:08:14.185
So I'm gonna create a little helper
function here that we're gonna

106
00:08:14.185 --> 00:08:19.689
call sort and extend books, and
that's gonna accept our books.

107
00:08:21.053 --> 00:08:23.789
And inside of it,
we're gonna return the books and

108
00:08:23.789 --> 00:08:26.471
we're just gonna do some
function stuff with it.

109
00:08:26.471 --> 00:08:31.504
So let's do some chaining,
well we'll start by sorting,

110
00:08:31.504 --> 00:08:36.838
and we'll get book A, book B,
and we're gonna return whether

111
00:08:36.838 --> 00:08:41.485
the a.seriesOrder is less
than the b.seriesOrder.

112
00:08:42.575 --> 00:08:45.976
And I can't remember exactly
how this works like,

113
00:08:45.976 --> 00:08:50.024
I always have to try this both ways and
then see what happens.

114
00:08:50.024 --> 00:08:55.397
If you do a minus b goes ascending and
if you go b minus a, it goes descending

115
00:08:55.397 --> 00:09:00.774
because it's basically if it's a positive
value it moves up in the list,

116
00:09:00.774 --> 00:09:05.313
and if it's a negative value it
moves down in the list I think.

117
00:09:05.313 --> 00:09:08.986
So it's, I don't know that the sword
is a little bit confusing but

118
00:09:08.986 --> 00:09:13.137
effectively this will give us what we
want, It'll put it in series order.

119
00:09:13.137 --> 00:09:20.127
Then, we're going to map across each book,
and I wanna extend each book.

120
00:09:20.127 --> 00:09:25.190
So I'm gonna set up this function here and
inside of it,

121
00:09:25.190 --> 00:09:32.209
let's get the series first, so if there
is a series, we wanna do some stuff.

122
00:09:32.209 --> 00:09:37.564
I want to just create some
like display text for this,

123
00:09:37.564 --> 00:09:42.205
so we'll say book series and
then we'll say,

124
00:09:42.205 --> 00:09:47.681
like it's book number one,
booked dot series order.

125
00:09:47.681 --> 00:09:52.382
So this would be like the broken Earth
trilogy book one, book two, book three,

126
00:09:52.382 --> 00:09:53.726
okay, that's good.

127
00:09:53.726 --> 00:09:58.181
And then if we don't have that,
I wanted to just be empty text, so

128
00:09:58.181 --> 00:10:01.920
we'll just leave it blank
if you don't have a series.

129
00:10:01.920 --> 00:10:06.112
So then we can get a display name and

130
00:10:06.112 --> 00:10:14.479
that display name is going to be the book,
name and the series.

131
00:10:14.479 --> 00:10:18.559
So if it's empty,
it'll just be white space we don't care,

132
00:10:18.559 --> 00:10:22.325
if it does have a series and
it'll be the name of the book,

133
00:10:22.325 --> 00:10:26.685
and then in parentheses,
the broken earth trilogy book one.

134
00:10:26.685 --> 00:10:30.552
Next, we're gonna set up the book slug.

135
00:10:30.552 --> 00:10:33.699
And the book slug is gonna use slug phi,
and

136
00:10:33.699 --> 00:10:37.727
we just pass in the book.name
I wanna to be lowercase.

137
00:10:37.727 --> 00:10:42.705
So this will, passing this option in
just means that instead of being like

138
00:10:42.705 --> 00:10:46.738
capital T, the broken Earth,
it'll be the broken earth.

139
00:10:46.738 --> 00:10:49.795
And it converts into a kebab
case which is kind of nice, so

140
00:10:49.795 --> 00:10:51.779
it's what you would expect in a URL.

141
00:10:53.506 --> 00:10:57.426
Finally, we wanna check,
we wanna actually build out the path but

142
00:10:57.426 --> 00:11:02.116
it's gonna be a different path based on
whether or not we have a series or not, so

143
00:11:02.116 --> 00:11:06.260
let's start with saying if
the book.series is not, no.

144
00:11:06.260 --> 00:11:09.254
Then I wanna set the series slug.

145
00:11:10.404 --> 00:11:15.655
Which will be the same general
approach slug phi bookseries.

146
00:11:17.388 --> 00:11:18.644
And we'll set lower to true.

147
00:11:21.974 --> 00:11:29.329
And then down here we will set the path to
be, book and then we'll do series slug.

148
00:11:30.628 --> 00:11:38.536
And book slug, okay, so that's what we'll
get if we have a book with a series.

149
00:11:38.536 --> 00:11:43.548
Now if we don't have a series,
We will instead

150
00:11:43.548 --> 00:11:47.716
set the path to be just regular old book.

151
00:11:47.716 --> 00:11:49.336
And then book's slug.

152
00:11:51.352 --> 00:11:53.065
All right, happy with that.

153
00:11:53.065 --> 00:11:56.555
And then let's just return
our modified books, so

154
00:11:56.555 --> 00:12:00.287
we're gonna put back all
the regular book things, but

155
00:12:00.287 --> 00:12:05.822
then we'll add in the display name and
the path as additional fields on our book.

156
00:12:05.822 --> 00:12:08.147
So that means that down here,

157
00:12:08.147 --> 00:12:12.339
we just wanna change this out sorts and
extend books.

158
00:12:14.116 --> 00:12:18.580
Okay, so if we save this,
go figure out what I typoed,

159
00:12:18.580 --> 00:12:21.308
I pluralized function somehow.

160
00:12:22.904 --> 00:12:23.693
There we go.

161
00:12:23.693 --> 00:12:27.841
Alright so now we can see that it's
been extended each one of these now has

162
00:12:27.841 --> 00:12:31.241
a display name, that is doing
what we want and it has a path,

163
00:12:31.241 --> 00:12:35.300
that includes the the series name and
then the regular book name.

164
00:12:35.300 --> 00:12:40.226
And if we go out to one that's not part of
a series, we can see the display name is

165
00:12:40.226 --> 00:12:43.897
just the book name, and
the path is book and the book name.

166
00:12:43.897 --> 00:12:46.270
And these are slug phi, and
so now we can link to these.

167
00:12:46.270 --> 00:12:51.343
So let's update our output
then to actually do that,

168
00:12:51.343 --> 00:12:58.783
so instead of just dumping this, we're
gonna instead we'll create a list and

169
00:12:58.783 --> 00:13:03.875
let's tag that,
will say Books by [author.name]

170
00:13:06.958 --> 00:13:12.499
And inside of this,
we'll do a books.map and

171
00:13:12.499 --> 00:13:17.329
for each book, we're gonna output some

172
00:13:17.329 --> 00:13:24.582
JSX Okay,

173
00:13:24.582 --> 00:13:29.550
so we're gonna do a list item,
that'll have a key of book that ID.

174
00:13:30.720 --> 00:13:34.206
That's a guaranteed unique string and
Gatsby so

175
00:13:34.206 --> 00:13:38.039
we can trust it to work, and
I wanna bring in the link.

176
00:13:39.804 --> 00:13:41.920
That's not coming in from Gatsby, is it?

177
00:13:41.920 --> 00:13:46.074
All right, so let me import link,
we've already got it,

178
00:13:46.074 --> 00:13:50.718
import link from Gatsby, and
then we're gonna link to the booked,

179
00:13:50.718 --> 00:13:55.292
dot path, and we're gonna show,
the book, dot, display name.

180
00:13:57.520 --> 00:13:58.358
All right, and

181
00:13:58.358 --> 00:14:03.195
finally we'll just add a link at
the bottom to head back to the homepage.

182
00:14:03.195 --> 00:14:06.219
Or sorry, to head to an author's page,
this doesn't exist, yet

183
00:14:06.219 --> 00:14:07.695
we'll build this next.

184
00:14:07.695 --> 00:14:10.895
But, rather than having to come back
in here and remembering to do it,

185
00:14:10.895 --> 00:14:12.105
let's just set it up now.

186
00:14:12.105 --> 00:14:16.137
So do an arrow pointing left,
this is an HTML entity, and

187
00:14:16.137 --> 00:14:18.657
then we'll go back to all authors.

188
00:14:22.328 --> 00:14:26.351
And if I save that,
look at it go we got ourselves a page.

189
00:14:26.351 --> 00:14:30.806
So if I come in here go to NK Jemisin,
here's a list of all those books and

190
00:14:30.806 --> 00:14:35.187
if I click to it, we can see that it's
taking us to the right place, but

191
00:14:35.187 --> 00:14:37.450
we haven't built those pages yet.

192
00:14:37.450 --> 00:14:39.241
So let's build out this authors page.

193
00:14:40.997 --> 00:14:45.555
And to do that, we're gonna just
do a plain old page, right.

194
00:14:45.555 --> 00:14:49.352
And this is what's nice about this is we
we did all this work to create custom

195
00:14:49.352 --> 00:14:53.392
data, but now we can just build pages
the way that we would normally build them,

196
00:14:53.392 --> 00:14:54.447
It's really nice.

197
00:14:54.447 --> 00:14:58.920
So we're gonna import everything
as react from react, and

198
00:14:58.920 --> 00:15:03.938
then we'll get out graph qL and
we're gonna need the link as well.

199
00:15:05.323 --> 00:15:07.722
Well that helping is not helping is it.

200
00:15:10.444 --> 00:15:15.826
From Gatsby, and
we're gonna export a const of query,

201
00:15:15.826 --> 00:15:18.698
that's gonna be a tag graph qL

202
00:15:22.719 --> 00:15:27.591
Query, and
this one doesn't need any variables,

203
00:15:27.591 --> 00:15:32.018
so we could actually do
this as a static query.

204
00:15:32.018 --> 00:15:35.592
But, I don't know why I didn't I
think I was just copy pasting thing.

205
00:15:35.592 --> 00:15:40.387
So, we'll do it this way all author and
inside of our author we're

206
00:15:40.387 --> 00:15:44.507
gonna get the nodes, and
we want their name and their slug

207
00:15:48.946 --> 00:15:53.092
So then we can export our component,
which will be the default

208
00:15:53.092 --> 00:15:57.493
function called authors page,
and that's gonna get some data.

209
00:16:00.377 --> 00:16:01.402
And let's.

210
00:16:02.531 --> 00:16:08.448
Pull out those authors,
there'll be data.allauthor.nodes.

211
00:16:08.448 --> 00:16:15.210
And you know, we should, let's make this
simpler like, why overcomplicate this?

212
00:16:15.210 --> 00:16:18.230
Let's cut out cognitive loops or
cognitive overhead.

213
00:16:18.230 --> 00:16:19.739
So instead we're gonna use.

214
00:16:21.459 --> 00:16:27.079
Use static query and instead of having
to pass things around in props,

215
00:16:27.079 --> 00:16:33.085
why don't we just get our data,
right out of use static query.

216
00:16:33.085 --> 00:16:39.614
Right when you don't need to use
The query, this makes more sense to me,

217
00:16:39.614 --> 00:16:44.480
It's hey I wanna use this query, here's
the data that I want, give it to me.

218
00:16:44.480 --> 00:16:46.658
And then we get our everything
else stays the same.

219
00:16:46.658 --> 00:16:49.238
So functionally what we
just did is identical but,

220
00:16:49.238 --> 00:16:52.778
in terms of the the cognitive overhead
of somebody reading this code,

221
00:16:52.778 --> 00:16:54.768
if they're not familiar with Gatsby.

222
00:16:54.768 --> 00:16:58.613
This doesn't require you to know that
the query will get turned into data.

223
00:16:58.613 --> 00:17:02.833
So unless you're using again,
unless you're working with variables,

224
00:17:02.833 --> 00:17:05.700
it's usually easier to
just do the simple thing.

225
00:17:05.700 --> 00:17:09.842
So let's start by setting up a graph
qL fragment because we don't have a JSX

226
00:17:09.842 --> 00:17:14.401
fragment instead, so that we don't end
up with junky markup that we don't need.

227
00:17:14.401 --> 00:17:17.188
So we'll do a listing of authors, and

228
00:17:17.188 --> 00:17:21.119
then we'll do an unordered list and
for each author.

229
00:17:23.501 --> 00:17:25.326
We're gonna return.

230
00:17:26.591 --> 00:17:31.085
Some stuff missing,
closing parentheses again.

231
00:17:31.085 --> 00:17:31.923
Here we go.

232
00:17:31.923 --> 00:17:37.751
This is gonna be a list item, and
it's gonna have a key of author dot slug,

233
00:17:37.751 --> 00:17:42.650
that's a unique value that we can trust,
then we can link to.

234
00:17:42.650 --> 00:17:47.032
And we're gonna make this author dot slug.

235
00:17:49.492 --> 00:17:53.556
And we'll put in the author's name,
author dot name.

236
00:17:56.126 --> 00:17:59.938
Alright, I think I think we've done it.

237
00:17:59.938 --> 00:18:00.966
What am I missing here?

238
00:18:00.966 --> 00:18:04.045
I'm missing a call Closing curly brace.

239
00:18:05.905 --> 00:18:06.929
Let's save it.

240
00:18:10.007 --> 00:18:10.940
Let's look at it.

241
00:18:12.050 --> 00:18:16.644
All right,
we now have our authors pulling in and

242
00:18:16.644 --> 00:18:21.840
we have a working website
based on our custom data.

243
00:18:21.840 --> 00:18:24.649
So, that's great, but
we did throw ourselves

244
00:18:24.649 --> 00:18:28.879
a little bit of a curveball here,
because now when we look at our books.

245
00:18:28.879 --> 00:18:31.546
The books have different URL structure, so

246
00:18:31.546 --> 00:18:36.449
we can't just throw in like the book file
thing, we're gonna need to build these

247
00:18:36.449 --> 00:18:40.723
book links manually these pages
are gonna have to get built manually.

248
00:18:40.723 --> 00:18:46.110
&gt;&gt; So, calculating the slug globally
each time can become repetitive Is

249
00:18:46.110 --> 00:18:51.769
there a way to add that slug as a property
in the graph, do you all tree using

250
00:18:51.769 --> 00:18:58.004
this page generation technique by using
the naming trip, not Create Page hook?

251
00:18:58.004 --> 00:19:04.517
&gt;&gt; 100% Yeah, we could have,
added another resolver in here and

252
00:19:04.517 --> 00:19:10.562
so for example, the way we did a bio link,
we could do a slug and

253
00:19:10.562 --> 00:19:15.823
just slug phi, the series and
slug phi the book name.

254
00:19:15.823 --> 00:19:19.058
Why I didn't do that, great question.

255
00:19:19.058 --> 00:19:23.859
I don't know why I didn't do that,
it honestly is probably a better move

256
00:19:23.859 --> 00:19:28.995
because then we wouldn't have to
calculate it in multiple places, so yeah.

257
00:19:28.995 --> 00:19:33.794
If I was gonna refactor this that'd
be a great place to refactor this

258
00:19:33.794 --> 00:19:38.422
code would be to just add a slug here and
then set that as a string and

259
00:19:38.422 --> 00:19:43.077
run slug phi in this file,
instead of having to do it everywhere.

260
00:19:43.077 --> 00:19:47.329
But, in the interest of not throwing
myself too many curveballs cuz we

261
00:19:47.329 --> 00:19:51.883
got a lot to cover and I don't wanna
run out of time, I'm gonna not do that.

262
00:19:51.883 --> 00:19:56.860
So bear with me as we do some little bit
of copy pasting around to make this work.

