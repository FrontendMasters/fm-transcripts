WEBVTT

1
00:00:00.210 --> 00:00:02.651
We are gonna build out some custom pages.

2
00:00:02.651 --> 00:00:07.545
So for the authors,
we can do some pretty standard stuff.

3
00:00:07.545 --> 00:00:12.464
Now that we've got these authors, I wanna
be able to use just the normal file based,

4
00:00:12.464 --> 00:00:16.940
like we're gonna use the author slug and
we're gonna build a page.

5
00:00:16.940 --> 00:00:22.759
So let's start there and because I didn't
add a slug for the books, let's also add.

6
00:00:22.759 --> 00:00:28.216
A helper, called slugify,
which will let us turn the titles

7
00:00:28.216 --> 00:00:33.899
of the books into URL slugs so
that we can make pages out of them.

8
00:00:33.899 --> 00:00:38.250
So now that I've got this, I'm going to
start well, let's create the page first.

9
00:00:39.260 --> 00:00:44.276
So I'm going to create a new page in here,
and

10
00:00:44.276 --> 00:00:49.430
we're gonna call this (Author slug).js.

11
00:00:49.430 --> 00:00:52.328
Now note,
we're using curly braces here, and

12
00:00:52.328 --> 00:00:55.671
then a data type and
the field we want to use as the path.

13
00:00:55.671 --> 00:01:00.575
This is a way to dynamically generate
content based on the data in your graphQL

14
00:01:00.575 --> 00:01:01.110
layer.

15
00:01:01.110 --> 00:01:06.834
So by creating this, what I'm able
to do is Gatsby now will say,

16
00:01:06.834 --> 00:01:12.470
hi, I see a file for
this author type, do we have authors?

17
00:01:12.470 --> 00:01:14.770
Do those authors have slug fields?

18
00:01:14.770 --> 00:01:20.072
If so, create one page for
each author in this array.

19
00:01:20.072 --> 00:01:23.920
It's a really powerful flows,
really, really nice.

20
00:01:23.920 --> 00:01:28.659
And lets us get a whole bunch
of stuff done very short order

21
00:01:28.659 --> 00:01:33.310
without having to dig into
further Gatsby node API's.

22
00:01:34.670 --> 00:01:37.020
And then finally we're
going to use this slagify.

23
00:01:37.020 --> 00:01:38.000
What did I import here?

24
00:01:38.000 --> 00:01:44.962
That is not what I wanted I wanted
graphQL get slugify from slugify.

25
00:01:44.962 --> 00:01:48.642
Okay so
first we're going to do a query and

26
00:01:48.642 --> 00:01:53.692
when you generate pages from
a from a data type like this,

27
00:01:53.692 --> 00:01:58.843
the way that Gatsby will do it
is it's going to run a query,

28
00:01:58.843 --> 00:02:06.510
it'll build a query that is just for the
nodes, the ID and whatever field you used.

29
00:02:06.510 --> 00:02:12.080
So it's going to generate this query for
the ID in the slug.

30
00:02:12.080 --> 00:02:17.382
The ID and the slug will then
get passed in the page context,

31
00:02:17.382 --> 00:02:23.890
which is to refresh your memory there,
the page context is here.

32
00:02:23.890 --> 00:02:28.559
And anything that gets passed here
is available to the page as the page

33
00:02:28.559 --> 00:02:33.210
context prop, and
also it'll get set as a graphQL variable.

34
00:02:33.210 --> 00:02:38.990
So I have the ability here,
let's do AuthorPage.

35
00:02:38.990 --> 00:02:42.675
And this is going to give us
a graphQL variable, which is the ID.

36
00:02:42.675 --> 00:02:46.277
And I don't remember what the type
of the ID is so let's hover.

37
00:02:46.277 --> 00:02:52.440
And it's an ID type so
I will say we need to get an ID.

38
00:02:53.540 --> 00:02:55.928
And then I wanna get a single author.

39
00:02:55.928 --> 00:02:58.030
So let's start the server here actually.

40
00:02:59.410 --> 00:03:04.202
So that I can I can build this query
in Gatsby instead of guessing at what

41
00:03:04.202 --> 00:03:05.106
things are.

42
00:03:15.130 --> 00:03:20.031
I think it's gonna yell about my author
page that's created and not saved, but

43
00:03:20.031 --> 00:03:20.992
that's okay.

44
00:03:20.992 --> 00:03:26.560
Let's get into the graphical,
I'm going to copy paste my query here.

45
00:03:29.334 --> 00:03:30.336
All right, and

46
00:03:30.336 --> 00:03:35.530
then this is expecting a query variable
which I can grab from down here.

47
00:03:35.530 --> 00:03:41.096
So we'll set an ID and our author
ID we'll have to find one of those.

48
00:03:41.096 --> 00:03:44.975
So let's actually maybe start
by running this query so

49
00:03:44.975 --> 00:03:51.430
that I can get, Here is an author ID.

50
00:03:51.430 --> 00:03:53.247
So we'll get this stuff for n-k-jemisin.

51
00:03:53.247 --> 00:03:58.771
So here will be our ID,
I'm going to set that value,

52
00:03:58.771 --> 00:04:05.060
and that's going to be
the variable that's set by Gatsby.

53
00:04:05.060 --> 00:04:11.024
And then inside of this,
I want to get an author and

54
00:04:11.024 --> 00:04:14.014
I want their ID to equal.

55
00:04:14.014 --> 00:04:21.090
ID, not equals why did it create that?

56
00:04:23.240 --> 00:04:28.741
Okay, inside of that I can get their
name and their slug and their books and

57
00:04:28.741 --> 00:04:33.104
see let's not filter on that,
that's not what I wanted.

58
00:04:33.104 --> 00:04:38.340
So what I want, is I want their,
start with their name.

59
00:04:38.340 --> 00:04:40.764
And then I want their books.

60
00:04:40.764 --> 00:04:45.115
For each book, I want the ID,
I want the name, I want the series, and

61
00:04:45.115 --> 00:04:49.546
I want the series order, because
we're going to on each author page,

62
00:04:49.546 --> 00:04:53.226
I wanna display their name and
then a list of their books and

63
00:04:53.226 --> 00:04:57.760
if they are in a series I want to say
like book one of the whatever series.

64
00:04:59.190 --> 00:05:05.291
So this will be our query and
this is what expecting

65
00:05:05.291 --> 00:05:11.114
type string okay let's
do a string there we go.

66
00:05:11.114 --> 00:05:14.712
Okay, so it wants to string glad we
checked it because that would have failed

67
00:05:14.712 --> 00:05:15.735
otherwise, right?

68
00:05:15.735 --> 00:05:19.305
Again, a reason that I really liked this
flow of building the query in the browser,

69
00:05:19.305 --> 00:05:22.161
instead of trying to just write them
by hand is you get to run them and

70
00:05:22.161 --> 00:05:24.260
make sure the data comes
back the way you expect.

71
00:05:24.260 --> 00:05:25.530
But here we go.

72
00:05:25.530 --> 00:05:30.313
So if I get an author with an ID of
this string here generated by Gatsby,

73
00:05:30.313 --> 00:05:34.460
then I'm able to pull up their name and
a list of their books.

74
00:05:34.460 --> 00:05:37.159
So let's copy this move into here.

75
00:05:39.800 --> 00:05:44.108
All right, and
now when we build out our page,

76
00:05:44.108 --> 00:05:48.980
that page is going to
have access to this data.

77
00:05:48.980 --> 00:05:54.093
So let's do export default AuthorPage and

78
00:05:54.093 --> 00:05:58.637
that has the data and in our data we will

79
00:05:58.637 --> 00:06:02.906
have let's start with the basics.

80
00:06:02.906 --> 00:06:07.645
I guess we're gonna get the concert will
be the author, and that'll be data.author.

81
00:06:07.645 --> 00:06:13.300
And then we'll have our books,
which will be author.books.

82
00:06:13.300 --> 00:06:21.372
Okay and then we can return
just do a regular old div.

83
00:06:21.372 --> 00:06:23.110
I'm going to do the author name.

84
00:06:25.792 --> 00:06:29.622
And then before we try to do anything with
the books just yet, let's just dump it and

85
00:06:29.622 --> 00:06:30.180
look at it.

86
00:06:38.030 --> 00:06:40.270
Okay, so
this should put us in pretty good shape.

87
00:06:40.270 --> 00:06:44.337
Let's get out here and
let's look at our 404 page.

88
00:06:44.337 --> 00:06:44.989
What don't you like?

89
00:06:46.100 --> 00:06:48.094
Gotta call it a function
if you're using a function.

90
00:06:50.730 --> 00:06:56.290
All right, so here is our list and you can
see it generated a thing for each one.

91
00:06:56.290 --> 00:07:00.212
So let's jump in here and
we've got a page,

92
00:07:00.212 --> 00:07:04.034
that page includes the book information.

93
00:07:04.034 --> 00:07:06.670
So how do we want to do linking?

94
00:07:06.670 --> 00:07:09.750
Let's think about the way that
we want our books to be linked.

95
00:07:09.750 --> 00:07:12.810
I like my URLs to be descriptive, so,

96
00:07:12.810 --> 00:07:18.370
if books are related to each other,
I want them to tell me that right?

97
00:07:18.370 --> 00:07:22.760
So for a book like Dark Matter,
it's not part of a series.

98
00:07:22.760 --> 00:07:27.220
So I would want the URL to be like
slash book, slash dark matter.

99
00:07:27.220 --> 00:07:29.869
But for one of these N.K.
Jemisin books that

100
00:07:29.869 --> 00:07:34.200
are part of the series I would actually
want that to be included in the URL.

101
00:07:34.200 --> 00:07:38.020
So I would want it to be slash books,
or slash book slash,

102
00:07:38.020 --> 00:07:41.850
the Broken Earth Trilogy
slash The Stones Sky.

103
00:07:41.850 --> 00:07:44.827
Like that's the way that I
would want that to work so

104
00:07:44.827 --> 00:07:49.049
that I know in my head that I'm looking
at a book that is part of a series and

105
00:07:49.049 --> 00:07:54.550
I can kind of group those just by looking
at URLs and understand what I'm reading.

106
00:07:54.550 --> 00:07:57.820
So that means we need to generate
our URLs a little bit differently.

107
00:07:57.820 --> 00:08:01.012
And I also want to make sure that
these show up in order like if, for

108
00:08:01.012 --> 00:08:04.613
whatever reason these got entered as
book two went in first and then one and

109
00:08:04.613 --> 00:08:06.902
three I don't want that
to show up on the site.

110
00:08:06.902 --> 00:08:08.640
So I wanna sort them as well.

111
00:08:08.640 --> 00:08:14.552
So I'm going to create a little
helper function here that we're

112
00:08:14.552 --> 00:08:21.132
going to call sortAndExtendBooks and
that's gonna accept our books.

113
00:08:21.132 --> 00:08:23.640
And inside of it,
we're going to return the books and

114
00:08:23.640 --> 00:08:26.610
we're just gonna do some
some function stuff with it.

115
00:08:26.610 --> 00:08:28.010
So let's do some chaining.

116
00:08:28.010 --> 00:08:32.530
We'll start by sorting and
we'll get book a book b.

117
00:08:32.530 --> 00:08:37.943
And we're gonna return
whether the a.series

118
00:08:37.943 --> 00:08:42.668
order is less than the b.series order.

119
00:08:42.668 --> 00:08:46.795
And I can't remember exactly
how this works like you,

120
00:08:46.795 --> 00:08:50.562
you have to,
I always have to try this both ways and

121
00:08:50.562 --> 00:08:54.796
then see what happens if you
do a minus b goes ascending.

122
00:08:54.796 --> 00:08:58.030
And if you go b minus a,
it goes descending.

123
00:08:58.030 --> 00:09:03.040
Because it's basically if it's a positive
value, it moves up in the list.

124
00:09:03.040 --> 00:09:06.457
And if it's a negative value it
moves down in the list I think so

125
00:09:06.457 --> 00:09:09.941
it's I don't know that the sort
is a little bit confusing, but

126
00:09:09.941 --> 00:09:13.994
effectively this will give us what we
want it'll put it in series order.

127
00:09:13.994 --> 00:09:20.208
Then, we're going to map across each book,
and I want to extend each book.

128
00:09:20.208 --> 00:09:23.415
So I'm going to set up this function here,
and

129
00:09:23.415 --> 00:09:27.290
inside of it, let's get the series first.

130
00:09:27.290 --> 00:09:32.340
So if there is a series,
we wanna do some stuff.

131
00:09:32.340 --> 00:09:36.290
I want to just create some
like display text for this.

132
00:09:36.290 --> 00:09:41.377
So we'll say book.series and then we'll

133
00:09:41.377 --> 00:09:47.780
say like it's book number,
book.seriesOrder.

134
00:09:47.780 --> 00:09:52.586
So this would be like the Broken Earth
trilogy book one, book two, book three.

135
00:09:52.586 --> 00:09:58.354
Okay, that's good and then if we don't
have that, I wanted to just be empty text.

136
00:09:58.354 --> 00:10:02.040
So we'll just leave it blank
if you don't have a series.

137
00:10:02.040 --> 00:10:05.500
So then, we can get a display name.

138
00:10:05.500 --> 00:10:14.605
And that display name is going to
be the book name and the series.

139
00:10:14.605 --> 00:10:18.030
So if it's empty,
it'll just be white space we don't care.

140
00:10:18.030 --> 00:10:22.418
If it does have a series and
it'll be the name of the book, and

141
00:10:22.418 --> 00:10:26.476
then in parentheses
the Broken Earth Trilogy book one.

142
00:10:26.476 --> 00:10:29.701
Next, we're gonna set up the book slug and

143
00:10:29.701 --> 00:10:35.570
the book slug is going to use slugify and
we just pass in the book.name.

144
00:10:35.570 --> 00:10:37.910
I want it to be lowercase.

145
00:10:37.910 --> 00:10:41.779
So this will, passing this option
in just means that instead of

146
00:10:41.779 --> 00:10:46.088
being like capital T, the Broken Earth,
it'll be the broken earth.

147
00:10:46.088 --> 00:10:49.497
And it converts into a kebab case,
which is kind of nice so

148
00:10:49.497 --> 00:10:51.710
it's what you would expect in a URL.

149
00:10:53.420 --> 00:10:55.758
Finally, we wanna actually
build out the path but

150
00:10:55.758 --> 00:10:59.390
it's gonna be a different path based on
whether or not we have a series or not.

151
00:10:59.390 --> 00:11:05.651
So let's start with saying if
the book.series is not null,

152
00:11:05.651 --> 00:11:10.559
then I want to set the series slug,
which will be

153
00:11:10.559 --> 00:11:15.620
the same general approach
slugify book series.

154
00:11:17.570 --> 00:11:18.508
And we'll set lower to true.

155
00:11:22.120 --> 00:11:28.653
And then down here we will
set the path to be book and

156
00:11:28.653 --> 00:11:34.108
then we'll do series slug and book slug.

157
00:11:34.108 --> 00:11:38.730
Okay, so that's what we'll get
if we have a book with a series.

158
00:11:38.730 --> 00:11:43.762
Now if we don't have a series,
We will instead set the path

159
00:11:43.762 --> 00:11:49.522
to be just regular old book and
then book slug.

160
00:11:49.522 --> 00:11:55.460
All right, happy with that and
then let's just return our modified books.

161
00:11:55.460 --> 00:11:59.783
So we're gonna put back all
the regular book things, but

162
00:11:59.783 --> 00:12:05.920
then we'll add in the display name and
the path as additional fields on our book.

163
00:12:05.920 --> 00:12:12.310
So that means that down here, we just want
to change this out sort and extend books.

164
00:12:14.220 --> 00:12:16.104
Okay, so if we save this,

165
00:12:16.104 --> 00:12:20.578
go figure out what I type owed
I pluralized function somehow.

166
00:12:23.050 --> 00:12:23.950
There we go.
All right,

167
00:12:23.950 --> 00:12:28.273
so now we can see that it's been extended
each one of these now has a display

168
00:12:28.273 --> 00:12:30.700
name that is doing what we want.

169
00:12:30.700 --> 00:12:35.300
And it has a path that includes the series
name and then the regular book name.

170
00:12:35.300 --> 00:12:39.925
And if we go out to one that's not part
of a series, we can see the display name

171
00:12:39.925 --> 00:12:44.080
is just the book name, and
the path is book and the book name.

172
00:12:44.080 --> 00:12:46.467
And these are slugifies, and
now, we can link to these.

173
00:12:46.467 --> 00:12:50.830
So let's update our output
then to actually do that.

174
00:12:51.910 --> 00:12:57.037
So instead of just dumping this,
we're going to instead,

175
00:12:57.037 --> 00:13:03.095
we'll create a list and let's tag
that will say books by author name.

176
00:13:07.190 --> 00:13:12.279
And inside of this,
we'll do a books.map and

177
00:13:12.279 --> 00:13:17.638
for each book,
we're going to output some JSX.

178
00:13:24.144 --> 00:13:29.550
Okay, so we're gonna do a list item
that'll have a key of book that ID.

179
00:13:30.720 --> 00:13:34.880
That's a guaranteed unique string in
Gatsby so we can trust it to work.

180
00:13:34.880 --> 00:13:41.920
And I wanna bring in the link that's
not coming in from Gatsby is it?

181
00:13:41.920 --> 00:13:43.732
All right, so let me import link.

182
00:13:43.732 --> 00:13:44.530
We've already got it.

183
00:13:44.530 --> 00:13:50.529
Import link from Gatsby and then we're
going to link to the book.path and

184
00:13:50.529 --> 00:13:54.121
we're gonna show the book.displayname.

185
00:13:54.121 --> 00:13:59.183
All right and finally,
we'll just add a link at the bottom

186
00:13:59.183 --> 00:14:05.294
to head back to the homepage, or
sorry, to head to an author's page.

187
00:14:05.294 --> 00:14:07.695
Which, this doesn't exist yet,
we'll build this next.

188
00:14:07.695 --> 00:14:10.923
But, rather than having to come back
in here and remembering to do it,

189
00:14:10.923 --> 00:14:12.142
let's just set it up now.

190
00:14:12.142 --> 00:14:16.085
So do an arrow pointing left,
this is an HTML entity, and

191
00:14:16.085 --> 00:14:18.560
then we'll go back to all authors.

192
00:14:22.426 --> 00:14:26.450
And if I save that, look at it go,
we got ourselves a page.

193
00:14:26.450 --> 00:14:31.082
So if I come in here go to N.K. Jemisin
here's a list of all those books and

194
00:14:31.082 --> 00:14:35.650
if I click to it, we can see that
it's taking us to the right place.

195
00:14:35.650 --> 00:14:37.610
But we haven't built those pages yet.

196
00:14:37.610 --> 00:14:41.069
So let's build out this author's page.

197
00:14:41.069 --> 00:14:45.650
And to do that, we're going to
just do a plain old page, right?

198
00:14:45.650 --> 00:14:49.556
And this is what's nice about this is, we
did all this work to create custom data.

199
00:14:49.556 --> 00:14:53.008
But now we can just build pages the way
that we would normally build them,

200
00:14:53.008 --> 00:14:54.590
it's really nice.

201
00:14:54.590 --> 00:14:59.718
So we're going to import everything
as react from react, and

202
00:14:59.718 --> 00:15:05.452
then we'll get out graphql and
we're going to need the link as well.

203
00:15:05.452 --> 00:15:11.688
We that helping is not
helping is it From Gatsby,

204
00:15:11.688 --> 00:15:18.650
and we're going to export a const of
query, that's gonna be a tagged graphql,

205
00:15:22.797 --> 00:15:28.020
Query, and
this one doesn't need any variables.

206
00:15:28.020 --> 00:15:31.891
So we could actually do
this as a static query.

207
00:15:31.891 --> 00:15:35.730
But I don't know why I didn't I
think I was just copy pasting thing.

208
00:15:35.730 --> 00:15:39.816
So we'll do it this way all author and
inside of our author,

209
00:15:39.816 --> 00:15:44.405
we're going to get the nodes and
we want their name and their slug.

210
00:15:48.991 --> 00:15:51.401
So then we can export our component,

211
00:15:51.401 --> 00:15:55.150
which will be the default
function called authors page.

212
00:15:56.300 --> 00:16:00.540
And that's gonna get some data, And

213
00:16:00.540 --> 00:16:06.021
let's pull out those authors there'll

214
00:16:06.021 --> 00:16:10.218
be data.allAuthor.nodes.

215
00:16:10.218 --> 00:16:15.188
We should make this simpler,
why overcomplicate this?

216
00:16:15.188 --> 00:16:18.230
Let's cut out cognitive loops or
cognitive overhead.

217
00:16:18.230 --> 00:16:24.162
So, instead,
we're going to use static query.

218
00:16:24.162 --> 00:16:28.155
And instead of having to
pass things around in props,

219
00:16:28.155 --> 00:16:33.810
why don't we just get our data,
right out of use static query, right?

220
00:16:33.810 --> 00:16:40.230
When you don't need to use the query,
this makes more sense to me.

221
00:16:40.230 --> 00:16:43.536
It's like, hi, I want to use this query,
here's the data that I want,

222
00:16:43.536 --> 00:16:44.720
give it to me.

223
00:16:44.720 --> 00:16:46.740
And then we get our everything
else stays the same.

224
00:16:46.740 --> 00:16:49.248
So functionally what we
just did is identical but

225
00:16:49.248 --> 00:16:52.857
in terms of the the cognitive overhead
of somebody reading this code,

226
00:16:52.857 --> 00:16:54.876
if they're not familiar with Gatsby,

227
00:16:54.876 --> 00:16:58.750
this doesn't require you to know that
the query will get turned into data.

228
00:16:58.750 --> 00:17:02.442
So unless you're using again,
unless you're working with variables,

229
00:17:02.442 --> 00:17:05.850
it's usually easier to just
do the the simple thing.

230
00:17:05.850 --> 00:17:09.984
So let's start by setting up a graphQL
fragment because we don't have a JSX

231
00:17:09.984 --> 00:17:14.528
fragment instead, so that we don't end
up with junky markup that we don't need.

232
00:17:14.528 --> 00:17:19.569
So we'll do a listing of authors and
then we'll do an unordered list and

233
00:17:19.569 --> 00:17:26.833
for each author We're
going to return some stuff

234
00:17:26.833 --> 00:17:31.968
missing closing parentheses again,
there we go.

235
00:17:31.968 --> 00:17:36.210
This is going to be a list item,
it's gonna have a key of author.slug,

236
00:17:36.210 --> 00:17:39.150
that's a unique value that we can trust.

237
00:17:39.150 --> 00:17:46.713
Then we can link to and
we're going to make this author.slug,

238
00:17:49.700 --> 00:17:53.831
And we'll put in the author's name,
author.name.

239
00:17:57.359 --> 00:18:00.181
All right, I think we've done it.

240
00:18:00.181 --> 00:18:01.120
What am I missing here?

241
00:18:01.120 --> 00:18:06.100
I'm missing a closing curly brace.

242
00:18:06.100 --> 00:18:11.885
Let's save it, let's look at it.

243
00:18:11.885 --> 00:18:16.559
All right,
we now have our authors pulling in and

244
00:18:16.559 --> 00:18:21.840
we have a working website
based on our custom data.

245
00:18:21.840 --> 00:18:26.928
So that's great but we did throw ourselves
a little bit of a curveball here

246
00:18:26.928 --> 00:18:32.440
because now when we look at our books,
the books have different URL structure.

247
00:18:32.440 --> 00:18:36.700
So we can't just throw in
like the book file thing.

248
00:18:36.700 --> 00:18:38.860
We're going to need to build
these book links manually.

249
00:18:38.860 --> 00:18:40.950
These pages are gonna have
to get built manually.

250
00:18:40.950 --> 00:18:43.146
So let's do that.

251
00:18:43.146 --> 00:18:49.638
&gt;&gt; So, calculating the slug locally
each time can become repetitive is there

252
00:18:49.638 --> 00:18:55.511
a way to add that slug as a property
in the graphQL tree using this page

253
00:18:55.511 --> 00:19:01.712
generation technique by using
the naming trip, not Create Page hook?

254
00:19:01.712 --> 00:19:06.974
&gt;&gt; 100%, yeah, we could have
added another resolver in here.

255
00:19:06.974 --> 00:19:13.327
And so for example, the way we did
a bi-link we could do a slug and

256
00:19:13.327 --> 00:19:18.404
just slugify the series and
slugify the book name.

257
00:19:18.404 --> 00:19:20.974
Why I didn't do that?

258
00:19:20.974 --> 00:19:21.780
Great question.

259
00:19:21.780 --> 00:19:23.780
I don't know why I didn't do that.

260
00:19:23.780 --> 00:19:27.688
It honestly is probably a better move
because then we wouldn't have to calculate

261
00:19:27.688 --> 00:19:29.130
it in multiple places.

262
00:19:29.130 --> 00:19:34.835
So yeah, if I was gonna refactor this,
that'd be a great place to refactor

263
00:19:34.835 --> 00:19:40.358
this code would be to just add a slug
here, and then set that as a string and

264
00:19:40.358 --> 00:19:45.760
run slugify in this file instead
of having to do it everywhere.

265
00:19:45.760 --> 00:19:49.837
But, in the interest of not throwing
myself too many curveballs because we got

266
00:19:49.837 --> 00:19:52.760
a lot to cover and
I don't wanna run out of time.

267
00:19:52.760 --> 00:19:54.560
I'm going to not do that.

268
00:19:54.560 --> 00:19:56.240
So bear with me as we do some,

269
00:19:56.240 --> 00:19:59.400
a little bit of copy pasting
around to make this work.

