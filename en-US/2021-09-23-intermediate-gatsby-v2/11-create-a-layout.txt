[00:00:00]
>> Let's get in here and actually build out a layout in our theme so the way that I want to do this theme is I want to provide some color settings and then we want to add some some global stuff like typography, and then we will style up our layout.

[00:00:14]
So have like the ability to have a header footer in main content, and then we will add a shared nav that'll sit up at the top of the site and in that will have kind of some some config as well. So let's start by defining some of our styles that we're going to need so we'll go into source styles and the first one that we're going to create is going to be called variables dot CSS, and so I'm going to use plain old CSS variables because I like them very much.

[00:00:44]
They don't require us to install anything new and they work in the browser without transpilation or any kind of build step so it's easy to debug and you can write these in your dev tools without having to stress out over it. I very much enjoy this general approach okay, so this is going to be the whole site we're going to have a colour for black colour for white colour for text.

[00:01:06]
And as just a general design thing putting pure black and pure white together can be a little like I said, It just makes your eyes kind of do a thing so a dark gray as opposed to a black is just a little bit softer. That's why we're using this instead of pure dark black and then for text, want it to be a little bit lighter so that the heading stand out and And those sorts of things.

[00:01:30]
And this is all that's going in this file and you might be thinking well, that's silly, why would you create an extra file for this? And I'll tell you why, a little bit later on because there's a very specific reason that we're doing it this way so we set up our variables, now we're going to set up our global styles.

[00:01:48]
And for our global styles, we're going to keep these pretty simple we are going to make sure that margin padding do what we want, so we'll say box-sizing is going to be border-box. And then we're going to set up on the HTML and the body, we want to set our color to be the text color that we created, we're going to set a font family and I'm going to use to have like, Apple system does it do the whole thing?

[00:02:18]
That's close enough for us so those are system fonts, got font size will set to 18 pixels, line height of 1.4 that's just a personal preference you can ignore that if you want. And then I'm going to set a general margin of zero because otherwise the The document will have a little bit of a white border around it.

[00:02:39]
So these will be our global styles so again, we're not doing much here, right? We're trying to create some some baselines for things to look okay so we've got our global styles, and then we're going to add a scopes module for our layout, so we'll call this one layout.module.CSS and inside we're going to say content.

[00:02:59]
And we'll say margin so we'll give our content like a good top and bottom margin about three REM and then we'll center it and I'm going to set the max width to be 54 characters this is good for line length. It means that no matter what size the font is, the lines will be roughly a good readable length and then let's sell our footer so for our footer, we're going to keep it really simple, you could do a lot of cool stuff with the footer, but I just want to have one present.

[00:03:31]
And I don't want to spend a lot of time on building out the mark-up for a footer, so we will instead just set up the basics of what a footer could look like, so we're going to text-align:center and so this is just going to be small text cantered in the screen with a little bit of breathing room around it.

[00:03:47]
And that will be our entire layout so we're going to keep this very, straightforward, as simple as we can now that we've got that, let's add a component and we'll call this one layout.js, so in layout dot j s, it's going to be a react component so we will import everything as react from react.

[00:04:07]
We will also import those styles so we're going to start with the variables then we're going to get the global stuff and then we're going to import those classes that we created, so content and footer, From our layout module okay, then we can export default function layout and because it's a layout, we're going to allow it to have children that means it'll wrap, a document and whatever gets passed inside of this component Will be delivered wherever we use children in here so I'm going to return.

[00:04:52]
Let's do a fragment and I'm going to add main with a class name of content and we'll put the children in there and then we'll add a footer with a class name of footer and this will just say, built with the shared nav Gatsby theme. Right so we're not doing too much with this we're going to keep this pretty simple, close our fragment and we now have a working layout component, so we could, at this point, import this component from the theme and use it.

[00:05:30]
But we're going to consider this to be an opinionated theme so what we want this theme to do is actually automatically wrap every page in a site with the layout so let's add a plug in. That's going to let us do that and the way that we're going to do that is yarn workspace Gatsby theme shared nav add and we want Gatsby plug in layout, so this is actually mimicking a behavior that used to exist in Gatsby one.

[00:05:56]
So you may have seen this before, where it would automatically apply layouts it was decided as as a part of a time to a type owed Gatsby themes showing now. There we go it was determined that it's a little unintuitive to have things automatically applied and honestly react is so good at just making things into components that by default, the behavior that should be Gatsby doesn't do magic.

[00:06:23]
That was a way, when I used to work there that was a mantra for us we shouldn't do magic, like, there should be only magic where it's actually useful and not where it's neat, right? And so layouts being automatically applied got taken out but this Gatsby plugin layout is re implementing that functionality in cases where you are consciously making the decision that you want that magic because we want it to be, less work for somebody to to install this theme on their site.

[00:06:51]
So once we have installed Gatsby plugin layout, we can go to our themes, Gatsby config and we're going to set up our plugins array and inside of that, set up an object for the plugin, or resolve it to Gatsby, plug in layout and then as the options We want to tell it where our layout is.

[00:07:16]
So the component is going to be required out resolve you might recognize this from the way that we do create pages calls it's the same general approach, except we're going to use dirname to make sure that it uses this theme And not like whatever theme it's installed in.

[00:07:31]
So we'll do that and source components layout.js so the way that you install a theme, is you have to actually go in to the Gatsby config and we're gonna use Gatsby theme shared nav iit wants us to restart let's restart that Dev server. There it is so now with no changes to our site outside of adding this one line to install the theme, we have added some overarching styles to the site that make it look really nice So as we we kind of navigate around here, we can see that we didn't have to make these changes.

[00:08:24]
These changes were made for us and as a site builder, if all I cared about was getting information going onto the internet, having something like this that gives me a baseline structure that I can just put content into is really, handy. And if I'm a company that's trying to make sure that people use a design system or otherwise kind of keep track of the shared components or utilities.

[00:08:50]
Themes are a great way to pass that around if you standardize on Gatsby as the way you build for the web so now that we've got that, we can build out that shared nav component.

