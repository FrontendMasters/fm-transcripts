WEBVTT

1
00:00:00.350 --> 00:00:01.990
&gt;&gt; Scott Moss: So GraphQL versus REST.

2
00:00:01.990 --> 00:00:05.330
So if you've taken the REST course,
you know what REST is.

3
00:00:05.330 --> 00:00:10.330
If not, just try to follow along here, but
REST is a different type of interface for

4
00:00:10.330 --> 00:00:13.260
building APIs, and GraphQL is just
a query language in front of it.

5
00:00:13.260 --> 00:00:19.170
So I just wanna compare the two to
try to give people the differences.

6
00:00:19.170 --> 00:00:24.470
So they're different but they're
actually kinda similar at the same time.

7
00:00:24.470 --> 00:00:27.080
They do similar things but
they do them completely different.

8
00:00:28.240 --> 00:00:31.100
So GraphQL only has one URL, that's it.

9
00:00:31.100 --> 00:00:32.604
Your APIs only gonna have one URL.

10
00:00:32.604 --> 00:00:35.220
There's no more,
create a different path for

11
00:00:35.220 --> 00:00:38.990
every single resource with
the verb combination, that's gone.

12
00:00:38.990 --> 00:00:39.940
That's what REST does.

13
00:00:39.940 --> 00:00:42.419
GraphQL is just one URL and
mostly just one verb,

14
00:00:42.419 --> 00:00:45.750
you'll mostly just do a post
request the whole time.

15
00:00:45.750 --> 00:00:49.845
You can do a get request for queries,
but for mutations which are rights and

16
00:00:49.845 --> 00:00:53.431
updates, you can't really do
a get request, you gotta do post.

17
00:00:53.431 --> 00:00:57.783
So yes most of the times it's gonna be a
post request with one URL, that's it, and

18
00:00:57.783 --> 00:01:00.270
that one URL is capable
of every single thing.

19
00:01:00.270 --> 00:01:04.440
Whereas, like I said,
REST is a resource and a verb combination.

20
00:01:04.440 --> 00:01:07.330
And for every resource you have,
there's multiple routes.

21
00:01:07.330 --> 00:01:12.213
So that's why in REST,
sometimes you'll see a API that's like

22
00:01:12.213 --> 00:01:18.060
/API/V3 cuz they had to version
the URL because they changed the API.

23
00:01:18.060 --> 00:01:21.440
Well, don't have to do that in
GraphQL cuz it's always the same URL.

24
00:01:21.440 --> 00:01:22.572
And you just change the schema.

25
00:01:22.572 --> 00:01:24.950
So you don't have to
version the URLs anymore.

26
00:01:24.950 --> 00:01:26.137
So it kinda gets rid of that.

27
00:01:29.777 --> 00:01:31.242
&gt;&gt; Scott Moss: In REST, the shape and

28
00:01:31.242 --> 00:01:35.030
the size of the data resource
is determined by the server.

29
00:01:35.030 --> 00:01:36.760
So basically what that means is,

30
00:01:36.760 --> 00:01:41.480
when you build your REST server, when you
create those resourceful, those routes for

31
00:01:41.480 --> 00:01:46.520
the resources and
then you create the controllers for them.

32
00:01:46.520 --> 00:01:50.170
What is gonna be sent back from those
controllers is determined by whatever code

33
00:01:50.170 --> 00:01:51.720
you write in those controllers, right.

34
00:01:51.720 --> 00:01:54.387
Whatever you query for the data is
asked what's gonna be sent back.

35
00:01:54.387 --> 00:01:56.705
In GraphQL, the shape and the data and

36
00:01:56.705 --> 00:02:00.510
the size of it is determined by
the request that's coming in.

37
00:02:00.510 --> 00:02:03.650
So whatever request or
query that's being sent to the server,

38
00:02:03.650 --> 00:02:07.221
whatever that's asking for,
that's what the server has to fulfill.

39
00:02:07.221 --> 00:02:10.225
So if a query is only asking for
a user's first name,

40
00:02:10.225 --> 00:02:12.800
it's only gonna resolve the first name.

41
00:02:12.800 --> 00:02:16.160
If it's asking for the first name and
then the last name and

42
00:02:16.160 --> 00:02:19.120
then the ID and then it's favorite
articles and then it's best friend,

43
00:02:19.120 --> 00:02:21.270
then it's gotta resolve all those as well.

44
00:02:21.270 --> 00:02:25.920
So it automatically will do that once
you set all your resolvers and stuff up.

45
00:02:25.920 --> 00:02:29.550
So that's the difference between REST and
GraphQL when it comes to resolving data.

46
00:02:29.550 --> 00:02:31.600
REST is all hard coded, right.

47
00:02:31.600 --> 00:02:36.270
All the controllers and values are hard
coded whereas GraphQL is dynamic.

48
00:02:36.270 --> 00:02:39.140
You have no idea what a query
is going to look like.

49
00:02:39.140 --> 00:02:42.010
You just know that it's gonna stick
to the schema that you created.

50
00:02:42.010 --> 00:02:42.820
And it could be anything.

51
00:02:42.820 --> 00:02:45.010
They can ask for
anything within these bounds.

52
00:02:45.010 --> 00:02:48.442
And your server has to be able to
respond to the different combinations of

53
00:02:48.442 --> 00:02:51.098
the queries that are being sent,
so it's all dynamic.

54
00:02:51.098 --> 00:02:55.794
The data, the shape of data is
dynamically generated at runtime versus

55
00:02:55.794 --> 00:02:59.565
being hard coded like it is in REST,
if that makes sense.

56
00:03:02.500 --> 00:03:05.470
&gt;&gt; Scott Moss: In REST you have to,
no, make,

57
00:03:05.470 --> 00:03:11.532
you have to make multiple API
calls to retrieve relational data.

58
00:03:11.532 --> 00:03:15.327
So, for instance if I have
a user that relates, I'm sorry,

59
00:03:15.327 --> 00:03:18.830
let's say we have author model and
it relates to blog post.

60
00:03:18.830 --> 00:03:23.602
So in the REST model if I wanna get
the author and all of his blog posts,

61
00:03:23.602 --> 00:03:28.152
one I have to make a call to author,
and then get the blog post IDs.

62
00:03:28.152 --> 00:03:31.138
And then grab all those ID's and
make other calls for all of those,

63
00:03:31.138 --> 00:03:33.501
whereas in GraphQL I can do
that in just one request.

64
00:03:33.501 --> 00:03:37.471
I can just say give me the author, and
then fulfill all the blog posts and give

65
00:03:37.471 --> 00:03:41.800
me those and then give me the titles for
those, and resolve that all the way down.

66
00:03:41.800 --> 00:03:45.035
I get all of them in one request
without having to make multiple round

67
00:03:45.035 --> 00:03:46.187
trips with the server.

68
00:03:46.187 --> 00:03:50.826
So that's a big difference there as well
because GraphQL will traverse the query

69
00:03:50.826 --> 00:03:52.122
that's being sent and

70
00:03:52.122 --> 00:03:56.364
proceed to the resolvers to go ahead and
resolve all those fields for you.

71
00:03:56.364 --> 00:03:58.772
And that's why it's called GraphQL,
because it's like a graph.

72
00:04:03.832 --> 00:04:04.365
&gt;&gt; Scott Moss: In REST,

73
00:04:04.365 --> 00:04:08.840
the shape of the response is determined
by whom ever created the server.

74
00:04:08.840 --> 00:04:11.250
And like I said,
in GraphQL it's determined by the query.

75
00:04:11.250 --> 00:04:12.310
So again,

76
00:04:12.310 --> 00:04:15.710
whatever the query is being sent, that's
what the shape of the data is gonna be.

77
00:04:17.360 --> 00:04:21.620
In REST a single request will execute
on the controller in the server.

78
00:04:21.620 --> 00:04:25.850
In GraphQL a request might execute
many resolvers on the server.

79
00:04:25.850 --> 00:04:29.860
So for REST if I say give me the user
with this ID, that's ultimately going to

80
00:04:29.860 --> 00:04:33.507
execute one controller that ultimately
gets this user with this ID.

81
00:04:33.507 --> 00:04:36.761
But in GraphQL if I say give
me the user with this ID,

82
00:04:36.761 --> 00:04:39.670
that could potentially be three resolvers.

83
00:04:39.670 --> 00:04:42.500
You don't know the resolvers yet but
its basically like a controller.

84
00:04:42.500 --> 00:04:46.818
But basically what I'm saying is, you have
no idea how many of those functions on

85
00:04:46.818 --> 00:04:50.820
your server are gonna run, because
it's determined by whatever the query

86
00:04:50.820 --> 00:04:53.760
looks like, and not so
much about what you hard coded.

87
00:04:53.760 --> 00:04:57.484
So again, not only is the data and
the shape gonna be dynamic, but

88
00:04:57.484 --> 00:05:01.957
the functions that run as callbacks to
your request are also gonna be dynamic,

89
00:05:01.957 --> 00:05:06.050
as well, as far as, in what order that
they run and how many of them run.

90
00:05:09.440 --> 00:05:11.915
&gt;&gt; Scott Moss: Any questions on this?

91
00:05:11.915 --> 00:05:14.324
Do not expect you to understand
all of this right now.

92
00:05:14.324 --> 00:05:17.594
It's just telling you what
you're about to get into.

93
00:05:17.594 --> 00:05:19.398
&gt;&gt; Speaker 2: The other
thing I'm thinking is that,

94
00:05:19.398 --> 00:05:22.530
that this could be compared
also to like a SQL, right?

95
00:05:22.530 --> 00:05:24.820
&gt;&gt; Scott Moss: Yeah.
&gt;&gt; Speaker 2: I know SQL is just data,

96
00:05:24.820 --> 00:05:26.290
it's not just data but-
&gt;&gt; Scott Moss: Actually,

97
00:05:26.290 --> 00:05:31.220
you could definitely compare GraphQL
to a query language like SQL because it

98
00:05:31.220 --> 00:05:34.310
is a query language, SQL is a query
language, GraphQL is a query language.

99
00:05:34.310 --> 00:05:39.740
So yeah, you could say GraphQL is
like SQL fr your API, all right.

100
00:05:39.740 --> 00:05:42.801
Instead of being SQL for your databases
it's like SQL for your API, all right.

101
00:05:42.801 --> 00:05:46.267
So yeah, if you did a SQL query it's
a database, you're only gonna get back

102
00:05:46.267 --> 00:05:49.310
what you asked for, all right,
and same thing with GraphQL.

103
00:05:49.310 --> 00:05:50.047
Yeah.

104
00:05:50.047 --> 00:05:53.210
&gt;&gt; Speaker 3: Yeah so,
I've read that GraphQL, there's just one

105
00:05:53.210 --> 00:05:58.160
endpoint whereas with REST there are all
these different endpoints like kind of a-

106
00:05:58.160 --> 00:05:59.294
&gt;&gt; Scott Moss: Yes, there's only,

107
00:05:59.294 --> 00:06:01.511
you're only gonna ever have one endpoint.

108
00:06:01.511 --> 00:06:04.913
There's no point of having
more than one endpoint and

109
00:06:04.913 --> 00:06:09.448
that's because in GraphQL the information
that it needs, it's not so

110
00:06:09.448 --> 00:06:12.714
much in the URL,
it's in the body that you send up.

111
00:06:12.714 --> 00:06:15.102
As you'll see when we
start writing queries,

112
00:06:15.102 --> 00:06:17.440
you're gonna send a query
up to your server.

113
00:06:17.440 --> 00:06:19.650
And that query's the information
that the server needs.

114
00:06:19.650 --> 00:06:21.520
That query has nothing to do with the URL.

115
00:06:21.520 --> 00:06:24.426
It's just a string.

116
00:06:24.426 --> 00:06:26.040
And, like I said, you can encode it.

117
00:06:26.040 --> 00:06:28.512
Like I said,
you can put it in a get request sometimes.

118
00:06:28.512 --> 00:06:29.913
But, when you have to do a mutation,

119
00:06:29.913 --> 00:06:33.048
as in you've got to send variables to the
server, you can't put those in the URL.

120
00:06:33.048 --> 00:06:34.620
So, most of the time
it's just a post request.

