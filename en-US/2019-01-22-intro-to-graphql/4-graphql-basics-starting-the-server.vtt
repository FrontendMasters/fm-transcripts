WEBVTT

1
00:00:03.180 --> 00:00:06.687
&gt;&gt; Scott Moss: So the first thing we're
gonna do is we're just gonna get a GraphQL

2
00:00:06.687 --> 00:00:07.850
server going.

3
00:00:07.850 --> 00:00:10.520
So what I want you to do is feel free to
follow along on this one because I'm just

4
00:00:10.520 --> 00:00:14.980
gonna live code a very basic
getting started GraphQL server and

5
00:00:14.980 --> 00:00:16.210
show you some basic stuff.

6
00:00:16.210 --> 00:00:18.880
But afterwards I'm gonna give you ten
minutes to work it on yourself and

7
00:00:18.880 --> 00:00:20.990
I'll come back and see what you got.

8
00:00:20.990 --> 00:00:22.410
So if you wanna follow along, so

9
00:00:22.410 --> 00:00:26.290
what I'm gonna do is I'm gonna
hop into the server JS file.

10
00:00:26.290 --> 00:00:29.200
There's a lot going on here but
just to break it down,

11
00:00:29.200 --> 00:00:33.010
what's actually happening here is we're
using a package called Apollo Server.

12
00:00:33.010 --> 00:00:38.610
Now, Apollo is, if you've ever heard of,
who's ever heard of Meteor, Meteor JS?

13
00:00:38.610 --> 00:00:42.310
Okay, so Meteor JS,
I think Meteor is still alive and

14
00:00:42.310 --> 00:00:46.940
kicking but they actually did a spin off,
and they make this product called Apollo.

15
00:00:46.940 --> 00:00:51.980
Apollo is basically a whole bunch of
tooling and products around GraphQL.

16
00:00:51.980 --> 00:00:53.620
They have some paid
products that you can use.

17
00:00:53.620 --> 00:00:55.920
They also have tons of resource stuff.

18
00:00:55.920 --> 00:01:00.360
And Apollo Server is their implementation
of creating GraphQL servers.

19
00:01:00.360 --> 00:01:03.690
After GraphQL's been out for awhile,
they learned a lot about creating GraphQL

20
00:01:03.690 --> 00:01:06.410
servers and
Apollo Server's what they created.

21
00:01:06.410 --> 00:01:08.940
This is the one that I like to use,
there's tons of other ones out there.

22
00:01:08.940 --> 00:01:12.090
So the reason Apollo Servers
actually create a GraphQL server,

23
00:01:12.090 --> 00:01:13.910
do a lot of work for us.

24
00:01:13.910 --> 00:01:16.850
And this other stuff is just
gonna be the schemas and

25
00:01:16.850 --> 00:01:19.530
stuff that you'll be creating later
on connected to the database,

26
00:01:19.530 --> 00:01:22.600
the configuration that I talked about,
stuff like that.

27
00:01:22.600 --> 00:01:26.270
And then we have this function here where
we're actually going to start a server.

28
00:01:26.270 --> 00:01:30.340
So here, what we're gonna do is we're just
gonna create a hello world GraphQL server,

29
00:01:30.340 --> 00:01:36.220
and we're gonna try to query it using some
type of tooling, and see what we get.

30
00:01:36.220 --> 00:01:38.420
So if we look inside of
this start function,

31
00:01:38.420 --> 00:01:40.800
you'll see this thing called a rootSchema.

32
00:01:40.800 --> 00:01:42.298
And then we have this Apollo Server.

33
00:01:42.298 --> 00:01:46.129
Basically the root scheme is
just gonna be your entry scheme,

34
00:01:46.129 --> 00:01:49.880
it's just gonna be the first
part of the schema.

35
00:01:49.880 --> 00:01:53.570
Because if you think of a schema and

36
00:01:53.570 --> 00:01:58.880
like a tree, like a graph there
has to be a root and this is it.

37
00:01:58.880 --> 00:02:01.850
This is the root,
this is the entry point to our schema and

38
00:02:01.850 --> 00:02:03.850
then this is where we
actually start the server.

39
00:02:03.850 --> 00:02:06.490
So what I'm gonna do is I'm
just gonna come in here and

40
00:02:06.490 --> 00:02:09.580
I'm going to start typing stuff you've
probably never seen before, but

41
00:02:09.580 --> 00:02:12.260
I just wanted to get the brain rolling and
kinda see what I'm doing here.

42
00:02:12.260 --> 00:02:18.580
So what I wanna do is I just wanna be
able to create a new type in GraphQL,

43
00:02:18.580 --> 00:02:23.230
remember GraphQL is kinda like
a It's like a type script.

44
00:02:23.230 --> 00:02:25.330
It's like a typing interface.

45
00:02:25.330 --> 00:02:28.970
So what you first have to do is create
a type and describe what that looks like.

46
00:02:28.970 --> 00:02:34.080
So what I'm gonna say is,
I'm gonna create a type for a Cat.

47
00:02:34.080 --> 00:02:37.010
So I can just type in the word type Cat,
like this.

48
00:02:39.300 --> 00:02:43.839
And I'm gonna say a Cat has a name.

49
00:02:43.839 --> 00:02:47.090
And that type is a string.

50
00:02:50.310 --> 00:02:54.730
So so far, we have a type that's called
cat, and it has a field on it called name.

51
00:02:54.730 --> 00:02:56.680
And the type of that field is a string.

52
00:02:59.930 --> 00:03:03.580
So now I wanna be able to query for a cat.

53
00:03:03.580 --> 00:03:05.450
I wanna be able to retrieve a cat.

54
00:03:05.450 --> 00:03:09.070
So I created a type for a cat, but
now I wanna be able to retrieve it.

55
00:03:09.070 --> 00:03:12.970
So in order to do that,
I have to make a type called Query.

56
00:03:12.970 --> 00:03:13.860
Or I can call it whatever I want,

57
00:03:13.860 --> 00:03:15.800
but in this case we're gonna
call it Query with a capital Q,

58
00:03:15.800 --> 00:03:17.710
that's just the convention.

59
00:03:17.710 --> 00:03:21.330
And then I have to create
a field on this Query type

60
00:03:21.330 --> 00:03:25.180
that will allow me to query for cats.

61
00:03:25.180 --> 00:03:29.950
So I'm just gonna call this one myCat.

62
00:03:31.050 --> 00:03:34.110
Just gonna say myCat as the field name.

63
00:03:34.110 --> 00:03:36.560
And its type is gonna be a Cat.

64
00:03:38.590 --> 00:03:44.290
So what this is saying is I'm adding
a field to the query type called myCat and

65
00:03:44.290 --> 00:03:46.100
its return type is going to be a cat.

66
00:03:46.100 --> 00:03:48.200
So, it's going to return
something in the shape of this.

67
00:03:49.960 --> 00:03:53.350
Which is an object with a name on it.

68
00:03:53.350 --> 00:03:56.570
And, down below I've already told graphQL

69
00:03:56.570 --> 00:04:01.425
schema that my query type is going to be
this type called Query with a capital Q.

70
00:04:01.425 --> 00:04:03.821
This is why I was like you can call this
whatever you want as long as you change

71
00:04:03.821 --> 00:04:04.920
it down there.

72
00:04:04.920 --> 00:04:06.151
So you normally just call it query.

73
00:04:09.702 --> 00:04:12.582
&gt;&gt; Scott Moss: So now that we
created a schema what a cat type and

74
00:04:12.582 --> 00:04:16.182
we created a query that's
capable of returning a cat type,

75
00:04:16.182 --> 00:04:20.670
we now have to create a resolver
though actually resolve that cat type.

76
00:04:20.670 --> 00:04:22.360
And a resolver is very
much like a controller and

77
00:04:22.360 --> 00:04:23.770
we'll talk about that later.

78
00:04:23.770 --> 00:04:28.440
So to do I'll just come down here to
resolvers, and then what I need to do is,

79
00:04:28.440 --> 00:04:32.960
I need to resolve Query myCal.

80
00:04:32.960 --> 00:04:36.400
So what I'll this object down here I'll
say, I wanna resolve Query which is

81
00:04:36.400 --> 00:04:43.180
an object, and I wanna resolve the myCal
field, and we'll make a function for that.

82
00:04:43.180 --> 00:04:49.220
So for myCat, the only thing I have to
do to satisfy GraphQL is have myCat

83
00:04:49.220 --> 00:04:54.140
return something in a cat shape,
which is just an object with a name on it.

84
00:04:54.140 --> 00:04:56.352
So I'll do that, so I'll come out here and

85
00:04:56.352 --> 00:05:00.600
I'll say just return an object with a name
properly on it, and a name, Garfield.

86
00:05:05.200 --> 00:05:09.435
&gt;&gt; Scott Moss: So you can see, I have a,
I'm creating a resolver for the query,

87
00:05:09.435 --> 00:05:14.860
myCat, and it needs to return its
shape called Cat, which is a name.

88
00:05:14.860 --> 00:05:16.429
So I'm gonna do that.

89
00:05:16.429 --> 00:05:19.696
And then now what I'm gonna do is,
I'm gonna go ahead and

90
00:05:19.696 --> 00:05:21.204
execute the dev command.

91
00:05:21.204 --> 00:05:24.320
And just to scroll down you can see
what I'm doing here is I'm connecting to

92
00:05:24.320 --> 00:05:24.972
the database.

93
00:05:24.972 --> 00:05:28.540
And then I'm listening on the server
with a passed in port that I'm logging.

94
00:05:28.540 --> 00:05:29.580
All of that is happening for us.

95
00:05:29.580 --> 00:05:31.060
So I can just go ahead and open this up.

96
00:05:31.060 --> 00:05:34.500
And if you haven't already,
if you try to run this and it doesn't

97
00:05:34.500 --> 00:05:38.050
work don't forget to install your
dependencies either using NPM or Yarn.

98
00:05:38.050 --> 00:05:41.100
So install those first otherwise
none of this is going to work.

99
00:05:41.100 --> 00:05:43.251
So I am just gonna go ahead and
run yarn def.

100
00:05:52.126 --> 00:05:53.810
&gt;&gt; Scott Moss: And
you can see I got a log here.

101
00:05:53.810 --> 00:05:56.955
GQL server ready at local host 3000.

