WEBVTT

1
00:00:00.250 --> 00:00:03.767
&gt;&gt; Scott Moss: Unions, they're very much
like interfaces, but the difference is is

2
00:00:03.767 --> 00:00:07.415
that they're a combination type that
can be one of many different types.

3
00:00:07.415 --> 00:00:09.170
They may not relate to each other.

4
00:00:09.170 --> 00:00:11.872
So what does that actually mean?

5
00:00:11.872 --> 00:00:15.364
Basically it's sometimes
you want a query to return

6
00:00:15.364 --> 00:00:18.149
a possibility of more than just one type.

7
00:00:18.149 --> 00:00:21.494
Unions allow you to create that
type that's composed of many types.

8
00:00:21.494 --> 00:00:22.366
It's like a OR.

9
00:00:22.366 --> 00:00:26.733
It's like this type, or this type, or
this type, or this type, or this type,

10
00:00:26.733 --> 00:00:30.500
and they can have no relationship
to each other, absolutely none.

11
00:00:30.500 --> 00:00:32.450
The one good example I
can think of is searches.

12
00:00:32.450 --> 00:00:35.500
So if you're using GraphQL
to do searching, like, yeah,

13
00:00:35.500 --> 00:00:38.030
I wanna implement search in my website,
I wanna search for all this stuff.

14
00:00:38.030 --> 00:00:42.350
But you can search for images, you can
search for users, you can search for

15
00:00:42.350 --> 00:00:45.380
locations, you can search for restaurants,
all these different types of things.

16
00:00:45.380 --> 00:00:50.135
A union is great for that because each
one of those will be a GraphQL type, and

17
00:00:50.135 --> 00:00:54.164
you want your search query result
to return either one of those.

18
00:00:54.164 --> 00:00:55.569
So that's where it's really great.

19
00:00:55.569 --> 00:00:58.950
The only difference,
as far as implementation goes, for

20
00:00:58.950 --> 00:01:02.262
you on the server,
when it comes to unions, is one word.

21
00:01:02.262 --> 00:01:06.975
It's instead of doing an interface
like this and implementing it for

22
00:01:06.975 --> 00:01:12.022
a union, all you would do is you would
just get all the types that you want.

23
00:01:12.022 --> 00:01:14.328
For instance,
I'm just gonna make up some types here.

24
00:01:16.952 --> 00:01:21.095
&gt;&gt; Scott Moss: We'll say,
union, we'll do the Animal.

25
00:01:21.095 --> 00:01:26.860
Well, let's just say union SearchItem.

26
00:01:26.860 --> 00:01:30.730
And then that's gonna equal, then you
start putting the types that you want.

27
00:01:30.730 --> 00:01:34.140
So if I had a person, I could say Person.

28
00:01:34.140 --> 00:01:41.490
Then I could say Place,
then I could say a Review,

29
00:01:41.490 --> 00:01:46.450
whatever I wanted to search for,
a Restaurant, you get the point.

30
00:01:46.450 --> 00:01:47.780
So that's how you would create a union.

31
00:01:47.780 --> 00:01:52.289
And then this is gonna create a union
type that you can use the exact same way

32
00:01:52.289 --> 00:01:53.834
you can use a interface.

33
00:01:53.834 --> 00:01:57.580
So the same way you use an interface,
you're now able to use a union.

34
00:01:57.580 --> 00:02:01.190
And the way that that's resolved on
the client, it's the same thing as this.

35
00:02:01.190 --> 00:02:05.380
They still have to use inline
fragments to resolve that.

36
00:02:05.380 --> 00:02:07.929
They still have to do it.
So it doesn't really change anything for

37
00:02:07.929 --> 00:02:10.140
you, all you do is just do this now.

38
00:02:10.140 --> 00:02:12.750
You still have to write a resolveType for

39
00:02:12.750 --> 00:02:15.620
that union to resolve which
type is being resolved.

40
00:02:15.620 --> 00:02:16.430
You still have to do that.

41
00:02:17.620 --> 00:02:19.410
And that's it,
nothing else changes for you.

42
00:02:19.410 --> 00:02:23.107
So I almost never use unions cuz I
don't even do search with GraphQL, but

43
00:02:23.107 --> 00:02:24.330
interfaces I use a lot.

44
00:02:25.740 --> 00:02:26.780
But yeah, that's the only difference.

