WEBVTT

1
00:00:00.000 --> 00:00:03.110
&gt;&gt; Scott Moss: We already talked about
resolving the interface and unions.

2
00:00:03.110 --> 00:00:07.150
You just need that resolve
type property need to fill, so

3
00:00:07.150 --> 00:00:09.180
we'll move on to the exercise.

4
00:00:09.180 --> 00:00:10.930
So now that you know
about the schema's and

5
00:00:10.930 --> 00:00:13.370
the resolver we gotta make some changes.

6
00:00:13.370 --> 00:00:17.040
Our product model in mongoose is split
between three different product types.

7
00:00:17.040 --> 00:00:20.480
We need to make the product type
an interface and then create types for

8
00:00:20.480 --> 00:00:22.890
each possible type in our mongoose model.

9
00:00:22.890 --> 00:00:24.990
And don't forget to create
the resolver for the result type.

10
00:00:24.990 --> 00:00:26.890
So what am I talking about?

11
00:00:26.890 --> 00:00:28.259
If you head over to the mongoose model,
and

12
00:00:28.259 --> 00:00:32.124
I talked about this earlier,
&gt;&gt; Scott Moss: A product can be three

13
00:00:32.124 --> 00:00:33.710
different types of products.

14
00:00:33.710 --> 00:00:36.290
There's literally a property called type,
and it's one of these three things.

15
00:00:36.290 --> 00:00:39.780
It's a GAMING PC, it's a BIKE or
it's a DRONE, right?

16
00:00:39.780 --> 00:00:41.752
They all have the exact
same fields except for

17
00:00:41.752 --> 00:00:46.610
a GAMING_PC has a liquidCooled
field that's required.

18
00:00:46.610 --> 00:00:50.687
A bike product has a bikeType
field that's required.

19
00:00:50.687 --> 00:00:53.130
A drone has a range field that's required.

20
00:00:53.130 --> 00:00:56.510
So they are all very similar, except for
one small property that's different.

21
00:00:56.510 --> 00:00:59.739
So, instead of having a product be
a type which you've already created,

22
00:00:59.739 --> 00:01:01.933
you need to change the product
to be an interface.

23
00:01:01.933 --> 00:01:05.980
And then you need to create three
new types called BIKE, DRONE, and

24
00:01:05.980 --> 00:01:08.680
GAMING_PC that implement that interface.

25
00:01:10.580 --> 00:01:13.370
And then you need to resolve the type
with the resolve type resolver.

26
00:01:15.510 --> 00:01:18.580
So again, check out the lesson four
branch, change the product type to

27
00:01:18.580 --> 00:01:22.060
an interface, create the Bike
type that implements the product,

28
00:01:22.060 --> 00:01:24.700
create the GamingPc type
that implements the product.

29
00:01:24.700 --> 00:01:28.590
Create the Drone type that implements
the product, then create a resolver for

30
00:01:28.590 --> 00:01:31.520
product interface that
resolves the type and

31
00:01:31.520 --> 00:01:33.670
then just make sure all the tests pass,
which they will if you did all that.

32
00:01:33.670 --> 00:01:40.170
And remember to get a clue of what to
look for in that resolve type function.

33
00:01:40.170 --> 00:01:42.980
What is the thing,
how do you know which type to return?

34
00:01:42.980 --> 00:01:45.700
Well remember,
every part has a type property.

35
00:01:45.700 --> 00:01:47.370
That is one of these things.

36
00:01:47.370 --> 00:01:49.990
That's probably something you wanna look
at in a resolve type function to figure

37
00:01:49.990 --> 00:01:51.520
out, what type of product is this?

38
00:01:51.520 --> 00:01:52.700
Well, product.type.

39
00:01:52.700 --> 00:01:53.500
What is it?

40
00:01:53.500 --> 00:01:54.400
Based on that,

41
00:01:54.400 --> 00:01:58.470
all you have to do is return the name
of the type that you create in here.

42
00:01:58.470 --> 00:02:03.541
So GAMING_PC, DRONE or BIKE.

43
00:02:03.541 --> 00:02:07.692
So let's go ahead and
check out to the branch, get check out.

44
00:02:13.434 --> 00:02:16.972
&gt;&gt; Scott Moss: And just to show you what's
happening here, there's a piece of code

45
00:02:16.972 --> 00:02:20.940
that's gonna help you I want you to take
a look at to convert some things over.

46
00:02:20.940 --> 00:02:25.490
So if you look at the product
resolvers there's going to be

47
00:02:25.490 --> 00:02:28.880
a products type matcher on here for you.

48
00:02:28.880 --> 00:02:33.240
Basically is what this does
is it matches the enum

49
00:02:33.240 --> 00:02:37.710
of product types to the enum of
product types in the database.

50
00:02:37.710 --> 00:02:41.660
So on the left is the enum that's in grab
ko, on the right is the enum that's in

51
00:02:41.660 --> 00:02:44.640
a database, so this will help you match
it, cuz you're gonna get one from graph QL

52
00:02:44.640 --> 00:02:47.550
and you gotta see if it's
the one from the database.

53
00:02:47.550 --> 00:02:50.240
So this is what you're gonna
use in the resolved type.

54
00:02:50.240 --> 00:02:53.380
And just to show you what I'm talking
about, if you go to the product graph QL,

55
00:02:53.380 --> 00:02:58.750
you can see the enums is GAMING_PC,
BIKE, DRONE, they're all capital,

56
00:02:58.750 --> 00:03:03.420
but in the database they're
actually they're the same.

57
00:03:03.420 --> 00:03:05.620
[LAUGH] Wait, I did make them the same.

58
00:03:05.620 --> 00:03:07.060
Well why did I add that then?

59
00:03:07.060 --> 00:03:08.448
What is that for?

60
00:03:08.448 --> 00:03:09.110
No I'm sorry.

61
00:03:09.110 --> 00:03:10.030
I got it backwards.

62
00:03:10.030 --> 00:03:13.910
So you see the enums are GAMING_PC,
BIKE, they're all capital.

63
00:03:13.910 --> 00:03:18.520
But the types that you're gonna
make are not gonna be like this.

64
00:03:18.520 --> 00:03:21.240
They're not gonna be called GAMING_PC,
all capital.

65
00:03:21.240 --> 00:03:24.053
They're gonna be like GamingPc.

66
00:03:24.053 --> 00:03:25.120
They're gonna be like that.

67
00:03:25.120 --> 00:03:26.180
You're gonna make a type like that.

68
00:03:26.180 --> 00:03:33.660
So that object is to help you convert
the enum to the actual type name.

69
00:03:35.190 --> 00:03:38.224
Cuz you're gonna need that when
you make your result type.

70
00:03:38.224 --> 00:03:41.910
You're gonna need that in here
cuz you're gonna get this product

71
00:03:41.910 --> 00:03:44.770
that comes from the database
that has a enum on it.

72
00:03:44.770 --> 00:03:48.330
That enum is gonna be this value, and
you're gonna need to return this value cuz

73
00:03:48.330 --> 00:03:50.460
that's gonna be the name of your type,
so that's how you check.

74
00:03:52.120 --> 00:03:53.600
That's the only other
piece that I have for you,

75
00:03:53.600 --> 00:03:56.450
so you don't need anything
else as far as the code.

76
00:03:56.450 --> 00:04:00.860
And then yeah, just create that interface,
and create those types.

77
00:04:00.860 --> 00:04:02.770
And then get those tests to pass.

78
00:04:02.770 --> 00:04:06.449
And also the test command you want to run
to actually run these tests are gonna be

79
00:04:06.449 --> 00:04:13.010
npm.run test-interfaces or npm-yarn
test-interfaces and that should scope

80
00:04:13.010 --> 00:04:16.670
out the test and you'll see some broken
tests so, go ahead and get those to pass.

