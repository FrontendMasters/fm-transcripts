WEBVTT

1
00:00:00.019 --> 00:00:03.015
&gt;&gt; Scott Moss: So now we get that
out of the way, let's go ahead and

2
00:00:03.015 --> 00:00:04.839
get some of these test to pass.

3
00:00:04.839 --> 00:00:09.558
So product has base fields, well, the only
way you would know what fields to put here

4
00:00:09.558 --> 00:00:11.430
is if you were to look at the test.

5
00:00:11.430 --> 00:00:14.450
So we're gonna look at product.type.spec,

6
00:00:14.450 --> 00:00:18.500
we'll see what base fields are and
we'll try to imitate that.

7
00:00:21.733 --> 00:00:26.176
&gt;&gt; Scott Moss: So it says baseFields
are gonna be these fields, name, price,

8
00:00:26.176 --> 00:00:28.412
image, type, all this stuff.

9
00:00:28.412 --> 00:00:35.471
So I'm just gonna take a shortcut,
I'm just gonna copy all that.

10
00:00:35.471 --> 00:00:38.861
&gt;&gt; Scott Moss: Copy those baseFields,
go over to product,

11
00:00:38.861 --> 00:00:41.818
I'm gonna make a type called product.

12
00:00:44.858 --> 00:00:46.410
&gt;&gt; Scott Moss: And
I'm gonna give it these fields.

13
00:00:47.480 --> 00:00:51.381
I get rid of all these quotes,

14
00:00:51.381 --> 00:00:55.140
parenthesis, there we go.

15
00:00:55.140 --> 00:00:57.500
So looks like I've got the fields in.

16
00:00:57.500 --> 00:00:58.660
Gotta get rid of these comments, too.

17
00:01:02.313 --> 00:01:04.680
&gt;&gt; Scott Moss: There we go.

18
00:01:04.680 --> 00:01:07.460
So, got those filled in with
the exact types that they need to be.

19
00:01:07.460 --> 00:01:10.800
So we can see here, if we're just taking
a look, got a name, got the string,

20
00:01:10.800 --> 00:01:13.290
that's required, a price,
that's a float that's required.

21
00:01:13.290 --> 00:01:17.700
An image, that's a string that's required,
a type that's a product type.

22
00:01:17.700 --> 00:01:19.720
And if you scroll up,
ProductType is an enum.

23
00:01:19.720 --> 00:01:23.100
Remember, I said enums are just
like strings with hardcoded values,

24
00:01:23.100 --> 00:01:24.870
it must be one of these.

25
00:01:24.870 --> 00:01:30.690
So that basically means type can be
either GAMING_PC, BIKE, or DRONE.

26
00:01:32.540 --> 00:01:37.230
createdBy is User type which
does not exist anywhere in this

27
00:01:37.230 --> 00:01:41.560
file because it's in another file down
here in user, so that's why that's there.

28
00:01:41.560 --> 00:01:44.700
Description is a string,
liquidCooled, range, bite.

29
00:01:44.700 --> 00:01:46.630
So where did I get all this stuff from?

30
00:01:46.630 --> 00:01:50.290
Well, if you remember when I talked a
while ago I said a good starting place for

31
00:01:50.290 --> 00:01:52.510
some of your types is gonna
be your database models.

32
00:01:52.510 --> 00:01:55.580
So if you were curious,
you clicked on product.model.

33
00:01:55.580 --> 00:01:59.650
And if you looked at the stuff
in this Mongoose schema,

34
00:01:59.650 --> 00:02:03.450
it's mostly the same stuff that it's
on our GraphQL type that we just made.

35
00:02:04.630 --> 00:02:07.690
Literally have the exact same types on
there, they're all exactly the same.

36
00:02:07.690 --> 00:02:10.370
So that's where I got this from,
it's a good place to start from.

37
00:02:12.826 --> 00:02:15.881
&gt;&gt; Scott Moss: So now that we got that,
and just a primer on the product,

38
00:02:15.881 --> 00:02:19.970
a product is basically like our
e-commerce store only sells three things.

39
00:02:19.970 --> 00:02:22.300
It sells gaming PCs, bikes and drones.

40
00:02:22.300 --> 00:02:25.080
That's it,
it's a Black Friday ecommerce website.

41
00:02:25.080 --> 00:02:27.570
It only sells the hot stuff for the kids.

42
00:02:27.570 --> 00:02:30.750
And each product is a different type and
depending on the type,

43
00:02:30.750 --> 00:02:32.552
it will have a different property.

44
00:02:32.552 --> 00:02:35.107
For instance,
if the product is a gaming PC,

45
00:02:35.107 --> 00:02:37.943
it will have a Boolean if
its liquidCooled or not.

46
00:02:37.943 --> 00:02:40.464
If the product is a bike,
it will have a BikeType.

47
00:02:40.464 --> 00:02:43.739
If the product is a drone,
it will have a range field on it.

48
00:02:43.739 --> 00:02:46.540
And all that is dictated
by the product model.

49
00:02:46.540 --> 00:02:49.935
If you go look at it, you can see
liquidCooled is required if the type is

50
00:02:49.935 --> 00:02:54.240
GAMING_PC, bike type is
required if the type is BIKE.

51
00:02:54.240 --> 00:02:56.090
Range is required if the type is DRONE.

52
00:02:56.090 --> 00:02:58.740
So that's how it's
determining what type it is.

53
00:02:58.740 --> 00:03:02.480
And that's all happening on a database
level, it's abstracted away from GraphQL.

54
00:03:02.480 --> 00:03:04.650
But that's where these fields came from,
just so

55
00:03:04.650 --> 00:03:07.210
you have some background of
where's this stuff coming from?

56
00:03:07.210 --> 00:03:08.890
That's where it came from.

57
00:03:08.890 --> 00:03:12.070
This is gonna make more sense when
we get into interfaces and unions.

58
00:03:12.070 --> 00:03:13.980
It's gonna be more important there.

59
00:03:13.980 --> 00:03:15.920
Okay, so let's run this test.

60
00:03:19.372 --> 00:03:22.467
&gt;&gt; Scott Moss: You can also do --watch
which will keep the test running and

61
00:03:22.467 --> 00:03:24.100
rerun only the broken test.

62
00:03:24.100 --> 00:03:25.340
So that will speed things up, too.

63
00:03:28.221 --> 00:03:29.649
&gt;&gt; Scott Moss: So
it looks like that one passed,

64
00:03:29.649 --> 00:03:31.340
new product input has correct fields.

65
00:03:31.340 --> 00:03:33.052
So we can look at that one.

66
00:03:33.052 --> 00:03:34.935
What is that one?

67
00:03:34.935 --> 00:03:41.256
Looks like new product wants these fields,
so I will go ahead and copy those.

68
00:03:41.256 --> 00:03:44.823
And we will head over to,
and because it's an input,

69
00:03:44.823 --> 00:03:49.281
I need to make an input type, so
I will say input NewProductInput.

70
00:03:52.617 --> 00:03:54.590
&gt;&gt; Scott Moss: And I would put
those fields in there like this.

71
00:03:54.590 --> 00:04:00.099
I'll get rid of these, I'll get rid

72
00:04:00.099 --> 00:04:05.442
of these and I'll fix the spacing.

73
00:04:05.442 --> 00:04:05.972
There we go.

74
00:04:05.972 --> 00:04:11.730
So now we have a new product input,
that's mostly the same as the product.

75
00:04:13.350 --> 00:04:18.980
It's just added to input now, and there
is no createdBy, on the input because

76
00:04:18.980 --> 00:04:22.700
the createdBy is going to be assigned
by the resolvers after authentication.

77
00:04:22.700 --> 00:04:24.500
So you don't have to
tell us who's created by,

78
00:04:24.500 --> 00:04:27.610
we'll add the created by by
whoever sent in the request.

79
00:04:27.610 --> 00:04:29.090
So some of this stuff has taken off.

80
00:04:29.090 --> 00:04:31.000
So not only is it a slightly
different field, but

81
00:04:31.000 --> 00:04:33.530
it's just an input and not a type.

82
00:04:33.530 --> 00:04:34.450
So if you run a test on that.

83
00:04:42.131 --> 00:04:43.014
&gt;&gt; Scott Moss: So that passes, so

84
00:04:43.014 --> 00:04:45.840
then now we need to update
product input has correct fields.

85
00:04:45.840 --> 00:04:50.820
So if we go back, scroll down to
UpdateProductInput, let's grab this.

86
00:04:52.339 --> 00:04:56.734
&gt;&gt; Scott Moss: Copy that, and we'll make
a new input cuz this is also an input, so

87
00:04:56.734 --> 00:05:02.474
Update,
&gt;&gt; Scott Moss: ProductInput.

88
00:05:02.474 --> 00:05:06.970
And remember, I just like to use the word
input as a suffix to my inputs so

89
00:05:06.970 --> 00:05:09.000
I know that they're inputs.

90
00:05:09.000 --> 00:05:09.820
You don't have to.

91
00:05:09.820 --> 00:05:13.900
You can just call this UpdateProduct if
you want, but it's kind of, what is that?

92
00:05:13.900 --> 00:05:15.430
Is that a type, a query?

93
00:05:15.430 --> 00:05:16.320
I don't know.

94
00:05:16.320 --> 00:05:17.900
So I like to just do that.

95
00:05:19.230 --> 00:05:21.170
And I'll add these back here.

96
00:05:23.120 --> 00:05:24.330
And then get rid of the commas.

97
00:05:26.760 --> 00:05:27.346
And then fix the spacing.

98
00:05:29.668 --> 00:05:30.910
&gt;&gt; Scott Moss: So
I'll run the test for that.

99
00:05:32.920 --> 00:05:35.670
And you notice that none of these have
required validations on them, and

100
00:05:35.670 --> 00:05:38.720
that's because if I made
any of these required,

101
00:05:38.720 --> 00:05:41.530
that means whenever you do an update,
you have to update one of these fields.

102
00:05:41.530 --> 00:05:42.670
That's not what you want.

103
00:05:42.670 --> 00:05:45.240
These fields aren't required cuz I don't
know which fields you're gonna update, so

104
00:05:45.240 --> 00:05:49.590
you can add any ones that you want to
update, whichever ones are updatable.

105
00:05:49.590 --> 00:05:52.140
So that's why they're not required.

106
00:05:53.690 --> 00:05:55.120
So if we go look at that,
that's good to go.

107
00:05:55.120 --> 00:05:58.660
So now it looks like we need
to make a product query.

108
00:05:58.660 --> 00:05:59.440
So remember what I said?

109
00:05:59.440 --> 00:06:00.220
When you make the queries,

110
00:06:00.220 --> 00:06:03.760
make sure you extend the type called
Query cuz it's already created.

111
00:06:03.760 --> 00:06:07.480
If you didn't do that, you're gonna get an
error saying, it was already created and

112
00:06:07.480 --> 00:06:08.720
that means you need to go extend it.

113
00:06:10.230 --> 00:06:13.610
Extend type query, just looking for
a query called product,

114
00:06:13.610 --> 00:06:17.139
lower case p, singular, product.

115
00:06:18.380 --> 00:06:22.870
And if you go look at the spec,
we can see that

116
00:06:22.870 --> 00:06:27.320
it looks like it's taken an id,
and it returns a product type.

117
00:06:27.320 --> 00:06:32.230
So you would have to put the two and
two together and look at my query to see

118
00:06:32.230 --> 00:06:34.930
that it's expecting an argument,
and there's some random thing here.

119
00:06:34.930 --> 00:06:37.500
It's called id, so we can try the id type.

120
00:06:37.500 --> 00:06:42.280
So I'm gonna call it id, just like I see
it there, and I'm gonna say id type,

121
00:06:42.280 --> 00:06:44.280
I'm gonna make it required.

122
00:06:44.280 --> 00:06:46.700
And I know it returns the Product type,
so I'll do that.

123
00:06:49.654 --> 00:06:55.590
&gt;&gt; Scott Moss: So this is saying, I have
a query called product, lower case p.

124
00:06:55.590 --> 00:06:58.280
It takes one argument by the name of id.

125
00:06:58.280 --> 00:07:03.140
Its type is an ID,
scala type that's not null or required.

126
00:07:03.140 --> 00:07:07.170
And it returns a product
type that's not null.

127
00:07:07.170 --> 00:07:08.120
That's what that's saying there.

128
00:07:14.468 --> 00:07:17.323
&gt;&gt; Scott Moss: If we run that,
it looks like that passes, so

129
00:07:17.323 --> 00:07:21.920
the next one is a products type,
so pluralized, products.

130
00:07:21.920 --> 00:07:28.200
And if you go look at the spec for
that, it looks like this one is taking,

131
00:07:30.190 --> 00:07:34.720
it's not taking any arguments and
it's returning just this objects here.

132
00:07:36.960 --> 00:07:41.500
So this test isn't very strict, so there's
two ways you could have got this to pass.

133
00:07:41.500 --> 00:07:43.310
So we know it doesn't take any arguments.

134
00:07:43.310 --> 00:07:48.710
But you could also have just put products
here, like this, and it would pass.

135
00:07:48.710 --> 00:07:51.392
But you can also wrap this in an array and
it would still pass.

136
00:07:51.392 --> 00:07:55.251
And the reason that is,
is because if this wasn't an array,

137
00:07:55.251 --> 00:07:59.502
you still have to do the same
syntax like this in your query.

138
00:07:59.502 --> 00:08:02.650
You still say, okay, if this an array
of product, I still only want the name,

139
00:08:02.650 --> 00:08:05.820
price, image, and
type of those objects in any array.

140
00:08:05.820 --> 00:08:08.690
If this is not an array, you still
would say, I want the name, price,

141
00:08:08.690 --> 00:08:09.620
image, and type.

142
00:08:09.620 --> 00:08:12.660
So your query doesn't change
because something is in an array.

143
00:08:12.660 --> 00:08:16.570
And because my test is only testing this
query, your schema would've worked for

144
00:08:16.570 --> 00:08:18.090
an array or not an array.

145
00:08:18.090 --> 00:08:20.660
Seeing how this is pluralized,
an array would probably make more sense.

146
00:08:22.139 --> 00:08:24.533
&gt;&gt; Scott Moss: So, you could do that.

147
00:08:26.101 --> 00:08:28.820
&gt;&gt; Scott Moss: And I don't know if it's
not null or not, but let's check it out.

148
00:08:33.012 --> 00:08:35.510
&gt;&gt; Scott Moss: Scroll up.

149
00:08:35.510 --> 00:08:37.560
Yeah, so it satisfies that query.

150
00:08:37.560 --> 00:08:39.180
So like I said,
you can put it in an array or not.

151
00:08:39.180 --> 00:08:42.380
It'll still satisfy the query
cuz the test is not that strict.

152
00:08:42.380 --> 00:08:44.120
So now we have a new product mutation.

153
00:08:46.040 --> 00:08:49.680
Extend type Mutation,
just like we did the query.

154
00:08:51.120 --> 00:08:52.950
And we need a newProduct.

155
00:08:52.950 --> 00:08:57.360
If you scroll up, we already
created input for a new product.

156
00:08:57.360 --> 00:08:59.806
It's called a NewProductInput.

157
00:08:59.806 --> 00:09:02.360
So that's why we created it, cuz we're
gonna use here on the new product.

158
00:09:02.360 --> 00:09:05.980
So if you look at the test,
new product mutation,

159
00:09:07.250 --> 00:09:11.300
we'll talk about this in a minute,
these names,

160
00:09:11.300 --> 00:09:14.410
these named operations in GraphQL,
but the mutation is right here.

161
00:09:14.410 --> 00:09:18.030
It's a new product, it's expecting
some variable called input, and

162
00:09:18.030 --> 00:09:22.040
its value's gonna be an input that's
referenced here on the new product input.

163
00:09:22.040 --> 00:09:24.100
So I'm gonna say new product.

164
00:09:25.550 --> 00:09:28.355
&gt;&gt; Scott Moss: I'm gonna give it
a variable name called input, and

165
00:09:28.355 --> 00:09:32.449
I'm gonna say its type is going to be
new product input, that's required.

166
00:09:34.050 --> 00:09:38.470
And it's gonna return a Product type,
like that.

167
00:09:41.499 --> 00:09:42.790
&gt;&gt; Scott Moss: So I'll run the test.

168
00:09:48.263 --> 00:09:50.856
&gt;&gt; Scott Moss: And
that satisfied the NewProductTest, so

169
00:09:50.856 --> 00:09:55.860
then I could go ahead and run the, or
I can create the update product mutation.

170
00:09:55.860 --> 00:09:59.505
So updateProduct mutation.

171
00:09:59.505 --> 00:10:05.520
And if we go look at the test for that.

172
00:10:06.630 --> 00:10:09.390
That's taking in an ID and an input.

173
00:10:09.390 --> 00:10:11.640
So ID and and input.

174
00:10:11.640 --> 00:10:13.720
It's referencing a variable up here.

175
00:10:13.720 --> 00:10:16.557
It's type is ID,
this is referencing a variable up there,

176
00:10:16.557 --> 00:10:18.220
its type is UpdateProductInput.

177
00:10:19.430 --> 00:10:22.770
So we didn't talk about variables yet
inside of named operations.

178
00:10:22.770 --> 00:10:26.767
But if you look just here at the mutation
itself where we did talk about args,

179
00:10:26.767 --> 00:10:30.488
you'll see that its name is ID, its name
is input, and that's all we really need.

180
00:10:30.488 --> 00:10:33.620
So, we know it takes an id of type is ID.

181
00:10:35.550 --> 00:10:39.025
And I know it takes an input whose type
is the one we already created up here,

182
00:10:39.025 --> 00:10:42.370
UpdateProductInput.

183
00:10:42.370 --> 00:10:44.500
So, I'll go ahead and put that in, and

184
00:10:44.500 --> 00:10:47.560
that's require, and
it too returns a type of Product.

185
00:10:52.880 --> 00:10:54.449
&gt;&gt; Scott Moss: So
I'll go ahead and test that.

186
00:10:59.084 --> 00:11:01.130
&gt;&gt; Scott Moss: And that satisfies that.

187
00:11:01.130 --> 00:11:02.935
And the last one is removeProduct.

188
00:11:06.151 --> 00:11:07.911
&gt;&gt; Scott Moss: And
if we just look at removeProduct,

189
00:11:07.911 --> 00:11:11.050
I'm sure it'll only takes one
argument which should just be an ID.

190
00:11:11.050 --> 00:11:13.030
You only need an ID to remove something.

191
00:11:13.030 --> 00:11:17.780
So, we'll just say yep,
just text an ID, and

192
00:11:17.780 --> 00:11:21.566
it returns a product that got removed.

193
00:11:23.706 --> 00:11:25.640
&gt;&gt; Scott Moss: And we run those tests.

194
00:11:29.138 --> 00:11:30.655
&gt;&gt; Scott Moss: And that's all the tests.

