WEBVTT

1
00:00:00.190 --> 00:00:04.110
&gt;&gt; Scott Moss: The other thing about
inside of resolvers is that any errors

2
00:00:04.110 --> 00:00:06.420
that you have in here,
so if I just come in,

3
00:00:06.420 --> 00:00:12.750
I throw an error,
&gt;&gt; Scott Moss: Your server will not crash.

4
00:00:12.750 --> 00:00:15.169
So in Express, if you put the rest API,
if you just throw an error,

5
00:00:15.169 --> 00:00:16.872
your server is gonna crash,
it's gonna die.

6
00:00:16.872 --> 00:00:18.716
That doesn't happen here, and

7
00:00:18.716 --> 00:00:22.650
that's because GraphQL wraps all
your resolvers in a tri-catch.

8
00:00:22.650 --> 00:00:25.250
And if there's an error that's thrown,
it catches it and

9
00:00:25.250 --> 00:00:26.910
sends it back to the client as an error.

10
00:00:28.180 --> 00:00:30.940
So any error that ever
happens automatically gets

11
00:00:30.940 --> 00:00:32.770
sent back to the client as an error.

12
00:00:32.770 --> 00:00:36.409
So you don't have to worry about catching
your errors in the resolver if you

13
00:00:36.409 --> 00:00:37.230
don't want to.

14
00:00:37.230 --> 00:00:38.897
I mean, there are still some
scenarios where you would,

15
00:00:38.897 --> 00:00:40.158
like you don't want this error to go back.

16
00:00:40.158 --> 00:00:44.828
And instead, you wanna retry or if you're
doing transactions or something like that.

17
00:00:44.828 --> 00:00:46.510
Yeah, you still might wanna do that but
for

18
00:00:46.510 --> 00:00:48.812
the sake of like not breaking
your server throwing error.

19
00:00:48.812 --> 00:00:52.363
You don't have to because these graph
fill implementations catch it for you and

20
00:00:52.363 --> 00:00:53.560
send it back.

21
00:00:53.560 --> 00:00:56.550
Now, do you want that error
being sent back to the client?

22
00:00:56.550 --> 00:00:59.911
Probably not, so that's where they allow
you to format the errors that they catch.

23
00:00:59.911 --> 00:01:03.479
And you can say, I wanna format this
error to get rid of the stack trace or

24
00:01:03.479 --> 00:01:07.200
rename it, or put a specific error code or
something like that.

25
00:01:07.200 --> 00:01:10.060
So you might get into
the habit of creating custom

26
00:01:10.060 --> 00:01:12.130
error classes that you create yourself.

27
00:01:12.130 --> 00:01:14.690
So when an error happens,
you'll throw that custom error class.

28
00:01:14.690 --> 00:01:17.610
And then your error formatter
knows what to do when it sees that

29
00:01:17.610 --> 00:01:20.160
custom error class being thrown,
and so forth.

30
00:01:20.160 --> 00:01:24.970
So it can get pretty advanced with
the error handling stuff there.

