WEBVTT

1
00:00:00.412 --> 00:00:02.957
&gt;&gt; Scott Moss: This exercise and
this one's actually really fun.

2
00:00:02.957 --> 00:00:06.640
So I like I said, there's many
ways to authenticate with GraphQL.

3
00:00:06.640 --> 00:00:09.220
Our API is public, so we'll use API keys.

4
00:00:09.220 --> 00:00:15.900
Some queries need authentication, and
some queries also need the correct role.

5
00:00:15.900 --> 00:00:18.750
So authenticate the request and
update the product resolvers.

6
00:00:18.750 --> 00:00:20.280
So what do I mean by that?

7
00:00:20.280 --> 00:00:22.570
So check out the lesson five branch.

8
00:00:22.570 --> 00:00:28.110
And basically, what you're gonna do is
you're gonna authenticate the request and

9
00:00:28.110 --> 00:00:29.660
add the user to the context object.

10
00:00:30.850 --> 00:00:35.160
You're gonna block all product queries and
mutations if there is no user.

11
00:00:35.160 --> 00:00:37.161
So you're gonna check for
a user in a context object, and

12
00:00:37.161 --> 00:00:38.465
I'm gonna show you what that means.

13
00:00:38.465 --> 00:00:41.051
But if a user's not there,
you're not gonna throw an error,

14
00:00:41.051 --> 00:00:44.560
you're just gonna attach it to
the context object and you just go.

15
00:00:44.560 --> 00:00:47.080
In the resolvers is where you check and
see if the user's there or not.

16
00:00:47.080 --> 00:00:52.000
So every single query has to have
a user on the context object.

17
00:00:52.000 --> 00:00:54.651
If it's not, it should throw an error.

18
00:00:54.651 --> 00:00:57.214
For mutations,
not only should there be a user, but

19
00:00:57.214 --> 00:00:59.130
that user should have a role of admin.

20
00:00:59.130 --> 00:01:02.060
If the user doesn't have a role
admin inside the mutations,

21
00:01:02.060 --> 00:01:03.850
it should also throw an error.

22
00:01:03.850 --> 00:01:05.860
And then, once you do that,
all your tests should pass.

23
00:01:05.860 --> 00:01:06.410
So basically,

24
00:01:06.410 --> 00:01:09.046
you're gonna go back to the product
resolvers that you already created.

25
00:01:09.046 --> 00:01:14.178
And you're going to change the queries to
check to make sure that there's a user.

26
00:01:14.178 --> 00:01:17.775
Then you're gonna change the mutations
to check that there's a user, and

27
00:01:17.775 --> 00:01:19.326
if that user has a role of admin.

28
00:01:19.326 --> 00:01:21.970
And then if that's true,
then you can proceed.

29
00:01:21.970 --> 00:01:23.731
If not, you're gonna throw an error.

30
00:01:23.731 --> 00:01:24.443
That's it.

31
00:01:26.055 --> 00:01:27.233
&gt;&gt; Scott Moss: So if we check out,

32
00:01:27.233 --> 00:01:31.232
if we go back to our repo,
&gt;&gt; Scott Moss: And

33
00:01:31.232 --> 00:01:33.712
we check out to lesson five.

34
00:01:40.490 --> 00:01:43.940
&gt;&gt; Scott Moss: One thing I wanna show
you is if you head over to Server.js,

35
00:01:43.940 --> 00:01:47.459
this is where I say you're gonna
add the user to the context,

36
00:01:47.459 --> 00:01:51.700
this whole time I had in the context
object, we get this request.

37
00:01:51.700 --> 00:01:53.584
And we get this user user :null,
all right?

38
00:01:53.584 --> 00:01:57.822
There is a note here that says use the
authenticate function from utils to Auth

39
00:01:57.822 --> 00:01:58.613
the request.

40
00:01:58.613 --> 00:02:02.145
And it says it's Asynch,
as in the authenticate function is Asynch.

41
00:02:02.145 --> 00:02:07.053
And remember, this context object can be
asynch so you might have to add a little

42
00:02:07.053 --> 00:02:12.870
async here, do like some stuff here cuz
the authenticate function is async.

43
00:02:12.870 --> 00:02:15.690
So the authentication function
is already done for you.

44
00:02:15.690 --> 00:02:17.820
You don't have to do anything but
to check it out.

45
00:02:17.820 --> 00:02:19.300
Utils off.

46
00:02:19.300 --> 00:02:20.380
It's this function right here.

47
00:02:20.380 --> 00:02:22.890
It takes the entire request object,
looks for

48
00:02:22.890 --> 00:02:28.210
an API key, if it does have an API key,
it will find the user and return it.

49
00:02:28.210 --> 00:02:30.320
If it doesn't have an API key,
it just returns nothing.

50
00:02:30.320 --> 00:02:33.450
It doesn't error out, cuz we want
the reserves to do the error handling.

51
00:02:33.450 --> 00:02:35.400
We want the reserves to do the error outs.

52
00:02:35.400 --> 00:02:38.340
We don't want the server stopping
if it is not authenticated.

53
00:02:38.340 --> 00:02:39.900
So we're not gonna do that here.

54
00:02:39.900 --> 00:02:41.130
So this is gonna return nothing.

55
00:02:41.130 --> 00:02:47.660
So we're gonna use this function inside of
server js here to attach the user here.

56
00:02:47.660 --> 00:02:50.550
So instead of attaching null, you're gonna
to attach whatever authenticate returns.

57
00:02:51.590 --> 00:02:52.500
That's what you're gonna attach.

58
00:02:52.500 --> 00:02:53.910
So that's step one.

59
00:02:53.910 --> 00:02:58.830
Step two is going over to the product
resolvers and updating the two queries

60
00:02:58.830 --> 00:03:03.770
that we have, product and products,
to check for context.user.

61
00:03:03.770 --> 00:03:07.281
If there is no context.user,
then you need to throw an error.

62
00:03:07.281 --> 00:03:10.817
And the error that you have to throw is
this authentication error that ships with

63
00:03:10.817 --> 00:03:11.700
apollo-server.

64
00:03:11.700 --> 00:03:15.220
It's just a fancy error that they created
that just tells the client that you're not

65
00:03:15.220 --> 00:03:16.640
authenticated, that's all it is.

66
00:03:16.640 --> 00:03:18.590
It's just an error class
that they extended.

67
00:03:18.590 --> 00:03:21.240
You can make your own error class, but
the test is looking specifically for

68
00:03:21.240 --> 00:03:24.110
this authentication error, so
you have to throw that error.

69
00:03:24.110 --> 00:03:27.703
So this throw new authentication
error if the product or

70
00:03:27.703 --> 00:03:30.460
products doesn't have context dot user.

71
00:03:30.460 --> 00:03:32.798
And then, the third one is
what you need to do is for

72
00:03:32.798 --> 00:03:36.368
all the mutations like new product,
update product, and remove product,

73
00:03:36.368 --> 00:03:39.432
not only do you need to check to
see if there's a context dot user,

74
00:03:39.432 --> 00:03:43.630
but you also need to check if that
context dot user dot role equals admin.

75
00:03:43.630 --> 00:03:45.870
And if it doesn't equal admin or
the user is not there,

76
00:03:45.870 --> 00:03:48.160
then you also need to throw
an authentication error.

77
00:03:48.160 --> 00:03:52.686
Cuz we wanna make sure that only
admins can create, delete, and update,

78
00:03:52.686 --> 00:03:55.670
but every authenticated user can read.

79
00:03:55.670 --> 00:03:57.270
So that's what that's for.

80
00:03:57.270 --> 00:03:59.592
And once you have all that,
all your tests should pass.

81
00:04:01.096 --> 00:04:02.130
&gt;&gt; Scott Moss: Any questions on that?

82
00:04:03.800 --> 00:04:10.236
The test command you wanna
run is gonna be mpm test off.

83
00:04:17.588 --> 00:04:21.430
&gt;&gt; Scott Moss: So yeah, just run that
test command, you'll see some failing.

84
00:04:21.430 --> 00:04:26.010
You should see about six test
failing here for authentication.

85
00:04:26.010 --> 00:04:29.080
And you can see that, even in a test it's
saying expect that the functions to throw

86
00:04:29.080 --> 00:04:31.220
a type error of authentication error.

87
00:04:31.220 --> 00:04:32.690
But it didn't throw anything.

88
00:04:32.690 --> 00:04:33.970
So it's expecting that.

89
00:04:33.970 --> 00:04:36.560
Sojust follow those tests.

90
00:04:36.560 --> 00:04:37.520
Do those checks.

91
00:04:37.520 --> 00:04:42.140
I recommend doing those checks for
users as the first thing on your function.

92
00:04:42.140 --> 00:04:43.330
That's the first thing
you should check for.

93
00:04:43.330 --> 00:04:46.790
Don't even proceed to the database
unless those checks pass.

94
00:04:46.790 --> 00:04:48.100
And just throw your errors.

95
00:04:48.100 --> 00:04:51.496
You don't have to catch them,
just throw them.

96
00:04:51.496 --> 00:04:54.516
&gt;&gt; Speaker 2: As far as the only
made product and interface,

97
00:04:54.516 --> 00:04:57.923
did we have to update our
new product code now because

98
00:04:57.923 --> 00:04:58.920
of-
&gt;&gt; Scott Moss: Nope,

99
00:04:58.920 --> 00:05:02.200
you don't have to do anything,
that's the beauty of it, yeah.

100
00:05:02.200 --> 00:05:04.240
It's treated just like a type,
it's an abstract type.

101
00:05:04.240 --> 00:05:07.280
It does the same thing a type does
except you just can't query for it,

102
00:05:07.280 --> 00:05:09.090
it has to resolve to some other type.

103
00:05:09.090 --> 00:05:11.280
But as far as the resolvers and stuff?

104
00:05:11.280 --> 00:05:12.520
No, you don't have to change anything.

105
00:05:12.520 --> 00:05:19.165
Because if you look at your schema, your
queries still return a product, right?

106
00:05:19.165 --> 00:05:21.790
So your resolvers still return a product.

107
00:05:21.790 --> 00:05:22.690
Nothing's changed about it.

108
00:05:22.690 --> 00:05:24.770
It's still got the same fields and
everything on it.

109
00:05:24.770 --> 00:05:26.040
It's just now that it's interfaced.

110
00:05:26.040 --> 00:05:27.080
So you don't have to change any of that.

