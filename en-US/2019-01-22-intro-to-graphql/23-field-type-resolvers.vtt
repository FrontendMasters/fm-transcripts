WEBVTT

1
00:00:00.170 --> 00:00:01.790
&gt;&gt; Scott Moss: So
now that we have the owner there, and

2
00:00:01.790 --> 00:00:03.310
then the same thing would
happen with the cat.

3
00:00:03.310 --> 00:00:07.660
So now that we have the base setup,
now we're gonna start linking to see

4
00:00:07.660 --> 00:00:10.410
in what order did they start
delegating to each other, okay?

5
00:00:10.410 --> 00:00:13.130
So because I can't create a circle
dependency here hard coded,

6
00:00:13.130 --> 00:00:14.570
I need to make this dynamic.

7
00:00:14.570 --> 00:00:18.855
So what I'm gonna do is, now,
this is where writing resolvers for

8
00:00:18.855 --> 00:00:20.929
the type is gonna come in handy.

9
00:00:20.929 --> 00:00:27.145
So instead of resolving the entire
cat object in the cat resolver or

10
00:00:27.145 --> 00:00:31.860
the entire owner object in owner resolver.

11
00:00:31.860 --> 00:00:36.460
I could have those objects be
built up by resolving all of their

12
00:00:36.460 --> 00:00:40.300
fields independently and then graph
key will build the object for me.

13
00:00:40.300 --> 00:00:43.330
Now, that sounds really crazy but
let me know you what I'm talking about.

14
00:00:43.330 --> 00:00:47.436
So what I'm going to do instead is,
for the cat query,

15
00:00:47.436 --> 00:00:50.664
I'm just going to return an empty object.

16
00:00:50.664 --> 00:00:51.522
Okay?

17
00:00:51.522 --> 00:00:55.920
Then for the owner query, I'm also
just going to return an empty object.

18
00:00:55.920 --> 00:01:00.210
So if you remember what I said awhile ago,
resolvers have to return their types or

19
00:01:00.210 --> 00:01:03.210
they have to delegate to another
resolver that returns the type.

20
00:01:03.210 --> 00:01:06.090
We're about to delegate to other
resolvers to return the type.

21
00:01:06.090 --> 00:01:08.120
Cuz I can't hard code
a circular dependency here and

22
00:01:08.120 --> 00:01:09.590
I don't have a database.

23
00:01:09.590 --> 00:01:13.760
So instead what I'm gonna do is I'm gonna
write resolvers for the fields of cat and

24
00:01:13.760 --> 00:01:15.570
owner and it will always be the same.

25
00:01:15.570 --> 00:01:16.450
That's what I'm going to do.

26
00:01:16.450 --> 00:01:19.000
Now if I want to write resolvers for

27
00:01:19.000 --> 00:01:22.790
fields on a type, first I put the types
name, in this case it's going to be Cat

28
00:01:22.790 --> 00:01:25.830
with a capital C because that is
what it's called up here, Cat.

29
00:01:25.830 --> 00:01:29.222
I'm going to write some resolvers for
Cat with a capital C and

30
00:01:29.222 --> 00:01:35.460
I want to write resolvers for
the owner, name, and age.

31
00:01:35.460 --> 00:01:36.400
So that's what I'm gonna do.

32
00:01:36.400 --> 00:01:39.920
So I'm gonna say,
let's just do name and age right quick.

33
00:01:39.920 --> 00:01:45.110
So for name, it's the same thing, it's the
same API as the resolvers for the query.

34
00:01:45.110 --> 00:01:45.990
It's the same thing.

35
00:01:45.990 --> 00:01:50.810
It takes four arguments, a first object,
arguments, context, and info.

36
00:01:50.810 --> 00:01:52.380
It takes the exact same thing.

37
00:01:52.380 --> 00:01:56.040
The only difference is because
this one's gonna be called second.

38
00:01:56.040 --> 00:01:57.730
If we look at the order of execution,

39
00:01:57.730 --> 00:02:03.220
we're gonna call it Query cat first
which is gonna then return an object and

40
00:02:03.220 --> 00:02:05.680
that object is gonna be
treated like a cat type.

41
00:02:05.680 --> 00:02:09.350
So then GraphQL is gonna see that our
register resolvers for the cat type.

42
00:02:09.350 --> 00:02:11.850
So then,
it's gonna go resolve those fields.

43
00:02:11.850 --> 00:02:12.680
So that means whatever,

44
00:02:12.680 --> 00:02:15.880
what was returned here, is gonna be
passed here as the first argument.

45
00:02:15.880 --> 00:02:16.970
So in this case, it's an empty object.

46
00:02:18.280 --> 00:02:20.640
There's an empty object here, so
that'd be the first argument here, yes?

47
00:02:20.640 --> 00:02:26.500
&gt;&gt; Speaker 2: [INAUDIBLE]
resolver for cat with lowercase.

48
00:02:26.500 --> 00:02:29.400
&gt;&gt; Scott Moss: Yes.
&gt;&gt; Speaker 2: How does it know to look for

49
00:02:29.400 --> 00:02:30.920
Cat uppercase?

50
00:02:30.920 --> 00:02:32.460
&gt;&gt; Scott Moss: Yep.
So let's go back up.

51
00:02:32.460 --> 00:02:35.700
So the resolver for Cat for
lowercase two things to note here.

52
00:02:35.700 --> 00:02:37.220
One, it is lowercase.

53
00:02:37.220 --> 00:02:39.910
But two what's more importantly
is that it's a query.

54
00:02:39.910 --> 00:02:42.130
So if we go look here,
&gt;&gt; Speaker 2: Yeah.

55
00:02:42.130 --> 00:02:45.530
&gt;&gt; Scott Moss: Cat is a query
whereas cat is a type.

56
00:02:45.530 --> 00:02:49.680
Right, and so you can think of
the type cat, the type owner, and

57
00:02:49.680 --> 00:02:53.020
the type query, they're siblings,
they're all the same level.

58
00:02:53.020 --> 00:02:54.100
That's why we have them like this.

59
00:02:54.100 --> 00:02:57.780
So you got query right here and
as a sibling we've got the cat type.

60
00:02:57.780 --> 00:03:00.480
But these operators here
these are just fields.

61
00:03:02.270 --> 00:03:03.390
So again,

62
00:03:03.390 --> 00:03:06.830
this object that I return right here is
going to be the first object that's here.

63
00:03:06.830 --> 00:03:09.760
Because it doesn't do anything
I don't really need it.

64
00:03:09.760 --> 00:03:11.740
But just to know,
that's what that object is,

65
00:03:11.740 --> 00:03:16.680
so if I return, if I put something here,
you'll be able see this first object here.

66
00:03:18.470 --> 00:03:19.610
Okay, so I'm not gonna do anything here.

67
00:03:19.610 --> 00:03:23.580
And then the second argument's gonna
be args.namehas, which it doesn't.

68
00:03:23.580 --> 00:03:25.830
Any context that it has,
which we're not using any, so

69
00:03:25.830 --> 00:03:27.260
I'm not gonna even supply
any of that stuff.

70
00:03:27.260 --> 00:03:30.960
I'm not gonna supply anything, and I'm
just going to return a name for our cat.

71
00:03:30.960 --> 00:03:35.810
We'll call it, my cat's name is actually
Daryl, so I'm going to put Daryl here.

72
00:03:37.570 --> 00:03:39.120
So now we got a name for the cat.

73
00:03:39.120 --> 00:03:41.330
And then we'll do the same thing for age.

74
00:03:41.330 --> 00:03:44.840
For age we'll resolve to two.

75
00:03:47.140 --> 00:03:48.740
Right, pretty simple.

76
00:03:48.740 --> 00:03:50.890
And then what we'll do is
make resolvers for owner.

77
00:03:50.890 --> 00:03:54.440
So for owner, we'll come in here and
we'll say, okay.

78
00:03:54.440 --> 00:03:58.680
So for owner, we wanna go ahead and
resolve the name field as well, and

79
00:03:58.680 --> 00:04:06.190
we'll always have the same name as me,
Scott.

80
00:04:06.190 --> 00:04:06.898
So we got that.

