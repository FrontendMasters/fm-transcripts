WEBVTT

1
00:00:01.110 --> 00:00:04.070
&gt;&gt; Scott Moss: All right, so
if I run a test for that.

2
00:00:04.070 --> 00:00:09.180
&gt;&gt; Speaker 2: So
imagine product had notes on it, and for

3
00:00:09.180 --> 00:00:11.330
each note they had a created by.

4
00:00:11.330 --> 00:00:13.340
So that would no longer be true.

5
00:00:13.340 --> 00:00:17.500
&gt;&gt; Scott Moss: If product had notes on it,
like a field called notes?

6
00:00:17.500 --> 00:00:21.500
&gt;&gt; Speaker 2: Yeah,
that took maybe an object of note that had

7
00:00:21.500 --> 00:00:26.203
a string of the note, and
then usually that created it.

8
00:00:26.203 --> 00:00:29.657
The only reason that you can assume
product right there is product is just

9
00:00:29.657 --> 00:00:32.160
because that's all you have
in the model right now.

10
00:00:32.160 --> 00:00:35.945
But the model could get more complicated
where created by is more than just,

11
00:00:35.945 --> 00:00:37.512
would take more than just a product.

12
00:00:37.512 --> 00:00:39.070
Or not?
&gt;&gt; Scott Moss: No, in this case,

13
00:00:39.070 --> 00:00:40.690
even if we have more it's
always gonna be a product.

14
00:00:40.690 --> 00:00:43.833
And that's because we're adding
this field to the product type.

15
00:00:43.833 --> 00:00:47.865
So that means this field is only ever
gonna be ran when someone asks to created

16
00:00:47.865 --> 00:00:49.560
by field on a product.

17
00:00:49.560 --> 00:00:52.080
Which means before this
field even executes,

18
00:00:52.080 --> 00:00:54.770
this has to be executed at
some point first, right?

19
00:00:54.770 --> 00:00:56.540
Cuz how else would they have asked for it?

20
00:00:56.540 --> 00:01:01.180
You couldn't ask for a product type unless
you ran a query that had something to do

21
00:01:01.180 --> 00:01:05.340
with the product, either directly by
writing a query that returns a product or

22
00:01:05.340 --> 00:01:06.810
indirectly by writing a query or

23
00:01:06.810 --> 00:01:09.870
mutation that returned a type
that referenced a product.

24
00:01:09.870 --> 00:01:11.540
And even then,
it still would get resolved.

25
00:01:11.540 --> 00:01:14.480
So what I'm saying is there's just no
way that this created by field would

26
00:01:14.480 --> 00:01:17.760
even be triggered unless the product
was already resolved first.

27
00:01:17.760 --> 00:01:18.636
See what I mean?

28
00:01:18.636 --> 00:01:23.500
And the product's already resolved,
then whoever returned it.

29
00:01:23.500 --> 00:01:26.334
I mean, I guess technically
you could be a jerk and

30
00:01:26.334 --> 00:01:29.519
just return a blank object
here in one of these queries.

31
00:01:29.519 --> 00:01:32.053
And this would just be a blank object.

32
00:01:32.053 --> 00:01:35.890
But the object still represents a product
even though it's a blank object.

33
00:01:37.060 --> 00:01:37.930
Mark.

34
00:01:37.930 --> 00:01:41.867
&gt;&gt; Speaker 3: Is there a way to write
a resolver that is triggered when an error

35
00:01:41.867 --> 00:01:44.478
occurs to delegate to another resolver?

36
00:01:46.441 --> 00:01:50.860
&gt;&gt; Scott Moss: Is there a way to write a
resolver that triggers when error returns?

37
00:01:50.860 --> 00:01:54.350
No, you can't write resolvers to
trigger when an error returns.

38
00:01:54.350 --> 00:01:58.240
But you can write an error

39
00:01:59.680 --> 00:02:04.010
formatter inside the ApolloServer.

40
00:02:04.010 --> 00:02:05.620
You can come down here.

41
00:02:06.960 --> 00:02:09.430
I got so many things open,
let me close some of this stuff.

42
00:02:09.430 --> 00:02:11.866
You can come into the server, and

43
00:02:11.866 --> 00:02:17.785
they should have a formatError function
here that is a function that you can run.

44
00:02:17.785 --> 00:02:21.077
And so, whenever an error happens on your
server, you can grab that error as a first

45
00:02:21.077 --> 00:02:23.890
argument, and
you can do whatever you want with it.

46
00:02:23.890 --> 00:02:25.410
So you can format it, you can change it,

47
00:02:25.410 --> 00:02:27.400
you can send it off to
your error reporting.

48
00:02:27.400 --> 00:02:28.050
You do whatever you want.

49
00:02:28.050 --> 00:02:29.290
This function's gonna
be called every single

50
00:02:29.290 --> 00:02:30.950
time there's an error on your server.

51
00:02:30.950 --> 00:02:35.716
But you can't write a resolver for
it as far as errors go, yeah.

52
00:02:37.429 --> 00:02:41.260
&gt;&gt; Speaker 2: On this resolver that we
just did, this created by and product.

53
00:02:41.260 --> 00:02:41.990
&gt;&gt; Scott Moss: Yeah.
&gt;&gt; Speaker 2: There also

54
00:02:41.990 --> 00:02:44.320
could be the three other parameters,
right?

55
00:02:44.320 --> 00:02:44.920
&gt;&gt; Scott Moss: Of course.

56
00:02:44.920 --> 00:02:45.540
&gt;&gt; Speaker 2: You could-
&gt;&gt; Scott Moss: Yeah,

57
00:02:45.540 --> 00:02:48.200
they're still there,
I'm just not using them, yeah.

58
00:02:48.200 --> 00:02:49.870
&gt;&gt; Speaker 2: But they could be there?

59
00:02:49.870 --> 00:02:55.020
&gt;&gt; Scott Moss: Yeah, so for instance,
let's say I went down to right here.

60
00:02:55.020 --> 00:02:55.650
Where's created by?

61
00:02:55.650 --> 00:02:57.590
Right here.

62
00:02:57.590 --> 00:03:00.665
So if I add a arcs here,

63
00:03:00.665 --> 00:03:05.890
like I don't know, ID or something like
that, yeah, that would show up here.

64
00:03:05.890 --> 00:03:08.710
&gt;&gt; Speaker 2: Okay.
&gt;&gt; Scott Moss: Right, so yeah.

65
00:03:08.710 --> 00:03:11.590
But again, I can't think of any good
example of putting arguments on a field

66
00:03:11.590 --> 00:03:14.110
other than if that field had an array.

67
00:03:14.110 --> 00:03:15.153
I just can't think of a good one.

68
00:03:16.339 --> 00:03:17.358
&gt;&gt; Scott Moss: Yes.
&gt;&gt; Speaker 2: I did have a question.

69
00:03:17.358 --> 00:03:19.737
&gt;&gt; Scott Moss: What's up, David?

70
00:03:19.737 --> 00:03:26.260
&gt;&gt; Speaker 2: So in the first lesson,
we wrote the, what is called, the schema?

71
00:03:26.260 --> 00:03:28.240
So where is the schema
coming from here now?

72
00:03:29.540 --> 00:03:31.250
&gt;&gt; Scott Moss: This is
still the same schema.

73
00:03:31.250 --> 00:03:33.364
I'm still using the exact same schema.

74
00:03:33.364 --> 00:03:34.380
You wrote the scheme.

75
00:03:34.380 --> 00:03:36.447
If you checked out, yeah, it's still here.

76
00:03:36.447 --> 00:03:37.830
It's just my solution of it.

77
00:03:37.830 --> 00:03:39.850
But it's pretty much
the same thing that you did.

78
00:03:39.850 --> 00:03:41.460
It's the exact same thing,
I didn't really change it.

79
00:03:41.460 --> 00:03:44.130
I might have made one or two changes,
but it's the same thing.

80
00:03:44.130 --> 00:03:45.650
And that's what the test is looking at.

81
00:03:45.650 --> 00:03:50.390
If you look at the test, what I'm actually
doing is, as far as the resolvers go,

82
00:03:50.390 --> 00:03:53.348
the resolvers don't even
know about the schema.

83
00:03:53.348 --> 00:03:58.105
I'm just running the resolvers
purely as far as the test goes,

84
00:03:58.105 --> 00:04:01.350
if i go look at product
resolvers dot spec.

85
00:04:02.850 --> 00:04:04.930
I'm just running them purely.

86
00:04:04.930 --> 00:04:11.450
I just literally grab the functions and
I run them right here.

87
00:04:11.450 --> 00:04:17.360
&gt;&gt; Speaker 2: I was looking
in server.js and the schema.

88
00:04:17.360 --> 00:04:18.940
&gt;&gt; Scott Moss: Yeah, so
if you go look in server.js,

89
00:04:18.940 --> 00:04:20.318
the schema you created is right here.

90
00:04:20.318 --> 00:04:21.585
Types, product.

91
00:04:21.585 --> 00:04:23.890
&gt;&gt; Speaker 2: [INAUDIBLE]
&gt;&gt; Scott Moss: Yeah, I'm sorry.

92
00:04:23.890 --> 00:04:27.490
The schema that you created is gonna
be loaded up by this loads type schema.

93
00:04:27.490 --> 00:04:33.320
So this loadTypeSchema takes in a name of
a schema, like product, coupon, or user.

94
00:04:33.320 --> 00:04:38.330
And it reads it from the file system which
is asynchronous, grabs it as a string,

95
00:04:38.330 --> 00:04:41.910
merges them all together as one big
schema, and then passes it to Apollo.

96
00:04:41.910 --> 00:04:44.420
So you can see, I'm doing that right here.

97
00:04:44.420 --> 00:04:49.080
So I'm taking out an array of schema
names, so product, coupon, user.

98
00:04:49.080 --> 00:04:50.780
I'm looping over them.

99
00:04:50.780 --> 00:04:54.210
I'm loading them individually,
which just gives me strings.

100
00:04:54.210 --> 00:04:58.430
And then,
I save them to this variable here.

101
00:04:58.430 --> 00:05:01.260
And then,
I just spread them across this array.

102
00:05:01.260 --> 00:05:04.250
Yeah, so I'm adding them all here combined
with the root schema, which is this.

103
00:05:05.800 --> 00:05:08.573
So that's where your schema is,
it's in here.

104
00:05:08.573 --> 00:05:11.180
Yeah, good question.

105
00:05:11.180 --> 00:05:14.230
&gt;&gt; Speaker 2: I have one question,
and that is on the update product.

106
00:05:14.230 --> 00:05:16.237
&gt;&gt; Scott Moss: Yes.
&gt;&gt; Speaker 2: Why doesn't args.input get

107
00:05:16.237 --> 00:05:19.110
spread whereas in create it gets spread?

108
00:05:19.110 --> 00:05:19.760
&gt;&gt; Scott Moss: It's a good question.

109
00:05:19.760 --> 00:05:24.576
So the reason it get spread in
create is because just in case, one,

110
00:05:24.576 --> 00:05:26.302
there's two reasons.

111
00:05:26.302 --> 00:05:27.077
One, is simplicity.

112
00:05:27.077 --> 00:05:28.810
It's easier for me to write it that way.

113
00:05:28.810 --> 00:05:31.550
Two, I want to override or

114
00:05:31.550 --> 00:05:34.962
create a possible created by
property here to be what this is.

115
00:05:34.962 --> 00:05:36.430
Cuz that's what this does.

116
00:05:36.430 --> 00:05:39.960
The way spread works is whatever's
on the right is gonna take

117
00:05:39.960 --> 00:05:41.730
precedence over what's on the left.

118
00:05:41.730 --> 00:05:43.930
So if there was a created
by property here,

119
00:05:43.930 --> 00:05:45.820
it's gonna be overridden
by whatever I've put here.

120
00:05:45.820 --> 00:05:46.910
So that's that.

121
00:05:46.910 --> 00:05:49.400
Down here, in update,
I don't need to do that.

122
00:05:49.400 --> 00:05:51.830
I don't need to add an extra
argument that's not there.

123
00:05:51.830 --> 00:05:55.890
I'm literally just gonna take exactly
what's there and input and add it.

124
00:05:55.890 --> 00:06:01.933
Up here, I had to because I know for sure,
if we go look at new products, let me see.

125
00:06:03.143 --> 00:06:07.511
&gt;&gt; Scott Moss: If we go look at new
products in the GraphQL new product input,

126
00:06:07.511 --> 00:06:09.990
there is no created by here.

127
00:06:09.990 --> 00:06:11.170
So I have to add created by.

128
00:06:11.170 --> 00:06:16.402
And if I don't do a spread, the only way
I can do it is if I maybe try to mutate

129
00:06:16.402 --> 00:06:23.350
args.input.createdBy equals,
and that's just gross.

130
00:06:23.350 --> 00:06:26.660
I don't wanna mutate the argument,
so I just made a new object.

