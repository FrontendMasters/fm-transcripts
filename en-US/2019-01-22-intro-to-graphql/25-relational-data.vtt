WEBVTT

1
00:00:00.470 --> 00:00:03.240
&gt;&gt; Scott Moss: So
now that we know that, and

2
00:00:03.240 --> 00:00:07.570
this result is only executed
when the query demands for

3
00:00:07.570 --> 00:00:11.360
them, when we started some
relational data like an owner.

4
00:00:11.360 --> 00:00:16.260
And we say the owner we wanna
get the name, and we run that.

5
00:00:16.260 --> 00:00:18.470
This gets back layered,
okay, so how does that work?

6
00:00:18.470 --> 00:00:22.186
So let's clear the console out and follow
that step by step, cuz it's a little

7
00:00:22.186 --> 00:00:26.091
more complicated So we'll run it one time,
and then we'll go look at these logs.

8
00:00:26.091 --> 00:00:30.919
So the first thing that happened is,
I executed the query called, Cat, and

9
00:00:30.919 --> 00:00:33.119
we logged into Cat Query, right?

10
00:00:33.119 --> 00:00:34.309
Boom.

11
00:00:34.309 --> 00:00:37.922
Then that return to blank object,
which is supposed to be a cat type, but

12
00:00:37.922 --> 00:00:41.553
we're not done yet, so the server's
gonna trust us until we're done.

13
00:00:41.553 --> 00:00:45.967
So if we go look at our resolver that
ask for a name, an age and owner for

14
00:00:45.967 --> 00:00:50.480
the cat type, and look, I have
resolved for the name, age and owner.

15
00:00:50.480 --> 00:00:52.738
So it execute all three
of those functions.

16
00:00:52.738 --> 00:00:56.413
So the first one was name,
that's why it says in cat name.

17
00:00:56.413 --> 00:00:59.172
The second one was age,
that's why it says in cat age.

18
00:00:59.172 --> 00:01:01.416
And then the third one that I asked for
was owner, and

19
00:01:01.416 --> 00:01:03.770
that's why I said it's in cat owner.

20
00:01:03.770 --> 00:01:06.755
So that happened, and
then because the owner is an object type,

21
00:01:06.755 --> 00:01:10.152
I just returned a blank object, and
this is supposed to be an owner type.

22
00:01:10.152 --> 00:01:12.891
So just like it looked up the fields for
the cat type,

23
00:01:12.891 --> 00:01:15.515
it went to go look up the fields for
the owner type.

24
00:01:15.515 --> 00:01:19.596
And the owner type, if you go see what
I asked for there, I asked for a name.

25
00:01:19.596 --> 00:01:21.655
So then it executed owner dot name.

26
00:01:21.655 --> 00:01:24.711
And hat's why it logged in owner name and
then it returned that value.

27
00:01:24.711 --> 00:01:27.118
Anyone need a further explanation on that?

28
00:01:27.118 --> 00:01:29.262
That one is a little more complicated.

29
00:01:29.262 --> 00:01:33.270
&gt;&gt; Speaker 2: Can you go back to the-
&gt;&gt; Scott Moss: Yes, go back to the query.

30
00:01:33.270 --> 00:01:38.058
Yeah, so you can see you asked for
the name, the age and then owner,

31
00:01:38.058 --> 00:01:41.352
which all have their
own resolver functions.

32
00:01:41.352 --> 00:01:44.552
And then the owner.name also had
its own resolver function, right?

33
00:01:44.552 --> 00:01:50.129
So if I go back up and I say okay,
give me the cat for this owner and

34
00:01:50.129 --> 00:01:56.254
I give you the name of that cat,
you could see it still works, right?

35
00:01:56.254 --> 00:02:00.874
And the reason that still works is for
the same reason that the other ones work,

36
00:02:00.874 --> 00:02:03.263
because a owner has a cat resolver here.

37
00:02:03.263 --> 00:02:05.660
And it returns an object
which is the cat type.

38
00:02:05.660 --> 00:02:08.608
So then it goes and look back at the cat
type, I'm like all right okay cool.

39
00:02:08.608 --> 00:02:09.814
How do you get a name for a cat.

40
00:02:09.814 --> 00:02:10.679
You just return Daryl.

41
00:02:10.679 --> 00:02:12.940
That's how you get a name for a cat.

42
00:02:12.940 --> 00:02:14.555
So we can go on and on and on here.

43
00:02:14.555 --> 00:02:18.909
I can say cool, give me the owner,
give me the cat.

44
00:02:18.909 --> 00:02:24.515
Give me the owner, give me the cat
&gt;&gt; Scott Moss: And then finally I can

45
00:02:24.515 --> 00:02:27.678
say cool, just give the name of whatever
that one is, and it will give it to me.

46
00:02:34.400 --> 00:02:35.857
&gt;&gt; Scott Moss: This
starting to make sense?

47
00:02:35.857 --> 00:02:40.375
Okay, it's a little weird because
when you make APIs before,

48
00:02:40.375 --> 00:02:43.797
you don't give the clients
this possibility.

49
00:02:43.797 --> 00:02:44.988
You don't let them do this.

50
00:02:44.988 --> 00:02:47.484
The API says, this is what you get and
this is what you get, and

51
00:02:47.484 --> 00:02:49.020
the clients had to get it.

52
00:02:49.020 --> 00:02:51.883
Whereas now, the client's like this
is what I want, and API's like,

53
00:02:51.883 --> 00:02:54.811
all right, I have fulfill every
possible combination of what you want.

54
00:02:54.811 --> 00:02:57.310
And that's why it has
to be strictly typed.

55
00:02:57.310 --> 00:03:01.080
You have these strict type definitions to
set the bounds of what a query can do.

56
00:03:01.080 --> 00:03:05.289
And because it is strictly type, you
can pretty much guarantee what will and

57
00:03:05.289 --> 00:03:08.140
what will not happen
because it's strictly type.

58
00:03:08.140 --> 00:03:10.960
It's finite,
it's not some world of possibilities.

59
00:03:10.960 --> 00:03:11.521
There's only so

60
00:03:11.521 --> 00:03:13.930
many things you can do because of
the way that you developed the schema.

61
00:03:18.702 --> 00:03:19.864
&gt;&gt; Scott Moss: So any questions on this?

62
00:03:22.878 --> 00:03:24.664
&gt;&gt; Scott Moss: Okay, and
you can see this goes on and on forever.

63
00:03:24.664 --> 00:03:27.796
And eventually, you would replace
these with database queries, so

64
00:03:27.796 --> 00:03:31.636
imagine if all these were asynchronous and
hitting the database every single time.

65
00:03:31.636 --> 00:03:36.050
So this query wouldn't execute so
fast, I'll tell you that.

66
00:03:36.050 --> 00:03:38.738
So there's different ways to get around
that, and we can talk about that later.

