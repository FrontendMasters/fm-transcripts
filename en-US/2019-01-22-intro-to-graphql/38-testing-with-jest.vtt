WEBVTT

1
00:00:00.697 --> 00:00:04.437
&gt;&gt; Scott Moss: Okay, the only other thing
I wanted to talk about before I get to

2
00:00:04.437 --> 00:00:07.628
some really cool stuff is how
I set up the test in here.

3
00:00:07.628 --> 00:00:12.245
So all the tests that you've been
running and stuff, it's only for

4
00:00:12.245 --> 00:00:16.057
the product type, the coupon type,
and the user type.

5
00:00:16.057 --> 00:00:18.329
Although they've been created for
you, they don't have any tests.

6
00:00:18.329 --> 00:00:23.096
I left them empty, so if you wanted to
get practice writing tests for GraphQL,

7
00:00:23.096 --> 00:00:24.841
you can write them in there.

8
00:00:24.841 --> 00:00:29.137
So just to walk through how I set up tests
and stuff, basically, let's see here,

9
00:00:29.137 --> 00:00:29.897
the product.

10
00:00:29.897 --> 00:00:33.776
If we go look at the resolvers,
I'm just testing the resolvers as just

11
00:00:33.776 --> 00:00:36.817
regular functions,
completely outside of GraphQL.

12
00:00:36.817 --> 00:00:40.308
The resolvers have nothing to
do with GraphQL at this point.

13
00:00:40.308 --> 00:00:42.669
I'm literally just testing
them as functions.

14
00:00:42.669 --> 00:00:47.596
I mock out all the arguments, and then I
expect some result, just pure functions.

15
00:00:47.596 --> 00:00:51.656
And that's the beauty of GraphQL,
the resolvers are just pure functions,

16
00:00:51.656 --> 00:00:53.820
they don't need to know about GraphQL.

17
00:00:53.820 --> 00:00:57.931
I'm just testing with pure functions,
I'm not using GraphQL at all, so

18
00:00:57.931 --> 00:00:59.337
that's pretty simple.

19
00:00:59.337 --> 00:01:02.789
And then for the schema,
the way I'm testing it out is two ways.

20
00:01:02.789 --> 00:01:06.793
One, to test the schema types,
I'm converting the schema, the STL,

21
00:01:06.793 --> 00:01:11.021
so the string, over to an object
representation, which is gonna be here.

22
00:01:11.021 --> 00:01:15.547
This is basically gonna give me an object
representation of every single type.

23
00:01:15.547 --> 00:01:19.394
It'll give me the fields, the names,
the validations, the values,

24
00:01:19.394 --> 00:01:21.201
every single thing about a type.

25
00:01:21.201 --> 00:01:23.792
And I can use that to just literally run
tests against it to make sure it has

26
00:01:23.792 --> 00:01:25.832
the right names and return types and
things like that, so

27
00:01:25.832 --> 00:01:27.042
that's one way I'm testing it.

28
00:01:27.042 --> 00:01:32.189
As far as the queries, the way that I
test that is I'm creating a mockServer.

29
00:01:32.189 --> 00:01:36.295
So the sweet thing about GraphQL is
because everything is strictly type,

30
00:01:36.295 --> 00:01:38.361
you could mock out an entire server.

31
00:01:38.361 --> 00:01:41.968
Because if I know a name is a string,
I could just send back a fake string.

32
00:01:41.968 --> 00:01:44.862
If I know a age is an integer,
I can send back a fake integer, so

33
00:01:44.862 --> 00:01:46.388
I can mock out an entire server.

34
00:01:46.388 --> 00:01:48.812
So you can send me a query
that's infinitely long, and

35
00:01:48.812 --> 00:01:51.832
I can mock it out on the fly because
I know exactly what the types are.

36
00:01:51.832 --> 00:01:55.099
I'll look at the inflow object,
I compare that to the schema,

37
00:01:55.099 --> 00:01:56.403
I see what the types are.

38
00:01:56.403 --> 00:01:58.842
I generate those fake types for you, and

39
00:01:58.842 --> 00:02:03.233
I send you back a fake response that
satisfies GraphQL's query schema.

40
00:02:03.233 --> 00:02:07.126
So pretty simple, a lot of people
take that to another level and

41
00:02:07.126 --> 00:02:10.000
add things like fake or
js to it and stuff like.

42
00:02:10.000 --> 00:02:12.378
So I'm creating a mockServer,
which is given to us for

43
00:02:12.378 --> 00:02:14.507
free from this package
called graphql-tools.

44
00:02:14.507 --> 00:02:18.057
And basically what that does
is you give it a schema,

45
00:02:18.057 --> 00:02:21.616
and it literally just
creates a mockServer for you.

46
00:02:21.616 --> 00:02:24.101
And it acts just like a server,
I can run queries against it.

47
00:02:24.101 --> 00:02:26.465
The only difference is I don't
have to create resolvers.

48
00:02:26.465 --> 00:02:28.734
The resolvers are gonna be mocked out for
me.

49
00:02:28.734 --> 00:02:31.566
The resolvers know that a name is
a string, so it must return a string.

50
00:02:31.566 --> 00:02:35.475
But it will error out if the query doesn't
match the schema that I gave it, so

51
00:02:35.475 --> 00:02:37.507
that's how I'm testing the queries.

52
00:02:37.507 --> 00:02:42.131
This will break if this thing asks for
something that this schema didn't have.

53
00:02:42.131 --> 00:02:44.165
So that's how I'm testing the queries and

54
00:02:44.165 --> 00:02:46.775
the mutations without
actually starting the server.

55
00:02:46.775 --> 00:02:53.234
Other than that, there's only some
slight MongoDB setup stuff for the test.

56
00:02:53.234 --> 00:02:57.176
Which basically creates a MongoDB for
every single describe block on the fly,

57
00:02:57.176 --> 00:02:59.039
shuts it down, and then deletes it.

58
00:02:59.039 --> 00:03:04.739
And that's how we can run the test
in parallel and keep them fast.

59
00:03:04.739 --> 00:03:07.626
And that's just here in
the test-db-setup file.

60
00:03:07.626 --> 00:03:13.074
And that's it for testing, so yeah,
feel free if you want to continue.

61
00:03:13.074 --> 00:03:18.043
If you wanna start testing, which you
should, go into the coupon and user and

62
00:03:18.043 --> 00:03:20.119
write some tests if you want to.

63
00:03:20.119 --> 00:03:22.224
But we're not gonna do that here,
that's just for you to do.

64
00:03:22.224 --> 00:03:25.788
Look at the test that I wrote in
the product and continue with that.

65
00:03:25.788 --> 00:03:28.342
Challenge yourself,
see if you can get to 100% test coverage.

66
00:03:28.342 --> 00:03:31.504
That'll be amazing if you could,
that's ridiculous, but

67
00:03:31.504 --> 00:03:33.122
yeah, that's there for you.

68
00:03:33.122 --> 00:03:38.594
Other than that, we don't have
anything other left for this course.

69
00:03:38.594 --> 00:03:41.175
The last thing I wanted to
do is answer some questions.

70
00:03:41.175 --> 00:03:44.655
And then I have a list of things I
wanna show you, but I wanna open up for

71
00:03:44.655 --> 00:03:45.622
questions first.

72
00:03:45.622 --> 00:03:50.072
&gt;&gt; Speaker 2: Just a quick one along
the lines of testing, do you have a way of

73
00:03:50.072 --> 00:03:52.589
finding code coverage with-
&gt;&gt; Scott Moss: Yes,

74
00:03:52.589 --> 00:03:56.609
that's the sweet thing about Jest
is that code coverage is free.

75
00:03:56.609 --> 00:04:00.076
You just pass the coverage flag,
so if you run your test,

76
00:04:00.076 --> 00:04:03.195
let me check out the master and
run this very quick.

77
00:04:03.195 --> 00:04:08.188
Actually, I'll run it like this, so
maybe it'll work here on this one.

78
00:04:08.188 --> 00:04:09.844
So if I say --coverage,

79
00:04:18.087 --> 00:04:19.497
&gt;&gt; Scott Moss: So it'll spit out coverage

80
00:04:19.497 --> 00:04:22.389
automatically, it's free,
that's why I like Jest.

81
00:04:22.389 --> 00:04:25.756
All the other free ones,
you gotta sell all this stuff up,

82
00:04:25.756 --> 00:04:30.529
you gotta use NYC and Istanbul, all this
crazy stuff, Jest is like, here you go.

83
00:04:30.529 --> 00:04:33.703
I mean, underneath the hood, it probably
uses a lot of those things, but still,

84
00:04:33.703 --> 00:04:34.770
it does it for you for free.

85
00:04:34.770 --> 00:04:37.788
I'm sure there's some setup here,
it should be looking at some files and

86
00:04:37.788 --> 00:04:40.672
stuff like that, like why is it
looking at the test-db-setup file?

87
00:04:40.672 --> 00:04:45.055
I don't want it to look at that, but
yeah, you can set up the coverage

88
00:04:45.055 --> 00:04:49.078
configuration in the jest config
in your package, that JSON.

89
00:04:49.078 --> 00:04:53.610
Or if you have a jest config.json in
your root, you can set it up there.

90
00:04:53.610 --> 00:04:56.292
But by default, yeah,
that's what it does, it does that.

