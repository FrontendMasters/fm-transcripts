WEBVTT

1
00:00:00.180 --> 00:00:01.400
&gt;&gt; Scott Moss: Creating resolvers.

2
00:00:01.400 --> 00:00:06.080
Basically, they just need to return the
same shape as described in the schema or

3
00:00:06.080 --> 00:00:07.940
delegate to another resolver.

4
00:00:07.940 --> 00:00:08.630
That's basically it.

5
00:00:08.630 --> 00:00:11.520
So they either have to return the shape
that the schema said that they are gonna

6
00:00:11.520 --> 00:00:14.870
return, or they have to
delegate to some other resolver

7
00:00:14.870 --> 00:00:16.570
that eventually is gonna return the shape.

8
00:00:16.570 --> 00:00:19.800
Or that resolver delegates to another
resolver, or that resolver delegates to

9
00:00:19.800 --> 00:00:22.460
another resolver, but
eventually the shape has to be returned.

10
00:00:22.460 --> 00:00:26.160
Otherwise, you're either
gonna have a hanging API or

11
00:00:26.160 --> 00:00:28.740
this is gonna break,
both of which are bad.

12
00:00:28.740 --> 00:00:33.290
So basically,
resolvers take a few args here.

13
00:00:33.290 --> 00:00:36.810
So let's just create some resolvers
here and we'll get going.

14
00:00:36.810 --> 00:00:42.683
So I'm just gonna go into
product.resolvers here.

15
00:00:42.683 --> 00:00:44.300
Let's do overview of this file here.

16
00:00:44.300 --> 00:00:48.310
So if you go into product.resolvers,
if you're in the lesson two branch or

17
00:00:48.310 --> 00:00:49.939
even the lesson three branch,

18
00:00:49.939 --> 00:00:53.212
you'll see that at the bottom
I'm exporting a default here.

19
00:00:53.212 --> 00:00:56.632
And it's an object with a Query property,
a Mutation property,

20
00:00:56.632 --> 00:00:58.010
then a Product property.

21
00:00:59.150 --> 00:01:02.200
And these are gonna be all the resolvers.

22
00:01:02.200 --> 00:01:03.979
They actually match one in one for
what's in our schema.

23
00:01:03.979 --> 00:01:07.460
So if I go look at our schema here,
our product.gql.

24
00:01:07.460 --> 00:01:11.470
If you go all the way down, remember,
I said you have to have resolvers for

25
00:01:11.470 --> 00:01:12.570
queries and mutations.

26
00:01:12.570 --> 00:01:14.180
Well, there's nothing here yet

27
00:01:14.180 --> 00:01:18.170
cuz you'll eventually be doing these, but
I already have the placeholders for them.

28
00:01:18.170 --> 00:01:22.470
So if I wanna write resolvers for my
queries, they go inside this Query object.

29
00:01:22.470 --> 00:01:24.300
If I wanna write resolvers for
my mutations,

30
00:01:24.300 --> 00:01:26.140
they go inside this Mutation object.

31
00:01:26.140 --> 00:01:29.940
If I wanna write resolvers for my product
type, specific fields that I wanna resolve

32
00:01:29.940 --> 00:01:33.420
like the ID field or the createdBy field,
they go in this Product type.

33
00:01:33.420 --> 00:01:36.435
They match one for one for
what's in the schema.

34
00:01:36.435 --> 00:01:39.699
Product with a capital P matches
this type, Product with a capital P.

35
00:01:41.835 --> 00:01:44.810
&gt;&gt; Scott Moss: Query matches this type,
Query with a capital Q.

36
00:01:44.810 --> 00:01:46.480
Mutation matches this
type with a capital M.

37
00:01:46.480 --> 00:01:48.960
That's how it does the matching,
it looks at the names there.

38
00:01:48.960 --> 00:01:51.140
So this is how it knows what
resolvers you're trying to write, so

39
00:01:51.140 --> 00:01:53.540
then you would go in here and
you would write your resolvers.

40
00:01:53.540 --> 00:01:54.650
Let's just make some resolvers then.

41
00:01:54.650 --> 00:02:00.100
So we'll just make a resolver for
one of the queries here.

42
00:02:00.100 --> 00:02:03.983
Let's just call it,
actually we'll just make a new type here.

43
00:02:03.983 --> 00:02:08.979
We'll call this,
&gt;&gt; Scott Moss: getData.

44
00:02:08.979 --> 00:02:11.019
So we're gonna make a new
query called getData.

45
00:02:13.797 --> 00:02:15.425
&gt;&gt; Scott Moss: And
it's not gonna take any arguments.

46
00:02:15.425 --> 00:02:19.536
And it's just gonna return back a product,

47
00:02:19.536 --> 00:02:24.321
let's just say it's gonna
return back a product.

48
00:02:24.321 --> 00:02:27.075
There we go, so
now that I have this query and

49
00:02:27.075 --> 00:02:31.481
I have getData, that means now I have
to come inside of the query here.

50
00:02:32.800 --> 00:02:38.380
And I have to add a resolver by the same
name that's defined here, so getData.

51
00:02:38.380 --> 00:02:40.093
So I have to add a field
here called getData.

52
00:02:40.093 --> 00:02:41.290
It has to be the exact same name.

53
00:02:43.480 --> 00:02:44.720
And it's a function.

54
00:02:44.720 --> 00:02:46.110
So that's step one of creating a resolver.

55
00:02:46.110 --> 00:02:46.887
So now, that resolver is created.

56
00:02:46.887 --> 00:02:48.839
It's not doing anything, but it's created.

57
00:02:53.003 --> 00:02:54.500
&gt;&gt; Scott Moss: Following me so far?

58
00:02:54.500 --> 00:02:57.060
So I just create a resolver,
same name matches here.

59
00:02:57.060 --> 00:03:01.959
It's part of the Query.getData,
so Query.getData.

60
00:03:04.431 --> 00:03:06.356
&gt;&gt; Scott Moss: So
then the first argument that a resolver

61
00:03:06.356 --> 00:03:08.400
takes is the starting object.

62
00:03:08.400 --> 00:03:13.160
Or if this resolver is being
as a delegate a resolver,

63
00:03:13.160 --> 00:03:15.460
it will be what the parent
resolver returned.

64
00:03:15.460 --> 00:03:17.280
But it's the starting object.

65
00:03:17.280 --> 00:03:21.080
In this case because any resolver
that's part of a query or

66
00:03:21.080 --> 00:03:24.500
mutation, there's no resolver before it.

67
00:03:24.500 --> 00:03:25.700
It's the root resolver.

68
00:03:25.700 --> 00:03:26.780
It's the first one.

69
00:03:26.780 --> 00:03:28.300
It's the top of the tree.

70
00:03:28.300 --> 00:03:33.840
Nothing is before it, so that first
argument is almost always gonna be no

71
00:03:33.840 --> 00:03:39.190
unless inside of your server file, you
passed in a starting value, which you can.

72
00:03:39.190 --> 00:03:41.905
In some Graph QL servers,
you can say start with this value, and

73
00:03:41.905 --> 00:03:43.778
you can start with
whatever value you want.

74
00:03:43.778 --> 00:03:47.724
In that case, whatever that value you pass
in as your starting value would be that

75
00:03:47.724 --> 00:03:51.900
first argument and your top level
resolvers on queries and mutations.

76
00:03:51.900 --> 00:03:54.090
But I've almost never had to do that.

77
00:03:54.090 --> 00:03:57.840
I can't think of an example why I
would pass in a starting value for

78
00:03:57.840 --> 00:03:58.700
a top level thing.

79
00:03:58.700 --> 00:04:00.270
So most likely we won't do that.

80
00:04:00.270 --> 00:04:03.189
So I normally just put a placeholder here,
something like that,

81
00:04:03.189 --> 00:04:06.250
cuz I'm never gonna use it,
at least for the top level queries.

82
00:04:06.250 --> 00:04:09.820
For type resolvers, you will use them.

83
00:04:09.820 --> 00:04:12.740
So the second argument is gonna be

84
00:04:12.740 --> 00:04:16.830
the args that were potentially
passed to you from the query.

85
00:04:16.830 --> 00:04:20.530
So if we go look here,
getData doesn't take any arguments.

86
00:04:20.530 --> 00:04:22.400
There's no arguments here,
there's no parentheses.

87
00:04:22.400 --> 00:04:23.650
So there's no arguments.

88
00:04:23.650 --> 00:04:26.510
So this would just be,
there's nothing in here.

89
00:04:26.510 --> 00:04:28.480
If any arguments were passed here,
we'd see them here.

90
00:04:28.480 --> 00:04:31.390
For instance,
product takes an argument called id.

91
00:04:31.390 --> 00:04:35.460
So on this args object, there'd be
an id property that is this value.

92
00:04:35.460 --> 00:04:36.456
That's how we get the arguments.

93
00:04:40.241 --> 00:04:43.491
&gt;&gt; Scott Moss: The third
argument is gonna be the context.

94
00:04:43.491 --> 00:04:46.930
In the context, you can think of it's
like shared state between all resolvers.

95
00:04:46.930 --> 00:04:49.590
It's an object that gets passed
to every single resolver, and

96
00:04:49.590 --> 00:04:51.440
you create it when your server starts.

97
00:04:51.440 --> 00:04:55.410
So it's a great place to put user
authentication, shared logic,

98
00:04:55.410 --> 00:04:59.730
caching storage mechanisms,
database models, stuff like that.

99
00:04:59.730 --> 00:05:02.020
People attach a lot of
things to their context,

100
00:05:02.020 --> 00:05:04.600
that way it's a lot easier to test these
resolvers because you can just mock up

101
00:05:04.600 --> 00:05:07.980
the context objects versus importing
everything at the top of a file.

102
00:05:07.980 --> 00:05:10.400
And then you could pass state
between different resolvers.

103
00:05:10.400 --> 00:05:13.190
This resolver did this,
now I pass it on to here.

104
00:05:13.190 --> 00:05:15.840
Here is some state that
you can keep track of.

105
00:05:15.840 --> 00:05:17.620
For instance in the server.js,

106
00:05:17.620 --> 00:05:23.780
you can see I'm allowed to create a
context here, this is the initial context.

107
00:05:23.780 --> 00:05:26.800
And I'm just creating an object that
has a user property that's set to null.

108
00:05:26.800 --> 00:05:29.380
So there's no user on there,
you'll be fixing that later.

109
00:05:29.380 --> 00:05:31.580
But yeah, I'm creating the initial
context right here, but

110
00:05:31.580 --> 00:05:33.140
you can put whatever you want here.

111
00:05:33.140 --> 00:05:35.580
This same context object
that you're creating

112
00:05:35.580 --> 00:05:38.474
is gonna be passed to every single
resolver as a third argument.

113
00:05:38.474 --> 00:05:40.156
It's always gonna be the third argument,
and

114
00:05:40.156 --> 00:05:42.708
it's always going to be that context
object, every single request.

115
00:05:45.177 --> 00:05:48.493
&gt;&gt; Scott Moss: And then the last
argument which we will almost never use,

116
00:05:48.493 --> 00:05:52.283
unless you're getting really advanced,
is the info object, and

117
00:05:52.283 --> 00:05:55.020
this is basically the AST of the query.

118
00:05:55.020 --> 00:05:58.620
So when I say AST, it's basically
taking this query and converting it to

119
00:06:00.470 --> 00:06:04.380
a JavaScript representation of this,
basically.

120
00:06:04.380 --> 00:06:09.070
It's an AST, it's an abstract
syntax tree of this query.

121
00:06:09.070 --> 00:06:15.180
So this will tell you what the requester
is asking for in a JavaScript format.

122
00:06:15.180 --> 00:06:17.840
Like this is the name of
the query that came in.

123
00:06:17.840 --> 00:06:21.130
Here's the query operation name.

124
00:06:21.130 --> 00:06:24.367
Here's the fields,
the type of that field, the other field.

125
00:06:24.367 --> 00:06:27.953
It will tell you every single thing about
that so you can pass that to a database

126
00:06:27.953 --> 00:06:31.263
and say, only select these fields and
stuff like that stuff like that,

127
00:06:31.263 --> 00:06:33.974
or if you're doing some type of tooling or
whatever.

128
00:06:33.974 --> 00:06:37.060
Some other tools use this to figure
out different caching mechanisms,

129
00:06:37.060 --> 00:06:40.280
like to cache this field and
not cache this field, stuff like that.

130
00:06:40.280 --> 00:06:42.632
So you can cache on
a field-by-field basis.

131
00:06:42.632 --> 00:06:47.460
So that part, the info is very,
very, very advanced.

132
00:06:47.460 --> 00:06:51.910
You will almost never use it unless you
were doing some type of optimizations.

133
00:06:51.910 --> 00:06:55.214
I've only had to use it twice.

134
00:06:55.214 --> 00:06:57.704
So, yeah, you almost never use it.

