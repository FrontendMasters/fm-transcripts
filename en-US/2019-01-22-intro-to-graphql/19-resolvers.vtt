WEBVTT

1
00:00:03.053 --> 00:00:04.509
&gt;&gt; Scott Moss: What are resolvers?

2
00:00:04.509 --> 00:00:07.830
So we've used them a little bit,
we've talked about them.

3
00:00:07.830 --> 00:00:09.360
Anybody wanna try to
tell me what they are?

4
00:00:11.726 --> 00:00:12.520
&gt;&gt; Scott Moss: Take a guess.

5
00:00:13.830 --> 00:00:15.660
&gt;&gt; Speaker 2: Resolve your queries?

6
00:00:15.660 --> 00:00:18.400
&gt;&gt; Scott Moss: They resolve queries,
that's exactly what they do.

7
00:00:18.400 --> 00:00:19.600
They resolve queries,

8
00:00:19.600 --> 00:00:23.670
mutations, they resolve everything
actually, not just queries.

9
00:00:23.670 --> 00:00:27.250
They resolve pretty much
anything that could be of value.

10
00:00:27.250 --> 00:00:30.120
Enums, queries.

11
00:00:30.120 --> 00:00:33.070
You'll find out interfaces,
unions, mutations.

12
00:00:33.070 --> 00:00:35.170
Anything that could eventually
be some type of value,

13
00:00:35.170 --> 00:00:37.130
we can write a resolver for it.

14
00:00:37.130 --> 00:00:39.699
And this is what makes GraphQL magical,
is the resolvers.

15
00:00:40.870 --> 00:00:44.370
So they're like controllers if you're
building out some traditional API like

16
00:00:44.370 --> 00:00:47.020
a rest API with express
we have our controller

17
00:00:47.020 --> 00:00:49.470
that talk to the database to get the data.

18
00:00:49.470 --> 00:00:52.110
Resolvers are like the same thing,
this is where you do that.

19
00:00:52.110 --> 00:00:55.730
This is where you talk to the database or
your data source, inside the resolvers.

20
00:00:57.520 --> 00:00:59.680
Except they resolve all the way down.

21
00:00:59.680 --> 00:01:01.070
What does that mean?

22
00:01:01.070 --> 00:01:04.690
Well therefore,
resolvers resolving a type, and

23
00:01:04.690 --> 00:01:06.630
a type has a field that's
referring to another type,

24
00:01:06.630 --> 00:01:10.130
and then that type has a field
that's referring to another type.

25
00:01:10.130 --> 00:01:13.930
You have to have a resolver for
every single type all the way down,

26
00:01:13.930 --> 00:01:17.780
so it resolves all the way down
depending on the query that came in.

27
00:01:17.780 --> 00:01:19.670
So if the query asks for
those connections,

28
00:01:19.670 --> 00:01:21.200
I want this type that refers to this type,

29
00:01:21.200 --> 00:01:24.360
that refers to this type, then you have
to have resolvers for every single level.

30
00:01:25.490 --> 00:01:28.420
And the resolvers might be the same,
you might have a resolver that's

31
00:01:28.420 --> 00:01:31.780
delegating to itself because
it's asking for the same type.

32
00:01:31.780 --> 00:01:34.810
Who knows, it really depends
on what the query looks like.

33
00:01:34.810 --> 00:01:36.930
So it's kinda confusing to think about,
but we'll go through all of it and

34
00:01:36.930 --> 00:01:38.330
you'll see what I'm talking about.

35
00:01:38.330 --> 00:01:42.740
So I said there like REST API controllers.

36
00:01:42.740 --> 00:01:44.420
They're responsible for retrieving data.

37
00:01:44.420 --> 00:01:47.365
That data, obviously,
can come from a database, but

38
00:01:47.365 --> 00:01:51.462
it can come from anywhere else,
if you get really advanced with GraphicQL,

39
00:01:51.462 --> 00:01:53.510
you can stitch schemas together, and

40
00:01:53.510 --> 00:01:57.499
you can have resolvers that resolve
data from another GraphicQL schema.

41
00:01:57.499 --> 00:02:00.957
Or they delegate to a REST API, or they
just talk to some third party service,

42
00:02:00.957 --> 00:02:02.499
it doesn't have to be a database,

43
00:02:02.499 --> 00:02:05.430
they can resolve data from anywhere
in memory that we need to.

44
00:02:05.430 --> 00:02:08.460
This is where you might get
stuff from if you're using.

45
00:02:08.460 --> 00:02:12.540
So they just resolve data as long as
it fills that shape then it's good.

46
00:02:15.932 --> 00:02:19.734
&gt;&gt; Scott Moss: Every query and
mutation your schema has,

47
00:02:19.734 --> 00:02:25.060
must have a resolver that
returns the specified type.

48
00:02:25.060 --> 00:02:31.590
So if we go look at, these queries,

49
00:02:31.590 --> 00:02:34.980
myCat and hello, actually let's look at
the ones we made, it's a better example.

50
00:02:36.500 --> 00:02:41.090
If we look at these queries, here, so we
have product query and a products query.

51
00:02:41.090 --> 00:02:44.710
So that means we for sure have to
write resolvers for these queries.

52
00:02:44.710 --> 00:02:48.230
And we for sure have the right
resolvers for these mutations.

53
00:02:48.230 --> 00:02:52.050
Otherwise, in this case, Apollo would
actually break if you tried to start it.

54
00:02:52.050 --> 00:02:57.040
If you try to start Apollo and it didn't
find resolvers with the same names

55
00:02:57.040 --> 00:03:00.750
as the queries and mutations that
you put in your schema, it'll say

56
00:03:01.810 --> 00:03:06.180
you added some resolvers in your schema,
but they're not in your resolvers.

57
00:03:06.180 --> 00:03:09.480
And vice versa, if you made resolvers and
you didn't put them in your schema,

58
00:03:09.480 --> 00:03:10.590
it also breaks.

59
00:03:10.590 --> 00:03:12.230
So it's gonna look for the names.

60
00:03:12.230 --> 00:03:13.700
And that's just by default.

61
00:03:13.700 --> 00:03:18.010
So you have to have them there,
otherwise nothing's gonna happen.

62
00:03:18.010 --> 00:03:19.250
So what's the point of putting them there?

63
00:03:19.250 --> 00:03:21.220
You're just waiting for
somebody to break your API.

64
00:03:21.220 --> 00:03:25.181
So for all your queries and

65
00:03:25.181 --> 00:03:32.416
argumentations there have to be resolvers.

66
00:03:32.416 --> 00:03:36.810
&gt;&gt; Scott Moss: Types and fields on
types often have resolvers as well.

67
00:03:36.810 --> 00:03:37.760
So what does that mean?

68
00:03:37.760 --> 00:03:44.106
Well, so we talked about these queries and
mutations having resolvers.

69
00:03:44.106 --> 00:03:45.960
Well, types can also have resolvers, too.

70
00:03:45.960 --> 00:03:49.680
For instance, I have this ID
property that I just put here.

71
00:03:51.070 --> 00:03:55.650
MongoDB doesn't have a ID property,
it has an _ID property.

72
00:03:55.650 --> 00:03:59.660
So if I just query the database and
return that object, and

73
00:03:59.660 --> 00:04:02.810
I'm expecting an ID property back,
cuz that's what the query asked for.

74
00:04:02.810 --> 00:04:05.330
It'll break cuz there's
no ID property there.

75
00:04:05.330 --> 00:04:07.520
So you'd have to write a resolver for

76
00:04:07.520 --> 00:04:13.060
this field on product that grabs
product._ID and returns that.

77
00:04:13.060 --> 00:04:15.670
And that's how you would resolve that,
so you can write resolvers for

78
00:04:15.670 --> 00:04:18.020
types as well and fields on types.

79
00:04:18.020 --> 00:04:19.038
And stuff like that or for

80
00:04:19.038 --> 00:04:21.500
instance another good one
is the created by or user.

81
00:04:21.500 --> 00:04:22.873
This is a user right here.

82
00:04:22.873 --> 00:04:25.235
It's a user object in a database but

83
00:04:25.235 --> 00:04:29.220
by default it stores an ID in
the database as a reference.

84
00:04:29.220 --> 00:04:30.980
So how would you do that?

85
00:04:30.980 --> 00:04:36.293
Well one way is you could try to populate
it in Mongo in the top level resolver that

86
00:04:36.293 --> 00:04:41.609
might happen on product or products but
you wouldn't know if the query asked for

87
00:04:41.609 --> 00:04:45.526
it or not unless you inspected
he AST which is really hard.

88
00:04:45.526 --> 00:04:49.694
So the only other way to do it is to write
a resolver for the createdBy field for

89
00:04:49.694 --> 00:04:53.276
the product and then you can take
the product that createdBy id and

90
00:04:53.276 --> 00:04:58.070
then go to the database and find the user
for it so then you will resolve that.

91
00:04:58.070 --> 00:05:00.320
And so forth and so forth and
that user had something else,

92
00:05:00.320 --> 00:05:01.420
you can resolve those fields.

93
00:05:01.420 --> 00:05:05.348
So you can resolve all these fields
individually to return whatever you want.

94
00:05:07.870 --> 00:05:10.025
&gt;&gt; Scott Moss: And
we'll get into that in a second.

95
00:05:13.961 --> 00:05:19.150
&gt;&gt; Scott Moss: So incoming query dictates
what resolver's run and in what order.

96
00:05:19.150 --> 00:05:24.030
So again this query right here, myCat,
because I have a query called myCat,

97
00:05:24.030 --> 00:05:26.130
that's the first resolver
that's gonna run.

98
00:05:26.130 --> 00:05:30.610
If myCat, obviously has a name property,
if I go to custom resolver for

99
00:05:30.610 --> 00:05:33.310
the name property,
now that resolver is gonna run.

100
00:05:33.310 --> 00:05:39.140
If there was a property here for
age resolver here for

101
00:05:39.140 --> 00:05:43.270
h, that resolver will also run in parallel
with this one, cuz they're still blanks.

102
00:05:43.270 --> 00:05:45.540
So that's the order that
those will always run in,

103
00:05:45.540 --> 00:05:48.690
cuz that's the way that
the query was given.

104
00:05:48.690 --> 00:05:50.150
So it'll be just like that.

105
00:05:50.150 --> 00:05:52.053
But we're gonna go through
that example in a minute.

