WEBVTT

1
00:00:00.000 --> 00:00:03.921
&gt;&gt; Speaker 1: Object type fields also
describe any arguments and/or validations.

2
00:00:03.921 --> 00:00:07.953
So you saw me do one of
those before on age,

3
00:00:07.953 --> 00:00:13.263
I had this little exclamation point here,
like that.

4
00:00:13.263 --> 00:00:16.611
That's a validation, that's literally the
only validation that GraphQL's gonna give

5
00:00:16.611 --> 00:00:18.030
you, and that means it's required.

6
00:00:18.030 --> 00:00:21.836
That means if the query asks for
this field called age,

7
00:00:21.836 --> 00:00:24.658
and it comes back null, throw an error.

8
00:00:24.658 --> 00:00:26.299
It's a non-null field.

9
00:00:26.299 --> 00:00:28.235
It has to be there.

10
00:00:28.235 --> 00:00:30.012
So that's what that means.

11
00:00:30.012 --> 00:00:33.316
Other things, other enhancements
that you can do to add to fields is,

12
00:00:33.316 --> 00:00:34.666
if you want this to be a list.

13
00:00:34.666 --> 00:00:39.347
So let's say, instead of having a best
friend, we have best friends and

14
00:00:39.347 --> 00:00:41.200
I want it to be a list of cats.

15
00:00:41.200 --> 00:00:45.351
What I can do is I can wrap
this in an array, like this.

16
00:00:45.351 --> 00:00:49.710
Now this must be an array of cats, so
now, when I ask your best friends,

17
00:00:49.710 --> 00:00:54.159
I better get back an array, and
inside it, there better be cat objects.

18
00:00:54.159 --> 00:00:56.667
And then the same thing applies for
validations.

19
00:00:56.667 --> 00:01:00.512
I can add validations saying
that it must be an array,

20
00:01:00.512 --> 00:01:02.652
as in the array must be there.

21
00:01:02.652 --> 00:01:07.485
Then I can also add a validation to say
not only is the array must be there,

22
00:01:07.485 --> 00:01:09.317
but it must have a cat in it.

23
00:01:09.317 --> 00:01:10.334
Yes?

24
00:01:10.334 --> 00:01:13.293
&gt;&gt; Speaker 2: But
if you send back just one object,

25
00:01:13.293 --> 00:01:17.026
will it consider that to
be a one object array?

26
00:01:17.026 --> 00:01:19.031
&gt;&gt; Speaker 1: It depends on what
GraphQL server you're using.

27
00:01:19.031 --> 00:01:20.928
Some GraphQL servers will get smart and

28
00:01:20.928 --> 00:01:25.077
they're like okay I'll just wrap this
in an array for you, so like, whatever.

29
00:01:25.077 --> 00:01:26.960
But some are really strict and
they're like, no.

30
00:01:26.960 --> 00:01:28.192
&gt;&gt; Speaker 2: So you better just do it?

31
00:01:28.192 --> 00:01:29.473
&gt;&gt; Speaker 1: You better just do it, yeah.

32
00:01:29.473 --> 00:01:33.051
Yeah, cuz like I said, it really depends
on the implementation of the server.

33
00:01:33.051 --> 00:01:36.414
I think Apollo server's really
strict by default, it's like, no,

34
00:01:36.414 --> 00:01:37.501
that's not an array.

35
00:01:37.501 --> 00:01:41.989
But some servers I've seen will try to
coerce for you like, I'll coerce this to

36
00:01:41.989 --> 00:01:45.716
a number for you, even though you
said it was a string or vice versa.

37
00:01:45.716 --> 00:01:46.597
I don't really like that.

38
00:01:46.597 --> 00:01:47.500
I like to just be strict.

39
00:01:47.500 --> 00:01:49.638
I like to be the way that I
said it was supposed to be.

40
00:01:49.638 --> 00:01:52.045
That way, I can guarantee what I'm doing.

41
00:01:52.045 --> 00:01:56.422
And then the types are the target for
all of the requests.

42
00:01:56.422 --> 00:02:00.649
Right, so if we make a request, at the end
of the day if we look at the schema,

43
00:02:00.649 --> 00:02:02.248
we're trying to get a type.

44
00:02:02.248 --> 00:02:05.121
So for the myCat query,
I'm trying to get a cat type.

45
00:02:05.121 --> 00:02:06.766
For the Hello query,
I'm trying to get a string.

46
00:02:06.766 --> 00:02:12.647
That is the whole point of a request, a
query that's coming in, is to get a type.

47
00:02:12.647 --> 00:02:16.123
That is the objective of a GraphQL,
is to resolve types.

48
00:02:16.123 --> 00:02:17.290
That is its job.

49
00:02:17.290 --> 00:02:21.101
And the objective of a query is to get
the types in the formatted way that you

50
00:02:21.101 --> 00:02:23.700
describe, that's allowed
to you by the schema.

51
00:02:23.700 --> 00:02:25.635
So that's the job.

52
00:02:25.635 --> 00:02:27.700
Types are the target of all requests.

