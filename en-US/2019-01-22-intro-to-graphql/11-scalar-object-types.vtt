WEBVTT

1
00:00:00.030 --> 00:00:01.790
&gt;&gt; Scott Moss: So hopping into
what you were talking about Dave,

2
00:00:01.790 --> 00:00:04.840
which is gonna be the different types and
graph scale.

3
00:00:04.840 --> 00:00:08.540
So there's basically, I mean, there's many
times, but like as far as value types,

4
00:00:08.540 --> 00:00:11.800
there's really only two, there's
gonna be scholars and object types.

5
00:00:13.400 --> 00:00:16.330
And basically what they both do is
they describe resources that will be

6
00:00:16.330 --> 00:00:18.530
used in queries and mutations.

7
00:00:18.530 --> 00:00:21.700
So scholar types are like built in
primitives and here are the built in ones.

8
00:00:21.700 --> 00:00:26.820
We have a string, we have an int, which
is like integer, we have a float which is

9
00:00:26.820 --> 00:00:31.290
like a decimal, we have a boolean which
is true or false and then you have ID

10
00:00:31.290 --> 00:00:35.470
which is literally the same thing as
a string except it's meant to be unique.

11
00:00:35.470 --> 00:00:37.970
There's no validation on it.

12
00:00:37.970 --> 00:00:39.720
You almost never have the user ID but

13
00:00:39.720 --> 00:00:42.860
it's there just to know that
this is a unique string.

14
00:00:42.860 --> 00:00:45.590
That's what ID is for,
it's a unique thing.

15
00:00:45.590 --> 00:00:49.540
So yeah, you could use ID for
ID but it's basically a string.

16
00:00:49.540 --> 00:00:54.290
So those are built in primitives, so
those are free for you in GraphQL.

17
00:00:54.290 --> 00:00:58.150
And eventually, every single field that
you make has to boil down to one of these

18
00:00:58.150 --> 00:01:03.880
at some point in your tree,
if you have a cat that's referencing

19
00:01:03.880 --> 00:01:07.490
Owner and owner is referencing a parent,
and a parent is referencing a grandparent.

20
00:01:07.490 --> 00:01:11.230
Eventually, it's gonna boil down to some
field being a string integer or float or

21
00:01:11.230 --> 00:01:14.310
boolean or
ID cuz those are where values are stored.

22
00:01:17.940 --> 00:01:23.140
Object types are custom shapes with
fields that are either scholar types or

23
00:01:23.140 --> 00:01:24.590
other object types.

24
00:01:24.590 --> 00:01:28.190
So if we go back over to our example here,

25
00:01:28.190 --> 00:01:33.150
type cat is an object type cuz
we used the key word type.

26
00:01:33.150 --> 00:01:37.430
We give the name cat, and these brackets,
they have nothing to do with JavaScript.

27
00:01:37.430 --> 00:01:39.470
But you can think of them as
there's brackets here, so

28
00:01:39.470 --> 00:01:40.440
this is is an object type.

29
00:01:40.440 --> 00:01:41.550
That helps you remember it and

30
00:01:41.550 --> 00:01:44.020
you can use that but
that has nothing to do with JavaScript.

31
00:01:44.020 --> 00:01:46.690
But yes, this is a custom object type.

32
00:01:46.690 --> 00:01:50.220
String is a scholar type,
int is a scholar type.

33
00:01:50.220 --> 00:01:55.950
And you can see, what I was saying
is any field can be any type.

34
00:01:55.950 --> 00:01:58.990
I could come here to this cat and
say best friend.

35
00:02:00.600 --> 00:02:03.730
Best friend is a cat, so

36
00:02:03.730 --> 00:02:09.440
like I said a cat has a best friend,
which is also a cat,

37
00:02:09.440 --> 00:02:13.450
and that points to an object which is cat,
which has a name and an age.

38
00:02:13.450 --> 00:02:15.160
So how would I resolve that?

39
00:02:16.910 --> 00:02:20.781
I would come down here, and
I would say bestFriend.

40
00:02:25.728 --> 00:02:29.573
&gt;&gt; Scott Moss: And
guess what that needs to look like?

41
00:02:29.573 --> 00:02:34.968
This would look like the same
thing that it's been hosted on,

42
00:02:34.968 --> 00:02:40.273
and it will just go forever and
ever and ever cause its graph.

43
00:02:40.273 --> 00:02:43.646
You can see that it's a graph,
it'll keep going, so I could resolve that,

44
00:02:43.646 --> 00:02:47.179
as long as I don't ask what the best
friend's best friend is, this query should

45
00:02:47.179 --> 00:02:50.259
work cuz I don't feel like adding that,
that's just too much work.

46
00:02:51.270 --> 00:02:58.230
So if you go back, we refresh this,
and we say give me myCat.

47
00:02:58.230 --> 00:03:01.750
I want the name, and
then I'm gonna get the bestFriend, and

48
00:03:01.750 --> 00:03:04.450
then I want to get the name
of that best friend.

49
00:03:06.568 --> 00:03:08.970
&gt;&gt; Scott Moss: Then I can query for that
and you can see that's what I get back.

50
00:03:11.760 --> 00:03:16.880
So a field eventually has to come down
to being some type of style type but

51
00:03:16.880 --> 00:03:20.520
it doesn't prevent you from having object
types as fields as long as they boil down

52
00:03:20.520 --> 00:03:21.610
to some style type eventually.

53
00:03:24.000 --> 00:03:26.790
&gt;&gt; Speaker 2: How does it handle
a race situation where you

54
00:03:27.860 --> 00:03:29.580
point back to the same object?

55
00:03:29.580 --> 00:03:34.085
&gt;&gt; Scott Moss: Like so
what do you mean, handle it?

56
00:03:34.085 --> 00:03:36.220
[LAUGH]
&gt;&gt; Speaker 2: You could potentially create

57
00:03:36.220 --> 00:03:39.532
a race situation where the-
&gt;&gt; Scott Moss: A circular dependancy where

58
00:03:39.532 --> 00:03:40.910
it keeps going forever?

59
00:03:40.910 --> 00:03:41.670
&gt;&gt; Speaker 2: Yes.
&gt;&gt; Scott Moss: It doesn't.

60
00:03:41.670 --> 00:03:43.208
So that's gonna be up to you, right?

61
00:03:43.208 --> 00:03:47.350
I don't wanna get too deep into it cuz

62
00:03:47.350 --> 00:03:50.160
we're gonna talk about it
when we get to resolvers.

63
00:03:50.160 --> 00:03:54.400
But yeah,
if I added a previous best friend here and

64
00:03:54.400 --> 00:03:56.900
I referenced back to the other one,
it kept going back and forth.

65
00:03:56.900 --> 00:04:02.210
Yeah, it'll just go on forever if
they keep asking for it, right?

66
00:04:02.210 --> 00:04:04.764
If someone keeps writing
in here like this and

67
00:04:04.764 --> 00:04:09.306
they just keep going,
&gt;&gt; Scott Moss: And they just go on and

68
00:04:09.306 --> 00:04:16.010
on and on and on, yeah, there's nothing
stopping them from doing this by default.

69
00:04:16.010 --> 00:04:17.140
If you just leave it that way,

70
00:04:17.140 --> 00:04:19.260
the resolvers will continue
to keep resolving it.

71
00:04:19.260 --> 00:04:21.520
And if every single one of
those is a database query,

72
00:04:21.520 --> 00:04:23.270
you could literally kill your server.

73
00:04:23.270 --> 00:04:25.430
Somebody could DDOS you super quick.

74
00:04:25.430 --> 00:04:29.420
So there's a lot of ways to get around
this, and we could talk about those at

75
00:04:29.420 --> 00:04:31.520
the end of the day when you have
more context about resolvers,

76
00:04:31.520 --> 00:04:33.030
cuz they're really advanced.

77
00:04:33.030 --> 00:04:37.160
But yeah, but basically, by default,
there's nothing you can do.

78
00:04:37.160 --> 00:04:38.940
They just gonna do it, yeah.

79
00:04:38.940 --> 00:04:39.940
We ran into this problem a lot.

