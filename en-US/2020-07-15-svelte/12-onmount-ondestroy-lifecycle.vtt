WEBVTT

1
00:00:00.690 --> 00:00:05.610
So back when we were looking at
the canvas tutorial, we saw the unmount

2
00:00:05.610 --> 00:00:08.840
lifecycle function and we're gonna cover
life cycle in a bit more detail now.

3
00:00:10.310 --> 00:00:13.920
What life cycle is a description of

4
00:00:13.920 --> 00:00:16.950
the different stages that
a component goes through.

5
00:00:16.950 --> 00:00:21.470
It's created we call that mounting and
then it goes through a number of updates

6
00:00:21.470 --> 00:00:23.350
and then eventually
the component will be destroyed.

7
00:00:24.690 --> 00:00:28.705
The life cycle function that you'll use
most often is the unmount life cycle

8
00:00:28.705 --> 00:00:32.605
function which runs as soon as the
component has been rendered to the DOM.

9
00:00:34.612 --> 00:00:38.938
And so in this example, what we
wanna do is add on Mon callback that

10
00:00:38.938 --> 00:00:42.019
is gonna load some data
from over the network.

11
00:00:46.882 --> 00:00:49.045
So we import it directly from spelt

12
00:00:59.112 --> 00:01:03.726
Then inside, the callback, we're gonna

13
00:01:03.726 --> 00:01:08.480
make a request to
the JSON placeholder API.

14
00:01:08.480 --> 00:01:12.933
And then we're gonna
assign the return value of

15
00:01:12.933 --> 00:01:17.175
that API call to our
photos variable up here.

16
00:01:19.891 --> 00:01:25.015
So as soon as that comes
in It's gonna loop over

17
00:01:25.015 --> 00:01:30.145
the result of that call and
render some placeholder photos.

18
00:01:34.872 --> 00:01:40.156
Now you could put this block here,
inside, the script tag like so.

19
00:01:42.242 --> 00:01:47.287
Except we can't use a weight,
so we need to do it like this.

20
00:01:59.174 --> 00:02:02.857
So the reason that it makes sense to do
this work inside the unmount callback

21
00:02:02.857 --> 00:02:07.007
instead of at the top level of your script
element is that when you're rendering this

22
00:02:07.007 --> 00:02:08.835
component in a server side context.

23
00:02:08.835 --> 00:02:12.190
You don't wanna be sending off ,fetch
requests that are gonna come back once

24
00:02:12.190 --> 00:02:14.800
the component has already been rendered.

25
00:02:14.800 --> 00:02:18.590
That fetch request only matters
in the client side context.

26
00:02:18.590 --> 00:02:21.460
And the unmount callback only
runs in the client side context.

27
00:02:21.460 --> 00:02:23.020
So any code that you put in here

28
00:02:25.223 --> 00:02:30.207
Won't run when you use server side
rendering with yourself components.

29
00:02:39.442 --> 00:02:44.670
We also have an onDestroy callback which
is sort of the opposite of onMount.

30
00:02:46.490 --> 00:02:52.147
So in this example here,
we want to have an interval function,

31
00:02:52.147 --> 00:02:56.629
that is going to take up
this value once a second and

32
00:02:56.629 --> 00:03:03.389
then we're gonna destroy that interval
once the component is destroyed.

33
00:03:13.433 --> 00:03:17.050
I forgot to add the second argument.

34
00:03:17.050 --> 00:03:18.993
There we go.
That's better.

35
00:03:21.117 --> 00:03:23.480
And then once the component is destroyed.

36
00:03:23.480 --> 00:03:28.203
We'll need to clear that interval to
avoid generating a memory leak in our

37
00:03:28.203 --> 00:03:29.199
application.

38
00:03:33.380 --> 00:03:38.116
Now Ondestroy is different to
onMount in that it will run

39
00:03:38.116 --> 00:03:41.863
inside the server side rendering context.

40
00:03:41.863 --> 00:03:46.249
So if there's any work that happens at
the top level of the script block and

41
00:03:46.249 --> 00:03:50.510
you need to clean up that work,
then onDestroy is a good place to put it.

42
00:03:50.510 --> 00:03:53.910
If you do did the work inside onMount
then you can clean up inside the onMount

43
00:03:53.910 --> 00:03:59.100
by returning the onDestroy
handler from the onMount handler.

44
00:03:59.100 --> 00:04:03.163
But for situations where you're not
using onMount, ondestroy is your friend.

45
00:04:07.641 --> 00:04:11.435
Now this is just a regular function,
which means that we can call it from

46
00:04:11.435 --> 00:04:16.510
anywhere and this means that we can create
our own custom lifecycle functions.

47
00:04:16.510 --> 00:04:21.297
So we can abstract this logic
out into an external helper.

48
00:04:23.633 --> 00:04:30.644
For example, in our utils js file here,
we could take that implementation

49
00:04:36.072 --> 00:04:40.696
Put it inside there and instead of
Mutating the components private state

50
00:04:40.696 --> 00:04:45.337
which we no longer have access to,
we can just call the provided callback

51
00:04:48.598 --> 00:04:50.530
may that parametizable, like so.

52
00:04:54.171 --> 00:04:58.829
And now we're gonna import on

53
00:04:58.829 --> 00:05:04.930
interval from But utils file

54
00:05:09.648 --> 00:05:13.436
And use our custom life
cycle function like so.

55
00:05:15.542 --> 00:05:19.755
And so that's something that you could use
in multiple components without having to

56
00:05:19.755 --> 00:05:21.366
duplicate the logic each time.

57
00:05:28.561 --> 00:05:33.020
So in between onMount and
onDestroy, we have the update cycle.

58
00:05:33.020 --> 00:05:37.690
We have before update and
after update, which happened,

59
00:05:37.690 --> 00:05:41.360
as the name suggests before the DOM
gets updated with any new state.

60
00:05:41.360 --> 00:05:46.357
And then once the DOM is current
with the state, that was passed in.

61
00:05:48.240 --> 00:05:51.220
You won't need to use these very often,
but occasionally you do and

62
00:05:51.220 --> 00:05:55.030
they're very useful for things that
are pretty difficult to achieve in

63
00:05:55.030 --> 00:05:57.720
a purely declarative state driven world.

64
00:05:57.720 --> 00:06:00.980
Like for example, a date in
the scroll position of an element

