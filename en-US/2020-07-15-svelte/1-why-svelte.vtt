WEBVTT

1
00:00:00.300 --> 00:00:04.273
So, the obvious first question that
a lot of people have is, what is Svelte?

2
00:00:04.273 --> 00:00:06.530
And there's actually a lot of different
ways to answer that question.

3
00:00:06.530 --> 00:00:08.060
It's a lot of different things.

4
00:00:08.060 --> 00:00:11.580
But it's probably easiest to
understand it as an alternative to

5
00:00:11.580 --> 00:00:13.958
other existing projects
that you're familiar with.

6
00:00:13.958 --> 00:00:17.580
React and Vue are the two most
popular component frameworks and

7
00:00:17.580 --> 00:00:19.950
Svelte essentially solves
a similar problem that they do.

8
00:00:21.350 --> 00:00:23.220
So what is a component framework?

9
00:00:23.220 --> 00:00:28.810
Component frameworks exist to help you
write applications more declaratively.

10
00:00:28.810 --> 00:00:31.260
We use that word declaratively
a lot in programming.

11
00:00:31.260 --> 00:00:33.530
So it's helpful to understand
exactly what we mean by that.

12
00:00:34.720 --> 00:00:38.470
This declarative code that I'm looking
at here, this is some Svelte code,

13
00:00:39.480 --> 00:00:42.150
is roughly equivalent to
the vanilla JavaScript beneath it.

14
00:00:43.870 --> 00:00:44.760
You can see what's happening.

15
00:00:44.760 --> 00:00:47.950
We're creating a button using
document.createElement,

16
00:00:47.950 --> 00:00:52.170
and then we're putting some text inside
it, then adding an event listener.

17
00:00:52.170 --> 00:00:55.628
When you click the button,
it increments the value of count,

18
00:00:55.628 --> 00:00:59.050
and then it updates the text
content inside the button.

19
00:00:59.050 --> 00:01:01.160
Then we return that and
that's our component.

20
00:01:02.780 --> 00:01:04.710
So the difference is in
the imperative version,

21
00:01:04.710 --> 00:01:06.990
we're telling the browser
exactly what to do.

22
00:01:06.990 --> 00:01:10.698
In the declarative version,
we're just saying what outcome we want.

23
00:01:10.698 --> 00:01:11.910
And that's obviously a lot simpler for

24
00:01:11.910 --> 00:01:15.650
the developer because we're not
having to work through the process of

25
00:01:15.650 --> 00:01:20.180
explaining to the browser exactly what
it needs to do at each given moment.

26
00:01:20.180 --> 00:01:22.230
And most of the point,
there's no duplication.

27
00:01:22.230 --> 00:01:26.202
Here, we've got this initial
button.textContent = blah.

28
00:01:26.202 --> 00:01:29.086
And then inside the update handler,
we've got the same thing.

29
00:01:29.086 --> 00:01:31.528
And you tend to find that when
you're building web applications,

30
00:01:31.528 --> 00:01:33.110
you have a lot of that
kind of duplication.

31
00:01:33.110 --> 00:01:35.509
You have the initial render and
then you have the update.

32
00:01:35.509 --> 00:01:38.205
But if you're doing things declaratively,
that's no longer the case.

33
00:01:42.557 --> 00:01:46.040
But it gets worse for
the imperative story.

34
00:01:46.040 --> 00:01:49.250
If you wanna make a very small change
to your component, for example,

35
00:01:49.250 --> 00:01:53.510
you wanna wrap that count
variable in a strong element.

36
00:01:53.510 --> 00:01:56.060
Then if you're doing it imperatively,

37
00:01:56.060 --> 00:01:59.230
you need to almost rewrite
the entire component.

38
00:01:59.230 --> 00:02:00.690
And that's for a very small change.

39
00:02:00.690 --> 00:02:04.360
So you can imagine if you're building a
large application, the amount of work that

40
00:02:04.360 --> 00:02:07.890
you would have to do as you're
iterating on your design is much,

41
00:02:07.890 --> 00:02:09.310
much greater with imperative code.

42
00:02:10.500 --> 00:02:12.810
So that's the value that
component frameworks provide.

43
00:02:12.810 --> 00:02:17.470
They make it a lot easier for
us as developers to build applications.

44
00:02:17.470 --> 00:02:20.850
Historically though, there has been
a little bit of an implicit trade off.

45
00:02:20.850 --> 00:02:24.360
Because the framework acts as
a middleman between you and the browser,

46
00:02:24.360 --> 00:02:27.040
and the middleman introduces inefficiency.

47
00:02:29.150 --> 00:02:33.680
So Svelte began back in 2016 as
an experiment to prove that,

48
00:02:33.680 --> 00:02:35.620
that is in fact a false dichotomy.

49
00:02:35.620 --> 00:02:38.960
There is no tension between developer
experience and user experience.

50
00:02:40.475 --> 00:02:43.110
Svelte is a compiler,
it takes your declarative code and

51
00:02:43.110 --> 00:02:46.815
it turns it into the equivalent
imperative JavaScript.

52
00:02:46.815 --> 00:02:50.295
And this has a number of
really useful advantages.

53
00:02:50.295 --> 00:02:53.930
Number one, your apps will generally
be quite a lot smaller because

54
00:02:53.930 --> 00:02:58.060
we don't need to have the actual
framework runtime in the browser.

55
00:02:59.780 --> 00:03:03.108
Normally the framework has to
anticipate every possible use case.

56
00:03:03.108 --> 00:03:07.720
But because Svelte understands
exactly what is going into your app,

57
00:03:07.720 --> 00:03:09.080
it can discard most of it and

58
00:03:09.080 --> 00:03:13.200
just ship the code that is actually
needed for your specific use case.

59
00:03:13.200 --> 00:03:16.783
JavaScript is the most expensive thing on
the web byte for byte because you don't

60
00:03:16.783 --> 00:03:19.692
just have to download it,
you also have to parse and evaluate it.

61
00:03:19.692 --> 00:03:22.526
And so if you can use less of it, then
your apps are gonna launch quicker and

62
00:03:22.526 --> 00:03:23.640
your users will be happier.

63
00:03:25.120 --> 00:03:27.690
Once your applications have already
launched, your apps are gonna

64
00:03:27.690 --> 00:03:31.550
be faster because we don't need to use
costly techniques like re-rendering

65
00:03:31.550 --> 00:03:35.810
the virtual DOM and then diffing it to
find out what needs to change on the page.

66
00:03:35.810 --> 00:03:39.050
Instead, we can make surgical,
granular updates.

67
00:03:39.050 --> 00:03:42.020
The compiler knows which bits of
the application could change for

68
00:03:42.020 --> 00:03:42.860
a given state change.

69
00:03:42.860 --> 00:03:45.800
And it can just change
the DOM directly the same way

70
00:03:45.800 --> 00:03:48.940
that you would do if you're
using the DOM API manually.

71
00:03:50.440 --> 00:03:54.007
And finally, your apps will be easier to
write using Svelte because we have a lot

72
00:03:54.007 --> 00:03:56.100
more control over
the authoring experience.

73
00:03:56.100 --> 00:03:58.430
We don't have the same
constraints that other people do.

74
00:04:00.300 --> 00:04:03.040
What this means in particular
is that if you're using Svelte,

75
00:04:03.040 --> 00:04:04.680
you will be able to write less code.

76
00:04:05.850 --> 00:04:09.180
There's a blog post linked there
that I invite you to check out,

77
00:04:09.180 --> 00:04:11.600
which explains why writing less code is so
important.

78
00:04:11.600 --> 00:04:14.280
Writing less code means that
you'll have fewer bugs and

79
00:04:14.280 --> 00:04:15.789
you'll be able to spend
more time outdoors.

80
00:04:17.076 --> 00:04:17.622
Beyond that,

81
00:04:17.622 --> 00:04:21.750
Svelte aims to make your life easier by
shipping a lot of the things that normally

82
00:04:21.750 --> 00:04:26.050
you would have to do as third party
libraries that you would install from NPM.

83
00:04:26.050 --> 00:04:29.994
So things like state management,
element transitions,

84
00:04:29.994 --> 00:04:34.830
handling input via form elements,
scope, CSS, all of those things.

85
00:04:34.830 --> 00:04:37.979
Normally with a framework, those
are things that you have to figure out

86
00:04:37.979 --> 00:04:40.881
a solution to yourself, but
with Svelte it's already built in.

87
00:04:40.881 --> 00:04:43.205
And we can do that because again,
we're a compiler,

88
00:04:43.205 --> 00:04:45.230
we can discard the bits
that we're not using.

89
00:04:47.566 --> 00:04:48.660
So who makes Svelte?

90
00:04:49.680 --> 00:04:53.170
Well, it is very much a community project.

91
00:04:53.170 --> 00:04:56.470
It's not a project with full time
engineers and corporate funding.

92
00:04:56.470 --> 00:05:01.080
It's a project that is developed in
the open by a group of volunteers who

93
00:05:01.080 --> 00:05:04.280
work on it in their free time
because we believe in the project.

94
00:05:04.280 --> 00:05:06.760
There is a core team of developers
who do the day-to-day stuff,

95
00:05:06.760 --> 00:05:10.580
but the broader contributor
community is large.

96
00:05:10.580 --> 00:05:13.410
And every decision that we make
about the future of the framework

97
00:05:13.410 --> 00:05:16.530
is done to the greatest extent
possible out in the open.

98
00:05:16.530 --> 00:05:20.090
It's an egalitarian,
communitarian project.

99
00:05:20.090 --> 00:05:23.430
We welcome developers of all backgrounds
and with all skill levels, and

100
00:05:23.430 --> 00:05:24.860
we would love for
you to be involved as well.

101
00:05:26.810 --> 00:05:32.110
So, with that, we'll move on to the next
part of the workshop where we're gonna

102
00:05:32.110 --> 00:05:36.110
run through the entire Svelte tutorial
to learn how to build Svelte components.

