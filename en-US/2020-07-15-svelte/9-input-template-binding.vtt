WEBVTT

1
00:00:00.230 --> 00:00:03.160
So now we're gonna move on to
the binding section of the tutorial.

2
00:00:03.160 --> 00:00:05.380
And as a general rule, data flow,

3
00:00:05.380 --> 00:00:09.360
as we've seen, goes from parent
component to child component.

4
00:00:09.360 --> 00:00:11.190
In other ways, it goes top-down.

5
00:00:11.190 --> 00:00:12.640
Sometimes we need to break that rule.

6
00:00:12.640 --> 00:00:15.620
Sometimes, we wanna get
information from an element or

7
00:00:15.620 --> 00:00:17.320
component back up to its parent.

8
00:00:17.320 --> 00:00:21.190
And this is very common when we're
dealing with form elements for example.

9
00:00:22.490 --> 00:00:28.540
So, here's an input element,
Doesn't currently do anything.

10
00:00:28.540 --> 00:00:30.320
But what we want to happen is for

11
00:00:30.320 --> 00:00:35.200
the changes in that input element to be
reflected in the state of the component.

12
00:00:35.200 --> 00:00:38.055
And there is one way that we
could do this using events.

13
00:00:38.055 --> 00:00:41.693
We can do on input equals handle input and
so on, and

14
00:00:41.693 --> 00:00:47.277
we could add an event handler and do all
of the stuff that you would normally do,

15
00:00:47.277 --> 00:00:50.778
but it's a little bit inconvenient.

16
00:00:50.778 --> 00:00:54.400
Instead, in Svelte,
we can just turn this prop,

17
00:00:54.400 --> 00:00:57.850
this attribute,
into a binding with the bind directive.

18
00:00:57.850 --> 00:01:02.480
And that looks like this
bind:value equals name.

19
00:01:02.480 --> 00:01:05.776
And now,
whenever the value of the input changes,

20
00:01:05.776 --> 00:01:10.389
the value of the variable that's
associated with it will also change.

21
00:01:14.926 --> 00:01:16.230
And that's bidirectional.

22
00:01:16.230 --> 00:01:20.210
So, if there are changes to that
value from outside the input,

23
00:01:20.210 --> 00:01:21.860
they will also be reflected.

24
00:01:21.860 --> 00:01:22.990
Everything is kept in sync.

25
00:01:26.200 --> 00:01:29.970
And it's not just text inputs,
it's also numeric inputs,

26
00:01:31.460 --> 00:01:35.960
which is not the case if you're
dealing with the DOM natively.

27
00:01:35.960 --> 00:01:40.930
In normal DOM elements,
the value is always a string.

28
00:01:40.930 --> 00:01:44.340
But generally, if you're dealing with a
numeric input, which is type equals number

29
00:01:44.340 --> 00:01:49.130
or type equals range, then it's better
to get that value expressed as a number.

30
00:01:50.180 --> 00:01:55.818
So again, we're going to turn these value
attributes into bindings bind colon value,

31
00:01:55.818 --> 00:01:58.390
bind colon value.

32
00:01:59.870 --> 00:02:02.690
Same again here, and last one.

33
00:02:04.260 --> 00:02:07.180
And now, when we change these inputs,

34
00:02:08.440 --> 00:02:11.480
all of the different places that
that's referenced also get changed.

35
00:02:11.480 --> 00:02:15.550
So this input corresponds to its
counterpart on the left, and

36
00:02:15.550 --> 00:02:17.920
down here,
the expression is also changing.

37
00:02:18.990 --> 00:02:24.250
This UI is a little bit broken because
chrome just released a new version,

38
00:02:24.250 --> 00:02:28.480
and it has a slight bug,
which will need to get fixed.

39
00:02:28.480 --> 00:02:31.499
So, that's why there's a gap on the range
input there, it looks a little bit weird.

40
00:02:35.395 --> 00:02:40.980
We also have check box inputs,
which represent a Boolean state.

41
00:02:40.980 --> 00:02:43.180
If the input is checked,
the value is true.

42
00:02:43.180 --> 00:02:45.740
If the input is unchecked,
the value is false.

43
00:02:46.900 --> 00:02:52.210
Then, for
this we add bind colon checked, like so.

44
00:02:53.280 --> 00:02:59.462
And now, if I toggle this check box, then
I'm able to subscribe to this newsletter.

45
00:03:05.663 --> 00:03:09.590
Sometimes, you'll have multiple check
box inputs that all correspond to

46
00:03:09.590 --> 00:03:10.600
the same value.

47
00:03:10.600 --> 00:03:16.500
And for that we use a special
thing called bind colon group.

48
00:03:16.500 --> 00:03:20.753
So, let's say we're building a website for
selling ice cream.

49
00:03:22.334 --> 00:03:23.752
We've got let scoops up here.

50
00:03:28.136 --> 00:03:31.706
And we can choose between these different
radio options, one scoop, two scoops or

51
00:03:31.706 --> 00:03:34.062
three scoops, and
they're all mutually exclusive.

52
00:03:37.188 --> 00:03:42.328
We're gonna bind to that, oops,
gonna bind to these groups like so.

53
00:03:51.093 --> 00:03:53.909
And then,
as we interact with those radio buttons,

54
00:03:53.909 --> 00:03:57.628
it's being reflected in the order
summary at the bottom of the page.

55
00:04:00.307 --> 00:04:02.470
Now, here we've got some
slightly repetitive marker.

56
00:04:02.470 --> 00:04:07.520
We've got this label block repeated three
times, once for each flavor on the menu,

57
00:04:07.520 --> 00:04:10.700
cookies and cream,
mint choc chip and raspberry ripple.

58
00:04:10.700 --> 00:04:12.930
And it would be easier if we
put that in an each block.

59
00:04:12.930 --> 00:04:14.175
So, we're gonna do that real quick.

60
00:04:29.786 --> 00:04:38.079
And then here, instead of repeating
that each time, each menu as flavor.

61
00:04:41.408 --> 00:04:44.710
We're gonna get rid of the last two,
indent the first one.

62
00:04:46.360 --> 00:04:51.270
Close the each block, and
it's repeating cookies and

63
00:04:51.270 --> 00:04:56.294
cream because I haven't
changed this value to flavor.

64
00:05:10.812 --> 00:05:11.680
Why isn't this working?

65
00:05:13.934 --> 00:05:20.570
It is working, but this is also,
there we go, okay, panicked a bit there.

66
00:05:22.440 --> 00:05:25.015
So now, if I just made that bigger then.

67
00:05:31.003 --> 00:05:34.853
We can see that it's not, I mean, it's
bigger, we can see that it's not actually

68
00:05:34.853 --> 00:05:38.829
changing the order because this isn't yet
binding, it's just a regular variable.

69
00:05:40.030 --> 00:05:43.860
So, we're gonna turn this
group into bind:group.

70
00:05:43.860 --> 00:05:45.973
And then, now this flavors array up here,

71
00:05:45.973 --> 00:05:48.744
which represents the selection
that the user has made.

72
00:05:52.188 --> 00:05:56.409
Gets changed, and we need to, if we're
gonna be greedy and have three scoops,

73
00:05:56.409 --> 00:05:57.924
we need to say Three scoops.

74
00:05:57.924 --> 00:06:02.279
And our order summary says we've ordered
three scoops of cookies and cream,

75
00:06:02.279 --> 00:06:04.430
mint choc chip and raspberry riffle.

76
00:06:06.260 --> 00:06:11.071
And we can now add new
flavors of ice cream.

77
00:06:14.186 --> 00:06:17.389
And it will get added to
the menu as we'd expect.

78
00:06:20.060 --> 00:06:23.443
Similar to input,
our text area elements, and

79
00:06:23.443 --> 00:06:27.850
these are useful when you need
to enter a large amount of text.

80
00:06:29.390 --> 00:06:33.185
And we're going to use a text
area to build a mark down here.

81
00:06:33.185 --> 00:06:39.320
It's exactly the same as an input,
value becomes bind:value.

82
00:06:41.228 --> 00:06:46.279
And so now, I can add a list

83
00:06:46.279 --> 00:06:50.189
of things, right?

84
00:06:50.189 --> 00:06:52.900
That's a mark down editor and
12 lines of code.

85
00:06:56.400 --> 00:07:00.750
Now, in the same way that we saw earlier
with the image source equals source,

86
00:07:00.750 --> 00:07:05.590
we can turn that into just putting
the source inside the curly braces.

87
00:07:05.590 --> 00:07:07.682
We can do a similar thing with bind value.

88
00:07:07.682 --> 00:07:12.005
We can get rid of the equals
value because it's implicit when

89
00:07:12.005 --> 00:07:14.563
you just have bind value by itself.

90
00:07:18.615 --> 00:07:20.325
It still works.

91
00:07:29.528 --> 00:07:36.386
We can also use bind value with select
elements which are drop down menus.

92
00:07:36.386 --> 00:07:40.984
On line 24, where we have a select element

93
00:07:40.984 --> 00:07:45.347
inside our form, and you can see it here.

94
00:07:45.347 --> 00:07:51.275
We're going to change this value
equals selected to a binding,

95
00:07:51.275 --> 00:07:53.372
same drill as before.

96
00:07:53.372 --> 00:08:00.060
And now, when we select a different
item inside the drop down.

97
00:08:04.935 --> 00:08:08.990
We can see at the bottom that we've
selected question, one, two or three.

98
00:08:10.970 --> 00:08:15.800
That's true even though
the values of these options

99
00:08:15.800 --> 00:08:20.990
are not strings, which is what you would
need to do if you were using regular HTML.

100
00:08:20.990 --> 00:08:23.720
We can actually pass
objects to the options, and

101
00:08:23.720 --> 00:08:25.990
they will be preserved faithfully.

102
00:08:28.390 --> 00:08:29.910
So here, these are the options.

103
00:08:29.910 --> 00:08:33.090
They've got an ID property and
a text property.

104
00:08:33.090 --> 00:08:39.595
The text is what is visible inside the
option because we have questions.txt, but

105
00:08:39.595 --> 00:08:44.684
further down, when we're shown
which question was selected,

106
00:08:44.684 --> 00:08:47.246
we're showing selected.id.

107
00:08:52.687 --> 00:08:57.013
If we revisit our ice cream
example from earlier,

108
00:08:57.013 --> 00:09:01.966
we can replace the check box
list with a select multiple.

109
00:09:06.873 --> 00:09:09.548
So, we've got our each block
where we're showing three labels,

110
00:09:09.548 --> 00:09:11.000
each containing a check box input.

111
00:09:11.000 --> 00:09:14.490
And we're going to replace that
whole block with a select element.

112
00:09:15.862 --> 00:09:18.810
We're going to give it
the multiple attribute,

113
00:09:18.810 --> 00:09:21.080
which means that it will
be visible at once.

114
00:09:21.080 --> 00:09:23.960
Bind value equals flavors,

115
00:09:23.960 --> 00:09:29.001
which is the variable
containing our selection.

116
00:09:32.852 --> 00:09:35.244
And then we're just going
to iterate over the menu.

117
00:09:52.606 --> 00:09:56.135
And print the text.

118
00:09:56.135 --> 00:10:00.919
So now, we can order our ice cream.

119
00:10:06.896 --> 00:10:11.090
Another fun thing we combine to
is a content editable content.

120
00:10:12.290 --> 00:10:15.050
So, when you have a content editable,

121
00:10:15.050 --> 00:10:18.830
then it means that user can
actually change what's in the page.

122
00:10:22.140 --> 00:10:28.261
So, I can add some text like hello,
everyone,

123
00:10:28.261 --> 00:10:33.570
this is some text, and
copy that to the clipboard.

124
00:10:33.570 --> 00:10:39.210
And then,
now if I add to that elements innerHTML.

125
00:10:43.751 --> 00:10:49.464
And paste it in, then you'll see that
it's capturing the HTML contents and

126
00:10:49.464 --> 00:10:53.210
letting us use that in another context.

127
00:10:53.210 --> 00:10:57.157
There aren't many situations where that's
useful, but it does sometimes come up.

128
00:11:03.240 --> 00:11:07.243
And as we've seen, we can bind to
prooerties inside in each block,

129
00:11:07.243 --> 00:11:09.360
it's not just top level elements.

130
00:11:11.200 --> 00:11:16.280
So, here we have a to do list with
a check box input and a text input.

131
00:11:18.110 --> 00:11:22.780
And we want to be able to see
how many of these are remaining.

132
00:11:22.780 --> 00:11:25.940
Currently, all three are remaining because
these check boxes aren't wired up.

133
00:11:28.530 --> 00:11:30.860
So, find the mark up
where this is happening.

134
00:11:30.860 --> 00:11:34.181
And we're gonna turn this
check value into a binding.

135
00:11:38.810 --> 00:11:41.126
And we're gonna change
that to binding as well.

136
00:11:43.881 --> 00:11:45.556
And now, when you click that,

137
00:11:45.556 --> 00:11:49.689
it's actually changing the value of
to do's itself, and because of that.

138
00:11:54.551 --> 00:11:56.160
This remaining value,

139
00:11:56.160 --> 00:12:00.992
which is being derived from the value
of to dos automatically updates.

140
00:12:00.992 --> 00:12:02.162
And so this text.

141
00:12:04.802 --> 00:12:08.668
Gets printed down here, and it will
automatically update when we interact with

142
00:12:08.668 --> 00:12:10.289
the items inside the each block.

