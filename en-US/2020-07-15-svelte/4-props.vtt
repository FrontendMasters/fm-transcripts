WEBVTT

1
00:00:00.350 --> 00:00:03.325
We can also assign directly
to properties of arrays and

2
00:00:03.325 --> 00:00:06.810
objects the same way that we
assign to free variables.

3
00:00:06.810 --> 00:00:10.769
So another way that we could do this is

4
00:00:10.769 --> 00:00:17.044
numbers[numbers.length] =
numbers.length + 1.

5
00:00:18.770 --> 00:00:20.530
And that works exactly
how you would expect.

6
00:00:20.530 --> 00:00:22.380
At some point,
when you're building an application,

7
00:00:22.380 --> 00:00:25.840
you're gonna need to parse data
from one component to another.

8
00:00:25.840 --> 00:00:27.990
And for that,
we use something called a prop.

9
00:00:30.150 --> 00:00:35.981
A prop is basically an attribute on
an element, and it stands for properties.

10
00:00:38.613 --> 00:00:42.430
So here we have some state inside
the nested component answer, and

11
00:00:42.430 --> 00:00:47.350
we're showing it inside this paragraph
tag, and it's coming across as undefined.

12
00:00:48.400 --> 00:00:53.587
Even though we're parsing it through
from here, nested answer = 42.

13
00:00:53.587 --> 00:00:57.397
And the reason for that is that as far
as the nested component is concerned,

14
00:00:57.397 --> 00:01:00.681
this is private state that nothing
else gets to interfere with.

15
00:01:00.681 --> 00:01:05.393
What we need to do is tell svelte
the answer should be considered a property

16
00:01:05.393 --> 00:01:07.825
that can be set by a parent component.

17
00:01:07.825 --> 00:01:12.412
And the way that we do that is again by
abusing some existing JavaScript syntax,

18
00:01:12.412 --> 00:01:14.610
we're gonna use the export keyword.

19
00:01:16.717 --> 00:01:20.784
This tells svelte that if
the parent sets a value for this,

20
00:01:20.784 --> 00:01:22.610
we just parse it through.

21
00:01:22.610 --> 00:01:27.594
And obviously if we change that,
it'll update in the manner that you would

22
00:01:27.594 --> 00:01:30.772
expect, so
there's a little caveat now here.

23
00:01:30.772 --> 00:01:34.085
This might seem a little bit
weird if you're used to using

24
00:01:34.085 --> 00:01:36.926
the export keyword in
your JavaScript modules.

25
00:01:36.926 --> 00:01:39.425
Again, it has to be syntactically valid.

26
00:01:39.425 --> 00:01:43.272
And this is a really convenient way of
using something that's in the language

27
00:01:43.272 --> 00:01:46.884
that we weren't otherwise gonna be
using to fulfill a purpose that would

28
00:01:46.884 --> 00:01:49.034
otherwise be very difficult and awkward.

29
00:01:49.034 --> 00:01:52.571
So just kind of roll with it for now and
it'll soon become second nature.

30
00:01:57.598 --> 00:02:03.955
So we can set a default value for
answer, like so.

31
00:02:03.955 --> 00:02:08.925
And then if the parent component
doesn't provide a value for that prop,

32
00:02:08.925 --> 00:02:11.543
then it'll fall back to the default.

33
00:02:16.171 --> 00:02:19.944
First answer is 42, the second
answer is determined by the child.

34
00:02:24.279 --> 00:02:29.432
And finally, in the prop section,
we have the concept of spread props.

35
00:02:29.432 --> 00:02:31.541
Sometimes you have
a bundle of properties and

36
00:02:31.541 --> 00:02:33.769
you wanna parse them all
through to component.

37
00:02:33.769 --> 00:02:38.200
In some situations, you might not
know what is gonna be in that object.

38
00:02:38.200 --> 00:02:42.706
And you don't, like you physically unable
to say A equals A, B equals B, C equals D,

39
00:02:42.706 --> 00:02:47.910
because you don't know whether it's gonna
be A, B, C, D, E, or P, Q, R, S, T.

40
00:02:47.910 --> 00:02:52.242
So we use the spread syntax
which looks like this.

41
00:02:52.242 --> 00:02:56.112
I'm just gonna get rid of all of
these individual properties and

42
00:02:56.112 --> 00:02:59.277
parse them through like so,
dot, dot, dot, pkg.

43
00:03:03.377 --> 00:03:05.978
And then it passes through the information
exactly the same way that you

44
00:03:05.978 --> 00:03:06.552
would expect.

45
00:03:06.552 --> 00:03:07.763
And inside here,

46
00:03:07.763 --> 00:03:13.504
we're exporting all of the properties of
that spread objects as individual props.

47
00:03:13.504 --> 00:03:16.070
So nothing needs to change
inside the child component.

