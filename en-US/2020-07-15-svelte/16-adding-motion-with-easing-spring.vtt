WEBVTT

1
00:00:00.280 --> 00:00:02.840
So stories are a pretty
powerful primitive but

2
00:00:02.840 --> 00:00:06.260
we can actually do a lot more
with them than we've seen so far.

3
00:00:06.260 --> 00:00:08.930
Here's a little app with
a progress meter and

4
00:00:08.930 --> 00:00:12.460
when I click on these buttons it will
change the value of that progress.

5
00:00:12.460 --> 00:00:14.740
We want is for
it to smoothly tween to those values.

6
00:00:14.740 --> 00:00:18.958
And we can do that with
the tween store which we're

7
00:00:18.958 --> 00:00:23.586
gonna import from Svelte
motion is that a spell store?

8
00:00:27.064 --> 00:00:29.837
We're just gonna change
this right here to a tween.

9
00:00:32.332 --> 00:00:36.460
And now in exactly the same API as before,
we have a smoothly tween value.

10
00:00:36.460 --> 00:00:40.900
And all we're doing here

11
00:00:40.900 --> 00:00:45.810
is putting that dollar prefix store name,
as the value of our progress element.

12
00:00:47.920 --> 00:00:52.420
So, that works, but
it kinda feels a little bit robotic.

13
00:00:52.420 --> 00:00:56.180
And that's because we don't have
any easing applied to this motion.

14
00:00:56.180 --> 00:01:00.470
And it's just like interpolating between
two values in a purely linear fashion.

15
00:01:02.410 --> 00:01:05.080
So what we're gonna do is
add an easing function and

16
00:01:05.080 --> 00:01:10.270
svelte has a bunch of easing functions and
readily available for you.

17
00:01:10.270 --> 00:01:15.735
So cubicOut from svelte/easing.

18
00:01:15.735 --> 00:01:19.580
CubicOut is a function that takes
a value between 0 and 1, and

19
00:01:19.580 --> 00:01:25.180
returns another value between 0 and
1 after it's applied the easing,

20
00:01:25.180 --> 00:01:29.288
and it allows us to do, much

21
00:01:29.288 --> 00:01:34.890
nicer motion looks like this.

22
00:01:34.890 --> 00:01:37.230
So now it's fast at the beginning,

23
00:01:37.230 --> 00:01:40.822
then it slows down as it eases
out into its final state.

24
00:01:44.855 --> 00:01:49.887
And you can get a full list of all
of the different easing functions,

25
00:01:49.887 --> 00:01:53.780
which that website is no longer available.

26
00:01:53.780 --> 00:01:57.799
And we can pass more options to tween,

27
00:01:57.799 --> 00:02:02.079
the second argument contain the delay.

28
00:02:05.757 --> 00:02:08.970
In which case,
the tween won't happen immediately.

29
00:02:11.030 --> 00:02:13.300
We can specify the duration as a function.

30
00:02:14.470 --> 00:02:19.000
And you can provide a custom interpolator
if you're tweening between numbers and

31
00:02:19.000 --> 00:02:20.540
objects that have the same shape.

32
00:02:20.540 --> 00:02:23.070
Then Svelte already knows
how to handle those.

33
00:02:23.070 --> 00:02:26.020
But you can add a custom
interpolated that allows you to, for

34
00:02:26.020 --> 00:02:30.110
example, tween between two
strings representing colors.

35
00:02:32.790 --> 00:02:36.670
And all the options that you can pass
in when you create a new tween store.

36
00:02:36.670 --> 00:02:43.994
You can also pass in when you
call tweened.set value options or

37
00:02:43.994 --> 00:02:48.150
tween.update function options.

38
00:02:49.220 --> 00:02:51.139
So you have a lot of flexibility
with how these work.

39
00:02:55.450 --> 00:03:00.181
The spring store is similar to
the tween store except that instead of

40
00:03:00.181 --> 00:03:05.200
passing it an explicit using function and
an explicit duration.

41
00:03:05.200 --> 00:03:09.330
It will use some very basic
physics to do the same thing.

42
00:03:11.260 --> 00:03:15.980
It's a better option for values that
frequently change because whereas with

43
00:03:15.980 --> 00:03:19.860
the twin store, if you set the value while
a tween is happening, it will abruptly

44
00:03:19.860 --> 00:03:25.070
stop and then Changed the new value
with a spring it's continuous motion.

45
00:03:25.070 --> 00:03:29.360
And if you change the value while
it's already in the process of

46
00:03:29.360 --> 00:03:32.160
moving to the new value, then it will
sort of take that into account and

47
00:03:32.160 --> 00:03:35.170
it will move in a much
more natural seeming way.

48
00:03:35.170 --> 00:03:41.550
So, once again, we're gonna import
from the svelte motion package.

49
00:03:41.550 --> 00:03:43.950
We're gonna replace these
writable stores with springs.

50
00:03:47.934 --> 00:03:52.270
I should have shown you what this
looks like without the spring.

51
00:03:52.270 --> 00:03:53.410
Let me just rewind.

52
00:03:54.620 --> 00:03:59.250
So right now we have a writable store
that represents the mouse position.

53
00:04:00.710 --> 00:04:03.660
You can see this little orange dot
just follows the mouse around when

54
00:04:03.660 --> 00:04:06.540
I click the trackpad,
it gets bigger like so.

55
00:04:07.910 --> 00:04:13.580
Which I find that works but we can
make it nicer by using a spring store.

56
00:04:13.580 --> 00:04:16.910
So we're gonna import spring
once again from svelte motion.

57
00:04:19.335 --> 00:04:23.000
Gonna replace writable
with spring right now.

58
00:04:23.000 --> 00:04:26.580
And so now you can see that,
the orange dot,

59
00:04:26.580 --> 00:04:31.930
kind of follows the mouse around a little
bit more slowly and when I click it

60
00:04:33.570 --> 00:04:38.720
gets bigger and smaller with
the same kind of smooth motion.

61
00:04:38.720 --> 00:04:41.590
And those two things are independent so
it can be moving and

62
00:04:41.590 --> 00:04:44.390
it can be getting bigger and
smaller at the same time.

63
00:04:44.390 --> 00:04:49.840
And that works because down
here inside this SVG element.

64
00:04:51.170 --> 00:04:55.980
The circle is again using the name of
the store prefixed with the dollar.

65
00:04:55.980 --> 00:05:00.353
And then it's just taking the x property
and the y property of the code store and

66
00:05:00.353 --> 00:05:01.886
this size value directly.

67
00:05:06.004 --> 00:05:07.634
So just like with the tween store,

68
00:05:07.634 --> 00:05:10.060
we can pass in some options
as the second argument.

69
00:05:11.380 --> 00:05:14.899
So for example,
we can add some stiffness and damping.

70
00:05:16.810 --> 00:05:21.620
They will change how the physics
of of this paper you can see now,

71
00:05:22.930 --> 00:05:24.800
it's a lot kind of spring here.

72
00:05:26.190 --> 00:05:30.800
And we can actually change these values
dynamically, change the stiffness way up,

73
00:05:30.800 --> 00:05:35.170
and I can change the damping way down, and
it'll start to get a little bit silly.

74
00:05:35.170 --> 00:05:38.186
Stiffness down and the damping way up.

75
00:05:40.472 --> 00:05:44.437
So depending on what kinda effect
you're trying to achieve and your UI,

76
00:05:44.437 --> 00:05:46.260
you can customize these values.

