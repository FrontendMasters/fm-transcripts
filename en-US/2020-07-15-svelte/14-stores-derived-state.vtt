WEBVTT

1
00:00:00.310 --> 00:00:03.965
So far, all of the state that we've been
dealing with has been state that belongs

2
00:00:03.965 --> 00:00:05.167
to specific components.

3
00:00:05.167 --> 00:00:09.068
And if we need to pass it around
between components, then we use props,

4
00:00:09.068 --> 00:00:11.630
and we use bindings and we use events.

5
00:00:11.630 --> 00:00:13.355
But that's not always what you want.

6
00:00:13.355 --> 00:00:18.960
Sometimes you have state that doesn't
really belong to a specific component.

7
00:00:18.960 --> 00:00:20.530
Sometimes it's global state,

8
00:00:20.530 --> 00:00:23.980
like an object representing
the current user and things like that.

9
00:00:25.260 --> 00:00:29.850
And we need to have a way of representing
those outside the components.

10
00:00:29.850 --> 00:00:32.740
And for
that we have the concept of stores.

11
00:00:34.600 --> 00:00:35.890
The store is pretty simple.

12
00:00:35.890 --> 00:00:37.880
It's just an object with
a subscribe method.

13
00:00:39.430 --> 00:00:41.370
And it's not even Svelte specific.

14
00:00:41.370 --> 00:00:46.500
It's something that you could use
in any application, as we'll see.

15
00:00:46.500 --> 00:00:52.040
But it does have a specific
importance to Svelte.

16
00:00:52.040 --> 00:00:54.010
So here's our file, stores.js.

17
00:00:54.010 --> 00:00:58.020
We're importing writable
from Svelte/Store.

18
00:00:58.020 --> 00:01:00.959
Not the main Svelte package, but
the the Svelte/Store package,

19
00:01:00.959 --> 00:01:04.279
which is one of a number of packages
that live inside the Svelte namespace.

20
00:01:04.279 --> 00:01:10.547
And then we're initializing it with 0,
and that becomes our count store.

21
00:01:10.547 --> 00:01:16.480
And then we're importing that count store
into each of these components' app.

22
00:01:18.490 --> 00:01:22.756
Decrementer, incrementer, and resetter.

23
00:01:22.756 --> 00:01:26.960
And as the name suggests, the job of each
of these components is to increment,

24
00:01:26.960 --> 00:01:29.462
decrement, or
reset the value of that store.

25
00:01:32.235 --> 00:01:34.357
So inside the increment, the component.

26
00:01:38.448 --> 00:01:42.731
Let's change the value of
the store by calling count.update

27
00:01:45.872 --> 00:01:49.859
And then we're gonna pass in a handler
that takes the current value and

28
00:01:49.859 --> 00:01:51.220
returns the new value.

29
00:01:52.220 --> 00:01:54.490
That's the job of the update method.

30
00:01:54.490 --> 00:01:58.740
And now when I click the + button,
the value of the count increases.

31
00:02:00.240 --> 00:02:04.790
And the way that we're getting that
value into App is by subscribing to it.

32
00:02:04.790 --> 00:02:06.219
So here we're declaring count value.

33
00:02:06.219 --> 00:02:13.438
And then we're calling count.subscribe,
and giving it a callback.

34
00:02:13.438 --> 00:02:17.851
Which takes the value, the current
value which is the callback that runs

35
00:02:17.851 --> 00:02:22.785
every time the value of count changes,
as well as when you first subscribe to it.

36
00:02:22.785 --> 00:02:26.290
And then it's passing that
value back up to count value,

37
00:02:26.290 --> 00:02:29.076
which is then referenced
inside the marker.

38
00:02:29.076 --> 00:02:34.136
And so that's how clicking this button
affects the contents of the h1.

39
00:02:34.136 --> 00:02:38.321
And if you thinking, that's quite a lot
of boilerplate, you're not wrong.

40
00:02:38.321 --> 00:02:39.650
And we're gonna get to that.

41
00:02:41.550 --> 00:02:44.240
We're gonna wire up the decrementer first.

42
00:02:44.240 --> 00:02:48.779
Same thing, count, update, n, n -1.

43
00:02:50.820 --> 00:02:53.846
And now we can press the + button and
the- button.

44
00:02:53.846 --> 00:02:59.712
Finally, in the re-setter,
we don't care about the current value,

45
00:02:59.712 --> 00:03:05.007
we're always just gonna set it
back to zero, so count.set0.

46
00:03:13.472 --> 00:03:15.650
Okay, so that works.

47
00:03:15.650 --> 00:03:18.960
But there's actually a subtle
bug in this application.

48
00:03:18.960 --> 00:03:23.300
And the bug is that we're generating this
unsubscribe function, which is the result

49
00:03:23.300 --> 00:03:26.420
of calling count.subscribe, but
it never gets called anywhere.

50
00:03:27.600 --> 00:03:32.413
Now one way that we could fix that is to
use the on destroy life cycle function.

51
00:03:36.254 --> 00:03:42.086
And inside on destroy,
We'll call unsubscribe.

52
00:03:42.086 --> 00:03:42.753
In that way,

53
00:03:42.753 --> 00:03:46.761
we're not gonna have any memory leaks if
there are lots of these components and

54
00:03:46.761 --> 00:03:51.840
they've been created and destroyed, all of
our subscribers are gonna be torn down.

55
00:03:51.840 --> 00:03:53.780
But look at all this code.

56
00:03:53.780 --> 00:03:55.780
It's quite a lot for
what we're trying to do.

57
00:03:58.990 --> 00:04:01.560
So Svelte has a trick up its sleeve.

58
00:04:01.560 --> 00:04:05.070
Because we have this fixed store contract.

59
00:04:05.070 --> 00:04:07.440
By which I mean the subscribe method.

60
00:04:07.440 --> 00:04:11.970
We can reference a store value
by prefixing the store name with

61
00:04:11.970 --> 00:04:13.660
the dollar symbol.

62
00:04:13.660 --> 00:04:17.340
And we can just get rid of all of this
code here, get rid of the on destroy.

63
00:04:17.340 --> 00:04:20.585
Get rid of the count value,
get rid of the count.subscribe.

64
00:04:23.730 --> 00:04:26.660
Just take that store and
prefix it with the dollar.

65
00:04:28.470 --> 00:04:32.341
And it works exactly the same way,
under the hood, Svelte is creating that

66
00:04:32.341 --> 00:04:35.414
subscriber the same way that
you would have done manually,

67
00:04:35.414 --> 00:04:39.048
except that it's always gonna clean
it up when it's no longer valid.

68
00:04:43.375 --> 00:04:46.842
There are some caveats about
how this syntax sugar works and

69
00:04:46.842 --> 00:04:49.274
they're detailed in this section here.

70
00:04:53.282 --> 00:04:56.160
So that was the writable store.

71
00:04:56.160 --> 00:04:59.940
There are some stores that you don't
need to be able to set the value of or

72
00:04:59.940 --> 00:05:02.270
it doesn't make sense to
set the value of them.

73
00:05:02.270 --> 00:05:04.478
You might have a store
representing the mouse position or

74
00:05:04.478 --> 00:05:06.369
a store representing
the user's geolocation.

75
00:05:06.369 --> 00:05:09.789
And those are read only, essentially.

76
00:05:10.890 --> 00:05:15.670
So this time in our stores.js tab, we're
importing readable instead of writable.

77
00:05:17.120 --> 00:05:21.640
And we're creating a store called Time,
has no initial value currently.

78
00:05:21.640 --> 00:05:26.237
And we haven't implemented
the function that gets called when

79
00:05:26.237 --> 00:05:30.330
we first subscribe to the store,
so let's do that now.

80
00:05:30.330 --> 00:05:35.630
First argument is the initial value,
new date.

81
00:05:35.630 --> 00:05:41.617
I saw the time is 12:40:53, where I am.

82
00:05:41.617 --> 00:05:46.405
And when we first subscribe to this store,
which is already happening because

83
00:05:46.405 --> 00:05:50.404
we're referencing it inside our
app.svelte with dollar time.

84
00:05:53.841 --> 00:05:55.133
We can create an interval.

85
00:05:59.341 --> 00:06:04.422
It's gonna run once every second, And

86
00:06:04.422 --> 00:06:08.049
it's gonna set the current
value to a new Date object.

87
00:06:09.577 --> 00:06:15.740
And then once everything is unsubscribed
to this store, we can clean that up.

88
00:06:15.740 --> 00:06:20.348
So we're gonna return a function
that calls clear interval, and

89
00:06:20.348 --> 00:06:22.451
then we pass in the interval.

90
00:06:22.451 --> 00:06:27.220
And so now we have this time store
that is just gonna keep ticking up as

91
00:06:27.220 --> 00:06:29.740
long as anyone is interested in it.

92
00:06:29.740 --> 00:06:32.185
And that can be shared between
as many components as you want.

93
00:06:36.699 --> 00:06:40.284
Finally, we have derived stores which

94
00:06:40.284 --> 00:06:45.210
are stores whose value is
derived from other stores.

95
00:06:45.210 --> 00:06:48.540
Be they readable or writable or
even other derived stores.

96
00:06:48.540 --> 00:06:53.235
So taking the previous example, we wanna
have a store that represents the number of

97
00:06:53.235 --> 00:06:55.324
seconds that the page has been open.

98
00:06:55.324 --> 00:06:59.490
And we already have our time store setup.

99
00:07:01.000 --> 00:07:05.360
We just need to implement the App Store.

100
00:07:05.360 --> 00:07:07.840
And so, we're importing
derived alongside readable.

101
00:07:09.180 --> 00:07:12.832
And the first argument to
this function is a store.

102
00:07:12.832 --> 00:07:17.921
And the second argument is a callback
that takes the current store value and

103
00:07:17.921 --> 00:07:20.040
turns it into something else.

104
00:07:20.040 --> 00:07:27.590
So we're gonna take math.round, And
then we'll take the current time.

105
00:07:28.600 --> 00:07:33.680
Subtract that from the start time
when this module was first evaluated.

106
00:07:35.330 --> 00:07:37.639
And then we'll divide it by 1000.

107
00:07:40.383 --> 00:07:44.242
And so now you can see that the store
representing the number of seconds elapsed

108
00:07:44.242 --> 00:07:46.000
since the page is opened.

109
00:07:46.000 --> 00:07:49.595
Updates in sync with the store
representing the current time.

110
00:07:53.722 --> 00:07:58.133
Now, you can derive a store
from multiple input stores, and

111
00:07:58.133 --> 00:08:04.760
you can explicitly set a value instead of
just returning it, like we're doing here.

112
00:08:04.760 --> 00:08:05.890
That's a little bit more involved.

113
00:08:05.890 --> 00:08:09.450
So if that's something that you need to
do, then consult the API documentation.

114
00:08:09.450 --> 00:08:12.780
Which you can find up here, this link
in the nav, next to the tutorial.

