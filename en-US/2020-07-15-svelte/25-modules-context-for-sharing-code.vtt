WEBVTT

1
00:00:00.720 --> 00:00:04.646
So in all of the example components
that we've looked at so far,

2
00:00:04.646 --> 00:00:07.848
we've been running logic
inside the script block,

3
00:00:07.848 --> 00:00:11.794
which means that it executes
once the component instantiates.

4
00:00:11.794 --> 00:00:16.302
And that's useful for most of the things
that we need to do, but occasionally,

5
00:00:16.302 --> 00:00:19.935
we need to have some logic that
runs once for the entire module and

6
00:00:19.935 --> 00:00:22.859
is shared between all
instances of the component.

7
00:00:22.859 --> 00:00:27.220
And for that, we have something
called context = "module".

8
00:00:27.220 --> 00:00:29.458
So, in this app, we have a bunch
of different audio elements.

9
00:00:29.458 --> 00:00:33.590
And if I start playing one of them and
then start playing another one,

10
00:00:33.590 --> 00:00:37.023
they'll all play over each other,
and that's no good.

11
00:00:37.023 --> 00:00:38.103
What we want is for

12
00:00:38.103 --> 00:00:42.144
each play to cause all of the other
audio elements to stop playing.

13
00:00:43.948 --> 00:00:48.785
And so we'll do that by having some state
that is shared between all of the audio

14
00:00:48.785 --> 00:00:49.459
players.

15
00:00:49.459 --> 00:00:54.046
We'll begin by creating a script
with context = "module".

16
00:00:59.564 --> 00:01:03.617
And then we're just gonna have a single
pieces state here called current.

17
00:01:07.174 --> 00:01:14.552
And then, in this function, stopOthers,
whenever the audio element is played,

18
00:01:18.370 --> 00:01:25.154
We're just gonna see if this is the
current audio, and if it's not, pause it.

19
00:01:29.770 --> 00:01:31.083
And change the value of current.

20
00:01:35.678 --> 00:01:40.591
So now if we play this piece of audio and
then play this piece of audio,

21
00:01:40.591 --> 00:01:43.152
the first piece of audio will stop.

22
00:01:54.856 --> 00:01:59.843
Now anything that gets exported from
a context = "module" script block becomes

23
00:01:59.843 --> 00:02:02.060
an export from the module itself.

24
00:02:02.060 --> 00:02:06.898
So if we export a stopAll
function from AudioPlayer.svelte,

25
00:02:06.898 --> 00:02:11.824
like this, export function stopAll(),

26
00:02:18.340 --> 00:02:22.507
And then just take all of the elements
in this set and pause it.

27
00:02:26.605 --> 00:02:31.245
We can now import that function
into App.svelte, like this.

28
00:02:34.064 --> 00:02:37.222
And we can use it inside
this button's event handler,

29
00:02:45.539 --> 00:02:51.229
[MUSIC]

30
00:02:51.229 --> 00:02:53.793
Like so.

