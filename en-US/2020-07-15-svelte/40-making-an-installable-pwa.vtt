WEBVTT

1
00:00:01.250 --> 00:00:02.450
Best Practices.

2
00:00:02.450 --> 00:00:05.990
Well it's telling us that we're not
using HTTP 2, we're using localhost so

3
00:00:05.990 --> 00:00:08.556
that isn't relevant to us right now.

4
00:00:08.556 --> 00:00:15.860
Then this PWA icon is telling us that
we're missing some important stuff,

5
00:00:15.860 --> 00:00:22.060
we don't have a ServiceWorker, and
we don't have a manifest file.

6
00:00:23.590 --> 00:00:26.450
So we need to create both of those things.

7
00:00:26.450 --> 00:00:30.270
We also need to add an Apple touch icon.

8
00:00:30.270 --> 00:00:35.975
And once we've done all of those, this
application will be installable as a PWA,

9
00:00:35.975 --> 00:00:40.040
then if you have an Android phone, you'll
get prompted to install it onto your phone

10
00:00:40.040 --> 00:00:44.050
and then it will just behave like
a native app, which is kinda nice.

11
00:00:45.650 --> 00:00:51.070
I am going to cheat though and
just try and bring in

12
00:00:52.770 --> 00:00:58.400
those files directly from the repo where,
okay,

13
00:00:58.400 --> 00:01:01.870
so I'm just gonna grab the serviceworker
that I created earlier from the complete

14
00:01:01.870 --> 00:01:06.649
branch, get checkout complete --

15
00:01:06.649 --> 00:01:11.210
src/service-worker.

16
00:01:11.210 --> 00:01:16.220
And that's created a serviceworker with
a list of files that we want to cache

17
00:01:17.450 --> 00:01:19.780
when the service worker gets installed.

18
00:01:19.780 --> 00:01:23.940
And we've got a few handlers here,
when the install event happens,

19
00:01:23.940 --> 00:01:25.980
it's gonna populate the cache
with all of those files.

20
00:01:27.720 --> 00:01:31.750
It's then gonna delete any old
caches that are no longer relevant,

21
00:01:31.750 --> 00:01:34.690
and then our fetch event handler.

22
00:01:34.690 --> 00:01:37.070
This is the most important
part of any serviceworker.

23
00:01:37.070 --> 00:01:40.280
When it gets a fetch event,
it's gonna go to the network first, and

24
00:01:40.280 --> 00:01:43.360
if it fails, then it's gonna
fall back to the offline cache.

25
00:01:44.760 --> 00:01:50.250
We need to add some more stuff in
our rollup.config at the moment,

26
00:01:50.250 --> 00:01:55.655
we have a single config,
which is starting from src/main.js.

27
00:01:55.655 --> 00:02:02.211
But we also need to have a config for
the ServiceWorker,

28
00:02:02.211 --> 00:02:08.780
because we need to inject
that timestamp value up here.

29
00:02:09.800 --> 00:02:13.660
So the cache gets invalidated every
time we deploy a new version of this

30
00:02:13.660 --> 00:02:14.240
application.

31
00:02:15.610 --> 00:02:20.592
So inside our rollup.config
we're gonna create one of

32
00:02:20.592 --> 00:02:24.626
these input is src/service-worker.js.

33
00:02:24.626 --> 00:02:28.181
And then we're gonna write that to

34
00:02:28.181 --> 00:02:33.699
public/service-worker.js with
a format of esm,

35
00:02:33.699 --> 00:02:38.971
and we're gonna add a plugin
which is gonna replace

36
00:02:38.971 --> 00:02:43.920
that timestamp with the actual timestamp.

37
00:02:43.920 --> 00:02:48.480
I'm gonna install a plugin called replace.

38
00:02:51.160 --> 00:02:52.327
Add that to my config.

39
00:02:52.327 --> 00:02:57.313
And then when it builds, the serviceworker

40
00:02:57.313 --> 00:03:02.164
it's just gonna replace any references to

41
00:03:02.164 --> 00:03:08.551
timestamp with the current
timestamp by that.

42
00:03:08.551 --> 00:03:12.675
Okay, so now in our public folder,

43
00:03:12.675 --> 00:03:17.900
we should have a service
worker that is indeed

44
00:03:17.900 --> 00:03:22.898
referencing the current timestamp.

45
00:03:22.898 --> 00:03:24.264
So that's gonna work,

46
00:03:24.264 --> 00:03:28.240
now we just need to register
the service worker inside our main.js.

47
00:03:34.998 --> 00:03:39.869
Here, if serviceworker in navigator object

48
00:03:39.869 --> 00:03:45.389
because not everything
support service workers.

49
00:03:46.950 --> 00:03:49.110
Navigates a serviceworker register and

50
00:03:49.110 --> 00:03:51.790
then we're gonna give it
the name of that file.

51
00:04:01.733 --> 00:04:06.584
And then we're gonna quickly
apply some of the other

52
00:04:06.584 --> 00:04:12.000
recommendations that it had,
it asked for a theme color.

53
00:04:17.210 --> 00:04:21.948
Again, all of this stuff is only important
if you want your application to be

54
00:04:21.948 --> 00:04:23.947
installable on mobile phones,

55
00:04:23.947 --> 00:04:27.069
as if it were an app that
you got from the App Store.

56
00:04:28.312 --> 00:04:34.045
I'm gonna pull in the manifest
file from the same repo.

57
00:04:34.045 --> 00:04:41.231
Right, this manifest file is
something that browsers look for

58
00:04:41.231 --> 00:04:45.572
when they're determining whether or

59
00:04:45.572 --> 00:04:50.930
not it can be installed
to the home screen.

60
00:04:50.930 --> 00:04:55.820
It tells us the name of the game,
and description, and

61
00:04:55.820 --> 00:05:00.790
also provides a link to an icon that
will be used when you start the app.

62
00:05:00.790 --> 00:05:06.040
We just need to add a link to that
manifest inside our index.html.

63
00:05:07.170 --> 00:05:13.896
Link rel = manifest href = manifest.json.

64
00:05:15.768 --> 00:05:21.890
And I think that is gonna give
us a better lighthouse score.

65
00:05:21.890 --> 00:05:27.640
So let's start saving
the application again, npm run dev.

66
00:05:29.490 --> 00:05:33.089
Go back to an incognito window and
rerun lighthouse.

67
00:05:40.064 --> 00:05:44.690
And it is a valid progressive web app.

68
00:05:49.340 --> 00:05:53.350
And so now,
if we go to the deployed version

69
00:05:56.052 --> 00:06:01.071
Whereas using compression and
everything's minified, I'm using HTTP 2.

70
00:06:01.071 --> 00:06:07.159
We can see if we still get a decent
lighthouse score in real life.

71
00:06:10.717 --> 00:06:15.310
And there we go, 100% across the board.

72
00:06:15.310 --> 00:06:16.540
It's a valid progressive web app.

73
00:06:16.540 --> 00:06:19.020
So if you go to this on
your phone right now,

74
00:06:19.020 --> 00:06:22.240
if you have an Android then it
will invite you to install it.

75
00:06:22.240 --> 00:06:27.090
If we go to the network tab and
inspect everything, click on the js tab.

76
00:06:27.090 --> 00:06:32.013
This entire bungle, the entire
application is 8.3 kilobyte zit or

77
00:06:32.013 --> 00:06:36.280
21.2 kilobytes minified the unzit.

78
00:06:36.280 --> 00:06:40.758
And we managed to pack an entire game
into that pretty small pay load.

79
00:06:40.758 --> 00:06:47.670
So that is a small application
built in about an hour and half.

80
00:06:49.010 --> 00:06:51.490
You can review the repo and

81
00:06:51.490 --> 00:06:56.730
go through the steps ,and catch
up on any points that you missed.

82
00:06:56.730 --> 00:07:01.450
And make some improvements of your own,
and share them back to the repo so

83
00:07:01.450 --> 00:07:03.340
that other people can see them too.

