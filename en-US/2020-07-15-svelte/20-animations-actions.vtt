WEBVTT

1
00:00:00.047 --> 00:00:03.001
We need to talk about animations,
which is similar to transitions.

2
00:00:03.001 --> 00:00:07.651
But instead of relating to elements
that are entering or leaving the DOM,

3
00:00:07.651 --> 00:00:12.451
animations apply to things inside each
block when the number of items in each

4
00:00:12.451 --> 00:00:15.606
block, or
the contents of each block, changes.

5
00:00:18.863 --> 00:00:21.976
So this is set up as it was at
the end of the last chapter.

6
00:00:21.976 --> 00:00:25.673
If I total that, it's gonna move over.

7
00:00:25.673 --> 00:00:31.556
But we wanna add something
that called a FLIP animation.

8
00:00:31.556 --> 00:00:34.625
FLIP stands for first, last, invert, play.

9
00:00:34.625 --> 00:00:39.940
And it's a technique that you can
use to smoothly animate element from

10
00:00:39.940 --> 00:00:44.985
its old location to its new location
by doing some measurements and

11
00:00:44.985 --> 00:00:47.164
applying a CSS transition.

12
00:00:47.164 --> 00:00:51.001
It essentially reverses the movement and

13
00:00:51.001 --> 00:00:57.039
then lets it undo itself so
that the DOM ends up in its final state.

14
00:00:58.697 --> 00:01:03.152
Import { flip } from 'svelte/animate'.

15
00:01:05.601 --> 00:01:08.836
And then we're gonna find the the label
where we added those send and

16
00:01:08.836 --> 00:01:10.323
receive transitions before.

17
00:01:13.164 --> 00:01:18.541
Down here, I'm gonna add, animate:flip.

18
00:01:20.511 --> 00:01:23.584
And we'll do the same
thing on the other label.

19
00:01:27.893 --> 00:01:32.122
And now if I toggle this, Right,

20
00:01:32.122 --> 00:01:36.766
some boxes are gonna move over to
the other side of the screen, but

21
00:01:36.766 --> 00:01:42.692
the other four items will, hopefully,
gracefully move into their new location.

22
00:01:43.907 --> 00:01:44.976
And there we go.

23
00:01:52.814 --> 00:01:55.680
Just like with transitions,
we can add a duration parameter,

24
00:02:10.608 --> 00:02:12.984
So that everything is
a little bit snappier.

25
00:02:17.144 --> 00:02:21.198
And the duration parameter can
also be a function that receives,

26
00:02:21.198 --> 00:02:25.415
as its argument, the number of
pixels that the element has to move.

27
00:02:25.415 --> 00:02:28.908
So that an element that has to move
further will take longer to do so

28
00:02:28.908 --> 00:02:31.520
than a element that only
has to move a few pixels.

29
00:02:32.840 --> 00:02:36.540
And again, all of this stuff is
being done with CSS animation, so

30
00:02:36.540 --> 00:02:38.907
it won't get blocked by the main thread.

31
00:02:40.466 --> 00:02:45.003
So, earlier, we talked about component
lifecycle, unmount, beforeUpdate,

32
00:02:45.003 --> 00:02:46.790
afterUpdate, and onDestroy.

33
00:02:46.790 --> 00:02:51.024
But we also have a way of dealing
with element lifecycle, and

34
00:02:51.024 --> 00:02:52.692
we call those actions.

35
00:02:52.692 --> 00:02:56.135
Actions are essentially
element-level lifecycle functions.

36
00:02:56.135 --> 00:03:00.767
And they're really useful for things like
interacting with third party libraries,

37
00:03:00.767 --> 00:03:04.705
lazy loading images, doing tool tips or
adding custom event handlers.

38
00:03:04.705 --> 00:03:09.846
In this app here,
we want to make this orange box pannable.

39
00:03:09.846 --> 00:03:15.933
And on the box, we have a bunch of event
handlers for events that don't exist.

40
00:03:15.933 --> 00:03:19.592
panstar, panmove and panend, right?

41
00:03:19.592 --> 00:03:21.076
These are not native DOM elements.

42
00:03:21.076 --> 00:03:24.522
So we need to dispatch those somehow.

43
00:03:24.522 --> 00:03:31.848
And the way that we're gonna do it is
by importing this pannable action.

44
00:03:40.762 --> 00:03:45.008
And then we're gonna make this
element a pannable element,

45
00:03:45.008 --> 00:03:49.501
by which I mean that it will
dispatch these panstart, panmove,

46
00:03:49.501 --> 00:03:53.016
panend events by adding
use the pannable action.

47
00:03:55.210 --> 00:03:59.328
Now, nothing happens yet because we
haven't implemented the pannable function,

48
00:03:59.328 --> 00:04:00.758
but we can do that.

49
00:04:00.758 --> 00:04:03.348
I'm just gonna copy and paste this whole
thing in because you don't want to sit

50
00:04:03.348 --> 00:04:10.604
here and
watch me type it Let's walk through it.

51
00:04:10.604 --> 00:04:13.943
So we're creating some local
state inside the action.

52
00:04:13.943 --> 00:04:17.435
And then we're creating a few
different event handlers,

53
00:04:17.435 --> 00:04:21.580
a mousedown handler, a mousemove handler,
and a mouseup handler.

54
00:04:21.580 --> 00:04:25.376
Then we're adding the mousedown handler,
which in turn is responsible for

55
00:04:25.376 --> 00:04:27.821
adding the mousemove and
the mouseup handlers.

56
00:04:27.821 --> 00:04:29.569
And then at the end of the action,

57
00:04:29.569 --> 00:04:33.878
we return this object that has a destroy
function, which does any cleanup that's

58
00:04:33.878 --> 00:04:36.768
necessary once the element
gets removed from the DOM.

59
00:04:36.768 --> 00:04:41.616
And so now, hopefully, fingers crossed,
as I drag this around,

60
00:04:41.616 --> 00:04:43.791
the element is now pannable.

61
00:04:43.791 --> 00:04:47.648
And because it's just a function, this is
something that you can import into any

62
00:04:47.648 --> 00:04:50.613
component, and you can use it
in multiple different places.

63
00:04:50.613 --> 00:04:55.085
So you can imagine building a library of
actions that you need to use frequently in

64
00:04:55.085 --> 00:04:56.219
your application.

65
00:04:58.391 --> 00:05:01.673
Don't use this implementation of pannable,
because this is really for

66
00:05:01.673 --> 00:05:02.655
demo purposes only.

67
00:05:02.655 --> 00:05:06.666
If we were doing it for real, then you
would need to also handle touch events.

68
00:05:06.666 --> 00:05:08.775
And this only handles mouse
events at the moment.

69
00:05:13.177 --> 00:05:16.828
Just like with other directives,
we can add parameters to actions.

70
00:05:19.195 --> 00:05:27.277
So this is a longpress action
that's been applied to this button.

71
00:05:27.277 --> 00:05:31.275
use:longpress means that when we hold
the trackpad down on the button for

72
00:05:31.275 --> 00:05:34.381
a long period of time,
a longpress event will get fired.

73
00:05:38.408 --> 00:05:40.789
And that's implemented like this,

74
00:05:40.789 --> 00:05:46.025
what we want to do is make it possible to
customize the duration of the longpress.

75
00:05:46.025 --> 00:05:52.431
So that, Your application,
if you want a longpress

76
00:05:52.431 --> 00:05:57.345
to be considered after 300 milliseconds,
then you can do that using the same action

77
00:05:57.345 --> 00:06:02.223
as someone who wants a longpress to be
considered only after 1500 milliseconds.

78
00:06:02.223 --> 00:06:08.757
And we can do that by allowing the action
function to take the second argument,

79
00:06:08.757 --> 00:06:13.019
duration, and
using that inside our setTimeout.

80
00:06:13.019 --> 00:06:19.924
At the moment, it's hard coded to 500,
which means that, We get the event after

81
00:06:19.924 --> 00:06:25.249
500 milliseconds of
holding the mouse down.

82
00:06:25.249 --> 00:06:30.908
Change that to duration, and then now it
will only fire after 2000 milliseconds.

83
00:06:34.918 --> 00:06:35.733
I've done it wrong.

84
00:06:35.733 --> 00:06:41.114
I haven't actually passed in
the duration from the action.

85
00:06:41.114 --> 00:06:42.814
I need to add that here.

86
00:06:45.338 --> 00:06:52.032
So now when I press this,
It'll make you wait for 2000 milliseconds.

87
00:06:56.889 --> 00:07:03.700
Now if I turn this all the way
down to 100 milliseconds, It still

88
00:07:03.700 --> 00:07:08.744
takes 2000 milliseconds because the action
doesn't know that that value has changed.

89
00:07:08.744 --> 00:07:13.305
But we can add an update method to
our action that receives the new

90
00:07:13.305 --> 00:07:18.416
value, And merges it with our local state.

91
00:07:24.820 --> 00:07:30.133
So now, 2000 milliseconds, If I take this

92
00:07:30.133 --> 00:07:35.772
down to 200 milliseconds,
It fires almost immediately.

