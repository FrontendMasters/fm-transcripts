WEBVTT

1
00:00:00.640 --> 00:00:04.200
At times, you'll have a group of
components that need to work together

2
00:00:04.200 --> 00:00:05.600
in some way.

3
00:00:05.600 --> 00:00:06.390
For example,

4
00:00:06.390 --> 00:00:11.560
you might have a map component like this
one here, that renders a map box GL map.

5
00:00:11.560 --> 00:00:16.870
And then inside that we might want
to have these map marker components

6
00:00:16.870 --> 00:00:19.290
that affect the map in some way.

7
00:00:20.680 --> 00:00:25.470
What we don't wanna do, is have to
store a reference to the map component,

8
00:00:25.470 --> 00:00:29.500
and then pass it down to the MapMarker
components or vice versa.

9
00:00:29.500 --> 00:00:33.330
We want all of that coordination to
happen within the components themselves.

10
00:00:33.330 --> 00:00:36.730
Because that makes our lives, as the users
of these components much easier.

11
00:00:36.730 --> 00:00:40.780
And the way that we do that in Svelte is
with something called the Context API.

12
00:00:40.780 --> 00:00:44.890
The Context API is a mechanism that
allows components to talk to each other

13
00:00:44.890 --> 00:00:47.400
without data being passed around as props.

14
00:00:50.520 --> 00:00:55.470
And the context API comes in two halves,
we have set context and get context.

15
00:00:55.470 --> 00:00:59.409
Set context is called on a parent
component, and that makes the context

16
00:00:59.409 --> 00:01:02.967
available to every child component
that is rendered within it.

17
00:01:05.680 --> 00:01:11.400
So in map.svelte here,
what we need to do is set some context.

18
00:01:14.600 --> 00:01:16.995
We're gonna import set
context from Svelte.

19
00:01:19.290 --> 00:01:25.032
I'm gonna import this
key value from map box.

20
00:01:25.032 --> 00:01:27.284
That will become clear in a minute.

21
00:01:29.947 --> 00:01:36.111
And then we are going to set
the context with that key.

22
00:01:42.457 --> 00:01:45.540
And just pass in an object
with a get map method.

23
00:01:47.160 --> 00:01:51.030
Now that second argument to get
context can be anything you like.

24
00:01:51.030 --> 00:01:52.160
It really doesn't matter.

25
00:01:52.160 --> 00:01:55.866
But typically what it will be is an object
containing a variety of functions that

26
00:01:55.866 --> 00:01:59.535
the child components are gonna use to
communicate with the parent component.

27
00:02:03.876 --> 00:02:07.649
So on the other side of the equation
inside the MapMarker component,

28
00:02:07.649 --> 00:02:10.650
we're gonna need to get
a reference to the Mapbox map.

29
00:02:12.890 --> 00:02:17.270
So we're gonna import
get context from Svelte.

30
00:02:21.600 --> 00:02:25.941
Again, we're gonna import that key and
then here,

31
00:02:25.941 --> 00:02:32.369
we're going to call get context and
get a reference to that get map function.

32
00:02:38.097 --> 00:02:42.843
Then each map marker is going to
have its own reference to map.

33
00:02:51.079 --> 00:02:52.730
So let's take a look at
what's happening here.

34
00:02:52.730 --> 00:02:55.890
We have these map marker
components inside the map.

35
00:02:55.890 --> 00:02:59.542
They've got a latitude and
longitude and a label.

36
00:02:59.542 --> 00:03:05.300
And the way that they're being
applied to the main map object here,

37
00:03:05.300 --> 00:03:06.770
is through the map box API.

38
00:03:06.770 --> 00:03:10.510
Once we have a reference to this map,

39
00:03:10.510 --> 00:03:12.970
we can create a pop up using
the map box pop up API.

40
00:03:12.970 --> 00:03:15.553
Create a marker that uses that pop up and

41
00:03:15.553 --> 00:03:19.565
then we can add it to the map
object that we had a reference to.

42
00:03:19.565 --> 00:03:22.126
You can imagine that if we
didn't have the context API,

43
00:03:22.126 --> 00:03:25.833
you would have to have references to all
of these things being passed around, and

44
00:03:25.833 --> 00:03:28.253
it would make our app.svelte
a lot more cluttered.

