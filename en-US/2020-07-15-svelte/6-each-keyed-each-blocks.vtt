WEBVTT

1
00:00:00.870 --> 00:00:02.150
So in most web applications,

2
00:00:02.150 --> 00:00:05.350
you're gonna need to loop over
a list of data at some point.

3
00:00:05.350 --> 00:00:10.830
Here we have a list of data of
the celebrated cats of YouTube.

4
00:00:10.830 --> 00:00:14.767
And the way that we can loop over them in
a spelt component is with the each block

5
00:00:14.767 --> 00:00:16.716
and that looks a little bit like this.

6
00:00:21.733 --> 00:00:26.395
Each cats is cat and
then close it with the slash again

7
00:00:29.933 --> 00:00:32.733
and that renders our list.

8
00:00:36.042 --> 00:00:41.594
So this cat variable is being
created by the each block and

9
00:00:41.594 --> 00:00:46.568
then you can use that inside
it to pull out cat.id to

10
00:00:46.568 --> 00:00:49.960
this property here in cat.name.

11
00:00:49.960 --> 00:00:53.090
Often you'll also need to get
the index of the current element and

12
00:00:53.090 --> 00:00:57.241
so in the same way that you would have
a second argument if you were using

13
00:00:57.241 --> 00:01:01.030
array.map or array.foreach,
you can do the same thing here.

14
00:01:01.030 --> 00:01:02.450
So comma i.

15
00:01:05.460 --> 00:01:12.875
And then down here,
we can do i + 1, colon.

16
00:01:12.875 --> 00:01:15.749
And then the cats are numbered.

17
00:01:18.070 --> 00:01:20.870
We can also use destructuring
inside here the same way

18
00:01:20.870 --> 00:01:23.430
that you could in a regular
JavaScript function.

19
00:01:23.430 --> 00:01:26.710
So instead of passing
through this cat value,

20
00:01:26.710 --> 00:01:31.756
we can destructure it into its
component properties, ID and Name, and

21
00:01:31.756 --> 00:01:36.825
then replace the references to cat
with the values directly, like so.

22
00:01:44.137 --> 00:01:49.600
Now, keyed each blocks are a little
bit harder to explain so bear with me.

23
00:01:49.600 --> 00:01:52.698
What happened before was
that we created a list and

24
00:01:52.698 --> 00:01:57.710
then if that list were to change, it would
always add items at the end of the list or

25
00:01:57.710 --> 00:02:00.103
remove items from the end of the list.

26
00:02:00.103 --> 00:02:02.093
It wouldn't remove items from
the middle of the list or

27
00:02:02.093 --> 00:02:03.760
add items in the middle of the list.

28
00:02:03.760 --> 00:02:05.120
And that is sometimes a problem.

29
00:02:08.020 --> 00:02:12.651
So in this component,
in this thing dot svelte

30
00:02:12.651 --> 00:02:16.941
we're exporting a value called current.

31
00:02:16.941 --> 00:02:19.774
But we're also creating
a value called initial,

32
00:02:19.774 --> 00:02:24.370
which is fixed to the value of current
when the component is first instantiated.

33
00:02:24.370 --> 00:02:27.930
And we're doing that so that we can
demonstrate something that goes wrong

34
00:02:27.930 --> 00:02:30.490
when you're using a regular each block.

35
00:02:30.490 --> 00:02:35.180
If we remove the first
item from this array, and

36
00:02:35.180 --> 00:02:37.060
this is what a block looks like.

37
00:02:37.060 --> 00:02:40.565
We have a thing component, and
we're passing thing.color.

38
00:02:43.140 --> 00:02:46.160
Then the current value is changing.

39
00:02:46.160 --> 00:02:48.820
It's passing through the second,
third, fourth, and

40
00:02:48.820 --> 00:02:50.660
fifth values to the components.

41
00:02:50.660 --> 00:02:54.130
And now the third, fourth, and
fifth, and now the fourth and fifth.

42
00:02:54.130 --> 00:02:58.932
But the components themselves have
the first value and the second value, and

43
00:02:58.932 --> 00:03:02.730
that's obviously wrong because we
want those two things to match.

44
00:03:04.000 --> 00:03:07.720
What we want when we remove the first
thing is for the first component to get

45
00:03:07.720 --> 00:03:11.933
taken out, and for the second, third,
fourth, and fifth to stay where they are.

46
00:03:11.933 --> 00:03:14.965
Rather than removing the fifth component
and then the fourth component and

47
00:03:14.965 --> 00:03:17.720
then the third component, and
then changing the data inside them.

48
00:03:19.050 --> 00:03:22.160
And to do that we use
the keyed each block.

49
00:03:22.160 --> 00:03:27.390
And the way that that works is
inside the each block opening tag,

50
00:03:27.390 --> 00:03:31.990
we specify a way of
identifying each item uniquely.

51
00:03:34.230 --> 00:03:36.930
Put that inside parentheses,
like so, thing.ID.

52
00:03:36.930 --> 00:03:43.680
And now when you remove the first thing,
instead of removing the last item and

53
00:03:43.680 --> 00:03:46.300
then changing the data in all of
the others, it's actually going to remove

54
00:03:46.300 --> 00:03:49.330
the first thing component, and so
the colors will continue to match.

55
00:03:50.570 --> 00:03:53.900
And this becomes particularly
important when you start using

56
00:03:53.900 --> 00:03:56.830
element transitions on
items inside each blocks.

57
00:03:56.830 --> 00:04:01.040
It's also generally more efficient if you
have this type of data that's changing

58
00:04:01.040 --> 00:04:06.880
because cell is able to remove
blocks that no longer exist and

59
00:04:06.880 --> 00:04:10.600
leave other components untouched
rather than having to update

60
00:04:10.600 --> 00:04:13.035
everything past the point
at which the array changed.

