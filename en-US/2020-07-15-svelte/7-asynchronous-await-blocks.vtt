WEBVTT

1
00:00:00.690 --> 00:00:02.440
Very often when you're
building web applications,

2
00:00:02.440 --> 00:00:05.020
you will need to deal
with asynchronous values.

3
00:00:05.020 --> 00:00:07.690
That is to say you're fetching
some data over the network and

4
00:00:07.690 --> 00:00:09.720
it's represented as a promise.

5
00:00:09.720 --> 00:00:13.840
And that's often quite
difficult inside templates.

6
00:00:13.840 --> 00:00:18.300
So Svelte introduces something called
the await block, which is a way of

7
00:00:18.300 --> 00:00:21.960
handling promises natively,
right inside your template markup.

8
00:00:23.850 --> 00:00:31.355
So here we have a promise which is getting
a random number from this API end-point.

9
00:00:33.310 --> 00:00:37.310
It gets the number and
then it resolves the fetch and

10
00:00:37.310 --> 00:00:43.270
then if the response was okay it
returns the value of the API response.

11
00:00:43.270 --> 00:00:47.430
And if it didn't work for whatever reason,
which sometimes it doesn't,

12
00:00:47.430 --> 00:00:51.260
because this endpoint is programmed in
such a way that it will occasionally fail

13
00:00:51.260 --> 00:00:56.420
just to demonstrate the point that we're
making, it will throw an error instead.

14
00:00:56.420 --> 00:00:59.590
So we can have a promise
that can resolve or reject.

15
00:01:01.040 --> 00:01:04.977
And whenever we click this button is
gonna get us a new random number.

16
00:01:08.066 --> 00:01:11.695
So we're right now, we're just putting
the promise right there on a template and

17
00:01:11.695 --> 00:01:14.970
it's showing up as an object promise
string, which is not very helpful.

18
00:01:14.970 --> 00:01:18.701
We're gonna replace that
with the await block.

19
00:01:32.434 --> 00:01:38.250
So far we've got the waiting section so
this is when the promise is still pending.

20
00:01:38.250 --> 00:01:40.020
This is what is visible.

21
00:01:40.020 --> 00:01:42.675
When we've got the value that we want,

22
00:01:42.675 --> 00:01:45.902
we pass it to the then
close of your await block.

23
00:01:59.211 --> 00:02:01.505
All right, so
you'll see what happened there.

24
00:02:01.505 --> 00:02:04.985
It went away to get the data took
a little while to come back, but

25
00:02:04.985 --> 00:02:09.637
when it did resolve, it prints the number
to the screen, generate another one.

26
00:02:09.637 --> 00:02:13.320
It's gonna wait a little bit and then it's
going to print the number to the screen.

27
00:02:13.320 --> 00:02:14.820
Sometimes it will go wrong.

28
00:02:14.820 --> 00:02:17.139
So we need to have a catch clause as well.

29
00:02:19.466 --> 00:02:25.182
And inside the catch clause we
have access to an error and

30
00:02:25.182 --> 00:02:32.670
if that happens Will print
the error message to the screen.

31
00:02:32.670 --> 00:02:35.640
I don't have time to keep taking
us back for when that happens, so

32
00:02:35.640 --> 00:02:36.640
what I'm gonna do is.

33
00:02:37.900 --> 00:02:43.510
Gonna open my data tools and
turn everything offline.

34
00:02:43.510 --> 00:02:45.500
So now in theory,

35
00:02:45.500 --> 00:02:50.350
when I click generate random number is
gonna give us an error, fail to fetch.

36
00:02:50.350 --> 00:02:54.710
Okay, so this is a really easy way of
structuring code that needs to deal with

37
00:02:54.710 --> 00:02:55.450
asynchronous values.

