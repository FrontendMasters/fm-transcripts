WEBVTT

1
00:00:00.620 --> 00:00:03.203
So as we saw earlier in the course,

2
00:00:03.203 --> 00:00:08.561
we can add events to elements with
a thing that we call the on directive.

3
00:00:08.561 --> 00:00:12.605
And that's basically equivalent to
doing element.addEventListener in

4
00:00:12.605 --> 00:00:13.830
Vanilla JavaScript.

5
00:00:15.790 --> 00:00:19.324
So in this application here,
we have a mousemove handler,

6
00:00:19.324 --> 00:00:23.506
which is gonna change this value to
the current position of the mouse.

7
00:00:23.506 --> 00:00:26.322
And then we're just displaying
that inside the mark up here.

8
00:00:29.670 --> 00:00:35.262
Now if we now add a mousemove handler
to the div, on:mousemove= and

9
00:00:35.262 --> 00:00:40.877
then just pass it a reference,
To the function,

10
00:00:46.347 --> 00:00:51.629
Then now as we move the mouse around,
the text on the screen will change.

11
00:00:51.629 --> 00:00:55.237
And you'll notice that this function
reference is being called with

12
00:00:55.237 --> 00:00:59.030
the event object that you would get
if you were using addEventListener,

13
00:00:59.030 --> 00:01:00.354
it's exactly the same.

14
00:01:03.430 --> 00:01:06.670
And we can also declare
event handlers inline.

15
00:01:06.670 --> 00:01:08.340
We don't need to pass
a function reference.

16
00:01:08.340 --> 00:01:10.133
We can do it like this instead.

17
00:01:25.888 --> 00:01:31.380
Still works, and now we can get rid of
that handler because we no longer need it.

18
00:01:31.380 --> 00:01:35.090
This can be very convenient at times,
but it's also

19
00:01:35.090 --> 00:01:38.260
something that you can use to make your
templates look like absolute gibberish.

20
00:01:38.260 --> 00:01:42.258
So generally, once your event handlers
get more complicated than this,

21
00:01:42.258 --> 00:01:45.748
you want to hoist them into the script
block and give them a name.

22
00:01:50.809 --> 00:01:52.840
I should point out something here.

23
00:01:52.840 --> 00:01:57.710
If you're using an editor
where this syntax highlighting

24
00:01:57.710 --> 00:02:03.150
causes problems because
it's not typical HTML,

25
00:02:03.150 --> 00:02:08.180
you can wrap the whole thing
in quote marks just so

26
00:02:08.180 --> 00:02:10.740
that you don't have those
syntax highlighting problems.

27
00:02:10.740 --> 00:02:14.128
As far as Svelte's concerned,
those two things are identical.

28
00:02:14.128 --> 00:02:15.808
It's not gonna treat this as a string.

29
00:02:21.693 --> 00:02:24.890
So we can also add modifiers
to our event handlers.

30
00:02:24.890 --> 00:02:28.700
And what modifiers do is they change the
behavior of the event handler in some way.

31
00:02:29.800 --> 00:02:35.840
For example, we can add a once
modifier to this on:click handler.

32
00:02:35.840 --> 00:02:38.474
Right now, if I do Click me,
I'll get an alert.

33
00:02:38.474 --> 00:02:40.630
I do Click me again,
I'll get another alert.

34
00:02:40.630 --> 00:02:42.660
Third time, a third alert.

35
00:02:42.660 --> 00:02:45.020
But sometimes you want
an event to only happen once.

36
00:02:45.020 --> 00:02:49.845
So we'd use the pipe syntax, pipe once.

37
00:02:49.845 --> 00:02:53.302
You pipe the event through
the once modifier, and

38
00:02:53.302 --> 00:02:58.170
now click once, click twice,
click three times, nothing happens.

39
00:03:00.380 --> 00:03:02.680
There's a few different modifiers
that we have access to.

40
00:03:02.680 --> 00:03:07.606
We have preventDefault, which calls
event.preventDefault before handling

41
00:03:07.606 --> 00:03:13.820
the event, which is useful for handling
form submissions client side, for example.

42
00:03:13.820 --> 00:03:16.233
stopPropagation which calls
event.stopPropagation,

43
00:03:16.233 --> 00:03:18.850
which means that the event
doesn't bubble to outer elements.

44
00:03:20.290 --> 00:03:22.250
We can add the passive modifier,

45
00:03:22.250 --> 00:03:26.389
which will improve scrolling
performance on touch and wheel events.

46
00:03:26.389 --> 00:03:30.859
Although Svelte will, if it's safe to,
add that modifier itself.

47
00:03:32.580 --> 00:03:36.030
The capture modifier
causes the event to be

48
00:03:36.030 --> 00:03:39.680
handled on the capture phase as
opposed to the bubble phase.

49
00:03:39.680 --> 00:03:41.110
Basically what that means is

50
00:03:42.330 --> 00:03:45.930
events work their way in from
the window when they first happen.

51
00:03:45.930 --> 00:03:47.150
So if you click on an element,

52
00:03:47.150 --> 00:03:50.420
the window receives the event
during the capture phase.

53
00:03:50.420 --> 00:03:54.980
And then any parent elements get it,
all the way down to the element that

54
00:03:54.980 --> 00:03:57.620
was actually clicked,
which is called the event target.

55
00:03:57.620 --> 00:04:01.590
And then it goes to the bubble phase,
and it works its way back out again.

56
00:04:01.590 --> 00:04:07.100
And by default, Svelte event handlers
will be handled in the bubble phase.

57
00:04:07.100 --> 00:04:11.250
But very occasionally, you will need
to handle them in the capture phase,

58
00:04:11.250 --> 00:04:14.220
and that modifier allows you to do so.

59
00:04:14.220 --> 00:04:19.074
And we also have the self modifier, which
only triggers the handler if the event

60
00:04:19.074 --> 00:04:23.216
target is the element itself,
rather than a child of that element.

61
00:04:28.015 --> 00:04:30.780
So that's what DOM events look like.

62
00:04:30.780 --> 00:04:32.780
But we also have component events,

63
00:04:32.780 --> 00:04:35.890
which are a way that components
can communicate with each other.

64
00:04:37.390 --> 00:04:41.967
So typically, our data will flow
into components as props, but

65
00:04:41.967 --> 00:04:46.985
it can flow back out of components in
cases where it needs to as events.

66
00:04:48.920 --> 00:04:53.648
So here in our app.svelte,
we have an inner component, and

67
00:04:53.648 --> 00:05:00.432
we have an on:message event handler that's
gonna alert the details of that message.

68
00:05:00.432 --> 00:05:02.426
Inside our inner component,

69
00:05:02.426 --> 00:05:06.260
we need to set that up so
that this event gets dispatched.

70
00:05:06.260 --> 00:05:10.755
And the way that we do it is
by importing a function called

71
00:05:10.755 --> 00:05:14.496
createEventDispatcher from Svelte itself.

72
00:05:19.927 --> 00:05:22.641
And once we've done that,
we create a dispatch function.

73
00:05:31.906 --> 00:05:34.976
And then inside our
sayHello function here,

74
00:05:34.976 --> 00:05:38.691
we're gonna call dispatch
with the name of the event,

75
00:05:38.691 --> 00:05:43.075
which in this case is message,
and an optional payload of data.

76
00:05:51.778 --> 00:05:55.766
And now when we click on this button,

77
00:05:55.766 --> 00:06:01.941
the inner component creates the event,
broadcasts it,

78
00:06:01.941 --> 00:06:07.357
and then the outer component
is able to handle it.

79
00:06:07.357 --> 00:06:08.752
And if we log the event here,

80
00:06:16.171 --> 00:06:18.042
Just gonna comment that out.

81
00:06:29.294 --> 00:06:33.447
You'll see that what we're using
is the native DOM custom event,

82
00:06:33.447 --> 00:06:37.007
which, among other things,
has this detail property,

83
00:06:37.007 --> 00:06:41.706
which corresponds to the payload that
we passed to the dispatch function.

84
00:06:46.264 --> 00:06:50.401
Now a question that we get a lot is why
do we need to do this two line stanza

85
00:06:50.401 --> 00:06:55.360
where we import createEventDispatcher,
and then we create a dispatch function?

86
00:06:55.360 --> 00:06:58.188
Wouldn't it be easier if we could
just do important dispatch, and

87
00:06:58.188 --> 00:06:59.610
Svelte will then get rid of that?

88
00:07:01.270 --> 00:07:06.160
So the way that it works is when this
script block is being executed when

89
00:07:06.160 --> 00:07:11.140
a component is created, Svelte knows which
component is currently instantiating.

90
00:07:11.140 --> 00:07:14.170
And so when we call a function
like createEventDispatcher,

91
00:07:14.170 --> 00:07:17.550
we're able to create a function that
is bound to that specific component.

92
00:07:17.550 --> 00:07:20.130
Whereas if we were just importing
a function called dispatch,

93
00:07:20.130 --> 00:07:23.885
which doesn't exist, from Svelte,
then when we called it,

94
00:07:23.885 --> 00:07:27.540
Svelte will have no way of knowing which
component was dispatching the event.

95
00:07:27.540 --> 00:07:30.950
And so it wouldn't know which
handlers needed to be triggered.

96
00:07:30.950 --> 00:07:35.078
So that's why we have this two line
stanza, createEventDispatcher.

97
00:07:35.078 --> 00:07:40.140
And then this needs to run at
the top level of the script block.

98
00:07:40.140 --> 00:07:44.210
In the DOM, when an event is triggered
on an element, it will bubble out

99
00:07:44.210 --> 00:07:47.440
from that element to its parents until
it eventually reaches the window.

100
00:07:47.440 --> 00:07:50.140
That doesn't happen with components.

101
00:07:50.140 --> 00:07:54.300
If you want to listen to an event on some
nested component, then the intermediate

102
00:07:54.300 --> 00:07:56.850
components need to forward the events
that you're interested in.

103
00:07:58.270 --> 00:08:00.380
So now we have a similar case to before.

104
00:08:00.380 --> 00:08:04.250
We have an inner component that
is gonna dispatch an event, but

105
00:08:04.250 --> 00:08:06.800
it's wrapped in an outer component.

106
00:08:06.800 --> 00:08:11.640
And the outer component is what's
inside the main app.svelte.

107
00:08:11.640 --> 00:08:14.215
So what we need to do here is for

108
00:08:14.215 --> 00:08:18.657
the event from inner via
outer up all the way to app.

109
00:08:22.156 --> 00:08:28.024
And one way that we could do that is
by going through the whole rigmarole

110
00:08:28.024 --> 00:08:33.310
of creating the event dispatcher
inside the outer component.

111
00:08:35.080 --> 00:08:38.555
Do the whole const dispatch
= createEventDispatcher, and

112
00:08:38.555 --> 00:08:43.771
then we'll create, A forward handler.

113
00:08:50.087 --> 00:08:55.919
And just forward the event detail from
the inner component up to the app,

114
00:08:55.919 --> 00:08:58.412
on:message=[forward].

115
00:09:00.932 --> 00:09:05.830
And now when we click that button,
the event is forwarded.

116
00:09:05.830 --> 00:09:09.060
But that's an awful lot of boilerplate
to do something fairly straightforward.

117
00:09:09.060 --> 00:09:13.850
So Svelte gives us a slightly
easier way to do this.

118
00:09:13.850 --> 00:09:16.588
If we just have on:message,
just like that,

119
00:09:16.588 --> 00:09:18.840
it will do all that behind the scenes.

120
00:09:18.840 --> 00:09:21.872
It recognizes that that
is you asking the outer

121
00:09:21.872 --> 00:09:26.860
component to forward that message from
the inner component to its parents.

122
00:09:31.549 --> 00:09:35.410
And we can do the same
thing with DOM elements.

123
00:09:35.410 --> 00:09:40.746
So we have a custom button component
here with some fancy styling.

124
00:09:43.035 --> 00:09:50.050
And we want to get click
events handled inside the app.

125
00:09:50.050 --> 00:09:53.760
Right now,
the button doesn't have an event handler.

126
00:09:54.870 --> 00:09:58.720
And again, we could wire up some
logic to forward the event manually.

127
00:09:58.720 --> 00:10:02.440
But it's a lot easier
if we just do on:click.

128
00:10:02.440 --> 00:10:06.040
And so now, any click events from
the button will be forwarded through

129
00:10:06.040 --> 00:10:10.640
the custom button component to anything
that includes the custom button component,

130
00:10:10.640 --> 00:10:11.934
like our app.svelte here.

