WEBVTT

1
00:00:00.012 --> 00:00:01.649
All right, so it's time for
the final push.

2
00:00:01.649 --> 00:00:03.151
We have a functional game and

3
00:00:03.151 --> 00:00:06.290
all we need to do now is
polish up the UI a little bit.

4
00:00:06.290 --> 00:00:09.920
So the first thing we're gonna
do is fix these button styles,

5
00:00:09.920 --> 00:00:11.130
because this looks a little bit ugly.

6
00:00:12.300 --> 00:00:16.435
So let's go to our welcome component and

7
00:00:16.435 --> 00:00:20.575
find the bottom of the styles block and,

8
00:00:23.458 --> 00:00:27.851
Just give that a little bit of polish.

9
00:00:50.261 --> 00:00:55.490
And we're gonna have a media query again
640 pixels, that's our breakpoint.

10
00:00:57.570 --> 00:01:00.195
So on mobile the buttons gonna stack, but

11
00:01:00.195 --> 00:01:03.127
on desktop they're gonna
exist side by side.

12
00:01:17.715 --> 00:01:19.500
Okay, that one was way nicer.

13
00:01:23.807 --> 00:01:28.308
All right, next thing we're gonna do is
we're gonna make sure that when each round

14
00:01:28.308 --> 00:01:32.320
starts we've already pre-loaded
the images for that celebrity space.

15
00:01:32.320 --> 00:01:35.820
Otherwise what happens is the image gets
created and at that point the browser

16
00:01:35.820 --> 00:01:38.190
starts downloading it, but the image
is already visible on the screen.

17
00:01:38.190 --> 00:01:41.290
So that can create this
nasty flickering effect.

18
00:01:41.290 --> 00:01:45.996
And we can fix that by loading the image
at the same time as we load the data for

19
00:01:45.996 --> 00:01:48.256
the celebrities over the network.

20
00:01:48.256 --> 00:01:51.065
So inside our utils.js,

21
00:01:51.065 --> 00:01:56.948
we're gonna create a new
function called load image.

22
00:02:00.389 --> 00:02:04.778
Which takes in a source and
returns a premise.

23
00:02:11.248 --> 00:02:13.380
Use the image constructor to
create a new image object.

24
00:02:13.380 --> 00:02:15.589
This is similar to doing
document.create element image.

25
00:02:16.930 --> 00:02:22.150
Give it an unload handler, which
fulfills with the image object just in

26
00:02:22.150 --> 00:02:28.329
case that's needed on error handler, which
is just going to reject with the error.

27
00:02:28.329 --> 00:02:30.978
And then finally we apply the source.

28
00:02:30.978 --> 00:02:34.910
And that's gonna tell the browser that
we need to go and fetch that image.

29
00:02:36.500 --> 00:02:41.517
And then inside the game component,
we can now use

30
00:02:41.517 --> 00:02:47.501
that import it at the top here,
load image from utils.js.

31
00:02:47.501 --> 00:02:50.612
And then inside our load details
function where we're going and

32
00:02:50.612 --> 00:02:53.048
getting the JSON for
each individual celebrity.

33
00:02:53.048 --> 00:02:56.861
We're not gonna return straightaway,
we're just gonna store that for minutes.

34
00:02:56.861 --> 00:03:00.956
Const details equals the JSON, and

35
00:03:00.956 --> 00:03:08.476
then we're gonna wait until we've
been able to load that image.

36
00:03:08.476 --> 00:03:11.010
And once we've done that we
can return those details.

37
00:03:13.500 --> 00:03:17.882
So now you'll notice that there's
no flickering between rounds.

38
00:03:20.962 --> 00:03:23.440
The images are there immediately,
not flickering.

39
00:03:23.440 --> 00:03:24.610
That's a much nicer experience.

40
00:03:26.000 --> 00:03:31.344
And while we're at it, we can go to
our app.svelte import the same helper.

41
00:03:43.133 --> 00:03:50.412
And once we've mounted we can just preload
the icons that will otherwise again,

42
00:03:50.412 --> 00:03:57.170
only load once we first get the result,
which can cause that ugly flicker.

43
00:03:59.140 --> 00:04:01.478
We don't need to await anything here.

44
00:04:01.478 --> 00:04:03.904
We're just gonna kick those
off in the background, so

45
00:04:03.904 --> 00:04:07.031
that by the time they needed,
they'll long since I've been loaded.

46
00:04:10.341 --> 00:04:16.046
Okay, on the game component,
right now it's just appearing there and

47
00:04:16.046 --> 00:04:19.100
then kind of gets replaced like that.

48
00:04:19.100 --> 00:04:23.430
What we want is for
the games have a nice subtle transition.

49
00:04:23.430 --> 00:04:28.108
And we're gonna use the fly transition
that we saw earlier when we were going

50
00:04:28.108 --> 00:04:29.580
through the tutorial.

51
00:04:31.270 --> 00:04:39.533
And if you remember, we just need to
import fly from svelte/transition.

52
00:04:39.533 --> 00:04:41.965
Gonna import an easing function as well,

53
00:04:41.965 --> 00:04:45.514
or a complete set of easing
functions from svelte/easing.

54
00:04:48.491 --> 00:04:53.400
And then on div class equals game.

55
00:04:55.440 --> 00:05:00.592
You're gonna wanna apply
that fly transition.

56
00:05:00.592 --> 00:05:07.760
When it comes in,
We're gonna come from 20 pixels below.

57
00:05:09.390 --> 00:05:14.460
When it flies out,
we're gonna go to 20 pixels above.

58
00:05:17.878 --> 00:05:20.850
So now you got that nice there.

59
00:05:23.010 --> 00:05:26.060
But there is a bit of a problem, you
might have just seen that flicker there.

60
00:05:26.060 --> 00:05:30.880
What's happening is the new round is being
rendered while the old round is still

61
00:05:30.880 --> 00:05:33.680
out showing, and
that causes a little bit of upset.

62
00:05:33.680 --> 00:05:38.270
So we're gonna make sure that that doesn't
happen by blocking the rendering of

63
00:05:38.270 --> 00:05:42.130
the new round until the last
round is fully off the screen.

64
00:05:42.130 --> 00:05:47.170
And that's easy enough to do by adding
a new value, let ready equals true.

65
00:05:47.170 --> 00:05:52.060
And then only rendering
the screen when ready is true and

66
00:05:52.060 --> 00:05:56.754
then setting it to false
when the outro is happening.

67
00:05:56.754 --> 00:06:01.924
So we can use that on outro start event,

68
00:06:05.333 --> 00:06:07.513
To set ready to false, and

69
00:06:07.513 --> 00:06:13.272
then we'll just set it back to true
again once the outro is finished.

70
00:06:16.845 --> 00:06:19.820
So that will prevent that
error from happening.

71
00:06:20.820 --> 00:06:24.540
They'll go out next one comes in,
everybody's happy.

72
00:06:27.910 --> 00:06:31.114
Now you will notice on
the the deployed version.

73
00:06:31.114 --> 00:06:36.042
If I click on one of these,
I'm gonna guess Andy King has got to be,

74
00:06:36.042 --> 00:06:41.240
the icon is gonna fly and then it's
gonna go down to the results block.

75
00:06:42.610 --> 00:06:47.410
And that is an example of a crossfade
transition like we saw in

76
00:06:47.410 --> 00:06:50.190
an earlier section of this workshop.

77
00:06:50.190 --> 00:06:52.543
So we're gonna wanna add one of those,

78
00:06:52.543 --> 00:06:55.548
close these components
that I'm not looking at.

79
00:06:55.548 --> 00:06:58.541
Up here,
we already import the fly transition,

80
00:06:58.541 --> 00:07:01.030
we're gonna import crossfade as well.

81
00:07:02.360 --> 00:07:06.657
And we're just gonna create the send and
receive transitions.

82
00:07:13.076 --> 00:07:16.446
Give it some configuration.

83
00:07:21.352 --> 00:07:25.272
This is cubic out, and
that's gonna happen in 300 milliseconds.

84
00:07:31.348 --> 00:07:33.551
So we're gonna take these transitions and

85
00:07:33.551 --> 00:07:37.160
we're gonna apply the send
transition to the giant image.

86
00:07:37.160 --> 00:07:39.326
So you get sent to the results block, and

87
00:07:39.326 --> 00:07:42.780
on the results block we're gonna
have the receipt transition.

88
00:07:42.780 --> 00:07:47.360
So that's gonna come from the center
of the screen down to where it belongs.

89
00:07:47.360 --> 00:07:48.756
So the element itself isn't moving.

90
00:07:48.756 --> 00:07:52.990
There's basically two elements and
one is shrinking and fading out.

91
00:07:52.990 --> 00:07:58.015
The other is growing and fading,
no, they're both shrinking and

92
00:07:58.015 --> 00:08:00.898
the other is shrinking and fading in.

93
00:08:00.898 --> 00:08:05.489
And, All we need to do is

94
00:08:05.489 --> 00:08:10.378
find our giant image,
and on that we do out.

95
00:08:13.220 --> 00:08:18.289
Actually before we do that, we're gonna
add an in transition on the giant

96
00:08:18.289 --> 00:08:23.550
result image, because we want it to
move onto the screen and then come down.

97
00:08:23.550 --> 00:08:25.966
So we're gonna fly in from,

98
00:08:28.101 --> 00:08:33.190
100 pixels to the right
over 200 milliseconds.

99
00:08:33.190 --> 00:08:37.670
And then the out transition,
that's where we're gonna use send.

100
00:08:38.820 --> 00:08:42.803
And we need to give it a key so
that it knows what the correspond to.

101
00:08:42.803 --> 00:08:45.011
And we're just gonna use
the index of the round.

102
00:08:47.403 --> 00:08:51.621
And then we need to apply
the corresponding received transition to

103
00:08:51.621 --> 00:08:53.360
the little icon down here.

104
00:08:57.920 --> 00:09:02.510
We need to have the index into
the results array visible.

105
00:09:02.510 --> 00:09:05.163
So we're just gonna add a comma i,

106
00:09:05.163 --> 00:09:10.391
same signature as when you using dot
map and dot for each on an array.

107
00:09:10.391 --> 00:09:15.673
In receive equals key i, k,

108
00:09:15.673 --> 00:09:21.620
let's see if that's working.

109
00:09:27.130 --> 00:09:28.390
It is not working.

110
00:09:28.390 --> 00:09:30.390
What did we miss here.

111
00:09:30.390 --> 00:09:34.870
Okay, so a moment ago, I was trying to
figure out why the crossfade transition

112
00:09:34.870 --> 00:09:38.920
wasn't applying, we click on one
of these spaces it flies in and

113
00:09:38.920 --> 00:09:41.740
then it just snaps it to the new place.

114
00:09:41.740 --> 00:09:46.319
And the reason for that is that we're
immediately going from removing the result

115
00:09:46.319 --> 00:09:48.151
to advancing to the next round.

116
00:09:48.151 --> 00:09:53.310
And we need to have break for that
animal to come down into its new home.

117
00:09:53.310 --> 00:09:58.117
So we're gonna add here
a weight sleep 500 just give

118
00:09:58.117 --> 00:10:01.471
that a chance to get where it belongs.

119
00:10:04.838 --> 00:10:11.189
And now we should see that comes in and
goes down to the results array.

120
00:10:14.672 --> 00:10:18.246
We're just gonna add a few more
transitions just to make things nice

121
00:10:18.246 --> 00:10:19.830
and slick.

122
00:10:19.830 --> 00:10:25.191
On the card component,
we'll import the scale transition.

123
00:10:29.147 --> 00:10:33.813
And we're gonna use our friend
elastic out from spell easing.

124
00:10:37.588 --> 00:10:42.630
And we're gonna apply that to the price,
so that when the price is displayed, those

125
00:10:42.630 --> 00:10:47.333
sort of [SOUND] come in like that which is
a sort of a fun effect I quite like using.

126
00:10:57.927 --> 00:11:02.250
And we'll do the same thing for
the done screen.

127
00:11:03.410 --> 00:11:07.960
At the scale transition
from self transition,

128
00:11:07.960 --> 00:11:12.387
and then find class equals done.

129
00:11:12.387 --> 00:11:20.448
Apply the in scale equals
give it a very short delay,

130
00:11:20.448 --> 00:11:25.763
a duration 100 milliseconds or

131
00:11:25.763 --> 00:11:32.111
so, easing, We use the same one for
consistency.

132
00:11:35.031 --> 00:11:38.934
Okay, now when we click
on one of the faces,

133
00:11:38.934 --> 00:11:42.108
the price [SOUND] comes in like that.

134
00:11:42.108 --> 00:11:42.960
It's kind of fun.

135
00:11:46.330 --> 00:11:53.721
Subtle tweak on the car component,
I'm gonna add a border radius.

136
00:11:57.074 --> 00:12:02.484
Using a variable setup in our global.css,
and we'll add a nice little box shadow.

137
00:12:13.927 --> 00:12:20.320
And that is basically
everything in the game itself.

138
00:12:20.320 --> 00:12:25.356
All that remains is to do a lighthouse
audit and see what it suggests.

139
00:12:28.123 --> 00:12:32.145
So I maximize this move my
Dev Tools over the right hand side.

140
00:12:32.145 --> 00:12:37.713
[SOUND] Looks like we do in fact
have something to fix here,

141
00:12:37.713 --> 00:12:44.855
which is our buttons need to have,
A width of 100%.

142
00:12:48.705 --> 00:12:55.503
I'm gonna add that to the welcome screen.

