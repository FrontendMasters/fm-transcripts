WEBVTT

1
00:00:00.577 --> 00:00:03.782
So far when talking about components
containing other components,

2
00:00:03.782 --> 00:00:06.340
it's been a direct parent
child relationship.

3
00:00:06.340 --> 00:00:08.670
But very often when you're
building an application,

4
00:00:08.670 --> 00:00:14.520
you will need to pass some content into
the component, not as props but as markup.

5
00:00:14.520 --> 00:00:17.400
And for
that we have something called slots.

6
00:00:17.400 --> 00:00:20.590
This is a process called
component composition.

7
00:00:20.590 --> 00:00:23.780
So in the same way that an element
can have children like this,

8
00:00:23.780 --> 00:00:26.230
a div can contain paragraphs.

9
00:00:26.230 --> 00:00:31.250
A component can have children but
it needs to know where to put them.

10
00:00:31.250 --> 00:00:36.331
So inside our box component here,
which is going to contain our content.

11
00:00:36.331 --> 00:00:39.755
I'm going to replace this
comment with a slot element.

12
00:00:42.740 --> 00:00:45.646
And now that we've done
that inside our App.svelte,

13
00:00:45.646 --> 00:00:47.740
we can put some content inside the box.

14
00:00:53.675 --> 00:00:55.870
And we can put whatever
we like inside that slot.

15
00:01:05.325 --> 00:01:10.308
Now in some situations you might need
to have some fallback content for

16
00:01:10.308 --> 00:01:11.580
your component.

17
00:01:12.990 --> 00:01:18.566
Inside the slot,
you can specify your fallback like so.

18
00:01:24.172 --> 00:01:28.068
And then if the component is
created without any content,

19
00:01:31.512 --> 00:01:33.952
Then we'll use that
fallback markup instead.

20
00:01:39.618 --> 00:01:41.922
A component can contain multiple slots.

21
00:01:41.922 --> 00:01:44.492
The one that we just saw is the so
called default slot.

22
00:01:44.492 --> 00:01:48.162
But you might have content that needs to
be injected in a particular place inside

23
00:01:48.162 --> 00:01:48.830
a component.

24
00:01:48.830 --> 00:01:52.570
And for
that we use something called a named slot.

25
00:01:52.570 --> 00:01:56.160
So this is a contact call
component that looks like this.

26
00:02:00.149 --> 00:02:03.693
We have three slots, one inside this h2,

27
00:02:03.693 --> 00:02:07.950
one inside the address,
and one inside the email.

28
00:02:07.950 --> 00:02:10.300
And we just need to provide names for
all of those things.

29
00:02:12.860 --> 00:02:18.010
The name of the first slot will be name.

30
00:02:18.010 --> 00:02:22.287
The name of the second
slot will be address.

31
00:02:22.287 --> 00:02:27.114
The name of the third slot will be email.

32
00:02:27.114 --> 00:02:32.276
And then now if we're using that
component in another component,

33
00:02:32.276 --> 00:02:34.962
we can put in our contact details.

34
00:02:34.962 --> 00:02:41.065
And provide the slot name as the slot
attribute on the element and

35
00:02:41.065 --> 00:02:44.577
it will get put in the correct place.

36
00:02:44.577 --> 00:02:46.963
So, slot = "name".

37
00:03:09.734 --> 00:03:12.550
Again, if we don't provide any content for

38
00:03:12.550 --> 00:03:16.898
a particular slot like we haven't
provided the slot equals email.

39
00:03:16.898 --> 00:03:20.348
Then it will use the fallback content
specified in the child component.

40
00:03:25.135 --> 00:03:26.494
In some situations,

41
00:03:26.494 --> 00:03:31.730
you're going to need to pass data from
the child component back to the parent.

42
00:03:31.730 --> 00:03:33.990
So that it can be rendered
inside the components content.

43
00:03:35.640 --> 00:03:39.419
Here we have a hoverable
component that looks like this.

44
00:03:41.020 --> 00:03:45.050
And what we want to do is tell
the contents of the horizontal component,

45
00:03:45.050 --> 00:03:46.560
whether or
not we're currently hovering on it.

46
00:03:47.570 --> 00:03:52.959
So, it needs to pass the data
from the slot to the contents.

47
00:03:52.959 --> 00:03:56.247
The contents look like this.

48
00:03:56.247 --> 00:03:59.533
So inside Hoverable.svelte,

49
00:03:59.533 --> 00:04:04.407
we're going to add hovering=[hovering].

50
00:04:07.445 --> 00:04:09.475
Or we can just do that.

51
00:04:09.475 --> 00:04:14.638
And then inside our app,
we're going to expose

52
00:04:14.638 --> 00:04:21.746
that using the let directive,
let.hovering=[hovering].

53
00:04:21.746 --> 00:04:24.092
And now if you hover over this component,

54
00:04:24.092 --> 00:04:26.714
it will tell it that
it's being hovered upon.

55
00:04:32.795 --> 00:04:37.644
And we can change the name of this
variable, we can change that to,

56
00:04:37.644 --> 00:04:41.029
for example, active and
then get rid of that.

57
00:04:41.029 --> 00:04:43.046
If active, I'm being hovered upon.

58
00:04:46.510 --> 00:04:51.920
And this is scope, this let value is
scoped to the contents of the component.

59
00:04:51.920 --> 00:04:55.637
It won't escape that, so
we can have multiple of these like so.

60
00:04:59.608 --> 00:05:05.672
And the value will only be applied to the
affected component, none of its siblings.

