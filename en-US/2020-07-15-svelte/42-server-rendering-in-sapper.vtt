WEBVTT

1
00:00:00.380 --> 00:00:06.078
So when we navigate from another page to
the blog page, it needs to get the JSON,

2
00:00:06.078 --> 00:00:11.120
this address before it can
render this markup here.

3
00:00:13.680 --> 00:00:17.490
And if it was doing that inside an unmount
handler like we were doing earlier,

4
00:00:17.490 --> 00:00:22.480
then what we'd see is a flash of missing
content before that stuff loaded.

5
00:00:22.480 --> 00:00:25.835
What we really want is when we
navigate from home to blog,

6
00:00:25.835 --> 00:00:31.250
is for that content to get loaded
before the navigation occurs.

7
00:00:31.250 --> 00:00:31.840
And in Sapper,

8
00:00:31.840 --> 00:00:36.476
we can do that by exporting a function
called preload from the component.

9
00:00:36.476 --> 00:00:41.570
So this index.svelte file here
has a script context=module

10
00:00:41.570 --> 00:00:44.459
like we saw with that example earlier
with a multiple audio element.

11
00:00:46.030 --> 00:00:52.250
And it's returning a promise
that fetches the blog.json file,

12
00:00:52.250 --> 00:00:59.060
turns it into JSON, and then passes
that data to the component as a prop.

13
00:00:59.060 --> 00:01:03.220
So it's able to load the data
before the component gets rendered,

14
00:01:03.220 --> 00:01:05.620
meaning that you get this
seamless client side navigation.

15
00:01:05.620 --> 00:01:10.700
And that preload function serves another
purpose, which is that if you have

16
00:01:10.700 --> 00:01:14.810
the right attribute applied to any anchor
tags that link to a particular component,

17
00:01:14.810 --> 00:01:18.980
then it's able to preload data
before you've even begun navigation.

18
00:01:18.980 --> 00:01:21.272
So in our nav component over here,

19
00:01:25.062 --> 00:01:31.620
On the link that takes us to the blog
page, we have this thing rel = prefetch.

20
00:01:31.620 --> 00:01:36.430
That is a signal to Sapper that if the
user looks like they're about to click on

21
00:01:36.430 --> 00:01:41.250
the blog link either because they've
tapped the link but haven't yet

22
00:01:41.250 --> 00:01:44.350
removed their finger or because their
mouse has hovered over the link.

23
00:01:44.350 --> 00:01:45.810
Then it should go ahead and

24
00:01:45.810 --> 00:01:49.870
prefetch the data that it's about to
need in order to do that navigation.

25
00:01:49.870 --> 00:01:53.120
So that makes navigation nice and
fast and seamless.

26
00:01:53.120 --> 00:01:58.030
And we can see that in action if
we open dev tools and move away

27
00:01:58.030 --> 00:02:03.470
from blog and refresh the page, and then
look at the requests that are coming in.

28
00:02:03.470 --> 00:02:06.190
It's gonna clear that so
that we don't see it.

29
00:02:06.190 --> 00:02:08.937
And now if I hover over
the blog link in the nav,

30
00:02:08.937 --> 00:02:13.183
you'll see it fetched the blog.JSON
before I actually clicked on it.

31
00:02:13.183 --> 00:02:16.295
And so now when I click,
that data is already loaded and

32
00:02:16.295 --> 00:02:17.792
it can render instantly.

33
00:02:21.333 --> 00:02:25.939
In the case of pages with dynamic
parameters like slug.svelte,

34
00:02:25.939 --> 00:02:29.790
the preload function received
a set of parameters that

35
00:02:29.790 --> 00:02:33.910
correspond to the parts of
the file name that are dynamic.

36
00:02:33.910 --> 00:02:38.770
So in our case,
params.slug corresponds to the part

37
00:02:38.770 --> 00:02:42.337
of the URL within the square brackets.

38
00:02:42.337 --> 00:02:46.755
So for example,
if we navigate to /blog/what-is-sapper,

39
00:02:46.755 --> 00:02:50.290
params.slug will be
equal to what-is-sapper.

40
00:02:50.290 --> 00:02:56.646
So inside our preload function,
we can fetch blog/what-is-sapper.json and

41
00:02:56.646 --> 00:02:59.970
that in turn gets passed
to this JSON file.

42
00:03:01.680 --> 00:03:06.190
Which means that we can then find our
data whether it's from our database or

43
00:03:06.190 --> 00:03:07.220
by looking on disk.

44
00:03:08.540 --> 00:03:14.026
In this case, we're just going through
the array and finding the piece

45
00:03:14.026 --> 00:03:19.515
of hard coded data inside this post
whether it correspond to that slug,

46
00:03:19.515 --> 00:03:24.190
and then we can just return that
object from the get handler.

47
00:03:26.423 --> 00:03:31.688
And then we can send it back to the
preload function where upon it gets turned

48
00:03:31.688 --> 00:03:37.236
into a post that gets passed to the prop,
which is then used to render the page.

49
00:03:37.236 --> 00:03:41.240
So this preload function
runs on the server and

50
00:03:41.240 --> 00:03:44.450
then it runs on the client when
you do client side navigation.

51
00:03:44.450 --> 00:03:50.505
So if the first page that you visit when
you come to this site is what-is-sapper,

52
00:03:50.505 --> 00:03:52.510
then it will run on the server and

53
00:03:52.510 --> 00:03:56.620
generate this HTML and
serve that back to you.

54
00:03:56.620 --> 00:04:00.890
But if you're navigating from
home to blog and enter here,

55
00:04:02.220 --> 00:04:06.440
then instead of running on the server, the
preload function will run in the client.

56
00:04:06.440 --> 00:04:10.380
So this needs to be
what we call universal,

57
00:04:10.380 --> 00:04:12.940
it can run in both environments.

58
00:04:12.940 --> 00:04:15.770
Now we don't actually need to
run a node server to serve

59
00:04:15.770 --> 00:04:17.980
this site because it's never gonna change.

60
00:04:17.980 --> 00:04:20.440
Until we redeploy it
with some new content,

61
00:04:20.440 --> 00:04:24.650
every request we're giving URL is
gonna return the exact same content.

62
00:04:24.650 --> 00:04:26.190
So instead of running on node server,

63
00:04:26.190 --> 00:04:30.290
what we want to do is export this
site as a series of static files.

64
00:04:30.290 --> 00:04:35.939
And we can do that in Sapper by shutting
down our development server and

65
00:04:35.939 --> 00:04:41.875
doing mpm run export, which is gonna
build the site in production mode and

66
00:04:41.875 --> 00:04:44.577
then it's gonna crawl the site.

67
00:04:46.543 --> 00:04:51.535
And it's gonna generate files from any
links that it finds as it's crawling

68
00:04:51.535 --> 00:04:53.490
from index.html outwards.

69
00:04:55.220 --> 00:05:01.050
And we see at the bottom here it said npx
serve __sapper__/export to run the app,

70
00:05:01.050 --> 00:05:04.220
we can look at what's
inside that directory.

71
00:05:07.590 --> 00:05:12.590
And it's just a bunch of static
files that you would use with

72
00:05:12.590 --> 00:05:17.301
GitHub Pages or Netlify or
any static hosting service.

73
00:05:17.301 --> 00:05:23.682
So let's do what it says,
npx serve __sapper__/export.

74
00:05:23.682 --> 00:05:30.023
It's installing serve then it has made
that site available on localhost 5000.

75
00:05:34.272 --> 00:05:34.841
And there we go.

76
00:05:34.841 --> 00:05:39.708
So even though it's a static site with
full server rendering, we still get

77
00:05:39.708 --> 00:05:44.498
the interactivity in the client side
navigation that gives us this nice,

78
00:05:44.498 --> 00:05:47.480
slick reload free experience.

79
00:05:47.480 --> 00:05:50.540
And we can take those files and we can
put them pretty much anywhere we like.

80
00:05:52.040 --> 00:05:54.290
We've already seen a couple
of sites like this today,

81
00:05:54.290 --> 00:05:59.700
the Svelte workshop site
is a similar sort of thing.

82
00:05:59.700 --> 00:06:01.970
This is a statically exported site.

83
00:06:01.970 --> 00:06:06.403
And the Cameo Explorer site
that we were looking at,

84
00:06:06.403 --> 00:06:09.944
this is also a statically exported site.

85
00:06:09.944 --> 00:06:16.432
Even though we've got, All of
the interactivity that you'd expect to

86
00:06:16.432 --> 00:06:20.490
have in a JavaScript driven application,
it's all just basically static file.

87
00:06:20.490 --> 00:06:22.019
There's no server anywhere in site.

88
00:06:23.100 --> 00:06:27.680
And in fact sapper.svelte.dev,
which is a documentation site for

89
00:06:27.680 --> 00:06:30.867
Sapper is itself a statically
exported Sapper site.

