WEBVTT

1
00:00:00.000 --> 00:00:02.600
And then we also have the this binding,

2
00:00:02.600 --> 00:00:07.290
which is a way of getting a reference
to an element inside your component.

3
00:00:07.290 --> 00:00:11.318
If you've used refs in React,
this is a similar concept.

4
00:00:11.318 --> 00:00:16.980
So here we have a canvas, And

5
00:00:16.980 --> 00:00:21.207
when the component is rendered
we want to paint to that canvas.

6
00:00:21.207 --> 00:00:24.205
Which means that we need to get
a reference to the canvas so

7
00:00:24.205 --> 00:00:26.970
that we can get a reference
to the canvas' context.

8
00:00:26.970 --> 00:00:29.700
Up here we have a value, let canvas.

9
00:00:29.700 --> 00:00:33.800
And once the component is mounted using
the unmount callback, which we'll come to

10
00:00:33.800 --> 00:00:40.390
later, we're creating the canvas
context using canvas.getContext('2d').

11
00:00:40.390 --> 00:00:43.650
If you haven't used Canvas programming
four and this isn't familiar, don't worry.

12
00:00:44.690 --> 00:00:47.740
It's more straightforward than it looks.

13
00:00:47.740 --> 00:00:52.120
But we're not gonna get into it during
this course, so just roll with it for now.

14
00:00:53.190 --> 00:00:58.114
All we need to do to make this
work is populate this value

15
00:00:58.114 --> 00:01:01.766
by adding bind this to the canvas element

16
00:01:07.222 --> 00:01:16.305
And so now we have a nice animated,
Canvas inside our component.

17
00:01:19.332 --> 00:01:22.270
Now, a note about the order in
which everything happens here.

18
00:01:22.270 --> 00:01:27.410
So the script tag executes first before
any content is actually rendered.

19
00:01:27.410 --> 00:01:28.652
Because very often,

20
00:01:28.652 --> 00:01:33.670
what happens inside the script tag
determines what is gonna get rendered.

21
00:01:33.670 --> 00:01:38.263
So because of that, there's no way that
this can have a value until later.

22
00:01:38.263 --> 00:01:43.190
So the unmount callback is the first
time you're able to access the value

23
00:01:43.190 --> 00:01:46.108
of any element with a bind this directive.

24
00:01:51.142 --> 00:01:53.765
So far we've only looked
at element bindings, but

25
00:01:53.765 --> 00:01:55.661
components can also have bindings.

26
00:01:59.133 --> 00:02:02.347
So here we have a component called Keypad,

27
00:02:02.347 --> 00:02:07.720
which is basically a custom form element,
you can think of it that way.

28
00:02:09.260 --> 00:02:13.490
And what we want to do is get the value of

29
00:02:13.490 --> 00:02:18.100
what's been entered into the Keypad
into the component that is using it.

30
00:02:18.100 --> 00:02:20.972
So that we can submit,
for example, a pin number.

31
00:02:23.902 --> 00:02:28.150
And so inside the Keypad,
we've created an EventDispatcher.

32
00:02:29.280 --> 00:02:34.752
And we have a submit event that happens

33
00:02:34.752 --> 00:02:40.053
when you click on the Submit button.

34
00:02:40.053 --> 00:02:43.720
But the value itself,
we don't have any events for that.

35
00:02:43.720 --> 00:02:45.264
That is gonna be handled
through the binding.

36
00:02:52.341 --> 00:02:56.170
And it's just like using a text input,
we do bind:value.

37
00:02:56.170 --> 00:02:57.285
And on the right hand side,

38
00:02:57.285 --> 00:02:59.673
we give the name of the variable
that it should be bound to.

