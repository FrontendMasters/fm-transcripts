WEBVTT

1
00:00:00.162 --> 00:00:04.183
Okay, so in this section we're gonna go
through the entire interactive Svelte

2
00:00:04.183 --> 00:00:04.790
tutorial.

3
00:00:04.790 --> 00:00:09.110
And by the end of it you'll have
a complete grasp of what Svelte can do and

4
00:00:09.110 --> 00:00:11.202
how you write Svelte components.

5
00:00:11.202 --> 00:00:15.212
And so what I invite you to do is,
in a new tab open the tutorial,

6
00:00:15.212 --> 00:00:20.290
go to Svelte.dev/tutorial, and we're
just gonna go through the whole thing

7
00:00:20.290 --> 00:00:25.163
top to bottom, soup to nuts Now,

8
00:00:25.163 --> 00:00:29.123
this has some introductory spiel that
I've already basically explained, so

9
00:00:29.123 --> 00:00:34.964
we're gonna go down there and
click on the Next button, And

10
00:00:34.964 --> 00:00:37.805
we'll begin with our
Hello world component.

11
00:00:39.183 --> 00:00:43.924
So the first thing that you'll notice is
that we're writing HTML into this window

12
00:00:43.924 --> 00:00:45.928
here, this app.Svelte window.

13
00:00:45.928 --> 00:00:48.251
I'm gonna make this a little bit bigger so
that everyone can see.

14
00:00:49.992 --> 00:00:54.949
And the reason that we use HTML as our
base language instead of JavaScript is

15
00:00:54.949 --> 00:00:58.502
that HTML is designed to contain CSS and
JavaScript.

16
00:00:58.502 --> 00:01:02.408
So all of the three languages of
the web they all fit together in

17
00:01:02.408 --> 00:01:05.124
Svelte component in a very idiomatic way.

18
00:01:05.124 --> 00:01:07.767
The first thing that we need
to do is add some data.

19
00:01:07.767 --> 00:01:14.517
So gonna create a script tag up here,
and I'm gonna create a variable,

20
00:01:14.517 --> 00:01:20.383
call it name, and we'll just
give it a value like that world.

21
00:01:20.383 --> 00:01:24.949
And then inside the markup we can refer
to that value by putting it inside

22
00:01:24.949 --> 00:01:26.406
curly braces like so.

23
00:01:29.655 --> 00:01:34.840
Now inside these curly braces we
can have any valid JavaScript,

24
00:01:34.840 --> 00:01:40.034
so we can change that to
{name.toUpperCase}, for example.

25
00:01:40.034 --> 00:01:46.300
And then obviously as we change that,
It will rerender the application.

26
00:01:49.283 --> 00:01:53.379
By the way, if you ever get stuck while
going through these tutorials and

27
00:01:53.379 --> 00:01:56.400
you wanna just skip the end
result then you can click on

28
00:01:56.400 --> 00:02:00.630
the Show me button down here and it will
take you straight to the end state and

29
00:02:00.630 --> 00:02:03.621
then you can click Reset to
go back to the beginning.

30
00:02:08.142 --> 00:02:13.533
Now in the same way that we can use curly
braces to put text inside our application,

31
00:02:13.533 --> 00:02:16.287
we can use it inside element attributes.

32
00:02:16.287 --> 00:02:20.961
So our image tag here is
missing a source attribute.

33
00:02:20.961 --> 00:02:23.810
You just add one like that and

34
00:02:23.810 --> 00:02:28.803
give it the value of src
which is in the script log.

35
00:02:28.803 --> 00:02:30.215
Never gonna give you up.

36
00:02:30.215 --> 00:02:32.076
Never gonna let you.

37
00:02:32.076 --> 00:02:34.253
But Svelte is giving us a warning.

38
00:02:34.253 --> 00:02:38.771
This orange bar beneath the markup
is telling us that an image

39
00:02:38.771 --> 00:02:41.701
element should have an alt attribute.

40
00:02:41.701 --> 00:02:45.693
And this is really important
this is an accessibility matter.

41
00:02:45.693 --> 00:02:49.578
Most people when they're using a website
they can see the content of the image, and

42
00:02:49.578 --> 00:02:52.518
they don't need an alt attribute but
there are a lot of users for

43
00:02:52.518 --> 00:02:53.650
whom that's not true.

44
00:02:53.650 --> 00:02:57.775
That includes people with impaired vision
who are using assistive technologies like

45
00:02:57.775 --> 00:02:58.640
screen readers.

46
00:02:58.640 --> 00:03:02.267
But it also includes people who are on
a slow connection, and they've got

47
00:03:02.267 --> 00:03:05.793
the markup but it hasn't yet been able
to load the content of the image.

48
00:03:05.793 --> 00:03:09.885
So it's very important that we always add
an alt attribute to describe what is in

49
00:03:09.885 --> 00:03:10.507
the image.

50
00:03:10.507 --> 00:03:15.434
So in this case, "A man dances".

51
00:03:17.610 --> 00:03:20.774
Now accessibility is a big and
difficult topic and

52
00:03:20.774 --> 00:03:25.670
there's no way that a framework like
Svelte can automatically check that you

53
00:03:25.670 --> 00:03:28.619
are writing accessible
markup in every case.

54
00:03:28.619 --> 00:03:32.512
For example, this alt tag could
be absolute gibberish and

55
00:03:32.512 --> 00:03:34.586
it wouldn't know any better.

56
00:03:34.586 --> 00:03:39.285
So you do have to understand the purpose
of the accessibility warnings and

57
00:03:39.285 --> 00:03:43.242
make sure that you are actually
building accessible markup.

58
00:03:43.242 --> 00:03:46.900
And that includes things like making sure
that the contrast ratios on the content

59
00:03:46.900 --> 00:03:48.744
that you're building are high enough.

60
00:03:48.744 --> 00:03:52.613
But Svelte will do the best that it can
to make sure that you're not making any

61
00:03:52.613 --> 00:03:56.371
obvious mistakes like putting markup
that's inaccessible on the page.

62
00:04:00.091 --> 00:04:03.232
Now we can also use the curly
braces inside attributes.

63
00:04:03.232 --> 00:04:08.375
So let's say we wanted
to add a value name,

64
00:04:14.142 --> 00:04:18.090
Then we can put that
inside attribute there.

65
00:04:18.090 --> 00:04:21.599
And then if I open my Dev tools and
inspect this image,

66
00:04:23.348 --> 00:04:28.174
You'll see that the alt attribute
has been applied as we'd expect.

67
00:04:29.943 --> 00:04:33.916
Now, we very often run into this situation
here where we have an attribute name and

68
00:04:33.916 --> 00:04:37.212
value that match, and so
we have a convenient shorthand in Svelte.

69
00:04:37.212 --> 00:04:40.638
We can just get rid of the attribute
name and the equals and pass it

70
00:04:40.638 --> 00:04:45.037
through like that, and that's something
that we do quite a lot in this workshop.

71
00:04:49.670 --> 00:04:53.431
Now I mentioned before that a Svelte
component because it's HTML it can contain

72
00:04:53.431 --> 00:04:56.812
JavaScript and the CSS, so
we're gonna add some CSS to our component.

73
00:04:58.590 --> 00:05:03.459
We'll open a p selector, and
then we'll make it purple.

74
00:05:04.960 --> 00:05:06.341
And give it a font.

75
00:05:15.371 --> 00:05:16.671
And we'll bump up the size a little bit.

76
00:05:19.251 --> 00:05:24.206
And you'll see that it's applied those
styles to the paragraph as we would

77
00:05:24.206 --> 00:05:24.844
expect.

78
00:05:24.844 --> 00:05:29.897
But wait, there's more Svelte
lets you have nested components.

79
00:05:29.897 --> 00:05:32.475
That is to say a component
can contain other components.

80
00:05:32.475 --> 00:05:35.963
And in that situation we don't want the
styles from one component to affect other

81
00:05:35.963 --> 00:05:39.503
components on the page because then it
becomes very difficult to understand where

82
00:05:39.503 --> 00:05:40.806
a given style is coming from.

83
00:05:40.806 --> 00:05:45.005
So Svelte actually scopes the styles
inside a component to just the markup that

84
00:05:45.005 --> 00:05:46.733
belongs in the same component.

85
00:05:46.733 --> 00:05:52.627
And we can show this by adding a script
tag that imports our nested component,

86
00:05:52.627 --> 00:05:57.810
just select that whole block and
paste it at the top of app.Svelte.

87
00:05:57.810 --> 00:06:02.517
That imports the nested component,
which is visible in this tap here, and

88
00:06:02.517 --> 00:06:05.593
then we'll put that
underneath our paragraph.

89
00:06:09.552 --> 00:06:12.610
And so this paragraph has
the styles defined here, but

90
00:06:12.610 --> 00:06:16.610
they don't affect this paragraph
even though it's the same element.

91
00:06:16.610 --> 00:06:20.963
And the way that this works under
the hood is that Svelte scopes

92
00:06:20.963 --> 00:06:24.479
the CSS selector with
a generated hash that is then

93
00:06:24.479 --> 00:06:27.923
computed from the contents
of your style block.

94
00:06:27.923 --> 00:06:31.241
It puts that class on the selector
in the CSS output and

95
00:06:31.241 --> 00:06:33.171
it also puts it on the element.

96
00:06:33.171 --> 00:06:36.955
And that way there's no possibility
of these selectors clashing

97
00:06:36.955 --> 00:06:38.890
between different components.

98
00:06:42.070 --> 00:06:43.480
And obviously it goes
the other way as well.

99
00:06:43.480 --> 00:06:44.896
If I add a style here,

100
00:06:50.951 --> 00:06:54.305
It will affect the child component but
not the parent component.

101
00:06:56.371 --> 00:06:59.712
We can also do something else
that's quite interesting.

102
00:06:59.712 --> 00:07:02.373
Normally when you're write in
CSS you have this phenomenon of

103
00:07:02.373 --> 00:07:03.763
The Append-Only Stylesheet.

104
00:07:03.763 --> 00:07:06.465
Where you add some styles, and
then you add some more styles, and

105
00:07:06.465 --> 00:07:07.792
then you add some more styles and

106
00:07:07.792 --> 00:07:11.085
then you're not sure if you still need
these styles but you're scared to remove

107
00:07:11.085 --> 00:07:14.549
it because you don't know what is affected
by it because CSS is inherently global.

108
00:07:14.549 --> 00:07:18.209
But because we don't have that problem
because our styles are scoped to

109
00:07:18.209 --> 00:07:21.076
the component we can remove
the styles that aren't used

110
00:07:21.076 --> 00:07:23.394
inside the component by
analyzing the CSS and

111
00:07:23.394 --> 00:07:27.122
the markup together and seeing which
selectors aren't being applied.

112
00:07:27.122 --> 00:07:31.882
So if we have this unused class here,
then we look at the CSS

113
00:07:31.882 --> 00:07:36.932
output, That color red
has been stripped out.

114
00:07:36.932 --> 00:07:39.874
It's not included in the CSS
that gets sent to browsers.

115
00:07:39.874 --> 00:07:44.039
And it'll also give us a convenient
warning tells us that there's an unused

116
00:07:44.039 --> 00:07:48.086
CSS selector so that we can go ahead and
remove that from our source scope.

117
00:07:56.250 --> 00:08:02.046
By default, when you have a curly brace
with a JavaScript expression inside it,

118
00:08:02.046 --> 00:08:03.933
it's evaluated as text.

119
00:08:03.933 --> 00:08:08.667
Which means that if I click over to
the Result here this string contains

120
00:08:08.667 --> 00:08:12.772
some HTML we can actually see
the angle brackets of that tag.

121
00:08:12.772 --> 00:08:16.916
In some situations, you wanna put
the actual HTML onto the page and

122
00:08:16.916 --> 00:08:20.400
that's really easy to do we
just prefix it with @html.

123
00:08:20.400 --> 00:08:22.105
It's a special type of tag.

124
00:08:22.105 --> 00:08:26.432
Then now you can see that
this is some bold text.

125
00:08:26.432 --> 00:08:30.714
Now there is a big caveat here
there's no sanitization that happens.

126
00:08:30.714 --> 00:08:34.681
What that means is that you could
potentially inject some dangerous HTML.

127
00:08:34.681 --> 00:08:37.969
So you need to make sure that the HTML
that you're putting inside your component

128
00:08:37.969 --> 00:08:39.457
comes from a source that you trust.

129
00:08:39.457 --> 00:08:43.489
If it's coming from a source that you
don't trust, like some user input that you

130
00:08:43.489 --> 00:08:47.639
don't control, then you need to make sure
that you sanitize that HTML to remove any

131
00:08:47.639 --> 00:08:51.673
script tags or anything else that could
be used in a cross-site scripting attack

132
00:08:51.673 --> 00:08:54.985
before you include that on a page
that is visible to another user.

133
00:08:54.985 --> 00:08:55.573
Okay, so

134
00:08:55.573 --> 00:09:00.657
we just had a great question about whether
you can add global styles if you need to.

135
00:09:00.657 --> 00:09:04.412
So we're gonna skip back
to the section on Styling.

136
00:09:04.412 --> 00:09:06.124
Sorry, the section on Master Components.

137
00:09:11.904 --> 00:09:18.822
And we're gonna put that, That nested
paragraph inside the component.

138
00:09:18.822 --> 00:09:21.607
And this time in our app.Svelte,

139
00:09:21.607 --> 00:09:26.415
we're gonna change this p
selector to a global p selector.

140
00:09:26.415 --> 00:09:32.248
And we do that using some syntax that
we stole from the CSS modules project.

141
00:09:32.248 --> 00:09:38.048
It's : global is the modifier, and
then we wrap the (p) selector like so.

142
00:09:38.048 --> 00:09:42.054
And now every p element on the page
will be affected by those styles.

143
00:09:42.054 --> 00:09:46.583
And the way that that works, if you
look at the CSS output, it just hasn't

144
00:09:46.583 --> 00:09:51.570
bothered to apply the scoping, select
the scoping class name to that selector.

145
00:09:51.570 --> 00:09:55.253
So that's useful if you need to do
something like change the styles on

146
00:09:55.253 --> 00:09:57.286
the body element because obviously,

147
00:09:57.286 --> 00:10:00.732
you're not gonna have the body
element inside your component.

148
00:10:00.732 --> 00:10:04.465
But generally, that's something that
you don't wanna use too much of.

149
00:10:04.465 --> 00:10:05.653
If you have global styles,

150
00:10:05.653 --> 00:10:08.402
I personally think that they
should go into global.CSS file.

151
00:10:08.402 --> 00:10:11.755
That's where I put my rules
about colors and typography,

152
00:10:11.755 --> 00:10:13.816
all of my CSS variables on the page.

153
00:10:13.816 --> 00:10:16.300
But this is a useful escape hatch for
the times that you do need it.

