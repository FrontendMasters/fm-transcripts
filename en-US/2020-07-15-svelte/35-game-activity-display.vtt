WEBVTT

1
00:00:00.372 --> 00:00:05.557
So in here,
we're creating this result variable, or

2
00:00:05.557 --> 00:00:11.883
concept should say, and logging it,
but we can use that in the UI.

3
00:00:11.883 --> 00:00:15.929
We can say that once there is a result
we show either the big green check or

4
00:00:15.929 --> 00:00:17.019
the big red cross.

5
00:00:18.210 --> 00:00:21.910
Before we can do that, we're gonna
need to take it out of that function.

6
00:00:21.910 --> 00:00:24.934
And let's call it last result.

7
00:00:24.934 --> 00:00:27.861
And then just change const
result into last result.

8
00:00:30.080 --> 00:00:34.894
And then we're gonna need to show
that check but you've seen that on

9
00:00:34.894 --> 00:00:40.580
here when this happens, it appears for
a minute and then it goes away.

10
00:00:40.580 --> 00:00:43.420
It doesn't just immediately advance to the
next round because then you wouldn't get

11
00:00:43.420 --> 00:00:44.700
any useful feedback.

12
00:00:44.700 --> 00:00:49.390
So we're gonna need to change this submit
function to an asynchronous function.

13
00:00:50.920 --> 00:00:53.570
And then after the last
result has been set,

14
00:00:53.570 --> 00:00:58.200
we're gonna need to wait for
let's say 1500 milliseconds.

15
00:01:00.170 --> 00:01:03.390
There's a way that I like to do this,
which is to create a sleep function.

16
00:01:03.390 --> 00:01:06.233
So in my utilities file down here,

17
00:01:06.233 --> 00:01:10.357
utils.js, I'm going to
export a new function.

18
00:01:10.357 --> 00:01:11.972
I'm gonna call it sleep.

19
00:01:15.401 --> 00:01:18.440
That's going to take
milliseconds as an argument.

20
00:01:18.440 --> 00:01:20.118
And it's gonna return a promise.

21
00:01:22.821 --> 00:01:28.385
Which takes a handle here,
fulfill, then we do set timeout,

22
00:01:28.385 --> 00:01:32.670
fulfill after the set
number of milliseconds.

23
00:01:34.355 --> 00:01:37.650
Okay?
So I'm gonna import that in here.

24
00:01:37.650 --> 00:01:45.640
Import sleep from ../Utils.

25
00:01:45.640 --> 00:01:50.704
And then once we've set the result in
our submit handler, I'm just gonna

26
00:01:50.704 --> 00:01:55.946
do a wait sleep 1500 and nothing else
can happen while that's going on.

27
00:01:59.987 --> 00:02:03.706
So now we need to actually
use that information somehow.

28
00:02:07.868 --> 00:02:13.491
See if we have a last result,
We're gonna create an image,

29
00:02:16.746 --> 00:02:20.101
Give it a class, giant result.

30
00:02:21.870 --> 00:02:23.515
Give it an alt attribute.

31
00:02:27.250 --> 00:02:31.180
Feed in last result which is
gonna be either right or wrong.

32
00:02:31.180 --> 00:02:35.550
And then that said the alt attribute is
gonna be the right answer or wrong answer.

33
00:02:37.100 --> 00:02:41.573
And then the source of that image
is gonna be one of the icons

34
00:02:41.573 --> 00:02:44.784
that is already in the public directory.

35
00:02:47.667 --> 00:02:51.930
Just take that SVG and
throw it onto the screen.

36
00:02:53.090 --> 00:02:56.467
Obviously, we need to add some CSS for
that, so let's do that down here.

37
00:03:02.506 --> 00:03:05.367
It's gonna be in the same position
every time, so we use position fixed.

38
00:03:05.367 --> 00:03:07.887
And we're gonna make it a square and

39
00:03:07.887 --> 00:03:12.843
the way that we can do this quite easily
is to use the v min length in CSS,

40
00:03:12.843 --> 00:03:17.225
which is the minimum of the width and
the height of the screen.

41
00:03:17.225 --> 00:03:21.212
So 50 v min is either gonna
be half of the width or

42
00:03:21.212 --> 00:03:26.760
half the height depending on whether
you're looking at an oblong or

43
00:03:26.760 --> 00:03:30.580
whatever the opposite
of an oblong screen is.

44
00:03:31.860 --> 00:03:32.701
Same for height.

45
00:03:36.477 --> 00:03:40.977
And then we can do 50vw minus
25vmin to get it positioned

46
00:03:40.977 --> 00:03:43.143
in the middle of the screen.

47
00:03:45.305 --> 00:03:50.101
Similarly, 50vh take 25vmin to
get it vertically centered, and

48
00:03:50.101 --> 00:03:54.340
we're gonna fade out of it,
give it a pasty of naught 0.5.

49
00:03:55.380 --> 00:03:58.670
Okay, move over to our game screen.

50
00:04:00.230 --> 00:04:02.930
And so
this time if we click on one of these,

51
00:04:04.160 --> 00:04:05.670
the image is gonna appear in
the middle of the screen,

52
00:04:05.670 --> 00:04:08.400
which is exactly what we want,
but it's not getting cleared out.

53
00:04:08.400 --> 00:04:13.687
So we're going to need to do that
after we're finished awaiting.

54
00:04:18.255 --> 00:04:23.880
Just do last result equals null and
then we can get on with the game.

55
00:04:23.880 --> 00:04:24.521
So this time.

56
00:04:28.405 --> 00:04:30.119
Okay, that's what we want.

57
00:04:34.830 --> 00:04:37.813
And then finally, for the game UI,

58
00:04:37.813 --> 00:04:42.893
we need to add this row of results
at the bottom of the screen.

59
00:04:44.719 --> 00:04:49.328
We're gonna stay working
in the game.cell component.

60
00:04:52.153 --> 00:04:55.648
It's gonna collapse some of these
things that we're not using right now.

61
00:04:57.849 --> 00:05:01.765
So we've got this results div already,
everything is gonna go inside here.

62
00:05:03.525 --> 00:05:04.585
Before we can do anything,

63
00:05:04.585 --> 00:05:09.455
we're gonna need an array that represents
the results that we've had so far.

64
00:05:09.455 --> 00:05:11.185
So let's just do that up here.

65
00:05:13.150 --> 00:05:18.190
Const results equals, and
it's just gonna be an empty array with

66
00:05:18.190 --> 00:05:23.244
the same length as the number of rounds,
selection, like that.

67
00:05:24.909 --> 00:05:29.695
And then in here we can iterate over that,
even though it's an empty array with

68
00:05:29.695 --> 00:05:35.060
holes in it, we can write over it because
it just uses the length property.

69
00:05:35.060 --> 00:05:36.760
Each results as result.

70
00:05:37.870 --> 00:05:42.020
Gonna give each of those a span.

71
00:05:48.745 --> 00:05:52.151
And if we have a result for this round,

72
00:05:52.151 --> 00:05:56.626
then we'll use the same
image that we had before.

73
00:05:56.626 --> 00:05:58.814
Just chuck that in there,

74
00:05:58.814 --> 00:06:04.092
except this time it's not gonna
have this giant result class.

75
00:06:07.821 --> 00:06:13.520
Okay, the last thing that we need to
do then is assign to the results array.

76
00:06:13.520 --> 00:06:16.906
At the same as we clear
out the last result.

77
00:06:34.468 --> 00:06:35.010
Okay.

78
00:06:36.570 --> 00:06:40.618
Something's not worked exactly
the way that we wanted it to here.

79
00:06:42.103 --> 00:06:44.912
So let's take a look at that.

80
00:06:49.367 --> 00:06:52.905
Okay, so here,
I'm using last result, but actually,

81
00:06:52.905 --> 00:06:55.053
I should be using this right here.

82
00:06:55.053 --> 00:07:00.276
That's the danger of copying and
pasting your work.

83
00:07:04.388 --> 00:07:10.926
We're also going to need to add
some CSS for this results div.

84
00:07:14.219 --> 00:07:16.185
Let's just go and steal it.

85
00:07:44.399 --> 00:07:46.863
Get some styles for
each individual result.

86
00:07:53.788 --> 00:07:57.909
And finally for
the images inside each of those spans.

87
00:08:10.437 --> 00:08:15.465
Now because the results div is using
a CSS Grid, we need to tell it how many

88
00:08:15.465 --> 00:08:21.390
items it's gonna have, otherwise it's
not gonna know how to lay things out.

89
00:08:21.390 --> 00:08:27.556
So div class results is gonna get an
inline style with grid template columns.

90
00:08:30.755 --> 00:08:34.682
And we're just gonna repeat for however
many things we have in our results array.

91
00:08:36.610 --> 00:08:38.408
And that's gonna be 1fr.

92
00:08:38.408 --> 00:08:43.257
So that's just gonna get
divided up into ten blocks,

93
00:08:43.257 --> 00:08:50.560
each of which is gonna contain,
One of the images.

94
00:08:54.369 --> 00:08:55.715
Okay, so that's working.

95
00:08:55.715 --> 00:08:59.620
It's taking the big giant image and
then is replacing it with a little one

96
00:08:59.620 --> 00:09:02.960
that's keeping track of performance so
far.

97
00:09:02.960 --> 00:09:07.450
Does fel support Sass or
less within the single file components?

98
00:09:07.450 --> 00:09:09.450
And the answer is yes, it does.

99
00:09:09.450 --> 00:09:14.310
Not natively, Svelte itself doesn't
understand anything other than HTML,

100
00:09:14.310 --> 00:09:16.280
CSS, and JavaScript.

101
00:09:16.280 --> 00:09:20.822
But you can pre-process your Svelte
components using a module called

102
00:09:20.822 --> 00:09:24.420
Svelte Preprocess, which will take
in the contents of the component,

103
00:09:24.420 --> 00:09:27.930
and then transform the contents of your
script block and your style block and

104
00:09:27.930 --> 00:09:31.210
the component as a whole,
in any way that you specify.

105
00:09:31.210 --> 00:09:34.370
So in that way you can run
your script through Babel.

106
00:09:34.370 --> 00:09:38.090
You can use TypeScript after reflection,
and

107
00:09:38.090 --> 00:09:40.200
you can use things like SASS and
LESS as well.

