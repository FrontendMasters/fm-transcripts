WEBVTT

1
00:00:00.610 --> 00:00:01.110
Okay, so

2
00:00:01.110 --> 00:00:05.830
in this final stage of the workshop
we're going to take a look at Sapper.

3
00:00:05.830 --> 00:00:11.390
Sapper is our answer to the question, what
should application development look like?

4
00:00:11.390 --> 00:00:14.360
So Svelte is a component framework,

5
00:00:14.360 --> 00:00:18.640
Sapper is an application framework
if you're familiar with React and

6
00:00:18.640 --> 00:00:22.900
Next, React to the component framework,
Next is the application framework.

7
00:00:22.900 --> 00:00:24.670
Svelte and
Sapper have the same relationship.

8
00:00:26.420 --> 00:00:32.110
Now, Svelte is on version three but
Sapper is not yet at version one.

9
00:00:32.110 --> 00:00:35.730
So some of the details of what I'm
about to show you may change but

10
00:00:35.730 --> 00:00:38.400
the basic ideas won't change.

11
00:00:38.400 --> 00:00:41.838
What I'm going to do is walk you through
the Sapper starter project template,

12
00:00:41.838 --> 00:00:43.990
show you how it works so
that you get a feel for it.

13
00:00:43.990 --> 00:00:48.868
And we'll explore some of the features and
then we'll move on to a more complex real

14
00:00:48.868 --> 00:00:52.282
world application and
we'll take a tour of the code base so

15
00:00:52.282 --> 00:00:56.272
that you can see how people can use
Sapper in real world situations.

16
00:00:58.929 --> 00:01:04.193
So, what I want you to do right now

17
00:01:04.193 --> 00:01:11.525
is go to your terminal and
create a new folder,

18
00:01:11.525 --> 00:01:16.225
My Sapper project CD into it.

19
00:01:21.221 --> 00:01:28.270
And we're gonna clone the Sapper starter
project with a little tool called degit,

20
00:01:28.270 --> 00:01:34.528
which takes a GitHub repo and cleans
it but without all of the git history.

21
00:01:34.528 --> 00:01:39.470
Hang on, we're gonna do
sveltejs/sapper-template and

22
00:01:39.470 --> 00:01:42.841
we're going to take the roll up branch.

23
00:01:47.825 --> 00:01:53.839
Okay, while that's installing,
we'll move over to our code window.

24
00:01:57.880 --> 00:02:03.821
So in here we have some source files and
directory called static,

25
00:02:03.821 --> 00:02:10.410
along with a bunch of boilerplatey
project files like a roll up config and

26
00:02:10.410 --> 00:02:17.990
package.jon and all the usual And
if we start the project with npm run dev.

27
00:02:20.190 --> 00:02:27.174
It's going to launch our development
server on localhost 3000.

28
00:02:30.984 --> 00:02:37.800
It looks like it's cached some files that,
okay ServiceWorker again, going haywire.

29
00:02:37.800 --> 00:02:42.150
So this is the starter Sapper project and

30
00:02:42.150 --> 00:02:45.925
it's a site with three sections,
a homepage,

31
00:02:45.925 --> 00:02:52.530
an about page and
a blog page with a few posts

32
00:02:52.530 --> 00:02:57.160
written in markdown inside
the source directory.

33
00:02:58.800 --> 00:03:03.490
And what's interesting about this relative

34
00:03:03.490 --> 00:03:08.410
to the game that we created in
the earlier section of the workshop

35
00:03:08.410 --> 00:03:11.830
is that everything that you see
is completely server rendered.

36
00:03:11.830 --> 00:03:16.725
So if we look at the markup for
this page, by going to view source,

37
00:03:16.725 --> 00:03:21.264
then you'll see that all of this stuff,
the h1, the main,

38
00:03:21.264 --> 00:03:24.115
the figure with the success kid jpeg.

39
00:03:24.115 --> 00:03:29.680
All of this is being server rendered
by Svelte when you request the page.

40
00:03:30.780 --> 00:03:34.740
After it's been requested and the
JavaScript loads then it hydrates it and

41
00:03:34.740 --> 00:03:37.660
turns it into an interactive
application with client side routing.

42
00:03:37.660 --> 00:03:41.240
And this is really important because it
means that we get the best of all possible

43
00:03:41.240 --> 00:03:45.590
worlds in terms of performance,
we get statically rendered markup,

44
00:03:45.590 --> 00:03:51.170
which browsers are really
faster rendering.

45
00:03:51.170 --> 00:03:53.200
But once JavaScript kicks in,

46
00:03:53.200 --> 00:03:57.370
then we have the nice transitions that
you get from client side routing.

47
00:03:57.370 --> 00:04:02.340
If we click on this about tab, then we
don't need to reload the page and go and

48
00:04:02.340 --> 00:04:06.290
get the about HTML, it's already loaded.

49
00:04:06.290 --> 00:04:08.640
So we can get this instant navigation.

50
00:04:08.640 --> 00:04:13.240
Similarly with the blog page, even though
these pages are dynamically rendered using

51
00:04:13.240 --> 00:04:18.330
some markdown, we can navigate to them

52
00:04:18.330 --> 00:04:23.490
instantaneously just by fetching
the json that powers these blog posts.

53
00:04:23.490 --> 00:04:27.770
And so I'm gonna give you a tour of how
this project template is put together.

54
00:04:27.770 --> 00:04:33.266
And then I'm going to show you how we can
export it as a set of static files for

55
00:04:33.266 --> 00:04:36.405
use on GitHub pages,
on Netlify or Surge or

56
00:04:36.405 --> 00:04:40.787
anything else that supports
jam stack style static sites.

57
00:04:43.680 --> 00:04:48.331
So in our source directory,
we have three files at

58
00:04:48.331 --> 00:04:53.110
the top client js,
server js and a service worker.

59
00:04:53.110 --> 00:04:56.974
And the client and server are really
doing the bulk of the work here.

60
00:04:56.974 --> 00:05:02.080
These are the entry points to
the application, server obviously

61
00:05:02.080 --> 00:05:06.960
determines how the pages get rendered when
you first visit them and client determines

62
00:05:06.960 --> 00:05:10.780
what happens after those pages have
loaded and the JavaScript kicks in.

63
00:05:12.130 --> 00:05:17.019
We also have a template.html
file which is gonna

64
00:05:17.019 --> 00:05:22.660
contain all of the markup
as it gets rendered.

65
00:05:22.660 --> 00:05:24.180
We have placeholders here for

66
00:05:24.180 --> 00:05:29.130
the HTML that gets rendered by
the components, plus any JavaScript

67
00:05:29.130 --> 00:05:33.300
that the framework generates in
the course of building your application.

68
00:05:35.370 --> 00:05:40.960
Inside the routes folder, or
routes if you're an American, then we have

69
00:05:40.960 --> 00:05:46.100
a bunch of small components,
index, about, and here blog,

70
00:05:46.100 --> 00:05:51.500
we've got an index file and
this curiously named [slug].svelte file.

71
00:05:51.500 --> 00:05:55.642
And you'll notice that these correspond
to the routes that are available

72
00:05:55.642 --> 00:05:56.855
in the application.

73
00:05:56.855 --> 00:06:04.419
We've got index, about, and
blog with these dynamic slug sample.

74
00:06:04.419 --> 00:06:08.010
So this is what we call file
system based routine, and

75
00:06:08.010 --> 00:06:12.250
it's a really easy way to structure
an application because the structure of

76
00:06:12.250 --> 00:06:17.940
the project on disc maps to the structure
of the application that gets outputted.

77
00:06:17.940 --> 00:06:20.450
So you never have this problem
of looking at a code base and

78
00:06:20.450 --> 00:06:23.180
trying to figure out where
some code is coming from.

79
00:06:23.180 --> 00:06:26.550
Because the structure is
really obvious and explicit.

80
00:06:26.550 --> 00:06:30.100
File system based routing also
gives us a few other advantages.

81
00:06:30.100 --> 00:06:34.160
For example, in the same way that Svelte
statically analyzes your components and

82
00:06:34.160 --> 00:06:36.635
can tell things about your
application from that,

83
00:06:36.635 --> 00:06:41.060
Sappa can statically analyze
the contents of your project and

84
00:06:41.060 --> 00:06:46.290
use that to build a per application
manifest that allows us to create this

85
00:06:46.290 --> 00:06:51.870
really efficient router that knows
exactly what the possibilities are and

86
00:06:53.650 --> 00:06:56.320
means the client side routing
is very efficient and fast.

87
00:06:59.130 --> 00:07:00.500
So let's take a look.

88
00:07:00.500 --> 00:07:05.740
Our index page just has a bunch
of styles and some static markup.

89
00:07:05.740 --> 00:07:10.210
Inside here we're using svelte
head to create the document title.

90
00:07:10.210 --> 00:07:14.373
And so you'll see that on the homepage,
the title is in fact reflected up there,

91
00:07:14.373 --> 00:07:15.732
Sappa project template.

92
00:07:18.269 --> 00:07:22.900
And we have some text here, try editing
this file to test library loading.

93
00:07:22.900 --> 00:07:25.640
Let's add some exclamation marks here.

94
00:07:25.640 --> 00:07:29.590
Some more here, and
some more here, save that.

95
00:07:29.590 --> 00:07:33.690
Go back to the page and
it's updated the page.

96
00:07:36.010 --> 00:07:38.660
On the about page,
there's not a whole lot going on.

97
00:07:38.660 --> 00:07:44.620
We've just got a new title, which is
reflected up here, and some markup.

98
00:07:44.620 --> 00:07:48.270
But you'll notice that we also have
all of this stuff around the page,

99
00:07:48.270 --> 00:07:50.670
we have the navigation bar.

100
00:07:50.670 --> 00:07:53.140
That's because we also
have this layout page.

101
00:07:53.140 --> 00:07:57.620
This is a special component that wraps
any components that are at the same level

102
00:07:57.620 --> 00:07:58.460
in the file system.

103
00:07:59.590 --> 00:08:03.680
So we're importing a component called
nav from this components folder.

104
00:08:06.750 --> 00:08:10.410
We're declaring some styles
which give the main element

105
00:08:12.530 --> 00:08:14.360
max width and the background colour.

106
00:08:14.360 --> 00:08:19.530
And then we have a slot here,
which is where the index page and

107
00:08:19.530 --> 00:08:23.020
the about page get injected
inside that main element.

108
00:08:24.600 --> 00:08:27.015
We also have a special error component,

109
00:08:27.015 --> 00:08:31.987
which if we were to go to a non existent
site, nonexistent page in the application,

110
00:08:31.987 --> 00:08:36.049
the error page would get rendered,
in this case a 404 not found.

111
00:08:40.750 --> 00:08:46.390
And then finally we have this blog
directory which contains a few files.

112
00:08:46.390 --> 00:08:51.784
It contains index.svelte,
which is what you see when you

113
00:08:51.784 --> 00:08:57.850
navigate to /blog and
it contains this [slug].svelte.

114
00:08:57.850 --> 00:09:02.645
The square brackets indicate that
this slug is a parameter which

115
00:09:02.645 --> 00:09:07.260
gets passed by the router at built
time and is used when you're

116
00:09:07.260 --> 00:09:12.440
rendering the page to determine
which piece of data we should fetch.

117
00:09:12.440 --> 00:09:17.470
We also have the json files,
index.json.js,

118
00:09:17.470 --> 00:09:21.649
creates the blog.json file, like so.

119
00:09:25.792 --> 00:09:32.875
And that works by stringifying these posts
which are generated in this file, here.

120
00:09:36.244 --> 00:09:40.916
And this get function, this is basically
the same as any Express Route handler that

121
00:09:40.916 --> 00:09:44.240
you would find if you're
building an express app.

122
00:09:44.240 --> 00:09:46.610
It takes a request object and
a response object.

123
00:09:47.740 --> 00:09:53.479
And then it returns the header
information and the contents.

124
00:09:55.710 --> 00:09:58.900
Now this posts file has
an underscore prefix,

125
00:09:58.900 --> 00:10:03.370
which means that it's not visible
to people visiting this website.

126
00:10:03.370 --> 00:10:06.850
All of these other files because they
don't have the underscore prefix,

127
00:10:06.850 --> 00:10:10.590
they correspond to pages and
files that the user can download.

128
00:10:12.270 --> 00:10:14.220
But this one this is just for
internal use.

129
00:10:14.220 --> 00:10:15.920
So we don't want that to be visible.

130
00:10:15.920 --> 00:10:20.490
If you go to blog/posts,

131
00:10:20.490 --> 00:10:26.250
then we get a 404 again, because that
is a private file inside our project.

132
00:10:26.250 --> 00:10:32.660
And this is a pretty crude way of
building a blog page, we're just

133
00:10:32.660 --> 00:10:37.780
literally creating an array of objects
with a title and a slug and some HTML.

134
00:10:38.900 --> 00:10:41.720
In a real application,
you would have this data coming from

135
00:10:41.720 --> 00:10:45.400
a content management system or
from some markdown files on disk.

136
00:10:45.400 --> 00:10:47.350
But for the sake of simplicity and
obviousness,

137
00:10:47.350 --> 00:10:51.080
we've just got an array here,
where everything is hard coded.

