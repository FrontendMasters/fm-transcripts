WEBVTT

1
00:00:00.240 --> 00:00:04.430
So, so far all the data that we've used
inside these components has been static,

2
00:00:04.430 --> 00:00:05.480
it hasn't changed.

3
00:00:05.480 --> 00:00:08.001
But a lot of the time when
you're building web apps,

4
00:00:08.001 --> 00:00:10.022
the data in your components will change.

5
00:00:10.022 --> 00:00:13.914
And Svelte has a powerful system of
reactivity to make that possible.

6
00:00:13.914 --> 00:00:19.186
So first, we're gonna add
an event handler to this button.

7
00:00:19.186 --> 00:00:22.714
And we'll go into more detail about event
handlers, what they are and how they work,

8
00:00:22.714 --> 00:00:24.236
in a later section of this tutorial.

9
00:00:24.236 --> 00:00:29.905
But for now, Just roll with it,
on:click= {handleClick},

10
00:00:29.905 --> 00:00:36.722
give it a reference to this function
which is defined inside our script block.

11
00:00:36.722 --> 00:00:40.846
And then we just need to
implement handleClick, and

12
00:00:40.846 --> 00:00:43.665
it's very simple, count += 1.

13
00:00:43.665 --> 00:00:50.666
And now when we click this button,
The count clicks up.

14
00:00:50.666 --> 00:00:55.644
The way that this works is that
Svelte instruments the assignment.

15
00:00:55.644 --> 00:01:01.229
When it sees this count += 1,
it replaces that in the generated code,

16
00:01:01.229 --> 00:01:04.539
which we'll look at in more detail later.

17
00:01:04.539 --> 00:01:08.848
The instruments that we just called
to a function called invalidate,

18
00:01:08.848 --> 00:01:12.655
which tells the component that
a specific value has changed.

19
00:01:12.655 --> 00:01:16.974
The component in turn tells the Svelte
scheduler that the component needs to be

20
00:01:16.974 --> 00:01:17.766
re-landed.

21
00:01:17.766 --> 00:01:22.857
And that is how reactivity
works on a per-value level.

22
00:01:28.995 --> 00:01:29.882
Now, very often,

23
00:01:29.882 --> 00:01:33.226
you'll have some state that is derived
from other parts of your state.

24
00:01:33.226 --> 00:01:37.369
So we got our button here
that increments the counter.

25
00:01:37.369 --> 00:01:42.678
Let's say we wanna add a double value,
which is count * 2.

26
00:01:42.678 --> 00:01:47.488
We could do this double = count * 2:, and

27
00:01:47.488 --> 00:01:51.259
then add the sign text beneath it,

28
00:01:51.259 --> 00:01:55.304
(count) doubled is (doubled).

29
00:01:55.304 --> 00:01:57.143
Can't type today.

30
00:02:00.949 --> 00:02:05.110
But it's not updating, and
the reason for that is that the contents

31
00:02:05.110 --> 00:02:09.857
of thid script block execute once when
a component is created per component.

32
00:02:09.857 --> 00:02:14.108
And so this doubled = count * 2,
that's just gonna run at the start

33
00:02:14.108 --> 00:02:18.450
of the component's lifecycle, and
then it's never gonna be rerun.

34
00:02:20.030 --> 00:02:24.200
We want that statement to rerun every
time the value of count changes, and

35
00:02:24.200 --> 00:02:27.270
we can do that with a convenient
little piece of syntax.

36
00:02:27.270 --> 00:02:29.843
Change that let to $:.

37
00:02:29.843 --> 00:02:35.648
Now when you click it,
It doubles as you'd expect.

38
00:02:35.648 --> 00:02:37.573
Now this might look a little bit strange,

39
00:02:37.573 --> 00:02:42.160
because this isn't JavaScript syntax,
that you're probably familiar with.

40
00:02:42.160 --> 00:02:43.860
It is in fact valid JavaScript.

41
00:02:43.860 --> 00:02:47.040
This right here is called a label.

42
00:02:47.040 --> 00:02:51.870
And it's used when you're building a for
loop or a while loop.

43
00:02:51.870 --> 00:02:56.730
You'd have a label, and
then later you can do break label name.

44
00:02:56.730 --> 00:03:00.630
And that allows you to control
the flow of your application

45
00:03:00.630 --> 00:03:02.830
in a way that you generally don't need.

46
00:03:02.830 --> 00:03:05.920
Outside the context of the loop,
it has no value whatsoever.

47
00:03:05.920 --> 00:03:09.721
So when we were building Svelte,
we thought, let's just steal that.

48
00:03:09.721 --> 00:03:13.383
The reason that we have to make
everything valid JavaScript is because,

49
00:03:13.383 --> 00:03:14.643
as I'll explain later,

50
00:03:14.643 --> 00:03:18.680
we're using off the shelf JavaScript
parses to parse everything inside here.

51
00:03:18.680 --> 00:03:20.320
So everything has to be
syntactically valid.

52
00:03:20.320 --> 00:03:21.880
But it does not mean that

53
00:03:23.660 --> 00:03:27.350
this needs to behave the way that it would
ordinarily behave inside JavaScript.

54
00:03:27.350 --> 00:03:28.277
We get to make the rules.

55
00:03:28.277 --> 00:03:31.790
So this here is what we call
a reactive declaration.

56
00:03:31.790 --> 00:03:35.086
And we can have as many
of them as we like.

57
00:03:35.086 --> 00:03:39.639
So I can have one that
depends on the reactive

58
00:03:39.639 --> 00:03:44.450
value of doubled quadrupled = doubled * 2.

59
00:03:48.072 --> 00:03:49.259
Add another one of these.

60
00:03:56.222 --> 00:03:59.007
And that also works as you would expect.

61
00:03:59.007 --> 00:03:59.898
And you'll notice,

62
00:03:59.898 --> 00:04:03.221
that these aren't defined in the order
that they would ordinarily need to run.

63
00:04:03.221 --> 00:04:07.068
Instead, they're executed in
what's called topological order.

64
00:04:07.068 --> 00:04:12.362
Which means that Svelte understands the
quadruple depends on the value of doubled.

65
00:04:12.362 --> 00:04:16.394
And therefore, it needs to calculate
doubled before it calculates quadrupled.

66
00:04:16.394 --> 00:04:19.135
So this might look a little bit weird and
a little bit alien, but

67
00:04:19.135 --> 00:04:22.200
I promise you that once you get used
to it, it becomes second nature.

68
00:04:22.200 --> 00:04:28.415
And it's a very convenient feature And

69
00:04:28.415 --> 00:04:30.427
it's not just declarations
that we can run reactively.

70
00:04:30.427 --> 00:04:34.435
We can also run any arbitrary
statement in the same way.

71
00:04:34.435 --> 00:04:40.293
So for example, we can do console.log

72
00:04:40.293 --> 00:04:45.092
{'the count is $count}:.

73
00:04:47.581 --> 00:04:53.043
Then you'll see here that it gets
logged every time that value changes.

74
00:04:53.043 --> 00:04:54.585
So that's really useful for debugging.

75
00:04:54.585 --> 00:04:59.277
And you can group statements together
by putting them in a block, like so.

76
00:05:02.550 --> 00:05:06.533
And it's not even gonna let me type
that because it's gonna reevaluate on

77
00:05:06.533 --> 00:05:07.311
every chain.

78
00:05:07.311 --> 00:05:09.235
So I'm just gonna paste
the whole thing in.

79
00:05:09.235 --> 00:05:13.877
If we change that, we get another alert,
and if we change that, another alert,

80
00:05:13.877 --> 00:05:14.506
and so on.

81
00:05:14.506 --> 00:05:16.836
Please don't do that to your users.

82
00:05:19.400 --> 00:05:23.684
And you can even put the $ in
front of things like if blocks.

83
00:05:31.013 --> 00:05:33.972
I'm just gonna copy and
paste that whole lot into here.

84
00:05:33.972 --> 00:05:37.990
And now when I click it,
if we get too high,

85
00:05:37.990 --> 00:05:42.130
it'll prevent you from going any further.

86
00:05:46.829 --> 00:05:50.205
And it's not just symbol permitted,
we can update in this fashion.

87
00:05:50.205 --> 00:05:55.463
We can also use the reactivity
to update arrays and objects,

88
00:05:55.463 --> 00:06:00.219
but there is a caveat which
we're gonna explore here.

89
00:06:01.490 --> 00:06:05.593
So we have this function, Add number,
which is gonna push to our numbers array.

90
00:06:05.593 --> 00:06:09.400
When I click this button,
it's not doing anything, and

91
00:06:09.400 --> 00:06:12.743
that's because numbers.push
is not reactive.

92
00:06:12.743 --> 00:06:15.883
Svelte doesn't look at that and
say, we're mutating this array,

93
00:06:15.883 --> 00:06:19.500
therefore we need to recalculate
anything that involves numbers.

94
00:06:19.500 --> 00:06:20.770
It needs to see an assignment.

95
00:06:20.770 --> 00:06:22.687
That's how the system works.

96
00:06:22.687 --> 00:06:28.834
So we can do underneath that numbers =
numbers, that's one way of doing it.

97
00:06:31.369 --> 00:06:33.528
But it's not very idiomatic,
it looks a little bit weird.

98
00:06:33.528 --> 00:06:38.762
It's useful in a pinch, but
it's actually better if rather than

99
00:06:38.762 --> 00:06:43.903
mutating that numbers array and
then reassigning it to itself,

100
00:06:43.903 --> 00:06:48.780
if we create a new copy of our array,
we can do that, like so.

101
00:06:50.650 --> 00:06:56.771
Print new array, spread the existing value
into it, and then add the new value.

102
00:07:02.755 --> 00:07:06.230
And now, it updates exactly the same way.

103
00:07:06.230 --> 00:07:09.410
And you can use similar
patterns to replace shift and

104
00:07:09.410 --> 00:07:12.060
shift and
splice the other array mutation methods.

