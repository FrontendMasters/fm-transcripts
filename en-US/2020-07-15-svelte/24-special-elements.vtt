WEBVTT

1
00:00:01.116 --> 00:00:04.701
So we've seen that Svelte
components can contain any HTML,

2
00:00:04.701 --> 00:00:06.890
valid HTML is already valid Svelte.

3
00:00:06.890 --> 00:00:11.330
But on top of that, Svelte provides
a number of what we call special elements.

4
00:00:11.330 --> 00:00:14.840
The first of these that we're
gonna look at is svelte:self.

5
00:00:14.840 --> 00:00:18.920
And this is a way that a component
can contain itself recursively.

6
00:00:18.920 --> 00:00:21.080
It's really useful for
things like tree views.

7
00:00:21.080 --> 00:00:27.602
So here, we have a tree structure,
we have folders containing files,

8
00:00:27.602 --> 00:00:31.309
and folders containing other folders.

9
00:00:31.309 --> 00:00:34.516
And we want to render
this tree into our app.

10
00:00:34.516 --> 00:00:37.770
So we're gonna change our folder.svelte,

11
00:00:43.775 --> 00:00:47.960
What we wanna be able to do
is just type in folder and

12
00:00:47.960 --> 00:00:51.356
then pass in the information like that.

13
00:00:51.356 --> 00:00:54.731
But that's not gonna work because this
component doesn't have a reference

14
00:00:54.731 --> 00:00:56.005
to anything called folder.

15
00:00:56.005 --> 00:01:02.632
Instead, we need to reference svelte:self,
Like so.

16
00:01:02.632 --> 00:01:08.915
And now we have a tree view that
represents the data structure shown here.

17
00:01:17.551 --> 00:01:20.625
We also have a svelte:component element,

18
00:01:20.625 --> 00:01:23.795
which allows you to use
dynamic components.

19
00:01:23.795 --> 00:01:31.057
So at the moment, we have a select
drop-down that is bound to these RedThing,

20
00:01:31.057 --> 00:01:35.030
GreenThing, and BlueThing components.

21
00:01:36.333 --> 00:01:41.239
But it'd be a lot nicer if we could
just have a single thing that changed

22
00:01:41.239 --> 00:01:46.240
the value of the component dynamically,
so let's get rid of all that.

23
00:01:50.251 --> 00:01:52.140
And we use the special this prop,

24
00:01:58.099 --> 00:02:02.389
And that behaves exactly
the same way as it did before.

25
00:02:05.919 --> 00:02:09.369
If this is a null value,
then it just won't render anything at all.

26
00:02:16.892 --> 00:02:20.765
In the same way that we can add
event listeners to DOM elements,

27
00:02:20.765 --> 00:02:25.120
we can add event listeners to
the window object with svelte:window.

28
00:02:25.120 --> 00:02:30.146
So here,
I'm gonna add the svelte:window, and

29
00:02:30.146 --> 00:02:37.660
then add a keydown handler,
Which has been defined here.

30
00:02:39.846 --> 00:02:44.361
Hang on a minute, there's already
a svelte:window at the beginning of

31
00:02:44.361 --> 00:02:47.032
the tutorial, just gonna get rid of that.

32
00:02:47.032 --> 00:02:51.934
And so now if I focus this window,
that keydown handler is gonna get called

33
00:02:51.934 --> 00:02:55.110
whenever the window
receives a keydown event.

34
00:02:56.460 --> 00:03:00.472
And just like with DOM events, we can use
modifiers like once, prevent default,

35
00:03:00.472 --> 00:03:01.005
and so on.

36
00:03:05.562 --> 00:03:08.292
We can also add bindings to the window.

37
00:03:10.092 --> 00:03:15.450
In this component, we have a bunch
of images from the Firewatch game.

38
00:03:15.450 --> 00:03:20.030
This is a nice little parallax effect
that they have on their homepage.

39
00:03:21.520 --> 00:03:27.670
And I'm gonna bind the scroll value
of the window to some local state.

40
00:03:27.670 --> 00:03:31.320
So we have this y value
which is uninitialized, and

41
00:03:31.320 --> 00:03:34.190
we're using that in in our markup.

42
00:03:34.190 --> 00:03:38.110
So we're using it to determine the
transform of each of the images that form

43
00:03:38.110 --> 00:03:40.180
our parallax layers.

44
00:03:40.180 --> 00:03:46.090
And we're also using it here,
inside this span style,

45
00:03:46.090 --> 00:03:50.133
and we're using it inside some text.

46
00:03:50.133 --> 00:03:53.015
So we're gonna bind the value of

47
00:03:53.015 --> 00:03:57.827
the window's scrollY value
to our local y variable.

48
00:04:00.639 --> 00:04:06.164
And now, as I interact with this, we get
this nice beautiful parallax motion.

49
00:04:12.182 --> 00:04:14.940
There's a few different bindings
that we have access to.

50
00:04:14.940 --> 00:04:18.820
As well as the scrollY value,
we have scrollX, and

51
00:04:18.820 --> 00:04:22.210
we have innerWidth, innerHeight,
outerWidth, outerHeight.

52
00:04:22.210 --> 00:04:26.405
And the online binding, which is
an alias to window.navigator.online,

53
00:04:26.405 --> 00:04:31.056
which is really useful for indicating that
the reason that your app isn't receiving

54
00:04:31.056 --> 00:04:33.824
any data is because the app
is currently offline.

55
00:04:41.862 --> 00:04:45.992
Just like svelte:window we have
a svelte:body special element that

56
00:04:45.992 --> 00:04:49.495
allows you to listen for
events that fire on document body.

57
00:04:49.495 --> 00:04:53.736
It's particularly useful for
the mouseenter and mouseleave events,

58
00:04:53.736 --> 00:04:55.518
which don't fire on window.

59
00:04:55.518 --> 00:05:01.674
So gonna find the svelte:body tag here,
and add the mouseenter and

60
00:05:01.674 --> 00:05:06.536
mouseleave handlers that
have been defined up here.

61
00:05:10.294 --> 00:05:13.481
On.mouseenter=handleMouseenter.

62
00:05:17.217 --> 00:05:23.301
On.mouseleave=handleMouseleave.

63
00:05:23.301 --> 00:05:27.385
And now when we move our
mouse into the window,

64
00:05:27.385 --> 00:05:31.065
a little cat appears, isn't that nice?

65
00:05:36.621 --> 00:05:41.094
Okay, the svelte:head element
allows us to inject content into

66
00:05:41.094 --> 00:05:42.891
the head of the document.

67
00:05:42.891 --> 00:05:47.525
Normally, obviously, all of your
content is gonna go in the body, but

68
00:05:47.525 --> 00:05:52.409
sometimes you need to do things like
add a stylesheet, we can do that here.

69
00:05:55.721 --> 00:05:59.174
And we can change the document title and

70
00:05:59.174 --> 00:06:04.306
other things like that inside
the svelte:head element.

71
00:06:07.036 --> 00:06:12.038
And then finally, we have a svelte:options
element, which allows you to specify

72
00:06:12.038 --> 00:06:16.695
options that are used by the compiler
to control the output of the component.

73
00:06:20.613 --> 00:06:24.900
Now we're gonna use the immutable
option as our example.

74
00:06:24.900 --> 00:06:28.032
This is an app containing
a bunch of todos.

75
00:06:28.032 --> 00:06:33.464
And what you'll notice is that,
anytime we toggle any of the todos,

76
00:06:33.464 --> 00:06:36.283
all of the todos get re-rendered.

77
00:06:36.283 --> 00:06:42.722
And we can see that because we have this
afterUpdate flash function that runs.

78
00:06:42.722 --> 00:06:46.230
afterUpdate runs whenever
the component receives any new state.

79
00:06:46.230 --> 00:06:51.277
And in an ideal world,
that wouldn't be running when

80
00:06:51.277 --> 00:06:57.231
we change a todo that doesn't
affect a particular component.

81
00:06:57.231 --> 00:07:01.934
And so we can optimize this by telling
this todo component that it should expect

82
00:07:01.934 --> 00:07:03.010
immutable data.

83
00:07:03.010 --> 00:07:05.533
Which is to say that if we're
gonna give it a new todo,

84
00:07:05.533 --> 00:07:09.139
then it's gonna be an entirely new object,
we're not mutating anything.

85
00:07:12.661 --> 00:07:17.216
So if we add a svelte:options,

86
00:07:18.839 --> 00:07:23.456
Element to our todo.svelte,

87
00:07:27.052 --> 00:07:29.887
Then now when we toggle these todos,

88
00:07:29.887 --> 00:07:35.201
only the one that we're actually
toggling is receiving that flash.

89
00:07:35.201 --> 00:07:38.039
Because the other todos,
they're completely unaffected,

90
00:07:38.039 --> 00:07:39.408
their data hasn't changed.

91
00:07:42.892 --> 00:07:46.033
And here's a list of all of the other
things that you can use with

92
00:07:46.033 --> 00:07:49.004
svelte:options, some of it
relating to web components.

