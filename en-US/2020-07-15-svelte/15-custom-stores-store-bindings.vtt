WEBVTT

1
00:00:00.200 --> 00:00:03.005
We can also create custom
stores because remember,

2
00:00:03.005 --> 00:00:04.924
the store contract is very simple.

3
00:00:04.924 --> 00:00:10.870
You just need to have a subscribe method
and anything beyond that is up to you.

4
00:00:12.320 --> 00:00:16.770
So if we take our count store
from the first store example,

5
00:00:16.770 --> 00:00:21.740
then what we can do is add increment,
decrement, and

6
00:00:21.740 --> 00:00:24.870
reset methods on the store itself.

7
00:00:27.040 --> 00:00:33.098
In our stores tab, we have a new function
to create a special count store.

8
00:00:34.300 --> 00:00:38.128
And inside that we're beginning
by creating a writable store

9
00:00:38.128 --> 00:00:41.966
just like we had before when we
were doing all this ourselves.

10
00:00:41.966 --> 00:00:45.335
And we're destructuring it to get
references to subscribe, set, and

11
00:00:45.335 --> 00:00:49.390
update, which are the three methods
that exist on a writable store.

12
00:00:49.390 --> 00:00:53.450
And what we're gonna turn
that into is a store where

13
00:00:53.450 --> 00:00:55.890
you can only change
the value in specific ways.

14
00:00:55.890 --> 00:00:58.105
So whereas before you could
have a count store and

15
00:00:58.105 --> 00:01:01.414
then you could do count.set potato or
something irrelevant like that.

16
00:01:01.414 --> 00:01:04.283
This time,
the store is gonna expose its own API.

17
00:01:07.796 --> 00:01:11.064
So our increment function
is gonna look like this,

18
00:01:11.064 --> 00:01:14.720
exactly as we had when we had
an increment the component.

19
00:01:14.720 --> 00:01:20.710
n plus 1 and then the same down here,

20
00:01:20.710 --> 00:01:23.810
update n minus 1.

21
00:01:23.810 --> 00:01:26.562
And then set zero.

22
00:01:28.891 --> 00:01:33.103
And then inside our app.svelte,
we're already referencing those functions.

23
00:01:38.070 --> 00:01:39.865
And that works exactly
as you would expect.

24
00:01:45.707 --> 00:01:52.062
Just as you combined two component state,
you can also bind two store values.

25
00:01:52.062 --> 00:01:56.916
So here we have a store
representing a string,

26
00:01:56.916 --> 00:02:00.031
which is the name of the user.

27
00:02:00.031 --> 00:02:03.474
And then we have another store that
is derived from that store value.

28
00:02:03.474 --> 00:02:08.287
So we want to do is wire up this input
to the value of the name store so

29
00:02:08.287 --> 00:02:13.380
that the greeting is automatically
derived whenever that changes.

30
00:02:14.970 --> 00:02:19.420
So the h1 is displaying the derived value.

31
00:02:19.420 --> 00:02:22.946
The input is displaying the input value.

32
00:02:22.946 --> 00:02:25.167
And I'm going to change
that into a binding,

33
00:02:25.167 --> 00:02:27.743
just to show that it doesn't
do anything right now.

34
00:02:27.743 --> 00:02:37.145
Find current value, And
it works exactly as a regular input would.

35
00:02:42.437 --> 00:02:46.987
Now we can also change the value
of stores inside components

36
00:02:46.987 --> 00:02:51.085
either inside the script block or
inside the markup.

37
00:02:51.085 --> 00:02:54.735
So we can add a button here.

38
00:03:00.150 --> 00:03:02.244
Give it an event handler
every time we click it.

39
00:03:10.558 --> 00:03:14.777
We're gonna change the value
of name directly and

40
00:03:14.777 --> 00:03:19.907
then now every time we press
that the store value is updated.

41
00:03:19.907 --> 00:03:26.327
This is the same as doing this.

42
00:03:29.476 --> 00:03:30.690
But it's just a little bit neater.

