WEBVTT

1
00:00:00.300 --> 00:00:03.720
So when you're building a user interface,
something that you'll need to do quite

2
00:00:03.720 --> 00:00:08.670
often is have elements appear and
disappear in a more graceful

3
00:00:08.670 --> 00:00:12.810
way than if they just got rendered to the
DOM and then got yanked out of the DOM.

4
00:00:12.810 --> 00:00:15.070
Because that can be jarring for users.

5
00:00:15.070 --> 00:00:17.920
And so right now in this application,
we have a checkbox

6
00:00:17.920 --> 00:00:22.040
that is linked to whether or
not this paragraph element gets rendered.

7
00:00:22.040 --> 00:00:25.110
If we toggle it, it appears and
then it disappears.

8
00:00:25.110 --> 00:00:29.370
What we want to happen is for
that element to fade in and fade out.

9
00:00:29.370 --> 00:00:32.520
And we can do that in Svelte
with an element transition.

10
00:00:33.740 --> 00:00:38.682
First we need to import the transition
from svelte/transition, and

11
00:00:38.682 --> 00:00:40.279
that looks like this.

12
00:00:43.602 --> 00:00:48.363
And then all we need to do is add
the transition directive to our paragraph

13
00:00:48.363 --> 00:00:49.074
element.

14
00:00:52.155 --> 00:00:54.991
And now when we toggle
the value of visible,

15
00:00:54.991 --> 00:00:59.340
we can see that the element
gracefully fades in and fades out.

16
00:00:59.340 --> 00:01:03.037
It won't get removed from the DOM
until the outro has completed.

17
00:01:07.021 --> 00:01:10.300
And we can parameterize
these transitions as well.

18
00:01:10.300 --> 00:01:13.482
Let's turn our fade transition
into a fly transition.

19
00:01:18.572 --> 00:01:19.612
And give it some options.

20
00:01:21.980 --> 00:01:27.923
We'll give it a y value and a duration.

21
00:01:27.923 --> 00:01:30.743
Now, when I toggle this checkbox,

22
00:01:30.743 --> 00:01:34.790
the element is gonna fly in and
it's gonna fly out.

23
00:01:36.820 --> 00:01:40.410
Now you'll notice that as I'm
interacting with this checkbox,

24
00:01:40.410 --> 00:01:42.180
the transition is reversible.

25
00:01:42.180 --> 00:01:47.400
If we change the value of visible while
the element is introing or outroing,

26
00:01:47.400 --> 00:01:53.120
it won't restart it, it'll gracefully
pick up from where it left off.

27
00:01:53.120 --> 00:02:00.008
And so in that way, we're able to build
fairly robust but slick user interfaces.

28
00:02:00.008 --> 00:02:03.142
And that would be pretty difficult to
do if you were writing it by hand.

29
00:02:03.142 --> 00:02:06.802
Because there's a lot of really complex
state that you need to keep track of.

30
00:02:10.883 --> 00:02:14.160
We can also have different intro and
outro transitions.

31
00:02:14.160 --> 00:02:16.220
So the transition is bidirectional, but

32
00:02:16.220 --> 00:02:20.330
we might wanna have something
that flies in and then fades out.

33
00:02:20.330 --> 00:02:24.546
So I'll add fade back into our component.

34
00:02:24.546 --> 00:02:30.066
And then we'll turn this transition
into an in, and then we'll add an out.

35
00:02:31.734 --> 00:02:35.364
And then we'll just pass
it the fade function.

36
00:02:35.364 --> 00:02:38.575
Flies in, Fades out.

37
00:02:43.303 --> 00:02:47.827
And again,
if you fade out while it's flying in,

38
00:02:47.827 --> 00:02:54.098
it'll combine those transitions so
that you get a graceful effect.

39
00:02:54.098 --> 00:02:58.108
If you make it visible while it's fading
out, then it will have to restart,

40
00:02:58.108 --> 00:03:02.070
because it doesn't have a way of
composing those transitions in reverse.

41
00:03:02.070 --> 00:03:04.302
But that's a pretty rare situation.

42
00:03:08.951 --> 00:03:10.764
So there's a bunch of
built in transitions.

43
00:03:10.764 --> 00:03:14.989
We have fade, fly, scale,
slide, and they all do more or

44
00:03:14.989 --> 00:03:17.334
less what their name suggests.

45
00:03:17.334 --> 00:03:21.010
But we can also create our
own custom transitions.

46
00:03:21.010 --> 00:03:23.190
So this is what the transition
function looks like.

47
00:03:23.190 --> 00:03:27.050
This is how the fade
transition is implemented.

48
00:03:27.050 --> 00:03:31.000
The first argument of the function is
the mode that is gonna be transitioned.

49
00:03:31.000 --> 00:03:35.470
The second is the set of
options that were passed in.

50
00:03:35.470 --> 00:03:39.975
And then the body of the function does
whatever calculation that it needs to to

51
00:03:39.975 --> 00:03:43.113
get information about
the current state of the node.

52
00:03:43.113 --> 00:03:46.472
Ie, what it's gonna look like
in its non-transitioning state.

53
00:03:46.472 --> 00:03:51.402
And then it returns an object containing
some information that Svelte will use to

54
00:03:51.402 --> 00:03:53.730
construct and apply the transition.

55
00:03:54.990 --> 00:03:58.940
So we're gonna return a delay value and
a duration value,

56
00:03:58.940 --> 00:04:01.320
which basically are basically
gonna be whatever gets passed in.

57
00:04:03.200 --> 00:04:08.190
And here is the most interesting part,
the CSS property is a method

58
00:04:08.190 --> 00:04:13.110
that takes in a t value,
which is a value between 0 and 1, and

59
00:04:13.110 --> 00:04:17.555
returns some CSS that is
calculated from that t value.

60
00:04:17.555 --> 00:04:19.795
0 means that the element
is fully off screen,

61
00:04:19.795 --> 00:04:23.140
1 means that the element
is fully rendered.

62
00:04:23.140 --> 00:04:28.080
And so in between there,
we can see how you can interpolate in

63
00:04:28.080 --> 00:04:32.400
such a way that you generate
the illusion of a smooth transition.

64
00:04:32.400 --> 00:04:37.990
And so the fade transition is literally
just the t value between 0 and

65
00:04:37.990 --> 00:04:41.500
1 multiplied by the element's
default opacity.

66
00:04:41.500 --> 00:04:44.919
So if you start with an element
that has an opacity of 0.5,

67
00:04:44.919 --> 00:04:49.693
then halfway through the transition,
the opacity of the element will be 0.25.

68
00:04:52.900 --> 00:04:56.702
You can also return other things,
including a tick function,

69
00:04:56.702 --> 00:05:00.310
which will execute
JavaScript on each frame.

70
00:05:00.310 --> 00:05:01.490
But most of the time,

71
00:05:01.490 --> 00:05:06.970
we'll be using CSS transitions
because it's better for performance.

72
00:05:06.970 --> 00:05:10.550
Very often when you're doing
motion in JavaScript applications,

73
00:05:10.550 --> 00:05:13.010
what you'll find is that
animation libraries

74
00:05:13.010 --> 00:05:16.770
do a lot of the work inside
a requestAnimationFrame handler.

75
00:05:16.770 --> 00:05:19.740
And that's good, it gives you
a lot of flexibility and power.

76
00:05:19.740 --> 00:05:22.970
But it means that if any work
happens that blocks the main thread,

77
00:05:22.970 --> 00:05:26.320
that requestAnimationFrame handler
is also gonna get blocked.

78
00:05:26.320 --> 00:05:30.260
And what that means is that your
animation is gonna be blocking.

79
00:05:30.260 --> 00:05:32.573
If you can do things using CSS instead,

80
00:05:32.573 --> 00:05:36.930
then the CSS animation will often
happen completely off the main thread.

81
00:05:36.930 --> 00:05:40.394
And so it will be uninterrupted by
any work that is happening elsewhere

82
00:05:40.394 --> 00:05:41.460
in the application.

83
00:05:43.050 --> 00:05:47.860
And so what it does is it simulates
running the transition ahead of time.

84
00:05:47.860 --> 00:05:49.915
As soon as we begin the transition,

85
00:05:49.915 --> 00:05:56.240
Svelte will call that CSS method with all
of the values between 0 and 1 immediately.

86
00:05:56.240 --> 00:06:00.920
So call it with t equals 0,
t equals 0.1, t equals to 0.2,

87
00:06:00.920 --> 00:06:03.480
and everything all the way up to 1.

88
00:06:03.480 --> 00:06:05.680
It will collect the return values, and

89
00:06:05.680 --> 00:06:09.560
it will turn it into a CSS animation
that looks a little bit like this.

90
00:06:11.320 --> 00:06:15.860
And that's how we can tell the element
that it needs to fade in and out.

91
00:06:15.860 --> 00:06:18.169
It's a little bit boring though,
we can get a lot more ambitious.

92
00:06:19.880 --> 00:06:25.752
So now we're gonna create a custom
transition that we're gonna call spin.

93
00:06:25.752 --> 00:06:27.635
And we've got some
boilerplate here already, and

94
00:06:27.635 --> 00:06:29.010
now we've just gotta implement it.

95
00:06:29.010 --> 00:06:37.746
And that spin transition is being
applied to this element down here.

96
00:06:49.537 --> 00:06:51.710
I'm gonna add an easing function.

97
00:06:53.912 --> 00:06:55.212
Use the elasticOut.

98
00:07:02.952 --> 00:07:05.808
And again, that's gonna take
the value between 0 and 1 and

99
00:07:05.808 --> 00:07:07.720
give us another value on the same scale.

100
00:07:18.368 --> 00:07:23.313
And we're gonna add a transform,
which is gonna

101
00:07:23.313 --> 00:07:28.143
change the scale and
the rotation of the element

102
00:07:43.291 --> 00:07:44.733
And we're also gonna change the color.

103
00:07:53.612 --> 00:07:58.442
I'm using HSL colors because it's
really convenient to be able to

104
00:07:58.442 --> 00:08:03.547
interpolate between different hues
without changing other things.

105
00:08:03.547 --> 00:08:08.624
It's a much better color space to work in
if you're doing interpolation than RGB.

106
00:08:12.847 --> 00:08:16.909
So we need to turn it into an integer,
this is what this double tilde means.

107
00:08:16.909 --> 00:08:22.770
I'm just gonna multiply t, which is
from 0 to 1, multiply that by 360,

108
00:08:22.770 --> 00:08:28.104
because that's the color scale,
it's a 360 degree color wheel.

109
00:08:29.901 --> 00:08:31.190
That's the hue value.

110
00:08:32.310 --> 00:08:39.701
The saturation is gonna be,
The minimum of 100 and

111
00:08:39.701 --> 00:08:44.822
this value,
don't need to know too much about,

112
00:08:47.483 --> 00:08:51.246
What that's doing,
we'll just see the result in a second.

113
00:08:58.480 --> 00:09:04.929
Okay, and if I've done this correctly,
then now when I make this visible,

114
00:09:08.003 --> 00:09:12.270
It's gonna spin in and
change color in a gratuitous fashion.

115
00:09:13.910 --> 00:09:15.856
And again, this is all happening with CSS,

116
00:09:15.856 --> 00:09:18.071
even though we've got a lot
of very custom logic.

117
00:09:18.071 --> 00:09:22.224
And we're using an easing function, the
elasticOut easing function that you don't

118
00:09:22.224 --> 00:09:24.310
get when you're writing CSS animations.

119
00:09:25.440 --> 00:09:28.960
We're able to do all of this
logic-driven animation in a way that

120
00:09:28.960 --> 00:09:31.740
runs as a CSS animation.

121
00:09:31.740 --> 00:09:36.750
And that's high performance and
it's also kind to your phone's battery,

122
00:09:36.750 --> 00:09:38.920
more so than using
a requestAnimationFrame handler.

