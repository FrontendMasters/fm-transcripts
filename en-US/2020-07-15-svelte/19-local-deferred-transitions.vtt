WEBVTT

1
00:00:00.000 --> 00:00:04.385
There's one final piece of transitions,
which is we can distinguish

2
00:00:04.385 --> 00:00:08.636
between what we call global transitions,
and local transitions.

3
00:00:08.636 --> 00:00:14.460
Ordinarily, the transition will play
whenever an element is created,

4
00:00:14.460 --> 00:00:15.708
or destroyed.

5
00:00:15.708 --> 00:00:19.131
Regardless, of the state change that
led to that element being created, or

6
00:00:19.131 --> 00:00:19.726
destroyed.

7
00:00:19.726 --> 00:00:24.465
So for example, we want these

8
00:00:24.465 --> 00:00:30.343
transitions to apply when the length

9
00:00:30.343 --> 00:00:34.520
of this block is changed.

10
00:00:34.520 --> 00:00:39.665
But if we toggle, whether the list as a
whole is shown, we don't want this effect.

11
00:00:39.665 --> 00:00:43.156
We want the list to vanish
altogether in an instant, and

12
00:00:43.156 --> 00:00:45.026
then come back in an instant.

13
00:00:45.026 --> 00:00:49.366
And the way that we can do that
is by taking this mark up, and

14
00:00:49.366 --> 00:00:51.858
making this a local transition.

15
00:00:51.858 --> 00:00:54.665
Which means that it will only apply,

16
00:00:54.665 --> 00:00:58.839
when this is the thing that
changed as opposed to this.

17
00:00:58.839 --> 00:01:02.673
And just like with event modifiers,

18
00:01:02.673 --> 00:01:07.873
we modify our transition
by adding a pipe like so.

19
00:01:07.873 --> 00:01:12.264
And adding the name of the modifier,
which is local.

20
00:01:12.264 --> 00:01:17.367
So, now this is going to work
the same way as before but,

21
00:01:17.367 --> 00:01:23.571
when we toggle this the elements vanish,
and reappear instantly.

22
00:01:23.571 --> 00:01:28.108
Now before, when we implemented
our own transition function,

23
00:01:28.108 --> 00:01:33.060
we returned an object containing
the transition options directly.

24
00:01:33.060 --> 00:01:35.650
But there are some situations,
in which you don't yet

25
00:01:35.650 --> 00:01:39.040
have the information that you need,
to return that object.

26
00:01:39.040 --> 00:01:42.120
An example would be,
if two transitions are happening and

27
00:01:42.120 --> 00:01:44.510
they need to be aware of each other,
in some way.

28
00:01:44.510 --> 00:01:48.633
So what you can do, is you can return
instead of the options object you,

29
00:01:48.633 --> 00:01:52.093
can return a promise that
resolves to that option objects.

30
00:01:52.093 --> 00:01:57.853
So an example of why you would need this
is, if you have a set of elements, and

31
00:01:57.853 --> 00:02:04.063
you want them to look as though they're
transitioning from one side to the other,

32
00:02:04.063 --> 00:02:08.206
Instead of just appearing and
disappearing, right?

33
00:02:08.206 --> 00:02:13.070
So, we want these two dues to move from
the to do list, to the done list, and

34
00:02:13.070 --> 00:02:16.935
then back again in a graceful
manner that more Accurately,

35
00:02:16.935 --> 00:02:20.049
reflects how objects
behave in the real world.

36
00:02:20.049 --> 00:02:24.236
And is therefore,
a nicer experience for users, and

37
00:02:24.236 --> 00:02:30.763
the way that we do this in spell, is with
something called the crossfade function.

38
00:02:30.763 --> 00:02:35.295
Crossfade returns a pair of transitions
that talk to each other, so

39
00:02:35.295 --> 00:02:40.791
returns an array, and we're gonna destruct
that array into send, and receive.

40
00:02:40.791 --> 00:02:46.662
And this is quite involved, so I'm not
gonna walk through all the code but,

41
00:02:46.662 --> 00:02:50.078
we're just gonna go through the tutorial.

42
00:02:50.078 --> 00:02:54.511
Find the label element on line 65, and
add those send, and receive transitions.

43
00:02:54.511 --> 00:02:57.361
Down here, lines 65.

44
00:03:04.189 --> 00:03:06.101
On intransition we're gonna receive.

45
00:03:10.164 --> 00:03:15.284
And we're gonna pass it the key, which
is gonna allow spell to get the send,

46
00:03:15.284 --> 00:03:18.173
and receive the correspond to each other.

47
00:03:32.287 --> 00:03:39.029
But then we're gonna do the same thing for
the other label element, down here.

48
00:03:42.034 --> 00:03:44.968
This is representing the two
dues that have already,

49
00:03:44.968 --> 00:03:47.780
been done which is the list
of two dues on the right.

50
00:03:51.395 --> 00:03:56.250
And now if I've set this up correctly,
when I toggle one of these items,

51
00:03:56.250 --> 00:04:00.005
it's gonna move gracefully
from one side to the other.

52
00:04:07.586 --> 00:04:13.769
That's pretty good, but it's not perfect
because when we toggle buy some milk for

53
00:04:13.769 --> 00:04:20.056
example, even though that to do will move
smoothly, to the bottom of the to do list.

54
00:04:20.056 --> 00:04:25.380
The other three items are gonna jump
into their new place, which isn't ideal.

55
00:04:25.380 --> 00:04:27.200
So we're gonna fix that
in the next chapter.

