WEBVTT

1
00:00:00.000 --> 00:00:04.418
Here we have the Eliza chatbot.

2
00:00:13.698 --> 00:00:17.586
If I'm gonna make that a little bit
shorter so that you see it sooner.

3
00:00:24.292 --> 00:00:29.717
You can see Eliza is now talking to us
below the screen, and I have to scroll it,

4
00:00:34.281 --> 00:00:36.394
Every time I get a new response from her.

5
00:00:36.394 --> 00:00:39.180
And that's really not
a good user experience.

6
00:00:39.180 --> 00:00:43.554
So we're gonna use beforeUpdate and
afterUpdate to make sure that

7
00:00:43.554 --> 00:00:48.413
the scroll position is kept current
with the contents of the chat window.

8
00:00:48.413 --> 00:00:53.964
So first thing we're gonna do is
create a new value called autoscroll.

9
00:00:53.964 --> 00:01:01.599
And this is gonna reflect whether the chat
is currently already scrolled up.

10
00:01:01.599 --> 00:01:06.031
Because what we don't want is for
the scroll to happen

11
00:01:06.031 --> 00:01:10.972
automatically if you're not
the latest point in the chat.

12
00:01:10.972 --> 00:01:15.017
So in here, in the beforeUpdate function,
we're gonna determine whether or

13
00:01:15.017 --> 00:01:16.500
not that is in fact the case.

14
00:01:21.439 --> 00:01:24.138
I'm just gonna copy and
paste the whole thing over, and

15
00:01:24.138 --> 00:01:25.986
then we'll talk about what's in it.

16
00:01:25.986 --> 00:01:28.136
So if we have a reference to the div,

17
00:01:28.136 --> 00:01:31.162
because this function will
run before first run.

18
00:01:31.162 --> 00:01:33.519
So we need to check that
div does in fact exist.

19
00:01:33.519 --> 00:01:38.586
Then if the combined value of the div's
offset height and its scroll top

20
00:01:38.586 --> 00:01:44.415
is greater than the scroll height of the
element minus a little bit of a threshold,

21
00:01:44.415 --> 00:01:49.336
20 pixels, that is, then we consider
it to be in autoscroll mode.

22
00:01:49.336 --> 00:01:52.339
So if we're not at the end of the chat,
we're not in autoscroll.

23
00:01:52.339 --> 00:01:55.542
But if we are at the end of the chat,
then we want the autoscroll to happen.

24
00:01:55.542 --> 00:02:00.330
Then once the update has happened,
assuming that autoscroll is enabled,

25
00:02:00.330 --> 00:02:03.989
then we wanna scroll the chat
window right to the bottom.

26
00:02:03.989 --> 00:02:06.937
So again, just gonna copy that into here.

27
00:02:24.505 --> 00:02:26.059
And then it scrolls as the chat continues.

28
00:02:30.455 --> 00:02:33.846
There's one more life cycle function that,
again, you're not gonna use very often.

29
00:02:33.846 --> 00:02:37.402
But when you do need it,
it's pretty handy, and it's called tick.

30
00:02:37.402 --> 00:02:42.033
And it's unlike onmount, ondestroy,
beforeUpdate, and afterUpdate

31
00:02:42.033 --> 00:02:46.976
in that you don't just run it at the start
of the component's instantiation.

32
00:02:46.976 --> 00:02:50.469
You can run it anytime, you don't need
to call it inside the script block,

33
00:02:50.469 --> 00:02:52.970
you can call it inside event handlers,
for example.

34
00:02:52.970 --> 00:02:57.605
What it does is, it returns a promise that
resolves as soon as any pending state

35
00:02:57.605 --> 00:02:59.867
changes have been applied to the DOM.

36
00:02:59.867 --> 00:03:03.090
Or if there aren't any pending state
changes, it'll resolve immediately.

37
00:03:03.090 --> 00:03:07.751
And the reason that that's necessary
is that when you update component

38
00:03:07.751 --> 00:03:12.655
state in Svelte, it doesn't immediately
update the contents of the DOM.

39
00:03:12.655 --> 00:03:14.992
It batches changes together for
the sake of efficiency.

40
00:03:14.992 --> 00:03:20.672
In that way, it's gonna wait
until the end of the event loop.

41
00:03:20.672 --> 00:03:23.324
So if you have a value that
changes on this line and

42
00:03:23.324 --> 00:03:27.788
another value that changes on this line,
it]s not gonna do a DOM update in between

43
00:03:27.788 --> 00:03:30.721
them because that would be
a little bit inefficient.

44
00:03:30.721 --> 00:03:35.473
So it's gonna wait until the next
microtask, and it's after that microtask

45
00:03:35.473 --> 00:03:39.139
that we wanna wait for,
in order to do any follow-up work.

46
00:03:39.139 --> 00:03:42.772
And I'm gonna give you an example
of what I mean by that.

47
00:03:42.772 --> 00:03:48.692
In this text area here,
we can toggle whether or

48
00:03:48.692 --> 00:03:54.470
not the selection is uppercased,
like that.

49
00:03:54.470 --> 00:04:00.095
And every time I press it,
the selection gets cleared out,

50
00:04:00.095 --> 00:04:05.846
because that's just what happens
with text area elements.

51
00:04:05.846 --> 00:04:10.538
When you change the value, it's not
gonna preserve the previous selection.

52
00:04:14.029 --> 00:04:20.173
But we can fix that because the tick
handler is gonna give us an opportunity to

53
00:04:20.173 --> 00:04:25.840
reapply the selection after the value
has been put into the text area.

54
00:04:28.169 --> 00:04:34.871
So I'm gonna import that from Svelte,
import tick from svelte.

55
00:04:37.753 --> 00:04:43.348
And then inside this keydown handler
which is applied to the text area,

56
00:04:43.348 --> 00:04:48.024
we're screening out any events
that aren't Tab presses.

57
00:04:48.024 --> 00:04:52.545
If it is a Tab,
we're preventing the event default,

58
00:04:52.545 --> 00:04:58.384
because otherwise, we would send
the focus to a different element.

59
00:04:58.384 --> 00:05:03.630
And we're grabbing the selection state
of the text area, and then we're

60
00:05:03.630 --> 00:05:08.968
figuring out what the replacement text for
the entire text area should be.

61
00:05:08.968 --> 00:05:12.071
So we're taking everything
before the selection,

62
00:05:12.071 --> 00:05:15.963
keeping everything inside the selection,
inverting the case.

63
00:05:15.963 --> 00:05:18.370
And then taking everything
from after the selection,

64
00:05:18.370 --> 00:05:21.310
and then we're just putting all
that back into the text variable.

65
00:05:24.190 --> 00:05:28.901
But this bit here where we're reapplying
the selection start and the selection end,

66
00:05:28.901 --> 00:05:30.155
that's not working.

67
00:05:30.155 --> 00:05:35.984
Because it applies that, and
then the DOM updates, because this and

68
00:05:35.984 --> 00:05:41.020
this happen before the DOM is
affected by the state change.

69
00:05:41.020 --> 00:05:45.384
So I'm gonna replace this
line here with an await tick.

70
00:05:45.384 --> 00:05:52.800
And now when I select this text and toggle
it, it's gonna preserve my selection.

71
00:05:52.800 --> 00:05:54.130
So I can toggle it back and
forth like that.

72
00:05:55.260 --> 00:05:59.922
So this is pretty niche, this isn't a
thing that you're gonna need to do a lot.

73
00:05:59.922 --> 00:06:02.358
But sometimes you will, and
you'll be thankful that it exists.

74
00:06:04.427 --> 00:06:08.190
&gt;&gt; So tick is blocking the DOM for
you to update,

75
00:06:08.190 --> 00:06:13.449
is that what's happening, and
then it updates the DOM again?

76
00:06:13.449 --> 00:06:16.290
&gt;&gt; No, so what's happening is,

77
00:06:16.290 --> 00:06:22.207
when there's a state change pending,
a promise is generated.

78
00:06:22.207 --> 00:06:26.954
As soon as a state change happens
inside your Svelte application,

79
00:06:26.954 --> 00:06:32.716
a promise is generated that represents
the end of the event loop, essentially,

80
00:06:32.716 --> 00:06:37.482
and then any other work happens,
and then that promise resolves.

81
00:06:37.482 --> 00:06:42.766
And it's that promise that you're getting
a reference to when you call tick.

82
00:06:42.766 --> 00:06:48.047
So it's not actually affecting anything,
it's literally just a timing thing.

83
00:06:48.047 --> 00:06:52.267
It's just waiting for
the end of the update cycle to happen so

84
00:06:52.267 --> 00:06:54.845
that you can do any follow-up work.

85
00:06:54.845 --> 00:06:57.716
&gt;&gt; So
is it like setting a timeout 0 type thing?

86
00:06:57.716 --> 00:07:03.175
&gt;&gt; It's kind of like a setTimeout 0,
except that setTimeout

87
00:07:03.175 --> 00:07:08.095
of 0 visibly happens after
the work has taken place.

88
00:07:08.095 --> 00:07:11.797
So in that previous example,

89
00:07:11.797 --> 00:07:17.277
instead of await tick, we had setTimeout,

90
00:07:17.277 --> 00:07:23.188
and then, Did the work there, like so,

91
00:07:23.188 --> 00:07:28.358
setTimeout 0, then now what we're
probably gonna see is, actually,

92
00:07:28.358 --> 00:07:34.312
you can just kinda see it on some of these
Tabs, you can see it flickering slightly.

93
00:07:34.312 --> 00:07:39.869
I can make it more visible by making
that 100 milliseconds instead.

94
00:07:39.869 --> 00:07:41.194
Do you see that?

95
00:07:41.194 --> 00:07:43.710
So you will get this flickering
effect with setTimeout.

96
00:07:43.710 --> 00:07:48.319
But promises, because of how they work
in the event loop and everything,

97
00:07:51.239 --> 00:07:55.230
The promise resolves before
the browser repaints the DOM.

98
00:07:55.230 --> 00:07:59.244
So you can do everything in a way that
isn't gonna cause flickering and whatnot.

99
00:07:59.244 --> 00:08:06.353
&gt;&gt; I had a question about how many
magical type of bindings you have.

100
00:08:06.353 --> 00:08:10.988
Cuz it seems like the two most
magical are the media element

101
00:08:10.988 --> 00:08:14.400
working on setTimeout instead of values.

102
00:08:14.400 --> 00:08:18.924
And then the clientx and
clienty, injecting an iframe.

103
00:08:18.924 --> 00:08:23.250
Are there third-party plugins and
stuff that do more magical things?

104
00:08:23.250 --> 00:08:26.029
&gt;&gt; No, there's no binding plugins.

105
00:08:26.029 --> 00:08:30.926
It's all gotta be baked into
the framework because the compiler needs

106
00:08:30.926 --> 00:08:32.262
to understand it.

107
00:08:32.262 --> 00:08:36.401
We do have some others,
which we'll come on to later.

108
00:08:36.401 --> 00:08:39.430
We have window bindings, for example,
you can bind to the width and

109
00:08:39.430 --> 00:08:41.520
height of the window and
the scroll position.

110
00:08:42.580 --> 00:08:46.220
And we wanna add more,
we wanna add scroll bindings for

111
00:08:46.220 --> 00:08:49.000
arbitrary elements and stuff like that.

112
00:08:51.350 --> 00:08:53.730
Anything that's useful,
because we're a compiler, we can do that.

113
00:08:53.730 --> 00:08:58.773
If there's something that is useful to one
person, then we can include it because

114
00:08:58.773 --> 00:09:04.051
it's only gonna get included in their
application, rather than everyone else's.

115
00:09:04.051 --> 00:09:08.122
&gt;&gt; If you use it, then the code
compiles or gets added for it.

116
00:09:08.122 --> 00:09:10.872
If you don't use it, it doesn't
affect the user of the framework.

117
00:09:10.872 --> 00:09:11.779
&gt;&gt; Yeah.

118
00:09:11.779 --> 00:09:12.279
&gt;&gt; Really cool.

