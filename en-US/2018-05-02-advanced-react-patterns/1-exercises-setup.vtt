WEBVTT

1
00:00:00.160 --> 00:00:00.680
&gt;&gt; Kent C. Dodds: Okay, great.

2
00:00:02.220 --> 00:00:05.360
So I just wanted to show
you this project first.

3
00:00:05.360 --> 00:00:11.580
Because this is where I learned most of
these patterns, was in building downshift.

4
00:00:12.610 --> 00:00:15.260
How many people have heard
of downshift before?

5
00:00:15.260 --> 00:00:15.900
Sweet.

6
00:00:15.900 --> 00:00:17.780
How many people have used downshift?

7
00:00:18.850 --> 00:00:21.820
Okay, well, maybe people
online are raising their hand.

8
00:00:21.820 --> 00:00:23.140
That makes me feel good, thank you.

9
00:00:23.140 --> 00:00:27.705
Yeah, so downshift,
it's a primitive component.

10
00:00:27.705 --> 00:00:31.856
It allows you to build highly accessible,

11
00:00:31.856 --> 00:00:36.370
very flexible autocomplete components.

12
00:00:36.370 --> 00:00:40.197
So let's see, I've got a example, here,

13
00:00:40.197 --> 00:00:45.621
we'll have to find the examples.
&gt;&gt; Kent C. Dodds: Yeah,

14
00:00:45.621 --> 00:00:50.464
so here's the simplest
form of an autocomplete or

15
00:00:50.464 --> 00:00:54.630
a combo box component but with downshift.

16
00:00:55.665 --> 00:00:59.030
I say apple and I can highlight that,
I can select it.

17
00:00:59.030 --> 00:01:03.263
So yeah,
that's the basic idea behind downshift.

18
00:01:03.263 --> 00:01:06.887
But what makes it so nice is,

19
00:01:06.887 --> 00:01:13.400
I don't wanna compare
this to other solutions.

20
00:01:13.400 --> 00:01:18.371
But just thinking in general about
what we had to do before downshift,

21
00:01:18.371 --> 00:01:21.405
before flexible components like this is,

22
00:01:21.405 --> 00:01:26.732
you'd have to fill up the prompts with
about a million different options.

23
00:01:26.732 --> 00:01:28.630
Because you'd have to say, okay,

24
00:01:28.630 --> 00:01:32.695
I wanna be able to render the menu above
the input, not below it or beside it.

25
00:01:32.695 --> 00:01:38.227
Or I want to render a little icon
inside the input like a flag or

26
00:01:38.227 --> 00:01:40.750
something like that.

27
00:01:40.750 --> 00:01:43.930
I want lots and lots of options.

28
00:01:43.930 --> 00:01:47.890
And then the documentation
say here's the list of class

29
00:01:47.890 --> 00:01:51.580
names that you can use to style this
stuff that I'm rendering for you.

30
00:01:51.580 --> 00:01:54.548
So that you can apply
your own custom styling.

31
00:01:54.548 --> 00:01:57.550
And so
that's what drove me to build downshift.

32
00:01:57.550 --> 00:02:02.545
Because I had several use cases that were
different enough that it was just really

33
00:02:02.545 --> 00:02:07.980
complicated to have a single solution
that would cater to all those used cases.

34
00:02:07.980 --> 00:02:10.290
And so I started building downshift.

35
00:02:10.290 --> 00:02:14.057
I actually started out building it as
a collection of compound components that

36
00:02:14.057 --> 00:02:15.089
we'll learn about.

37
00:02:15.089 --> 00:02:21.237
And then I made one of those compound
components be a render prompt component.

38
00:02:21.237 --> 00:02:24.760
And then I realize that I can actually
just make the whole thing a render prompt.

39
00:02:24.760 --> 00:02:30.025
And just made a whole lot
of complexity melt away.

40
00:02:30.025 --> 00:02:34.760
And so there are use cases for
compound components.

41
00:02:34.760 --> 00:02:38.150
Very strong use cases for render props,
also for higher order components.

42
00:02:38.150 --> 00:02:40.700
So all of these things that
we're gonna be talking about

43
00:02:40.700 --> 00:02:44.700
are things that I've learned in practice
building components like these.

44
00:02:44.700 --> 00:02:49.680
And it's not just for
these highly reusable components either.

45
00:02:49.680 --> 00:02:54.760
These patterns that we're talking
about can also be applied in your

46
00:02:54.760 --> 00:03:00.320
normal one use components as
a good way to separate logic and

47
00:03:02.220 --> 00:03:07.360
your UI, the way something acts and
the way something looks.

48
00:03:07.360 --> 00:03:10.560
So these patterns will help you with that.

49
00:03:10.560 --> 00:03:11.790
So I'm really excited about that.

50
00:03:11.790 --> 00:03:14.880
I'm really so grateful to PayPal for

51
00:03:14.880 --> 00:03:18.710
giving me the opportunity to
build this and open source it so

52
00:03:18.710 --> 00:03:21.770
that I could learn all these patterns and
share those with you.

53
00:03:23.330 --> 00:03:24.560
So check that out if you haven't.

54
00:03:25.780 --> 00:03:27.170
My slides are done.

55
00:03:27.170 --> 00:03:28.910
Next slide is a thank you.

56
00:03:28.910 --> 00:03:33.586
So from here on out, we are in the code.

57
00:03:33.586 --> 00:03:38.657
So if you go to your project
that you have set up locally, or

58
00:03:38.657 --> 00:03:43.832
in CodeSandbox,
let me just show you around really quick,

59
00:03:43.832 --> 00:03:48.404
and then we'll let you loose
on the first exercise.

60
00:03:48.404 --> 00:03:50.500
Sound good?

61
00:03:50.500 --> 00:03:52.360
Okay, cool.

62
00:03:52.360 --> 00:03:57.149
So this is actually a standard
create React application.

63
00:03:57.149 --> 00:03:58.140
It's mostly standard.

64
00:03:58.140 --> 00:04:03.103
It's actually using an alpha version
of React scripts because I like living

65
00:04:03.103 --> 00:04:04.440
on the edge.

66
00:04:04.440 --> 00:04:08.573
I don't know, it works so I use it.

67
00:04:08.573 --> 00:04:12.128
But there are a couple scripts
that we're gonna be using.

68
00:04:12.128 --> 00:04:14.479
Let's go ahead and
start out with the start script,

69
00:04:14.479 --> 00:04:16.350
just to see what the app looks like.

70
00:04:16.350 --> 00:04:20.831
npm run start, or npm start.

71
00:04:20.831 --> 00:04:23.682
Actually npm start is a command,
it allows you to start a package on npm.

72
00:04:23.682 --> 00:04:27.760
It's kinda fun.

73
00:04:27.760 --> 00:04:28.929
I've started a couple of those.

74
00:04:29.980 --> 00:04:31.255
Okay, so this is our app.

75
00:04:31.255 --> 00:04:32.408
You should have this pulled up.

76
00:04:32.408 --> 00:04:37.220
If it isn't working for you,
then ask me during the exercise.

77
00:04:37.220 --> 00:04:39.730
We can work through that.

78
00:04:39.730 --> 00:04:43.725
But yeah, each one of the exercises
has its own exercise page.

79
00:04:43.725 --> 00:04:45.787
And it has your Exercise and
the Final Version.

80
00:04:45.787 --> 00:04:52.416
If you click on this link,
then it'll take you to that exercise page.

81
00:04:52.416 --> 00:04:59.300
So you can preview the way things are
looking as you are working through them.

82
00:04:59.300 --> 00:05:02.910
If you want to play around with it and
see how things are working,

83
00:05:02.910 --> 00:05:05.770
you can also,
the final version has the same thing.

84
00:05:05.770 --> 00:05:08.480
If you look at the URL,
it should actually be pretty intuitive

85
00:05:09.540 --> 00:05:14.350
how to get to any given component page.

86
00:05:14.350 --> 00:05:18.870
Sometimes you'll come across
a component like number six here,

87
00:05:18.870 --> 00:05:21.500
where you get a big error
that blows up in your face.

88
00:05:22.620 --> 00:05:25.080
Here you can just click on the x, and

89
00:05:25.080 --> 00:05:27.060
you can still play around
with the final version.

90
00:05:27.060 --> 00:05:29.190
And then you could go to
the final version page.

91
00:05:29.190 --> 00:05:30.680
The reason that it's blowing up,

92
00:05:30.680 --> 00:05:33.830
that's totally intentional because
you haven't done your job yet.

93
00:05:33.830 --> 00:05:40.360
So you need to fix the codes so
that doesn't blow up.

94
00:05:41.940 --> 00:05:44.440
There was something else I
was gonna mention about that.

95
00:05:44.440 --> 00:05:47.240
Yeah, on CodeSandbox,
you can't actually click that x.

96
00:05:47.240 --> 00:05:50.820
That x doesn't work, so you'll have
to click the refresh button and

97
00:05:50.820 --> 00:05:52.770
then navigate somewhere else.

98
00:05:52.770 --> 00:05:57.827
But yeah, that's pretty much
all there is to the app.

99
00:05:57.827 --> 00:06:01.613
This should hopefully give you
an idea of what's expected

100
00:06:01.613 --> 00:06:05.786
from how the component works at
the end versus how the exercise,

101
00:06:05.786 --> 00:06:08.733
what you're suppose to do for
the exercise.

102
00:06:08.733 --> 00:06:11.137
For example, on this one
the reset button doesn't work, so

103
00:06:11.137 --> 00:06:12.610
you're supposed to make that work.

104
00:06:14.170 --> 00:06:16.480
Yeah, I totally forgot about this.

105
00:06:16.480 --> 00:06:20.070
When you see this,
most of the time this works.

106
00:06:20.070 --> 00:06:23.970
You can click on this and
it'll open your editor to that spot.

107
00:06:25.090 --> 00:06:25.595
Isn't that cool?

108
00:06:25.595 --> 00:06:29.880
Thanks, Dan, or whoever built that.
&gt;&gt; Group: [LAUGH]

109
00:06:29.880 --> 00:06:31.160
&gt;&gt; Kent C. Dodds: I'm sure lots of

110
00:06:31.160 --> 00:06:34.640
contributers to that,
but that is so awesome.

111
00:06:34.640 --> 00:06:39.781
Yeah, and I'm pretty sure that
works in CodeSandbox too.

112
00:06:39.781 --> 00:06:43.446
Yeah, so for each one of the excercises,

113
00:06:43.446 --> 00:06:48.598
[COUGH] you'll have this usage
example at the very bottom.

114
00:06:48.598 --> 00:06:53.780
This should be identical to the usage
example on the final exercise.

115
00:06:53.780 --> 00:06:57.570
So you should not be changing
anything in the usage.

116
00:06:57.570 --> 00:07:01.816
You should be able to get everything like
all the test passing and the component

117
00:07:01.816 --> 00:07:05.694
actually usable without making any
changes to the usage at the bottom.

118
00:07:05.694 --> 00:07:09.502
The usage will be useful to
you to reference to see, okay,

119
00:07:09.502 --> 00:07:12.629
how am I supposed to
implement an API like this?

120
00:07:12.629 --> 00:07:17.179
And so, yeah,
definitely reference the usage example.

121
00:07:17.179 --> 00:07:22.270
And some of these get
to be more complicated.

122
00:07:22.270 --> 00:07:26.219
Here I'll show you,
whoops I keep clicking on the line of

123
00:07:26.219 --> 00:07:29.523
code.
&gt;&gt; Kent C. Dodds: So

124
00:07:29.523 --> 00:07:32.960
right here, well, rats.

125
00:07:32.960 --> 00:07:33.830
Look at the final version.

126
00:07:33.830 --> 00:07:38.770
So it's not that complicated, but yeah,

127
00:07:38.770 --> 00:07:42.860
there's a little bit more
to the usage example.

128
00:07:42.860 --> 00:07:47.795
But in all cases, you shouldn't have
to make any changes below the line

129
00:07:47.795 --> 00:07:52.499
that says you shouldn't have to
change anything below this point.

130
00:07:52.499 --> 00:07:56.022
Okay, and
then also here in the source code,

131
00:07:56.022 --> 00:08:00.119
you've got your exercises and
exercises-final.

132
00:08:00.119 --> 00:08:06.390
I'll give you one guess which one
you will be working in, exercises.

133
00:08:06.390 --> 00:08:08.870
The final version is the solution, and

134
00:08:08.870 --> 00:08:14.080
it is there is no shame in looking at the
solution to reference it for something.

135
00:08:14.080 --> 00:08:18.350
If you get stuck for more than a minute or
two, I recommend looking at the solutions

136
00:08:18.350 --> 00:08:21.219
so that you can keep progressing
through the workshop.

137
00:08:22.680 --> 00:08:26.270
Otherwise, it will be a much
more frustrating experience.

138
00:08:26.270 --> 00:08:28.590
Also, there are tests.

139
00:08:28.590 --> 00:08:36.060
So in another window of your terminal, you
can round npm run test or npmt, for short.

140
00:08:36.060 --> 00:08:39.210
And that will start up
in Jest in watch mode.

141
00:08:39.210 --> 00:08:43.100
If you're not familiar with Jest,
you're about to fall in love.

142
00:08:43.100 --> 00:08:44.390
That’s all I can say.

143
00:08:44.390 --> 00:08:48.820
Also, if you’re not familiar with Jest,
then I’m giving a workshop

144
00:08:48.820 --> 00:08:51.280
the next two days where you’ll
get very familiar with Jest.

145
00:08:53.080 --> 00:08:59.360
So just actually read the output
cuz it actually is useful.

146
00:08:59.360 --> 00:09:00.630
Don’t just gloss over it.

147
00:09:00.630 --> 00:09:04.890
We can run all the tests with A and
that'll run through all of our tests.

148
00:09:04.890 --> 00:09:07.710
All of these are running
against the exercises version.

149
00:09:07.710 --> 00:09:12.220
And so for each one of these exercises,
if you want to use the test,

150
00:09:12.220 --> 00:09:16.720
which I think you probably do to
verify that you've gotten things

151
00:09:16.720 --> 00:09:22.380
working properly, you'll go into the test
for the exercise, it's same filename.

152
00:09:22.380 --> 00:09:23.910
And at the very top here,

153
00:09:23.910 --> 00:09:27.890
you have this input that's
inputting from the exercises final.

154
00:09:27.890 --> 00:09:30.116
You just comment that out and

155
00:09:30.116 --> 00:09:35.327
comment in there exercises revision and
then it will run the test.

156
00:09:35.327 --> 00:09:38.915
I recommend using this handy
feature in Jest watch mode.

157
00:09:38.915 --> 00:09:43.360
If you click on w here,
it'll show you your watch usage.

158
00:09:43.360 --> 00:09:47.360
And here it says press p to
filter by filename regex pattern.

159
00:09:47.360 --> 00:09:51.206
So I hit p and I'm working on 01, so 01.

160
00:09:51.206 --> 00:09:54.930
And then that'll only run that one test,
so

161
00:09:54.930 --> 00:09:58.190
that I'm not distracted by all the others.

162
00:09:58.190 --> 00:10:00.807
And then from there I can work through

163
00:10:00.807 --> 00:10:04.104
the examples.
&gt;&gt; Kent C. Dodds: So

164
00:10:04.104 --> 00:10:09.230
is that part making sense what
you're supposed to do for the test?

165
00:10:09.230 --> 00:10:12.030
I do recommend you run
the test while you're going.

166
00:10:12.030 --> 00:10:14.195
It'll be much better than the app.

167
00:10:14.195 --> 00:10:16.036
It'll validate things much better.

168
00:10:16.036 --> 00:10:21.139
And I've also worked on making it so
that error messages can tell

169
00:10:21.139 --> 00:10:27.010
you hopefully a little bit of what
you're missing in what you're doing.

170
00:10:29.020 --> 00:10:32.770
And then, like I said,
at the end of each one of these tests,

171
00:10:32.770 --> 00:10:34.450
there's Elaboration &amp; Feedback.

172
00:10:34.450 --> 00:10:40.130
I would actually ask that you
don't fill this out until

173
00:10:40.130 --> 00:10:45.130
after I've gone through the solution and
talked about talked about things.

174
00:10:45.130 --> 00:10:48.270
And then I'll take a quick break
to fill out the elaboration and

175
00:10:48.270 --> 00:10:53.480
feedback, yeah, so
you can reiterate what you've learned.

176
00:10:54.510 --> 00:11:00.390
On top of that, if I forget to go over
this, somebody throw something at me so

177
00:11:00.390 --> 00:11:03.340
I remember, yeah,
let's do that elaboration feedback.

178
00:11:03.340 --> 00:11:05.970
Cuz that literally is part
of your learning experience.

179
00:11:05.970 --> 00:11:07.300
I don't want you to miss out on that.

