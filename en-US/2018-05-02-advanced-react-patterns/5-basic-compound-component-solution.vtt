WEBVTT

1
00:00:00.130 --> 00:00:03.842
&gt;&gt; Kent C. Dodds: Already,
so how is that exercise?

2
00:00:03.842 --> 00:00:07.700
Some people seem to find
a little bit of a challenge.

3
00:00:07.700 --> 00:00:11.390
Hopefully, this walk through will help

4
00:00:11.390 --> 00:00:13.230
entering a questions
that you may have had.

5
00:00:13.230 --> 00:00:14.145
So I'll go ahead and start off the test.

6
00:00:14.145 --> 00:00:18.109
[COUGH] By the way, while I'm going,
once I've got myself,

7
00:00:18.109 --> 00:00:21.460
like I finished everything
that I was working on.

8
00:00:21.460 --> 00:00:26.091
I actually do a get reset hard, so
that I'm back to a clean state.

9
00:00:26.091 --> 00:00:29.966
You don't need to, like these exercises
don't build on each other from

10
00:00:29.966 --> 00:00:32.393
the source code standpoint, and so, yeah.

11
00:00:32.393 --> 00:00:34.511
Just to make sure we're
all on the same page.

12
00:00:34.511 --> 00:00:38.120
That's what I'm doing, so you can
feel free to do that if you'd like.

13
00:00:38.120 --> 00:00:43.673
Okay so I'll just make sure we're
running the number two test.

14
00:00:43.673 --> 00:00:46.360
And let's take a look at the solution.

15
00:00:46.360 --> 00:00:50.782
So first I'll go ahead and
build these compound components,

16
00:00:50.782 --> 00:00:53.085
the children components here.

17
00:00:53.085 --> 00:01:00.100
And so we have a static on, and
that's an arrow function component.

18
00:01:00.100 --> 00:01:04.884
And it's going to accept some props,
and it'll say props.on.

19
00:01:04.884 --> 00:01:09.830
If it is on,
then we'll return the props.children.

20
00:01:09.830 --> 00:01:13.935
Otherwise, we'll return null.
&gt;&gt; Kent C. Dodds: Okay,

21
00:01:13.935 --> 00:01:16.960
we'll do the same for
off except in the reverse.

22
00:01:18.100 --> 00:01:23.681
So if it is off then we'll return null,
otherwise will return nothing or,

23
00:01:23.681 --> 00:01:28.301
sorry, yeah, I think you know
what I mean by reading my code.

24
00:01:28.301 --> 00:01:33.092
So, [LAUGH] and then,
we´ll have the button, and

25
00:01:33.092 --> 00:01:36.920
that will be a little bit different.

26
00:01:36.920 --> 00:01:41.744
Just gonna take this switch,
bring it up here instead.

27
00:01:41.744 --> 00:01:47.460
And will accept on as a prop,
well it accept toggle as a prop.

28
00:01:47.460 --> 00:01:52.428
And we don't children for this one.
&gt;&gt; Kent C. Dodds: Cool, and so

29
00:01:52.428 --> 00:01:57.743
now comes the part that's
a little bit more challenging And

30
00:01:57.743 --> 00:02:02.430
that is using these two
utility methods from React.

31
00:02:02.430 --> 00:02:05.217
So, I'm gonna go ahead and
comment this out.

32
00:02:05.217 --> 00:02:09.269
And then we'll return React.Children.map,

33
00:02:09.269 --> 00:02:14.440
this.props.children so
this is the thing we wanna map.

34
00:02:14.440 --> 00:02:19.044
And this is how we want to map those.

35
00:02:19.044 --> 00:02:23.783
And that will be return
React.cloneElement,

36
00:02:23.783 --> 00:02:29.235
here and actually I'll just
call this child element.

37
00:02:29.235 --> 00:02:32.960
This are react elements
that we're cloning.

38
00:02:32.960 --> 00:02:35.051
And we're gonna clone it
with some extra props.

39
00:02:36.065 --> 00:02:38.538
&gt;&gt; Kent C. Dodds: And those props will be

40
00:02:38.538 --> 00:02:43.760
on this.state.on and toggle this.toggle.

41
00:02:43.760 --> 00:02:48.389
So this clone element is responsible for
passing these compound components,

42
00:02:48.389 --> 00:02:50.784
the props that they need to do their job.

43
00:02:50.784 --> 00:02:54.600
But what's cool is that all of
this is happening under the hood.

44
00:02:54.600 --> 00:02:58.470
From a user standpoint, they don't
need to know that's what's going on.

45
00:02:58.470 --> 00:03:00.220
They just use these components, and

46
00:03:00.220 --> 00:03:02.140
we promise that they'll
work together properly.

47
00:03:03.210 --> 00:03:06.320
So if I save that, our tests are passing.

48
00:03:06.320 --> 00:03:10.538
And if we pop open the example,
then we get the exercise is working or

49
00:03:10.538 --> 00:03:16.272
the rendered version is working as well.
&gt;&gt; Kent C. Dodds: Okay,

50
00:03:16.272 --> 00:03:18.509
what questions do you all have about this?

51
00:03:18.509 --> 00:03:20.448
Yeah?
&gt;&gt; Speaker 2: For on and off,

52
00:03:20.448 --> 00:03:22.943
you used the expression.

53
00:03:22.943 --> 00:03:27.740
Could those be just binary, like If-
&gt;&gt; Speaker 2: On is false

54
00:03:28.980 --> 00:03:32.850
E, or yeah, if on is false E,
then render off props.children for

55
00:03:32.850 --> 00:03:36.490
off, if one is truth E then
render props.children.

56
00:03:36.490 --> 00:03:39.528
So just a double apersand as opposed-
&gt;&gt; Kent C. Dodds: I see what you mean,

57
00:03:39.528 --> 00:03:40.285
yeah, yes.

58
00:03:40.285 --> 00:03:44.275
So this is pretty common to do,
and I'm glad that you asked,

59
00:03:44.275 --> 00:03:46.093
cuz I see this all the time.

60
00:03:46.093 --> 00:03:49.576
So, this is fine, in this case.

61
00:03:49.576 --> 00:03:54.122
One time when this is tripped me up,

62
00:03:54.122 --> 00:03:58.550
is, if I have like a list.links.

63
00:03:58.550 --> 00:04:02.819
And in this case what's gonna happen in
JavaScript, is it's gonna say length is

64
00:04:02.819 --> 00:04:07.290
zero, that's falsy, so that is what I will
return, zero.anong clash on our reading.

65
00:04:07.290 --> 00:04:13.689
And so I've had situations like
on PayPal.com/myaccount/transfer,

66
00:04:13.689 --> 00:04:16.844
you'll have your list of contacts.

67
00:04:16.844 --> 00:04:20.625
And we had some code there
that did something like this.

68
00:04:20.625 --> 00:04:24.298
And this user had no contacts, and so
I just had a little zero right there,

69
00:04:24.298 --> 00:04:28.420
there was nothing, just a little
zero sitting in a middle of nowhere.

70
00:04:28.420 --> 00:04:30.852
Because this is something that we did.

71
00:04:30.852 --> 00:04:33.689
So that's why I pretty much,
if I'm going to do this,

72
00:04:33.689 --> 00:04:35.800
then what I'll do is I'll say boolean.

73
00:04:37.990 --> 00:04:41.111
And then when this returns
false I won´t render.

74
00:04:41.111 --> 00:04:44.959
But that´s like implementation detail
of React, so I actually prefer

75
00:04:44.959 --> 00:04:49.920
to be more explicit which is why I use the
.Save California Water Program Inhouse.

76
00:04:49.920 --> 00:04:53.123
So I´m definitely going
to render something, and

77
00:04:53.123 --> 00:04:55.216
I´m gonna choose what renders.

78
00:04:55.216 --> 00:04:58.286
Good, I'm glad you asked that question,
that's pretty common.

79
00:04:58.286 --> 00:05:01.272
[INAUDIBLE] Other questions?

80
00:05:01.272 --> 00:05:07.573
Anything from the chat?
&gt;&gt; Speaker 3: I

81
00:05:07.573 --> 00:05:10.852
just threw a span inside the toggle
element, and that works,

82
00:05:10.852 --> 00:05:14.208
and my question is why
Save California Water Program Inhouse.

83
00:05:14.208 --> 00:05:17.735
React.Children.maps seems
to handle that just fine.

84
00:05:17.735 --> 00:05:18.869
&gt;&gt; Kent C. Dodds: You threw a spam right

85
00:05:18.869 --> 00:05:20.760
here?
&gt;&gt; Speaker 3: No, sorry,

86
00:05:20.760 --> 00:05:25.250
just like inside of, in a usage.
&gt;&gt; Kent C. Dodds: In the usage.

87
00:05:25.250 --> 00:05:26.096
&gt;&gt; Speaker 3: I kow, I'm not suppose to

88
00:05:26.096 --> 00:05:26.948
touch it but.
&gt;&gt; Kent C. Dodds: Right

89
00:05:26.948 --> 00:05:28.295
here?
&gt;&gt; Speaker 3: Yeah.

90
00:05:28.295 --> 00:05:30.080
&gt;&gt; Kent C. Dodds: Like that?

91
00:05:30.080 --> 00:05:30.883
&gt;&gt; Speaker 3: Just as simpling up

92
00:05:30.883 --> 00:05:32.054
[CROSSTALK].
&gt;&gt; Kent C. Dodds: I see,

93
00:05:32.054 --> 00:05:33.217
I see, yeah.
&gt;&gt; Speaker 3: Yeah,

94
00:05:33.217 --> 00:05:35.852
I was just curious what was happening.
&gt;&gt; Kent C. Dodds: Yeah,

95
00:05:35.852 --> 00:05:37.573
So let's actually take a look at that.

96
00:05:37.573 --> 00:05:41.620
You actually see the warning right there,
but you can see it in the browser as well.

97
00:05:41.620 --> 00:05:45.796
It's going to say hey, you passed on

98
00:05:45.796 --> 00:05:50.522
a non-boolean attribute of on to a span.

99
00:05:50.522 --> 00:05:54.460
And so what's happening here is
this is also a react element.

100
00:05:54.460 --> 00:06:01.484
A react element that renders a we're
passing props on a title to this span.

101
00:06:01.484 --> 00:06:05.620
So, it would be like on equals hi,
there, whatever.

102
00:06:05.620 --> 00:06:07.462
On is not a property that span can accept.

103
00:06:07.462 --> 00:06:10.632
So, I wouldn't do that and we'll actually,

104
00:06:10.632 --> 00:06:16.421
there are ways that you can around that
problem, actually, I can talk about that.

105
00:06:16.421 --> 00:06:18.590
But that's what's happening.

106
00:06:18.590 --> 00:06:19.458
So it works, but

107
00:06:19.458 --> 00:06:23.866
you get this warning because it's passing
a non-dom attribute to this dom-note.

108
00:06:23.866 --> 00:06:30.116
So with that you can get around that,
is add a little check in here that says,

109
00:06:30.116 --> 00:06:35.900
if it's one of my static components,
then don't clone the elem ent.

110
00:06:35.900 --> 00:06:40.773
And so you can make it
a static compound components

111
00:06:40.773 --> 00:06:46.001
equals this array toggle not on and
so on and so forth.

112
00:06:46.001 --> 00:06:47.214
And then you check is it in there?

113
00:06:47.214 --> 00:06:48.740
If it's not, then I won't clone it.

114
00:06:50.150 --> 00:06:53.728
Good question, yeah.
&gt;&gt; Speaker 2: I think a point of confusion

115
00:06:53.728 --> 00:06:56.526
for me was when I was
cloning the element and

116
00:06:56.526 --> 00:07:00.040
then passing this dot
toggle into the child.

117
00:07:00.040 --> 00:07:04.377
As oppose to using the start
toggle within the static button.

118
00:07:04.377 --> 00:07:06.129
That threw me for a second.
&gt;&gt; Kent C. Dodds: So

119
00:07:06.129 --> 00:07:08.763
you, just to make sure I understand.
&gt;&gt; Speaker 2: On-click for

120
00:07:08.763 --> 00:07:11.343
the button,
I've used this dot toggle as oppose to

121
00:07:11.343 --> 00:07:14.056
passing it in the prompt.
&gt;&gt; Kent C. Dodds: I see what you're

122
00:07:14.056 --> 00:07:14.824
saying ,yeah.

123
00:07:14.824 --> 00:07:17.390
And did that work?
&gt;&gt; Kent C. Dodds: It wouldn't have

124
00:07:17.390 --> 00:07:18.328
worked.
&gt;&gt; Speaker 2: No.

125
00:07:18.328 --> 00:07:19.833
[LAUGH]
&gt;&gt; Kent C. Dodds: I'd be surprised if it

126
00:07:19.833 --> 00:07:20.560
worked.

127
00:07:20.560 --> 00:07:25.865
So the reason it wouldn't work is
because this is a static property,

128
00:07:25.865 --> 00:07:29.437
you have no instant or
access to the instance.

129
00:07:29.437 --> 00:07:31.941
So you could make it work like this,

130
00:07:31.941 --> 00:07:35.953
except then you wouldn't be
able to use those down here.

131
00:07:35.953 --> 00:07:37.133
So actually [INAUDIBLE].

132
00:07:37.133 --> 00:07:41.420
So, that's why you have
to accept it as props.

133
00:07:43.640 --> 00:07:45.455
What's cool about this
is it's all implicit.

134
00:07:45.455 --> 00:07:50.470
So, maybe it complicates
the implementation a tiny bit, but that's

135
00:07:50.470 --> 00:07:54.590
in favor of the users of our component.
&gt;&gt; Speaker 3: You said,

136
00:07:54.590 --> 00:07:56.454
you wouldn't be able to use.

137
00:07:56.454 --> 00:08:00.058
Those elements in the render,
if they weren't static, can

138
00:08:00.058 --> 00:08:03.492
you just tackle a little more about it?
&gt;&gt; Kent C. Dodds: Yeah, sure, so

139
00:08:03.492 --> 00:08:08.026
if I remove this static property,
now these are instance property.

140
00:08:08.026 --> 00:08:14.574
So I can reference it like this.on, but
if I reference it off of the class.

141
00:08:14.574 --> 00:08:17.005
They're actually not
properties of the class.

142
00:08:17.005 --> 00:08:17.587
&gt;&gt; Speaker 3: Right.

143
00:08:17.587 --> 00:08:18.868
&gt;&gt; Kent C. Dodds: When they're not static,

144
00:08:18.868 --> 00:08:22.618
and so, I'm using it right here I'm
actually referencing it off of the class.

145
00:08:22.618 --> 00:08:26.767
That make sense?
&gt;&gt; Speaker 3: Yes.

146
00:08:26.767 --> 00:08:28.020
&gt;&gt; Kent C. Dodds: Cool, I should also

147
00:08:28.020 --> 00:08:32.671
mention there's actually nothing sacred
about putting these on the class

148
00:08:32.671 --> 00:08:34.010
as stag properties.

149
00:08:34.010 --> 00:08:38.664
You could just as easily take these and
move them up here.

150
00:08:38.664 --> 00:08:44.280
And then instead of static, const,
and then use those like that.

151
00:08:44.280 --> 00:08:48.610
If I'm gonna do compound components,
I like to make it a static property on

152
00:08:48.610 --> 00:08:51.994
the class, just to make
the relationship more explicit.

153
00:08:51.994 --> 00:08:56.008
Just as a communication device to
those who are using the code and

154
00:08:56.008 --> 00:08:58.510
looking at the code later.

155
00:08:58.510 --> 00:09:00.714
But yeah, there is nothing
you absolutely have to do.

156
00:09:00.714 --> 00:09:04.722
So your question on chat?
&gt;&gt; Speaker 4: Can you use a read out map

157
00:09:04.722 --> 00:09:06.990
instead of React.Children.Map?
&gt;&gt; Kent C. Dodds: Yeah,

158
00:09:06.990 --> 00:09:11.172
that's a great question,
you'll restore things back to order here.

159
00:09:11.172 --> 00:09:16.395
So we could use this .props.children.map,
and

160
00:09:16.395 --> 00:09:23.690
that would actually work in our case,
unless there was only one child.

161
00:09:23.690 --> 00:09:26.823
So React actually,
when you have one child,

162
00:09:26.823 --> 00:09:32.194
children is assigned to that element
rather than an array of those elements.

163
00:09:32.194 --> 00:09:34.902
If you're using Preact,
it actually will always be an array.

164
00:09:34.902 --> 00:09:39.888
But in React, it can be just the one
element if there's only one,

165
00:09:39.888 --> 00:09:43.251
which is why React.Children.map exist.

166
00:09:43.251 --> 00:09:47.043
I remember once looking into the source
code for React.Children.map and

167
00:09:47.043 --> 00:09:50.603
I was like, it will just be simple
like if it's in the right then.

168
00:09:50.603 --> 00:09:52.334
No, it's not, I honestly,

169
00:09:52.334 --> 00:09:56.510
I don't know what it does It was
like a lot bigger than I expected.

170
00:09:56.510 --> 00:09:58.914
So that might be a fun exercise for
you to go in later and

171
00:09:58.914 --> 00:10:01.225
figure out what on Earth
does this method is doing.

172
00:10:01.225 --> 00:10:07.440
Because I don't know,
I didn't take more time to look into it.

173
00:10:08.900 --> 00:10:13.031
So, hopefully that answers your question.

174
00:10:13.031 --> 00:10:20.535
Does anyone else have Have questions.
&gt;&gt; Kent C. Dodds: Okay, cool.

175
00:10:20.535 --> 00:10:23.528
Let us move onto our next.

176
00:10:23.528 --> 00:10:25.231
Sorry, woo, that was a close call.

177
00:10:25.231 --> 00:10:29.400
Let's go ahead and
submit our feedback and elaboration.

178
00:10:29.400 --> 00:10:32.001
So you can reiterate
the things that you learned.

179
00:10:32.001 --> 00:10:34.405
Make sure that you retain those things,

180
00:10:34.405 --> 00:10:37.099
and then we'll move on
to the next exercise.

181
00:10:38.560 --> 00:10:42.021
What were some of the things that you
wrote in your elaboration and [INAUDIBLE]?

182
00:10:42.021 --> 00:10:47.393
What did you learn?
&gt;&gt; Kent C. Dodds: As a recap for

183
00:10:47.393 --> 00:10:49.979
all of us, yeah?
&gt;&gt; Speaker 5: I never knew about

184
00:10:49.979 --> 00:10:52.366
Children.map or
cloneElement, so it's cool.

185
00:10:52.366 --> 00:10:53.502
&gt;&gt; Kent C. Dodds: Nice, yeah, so

186
00:10:53.502 --> 00:10:58.315
this is like, literally the only
time I've ever used these methods.

187
00:10:58.315 --> 00:11:03.464
[LAUGH] So in down shift,
we could use a reactive specific

188
00:11:03.464 --> 00:11:08.512
method like that but
it supports pre-active as well.

189
00:11:08.512 --> 00:11:11.988
And so I just wrote my own little like,
two-liner.

190
00:11:11.988 --> 00:11:15.386
So yeah, I don't even use it in downshift.

191
00:11:15.386 --> 00:11:20.344
But it is, there are handful of those
React.Children utilities that can go

192
00:11:20.344 --> 00:11:23.298
check out,
they can be kinda handy sometimes

