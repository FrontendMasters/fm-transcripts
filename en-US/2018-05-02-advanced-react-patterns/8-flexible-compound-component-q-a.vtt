WEBVTT

1
00:00:00.230 --> 00:00:01.209
&gt;&gt; Kent C. Dodds: Okay,
what did you learn?

2
00:00:07.466 --> 00:00:09.794
&gt;&gt; Speaker 2: Throwing an event handler in

3
00:00:09.794 --> 00:00:15.920
state just feels so gross to the point
where I gave up using context.

4
00:00:15.920 --> 00:00:16.458
&gt;&gt; Kent C. Dodds: Yeah?

5
00:00:16.458 --> 00:00:19.689
[CROSSTALK]
&gt;&gt; Speaker 2: Recently because I didn't

6
00:00:19.689 --> 00:00:22.637
even think that I could do that.

7
00:00:22.637 --> 00:00:26.574
[CROSSTALK] because it feels-
&gt;&gt; Kent C. Dodds: It does feel wrong.

8
00:00:26.574 --> 00:00:27.122
&gt;&gt; Speaker 2: Icky.

9
00:00:27.122 --> 00:00:27.766
&gt;&gt; Kent C. Dodds: Yes, it does.

10
00:00:27.766 --> 00:00:29.409
&gt;&gt; Speaker 2: But it's good to know that,

11
00:00:29.409 --> 00:00:31.202
I mean, that's.
&gt;&gt; Kent C. Dodds: That's kind of

12
00:00:31.202 --> 00:00:33.818
the accepted way to do this kind of thing.
&gt;&gt; Speaker 2: I guess I should just

13
00:00:33.818 --> 00:00:35.000
be on Twitter all the time.
&gt;&gt; Kent C. Dodds: Yeah

14
00:00:35.000 --> 00:00:35.755
[LAUGH].
&gt;&gt; Speaker 2: No.

15
00:00:35.755 --> 00:00:36.418
&gt;&gt; Kent C. Dodds: Yeah,

16
00:00:36.418 --> 00:00:38.739
that's what I do [LAUGH].

17
00:00:38.739 --> 00:00:42.280
No, no, so
it does feel really kinda weird.

18
00:00:42.280 --> 00:00:46.490
If you're concerned about that,
there is an alternative actually.

19
00:00:46.490 --> 00:00:51.210
You could add a property
on state called context or

20
00:00:51.210 --> 00:00:53.390
context value, whatever you wanna call it.

21
00:00:53.390 --> 00:00:59.841
And then put on is false and
toggle this.toggle.

22
00:00:59.841 --> 00:01:02.442
And then it's at least
nested inside of your

23
00:01:02.442 --> 00:01:03.913
state.
&gt;&gt; Speaker 2: And

24
00:01:03.913 --> 00:01:07.270
you pass this.state.context?
&gt;&gt; Kent C. Dodds: Yeah so

25
00:01:07.270 --> 00:01:10.410
anytime you call setState
to update context stuff.

26
00:01:10.410 --> 00:01:14.730
When you're doing this, though, you
actually have to pass in the whole thing.

27
00:01:14.730 --> 00:01:17.340
So you'd say context.

28
00:01:18.340 --> 00:01:24.600
And then you'd have to say on is not
on and then toggle is this.toggle.

29
00:01:24.600 --> 00:01:27.900
Thanks to the way that yeah and
something else is busted.

30
00:01:27.900 --> 00:01:29.560
But, yeah, here we go.

31
00:01:29.560 --> 00:01:32.560
state.context [INAUDIBLE].

32
00:01:32.560 --> 00:01:36.970
Something else is busted, but yeah, that's
the basic idea, and this extra stuff

33
00:01:36.970 --> 00:01:40.940
every single time I call setState to
something that's in context is like.

34
00:01:40.940 --> 00:01:44.584
And maybe step back and think, okay, so
how bad is it really to put handlers,

35
00:01:44.584 --> 00:01:46.576
yeah?
&gt;&gt; Speaker 2: Sure, that makes sense.

36
00:01:46.576 --> 00:01:51.662
I can see it being useful when you're
using a lot of state on this component and

37
00:01:51.662 --> 00:01:54.096
then also passing some things down.

38
00:01:54.096 --> 00:01:56.140
But in this case it's not.
&gt;&gt; Kent C. Dodds: Yeah, yeah,

39
00:01:56.140 --> 00:01:57.570
that's a really great point.

40
00:01:57.570 --> 00:02:01.450
So if there's some state you wanna expose
to context but you don't wanna expose all

41
00:02:01.450 --> 00:02:04.810
of your state, then that would
definitely be a solution for that.

42
00:02:04.810 --> 00:02:05.390
Good question.

43
00:02:05.390 --> 00:02:06.170
I'm glad you brought that up.

44
00:02:06.170 --> 00:02:09.929
Any other things that you learned,
yeah, or questions?

45
00:02:09.929 --> 00:02:12.085
&gt;&gt; Speaker 3: With the new context API,

46
00:02:12.085 --> 00:02:17.279
what pattern have you seen like
of having multiple contexts and

47
00:02:17.279 --> 00:02:21.270
like sort of layering them?
&gt;&gt; Kent C. Dodds: Yeah, yeah,

48
00:02:21.270 --> 00:02:23.280
cuz these consumers,
they can get kind of nested.

49
00:02:23.280 --> 00:02:26.601
Like, what if I needed another consumer
and another one and another one?

50
00:02:26.601 --> 00:02:27.524
Glad you asked.

51
00:02:27.524 --> 00:02:29.480
I actually have a pretty active blog.

52
00:02:29.480 --> 00:02:30.862
I blog once a week.

53
00:02:30.862 --> 00:02:37.080
And not that one, even though that
looks like that might be the one.

54
00:02:37.080 --> 00:02:41.400
It is, I think it's in answers
to common questions, but

55
00:02:41.400 --> 00:02:46.790
it might also also be context,
the new context API.

56
00:02:46.790 --> 00:02:50.742
Which is actually not on my blog,
I published it to DailyJS.

57
00:02:50.742 --> 00:02:53.170
This is where I introduced
the context API.

58
00:02:53.170 --> 00:02:58.215
And I show, yeah,
this is exactly what you're talking about.

59
00:02:58.215 --> 00:03:01.057
Andrew was lamenting this.

60
00:03:01.057 --> 00:03:04.200
And there is a solution.

61
00:03:04.200 --> 00:03:09.640
You can create your own component that
does all of that composition for you.

62
00:03:09.640 --> 00:03:13.545
It handles all the nesting and
then your thing is only nested one level.

63
00:03:13.545 --> 00:03:16.800
Or there is actually a component
called react-composer.

64
00:03:16.800 --> 00:03:17.850
There are like six of these now.

65
00:03:19.220 --> 00:03:22.170
That can handle all that nesting for you.

66
00:03:22.170 --> 00:03:25.810
I think, if we load this up really quick,
I can show you what that looks like.

67
00:03:27.290 --> 00:03:29.750
It is, yeah.

68
00:03:29.750 --> 00:03:32.050
So here's the super nested one.

69
00:03:32.050 --> 00:03:33.460
It's a lot of fun.

70
00:03:33.460 --> 00:03:36.660
Or one that's a little more composed.

71
00:03:36.660 --> 00:03:38.447
You can pass in all the providers.

72
00:03:38.447 --> 00:03:42.253
Great question.

73
00:03:42.253 --> 00:03:45.010
Other things that you learned or
questions?

74
00:03:46.720 --> 00:03:51.287
So somebody in the chat asked me
to reiterate the reason why we're

75
00:03:51.287 --> 00:03:55.199
passing this.state to value,
rather than an object.

76
00:03:55.199 --> 00:04:00.840
And so what happens when you pass a,
or, here, let's do.

77
00:04:02.100 --> 00:04:04.840
I'll just put this in right here.

78
00:04:04.840 --> 00:04:07.700
Every single time that this
render function is called,

79
00:04:07.700 --> 00:04:09.940
this object is gonna be reallocated.

80
00:04:09.940 --> 00:04:14.910
So we could assign this to const
value = that and pass that.

81
00:04:14.910 --> 00:04:18.870
That's functionally equivalent to
what we had just a second ago.

82
00:04:18.870 --> 00:04:23.140
And what this means is we're creating
a brand new object in memory and

83
00:04:23.140 --> 00:04:28.570
passing it into the value
of ToggleContext.Provider.

84
00:04:28.570 --> 00:04:32.310
And so whenever
ToggleContext.Provider is rendered,

85
00:04:32.310 --> 00:04:37.500
it's gonna check, did the value prop
change, did the reference change at all?

86
00:04:37.500 --> 00:04:41.810
It doesn't do like a shallow compare
to the previous or anything like that.

87
00:04:41.810 --> 00:04:43.755
It's just, did it change.

88
00:04:43.755 --> 00:04:47.270
And if it did, then it's going
to re-render all of this stuff.

89
00:04:48.530 --> 00:04:53.553
Now, as we have it here, the value is
going to change every single time.

90
00:04:53.553 --> 00:04:57.480
But the actual values within
this value will never change.

91
00:04:57.480 --> 00:04:58.600
They're always the same.

92
00:04:58.600 --> 00:05:02.350
So re-rendering all of
the consumers is pointless because

93
00:05:02.350 --> 00:05:04.260
those values never change anyway.

94
00:05:04.260 --> 00:05:09.000
And so
that's why we pass this.state in instead.

95
00:05:09.000 --> 00:05:14.850
Because the object this.state will only
change when state is actually changed.

