WEBVTT

1
00:00:00.120 --> 00:00:03.870
&gt;&gt; Kent C. Dodds: Okay, so we built
a toggle component, and I'm going to work

2
00:00:03.870 --> 00:00:09.400
through the solution and then we'll go
ahead and do the, your elaboration.

3
00:00:09.400 --> 00:00:10.090
And we'll move on.

4
00:00:11.750 --> 00:00:14.580
And you'll have time to ask questions and
stuff too.

5
00:00:14.580 --> 00:00:17.550
Actually, before I start,
does anybody have any questions?

6
00:00:19.180 --> 00:00:22.660
Wanna see the solution first, and
then you will have questions, okay, good.

7
00:00:22.660 --> 00:00:24.570
So, I'm gonna go ahead and

8
00:00:24.570 --> 00:00:26.910
pop in this switch because that's
what we're gonna be rendering.

9
00:00:27.990 --> 00:00:32.670
And the switch component, as documented
here, it takes an on click and

10
00:00:32.670 --> 00:00:36.320
an on prop, so
we're gonna need to pass on.

11
00:00:36.320 --> 00:00:41.430
I'm gonna put that in state and
then on click.

12
00:00:41.430 --> 00:00:44.190
And I'm gonna call this toggle.

13
00:00:44.190 --> 00:00:50.090
I need to create those things, so
let's do state equals on is false.

14
00:00:50.090 --> 00:00:53.300
And toggle is a bound function,

15
00:00:53.300 --> 00:00:55.560
arrow function,
which actually doesn't have a binding.

16
00:00:55.560 --> 00:01:01.627
But anyway,this .setstate and we need
previous state if we are gonna toggle

17
00:01:01.627 --> 00:01:07.708
we need to know what was the state before
we are gonna use an updater function.

18
00:01:07.708 --> 00:01:13.409
And this is the current state and
we will return an object

19
00:01:13.409 --> 00:01:18.521
with on is current state .on but
negated toggle.

20
00:01:18.521 --> 00:01:23.658
And if you look at the usage this
menu through in front of you because

21
00:01:23.658 --> 00:01:28.913
I don't think that I see yeah I guess
I did talk about it a little bit.

22
00:01:28.913 --> 00:01:34.566
But we'll need to pass a call
back to this that calls

23
00:01:34.566 --> 00:01:40.355
this .props.on_toggle with this .state.on.

24
00:01:40.355 --> 00:01:43.880
And with that all of your
tests should be passing.

25
00:01:43.880 --> 00:01:46.719
And if you pull open the exercise now,

26
00:01:46.719 --> 00:01:50.459
[SOUND] it works just the same
as the final version.

27
00:01:50.459 --> 00:01:55.058
All right,
what questions do you have about

28
00:01:55.058 --> 00:01:57.600
this, yes?
&gt;&gt; Speaker 2: Do you have to use a state

29
00:01:57.600 --> 00:01:59.800
updater function?
&gt;&gt; Kent C. Dodds: Good question.

30
00:01:59.800 --> 00:02:06.780
So you could reasonably,
say this.setState we'll

31
00:02:06.780 --> 00:02:11.994
just do this and this will this.state.on.

32
00:02:11.994 --> 00:02:16.856
Let's see, something like that.

33
00:02:16.856 --> 00:02:23.390
So I was gonna say that this works wait,
static state, that's the super

34
00:02:23.390 --> 00:02:26.660
secret do-not-use-or-you-will-be-fired,
just kidding.

35
00:02:26.660 --> 00:02:31.240
So yes, this actually does work in our
case, the one thing that react does not

36
00:02:31.240 --> 00:02:37.230
guarantee, especially when async
mode comes around, is that your,

37
00:02:37.230 --> 00:02:42.480
and actually even now,
your set state could be batched.

38
00:02:42.480 --> 00:02:45.520
And so you don't have any control over

39
00:02:46.950 --> 00:02:51.530
what the state will be when
this set state is processed.

40
00:02:51.530 --> 00:02:56.140
And so by providing an updater function
it can pass you what the state is

41
00:02:56.140 --> 00:03:00.160
at the time that this set state call
is being processed in the batching.

42
00:03:00.160 --> 00:03:03.976
So that you're actually
referencing the current state.

43
00:03:03.976 --> 00:03:05.704
&gt;&gt; Speaker 3: Would it be okay, so

44
00:03:05.704 --> 00:03:11.399
what I did is I captured the new on
like in a variable above it and then

45
00:03:11.399 --> 00:03:15.050
referenced it, will that also be okay?
&gt;&gt; Kent C. Dodds: Yes,

46
00:03:15.050 --> 00:03:17.960
that'll be same as what we are doing.

47
00:03:17.960 --> 00:03:20.950
So, generally the rule

48
00:03:20.950 --> 00:03:25.670
is if you need to reference current
states then you can update a function.

49
00:03:25.670 --> 00:03:27.270
If you don't then you
can just use an object.

50
00:03:27.270 --> 00:03:31.950
If you don't like having complicated rules
then just always use an updated function.

51
00:03:34.420 --> 00:03:39.396
Any other questions?
&gt;&gt; Kent C. Dodds: All right,well one

52
00:03:39.396 --> 00:03:42.050
of you did your job,
no just kidding, no, thank you.

53
00:03:42.050 --> 00:03:43.790
I should probably double check.

54
00:03:46.890 --> 00:03:52.310
One thing that I didn't
mention about thing is,

55
00:03:52.310 --> 00:03:56.790
something that I had have
a lot of people ask me about

56
00:03:56.790 --> 00:04:00.970
in the past with regard to my workshops
is, what file I'm I currently in.

57
00:04:00.970 --> 00:04:04.450
And so
I made it enormous at the bottom here.

58
00:04:04.450 --> 00:04:07.770
It's kinda clipped off but
that's the file that I mean.

59
00:04:07.770 --> 00:04:11.190
So whenever I'm in a file and you
are like where is he, that's where I am.

60
00:04:12.990 --> 00:04:17.080
Okay cool, so let's go ahead and
go to our test and make everything green.

61
00:04:17.080 --> 00:04:21.760
You can just copy and paste this and
when you ran the setup you

62
00:04:21.760 --> 00:04:26.920
should have seen a little thing that
said like what's your email address.

63
00:04:26.920 --> 00:04:32.570
You fill that out and it would actually
prepopulate the Property on this URL.

64
00:04:32.570 --> 00:04:33.960
If that didn't work for

65
00:04:33.960 --> 00:04:37.790
you then you can actually run,
and you don't have to do that.

66
00:04:37.790 --> 00:04:41.245
It just makes filling out these forms
easier but you can run node scripts,

67
00:04:41.245 --> 00:04:45.230
autofill-feedback-email and
it will ask for your email address.

68
00:04:45.230 --> 00:04:50.110
You fill that out and
all of these will be pre-populated so

69
00:04:50.110 --> 00:04:51.770
you don't have to add your
email address to the form.

70
00:04:52.800 --> 00:04:57.370
But in any case you pop this open
take you to this feedback form.

71
00:04:57.370 --> 00:05:04.092
And please elaborate on what you learned.
&gt;&gt; Kent C. Dodds: This'll

72
00:05:04.092 --> 00:05:06.860
just be a couple of seconds,
so we'll do this.

73
00:05:09.230 --> 00:05:13.870
When you're finished, go ahead and
remove the .skip in front of this test.

74
00:05:13.870 --> 00:05:15.453
And then you should have
all of your tests green.

75
00:05:15.453 --> 00:05:18.748
And you also have to change
submitted from false to true.

76
00:05:18.748 --> 00:05:21.520
And then all your tests should be green.

77
00:05:27.260 --> 00:05:31.730
Okay, so somebody asked on the chat,
could someone briefly explain what

78
00:05:31.730 --> 00:05:36.440
exactly the Stop, Props to Untoggle,
this.stay.on does.

79
00:05:36.440 --> 00:05:39.580
So they're asking
specifically this right here.

80
00:05:39.580 --> 00:05:41.230
And what this does is,

81
00:05:41.230 --> 00:05:45.080
this is a pretty common pattern
in building React components.

82
00:05:45.080 --> 00:05:47.610
You have this component
that manages its own state.

83
00:05:47.610 --> 00:05:52.520
But as a user of that component,
I want to know when that state is changed.

84
00:05:52.520 --> 00:05:55.700
And so you provide a change handler and

85
00:05:55.700 --> 00:05:59.830
in our case it's an onToggle handler
cuz this is a toggle component.

86
00:05:59.830 --> 00:06:05.020
And so our usage provides
this onToggle handler and

87
00:06:05.020 --> 00:06:06.840
it's just defaulting to console.log.

88
00:06:06.840 --> 00:06:10.530
So if you go to the app and you pop-open
your console every time you cook on it,

89
00:06:10.530 --> 00:06:13.280
it should tell you when
the toggle is happening.

90
00:06:13.280 --> 00:06:16.470
So that's all this is doing is it's,
once we have updated our state,

91
00:06:16.470 --> 00:06:19.420
we're going to say, hey,
by the way, we updated our state.

92
00:06:19.420 --> 00:06:21.320
Just in case you wanted to know.

93
00:06:21.320 --> 00:06:23.980
And if you didn't wanna know,
then why are you using this component.

94
00:06:23.980 --> 00:06:27.140
Because it's kinda useless on its own.

95
00:06:27.140 --> 00:06:31.800
Which is actually one of the reasons why
we don't have a default props set for

96
00:06:31.800 --> 00:06:32.390
ontoggle.

97
00:06:32.390 --> 00:06:34.170
Because if you're using
this without an ontoggle,

98
00:06:34.170 --> 00:06:35.390
then why are you using this at all?

99
00:06:38.780 --> 00:06:40.486
Okay, any other questions?

100
00:06:40.486 --> 00:06:44.469
What were some of the things that
you mentioned in your elaboration?

101
00:06:44.469 --> 00:06:46.134
What did you learn?

102
00:06:46.134 --> 00:06:52.530
&gt;&gt; Speaker 4: Nothing I mean I learned

103
00:06:52.530 --> 00:06:55.620
the same thing that question was about
&gt;&gt; Kent C. Dodds: Okay.

104
00:06:55.620 --> 00:06:57.040
&gt;&gt; Speaker 4: Looking at your solution and

105
00:06:57.040 --> 00:06:59.890
then realizing that I shouldn't
just be using an object.

106
00:06:59.890 --> 00:07:00.400
&gt;&gt; Kent C. Dodds: Okay, yeah.

107
00:07:00.400 --> 00:07:02.740
So set state should be public and

108
00:07:02.740 --> 00:07:06.840
updated function when you're
referencing current state.

109
00:07:07.860 --> 00:07:08.360
Cool.

