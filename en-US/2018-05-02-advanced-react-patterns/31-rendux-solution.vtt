WEBVTT

1
00:00:00.080 --> 00:00:01.220
&gt;&gt; Kent C. Dodds: All right,
let's go ahead and

2
00:00:01.220 --> 00:00:04.320
implement this bonus Rendux thing.

3
00:00:04.320 --> 00:00:07.120
So I'm going to pull in
the exercise version.

4
00:00:07.120 --> 00:00:08.670
We'll run the test.

5
00:00:09.980 --> 00:00:11.980
And we'll get our first error.

6
00:00:11.980 --> 00:00:16.421
So we're not rendering the search
component, let's go ahead and

7
00:00:16.421 --> 00:00:21.589
start implementing some of this stuff
cuz we've got a fair amount to do here.

8
00:00:21.589 --> 00:00:26.480
So, I actually provided as much as
I could, that was Redux specific.

9
00:00:26.480 --> 00:00:29.680
Cuz I don't think that you really
care to learn Redux in this workshop.

10
00:00:29.680 --> 00:00:31.820
Feel free to learn that elsewhere.

11
00:00:31.820 --> 00:00:35.370
So yeah, some of the Redux
staff I provided for you.

12
00:00:35.370 --> 00:00:39.240
And we'll just be doing
some of the pattern stuff.

13
00:00:39.240 --> 00:00:44.710
So, if we look at the usage
of the Rendux component.

14
00:00:44.710 --> 00:00:48.210
It's taking the initialState,
it's taking the reducer.

15
00:00:48.210 --> 00:00:52.220
And then, I kinda covered this already but

16
00:00:52.220 --> 00:00:56.090
it's taking this function as a child or
this render prop.

17
00:00:56.090 --> 00:00:59.690
So that's where we're gonna start,
is our render prop.

18
00:00:59.690 --> 00:01:01.350
Actually, before that we need the context.

19
00:01:01.350 --> 00:01:02.339
So let's do that first.

20
00:01:03.430 --> 00:01:12.560
So, we'll make our
RenduxContext=React.createContext.

21
00:01:12.560 --> 00:01:16.390
And we'll initialize this will all this
stuff that our usage example is using.

22
00:01:16.390 --> 00:01:21.500
So we've got rendux .state and
rendux.dispatch.

23
00:01:21.500 --> 00:01:28.480
And down here, we have, actually, it's
easy to render version with the reset.

24
00:01:28.480 --> 00:01:31.740
So, we're going to need those
three things in our default.

25
00:01:31.740 --> 00:01:35.350
So, we'll say state,
as just an empty object,

26
00:01:35.350 --> 00:01:40.019
reset is a function that does nothing and
dispatch, likewise.

27
00:01:41.890 --> 00:01:45.768
Great, so, next, so let's go ahead and
implement the provider pattern.

28
00:01:45.768 --> 00:01:51.800
So, we'll return a toggle or

29
00:01:51.800 --> 00:01:57.150
the RenduxContext.provider and

30
00:01:57.150 --> 00:01:59.890
because we are using both
the provider pattern and

31
00:01:59.890 --> 00:02:05.790
the render props,
we're gonna pull out our UI.

32
00:02:05.790 --> 00:02:07.800
Here, actually, let's just make
this a little easier to read.

33
00:02:07.800 --> 00:02:10.650
We'll do children goes to set props.

34
00:02:10.650 --> 00:02:14.560
Then we'll get our UI
from type of children,

35
00:02:14.560 --> 00:02:17.910
function, then we'll call the children,
children.

36
00:02:21.870 --> 00:02:24.300
Otherwise, we’ll just do the children.

37
00:02:24.300 --> 00:02:25.090
Okay, great.

38
00:02:25.090 --> 00:02:26.560
And then we’ll render the UI and

39
00:02:26.560 --> 00:02:29.955
let us not forget,
the provider also needs a value.

40
00:02:29.955 --> 00:02:32.118
This.state.

41
00:02:32.118 --> 00:02:33.508
That's an inside joke.

42
00:02:33.508 --> 00:02:34.787
All right, so the,

43
00:02:34.787 --> 00:02:40.790
we’re rendering the provider we’re also
handling the render prop, that's great.

44
00:02:40.790 --> 00:02:45.680
We need to also expose the consumer,
so that people can Rendux.Consumer.

45
00:02:45.680 --> 00:02:48.640
Technically, they could use
Rendux.Context.Consumer,

46
00:02:48.640 --> 00:02:50.950
that'd be totally fine if
you wanted to do that way.

47
00:02:50.950 --> 00:02:52.050
It'd work fine.

48
00:02:52.050 --> 00:02:55.510
But I actually like making that explicit
and this is the only way you can

49
00:02:55.510 --> 00:02:59.110
access the context,
as a static property off of my component.

50
00:02:59.110 --> 00:03:06.280
So I'll say static Consumer
= Rendux.Context.Consumer.

51
00:03:08.250 --> 00:03:10.176
And let's save that and see what we broke.

52
00:03:10.176 --> 00:03:16.340
All right, so,
well [LAUGH] this is a familiar error,

53
00:03:16.340 --> 00:03:23.850
okay, so we don't actually or we haven't
yet implemented anything on our state.

54
00:03:23.850 --> 00:03:27.130
We haven't initialized our state at all,
so let's go ahead and do that.

55
00:03:27.130 --> 00:03:29.910
State, this first thing is saying hey,
we can't read reset, so

56
00:03:29.910 --> 00:03:31.320
let's make sure we have rest on there.

57
00:03:31.320 --> 00:03:33.760
Reset, this.reset.

58
00:03:33.760 --> 00:03:37.010
And again, it's kind of weird
to like callback handlers

59
00:03:37.010 --> 00:03:41.580
in your state because they're
not things that change ever but

60
00:03:41.580 --> 00:03:46.570
in the case of context,
it's the easiest way to expose these

61
00:03:46.570 --> 00:03:51.490
things to context without worrying
about unnecessary re-renders.

62
00:03:51.490 --> 00:03:55.860
So, that's what we're doing here
is adding that to our state.

63
00:03:55.860 --> 00:04:02.740
We're also gonna want the dispatch
method to this.stored.dispatch.

64
00:04:04.650 --> 00:04:11.222
And then, we'll have our state,
the state within the state,

65
00:04:11.222 --> 00:04:15.564
is gonna be this.initialRenduxState.

66
00:04:18.483 --> 00:04:19.666
&gt;&gt; Kent C. Dodds: Okay, cool.

67
00:04:19.666 --> 00:04:21.980
So, so far so good.

68
00:04:21.980 --> 00:04:27.090
One thing that we need to do is
implement this higher order component.

69
00:04:27.090 --> 00:04:31.893
So, that's what's failing is it
can't find the printed state,

70
00:04:31.893 --> 00:04:34.139
which is being rendered here.

71
00:04:34.139 --> 00:04:41.147
So, let's go ahead and
implement our higher order component,

72
00:04:41.147 --> 00:04:46.098
so we had the wrapper=React.forwardRef.

73
00:04:46.098 --> 00:04:51.766
That's gonna take props and
the ref that we should forward and

74
00:04:51.766 --> 00:04:55.040
we'll return the component here.

75
00:04:55.040 --> 00:05:00.801
We're gonna return Rendux consumer and
this will, inside,

76
00:05:00.801 --> 00:05:06.380
use the render prompt that
the consumer's exposing.

77
00:05:06.380 --> 00:05:09.210
That'll take the rendux thing,
rendux utils.

78
00:05:09.210 --> 00:05:11.540
Whatever you wanna call that and
render the component.

79
00:05:13.650 --> 00:05:18.020
And here, we'll forward on all
the prompts, we'll forward on the ref and

80
00:05:18.020 --> 00:05:19.370
we'll forward on rendux.

81
00:05:19.370 --> 00:05:24.736
Oops, rendux
&gt;&gt; Kent C. Dodds: And

82
00:05:24.736 --> 00:05:27.800
then we'll return the wrapper instead.

83
00:05:27.800 --> 00:05:28.690
Okay, cool.

84
00:05:28.690 --> 00:05:29.850
We're passing tasks.

85
00:05:29.850 --> 00:05:30.680
We could improve this.

86
00:05:30.680 --> 00:05:35.010
So, we're not doing the Poisson
non-react status, so let's go ahead and

87
00:05:35.010 --> 00:05:38.516
do that really quick, so
we don't bump into problems in the future.

88
00:05:38.516 --> 00:05:44.595
Wrapper component and then, let's also
give us a nice display name for DevTools.

89
00:05:44.595 --> 00:05:53.463
displayName =
'withRendux(${Components.displayName

90
00:05:53.463 --> 00:05:57.901
|| Component.name})'.

91
00:05:57.901 --> 00:06:02.912
All right, let's actually, I didn't
get a chance to show you what this

92
00:06:02.912 --> 00:06:08.650
display name looks like in Dev tool,
so let's look at that really quick.

93
00:06:08.650 --> 00:06:11.830
That's in our, over here,

94
00:06:11.830 --> 00:06:15.930
going through our reactive tools and
it's saying unknown.

95
00:06:15.930 --> 00:06:19.349
I don't know why it's saying unknown,
it should be display name, what?

96
00:06:20.380 --> 00:06:21.299
Boo

97
00:06:29.145 --> 00:06:30.839
&gt;&gt; Kent C. Dodds: Well by golly,

98
00:06:30.839 --> 00:06:35.210
you know what, maybe,
I'm not sure what that is.

99
00:06:35.210 --> 00:06:36.430
Maybe if we do this.

100
00:06:36.430 --> 00:06:38.600
&gt;&gt; Speaker 1: It's not
because it's a cons is it?

101
00:06:38.600 --> 00:06:39.280
You can.

102
00:06:39.280 --> 00:06:42.130
&gt;&gt; Kent C. Dodds: No, no,
you can reassign properties on cons.

103
00:06:42.130 --> 00:06:42.940
I don't know, that's weird.

104
00:06:42.940 --> 00:06:44.410
Somebody find out what that is and

105
00:06:44.410 --> 00:06:47.690
send a poll request to
the Front End Master's recording.

106
00:06:49.820 --> 00:06:54.850
But yeah, so that is,
that's the whole thing.

107
00:06:54.850 --> 00:06:59.350
So hopefully, at least this last thing
gave you a peek into the fact that these

108
00:06:59.350 --> 00:07:01.320
patterns aren't just useful for

109
00:07:01.320 --> 00:07:04.210
a toggle component that's
managing one thing in a state.

110
00:07:04.210 --> 00:07:08.400
But they are actually useful for managing
an entire application worth of state.

111
00:07:08.400 --> 00:07:13.552
In particular, for provider pattern for
solving our problem and

112
00:07:13.552 --> 00:07:18.900
thank heaven to react context API for
making that really easy to do.

113
00:07:18.900 --> 00:07:22.775
And then also, the render prompts for
giving total control over

114
00:07:22.775 --> 00:07:27.380
UI state reducers and control prompts for
giving control over the state.

115
00:07:27.380 --> 00:07:32.220
And combining these things together,
you can really make some highly flexible

116
00:07:32.220 --> 00:07:37.780
APIs for people to consume in any
way that their use case needs.

117
00:07:37.780 --> 00:07:40.450
But the really nice thing about
these patterns is that they're

118
00:07:40.450 --> 00:07:44.340
pretty low level primitive patterns
that you can build on top of,

119
00:07:44.340 --> 00:07:48.570
to make components that
make even more opinions.

120
00:07:48.570 --> 00:07:53.833
So, I've actually been waiting for
somebody to re-implement

121
00:07:53.833 --> 00:07:59.160
some other autocomplete
solutions with downshift because

122
00:07:59.160 --> 00:08:03.500
the other autocomplete solutions are
easier to just get up and started with.

123
00:08:03.500 --> 00:08:07.400
You just like here is autocomplete
items equals this.pops the items.

124
00:08:07.400 --> 00:08:09.290
And it's really easy.

125
00:08:09.290 --> 00:08:11.690
Even if it's quite not as flexible.

126
00:08:11.690 --> 00:08:12.660
It's a lot easier.

127
00:08:12.660 --> 00:08:17.230
But I think the reason that people
haven't done that is because it's pretty

128
00:08:17.230 --> 00:08:21.180
generic or like case by case basis.

129
00:08:21.180 --> 00:08:25.650
But the nice thing is that, you can
build on top of these things to provide

130
00:08:25.650 --> 00:08:28.860
cleaner nicer APIs for specific use cases.

131
00:08:28.860 --> 00:08:32.995
And also, with higher order components
being able to build on top of these render

132
00:08:32.995 --> 00:08:35.410
prompt APIs makes it a lot easier too.

133
00:08:35.410 --> 00:08:37.390
So I'm really excited
about these patterns.

134
00:08:37.390 --> 00:08:39.550
Thank you so much for
looking at my Twitter.

135
00:08:39.550 --> 00:08:44.633
[LAUGH] So, thank you so much for
coming out to the workshop.

136
00:08:44.633 --> 00:08:49.331
And with that, I'll just say, goodbye and
please go ahead and submit feedback,

137
00:08:49.331 --> 00:08:50.706
I'd appreciate that.

138
00:08:50.706 --> 00:08:52.145
Thank you.

139
00:08:52.145 --> 00:08:57.509
[APPLAUSE]

