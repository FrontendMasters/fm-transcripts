WEBVTT

1
00:00:00.060 --> 00:00:01.160
&gt;&gt; Kent C. Dodds: All right.
Let's go ahead and

2
00:00:01.160 --> 00:00:06.000
finish this exercise and answer any
questions that you might have about

3
00:00:06.000 --> 00:00:08.520
this flexible compounds components thing.

4
00:00:08.520 --> 00:00:12.850
So I'm gonna bring in the exercise
version of the test or the usage for

5
00:00:12.850 --> 00:00:14.720
the test, and run these tests.

6
00:00:14.720 --> 00:00:18.440
And we've got this siren thing that's
saying the switch component is

7
00:00:18.440 --> 00:00:20.530
not getting past the right props.

8
00:00:20.530 --> 00:00:24.880
And we learned that's because
this react children map,

9
00:00:24.880 --> 00:00:28.960
which is responsible for cloning these
children and providing these props, can

10
00:00:28.960 --> 00:00:33.500
only be applied to the immediate children,
not descendants of those children.

11
00:00:33.500 --> 00:00:36.550
So that's why the switch component
isn't getting the right props.

12
00:00:36.550 --> 00:00:39.150
So let's go ahead and make that happen.

13
00:00:39.150 --> 00:00:44.170
The first thing that we're gonna do
as indicated by Cody the koala bear

14
00:00:44.170 --> 00:00:49.800
is we make our ToggleContext,
React.createContext.

15
00:00:49.800 --> 00:00:52.520
And here, this is going to be
our default value for context.

16
00:00:52.520 --> 00:00:58.520
So if a consumer is rendered
not within a provider.

17
00:00:58.520 --> 00:01:03.371
Then this is the value that
consumer will receive, okay?

18
00:01:03.371 --> 00:01:08.680
And so, here we have this theme context
example we're passing light as a string.

19
00:01:08.680 --> 00:01:11.750
And that's the value that
this consumer will receive

20
00:01:11.750 --> 00:01:17.090
if it's not rendered within a provider
which provides any other value.

21
00:01:17.090 --> 00:01:20.940
So for us, I want to provide on as false.

22
00:01:20.940 --> 00:01:24.120
And because the button needs
to get access to the toggle,

23
00:01:24.120 --> 00:01:29.600
I need to also provide a toggle function
and that will just do a no opt function.

24
00:01:29.600 --> 00:01:34.290
We could do some sort of validation or
something in there as well, just say, hey,

25
00:01:34.290 --> 00:01:37.280
your rendering outside or
something like that.

26
00:01:37.280 --> 00:01:40.599
But in our case, we're good with
just an no-op function here.

27
00:01:41.770 --> 00:01:46.346
And then,
we're gonna use the ToggleContext in our

28
00:01:46.346 --> 00:01:51.339
render method with a return
ToggleContext.Provider,

29
00:01:51.339 --> 00:01:56.548
the value is going to be this.state and
I will explain why.

30
00:01:56.548 --> 00:01:59.014
So actually here, I'll explain it later.

31
00:01:59.014 --> 00:02:05.738
Let's make value be this first, and then
we'll just pass in this.props.children.

32
00:02:05.738 --> 00:02:07.498
And we can get rid of all these stuff.

33
00:02:10.335 --> 00:02:11.967
&gt;&gt; Kent C. Dodds: Okay,
stuff is not working,

34
00:02:11.967 --> 00:02:14.850
we're not even providing it to on and
off right now.

35
00:02:15.890 --> 00:02:20.340
Because no longer do they need to know or
to get those from props.

36
00:02:20.340 --> 00:02:24.980
They will actually get all
that information from context.

37
00:02:24.980 --> 00:02:30.868
So I'm gonna do this fancy thing, [SOUND]
just to get all this stuff done at once.

38
00:02:30.868 --> 00:02:36.340
So we'll say ToggleContext.Consumer,

39
00:02:36.340 --> 00:02:44.094
and this is going to accept
a function that is contextValue.

40
00:02:44.094 --> 00:02:51.663
And that will return this value and then
we'll close off ToggleContext.Consumer.

41
00:02:51.663 --> 00:02:54.909
Save that, and thank our lucky stars for
a pretty year.

42
00:02:54.909 --> 00:02:57.876
And then instead of
getting on from our props,

43
00:02:57.876 --> 00:03:00.780
we're gonna pull it from the contextValue.

44
00:03:02.720 --> 00:03:04.720
And we'll do that here also.

45
00:03:04.720 --> 00:03:11.401
Remove this, and then here we'll just
rename this whole thing to props and

46
00:03:11.401 --> 00:03:17.249
we'll do contextValue.on and
contectValue.toggle, okay.

47
00:03:17.249 --> 00:03:19.983
And everything is passing.

48
00:03:19.983 --> 00:03:24.131
So there's one more thing I
wanna show about this, but

49
00:03:24.131 --> 00:03:28.557
before we do that,
does anyone have any questions so far?

50
00:03:28.557 --> 00:03:33.665
&gt;&gt; Speaker 2: It seems like
the defaults being given the context

51
00:03:33.665 --> 00:03:37.687
just like hide problems, basically.

52
00:03:37.687 --> 00:03:40.062
&gt;&gt; Kent C. Dodds: Yes.

53
00:03:40.062 --> 00:03:42.251
&gt;&gt; Speaker 2: But
you should never try to render?

54
00:03:42.251 --> 00:03:42.967
&gt;&gt; Kent C. Dodds: Right, yeah.

55
00:03:42.967 --> 00:03:48.003
So there are some situations in
context API's like this one for

56
00:03:48.003 --> 00:03:54.560
example, where it doesn't make any sense,
[COUGH] to not have the provider.

57
00:03:54.560 --> 00:03:59.720
And in fact, the way that we would
actually expose this is I'd probably put

58
00:03:59.720 --> 00:04:06.350
all of these in one file and then I'd
only exposed the toggle component itself.

59
00:04:06.350 --> 00:04:09.730
And so, it would actually be
impossible to use this components.

60
00:04:09.730 --> 00:04:11.390
Well, actually, sorry no, not impossible.

61
00:04:11.390 --> 00:04:13.418
I just do this, [SOUND].

62
00:04:13.418 --> 00:04:14.990
And I'll prove I've broken everything.

63
00:04:16.180 --> 00:04:20.150
So yeah, I guess there may be
a solution in the context API

64
00:04:20.150 --> 00:04:21.630
to say this is required.

65
00:04:21.630 --> 00:04:25.780
I know with the old version of the API,
you use prop types and

66
00:04:25.780 --> 00:04:28.430
you could say context was required.

67
00:04:28.430 --> 00:04:33.412
I haven't actually looked into that to
see if that's possible with the new API.

68
00:04:33.412 --> 00:04:36.440
But you could definitely in user land,

69
00:04:36.440 --> 00:04:40.293
you could do that where
you'd say inside of here,

70
00:04:40.293 --> 00:04:45.913
like make the default something like
no default or something like that.

71
00:04:47.698 --> 00:04:48.235
&gt;&gt; Kent C. Dodds: So yeah,

72
00:04:48.235 --> 00:04:51.816
I feel like there are several
other ways that you could do that.

73
00:04:51.816 --> 00:04:54.540
Good question, other questions?

74
00:04:56.730 --> 00:05:02.590
Okay, one person in the chat asked,
just kind of for confirmation, would

75
00:05:02.590 --> 00:05:08.230
you put all of this in one file and then
expose ToggleContext for people to use?

76
00:05:08.230 --> 00:05:11.470
Normally, that's similar to
something that I would do.

77
00:05:11.470 --> 00:05:16.030
I generally, if I'm making a reusable
component, I'm exposing context.

78
00:05:16.030 --> 00:05:19.160
I'm going to expose the provider or

79
00:05:19.160 --> 00:05:22.880
the consumers that case may be
not the entire context object.

80
00:05:22.880 --> 00:05:24.260
I'd like to have more control over it.

81
00:05:24.260 --> 00:05:28.060
Later, we'll be doing something
like this static Consumer,

82
00:05:31.640 --> 00:05:33.610
just to make things
a little more explicit.

83
00:05:33.610 --> 00:05:35.950
In our case, we don't need to expose that.

84
00:05:35.950 --> 00:05:40.730
And this is kind of a key point to
the compound components API, is that

85
00:05:40.730 --> 00:05:45.720
the state that's being shared between
these components is all implicit state.

86
00:05:45.720 --> 00:05:50.080
So the user of these components
doesn't actually see

87
00:05:50.080 --> 00:05:53.950
any of the state that's being
shared between these components.

88
00:05:53.950 --> 00:05:58.380
And that's the general idea behind
the compound components API.

89
00:05:58.380 --> 00:06:01.870
And when you know that you have a use case
that's suited for compound components,

90
00:06:01.870 --> 00:06:04.320
is when you have several components
that need to share a state, but

91
00:06:04.320 --> 00:06:07.170
the user doesn’t need to know about that,
okay?

92
00:06:09.030 --> 00:06:16.390
Cool, so there’s one other problem with
this and that is with the context API.

93
00:06:16.390 --> 00:06:21.430
Anytime this value changes to something
else, to a different reference,

94
00:06:21.430 --> 00:06:24.950
to a different object, or
anything else like that,

95
00:06:24.950 --> 00:06:29.685
then it's going to re-render itself
as well as all of the consumers.

96
00:06:29.685 --> 00:06:33.644
And as we know render method
can be called like man,

97
00:06:33.644 --> 00:06:38.433
many times and never actually
change what the user is seeing,

98
00:06:38.433 --> 00:06:41.584
at least in many parts of the react tree.

99
00:06:41.584 --> 00:06:46.167
And so, by making this an object that
we declare inside the render method,

100
00:06:46.167 --> 00:06:50.030
the value is changing every
single time it's rendered.

101
00:06:50.030 --> 00:06:51.840
And so,
every single time this is rendered,

102
00:06:51.840 --> 00:06:54.280
all the consumers will
also be re-rendered.

103
00:06:54.280 --> 00:06:57.536
And so that could potentially
be a performance problem.

104
00:06:57.536 --> 00:07:00.346
And so in general,
I try to avoid doing this.

105
00:07:00.346 --> 00:07:07.068
And instead what I do is
I pass to do this.state.

106
00:07:07.068 --> 00:07:12.707
And this.state is an object that doesn't
change until things actually have changed,

107
00:07:12.707 --> 00:07:17.290
like I'm calling set state or
something so it makes a lot of sense.

108
00:07:17.290 --> 00:07:20.710
The thing that doesn't really
make a lot of sense is,

109
00:07:20.710 --> 00:07:23.218
[SOUND] to be able to provide the toggle,

110
00:07:23.218 --> 00:07:29.319
I actually have to add it to my state
&gt;&gt; Kent C. Dodds: Here,

111
00:07:29.319 --> 00:07:30.720
actually let me put
that back where it was.

112
00:07:32.170 --> 00:07:37.120
And that feels weird to me, because
a function in state, that's like odd.

113
00:07:37.120 --> 00:07:40.500
But you get used to it,
because it's the best way to do this.

114
00:07:40.500 --> 00:07:43.710
And maybe in the future
the React team will figure out

115
00:07:43.710 --> 00:07:48.030
a different way to accomplish this, but in
conversation on Twitter with smart people,

116
00:07:48.030 --> 00:07:51.680
this is where we landed on how to do this.

117
00:07:52.690 --> 00:07:54.772
So one thing that you might have noticed,

118
00:07:54.772 --> 00:08:00.550
[COUGH] if you did do this is
you're going to get an error,

119
00:08:00.550 --> 00:08:05.630
and this is because the way
that class properties work.

120
00:08:05.630 --> 00:08:09.320
These are executed in order
during the construction phase.

121
00:08:09.320 --> 00:08:12.910
And so, at the time that state
is initialized, this dot, sorry,

122
00:08:12.910 --> 00:08:15.140
that should be toggle.

123
00:08:15.140 --> 00:08:17.320
This.toggle does not actually exist.

124
00:08:17.320 --> 00:08:19.290
It hasn't been initialized yet,
it's coming after.

125
00:08:19.290 --> 00:08:20.940
That's why you have to move it down.

126
00:08:20.940 --> 00:08:27.259
And then everything is working,
does that piece make sense?

127
00:08:29.790 --> 00:08:33.420
You can imagine this being inside
of the constructor function and

128
00:08:33.420 --> 00:08:36.880
this in front of all these,
if that is helpful.

129
00:08:38.410 --> 00:08:40.445
Okay, I think there's
a question in the chat.

130
00:08:40.445 --> 00:08:43.145
Yeah, so if you're still using, so

131
00:08:43.145 --> 00:08:47.597
somebody's still asking about
the constructor function.

132
00:08:47.597 --> 00:08:53.722
Constructor, so
this is a default constructor

133
00:08:53.722 --> 00:08:58.171
function, args, super, args.

134
00:08:58.171 --> 00:09:01.041
This is,
if you don't provide a constructor,

135
00:09:01.041 --> 00:09:04.070
this is the constructor
that is provided for you.

136
00:09:04.070 --> 00:09:05.110
And so in our case,

137
00:09:05.110 --> 00:09:10.340
we could actually move all this here
put this dot in front of these.

138
00:09:10.340 --> 00:09:14.270
And that's identical to what we
had already in the first place.

139
00:09:14.270 --> 00:09:16.554
It's more code, so I don't like it.

140
00:09:16.554 --> 00:09:19.720
At least, it's more code that it
doesn't provide any more clarity and so

141
00:09:19.720 --> 00:09:21.130
I don't like it.

142
00:09:21.130 --> 00:09:26.444
And so, I get rid of this stuff and
just not use the constructor.

143
00:09:26.444 --> 00:09:28.579
I pretty much never use the constructor,

144
00:09:28.579 --> 00:09:32.304
like almost all the time because I
can accomplish my purposes like this.

145
00:09:36.650 --> 00:09:43.154
&gt;&gt; Kent C. Dodds: Any other questions
before we jump in to the next one?

146
00:09:43.154 --> 00:09:48.709
Okay, so for this next one,
we're actually gonna, yeah, question?

147
00:09:48.709 --> 00:09:49.797
&gt;&gt; Speaker 3: Feedback.

148
00:09:49.797 --> 00:09:50.810
&gt;&gt; Kent C. Dodds: Thank you.

149
00:09:50.810 --> 00:09:53.770
I'm gonna give you a high five at lunch.

150
00:09:53.770 --> 00:09:57.220
Yeah, so let's go ahead and
fill out your elaboration,

151
00:09:57.220 --> 00:10:01.710
write down what you learned, and then
update your test to say you submitted.

152
00:10:03.000 --> 00:10:06.310
And again, if you're tired of typing
your email in every time you can just do

153
00:10:06.310 --> 00:10:08.872
node scripts auto fill email feedback.

154
00:10:08.872 --> 00:10:11.563
It will ask for your email address and
pre-fill all of those for you.

155
00:10:16.562 --> 00:10:19.330
&gt;&gt; Kent C. Dodds: Isn't code so
cool that we could do that?

156
00:10:19.330 --> 00:10:22.750
I'm using a million modules to
accomplish this simple task,

157
00:10:22.750 --> 00:10:25.880
but the fact that I could
do that is pretty cool.

