WEBVTT

1
00:00:00.630 --> 00:00:03.880
&gt;&gt; Kent C. Dodds: All righty,
so one of my favorite patterns,

2
00:00:03.880 --> 00:00:06.740
right next to renderProps
is a state reducer pattern.

3
00:00:07.780 --> 00:00:12.180
So let's pop in our test here,
testing the exercise version.

4
00:00:13.210 --> 00:00:17.780
And the error that we're getting here
is actually if you look at the test

5
00:00:17.780 --> 00:00:19.210
it's kind of fun.

6
00:00:19.210 --> 00:00:21.710
We're just calling
toggle a bunch of times.

7
00:00:21.710 --> 00:00:27.590
I added little comments just to make
things a little less confusing.

8
00:00:27.590 --> 00:00:32.010
So, at toggle number five, so between
each one of these it should be off,

9
00:00:32.010 --> 00:00:34.750
it should be on, it should be off,
it should be on.

10
00:00:34.750 --> 00:00:38.160
And then when I toggle it
the fourth time it should be off.

11
00:00:38.160 --> 00:00:43.880
And then the rest of the times I try
to toggle it, it should stay off.

12
00:00:43.880 --> 00:00:47.240
And then we do some assertions to
make sure things are called properly.

13
00:00:48.610 --> 00:00:50.667
&gt;&gt; Kent C. Dodds: And so
where it's failing is,

14
00:00:50.667 --> 00:00:54.630
it's toggling at that fifth time,
but it should stay off.

15
00:00:54.630 --> 00:00:56.337
It's not, it's toggling on.

16
00:00:56.337 --> 00:01:01.292
So that is what we're going to solve here

17
00:01:01.292 --> 00:01:06.110
with our internal set state function.

18
00:01:07.220 --> 00:01:11.037
This is going to accept our updates or
you could call it changes,

19
00:01:11.037 --> 00:01:13.310
that's what I called it, callback.

20
00:01:15.100 --> 00:01:19.240
So the stimulate is the same
kind of API that set state has.

21
00:01:19.240 --> 00:01:24.390
So all of the times that you're
calling set state, you should now

22
00:01:24.390 --> 00:01:29.010
call Internal Set State, and it will take
care of Client Set State under the hood.

23
00:01:29.010 --> 00:01:30.890
So, that's what this koala bear was doing.

24
00:01:30.890 --> 00:01:33.290
I should have put them right there and
then right there,

25
00:01:33.290 --> 00:01:35.695
but it is what it is, sorry, Cody.

26
00:01:35.695 --> 00:01:41.530
Okay, so with that,
we're going to call this Set State.

27
00:01:41.530 --> 00:01:46.084
And we're get our state as an argument
to our updater function then we'll pass

28
00:01:46.084 --> 00:01:48.226
a call back as the second parameter.

29
00:01:48.226 --> 00:01:55.310
So we can call onToggle and
on reset when that states happened.

30
00:01:55.310 --> 00:01:57.530
Okay, so
now that we have the current state here.

31
00:01:57.530 --> 00:02:02.846
Maybe, I'll just differentiate
it by calling it current state.

32
00:02:02.846 --> 00:02:06.574
We need to get what the actual
changes are, because in some cases,

33
00:02:06.574 --> 00:02:08.930
the changes will just be an object.

34
00:02:08.930 --> 00:02:11.930
In other cases,
the changes could be a function.

35
00:02:11.930 --> 00:02:14.900
So we need to get what those changes are.

36
00:02:14.900 --> 00:02:18.430
So I'll have, let's see,
what did I call it?

37
00:02:18.430 --> 00:02:21.940
The, I don't know, actual changes,
or the changes object.

38
00:02:23.020 --> 00:02:28.780
So I called it, and they would say
type of changes, it's a function.

39
00:02:28.780 --> 00:02:35.140
Then I'll call it with the current
state otherwise we'll just use changes.

40
00:02:37.850 --> 00:02:41.489
Okay cool, and let's give myself
a little more room on the editors side.

41
00:02:42.780 --> 00:02:44.860
Okay, so
now we have the changes object and

42
00:02:44.860 --> 00:02:48.030
that's what we're gonna be
calling the state reducer with.

43
00:02:48.030 --> 00:02:55.344
So, I will say,
reducedChanges = this.props.stateReducer,

44
00:02:55.344 --> 00:03:00.488
with the currentState and
the changesObject.

45
00:03:02.437 --> 00:03:06.779
&gt;&gt; Kent C. Dodds: And its responsibility
is to take that changes object and

46
00:03:06.779 --> 00:03:08.530
return me a new one.

47
00:03:08.530 --> 00:03:13.329
And that's what I'm gonna return
from my updater, reduced changes.

48
00:03:18.430 --> 00:03:21.650
&gt;&gt; Kent C. Dodds: And that's it,
that's the simple case.

49
00:03:21.650 --> 00:03:27.050
There are a couple other things we need
to consider but that's the basic idea of

50
00:03:27.050 --> 00:03:32.840
a state reducer is it internally,
inside the component,

51
00:03:32.840 --> 00:03:36.780
you replace all usages of set
state with internal set state.

52
00:03:36.780 --> 00:03:40.770
And that uses an update or function
to get what the changes should be and

53
00:03:40.770 --> 00:03:46.920
then replaces or returns the reduced
version of those changes.

54
00:03:46.920 --> 00:03:51.800
Now, the reducer could just return
the changes objects that you give it.

55
00:03:51.800 --> 00:03:53.510
That's totally cool if it does that.

56
00:03:53.510 --> 00:03:58.470
Or it could totally change it totally
change it to something entirely different.

57
00:03:58.470 --> 00:04:01.292
But whatever it gives us back is
what we're gonna be returning.

58
00:04:05.257 --> 00:04:08.016
&gt;&gt; Kent C. Dodds: So there are a couple
other things that I wanna talk about

59
00:04:08.016 --> 00:04:08.800
here but.

60
00:04:08.800 --> 00:04:13.600
And I'll go ahead and
do this really quick actually.

61
00:04:15.140 --> 00:04:23.740
So let's say that the state
reducer will return null.

62
00:04:23.740 --> 00:04:27.470
Or, sorry, it returns an empty object,
in some cases.

63
00:04:27.470 --> 00:04:29.600
So return empty object.

64
00:04:31.210 --> 00:04:37.470
So in that case, there are no updates,
and so a rerender is not necessary.

65
00:04:37.470 --> 00:04:39.560
Because no state is going to be changed.

66
00:04:39.560 --> 00:04:46.840
And so up here, we can say object.keys,
reduce changes.length.

67
00:04:46.840 --> 00:04:50.820
So if it has keys,
then we'll return the reducechanges,

68
00:04:50.820 --> 00:04:54.193
otherwise we'll return null and that
will prevent or unnecessary re render.

69
00:04:56.430 --> 00:04:57.730
In addition to that,

70
00:04:57.730 --> 00:05:02.301
they could also return null from their
state reducer to indicate that hey.

71
00:05:02.301 --> 00:05:06.600
I don't want any changes and we want them
to be able to do either and it's fine.

72
00:05:06.600 --> 00:05:09.210
You want to return an object,
that's whatever.

73
00:05:09.210 --> 00:05:14.551
So we'll just add or an empty object so
it doesn't blow up when we do object keys.

74
00:05:14.551 --> 00:05:17.504
So if they return no,
we'll default that to an empty object.

75
00:05:20.628 --> 00:05:23.748
&gt;&gt; Kent C. Dodds: Okay, what questions
do you have about state reducers?

76
00:05:26.945 --> 00:05:28.905
&gt;&gt; Kent C. Dodds: Yeah?
&gt;&gt; off screen male: Props on using

77
00:05:28.905 --> 00:05:33.492
super.setstate and just making this

78
00:05:33.492 --> 00:05:38.375
dot set state transparent to the class?

79
00:05:38.375 --> 00:05:39.975
Or would you rather just be explicit?

80
00:05:39.975 --> 00:05:42.296
&gt;&gt; Kent C. Dodds: I see what you mean,
so like having set state.

81
00:05:42.296 --> 00:05:46.859
Yeah, yeah, and then super?

82
00:05:46.859 --> 00:05:51.220
Yeah, that's interesting,
that would be fine with me.

83
00:05:51.220 --> 00:05:57.483
I think that if I were to come into
a code base and see we're just set state.

84
00:05:57.483 --> 00:06:03.415
And then I realize that's actually
not set state as I'd imagined,

85
00:06:03.415 --> 00:06:06.920
that might be confusing to me.

86
00:06:06.920 --> 00:06:10.150
But I'm totally cool with that,
if you want to do it that way.

87
00:06:10.150 --> 00:06:13.920
Then these would be setState,
and that'd be kinda nice.

88
00:06:13.920 --> 00:06:18.440
Like you said, transparent like
everywhere else in the code.

89
00:06:19.970 --> 00:06:21.810
So yeah,
I'm pretty sure that will pass the test,

90
00:06:23.980 --> 00:06:25.650
feel free to do that if you want.

91
00:06:25.650 --> 00:06:27.669
Other questions, or
comments, observations?

92
00:06:30.668 --> 00:06:34.261
&gt;&gt; Kent C. Dodds: Okay, so one other
thing, I was going to do this but

93
00:06:34.261 --> 00:06:38.525
then I had some people review
my stuff before the workshop and

94
00:06:38.525 --> 00:06:41.550
they felt this was a little bit confusing.

95
00:06:41.550 --> 00:06:43.420
But I actually kind of like this.

96
00:06:43.420 --> 00:06:50.060
One thing that I did was I'd say
return this array of changes,

97
00:06:50.060 --> 00:06:55.110
and then I'd call map on it over and
over again and pull out the first one.

98
00:06:55.110 --> 00:06:58.806
And what this allows me to do is rather
than creating a bunch of variables,

99
00:06:58.806 --> 00:07:02.484
I can do this.

100
00:07:02.484 --> 00:07:05.053
See that.

101
00:07:07.610 --> 00:07:11.843
And then do this one, so

102
00:07:11.843 --> 00:07:17.137
that's the new changes, and

103
00:07:17.137 --> 00:07:22.642
each one plays into the next and

104
00:07:22.642 --> 00:07:30.574
we do this
&gt;&gt; Kent C. Dodds: And

105
00:07:30.574 --> 00:07:31.833
then we get rid of all this stuff.

106
00:07:34.468 --> 00:07:37.219
&gt;&gt; Kent C. Dodds: So if you're looking
at that and you're also confused,

107
00:07:37.219 --> 00:07:39.490
feel free to continue using the variables.

108
00:07:39.490 --> 00:07:44.100
But what I like about this is that
I can easily add more operations to

109
00:07:44.100 --> 00:07:47.840
the changes object without
having to create more variables.

110
00:07:47.840 --> 00:07:52.580
So what does this effectively doing as
we turn this into an array only for

111
00:07:52.580 --> 00:07:55.214
the purpose of being
able to come up on it.

112
00:07:55.214 --> 00:07:59.410
And it's gonna map the whole item and
we'll pull the last or the first item off,

113
00:07:59.410 --> 00:08:00.930
which is gonna be our one item.

114
00:08:00.930 --> 00:08:05.010
So we say, here our changes,
if its a function, then we'll call it and

115
00:08:05.010 --> 00:08:06.180
we'll turn the changes.

116
00:08:06.180 --> 00:08:08.800
And here are the changes
we're gonna reduce it and

117
00:08:08.800 --> 00:08:11.550
we'll return the changes,
here the changes.

118
00:08:11.550 --> 00:08:15.120
We'll check its length then
we'll return the changes.

119
00:08:15.120 --> 00:08:18.178
And then, so
you have to do it all the way.

120
00:08:18.178 --> 00:08:21.372
I kinda think it's look kinda clean but
if it's confusing to you all,

121
00:08:21.372 --> 00:08:24.996
then that's why I in the solutions,
that you will be working with these stuff,

122
00:08:24.996 --> 00:08:26.150
these is the very rules.

123
00:08:26.150 --> 00:08:32.869
But I just wanna show this to you,
if you wanna do this with, yeah, question.

124
00:08:32.869 --> 00:08:35.802
&gt;&gt; [INAUDIBLE].

125
00:08:35.802 --> 00:08:38.975
&gt;&gt; Kent C. Dodds: Okay, is there
something wrong with this implementation?

126
00:08:45.355 --> 00:08:54.070
&gt;&gt; Kent C. Dodds: Yeah, okay so, here
maybe I'll copy it over and test pass.

127
00:08:54.070 --> 00:08:59.448
So I'm gonna change setState to internal
or setState so I don't confuse myself.

128
00:09:06.453 --> 00:09:09.318
&gt;&gt; Kent C. Dodds: Okay, so their solution,

129
00:09:09.318 --> 00:09:14.432
comment that some more
aas something like this.

130
00:09:14.432 --> 00:09:19.983
And we'll change this to callback and

131
00:09:19.983 --> 00:09:22.936
just updater oops.

132
00:09:22.936 --> 00:09:28.790
Okay, so, there are couple of
problems with this implementation.

133
00:09:28.790 --> 00:09:32.580
So as we were talking about before,
you need to use.

134
00:09:32.580 --> 00:09:37.390
If you want your set state operation
to reference preexisting or

135
00:09:37.390 --> 00:09:42.390
the current state, and
to avoid issues with set state batching,

136
00:09:42.390 --> 00:09:46.320
then you don't want to
reference this.state.

137
00:09:46.320 --> 00:09:48.080
You'll use an updater function.

138
00:09:48.080 --> 00:09:53.050
So that's the first thing that I would say
to avoid here is, make sure that all of.

139
00:09:53.050 --> 00:09:57.230
The code that's referencing the current
state lives within an updated function,

140
00:09:57.230 --> 00:10:01.070
to avoid inconsistencies with a state.

141
00:10:02.190 --> 00:10:07.560
Other than that this essentially looks
pretty similar to what we had here,

142
00:10:07.560 --> 00:10:12.005
and, so, yeah,
other than that it's pretty much the same.

143
00:10:14.371 --> 00:10:17.395
&gt;&gt; Kent C. Dodds: Here,
the updates the user or the state reducer,

144
00:10:17.395 --> 00:10:22.890
whoever is using the state reducer could
actually return an empty object or null.

145
00:10:22.890 --> 00:10:27.451
And so that's why we're doing
this object.keys thing.

146
00:10:27.451 --> 00:10:32.360
But you could enforce in your API and say,
hey listen, if you don't want a re-render

147
00:10:32.360 --> 00:10:36.870
then return null If you return an object
then that's just what I'm gonna return.

148
00:10:36.870 --> 00:10:40.470
I just added the this little line for
convenience.

149
00:10:40.470 --> 00:10:44.020
So okay so

150
00:10:44.020 --> 00:10:50.220
taking this back to what the solution
is that you'll be looking at.

151
00:10:50.220 --> 00:10:52.880
Looks something like this.

152
00:10:56.480 --> 00:11:03.485
&gt;&gt; Kent C. Dodds: Okay,
what other questions do y'all have?

