WEBVTT

1
00:00:00.300 --> 00:00:01.170
&gt;&gt; Kent C. Dodds: State reducer,

2
00:00:01.170 --> 00:00:05.280
one of my favorite patterns ever,
I love this pattern.

3
00:00:06.280 --> 00:00:12.520
So this is actually,
incidentally this is a common pattern in

4
00:00:12.520 --> 00:00:18.370
React redux or sorry react reason,
reason-react, that's what it's called.

5
00:00:18.370 --> 00:00:23.110
So like all components have this
concept of a state reducer.

6
00:00:23.110 --> 00:00:28.910
I discovered it, I didn't invent it, but I
discovered it trying to solve a problem in

7
00:00:28.910 --> 00:00:34.000
downshift where people needed
to be able to control state but

8
00:00:34.000 --> 00:00:38.140
in a simpler way than control props
which we'll learn about later.

9
00:00:38.140 --> 00:00:42.730
But a state reducer,
if I render prop is responsible or

10
00:00:42.730 --> 00:00:46.130
enables users to control
how things are rendered.

11
00:00:46.130 --> 00:00:51.700
A state reducer enables people
to control how the logic works,

12
00:00:51.700 --> 00:00:57.340
how the state is managed and so
it actually has nothing to do with Redux.

13
00:00:57.340 --> 00:01:01.050
The only similarity is
the fact that the API for

14
00:01:01.050 --> 00:01:08.030
your reducer is a reducer like
function state and then your changes.

15
00:01:08.030 --> 00:01:12.770
But other than that, it's just reducer is

16
00:01:12.770 --> 00:01:17.781
a computer science topic, not Redux thing.

17
00:01:17.781 --> 00:01:20.346
So, here's the problem that
we're trying to solve,

18
00:01:20.346 --> 00:01:22.540
let's pop open the state
reducers examples.

19
00:01:22.540 --> 00:01:25.920
So, here we've got this situation where I

20
00:01:25.920 --> 00:01:29.160
wanna be able to control how
many times somebody clicks.

21
00:01:29.160 --> 00:01:31.410
They can't click more than four times,
if they do, I'll say well,

22
00:01:31.410 --> 00:01:34.600
you clicked too much,
I will disallow any more changes

23
00:01:35.780 --> 00:01:40.250
until you say reset, and
then I will let more happen, okay?

24
00:01:40.250 --> 00:01:42.040
Try again, it's like no,
you clicked too much.

25
00:01:42.040 --> 00:01:45.780
So that's what we're trying to do,
we're trying to jump into the toggle and

26
00:01:45.780 --> 00:01:51.210
say hey, based on my own state
I don't want you to update your

27
00:01:51.210 --> 00:01:56.270
state after this certain point or I want
to control how you're updating your state.

28
00:01:57.450 --> 00:02:01.520
So the implementation of this
is a little intrusive on

29
00:02:01.520 --> 00:02:04.500
how you implement the toggle component.

30
00:02:04.500 --> 00:02:07.590
You have to think more critically
about how you're updating state,

31
00:02:07.590 --> 00:02:12.780
because now the internal state of your
component is actually part of the API that

32
00:02:12.780 --> 00:02:13.840
you're providing.

33
00:02:13.840 --> 00:02:17.830
Because you want people to be able to
control how that state's being updated.

34
00:02:17.830 --> 00:02:20.630
So it kinda breaks encapsulation,
some of these things, but

35
00:02:20.630 --> 00:02:25.340
what it allows is a huge amount of
flexibility from the user standpoint.

36
00:02:25.340 --> 00:02:32.020
So a little extra complication on
implementation side, allowing for

37
00:02:32.020 --> 00:02:35.400
an enormous amount of flexibility
on the user side is a win for me.

38
00:02:35.400 --> 00:02:39.300
Especially if that means the alternative
would be even more complication

39
00:02:40.460 --> 00:02:42.160
on the implementation side anyway.

40
00:02:43.790 --> 00:02:48.420
So, let's look at the code for
how this is being used.

41
00:02:48.420 --> 00:02:51.420
It's a little bit bigger
of a usage example.

42
00:02:51.420 --> 00:02:57.320
So this usage has some state, keeps
track of how many times you're clicking.

43
00:02:57.320 --> 00:03:00.260
And we have an on toggle handler,

44
00:03:00.260 --> 00:03:05.159
handleToggle, that will update the state,
incrementing the times clicked.

45
00:03:06.360 --> 00:03:11.910
And then, yeah, just this handle
reset that doesn't really matter for

46
00:03:11.910 --> 00:03:17.170
your specific use cases here,
and then the toggleStateReducer.

47
00:03:17.170 --> 00:03:20.730
So this is the reducer function that
people are gonna be passing to you and

48
00:03:20.730 --> 00:03:23.180
you need to call this before
you actually set state.

49
00:03:24.560 --> 00:03:29.580
Okay, so toggle accepts that
state reducer prop, and

50
00:03:29.580 --> 00:03:31.680
it's going to call the function
with all of the state,

51
00:03:31.680 --> 00:03:35.790
the current state of the toggle,
and then the proposed changes.

52
00:03:35.790 --> 00:03:40.350
So these are the things, I'm updating
the on state from true to false.

53
00:03:40.350 --> 00:03:45.399
And so like what this will look like
is on is true when it's called.

54
00:03:47.070 --> 00:03:51.380
And so then inside of this state reducer,
we gonna say,

55
00:03:51.380 --> 00:03:56.490
okay if on my own stake,
if they have clicked more than or

56
00:03:56.490 --> 00:04:02.330
equal to 4 times,
then I'm gonna let you finish, but

57
00:04:02.330 --> 00:04:09.410
first I want to make sure that the on
state never changes from false.

58
00:04:09.410 --> 00:04:13.320
So feel free to update any other
state that you have internally, but

59
00:04:13.320 --> 00:04:16.190
the on state should
never change from false.

60
00:04:16.190 --> 00:04:18.230
It should always be false.

61
00:04:18.230 --> 00:04:22.930
And your toggle components is
gonna continue the state stuff and

62
00:04:22.930 --> 00:04:25.680
it's gonna use this to
set the state instead.

63
00:04:25.680 --> 00:04:28.800
And then it'll, yeah,

64
00:04:28.800 --> 00:04:33.960
the on state will never change from false
until this says it's okay to do that.

65
00:04:33.960 --> 00:04:39.430
So one tip is, because this needs to have,

66
00:04:39.430 --> 00:04:42.630
in our case right here we
don't actually need the state.

67
00:04:42.630 --> 00:04:47.040
But some toggle state reducers might need
to reference some other pieces of state.

68
00:04:47.040 --> 00:04:50.900
So this is why it's a state reducer,
is it accepts the false state object and

69
00:04:50.900 --> 00:04:51.490
the changes.

70
00:04:53.190 --> 00:04:58.772
So because it needs to have the current
state of the toggle component,

71
00:04:58.772 --> 00:05:04.359
you're gonna need to call this
function within a set state updater.

72
00:05:05.390 --> 00:05:09.190
So you'll say this.set State, updater
function and within that function you'll

73
00:05:09.190 --> 00:05:13.490
call this state reducer, so you can
pass the full state shape or object.

74
00:05:15.690 --> 00:05:19.120
Okay, and all those changes are gonna
need to happen right in here,

75
00:05:19.120 --> 00:05:23.710
in a new function you'll create and then
you'll make some updates to existing code.

