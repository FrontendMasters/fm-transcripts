WEBVTT

1
00:00:00.310 --> 00:00:02.490
&gt;&gt; Kent: And we're gonna open the primer.

2
00:00:02.490 --> 00:00:05.360
So this next one is
a big enough topic that

3
00:00:05.360 --> 00:00:10.300
combining it with the current
solution was a little bit much.

4
00:00:10.300 --> 00:00:13.810
And so we're gonna do a primer first and

5
00:00:13.810 --> 00:00:18.710
then we'll have you go
into the final exercise.

6
00:00:18.710 --> 00:00:23.510
Or into integrating the concept
with the rest of the component and

7
00:00:23.510 --> 00:00:26.530
so we'll do this like a normal exercise.

8
00:00:26.530 --> 00:00:29.460
We'll do the primer and then I'll do
the solution, so you can ask any questions

9
00:00:29.460 --> 00:00:34.100
then, we'll let you combine it with
the existing toggle component.

10
00:00:34.100 --> 00:00:37.630
But yeah, so this is vastly simplified.

11
00:00:37.630 --> 00:00:38.780
It's not using render prompts,

12
00:00:38.780 --> 00:00:42.400
it's not using a state reducer,
it's rendering its own thing.

13
00:00:43.480 --> 00:00:46.480
But let's talk really quick
about what this thing even is,

14
00:00:46.480 --> 00:00:47.990
why we even care about it.

15
00:00:49.130 --> 00:00:54.010
So if we go to this, our objective

16
00:00:54.010 --> 00:00:58.649
is to get two totally separate
components to synchronize their state.

17
00:00:59.790 --> 00:01:05.590
And, so in the exercise they're
not synchronizing, which is sad.

18
00:01:05.590 --> 00:01:10.540
So the way that this works,
from a user standpoint is we

19
00:01:10.540 --> 00:01:15.490
have this usage and
we have this bothOn property.

20
00:01:16.740 --> 00:01:21.236
And in here, whenever one of
these things toggles we call

21
00:01:21.236 --> 00:01:25.970
handleToggle and it will set both
on to whatever the value is.

22
00:01:25.970 --> 00:01:28.370
So I click on this one
it turns them both on,

23
00:01:28.370 --> 00:01:29.980
I click on this one it
turns them both off.

24
00:01:29.980 --> 00:01:33.340
So which ever one changed most
recently is the state for

25
00:01:33.340 --> 00:01:38.900
both of them, and, yeah,
ignore the toggle ref stuff.

26
00:01:38.900 --> 00:01:44.181
This is just stuff from my for the test so
implementation details for the test.

27
00:01:45.870 --> 00:01:50.310
But the key difference here between
the existing toggle component

28
00:01:50.310 --> 00:01:54.500
is that we now have an on prop and
this is the control prop.

29
00:01:54.500 --> 00:01:59.020
So how many people are familiar
with controlled inputs or

30
00:01:59.020 --> 00:02:00.780
controlled form elemnts?

31
00:02:00.780 --> 00:02:03.330
Okay great, this is it, that's what it is.

32
00:02:03.330 --> 00:02:05.490
We're implementing that pattern here.

33
00:02:05.490 --> 00:02:09.230
So, if you add a value
property to an input,

34
00:02:09.230 --> 00:02:11.330
you get an error message in the console.

35
00:02:11.330 --> 00:02:12.460
Okay, what does that say?

36
00:02:13.570 --> 00:02:17.656
You don't have to say it verbatim, I know
I've memorized all the error message, but

37
00:02:17.656 --> 00:02:18.639
you don't have to.

38
00:02:18.639 --> 00:02:20.931
&gt;&gt; [LAUGH]
&gt;&gt; Kent: Just kidding,

39
00:02:20.931 --> 00:02:27.060
no it says you're controlling an input,
but not providing an onChange.

40
00:02:27.060 --> 00:02:31.250
So it's read only,
the value will never change.

41
00:02:31.250 --> 00:02:33.740
The user can type in it
as much as they want,

42
00:02:33.740 --> 00:02:37.730
nothing is gonna happen because you've
taken control of the value of that input.

43
00:02:40.460 --> 00:02:46.020
And then the onChange prop is there to
make suggestions to you to say hey,

44
00:02:46.020 --> 00:02:50.220
based off of the way my inner
workings work, how I update my state

45
00:02:50.220 --> 00:02:54.210
when I'm in control ,this is what I'd
suggest you update your state toBe.

46
00:02:54.210 --> 00:02:55.510
But you do it whatever you want to.

47
00:02:55.510 --> 00:02:59.230
So you can uppercase the string, you do
whatever else you wanna do with that.

48
00:02:59.230 --> 00:03:01.590
That's where we're implementing for
the toggle component.

49
00:03:01.590 --> 00:03:08.597
We say, hey, so,
I control this on state internally and

50
00:03:08.597 --> 00:03:12.760
whenever the user clicks on that toggle or
that switch,

51
00:03:12.760 --> 00:03:17.400
I update that on state to be
the opposite of what it was before.

52
00:03:17.400 --> 00:03:21.220
So that's what I would do, but
you can do whatever you want with that.

53
00:03:21.220 --> 00:03:26.620
And so in our case,
whatever we want is to update,

54
00:03:26.620 --> 00:03:30.920
when this handle toggle
is called we update it

55
00:03:30.920 --> 00:03:36.630
to be whatever that is, and then we re
render it to have the state we want it to.

56
00:03:36.630 --> 00:03:40.340
So, like in Angular 1 land this
would be like two way binding and

57
00:03:40.340 --> 00:03:42.787
that was the demo that caught us all.

58
00:03:42.787 --> 00:03:47.900
My goodness that wasn't even any code,
it was just template stuff.

59
00:03:47.900 --> 00:03:52.950
So, this is like implementing two way
binding in this particular example by

60
00:03:52.950 --> 00:03:57.620
allowing for this prompt to be
passed to control that state.

61
00:03:59.200 --> 00:04:07.530
So, let's go ahead and take a look at the
implementation and get this written out.

62
00:04:07.530 --> 00:04:10.470
And you're gonna add a function
called isOnControlled.

63
00:04:10.470 --> 00:04:13.160
You're gonna add a function
called getState because now

64
00:04:13.160 --> 00:04:17.450
state can either come from props,
or it can come from state.

65
00:04:17.450 --> 00:04:22.400
It's gonna come from one or the other not
both, do not try to synchronize state and

66
00:04:22.400 --> 00:04:23.850
props, it's not a good idea.

67
00:04:23.850 --> 00:04:26.510
Just get it from one or the other and

68
00:04:26.510 --> 00:04:31.610
then inside of toggle, if it's controlled
then you should just call onToggle,

69
00:04:31.610 --> 00:04:35.750
don't try to call setState cuz you don't
need to set state if it's controlled,

70
00:04:35.750 --> 00:04:37.200
you're not managing it yourself anyway.

71
00:04:37.200 --> 00:04:39.930
It could cause unnecessary re-render.

72
00:04:39.930 --> 00:04:42.280
And then if it's not controlled,

73
00:04:42.280 --> 00:04:45.110
then you can keep doing what
we've always been doing.

74
00:04:45.110 --> 00:04:50.510
And then here you wanna get
state from the getState method,

75
00:04:50.510 --> 00:04:53.600
because now that state can
come from props or state.

76
00:04:53.600 --> 00:04:58.170
So okay, I'll let you off on that,

77
00:04:58.170 --> 00:05:03.510
we'll run npm t and
swap these two in here.

78
00:05:04.760 --> 00:05:09.180
By the way, the test that you find in this
repo, some of them are good tests and

79
00:05:09.180 --> 00:05:10.600
some of them are very bad tests.

80
00:05:10.600 --> 00:05:13.170
And I would never recommend that
you write tests like this for

81
00:05:13.170 --> 00:05:15.780
your react components,
cuz lots of these are testing your

82
00:05:15.780 --> 00:05:18.850
implementation details cuz I'm
testing your implementation, right?

83
00:05:18.850 --> 00:05:23.220
So, come to my workshops in the next
couple of days to learn more about that.

84
00:05:23.220 --> 00:05:26.390
But I forgot to mention that cuz
some people are gonna be like,

85
00:05:26.390 --> 00:05:27.660
this is how I should test stuff.

86
00:05:27.660 --> 00:05:28.260
No, please don't.

