WEBVTT

1
00:00:00.790 --> 00:00:04.350
&gt;&gt; Kent C. Dodds: All righty,
so let's get this primer going.

2
00:00:05.670 --> 00:00:08.820
Switch over to exercises,
npm t to run the tests.

3
00:00:10.740 --> 00:00:11.943
And.

4
00:00:14.281 --> 00:00:15.775
&gt;&gt; Kent C. Dodds: Yeah,
there are a couple of things that we need.

5
00:00:15.775 --> 00:00:20.610
So the first thing, I need to determine
whether or not my state is controlled.

6
00:00:20.610 --> 00:00:22.470
So specifically my on state.

7
00:00:22.470 --> 00:00:25.083
So we can isOnControlled.

8
00:00:25.083 --> 00:00:27.652
And because I'm going to
be the one calling it,

9
00:00:27.652 --> 00:00:30.110
I'm not passing as a callback or anything.

10
00:00:30.110 --> 00:00:31.395
I can make this a regular method.

11
00:00:31.395 --> 00:00:34.070
I don't have to do the whole
arrow function thing.

12
00:00:35.240 --> 00:00:37.670
So, regular old method.

13
00:00:37.670 --> 00:00:40.482
And I'll return this.props.

14
00:00:40.482 --> 00:00:42.185
Well, here,
I kinda gave you the answer right there.

15
00:00:42.185 --> 00:00:47.840
That's what Money Bag Marty
is all about is the answers.

16
00:00:48.900 --> 00:00:54.283
So then we'll add a getState function and
this will return an object.

17
00:00:54.283 --> 00:01:00.291
And that has the on property,
is this.isOnControlled,

18
00:01:00.291 --> 00:01:05.420
so if it is controlled,
where will you get it?

19
00:01:05.420 --> 00:01:05.940
&gt;&gt; off screen male: Props.

20
00:01:05.940 --> 00:01:06.510
&gt;&gt; Kent C. Dodds: Props.

21
00:01:07.850 --> 00:01:11.584
Otherwise, this.state.on.

22
00:01:11.584 --> 00:01:12.930
Great.

23
00:01:12.930 --> 00:01:15.540
So we got those two taken care of.

24
00:01:17.920 --> 00:01:24.800
And then in our toggle, if, actually here,
before we do that let's update down here.

25
00:01:24.800 --> 00:01:27.310
Instead of, actually pretty

26
00:01:27.310 --> 00:01:32.350
much everywhere we'll use this.state
we're gonna wanna use this.

27
00:01:32.350 --> 00:01:34.940
Except for where we're actually at.

28
00:01:34.940 --> 00:01:37.815
Okay, just be these two places,
this.getState.

29
00:01:40.303 --> 00:01:42.433
&gt;&gt; Kent C. Dodds: Cuz now they
can come from either place.

30
00:01:42.433 --> 00:01:44.920
Okay, cool.

31
00:01:44.920 --> 00:01:50.180
So then, if this.isControlled or
isOnControlled

32
00:01:50.180 --> 00:01:56.400
then we're simply going to
call this with our suggestion.

33
00:01:56.400 --> 00:02:03.331
So we're saying, hey, if it were me,
I would update it like this.

34
00:02:03.331 --> 00:02:08.152
Our suggestion is to update it to be
the inverse of what it currently is.

35
00:02:08.152 --> 00:02:13.116
Otherwise, I'm gonna manage it myself and
update my own state.

36
00:02:16.822 --> 00:02:18.640
&gt;&gt; Kent C. Dodds: And
that gets our test passing.

37
00:02:20.280 --> 00:02:22.990
Okay, so that's control props.

38
00:02:22.990 --> 00:02:28.170
I'm not sure exactly how the input
component in React is implemented.

39
00:02:28.170 --> 00:02:32.530
But I'd like to imagine or dream or
make up that it works like this.

40
00:02:32.530 --> 00:02:34.950
[LAUGH] Something like this, anyway.

41
00:02:36.300 --> 00:02:37.774
So what questions do you
have about this pattern?

42
00:02:40.619 --> 00:02:42.950
&gt;&gt; Kent C. Dodds: This is
actually a very common pattern.

43
00:02:42.950 --> 00:02:43.620
It's been.

44
00:02:43.620 --> 00:02:44.642
Yeah, people.

45
00:02:44.642 --> 00:02:47.970
I mean, this is beginning of React stuff.

46
00:02:47.970 --> 00:02:50.745
Definitely useful stuff.

47
00:02:54.842 --> 00:02:58.509
&gt;&gt; Kent C. Dodds: So in some ways, it's
actually similar to state initializers,

48
00:02:58.509 --> 00:03:02.924
because you could actually use this to
not only control but initialize state.

49
00:03:02.924 --> 00:03:07.747
And then you just on change,
or in this case, on toggle,

50
00:03:07.747 --> 00:03:11.166
you just keep the parent state updated.

51
00:03:11.166 --> 00:03:15.698
And so combining this with state
initializers is good because it allows

52
00:03:15.698 --> 00:03:19.262
people to either initialize it or
entirely control it.

53
00:03:23.095 --> 00:03:24.300
&gt;&gt; Kent C. Dodds: Okay, cool.

54
00:03:24.300 --> 00:03:29.780
So let's go ahead and
jump into the elaboration.

55
00:03:29.780 --> 00:03:35.130
So Marios online is saying, why don't
we use componentWillReceiveProps for

56
00:03:35.130 --> 00:03:37.690
this and
update state in there accordingly?

57
00:03:37.690 --> 00:03:42.033
I'm actually glad that he asked,
he or she asked that.

58
00:03:42.033 --> 00:03:48.240
So that is actually called
synchronizing state.

59
00:03:48.240 --> 00:03:49.520
Sychronizing state with props.

60
00:03:49.520 --> 00:03:52.390
So componentWillReceiveProps.

61
00:03:52.390 --> 00:03:57.320
And you say, like if the next
props has the on property,

62
00:03:57.320 --> 00:04:02.340
then this.setState on is
whatever that value is.

63
00:04:02.340 --> 00:04:06.420
So that would simplify some things but
complicate others.

64
00:04:07.690 --> 00:04:11.833
Because now you have two sources
of truth in your component.

65
00:04:11.833 --> 00:04:13.750
And it becomes a little
harder to maintain.

66
00:04:13.750 --> 00:04:20.610
So in general, it's, yeah,
it's just make things a lot easier.

67
00:04:20.610 --> 00:04:22.883
In addition,
this is actually a deprecated method.

68
00:04:22.883 --> 00:04:27.527
[LAUGH] So, you could use
getDerivedStateFromProps and actually you

69
00:04:27.527 --> 00:04:32.980
could implement these with that as well,
the new replacement for this use case.

70
00:04:34.730 --> 00:04:40.580
But I've found that it's a lot simpler to
just have a single source of truth for

71
00:04:40.580 --> 00:04:44.180
where your state is coming from and

72
00:04:44.180 --> 00:04:48.040
it makes the rest of
the implementation simpler.

73
00:04:48.040 --> 00:04:49.704
Hopefully that answers the question.

74
00:04:53.812 --> 00:04:55.480
&gt;&gt; Kent C. Dodds: Okay, cool.

75
00:04:55.480 --> 00:04:59.435
So yeah, one person,
please tell me what you learned.

76
00:05:04.191 --> 00:05:07.382
&gt;&gt; off screen male: I learned that if the
[LAUGH] you can't just do a simple Boolean

77
00:05:07.382 --> 00:05:09.920
check on this prop set on
if it is uncontrolled.

78
00:05:09.920 --> 00:05:10.643
&gt;&gt; Kent C. Dodds: Okay.
&gt;&gt; off screen male: Cuz then it'll

79
00:05:10.643 --> 00:05:11.200
set to false.
&gt;&gt; Kent C. Dodds: Yes.

80
00:05:11.200 --> 00:05:13.500
&gt;&gt; off screen male: So
we need to explicitly check for undefined.

81
00:05:13.500 --> 00:05:14.620
&gt;&gt; Kent C. Dodds: Yeah, yeah.

82
00:05:14.620 --> 00:05:17.240
So yeah, you wanna check for undefined.

83
00:05:17.240 --> 00:05:22.822
You might also do like null, like maybe
null means I don't wanna control it.

84
00:05:22.822 --> 00:05:27.325
But I actually like people being
able to control it with null, so.

85
00:05:27.325 --> 00:05:29.900
But yeah, good, good point.

86
00:05:29.900 --> 00:05:30.670
Okay, that was one.

87
00:05:30.670 --> 00:05:32.424
So thanks.

88
00:05:32.424 --> 00:05:34.359
You get a high five.

