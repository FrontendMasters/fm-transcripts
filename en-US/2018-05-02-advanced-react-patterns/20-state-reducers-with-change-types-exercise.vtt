WEBVTT

1
00:00:00.030 --> 00:00:03.500
&gt;&gt; Kent: Still on the eight
exercise on the usage, so

2
00:00:03.500 --> 00:00:04.910
here's my toggle state reducer.

3
00:00:06.130 --> 00:00:10.890
What if certain things like,
in downshift for example,

4
00:00:10.890 --> 00:00:16.700
it's a drop-down component,
state can change in many different ways.

5
00:00:16.700 --> 00:00:19.220
The user can click on the drop-down
arrow that'll open it up,

6
00:00:19.220 --> 00:00:20.810
that's one different action.

7
00:00:20.810 --> 00:00:23.124
User can start typing,
that'll open things up.

8
00:00:23.124 --> 00:00:26.110
The user can select
an item that'll close it.

9
00:00:26.110 --> 00:00:28.040
There are lots of different interactions,

10
00:00:28.040 --> 00:00:33.280
and lots of set state calls internal
state set calls that happen.

11
00:00:33.280 --> 00:00:36.851
And if anybody wants to use
the toggle state reducer effectively,

12
00:00:36.851 --> 00:00:39.795
they need to know what is
causing the set state change.

13
00:00:39.795 --> 00:00:45.189
So if I want to make it so that when
a user starts typing into the input,

14
00:00:45.189 --> 00:00:51.606
it doesn't actually open the menu, then
I would need, inside my state reducer,

15
00:00:51.606 --> 00:00:57.758
I need to be able to say check some sort
of type that says, here are the changes.

16
00:00:57.758 --> 00:01:01.120
And the reason they are changing
is cuz the user's typing.

17
00:01:01.120 --> 00:01:04.980
And if that's happening, then I say, no,
I don't want this is open to be true,

18
00:01:04.980 --> 00:01:06.950
I want it to stay false.

19
00:01:06.950 --> 00:01:08.820
So there are lots of use cases,

20
00:01:08.820 --> 00:01:12.280
different situations where you
actually want to control the state.

21
00:01:12.280 --> 00:01:18.830
But only when the state is changing for
certain reasons.

22
00:01:18.830 --> 00:01:23.420
What our next exercise is all
about is providing a type for

23
00:01:23.420 --> 00:01:28.520
your state changes so that this reducer

24
00:01:28.520 --> 00:01:32.970
knows why is that thing updating.

25
00:01:34.580 --> 00:01:37.950
So that is in exercise number nine.

26
00:01:41.947 --> 00:01:45.357
&gt;&gt; Kent: And
all of your changes are actually, yeah,

27
00:01:45.357 --> 00:01:50.870
[INAUDIBLE] will help you know
where you need to apply changes.

28
00:01:50.870 --> 00:01:54.980
And, yeah, you'll notice, and

29
00:01:54.980 --> 00:01:59.740
the implementation actually
if you look at this.

30
00:01:59.740 --> 00:02:04.780
Once we get to clicking too much,
we render a Force Toggle.

31
00:02:04.780 --> 00:02:07.240
And that will continue
to allow us to toggle,

32
00:02:07.240 --> 00:02:09.350
even though we can't toggle on the input.

33
00:02:09.350 --> 00:02:11.980
We can click this force
toggle to force it to

34
00:02:12.980 --> 00:02:16.400
toggle despite the fact that we
clicked the toggle too much.

35
00:02:16.400 --> 00:02:22.050
And so this new type allows us to do that,
and so that's yeah.

36
00:02:22.050 --> 00:02:24.210
That's the use case that we're
trying to solve for, and

37
00:02:24.210 --> 00:02:27.090
the implementation of that code
we have the toggle state reducer.

38
00:02:28.090 --> 00:02:30.360
Changes has a type property on it now.

39
00:02:31.540 --> 00:02:34.826
And if the type is forced,
then we'll do the changes, and

40
00:02:34.826 --> 00:02:37.323
that forced is coming from ourselves here.

41
00:02:37.323 --> 00:02:41.769
We have the Force Toggle, we call toggle.

42
00:02:41.769 --> 00:02:44.120
Sorry, this is a little bit confusing.

43
00:02:45.270 --> 00:02:49.630
Rats, the naming is unfortunate.

44
00:02:49.630 --> 00:02:54.300
But what you could actually
call this is like toggleutils.

45
00:02:55.440 --> 00:02:57.430
That's what it should be called.

46
00:02:57.430 --> 00:03:00.562
So you could open a pull request and
fix that just so it's less confusing.

47
00:03:00.562 --> 00:03:06.992
Yeah, so toggleutils.toggle and
we're gonna pass a type.

48
00:03:06.992 --> 00:03:11.650
And then that type is gonna be wired
through to our changes here, okay?

49
00:03:11.650 --> 00:03:17.220
So we know, this is forced type, so
we'll continue on with the changes.

50
00:03:17.220 --> 00:03:23.070
In addition, each time you call internal
set state, you should also pass a type

51
00:03:23.070 --> 00:03:28.790
in your set state call so
that I could be aware in my state reducer.

52
00:03:28.790 --> 00:03:35.549
This is the reset type, so that's cool to
change or whatever else the case may be.

53
00:03:35.549 --> 00:03:38.530
Okay, any questions about this one?

54
00:03:39.930 --> 00:03:43.230
Okay, we're gonna do 15 minutes for
this, and yeah.

55
00:03:43.230 --> 00:03:47.813
Actually, let's go ahead and
get things started here.

56
00:03:47.813 --> 00:03:49.749
We'll swap those.

57
00:03:49.749 --> 00:03:56.240
I'm gonna actually reset hard just
to keep things nice and clean.

58
00:03:56.240 --> 00:03:58.629
npm t to start up the test.

59
00:04:01.810 --> 00:04:03.720
&gt;&gt; Kent: And
you should be good to rock and roll.

