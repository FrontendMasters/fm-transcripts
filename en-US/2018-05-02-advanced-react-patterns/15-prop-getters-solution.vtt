WEBVTT

1
00:00:00.840 --> 00:00:03.850
&gt;&gt; Kent C. Dodds: So let's go ahead,
and I'll work through this solution.

2
00:00:03.850 --> 00:00:08.670
We've got our test running and
we've switched to the exercise version.

3
00:00:09.720 --> 00:00:14.730
So what's failing right now is
getTogglerProps isn't defined.

4
00:00:14.730 --> 00:00:18.110
We're not passing it from our
getStateAndHelpers function.

5
00:00:18.110 --> 00:00:21.851
So let's go ahead and define it.

6
00:00:21.851 --> 00:00:26.582
And this is, [COUGH] sorry,
it's going to be a function so, [SOUND.

7
00:00:26.582 --> 00:00:28.802
And actually I'm gonna
extract it from this and

8
00:00:28.802 --> 00:00:31.030
getStateAndHelpers just
to keep it separate.

9
00:00:31.030 --> 00:00:35.390
So we'll say this.getTogglerProps and

10
00:00:35.390 --> 00:00:39.520
we'll put it right here,
it's going to accept props.

11
00:00:39.520 --> 00:00:43.700
As we see in our usage here, we have some
props that we wanna play to the button,

12
00:00:43.700 --> 00:00:45.670
so we gonna accept those props.

13
00:00:45.670 --> 00:00:50.284
And the first thing that we wanna do is
make sure we return object that has all

14
00:00:50.284 --> 00:00:51.173
those props.

15
00:00:51.173 --> 00:00:54.490
And so, if you passes an ID, I don't care.

16
00:00:54.490 --> 00:00:57.810
You want that ID,
that's fine, I don't care.

17
00:00:57.810 --> 00:01:00.676
But I'm gonna pull off a couple
things I do care about.

18
00:01:00.676 --> 00:01:02.800
So I'm gonna actually
gonna destructure this and

19
00:01:02.800 --> 00:01:06.930
pull out everything else that
I'm not pulling off myself.

20
00:01:06.930 --> 00:01:10.400
So some things I do
care about are onClick.

21
00:01:10.400 --> 00:01:11.740
It's actually the only one I care about.

22
00:01:13.610 --> 00:01:16.840
And in this case,
instead of the onClick that you provide,

23
00:01:16.840 --> 00:01:20.330
I'm gonna provide my own,
onClick is a function.

24
00:01:22.220 --> 00:01:27.088
And this thing is going to call their
onClick with all the arguments,

25
00:01:27.088 --> 00:01:31.520
args onClick args.

26
00:01:31.520 --> 00:01:34.273
And then it's also going
to call this.toggle.

27
00:01:38.532 --> 00:01:42.350
&gt;&gt; Kent C. Dodds: And
not always will onClick be provided.

28
00:01:42.350 --> 00:01:43.850
So let's do onClick.

29
00:01:45.120 --> 00:01:50.040
This is one case where I'm cool doing just
ampersand, ampersand, cuz, I don't know.

30
00:01:50.040 --> 00:01:52.491
I don't know why I'm cool with that,
but I like it.

31
00:01:52.491 --> 00:01:56.300
&gt;&gt; off screen male: [LAUGH]
&gt;&gt; Kent C. Dodds: So this.toggle.

32
00:01:56.300 --> 00:01:59.075
What is happening to, wait.

33
00:01:59.075 --> 00:02:03.512
[SOUND] So the problem is this
is not bound to anything.

34
00:02:03.512 --> 00:02:08.919
But I mean, arrow function
&gt;&gt; Kent C. Dodds: [SOUND] What is wrong?

35
00:02:08.919 --> 00:02:10.150
Sorry, I'm gonna have to cheat.

36
00:02:10.150 --> 00:02:12.180
Sorry, sorry, sorry, don't look at me.

37
00:02:14.005 --> 00:02:17.570
Yeah, I just, that's weird.

38
00:02:17.570 --> 00:02:21.560
Sorry, I just write it a little
bit less or more terse.

39
00:02:22.740 --> 00:02:25.280
I'm not sure why that's
any different though.

40
00:02:25.280 --> 00:02:27.230
&gt;&gt; off screen male: It's
probably cuz it's a class method.

41
00:02:27.230 --> 00:02:27.730
Yeah.

42
00:02:28.920 --> 00:02:29.700
&gt;&gt; Kent C. Dodds: Wait, what?

43
00:02:29.700 --> 00:02:30.780
&gt;&gt; off screen male: Yeah, that's it.

44
00:02:30.780 --> 00:02:31.810
It's not a bound function.

45
00:02:33.040 --> 00:02:35.113
&gt;&gt; Kent C. Dodds: You're right,
you're right, you're right, thank you.

46
00:02:36.627 --> 00:02:39.531
&gt;&gt; Kent C. Dodds: [SOUND] Thank you so
much.

47
00:02:39.531 --> 00:02:43.456
So actually we're missing something,
we also need aria-expanded.

48
00:02:43.456 --> 00:02:49.483
So that's my bad,
cuz that should throw an error.

49
00:02:49.483 --> 00:02:54.332
But yeah, so that's the basic idea.

50
00:02:54.332 --> 00:02:56.754
It's kind of annoying
to have to write this,

51
00:02:56.754 --> 00:02:59.000
especially if you have several of those.

52
00:02:59.000 --> 00:03:04.152
So I have a little utility that I
have in downshift, this callAll.

53
00:03:04.152 --> 00:03:09.670
Which is kind of hard to say, but
it accepts any number of functions and

54
00:03:09.670 --> 00:03:12.670
returns a function which accepts
any number of arguments.

55
00:03:12.670 --> 00:03:13.980
And then for each of the functions,

56
00:03:13.980 --> 00:03:18.490
it's going to call it if it
exists with all those arguments.

57
00:03:18.490 --> 00:03:23.270
So effectively, it's the exact same
thing as this, except made generic.

58
00:03:23.270 --> 00:03:28.459
So we'll just say callAll, this.toggle and

59
00:03:28.459 --> 00:03:32.990
onClick, and that works just the same.

60
00:03:35.580 --> 00:03:40.500
This is really handy and now we don't
actually need the toggle props anymore.

61
00:03:40.500 --> 00:03:43.290
And they can just do that.

62
00:03:44.900 --> 00:03:46.680
We could even simplify this further,

63
00:03:46.680 --> 00:03:49.190
which is what I do in the final
example that you'll be working with.

64
00:03:51.290 --> 00:03:54.281
It's implicit return I think.

65
00:03:56.762 --> 00:03:57.820
&gt;&gt; Kent C. Dodds: All right.

66
00:03:57.820 --> 00:03:58.920
Yeah, Mark?

67
00:03:58.920 --> 00:04:00.320
&gt;&gt; off screen male: Adrian has a nitpick.

68
00:04:00.320 --> 00:04:04.220
Shouldn't we toggle first in case
the given function blows up?

69
00:04:04.220 --> 00:04:05.990
&gt;&gt; Kent C. Dodds: Shouldn't
we toggle first?

70
00:04:05.990 --> 00:04:06.770
Good question.

71
00:04:06.770 --> 00:04:09.351
So before, in my first example,

72
00:04:09.351 --> 00:04:14.940
it was onClick was called first and
then this.toggle was called.

73
00:04:14.940 --> 00:04:19.370
And Adrian is asking, so
what if this onClick function blows up?

74
00:04:19.370 --> 00:04:21.670
Now our toggle function won't be called.

75
00:04:21.670 --> 00:04:23.176
Yeah, that's true.

76
00:04:23.176 --> 00:04:26.590
If the onClick function blows
up then we can't really

77
00:04:26.590 --> 00:04:29.660
reasonably rely on the state
of the world anymore anyway.

78
00:04:29.660 --> 00:04:34.090
And so,
I wouldn't concern myself with that.

79
00:04:34.090 --> 00:04:36.380
If you want to,
you could add a tri catch to this.

80
00:04:37.540 --> 00:04:40.670
But if something unexpected happens,

81
00:04:40.670 --> 00:04:46.010
then updating the state
probably will still

82
00:04:46.010 --> 00:04:50.950
have unexpected results anyway,
so it's not worth the concern.

83
00:04:50.950 --> 00:04:54.987
Also, I prefer to do my own work
internally before I let other

84
00:04:54.987 --> 00:04:59.200
people operate, so
that's why I have toggle before onClick.

85
00:04:59.200 --> 00:05:03.398
I can't really justify that though,
so it is what it is.

86
00:05:03.398 --> 00:05:04.990
[LAUGH] It's just personal preference.

87
00:05:06.770 --> 00:05:13.104
Actually I sort of can, so in downshift,
we don't have an exercise for this.

88
00:05:13.104 --> 00:05:16.860
But what if I don't want
the built in onClick to fire.

89
00:05:16.860 --> 00:05:21.116
Well, in downshift you can add like
monkey patcher property onto the event.

90
00:05:21.116 --> 00:05:28.640
That's called disable downshifts default
or built in, or some weird thing.

91
00:05:28.640 --> 00:05:31.410
It's very edge casey.

92
00:05:31.410 --> 00:05:34.800
But then,
I have this callAll event handlers and

93
00:05:34.800 --> 00:05:39.730
it's not gonna call any additional event
handlers if that property is set to true.

94
00:05:39.730 --> 00:05:41.292
So you can go look in the source code for
that.

95
00:05:41.292 --> 00:05:46.950
It's pretty edge casey, but it's a useful
mechanism for people to hook in and

96
00:05:46.950 --> 00:05:52.530
say given the state of my component,
I don't want you to do your normal thing.

97
00:05:52.530 --> 00:05:55.330
We have other mechanisms to control state,
and

98
00:05:55.330 --> 00:05:59.930
so that's one of the reasons why
I'm not showing you how to do that.

99
00:05:59.930 --> 00:06:02.420
But that's something that
you could look into as well.

100
00:06:02.420 --> 00:06:09.340
Another thing that we're not gonna cover,
but you might also consider is you

101
00:06:09.340 --> 00:06:16.140
could create a button component
right here as a helper.

102
00:06:16.140 --> 00:06:19.250
And then this could be responsible for

103
00:06:19.250 --> 00:06:23.243
rendering your switch or
whatever, golly gee.

104
00:06:23.243 --> 00:06:25.000
It could be responsible for
rendering a switch.

105
00:06:25.000 --> 00:06:30.760
And then users here could pull out
the button and render that button.

106
00:06:30.760 --> 00:06:34.337
And so, it could have all the props
be populated and everything else and

107
00:06:34.337 --> 00:06:36.313
then they could add additional props.

108
00:06:36.313 --> 00:06:39.917
The reason I don't like that is because I
like giving users complete control over

109
00:06:39.917 --> 00:06:41.352
how they're rendering stuff.

110
00:06:41.352 --> 00:06:47.306
And so, I feel like prop getters are a
pretty good way to give that freedom and

111
00:06:47.306 --> 00:06:50.060
also have a pretty nice API.

112
00:06:50.060 --> 00:06:51.490
But that's something else to consider.

113
00:06:51.490 --> 00:06:57.250
You can really do just about anything
with the Render Prop API and

114
00:06:57.250 --> 00:06:59.110
what you're passing to the consumer.

115
00:06:59.110 --> 00:07:03.480
So let your imagination run wild and
do some fun things,

116
00:07:03.480 --> 00:07:07.380
make mistakes, take chances,
and get messy, all that stuff.

