WEBVTT

1
00:00:00.180 --> 00:00:04.290
&gt;&gt; Kent C. Dodds: Great,
let's move on to the next exercise then.

2
00:00:04.290 --> 00:00:08.510
So, here we go on the app first and
compound components.

3
00:00:09.670 --> 00:00:13.550
So here, it's not a whole lot different
except you have this text up here

4
00:00:13.550 --> 00:00:15.910
that says the button is on,
the button is off.

5
00:00:15.910 --> 00:00:19.300
On the exercise we don't have that,
it's not working.

6
00:00:19.300 --> 00:00:25.060
So, let's go head and
pop open 02 in the exercise.

7
00:00:29.660 --> 00:00:34.621
So if we look at the usage down here at
the bottom, you'll find, and actually,

8
00:00:34.621 --> 00:00:37.804
sorry, real quick,
somebody asked me what is this

9
00:00:37.804 --> 00:00:43.260
.title property I'm putting on the usage
that's actually just for this.

10
00:00:43.260 --> 00:00:49.552
So it's nothing weird magic,
it's just implementation detail.

11
00:00:49.552 --> 00:00:53.317
So the API to the usage
function didn't change.

12
00:00:53.317 --> 00:00:56.210
And we're still accepting onToggling
defaulting it to console line.

13
00:00:56.210 --> 00:01:00.370
So if you pop open in your console,
you should see those logs, so

14
00:01:00.370 --> 00:01:04.190
our toggle the API,
the prox API has not changed.

15
00:01:04.190 --> 00:01:06.480
It should still accept an onToggle prompt.

16
00:01:06.480 --> 00:01:10.866
But now we have these static components,

17
00:01:10.866 --> 00:01:15.133
these are called compound components.

18
00:01:15.133 --> 00:01:18.380
Actually, let me get
into the why behind this.

19
00:01:18.380 --> 00:01:25.350
The why behind, actually I don’t have
a why for that, so I’ll just explain it.

20
00:01:25.350 --> 00:01:30.260
So inside of our render component
we’re saying hey listen

21
00:01:30.260 --> 00:01:33.600
I’m a toggle component and
this is what I render.

22
00:01:33.600 --> 00:01:36.280
That’s all,
that’s all you get for using me.

23
00:01:36.280 --> 00:01:38.640
But what if I come in and say, hey listen,

24
00:01:38.640 --> 00:01:42.956
it would be really cool if I could have
a message that appears above the toggle

25
00:01:42.956 --> 00:01:47.291
component inside of that same thing
that says whether or not it´s on or off.

26
00:01:47.291 --> 00:01:50.262
Maybe you´re doing this for
accessibility reasons or something.

27
00:01:50.262 --> 00:01:56.610
And so
inside of our render method we could say,

28
00:01:56.610 --> 00:02:03.990
if this .props.renderMessage, then we'll
add a like render a message here as well.

29
00:02:03.990 --> 00:02:08.340
And we can even have like what
that message is and so on.

30
00:02:11.870 --> 00:02:17.181
What that leads to is a more complicated
API and a more complicated implementation.

31
00:02:17.181 --> 00:02:21.528
And so instead what we could do is we'd
say yes if you want to render anything

32
00:02:21.528 --> 00:02:26.291
within this toggle component, then we'll
provide these additional components

33
00:02:26.291 --> 00:02:28.860
that share implicit state with the parent.

34
00:02:29.910 --> 00:02:34.716
So if you think about this like
a select shares implicit state

35
00:02:34.716 --> 00:02:38.392
with the option that is
a compound component,

36
00:02:38.392 --> 00:02:42.551
where the select is the thing
that holds this state.

37
00:02:42.551 --> 00:02:47.307
And then these options communicate with
the parent to create by themselves

38
00:02:47.307 --> 00:02:51.540
they're useless but
together they're very useful.

39
00:02:51.540 --> 00:02:54.770
That's the idea behind
these compound components.

40
00:02:54.770 --> 00:03:00.220
And so here, we say, hey, if the toggle
button is on, then I wanna render this.

41
00:03:00.220 --> 00:03:02.040
If it's off, then I wanna render this.

42
00:03:02.040 --> 00:03:05.070
And the cool thing about
using compound components is,

43
00:03:05.070 --> 00:03:08.440
I actually have control over what
order these things are rendering in.

44
00:03:08.440 --> 00:03:13.190
And so maybe I should do this in
the final version so you can see.

45
00:03:13.190 --> 00:03:14.410
No peeking.

46
00:03:14.410 --> 00:03:16.700
So if I put this down below.

47
00:03:16.700 --> 00:03:19.640
And now I toggled this on and
it jumps back and forth.

48
00:03:19.640 --> 00:03:21.090
And you'd never wanna actually do that.

49
00:03:21.090 --> 00:03:24.680
It's like users are like what?

50
00:03:24.680 --> 00:03:28.220
I feel like medium does that
when I go to reply to somebody's

51
00:03:28.220 --> 00:03:31.460
thing like it pops up all their stuff and
it's super annoying.

52
00:03:31.460 --> 00:03:33.110
And I click on their article by accident.

53
00:03:33.110 --> 00:03:35.550
I'm pretty sure they do that on purpose.

54
00:03:35.550 --> 00:03:40.330
So some of the benefits
of compound components

55
00:03:40.330 --> 00:03:43.740
here is the ability to choose what
order things are rendered in.

56
00:03:43.740 --> 00:03:50.330
Also to be able to share some inputs it
state between the parent and the children.

57
00:03:50.330 --> 00:03:55.570
So I don't have to know that the toggle
component is managing an on state.

58
00:03:55.570 --> 00:04:00.878
I just use these things, and they're
responsible for rendering certain things.

59
00:04:00.878 --> 00:04:02.710
So the Toggle.On is responsible for

60
00:04:02.710 --> 00:04:06.770
rendering its children
when the on state is true.

61
00:04:06.770 --> 00:04:10.120
The Toggle.Off is the same in reverse and

62
00:04:10.120 --> 00:04:12.130
then the toggle button
will render the switch.

63
00:04:13.520 --> 00:04:19.380
So, yes, to accomplish this,
you're going to be,

64
00:04:19.380 --> 00:04:24.680
first off these are working
based on static properties,

65
00:04:24.680 --> 00:04:27.270
so they're static properties
of the toggle component.

66
00:04:27.270 --> 00:04:28.500
And they themselves are components.

67
00:04:28.500 --> 00:04:30.050
You can just do this
with the arrow functions.

68
00:04:31.090 --> 00:04:34.030
The really tricky part is providing

69
00:04:34.030 --> 00:04:37.720
the necessary props to these
components that you'll have to do.

70
00:04:37.720 --> 00:04:41.160
And that you'll be using
a React.Children.map to take

71
00:04:41.160 --> 00:04:45.790
this.props.children map it
to different components, and

72
00:04:45.790 --> 00:04:48.200
you'll clone those elements.

73
00:04:48.200 --> 00:04:50.900
So when I create one of these,
when I do this,

74
00:04:50.900 --> 00:04:54.460
this is transpiling into
react.createElement.

75
00:04:54.460 --> 00:04:56.156
So this is actually giving me an element.

76
00:04:56.156 --> 00:04:59.620
And so this.props.children

77
00:04:59.620 --> 00:05:03.430
inside of my render method
here is an array of elements.

78
00:05:03.430 --> 00:05:07.030
And so I'm using React Children
map to map over those elements and

79
00:05:07.030 --> 00:05:12.910
then from that map function, I return
a call to react that clone element.

80
00:05:12.910 --> 00:05:13.770
And that process,

81
00:05:13.770 --> 00:05:17.400
I can provide additional props which
is exactly what you're gonna be doing.

82
00:05:17.400 --> 00:05:21.210
I've provided the documentation if
you're not familiar with these methods,

83
00:05:21.210 --> 00:05:22.900
you can go look that up.

84
00:05:22.900 --> 00:05:26.800
And with that let's go ahead and
go to our tests,

85
00:05:27.890 --> 00:05:33.000
open up 02, and swap out the final
usage for the exercise usage.

86
00:05:33.000 --> 00:05:35.553
And you'll start getting your errors.

