WEBVTT

1
00:00:00.100 --> 00:00:00.680
&gt;&gt; Kent C. Dodds: Awesome.

2
00:00:00.680 --> 00:00:03.660
So, let's go ahead and get this going.

3
00:00:03.660 --> 00:00:06.780
We'll npm t to run the tests.

4
00:00:06.780 --> 00:00:10.840
Toggle those back so
we get our failing test.

5
00:00:10.840 --> 00:00:14.210
Okay, so the first thing we see is
this.props.children is not a function.

6
00:00:14.210 --> 00:00:21.910
That's because our new usage is
not using the render prop API.

7
00:00:21.910 --> 00:00:25.660
We'll start out by switching this
to just the provider pattern, and

8
00:00:25.660 --> 00:00:31.572
then I'll add the render prop API back so
we can do both, which is kinda fun.

9
00:00:31.572 --> 00:00:34.670
The first thing that we need to do
is we're gonna create context so

10
00:00:34.670 --> 00:00:40.070
we can tunnel some of our state and
helpers

11
00:00:40.070 --> 00:00:45.220
through the React tree and have it pop
out anywhere else within the React tree.

12
00:00:45.220 --> 00:00:53.352
So we'll say ToggleContext
= React.createContext.

13
00:00:53.352 --> 00:00:58.452
And this is gonna have on as false and
toggle is,

14
00:00:58.452 --> 00:01:03.178
actually, let's just pull this thing up.

15
00:01:03.178 --> 00:01:07.578
This thing, tada.

16
00:01:07.578 --> 00:01:11.611
Okay, so
this is gonna be back to on is false.

17
00:01:11.611 --> 00:01:19.669
And these will all just be noop functions.
&gt;&gt; Kent C. Dodds: Okay,

18
00:01:19.669 --> 00:01:24.777
and then now that we have that,
let's go ahead and expose the consumer so

19
00:01:24.777 --> 00:01:30.592
that when we export this toggle component
people can just use it off of the toggle.

20
00:01:30.592 --> 00:01:37.934
So we'll say static Consumer
= ToggleContext,Consumer.

21
00:01:37.934 --> 00:01:43.754
And then we need, because we don't
want to have unnecessary rerenders

22
00:01:43.754 --> 00:01:48.798
like we talked about when we
were doing compound components,

23
00:01:48.798 --> 00:01:55.689
we're going to stick all of our state and
helpers right inside of our initial state.

24
00:01:56.780 --> 00:01:58.750
Which our state will get initialized to.

25
00:01:58.750 --> 00:02:01.580
So let's see,

26
00:02:01.580 --> 00:02:07.241
it's right around here, do,

27
00:02:07.241 --> 00:02:12.046
and yeah, that's good.

28
00:02:12.046 --> 00:02:16.798
From there
&gt;&gt; Kent C. Dodds: Rather than

29
00:02:16.798 --> 00:02:21.636
this.getStateAndHelpers, we're
just gonna this.state,

30
00:02:21.636 --> 00:02:24.600
because that is now StateAndHelpers.

31
00:02:26.100 --> 00:02:31.620
And all of these functions right
here need to be moved above

32
00:02:31.620 --> 00:02:36.360
the initial state so
that they can be referenced as they are.

33
00:02:38.420 --> 00:02:40.460
Just order of operations thing.

34
00:02:40.460 --> 00:02:42.000
Pretend this is a constructor function.

35
00:02:43.740 --> 00:02:45.050
That's sort of how it works.

36
00:02:46.200 --> 00:02:46.720
Okay, cool.
And

37
00:02:46.720 --> 00:02:49.780
then we can actually
remove getStateAndHelpers

38
00:02:49.780 --> 00:02:51.730
because we're no longer using it anywhere.

39
00:02:51.730 --> 00:02:55.507
Well, we're about to remove it from here.

40
00:02:55.507 --> 00:03:01.016
So we'll return
the toggleContext.provider,

41
00:03:01.016 --> 00:03:04.720
where the value is this.state.

42
00:03:04.720 --> 00:03:10.090
And then we'll have this.props.children.

43
00:03:10.090 --> 00:03:12.160
And then everything works wonderfully.

44
00:03:12.160 --> 00:03:17.520
We have, anywhere inside of our
tree underneath this toggle

45
00:03:17.520 --> 00:03:23.910
component we can use the Toggle.Consumer
to get the toggle state and helpers.

46
00:03:23.910 --> 00:03:27.149
The value from toggle.

47
00:03:27.149 --> 00:03:29.880
So our NavSwitch doesn't
have to accept any props.

48
00:03:30.890 --> 00:03:33.439
It can just use the toggle
consumer anywhere it wants.

49
00:03:35.290 --> 00:03:37.935
The header doesn't have to forward
any props onto these two things,

50
00:03:37.935 --> 00:03:40.430
cuz it doesn't care about those props.

51
00:03:40.430 --> 00:03:45.090
So that is the utility
of the provider pattern.

52
00:03:46.170 --> 00:03:51.692
So I'm gonna make this work with both
render props and regular children.

53
00:03:51.692 --> 00:03:52.708
But before I do that,

54
00:03:52.708 --> 00:03:58.674
does anybody have questions?
&gt;&gt; Kent C. Dodds: Yeah.

55
00:03:58.674 --> 00:04:01.201
&gt;&gt; Speaker 2: Why did anyone use React

56
00:04:01.201 --> 00:04:03.860
before new context API?

57
00:04:03.860 --> 00:04:06.800
It's so good.
&gt;&gt; Kent C. Dodds: Yeah, yeah.

58
00:04:06.800 --> 00:04:09.200
Well, React was pretty
dang good without it.

59
00:04:09.200 --> 00:04:12.950
But yeah,
the new context API simplifies it a ton.

60
00:04:12.950 --> 00:04:17.410
I can show you the alternative
solution with the old

61
00:04:17.410 --> 00:04:20.427
context API right now if you want.

62
00:04:20.427 --> 00:04:24.338
So, advanced React patterns.

63
00:04:24.338 --> 00:04:26.646
So there's a reason that this is a v2.

64
00:04:26.646 --> 00:04:30.480
My v1 was actually for Egghead.

65
00:04:30.480 --> 00:04:34.580
But here's the provider pattern with v1.

66
00:04:34.580 --> 00:04:39.230
Start search here, you have this.

67
00:04:39.230 --> 00:04:43.180
Yeah, so I had a whole separate
component that was the provider.

68
00:04:43.180 --> 00:04:44.690
And it did all this wonky stuff.

69
00:04:44.690 --> 00:04:46.933
Yeah, I don't even wanna.
&gt;&gt; Speaker 2: [LAUGH]

70
00:04:46.933 --> 00:04:49.348
&gt;&gt; Kent C. Dodds: Like it was not as good.

71
00:04:49.348 --> 00:04:54.358
And it used React, well,
let's see, broadcast.

72
00:04:54.358 --> 00:04:56.850
Yeah.
So this solution didn't even work.

73
00:04:56.850 --> 00:05:00.802
If you had a shouldComponentUpdate
false anywhere in the tree,

74
00:05:00.802 --> 00:05:04.825
then any of the consumers wouldn't
be able to get updates, and so

75
00:05:04.825 --> 00:05:08.140
you had to use this React
broadcast thing right here.

76
00:05:08.140 --> 00:05:10.224
Which was no fun.

77
00:05:10.224 --> 00:05:11.581
It was just like,

78
00:05:11.581 --> 00:05:17.610
React broadcast was actually similar
to the new context API in some ways.

79
00:05:17.610 --> 00:05:21.490
And so it actually significantly
simplified many things.

80
00:05:21.490 --> 00:05:27.300
But still, the new context API is
like miles simpler than the old one.

81
00:05:28.730 --> 00:05:30.660
Any other observations or questions?

82
00:05:32.560 --> 00:05:36.515
All right, so let's make this
support both, just for fun.

83
00:05:36.515 --> 00:05:43.345
So what we're going to do is we'll say,
let's see, we'll call this ui.

84
00:05:43.345 --> 00:05:48.454
And we'll say this.props.children,
we'll just type up that thing.

85
00:05:48.454 --> 00:05:54.561
If it's a function, then we'll call
this.props.children with this.state.

86
00:05:54.561 --> 00:06:00.766
Otherwise, it'll be this.props.children.
&gt;&gt; Kent C. Dodds: And

87
00:06:00.766 --> 00:06:02.895
then we render our UI.

88
00:06:02.895 --> 00:06:05.068
And now it actually supports both.

89
00:06:05.068 --> 00:06:06.080
That was pretty handy, right?

90
00:06:08.360 --> 00:06:09.814
Cool stuff.
So now our component,

91
00:06:09.814 --> 00:06:13.959
what's nice about this is it's flexible
enough to be as simple as possible,

92
00:06:13.959 --> 00:06:15.070
like the simplest.

93
00:06:15.070 --> 00:06:18.210
It supports all the way back to
the initial use case when we started

94
00:06:18.210 --> 00:06:19.820
with render props.

95
00:06:19.820 --> 00:06:26.827
And now it supports all the way
down to the provider pattern and

96
00:06:26.827 --> 00:06:33.041
supporting providing our
state anywhere in the tree.

97
00:06:33.041 --> 00:06:38.955
It's pretty cool.
&gt;&gt; Kent C. Dodds: All righty,

98
00:06:38.955 --> 00:06:46.540
so shall we continue on to
our last pattern of the day?

99
00:06:46.540 --> 00:06:48.900
It's not the last exercise, but
the last one, the last pattern.

100
00:06:50.370 --> 00:06:51.160
All right, cool.

101
00:06:51.160 --> 00:06:55.400
Anybody wanna share anything that
they filled out in their elaboration,

102
00:06:56.520 --> 00:06:57.880
what you learned?

103
00:06:57.880 --> 00:07:00.387
That React wasn't usable
before the new context API.

104
00:07:00.387 --> 00:07:01.540
That was one thing.

105
00:07:01.540 --> 00:07:02.210
No, just kidding.

106
00:07:02.210 --> 00:07:03.330
But it is nice.

107
00:07:03.330 --> 00:07:07.147
It is really nice.
&gt;&gt; Speaker 2: Only exposing the consumer

108
00:07:07.147 --> 00:07:09.495
in like 99% of cases.

109
00:07:09.495 --> 00:07:10.558
&gt;&gt; Kent C. Dodds: Yeah.
&gt;&gt; Speaker 2: That makes sense.

110
00:07:10.558 --> 00:07:12.058
&gt;&gt; Kent C. Dodds: Yeah, I think generally.

111
00:07:12.058 --> 00:07:15.020
I mean, there are some use cases
where the provider is nice.

112
00:07:15.020 --> 00:07:20.656
But I kind of like to keep the provider
used in the root component that's doing

113
00:07:20.656 --> 00:07:26.223
all the state management stuff anyway and
then only exposing the consumer.

114
00:07:26.223 --> 00:07:29.412
And then making it a static property,
I think,

115
00:07:29.412 --> 00:07:32.138
kind of helps associate it better, so.

