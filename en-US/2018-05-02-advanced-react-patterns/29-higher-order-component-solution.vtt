WEBVTT

1
00:00:00.230 --> 00:00:04.020
&gt;&gt; Kent C. Dodds: Let's go ahead and
implement this really quick, we'll swap

2
00:00:04.020 --> 00:00:09.550
the exercise final for the exercise,
get a bunch of error messages and stuff.

3
00:00:09.550 --> 00:00:11.210
You'd be surprise how hard it was for

4
00:00:11.210 --> 00:00:14.910
me to validate that you're
doing things properly.

5
00:00:14.910 --> 00:00:17.410
You can check out the test later but yeah,

6
00:00:17.410 --> 00:00:21.550
all of our work pretty much is gonna
live within this width toggle component.

7
00:00:21.550 --> 00:00:26.157
The funny thing about this function is
it's called the higher order component but

8
00:00:26.157 --> 00:00:29.070
it's neither a component nor
is it higher order.

9
00:00:29.070 --> 00:00:31.960
It's a function that returns a component,
so yeah.

10
00:00:31.960 --> 00:00:33.540
But that's what it is called.

11
00:00:35.100 --> 00:00:37.080
And so that's what we're gonna do here.

12
00:00:37.080 --> 00:00:39.182
So we're gonna create a component and,
for us,

13
00:00:39.182 --> 00:00:42.413
we don't need any lifecycle hooks, so
we'll just do a function component

14
00:00:42.413 --> 00:00:45.537
called wrapper.
&gt;&gt; Kent C. Dodds: And

15
00:00:45.537 --> 00:00:49.050
the wrapper component is
going to use our render prop.

16
00:00:49.050 --> 00:00:53.340
And now that we're using the provider
pattern, we just wanna access the toggle

17
00:00:53.340 --> 00:01:00.080
component that we're accessing or
that we're inside the context of.

18
00:01:00.080 --> 00:01:07.070
And so
we're going to return Toggle.Consumer.

19
00:01:07.070 --> 00:01:10.870
And then this is going to
accept our Toggletils or

20
00:01:10.870 --> 00:01:16.610
whatever you wanna call it, and it will
render the component that it's given.

21
00:01:16.610 --> 00:01:20.000
So higher order components can
be given any kind of argument.

22
00:01:20.000 --> 00:01:22.060
Often it's gonna be given a component but

23
00:01:22.060 --> 00:01:25.040
you could pass an object
that configures a component.

24
00:01:25.040 --> 00:01:28.290
You could pass anything and
any number of arguments.

25
00:01:28.290 --> 00:01:30.880
There's nothing special about a higher

26
00:01:30.880 --> 00:01:34.430
order component passing
just a component to render.

27
00:01:34.430 --> 00:01:40.680
So in our case,
our wrapper is gonna accept props.

28
00:01:40.680 --> 00:01:42.937
When we come back here to Subtitle,

29
00:01:42.937 --> 00:01:46.794
Subtitle is actually the wrapper
that we're gonna return.

30
00:01:46.794 --> 00:01:50.450
And so when Subtitle is rendered,
it’s gonna be rendered with some props.

31
00:01:50.450 --> 00:01:54.280
And so we’ll just forward that
onto the underlying component.

32
00:01:54.280 --> 00:01:58.710
So part of the objective of a higher
order component is to make it so

33
00:01:58.710 --> 00:02:04.016
that consumers of our components
that are created with this can

34
00:02:04.016 --> 00:02:08.380
not tell that it is in fact
a higher order component.

35
00:02:08.380 --> 00:02:13.620
It should behave as close to possible
as the component that it's wrapping.

36
00:02:14.830 --> 00:02:18.250
So that's why we're
forwarding all the props on.

37
00:02:19.620 --> 00:02:24.470
We're also going to forward on
a prop called toggle, toggleUtils.

38
00:02:25.980 --> 00:02:30.757
And so in our case,
this stuff props.toggle.on and

39
00:02:30.757 --> 00:02:35.980
it'll be able to tell cuz
we're passing onto toggle.

40
00:02:35.980 --> 00:02:37.430
With React history,

41
00:02:37.430 --> 00:02:43.710
that's gonna be react router that
will be this.props.match and history.

42
00:02:43.710 --> 00:02:48.880
And then React Redux this.batch and
that kinda thing.

43
00:02:48.880 --> 00:02:54.030
So very similar type of thing and

44
00:02:54.030 --> 00:02:57.990
so let see, yeah we are also

45
00:02:57.990 --> 00:03:03.540
gonna want o return the wrapper and
will say that and see what are testing.

46
00:03:03.540 --> 00:03:06.490
So here we wanna make sure we
use a react forward graph and

47
00:03:06.490 --> 00:03:09.340
passing the graph property
to a random component.

48
00:03:09.340 --> 00:03:12.560
So, yeah,

49
00:03:12.560 --> 00:03:17.550
this one's kind of tricky and
it's only sometimes the real problem.

50
00:03:17.550 --> 00:03:21.190
But, here where we're rendering
this subtitle component.

51
00:03:21.190 --> 00:03:26.310
If we wanted to get a reference to the
essence of that component, we would say,

52
00:03:26.310 --> 00:03:27.005
here's my ref.

53
00:03:27.005 --> 00:03:30.699
Instance this.i = i.

54
00:03:30.699 --> 00:03:32.340
Whatever.

55
00:03:32.340 --> 00:03:34.870
To assign it and
then we can call methods on it.

56
00:03:34.870 --> 00:03:36.030
Whatever else.

57
00:03:36.030 --> 00:03:39.830
And so part of the whole idea of
the higher order components is to make

58
00:03:39.830 --> 00:03:42.980
the fact that it is a higher
order component unobservable.

59
00:03:42.980 --> 00:03:47.956
And unfortunately with the way
that React works, this.

60
00:03:47.956 --> 00:03:51.080
Instants that its' gonna
be passed into ref

61
00:03:51.080 --> 00:03:54.950
is actually going to be
an instance of our wrapper.

62
00:03:56.000 --> 00:04:01.980
Which is, in this case, that also doesn't
work because it's a function of mine.

63
00:04:01.980 --> 00:04:04.920
So if this was a redux class, in any case,

64
00:04:04.920 --> 00:04:07.390
it's not going to be giving
us the thing that we want.

65
00:04:07.390 --> 00:04:12.350
And so React recently released
a nice new feature called,

66
00:04:13.610 --> 00:04:19.400
here let's assign this
Wrapper to React.CreateRef.

67
00:04:19.400 --> 00:04:20.830
It's pretty handy.

68
00:04:20.830 --> 00:04:23.710
What you give React.CreateRef
is a function.

69
00:04:23.710 --> 00:04:26.560
I will change this to an arrow function.

70
00:04:26.560 --> 00:04:31.290
That accepts props and a ref here.

71
00:04:31.290 --> 00:04:33.830
And then we'll say ref equals ref.

72
00:04:33.830 --> 00:04:37.010
And so it'll forward all the refs so

73
00:04:37.010 --> 00:04:40.890
the fact that this is a higher order
component wrapper is totally unobservable.

74
00:04:40.890 --> 00:04:42.809
You can use the ref as you would expect.

75
00:04:44.110 --> 00:04:45.420
And that was like a really,

76
00:04:45.420 --> 00:04:48.040
really serious restoration
before create ralph was around.

77
00:04:48.040 --> 00:04:50.770
Because normally what you'd
do is you'd say accepted

78
00:04:52.670 --> 00:04:56.860
props dot enter ralph and
people would have to use the nrf profs and

79
00:04:56.860 --> 00:05:00.230
it's like super annoying so
yeah, that's no longer an issue.

80
00:05:01.900 --> 00:05:04.280
Great, so we'll save that.

81
00:05:04.280 --> 00:05:10.000
And I think I messed up this.

82
00:05:10.000 --> 00:05:11.070
Let me get rid of that ref.

83
00:05:13.490 --> 00:05:15.800
Okay, no I didn't mess it up.

84
00:05:15.800 --> 00:05:18.010
There we go.

85
00:05:18.010 --> 00:05:18.800
Let's just move on.

86
00:05:18.800 --> 00:05:23.740
I'm pretty sure that's gonna be something
else Okay, so we created our wrapper.

87
00:05:25.280 --> 00:05:26.890
We created the forward ref.

88
00:05:28.310 --> 00:05:31.380
Now in React Dev Tools,
if we pop this open and

89
00:05:31.380 --> 00:05:36.920
go to React, if you don't have this
installed, definitely get this installed.

90
00:05:36.920 --> 00:05:39.940
It's gonna show us the components
by their display name.

91
00:05:40.950 --> 00:05:48.580
and in our case if we look at,
here we'll look at the, man.

92
00:05:48.580 --> 00:05:51.190
Well it's busted so
we can't even look at it at the moment.

93
00:05:52.290 --> 00:05:57.880
But the display name that it's
showing to us like app right here and

94
00:05:57.880 --> 00:05:59.400
browser router and all that stuff,

95
00:05:59.400 --> 00:06:04.140
that's coming from a display name property
that's on each one of these components.

96
00:06:04.140 --> 00:06:08.330
And so right now the display name property
for this is actually undefined so

97
00:06:08.330 --> 00:06:09.160
we'll say unknown.

98
00:06:09.160 --> 00:06:13.480
So what we can do is just
say Wrapper.displayName and

99
00:06:13.480 --> 00:06:15.700
give it something that's useful.

100
00:06:15.700 --> 00:06:17.650
So we'll say withToggle.

101
00:06:17.650 --> 00:06:21.290
It's pretty common to say like
whatever the higher component is And

102
00:06:21.290 --> 00:06:22.660
then whatever it’s wrapping.

103
00:06:22.660 --> 00:06:27.790
So we’ll say component.display name or
component.name.

104
00:06:27.790 --> 00:06:31.820
So display name is coming from react
if you’re using vowel it will actually

105
00:06:31.820 --> 00:06:34.890
create that for you dynamically
on the fly which is pretty cool.

106
00:06:34.890 --> 00:06:37.510
If you’re not or if it doesn’t work or

107
00:06:37.510 --> 00:06:40.350
something, then name is just
a regular JAVA script thing.

108
00:06:40.350 --> 00:06:41.250
That’s the name of the function.

109
00:06:42.690 --> 00:06:44.460
And so that kind of helps with that.

110
00:06:44.460 --> 00:06:49.060
I think I like busted something,
because it should be.

111
00:06:51.170 --> 00:06:52.800
Ha, I'm using the wrong API.

112
00:06:52.800 --> 00:06:56.940
Create or forward ref.

113
00:06:56.940 --> 00:06:59.940
Nobody caught me.
&gt;&gt; Speaker 2: [LAUGH]

114
00:06:59.940 --> 00:07:00.940
&gt;&gt; Kent C. Dodds: Just kidding,

115
00:07:00.940 --> 00:07:02.390
it's late so.

116
00:07:02.390 --> 00:07:05.150
Or it's been long.

117
00:07:05.150 --> 00:07:08.928
Okay so
now we need to do this silly thing.

118
00:07:08.928 --> 00:07:14.760
So this is like this whole
all these weird handles.

119
00:07:14.760 --> 00:07:19.220
This is why people who implement higher
order components don't like them.

120
00:07:19.220 --> 00:07:22.910
Because it's like all these things you
have to do to make it so that You can

121
00:07:22.910 --> 00:07:27.790
pretend that this component wrapper is
actually the component that it's wrapping.

122
00:07:27.790 --> 00:07:32.360
So, here's subtitle, and like I said
this is a little bit contrived, but

123
00:07:32.360 --> 00:07:36.720
this subtitle is actually this class.

124
00:07:36.720 --> 00:07:37.800
We have a display name.

125
00:07:37.800 --> 00:07:39.750
We have these static properties.

126
00:07:39.750 --> 00:07:41.480
Display name is a react static property.

127
00:07:41.480 --> 00:07:45.140
That's fine,
we're going to be rendering it anyway.

128
00:07:45.140 --> 00:07:50.238
But this emoji and this text
are gonna be referencing subtitle, so

129
00:07:50.238 --> 00:07:53.010
subtitle.emoji and subtitle.text.

130
00:07:53.010 --> 00:07:55.840
It's totally reasonable to
expect to be able to do that.

131
00:07:55.840 --> 00:07:58.920
I'm just saying, hey,
make me a component that's like this one.

132
00:08:00.550 --> 00:08:03.550
So the problem is that it's not like this
one because it doesn't have all the same

133
00:08:03.550 --> 00:08:04.920
static properties.

134
00:08:04.920 --> 00:08:09.790
So, well this component does
have the emoji and a text.

135
00:08:09.790 --> 00:08:15.920
The wrapper does not and so we need to
whist those properties on to the wrapper.

136
00:08:17.030 --> 00:08:22.190
Likely for us this is such an annoying
problem that somebody wrote a module for

137
00:08:22.190 --> 00:08:24.570
STUs, so
we don't have to do this ourselves.

138
00:08:24.570 --> 00:08:29.790
It's called HoistNonreactStatics and
we use them like this.

139
00:08:29.790 --> 00:08:31.600
Hoist them onto the wrapper
from the component.

140
00:08:34.140 --> 00:08:35.710
An that gets our test passing.

141
00:08:35.710 --> 00:08:40.190
So there are like four other
steps before forwardRef and

142
00:08:40.190 --> 00:08:43.900
stuff came along but
it's kind of annoying to implement these.

143
00:08:43.900 --> 00:08:49.940
That said, it does provide often a simpler
alternative to render props in some cases.

144
00:08:49.940 --> 00:08:52.460
So I do recommend having it.

145
00:08:52.460 --> 00:08:55.230
I wouldn't create it before
somebody asks for it, but

146
00:08:55.230 --> 00:08:58.320
I don't have a problem creating and
exposing these in a library.

147
00:08:58.320 --> 00:09:00.570
It's pretty small,
it's not hard to maintain.

148
00:09:00.570 --> 00:09:03.260
Yeah?
&gt;&gt; Speaker 3: Could you just quick go over

149
00:09:03.260 --> 00:09:05.270
what hoist nonreact statics
is doing again, sorry.

150
00:09:05.270 --> 00:09:06.110
&gt;&gt; Kent C. Dodds: Sure, yeah, sure.

151
00:09:06.110 --> 00:09:12.270
So hoist nonreact statics, down here
this subtitle is actually this wrapper.

152
00:09:12.270 --> 00:09:14.210
So we're creating this wrapper function.

153
00:09:15.380 --> 00:09:21.500
And the subtitle does not have the static
properties that this react class has.

154
00:09:21.500 --> 00:09:24.900
So, we're defining static emoji and
static text.

155
00:09:24.900 --> 00:09:27.520
But, if you just were
to look at this code,

156
00:09:27.520 --> 00:09:32.830
with the whole idea of higher order
components in general, you might expect

157
00:09:32.830 --> 00:09:37.150
that I could use sub title just like I
would be able to use this component.

158
00:09:37.150 --> 00:09:40.300
So that's why we say sub tittle emoji,
sub title text.

159
00:09:40.300 --> 00:09:45.300
We should be able to,
especially if we're exporting this like

160
00:09:45.300 --> 00:09:50.680
often in Redact you'll do export, default,

161
00:09:50.680 --> 00:09:54.840
connect my or like your you

162
00:09:54.840 --> 00:10:00.350
know whatever your maps state to props and
all that stuff and then my component.

163
00:10:00.350 --> 00:10:03.230
And so you want whoever importing
this component, you want them to be

164
00:10:03.230 --> 00:10:07.600
able to treat that exported component
just like they would the MyComponent.

165
00:10:09.420 --> 00:10:12.650
And so that's where we're, I'm kinda
simulating that here in this contrived

166
00:10:12.650 --> 00:10:17.290
example, But yeah,
in general that's the purpose,

167
00:10:17.290 --> 00:10:21.030
is just to help make the fact that
this is a high order component or

168
00:10:21.030 --> 00:10:23.830
a wraps component,
totally unobservable for users

