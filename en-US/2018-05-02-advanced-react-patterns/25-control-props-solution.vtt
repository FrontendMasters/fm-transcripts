WEBVTT

1
00:00:00.130 --> 00:00:05.250
&gt;&gt; Kent C. Dodds: All righty, so
let's switch these two and run our tests.

2
00:00:07.240 --> 00:00:09.760
And, we've got a bunch of errors.

3
00:00:11.540 --> 00:00:13.370
So onToggle's not a function.

4
00:00:13.370 --> 00:00:14.690
All right, that's nonsense.

5
00:00:14.690 --> 00:00:16.110
Let's figure this out.

6
00:00:16.110 --> 00:00:21.650
So we're combining control prompts
with our existing solution.

7
00:00:21.650 --> 00:00:25.780
The reason I say it's with a state reducer
is because they actually cover similar use

8
00:00:25.780 --> 00:00:26.360
cases.

9
00:00:27.620 --> 00:00:30.220
The control state reducer is actually

10
00:00:31.320 --> 00:00:34.240
pretty much unnecessary if
your have control props.

11
00:00:34.240 --> 00:00:37.760
The reason that I like to put them
together though is because if

12
00:00:38.990 --> 00:00:43.080
I need control props for
some reason, then a state reducer is

13
00:00:43.080 --> 00:00:48.050
probably a simpler way to
handle some use cases.

14
00:00:48.050 --> 00:00:51.043
And so, with control props people have to

15
00:00:51.043 --> 00:00:55.674
put that state somewhere like
where this on state is gonna live.

16
00:00:55.674 --> 00:01:00.510
It's gotta exist as a state property
of some other component and

17
00:01:00.510 --> 00:01:06.163
with the state reducer, you don't
actually have to do that necessarily.

18
00:01:06.163 --> 00:01:08.381
And so, having them together makes it so

19
00:01:08.381 --> 00:01:12.970
users have a little bit more choice
on how they're using your component.

20
00:01:12.970 --> 00:01:18.633
But yeah, if you want to be able to update
state of a component from the outside and

21
00:01:18.633 --> 00:01:23.552
like totally uncontrolled by
the toggle component itself controlled

22
00:01:23.552 --> 00:01:24.904
props after that.

23
00:01:24.904 --> 00:01:29.866
So specifically in our case where
we wanna synchronize these two,

24
00:01:29.866 --> 00:01:34.482
this component state is getting
updated from the outside in.

25
00:01:34.482 --> 00:01:37.829
And a state reducer can't do that, but

26
00:01:37.829 --> 00:01:43.306
a state reducer is a little bit
simpler from a user standpoint for

27
00:01:43.306 --> 00:01:47.170
other use cases, so
I like to have them both.

28
00:01:47.170 --> 00:01:51.050
So before we didn't have an on toggle
default because this component

29
00:01:51.050 --> 00:01:55.620
is completely worthless without being
able to know when the toggle happens.

30
00:01:55.620 --> 00:01:59.210
But now they can know when the toggle
happens from a new prop that we're going

31
00:01:59.210 --> 00:02:00.992
to expose called on state change.

32
00:02:00.992 --> 00:02:02.780
And so we're gonna add a default for

33
00:02:02.780 --> 00:02:06.740
both of those and
there'll just be no op functions.

34
00:02:07.860 --> 00:02:11.670
And if we're using typing
then we might be able to say,

35
00:02:11.670 --> 00:02:14.780
you have to have one or the other.

36
00:02:14.780 --> 00:02:17.540
That type definition would be
kind of silly looking back.

37
00:02:19.180 --> 00:02:20.870
But yeah, that's generally the idea.

38
00:02:20.870 --> 00:02:22.380
You want one or the other or both.

39
00:02:22.380 --> 00:02:26.430
It's fine to have at least one.

40
00:02:26.430 --> 00:02:28.140
Okay, so we've got our defaults.

41
00:02:28.140 --> 00:02:34.140
Now it's at our, it's controlled and
here we'll accept a prop.

42
00:02:34.140 --> 00:02:39.990
And we'll return this .props
[prop] is not equal to undefined.

43
00:02:42.530 --> 00:02:46.750
And then we'll have that
getState that we had before,

44
00:02:46.750 --> 00:02:52.080
except this one is gonna be
a little unique because when we

45
00:02:52.080 --> 00:02:58.916
are using the state inside
of our updater function,

46
00:02:58.916 --> 00:03:02.806
we need to get state from
its canonical source.

47
00:03:02.806 --> 00:03:05.590
And that could be from prop sort,
it could be from internal state,

48
00:03:05.590 --> 00:03:07.600
it could be a mix of the two.

49
00:03:07.600 --> 00:03:12.840
And so, this getState function will
actually set a state argument.

50
00:03:12.840 --> 00:03:16.830
And that will default to this.state, so
all the other places that are using it

51
00:03:16.830 --> 00:03:20.740
can just call it, and
it will default to this.state.

52
00:03:20.740 --> 00:03:24.020
But when we call it inside
of our updater function,

53
00:03:24.020 --> 00:03:28.550
we'll be able to provide the state
from our updater function.

54
00:03:28.550 --> 00:03:32.370
So in this case,
we're gonna return object.keys or

55
00:03:32.370 --> 00:03:33.730
entries or whatever you want to do.

56
00:03:33.730 --> 00:03:36.490
I'm just going just do keys state.

57
00:03:38.590 --> 00:03:39.319
We'll do entries.

58
00:03:41.450 --> 00:03:44.850
And with this,
we'll reduce that into an object.

59
00:03:44.850 --> 00:03:49.690
So that's our new state
object right there.

60
00:03:49.690 --> 00:03:54.110
And so we'll call this new state,
that's our accumulator.

61
00:03:54.110 --> 00:03:58.040
And then we'll destructure the key and
the value from our entry.

62
00:04:00.830 --> 00:04:01.790
All right, sweet.

63
00:04:01.790 --> 00:04:04.040
So then we’ll need to
return the new state.

64
00:04:05.400 --> 00:04:11.730
And we’ll say if this .a
is controlled the key.

65
00:04:11.730 --> 00:04:16.482
So if that particular part of
state is controlled then we’ll say

66
00:04:16.482 --> 00:04:21.280
new state at that key is gonna
be this.props at that key.

67
00:04:21.280 --> 00:04:24.010
Okay so if this state is
being passed in from props,

68
00:04:24.010 --> 00:04:29.310
then that's our new state is going
to have its value from props.

69
00:04:29.310 --> 00:04:34.860
Otherwise, it'll get it from state.

70
00:04:36.770 --> 00:04:40.716
And actually,
that's what the value's gonna be so, tada.

71
00:04:43.440 --> 00:04:43.940
&gt;&gt; Kent C. Dodds: Okay?

72
00:04:45.450 --> 00:04:47.310
Cool, so that is get state.

73
00:04:47.310 --> 00:04:49.140
An observant question was asked and

74
00:04:49.140 --> 00:04:52.870
I wanna share that really
quick why you can't do this.

75
00:04:52.870 --> 00:04:56.656
Somebody suggested
perhaps we could do this,

76
00:04:56.656 --> 00:05:01.772
returnobject.assign
&gt;&gt; Kent C. Dodds: Just,

77
00:05:01.772 --> 00:05:03.610
all right, this is our new state.

78
00:05:03.610 --> 00:05:09.710
And then state and this.props and then
this.prop wins in the case of conflicts.

79
00:05:09.710 --> 00:05:15.050
The problem with that is this.props has
all of these extra properties on it and

80
00:05:15.050 --> 00:05:16.540
so those aren't part of our state.

81
00:05:16.540 --> 00:05:19.070
We'd have to pluck those things out.

82
00:05:19.070 --> 00:05:23.370
So the amount of code sixes,
so you can do it either way.

83
00:05:23.370 --> 00:05:25.310
So create the state object
with all the props and

84
00:05:25.310 --> 00:05:28.020
then remove the extra props or something.

85
00:05:28.020 --> 00:05:33.740
But yeah, I like this better.

86
00:05:33.740 --> 00:05:36.550
So we're only dealing with
stuff that's in our state.

87
00:05:38.010 --> 00:05:41.340
Okay, cool, so let's get rid of that.

88
00:05:41.340 --> 00:05:42.890
Make sure we're getting this all done.

89
00:05:44.540 --> 00:05:52.600
So anywhere that we're using state,
we want to use like combined state.

90
00:05:52.600 --> 00:05:58.600
So I'm gonna make combined state
this doc get state with the state.

91
00:05:59.850 --> 00:06:01.160
So in our updater function,

92
00:06:01.160 --> 00:06:05.900
we're past the current state in
this batch of set state calls, and

93
00:06:07.330 --> 00:06:11.730
we're gonna call getState for
that state in the batch of getState calls.

94
00:06:11.730 --> 00:06:15.210
And so now it's combined between
the state that's coming internally, and

95
00:06:15.210 --> 00:06:19.540
the state that's coming from props, and
that's what we'll use for everything else.

96
00:06:19.540 --> 00:06:22.160
So we'll call updater function.

97
00:06:22.160 --> 00:06:27.000
With the combined state, we'll call our
state reducer with that combined state.

98
00:06:29.270 --> 00:06:32.455
And yeah, so far that's all
the updates we needed to do there.

99
00:06:34.230 --> 00:06:39.200
Okay cool, get rid of that.

100
00:06:39.200 --> 00:06:43.000
Okay, so now things are, this is where
things are gonna get a little tricky.

101
00:06:44.690 --> 00:06:49.330
And yeah, this is actually the reason that
I was up till two last night cuz I was

102
00:06:49.330 --> 00:06:50.640
rethinking things and

103
00:06:50.640 --> 00:06:54.040
spent two hours working on it and
then decided this was the best way.

104
00:06:54.040 --> 00:06:59.770
So code very similar to this is in
down shift and it's working great.

105
00:06:59.770 --> 00:07:04.090
So we're gonna create a new variable
up here called all changes, and

106
00:07:05.250 --> 00:07:09.000
rather than call or create a new
variable called reduce changes,

107
00:07:09.000 --> 00:07:12.390
we're gonna just assign
all changes to that.

108
00:07:12.390 --> 00:07:17.220
So this allChanges, by allChanges
it means it includes the type and

109
00:07:17.220 --> 00:07:18.680
we're gonna need that here in a second.

110
00:07:19.740 --> 00:07:24.978
So let's get rid of this,
then we'll do all changes, so now

111
00:07:24.978 --> 00:07:31.785
were removing the type from all changes
to get only changes and we return that.

112
00:07:34.599 --> 00:07:38.568
&gt;&gt; Kent C. Dodds: Let's see, [SOUND],
sorry, I think I confused myself for

113
00:07:38.568 --> 00:07:39.621
just a second.

114
00:07:46.232 --> 00:07:51.989
&gt;&gt; Kent C. Dodds: Right, so because our
component is only managing the state for

115
00:07:51.989 --> 00:07:54.600
which it is managing.

116
00:07:54.600 --> 00:08:00.617
So in an effort to avoid
unnecessary re-renders,

117
00:08:00.617 --> 00:08:05.430
we'll chip away this or this onlyChanges,

118
00:08:05.430 --> 00:08:09.840
or really, we'll just chip away the
allChanges object down to only the stuff

119
00:08:09.840 --> 00:08:13.060
that's being managed by ourselves, because
that's the only state we wanna update.

120
00:08:13.060 --> 00:08:18.530
So in the case of downshift,
if you are controlling the is open state,

121
00:08:18.530 --> 00:08:24.195
and somebody clicks on the menu thing,
we wanna let the owner of this component

122
00:08:24.195 --> 00:08:27.890
know, hey, the user clicked on the menu so
I suggest that you open the menu.

123
00:08:27.890 --> 00:08:33.490
But I don't wanna manage that state
myself, so I'm not going to, I'm calling

124
00:08:33.490 --> 00:08:39.926
such state, but I'm gonna return null
instead of triggering re-render.

125
00:08:39.926 --> 00:08:42.920
Because it maymbe unnecessary,
maybe the owner of this says, hey,

126
00:08:42.920 --> 00:08:45.710
when the user clicks on
the thing because some other

127
00:08:45.710 --> 00:08:49.894
like something else is going on, I don't
actually want the menu to open up again.

128
00:08:49.894 --> 00:08:54.610
And so, that's why we're
gonna split up all of these

129
00:08:54.610 --> 00:08:59.390
allChanges between changes that
are coming from or changes that

130
00:08:59.390 --> 00:09:04.110
are controlled by our internal state and
changes that are controlled by prompts.

131
00:09:04.110 --> 00:09:08.410
And then only those that
are controlled by state internally

132
00:09:08.410 --> 00:09:13.200
are those that will actually
return from our set state call.

133
00:09:13.200 --> 00:09:15.530
Does that make sense?

134
00:09:15.530 --> 00:09:20.270
There's a lot of words so I'm sorry
to be talking so much about state.

135
00:09:20.270 --> 00:09:21.400
I probably use that word a lot.

136
00:09:23.120 --> 00:09:29.560
So to accomplish this,
we're going to, let's see.

137
00:09:31.274 --> 00:09:35.434
Rats, I'm just gonna look at it
really quick to remind myself.

138
00:09:35.434 --> 00:09:38.987
Yeah, that's what I call it,
non controlled changes.

139
00:09:38.987 --> 00:09:43.033
Okay, so it actually looks kind
of similar to our get state.

140
00:09:43.033 --> 00:09:49.706
So nonControlledChanges,
oops equals Object.entries or

141
00:09:49.706 --> 00:09:55.080
keys or
however you wanna do this of all changes.

142
00:09:56.280 --> 00:09:59.970
Actually we'll just do our combined state,

143
00:09:59.970 --> 00:10:02.180
because ultimately that's all
that we really care about.

144
00:10:02.180 --> 00:10:06.920
All changes includes the type, and
we don't wanna return the type anyway.

145
00:10:06.920 --> 00:10:11.340
We could actually do this and do only
changes, but it really doesn't matter.

146
00:10:13.510 --> 00:10:16.670
Because all we really care
about are actually the keys.

147
00:10:16.670 --> 00:10:19.680
So there are like a lot of
different ways you can do this, but

148
00:10:19.680 --> 00:10:23.590
the general idea is let's just get
the changes that are not controled.

149
00:10:24.650 --> 00:10:28.720
Okay, so then we'll reduce
this into another object.

150
00:10:29.760 --> 00:10:33.451
And so we'll just call this, yeah,

151
00:10:33.451 --> 00:10:38.250
accumulator and

152
00:10:38.250 --> 00:10:43.860
that's going to accept our state key and

153
00:10:43.860 --> 00:10:49.090
then well start out with an empty object
and we'll return that accumulator.

154
00:10:49.090 --> 00:10:50.890
Let me give myself some more room here.

155
00:10:53.060 --> 00:10:59.090
Okay, great, so with that,
we'll say if this dot or

156
00:10:59.090 --> 00:11:03.520
let's see, is controlled state key.

157
00:11:03.520 --> 00:11:06.400
So if this particular piece
of state is controlled,

158
00:11:06.400 --> 00:11:08.900
then we don't wanna actually do anything.

159
00:11:08.900 --> 00:11:11.390
So we'll do the opposite of this.

160
00:11:11.390 --> 00:11:17.797
So if it's not controlled,
then we'll add the accumulator [stateKey]

161
00:11:17.797 --> 00:11:22.416
= allChanges[stateKey].

162
00:11:22.416 --> 00:11:25.592
And this is what we're gonna use here,

163
00:11:25.592 --> 00:11:29.930
that's what we're actually
going to be returning.

164
00:11:32.070 --> 00:11:37.410
Okay, cooli and
then now we can update the state.

165
00:11:37.410 --> 00:11:41.020
And we only update the state that's
not controlled and so that's great.

166
00:11:41.020 --> 00:11:45.840
But the consumer that's
controlling this state

167
00:11:45.840 --> 00:11:47.800
needs to know when should I update state.

168
00:11:47.800 --> 00:11:48.790
The user's done something.

169
00:11:48.790 --> 00:11:52.480
I need to know based off
of your own internal logic,

170
00:11:52.480 --> 00:11:56.380
when should I think about updating state?

171
00:11:56.380 --> 00:12:01.321
And so
that's where we modify this slightly.

172
00:12:01.321 --> 00:12:03.949
[COUGH]
So

173
00:12:03.949 --> 00:12:07.940
and this is why we created this
allChanges variable up here.

174
00:12:07.940 --> 00:12:09.560
So we can access it inside of here.

175
00:12:11.140 --> 00:12:18.440
So we'll say,
this.props.onStateChange{allChanges}.

176
00:12:18.440 --> 00:12:22.735
So now it knows not only what
changes took place but because this

177
00:12:22.735 --> 00:12:27.570
allChanges includes the type, it will also
have the types so they can make decisions

178
00:12:27.570 --> 00:12:30.850
on whether they actually want to update
their own version of that state or not.

179
00:12:32.260 --> 00:12:34.070
And it includes all the changes,

180
00:12:34.070 --> 00:12:38.972
not just those that are controlled
because it's probably useful.

181
00:12:38.972 --> 00:12:41.985
And in addition just for
fun, we can also pass

182
00:12:41.985 --> 00:12:47.730
this.getStateAndHelpers because
I added that to downshift and

183
00:12:47.730 --> 00:12:50.220
I remember there was some point
that I was really happy that I did.

184
00:12:50.220 --> 00:12:55.000
I can't remember why, but it's just kind
of a useful thing, like based on state,

185
00:12:55.000 --> 00:12:59.170
I want to call the toggle again or
something like that.

186
00:12:59.170 --> 00:13:01.270
So it can be useful for some cases.

187
00:13:04.350 --> 00:13:06.750
Okay, let's see if that passes our tests.

188
00:13:06.750 --> 00:13:08.960
Nope, I think we're still
missing a couple pieces.

189
00:13:08.960 --> 00:13:16.488
All right, this.state,
all of these should be this.getState.

190
00:13:16.488 --> 00:13:21.484
There, like

191
00:13:21.484 --> 00:13:27.845
magic, [SOUND].

192
00:13:27.845 --> 00:13:31.108
All right, so
what questions do you have about this?

193
00:13:38.047 --> 00:13:39.231
&gt;&gt; Kent C. Dodds: Yeah.

194
00:13:39.231 --> 00:13:45.416
&gt;&gt; Speaker 2: Do you,
&gt;&gt; Speaker 2: Always use like on line or

195
00:13:45.416 --> 00:13:50.288
is it 49 there, objects iq's

196
00:13:50.288 --> 00:13:55.421
that reduce,
&gt;&gt; Speaker 2: You're

197
00:13:55.421 --> 00:14:00.041
doing this to get an array out of
objects so that you can reduce it,

198
00:14:00.041 --> 00:14:04.250
and then sort of combining it
back together into an object?

199
00:14:04.250 --> 00:14:08.629
I know like low dash or
underscore have like.

200
00:14:10.250 --> 00:14:12.390
A reducer that you can use
directly on an object.

201
00:14:12.390 --> 00:14:14.350
Do you ever use anything like that?

202
00:14:14.350 --> 00:14:16.470
Maybe not when you're
developing a library, but.

203
00:14:16.470 --> 00:14:18.200
&gt;&gt; Kent C. Dodds: Yeah,
exactly, that's exactly right.

204
00:14:18.200 --> 00:14:19.290
Good question, though.

205
00:14:19.290 --> 00:14:25.430
So yeah, low dash, I'm sure there are 30
MPM modules that all can do this, too.

206
00:14:25.430 --> 00:14:27.130
So if this were really complicated,

207
00:14:27.130 --> 00:14:29.500
I might find a small
library that could do that.

208
00:14:29.500 --> 00:14:32.910
But just like you said,
when I'm using a library or

209
00:14:32.910 --> 00:14:36.880
when I'm writing a library then I
wanna just kinda use the raw APIs.

210
00:14:36.880 --> 00:14:42.180
It's not like too much
more complicated than

211
00:14:42.180 --> 00:14:45.590
using reduce from what Azure is like,
reducer.

212
00:14:45.590 --> 00:14:46.940
&gt;&gt; Speaker 2: It's just
a little [INAUDIBLE]

213
00:14:46.940 --> 00:14:47.970
&gt;&gt; Kent C. Dodds: Yeah, but it does read

214
00:14:47.970 --> 00:14:50.540
a little bit nicer so
I can see how that could be valuable.

215
00:14:50.540 --> 00:14:54.428
If you are doing this within your
application using low dash then I wouldn't

216
00:14:54.428 --> 00:14:58.512
have any qualms with somebody wanting to
just use low dash reduce or something.

217
00:15:00.910 --> 00:15:01.890
&gt;&gt; Kent C. Dodds: Yeah, good question.

