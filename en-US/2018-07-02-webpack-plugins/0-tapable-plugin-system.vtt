WEBVTT

1
00:00:00.470 --> 00:00:02.930
&gt;&gt; Sean Larkin: So,
we're gonna actually get kind of in depth.

2
00:00:02.930 --> 00:00:07.590
Considerably in depth, one of the things
that I think is really important and

3
00:00:07.590 --> 00:00:12.640
unlocks the ability for
you to do anything you've ever imagined

4
00:00:12.640 --> 00:00:17.730
with webpack is actually,
right custom plugins.

5
00:00:17.730 --> 00:00:21.520
And so,
all of webpack is made of plugins, right?

6
00:00:21.520 --> 00:00:25.540
And so, to know that, it really helps to

7
00:00:25.540 --> 00:00:30.570
understand what the architecture is and
what you can plug into, right?

8
00:00:30.570 --> 00:00:34.670
So, what is Tapable?

9
00:00:34.670 --> 00:00:36.250
Has anybody even heard of Tapable?

10
00:00:36.250 --> 00:00:42.500
Maybe you might have heard about it today,
just as I was talking about it at lunch.

11
00:00:42.500 --> 00:00:45.680
So, it used to be originally,
a 200 line library.

12
00:00:45.680 --> 00:00:48.215
Now we just rewrote it from
the ground up for webpack 4.

13
00:00:49.720 --> 00:00:56.750
But it is the entire,
it's the entire backbone of webpack.

14
00:00:56.750 --> 00:01:00.690
Like it is the plugin system,
it is how we write plugins,

15
00:01:00.690 --> 00:01:02.168
it's how plugins are registered.

16
00:01:02.168 --> 00:01:06.700
It's how webpack adds any functionality
that you could ever think.

17
00:01:06.700 --> 00:01:11.220
Cuz our whole application is made or
the library code is made of plugins.

18
00:01:12.770 --> 00:01:17.380
So originally, in webpack 3 and before, so

19
00:01:17.380 --> 00:01:21.180
before webpack 4,
this was how the API worked.

20
00:01:21.180 --> 00:01:26.050
In this code example, you can see
that we have a compiler instance

21
00:01:27.130 --> 00:01:30.770
and actually,
it may even just be more valuable for

22
00:01:30.770 --> 00:01:33.780
me to pull this up in the source
code itself, which I have available.

23
00:01:33.780 --> 00:01:34.980
So, let me do that.

24
00:01:36.230 --> 00:01:37.655
It should just take a second.

25
00:01:37.655 --> 00:01:42.093
[COUGH] So, webpack,

26
00:01:42.093 --> 00:01:46.780
lib, compiler, okay

27
00:01:53.077 --> 00:01:54.328
&gt;&gt; Sean Larkin: All right, so

28
00:01:54.328 --> 00:02:01.105
we only have a very few, so everything
is very object-oriented in webpack,

29
00:02:01.105 --> 00:02:05.735
cuz the original author is
a C# developer by trade.

30
00:02:05.735 --> 00:02:11.103
So [LAUGH] but,
&gt;&gt; Sean Larkin: We use

31
00:02:11.103 --> 00:02:16.521
Tapable in our library, or in our source
code, which you're seeing right now,

32
00:02:16.521 --> 00:02:22.200
to extend and add these methods and
behaviors into like specific classes.

33
00:02:22.200 --> 00:02:25.130
We call these Tapable instances, right?

34
00:02:25.130 --> 00:02:29.210
So it extends Tapable, the compiler.

35
00:02:29.210 --> 00:02:33.650
Now, we also as part of tapable,

36
00:02:33.650 --> 00:02:40.610
we define hooks that are instantly
available when this instant is.

37
00:02:40.610 --> 00:02:43.560
Well, when it's instantiated or
inside the constructor.

38
00:02:43.560 --> 00:02:49.250
So you can see here, early before,
when I showed that, they

39
00:02:49.250 --> 00:02:54.540
were just added on the prototype chain and
there are arbitrary string events, right?

40
00:02:54.540 --> 00:02:57.306
So this is the major change
between webpack 3 and 4.

41
00:02:57.306 --> 00:03:00.742
In 3, we would add these methods
called apply plugins and

42
00:03:00.742 --> 00:03:04.545
we'd have like apply plugins async,
apply plugins parallel.

43
00:03:04.545 --> 00:03:05.555
Apply plugins sync,

44
00:03:05.555 --> 00:03:09.492
like there's all these different ways of
executing plugins that are registered.

45
00:03:09.492 --> 00:03:10.916
And their events.

46
00:03:10.916 --> 00:03:15.690
And then their events themselves,
like EventEmitter were just strings.

47
00:03:15.690 --> 00:03:18.160
And so it wasn't a very
good developer experience.

48
00:03:18.160 --> 00:03:22.245
Like as a plugin author, you would have to
literally search through the code base and

49
00:03:22.245 --> 00:03:26.625
feel like, apply plugins and
then try and find event streams, right?

50
00:03:26.625 --> 00:03:29.455
Cuz we didn't have it
completely documented.

51
00:03:29.455 --> 00:03:33.275
So, one of the greatest upgrades we
did for Tapable is that we added,

52
00:03:33.275 --> 00:03:37.135
we made sure that hooks are static, right?

53
00:03:37.135 --> 00:03:43.200
So, now at anytime if you're writing or if
you're testing this or you add a debugger.

54
00:03:43.200 --> 00:03:47.260
You can instantly just type this .hooks or
compiler.hooks and

55
00:03:47.260 --> 00:03:50.750
you can see everything
that you can plug into.

56
00:03:50.750 --> 00:03:53.630
Or even adding annotations so
that we can make reference documentation.

57
00:03:55.820 --> 00:03:59.512
So there are all different events which
are different parts of the webpack

58
00:03:59.512 --> 00:04:01.140
lifecycle, right?

59
00:04:01.140 --> 00:04:04.080
And so,
ic something wants to hook into it.

60
00:04:04.080 --> 00:04:06.400
So in version three,

61
00:04:06.400 --> 00:04:10.590
we would have this, let's just say
an example plugin we have here.

62
00:04:10.590 --> 00:04:15.290
So in this case, remember when I
talked about the only rules for

63
00:04:15.290 --> 00:04:19.760
a plugin in its anatomy is that it has
to have, it's an object or an instance.

64
00:04:19.760 --> 00:04:22.990
In this case,
we can write a class with ES6 support.

65
00:04:22.990 --> 00:04:27.130
And all it has to have is an apply method,
right?

66
00:04:27.130 --> 00:04:30.559
And when webpack calls apply
plugins whatever, it goes and

67
00:04:30.559 --> 00:04:33.107
finds the things registered to that event.

68
00:04:33.107 --> 00:04:36.770
And webpack passes that compiler instance,
right.

69
00:04:36.770 --> 00:04:39.801
So this was in V3 how
the syntax would look.

70
00:04:41.730 --> 00:04:44.010
You would basically write compiler,plugin.

71
00:04:44.010 --> 00:04:47.150
It's kinda like eventEmitter.on.

72
00:04:47.150 --> 00:04:48.700
It's almost identical.

73
00:04:48.700 --> 00:04:51.930
And whatever event you're
trying to listen to, right?

74
00:04:51.930 --> 00:04:57.250
And then a callback would occur when
that event actually fires, and you have

75
00:04:57.250 --> 00:05:00.460
access to that data and get to do whatever
custom behavior that you would like to.

76
00:05:01.560 --> 00:05:06.425
An example with V4,
it almost looks identical,

77
00:05:06.425 --> 00:05:10.300
so if, and I'll show you that once we
talk about building a custom plugin.

78
00:05:10.300 --> 00:05:12.480
But, I'll just go to a very simple one.

79
00:05:12.480 --> 00:05:16.370
So, the way that you can add like,

80
00:05:17.990 --> 00:05:20.600
even the way we that we take
the entry point and we set it

81
00:05:20.600 --> 00:05:25.130
to start building the graph, is literally
a plugin called the entry option plugin.

82
00:05:25.130 --> 00:05:32.650
Right, and what this does is we, as you
can see here here's an apply method.

83
00:05:32.650 --> 00:05:35.130
We grab the compiler and

84
00:05:35.130 --> 00:05:39.050
then we say compiler.hooks and
then the name of the hook.

85
00:05:39.050 --> 00:05:41.090
So it's not an event string anymore.

86
00:05:41.090 --> 00:05:45.090
We actually have a hook that we
can see and get influence on.

87
00:05:45.090 --> 00:05:48.044
And then first, so we say.tap.

88
00:05:48.044 --> 00:05:50.623
So that's like equivalent of .plugin.

89
00:05:50.623 --> 00:05:55.559
So .tap and then the first
parameter is metadata or for

90
00:05:55.559 --> 00:06:00.400
analytics, or not analytics but
like diagnostics.

91
00:06:00.400 --> 00:06:05.630
So, if we need to know
what is hooking into this,

92
00:06:05.630 --> 00:06:08.030
we can see that it's
the entry option plugin.

93
00:06:08.030 --> 00:06:10.550
So, typically you just
provide the plugin name.

94
00:06:10.550 --> 00:06:14.118
It's optional, you could have
whatever you wanted here, but

95
00:06:14.118 --> 00:06:17.480
this allows us to identify like,
this code happened or

96
00:06:17.480 --> 00:06:22.219
this hook was taking really long time,
or it's the entry option plugin's fault.

97
00:06:22.219 --> 00:06:27.062
But in the same way, we get a callback
which has the data that's passed into it.

98
00:06:27.062 --> 00:06:30.503
And in this case what we're doing is we're
saying well there's three different data

99
00:06:30.503 --> 00:06:32.287
types that ca be set for
the entry property.

100
00:06:32.287 --> 00:06:35.510
It can be an object,
a string literal, or an array, right?

101
00:06:35.510 --> 00:06:39.484
And so all this plugin is doing is
just saying like those are the string?

102
00:06:39.484 --> 00:06:44.311
Okay, use the single entry plugin,
if not use multi, if not use dynamic.

103
00:06:44.311 --> 00:06:48.550
And so this is how we compose and
create small like,

104
00:06:48.550 --> 00:06:53.710
we isolate behavior individual plugins,
right?

105
00:06:53.710 --> 00:06:57.520
So now we can just apply this plugin.

106
00:06:57.520 --> 00:07:01.750
And in this case we're actually adding
that entry point as the dependency

107
00:07:01.750 --> 00:07:04.570
to start building the graph, right?

108
00:07:04.570 --> 00:07:09.660
So that in a nutshell is kind of like
how the new plugin system APIs work.

109
00:07:11.110 --> 00:07:15.633
So going back, [COUGH]
&gt;&gt; Sean Larkin: When I say

110
00:07:15.633 --> 00:07:20.730
a Tapable instance now, it's literally
a class or an object that extends Tapable.

111
00:07:20.730 --> 00:07:24.374
And what's relevant to you is, aka,
it's something you can plug into, right?

112
00:07:25.770 --> 00:07:26.760
You can plug into this.

113
00:07:26.760 --> 00:07:28.250
You can write a plug in for it.

114
00:07:28.250 --> 00:07:31.020
You can extend, modify or change behavior.

115
00:07:31.020 --> 00:07:37.660
And so when you think about kind of
in a more drawing fashion like, even

116
00:07:37.660 --> 00:07:42.120
to access other Tapable instances, you
have to go through the compiler, right?

117
00:07:42.120 --> 00:07:45.272
Because it's the top level.

118
00:07:45.272 --> 00:07:49.312
And so pseudocardio, let's say like you,
to access a compiler,

119
00:07:49.312 --> 00:07:52.576
you have to do this
compiler.hooks.compilation.

120
00:07:52.576 --> 00:07:56.970
You get the compilation back and the call
back and then you say compilation.hook.,

121
00:07:56.970 --> 00:07:58.380
whatever you can tap into.

