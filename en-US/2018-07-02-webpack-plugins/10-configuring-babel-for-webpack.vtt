WEBVTT

1
00:00:00.270 --> 00:00:04.870
&gt;&gt; Speaker 1: Yeah, I was curious about,
can you talk a little bit about ES6 and

2
00:00:04.870 --> 00:00:07.430
Babel, and the necessity for that?

3
00:00:07.430 --> 00:00:11.644
Because I think it was prior
to webpack two or maybe three,

4
00:00:11.644 --> 00:00:14.058
you needed Babel to use modules.

5
00:00:14.058 --> 00:00:17.759
&gt;&gt; Sean Larkin: Technically no,
you didn't, prior to webpack two,

6
00:00:17.759 --> 00:00:19.570
that's right, correct.

7
00:00:19.570 --> 00:00:23.406
&gt;&gt; Speaker 1: But I guess, could you clear
up, cuz I was just under the impression,

8
00:00:23.406 --> 00:00:26.736
if you wanted to use ES6,
you had to use Babel with webpack.

9
00:00:26.736 --> 00:00:29.650
And obviously, we're not doing that and
we're using ES6 just fine.

10
00:00:29.650 --> 00:00:32.491
&gt;&gt; Sean Larkin: Yeah, remember early
on when I talked about modules,

11
00:00:32.491 --> 00:00:36.545
I made the clear distinction between
ES6 and then ESM, the modules itself.

12
00:00:36.545 --> 00:00:43.460
Webpack since version two has
supported ES modules out of the box.

13
00:00:43.460 --> 00:00:48.940
What is kind of a common pitfall is
that people will have presets like

14
00:00:48.940 --> 00:00:54.120
Babel preset 2015,
which by default transpiles

15
00:00:54.120 --> 00:00:59.160
ES modules into common JS syntax,
and so they might not know it.

16
00:00:59.160 --> 00:01:04.813
So if you actually look in
the Babel documentation, Babel JS,

17
00:01:04.813 --> 00:01:09.613
preset ENV is probably the new
popular one that I would

18
00:01:09.613 --> 00:01:14.750
recommend to everybody,
especially for performance.

19
00:01:14.750 --> 00:01:20.516
So what you'll realize is that even here,
by default, if you use this preset,

20
00:01:20.516 --> 00:01:25.870
it's gonna down convert ES modules
to common JS, now why is that bad?

21
00:01:25.870 --> 00:01:31.500
Because you just de-opted, you just
opted out of every webpack optimization.

22
00:01:31.500 --> 00:01:34.510
So we will not scope hoist,
we will not tree shake,

23
00:01:34.510 --> 00:01:37.390
we will not do any things
with common JS modules.

24
00:01:37.390 --> 00:01:40.533
Which is also why I get
frustrated with React,

25
00:01:40.533 --> 00:01:45.405
because they're still shipping common JS,
but anyways, I digress.

26
00:01:45.405 --> 00:01:53.674
However, there's an option in this
preset to turn it off, so modules false.

27
00:01:57.030 --> 00:02:00.980
&gt;&gt; Sean Larkin: So
anytime that you use either preset EMV,

28
00:02:00.980 --> 00:02:05.368
preset 2015, 16, or 17, whatever,

29
00:02:05.368 --> 00:02:11.070
always set modules false
if you're gonna use Babel.

30
00:02:11.070 --> 00:02:15.263
But at the end of the day,
you can use any syntax,

31
00:02:15.263 --> 00:02:22.425
as long as webpack's Acorn parser can
parse the syntax, it's not that crazy new,

32
00:02:22.425 --> 00:02:28.380
webpack can perfectly fine traverse
any module that's using ES6.

33
00:02:28.380 --> 00:02:33.141
Right, the only reason why you would need
Babel to down convert it is if you're

34
00:02:33.141 --> 00:02:36.116
shipping to a browser
that doesn't support it.

35
00:02:36.116 --> 00:02:38.937
Right, so you can still choose to, I mean,

36
00:02:38.937 --> 00:02:43.666
and even then, if you're a library author,
I say, ship the raw source,

37
00:02:43.666 --> 00:02:48.421
don't transpile it at all, and
let your consumers use Babel preset EMV.

38
00:02:48.421 --> 00:02:52.330
Right, because this gives you the option
to choose what browsers you're

39
00:02:52.330 --> 00:02:56.190
targeting and to only transform
syntax that isn't supported, right?

40
00:02:56.190 --> 00:03:01.164
&gt;&gt; Speaker 1: More specifically, I guess
I was giving modules as one example, but

41
00:03:01.164 --> 00:03:05.905
what isn't just supported out of
the box for ES6, not just ESM?

42
00:03:07.150 --> 00:03:11.280
&gt;&gt; Sean Larkin: Anything that's before
stage two, I think, like for example,

43
00:03:11.280 --> 00:03:16.270
you can use async await anywhere in your
code, and webpack's not gonna choke.

44
00:03:16.270 --> 00:03:19.480
The only thing is,
if Acorn doesn't implement a syntax,

45
00:03:20.590 --> 00:03:24.540
then of course it's gonna
cause AST errors, right?

46
00:03:24.540 --> 00:03:27.640
Because that's what we do,
we traverse the entire AST.

47
00:03:27.640 --> 00:03:32.253
So if it's a crazy new syntax that
maybe might not be supported yet

48
00:03:32.253 --> 00:03:36.890
cuz it's stage zero through two,
then you'll probably need Babel to throw

49
00:03:37.910 --> 00:03:41.670
it through a loader, and
before it parses the AST, down-convert it.

50
00:03:41.670 --> 00:03:43.530
But in most cases,

51
00:03:43.530 --> 00:03:48.960
as long as you're not, I even think
object rest spread might work.

52
00:03:48.960 --> 00:03:55.330
&gt;&gt; Sean Larkin: We could technically
just find out, we have the technology.

53
00:03:56.840 --> 00:03:58.540
So let's see,
where's an object we got here?

54
00:03:58.540 --> 00:04:04.572
I guess I could say,
&gt;&gt; Sean Larkin: Here

55
00:04:04.572 --> 00:04:10.902
we go,
&gt;&gt; Sean Larkin: Right,

56
00:04:10.902 --> 00:04:14.380
what if I run this in dev mode,
what happens?

57
00:04:19.736 --> 00:04:25.105
&gt;&gt; Sean Larkin: Object rest spread,
totally legit.

58
00:04:25.105 --> 00:04:28.930
So I mean, there's gonna be cases
where you might not have something,

59
00:04:28.930 --> 00:04:35.780
I don't know, what's a good stage one or
zero crazy syntax?

60
00:04:35.780 --> 00:04:38.365
What is a good stage, let me see it,
it actually should tell me.

61
00:04:38.365 --> 00:04:40.295
&gt;&gt; Speaker 3: [INAUDIBLE]
&gt;&gt; Sean Larkin: Yeah,

62
00:04:40.295 --> 00:04:44.880
that's the question mark dot question
mark dot question mark, right?

63
00:04:44.880 --> 00:04:47.600
Okay, that's a good one,
that's great, actually.

64
00:04:47.600 --> 00:04:57.299
So I can say,
&gt;&gt; Sean Larkin: I

65
00:04:57.299 --> 00:05:02.795
don't know, Halloween,
right, Halloween, not weed.

66
00:05:02.795 --> 00:05:08.341
[LAUGH] Okay, cool, I guess you also
need a question mark at the ending one,

67
00:05:08.341 --> 00:05:10.650
right, I can never remember.

68
00:05:10.650 --> 00:05:13.720
Okay, so this is technically stage one,
right, or stage zero?

69
00:05:13.720 --> 00:05:14.610
&gt;&gt; Speaker 1: Stage one now.

70
00:05:14.610 --> 00:05:19.285
&gt;&gt; Sean Larkin: Okay, but hey, look,
we choked cuz Acorn doesn't know this.

71
00:05:19.285 --> 00:05:23.417
And the Acorn parser team will not
implement anything until it's stage four,

72
00:05:23.417 --> 00:05:26.620
I think, right, and
that's where browsers implement it.

73
00:05:26.620 --> 00:05:29.809
Or late stage three,
we begged them, we were like,

74
00:05:29.809 --> 00:05:33.855
please can you do async await,
cuz everybody's requesting it.

75
00:05:33.855 --> 00:05:37.700
And we don't wanna force people to use
Babel if they don't have to, right?

76
00:05:37.700 --> 00:05:41.120
And the reason, well, no,

77
00:05:41.120 --> 00:05:44.170
the browsers just got it in really fast,
and you wanna know why?

78
00:05:44.170 --> 00:05:50.547
It's because async await transpiles
to about 80 lines of ES5.

79
00:05:50.547 --> 00:05:57.100
And it's specifically because of the yield
and generator run time and all that stuff.

80
00:05:57.100 --> 00:06:01.000
So they were like gosh,
we don't want people shipping,

81
00:06:01.000 --> 00:06:03.887
cuz the amount of code
bloat you get is huge.

82
00:06:03.887 --> 00:06:06.851
So that's why I say use
browser preset EMV, so

83
00:06:06.851 --> 00:06:11.569
that you're only transpiling stuff
that really needs to be transpiled.

84
00:06:11.569 --> 00:06:16.397
But yes, thank you, that's a great example
where we will choke in some cases and

85
00:06:16.397 --> 00:06:20.389
then you do need to use Babel if
you wanna support this wild syntax.

86
00:06:20.389 --> 00:06:21.737
Any other questions?

87
00:06:26.078 --> 00:06:30.952
&gt;&gt; Speaker 3: So my question would be,
could you use stage zero Babel,

88
00:06:30.952 --> 00:06:36.040
but then say modules falls,
and then get the tree shaking?

89
00:06:37.060 --> 00:06:40.062
&gt;&gt; Sean Larkin: Technically,
as far as I understand, you can use

90
00:06:40.062 --> 00:06:44.653
browser preset EMV, and it knows when
you're using a stage zero, I guess.

91
00:06:44.653 --> 00:06:50.075
It has this crazy heuristic where
the whole point is that it'll see and say,

92
00:06:50.075 --> 00:06:56.000
no, no, no, no, we gotta transpile this
back to something the browser understands.

93
00:06:58.730 --> 00:07:00.580
&gt;&gt; Sean Larkin: So yeah, absolutely,

94
00:07:00.580 --> 00:07:05.000
that's when you would wanna
use Babel loader, right?

95
00:07:05.000 --> 00:07:10.100
Or if you're using, well, TypeScript
does that for you, if you're using,

96
00:07:10.100 --> 00:07:14.320
yeah, I guess you could say,
if you're using React and do a and

97
00:07:14.320 --> 00:07:19.810
you gotta use the broken Decorator syntax,
gotta use.

98
00:07:19.810 --> 00:07:22.560
That's stage two,
it's never gonna be implemented that way,

99
00:07:22.560 --> 00:07:25.768
cuz it's the hash symbol now
instead of the at symbol.

100
00:07:25.768 --> 00:07:31.100
So you would need to use Babel
to transpile that, right?

101
00:07:31.100 --> 00:07:35.455
I think it's called Decorator
stage two legacy or something,

102
00:07:35.455 --> 00:07:37.850
and EMV handles that for you also.

103
00:07:37.850 --> 00:07:41.330
Maybe we need to get Henry Zoo up in
here on a Frontend Masters course.

104
00:07:43.700 --> 00:07:47.320
&gt;&gt; Sean Larkin: I'll make a call,
[LAUGH] cool.

