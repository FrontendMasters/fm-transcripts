WEBVTT

1
00:00:00.110 --> 00:00:04.170
&gt;&gt; Sean Larkin: The first line of code
that executes typically web pack is node

2
00:00:04.170 --> 00:00:04.690
API.

3
00:00:04.690 --> 00:00:09.280
All of our CLIs,
any of the CLIs use the node API, right?

4
00:00:09.280 --> 00:00:11.140
And this is the node API.

5
00:00:11.140 --> 00:00:15.110
Essentially we instantiate a bunch of
things, specifically compiler, right?

6
00:00:15.110 --> 00:00:17.030
That's your tappable instance.

7
00:00:17.030 --> 00:00:20.499
And then we're literally just
gonna call compiler.run.

8
00:00:21.800 --> 00:00:25.740
This is the single line of
when webpacks compiler starts.

9
00:00:25.740 --> 00:00:30.290
Now we're also doing some other
things like taking options and

10
00:00:30.290 --> 00:00:31.910
we applied defaults, right?

11
00:00:31.910 --> 00:00:36.200
So people are like, webpack doesn't
have enough defaults, well guess what?

12
00:00:36.200 --> 00:00:41.100
There are hundreds of properties we're
defaulting for you out of the box right?

13
00:00:43.270 --> 00:00:46.920
And this is where we actually
implemented our modes, right?

14
00:00:46.920 --> 00:00:51.790
Because we basically said,
if we're in, production or

15
00:00:51.790 --> 00:00:54.700
if we're not, we're going to set
a bunch of different modes, right?

16
00:00:54.700 --> 00:00:59.650
We're going to choose to order
modules by how often they occur,

17
00:00:59.650 --> 00:01:02.630
topologically inside the chunks.

18
00:01:02.630 --> 00:01:03.870
If not, we're not gonna do that.

19
00:01:03.870 --> 00:01:05.400
And you save on build time.

20
00:01:05.400 --> 00:01:09.260
So anyway, that's the options defaulter
and then we gotta webpack options apply.

21
00:01:10.560 --> 00:01:18.939
And so this is where we actually
are applying each of the individual,

22
00:01:18.939 --> 00:01:23.430
we take the configuration, right?

23
00:01:23.430 --> 00:01:26.040
And I had just this was me
working in a branch, and so

24
00:01:26.040 --> 00:01:29.655
I figured out how to get type
definitions for the entire config.

25
00:01:29.655 --> 00:01:35.110
[LAUGH] But webpack options apply,
we literally take the config and

26
00:01:35.110 --> 00:01:39.840
the compiler instance,
and we basically run

27
00:01:39.840 --> 00:01:44.420
a giant switch statement, just saying
well, if it's this property, target.

28
00:01:44.420 --> 00:01:48.960
We're gonna apply a different
set of templates, right?

29
00:01:48.960 --> 00:01:53.790
A different set of templates for
the bundle, for the created code, right?

30
00:01:53.790 --> 00:01:58.360
So, if you're in node,
we can't use a jsonP, right?

31
00:01:58.360 --> 00:01:59.330
There's no DOM.

32
00:01:59.330 --> 00:02:03.430
So when the target is node, or

33
00:02:03.430 --> 00:02:07.750
electron main, or
anything that doesn't have DOM,

34
00:02:07.750 --> 00:02:11.370
we're gonna actually apply
a different type of template to it.

35
00:02:11.370 --> 00:02:14.900
This is the power of this kind
of modularity, encapsulation.

36
00:02:14.900 --> 00:02:18.580
And we apply a different plugin that
then creates these different templates.

37
00:02:20.300 --> 00:02:23.440
But then if you jump
all the way down here,

38
00:02:23.440 --> 00:02:26.045
you're gonna actually see
a hook that's called Compiler.

39
00:02:26.045 --> 00:02:30.940
Complier.hooks.entryoption.call.

40
00:02:30.940 --> 00:02:36.020
So this is where the entry option
hook is triggered and if we

41
00:02:36.020 --> 00:02:40.190
even did a source code search like, hmm,
what actually is listening on that hook?

42
00:02:40.190 --> 00:02:46.250
So I can now just search
compiler.hooks.entryoption.

43
00:02:46.250 --> 00:02:47.180
My goodness.

44
00:02:47.180 --> 00:02:51.750
It's the entry option plug-in
which takes the entry property and

45
00:02:51.750 --> 00:02:54.210
apply, creates this dependency, right?

46
00:02:54.210 --> 00:02:56.860
So, we need to kick off the traversal and
resolve it.

47
00:02:56.860 --> 00:02:58.690
And to do that,
you start with a dependency.

48
00:02:58.690 --> 00:03:02.300
So, we basically say, hey,
this is a dependency.

49
00:03:02.300 --> 00:03:04.510
And so, you need to go resolve it.

50
00:03:04.510 --> 00:03:08.774
So, then we end up going to
the compilation where we call,

51
00:03:08.774 --> 00:03:13.821
well technically if we step through
it like single entry plug in It's

52
00:03:13.821 --> 00:03:18.800
then gonna set basically the template for
this type of dependency.

53
00:03:18.800 --> 00:03:20.930
So it can be transformed.

54
00:03:20.930 --> 00:03:25.490
And then we literally just
call compilation.addEntry.

55
00:03:25.490 --> 00:03:31.750
So if I go to Compilation and
I search for addEntry, oops.

56
00:03:31.750 --> 00:03:32.840
No, there we go.

57
00:03:32.840 --> 00:03:36.410
[LAUGH] Now where is it?

58
00:03:36.410 --> 00:03:41.289
Add entry.
&gt;&gt; Sean Larkin: So this is.

59
00:03:41.289 --> 00:03:44.570
Now I'm not going to explain
everything that's happening here.

60
00:03:44.570 --> 00:03:45.770
I don't think it's as valuable.

61
00:03:45.770 --> 00:03:49.340
Because there's lots of edge cases and
stuff but we call add module chain.

62
00:03:49.340 --> 00:03:52.100
Takes a call back and
at the end of it you get a module, right?

63
00:03:52.100 --> 00:03:53.730
Because you took a dependency,
resolved it and

64
00:03:53.730 --> 00:03:55.770
you get a module from the module factory.

65
00:03:55.770 --> 00:04:00.290
But it's like add module and
add module chain calls factory.create.

66
00:04:00.290 --> 00:04:03.890
So this is the normal module
factory that has a create function.

67
00:04:06.560 --> 00:04:09.000
And this is actually calling hooks.

68
00:04:09.000 --> 00:04:13.060
Before it resolves, there's a hook that
you can plug into and do crazy things.

69
00:04:13.060 --> 00:04:17.128
Like change the entire request and go
fetch a different module if you wanted to.

70
00:04:17.128 --> 00:04:21.552
But then the result is the resolver
resolving that information with

71
00:04:21.552 --> 00:04:23.840
the data that you need.

72
00:04:23.840 --> 00:04:27.760
And then it calls the factory function,
and it's going to create,

73
00:04:27.760 --> 00:04:32.390
I even think if I search in here,
new module, new normal module.

74
00:04:32.390 --> 00:04:35.658
There we go, it creates and
it's gonna pass it back in a hook.

75
00:04:35.658 --> 00:04:39.950
So this .hooks.module is something
you can plug into to access that

76
00:04:39.950 --> 00:04:44.242
newly created beautiful
shiny module abstraction.

77
00:04:44.242 --> 00:04:49.218
And now of course, then we would
actually have to go back out four

78
00:04:49.218 --> 00:04:54.217
levels of callbacks [LAUGH]
because asynchronous programming.

79
00:04:54.217 --> 00:04:58.130
And we would end up eventually we
essentially call this function called,

80
00:04:59.150 --> 00:05:05.010
add, let's see, dependencies,
it's like add module dependencies.

81
00:05:05.010 --> 00:05:07.120
Or process module dependencies.

82
00:05:07.120 --> 00:05:12.715
So this is where we basically,
we have to now parse through this code and

83
00:05:12.715 --> 00:05:18.980
walk through it and we tie everything
together, create the graph relations.

84
00:05:18.980 --> 00:05:22.110
But so long story short,
that's where this all happens.

85
00:05:22.110 --> 00:05:25.900
And I think the most cool thing is that
now you that understand what the parser

86
00:05:25.900 --> 00:05:32.530
instance is, look at all these hooks.
&gt;&gt; Sean Larkin: These are all hooks here.

87
00:05:34.110 --> 00:05:39.590
And what webpack does
is as we walk the AST,

88
00:05:39.590 --> 00:05:45.470
we fire an event for
every type of syntax we walk across.

89
00:05:45.470 --> 00:05:48.200
So, it's not just the import statements.

90
00:05:48.200 --> 00:05:53.630
It's anything, it's decorations,
it's any type, a variable.

91
00:05:53.630 --> 00:05:57.310
We walk across a variable,
we're gonna admit it, an event about it.

92
00:05:57.310 --> 00:06:02.120
And so literally, why we do this is
because if you look in our source code

93
00:06:02.120 --> 00:06:06.990
under dependencies,
we have an individual parser

94
00:06:06.990 --> 00:06:10.500
plugin that is listening to
that specific syntax, right?

95
00:06:12.150 --> 00:06:15.041
So, a common js require dependency plugin,
or

96
00:06:15.041 --> 00:06:19.540
parser plugin is just listening to
require, and you can even see it here.

97
00:06:19.540 --> 00:06:23.499
We hook into the expression, parse.hooks.

98
00:06:23.499 --> 00:06:26.870
Require and then the common js.

99
00:06:26.870 --> 00:06:30.040
Sorry, sorry,
[LAUGH] I can't see the code,

100
00:06:30.040 --> 00:06:32.858
there we go.
&gt;&gt; Sean Larkin: And so,

101
00:06:32.858 --> 00:06:38.520
it's literally listening to it.
&gt;&gt; Sean Larkin: And then what

102
00:06:38.520 --> 00:06:42.920
we do in this handler is we basically just
have this method called addDependency.

103
00:06:42.920 --> 00:06:45.710
So that's literally how we
take on a module object.

104
00:06:45.710 --> 00:06:47.620
We add the dependency instance and
tie it together.

105
00:06:48.710 --> 00:06:53.750
So, yes, we literally have individual
plugins for every type of statement that

106
00:06:53.750 --> 00:06:59.030
exists in webpack and so events are firing
in the thousands, the tens of thousands,

107
00:06:59.030 --> 00:07:03.190
the twenty hundreds of thousands
of times when you run webpack,

108
00:07:03.190 --> 00:07:08.140
because as for every piece of
the AST it's gonna fire an event.

109
00:07:08.140 --> 00:07:13.990
So I think when I learned this,
my mind exploded into oblivion.

110
00:07:13.990 --> 00:07:19.110
I was like, my gosh, this means
that I could listen to anything and

111
00:07:19.110 --> 00:07:24.060
provide functionality or diagnostics or
you could do crazy stuff.

112
00:07:24.060 --> 00:07:28.370
It's a little bit of abstraction and
it's not the easiest thing to do,

113
00:07:28.370 --> 00:07:31.990
because you're having to create
a parser plugin, hook into the parser.

114
00:07:31.990 --> 00:07:36.690
Also create a dependency factory and,
you know a dependency template for

115
00:07:36.690 --> 00:07:40.540
it because the template transforms
that individual statement.

116
00:07:40.540 --> 00:07:43.880
But, the fact that everything is so
modular and

117
00:07:43.880 --> 00:07:48.750
extensible is I think what like really
made me super excited about this.

118
00:07:48.750 --> 00:07:52.820
And you can see, each dependency
instance will have a template, and

119
00:07:52.820 --> 00:07:56.810
I think it's in this
one specifically it's.

120
00:07:56.810 --> 00:07:57.480
Let me.

121
00:07:57.480 --> 00:07:59.890
If you just type template
in our source code.

122
00:07:59.890 --> 00:08:05.790
Am I still there?
&gt;&gt; Sean Larkin: Hm.

123
00:08:05.790 --> 00:08:06.890
Let's see.

124
00:08:06.890 --> 00:08:08.870
Well, there's a whole bunch.

125
00:08:08.870 --> 00:08:09.650
Template.

126
00:08:09.650 --> 00:08:10.150
There we go.
I don't

127
00:08:11.580 --> 00:08:12.820
know why it's not pulling them all up.

128
00:08:14.300 --> 00:08:15.640
There they are.

129
00:08:15.640 --> 00:08:16.921
Literally we have templates for

130
00:08:16.921 --> 00:08:19.250
every one of those syntaxes
we need to transform, right?

131
00:08:19.250 --> 00:08:23.070
And the reason behind this
is because doing AST.

132
00:08:23.070 --> 00:08:28.360
We could modify the AST and
that's it, to the code we want.

133
00:08:28.360 --> 00:08:31.270
But modifying the AST is slow, and

134
00:08:31.270 --> 00:08:35.030
so doing string transformations with
templates is what we chose to do.

135
00:08:35.030 --> 00:08:37.230
But anyway, there's a template for
everything.

136
00:08:37.230 --> 00:08:41.930
You can plug into the template and
how it renders, that's all capable.

137
00:08:41.930 --> 00:08:48.940
So the master way of learning
how to write plugins

138
00:08:48.940 --> 00:08:53.770
that do anything is literally just looking
at what we do in our source code, right?

139
00:08:53.770 --> 00:08:57.260
Because that's the best practise for
how we write plugins,

140
00:08:57.260 --> 00:08:59.380
we dog food this entire system.

