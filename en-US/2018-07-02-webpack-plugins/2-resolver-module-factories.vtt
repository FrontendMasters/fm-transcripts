WEBVTT

1
00:00:00.100 --> 00:00:01.920
&gt;&gt; Sean Larkin: The next
one is the resolver.

2
00:00:01.920 --> 00:00:06.330
So when I say a resolver,
who knows here what a resolver is, or

3
00:00:06.330 --> 00:00:07.980
what it's purpose is?

4
00:00:07.980 --> 00:00:11.705
So a resolver is just a fancy word for,
you give something,

5
00:00:11.705 --> 00:00:16.622
you give it a partial path, and it's
gonna go make sure it exists, right, and

6
00:00:16.622 --> 00:00:18.730
give you the full absolute path.

7
00:00:18.730 --> 00:00:22.618
When you use a required statement in node,
it's running,

8
00:00:22.618 --> 00:00:27.774
basically you send it to the module
resolver, right, to make sure it exists.

9
00:00:27.774 --> 00:00:30.110
Well, that's the same thing.

10
00:00:30.110 --> 00:00:34.760
We have created our own that's
asynchronous on top of, and

11
00:00:34.760 --> 00:00:38.140
completely respecting of
the node module algorithm.

12
00:00:40.760 --> 00:00:45.430
Well, so what happens is that,
when you pass your entry point to webpack.

13
00:00:45.430 --> 00:00:47.900
We take it,
we give it to the resolver, and

14
00:00:47.900 --> 00:00:51.184
we say, hey,
go find out if this exists, right?

15
00:00:52.670 --> 00:00:54.300
So it goes and does the search.

16
00:00:54.300 --> 00:00:58.094
It's like, okay, let's search relative
to where this file is that called it.

17
00:00:58.094 --> 00:01:00.660
Okay, and let's go see,
is there a file here?

18
00:01:00.660 --> 00:01:02.540
Great, let's go ahead and return.

19
00:01:02.540 --> 00:01:06.810
Then what happens is, it returns
back a bunch of extra information.

20
00:01:06.810 --> 00:01:09.801
So not only like, okay,
it was in this folder, and

21
00:01:09.801 --> 00:01:11.899
here's the full request, right?

22
00:01:11.899 --> 00:01:14.973
If is this is the absolute path, and

23
00:01:14.973 --> 00:01:20.005
were there any query strings or
anything weird tied to it?

24
00:01:20.005 --> 00:01:23.748
We're gonna provide you
that information as well.

25
00:01:23.748 --> 00:01:27.226
And so we take that, and
we send it back, and

26
00:01:27.226 --> 00:01:32.775
provide more detailed information
that other parts of webpack need.

27
00:01:32.775 --> 00:01:36.884
All right, so and as you can see, so what
you might not know is that our resolver is

28
00:01:36.884 --> 00:01:40.090
actually something you
can use outside webpack.

29
00:01:40.090 --> 00:01:44.640
We published it to a separate package,
called enhanced-resolve.

30
00:01:44.640 --> 00:01:49.603
So if you look inside our source code node
modules, I peeked in my node modules,

31
00:01:49.603 --> 00:01:52.010
and you won't believe what I found.

32
00:01:52.010 --> 00:01:57.305
[LAUGH] All right, if you go to E,
you actually see here that

33
00:01:57.305 --> 00:02:02.875
enhance-resolve is a separate library,
and of course, all it is is plugins.

34
00:02:02.875 --> 00:02:10.430
But we basically apply a metric ton of
plugins based, the configurations for

35
00:02:10.430 --> 00:02:15.960
the resolve property in webpack,
all just map to specific plugins, right?

36
00:02:15.960 --> 00:02:23.084
And so you can actually use this outside
in another utility for node, or whatever.

37
00:02:23.084 --> 00:02:28.480
It's great, cuz it's way faster than
node synchronize resolver and pluggable.

38
00:02:28.480 --> 00:02:33.400
So you can do insane amounts of things
when you can plug into this functionality

39
00:02:33.400 --> 00:02:34.970
and alter it.

40
00:02:34.970 --> 00:02:39.198
But really, there's not many hooks
just besides like, hey, it's when we,

41
00:02:39.198 --> 00:02:43.770
well, I won't get too much
into the resolver hooks.

42
00:02:43.770 --> 00:02:45.036
It's a little bit more complex.

43
00:02:45.036 --> 00:02:49.001
And if you get there, send me a DM on
Twitter and we'll add you to a webpack

44
00:02:49.001 --> 00:02:52.790
slack, and you'll end up being
a contributor to our project [LAUGH].

45
00:02:52.790 --> 00:02:57.000
Okay, so
the next is called the Module Factories.

46
00:02:57.000 --> 00:03:03.550
So who here knows in programming, what
a factory does, or have heard of the term?

47
00:03:03.550 --> 00:03:06.560
If you're into Java or
does C# have factories?

48
00:03:06.560 --> 00:03:07.820
I've never done C#.

49
00:03:07.820 --> 00:03:11.500
Maybe, I'm not sure, or
if you used AngularJS.

50
00:03:11.500 --> 00:03:15.100
Factories, all they do is they create
instances, right, they create objects.

51
00:03:15.100 --> 00:03:16.150
That's the whole purpose.

52
00:03:18.300 --> 00:03:23.710
And so, to us, a module factory is
gonna create a module instance, right?

53
00:03:23.710 --> 00:03:28.250
And I say module factories,
because we have a couple different kinds.

54
00:03:28.250 --> 00:03:31.990
So if we went to our source code again
in webpack, and we scroll through.

55
00:03:31.990 --> 00:03:34.330
Let's see, I go all the way down.

56
00:03:34.330 --> 00:03:38.740
There's actually two module factories or
two classes that end in module factory.

57
00:03:40.730 --> 00:03:43.353
One is the normal module factory,
and of course,

58
00:03:43.353 --> 00:03:47.358
you can guess it creates normal module
instances, which is another class.

59
00:03:47.358 --> 00:03:52.604
And it has a bunch of hooks as well.

60
00:03:52.604 --> 00:03:55.430
And then we also have
a context module factory.

61
00:03:55.430 --> 00:04:00.072
So the difference between them is
supporting the expression inside of that

62
00:04:00.072 --> 00:04:01.850
dynamic import statement.

63
00:04:01.850 --> 00:04:04.450
That is a separate module factory.

64
00:04:04.450 --> 00:04:07.960
So a little bit maybe extra
information you do need to care about.

65
00:04:07.960 --> 00:04:14.210
So module factories,
it takes a successfully resolved request,

66
00:04:14.210 --> 00:04:19.290
right, all that beautiful information
that we just got from the resolver.

67
00:04:20.450 --> 00:04:22.300
And it's going to collect the source code.

68
00:04:22.300 --> 00:04:24.785
So it's actually going to pull
the source code from the file.

69
00:04:24.785 --> 00:04:27.264
It's gonna store it in
this module object in

70
00:04:27.264 --> 00:04:31.103
memory,
&gt;&gt; Sean Larkin: And

71
00:04:31.103 --> 00:04:33.449
then add some other information, as well.

72
00:04:33.449 --> 00:04:37.354
So when you think about it,
here's the beautifully drawn diagram,

73
00:04:37.354 --> 00:04:41.870
where we take that awesome information
we just got from the resolver.

74
00:04:41.870 --> 00:04:45.180
We're gonna pass it through
the module factory, and

75
00:04:45.180 --> 00:04:47.290
it's going to create a module
object out of it, right?

