WEBVTT

1
00:00:00.160 --> 00:00:04.250
&gt;&gt; Sean Larkin: And so
now you see this example again, right?

2
00:00:04.250 --> 00:00:09.640
So, we pass the configuration to webpack,

3
00:00:09.640 --> 00:00:12.190
it consumes it, and
reads the entry property.

4
00:00:13.440 --> 00:00:17.900
So, we basically,
we don't know if that entry exists, so

5
00:00:17.900 --> 00:00:20.920
we have to go through
the normal module factory,

6
00:00:20.920 --> 00:00:25.210
which calls out to the resolver and
says, hey, I don't know if this exists.

7
00:00:25.210 --> 00:00:30.250
Can we verify this, please,
and so it goes and searches.

8
00:00:30.250 --> 00:00:33.060
If it finds it, it says, hey, we're good.

9
00:00:33.060 --> 00:00:37.580
It's here, and it returns the full path
information, and some other context and

10
00:00:37.580 --> 00:00:42.190
useful data, and passes it back
to the normal module factory.

11
00:00:42.190 --> 00:00:45.870
What that does is it creates this object
now, collects the source information,

12
00:00:45.870 --> 00:00:47.780
and now we have the source for the module.

13
00:00:49.236 --> 00:00:52.500
Now what webpack does from here
is it has to take that source and

14
00:00:52.500 --> 00:00:53.820
it's gonna parse it into an AST.

15
00:00:54.840 --> 00:00:56.760
It walks through the graph looking for

16
00:00:56.760 --> 00:01:01.660
dependency statements, and as it finds it,
it's going to attach one to the module.

17
00:01:04.440 --> 00:01:08.785
&gt;&gt; Sean Larkin: Then, when you think
about it, those dependency statements,

18
00:01:08.785 --> 00:01:11.601
even if you look back at the AST explorer,

19
00:01:11.601 --> 00:01:16.512
you'll notice,
&gt;&gt; Sean Larkin: Inside the import

20
00:01:16.512 --> 00:01:21.825
declaration, what's the problem here?

21
00:01:21.825 --> 00:01:23.820
We couldn't just go pull
a source from here, right?

22
00:01:23.820 --> 00:01:25.050
What would we have to do with that?

23
00:01:26.720 --> 00:01:32.050
If you look at the value property here
it's corresponding to that little piece.

24
00:01:32.050 --> 00:01:35.340
What would we have to do before
we could collect this source?

25
00:01:36.920 --> 00:01:37.590
&gt;&gt; Speaker 2: Resolve that path.

26
00:01:37.590 --> 00:01:41.140
&gt;&gt; Sean Larkin: We'd have to
resolve that path, absolutely.

27
00:01:41.140 --> 00:01:46.470
So, we literally repeat the process for
every dependency on that module.

28
00:01:46.470 --> 00:01:50.890
So it's a breadth-first
search graph traversal.

29
00:01:50.890 --> 00:01:54.670
So we essentially repeat
this process until

30
00:01:54.670 --> 00:01:58.110
there are no more dependencies
to be resolved, right?

31
00:01:58.110 --> 00:01:58.670
Make sense?

32
00:02:00.760 --> 00:02:04.980
And that is entirety of webpack,
how it creates the graph.

33
00:02:06.870 --> 00:02:12.770
So, you'll also see a little corner
down there, and it says loader runner.

34
00:02:12.770 --> 00:02:18.660
So, if it's not JavaScript, or
if there are conditions like the rules,

35
00:02:18.660 --> 00:02:24.630
the regular expressions that match against
that result path, what happens is that

36
00:02:24.630 --> 00:02:29.820
those loaders functionally transform
that file until it's JavaScript, and

37
00:02:29.820 --> 00:02:33.440
then it parses, and
goes through the exact same process.

38
00:02:35.120 --> 00:02:38.499
So, now we get to the rendering portion,
and so

39
00:02:38.499 --> 00:02:42.904
I made this little comic,
I think it's kind of cool, maybe.

40
00:02:42.904 --> 00:02:44.620
Hey, I'm a module!

41
00:02:44.620 --> 00:02:46.400
I can't wait to work in the browser!

42
00:02:46.400 --> 00:02:48.610
And the compilation's like whoa!

43
00:02:48.610 --> 00:02:49.770
Stop!

44
00:02:49.770 --> 00:02:50.440
You are not ready.

45
00:02:50.440 --> 00:02:53.200
You are not ready for the big stage.

46
00:02:53.200 --> 00:02:55.560
So first you need to jump in
this retainer we call a chunk,

47
00:02:55.560 --> 00:02:59.070
and we're going to be throwing
a lot of plugins at you,

48
00:02:59.070 --> 00:03:03.260
and topically sorting and optimizing you,
we don't want to lose you.

49
00:03:03.260 --> 00:03:04.090
So we need to keep track.

50
00:03:05.580 --> 00:03:09.900
Now we're almost there, but those
required import statements have to go.

51
00:03:09.900 --> 00:03:12.240
They don't work in the browser, so

52
00:03:12.240 --> 00:03:17.160
the parser gave me special instructions
for rendering your dependencies.

53
00:03:17.160 --> 00:03:19.610
We call them dependency templates and
dependency factories.

54
00:03:22.214 --> 00:03:24.108
&gt;&gt; Sean Larkin: And
then of course the render occurs, and

55
00:03:24.108 --> 00:03:26.230
it's like, my god I'm finally rendered.

56
00:03:26.230 --> 00:03:31.223
Here I come browser-land, I'm so ready.

57
00:03:31.223 --> 00:03:35.200
So literally,
this is how webpack works in its entirety.

58
00:03:36.310 --> 00:03:40.240
That's webpack, that is everything
on how it works under the hood.

59
00:03:41.840 --> 00:03:42.969
That's all it is.

60
00:03:42.969 --> 00:03:46.650
You could even break it up into three
main stages, or like three steps.

61
00:03:46.650 --> 00:03:49.880
One, which is build the graph.

62
00:03:49.880 --> 00:03:53.087
Two, which is optimize the graph,
and three, render it, and

63
00:03:53.087 --> 00:03:55.520
we just use templates,
so it's data binding.

64
00:03:55.520 --> 00:03:57.970
Does that make sense?

65
00:03:57.970 --> 00:03:59.890
Do you have questions so far?

66
00:03:59.890 --> 00:04:02.240
I think that this knowledge
is super-important.

67
00:04:02.240 --> 00:04:04.940
Why do I teach you about
the topical instances?

68
00:04:04.940 --> 00:04:08.240
Because that's the, I shouldn't say crap,
but that's the crap you plug into.

69
00:04:08.240 --> 00:04:13.870
It's like, any of this behavior that you
just learned, is completely over-ridable.

70
00:04:13.870 --> 00:04:15.460
Completely extensible.

71
00:04:15.460 --> 00:04:19.750
Completely, you can have it
do anything you want, and

72
00:04:19.750 --> 00:04:21.220
that's why plugins are so powerful.

