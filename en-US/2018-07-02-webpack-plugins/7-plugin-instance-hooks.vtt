WEBVTT

1
00:00:00.060 --> 00:00:01.960
&gt;&gt; Sean Larkin: Why don't we just
hook into something different just so

2
00:00:01.960 --> 00:00:04.410
that we can see how the hook triggers,
right?

3
00:00:06.080 --> 00:00:11.110
So I think why don't we go to
something in the compilation.

4
00:00:11.110 --> 00:00:13.360
So how do you plug in to
something that's not the compiler?

5
00:00:15.970 --> 00:00:18.730
So if you wanna plug into a different
instance you still have to go through

6
00:00:18.730 --> 00:00:19.490
the compiler though.

7
00:00:19.490 --> 00:00:23.778
So compiler.hooks and
then I know just by heart but

8
00:00:23.778 --> 00:00:29.473
we should through the practice of
how you might wanna compilation.

9
00:00:29.473 --> 00:00:32.020
There's a hook there and
it gives us that instance.

10
00:00:32.020 --> 00:00:35.710
And it gives us some other
stuff that's not as valuable or

11
00:00:35.710 --> 00:00:39.399
needed to know right now, compilation.

12
00:00:39.399 --> 00:00:43.430
And so just as we've done
before we'll tap into it.

13
00:00:43.430 --> 00:00:45.387
Was that a sink hook or an esink hook?

14
00:00:45.387 --> 00:00:46.510
Let's see.

15
00:00:46.510 --> 00:00:50.820
It's a sink hook so I don't need
a call back, and I just call tap.

16
00:00:50.820 --> 00:00:54.590
So MyfirstwebpackPlugin, cool.

17
00:00:55.640 --> 00:00:58.820
And then we'll get the compilation,
and then there was an argument called

18
00:00:58.820 --> 00:01:02.340
perams and I'm just gonna keep
it there for safekeeping.

19
00:01:03.500 --> 00:01:08.470
And so, well now, we have the compilation,
right, at our fingertips.

20
00:01:08.470 --> 00:01:12.432
So we can now access it's hooks.

21
00:01:12.432 --> 00:01:16.755
So I think, a valuable hook to know,

22
00:01:16.755 --> 00:01:21.776
that I think that people
have wanted to know

23
00:01:21.776 --> 00:01:27.074
about in the past is how
do I access the graph,

24
00:01:27.074 --> 00:01:30.560
or how do I hook into web pack,

25
00:01:30.560 --> 00:01:36.010
just before it starts to render the code?

26
00:01:36.010 --> 00:01:39.850
So that's a phase we call a seal phase,
so we have a hook for that.

27
00:01:39.850 --> 00:01:42.190
Now, we're not going to
get any state back, but

28
00:01:42.190 --> 00:01:45.020
we already have access to
the compilation in our plugin.

29
00:01:46.040 --> 00:01:49.497
So this is just a way for
us to stop synchronously at this event and

30
00:01:49.497 --> 00:01:53.410
then perform some functionality,
and then allow webpack to continue.

31
00:01:56.651 --> 00:02:04.853
&gt;&gt; Sean Larkin: Beautiful, so
.hooks.seal.tap ("MyFirstWebpackPlugin".

32
00:02:07.745 --> 00:02:10.702
&gt;&gt; Sean Larkin: Then you
get nothing in return.

33
00:02:10.702 --> 00:02:12.760
All right,
let's set a debugger here, right?

34
00:02:12.760 --> 00:02:13.410
This is cool.

35
00:02:14.540 --> 00:02:17.258
And let's see what happens when we
run our debug script, yarn debug.

36
00:02:20.282 --> 00:02:22.310
&gt;&gt; Sean Larkin: And I'll cheat and
just doing the VS code.

37
00:02:24.420 --> 00:02:25.980
We can do it on Chrome too.

38
00:02:25.980 --> 00:02:29.630
If anybody wants to see
me do it in Chrome,

39
00:02:29.630 --> 00:02:32.220
I can do the same thing,
the steps are the same.

40
00:02:32.220 --> 00:02:32.850
So cool.

41
00:02:34.260 --> 00:02:39.510
You can see here that really building up
the graph was like, whoa that was fast.

42
00:02:39.510 --> 00:02:41.642
We just built the entire
graph with that web app.

43
00:02:45.075 --> 00:02:49.410
&gt;&gt; Sean Larkin: Now let's see,
what can we access in this scope?

44
00:02:51.300 --> 00:02:52.230
This.

45
00:02:52.230 --> 00:02:52.870
Now obviously,

46
00:02:52.870 --> 00:02:56.470
you kinda have to have like a reference
to it because we're using aero functions.

47
00:02:56.470 --> 00:02:58.400
So maybe what I'll do is unplug it.

48
00:02:58.400 --> 00:03:05.339
I'll say comst
thisCompilationIWantToInspect

49
00:03:05.339 --> 00:03:07.820
= compilation.

50
00:03:07.820 --> 00:03:10.028
And I'll do it inside of here.

51
00:03:10.028 --> 00:03:13.851
Cool, let's try it again.

52
00:03:13.851 --> 00:03:14.993
We're in debug.

53
00:03:14.993 --> 00:03:16.171
I'll attach.

54
00:03:16.171 --> 00:03:17.209
Fun, fun.

55
00:03:17.209 --> 00:03:20.260
Okay, step through
the initial break point.

56
00:03:22.120 --> 00:03:24.980
Here we go so
now I think I have this compilation.

57
00:03:27.730 --> 00:03:29.640
Where is that?

58
00:03:29.640 --> 00:03:31.220
I think I need to actually type it out.

59
00:03:34.400 --> 00:03:35.180
Wait, where is that?

60
00:03:36.360 --> 00:03:37.698
Debug console there it is.

61
00:03:40.565 --> 00:03:41.570
&gt;&gt; Sean Larkin: That's right.

62
00:03:41.570 --> 00:03:44.470
So this is a little gotcha
that's good to know.

63
00:03:44.470 --> 00:03:48.630
So like if you don't actually use it
with it stops in debug mode, I think

64
00:03:48.630 --> 00:03:52.610
the inspector protocol doesn't actually
provided into the scope that you can read.

65
00:03:52.610 --> 00:03:57.678
So I can do something like
console.log()this.compilation or

66
00:03:57.678 --> 00:04:00.850
like ThisCompilationIWantToInspect.

67
00:04:00.850 --> 00:04:08.150
I had to put it down here, that's right,
it does some fancy scoping stuff.

68
00:04:08.150 --> 00:04:10.590
So I'll try and attach,
let's start it again.

69
00:04:15.510 --> 00:04:18.740
There we go, so
now I should have access to it.

70
00:04:18.740 --> 00:04:19.790
Yes, from the closure.

71
00:04:19.790 --> 00:04:20.634
But isn't that weird?

72
00:04:20.634 --> 00:04:21.510
I always find that weird.

73
00:04:22.630 --> 00:04:26.370
But so cool, I can even see
the modules that were consumed.

74
00:04:28.180 --> 00:04:31.520
Technically you could take and
you could call other methods,

75
00:04:31.520 --> 00:04:35.650
and you could make
modifications to the code.

76
00:04:35.650 --> 00:04:38.227
You could access information.

77
00:04:38.227 --> 00:04:42.464
Like, the information is
a wealth of knowledge.

78
00:04:42.464 --> 00:04:44.650
And so, I always feel bad when I say,

79
00:04:44.650 --> 00:04:49.000
like you're not gonna know when you're
wanting one until you actually need one.

80
00:04:49.000 --> 00:04:53.510
I had a really cool idea the other day and
it was like, this would be great for

81
00:04:53.510 --> 00:04:56.560
a plugin and
now I can't even think about it.

82
00:04:58.370 --> 00:05:01.230
But there's all sorts of
stuff that is in here.

83
00:05:01.230 --> 00:05:07.520
A very common example is that,
let's say if you wanted to,

84
00:05:07.520 --> 00:05:12.240
in a certain environment,
whenever somebody

85
00:05:12.240 --> 00:05:16.920
references a specific path in
the resolver, you could hook into it and

86
00:05:16.920 --> 00:05:21.410
say let's switch this path to something
else and give me that module instead.

87
00:05:21.410 --> 00:05:26.820
So you could essentially fake an entire
resolution instance happening and

88
00:05:28.190 --> 00:05:32.380
that happens during
the NormalModuleFactory.beforeResolve.

89
00:05:32.380 --> 00:05:38.820
So beforeResolve,
you basically pass the request.

90
00:05:38.820 --> 00:05:42.220
And then what happens is that
gets sent to the resolver.

91
00:05:42.220 --> 00:05:47.670
So you can hook into this,
alter this property, and send it back.

92
00:05:47.670 --> 00:05:50.370
And so now, the resolver is going
to go find some other file and

93
00:05:50.370 --> 00:05:52.700
give back what you requested.

94
00:05:55.120 --> 00:05:57.280
Even the moment JS trick,

95
00:05:57.280 --> 00:06:01.090
the ContextReplacementPlugin,
that's exactly what it's doing.

96
00:06:01.090 --> 00:06:04.365
I'll just search

97
00:06:04.365 --> 00:06:11.795
ContextReplacementPlugin momentjs.

98
00:06:11.795 --> 00:06:15.610
So how to optimize momentjs with webpack?

99
00:06:17.470 --> 00:06:19.660
So essentially this
ContextReplacementPlugin.

100
00:06:20.800 --> 00:06:25.460
The reason why is because there's
a dynamic AMD module that

101
00:06:25.460 --> 00:06:30.170
forces everything to be bundled up because
it can be resolvable from a partial path.

102
00:06:30.170 --> 00:06:35.610
And so what you're passing here is a redex
that just says whenever you come across

103
00:06:35.610 --> 00:06:41.055
any of these paths in a before resolve
hook it just says, return no op functions.

104
00:06:41.055 --> 00:06:45.385
And then it returns nothing so it proves
out all the locals you don't actually

105
00:06:45.385 --> 00:06:48.990
need, except for the ones you
actually want to filter through.

106
00:06:48.990 --> 00:06:51.963
Even if we looked at
the ContextReplacementPlugin,

107
00:06:51.963 --> 00:06:53.224
like the source code.

108
00:06:56.818 --> 00:06:59.420
&gt;&gt; Sean Larkin: New ContextExclusionPlug,
I haven't seen that one lately.

109
00:07:01.200 --> 00:07:07.730
If we look at the source code here for
this plug-in,

110
00:07:07.730 --> 00:07:10.030
we can even step through it and
understand what's happening.

111
00:07:11.890 --> 00:07:15.180
So we're going to have a resource.

112
00:07:15.180 --> 00:07:18.280
So resource just means the path
that was originally requested.

113
00:07:18.280 --> 00:07:20.450
Now it's going to have a regex.

114
00:07:20.450 --> 00:07:22.667
And so like if you wanted to
take options into your plugin,

115
00:07:22.667 --> 00:07:24.305
you just pass it through the constructor.

116
00:07:27.642 --> 00:07:31.632
&gt;&gt; Sean Larkin: So what's happening here
is it's going to hook into the compiler,

117
00:07:31.632 --> 00:07:35.580
into the module factory and
to the before resolve hook.

118
00:07:35.580 --> 00:07:40.800
And it's basically going to say, well
apply this RegExp against whatever request

119
00:07:40.800 --> 00:07:45.990
that was, whatever it is, so
moment.js, which is the path.

120
00:07:45.990 --> 00:07:47.680
Well, what it's doing now,

121
00:07:47.680 --> 00:07:50.430
is it's going to filter it out
with that regular expression.

122
00:07:50.430 --> 00:07:55.740
And then we pass back this new map, which
is gonna be only the locals that we want.

123
00:07:56.800 --> 00:08:01.790
And so, that's essentially like if you
wanted say like how to I write a resolver

124
00:08:01.790 --> 00:08:07.240
plugin, or
how do I alter a request with a plugin?

125
00:08:07.240 --> 00:08:11.110
This one and
the normal replacement plug-in

126
00:08:11.110 --> 00:08:15.580
are the two best that you could use, and
we have those out of the box with webpack.

127
00:08:15.580 --> 00:08:19.552
So there's this one, and
then there is, I think it's just

128
00:08:19.552 --> 00:08:24.648
under,
&gt;&gt; Sean Larkin: Let me search for

129
00:08:24.648 --> 00:08:27.755
it, NormalModuleReplacementPlugin.

130
00:08:29.680 --> 00:08:34.655
So this is the same concept where you have
a regular expression against the resource

131
00:08:34.655 --> 00:08:38.260
and then you apply [LAUGH]
basically a new resource to it.

132
00:08:38.260 --> 00:08:44.700
So it takes the request and then we tap
into afterResolve and pass it a new value.

133
00:08:44.700 --> 00:08:49.210
So that's kinda like the short of it,
I would say.

134
00:08:49.210 --> 00:08:53.110
And there's just literally a myriad
of different ways that you can

135
00:08:54.550 --> 00:08:55.870
use the plugin hooks.

136
00:08:55.870 --> 00:08:59.560
And we even have our documentation
gives some description on like

137
00:08:59.560 --> 00:09:02.220
when you wanna access these things,
you can plugin to these hooks.

138
00:09:02.220 --> 00:09:05.329
And so I think it's API plugins.

139
00:09:06.510 --> 00:09:10.060
Yeah, and
we kinda describe what's Tapable, and

140
00:09:10.060 --> 00:09:11.650
what kinds of plugin types do we have?

141
00:09:11.650 --> 00:09:16.060
Like is it an async plugin,
or a sync plugin?

142
00:09:16.060 --> 00:09:19.750
And you can even,
how to create custom hooks.

143
00:09:19.750 --> 00:09:24.280
And you can even go and see the compiler
hooks on different instances, right?

144
00:09:24.280 --> 00:09:26.390
So the watching compiler.

145
00:09:26.390 --> 00:09:31.800
And it kind of talks about, hook into
the compiler before it reads records, or

146
00:09:31.800 --> 00:09:39.530
before it creates a module, or
before it's going to emit some files.

147
00:09:39.530 --> 00:09:43.961
Like, you could totally just wipe
files if you wanted to from the build.

148
00:09:43.961 --> 00:09:45.970
I've seen reasons to do that.

149
00:09:45.970 --> 00:09:48.920
And so we're adding more hooks as we go.

150
00:09:48.920 --> 00:09:53.926
There's also the compilation hooks like
trigger before module build occurs or

151
00:09:53.926 --> 00:09:59.850
like when you rebuild you can hook into
this to see what module was being rebuilt.

152
00:09:59.850 --> 00:10:02.746
Or things like if something failed and

153
00:10:02.746 --> 00:10:07.281
you want to handle that failure
gracefully you could do so.

154
00:10:07.281 --> 00:10:10.290
Also really cool ones.

155
00:10:10.290 --> 00:10:13.600
The ironic thing is that we write
these plugins already out-of-the-box,

156
00:10:13.600 --> 00:10:15.580
that do as much optimizations as possible.

157
00:10:15.580 --> 00:10:19.330
But there are some times where people
are like, I wanna mess with this.

158
00:10:19.330 --> 00:10:21.740
And so,
the optimize hooks are really cool.

159
00:10:24.096 --> 00:10:28.152
&gt;&gt; Sean Larkin: And
there's also ones like creation of chunks

160
00:10:28.152 --> 00:10:33.050
before the assets are generated,
additional assets.

161
00:10:34.200 --> 00:10:35.770
Here's a great one.

162
00:10:35.770 --> 00:10:37.435
I love it when they show use cases.

163
00:10:37.435 --> 00:10:40.148
So here I'll make this really large.

164
00:10:43.512 --> 00:10:46.688
&gt;&gt; Sean Larkin: So if you wanted to go and
download an image that you needed for

165
00:10:46.688 --> 00:10:49.040
your build and serve it up.

166
00:10:49.040 --> 00:10:53.569
And let's say you could even compress
it if you wanted to, like from a CDN.

167
00:10:53.569 --> 00:10:58.400
You could literally write a hook to do
this and store it in compilation.assets.

168
00:10:58.400 --> 00:11:00.930
The cool thing about
this is it's different

169
00:11:00.930 --> 00:11:05.240
from event emitter because you get state
and you can alter the state, right.

170
00:11:05.240 --> 00:11:12.243
Now some would say yeah, but what if you
don't know what's altering the state.

171
00:11:12.243 --> 00:11:16.650
For the most part, we have enough
hooks and we set our writable and

172
00:11:16.650 --> 00:11:20.579
readable properties,
the right way to ensure you're not

173
00:11:20.579 --> 00:11:24.406
messing with something that would break or
whatever.

174
00:11:24.406 --> 00:11:29.450
But yeah, compilation.assets is
a great example where you could

175
00:11:29.450 --> 00:11:34.330
essentially tap into it,
pull down something from whatever,.

176
00:11:34.330 --> 00:11:38.160
And then you could go ahead and store
it so that it outputs in your build and

177
00:11:38.160 --> 00:11:41.840
instantly is added depending
on what kind of asset it is.

178
00:11:41.840 --> 00:11:44.236
Like a CSS file, that's a really cool one.

179
00:11:44.236 --> 00:11:49.488
If you had just like a big CSS
file that was hosted somewhere but

180
00:11:49.488 --> 00:11:53.831
you wanted to be injected
properly into your HTML,

181
00:11:53.831 --> 00:11:58.180
with HTML webpack plugin,
perfect opportunity.

182
00:11:59.810 --> 00:12:00.770
This is great.

183
00:12:00.770 --> 00:12:04.300
I didn't even know that
people are adding this stuff.

184
00:12:04.300 --> 00:12:09.140
Like if you have a good example and
you wanna, please, please add one.

185
00:12:09.140 --> 00:12:13.980
afterOptimizeChunkAssets, so
boopathi is one of the maintainers

186
00:12:13.980 --> 00:12:18.030
of the billy or the babel-minify-plugin?

187
00:12:18.030 --> 00:12:22.390
And so he's written a bunch of webpack
plugins and so this is a good example of

188
00:12:22.390 --> 00:12:27.570
how you can control or
see exactly what goes into every chunk.

189
00:12:28.690 --> 00:12:32.310
And so he kind of writes this little code
example which let's you console log it and

190
00:12:32.310 --> 00:12:32.870
identify.

191
00:12:35.210 --> 00:12:38.400
Technically, we could even I think
that would yeah that's still webpack

192
00:12:38.400 --> 00:12:39.760
four valid.

193
00:12:39.760 --> 00:12:41.636
And so there's all sorts of hooks.

194
00:12:41.636 --> 00:12:46.190
Now, we're slowly adding more
documentation as we go to, show you,

195
00:12:46.190 --> 00:12:48.130
what are all these things?

196
00:12:48.130 --> 00:12:52.940
And you might wonder, well,
our loaders added via plugin?

197
00:12:52.940 --> 00:12:56.150
And yes, my friend, they are.

198
00:12:56.150 --> 00:12:59.728
The LoaderOptionsPlugin,

199
00:12:59.728 --> 00:13:04.199
how loaders are actually applied,

200
00:13:04.199 --> 00:13:10.168
literally happens through
the loader plug in.

201
00:13:12.656 --> 00:13:15.770
&gt;&gt; Sean Larkin: You can look at
how this even is tapped into.

202
00:13:15.770 --> 00:13:19.070
We tap into the compilation
to get to it and

203
00:13:19.070 --> 00:13:22.680
then we listen to the normal
module loader hook.

204
00:13:22.680 --> 00:13:27.540
And then as this is happening
we apply any of the loaders.

205
00:13:27.540 --> 00:13:30.380
We add dependencies for
them and they're traversed.

206
00:13:30.380 --> 00:13:34.350
So to me this is fascinating.

207
00:13:34.350 --> 00:13:37.848
And I know most of you guys are like,
Sean, I just wanna build web apps man.

208
00:13:37.848 --> 00:13:40.160
Like, all right.

209
00:13:40.160 --> 00:13:42.902
But this is beginnings of master.

210
00:13:42.902 --> 00:13:47.720
If you really want to take ownership and
like the sky's the limit, really.

