WEBVTT

1
00:00:00.460 --> 00:00:05.840
&gt;&gt; Sean Larkin: What I'm gonna talk to you
about is the seven-ish tapable instances.

2
00:00:05.840 --> 00:00:10.150
And really, they're the most important
pieces of webpack internally,

3
00:00:11.190 --> 00:00:13.470
the most important pieces.

4
00:00:13.470 --> 00:00:15.610
So the first one is called the compiler.

5
00:00:15.610 --> 00:00:19.720
It is the top level,
it's central dispatch.

6
00:00:19.720 --> 00:00:23.130
If we even went back to these hooks here,
and

7
00:00:23.130 --> 00:00:28.630
we looked at compiler,
you can see the hooks are very top level.

8
00:00:28.630 --> 00:00:31.936
They are controlling Win webpack's starts,

9
00:00:31.936 --> 00:00:36.851
Win webpack's finished bundling,
Win it's about to emit assets,

10
00:00:36.851 --> 00:00:41.440
WIn before it compiles,
even when it's in Watch Mode, right?

11
00:00:41.440 --> 00:00:44.800
So it's the central dispatch,
as I like to say.

12
00:00:44.800 --> 00:00:48.500
And really to be able to access this or

13
00:00:49.640 --> 00:00:52.470
to access any other instance,
you have to go through the compiler.

14
00:00:52.470 --> 00:00:55.930
So also, what's really cool is
that when you use the Node API,

15
00:00:57.630 --> 00:01:02.880
when you say, like an example
of using the webpack Node API,

16
00:01:02.880 --> 00:01:06.260
you're actually dealing with
the literal compiler instance.

17
00:01:07.370 --> 00:01:11.690
You get an instance of that that
you basically call compiler.run.

18
00:01:11.690 --> 00:01:16.570
And then the second one is
called the Compilation.

19
00:01:17.710 --> 00:01:21.850
So the Compilation is really,
it is the most

20
00:01:24.320 --> 00:01:29.440
I'll say most complex,
most involved piece of webpack,

21
00:01:29.440 --> 00:01:34.800
it is the meat and potatoes,
it's the heart of everything that happens.

22
00:01:34.800 --> 00:01:37.510
It is where webpack kicks
off building the graph.

23
00:01:37.510 --> 00:01:43.225
It is where webpack then kicks off
sealing it and then rendering it,

24
00:01:43.225 --> 00:01:48.450
and into bundles that you see today,
and I call it the brain.

25
00:01:48.450 --> 00:01:50.430
It's where everything happens.

26
00:01:50.430 --> 00:01:53.570
It contains the dependency
graph traversal algorithm.

27
00:01:53.570 --> 00:01:55.100
It's created by the compiler.

28
00:01:56.710 --> 00:02:01.670
And I mean honestly I
don't even feel like,

29
00:02:01.670 --> 00:02:03.210
I kind of like just pulling these up.

30
00:02:03.210 --> 00:02:06.140
Do you find that value
to even look at them?

31
00:02:06.140 --> 00:02:09.860
I think it's kind of valuable.

32
00:02:09.860 --> 00:02:11.775
So if we look at compilation.js,

33
00:02:11.775 --> 00:02:16.070
like these are just literally
like whatever I talked about.

34
00:02:16.070 --> 00:02:18.250
It's that .js in our source code, right?

35
00:02:18.250 --> 00:02:22.170
So, if we look,
you can see the amount of hooks.

36
00:02:22.170 --> 00:02:25.590
Holy Moly, these are all
the events that you can tap into.

37
00:02:25.590 --> 00:02:27.984
So, everything is tiny,
as when webpack for

38
00:02:27.984 --> 00:02:30.860
the first time creates
a new instance of module.

39
00:02:30.860 --> 00:02:33.220
You can hook into that,
and you get that module.

40
00:02:33.220 --> 00:02:35.796
You could literally modify behavior of it.

41
00:02:35.796 --> 00:02:39.440
Or when webpack is about
to start rendering and

42
00:02:39.440 --> 00:02:42.200
creating chunks and
then putting modules into chunks and

43
00:02:42.200 --> 00:02:45.290
then flattening them and
rendering into bundles.

44
00:02:45.290 --> 00:02:46.700
That's what the seal hook is.

45
00:02:48.210 --> 00:02:52.470
Or when split chunks is doing its thing,
these are the hooks.

46
00:02:52.470 --> 00:02:55.540
We rely on these hooks,
too, ourselves, right?

47
00:02:55.540 --> 00:02:59.440
Because all of our code is plugins.

48
00:02:59.440 --> 00:03:03.500
So what's nice is you get to
see statically upfront like

49
00:03:03.500 --> 00:03:06.500
what am I gonna get back
when I call into this hook?

50
00:03:06.500 --> 00:03:10.351
And so you can see here
literally it's everything.

51
00:03:10.351 --> 00:03:12.486
It's where we optimize
every piece of code,

52
00:03:12.486 --> 00:03:14.855
it's where we topologically
sort every module.

53
00:03:14.855 --> 00:03:17.011
It's where scope hoisting happens.

54
00:03:17.011 --> 00:03:21.471
It's where we do tree shaking and
all the heuristics for it.

55
00:03:21.471 --> 00:03:22.631
So that's the compilation.

