WEBVTT

1
00:00:00.090 --> 00:00:02.801
&gt;&gt; Sean Larkin: The first
place that we wanna start, and

2
00:00:02.801 --> 00:00:07.902
remember when I describe the anatomy,
is that a plugin is just an instance or

3
00:00:07.902 --> 00:00:10.552
it's a class that has an apply method.

4
00:00:10.552 --> 00:00:17.474
So let's create one and build utils and
we'll just call it, MyFirstPlugin.

5
00:00:17.474 --> 00:00:20.964
Now if you're publishing
this as a node module.

6
00:00:20.964 --> 00:00:25.860
We have a naming pattern that's always
whatever name web pack plug in, right.

7
00:00:25.860 --> 00:00:28.562
Because there's thousands of different
plug ins for different systems.

8
00:00:28.562 --> 00:00:33.795
But so like let's just call
it MyFirstWebPackPlugin.js.

9
00:00:33.795 --> 00:00:38.421
All right, so first and
foremost is the common JS module.

10
00:00:38.421 --> 00:00:42.174
And so, module.exports equals,
I'll just leave that there.

11
00:00:42.174 --> 00:00:45.920
We can actually just say
MyFirstWebpackPlugin.

12
00:00:45.920 --> 00:00:50.447
And you IDU will throw errors, like,
I don't know what this is, maybe.

13
00:00:50.447 --> 00:00:56.305
And then we can create this class, right.

14
00:00:56.305 --> 00:00:57.021
So what are the rules?

15
00:00:57.021 --> 00:01:00.817
Just has to have an apply method
on the prototype chain, or

16
00:01:00.817 --> 00:01:05.769
in this case on the class
&gt;&gt; Sean Larkin: Now what we get passed

17
00:01:05.769 --> 00:01:09.585
to it is the actual compiler itself,
right.

18
00:01:09.585 --> 00:01:15.445
So we can provide compiler there and

19
00:01:15.445 --> 00:01:21.314
let's see will be the most, okay.

20
00:01:21.314 --> 00:01:25.235
So now we could technically add this
plugin to our configuration and

21
00:01:25.235 --> 00:01:26.005
just run it.

22
00:01:26.005 --> 00:01:29.276
It should just work,
nothing's gonna happen, but it should run.

23
00:01:29.276 --> 00:01:30.663
So why don't we do so?

24
00:01:30.663 --> 00:01:34.110
And so let's go ahead and
jump into our config.

25
00:01:34.110 --> 00:01:37.968
And now we just need to require this file,
right.

26
00:01:37.968 --> 00:01:41.126
Because we're gonna pass it into
the plugins array in our configuration.

27
00:01:41.126 --> 00:01:45.595
So let's see, I would probably say cons

28
00:01:45.595 --> 00:01:52.568
MyfFirstWebpackPlugin equals require,
and then relative.

29
00:01:52.568 --> 00:01:57.909
So I think we have to go into build utils,
right.

30
00:01:57.909 --> 00:02:00.031
Utils MyFirstWebpackPlugin cool.

31
00:02:02.855 --> 00:02:06.757
&gt;&gt; Sean Larkin: Now we'll actually
go ahead and pass that in.

32
00:02:06.757 --> 00:02:11.094
And remember it's a new instance so
my let's just do this so

33
00:02:11.094 --> 00:02:14.151
it's easier, MyFirstWebpackPlugin.

34
00:02:17.171 --> 00:02:19.605
&gt;&gt; Sean Larkin: Okay, so
let's just run our code.

35
00:02:19.605 --> 00:02:22.864
It doesn't even matter what environment,
I'll just say dev, like yarn dev.

36
00:02:27.856 --> 00:02:28.424
&gt;&gt; Sean Larkin: It looks
like it's gonna work.

37
00:02:28.424 --> 00:02:30.296
Feeling good about it, boom.

38
00:02:30.296 --> 00:02:32.622
Now of course, we didn't do anything.

39
00:02:32.622 --> 00:02:34.960
We don't have any functionality,
but this is the first step, right.

40
00:02:34.960 --> 00:02:38.068
This is the first step
in creating your plugin.

41
00:02:38.068 --> 00:02:40.358
So what do we wanna do?

42
00:02:40.358 --> 00:02:45.535
So there are some hooks that are only
specific to the compilation,

43
00:02:45.535 --> 00:02:50.075
some that are only specific to
the compiler or watch mode.

44
00:02:50.075 --> 00:02:53.696
It's like if we are in you own dev
we wold need to hook in to run base,

45
00:02:53.696 --> 00:02:55.012
like watch base hooks.

46
00:02:55.012 --> 00:02:58.408
So I think what I wanna do
is maybe do something like,

47
00:02:58.408 --> 00:03:03.059
when Webpack is done building the files,
we just console log, right.

48
00:03:03.059 --> 00:03:07.722
So we would say complier.hooks.

49
00:03:07.722 --> 00:03:11.485
Now, we can't see the hooks right now,
like, in our intellisense.

50
00:03:11.485 --> 00:03:16.248
But hopefully by the time we are done
adding our JS dock invitations into our

51
00:03:16.248 --> 00:03:18.902
source code, you can actually see that.

52
00:03:18.902 --> 00:03:24.058
But since we know how to look in
the source code and it's not scary

53
00:03:24.058 --> 00:03:29.706
we can just jump into webpack/compiler or
webpack source compiler.

54
00:03:29.706 --> 00:03:34.419
So let's go find it in our nerd modules,
or like,

55
00:03:34.419 --> 00:03:39.718
I already have the source code here,
so compiler.js.

56
00:03:39.718 --> 00:03:46.577
All right, so what hooks do we have,
find this.hooks, oops, there we go.

57
00:03:46.577 --> 00:03:50.341
Okay, so there's one called done,
that gives us the stats.

58
00:03:50.341 --> 00:03:55.372
After omit, we could do it as
it's emitting files to disk.

59
00:03:55.372 --> 00:03:58.651
Let's just use done,
at's an async hook, and we know that,

60
00:03:58.651 --> 00:04:00.937
because it's called AsyncSeriousHook.

61
00:04:00.937 --> 00:04:03.806
And so
the last argument is gonna be a callback,

62
00:04:03.806 --> 00:04:06.191
in addition to the data it passes here.

63
00:04:06.191 --> 00:04:09.277
So, let's go ahead and start with that.

64
00:04:09.277 --> 00:04:13.520
So, we'll say hooks.done and

65
00:04:13.520 --> 00:04:17.142
then we'll say capasync.

66
00:04:17.142 --> 00:04:21.221
So, that's the API for tapping in.

67
00:04:21.221 --> 00:04:22.309
And so the first argument,

68
00:04:22.309 --> 00:04:25.162
like I kinda told you in the slides
is gonna be the name of your plug-in.

69
00:04:25.162 --> 00:04:29.642
So MyFirstWebpackPlugin, there we go.

70
00:04:29.642 --> 00:04:33.341
And then second one, we saw that we
were gonna stats out of it, right.

71
00:04:33.341 --> 00:04:37.031
So stats, and
then a callback because it's async.

72
00:04:40.141 --> 00:04:43.276
&gt;&gt; Sean Larkin: So what I like to do so I
don't forget, because web pack just stops

73
00:04:43.276 --> 00:04:46.934
working if you don't ever call back is
I just put the call back at the bottom.

74
00:04:46.934 --> 00:04:51.963
So now we can technically,
why don't we console log the stats?

75
00:04:51.963 --> 00:04:54.626
It might be kinda huge, but
let's just do it anyways.

76
00:04:54.626 --> 00:04:59.981
So now let's go ahead and
just run, so we could run yarn.

77
00:04:59.981 --> 00:05:03.684
So I guess if it's done,
watch mode won't work.

78
00:05:03.684 --> 00:05:05.356
So why don't we do, yarn prod?

79
00:05:05.356 --> 00:05:09.917
Cuz it's never done until you
cancel the process, right.

80
00:05:13.472 --> 00:05:16.433
&gt;&gt; Sean Larkin: I have a feeling we're
gonna see a lot of things output to

81
00:05:16.433 --> 00:05:17.680
the console [LAUGH].

82
00:05:17.680 --> 00:05:18.520
My, okay.

83
00:05:21.274 --> 00:05:27.304
&gt;&gt; Sean Larkin: So we can actually see,
look, it's all of our data here.

84
00:05:27.304 --> 00:05:33.169
Now do you know what would be even more
valuable than just console logging?

85
00:05:33.169 --> 00:05:36.586
I did teach you something at
the end of day one, remember that?

86
00:05:36.586 --> 00:05:37.599
&gt;&gt; Speaker 2: Debuggers within.

87
00:05:37.599 --> 00:05:41.276
&gt;&gt; Sean Larkin: That's right,
let's do a debugger here.

88
00:05:41.276 --> 00:05:44.676
And we have a command, don't we?

89
00:05:44.676 --> 00:05:49.143
Yarn debug prod, oops,

90
00:05:49.143 --> 00:05:54.162
I think it's just debug, cool.

91
00:05:54.162 --> 00:05:55.683
Now, I can open up Chrome.

92
00:05:55.683 --> 00:06:00.485
Now if you, go ahead and open up Chrome,

93
00:06:00.485 --> 00:06:04.301
I'm gonna cheat a little bit and

94
00:06:04.301 --> 00:06:08.692
I'm gonna attach to VS code, okay.

95
00:06:08.692 --> 00:06:14.717
So you can step through
until you get to that hook.

96
00:06:14.717 --> 00:06:16.226
Now it was a little slow, right?

97
00:06:16.226 --> 00:06:18.281
So if we're looking in the terminal,
well there we go,

98
00:06:18.281 --> 00:06:19.520
it just console logged, right.

99
00:06:19.520 --> 00:06:21.821
So now we're stopped
right at the debugger.

100
00:06:21.821 --> 00:06:26.820
And this will look the same for
you even if you were in Chrome and

101
00:06:26.820 --> 00:06:29.521
you went to the dedicated tools.

102
00:06:29.521 --> 00:06:34.479
So now what's really neat is like, cool,
I can actually explore what's in stats and

103
00:06:34.479 --> 00:06:35.291
everything.

104
00:06:35.291 --> 00:06:38.542
So I can see like, what is stats,
stats it's a class,

105
00:06:38.542 --> 00:06:41.106
it has the Webpack compilation instance.

106
00:06:41.106 --> 00:06:42.860
It tells us the start time,

107
00:06:42.860 --> 00:06:47.299
the hash of the entire build cuz
my packs completely deterministic.

108
00:06:47.299 --> 00:06:52.529
So you get a unique hash for whenever you
build for a scenario of all the stuff.

109
00:06:52.529 --> 00:06:56.514
Like what else do we have in here,
we got all the chunks.

110
00:06:56.514 --> 00:07:02.235
The chunks is just a file abstraction
right that we put modules in and optimize.

111
00:07:02.235 --> 00:07:06.024
We have any of the entry points used.

112
00:07:06.024 --> 00:07:12.788
Stats basically contains everything,
all the information about your build.

113
00:07:12.788 --> 00:07:15.962
Now it is serializable,
like we have a stats.2json.

114
00:07:15.962 --> 00:07:20.326
So if I called in our debug console or
stats.to,

115
00:07:20.326 --> 00:07:24.164
yeah, there's even three methods on it.

116
00:07:24.164 --> 00:07:25.325
So I can call it tostring.

117
00:07:28.737 --> 00:07:30.423
&gt;&gt; Sean Larkin: And look what it outputs.

118
00:07:30.423 --> 00:07:32.487
It's the terminal output,
that is the output.

119
00:07:32.487 --> 00:07:36.697
That's what we do when we run Webpack,
we just call status a string.

120
00:07:36.697 --> 00:07:41.568
Now, what's cool is that I think you can
even pass, like you could say, verbose,

121
00:07:41.568 --> 00:07:43.532
let me see does that actually do?

122
00:07:43.532 --> 00:07:44.886
&gt;&gt; Speaker 2: Yes, that makes it verbose.

123
00:07:44.886 --> 00:07:51.062
&gt;&gt; Sean Larkin: Thank you,
verbose, syntax here are great.

124
00:07:51.062 --> 00:07:52.949
Yeah, it's thinking about it, here we go.

125
00:07:52.949 --> 00:07:56.503
It's going to like destroy the buffer.

126
00:07:56.503 --> 00:08:03.621
So this is how we control like what kind
of What kind of stuff we output, right.

127
00:08:03.621 --> 00:08:07.998
So if you do and this, I'm just doing
this internally in the console, right.

128
00:08:07.998 --> 00:08:11.355
So stats, that two string verbose,

129
00:08:11.355 --> 00:08:16.022
like this actually shows
you a lot of information.

130
00:08:16.022 --> 00:08:20.389
It shows what kinda bailouts happen?

131
00:08:20.389 --> 00:08:22.377
Why did tree shaking maybe not occur?

132
00:08:22.377 --> 00:08:24.481
What kinda module types they are?

133
00:08:24.481 --> 00:08:27.818
What kind of import specifiers and
syntax's?

134
00:08:27.818 --> 00:08:33.098
You can learn everything
about your build with this.

135
00:08:33.098 --> 00:08:37.002
And this actually corresponds to
our CLI flag dash dash ribose,

136
00:08:37.002 --> 00:08:39.836
that's how we know and
that's how we call it.

137
00:08:39.836 --> 00:08:42.680
That's what the CLI is
doing behind the scenes.

138
00:08:42.680 --> 00:08:47.467
So I think maybe, what would be cool,
what would be nice to actually know about?

139
00:08:47.467 --> 00:08:50.976
So I think what would be cool,
I think somebody was telling me,

140
00:08:50.976 --> 00:08:55.500
what if we don't create an HDMI file,
what if we're writing a custom plug-in?

141
00:08:55.500 --> 00:09:01.149
What if we need to have something
to inject into a blain template or

142
00:09:01.149 --> 00:09:03.524
a razor template, right.

143
00:09:03.524 --> 00:09:06.961
Or what's a kind of a templating language
that you use for server site development?

144
00:09:06.961 --> 00:09:12.899
You guys can just call one out,
what's a good example?

145
00:09:12.899 --> 00:09:16.822
XAMEL, rails use ERB I think,
but anyways, for us to do that,

146
00:09:16.822 --> 00:09:20.820
just like HTML Webpack plug-in,
we would need to know, well,

147
00:09:20.820 --> 00:09:24.766
what are the admitted assets and
how are they grouped, right?

148
00:09:24.766 --> 00:09:29.008
So stats.compilation.entrypoints
can do this.

149
00:09:31.813 --> 00:09:35.970
&gt;&gt; Sean Larkin: So if evaluate this and
we look, we get a map file and

150
00:09:35.970 --> 00:09:37.923
we get all the entries.

151
00:09:37.923 --> 00:09:46.357
So we can say stats dot
compilation dot entry points dot,

152
00:09:46.357 --> 00:09:52.517
I think you can just
say like ray dot from?

153
00:09:52.517 --> 00:09:57.164
How's my jaw discript foo, cool.

154
00:09:57.164 --> 00:10:00.459
And you can leverage this information.

155
00:10:00.459 --> 00:10:07.554
So you know that one it's
your main entry point.

156
00:10:07.554 --> 00:10:12.671
And like there's all sorts of
information on the entry point itself.

157
00:10:12.671 --> 00:10:16.249
It tells you what chunks correspond to,

158
00:10:16.249 --> 00:10:20.361
it tells you what files,
and so there is that.

159
00:10:20.361 --> 00:10:24.287
You can also search like
stats.cmpilation.assets,

160
00:10:24.287 --> 00:10:27.050
I think this one is very commonly used.

161
00:10:27.050 --> 00:10:31.671
So maybe we'll write a little
quick plug-in that will

162
00:10:31.671 --> 00:10:35.902
just cancel log the names of those files,
right.

163
00:10:35.902 --> 00:10:39.933
Let's just do that, I think that's great,
that's a great first opportunity.

164
00:10:39.933 --> 00:10:44.688
So, I'll just step out of debug mode,
and we'll just jump to our file.

165
00:10:44.688 --> 00:10:48.494
And so we know that stats.compilation,
let's see,

166
00:10:48.494 --> 00:10:52.146
it's an object where the key
is the name of the file.

167
00:10:52.146 --> 00:10:56.672
And it looks like the value is
the actual source code, right.

168
00:10:56.672 --> 00:11:01.305
We just obstructed into a class or

169
00:11:01.305 --> 00:11:08.588
asset name in stats,
that compilation dot assets.

170
00:11:08.588 --> 00:11:13.025
I think four N is the right there,
not four of, is it four of?

171
00:11:13.025 --> 00:11:14.483
I always forget, we'll find out.

172
00:11:14.483 --> 00:11:20.625
And then lets just say const

173
00:11:20.625 --> 00:11:26.775
asset names, some array.

174
00:11:26.775 --> 00:11:32.372
Lets say assetnames.push, asset name And

175
00:11:32.372 --> 00:11:38.883
at the end we can just
literally say console.log.

176
00:11:44.476 --> 00:11:48.716
&gt;&gt; Sean Larkin: Beautiful,
heck, let's get fancy and

177
00:11:48.716 --> 00:11:53.713
join it with a line return and
see what happens.

178
00:11:53.713 --> 00:11:57.671
All right, so now technically we
don't need to break into our code.

179
00:11:57.671 --> 00:12:01.644
We could if we wanted to, to be sure,
but let's just run yarn prod again.

180
00:12:08.131 --> 00:12:09.150
&gt;&gt; Sean Larkin: Let's see what happens.

181
00:12:09.150 --> 00:12:11.675
I wrote bad JavaScript.

182
00:12:11.675 --> 00:12:17.218
Oops, apparently I don't know how

183
00:12:17.218 --> 00:12:22.586
to use a for, [LAUGH] forgot my let.

184
00:12:22.586 --> 00:12:23.364
All right, let's see.

185
00:12:23.364 --> 00:12:27.090
So, well hey, look at that, cool.

186
00:12:27.090 --> 00:12:29.548
So how is this, why do I care, Shaun?

187
00:12:29.548 --> 00:12:30.796
Why does this even matter?

188
00:12:30.796 --> 00:12:34.569
Well, so this might be useful
in case you need to generate.

189
00:12:34.569 --> 00:12:37.642
So something that's common for
us at Microsoft,

190
00:12:37.642 --> 00:12:40.359
is that we have this system called Appex,.

191
00:12:40.359 --> 00:12:45.520
And it's just a compressed file, but
it has a manifest.json of file names.

192
00:12:45.520 --> 00:12:49.474
And it lets us create, like,
a UWP application out of,

193
00:12:49.474 --> 00:12:51.927
just like Apedo UEA like a web app.

194
00:12:51.927 --> 00:12:57.025
And so, but it's like in XML, and
it's the worst format ever known to man.

195
00:12:57.025 --> 00:12:59.428
And so it's not a manifest JSON,
manifest XML.

196
00:12:59.428 --> 00:13:04.076
So this is valuable because the build
time we can generate the manifest

197
00:13:04.076 --> 00:13:08.110
needed with all the assets that
are gonna be in this zip file.

