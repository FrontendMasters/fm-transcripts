WEBVTT

1
00:00:00.100 --> 00:00:05.520
One other thing I wanted to talk about is
how we abstract things in our source code.

2
00:00:05.520 --> 00:00:06.870
So there's more than just like,

3
00:00:06.870 --> 00:00:11.220
through plugins is how you're gonna
modify anything in Webpack, right?

4
00:00:12.220 --> 00:00:18.610
So there are some other things that we do
abstract that are maybe important to know.

5
00:00:18.610 --> 00:00:22.753
So for example,
you must wonder, well, Sean,

6
00:00:22.753 --> 00:00:26.530
how do you guys do output in memory,
right?

7
00:00:26.530 --> 00:00:29.140
Well, our file system is
completely abstracted.

8
00:00:29.140 --> 00:00:34.010
In this code base,
we never perform a FS call ever, never.

9
00:00:35.500 --> 00:00:37.300
So there is no required FS,

10
00:00:37.300 --> 00:00:41.698
because that would completely remove our
ability to do in-memory stuff, right?

11
00:00:41.698 --> 00:00:43.630
And so, we've completely abstracted it.

12
00:00:43.630 --> 00:00:47.746
I think it's in MemoryFile system.

13
00:00:47.746 --> 00:00:52.450
Yep, it's funny cuz this is the file.

14
00:00:52.450 --> 00:00:58.041
But in our source code, our MemoryFile
system is actually, we've abstracted,

15
00:00:58.041 --> 00:01:02.290
we've written this ourselves as well,
called memory-fs.

16
00:01:02.290 --> 00:01:04.520
And this is a package under Webpack.

17
00:01:04.520 --> 00:01:11.260
And it basically just allows you to bind
fs to an in-memory version of itself.

18
00:01:12.640 --> 00:01:16.867
And so, this is actually used and

19
00:01:16.867 --> 00:01:21.263
set during output file system.

20
00:01:21.263 --> 00:01:21.834
Here we go.

21
00:01:26.240 --> 00:01:27.200
Where is it?

22
00:01:27.200 --> 00:01:29.420
File system.

23
00:01:29.420 --> 00:01:31.110
There's an API where we
set this on the compiler.

24
00:01:33.320 --> 00:01:35.270
There we go.

25
00:01:35.270 --> 00:01:39.910
So we instantiate this, and we actually
set it to nothing if, it's the,

26
00:01:39.910 --> 00:01:44.600
we have two different ones that
we set versus in memory or not.

27
00:01:44.600 --> 00:01:49.500
But you could take this, and as long as it
has the right fs calls, you could have it

28
00:01:51.020 --> 00:01:54.860
pulling in sources and
exporting sources to a Redis cache.

29
00:01:54.860 --> 00:01:56.690
You could do anything.

30
00:01:56.690 --> 00:02:01.477
Well, there is a great talk online that
talks about how because everything is so

31
00:02:01.477 --> 00:02:06.407
de-coupled in webpack and so abstracted,
you have the ability to essentially,

32
00:02:06.407 --> 00:02:10.638
you could take a MongoDB database,
or some online service database.

33
00:02:10.638 --> 00:02:14.831
And as long as you implement the right
adapter so that it works like FS,

34
00:02:14.831 --> 00:02:16.963
you could hook into the compiler and

35
00:02:16.963 --> 00:02:20.680
set compiler.input and
output file system to these values.

36
00:02:22.770 --> 00:02:27.660
And so I've seen people do this and
just do incredible, crazy things.

37
00:02:27.660 --> 00:02:28.580
Somebody was telling me,

38
00:02:28.580 --> 00:02:33.530
we were running 1,000 webpack
builds every minute, I think.

39
00:02:33.530 --> 00:02:37.560
And sharing the dependencies,
sharing the module sources

40
00:02:37.560 --> 00:02:40.450
through a single Redis cache
between all these instances.

41
00:02:40.450 --> 00:02:44.240
And then that way,
they were able to do just crazy stuff.

42
00:02:44.240 --> 00:02:45.870
It just blows my mind.

43
00:02:47.170 --> 00:02:50.840
So yes, so
that piece is completely abstracted.

44
00:02:52.640 --> 00:02:57.752
Technically, because our resolver
is in a separate package, if you

45
00:02:57.752 --> 00:03:03.496
felt the motivation to write a separate
entire resolver, you could do that.

46
00:03:03.496 --> 00:03:06.286
We don't make any resolver calls for

47
00:03:06.286 --> 00:03:10.614
the exception of resolver.resolve,
I think, right?

48
00:03:10.614 --> 00:03:17.470
I think resolver.resolve, and
that's the only time we make those calls.

49
00:03:17.470 --> 00:03:23.331
So that means technically you could
write a completely separate resolver,

50
00:03:23.331 --> 00:03:28.560
replace it in webpack through the,
I believe the compiler sets it.

51
00:03:28.560 --> 00:03:29.751
No, I'm sorry, webpack options apply.

52
00:03:36.745 --> 00:03:38.552
&gt;&gt; Sean Larkin: Options apply,
and then find resolver.

53
00:03:38.552 --> 00:03:41.540
Yep, and there's actually hooks for this.

54
00:03:41.540 --> 00:03:46.130
So [COUGH] You can hook into this and

55
00:03:46.130 --> 00:03:48.940
literally set a different
resolver if you wanted to.

56
00:03:49.940 --> 00:03:54.974
So let's say if you wanted to completely
resolve from network resources.

57
00:03:54.974 --> 00:03:57.977
So instead of ever having
build files on disc,

58
00:03:57.977 --> 00:04:02.674
you could use a get virtual file system
and write a resolver that you could

59
00:04:02.674 --> 00:04:07.080
replace the resolver entirely for
webpack, and you could do that.

60
00:04:08.940 --> 00:04:11.267
I've had thoughts, but
remember there's caveats.

61
00:04:11.267 --> 00:04:14.233
If you do a network resolver,
you break watch mode, right,

62
00:04:14.233 --> 00:04:17.320
because how's it gonna pull
changes from the network?

63
00:04:17.320 --> 00:04:21.420
If you wanna solve that problem,
let me know, because that's cool.

64
00:04:23.700 --> 00:04:24.280
So yes, and

65
00:04:24.280 --> 00:04:28.180
you can even see here when we set
the resolver, what are we also setting?

66
00:04:30.310 --> 00:04:31.240
The file system.

67
00:04:31.240 --> 00:04:35.010
So all of these pieces are decouplable,

68
00:04:35.010 --> 00:04:40.416
all these pieces can be abstracted,
or abstracted.

69
00:04:40.416 --> 00:04:45.414
I mean, overall it may feel silly
that really all we did was hook into

70
00:04:45.414 --> 00:04:50.250
a couple hooks, but this is really
how you make a webpack plugin.

71
00:04:51.940 --> 00:04:56.020
I guess another thing that I could
cover is that you don't always have

72
00:04:56.020 --> 00:04:57.150
to get the compiler.

73
00:04:57.150 --> 00:04:59.330
Like if we look at
the source code in webpack,

74
00:04:59.330 --> 00:05:01.030
we see that we have parser plugins.

75
00:05:02.680 --> 00:05:05.160
And I wanna talk just
really briefly about that.

76
00:05:05.160 --> 00:05:10.250
So it's like, when we look,
how does a parser plugin work?

77
00:05:10.250 --> 00:05:13.220
Because really, when you look in here,
it says parser, right.

78
00:05:15.940 --> 00:05:19.400
So now the purpose is to encapsulate it,
right?

79
00:05:19.400 --> 00:05:21.430
Cuz you just don't want
a ginormous plugin,

80
00:05:21.430 --> 00:05:24.080
especially if you have
these separate behaviors.

81
00:05:24.080 --> 00:05:27.953
And so what you can do is,

82
00:05:27.953 --> 00:05:33.305
I think CommonJsMod, or Plugin?

83
00:05:33.305 --> 00:05:35.214
There we go.

84
00:05:38.444 --> 00:05:43.230
&gt;&gt; Sean Larkin: So we take a plugin and
you can apply other plugins from it.

85
00:05:43.230 --> 00:05:46.326
So if we go down to
the bottom of this code and

86
00:05:46.326 --> 00:05:50.704
we look,
&gt;&gt; Sean Larkin: You can take a plugin,

87
00:05:50.704 --> 00:05:53.368
any plugin, you can apply that method, and

88
00:05:53.368 --> 00:05:56.900
just pass in whatever you want
to be hooking into, right?

89
00:05:58.100 --> 00:06:01.800
So in this case, in this webpack plugin,

90
00:06:01.800 --> 00:06:06.467
this is how we support
the CommonJS syntax, right?

91
00:06:06.467 --> 00:06:10.322
So at a whim, we could just delete
this plugin from our source code and

92
00:06:10.322 --> 00:06:12.456
we don't support CommonJS anymore.

93
00:06:12.456 --> 00:06:16.020
We isolate the feature
sets per each plugin.

94
00:06:16.020 --> 00:06:22.050
And so in this case, this dependency
parser plugin is just specifically for

95
00:06:22.050 --> 00:06:25.220
the purpose of listening
to that parser hook.

96
00:06:26.260 --> 00:06:29.657
So we tap into the parser and

97
00:06:29.657 --> 00:06:34.840
then we're gonna apply the parser to it.

98
00:06:34.840 --> 00:06:38.443
So we go there and so that's just
responsible for hooking into the specific

99
00:06:38.443 --> 00:06:41.660
parcer, adding the dependencies,
adding the templates, etc.

100
00:06:42.880 --> 00:06:43.820
So you can do that.

101
00:06:43.820 --> 00:06:48.105
You can basically separate your plugins
into smaller plugins that get applied per

102
00:06:48.105 --> 00:06:49.145
instance.

103
00:06:49.145 --> 00:06:51.844
That's totally a possibility.

104
00:06:51.844 --> 00:06:56.345
So if we were to even just go back to our
plugin and refactor this, we could do so.

105
00:06:56.345 --> 00:07:03.528
We could say,
I'm just gonna write it in a single file.

106
00:07:03.528 --> 00:07:07.725
So I could say,
class MyFirstWebpackCompilationPlugin.

107
00:07:08.870 --> 00:07:11.096
Now, we use kind of a naming convention,

108
00:07:11.096 --> 00:07:15.689
where it's like whatever we're passing it
to, we would add that name to the bottom.

109
00:07:15.689 --> 00:07:19.595
So that's why we have ParserPlugin,
I instantlyy know looking at it, that's

110
00:07:19.595 --> 00:07:23.874
someting that gets the partial passed into
it instead of just the whole compiler.

111
00:07:23.874 --> 00:07:27.310
So that means your apply method
will actually take a compilation.

112
00:07:30.330 --> 00:07:31.840
And it's just really a naming convention.

113
00:07:31.840 --> 00:07:33.160
You could call it whatever
the heck you want.

114
00:07:34.290 --> 00:07:37.320
So instead I could say
something like this.

115
00:07:37.320 --> 00:07:43.120
So this code, really,
I could move down in here, right?

116
00:07:43.120 --> 00:07:47.380
Boom.
And then I would just say,

117
00:07:47.380 --> 00:07:51.970
now I obviously can't access
that closure variable anymore,

118
00:07:51.970 --> 00:07:54.350
but we could essentially
say something like this.

119
00:07:55.900 --> 00:07:59.950
MyFirstWebpackCompilationPlugin.

120
00:07:59.950 --> 00:08:01.590
But I think they call new on it too,
right?

121
00:08:04.070 --> 00:08:06.467
Sorry, I just want to
confirm that I'm not,

122
00:08:10.089 --> 00:08:11.912
&gt;&gt; Sean Larkin: You do call new,

123
00:08:11.912 --> 00:08:13.480
yes, you do.

124
00:08:13.480 --> 00:08:14.360
Okay, great.

125
00:08:14.360 --> 00:08:19.903
So, new
MyFirstWebpackCompilationPlugin().apply(c-

126
00:08:19.903 --> 00:08:22.132
ompilation), right?

127
00:08:22.132 --> 00:08:28.200
So just an easier way to create separation
of concerns, isolate your behavior.

128
00:08:28.200 --> 00:08:32.210
I even find that it makes your
plugins easier to read, right?

129
00:08:32.210 --> 00:08:36.950
Cuz now you can separate your behavior,
you don't have as many callbacks and

130
00:08:36.950 --> 00:08:38.540
indirection, stuff like that.

131
00:08:40.690 --> 00:08:44.720
Even if I like,
let's say we actually try and run this.

132
00:08:45.800 --> 00:08:49.940
I'll just jump into,
I'll just say yarn debug or mpm run debug.

133
00:08:51.410 --> 00:08:55.000
And I'll cheat and use VS code, okay.

134
00:08:59.122 --> 00:09:00.335
&gt;&gt; Sean Larkin: All right,
yep, we're in that.

135
00:09:00.335 --> 00:09:02.984
I could put this in a separate file,
it doesn't matter.

136
00:09:02.984 --> 00:09:05.050
But that's the point here.

137
00:09:05.050 --> 00:09:10.169
It's an easier way, this is the best
practice for writing plugins.

138
00:09:10.169 --> 00:09:13.750
And really it's just a reflection of how
we write it ourselves for the code base.

