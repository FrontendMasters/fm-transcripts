WEBVTT

1
00:00:00.200 --> 00:00:02.640
&gt;&gt; Sean Larkin: Who knows
what a parser does?

2
00:00:02.640 --> 00:00:03.320
Maybe?

3
00:00:03.320 --> 00:00:03.878
Parser?

4
00:00:03.878 --> 00:00:12.730
So a parser in the broader term
takes a string of source code,

5
00:00:12.730 --> 00:00:17.010
and converts it into what we call an AST,
or an abstract syntax tree.

6
00:00:18.760 --> 00:00:23.480
I love showcasing this, because it's
probably one of the most valuable parser,

7
00:00:24.920 --> 00:00:28.100
if you wanna learn about parsers,
maybe you don't, but

8
00:00:28.100 --> 00:00:32.330
if you do, go to ASTExplore.net.

9
00:00:32.330 --> 00:00:36.060
And like every programming language,
not only has one parser,

10
00:00:36.060 --> 00:00:38.600
they usually have like a bunch, right?

11
00:00:38.600 --> 00:00:42.040
So Webpack uses Acorn as
their parser by default.

12
00:00:42.040 --> 00:00:43.480
Babel uses Babylon.

13
00:00:44.710 --> 00:00:45.650
There's all sorts.

14
00:00:45.650 --> 00:00:49.100
Flow uses its own parser because
they have different ASTs, right?

15
00:00:50.320 --> 00:00:56.277
But the point here is that a parser
takes this string right here and

16
00:00:56.277 --> 00:01:01.275
it actually converts it into
this set of tree and data.

17
00:01:01.275 --> 00:01:05.815
And so it's much easier for
an application or a utility or

18
00:01:05.815 --> 00:01:13.120
a compiler to run through and walk through
a tree to read what the code is, right?

19
00:01:13.120 --> 00:01:15.570
Now what we do with it is that we take and

20
00:01:15.570 --> 00:01:18.210
we create an AST out of that module,
right?

21
00:01:19.430 --> 00:01:23.650
And you can see here, we can see any
type of syntax that's being used.

22
00:01:23.650 --> 00:01:30.072
Let's get even crazier like,
&gt;&gt; Sean Larkin: But,

23
00:01:30.072 --> 00:01:32.500
lets just say an import segment, right?

24
00:01:32.500 --> 00:01:34.310
There's a special token.

25
00:01:34.310 --> 00:01:36.520
So we call these lexical tokens, right?

26
00:01:36.520 --> 00:01:39.480
So it's a way to identify
what kind of syntax it is.

27
00:01:39.480 --> 00:01:44.060
So in this case, it's an import and
it's a literal import statement.

28
00:01:44.060 --> 00:01:48.030
And it's using one specifier,
which is like this namespace, and

29
00:01:48.030 --> 00:01:50.390
it's a default specifier.

30
00:01:50.390 --> 00:01:54.770
This is how we understand exactly what
your code looks like and how it works.

31
00:01:55.920 --> 00:02:00.620
So back to the slides, so

32
00:02:00.620 --> 00:02:06.900
we have a parser class that
uses Acorn behind the scenes,

33
00:02:06.900 --> 00:02:08.830
takes the source coding,
creates an AST out of it.

34
00:02:08.830 --> 00:02:10.930
It parses.
That's what a parser does.

35
00:02:10.930 --> 00:02:14.730
It takes this module object we
get from the module factory,

36
00:02:14.730 --> 00:02:18.830
turns it into an AST and
then it starts walking the graph.

37
00:02:22.080 --> 00:02:28.920
Now as it's walking that graph Just
as you may have saw in AST explorer.

38
00:02:28.920 --> 00:02:33.940
Let's just say, or
this is a great example.

39
00:02:33.940 --> 00:02:37.240
Literally, it just says,
start a program and then it goes, walk.

40
00:02:37.240 --> 00:02:40.280
And what walk does it is
recursively goes through body.

41
00:02:40.280 --> 00:02:43.060
And then it says, okay,
are there any items in the body?

42
00:02:43.060 --> 00:02:46.580
All right, well,
let's start at the first one.

43
00:02:46.580 --> 00:02:48.299
And then it goes through each property.

44
00:02:48.299 --> 00:02:52.583
And so for us, specifically though,
what's important,

45
00:02:52.583 --> 00:02:57.724
is what webpack does is as it's walking,
if it comes across a statement

46
00:02:57.724 --> 00:03:02.456
that represents a dependency,
like an important declaration.

47
00:03:02.456 --> 00:03:07.191
So when it see something like this,
we create and

48
00:03:07.191 --> 00:03:10.920
annotate that on the module object.

49
00:03:10.920 --> 00:03:14.080
So we find all of those, and then we
create these things called dependencies.

50
00:03:15.710 --> 00:03:21.100
And that tells webpack, what files
does this file depend on, right?

51
00:03:22.620 --> 00:03:25.710
So it's like we pass the module
to little parser glasses.

52
00:03:25.710 --> 00:03:29.080
We look for the requires and
imports, even dynamic imports.

53
00:03:30.280 --> 00:03:32.920
And then we attach these
dependency objects to the module.

54
00:03:34.350 --> 00:03:37.110
You can see each of them have,
they could be different flavors.

55
00:03:37.110 --> 00:03:39.520
They could be different import styles.

56
00:03:39.520 --> 00:03:40.806
It could be a common JS style.

57
00:03:40.806 --> 00:03:42.180
It could be AMD.

58
00:03:42.180 --> 00:03:44.690
But the point is that we attach
them to that module, right?

59
00:03:46.230 --> 00:03:47.260
And then finally

60
00:03:48.500 --> 00:03:52.970
the last tapable instance that's really
important is the template, right?

61
00:03:52.970 --> 00:03:54.390
We know what templates do, right?

62
00:03:54.390 --> 00:03:56.100
It's data binding.

63
00:03:56.100 --> 00:03:58.540
It's data binding for
your code or your UIs.

64
00:03:58.540 --> 00:04:02.150
Well, templates here for
us is literally data binding for

65
00:04:02.150 --> 00:04:03.690
these module objects, right?

66
00:04:04.920 --> 00:04:08.360
So the template, classes and
webpack are responsible for

67
00:04:08.360 --> 00:04:09.830
the source code that gets generated.

68
00:04:11.610 --> 00:04:15.262
So, if you took, and
looked at this little diagram,

69
00:04:15.262 --> 00:04:20.196
let me make it bigger, sorry.
&gt;&gt; Sean Larkin: A chunk

70
00:04:20.196 --> 00:04:23.070
is just something that
contains modules in an array.

71
00:04:23.070 --> 00:04:24.960
It allows us to keep track of it.

72
00:04:24.960 --> 00:04:28.980
And so, each of these different
types of abstractions.

73
00:04:28.980 --> 00:04:32.670
So, a chunk, a module, a dependency,
they all have templates.

74
00:04:32.670 --> 00:04:35.650
And they're literally called
chunk template, module template,

75
00:04:35.650 --> 00:04:38.510
main template, which is for
the run time code.

76
00:04:38.510 --> 00:04:42.030
And so, that's what these little handle
bars [LAUGH] are supposed to annotate.

77
00:04:42.030 --> 00:04:44.940
So what happens is we call
a function called render.

78
00:04:44.940 --> 00:04:47.540
And literally what gets generated.

79
00:04:47.540 --> 00:04:48.730
Well, even if you look at this.

80
00:04:48.730 --> 00:04:50.950
You're like, so

81
00:04:50.950 --> 00:04:55.720
each of them generates a little piece of
source code and puts it together, right?

82
00:04:55.720 --> 00:05:00.760
This kind of looks familiar, doesn't it?
&gt;&gt; Sean Larkin: Holy crap!

83
00:05:00.760 --> 00:05:05.240
That's literally the runtime rapper and
the iffy with the modules passed into it.

84
00:05:05.240 --> 00:05:09.070
That's the bundle that we are used
to seeing, that we walked through.

85
00:05:09.070 --> 00:05:11.637
Now i'm just hiding the main runtime here,
but

86
00:05:11.637 --> 00:05:14.021
that's what the main template generates.

87
00:05:14.021 --> 00:05:18.344
The chunk template literally
just generates the array,

88
00:05:18.344 --> 00:05:21.054
the array brackets and that's it.

89
00:05:21.054 --> 00:05:25.430
And then the module template create the
iffys for each module around the function.

90
00:05:26.470 --> 00:05:30.030
And then the dependency
templates transform and

91
00:05:30.030 --> 00:05:35.420
import into a webpack require or a dynamic
import into a webpack require.e or

92
00:05:35.420 --> 00:05:37.740
whatever is the appropriate
transformation for those.

