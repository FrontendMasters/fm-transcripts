WEBVTT

1
00:00:00.130 --> 00:00:02.363
&gt;&gt; Speaker 1: So,
say I wanted to write a custom loader.

2
00:00:02.363 --> 00:00:03.455
&gt;&gt; Sean Larkin: Yes.

3
00:00:03.455 --> 00:00:05.420
&gt;&gt; Speaker 1: Is there anything that
I should be looking out for there?

4
00:00:05.420 --> 00:00:10.160
&gt;&gt; Sean Larkin: To write a custom loader
and develop it locally in your project,

5
00:00:10.160 --> 00:00:12.100
there is just a couple
pieces that you have to add.

6
00:00:12.100 --> 00:00:15.350
So one is,
we have a property called resolveLoader.

7
00:00:15.350 --> 00:00:21.860
So resolveLoader, and
it actually is identical to the result.

8
00:00:21.860 --> 00:00:25.800
The properties that are available
are identical to the resolve property.

9
00:00:25.800 --> 00:00:31.250
So any custom behavior that you wanna
apply to just resolving modules,

10
00:00:31.250 --> 00:00:32.730
you can do the same thing for
your loaders.

11
00:00:32.730 --> 00:00:34.774
So we're gonna add an alias.

12
00:00:37.856 --> 00:00:39.470
&gt;&gt; Sean Larkin: Where's
my prettier formatting?

13
00:00:39.470 --> 00:00:41.077
Okay, hold on, I'll fix that.

14
00:00:45.024 --> 00:00:45.810
&gt;&gt; Sean Larkin: Gosh, there we go.

15
00:00:45.810 --> 00:00:50.754
All right, so
we wanna basically have a request.

16
00:00:50.754 --> 00:00:56.148
So in this case, we're gonna
hijack the name of our loader and

17
00:00:56.148 --> 00:01:01.460
replace it with a local file for
where our loader is, right?

18
00:01:01.460 --> 00:01:04.654
So let's just say my-loader, and

19
00:01:04.654 --> 00:01:09.240
we're gonna do require.resolve,
build utils.

20
00:01:11.746 --> 00:01:13.087
&gt;&gt; Sean Larkin: My-loader.

21
00:01:15.775 --> 00:01:16.530
&gt;&gt; Sean Larkin: That make sense so far?

22
00:01:17.660 --> 00:01:23.531
So if we're now use it, we'll actually
have to hook it up to something,

23
00:01:23.531 --> 00:01:28.441
so I'm gonna say, [SOUND] we need
to actually use the loader so

24
00:01:28.441 --> 00:01:31.649
module we got a real match or a rule set.

25
00:01:34.062 --> 00:01:37.170
&gt;&gt; Sean Larkin: And we'll say test,
oops, it's an object.

26
00:01:38.670 --> 00:01:45.330
Test, and let's just say,
I don't know, we'll do JS for now.

27
00:01:46.770 --> 00:01:48.890
And then we'll say use, and we'll just,

28
00:01:48.890 --> 00:01:50.940
now all we have to do is
just say my loader, right?

29
00:01:50.940 --> 00:01:53.877
Because that's gonna be hijacked,
it's gonna be resolved

30
00:01:53.877 --> 00:01:59.540
locally
&gt;&gt; Sean Larkin: To,

31
00:01:59.540 --> 00:02:02.149
let's actually now add that loader.

32
00:02:02.149 --> 00:02:06.139
So, my-loader.js.

33
00:02:09.158 --> 00:02:13.082
&gt;&gt; Sean Larkin: So the anatomy of
a loader is just it is a function, so

34
00:02:13.082 --> 00:02:15.970
you can name it whatever you want.

35
00:02:15.970 --> 00:02:17.150
Like 'll just say my-loader.

36
00:02:19.110 --> 00:02:24.010
And it takes a source string,
and it returns a new source.

37
00:02:25.660 --> 00:02:28.980
Now in this case,
we're just return in source right?

38
00:02:28.980 --> 00:02:33.140
And then for the shake of science,
we'll add a debugger statement, and

39
00:02:33.140 --> 00:02:35.210
then finally we need to export it.

40
00:02:35.210 --> 00:02:37.390
So, module to exports equals my-loader.

41
00:02:38.670 --> 00:02:44.180
Cool, so now I think we're finally
ready to test and see if it works.

42
00:02:44.180 --> 00:02:50.641
So, if we want to use
this preset we can say,

43
00:02:50.641 --> 00:02:57.292
yarn debug [NOISE]
ENV.presets = my loader.

44
00:02:57.292 --> 00:03:00.280
My loader, it looked like it
didn't want to pick it up.

45
00:03:00.280 --> 00:03:04.890
Well okay, so for the sake of, I guess
just having it work, what we can do is

46
00:03:04.890 --> 00:03:09.340
we can just move this config over
to like our normal existing config.

47
00:03:10.340 --> 00:03:12.090
So module rules, resolve loader.

48
00:03:13.170 --> 00:03:17.997
Let's just pull it over there, and
then I'll fix that bug and push it up.

49
00:03:17.997 --> 00:03:22.652
[LAUGH] Okay, so let's throw it in just
our main configuration at the top level.

50
00:03:25.448 --> 00:03:30.880
&gt;&gt; Sean Larkin: So
we can just add the resolve loader piece.

51
00:03:30.880 --> 00:03:32.885
They all make this much bigger and
easier to see.

52
00:03:36.761 --> 00:03:40.124
&gt;&gt; Sean Larkin: And then we get to
just transfer this single rule object,

53
00:03:40.124 --> 00:03:41.889
right into the existing one.

54
00:03:46.006 --> 00:03:48.667
&gt;&gt; Sean Larkin: The third and only
time I'll endorse copy poster [LAUGH].

55
00:03:51.570 --> 00:03:52.250
There we go.

56
00:03:53.780 --> 00:03:54.570
Let's see, okay.

57
00:03:54.570 --> 00:03:58.730
So, let's just yarn debug now.

58
00:03:58.730 --> 00:04:05.270
Yarn debug
&gt;&gt; Sean Larkin: And see what we get.

59
00:04:08.880 --> 00:04:14.200
&gt;&gt; Sean Larkin: Okay, literally,
the first module we come across, right?

60
00:04:14.200 --> 00:04:18.400
Because loaders are applied
at a profile basis.

61
00:04:18.400 --> 00:04:21.240
They only know about that source
that you're working with, right?

62
00:04:21.240 --> 00:04:24.490
So, let's see what we can actually access.

63
00:04:24.490 --> 00:04:29.040
We can look at the debug console, we can
literally console that locked source.

64
00:04:30.150 --> 00:04:31.415
We can of course see that source here.

65
00:04:34.766 --> 00:04:36.260
&gt;&gt; Sean Larkin: But hey,
look, it's our entry point.

66
00:04:36.260 --> 00:04:37.660
It's our first file.

67
00:04:37.660 --> 00:04:42.290
It's the first file to hit the graph, and
before it's being added to the graph, we

68
00:04:42.290 --> 00:04:46.380
apply loaders across it, right, and that's
how the matchers match up against it.

69
00:04:46.380 --> 00:04:52.250
So of course, [LAUGH] what kind
of fun things could we do?

70
00:04:52.250 --> 00:04:56.110
[LAUGH]
Now, of course,

71
00:04:56.110 --> 00:04:59.220
if you look like it's breaking through
every single JavaScript file, right?

72
00:04:59.220 --> 00:05:02.740
So it's going across every
single one it finds.

73
00:05:02.740 --> 00:05:03.700
Does it.

74
00:05:03.700 --> 00:05:05.890
No, it's going through all of low dash,

75
00:05:05.890 --> 00:05:08.680
which is painful,
cuz that's a lot of files there.

76
00:05:08.680 --> 00:05:09.840
Okay.

77
00:05:09.840 --> 00:05:14.380
So, what we would do is we would take,
I think a cool idea is

78
00:05:14.380 --> 00:05:19.645
like
&gt;&gt; Sean Larkin: Let's

79
00:05:19.645 --> 00:05:20.990
break into it one more time.

80
00:05:20.990 --> 00:05:25.290
Because I wanna assure you what other
kind of metadata you get about the file

81
00:05:25.290 --> 00:05:26.350
inside of a loader.

82
00:05:26.350 --> 00:05:31.152
We call this the loader context, and
we have a really good docs on this.

83
00:05:31.152 --> 00:05:36.141
So if you just type in you
debug counsel as you're

84
00:05:36.141 --> 00:05:41.170
broken into it, this, or, there we go.

85
00:05:41.170 --> 00:05:43.957
We get this objective information, so

86
00:05:43.957 --> 00:05:49.192
our utility that runs loaders against
the module injects a bunch of pieces

87
00:05:49.192 --> 00:05:53.930
of information that are made available and
that's useful to you.

88
00:05:53.930 --> 00:05:58.445
So for example,
if your loader comes across something and

89
00:05:58.445 --> 00:06:04.436
it should emit an error or warning,
you could literally call emitWarning and

90
00:06:04.436 --> 00:06:09.432
create a new error instance and
pass it back to webpack, right?

91
00:06:09.432 --> 00:06:14.335
Or you can take things and say,
you can explicitly create another

92
00:06:14.335 --> 00:06:19.152
dependency on a separate file
that maybe it isn't unrelated but

93
00:06:19.152 --> 00:06:23.879
it's relevant to your loader,
and so when that file changes,

94
00:06:23.879 --> 00:06:28.100
it triggers a rebuild on that file and
then of the graph.

95
00:06:30.380 --> 00:06:34.080
There's also things like,
I think one is called resource.

96
00:06:35.580 --> 00:06:39.440
Yeah resource, which is actually
the fully resolved path of the resolver.

97
00:06:39.440 --> 00:06:40.980
So it passes that to the loader, so

98
00:06:40.980 --> 00:06:45.640
it's like I could say something along the
lines of, like this is a great example.

99
00:06:46.660 --> 00:06:51.114
So I'm just gonna write some code here, so

100
00:06:51.114 --> 00:06:56.825
like if this.resource is
equal to that giant dealio.

101
00:07:00.814 --> 00:07:04.091
&gt;&gt; Sean Larkin: Then,
I'm gonna say source plus equals

102
00:07:08.990 --> 00:07:09.994
&gt;&gt; Sean Larkin: How would I do this?

103
00:07:09.994 --> 00:07:13.540
Probably add a semicolon at the end,
just in case, for safety.

104
00:07:14.600 --> 00:07:17.866
And then I would say like,
console dot log.

105
00:07:21.598 --> 00:07:24.250
&gt;&gt; Sean Larkin: Right, cuz you're
actually working with source strings now.

106
00:07:24.250 --> 00:07:27.066
So that's something to keep in mind.

107
00:07:27.066 --> 00:07:29.040
I love bananas.

108
00:07:29.040 --> 00:07:30.013
I didn't even spell it right.

109
00:07:32.700 --> 00:07:36.854
&gt;&gt; Sean Larkin: Now, [LAUGH] so
if we're to do this,

110
00:07:36.854 --> 00:07:42.690
now I don't think is gonna
actually update that.

111
00:07:42.690 --> 00:07:47.955
So lets break out of it and try and
run it again, and see what happens.

112
00:07:53.722 --> 00:07:59.173
&gt;&gt; Sean Larkin: All right,
and so I could go

113
00:07:59.173 --> 00:08:04.390
ahead and I'll unpause.

114
00:08:04.390 --> 00:08:06.630
Does it stop it or
does it just unpause it?

115
00:08:06.630 --> 00:08:08.290
Cool.
It unpauses it.

116
00:08:08.290 --> 00:08:09.830
Let's see what happens.

117
00:08:09.830 --> 00:08:11.080
Okay, it succeeds.

118
00:08:11.080 --> 00:08:12.866
Let's look in our entry point and
see what's in there.

119
00:08:12.866 --> 00:08:17.326
So dist, bundle,js,

120
00:08:17.326 --> 00:08:21.880
like I love bananas.

121
00:08:21.880 --> 00:08:23.180
There you go, right?

122
00:08:23.180 --> 00:08:28.641
It's just string transformations
on raw source files.

123
00:08:28.641 --> 00:08:31.438
Now, if you're adding kind
of like complex objects and

124
00:08:31.438 --> 00:08:36.580
stuff like that, I usually recommend that
you perform like a json.stringify, right?

125
00:08:36.580 --> 00:08:39.520
And then whatever things you wanna
change or alter, you'd do so there.

126
00:08:41.900 --> 00:08:45.360
Or in the other way, Json parse it
out first, and then modify stuff and

127
00:08:45.360 --> 00:08:46.860
stringify it again.

128
00:08:46.860 --> 00:08:51.830
But really,
that is the primitive subloaders.

129
00:08:51.830 --> 00:08:56.965
So I'll share the loader API, so
essentially it's the same URL,

130
00:08:56.965 --> 00:08:59.690
webpackapi/loaders.

131
00:08:59.690 --> 00:09:02.050
And now, of course, there's different
things like synchronous loaders,

132
00:09:02.050 --> 00:09:06.990
asynchronous, pitching loaders, which is
like a special way to collect metadata

133
00:09:06.990 --> 00:09:10.250
about your code without even
needing to transform the files.

134
00:09:11.960 --> 00:09:16.720
There's also, wow,
we did a really great example on this.

135
00:09:16.720 --> 00:09:18.525
It talks about the router context, right?

136
00:09:18.525 --> 00:09:23.871
So like all of the properties
on the API in addition

137
00:09:23.871 --> 00:09:28.466
to things like there's really a good one.

138
00:09:28.466 --> 00:09:31.274
I've talked about the things like you
shouldn't also that we're reduplicatng

139
00:09:31.274 --> 00:09:32.560
are gonna drop.

140
00:09:32.560 --> 00:09:35.480
And even like the reasons why
you might wanna use something.

141
00:09:35.480 --> 00:09:37.360
And then there's things like a Raw Loader,

142
00:09:37.360 --> 00:09:42.130
which you can actually pass buffers
in between loaders if you wanted to.

143
00:09:42.130 --> 00:09:46.870
So if you're like dealing with more
complex source or image asset types, and

144
00:09:46.870 --> 00:09:50.130
it's more optimizes instead of trying to
take a basic if you forward something into

145
00:09:50.130 --> 00:09:54.040
to keep the buffer data and
pass it through, you can do so.

146
00:09:55.710 --> 00:10:02.180
And then to get even, if you wanted to
be more elaborate, if you have multiple

147
00:10:02.180 --> 00:10:07.070
loaders, instead of having the AST,
like instead of going through and parsing.

148
00:10:08.200 --> 00:10:10.690
If you can generate an AST out of it,

149
00:10:10.690 --> 00:10:16.000
you can pass the AST between each loader,
as long as it's an Acorn AST, right?

150
00:10:16.000 --> 00:10:21.630
Because that's what web pack ultimately
does after loaders are applied.

151
00:10:21.630 --> 00:10:24.640
It has the parse and
create the AST, and then walk it.

152
00:10:24.640 --> 00:10:29.720
So you have the ability,
let me see if it talks about, yes.

153
00:10:29.720 --> 00:10:33.328
So it will be useful to pass an abstract
syntax tree the fourth argument to speed

154
00:10:33.328 --> 00:10:36.240
up build time, if you wanna share
common AST between loaders.

155
00:10:36.240 --> 00:10:40.620
So that's also hyper valuable,
and useful to know.

156
00:10:40.620 --> 00:10:43.390
Wow, I'm really proud of
our documentation team.

157
00:10:43.390 --> 00:10:46.520
I don't always look at this everyday, and

158
00:10:46.520 --> 00:10:50.230
they have made some incredible
updates in the last two months.

159
00:10:50.230 --> 00:10:53.060
So these are very up-to-date.

160
00:10:53.060 --> 00:10:54.220
So I would encourage you.

161
00:10:54.220 --> 00:10:57.090
Of course, you can always reach out to me,
or ask me questions.

162
00:10:57.090 --> 00:11:02.170
Does that kind of make sense from it's
simple as value how to create a loader?

163
00:11:02.170 --> 00:11:03.470
And how to get it set up?

164
00:11:03.470 --> 00:11:05.854
Okay, so I'll just add that and
create a branch.

