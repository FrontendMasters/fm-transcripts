WEBVTT

1
00:00:00.150 --> 00:00:02.060
&gt;&gt; Sean Larkin: Are you feeling confident?

2
00:00:02.060 --> 00:00:05.150
I should expect to see a bunch of
custom plugins and loaders created.

3
00:00:06.860 --> 00:00:11.720
I'll hand you one more resource
that I think is valuable, so

4
00:00:11.720 --> 00:00:16.214
if you go to my githubs,
so github.com/thelarkinn.

5
00:00:16.214 --> 00:00:20.072
I have just updated to
webpack 4 a little side

6
00:00:20.072 --> 00:00:24.655
project I used called the web
Webpack Developer Kit.

7
00:00:24.655 --> 00:00:29.506
So [COUGH] essentially,

8
00:00:32.523 --> 00:00:37.256
&gt;&gt; Sean Larkin: What this allows you
to do is if we look at this project.

9
00:00:37.256 --> 00:00:41.194
All right, so what you would do is you'd
clone it, download the dependencies.

10
00:00:41.194 --> 00:00:44.829
I'm just gonna open it locally so
you can get a taste of what it looks like.

11
00:00:46.470 --> 00:00:51.490
So you're gonna see a bunch of
strange js docs and things like that.

12
00:00:51.490 --> 00:00:52.430
You can ignore them.

13
00:00:52.430 --> 00:00:55.181
They're really there for,
if you're using VS code and

14
00:00:55.181 --> 00:00:58.450
you get really great code IntelliSense,
right?

15
00:00:58.450 --> 00:01:03.410
So what this does is this allow,
like I basically have like this

16
00:01:03.410 --> 00:01:07.980
setup project using Web Pack
in a very primitive example.

17
00:01:07.980 --> 00:01:10.596
And I have all the pieces setup needed or

18
00:01:10.596 --> 00:01:14.248
let's say if you wanted to
abstract stuff or whatnot.

19
00:01:14.248 --> 00:01:17.891
But it's basically just a little kit
that allows you to work on plugins and

20
00:01:17.891 --> 00:01:21.540
custom loaders, right, or
any custom integration.

21
00:01:21.540 --> 00:01:26.210
And so that way, it's using the latest
API, the new hooks, things like that.

22
00:01:26.210 --> 00:01:31.170
In addition, like I have already set up,
the resolveLoader and

23
00:01:31.170 --> 00:01:33.040
the alias so you can write a customLoader.

24
00:01:34.620 --> 00:01:39.580
And so it's for you to literally explore
and what's great is if you're using VS

25
00:01:39.580 --> 00:01:44.350
code, like I've added
the right type annotations so

26
00:01:44.350 --> 00:01:46.850
now it actually pulls hooks
if you wanna see them.

27
00:01:46.850 --> 00:01:50.270
So as you're writing, you can get
all this data available to you.

28
00:01:51.490 --> 00:01:56.141
And as we continue to add type annotations
in our source code, you'll actually start

29
00:01:56.141 --> 00:02:00.520
to being able to see instantly, it's
the same hook but what is passed to it.

30
00:02:00.520 --> 00:02:01.458
Like right now it says any,

31
00:02:01.458 --> 00:02:05.640
any, any, it will actually say chunks,
whatever, whatever.

32
00:02:05.640 --> 00:02:07.300
And you'll get the type annotations for

33
00:02:07.300 --> 00:02:10.690
that too because every instance
we're gonna add types too.

34
00:02:10.690 --> 00:02:13.270
So I think this is super valuable.

35
00:02:13.270 --> 00:02:18.551
It allows you to experiment, to explore,
and hopefully, it's helpful.

36
00:02:18.551 --> 00:02:23.327
I even have the commented out all
of webpack, like here is memory fs.

37
00:02:23.327 --> 00:02:27.054
Here's webpack sources which is
when any source is collected,

38
00:02:27.054 --> 00:02:31.886
we create this object called webpacks,
like a sources object, and we encapsulate

39
00:02:31.886 --> 00:02:36.261
into a single module how we do source
mapping and it's in webpack sources.

40
00:02:36.261 --> 00:02:40.775
And I guess source map list but that's
not relevant, and even the resolver.

41
00:02:40.775 --> 00:02:45.015
So I created this so that you could
at a whim try and extend anything,

42
00:02:45.015 --> 00:02:47.755
break it, have a nuclear meltdown and

43
00:02:47.755 --> 00:02:52.330
you're just in a nice little project
that's easy to experiment with.

44
00:02:52.330 --> 00:02:54.100
So I recommend cloning it or

45
00:02:54.100 --> 00:02:58.328
forking it at the least, and
just giving it a go and playing with it.

46
00:02:58.328 --> 00:03:05.337
So yeah, are there any other questions?

47
00:03:05.337 --> 00:03:08.170
I think that's really about it.

48
00:03:08.170 --> 00:03:14.105
There is so much more to learn, and
I'll have all the slides linked and

49
00:03:14.105 --> 00:03:17.725
just like this last slide literally says,

50
00:03:17.725 --> 00:03:23.774
you literally just learned how
webpack works entirely under the hood.

51
00:03:23.774 --> 00:03:29.849
There's nothing more to it really.

52
00:03:29.849 --> 00:03:32.759
From a high level all we do
is we just resolve files, and

53
00:03:32.759 --> 00:03:36.131
then tie everything up together
in a single dependency graph.

54
00:03:36.131 --> 00:03:40.590
But that's the power that lets you do
things, like incremental building and

55
00:03:40.590 --> 00:03:44.238
all the abstractions that we've given for
our plug in system.

56
00:03:44.238 --> 00:03:48.149
The architecture that we've created
allows us to instantly pivot and

57
00:03:48.149 --> 00:03:49.814
add any feature that we want.

58
00:03:49.814 --> 00:03:52.295
So we're able to develop really quickly.

59
00:03:52.295 --> 00:03:54.420
We're able to publish changes really fast.

60
00:03:54.420 --> 00:03:59.870
And we're even able to support
new module types like Wazam and

61
00:03:59.870 --> 00:04:05.220
JSON where you can have JSON tree shaking,
just by importing a JSON file.

62
00:04:05.220 --> 00:04:07.840
And there's just so many other things.

63
00:04:07.840 --> 00:04:09.830
So if you have questions,
you can always find me on Twitter.

64
00:04:11.270 --> 00:04:15.510
My DMs get kind of filled up but
I try and respond as quick as possible.

65
00:04:15.510 --> 00:04:18.018
I always promise I will
eventually respond.

66
00:04:18.018 --> 00:04:19.280
So I can tell you that.

67
00:04:19.280 --> 00:04:20.804
So thank you guys very much.

68
00:04:20.804 --> 00:04:27.192
&gt;&gt; Class: [APPLAUSE]

