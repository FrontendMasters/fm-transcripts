WEBVTT

1
00:00:01.290 --> 00:00:05.320
&gt;&gt; Brian Holt: So let's talk about some
other properties of Bloom filters.

2
00:00:07.796 --> 00:00:09.551
&gt;&gt; Brian Holt: As you may have guessed,

3
00:00:09.551 --> 00:00:13.570
you can't remove anything
from a Bloom filter, right?

4
00:00:15.060 --> 00:00:17.980
Because if I go and try and
remove something from a Bloom filter

5
00:00:17.980 --> 00:00:19.870
something else might have
flipped that one as well.

6
00:00:22.600 --> 00:00:25.510
So you might actually be removing multiple
things from your Bloom filter which is

7
00:00:25.510 --> 00:00:26.680
probably not what you wanna do.

8
00:00:26.680 --> 00:00:29.850
So, that's a property of a Bloom filter
is you can never remove anything that

9
00:00:29.850 --> 00:00:33.390
you've added to a Bloom filter.

10
00:00:34.850 --> 00:00:38.800
The other thing that you have to be
careful of this is when you'RE allocating

11
00:00:38.800 --> 00:00:43.130
a Bloom filter 10 indices is not nearly
enough for a Bloom filter, right?

12
00:00:43.130 --> 00:00:47.330
Usually it's hundreds or a thousand or
something to that effect, right?

13
00:00:48.780 --> 00:00:51.590
Because you can't expand a Bloom filter,
right?

14
00:00:51.590 --> 00:00:54.405
Without keeping track of everything that's
already been added to it which kind of

15
00:00:54.405 --> 00:00:55.880
defeats the purpose, right?

16
00:00:55.880 --> 00:01:00.021
So make sure you're allocating
enough memory upfront for

17
00:01:00.021 --> 00:01:03.324
however many things that
you're going to do.

18
00:01:06.214 --> 00:01:11.300
&gt;&gt; Brian Holt: Yeah, anyway.

19
00:01:11.300 --> 00:01:15.240
So that's another thing you want
to be keeping of track of is,

20
00:01:15.240 --> 00:01:18.120
how many things that, or
make sure it's big enough.

21
00:01:18.120 --> 00:01:19.760
More hashing functions, right?

22
00:01:19.760 --> 00:01:22.520
So as you might imagine if I
run something through three or

23
00:01:22.520 --> 00:01:27.510
four hashing functions I'm gonna
get less false negatives, right?

24
00:01:27.510 --> 00:01:30.440
Because it's gonna be spread out over
multiple parts of the array, but

25
00:01:30.440 --> 00:01:34.590
the tradeoff in doing that means that
you probably need a bigger array because

26
00:01:34.590 --> 00:01:36.340
you have to able to store more things.

27
00:01:36.340 --> 00:01:39.930
So you have to decide what your
tolerance for false negatives is too.

28
00:01:39.930 --> 00:01:43.620
There's complicated math that will tell
you the percentages and things like that.

29
00:01:43.620 --> 00:01:46.850
And it's like, I'm not going to teach you
how to do that cuz that would imply that I

30
00:01:46.850 --> 00:01:47.650
know how to do that.

31
00:01:47.650 --> 00:01:52.980
[LAUGH] Suffice to say, there are plenty
calculators online that do it.

32
00:01:52.980 --> 00:01:55.390
&gt;&gt; Speaker 2: So, you're saying the words,
false negatives, and

33
00:01:55.390 --> 00:01:59.210
on the slide I'm seeing the phrase,
false positives.

34
00:01:59.210 --> 00:02:02.170
&gt;&gt; Brian Holt: Yeah, that's probably
me just mixing up my terminology.

35
00:02:02.170 --> 00:02:05.390
So, yes false positives.

36
00:02:05.390 --> 00:02:06.680
Cuz the answers are no and maybe so

37
00:02:06.680 --> 00:02:09.030
it would be a false positive,
not a false negative.

38
00:02:09.030 --> 00:02:11.406
Thank you.

39
00:02:14.779 --> 00:02:17.060
&gt;&gt; Brian Holt: This is another
good thing to keep in mind.

40
00:02:17.060 --> 00:02:20.040
Usually when people hear
the word hashing function

41
00:02:20.040 --> 00:02:22.000
their first thoughts go to MD5, right?

42
00:02:22.000 --> 00:02:25.400
That's at least for me, when I hear
hashing function I think of MD5.

43
00:02:25.400 --> 00:02:28.868
Or the other one is SHA-1 or
256 or something like that,

44
00:02:28.868 --> 00:02:32.200
these are not the hashing
functions you want to use because

45
00:02:32.200 --> 00:02:34.740
these are cryptographically secure.

46
00:02:34.740 --> 00:02:38.790
Or I guess that's a, I'm not gonna.

47
00:02:38.790 --> 00:02:39.350
&gt;&gt; Speaker 3: Used to be?

48
00:02:39.350 --> 00:02:41.095
&gt;&gt; Brian Holt: They were designed
to be cryptographically secure.

49
00:02:41.095 --> 00:02:43.150
&gt;&gt; Speaker 3: [LAUGH]
&gt;&gt; Brian Holt: Let's go with that.

50
00:02:45.500 --> 00:02:48.690
So if I say the point of Bloom
filters is to be fast and

51
00:02:48.690 --> 00:02:51.720
efficient, these are designed to be slow.

52
00:02:51.720 --> 00:02:55.930
Because that's what cryptography and all
those kind of things are designed to do.

53
00:02:55.930 --> 00:02:57.960
So you don't wanna use
a slow hashing algorithm,

54
00:02:57.960 --> 00:03:00.520
you want something that's actually really,
really fast.

55
00:03:00.520 --> 00:03:04.550
So that's why you don't wanna use SHA or
MD5,

56
00:03:04.550 --> 00:03:07.460
you wanna use something
that's designed to go fast.

57
00:03:07.460 --> 00:03:11.070
In the exercise I've just provided you,
the hashing functions,

58
00:03:11.070 --> 00:03:12.580
suggest to use those.

59
00:03:12.580 --> 00:03:15.234
But that's something to keep in mind.

60
00:03:20.094 --> 00:03:23.660
&gt;&gt; Brian Holt: Any questions about
what these are, how to use them.

61
00:03:28.032 --> 00:03:32.695
&gt;&gt; Speaker 4: Is there a known hashing
function with the uniform distribution for

62
00:03:32.695 --> 00:03:33.440
strings?

63
00:03:34.460 --> 00:03:40.640
&gt;&gt; Brian Holt: I have a general rule that
I never write my own hashing functions.

64
00:03:40.640 --> 00:03:44.660
So there is a library called XXJS,
I think, is what it's called.

65
00:03:46.670 --> 00:03:48.550
That does that.

66
00:03:48.550 --> 00:03:49.930
Yeah.

67
00:03:49.930 --> 00:03:50.430
Yep.

