WEBVTT

1
00:00:00.030 --> 00:00:02.600
&gt;&gt; Brian Holt: So
what we're gonna do now is we're going to

2
00:00:02.600 --> 00:00:05.130
make some helper utility functions.

3
00:00:05.130 --> 00:00:09.770
And it's gonna be annoying to try and
interpret north, east, south,

4
00:00:09.770 --> 00:00:12.370
west, and have those string
checks all over our code.

5
00:00:12.370 --> 00:00:15.453
It would be really cool if there was a
function that I could just pass in north,

6
00:00:15.453 --> 00:00:19.730
and it would just say go up one,
right, in terms of numbers.

7
00:00:19.730 --> 00:00:26.836
So what I'm gonna do is,
I'm gonna make a const getModifier.

8
00:00:26.836 --> 00:00:28.550
It's gonna take in some key.

9
00:00:30.790 --> 00:00:38.310
And this key is going to return, again,
an x,y pair of where I should go.

10
00:00:38.310 --> 00:00:41.840
Now, I'm gonna write this in
a really compressed ternary.

11
00:00:41.840 --> 00:00:46.746
But you can totally, we can even just
do it in terms of, this is fine.

12
00:00:51.835 --> 00:00:57.330
&gt;&gt; Brian Holt: So,
if key triple equals north,

13
00:00:57.330 --> 00:01:01.655
then return [0, 1].

14
00:01:06.097 --> 00:01:14.005
&gt;&gt; Brian Holt: If key triple equals south,

15
00:01:14.005 --> 00:01:19.277
then return [0,

16
00:01:19.277 --> 00:01:21.920
-1].

17
00:01:25.250 --> 00:01:29.500
If key triple equals,
you can make these l is, as well.

18
00:01:29.500 --> 00:01:32.260
It doesn't particularly matter,
because whenever you call return,

19
00:01:32.260 --> 00:01:33.336
it just ends the function.

20
00:01:33.336 --> 00:01:38.940
So either way, I'm just lazy,
so I just do it this way.

21
00:01:38.940 --> 00:01:42.000
But you can do it however you want.

22
00:01:43.830 --> 00:01:48.122
So if it's east, it's gonna go positive 1.

23
00:01:50.778 --> 00:01:51.800
&gt;&gt; Brian Holt: I have to return that.

24
00:01:53.790 --> 00:01:56.700
And finally, just return.

25
00:01:56.700 --> 00:02:00.605
Cuz these are the only options, so
you don't have to really check for west.

26
00:02:03.070 --> 00:02:05.360
&gt;&gt; Brian Holt: But you could do that
as well if you wanted to, okay?

27
00:02:05.360 --> 00:02:05.962
So now I have this function.

28
00:02:05.962 --> 00:02:09.536
Whenever I call it, I'm gonna get
the proper modifier to go up or down.

29
00:02:16.652 --> 00:02:19.601
&gt;&gt; Brian Holt: Okay, and
then the other thing I wanna do is,

30
00:02:19.601 --> 00:02:23.340
because I have to worry a lot
about the opposite, right?

31
00:02:23.340 --> 00:02:28.270
Because if I go north,
I'm gonna tear down a wall there right?

32
00:02:28.270 --> 00:02:30.200
But it's also good to know for
the other one,

33
00:02:30.200 --> 00:02:32.530
I have to tear down the other wall, right?

34
00:02:32.530 --> 00:02:35.238
So that's what I'm gonna
do here is the getOpposite.

35
00:02:35.238 --> 00:02:43.300
So, const getOpposite,
it's gonna again take in a key.

36
00:02:43.300 --> 00:02:45.690
This could be a key pair value as well.

37
00:02:45.690 --> 00:02:47.860
And again, the function could have
been a key value pair as well.

38
00:02:47.860 --> 00:02:49.869
I just like doing things
in terms of functions.

39
00:02:52.080 --> 00:02:56.470
So if key, in fact, what

40
00:02:56.470 --> 00:03:02.190
we can do here is just copy this same
logic cuz it's the same sort of logic.

41
00:03:02.190 --> 00:03:07.455
Paste it in here, but
instead of that we can

42
00:03:07.455 --> 00:03:13.770
just put south, north, west, east, right?

43
00:03:13.770 --> 00:03:14.990
So now this is a really easy thing.

44
00:03:14.990 --> 00:03:18.430
I just call getOpposite, and I instantly
know what the other opposite direction is.

45
00:03:18.430 --> 00:03:20.450
It just makes it a lot easier
to deal with all these strings.

46
00:03:20.450 --> 00:03:22.732
I can deal with numbers and
assume that they're valid numbers,

47
00:03:22.732 --> 00:03:24.644
rather than trying to deal
with strings everywhere.

48
00:03:29.002 --> 00:03:34.230
&gt;&gt; Brian Holt: Okay, so
this is a recursive function.

49
00:03:34.230 --> 00:03:39.060
You might have been tipped off in
recursive backtracking, I don't know.

50
00:03:39.060 --> 00:03:42.157
If not, you might have a problem.

51
00:03:42.157 --> 00:03:43.207
Just kidding.

52
00:03:44.952 --> 00:03:46.923
&gt;&gt; Brian Holt: So I'm gonna write
a function called nextNode, right?

53
00:03:46.923 --> 00:03:49.280
It's just gonna process
the nextNode in this.

54
00:03:49.280 --> 00:03:54.157
And I'm gonna call it with xStart,

55
00:03:54.157 --> 00:03:58.718
I can spell, yStart, and maze.

56
00:03:58.718 --> 00:04:01.471
I don't know why I chose
to flip the argument order.

57
00:04:01.471 --> 00:04:03.254
It doesn't make any sense,
but that's what I did.

58
00:04:03.254 --> 00:04:07.646
So we're going with it,

59
00:04:07.646 --> 00:04:12.456
const nextNode = (x, y,

60
00:04:12.456 --> 00:04:15.400
maze), okay?

61
00:04:15.400 --> 00:04:21.741
The current node that I'm working
on is going to be, const,

62
00:04:23.209 --> 00:04:28.724
&gt;&gt; Brian Holt: const node = maze[y][x].

63
00:04:28.724 --> 00:04:31.880
Right, that's the current node that
we're going to be operating on.

64
00:04:31.880 --> 00:04:36.970
The first thing that we're going to do
is we're gonna say node.visited = true,

65
00:04:36.970 --> 00:04:37.510
right?

66
00:04:37.510 --> 00:04:39.430
Cuz we're on the node,
we're processing it at the moment.

67
00:04:40.570 --> 00:04:46.501
Then, we're gonna do randomizeDirection.

68
00:04:46.501 --> 00:04:52.460
Which again, is just gonna be an array
of those strings of directions to go.

69
00:04:52.460 --> 00:05:00.006
So I'm gonna do that, and I'm gonna do
a forEach that's gonna be a direction.

70
00:05:06.312 --> 00:05:10.588
&gt;&gt; Brian Holt: So
I'm gonna do const [xMod,

71
00:05:10.588 --> 00:05:14.042
yMod] = getModifier,

72
00:05:14.042 --> 00:05:19.999
of the direction that I'm going, right?

73
00:05:19.999 --> 00:05:23.580
So that's why I got this x modifier.

74
00:05:23.580 --> 00:05:26.510
So this is called destructuring, right?

75
00:05:26.510 --> 00:05:30.200
So I know at the 0 element,
I have the x, and at the 1 element,

76
00:05:30.200 --> 00:05:31.520
I have the y modifier.

77
00:05:31.520 --> 00:05:35.860
So I'm just pulling those out and
into variables called that, right.

78
00:05:35.860 --> 00:05:41.017
It's a brand new ES 6,
ES 2015 functionality.

79
00:05:43.811 --> 00:05:47.430
&gt;&gt; Brian Holt: So here,
I'm gonna have a long if statement.

80
00:05:47.430 --> 00:05:53.028
So if, we'll put this on multiple lines,
cuz I think it works a little bit better.

81
00:05:53.028 --> 00:05:57.501
if maze[y + yMod], so

82
00:05:57.501 --> 00:06:03.252
you're trying to make sure that

83
00:06:03.252 --> 00:06:10.923
you're not going off of the grid, right?

84
00:06:18.053 --> 00:06:19.538
&gt;&gt; Brian Holt: So
you're trying to make sure that you're

85
00:06:19.538 --> 00:06:20.700
not going off in the y direction.

86
00:06:20.700 --> 00:06:25.942
You also need to make sure that
you don't go off in the y + yMod.

87
00:06:28.721 --> 00:06:33.697
&gt;&gt; Brian Holt: And oops, x + xMod.

88
00:06:33.697 --> 00:06:37.280
So this is making sure that you
don't have a null accessory, right?

89
00:06:37.280 --> 00:06:39.670
Because if I go off in the y direction,

90
00:06:39.670 --> 00:06:41.280
there's gonna be no array there to check,
right?

91
00:06:41.280 --> 00:06:43.940
So you need to check that
first the y is valid.

92
00:06:43.940 --> 00:06:46.520
But then you need to check that the y and
the x are valid.

93
00:06:47.800 --> 00:06:50.450
And then you need to check to make
sure that they're not visited, right?

94
00:06:50.450 --> 00:06:58.218
So not visited, maze[y + yMod][x + xMod].

95
00:06:58.218 --> 00:07:03.340
You could've totally done this
with something like Lodash.

96
00:07:03.340 --> 00:07:07.983
I just wanted to code it out so
you can see what's going on.

97
00:07:07.983 --> 00:07:10.829
.visited, right, so if it exists and
has not been visited,

98
00:07:10.829 --> 00:07:12.822
that's what this if statement is saying.

99
00:07:15.092 --> 00:07:22.880
&gt;&gt; Brian Holt: Okay, then you're
gonna say node[direction] = false.

100
00:07:24.680 --> 00:07:28.872
And then you wanna say maze,

101
00:07:28.872 --> 00:07:36.390
at the next place you're going,
yMod, x + xMod.

102
00:07:36.390 --> 00:07:38.080
So that's gonna be a new node, right?

103
00:07:38.080 --> 00:07:40.719
This particular thing that we're
operating on is a new node.

104
00:07:40.719 --> 00:07:45.080
And then we want to set
the opposite direction to be false.

105
00:07:45.080 --> 00:07:47.440
So if I went north here,

106
00:07:47.440 --> 00:07:52.280
I want the south wall of the one
above it to be false as well.

107
00:07:52.280 --> 00:07:57.217
So that's where we're gonna use
the getOpposite function here to be

108
00:07:57.217 --> 00:07:58.530
false as well.

109
00:07:58.530 --> 00:08:00.510
And this will create the burrow, right?

110
00:08:00.510 --> 00:08:02.137
It'll tear down both walls.

111
00:08:04.333 --> 00:08:07.200
&gt;&gt; Brian Holt: Okay, and then here
is where our recursive call comes.

112
00:08:07.200 --> 00:08:13.024
So, nextNode(x + xMod,

113
00:08:13.024 --> 00:08:17.337
y + yMod, maze).

114
00:08:24.797 --> 00:08:29.715
&gt;&gt; Brian Holt: Okay,
and then just down here

115
00:08:29.715 --> 00:08:34.045
I have return false here.

116
00:08:38.201 --> 00:08:39.250
&gt;&gt; Brian Holt: Yeah, it doesn't matter.

117
00:08:40.330 --> 00:08:44.742
You can return void as well, either/or.

118
00:08:44.742 --> 00:08:46.836
And eventually you'll
end up with this maze.

119
00:08:49.810 --> 00:08:52.310
&gt;&gt; Brian Holt: That will, that'll work.

120
00:08:52.310 --> 00:08:55.000
The reason why this works is because
you're just always operating on

121
00:08:55.000 --> 00:08:55.910
maze, right?

122
00:08:55.910 --> 00:09:01.060
So whatever happens to maze,
it still should work.

123
00:09:01.060 --> 00:09:02.972
So let's give that a shot, see if it runs.

124
00:09:08.027 --> 00:09:08.849
&gt;&gt; Brian Holt: And it works.

125
00:09:11.040 --> 00:09:14.518
So if you wanna see if
the giant one works,

126
00:09:19.692 --> 00:09:20.681
&gt;&gt; Brian Holt: Give that a shot.

127
00:09:23.925 --> 00:09:26.505
&gt;&gt; Brian Holt: You'll see that
the big maze works too, and

128
00:09:26.505 --> 00:09:28.192
all the units tests passed.

129
00:09:30.182 --> 00:09:31.200
&gt;&gt; Brian Holt: Pretty cool, right?

130
00:09:31.200 --> 00:09:33.830
We generated that,
we wrote the code that generates this.

131
00:09:33.830 --> 00:09:36.891
To me, I don't know if I get
too self impressed sometimes.

132
00:09:36.891 --> 00:09:41.035
But I think it's really cool that we
can write code that generates something

133
00:09:41.035 --> 00:09:41.692
like that.

134
00:09:41.692 --> 00:09:42.304
I don't know.

135
00:09:45.521 --> 00:09:46.421
&gt;&gt; Brian Holt: Anyway.

136
00:09:46.421 --> 00:09:50.075
&gt;&gt; Speaker 2: I think it's cool
that you can write unit tests for

137
00:09:50.075 --> 00:09:52.870
something random and have them pass.

138
00:09:52.870 --> 00:09:57.250
&gt;&gt; Brian Holt: Right, yeah, you just have
able to provide some sort of deterministic

139
00:09:57.250 --> 00:10:01.341
seed value, right, which is what
those randomized things said.

140
00:10:01.341 --> 00:10:03.880
So be it'd kind of a specific unit test.

141
00:10:03.880 --> 00:10:05.290
I don't know if they would
be the best ones, but

142
00:10:05.290 --> 00:10:10.630
this would be something really ideal for
something like just snapshot tests, right?

143
00:10:10.630 --> 00:10:12.961
That given this input,
it gives you this output.

144
00:10:12.961 --> 00:10:13.668
&gt;&gt; Speaker 2: Yeah.
&gt;&gt; Brian Holt: And

145
00:10:13.668 --> 00:10:17.417
it would be a lot easier to write
than when I wrote it here for you.

146
00:10:17.417 --> 00:10:20.260
But, yeah, totally, it is really cool.

147
00:10:20.260 --> 00:10:22.022
How do we feel about this?

148
00:10:22.022 --> 00:10:24.329
Conceptually, do we follow
what happened here?

149
00:10:26.803 --> 00:10:30.974
&gt;&gt; Brian Holt: Cool, I will say that this
used to be a question that Google asked on

150
00:10:30.974 --> 00:10:32.250
their interviews.

151
00:10:32.250 --> 00:10:33.250
I don't know if they still ask it.

152
00:10:33.250 --> 00:10:34.337
They probably still do.

153
00:10:34.337 --> 00:10:37.270
Which probably means I'm gonna get
a lawsuit by the time I go home.

154
00:10:37.270 --> 00:10:40.976
That's fine, I don't care.

155
00:10:40.976 --> 00:10:45.712
But a lot of these questions kind of like
to tie all these things in together,

156
00:10:45.712 --> 00:10:48.450
which I think is also useful for
you to know.

