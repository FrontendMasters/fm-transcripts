WEBVTT

1
00:00:00.760 --> 00:00:03.870
&gt;&gt; Brian Holt: So the first thing
we're gonna need is some sort of

2
00:00:03.870 --> 00:00:06.040
internal data structure
to keep track of this.

3
00:00:07.540 --> 00:00:12.610
I chose season array because
that's a good way to model it.

4
00:00:12.610 --> 00:00:15.580
Something else that kind of just bares
mentioning before we move on as well,

5
00:00:15.580 --> 00:00:19.780
is I'm teaching you the general
principles here, and

6
00:00:19.780 --> 00:00:23.020
I'm teaching you in the simplest way
hopefully that you can understand it.

7
00:00:23.020 --> 00:00:26.130
And I'm not teaching you the most
efficient ways of doing things right?

8
00:00:26.130 --> 00:00:29.860
So if you were actually going to implement
these in production for your code base,

9
00:00:29.860 --> 00:00:33.970
you'd probably go find more optimized
versions of these than I'm giving

10
00:00:33.970 --> 00:00:38.660
you the training wheels version, not
necessarily the motorcycle version okay?

11
00:00:38.660 --> 00:00:41.190
So with that being said,

12
00:00:41.190 --> 00:00:45.670
once you understand these, going to the
optimized versions will be the next step.

13
00:00:45.670 --> 00:00:47.282
It'll be something that
you'll be prepared to do.

14
00:00:47.282 --> 00:00:54.500
Okay, so, this is a ES6 class, right?

15
00:00:54.500 --> 00:00:57.090
They're new as of 2015 for JavaScripts.

16
00:00:59.490 --> 00:01:03.630
You could put in here a constructor, which
I would imagine many people probably did,

17
00:01:03.630 --> 00:01:05.660
which is a totally
acceptable way of doing it.

18
00:01:05.660 --> 00:01:07.950
I am lazy, so I don't want to do that.

19
00:01:07.950 --> 00:01:10.800
So I'm going to use what's
called class properties,

20
00:01:10.800 --> 00:01:16.200
which are new to java script as well,
which I can just do like this, new array

21
00:01:19.164 --> 00:01:24.831
&gt;&gt; Brian Holt: 100 and fill it with zeros.

22
00:01:24.831 --> 00:01:27.670
So this is going to be creating something

23
00:01:27.670 --> 00:01:29.760
on the instance of this
particular BloomFilter.

24
00:01:29.760 --> 00:01:34.520
That's going to be _array which just
means, to me means private, right?

25
00:01:34.520 --> 00:01:36.360
Underscore doesn't mean
anything particular.

26
00:01:37.400 --> 00:01:40.810
It's just a convention in JavaScript that
if something is private to your array,

27
00:01:40.810 --> 00:01:44.970
that you just put
an underscore in front of it.

28
00:01:44.970 --> 00:01:48.500
There's a new spec coming
out where you could put #,

29
00:01:48.500 --> 00:01:50.080
where it would actually be private.

30
00:01:50.080 --> 00:01:54.770
I don't believe that works yet,
so just know that's coming.

31
00:01:54.770 --> 00:01:58.100
Anyway, _array okay, so

32
00:01:58.100 --> 00:02:02.280
now I have an array that's 100 long and
filled with 0s, cool?

33
00:02:04.100 --> 00:02:08.860
Cool, okay,
then we're going to add an add function.

34
00:02:08.860 --> 00:02:10.460
It's going to take in some sort of string.

35
00:02:13.310 --> 00:02:14.850
&gt;&gt; Brian Holt: Let's move
that up a little bit.

36
00:02:16.400 --> 00:02:20.201
And this particular thing is just
going to go through each one of

37
00:02:20.201 --> 00:02:22.791
this._array[h1(string)] = 1.

38
00:02:22.791 --> 00:02:28.673
And we're just gonna do that a couple

39
00:02:28.673 --> 00:02:33.429
of times but with h2 and h3.

40
00:02:36.459 --> 00:02:39.480
&gt;&gt; Brian Holt: And that's it,
we might return true or something there.

41
00:02:39.480 --> 00:02:41.929
I don't know, whatever you
feel like doing, I don't care.

42
00:02:41.929 --> 00:02:44.110
So [LAUGH] not the point.

43
00:02:44.110 --> 00:02:46.983
Okay, and
then we're gonna have a contains function.

44
00:02:49.129 --> 00:02:50.930
&gt;&gt; Brian Holt: That's
going to take in a string.

45
00:02:54.240 --> 00:02:59.342
&gt;&gt; Brian Holt: Take in a string, and
it's just going to return to you is it

46
00:02:59.342 --> 00:03:05.590
in the same spot in h1, h2, and
h3 for the same string, right?

47
00:03:05.590 --> 00:03:07.610
So, the way I chose to do this,

48
00:03:07.610 --> 00:03:12.145
which it's up to you how you choose
to do that, double exclamation point.

49
00:03:12.145 --> 00:03:15.740
Right?
Which is going to basically coerce.

50
00:03:15.740 --> 00:03:18.670
And if you want to find out more about
coercion, watch Kyle Simpson's stuff,

51
00:03:18.670 --> 00:03:20.880
cuz he knows all about it.

52
00:03:20.880 --> 00:03:22.170
Anyway, weird stuff.

53
00:03:22.170 --> 00:03:24.980
Suffice to say, if something is truthy,
it will make it true.

54
00:03:24.980 --> 00:03:27.250
If something is falsey,
it will make it false.

55
00:03:28.650 --> 00:03:33.280
And then I'm just gonna check
this array [h1(string)].

56
00:03:33.280 --> 00:03:38.525
I'm just gonna copy and paste that cuz
that's just a whole lot of characters.

57
00:03:41.513 --> 00:03:46.360
&gt;&gt; Brian Holt: And,
&gt;&gt; Brian Holt: I will put

58
00:03:46.360 --> 00:03:50.529
two here and h3 there.

59
00:03:53.870 --> 00:04:00.360
Right so I'm asking is it one at the h1
spot, the h2 spot and the h3 spot.

60
00:04:01.560 --> 00:04:02.060
Yeah.

61
00:04:03.360 --> 00:04:03.860
Cool.

62
00:04:05.410 --> 00:04:06.930
That's what that double and is.

63
00:04:11.120 --> 00:04:15.700
Something that always bothers people
when I'm using this particular font,

64
00:04:15.700 --> 00:04:19.940
this font is called fear of code,
and it has ligatures, right.

65
00:04:19.940 --> 00:04:22.120
So these double ands
kind of mushed together,

66
00:04:22.120 --> 00:04:23.440
same with these exclamation points.

67
00:04:23.440 --> 00:04:30.150
The most obvious one, if I put,
that looks like an arrow, right?

68
00:04:30.150 --> 00:04:35.130
But, in reality it's an equal space and
an angle bracket put together.

69
00:04:35.130 --> 00:04:39.250
Congelateurs there are bunch
of folks that use them.

70
00:04:39.250 --> 00:04:41.310
It makes my code more readable and
I've gotten so

71
00:04:41.310 --> 00:04:43.610
used to it that I can't
separate myself from it.

72
00:04:45.670 --> 00:04:47.700
Deal with it, I suppose.

73
00:04:49.110 --> 00:04:49.700
Cool.

74
00:04:49.700 --> 00:04:52.599
So, I guess we can run this and
see if it works.

75
00:04:56.460 --> 00:04:58.320
&gt;&gt; Brian Holt: Maybe, and we passed.

76
00:05:00.050 --> 00:05:00.870
Any questions?

77
00:05:00.870 --> 00:05:02.260
Or I suppose, what questions do you have?

78
00:05:09.024 --> 00:05:12.076
&gt;&gt; Brian Holt: No, I nailed it, cool.

79
00:05:12.076 --> 00:05:16.076
Perfectly explained.

80
00:05:16.076 --> 00:05:22.520
Okay,
&gt;&gt; Brian Holt: So that's bloom filters.

81
00:05:22.520 --> 00:05:25.490
Hopefully you kind of see why
this data structure could be

82
00:05:25.490 --> 00:05:27.500
potentially useful for you.

83
00:05:27.500 --> 00:05:30.220
This was invented,
I believe it's like the 70s, right?

84
00:05:30.220 --> 00:05:32.030
Just like everything that
I'm talking about today,

85
00:05:32.030 --> 00:05:33.800
not invented any time recently.

86
00:05:35.290 --> 00:05:38.308
What is cool though is
this is pretty simple.

87
00:05:38.308 --> 00:05:44.086
It's not, I would judge that it
wasn't terribly difficult for

88
00:05:44.086 --> 00:05:47.940
me to learn, which I think is really cool.

89
00:05:49.020 --> 00:05:52.490
There are now more efficient ways
of doing something similar to this.

90
00:05:52.490 --> 00:05:56.160
There are bloom filters that you
can like remove things from and

91
00:05:56.160 --> 00:05:57.370
that are more efficient.

92
00:05:58.960 --> 00:06:02.180
There's many flavors of this,

93
00:06:02.180 --> 00:06:03.720
this just happens to be one
of the more simpler ones.

94
00:06:03.720 --> 00:06:06.580
But there are similar data structures
that accomplish similar things in

95
00:06:06.580 --> 00:06:08.500
more efficient ways.

96
00:06:08.500 --> 00:06:14.000
If that's something you find yourself
in your projects trying to implement

97
00:06:14.000 --> 00:06:14.900
do some research.

98
00:06:14.900 --> 00:06:15.746
That's all I'm trying to say.

99
00:06:15.746 --> 00:06:22.070
Cool, and again, the completed code

100
00:06:22.070 --> 00:06:26.890
is always down here if you get stuck, if
you want to see how I personally did it.

101
00:06:26.890 --> 00:06:30.014
That's why I have the second laptop up
here, so I don't forget how I did it.

102
00:06:30.014 --> 00:06:32.790
[LAUGH] So please, again,

103
00:06:32.790 --> 00:06:36.580
this is not a test, this is not cheating,
this is just learning.

104
00:06:36.580 --> 00:06:41.570
So just make sure you're doing whatever
you need to do to learn the best.

105
00:06:44.130 --> 00:06:48.395
&gt;&gt; Brian Holt: But you will fail the
course, I'm just telling you that there.

106
00:06:48.395 --> 00:06:50.150
[LAUGH] Yeah.

107
00:06:51.720 --> 00:06:55.880
&gt;&gt; Speaker 2: Where is defined h1,
h2 used in array.

108
00:06:57.320 --> 00:06:59.140
&gt;&gt; Brian Holt: Where is h1 defined?

109
00:06:59.140 --> 00:06:59.770
Is that the question?

110
00:07:02.650 --> 00:07:03.410
&gt;&gt; Speaker 2: I believe so.

111
00:07:03.410 --> 00:07:04.040
&gt;&gt; Brian Holt: Okay.

112
00:07:04.040 --> 00:07:07.530
Well.
Let's talk about h1.

113
00:07:07.530 --> 00:07:09.540
So, we have this thing here call,

114
00:07:09.540 --> 00:07:13.520
this is the hashing function
that I wrote to just be.

115
00:07:13.520 --> 00:07:14.560
Something really quick.

116
00:07:14.560 --> 00:07:22.550
If you go in here to, settings.

117
00:07:22.550 --> 00:07:26.150
Okay so this is the settings for
this particular code pin.

118
00:07:26.150 --> 00:07:29.290
Here in the JavaScript I got
a bunch of stuff I'm including.

119
00:07:29.290 --> 00:07:36.450
One of them is this XXhash.nin.js
this is just a library off of NPM.

120
00:07:36.450 --> 00:07:42.280
You can NPM install XX-JS and
this will install this function.

121
00:07:43.570 --> 00:07:47.580
It's just a fast hashing function
that I did not have to write, right?

122
00:07:47.580 --> 00:07:48.260
That's all it is.

123
00:07:49.440 --> 00:07:52.420
So that's where this gets defined.

124
00:07:52.420 --> 00:07:55.120
They're just seed values, so

125
00:07:55.120 --> 00:07:57.770
that the randomness is more spread out and
different.

126
00:07:59.220 --> 00:08:04.280
And then this is just a bunch of
stuff to make it work, so trial and

127
00:08:04.280 --> 00:08:05.830
error, that's how I figured it out.

128
00:08:05.830 --> 00:08:09.380
[LAUGH] That's a good question, though.

129
00:08:09.380 --> 00:08:14.838
Also if you look there, you can see,
&gt;&gt; Brian Holt: Yeah,

130
00:08:14.838 --> 00:08:19.250
this is all the stuff that's
being loaded for the Jasmine.

131
00:08:21.070 --> 00:08:23.480
Same thing with the CSS,
it's been loaded for the Jasmine as well.

132
00:08:23.480 --> 00:08:25.030
So that's where all of that came from.

133
00:08:29.179 --> 00:08:32.666
&gt;&gt; Brian Holt: Since we're on
the wavelength of codepen things just so

134
00:08:32.666 --> 00:08:37.264
you know, you can always look at
ViewCompileJS if you actually want to see

135
00:08:37.264 --> 00:08:39.510
what the battle is compiling it to.

136
00:08:39.510 --> 00:08:44.830
Sometimes it's helpful, usually not but
it's there if you want to take a look.

137
00:08:44.830 --> 00:08:47.930
And then I'm obsessive about
using prettier on everything.

138
00:08:47.930 --> 00:08:50.700
If you've watched my other
courses you're aware of that.

139
00:08:50.700 --> 00:08:53.920
If you click Tidy JS,

140
00:08:53.920 --> 00:08:59.190
it will tidy everything up for
you, using prettier, right?

141
00:08:59.190 --> 00:09:02.710
This became a lot more readable than
my crazy stuff that I had before.

142
00:09:02.710 --> 00:09:06.880
So, just be aware that
Tidy JS is up there.

143
00:09:06.880 --> 00:09:07.500
It's really useful.

144
00:09:07.500 --> 00:09:08.360
I would suggest it.

145
00:09:10.902 --> 00:09:14.089
&gt;&gt; Brian Holt: Okay, good question.

