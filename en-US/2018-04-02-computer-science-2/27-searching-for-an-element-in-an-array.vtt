WEBVTT

1
00:00:03.380 --> 00:00:05.926
&gt;&gt; Brain Holt: Searching for
elements in an array.

2
00:00:05.926 --> 00:00:10.348
What we're gonna do here is we're gonna
have some sort of item that we're looking

3
00:00:10.348 --> 00:00:12.720
for in some group, some array, right?

4
00:00:12.720 --> 00:00:15.780
There's kind of two strategies
that we can look at doing this.

5
00:00:17.160 --> 00:00:20.990
The first is literally a while loop
where you're going through and

6
00:00:20.990 --> 00:00:24.350
checking is it this item, is it this item,
is it this item, is it this item?

7
00:00:24.350 --> 00:00:26.293
Eventually, that question is
gonna either be yes or no.

8
00:00:26.293 --> 00:00:29.815
If it's never yes,
then you never found it.

9
00:00:29.815 --> 00:00:31.650
If it is yes,
then you just reach for that item.

10
00:00:31.650 --> 00:00:34.900
This is called a linear search,
the Big O of this would be N, right?

11
00:00:34.900 --> 00:00:39.083
Because potentially you could
go through every item and

12
00:00:39.083 --> 00:00:42.823
it would not be there or
it could be the first item.

13
00:00:42.823 --> 00:00:49.872
So it has a really random or full
distribution of best case and worse case.

14
00:00:49.872 --> 00:00:52.824
If there is some sort
of order to the array,

15
00:00:52.824 --> 00:00:57.334
then you can do something called
binary search which is log n which

16
00:00:57.334 --> 00:01:00.950
means it's much,
much more efficient than just n.

17
00:01:02.180 --> 00:01:04.594
So what you do is you're gonna do it more
or less like you do a phone book, right?

18
00:01:04.594 --> 00:01:08.684
You're gonna open the middle and
you'll say, is it n, right, or is it n?

19
00:01:08.684 --> 00:01:12.780
And then you're gonna say no and so,
you're gonna start bifurcating it, or

20
00:01:12.780 --> 00:01:14.860
dividing it in half until eventually,

21
00:01:14.860 --> 00:01:17.900
you're gonna land on the item
that you were looking for.

22
00:01:19.330 --> 00:01:20.950
All right, so
I kind of diagrammed it out here.

23
00:01:20.950 --> 00:01:26.301
If you are searching for 12, you are gonna
start in the middle and say is it 19?

24
00:01:26.301 --> 00:01:27.200
No, is it ten?

25
00:01:27.200 --> 00:01:28.367
No, is it 12?

26
00:01:28.367 --> 00:01:31.022
Yes, right, so
you just kind of keep going back.

27
00:01:31.022 --> 00:01:31.879
Just adding half or

28
00:01:31.879 --> 00:01:35.534
subtracting half until eventually you land
on the item that you are looking for.

29
00:01:38.012 --> 00:01:41.185
&gt;&gt; Brain Holt: So let's just go ahead and
do an exercise real quick.

30
00:01:41.185 --> 00:01:46.115
And give you an array, the first one,
the linear search array,

31
00:01:46.115 --> 00:01:49.323
it's gonna be in no order or whatsoever.

32
00:01:49.323 --> 00:01:51.766
And I want you to just go through and
find the item that you're looking for

33
00:01:51.766 --> 00:01:52.297
and return it.

34
00:01:54.459 --> 00:01:57.957
&gt;&gt; Brain Holt: Excuse me, for
the second one for binary search,

35
00:01:57.957 --> 00:02:01.789
you're going to go through and
it is an ordered list and

36
00:02:01.789 --> 00:02:07.224
you're gonna do a binary search to find
which item that you're looking for.

37
00:02:07.224 --> 00:02:14.400
So I'll give you a second to do that,
the first one takes about 5 lines of code.

38
00:02:14.400 --> 00:02:18.030
The second one takes maybe about
15 lines of code to accomplish.

