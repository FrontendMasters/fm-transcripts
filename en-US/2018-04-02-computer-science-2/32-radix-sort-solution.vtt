WEBVTT

1
00:00:00.300 --> 00:00:03.909
&gt;&gt; Brian Holt: Coming here,
this takes about 50 lines of code to do.

2
00:00:05.889 --> 00:00:09.510
&gt;&gt; Brian Holt: So the first thing that you
want to code up here is you wanna do like

3
00:00:09.510 --> 00:00:12.686
a getDigit,
cuz you're gonna be using getDigit a lot.

4
00:00:12.686 --> 00:00:18.711
So function getDigit (number) place and

5
00:00:18.711 --> 00:00:21.726
the longest number.

6
00:00:24.762 --> 00:00:28.121
&gt;&gt; Brian Holt: So the number's
just gonna be the actual number.

7
00:00:28.121 --> 00:00:31.461
The place is, I want the zeroes,
the tens, the whatever.

8
00:00:31.461 --> 00:00:36.156
And the longest number is going to be the
be the longest number in the entire array

9
00:00:36.156 --> 00:00:39.813
that you're sorting, right,
because that's important.

10
00:00:39.813 --> 00:00:43.492
The reason why that's important
is like if I get 10 and

11
00:00:43.492 --> 00:00:48.437
I'm sorting in the 3 place,
I'm just gonna give you back the 0, right?

12
00:00:49.480 --> 00:00:56.140
So const string, so this is far more
easily done using string manipulation.

13
00:00:56.140 --> 00:01:01.736
So I'm just gonna say number.toString.

14
00:01:01.736 --> 00:01:07.013
Const size = string.length and

15
00:01:07.013 --> 00:01:12.101
then here, I'm gonna say const

16
00:01:12.101 --> 00:01:17.002
mod = longestNumber- size,

17
00:01:17.002 --> 00:01:21.370
so,
&gt;&gt; Brian Holt: The only reason that I'm

18
00:01:21.370 --> 00:01:26.306
doing that is if I'm looking at
something that's in the ones place,

19
00:01:26.306 --> 00:01:33.170
if 1,000 is the largest number, I need to
be looking at the second element, right?

20
00:01:33.170 --> 00:01:36.010
I can't be looking at the fourth element,
because that would be out of index.

21
00:01:36.010 --> 00:01:39.840
That's what the mod is for is basically,
the longest number minus the size to make

22
00:01:39.840 --> 00:01:43.090
sure we're getting the last index, right,
so that everything lines up correctly.

23
00:01:45.270 --> 00:01:53.657
So that's why you say return
string [place- mod], or 0.

24
00:01:53.657 --> 00:01:56.543
Cuz if that's out of bounds,
then you just return 0, right?

25
00:02:00.034 --> 00:02:02.556
&gt;&gt; Brian Holt: So
that's what that getDigit function does.

26
00:02:05.334 --> 00:02:12.697
&gt;&gt; Brian Holt: Then here,
&gt;&gt; Brian Holt: In radixSort.

27
00:02:15.523 --> 00:02:20.040
&gt;&gt; Brian Holt: So const longestnumber
&gt;&gt; Brian Holt: Equals

28
00:02:20.040 --> 00:02:24.300
findLongestnumber, that's,
write that up too.

29
00:02:24.300 --> 00:02:30.949
FindLongestnumber of the array, so
I think I have that up here, yep.

30
00:02:33.263 --> 00:02:34.634
&gt;&gt; Brian Holt: There are more
efficient ways of doing this.

31
00:02:34.634 --> 00:02:39.443
This is just kind the instructional

32
00:02:39.443 --> 00:02:44.097
way of LongestNumber(array).

33
00:02:44.097 --> 00:02:47.630
So let longest = 0.

34
00:02:47.630 --> 00:02:50.108
Then we're just going to go through and

35
00:02:50.108 --> 00:02:53.196
find which one two string
length is the longest.

36
00:02:53.196 --> 00:02:58.470
So const current,

37
00:02:59.788 --> 00:03:04.072
let i = 0; i &lt;

38
00:03:04.072 --> 00:03:11.993
array.length; i++).

39
00:03:11.993 --> 00:03:14.059
Okay and then here I'm gonna say const

40
00:03:14.059 --> 00:03:19.328
currentLength
&gt;&gt; Brian Holt: Equals

41
00:03:19.328 --> 00:03:26.221
array[i].toString().length, okay?

42
00:03:26.221 --> 00:03:29.170
And longest is equal to currentLength.

43
00:03:32.720 --> 00:03:36.860
So if it's longer than the current length,
then we're just gonna make it the longest

44
00:03:36.860 --> 00:03:40.880
one, so, if it is,
then it's equal to current length.

45
00:03:40.880 --> 00:03:43.900
Otherwise, it's just whatever
it was previously longest.

46
00:03:46.790 --> 00:03:49.000
Okay, and then after that,
we return the longest number.

47
00:03:50.200 --> 00:03:52.605
Eventually this will be like five, right.

48
00:03:52.605 --> 00:03:55.629
If it was 10,000 that would be the longest
one then we would return five here.

49
00:03:57.010 --> 00:03:58.990
Okay, so that's what longest number is.

50
00:03:58.990 --> 00:04:02.297
That's what we're gonna use there,

51
00:04:02.297 --> 00:04:07.265
then I'm gonna do buckets,
const buckets = new array.

52
00:04:11.881 --> 00:04:15.762
&gt;&gt; Brian Holt: 10, cuz that's how
many it could be and actually,

53
00:04:15.762 --> 00:04:18.620
there's an even easier way to do this.

54
00:04:20.866 --> 00:04:26.589
&gt;&gt; Brian Holt: Array, so
you can do Array.from{length: 10} and

55
00:04:26.589 --> 00:04:31.945
then you give it a map function
just like you would for

56
00:04:31.945 --> 00:04:35.982
a map reduce and you return a new array.

57
00:04:40.383 --> 00:04:41.827
&gt;&gt; Brian Holt: So
what buckets is going to be,

58
00:04:41.827 --> 00:04:44.780
it's going to be an array of 10 arrays,
right.

59
00:04:44.780 --> 00:04:45.572
That's what this does.

60
00:04:49.722 --> 00:04:54.670
&gt;&gt; Brian Holt: Okay,
then here I'm gonna say for(let i = 0).

61
00:04:54.670 --> 00:04:58.100
Sorry, (let i = longestNumber),

62
00:04:58.100 --> 00:05:03.130
cuz that's how many iterations
we're going to have.

63
00:05:03.130 --> 00:05:08.037
longestNumber- 1, i is greater than or

64
00:05:08.037 --> 00:05:11.399
equal to 0, and i Okay, and

65
00:05:11.399 --> 00:05:17.163
then you're gonna say while(array.length)

66
00:05:21.668 --> 00:05:26.143
&gt;&gt; Brian Holt: const
current = array.shift, so

67
00:05:26.143 --> 00:05:31.221
I'm gonna take this out of the current.

68
00:05:31.221 --> 00:05:32.980
Where did I set current?

69
00:05:34.670 --> 00:05:38.230
That's what I'm doing, const current
is the first item in the array.

70
00:05:38.230 --> 00:05:46.891
Then I'm gonna say
buckets(getDigit(current,

71
00:05:46.891 --> 00:05:56.420
i, and
longest number)).push(current) right?

72
00:05:56.420 --> 00:05:58.610
So what this is going to do is
it's going to go through and

73
00:05:58.610 --> 00:06:01.890
bucket every single number based on
which bucket it should be in, right?

74
00:06:04.030 --> 00:06:04.950
Cool, does that make sense?

75
00:06:06.200 --> 00:06:08.620
So if this one was 801 and

76
00:06:08.620 --> 00:06:12.050
we're looking at the 10's this is
gonna go in the 0 bucket, right?

77
00:06:12.050 --> 00:06:13.810
So this is gonna give me back 0.

78
00:06:13.810 --> 00:06:17.010
This is going to push an 801
into that bucket in order.

79
00:06:17.010 --> 00:06:19.498
The order here is really important,
otherwise, it's not sorting.

80
00:06:22.373 --> 00:06:23.144
&gt;&gt; Brian Holt: Okay.

81
00:06:27.151 --> 00:06:31.934
&gt;&gt; Brian Holt: Now, what I'm gonna do for
each one of those as I'm gonna say for

82
00:06:31.934 --> 00:06:33.374
(let j = 0; ).

83
00:06:33.374 --> 00:06:37.878
j &lt; 10; j++.

84
00:06:37.878 --> 00:06:40.340
I'm gonna go through and
dequeue each one of those.

85
00:06:40.340 --> 00:06:47.646
I'm going to say while
(buckets[j].length),

86
00:06:47.646 --> 00:06:55.120
I'm gonna say
array.push(buckets[j]) shift.

87
00:06:58.300 --> 00:07:01.086
So I'm just gonna go and
dqueue all of those into the array.

88
00:07:12.581 --> 00:07:17.311
&gt;&gt; Brian Holt: Then here,
if you wanna see the cool visualization

89
00:07:17.311 --> 00:07:20.640
you just call snapshot(array).

90
00:07:20.640 --> 00:07:25.061
Cool, I think that should be
everything that we need to see.

91
00:07:25.061 --> 00:07:28.983
Let's take a look and see if what happens.

92
00:07:32.503 --> 00:07:33.440
&gt;&gt; Brian Holt: And it passes.

93
00:07:34.680 --> 00:07:39.172
So you can see here that nothing
is in order just kidding.

94
00:07:39.172 --> 00:07:44.350
It goes the one down here at the bottom
is everything is in order, yeah?

95
00:07:44.350 --> 00:07:46.500
&gt;&gt; Student: What is the time
complexity of this?

96
00:07:46.500 --> 00:07:49.660
&gt;&gt; Brian Holt: So this one's a little
bit more difficult to describe.

97
00:07:49.660 --> 00:07:55.520
If we go to Big-O cheat sheet, great
website, good for these sorts of things.

98
00:07:55.520 --> 00:08:02.731
If we go down to Radix Sort,
it has this thing called k.

99
00:08:02.731 --> 00:08:08.211
So that's what I was referring to is it's
not really a apples to apples comparison.

100
00:08:08.211 --> 00:08:13.043
If you're doing something like Heapsort,
or Quicksort, or Mergesort,

101
00:08:13.043 --> 00:08:15.660
it depends on how well you can bucket it.

102
00:08:15.660 --> 00:08:19.652
So that's what the case represents,
is how many buckets you can have, right?

103
00:08:19.652 --> 00:08:22.091
So in this particular case,
I had ten buckets, but

104
00:08:22.091 --> 00:08:25.462
there's a lot more complexity that
it's kinda trapped in that case.

105
00:08:25.462 --> 00:08:30.800
So it depends on how you can bucket it and
those sorts of things.

106
00:08:30.800 --> 00:08:33.120
So MK is the answer to that.

107
00:08:34.790 --> 00:08:35.630
I'm not gonna get to much more

108
00:08:35.630 --> 00:08:37.580
into it because I don't really
understand it much more than that.

109
00:08:41.280 --> 00:08:42.890
And if you wanna see what it looks like.

110
00:08:42.890 --> 00:08:46.817
It looks a little bit cooler in my opinion
when you have a lot more numbers, so

111
00:08:46.817 --> 00:08:51.010
let's do this.

112
00:08:51.010 --> 00:08:53.934
By the way,
you can only run one of these at a time,

113
00:08:53.934 --> 00:08:56.313
just because I wrote it really quickly.

114
00:08:56.313 --> 00:08:59.620
It's the fault of the visualization thing,
not the fault of Radix sort.

115
00:08:59.620 --> 00:09:01.680
You can Radix sorts a lot of time.

116
00:09:01.680 --> 00:09:06.492
So what's pretty cool is, again,
after the first iteration,

117
00:09:06.492 --> 00:09:10.498
you can see all the 0s are up front,
then all the 3s,

118
00:09:10.498 --> 00:09:13.722
then the 6s and blah, blah, blah, etc.

119
00:09:13.722 --> 00:09:18.064
And then the second time you can
go through the 01, 02, 05, and

120
00:09:18.064 --> 00:09:19.843
be like 19, 20, 22.

121
00:09:19.843 --> 00:09:23.233
So you can see it kinda gets slowly more
and more sorted based on the 0's place,

122
00:09:23.233 --> 00:09:24.093
the 10's place,

123
00:09:24.093 --> 00:09:27.241
all that kind of stuff until eventually
everything is actually in order.

124
00:09:30.484 --> 00:09:31.853
&gt;&gt; Brian Holt: Pretty neat in my opinion.

125
00:09:34.704 --> 00:09:38.191
&gt;&gt; Brian Holt: Cool, whoever asked
that question, it was a good question,

126
00:09:38.191 --> 00:09:39.740
the complexity question.

