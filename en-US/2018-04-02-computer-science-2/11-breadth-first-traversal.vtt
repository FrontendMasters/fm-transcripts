WEBVTT

1
00:00:01.460 --> 00:00:03.120
&gt;&gt; Brian Holt: This was
depth first traversal.

2
00:00:03.120 --> 00:00:06.080
They were kinda variations on
the idea of depth first traversal.

3
00:00:06.080 --> 00:00:10.010
But something that you wanna keep
in mind with depth first traversal

4
00:00:10.010 --> 00:00:12.680
is what you're trying to do is
you're actually trying to get

5
00:00:12.680 --> 00:00:17.080
as far away from the root node as
possible as quickly as possible.

6
00:00:17.080 --> 00:00:20.070
You're trying to process nodes
more towards the leaves.

7
00:00:20.070 --> 00:00:24.021
When I say a leaf I mean, something like
down here at the bottom of the array.

8
00:00:24.021 --> 00:00:25.780
Something that has no children at all.

9
00:00:25.780 --> 00:00:28.410
That's what depth first
traversal really excels at is

10
00:00:28.410 --> 00:00:31.930
getting as to leaves first getting
away from the root node as possible.

11
00:00:34.840 --> 00:00:37.360
Getting away from the root
node as fast as possible.

12
00:00:37.360 --> 00:00:41.260
That's not always how you want
to process a tree, though.

13
00:00:41.260 --> 00:00:44.710
Sometimes you wanna process
the nodes closest to the root

14
00:00:44.710 --> 00:00:45.770
as quickly as possible.

15
00:00:47.120 --> 00:00:51.280
So that's when we enter into something
called breadth first traversal.

16
00:00:52.380 --> 00:00:55.550
So in this particular case what we
wanna do is we wanna process 8,

17
00:00:55.550 --> 00:00:58.136
and then we wanna process 3, and then 10.

18
00:00:58.136 --> 00:01:01.944
So we wanna be processing things,
almost like one layer at a time.

19
00:01:01.944 --> 00:01:05.740
We wanna be processing things
closer to the root node.

20
00:01:05.740 --> 00:01:08.500
And depends on what kinda problem
we're trying to solve that we'll

21
00:01:08.500 --> 00:01:12.380
choose different algorithms, but that's
the tradeoff that we'd be making there.

22
00:01:12.380 --> 00:01:15.700
Depth first as like I wanna get away
from the root node, breadth first,

23
00:01:15.700 --> 00:01:20.577
I wanna stay close to the root node.
&gt;&gt; Brian Holt: So

24
00:01:20.577 --> 00:01:25.294
if we're going down here, yeah,
let's actually talk about what

25
00:01:25.294 --> 00:01:29.690
order we would get out of breadth
first traversal in this BFC.

26
00:01:29.690 --> 00:01:33.750
Again, typically you would not use breadth
first on a BFC, that's doesn't really

27
00:01:33.750 --> 00:01:37.460
make a ton of sense but to illustrate
what's going on here, let's talk about it.

28
00:01:37.460 --> 00:01:42.628
So if I was gonna process this tree
using breadth first traversal,

29
00:01:42.628 --> 00:01:49.197
the order I would get out of it would
be 8, 3 10, 1, 6, 14, 4, 7, 13.

30
00:01:49.197 --> 00:01:52.620
You just go one layer at
a time left to right.

31
00:01:53.680 --> 00:01:54.280
Make sense?

32
00:01:56.090 --> 00:01:58.050
So conceptually I think that makes sense.

33
00:01:58.050 --> 00:02:01.310
The actual implementation
of it is interesting.

34
00:02:01.310 --> 00:02:03.880
We'll go with that.

35
00:02:03.880 --> 00:02:09.333
We're gonna use our old friend
the queue if you don't remember queues,

36
00:02:09.333 --> 00:02:14.750
again, that's talked about in part one but
to give you the short version of a queu,

37
00:02:14.750 --> 00:02:19.090
it's like a que for those of you that
are [LAUGH] British and a line for

38
00:02:19.090 --> 00:02:20.789
the rest of us that are in the US.

39
00:02:22.100 --> 00:02:23.620
First in, first out.

40
00:02:23.620 --> 00:02:26.707
So if I enter the line first to
go on the ride at Disneyland,

41
00:02:26.707 --> 00:02:29.542
I'm gonna hopefully be
the first person on the ride.

42
00:02:29.542 --> 00:02:32.316
That's kinda the same idea here is
when you put things in the queue,

43
00:02:32.316 --> 00:02:35.333
the longer that it's been in there,
the more towards the front that it's

44
00:02:35.333 --> 00:02:38.372
gonna get until eventually in the first
in the line, and then it would go.

45
00:02:38.372 --> 00:02:39.799
That's what a queue is.

46
00:02:42.090 --> 00:02:46.150
What you're going to do when
you're processing something using

47
00:02:46.150 --> 00:02:50.520
breadth first traversal is you're
going to add eight into the queue.

48
00:02:51.530 --> 00:02:57.280
Then what you're gonna pop the first
thing dequeue, I say papa.

49
00:02:57.280 --> 00:02:58.223
Well, let's go with dequeue.

50
00:02:58.223 --> 00:03:02.600
You're gonna dequeue first thing
off at the queue and process it.

51
00:03:02.600 --> 00:03:06.636
Then you're going to add its left
child and right child to the queue.

52
00:03:06.636 --> 00:03:09.066
And that's what you're
going to keep doing.

53
00:03:09.066 --> 00:03:10.740
Is you're gonna just take
something off the queue,

54
00:03:10.740 --> 00:03:14.960
add the left child, add the right child
to the queue, and then process the node.

55
00:03:14.960 --> 00:03:17.980
So I'm gonna add eight.

56
00:03:17.980 --> 00:03:18.880
I'll process that.

57
00:03:18.880 --> 00:03:21.490
And I'll add 3 and 10 in there.

58
00:03:21.490 --> 00:03:25.820
Then I'll go down to 3, cuz I'll
dequeue the next one which will be 3.

59
00:03:25.820 --> 00:03:28.665
i'm gonna add 1 and
6 to the queue, process 3.

60
00:03:28.665 --> 00:03:32.520
And then at that point,
I'm gonna dequeue the next thing.

61
00:03:32.520 --> 00:03:36.423
What is the next thing in the queue?

62
00:03:36.423 --> 00:03:37.410
10, right?

63
00:03:37.410 --> 00:03:40.120
Because I queued that up here.

64
00:03:40.120 --> 00:03:46.172
So I'm gonna go down over here to 10,
I'm gonna process 10 and then I'm going to

65
00:03:46.172 --> 00:03:50.420
unqueue its left and right child, it has
no left child, but it has a right child.

66
00:03:50.420 --> 00:03:52.415
So I'm gonna unqueue 14.

67
00:03:52.415 --> 00:03:56.957
Then I'm going to dequeue
the next thing in the queue so

68
00:03:56.957 --> 00:04:00.621
what's the next thing I'm gonna process?

69
00:04:00.621 --> 00:04:07.669
1, because I unqueue that over here at 3.

70
00:04:07.669 --> 00:04:09.130
Does that make sense?

71
00:04:09.130 --> 00:04:10.176
Yeah, go ahead.
&gt;&gt; Speaker 2: So

72
00:04:10.176 --> 00:04:15.106
will you just clarify the order of
adding to a queue, dequeuing and

73
00:04:15.106 --> 00:04:18.087
processing again, what?
&gt;&gt; Brian Holt: I'm probably mixing it up

74
00:04:18.087 --> 00:04:19.275
cuz it really doesn't matter.

75
00:04:19.275 --> 00:04:24.197
[LAUGH] So as opposed to the depth
first and which is probably where

76
00:04:24.197 --> 00:04:29.130
this is getting a little muddy,
that's my fault, I'm sorry.

77
00:04:29.130 --> 00:04:33.815
It doesn't actually really matter because
you're gonna be processing something, and

78
00:04:33.815 --> 00:04:36.810
then you're gonna be enqueueing
both of its children.

79
00:04:36.810 --> 00:04:39.110
And then you'll just go
into the next iteration.

80
00:04:39.110 --> 00:04:41.900
And what order that happens in
your particular function doesn't

81
00:04:41.900 --> 00:04:42.550
particularly matter.

82
00:04:44.500 --> 00:04:45.816
Is that a sufficiently vague answer?

83
00:04:45.816 --> 00:04:50.680
[LAUGH] Yeah, hopefully that makes sense
once you actually start writing the code.

84
00:04:50.680 --> 00:04:53.010
But at some point,
you need to process the node.

85
00:04:53.010 --> 00:04:54.740
And then you need to add
the two children to the queue.

86
00:04:54.740 --> 00:05:02.032
What order you choose to do that
in should not particularly matter.

87
00:05:02.032 --> 00:05:03.640
And that's a great question.

88
00:05:03.640 --> 00:05:04.700
Thank you.

89
00:05:07.560 --> 00:05:08.782
You can write this recursively.

90
00:05:08.782 --> 00:05:13.460
It's somewhat makes sense to write
recursively if you like to do that.

91
00:05:13.460 --> 00:05:17.790
It's also fairly easy to write
just using a while loop.

92
00:05:17.790 --> 00:05:19.700
So you just have a wild look
that just goes through.

93
00:05:19.700 --> 00:05:24.070
And while there's things in the queue, you
just process the next thing in the queue.

94
00:05:24.070 --> 00:05:25.660
And that's another easy way to do it,
as well.

95
00:05:26.820 --> 00:05:30.880
I will show you both, so
you are welcome to go and

96
00:05:30.880 --> 00:05:32.700
write it either way that
makes sense to you.

