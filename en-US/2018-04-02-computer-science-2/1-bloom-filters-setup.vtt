WEBVTT

1
00:00:01.901 --> 00:00:03.595
&gt;&gt; Brian Holt: So this is kind
of our layout for the whole day.

2
00:00:03.595 --> 00:00:09.344
Sections 3 through 7 are really
tightly tied together.

3
00:00:09.344 --> 00:00:12.349
So we'll kinda be going through
those as kinda one unit.

4
00:00:12.349 --> 00:00:17.679
But I wanted to start off on something
that to me, is an impressive use of a data

5
00:00:17.679 --> 00:00:22.691
structure that is not, perhaps it's
complicated as the rest of these.

6
00:00:22.691 --> 00:00:26.663
Then we'll do some searching in an array
which is something that was kind of

7
00:00:26.663 --> 00:00:28.302
an omission from the last one,

8
00:00:28.302 --> 00:00:31.031
so it's kind of me just
saying I want to cover that.

9
00:00:31.031 --> 00:00:35.624
And the last two are two new sorts
because I really like sorting algorithms,

10
00:00:35.624 --> 00:00:38.515
I like taking things and
putting them in order.

11
00:00:38.515 --> 00:00:41.073
Maybe that's OCD or something,
I don't know, but it's fun.

12
00:00:41.073 --> 00:00:46.637
So we're gonna do those last
two before the end of the day.

13
00:00:46.637 --> 00:00:49.929
Cool, so let's talk about BFilters.

14
00:00:49.929 --> 00:00:56.700
Bloom Filters are a data structure and
they are peculiar.

15
00:00:59.309 --> 00:01:03.460
&gt;&gt; Brian Holt: The peculiar in
the sense that they have two answers.

16
00:01:03.460 --> 00:01:06.004
The answers they give are no and maybe.

17
00:01:06.004 --> 00:01:11.765
[LAUGH] So, what's really cool
about this is they are a set or

18
00:01:11.765 --> 00:01:18.234
a collection, or they at least act
similar to a set or collection.

19
00:01:18.234 --> 00:01:21.285
And if you remember from the previous
course I said a collection is basically

20
00:01:21.285 --> 00:01:22.868
this amorphous cloud of data, right?

21
00:01:22.868 --> 00:01:26.169
So I put things into it and
then later I asked the set,

22
00:01:26.169 --> 00:01:27.906
do you have this in the set?

23
00:01:27.906 --> 00:01:29.055
And it's gonna say yes or no, right?

24
00:01:29.055 --> 00:01:33.436
Bloom filters kind of seek to
fulfill that same space but

25
00:01:33.436 --> 00:01:36.425
they do it in slightly different way.

26
00:01:36.425 --> 00:01:41.310
They do this by-
&gt;&gt; Brian Holt: Making it very compact in

27
00:01:41.310 --> 00:01:45.251
memory, and very fast to look up, but
at the cost of not being able to say

28
00:01:45.251 --> 00:01:47.778
definitely something is in the set,
or not.

29
00:01:47.778 --> 00:01:52.224
The only thing that a Bloom filter
can tell you is that something, so

30
00:01:52.224 --> 00:01:56.436
the only thing it can tell you is
it's definitely not in the set,

31
00:01:56.436 --> 00:01:58.317
which I think is what I said.

32
00:01:58.317 --> 00:02:00.785
So they do this at the trade off, or

33
00:02:00.785 --> 00:02:05.811
what you're gaining by losing
the certainty is that something is, or

34
00:02:05.811 --> 00:02:11.542
the Bloom filter is very compact in memory
and it's very, very fast to look up.

35
00:02:11.542 --> 00:02:13.729
So let's talk about where
this would be useful.

36
00:02:13.729 --> 00:02:16.816
There's a great medium
article that I linked.

37
00:02:16.816 --> 00:02:20.071
It's quite long for reasons unknown to me.

38
00:02:20.071 --> 00:02:25.102
But the general premise behind it
is quite fascinating of how medium,

39
00:02:25.102 --> 00:02:28.439
which is a online blogging platform,
right?

40
00:02:28.439 --> 00:02:30.609
Does recommendations.

41
00:02:30.609 --> 00:02:33.744
When you're going and you read an article
and you see the recommendation at

42
00:02:33.744 --> 00:02:37.295
the bottom, you don't wanna see things
that you've already seen before, right?

43
00:02:37.295 --> 00:02:40.024
If I've already read this article I
don't want it to keep showing up on my

44
00:02:40.024 --> 00:02:40.802
recommendations.

45
00:02:40.802 --> 00:02:42.242
And furthermore, if I go to like five or

46
00:02:42.242 --> 00:02:44.696
six different articles and
it keeps recommending the same thing.

47
00:02:44.696 --> 00:02:47.147
Eventually, I'm not gonna
read that article so

48
00:02:47.147 --> 00:02:49.014
stop recommending it to me, right?

49
00:02:49.014 --> 00:02:54.046
So medium uses Bloom filters in this
capacity and it basically says has

50
00:02:54.046 --> 00:02:59.605
this person seen this particular article
too much or how they read it before.

51
00:02:59.605 --> 00:03:02.107
And then they'll add it to the Bloom
filter once you've read it or

52
00:03:02.107 --> 00:03:03.528
once you've seen it too many times.

53
00:03:03.528 --> 00:03:07.401
And then later, they'll go back and
ask the Bloom filter hey,

54
00:03:07.401 --> 00:03:09.605
has this person read this article?

55
00:03:09.605 --> 00:03:12.920
And it's gonna say, no, this person
definitely has not read this article,

56
00:03:12.920 --> 00:03:14.859
therefore you can show it,
or it says maybe.

57
00:03:14.859 --> 00:03:17.667
They might have read it before,
and therefore they won't show it.

58
00:03:17.667 --> 00:03:21.111
Now, the reason why it's a false positive.

59
00:03:21.111 --> 00:03:25.359
Sorry, rather the false
negative is acceptable,

60
00:03:25.359 --> 00:03:30.614
is that it might ask, sometimes,
have you read this article?

61
00:03:30.614 --> 00:03:32.251
And it's gonna say,
this person might have read this article.

62
00:03:32.251 --> 00:03:35.219
It's like, okay, well,
show them a different article, right?

63
00:03:35.219 --> 00:03:37.438
The fact that you're not
showing them the article,

64
00:03:37.438 --> 00:03:40.422
despite the fact that they actually
haven't read it is fine, right?

65
00:03:40.422 --> 00:03:42.878
You're just filling it with
more different articles.

66
00:03:42.878 --> 00:03:46.000
So that's kind of the point of
these Bloom filters is when you

67
00:03:46.000 --> 00:03:48.757
have some sort of tolerance for
false negatives, but

68
00:03:48.757 --> 00:03:51.467
you have no tolerance for
false positives, right?

69
00:03:51.467 --> 00:03:54.696
We follow up more or
less kind of the premise here?

70
00:03:54.696 --> 00:03:55.750
Cool.

71
00:04:00.556 --> 00:04:03.094
&gt;&gt; Brian Holt: So
I linked some Wikipedia articles here,

72
00:04:03.094 --> 00:04:07.319
if you wanna go check out some more
real use cases of Bloom filters.

73
00:04:07.319 --> 00:04:10.650
The other thing people wondering
if Bloom is descriptive,

74
00:04:10.650 --> 00:04:15.122
why is it called a Bloom filter, the guy
that invented it his last name is Bloom.

75
00:04:15.122 --> 00:04:17.877
So that's just good to keep in mind.

76
00:04:17.877 --> 00:04:21.773
I was trying to picture flowers, and
I don't know, it went to a weird place.

77
00:04:21.773 --> 00:04:25.041
So picture for a second you have,

78
00:04:25.041 --> 00:04:29.720
well, let's just diagram
this out actually.

