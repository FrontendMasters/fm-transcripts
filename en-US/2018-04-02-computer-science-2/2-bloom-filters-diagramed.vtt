WEBVTT

1
00:00:01.250 --> 00:00:02.010
&gt;&gt; Brian Holt: So.

2
00:00:03.482 --> 00:00:08.449
&gt;&gt; Brian Holt: Picture for
me if you will, basically I have

3
00:00:08.449 --> 00:00:13.960
an array of ten,
if this will work, there we go.

4
00:00:15.060 --> 00:00:16.134
Nope, I wanna draw.

5
00:00:19.903 --> 00:00:21.810
&gt;&gt; Brian Holt: So I have an array here.

6
00:00:21.810 --> 00:00:29.053
And I gonna give it,
&gt;&gt; Brian Holt: Four,

7
00:00:29.053 --> 00:00:32.891
five, six, seven,

8
00:00:32.891 --> 00:00:36.740
eight, nine, ten.

9
00:00:36.740 --> 00:00:37.970
Ten 0s, right?

10
00:00:37.970 --> 00:00:40.350
You can think of the 0s as
representing false, right?

11
00:00:40.350 --> 00:00:43.290
That nothing has been written
to that particular space, right?

12
00:00:43.290 --> 00:00:47.180
And then I'm gonna make
a Bloom filter out of this.

13
00:00:47.180 --> 00:00:50.230
And the way I'm going to do
that is I'm gonna have two

14
00:00:50.230 --> 00:00:51.810
different hashing functions.

15
00:00:53.590 --> 00:00:56.800
That number of hashing functions is gonna
vary but for the sake of simplicity,

16
00:00:56.800 --> 00:00:58.280
right now, we're just gonna do two.

17
00:00:58.280 --> 00:01:00.860
Typically, you would have more.

18
00:01:02.550 --> 00:01:06.180
I'm gonna run whatever think it's added
to this particular Bloom filter through

19
00:01:06.180 --> 00:01:07.280
both hashing functions.

20
00:01:07.280 --> 00:01:11.680
And the key here is the hashing
functions are different, right?

21
00:01:11.680 --> 00:01:14.940
They're not the same hashing
function otherwise it would

22
00:01:14.940 --> 00:01:18.430
not be much point to this particular
algorithm, or data structure rather.

23
00:01:18.430 --> 00:01:23.680
So through you from part one,
there's parts about hashing in part one,

24
00:01:23.680 --> 00:01:25.900
so check it out if you
want more explanation.

25
00:01:25.900 --> 00:01:31.670
But to give you the 30 second version,
it takes some item.

26
00:01:31.670 --> 00:01:34.030
So you give it some sort of output, and

27
00:01:34.030 --> 00:01:38.920
then it gives you, some sort of numerical
representation of whatever that is, right?

28
00:01:38.920 --> 00:01:43.660
So if I give it some string and
I pass in Brian

29
00:01:43.660 --> 00:01:48.510
into this hashing function it's gonna
give me some index between 0 and 9 right?

30
00:01:48.510 --> 00:01:54.150
So it's gonna tell me the string Brian
is stored always in index 9, right?

31
00:01:54.150 --> 00:01:56.500
Something to that effect.

32
00:01:56.500 --> 00:02:00.540
So same thing with how hashing tables
work but useful for lots of things.

33
00:02:00.540 --> 00:02:02.760
We'll just leave it at that.

34
00:02:06.254 --> 00:02:09.534
&gt;&gt; Brian Holt: So let's say that
I'm adding my name to this, so

35
00:02:09.534 --> 00:02:11.990
I'm gonna add right here.

36
00:02:11.990 --> 00:02:18.044
Gonna say add Brian, the string.

37
00:02:18.044 --> 00:02:20.070
And I'm gonna run this through
two hashing functions.

38
00:02:20.070 --> 00:02:24.560
The hashing functions are going to give
me two different indices of where to

39
00:02:24.560 --> 00:02:26.500
put this, right?

40
00:02:26.500 --> 00:02:32.390
So let's pretend one of them
gives me h1 equals index 1 and

41
00:02:32.390 --> 00:02:36.219
h2 gives me index 4, right?

42
00:02:38.060 --> 00:02:39.580
So what I'm going to do is
I'm going to go here, and

43
00:02:39.580 --> 00:02:41.680
I'm going to change this one to a one.

44
00:02:41.680 --> 00:02:46.660
And that's two, three, four.

45
00:02:46.660 --> 00:02:50.370
So I'm gonna change these
two ones to be ones.

46
00:02:50.370 --> 00:02:52.420
You follow so far?

47
00:02:53.420 --> 00:02:54.820
Cool.

48
00:02:54.820 --> 00:02:59.410
So now if I go back right after this,
after I've added Brian.

49
00:02:59.410 --> 00:03:03.393
That I'm gonna go check to say,
is Brian in this particular set, right?

50
00:03:03.393 --> 00:03:05.435
Or in this particular Bloom filter rather.

51
00:03:08.101 --> 00:03:10.156
&gt;&gt; Brian Holt: So I'm gonna run it through
these two hashing functions again,

52
00:03:10.156 --> 00:03:11.611
and I'm gonna get the same answers, right?

53
00:03:11.611 --> 00:03:14.302
Because that's one of the big
points of hashing functions is,

54
00:03:14.302 --> 00:03:17.420
given the same string it's always
gonna give you back the same indices.

55
00:03:17.420 --> 00:03:22.170
So I'm gonna go check Index one and

56
00:03:22.170 --> 00:03:27.130
index four, are those both ones, right?

57
00:03:28.440 --> 00:03:34.320
They are so its going to say maybe,
its maybe in the set.

58
00:03:34.320 --> 00:03:37.790
That is the answer you get back from it.

59
00:03:37.790 --> 00:03:43.680
Now if I go and run
&gt;&gt; Brian Holt: Let's

60
00:03:43.680 --> 00:03:45.706
say I run something like Sarah.

61
00:03:49.562 --> 00:03:53.904
&gt;&gt; Brian Holt: Let's pretend
this gives me back h1 is

62
00:03:53.904 --> 00:03:58.516
gonna be equal to 0 and h2 is equal to 4.

63
00:03:58.516 --> 00:04:03.170
So now I'm gonna go check at
index 0 which is a 0, right?

64
00:04:04.330 --> 00:04:06.690
And I'm gonna see there that
that has not been flipped.

65
00:04:06.690 --> 00:04:09.976
So I can say this is
definitely not the set, right?

66
00:04:09.976 --> 00:04:14.541
For sure 100% 9 if that first index
is not flipped or not flipped but

67
00:04:14.541 --> 00:04:17.066
rather it's not a 1, it's not true.

68
00:04:17.066 --> 00:04:20.640
The Sarah is definitely not in the set.

69
00:04:20.640 --> 00:04:23.310
Does that make sense?

70
00:04:25.550 --> 00:04:27.510
So, hopefully you are starting
to get the picture here,

71
00:04:27.510 --> 00:04:31.060
I'm actually going to be able to store
a huge amount of information in this.

72
00:04:32.120 --> 00:04:36.119
It's going to be very fast because
hashing functions are fast.

73
00:04:40.290 --> 00:04:44.760
It's very compact in memory, I'm only
taking up 10 different things here.

74
00:04:44.760 --> 00:04:48.336
Let's say that I end up adding
Sarah to this afterwards,

75
00:04:48.336 --> 00:04:51.230
this one's one and this one's one.

76
00:04:52.670 --> 00:04:55.480
Let's say that I do that and I get.

77
00:04:57.400 --> 00:05:05.664
And I add, later I'm gonna go
check to see if let's say Shirley.

78
00:05:09.801 --> 00:05:13.330
&gt;&gt; Brian Holt: Sorry,
my handwriting on this thing is not great.

79
00:05:13.330 --> 00:05:15.589
All right, that's a Shirley, I promise.

80
00:05:17.480 --> 00:05:24.850
Let's say that h1 of this is 0 and
h2 of this is equal to 1.

81
00:05:24.850 --> 00:05:31.340
I'm gonna check here in my
particular array and guess what?

82
00:05:31.340 --> 00:05:33.230
Both of those are flipped to 1s.

83
00:05:33.230 --> 00:05:39.960
They are ones in the Bloom filter,
so that's why the answer is maybe.

84
00:05:39.960 --> 00:05:41.590
It might be in the set, right?

85
00:05:43.040 --> 00:05:48.230
Because we actually never did add
Shirley to our Bloom filter, but we got

86
00:05:48.230 --> 00:05:52.359
a maybe back from her because two other
ones basically collided with it, right?

87
00:05:54.670 --> 00:05:56.410
So going back to our medium example,

88
00:05:56.410 --> 00:06:00.000
this would be some article that
they actually haven't read, right?

89
00:06:00.000 --> 00:06:03.205
But it collides with other articles that
have been added to those Bloom filters.

90
00:06:03.205 --> 00:06:06.943
So what happens is well, we're not gonna
show you that article we're gonna go try

91
00:06:06.943 --> 00:06:08.364
and find another one, right?

92
00:06:08.364 --> 00:06:11.482
So this is the tradeoff that you
have to be willing to accept,

93
00:06:11.482 --> 00:06:13.510
that's the point of the Bloom filter.

