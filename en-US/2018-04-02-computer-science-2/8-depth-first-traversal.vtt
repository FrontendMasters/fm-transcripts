WEBVTT

1
00:00:00.440 --> 00:00:03.140
&gt;&gt; Brian Holt: So pictured here
is a valid binary search tree.

2
00:00:05.910 --> 00:00:08.280
Here's a link if you wanna go down and
see the other one.

3
00:00:09.500 --> 00:00:13.130
&gt;&gt; Brian Holt: So I've given you
this tree, this data structure.

4
00:00:13.130 --> 00:00:14.910
I want you to serialize it.

5
00:00:14.910 --> 00:00:16.170
And when I say serialize it,

6
00:00:16.170 --> 00:00:20.130
I just want you to make it into something
you can console log basically, right?

7
00:00:20.130 --> 00:00:22.818
Because I love console logging everything.

8
00:00:22.818 --> 00:00:26.370
[LAUGH] I want you to make
it into a flat array.

9
00:00:26.370 --> 00:00:27.980
How are you going to do that?

10
00:00:27.980 --> 00:00:31.580
And we're gonna talk about four
different strategies to how to do this.

11
00:00:31.580 --> 00:00:36.840
So, the first one, which I think, for
me, is my natural way of thinking.

12
00:00:36.840 --> 00:00:39.990
That's usually where I like to start is
what is the most human way to think about

13
00:00:39.990 --> 00:00:44.290
this and then I optimize from there to
more computer optimized ways of thinking.

14
00:00:44.290 --> 00:00:46.680
I think of things in terms
of depth-first traversal.

15
00:00:47.930 --> 00:00:50.310
And usually, I go with pre-order.

16
00:00:50.310 --> 00:00:52.670
That's just the way that my
brain thinks about things.

17
00:00:52.670 --> 00:00:54.570
Because I wanna go as deep
in the tree first, and

18
00:00:54.570 --> 00:00:56.280
then start serializing things from there.

19
00:00:56.280 --> 00:00:59.630
Pre-order traversal is I'm gonna add 8 and

20
00:00:59.630 --> 00:01:02.550
then I'm gonna process everything
in the subtree, right?

21
00:01:02.550 --> 00:01:03.902
So I'm gonna add myself, and

22
00:01:03.902 --> 00:01:06.672
then I'm gonna add everything
in the left subtree, right?

23
00:01:06.672 --> 00:01:08.535
Once I do everything on the left subtree,

24
00:01:08.535 --> 00:01:11.260
then I'm gonna do everything
in the right subtree, right?

25
00:01:11.260 --> 00:01:18.000
So first, add yourself, then process left
tree, then process right tree, right?

26
00:01:18.000 --> 00:01:19.840
That's pre order traversal.

27
00:01:19.840 --> 00:01:21.480
So I'm gonna add 8.

28
00:01:21.480 --> 00:01:24.190
Then I'm going to left subtree and
I'm gonna add 3.

29
00:01:24.190 --> 00:01:27.520
And then I'm gonna go into left
subtree of that, I'm gonna add 1.

30
00:01:27.520 --> 00:01:31.840
Then I'm gonna process everything
in the right subtree of 3, right?

31
00:01:31.840 --> 00:01:37.050
So then I'm gonna add 4,
6, 7, 10, 14, 13, right?

32
00:01:37.050 --> 00:01:41.496
So if you look here, I basically go
through all of these steps of what I said

33
00:01:41.496 --> 00:01:46.049
here, and you end up with 8,
3, 1, 6, 4, 7, 10, 14, 13.

34
00:01:47.190 --> 00:01:47.872
Right?
Does that make sense?

35
00:01:47.872 --> 00:01:49.801
So yeah.

36
00:01:53.710 --> 00:01:56.430
&gt;&gt; Brian Holt: I'm gonna
say the word process node.

37
00:01:56.430 --> 00:01:57.500
When I say process node,

38
00:01:57.500 --> 00:01:59.520
it means you're gonna do whatever
you're going to do, right?

39
00:01:59.520 --> 00:02:02.830
In our particular case of my example,
you're going to add something to an array.

40
00:02:02.830 --> 00:02:04.430
That's the processing of a node, right?

41
00:02:04.430 --> 00:02:08.370
So you're gonna process the node, then do
the left tree, then do the right tree.

42
00:02:08.370 --> 00:02:12.258
And that is preorder traversal, right?

43
00:02:12.258 --> 00:02:19.620
Now what you're left with here, 8, 3, 1.

44
00:02:19.620 --> 00:02:24.810
This is nonsensical in the sense
that it's not a sorted list.

45
00:02:24.810 --> 00:02:28.120
Despite that fact that our tree
actually does have order to it, right?

46
00:02:28.120 --> 00:02:30.490
That's what a binary search tree has,
is it has order.

47
00:02:31.830 --> 00:02:36.450
So, what if I want you to print
these things out in order, right?

48
00:02:36.450 --> 00:02:39.400
You might do what's called
an inorder traversal, right?

49
00:02:40.560 --> 00:02:43.030
So, what you're going to do is
you're going to process the,

50
00:02:43.030 --> 00:02:47.130
sorry, your gonna do
the left subtree first.

51
00:02:47.130 --> 00:02:49.610
Then your going to process
the node that your on.

52
00:02:49.610 --> 00:02:52.253
And then your going to do
the right subtree, right?

53
00:02:52.253 --> 00:02:54.710
So I'm gonna go, start with 8 right?

54
00:02:54.710 --> 00:02:57.012
Because you always star
with the root node.

55
00:02:57.012 --> 00:02:59.327
Then I'm going to process
the left subtree, right?

56
00:02:59.327 --> 00:03:01.810
So I'm going to go down here to the left.

57
00:03:01.810 --> 00:03:02.810
Which is 3.

58
00:03:02.810 --> 00:03:05.320
This is one is going to go
to the left subtree as well.

59
00:03:05.320 --> 00:03:07.131
And it's gonna go to 1.

60
00:03:07.131 --> 00:03:09.189
1 has no left child, right?

61
00:03:09.189 --> 00:03:10.209
So it processes itself.

62
00:03:10.209 --> 00:03:15.741
Then it tries to process the right child,
which again doesn't have a right child so

63
00:03:15.741 --> 00:03:18.860
it's just returns after processing itself.

64
00:03:18.860 --> 00:03:19.723
So, it goes back up to 3.

65
00:03:19.723 --> 00:03:23.550
3 now processes itself 3, right?

66
00:03:23.550 --> 00:03:28.776
And then it processes the right subchild,
so then it goes down to 6.

67
00:03:28.776 --> 00:03:32.158
Then 6 goes down to 4, 4 processes itself,

68
00:03:32.158 --> 00:03:36.231
goes back up to 6,
6 adds itself then it goes to the 7,

69
00:03:36.231 --> 00:03:41.710
7 adds itself you go all the way
back up here to 8, 8 adds itself.

70
00:03:41.710 --> 00:03:48.470
Then 10, then goes to 14, and
14 doesn't process itself yet.

71
00:03:48.470 --> 00:03:54.660
It goes to 13, then 13 does, and then 14.

72
00:03:54.660 --> 00:03:56.020
So you end up with [1, 3,
5, 6, 7, 8, 10, 13, 14].

73
00:03:56.020 --> 00:03:59.850
You end up assorted lists, cool?

74
00:04:02.910 --> 00:04:06.630
Then you're probably getting like how
these are different from each other we're

75
00:04:06.630 --> 00:04:10.010
gonna do post order traversal,
which means that

76
00:04:10.010 --> 00:04:14.180
you're gonna do all the children first and
then add yourself right?

77
00:04:14.180 --> 00:04:16.417
So 8, 3, 1,right?

78
00:04:16.417 --> 00:04:21.010
and then 1 has no children,
so 1 adds itself, right?

79
00:04:22.300 --> 00:04:23.220
Then it goes back up here.

80
00:04:23.220 --> 00:04:25.460
3 still does not add itself to the list.

81
00:04:25.460 --> 00:04:28.130
It goes down to 6, then 4.

82
00:04:28.130 --> 00:04:29.670
So 4 is going to add itself.

83
00:04:30.760 --> 00:04:33.940
Then 7, then 6, then 3, then 8.

84
00:04:33.940 --> 00:04:36.370
Then you go down to 13.

85
00:04:36.370 --> 00:04:39.540
Then 14 to 10 and then 8.

86
00:04:41.910 --> 00:04:45.954
So, if you go down here,
&gt;&gt; Brian Holt: so one thing is,

87
00:04:45.954 --> 00:04:47.466
when you're doing postorder,

88
00:04:47.466 --> 00:04:50.770
definitely a root node is always
going to be the last thing processed.

89
00:04:50.770 --> 00:04:51.974
Follows right?
Because it's gonna process

90
00:04:51.974 --> 00:04:54.119
all the left tree and
the right tree and then add itself.

91
00:04:55.510 --> 00:04:57.490
So let's talk about when you
would use any one of these.

92
00:04:57.490 --> 00:05:01.685
First of all, does anyone have any
questions about these particular things?

93
00:05:04.940 --> 00:05:08.597
&gt;&gt; Brian Holt: So it's just a matter
of changing what order you're going to

94
00:05:08.597 --> 00:05:09.968
process the nodes in.

95
00:05:09.968 --> 00:05:15.030
That's the whole gist of the three
variance of depth first traversal.

96
00:05:20.322 --> 00:05:23.060
&gt;&gt; Brian Holt: Yeah,
let's talk about when you would use these.

97
00:05:25.970 --> 00:05:30.400
So in preorder reversal, I thought I had.

98
00:05:33.050 --> 00:05:33.750
Right here, cool.

99
00:05:35.710 --> 00:05:38.220
So if you want a sorted list out of a BST,

100
00:05:38.220 --> 00:05:40.500
inorder traversal is
exactly how you do that.

101
00:05:40.500 --> 00:05:41.840
That's almost why it exists.

102
00:05:41.840 --> 00:05:44.524
If you're trying to make
a deep copy of a tree, so

103
00:05:44.524 --> 00:05:48.321
I have this binary search tree and
I want to create an exact copy of it,

104
00:05:48.321 --> 00:05:52.589
that would be a really really useful
time to use preorder traversal, right?

105
00:05:52.589 --> 00:05:55.787
Because you want to create a node, and
then you want to add a left child and

106
00:05:55.787 --> 00:05:57.370
then add a right child, right?

107
00:05:57.370 --> 00:05:59.400
So that's when preorder would be really,
really useful,

108
00:05:59.400 --> 00:06:02.790
because you can't add children to
something that doesn't exist yet.

109
00:06:02.790 --> 00:06:05.230
So that's when you would need preorder.

110
00:06:05.230 --> 00:06:09.390
Now, imagine if you were
trying to delete a tree.

111
00:06:10.420 --> 00:06:13.255
Well, if you try and delete something,
and then go to find its children,

112
00:06:13.255 --> 00:06:16.740
because it's already been deleted,
you couldn't find its children, right?

113
00:06:16.740 --> 00:06:18.430
So that's when postorder
would be really useful.

114
00:06:18.430 --> 00:06:22.400
Because you would go delete
everything in the left tree, rather,

115
00:06:22.400 --> 00:06:24.930
delete everything in the right tree,
and then delete the node itself, right?

116
00:06:24.930 --> 00:06:28.780
So that's when a postorder traversal
would be really, really, useful.

