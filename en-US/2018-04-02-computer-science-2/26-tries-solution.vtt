WEBVTT

1
00:00:00.000 --> 00:00:01.200
&gt;&gt; Brian Holt: All right.

2
00:00:01.200 --> 00:00:04.490
So let's go ahead and
implement this together.

3
00:00:04.490 --> 00:00:10.150
I'm gonna use the structure
that I've provided here.

4
00:00:14.083 --> 00:00:16.345
&gt;&gt; Brian Holt: Going
down here to createTrie.

5
00:00:17.470 --> 00:00:19.620
It's gonna have a root node.

6
00:00:19.620 --> 00:00:21.630
And then for each one of these,
I'm just gonna go through and

7
00:00:21.630 --> 00:00:23.160
add them to this data structure.

8
00:00:23.160 --> 00:00:30.384
So I'm gonna call words.forEach
&gt;&gt; Brian Holt: And

9
00:00:30.384 --> 00:00:37.094
then I'm gonna add the word to
root.add(word.toLowerCase),

10
00:00:37.094 --> 00:00:44.150
cuz in this particular case you
don't wanna worry about uppercase.

11
00:00:44.150 --> 00:00:47.140
So everything's gonna be auto
completed in the lowercase.

12
00:00:47.140 --> 00:00:50.809
You can probably capital case
this after you get it back,

13
00:00:50.809 --> 00:00:55.800
but whatever everything's gonna be
lowercase for the sake of the exercise.

14
00:00:55.800 --> 00:00:58.160
And then we're gonna go
back up to this node.

15
00:00:58.160 --> 00:01:03.250
And we're just gonna add
a bunch of properties on this

16
00:01:03.250 --> 00:01:08.915
particular node, so
children is gonna be an array, okay?

17
00:01:08.915 --> 00:01:13.710
Value of the current item is going to be
an empty string, which we'll set later.

18
00:01:13.710 --> 00:01:17.614
I guess I probably have to put semi
colons on this or it's gonna be upset.

19
00:01:17.614 --> 00:01:19.684
Nope, whatever.

20
00:01:23.672 --> 00:01:24.910
&gt;&gt; Brian Holt: Terminus.

21
00:01:24.910 --> 00:01:29.298
This is just to say, if I finished
right here, is this a word, right?

22
00:01:29.298 --> 00:01:31.680
Usually the answer to that is no,
but sometimes it's gonna be true.

23
00:01:33.050 --> 00:01:36.988
And then we're gonna have a constructor.

24
00:01:36.988 --> 00:01:39.807
A constructor is a special function
that's get run every single

25
00:01:39.807 --> 00:01:42.360
time this particular class
is gonna get constructed.

26
00:01:42.360 --> 00:01:43.650
I think it follows.

27
00:01:43.650 --> 00:01:46.598
It's gonna take in a string.

28
00:01:46.598 --> 00:01:52.206
And what it's going to do is,
it's going to say,

29
00:01:52.206 --> 00:01:56.746
first of all, this .value is going to be

30
00:01:56.746 --> 00:02:01.831
equal to zero or empty string, either/or.

31
00:02:01.831 --> 00:02:04.836
Then you're gonna say,

32
00:02:04.836 --> 00:02:09.559
if string.length is greater than 1,

33
00:02:09.559 --> 00:02:14.857
then this.children.push(new Node),

34
00:02:14.857 --> 00:02:23.890
and then you're gonna say string.substring
From one to the end, right?

35
00:02:23.890 --> 00:02:28.110
So what you're doing here is if this is
not the end of the word, then I'm gonna

36
00:02:28.110 --> 00:02:30.580
have to continue breaking it down into
further and further nodes, right?

37
00:02:30.580 --> 00:02:33.930
That's what this does, and
then I'm going to construct a new node

38
00:02:33.930 --> 00:02:36.080
with everything not included
in the first letter, right?

39
00:02:36.080 --> 00:02:37.266
I don't want to include that anymore.

40
00:02:37.266 --> 00:02:41.362
And then you just have to know that, that
means this constructors gonna be called on

41
00:02:41.362 --> 00:02:45.600
the smaller node in front of it, so it
will continue breaking things down, right?

42
00:02:45.600 --> 00:02:47.840
So that's why you passed
everything from one to the end,

43
00:02:47.840 --> 00:02:52.460
cuz it's going to keep breaking down into
smaller and smaller pieces of the tree,

44
00:02:52.460 --> 00:02:56.130
in both sense of the word, okay.

45
00:02:56.130 --> 00:03:03.703
Else, if it's done,
then you just say this.terminus = true

46
00:03:08.177 --> 00:03:10.623
&gt;&gt; Brian Holt: Okay, cool.

47
00:03:21.580 --> 00:03:23.424
&gt;&gt; Brian Holt: Okay, and
then I'm gonna write an add function here.

48
00:03:28.883 --> 00:03:30.830
&gt;&gt; Brian Holt: That's
going to take in a string.

49
00:03:33.490 --> 00:03:41.094
And const value = string[0].

50
00:03:41.094 --> 00:03:49.154
const next = string.substring(1).

51
00:03:53.790 --> 00:03:59.340
And then, here I'm gonna say,

52
00:03:59.340 --> 00:04:06.133
if child.value triple equals value.

53
00:04:08.494 --> 00:04:10.896
&gt;&gt; Brian Holt: There, I gotta
remember exactly what this is doing.

54
00:04:10.896 --> 00:04:19.780
[COUGH]
&gt;&gt; Brian Holt: Right,

55
00:04:19.780 --> 00:04:27.070
so this is basically checking to see if,
have I finished the string, right?

56
00:04:27.070 --> 00:04:30.295
Even if it still has children,
have I finished the string?

57
00:04:30.295 --> 00:04:33.020
And if that's the case, then you need
to mark the term and this is true.

58
00:04:33.020 --> 00:04:34.830
So in that same example,

59
00:04:34.830 --> 00:04:38.783
the Selena, I have to mark this as true
even though that has still children to go.

60
00:04:38.783 --> 00:04:47.182
So if (next),
&gt;&gt; Brian Holt: Then child.add(next).

61
00:04:50.181 --> 00:04:54.914
&gt;&gt; Brian Holt: Else
child.terminus = true and

62
00:04:54.914 --> 00:05:00.326
then return at the end of all of these.

63
00:05:05.160 --> 00:05:09.729
&gt;&gt; Brian Holt: Okay,
then down here at the bottom you just say

64
00:05:09.729 --> 00:05:14.781
this.children.push(new Node (string)).

65
00:05:17.634 --> 00:05:18.500
&gt;&gt; Brian Holt: Okay, cool.

66
00:05:18.500 --> 00:05:21.710
So that's the add function of how you
add something new to a tree, right?

67
00:05:21.710 --> 00:05:24.538
You're basically breaking it down,
piece by piece, and

68
00:05:24.538 --> 00:05:26.454
then creating new Nodes as you go down.

69
00:05:34.210 --> 00:05:36.596
&gt;&gt; Brian Holt: Yep, which is fine, cool.

70
00:05:41.215 --> 00:05:43.016
&gt;&gt; Brian Holt: Okay, so

71
00:05:48.081 --> 00:05:51.439
&gt;&gt; Brian Holt: What I'm gonna do here with

72
00:05:51.439 --> 00:05:56.695
this complete thing is I'm going to return

73
00:05:56.695 --> 00:06:03.583
this.children
&gt;&gt; Brian Holt: .map

74
00:06:05.443 --> 00:06:07.087
&gt;&gt; Brian Holt: I'm gonna say child, and

75
00:06:07.087 --> 00:06:11.702
then I'm gonna write an internal
function called child._complete.

76
00:06:11.702 --> 00:06:15.690
This is my internal recursive method
that I'm gonna keep calling over and

77
00:06:15.690 --> 00:06:18.408
over again here, child._complete(string.

78
00:06:18.408 --> 00:06:22.430
I'm gonna start with empty string,
and an empty array.

79
00:06:23.680 --> 00:06:25.990
So the empty string is the string
I'm gonna start with, right?

80
00:06:25.990 --> 00:06:29.410
And then the array is of
items that I'm going to

81
00:06:29.410 --> 00:06:32.010
return to the user as auto
complete suggestions.

82
00:06:32.010 --> 00:06:37.300
And then here,
&gt;&gt; Brian Holt: I'm going to reduce them.

83
00:06:37.300 --> 00:06:39.070
I'm gonna flatten them, right?

84
00:06:39.070 --> 00:06:42.328
We saw this before because they're
gonna come back as arrays.

85
00:06:46.169 --> 00:06:51.712
&gt;&gt; Brian Holt: Acc.concat(item), okay?

86
00:06:51.712 --> 00:06:53.946
So this is the flat line or smush.

87
00:06:55.500 --> 00:06:56.590
&gt;&gt; Brian Holt: It comes up again, right?

88
00:06:56.590 --> 00:06:58.401
Not gonna say anything.

89
00:06:58.401 --> 00:06:59.580
I already did.

90
00:06:59.580 --> 00:07:00.839
It's fine.
Okay, so

91
00:07:00.839 --> 00:07:05.050
now let's write the _completefunction.

92
00:07:05.050 --> 00:07:08.540
This takes in the search string
that we're still searching for,

93
00:07:08.540 --> 00:07:15.270
what's already been built, and these
suggestions that I already have, okay?

94
00:07:15.270 --> 00:07:19.280
So in this particular case, I'm asking
you for up to three suggestions.

95
00:07:19.280 --> 00:07:28.444
So if suggestions.length
is greater than or

96
00:07:28.444 --> 00:07:33.508
equal to 3, then stop,

97
00:07:33.508 --> 00:07:39.297
or search &amp;&amp; search[0]

98
00:07:39.297 --> 00:07:44.853
&amp;&amp; =/= this.value.

99
00:07:48.715 --> 00:07:55.295
&gt;&gt; Brian Holt: So, search string and
search[0] is not equal to this.value.

100
00:07:57.580 --> 00:07:58.642
&gt;&gt; Brian Holt: Right, and at that point,

101
00:07:58.642 --> 00:08:00.493
then you're going to
return the suggestions,

102
00:08:00.493 --> 00:08:07.039
because at that point,
&gt;&gt; Brian Holt: Return suggestions.

103
00:08:08.690 --> 00:08:12.150
At that point, that's the base case.

104
00:08:12.150 --> 00:08:16.050
You're gonna say if (this.terminus).

105
00:08:16.050 --> 00:08:21.644
So if I've reached a terminus in here,
then I'm going to suggestions.push.

106
00:08:22.983 --> 00:08:24.535
&gt;&gt; Brian Holt: I'm gonna use
a template string, right,

107
00:08:24.535 --> 00:08:26.850
because you have to put
together the current value.

108
00:08:26.850 --> 00:08:29.790
And the constructed string, so
the built string comes first.

109
00:08:29.790 --> 00:08:34.579
So built, and
then if I reach a terminus, right,

110
00:08:34.579 --> 00:08:39.026
then I'll have a built part of the string,
and

111
00:08:39.026 --> 00:08:44.635
then I just need to concatenate
this .value to it, okay?

112
00:08:48.552 --> 00:08:49.419
&gt;&gt; Brian Holt: And right, so

113
00:08:49.419 --> 00:08:53.550
now I have a complete word that
gets added to suggestions.

114
00:08:53.550 --> 00:09:00.379
And then after that,
we're gonna say this .children.forEach.

115
00:09:00.379 --> 00:09:02.670
We're gonna go through
each one of the children.

116
00:09:02.670 --> 00:09:07.607
So child,
&gt;&gt; Brian Holt: And we're just

117
00:09:07.607 --> 00:09:12.288
going to return child._complete.

118
00:09:12.288 --> 00:09:18.233
We're gonna start with
search.substring(1), right?

119
00:09:18.233 --> 00:09:21.595
Cuz you're gonna loft that piece off.

120
00:09:23.723 --> 00:09:24.422
&gt;&gt; Brian Holt: Okay, and

121
00:09:24.422 --> 00:09:28.630
then here you're gonna say that
same string that we had up here.

122
00:09:28.630 --> 00:09:30.511
You can just even copy and
paste if you want to.

123
00:09:33.114 --> 00:09:36.017
&gt;&gt; Brian Holt: Because that's like the new
build string that you're gonna keep adding

124
00:09:36.017 --> 00:09:38.830
one at a time, and then just put
the same suggestions in there.

125
00:09:38.830 --> 00:09:40.865
And eventually you're gonna
reach three strings or

126
00:09:40.865 --> 00:09:43.570
you're gonna finish the entire tree,
and then you've completed.

127
00:09:43.570 --> 00:09:45.942
And at that point you
just return suggestions.

128
00:09:51.550 --> 00:09:55.500
&gt;&gt; Brian Holt: Okay,
I think that is everything.

129
00:09:55.500 --> 00:09:59.324
Let me give that a shot and
see if it runs.

130
00:10:02.292 --> 00:10:03.570
&gt;&gt; Brian Holt: Nothing works.

131
00:10:03.570 --> 00:10:04.518
Child is not defined.

132
00:10:04.518 --> 00:10:07.725
At no.add.

133
00:10:12.160 --> 00:10:15.310
&gt;&gt; Brian Holt: Did I just not pull out
child, is that what I was meant to do?

134
00:10:16.930 --> 00:10:18.520
Yeah, that's what, sorry.

135
00:10:18.520 --> 00:10:23.756
Up here you say const child

136
00:10:23.756 --> 00:10:28.998
= this.childreni[i]

137
00:10:37.115 --> 00:10:38.930
&gt;&gt; Brian Holt: Supposed
to do up even one more.

138
00:10:47.460 --> 00:10:47.994
Now we try it.

139
00:10:53.282 --> 00:10:54.400
&gt;&gt; Brian Holt: i is not defined.

140
00:10:56.760 --> 00:11:00.554
I was suppose to do this in a for loop.

141
00:11:00.554 --> 00:11:03.333
Okay, sorry, for

142
00:11:03.333 --> 00:11:08.726
let i = 0; i &lt; children.length.

143
00:11:12.471 --> 00:11:17.137
&gt;&gt; Brian Holt: this.children.length,
rather,

144
00:11:17.137 --> 00:11:23.663
i++,
&gt;&gt; Brian Holt: Indent

145
00:11:23.663 --> 00:11:26.360
that a little bit more, okay.

146
00:11:35.680 --> 00:11:41.649
All right, so
value string constant.substring(1) and

147
00:11:41.649 --> 00:11:46.218
that equals children plus plus,
children i.

148
00:11:50.692 --> 00:11:56.695
&gt;&gt; Brian Holt: If next,
trial that next, [INAUDIBLE] return.

149
00:12:00.543 --> 00:12:03.165
&gt;&gt; Brian Holt: Cuz these are all coming
back to be zero which means that

150
00:12:03.165 --> 00:12:05.340
something's not getting added correctly.

151
00:12:07.010 --> 00:12:12.566
Then here in _complete,
&gt;&gt; Brian Holt: When I

152
00:12:12.566 --> 00:12:18.013
call this .children.forEach(child,

153
00:12:18.013 --> 00:12:25.434
child._complete substring is built and
this .value.

154
00:12:25.434 --> 00:12:25.934
God damn it.

155
00:12:27.850 --> 00:12:31.560
That,
&gt;&gt; Brian Holt: Because it's never building

156
00:12:31.560 --> 00:12:32.310
anything, right?

157
00:12:32.310 --> 00:12:33.405
So it's just gonna blink.

158
00:12:35.481 --> 00:12:36.610
&gt;&gt; Brian Holt: I blame all of you.

159
00:12:36.610 --> 00:12:38.175
I feel like you all
should have caught this.

160
00:12:38.175 --> 00:12:40.280
&gt;&gt; Speaker 2: [LAUGH]
&gt;&gt; Brian Holt: What do I pay you for?

161
00:12:40.280 --> 00:12:45.164
[LAUGH] All right, so now hopefully,

162
00:12:49.872 --> 00:12:50.974
&gt;&gt; Brian Holt: Is it as well?

163
00:12:50.974 --> 00:12:53.325
That's actually probably
where the real problem is.

164
00:13:00.182 --> 00:13:02.703
&gt;&gt; Brian Holt: Well,
this is hopefully at least progress.

165
00:13:07.792 --> 00:13:09.010
&gt;&gt; Brian Holt: Now it just as built a lot.

166
00:13:09.010 --> 00:13:10.382
That's nice.

167
00:13:11.772 --> 00:13:12.530
&gt;&gt; Brian Holt: All right.

168
00:13:20.744 --> 00:13:22.438
&gt;&gt; Brian Holt: Build starts
with an empty string.

169
00:13:24.245 --> 00:13:27.752
&gt;&gt; Brian Holt: Suggestions
this.terminus built this .value,

170
00:13:27.752 --> 00:13:33.140
which means that these probably aren't
getting values where they should be.

171
00:13:33.140 --> 00:13:38.333
So string,
&gt;&gt; Brian Holt: As zero.

172
00:13:38.333 --> 00:13:40.090
Zero is nothing, that doesn't help.

173
00:13:40.090 --> 00:13:40.920
So it's string.

174
00:13:42.590 --> 00:13:44.022
There was multiple problems here.

175
00:13:46.540 --> 00:13:48.390
&gt;&gt; Speaker 2: I was actually
gonna ask about that, and

176
00:13:48.390 --> 00:13:50.170
then I didn't say anything.

177
00:13:50.170 --> 00:13:52.551
&gt;&gt; Brian Holt: So what you're
saying is that, this is your fault?

178
00:13:52.551 --> 00:13:54.149
&gt;&gt; Speaker 2: [LAUGH]
&gt;&gt; Brian Holt: That's what I hear.

179
00:13:54.149 --> 00:13:56.396
&gt;&gt; Speaker 2: Yeah, I was like why's
he putting a 0 in an array and

180
00:13:56.396 --> 00:13:58.190
setting it to the value?

181
00:13:58.190 --> 00:13:59.190
&gt;&gt; Brian Holt: Okay, cool.

182
00:14:01.200 --> 00:14:02.394
So there we found it.

183
00:14:04.393 --> 00:14:06.477
&gt;&gt; Brian Holt: Were we
rolling the whole time?

184
00:14:06.477 --> 00:14:09.214
&gt;&gt; [INAUDIBLE]
&gt;&gt; Brian Holt: Okay, cool.

185
00:14:09.214 --> 00:14:11.515
So, we did it.

186
00:14:13.489 --> 00:14:14.960
&gt;&gt; Brian Holt: Team effort.

187
00:14:14.960 --> 00:14:15.550
We got it.

188
00:14:15.550 --> 00:14:18.127
So, the problem was here.

189
00:14:18.127 --> 00:14:21.040
We weren't adding the string
zero to be the value.

190
00:14:22.170 --> 00:14:26.125
So, there you go, now we're seeing
the entire data set being added.

191
00:14:26.125 --> 00:14:27.870
It should handle the edge cases as well.

192
00:14:34.232 --> 00:14:35.130
&gt;&gt; Brian Holt: See what happens.

193
00:14:36.770 --> 00:14:40.210
Yep, handle no match, handle Seattle,
handle words that are a subset of another,

194
00:14:40.210 --> 00:14:41.280
like Selena's.

195
00:14:41.280 --> 00:14:44.510
So, cool, any questions?

196
00:14:44.510 --> 00:14:45.897
Before we move on.

197
00:14:49.513 --> 00:14:50.020
&gt;&gt; Brian Holt: Awesome.

