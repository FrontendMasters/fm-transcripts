WEBVTT

1
00:00:00.380 --> 00:00:02.790
&gt;&gt; Brian Holt: Let's take
a look at our exercises.

2
00:00:02.790 --> 00:00:06.150
This one does have some
visualization to help you out.

3
00:00:06.150 --> 00:00:08.720
In fact, let's show you what it
looks like when it's completed.

4
00:00:14.883 --> 00:00:16.260
&gt;&gt; Brian Holt: So these are the mazes.

5
00:00:16.260 --> 00:00:18.170
Exactly what they should look
like by the time you're done.

6
00:00:19.340 --> 00:00:21.220
You're gonna be calling
randomized directions, but

7
00:00:21.220 --> 00:00:24.340
randomized directions actually
is not randomizing them for you.

8
00:00:24.340 --> 00:00:27.460
It's gonna give you back
a set same of directions, so

9
00:00:27.460 --> 00:00:31.140
that I can tell that you're doing
the maze the correct way, right?

10
00:00:31.140 --> 00:00:33.680
So you get to assume it's
random even though it's not.

11
00:00:35.290 --> 00:00:39.470
If you call randomized direction too many
times, you're gonna see a big console

12
00:00:39.470 --> 00:00:43.590
warning in your console that says, by
the way you called this too many times so

13
00:00:43.590 --> 00:00:45.200
I'm just gonna give you
back something random but

14
00:00:45.200 --> 00:00:46.990
you're probably not gonna
get this correct so.

15
00:00:48.310 --> 00:00:49.320
Be aware that that happens.

16
00:00:49.320 --> 00:00:54.609
So this is what the 5 x 5 one should look
like, the 8 x 8, the 15 x 15 will look

17
00:00:54.609 --> 00:01:02.284
something like that.
&gt;&gt; Brian Holt: Okay?

18
00:01:02.284 --> 00:01:10.711
So, and let's see.
&gt;&gt; Brian Holt: The maze

19
00:01:10.711 --> 00:01:13.690
will be an array of arrays of objects,
right?

20
00:01:13.690 --> 00:01:15.834
We're familiar with arrays of arrays.

21
00:01:15.834 --> 00:01:16.790
0 x 0 is here.

22
00:01:18.000 --> 00:01:22.130
And then,
each one of these objects has a visited,

23
00:01:22.130 --> 00:01:24.000
whether it's been visited or not, right?

24
00:01:24.000 --> 00:01:26.350
So you're gonna set that to true
as soon as it's been visited.

25
00:01:26.350 --> 00:01:28.621
And then you're gonna see
here that it has walls.

26
00:01:31.287 --> 00:01:31.943
&gt;&gt; Brian Holt: By default,

27
00:01:31.943 --> 00:01:35.790
everything given to you in the first
go is going to have a wall, right?

28
00:01:35.790 --> 00:01:37.330
All of these have walls between them.

29
00:01:39.350 --> 00:01:42.680
As you get through more and more of them,

30
00:01:42.680 --> 00:01:46.630
you'll be setting these to false
when there's no wall between them.

31
00:01:46.630 --> 00:01:49.180
Remember that for all these operations.

32
00:01:49.180 --> 00:01:55.520
So like if I'm going from 0 0 to 1 0 I

33
00:01:55.520 --> 00:02:00.200
have to set 0 0's north wall to false and

34
00:02:00.200 --> 00:02:02.450
I also have to set 1 0
south wall to false so

35
00:02:02.450 --> 00:02:08.100
there are two walls you have to tear down,
okay?

36
00:02:09.450 --> 00:02:13.760
The outer array represents the Y axis,
the inner array represents the X axis.

37
00:02:13.760 --> 00:02:17.760
So your accessors look like that,
[y][x], similar to before.

38
00:02:19.640 --> 00:02:21.770
The starting coordinate will be a pair.

39
00:02:21.770 --> 00:02:26.020
It's gonna be 5, 4, something like that.

40
00:02:26.020 --> 00:02:28.440
You don't have to do any
boundary checkings on this.

41
00:02:28.440 --> 00:02:31.400
I guarantee you that I'm gonna
give you a well formatted graph.

42
00:02:31.400 --> 00:02:34.430
And I'm going to give you
valid starting points, right.

43
00:02:34.430 --> 00:02:38.302
So I'm not interested in the educations
here, I'm just interested in you getting

44
00:02:38.302 --> 00:02:45.208
the algorithms down.
&gt;&gt; Male 2: Does direction include

45
00:02:45.208 --> 00:02:49.570
directions that are not on the graph?
&gt;&gt; Brian Holt: That one will, yeah.

46
00:02:49.570 --> 00:02:51.680
So those ones you definitely do
have to do boundary checking.

47
00:02:54.820 --> 00:02:57.643
This randomized direction
function is available

48
00:02:57.643 --> 00:03:02.263
globally.
&gt;&gt; Brian Holt: The other thing is,

49
00:03:02.263 --> 00:03:05.010
you can work on the maze directly itself.

50
00:03:05.010 --> 00:03:07.670
Don't worry about being
destructive on your parameters.

51
00:03:07.670 --> 00:03:09.530
That's never a bad idea, I'm just kidding,

52
00:03:09.530 --> 00:03:14.020
that's usually always a bad idea but
that's fine in this particular case.

53
00:03:14.020 --> 00:03:15.169
It's gonna be returning, so

54
00:03:15.169 --> 00:03:19.320
randomizedDirections will be returning
north, east, south, west, in some order.

55
00:03:19.320 --> 00:03:21.133
And then you just follow those in

56
00:03:21.133 --> 00:03:25.905
that order.
&gt;&gt; Brian Holt: If you're messing

57
00:03:25.905 --> 00:03:29.819
around with this later,
if you're a nerd like me,

58
00:03:29.819 --> 00:03:34.918
if you do setOrder(null) this will
actually make it truly random

59
00:03:34.918 --> 00:03:40.720
if you want to like generate your own
fun graphs, which I have never done.

60
00:03:40.720 --> 00:03:42.000
I'm not that nerdy, just kidding.

61
00:03:42.000 --> 00:03:44.219
I totally did.
&gt;&gt; Brian Holt: Yeah and

62
00:03:44.219 --> 00:03:47.973
you'll see a console error if you
call randomize directions too

63
00:03:47.973 --> 00:03:55.420
much.
&gt;&gt; Brian Holt: So

64
00:03:55.420 --> 00:03:59.430
something that you'll get from
this helper which I found helpful.

65
00:03:59.430 --> 00:04:02.200
If the square's red,
it means that it's not visited.

66
00:04:02.200 --> 00:04:04.470
Everything should be visited by the end.

67
00:04:04.470 --> 00:04:06.020
And then you'll also be able to see.

68
00:04:06.020 --> 00:04:09.130
You can see the north wall here, and
you can see the south wall here, right?

69
00:04:09.130 --> 00:04:13.300
So if you can, you'll be able to tell if
one of them hasn't been visited, or not.

70
00:04:14.670 --> 00:04:17.467
If you'd like to see all the utility
functions, they're all written out here in

71
00:04:17.467 --> 00:04:22.488
this other code pen.
&gt;&gt; Brian Holt: Highly, highly suggest here

72
00:04:22.488 --> 00:04:25.502
that you work on one unit test at a time,
and try not to solve all of them at once,

73
00:04:25.502 --> 00:04:28.360
because there's a decent chance
you're gonna hit infinite recursion.

74
00:04:30.830 --> 00:04:35.120
If you do hit infinite recursion and
you save your CodePen that can be a bit of

75
00:04:35.120 --> 00:04:39.810
a disaster, because CodePen will run
things as soon as you open the tab again.

76
00:04:39.810 --> 00:04:45.760
So there is a way, if you just Google
CodePen disable JavaScript, it will show

77
00:04:45.760 --> 00:04:50.510
you how to make it not run it so you can
fix it, save it, and then reload the page.

78
00:04:50.510 --> 00:04:56.496
So just Google it.
&gt;&gt; Brian Holt: Cool,

79
00:04:56.496 --> 00:05:00.640
so you can see here this is what
it's gonna expect to look for.

80
00:05:02.230 --> 00:05:05.844
This is quite long because
15 x 15 is a lot of

81
00:05:05.844 --> 00:05:09.900
cells.
&gt;&gt; Brian Holt: Cool.

82
00:05:11.380 --> 00:05:14.390
So, I'm gonna give you a bit
of a break to do this.

