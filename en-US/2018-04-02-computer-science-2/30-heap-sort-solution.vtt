WEBVTT

1
00:00:00.370 --> 00:00:00.983
&gt;&gt; Brian Holt: Okay, so

2
00:00:00.983 --> 00:00:05.947
let's go ahead and,
&gt;&gt; Brian Holt: Take a look at how to

3
00:00:05.947 --> 00:00:06.504
do this.

4
00:00:17.294 --> 00:00:18.706
&gt;&gt; Brian Holt: This requires about 50

5
00:00:18.706 --> 00:00:25.672
lines of code.
&gt;&gt; Brian Holt: So

6
00:00:25.672 --> 00:00:30.529
you're gonna create
a function here called, so

7
00:00:30.529 --> 00:00:37.400
the snapshot thing is how I'm able
to show the visualization there,

8
00:00:37.400 --> 00:00:42.258
so you can just basically ignore it.
&gt;&gt; Brian Holt: And

9
00:00:42.258 --> 00:00:46.314
I gave you here, basically, the guts.

10
00:00:46.314 --> 00:00:50.994
So you're gonna have a createMaxHeap
function, a heapify function,

11
00:00:50.994 --> 00:00:52.554
and then the heapSort,

12
00:00:52.554 --> 00:00:57.861
which is intern going to call both of
those functions internally from heapSort.

13
00:00:57.861 --> 00:01:03.105
So let's start with the create max-heap,
it's a pretty simple one.

14
00:01:03.105 --> 00:01:07.935
All you're gonna do is you're

15
00:01:07.935 --> 00:01:12.578
gonna start with a for loop and

16
00:01:12.578 --> 00:01:16.969
say let i is 0.
&gt;&gt; Brian Holt: Sorry,

17
00:01:16.969 --> 00:01:22.847
i = Math.floor,
&gt;&gt; Brian Holt: Of

18
00:01:22.847 --> 00:01:28.347
array.length divided by 2,
and i is greater than or

19
00:01:28.347 --> 00:01:33.004
equal to 0, and then i minus minus, right?

20
00:01:33.004 --> 00:01:35.344
So you're gonna start from
the middle of the array and

21
00:01:35.344 --> 00:01:39.982
go backwards.
&gt;&gt; Brian Holt: Then you're

22
00:01:39.982 --> 00:01:43.483
just gonna call heapify on array, i, and

23
00:01:43.483 --> 00:01:51.077
array length.
&gt;&gt; Brian Holt: And

24
00:01:51.077 --> 00:01:56.163
you're gonna return to the array.
&gt;&gt; Brian Holt: So

25
00:01:56.163 --> 00:01:59.171
the array, right, that makes sense.

26
00:01:59.171 --> 00:02:01.838
The index of where we currently are,
that probably makes sense as well,

27
00:02:01.838 --> 00:02:03.440
cuz we're gonna be heapifying.

28
00:02:03.440 --> 00:02:08.885
And then we have to give it the heap size,
because remember when we're doing the heap

29
00:02:08.885 --> 00:02:13.961
sort part of it, the heap size makes a
difference of where and how far it can go.

30
00:02:13.961 --> 00:02:17.529
And you don't want it to go to the end of
the array when we're doing heap sort cuz

31
00:02:17.529 --> 00:02:20.032
otherwise it would mess up
the sorted part of the list.

32
00:02:20.032 --> 00:02:23.032
We wanna progressively make
our heap smaller and smaller,

33
00:02:23.032 --> 00:02:27.821
which is why we're passing in heap size.
&gt;&gt; Brian Holt: So let's take

34
00:02:27.821 --> 00:02:32.602
a look at what heapify looks like.
&gt;&gt; Brian Holt: So

35
00:02:32.602 --> 00:02:38.824
here you're going to do,
&gt;&gt; Brian Holt: We'll call it at the end,

36
00:02:41.682 --> 00:02:44.331
&gt;&gt; Brian Holt: Const left = 2.

37
00:02:44.331 --> 00:02:48.204
So this is gonna be the left
child times index +1.

38
00:02:48.204 --> 00:02:52.103
Const right = 2 times index + 2.

39
00:02:55.931 --> 00:02:59.649
&gt;&gt; Brian Holt: So you're gonna say

40
00:02:59.649 --> 00:03:04.461
let largest ValueIndex =

41
00:03:04.461 --> 00:03:09.283
index.
&gt;&gt; Brian Holt: Then here I'm

42
00:03:09.283 --> 00:03:10.970
just gonna ask, if the left child bigger?

43
00:03:10.970 --> 00:03:12.441
Is the right child bigger?

44
00:03:12.441 --> 00:03:17.641
And if one of them was bigger,
then I'll swap them.

45
00:03:17.641 --> 00:03:20.289
If one of them's not bigger,
then I'll leave it, right?

46
00:03:20.289 --> 00:03:25.339
So I'm going to ask if

47
00:03:25.339 --> 00:03:30.389
heapSize, that is,

48
00:03:30.389 --> 00:03:35.448
yeah, yeah, yeah.

49
00:03:35.448 --> 00:03:41.564
So if heapSize is like out of
bounds that I'm not gonna check it,

50
00:03:41.564 --> 00:03:48.152
which is what you're doing here,
then you're gonna say end array.

51
00:03:50.100 --> 00:03:55.015
&gt;&gt; Brian Holt: Array largest value index

52
00:03:55.015 --> 00:04:01.725
is less than array of left, right?

53
00:04:01.725 --> 00:04:02.677
So,

54
00:04:13.240 --> 00:04:13.915
&gt;&gt; Brian Holt: So the first time

55
00:04:13.915 --> 00:04:16.673
the largest value, you could just
as easily put index here as well.

56
00:04:16.673 --> 00:04:20.382
I just think it's a little
bit easier to read this way.

57
00:04:20.382 --> 00:04:25.852
So if left is greater than the parent,
right?

58
00:04:25.852 --> 00:04:29.888
The index,
then we're gonna swap the left child in.

59
00:04:29.888 --> 00:04:36.169
So largestValueIndex = left,

60
00:04:36.169 --> 00:04:41.254
if(heapSize
&gt;&gt; Brian Holt: If

61
00:04:41.254 --> 00:04:47.796
right is in bounds,
then you're gonna say and

62
00:04:47.796 --> 00:04:51.832
array largestValueIndex.

63
00:04:51.832 --> 00:04:57.035
Array right.
&gt;&gt; Brian Holt: Then

64
00:04:57.035 --> 00:05:02.124
you're gonna say
largestValueIndex = right.

65
00:05:02.124 --> 00:05:03.020
Okay?

66
00:05:03.020 --> 00:05:03.956
So now I know for

67
00:05:03.956 --> 00:05:08.351
a fact that the largest value index
is definitely contained in this one.

68
00:05:08.351 --> 00:05:11.607
It's either the parent,
the left child, or the right child,

69
00:05:11.607 --> 00:05:13.523
after doing these two comparisons.

70
00:05:13.523 --> 00:05:19.252
Then I'm gonna say if
the largestValueIndex

71
00:05:19.252 --> 00:05:23.480
is not equal to, index, right?

72
00:05:23.480 --> 00:05:27.184
So If either the left child or the right
child is bigger then we have to do a swap.

73
00:05:27.184 --> 00:05:30.890
If it is the parent,
then you just leave it.

74
00:05:30.890 --> 00:05:34.047
Cool, do you follow?
&gt;&gt; Brian Holt: Okay,

75
00:05:34.047 --> 00:05:37.475
then what we're gonna do
is just do a swap, right?

76
00:05:37.475 --> 00:05:43.768
const temp = array[index];

77
00:05:43.768 --> 00:05:47.498
array[index] =

78
00:05:47.498 --> 00:05:56.342
array[largestValueIndex].
&gt;&gt; Brian Holt: Then,

79
00:05:56.342 --> 00:05:59.681
you're just gonna say
array[largestValueIndex] is

80
00:05:59.681 --> 00:06:04.328
gonna be assigned temp.
&gt;&gt; Brian Holt: And

81
00:06:04.328 --> 00:06:07.720
then at this point, if you remember,
if we do heapify something,

82
00:06:07.720 --> 00:06:10.092
we have to heapify
the child that's swapped.

83
00:06:10.092 --> 00:06:13.332
Because we have to guarantee that
order still maintains further

84
00:06:13.332 --> 00:06:14.860
down the tree as well.

85
00:06:14.860 --> 00:06:17.579
So only if one of the swaps happens,

86
00:06:17.579 --> 00:06:22.848
we're gonna call it heapify on
the array at the largestValueIndex.

87
00:06:22.848 --> 00:06:27.261
And heapSize,
&gt;&gt; Brian Holt: Does

88
00:06:27.261 --> 00:06:31.389
that make sense?
&gt;&gt; Student1: Are you keeping track of

89
00:06:31.389 --> 00:06:35.591
the heapSize, because you're slowly making
it smaller until the whole thing is

90
00:06:35.591 --> 00:06:36.100
sorted?

91
00:06:36.100 --> 00:06:37.150
&gt;&gt; Brian Holt: Exactly.
&gt;&gt; Student1: Okay.

92
00:06:37.150 --> 00:06:38.236
&gt;&gt; Brian Holt: So the heap continues to

93
00:06:38.236 --> 00:06:39.982
get smaller and smaller and smaller.

94
00:06:39.982 --> 00:06:41.840
If I included the entire
array every single time,

95
00:06:41.840 --> 00:06:44.273
I would swap something to the end,
and then it would just get moved

96
00:06:44.273 --> 00:06:45.460
back up to the front.
&gt;&gt; Student1: Okay,

97
00:06:45.460 --> 00:06:47.135
you would never sort it.
&gt;&gt; Brian Holt: Yeah.

98
00:06:47.135 --> 00:06:49.240
&gt;&gt; Student1: Okay.

99
00:06:49.240 --> 00:06:51.183
&gt;&gt; Brian Holt: But that's astute.

100
00:06:51.183 --> 00:06:52.674
&gt;&gt; Student2: I think you have the wrong

101
00:06:52.674 --> 00:06:55.307
greater and less-than on the right check.

102
00:07:02.643 --> 00:07:04.945
&gt;&gt; Brian Holt: I don't think so.

103
00:07:04.945 --> 00:07:06.438
&gt;&gt; Student2: Cuz you're saying the current

104
00:07:06.438 --> 00:07:10.285
one is greater than the right one, but
you're assigning right to the current or

105
00:07:10.285 --> 00:07:11.910
to the largest.
&gt;&gt; Brian Holt: Right.

106
00:07:11.910 --> 00:07:13.199
No, you're right, here.

107
00:07:13.199 --> 00:07:16.158
I was looking at this one.
&gt;&gt; Student2: Yeah.

108
00:07:16.158 --> 00:07:16.880
&gt;&gt; Brian Holt: You were correct,

109
00:07:16.880 --> 00:07:22.072
thank you.
&gt;&gt; Brian Holt: Okay,

110
00:07:22.072 --> 00:07:23.630
so now I have heapify.

111
00:07:23.630 --> 00:07:25.031
I have createMaxHeap.

112
00:07:25.031 --> 00:07:29.426
So definitely when I call createMaxHeap,

113
00:07:29.426 --> 00:07:36.270
at the end of that whole process I
will have a valid MaxHeap, okay?

114
00:07:36.270 --> 00:07:41.729
So what I'm gonna do here in
heapSort the first thing I'm going

115
00:07:41.729 --> 00:07:47.192
to do is say that array is assigned
createMaxHeap of the array.

116
00:07:47.192 --> 00:07:53.459
So now array is an assorted max heap.

117
00:07:53.459 --> 00:07:58.793
Then I'm gonna have this temp variable and
I'm gonna say for(let i = 0,

118
00:08:01.130 --> 00:08:03.804
&gt;&gt; Brian Holt: Sorry let i = array.length

119
00:08:03.804 --> 00:08:07.927
-1, cuz you can you don't have to start,

120
00:08:07.927 --> 00:08:14.734
yeah you don't have to do the last one
cuz by that point it will be sorted.

121
00:08:14.734 --> 00:08:23.622
i &gt; 0 and i --.
&gt;&gt; Brian Holt: Okay?

122
00:08:23.622 --> 00:08:25.880
So what you're gonna do is
you're gonna say temp go to

123
00:08:25.880 --> 00:08:30.648
the end.
&gt;&gt; Brian Holt: Or

124
00:08:30.648 --> 00:08:33.377
rather temp is going to be the first item.

125
00:08:33.377 --> 00:08:37.531
array[0] is going to become array at i,
right?

126
00:08:37.531 --> 00:08:45.647
Because we're going to be swapping these.
&gt;&gt; Brian Holt: array

127
00:08:45.647 --> 00:08:51.367
i is going to be assigned temp,
heapSize--,

128
00:08:51.367 --> 00:08:59.243
and then you're gonna call
heapify with the array, 0, right?

129
00:08:59.243 --> 00:09:02.381
Cuz heapify, you're always starting
from the beginning, right,

130
00:09:02.381 --> 00:09:04.230
because that's the one you swapped in.

131
00:09:04.230 --> 00:09:08.992
And heapSize which is
progressively getting smaller each

132
00:09:08.992 --> 00:09:11.819
time that you do it.
&gt;&gt; Student2: Where are you setting

133
00:09:11.819 --> 00:09:13.216
heapSize?
&gt;&gt; Brian Holt: Right here,

134
00:09:13.216 --> 00:09:21.389
the -- previous to it.
&gt;&gt; Brian Holt: And

135
00:09:21.389 --> 00:09:26.919
I didn't do it up here,
no you're right, up here,

136
00:09:26.919 --> 00:09:36.421
let heapSize start as the array.length.
&gt;&gt; Brian Holt: So

137
00:09:36.421 --> 00:09:39.860
again, just to walk you through it.

138
00:09:39.860 --> 00:09:42.383
Treat your variables up here,

139
00:09:42.383 --> 00:09:46.953
heapSize is going to be
the entire array the first time.

140
00:09:46.953 --> 00:09:49.613
We're going to make the array a max heap,

141
00:09:49.613 --> 00:09:54.864
which we do here by calling heapify on
every individual item in the array, right?

142
00:09:54.864 --> 00:09:58.205
Or rather, make sure that every
item gets affected by a heapify,

143
00:09:58.205 --> 00:10:00.100
which is why you start in the middle.

144
00:10:00.100 --> 00:10:04.544
Because remember, it's 2n plus 1, which
means if I'm heapifying from the middle,

145
00:10:04.544 --> 00:10:07.021
it's going to be looking
at the end of the array.

146
00:10:07.021 --> 00:10:09.940
Which is why that works.

147
00:10:09.940 --> 00:10:13.403
Heapify just goes through, and just makes
sure that the parent is always larger than

148
00:10:13.403 --> 00:10:15.412
the children,
that's the entire gist of that.

149
00:10:15.412 --> 00:10:17.366
If not, it sweeps, it swaps them and

150
00:10:17.366 --> 00:10:20.910
then it makes sure to call heapify
on the children that it swapped.

151
00:10:20.910 --> 00:10:23.346
Only the children that it swapped.

152
00:10:23.346 --> 00:10:26.871
Once we've done that we have a max
heap and we can go from there.

153
00:10:26.871 --> 00:10:34.120
And just be swapping out items and
calling heapify on the zero element.

154
00:10:34.120 --> 00:10:38.879
So, hopefully,
that gives us a sorted array.

155
00:10:38.879 --> 00:10:42.237
It does.
&gt;&gt; Brian Holt: How do you

156
00:10:42.237 --> 00:10:42.831
feel about heaps?

157
00:10:42.831 --> 00:10:44.789
Does that make some sense?

158
00:10:44.789 --> 00:10:45.391
Cool.

159
00:10:45.391 --> 00:10:48.942
It's a little difficult
to explain this a little,

160
00:10:48.942 --> 00:10:52.831
It's not terribly concrete
until you actually see it.

161
00:10:52.831 --> 00:10:55.640
But yeah, hopefully that explains it.

162
00:10:55.640 --> 00:10:59.315
If you wanna see what it looks like
when you do a lot more numbers,

163
00:10:59.315 --> 00:11:04.935
you can just swap these tests out, run it.
&gt;&gt; Brian Holt: And

164
00:11:04.935 --> 00:11:08.675
you can see that the nice
pretty colored gradients.

