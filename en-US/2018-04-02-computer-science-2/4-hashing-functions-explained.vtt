WEBVTT

1
00:00:00.040 --> 00:00:01.820
&gt;&gt; Brian Holt: Cool, so
let's take a look at the exercise.

2
00:00:01.820 --> 00:00:02.502
Yeah, Mark.
&gt;&gt; Mark: So

3
00:00:02.502 --> 00:00:07.220
these hashing functions could
give the same values even for

4
00:00:07.220 --> 00:00:09.607
different key values?
&gt;&gt; Brian Holt: Yeah.

5
00:00:09.607 --> 00:00:16.595
So that's actually probably
a good point to bring up.

6
00:00:16.595 --> 00:00:21.728
Let's just quickly just show
you what we mean there.

7
00:00:21.728 --> 00:00:26.098
So I'm gonna have some array of,
let's just say 5 for

8
00:00:26.098 --> 00:00:33.062
sake of brevity.
&gt;&gt; Brian Holt: So

9
00:00:33.062 --> 00:00:37.893
what's cool about hashing functions
is that the item that you're

10
00:00:37.893 --> 00:00:42.650
trying to store in this particular
array is also the key, right?

11
00:00:42.650 --> 00:00:46.978
So it's the key of what's getting put in
there, because you put the string into

12
00:00:46.978 --> 00:00:49.828
the hashing function,
it gives you back the index.

13
00:00:49.828 --> 00:00:53.750
Now in this particular case,
my index is only 5 long, right?

14
00:00:53.750 --> 00:00:57.134
So if it gives me a hash back of 13,
right,

15
00:00:57.134 --> 00:01:01.899
I'm outside of the array and
it's no longer useful, right?

16
00:01:01.899 --> 00:01:05.422
So what we're gonna do is we're basically
going to run it through some of

17
00:01:05.422 --> 00:01:06.590
the hashing function.

18
00:01:06.590 --> 00:01:11.210
Let's say it gives me back 13, but
then I'm just gonna run modulus,

19
00:01:11.210 --> 00:01:14.994
modulo, whatever you want to
call that percentage sign.

20
00:01:14.994 --> 00:01:19.280
[LAUGH] Whatever the length
of the array is.

21
00:01:21.520 --> 00:01:25.733
This is actually gonna give me back 3,
which is going to be inside of that.

22
00:01:25.733 --> 00:01:27.885
Now if you're not familiar
with this operator,

23
00:01:27.885 --> 00:01:30.900
it's available in just about
every programming language.

24
00:01:30.900 --> 00:01:32.337
It's extremely important.

25
00:01:32.337 --> 00:01:35.916
But if you remember doing
long division in school,

26
00:01:35.916 --> 00:01:40.240
you would say that this is
two remainder three, right?

27
00:01:40.240 --> 00:01:43.968
If you were doing 13 divided by
5 what modulus does is it just

28
00:01:43.968 --> 00:01:47.982
ignores the integer division part of it,
the first part of it, and

29
00:01:47.982 --> 00:01:50.580
gets you just the remainder back, right?

30
00:01:50.580 --> 00:01:55.564
So that way if run the modulus 5
through it you're always gonna get

31
00:01:55.564 --> 00:01:58.058
something inside of your array.

32
00:01:58.058 --> 00:01:59.540
Hopefully I answered
that person's question.

