WEBVTT

1
00:00:01.550 --> 00:00:05.320
&gt;&gt; Brian Holt: Welcome back, and
congratulations, you've survived so far.

2
00:00:06.550 --> 00:00:09.730
You deserve a merit badge of some sort.

3
00:00:09.730 --> 00:00:13.310
Lastly, we're gonna do one
last sort called a radix sort.

4
00:00:14.640 --> 00:00:18.960
This is a very different sort than
what we've been looking at previously.

5
00:00:18.960 --> 00:00:20.820
It's called a non-comparator sort.

6
00:00:22.490 --> 00:00:24.270
So it isn't n log n.

7
00:00:24.270 --> 00:00:28.490
It can't be [COUGH] anything like that.

8
00:00:28.490 --> 00:00:34.090
In fact, something that's interesting
about comparators versus anything else, is

9
00:00:34.090 --> 00:00:38.880
when you're doing comparisons, the reason
why something is n squared is because

10
00:00:38.880 --> 00:00:42.030
I'm taking one item and I'm comparing
it to every other item in the array.

11
00:00:42.030 --> 00:00:43.990
That's what makes an n squared sort.

12
00:00:45.200 --> 00:00:50.180
If something is n login, it looks at
every item at least once in the array,

13
00:00:50.180 --> 00:00:52.080
which is where the n comes from.

14
00:00:52.080 --> 00:00:53.690
Mathematically, that must happen.

15
00:00:55.510 --> 00:00:59.030
And then I'm only comparing it
against some other items in the array,

16
00:00:59.030 --> 00:01:02.700
using that to make assumptions,
that if this item is bigger than this one,

17
00:01:02.700 --> 00:01:05.200
then it's definitely
bigger than the other one.

18
00:01:05.200 --> 00:01:09.750
Using those mathematical properties
to only make some comparisons.

19
00:01:09.750 --> 00:01:12.760
They've proven that
using comparator sorts,

20
00:01:12.760 --> 00:01:15.090
that the fasted you can go is n log n.

21
00:01:15.090 --> 00:01:17.210
It's mathematically
impossible to go any faster.

22
00:01:18.640 --> 00:01:21.778
Everything else is just
making the coefficients.

23
00:01:21.778 --> 00:01:25.222
You're only doing slightly less
instructions, but you still have to do

24
00:01:25.222 --> 00:01:28.900
the same amount of comparisons or at
least there is an absolute floor to that.

25
00:01:30.850 --> 00:01:35.070
Radic sort is quite different in that,
it doesn't actually make any comparisons.

26
00:01:35.070 --> 00:01:37.140
It's never comparing one
thing versus the other.

27
00:01:37.140 --> 00:01:41.960
It's doing some different some
orthogonal sorta thing that makes it so

28
00:01:41.960 --> 00:01:45.200
that you can actually go faster
in certain circumstances.

29
00:01:47.210 --> 00:01:50.170
Now, I'm gonna show you the more
simple way of doing this but

30
00:01:50.170 --> 00:01:53.130
you can actually get this to go even
faster than what I'm going to show you.

31
00:01:55.150 --> 00:01:58.740
So first thing you must be asking is like,

32
00:01:58.740 --> 00:02:03.510
how do you faster versus how do you sort
something but never comparing anything.

33
00:02:04.760 --> 00:02:11.610
And it's kind of
an interesting methodology.

34
00:02:11.610 --> 00:02:15.120
Something that I would have never
thought of but let's chat about it.

35
00:02:16.960 --> 00:02:18.950
So assume that we have
an array that looks like this.

36
00:02:18.950 --> 00:02:24.583
10, 1, 52, 102, 33, 45, 6, 18 and 9.

37
00:02:24.583 --> 00:02:29.877
What we're going to do is we're
going to create 10 queues.

38
00:02:29.877 --> 00:02:32.681
You're probably sick about
hearing about queues by now but

39
00:02:32.681 --> 00:02:34.710
deal with it you have
one more to deal with.

40
00:02:36.330 --> 00:02:40.060
I'm then going to un unqueue
each one of these items

41
00:02:40.060 --> 00:02:44.610
in 1 of 10 different queues
based on solely the 1 place.

42
00:02:46.950 --> 00:02:51.130
So let's look down here at this little
example right here that I have in

43
00:02:51.130 --> 00:02:52.170
the documentation.

44
00:02:54.090 --> 00:03:00.057
So I'm going to create ten queues,
one for each number that is possible.

45
00:03:00.057 --> 00:03:03.740
0, 1, 2, 3, 4, 5, 6, 7, 8, 9.

46
00:03:03.740 --> 00:03:08.860
And I'm going to unqueue each one
of those based on solely the ones

47
00:03:08.860 --> 00:03:11.210
place in each one of these queues.

48
00:03:11.210 --> 00:03:15.380
So this 1's gonna go in the 9 queue and
these 2 are going to go in the 7 queue.

49
00:03:15.380 --> 00:03:18.270
And they just go in in the same order
that they're in the array already.

50
00:03:20.088 --> 00:03:26.319
Once I've unqueued all of those then I'm
going to dequeue all of them in order so

51
00:03:26.319 --> 00:03:32.749
they're gonna come back out as just
like you see here 347, 457 and 359.

52
00:03:32.749 --> 00:03:36.650
It's the same order but I did the 7's
first and then I did the 9's.

53
00:03:36.650 --> 00:03:38.500
Does that make sense?

54
00:03:38.500 --> 00:03:43.370
So actually if you look at this,
it is sorted by the ones place.

55
00:03:43.370 --> 00:03:47.808
If you just ignore the rest of the number,
it is sorta based on it,

56
00:03:47.808 --> 00:03:49.602
cuz you have 7, 7, 9.

57
00:03:49.602 --> 00:03:51.740
I'm then gonna go through and

58
00:03:51.740 --> 00:03:56.880
unqueue these based on just the tens
places, ignoring the ones place.

59
00:03:56.880 --> 00:04:01.400
Ignoring everything to the left and just
unqueue everything, this one's going to go

60
00:04:01.400 --> 00:04:04.930
in fours, this one's going to go fives,
this one's going to go in fives.

61
00:04:04.930 --> 00:04:08.153
Then I unqueue those into those and
then I'm going to dequeue, again,

62
00:04:08.153 --> 00:04:08.860
them in order.

63
00:04:10.510 --> 00:04:15.779
So that's actually ends up being the same
order, but I dequeue them in that order.

64
00:04:15.779 --> 00:04:22.399
So 4, 7, 5, 9 and 5, 7.

65
00:04:22.399 --> 00:04:27.241
If you look at this, ignoring
the 100s place, they are in order.

66
00:04:27.241 --> 00:04:32.954
47, 59 and

67
00:04:32.954 --> 00:04:35.592
57.

68
00:04:35.592 --> 00:04:37.110
Why did this get out of order?

69
00:04:41.120 --> 00:04:42.700
This isn't correct.

70
00:04:42.700 --> 00:04:47.978
Let's go in reverse, anyway,

71
00:04:47.978 --> 00:04:53.570
I assure you it will be in order.

72
00:04:53.570 --> 00:04:59.190
Lastly, you go through,
it's because I'm one step ahead of this so

73
00:04:59.190 --> 00:05:04.193
47, 57 and 59,
that's what I was getting mixed up about.

74
00:05:04.193 --> 00:05:07.630
So 47, 57, 59, it's not in order
cuz of the hundreds are different.

75
00:05:07.630 --> 00:05:11.047
But I'm gonna do the same thing
with the hundreds place and

76
00:05:11.047 --> 00:05:14.640
once I've done that then it's 347,
359 and 457.

77
00:05:14.640 --> 00:05:15.220
So at that point,

78
00:05:15.220 --> 00:05:19.660
once I've done it based on the 100s
then it just comes out in order.

79
00:05:19.660 --> 00:05:23.212
So that's more or less what's kinda
happening, is like put the ones in order,

80
00:05:23.212 --> 00:05:25.450
put the 10s in order,
put the 100s in order.

81
00:05:25.450 --> 00:05:27.810
And because you're going
in that particular order,

82
00:05:27.810 --> 00:05:29.490
everything comes out in order.

83
00:05:30.520 --> 00:05:32.910
Is that following, does that make sense?

84
00:05:32.910 --> 00:05:35.070
&gt;&gt; Speaker 2: So
it depends on how many places you have,

85
00:05:35.070 --> 00:05:37.470
how many times it'll take to sort it?

86
00:05:37.470 --> 00:05:38.613
&gt;&gt; Brian Holt: Right,
so the first thing you

87
00:05:38.613 --> 00:05:41.045
need to do is you need to go through and
find the longest number.

88
00:05:41.045 --> 00:05:43.630
And that's how many
iterations you're gonna have.

89
00:05:43.630 --> 00:05:48.062
So let's say this was 1,457,
you would have an extra iteration and

90
00:05:48.062 --> 00:05:50.615
these ones would just go in the 0 bucket.

91
00:05:50.615 --> 00:05:51.900
Does that make sense?

92
00:05:51.900 --> 00:05:52.400
Cool.

93
00:05:55.200 --> 00:05:57.900
There's all sorts of micro-optimizations
that you could do to get this to go

94
00:05:57.900 --> 00:06:01.040
even faster, but we're just gonna
do radix sort to completion.

95
00:06:01.040 --> 00:06:04.920
That's kind of the gist of
what we're gonna do here.

96
00:06:04.920 --> 00:06:06.100
And that's the whole algorithm.

97
00:06:06.100 --> 00:06:09.009
It's just unqueueing and
dequeueing things based on buckets.

98
00:06:10.310 --> 00:06:11.960
So the more buckets you can have,

99
00:06:11.960 --> 00:06:15.090
the faster this algorithm can go which
is why it's doing this in binary it's

100
00:06:15.090 --> 00:06:18.600
actually faster than doing it in
decimal which is what we're gonna do.

101
00:06:18.600 --> 00:06:23.388
We're still gonna do it in decimal
because I don't wanna teach

102
00:06:23.388 --> 00:06:25.213
binary on top of radix.

103
00:06:25.213 --> 00:06:30.794
So I'm gonna give you a second to
&gt;&gt; Speaker 3: Binary's faster,

104
00:06:30.794 --> 00:06:34.235
but you said more buckets is faster.

105
00:06:34.235 --> 00:06:37.600
&gt;&gt; Brian Holt: I guess more iterations,
more iterations upon the buckets.

106
00:06:37.600 --> 00:06:39.590
Because you can have longer and
longer numbers.

107
00:06:39.590 --> 00:06:43.882
&gt;&gt; Speaker 3: Okay.
&gt;&gt; Brian Holt: Yeah.

108
00:06:43.882 --> 00:06:46.770
That's a good clarification, for sure.

109
00:06:46.770 --> 00:06:48.890
So that's what we're gonna do here.

110
00:06:50.290 --> 00:06:55.478
You could implement it in
terms of binary if you like.

111
00:06:55.478 --> 00:07:01.020
And you can call snapshot to see what this
actually looks like on implementation.

112
00:07:01.020 --> 00:07:03.470
I'll give you a shot now to go do that.

