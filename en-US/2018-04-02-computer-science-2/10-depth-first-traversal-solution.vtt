WEBVTT

1
00:00:00.120 --> 00:00:03.180
&gt;&gt; Brian Holt: We're going to go implement
these three different traversals.

2
00:00:06.480 --> 00:00:09.390
And hopefully seeing all three
of them side by side you'll see

3
00:00:09.390 --> 00:00:10.680
that they're relatively similar.

4
00:00:10.680 --> 00:00:13.620
It's just really reordering
the statements, right?

5
00:00:15.290 --> 00:00:20.650
So if you remember doing
recursion from part one, the first

6
00:00:20.650 --> 00:00:24.260
thing that you always do when you're
doing recursion is base case, right?

7
00:00:24.260 --> 00:00:26.240
Figuring out what's your base case is.

8
00:00:27.450 --> 00:00:28.840
So there's a couple ways of doing it.

9
00:00:28.840 --> 00:00:32.450
The way that I prefer to do it which
makes the code a little bit simpler.

10
00:00:32.450 --> 00:00:36.180
Is I say if node is undefined or
null or anything like that,

11
00:00:36.180 --> 00:00:38.230
then just return, right?

12
00:00:38.230 --> 00:00:43.040
So that's what I'm gonna do here, so
if no node, then just return array.

13
00:00:44.520 --> 00:00:45.020
And that's it.

14
00:00:47.040 --> 00:00:49.420
That we we don't have
to do any other checks.

15
00:00:49.420 --> 00:00:51.430
We can just pass anything in.

16
00:00:51.430 --> 00:00:55.660
And we'll be sure that if
node is not actually no,

17
00:00:55.660 --> 00:00:56.580
then it's just going to return.

18
00:00:58.000 --> 00:01:01.798
So first thing we're gonna in pre-order,
right,

19
00:01:01.798 --> 00:01:05.090
is we're going to process the node, right?

20
00:01:05.090 --> 00:01:14.860
So we're going to do
array.push(node.value), okay?

21
00:01:14.860 --> 00:01:18.680
Then what we're going to do in pre-order
traversal is process the left tree.

22
00:01:18.680 --> 00:01:23.975
So we're going to call array

23
00:01:23.975 --> 00:01:31.038
= preorderTraverse(node.left,

24
00:01:31.038 --> 00:01:34.604
array); right?

25
00:01:34.604 --> 00:01:39.105
Then we're gonna do the same thing with

26
00:01:39.105 --> 00:01:44.490
node.right and
then we're going to return the array.

27
00:01:48.010 --> 00:01:54.030
Now, when my right leaf points out
that I am operating on the array so

28
00:01:54.030 --> 00:01:58.920
its actually not entirely necessary for
me to return the array.

29
00:01:58.920 --> 00:02:02.004
That's just force of habit on my part,
but if you don't feel like doing that,

30
00:02:02.004 --> 00:02:06.838
that's fine, too, so.
&gt;&gt; Brian Holt: So

31
00:02:06.838 --> 00:02:11.911
let's just go down and make sure that I'm
not crazy, which this will definitively

32
00:02:11.911 --> 00:02:16.975
prove that I'm not.
&gt;&gt; Brian Holt: But

33
00:02:16.975 --> 00:02:19.840
we should see here that preorderTraverse
is working as expected.

34
00:02:21.570 --> 00:02:24.704
Cool?
&gt;&gt; Brian Holt: So

35
00:02:24.704 --> 00:02:28.440
now that we've coded one of these
they're all pretty similar, right?

36
00:02:28.440 --> 00:02:30.340
They're more or
less doing the same thing and

37
00:02:30.340 --> 00:02:34.350
we're just reordering them in some sense.

38
00:02:34.350 --> 00:02:36.820
So in this particular case,
does this work?

39
00:02:36.820 --> 00:02:38.940
Nope, it doesn't, not in CodePen.

40
00:02:38.940 --> 00:02:42.567
But what I'm going to do is I'm
just going to move array.push

41
00:02:42.567 --> 00:02:46.859
between the two.
&gt;&gt; Brian Holt: And

42
00:02:46.859 --> 00:02:48.850
that's what inorder traversal is, right?

43
00:02:48.850 --> 00:02:52.581
This one you're gonna process the node
first, right? This one you're gonna

44
00:02:52.581 --> 00:02:56.460
process in the middle.

45
00:02:56.460 --> 00:02:59.489
And spoiler alert,
this one you process it last, right?

46
00:03:00.570 --> 00:03:03.432
But let's go take a look and
make sure that that's actually the case.

47
00:03:09.333 --> 00:03:09.880
&gt;&gt; Brian Holt: It's not,

48
00:03:09.880 --> 00:03:12.610
apparently.
&gt;&gt; Speaker 2: You didn't change

49
00:03:12.610 --> 00:03:13.950
the function names.
&gt;&gt; Brian Holt: I didn't.

50
00:03:13.950 --> 00:03:15.200
You're right.

51
00:03:15.200 --> 00:03:18.739
The dangers of copy paste code.

52
00:03:19.900 --> 00:03:20.900
Never done that before.

53
00:03:22.550 --> 00:03:28.748
Cool, so that works.
&gt;&gt; Brian Holt: Lastly

54
00:03:28.748 --> 00:03:33.899
we're gonna do post order traversal,
this time learning from my mistakes.

55
00:03:41.085 --> 00:03:41.622
&gt;&gt; Brian Holt: Okay, so

56
00:03:41.622 --> 00:03:44.200
here I changed it to postorder, postorder.

57
00:03:44.200 --> 00:03:48.080
And then the last thing I
do is add it to the array.

58
00:03:48.080 --> 00:03:54.658
We'll go down here and remove the x.
&gt;&gt; Brian Holt: And

59
00:03:54.658 --> 00:04:01.070
we'll try running it again.
&gt;&gt; Brian Holt: And now we have all three.

60
00:04:01.070 --> 00:04:02.328
In pre-order, in order,

61
00:04:02.328 --> 00:04:07.480
and post order traversal.
&gt;&gt; Brian Holt: Questions?

62
00:04:07.480 --> 00:04:12.467
It makes sense?
&gt;&gt; Brian Holt: I see people kinda

63
00:04:12.467 --> 00:04:14.055
like just tilting their heads.

64
00:04:14.055 --> 00:04:17.847
[LAUGH]
&gt;&gt; Brian Holt: So.

65
00:04:17.847 --> 00:04:22.618
[COUGH]
&gt;&gt; Brian Holt: Hopefully this at least

66
00:04:22.618 --> 00:04:26.633
illustrates to you the kind of
thedifferent strategies for

67
00:04:26.633 --> 00:04:28.970
processing a tree in some capacity

