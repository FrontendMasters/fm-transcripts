WEBVTT

1
00:00:03.647 --> 00:00:05.864
&gt;&gt; Brian Holt: Okay,
so this was a warm up.

2
00:00:05.864 --> 00:00:10.206
[LAUGH] And now, we're gonna do the main
event, which is generating a maze.

3
00:00:14.904 --> 00:00:16.364
&gt;&gt; Brian Holt: Okay, so

4
00:00:16.364 --> 00:00:20.569
I think this is really fun.

5
00:00:20.569 --> 00:00:26.400
But I guess I'm kind of warped,
so sorry, not sorry.

6
00:00:26.400 --> 00:00:29.103
We're gonna go back to working on mazes.

7
00:00:29.103 --> 00:00:34.722
This is gonna be a slightly different
take on mazes, but in theory,

8
00:00:34.722 --> 00:00:40.849
you could use the same algorithms that
we used to solve the previous maze.

9
00:00:40.849 --> 00:00:43.733
Is to solve the mazes that
we're about to generate,

10
00:00:43.733 --> 00:00:45.773
which I think is kind of cool as well.

11
00:00:45.773 --> 00:00:49.953
So the idea is, in this particular case,
we just want to generate a maze.

12
00:00:49.953 --> 00:00:53.809
We're not really generating a beginning or
an end to the maze,

13
00:00:53.809 --> 00:00:56.376
we just want to design something pretty.

14
00:00:56.376 --> 00:01:01.063
[LAUGH] Like some sort
of maze looking object.

15
00:01:01.063 --> 00:01:06.252
So down here you can see here,
this is what we're going to generate,

16
00:01:06.252 --> 00:01:09.748
something that looks a bit like this,
right?

17
00:01:09.748 --> 00:01:14.744
There are lots of ways of
doing maze generation.

18
00:01:14.744 --> 00:01:16.044
And I'm just gonna show you one of them.

19
00:01:16.044 --> 00:01:20.827
But there are lots of really
fascinating cool ways of doing this.

20
00:01:20.827 --> 00:01:24.150
In fact, I'm just gonna pull this
up really quick, so you can see.

21
00:01:24.150 --> 00:01:25.598
This is an amazing blog post.

22
00:01:25.598 --> 00:01:27.959
I don't know who James Buck is, but

23
00:01:27.959 --> 00:01:31.435
cool stuff in this particular
part of his blog post.

24
00:01:31.435 --> 00:01:33.470
He goes through and he actually,

25
00:01:33.470 --> 00:01:37.262
shows you all the different ways
that you can generate mazes.

26
00:01:37.262 --> 00:01:41.814
So the one that we're going to do
is called recursive backtracking.

27
00:01:41.814 --> 00:01:45.014
Which I again,
found to be the easiest to teach and

28
00:01:45.014 --> 00:01:47.467
it also generates really cool mazes.

29
00:01:47.467 --> 00:01:50.876
Which is all I'm all about that,
generating cool shit.

30
00:01:50.876 --> 00:01:57.826
So [LAUGH] I try not to swear during
these, and it just never works out.

31
00:01:57.826 --> 00:02:03.066
[LAUGH] Anyway, so
this is the one we're gonna be

32
00:02:03.066 --> 00:02:08.047
running, and it looks something like that.

33
00:02:08.047 --> 00:02:09.901
This is showing you,
all the various levels of depth.

34
00:02:09.901 --> 00:02:15.292
And you can see here, this is what it
looks like on a much bigger graph.

35
00:02:15.292 --> 00:02:19.009
Super, super cool and
see you'll end up with mazes that

36
00:02:19.009 --> 00:02:22.662
look like that.
&gt;&gt; Brian Holt: But

37
00:02:22.662 --> 00:02:23.790
there's a bunch of them.

38
00:02:23.790 --> 00:02:25.373
You can run things like this.

39
00:02:25.373 --> 00:02:28.238
This one goes rows at a time,
which I thought was pretty

40
00:02:28.238 --> 00:02:33.657
cool.
&gt;&gt; Brian Holt: That

41
00:02:33.657 --> 00:02:39.980
one kind of like random generation.
&gt;&gt; Brian Holt: This one,

42
00:02:39.980 --> 00:02:42.989
I thought was very interesting,
that it does these.

43
00:02:42.989 --> 00:02:45.654
Makes quadrants of your graph,
and then it divides it.

44
00:02:45.654 --> 00:02:46.798
I thought it was really cool.

45
00:02:46.798 --> 00:02:51.077
We almost did that one but
we didn't [LAUGH].

46
00:02:51.077 --> 00:02:53.671
Hopefully, you can,
cuz that must be recursive, right?

47
00:02:53.671 --> 00:02:55.205
That has to be recursive, right?

48
00:02:55.205 --> 00:02:59.876
That's cuz it is.
&gt;&gt; Brian Holt: Because you're taking

49
00:02:59.876 --> 00:03:02.130
a large problem, and you're breaking
it down into smaller and smaller and

50
00:03:02.130 --> 00:03:02.750
smaller problems.

51
00:03:02.750 --> 00:03:04.234
Until, it's a problem that you can solve,
right?

52
00:03:04.234 --> 00:03:11.259
That is recursive,
at its most basic definition.

53
00:03:11.259 --> 00:03:12.678
Yeah, cool, so it's a bunch of those.

54
00:03:12.678 --> 00:03:15.650
You should definitely check them out,
super cool.

55
00:03:15.650 --> 00:03:20.444
We're gonna be doing
recursive backtracking, so

56
00:03:20.444 --> 00:03:25.467
as if this course isn't
self-referential enough.

57
00:03:25.467 --> 00:03:29.659
This is something very similar
to what we've done previously.

58
00:03:29.659 --> 00:03:36.189
So what we're going to do is,
we're going to start with some square.

59
00:03:36.189 --> 00:03:39.605
In this particular case, we're gonna start
at that bottom left square right here.

60
00:03:39.605 --> 00:03:43.100
We're gonna call a function that's
called randomizedDirections.

61
00:03:43.100 --> 00:03:47.996
So this algorithm, it's meant
to generate random mazes, right?

62
00:03:47.996 --> 00:03:50.516
It's non-deterministic,
you call it a bunch of different times.

63
00:03:50.516 --> 00:03:53.045
It's going to give you a different result
every time and that's by design, right?

64
00:03:53.045 --> 00:03:54.819
We want it to be a random maze.

65
00:03:54.819 --> 00:03:56.832
Otherwise, it's not random, right?

66
00:03:56.832 --> 00:03:58.261
We drop the random parts, it's maze.

67
00:03:58.261 --> 00:04:01.574
[LAUGH] So
you're gonna call randomizeDirection, and

68
00:04:01.574 --> 00:04:05.971
it's going to give you back an array
of northeast, southwest, right?

69
00:04:05.971 --> 00:04:09.483
And it's gonna tell you,
go do these in this order.

70
00:04:09.483 --> 00:04:12.267
So I wrote randomizeDirections for you.

71
00:04:12.267 --> 00:04:14.021
The reason why I did that is,
so I can unit test, right?

72
00:04:14.021 --> 00:04:18.948
Because I need it to be deterministic,
so that I can test you, right?

73
00:04:18.948 --> 00:04:21.465
But every single time that
you call randomizeDirections,

74
00:04:21.465 --> 00:04:24.548
it's going to give you the directions
that it wants you to go in, right?

75
00:04:24.548 --> 00:04:27.377
So in this particular case,
I got west first, right?

76
00:04:27.377 --> 00:04:31.834
Which is left in this
particular orientation.

77
00:04:31.834 --> 00:04:34.328
So I want you to go left first,
which you can't, right?

78
00:04:34.328 --> 00:04:35.279
You're at the edge of the graph.

79
00:04:35.279 --> 00:04:37.327
You can't go left.

80
00:04:37.327 --> 00:04:41.550
So what you're gonna do is,
you're gonna try and go north, right?

81
00:04:41.550 --> 00:04:44.248
So that's what you do here you go north.

82
00:04:44.248 --> 00:04:49.575
Now, notice that everything
right now has a wall between it.

83
00:04:49.575 --> 00:04:53.000
And both this cell right
here has a north wall, and

84
00:04:53.000 --> 00:04:55.619
this cell right here has a south wall.

85
00:04:55.619 --> 00:04:58.932
So when we go north,
we're going to basically tunnel.

86
00:04:58.932 --> 00:05:01.442
So we're going to eliminate
this north wall, and

87
00:05:01.442 --> 00:05:03.670
we're going to eliminate this south wall.

88
00:05:03.670 --> 00:05:07.631
So that's kind of the theme of
what we're getting at here,

89
00:05:07.631 --> 00:05:13.021
is this tunneling mechanism that we're
going to tunnel through various walls,

90
00:05:13.021 --> 00:05:14.785
until we've made a maze.

91
00:05:14.785 --> 00:05:19.336
So now, we've moved on to processing [1,
0], which is here.

92
00:05:19.336 --> 00:05:22.490
Notice that we did north, right?

93
00:05:22.490 --> 00:05:25.390
Which is why we went up,
but haven't done South and

94
00:05:25.390 --> 00:05:27.356
we have not done East yet, right?

95
00:05:27.356 --> 00:05:29.427
That's because this is recursive, right?

96
00:05:29.427 --> 00:05:31.731
Cuz we'll eventually come back, right?

97
00:05:31.731 --> 00:05:36.347
Due to the nature of how recursion works,
but we have not processed those yet.

98
00:05:36.347 --> 00:05:41.179
We're still in this particular
level of the recursion,

99
00:05:41.179 --> 00:05:44.108
we haven't processed those yet.

100
00:05:44.108 --> 00:05:47.669
So now we're here at [1,0].

101
00:05:47.669 --> 00:05:50.526
Also, for this example,
I'm flipping on you,

102
00:05:50.526 --> 00:05:55.097
[0,0] is the bottom left.
&gt;&gt; Brian Holt: It just worked out so

103
00:05:55.097 --> 00:05:55.652
much easier.

104
00:05:55.652 --> 00:06:00.840
Believe me, I did you a favor, it's [0, 0]
&gt;&gt; Brian Holt: Also,

105
00:06:00.840 --> 00:06:02.589
did myself a favor, if we're being honest.

106
00:06:02.589 --> 00:06:08.452
Okay, so we're now at [1, 0], I'm gonna
call randomized directions again, right?

107
00:06:08.452 --> 00:06:11.700
So it's gonna give me south first and
then, it's gonna look down and

108
00:06:11.700 --> 00:06:13.381
see South has been visited before.

109
00:06:13.381 --> 00:06:14.568
I'm not gonna go there again, right?

110
00:06:14.568 --> 00:06:16.192
Cuz you're not going to revisit nodes.

111
00:06:16.192 --> 00:06:18.307
That's one of the rules.

112
00:06:18.307 --> 00:06:22.156
Recursive backtracking is
you don't revisit notes.

113
00:06:22.156 --> 00:06:25.259
So I'm not gonna revisit it.

114
00:06:25.259 --> 00:06:29.093
It says, west next, west is off the map,
so it's not gonna check there either.

115
00:06:29.093 --> 00:06:33.462
And then now, it says east,
so I'm gonna go east.

116
00:06:33.462 --> 00:06:36.300
And again, I have not done north yet,

117
00:06:36.300 --> 00:06:42.091
I would come back later once we encourage
to come back up and do north, right?

118
00:06:42.091 --> 00:06:46.385
So we go east, now,
we're processing in this one,

119
00:06:46.385 --> 00:06:52.448
we can randomized direction,
because it is east, which we can go south.

120
00:06:52.448 --> 00:06:55.672
You could have gone south, I thought-
&gt;&gt; Student: That's not a new

121
00:06:55.672 --> 00:06:58.678
method that's the same method
as randomized directions, or

122
00:06:58.678 --> 00:07:02.365
is that something different?
&gt;&gt; Brian Holt: This is the same randomized

123
00:07:02.365 --> 00:07:07.166
method or direction.
&gt;&gt; Student: The text on the two steps

124
00:07:07.166 --> 00:07:09.122
is different?

125
00:07:09.122 --> 00:07:11.804
One is randomized directions,
and one is randomized direction

126
00:07:11.804 --> 00:07:17.223
call.
&gt;&gt; Brian Holt: I believe you,

127
00:07:17.223 --> 00:07:21.565
but I don't see it.
&gt;&gt; Student: It's the one below that.

128
00:07:22.923 --> 00:07:27.340
&gt;&gt; Brian Holt: Yeah, sorry.

129
00:07:27.340 --> 00:07:29.907
I'll fix that, thank you.

130
00:07:29.907 --> 00:07:33.503
So I did not mess this part up though.

131
00:07:33.503 --> 00:07:37.440
So randomize, you go east here and then,
the first thing given here is east,

132
00:07:37.440 --> 00:07:38.600
which is to the right.

133
00:07:38.600 --> 00:07:43.806
Which is why you go here, and
then south, and then west.

134
00:07:43.806 --> 00:07:47.039
And so, we end up here in
this kind of dead end, right?

135
00:07:47.039 --> 00:07:50.343
So it's gonna try and go right here.

136
00:07:50.343 --> 00:07:54.350
Okay, so we've ran out of places to go,
so we're going to go back up the tree.

137
00:07:54.350 --> 00:07:55.499
So we're gonna go here.

138
00:07:55.499 --> 00:07:57.399
This runs out of places to go, right?

139
00:07:57.399 --> 00:08:01.720
So it goes back up here,
and then at this level.

140
00:08:01.720 --> 00:08:06.358
It was south north, but
we still can go north in this one, right?

141
00:08:06.358 --> 00:08:11.341
So we're gonna go north and
it's gonna just keep doing that, right?

142
00:08:11.341 --> 00:08:15.242
So this one, we'll call randomizeDirection
but there's only one place to go, so

143
00:08:15.242 --> 00:08:16.033
it'll go here.

144
00:08:16.033 --> 00:08:19.945
And then now, there's literally no place
left to go, so it's just going to go and

145
00:08:19.945 --> 00:08:23.705
return all the way back to the beginning
and you've completed the algorithm.

146
00:08:23.705 --> 00:08:27.455
So by doing this algorithm,
you're gonna be guaranteed,

147
00:08:27.455 --> 00:08:30.985
to reach every item or
every place in the array, right?

148
00:08:30.985 --> 00:08:33.687
Every place in the graph rather.

149
00:08:33.687 --> 00:08:36.291
And the key here is,
once you mark something as visited,

150
00:08:36.291 --> 00:08:38.422
it's not going to get visited again,
right?

151
00:08:38.422 --> 00:08:42.233
So even though, if you remember here,

152
00:08:42.233 --> 00:08:47.898
we went north first, but
we had not yet been east, right?

153
00:08:47.898 --> 00:08:51.887
But by the time, this gets all
the way back to the origin point,

154
00:08:51.887 --> 00:08:53.933
if east will have been visited.

155
00:08:53.933 --> 00:08:56.533
So it's not going to go east, right?

156
00:08:56.533 --> 00:08:57.375
Does that make sense?

157
00:08:57.375 --> 00:09:00.988
Despite the fact that it wasn't
originally visited by the time,

158
00:09:00.988 --> 00:09:05.005
it got back to that point, it had been
visited, so it would not visit it.

159
00:09:05.005 --> 00:09:06.659
I'm gonna say,
visit as many times, as I can.

160
00:09:06.659 --> 00:09:14.247
[LAUGH] Any questions about that?
&gt;&gt; Brian Holt: So

161
00:09:14.247 --> 00:09:21.782
that's the entire gist of it, you're just
going to be doing this kind of burrowing.

162
00:09:21.782 --> 00:09:24.987
Now, let's talk about what
this is similar to before.

163
00:09:24.987 --> 00:09:28.682
Well, we're going as far away from
the root node as we possibly can,

164
00:09:28.682 --> 00:09:30.542
before we come back to it, right?

165
00:09:30.542 --> 00:09:33.621
That sounds a whole lot like
depth first traversal, and

166
00:09:33.621 --> 00:09:36.448
that's because it's exactly what it is,
right?

167
00:09:36.448 --> 00:09:41.641
You're basically going to be treating this
cardinal plane, as again, like a tree.

168
00:09:41.641 --> 00:09:44.007
And you're just gonna go as
deep as you possibly can,

169
00:09:44.007 --> 00:09:45.487
until you run out of things to do.

170
00:09:45.487 --> 00:09:49.064
And then, you're gonna keep coming up and
then going back down, as much as possible,

171
00:09:49.064 --> 00:09:50.595
until everything has been visited.

172
00:09:50.595 --> 00:09:54.556
That's depth first traversal.

173
00:09:54.556 --> 00:09:58.343
So that's how you're going to
apply it in this particular case.

174
00:10:00.485 --> 00:10:02.164
&gt;&gt; Brian Holt: Questions conceptually,

175
00:10:02.164 --> 00:10:03.700
about maze generation?

