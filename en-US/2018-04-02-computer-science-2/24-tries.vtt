WEBVTT

1
00:00:02.000 --> 00:00:05.260
&gt;&gt; Brian Holt: Tries, tries are trees.

2
00:00:06.480 --> 00:00:07.260
That's not a joke.

3
00:00:07.260 --> 00:00:08.580
I said two words.

4
00:00:08.580 --> 00:00:09.940
This is how you say this.

5
00:00:09.940 --> 00:00:15.554
Trie, and they're implemented as trees.

6
00:00:15.554 --> 00:00:18.483
Someone was being really clever,
so I had to look up.

7
00:00:18.483 --> 00:00:22.600
Cuz why the hell do they call
tries the way that they do.

8
00:00:22.600 --> 00:00:28.140
And the reason why is because they
make it easy to retrieve data.

9
00:00:28.140 --> 00:00:31.660
And so that's why they named
this data structure a trie.

10
00:00:33.400 --> 00:00:37.555
So, I'm sorry, I would try and
disambiguate this, but please stop me if

11
00:00:37.555 --> 00:00:44.675
I'm being ambiguous.
&gt;&gt; Brian Holt: I've

12
00:00:44.675 --> 00:00:47.960
heard people call them tris even though
obviously that's not the word for it.

13
00:00:47.960 --> 00:00:52.411
I don't know if it's obviously,
it's obviously weird.

14
00:00:52.411 --> 00:00:57.980
But yeah, just communicate.

15
00:00:57.980 --> 00:00:59.940
Communicate as best as you possibly can.

16
00:00:59.940 --> 00:01:03.770
So good luck, I even wrote it there,
so good luck to you.

17
00:01:03.770 --> 00:01:05.162
So what is a tree?

18
00:01:05.162 --> 00:01:12.356
It's a tree, LOL.
&gt;&gt; Brian Holt: It's specifically,

19
00:01:12.356 --> 00:01:19.610
a sort of tree that is meant to make doing
things like auto complete, very quickly.

20
00:01:19.610 --> 00:01:23.850
The technical term of what it's doing
is optimize for prefix searching.

21
00:01:25.350 --> 00:01:30.140
So pretend that we have a whole list
of all of the biggest cities in the US,

22
00:01:30.140 --> 00:01:31.900
because that's exactly
what you're gonna do.

23
00:01:31.900 --> 00:01:37.220
And if I type SAN, what
are the cities that I should get back?

24
00:01:37.220 --> 00:01:41.990
Well, if I type in SAN, I'm gonna expect
to see Francisco, Jose, Diego, all

25
00:01:41.990 --> 00:01:46.650
the cities, Santa Barbara or Santa Monica,
all those cities that begin with SAN.

26
00:01:47.870 --> 00:01:51.819
This is what tries are specifically
designed to address.

27
00:01:53.720 --> 00:01:59.321
So a trie starts out with a root node.

28
00:01:59.321 --> 00:02:03.505
That doesn't represent necessary anything,
it's not gonna to have any specific value

29
00:02:03.505 --> 00:02:07.752
associated with it.
&gt;&gt; Brian Holt: Often given the value of

30
00:02:07.752 --> 00:02:08.420
empty string.

31
00:02:10.590 --> 00:02:14.710
It's going to have a bunch of children
node, you don't actually know how many.

32
00:02:14.710 --> 00:02:17.050
In the case of the English language,

33
00:02:17.050 --> 00:02:20.470
assuming everything is lowercase which you
should assume everything is lower case.

34
00:02:20.470 --> 00:02:23.483
It could have up to 26 children, right?

35
00:02:23.483 --> 00:02:26.508
Well, you don't know that yet, but

36
00:02:26.508 --> 00:02:29.979
I assure you it's up to 26.
&gt;&gt; Brian Holt: So

37
00:02:29.979 --> 00:02:33.006
the first root node doesn't
represent any particular thing, but

38
00:02:33.006 --> 00:02:37.330
the second node will represent the first
letter of what you could be searching for.

39
00:02:37.330 --> 00:02:43.620
So you could be searching for
Boston, or BO as I have down here.

40
00:02:43.620 --> 00:02:46.590
The first node there is going to be B,
right?

41
00:02:48.680 --> 00:02:51.620
And then, what you're gonna
do from here is we're going

42
00:02:51.620 --> 00:02:54.730
to branch based on all these
different letter combinations.

43
00:02:54.730 --> 00:02:59.817
So using this example, if I type in b,
I'm gonna get all the suggestions for

44
00:02:59.817 --> 00:03:05.110
BA, I'm gonna get all the suggestions for
BO, all the suggestions for BI.

45
00:03:05.110 --> 00:03:12.260
And it's gonna go out and basically
search for all of these potential things.

46
00:03:12.260 --> 00:03:15.250
But there's no city in America that
starts with BZ, as far as I know.

47
00:03:15.250 --> 00:03:18.584
Certainly not amongst the biggest ones,
so that's not going to exist.

48
00:03:18.584 --> 00:03:22.883
So that's how you're going to build these
tries is that you're gonna go through and

49
00:03:22.883 --> 00:03:26.220
you're going to basically separate
everything out by letters.

50
00:03:26.220 --> 00:03:29.292
And you're gonna build these tries
build on these branching logics.

51
00:03:29.292 --> 00:03:33.920
Why this is advantageous to you is if
I'm searching for a city, right, and

52
00:03:33.920 --> 00:03:34.663
I type SAN.

53
00:03:34.663 --> 00:03:38.127
I just go down, I drill down into
the trie at that particular part, and

54
00:03:38.127 --> 00:03:40.570
then I just do a depth-first traversal.

55
00:03:40.570 --> 00:03:42.700
And I find the top three results,

56
00:03:42.700 --> 00:03:46.790
and I just return those as
the auto-complete suggestions, right?

57
00:03:46.790 --> 00:03:48.000
Does that make sense?

58
00:03:48.000 --> 00:03:54.480
So if I type BO here, I'm going to do
a depth traversal on both of the children.

59
00:03:54.480 --> 00:03:57.680
I'm gonna get Boston, and
I'm gonna get Boise, and then I'm done.

60
00:03:59.140 --> 00:04:00.913
Because those are the only
two possibilities.

61
00:04:06.182 --> 00:04:07.692
&gt;&gt; Brian Holt: Sometimes there are chains

62
00:04:07.692 --> 00:04:09.400
contained with other chains.

63
00:04:09.400 --> 00:04:11.180
There's whole words
contained in other ones.

64
00:04:11.180 --> 00:04:13.060
A good example is there's
a city called Salina,

65
00:04:13.060 --> 00:04:17.210
and there's a city called Salinas, right?

66
00:04:17.210 --> 00:04:19.470
I think this is one of
the extra credit examples, but

67
00:04:19.470 --> 00:04:21.020
I just wanted to bring it up with you.

68
00:04:21.020 --> 00:04:26.030
The way you handle that is,
pretend that BOST was a city,

69
00:04:26.030 --> 00:04:28.630
you would just mark T as a complete word.

70
00:04:28.630 --> 00:04:30.700
So that would get added to the trie,

71
00:04:30.700 --> 00:04:34.230
and then it would just continue with
its depth-first traversal as well.

72
00:04:34.230 --> 00:04:41.011
That's all you gotta do to handle that.
&gt;&gt; Brian Holt: If

73
00:04:41.011 --> 00:04:45.128
someone is searching for something that
has a space in it like San Francisco,

74
00:04:45.128 --> 00:04:48.040
you just represent that space as a letter.

75
00:04:48.040 --> 00:04:51.400
There's nothing special about spaces
is what I'm trying to tell you.

76
00:04:51.400 --> 00:04:54.010
So just insert another note
in there that's a space.

77
00:04:55.870 --> 00:05:01.293
People often get confused about that.
&gt;&gt; Brian Holt: There

78
00:05:01.293 --> 00:05:02.940
are more complicated
ways to go about this.

79
00:05:02.940 --> 00:05:04.620
Like if I type Francisco,

80
00:05:04.620 --> 00:05:09.660
you might reasonably expect that auto
complete would be San Fransisco as well.

81
00:05:09.660 --> 00:05:12.810
The way you would do that is you would
just insert Fransisco and then once you

82
00:05:12.810 --> 00:05:16.272
get to the O element you'd say actually
the complete word is San Fransisco right?

83
00:05:16.272 --> 00:05:19.722
So, that works as well.

84
00:05:19.722 --> 00:05:22.660
We're not doing that today
though we're just doing prefix.

85
00:05:22.660 --> 00:05:29.104
Nothing more complicated than that.
&gt;&gt; Brian Holt: Lastly,

86
00:05:29.104 --> 00:05:32.590
you can add waits to something, right?

87
00:05:34.330 --> 00:05:36.360
So what's the best way of thinking about

88
00:05:36.360 --> 00:05:40.539
that?
&gt;&gt; Brian Holt: Sometimes the order in

89
00:05:40.539 --> 00:05:43.763
which things will complete in is not
necessarily the order that you want to

90
00:05:43.763 --> 00:05:44.603
auto complete in.

91
00:05:44.603 --> 00:05:47.956
So you want to do a certain
amount of edge waiting.

92
00:05:47.956 --> 00:05:52.323
So if I type in S, I might not want to
do all the San Francisco, San Diego,

93
00:05:52.323 --> 00:05:52.980
San Jose.

94
00:05:52.980 --> 00:05:56.360
I might also want to like branch into
other Ss to auto-complete those,

95
00:05:56.360 --> 00:05:58.570
cuz those might be better suggestions.

96
00:05:58.570 --> 00:06:00.950
You would have to do some
sort of waiting or queueing.

97
00:06:02.670 --> 00:06:05.002
We're not gonna do that again today,
but I just wanted to

98
00:06:05.002 --> 00:06:08.920
bring that up as well with you.
&gt;&gt; Brian Holt: Okay.

99
00:06:08.920 --> 00:06:09.830
&gt;&gt; Speaker 2: So like get the cities

100
00:06:09.830 --> 00:06:12.958
closest to the user who is
using the auto-complete,

101
00:06:12.958 --> 00:06:15.134
or the ones with the largest population.
&gt;&gt; Brian Holt: Yeah,

102
00:06:15.134 --> 00:06:16.720
largest population is one I was thinking.

103
00:06:16.720 --> 00:06:18.660
I guess you could do
it with geo-targeting.

104
00:06:18.660 --> 00:06:20.174
That's just a whole other level.

105
00:06:20.174 --> 00:06:23.160
[LAUGH] But I would love to see it.

106
00:06:23.160 --> 00:06:27.133
That would be really cool.
&gt;&gt; Brian Holt: Typically these

107
00:06:27.133 --> 00:06:29.120
are designed to be fast and dumb.

108
00:06:29.120 --> 00:06:31.590
You just wanna suggest something.

109
00:06:31.590 --> 00:06:33.380
Usually you'll get the first suggestion,
right?

110
00:06:33.380 --> 00:06:37.020
Cuz usually the order that you add
things in is what's important, right?

111
00:06:37.020 --> 00:06:39.090
So usually look at the top result, right?

112
00:06:39.090 --> 00:06:40.680
And that's usually what you care about,
and

113
00:06:40.680 --> 00:06:43.520
you just throw two other ones on there to
make you feel like you're doing something.

114
00:06:43.520 --> 00:06:45.280
I don't know, but.

115
00:06:46.570 --> 00:06:50.200
Yeah, you want these to be fast and
usually not necessarily complete,

116
00:06:50.200 --> 00:06:53.830
if you understand what I mean, so, cool.

