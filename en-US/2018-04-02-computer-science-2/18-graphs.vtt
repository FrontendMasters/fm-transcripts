WEBVTT

1
00:00:04.324 --> 00:00:07.138
&gt;&gt; Brian Holt: Graphs,
I think this is really cool.

2
00:00:07.138 --> 00:00:11.937
I've now worked for
two major, social networks.

3
00:00:11.937 --> 00:00:15.803
I worked at Reddit and
I worked at LinkedIn.

4
00:00:15.803 --> 00:00:16.674
I now work for Microsoft.

5
00:00:16.674 --> 00:00:19.841
I'm trying to get a new job every time
I come back and give one of these.

6
00:00:19.841 --> 00:00:25.361
[LAUGH] Mostly successful so far.

7
00:00:25.361 --> 00:00:29.373
But a big part of social
networks are graphs.

8
00:00:29.373 --> 00:00:32.917
And actually,
a surprisingly amount of computer science,

9
00:00:32.917 --> 00:00:34.661
especially as we go forward.

10
00:00:34.661 --> 00:00:39.777
We're finding out more and
more that graphs are a central

11
00:00:39.777 --> 00:00:44.049
concept to what we want
to achieve as engineer.

12
00:00:44.049 --> 00:00:49.557
So the basic idea, well, let's just
talk about an example of a graph.

13
00:00:49.557 --> 00:00:51.848
So Facebook's social graph,

14
00:00:51.848 --> 00:00:56.348
is probably one of the more well
known uses of the term graph.

15
00:00:56.348 --> 00:01:00.039
The idea being that I'm friends with you,
you're friends with her,

16
00:01:00.039 --> 00:01:01.865
she's friends with him, right?

17
00:01:01.865 --> 00:01:05.200
And he doesn't like me, so
he's not friends with me.

18
00:01:05.200 --> 00:01:08.415
It's okay, I don't blame you.

19
00:01:08.415 --> 00:01:12.019
So that's the idea that this graph
that we have all these nodes,

20
00:01:12.019 --> 00:01:14.104
we're still gonna call them nodes.

21
00:01:14.104 --> 00:01:17.478
And then, we have all these connections
between the various nodes for

22
00:01:17.478 --> 00:01:18.860
whatever reasons, right?

23
00:01:18.860 --> 00:01:21.540
You can call these connections edges.

24
00:01:21.540 --> 00:01:27.588
That's the computer sciency term for
it is the various edges in the graph.

25
00:01:27.588 --> 00:01:29.390
Now, what I just described to you,

26
00:01:29.390 --> 00:01:32.647
the Facebook social graph is what
we call bidirectional graph.

27
00:01:32.647 --> 00:01:35.847
Which means, if I'm friends with you,
you are friends with me.

28
00:01:35.847 --> 00:01:39.199
Sorry, that's the way it is.

29
00:01:39.199 --> 00:01:41.819
But because it's connected in one way,

30
00:01:41.819 --> 00:01:45.450
it's implicit that you
are connected in the other way.

31
00:01:45.450 --> 00:01:49.498
A good example of a unidirectional
graph would be something like Twitter,

32
00:01:49.498 --> 00:01:52.273
where like I follow you,
but you don't follow me.

33
00:01:52.273 --> 00:01:54.930
So in this particular case we
are going to be unidirectional graphs.

34
00:01:54.930 --> 00:02:01.731
But almost all of these things work apply
as well with directional graphs, as well.

35
00:02:01.731 --> 00:02:05.531
In Facebook's example,
each person would be a node.

36
00:02:05.531 --> 00:02:08.399
And the node represents some entity,

37
00:02:08.399 --> 00:02:12.888
you can think that entity is
almost a row in an SQL database.

38
00:02:12.888 --> 00:02:16.848
It's an object, it could be
a document in a Mongo database.

39
00:02:16.848 --> 00:02:21.879
Or hopefully, if you're doing
graphs you are using something more

40
00:02:21.879 --> 00:02:26.744
like a graph database like Neo4j or
something like that, cool.

41
00:02:26.744 --> 00:02:29.519
Graphs are just everywhere,
various social networks,

42
00:02:29.519 --> 00:02:32.592
a lot of internet of things that
have mesh networking, right?

43
00:02:32.592 --> 00:02:36.206
Those are graphs of sorts as well.

44
00:02:36.206 --> 00:02:39.929
Neural networks, so
like machine learning and AI,

45
00:02:39.929 --> 00:02:42.899
that's just graphs up and down, right?

46
00:02:42.899 --> 00:02:47.023
Especially, neural networks, they're
just neuron nodes that just fire and

47
00:02:47.023 --> 00:02:49.468
strengthen graph edges and
things like that.

48
00:02:49.468 --> 00:02:51.905
It's all turtles all the way down.

49
00:02:51.905 --> 00:02:57.906
It's just grass everywhere
&gt;&gt; Brian Holt: Yeah,

50
00:02:57.906 --> 00:03:01.656
machine learning in particular,
very very cool.

51
00:03:01.656 --> 00:03:04.614
And I think that, this is just more and

52
00:03:04.614 --> 00:03:09.524
more technology beginning to
mirror what nature's, right?

53
00:03:09.524 --> 00:03:17.435
In terms of nature, everything is
connected to each other, right?

54
00:03:17.435 --> 00:03:22.791
And so, what we're doing with
computer science now is we're

55
00:03:22.791 --> 00:03:28.259
modeling how things connect together,
so really cool stuff.

56
00:03:28.259 --> 00:03:32.526
And some of these things that we're about
to get into is gonna be kinda familiar

57
00:03:32.526 --> 00:03:36.747
because it's gonna sound like things
we've already talked about, weird.

58
00:03:36.747 --> 00:03:41.371
So let's picture that we have this
social network, that I'm right there.

59
00:03:41.371 --> 00:03:43.955
And I'm connected to both Bob and Maria.

60
00:03:43.955 --> 00:03:47.723
And Bob is connected to Sally and Alice.

61
00:03:47.723 --> 00:03:50.842
And Alice is connected to Bob and Maria.

62
00:03:52.889 --> 00:03:57.348
&gt;&gt; Brian Holt: In this particular example,
that we're gonna do together,

63
00:03:57.348 --> 00:04:03.107
it's gonna be like if LinkedIn and Twitter
had a horrible social network baby.

64
00:04:03.107 --> 00:04:07.036
It's a unidirectional graph that's
a professional network, right?

65
00:04:07.036 --> 00:04:12.064
So let's say,
I wanted to find the most common job

66
00:04:12.064 --> 00:04:17.588
title in my social network
of the people that I follow.

67
00:04:17.588 --> 00:04:21.051
So I would check, if I wanted to
check just one degree of separation,

68
00:04:21.051 --> 00:04:23.278
so people that I'm actually connected to.

69
00:04:23.278 --> 00:04:26.935
Then I would check Bob and Maria, right?

70
00:04:26.935 --> 00:04:31.110
But if I wanted to check two degrees of
separation, I would check Bob and Maria.

71
00:04:31.110 --> 00:04:33.465
They're both connected to Alice, so

72
00:04:33.465 --> 00:04:38.334
the key here is that I only check Alice
once, because Alice is just one person.

73
00:04:38.334 --> 00:04:41.455
But I would also check Sally,
so two degrees of separation.

74
00:04:41.455 --> 00:04:48.566
And we can go on and
kind of fan out around this network.

75
00:04:48.566 --> 00:04:52.050
Now, you might be looking at this and
say, well this is,

76
00:04:52.050 --> 00:04:54.313
kind of back to trees again, right?

77
00:04:54.313 --> 00:04:56.021
I don't have it diagrammed out.

78
00:04:56.021 --> 00:05:01.392
But I would essentially, be the root
node in this particular tree, right?

79
00:05:01.392 --> 00:05:05.424
And I'd be traversing this graph,
look at Bob and look at Maria and

80
00:05:05.424 --> 00:05:07.735
then I'd look at all their children.

81
00:05:07.735 --> 00:05:10.978
And then, I'll look at those children and
those children and those children, right?

82
00:05:10.978 --> 00:05:15.038
So it's again very, very much like a tree.

83
00:05:15.038 --> 00:05:18.686
In fact, it's kind of the opposite
relationship that trees are just kind of

84
00:05:18.686 --> 00:05:19.942
a special form of graphs.

85
00:05:19.942 --> 00:05:22.566
[LAUGH] So what's cool about that,

86
00:05:22.566 --> 00:05:28.536
is we get to apply the kind of the same
lines of thinking, the same algorithms,

87
00:05:28.536 --> 00:05:33.439
and it still works with graphs,
which is really, really cool.

88
00:05:33.439 --> 00:05:36.152
There's just some more concerns
that we have to worry about, right?

89
00:05:36.152 --> 00:05:40.767
We have to worry about there
are circular references, right?

90
00:05:40.767 --> 00:05:43.362
I'm connected to Bob, who's connect
to Alice, who's connected to Maria,

91
00:05:43.362 --> 00:05:44.399
who's connected to me again.

92
00:05:44.399 --> 00:05:46.521
I don't want to count myself
twice as well, right?

93
00:05:46.521 --> 00:05:50.065
So it's kind of these circles that we
kind of have to be careful of, but

94
00:05:50.065 --> 00:05:53.324
all you have to do is keep track of yeah,
I wrote to Alice before.

95
00:05:53.324 --> 00:05:55.246
And now,
I'm not going to look at her again, right?

96
00:05:55.246 --> 00:06:00.223
The same thing as it was like a blocked
node in our pathfinding algorithm that

97
00:06:00.223 --> 00:06:01.557
we were just doing.

98
00:06:01.557 --> 00:06:05.434
So let's say that I have a network,

99
00:06:05.434 --> 00:06:11.251
I follow a hundred people and
a wanna check within four

100
00:06:11.251 --> 00:06:16.560
levels of separation
the most common job title.

101
00:06:16.560 --> 00:06:19.895
Well I'm trying to process
all these nodes in a tree and

102
00:06:19.895 --> 00:06:24.765
I need to check each one of them, and I
wanna stay close to the root node, right?

103
00:06:24.765 --> 00:06:28.644
Because I don't wanna go all the way out
to the 17 millionth connection level.

104
00:06:28.644 --> 00:06:31.221
This sounds a lot like
breadth first traversal.

105
00:06:31.221 --> 00:06:33.630
So I'm sorry, but
I'm gonna make you write it again.

106
00:06:33.630 --> 00:06:36.528
[LAUGH] This is all just
breadth first traversal,

107
00:06:36.528 --> 00:06:39.506
except I'm just limiting
how deep I'm gonna go.

108
00:06:39.506 --> 00:06:42.823
Rather than going all the way
to the bottom of the tree,

109
00:06:42.823 --> 00:06:46.522
I'm just gonna go four levels deep and
then I'm done right?

110
00:06:49.044 --> 00:06:54.029
&gt;&gt; Brian Holt: So let's make sure
that I cover everything I wanted to.

111
00:06:54.029 --> 00:06:58.492
Yeah, I mean, that's the big difference
here with grass versus trees.

112
00:06:58.492 --> 00:07:05.188
With grass, there's no clear
Pparent-child relationship,

113
00:07:05.188 --> 00:07:09.903
it's just peer to peer connections really.

114
00:07:09.903 --> 00:07:14.070
This could be solved with
depth-first traversal, just don't.

115
00:07:14.070 --> 00:07:17.401
[LAUGH] You just have to make sure
that you weren't going to deep and

116
00:07:17.401 --> 00:07:18.681
that would work as well.

117
00:07:18.681 --> 00:07:22.809
It lends itself very well
to that while loop, right?

118
00:07:22.809 --> 00:07:25.305
We were doing the while
until the queue was empty.

119
00:07:25.305 --> 00:07:28.721
Now, we're just gonna do a four
loop that only goes x iterations,

120
00:07:28.721 --> 00:07:30.919
until you've gone as deep as you wanna go.

121
00:07:30.919 --> 00:07:33.822
It just really works well that way.

122
00:07:33.822 --> 00:07:38.206
So questions about graphs?

123
00:07:40.710 --> 00:07:42.405
&gt;&gt; Brian Holt: Any questions
about graphs before we move on?

124
00:07:44.983 --> 00:07:47.704
&gt;&gt; Speaker 2: Is there a different
name for bidirectional and

125
00:07:47.704 --> 00:07:49.136
unidirectional edges?

126
00:07:49.136 --> 00:07:51.897
I feel like I've heard
something different, but

127
00:07:51.897 --> 00:07:53.677
I can't remember where it was.

128
00:07:53.677 --> 00:07:55.103
&gt;&gt; Brian Holt: The answer's
almost assuredly, yes.

129
00:07:55.103 --> 00:07:59.967
[LAUGH] Could not tell you
off the top of my head.

130
00:08:08.998 --> 00:08:16.352
&gt;&gt; Brian Holt: Cool, so just as we have
talked about, I worked at LinkedIn.

131
00:08:16.352 --> 00:08:18.121
This is stuff that LinkedIn
is constantly doing.

132
00:08:18.121 --> 00:08:20.911
It's constantly investigating
clusters of people and

133
00:08:20.911 --> 00:08:24.422
they're trying to figure out where
there are holes in the job market.

134
00:08:24.422 --> 00:08:27.698
So they could just say, hey, just so
you know, you're looking for a job,

135
00:08:27.698 --> 00:08:29.155
you're looking for education.

136
00:08:29.155 --> 00:08:33.887
You could fill this need because in
Alaska there are lacking orthodontists or

137
00:08:33.887 --> 00:08:35.795
something like that, right?

138
00:08:35.795 --> 00:08:38.640
These are the really interesting
insights that graphs can give you.

