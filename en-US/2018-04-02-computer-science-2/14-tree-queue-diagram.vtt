WEBVTT

1
00:00:00.350 --> 00:00:04.870
&gt;&gt; Speaker 1: Oscar asked, can you please
explain how the trie becomes a queue, and

2
00:00:04.870 --> 00:00:07.530
can you show it on the board
how the queue works?

3
00:00:07.530 --> 00:00:08.230
&gt;&gt; Brian Holt: Yeah, sure.

4
00:00:08.230 --> 00:00:11.630
Let me move this out
of the way real quick.

5
00:00:16.591 --> 00:00:23.300
&gt;&gt; Brian Holt: Can't believe someone
actually wants to see me draw.

6
00:00:25.880 --> 00:00:26.960
&gt;&gt; Brian Holt: All right.

7
00:00:26.960 --> 00:00:28.850
So let's do a new blank page.

8
00:00:30.170 --> 00:00:35.079
So let's just do.

9
00:00:38.333 --> 00:00:44.550
&gt;&gt; Brian Holt: We're gonna do A up here,

10
00:00:44.550 --> 00:00:51.050
and then we're gonna do B,

11
00:00:51.050 --> 00:00:55.590
C, D, E, F and G.

12
00:00:55.590 --> 00:00:56.495
Now I know my A B C's.

13
00:00:56.495 --> 00:01:00.580
Okay so, this is a trie.

14
00:01:00.580 --> 00:01:02.410
I purposefully did
the letters in that order so

15
00:01:02.410 --> 00:01:06.550
that you'll see that that's the order
that they're going to go into the array.

16
00:01:06.550 --> 00:01:07.210
Spoiler alert.

17
00:01:09.660 --> 00:01:12.830
The first thing that you're going to do is
you're going to add the root node which in

18
00:01:12.830 --> 00:01:15.740
this case is A, to the queue.

19
00:01:15.740 --> 00:01:19.464
So we're gonna have a queue
that's going to be just A,

20
00:01:19.464 --> 00:01:24.440
okay?

21
00:01:24.440 --> 00:01:27.990
Let's just say that I'm
trying to serialize this into

22
00:01:27.990 --> 00:01:29.610
some sort of final product array.

23
00:01:29.610 --> 00:01:33.690
So we'll just keep over here,
this is going to be my final array.

24
00:01:36.140 --> 00:01:39.470
So the first thing I'm going to do is
I'm going to dequeue this out of here.

25
00:01:39.470 --> 00:01:43.860
So the current node is going to be A.

26
00:01:43.860 --> 00:01:44.840
I'm going to process that, so

27
00:01:44.840 --> 00:01:47.750
I'm going to add it to the array,
which I did over here, right?

28
00:01:47.750 --> 00:01:49.940
And then I'm going to
enqueue both of its children.

29
00:01:49.940 --> 00:01:56.490
So after that it's going to
look like B and C, right?

30
00:01:56.490 --> 00:02:01.420
Cuz these are the two children of A,
right?

31
00:02:01.420 --> 00:02:02.110
You follow so far?

32
00:02:03.950 --> 00:02:09.558
So that's after one loop, one iteration,
that's what it's gonna look like.

33
00:02:09.558 --> 00:02:13.120
I've added A, and now B and
C are in the queue.

34
00:02:13.120 --> 00:02:17.714
So I'm dequeue the very next thing, which
is gonna be off the front of the array.

35
00:02:17.714 --> 00:02:20.510
With the way that I've drawn this, right?

36
00:02:20.510 --> 00:02:27.330
So B, is going to come off,
I'm going to add B here.

37
00:02:29.150 --> 00:02:32.700
And then I'm going to un-queue
both of B's children,

38
00:02:32.700 --> 00:02:36.020
in this case it just has one child so
its just gonna be one.

39
00:02:36.020 --> 00:02:41.060
So, its gonna be C, cuz C has still
not been dequeued yet, right?

40
00:02:41.060 --> 00:02:42.540
And then I'm gonna add D.

41
00:02:45.930 --> 00:02:46.630
&gt;&gt; Brian Holt: Right?

42
00:02:48.280 --> 00:02:50.440
Okay, so now I'm gonna dequeue C.

43
00:02:52.692 --> 00:02:54.640
I'm gonna add C over here.

44
00:02:57.217 --> 00:02:59.772
&gt;&gt; Brian Holt: I'm gonna have D,
here in the array, and

45
00:02:59.772 --> 00:03:03.940
then I'm gonna un-queue D's children,
which D has no children.

46
00:03:05.570 --> 00:03:08.589
So It just finishes there, and
that's what it looks like there.

47
00:03:08.589 --> 00:03:12.430
Okay?
Now I'm gonna dequeue D.

48
00:03:16.593 --> 00:03:20.890
&gt;&gt; Brian Holt: Sorry, I messed that up.

49
00:03:20.890 --> 00:03:25.507
C does have two children, so let's just,

50
00:03:25.507 --> 00:03:29.730
I think we'll just, there we go.

51
00:03:29.730 --> 00:03:30.790
It's like it never happened.

52
00:03:30.790 --> 00:03:33.340
It's like I didn't screw it up.

53
00:03:33.340 --> 00:03:37.080
Okay, so D, you had both the C's children,
which are E and F.

54
00:03:40.980 --> 00:03:41.750
&gt;&gt; Brian Holt: Right?

55
00:03:41.750 --> 00:03:44.434
Cuz that's what C's children are.

56
00:03:44.434 --> 00:03:50.500
And then afterwards,
you dequeue D, which goes up here.

57
00:03:50.500 --> 00:03:55.100
Then you're gonna have E and F.

58
00:03:55.100 --> 00:03:59.120
D has no children so you don't
have to do any dequeuing of that.

59
00:03:59.120 --> 00:04:05.439
Then we're going to dequeue E,
&gt;&gt; Brian Holt: E gets added up here.

60
00:04:07.400 --> 00:04:12.830
F is gonna move up, and
E has the left child of G.

61
00:04:12.830 --> 00:04:17.600
So, it gets enqueued up there.

62
00:04:17.600 --> 00:04:23.205
And then we're gonna do F, put F up there
&gt;&gt; Brian Holt: And

63
00:04:23.205 --> 00:04:27.060
F has no children, so it's just G.

64
00:04:27.060 --> 00:04:30.120
And I'm gonna have G up there.

65
00:04:31.460 --> 00:04:33.150
G has no children, either.

66
00:04:33.150 --> 00:04:36.080
So at that point, the whole thing is done.

67
00:04:36.080 --> 00:04:37.600
How do we feel about that?

68
00:04:37.600 --> 00:04:40.330
Does that make more sense of how
that's processing the whole thing?

69
00:04:43.690 --> 00:04:44.247
&gt;&gt; Speaker 3: I think,

70
00:04:44.247 --> 00:04:48.320
I'm not sure if this is what
the person online was wondering about.

71
00:04:48.320 --> 00:04:53.390
But the thing that kind
of confuses me about why

72
00:04:53.390 --> 00:04:59.900
this works is that the first
parameter of our function is Q.

73
00:04:59.900 --> 00:05:05.398
Which is,
when it's an argument it is the trie.

74
00:05:05.398 --> 00:05:08.880
So how,
does that make sense what I'm asking?

75
00:05:08.880 --> 00:05:10.070
&gt;&gt; Brian Holt: Sure.
&gt;&gt; Speaker 3: How are those

76
00:05:10.070 --> 00:05:10.640
the same thing?

77
00:05:12.120 --> 00:05:15.330
&gt;&gt; Brian Holt: So perhaps a better
way of thinking about that,

78
00:05:15.330 --> 00:05:18.860
rather than thinking it as the whole trie,
which this is a great question by the way.

79
00:05:18.860 --> 00:05:22.119
Rather than thinking about it as
the whole trie, it's the root node.

80
00:05:23.600 --> 00:05:26.500
&gt;&gt; Speaker 3: Okay, that's helpful.

81
00:05:26.500 --> 00:05:31.185
&gt;&gt; Brian Holt: Yeah, that's tough to
separate, because if you think about it

82
00:05:31.185 --> 00:05:35.740
more in the sense of B is a trie,
and C is a trie, and F is a trie.

83
00:05:35.740 --> 00:05:38.940
Like they're all just little tries
that make up bigger tries, right?

84
00:05:38.940 --> 00:05:42.110
It's a recursively defined trie, so

85
00:05:42.110 --> 00:05:45.960
A is just a node that makes up the trie
and it just happens to be the whole trie.

86
00:05:45.960 --> 00:05:47.240
&gt;&gt; Speaker 3: Okay.

87
00:05:47.240 --> 00:05:49.560
&gt;&gt; Brian Holt: Is that more,
better mental model?

88
00:05:49.560 --> 00:05:50.698
&gt;&gt; Speaker 3: Yes.
&gt;&gt; Brian Holt: Okay,

89
00:05:50.698 --> 00:05:54.570
cool, that's a good question.

90
00:05:54.570 --> 00:05:55.070
&gt;&gt; Brian Holt: Any other questions?

91
00:06:00.280 --> 00:06:01.570
&gt;&gt; Brian Holt: Cool,
you feel okay about that?

92
00:06:01.570 --> 00:06:03.834
Cool.

93
00:06:07.920 --> 00:06:12.000
&gt;&gt; Brian Holt: Leave, cool.

94
00:06:12.000 --> 00:06:16.878
So that was Depth-first and
Breadth-first Traversal.

95
00:06:16.878 --> 00:06:19.918
We saw Depth-first, which will get you as
far away from the root note as possible.

96
00:06:19.918 --> 00:06:23.150
We saw Breadth-first, which will kind
of keep you around the root note.

