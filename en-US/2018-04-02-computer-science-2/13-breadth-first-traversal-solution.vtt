WEBVTT

1
00:00:00.220 --> 00:00:02.532
&gt;&gt; Brian Holt: Hopefully
this one was okay.

2
00:00:02.532 --> 00:00:06.220
Just people here in the room,
who was able to solve it?

3
00:00:07.730 --> 00:00:09.229
Yeah, mostly, no one?

4
00:00:09.229 --> 00:00:10.587
Okay, okay, cool.

5
00:00:10.587 --> 00:00:12.280
Just kidding.

6
00:00:12.280 --> 00:00:20.171
[COUGH] We're gonna do iterative first in
terms of solving breadth versus traversal.

7
00:00:20.171 --> 00:00:22.607
And then I will just go through and

8
00:00:22.607 --> 00:00:28.528
just quickly show you as well how to do
recursive, if that's what you want to do.

9
00:00:28.528 --> 00:00:33.843
So,
&gt;&gt; Brian Holt: What

10
00:00:33.843 --> 00:00:37.686
we're gonna do

11
00:00:37.686 --> 00:00:44.236
here,
&gt;&gt; Brian Holt: The way

12
00:00:44.236 --> 00:00:46.942
this is gonna be passed into,
if I remember correctly,

13
00:00:46.942 --> 00:00:50.300
is it's passed into with the root
node already in the queue, right?

14
00:00:53.833 --> 00:00:58.121
&gt;&gt; Brian Holt: So what we're
gonna do here is we're gonna say,

15
00:00:58.121 --> 00:01:03.141
while queue has length,
because as soon as it's empty,

16
00:01:03.141 --> 00:01:05.860
then it'll stop the why loop,

17
00:01:05.860 --> 00:01:10.900
because queue length will be zero,
that which is false.

18
00:01:10.900 --> 00:01:14.704
It coerces to false anyway.

19
00:01:14.704 --> 00:01:22.631
Then what we're gonna do is we're
gonna say const node = q.shift.

20
00:01:22.631 --> 00:01:26.804
This is always a weird one, shift.

21
00:01:26.804 --> 00:01:29.320
You might be familiar with push and pop,

22
00:01:29.320 --> 00:01:32.880
those are probably more
common JavaScript operations.

23
00:01:32.880 --> 00:01:35.478
Push you add something to
the beginning of the array, and

24
00:01:35.478 --> 00:01:38.417
pop you will remove something
from the end of the array, right?

25
00:01:38.417 --> 00:01:41.706
Well, JavaScript also has something
called shift and unshift,

26
00:01:41.706 --> 00:01:44.870
which are doing it from
the beginning of the array.

27
00:01:44.870 --> 00:01:48.619
I think they are the worst names,
but it's what we have.

28
00:01:48.619 --> 00:01:53.200
So shift will take something off the front
of the array and return it to you,

29
00:01:53.200 --> 00:01:57.492
whereas unshift, which is literally
the worst name I could think of,

30
00:01:57.492 --> 00:02:00.570
will add something to
the beginning of the array.

31
00:02:02.190 --> 00:02:03.931
It is what it is, it's what we got.

32
00:02:03.931 --> 00:02:05.442
So we will call shift,

33
00:02:05.442 --> 00:02:10.778
then what we're going to do is we're
gonna say array.push(node.value).

34
00:02:10.778 --> 00:02:15.228
My friend here earlier asked,
what order do we do this in and

35
00:02:15.228 --> 00:02:17.101
just to reiterate here?

36
00:02:17.101 --> 00:02:22.091
It doesn't actually matter which order
that you're gonna do it in because

37
00:02:22.091 --> 00:02:26.291
you're just gonna go through
another iteration eventually,

38
00:02:26.291 --> 00:02:30.260
it doesn't matter if you add
the things first or not.

39
00:02:30.260 --> 00:02:31.808
So, does it make more sense now?

40
00:02:31.808 --> 00:02:32.331
Cool.

41
00:02:32.331 --> 00:02:34.980
She's not ME so I feel okay.

42
00:02:34.980 --> 00:02:40.469
[LAUGH] So, then we're gonna do,
if there is a left

43
00:02:40.469 --> 00:02:47.139
node to process then we're gonna say,
if (node.left),

44
00:02:47.139 --> 00:02:52.111
I can spell, queue.push(node.left),

45
00:02:52.111 --> 00:02:56.725
and then we will do the same for
the right.

46
00:02:56.725 --> 00:03:00.160
So if (node.right) and
queue.push(node.right).

47
00:03:00.160 --> 00:03:01.097
This order does matter.

48
00:03:01.097 --> 00:03:03.180
You have to do the left one first, right?

49
00:03:03.180 --> 00:03:08.307
But everything else does not matter, okay?

50
00:03:08.307 --> 00:03:12.240
And then you will just return the array.

51
00:03:17.149 --> 00:03:23.415
&gt;&gt; Brian Holt: Now if you want to be
a little bit more defensive here,

52
00:03:23.415 --> 00:03:28.708
which I was encouraged
defensive driving and

53
00:03:28.708 --> 00:03:35.290
programming, you will say if queue or
queue.length.

54
00:03:35.290 --> 00:03:37.240
If they don't give you a queue or

55
00:03:37.240 --> 00:03:41.950
something like that then you just wanna
return array or something like that.

56
00:03:41.950 --> 00:03:46.446
But in this particular case I'm not really
looking for edge cases but you'll see that

57
00:03:46.446 --> 00:03:50.081
in the completed part so I just felt
like I should put it there for you.

58
00:03:50.081 --> 00:03:51.669
We should probably see if that works.

59
00:03:55.177 --> 00:03:55.715
&gt;&gt; Brian Holt: And it works.

60
00:03:55.715 --> 00:04:01.860
So this is the iterative approach
to doing breadth first traversal.

61
00:04:01.860 --> 00:04:07.361
This is the more efficient way, and
I would argue not too unreadable, right?

62
00:04:07.361 --> 00:04:09.110
Pretty straightforward.

63
00:04:09.110 --> 00:04:12.566
Usually when you're trading off iterative
versus recursive you're trading off for

64
00:04:12.566 --> 00:04:15.649
readability, and usually the recursive
method is usually more readable.

65
00:04:15.649 --> 00:04:18.469
That's usually why you
would select recursive or

66
00:04:18.469 --> 00:04:22.090
you have to take advantage of
like recursive properties.

67
00:04:22.090 --> 00:04:23.230
In this particular case,
it doesn't matter.

68
00:04:23.230 --> 00:04:24.520
I think this is good.

69
00:04:24.520 --> 00:04:26.801
This is the way that I
would choose to write it.

70
00:04:26.801 --> 00:04:31.821
However, I did tell you that I
would show you how to do recursive,

71
00:04:31.821 --> 00:04:34.025
which I have up here as well.

72
00:04:34.025 --> 00:04:39.501
So const recursiveBFT

73
00:04:39.501 --> 00:04:45.267
= (queue, array).

74
00:04:47.405 --> 00:04:52.733
&gt;&gt; Brian Holt: So
the first thing you want to

75
00:04:52.733 --> 00:05:01.180
do if (queue.length) then return array.

76
00:05:01.180 --> 00:05:04.156
So, if I pass you an empty queue then
you just going to return array, right?

77
00:05:04.156 --> 00:05:07.050
It follows, it is our base case, right?

78
00:05:09.150 --> 00:05:14.720
Then here you're gonna say
const node = queue.shift,

79
00:05:14.720 --> 00:05:19.024
and you say array.push(node.value).

80
00:05:19.024 --> 00:05:19.990
(node.value).

81
00:05:23.903 --> 00:05:29.520
&gt;&gt; Brian Holt: And
then you're gonna say if (node.left)

82
00:05:29.520 --> 00:05:34.352
queue.push(node.left).

83
00:05:34.352 --> 00:05:36.500
node.left.

84
00:05:39.925 --> 00:05:43.668
&gt;&gt; Brian Holt: If (node.right)

85
00:05:43.668 --> 00:05:53.137
queue.push(node.right) return recursive,

86
00:05:56.982 --> 00:05:59.180
&gt;&gt; Brian Holt: queue.array.

87
00:06:02.175 --> 00:06:05.709
&gt;&gt; Brian Holt: And
that should work as well.

88
00:06:05.709 --> 00:06:08.750
Most loops can be rewritten
recursively this way.

89
00:06:12.905 --> 00:06:16.153
&gt;&gt; Brian Holt: In fact, I would probably
argue this is even a little bit harder to

90
00:06:16.153 --> 00:06:20.347
read than this one because it's just a lot
of cognitive overhead to picturing things

91
00:06:20.347 --> 00:06:21.520
in a recursive way.

92
00:06:21.520 --> 00:06:24.014
So this is how you'd write it, but

93
00:06:24.014 --> 00:06:28.831
I would suggest that this is
the superior way of writing it in both.

94
00:06:28.831 --> 00:06:33.327
Well, the performance profiles of these in
another language would be about the same,

95
00:06:33.327 --> 00:06:36.050
because this is what's called a tail call,
right?

96
00:06:36.050 --> 00:06:38.566
And you can do what's called
tail call optimization,

97
00:06:38.566 --> 00:06:41.528
which technically should exist
in JavaScript, but doesn't.

98
00:06:41.528 --> 00:06:43.200
That is a whole discussion for
another day.

99
00:06:43.200 --> 00:06:46.823
You should definitely troll Kyle Simpson
about it on Twitter, he loves that.

100
00:06:46.823 --> 00:06:52.348
[LAUGH] About what he thinks about
tail call optimization in JavaScript.

101
00:06:52.348 --> 00:06:54.459
Nonetheless, it's tangential.

102
00:06:54.459 --> 00:06:56.600
So any questions about
this before we move on?

103
00:06:58.830 --> 00:07:03.035
&gt;&gt; Student: I'll go ahead and repeat
the question I had asked during the break.

104
00:07:03.035 --> 00:07:05.725
And it does make more
sense now seeing the code.

105
00:07:05.725 --> 00:07:08.460
But, sorry.

106
00:07:08.460 --> 00:07:09.037
&gt;&gt; Brian Holt: You're okay.

107
00:07:09.037 --> 00:07:14.213
&gt;&gt; Student: I asked if it's possible to
get out of sync if you're doing breadth

108
00:07:14.213 --> 00:07:18.927
first traversal in a massive
Search tree where it would end up

109
00:07:18.927 --> 00:07:24.444
processing a level deeper on the left
than on the right, for example.

110
00:07:24.444 --> 00:07:26.131
&gt;&gt; Brian Holt: Well,
the nice thing about JavaScript,

111
00:07:26.131 --> 00:07:27.730
that's a great question, by the way.

112
00:07:30.200 --> 00:07:31.947
The nice thing about JavaScript
is it's single threaded.

113
00:07:31.947 --> 00:07:35.780
So you're not processing these
in parallel at all, right?

114
00:07:35.780 --> 00:07:40.714
So if you wrote this,
this is deterministic in the sense that

115
00:07:40.714 --> 00:07:45.282
it's always going to run the same way,
no matter what.

116
00:07:45.282 --> 00:07:48.744
And so if you write it like this,
it should never get out of sync

117
00:07:48.744 --> 00:07:52.150
because you're always just
putting things into the queue.

118
00:07:52.150 --> 00:07:55.147
And if you're always adding them
to the queue in the same order and

119
00:07:55.147 --> 00:07:58.743
things like that, like, if I did like,
math dot random in here a bunch of times

120
00:07:58.743 --> 00:08:01.051
then you can probably find
a way to get out of sync.

121
00:08:01.051 --> 00:08:04.020
But no, it should work the same
way every single time.

122
00:08:04.020 --> 00:08:06.580
Where you would run into problems,
perhaps in other languages,

123
00:08:06.580 --> 00:08:08.870
if you're trying to concurrently
process these things.

124
00:08:08.870 --> 00:08:13.588
But this is not the strategy that you
would employ to process it concurrently,

125
00:08:13.588 --> 00:08:15.270
or rather, in parallel.

126
00:08:15.270 --> 00:08:15.793
That's more what I mean.

127
00:08:15.793 --> 00:08:16.862
Does that answer your question?

128
00:08:16.862 --> 00:08:17.465
&gt;&gt; Student: Yes.

129
00:08:17.465 --> 00:08:18.200
&gt;&gt; Brian Holt: Cool.

