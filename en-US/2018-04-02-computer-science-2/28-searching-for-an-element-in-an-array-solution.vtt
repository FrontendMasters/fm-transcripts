WEBVTT

1
00:00:00.008 --> 00:00:05.228
&gt;&gt; Brian Holt: Okay, linear search,

2
00:00:05.228 --> 00:00:10.448
for let i = 0, i is less

3
00:00:10.448 --> 00:00:15.407
than array.length,

4
00:00:15.407 --> 00:00:19.844
i++, if id triple

5
00:00:19.844 --> 00:00:25.064
equals array of i.id,

6
00:00:25.064 --> 00:00:30.290
then return array of i.

7
00:00:33.260 --> 00:00:37.260
Otherwise, whatever, it doesn't matter.

8
00:00:37.260 --> 00:00:41.310
I have in my notes return void 0, which is
is just a way of saying return undefined.

9
00:00:41.310 --> 00:00:44.650
It would also be exactly the same
if you just didn't do that.

10
00:00:44.650 --> 00:00:49.200
But sometimes it's good to be explicit,
it depends on what you want to do.

11
00:00:49.200 --> 00:00:50.850
Binary search.

12
00:00:50.850 --> 00:00:52.150
Function binarySearch.

13
00:00:53.500 --> 00:00:58.755
So what I'm going to do
here is I'm going to say,

14
00:00:58.755 --> 00:01:04.670
let min = 0,
let max = array.length- 1, right?

15
00:01:04.670 --> 00:01:10.334
So that's the end of the array, so
that's the currently the section

16
00:01:10.334 --> 00:01:15.227
that I'm searching on,
then let index, and let element.

17
00:01:15.227 --> 00:01:18.250
These are the kind of the two things
that I'm looking at any given time.

18
00:01:18.250 --> 00:01:20.401
Now, I'm just gonna do a while loop.

19
00:01:20.401 --> 00:01:26.167
I'm gonna say while min less than or
equal to max,

20
00:01:26.167 --> 00:01:31.109
because as soon as that's no longer true,

21
00:01:31.109 --> 00:01:35.778
then I've covered enough of the array to

22
00:01:35.778 --> 00:01:40.193
assuredly say it's not in the array.

23
00:01:40.193 --> 00:01:46.309
So I'm gonna say if element,
sorry, I have to do this first,

24
00:01:46.309 --> 00:01:52.439
so I'm gonna say index = (Math.floor,
min + max)/2.

25
00:01:52.439 --> 00:01:55.662
The reason why I do Math.floor is
because this could be 0.5, right?

26
00:01:55.662 --> 00:02:00.835
So 9 divided by 2 is gonna be 4.5,
you wanted to look at 4, right?

27
00:02:00.835 --> 00:02:05.040
It doesn't matter if you go up or down
I don't think, but we'll be going down.

28
00:02:07.870 --> 00:02:12.200
Element which is the current element
that we're looking at is array index.

29
00:02:14.350 --> 00:02:20.997
So if element.id is less than id,
min = index + 1

30
00:02:27.021 --> 00:02:30.308
&gt;&gt; Brian Holt: Right, because we're gonna

31
00:02:30.308 --> 00:02:35.436
shorten our search to
where we currently are,

32
00:02:35.436 --> 00:02:39.915
else if element.id is greater than id.

33
00:02:39.915 --> 00:02:45.940
Then we're gonna say max = index- 1.

34
00:02:45.940 --> 00:02:47.973
Okay, that's,

35
00:02:56.187 --> 00:02:56.996
&gt;&gt; Brian Holt: This is,

36
00:02:56.996 --> 00:03:02.973
just gonna make this stop auto updating
cuz we're in the while loop and

37
00:03:02.973 --> 00:03:04.970
it's messing me up.

38
00:03:04.970 --> 00:03:09.890
Okay, index- 1, right,
cuz we're then gonna move the max back.

39
00:03:10.980 --> 00:03:15.170
Else return element because if neither
one of those is true then we've

40
00:03:15.170 --> 00:03:17.930
reached the element that we're looking for
and we return the element.

41
00:03:17.930 --> 00:03:19.950
Otherwise, you return void or
whatever you want to do.

42
00:03:20.990 --> 00:03:22.265
So now if we try and run it.

43
00:03:24.491 --> 00:03:25.380
&gt;&gt; Brian Holt: Passed our test.

44
00:03:25.380 --> 00:03:28.490
So that's a basic binary
search right there.

45
00:03:28.490 --> 00:03:32.060
Just kind of moving the sliders until
eventually you either land on the element

46
00:03:32.060 --> 00:03:35.070
or you've run out of space to
move the sliders and you're done.

47
00:03:35.070 --> 00:03:36.620
The sliders being min and max, right?

