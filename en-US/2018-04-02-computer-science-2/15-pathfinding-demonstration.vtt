WEBVTT

1
00:00:02.789 --> 00:00:08.334
&gt;&gt; Brian Holt: So, what we're going to do
now, I think this is really, really cool.

2
00:00:08.334 --> 00:00:12.818
And for the longest time,
up until maybe a couple of years ago,

3
00:00:12.818 --> 00:00:17.400
I felt like this problem of
pathfinding was inaccessible to me.

4
00:00:17.400 --> 00:00:19.110
I felt like I didn't have enough theory.

5
00:00:19.110 --> 00:00:20.890
I didn't have enough mathematics, logic,

6
00:00:20.890 --> 00:00:24.000
whatever you want to say,
to approach this problem.

7
00:00:24.000 --> 00:00:26.500
And sitting down with

8
00:00:29.350 --> 00:00:33.590
some of my friends that worked that
Netflix, they kind of started talking.

9
00:00:33.590 --> 00:00:35.400
I'm like wait, I can do this.

10
00:00:35.400 --> 00:00:37.070
I understand how to do this.

11
00:00:37.070 --> 00:00:41.390
And I got really excited about it and
learned a bunch of stuff about it.

12
00:00:41.390 --> 00:00:44.999
And since learning about
how to do pathfinding,

13
00:00:44.999 --> 00:00:48.160
it's come up in like four interviews.

14
00:00:48.160 --> 00:00:53.370
It is pretty useful and it comes up
very frequently in senior interviews.

15
00:00:54.590 --> 00:00:58.050
Let's talk about what pathfinding is.

16
00:00:58.050 --> 00:01:03.120
I think its super fun but
my definition of fun might not be yours.

17
00:01:04.300 --> 00:01:05.830
I sit at home and do it on whiteboards.

18
00:01:05.830 --> 00:01:07.340
I'm just kidding that's not really true.

19
00:01:08.350 --> 00:01:10.590
Actually that's kinda true but
that's okay.

20
00:01:11.970 --> 00:01:12.700
Pathfinding.

21
00:01:13.770 --> 00:01:18.260
We're going to have a 2D Cartesian graph,

22
00:01:18.260 --> 00:01:25.130
which is just a fancy way of saying
a plane that has x and y coordinates.

23
00:01:25.130 --> 00:01:28.070
That's really what I'm trying to say here.

24
00:01:28.070 --> 00:01:32.640
I think in these particular examples,
we have origins starting at the top left.

25
00:01:32.640 --> 00:01:36.260
Cuz we write a lot of CSS and
we're probably pretty used to that.

26
00:01:36.260 --> 00:01:40.410
I'm pretty used to that so
I'm gonna make you be used to it too.

27
00:01:40.410 --> 00:01:43.440
And the idea is I have two points,
in this case a and b.

28
00:01:43.440 --> 00:01:46.200
And I wanna get from a to b, right?

29
00:01:47.470 --> 00:01:50.215
I wanna path find all my way over there.

30
00:01:50.215 --> 00:01:57.173
So just sitting down right now with
those particular goals in mind.

31
00:01:57.173 --> 00:02:01.528
I imagine many of you would be able to
write some sort of naive implementation

32
00:02:01.528 --> 00:02:04.830
that basically says go
towards it until you hit it.

33
00:02:04.830 --> 00:02:06.166
Which works in this particular case,
right?

34
00:02:06.166 --> 00:02:10.106
If there's no obstacles,
if there's no bends or anything like that.

35
00:02:10.106 --> 00:02:13.710
You could probably just say, if I need to
go in a positive direction go positive,

36
00:02:13.710 --> 00:02:16.000
if I need to go in a negative
direction go negative.

37
00:02:16.000 --> 00:02:19.480
And that would generally work, you would
end up with something like this, right?

38
00:02:19.480 --> 00:02:22.790
From A, to B, I would go down
until I could go down no more, and

39
00:02:22.790 --> 00:02:24.540
then I would go right
until I would hit it.

40
00:02:24.540 --> 00:02:29.930
And that would be a good path finding
algorithm for this particular instance.

41
00:02:29.930 --> 00:02:31.230
Given those constraints,

42
00:02:31.230 --> 00:02:34.240
this will probably be the most efficient
path finding algorithm you can get.

43
00:02:34.240 --> 00:02:37.110
This is like go until you hit it, right?

44
00:02:37.110 --> 00:02:39.262
It follows, so as you imagine,

45
00:02:39.262 --> 00:02:44.460
people that write Google Maps don't
have such simple constraints, right?

46
00:02:44.460 --> 00:02:48.360
You have to take turns, and there's one
ways and all sorts of stuff like that.

47
00:02:48.360 --> 00:02:54.880
So that's what we're gonna teach
you how to do today is one

48
00:02:54.880 --> 00:03:00.760
way to pathfind in a maze that has walls
and constraints and things like that.

49
00:03:02.030 --> 00:03:03.140
Right?

50
00:03:03.140 --> 00:03:08.110
Cuz if you try and do your strategy here,
you're gonna go until you hit this X And

51
00:03:08.110 --> 00:03:11.040
you like I can't go through that,
now what would I do, right?

52
00:03:11.040 --> 00:03:13.950
You could probably try and go this way and
then that didn't work, and

53
00:03:13.950 --> 00:03:15.170
then you try go the other way.

54
00:03:15.170 --> 00:03:15.830
Suffice to say,

55
00:03:15.830 --> 00:03:20.460
your algorithm goes from very simple to
very complicated very quickly, right?

56
00:03:20.460 --> 00:03:24.858
So it would be great if there some way
that we could solve this a little bit more

57
00:03:24.858 --> 00:03:29.842
elegantly.
&gt;&gt; Brian Holt: So I'm going to

58
00:03:29.842 --> 00:03:34.610
introduce you to some, I can never
remember how to say this, Dijkstra's?

59
00:03:34.610 --> 00:03:36.010
Am I saying that right?

60
00:03:36.010 --> 00:03:38.530
I don't know, I'm sure someone
online is like no it's Dijkstra's.

61
00:03:38.530 --> 00:03:39.220
It probably is.

62
00:03:39.220 --> 00:03:40.520
It's actually, might be Dijkstra's.

63
00:03:40.520 --> 00:03:41.490
Shit.

64
00:03:41.490 --> 00:03:45.210
Anyway, [LAUGH] it's this guy's algorithm,
right?

65
00:03:47.320 --> 00:03:47.910
It's really cool.

66
00:03:47.910 --> 00:03:52.200
I will actually confess to you that this
is not actually truly the same algorithm

67
00:03:52.200 --> 00:03:54.130
as I think it is Dijkstra's.

68
00:03:54.130 --> 00:03:59.190
What we're going to be doing is
a variation, a simplification of this.

69
00:03:59.190 --> 00:04:06.041
But the two are often conflated,
just so you know.

70
00:04:06.041 --> 00:04:10.368
It's not actually truly that his algorithm
takes into account waitings as well.

71
00:04:10.368 --> 00:04:14.478
And we're not going to do any waiting or
heuristics, which is another term

72
00:04:14.478 --> 00:04:18.750
that I will explain to you perhaps later,
just not at this moment in time.

73
00:04:18.750 --> 00:04:21.760
So let's try this algorithm.

74
00:04:22.910 --> 00:04:27.870
What we're going to do in this
algorithm is we're going to

75
00:04:27.870 --> 00:04:30.511
start at point A here, right?

76
00:04:30.511 --> 00:04:32.657
Like what you see right here.

77
00:04:32.657 --> 00:04:35.760
And then I'm gonna go one
in every single direction.

78
00:04:35.760 --> 00:04:37.780
I'm gonna go up, I'm gonna go right,
I'm gonna go down, and

79
00:04:37.780 --> 00:04:39.090
I'm gonna go left, right?

80
00:04:40.370 --> 00:04:46.760
And after I do that with point A,
I'm also gonna do it from point B, right?

81
00:04:48.160 --> 00:04:51.479
So I'm gonna go down to point B and
I'm going to go left, I'm gonna go up, and

82
00:04:51.479 --> 00:04:52.361
I'm gonna go down.

83
00:04:52.361 --> 00:04:56.071
And I'm gonna mark all of those as
belonging to point A or point B.

84
00:04:56.071 --> 00:05:02.810
And I'm going to mark them of how far
away they are from the origin, right?

85
00:05:02.810 --> 00:05:06.060
So in this particular case, this one's
one way, this one's one away, and

86
00:05:06.060 --> 00:05:07.030
this one's one away, right?

87
00:05:08.730 --> 00:05:09.760
Cool.

88
00:05:09.760 --> 00:05:11.190
I'm gonna start by doing that.

89
00:05:12.700 --> 00:05:18.180
Then I'm gonna go back to point A and
I'm going to go to each one of these.

90
00:05:18.180 --> 00:05:21.100
I messed up,
this should also be a 2 right here.

91
00:05:21.100 --> 00:05:26.610
And I'm gonna one away from each
one of those as well, right?

92
00:05:28.680 --> 00:05:30.410
Yeah, in fact you can see
down here I fixed it.

93
00:05:30.410 --> 00:05:32.350
So, this would be 2.

94
00:05:32.350 --> 00:05:34.780
So, each one of those,
I'm gonna go one away, right?

95
00:05:34.780 --> 00:05:38.320
So, this is two, this is two,
this is two, this is two,

96
00:05:38.320 --> 00:05:39.950
and this should be two right here, right?

97
00:05:39.950 --> 00:05:41.630
So, it's one step further.

98
00:05:41.630 --> 00:05:44.010
These are two steps away from A.

99
00:05:44.010 --> 00:05:45.130
Do we follow?

100
00:05:45.130 --> 00:05:46.790
Kinda, just in a spiral fashion here.

101
00:05:48.770 --> 00:05:50.050
Same thing with B,
I'm going to go down and

102
00:05:50.050 --> 00:05:51.960
mark all of these as being two away,
two away.

103
00:05:51.960 --> 00:05:55.140
And obviously this is a wall, so
you can't go through the wall.

104
00:05:55.140 --> 00:05:57.614
So that one just kinda gets skipped.

105
00:05:57.614 --> 00:06:01.022
Okay?
At this point we're just gonna keep

106
00:06:01.022 --> 00:06:02.320
alternating.

107
00:06:02.320 --> 00:06:04.160
So this is three, three, three, and three.

108
00:06:04.160 --> 00:06:08.400
And then all of a sudden,
they haven't quite crossed her but

109
00:06:08.400 --> 00:06:12.800
on the next iteration these two
spirals are going to intersect right?

110
00:06:13.900 --> 00:06:17.170
At that point you have found
the shortest path, right?

111
00:06:17.170 --> 00:06:22.743
Because that means that I can go from one,
two, three, four, five, six, seven, right?

112
00:06:22.743 --> 00:06:27.683
So as soon as these two spirals intersect,
you're guaranteed that

113
00:06:27.683 --> 00:06:32.026
you have found the shortest
path possible between the two.

114
00:06:32.026 --> 00:06:32.884
It's a mouthful.

115
00:06:32.884 --> 00:06:37.420
Does that make sense?

116
00:06:37.420 --> 00:06:40.928
Right?
And because you're doing these spiral

117
00:06:40.928 --> 00:06:45.925
patterns, you're guaranteed as
soon as they intersect that

118
00:06:45.925 --> 00:06:49.684
it's going to be
the shortest path possible.

119
00:06:49.684 --> 00:06:51.904
Because if it wasn't
the shortest path possible,

120
00:06:51.904 --> 00:06:54.460
you would have found it
in a previous iteration.

121
00:06:54.460 --> 00:06:58.590
Now, in this particular case,
we technically found like five

122
00:06:58.590 --> 00:07:02.520
shortest paths, because you can go
left first, you can go down first.

123
00:07:02.520 --> 00:07:05.400
It's going to vive you a shortest path.

124
00:07:05.400 --> 00:07:07.330
And if you ran it all
the way to completion,

125
00:07:07.330 --> 00:07:09.314
you would have all of the shortest paths.

126
00:07:11.060 --> 00:07:16.520
Any questions about that?
&gt;&gt; Brian Holt: Cool.

127
00:07:17.620 --> 00:07:21.770
So let's talk about how
this actually works,

128
00:07:21.770 --> 00:07:26.510
because you actually already know
how to write the code for this.

129
00:07:26.510 --> 00:07:30.331
I know that because I literally just
taught it to you, like half hour ago.

130
00:07:30.331 --> 00:07:36.440
[LAUGH] So picture these,
rather than being

131
00:07:36.440 --> 00:07:42.960
points like a Cartesian graph,
picture them as being trees, right?

132
00:07:42.960 --> 00:07:46.530
So if I go down here,
I have A, which is at 1-1.

133
00:07:46.530 --> 00:07:49.280
And then it has a left child,

134
00:07:49.280 --> 00:07:54.370
a slightly less left child, a slightly
less right child, and a right child.

135
00:07:54.370 --> 00:07:58.190
So it's like a tree
that has four children.

136
00:07:58.190 --> 00:08:04.570
And what I'm doing here is I'm just
processing one layer at a time for

137
00:08:04.570 --> 00:08:09.250
each one of these, right?
&gt;&gt; Brian Holt: This,

138
00:08:09.250 --> 00:08:11.586
hopefully, starting to go
off in your head it's like,

139
00:08:11.586 --> 00:08:14.035
this looks a lot like
breadth-first traversal, right?

140
00:08:14.035 --> 00:08:16.857
I have these trees that
have all these children and

141
00:08:16.857 --> 00:08:19.684
I'm just processing one layer at a time,
right?

142
00:08:19.684 --> 00:08:23.437
Because I'm trying to stay as close to the
root as possible Because I want to find

143
00:08:23.437 --> 00:08:25.660
the shortest path right?

144
00:08:25.660 --> 00:08:27.150
You could do death first traversal and

145
00:08:27.150 --> 00:08:29.945
it would take you to all
the crazy ends of the graph.

146
00:08:29.945 --> 00:08:32.068
But we're trying to find this
actually as soon as possible.

147
00:08:32.068 --> 00:08:35.639
Ideally if you look here,
when we find the answer,

148
00:08:35.639 --> 00:08:39.393
we never processed any of
these black dots over here.

149
00:08:39.393 --> 00:08:41.740
Because we're trying to do
this as fast as possible.

150
00:08:41.740 --> 00:08:45.710
You don't want to look at everything
if we don't have to, right?

151
00:08:45.710 --> 00:08:47.580
So that's why we're doing
breath-first traversal here.

152
00:08:48.990 --> 00:08:50.443
So that's exactly how you're
going to solve it, right?

153
00:08:50.443 --> 00:08:53.021
You're going to put each of
these children into a queue.

154
00:08:53.021 --> 00:08:57.615
And you're just going to keep solving
the queue until eventually you find two

155
00:08:57.615 --> 00:09:00.950
things that,
I'm gonna go from this node to this node.

156
00:09:00.950 --> 00:09:04.396
I'm gonna see that this node is marked by
A and say cool, I found the answer, and

157
00:09:04.396 --> 00:09:08.349
that's it.
&gt;&gt; Brian Holt: Does that make

158
00:09:08.349 --> 00:09:12.053
sense?
&gt;&gt; Speaker 2: So

159
00:09:12.053 --> 00:09:14.320
there'd be a fourth unmarked iteration,
right?

160
00:09:14.320 --> 00:09:16.785
And that's when you'd find the-
&gt;&gt; Brian Holt: Exactly.

161
00:09:16.785 --> 00:09:17.450
&gt;&gt; Speaker 2: Okay.

162
00:09:17.450 --> 00:09:18.310
&gt;&gt; Brian Holt: At some point,

163
00:09:18.310 --> 00:09:20.670
you're gonna process this node right here.

164
00:09:20.670 --> 00:09:23.980
It's actually gonna be
processing this node.

165
00:09:23.980 --> 00:09:27.590
This node's gonna say this
one's been marked by B.

166
00:09:27.590 --> 00:09:30.040
This has not been marked by A.

167
00:09:30.040 --> 00:09:33.380
And therefore, I've found the answer.

168
00:09:33.380 --> 00:09:37.783
I'm going to end the iteration.
&gt;&gt; Brian Holt: Now,

169
00:09:37.783 --> 00:09:40.980
in this particular case, I'm just
going to ask you to find the length.

170
00:09:40.980 --> 00:09:43.030
I'm not going to ask you
to find the actual path.

171
00:09:43.030 --> 00:09:46.190
I don't want you to return to
that because there's a lot of

172
00:09:46.190 --> 00:09:48.000
different right answers there.

173
00:09:48.000 --> 00:09:50.363
But if you were trying
to find the actual path,

174
00:09:50.363 --> 00:09:52.977
you would just be storing
the path on nodes as well.

175
00:09:52.977 --> 00:09:54.629
Like, how did I get here, just so

176
00:09:54.629 --> 00:10:00.660
you know.
&gt;&gt; Brian Holt: Cool, so yeah, you just

177
00:10:00.660 --> 00:10:05.555
keep enqueuing all the immediate children
until you run out of things to process.

178
00:10:05.555 --> 00:10:11.979
And that's it.
&gt;&gt; Brian Holt: I

179
00:10:11.979 --> 00:10:14.850
will say that you're gonna have
two different queues, right?

180
00:10:14.850 --> 00:10:18.280
You're gonna have a queue for A and
you're gonna have a queue for B.

181
00:10:18.280 --> 00:10:23.160
There are clever ways to write this code
so that you only are using one loop.

182
00:10:23.160 --> 00:10:26.230
Don't do it,
just write two different loops.

183
00:10:26.230 --> 00:10:29.030
It's just a lot simpler and
a lot easier to read.

184
00:10:29.030 --> 00:10:33.160
So that's what I wanted to tell you.

185
00:10:33.160 --> 00:10:36.810
I want to show you this because
I think it's really cool.

186
00:10:36.810 --> 00:10:39.090
So, this is called breadth-first search.

187
00:10:39.090 --> 00:10:42.400
I was trying to be a little
coy about what it was called.

188
00:10:42.400 --> 00:10:45.730
[LAUGH]
So

189
00:10:45.730 --> 00:10:47.240
that's why these are two different things.

190
00:10:47.240 --> 00:10:49.190
Breadth-first, and extras.

191
00:10:50.510 --> 00:10:56.205
But if I have two nodes here and I'm going
to just put a wall between two of them,

192
00:10:56.205 --> 00:10:58.480
and I'm not going to allow diagonals.

193
00:10:58.480 --> 00:11:01.070
In this case I'm asking
to not do diagonal.

194
00:11:01.070 --> 00:11:04.650
But as you might imagine it's
relatively similar you just,

195
00:11:04.650 --> 00:11:10.030
instead of enqueuing four things
you would enqueue eight things.

196
00:11:11.542 --> 00:11:13.753
And then you can see what it looks like.

197
00:11:13.753 --> 00:11:20.911
This is unidirectional.
&gt;&gt; Brian Holt: If you just do one,

198
00:11:20.911 --> 00:11:22.870
it's a little less effective.

199
00:11:22.870 --> 00:11:26.101
So if I, now I'm gonna say bidirectional,
which means look at both of them at

200
00:11:26.101 --> 00:11:30.807
the same time.
&gt;&gt; Brian Holt: As soon as these

201
00:11:30.807 --> 00:11:34.500
two intersect,
then I know I found the answer, right?

202
00:11:34.500 --> 00:11:36.000
But that's what it looks like.

203
00:11:36.000 --> 00:11:38.585
Hopefully, that helps to
visualize what's happening

204
00:11:38.585 --> 00:11:44.070
there.
&gt;&gt; Brian Holt: Questions about that?

205
00:11:44.070 --> 00:11:44.652
&gt;&gt; Speaker 2: So Dijkstra and

206
00:11:44.652 --> 00:11:48.260
Breadth-First are different?
&gt;&gt; Brian Holt: If you

207
00:11:48.260 --> 00:11:51.480
do Dijkstra's algorithm with no waiting.

208
00:11:51.480 --> 00:11:58.570
So when I say waiting,
&gt;&gt; Brian Holt: I think in this case.

209
00:12:00.580 --> 00:12:04.130
Yeah, I mean,
there's a little bit of difference there.

210
00:12:06.940 --> 00:12:08.030
Let's see if I can show you.

211
00:12:08.030 --> 00:12:09.990
This is more of what I was thinking of.

212
00:12:09.990 --> 00:12:13.380
So you could be a little
bit smart about this.

213
00:12:13.380 --> 00:12:16.236
Typically the best path is going
to be the straightest path, right?

214
00:12:16.236 --> 00:12:20.400
So you could put some sort of weight so
that it tries to go towards it first.

215
00:12:20.400 --> 00:12:20.900
Right?

216
00:12:22.350 --> 00:12:24.937
And that's what I'm saying is that
dykstras can account for that.

217
00:12:24.937 --> 00:12:30.026
And breath-first is purely blind
like just spiral until they meet.

218
00:12:30.026 --> 00:12:35.551
Cuz the problem with this is
what happens if I have something

219
00:12:35.551 --> 00:12:40.980
like this where it's going to try and
go towards it first.

220
00:12:42.550 --> 00:12:44.350
It's going to be less efficient
when it does it that way.

221
00:12:46.730 --> 00:12:49.489
Cuz it's going to try to go towards
it first before going away.

222
00:12:49.489 --> 00:12:54.246
Anyway.
&gt;&gt; Brian Holt: Nonetheless

223
00:12:54.246 --> 00:12:57.960
they're all still doing a spiral
in some direction, right?

224
00:12:57.960 --> 00:13:01.760
They're just kind of being choosy
about which ones it's enqueuing.

225
00:13:02.930 --> 00:13:05.900
So that's really fun to play with,
you should definitely check it out.

226
00:13:05.900 --> 00:13:07.640
There's a bunch of different
path finding algorithms.

227
00:13:07.640 --> 00:13:10.630
This is just the simplest to code up
which is why we're gonna do that one.

228
00:13:10.630 --> 00:13:14.428
And then I definitely would invite
you to go do A*, just investigate A*,

229
00:13:14.428 --> 00:13:20.886
which is the one that I just showed you.
&gt;&gt; Brian Holt: If

230
00:13:20.886 --> 00:13:23.508
you wanna see the difference,
I put a Stack Overflow answer to

231
00:13:23.508 --> 00:13:25.739
answer your question about
what the difference is.

232
00:13:27.600 --> 00:13:30.500
Because I had that question,
too, that's why I Googled it.

