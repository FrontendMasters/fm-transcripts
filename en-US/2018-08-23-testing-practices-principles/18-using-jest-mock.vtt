WEBVTT

1
00:00:00.000 --> 00:00:03.424
&gt;&gt; Kent C Dodds: All right
cool let's get this under way.

2
00:00:03.424 --> 00:00:06.140
So I'm just gonna uncomment those.

3
00:00:06.140 --> 00:00:11.151
The alternate to the module
is just what we're using for

4
00:00:11.151 --> 00:00:16.807
the import and then the function
that returns the mock object.

5
00:00:16.807 --> 00:00:21.438
So, this you think about this
function as an entirely new module.

6
00:00:21.438 --> 00:00:24.354
So what would you put
inside of your module?

7
00:00:24.354 --> 00:00:25.552
That is what this function is.

8
00:00:25.552 --> 00:00:30.393
Except instead of module.exports,
in CommonJS or export default, whatever,

9
00:00:30.393 --> 00:00:34.123
you're going to return,
cuz it's a function, not a module.

10
00:00:34.123 --> 00:00:38.632
But for all intents and purposes,
the way that jest is going to treat it and

11
00:00:38.632 --> 00:00:42.432
the way that you can treat it is,
as if it's a regular module.

12
00:00:42.432 --> 00:00:48.927
And so, what we're doing is we're creating
a mock of the entire utels module.

13
00:00:48.927 --> 00:00:53.743
So, rather than, so whenever any
part of our code goes to input this

14
00:00:53.743 --> 00:00:57.727
module because we told just
we want to mock that module.

15
00:00:57.727 --> 00:01:01.565
It's actually going to
swap out whatever import

16
00:01:01.565 --> 00:01:04.848
there is with what we are returning here.

17
00:01:04.848 --> 00:01:08.926
I can do this because it just actually
takes control over the module system

18
00:01:08.926 --> 00:01:09.528
and node.

19
00:01:09.528 --> 00:01:13.637
And so whenever you do a required
statement or input stateiment,

20
00:01:13.637 --> 00:01:17.459
any of that, it's actually
going to go through just first.

21
00:01:17.459 --> 00:01:22.080
And just will check it's registry of marks
and if there is a mark available for

22
00:01:22.080 --> 00:01:25.576
what you are requiring then it
will use your mock instead.

23
00:01:25.576 --> 00:01:30.564
And there are various APIs in jest to
say for this case don't use the mock,

24
00:01:30.564 --> 00:01:34.360
use the actual implementation,
and things like that.

25
00:01:34.360 --> 00:01:39.022
And then jest does some magic stuff to
make sure that it all works as you would

26
00:01:39.022 --> 00:01:43.320
expect, despite the fact that this
code is actually running first.

27
00:01:43.320 --> 00:01:48.872
And so there is some cool magic
stuff that jest does under the hood.

28
00:01:48.872 --> 00:01:54.006
I don't think we really need to get
into that, just suffice it to say

29
00:01:54.006 --> 00:01:58.978
that creating a mock like this
allows us to mock an entire module.

30
00:01:58.978 --> 00:02:02.630
So here we just want to expose
the getWinner function.

31
00:02:02.630 --> 00:02:07.894
And rather than the spyOn,
we can use jest.function to create a mock

32
00:02:07.894 --> 00:02:13.455
function and then we can actually
pass our implementation here as well.

33
00:02:13.455 --> 00:02:18.521
So this getWinner is gonna be a jest
function that is implemented like this.

34
00:02:18.521 --> 00:02:23.820
It's gonna keep track of when
it's called and how it's called.

35
00:02:23.820 --> 00:02:27.262
And now from that we
actually no longer need this

36
00:02:27.262 --> 00:02:31.666
because utils.getwinner is now
going to be this function.

37
00:02:31.666 --> 00:02:34.196
So we can get rid of this entirely.

38
00:02:34.196 --> 00:02:38.259
And we don't need to
have this anymore either.

39
00:02:38.259 --> 00:02:39.915
We don't need to restore it.

40
00:02:39.915 --> 00:02:45.164
All of our test are going to be using
the get winner mock function and

41
00:02:45.164 --> 00:02:48.162
so when you save this and our test ran so

42
00:02:48.162 --> 00:02:52.882
fast we didn't notice but
yeah, they're still passing.

43
00:02:52.882 --> 00:02:56.957
And there's one thing I wanna
mention about this, but

44
00:02:56.957 --> 00:03:02.468
I'm gonna stop really quick for
any questions people have.

45
00:03:02.468 --> 00:03:03.338
&gt;&gt; Kent C Dodds: Yeah.

46
00:03:03.338 --> 00:03:06.940
&gt;&gt; Student: So this mock is replacing
the util is important in this file.

47
00:03:06.940 --> 00:03:11.436
So if we import util's in another file and
don't lock it.

48
00:03:11.436 --> 00:03:14.080
It wouldn't be overwritten by this.

49
00:03:14.080 --> 00:03:15.680
&gt;&gt; Kent C Dodds: Yeah, that's right.

50
00:03:15.680 --> 00:03:19.340
So, this mock only applies for
this test, for the test in this file.

51
00:03:19.340 --> 00:03:24.229
So if you made another test somewhere
else and actually, in fact we did,

52
00:03:24.229 --> 00:03:27.530
this util is actually going
to be the actual one.

53
00:03:27.530 --> 00:03:30.924
&gt;&gt; Student: Sure, and then is there
a way to override just certain-

54
00:03:30.924 --> 00:03:32.194
&gt;&gt; Kent C Dodds: Properties?

55
00:03:32.194 --> 00:03:33.806
Yeah, I'm glad that you asked.

56
00:03:33.806 --> 00:03:39.009
So if we want to get the actual version
of the utils and then just override

57
00:03:39.009 --> 00:03:44.907
certain properties as you were saying,
in our case there's only one property,

58
00:03:44.907 --> 00:03:49.354
but so we'd say actualutils,
whatever you want to call it.

59
00:03:49.354 --> 00:03:51.268
And then require .requireActual.

60
00:03:51.268 --> 00:03:56.551
So requireActual is coming from jest,
that's not like a node thing.

61
00:03:56.551 --> 00:04:00.844
So Jest Monkey Patches require
actual actual entre require.

62
00:04:00.844 --> 00:04:06.756
Because actually, the require we're
using is jest require function anyway.

63
00:04:06.756 --> 00:04:13.656
But then you'd say the relative path utils
and then what I would do is I'd just say,

64
00:04:13.656 --> 00:04:18.701
I want all of the things except
this one I'm gonna override.

65
00:04:18.701 --> 00:04:21.528
&gt;&gt; Student: Cool.
&gt;&gt; Kent C Dodds: That's a great question.

66
00:04:21.528 --> 00:04:23.356
So one other thing.

67
00:04:23.356 --> 00:04:27.650
Because we have this test and
it's calling Thumb war.

68
00:04:27.650 --> 00:04:33.762
If we wanted to have another test and then
assert that getWinner was called twice.

69
00:04:33.762 --> 00:04:35.187
Actually, here, we can do this.

70
00:04:35.187 --> 00:04:39.123
So let's just copy-paste
returns winner again.

71
00:04:39.123 --> 00:04:40.148
We'll save it,

72
00:04:40.148 --> 00:04:45.074
we're gonna get an error because it's
now called four times instead of twice.

73
00:04:45.074 --> 00:04:48.530
That's because we ran both of these tests.

74
00:04:48.530 --> 00:04:50.021
You want your tests to be totally.

75
00:04:50.021 --> 00:04:52.699
To work in total isolation of each other.

76
00:04:52.699 --> 00:04:56.566
You should be able to run only
one if we skip here, .skip.

77
00:04:56.566 --> 00:04:57.394
Then it's gonna work.

78
00:04:57.394 --> 00:05:00.319
So you want to make it so
you can delete a test and

79
00:05:00.319 --> 00:05:03.099
it doesn't impact any of your other tests.

80
00:05:03.099 --> 00:05:06.594
They should all work in total
isolation of each other.

81
00:05:06.594 --> 00:05:09.530
So to make this work,
there are a couple things we could do.

82
00:05:09.530 --> 00:05:13.719
First we could start with
utils.getWinner.mockClear.

83
00:05:13.719 --> 00:05:16.519
And that'll just clear out
all the state of the mock.

84
00:05:16.519 --> 00:05:19.705
And we'll do that before
each of our tests.

85
00:05:19.705 --> 00:05:20.816
So that would make it work.

86
00:05:20.816 --> 00:05:25.463
Because we'll probably be doing this
in every single one of the tests in

87
00:05:25.463 --> 00:05:28.959
this file, this is a good use case for,
before each.

88
00:05:29.979 --> 00:05:33.751
&gt;&gt; Kent C Dodds: Oops yeah and
we'll just put that in there and

89
00:05:33.751 --> 00:05:40.443
then we don't need to we don't need
to do that in every one of our test.

90
00:05:40.443 --> 00:05:45.216
&gt;&gt; Kent C Dodds: Cool so there's one
more thing I don't think we're gonna do

91
00:05:45.216 --> 00:05:49.146
it as an exercise I'll just
show it to you it'll be

92
00:05:49.146 --> 00:05:52.340
kind of hard to do as an exercise anyway.

93
00:05:52.340 --> 00:05:56.518
But does anybody have any
questions before we do that?

94
00:05:56.518 --> 00:06:01.760
&gt;&gt; Student: I just had one more,
related to sort of you showing a case

95
00:06:01.760 --> 00:06:06.558
where two tests success
are based upon each other,

96
00:06:06.558 --> 00:06:11.150
is there a way jest to run
tests in a random order?

97
00:06:11.150 --> 00:06:14.466
&gt;&gt; Kent C Dodds: All right,
that's an interesting question.

98
00:06:14.466 --> 00:06:16.360
So, in tests within a single file.

99
00:06:16.360 --> 00:06:21.553
As far as I know, there is not a way
to make it run in a random order.

100
00:06:21.553 --> 00:06:26.164
It does run all of your test files
in parallel in random orders.

101
00:06:26.164 --> 00:06:30.382
In fact, jest is so cool that if one
test file has a failing test and

102
00:06:30.382 --> 00:06:31.934
then you make a change.

103
00:06:31.934 --> 00:06:36.368
And it's going to run that test file
first, when it reruns all of your tests so

104
00:06:36.368 --> 00:06:38.770
that you get that feedback very quickly.

105
00:06:38.770 --> 00:06:44.074
Which is like just as all of these little
features like wow that is really handy.

106
00:06:44.074 --> 00:06:44.619
But yeah,

107
00:06:44.619 --> 00:06:48.142
as far as within a single test there
is no way to do that as far as I know.

108
00:06:48.142 --> 00:06:52.324
It sounds like a pretty cool pull request,
though.

109
00:06:52.324 --> 00:06:54.430
Okay, so let's go ahead, and

110
00:06:54.430 --> 00:06:59.620
you don't have to do this exercise
because it's pretty straightforward.

111
00:06:59.620 --> 00:07:04.180
So as was noted,
actually I think Peter mentioned this,

112
00:07:04.180 --> 00:07:08.455
this mock will only be picked
up by this test file, and

113
00:07:08.455 --> 00:07:13.118
all modules used during
the lifetime of this test module.

114
00:07:13.118 --> 00:07:17.684
What if you have a module that you
pretty much never want to have,

115
00:07:17.684 --> 00:07:21.841
like you're gonna be marking
in almost all of your tests.

116
00:07:21.841 --> 00:07:27.518
So in that situation it's nice to be
able to isolate that to one file and

117
00:07:27.518 --> 00:07:32.150
have the mark for
this module be in that one file forever.

118
00:07:32.150 --> 00:07:36.619
So that's what this last en is all about
and actually I already have it for you.

119
00:07:36.619 --> 00:07:40.355
The way that that works and
this is conventioned by jest.

120
00:07:40.355 --> 00:07:43.530
I don't think there's a way
to change its convention but

121
00:07:43.530 --> 00:07:47.645
you have your mask directory right next
to the module that you wanna mark.

122
00:07:47.645 --> 00:07:52.538
And inside of that you give that the same
name as the thing that you wanna mark so

123
00:07:52.538 --> 00:07:54.135
that name is important.

124
00:07:54.135 --> 00:07:56.421
And then that is a module.

125
00:07:56.421 --> 00:08:01.244
So anytime that module is required,
this is the one that it's

126
00:08:01.244 --> 00:08:06.182
going to be pulling in rather
than the actual implementation.

127
00:08:06.182 --> 00:08:08.510
So that's all that is.

128
00:08:08.510 --> 00:08:09.944
So if we were to update.

129
00:08:09.944 --> 00:08:11.253
Let's see.

130
00:08:11.253 --> 00:08:12.183
Update 5.todo.

131
00:08:12.183 --> 00:08:16.422
All we do is remove this but
then we have to instruct jest that we,

132
00:08:16.422 --> 00:08:19.967
yeah we do wanna pick up the mock so
we say jest.mock.

133
00:08:19.967 --> 00:08:22.177
The relative path to the module utils and

134
00:08:22.177 --> 00:08:26.727
then because we're not providing a mock
function like a mock module function thing

135
00:08:26.727 --> 00:08:31.219
it's gonna say you're not providing one,
I'm gonna go see if there is one.

136
00:08:31.219 --> 00:08:37.407
If there's not then I think it blows
up but in our case there is one so,

137
00:08:37.407 --> 00:08:41.481
we should be good, thumb-war.5.todo.

138
00:08:41.481 --> 00:08:42.162
There we go.

139
00:08:42.162 --> 00:08:48.340
So it's picking up our module
in the mocks directory.

140
00:08:48.340 --> 00:08:53.351
So one other thing about this is often,
the thing that you want to mock,

141
00:08:53.351 --> 00:08:57.371
is going to be something in
your node modules directory.

142
00:08:57.371 --> 00:09:03.197
So you're going to mock axios, for
example, it's a pretty common case.

143
00:09:03.197 --> 00:09:07.800
I actually have some additional
bonus exercises for mocks.

144
00:09:07.800 --> 00:09:09.945
That you can find in utils.

145
00:09:09.945 --> 00:09:14.144
And let's see it's in jest here so
we want to mock axios.

146
00:09:14.144 --> 00:09:18.731
So we're not actually creating jest and
stuff.

147
00:09:18.731 --> 00:09:24.024
So the way that works is you put your mock
directory at the root wherever your jest

148
00:09:24.024 --> 00:09:29.250
configuration is set to have the root set
out, and you put your mocks in there.

149
00:09:29.250 --> 00:09:33.739
And then those will be actually
be picked up automatically.

150
00:09:33.739 --> 00:09:36.898
So if it's in the known modules directory,
those, any mocks for

151
00:09:36.898 --> 00:09:38.862
those will be picked up automatically.

152
00:09:38.862 --> 00:09:42.782
I guess jest figures that's like
the common case if you have a known

153
00:09:42.782 --> 00:09:46.780
module that you have a mock for,
you probably always want to use it.

154
00:09:46.780 --> 00:09:50.663
If you don't want that,
then you can say adjust.unmock and

155
00:09:50.663 --> 00:09:52.500
then the name of the module.

156
00:09:52.500 --> 00:09:58.222
And now, it will give me the actual, like,
this important now, is the actual module.

157
00:09:58.222 --> 00:10:03.000
But again, that's lot of this
is kind of technology specific.

158
00:10:03.000 --> 00:10:07.756
But more the general idea is
the optimal mocking strategy is to be

159
00:10:07.756 --> 00:10:12.345
able to mock an entire module,
rather than monkey patching.

160
00:10:12.345 --> 00:10:16.953
While that's still, it works and
it kinda makes sense,

161
00:10:16.953 --> 00:10:23.680
being able to mock the entire module is
generally preferable for various reasons.

162
00:10:23.680 --> 00:10:31.107
And in jest you accomplish that with this
mock directory or the jest.mock API.

163
00:10:31.107 --> 00:10:33.606
Yeah?
&gt;&gt; Student2: Something we've come up

164
00:10:33.606 --> 00:10:38.852
against is,
say we have an API that we're mocking and

165
00:10:38.852 --> 00:10:44.823
we actually want to mock different
responses test by test And

166
00:10:44.823 --> 00:10:48.075
so if we import the api module and

167
00:10:48.075 --> 00:10:53.861
then you know mock it like this
we seem to have a hard time.

168
00:10:53.861 --> 00:10:58.704
Let's see what's the actual
thing that's going on.

169
00:10:58.704 --> 00:11:03.230
Okay, so
what actually happens is say we're.

170
00:11:03.230 --> 00:11:07.064
Importing a module that
relies on the API module.

171
00:11:07.064 --> 00:11:11.721
So we import but
inside that module that we're reporting

172
00:11:11.721 --> 00:11:16.390
that then uses the API module,
it imports once, right?

173
00:11:16.390 --> 00:11:19.152
&gt;&gt; Kent C Dodds: Mm-hm.
&gt;&gt; Student2: So we'll mark that at the top

174
00:11:19.152 --> 00:11:20.850
of our test file.

175
00:11:20.850 --> 00:11:25.894
But then it wont actually be used
in the module that we're importing,

176
00:11:25.894 --> 00:11:27.699
that depends on the API.

177
00:11:27.699 --> 00:11:31.103
So we'll always ended up having to use,

178
00:11:31.103 --> 00:11:35.730
require the API module
repeatedly in each test.

179
00:11:35.730 --> 00:11:39.380
To overwrite it, is there a better
way we could be doing that?

180
00:11:39.380 --> 00:11:43.498
&gt;&gt; Kent C Dodds: Yeah, so, let me first
make sure I understand what you're saying,

181
00:11:43.498 --> 00:11:46.768
so you are using just the jest mock API,
is that right?

182
00:11:46.768 --> 00:11:47.390
&gt;&gt; Student2: Yes.
&gt;&gt; Kent C Dodds: Okay, yeah.

183
00:11:47.390 --> 00:11:52.296
So what's happening, or
what you're saying is like within a single

184
00:11:52.296 --> 00:11:56.779
task you wanna have different mocks for,
yeah, for this API,

185
00:11:56.779 --> 00:12:00.430
because you want to have
the responses different.

186
00:12:00.430 --> 00:12:03.738
So there are a lot of
ways to approach that.

187
00:12:03.738 --> 00:12:10.398
In general what I trying to think
if I have an example for you.

188
00:12:10.398 --> 00:12:13.160
I think maybe the client mock might.

189
00:12:13.160 --> 00:12:16.275
Yeah so what I do is in this example and

190
00:12:16.275 --> 00:12:21.910
this was in something that I wasn't
I was planning on showing you.

191
00:12:21.910 --> 00:12:24.418
So this may get a little bit confusing.

192
00:12:24.418 --> 00:12:27.926
I expose a mock property on the export.

193
00:12:27.926 --> 00:12:30.969
And this mock property
has a reset function.

194
00:12:30.969 --> 00:12:36.250
And so you could expose any number of
functions that swap the Like object

195
00:12:36.250 --> 00:12:41.459
assign certain properties or
certain functions and override those.

196
00:12:41.459 --> 00:12:46.319
You can also rather than swapping
the entire implementation if it's

197
00:12:46.319 --> 00:12:50.592
just one of those functions that
you're trying to change how

198
00:12:50.592 --> 00:12:54.277
that implementation works
you can also do just dot or

199
00:12:54.277 --> 00:12:58.999
like turn that into a mock function and
then mock implementation.

200
00:12:58.999 --> 00:13:03.519
But if it really is the entire module,
let's see there was,

201
00:13:03.519 --> 00:13:07.427
I think I actually just wrote
a blog post about this.

202
00:13:07.427 --> 00:13:12.433
I've got a newsletter and
this last week's article

203
00:13:12.433 --> 00:13:16.994
is about pure modules and
why it's a good idea.

204
00:13:16.994 --> 00:13:20.044
One of the reasons is for test ability.

205
00:13:20.044 --> 00:13:26.131
As an example of a situation where you
might need to do what you're suggesting.

206
00:13:26.131 --> 00:13:31.306
Here we have this C module and at the root
level of that module it's doing some work.

207
00:13:31.306 --> 00:13:35.644
So in general you want to avoid that for
various reasons.

208
00:13:35.644 --> 00:13:36.980
One of them is test ability.

209
00:13:36.980 --> 00:13:41.750
But if you need to reset this module,
have it rerun itself again.

210
00:13:41.750 --> 00:13:43.907
Then jest has a thing for that.

211
00:13:43.907 --> 00:13:45.404
Let's see.

212
00:13:45.404 --> 00:13:47.009
It's the jest objects.

213
00:13:47.009 --> 00:13:49.838
jest.resetAllModules.

214
00:13:49.838 --> 00:13:52.440
&gt;&gt; Student2: So
that's what we've been doing-

215
00:13:52.440 --> 00:13:54.569
&gt;&gt; Kent C Dodds: So you are doing that,

216
00:13:54.569 --> 00:13:56.705
and then you require.

217
00:13:56.705 --> 00:13:59.925
Yep, that's pretty much the way to do it.

218
00:13:59.925 --> 00:14:00.720
&gt;&gt; Student2: Okay.

219
00:14:00.720 --> 00:14:02.981
&gt;&gt; Kent C Dodds: Yeah,
it's kind of annoying but

220
00:14:02.981 --> 00:14:08.252
if you have pure modules then it's a lot
easier to get avoid having to do that.

221
00:14:08.252 --> 00:14:13.169
So pure module being like it's
just a module that exports some.

222
00:14:13.169 --> 00:14:16.144
Functions, doesn't do
anything at the top level,

223
00:14:16.144 --> 00:14:20.673
if all of your modules are that way except
for the one that kicks everything off,

224
00:14:20.673 --> 00:14:24.131
then you won't normally need
to do this reset module thing.

225
00:14:24.131 --> 00:14:27.280
And if you are then you could
probably find something else to do.

226
00:14:27.280 --> 00:14:30.320
But yeah,
if you are doing stuff at the root level,

227
00:14:30.320 --> 00:14:32.960
then yeah this reset
module is the way to go.

228
00:14:32.960 --> 00:14:36.880
&gt;&gt; Student: I didn't think we were
thinking of moving towards what you

229
00:14:36.880 --> 00:14:40.171
showed actually in the mock
up jpg reset method.

230
00:14:40.171 --> 00:14:41.904
You know reset method,

231
00:14:41.904 --> 00:14:47.719
you know it was cool seeing that because
that was what we were thinking of doing.

232
00:14:47.719 --> 00:14:49.979
&gt;&gt; Kent C Dodds: Yeah yeah I
do use that and it works fine.

233
00:14:49.979 --> 00:14:56.328
And you can just stick that in there
before each and yeah and it works fine.

234
00:14:56.328 --> 00:14:58.506
&gt;&gt; Student: Thanks.
&gt;&gt; Kent C Dodds: All right, cool.

235
00:14:58.506 --> 00:15:00.460
Any other questions?

236
00:15:00.460 --> 00:15:02.015
All right, yeah?

237
00:15:02.015 --> 00:15:07.366
&gt;&gt; Student3: Yeah, I was just gonna say
it, I mean do you use mocking a lot

238
00:15:07.366 --> 00:15:13.270
because it seems like this is
a lot of work, recreating modules.

239
00:15:13.270 --> 00:15:14.707
And so forth.

240
00:15:14.707 --> 00:15:16.458
&gt;&gt; Kent C Dodds: Yes,
that's a great question.

241
00:15:16.458 --> 00:15:18.832
I do try to avoid mocking.

242
00:15:18.832 --> 00:15:23.747
The guiding principle for
how I think about testing the closer your

243
00:15:23.747 --> 00:15:29.024
tests resemble the way your software
the more compensate can give you.

244
00:15:29.024 --> 00:15:33.790
When users use your software
they do not mock anything.

245
00:15:33.790 --> 00:15:36.286
And even software users,
the consumers of your APIs.

246
00:15:36.286 --> 00:15:38.212
They don't mock things.

247
00:15:38.212 --> 00:15:42.435
And also when you mock, you sever any
confidence that you have that those things

248
00:15:42.435 --> 00:15:44.214
are working together properly.

249
00:15:44.214 --> 00:15:47.898
So you have to have additional tests,
like contract tests,

250
00:15:47.898 --> 00:15:50.730
to make sure that that
connection is working.

251
00:15:50.730 --> 00:15:54.370
Which is fine, and
like there are use cases for it.

252
00:15:54.370 --> 00:15:57.891
But yeah, if I can I try to avoid mocking.

253
00:15:57.891 --> 00:16:01.444
But yeah, sometimes you can't avoid it.

