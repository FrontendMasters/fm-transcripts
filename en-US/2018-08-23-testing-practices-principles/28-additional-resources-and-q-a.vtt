WEBVTT

1
00:00:00.000 --> 00:00:05.063
&gt;&gt; Kent C. Dodds: So I'm gonna wrap
this up with a couple of thoughts

2
00:00:05.063 --> 00:00:11.712
about the different levels of testing and
general wrap up stuff.

3
00:00:11.712 --> 00:00:16.464
And then you can feel free to
ask me any other questions.

4
00:00:16.464 --> 00:00:19.195
And we'll call it a day, okay?

5
00:00:19.195 --> 00:00:24.011
Cool, so
who has heard of the testing pyramid?

6
00:00:24.011 --> 00:00:30.651
All right so the testing pyramid's
shaped like this, like a pyramid, right.

7
00:00:30.651 --> 00:00:34.393
So I should've had an example of this but

8
00:00:34.393 --> 00:00:40.345
you have at the bottom unit,
then integration, and end to end.

9
00:00:40.345 --> 00:00:45.327
And the idea behind the testing pyramid
is it should illustrate to you how

10
00:00:45.327 --> 00:00:49.257
much time you should be spending
in each of these levels.

11
00:00:49.257 --> 00:00:51.888
Well, I disagree with that.

12
00:00:51.888 --> 00:00:58.025
And here, actually the reasons why
people say the testing pyramid is great.

13
00:00:58.025 --> 00:01:02.808
Because as you move from the bottom
to the top things get to be

14
00:01:02.808 --> 00:01:06.360
more expensive from several standpoints.

15
00:01:06.360 --> 00:01:11.295
From maintainability and
from how helpful the error

16
00:01:11.295 --> 00:01:15.116
messages are and how quick they can run.

17
00:01:15.116 --> 00:01:20.635
And the resources required to run them,
things like that.

18
00:01:20.635 --> 00:01:26.409
So it's a lot easier to set
things up down here than up here.

19
00:01:26.409 --> 00:01:29.305
The other reason why they
suggested testing trophy,

20
00:01:29.305 --> 00:01:32.794
is because they're a lot faster
at the bottom, than to the top.

21
00:01:32.794 --> 00:01:35.976
Faster to right, faand faster to right.

22
00:01:35.976 --> 00:01:40.331
So that's the justification for
the testing pyramid, and

23
00:01:40.331 --> 00:01:45.044
when I look at that I see, okay,
so the bottom is cheap and fast.

24
00:01:45.044 --> 00:01:49.081
Why don't I just do all of
my tests at the bottom?

25
00:01:49.081 --> 00:01:54.730
Why, there's nothing here that says
I should do anything at the top.

26
00:01:54.730 --> 00:01:57.900
If it's cheaper and
faster that should always be the answer.

27
00:01:57.900 --> 00:02:02.228
But the thing that the testing
pyramid is missing, and

28
00:02:02.228 --> 00:02:08.545
why I created the testing trophy is
something I call a confidence coefficient.

29
00:02:08.545 --> 00:02:13.295
So down here you can solve really
simple problems, like flow will say,

30
00:02:13.295 --> 00:02:15.840
hey you're passing the variable 3.

31
00:02:15.840 --> 00:02:17.288
That's actually a string,
it should be a number.

32
00:02:17.288 --> 00:02:21.388
Or maybe your parameter should actually be
a number and your function is messed up.

33
00:02:21.388 --> 00:02:24.897
So those are really
easy problems to solve.

34
00:02:24.897 --> 00:02:28.379
But as you go up the testing trophy or
the testing pyramid,

35
00:02:28.379 --> 00:02:32.796
the types of problems that you can
solve with those things are really big.

36
00:02:32.796 --> 00:02:39.597
Like, hey, the checkout button doesn't
work, you're losing money, fix that.

37
00:02:39.597 --> 00:02:45.509
So the justification of spending
most of my time with unit tests,

38
00:02:45.509 --> 00:02:50.249
I'm cool with unit tests,
I think they're great.

39
00:02:50.249 --> 00:02:54.288
But by focusing most
of my time down there,

40
00:02:54.288 --> 00:02:59.575
I could be missing out on
catching some serious issues.

41
00:02:59.575 --> 00:03:03.982
And so the reason that I don't do
everything with End to End is with these

42
00:03:03.982 --> 00:03:08.616
other two issues, they're kinda slow,
and they're pretty expensive.

43
00:03:08.616 --> 00:03:13.350
Luckily, we're getting tools that
are making that a lot better.

44
00:03:13.350 --> 00:03:17.097
And so the top of this testing trophy
is starting to get a little bit

45
00:03:17.097 --> 00:03:17.995
bigger for me.

46
00:03:17.995 --> 00:03:22.746
But integration tests are a really
awesome place to get to where

47
00:03:22.746 --> 00:03:24.998
we can spend most of our time.

48
00:03:24.998 --> 00:03:30.016
We'll get most of our coverage
from that in a way that doesn't

49
00:03:30.016 --> 00:03:36.499
take away from the speed at which we can
run these or the cost from a maintenance.

50
00:03:36.499 --> 00:03:39.851
Or even the resources
to run them standpoint.

51
00:03:39.851 --> 00:03:46.214
So I actually have a whole talk
that's kind of centered around this,

52
00:03:46.214 --> 00:03:51.385
that you can find at Search AS
on their YouTube channel.

53
00:03:51.385 --> 00:03:55.802
Or actually you just go
to kentcdodds.com/talks.

54
00:03:55.802 --> 00:04:02.929
And it is this one, write tests,
not too many, mostly integration.

55
00:04:02.929 --> 00:04:04.297
There's a link to the video there.

56
00:04:04.297 --> 00:04:11.148
So that's pretty much it,
I've got a couple of interesting talks and

57
00:04:11.148 --> 00:04:18.012
links to other things, I also have
a newsletter I send out every week.

58
00:04:18.012 --> 00:04:23.604
It's basically a blog post that's
like 1000 words, it's not very long.

59
00:04:23.604 --> 00:04:28.190
Every single week and
then two weeks later it'll hit my blog.

60
00:04:28.190 --> 00:04:33.777
I got a lot of testing concepts on there
too if you want to look into that.

61
00:04:33.777 --> 00:04:36.653
&gt;&gt; Speaker 2: [INAUDIBLE]

62
00:04:36.653 --> 00:04:38.193
&gt;&gt; Kent C. Dodds: Yeah I'm glad that this

63
00:04:38.193 --> 00:04:38.966
was asked.

64
00:04:38.966 --> 00:04:41.118
So we didn't really talk
about end to end a whole lot.

65
00:04:41.118 --> 00:04:45.768
But one pattern that's really common
in end to end tests is page object.

66
00:04:45.768 --> 00:04:50.289
Where you create this object that
serves a mechanism for selecting and

67
00:04:50.289 --> 00:04:55.207
clicking and updating input values and
stuff like that for a specific page.

68
00:04:55.207 --> 00:04:59.309
The nice thing about that is it makes it
really easy to pull up the settings page.

69
00:04:59.309 --> 00:05:03.506
And type in your username,
your changed username, and

70
00:05:03.506 --> 00:05:06.553
click on the submit button or whatever.

71
00:05:06.553 --> 00:05:10.481
So I actually really don't
like the page objects pattern.

72
00:05:10.481 --> 00:05:13.363
And the reason why is because, to me,

73
00:05:13.363 --> 00:05:18.151
it illustrates that you are testing
the same thing regularly.

74
00:05:18.151 --> 00:05:21.580
So if I need to select
the same thing over and

75
00:05:21.580 --> 00:05:26.171
over then I'm probably going
through the same process.

76
00:05:26.171 --> 00:05:31.252
Often what I'll see is somebody's
writing an end to end test.

77
00:05:31.252 --> 00:05:35.507
And we'll have one end to end
test the user can register, and

78
00:05:35.507 --> 00:05:37.270
then they can check out.

79
00:05:37.270 --> 00:05:41.220
Or they can add an item to their cart and
they can check out.

80
00:05:41.220 --> 00:05:43.212
And then they see the check out page.

81
00:05:43.212 --> 00:05:47.665
And then they have another one that
the user can create an account, log in,

82
00:05:47.665 --> 00:05:49.298
go to their settings page.

83
00:05:49.298 --> 00:05:52.146
And so
you wind up testing the same page over and

84
00:05:52.146 --> 00:05:54.350
over again with this login screen.

85
00:05:54.350 --> 00:05:58.847
Where all you need is one task that can
make sure a user can create an account.

86
00:05:58.847 --> 00:06:02.748
And then the rest of your test can
hit the end point directly and

87
00:06:02.748 --> 00:06:06.963
say hey create me a new user and
then you continue on with your test.

88
00:06:06.963 --> 00:06:11.321
And so I think part of the reason why
the tests are written in such a way

89
00:06:11.321 --> 00:06:15.988
necessitates the page object pattern
is with the tools that we've had up

90
00:06:15.988 --> 00:06:17.006
to this point.

91
00:06:17.006 --> 00:06:20.251
Selenium kind of necessitates
that because it's rendering

92
00:06:20.251 --> 00:06:21.978
in a totally separate context.

93
00:06:21.978 --> 00:06:25.952
You need to get those cookies
in there somewhere somehow.

94
00:06:25.952 --> 00:06:29.899
And so with Cyprus, your texts
are actually running in the context of

95
00:06:29.899 --> 00:06:33.380
the browser, the same context
that regular JavaScript is.

96
00:06:33.380 --> 00:06:38.252
So you can easily access local storage or
do a whole bunch of stuff,

97
00:06:38.252 --> 00:06:42.169
so making those kinds of
problems a lot less evident.

98
00:06:42.169 --> 00:06:44.873
And so I find the page object
pattern is okay, it's fine.

99
00:06:44.873 --> 00:06:48.297
But I find that I don't need it and
if I'm using it,

100
00:06:48.297 --> 00:06:53.170
there's probably something I can do
about my tests to make them better.

101
00:06:53.170 --> 00:06:56.139
Which at the end of the day
will make them faster.

102
00:06:56.139 --> 00:07:01.147
So we were talking about the React
testing library a little bit ago.

103
00:07:01.147 --> 00:07:05.961
There is actually a cypress testing
library that emulates the same kind

104
00:07:05.961 --> 00:07:06.529
of API.

105
00:07:06.529 --> 00:07:11.042
Where you can really easily
select items within the page that

106
00:07:11.042 --> 00:07:15.036
allows you to kind of treat
the page like a user would.

107
00:07:15.036 --> 00:07:17.753
You know,
how does the user find the username field.

108
00:07:17.753 --> 00:07:20.821
Where do they look for
the label that says username and

109
00:07:20.821 --> 00:07:22.603
fills out the field next to it.

110
00:07:22.603 --> 00:07:27.335
So the way that it's written I don't think
that I could get any value out of a page

111
00:07:27.335 --> 00:07:29.455
object because the test itself is,

112
00:07:29.455 --> 00:07:32.723
like the selectors are a lot
more straightforward so.

113
00:07:32.723 --> 00:07:35.369
I don't really use the page
object [INAUDIBLE].

114
00:07:37.654 --> 00:07:39.661
&gt;&gt; Speaker 3: Test as documentation,

115
00:07:39.661 --> 00:07:42.276
[INAUDIBLE] riff on that.
&gt;&gt; Kent C. Dodds: Sure,

116
00:07:42.276 --> 00:07:44.504
tests on documentation.

117
00:07:44.504 --> 00:07:49.667
I've never really referenced
tests as documentation

118
00:07:49.667 --> 00:07:56.072
because it normally doesn't bode well,
it doesn't really work.

119
00:07:56.072 --> 00:08:01.137
So yeah, sometimes especially if
you're doing like the BDD style,

120
00:08:01.137 --> 00:08:03.505
behavior driven development.

121
00:08:03.505 --> 00:08:08.209
Where like you have a project manager
come in and say like right in English,

122
00:08:08.209 --> 00:08:10.161
this is what things should do.

123
00:08:10.161 --> 00:08:13.959
And then you do this magic step
to turn those things into tests,

124
00:08:13.959 --> 00:08:17.409
I could see that as kind of
being a form of documentation.

125
00:08:17.409 --> 00:08:23.451
But most of the time, if I'm looking
at a test suite for something,

126
00:08:23.451 --> 00:08:28.862
yeah, just doesn't make a whole
lot of sense necessarily.

127
00:08:28.862 --> 00:08:32.964
Maybe I could see kind of
some higher level tests that

128
00:08:32.964 --> 00:08:36.613
are literally only talking to the API,
yeah.

129
00:08:36.613 --> 00:08:40.865
But I've never really, I like the idea
of tests as documentation but

130
00:08:40.865 --> 00:08:44.617
I never really rely on it because
it's not really reliable.

131
00:08:44.617 --> 00:08:48.802
Most of the time when developers are
creating tests they're not thinking about

132
00:08:48.802 --> 00:08:50.561
that as tests as documentation.

133
00:08:50.561 --> 00:08:52.368
So maybe you feel that way but

134
00:08:52.368 --> 00:08:57.276
your team will come and mess up all
your documentation without knowing that.

135
00:08:57.276 --> 00:09:01.739
So I suggest document it, and

136
00:09:01.739 --> 00:09:06.030
test it, and life's good.

137
00:09:06.030 --> 00:09:08.682
All righty, that´s it.

138
00:09:08.682 --> 00:09:15.288
Thank you all so much.
&gt;&gt; [APPLAUSE]

