WEBVTT

1
00:00:00.000 --> 00:00:02.956
&gt;&gt; Kent Dodds: Let's go ahead and
keep track of when this is called,

2
00:00:02.956 --> 00:00:05.528
so we can make assertions
on how it was called.

3
00:00:05.528 --> 00:00:09.692
So the first thing I'm gonna do is,
I'll say,

4
00:00:09.692 --> 00:00:13.962
utils.getWinner.mock ={ calls: [] },

5
00:00:13.962 --> 00:00:17.412
I'm sure we can do that all in one line.

6
00:00:17.412 --> 00:00:25.402
And then we'll turn this arrow function
into an arrow function with a body.

7
00:00:25.402 --> 00:00:31.457
And we'll just push onto that array
every single time it's called.

8
00:00:31.457 --> 00:00:37.877
So we'll say
utils.getwinner.mock.calls.push().

9
00:00:37.877 --> 00:00:39.945
We wanna push all of the arguments.

10
00:00:39.945 --> 00:00:43.886
So what I'm gonna do
is we'll make args and

11
00:00:43.886 --> 00:00:48.707
then push args, and
then we'll return args at one.

12
00:00:48.707 --> 00:00:53.414
So various ways you could do that, all
right, I kinda like the way that reads.

13
00:00:53.414 --> 00:00:56.665
Great, so now if we console log,

14
00:00:56.665 --> 00:01:03.301
utils.getWinner.mock.calls after
this thumb war was called.

15
00:01:03.301 --> 00:01:05.436
Then we'll get that printed out.

16
00:01:05.436 --> 00:01:08.288
Awesome, so we just need to assert.

17
00:01:08.288 --> 00:01:11.511
We could do this a couple different ways.

18
00:01:11.511 --> 00:01:14.886
Actually, I think of my solution
I iterate over the calls and

19
00:01:14.886 --> 00:01:17.147
make an assertion for each one of those.

20
00:01:17.147 --> 00:01:22.342
Just something occurred to me that I
could actually do this, expect to equal.

21
00:01:24.178 --> 00:01:26.915
&gt;&gt; Kent Dodds: And that indicates a so
it's called twice.

22
00:01:26.915 --> 00:01:30.804
And it's called with exactly that.

23
00:01:30.804 --> 00:01:36.556
Alternatively, actually I'll just show
you the solution for the alternative.

24
00:01:36.556 --> 00:01:39.163
I say that calls has a length too and
every single time it's called,

25
00:01:39.163 --> 00:01:40.134
it's called with that.

26
00:01:40.134 --> 00:01:44.629
So either one works just as well,
it gives you just as much confidence.

27
00:01:44.629 --> 00:01:46.235
So, good with that.

28
00:01:48.269 --> 00:01:48.818
&gt;&gt; Kent Dodds: Yes?
&gt;&gt; Speaker 2: So

29
00:01:48.818 --> 00:01:51.059
the JavaScript on this
one really throws me, so

30
00:01:51.059 --> 00:01:53.138
I wonder if you can put
some words behind it.

31
00:01:53.138 --> 00:01:55.050
So here's my question.

32
00:01:55.050 --> 00:02:03.073
Line 10 we're assigning the getWinner
property of utils to be a function.

33
00:02:03.073 --> 00:02:06.422
Line 4 Well, not sure where they'll.

34
00:02:06.422 --> 00:02:09.227
&gt;&gt; Kent Dodds: Yeah, sorry they're
relative, here let me, insert mode.

35
00:02:09.227 --> 00:02:10.435
[LAUGH]
&gt;&gt; Speaker 2: Line 14,

36
00:02:10.435 --> 00:02:14.945
we're assigning getWinner to have
a property to be a JavaScript

37
00:02:14.945 --> 00:02:17.377
object that has a property of max.

38
00:02:17.377 --> 00:02:21.864
So help me understand how getWinner can
be a function and also have a property.

39
00:02:21.864 --> 00:02:25.128
&gt;&gt; Kent Dodds: Yeah so functions
are first class objects in JavaScript.

40
00:02:25.128 --> 00:02:30.013
So they can have properties and that's,

41
00:02:30.013 --> 00:02:34.905
trying to think of a good example of that.

42
00:02:34.905 --> 00:02:40.931
For example, expect is a function but
we also have those asymmetrical matchers.

43
00:02:40.931 --> 00:02:45.819
So it's expect any string like we had

44
00:02:45.819 --> 00:02:50.716
in the example of matching a schema.

45
00:02:50.716 --> 00:02:54.103
So expect is a function, but
it's a function that has properties, and

46
00:02:54.103 --> 00:02:57.159
you can put any number of properties
on functions that you want.

47
00:02:57.159 --> 00:03:02.038
Pretty handy feature,
I use it pretty often.

48
00:03:02.038 --> 00:03:02.821
Other questions?

49
00:03:06.642 --> 00:03:07.921
&gt;&gt; Kent Dodds: Sweet.

50
00:03:07.921 --> 00:03:12.064
So let's,
&gt;&gt; Kent Dodds: Look at

51
00:03:12.064 --> 00:03:16.938
this next situation.

52
00:03:16.938 --> 00:03:22.112
Man, I accidentally lost
our keeping track of

53
00:03:22.112 --> 00:03:27.030
the times it's called, sorry about that.

54
00:03:27.030 --> 00:03:30.440
Right, let's just pretend that
that's still part of our assertions.

55
00:03:30.440 --> 00:03:34.949
One thing that is kind of annoying about
what we have right here is having to

56
00:03:34.949 --> 00:03:39.617
keep track of the original getWinner,
and then restoring that ourselves.

57
00:03:39.617 --> 00:03:44.179
And also, all of this code,
if we had to do this every single time we

58
00:03:44.179 --> 00:03:48.175
wanted to mock function,
that would be kind of annoying.

59
00:03:48.175 --> 00:03:53.894
And so instead we're going to
use just spyOn to do this.

60
00:03:53.894 --> 00:03:57.811
So when you're implementing this one,
go ahead and

61
00:03:57.811 --> 00:04:03.515
pull your original assertion over,
your previous assertion over to this.

62
00:04:03.515 --> 00:04:06.687
Because what we implemented is actually

63
00:04:06.687 --> 00:04:10.335
the same kind of API
that just spyOn supports.

64
00:04:10.335 --> 00:04:17.241
But other than that, yeah, try to swap
this implementation for just spy on.

65
00:04:17.241 --> 00:04:19.156
Yeah, and then mock restore.

