WEBVTT

1
00:00:00.000 --> 00:00:03.674
&gt;&gt; Kent C. Dodds: Great.
So that was a pretty quick little exercise

2
00:00:03.674 --> 00:00:09.678
but let's work through it here and
please ask me any questions that you have.

3
00:00:09.678 --> 00:00:14.796
So we've got this bug in sum and
we need to be able to run this script and

4
00:00:14.796 --> 00:00:17.554
have it fail because that bug exist.

5
00:00:17.554 --> 00:00:20.726
So what we're gonna do is I'm gonna

6
00:00:20.726 --> 00:00:25.287
say Const the result equals
sum of three and seven.

7
00:00:25.287 --> 00:00:30.215
And I want that to equal,
like we'll say, our expected is ten,

8
00:00:30.215 --> 00:00:33.058
so that's what I expect it to equal.

9
00:00:33.058 --> 00:00:38.196
So here I can just say, if the result is

10
00:00:38.196 --> 00:00:43.817
not equal to the expected then I'll throw

11
00:00:43.817 --> 00:00:48.955
a new error that says something like,

12
00:00:48.955 --> 00:00:56.038
the result is not equal to
the expected of expected.

13
00:00:56.038 --> 00:00:59.514
Now, if I ran that,
I'm going to get my error.

14
00:00:59.514 --> 00:01:00.725
Hooray!

15
00:01:00.725 --> 00:01:06.349
Then if I replace this to a plus
then it should pass, right?

16
00:01:06.349 --> 00:01:08.941
So, this is a test.

17
00:01:08.941 --> 00:01:13.374
At a fundamental level, all that
a test is is something that throws

18
00:01:13.374 --> 00:01:17.897
an error if there's a problem with
your system, if there's a bug.

19
00:01:17.897 --> 00:01:20.936
And the error message is really important.

20
00:01:20.936 --> 00:01:23.590
Right now,
this error message is pretty good.

21
00:01:23.590 --> 00:01:25.940
We could maybe make it
a little bit better.

22
00:01:25.940 --> 00:01:29.936
We're gonna see how frameworks can
help us improve our error messages and

23
00:01:29.936 --> 00:01:31.364
in insertion libraries.

24
00:01:31.364 --> 00:01:34.732
But yeah at a fundamental
level that's what a test is.

25
00:01:34.732 --> 00:01:39.782
We can also add a test for subtract
as well but I think you get the idea.

26
00:01:39.782 --> 00:01:41.645
Does anybody have any questions about

27
00:01:41.645 --> 00:01:46.036
this?
&gt;&gt; Kent C. Dodds: Nothing.

28
00:01:46.036 --> 00:01:47.267
Okay, great.

29
00:01:47.267 --> 00:01:50.477
So our next one,
if you're like at 2.two do,

30
00:01:50.477 --> 00:01:53.625
you're going to write
an assertion library.

31
00:01:53.625 --> 00:01:56.572
This imperative code right here,
not my favorite.

32
00:01:56.572 --> 00:02:01.767
It would be great to package that up so
I can reuse this over and over again.

33
00:02:01.767 --> 00:02:04.814
If I wanted to do this, like for example,

34
00:02:04.814 --> 00:02:08.305
here's the end result if
we test both of these.

35
00:02:08.305 --> 00:02:10.727
I'm doing the same kind of thing twice, so

36
00:02:10.727 --> 00:02:14.978
it would be really great if I could
package that up into a single assertion.

37
00:02:14.978 --> 00:02:19.463
And so what I want you to do is create
a function that can be called with

38
00:02:19.463 --> 00:02:24.203
an actual value and it returns an object
that has some properties on it.

39
00:02:24.203 --> 00:02:26.831
The one property we're using here is 2b.

40
00:02:26.831 --> 00:02:31.213
And that is a function that
accepts the expected value.

41
00:02:31.213 --> 00:02:34.676
And if the actual is not
equal to the expected value,

42
00:02:34.676 --> 00:02:37.286
then it should throw the error, okay?

43
00:02:37.286 --> 00:02:44.450
And then refactor this code to use
your fancy new assertion library.

44
00:02:44.450 --> 00:02:50.307
And then sorry, to run it,
you'll just do node 2.two do.

45
00:02:50.307 --> 00:02:52.805
And you'll get an error.

46
00:02:52.805 --> 00:02:57.542
So there's no way to know but
if you can make this error

47
00:02:57.542 --> 00:03:01.772
happen with this sort of
API then you're good.

