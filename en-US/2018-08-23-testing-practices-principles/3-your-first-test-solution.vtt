WEBVTT

1
00:00:00.000 --> 00:00:03.893
&gt;&gt; Kent C. Dodds: Great so, and
that was pretty quick little exercise, but

2
00:00:03.893 --> 00:00:08.993
let's work through it here, and
please ask me any questions that you have.

3
00:00:08.993 --> 00:00:14.517
So we've got this bug in sum and
we need to be able to run this script and

4
00:00:14.517 --> 00:00:17.579
have it fail because that bug exists.

5
00:00:17.579 --> 00:00:21.769
So what we're gonna do is I'm gonna say,

6
00:00:21.769 --> 00:00:25.481
const result = sum(3, 7), and

7
00:00:25.481 --> 00:00:31.005
I want that to equal,
we'll say our expected is 10.

8
00:00:31.005 --> 00:00:33.166
So that's what I expect it to equal.

9
00:00:33.166 --> 00:00:40.073
So here I can just say, if the result
is not equal to the expected,

10
00:00:40.073 --> 00:00:45.849
then I'll throw a new error
that says something like,

11
00:00:45.849 --> 00:00:49.994
the result of ${result}, or yeah,

12
00:00:49.994 --> 00:00:55.180
is not equal to the expected
of ${expected}.

13
00:00:55.180 --> 00:00:59.980
Okay, so now if I run that,
I'm gonna get my error, hooray.

14
00:00:59.980 --> 00:01:06.620
And then if I replace this to a +,
then it should pass, right?

15
00:01:06.620 --> 00:01:08.656
So this is a test.

16
00:01:08.656 --> 00:01:13.497
At a fundamental level all that
a test is is something that throws

17
00:01:13.497 --> 00:01:18.540
an error if there is a problem with
your system, if there's a bug.

18
00:01:18.540 --> 00:01:21.130
And the error message is really important.

19
00:01:21.130 --> 00:01:23.740
Right now,
this error message is pretty good,

20
00:01:23.740 --> 00:01:26.120
we could maybe make it
a little bit better.

21
00:01:26.120 --> 00:01:30.681
We're gonna see how frameworks can help us
improve our error messages in assertion

22
00:01:30.681 --> 00:01:31.406
libraries.

23
00:01:31.406 --> 00:01:34.860
But yeah, at a fundamental level,
that's what a test is.

24
00:01:34.860 --> 00:01:39.910
We could also add a test for subtract
as well, but I think you get the idea.

25
00:01:39.910 --> 00:01:41.893
Does anybody have any
questions about this?

26
00:01:45.752 --> 00:01:47.075
&gt;&gt; Kent C. Dodds: Nothing, okay, great.

27
00:01:47.075 --> 00:01:50.400
So our next one, if you look at 2.todo,

28
00:01:50.400 --> 00:01:54.114
you're going to write
an assertion library.

29
00:01:54.114 --> 00:01:57.494
This imperative code right here,
not my favorite.

30
00:01:57.494 --> 00:02:01.596
It would be great to kinda package that up
so I could reuse this over and over again.

31
00:02:01.596 --> 00:02:04.718
If I wanted to do this, like for example,

32
00:02:04.718 --> 00:02:08.301
here's the end result if
we test both of these.

33
00:02:08.301 --> 00:02:10.641
I'm doing the same kind of thing twice, so

34
00:02:10.641 --> 00:02:14.751
it would be really great if I could
package that up into a single assertion.

35
00:02:14.751 --> 00:02:19.165
And so what I want you to do is create
a function that can called with

36
00:02:19.165 --> 00:02:24.008
an actual value and it returns an object
that has some properties on it.

37
00:02:24.008 --> 00:02:26.833
The one property we're using here is toBe.

38
00:02:26.833 --> 00:02:30.526
And that is a function that
accepts the expected value.

39
00:02:30.526 --> 00:02:34.340
And if the actual is not
equal to the expected value,

40
00:02:34.340 --> 00:02:37.211
then it should throw the error, okay?

41
00:02:37.211 --> 00:02:44.448
And then re-factor this code to use
your fancy name assertion library.

42
00:02:44.448 --> 00:02:50.545
And then, sorry, to run it,
you'll just do node2.todo.js.

43
00:02:50.545 --> 00:02:54.829
And you'll get an error, but
yeah, so there's no way to know.

44
00:02:54.829 --> 00:03:01.788
But if you can make this error happen
with this sort of API, then you're good.

