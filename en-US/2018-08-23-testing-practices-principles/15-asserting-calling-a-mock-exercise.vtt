WEBVTT

1
00:00:00.000 --> 00:00:04.302
&gt;&gt; Kent Dodds: So
if you jump into thumb-war.2.todo, and

2
00:00:04.302 --> 00:00:06.679
here we have the solution.

3
00:00:06.679 --> 00:00:12.000
We're going to make sure that
this function that we have,

4
00:00:12.000 --> 00:00:18.700
this getWinner function, is called in
a way that we expect it to be called.

5
00:00:18.700 --> 00:00:22.208
So that if somebody were
to come in here and

6
00:00:22.208 --> 00:00:26.721
try to refactor this with
a game argument or something,

7
00:00:26.721 --> 00:00:31.834
that we can have some sort of
validation to make sure that that

8
00:00:31.834 --> 00:00:38.180
would actually fail our test, unless
somebody went to update the test as well.

9
00:00:38.180 --> 00:00:39.712
That's the whole idea.

10
00:00:39.712 --> 00:00:44.466
The way that I suggest in the hints of
how to do this is to add a property to

11
00:00:44.466 --> 00:00:46.079
the getWinner function.

12
00:00:46.079 --> 00:00:49.548
So something as simple
as getWinner.Mock.calls.

13
00:00:49.548 --> 00:00:54.625
That will be your array, so you'll need
to create that mock object and things.

14
00:00:54.625 --> 00:00:58.882
And then every single time this
getWinner function is called,

15
00:00:58.882 --> 00:01:04.224
you want to also return p2 but
you want to push on to that call.

16
00:01:04.224 --> 00:01:06.412
So go ahead and give this a shot.

17
00:01:06.412 --> 00:01:11.229
In addition to keeping track of how
many calls that has and all that,

18
00:01:11.229 --> 00:01:16.330
you'll also want to make assertions
on how it's being called as well.

19
00:01:16.330 --> 00:01:19.485
And so you've got that stuff here.

20
00:01:19.485 --> 00:01:25.905
Yeah, so to run these tests, you wanna
hit the P key in just watch mode and

21
00:01:25.905 --> 00:01:30.881
do thumb-war.2.todo to
get these tests running.

