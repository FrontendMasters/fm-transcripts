WEBVTT

1
00:00:00.390 --> 00:00:03.060
&gt;&gt; Kent C. Dodds: So
if you jump into thumb-war.2.todo,

2
00:00:03.060 --> 00:00:07.870
here we have the solution.

3
00:00:07.870 --> 00:00:11.999
We're going to make sure that
this function that we have,

4
00:00:11.999 --> 00:00:17.493
this getWinner function, is called in
the way that we expect it to be called.

5
00:00:17.493 --> 00:00:21.157
So that if somebody were
to come in here and

6
00:00:21.157 --> 00:00:26.090
try to refactor this with
a game argument or something.

7
00:00:26.090 --> 00:00:31.048
That we can have some sort of
validation to make sure that

8
00:00:31.048 --> 00:00:34.212
that would actually fail our test,

9
00:00:34.212 --> 00:00:38.760
unless somebody went to update the test,
as well.

10
00:00:38.760 --> 00:00:40.637
So yeah, that's a whole idea we need.

11
00:00:40.637 --> 00:00:44.590
The way that I suggest in the hints of
how to do this is to add a property to

12
00:00:44.590 --> 00:00:46.070
the getWinner function.

13
00:00:46.070 --> 00:00:49.516
So something as simple
as getWinner.mock.calls,

14
00:00:49.516 --> 00:00:51.128
that'll be your array.

15
00:00:51.128 --> 00:00:54.192
So you'll need to create
that mock object and things.

16
00:00:54.192 --> 00:00:58.419
And then every single time this
getWinner function is called,

17
00:00:58.419 --> 00:01:04.016
you'll want to also return p2, but you'll
want to push on to that call's array.

18
00:01:04.016 --> 00:01:05.873
So go ahead and give this a shot.

19
00:01:05.873 --> 00:01:11.235
In addition to keeping track of how
many calls it has and all of that,

20
00:01:11.235 --> 00:01:16.899
you'll also want to make assertions
on how it's being called as well.

21
00:01:16.899 --> 00:01:19.835
So you've got that stuff here.

22
00:01:19.835 --> 00:01:23.444
Yeah, so to run these tests
you'll want to hit the P key.

23
00:01:23.444 --> 00:01:30.881
And just watch mode and do
thumb-war.2.todo to get these tests ran.

