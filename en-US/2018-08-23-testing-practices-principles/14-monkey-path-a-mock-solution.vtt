WEBVTT

1
00:00:00.000 --> 00:00:03.665
&gt;&gt; Kent Dodds: Let's make our assertion
much more assertive, I guess.

2
00:00:03.665 --> 00:00:04.329
Does that make sense?

3
00:00:04.329 --> 00:00:08.510
Yeah, okay, so
this is the monkey patching solution.

4
00:00:08.510 --> 00:00:11.896
We're basically going
to take the utils and

5
00:00:11.896 --> 00:00:16.747
swap out the getWinner function
before we call this thumbWar so

6
00:00:16.747 --> 00:00:21.064
that thumbWar is calling our
version of that function.

7
00:00:21.064 --> 00:00:28.534
So import * as utils from utils.

8
00:00:28.534 --> 00:00:33.700
And then here we'll say utills.getWinner
equals a function that takes

9
00:00:33.700 --> 00:00:38.789
a player one and a player two, and
of course always returns player two.

10
00:00:38.789 --> 00:00:43.637
Because, let's be honest,
in a thumb war between me and

11
00:00:43.637 --> 00:00:46.667
Ken, it's gonna be me every time.

12
00:00:46.667 --> 00:00:51.015
And actually I'm terrified that we'd
actually do a thumb war in here,

13
00:00:51.015 --> 00:00:52.110
just destroy me.

14
00:00:52.110 --> 00:00:55.080
So you can't see that.

15
00:00:55.080 --> 00:00:59.389
Sorry, let's do the winner
to be Kent C Dodds and

16
00:00:59.389 --> 00:01:03.289
save that, and our test should be passing.

17
00:01:03.289 --> 00:01:06.741
Let's just make sure that
things can break, yeah.

18
00:01:06.741 --> 00:01:09.755
Cool.

19
00:01:09.755 --> 00:01:12.052
So this is my key patching.

20
00:01:12.052 --> 00:01:14.996
One problem with this
that I haven't done yet

21
00:01:14.996 --> 00:01:20.201
is that now we've changed this getWinner
implementation for all of our tests.

22
00:01:20.201 --> 00:01:25.401
And so something that you need to do is
keep the original getWinner utilities.

23
00:01:25.401 --> 00:01:30.519
So we'll say original getWinner
equals utils at getWinner.

24
00:01:30.519 --> 00:01:36.389
And then you'll want to restore that
at the end of your test to make

25
00:01:36.389 --> 00:01:41.621
sure that any other tests that
are using this module don't

26
00:01:41.621 --> 00:01:48.472
also blow up because they are relying
on this actually running or whatever.

27
00:01:48.472 --> 00:01:56.374
Cool, so what questions do you have
about this exercise, anything, nothing?

28
00:01:56.374 --> 00:01:58.871
Okay, cool.

29
00:01:58.871 --> 00:02:02.625
Does anybody see potential
problems with this approach?

30
00:02:07.705 --> 00:02:10.229
&gt;&gt; Kent Dodds: So I'll give you a hint.

31
00:02:10.229 --> 00:02:15.006
So I've got an .eslintrc in
here that disables a linting

32
00:02:15.006 --> 00:02:17.700
rule called import namespace.

33
00:02:17.700 --> 00:02:19.613
This is the eslinctrc plugin import.

34
00:02:19.613 --> 00:02:27.582
And what this rule actually ensures if
I turn this back on, it'll do warn.

35
00:02:27.582 --> 00:02:32.226
It ensures that you don't
make changes to anything

36
00:02:32.226 --> 00:02:36.661
that you import,
at least not on the namespace.

37
00:02:36.661 --> 00:02:42.027
So the reason for that is because
it's actually when ES modules

38
00:02:42.027 --> 00:02:48.013
are actually implemented in node and
if we're using native modules.

39
00:02:48.013 --> 00:02:49.163
This would actually not work.

40
00:02:49.163 --> 00:02:55.704
It might be a syntax error, but
at least it would be a runtime error.

41
00:02:55.704 --> 00:03:01.535
So this monkey patching business of
modules is not an optimal solution.

42
00:03:01.535 --> 00:03:06.895
So we'll deal with that
in a later exercise.

43
00:03:06.895 --> 00:03:11.832
The other problem with this is that
let's say that if we call getWinner

44
00:03:11.832 --> 00:03:14.175
too many times in this function,

45
00:03:14.175 --> 00:03:18.707
or if we call it in the wrong way,
then things can really blow up.

46
00:03:18.707 --> 00:03:23.998
And so because as soon as you mock
something or you create a fake version

47
00:03:23.998 --> 00:03:29.201
of something in your test,
you're severing any confidence that you

48
00:03:29.201 --> 00:03:35.140
have in an integration between that
fake thing and whatever you're testing.

49
00:03:35.140 --> 00:03:41.595
Because now, let's say that
somewhere down the line here

50
00:03:41.595 --> 00:03:46.874
I'm gonna get rid of
that annoying eslinctrc.

51
00:03:46.874 --> 00:03:50.510
So let's say somewhere down
the line our dependency or

52
00:03:50.510 --> 00:03:55.174
somebody who is writing this decides
that they wanna maybe put a game or

53
00:03:55.174 --> 00:03:59.380
something like that,
some additional options or something.

54
00:03:59.380 --> 00:04:03.372
If we're still using our mock,
then actually our tests still pass, but

55
00:04:03.372 --> 00:04:04.953
the code is totally busted.

56
00:04:04.953 --> 00:04:08.913
And so that's what I mean when I say by
mocking something you're severing your

57
00:04:08.913 --> 00:04:12.933
ability to be confident about that thing
because now you have no way of knowing if

58
00:04:12.933 --> 00:04:14.931
you're calling that thing properly.

59
00:04:14.931 --> 00:04:19.285
And so there are some things that
you can do to overcome this.

60
00:04:19.285 --> 00:04:22.509
There's definitely a reason
to mock things sometimes.

61
00:04:22.509 --> 00:04:26.586
Sometimes you really can't charge
somebody's credit card during your test.

62
00:04:26.586 --> 00:04:28.585
I don't have enough money in my account.

63
00:04:28.585 --> 00:04:31.930
So sorry, we can't run the test today.

64
00:04:31.930 --> 00:04:34.938
The CTO, he maxed out his credit card.

65
00:04:34.938 --> 00:04:37.665
Yeah, so that's not reasonable.

66
00:04:37.665 --> 00:04:41.143
So we do need to do some sort
of mocking at some point, but

67
00:04:41.143 --> 00:04:45.953
if there is something we can do to sort
of restore that confidence in some way,

68
00:04:45.953 --> 00:04:48.628
then that would be a really helpful thing.

69
00:04:48.628 --> 00:04:52.750
That's actually called
the contract testing to test

70
00:04:52.750 --> 00:04:56.145
that the integration is working properly.

71
00:04:56.145 --> 00:05:00.791
And we're not actually going to
get into the contract testing, but

72
00:05:00.791 --> 00:05:06.187
we're gonna get somewhere a little bit
closer to that with our next exercise.

