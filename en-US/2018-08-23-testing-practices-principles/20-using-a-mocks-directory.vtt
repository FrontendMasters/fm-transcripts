WEBVTT

1
00:00:00.000 --> 00:00:05.781
&gt;&gt; Speaker 1: For this, we're gonna
be in source in the server side,

2
00:00:05.781 --> 00:00:11.199
source controllers, and
users.todo in the test.

3
00:00:11.199 --> 00:00:14.939
And this is actually,
I'm gonna be doing this piece for

4
00:00:14.939 --> 00:00:18.470
us.
&gt;&gt; Speaker 1: And

5
00:00:18.470 --> 00:00:23.059
this test is gonna be responsible for

6
00:00:23.059 --> 00:00:26.469
testing the users module.

7
00:00:26.469 --> 00:00:30.116
So the users controller exposes
a couple express middleware.

8
00:00:30.116 --> 00:00:33.679
If you're not familiar with express,
it's totally fine.

9
00:00:33.679 --> 00:00:38.053
Just think these are just functions
that accept some special objects.

10
00:00:38.053 --> 00:00:42.287
And I'll give you function that can
generate those objects for you.

11
00:00:42.287 --> 00:00:46.204
So you shouldn't have to be too
concerned about how this all works.

12
00:00:46.204 --> 00:00:53.950
But it exposes a couple of things that our
endpoints to interact with our database.

13
00:00:53.950 --> 00:00:57.738
Our database has is get users,

14
00:00:57.738 --> 00:01:02.699
update user and delete user somewhere.

15
00:01:02.699 --> 00:01:04.573
Yeah, dual user.

16
00:01:04.573 --> 00:01:08.077
And these endpoints, just protect those,
make sure you're authenticated,

17
00:01:08.077 --> 00:01:09.133
all that kind of thing.

18
00:01:09.133 --> 00:01:11.391
And it uses the request object and

19
00:01:11.391 --> 00:01:16.076
response object to communicate as
middleware as it does in Extract.

20
00:01:16.076 --> 00:01:18.453
So we're gonna write some test for this.

21
00:01:18.453 --> 00:01:21.101
Most of these functions are exposed.

22
00:01:21.101 --> 00:01:25.385
And these are still
technically unit tests.

23
00:01:25.385 --> 00:01:30.289
Each one of these functions
is considered a unit.

24
00:01:30.289 --> 00:01:34.180
[COUGH] Yeah,
to get this started, I think,

25
00:01:34.180 --> 00:01:38.702
the first thing that I want to test is,
generally,

26
00:01:38.702 --> 00:01:45.558
when I'm starting testing in a new module,
it's never been tested before.

27
00:01:45.558 --> 00:01:51.192
Especially in a new project, you want
to go to the path of least resistance,

28
00:01:51.192 --> 00:01:53.488
make it as simple as possible.

29
00:01:53.488 --> 00:01:55.998
And if I'm looking at all of these,

30
00:01:55.998 --> 00:02:01.118
I'm thinking the simplest function
as maybe this authorize function.

31
00:02:01.118 --> 00:02:03.719
Actually, yeah,
that probably is the simplest function.

32
00:02:03.719 --> 00:02:05.599
But we're not going to do that one,

33
00:02:05.599 --> 00:02:08.115
cuz I want to show you
the get users one instead.

34
00:02:08.115 --> 00:02:11.821
But I would probably start with
the authorize, if I'm perfectly honest.

35
00:02:11.821 --> 00:02:13.412
But yeah, we'll do get users.

36
00:02:13.412 --> 00:02:20.809
And so, what's the use case we want to
verify when testing this, a function.

37
00:02:20.809 --> 00:02:24.971
We wanna verify that based off of the,
actually,

38
00:02:24.971 --> 00:02:29.144
it doesn't even use
the request object anyways.

39
00:02:29.144 --> 00:02:33.221
So based off of the fact that it's
given a request and response,

40
00:02:33.221 --> 00:02:35.118
the request can be anything.

41
00:02:35.118 --> 00:02:40.045
The response will need to be
called with .json called with all

42
00:02:40.045 --> 00:02:43.085
of the users that are in the database.

43
00:02:43.085 --> 00:02:45.450
But those should be safe users,

44
00:02:45.450 --> 00:02:49.661
these users to .json which
you wrote tasks for earlier.

45
00:02:49.661 --> 00:02:55.866
And then, if there are no users in
the database, then we'll send a 404.

46
00:02:55.866 --> 00:03:00.512
So let's go ahead and
we'll do a happy path test first.

47
00:03:00.512 --> 00:03:08.253
So we'll test that get users
returns all users in the database.

48
00:03:08.253 --> 00:03:12.162
And then,
this is going to be an async test.

49
00:03:12.162 --> 00:03:14.005
So this is an async function,

50
00:03:14.005 --> 00:03:17.711
where you want to be able to use
a rate because it is the best.

51
00:03:17.711 --> 00:03:22.844
So we'll add a sync to our function
declaration here or to our error

52
00:03:22.844 --> 00:03:28.814
function there, so we can use a wait
when we call this get users thing, okay?

53
00:03:28.814 --> 00:03:31.371
So to call get users,
we're going to need to get it.

54
00:03:31.371 --> 00:03:33.711
So import, get users.

55
00:03:33.711 --> 00:03:37.524
Here, we'll just input everything
that has users controller.

56
00:03:37.524 --> 00:03:41.090
From one directory op users.

57
00:03:41.090 --> 00:03:46.568
And then,
we'll say await usersController.getUsers,

58
00:03:46.568 --> 00:03:50.848
and it's gonna take a request and
a response.

59
00:03:50.848 --> 00:03:54.948
And then, we'll create our
fake version of those things,

60
00:03:54.948 --> 00:03:57.818
kind of injecting those arguments here.

61
00:03:57.818 --> 00:04:01.719
The request doesn't really
need to have anything, but

62
00:04:01.719 --> 00:04:07.197
the response needs to have a json function
and we can make that a jest function.

63
00:04:07.197 --> 00:04:09.792
So response, json function.

64
00:04:09.792 --> 00:04:13.086
It also needs a status but
in our tense we don't have it,

65
00:04:13.086 --> 00:04:17.655
it's not going to be calling status, so
we can leave that off for now, cool.

66
00:04:17.655 --> 00:04:23.711
So we expect it had been called one time,
so it's around this testing and

67
00:04:23.711 --> 00:04:29.867
around mpm test, and we'll do controllers,
star, users.todo.js,

68
00:04:29.867 --> 00:04:35.664
something like that.
&gt;&gt; Speaker 1: Okay,

69
00:04:35.664 --> 00:04:40.253
cool, so that test passes and
we can say it was called zero times, okay,

70
00:04:40.253 --> 00:04:43.201
yeah, it's gonna fail, it was called once.

71
00:04:43.201 --> 00:04:47.590
So there are a couple of
quick things about this,

72
00:04:47.590 --> 00:04:52.634
with regard to this mock
function that we've created.

73
00:04:52.634 --> 00:04:58.310
There's another assertion here that is
toHaveBeenCalled, and that will work also.

74
00:04:58.310 --> 00:05:02.910
The reason that I am explicit
about how many times it was

75
00:05:02.910 --> 00:05:06.910
called is because perhaps
somebody comes in and

76
00:05:06.910 --> 00:05:11.521
has a little typo and
duplicates this, or something.

77
00:05:11.521 --> 00:05:14.724
And now, this will actually fail my test.

78
00:05:14.724 --> 00:05:18.647
But it would not fail if it
were just two of them called.

79
00:05:18.647 --> 00:05:22.258
So I want to be explicit about how
many times this thing responds,

80
00:05:22.258 --> 00:05:26.079
to avoid situations like that, so
I definitely recommend doing it.

81
00:05:26.079 --> 00:05:30.333
Being explicit about that.

82
00:05:30.333 --> 00:05:35.183
And then we also want to verify
what it was called with, so

83
00:05:35.183 --> 00:05:40.962
we can console.log(res.json.mock.calls)
the first call.

84
00:05:40.962 --> 00:05:46.249
And [COUGH] looks like there are no users.

85
00:05:46.249 --> 00:05:50.360
So it's an empty users array and
in fact that looks like there's a value.

86
00:05:50.360 --> 00:05:55.554
That should probably be the (users &amp;&amp;
users.length) or something like that.

87
00:05:55.554 --> 00:05:59.473
But yeah, in any case,
we'll stick with this.

88
00:05:59.473 --> 00:06:05.774
So the problem is that our database
in our test has not been initialized.

89
00:06:05.774 --> 00:06:10.087
So there are a couple of
ways that we can solve this.

90
00:06:10.087 --> 00:06:14.552
Right now,
this is actually not a pure unit test, so

91
00:06:14.552 --> 00:06:21.251
from the purest standpoint, a unit test
is one that mocks all dependencies and

92
00:06:21.251 --> 00:06:25.533
only tests the things that
are within the module.

93
00:06:25.533 --> 00:06:30.262
And so, if we were to make a pure unit
test, we would provide a mock for

94
00:06:30.262 --> 00:06:35.586
utils off, and mock for utils database,
so that it's focused on this unit.

95
00:06:35.586 --> 00:06:41.401
So sometimes,
if your like unit test pure is say no,

96
00:06:41.401 --> 00:06:44.052
no, mock everything.

97
00:06:44.052 --> 00:06:46.506
Otherwise, it's not a unit test
you're writing an integration test.

98
00:06:46.506 --> 00:06:48.910
Well, I actually don't
care what you call it.

99
00:06:48.910 --> 00:06:50.738
It's an integration test,
unit test, I don't care.

100
00:06:50.738 --> 00:06:54.301
What I care about is confidence that
I'm getting out of my test, and

101
00:06:54.301 --> 00:06:56.127
if I were to mock all these things.

102
00:06:56.127 --> 00:07:00.900
And then, I would have to write additional
test to get that confidence back that

103
00:07:00.900 --> 00:07:03.336
things are working together properly.

104
00:07:03.336 --> 00:07:07.715
So I'll just continue
working with these things and

105
00:07:07.715 --> 00:07:12.899
I can maybe just initialize this
database to have some users.

106
00:07:12.899 --> 00:07:15.999
And so, I'm not gonna show you
how all of that magic works,

107
00:07:15.999 --> 00:07:18.792
because it's not really
relevant to this workshop.

108
00:07:18.792 --> 00:07:22.540
You can go check out the code for
it later.

109
00:07:22.540 --> 00:07:27.503
But suffice it to say that we do have
a utilities module that we can import.

110
00:07:27.503 --> 00:07:32.841
So we import initDb from Today I learned,

111
00:07:32.841 --> 00:07:36.049
server-test-utils.

112
00:07:36.049 --> 00:07:41.385
You can actually find that it's
in the projects, server_test.

113
00:07:41.385 --> 00:07:45.661
So you can find that if you want
to see what that's actually doing.

114
00:07:45.661 --> 00:07:49.194
So before every single one of my tests,

115
00:07:49.194 --> 00:07:54.762
I want it to initialize the database
that is an asynchronous,

116
00:07:54.762 --> 00:08:01.204
so I'll wait that, and then with that,
I actually get a list of users.

117
00:08:01.204 --> 00:08:07.221
So this init process
generates some random users.

118
00:08:07.221 --> 00:08:09.686
Every single time, they're totally random,
totally different.

119
00:08:09.686 --> 00:08:14.786
And that's generally what I would
recommend is, in some scenarios,

120
00:08:14.786 --> 00:08:20.591
if you've got a real database, this can
actually really slow down your tests.

121
00:08:20.591 --> 00:08:25.638
And so, you really have to kind
of weigh the trade offs here

122
00:08:25.638 --> 00:08:30.493
because this will bring you
a fair bit more confidence.

123
00:08:30.493 --> 00:08:34.009
You can make sure that each test is
running in total isolation from another.

124
00:08:34.009 --> 00:08:38.575
And if the database is totally
messed up in this test,

125
00:08:38.575 --> 00:08:44.264
then you just call initDb again,
and everything's clean again.

126
00:08:44.264 --> 00:08:47.975
And a real application where
the database is big and

127
00:08:47.975 --> 00:08:51.521
there's a lot of data and
that takes a long time.

128
00:08:51.521 --> 00:08:55.423
Then an alternative to this would
be before all of the tests are run,

129
00:08:55.423 --> 00:08:58.170
let's just initialize
it with some fake data.

130
00:08:58.170 --> 00:09:02.453
And hopefully, you can have fixtures
that all the tests shared, so

131
00:09:02.453 --> 00:09:06.379
that you know what should be in
the database at any given time.

132
00:09:06.379 --> 00:09:09.659
And then every test just
cleans up after itself.

133
00:09:09.659 --> 00:09:15.274
So you have to weigh
the consequences either way.

134
00:09:15.274 --> 00:09:20.031
But, yeah, for
our cases the optimal would be to just

135
00:09:20.031 --> 00:09:23.434
totally wipe it clean for every test.

136
00:09:23.434 --> 00:09:25.219
If that's something that you can do.

