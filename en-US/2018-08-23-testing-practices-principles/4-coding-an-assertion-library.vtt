WEBVTT

1
00:00:00.000 --> 00:00:01.686
So let's work through this.

2
00:00:01.686 --> 00:00:06.157
So our objective here is to create
a function that accepts an actual value,

3
00:00:06.157 --> 00:00:11.143
returns an object that has a 2b function
on it that accepts the expected value and

4
00:00:11.143 --> 00:00:15.103
throws an error if there's something
different between the two.

5
00:00:15.103 --> 00:00:19.778
So I'll make our function expect, and
this is going to accept our actual And

6
00:00:19.778 --> 00:00:22.958
then this is going to return to be, and

7
00:00:22.958 --> 00:00:28.154
that'll be a function that is
going to expect our expect- or

8
00:00:28.154 --> 00:00:31.866
it's going to receive our expected value.

9
00:00:31.866 --> 00:00:37.910
And then if there's something wrong,
we'll just move this down here.

10
00:00:37.910 --> 00:00:41.838
So we'll rename this result to actual And
so

11
00:00:41.838 --> 00:00:46.210
now we can use this instead
of our imperative code.

12
00:00:46.210 --> 00:00:51.396
We'll also want to do sorry,
move down the if statement as well.

13
00:00:51.396 --> 00:00:53.735
And then this'll be actual.

14
00:00:53.735 --> 00:01:00.240
So we expect the actual to be expected,
if it's not then it'll throw the error.

15
00:01:00.240 --> 00:01:05.513
Okay so then we can use this
with expect Results expected,

16
00:01:05.513 --> 00:01:08.035
or sorry, to be expected.

17
00:01:10.161 --> 00:01:15.737
And we'll do the same thing down here for
subtract.

18
00:01:15.737 --> 00:01:21.711
And we run node 2.todo and
we'll get that same error.

19
00:01:21.711 --> 00:01:28.529
So that the difference here Actually, it's
kind of slight if we look at node one.

20
00:01:28.529 --> 00:01:30.755
The solution for the first one.

21
00:01:30.755 --> 00:01:35.117
You're going to see the error
message indicates that this

22
00:01:35.117 --> 00:01:38.499
line that this error was
thrown is on line 10.

23
00:01:38.499 --> 00:01:40.190
Now this is on line 34.

24
00:01:40.190 --> 00:01:46.360
And the significance of that is the error
will now always be thrown on this line 34.

25
00:01:46.360 --> 00:01:51.240
And there's no way for you to know
was this the subtract that failed or

26
00:01:51.240 --> 00:01:53.091
is this the sum that failed?

27
00:01:53.091 --> 00:01:56.372
We can maybe look at
the stack trace a little bit.

28
00:01:56.372 --> 00:01:59.487
So now we see, okay,
that's line 10, line 34.

29
00:01:59.487 --> 00:02:04.455
It's just not readily apparent to us
when we look at this error message

30
00:02:04.455 --> 00:02:06.000
what it was that broke.

31
00:02:06.000 --> 00:02:10.712
And so that's what a testing framework can
do for us, is it can improve our error

32
00:02:10.712 --> 00:02:15.208
messages so that things are a little
bit more clear what exactly is failing.

33
00:02:15.208 --> 00:02:18.688
The other problem is,
I could go in here into our math module.

34
00:02:18.688 --> 00:02:22.315
Sorry, I forgot to mention that
we extracted those functions,

35
00:02:22.315 --> 00:02:26.850
because normally you don't have your
source and your test in the same file.

36
00:02:26.850 --> 00:02:31.142
But yeah so if broke the subtract
function and I ran this again,

37
00:02:31.142 --> 00:02:35.353
I have indication that the subtract
function is also broken.

38
00:02:35.353 --> 00:02:40.319
And in fact if the sum function
actually used the subtract function and

39
00:02:40.319 --> 00:02:44.864
the subtract function was actually
the broken one, I still don't

40
00:02:44.864 --> 00:02:49.870
really have any indication of that
because it's only running one test.

41
00:02:49.870 --> 00:02:53.333
And so, there are two problems here.

42
00:02:53.333 --> 00:02:56.796
The message isn't totally clear,

43
00:02:56.796 --> 00:03:01.742
and it's not running all
of our tests in the file.

44
00:03:01.742 --> 00:03:05.947
That's what we're going to work on next,

45
00:03:05.947 --> 00:03:10.790
solving that problem
with a testing framework.

46
00:03:10.790 --> 00:03:14.641
With most testing frameworks,
you'll have a describe block.

47
00:03:14.641 --> 00:03:16.643
You'll have IT block, whatever.

48
00:03:16.643 --> 00:03:19.338
I actually,
we can talk about this later, but

49
00:03:19.338 --> 00:03:21.957
I generally try to avoid describe blocks.

50
00:03:21.957 --> 00:03:24.113
I try to avoid nesting my test a lot.

51
00:03:24.113 --> 00:03:26.423
And so, with Jest you can use IT or test.

52
00:03:26.423 --> 00:03:28.502
They're aliases of one another.

53
00:03:28.502 --> 00:03:30.840
So we'll be writing a test function.

54
00:03:30.840 --> 00:03:34.438
And via actually I didn't
give you an example.

55
00:03:34.438 --> 00:03:37.090
Here's all you just write it here.

56
00:03:37.090 --> 00:03:40.784
So it should the API should
be sending like this.

57
00:03:40.784 --> 00:03:45.710
Test title and then a call back
function gradual my assertions.

58
00:03:45.710 --> 00:03:51.664
Well that actually the format of
assertion will be something like Arrange,

59
00:03:51.664 --> 00:03:52.888
act, and assert.

60
00:03:52.888 --> 00:03:57.172
So whatever the case may be,
this callback function,

61
00:03:57.172 --> 00:04:01.456
if there's a problem,
it should throw an error, okay?

62
00:04:01.456 --> 00:04:07.780
So we'll pretty much just wrap this
code inside of that callback function.

63
00:04:07.780 --> 00:04:11.772
So that's what you're
gonna write in this one.

