WEBVTT

1
00:00:00.000 --> 00:00:03.879
&gt;&gt; Kent C Dodds: Let's go ahead and
I'll demo how to write a unit test here.

2
00:00:03.879 --> 00:00:07.726
And then I'll set you free on this
userToJSON and we'll take a break.

3
00:00:07.726 --> 00:00:08.804
Sound good?

4
00:00:08.804 --> 00:00:12.987
Great.
&gt;&gt; Kent C Dodds: So

5
00:00:12.987 --> 00:00:15.704
when you're running unit tests or

6
00:00:15.704 --> 00:00:20.762
when you're running tests at all,
you wanna take a step back and

7
00:00:20.762 --> 00:00:24.977
think of this as whatever
it is that you're testing,

8
00:00:24.977 --> 00:00:29.582
think of it from the perception
of a user of that software.

9
00:00:29.582 --> 00:00:34.466
So, like in this case,
an end user isn't going to be using

10
00:00:34.466 --> 00:00:39.264
the isPasswordAllowed function explicitly,
though.

11
00:00:39.264 --> 00:00:43.010
That's more like an end-to-end
test type of experience.

12
00:00:43.010 --> 00:00:48.069
But a user of this software would be
some other software that's using this,

13
00:00:48.069 --> 00:00:53.068
like in the password validation phase
of user registration or something.

14
00:00:53.068 --> 00:00:57.174
And so as a developer who will be
using this software, I want to be

15
00:00:57.174 --> 00:01:01.888
able to call this password field with
the password that the user gave me and

16
00:01:01.888 --> 00:01:04.954
check whether or
not that password is allowed.

17
00:01:04.954 --> 00:01:10.757
So in this example, it's a pretty simple,
straightforward function.

18
00:01:10.757 --> 00:01:15.557
But that's a really important
principle of testing in general,

19
00:01:15.557 --> 00:01:21.143
is that the more that your tests resemble
the way that your software is used,

20
00:01:21.143 --> 00:01:24.570
the more confidence those
tests can give you.

21
00:01:24.570 --> 00:01:28.527
And so in anything that you're testing,
take a step back and think,

22
00:01:28.527 --> 00:01:31.130
how would the user of
this software use this?

23
00:01:31.130 --> 00:01:32.454
And that's how you should test it.

24
00:01:32.454 --> 00:01:33.054
And then,

25
00:01:33.054 --> 00:01:37.745
how would the user of this software verify
that this software is working properly?

26
00:01:37.745 --> 00:01:40.968
So in our case, it's pretty simple,

27
00:01:40.968 --> 00:01:45.924
especially with unit tests of
pure functions like these.

28
00:01:45.924 --> 00:01:50.704
It's normally quite easy
to write these tests.

29
00:01:50.704 --> 00:01:54.015
So we're using ES modules in here.

30
00:01:54.015 --> 00:01:57.571
So we can import isPasswordAllowed from,

31
00:01:57.571 --> 00:02:03.214
we're one directory down, so
we're gonna go two directories up.

32
00:02:03.214 --> 00:02:08.036
And you go ahead and
type that out too if you want to.

33
00:02:08.036 --> 00:02:14.303
You'll be importing the userToJSON,
so you'll want to have that in yours.

34
00:02:14.303 --> 00:02:18.738
So, how do we verify that this
thing is working properly?

35
00:02:18.738 --> 00:02:24.661
Well, we can call isPasswordAllowed
with just a string of nothing.

36
00:02:24.661 --> 00:02:31.932
And I would expect that to be false,
so that password shouldn't be allowed.

37
00:02:31.932 --> 00:02:34.213
What other situations?

38
00:02:34.213 --> 00:02:40.401
Well, what if we just have, let's do
just f, and that should also be false.

39
00:02:40.401 --> 00:02:47.813
We could also just do numbers, that's long
enough, but that should also be false.

40
00:02:47.813 --> 00:02:53.681
And then we'll do something that
is a good and valid password.

41
00:02:53.681 --> 00:03:00.775
So we'll do whatever, some stuff,
and that should be true, okay?

42
00:03:00.775 --> 00:03:04.405
So I'll save that and
because we're in launch mode,

43
00:03:04.405 --> 00:03:08.774
our test will automatically rerun and
everything's passing.

44
00:03:08.774 --> 00:03:13.244
Now, this is a very important step that
you should not skip when you're writing

45
00:03:13.244 --> 00:03:14.522
tests, so listen up.

46
00:03:14.522 --> 00:03:20.795
It very well could be that your test,
your assertions are not running at all.

47
00:03:20.795 --> 00:03:24.952
Especially when we get
to asynchronous test,

48
00:03:24.952 --> 00:03:29.864
a test that rely on things
happening asynchronously.

49
00:03:29.864 --> 00:03:33.682
It's pretty common to wind
up in a situation where your

50
00:03:33.682 --> 00:03:35.925
assertions are never running.

51
00:03:35.925 --> 00:03:40.511
So a way to simulate that is
like if (true) { return }.

52
00:03:40.511 --> 00:03:43.812
So now my assertion is not running.

53
00:03:43.812 --> 00:03:48.457
But there's no indication in my output
that those assertions are not running

54
00:03:48.457 --> 00:03:49.176
properly.

55
00:03:49.176 --> 00:03:50.939
So there are a couple things you could do.

56
00:03:50.939 --> 00:03:57.384
There is actually in the,
where'd the jest expect,

57
00:03:57.384 --> 00:04:02.652
you can have assertions.
&gt;&gt; Kent C Dodds: And

58
00:04:02.652 --> 00:04:04.680
you can specify how many
assertions should run.

59
00:04:04.680 --> 00:04:06.821
I really don't like doing that.

60
00:04:06.821 --> 00:04:10.357
Cuz it's really annoying to have to
increment that number every time I add

61
00:04:10.357 --> 00:04:11.278
more assertions.

62
00:04:11.278 --> 00:04:14.362
But we could do it that way,
we could say, okay,

63
00:04:14.362 --> 00:04:17.085
let's put that thing back at the very top.

64
00:04:17.085 --> 00:04:18.936
We'll say we should have four assertions.

65
00:04:18.936 --> 00:04:22.293
And then it'll say, hey,
your assertions didn't run.

66
00:04:22.293 --> 00:04:23.917
So that's one way you
could accomplish this.

67
00:04:23.917 --> 00:04:25.288
And there's nothing wrong with that.

68
00:04:25.288 --> 00:04:27.814
It just annoys me when I
add another assertion,

69
00:04:27.814 --> 00:04:29.589
I have to increment that number.

70
00:04:29.589 --> 00:04:33.993
So what I like to do when I'm running the
test is I like to negate my assertions.

71
00:04:33.993 --> 00:04:41.481
Or, actually, even better than
that is to break the code.

72
00:04:41.481 --> 00:04:43.164
But here,
we'll first negate the assertion.

73
00:04:43.164 --> 00:04:45.662
Okay, great, so
the assertion is at least running.

74
00:04:45.662 --> 00:04:49.090
It can fail, it's possible for
this thing to fail, and so that's good.

75
00:04:49.090 --> 00:04:53.446
But like I said,
what you can do even one better

76
00:04:53.446 --> 00:04:57.707
is break the source
code that it's testing.

77
00:04:57.707 --> 00:05:02.039
The reason why breaking the source code
it's testing is better is because then you

78
00:05:02.039 --> 00:05:04.926
not only make sure that your
assertion is running, but

79
00:05:04.926 --> 00:05:08.564
you also make sure that your test is
running the code you think it is and

80
00:05:08.564 --> 00:05:12.057
that it's actually testing what
you think it should be testing.

81
00:05:12.057 --> 00:05:15.654
So this is actually one of the reasons
why TDD is so nice is because

82
00:05:15.654 --> 00:05:19.719
test-driven development, is because,
if you write the test first and

83
00:05:19.719 --> 00:05:23.915
then you write the source code to make
it pass, before you've even written

84
00:05:23.915 --> 00:05:28.743
the source code, if that test fails, then
you know you're testing the right thing.

85
00:05:28.743 --> 00:05:31.515
If you write the source code first and

86
00:05:31.515 --> 00:05:36.347
then write the test afterward,
then you can't verify that your

87
00:05:36.347 --> 00:05:41.464
changes have actually fixed the bug
that you're intending to fix.

88
00:05:41.464 --> 00:05:42.791
So you wanna reveal the bug first.

89
00:05:42.791 --> 00:05:47.707
And we'll talk about that more and
have an exercise for that later.

90
00:05:47.707 --> 00:05:50.806
Okay, so
we verified that our test can fail and

91
00:05:50.806 --> 00:05:54.937
that it's testing the thing we
expect that it's testing, so

92
00:05:54.937 --> 00:06:00.149
we should be good to go with this.
&gt;&gt; Kent C Dodds: Right,

93
00:06:00.149 --> 00:06:01.698
any questions about unit testing?

94
00:06:01.698 --> 00:06:04.273
Yes?
&gt;&gt; Speaker 2: Do you typically

95
00:06:04.273 --> 00:06:06.854
put a bunch of expect statements

96
00:06:06.854 --> 00:06:09.352
inside one test wrapper?
&gt;&gt; Kent C Dodds: Yeah,

97
00:06:09.352 --> 00:06:12.230
that's a great question,
and a pretty common one.

98
00:06:12.230 --> 00:06:20.707
So in times past, the recommended way to
test was only one assertion per test.

99
00:06:20.707 --> 00:06:25.697
A big part of the reason for
that was because if one

100
00:06:25.697 --> 00:06:30.444
of these fails,
like let's say this is true,

101
00:06:30.444 --> 00:06:34.854
the error messages weren't super great.

102
00:06:34.854 --> 00:06:39.237
It would just say,
this title of this test failed.

103
00:06:39.237 --> 00:06:43.160
And it couldn't tell you exactly where
that failed or what exactly happened.

104
00:06:43.160 --> 00:06:50.303
And so if you have 30 assertions in here,
you're like, okay, which assertion broke?

105
00:06:50.303 --> 00:06:56.163
So this is why having a testing framework
that has really good error messages is so

106
00:06:56.163 --> 00:07:01.593
critical is because it allows you to
do something that actually makes a fair

107
00:07:01.593 --> 00:07:07.305
bit more sense without sacrificing
knowing exactly which assertion failed.

108
00:07:07.305 --> 00:07:11.221
So I have no problem having
multiple assertions.

109
00:07:11.221 --> 00:07:16.007
We'll have several examples in here,
especially when we get to integration

110
00:07:16.007 --> 00:07:19.184
tests, where we have a whole
bunch of assertions.

111
00:07:19.184 --> 00:07:22.203
We're doing a whole flow of things,
asserting as we go.

112
00:07:22.203 --> 00:07:26.786
And that's much better than the
alternative, which is we put up this setup

113
00:07:26.786 --> 00:07:31.385
in this before each function and
we have 30 tests that are going through.

114
00:07:31.385 --> 00:07:34.700
And just have one test that
goes through that flow.

115
00:07:34.700 --> 00:07:37.481
It'll be faster and more reliable.

116
00:07:37.481 --> 00:07:41.183
So that's an excellent question,
I'm glad you asked it.

117
00:07:41.183 --> 00:07:45.462
After you do your exercise,
I'm gonna refactor this here.

118
00:07:45.462 --> 00:07:49.608
I'll add a TODO so
I don't forget, refactor.

119
00:07:49.608 --> 00:07:54.768
Because there's another thing that we
could do to improve this slightly as well,

120
00:07:54.768 --> 00:07:59.045
to make the error messages better and
to make it easier to maintain.

121
00:07:59.045 --> 00:08:02.750
But for now,
this is the way we're gonna be doing this.

122
00:08:02.750 --> 00:08:04.988
Thanks for asking that,
that was a great question.

