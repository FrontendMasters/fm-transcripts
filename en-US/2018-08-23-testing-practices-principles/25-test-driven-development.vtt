WEBVTT

1
00:00:00.000 --> 00:00:02.532
&gt;&gt; Kent C. Dodds: Okay, so right now,

2
00:00:02.532 --> 00:00:08.592
if you look at your post.todo file,
not the test.

3
00:00:08.592 --> 00:00:10.993
But if you look at
the bottom of my screen,

4
00:00:10.993 --> 00:00:15.184
it'll show you where I am
servers/src/controllers/posts.todo.

5
00:00:15.184 --> 00:00:19.401
This is missing a critical feature.

6
00:00:19.401 --> 00:00:22.308
It is a delete post function, so

7
00:00:22.308 --> 00:00:28.245
we want to implement that function,
because we are not Twitter.

8
00:00:28.245 --> 00:00:32.949
And actually no,
that's the update posting.

9
00:00:32.949 --> 00:00:37.042
Twitter does let you delete tweets,
but not update, that's super annoying.

10
00:00:37.042 --> 00:00:41.455
But yeah,
we do want to allow people to delete posts

11
00:00:41.455 --> 00:00:45.675
if they decide they made a mistake or
something.

12
00:00:45.675 --> 00:00:49.237
And so
that's the feature we're going to develop.

13
00:00:49.237 --> 00:00:53.640
But we're going to do it with TDD fashion,
test driven development.

14
00:00:53.640 --> 00:00:55.610
So that's what your
exercise is going to be.

15
00:00:55.610 --> 00:01:00.877
Let me demo that by doing
the user's version of this.

16
00:01:00.877 --> 00:01:02.993
I've got the same basic idea.

17
00:01:06.059 --> 00:01:07.452
&gt;&gt; Kent C. Dodds: Let's see.

18
00:01:07.452 --> 00:01:09.414
Go to users.todo.

19
00:01:11.535 --> 00:01:15.077
&gt;&gt; Kent C. Dodds: Okay, so this is
the idea of Test Driven Development,

20
00:01:15.077 --> 00:01:15.927
right here.

21
00:01:15.927 --> 00:01:21.085
Red, Green, Refactor.

22
00:01:21.085 --> 00:01:25.998
The reason, or kind of, there are several
reasons that you would use This test

23
00:01:25.998 --> 00:01:28.987
given development, which we'll talk about.

24
00:01:28.987 --> 00:01:33.810
But the red green refactor cycle
basically indicates you write

25
00:01:33.810 --> 00:01:36.904
some code that in your test that fails and

26
00:01:36.904 --> 00:01:41.818
you write as little as possible
just to get something failing and

27
00:01:41.818 --> 00:01:47.554
then you write as little source code
as possible to make that test passing.

28
00:01:47.554 --> 00:01:52.695
Then you refactor your source code or
your test to a nice state, so

29
00:01:52.695 --> 00:01:58.591
something that resembles something
that is even potentially shippable.

30
00:01:58.591 --> 00:02:03.584
Then you continue on until you finish
the feature that you're trying to build.

31
00:02:03.584 --> 00:02:06.662
So that's the Red, Green, Refractor cycle.

32
00:02:06.662 --> 00:02:13.129
It's a work flow technique, it's
a mechanism for to enhance your workflow.

33
00:02:13.129 --> 00:02:15.371
So without test driven development.

34
00:02:15.371 --> 00:02:16.178
How would you build this?

35
00:02:16.178 --> 00:02:19.049
Well, you would try to write
a whole bunch of source code.

36
00:02:19.049 --> 00:02:20.074
And then you would go to the app.

37
00:02:20.074 --> 00:02:26.284
And you would run through the process
of deleting a post or something.

38
00:02:26.284 --> 00:02:30.515
Which you would actually have to write the
client side code for that before you could

39
00:02:30.515 --> 00:02:33.791
even test that or you would have
to do Postman and all that stuff.

40
00:02:33.791 --> 00:02:38.473
So the test driven development
allows you to automate

41
00:02:38.473 --> 00:02:43.365
that process of validation
that what you're writing is

42
00:02:43.365 --> 00:02:47.642
actually what you expect and
so it's actually.

43
00:02:47.642 --> 00:02:49.994
Winds up being a lot faster generally.

44
00:02:49.994 --> 00:02:54.864
Even though you spend a fair
amount more time coding.

45
00:02:54.864 --> 00:02:58.740
And the cool thing about it is when you're
all done you have a suite of tests that

46
00:02:58.740 --> 00:03:02.291
you can commit to your project and
can continue to give you confidence.

47
00:03:02.291 --> 00:03:06.717
Sometimes the test that you create out of
test driven development can be not really

48
00:03:06.717 --> 00:03:11.079
great for building confidence, may be
you're marking a whole bunch of stuff and

49
00:03:11.079 --> 00:03:15.503
it's not giving you a lot of confidence it
was just kind of helping you along the way

50
00:03:15.503 --> 00:03:17.136
of developing the software.

51
00:03:17.136 --> 00:03:21.345
So it's totally cool to just do with those
test may be rewrite them from scratch now

52
00:03:21.345 --> 00:03:25.685
you'll have a working implementation and
write a test that's a little bit better.

53
00:03:25.685 --> 00:03:30.510
But yeah often the test you develop during
test driven development are actually

54
00:03:30.510 --> 00:03:34.264
useful and you'll come in those
along with your source code.

55
00:03:34.264 --> 00:03:36.624
Any questions about that?

56
00:03:36.624 --> 00:03:38.241
Yeah?

57
00:03:38.241 --> 00:03:44.350
&gt;&gt; Speaker 2: Do you have any thoughts on
kind of what would be a good target for

58
00:03:44.350 --> 00:03:49.094
TDD and
what where would TDD not be appropriate?

59
00:03:49.094 --> 00:03:49.967
&gt;&gt; Kent C. Dodds: Yeah, good question.

60
00:03:49.967 --> 00:03:58.102
So Test Driven Development has a pretty
good place in the world of pure functions.

61
00:03:58.102 --> 00:04:03.280
That's just anything,
it's easier to test pure functions.

62
00:04:03.280 --> 00:04:05.318
And so yeah.

63
00:04:05.318 --> 00:04:08.053
Especially we had with it,
is password allowed?

64
00:04:08.053 --> 00:04:12.597
We could just, here's a list of allowed
things, here's a list of not allowed.

65
00:04:12.597 --> 00:04:20.201
And then just add password after
password to those as we go.

66
00:04:20.201 --> 00:04:25.450
Just more use cases to help
develop that function.

67
00:04:25.450 --> 00:04:29.987
Places where and in this situation
we're adding a new feature,

68
00:04:29.987 --> 00:04:35.378
this delete, post delete user,
that's a pretty good place for it as well.

69
00:04:35.378 --> 00:04:40.549
Places where it doesn't really
work very well are UI where the,

70
00:04:40.549 --> 00:04:42.863
that's not entirely true.

71
00:04:42.863 --> 00:04:45.474
But in general it's a little bit harder,

72
00:04:45.474 --> 00:04:49.949
a little bit more tricky especially
by taking a step back, in general,

73
00:04:49.949 --> 00:04:54.796
if you aren't certain what you want things
to look like when you are all done,

74
00:04:54.796 --> 00:04:58.179
then that's a place where
you can't really use TDD.

75
00:04:58.179 --> 00:05:03.235
Because the idea behind TDD is,
I know what I want this to look like so

76
00:05:03.235 --> 00:05:08.580
I'm going to write out some code that
resembles how I want it to behave.

77
00:05:08.580 --> 00:05:13.068
But if you're just experimenting and
you're not sure how you want it to behave,

78
00:05:13.068 --> 00:05:15.183
then you can't really use TDD there.

79
00:05:15.183 --> 00:05:18.920
That said,
you could experiment with different APIs.

80
00:05:18.920 --> 00:05:20.715
And I think I want it to look like this.

81
00:05:20.715 --> 00:05:23.923
But yeah, I struggle sometimes with TDD.

82
00:05:23.923 --> 00:05:28.180
On a personal level,
I don't actually use TDD a ton.

83
00:05:28.180 --> 00:05:31.283
I do have some situations where I use TDD.

84
00:05:31.283 --> 00:05:34.784
I also use RDD,
which is read-me driven development.

85
00:05:34.784 --> 00:05:36.729
Where I'll document what I want first.

86
00:05:36.729 --> 00:05:38.190
This is what I want it to look like.

87
00:05:38.190 --> 00:05:41.590
Then I'll write the test to validate
that this thing works like that.

88
00:05:41.590 --> 00:05:43.224
And then I'll write the implementation.

89
00:05:43.224 --> 00:05:44.456
That actually is really awesome.

90
00:05:44.456 --> 00:05:49.168
It's a lot of fun when I have a clear
enough vision of what I want this to look

91
00:05:49.168 --> 00:05:51.833
like to write some documentation for it.

92
00:05:51.833 --> 00:05:54.625
But yeah.

93
00:05:54.625 --> 00:05:57.365
TDD is something that you kind
of develop an intuition for.

94
00:05:57.365 --> 00:06:00.131
And especially at the beginning
when you're not used to it.

95
00:06:00.131 --> 00:06:05.002
It's something that you kinda
need to force yourself to do.

96
00:06:05.002 --> 00:06:09.329
And then over time,
you kind of develop this intuition and

97
00:06:09.329 --> 00:06:12.255
it's enhanced work flow experience.

98
00:06:12.255 --> 00:06:13.735
Cuz it really can enhance your workflow.

99
00:06:13.735 --> 00:06:15.239
&gt;&gt; Speaker 2: So
why don't you use it often?

100
00:06:15.239 --> 00:06:17.560
&gt;&gt; Kent C. Dodds: Why don't I?

101
00:06:17.560 --> 00:06:21.972
I feel the type of code
that I write is often

102
00:06:21.972 --> 00:06:26.395
experimental code, at least recently.

103
00:06:26.395 --> 00:06:29.978
I'm building a lot of tools and
stuff like that for PayPal.

104
00:06:29.978 --> 00:06:33.323
And so when I was doing product stuff,
and generally,

105
00:06:33.323 --> 00:06:35.370
TDD made a little bit more sense.

106
00:06:35.370 --> 00:06:37.735
I had a better idea of
what I was building.

107
00:06:37.735 --> 00:06:41.104
But also,
I was doing more UI stuff, [COUGH].

108
00:06:41.104 --> 00:06:46.883
And the tools that we had when
I was doing product stuff for

109
00:06:46.883 --> 00:06:52.919
testing UI we're generally not
super well suited for TDD.

110
00:06:52.919 --> 00:06:58.036
Now, if you come to the workshop
tomorrow about testing react,

111
00:06:58.036 --> 00:07:02.205
I actually created my own
library that you can very,

112
00:07:02.205 --> 00:07:06.118
pretty easily test using TDD,
test UI with TDD.

113
00:07:08.424 --> 00:07:13.392
&gt;&gt; Kent C. Dodds: Kinda combination of
tools and being mostly focused on UI.

114
00:07:13.392 --> 00:07:17.344
But there are times if I'm
writing an open source library,

115
00:07:17.344 --> 00:07:22.256
it's a JavaScript utility of some kind,
then TDD works out pretty well.

116
00:07:22.256 --> 00:07:23.828
I should add a caution there.

117
00:07:23.828 --> 00:07:26.829
A couple of years ago I was writing a.

118
00:07:26.829 --> 00:07:31.194
There's actually a Vanilla JavaScript
version of prop types that ended up being

119
00:07:31.194 --> 00:07:31.842
terrible.

120
00:07:31.842 --> 00:07:32.795
So please don't find it.

121
00:07:32.795 --> 00:07:34.138
&gt;&gt; Speaker 2: [LAUGH]
&gt;&gt; Kent C. Dodds: But

122
00:07:34.138 --> 00:07:39.707
part of the reason it ended up being
terrible was because I went with TDD so

123
00:07:39.707 --> 00:07:43.469
hard that I actually
skipped the refactor step.

124
00:07:43.469 --> 00:07:45.372
So maybe it wasn't really TDD.

125
00:07:45.372 --> 00:07:47.730
But I was, okay so
these are all the things I want it to do.

126
00:07:47.730 --> 00:07:50.039
And then I just coded it out.

127
00:07:50.039 --> 00:07:53.197
And I never stopped to think,
is this code maintainable?

128
00:07:53.197 --> 00:07:55.357
And it wasn't, as it turns out.

129
00:07:55.357 --> 00:08:00.138
But it's still being run on probably
thousands of production apps today cuz it

130
00:08:00.138 --> 00:08:03.771
was a dependency of a library
that thousands of people use.

131
00:08:03.771 --> 00:08:11.037
So you know you're not supposed to use
it in production but probably are.

132
00:08:11.037 --> 00:08:15.145
So yeah, just make sure you don't skip
that refactor step because you could

133
00:08:15.145 --> 00:08:18.171
windup with something that's
not very maintainable.

134
00:08:18.171 --> 00:08:22.904
The cool thing about TDD though is you
can feel pretty safe with the refactoring

135
00:08:22.904 --> 00:08:27.135
step because if you break something
in the process of refactoring then

136
00:08:27.135 --> 00:08:28.800
you can go ahead and fix it.

137
00:08:28.800 --> 00:08:29.810
So.

138
00:08:29.810 --> 00:08:32.340
&gt;&gt; Speaker 3: How closely should
your code follow testing?

139
00:08:32.340 --> 00:08:35.048
In other words,
is it better to write a test and

140
00:08:35.048 --> 00:08:38.463
then code or write a bunch of tests and
then write the code?

141
00:08:38.463 --> 00:08:41.079
&gt;&gt; Kent C. Dodds: Great!
So, that's a good question,

142
00:08:41.079 --> 00:08:44.250
there are actually a couple camps in this.

143
00:08:44.250 --> 00:08:47.244
There's people who are very much TDD,

144
00:08:47.244 --> 00:08:50.882
write as minimal code as
possible in your test.

145
00:08:50.882 --> 00:08:55.661
Write as minimal code as possible in your
source just to make that test go green and

146
00:08:55.661 --> 00:08:56.730
then keep going.

147
00:08:56.730 --> 00:08:59.915
And that's kind of how I'm gonna try and
show it here.

148
00:08:59.915 --> 00:09:04.118
It takes a certain amount
of discipline to do that.

149
00:09:04.118 --> 00:09:08.879
And sometimes you just have such a really
perfect picture of what you're trying to

150
00:09:08.879 --> 00:09:11.915
develop that you could write
a full script of test and

151
00:09:11.915 --> 00:09:15.367
then write the full implementation,
and that'd be fine.

152
00:09:15.367 --> 00:09:20.139
By keeping things tight in that feedback
loop and it kinda helps you check

153
00:09:20.139 --> 00:09:24.128
yourself as you go because if
you write this big suit of task.

154
00:09:24.128 --> 00:09:28.823
Then you could find yourself making
a couple of assumptions about what's

155
00:09:28.823 --> 00:09:32.813
possible or what it makes sense
about the implementation and

156
00:09:32.813 --> 00:09:37.463
then you get to implementing and
you realize ooh wait no i cant do that.

157
00:09:37.463 --> 00:09:41.062
Then you have this,
a bunch of text that you have to pick and

158
00:09:41.062 --> 00:09:45.322
choose which ones are relevant still and
so, by keeping it tighter,

159
00:09:45.322 --> 00:09:48.349
you can make sure to avoid
situations like that.

160
00:09:48.349 --> 00:09:53.287
Also I sometimes,
[COUGH] you could find that there

161
00:09:53.287 --> 00:09:57.404
are situations where you´re at a test for

162
00:09:57.404 --> 00:10:01.754
code that actually doesn't need to exist,

163
00:10:01.754 --> 00:10:05.421
like for an API that you don't need.

164
00:10:05.421 --> 00:10:08.196
So by focusing on one
little thing at a time,

165
00:10:08.196 --> 00:10:12.171
you can force yourself to ask question,
do I really need this?

166
00:10:12.171 --> 00:10:15.427
Is this necessary because
the implementation?

167
00:10:15.427 --> 00:10:20.167
Or maybe I could change the implementation
so I don't have to even have this.

168
00:10:20.167 --> 00:10:23.676
So generally,
it's better to keep it a little tighter.

169
00:10:23.676 --> 00:10:27.154
But if you have a really good idea of
what you want this to look like and

170
00:10:27.154 --> 00:10:31.508
how the implementation is gonna work, then
you could try this suite of test, yeah.

171
00:10:31.508 --> 00:10:35.636
Clearly, I tried to be not
dogmatic about any of this stuff.

172
00:10:35.636 --> 00:10:38.018
Lots of this is very loosey-goosey.

