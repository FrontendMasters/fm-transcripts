WEBVTT

1
00:00:01.375 --> 00:00:06.435
&gt;&gt; Kent C. Dodds: So our next subject
is mocks and test doubles, spys,

2
00:00:06.435 --> 00:00:13.081
whatever you want to call these things,
a fake version of something.

3
00:00:13.081 --> 00:00:19.066
And so to teach you this,
you're actually going to build your own or

4
00:00:19.066 --> 00:00:21.695
you're gonna work through.

5
00:00:21.695 --> 00:00:26.907
I'm creating a mark for
a dependency in a test, okay?

6
00:00:26.907 --> 00:00:34.580
So this is also going to be in the other
directory in what's-a-mock, and in here.

7
00:00:34.580 --> 00:00:39.210
Let me really quick,
I think I got a script for this, yeah.

8
00:00:39.210 --> 00:00:43.114
It's npm run test:mock,
&gt;&gt; Kent C. Dodds: And

9
00:00:43.114 --> 00:00:47.279
that should start your,
just up in watch mode.

10
00:00:47.279 --> 00:00:52.712
If you're curious these scripts all
exist in the package.json here.

11
00:00:52.712 --> 00:00:55.801
So if you're like,
what was that script again?

12
00:00:55.801 --> 00:00:59.619
Just looking look through
here find the one that

13
00:00:59.619 --> 00:01:02.682
looks like the one we're working on.

14
00:01:02.682 --> 00:01:07.607
So it's test:mock.
&gt;&gt; Speaker 2: What directory do

15
00:01:07.607 --> 00:01:10.404
we need to put it in?
&gt;&gt; Kent C. Dodds: In this one,

16
00:01:10.404 --> 00:01:13.062
the directory should just be the root

17
00:01:13.062 --> 00:01:17.326
directory of the project.
&gt;&gt; Kent C. Dodds: So

18
00:01:17.326 --> 00:01:20.686
let me just intro you
to this really quick.

19
00:01:20.686 --> 00:01:23.272
We've got a thumb war module.

20
00:01:23.272 --> 00:01:26.880
So this is, it takes a player one and
player two,

21
00:01:26.880 --> 00:01:29.615
those are just accepted as strings.

22
00:01:29.615 --> 00:01:34.698
It goes through and
calls this get winner function

23
00:01:34.698 --> 00:01:39.780
from and
it keeps going until player one or

24
00:01:39.780 --> 00:01:45.362
player two win at least two and
whoever gets that wins.

25
00:01:45.362 --> 00:01:50.424
So we're going to make this act
under the assumption that get

26
00:01:50.424 --> 00:01:56.290
winner is a module that Mix some
requests to some unreliable service.

27
00:01:56.290 --> 00:02:01.231
Well it's realiable for production, but
its test environment is uneliable or

28
00:02:01.231 --> 00:02:02.049
something.

29
00:02:02.049 --> 00:02:04.273
In addition, when you're unit testing,

30
00:02:04.273 --> 00:02:08.102
you don't want to be making any
network requests anyway, so, if you're

31
00:02:08.102 --> 00:02:12.202
looking at the actual implementation,
its just using that though, random.

32
00:02:12.202 --> 00:02:17.464
But let's just pretend put our pretend
hats on, that this is something

33
00:02:17.464 --> 00:02:22.211
really complicated we don't want
to actually run in our tests.

34
00:02:22.211 --> 00:02:25.033
So this is what we're gonna be mocking,

35
00:02:25.033 --> 00:02:28.612
is this getwinner function
from the utils module.

36
00:02:28.612 --> 00:02:33.159
You wanna be in todo, so yeah,
if you look at 2 here we'll hit P and

37
00:02:33.159 --> 00:02:38.198
go thumb-wor.1,todo and
you'll see that the test is still passing,

38
00:02:38.198 --> 00:02:43.157
the problem is that the assertion
isn't very specific because it can't

39
00:02:43.157 --> 00:02:46.327
be because the winner is
non deterministic and

40
00:02:46.327 --> 00:02:50.991
you can't encode that in your task
because you can't really know.

41
00:02:50.991 --> 00:02:56.313
All that we know is that the winner is
going to be one of the two players And

42
00:02:56.313 --> 00:02:59.772
so what we want to do is
we're gonna mock this so

43
00:02:59.772 --> 00:03:02.736
we can have a more specific assertion.

44
00:03:02.736 --> 00:03:07.556
And we're gonna itirate from
a less optimum mocking strategy

45
00:03:07.556 --> 00:03:12.108
to a more optimum mocking strategy So
I've got comments.

46
00:03:12.108 --> 00:03:13.929
This is very similar to our building and

47
00:03:13.929 --> 00:03:16.200
testing framework that
we did at the beginning.

48
00:03:16.200 --> 00:03:18.294
I've got comments in the code.

49
00:03:18.294 --> 00:03:20.826
I'll just let you go on it and
we'll work through the,

50
00:03:20.826 --> 00:03:22.488
I'll work through the solutions.

51
00:03:22.488 --> 00:03:25.402
At the end, you can ask questions and
everything.

