WEBVTT

1
00:00:03.097 --> 00:00:06.880
&gt;&gt; Kent C. Dodds: So our next
subject is mocks and test doubles,

2
00:00:06.880 --> 00:00:11.620
spies, whatever you
wanna call these things.

3
00:00:11.620 --> 00:00:14.296
A fake version of something.

4
00:00:14.296 --> 00:00:20.607
And so to teach you this,
you're actually going to build your own,

5
00:00:20.607 --> 00:00:28.044
or you're gonna work through creating
a mock for a dependency in a test, okay?

6
00:00:28.044 --> 00:00:33.967
So this is also going to be in
the other directory in whats-a-mock?

7
00:00:33.967 --> 00:00:39.467
And in here, let me really quick,
I think I've got a script for this.

8
00:00:39.467 --> 00:00:43.832
Yeah, it's npm run test:mock.

9
00:00:49.021 --> 00:00:52.978
&gt;&gt; Kent C. Dodds: And that should
start your Jest up in Watch mode.

10
00:00:52.978 --> 00:00:57.170
If you're curious, these scripts
all exist in the package.json here.

11
00:00:57.170 --> 00:00:58.650
So if you're like,
what was that script again?

12
00:00:58.650 --> 00:01:03.418
Just look through here, find the one that
looks like the one we're working on.

13
00:01:03.418 --> 00:01:04.909
So it's test:mock.

14
00:01:08.265 --> 00:01:10.440
&gt;&gt; Speaker 2: What directory
do we need to be in?

15
00:01:10.440 --> 00:01:11.793
&gt;&gt; Kent C. Dodds: Yeah,
in this one, the directory,

16
00:01:11.793 --> 00:01:13.722
it should just be the root
directory of the project.

17
00:01:16.275 --> 00:01:22.441
&gt;&gt; Kent C. Dodds: So let me just
intro you to this really quick.

18
00:01:22.441 --> 00:01:25.955
We've got a thumb-war module.

19
00:01:25.955 --> 00:01:29.296
So it takes a player1 and player2.

20
00:01:29.296 --> 00:01:32.007
Those are just accepted as strings.

21
00:01:32.007 --> 00:01:37.026
It goes through and
calls this getWinner function from utils.

22
00:01:37.026 --> 00:01:40.948
And it keeps going until player1 or

23
00:01:40.948 --> 00:01:46.970
player2 win at least two,
whoever gets that, wins.

24
00:01:48.170 --> 00:01:53.912
So we're going to make this act
under the assumption that getWinner

25
00:01:53.912 --> 00:01:59.359
is a module that makes some request
to some unreliable service.

26
00:01:59.359 --> 00:02:03.030
Well, it's reliable for production, but
its test environment is unreliable or

27
00:02:03.030 --> 00:02:03.624
something.

28
00:02:03.624 --> 00:02:05.554
In addition, when you're unit testing,

29
00:02:05.554 --> 00:02:08.137
you don't wanna be making
any network requests anyway.

30
00:02:08.137 --> 00:02:11.339
So, yeah,
if you look at the actual implementation,

31
00:02:11.339 --> 00:02:13.297
it's just using Math.random.

32
00:02:13.297 --> 00:02:16.148
But let's just pretend,
put our pretend hats on,

33
00:02:16.148 --> 00:02:20.939
that this is something really complicated
we don't want to actually run in our test.

34
00:02:20.939 --> 00:02:23.217
So this is what we're gonna be mocking,

35
00:02:23.217 --> 00:02:26.540
this getWinner function
from the utils module.

36
00:02:26.540 --> 00:02:30.040
You wanna be in todo, whew.

37
00:02:30.040 --> 00:02:37.578
So, yeah, if you look at two here,
we'll hit P and go thumb-war.1.todo.

38
00:02:37.578 --> 00:02:40.308
And you'll see that the test
is still passing, but

39
00:02:40.308 --> 00:02:45.300
the problem is that the assertion isn't
very specific, because it can't be.

40
00:02:45.300 --> 00:02:47.710
Because the winner is non-deterministic,

41
00:02:47.710 --> 00:02:52.890
you can't encode that in your test
because you can't really know.

42
00:02:52.890 --> 00:02:56.314
All that we know is that the winner's
gonna be one of the two players.

43
00:02:56.314 --> 00:02:59.445
And so what we want to do
is we're gonna mock this so

44
00:02:59.445 --> 00:03:01.918
we can have a more specific assertion.

45
00:03:01.918 --> 00:03:07.182
And we're gonna iterate
from a less optimal mocking

46
00:03:07.182 --> 00:03:11.857
strategy to a more
optimal mocking strategy.

47
00:03:11.857 --> 00:03:12.857
So I've got comments.

48
00:03:12.857 --> 00:03:14.631
This is very similar to our building and

49
00:03:14.631 --> 00:03:16.851
testing framework that
we did at the beginning.

50
00:03:16.851 --> 00:03:18.569
I've got comments in the code.

51
00:03:18.569 --> 00:03:21.566
I'll just kinda let you go on it and
then we'll work through the,

52
00:03:21.566 --> 00:03:25.402
I'll work through the solution, at the end
you can ask questions and everything.

