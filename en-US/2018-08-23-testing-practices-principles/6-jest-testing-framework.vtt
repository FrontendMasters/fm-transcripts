WEBVTT

1
00:00:00.232 --> 00:00:03.821
&gt;&gt; Kent C. Dodds: Now we're going to
talk about the Jest Testing Framework,

2
00:00:03.821 --> 00:00:07.064
just a little bit,
I'll give you a brief intro to it.

3
00:00:07.064 --> 00:00:09.009
So that as we go through some exercises,

4
00:00:09.009 --> 00:00:11.826
you know what assertions
are available to you and things.

5
00:00:11.826 --> 00:00:15.543
And so,
if you go into the other directory,

6
00:00:15.543 --> 00:00:20.870
just expect this test directory
with the double underscores,

7
00:00:20.870 --> 00:00:24.602
and then the expect assertion is js.file.

8
00:00:24.602 --> 00:00:27.114
Then you can take a look at these.

9
00:00:27.114 --> 00:00:31.453
And I'm gonna go ahead and run a script.

10
00:00:31.453 --> 00:00:33.303
You can run this if you want to.

11
00:00:33.303 --> 00:00:37.230
Let me see, it's, yeah,
NPM run test:expect.

12
00:00:37.230 --> 00:00:40.609
You'll wanna do this
in the root directory.

13
00:00:40.609 --> 00:00:43.921
Yeah, you don't have to run
this if you don't want to,

14
00:00:43.921 --> 00:00:46.395
you're not gonna be changing any files.

15
00:00:46.395 --> 00:00:50.919
And then we'll explore
this a little bit later.

16
00:00:50.919 --> 00:00:55.019
But press A to run all those tests.

17
00:00:55.019 --> 00:00:58.166
Like I said, you're not really
gonna be making any changes there.

18
00:00:58.166 --> 00:01:01.282
So this is just a quick intro to Jest so

19
00:01:01.282 --> 00:01:06.018
you're familiar with what
assertions are available.

20
00:01:06.018 --> 00:01:08.564
So you have this 2B assertion.

21
00:01:08.564 --> 00:01:11.049
You wrote this, so
you know what this is all about.

22
00:01:11.049 --> 00:01:15.241
It's similar to triple equals,
so you can expect one to be one,

23
00:01:15.241 --> 00:01:17.269
you can expect true to be true.

24
00:01:17.269 --> 00:01:21.144
And then on any of these assertions you
can negate the assertion by adding a not

25
00:01:21.144 --> 00:01:21.923
in front of it.

26
00:01:21.923 --> 00:01:25.577
So expect this object not
to be this other object.

27
00:01:25.577 --> 00:01:29.913
And this is actually a pretty
critical point, so expect is using

28
00:01:29.913 --> 00:01:34.584
something similar to triple equals,
it's actually object dot is.

29
00:01:34.584 --> 00:01:37.620
But two objects even though
they may look the same and

30
00:01:37.620 --> 00:01:41.495
they have all the same properties,
they're not actually equal.

31
00:01:41.495 --> 00:01:44.263
And so
keep that in mind when you're using toBe,

32
00:01:44.263 --> 00:01:47.719
we want to use this to compare
references to the same object.

33
00:01:47.719 --> 00:01:53.753
Or the like primitive values,
like a one and true or a string.

34
00:01:56.144 --> 00:01:58.565
&gt;&gt; Kent C. Dodds: Okay, and
then we have two equal.

35
00:01:58.565 --> 00:02:02.607
So if you do have two objects that look
similar to each other, or that look

36
00:02:02.607 --> 00:02:06.874
the same but not in the same reference
this is where two equal comes in handy.

37
00:02:06.874 --> 00:02:10.199
It's similar to low dash is equal
if you're familiar with that.

38
00:02:10.199 --> 00:02:14.189
So the subject in our
actual here are visually

39
00:02:14.189 --> 00:02:19.022
identical references to
totally different objects.

40
00:02:19.022 --> 00:02:23.286
We also have this array as well and
oops, and

41
00:02:23.286 --> 00:02:27.915
these two things are also
visually identical.

42
00:02:27.915 --> 00:02:32.009
And so
both of these will pass a toEqual check.

43
00:02:34.471 --> 00:02:36.242
&gt;&gt; Kent C. Dodds: So
we'll use that one a fair amount.

44
00:02:36.242 --> 00:02:40.594
Too match object is similar to toEqual,

45
00:02:40.594 --> 00:02:44.571
Except it will do a sub object match.

46
00:02:44.571 --> 00:02:49.006
So so long as the subject
has at least the things

47
00:02:49.006 --> 00:02:52.541
that the actual has as the expected.

48
00:02:52.541 --> 00:02:53.882
That should be expected.

49
00:02:53.882 --> 00:02:59.278
Anyway, so long as this has at least
all the same properties as this one,

50
00:02:59.278 --> 00:03:01.942
then that will pass the assertion.

51
00:03:01.942 --> 00:03:04.585
So to match object is handy.

52
00:03:04.585 --> 00:03:09.332
If we added, like,
a f bar then that will fail.

53
00:03:09.332 --> 00:03:13.252
And actually this is one of the nice
things about Jest assertions,

54
00:03:13.252 --> 00:03:18.363
is they'll say hey, I expected it, and now
to match this and here's the difference.

55
00:03:18.363 --> 00:03:21.412
So that error message is really nice.

56
00:03:21.412 --> 00:03:24.292
Thank you, Jest, cool.

57
00:03:27.360 --> 00:03:32.279
&gt;&gt; Kent C. Dodds: So then we have,
we move on to mock functions.

58
00:03:32.279 --> 00:03:34.356
If you want a fullest of assertions,

59
00:03:34.356 --> 00:03:36.836
there's a link at the top
of this file here.

60
00:03:36.836 --> 00:03:40.251
Find the fullest of assertions here,
so you can check out.

61
00:03:40.251 --> 00:03:45.921
It's not ginormous but
it is significant in link.

62
00:03:45.921 --> 00:03:50.473
So you probably just keep that
open to see the docs as you're

63
00:03:50.473 --> 00:03:54.127
working through things,
can be pretty handy.

64
00:03:54.127 --> 00:04:01.649
Okay, so we're gonna talk about
mock in a little bit later.

65
00:04:01.649 --> 00:04:06.993
But they are simply function that
keep track of how they are called,

66
00:04:06.993 --> 00:04:09.444
and what they are called with.

67
00:04:09.444 --> 00:04:13.932
And so we can create these mock
functions with Jest function API,

68
00:04:13.932 --> 00:04:18.256
and then when it is called,
we can use this assertion to

69
00:04:18.256 --> 00:04:22.677
times with the number of times
that it's supposed to be called.

70
00:04:22.677 --> 00:04:27.780
And then two have been called with is
another insertion, we're calling it

71
00:04:27.780 --> 00:04:33.208
abc and then this object so we can assert
that, that 's what it was called with.

72
00:04:33.208 --> 00:04:37.697
And yeah, each argument uses toBe and
that's why we're able to use

73
00:04:37.697 --> 00:04:42.204
a totally different reference or
a totally different object here.

74
00:04:42.204 --> 00:04:46.839
There's also to be greater than,
to be falsey or truthy,

75
00:04:46.839 --> 00:04:51.487
you may use that in some places
in the workshop exercises.

76
00:04:51.487 --> 00:04:56.197
And then this is a pretty handy
feature of Jest as while,

77
00:04:56.197 --> 00:05:00.322
I think this is second to
last thing I wanna show.

78
00:05:00.322 --> 00:05:04.294
For toEqual to match object and
to have been called with,

79
00:05:04.294 --> 00:05:06.629
you can have them match a schema.

80
00:05:06.629 --> 00:05:12.401
I think Jest doc referred to this as
asymmetrical matches, which I'm not sure

81
00:05:12.401 --> 00:05:18.012
I understand what that means, but
in any case we have this birthday object.

82
00:05:18.012 --> 00:05:21.615
And then we can define that as kind
of this schema object, so the day,

83
00:05:21.615 --> 00:05:24.845
I don't care what the day is,
it just needs to be a number, and

84
00:05:24.845 --> 00:05:28.793
I don't care what the month is, it just
needs to be a number, and the year.

85
00:05:28.793 --> 00:05:33.731
And then the display property, or
the meta needs to be an object, and

86
00:05:33.731 --> 00:05:39.797
that object should have a display property
that is a string that contains 1988.

87
00:05:39.797 --> 00:05:44.573
That's the only thing I care
about in this test, for example.

88
00:05:44.573 --> 00:05:48.536
And there's also array containing, object
containing, a whole bunch of others.

89
00:05:48.536 --> 00:05:52.137
They're all documented right here.

90
00:05:52.137 --> 00:05:54.979
And so then you can use
toEqual to match objects, or

91
00:05:54.979 --> 00:05:57.770
if it's a mock function
to have been called with.

92
00:05:57.770 --> 00:06:01.453
So this can be really handy, especially
if we're dealing with generated data or

93
00:06:01.453 --> 00:06:02.492
something like that.

94
00:06:02.492 --> 00:06:06.093
When you say I don't really care
what the value is specifically,

95
00:06:06.093 --> 00:06:09.838
it needs to be of this type or
it needs to be a string continuing this.

96
00:06:12.442 --> 00:06:18.286
&gt;&gt; Kent C. Dodds: Okay, then one last
thing on this mock functions thing,

97
00:06:18.286 --> 00:06:23.291
and then we'll move on to
the writing unit test.

98
00:06:23.291 --> 00:06:26.465
So a mock function has
a property called mock, and

99
00:06:26.465 --> 00:06:29.875
that has some information
about that mock function.

100
00:06:29.875 --> 00:06:34.251
One of those pieces of
information is calls property.

101
00:06:34.251 --> 00:06:36.655
And that's an array of every
single time it was called,

102
00:06:36.655 --> 00:06:39.281
that's array of the arguments for
every time it was called.

103
00:06:39.281 --> 00:06:43.177
So here this time was called
one time with these arguments.

104
00:06:43.177 --> 00:06:50.238
And so this array on first call is
gonna be an array of these arguments.

105
00:06:50.238 --> 00:06:53.694
And then if it was called a second time,
then, or sorry,

106
00:06:53.694 --> 00:06:55.506
this is the second argument.

107
00:06:55.506 --> 00:06:57.751
So we've got the first argument,
second argument, and

108
00:06:57.751 --> 00:06:59.075
we can make assertions on those.

109
00:06:59.075 --> 00:07:03.495
So sometimes if you need a much more
specific assertion on mock functions then

110
00:07:03.495 --> 00:07:05.747
you can pull out those calls yourself.

111
00:07:05.747 --> 00:07:10.649
So you may, this might be a pretty
good thing to reference later on in

112
00:07:10.649 --> 00:07:15.475
the workshop when we start getting
into some of these assertions.

113
00:07:15.475 --> 00:07:20.654
Later on we'll cover mock functions
inspires in greater depth.

114
00:07:20.654 --> 00:07:24.578
And then also may be get to use
snapshots a little bit later.

115
00:07:24.578 --> 00:07:26.917
And we'll talk about those later.

