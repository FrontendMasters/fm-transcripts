WEBVTT

1
00:00:00.020 --> 00:00:03.590
&gt;&gt; Kent C. Dodds: Let's go ahead and
keep track of when this is called so

2
00:00:03.590 --> 00:00:05.530
we can make assertions
on how it was called.

3
00:00:05.530 --> 00:00:09.671
So the first thing that
I'm gonna do is I'll say

4
00:00:09.671 --> 00:00:15.269
utils.getWinner.mock = this
object as it calls array on it.

5
00:00:15.269 --> 00:00:17.209
I'll show you,
we can do that all in one line.

6
00:00:17.209 --> 00:00:25.229
And then we'll turn this arrow function
into an arrow function with a body.

7
00:00:25.229 --> 00:00:31.257
And we'll just push on to that array
every single time it's called.

8
00:00:31.257 --> 00:00:37.679
So we'll say
utils.getWinner.mock.calls.push.

9
00:00:37.679 --> 00:00:39.679
We want to push all the arguments.

10
00:00:39.679 --> 00:00:43.599
So what I'm gonna do is we'll make args.

11
00:00:43.599 --> 00:00:48.140
And then push(args), and
then we'll return args at 1.

12
00:00:48.140 --> 00:00:51.380
There are various ways
that you could do that,

13
00:00:51.380 --> 00:00:53.720
but I kinda like the way that reads,
so great.

14
00:00:53.720 --> 00:01:00.113
So now, if we
console.log(utils.getWinner.mock.calls),

15
00:01:00.113 --> 00:01:03.205
after this thumbWar was called.

16
00:01:03.205 --> 00:01:05.269
Then we'll get that printed out.

17
00:01:05.269 --> 00:01:07.639
Awesome, so we just need to assert this.

18
00:01:07.639 --> 00:01:10.269
We could do this a couple
of different ways.

19
00:01:10.269 --> 00:01:14.323
Actually, I think in my solution,
I iterate over the calls and

20
00:01:14.323 --> 00:01:16.935
make an assertion for each one of those.

21
00:01:16.935 --> 00:01:22.341
It's just something occurred to me,
that I could actually do this,

22
00:01:22.341 --> 00:01:25.699
expect toEqual, and that indicates hey so

23
00:01:25.699 --> 00:01:30.097
it's called twice and
it's called with exactly that.

24
00:01:30.097 --> 00:01:35.730
Alternatively, actually I'll just show
you the solution for the alternative.

25
00:01:35.730 --> 00:01:37.315
I say that calls has a length two and

26
00:01:37.315 --> 00:01:39.896
every single time it's called
it's called with that.

27
00:01:39.896 --> 00:01:45.740
So either one works just as well,
gives you just as much confidence so.

28
00:01:45.740 --> 00:01:46.759
Good with that.

29
00:01:46.759 --> 00:01:48.199
&gt;&gt; Speaker 2: Kent?

30
00:01:48.199 --> 00:01:48.835
&gt;&gt; Kent C. Dodds: Yes?

31
00:01:48.835 --> 00:01:51.507
&gt;&gt; Speaker 2: So the JavaScript
on this one really throws me, so

32
00:01:51.507 --> 00:01:53.869
I wonder if you can put
some words behind so.

33
00:01:53.869 --> 00:01:58.826
So here's my question,
line 10 we're assigning utils,

34
00:01:58.826 --> 00:02:02.919
the getWinner property of
utils to be a function.

35
00:02:02.919 --> 00:02:06.864
Line 4, well not sure why-
&gt;&gt; Kent C. Dodds: Yeah, sorry,

36
00:02:06.864 --> 00:02:07.680
they're relative.

37
00:02:07.680 --> 00:02:09.569
Here let me, answer mode.

38
00:02:09.569 --> 00:02:13.765
&gt;&gt; Speaker 2: Line 14 we're assigning
getWinner to have a property to be

39
00:02:13.765 --> 00:02:17.149
a JavaScript object that
has a property of mock.

40
00:02:17.149 --> 00:02:22.731
So help me understand how getWinner can
be a function and also have a property.

41
00:02:22.731 --> 00:02:26.511
&gt;&gt; Kent C. Dodds: Yeah, so functions
are first class objects in JavaScript.

42
00:02:26.511 --> 00:02:30.598
So they can have properties and that's,

43
00:02:30.598 --> 00:02:34.697
trying to think of a good example of that.

44
00:02:34.697 --> 00:02:41.013
For example, expect is a function but
we also have those asymmetrical matrix.

45
00:02:41.013 --> 00:02:45.477
So expect.any(String) like we had in

46
00:02:45.477 --> 00:02:50.065
the,
&gt;&gt; Kent C. Dodds: Example of matching

47
00:02:50.065 --> 00:02:50.777
schema.

48
00:02:50.777 --> 00:02:53.182
So expect is a function but
it's a function that has properties.

49
00:02:53.182 --> 00:02:57.032
And you can put any number of
properties on functions that you want.

50
00:02:57.032 --> 00:02:59.852
Pretty handy feature,
I use it pretty often.

51
00:03:01.862 --> 00:03:02.582
&gt;&gt; Kent C. Dodds: Other questions?

52
00:03:06.482 --> 00:03:14.162
&gt;&gt; Kent C. Dodds: Sweet, so
let's look at this next situation.

53
00:03:14.162 --> 00:03:16.962
So what, awe man.

54
00:03:16.962 --> 00:03:21.406
I accidentally lost our, keeping track of

55
00:03:21.406 --> 00:03:25.982
the times it's called, sorry about that.

56
00:03:25.982 --> 00:03:30.137
Right, let's just pretend that
that's still part of our assertions.

57
00:03:30.137 --> 00:03:34.878
One thing that is kind of annoying about
what we have right here is having to

58
00:03:34.878 --> 00:03:39.627
keep track of the original getWinner and
then restoring that ourselves.

59
00:03:39.627 --> 00:03:44.127
And also all of this code, if we had
to do this every single time we wanted

60
00:03:44.127 --> 00:03:47.292
a mock function,
that would be kind of annoying.

61
00:03:47.292 --> 00:03:53.646
And so instead we're going to
use just.SpyOn to do this.

62
00:03:53.646 --> 00:03:58.692
So when you're implementing this
one go ahead and pull your original

63
00:03:58.692 --> 00:04:03.825
assertion over, your previous
assertion over to this because what we

64
00:04:03.825 --> 00:04:10.000
implemented is actually the same kind
of API that jest.spyOn supports.

65
00:04:10.000 --> 00:04:15.390
But other than that, yeah, try to swap
this implementation for jest.spyOn and

66
00:04:15.390 --> 00:04:19.060
yeah, and then mockRestore.

