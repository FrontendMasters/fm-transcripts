WEBVTT

1
00:00:00.000 --> 00:00:03.096
&gt;&gt; Kent C Dodds: So we're actually
gonna be writing a couple, or

2
00:00:03.096 --> 00:00:05.143
covering a couple of use cases.

3
00:00:05.143 --> 00:00:10.320
So taking a step back, what are some
of the things that we need to

4
00:00:10.320 --> 00:00:15.329
consider when we're exposing
a mechanism to delete a user?

5
00:00:15.329 --> 00:00:20.760
This is where we step back and think,
okay, what are the use cases for this?

6
00:00:20.760 --> 00:00:25.985
And then, in the spirit of TDD,
you want to implement

7
00:00:25.985 --> 00:00:32.624
as little as possible at a time to
make it so you can iterate quickly.

8
00:00:32.624 --> 00:00:37.412
So, from my perspective,
I think the first thing that

9
00:00:37.412 --> 00:00:41.992
I'd wanna do when trying to
delete a user is to verify

10
00:00:41.992 --> 00:00:46.885
that whoever is making
the request is authenticated and

11
00:00:46.885 --> 00:00:50.756
that they are capable
of deleting the user.

12
00:00:50.756 --> 00:00:57.111
That seems to me makes sense to me,
so that's where we're gonna start.

13
00:00:57.111 --> 00:01:01.510
So, oops, we'll say, deleteUser can or

14
00:01:01.510 --> 00:01:06.042
will have 403, right, access denied.

15
00:01:06.042 --> 00:01:12.525
If not made by the user, okay?

16
00:01:12.525 --> 00:01:15.186
So what do we want this to look like?

17
00:01:15.186 --> 00:01:18.849
Well, we are definitely
gonna make it a async test.

18
00:01:18.849 --> 00:01:21.470
We're gonna be doing some awaiting here.

19
00:01:21.470 --> 00:01:23.760
I'll move this thing over.

20
00:01:23.760 --> 00:01:28.858
And so, we'll say await, and then we'll

21
00:01:28.858 --> 00:01:34.955
do usersController.deleteUser(req,res).

22
00:01:34.955 --> 00:01:39.132
And because we're using our
handy dandy setup function,

23
00:01:39.132 --> 00:01:42.976
we'll have request and
response coming from setup.

24
00:01:45.057 --> 00:01:51.438
&gt;&gt; Kent C Dodds: And yeah,
if not requested by the user,

25
00:01:51.438 --> 00:01:55.197
that makes more sense.

26
00:01:55.197 --> 00:01:58.931
Okay, so
if it's not requested by the user,

27
00:01:58.931 --> 00:02:03.845
then that will mean that there
either is no request.user or

28
00:02:03.845 --> 00:02:10.432
that the request.params.id, the ID of
the user that we are trying to delete,

29
00:02:10.432 --> 00:02:14.500
doesn't match the request.user.id, okay?

30
00:02:14.500 --> 00:02:19.196
So we'll go ahead and
I'm gonna copy this mechanism,

31
00:02:19.196 --> 00:02:22.358
we have to generate some user data and

32
00:02:22.358 --> 00:02:26.765
insert that into the database
to get our test user.

33
00:02:26.765 --> 00:02:32.488
So this is the user that we
are going to try to delete.

34
00:02:32.488 --> 00:02:37.323
And then we will say
the request.params.id, or

35
00:02:37.323 --> 00:02:41.009
actually, sorry, request params,

36
00:02:41.009 --> 00:02:47.010
it's going to equal an object
that has an ID of testuser.id.

37
00:02:47.010 --> 00:02:51.337
So, this user that's in
the database has an ID and

38
00:02:51.337 --> 00:02:55.265
that's the user we're gonna try to delete.

39
00:02:55.265 --> 00:03:00.089
And then we'll have a request.user
that has an ID that's anything else,

40
00:03:00.089 --> 00:03:01.474
it doesn't matter.

41
00:03:04.400 --> 00:03:07.463
&gt;&gt; Kent C Dodds: We could
actually use generate ID here.

42
00:03:07.463 --> 00:03:14.165
Let's see, server, yeah, so
our generate, yeah, that's right.

43
00:03:14.165 --> 00:03:20.548
Sharedgenerate, so
if you're curious where these files are,

44
00:03:20.548 --> 00:03:26.113
all of your generate methods
are in shared/generate.

45
00:03:26.113 --> 00:03:30.313
So you've got user data,
post data, log in form,

46
00:03:30.313 --> 00:03:36.677
you won't be using that right now,
maybe in a little bit in generated token.

47
00:03:36.677 --> 00:03:40.529
One of those things is ID, so
rather than anything else,

48
00:03:40.529 --> 00:03:45.363
we don't really care what it is, so
I don't even wanna think about it.

49
00:03:45.363 --> 00:03:48.918
So we'll say generate.id.

50
00:03:48.918 --> 00:03:55.227
Okay, cool, so we're trying to
delete that test user's ID, and

51
00:03:55.227 --> 00:04:01.099
then we're trying to do that with
a user that has any other ID.

52
00:04:01.099 --> 00:04:04.311
And so then we try to delete the user.

53
00:04:04.311 --> 00:04:10.121
And we want to expect that the res.status

54
00:04:10.121 --> 00:04:15.101
toHaveBeenCalledTimes once) and

55
00:04:15.101 --> 00:04:22.903
expect res.status
toHaveBeenCalledWith(403)

56
00:04:24.570 --> 00:04:25.530
&gt;&gt; Kent C Dodds: Okay, and

57
00:04:25.530 --> 00:04:31.307
then also expect
res.send.toHaveBeenCalledTimes(1).

58
00:04:31.307 --> 00:04:38.151
And if you want to you can look
at how this actually will work.

59
00:04:38.151 --> 00:04:43.639
So, we'll just say res.status(403) and
then send.

60
00:04:43.639 --> 00:04:50.530
Okay, cool, so that's definitely enough
for us to be getting along with.

61
00:04:50.530 --> 00:04:54.694
I'm running the post test,

62
00:04:54.694 --> 00:05:01.466
let's run cont.users.todo, there we go.

63
00:05:01.466 --> 00:05:03.804
And it's passing, why is it passing, what?

64
00:05:03.804 --> 00:05:06.949
&gt;&gt; Speaker 2: Importing the real deal?

65
00:05:06.949 --> 00:05:08.831
&gt;&gt; Kent C Dodds: I'm sorry, what?

66
00:05:08.831 --> 00:05:09.438
&gt;&gt; Speaker 2: Is it importing

67
00:05:09.438 --> 00:05:10.583
the [CROSSTALK]
&gt;&gt; Kent C Dodds: You're right.

68
00:05:10.583 --> 00:05:14.086
Yes, thank you so much, todo.

69
00:05:14.086 --> 00:05:15.922
So thank you very much.

70
00:05:18.935 --> 00:05:20.443
&gt;&gt; Kent C Dodds: Okay, cool,
so we're getting an error.

71
00:05:20.443 --> 00:05:25.850
And the first error that we're getting
is delete user is not a function.

72
00:05:25.850 --> 00:05:28.626
Well, that makes sense,
we never defined it.

73
00:05:28.626 --> 00:05:34.205
So, we'll go here to users.todo,
we'll make an async function.

74
00:05:34.205 --> 00:05:36.675
Actually, it doesn't need to be an async
right now, so let's just leave off.

75
00:05:36.675 --> 00:05:40.509
Let's just make a function
called deleteUser and

76
00:05:40.509 --> 00:05:44.990
request a response, and
let's make sure we export that.

77
00:05:44.990 --> 00:05:49.334
And then we'll save that and
we'll get a new error.

78
00:05:49.334 --> 00:05:55.477
So, our test is kind of driving our
development, test-driven development.

79
00:05:55.477 --> 00:06:00.322
So, now with this new error we need
to make sure we call res.status.

80
00:06:00.322 --> 00:06:04.515
Okay, res.status, so we'll call that.

81
00:06:04.515 --> 00:06:06.249
Okay, new error, 403.

82
00:06:06.249 --> 00:06:07.599
Okay, 403, I can do that.

83
00:06:07.599 --> 00:06:10.248
New error send, okay, I can do that.

84
00:06:10.248 --> 00:06:11.752
Great, and it's passing.

85
00:06:11.752 --> 00:06:16.877
So that's clearly not the function that
we want at the end of all of this,

86
00:06:16.877 --> 00:06:20.333
but that's as much as
we're gonna do right now.

87
00:06:20.333 --> 00:06:25.159
And then we can move on to
writing a new test that can drive

88
00:06:25.159 --> 00:06:28.251
the next steps of our development.

89
00:06:28.251 --> 00:06:32.348
There we go.

90
00:06:32.348 --> 00:06:35.749
Okay, so let's see [COUGH] so

91
00:06:35.749 --> 00:06:40.850
another thing I might do
is to see if it sends

92
00:06:40.850 --> 00:06:45.270
a 404 if the user doesn't exist.

93
00:06:45.270 --> 00:06:50.311
So deleteUser will 404

94
00:06:50.311 --> 00:06:54.898
if user does not exist.

95
00:06:54.898 --> 00:06:59.422
This will be async, and lots of this stuff

96
00:06:59.422 --> 00:07:03.700
will be the same, so we'll copy this.

97
00:07:03.700 --> 00:07:06.989
And so when I find myself copying and
pasting text,

98
00:07:06.989 --> 00:07:10.740
sometimes that's a situation
where maybe I could extract

99
00:07:10.740 --> 00:07:14.661
some piece of that to make a new
setup function or something.

100
00:07:14.661 --> 00:07:16.141
So just something to keep in mind.

101
00:07:16.141 --> 00:07:21.233
So in this case, we don't actually need
a test user, we'll get rid of that.

102
00:07:21.233 --> 00:07:25.090
We'll generate an ID.

103
00:07:25.090 --> 00:07:29.436
And the user parameter actually
could be the same idea.

104
00:07:29.436 --> 00:07:34.492
It doesn't really matter in this case,
because we're gonna look for

105
00:07:34.492 --> 00:07:37.503
the user, it's not gonna exist anyway.

106
00:07:37.503 --> 00:07:39.396
So here we expect it to be a 404.

107
00:07:39.396 --> 00:07:46.030
Cool, we've got a failing test.

108
00:07:46.030 --> 00:07:48.796
So now we have to actually
start writing some useful code.

109
00:07:48.796 --> 00:07:53.726
We'll say, let's see, yeah.

110
00:07:53.726 --> 00:07:58.745
Yeah, so from here it looks like
we will need to get the user from

111
00:07:58.745 --> 00:08:03.989
the database, so Okay,
let's find this update user thing.

112
00:08:03.989 --> 00:08:08.791
Wait, no, no, no, rec.user,

113
00:08:08.791 --> 00:08:12.436
here we go, okay, get user.

114
00:08:12.436 --> 00:08:16.358
Okay, and now we'll need to
make this async function.

115
00:08:16.358 --> 00:08:23.527
So we're gonna get the user
from req.params.id.

116
00:08:23.527 --> 00:08:29.224
And then if that user does not exist,
or if that user exists then

117
00:08:29.224 --> 00:08:35.872
we'll send the 403 else,
&gt;&gt; Kent C Dodds: We'll do a 404.

118
00:08:37.987 --> 00:08:39.481
&gt;&gt; Kent C Dodds: Cool, okay?

119
00:08:39.481 --> 00:08:42.908
So we're getting closer,
let's think about refactoring.

120
00:08:42.908 --> 00:08:46.269
I don't really see how we can
make this any cleaner than it is.

121
00:08:46.269 --> 00:08:50.515
Potentially, as we see above,
we try to exit early and so

122
00:08:50.515 --> 00:08:55.125
the rest of our code doesn't
have to be indented any further.

123
00:08:55.125 --> 00:09:00.975
So potentially we could say if not
user and then stick this up here,

124
00:09:00.975 --> 00:09:04.956
do a return, and
then maybe that could work.

125
00:09:07.154 --> 00:09:11.382
&gt;&gt; Kent C Dodds: Well, I should turn
off that else roll, that's annoying.

126
00:09:11.382 --> 00:09:14.428
So either way would work just as well.

127
00:09:14.428 --> 00:09:19.041
This exit early strategy seems
to be working pretty well for

128
00:09:19.041 --> 00:09:23.020
up here, so
we'll just keep doing that over here.

129
00:09:23.020 --> 00:09:26.872
Okay, so
the last one will be the happy path.

130
00:09:26.872 --> 00:09:30.091
So we actually are able to delete user.

131
00:09:30.091 --> 00:09:32.858
So let's go ahead and create this.

132
00:09:32.858 --> 00:09:37.532
Delete a user, eh or

133
00:09:37.532 --> 00:09:43.682
yeah if properly requested.

134
00:09:43.682 --> 00:09:45.555
Okay so we're gonna create a test user.

135
00:09:45.555 --> 00:09:52.718
This time the user.id will be our test
user id, and then we try to delete it.

136
00:09:52.718 --> 00:09:59.011
We'll expect, so this is where we think
okay, so what do we want it to do?

137
00:09:59.011 --> 00:10:01.531
Do we wanna it to send us
JSON as a user it deleted?

138
00:10:01.531 --> 00:10:03.818
Or should we just have it send a 200?

139
00:10:03.818 --> 00:10:08.590
I think in my solution I have it send
us a JSON, but what do you all think?

140
00:10:08.590 --> 00:10:10.033
&gt;&gt; Speaker 3: A 204.

141
00:10:10.033 --> 00:10:11.458
&gt;&gt; Kent C Dodds: Send a 204?

142
00:10:11.458 --> 00:10:13.539
Isn't that successful or whatever?

143
00:10:13.539 --> 00:10:14.332
&gt;&gt; Speaker 3: Yeah.

144
00:10:14.332 --> 00:10:15.563
&gt;&gt; Kent C Dodds: Cool, let's do that.

145
00:10:17.457 --> 00:10:22.676
&gt;&gt; Kent C Dodds: 204 and then,
yeah, we don't have to worry about.

146
00:10:22.676 --> 00:10:26.560
Is there anything else that we could do to
verify that things are working properly?

147
00:10:30.200 --> 00:10:32.155
&gt;&gt; Speaker 4: Check the database for
the user.

148
00:10:32.155 --> 00:10:34.772
&gt;&gt; Kent C Dodds: Yeah,
yeah, did it actually?

149
00:10:34.772 --> 00:10:38.581
So, yeah,
did it actually delete that user?

150
00:10:38.581 --> 00:10:41.313
And we can just copy this thing.

151
00:10:41.313 --> 00:10:44.851
These are from the database.

152
00:10:44.851 --> 00:10:50.751
And in our case, to equal null I think is
what it returns, if there's no user found.

153
00:10:50.751 --> 00:10:52.833
We'll find out here in a second.

154
00:10:52.833 --> 00:10:57.489
But that'll be testuser.id.

155
00:10:57.489 --> 00:11:03.453
Okay, great, so it's just returning a 403,
that's a problem.

156
00:11:03.453 --> 00:11:10.884
So in our case, we'll say if the user.id
is equal to the req.params.id.

157
00:11:10.884 --> 00:11:15.727
So the user we're trying to delete is
the same as the user that's being deleted.

158
00:11:15.727 --> 00:11:20.402
Here let's actually negate that and
we'll stick that on there.

159
00:11:20.402 --> 00:11:25.430
Okay, good, and
now that actually is breaking

160
00:11:25.430 --> 00:11:30.593
a previous test and
our new test is still broken.

161
00:11:30.593 --> 00:11:34.681
So what I'm gonna do is I'm gonna fix
the test we're currently working on, and

162
00:11:34.681 --> 00:11:36.828
then we'll go back and fix the other one.

163
00:11:36.828 --> 00:11:41.283
And this is one of the nice things about
TDD is that you have this safety net of

164
00:11:41.283 --> 00:11:46.098
tests that ensure that you don't actually
break anything as you're adding more

165
00:11:46.098 --> 00:11:46.620
stuff.

166
00:11:46.620 --> 00:11:51.027
So here we'll say,

167
00:11:51.027 --> 00:11:55.953
it'll just be await db

168
00:11:55.953 --> 00:12:00.113
deleteUser.id.

169
00:12:00.113 --> 00:12:05.305
And with that we can,
once that's all finish we'll

170
00:12:05.305 --> 00:12:09.908
return res.status(204).send().

171
00:12:09.908 --> 00:12:14.617
And it looks like deleteUser
is still not working.

172
00:12:14.617 --> 00:12:19.716
All right because when you try to
get something that doesn't exist

173
00:12:19.716 --> 00:12:25.090
in the database instead of null
it's actually returning undefined,

174
00:12:25.090 --> 00:12:27.292
so to be undefined, there.

175
00:12:27.292 --> 00:12:32.324
Okay cool, so we've got that one,
and now we have to fix this one.

176
00:12:32.324 --> 00:12:39.164
Great, so the problem is that it's getting
called with a 204 instead of a 403.

177
00:12:39.164 --> 00:12:44.730
So it looks like this
is actually not taking,

178
00:12:44.730 --> 00:12:53.072
so 403
&gt;&gt; Kent C Dodds: I'm

179
00:12:53.072 --> 00:12:56.228
actually not sure what's going on in here,
oops.

180
00:12:56.228 --> 00:13:02.059
Cancel log user id, and req.prams.id.

181
00:13:02.059 --> 00:13:03.420
Here's a little nifty trick, so

182
00:13:03.420 --> 00:13:06.298
you see how we have, well I guess
that's okay, that's not too much.

183
00:13:06.298 --> 00:13:08.712
But if you had a bunch of tasks
that are running the same code, and

184
00:13:08.712 --> 00:13:11.509
you're adding console logs and
you're like too many console logs.

185
00:13:11.509 --> 00:13:14.248
There are a couple things you could do.

186
00:13:14.248 --> 00:13:17.782
First, we could say .only, and
it will run just this one.

187
00:13:17.782 --> 00:13:20.190
But just watch mode is pretty neat and

188
00:13:20.190 --> 00:13:23.227
if you hit w,
it will show you the watch usage.

189
00:13:23.227 --> 00:13:28.071
And one thing is you can
press 2 to filter test

190
00:13:28.071 --> 00:13:32.033
name so do 403, cool.

191
00:13:32.033 --> 00:13:34.859
So now it's just running that
one test within that test file.

192
00:13:34.859 --> 00:13:41.388
And we can see that we are getting,
interesting,

193
00:13:41.388 --> 00:13:46.060
those two actually are identical.

194
00:13:46.060 --> 00:13:49.436
That's super duper weird, so
we'll just do anything else.

195
00:13:49.436 --> 00:13:55.170
I'm not sure what's wrong with that, what?

196
00:13:55.170 --> 00:14:01.550
Well that's odd, wait,
sorry, we're on the wrong,

197
00:14:01.550 --> 00:14:05.858
so it's request.user, there we go.

198
00:14:05.858 --> 00:14:09.064
So yeah, of course the user that's in
the database with the ID that we just

199
00:14:09.064 --> 00:14:11.666
requested is gonna have the same
ID that we just requested.

200
00:14:11.666 --> 00:14:13.976
Like, clearly, okay, good.

201
00:14:13.976 --> 00:14:22.692
[SOUND]
&gt;&gt; Kent C Dodds: Great,

202
00:14:22.692 --> 00:14:25.081
okay, so we got all of our tests passing.

203
00:14:25.081 --> 00:14:27.309
Let's make sure we don't
skip the refactor step.

204
00:14:27.309 --> 00:14:29.813
So there are a couple
things that we could do.

205
00:14:29.813 --> 00:14:35.498
We could Change this to an elseif
if we wanted to or whatever.

206
00:14:35.498 --> 00:14:40.258
I think it looks okay, so we'll
probably just leave that where it is.

207
00:14:40.258 --> 00:14:48.932
Well that's TDD, anybody have questions
about test driven development, yeah?

208
00:14:48.932 --> 00:14:53.760
&gt;&gt; David: So [COUGH]
&gt;&gt; David: We try to be TDD in a UI

209
00:14:53.760 --> 00:14:57.907
context which is quite difficult,
obviously.

210
00:14:57.907 --> 00:15:00.849
And the main thing we struggle with and
I'm interested to hear

211
00:15:00.849 --> 00:15:04.084
your thoughts on this especially
in light of your testing library.

212
00:15:04.084 --> 00:15:09.186
So if it's simple DOM manipulation it's
relatively easy, because we can write

213
00:15:09.186 --> 00:15:14.303
an assertion like grab this button,
click it, and expect this thing to happen.

214
00:15:14.303 --> 00:15:14.902
&gt;&gt; Kent C Dodds: Mm-hm.
&gt;&gt; David: And

215
00:15:14.902 --> 00:15:16.851
usually we can write those pretty easily.

216
00:15:16.851 --> 00:15:21.828
When we start using like third party
libraries, like UI component libraries and

217
00:15:21.828 --> 00:15:22.350
stuff.

218
00:15:22.350 --> 00:15:25.390
Then it's like really hard for us to,

219
00:15:25.390 --> 00:15:29.858
I mean sometimes just ever but
specially ahead of time.

220
00:15:29.858 --> 00:15:33.928
No, like what APIs were gonna use to
actually trigger the behaviors were

221
00:15:33.928 --> 00:15:35.138
expecting, right?

222
00:15:35.138 --> 00:15:35.779
&gt;&gt; Kent C Dodds: Mm-hm.

223
00:15:35.779 --> 00:15:38.953
&gt;&gt; David: So I'm just wondering if you
have thoughts about that like I guess for

224
00:15:38.953 --> 00:15:39.947
UI stuff in general?

225
00:15:39.947 --> 00:15:44.552
But then particularly in the case of using
those third party libraries where the API

226
00:15:44.552 --> 00:15:46.941
is in that always like transparent right?

227
00:15:46.941 --> 00:15:51.230
&gt;&gt; Kent C Dodds: Yeah, yeah, so you're
saying that in your test you're planning

228
00:15:51.230 --> 00:15:54.691
on marking those APIs and
you're not sure how to TDD.

229
00:15:54.691 --> 00:15:57.173
Like which APIs you're gonna
call before you do so.

230
00:15:57.173 --> 00:16:00.648
&gt;&gt; David: I mean, I feel like even
use well, so given an example, right?

231
00:16:00.648 --> 00:16:04.733
Like say like we're using a boot strap
[COUGH] Like reactive bootstrap or

232
00:16:04.733 --> 00:16:06.146
something, it has a menu.

233
00:16:06.146 --> 00:16:07.722
&gt;&gt; Kent C Dodds: Mm-hm.
&gt;&gt; David: It was like, all right,

234
00:16:07.722 --> 00:16:10.449
click the second menu item and
expect this thing to happen.

235
00:16:10.449 --> 00:16:16.213
But if we like I would love to write
that assertion and then implement.

236
00:16:16.213 --> 00:16:20.086
But what we'll often find is for
like react bootstrap menus,

237
00:16:20.086 --> 00:16:23.978
it only works if you grab the a element
inside the second menu item.

238
00:16:23.978 --> 00:16:24.820
&gt;&gt; Kent C Dodds: Mm-hm.

239
00:16:24.820 --> 00:16:26.190
&gt;&gt; David: And then it'll behave, but

240
00:16:26.190 --> 00:16:30.356
if you're just trying to grab the second
menu item or the that surrounds the a or

241
00:16:30.356 --> 00:16:33.631
whatever, and you simulate a click,
then nothing happens right?

242
00:16:33.631 --> 00:16:35.998
&gt;&gt; Kent C Dodds: Mm-hm.
&gt;&gt; David: So then we`ve failing tests, and

243
00:16:35.998 --> 00:16:39.508
you don't know, is my test failing
cuz I implemented it wrong or

244
00:16:39.508 --> 00:16:41.148
just cuz my test was-
&gt;&gt; Kent C Dodds: Right.

245
00:16:41.148 --> 00:16:41.751
&gt;&gt; David: Detected right.

246
00:16:41.751 --> 00:16:44.465
&gt;&gt; Kent C Dodds: Yeah, so
it's easy to get to the red but

247
00:16:44.465 --> 00:16:49.168
getting to the green with the existing
test that you wrote is tough.

248
00:16:49.168 --> 00:16:53.931
Yeah, so I would suggest that
perhaps TDD in that scenario doesn't

249
00:16:53.931 --> 00:16:57.957
make a whole lot of sense,
in that particular scenario.

250
00:16:57.957 --> 00:17:02.658
If you don't already know what the APIs
that you're going to be hitting look

251
00:17:02.658 --> 00:17:06.479
like or how to interact with
your component from the outside,

252
00:17:06.479 --> 00:17:08.770
regardless of the implementation.

253
00:17:08.770 --> 00:17:12.829
If you're not sure how that
interaction will work,

254
00:17:12.829 --> 00:17:16.158
then it might not be a good use case for
TDD.

255
00:17:16.158 --> 00:17:19.936
Because yeah, generally with TDD,
you know exactly what,

256
00:17:19.936 --> 00:17:24.250
how you're going to interact with
that thing or at least generally.

257
00:17:24.250 --> 00:17:28.556
Yeah, so I think that's pretty
much all I can say on that.

258
00:17:28.556 --> 00:17:30.773
&gt;&gt; David: Okay,
could I ask a quick follow up on that?

259
00:17:30.773 --> 00:17:31.367
&gt;&gt; Kent C Dodds: Mh-hm.

260
00:17:31.367 --> 00:17:35.031
&gt;&gt; David: So like,
say it's a related problem.

261
00:17:35.031 --> 00:17:36.755
We can't inject, say,

262
00:17:36.755 --> 00:17:41.034
a data test ID into the A element
that we wanna click for a test.

263
00:17:41.034 --> 00:17:41.618
&gt;&gt; Kent C Dodds: Mm-hm.

264
00:17:41.618 --> 00:17:43.508
&gt;&gt; David: Because,
bootstrap won't let us, right?

265
00:17:43.508 --> 00:17:44.881
There's no, [COUGH]-
&gt;&gt; Kent C Dodds: Yeah,

266
00:17:44.881 --> 00:17:46.037
there's no mechanism for that.

267
00:17:46.037 --> 00:17:48.673
&gt;&gt; David: Right, and so
that`s like some of those helpers,

268
00:17:48.673 --> 00:17:52.801
getting it by the label text or whatever,
it's sort of a crap shoot with those.

269
00:17:52.801 --> 00:17:57.004
So I mean, I don't know if in PayPal you
guys, you probably have more control

270
00:17:57.004 --> 00:18:00.317
over the component libraries
you're using and so on, but.

271
00:18:00.317 --> 00:18:04.214
&gt;&gt; Kent C Dodds: Yeah,
no that's a totally valid point.

272
00:18:04.214 --> 00:18:07.319
So when you're interacting
with third party libraries,

273
00:18:07.319 --> 00:18:09.800
you really only have
what they exposed to you.

274
00:18:09.800 --> 00:18:13.976
And
&gt;&gt; Kent C Dodds: I'm trying not to say too

275
00:18:13.976 --> 00:18:16.875
much about the react specific stuff
cuz that's more for tomorrow.

276
00:18:16.875 --> 00:18:21.828
But I think that the best that you
could do for a situation like this

277
00:18:21.828 --> 00:18:26.690
is just to play with it first, and
see what does it expose to you,

278
00:18:26.690 --> 00:18:30.587
how do you access those properties,
or whatever?

279
00:18:30.587 --> 00:18:33.182
How do you make assertions.

280
00:18:33.182 --> 00:18:39.877
But the general principle to get out
of this might be take a step back and

281
00:18:39.877 --> 00:18:44.656
think how,
if I was a user manually testing this.

282
00:18:44.656 --> 00:18:49.483
How would I interact with this
component that I'm testing in a way

283
00:18:49.483 --> 00:18:54.065
to verify that it is working
according to my specifications?

284
00:18:54.065 --> 00:18:58.628
So that's the general principal when it
comes down to the implementing that with

285
00:18:58.628 --> 00:19:01.729
third party API, or
third party libraries or things.

286
00:19:01.729 --> 00:19:07.673
Things get a little bit more complicated
if they don't expose things for you.

287
00:19:07.673 --> 00:19:14.517
So specifically with react testing
library it has the get by label text.

288
00:19:14.517 --> 00:19:19.266
Well if the label text isn't
associated to an input.

289
00:19:19.266 --> 00:19:21.985
For example if the something
is broken there.

290
00:19:21.985 --> 00:19:26.394
That's actually a bag in the software,
and should be fixed.

291
00:19:26.394 --> 00:19:31.892
And so especially in component libraries,
if they are not accessible,

292
00:19:31.892 --> 00:19:36.305
then the library won't work very well for
them but

293
00:19:36.305 --> 00:19:39.567
that's a bug so it should be fixed anyway.

294
00:19:39.567 --> 00:19:44.824
For some situations like you mentioned,
you can't, where it doesn't make sense

295
00:19:44.824 --> 00:19:50.022
to put, like it's not a form input or
something, then you'll have data test ID.

296
00:19:50.022 --> 00:19:52.620
But you can't put that on there,
either, and

297
00:19:52.620 --> 00:19:55.949
so, in those scenarios,
I would probably file an issue and

298
00:19:55.949 --> 00:19:59.822
say, I wouldn't suggest necessarily
to put a data test attribute.

299
00:19:59.822 --> 00:20:05.386
But to maybe have lots of these will
have accessibility implications and

300
00:20:05.386 --> 00:20:10.873
those will have aria attributes, and
then you can select off of those.

301
00:20:10.873 --> 00:20:11.599
&gt;&gt; David: Thank you.

302
00:20:11.599 --> 00:20:12.610
&gt;&gt; Kent C Dodds: Yep.

303
00:20:14.221 --> 00:20:16.233
&gt;&gt; Kent C Dodds: Any other questions,
yeah?

304
00:20:16.233 --> 00:20:18.325
&gt;&gt; Speaker 3: Maybe related to that.

305
00:20:18.325 --> 00:20:23.289
You were talking earlier about how it's
not really worth I'm thinking about

306
00:20:23.289 --> 00:20:26.495
whether something is integration or
unit tests or

307
00:20:26.495 --> 00:20:29.105
sort of that's not your first concern?

308
00:20:29.105 --> 00:20:30.305
&gt;&gt; Kent C Dodds: Yeah.
&gt;&gt; Speaker 3: [INAUDIBLE]

309
00:20:30.305 --> 00:20:32.804
&gt;&gt; Kent C Dodds: Mm-hm.

310
00:20:32.804 --> 00:20:37.392
&gt;&gt; Speaker 3: As far as like when
I've been successful with TDD it's

311
00:20:37.392 --> 00:20:42.179
usually been in situations
where I actually did have like

312
00:20:42.179 --> 00:20:45.582
a pretty minimal unit that I could test.

313
00:20:45.582 --> 00:20:50.282
So maybe, I don't know it doesn't makes
sense to think about whether your test as

314
00:20:50.282 --> 00:20:52.883
a unit or
integration test in this scenario?

315
00:20:52.883 --> 00:20:54.117
&gt;&gt; Kent C Dodds: Yeah,
I think you're right.

316
00:20:54.117 --> 00:21:00.292
So like going back to David's example,
if you wanna TDD then like and

317
00:21:00.292 --> 00:21:05.308
I do think that TDD and
unit tests go better hand in hand.

318
00:21:05.308 --> 00:21:07.550
And so if you wanted to TDD that,

319
00:21:07.550 --> 00:21:12.133
you could mock it out with your
own implementation of that thing.

320
00:21:12.133 --> 00:21:15.501
And yeah, then there are the trade offs
of well, okay, since I'm mocking it,

321
00:21:15.501 --> 00:21:18.191
I need to have another test to
make sure I'm using it properly.

322
00:21:18.191 --> 00:21:22.990
And maybe that's fine, maybe this
unit has enough complexity around it,

323
00:21:22.990 --> 00:21:26.964
that it'd be kinda of nice to
slice off all the dependencies.

324
00:21:26.964 --> 00:21:30.843
So I can iterate very quickly
on the complexities here, and

325
00:21:30.843 --> 00:21:34.269
then just have one other
test to test it altogether.

326
00:21:34.269 --> 00:21:36.887
And I think that's actually
a pretty solid approach.

327
00:21:36.887 --> 00:21:38.726
So if you really wanted to do TDD,

328
00:21:38.726 --> 00:21:42.021
then maybe mocking is probably
a better approach for that.

