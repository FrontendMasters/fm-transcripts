WEBVTT

1
00:00:00.000 --> 00:00:01.634
&gt;&gt; Speaker 1: Yeah.

2
00:00:01.634 --> 00:00:05.383
&gt;&gt; Kent: We can't help but
notice things, there's something we do,

3
00:00:05.383 --> 00:00:07.625
like say you have a tasks like these.

4
00:00:07.625 --> 00:00:12.380
And it might be that there's
some dynamic aspect to this.

5
00:00:12.380 --> 00:00:16.222
And so would have a list of
properties we are expecting and

6
00:00:16.222 --> 00:00:18.952
another list of properties we aren't.

7
00:00:18.952 --> 00:00:22.522
And then have like a test factory,
essentially,

8
00:00:22.522 --> 00:00:25.840
that sort of for
reaches on those properties.

9
00:00:25.840 --> 00:00:29.742
And how I have my desk set up for
some of our projects,

10
00:00:29.742 --> 00:00:33.293
like it's very clear if something breaks,
and

11
00:00:33.293 --> 00:00:38.265
basically lifts out each of
the generated assertions from a list,

12
00:00:38.265 --> 00:00:41.493
it gives me an x next
to the one that failed.

13
00:00:41.493 --> 00:00:46.001
And I did the same things for
this and it's just presenting

14
00:00:46.001 --> 00:00:50.512
different- Is that kind of
just configuration stuff or?

15
00:00:50.512 --> 00:00:54.370
&gt;&gt; Speaker 1: I'll have to look at
specifically what things look like, but

16
00:00:54.370 --> 00:00:59.043
I'm glad that you brought this up
because that's what we're going to talk

17
00:00:59.043 --> 00:00:59.870
about next.

18
00:00:59.870 --> 00:01:06.060
This is great, so with pure functions,
this works super super well.

19
00:01:06.060 --> 00:01:11.271
So if you notice that all of this stuff
right here that's identical stuff,

20
00:01:11.271 --> 00:01:15.904
but if there was like a slit
difference and maybe that difference is

21
00:01:15.904 --> 00:01:20.951
important like it's password not allowed,
then you might not actually

22
00:01:20.951 --> 00:01:25.607
notice like up to this point,
there's still totally identical.

23
00:01:25.607 --> 00:01:30.336
And so it could be easy to miss
this key differences between this

24
00:01:30.336 --> 00:01:35.243
different assertions here, and so
one thing that I like to do is,

25
00:01:35.243 --> 00:01:39.814
exactly as David was talking about,
create a test factory.

26
00:01:39.814 --> 00:01:44.680
We'll talk about test object factories
like this that pattern themselves.

27
00:01:44.680 --> 00:01:48.206
But when we're doing
a pure function like this,

28
00:01:48.206 --> 00:01:51.914
creating a test factory is
a really good approach.

29
00:01:51.914 --> 00:01:55.626
And so that's what we're gonna do here.

30
00:01:55.626 --> 00:01:57.794
I'm actually gonna put
this in a describe block.

31
00:01:57.794 --> 00:02:04.152
This is one place where a jest, or MOCHA
supports this jest supports this, Jasmine.

32
00:02:04.152 --> 00:02:09.016
This is very common, but it's a way
of grouping similar tests together.

33
00:02:09.016 --> 00:02:14.964
And so here we'll just test the,
or describe is password allowed.

34
00:02:14.964 --> 00:02:20.406
And inside of here I'm gonna
make my allowed passwords.

35
00:02:20.406 --> 00:02:26.891
And then I'll also make
my disallowedPasswords.

36
00:02:26.891 --> 00:02:32.782
And then for each of the, actually,
let's just stick those in here.

37
00:02:32.782 --> 00:02:35.021
So we've got one allowedPassword.

38
00:02:35.021 --> 00:02:40.186
We could add more if we wanted to, but
I think we're good with what we've got.

39
00:02:40.186 --> 00:02:42.165
Let's disallow password.

40
00:02:42.165 --> 00:02:49.026
Here's another one and
here's another one, okay, cool.

41
00:02:49.026 --> 00:02:53.075
With this,
I'll say my allowed passwords for each and

42
00:02:53.075 --> 00:02:55.371
this is going to be a password.

43
00:02:57.534 --> 00:03:00.131
&gt;&gt; Speaker 1: And
we could an it block here.

44
00:03:00.131 --> 00:03:03.898
I think in my solution,
I do a test block, it and tester,

45
00:03:03.898 --> 00:03:07.598
aliases of one another, so
however you like to read it.

46
00:03:07.598 --> 00:03:10.874
But I'll say, it should be allowed.

47
00:03:10.874 --> 00:03:15.640
And actually, even better,
I can, because we're generating

48
00:03:15.640 --> 00:03:19.974
these tests on the fly I'll
make this a template later on.

49
00:03:19.974 --> 00:03:22.839
Say, password should be allowed.

50
00:03:22.839 --> 00:03:25.232
That will make my error message
a lot more descriptive.

51
00:03:25.232 --> 00:03:30.134
If there's an error then I know this
password should have been allowed but

52
00:03:30.134 --> 00:03:31.962
it's not for some reason.

53
00:03:31.962 --> 00:03:34.968
So then I'll just copy
this assertion right here.

54
00:03:34.968 --> 00:03:37.156
And we'll pass in a password.

55
00:03:37.156 --> 00:03:38.147
Expect that to be true.

56
00:03:38.147 --> 00:03:44.026
And we'll do something very similar for
the disallow passwords, yes, question?

57
00:03:44.026 --> 00:03:47.853
&gt;&gt; Speaker 3: I was going to say, because
there's a possibility of an empty string.

58
00:03:47.853 --> 00:03:49.467
I would actually wrap the.

59
00:03:49.467 --> 00:03:50.175
&gt;&gt; Kent: Good idea!

60
00:03:50.175 --> 00:03:52.455
Yeah, good suggestion.

61
00:03:52.455 --> 00:03:53.956
Put quotes around here.

62
00:03:55.954 --> 00:04:01.180
&gt;&gt; Kent: Oops, I think, and
then we'll have our disallowedPasswords,

63
00:04:01.180 --> 00:04:04.037
and we'll expect this to be false.

64
00:04:06.140 --> 00:04:07.321
&gt;&gt; Speaker 1: And that's our free factor.

65
00:04:07.321 --> 00:04:12.645
&gt;&gt; Kent: And then if one of these
were to fail, we'd say maybe

66
00:04:12.645 --> 00:04:18.574
the length has to be we remove
this entirely, there we go.

67
00:04:20.671 --> 00:04:23.574
&gt;&gt; Speaker 1: Then that's, sorry.

68
00:04:23.574 --> 00:04:27.374
That's a, how do I make this thing fail?

69
00:04:27.374 --> 00:04:31.337
&gt;&gt; Speaker 3: [INAUDIBLE] Requirement 20.

70
00:04:31.337 --> 00:04:32.290
&gt;&gt; Kent: Yeah, there we go.

71
00:04:32.290 --> 00:04:34.811
Thank you, awesome.

72
00:04:34.811 --> 00:04:38.527
So now we see is password allowed.

73
00:04:38.527 --> 00:04:43.288
This should be allowed, but apparently
something's broken to make it not.

74
00:04:43.288 --> 00:04:47.310
We can look at the assertion or
the this code block here.

75
00:04:47.310 --> 00:04:50.890
And actually in this case
it's not all that useful.

76
00:04:50.890 --> 00:04:57.054
When you're doing generated tests,
the error message will be pretty generic.

77
00:04:57.054 --> 00:05:02.190
It's pointing at a part of
code that doesn't give you any

78
00:05:02.190 --> 00:05:07.763
indication of which one of these
is the one that's breaking.

79
00:05:07.763 --> 00:05:13.780
That's why it's important to have
the title contain specific information

80
00:05:13.780 --> 00:05:20.183
about the data, so that when you see the
error title, it will at least show that.

81
00:05:20.183 --> 00:05:26.192
So you're trading off some convenience for
it a little bit.

82
00:05:26.192 --> 00:05:29.258
You gotta do a little bit more work to do
make sure the error message is useful.

83
00:05:29.258 --> 00:05:34.163
But at the end of the day, what's really
nice about this is for a really big,

84
00:05:34.163 --> 00:05:38.840
like if this were a really complicated
function, now you just put a bunch

85
00:05:38.840 --> 00:05:43.767
of these and you say, okay,
these are all passwords that are allowed.

86
00:05:43.767 --> 00:05:49.858
If we are going to now disallow some more,
then we just add another entry to this.

87
00:05:49.858 --> 00:05:52.632
And it's a lot easier to add to this test,

88
00:05:52.632 --> 00:05:57.943
also coming into this test you just
read that variable, and you're like,

89
00:05:57.943 --> 00:06:01.853
okay, I understand what What
these things are all about.

90
00:06:01.853 --> 00:06:07.126
So I'll show you a more extreme example,
and then, yeah, sorry?

91
00:06:07.126 --> 00:06:12.211
&gt;&gt; Speaker 4: Can you talk about why you
chose to put it in a describe block,

92
00:06:12.211 --> 00:06:15.716
in this case, and when you might do that.

93
00:06:15.716 --> 00:06:18.951
&gt;&gt; Kent: Yeah, there isn't a whole lot
of reason, to be perfectly honest.

94
00:06:18.951 --> 00:06:22.051
I mean,
I have this isPasswordAllowed block in, so

95
00:06:22.051 --> 00:06:24.662
it appears, kind of, in my error message.

96
00:06:24.662 --> 00:06:30.920
Alternatively, I could
say is PasswordAllowed.

97
00:06:30.920 --> 00:06:35.660
Like prefix these manually,
and then pull this out iof

98
00:06:35.660 --> 00:06:40.206
the describe block, and
that would be just as well.

99
00:06:40.206 --> 00:06:42.050
So, I'm fine either way.

100
00:06:42.050 --> 00:06:46.913
Like I said, normally I don't really like
describe blocks, so maybe I prefer this.

101
00:06:46.913 --> 00:06:52.010
But there's actually yet
something else that I might do

102
00:06:52.010 --> 00:06:57.325
if I'm gonna have Several tests
like this in my code days,

103
00:06:57.325 --> 00:07:00.372
and that is use this jest in case.

104
00:07:00.372 --> 00:07:03.767
If you are going to be using jest, sorry,

105
00:07:03.767 --> 00:07:07.465
taking a step back,
this is specific stuff.

106
00:07:07.465 --> 00:07:09.653
I love this, it is awesome.

107
00:07:09.653 --> 00:07:12.669
You have this idea of cases, so

108
00:07:12.669 --> 00:07:17.781
we would have just an array
of our password strings.

109
00:07:17.781 --> 00:07:21.394
And then, this is the title and
then your assertion.

110
00:07:21.394 --> 00:07:25.543
And then you can actually
provide the name property, and

111
00:07:25.543 --> 00:07:29.442
that will be used as part of the title for
your output.

112
00:07:29.442 --> 00:07:30.874
And so yeah, I love this.

113
00:07:30.874 --> 00:07:36.015
I should have gotten it ready cuz
I just refactored some tests in

114
00:07:36.015 --> 00:07:41.163
PayPal that leverage this pretty
heavily in a really nice way.

115
00:07:41.163 --> 00:07:45.093
Pure functions, this works really,
really well with.

116
00:07:45.093 --> 00:07:51.115
Another real world example of this is,
I have a project called RTL-CSS-JS.

117
00:07:51.115 --> 00:07:57.369
Which takes some CSS and JS styles,
it's just objects as CSS,

118
00:07:57.369 --> 00:08:03.635
and then converts that to the right
to left conversion of that.

119
00:08:03.635 --> 00:08:05.971
Pretty common tool if you're
doing internationalization.

120
00:08:05.971 --> 00:08:08.486
But this is for CSS and JS specifically.

121
00:08:08.486 --> 00:08:13.561
So the test for this, because it's
a pure function, and there's a ton

122
00:08:13.561 --> 00:08:19.586
of properties we have to manage, that's
sort of how we're doing this in this file.

123
00:08:19.586 --> 00:08:25.036
So rather than having a test for
each of all these different things,

124
00:08:25.036 --> 00:08:29.135
we just have here's our input,
and here's our output.

125
00:08:29.135 --> 00:08:32.283
And it makes it much,
really straightforward, okay.

126
00:08:32.283 --> 00:08:33.350
Padding left's gonna be padding right.

127
00:08:33.350 --> 00:08:35.161
Padding right's gonna be padding left.

128
00:08:35.161 --> 00:08:40.819
And so on and so forth, gets kind of
complicated, and by doing things this way,

129
00:08:40.819 --> 00:08:45.295
you know that all of these tests
don't have anything special or

130
00:08:45.295 --> 00:08:46.997
different about them.

131
00:08:46.997 --> 00:08:49.363
This test is operating in the same way.

132
00:08:49.363 --> 00:08:51.495
The assertions are happening
in the same way.

133
00:08:51.495 --> 00:08:53.911
The setup,
everything's happening exactly the same.

134
00:08:53.911 --> 00:08:59.431
So adding to, making changes to
this test base is a lot easier,

135
00:08:59.431 --> 00:09:02.047
and people do it all the time.

136
00:09:02.047 --> 00:09:07.558
The ones here toward the bottom were
added by a lot of different people

137
00:09:07.558 --> 00:09:12.784
who were like, I have this special
case where I had a space and

138
00:09:12.784 --> 00:09:18.034
tings blew up, so they got a new
test case for that and they fix it.

139
00:09:18.034 --> 00:09:23.058
Okay, cool, let me fix my off thing here,
it'd be six,

140
00:09:23.058 --> 00:09:27.466
because who wants a password
of 20 characters?

141
00:09:27.466 --> 00:09:32.888
Okay, cool, so
that is unit testing at its finest,

142
00:09:32.888 --> 00:09:35.860
well, at its basic, yeah.

143
00:09:35.860 --> 00:09:39.267
&gt;&gt; Speaker 5: Were you gonna talk
about where you located your tests at?

144
00:09:39.267 --> 00:09:40.261
&gt;&gt; Kent: Yeah.

145
00:09:40.261 --> 00:09:41.879
&gt;&gt; Speaker 5: Or
do you wanna do that after?

146
00:09:41.879 --> 00:09:44.303
&gt;&gt; Kent: I'll do that now, if that's cool.

147
00:09:44.303 --> 00:09:47.449
So actually David,
do you wanna just ask that so

148
00:09:47.449 --> 00:09:50.448
everybody knows what we're talking about?

149
00:09:50.448 --> 00:09:53.491
&gt;&gt; David: Yeah, so I was just
looking at the project structure and

150
00:09:53.491 --> 00:09:57.247
I noticed that you had all your tests
in folder is called underscore,

151
00:09:57.247 --> 00:09:59.610
underscore test located near the source.

152
00:09:59.610 --> 00:10:03.273
And so I was just curious where
that convention came from and

153
00:10:03.273 --> 00:10:04.968
if you could talk about it.

154
00:10:04.968 --> 00:10:08.007
&gt;&gt; Kent: Yeah, totally, so
this is a convention that just supports.

155
00:10:08.007 --> 00:10:13.943
It also supports if you want to you could
add a file right here called auth.test or

156
00:10:13.943 --> 00:10:15.002
auth.spec.

157
00:10:15.002 --> 00:10:18.401
It doesn't actually doesn't have
to have any particular name,

158
00:10:18.401 --> 00:10:22.723
it doesn't have to be the same name as the
file it's testing or anything like that,

159
00:10:22.723 --> 00:10:25.590
but there is a pattern by
default that just will match.

160
00:10:25.590 --> 00:10:28.868
So there are a couple of things to just
call out I actually don't care what

161
00:10:28.868 --> 00:10:29.477
you call it.

162
00:10:29.477 --> 00:10:33.869
You can do the dot test, or dot speck, or
you could change the patterns entirely,

163
00:10:33.869 --> 00:10:37.449
but one thing that I would recommend,
is co-locating your test.

164
00:10:37.449 --> 00:10:40.187
I've actually got a blog post about this.

165
00:10:40.187 --> 00:10:44.102
What code comments can teach
us about scaling a codebase.

166
00:10:44.102 --> 00:10:47.709
It's a terrible blog post name
cuz it doesn't give you any idea

167
00:10:47.709 --> 00:10:51.604
of what this blog post is about but
this is exactly what it's about.

168
00:10:51.604 --> 00:10:55.371
It's about co-locating your
tests where in one scenario and

169
00:10:55.371 --> 00:10:57.120
I saw this in a lot of projects.

170
00:10:57.120 --> 00:11:01.196
You would have your search directory and
then your test directory,

171
00:11:01.196 --> 00:11:03.352
and they are mirrors of each other.

172
00:11:03.352 --> 00:11:04.568
And then you come in here and
you delete this file, and

173
00:11:04.568 --> 00:11:05.283
you forget to delete the test.

174
00:11:05.283 --> 00:11:09.796
Or you add a file, and
you forget to add a test.

175
00:11:09.796 --> 00:11:10.900
You move files, and
you forget to move the test.

176
00:11:10.900 --> 00:11:14.672
It just gets to be a total nightmare.

177
00:11:14.672 --> 00:11:18.671
I've entered too many projects that were
like this, and it was really annoying.

178
00:11:18.671 --> 00:11:21.900
Because the tests and
the source get out of sync.

179
00:11:21.900 --> 00:11:26.341
And so by co-locating these
things it makes it a lot easier.

180
00:11:26.341 --> 00:11:30.258
Not only to make sure that
you're moving the test and

181
00:11:30.258 --> 00:11:32.939
keeping things in the right place.

182
00:11:32.939 --> 00:11:36.775
But also if I'm making
a change to this image file.

183
00:11:36.775 --> 00:11:38.296
I see the test right there.

184
00:11:38.296 --> 00:11:41.119
I'm like, I should probably add a test for
this change that I'm making.

185
00:11:41.119 --> 00:11:45.836
So it just makes tests have a much more
relevant position in your project, so

186
00:11:45.836 --> 00:11:48.649
that you're constantly thinking about it.

187
00:11:48.649 --> 00:11:53.651
So yeah, co-locating tests,
really, really good idea.

188
00:11:53.651 --> 00:11:58.470
And the premise of the blog post is
that we don't write code comments in

189
00:11:58.470 --> 00:12:02.810
a comments directory that's
mapped to our source directory.

190
00:12:02.810 --> 00:12:03.708
That doesn't make any sense.

191
00:12:03.708 --> 00:12:05.025
You co-locate your comments.

192
00:12:05.025 --> 00:12:09.387
It makes a lot of sense in the same
way to co-locate your tests, yeah?

193
00:12:09.387 --> 00:12:14.383
&gt;&gt; David: Make a comment that might
be public, or helpful, or both.

194
00:12:14.383 --> 00:12:18.338
When we moved to Jess, I loved
the co-location, it's fantastic for

195
00:12:18.338 --> 00:12:20.696
ergonomics, when you're developing.

196
00:12:20.696 --> 00:12:23.792
Make sure you don't
accidentally ship your tests.

197
00:12:23.792 --> 00:12:25.510
&gt;&gt; Kent: [LAUGH]
&gt;&gt; David: I almost did that.

198
00:12:25.510 --> 00:12:28.885
&gt;&gt; Kent: Yeah, yeah-
&gt;&gt; David: I didn't have them ignored

199
00:12:28.885 --> 00:12:30.496
in my one pectal.

200
00:12:30.496 --> 00:12:33.196
&gt;&gt; Kent: That's a very wise.

201
00:12:33.196 --> 00:12:34.760
&gt;&gt; David: [LAUGH] it's full of snapchats.

202
00:12:34.760 --> 00:12:36.490
&gt;&gt; Kent: Yeah, well, that's a wise idea.

203
00:12:36.490 --> 00:12:40.852
So if you're doing some sort of,
especially if you're doing code splitting,

204
00:12:40.852 --> 00:12:45.292
or dynamic imports, or something like
that, that's probably what happened.

205
00:12:45.292 --> 00:12:50.094
Make sure that your web pack isn't
going to bundle up your tests and

206
00:12:50.094 --> 00:12:52.252
snapshots and stuff, yeah?

207
00:12:52.252 --> 00:12:57.015
&gt;&gt; Speaker 7: If that's a co-locating
test when it comes to integration tests,

208
00:12:57.015 --> 00:13:01.859
cause, for example, we have tests
that operate at the page level and

209
00:13:01.859 --> 00:13:06.389
our UI projects will often have
are source code laid out by page.

210
00:13:06.389 --> 00:13:09.855
And so within there, it's like,
all right, that makes sense.

211
00:13:09.855 --> 00:13:15.865
Have an index spec that's doing
integration testing at that page level.

212
00:13:15.865 --> 00:13:18.904
But then we have cases where we want to
test stuff that actually moves across

213
00:13:18.904 --> 00:13:19.590
pages and so on.

214
00:13:19.590 --> 00:13:23.699
And it's always kind of a head-scratcher,
like where do I [CROSSTALK].

215
00:13:23.699 --> 00:13:24.880
&gt;&gt; Kent: Yeah, where do I put this?

216
00:13:24.880 --> 00:13:26.726
Yeah, that's a great question.

217
00:13:26.726 --> 00:13:28.576
I'm glad you brought it up.

218
00:13:28.576 --> 00:13:33.546
So the principle, I think, let me see
if I can find the basic principle.

219
00:13:33.546 --> 00:13:36.851
Here we go, so place files as close to
where they're relevant as possible.

220
00:13:36.851 --> 00:13:37.911
That's the principle.

221
00:13:37.911 --> 00:13:41.449
And so if it's a unit test
that's gonna be a single file.

222
00:13:41.449 --> 00:13:42.464
You put it right next to it.

223
00:13:42.464 --> 00:13:45.237
If it's an integration test
that tests several units but

224
00:13:45.237 --> 00:13:48.426
they're part of a single feature
then you can put it right there.

225
00:13:48.426 --> 00:13:51.857
In the least common parent directory or
something.

226
00:13:51.857 --> 00:13:56.949
But yeah, if it's an end to end or
integration of several pages,

227
00:13:56.949 --> 00:14:01.591
then at some point I stop caring
about least common parent.

228
00:14:01.591 --> 00:14:04.720
I'm just like, okay,
this is just gonna go at the root,

229
00:14:04.720 --> 00:14:07.277
and that's what we do in
this project as well.

230
00:14:07.277 --> 00:14:09.794
If you check out that client site test.

231
00:14:09.794 --> 00:14:13.542
So those, we have some
integrattion tests at the root of

232
00:14:13.542 --> 00:14:16.433
the source directory thats the whole app.

233
00:14:16.433 --> 00:14:21.548
And then the end to end tests are atually
in an entirely different directory because

234
00:14:21.548 --> 00:14:26.314
we have the end to end tests are covering
server and clients so its at the root.

235
00:14:26.314 --> 00:14:27.583
That's a great question.

236
00:14:27.583 --> 00:14:29.897
Any other questions, yeah.

237
00:14:29.897 --> 00:14:34.296
&gt;&gt; Speaker 8: So I guess it's pretty
common for tests and scribe and

238
00:14:34.296 --> 00:14:37.044
expect all to just be available.

239
00:14:37.044 --> 00:14:42.271
You don't have to import them or anything.

240
00:14:42.271 --> 00:14:43.100
&gt;&gt; Kent: Yeah.

241
00:14:43.100 --> 00:14:45.693
&gt;&gt; Speaker 8: What's the deal with
that and why haven't we moved on?

242
00:14:45.693 --> 00:14:47.372
&gt;&gt; Kent: [LAUGH] From globals?

243
00:14:47.372 --> 00:14:48.154
&gt;&gt; Speaker 8: Yeah.

244
00:14:48.154 --> 00:14:50.076
&gt;&gt; Kent: Yeah, so that's a good question.

245
00:14:50.076 --> 00:14:52.923
Lots of people have
raised that concern and

246
00:14:52.923 --> 00:14:57.043
prefer other frameworks that
require an import of some kind.

247
00:14:57.043 --> 00:15:00.111
&gt;&gt; Speaker 8: Do I have the option
to import [INAUDIBLE] my IDE?

248
00:15:00.111 --> 00:15:04.548
&gt;&gt; Kent: Yeah, yeah, so for the IDE help,
you can configure [INAUDIBLE] slangs or

249
00:15:04.548 --> 00:15:08.129
whatever you're working with
to treat those as globals.

250
00:15:08.129 --> 00:15:09.480
That's what I do.

251
00:15:09.480 --> 00:15:17.715
From a philisophical standpoint of these
globals from these testing stand points.

252
00:15:17.715 --> 00:15:21.253
After you've decided testing framework.

253
00:15:21.253 --> 00:15:23.704
All of our test are gonna need this.

254
00:15:23.704 --> 00:15:27.802
It doesn't make a whole
lot like I use to use AVA.

255
00:15:27.802 --> 00:15:30.119
And I loved that I imported all the stuff.

256
00:15:30.119 --> 00:15:34.222
And but I was like okay every
single test looks exactly the same.

257
00:15:34.222 --> 00:15:37.445
Then why dont we just cut the craft and
just.

258
00:15:37.445 --> 00:15:39.992
Assume that is loaded, or whatever.

259
00:15:39.992 --> 00:15:42.433
So I'm actually fine with the globals.

260
00:15:42.433 --> 00:15:43.805
But the problem with globals,

261
00:15:43.805 --> 00:15:46.826
philosophically, is it makes your
application hard to maintain.

262
00:15:46.826 --> 00:15:50.641
Gotta load this script, and then this one,
otherwise it depends on a global, and

263
00:15:50.641 --> 00:15:51.317
it's a mess.

264
00:15:51.317 --> 00:15:54.146
But we don't have any of
those problems with tests.

265
00:15:54.146 --> 00:15:56.666
We're not modifying these
describe functions,

266
00:15:56.666 --> 00:15:58.466
we're not doing any of that stuff.

267
00:15:58.466 --> 00:16:01.395
So I'm less concerned about the globals.

268
00:16:01.395 --> 00:16:06.883
As far as whether specifically which S
whether you can make it be importable

269
00:16:06.883 --> 00:16:12.906
I feel like there's a project that allows
you to import these functions and yeah.

270
00:16:12.906 --> 00:16:16.811
You could check that out.

271
00:16:16.811 --> 00:16:20.647
But for me I'm tired of importing
stuff that I'm using in every test so

272
00:16:20.647 --> 00:16:22.738
I'm find with having those globals.

273
00:16:22.738 --> 00:16:25.826
So I wouldn't make them myself though.

274
00:16:25.826 --> 00:16:30.107
If the framework didn't
already do the global thing,

275
00:16:30.107 --> 00:16:36.353
I probably would just import them cuz it
feels weird to make them myself I guess.

276
00:16:37.362 --> 00:16:38.290
&gt;&gt; Speaker 8: Good answer.

277
00:16:38.290 --> 00:16:39.664
&gt;&gt; Kent: Yeah, sure.

