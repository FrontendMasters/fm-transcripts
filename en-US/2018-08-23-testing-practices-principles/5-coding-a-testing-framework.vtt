WEBVTT

1
00:00:00.000 --> 00:00:02.859
&gt;&gt; Kent C. Dodds: All right,
let's write our testing framework.

2
00:00:02.859 --> 00:00:09.896
So if I come down here,
I'll just write it above the expect here.

3
00:00:09.896 --> 00:00:15.349
We'll have a function called test
that accepts a title and a callback.

4
00:00:15.349 --> 00:00:19.358
And because we wanna be able to run all
of our tests we're gonna put this in

5
00:00:19.358 --> 00:00:23.914
a tri-catch so that our code can continue
even if the call-back throws an error.

6
00:00:23.914 --> 00:00:29.220
So we'll call the call-back, and
then we'll just log the error.

7
00:00:29.220 --> 00:00:33.632
We'll say console error.

8
00:00:33.632 --> 00:00:38.397
And with that I want to do a little
bit more with the title, but

9
00:00:38.397 --> 00:00:44.488
we could package up our stuff into little
tests to start, so we'll say test.

10
00:00:44.488 --> 00:00:47.270
Sum adds numbers.

11
00:00:47.270 --> 00:00:49.599
We'll move these into here.

12
00:00:49.599 --> 00:00:58.311
And then test subtract, subtracts numbers?
&gt;&gt; Kent C. Dodds: This is so

13
00:00:58.311 --> 00:00:59.184
not contrived.

14
00:00:59.184 --> 00:01:04.234
And then we'll, I'm actually gonna
scope all these variables down.

15
00:01:04.234 --> 00:01:07.366
I like to be able to
look right at the test.

16
00:01:07.366 --> 00:01:09.953
I know exactly what's
going on inside of that

17
00:01:09.953 --> 00:01:13.629
test without having to look at
where variables were declared and

18
00:01:13.629 --> 00:01:16.979
what values those things might
have at this point in time.

19
00:01:16.979 --> 00:01:21.189
So keeping things isolated
within that call-back is

20
00:01:21.189 --> 00:01:24.096
something that I try to accomplish.

21
00:01:24.096 --> 00:01:24.777
Okay, so

22
00:01:24.777 --> 00:01:30.412
now if I run node 3.todo we shouldn't
have anything different from before.

23
00:01:30.412 --> 00:01:33.762
So, [COUGH] let's go ahead and

24
00:01:33.762 --> 00:01:39.264
make our error message
a little bit more useful.

25
00:01:39.264 --> 00:01:44.313
But, actually, sorry, one difference
we do have from before is if I

26
00:01:44.313 --> 00:01:49.880
were to break this subtract module,
&gt;&gt; Kent C. Dodds: Then I'm

27
00:01:49.880 --> 00:01:50.792
gonna get both errors.

28
00:01:50.792 --> 00:01:52.466
So that's good.

29
00:01:52.466 --> 00:01:56.474
Now we can run all of our
tests instead of just one.

30
00:01:56.474 --> 00:01:58.600
So hooray, hooray.

31
00:01:58.600 --> 00:02:00.915
But let's go ahead and we'll,

32
00:02:00.915 --> 00:02:05.296
if it's not broken then we don't see that,
it's passing.

33
00:02:05.296 --> 00:02:10.316
So let's go ahead and
a console.log after the callback,

34
00:02:10.316 --> 00:02:14.208
and if it's passing
then it's gonna have a,

35
00:02:14.208 --> 00:02:19.654
we'll add a little check mark
that says title right next to it.

36
00:02:19.654 --> 00:02:24.743
If it's not, then we'll add a X and
I got that in

37
00:02:24.743 --> 00:02:30.766
my clipboard here.
&gt;&gt; Kent C. Dodds: And

38
00:02:30.766 --> 00:02:34.518
with that we can run our test again, and

39
00:02:34.518 --> 00:02:40.213
we'll see that sum apparently fails and
subtract passes.

40
00:02:40.213 --> 00:02:42.869
And that's our first testing framework.

41
00:02:42.869 --> 00:02:46.140
So this is a pretty simple framework.

42
00:02:46.140 --> 00:02:51.947
It's not really much of a framework
at all honestly but it encapsulates

43
00:02:51.947 --> 00:02:57.678
the basic ideas behind testing
assertion libraries and frameworks.

44
00:02:57.678 --> 00:03:02.815
So the key takeaways here
are a test is something

45
00:03:02.815 --> 00:03:07.310
that throws an error if there is a bug,
and

46
00:03:07.310 --> 00:03:15.673
a good one is one that helps you identify
where that bug lives and how to fix it.

47
00:03:15.673 --> 00:03:19.841
A testing framework allows
you to have many tests and

48
00:03:19.841 --> 00:03:24.684
encapsulate those and
provide even better error messages.

49
00:03:24.684 --> 00:03:29.637
The testing framework we're going
to be using today is Jest, and

50
00:03:29.637 --> 00:03:31.899
its API is exactly like this.

51
00:03:31.899 --> 00:03:35.083
And so you don't have to do this one, but

52
00:03:35.083 --> 00:03:39.766
if you look at 4.js we just
remove all of our custom code and

53
00:03:39.766 --> 00:03:44.838
leave everything else as it was,
and that allows us to use Jest.

54
00:03:44.838 --> 00:03:48.164
So this is what a real testing
framework will do for you.

55
00:03:48.164 --> 00:03:52.201
It gives you a summary of the pass and
fail status of the test.

56
00:03:52.201 --> 00:03:56.323
It will give you a really
nice error message here.

57
00:03:56.323 --> 00:04:00.809
The stack trace before was this giant
huge thing where most of it wasn't

58
00:04:00.809 --> 00:04:02.241
relevant to our test.

59
00:04:02.241 --> 00:04:06.834
But the stack trace now will just show us
the stuff that is actually relevant for

60
00:04:06.834 --> 00:04:07.468
the test.

61
00:04:07.468 --> 00:04:11.143
If the failure actually happened
within our source code,

62
00:04:11.143 --> 00:04:14.604
like we're trying to access a property or
something.

63
00:04:14.604 --> 00:04:18.852
Then this becomes really, really useful
because it'll point directly to where that

64
00:04:18.852 --> 00:04:21.744
failure occurred and
give us this code frame around that.

65
00:04:21.744 --> 00:04:24.016
So, this isn't an advertisement for

66
00:04:24.016 --> 00:04:27.216
Jest even though it kind
of is because it's amazing.

67
00:04:27.216 --> 00:04:33.299
But this is more an idea of when you're
trying to pick a testing framework or

68
00:04:33.299 --> 00:04:36.015
when you're writing your test.

69
00:04:36.015 --> 00:04:40.522
You should think a lot about the error
message that people are going to see when

70
00:04:40.522 --> 00:04:41.571
things go wrong.

71
00:04:41.571 --> 00:04:47.472
And so, that's why, with Jest
creating custom expect to matters,

72
00:04:47.472 --> 00:04:52.369
so custom functions that you can call and
you can extend.

73
00:04:52.369 --> 00:04:56.633
Expect to have some of those to have
a little bit nicer error message,

74
00:04:56.633 --> 00:05:01.278
more specific to what you're trying
to write, that can be really useful.

75
00:05:01.278 --> 00:05:06.449
But the error message in tests is
really paramount to being about to fix

76
00:05:06.449 --> 00:05:11.550
bugs quickly and know what the problem
is right away so you can fix it.

77
00:05:11.550 --> 00:05:15.523
So that is what a test is.

78
00:05:15.523 --> 00:05:19.095
Did anybody expect to write
a testing framework this morning?

79
00:05:19.095 --> 00:05:21.999
[LAUGH] It's a really simple one, but

80
00:05:21.999 --> 00:05:26.789
[COUGH] that's really what
a testing framework is all about.

81
00:05:26.789 --> 00:05:32.589
Hopefully that, in some small way
demystified testing for you a little bit.

