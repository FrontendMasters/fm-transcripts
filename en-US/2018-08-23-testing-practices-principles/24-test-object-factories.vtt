WEBVTT

1
00:00:00.000 --> 00:00:03.113
&gt;&gt; Kent C. Dodds: For
each one of these tests they each need

2
00:00:03.113 --> 00:00:07.613
to have some things set up on
the request and the response.

3
00:00:07.613 --> 00:00:11.928
For our first one the request
could just be an empty object and

4
00:00:11.928 --> 00:00:13.627
that was totally fine.

5
00:00:13.627 --> 00:00:17.601
For these other ones we need
to get like a specific user or

6
00:00:17.601 --> 00:00:20.064
we need to Update a specific user.

7
00:00:20.064 --> 00:00:24.112
So we need to set up the user
property on the request.

8
00:00:24.112 --> 00:00:26.012
And there are various things.

9
00:00:26.012 --> 00:00:31.118
And then once we start getting
into setting the status to 404 and

10
00:00:31.118 --> 00:00:32.403
testing those.

11
00:00:32.403 --> 00:00:38.118
Then the response is gonna need to have
the status and the send methods on it.

12
00:00:38.118 --> 00:00:42.736
And what happens is in a bigger
application as this grows

13
00:00:42.736 --> 00:00:46.580
the request to set up for
this request object.

14
00:00:46.580 --> 00:00:49.859
You'll have the users locale and

15
00:00:49.859 --> 00:00:54.784
you'll have other
pertinant user information.

16
00:00:54.784 --> 00:00:57.824
So these request and response object,

17
00:00:57.824 --> 00:01:02.439
these fake versions of those
start to get pretty sizeable.

18
00:01:02.439 --> 00:01:07.806
And what is mostly concerning for
me is when they're almost the same

19
00:01:07.806 --> 00:01:14.036
in pretty much every way except to some
very important and subtle unique ways.

20
00:01:14.036 --> 00:01:19.066
There's something unique
about this particular request

21
00:01:19.066 --> 00:01:23.797
object that makes this
function behave differently.

22
00:01:23.797 --> 00:01:28.865
And I can't tell that when most of
the request object looks exactly the same

23
00:01:28.865 --> 00:01:33.458
as the other test so this is where
you come into test object factory.

24
00:01:33.458 --> 00:01:37.241
This pattern is also
called an object mother,

25
00:01:37.241 --> 00:01:40.833
which I think is the weirdest term for
this.

26
00:01:40.833 --> 00:01:44.455
So, that's why I call it
test object factory, but

27
00:01:44.455 --> 00:01:49.762
the idea is that you take the common
stuff, and you put it in a function, and

28
00:01:49.762 --> 00:01:55.681
you get back what you're looking for that
actually sounds like programming to me.

29
00:01:55.681 --> 00:01:58.788
So it's a pretty normal thing to do.

30
00:01:58.788 --> 00:02:04.205
So in our finished version,
we have this setup function.

31
00:02:04.205 --> 00:02:09.004
I'll just stick right here and
the set up function is responsible for

32
00:02:09.004 --> 00:02:14.131
any set up that's common to all of our
test it doesn't have to be all of them

33
00:02:14.131 --> 00:02:19.340
you can have a set up like case one and
set up case two whatever is relevant for

34
00:02:19.340 --> 00:02:24.221
your test but the general idea is,
if there are objects that you need,

35
00:02:24.221 --> 00:02:29.478
if there's some state that you need
to initialize or something like that?

36
00:02:29.478 --> 00:02:33.032
Then you could use this
setup function to do that.

37
00:02:33.032 --> 00:02:37.952
You can also do stuff like this using
before each, and let rec equal, or

38
00:02:37.952 --> 00:02:42.806
yeah, let rec, and then in the before
each, rec equals, and stuff.

39
00:02:42.806 --> 00:02:46.997
I really actually don't like using
those kinds of utilities cuz

40
00:02:46.997 --> 00:02:50.653
I think it kind of obscures
what's going on in my tests.

41
00:02:50.653 --> 00:02:55.406
I want to look at my tests and
see where these variables are coming from.

42
00:02:55.406 --> 00:02:59.507
And so we have this set-up that
will initialize a request,

43
00:02:59.507 --> 00:03:05.012
that handles all the necessary cases for
our That are common to all of our tests.

44
00:03:05.012 --> 00:03:09.521
We also have this res object that's
doing some fancy things with binds and

45
00:03:09.521 --> 00:03:11.712
stuff, cuz they express as funny.

46
00:03:11.712 --> 00:03:14.235
And then it just returns those for us.

47
00:03:14.235 --> 00:03:19.392
And so anywhere that we need our request
and response, we can use those instead.

48
00:03:19.392 --> 00:03:22.248
Here, let me format all that stuff.

49
00:03:22.248 --> 00:03:27.913
So get our rec and our res and we don't
need to do anything else for this one.

50
00:03:27.913 --> 00:03:32.432
And for this one there's
some extra on the request.

51
00:03:32.432 --> 00:03:37.182
So what we're gonna do is say {rec,
res} = setup () and

52
00:03:37.182 --> 00:03:43.279
then on the request for any extra stuff
will Just put it explicitly on there.

53
00:03:43.279 --> 00:03:47.178
And then the response
doesn't need anything extra.

54
00:03:47.178 --> 00:03:50.503
There's nothing fancy about the response.

55
00:03:50.503 --> 00:03:55.129
So it shouldn't appear in my test
if there's nothing unique to

56
00:03:55.129 --> 00:03:56.800
this test about that.

57
00:03:56.800 --> 00:03:58.559
And the same thing can be said here.

58
00:03:58.559 --> 00:04:01.747
We say rec and res equals set up.

59
00:04:01.747 --> 00:04:09.299
And then for each one of these,
I´ll do =, get rid of those things.

60
00:04:09.299 --> 00:04:14.994
And then the rest doesn´t
have anything special.

61
00:04:14.994 --> 00:04:20.417
And so now when I look at my test I say,
yes this is a normal request object But

62
00:04:20.417 --> 00:04:25.436
it has these additional special things
to handle the update user case.

63
00:04:25.436 --> 00:04:28.580
So an update user needs to have a user.

64
00:04:28.580 --> 00:04:32.631
It needs to have params and
it needs to have a body.

65
00:04:32.631 --> 00:04:37.401
Whereas if you look at the other, well
what often happens as the test phase kind

66
00:04:37.401 --> 00:04:42.172
of goes over Iterations is somebody will
come in here and they'll copy this and

67
00:04:42.172 --> 00:04:43.709
they'll just paste it.

68
00:04:43.709 --> 00:04:45.754
They'll make any of
the modifications they need.

69
00:04:45.754 --> 00:04:49.991
Let's say that we're
trying to write this test.

70
00:04:49.991 --> 00:04:51.945
Maybe this one didn't exist before.

71
00:04:51.945 --> 00:04:57.300
So we copy this and we paste it and
then we make any alterations that we need.

72
00:04:57.300 --> 00:05:00.858
Okay well I guess for this we just, yeah,

73
00:05:00.858 --> 00:05:05.340
we need params, yeah, so
we've got that already.

74
00:05:05.340 --> 00:05:09.205
So then we just keep on going
without realizing that this endpoint

75
00:05:09.205 --> 00:05:11.114
doesn't actually need a user.

76
00:05:11.114 --> 00:05:12.610
It doesn't need a body.

77
00:05:12.610 --> 00:05:16.850
And now we have some extra stuff, extra
craft in our test that isn't actually

78
00:05:16.850 --> 00:05:20.452
relevant to the test, but
people who come later think that it is.

79
00:05:20.452 --> 00:05:25.858
And so the whole process of
testing is trying to communicate

80
00:05:25.858 --> 00:05:33.227
to people who are going to be maintaining
these tests what actually is relevant.

81
00:05:33.227 --> 00:05:37.948
So that when they start making
changes they don't think,

82
00:05:37.948 --> 00:05:41.466
well if I'm going to
change the update user or

83
00:05:41.466 --> 00:05:46.465
the get user then I better not make
any changes to rec user because

84
00:05:46.465 --> 00:05:50.466
apparently there's
something important there.

85
00:05:52.165 --> 00:05:54.555
&gt;&gt; Kent C. Dodds: Okay, so actually, there
is a great question here from you, Bear.

86
00:05:54.555 --> 00:05:58.650
How much should we care if units
can be tested in isolation?

87
00:05:58.650 --> 00:06:04.307
I care nothing about your units being
tested in isolation I care about

88
00:06:04.307 --> 00:06:10.159
my application being me being confident
in shipping my application and

89
00:06:10.159 --> 00:06:16.009
so if that means that I need to slice
off all the dependencies of a units so

90
00:06:16.009 --> 00:06:21.078
I can test it as a pure unit test and
that makes me more confident

91
00:06:21.078 --> 00:06:27.249
than that's what I'm going to do but
that's like pretty rarely the case.

92
00:06:27.249 --> 00:06:32.155
In some sense, if I have a unit
that is sufficiently complex and

93
00:06:32.155 --> 00:06:37.063
maybe initializing the database
before every test just to test

94
00:06:37.063 --> 00:06:42.157
all the complexities of this unit,
if initializing the database

95
00:06:42.157 --> 00:06:47.434
like takes too much time Maybe I'll
take the complexities in that,

96
00:06:47.434 --> 00:06:51.415
I'll rip it out and
put it into a pure function, and

97
00:06:51.415 --> 00:06:56.454
then I could test that all day long and
make that be an isolation.

98
00:06:56.454 --> 00:06:57.946
That's a great way to get
the best of both worlds.

99
00:06:57.946 --> 00:07:02.793
I can get the speed of
pure actual unit tests

100
00:07:02.793 --> 00:07:07.651
without sacrificing a lot on confidence.

101
00:07:07.651 --> 00:07:12.541
So I'd have maybe one test that ensures
that this extracted, complex piece is

102
00:07:12.541 --> 00:07:17.507
being called properly, and then a whole
bunch of unit tests around that complex

103
00:07:17.507 --> 00:07:21.610
piece that's a pure function now,
makes it a lot easier to test.

104
00:07:21.610 --> 00:07:26.613
So there are definitely things and
situations where dropping down to

105
00:07:26.613 --> 00:07:31.884
a lower level of testing is optimal,
and that would be a good situation.

106
00:07:31.884 --> 00:07:36.865
You have something that right now you can
only test as kind of an integration test.

107
00:07:36.865 --> 00:07:40.246
You pull out the piece that really has
a lot of edge cases it's handling,

108
00:07:40.246 --> 00:07:43.647
you put that into its own little module
and then you can test that all out.

109
00:07:43.647 --> 00:07:48.100
So I wonder if instead of making mock
database columns we can check with data

110
00:07:48.100 --> 00:07:49.949
the function was called with.

111
00:07:49.949 --> 00:07:52.935
Yeah, actually this is a good question
perhaps with a schema assertion.

112
00:07:52.935 --> 00:07:57.755
So yeah, I was gonna show this,
decided not to, but I guess I will.

113
00:07:57.755 --> 00:08:00.734
I won't demo it.

114
00:08:00.734 --> 00:08:05.140
So what the suggestion is,
is rather than pulling all the users from

115
00:08:05.140 --> 00:08:10.012
the database and comparing the users
from the database with the test user,

116
00:08:10.012 --> 00:08:14.526
you can actually just assert that
what you get back looks like a user.

117
00:08:14.526 --> 00:08:21.528
So you could create a schema here that
is like id: expect.any(String) and

118
00:08:21.528 --> 00:08:25.846
so on and so forth and
that would be okay with me.

119
00:08:25.846 --> 00:08:26.958
I'd be fine with it.

120
00:08:26.958 --> 00:08:30.981
Especially since this is
generated data anyway.

121
00:08:30.981 --> 00:08:35.611
You do back up a little bit on
your confidence in doing that

122
00:08:35.611 --> 00:08:39.571
because what if somebody
has it off by one error.

123
00:08:39.571 --> 00:08:41.542
Now it's grabbing a different
user from the database.

124
00:08:41.542 --> 00:08:43.979
Well it passes the schema, but
it's not doing what you want.

125
00:08:43.979 --> 00:08:49.094
So just make sure that you're
considering those circumstances as well,

126
00:08:49.094 --> 00:08:54.369
but in the case of the getUsers, it's
just gonna get a whole bunch of users,

127
00:08:54.369 --> 00:08:57.024
like all the users from the database.

128
00:08:57.024 --> 00:09:02.658
You can just check all of those
match the user schema and

129
00:09:02.658 --> 00:09:07.314
probably be okay, but if it's reasonable,

130
00:09:07.314 --> 00:09:13.823
doing something that has more
confidence is probably better.

131
00:09:13.823 --> 00:09:18.357
I think that was it for
test object factories.

132
00:09:18.357 --> 00:09:23.795
I should say one thing About
this before each thing.

133
00:09:23.795 --> 00:09:26.571
And test to clean up.

134
00:09:26.571 --> 00:09:31.454
So your test, each test should be
able to be run in total isolation,

135
00:09:31.454 --> 00:09:35.994
or with any number of other tests
that are happening around it,

136
00:09:35.994 --> 00:09:40.467
even in parallel,
because that's what [INAUDIBLE] is doing.

137
00:09:40.467 --> 00:09:43.619
And so When you're talking
about databases and stuff,

138
00:09:43.619 --> 00:09:46.312
that can start to get
a little bit complicated.

139
00:09:46.312 --> 00:09:50.314
So in some situations,
you either change your tests so

140
00:09:50.314 --> 00:09:55.889
that it's cool with anything else writing
to the database at the same time.

141
00:09:55.889 --> 00:09:58.723
In other, and
that applies to client side tests as well.

142
00:09:58.723 --> 00:10:02.647
If you're doing end to end tests And
wanting to run those in parallel or

143
00:10:02.647 --> 00:10:03.386
something.

144
00:10:03.386 --> 00:10:07.905
You want your test to be able to
operate in parralel with others.

145
00:10:07.905 --> 00:10:12.921
If you can't get your database to or
your software to

146
00:10:12.921 --> 00:10:17.823
work in that way then
running them serialy is okay.

147
00:10:17.823 --> 00:10:19.697
It's just gonna take a fair amount longer.

148
00:10:19.697 --> 00:10:22.389
So just be aware of that trade-off.

149
00:10:22.389 --> 00:10:27.861
But whatever the case may be,
doing your cleanup ahead of your tests,

150
00:10:27.861 --> 00:10:33.148
rather than when your tests are over,
can often be really helpful,

151
00:10:33.148 --> 00:10:37.347
especially when it's
interacting with a database.

152
00:10:37.347 --> 00:10:41.858
Because when if you do all of your like
lets say you are creating a bunch of user

153
00:10:41.858 --> 00:10:46.177
and then you're verifying that those
users were created or something.

154
00:10:46.177 --> 00:10:49.729
When you are all done you're
going to delete all those user.

155
00:10:49.729 --> 00:10:53.475
So that now that test can setup and
cleanup by itself.

156
00:10:53.475 --> 00:10:58.614
So, the, that's a great thing to do but
if you do have a test failure,

157
00:10:58.614 --> 00:11:02.708
one of the things that's really
nice to be able to do is to

158
00:11:02.708 --> 00:11:07.091
inspect the state of the world
at the time your test failed.

159
00:11:07.091 --> 00:11:11.916
So, if you use an after each
to re-initialize the database

160
00:11:11.916 --> 00:11:16.077
every time your test runs or
clean up the database.

161
00:11:16.077 --> 00:11:18.431
What's going to happen is
your test will fail, and

162
00:11:18.431 --> 00:11:21.191
then your after each will run
it will clean up the database.

163
00:11:21.191 --> 00:11:25.544
And so now you can't inspect the database
to see what was wrong with the database.

164
00:11:25.544 --> 00:11:27.820
And so if instead you do all
the cleanup ahead of time,

165
00:11:27.820 --> 00:11:30.361
then your tests can still run
in isolation from each other.

166
00:11:30.361 --> 00:11:35.153
They just clean things up before each run,
but if something breaks then you

167
00:11:35.153 --> 00:11:39.426
can check out with the status of
the databases at the time it broke.

168
00:11:39.426 --> 00:11:44.113
That pretty much applies only when
you are learning text serially

169
00:11:44.113 --> 00:11:48.286
because things are always
knocking around and stuff, but

170
00:11:48.286 --> 00:11:53.143
especially when you're taking your
end to end task making sure that

171
00:11:53.143 --> 00:11:57.914
your cleaning things up before hand
rather than after can help your

172
00:11:57.914 --> 00:12:02.202
application be in a debunkable
state at the time it breaks.

