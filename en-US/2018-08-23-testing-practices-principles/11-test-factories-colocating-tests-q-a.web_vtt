WEBVTT

1
00:00:00.000 --> 00:00:01.561
&gt;&gt; Kent C. Dodds: Yeah.
&gt;&gt; Speaker 2: One thing I was just

2
00:00:01.561 --> 00:00:05.852
noticing [COUGH] something we do,
like say you have a test like this.

3
00:00:05.852 --> 00:00:10.654
And it might be that there's
some dynamic aspect to this,

4
00:00:10.654 --> 00:00:15.358
and so we'd have a list of
properties we are expecting and

5
00:00:15.358 --> 00:00:18.691
another list of properties we aren't.

6
00:00:18.691 --> 00:00:22.482
And then have like a test factory,
essentially,

7
00:00:22.482 --> 00:00:25.921
that sort of foreaches
on those properties.

8
00:00:25.921 --> 00:00:30.410
And I have my Jest set up for
some of our projects.

9
00:00:30.410 --> 00:00:33.343
It's very clear if something breaks, and

10
00:00:33.343 --> 00:00:38.395
it basically lists out each of
the generated assertions from in the list,

11
00:00:38.395 --> 00:00:41.850
it gives me an x next
to the one that failed.

12
00:00:41.850 --> 00:00:46.757
And I did the same thing for this,
and it's presenting differently,

13
00:00:46.757 --> 00:00:50.098
so is that kind of Jest
configuration stuff or?

14
00:00:50.098 --> 00:00:54.013
&gt;&gt; Kent C. Dodds: I'll have to look at
specifically what things look like.

15
00:00:54.013 --> 00:00:58.074
But I'm glad that you brought this up
because that's what we're gonna talk

16
00:00:58.074 --> 00:00:58.777
about next.

17
00:00:58.777 --> 00:01:00.473
So yeah, this is great.

18
00:01:00.473 --> 00:01:06.030
So with pure functions,
this works super, super well.

19
00:01:06.030 --> 00:01:11.473
So if you notice, all of this stuff
right here, that's identical stuff.

20
00:01:11.473 --> 00:01:17.045
But if there was a slight difference and
maybe that difference is important

21
00:01:17.045 --> 00:01:22.449
like isPasswordNotAllowed,
then you might not actually notice that.

22
00:01:22.449 --> 00:01:25.578
Up until this point,
they're still all totally identical.

23
00:01:25.578 --> 00:01:29.928
And so it could be easy to miss these
little key differences between these

24
00:01:29.928 --> 00:01:31.723
different insertions here.

25
00:01:31.723 --> 00:01:37.835
And so one thing that I like to do is
exactly as David was talking about,

26
00:01:37.835 --> 00:01:39.917
create a test factory.

27
00:01:39.917 --> 00:01:44.867
And we'll talk about test object
factories, the pattern itself, but

28
00:01:44.867 --> 00:01:48.003
when we're doing a pure
function like this,

29
00:01:48.003 --> 00:01:52.070
creating a test factory is
a really good approach.

30
00:01:52.070 --> 00:01:54.510
And so that's what we're gonna do here.

31
00:01:54.510 --> 00:01:57.610
I'm actually gonna put
this in a describe block.

32
00:01:57.610 --> 00:02:02.793
This is one place where a Jest or,
Mocha supports this, Jest supports this,

33
00:02:02.793 --> 00:02:08.420
Jasmine is very common, but it's a way
of grouping similar test together.

34
00:02:08.420 --> 00:02:13.320
And so here, we'll just test the or
describe isPasswordAllowed.

35
00:02:15.250 --> 00:02:19.810
And inside of here,
I'm gonna make my allowedPasswords.

36
00:02:21.900 --> 00:02:25.810
And then I'll also make
my disallowedPasswords.

37
00:02:28.380 --> 00:02:32.830
And then for each of the, actually here,
let's just stick those in here.

38
00:02:32.830 --> 00:02:34.570
So we've got one allowedPassword.

39
00:02:34.570 --> 00:02:40.013
We could add more if we wanted to but
I think we're good with what we've got,

40
00:02:40.013 --> 00:02:42.578
so that's a disallowedPassword.

41
00:02:42.578 --> 00:02:46.520
Here's another one and here's another one.

42
00:02:46.520 --> 00:02:48.400
Okay, cool.

43
00:02:48.400 --> 00:02:53.256
So, with this,
I'll save my allowedPasswords.forEach, and

44
00:02:53.256 --> 00:02:55.386
this is gonna be a password.

45
00:02:57.586 --> 00:02:59.851
&gt;&gt; Kent C. Dodds: And
we could do an it block here.

46
00:02:59.851 --> 00:03:04.922
I think in my solution, I do a test block,
it and tester, a oasis of one another.

47
00:03:04.922 --> 00:03:10.970
So however you like to read it but
I'll say it should be allowed.

48
00:03:10.970 --> 00:03:16.228
And actually even better because we're
generating these tests on the fly,

49
00:03:16.228 --> 00:03:22.160
I'll make this a template it( '${pwd}
should be allowed', ()=&gt; {}).

50
00:03:23.230 --> 00:03:26.780
That will make my error message
a lot more descriptive.

51
00:03:26.780 --> 00:03:29.670
If there's an error then I know this
password should be allowed, but

52
00:03:29.670 --> 00:03:30.640
it's not for some reason.

53
00:03:31.830 --> 00:03:37.340
So then I'll just copy this assertion
right here and we'll pass in a password.

54
00:03:37.340 --> 00:03:39.910
Expect that to be true and
we'll do something very similar for

55
00:03:39.910 --> 00:03:42.117
the disallowedPasswords.

56
00:03:42.117 --> 00:03:43.280
Yes, question.

57
00:03:43.280 --> 00:03:44.830
&gt;&gt; Speaker 3: Well,
I was gonna say because there

58
00:03:44.830 --> 00:03:49.480
was a possibility of an empty string,
I would actually wrap for the temporary.

59
00:03:49.480 --> 00:03:50.280
&gt;&gt; Kent C. Dodds: Good idea.

60
00:03:50.280 --> 00:03:52.310
Yeah, good suggestion.

61
00:03:52.310 --> 00:03:53.844
Put quotes around here.

62
00:03:58.682 --> 00:04:00.773
&gt;&gt; Kent C. Dodds: And then we'll
have our disallowedPasswords, and

63
00:04:00.773 --> 00:04:02.064
we'll expect this to be false.

64
00:04:04.756 --> 00:04:06.612
&gt;&gt; Kent C. Dodds: And
that's our free factor.

65
00:04:06.612 --> 00:04:12.136
And then if one of these were to fail,
like we'd say, I don't know,

66
00:04:12.136 --> 00:04:18.158
maybe the length has to be greater or
we remove this entirely, there we go.

67
00:04:19.858 --> 00:04:24.824
&gt;&gt; Kent C. Dodds: Then that's,
sorry, I forgot to say,

68
00:04:24.824 --> 00:04:28.234
how do we make this thing fail?

69
00:04:28.234 --> 00:04:28.818
I don't know.

70
00:04:28.818 --> 00:04:30.973
[LAUGH]
&gt;&gt; Speaker 3: Set the length requirement

71
00:04:30.973 --> 00:04:31.488
to 20.

72
00:04:31.488 --> 00:04:33.749
&gt;&gt; Kent C. Dodds: Yeah,
there we go, thank you.

73
00:04:33.749 --> 00:04:34.540
Awesome.

74
00:04:34.540 --> 00:04:38.631
So now we can see isPasswordAllowed.

75
00:04:38.631 --> 00:04:43.489
This should be allowed but apparently
something's broken to make it not.

76
00:04:43.489 --> 00:04:47.370
We can look at the assertion or
this code block here and

77
00:04:47.370 --> 00:04:50.918
actually in this case
it's not all that useful.

78
00:04:50.918 --> 00:04:56.611
When you are doing generated test,
the error message will be pretty generic.

79
00:04:56.611 --> 00:05:02.563
It's pointing at a part of code that
doesn't give you any indication of okay,

80
00:05:02.563 --> 00:05:04.102
which one of these?

81
00:05:04.102 --> 00:05:05.840
If we had a long list
of a lot of passwords,

82
00:05:05.840 --> 00:05:07.851
which one of these is
the one that's breaking.

83
00:05:07.851 --> 00:05:12.783
And that's why it's important to have
the title contain information about

84
00:05:12.783 --> 00:05:14.101
the specific data.

85
00:05:14.101 --> 00:05:19.636
So that when you see the error title,
it will always show that.

86
00:05:19.636 --> 00:05:24.005
So you're trading off some convenience for
a little bit of like,

87
00:05:24.005 --> 00:05:29.020
you gotta do a little bit more work to
make sure the error message is useful.

88
00:05:29.020 --> 00:05:33.627
But at the end of the day,
what's really nice about this is for

89
00:05:33.627 --> 00:05:38.420
a really big, like if this were
a really complicated function.

90
00:05:38.420 --> 00:05:40.864
Now you just put a bunch of these and
you say, okay,

91
00:05:40.864 --> 00:05:42.739
these are all passwords that are allowed.

92
00:05:42.739 --> 00:05:49.524
If we are going to now disallow some more,
then we just add another entry to this.

93
00:05:49.524 --> 00:05:52.179
And it's a lot easier to add to this test.

94
00:05:52.179 --> 00:05:57.007
Also coming into this test, you just
read that variable and you're like okay,

95
00:05:57.007 --> 00:05:59.669
I understand what these
things are all about.

96
00:05:59.669 --> 00:06:03.617
So that is that,
I'll show you a more extreme example and

97
00:06:03.617 --> 00:06:07.184
then,
&gt;&gt; Kent C. Dodds: Yeah, sorry.

98
00:06:07.184 --> 00:06:11.809
&gt;&gt; Speaker 4: Can you talk about why you
chose to put it in a describe block in

99
00:06:11.809 --> 00:06:14.634
this case and when you might do that?

100
00:06:14.634 --> 00:06:18.896
&gt;&gt; Kent C. Dodds: There isn't a whole
lot of reason to be perfectly honest.

101
00:06:18.896 --> 00:06:22.320
I mean, I have this
isPasswordAllowed block, and so

102
00:06:22.320 --> 00:06:24.842
it appears kind of in my error message.

103
00:06:24.842 --> 00:06:29.835
Alternatively, I could
say isPasswordAllowed,

104
00:06:29.835 --> 00:06:34.825
like prefix these manually and
then pull this out of

105
00:06:34.825 --> 00:06:39.714
the describe block and
that would be just as well.

106
00:06:39.714 --> 00:06:41.886
So I'm fine either way.

107
00:06:41.886 --> 00:06:47.041
Like I said, I normally don't really like
describe blocks so maybe I prefer this.

108
00:06:47.041 --> 00:06:51.972
But there is actually something
else that I might do if

109
00:06:51.972 --> 00:06:57.230
I'm gonna have several tests
like this in my code base and

110
00:06:57.230 --> 00:07:00.450
that is use this jest-in-case.

111
00:07:00.450 --> 00:07:04.070
So if you are gonna be using Jest,
sorry just taking a step back,

112
00:07:04.070 --> 00:07:06.320
this is tool specific stuff.

113
00:07:06.320 --> 00:07:09.680
But I love this, it is awesome.

114
00:07:09.680 --> 00:07:13.954
So you have this idea of cases.

115
00:07:13.954 --> 00:07:18.011
So we would have just an array
of our passwords strings and

116
00:07:18.011 --> 00:07:21.404
then this is the title and
then your assertion.

117
00:07:21.404 --> 00:07:24.992
And then you can actually
provide the name property and

118
00:07:24.992 --> 00:07:28.505
that will be used as part of the title for
your output.

119
00:07:28.505 --> 00:07:34.519
So yeah, I love this, I should've
gotten it ready, cuz I just refactored

120
00:07:34.519 --> 00:07:40.738
some tests in PayPal that leveraged this
pretty heavily in a really nice way.

121
00:07:40.738 --> 00:07:44.846
Pure functions, this works really,
really well with.

122
00:07:44.846 --> 00:07:50.940
Another real world example of this is I
have a project called the rtl-css-js.

123
00:07:50.940 --> 00:07:56.628
Which takes some CSS and
JS styles, just objects as CSS,

124
00:07:56.628 --> 00:08:03.398
and then converts that to
the right-to-left conversion of that.

125
00:08:03.398 --> 00:08:07.226
Pretty common tool if you're doing
internationalization, but this is for

126
00:08:07.226 --> 00:08:08.557
CSS and JS specifically.

127
00:08:08.557 --> 00:08:14.384
So the test for this, because it's a pure
function and there's a ton of properties

128
00:08:14.384 --> 00:08:19.641
that we have to manage, that's sort
of how we're doing this in this file.

129
00:08:19.641 --> 00:08:25.258
So rather than having a test for each
permutation of all these different things,

130
00:08:25.258 --> 00:08:29.233
we just have, here's our input and
here's our output.

131
00:08:29.233 --> 00:08:32.081
And it makes it much like
really straight forward.

132
00:08:32.081 --> 00:08:36.030
Okay, paddingLeft's gonna be paddingRight,
paddingRight's gonna be paddingLeft.

133
00:08:36.030 --> 00:08:39.129
And so on and so
forth gets kinda complicated.

134
00:08:39.129 --> 00:08:44.110
And by doing things this way, you know
that all of these tests don't have

135
00:08:44.110 --> 00:08:47.471
anything special or
different about them like.

136
00:08:47.471 --> 00:08:49.309
This test is operating in the same way,

137
00:08:49.309 --> 00:08:51.490
the assertions are happening
in the same way.

138
00:08:51.490 --> 00:08:53.829
The setup,
everything's happening exactly the same.

139
00:08:53.829 --> 00:08:59.182
So adding to, making changes to
this test base is a lot easier,

140
00:08:59.182 --> 00:09:01.711
and people do it all the time.

141
00:09:01.711 --> 00:09:06.520
The ones here toward the bottom were added
by a lot of different people who were just

142
00:09:06.520 --> 00:09:11.137
like, I had this special case where if
I had a space, then things blew up.

143
00:09:11.137 --> 00:09:13.901
So they add a new test case for
that and then they fix it.

144
00:09:17.996 --> 00:09:21.964
&gt;&gt; Kent C. Dodds: Okay, cool,
let me fix my off thing here to be 6,

145
00:09:21.964 --> 00:09:25.569
cuz who wants a password of 20 characters?

146
00:09:27.251 --> 00:09:33.261
&gt;&gt; Kent C. Dodds: Okay, cool, so
that is unit testing at its finest.

147
00:09:33.261 --> 00:09:35.898
Well, at its basic, yeah.

148
00:09:35.898 --> 00:09:39.036
&gt;&gt; Speaker 5: Were you gonna talk
about where you located your tests at?

149
00:09:39.036 --> 00:09:39.752
&gt;&gt; Kent C. Dodds: Yeah.

150
00:09:39.752 --> 00:09:41.713
&gt;&gt; Speaker 5: Do you
want to do that after?

151
00:09:41.713 --> 00:09:45.263
&gt;&gt; Kent C. Dodds: I'll do that now,
if that's cool.

152
00:09:45.263 --> 00:09:47.960
So yeah, actually, David,
do you want to just ask that so

153
00:09:47.960 --> 00:09:50.067
everybody knows what we're talking about?

154
00:09:50.067 --> 00:09:54.085
&gt;&gt; Speaker 5: Yeah, so I was just looking
at the project structure, and I noticed

155
00:09:54.085 --> 00:09:59.450
that you had all your tests in a folder's
called __tests, located near the source.

156
00:09:59.450 --> 00:10:01.930
And so I was just curious of
where that convention came from,

157
00:10:01.930 --> 00:10:03.930
and if you could talk about it?

158
00:10:03.930 --> 00:10:05.000
&gt;&gt; Kent C. Dodds: Yeah, totally.

159
00:10:05.000 --> 00:10:10.070
So this is a convention that just
supports, it also supports if you want to,

160
00:10:10.070 --> 00:10:14.220
you could add a file right here
called off.test or off.spec.

161
00:10:14.220 --> 00:10:17.214
It doesn't actually have to
have any particular name,

162
00:10:17.214 --> 00:10:21.554
it doesn't have to be the same name as
the file's testing or anything like that.

163
00:10:21.554 --> 00:10:25.641
But there's a pattern by
default that Jest will match.

164
00:10:25.641 --> 00:10:27.466
So there are a couple of
things that Jest call out,

165
00:10:27.466 --> 00:10:29.209
I actually don't really
care what you call it.

166
00:10:29.209 --> 00:10:32.790
You can do the dot test or dot spec or
you could change the pattern entirely.

167
00:10:32.790 --> 00:10:37.409
But one thing that I would
recommend is collocating your test.

168
00:10:37.409 --> 00:10:39.579
I've actually got a blog post about this.

169
00:10:39.579 --> 00:10:44.132
What code comments can teach
us about scaling a codebase.

170
00:10:44.132 --> 00:10:47.128
It's a terrible blog post name cuz it
doesn't give you any idea of what this

171
00:10:47.128 --> 00:10:47.947
blog post is about.

172
00:10:47.947 --> 00:10:53.338
But this is exactly what it's about,
it's about collocating your tests.

173
00:10:53.338 --> 00:10:56.638
Where in one scenario and this,
I saw this in a lot of projects,

174
00:10:56.638 --> 00:10:58.757
you would have your source directory and

175
00:10:58.757 --> 00:11:01.952
then your test directory and
they are mirrors of each other.

176
00:11:01.952 --> 00:11:04.544
And then you come in here and
you delete this file and

177
00:11:04.544 --> 00:11:08.242
you forget to delete the test or you add
a file and you forget to add a test.

178
00:11:08.242 --> 00:11:11.250
You move files and
you forget to move the test,

179
00:11:11.250 --> 00:11:13.653
it just gets to be a total nightmare.

180
00:11:13.653 --> 00:11:15.159
I've done this in too many projects or

181
00:11:15.159 --> 00:11:19.210
I've entered too many projects that were
like this and it was really annoying.

182
00:11:19.210 --> 00:11:22.048
Because the test and
the source get out of sync.

183
00:11:22.048 --> 00:11:28.450
And so by collocating these things,
it makes it a lot easier not only

184
00:11:28.450 --> 00:11:33.260
to make sure that you're moving the test
and keeping things in the right place.

185
00:11:33.260 --> 00:11:37.781
But also, if I'm making a change to this
image file, I see the test right there,

186
00:11:37.781 --> 00:11:42.254
I'm, I should probably wait out of
test for this change that I'm making.

187
00:11:42.254 --> 00:11:46.628
So it just makes test have a much more
relevant position in your projects so

188
00:11:46.628 --> 00:11:49.324
that you're constantly thinking about it.

189
00:11:49.324 --> 00:11:53.740
So yeah, collocating tests,
really, really good idea.

190
00:11:53.740 --> 00:11:58.556
And the premise of the blog post is that
[COUGH] we don't write code comments

191
00:11:58.556 --> 00:12:02.840
in a comments directory that's
mapped to our search directory.

192
00:12:02.840 --> 00:12:03.740
That doesn't make any sense.

193
00:12:03.740 --> 00:12:05.230
You collocate your comments,

194
00:12:05.230 --> 00:12:08.073
makes a lot of sense in the same
way to collocate your tests, yes.

195
00:12:08.073 --> 00:12:14.732
&gt;&gt; Speaker 6: I wanted to comment
that might be funny or helpful.

196
00:12:14.732 --> 00:12:17.620
When we moved to Jest,
I loved the collocation.

197
00:12:17.620 --> 00:12:21.930
It's fantastic for
ergonomics when you're developing.

198
00:12:21.930 --> 00:12:24.450
Make sure you don't
accidentally ship your tests.

199
00:12:24.450 --> 00:12:25.510
I almost did that.

200
00:12:25.510 --> 00:12:27.400
&gt;&gt; Kent C. Dodds: Yeah, yeah.
&gt;&gt; Speaker 6: I didn't have them ignored

201
00:12:27.400 --> 00:12:31.370
in my Webpack build.

202
00:12:31.370 --> 00:12:35.193
&gt;&gt; Kent C. Dodds: That's a very wise-
&gt;&gt; Speaker 6: [CROSSTALK] snapshots.

203
00:12:35.193 --> 00:12:36.650
&gt;&gt; Kent C. Dodds: Yeah,
yeah, that's a wise idea.

204
00:12:36.650 --> 00:12:40.570
So if you're doing some sort of,
especially if you're doing code splitting

205
00:12:40.570 --> 00:12:45.030
or dynamic imports or something like that,
that's probably what happened.

206
00:12:45.030 --> 00:12:49.940
Yeah, make sure that your Webpack
isn't gonna bundle up your tests, and

207
00:12:49.940 --> 00:12:52.089
snapshots, and stuff, yeah.

208
00:12:52.089 --> 00:12:56.871
&gt;&gt; Speaker 6: If that's a collocating test
when it comes to integration tests cuz for

209
00:12:56.871 --> 00:13:00.629
example, we have tests that
operate at the page level.

210
00:13:00.629 --> 00:13:05.242
And our UI projects will often have

211
00:13:05.242 --> 00:13:09.706
our source code laid out by page.

212
00:13:09.706 --> 00:13:12.493
And so within there it's like,
all right, that makes sense,

213
00:13:12.493 --> 00:13:15.983
have like an index spec that's doing
integration testing of that page level.

214
00:13:15.983 --> 00:13:20.508
But then we have cases where we wanna test
stuff that actually moves the crest pages

215
00:13:20.508 --> 00:13:23.329
and so on and
it's always kind of the head scratcher

216
00:13:23.329 --> 00:13:24.066
like-
&gt;&gt; Kent C. Dodds: Yeah,

217
00:13:24.066 --> 00:13:25.018
where do I put this.

218
00:13:25.018 --> 00:13:26.713
Yeah, that's a great question.

219
00:13:26.713 --> 00:13:27.668
I'm glad you brought it up.

220
00:13:27.668 --> 00:13:33.434
So the principle, let me see if
I can find the basic principle.

221
00:13:33.434 --> 00:13:34.278
Here we go.

222
00:13:34.278 --> 00:13:37.013
So place files as close to where
they're relevant as possible.

223
00:13:37.013 --> 00:13:38.010
That's the principle.

224
00:13:38.010 --> 00:13:41.034
And so if it's a unit test
that's gonna be a single file,

225
00:13:41.034 --> 00:13:42.483
you put it right next to it.

226
00:13:42.483 --> 00:13:45.805
If it's an integration test
that tests several units, but

227
00:13:45.805 --> 00:13:49.592
they're part of a single feature,
then you can put it right there,

228
00:13:49.592 --> 00:13:52.797
in that the least common
parent directory or something.

229
00:13:52.797 --> 00:13:57.535
But yeah, if it's an end-to-end or
integration of several pages,

230
00:13:57.535 --> 00:14:01.727
then at some point,
I stop caring about least common parent.

231
00:14:01.727 --> 00:14:04.529
I'm just like okay,
this is just gonna go at the root.

232
00:14:04.529 --> 00:14:06.778
And that's what we do in
this project as well,

233
00:14:06.778 --> 00:14:08.748
if you check out the client-side test.

234
00:14:08.748 --> 00:14:13.621
Or those where you have some integration
tests at the the root of the source

235
00:14:13.621 --> 00:14:17.120
directory cuz that's like the whole app.

236
00:14:17.120 --> 00:14:21.879
And then the end-to-end tests are actually
an entirely different directory because we

237
00:14:21.879 --> 00:14:26.138
have the end-to-end test are covering
server end client so it's at the root.

238
00:14:26.138 --> 00:14:27.850
So it's a great question.

239
00:14:27.850 --> 00:14:30.037
Any other questions?

240
00:14:30.037 --> 00:14:31.741
Yeah?

241
00:14:31.741 --> 00:14:36.296
&gt;&gt; Speaker 2: So I guess it's pretty
common for test and describe and

242
00:14:36.296 --> 00:14:42.744
expect all of this be available,
you don't have to import them or anything.

243
00:14:42.744 --> 00:14:45.531
What's the deal with that,
and why haven't we moved on?

244
00:14:45.531 --> 00:14:47.477
&gt;&gt; Kent C. Dodds: [LAUGH] From globals?

245
00:14:47.477 --> 00:14:48.299
&gt;&gt; Speaker 2: Yeah.

246
00:14:48.299 --> 00:14:50.093
&gt;&gt; Kent C. Dodds: Yeah, so
that's a good question.

247
00:14:50.093 --> 00:14:52.379
Lots of people have
raised that concern and

248
00:14:52.379 --> 00:14:55.694
prefer other frameworks that
require an import of some kind.

249
00:14:55.694 --> 00:14:58.668
&gt;&gt; Speaker 2: Do I have the option
to import help my IDE help?

250
00:14:58.668 --> 00:15:00.200
&gt;&gt; Kent C. Dodds: Yeah, yeah.

251
00:15:00.200 --> 00:15:05.163
So for the IDE help, you can configure
ESLint, or whatever it is that your

252
00:15:05.163 --> 00:15:10.050
IDE is working with, to treat those
as globals, that's what I do.

253
00:15:10.050 --> 00:15:14.405
From a philosophical standpoint of these
globals from these testing frameworks,

254
00:15:14.405 --> 00:15:21.550
I actually, after you've decided, okay,
well, we're using this testing framework.

255
00:15:21.550 --> 00:15:23.040
All of our tests are gonna need this.

256
00:15:24.300 --> 00:15:28.381
It doesn't make a whole lot,
I used to use AVA and I loved that,

257
00:15:28.381 --> 00:15:30.083
I imported all the stuff.

258
00:15:30.083 --> 00:15:35.032
And but I was like, okay, every single
test looks exactly the same, then why

259
00:15:35.032 --> 00:15:40.000
don't we just cut the craft and just
assume that AVA is loaded, or whatever.

260
00:15:40.000 --> 00:15:42.287
So I'm actually fine with the globals.

261
00:15:42.287 --> 00:15:44.436
The problem with globals, philosophically,

262
00:15:44.436 --> 00:15:46.591
is it makes your application
hard to maintain.

263
00:15:46.591 --> 00:15:50.390
You gotta load this script and then this
one, otherwise it depends on a global, and

264
00:15:50.390 --> 00:15:51.215
there's a mess.

265
00:15:51.215 --> 00:15:54.064
But we don't have any of
those problems with tests,

266
00:15:54.064 --> 00:15:56.991
we're not modifying these
describer it functions.

267
00:15:56.991 --> 00:16:01.331
We're not doing any of that stuff, so
I'm less concerned about the globals.

268
00:16:01.331 --> 00:16:07.154
As far as whether, specifically with Jest,
whether you can make it be importable.

269
00:16:07.154 --> 00:16:12.097
I feel like there's a project
that allows you to import

270
00:16:12.097 --> 00:16:16.939
these functions and yeah,
you could check that out.

271
00:16:16.939 --> 00:16:21.538
But for me, I'm tired of importing
stuff that I'm using in every test, so

272
00:16:21.538 --> 00:16:23.884
I'm fine with having those globals.

273
00:16:23.884 --> 00:16:25.696
So I wouldn't make them myself though.

274
00:16:25.696 --> 00:16:29.500
If the framework didn't
already do the global thing,

275
00:16:29.500 --> 00:16:35.387
I probably would just import them, cuz it
feels weird to make them myself, I guess.

276
00:16:37.302 --> 00:16:37.887
&gt;&gt; Speaker 2: Could I give some insight?

277
00:16:37.887 --> 00:16:39.664
&gt;&gt; Kent C. Dodds: Yeah, sure.

