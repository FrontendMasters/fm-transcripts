WEBVTT

1
00:00:00.147 --> 00:00:04.173
&gt;&gt; Kent C Dodds: So let's go through
the solution here, userToJSON.

2
00:00:04.173 --> 00:00:06.888
Please make sure to ask any
questions if you have any.

3
00:00:06.888 --> 00:00:10.978
So I'm going to uncomment the user here.

4
00:00:10.978 --> 00:00:17.738
And then I'm going to, let's pull in
that userToJSON function from the off.

5
00:00:17.738 --> 00:00:20.519
And we'll say userToJSON with that user.

6
00:00:20.519 --> 00:00:23.173
And we'll get the jsonUser back.

7
00:00:23.173 --> 00:00:26.677
Actually, I'm gonna start with
the console.log(jsonUser),

8
00:00:26.677 --> 00:00:29.140
just to make sure I'm
getting what I think I am.

9
00:00:29.140 --> 00:00:31.418
I stop my tests, so I'll run npm test.

10
00:00:31.418 --> 00:00:36.990
And here's a fun little trick, you can
actually add additional arguments and

11
00:00:36.990 --> 00:00:40.803
that will be the rejex for
the test that you wanna run.

12
00:00:40.803 --> 00:00:44.930
So I'll say, utils.*auth.todo, and

13
00:00:44.930 --> 00:00:50.438
that will get me running just
the one that I want, great.

14
00:00:50.438 --> 00:00:55.290
So I have, exactly what I expected to be.

15
00:00:55.290 --> 00:00:58.312
So as several of you mentioned and
noticed,

16
00:00:58.312 --> 00:01:03.061
there are actually several ways
that I could make these assertions.

17
00:01:03.061 --> 00:01:06.943
So here's a pretty basic
way that I could do this,

18
00:01:06.943 --> 00:01:09.908
I could expect the jsonUser to equal.

19
00:01:09.908 --> 00:01:14.236
And actually here we'll just copy and
paste this.

20
00:01:14.236 --> 00:01:18.460
It's my favorite way to write a test,
is copy, paste the console log error.

21
00:01:18.460 --> 00:01:19.456
I'm just joking.

22
00:01:19.456 --> 00:01:24.225
[LAUGH] But now, so the real winner
here to make sure things are working,

23
00:01:24.225 --> 00:01:28.135
is to break the source code and
make sure that it can break.

24
00:01:28.135 --> 00:01:32.250
And then to check on the error
message to make sure it's clear.

25
00:01:32.250 --> 00:01:35.687
So userToJSON exclude secured properties.

26
00:01:35.687 --> 00:01:38.715
And we expected it to look like this but
it looked like this.

27
00:01:38.715 --> 00:01:43.692
And here's the difference the received
gave me back the exp value.

28
00:01:43.692 --> 00:01:46.551
So this is one way I could
write this insertion.

29
00:01:46.551 --> 00:01:49.595
And this actually as far as I'm concerned,

30
00:01:49.595 --> 00:01:54.282
if I saw that in ci, like the test
were running in ci and something and

31
00:01:54.282 --> 00:01:58.172
I saw that, I think I'd know
exactly what was going on.

32
00:01:58.172 --> 00:02:02.106
I'd be able to fix that bug pretty easily.

33
00:02:02.106 --> 00:02:05.557
But there's something that
we could do to communicate.

34
00:02:05.557 --> 00:02:10.412
Something a little bit more to
the maintainers of this test.

35
00:02:10.412 --> 00:02:15.377
And that is, we have some duplication
between these properties and

36
00:02:15.377 --> 00:02:16.867
these properties.

37
00:02:16.867 --> 00:02:20.897
And you could communicate
in some way to say,

38
00:02:20.897 --> 00:02:26.636
it's not just happen stance that
these two things are the same.

39
00:02:26.636 --> 00:02:31.387
They're actually the fact that they're the
same is an important part we're testing.

40
00:02:31.387 --> 00:02:35.340
And so one thing that we could do,
we could make a safeUser.

41
00:02:35.340 --> 00:02:39.449
And move the safe properties
up to that safeUser.

42
00:02:39.449 --> 00:02:45.498
And then make the user be composed of the
safeUser and then these unsafe properties.

43
00:02:45.498 --> 00:02:48.310
And then we could say
that the JSON is equal to

44
00:02:48.310 --> 00:02:53.037
the safeUser.
&gt;&gt; Kent C Dodds: And

45
00:02:53.037 --> 00:02:57.149
then let's go ahead and
fix this back so our test get passing.

46
00:02:57.149 --> 00:03:02.558
So as somebody coming into this test,
I see this explicit relationship,

47
00:03:02.558 --> 00:03:06.146
that there is this concept
of a safeUser object.

48
00:03:06.146 --> 00:03:09.457
And a user is composed
of safeUser properties,

49
00:03:09.457 --> 00:03:12.365
as well as these unsafe user properties.

50
00:03:12.365 --> 00:03:16.770
And when I pass that, the for
user object to this userToJSON,

51
00:03:16.770 --> 00:03:21.190
it gives me back just the properties
that are in the safeUser.

52
00:03:21.190 --> 00:03:25.425
Did anybody fill out the feedback form,
or the elaboration, and

53
00:03:25.425 --> 00:03:30.285
have something that you learned that
you'd like to share with everybody?

54
00:03:30.285 --> 00:03:32.398
What was something that you learned?

55
00:03:32.398 --> 00:03:34.072
Yeah.
&gt;&gt; Speaker 2: I'm used to Karma,

56
00:03:34.072 --> 00:03:36.838
and we were actually considering JEST.

57
00:03:36.838 --> 00:03:39.518
There's a lot of things here that were

58
00:03:39.518 --> 00:03:40.503
missing.
&gt;&gt; Kent C Dodds: Great.

59
00:03:40.503 --> 00:03:41.143
&gt;&gt; Speaker 2: Which was kinda nice.

60
00:03:41.143 --> 00:03:43.578
&gt;&gt; Kent C Dodds: Yeah, JEST is great.

61
00:03:43.578 --> 00:03:47.720
So I've given this workshop several
times and often in the feedback

62
00:03:47.720 --> 00:03:52.018
on this first experience with JEST,
people will say JEST is amazing.

63
00:03:52.018 --> 00:03:56.487
Cuz yeah, JEST is, it is amazing so
I'm glad you like it, that's good.

64
00:03:56.487 --> 00:04:00.843
Yeah.
&gt;&gt; Peter: It's good to note that you have

65
00:04:00.843 --> 00:04:02.392
so many different ways.

66
00:04:02.392 --> 00:04:06.506
JEST gives you so many different
ways to test the shape of data.

67
00:04:06.506 --> 00:04:11.362
It's good to note that can
write your test in a way

68
00:04:11.362 --> 00:04:15.750
that communicates with other developers.

69
00:04:15.750 --> 00:04:20.625
And have an eye for that as opposed
to just trying to make the assertion

70
00:04:20.625 --> 00:04:25.289
work the way you expect it to and move on.
&gt;&gt; Kent C Dodds: Yeah, exactly Peter,

71
00:04:25.289 --> 00:04:28.785
I think that's a really
important takeaway,

72
00:04:28.785 --> 00:04:33.907
is your tests are doing more than
just passing when things are good.

73
00:04:33.907 --> 00:04:39.097
They're also giving you good error
messages when things are not good.

74
00:04:39.097 --> 00:04:42.798
Cuz that's when it actually really
matters, is when things are busted.

75
00:04:42.798 --> 00:04:45.549
You wanna fix it, and
often you're like, this thing's busted.

76
00:04:45.549 --> 00:04:47.468
We've gotta fix it really fast.

77
00:04:47.468 --> 00:04:51.523
And then also in the source
code like you said, Peter,

78
00:04:51.523 --> 00:04:55.941
trying to make it somehow
communicate the relationships.

79
00:04:55.941 --> 00:04:59.878
Now, that said, this is logic in our test.

80
00:04:59.878 --> 00:05:03.297
Sort of,
there's a tiny bit of logic going on here.

81
00:05:03.297 --> 00:05:08.287
And I would shy away
from basically rewriting

82
00:05:08.287 --> 00:05:12.233
your source code in your test code.

83
00:05:12.233 --> 00:05:15.445
That would not be a very great idea.

84
00:05:15.445 --> 00:05:20.371
Another thing that we could do
is we just copy this same stuff.

85
00:05:20.371 --> 00:05:26.553
We'd say, safeUser is equal to
that user minus those properties.

86
00:05:26.553 --> 00:05:29.388
And now, we've just copied
our source code in our test,

87
00:05:29.388 --> 00:05:31.526
that's not something that you want to do.

88
00:05:31.526 --> 00:05:36.394
But so long as the minimal amount
of logic that you're doing is

89
00:05:36.394 --> 00:05:40.901
really straightforward,
not much room for error here.

90
00:05:40.901 --> 00:05:47.344
And you can communicate the relationships
and that's a good way to go.

