WEBVTT

1
00:00:00.000 --> 00:00:03.574
&gt;&gt; Kent C. Dodds: So let's go through
the solution here, userToJSON,

2
00:00:03.574 --> 00:00:07.082
please make sure to ask any
questions if you have any.

3
00:00:07.082 --> 00:00:09.569
So I'm going to un-comment the user here.

4
00:00:09.569 --> 00:00:11.269
And then I'm going to,

5
00:00:11.269 --> 00:00:16.118
let's pull in that userToJSON
function that we want from the auth.

6
00:00:16.118 --> 00:00:21.703
And we'll say userToJSON with that user,
we'll get the jsonUser back.

7
00:00:21.703 --> 00:00:25.808
Actually, I'm gonna start with
a console.log of the jsonUser,

8
00:00:25.808 --> 00:00:29.150
just to make sure I'm
getting what I think I am.

9
00:00:29.150 --> 00:00:32.986
I stopped my test, so I'll run npm test,
and here's a fun little trick.

10
00:00:32.986 --> 00:00:36.665
You can actually add additional arguments,
and

11
00:00:36.665 --> 00:00:40.710
that will be the regex for
the test that you wanna run.

12
00:00:40.710 --> 00:00:44.258
So I'll say utils.*auth.todo, and

13
00:00:44.258 --> 00:00:48.543
that'll get me running
just the one that I want.

14
00:00:48.543 --> 00:00:54.395
Great, so
I have exactly what I expect it to be.

15
00:00:54.395 --> 00:00:57.357
So there are,
as several of you mentioned, and

16
00:00:57.357 --> 00:01:02.110
notice there are actually several ways
that I could make these assertions.

17
00:01:02.110 --> 00:01:07.960
So here's a pretty basic way that I could
do this, I could expect the jsonUser

18
00:01:07.960 --> 00:01:13.013
to equal, and actually, here,
we'll just copy and paste this.

19
00:01:13.013 --> 00:01:17.471
It's my favorite way to write a test.,
copy paste the console.log error,

20
00:01:17.471 --> 00:01:18.577
I'm just joking.

21
00:01:18.577 --> 00:01:23.552
[LAUGH] But now, so the real winner
here to make sure that things

22
00:01:23.552 --> 00:01:29.401
are working is to break the source code,
and make sure that it can break.

23
00:01:29.401 --> 00:01:32.282
And then to check on the error
message to make sure it's clear.

24
00:01:32.282 --> 00:01:35.770
So userToJSON excludes secure properties,
and

25
00:01:35.770 --> 00:01:38.350
we expected it to look like this,
but it looked like this.

26
00:01:38.350 --> 00:01:43.560
And here's the difference,
the received gave me back the EXP value.

27
00:01:43.560 --> 00:01:46.630
So this is one way I could
write this assertion.

28
00:01:46.630 --> 00:01:50.630
And this actually,
as far as I'm concerned,

29
00:01:50.630 --> 00:01:56.150
if I saw that in CI, like the tests were
running in CI or something and I saw that,

30
00:01:56.150 --> 00:02:01.614
I think I'd know exactly what was going
on, I'd be able to fix that pretty easily.

31
00:02:01.614 --> 00:02:05.329
But there's something that
we can do to communicate

32
00:02:06.760 --> 00:02:10.890
something a little bit more to
the maintainers of this test.

33
00:02:10.890 --> 00:02:15.142
And that is, we have some duplication
between these properties and

34
00:02:15.142 --> 00:02:16.418
these properties.

35
00:02:16.418 --> 00:02:20.170
And you could communicate
in some way to say,

36
00:02:20.170 --> 00:02:25.519
it's not just happenstance that
these two things are the same.

37
00:02:25.519 --> 00:02:29.954
The fact that they're the same is
an important part of what we're testing.

38
00:02:29.954 --> 00:02:35.372
And so one thing that we could do is,
we could make a safeUser,

39
00:02:35.372 --> 00:02:39.766
and move the safe properties
up to that safeUser.

40
00:02:39.766 --> 00:02:42.915
And then make the user be
composed of the safeUser, and

41
00:02:42.915 --> 00:02:44.771
then these unsafe properties.

42
00:02:44.771 --> 00:02:50.166
And then we could say that the JSON
is equal to the safeUser, oops.

43
00:02:52.462 --> 00:02:56.275
&gt;&gt; Kent C. Dodds: And let's go ahead and
fix this back, so our tests get passing.

44
00:02:56.275 --> 00:03:01.515
So as somebody coming into this test,
I see this explicit relationship.

45
00:03:01.515 --> 00:03:05.344
That there's this concept
of a safeUser object, and

46
00:03:05.344 --> 00:03:11.313
a user is composed of safe user properties
as well as these unsafe user properties.

47
00:03:11.313 --> 00:03:15.484
And when I pass the full user
object to this userToJSON,

48
00:03:15.484 --> 00:03:20.122
it gives me back just the properties
that are in the safe user.

49
00:03:20.122 --> 00:03:24.593
Did anybody fill out the feedback form,
or the elaboration, and

50
00:03:24.593 --> 00:03:29.725
have something that you learned that
you'd like to share with everybody?

51
00:03:29.725 --> 00:03:32.170
What was something that you learned, yeah?

52
00:03:32.170 --> 00:03:36.355
&gt;&gt; Speaker 2: I'm used to Karma, and
we're actually considering Jest.

53
00:03:36.355 --> 00:03:41.950
There's a lot of things here that
we're missing, which is kind of nice.

54
00:03:41.950 --> 00:03:43.476
&gt;&gt; Kent C. Dodds: Yeah,
Jest, great, that actually,

55
00:03:43.476 --> 00:03:45.360
so I've given this workshop several times.

56
00:03:45.360 --> 00:03:49.371
And often in the feedback on
this first experience with Jest,

57
00:03:49.371 --> 00:03:51.637
people will say, Jest is amazing.

58
00:03:51.637 --> 00:03:57.377
Cuz yeah, Jest is amazing, so I'm glad
that you like it, that's good, yeah?

59
00:03:57.377 --> 00:04:02.084
&gt;&gt; Peter: It's good to note that, you have
so many different ways, Jest gives you so

60
00:04:02.084 --> 00:04:05.105
many different ways to
test the shape of data.

61
00:04:05.105 --> 00:04:10.216
It's good to note that you can
write your test in a way that

62
00:04:10.216 --> 00:04:16.619
communicates with other developers,
and sort of have an eye for that.

63
00:04:16.619 --> 00:04:21.375
As opposed to just trying to make
the assertion work the way you expect it

64
00:04:21.375 --> 00:04:22.417
to and move on.

65
00:04:22.417 --> 00:04:26.456
&gt;&gt; Kent C. Dodds: Yeah, exactly, Peter, I
think that's a really important takeaway.

66
00:04:26.456 --> 00:04:32.684
Your tests are doing more than
just passing when things are good.

67
00:04:32.684 --> 00:04:37.690
They're also giving you good error
messages when things are not good.

68
00:04:37.690 --> 00:04:41.804
Cuz that's when it actually really
matters, it's when things are busted and

69
00:04:41.804 --> 00:04:42.747
you wanna fix it.

70
00:04:42.747 --> 00:04:46.179
And often, you're like, this thing's
busted, we gotta fix it really fast.

71
00:04:46.179 --> 00:04:50.463
And then also, in the source code,
like you said, Peter,

72
00:04:50.463 --> 00:04:54.759
trying to make it somehow
communicate the relationships.

73
00:04:54.759 --> 00:04:59.610
Now that said,
this is logic in our test, sort of.

74
00:04:59.610 --> 00:05:03.888
There's a tiny bit of logic going on here,
and

75
00:05:03.888 --> 00:05:11.032
I would shy away from basically rewriting
your source code in your test code.

76
00:05:11.032 --> 00:05:13.781
That would not be a very great idea,

77
00:05:13.781 --> 00:05:19.658
cuz like another thing that we could
do is, we'd just copy this same stuff.

78
00:05:19.658 --> 00:05:24.592
We'd say, safeUser is equal to that
user minus those properties, and

79
00:05:24.592 --> 00:05:27.814
now we just copied our
source code in our test.

80
00:05:27.814 --> 00:05:29.683
That's not something that you want to do.

81
00:05:29.683 --> 00:05:35.340
But so long as the minimal amount
of logic that you're doing

82
00:05:35.340 --> 00:05:41.008
is really straightforward,
not much room for error here.

83
00:05:41.008 --> 00:05:45.733
And you can communicate the relationships,

84
00:05:45.733 --> 00:05:48.845
then that's a good way to go.

