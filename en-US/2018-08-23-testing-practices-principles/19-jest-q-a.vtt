WEBVTT

1
00:00:00.000 --> 00:00:01.432
&gt;&gt; Kent C. Dodds: You have a question?

2
00:00:01.432 --> 00:00:04.097
&gt;&gt; Speaker 2: Yeah,
going back to the mocks real quick.

3
00:00:04.097 --> 00:00:09.572
Is that a situation where let's say you
have an internal API that is not yet

4
00:00:09.572 --> 00:00:11.265
ready on the back end?

5
00:00:11.265 --> 00:00:17.440
Is that a situation where out of necessity
you might wanna mock up a data endpoint?

6
00:00:17.440 --> 00:00:19.051
&gt;&gt; Kent C. Dodds: Yeah,
that's a good question.

7
00:00:19.051 --> 00:00:24.884
So yeah, do you wanna create a mock for
an API that's not ready yet?

8
00:00:24.884 --> 00:00:28.388
Well, taking a step back,
when that API is ready,

9
00:00:28.388 --> 00:00:31.413
I will want to have a mock for
it, probably.

10
00:00:31.413 --> 00:00:35.723
It kinda depends,
if you're doing an integration test that

11
00:00:35.723 --> 00:00:40.202
integrates several services together,
maybe you’ll want to

12
00:00:40.202 --> 00:00:44.946
actually make that network request
to verify things or whatever.

13
00:00:44.946 --> 00:00:48.271
You can rely on that service for
your test and stuff.

14
00:00:48.271 --> 00:00:51.960
And so in that situation, you might not
want to eventually have a mock for it.

15
00:00:51.960 --> 00:00:55.768
But if we’re talking about unit tests,
these lower level tests,

16
00:00:55.768 --> 00:00:58.972
then you probably will want
to have a mock for it anyway.

17
00:00:58.972 --> 00:01:02.970
And so I'd just train a mock for
it whether it's ready or not.

18
00:01:02.970 --> 00:01:07.499
If it's not ready yet
then in the process of development,

19
00:01:07.499 --> 00:01:10.278
it's kinda nice to have a mock API.

20
00:01:10.278 --> 00:01:12.170
Not in the context of testing but

21
00:01:12.170 --> 00:01:15.610
just in the context of being
able to develop the software.

22
00:01:15.610 --> 00:01:18.765
That's just a general good practice.

23
00:01:18.765 --> 00:01:22.963
And so if your tests are gonna
be actually hitting the API

24
00:01:22.963 --> 00:01:25.651
ultimately when it's available.

25
00:01:25.651 --> 00:01:27.913
Then you just have your
test hit that mock API.

26
00:01:27.913 --> 00:01:33.513
You'll have to spin up that mock server,
whatever, and hit those.

27
00:01:33.513 --> 00:01:37.437
But in general,
the way I think about testing,

28
00:01:37.437 --> 00:01:43.531
with the exception of maybe in stage or
something like in the CI for stage.

29
00:01:43.531 --> 00:01:48.244
You'll want to actually hit live
services and stuff like that.

30
00:01:48.244 --> 00:01:51.500
In general,
if I'm running the test on my machine,

31
00:01:51.500 --> 00:01:55.278
I want to be totally offline to
be able to run all those tests.

32
00:01:55.278 --> 00:01:58.814
And so I'm gonna have those
services on my computer anyway.

33
00:01:58.814 --> 00:02:00.205
I'm gonna fire up those services.

34
00:02:00.205 --> 00:02:03.697
So if one of those is not ready yet,
I'm gonna have a mock version of that

35
00:02:03.697 --> 00:02:06.219
service and
might test will hit that mock version.

36
00:02:06.219 --> 00:02:07.712
Just like my development process would.

37
00:02:07.712 --> 00:02:09.076
Does that make sense?

38
00:02:09.076 --> 00:02:10.027
&gt;&gt; Speaker 2: Yeah.

39
00:02:10.027 --> 00:02:14.304
&gt;&gt; Kent C. Dodds: Cool.
Cool, any other questions?

40
00:02:14.304 --> 00:02:18.716
All righty, cool.

41
00:02:18.716 --> 00:02:23.967
So let's go ahead, and what I'm gonna
do is I'm actually going to reset.

42
00:02:23.967 --> 00:02:26.711
Get sign my projects in a clean slate.

43
00:02:26.711 --> 00:02:29.686
I don't want any of my changes
to mess up anything else.

44
00:02:29.686 --> 00:02:34.306
So you don't have to do this but
I'm going to just get reset hard,

45
00:02:34.306 --> 00:02:36.840
get everything back to fresh spot.

