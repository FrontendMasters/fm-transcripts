WEBVTT

1
00:00:00.130 --> 00:00:00.818
&gt;&gt; Kent C. Dodds: You have a question?

2
00:00:00.818 --> 00:00:03.341
&gt;&gt; Speaker 2: Yeah,
going back to the mocks real quick.

3
00:00:03.341 --> 00:00:06.712
Is there a situation where let's say,

4
00:00:06.712 --> 00:00:11.931
you have an internal API that is not yet
ready in the backend?

5
00:00:11.931 --> 00:00:17.220
Is that a situation where out of
necessity you want a mockup at that end?

6
00:00:17.220 --> 00:00:19.184
&gt;&gt; Kent C. Dodds: Yeah,
that's a good question.

7
00:00:19.184 --> 00:00:24.972
So yeah, if you wanna create a mock for
an API that's not ready yet.

8
00:00:24.972 --> 00:00:30.722
Well, taking a step back,
[COUGH], when that API is ready,

9
00:00:30.722 --> 00:00:34.984
I will want to have a mock for
it, probably.

10
00:00:34.984 --> 00:00:36.083
It kind of depends.

11
00:00:36.083 --> 00:00:40.745
If you're doing an integration task that
integrates several services together,

12
00:00:40.745 --> 00:00:44.740
maybe you want to actually make that
network request to verify things,

13
00:00:44.740 --> 00:00:45.421
whatever.

14
00:00:45.421 --> 00:00:48.189
You can rely on that service for
your tests and stuff.

15
00:00:48.189 --> 00:00:53.847
And so in that situation, you might not
wanna eventually have a mock for it.

16
00:00:53.847 --> 00:00:56.778
But if we're talking about unit tests,
these lower level tests,

17
00:00:56.778 --> 00:00:59.252
then you probably will want
to have a mock for it anyway.

18
00:00:59.252 --> 00:01:02.222
And so I just create a mock for
it whether it's ready or not.

19
00:01:02.222 --> 00:01:07.242
If it's not ready yet,
then in the process of development,

20
00:01:07.242 --> 00:01:10.302
it's kind of nice to have a mock API.

21
00:01:10.302 --> 00:01:12.610
Not in the context of testing, but

22
00:01:12.610 --> 00:01:16.519
just in the context of being
able to develop the software.

23
00:01:16.519 --> 00:01:19.051
That's just a general good practice.

24
00:01:19.051 --> 00:01:23.918
And so, if you're tests are gonna be
actually hitting the API, ultimately,

25
00:01:23.918 --> 00:01:28.656
when it's available, then you'll just
have your tests hit that mock API.

26
00:01:28.656 --> 00:01:34.222
You'll have to spin up that mock server,
or whatever, and hit those.

27
00:01:34.222 --> 00:01:37.811
But in general,
the way I think about testing,

28
00:01:37.811 --> 00:01:43.734
with the exception of maybe in stage or
something, like in the CI first stage,

29
00:01:43.734 --> 00:01:48.797
you'll want to actually hit live services,
and stuff like that.

30
00:01:48.797 --> 00:01:53.533
In general, if I'm running the tests on
my machine, I want to be totally offline,

31
00:01:53.533 --> 00:01:55.444
to be able to run all those tests.

32
00:01:55.444 --> 00:01:58.630
And so I'm gonna have those
services on my computer anyway,

33
00:01:58.630 --> 00:02:00.509
I'm gonna fire up those services.

34
00:02:00.509 --> 00:02:04.810
So if one of those is not ready yet, I'm
gonna have a mock version of that service.

35
00:02:04.810 --> 00:02:08.698
And my test will hit that mock versio,
just like my development process would.

36
00:02:08.698 --> 00:02:09.981
Does that make sense?

37
00:02:09.981 --> 00:02:10.857
&gt;&gt; Speaker 2: Yeah.

38
00:02:10.857 --> 00:02:11.827
&gt;&gt; Kent C. Dodds: Cool.

39
00:02:13.449 --> 00:02:16.714
&gt;&gt; Kent C. Dodds: Cool,
any other questions?

40
00:02:16.714 --> 00:02:21.934
All righty, cool, so let's go ahead and
what I'm gonna do is I'm

41
00:02:21.934 --> 00:02:26.985
actually going to reset git, so
my project's in a clean slate.

42
00:02:26.985 --> 00:02:29.605
I don't want any of my changes
to mess up anything else.

43
00:02:29.605 --> 00:02:34.991
So you don't have to do this, but
I'm going to just git reset hard,

44
00:02:34.991 --> 00:02:37.932
get everything back to a fresh spot.

