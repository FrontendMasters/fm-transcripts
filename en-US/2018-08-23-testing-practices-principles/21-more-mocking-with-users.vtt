WEBVTT

1
00:00:00.000 --> 00:00:04.579
&gt;&gt; Kent Dodds: Okay, so with that we
can make a more specific assertion.

2
00:00:04.579 --> 00:00:09.767
Yeah, I'll just copy over the code and
then we can talk about it.

3
00:00:09.767 --> 00:00:14.656
Okay, now, we're looking.
&gt;&gt; Kent Dodds: [SOUND] And

4
00:00:14.656 --> 00:00:20.746
actually let's pull this thing into ms.
&gt;&gt; Kent Dodds: Okay,

5
00:00:20.746 --> 00:00:26.421
man.
&gt;&gt; Kent Dodds: [SOUND] Okay,

6
00:00:26.421 --> 00:00:30.502
pull this back, get this back.

7
00:00:33.340 --> 00:00:36.002
&gt;&gt; Kent Dodds: Okay, there we go.

8
00:00:36.002 --> 00:00:40.968
And we'll also need our database.

9
00:00:43.323 --> 00:00:46.544
&gt;&gt; Kent Dodds: Database, actually let's

10
00:00:46.544 --> 00:00:52.549
put all that stuff in.
&gt;&gt; Kent Dodds: Okay, cool.

11
00:00:52.549 --> 00:00:56.797
Now, let me explain what's going on,

12
00:00:56.797 --> 00:01:00.654
on all the stuff we did
to make this happen.

13
00:01:00.654 --> 00:01:05.098
Okay, so we're still just creating
these fake versions of requests and

14
00:01:05.098 --> 00:01:06.228
response objects.

15
00:01:06.228 --> 00:01:09.091
We're still validating
as being called once.

16
00:01:09.091 --> 00:01:13.761
And then we're getting the first call,
the first argument of the first call.

17
00:01:13.761 --> 00:01:18.530
So in our case, so this is the first and
only call and this is the first argument.

18
00:01:18.530 --> 00:01:20.630
So we're getting that users object.

19
00:01:20.630 --> 00:01:23.220
We're pointing users
off of that object and

20
00:01:23.220 --> 00:01:26.651
then we're verifying that
the length is greater than zero.

21
00:01:26.651 --> 00:01:30.921
So we don't really care how big it is
just that there are users in there and

22
00:01:30.921 --> 00:01:32.741
we're getting some users back.

23
00:01:32.741 --> 00:01:35.891
And then we're gonna go through,
and that's just like,

24
00:01:35.891 --> 00:01:39.812
before my I do my next assertion,
let's just make sure things are set.

25
00:01:39.812 --> 00:01:42.650
We don't even need that
assertion necessarily

26
00:01:42.650 --> 00:01:45.890
because we're kinda covered with this one.

27
00:01:45.890 --> 00:01:49.490
So yeah, you can have
an insertion like that or not.

28
00:01:49.490 --> 00:01:54.080
It's kind of, there's no real
science behind that, that piece.

29
00:01:54.080 --> 00:01:58.400
But yeah, that will just signal
a problem earlier on that,

30
00:01:58.400 --> 00:02:03.477
this one is going to fail because
there aren't any users at all anyway.

31
00:02:03.477 --> 00:02:04.129
So anyway,

32
00:02:04.129 --> 00:02:09.179
here we're gonna actually get the users
that are actually in the database,

33
00:02:09.179 --> 00:02:14.310
and compare those to the users that we got
from this API, or from this end point,

34
00:02:14.310 --> 00:02:19.280
this method that's supposed to give us
the users that are in the database.

35
00:02:19.280 --> 00:02:24.251
And so I created this little function
safeUser that just removes salt and

36
00:02:24.251 --> 00:02:27.411
the hash Just to make this
a little bit cleaner.

37
00:02:27.411 --> 00:02:32.355
So the users we get back should be
the same as the actual users minus their

38
00:02:32.355 --> 00:02:33.261
salt and hash.

