WEBVTT

1
00:00:00.100 --> 00:00:03.892
&gt;&gt; Kent: Let's make our assertion
much more assertive I guess?

2
00:00:03.892 --> 00:00:04.653
Does that make any sense?

3
00:00:04.653 --> 00:00:09.827
Yeah, okay, so
this is the monkey-patching solution.

4
00:00:09.827 --> 00:00:12.719
We're basically going
to take the utils and

5
00:00:12.719 --> 00:00:16.863
swap out the getWinner function
before we call this thumbwar so

6
00:00:16.863 --> 00:00:21.320
that thumbwar is calling R and
our version of that function.

7
00:00:21.320 --> 00:00:28.421
So import oops,
import * as utils from '../utils'.

8
00:00:28.421 --> 00:00:33.894
And then here we'll say
utils.getWinner = {p1,

9
00:00:33.894 --> 00:00:38.880
p2}, and of course, always returns player2

10
00:00:38.880 --> 00:00:43.744
cuz let's be honest in
a thumbwar between me and

11
00:00:43.744 --> 00:00:47.406
Ken, it's gonna be me every time.

12
00:00:47.406 --> 00:00:51.180
I'm actually terrified that we'd actually
do a thumbwar here just destroy me.

13
00:00:52.650 --> 00:00:55.652
So we'll do Kent C Dodds.

14
00:00:55.652 --> 00:01:01.026
Sorry, let's do the winner
to be Kent C Dodds.

15
00:01:01.026 --> 00:01:03.333
And save that, and
our test should be passing.

16
00:01:03.333 --> 00:01:06.055
Let's just make sure
that things can break.

17
00:01:06.055 --> 00:01:09.811
Yeah, so cool.

18
00:01:09.811 --> 00:01:11.979
So this is my keypatching.

19
00:01:11.979 --> 00:01:15.581
One problem with this that
I haven't done yet is now,

20
00:01:15.581 --> 00:01:20.244
we've changed this getWinner
implementation for all of our tests.

21
00:01:20.244 --> 00:01:25.258
And so something that you need to do
is keep the original getWinner utility.

22
00:01:25.258 --> 00:01:30.447
So let's say originalGetWinner
= utiles.getWinner.

23
00:01:30.447 --> 00:01:35.545
And then you'll wanna restore that
at the end of your test [COUGH]

24
00:01:35.545 --> 00:01:40.739
to make sure that any other test
that are using this module don't

25
00:01:40.739 --> 00:01:46.917
also blow up because they are relying
on this actually running or whatever.

26
00:01:49.590 --> 00:01:55.131
&gt;&gt; Kent: Cool so what are questions
you have about this exercise?

27
00:01:55.131 --> 00:01:57.498
Anything, nothing?

28
00:01:57.498 --> 00:02:02.649
Okay, cool, does anybody see potential
problems with this approach?

29
00:02:07.631 --> 00:02:10.585
&gt;&gt; Kent: So I'll give you a hint.

30
00:02:10.585 --> 00:02:15.150
So I've got an eslintrc in here
that disables a linting rule

31
00:02:15.150 --> 00:02:17.447
called import/namespace.

32
00:02:17.447 --> 00:02:19.655
This is the ESLint plugin import.

33
00:02:19.655 --> 00:02:25.192
And what this rule actually ensures,
if I turn this back on, or I'll do warn.

34
00:02:27.464 --> 00:02:33.351
&gt;&gt; Kent: It ensures that you don't make
changes to anything that you import,

35
00:02:33.351 --> 00:02:36.600
at least not on the name space.

36
00:02:36.600 --> 00:02:40.615
So the reason for
that is because it's actually,

37
00:02:40.615 --> 00:02:44.821
when ES modules are actually
implemented in node and

38
00:02:44.821 --> 00:02:49.808
if we're using native modules
this would actually not work.

39
00:02:49.808 --> 00:02:55.610
It might be a syntax error but cert,
at least would be a runtime error.

40
00:02:55.610 --> 00:03:01.418
So this monkey patching business of
modules is not an optimal solution.

41
00:03:01.418 --> 00:03:06.883
So, we'll deal with that
in a later exercise.

42
00:03:06.883 --> 00:03:10.655
The other thing,
the other problem with this is that,

43
00:03:10.655 --> 00:03:15.425
let's say that if we call getWinner
too many times in this function.

44
00:03:15.425 --> 00:03:19.650
Or if we call it the wrong way,
then things can really blow up.

45
00:03:19.650 --> 00:03:22.510
And so as soon as you mock something, or

46
00:03:22.510 --> 00:03:26.333
you create a fake version
of something in your test.

47
00:03:26.333 --> 00:03:31.261
You're severing any confidence
that you have integration

48
00:03:31.261 --> 00:03:35.902
between that fake thing and
whatever you're testing.

49
00:03:35.902 --> 00:03:41.610
Because now,
let's say that somewhere down the line.

50
00:03:41.610 --> 00:03:46.886
Here I'm gonna get rid of that
annoying ESLint thing here.

51
00:03:46.886 --> 00:03:52.107
So let's say somewhere down the line,
our dependency or somebody whose writing

52
00:03:52.107 --> 00:03:57.344
this decides that they wanna have, like
maybe put a game or something like that.

53
00:03:57.344 --> 00:03:59.489
Some additional options or something,

54
00:03:59.489 --> 00:04:03.094
if we're still using our mock then
actually our test still passed.

55
00:04:03.094 --> 00:04:04.945
But the code is totally busted.

56
00:04:04.945 --> 00:04:09.385
And so that's what I mean by mocking
something you're severing your ability to

57
00:04:09.385 --> 00:04:13.693
be confident about that thing because
now you have no way of knowing if you're

58
00:04:13.693 --> 00:04:15.440
calling that thing properly.

59
00:04:15.440 --> 00:04:19.811
And so there are some things that
you can do to overcome this.

60
00:04:19.811 --> 00:04:22.509
There's definitely a reason
to mock things sometimes.

61
00:04:22.509 --> 00:04:26.604
Like sometimes you really can't charge
somebody's credit card during your test.

62
00:04:26.604 --> 00:04:28.576
I don't have enough money in my account.

63
00:04:28.576 --> 00:04:35.844
So sorry we can't run the test today,
the CTO maxed out his credit card.

64
00:04:35.844 --> 00:04:37.775
Yeah, so that's not reasonable.

65
00:04:37.775 --> 00:04:41.574
So we do need to do some sort
of mocking at some point.

66
00:04:41.574 --> 00:04:45.813
But if there is something we can do to
sort of restore that confidence in some

67
00:04:45.813 --> 00:04:48.592
way, then that would be
a really helpful thing.

68
00:04:48.592 --> 00:04:53.238
That's actually called
contract testing to test that

69
00:04:53.238 --> 00:04:56.575
the integration is working properly.

70
00:04:56.575 --> 00:05:01.029
And we're not actually going to
get into the contract testing, but

71
00:05:01.029 --> 00:05:06.200
we're gonna get somewhere a little bit
closer to that with our next exercise.

