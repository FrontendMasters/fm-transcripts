WEBVTT

1
00:00:00.570 --> 00:00:04.660
&gt;&gt; Sarah Drasner: Filtering is really
nicely done with a computed values.

2
00:00:04.660 --> 00:00:07.600
And there are few reasons for this.

3
00:00:07.600 --> 00:00:11.930
Computed properties are calculations
that would be cached and

4
00:00:11.930 --> 00:00:14.930
only be updated when
a dependency has changed.

5
00:00:14.930 --> 00:00:18.600
So, if you have a bunch of
logic that you need to run and

6
00:00:18.600 --> 00:00:22.940
that dependency is not changing, it's not
going to keep rerunning those calculations

7
00:00:22.940 --> 00:00:26.380
every time something changes in the dom or
the virtual domain.

8
00:00:26.380 --> 00:00:29.320
It's highly performant, but
you should use it with some understanding

9
00:00:29.320 --> 00:00:31.050
because it's a little bit
different from methods.

10
00:00:31.050 --> 00:00:33.780
Methods we're executing just
like a normal function.

11
00:00:33.780 --> 00:00:36.370
Computed is not the same.

12
00:00:36.370 --> 00:00:41.680
So this is the simplest possible computed
example and not at all really use case.

13
00:00:41.680 --> 00:00:44.140
Like, probably don't use it for this.

14
00:00:44.140 --> 00:00:47.700
So I am going to actually open
this one in code pen as well.

15
00:00:49.680 --> 00:00:53.000
If I write my name here and

16
00:00:53.000 --> 00:00:57.780
the initial entry is my name and the
computer value is you're a monster Sarah.

17
00:00:59.230 --> 00:01:04.200
Basically we have this user data here and
previously when we

18
00:01:04.200 --> 00:01:09.880
have used something in this Moustache
template, it had to be in the data.

19
00:01:09.880 --> 00:01:12.840
We have, you know it has to be
something that's in the data.

20
00:01:12.840 --> 00:01:15.910
But now we're not, we have something
that it's not in the data.

21
00:01:15.910 --> 00:01:19.250
This user data is being outputted
just like we're used to, but

22
00:01:19.250 --> 00:01:22.200
we also have this thing called greeting.

23
00:01:22.200 --> 00:01:24.390
And greeting is the computed property.

24
00:01:24.390 --> 00:01:26.830
And you'll noticed the way
that we're using it

25
00:01:26.830 --> 00:01:29.190
is we're actually using it as a property.

26
00:01:29.190 --> 00:01:31.260
We're not, you know,
using it as a function.

27
00:01:31.260 --> 00:01:33.150
I'm not writing parens here.

28
00:01:33.150 --> 00:01:35.390
I'm actually taking this and

29
00:01:35.390 --> 00:01:40.100
using it as though it's a piece of
that data that's hanging off of this.

30
00:01:40.100 --> 00:01:42.680
I have to return it so
that I can get this,

31
00:01:42.680 --> 00:01:44.750
like template literal outputting for me.

32
00:01:46.050 --> 00:01:49.250
The thing to understand
about computed values, or

33
00:01:49.250 --> 00:01:54.070
computed properties is that it's
a different view of the same data.

34
00:01:54.070 --> 00:01:56.480
So it's taking something
that already exists, and

35
00:01:56.480 --> 00:01:57.690
it's giving you a different view of it.

36
00:01:57.690 --> 00:02:02.050
You can think of it a little bit like .map
where you have an existing array, and

37
00:02:02.050 --> 00:02:04.890
then you have a new array that
you're creating off of it.

38
00:02:04.890 --> 00:02:09.870
It's not actually affecting that
first you know piece of data at all.

39
00:02:09.870 --> 00:02:14.330
That piece of data is
completely separate from it.

40
00:02:14.330 --> 00:02:14.940
&gt;&gt; Speaker 2: Question.

41
00:02:14.940 --> 00:02:17.659
&gt;&gt; Sarah Drasner: Yeah?
&gt;&gt; Speaker 2: The lazy modifier, whatever.

42
00:02:20.998 --> 00:02:25.360
&gt;&gt; Speaker 2: It fires on enter and
blur, anything else?

43
00:02:25.360 --> 00:02:31.050
&gt;&gt; Sarah Drasner: The .lazy,
I think it enter and blur.

44
00:02:31.050 --> 00:02:32.270
&gt;&gt; Speaker 2: Those are the two I tracked.

45
00:02:32.270 --> 00:02:36.810
&gt;&gt; Sarah Drasner: I think you can
configure it to work on other types of

46
00:02:36.810 --> 00:02:41.490
events than just .enter, but I'm pretty
sure that that's like, the default.

47
00:02:41.490 --> 00:02:42.630
&gt;&gt; Speaker 2: Ok.

48
00:02:42.630 --> 00:02:44.130
&gt;&gt; Sarah Drasner: Yeah,
I'd have to play around with it.

49
00:02:44.130 --> 00:02:46.350
&gt;&gt; Speaker 2: Yeah,
I know it works on blur, too.

50
00:02:46.350 --> 00:02:48.010
That's the only one I could think to try.

51
00:02:48.010 --> 00:02:48.790
&gt;&gt; Sarah Drasner: Yeah, yeah.

52
00:02:48.790 --> 00:02:49.290
That makes sense.

53
00:02:50.740 --> 00:02:53.340
Okay so computed and methods.

54
00:02:53.340 --> 00:02:57.890
Computed runs only when the dependency
is changed I mentioned this before

55
00:02:57.890 --> 00:03:00.950
methods run whenever an update occurs.

56
00:03:00.950 --> 00:03:02.425
Computed is cashed.

57
00:03:02.425 --> 00:03:03.925
Methods are not cached.

58
00:03:03.925 --> 00:03:07.545
Computed should be used as
a property in place of data.

59
00:03:07.545 --> 00:03:12.325
And methods typically are invoked on at,
or, but can, they can be

60
00:03:12.325 --> 00:03:16.195
invoked whenever you need them,
just like the functions, they're flexible.

61
00:03:16.195 --> 00:03:19.975
Computed is by default getter only,
but you can define a setter.

62
00:03:19.975 --> 00:03:25.340
This is something that you won't
understand until later on in this Section.

63
00:03:25.340 --> 00:03:27.810
I'm gonna go into getters and
setters a little bit more.

64
00:03:28.840 --> 00:03:33.000
So by default it's just a getter,
and methods are getter and setter.

65
00:03:34.580 --> 00:03:38.370
So if we're searching a title,
you guys just asked for this filtering.

66
00:03:39.510 --> 00:03:46.570
We're going to say d-a ao we can
update this really fast if we want to.

67
00:03:46.570 --> 00:03:51.320
How, or super, whatever, what have you.

68
00:03:51.320 --> 00:03:53.470
And you can see how
quickly that's updating.

69
00:03:53.470 --> 00:03:55.530
It's updating really super fast.

70
00:03:55.530 --> 00:03:59.970
The other thing that you can see is
if I have something like this list.

71
00:03:59.970 --> 00:04:06.220
I can still use these methods on
a computer value, so I can still say like

72
00:04:06.220 --> 00:04:13.030
this and execute methods on that
different view of the same data.

73
00:04:13.030 --> 00:04:16.100
So using our computer
property in place of data,

74
00:04:16.100 --> 00:04:18.160
we have a different view of this data.

75
00:04:18.160 --> 00:04:23.070
We have methods like we had before
running off of that view instance and

76
00:04:23.070 --> 00:04:26.530
then in the computed values
we have just another object.

77
00:04:26.530 --> 00:04:29.020
We're using it just like method's was.

78
00:04:29.020 --> 00:04:31.460
So, I'm gonna blur out that method so

79
00:04:31.460 --> 00:04:34.100
that you can focus just on
the computed value for a second.

80
00:04:35.160 --> 00:04:39.310
In the computer value,
we have this thing called filtered films.

81
00:04:39.310 --> 00:04:44.180
Inside of that we have a thing that's
just basically rejects getting rid of

82
00:04:44.180 --> 00:04:49.680
capitalization things because you know
you could see I was using lower case in.

83
00:04:49.680 --> 00:04:54.810
Java Script is very, very trying to
make sure everything matches exactly.

84
00:04:54.810 --> 00:04:57.800
So I have to kind of use
regX to make sure it's not.

85
00:04:57.800 --> 00:05:03.610
So I return this .ratings info which
is what our array was, if you remember.

86
00:05:03.610 --> 00:05:08.050
This .ratingsinfo.filter then we
pass in the EL and we check for

87
00:05:08.050 --> 00:05:12.360
matches in that filter that we created.

88
00:05:12.360 --> 00:05:17.120
Now, before we had this
table that was set up with

89
00:05:17.120 --> 00:05:22.610
this v-for="entry in ratingsInfo",
the only change we make to our code

90
00:05:22.610 --> 00:05:27.790
is changing it to filteredFilms, and
filteredFilms is that computed property.

91
00:05:27.790 --> 00:05:29.850
So does that seem clear to people?

92
00:05:29.850 --> 00:05:32.809
Instead of using ratings
info like we had in this,

93
00:05:32.809 --> 00:05:36.196
in our data property we are just
changing it to filtered.

94
00:05:38.425 --> 00:05:43.406
&gt;&gt; Sarah Drasner: So the differences here,
if we go into this code pane

95
00:05:43.406 --> 00:05:48.050
one last time,
we've got our data is counter and

96
00:05:48.050 --> 00:05:52.390
we have a method that is this.counter++.

97
00:05:52.390 --> 00:05:55.030
And we've got a counter and a counterup.

98
00:05:55.030 --> 00:05:59.660
And again if we increase this,
this computed value does the same thing.

99
00:05:59.660 --> 00:06:05.550
It executes the same method in
the same way, but it starts from one.

100
00:06:05.550 --> 00:06:07.320
We're starting from one instead of zero.

