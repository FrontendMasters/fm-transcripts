WEBVTT

1
00:00:00.120 --> 00:00:02.590
&gt;&gt; Sarah Drasner: We went
over template strings.

2
00:00:02.590 --> 00:00:06.040
We went over using script x templates but
so

3
00:00:06.040 --> 00:00:10.810
far we haven't really delved into
a real build process for vue.

4
00:00:11.920 --> 00:00:14.830
So we're kind of working our
way from the simplest and

5
00:00:14.830 --> 00:00:18.750
easiest to kind of understand and
use right out of the gate

6
00:00:18.750 --> 00:00:22.600
to a little bit more complicated of
a build process but much more useful.

7
00:00:23.860 --> 00:00:26.710
We're gonna start off with vue-cli but
then we're eventually

8
00:00:26.710 --> 00:00:30.630
going to use Nuxt too, and
I think Nuxt is really, really cool.

9
00:00:30.630 --> 00:00:34.410
I'll explain all of the reasons why
Nuxt is really cool, coming up.

10
00:00:34.410 --> 00:00:39.400
So okay, why are we using a cli or
vue-cli in general?

11
00:00:39.400 --> 00:00:44.230
Because we can use build processes that
allow us to use great features like ES6 or

12
00:00:44.230 --> 00:00:49.230
SCSS or any other libraries and
bring them in very, very easily.

13
00:00:49.230 --> 00:00:53.450
In CodePen, we've got those little pre
processor tabs, that's clearly cool but

14
00:00:53.450 --> 00:00:57.770
we can't do that in a normal build process
just like select from a drop down.

15
00:00:57.770 --> 00:01:00.850
So we need to have those kind
of build processes in there,

16
00:01:00.850 --> 00:01:02.510
if we wanna use stuff like ES6.

17
00:01:02.510 --> 00:01:06.590
And ES6 is pretty awesome, so
we'll definitely probably do.

18
00:01:06.590 --> 00:01:10.910
We're gonna build and concatenate single
file templates which are super awesome and

19
00:01:10.910 --> 00:01:12.200
I'm not biased at all.

20
00:01:12.200 --> 00:01:15.579
Here are all the trophies
in the world [LAUGH].

21
00:01:15.579 --> 00:01:19.610
I think single file templates are just
a really, really great workflow.

22
00:01:19.610 --> 00:01:21.770
So we'll look at those in this section.

23
00:01:23.580 --> 00:01:26.820
It's so that we can not load
all of our files at startup.

24
00:01:26.820 --> 00:01:28.860
Sometimes we wanna lazy load component.

25
00:01:28.860 --> 00:01:31.930
Sometimes we need to do
asynchronous operations.

26
00:01:31.930 --> 00:01:35.320
And with UCLI that really

27
00:01:35.320 --> 00:01:40.010
helps us do all of that not just
have everything on the page at once.

28
00:01:40.010 --> 00:01:41.500
So that's really great.

29
00:01:41.500 --> 00:01:44.700
We can do things like server
side rendering, code splitting,

30
00:01:44.700 --> 00:01:47.820
we can get performance matrix
about our application.

31
00:01:47.820 --> 00:01:51.622
All of these things are really
important an really awesome.

32
00:01:51.622 --> 00:01:53.302
We can also have build and prod versions.

33
00:01:53.302 --> 00:01:57.812
Previously, we've just been using a script
that was like the non minified version and

34
00:01:57.812 --> 00:01:59.560
then the minified version.

35
00:01:59.560 --> 00:02:02.980
But in real life,
what we'd need to do is we'd minify,

36
00:02:02.980 --> 00:02:05.910
concatenate, do all of these
things to our scripts.

37
00:02:05.910 --> 00:02:08.450
And then we'd also be
using a different version

38
00:02:08.450 --> 00:02:11.400
of that script when we're
pushing to production.

39
00:02:11.400 --> 00:02:13.780
So this allows us to
do that pretty easily.

40
00:02:15.100 --> 00:02:19.793
So the first thing that we'd
wanna do is npm install -g

41
00:02:19.793 --> 00:02:23.060
this installs it globally vue-cli or

42
00:02:23.060 --> 00:02:27.973
a yarn at global at vue-cli
whichever your preference.

43
00:02:27.973 --> 00:02:30.323
So I think everybody should
actually run this command so

44
00:02:30.323 --> 00:02:33.320
that they have it on their
machine before we get going.

45
00:02:33.320 --> 00:02:36.701
I've already run this [LAUGH] so
I'm not gonna run it again.

46
00:02:36.701 --> 00:02:39.430
Yeah I'll give you a second.

47
00:02:40.900 --> 00:02:45.438
Then for the purposes of this class today,
we're gonna do vue init

48
00:02:45.438 --> 00:02:50.570
webpack-simple my project or whatever
you want your project to be named.

49
00:02:50.570 --> 00:02:52.220
You can also just use webpack.

50
00:02:52.220 --> 00:02:54.850
Actually, I would recommend using webpack.

51
00:02:54.850 --> 00:02:58.230
But since we're not gonna do,
the thing that webpack itself has

52
00:02:58.230 --> 00:03:02.422
that webpack simple does not
are things like testing and

53
00:03:02.422 --> 00:03:06.750
ES linked configs and things like that
that we're not using during this class.

54
00:03:06.750 --> 00:03:09.561
So I'm going to do a webpack
symbol today but in the future,

55
00:03:09.561 --> 00:03:11.700
you probably wanna be using webpack.

56
00:03:11.700 --> 00:03:15.140
If you're more comfortable with browser
fi, there's a browser fi template too, so

57
00:03:15.140 --> 00:03:19.610
you could also do viewing it,
browser fi or something like that.

58
00:03:19.610 --> 00:03:21.200
So there's a few different templates.

59
00:03:21.200 --> 00:03:24.190
&gt;&gt; Speaker 2: Is it okay if I use the
webpack instead of webpacks [INAUDIBLE].

60
00:03:24.190 --> 00:03:24.715
&gt;&gt; Sarah Drasner: Yeah of course.

61
00:03:24.715 --> 00:03:25.715
&gt;&gt; Speaker 2: Okay.
&gt;&gt; Sarah Drasner: There are just a few

62
00:03:25.715 --> 00:03:27.084
more options that it
will take you through.

63
00:03:27.084 --> 00:03:29.720
&gt;&gt; Speaker 2: Yeah,
we are already past that.

64
00:03:29.720 --> 00:03:31.674
But as far as the rest of
the course is concerned.

65
00:03:31.674 --> 00:03:32.578
&gt;&gt; Sarah Drasner: Sure
it is totally up to you.

66
00:03:32.578 --> 00:03:36.437
I am using webpack simple for
the purpose of teaching but

67
00:03:36.437 --> 00:03:40.472
webpack is great and
it has things like testing involved.

68
00:03:40.472 --> 00:03:44.862
[INAUDIBLE] With CD into that directory,
we'd run yarn or npm install,

69
00:03:44.862 --> 00:03:47.933
depending, use one or
the other don't go back and

70
00:03:47.933 --> 00:03:50.510
forth like I just did
in this [LAUGH] thing.

71
00:03:50.510 --> 00:03:53.260
So use yarn add or use yarn.

72
00:03:53.260 --> 00:03:56.220
I typically use yarn.

73
00:03:56.220 --> 00:03:58.251
And then I'm gonna say npm run dev.

74
00:03:58.251 --> 00:04:02.190
And that will immediately
give us a dev server.

75
00:04:02.190 --> 00:04:05.550
And the dev server is also
a really nice thing about vue-cli

76
00:04:05.550 --> 00:04:07.940
because I can work with it and have it,

77
00:04:08.960 --> 00:04:14.430
instead of just hosting it with some sort
of throwing my files in the browser.

78
00:04:14.430 --> 00:04:16.580
That's not actually a real built process,

79
00:04:16.580 --> 00:04:19.780
so it reflects what the user
would see a little bit better.

80
00:04:21.700 --> 00:04:23.880
And I mentioned these
single file templates.

81
00:04:23.880 --> 00:04:25.750
What am I talking about [LAUGH].

82
00:04:25.750 --> 00:04:29.890
So, usually we've been either
using a template in that string or

83
00:04:29.890 --> 00:04:32.810
we've been wrapping it in
that strange script tag,

84
00:04:32.810 --> 00:04:36.500
that's not actually how we would
use it in real view applications.

85
00:04:36.500 --> 00:04:41.900
What we'd have is this template here
where we have all of our HTML and

86
00:04:41.900 --> 00:04:43.100
all of our mark up.

87
00:04:43.100 --> 00:04:49.090
We have to return a single element, it
doesn't matter that it's a dev, it could

88
00:04:49.090 --> 00:04:53.190
be a span, it could be an SPG, it doesn't
matter but you have to return just one.

89
00:04:53.190 --> 00:04:56.760
That's the same in react, for
now, I think it's changing.

90
00:04:56.760 --> 00:05:01.080
And then we have a script tag,
where we're gonna export defaults and

91
00:05:01.080 --> 00:05:03.849
all of our component
logic will go in there.

92
00:05:03.849 --> 00:05:08.535
We'll also need to import components into
here which I'll show you how to do in

93
00:05:08.535 --> 00:05:09.390
a little bit.

94
00:05:10.870 --> 00:05:13.470
But we'd basically have that script tag.

95
00:05:13.470 --> 00:05:20.120
And then we have this style tag, so this
template that with the base of dot view,

96
00:05:20.120 --> 00:05:24.185
it's going to be a new file type,
a new file extension called dot view.

97
00:05:24.185 --> 00:05:26.168
And it will have all of this stuff in it.

98
00:05:26.168 --> 00:05:30.655
And what I really like about it is that,
there is no context switching.

99
00:05:30.655 --> 00:05:35.845
We have everything in one place that
we're working on it in just one location.

100
00:05:35.845 --> 00:05:39.921
So, we can go in between our HTML and
our script like we were doing in CodePen,

101
00:05:39.921 --> 00:05:40.925
really fast.

102
00:05:40.925 --> 00:05:43.855
And we can just do all that in
one file and it all stays really,

103
00:05:43.855 --> 00:05:45.015
really encapsulated.

104
00:05:46.600 --> 00:05:50.420
Vue files mean no context switching, yey.

105
00:05:50.420 --> 00:05:54.240
Okay, so
we would import new from components new.

106
00:05:54.240 --> 00:05:56.609
So if I have a parent component and

107
00:05:56.609 --> 00:06:00.597
I need to bring another
component in to this component.

108
00:06:00.597 --> 00:06:04.850
And again, if you're familiar with
other frameworks is very much the same.

109
00:06:04.850 --> 00:06:10.480
We're importing that thing in, and
then I'm saying in the export defaults,

110
00:06:10.480 --> 00:06:13.330
the components that
we're using here is new.

111
00:06:13.330 --> 00:06:17.535
And that new will allow me to use
in this template this new tag.

112
00:06:17.535 --> 00:06:20.340
I'm gonna do some live coding
where you can see this stuff for

113
00:06:20.340 --> 00:06:23.485
yourself but
this is just some base premises..

114
00:06:24.635 --> 00:06:27.963
We could also write it this way,
where we have, like, app-new is new.

115
00:06:27.963 --> 00:06:32.951
So this is ES6, just like usually I'd have
to write new is new but since it's ES6,

116
00:06:32.951 --> 00:06:35.763
it's gonna to say that's
a little redundant,

117
00:06:35.763 --> 00:06:37.762
why don't we just [LAUGH] say new?

118
00:06:37.762 --> 00:06:40.162
And it will assume that for us.

119
00:06:40.162 --> 00:06:44.032
If I wanted to change this though,
let's say my component is named new but

120
00:06:44.032 --> 00:06:47.502
in my mark up, I need to name it
something else, I could do that.

121
00:06:47.502 --> 00:06:50.160
I could write app-new is new and
remember we said.

122
00:06:50.160 --> 00:06:55.530
Camel casing will turn into Kebab Case
when we turn it into those HTML elements.

