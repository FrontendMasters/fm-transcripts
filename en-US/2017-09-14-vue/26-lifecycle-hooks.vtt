WEBVTT

1
00:00:00.270 --> 00:00:03.180
&gt;&gt; Sarah Drasner: Lifecycle hooks, we've
gotten pretty far, but we haven't talked

2
00:00:03.180 --> 00:00:06.440
about lifecycle hooks yet, and
they are really, really important.

3
00:00:06.440 --> 00:00:09.280
And they become a little bit more
important as we start to use

4
00:00:09.280 --> 00:00:13.820
something like a VCLI, where we're
bringing components in as we need them,

5
00:00:13.820 --> 00:00:16.950
and not using them if we don't need them.

6
00:00:16.950 --> 00:00:19.510
So what are lifecycle hooks?

7
00:00:19.510 --> 00:00:24.330
They provide you a method so
that you might trigger something precisely

8
00:00:24.330 --> 00:00:27.570
at different junctures of
a components life cycle.

9
00:00:27.570 --> 00:00:31.850
Components are mounted and
unmounted from the DOM.

10
00:00:31.850 --> 00:00:35.220
So for instance, when we toggled that v if

11
00:00:35.220 --> 00:00:38.430
statement in the beginning of this
course we had it mounting and

12
00:00:38.430 --> 00:00:43.140
unmounting instead of the v shell where
we're just toggling display none.

13
00:00:43.140 --> 00:00:48.021
So what we would have is beforeCreate,
created, beforeMount, mounted,

14
00:00:48.021 --> 00:00:53.610
beforeUpdate, updated, activated,
deactivated, beforeDestroy, destroyed.

15
00:00:53.610 --> 00:00:56.380
Don't worry,
I'm gonna go into these in more depth.

16
00:00:56.380 --> 00:01:03.480
So if we go into the console in this pen.
&gt;&gt; Sarah Drasner: We've

17
00:01:03.480 --> 00:01:07.650
got this child that we're showing and
not showing.

18
00:01:07.650 --> 00:01:11.280
And if we go look at the console,
we don't need animations.

19
00:01:11.280 --> 00:01:15.530
You can see beforeCreate, created,
I'm gonna actually refresh so

20
00:01:15.530 --> 00:01:17.360
you can see it fresh.

21
00:01:17.360 --> 00:01:21.667
So we've got beforeCreate, created,
beforeMount, mounted, beforeDestroy,

22
00:01:21.667 --> 00:01:22.790
destroyed.

23
00:01:22.790 --> 00:01:27.120
And that will just happen over and
over again and those will occur in order.

24
00:01:27.120 --> 00:01:31.770
And all that's going on in this
pen if we go and look at it is

25
00:01:31.770 --> 00:01:36.200
I'm hooking in to these.

26
00:01:36.200 --> 00:01:41.817
I'm saying beforeCreate and
using a function here and

27
00:01:41.817 --> 00:01:45.741
console logging those occurrences.

28
00:01:45.741 --> 00:01:51.016
So if we're gonna dig a little bit
further into what each one of those mean,

29
00:01:51.016 --> 00:01:53.635
we instantiate a new view instance.

30
00:01:53.635 --> 00:01:57.295
And then when we're either
using the view instance itself,

31
00:01:57.295 --> 00:02:01.106
the view instance itself also
has these hooks available to us.

32
00:02:01.106 --> 00:02:04.540
But we're mostly gonna be working with
components in order to see these life

33
00:02:04.540 --> 00:02:05.193
cycle hooks.

34
00:02:05.193 --> 00:02:10.470
Because we're gonna mount and unmount,
or asynchronously load components.

35
00:02:10.470 --> 00:02:16.060
So we've got beforeCreate, we're gonna
observe the data and init events.

36
00:02:16.060 --> 00:02:20.080
In created we've got template options and
render.

37
00:02:20.080 --> 00:02:25.230
In beforeMount we create virtual
DOM eland replace el with it.

38
00:02:25.230 --> 00:02:27.010
And then it mounted,

39
00:02:27.010 --> 00:02:31.170
we have a couple of different things
that happen it's mounted to the DOM.

40
00:02:31.170 --> 00:02:33.867
We're gonna update
the components sometimes so

41
00:02:33.867 --> 00:02:37.887
when the components is updated,
we have the beforeUpdate and updated.

42
00:02:37.887 --> 00:02:38.838
And then this,

43
00:02:38.838 --> 00:02:43.700
this activated and deactivated that
only works for things like keep-alive.

44
00:02:43.700 --> 00:02:47.930
So basically that is a special
thing that keep-alive has because

45
00:02:47.930 --> 00:02:49.480
it was still kinda there.

46
00:02:49.480 --> 00:02:54.160
But it's activated and
it's deactivated in terms of use.

47
00:02:54.160 --> 00:02:56.620
So then we have beforeDestroy.

48
00:02:56.620 --> 00:03:01.810
We tear down the watchers, and the child
components, and the event listeners.

49
00:03:01.810 --> 00:03:03.330
And then it's destroyed.

50
00:03:03.330 --> 00:03:07.200
So each of these happen at different
points and time that we can plug into.

51
00:03:09.210 --> 00:03:12.420
So lifecycle hooks also
auto-bind to the instance, so

52
00:03:12.420 --> 00:03:15.220
you can see that component's state and
methods.

53
00:03:15.220 --> 00:03:17.910
You don't have to console.log
what this refers to.

54
00:03:17.910 --> 00:03:20.910
You can still use this dot text or

55
00:03:20.910 --> 00:03:26.120
this dot whatever is in your data
inside those lifecycle hooks.

56
00:03:26.120 --> 00:03:30.510
And again for this reason you shouldn't
use an arrow function for these.

57
00:03:30.510 --> 00:03:33.270
You can use arrow functions
inside of them, but

58
00:03:33.270 --> 00:03:37.755
it won't bind correctly unless
you write them as a function.

59
00:03:37.755 --> 00:03:40.618
A non-arrow function.

60
00:03:40.618 --> 00:03:45.480
So we're gonna dig into
animations in the next unit,

61
00:03:45.480 --> 00:03:48.623
but we can do something like this.

62
00:03:48.623 --> 00:03:56.411
&gt;&gt; [SOUND]

63
00:04:05.882 --> 00:04:06.672
&gt;&gt; Sarah Drasner: [SOUND] And

64
00:04:06.672 --> 00:04:13.388
the way that we did this was, because
everything was happening on the entrance,

65
00:04:13.388 --> 00:04:17.538
we're gonna go into
the transition component and

66
00:04:17.538 --> 00:04:21.719
do a lot of things with
the transition component.

67
00:04:21.719 --> 00:04:25.037
But we actually didn't need
the transition component for this,

68
00:04:25.037 --> 00:04:28.186
because we're basically doing
everything on the entrance.

69
00:04:28.186 --> 00:04:33.249
So as soon as those components, each
one of those was a different component.

70
00:04:33.249 --> 00:04:36.223
As soon as it's mounted then
a bunch of things happen.

71
00:04:36.223 --> 00:04:40.467
We have audio playing,
we have timeline that we are creating and

72
00:04:40.467 --> 00:04:43.760
hanging everything off of that mounted.

73
00:04:43.760 --> 00:04:48.530
So we can do a lot of different stuff,
we can then use mounted and

74
00:04:48.530 --> 00:04:52.370
those hooks for a lot of different things.

75
00:04:52.370 --> 00:04:56.030
You saw before in the other
demo where we had that created

76
00:04:56.030 --> 00:04:58.260
where were listening to scroll events for

77
00:04:58.260 --> 00:05:02.600
those components in order to load more
beers and things into that beer API.

78
00:05:04.380 --> 00:05:06.280
Okay, so we went through view CLI,

79
00:05:06.280 --> 00:05:11.280
and now you guys are super proficient
at creating your view apps.

80
00:05:11.280 --> 00:05:14.010
You even know how to build them for
deployment.

81
00:05:14.010 --> 00:05:17.620
You did such a good job with those things,
let's talk about NUXT,

82
00:05:17.620 --> 00:05:21.000
because I think NUXT is kind of special,
it has like a special place in my heart.

83
00:05:22.620 --> 00:05:28.074
NUXT is really good for, yeah?
&gt;&gt; Speaker 2: Before we get into NUXT,

84
00:05:28.074 --> 00:05:32.879
there's a question around
like the lifecycle stuff,

85
00:05:32.879 --> 00:05:35.601
and the computed properties.

86
00:05:35.601 --> 00:05:40.770
And the value of the computed properties,
depending on like an attribute or

87
00:05:40.770 --> 00:05:42.760
prop and like.
&gt;&gt; Sarah Drasner: So

88
00:05:42.760 --> 00:05:46.010
what's the question?
&gt;&gt; Speaker 2: Just

89
00:05:46.010 --> 00:05:49.180
basically where in the computed value?

90
00:05:49.180 --> 00:05:52.310
Where in the lifecycle
is it actually computed?

91
00:05:52.310 --> 00:05:53.440
&gt;&gt; Sarah Drasner: Where in the lifecycle

92
00:05:53.440 --> 00:05:54.570
is it computed?

93
00:05:54.570 --> 00:06:00.400
So a computed property is, it's
created when the component is mounted.

94
00:06:00.400 --> 00:06:05.700
It's just like a method where it's
taking basically that logic and

95
00:06:05.700 --> 00:06:09.180
it's doing it like
initially upon mounting it.

96
00:06:09.180 --> 00:06:13.520
So we're actually, when we're,
if we go back here.

97
00:06:13.520 --> 00:06:18.270
We've got observe data an init event,
that's going to happen before create.

98
00:06:18.270 --> 00:06:22.240
So that's when we are starting to work
with all those methods and created.

99
00:06:24.590 --> 00:06:29.120
Computed values aren't instantiated
any differently than a method.

100
00:06:29.120 --> 00:06:33.420
The only thing that's really different
is that we're not updating it

101
00:06:33.420 --> 00:06:35.780
unless the dependencies changed.

102
00:06:35.780 --> 00:06:40.760
So it's created the same was as
a method is, but that's only updating,

103
00:06:40.760 --> 00:06:45.840
and we're only reconfiguring it and
redoing it at a different point in time.

104
00:06:45.840 --> 00:06:48.800
So if the data changes,
but not on every update.

105
00:06:48.800 --> 00:06:51.900
Does that make sense?
&gt;&gt; Speaker 2: Yeah, and

106
00:06:51.900 --> 00:06:57.990
they're just saying if a property
changes and the computed property

107
00:06:57.990 --> 00:07:03.790
is dependent on something else, I guess.
&gt;&gt; Sarah Drasner: Yes-

108
00:07:03.790 --> 00:07:04.665
&gt;&gt; Speaker 2: So worried about grace

109
00:07:04.665 --> 00:07:05.618
conditions.
&gt;&gt; Sarah Drasner: [CROSSTALK] So

110
00:07:05.618 --> 00:07:08.490
the dependency computed
property will re-run, but

111
00:07:08.490 --> 00:07:12.777
that doesn't have much to do with the
lifecycle in any particular special way.

112
00:07:12.777 --> 00:07:13.458
&gt;&gt; Speaker 2: All right.

113
00:07:14.624 --> 00:07:16.156
&gt;&gt; Speaker 3: They were asking more about,

114
00:07:16.156 --> 00:07:18.800
when it's initialized exactly.
&gt;&gt; Sarah Drasner: That would be

115
00:07:18.800 --> 00:07:19.910
before create.

116
00:07:19.910 --> 00:07:20.740
&gt;&gt; Speaker 2: Before create.
&gt;&gt; Speaker 3: Yeah.

