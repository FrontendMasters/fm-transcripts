WEBVTT

1
00:00:00.280 --> 00:00:04.280
&gt;&gt; Sarah Drasner: So
directives are these tiny pieces

2
00:00:04.280 --> 00:00:07.250
of html attributes that view offers us.

3
00:00:07.250 --> 00:00:10.860
They're always prepended with this v and
dash.

4
00:00:10.860 --> 00:00:16.510
And then it basically attaches some
little piece of functionality to that bit

5
00:00:16.510 --> 00:00:20.920
of HTML mark up so that you're not diving
into the DOM and doing something with it.

6
00:00:20.920 --> 00:00:23.070
You actually have all these
things available to you.

7
00:00:23.070 --> 00:00:27.540
So there's tons of stuff here that
we are going to work with today and

8
00:00:27.540 --> 00:00:30.970
look at but we are also gonna
delve into custom directive.

9
00:00:30.970 --> 00:00:33.420
So if view doesn't have you covered for

10
00:00:33.420 --> 00:00:37.030
anything that you are using all the time,
you can make your own.

11
00:00:37.030 --> 00:00:42.724
Which I think is really really great and
very flexible.

12
00:00:42.724 --> 00:00:47.451
So that v-for that we saw earlier,
we kinda went through li v-for,

13
00:00:47.451 --> 00:00:49.740
it loops through a set of values.

14
00:00:49.740 --> 00:00:53.118
That was the previous example,
we said item in items.

15
00:00:53.118 --> 00:00:55.860
But we can also do a static number,
it's very flexible.

16
00:00:55.860 --> 00:01:01.040
So we don't even actually have
any data here to begin with.

17
00:01:01.040 --> 00:01:03.903
I'm just saying li v-for num in 5 and

18
00:01:03.903 --> 00:01:08.750
then outputting the number, and
I can loop through it that way.

19
00:01:08.750 --> 00:01:10.950
Or if you need to,
you have a set of data and

20
00:01:10.950 --> 00:01:14.000
you need to truncate it,
you can do that with a number as well.

21
00:01:15.120 --> 00:01:17.646
So that's really simple and nice.

22
00:01:17.646 --> 00:01:20.679
V-model is one of my favorites,
you've gotta have a favorite.

23
00:01:20.679 --> 00:01:25.639
[LAUGH] V-model is super awesome because
it establishes a relationship between

24
00:01:25.639 --> 00:01:27.595
the data and like a form input.

25
00:01:27.595 --> 00:01:30.530
Which I feel for web developers
this is the yak shaving part.

26
00:01:30.530 --> 00:01:34.360
This is the thing that we always
have to kind of reimplement and

27
00:01:34.360 --> 00:01:37.240
reinvent the wheel, and
view does this really elegantly.

28
00:01:37.240 --> 00:01:39.860
So you can dynamically update values.

29
00:01:39.860 --> 00:01:43.530
So if I have something like this data and

30
00:01:43.530 --> 00:01:47.810
then I have this message that this
is a good place to type things,

31
00:01:47.810 --> 00:01:53.630
then I can output it I can output it here
in this book text in that message but

32
00:01:53.630 --> 00:01:59.260
I establish a relationship between this
text area that says, v-model message.

33
00:01:59.260 --> 00:02:03.090
And the rest of this is just HTML,
this is like normal HTML.

34
00:02:03.090 --> 00:02:06.050
I have a text area,
I gave it a class, I have some rows,

35
00:02:06.050 --> 00:02:08.780
I have a max length
that's just normal html.

36
00:02:08.780 --> 00:02:13.460
So if we go look at this,
I can go over to this over here and

37
00:02:13.460 --> 00:02:19.660
say hi front end masters.

38
00:02:19.660 --> 00:02:21.920
And, it's immediately outputting below.

39
00:02:21.920 --> 00:02:25.904
There's already that relationship,
and it updates super automatically, so

40
00:02:25.904 --> 00:02:27.397
that's really really nice.

41
00:02:27.397 --> 00:02:30.560
It also means we can do more
fun things with it, too.

42
00:02:30.560 --> 00:02:34.350
So, in this example, we're going to
connect things like animation to it,

43
00:02:34.350 --> 00:02:36.990
which we'll do later on in the thing.

44
00:02:36.990 --> 00:02:42.080
I can still do, you know,
write something like, hi, front and

45
00:02:42.080 --> 00:02:45.710
masters, and erase my previous one and

46
00:02:45.710 --> 00:02:49.490
print that one to the page and
these will animate in the same fashion.

47
00:02:49.490 --> 00:02:52.812
So already you know half
of how that is made.

48
00:02:52.812 --> 00:02:56.798
And we're gonna go into how
the animation was done later but

49
00:02:56.798 --> 00:03:01.590
you can make really really beautiful
interactions very very quickly.

50
00:03:01.590 --> 00:03:02.526
[LAUGH] Yeah.

51
00:03:02.526 --> 00:03:03.278
&gt;&gt; Speaker 2: I have a question.

52
00:03:03.278 --> 00:03:04.673
&gt;&gt; Sarah Drasner: Yeah.

53
00:03:04.673 --> 00:03:09.113
&gt;&gt; Speaker 2: On that example
the data property was a function?

54
00:03:09.113 --> 00:03:12.790
&gt;&gt; Sarah Drasner: Yes, actually I am gonna
dive into that a little bit later on.

55
00:03:12.790 --> 00:03:15.810
You can use an object for the data.

56
00:03:16.810 --> 00:03:21.010
So that's like the more simple way
of doing it on the Vue instance.

57
00:03:21.010 --> 00:03:25.441
Although, I would really suggest that
you always write data as a function and

58
00:03:25.441 --> 00:03:26.406
return it.

59
00:03:26.406 --> 00:03:29.710
Because what's gonna end up happening, and
we're gonna go into much more detail about

60
00:03:29.710 --> 00:03:33.320
this when we get into components, is when
we start breaking them into components

61
00:03:33.320 --> 00:03:36.270
we need to have each component
have it's own isolated scope.

62
00:03:36.270 --> 00:03:38.380
And we can't do that
unless it's a function.

63
00:03:38.380 --> 00:03:42.293
And we'll discuss that in more,
that's a great question.

64
00:03:42.293 --> 00:03:44.534
Good eye for spotting that as well.

65
00:03:44.534 --> 00:03:46.590
So you're probably gonna see from here on,

66
00:03:46.590 --> 00:03:50.175
that most of the data that I'm using
is gonna be returned as a function.

67
00:03:50.175 --> 00:03:53.954
In the beginning examples,
I didn't use it that way so

68
00:03:53.954 --> 00:03:57.831
that it is as clean and
small amount of code as possible.

69
00:03:57.831 --> 00:04:00.489
But that is how we're gonna end
up using it most of the time.

70
00:04:02.262 --> 00:04:05.112
&gt;&gt; Sarah Drasner: So, if we have,
we can also use V-Model for

71
00:04:05.112 --> 00:04:07.640
things like check boxes and erase.

72
00:04:07.640 --> 00:04:11.850
So if I have something like John,
Paul, George, and Ringo.

73
00:04:11.850 --> 00:04:17.070
I have all of these check boxes and this
is again normal HTML input type and ID.

74
00:04:17.070 --> 00:04:21.270
And the label, the ID and for
create a relationship for that.

75
00:04:21.270 --> 00:04:23.120
For screen readers between the label and

76
00:04:23.120 --> 00:04:27.570
the input, but
I'm writing v-model checkNames.

77
00:04:27.570 --> 00:04:32.680
checkNames, if we go into the Vue
app itself, we have established

78
00:04:32.680 --> 00:04:37.440
that relationship with the app and
we say data checkNames is that array.

79
00:04:38.570 --> 00:04:43.315
So we go back over here and each one
of these says v-model checkedNames,

80
00:04:43.315 --> 00:04:45.690
v-model checkedNames,
v-model checkedNames and

81
00:04:45.690 --> 00:04:50.260
then we're just outputting checkedNames
bellow, so that you can see it update.

82
00:04:50.260 --> 00:04:55.279
So that establishes a relationship with
many things, instead of just one thing.

83
00:04:55.279 --> 00:04:57.020
But that's kind of repetitive, right?

84
00:04:57.020 --> 00:04:59.540
We said that we have that before there, so

85
00:04:59.540 --> 00:05:04.508
maybe we wanna dynamically show a bunch
of options instead of sometimes you don't

86
00:05:04.508 --> 00:05:08.684
have control over everything that's
gonna be in your checklists and

87
00:05:08.684 --> 00:05:13.951
you're actually creating these forms from
something that a PM gave you or something.

88
00:05:13.951 --> 00:05:16.135
So we've got our options.

89
00:05:16.135 --> 00:05:20.045
We still got our checkedNames and
an array that's empty here.

90
00:05:20.045 --> 00:05:23.490
And then we've got options
with these values.

91
00:05:23.490 --> 00:05:30.016
When we go back to the input here,
we're saying span v-for option in options.

92
00:05:30.016 --> 00:05:34.863
And then we're outputting option.value for
the value.

93
00:05:34.863 --> 00:05:37.200
We're gonna cover this
call in in just a minute.

94
00:05:37.200 --> 00:05:40.740
But you can see that I can now establish
a relationship with checkedNames and

95
00:05:40.740 --> 00:05:44.670
I don't have to keep typing that over and
over again I can expand that list and

96
00:05:44.670 --> 00:05:47.940
contract it and
I don't have to hard code and copy-paste.

97
00:05:47.940 --> 00:05:49.750
So that's pretty cool too.

98
00:05:51.290 --> 00:05:53.120
There are modifiers available to us.

99
00:05:53.120 --> 00:05:58.781
There's a lot of things again that we
do with these kinda user input values,

100
00:05:58.781 --> 00:06:00.293
one of them is trim.

101
00:06:00.293 --> 00:06:01.350
We strip any leading or

102
00:06:01.350 --> 00:06:04.980
trailing white space from the bound
string that's a really common use case.

103
00:06:04.980 --> 00:06:07.481
So it offers that right out of the gate.

104
00:06:07.481 --> 00:06:10.090
V- model.number changes
strings to number inputs.

105
00:06:10.090 --> 00:06:13.510
If you're working with credit cards or
payments, this is really awesome because

106
00:06:13.510 --> 00:06:16.470
you don't have to worry that somebody is
gonna [LAUGH] just write their name or

107
00:06:16.470 --> 00:06:19.980
something, some kind of
other user data there.

108
00:06:19.980 --> 00:06:24.300
We have v- model.lazy which won't
calculate the content automatically.

109
00:06:24.300 --> 00:06:26.520
You saw that we were auto updating and

110
00:06:26.520 --> 00:06:28.990
running those updates
every single time I typed.

111
00:06:28.990 --> 00:06:32.010
Well, there are instances where you
don't necessarily need to do that.

112
00:06:32.010 --> 00:06:34.710
You're not needing to store
every single keystroke.

113
00:06:34.710 --> 00:06:38.740
You can save v-model.lazy and
capture it on an event instead.

114
00:06:38.740 --> 00:06:41.750
So when somebody submits a form
that's when you get the user data,

115
00:06:41.750 --> 00:06:45.570
not from every single key press.

116
00:06:45.570 --> 00:06:46.956
So, that's actually how this is done.

117
00:06:46.956 --> 00:06:51.750
I wrote v-model.lazy and I'm storing
the data until I actually hit that button,

118
00:06:51.750 --> 00:06:53.920
because, I don't actually
need it until that time.

119
00:06:53.920 --> 00:06:56.779
So, it kind of helps me with performance.

120
00:06:56.779 --> 00:07:01.400
All right, we talked about the model,
we talked about the form.

121
00:07:01.400 --> 00:07:04.290
Let's talk about some real
true conditional rendering.

122
00:07:04.290 --> 00:07:07.674
We've got v-if and v-show,
it's pretty straight forward,

123
00:07:07.674 --> 00:07:12.430
it's a conditional that would display
information based on the requirements.

124
00:07:12.430 --> 00:07:16.850
But it's not just for HTML elements,
you can show templates, you can show

125
00:07:16.850 --> 00:07:22.230
components, you can show large pieces of
data, you can show small pieces of data.

126
00:07:22.230 --> 00:07:24.580
It's really super powerful.

127
00:07:24.580 --> 00:07:27.930
So if we go into this demo here,

128
00:07:27.930 --> 00:07:34.060
I can say Al Pastor, and you can see
that that button shows up as I'm typing.

129
00:07:34.060 --> 00:07:36.380
I'm actually gonna open
this one in another window.

130
00:07:37.440 --> 00:07:41.130
So we're gonna close this CSS pane.

131
00:07:41.130 --> 00:07:46.228
And we've got tacos is an empty string,
it starts off as an empty string.

132
00:07:46.228 --> 00:07:51.620
So my v-if, my conditional here, is
just waiting for some tacos to be there.

133
00:07:51.620 --> 00:07:55.840
Right now, it's an empty string, so
v-if will not apply, so I can say,

134
00:07:55.840 --> 00:08:02.120
al pastor again That is my favorite taco
and that button will appear or not appear.

135
00:08:02.120 --> 00:08:07.710
Let's go look at the DOM for just a second
and by that I mean like the actual DOM.

136
00:08:07.710 --> 00:08:10.270
When we use VF.

137
00:08:10.270 --> 00:08:12.710
If we look inside of our elements here,

138
00:08:12.710 --> 00:08:16.590
we have this like empty comment
that's just sitting there.

139
00:08:16.590 --> 00:08:20.960
And as soon as we start typing,
Carne asada.

140
00:08:22.030 --> 00:08:25.870
You can see that that button shows up.

141
00:08:25.870 --> 00:08:30.510
And if I delete this it turns
back into that comment right?

142
00:08:30.510 --> 00:08:35.390
So vf will literally unmount and
remount that element into the dom.

143
00:08:35.390 --> 00:08:37.850
It will not exist during that time.

144
00:08:37.850 --> 00:08:40.010
So what is v show?

145
00:08:40.010 --> 00:08:45.030
These show if we change this
V if tacos to V show tacos.

146
00:08:45.030 --> 00:08:46.950
It has the same functionality.

147
00:08:46.950 --> 00:08:50.970
I can say like hi and
that button will show up or disappear.

148
00:08:50.970 --> 00:08:53.310
So let's go look at the dom again.

149
00:08:53.310 --> 00:08:58.180
So we've got this high and
if we look at the button and

150
00:08:58.180 --> 00:09:02.270
then I delete this, you can see
that that display none comes up.

151
00:09:02.270 --> 00:09:06.960
So the difference between V if and V show
is that V if is completely unmounting and

152
00:09:06.960 --> 00:09:08.060
remounting that element.

153
00:09:08.060 --> 00:09:11.270
V show is just toggling its visibility for
us.

154
00:09:11.270 --> 00:09:13.760
So, there are different use cases for
both, right?

155
00:09:13.760 --> 00:09:18.400
If you have user content where you know
the users gonna be clicking that thing,

156
00:09:18.400 --> 00:09:22.370
and making it appear or disappear a lot,
then you probably wanna use vshow.

157
00:09:22.370 --> 00:09:26.130
Because you want that thing in the DOM,
and that will be more performant because

158
00:09:26.130 --> 00:09:29.680
it's not gonna have to do so
much work to have that show up.

159
00:09:29.680 --> 00:09:33.150
But if you have something like a full
template or a full component or

160
00:09:33.150 --> 00:09:37.570
something that you're only showing
in specific circumstances,

161
00:09:37.570 --> 00:09:39.640
your low time is gonna be much more or

162
00:09:39.640 --> 00:09:43.520
initially if you don't have to load out
that content and then display none.

163
00:09:43.520 --> 00:09:46.256
So that's a good time to use [V if.

164
00:09:48.770 --> 00:09:51.630
&gt;&gt; Sarah Drasner: V-if and v-else,
we can't have v-if without v-else, right?

165
00:09:51.630 --> 00:09:53.977
We also have v-else if [LAUGH].

166
00:09:53.977 --> 00:09:55.880
It's this one's pretty straight forward.

167
00:09:55.880 --> 00:10:00.290
You conditionally render one thing or
another thing based on a condition.

168
00:10:00.290 --> 00:10:04.830
So in this case I have a couple of v-ifs,
I have one v-if for tacos.

169
00:10:04.830 --> 00:10:07.270
And I say do you like tacos?

170
00:10:07.270 --> 00:10:11.510
Yes, is thumbs up and
no is, you're a monster.

171
00:10:11.510 --> 00:10:17.620
And so you can see how we're
rendering all of this if we go over,

172
00:10:17.620 --> 00:10:20.090
if we actually look a little bit closer.

173
00:10:20.090 --> 00:10:23.518
You know already that tacos is
probably an empty string, right?

174
00:10:23.518 --> 00:10:24.920
Let's go check that out.

175
00:10:24.920 --> 00:10:26.370
It is definitely an empty string.

176
00:10:27.410 --> 00:10:31.800
And that whole thing is not
gonna show up initially because

177
00:10:31.800 --> 00:10:36.170
I'm saying pv if tacos equals yes.

178
00:10:36.170 --> 00:10:40.340
And note the string that I'm
using here if tacos equals yes.

179
00:10:40.340 --> 00:10:41.560
Then I get thumbs up.

180
00:10:41.560 --> 00:10:44.550
But, else is going to
be the other condition.

181
00:10:44.550 --> 00:10:46.680
So, I don't want this
showing up initially,

182
00:10:46.680 --> 00:10:50.860
because I don't want to just
show the no originally.

183
00:10:50.860 --> 00:10:53.718
So, now I'm able to toggle
those conditions, and

184
00:10:53.718 --> 00:10:55.450
you could see one or the other.

185
00:10:59.097 --> 00:11:01.080
&gt;&gt; Sarah Drasner: V bind,
this is another favorite.

186
00:11:01.080 --> 00:11:02.260
I have two favorites.

187
00:11:02.260 --> 00:11:04.615
Actually I have three favorites.

188
00:11:04.615 --> 00:11:07.890
[LAUGH].
V bind is super super powerful, and

189
00:11:07.890 --> 00:11:12.115
it's going to be even more powerful
when we start working with props later.

190
00:11:12.115 --> 00:11:15.300
V-bind is written like this,
but that's long to type for

191
00:11:15.300 --> 00:11:17.080
something that we're going to use so
often.

192
00:11:17.080 --> 00:11:19.090
So there's a shortcut,
and that's the colon.

193
00:11:19.090 --> 00:11:21.840
I'm mostly going to use
the shortcuts from here on in,

194
00:11:21.840 --> 00:11:24.940
because I think that
they're a lot cleaner.

195
00:11:24.940 --> 00:11:26.650
You can write it either way.

196
00:11:26.650 --> 00:11:28.250
That's up to you.

197
00:11:28.250 --> 00:11:31.140
It's one of the most useful directives so
there's a shortcut.

198
00:11:31.140 --> 00:11:33.650
There's so many things we can use it for,
we can use it for class and

199
00:11:33.650 --> 00:11:38.580
style binding, creating dynamic props,
any kind of thing like this.

200
00:11:38.580 --> 00:11:41.690
So if we have something like,
here's that button again,

201
00:11:41.690 --> 00:11:44.270
but this time the button is in the dum.

202
00:11:44.270 --> 00:11:46.360
And if I write, thingy.

203
00:11:47.560 --> 00:11:50.490
You can see it show up or not show up but

204
00:11:50.490 --> 00:11:54.020
in active state or
kind of a disabled state.

205
00:11:54.020 --> 00:11:56.240
So here we're v binding.

206
00:11:56.240 --> 00:11:59.920
So v bind or that colon class, yep?

207
00:12:00.940 --> 00:12:04.370
&gt;&gt; Speaker 2: Could you just type the what
it looks like with the v bind part?

208
00:12:04.370 --> 00:12:06.360
&gt;&gt; Sarah Drasner: Sure.
&gt;&gt; Speaker 2: As suppose to the shortcut.

209
00:12:07.700 --> 00:12:08.550
&gt;&gt; Sarah Drasner: I'm sorry.
In the-

210
00:12:08.550 --> 00:12:09.627
&gt;&gt; Speaker 2: In the HTML.

211
00:12:15.170 --> 00:12:17.250
&gt;&gt; Sarah Drasner: Whoa, whoa, whoa.

212
00:12:17.250 --> 00:12:18.910
Sorry, let me open it in the other window.

213
00:12:23.470 --> 00:12:28.720
So it would be v bind and
then I'll save it.

214
00:12:28.720 --> 00:12:30.980
So that it and then it goes like that.

215
00:12:30.980 --> 00:12:34.040
So basically that colon is still there.

216
00:12:34.040 --> 00:12:39.630
But the shortcut is just
eliminating the V bind.

217
00:12:39.630 --> 00:12:42.550
Actually we'll just stay in
this window cuz that's a nice.

218
00:12:42.550 --> 00:12:44.150
Get rid of the CSS.

219
00:12:44.150 --> 00:12:45.770
We have tacos, which is an empty string.

220
00:12:45.770 --> 00:12:49.210
You're used to that,
tacos are empty strings today I guess.

221
00:12:49.210 --> 00:12:52.070
And we have this activeClass is active,

222
00:12:52.070 --> 00:12:54.650
that's why I had the CSS window open,
right.

223
00:12:54.650 --> 00:13:00.000
So that you can actually see that button
.active has a background of orange red so

224
00:13:00.000 --> 00:13:01.940
that's the thing that we're toggling.

225
00:13:01.940 --> 00:13:07.170
You can toggle any kind of
styling that you need here.

226
00:13:07.170 --> 00:13:11.495
You can see that I'm just using
a turn area expression in here.

227
00:13:11.495 --> 00:13:15.120
Ternary operators are really
useful in directives.

228
00:13:15.120 --> 00:13:17.840
You can't write longer
functions in directives.

229
00:13:17.840 --> 00:13:19.315
We'll use methods for that but

230
00:13:19.315 --> 00:13:21.932
if it's something simple
then you can use ternaries.

231
00:13:25.137 --> 00:13:28.600
&gt;&gt; Sarah Drasner: All right, so
we can also do interactive style binding.

232
00:13:28.600 --> 00:13:34.890
So if we wanna make perspective work,
and have some weird Tron thing,

233
00:13:34.890 --> 00:13:39.920
cuz I know this is a totally typical use
case, we can do something like this.

234
00:13:39.920 --> 00:13:44.110
You might have seen demos like
this done with CSS variables and

235
00:13:44.110 --> 00:13:48.800
connecting them to JavaScript, but
this is super easily done in View.

236
00:13:48.800 --> 00:13:50.900
I'm binding to the style and

237
00:13:50.900 --> 00:13:56.330
changing the perspective origin
based on e client x for the mouse.

238
00:13:56.330 --> 00:13:58.930
We're going to dig into methods
a little bit more later, so

239
00:13:58.930 --> 00:14:02.410
don't really worry if it's befuddling now.

240
00:14:02.410 --> 00:14:03.350
Yes?

241
00:14:03.350 --> 00:14:07.540
&gt;&gt; Speaker 2: Well Jennifer's asking
a question on the v-if portion,

242
00:14:07.540 --> 00:14:08.950
why did you have it twice?

243
00:14:10.030 --> 00:14:11.246
&gt;&gt; Sarah Drasner: Why did I have the v-if?

244
00:14:11.246 --> 00:14:13.090
&gt;&gt; Speaker 2: The v-if
twice in your previous-

245
00:14:13.090 --> 00:14:14.020
&gt;&gt; Sarah Drasner: Yeah, I mentioned

246
00:14:14.020 --> 00:14:14.690
that actually.

247
00:14:14.690 --> 00:14:19.298
So if we go back to v-if,
it's because initially,

248
00:14:19.298 --> 00:14:22.980
this v-else would show up, right?

249
00:14:22.980 --> 00:14:25.520
Like there are a couple of different
ways I could have written this.

250
00:14:25.520 --> 00:14:27.730
I could have used an LSF as well.

251
00:14:27.730 --> 00:14:33.030
But initially, this v if tacos is yes.

252
00:14:33.030 --> 00:14:38.030
Having nothing there is not yes,
so that v else would have,

253
00:14:38.030 --> 00:14:41.990
you know, shown up as, you know, another
thing so I don't want no, I'm a monster.

254
00:14:41.990 --> 00:14:43.890
I actually don't want any of this.

255
00:14:43.890 --> 00:14:47.950
Showing up, I might put more data in
there.I just don't want any of it

256
00:14:47.950 --> 00:14:50.130
to occur until I'm ready for it.

257
00:14:50.130 --> 00:14:53.430
That's a stylistic decision I could
have written it another way and

258
00:14:53.430 --> 00:14:55.010
it would have worked as well.

259
00:14:55.010 --> 00:14:57.028
&gt;&gt; Speaker 2: If you delete
the first v if toggles,

260
00:14:57.028 --> 00:14:59.340
it should still run the same way, right?

261
00:14:59.340 --> 00:15:01.770
&gt;&gt; Sarah Drasner: No,
if I delete the first v if toggles-

262
00:15:01.770 --> 00:15:02.470
&gt;&gt; Speaker 2: You leave

263
00:15:02.470 --> 00:15:04.550
the div part there.

264
00:15:04.550 --> 00:15:08.746
You just remove the V if toggles from it
and it'd just explain empty div correct?

265
00:15:08.746 --> 00:15:09.360
&gt;&gt; Sarah Drasner: It will show.

266
00:15:09.360 --> 00:15:13.860
&gt;&gt; [INAUDIBLE]
&gt;&gt; Sarah Drasner: No, you're a monster.

267
00:15:14.920 --> 00:15:19.190
I have to run it so because

268
00:15:19.190 --> 00:15:23.880
I'm not using that V if statement to
hide all of this information, basically.

269
00:15:26.240 --> 00:15:32.421
I could have written it like V else if,
as well but that's up to you.

270
00:15:37.167 --> 00:15:39.795
&gt;&gt; Sarah Drasner: Cool.
So, we've looked at now how we combined

271
00:15:39.795 --> 00:15:44.085
a style, so we don't even necessarily need
to go into css and make a class for this.

272
00:15:44.085 --> 00:15:47.625
We can actually have things be
super interactive right away

273
00:15:47.625 --> 00:15:50.548
just by binding a style in this pen.

274
00:15:50.548 --> 00:15:54.930
V-ONCE and V-PRE,
these are not quite as useful.

275
00:15:54.930 --> 00:15:59.260
V-ONCE will not update once it's rendered.

276
00:15:59.260 --> 00:16:02.870
So it'll only update on that first
time you entered it into the DOM, and

277
00:16:02.870 --> 00:16:05.480
then on user input, it will not change.

278
00:16:05.480 --> 00:16:08.060
V-PRE is a little bit more useful.

279
00:16:08.060 --> 00:16:10.890
It will print out the inner
text exactly how it is so

280
00:16:10.890 --> 00:16:14.100
it's good for if you need to
document your Vue components.

281
00:16:14.100 --> 00:16:18.790
It will actually show the mustache
templates in every piece that you need

282
00:16:18.790 --> 00:16:20.950
in order to work with it.

283
00:16:20.950 --> 00:16:24.980
So I'll actually go through this and then
we'll make it a little bit more clear.

284
00:16:24.980 --> 00:16:26.860
What is your favorite kind of taco?

285
00:16:26.860 --> 00:16:30.950
I like Al Pastor tacos, so here we've got,
what is your favorite kind of taco?

286
00:16:30.950 --> 00:16:35.120
Actually, I'll go into the instance so
that you can see what I'm working with.

287
00:16:35.120 --> 00:16:39.110
In tacos, I initially have,
I like Al Pastor tacos.

288
00:16:39.110 --> 00:16:42.985
In the HTML,
I have this v input v model for,

289
00:16:42.985 --> 00:16:47.530
we're establishing
a relationship with that, tacos.

290
00:16:47.530 --> 00:16:51.360
And then when I type and
then I have v wants beneath it,

291
00:16:51.360 --> 00:16:54.680
v wants tacos and
then I am outputting tacos.

292
00:16:54.680 --> 00:16:56.870
And then if I type in here,

293
00:16:56.870 --> 00:17:01.490
you can see that I like
Al Pastor tacos is not updating.

294
00:17:01.490 --> 00:17:07.330
So I could write I like
carne asada instead.

295
00:17:07.330 --> 00:17:09.980
And that will actually update
that view instance but

296
00:17:09.980 --> 00:17:12.540
it won't update this view once.

297
00:17:12.540 --> 00:17:15.560
I'm outputting the state down here.

298
00:17:15.560 --> 00:17:17.340
I'm outputting this data.

299
00:17:17.340 --> 00:17:21.728
Basically, whatever the view instance is
using this is kinda like a little trick.

300
00:17:21.728 --> 00:17:25.548
I'm rating pre-tags here and
then I'm outputting the data.

301
00:17:25.548 --> 00:17:27.340
And any time you see this $,

302
00:17:27.340 --> 00:17:32.727
you know it's something that's available
that's special from the view instance.

303
00:17:32.727 --> 00:17:35.550
So this is kind of great for debugging.

304
00:17:35.550 --> 00:17:41.036
If you don't want to keep going back and
forth to dev tools or debug Windows or

305
00:17:41.036 --> 00:17:45.766
anything, you can output what is
going on in your data directly.

306
00:17:45.766 --> 00:17:47.062
Yep?
&gt;&gt; Speaker 2: Is this like the trick that

307
00:17:47.062 --> 00:17:48.740
they do with JSON stringify thingy?

308
00:17:48.740 --> 00:17:50.190
&gt;&gt; Sarah Drasner: Yes,
it's exactly the same thing.

309
00:17:50.190 --> 00:17:52.050
So if you've worked with React before,

310
00:17:52.050 --> 00:17:58.060
there's a similar way of
debugging in React as well.

311
00:17:58.060 --> 00:18:01.060
And part of the reason I
do it on this pen too,

312
00:18:01.060 --> 00:18:05.640
aside from you needing to
see the differences here,

313
00:18:06.720 --> 00:18:11.841
is that, I can't type,
is that, we have this v-pre.

314
00:18:11.841 --> 00:18:14.950
V-pre is not the same as that pre tag.

315
00:18:14.950 --> 00:18:17.460
That pre tag is pretty printing this code,

316
00:18:17.460 --> 00:18:20.140
it's not going to rate
those handle bars data.

317
00:18:20.140 --> 00:18:23.480
It's actually going to
process that information.

318
00:18:23.480 --> 00:18:26.930
This v-pre is not going to
process this information.

319
00:18:26.930 --> 00:18:29.770
We have mustache view of tacos.

320
00:18:29.770 --> 00:18:34.200
So that is literally what
is exactly on the page.

321
00:18:34.200 --> 00:18:40.510
If I wrote data like I have below,
then you would see data.

322
00:18:40.510 --> 00:18:42.720
You wouldn't see it outputting.

323
00:18:42.720 --> 00:18:47.345
So even though we have v-pre,
it's not exactly the same as a pre tag.

324
00:18:51.012 --> 00:18:53.935
&gt;&gt; Sarah Drasner: All right V-ON or
@, another favorite.

325
00:18:53.935 --> 00:18:56.460
[LAUGH] It's extremely useful.

326
00:18:56.460 --> 00:18:57.610
So there's a shortcut.

327
00:18:57.610 --> 00:19:04.180
V-on is great for binding to events,
like click, mouse enter, mouse over.

328
00:19:04.180 --> 00:19:07.715
I had to learn the differences
between those again the other day,

329
00:19:07.715 --> 00:19:11.610
cuz I had to look it up for
the hundredth time.

330
00:19:11.610 --> 00:19:17.020
So you have all of these things available
to you, kind of like normal JavaScripty

331
00:19:17.020 --> 00:19:22.820
things, and you attack that to a DOM
element by writing that @ sign.

332
00:19:22.820 --> 00:19:27.200
You're able to pass in a parameter for
the event like e or event, but

333
00:19:27.200 --> 00:19:28.650
you don't have to do that.

334
00:19:28.650 --> 00:19:32.250
You will automatically assume that you're
gonna wanna capture that event and

335
00:19:32.250 --> 00:19:35.800
it will make that available to
you in a method if you need it.

336
00:19:35.800 --> 00:19:38.190
We can also use directly.

337
00:19:38.190 --> 00:19:40.622
So if we have something
like this back pack,

338
00:19:40.622 --> 00:19:43.400
I'm gonna actually open
this in another window.

339
00:19:43.400 --> 00:19:46.487
So let's say we have a store
with this backpack and

340
00:19:46.487 --> 00:19:50.971
when you're working with the store,
you probably want to add things but

341
00:19:50.971 --> 00:19:55.320
you don't want them to be able to
remove things lower than zero.

342
00:19:55.320 --> 00:19:57.670
You want them to stop at zero.

343
00:19:57.670 --> 00:20:02.580
So in the data, we have this
counter 0 that's really simple, and

344
00:20:02.580 --> 00:20:05.900
then we've got these button classes here.

345
00:20:05.900 --> 00:20:10.270
And, let's see if I can open this all the
way up, it's a little bit easier to see.

346
00:20:10.270 --> 00:20:12.236
We've got these button
classes that are the same.

347
00:20:12.236 --> 00:20:16.210
We have ternary expressions
in these @click counters.

348
00:20:16.210 --> 00:20:22.160
So I can say counter and increment it by
one, and that will increment it by one

349
00:20:22.160 --> 00:20:28.090
an then it will keep me from going
anything below that on the other side.

350
00:20:28.090 --> 00:20:31.630
So we can also connect these
to methods and we will do so

351
00:20:31.630 --> 00:20:33.300
in the next part of the course.

352
00:20:33.300 --> 00:20:36.770
But if you need it to just do,
execute just a small amount of logic,

353
00:20:36.770 --> 00:20:40.550
you can do it directly inside of those,
which is really nice.

354
00:20:40.550 --> 00:20:41.900
We can also do multiple bindings.

355
00:20:41.900 --> 00:20:44.720
There is a lot of times you
need a hover on desktop, and

356
00:20:44.720 --> 00:20:46.960
on mobile you need something
like a touch event.

357
00:20:48.040 --> 00:20:52.830
And so
because you need those kind of things,

358
00:20:52.830 --> 00:20:56.310
you're able to actually use
multiple things for that.

359
00:20:56.310 --> 00:21:00.340
So you can right click as on click and
then we'd have a message for on click.

360
00:21:00.340 --> 00:21:03.060
Key up on key up and so on and so forth.

361
00:21:04.200 --> 00:21:06.700
This is how I would write that
with the shortcut, just so

362
00:21:06.700 --> 00:21:07.940
that you can see the difference here.

363
00:21:07.940 --> 00:21:10.030
So v-on versus @.

364
00:21:11.670 --> 00:21:14.010
We have modifiers, yay modifiers.

365
00:21:14.010 --> 00:21:15.745
We don't have to keep
reinventing the wheel.

366
00:21:15.745 --> 00:21:19.929
mousemove.stop is comparable
to e.stopPropogation.

367
00:21:19.929 --> 00:21:23.000
mousemove.prevent is
like e.preventDefault.

368
00:21:23.000 --> 00:21:25.840
If you wanna keep a form
from re-submitting,

369
00:21:25.840 --> 00:21:31.630
you can do @submit.prevent and it will
keep that form from reloading the page.

370
00:21:31.630 --> 00:21:37.850
@click.once is not the same thing as
v-once, but kind of similar concept.

371
00:21:37.850 --> 00:21:40.750
The click event can only be
triggered once in that instance, so

372
00:21:40.750 --> 00:21:44.550
sometimes you wanna disable that
click right after it fires.

373
00:21:44.550 --> 00:21:45.710
That's how you would do it.

374
00:21:45.710 --> 00:21:51.080
@click.native is so that you can
listen to native events in the DOM.

375
00:21:51.080 --> 00:21:55.660
This is kind of edge case thing, there's
not a lot of things that you need where

376
00:21:55.660 --> 00:21:59.110
you need to capture the real DOM and
not work with the virtual DOM.

377
00:21:59.110 --> 00:22:01.343
But there are some instances
where you might need that.

378
00:22:01.343 --> 00:22:05.803
So Vue's got your back there as well and
you can capture native events.

379
00:22:05.803 --> 00:22:11.881
There are keycodes available to you,
like .enter and .spacebar or whatever.

380
00:22:11.881 --> 00:22:15.815
That might not be one actually,
something like that.

381
00:22:15.815 --> 00:22:17.768
There are keycodes available to you.

382
00:22:17.768 --> 00:22:19.560
But you can also configure your own.

383
00:22:19.560 --> 00:22:23.140
If you decided you wanted
to make a game with Vue,

384
00:22:23.140 --> 00:22:28.590
you could make key bindings with
the arrows and things like that.

385
00:22:28.590 --> 00:22:33.550
V-HTML, it's great for strings that have
HTML elements that need to be rendered.

386
00:22:33.550 --> 00:22:38.700
And what I mean by that is if you
have something in this data tab,

387
00:22:38.700 --> 00:22:43.700
we have tacos, and
I actually have a link inside this string.

388
00:22:43.700 --> 00:22:47.790
I don't want the string to output that &lt;a&gt;
tag and everything that's inside that &lt;a&gt;

389
00:22:47.790 --> 00:22:51.630
tag, I want to just output it
with the string attached so

390
00:22:51.630 --> 00:22:57.150
that I can hit the Al Pastor, we can
go make ourselves some Al Pastor tacos.

391
00:22:57.150 --> 00:23:03.830
So that will actually parse of
the strong tags and things like that.

392
00:23:03.830 --> 00:23:06.830
You should be really wary
when you use this, and

393
00:23:06.830 --> 00:23:11.720
don't use it for user-generated content,
because it's a security issue.

394
00:23:11.720 --> 00:23:15.870
If I wanna hack you,
right now I'm just using an alert.

395
00:23:15.870 --> 00:23:18.900
But I hacked you and
I stole all your tacos.

396
00:23:18.900 --> 00:23:20.650
I could do that if I was a user and

397
00:23:20.650 --> 00:23:23.430
I wanted to do some sort
of cross site scripting.

398
00:23:23.430 --> 00:23:25.820
So don't allow users to

399
00:23:25.820 --> 00:23:30.020
give you any information that you're
then outputting with the HTML.

400
00:23:31.290 --> 00:23:36.170
V-Text is similar to using
moustache templates.

401
00:23:36.170 --> 00:23:40.140
This is my least favorite of all the
directives because it's pretty much just

402
00:23:40.140 --> 00:23:41.868
the same as the moustache template.

403
00:23:41.868 --> 00:23:47.120
V-text tacos, tacos in here,
it's the same, it's the same.

404
00:23:47.120 --> 00:23:53.170
I like Carne Asada.

405
00:23:53.170 --> 00:23:57.470
And you can see both of them update,
it works very, very similarly.

406
00:23:57.470 --> 00:24:00.860
It's recommended to use
mustache templates instead.

407
00:24:00.860 --> 00:24:02.830
You'll find that in the docs and
things like that.

408
00:24:04.060 --> 00:24:07.370
I made a couple of different resources for

409
00:24:07.370 --> 00:24:10.460
you, like this table
that has all of these.

410
00:24:10.460 --> 00:24:14.640
If you want to check it out,
I wrote a big Vue guide on css-tricks, and

411
00:24:14.640 --> 00:24:18.610
all of that table and information is
there if you need to go to that link.

