WEBVTT

1
00:00:00.050 --> 00:00:04.620
&gt;&gt; Sarah Drasner: In order to use Vuex,
we have to npm and install --c, or

2
00:00:04.620 --> 00:00:07.380
we say, yarn add vuex.

3
00:00:07.380 --> 00:00:11.530
I typically set it up this way
within my source directory,

4
00:00:11.530 --> 00:00:13.270
I create another directory named store.

5
00:00:13.270 --> 00:00:16.070
Remember, I had created that other
directory named component before.

6
00:00:17.650 --> 00:00:18.990
This is a preference.

7
00:00:18.990 --> 00:00:21.390
You could also just make
a store.js file and

8
00:00:21.390 --> 00:00:25.110
have it chilling in that source directory,
if you wanted to.

9
00:00:25.110 --> 00:00:29.690
The reason why I put a store directory
there and put that single file in store

10
00:00:29.690 --> 00:00:34.920
directory is there are cases with a giant
application where you might even want

11
00:00:34.920 --> 00:00:39.950
to break up that file into several files,
and manage the state in a different way.

12
00:00:39.950 --> 00:00:44.210
If I keep that in one
directory from the GetGo,

13
00:00:44.210 --> 00:00:47.550
if I get into a situation
where I need to refactor,

14
00:00:47.550 --> 00:00:51.170
move it into a few different files,
I'm already in a place to do that.

15
00:00:51.170 --> 00:00:56.170
I don't have to rewrite paths in a bunch
of components or anything like that.

16
00:00:56.170 --> 00:01:00.980
But again that's a preference, you can
create that store file wherever you want.

17
00:01:02.430 --> 00:01:06.780
So the initial set up in store.js
would look something like this.

18
00:01:06.780 --> 00:01:12.230
This is the vstore sublime snippet,
if you wanted to use sublime.

19
00:01:12.230 --> 00:01:16.970
So you would import Vue from vue,
import Vuex from vuex.

20
00:01:16.970 --> 00:01:21.992
We'd say, Vue.use(Vuex),
and import const store and

21
00:01:21.992 --> 00:01:25.513
I'm gonna go into more depth on this too.

22
00:01:25.513 --> 00:01:28.377
I know that I'm like throwing
a lot at you right now.

23
00:01:28.377 --> 00:01:31.027
State and key and value.

24
00:01:31.027 --> 00:01:36.947
So that's the smallest state store you
could possibly make ever in the world.

25
00:01:36.947 --> 00:01:42.206
This tiny little key value state store.

26
00:01:42.206 --> 00:01:46.813
In our main.js file,
we'd perform the following updates, so

27
00:01:46.813 --> 00:01:52.288
we look at that main.js file and we're
gonna look at it in real life as well.

28
00:01:52.288 --> 00:01:56.576
Import Vue from vue, import App from
App.view, would import store from

29
00:01:56.576 --> 00:02:00.885
store/store, that was the direct
restructure I had mentioned before.

30
00:02:00.885 --> 00:02:02.666
And we have store, store.

31
00:02:02.666 --> 00:02:05.945
So the things that changed about this
file, it's pretty much the same.

32
00:02:05.945 --> 00:02:08.195
Here are the things that
changed about this file.

33
00:02:08.195 --> 00:02:11.391
We have import store from store/store and

34
00:02:11.391 --> 00:02:15.125
then we have store/store,
that's the second.

35
00:02:15.125 --> 00:02:21.228
So we can say store/store or we can just
say store, because it's redundant and

36
00:02:21.228 --> 00:02:25.159
ES6 understands that
that's what we might need.

37
00:02:25.159 --> 00:02:28.409
In our store,
we have a few different things.

38
00:02:28.409 --> 00:02:30.009
You saw that we had our state.

39
00:02:30.009 --> 00:02:33.319
Our state is very similar to the way
that we've been housing our data so far.

40
00:02:33.319 --> 00:02:37.696
We have data in a function, and we have
a few different values that we're using.

41
00:02:37.696 --> 00:02:41.148
So state is pretty much the same thing,
but it's a centralized place for

42
00:02:41.148 --> 00:02:42.060
all of that state.

43
00:02:42.060 --> 00:02:45.930
The other things that we
have in this are getters.

44
00:02:45.930 --> 00:02:50.030
Getters will make values able to
show statically in our templates.

45
00:02:50.030 --> 00:02:53.950
In other words, getters can read
the value, but not mutate the state.

46
00:02:53.950 --> 00:02:58.300
So you can think about getters as kind
of equivalent to computed values.

47
00:02:58.300 --> 00:03:00.440
That's kind of how we
are using computed values.

48
00:03:00.440 --> 00:03:02.500
It's a different view on that same data.

49
00:03:02.500 --> 00:03:07.323
We're not mutating that data,
we're not mutating the state,

50
00:03:07.323 --> 00:03:12.877
we're using getters to have a different
view of that state to begin with.

51
00:03:12.877 --> 00:03:16.316
Mutations will allow us
to update the state.

52
00:03:16.316 --> 00:03:18.662
They'll always be synchronous,
every single time,

53
00:03:18.662 --> 00:03:20.397
they're always gonna be synchronous.

54
00:03:20.397 --> 00:03:23.801
Mutations are the only way
to change data in the store,

55
00:03:23.801 --> 00:03:26.766
that is the only way to
change data in the store.

56
00:03:26.766 --> 00:03:30.246
So you might say, so
how do I make asynchronous things happen.

57
00:03:30.246 --> 00:03:34.027
We will use actions to update
the state asynchronously.

58
00:03:34.027 --> 00:03:36.906
But we'll always use an existing mutation.

59
00:03:36.906 --> 00:03:40.106
So you can't just create an action and
mutate the state.

60
00:03:40.106 --> 00:03:45.156
You'd have to create a mutation and then
use that mutation inside of an action.

61
00:03:45.156 --> 00:03:49.084
This can be really helpful if you need to
perform a few different mutations at once

62
00:03:49.084 --> 00:03:50.550
in a particular order.

63
00:03:50.550 --> 00:03:52.610
Or, if you need to reach out to a server.

64
00:03:52.610 --> 00:03:56.550
It kind of doing it this way is really
nice because you solve any kind of

65
00:03:56.550 --> 00:03:58.950
sequencing or ordering problems.

66
00:03:58.950 --> 00:04:03.040
You don't have a situation where you're
executing a couple of things but

67
00:04:03.040 --> 00:04:06.380
really while the server, you're waiting
to get some response from the server.

68
00:04:06.380 --> 00:04:10.470
Something that was suppose to follow is
being executed, you can kind of make sure

69
00:04:10.470 --> 00:04:13.475
that you're executing things
exactly when you need to be.

70
00:04:13.475 --> 00:04:17.223
So mutations are like,
how we've been using methods.

71
00:04:17.223 --> 00:04:21.960
They're any kind of change to
the state that needs to occur.

72
00:04:21.960 --> 00:04:25.002
And actions will take
an existing mutation and

73
00:04:25.002 --> 00:04:30.083
apply some sort of asynchronous activity,
either reaching out to a server.

74
00:04:30.083 --> 00:04:34.671
Here, we're gonna use set timeouts just so
you get the idea of them.

75
00:04:34.671 --> 00:04:35.963
We separate actions and

76
00:04:35.963 --> 00:04:39.587
mutations because we don't want
to get into an ordering problem.

77
00:04:39.587 --> 00:04:42.191
All right,
we've got a basic abstract example,

78
00:04:42.191 --> 00:04:44.618
we're gonna walk through
this really quick.

79
00:04:44.618 --> 00:04:50.483
We had kind of talked about that store,
and we've just said key value before.

80
00:04:50.483 --> 00:04:53.403
This is kind of like building
off of that example.

81
00:04:53.403 --> 00:04:58.384
So in state, we'd maybe have
something like counter is 0.

82
00:04:58.384 --> 00:05:03.250
This getter again, like the computer had
value, this getter is allowing us to

83
00:05:03.250 --> 00:05:07.702
use this tripleCounter and
it's really saying

84
00:05:07.702 --> 00:05:12.620
state.counter * 3, whatever kind of
logic that we need to use it for.

85
00:05:14.210 --> 00:05:20.885
Mutation is mutating a state,
mutations are always synchrounous.

86
00:05:20.885 --> 00:05:25.307
When we mutate the state with an argument,
we usually call it payload.

87
00:05:25.307 --> 00:05:30.386
That's just like industry standard so
we're showing it passed with payload,

88
00:05:30.386 --> 00:05:34.855
we're passing in the state and
then also num, which is the payload and

89
00:05:34.855 --> 00:05:37.989
we're incrementing that
value by the num here.

90
00:05:37.989 --> 00:05:39.470
Now this is a lot.

91
00:05:39.470 --> 00:05:44.767
And I'll use the next couple of slides to
go into much more detail about this so

92
00:05:44.767 --> 00:05:50.085
that you don't feel like I'm overwhelming
you with just this information.

93
00:05:50.085 --> 00:05:53.709
And actions,
we're showing it passed with a payload,

94
00:05:53.709 --> 00:05:56.800
represented as asyncNum,
which is an object.

95
00:05:56.800 --> 00:05:58.593
So we've got this commit.

96
00:05:58.593 --> 00:06:03.365
We're passing an asyncNum,
we have the setTimeout and

97
00:06:03.365 --> 00:06:10.180
this asyncNum is an object so we can
say asyncNum.by and asyncNum.duration.

98
00:06:10.180 --> 00:06:13.555
It can also just be static
amounts if you want to.

99
00:06:13.555 --> 00:06:18.413
So okay, let's go a little bit further
into actions cuz that was a lot of things

100
00:06:18.413 --> 00:06:21.149
for you to understand very, very quickly.

101
00:06:21.149 --> 00:06:25.625
We have to pass on the context in actions.

102
00:06:25.625 --> 00:06:30.009
Context, we'll use context.state,
context.getter.

103
00:06:30.009 --> 00:06:33.830
The reason why we're not using
context.state directly is so

104
00:06:33.830 --> 00:06:38.827
that we avoid collisions because there's
a more complicated reason for this but

105
00:06:38.827 --> 00:06:43.330
we have different modules, and
then it can be name spaced differently.

106
00:06:43.330 --> 00:06:48.089
So in order to keep those from colliding
in actions, we have to pass in context.

107
00:06:48.089 --> 00:06:51.150
But we're actually gonna
abstract the context away.

108
00:06:51.150 --> 00:06:53.369
Typically, we don't use it like this.

109
00:06:53.369 --> 00:06:58.884
What we'll do is destructure it and
just say, instead of that,

110
00:06:58.884 --> 00:07:04.516
we'll pass in in parens commit,
and then say commit increment.

111
00:07:04.516 --> 00:07:09.995
So that's a little bit more legible,
a little bit clearer to read as well.

112
00:07:09.995 --> 00:07:14.669
If we're going to do some sort of
asynchronous calculation from this, so at

113
00:07:14.669 --> 00:07:19.798
first, we had that commit, we're passing
in commit increment, we have commit.

114
00:07:19.798 --> 00:07:22.798
We have setTimeout, and
we're committing increments.

115
00:07:22.798 --> 00:07:27.557
So increment would be a method
that we've already created.

116
00:07:27.557 --> 00:07:31.958
If we go back, increment was
something that we made in mutation.

117
00:07:31.958 --> 00:07:35.848
So we're taking that mutation and
mutations always have

118
00:07:35.848 --> 00:07:40.317
to be committed when we start to
use these in our component files.

119
00:07:40.317 --> 00:07:43.999
We're committing the mutation
in our templates, and

120
00:07:43.999 --> 00:07:48.088
we're also committing the mutation
in our actions as well.

121
00:07:48.088 --> 00:07:50.763
And so, we're committing this increment.

122
00:07:50.763 --> 00:07:56.580
And we have it happening after one
second if you note setTimeout,

123
00:07:56.580 --> 00:08:02.528
we are waiting for one second and
then we're doing that mutation.

124
00:08:02.528 --> 00:08:07.758
If we just did the mutation and let's say,
it's something that takes a long time and

125
00:08:07.758 --> 00:08:12.546
we are not using it asynchronously,
it can actually block up our application

126
00:08:12.546 --> 00:08:16.618
because they can only be synchronous,
and we want to avoid that.

127
00:08:16.618 --> 00:08:21.002
Those actions become really useful for
those mutations because we don't want to

128
00:08:21.002 --> 00:08:24.237
block up our application waiting for
something to happen.

129
00:08:24.237 --> 00:08:29.287
So if we're gonna use
this action in our actual

130
00:08:29.287 --> 00:08:34.219
component, we use a thing called dispatch.

131
00:08:34.219 --> 00:08:38.513
I will go over this part again, so
I'm going to go over it here and

132
00:08:38.513 --> 00:08:42.988
then we're gonna go over how they're
each used again in a second.

133
00:08:42.988 --> 00:08:44.039
We have methods and

134
00:08:44.039 --> 00:08:48.442
then we're going to say asyncIncrement,
I'm just calling it the same thing,

135
00:08:48.442 --> 00:08:51.940
I could call this something else,
I could call it go get tacos.

136
00:08:51.940 --> 00:08:57.620
And then we have this.$store.dispatch
(asyncIncrement).

137
00:08:57.620 --> 00:09:03.212
So I'm calling this and what it's going
to do is it's going to then reach out,

138
00:09:03.212 --> 00:09:07.872
and then it's going to set a time out and
execute, and commit that

139
00:09:07.872 --> 00:09:12.520
increment after waiting one second.
&gt;&gt; Speaker 2: Just

140
00:09:12.520 --> 00:09:15.220
a comment on the actions.
&gt;&gt; Sarah Drasner: What's that?

141
00:09:15.220 --> 00:09:16.639
&gt;&gt; Speaker 2: So on the actions,

142
00:09:16.639 --> 00:09:21.536
are you kinda using setTimeout as
an illustrative thing to show-

143
00:09:21.536 --> 00:09:22.785
&gt;&gt; Sarah Drasner: Yeah, just because it's

144
00:09:22.785 --> 00:09:25.122
a little bit easier than
also showing all of the-

145
00:09:25.122 --> 00:09:26.437
&gt;&gt; Speaker 2: Like doing an HTTP request

146
00:09:26.437 --> 00:09:28.462
is what you might be doing.
&gt;&gt; Sarah Drasner: Yeah,

147
00:09:28.462 --> 00:09:31.895
it's a lot to understand in general.

148
00:09:31.895 --> 00:09:37.075
So the setTimeout is kind of abstraction
so that you're not bogged down with some

149
00:09:37.075 --> 00:09:42.631
other details.
&gt;&gt; Sarah Drasner: So let's say,

150
00:09:42.631 --> 00:09:49.084
we need to change some of these values,
maybe we need to pass in a payload.

151
00:09:49.084 --> 00:09:51.364
If we needed to pass in
a different duration,

152
00:09:51.364 --> 00:09:53.710
here we're just hard
coding that one second.

153
00:09:53.710 --> 00:09:56.210
But let's say,
we need a different duration.

154
00:09:56.210 --> 00:10:01.339
We would then create this payload here,
and we say duration.

155
00:10:01.339 --> 00:10:07.499
And then, we would create an object
here where we say duration is 1,000.

156
00:10:07.499 --> 00:10:09.979
So that's how we updated
in those two places.

157
00:10:09.979 --> 00:10:13.571
So here, it's hard coded,
we're just calling asyncIncrement.

158
00:10:13.571 --> 00:10:20.110
If we want to dispatch with a payload,
we have duration, and then we're passing

159
00:10:20.110 --> 00:10:25.077
in an object where we have duration, yeah?
&gt;&gt; Speaker 3: If the object that you're

160
00:10:25.077 --> 00:10:29.535
passing in has only one property, does it
just somehow pull that single property?

161
00:10:29.535 --> 00:10:34.099
Cuz it seems to me you're
passing in an object with the-

162
00:10:34.099 --> 00:10:35.141
&gt;&gt; Sarah Drasner: Yeah, I mean,

163
00:10:35.141 --> 00:10:36.750
we can do it either way.

164
00:10:36.750 --> 00:10:41.680
We can pass in just the one but if you
need to build off of it in anyway and

165
00:10:41.680 --> 00:10:44.440
create more values, then it becomes

166
00:10:47.690 --> 00:10:51.840
easier to then kind of
update from that point.

167
00:10:51.840 --> 00:10:55.960
So if we need to do
something like this object.

168
00:10:55.960 --> 00:11:00.888
And that's actually kind of a typical
used case I would say is that we're not

169
00:11:00.888 --> 00:11:03.352
just passing in one argument to this,

170
00:11:03.352 --> 00:11:06.187
it's a little bit easier to update that.
&gt;&gt; Speaker 3: It

171
00:11:06.187 --> 00:11:10.378
looks like this exact example and
looks like you're passing an object that's

172
00:11:10.378 --> 00:11:12.997
the second parameter to setTimeout?
&gt;&gt; Sarah Drasner: We are,

173
00:11:12.997 --> 00:11:17.830
we're passing in an object and
that's going to be the duration.

174
00:11:17.830 --> 00:11:21.381
So this is destructuring, it's an ES6.
&gt;&gt; Speaker 3: So,

175
00:11:21.381 --> 00:11:23.189
it is destructuring right now.
&gt;&gt; Sarah Drasner: Yeah,

176
00:11:23.189 --> 00:11:25.720
it's destructuring.

177
00:11:25.720 --> 00:11:30.576
And so then, we can say asyncNum,
we pass in asyncNum, and

178
00:11:30.576 --> 00:11:33.600
then we can update this to by and dur.

179
00:11:33.600 --> 00:11:37.969
So then we can say, were asyncNum.by,

180
00:11:37.969 --> 00:11:43.889
asyncNum.dur, and
then we can update it in that way.

181
00:11:43.889 --> 00:11:48.664
So the way is that we would use all
of these things that we just talked

182
00:11:48.664 --> 00:11:53.570
about is on the component itself,
we'd use computed for getters.

183
00:11:53.570 --> 00:11:58.150
This makes sense because it's kind of
similar to computed values anyway.

184
00:11:58.150 --> 00:12:03.420
We have our computed and
we can use value directly in our code.

185
00:12:03.420 --> 00:12:07.371
We say return
this.$store.getters.tripleCounter,

186
00:12:07.371 --> 00:12:10.138
or whatever you want for that, example.

187
00:12:10.138 --> 00:12:15.953
But we basically use that as a computed
value because that's basically, where

188
00:12:15.953 --> 00:12:21.788
the same kind of dance that we are doing
is that different view on the same state.

189
00:12:21.788 --> 00:12:26.038
We'd used commit for mutations.

190
00:12:26.038 --> 00:12:29.143
So anytime we use a mutation,
we use commit,

191
00:12:29.143 --> 00:12:33.331
even if it's in the component,
even if it's in store.js.

192
00:12:33.331 --> 00:12:38.429
And then for asyncIncrement,
we us dispatch for the actions.

193
00:12:38.429 --> 00:12:43.488
So any time you use an action in one of
our components, we use asyncIncrement.

194
00:12:43.488 --> 00:12:48.829
So I'm gonna bring up this example where
we're doing a few different things here.

195
00:12:48.829 --> 00:12:54.483
So we've got,
&gt;&gt; Sarah Drasner: I tried

196
00:12:54.483 --> 00:13:00.630
to separate these out as much as possible
so that they were easier to understand.

197
00:13:00.630 --> 00:13:05.756
So if we go into vuex example,

198
00:13:05.756 --> 00:13:10.071
and I'll do subl first.

199
00:13:10.071 --> 00:13:19.379
And,
&gt;&gt; Sarah Drasner: Here

200
00:13:19.379 --> 00:13:21.810
we have the state from the store is zero.

201
00:13:21.810 --> 00:13:24.543
The getter for
tripleCounter from the store is zero.

202
00:13:24.543 --> 00:13:27.501
So that's that getter that
kind of computed value.

203
00:13:27.501 --> 00:13:31.573
Let's increment by two with a mutation,
we're gonna increment by two,

204
00:13:31.573 --> 00:13:35.923
you can see that that getter is changing
but it's always gonna be times three.

205
00:13:35.923 --> 00:13:40.606
Let's increment by 10
with an action async, so

206
00:13:40.606 --> 00:13:45.183
we wait one second and
then we increment by 10.

207
00:13:45.183 --> 00:13:48.504
And this is a really simple adjustment
store state with the component.

208
00:13:48.504 --> 00:13:51.356
I would never do this,
but people do do this.

209
00:13:51.356 --> 00:13:55.623
So I'm showing it to you,
I don't think that you should do this.

210
00:13:55.623 --> 00:13:59.664
But I've seen it in enough applications
now that I wanna call out to you,

211
00:13:59.664 --> 00:14:04.320
it's possible, but I don't think that
that's how you should be working with it.

212
00:14:04.320 --> 00:14:07.925
So here we go into the source,
and we're going into components.

213
00:14:07.925 --> 00:14:12.336
And I made a separate component for
each thing that you're gonna do so

214
00:14:12.336 --> 00:14:15.237
that it is a little bit
easier to understand.

215
00:14:15.237 --> 00:14:18.197
So here's our store directory,
like I said.

216
00:14:18.197 --> 00:14:19.725
We have our store here, and

217
00:14:19.725 --> 00:14:24.318
it's pretty similar to the stuff that we
mentioned that we would be working with.

218
00:14:24.318 --> 00:14:27.560
Then, in our main.js file,
remember I said,

219
00:14:27.560 --> 00:14:33.171
we're gonna import store from store,
here that is, and there is the store here.

220
00:14:33.171 --> 00:14:39.706
And then in the action,
let's start with the app.

221
00:14:39.706 --> 00:14:43.766
So I can say,
the state from the store is span, and

222
00:14:43.766 --> 00:14:48.132
then state and then in here,
in that computed value.

223
00:14:48.132 --> 00:14:50.851
Again, we're just accessing
the state from the store, but

224
00:14:50.851 --> 00:14:54.425
I'm still gonna use a computed value
because that computed value's going to be

225
00:14:54.425 --> 00:14:56.362
cashed until the dependency has changed.

226
00:14:56.362 --> 00:14:59.910
So it's a good chance for
me to use computed value,

227
00:14:59.910 --> 00:15:02.891
just returning that state from the store.

228
00:15:02.891 --> 00:15:08.620
So, I'm gonna say state return
this.$store.state.counter.

229
00:15:08.620 --> 00:15:12.730
And it's going to be this,
and then $store.

230
00:15:12.730 --> 00:15:14.690
And we're able to use state.

231
00:15:14.690 --> 00:15:16.590
Remember, we saw that
earlier with getters.

232
00:15:16.590 --> 00:15:19.090
We can use the state right here.

233
00:15:19.090 --> 00:15:22.640
Then, in the getter,
we have something very similar.

234
00:15:22.640 --> 00:15:28.570
We have a computed value, we have triple
this.$store.getters.tripleCounter,

235
00:15:28.570 --> 00:15:30.380
and then we have triple passed in here.

236
00:15:31.610 --> 00:15:33.830
And then, in mutation,

237
00:15:33.830 --> 00:15:38.270
we can increment two with a mutation
button @click is increment.

238
00:15:38.270 --> 00:15:40.760
That's gonna call this method here.

239
00:15:40.760 --> 00:15:44.980
And the method is
this.$store.commit increment, and

240
00:15:44.980 --> 00:15:47.270
then we're passing in something like two.

241
00:15:47.270 --> 00:15:51.372
There's many different ways that we
could actually use this mutation,

242
00:15:51.372 --> 00:15:52.861
that's just an example.

243
00:15:52.861 --> 00:15:57.642
And then in the action,
we have, let's increment by,

244
00:15:57.642 --> 00:16:02.222
this should actually say ten,
within action async,

245
00:16:02.222 --> 00:16:06.700
button @click asyncInc,
and then in our methods,

246
00:16:06.700 --> 00:16:13.242
we say asyncInc this.$store.dispatch
asyncInc, and passing in 10.

247
00:16:13.242 --> 00:16:15.781
So if we go back to looking at that store,

248
00:16:15.781 --> 00:16:19.908
you can see that we're actually
committing this as our payload.

249
00:16:19.908 --> 00:16:20.867
This is our payload.

250
00:16:20.867 --> 00:16:22.589
Those are the things
that we were passing in.

251
00:16:24.170 --> 00:16:27.780
So that is all organized in the repo for
you.

252
00:16:27.780 --> 00:16:31.260
We just went over all
of this kind of stuff.

253
00:16:31.260 --> 00:16:35.010
So the getter is, I've kept these
in all in different slides for you.

254
00:16:35.010 --> 00:16:37.529
The getter, we're using a computed value.

255
00:16:37.529 --> 00:16:40.530
We're saying,
this.$store.getters.tripleCounter.

256
00:16:40.530 --> 00:16:46.187
And then in store.js, we are using
whatever logic we would like to do for

257
00:16:46.187 --> 00:16:48.989
that different take on that value.

258
00:16:48.989 --> 00:16:53.833
We have a mutation
methods @click increment.

259
00:16:53.833 --> 00:16:57.153
An increment we say, this.$store.commit.

260
00:16:57.153 --> 00:17:01.623
Remember, mutations are always committed
and actions are always dispatched.

261
00:17:01.623 --> 00:17:06.109
So we're always going to commit
it this way, in store.js.

262
00:17:06.109 --> 00:17:10.164
In async action,
we've got button asyncInc, and

263
00:17:10.164 --> 00:17:14.700
we've got $store.dispatch,
and this.store.js.

264
00:17:14.700 --> 00:17:20.616
And there are times when you have a lot of
stuff that you need to get from the store,

265
00:17:20.616 --> 00:17:22.965
and rewriting out new values for

266
00:17:22.965 --> 00:17:28.187
each one of these can get a little
arduous and painful and not at all dry.

267
00:17:28.187 --> 00:17:33.820
So Vuex allows us to do
a thing called map getters,

268
00:17:33.820 --> 00:17:39.319
mapActions, map mutations,
so you would say,

269
00:17:39.319 --> 00:17:44.836
in the same file at import
mapActions from vuex.

270
00:17:44.836 --> 00:17:49.300
And then I would be able to, with
a spread operator, say mapActions, and

271
00:17:49.300 --> 00:17:53.191
then say, all of the things that
I wanna go get from that source.

272
00:17:53.191 --> 00:17:55.744
So I don't have to keep
rewriting all of those values.

273
00:17:55.744 --> 00:17:58.279
Some people just write
it like this right away.

274
00:17:58.279 --> 00:18:03.310
So this map this.increment to
this.$store.commit increment.

275
00:18:03.310 --> 00:18:06.730
Actually that will be dispatched for
actions.

276
00:18:06.730 --> 00:18:12.410
So this allows us to still make our
own computer properties if we wish,

277
00:18:12.410 --> 00:18:16.590
because we could use these and

278
00:18:16.590 --> 00:18:21.570
then reuse them and create another method
below them that you uses that value.

279
00:18:21.570 --> 00:18:24.695
So we can make new computed
properties from these as well.

280
00:18:24.695 --> 00:18:29.020
If this doesn't fit our exact use case,
so that's pretty great.

281
00:18:29.020 --> 00:18:32.840
One thing though,
is that spread operators are not

282
00:18:32.840 --> 00:18:37.850
supported in all of these even
in newer babel necessarily.

283
00:18:37.850 --> 00:18:39.003
It depends on your build.

284
00:18:39.003 --> 00:18:42.718
So you might need babel preset stage 2, or

285
00:18:42.718 --> 00:18:46.650
babel plugin transform object rest spread.

286
00:18:46.650 --> 00:18:49.650
So you might have to yarn add, or

287
00:18:49.650 --> 00:18:55.222
NPM install one of these two
to get this working correctly.

288
00:18:55.222 --> 00:19:00.044
So if we're working with this,
if we're working with mapActions

289
00:19:00.044 --> 00:19:04.264
before we were doing that thing
where we were increment and

290
00:19:04.264 --> 00:19:09.140
then comma five or whatever in
that order to pass the payload.

291
00:19:09.140 --> 00:19:13.564
In this instance, we'd write @click,
and then the increment,

292
00:19:13.564 --> 00:19:18.225
we'd pass that in parens instead,
because we're not kind of using it

293
00:19:18.225 --> 00:19:21.874
exactly the same way, so
we pass the payload this way.

294
00:19:21.874 --> 00:19:25.191
And then store.js,
that's the same test there.

