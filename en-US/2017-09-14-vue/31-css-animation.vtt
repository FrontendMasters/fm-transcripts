WEBVTT

1
00:00:00.250 --> 00:00:03.330
&gt;&gt; Sarah Drasner: All right,
let's talk about CSS animation briefly.

2
00:00:03.330 --> 00:00:07.760
I know that we kind of said
that transition and CSS

3
00:00:07.760 --> 00:00:12.300
animation are two different things, but
we use the transition component for both.

4
00:00:12.300 --> 00:00:16.310
There's only one component
in View that's built in.

5
00:00:16.310 --> 00:00:18.170
We are still gonna use
the transition component, but

6
00:00:18.170 --> 00:00:19.730
we are gonna use it
a little bit differently.

7
00:00:21.000 --> 00:00:24.870
So, what we'll end up doing
when we use CSS animation

8
00:00:24.870 --> 00:00:29.070
within the transition component
is we're gonna give it a class.

9
00:00:29.070 --> 00:00:33.600
We're going to say, okay, when you're
interactive during that intermediary

10
00:00:33.600 --> 00:00:38.340
state, you're gonna need to plug
into this CSS animation class.

11
00:00:38.340 --> 00:00:40.490
And then it's going to go use that class.

12
00:00:40.490 --> 00:00:45.440
This is actually pretty great because that
means that we can plug into CS Animation

13
00:00:45.440 --> 00:00:46.400
libraries if we want.

14
00:00:46.400 --> 00:00:48.700
We don't have to write all
these animations from scratch,

15
00:00:48.700 --> 00:00:52.500
we can reuse animations if we want to.

16
00:00:52.500 --> 00:00:56.718
So if I say
the enter-active-class="toasty",

17
00:00:56.718 --> 00:00:59.890
I could say toasty 1s ease both.

18
00:00:59.890 --> 00:01:02.220
And then that is available to us.

19
00:01:02.220 --> 00:01:07.000
We could still be in that transition
component, we gave it a name and we were

20
00:01:07.000 --> 00:01:12.800
using the transition component for that
transition in that enter-active-class.

21
00:01:12.800 --> 00:01:16.960
We could do it that way as well, but
I think that this makes a little bit more

22
00:01:16.960 --> 00:01:21.970
sense because then you can reuse that
CSS animation in multiple places.

23
00:01:21.970 --> 00:01:26.000
Transitions, you're really
usually just transitioning from

24
00:01:26.000 --> 00:01:28.050
that first state to another.

25
00:01:28.050 --> 00:01:31.820
In CSS animations, maybe you're
doing something like a bounce, or

26
00:01:31.820 --> 00:01:33.780
you're doing something more involved,

27
00:01:33.780 --> 00:01:38.240
so it's more possible that you're going
to be reusing that again and again.

28
00:01:38.240 --> 00:01:43.330
So if you need to reuse it and be
a little bit more specific, you could say

29
00:01:43.330 --> 00:01:49.260
toasty for the enter-active and for the
leave-active, we're gonna say bounceOut.

30
00:01:49.260 --> 00:01:52.500
So you can hook into CSS
animation libraries.

31
00:01:52.500 --> 00:01:56.136
So if we want to bounce a ball here,
we'd have a button.

32
00:01:56.136 --> 00:02:00.480
And that's gonna just toggle the same
way that we were toggling that model.

33
00:02:00.480 --> 00:02:03.910
So we've got a transition component and

34
00:02:03.910 --> 00:02:07.870
we've got that v-if that it's wrapping,
that's important.

35
00:02:07.870 --> 00:02:11.398
So we've got the transition,
we've got the name as ballmove,

36
00:02:11.398 --> 00:02:14.260
the active-class is bouncein and

37
00:02:14.260 --> 00:02:18.920
the leave-class is rollout, because
we're doing something more involved.

38
00:02:18.920 --> 00:02:22.960
So this looks like a lot of stuff,
I know, I know, but

39
00:02:22.960 --> 00:02:25.550
actually, we're keeping this kind of dry.

40
00:02:25.550 --> 00:02:30.670
Rather than writing translate 3D and
then the number and

41
00:02:30.670 --> 00:02:34.230
then the y axis and then the zero over and
over and over again, we're writing

42
00:02:34.230 --> 00:02:39.050
a mix in that we're including, so
we're writing less code over all.

43
00:02:39.050 --> 00:02:42.138
The other thing to note is, in this 20%,

44
00:02:42.138 --> 00:02:46.320
40%, 60%, all of these,
they're the same value.

45
00:02:46.320 --> 00:02:49.770
So I'm not writing, 20%, 40%.

46
00:02:49.770 --> 00:02:55.800
So basically in this key frames bouncein,
if you're not familiar with CSS,

47
00:02:55.800 --> 00:02:59.910
I'm just stating what I wanted to do
at different percentages of time.

48
00:02:59.910 --> 00:03:03.990
So, if I'm gonna use a bounce, then I'm
going to want it to come up and then down,

49
00:03:03.990 --> 00:03:08.000
and then up and down and up and down and
get lower and lower every single time.

50
00:03:10.110 --> 00:03:16.270
I'm writing transform: translate3d because
I'm trying to hardware accelerate it.

51
00:03:17.330 --> 00:03:21.190
Hardware acceleration in the DOM doesn't
happen just right out of the gate.

52
00:03:21.190 --> 00:03:23.710
We have a few different
tricks up our sleeve to

53
00:03:23.710 --> 00:03:26.460
tell the browser that you'd
like to hardware accelerate.

54
00:03:26.460 --> 00:03:31.730
One of them is this thing called
the null z transform hack.

55
00:03:31.730 --> 00:03:37.330
It's so that we say translate3d and
we apply the 0 on the z axis.

56
00:03:37.330 --> 00:03:40.190
You can also say translate z and

57
00:03:40.190 --> 00:03:43.700
zero, but in this case, we're actually
moving things with the transform.

58
00:03:43.700 --> 00:03:45.520
So we don't want to
override that property.

59
00:03:45.520 --> 00:03:47.830
We wanna keep using it.

60
00:03:47.830 --> 00:03:50.870
You can also say back
phase feasibility hidden.

61
00:03:50.870 --> 00:03:55.220
You can also say perspective 1,000,
1,000 pixels.

62
00:03:55.220 --> 00:03:58.630
All of those things will let the browser
know, okay, I'm going to hardware

63
00:03:58.630 --> 00:04:02.770
accelerate this thing, get ready and
make it a little bit more performant.

64
00:04:04.220 --> 00:04:05.910
We're also moving with transforms.

65
00:04:05.910 --> 00:04:10.730
You might think, well,
why don't I just use top and left and

66
00:04:10.730 --> 00:04:14.160
margins, that would be easier,
I already know those things.

67
00:04:14.160 --> 00:04:18.170
It's because the browser doesn't
deal with those things as well.

68
00:04:18.170 --> 00:04:22.870
It will cause repaints in
order to create those values.

69
00:04:22.870 --> 00:04:25.330
If you used a margin or a top, or

70
00:04:25.330 --> 00:04:30.230
something like that, you'd end up
seeing this jittery occurence.

71
00:04:30.230 --> 00:04:34.540
Transforms, on the other hand,
don't cause repaints.

72
00:04:34.540 --> 00:04:39.190
And if that bums you out, that you're only
using transforms to move things around and

73
00:04:39.190 --> 00:04:42.550
shift them, just know that
transforms actually are powerhouses,

74
00:04:42.550 --> 00:04:44.920
there's tons of stuff in a transform.

75
00:04:44.920 --> 00:04:48.990
We've got skews, we've got rotates,
we've got translate x,

76
00:04:48.990 --> 00:04:52.100
we've got translate y,
we've got all sorts of things.

77
00:04:52.100 --> 00:04:56.830
And if you look at all of my animation
work in they're all just using opacity and

78
00:04:56.830 --> 00:04:57.800
transforms.

79
00:04:57.800 --> 00:04:59.750
I'm not doing other things with them.

80
00:04:59.750 --> 00:05:02.680
There's a lot you can
accomplish with that.

81
00:05:02.680 --> 00:05:07.410
So that's why I have more complicated
code here than you'd expect, right?

82
00:05:07.410 --> 00:05:10.740
You might just think I would do
margin top and move it around, but

83
00:05:10.740 --> 00:05:14.090
what you'd see is that,
that animation wouldn't be quite as fluid.

84
00:05:15.410 --> 00:05:20.110
So, if we're using this bouncein class and
we have animation,

85
00:05:20.110 --> 00:05:24.490
we can use, I am using a cubic
bezier here instead of ease out and

86
00:05:24.490 --> 00:05:28.290
in because I want it to be
a specific type of movement.

87
00:05:28.290 --> 00:05:31.720
If you want really refined animations,
playing around with easing

88
00:05:31.720 --> 00:05:34.960
is really important because easing
is basically the personality and

89
00:05:34.960 --> 00:05:37.360
the life of that animation.

90
00:05:37.360 --> 00:05:41.432
There is a thing called
Cubicbezier.com that Leah

91
00:05:42.680 --> 00:05:47.710
made where you can preview and compare
a bunch of different animation values.

92
00:05:49.270 --> 00:05:50.310
Okay, who'd gonna win?

93
00:05:52.020 --> 00:05:54.912
It's a trick question, they're both
gonna get there at the same time.

94
00:05:54.912 --> 00:05:59.280
[LAUGH] But you can see that
the way that those eases work

95
00:05:59.280 --> 00:06:03.610
will completely change the way
that it actually manifests.

96
00:06:04.800 --> 00:06:05.990
That looks totally different.

97
00:06:05.990 --> 00:06:08.170
Those are totally
different types of motion.

98
00:06:09.590 --> 00:06:13.010
So paying attention to
eases is really important.

99
00:06:13.010 --> 00:06:20.440
So if we have bounced the ball, and get
it gone, we have bounce in and roll out.

100
00:06:21.570 --> 00:06:25.070
So now it might make a little bit more
sense why I plugged into two different

101
00:06:25.070 --> 00:06:30.260
named CSS values, one for entrance and
one for exit, instead of saying,

102
00:06:30.260 --> 00:06:34.680
I'm just transitioning between these
two whatever, given a name like Fade.

103
00:06:34.680 --> 00:06:39.560
In one of them, I'm very particularly
using a bounce and in another one I'm very

104
00:06:39.560 --> 00:06:44.590
particularly using a rollout, so I would
definitely need to name those separately,

105
00:06:44.590 --> 00:06:48.670
so that I could reuse them but also
because they should be named differently.

106
00:06:48.670 --> 00:06:50.000
They are different type of motion

