WEBVTT

1
00:00:00.130 --> 00:00:01.590
&gt;&gt; Sarah: Okay, light comparison.

2
00:00:01.590 --> 00:00:03.100
Vanilla JavaScript versus Vue.

3
00:00:03.100 --> 00:00:05.697
We're gonna do a really
simple thing to do,

4
00:00:05.697 --> 00:00:09.910
just to kind of look at how your workflow
might change for something really small.

5
00:00:11.080 --> 00:00:15.430
So in Vanilla JavaScript, if I want to
output a bunch of things on a list,

6
00:00:15.430 --> 00:00:18.710
let's say I have a manifest
file someone gave me, and

7
00:00:18.710 --> 00:00:21.440
I need to just output it onto the page.

8
00:00:21.440 --> 00:00:27.500
I have const items, which is if you're
not familiar with ES6, is like.

9
00:00:27.500 --> 00:00:31.860
And you have an array of values here,
a bunch of stuff.

10
00:00:31.860 --> 00:00:34.350
Then, in order to output it onto the page,

11
00:00:34.350 --> 00:00:37.350
I might write a function
that says list of stuff.

12
00:00:37.350 --> 00:00:40.770
I create a for loop, and
I'm going through each one.

13
00:00:40.770 --> 00:00:46.020
And I'm plotting each one to these LIs,
and then I go into the dom,

14
00:00:46.020 --> 00:00:48.980
grab, with document query selector,
I grab a container,

15
00:00:48.980 --> 00:00:53.740
and then I'm going to insert all of
those allies into the container.

16
00:00:53.740 --> 00:00:57.060
Then I will call that function,
and then in the HTML, I,

17
00:00:57.060 --> 00:00:59.170
I will say div id="container".

18
00:00:59.170 --> 00:01:01.750
So that yields this list of stuff.

19
00:01:01.750 --> 00:01:04.340
This is nothing special over here.

20
00:01:04.340 --> 00:01:06.920
So we've got this new Vue instance and

21
00:01:06.920 --> 00:01:12.800
we're establishing a relationship with
that element with that ID of app.

22
00:01:12.800 --> 00:01:18.050
And then in data, I have a list that I'm
calling items and I have that array.

23
00:01:18.050 --> 00:01:21.950
Then, in the HTML, I say div id app.

24
00:01:21.950 --> 00:01:27.120
I have a ul here, and
then I say li v-for item in items,

25
00:01:27.120 --> 00:01:29.580
and output what the item is.

26
00:01:29.580 --> 00:01:33.430
And you can already see
That that first of all,

27
00:01:33.430 --> 00:01:35.990
that's all I need in order
to create this list.

28
00:01:35.990 --> 00:01:38.090
That yields all of this.

29
00:01:38.090 --> 00:01:41.640
But you can already see how
much more declarative this is.

30
00:01:41.640 --> 00:01:44.810
I'm not having to write everything
like steps in a recipe.

31
00:01:44.810 --> 00:01:49.040
I'm literally saying here is my list, and
here's what I want you to do with it and

32
00:01:49.040 --> 00:01:52.740
the computer does the hard work for
us, that's really great.

33
00:01:52.740 --> 00:01:54.780
So this is a really simple example.

34
00:01:54.780 --> 00:01:58.520
You can see how in a larger application
with much more complex data,

35
00:01:58.520 --> 00:02:01.970
that this kind of
abstraction really pays off.

36
00:02:03.290 --> 00:02:07.920
Okay so, the things that I love about it
again are that it's clean, it's semantic.

37
00:02:07.920 --> 00:02:12.330
I really enjoy making apps that
are semantic and that are good for

38
00:02:12.330 --> 00:02:14.080
blind people and things like that.

39
00:02:14.080 --> 00:02:19.160
With view im actually working with
HTML elements a lot of the time so

40
00:02:19.160 --> 00:02:22.490
I can write clear semantic mark-up.

41
00:02:22.490 --> 00:02:26.360
It's really declarative,
as you saw, it's super legible, and

42
00:02:26.360 --> 00:02:30.610
it's easy to maintain it's reactive which
we will get into in another section.

