WEBVTT

1
00:00:00.120 --> 00:00:02.480
&gt;&gt; Sarah Drasner: Props,
they're one way communication,

2
00:00:02.480 --> 00:00:06.360
they're passing data down
from the parent to the child.

3
00:00:06.360 --> 00:00:12.290
And the simplest way of defining what
props we're using is this array.

4
00:00:12.290 --> 00:00:14.870
We're always gonna use an array,
even if it's just one element,

5
00:00:14.870 --> 00:00:16.420
we still have to put it in an array.

6
00:00:16.420 --> 00:00:17.570
And it's always gonna be strings,

7
00:00:17.570 --> 00:00:21.110
because we're calling something by a name
that's a string, even if the element

8
00:00:21.110 --> 00:00:26.370
itself is not a string, it's going to be a
string that's placed inside of that array.

9
00:00:26.370 --> 00:00:28.570
Props are intended for
one way communication,

10
00:00:28.570 --> 00:00:33.040
and you can think of it a little like,
the component holds a variable

11
00:00:33.040 --> 00:00:36.760
that's waiting to be filled out
by some piece of information.

12
00:00:36.760 --> 00:00:39.050
So if we have that same
little piece of component,

13
00:00:39.050 --> 00:00:42.670
we've got this little thing that's
just like, okay, I'm gonna chill here,

14
00:00:42.670 --> 00:00:44.860
waiting for
something to be delivered to me.

15
00:00:44.860 --> 00:00:48.210
And then if I call out num is 1,

16
00:00:48.210 --> 00:00:53.000
then that 1 gets inserted into
wherever that little placeholder was.

17
00:00:55.280 --> 00:01:00.700
So we can have multiple components, we
can have a child that accepts this text,

18
00:01:00.700 --> 00:01:06.010
and I can say, hello Mr. Magoo, hello Mr.
Magoo, and I have these two messages.

19
00:01:06.010 --> 00:01:11.021
And then I can say other
message is hi there,

20
00:01:11.021 --> 00:01:17.116
that's not the same, and
then it's still hello Mr.

21
00:01:17.116 --> 00:01:22.146
Magoo, because I'm still using message.

22
00:01:22.146 --> 00:01:26.599
But I could have one use message,
and one use other message, and

23
00:01:26.599 --> 00:01:31.270
then one is using message, and
one is using the other message.

24
00:01:31.270 --> 00:01:36.290
But the reason why this is useful is
because if I need something, if I say I

25
00:01:36.290 --> 00:01:42.370
need this to output differently, both of
them are going to output as that h1 now.

26
00:01:42.370 --> 00:01:45.886
So I can change the way that that
layout works between the two things,

27
00:01:45.886 --> 00:01:50.718
they're completely separate.
&gt;&gt; Sarah Drasner: Okay,

28
00:01:50.718 --> 00:01:55.856
props, types, and validation, before we
were just saying props is that array,

29
00:01:55.856 --> 00:01:58.690
but we could also say
what kind of thing it is.

30
00:01:58.690 --> 00:02:01.790
Before we were using this text as props,
so

31
00:02:01.790 --> 00:02:05.070
we could say text is either
gonna be a string or a number.

32
00:02:05.070 --> 00:02:07.890
We definitely know for
sure it's gonna be a string or a number.

33
00:02:07.890 --> 00:02:11.672
We could also go one step further,
which I recommend doing,

34
00:02:11.672 --> 00:02:14.946
if you're gonna go one little step,
go all the way.

35
00:02:14.946 --> 00:02:17.780
And say something like,
type is gonna be string,

36
00:02:17.780 --> 00:02:20.952
required is true, and
then my favorite, my personal,

37
00:02:20.952 --> 00:02:25.380
we always have to have favorites,
my personal favorite is this default.

38
00:02:25.380 --> 00:02:29.640
Because if you have default props, that
means that you don't run into a lot of

39
00:02:29.640 --> 00:02:31.450
errors if somebody forgets
to pass something.

40
00:02:31.450 --> 00:02:34.670
Especially if you, let's say you have,
like, a grocery store,

41
00:02:34.670 --> 00:02:36.351
most people are ordering apples.

42
00:02:36.351 --> 00:02:39.231
You could have a default
that's the apples and then,

43
00:02:39.231 --> 00:02:42.824
if somebody forgets to fill something out,
you might be correct.

44
00:02:42.824 --> 00:02:47.226
Or there's probably better examples
than that one, but I'm hungry, so

45
00:02:47.226 --> 00:02:50.100
I'm just gonna use food for
everything [LAUGH].

46
00:02:50.100 --> 00:02:56.950
So we got the template that gives us that
text, so if I have something like this,

47
00:02:56.950 --> 00:03:03.250
where I'm clearly passing a string,
and where is my JavaScript?

48
00:03:03.250 --> 00:03:08.140
No, there it is, just took a second,
so we've got type is boolean,

49
00:03:08.140 --> 00:03:11.160
required is true, and
I'm actually passing a string.

50
00:03:11.160 --> 00:03:15.340
We'll get something like this view warn
in the console that'll say, you know,

51
00:03:15.340 --> 00:03:19.974
invalid prop, you said that you wanted
a string, what's up, that's really rude.

52
00:03:19.974 --> 00:03:24.209
[LAUGH] And we can get something else,
if you're using a view CLI,

53
00:03:24.209 --> 00:03:29.137
you'll get an error in your terminal,
and it'll actually give you a bigger

54
00:03:29.137 --> 00:03:34.220
error than just the console, so
that's helpful for validating those props.

55
00:03:34.220 --> 00:03:38.311
Objects and arrays need, sorry.
&gt;&gt; Speaker 2: I know you said you weren't

56
00:03:38.311 --> 00:03:39.807
going to talk about testing, but

57
00:03:39.807 --> 00:03:42.440
does the testing stuff [CROSSTALK].
&gt;&gt; Sarah Drasner: This is a type of

58
00:03:42.440 --> 00:03:47.639
validation, it's not quite testing,
if you wanted to do hook-up testing,

59
00:03:47.639 --> 00:03:50.395
it's really easy to do so with vue-cli,

60
00:03:50.395 --> 00:03:54.503
you can use the web-pack build and add-
&gt;&gt; Speaker 2: Testing your validations is

61
00:03:54.503 --> 00:03:56.349
important.
&gt;&gt; Sarah Drasner: Yeah, yes,

62
00:03:56.349 --> 00:04:02.080
this is like a type of tiny little
unit testing-ish, but it's not full.

63
00:04:02.080 --> 00:04:04.790
I wouldn't ever replace testing
with something like props.

64
00:04:04.790 --> 00:04:05.494
&gt;&gt; Speaker 2: That wasn't where I was

65
00:04:05.494 --> 00:04:06.636
going with this.
&gt;&gt; Sarah Drasner: Sorry.

66
00:04:06.636 --> 00:04:07.747
&gt;&gt; Speaker 2: I was wondering if

67
00:04:07.747 --> 00:04:12.049
the testing stuff has stuff built in
to be able to check these things.

68
00:04:12.049 --> 00:04:12.662
&gt;&gt; Sarah Drasner: Yeah, I mean,

69
00:04:12.662 --> 00:04:14.608
it depends on what testing
suite you're using.

70
00:04:14.608 --> 00:04:19.558
They all have different functionality,
so some of them are more geared towards,

71
00:04:19.558 --> 00:04:24.739
there's monkey testing, where things check
all of these validations and go crazy.

72
00:04:24.739 --> 00:04:30.735
Another one is that you're writing your
own unit test, so the answer to every

73
00:04:30.735 --> 00:04:34.576
programming thing, it depends [LAUGH].
&gt;&gt; Speaker 2: The universal

74
00:04:34.576 --> 00:04:35.480
answer.
&gt;&gt; Sarah Drasner: Yeah,

75
00:04:35.480 --> 00:04:38.273
the universal answer, okay, so objects and

76
00:04:38.273 --> 00:04:41.960
arrays need their defaults to
be returned from a function.

77
00:04:41.960 --> 00:04:46.040
This is especially important
because at some points,

78
00:04:46.040 --> 00:04:49.760
an object you might think if you don't
return it from a function, it might

79
00:04:49.760 --> 00:04:53.760
think that you're trying to overwrite it
into the new object that you're declaring.

80
00:04:53.760 --> 00:04:57.400
So definitely write your
default as a function here,

81
00:04:57.400 --> 00:05:01.620
if you're going to do
this kind of validation.

82
00:05:01.620 --> 00:05:06.570
You don't necessarily
need to pass the data in

83
00:05:06.570 --> 00:05:10.810
props from the parent to the child either,
you can use static values for this.

84
00:05:10.810 --> 00:05:13.840
So if I have this app data, and

85
00:05:13.840 --> 00:05:17.300
I'm adjusting this date up and
down and up and down.

86
00:05:17.300 --> 00:05:21.370
You can see that that first one is not
incrementing, and the second one is.

87
00:05:21.370 --> 00:05:25.843
This is the same component, though,
this is exactly the same component.

88
00:05:25.843 --> 00:05:31.110
So what we're doing here is, we're not
using the state of the parent in one.

89
00:05:31.110 --> 00:05:35.670
We're saying count is 1, and
we don't have that v-bind in front of it.

90
00:05:35.670 --> 00:05:39.610
And then, we're using the state of the
parent in the second one by using v-bind.

91
00:05:39.610 --> 00:05:41.266
So you need to use v-bind or

92
00:05:41.266 --> 00:05:46.453
that colon in order to dynamically bind
the props to the parent, that's important.

93
00:05:46.453 --> 00:05:51.139
If you don't, if you leave this off,
it will not work the way that you want to,

94
00:05:51.139 --> 00:05:54.370
passing the data from
the parent to the child.

95
00:05:54.370 --> 00:05:58.970
If we go back to this demo, we have
the app data that was changing, and

96
00:05:58.970 --> 00:06:02.900
we have this component
that is not updating.

97
00:06:02.900 --> 00:06:08.920
So if we go back to here,
if we wanted to just pass a static value,

98
00:06:08.920 --> 00:06:12.000
that's totally fine,
we are totally allowed to do that.

99
00:06:12.000 --> 00:06:16.390
We can say count is 1, and that will be
a static integer, the main difference,

100
00:06:16.390 --> 00:06:19.900
of course, is that v-bind or colon for

101
00:06:19.900 --> 00:06:24.070
a shortcut, that dynamically binds
the props to the data on the parent.

102
00:06:25.380 --> 00:06:28.240
Each component has its own isolated scope,
and

103
00:06:28.240 --> 00:06:30.860
this is the reason why
data must be a function.

104
00:06:30.860 --> 00:06:34.690
We had kind of mentioned this a little
bit earlier, and it's kind of like,

105
00:06:34.690 --> 00:06:38.320
why do you have to, we had it in
an object, that was nice and clean,

106
00:06:38.320 --> 00:06:40.480
why are we putting it in a function now?

107
00:06:40.480 --> 00:06:42.886
Well, the reason why we can't
put it in an object is that,

108
00:06:42.886 --> 00:06:45.653
once we start using components,
we'll get something like this.

109
00:06:45.653 --> 00:06:50.378
Where the component doesn't have that
isolated scope unless we're returning from

110
00:06:50.378 --> 00:06:51.119
a function.

111
00:06:51.119 --> 00:06:56.176
It will just keep increasing all of them,
no matter which one I toggle, and

112
00:06:56.176 --> 00:07:01.080
when data is a function, each component
will have its isolated scope.

113
00:07:01.080 --> 00:07:04.354
This example is actually a riff off
of the docs, the documentation,

114
00:07:04.354 --> 00:07:07.686
if you haven't been there before,
it's really, really well done,

115
00:07:07.686 --> 00:07:11.130
it's really easy to understand,
and very, very human legible.

116
00:07:11.130 --> 00:07:14.570
I tried to improve this example,
and couldn't even improve on it,

117
00:07:14.570 --> 00:07:17.600
because it illustrates
that just perfectly.

118
00:07:17.600 --> 00:07:20.330
One thing to note in this example is,

119
00:07:20.330 --> 00:07:23.790
I had to store this data in
an object in order to pass it.

120
00:07:23.790 --> 00:07:27.330
Because view won't even let you actually
do this, if you have a bunch of different

121
00:07:27.330 --> 00:07:31.800
components, it's going to error and
let you know, and give you warnings.

122
00:07:31.800 --> 00:07:36.400
Especially when we move to view
CLI in that build process,

123
00:07:36.400 --> 00:07:39.540
it'll definitely alert you if you
do something wrong like this.

124
00:07:39.540 --> 00:07:43.560
But you should be aware
that you should just be

125
00:07:43.560 --> 00:07:46.910
kind of like always putting
data in as a function.

126
00:07:46.910 --> 00:07:50.836
Because then you can refactor your code,
it's more malleable.

127
00:07:50.836 --> 00:07:54.896
You won't run into situations where you
have to change something, and then make it

128
00:07:54.896 --> 00:07:58.956
a component, and then something breaks or
something, so just get into the habit of

129
00:07:58.956 --> 00:08:03.714
writing data as a function.
&gt;&gt; Sarah Drasner: Camel

130
00:08:03.714 --> 00:08:07.609
casing will be converted, this is a nice
view thing, view understands that in

131
00:08:07.609 --> 00:08:10.807
Javascript you're gonna be wanting
to be camel casing values.

132
00:08:10.807 --> 00:08:15.381
But that in HTML, when we actually use
those in HTML, they're gonna need to

133
00:08:15.381 --> 00:08:19.830
be kebab-cased, cuz that's what
HTML properties actually look like.

134
00:08:19.830 --> 00:08:24.260
So it will convert something like boolean
value here that's camel-cased, and

135
00:08:24.260 --> 00:08:30.300
change it into something like boolean
value with that kebab-case there.

136
00:08:30.300 --> 00:08:31.840
It'll just do that naturally for

137
00:08:31.840 --> 00:08:34.750
you, you don't have to do
anything special for that work.

