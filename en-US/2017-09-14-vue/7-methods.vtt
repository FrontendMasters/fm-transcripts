WEBVTT

1
00:00:00.150 --> 00:00:06.810
&gt;&gt; Sarah Drasner: Let's go over to learn
about methods, computed and watchers.

2
00:00:06.810 --> 00:00:11.380
So you heard me say earlier that one
of the reasons why I really love vue

3
00:00:11.380 --> 00:00:14.540
is that I know immediately what
kind of thing that I'm looking at,

4
00:00:14.540 --> 00:00:17.890
what kind of function, or
what kind of logic is going on.

5
00:00:17.890 --> 00:00:22.180
Just by looking at some of the ways
that we're working with methods.

6
00:00:22.180 --> 00:00:26.330
Methods computed in watchers are all
different ways of working with the data

7
00:00:26.330 --> 00:00:28.000
that we've got available to us.

8
00:00:28.000 --> 00:00:30.808
And I would say that, methods is
probably something that you're gonna use

9
00:00:30.808 --> 00:00:34.600
a ton computed into something
that you're gonna use a lot.

10
00:00:34.600 --> 00:00:38.310
And watchers is something you're
gonna use for special occasions.

11
00:00:38.310 --> 00:00:41.900
So we're gonna have a big
emphasis on methods and computed.

12
00:00:41.900 --> 00:00:48.550
Watchers will kind of go into more depth
of what view is in order to talk about.

13
00:00:48.550 --> 00:00:52.870
So methods are kind of aptly named
because you saw that vue instance,

14
00:00:52.870 --> 00:00:57.970
we're going to hang a function off of that
object and so that's called a method.

15
00:00:57.970 --> 00:00:59.750
They're bound to the vue instance.

16
00:00:59.750 --> 00:01:03.040
They're incredibly useful for
functions that you would like to access

17
00:01:03.040 --> 00:01:07.690
in directives or use for
whatever you like.

18
00:01:07.690 --> 00:01:10.380
This is a demo with two different
pieces of functionality.

19
00:01:10.380 --> 00:01:11.680
They're not connected.

20
00:01:11.680 --> 00:01:17.270
One of them is this counter and we have
up and we have down, and the reason why

21
00:01:17.270 --> 00:01:21.964
I'm showing this is because previously,
let's actually go to the CodePen here.

22
00:01:23.710 --> 00:01:27.600
Is because previously,
when we've looked at that add click event,

23
00:01:27.600 --> 00:01:31.270
we were executing some
logic in ternary operator.

24
00:01:31.270 --> 00:01:33.421
We don't have to do that
if we don't want to.

25
00:01:33.421 --> 00:01:35.446
And let's, say we have a little
bit more functionality.

26
00:01:35.446 --> 00:01:41.370
We might wanna say something like
increments and move the methods, if it's

27
00:01:41.370 --> 00:01:46.060
a little bit more complicated, we can go
to our methods and we can say increment.

28
00:01:46.060 --> 00:01:48.490
And we declare this over here and

29
00:01:48.490 --> 00:01:54.252
we establish a relationship between
that click event and this method here.

30
00:01:54.252 --> 00:01:58.941
And you can see what we're doing here,
is we're saying the counter is 0 and

31
00:01:58.941 --> 00:02:02.200
when we need to access this we say,
this.counter.

32
00:02:02.200 --> 00:02:05.430
That's gonna be true of anytime
you use any kind of methods,

33
00:02:05.430 --> 00:02:08.550
anytime you use computed,
anytime you use watchers.

34
00:02:08.550 --> 00:02:13.110
I personally like not needing to figure
out what this is referring [LAUGH] to.

35
00:02:13.110 --> 00:02:14.960
I think that's really great.

36
00:02:14.960 --> 00:02:18.170
So, I don't know if you guys
saw that tweet that was like.

37
00:02:18.170 --> 00:02:24.560
I like working in JavaScript but
I keep wanting to yell out, [BLEEP] this.

38
00:02:24.560 --> 00:02:28.128
But every time [LAUGH] I say that,
I don't know what I'm referencing this is.

39
00:02:28.128 --> 00:02:32.270
&gt;&gt; Speaker 2: [LAUGH]
&gt;&gt; Sarah Drasner: [LAUGH] So yeah,

40
00:02:32.270 --> 00:02:33.700
this is really awesome.

41
00:02:33.700 --> 00:02:37.940
For the reason we're binding
this to this data here,

42
00:02:37.940 --> 00:02:42.950
we're not gonna use an arrow function for
declaring this method.

43
00:02:42.950 --> 00:02:45.820
We can use arrow function inside of this.

44
00:02:45.820 --> 00:02:49.402
So if I want to execute an a arrow
function in here that would be fine, but

45
00:02:49.402 --> 00:02:52.890
we won't bind this properly if
we use a arrow function here.

46
00:02:52.890 --> 00:02:55.280
So that's just something to watch out for.

47
00:02:55.280 --> 00:02:59.628
So if you have a button that's a click
increment it's gonna call whatever

48
00:02:59.628 --> 00:03:01.179
logic is going on in here.

49
00:03:01.179 --> 00:03:05.174
We have decrement it's calling
whatever logic is going on in here, so

50
00:03:05.174 --> 00:03:07.487
we can increment and decrement, okay.

51
00:03:07.487 --> 00:03:12.218
I have another thing going on here which
you probably noticed, is that I'm moving

52
00:03:12.218 --> 00:03:16.417
through all of these different colors,
as I'm moving my mouse across.

53
00:03:16.417 --> 00:03:19.630
And we kind of played with
something similar to that earlier.

54
00:03:19.630 --> 00:03:24.510
What we have here is,
we have an x that starts at 0, and

55
00:03:24.510 --> 00:03:29.170
when I have this,
you wanna have this div id app,

56
00:03:29.170 --> 00:03:33.620
I have an @mousemove and
I've connected that to xCoordinate.

57
00:03:33.620 --> 00:03:37.700
If we go look at xCoordinate, you can
see I didn't have to pass in the event.

58
00:03:37.700 --> 00:03:39.649
Remember I was mentioning this before,

59
00:03:39.649 --> 00:03:43.430
I don't have to actually pass in the event
here, view will assume that that's

60
00:03:43.430 --> 00:03:46.089
probably something I might
want access to if I need to.

61
00:03:46.089 --> 00:03:48.690
So it offers me that param
if I need to use it.

62
00:03:48.690 --> 00:03:52.332
So I still have to say e in this instance,
and

63
00:03:52.332 --> 00:03:57.650
then I'm connecting this.x to
e.Clinetx and what that allows

64
00:03:57.650 --> 00:04:03.768
me to do is connect this style binding
of the background color and an HSLA.

65
00:04:03.768 --> 00:04:06.306
This is just a nerdy other thing but

66
00:04:06.306 --> 00:04:11.294
if you need to use generative colors
in JavaScript, HSL is really,

67
00:04:11.294 --> 00:04:17.698
really awesome because hue is rotating on
a 360 degree axis, so it will never fail.

68
00:04:17.698 --> 00:04:22.070
780 is still a color,
whereas RGB will eventually fail.

69
00:04:22.070 --> 00:04:26.000
So if you need to make generative colors,
that's a really fun and cool way to do it.

70
00:04:27.000 --> 00:04:30.250
And then,
I just have my pixels across showing you

71
00:04:30.250 --> 00:04:33.170
what is going on with x as
I'm moving across the page.

