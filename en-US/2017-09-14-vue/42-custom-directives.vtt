WEBVTT

1
00:00:00.140 --> 00:00:00.924
&gt;&gt; Sarah Drasner: Custom Directives.

2
00:00:00.924 --> 00:00:02.940
We're almost done with this section.

3
00:00:02.940 --> 00:00:04.360
Custom directives are super awesome.

4
00:00:04.360 --> 00:00:07.790
We covered directives in that first one
and we saw how powerful they can be.

5
00:00:07.790 --> 00:00:11.718
We're just attaching a small bit
of markup to that attribute, and

6
00:00:11.718 --> 00:00:17.270
then we're able to have low level
access to that VDOM or DOM element.

7
00:00:17.270 --> 00:00:20.290
And that it allows us to
do all sorts of things,

8
00:00:20.290 --> 00:00:22.960
like set up a relationship in v-model.

9
00:00:22.960 --> 00:00:29.410
Or say v-for say the be v-if,
and do all sorts of calculations.

10
00:00:29.410 --> 00:00:31.210
And Vue's got you covered for

11
00:00:31.210 --> 00:00:36.780
a lot of the kind of typical UI building
things that you might need to do.

12
00:00:36.780 --> 00:00:38.400
But every once in a while,

13
00:00:38.400 --> 00:00:41.840
you'll find that you have a certain type
of application where you need something.

14
00:00:41.840 --> 00:00:44.990
Again and again, that would be
really useful as a directive,

15
00:00:44.990 --> 00:00:47.870
but Vue doesn't offer it because
it's something specific.

16
00:00:47.870 --> 00:00:51.360
So custom directives can be
really powerful for this.

17
00:00:51.360 --> 00:00:55.250
So if we do something like say, v-tack.

18
00:00:55.250 --> 00:01:01.690
I'm gonna create something called v-tack,
then I can create view.directive'tack'.

19
00:01:01.690 --> 00:01:05.360
I am doing this again, and I'm in that
main.js file above the Vue instance.

20
00:01:05.360 --> 00:01:11.066
I am saying bind(el, binding vnode) and
I'm just passing an element and

21
00:01:11.066 --> 00:01:17.240
saying el.style.position fixed, so
that's okay, that's not that great.

22
00:01:17.240 --> 00:01:22.370
We're gonna do more with it in just
a second as I cover directives.

23
00:01:22.370 --> 00:01:25.460
So we went over directives really
quickly in the beginning but

24
00:01:25.460 --> 00:01:30.200
we didn't do a deep dive to what is
actually going on with each one of them.

25
00:01:30.200 --> 00:01:34.740
V-example, this will
instantiate a directive but

26
00:01:34.740 --> 00:01:37.840
doesn't accept any argument,
so this has limited use.

27
00:01:37.840 --> 00:01:39.560
This is what we just saw on the other one,

28
00:01:39.560 --> 00:01:42.430
we were like,
okay we made it position fix.

29
00:01:42.430 --> 00:01:44.970
Cool, but we're not passing any values or
anything,

30
00:01:44.970 --> 00:01:50.000
so there's very little we're
actually doing with it.

31
00:01:50.000 --> 00:01:53.400
Better, as we could, and
this is what we've been using a lot today,

32
00:01:53.400 --> 00:01:56.420
was things like v model = message or
something.

33
00:01:56.420 --> 00:01:57.780
V-example = value.

34
00:01:57.780 --> 00:02:00.350
This will pass a value into the directive,
and

35
00:02:00.350 --> 00:02:03.410
the directive figures out
what to do with that value.

36
00:02:04.490 --> 00:02:09.500
So we have div v-if = stateExample, I
will show up if the stateExample is true.

37
00:02:10.590 --> 00:02:13.730
Then we can say v-example = string,

38
00:02:13.730 --> 00:02:17.350
this will let you use
a string as an expression.

39
00:02:17.350 --> 00:02:22.710
So you can do something like those strong
tags, we saw that earlier with the HTML.

40
00:02:25.240 --> 00:02:28.650
We can also do something have an argument.

41
00:02:28.650 --> 00:02:32.740
So if we have an argument to the
directive, remember we were using things

42
00:02:32.740 --> 00:02:36.280
those class and style bindings,
that's an example of an argument.

43
00:02:36.280 --> 00:02:40.699
We did v-bind: and then style or class and

44
00:02:40.699 --> 00:02:46.730
we could get lower level access and
also pass an argument.

45
00:02:48.270 --> 00:02:53.330
If we have v-example:arg.modifier="value",
this allows us to use a modifier.

46
00:02:53.330 --> 00:02:58.160
The example below allows us to call
preventDefault() on that thing, so

47
00:02:58.160 --> 00:03:00.300
you used this earlier as well.

48
00:03:00.300 --> 00:03:05.890
So, these are all the different ways
you could create a custom directive.

49
00:03:05.890 --> 00:03:09.860
So here we've got,
it's a little bit late on this screen.

50
00:03:09.860 --> 00:03:14.110
But if you go into the slides,
you can see this a little bit better.

51
00:03:14.110 --> 00:03:17.870
There's actually things surrounding this.

52
00:03:17.870 --> 00:03:20.900
So we've got a few different
hooks that are available to

53
00:03:20.900 --> 00:03:23.990
use with custom directives that
are different from our life cycle hooks.

54
00:03:23.990 --> 00:03:27.360
We've got Bind,
that's the insertion into the DOM,

55
00:03:27.360 --> 00:03:33.350
inserted is the element is inserted,
updated is the element is updated.

56
00:03:33.350 --> 00:03:37.975
And in the cases that it's updated,
we have access to the v-node and

57
00:03:37.975 --> 00:03:39.183
the old v-node.

58
00:03:39.183 --> 00:03:41.226
Remember when we were
working with watchers and

59
00:03:41.226 --> 00:03:43.580
we had access to the old value and
the new value?

60
00:03:43.580 --> 00:03:44.520
Very similar concepts.

61
00:03:45.890 --> 00:03:50.883
We also have component updated,
where all the children are updated,

62
00:03:50.883 --> 00:03:55.465
and they have v-node and or
old v-node and we also have unbind.

63
00:03:55.465 --> 00:04:00.544
Most of the time, I use bind, so that will
probably usually get you where you need

64
00:04:00.544 --> 00:04:05.569
to go, but there are specific instances
where you might want these other ones.

65
00:04:06.880 --> 00:04:08.510
So if we look again at this example,

66
00:04:08.510 --> 00:04:13.370
we've got that v-tack, we're making
that position fix, that doesn't do much.

67
00:04:13.370 --> 00:04:15.380
Now let's make it a little bit better.

68
00:04:15.380 --> 00:04:21.180
So v-tack 70,
I've got a value that I'm passing in.

69
00:04:21.180 --> 00:04:25.340
And then I've got this Vue.directive,
we got bind and

70
00:04:25.340 --> 00:04:29.760
we're passing in
the el.style.position is fixed and

71
00:04:29.760 --> 00:04:33.760
then we're saying top
binding value plus px.

72
00:04:33.760 --> 00:04:40.520
And now we can scroll down the page and
stick an element from the top of the page.

73
00:04:40.520 --> 00:04:45.540
Wherever we need to just by saying v-tack,
I'm going to immediately be able to tack

74
00:04:45.540 --> 00:04:49.090
things to the page at a certain
distance from the top.

75
00:04:50.280 --> 00:04:54.640
So maybe we need to pass an argument,
maybe we want to sometimes

76
00:04:54.640 --> 00:04:57.710
make it stick to the left of
the page instead of the top.

77
00:04:57.710 --> 00:05:02.130
So I could say something,
usually we want the top, but

78
00:05:02.130 --> 00:05:06.270
in certain circumstances where we pass
this argument, make it left instead.

79
00:05:06.270 --> 00:05:09.270
So that makes me happier and we can do,

80
00:05:09.270 --> 00:05:13.880
I'll be offset from the left instead of
the top and you can see me scrolling, and

81
00:05:13.880 --> 00:05:17.070
it allow me to scroll and
it's stuck to the page.

82
00:05:19.610 --> 00:05:20.910
We can pass more than one value,

83
00:05:20.910 --> 00:05:25.620
we looked at this earlier again when we
looked at those at events and things like

84
00:05:25.620 --> 00:05:29.089
that when we were trying to bind to touch,
as well as hover and things.

85
00:05:30.320 --> 00:05:35.780
We can say top 40 left 100, and
say something the position is fixed.

86
00:05:35.780 --> 00:05:40.690
The binding that value.top plus px,
and the binding that value.left.

87
00:05:40.690 --> 00:05:48.630
So I'm tacking it from 40 from the top and
100 px from left of the page.

88
00:05:48.630 --> 00:05:50.220
So that's pretty cool.

89
00:05:50.220 --> 00:05:53.150
Now we have a little bit
more functionality in there.

90
00:05:53.150 --> 00:05:55.870
So let's make something that we might use,

91
00:05:55.870 --> 00:05:59.740
that's kind of a normal
thing that we might make.

92
00:05:59.740 --> 00:06:04.570
I use a library called Waypoints pretty
frequently and what Waypoints does is it

93
00:06:04.570 --> 00:06:09.590
allows you to attached a trigger or
hook to some sort of scroll of them.

94
00:06:09.590 --> 00:06:14.688
You can basically say, when it gets to
this point in the page, fire something and

95
00:06:14.688 --> 00:06:19.790
off of that, I might have an animation or
I might have something toggle or

96
00:06:19.790 --> 00:06:24.254
some event occurs as
your kind of scrolling.

97
00:06:24.254 --> 00:06:28.210
And Waypoints is beautiful and
kind of slender, but it's still

98
00:06:28.210 --> 00:06:33.230
a library that has a few kilobytes
worth of JavaScript in it.

99
00:06:34.230 --> 00:06:39.590
With Vue and custom directives, I can
mimic all functionality of that really,

100
00:06:39.590 --> 00:06:42.300
really simply in just a few lines of code.

101
00:06:42.300 --> 00:06:47.920
So this custom directive with the scroll
event, I'm basically saying okay,

102
00:06:47.920 --> 00:06:53.360
add this event listener and listen for
this point of pixels down the page and

103
00:06:53.360 --> 00:06:56.050
then remove that event listener
when I'm done with it.

104
00:06:56.050 --> 00:06:59.940
So I'm just passing in a few
different value in this like what,

105
00:06:59.940 --> 00:07:04.190
ten line of code,
I can get ride of an entire library.

106
00:07:04.190 --> 00:07:08.440
So then I can pass in a method that
attaches to that directive and

107
00:07:08.440 --> 00:07:12.830
has animation logic fire when I get
to that certain point in the page.

108
00:07:15.450 --> 00:07:20.717
So if I have v-scroll and then I'm
attaching to that method handle scroll,

109
00:07:20.717 --> 00:07:25.405
I can have that thing kind of show
up on the page as I'm scrolling, so

110
00:07:25.405 --> 00:07:28.237
if I'm building that out even further.

111
00:07:28.237 --> 00:07:31.245
I'm working on a project
where I'm working with D3 and

112
00:07:31.245 --> 00:07:35.250
hooking a bunch of D3's
functionality into that directive.

113
00:07:35.250 --> 00:07:38.630
It's not open source yet
because I have a lot more work to do.

114
00:07:38.630 --> 00:07:40.760
But this is basically
how it's all working.

115
00:07:40.760 --> 00:07:44.900
So I'm able to all sorts
of D3 events just by

116
00:07:44.900 --> 00:07:49.810
hooking them into that tiny little piece
of directive that I can use and reuse.

