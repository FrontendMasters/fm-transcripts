WEBVTT

1
00:00:00.140 --> 00:00:04.390
&gt;&gt; Sarah Drasner: A common situation that
you might have is you have two components

2
00:00:04.390 --> 00:00:06.200
and they're pretty similar.

3
00:00:06.200 --> 00:00:09.660
They have a bunch of
different things going on.

4
00:00:09.660 --> 00:00:13.230
So you kind of come to a crossroads and
you say all right,

5
00:00:13.230 --> 00:00:17.860
well I could split this into two
components and have them live separately.

6
00:00:17.860 --> 00:00:22.250
But then if the functionality is
similar enough you have to go update

7
00:00:22.250 --> 00:00:26.610
the functionality of both of them,
kind of defeating the premises of dry.

8
00:00:26.610 --> 00:00:31.840
The other option is we have all of
these things available to us with prop,

9
00:00:31.840 --> 00:00:36.315
so we could create one component and
change them with a lot of props.

10
00:00:36.315 --> 00:00:39.325
But once we get to a lot of props,

11
00:00:39.325 --> 00:00:43.055
you get into an issue where in order to
read that component, the person has to

12
00:00:43.055 --> 00:00:47.125
understand a lot of context before
they get going and able to use it.

13
00:00:47.125 --> 00:00:49.370
So Enter mixins.

14
00:00:49.370 --> 00:00:51.390
This is where mixins are really exciting.

15
00:00:52.470 --> 00:00:54.960
I really like this quote Michael Feathers,

16
00:00:54.960 --> 00:00:59.035
object oriented programming makes code
understandable by encapsulating moving

17
00:00:59.035 --> 00:01:03.890
parts.w Functional programming makes code
understandable by minimizing moving parts.

18
00:01:03.890 --> 00:01:08.550
And so I think when you're using
mixins properly, they are really,

19
00:01:08.550 --> 00:01:11.670
really great for
a functional programming mod Model.

20
00:01:11.670 --> 00:01:16.060
We are encapsulating one piece of
functionality so we are creating something

21
00:01:16.060 --> 00:01:19.620
that's smaller that we can re-use
in a couple of different places.

22
00:01:19.620 --> 00:01:22.050
Like let's say two components
were pretty different but

23
00:01:22.050 --> 00:01:25.720
they share one common functionality
that you know is always gonna be tied.

24
00:01:25.720 --> 00:01:30.180
That's a really good instance where
you might wanna create a mixin and

25
00:01:30.180 --> 00:01:36.090
create a small function that's pure
that you ca use for both instances.

26
00:01:36.090 --> 00:01:40.370
So if written correctly, they are pure
they don't modify or change this

27
00:01:40.370 --> 00:01:45.090
outside of the function scope, so
you always reliably get the same

28
00:01:46.430 --> 00:01:50.470
execution value with the same
input on multiple execution.

29
00:01:51.530 --> 00:01:54.220
That's basically like our really big

30
00:01:54.220 --> 00:01:58.100
core tenant of functional
programming is keeping things pure.

31
00:01:58.100 --> 00:02:00.430
So that can be really really powerful.

32
00:02:00.430 --> 00:02:05.590
I'm gonna show you a tiny example of
this because otherwise it will be

33
00:02:05.590 --> 00:02:08.610
a little bit too much to take in at once.

34
00:02:08.610 --> 00:02:10.500
So we looked at that model before.

35
00:02:10.500 --> 00:02:12.320
The model just toggles.

36
00:02:12.320 --> 00:02:16.850
Again, this is like a really,
really simple example so it's not probably

37
00:02:16.850 --> 00:02:20.600
the use case I would it for but
just for the purposes of understanding.

38
00:02:20.600 --> 00:02:24.490
If we have a model we saw this
model earlier where it's toggling

39
00:02:24.490 --> 00:02:26.300
the state of showing or not showing.

40
00:02:27.560 --> 00:02:32.290
Let's say we also have a tool tip and
that's also showing or not showing but

41
00:02:32.290 --> 00:02:36.890
they look different and
there's a lot of different pieces to them.

42
00:02:36.890 --> 00:02:39.780
Tool tips have slightly different content,

43
00:02:39.780 --> 00:02:43.620
they have different layout,
same with motors.

44
00:02:43.620 --> 00:02:47.000
But that core functionality is similar.

45
00:02:47.000 --> 00:02:51.730
What we could do is we could extract

46
00:02:51.730 --> 00:02:56.570
just that functionality and
say something like const toggle and

47
00:02:56.570 --> 00:03:01.880
then data return is showing false,
that's just the toggle that we have.

48
00:03:01.880 --> 00:03:07.090
And then the modal and the tool tip become
smaller, and we say mix ins toggle,

49
00:03:07.090 --> 00:03:13.310
mix ins toggle and we're basically able
to consume that small function into

50
00:03:13.310 --> 00:03:19.120
these components and reuse them, so
that can be really, really nice.

51
00:03:19.120 --> 00:03:24.370
So if we have a modal, Show child,
put Click Here Please and

52
00:03:24.370 --> 00:03:28.910
then I have Tool tip and a modal and

53
00:03:28.910 --> 00:03:33.510
they work slightly differently as well and
the functionality

54
00:03:33.510 --> 00:03:38.130
because we're clicking on different things
and we have different slots for each one.

55
00:03:40.710 --> 00:03:42.580
So actually let's show you the code.

56
00:03:45.360 --> 00:03:48.118
So in here, let's go to CodePen.

57
00:03:51.540 --> 00:03:56.340
&gt;&gt; Sarah Drasner: In here we have
this const toggle like we mentioned.

58
00:03:56.340 --> 00:04:00.140
Here is our Modal,
here is our Tooltip, and

59
00:04:00.140 --> 00:04:03.190
here is our Vue instance
with our components.

60
00:04:03.190 --> 00:04:06.990
We have appModal and
appTooltip and a divider.

61
00:04:06.990 --> 00:04:10.990
And here's our modal, we have a bunch of
things in here like hiding the child, and

62
00:04:10.990 --> 00:04:13.200
showing the child, and toggling.

63
00:04:13.200 --> 00:04:18.220
And we have another kind of markup for
the tooltip.

64
00:04:18.220 --> 00:04:19.600
They don't share the same markup.

65
00:04:22.910 --> 00:04:26.570
Some examples of uses for

66
00:04:26.570 --> 00:04:30.020
mix ins getting the dimensions
of the view port and component.

67
00:04:30.020 --> 00:04:32.510
That might be something you do on
a few different components and

68
00:04:32.510 --> 00:04:35.410
they don't really share any
other thing about them.

69
00:04:35.410 --> 00:04:37.240
Maybe gather mouse move events.

70
00:04:37.240 --> 00:04:40.910
That might be something that you execute
on differently on different components but

71
00:04:40.910 --> 00:04:42.880
you need to still gather the same events.

72
00:04:42.880 --> 00:04:45.060
You don't want to redo
all of that code and

73
00:04:45.060 --> 00:04:47.750
they're not really
the same component at all.

74
00:04:47.750 --> 00:04:54.400
I showed that example with SVG earlier
where I made charts and created the axes.

75
00:04:54.400 --> 00:05:00.190
And something like that is something that
I've used in a few different components.

76
00:05:00.190 --> 00:05:04.670
Because I don't want to keep rewriting
these base elements of charts or

77
00:05:04.670 --> 00:05:05.590
something like that.

78
00:05:06.610 --> 00:05:09.730
There's also a really great repo by,

79
00:05:09.730 --> 00:05:12.820
I'm not gonna try to say his last name,
Paul [LAUGH].

80
00:05:12.820 --> 00:05:16.210
And there's a bunch of
different Vue mixins in there.

81
00:05:16.210 --> 00:05:21.250
One caveat I will say is that they
use CoffeeScript, so if you're

82
00:05:21.250 --> 00:05:27.070
with CoffeeScript, it might be different
from the way that you're used to working.

83
00:05:27.070 --> 00:05:31.170
There is a concept of merging with
mixins because you're actually

84
00:05:31.170 --> 00:05:35.490
bringing it into another component
that has different kinds of values.

85
00:05:35.490 --> 00:05:38.810
So by default mixins will
be applies first, and

86
00:05:38.810 --> 00:05:42.540
the components will be second, so
that we can override it as necessary.

87
00:05:42.540 --> 00:05:45.690
So the important piece of this is
that the component has the last say.

88
00:05:45.690 --> 00:05:50.250
You're gonna Vue assumes that you probably
need the thing that the components is

89
00:05:50.250 --> 00:05:52.920
dong, so
if you accidentally have two things that

90
00:05:52.920 --> 00:05:57.180
are happening that are similar, and
I'll an example of this as well.

91
00:05:57.180 --> 00:06:00.560
So if I have something
like these two mounted,

92
00:06:00.560 --> 00:06:04.300
you know actually another thing to
mention is that mixin's have all of

93
00:06:04.300 --> 00:06:08.370
the life cycle methods available to
them just like the components do.

94
00:06:08.370 --> 00:06:13.529
So we have mounted and we have
a console.log('hello from mixin') and

95
00:06:13.529 --> 00:06:16.689
a mounted in the instance or
the component and

96
00:06:16.689 --> 00:06:20.620
we say console.log('hello
from vue instance').

97
00:06:20.620 --> 00:06:25.210
So if both of these things are in
the mounted they both execute and

98
00:06:25.210 --> 00:06:27.880
we get hello from mixin,
hello from vue instance.

99
00:06:27.880 --> 00:06:33.140
Both of those things will happen,
but let's say we have something like

100
00:06:33.140 --> 00:06:38.780
a method where they're
both called say hello.

101
00:06:38.780 --> 00:06:44.240
Like I have a method that I've called say
hello and mounted, I execute that method.

102
00:06:44.240 --> 00:06:48.600
Then I do the same thing,
this one is hello from mixin and

103
00:06:48.600 --> 00:06:53.510
this one is the Vue instance or
component What we're gonna

104
00:06:53.510 --> 00:06:58.260
get in the output in the console is both
of those things firing, because we called,

105
00:06:58.260 --> 00:07:01.300
just like in the other one,
both of those things are gonna execute.

106
00:07:01.300 --> 00:07:05.350
But one of them is gonna be
overridden because it's going to say,

107
00:07:05.350 --> 00:07:07.570
wait you have another
thing called say hello.

108
00:07:07.570 --> 00:07:10.450
The component has the last say,
the component is going to win and

109
00:07:10.450 --> 00:07:15.429
we're going to say hello from
Vue instance Global mixins.

110
00:07:15.429 --> 00:07:17.728
Warning signs.

111
00:07:17.728 --> 00:07:21.790
[LAUGH] Lots of warning signs.

112
00:07:21.790 --> 00:07:26.620
Global mixins are different from filters
or components that we could register, or

113
00:07:26.620 --> 00:07:30.730
something like that, where we create
it and we can use it as we want.

114
00:07:30.730 --> 00:07:35.480
Global mixins are literally applied
to every, single component.

115
00:07:35.480 --> 00:07:39.710
So I would say almost
never ever use these.

116
00:07:39.710 --> 00:07:43.300
One example that I've had that
people have found them useful,

117
00:07:43.300 --> 00:07:46.880
if you deplug in development and
you need access to all of the components,

118
00:07:46.880 --> 00:07:52.550
but even then I would say
really use this with caution.

119
00:07:52.550 --> 00:07:57.140
The use is extremely limited and
should be considered with great caution.

120
00:07:57.140 --> 00:08:01.240
We're, so if we say something like,

121
00:08:01.240 --> 00:08:06.540
this view.mixin, so that's how we
would register a global thing in

122
00:08:06.540 --> 00:08:11.770
that main.js file right before our
Vue instance, we would say Vue.mixin.

123
00:08:11.770 --> 00:08:16.220
That console log, but now appear for
every single component.

124
00:08:16.220 --> 00:08:18.440
For this instance,
you have a noisy console.

125
00:08:18.440 --> 00:08:22.150
But there's other things that could
happen that could be really bad.

126
00:08:22.150 --> 00:08:24.820
If you want,
I'll take a look at a real-life example.

127
00:08:24.820 --> 00:08:30.630
We could go to the Mickson's
example in the repo.

128
00:08:30.630 --> 00:08:32.480
So you go

129
00:08:51.182 --> 00:08:53.020
&gt;&gt; Sarah Drasner: So, here we've got

130
00:08:53.020 --> 00:08:59.410
the modal and we've got the tool tip
here and then we've got merging.

131
00:08:59.410 --> 00:09:04.380
So I'm gonna open up the console and we've
got that hello from merging component,

132
00:09:04.380 --> 00:09:06.810
hello from merging component for both.

133
00:09:06.810 --> 00:09:08.780
Let me go show you what that is.

134
00:09:08.780 --> 00:09:10.833
So in this one.

135
00:09:14.020 --> 00:09:18.796
&gt;&gt; Sarah Drasner: In our source we have or
mixins, we've got one called toggle

136
00:09:18.796 --> 00:09:23.590
that we had used in these components for
tooltip and mortal.

137
00:09:23.590 --> 00:09:26.730
And then we also have
this Merging Component.

138
00:09:26.730 --> 00:09:29.740
We sayHello for
Merging Component and this.sayHello.

139
00:09:29.740 --> 00:09:33.230
We're also calling this component
called hi that has that sayHello.

140
00:09:33.230 --> 00:09:36.420
So, the Hello for
a Merging Component wins.

141
00:09:36.420 --> 00:09:41.260
I had mentioned that the Vue mixin would
be registered in the main dot js file.

142
00:09:41.260 --> 00:09:45.010
So remember this main .js file
we have our Vue instance.

143
00:09:45.010 --> 00:09:52.010
We can uncomment this and
bring in this new global mixin.

144
00:09:52.010 --> 00:09:54.670
And now we have [LAUGH]
Hello from global mixin.

145
00:09:54.670 --> 00:09:55.770
Hello from global mixin.

146
00:09:55.770 --> 00:10:00.060
And this is actually fired three times and
then two times because it's firing for

147
00:10:00.060 --> 00:10:02.360
all of the mixins in
all of the components.

148
00:10:02.360 --> 00:10:10.550
So no [LAUGH] use with caution,
red flags everywhere.

149
00:10:10.550 --> 00:10:13.630
Mixings are I think are really useful.

150
00:10:13.630 --> 00:10:16.840
I would really use global
mixins very carefully.

