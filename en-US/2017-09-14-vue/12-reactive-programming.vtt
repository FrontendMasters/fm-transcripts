WEBVTT

1
00:00:00.280 --> 00:00:02.280
&gt;&gt; Sarah Drasner: Let's go to watchers.

2
00:00:02.280 --> 00:00:04.900
We haven't really dug into
the view instance yet.

3
00:00:04.900 --> 00:00:07.250
And we haven't really talked
about reactivity yet.

4
00:00:07.250 --> 00:00:12.200
And part of the reason why I waited until
now is because it really connects nicely

5
00:00:12.200 --> 00:00:17.510
to understanding what watchers do and
their relationship to how we use them.

6
00:00:17.510 --> 00:00:24.080
So when we talk about reactivity and what
reactive programming is, what do we mean?

7
00:00:24.080 --> 00:00:25.710
What is reactive?

8
00:00:25.710 --> 00:00:30.460
A lot of times people are like,
well it's RxJS and you're not wrong,

9
00:00:30.460 --> 00:00:32.270
RxJS is reactive programming.

10
00:00:32.270 --> 00:00:35.280
But reactive programming is
actually a bigger umbrella and

11
00:00:35.280 --> 00:00:40.710
RxJS is a library that is reactive
that is under that larger umbrella.

12
00:00:40.710 --> 00:00:44.070
So you could have things that
are reactive, that are not RXJS.

13
00:00:45.180 --> 00:00:47.090
So what is reactive?

14
00:00:47.090 --> 00:00:51.160
Reactive programing is programming
with asynchronous data streams, what?

15
00:00:51.160 --> 00:00:56.909
Okay, [LAUGH] a stream is a sequence
of on going events ordered

16
00:00:56.909 --> 00:01:02.108
in time that offer some hooks
with which to observe it.

17
00:01:02.108 --> 00:01:04.896
I think a common example that
people use is something like,

18
00:01:04.896 --> 00:01:08.128
a really minute one that we all now,
is something like a Hoverstate,

19
00:01:08.128 --> 00:01:10.380
if you highlight a transition
on a Hoverstate.

20
00:01:10.380 --> 00:01:14.620
You have the moment that you have
hovered on it, you have the stream

21
00:01:14.620 --> 00:01:18.390
that occurs while it's transitioning and
then you have its end state.

22
00:01:18.390 --> 00:01:23.280
So, those hooks are like when
you first start observing it,

23
00:01:23.280 --> 00:01:26.500
points in between and
then when you're done observing it.

24
00:01:26.500 --> 00:01:29.760
These are, of course, really,
really generalized and

25
00:01:29.760 --> 00:01:34.020
simplified ways of
describing this concept.

26
00:01:34.020 --> 00:01:37.340
But I'm not going to dive
too far into reactivity,

27
00:01:37.340 --> 00:01:41.720
I just need you to kind of understand
the basis of it before we keep going.

28
00:01:42.780 --> 00:01:46.930
So when we use reactive premises for
building applications,

29
00:01:46.930 --> 00:01:51.650
it means it's very easy to update state
in reaction to events that occur.

30
00:01:51.650 --> 00:01:54.229
And really that's what we're
using view for, right?

31
00:01:54.229 --> 00:02:00.730
We're not using view for building out
the HTML and CSS so much, we are.

32
00:02:00.730 --> 00:02:02.820
But really the parts where you and

33
00:02:02.820 --> 00:02:07.410
that view instance come in handy are the
points where we're changing things, and

34
00:02:07.410 --> 00:02:11.800
we're interacting with things,
and we're updating things.

35
00:02:11.800 --> 00:02:14.200
So Andre Staltz has a great post about it.

36
00:02:14.200 --> 00:02:16.120
It's very, very long but
it's very, very good.

37
00:02:16.120 --> 00:02:18.670
And so if you wanna read more
about reactive programming,

38
00:02:18.670 --> 00:02:20.710
you can do more of a deep dive there.

39
00:02:20.710 --> 00:02:25.214
It's written in English [LAUGH] and
is really great.

40
00:02:25.214 --> 00:02:26.690
So what is reactive?

41
00:02:26.690 --> 00:02:28.309
What does reactivity mean for

42
00:02:28.309 --> 00:02:32.198
all of the different frameworks that
we've been talking about so far?

43
00:02:32.198 --> 00:02:36.930
Well, Angular.1.x uses dirty
checking in order to be reactive.

44
00:02:36.930 --> 00:02:40.710
Cycle and Angular 2 use reactive
streams like XStream and

45
00:02:40.710 --> 00:02:45.170
RxJS, so these are all different
ways that people are reactive.

46
00:02:45.170 --> 00:02:51.320
View.js, MobX, and Ractive all use
a variation of getters and setters.

47
00:02:51.320 --> 00:02:55.820
And so that's what we're gonna talk
about today because that's view's

48
00:02:55.820 --> 00:02:58.739
version of using reactive premises.

49
00:02:59.970 --> 00:03:02.870
Despite the name, react is not reactive.

50
00:03:02.870 --> 00:03:06.856
I actually thought it was, then I was
talking to Dan Avero and he was like,

51
00:03:06.856 --> 00:03:07.638
no it's not.

52
00:03:07.638 --> 00:03:11.150
[LAUGH] It uses a pull approach
rather than a push approach.

53
00:03:11.150 --> 00:03:15.210
And if you want more information
about that design architecture,

54
00:03:15.210 --> 00:03:18.990
you can do more of a deep dive in
the react design documentation.

55
00:03:18.990 --> 00:03:23.561
There's an anchor tag that it
goes to directly that section.

56
00:03:23.561 --> 00:03:29.640
There's actually great docs in vue's guide
about vue's reactivity in its system.

57
00:03:29.640 --> 00:03:32.600
So if you wanna do a deep dive there,
you can do that.

58
00:03:32.600 --> 00:03:36.920
Damian Dullsz, who works at Monterail,
who just put on the vue conf recently,

59
00:03:36.920 --> 00:03:40.970
wrote a great post about
creating a reactive engine.

60
00:03:40.970 --> 00:03:43.810
So that one is really,
really awesome as well.

61
00:03:44.950 --> 00:03:49.880
So in vue,
the vue instance takes the object, walks

62
00:03:49.880 --> 00:03:55.260
through the properties that we give to it
and converts them to getters and setters.

63
00:03:55.260 --> 00:04:01.810
So in that vue instance this data property
is really, really important to vue.

64
00:04:01.810 --> 00:04:04.810
And the reason why we define it initially,

65
00:04:04.810 --> 00:04:09.100
is that if you can't detect
property addition or deletion so

66
00:04:09.100 --> 00:04:13.970
we have to state it initially
before we get going working on it.

67
00:04:13.970 --> 00:04:17.290
In order for it to set up that
reactivity system in those getters and

68
00:04:17.290 --> 00:04:20.860
setters, we need that object in
order to keep track of things.

