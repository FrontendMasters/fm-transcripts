WEBVTT

1
00:00:00.170 --> 00:00:04.000
&gt;&gt; Sarah: We talked about components and
we have a bunch of demos already.

2
00:00:04.000 --> 00:00:08.030
Let's take one of the demos we already
worked on and actually start using them

3
00:00:08.030 --> 00:00:11.520
with components, instead of just having
everything living in the view instance.

4
00:00:11.520 --> 00:00:13.010
It's not very common, but

5
00:00:13.010 --> 00:00:16.450
you're just gonna stick every single
thing inside of the view instance.

6
00:00:16.450 --> 00:00:18.680
You're actually usually gonna
have that view instance and

7
00:00:18.680 --> 00:00:20.720
create components off of it.

8
00:00:20.720 --> 00:00:22.020
So let's refactor.

9
00:00:23.140 --> 00:00:28.041
We had this before,
we have our little comment form, like we

10
00:00:28.041 --> 00:00:33.870
ate lunch and then we can put
that comment onto the forum.

11
00:00:33.870 --> 00:00:38.820
And to review, we had that new
comment was just an empty string.

12
00:00:38.820 --> 00:00:42.960
An array of comments and then we had our
add comment which pushed onto that array

13
00:00:42.960 --> 00:00:45.030
and cleared out that string.

14
00:00:45.030 --> 00:00:52.385
And in the ul we have an li that's common
in comments and there's the comment.

15
00:00:52.385 --> 00:00:56.450
But we're repeating ourselves
with that ally, this is not

16
00:00:56.450 --> 00:01:01.170
necessarily a refactor that I would do,
but it's gonna get us to the next step.

17
00:01:01.170 --> 00:01:05.740
We talked a little bit about that
template string that we could do.

18
00:01:05.740 --> 00:01:09.380
Since we're redoing that li again and
again,

19
00:01:09.380 --> 00:01:14.315
what we could do is put it in a string and
have that li be encapsulated here.

20
00:01:14.315 --> 00:01:17.191
So let's actually go into code pen and
take a look.

21
00:01:17.191 --> 00:01:22.963
I'm gonna collapse these guys so
you can see it a little bit better.

22
00:01:22.963 --> 00:01:29.200
Our comments form, our view instance looks
pretty much the same, but we're declaring

23
00:01:29.200 --> 00:01:34.260
above the vue instance, this vue.comment,
and this is individual-comment,

24
00:01:34.260 --> 00:01:38.450
and here's our template, and we're
passing down the props of comment post.

25
00:01:38.450 --> 00:01:45.040
Then when we look in our li,
we have this li is individual-comment.

26
00:01:45.040 --> 00:01:47.960
So what that will do is
establish a relationship

27
00:01:47.960 --> 00:01:50.890
between this individual-comment, and

28
00:01:50.890 --> 00:01:55.400
this is individual comments and whatever
is in that template will be output there.

29
00:01:56.970 --> 00:01:58.800
So what changed?

30
00:01:58.800 --> 00:02:04.220
We have the li that's here and
then we have that is, which is here.

31
00:02:04.220 --> 00:02:07.570
And that's what's changing,
that's what we're using.

32
00:02:07.570 --> 00:02:11.690
That is is a special piece
of markup that we're using.

33
00:02:11.690 --> 00:02:16.050
But, you know, that was just basically
a step because, really, in comment forums,

34
00:02:16.050 --> 00:02:19.200
we don't just like write the comment and
there's no other information.

35
00:02:19.200 --> 00:02:24.240
We usually have the person's avatar, and
their name, and what they said, and stuff.

36
00:02:24.240 --> 00:02:25.420
And you can see how, when we're,

37
00:02:25.420 --> 00:02:29.070
if we're using a template string,
this no longer makes sense.

38
00:02:29.070 --> 00:02:31.520
If I was going to put all of
this stuff in a template string,

39
00:02:31.520 --> 00:02:35.110
that template string would get really
big and a little bit, you know, hairy.

40
00:02:35.110 --> 00:02:38.740
I would lose syntax highlighting and
all that kinda stuff.

41
00:02:38.740 --> 00:02:42.720
So maybe that's better as a component.

42
00:02:42.720 --> 00:02:46.070
Now I can repeat that component over and
over again.

43
00:02:46.070 --> 00:02:47.350
That's a little bit more clear.

44
00:02:48.580 --> 00:02:53.940
So in the JavaScript,
we have individual comment, but now for

45
00:02:53.940 --> 00:02:59.050
the template, we're saying
the comment is this comment template.

46
00:02:59.050 --> 00:03:01.730
We're defining an ID.

47
00:03:01.730 --> 00:03:05.170
And this is a query selector, so
we could use classes, or whatever.

48
00:03:05.170 --> 00:03:07.290
But again, I use IDs in these incidences,

49
00:03:07.290 --> 00:03:09.940
because I really wanna make sure
there's just one reference to it.

50
00:03:09.940 --> 00:03:15.530
I don't wanna, have multiple classes
there, so it kind of does that for me.

51
00:03:15.530 --> 00:03:20.620
And then, in the HTML, we'd have this, and
this is a new little piece of markup that

52
00:03:20.620 --> 00:03:26.410
won't look familiar to you, it's this
wrapping of the script type x-template,

53
00:03:26.410 --> 00:03:30.510
and then we have this
id="comment-template", and

54
00:03:30.510 --> 00:03:33.540
then we have the template which
is the ID of common template.

55
00:03:33.540 --> 00:03:40.210
So that means that this component will use
whatever is inside of this bit of markup.

56
00:03:40.210 --> 00:03:44.320
When we move into like of vue-cli/builds,

57
00:03:44.320 --> 00:03:46.190
these will be structured
totally different.

58
00:03:46.190 --> 00:03:50.090
But if you want to use vue in
an existing application and

59
00:03:50.090 --> 00:03:55.280
you don't have that kind of build set up,
you could use components that are a little

60
00:03:55.280 --> 00:04:00.445
bit larger in your application and
make them this special little script type.

61
00:04:00.445 --> 00:04:04.377
And basically what will happen is HTML,
CSS, JavaScript will not understand that

62
00:04:04.377 --> 00:04:07.410
script type it will just pass over it and
it won't parse it.

63
00:04:07.410 --> 00:04:09.360
But vue will go look for it.

64
00:04:09.360 --> 00:04:12.310
So it is a clever little
way of working around it.

65
00:04:12.310 --> 00:04:16.760
And grabbing that piece and
turning it into a component, yeah?

66
00:04:16.760 --> 00:04:22.270
&gt;&gt; Speaker 2: So, in your HTML,
you have an li take.

67
00:04:22.270 --> 00:04:26.356
And you're saying it is a comment,
but it is a component, but

68
00:04:26.356 --> 00:04:29.350
then your component
template also has an li.

69
00:04:29.350 --> 00:04:30.906
So is it replacing?

70
00:04:30.906 --> 00:04:34.393
&gt;&gt; Sarah: Yeah, I think actually I
should have probably used &lt;span&gt; for

71
00:04:34.393 --> 00:04:36.212
that, now that I think about it.

72
00:04:36.212 --> 00:04:40.053
But I think you can, I mean I think
like two nesting lis is okay but

73
00:04:40.053 --> 00:04:41.820
not really good markups.

74
00:04:41.820 --> 00:04:46.230
&gt;&gt; Speaker 2: So, your original li
remains in any attributes you put on it.

75
00:04:46.230 --> 00:04:49.430
And then, the content of
the template goes inside of it?

76
00:04:49.430 --> 00:04:50.380
&gt;&gt; Sarah: You know, I'm not sure.

77
00:04:50.380 --> 00:04:51.170
Let's go look.

78
00:04:51.170 --> 00:04:53.540
Because we can see this
pretty easily from the DOM.

79
00:04:55.030 --> 00:04:58.582
So if we go over here.

80
00:05:03.586 --> 00:05:04.500
&gt;&gt; Sarah: It's just one li.

81
00:05:04.500 --> 00:05:06.910
So it is actually replacing that one.

82
00:05:06.910 --> 00:05:09.230
So it's basically saying,
taking that template and

83
00:05:09.230 --> 00:05:11.710
replacing that existing li with that.

84
00:05:11.710 --> 00:05:15.850
But I think, there might be a better
way of structuring that code so

85
00:05:15.850 --> 00:05:17.670
that there's not a duplication of LIs.

86
00:05:17.670 --> 00:05:21.980
I could have used a div or
something else in that area.

87
00:05:21.980 --> 00:05:23.570
&gt;&gt; Speaker 2: Is it like
merging the properties?

88
00:05:23.570 --> 00:05:27.380
Cuz you have other things
on there like v-4 and

89
00:05:27.380 --> 00:05:31.150
those other properties on your master li.

90
00:05:31.150 --> 00:05:35.400
&gt;&gt; Sarah: It's not, It's not merging them,
it's basically taking that

91
00:05:35.400 --> 00:05:40.170
whatever the inner text is and
using the inner text.

92
00:05:40.170 --> 00:05:44.532
So it's the same thing as like if you
are replacing the inner text in straight

93
00:05:44.532 --> 00:05:45.498
up JavaScript.

94
00:05:45.498 --> 00:05:47.540
Does that make sense?

95
00:05:47.540 --> 00:05:51.120
So it's still using the directives
that's on that component, but

96
00:05:51.120 --> 00:05:54.119
it's replacing the inner
text that's inside of that.

97
00:05:56.930 --> 00:06:02.935
&gt;&gt; Sarah: So then if we go back to this,
if we have that individual comment,

98
00:06:02.935 --> 00:06:06.010
we have a bunch of things in here.

99
00:06:06.010 --> 00:06:08.550
We have comment post to author image, so

100
00:06:08.550 --> 00:06:12.220
you can assume that I have a thing
called comment post to author.

101
00:06:12.220 --> 00:06:16.470
So we have this object that has
the author image The author and the text.

102
00:06:17.690 --> 00:06:22.355
So basically the really important part
here that we changed, was taking this

103
00:06:22.355 --> 00:06:29.320
template and pointing to this id and
it is pointing to this id in the html.

104
00:06:29.320 --> 00:06:33.350
Let's go look basically at
this component as well so

105
00:06:33.350 --> 00:06:35.370
you can see what we are doing exactly.

106
00:06:37.050 --> 00:06:42.560
We've got these comments
are now not an array anymore,

107
00:06:42.560 --> 00:06:44.850
it's now, well it's still an array, but

108
00:06:44.850 --> 00:06:48.520
we have objects that we're using
to pass all of those down.

109
00:06:48.520 --> 00:06:53.930
So if we look at this li,
we can still say is individual comment,

110
00:06:53.930 --> 00:06:58.041
but then we can pass in all
of that information and

111
00:06:58.041 --> 00:07:02.172
to have images, and
small tag, and ptag, etc.

112
00:07:02.172 --> 00:07:08.825
So, another option,
is that we could do a local component.

113
00:07:08.825 --> 00:07:13.055
This is only available to you if you're
all using it within the same file,

114
00:07:13.055 --> 00:07:15.205
as the same as the view instance.

115
00:07:15.205 --> 00:07:17.725
So, it's not if you're
starting to split things up,

116
00:07:17.725 --> 00:07:20.647
you still need to use this vue.component.

117
00:07:20.647 --> 00:07:22.467
But if it's all in the same file,

118
00:07:22.467 --> 00:07:28.097
you could write const IndividualComment
and then the template in the props.

119
00:07:28.097 --> 00:07:31.677
So that's kind of a nice clean way of
writing that, and we're doing that all in

120
00:07:31.677 --> 00:07:35.737
CodePen in one file, so
we're able to do that if we wanted to.

121
00:07:35.737 --> 00:07:40.280
I use the other syntax because
it's more flexible, if I wanted to

122
00:07:40.280 --> 00:07:45.790
keep it in a different file or
put it in one, then I could do so.

123
00:07:45.790 --> 00:07:51.510
So in here, if we wanted to use
this const individual comment and

124
00:07:51.510 --> 00:07:56.784
designate it this way, we would then have
to in our view instance say components,

125
00:07:56.784 --> 00:08:02.480
and individual component is, our
individual comment is, individual comment.

126
00:08:02.480 --> 00:08:06.140
So we would have to then say that
we're using some components.

127
00:08:06.140 --> 00:08:09.080
And that's where it is, so
that's the changes that we would have.

