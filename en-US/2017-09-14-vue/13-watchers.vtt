WEBVTT

1
00:00:00.230 --> 00:00:01.980
&gt;&gt; Sarah Drasner: When we're
talking about watchers, and

2
00:00:01.980 --> 00:00:07.220
how those play a part in all of this,
each component has a watcher instance.

3
00:00:07.220 --> 00:00:09.192
So if we have the view instance,

4
00:00:09.192 --> 00:00:12.860
we're soon gonna be making components that
are an extension of that view instance.

5
00:00:12.860 --> 00:00:15.910
So there are all these different
components that we'll be using to build

6
00:00:15.910 --> 00:00:17.120
out our application.

7
00:00:17.120 --> 00:00:20.090
Each one of our components
has a watcher instance.

8
00:00:20.090 --> 00:00:23.040
The properties touched by
the watcher during render

9
00:00:23.040 --> 00:00:25.380
are registered as dependencies.

10
00:00:25.380 --> 00:00:27.830
And when the setter's triggered,

11
00:00:27.830 --> 00:00:32.110
it lets the watcher know and
causes the component to re-render.

12
00:00:32.110 --> 00:00:36.462
This is important,
because we're using a virtual DOM, and

13
00:00:36.462 --> 00:00:38.776
actually let me go back to this.

14
00:00:38.776 --> 00:00:40.252
We're using a virtual DOM.

15
00:00:40.252 --> 00:00:43.852
So calculations in JavaScript
are relatively cheap, but

16
00:00:43.852 --> 00:00:47.094
to reach into the DOM is
actually pretty expensive.

17
00:00:47.094 --> 00:00:51.948
So we're gonna do as much calculation
in our virtual DOM before we

18
00:00:51.948 --> 00:00:55.048
actually bring it over to the DOM itself.

19
00:00:55.048 --> 00:00:58.591
So that we're doing all of,
it keeps it really really fast and

20
00:00:58.591 --> 00:01:00.445
performing, do a lot of logic.

21
00:01:00.445 --> 00:01:04.567
You saw how fast those computed
values allowed us to update things.

22
00:01:04.567 --> 00:01:10.938
All right, so if we're gonna look at this
Vue instance in a little bit more depth.

23
00:01:10.938 --> 00:01:15.053
If I have something like this
is the initial message, and

24
00:01:15.053 --> 00:01:19.353
this is another message,
I'm going to console log the VM.

25
00:01:19.353 --> 00:01:26.410
Which is I could call this anything,
but it's short for Vue model.

26
00:01:26.410 --> 00:01:28.883
View works off of a view model premises,

27
00:01:28.883 --> 00:01:33.190
it's not the same as view model
programming that you might be used to.

28
00:01:33.190 --> 00:01:38.096
So I could say, vm.thing, I am a new
thing, cuz we've got all of these data and

29
00:01:38.096 --> 00:01:42.910
we've got these messages, and
other messages I can save that outside.

30
00:01:42.910 --> 00:01:48.610
But what ends up happening if I
go over to this other window.

31
00:01:48.610 --> 00:01:53.310
First of all, we saw in Vue that
we could look in the DevTools,

32
00:01:53.310 --> 00:01:55.920
that we could look at all of
these things that we have here.

33
00:01:55.920 --> 00:01:57.880
We don't see that thing.

34
00:01:57.880 --> 00:02:00.450
We don't see that thing available to us.

35
00:02:00.450 --> 00:02:03.200
We only have message and other message.

36
00:02:03.200 --> 00:02:08.620
Now if we go in the Console, we get
this view.$3, so we can go over here.

37
00:02:08.620 --> 00:02:14.260
We see message, other message, and we do
see thing, but we don't see it in Vue.

38
00:02:14.260 --> 00:02:17.130
And the reason for
that is we added it later, so

39
00:02:17.130 --> 00:02:20.375
it didn't setup all of
the reactivity that we need.

40
00:02:20.375 --> 00:02:21.492
It doesn't setup-
&gt;&gt; Speaker 2: It's just a regular

41
00:02:21.492 --> 00:02:22.055
property at that time.

42
00:02:22.055 --> 00:02:23.620
&gt;&gt; Sarah Drasner: It's
just a regular property.

43
00:02:23.620 --> 00:02:26.400
It doesn't have any of
the reactivity that we want.

44
00:02:26.400 --> 00:02:29.070
And you can even check
that by looking below.

45
00:02:29.070 --> 00:02:34.187
We've got getters and setters for message,
and we've got getters and setters for

46
00:02:34.187 --> 00:02:39.253
other message, but we don't have them for
the other property that we just added.

47
00:02:39.253 --> 00:02:44.229
Because we didn't declare it initially,
and

48
00:02:44.229 --> 00:02:48.184
we can check it, even in other way and

49
00:02:48.184 --> 00:02:53.553
say something like input
v-model equals thing.

50
00:02:53.553 --> 00:02:56.464
And actually,
let's start off with message, so

51
00:02:56.464 --> 00:02:58.275
you can see it in action first.

52
00:02:58.275 --> 00:03:05.213
So message and
I should do type equals text.

53
00:03:05.213 --> 00:03:10.474
So if I run that, you can see that that's
filled with this is the initial message,

54
00:03:10.474 --> 00:03:12.750
and it's the same thing as above.

55
00:03:12.750 --> 00:03:17.530
And I can change this and it will update
to whatever value, you saw this earlier.

56
00:03:17.530 --> 00:03:21.390
But if I now change this to thing
that we had declared outside.

57
00:03:22.660 --> 00:03:25.896
If I set up that v-model,
I can run it again.

58
00:03:25.896 --> 00:03:31.220
And you'll see that there's no
relationship between the v-model and

59
00:03:31.220 --> 00:03:34.336
the message that's getting outputted.

60
00:03:36.378 --> 00:03:39.906
&gt;&gt; Sarah Drasner: So the Vue instance
is the middleman between the DOM and

61
00:03:39.906 --> 00:03:43.350
the business logic,
it's managing that stuff.

62
00:03:43.350 --> 00:03:47.170
And you might have heard people say
things like React is just JavaScript.

63
00:03:47.170 --> 00:03:49.610
Vue is just JavaScript too.

64
00:03:49.610 --> 00:03:54.135
It's not more complicated than, I mean,
there is some stuff that we're doing,

65
00:03:54.135 --> 00:03:57.695
same with React to manage that state and
to create a virtual DOM.

66
00:03:57.695 --> 00:04:03.487
But this is all done without a lot
of magic using getters and setters.

67
00:04:03.487 --> 00:04:07.583
So watch updates the DOM
only if it is required.

68
00:04:07.583 --> 00:04:10.664
It performs calculations in JavaScript.

69
00:04:10.664 --> 00:04:16.650
So JavaScript again, is really preferment
at creating those calculations but

70
00:04:16.650 --> 00:04:19.120
not very performance at accessing the DOM.

71
00:04:19.120 --> 00:04:21.330
So we have a virtual DOM,
which is like a copy but

72
00:04:21.330 --> 00:04:25.060
parsed in JavaScript, that way we can
run all of those calculations and

73
00:04:25.060 --> 00:04:29.400
only touch the DOM when we're
done making those calculations.

74
00:04:29.400 --> 00:04:33.032
So it will only update the DOM for
the things that needs to be change,

75
00:04:33.032 --> 00:04:34.001
which is faster.

76
00:04:34.001 --> 00:04:38.542
So talking about WATCHERS in particular,
WATCHERS are really good for

77
00:04:38.542 --> 00:04:40.138
asynchronous updates.

78
00:04:40.138 --> 00:04:44.558
They're good for things like updates and
transitions with data changes because

79
00:04:44.558 --> 00:04:48.393
remember, we said that the watchers
were looking at that component.

80
00:04:48.393 --> 00:04:51.510
They're actually the ones that
are observing all of those things,

81
00:04:51.510 --> 00:04:53.650
they're observing those data streams.

82
00:04:53.650 --> 00:04:56.900
So if you need to plug into
that functionality, you can,

83
00:04:56.900 --> 00:04:58.630
which is kind of awesome.

84
00:04:58.630 --> 00:05:03.260
So we're going to watch any data
property declared on the Vue instance.

85
00:05:03.260 --> 00:05:07.794
In this really, really, super-simple
example, we've got a counter that's 0 and

86
00:05:07.794 --> 00:05:11.271
then we've got a watch,
which is declared just like our methods,

87
00:05:11.271 --> 00:05:13.430
just like our computed.

88
00:05:13.430 --> 00:05:15.779
And we've got this counter.

89
00:05:15.779 --> 00:05:18.963
And inside the counter,
we've got this console log.

90
00:05:18.963 --> 00:05:20.640
So let's go look at this.

91
00:05:20.640 --> 00:05:23.260
We've got our console open in CodePen.

92
00:05:23.260 --> 00:05:27.370
And every time I update that, that's going
to fire because that's watching that

93
00:05:27.370 --> 00:05:31.760
particular property and executing
logic anytime that property changes.

94
00:05:31.760 --> 00:05:35.140
&gt;&gt; Speaker 2: So is the name of
your watcher significant then?

95
00:05:35.140 --> 00:05:37.440
That's how you tell it
which property to watch?

96
00:05:37.440 --> 00:05:40.000
&gt;&gt; Sarah Drasner: Yeah,
this has to be the same as this.

97
00:05:40.000 --> 00:05:42.010
So counter has to be counter.

98
00:05:42.010 --> 00:05:44.630
Unlike the computed value where we're
trying to make it different, so

99
00:05:44.630 --> 00:05:46.930
that we can access it differently
this has to be the same.

100
00:05:49.380 --> 00:05:49.940
Great question.

101
00:05:51.690 --> 00:05:55.070
Okay, so
if we have something like punk beers.

102
00:05:55.070 --> 00:05:58.580
[LAUGH] We can use Vue's watchers and

103
00:05:58.580 --> 00:06:03.966
Axios together to add more
info on an infinite scroll.

104
00:06:03.966 --> 00:06:07.607
So this actually,
this API has rate limiting, so

105
00:06:07.607 --> 00:06:10.735
it's probably not the best for this demo.

106
00:06:10.735 --> 00:06:13.705
But basically,
there's a bunch of beers and

107
00:06:13.705 --> 00:06:16.921
they're not really on
the page until I use them.

108
00:06:16.921 --> 00:06:19.555
So if I actually go into the Vue DevTools,

109
00:06:19.555 --> 00:06:24.444
at first we have an array that has three
and then as I'm scrolling it has four,

110
00:06:24.444 --> 00:06:28.380
five, six, seven,
you can see the array's updating.

111
00:06:28.380 --> 00:06:31.730
I'm getting more of these things and
I'm making that request for

112
00:06:31.730 --> 00:06:35.840
more information as I'm hitting
the bottom of the page.

113
00:06:35.840 --> 00:06:42.140
So what we have here is we're watching
this thing we just called bottom is false.

114
00:06:42.140 --> 00:06:46.050
So we're seeing if that
property is going to change.

115
00:06:46.050 --> 00:06:50.640
And basically, we're gonna add a beer
every time that bottom is false.

116
00:06:50.640 --> 00:06:54.440
It's good to add beers when you get
to the bottom of your barrel, right?

117
00:06:54.440 --> 00:06:57.740
[LAUGH] We're plugging into created here.

118
00:06:57.740 --> 00:06:58.989
We could also say mounted.

119
00:06:58.989 --> 00:07:02.672
That's a life cycle hook, which we have
yet to talk about, but we will get there.

120
00:07:02.672 --> 00:07:04.839
&gt;&gt; Speaker 2: Is this like the opposite
of 99 bottles of beer on the wall?

121
00:07:04.839 --> 00:07:06.966
&gt;&gt; Sarah Drasner: Yeah, exactly, exactly.

122
00:07:06.966 --> 00:07:10.349
As soon as we need more beer we
need to fetch more beer, and

123
00:07:10.349 --> 00:07:12.609
they're all like punk beers I guess.

124
00:07:12.609 --> 00:07:14.111
That's cool.

125
00:07:14.111 --> 00:07:16.790
So we're listening to a scroll event.

126
00:07:16.790 --> 00:07:19.980
And in our methods we
have this bottom visible,

127
00:07:19.980 --> 00:07:24.510
which basically does a calculation to see
if we're near the bottom of the page, and

128
00:07:24.510 --> 00:07:26.210
we used Axios before.

129
00:07:26.210 --> 00:07:29.290
You can see why I like Axios,
it's so simple to use.

130
00:07:29.290 --> 00:07:32.620
We're getting things like the name.

131
00:07:32.620 --> 00:07:37.030
We're using the name,
the description, tag lines,

132
00:07:37.030 --> 00:07:41.280
some food pairings,
some tips like all sorts of stuff.

133
00:07:41.280 --> 00:07:47.770
So we can add those as we need them, and
we've got like beer.image, beer and beers.

134
00:07:47.770 --> 00:07:52.800
These stuff should actually start
to look pretty familiar to you.

135
00:07:52.800 --> 00:07:57.370
We also have this little loading state
here, which is like if beers.length

136
00:07:57.370 --> 00:08:01.010
is 0 and we haven't gotten anything from
the server yet, just say loading and

137
00:08:01.010 --> 00:08:02.680
you can put whatever you want in there.

138
00:08:04.710 --> 00:08:08.860
So it's pretty nice, because we
can update things on the fly, and

139
00:08:08.860 --> 00:08:13.080
we can have these asynchronous
updates that we're watching.

140
00:08:14.130 --> 00:08:19.580
We're just basically hooking into
the reactivity system that already exists.

141
00:08:19.580 --> 00:08:24.559
We're allowing to get deeper
functionality by grabbing that.

142
00:08:24.559 --> 00:08:29.850
So when watching the property,
you trigger a method on change.

143
00:08:29.850 --> 00:08:33.013
So that bottom has to be
one of the properties,

144
00:08:33.013 --> 00:08:38.220
it has to be one of the properties if
it's a watch, so that some just review.

145
00:08:38.220 --> 00:08:43.115
We have the created, we have our
methods and we have this.adBeer.

146
00:08:43.115 --> 00:08:48.068
And we're basically grabbing all
of these information from this

147
00:08:48.068 --> 00:08:53.400
Punk API that you can totally use also,
it's really fun to plug into.

148
00:08:53.400 --> 00:08:57.990
So we have access to the new value and
the old value if we want it, that's great.

149
00:08:57.990 --> 00:09:00.984
Remember, I said that with
those asynchronous data streams

150
00:09:00.984 --> 00:09:04.880
in a reactivity system, we have access
to like a couple different hooks.

151
00:09:04.880 --> 00:09:07.240
We've got the value and
we've got the old value.

152
00:09:07.240 --> 00:09:08.570
So that's pretty cool,

153
00:09:08.570 --> 00:09:12.450
because that means that we can do things
like transition between them with any kind

154
00:09:12.450 --> 00:09:17.300
of libraries we want, or we can do it
ourselves with requestAnimationFrame.

155
00:09:17.300 --> 00:09:21.200
So we've got the watch property,
value, and old value.

156
00:09:21.200 --> 00:09:23.880
We can also gain access to nested values.

157
00:09:23.880 --> 00:09:27.860
That's pretty common actually,
because we don't usually just have bottom.

158
00:09:27.860 --> 00:09:31.580
We have things that are more complicated,
like objects and stuff.

159
00:09:31.580 --> 00:09:35.390
So we have the watch property,
deep is true and

160
00:09:35.390 --> 00:09:38.150
then we have nested watch
property value and old values.

161
00:09:38.150 --> 00:09:40.770
So we can also do that.

162
00:09:40.770 --> 00:09:42.820
So we can transition state with Watchers.

163
00:09:42.820 --> 00:09:47.170
So here I've got a chart that I
didn't use a charting library for,

164
00:09:47.170 --> 00:09:49.512
because I know how to work with SVG.

165
00:09:49.512 --> 00:09:52.196
And if you know SVG and
you know Vue directives,

166
00:09:52.196 --> 00:09:55.232
you actually don't need to
load something like D3.

167
00:09:55.232 --> 00:09:59.310
You can just spin up axes and
use SVG values.

168
00:09:59.310 --> 00:10:05.610
SVG's built with math, so SVG and
Watchers make a pretty cool pairing,

169
00:10:05.610 --> 00:10:09.760
because you can make data visualizations
that are updating on the fly.

170
00:10:09.760 --> 00:10:12.410
So we're transitioning
state with Watchers here.

171
00:10:12.410 --> 00:10:17.250
We've got select v-model, so
you're like super pros at v-model now.

172
00:10:17.250 --> 00:10:20.470
You're super pro at V4s with option and

173
00:10:20.470 --> 00:10:25.040
options, and then in here
we've got that selected value.

174
00:10:25.040 --> 00:10:29.680
That's an array of numbers, and
we've got our first data set,

175
00:10:29.680 --> 00:10:31.390
second data set, things like that.

176
00:10:32.450 --> 00:10:35.910
I'm not gonna dig too far
into the code here, but

177
00:10:35.910 --> 00:10:40.580
what is important is that I do pass
in the new value and the old value.

178
00:10:40.580 --> 00:10:42.600
And I'm watching selected.

179
00:10:42.600 --> 00:10:46.560
Selected was that property that
we had already designated here.

180
00:10:46.560 --> 00:10:50.970
So I'm watching selected, and
I can use a library like GreenSock or

181
00:10:50.970 --> 00:10:53.480
I could write it with request
animation frame however I want.

182
00:10:53.480 --> 00:10:56.090
I like GreenSock, so I use it a lot.

183
00:10:56.090 --> 00:11:00.730
And I'm tweening back and forth between
one dataset and another dataset.

184
00:11:03.420 --> 00:11:05.580
Yeah, SVG's built with math,
like I mentioned.

185
00:11:05.580 --> 00:11:06.820
So I can make these bars.

186
00:11:06.820 --> 00:11:10.710
And I can make those computed
properties that are cached,

187
00:11:10.710 --> 00:11:13.110
unless their dependencies are changed.

188
00:11:13.110 --> 00:11:14.650
And I've got my axis.

189
00:11:14.650 --> 00:11:19.530
That's all it takes to make an axis
that's super flexible with SVG and

190
00:11:19.530 --> 00:11:20.320
Vue directives.

191
00:11:20.320 --> 00:11:25.822
I don't need to load this giant library
in order to do it, so that's really fun.

192
00:11:27.420 --> 00:11:29.440
And we're not gonna do an exercise for
this section,

193
00:11:29.440 --> 00:11:32.710
because Watchers have
more of a limited use.

194
00:11:32.710 --> 00:11:36.840
And you are basically like getting
pretty good at those methods.

195
00:11:36.840 --> 00:11:39.100
And Watchers,
we're gonna talk about components next,

196
00:11:39.100 --> 00:11:42.030
because I think components
are probably like

197
00:11:42.030 --> 00:11:44.910
the most important thing that we need
to cover that we haven't covered yet.

