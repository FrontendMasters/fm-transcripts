WEBVTT

1
00:00:00.550 --> 00:00:03.579
&gt;&gt; Kyle Simpson: Now there's some values
within the primitive types that we should

2
00:00:03.579 --> 00:00:04.451
pay attention to.

3
00:00:04.451 --> 00:00:07.290
Some values that we wanna look at.

4
00:00:07.290 --> 00:00:11.740
Specifically we're gonna look at NaN,
which is transliterated as not a number.

5
00:00:11.740 --> 00:00:13.166
Although we'll find out in just a moment.

6
00:00:13.166 --> 00:00:15.570
That's a really terrible name for that.

7
00:00:15.570 --> 00:00:18.380
Both infinity and -infinity,
not all languages have that but

8
00:00:18.380 --> 00:00:22.570
JavaScript definitely has a representation
of both infinity and -infinity.

9
00:00:22.570 --> 00:00:25.680
Some of your intuition about
those might not be the same like

10
00:00:25.680 --> 00:00:28.220
I know we have some math
folks in the crowd.

11
00:00:28.220 --> 00:00:32.250
It may anger you to think how JavaScript
interprets infinity and things like that,

12
00:00:32.250 --> 00:00:37.150
but like for example,
you can technically add up numbers,

13
00:00:37.150 --> 00:00:40.920
and when you overflow the 54 bits,
it just goes to infinity.

14
00:00:40.920 --> 00:00:43.954
That's probably super
annoying to math folks.

15
00:00:43.954 --> 00:00:47.500
[COUGH]
But

16
00:00:47.500 --> 00:00:50.680
these are special values that
we should pay attention to.

17
00:00:50.680 --> 00:00:52.880
Null is a value, as well as a type.

18
00:00:52.880 --> 00:00:55.190
It's the only value in the null type.

19
00:00:55.190 --> 00:00:57.992
Undefined is the only value
in the undefined type.

20
00:00:57.992 --> 00:01:01.150
And I mentioned here, the void operator.

21
00:01:01.150 --> 00:01:05.130
That's an important operator,
but it doesn't get any attention.

22
00:01:05.130 --> 00:01:08.450
That's how you can take any value and
produce the undefined value from it.

23
00:01:08.450 --> 00:01:09.970
So it takes whatever you put in.

24
00:01:09.970 --> 00:01:11.559
Say void true, void function, whatever.

25
00:01:11.559 --> 00:01:12.650
You're gonna get back undefined.

26
00:01:12.650 --> 00:01:14.342
Now there's not a lot of uses for
that, but

27
00:01:14.342 --> 00:01:16.650
there's a couple places that
I've used that in the past.

28
00:01:18.270 --> 00:01:22.470
And then again, something that's gonna
annoy the math folks in the audience.

29
00:01:22.470 --> 00:01:24.184
There's both a +0 and -0.

30
00:01:24.184 --> 00:01:27.250
Now you may think, well, this is crazy.

31
00:01:27.250 --> 00:01:30.190
Right off the bat, see, we have proof
that JavaScript was poorly defined.

32
00:01:30.190 --> 00:01:32.280
Why on Earth would they come up
with this kind of craziness?

33
00:01:33.310 --> 00:01:34.990
None of this is JavaScript invented.

34
00:01:36.820 --> 00:01:40.340
Everything that I just talked about,
the + and -0, and the positive and

35
00:01:40.340 --> 00:01:47.420
negative infinity, that is true of
all IEEE 754 compliant languages.

36
00:01:47.420 --> 00:01:49.960
Which include Ruby, Python, and

37
00:01:49.960 --> 00:01:53.120
about a list of 12 or
15,000 other languages that are out there.

38
00:01:54.320 --> 00:01:59.662
Most languages actually these days
are created to be IEEE 754 compliant.

39
00:01:59.662 --> 00:02:02.490
And JavaScript is just one of them.

40
00:02:02.490 --> 00:02:06.616
So whenever we complain about 0.1 plus
0.2 is not equal to 0.3 or whatever,

41
00:02:06.616 --> 00:02:08.880
has nothing to do with JavaScript.

42
00:02:08.880 --> 00:02:10.301
That's on IEEE.

43
00:02:10.301 --> 00:02:13.705
They chose the floating point
representation that can't

44
00:02:13.705 --> 00:02:18.520
correctly represent numbers in memory
that are floating point numbers.

45
00:02:18.520 --> 00:02:22.534
That's on IEEE, and all JavaScript did
was say we're gonna be compliant to IEEE.

46
00:02:22.534 --> 00:02:24.455
The exact same thing is true.

47
00:02:24.455 --> 00:02:26.527
Some languages try to hide it
a little bit more than others.

48
00:02:26.527 --> 00:02:34.320
But this is just all basic computing
science, discrete mathematics stuff, okay?

49
00:02:34.320 --> 00:02:37.645
So -0, even though that sounds strange and
it's counterintuitive from

50
00:02:37.645 --> 00:02:40.717
a mathematic perspective,
is something that's required by IEEE.

51
00:02:40.717 --> 00:02:44.535
And it turns out there's at least one or
two small used cases where it's helpful,

52
00:02:44.535 --> 00:02:46.649
so we're gonna look at
that in just a moment.

53
00:02:46.649 --> 00:02:48.510
NaN.

54
00:02:49.940 --> 00:02:53.090
Supposedly, NaN stands for not a number.

55
00:02:53.090 --> 00:02:55.980
Let me tell you where
NaN actually comes from.

56
00:02:55.980 --> 00:03:00.750
Any time you try to take a value and
convert it to a number, and

57
00:03:00.750 --> 00:03:06.539
that conversion fails, the resultant value
is to tell you this was an invalid number.

58
00:03:08.130 --> 00:03:11.170
That is the only place
that NaN comes from.

59
00:03:11.170 --> 00:03:14.580
So if we look at this line 1,
we see the divide operator.

60
00:03:14.580 --> 00:03:18.480
The divide operator specifically
designed to do mathematic division,

61
00:03:18.480 --> 00:03:22.990
which means it needs both of
its operands to be numbers.

62
00:03:22.990 --> 00:03:25.473
If you give it something
that's not a number,

63
00:03:25.473 --> 00:03:28.733
we kick in this thing that we're
gonna talk about a lot more.

64
00:03:28.733 --> 00:03:33.670
This implicit coercion thing,
it's gonna try to convert it to a number.

65
00:03:33.670 --> 00:03:35.997
And when you try to
convert "a" to a number,

66
00:03:35.997 --> 00:03:39.692
because we're not telling it what base,
it's gonna assume base ten.

67
00:03:39.692 --> 00:03:45.870
And "a" is not a valid character in base
ten, so it's going to fail to convert it.

68
00:03:45.870 --> 00:03:48.946
Which means it's going to
produce this special value.

69
00:03:48.946 --> 00:03:52.189
We have a term in computing science
we call the sentinel value.

70
00:03:52.189 --> 00:03:58.140
A value that represents some
special characteristic.

71
00:03:58.140 --> 00:04:01.410
We need to give it a special label,
if you will, so

72
00:04:01.410 --> 00:04:03.860
that you know there's
something special about it.

73
00:04:03.860 --> 00:04:06.649
In this case, the specialness is,
it's invalid.

74
00:04:08.820 --> 00:04:11.360
So what are some other options
that we could have used?

75
00:04:11.360 --> 00:04:15.400
If we were to try to go back and
backseat drive on design and language,

76
00:04:15.400 --> 00:04:17.046
what could he have done here?

77
00:04:17.046 --> 00:04:18.980
If you try to convert
something to a number and

78
00:04:18.980 --> 00:04:22.220
it didn't properly convert to a number,
what could we have done?

79
00:04:22.220 --> 00:04:23.859
You could have resulted in false.

80
00:04:25.240 --> 00:04:28.450
But that would be super weird, that you
tried to do a numeric operation and

81
00:04:28.450 --> 00:04:29.900
you ended up with a Boolean value.

82
00:04:31.040 --> 00:04:32.690
That doesn't make any sense.

83
00:04:32.690 --> 00:04:37.490
Null or undefined are similarly weird
results from that type of operation

84
00:04:37.490 --> 00:04:41.960
because they are, in themselves,
distinct different primitive types.

85
00:04:43.630 --> 00:04:47.890
Really, the only resulting type that
a number operation should produce

86
00:04:47.890 --> 00:04:49.160
is a number.

87
00:04:49.160 --> 00:04:50.240
Would we all agree with that?

88
00:04:50.240 --> 00:04:51.596
I hope so.

89
00:04:51.596 --> 00:04:53.280
If you're gonna do a numeric operation,
and

90
00:04:53.280 --> 00:04:57.690
you need a result,
by well better be a number.

91
00:04:57.690 --> 00:04:59.950
Otherwise, what are we doing here?

92
00:04:59.950 --> 00:05:01.610
Why do we even programming?

93
00:05:01.610 --> 00:05:02.380
Okay?

94
00:05:02.380 --> 00:05:04.830
Was it just like programming by guessing?

95
00:05:04.830 --> 00:05:06.610
No, that would be terrible design.

96
00:05:06.610 --> 00:05:09.520
So what's the only other option
if it needs to be a number but

97
00:05:09.520 --> 00:05:11.260
it failed to be a number?

98
00:05:11.260 --> 00:05:14.059
What's the only other option besides
something like the special NaN?

99
00:05:14.059 --> 00:05:16.576
Well we could have thrown an exception.

100
00:05:16.576 --> 00:05:19.210
As a matter of fact, many languages do.

101
00:05:19.210 --> 00:05:23.790
If you try to convert "a" to
an integer in c, you get an exception.

102
00:05:23.790 --> 00:05:25.960
If you try to do it in Java,
you get an exception.

103
00:05:28.390 --> 00:05:30.610
Why didn't JavaScript choose
to make an exception here?

104
00:05:30.610 --> 00:05:33.810
Well, you may not know about
the history of JavaScript, but

105
00:05:33.810 --> 00:05:38.510
JavaScript didn't get the try catch and
exception handling until four years later.

106
00:05:40.170 --> 00:05:43.280
First four years of JavaScript
did not have a try catch or

107
00:05:43.280 --> 00:05:45.380
any notion of handling exceptions.

108
00:05:45.380 --> 00:05:48.190
So this would have been a fatal,
crash your program, kind of an error,

109
00:05:48.190 --> 00:05:48.900
unrecoverable.

110
00:05:50.000 --> 00:05:51.280
That's kind of unfriendly design.

111
00:05:52.730 --> 00:05:55.709
So JavaScript chose as a design aesthetic,
early on,

112
00:05:55.709 --> 00:05:57.796
to try to be as forgiving as possible.

113
00:05:57.796 --> 00:06:00.742
We're gonna see this design aesthetic
over and over and over again.

114
00:06:00.742 --> 00:06:04.741
That there was an intentional decision
at the beginning of the language to say,

115
00:06:04.741 --> 00:06:08.740
let's try not to just frustrate the crap
out of people where there's just error

116
00:06:08.740 --> 00:06:12.620
after error after error and
there's no hope of getting anything done.

117
00:06:12.620 --> 00:06:15.850
JavaScript in a sense was playing
kind of a marketing game.

118
00:06:15.850 --> 00:06:18.442
They were trying to convince people
in real programming languages.

119
00:06:18.442 --> 00:06:21.370
Hey, come try out this toy
language called JavaScript.

120
00:06:22.790 --> 00:06:26.580
One of the best ways I can think of to
attract people is to not frustrate them

121
00:06:26.580 --> 00:06:29.578
by they're being a nuance like
you need a semicolon here or

122
00:06:29.578 --> 00:06:31.431
you need a comma there or whatever.

123
00:06:31.431 --> 00:06:35.380
Try to be as forgiving as we
possibly can while still being sane.

124
00:06:35.380 --> 00:06:38.210
And implicit coercion is a nod to that,
as a matter of fact.

125
00:06:38.210 --> 00:06:40.360
It's a nod to saying instead
of throwing an exception and

126
00:06:40.360 --> 00:06:42.849
just slapping somebody down and
saying sorry, try again.

127
00:06:44.460 --> 00:06:46.786
We're saying let's figure out
what's the best that we can do.

128
00:06:46.786 --> 00:06:49.170
Is there any kind of
guess that we could make?

129
00:06:49.170 --> 00:06:51.890
You did something dumb, but
could we try to recover it?

130
00:06:51.890 --> 00:06:53.270
Instead of garbage in, garbage out,

131
00:06:53.270 --> 00:06:55.670
it's like garbage in,
recycled material out, right?

132
00:06:55.670 --> 00:06:57.660
Let's try to figure out
the best that we can do here.

133
00:06:58.940 --> 00:07:03.790
So, we needed a value to represent
that this number conversion failed.

134
00:07:03.790 --> 00:07:04.804
And NaN is that value.

135
00:07:04.804 --> 00:07:08.780
NaN is the value that says,
number conversion failed.

136
00:07:08.780 --> 00:07:09.800
Okay?

137
00:07:09.800 --> 00:07:14.320
So it hasn't even happened that
the divide has occurred on line 1.

138
00:07:14.320 --> 00:07:17.230
It's just the case that we tried
to convert and that failed.

139
00:07:17.230 --> 00:07:21.800
So now we have a NaN divided by 2 and NaN
with anything else is gonna produce NaN.

140
00:07:22.910 --> 00:07:24.120
NaN times NaN,

141
00:07:24.120 --> 00:07:28.600
NaN divided by, whatever you do, if NaN
is part of it, NaN is gonna come out.

142
00:07:28.600 --> 00:07:32.710
It's just like the invalidating
[COUGH] of all values.

143
00:07:33.720 --> 00:07:36.035
So of course a has
the value NaN on line 3.

144
00:07:36.035 --> 00:07:40.431
And if we ask for the type of a, we get
"number" because that's the only sensible

145
00:07:40.431 --> 00:07:44.480
result is that we did a numeric operation,
we got a number back.

146
00:07:44.480 --> 00:07:49.280
But now we find the conflict
with calling NaN not a number,

147
00:07:49.280 --> 00:07:52.540
because we say the type of not a number
is number, and that makes no sense.

148
00:07:54.570 --> 00:07:57.810
The only proper response here,
is to stop calling it not a number.

149
00:07:59.010 --> 00:08:00.094
That's not what it should be referred to.

150
00:08:00.094 --> 00:08:03.034
If I could go back and change it,
I'd call it the invalid number,

151
00:08:03.034 --> 00:08:04.109
cuz that's what it is.

152
00:08:05.150 --> 00:08:07.040
I call it IN instead of NaN.

153
00:08:07.040 --> 00:08:09.430
I'd call it the invalid number, okay?

154
00:08:10.540 --> 00:08:12.010
That's what it really is.

155
00:08:12.010 --> 00:08:16.752
Now, NaN, again because of IEEE,
this is all required by IEEE.

156
00:08:16.752 --> 00:08:20.414
NaN, [COUGH] there's actually
a bunch of NaN values and

157
00:08:20.414 --> 00:08:24.315
the way you get at them differently,
like the bit patterns

158
00:08:24.315 --> 00:08:28.546
form can be different depending
on your scenario, whatever.

159
00:08:28.546 --> 00:08:33.570
So there's a requirement in IEEE
that NaN is never equal to itself.

160
00:08:35.280 --> 00:08:38.780
Which sounds bizarre because it's
literally the only value that I'm aware of

161
00:08:38.780 --> 00:08:42.510
in all of computing science,
that does not have the identity property.

162
00:08:42.510 --> 00:08:43.871
It is not equal to itself.

163
00:08:43.871 --> 00:08:48.107
We're gonna actually make use of that
identity property in just a moment, but

164
00:08:48.107 --> 00:08:49.719
NaN is never equal to itself.

165
00:08:49.719 --> 00:08:53.457
So if you wanna test for NaN, you're
gonna need a special privileged utility.

166
00:08:53.457 --> 00:08:55.328
And they gave us isNaN.

167
00:08:55.328 --> 00:08:57.260
It's built into the global space.

168
00:08:57.260 --> 00:09:01.160
We get isNaN or
window.isNaN or global.isNaN.

169
00:09:01.160 --> 00:09:03.120
Supposedly, it just
tests to see whether or

170
00:09:03.120 --> 00:09:04.724
not the thing you pass
in is the NaN value.

171
00:09:04.724 --> 00:09:07.860
Unfortunately, there's a fatal
flaw in that original utility.

172
00:09:07.860 --> 00:09:10.596
A bug that we can't fix,
cuz we already just discussed,

173
00:09:10.596 --> 00:09:11.964
as soon as we make mistakes.

174
00:09:11.964 --> 00:09:13.620
Let's write them in stone.

175
00:09:13.620 --> 00:09:15.400
We can't fix this bug.

176
00:09:15.400 --> 00:09:18.495
Because if I pass in isNaN and
I pass in "foo".

177
00:09:18.495 --> 00:09:22.820
Now let me ask you a question,
is "foo" a number?

178
00:09:25.670 --> 00:09:26.170
No.

179
00:09:27.170 --> 00:09:28.530
Is it not a number?

180
00:09:30.350 --> 00:09:31.020
You see the difference?

181
00:09:31.020 --> 00:09:34.000
See the problem with using not
a number as our description?

182
00:09:34.000 --> 00:09:38.820
It is not the special, sentinel,
invalid number type, and yet

183
00:09:38.820 --> 00:09:41.810
we're gonna get true back from isNaN
because you know what isNaN does?

184
00:09:43.120 --> 00:09:46.860
If you pass something that's not already
a number to isNaN, guess what it does?

185
00:09:47.960 --> 00:09:49.639
It tries to convert it to a number first.

186
00:09:50.810 --> 00:09:54.210
And then check to see if
it resulted in the NaN.

187
00:09:54.210 --> 00:09:57.179
Here is a place where that conversion
was a pretty terrible idea.

188
00:09:57.179 --> 00:09:59.720
We should never have tried to convert it.

189
00:09:59.720 --> 00:10:03.180
You should have just taken it and
checked that and be done with it, right?

190
00:10:03.180 --> 00:10:06.890
But unfortunately they automatically
convert first before checking so

191
00:10:06.890 --> 00:10:11.050
by the time it checks it, we've already
converted "foo" to the NaN value and

192
00:10:11.050 --> 00:10:12.310
it says sure, that's a NaN.

193
00:10:14.410 --> 00:10:14.950
Fatal flaw.

194
00:10:15.990 --> 00:10:17.650
So this is a bug in isNaN.

195
00:10:17.650 --> 00:10:21.560
Now, thankfully,
we finally decided to fix it by

196
00:10:21.560 --> 00:10:25.101
making a new isNaN in a different space,
Number.isNaN.

197
00:10:25.101 --> 00:10:28.850
Number.isNaN does exactly what we want,
which is it checks only the value,

198
00:10:28.850 --> 00:10:30.690
doesn't allow that coercion.

199
00:10:30.690 --> 00:10:33.010
This is what we call the polyfill pattern.

200
00:10:33.010 --> 00:10:35.563
You notice I've got an if statement
that checks to make sure it's not

201
00:10:35.563 --> 00:10:36.276
already defined.

202
00:10:36.276 --> 00:10:39.374
And that code would only be
true in older environments, so

203
00:10:39.374 --> 00:10:43.615
we're basically patching an older
environment to have something that's been

204
00:10:43.615 --> 00:10:46.672
added in newer environments,
like for example, ES6.

205
00:10:46.672 --> 00:10:52.164
And you notice what is NaN does here,
it just says typeof num == "number".

206
00:10:52.164 --> 00:10:56.141
So at first, checks to make sure
it's already of that number type and

207
00:10:56.141 --> 00:10:57.520
then it uses the isNaN.

208
00:10:58.650 --> 00:11:03.580
So really the true NaN is only gonna
pass if both of those are the case.

209
00:11:05.490 --> 00:11:07.515
So that's an easy way of polyfilling.

210
00:11:07.515 --> 00:11:09.157
The new built-in Number.isNaN.

211
00:11:09.157 --> 00:11:13.144
If you're using regular isNaN in your
checks, switch to using Number.isNaN so

212
00:11:13.144 --> 00:11:14.913
you don't have those bugs, okay?

213
00:11:14.913 --> 00:11:18.364
Cuz if you're not already accounting for
this problem, the fact is you have a bug

214
00:11:18.364 --> 00:11:21.790
in your current JavaScript programs,
even if you've never been bitten by it.

215
00:11:24.720 --> 00:11:27.240
Just a bug that's been
built into JavaScript.

216
00:11:27.240 --> 00:11:28.630
Turns out there's an even easier, and

217
00:11:28.630 --> 00:11:31.580
perhaps even cleaner way of testing for
NaN.

218
00:11:33.380 --> 00:11:35.539
NaN is the only value that's
never equal to itself.

219
00:11:36.870 --> 00:11:39.350
So if we test the value
to be equal to itself,

220
00:11:39.350 --> 00:11:41.580
NaN is the only one where that will fail.

221
00:11:41.580 --> 00:11:45.910
All right, so that is NaN and
that's how we deal with the NaN.

222
00:11:45.910 --> 00:11:49.680
Again, we check to see if these values,

223
00:11:49.680 --> 00:11:52.590
not equal to itself is the only one
without that identity property.

