WEBVTT

1
00:00:00.066 --> 00:00:03.590
&gt;&gt; Kyle Simpson: Okay, let's talk
about the solution to exercise 3.

2
00:00:03.590 --> 00:00:04.600
If you read the Read Me,

3
00:00:04.600 --> 00:00:08.320
you saw that there were two items
to address in terms of improvement.

4
00:00:08.320 --> 00:00:10.120
One is, were there function expressions,

5
00:00:10.120 --> 00:00:13.520
which probably made more sense
as function declarations?

6
00:00:13.520 --> 00:00:16.070
The other one was could we take
advantage of the hoisting and

7
00:00:16.070 --> 00:00:18.750
reorder the executable code to the top?

8
00:00:20.490 --> 00:00:21.790
So if we start out here looking,

9
00:00:21.790 --> 00:00:27.130
we notice that we have clearly
functions all at the top.

10
00:00:27.130 --> 00:00:28.660
And if we scroll all the way to bottom,
and

11
00:00:28.660 --> 00:00:32.670
this is where I execute accordance
starting with these const.

12
00:00:32.670 --> 00:00:36.246
So what I would prefer to do,
very simply is to take that code and

13
00:00:36.246 --> 00:00:38.207
literally just move it to the top.

14
00:00:43.326 --> 00:00:46.524
&gt;&gt; Kyle Simpson: Now that it's at the top,
my code is easier to read,

15
00:00:46.524 --> 00:00:50.860
because if I open this file I just
need to look at that stuff at the top.

16
00:00:50.860 --> 00:00:52.400
And as soon as I get a little line,

17
00:00:52.400 --> 00:00:56.110
I know there's nothing else executable
that's gonna show up below it, okay?

18
00:00:57.160 --> 00:00:58.500
So that's the first thing.

19
00:00:58.500 --> 00:01:01.960
The second thing now may have
been a little less obvious.

20
00:01:01.960 --> 00:01:06.760
But I was kind of hinting here earlier
that this function expression, even though

21
00:01:06.760 --> 00:01:10.610
I'm doing it with block scoping, which
was an example of using block scoping.

22
00:01:10.610 --> 00:01:15.030
It really is a separate
standalone activity and

23
00:01:15.030 --> 00:01:17.340
it's also multiple lines of code.

24
00:01:17.340 --> 00:01:22.120
Actually it would make a lot more sense
for this to just be a stand alone

25
00:01:22.120 --> 00:01:27.080
function declaration, so we could promote
that out to its own stand alone function.

26
00:01:27.080 --> 00:01:31.330
There's nothing in it that's
requiring the context around it.

27
00:01:31.330 --> 00:01:35.190
So there's no particular reason why it
needed to be embedded in the first place.

28
00:01:35.190 --> 00:01:37.530
Now I could have put it at
the bottom of this scope.

29
00:01:37.530 --> 00:01:42.140
But again, there's no reason for
it to be in that scope, so go ahead and

30
00:01:42.140 --> 00:01:45.050
put it at the outermost scope,
that way we have.

31
00:01:45.050 --> 00:01:48.090
We'll talk about closure next, but
we'll have less closure issues

32
00:01:48.090 --> 00:01:51.250
in the case of putting things
out under their outer scopes.

33
00:01:51.250 --> 00:01:56.110
So, now I don't need this block
scoping stuff at all anyway.

34
00:01:56.110 --> 00:02:00.340
And all I really need to do is just
reference, submit NewWorkEntry.

35
00:02:04.360 --> 00:02:09.110
&gt;&gt; Speaker 2: Are these instances
where we could declare the functions?

36
00:02:11.180 --> 00:02:15.310
&gt;&gt; Kyle Simpson: There was only one other
function expression in the code base and

37
00:02:15.310 --> 00:02:20.260
it is this one, which is the sort time
descending that I have over here.

38
00:02:20.260 --> 00:02:24.580
That particular function
expression is just one line.

39
00:02:24.580 --> 00:02:28.870
I didn't find any benefit to making that
its own standalone function declaration.

40
00:02:28.870 --> 00:02:32.994
That's a short enough function that
essentially can be inline just fine.

41
00:02:32.994 --> 00:02:35.860
You could have moved it out but
there's no particular benefit there.

42
00:02:35.860 --> 00:02:39.367
&gt;&gt; Speaker 2: Sorry,
I still don't quite understand

43
00:02:41.327 --> 00:02:42.750
&gt;&gt; Speaker 2: When to make the call.

44
00:02:43.790 --> 00:02:50.157
To use hosting functions.

45
00:02:50.157 --> 00:02:53.009
&gt;&gt; Kyle Simpson: I'm
not sure I understand.

46
00:02:53.009 --> 00:02:55.393
Because there are two
separate issues that apply,

47
00:02:55.393 --> 00:02:59.470
one is do I use the function expression
verses the function declaration.

48
00:02:59.470 --> 00:03:00.410
That's okay.

49
00:03:00.410 --> 00:03:04.310
An independent question from,
if I've used the declaration,

50
00:03:04.310 --> 00:03:06.540
should I allow it to hoist.

51
00:03:06.540 --> 00:03:10.550
So which one of those two
questions is the one you have?

52
00:03:10.550 --> 00:03:11.490
&gt;&gt; Speaker 2: The first one.

53
00:03:11.490 --> 00:03:12.070
&gt;&gt; Kyle Simpson: The first one.

54
00:03:12.070 --> 00:03:12.950
&gt;&gt; Speaker 2: Yeah.
&gt;&gt; Kyle Simpson: Should I use a function

55
00:03:12.950 --> 00:03:14.740
expression versus a function declaration.

56
00:03:14.740 --> 00:03:15.430
&gt;&gt; Speaker 2: Yeah.

57
00:03:15.430 --> 00:03:19.341
&gt;&gt; Kyle Simpson: For me,
it's as simple as, this is a really short

58
00:03:19.341 --> 00:03:24.120
function
&gt;&gt; Kyle Simpson: This is

59
00:03:24.120 --> 00:03:28.591
a really short function, so
I'm gonna make it an inline function

60
00:03:28.591 --> 00:03:32.190
expression versus this one
up here was a lot longer.

61
00:03:32.190 --> 00:03:34.650
It was 10 or 15 lines of code.

62
00:03:34.650 --> 00:03:37.000
I think it needs to be
its own declaration.

63
00:03:37.000 --> 00:03:38.560
It's just a stylistic preference.

64
00:03:38.560 --> 00:03:42.700
My tolerance level is about
three to five lines of code in

65
00:03:42.700 --> 00:03:44.800
an inline function expression.

66
00:03:44.800 --> 00:03:47.580
There's lots of other little nuanced
things that you'll have to develop your

67
00:03:47.580 --> 00:03:50.800
own style about and probably put into
your style guide for your code base.

68
00:03:50.800 --> 00:03:55.010
But I don't like to nest within nest
within nest within nest within nest

69
00:03:55.010 --> 00:03:56.280
cuz that's also a lot harder.

70
00:03:56.280 --> 00:03:59.920
So to whatever extent possible,
if I'm having multiple layers of nesting,

71
00:03:59.920 --> 00:04:03.680
I'm gonna try to pull those out to
their own function declarations.

72
00:04:03.680 --> 00:04:08.030
Generally speaking, I only nest something
if there is really a reason to nest it,

73
00:04:08.030 --> 00:04:09.320
which one of the main reasons for

74
00:04:09.320 --> 00:04:12.150
nesting will be closure which
is we're about to talk about.

75
00:04:12.150 --> 00:04:17.220
If this function needed to reference some
variable from inside of this function,

76
00:04:17.220 --> 00:04:18.389
we would have needed to nest.

77
00:04:19.430 --> 00:04:21.850
And then it would be a question,
do I need a function expression or

78
00:04:21.850 --> 00:04:24.410
a function declaration that's nested.

79
00:04:24.410 --> 00:04:26.140
But because it didn't even in the nest,

80
00:04:26.140 --> 00:04:29.300
I could just pull it all
the way out to the outer scope.

81
00:04:30.750 --> 00:04:34.690
As a rule of thumb, I try to put functions
at the highest level of the scope

82
00:04:34.690 --> 00:04:36.950
that they will behave correctly at, so

83
00:04:36.950 --> 00:04:39.680
that I have the least amount
of unintended closure.

