WEBVTT

1
00:00:00.490 --> 00:00:04.240
&gt;&gt; : Kyle Simpson: So some takeaways
to avoid some of those weird cases.

2
00:00:04.240 --> 00:00:07.810
If you're gonna do a double equals
comparison can either value, in other

3
00:00:07.810 --> 00:00:12.370
words either side of the double equals,
be the actual true or the false value?

4
00:00:12.370 --> 00:00:17.530
If so I might humbly suggest you
should avoid the double equals, okay.

5
00:00:19.280 --> 00:00:23.330
Or if either side can be the empty array,
the empty string, or

6
00:00:23.330 --> 00:00:27.020
the zero value,
you might want to avoid the double equals.

7
00:00:28.690 --> 00:00:30.710
Now that's only a few
narrow cases actually,

8
00:00:30.710 --> 00:00:33.600
when you really think about all
the places that might happen.

9
00:00:33.600 --> 00:00:37.140
If you go and look at your code and
you think about it critically and

10
00:00:37.140 --> 00:00:39.770
you say what can come in here?

11
00:00:39.770 --> 00:00:42.580
It's not all the time that
that's even gonna be the case.

12
00:00:42.580 --> 00:00:44.080
Now what about if you can't figure it out?

13
00:00:44.080 --> 00:00:47.690
What if you're like well I don't even
know,err on the side of caution and

14
00:00:47.690 --> 00:00:49.560
avoid the double equals.

15
00:00:49.560 --> 00:00:52.920
But there's a whole bunch of
places where you absolutely know

16
00:00:52.920 --> 00:00:55.800
what values are gonna come
into that comparison.

17
00:00:55.800 --> 00:00:58.140
And if you do know,
I think you should critically analyze,

18
00:00:58.140 --> 00:01:01.940
is it more important to use the double
equals or the triple equals?

19
00:01:03.120 --> 00:01:07.015
We'll get to that.
&gt;&gt; : Kyle Simpson: Some examples of

20
00:01:07.015 --> 00:01:11.098
double equals, this is infinitely a long
list but these double equals comparisons

21
00:01:11.098 --> 00:01:20.733
are entirely reasonable.
&gt;&gt; : Kyle Simpson: We already talked

22
00:01:20.733 --> 00:01:25.171
a little bit about this briefly, but there
is an implicit coercion that happens in

23
00:01:25.171 --> 00:01:30.200
either direction between primitives and
natives, we call it boxing and unboxing.

24
00:01:30.200 --> 00:01:33.260
We start with the string 123 and
we call length on it,

25
00:01:33.260 --> 00:01:37.040
there's a boxing that happens to
its string object counterpart.

26
00:01:37.040 --> 00:01:39.070
That's an implicit mechanism.

27
00:01:39.070 --> 00:01:42.490
I think that's a good thing cuz it
makes that code less complicated

28
00:01:42.490 --> 00:01:45.630
because I don't have to explicitly
cast it to a string object so

29
00:01:45.630 --> 00:01:48.180
that I can call the length operator,
or the length property on it.

30
00:01:49.940 --> 00:01:54.551
The opposite direction is true, if for
whatever crazy reason I already have

31
00:01:54.551 --> 00:01:59.233
the string object equivalent like do on
line 6, on line 7 if I use an operator

32
00:01:59.233 --> 00:02:04.276
that needs the primitives, like the plus
operator does It implicitly unboxes it to

33
00:02:04.276 --> 00:02:11.798
its primitive counterpart.
&gt;&gt; : Kyle Simpson: So

34
00:02:11.798 --> 00:02:17.240
in either direction the implicit mechanism
helps make my code be less cluttered.

