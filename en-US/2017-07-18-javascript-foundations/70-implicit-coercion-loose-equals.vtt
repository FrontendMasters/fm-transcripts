WEBVTT

1
00:00:00.000 --> 00:00:02.973
&gt;&gt; Kyle Simpson: I've been promising
that we wanna talk about this == thing,

2
00:00:02.973 --> 00:00:04.666
cuz it's the elephant in the room.

3
00:00:04.666 --> 00:00:07.757
This is the most obvious
place where implicit coercion

4
00:00:07.757 --> 00:00:10.721
not only enters our programs,
but also can bite us.

5
00:00:10.721 --> 00:00:14.651
But it only bites us, not because this is
a confusing topic that can't be learned,

6
00:00:14.651 --> 00:00:16.685
it only bites us because it's unlearned.

7
00:00:16.685 --> 00:00:19.891
We just haven't chosen to
learn what == is about.

8
00:00:19.891 --> 00:00:24.010
Guess where the best place to
learn what == is about is?

9
00:00:24.010 --> 00:00:28.255
Trying it out, reading the spec,
that's all I did, okay,

10
00:00:28.255 --> 00:00:31.360
there's no magical formula here.

11
00:00:31.360 --> 00:00:33.790
What I chose to do was say,
if the double equals is so bad?

12
00:00:33.790 --> 00:00:38.212
Let's test all of the corner cases, and
see which ones of them are really bad,

13
00:00:38.212 --> 00:00:40.500
versus not actually bad.

14
00:00:40.500 --> 00:00:44.113
So I came up, I programmatically
generated this list, but

15
00:00:44.113 --> 00:00:47.307
I came up with 24 corner
case coercions with ==.

16
00:00:47.307 --> 00:00:53.300
Far as I'm aware, these are all
the corner cases that we can express.

17
00:00:53.300 --> 00:00:57.773
&gt;&gt; Kyle Simpson: And I went down the list,
and I said, which ones of these are crazy,

18
00:00:57.773 --> 00:01:00.141
and which ones of these make sense?

19
00:01:00.141 --> 00:01:05.097
And I chose to mark the ones that I
thought were strange, this is subjective.

20
00:01:05.097 --> 00:01:10.532
But I said, string 0 == false,
line 3, that seems strange to me.

21
00:01:10.532 --> 00:01:15.739
Cuz the string 0 and the value false
are most definitely different values.

22
00:01:15.739 --> 00:01:20.110
So that results where they
end up both becoming numbers,

23
00:01:20.110 --> 00:01:22.396
and comparing to each other.

24
00:01:22.396 --> 00:01:27.695
That result is strange,
should not be, okay,?

25
00:01:27.695 --> 00:01:31.288
But by comparison, line 8,
false == null, that fails.

26
00:01:31.288 --> 00:01:35.704
And that makes a lot of sense to fail,
because false and

27
00:01:35.704 --> 00:01:38.972
null are distinctly different values.

28
00:01:38.972 --> 00:01:43.050
And so they aren't equal to each other,
you follow me?

29
00:01:44.050 --> 00:01:49.342
So if we do the math here, there are 7
of these 24 which are kind of outliers,

30
00:01:49.342 --> 00:01:51.122
they are generally WTFs.

31
00:01:51.122 --> 00:01:56.964
And there's another 17 of them that
actually are pretty reasonable.

32
00:01:56.964 --> 00:01:59.840
Your numbers might be slightly different.

33
00:01:59.840 --> 00:02:05.303
But the point that I'm trying to get at
is, supposedly, all of coercion is bad.

34
00:02:05.303 --> 00:02:09.539
And it's okay to just get rid
of all this implicit coercion,

35
00:02:09.539 --> 00:02:14.375
but I kind of think that would be
sort of baby with the bathwater here.

36
00:02:14.375 --> 00:02:17.962
Cuz it actually looks like most
of coercion is pretty good, and

37
00:02:17.962 --> 00:02:21.696
there's only a few corner cases
that we should be worried about.

38
00:02:21.696 --> 00:02:26.306
Because there's an infinite number
of == coercion comparisons that

39
00:02:26.306 --> 00:02:30.619
aren't corner cases, and
they're all completely reasonable.

40
00:02:32.330 --> 00:02:35.742
&gt;&gt; Kyle Simpson: So out of
the infinite space of reasonable ones,

41
00:02:35.742 --> 00:02:41.710
there's only seven which are problematic,
that's the point, okay?

42
00:02:41.710 --> 00:02:43.060
Let's zero in on those seven,
here they are.

43
00:02:46.680 --> 00:02:48.480
&gt;&gt; Kyle Simpson: What do you notice
about the first four in that list?

44
00:02:51.471 --> 00:02:53.260
&gt;&gt; Speaker 2: False.

45
00:02:53.260 --> 00:02:56.790
&gt;&gt; Kyle Simpson: They're all doing
a == comparison with false, right,

46
00:02:56.790 --> 00:02:59.683
and I already told you
to eliminate those four.

47
00:02:59.683 --> 00:03:04.040
So that was pretty easy,
we just went from seven down to three.

48
00:03:04.040 --> 00:03:08.030
Eliminate those four, and
focus on these three in particular, and

49
00:03:08.030 --> 00:03:09.927
now let's look at those three.

50
00:03:09.927 --> 00:03:12.041
When do those kinds of
things happen in code?

51
00:03:12.041 --> 00:03:16.224
Let's look at the line 6 and
line 7, specifically.

52
00:03:16.224 --> 00:03:21.141
When is it that we end up doing a double
equals comparison with a empty string and

53
00:03:21.141 --> 00:03:22.197
an empty array?

54
00:03:22.197 --> 00:03:27.048
When can that happen, or
when can we compare a 0 to an empty array?

55
00:03:27.048 --> 00:03:29.993
I decided to test this against
my own history of my code,

56
00:03:29.993 --> 00:03:32.133
all of the code that I've ever written.

57
00:03:32.133 --> 00:03:36.248
I decided to go and try to do some
analysis of my code and figure out,

58
00:03:36.248 --> 00:03:39.941
are there any places where I do the == and
this can happen?

59
00:03:39.941 --> 00:03:43.581
And I found very few examples where
that's even remotely possible.

60
00:03:43.581 --> 00:03:44.885
Now, your code may be different.

61
00:03:44.885 --> 00:03:47.075
But the point I'm trying to get at is,

62
00:03:47.075 --> 00:03:51.660
it's not terribly common that we end up
with these logic cases where we could end

63
00:03:51.660 --> 00:03:54.500
up comparing an empty
string to an empty array.

64
00:03:54.500 --> 00:03:58.860
And there's a few places, but it's not
every line of code that this happens.

65
00:03:58.860 --> 00:04:01.840
So even line 6 and line 7,
they are corner cases, but

66
00:04:01.840 --> 00:04:05.890
they're not common corner cases,
they're rare corner cases.

67
00:04:05.890 --> 00:04:11.290
So we really just end up back at line 5,
the root of all evil,

68
00:04:11.290 --> 00:04:15.020
that one empty string
double equalling to 0.

69
00:04:15.020 --> 00:04:16.982
They all sort of devolve to it,
as a matter of fact,

70
00:04:16.982 --> 00:04:21.370
line 6 devolves to it,
and line 7 devolves to it.

71
00:04:22.490 --> 00:04:28.040
Line 6 and line 7 happen because of line
5, it really is the root of all evil.

72
00:04:28.040 --> 00:04:30.118
And some of you may have
seen the WAP video before.

73
00:04:30.118 --> 00:04:34.314
It came out several years back, and it was
making fun of, in particular, this case.

74
00:04:34.314 --> 00:04:38.783
Where the empty array is somewhere
coercively equal to the negation of

75
00:04:38.783 --> 00:04:40.985
the empty array, that's crazy.

76
00:04:40.985 --> 00:04:44.596
People that design JavaScript,
I don't know what they're smoking, right?

77
00:04:44.596 --> 00:04:49.030
So it got a lot of traction
from making fun of JavaScript.

78
00:04:49.030 --> 00:04:52.331
There is lots of opportunity to
make fun of JavaScript when you

79
00:04:52.331 --> 00:04:56.250
are ignorant about JavaScript, it's easy.

80
00:04:57.620 --> 00:05:01.565
The hard part is to say, hey, wait
a minute, why is JavaScript doing that,

81
00:05:01.565 --> 00:05:03.920
what part of my
understanding is different?

82
00:05:03.920 --> 00:05:07.350
You know what might be
different between me and you?

83
00:05:07.350 --> 00:05:10.236
And I mean you metaphorically,
the industry as a whole.

84
00:05:10.236 --> 00:05:14.739
What might be different between me and you
is that when I see something that doesn't

85
00:05:14.739 --> 00:05:18.100
make sense, I don't blame
the design of the language first.

86
00:05:19.400 --> 00:05:22.510
There's a lot of developers that when they
see something in JavaScript that doesn't

87
00:05:22.510 --> 00:05:23.942
make sense, you know what they do?

88
00:05:23.942 --> 00:05:26.781
Those idiot designers of
that JavaScript language!

89
00:05:26.781 --> 00:05:31.675
Because we assume, somehow, that we
should be able to look at something and

90
00:05:31.675 --> 00:05:36.652
immediately intuit exactly what it's
doing, without any learning at all.

91
00:05:36.652 --> 00:05:40.241
And if it takes any effort on our part,
or if it's confusing in the slightest?

92
00:05:40.241 --> 00:05:42.372
We immediately jump to the conclusion,

93
00:05:42.372 --> 00:05:46.140
those people don't know what
they're doing, designing languages.

94
00:05:46.140 --> 00:05:49.060
Because my Python, or
my Ruby, or my .NET, or

95
00:05:49.060 --> 00:05:51.560
fill in the blank of my favorite
language doesn't do that.

96
00:05:52.870 --> 00:05:55.390
We immediately assume the designers
of the language were poor.

97
00:05:55.390 --> 00:06:00.102
You know what I assume, there's
something wrong with my understanding.

98
00:06:02.017 --> 00:06:05.723
&gt;&gt; Kyle Simpson: I mean, when you come
down to it, the source of every bug in

99
00:06:05.723 --> 00:06:09.900
every program ever written is
actually a lack of understanding.

100
00:06:09.900 --> 00:06:11.928
This is how I like to say it,

101
00:06:11.928 --> 00:06:17.239
at the point where your brain diverges
from the way the computer works.

102
00:06:18.630 --> 00:06:21.359
It is at that junction point
that bugs enter your code.

103
00:06:21.359 --> 00:06:25.500
Because if you understood it,
you wouldn't write a bug, right?

104
00:06:27.100 --> 00:06:30.050
I mean, if you fully understood a piece
of code, you'd write it correct.

105
00:06:30.050 --> 00:06:32.050
So if there was a bug,
there must be a lack of understanding.

106
00:06:32.050 --> 00:06:36.800
And all I've done is embrace that
as a core philosophy of mine.

107
00:06:36.800 --> 00:06:39.319
If there's something I don't understand,
the problem is on me.

108
00:06:41.070 --> 00:06:44.524
Now, I've made plenty of critiques, even
today, about design decisions of language.

109
00:06:44.524 --> 00:06:47.391
But I'm not doing that
from a place of ignorance.

110
00:06:47.391 --> 00:06:50.103
I'm doing that from a place of,
I've studied it deeply, and

111
00:06:50.103 --> 00:06:52.879
I've worked with people, and
I've become frustrated by it.

112
00:06:52.879 --> 00:06:54.420
And by the way,
those opinions have changed.

113
00:06:54.420 --> 00:06:58.175
There are things that I used to complain
about, that I no longer complain about,

114
00:06:58.175 --> 00:07:00.560
because now, I understand them.

115
00:07:00.560 --> 00:07:04.165
And because that was true for
myself, I thought.

116
00:07:04.165 --> 00:07:08.723
I wonder, if I shared with
other people and they learned,

117
00:07:08.723 --> 00:07:12.642
maybe they'd complain less,
food for thought.

118
00:07:12.642 --> 00:07:14.471
So this double, or I mean,

119
00:07:14.471 --> 00:07:18.378
this empty array equal to
the negation of the empty array.

120
00:07:18.378 --> 00:07:22.212
First off, the problem of how
absurd that looks comes from

121
00:07:22.212 --> 00:07:26.020
a misunderstanding about operators work.

122
00:07:26.020 --> 00:07:30.050
There's a misunderstanding here, that the
operators are gonna happen all at once.

123
00:07:30.050 --> 00:07:33.320
Which isn't the case,
there is an operator precedence.

124
00:07:33.320 --> 00:07:35.762
The negate's gonna happen
before the comparison, okay?

125
00:07:35.762 --> 00:07:39.680
It's not as obvious, but it's a fact.

126
00:07:39.680 --> 00:07:42.338
So what's gonna happen when
we negate an empty array?

127
00:07:42.338 --> 00:07:47.216
That's a non-primitive, so first we're
gonna call the two-primitive on it.

128
00:07:47.216 --> 00:07:49.300
What's the two-primitive
of an empty array?

129
00:07:49.300 --> 00:07:50.231
&gt;&gt; Speaker 2: String.

130
00:07:50.231 --> 00:07:53.647
&gt;&gt; Kyle Simpson: Unfortunately, it's the
empty string, it ought to be the string

131
00:07:53.647 --> 00:07:57.126
with brackets in it, but
unfortunately, it's the empty string.

132
00:07:57.126 --> 00:08:01.916
So we have turned it into the empty
string, as its primitive.

133
00:08:01.916 --> 00:08:06.539
And now, the negate operator says,
well, wait, I don't have a boolean yet.

134
00:08:06.539 --> 00:08:12.580
So I need to take that empty string and
turn it into a boolean, everybody with me?

135
00:08:14.650 --> 00:08:18.480
So what is the empty
string's boolean equivalent?

136
00:08:18.480 --> 00:08:19.260
&gt;&gt; Speaker 2: False.

137
00:08:20.370 --> 00:08:23.401
&gt;&gt; Kyle Simpson: It's false, right,
but now, we're in the negate operator,

138
00:08:23.401 --> 00:08:25.264
so we're gonna flip it around to true.

139
00:08:25.264 --> 00:08:29.219
So now, what we're actually saying is,
the empty array == true.

140
00:08:29.219 --> 00:08:33.177
That's the real comparison that's
happening here, everybody with me on that?

141
00:08:33.177 --> 00:08:36.285
So the empty array is gonna
become the string, and

142
00:08:36.285 --> 00:08:38.580
that's gonna become the number 0.

143
00:08:38.580 --> 00:08:42.300
And then when we have the array on the
other side, which becomes a string, and

144
00:08:42.300 --> 00:08:44.010
it becomes a number 0.

145
00:08:44.010 --> 00:08:46.150
So now, we compare 0 to 0,

146
00:08:46.150 --> 00:08:51.970
we have two occurrences of the root of
all evil here, where string became 0.

147
00:08:51.970 --> 00:08:56.727
If empty string had just became NaN,
that wouldn't have happened, okay?

148
00:08:56.727 --> 00:09:02.323
So all it takes is to actually dig into
understanding operations that occur.

149
00:09:02.323 --> 00:09:05.463
&gt;&gt; Kyle Simpson: Yes?

150
00:09:05.463 --> 00:09:09.013
&gt;&gt; Speaker 2: There was a question on, can
you explain why false == null is false?

151
00:09:09.013 --> 00:09:13.792
You're saying, if == does a number
coercion and both null and

152
00:09:13.792 --> 00:09:17.612
false coerce to 0,
should the result not be true?

153
00:09:17.612 --> 00:09:21.137
&gt;&gt; Kyle Simpson: Yes, except for
the fact that there is a special class,

154
00:09:21.137 --> 00:09:25.717
there is a special case which,
we're gonna look at the spec in a minute.

155
00:09:25.717 --> 00:09:29.881
There is a special case in the spec which
deals with none, null and undefined,

156
00:09:29.881 --> 00:09:31.471
they are treated specially.

157
00:09:31.471 --> 00:09:36.537
And importantly, null and
undefined are treated as coercively

158
00:09:36.537 --> 00:09:41.338
equal to each other, and
to no other values in the language.

159
00:09:41.338 --> 00:09:45.064
So if it was only a numeric coercion
that assertion would be true,

160
00:09:45.064 --> 00:09:48.740
that would be correct, but
there's more to the spec than that.

