WEBVTT

1
00:00:00.760 --> 00:00:05.080
&gt;&gt; Kyle Simpson: So in our discussion of
Lexical Scope, we described this process

2
00:00:05.080 --> 00:00:09.163
of looking up a variable as kind
of metaphorically looking for

3
00:00:09.163 --> 00:00:14.047
an office in this office building where
you start with the current scope.

4
00:00:14.047 --> 00:00:17.026
But you are looking at for an identifier
to figure out which bucket or

5
00:00:17.026 --> 00:00:20.640
in this case in the metaphor which
floor of the building it exists on.

6
00:00:20.640 --> 00:00:22.780
And say, you start with the current scope,
if it's not there,

7
00:00:22.780 --> 00:00:27.570
you go to the next outer scope or in this
case to the next floor up in the building.

8
00:00:27.570 --> 00:00:31.930
You work your way up the building
looking for it and if you find it great,

9
00:00:31.930 --> 00:00:37.250
kinda first come first serve but
if you don't find it, then you reach

10
00:00:37.250 --> 00:00:40.400
the top of the building of the global
scope and there's no where else to go.

11
00:00:40.400 --> 00:00:43.480
Now the metaphor describes
this as a look up process.

12
00:00:43.480 --> 00:00:46.380
And it describes this as
something happening at run time.

13
00:00:47.850 --> 00:00:52.510
Looking for the marbles, the conversation,
the building its all describing it

14
00:00:52.510 --> 00:00:57.070
as if it was something that
actually has to happen at run time.

15
00:00:57.070 --> 00:01:01.670
Technically speaking
Lexical Scope does not actually

16
00:01:01.670 --> 00:01:05.390
need to resolve it at run time,
at least for most of the variables.

17
00:01:05.390 --> 00:01:09.710
And that's one of the emphasis that we
have around Lexical Scope is that it is

18
00:01:09.710 --> 00:01:15.600
a compiled time, even that word
lex is part of the compiler phase,

19
00:01:15.600 --> 00:01:21.120
it should bring to your mind the idea
of a compiler type operation.

20
00:01:21.120 --> 00:01:24.230
And when the compiler is going through and
it finds a variable.

21
00:01:24.230 --> 00:01:26.550
And it's declared for some scope,

22
00:01:26.550 --> 00:01:31.480
it can register with that variable
exactly what scope it belongs to.

23
00:01:31.480 --> 00:01:33.690
It doesn't need to then
go figure out that later.

24
00:01:33.690 --> 00:01:36.760
It registers with that variable
what scope it belongs to.

25
00:01:36.760 --> 00:01:41.110
So in many cases, the lookup process
that we described is only metaphorical.

26
00:01:41.110 --> 00:01:43.990
It doesn't actually need to know that
because it already figured out at

27
00:01:43.990 --> 00:01:47.800
compile time exactly where
that variable was found.

28
00:01:47.800 --> 00:01:49.820
And even if it does need to do the lookup,

29
00:01:49.820 --> 00:01:52.170
it doesn't need to do
the lookup every time.

30
00:01:52.170 --> 00:01:55.370
Because once it finds the answer
to that question the first time,

31
00:01:55.370 --> 00:01:57.030
it's never gonna change.

32
00:01:57.030 --> 00:01:59.590
Lexical Scope is fixed, it's static.

33
00:01:59.590 --> 00:02:04.080
It is a compile time or I like to say,
an author time sort of event.

34
00:02:04.080 --> 00:02:07.938
When you write code and you put a variable
here and then a function inside of it and

35
00:02:07.938 --> 00:02:10.313
another scope and
you reference that variable.

36
00:02:10.313 --> 00:02:14.862
You permanently and eravicably mean
that this variable is gonna always

37
00:02:14.862 --> 00:02:19.273
reference that particular location
that's Lexical Scope, okay?

38
00:02:19.273 --> 00:02:24.246
And we'll compare that later on in this
workshop to the idea of a dynamic scope

39
00:02:24.246 --> 00:02:27.382
system which by its virtue
of its name would say,

40
00:02:27.382 --> 00:02:31.530
it is actually going to dispatch and
make decisions at run time.

41
00:02:31.530 --> 00:02:35.350
So we'll compare those two but
just have it in your heads this idea that

42
00:02:35.350 --> 00:02:39.300
Lexical Scope,
is this fixed sort of a thing.

43
00:02:39.300 --> 00:02:42.810
Now I wanted to point out
a couple of examples where

44
00:02:42.810 --> 00:02:45.410
we wanna make sure that we
fully understand scope.

45
00:02:46.790 --> 00:02:49.400
Here, you'll notice that
I have a variable foo

46
00:02:49.400 --> 00:02:51.880
declared in the outer
scope there on line one.

47
00:02:51.880 --> 00:02:54.930
And that's referencing a function but

48
00:02:54.930 --> 00:03:00.080
that's not a function declaration because
it shows up in an expression position.

49
00:03:00.080 --> 00:03:03.070
The word function is not
the first thing in the statement.

50
00:03:03.070 --> 00:03:05.800
So what happens to that bar identifier.

51
00:03:07.020 --> 00:03:09.450
The way we talked about it
before earlier in our course.

52
00:03:09.450 --> 00:03:13.797
We talked about the idea that when
we encounter a function declaration,

53
00:03:13.797 --> 00:03:17.990
we would then add that identifier
to our enclosing scope.

54
00:03:17.990 --> 00:03:20.690
But it is not the same for
function expressions.

55
00:03:20.690 --> 00:03:24.410
Here, that bar identifier will not be
added to the enclosing scope which is why

56
00:03:24.410 --> 00:03:27.140
down on line 12,
we would get a reference there

57
00:03:27.140 --> 00:03:30.610
because there is no such bar
identifier in the global scope.

58
00:03:30.610 --> 00:03:34.350
It does exist, it's just not
added to its enclosing scope for

59
00:03:34.350 --> 00:03:39.260
function expression their name identifier,
the processing are slightly reversed.

60
00:03:39.260 --> 00:03:40.740
And the name identifier for

61
00:03:40.740 --> 00:03:44.990
a name function expression will
show up within its own scope.

62
00:03:44.990 --> 00:03:48.530
So there is a bar inside of this scope for
lines two through eight.

63
00:03:48.530 --> 00:03:52.250
That is accessible which is why we can
reference it for example on line five.

64
00:03:52.250 --> 00:03:55.740
There is bar internal to that function.

65
00:03:55.740 --> 00:03:58.970
And that identifier is a self
reference to the function.

66
00:03:58.970 --> 00:04:01.880
So, we have access to that
function from inside of itself

67
00:04:01.880 --> 00:04:05.020
which we'll talk about in a little
bit why that can be important.

68
00:04:05.020 --> 00:04:08.920
But you need to keep in mind that
a function declaration versus a function

69
00:04:08.920 --> 00:04:13.380
expression, one key difference there
is what happens to the name identifier.

70
00:04:13.380 --> 00:04:17.814
Here are the name identifiers enclosed
within itself, in our previous example,

71
00:04:17.814 --> 00:04:21.744
we saw that that bar identifier was
added to the enclosing scope, okay?

72
00:04:21.744 --> 00:04:23.010
So there's a key difference.

73
00:04:24.040 --> 00:04:25.710
Another difference just to point out.

74
00:04:25.710 --> 00:04:29.946
This is kind of a smaller new ones one
it's not gonna be a particularly huge deal

75
00:04:29.946 --> 00:04:31.175
from us to reprogram.

76
00:04:31.175 --> 00:04:35.815
But another example where the variable
scoping may be different than

77
00:04:35.815 --> 00:04:39.826
what we expect is the catch
clause of a tri catch condition.

78
00:04:39.826 --> 00:04:44.056
The catch clause declares a variable,
there's not a var key there but

79
00:04:44.056 --> 00:04:45.633
it declares a variable and

80
00:04:45.633 --> 00:04:51.340
it's actually true that that variable is
block scope to the catch clause itself.

81
00:04:51.340 --> 00:04:55.220
That's our first example actually in
JavaScript, of a notion of block scoping.

82
00:04:55.220 --> 00:04:58.610
That err variable is available only
inside of the catch clause and

83
00:04:58.610 --> 00:05:01.030
if you try to access it outside,
you'll get an error.

84
00:05:02.620 --> 00:05:05.290
Now what's notable about this,
is that for many, many years,

85
00:05:05.290 --> 00:05:08.190
linters did not seem to
understand this rule and

86
00:05:08.190 --> 00:05:11.320
they would complain if you
had multiple catch clauses.

87
00:05:11.320 --> 00:05:14.996
That all use the same variable err,
they would complain that you had

88
00:05:14.996 --> 00:05:18.624
duplicate variable declarations
which of course was never true.

89
00:05:18.624 --> 00:05:21.470
Since 1999, these have been block scopes.

90
00:05:21.470 --> 00:05:23.280
Since the very beginning they've
always been block scoped.

91
00:05:24.300 --> 00:05:29.228
But the linters would complain about it,
so I found myself doing silly

92
00:05:29.228 --> 00:05:34.031
stuff like err1, err2, err27 and
so forth which is nonsense.

93
00:05:34.031 --> 00:05:37.550
[COUGH] Little side meta point there is

94
00:05:37.550 --> 00:05:40.140
you always need to be
smarter than your own tools.

95
00:05:40.140 --> 00:05:43.680
If your tools don't know what they're
doing, either find a better tool or

96
00:05:43.680 --> 00:05:44.490
just turn stuff off.

97
00:05:44.490 --> 00:05:47.601
I had to turn off that whole rule
in the linter for five years or

98
00:05:47.601 --> 00:05:50.851
more because I didn't wanna
complain about my catch clauses.

99
00:05:50.851 --> 00:05:54.753
So I didn't get the benefit of complaining
about any other accidental duplicate

100
00:05:54.753 --> 00:05:57.300
declarations cuz they
just weren't capable.

101
00:05:57.300 --> 00:06:00.390
I believe some of the newest
revisions have fixed this but

102
00:06:00.390 --> 00:06:02.110
it may still be an issue
with some linters.

