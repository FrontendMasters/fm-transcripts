WEBVTT

1
00:00:00.000 --> 00:00:00.979
&gt;&gt; Kyle Simpson: So
let's jump into primitive types.

2
00:00:00.979 --> 00:00:05.325
The JavaScript spec lists out
the following primitive types,

3
00:00:05.325 --> 00:00:08.936
undefined, string,
number, boolean, object.

4
00:00:08.936 --> 00:00:09.822
Now these five are there.

5
00:00:09.822 --> 00:00:14.561
And to be honest with you there's
a sixth one that's listed that

6
00:00:14.561 --> 00:00:19.316
I'm not putting here on the list
because it's ES6 and beyond.

7
00:00:19.316 --> 00:00:22.510
And also because it's a primitive type
that nobody even really cares about.

8
00:00:22.510 --> 00:00:26.360
At least, I don't have much use for
the symbol primitive type.

9
00:00:26.360 --> 00:00:28.100
It was added as an actual primitive and

10
00:00:28.100 --> 00:00:30.210
we're not gonna really
cover that in this course.

11
00:00:30.210 --> 00:00:31.170
But there is a symbol there.

12
00:00:31.170 --> 00:00:35.220
But there's a couple of others that
I'll put on the list, function and null.

13
00:00:35.220 --> 00:00:39.190
It is definitely true that
null is a real primitive type.

14
00:00:39.190 --> 00:00:43.020
But what's interesting about function is
that function, though we may think of it

15
00:00:43.020 --> 00:00:47.980
as a type, as a value type, it certainly
has a set of expected behaviors.

16
00:00:47.980 --> 00:00:51.510
By that pragmatic definition,
it is a type, right?

17
00:00:51.510 --> 00:00:55.060
Because the aesthetics of us working with
a code, we can do something different with

18
00:00:55.060 --> 00:00:57.110
a function than we can
with any other value type.

19
00:00:58.150 --> 00:00:59.640
We can call it.

20
00:00:59.640 --> 00:01:03.050
But actually, function is not a real
first class primitive type, actually,

21
00:01:03.050 --> 00:01:05.240
it's a subtype of the object type.

22
00:01:05.240 --> 00:01:08.714
Matter of fact, it's referred to as
a callable object, that's interesting.

23
00:01:10.771 --> 00:01:12.833
&gt;&gt; Kyle Simpson: So
you could say this is seven or six types,

24
00:01:12.833 --> 00:01:16.850
it's really officially these six types
plus the symbol type that I've left off.

25
00:01:16.850 --> 00:01:20.790
[COUGH] That's what we wanna focus
on with these primitive types.

26
00:01:20.790 --> 00:01:23.390
I've highlighted null specifically because

27
00:01:23.390 --> 00:01:25.760
there's a bug with that type that
we'll look at in just a moment.

28
00:01:25.760 --> 00:01:29.608
But as I was saying earlier,
it is the values that have types,

29
00:01:29.608 --> 00:01:33.239
the values that are in these
different classifications.

30
00:01:33.239 --> 00:01:38.150
They're the things that they adopt or
inherit these expected behaviors.

31
00:01:38.150 --> 00:01:41.251
Something we can do with a number
that we can't do with a Boolean, for

32
00:01:41.251 --> 00:01:42.060
example, okay?

33
00:01:43.070 --> 00:01:45.660
So when I use the typeof operator,
for example, and

34
00:01:45.660 --> 00:01:50.230
I do typeof foo, that looks like I'm
asking, what is the type of the variable?

35
00:01:50.230 --> 00:01:51.940
But actually what I'm asking is,

36
00:01:51.940 --> 00:01:54.760
what is the type of the value that
is currently in that variable?

37
00:01:55.760 --> 00:01:57.100
That's what the typeof operator's doing.

38
00:01:58.250 --> 00:02:02.530
Because a variable can hold any type
at any time, we have that freedom.

39
00:02:02.530 --> 00:02:04.540
You may like that freedom,
you may not like that freedom.

40
00:02:04.540 --> 00:02:07.290
If you don't, choose Typescript.

41
00:02:07.290 --> 00:02:10.400
But JavaScript itself
offers us that freedom.

42
00:02:10.400 --> 00:02:14.990
And some of us don't just do that because
we like to write poorly constructed code.

43
00:02:14.990 --> 00:02:16.970
Some of us prefer that freedom.

44
00:02:16.970 --> 00:02:22.849
I prefer to have the freedom to choose
what type I put into a variable.

45
00:02:22.849 --> 00:02:24.855
I don't prefer to do silly things like,

46
00:02:24.855 --> 00:02:28.454
if I have a value that's gonna go
through three different conversions.

47
00:02:28.454 --> 00:02:30.376
I have to come up with three
different variables, and

48
00:02:30.376 --> 00:02:32.179
then come up with some
kind of naming convention.

49
00:02:32.179 --> 00:02:36.062
Like, lowercase b is the first character
to say that it's a boolean, and

50
00:02:36.062 --> 00:02:38.770
lowercase i to say it's an integer,
or whatever.

51
00:02:38.770 --> 00:02:40.670
Those kinds of things, to me, are silly.

52
00:02:40.670 --> 00:02:42.660
I don't like those kinds of conventions,
so

53
00:02:42.660 --> 00:02:45.790
I prefer if it's going to go through
multiple steps, use the same variable.

54
00:02:45.790 --> 00:02:48.470
Cuz I am describing the same thing,
just different representations, so

55
00:02:48.470 --> 00:02:50.490
that's my way of thinking about stuff.

56
00:02:50.490 --> 00:02:53.250
Typescript's great if you like that,
go to the Typescript world.

57
00:02:54.250 --> 00:02:57.150
They're going to enforce that
a variable needs to hold the same

58
00:02:57.150 --> 00:02:58.160
value type at all times.

59
00:02:59.210 --> 00:03:03.570
But you notice something interesting
about this typeof foo here,

60
00:03:03.570 --> 00:03:06.020
there is no foo variable.

61
00:03:06.020 --> 00:03:07.280
I didn't declare a foo there.

62
00:03:08.714 --> 00:03:13.360
The typeof operator is special
privileged and to my knowledge the only

63
00:03:13.360 --> 00:03:17.460
specially privileged mechanism in
the entire language which is able to

64
00:03:17.460 --> 00:03:20.459
deal with a variable that is
non-existent and not throw an error.

65
00:03:21.630 --> 00:03:23.990
Every other mechanism,
if you refer to a variable and

66
00:03:23.990 --> 00:03:27.640
it doesn't exist,
you are gonna get some kind of an error.

67
00:03:27.640 --> 00:03:30.550
But here are the typeof operator
we're referring to a variable that

68
00:03:30.550 --> 00:03:34.140
has not been declared and
yet we get undefined.

69
00:03:34.140 --> 00:03:38.600
Which is interesting because this is
definitely not an undefined variable.

70
00:03:38.600 --> 00:03:40.193
This is an undeclared variable.

71
00:03:40.193 --> 00:03:44.343
But there's a big difference
between defined and declared.

72
00:03:44.343 --> 00:03:47.680
Declared means physically
exists in some scope.

73
00:03:47.680 --> 00:03:53.677
Defined means has some value, has some
useful non-empty value in it, okay?

74
00:03:53.677 --> 00:03:57.470
And JavaScript is not doing us any
favors by conflating these two,

75
00:03:57.470 --> 00:04:00.260
because that just makes
things more confusing.

76
00:04:00.260 --> 00:04:04.040
So I wish the typeof foo here
would give us undeclared,

77
00:04:04.040 --> 00:04:08.560
but unfortunately gives us undefined
exactly the same as if we had

78
00:04:08.560 --> 00:04:12.278
an existent variable with no
value in it at that time.

79
00:04:12.278 --> 00:04:16.104
We get the same value
that's called undefined.

80
00:04:16.104 --> 00:04:20.568
This was designed to be more forgiving of
us accessing variables, like for example,

81
00:04:20.568 --> 00:04:21.629
global variables.

82
00:04:21.629 --> 00:04:25.364
We're doing feature checks through things
and the variable has not been defined,

83
00:04:25.364 --> 00:04:26.763
we don't wanna throw errors.

84
00:04:26.763 --> 00:04:29.016
We don't have to wrap that stuff and
try catch, so

85
00:04:29.016 --> 00:04:31.172
they're trying to be
more forgiving about it.

86
00:04:31.172 --> 00:04:34.455
But what they fail to do is give
it a different return value so

87
00:04:34.455 --> 00:04:38.935
that we can distinguish those two cases,
because they very much are different.

88
00:04:38.935 --> 00:04:42.339
Matter of fact, there will be error
messages that we talk about later when we

89
00:04:42.339 --> 00:04:43.628
get into scope and closure.

90
00:04:43.628 --> 00:04:47.735
There's error messages that will say
things like, foo is not defined.

91
00:04:47.735 --> 00:04:49.876
And you think, well, okay,
then foo is undefined.

92
00:04:49.876 --> 00:04:50.909
Cuz is not defined and

93
00:04:50.909 --> 00:04:54.790
undefined sure sound like they're
saying the same thing, right?

94
00:04:54.790 --> 00:04:59.690
No, foo is not defined is the JavaScript
speak for foo is not declared.

95
00:05:01.030 --> 00:05:06.873
So you see why there's a problem if we use
undefined as a conflation of undeclared.

96
00:05:06.873 --> 00:05:09.745
All right well typeof "foo"
is pretty straightforward.

97
00:05:09.745 --> 00:05:11.675
We get "string", "number",
"boolean", "object".

98
00:05:11.675 --> 00:05:16.520
You notice that the type of operator
always returns one of these six values.

99
00:05:16.520 --> 00:05:19.560
The seventh value being the symbol
type that we are not covering here.

100
00:05:19.560 --> 00:05:22.110
So "undefined", string,
number, boolean object and

101
00:05:22.110 --> 00:05:25.850
function, there are always string values
that come back from the typeof operator.

102
00:05:25.850 --> 00:05:27.630
This is an invariant of this operator.

103
00:05:27.630 --> 00:05:33.332
It can never actually return undefined,
it always would return "undefined".

104
00:05:33.332 --> 00:05:36.575
I've seen many many blog posts and
books somehow made it

105
00:05:36.575 --> 00:05:41.276
through editing where somebody will
something like typeof x === undefined.

106
00:05:41.276 --> 00:05:44.721
And that's nonsense because the type
of operator will never actually return

107
00:05:44.721 --> 00:05:45.304
that value.

108
00:05:45.304 --> 00:05:47.174
It will always return a string, okay?

109
00:05:49.394 --> 00:05:51.999
&gt;&gt; Kyle Simpson: But there's a notable
omission from this list, and

110
00:05:51.999 --> 00:05:53.800
it's the null, why?

111
00:05:53.800 --> 00:05:57.590
Well if we say typeof null,
we get back "object", instead of,

112
00:05:57.590 --> 00:05:59.700
as we may had expect, "null".

113
00:06:01.270 --> 00:06:06.390
Now I had this grand unified theory at
one time of why this was, that nulls,

114
00:06:06.390 --> 00:06:10.250
the history of null was that it was really
designed to zero out object pointer.

115
00:06:10.250 --> 00:06:15.630
So it's kind of like null is this special
global constant object thing or whatever.

116
00:06:15.630 --> 00:06:18.620
That's the theory that I use to espouse.

117
00:06:18.620 --> 00:06:21.727
And one day I was tweeting about that,
this is years back.

118
00:06:21.727 --> 00:06:25.571
But I was tweeting about that and it's
kinda funny because it's almost like if

119
00:06:25.571 --> 00:06:29.369
you tweet about JavaScript it's kind
of like the bat signal for Brandon Ike.

120
00:06:29.369 --> 00:06:32.894
Because to my knowledge he didn't
follow me on Twitter at the time, but

121
00:06:32.894 --> 00:06:34.964
he just showed up in my Twitter mentions.

122
00:06:34.964 --> 00:06:38.212
Here's me just off in random land,
tweeting about JavaScript, and

123
00:06:38.212 --> 00:06:42.248
he shows up and he's like, no, no, no,
no, no, that's crazy, it's just a bug.

124
00:06:42.248 --> 00:06:45.259
So it turns out typeof null
returning "object" is a bug.

125
00:06:46.410 --> 00:06:47.780
There's a question online?

126
00:06:47.780 --> 00:06:50.010
&gt;&gt; Off screen: Yeah, they were just
asking if you could clear up, again,

127
00:06:50.010 --> 00:06:52.280
the difference between undefined and
undeclared.

128
00:06:52.280 --> 00:06:54.300
&gt;&gt; Kyle Simpson: Yeah,
we will go over this again, so

129
00:06:54.300 --> 00:06:55.490
if you've missed that, don't worry.

130
00:06:55.490 --> 00:07:00.960
But undefined and undeclared,
undefined means the variable exists,

131
00:07:00.960 --> 00:07:05.060
but right now it doesn't have any value,
so it has the undefined value in is place.

132
00:07:05.060 --> 00:07:07.169
Kinda like the vacuum of space,
if you will.

133
00:07:07.169 --> 00:07:10.060
If you take everything else out,
it's undefined, okay?

134
00:07:10.060 --> 00:07:13.563
That is an actual value, and
that's when a variable exists but

135
00:07:13.563 --> 00:07:15.093
at the moment has no value.

136
00:07:15.093 --> 00:07:19.173
Undeclared means you literally never
declared it in any scope that that

137
00:07:19.173 --> 00:07:20.805
piece of code has access to.

138
00:07:20.805 --> 00:07:23.817
So in that previous slide
when I said typeof foo and

139
00:07:23.817 --> 00:07:28.350
there was no var foo in scope, foo in
that case was an undeclared variable.

140
00:07:28.350 --> 00:07:32.364
As opposed to a declared variable
that at the moment has no value.

141
00:07:32.364 --> 00:07:36.347
So that's the difference between
undefined and undeclared.

142
00:07:36.347 --> 00:07:39.789
So here we have a var foo that has
been declared, and I say typeof foo.

143
00:07:39.789 --> 00:07:40.489
What am I gonna get back?

144
00:07:40.489 --> 00:07:43.248
&gt;&gt; Off screen: Undefined.

145
00:07:43.248 --> 00:07:46.750
&gt;&gt; Kyle Simpson: "Undefined",
I'm gonna be super picky here, okay?

146
00:07:46.750 --> 00:07:50.720
The string value undefined, "undefined",
that's what I'm gonna get back.

147
00:07:50.720 --> 00:07:51.941
Now what about line 4?

148
00:07:51.941 --> 00:07:56.260
Don't get tricked by line 4,
var bar = typeof bar.

149
00:07:56.260 --> 00:08:01.190
At the moment that we run typeof bar,
does bar exist?

150
00:08:03.986 --> 00:08:06.865
&gt;&gt; Kyle Simpson: We'll get into that when
we talk about scope and the compiler and

151
00:08:06.865 --> 00:08:08.030
all that stuff.

152
00:08:08.030 --> 00:08:09.893
Yes, it absolutely exists.

153
00:08:09.893 --> 00:08:11.380
What is its current value?

154
00:08:11.380 --> 00:08:14.522
At that moment, it's still undefined.

155
00:08:14.522 --> 00:08:15.952
So when I say typeof bar,

156
00:08:15.952 --> 00:08:19.438
what's gonna go into the bar
variable that we see in line 5?

157
00:08:19.438 --> 00:08:22.194
What is the value in bar
gonna be at that point?

158
00:08:22.194 --> 00:08:22.874
It's gonna be "undefined".

159
00:08:22.874 --> 00:08:27.864
And so then on line 6 when I say
typeof bar, what am I gonna get?

160
00:08:27.864 --> 00:08:30.410
"String", same thing with line 8.

161
00:08:30.410 --> 00:08:31.918
What's line 8 gonna return?

162
00:08:31.918 --> 00:08:33.026
&gt;&gt; Off screen: String.

163
00:08:33.026 --> 00:08:36.873
&gt;&gt; Kyle Simpson: "String",
because the typeof 2 is "number" and

164
00:08:36.873 --> 00:08:40.220
the typeof "number" is "string", okay?

