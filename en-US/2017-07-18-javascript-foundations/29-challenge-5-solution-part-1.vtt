WEBVTT

1
00:00:00.200 --> 00:00:03.470
&gt;&gt; Kyle Simpson: Let's talk
about exercise five, part one.

2
00:00:03.470 --> 00:00:08.010
As you saw in the read me,
the goal was to create a simple API

3
00:00:08.010 --> 00:00:12.680
around a simple module API, around
the contents of our code, named app.

4
00:00:13.770 --> 00:00:18.790
And it should expose on that API these
three methods, init, which is just

5
00:00:18.790 --> 00:00:24.420
basically the init UI function, should
expose addProject and addWorkToProject.

6
00:00:24.420 --> 00:00:25.730
That third one is only there so

7
00:00:25.730 --> 00:00:30.080
that it's easier for us to test by calling
the addWorkToProject from the outside.

8
00:00:31.840 --> 00:00:36.538
Also it makes mention here on line 20,
that we wanna make sure not to call

9
00:00:36.538 --> 00:00:40.970
App.init or
the data creation of App.addProject.

10
00:00:40.970 --> 00:00:43.065
We don't wanna make those
calls inside the module.

11
00:00:43.065 --> 00:00:44.790
They need to be on the outside.

12
00:00:44.790 --> 00:00:47.630
So our code starts out with
a bunch of variables hanging all

13
00:00:47.630 --> 00:00:50.749
out in the global space and
functions hanging out in the global space.

14
00:00:51.980 --> 00:00:55.391
And naturally what we'd wanna
do is basically wrap a module or

15
00:00:55.391 --> 00:00:57.424
definition on the entire content.

16
00:00:57.424 --> 00:01:03.370
So I could, for example,
start by saying App =, and then just have

17
00:01:03.370 --> 00:01:10.220
a FE, maybe call it factory,
that creates my module instance.

18
00:01:10.220 --> 00:01:13.830
Put all of this stuff indented one level,
and

19
00:01:13.830 --> 00:01:18.775
finish my FE down at the bottom.
&gt;&gt; Kyle Simpson: So

20
00:01:18.775 --> 00:01:22.591
that's all I had to do to actually
wrap this stuff up into a module

21
00:01:22.591 --> 00:01:25.510
definition except for a couple of details.

22
00:01:25.510 --> 00:01:30.010
For example,
this stuff needs to be on the outside.

23
00:01:30.010 --> 00:01:33.720
So I'll grab it and
move that down to the bottom.

24
00:01:33.720 --> 00:01:36.394
So it's on,
it's after the module's already been

25
00:01:36.394 --> 00:01:40.784
created.
&gt;&gt; Kyle Simpson: This init

26
00:01:40.784 --> 00:01:45.316
function is gonna be now App.init,
&gt;&gt; Kyle Simpson: And

27
00:01:45.316 --> 00:01:48.591
these calls are gonna be App.addProject.

28
00:01:59.545 --> 00:02:04.255
&gt;&gt; Kyle Simpson: And then the last step
is to make an API for this module.

29
00:02:04.255 --> 00:02:10.473
So at the top here, I will declare an API,

30
00:02:10.473 --> 00:02:18.203
object called publicAPI,
&gt;&gt; Kyle Simpson: And

31
00:02:18.203 --> 00:02:23.672
return it.
&gt;&gt; Kyle Simpson: And then, on that API,

32
00:02:23.672 --> 00:02:27.700
we need to go back to the read me and
so we need to expose three functions.

33
00:02:27.700 --> 00:02:33.010
We need an init function,
that is the initUI,

34
00:02:33.010 --> 00:02:37.231
we need the addProject function to be

35
00:02:37.231 --> 00:02:40.985
exposed,
&gt;&gt; Kyle Simpson: And

36
00:02:40.985 --> 00:02:44.868
we need addWorkToProject to be exposed.

37
00:02:54.856 --> 00:02:57.877
&gt;&gt; Kyle Simpson: And that's it.
&gt;&gt; Kyle Simpson: So

38
00:02:57.877 --> 00:03:01.495
that was some pretty low-hanging fruit,
comparatively speaking.

39
00:03:01.495 --> 00:03:06.503
Cuz what we just did with that few six,
seven, eight lines of code, what we

40
00:03:06.503 --> 00:03:11.848
just did, was take a code base which has
a bunch of global stuff all hanging out.

41
00:03:11.848 --> 00:03:15.016
Very susceptible to collision and
not very well organized,

42
00:03:15.016 --> 00:03:19.750
we just wrapped a simple definition
around it and that improved the code.

43
00:03:19.750 --> 00:03:24.464
We now have an app module instance
instead of a bunch of uncollected

44
00:03:24.464 --> 00:03:28.785
functions.
&gt;&gt; Kyle Simpson: Questions about part one

45
00:03:28.785 --> 00:03:34.304
of the exercise?
&gt;&gt; Kyle Simpson: Yes.

46
00:03:34.304 --> 00:03:36.750
&gt;&gt; Speaker 2: Is it okay to shorthand

47
00:03:36.750 --> 00:03:40.954
notation there if the function-
&gt;&gt; Kyle Simpson: Yeah,

48
00:03:40.954 --> 00:03:44.890
the ES6 concise properties if you want to.

49
00:03:44.890 --> 00:03:47.302
That's an ES6 feature which
we didn't really cover.

50
00:03:47.302 --> 00:03:51.394
But concise properties in ES6 means if
they're the same name in both places,

51
00:03:51.394 --> 00:03:53.260
you don't need to list them twice.

