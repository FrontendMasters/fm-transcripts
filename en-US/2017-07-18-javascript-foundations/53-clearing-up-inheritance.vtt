WEBVTT

1
00:00:00.410 --> 00:00:03.988
&gt;&gt; Kyle Simpson: I've talked badly enough
I think at this point about inheritance,

2
00:00:03.988 --> 00:00:07.329
and class-oriented design and
why I don't think it's good.

3
00:00:07.329 --> 00:00:10.905
I wanna to move towards
something that's better,

4
00:00:10.905 --> 00:00:14.240
I wanna clear up some
misconceptions about it.

5
00:00:15.250 --> 00:00:19.659
So, in a traditional classical inheritance
system, we have apparent class.

6
00:00:20.900 --> 00:00:27.270
And we copy down to the instances and we
copy to the child and copy to instances.

7
00:00:27.270 --> 00:00:33.340
So the arrows go from left to right and
top to bottom, these are copy operations.

8
00:00:33.340 --> 00:00:37.910
In JavaScript,
regardless of what syntax you use,

9
00:00:37.910 --> 00:00:42.360
what we actually have is that an object,
and then another object, and another one,

10
00:00:42.360 --> 00:00:46.330
and another one, and another one,
and another one, and all of those.

11
00:00:46.330 --> 00:00:48.850
The linkage goes from right to left and
bottom to top.

12
00:00:49.990 --> 00:00:54.870
This is not a slight nuanced difference,
this is a completely, my God,

13
00:00:54.870 --> 00:00:56.540
entirely different system.

14
00:00:58.870 --> 00:01:03.457
And its a really powerful system that
we are not fully taking advantage of.

15
00:01:03.457 --> 00:01:06.540
There's a different designed pattern here

16
00:01:06.540 --> 00:01:11.180
that we have been completely missing
out on, there's another design pattern.

17
00:01:11.180 --> 00:01:14.982
So what I really wanna do is were gonna
finish out by talking to you about

18
00:01:14.982 --> 00:01:18.463
the different designed pattern
that simplifies what we do, and

19
00:01:18.463 --> 00:01:19.635
gives us more power.

20
00:01:19.635 --> 00:01:24.270
And that design pattern is
called Behavior Delegation.

21
00:01:24.270 --> 00:01:27.630
So, that will be our last topic of
discussion, Behavior Delegation.

22
00:01:30.750 --> 00:01:33.600
What I mean by delegation
is back to this example,

23
00:01:33.600 --> 00:01:38.300
when I say a1.speak,
a1 doesn't have a speak method.

24
00:01:38.300 --> 00:01:45.430
But we delegate from a1 to another object
so that that method call can happen.

25
00:01:45.430 --> 00:01:50.060
It just happens to be a weirdly
name Foo prototype here, but

26
00:01:50.060 --> 00:01:53.702
delegation is an object-oriented concept.

27
00:01:53.702 --> 00:01:55.642
Is not a class concept
is an object concept.

