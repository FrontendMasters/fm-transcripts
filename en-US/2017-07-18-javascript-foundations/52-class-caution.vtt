WEBVTT

1
00:00:00.000 --> 00:00:03.365
&gt;&gt; Kyle Simpson: So I wanna point out just
a few things that you should be aware of

2
00:00:03.365 --> 00:00:05.973
if you start trying to
color outside the lines.

3
00:00:05.973 --> 00:00:12.891
Let me show you a few of those places
where the class you should be cautious.

4
00:00:12.891 --> 00:00:17.552
First off you could not extend an object,
this actually I think my

5
00:00:17.552 --> 00:00:23.000
biggest frustration or objection,
maybe my second biggest.

6
00:00:23.000 --> 00:00:28.420
You can't mix classes and object together,
it's all classes or no classes.

7
00:00:28.420 --> 00:00:31.840
You can't just extend an object, why?

8
00:00:31.840 --> 00:00:35.140
I don't know, I have yelled and

9
00:00:35.140 --> 00:00:38.370
screamed and thrown a fit,
they didn't pay any attention to me.

10
00:00:40.030 --> 00:00:42.805
That'll cause a syntax error, sorry,

11
00:00:42.805 --> 00:00:46.736
a run time error you're not
allowed to extend an object.

12
00:00:50.671 --> 00:00:54.248
&gt;&gt; Kyle Simpson: Even though this
is supposedly just syntax sugar, so

13
00:00:54.248 --> 00:00:59.100
theoretically Foo and Bar are actual
functions, you can't call them.

14
00:01:00.800 --> 00:01:04.380
You can't just call the Foo and
more importantly, to my problem,

15
00:01:04.380 --> 00:01:09.250
you can't call Bar and override it's this
or do any kind of this binding stuff.

16
00:01:09.250 --> 00:01:11.050
You can't do anything dynamic with it.

17
00:01:11.050 --> 00:01:14.660
You're not allowed to use those
classes as actual functions,

18
00:01:14.660 --> 00:01:18.250
you're only allowed to use
them within the new keyword.

19
00:01:18.250 --> 00:01:22.474
So, it's a full lock to it's
all classes or no classes.

20
00:01:28.713 --> 00:01:31.737
&gt;&gt; Kyle Simpson: You're not allowed
to call the super function, sorry,

21
00:01:31.737 --> 00:01:35.643
you're not allowed to reference this
keyword until after you've called

22
00:01:35.643 --> 00:01:37.799
the super function in the constructor.

23
00:01:37.799 --> 00:01:42.090
So it's very common for people to want to
when they're overwriting a constructor and

24
00:01:42.090 --> 00:01:45.070
extending behavior,
setup some stuff in a specific way and

25
00:01:45.070 --> 00:01:46.992
then call to the parent constructor.

26
00:01:46.992 --> 00:01:50.236
So you'd wanna do something like setup of
this or set up some kind of thing, and

27
00:01:50.236 --> 00:01:51.528
then call to the constructor.

28
00:01:51.528 --> 00:01:54.210
That's not allowed,
you have to call the super first.

29
00:01:54.210 --> 00:01:59.310
That's an unusual deviation from
typical class-oriented languages

30
00:01:59.310 --> 00:02:03.985
because in typical class-oriented
languages, the end class,

31
00:02:03.985 --> 00:02:08.235
the lowest derived class,
the furthest down in the chain,

32
00:02:08.235 --> 00:02:11.985
is the one that creates and
initializes the object.

33
00:02:11.985 --> 00:02:14.170
In JavaScript it's the reverse.

34
00:02:14.170 --> 00:02:18.850
The most parent class is the one
that creates and initializes, so

35
00:02:18.850 --> 00:02:21.160
it's kinda like a TDZ error.

36
00:02:21.160 --> 00:02:24.360
This keyword is in its TDZ at this point.

37
00:02:24.360 --> 00:02:27.890
You can't use it until you've called
the super all the way up, and

38
00:02:27.890 --> 00:02:28.670
then you can use it.

39
00:02:30.470 --> 00:02:33.871
I've seen a number of people
run across that gotcha before.

40
00:02:38.703 --> 00:02:42.140
&gt;&gt; Kyle Simpson: This one's hard to
explain, but you've got to stick with me.

41
00:02:42.140 --> 00:02:49.030
I have an A class and a C class,
and the C class extends A.

42
00:02:49.030 --> 00:02:55.503
So look A and C, and you'll notice that
I declare this foo, which is this.1.

43
00:02:55.503 --> 00:02:58.789
Just gonna call that, and I call super.2,
which is also gonna call that.

44
00:02:58.789 --> 00:03:03.040
So when I instantiate C and I call x.foo,

45
00:03:03.040 --> 00:03:08.149
I get one A, two A,
exactly the way we'd expect.

46
00:03:10.582 --> 00:03:14.875
&gt;&gt; Kyle Simpson: But now, what if I wanna
take that foo function, this one right

47
00:03:14.875 --> 00:03:19.760
here, and I wanna dynamically
rebind it to a different context.

48
00:03:19.760 --> 00:03:22.356
Like for example, to the B context.

49
00:03:22.356 --> 00:03:28.442
If I say x.foo.call (B),
we might expect it to say one,

50
00:03:28.442 --> 00:03:34.560
two B because now we're saying
this.one and super.two.

51
00:03:34.560 --> 00:03:39.901
Here is one of the crazy gotcha's,
with .call and .apply,

52
00:03:39.901 --> 00:03:47.416
it overrides or dynamically binds the this
keyword, but the super keyword is static.

53
00:03:47.416 --> 00:03:52.188
The super keyword stays fixed at
the time you declare the class, and

54
00:03:52.188 --> 00:03:56.730
it can't be overridden by a .bind,
or a .call, or a .apply.

55
00:03:56.730 --> 00:04:00.972
So if you have a mix and match between
a this and a super in your function,

56
00:04:00.972 --> 00:04:05.007
your this keyword will be dynamic
sensitive, your super won't and

57
00:04:05.007 --> 00:04:07.648
I've seen people run
in to that bug before.

58
00:04:10.114 --> 00:04:14.101
&gt;&gt; Kyle Simpson: The reason they did not
make super dynamically dispatched as

59
00:04:14.101 --> 00:04:19.620
opposed to statically fixed is for
performance, that's literally it.

60
00:04:19.620 --> 00:04:25.240
They said, well it'll slower to
figure out super at run time.

61
00:04:25.240 --> 00:04:27.354
So let's just statically fix it and

62
00:04:27.354 --> 00:04:30.959
then just tell people don't try
to color outside the lines.

63
00:04:30.959 --> 00:04:35.314
The super keyword is only
valid inside of functions that

64
00:04:35.314 --> 00:04:38.658
are there as part of the class definition.

65
00:04:38.658 --> 00:04:42.926
You can add to a class definition.

66
00:04:42.926 --> 00:04:47.002
It is legal to say b.prototype.foo and
add a new function in.

67
00:04:47.002 --> 00:04:50.513
But that newly added function
cannot use the super keyword.

68
00:04:50.513 --> 00:04:55.149
The super keyword is only syntactically
valid if the function is there at

69
00:04:55.149 --> 00:04:57.585
the time the class is declared, why?

70
00:04:57.585 --> 00:05:00.156
Cuz the super is statically bound.

71
00:05:01.993 --> 00:05:04.453
&gt;&gt; Kyle Simpson: So you can't add
to your class definitions and

72
00:05:04.453 --> 00:05:06.037
still use the super keyword.

73
00:05:08.539 --> 00:05:12.794
&gt;&gt; Kyle Simpson: You also can't
use the super keyword inside of

74
00:05:12.794 --> 00:05:16.515
objects that delegate up to prototype.

75
00:05:16.515 --> 00:05:20.691
I'm sorry, you can use them in objects and
methods, but

76
00:05:20.691 --> 00:05:23.910
you have to use the concise
methods syntax.

77
00:05:23.910 --> 00:05:29.558
So here I'm using concise ES concise
methods, I'm able to use super keyword.

78
00:05:29.558 --> 00:05:34.636
Here is I do bar function,
I'm not allow to use the super keyword,

79
00:05:34.636 --> 00:05:38.559
so you gotta stick with
the concise method syntax.

80
00:05:38.559 --> 00:05:41.780
&gt;&gt; Speaker 2: Is that for
backward compatibility?

81
00:05:41.780 --> 00:05:46.510
&gt;&gt; Kyle Simpson: It is because people used
to use the word super as a variable in old

82
00:05:46.510 --> 00:05:47.600
functions.

83
00:05:47.600 --> 00:05:51.733
And so they wanted to add the super as
a keyword only in brand new function types

84
00:05:51.733 --> 00:05:53.525
that nobody would have written.

85
00:05:55.204 --> 00:05:57.350
&gt;&gt; Kyle Simpson: So it's that old
backwards compatibility question.

86
00:05:58.590 --> 00:06:03.210
&gt;&gt; Speaker 2: There's
a question on Java Is this A B

87
00:06:03.210 --> 00:06:07.280
example why does super go second,
I don't know.

88
00:06:07.280 --> 00:06:09.930
&gt;&gt; Kyle Simpson: In this A B
example why does super go second?

89
00:06:09.930 --> 00:06:15.230
I think they're asking several Bar,
why does super have to be second here?

90
00:06:15.230 --> 00:06:20.415
I don't know if this is the slide they're
asking about, but super has to go second

91
00:06:20.415 --> 00:06:25.248
because there, super has to go second
because this keyword isn't usable.

92
00:06:27.373 --> 00:06:31.548
&gt;&gt; Kyle Simpson: They're asking here,
why does super go second?

93
00:06:31.548 --> 00:06:36.651
Super only has to go
first in the constructor.

94
00:06:36.651 --> 00:06:39.480
This isn't a constructor,
this is just a regular method.

95
00:06:39.480 --> 00:06:43.680
By the time that method's called, the this
keyword is already been initialized,

96
00:06:43.680 --> 00:06:46.850
it's not in its TDZ anymore,
you can use it.

97
00:06:46.850 --> 00:06:48.568
So I think that was probably the question.

98
00:06:53.590 --> 00:06:56.620
&gt;&gt; Kyle Simpson: All right, so we can
only use super inside of concise methods.

99
00:06:58.720 --> 00:07:04.760
And there's a pattern that I like to use
because I still like using object.create.

100
00:07:04.760 --> 00:07:08.487
If I want to inherit from a class
into an object, I might do

101
00:07:08.487 --> 00:07:13.319
an object.create of (A.prototype),
which is gonna make me a thing.

102
00:07:13.319 --> 00:07:16.611
And this object.assign that
I'm using here on line 6,

103
00:07:16.611 --> 00:07:19.025
it's trying to copy over from an object.

104
00:07:19.025 --> 00:07:24.452
So I have an object literal that's
designed here and I wanna copy over to it.

105
00:07:24.452 --> 00:07:25.838
&gt;&gt; Kyle Simpson: Should work, right?

106
00:07:25.838 --> 00:07:30.620
I would copy my foo method from
the object literal over to

107
00:07:30.620 --> 00:07:34.599
the B object which has
now linked A prototype.

108
00:07:34.599 --> 00:07:38.793
And I ought be able to call B.foo,
and get a one A, two A printout.

109
00:07:38.793 --> 00:07:44.848
The problem is that the this.one will
work because the this is dynamic,

110
00:07:44.848 --> 00:07:51.716
but that's super keyword is statically
bound to the object literal, on line 6.

111
00:07:51.716 --> 00:07:56.673
And the object literal, the super keyword
is gonna reference object.prototype.

112
00:07:56.673 --> 00:08:01.911
So it doesn't dynamically
switch over to the A.prototype

113
00:08:01.911 --> 00:08:07.096
content
&gt;&gt; Kyle Simpson: The take away

114
00:08:07.096 --> 00:08:12.168
here is that, while class does have
some nice syntactic affordances,

115
00:08:12.168 --> 00:08:16.816
there are more than enough corner
cases that my caution to you is,

116
00:08:16.816 --> 00:08:20.973
stay within the lines if you're
gonna play with classes.

117
00:08:22.690 --> 00:08:24.670
&gt;&gt; Kyle Simpson: Don't
try to do dynamic stuff.

