WEBVTT

1
00:00:00.370 --> 00:00:04.078
&gt;&gt; Kyle: So let's talk about the solution
to this exercise 8 and then wrap up.

2
00:00:04.078 --> 00:00:08.328
As you can see in the read me,
gave you some precise instructions.

3
00:00:08.328 --> 00:00:11.959
We wanna remove the setup UI function and
instead,

4
00:00:11.959 --> 00:00:16.864
using object.create define a UI
object that delegates to helpers.

5
00:00:16.864 --> 00:00:22.525
So if we were before calling setup UI and
making a public API,

6
00:00:22.525 --> 00:00:26.300
now what we want to do
is make a UI object.

7
00:00:26.300 --> 00:00:31.146
So on line 39m I'm making a UI object
which delegates two helpers as you see

8
00:00:31.146 --> 00:00:36.522
there on line 39, we delegate two helpers
and we copy this stuff into that object so

9
00:00:36.522 --> 00:00:40.330
this literally lets me use
the literal syntax to copy it in.

10
00:00:40.330 --> 00:00:44.047
And I've got my project template and
work entry template

11
00:00:44.047 --> 00:00:48.779
as properties on that object as
supposed to hidden internal variables.

12
00:00:48.779 --> 00:00:52.951
And then I just start listing out
my functions like my init method,

13
00:00:52.951 --> 00:00:55.060
my submitNewWorkEntry method.

14
00:00:55.060 --> 00:00:58.740
All same functions I didn't have to
change much about how those worked,

15
00:00:58.740 --> 00:01:02.984
I just changed what they are being added
to, so another being added to this object.

16
00:01:02.984 --> 00:01:08.020
The readme also tells us to do
the same kind of change to [COUGH]

17
00:01:08.020 --> 00:01:12.555
make the application object,
instead of setupApp,

18
00:01:12.555 --> 00:01:15.899
we wanna make the application object.

19
00:01:15.899 --> 00:01:21.725
So if I scroll here, we had setupApp,
which took in the UI and

20
00:01:21.725 --> 00:01:25.397
it made this instance of a public API.

21
00:01:25.397 --> 00:01:29.820
Let's make an application
object to do the same.

22
00:01:29.820 --> 00:01:34.407
So I'm still gonna have the setupApp
function but I need an application

23
00:01:34.407 --> 00:01:38.467
object that delegates to that
UI object that we created above.

24
00:01:38.467 --> 00:01:41.410
An application object has
the following methods in

25
00:01:41.410 --> 00:01:46.013
it.
&gt;&gt; Kyle: All that code should be

26
00:01:46.013 --> 00:01:47.421
basically the same.

27
00:01:47.421 --> 00:01:52.834
We still have setup project, and
we have a project object now,

28
00:01:52.834 --> 00:01:58.759
instead of adding stuff to some
project up prototype, or whatever,

29
00:01:58.759 --> 00:02:04.240
we have an OLOO style object for
projects and those methods.

30
00:02:04.240 --> 00:02:10.390
And my setupProject creates an instance,
if you will, that links to project.

31
00:02:10.390 --> 00:02:13.960
It adds the properties to it that it
needs and it gives us this instance bag.

32
00:02:13.960 --> 00:02:17.460
So it's kind of serving the purpose
of a constructor function here.

33
00:02:19.950 --> 00:02:21.600
So there's our four separate objects.

34
00:02:21.600 --> 00:02:26.609
We have the helpers object,
we have the UI object,

35
00:02:26.609 --> 00:02:33.080
we have the application object,
and we have the project object.

36
00:02:33.080 --> 00:02:34.260
Those are the four objects.

37
00:02:34.260 --> 00:02:37.350
They're all gonna be in
a prototype chain together.

38
00:02:37.350 --> 00:02:39.600
So what are some of
the differences in code?

39
00:02:39.600 --> 00:02:42.210
Do we have to change much about
the code to make that work?

40
00:02:42.210 --> 00:02:46.730
Well, there's one key difference in
terms of how we deal with stuff.

41
00:02:46.730 --> 00:02:52.700
You'll notice that in the previous
example, when we instantiated,

42
00:02:52.700 --> 00:02:57.520
or when we called our things,
we made a UI object and called UI.init.

43
00:02:57.520 --> 00:03:03.540
That's the way the original exercise was,
and then made an app where we pass it in.

44
00:03:03.540 --> 00:03:06.780
In the fixed version,
that looks a little bit different.

45
00:03:06.780 --> 00:03:11.300
In the fixed version, we've already got
the UI object so we don't need to make it.

46
00:03:11.300 --> 00:03:14.270
And we call App.init.

47
00:03:14.270 --> 00:03:17.680
Now if you look at the code,
there is no App.init.

48
00:03:17.680 --> 00:03:20.730
Init is in UI,
which is higher up the delegation chain.

49
00:03:20.730 --> 00:03:23.735
But why do we call App.init?

50
00:03:23.735 --> 00:03:27.160
Well, the reason why is
that when call App.init,

51
00:03:27.160 --> 00:03:29.560
that's gonna delegate to application.

52
00:03:31.070 --> 00:03:37.366
Remember, app is that object which
is then delegating to application.

53
00:03:37.366 --> 00:03:40.334
Application doesn't have an init,

54
00:03:40.334 --> 00:03:45.032
so application delegates to UI,
and UI does have an init.

55
00:03:45.032 --> 00:03:49.104
But when we call than init function,
what's this keyword going to be?

56
00:03:49.104 --> 00:03:52.270
Still gonna be App.

57
00:03:52.270 --> 00:03:56.610
So all of these properties,
instead of being added to the UI object,

58
00:03:56.610 --> 00:03:59.340
they're all gonna be added
to the application object.

59
00:04:00.540 --> 00:04:04.538
And you'll notice what I did right
here when I set up the click handler.

60
00:04:04.538 --> 00:04:10.706
I said call submitnNewWorkEntry but
make sure we call it in the same context.

61
00:04:10.706 --> 00:04:17.170
So when submitNewWorkEntry is called,
what is this keyword gonna be?

62
00:04:19.180 --> 00:04:21.410
Still gonna be App, right?

63
00:04:21.410 --> 00:04:26.640
So we carry forward that app context
throughout all of these calls.

64
00:04:26.640 --> 00:04:30.316
The methods are all on their
different individual objects, but

65
00:04:30.316 --> 00:04:33.797
it's the call site time when
all of them virtually compose.

66
00:04:33.797 --> 00:04:38.448
So just as an example,
when I call this stop validate entry,

67
00:04:38.448 --> 00:04:40.920
does app have a validate entry?

68
00:04:40.920 --> 00:04:44.822
No, what about application?

69
00:04:44.822 --> 00:04:46.491
Does it have a validate entry?

70
00:04:46.491 --> 00:04:50.641
No, what about UI,
does it have a validate entry?

71
00:04:50.641 --> 00:04:53.650
No, but where does UI delegate?

72
00:04:53.650 --> 00:04:55.482
Helpers.

73
00:04:55.482 --> 00:04:58.945
And helpers does have
a validate work entry.

74
00:04:58.945 --> 00:05:03.358
And when we call
this.minWorkDescriptionLength,

75
00:05:03.358 --> 00:05:06.303
where are we gonna be getting that?

76
00:05:06.303 --> 00:05:11.742
We're gonna be getting those properties
directly from our app object,

77
00:05:11.742 --> 00:05:18.610
okay?
&gt;&gt; Kyle: So the point is that we were

78
00:05:18.610 --> 00:05:23.593
able to create four separate objects, put
data by virtue of our call site binding,

79
00:05:23.593 --> 00:05:27.816
put data on one of them and leave
the methods on the four separate ones.

80
00:05:27.816 --> 00:05:31.215
And those methods are all able,
even in the circular relationship,

81
00:05:31.215 --> 00:05:34.215
they're all able to virtually compose and
call each other.

82
00:05:34.215 --> 00:05:40.018
And all the method calls, they all
just say, this dot in front of them.

83
00:05:40.018 --> 00:05:44.000
Pick another one, right here,
this.addProjectsToList.

84
00:05:44.000 --> 00:05:48.203
It's all one context, so
it doesn't matter where it comes from.

85
00:05:48.203 --> 00:05:50.335
The delegation will take
care of that dispatch.

86
00:05:54.402 --> 00:05:56.522
&gt;&gt; Kyle: I regularly get asked,

87
00:05:56.522 --> 00:06:01.613
can you give me any kind of
scaled example of using a OLOO?

88
00:06:01.613 --> 00:06:03.526
This is a scaled example.

89
00:06:03.526 --> 00:06:07.270
I mean,
it's not a million line application.

90
00:06:07.270 --> 00:06:09.500
But it's a couple hundred lines of code,
and

91
00:06:09.500 --> 00:06:12.010
some decent amount of complexity to logic.

92
00:06:12.010 --> 00:06:17.630
And it shows you that can, at scale,
use OLOO to delegate between your objects.

93
00:06:17.630 --> 00:06:21.160
Now, as a word of caution,
just because that's what I've done here,

94
00:06:21.160 --> 00:06:24.204
that does not necessarily mean
that I go and use OLOO everywhere.

95
00:06:25.750 --> 00:06:31.680
As a matter of fact, I probably use the
module pattern like 90, 95% of the time.

96
00:06:31.680 --> 00:06:34.892
Because most of the time, the module
pattern is more than sufficient.

97
00:06:34.892 --> 00:06:39.276
But every once in a while,
I run into a scenario like this one where

98
00:06:39.276 --> 00:06:44.082
I've got multiple different objects
that need to refer to each other.

99
00:06:44.082 --> 00:06:47.266
They need to cooperate
to get the work done.

100
00:06:47.266 --> 00:06:51.115
And as soon as I run into a problem
where I've got different objects that

101
00:06:51.115 --> 00:06:55.608
would basically circularly call each
other, like these were, I think to myself,

102
00:06:55.608 --> 00:07:00.122
instead of making circular references,
why don't I make a virtual composition?

103
00:07:00.122 --> 00:07:01.710
Cuz that's what delegation is good at

