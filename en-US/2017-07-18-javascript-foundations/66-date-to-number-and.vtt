WEBVTT

1
00:00:00.300 --> 00:00:02.890
&gt;&gt; Kyle Simpson: Couple of little
tidbits about explicit and

2
00:00:02.890 --> 00:00:05.000
maybe implicit depending
on how you look at it.

3
00:00:05.000 --> 00:00:09.520
Remember I said before that the date
object is almost always constructed so

4
00:00:09.520 --> 00:00:12.870
that we can then produce that
numeric Unix time stamp thing.

5
00:00:12.870 --> 00:00:16.200
The Unix [INAUDIBLE] timestamp, okay?

6
00:00:16.200 --> 00:00:19.300
Now there's a method you can call on
a date instance called get time and

7
00:00:19.300 --> 00:00:20.460
it will produce that.

8
00:00:20.460 --> 00:00:23.880
But who likes to call methods that like
tell you what it is you're intending?

9
00:00:23.880 --> 00:00:26.550
Let's try to be as clever
as we possibly can.

10
00:00:26.550 --> 00:00:28.180
It turns out that a Date instance,

11
00:00:28.180 --> 00:00:32.970
when coerced to a number, will coerce
itself to that timestamp number.

12
00:00:34.030 --> 00:00:36.360
So if we coerce a Date
instance to a number,

13
00:00:36.360 --> 00:00:39.920
like say with the plus operator,
will get that time stamp out.

14
00:00:41.190 --> 00:00:46.260
But you know what, not content,
that doesn't show us to be elite enough.

15
00:00:46.260 --> 00:00:49.150
We want to be really elite
JavaScript programmers.

16
00:00:49.150 --> 00:00:54.222
So let's take advantage of yet another
little oddity of the JavaScript grammar.

17
00:00:54.222 --> 00:00:57.770
It turns out that in JavaScript
the constructor form

18
00:00:57.770 --> 00:01:00.420
that is where the new is in
front of a function call.

19
00:01:00.420 --> 00:01:03.760
The constructor call form,
if there's no arguments to pass,

20
00:01:03.760 --> 00:01:05.670
the parentheses are optional.

21
00:01:05.670 --> 00:01:08.304
So, like you'll almost always
see in open source code for

22
00:01:08.304 --> 00:01:11.692
people that really like wanna shave
off every single bite from their code,

23
00:01:11.692 --> 00:01:13.592
they'll just write new date semicolon.

24
00:01:13.592 --> 00:01:15.690
Well, actually,
they'll leave off the semicolon,

25
00:01:15.690 --> 00:01:18.117
cuz who wants to put all of
the unnecessary semicolons in code.

26
00:01:18.117 --> 00:01:23.283
So you just see new data all by
itself as if that's somehow become

27
00:01:23.283 --> 00:01:29.224
its own syntactic form for date time
stamps or I'm sorry, plus new date.

28
00:01:29.224 --> 00:01:32.804
[COUGH] Don't do any of that nonsense,
just call date.now.

29
00:01:32.804 --> 00:01:34.880
So it's built in since ES5.

30
00:01:34.880 --> 00:01:37.860
So every device that you're ever
gonna support is already running,

31
00:01:37.860 --> 00:01:43.160
just call date.now, it's a static
function, it produces that time stamp.

32
00:01:43.160 --> 00:01:44.900
There's no reason to
solve that with Coercion.

33
00:01:46.660 --> 00:01:51.397
Now let's turn our attention to this last
example here, lines four through eight.

34
00:01:51.397 --> 00:01:56.618
So, for all time we've always had this
problem of I have a string, have some

35
00:01:56.618 --> 00:02:02.266
value and I wanna check to see if there's
some value that's contained within it.

36
00:02:02.266 --> 00:02:04.886
This case, I wanna see if there's
a sub-string contained within

37
00:02:04.886 --> 00:02:06.380
a larger string.

38
00:02:06.380 --> 00:02:09.920
This has been around since the advent
of the beginning of programming.

39
00:02:09.920 --> 00:02:13.280
We had this back in the C programming
days, and when we carried over into

40
00:02:13.280 --> 00:02:17.030
JavaScript, we carried over this
precedent that if we want to search for

41
00:02:17.030 --> 00:02:20.390
a sub-string within a string,
we use this index0 function.

42
00:02:20.390 --> 00:02:26.010
Now, most of the time, when I see
indexOf being used, I see people using

43
00:02:26.010 --> 00:02:31.730
it specifically to check for the Boolean
condition of present or not present.

44
00:02:31.730 --> 00:02:33.930
But indexOf is designed
to return a number.

45
00:02:34.930 --> 00:02:38.660
And so what we end up doing is these
silly contortions where we have to

46
00:02:38.660 --> 00:02:44.190
check the indexOf to see whether or
not it gave us a valid value or not.

47
00:02:44.190 --> 00:02:48.540
And because this thing is designed
only to return numbers, because

48
00:02:48.540 --> 00:02:52.360
its precedent comes to us from C where
you could only return one value type.

49
00:02:53.500 --> 00:02:57.530
So we had to come up with a special
value to indicate, did not find it.

50
00:03:00.190 --> 00:03:04.662
It's not really an exception cuz it's
not an error, it's just it's not there.

51
00:03:04.662 --> 00:03:08.820
You can't return zero because
these are zero based indexes.

52
00:03:08.820 --> 00:03:10.400
So what are we gonna return?

53
00:03:10.400 --> 00:03:12.350
Well, we chose a special sentinel value,

54
00:03:12.350 --> 00:03:14.740
like 500 years ago,
the negative one values.

55
00:03:14.740 --> 00:03:19.210
It's just a made up special
meaning to this number and

56
00:03:19.210 --> 00:03:21.180
that number means did not find it.

57
00:03:22.290 --> 00:03:25.140
That history comes to us from C and
probably even before C.

58
00:03:25.140 --> 00:03:29.050
I don't even know where it comes from,
but it's been handed down from, well,

59
00:03:29.050 --> 00:03:30.280
I do it because my dad did it.

60
00:03:30.280 --> 00:03:32.220
My dad did it cuz my grandfather did it,
right?

61
00:03:32.220 --> 00:03:34.650
Nobody even knows why negative
one was picked, but it was.

62
00:03:34.650 --> 00:03:37.920
So it's the sentinel value
that indicates was not found.

63
00:03:39.030 --> 00:03:42.950
The problem with negative one is that
it's a truthy value cuz it's not on

64
00:03:42.950 --> 00:03:43.540
the falsy list.

65
00:03:44.650 --> 00:03:46.370
So if we wanna compare and say,

66
00:03:46.370 --> 00:03:51.540
is this thing true or false, we can't
just pass it into an if statement.

67
00:03:51.540 --> 00:03:56.520
We, most of the time end up having to say,
if indexOf equal equal negative one,

68
00:03:56.520 --> 00:03:58.990
or not equal negative one, or
some other crap like that.

69
00:03:58.990 --> 00:04:04.470
So, I'm not a big fan of
arbitrary weirdness like that.

70
00:04:05.820 --> 00:04:07.470
Stuff that you can't really fully explain,

71
00:04:07.470 --> 00:04:10.180
it's just like whenever I teach
a brand new JavaScript developer,

72
00:04:10.180 --> 00:04:14.200
I'm like I don't know just trust me,
it's just that way, I don't know, right?

73
00:04:14.200 --> 00:04:18.016
I don't like giving answers like that, I'm
a teacher, I like to give the real answer

74
00:04:18.016 --> 00:04:21.525
for stuff and many of the times there
aren't real answers to these questions.

75
00:04:21.525 --> 00:04:24.906
It's as arbitrary as some dude
just picked negative one, right.

76
00:04:24.906 --> 00:04:26.520
Actually, it's probably a woman,

77
00:04:26.520 --> 00:04:29.026
because women ruled computer
science in the beginning.

78
00:04:29.026 --> 00:04:31.585
So probably a really smart
woman came up with it, but

79
00:04:31.585 --> 00:04:34.436
who knows where it came from
that's just what we have now,

80
00:04:34.436 --> 00:04:37.190
it's negative one it's
an arbitrary sentinel value.

81
00:04:39.030 --> 00:04:44.248
Now, doesn't make sense when you write
it to say equal equal negative one,

82
00:04:44.248 --> 00:04:47.916
in this case not equal negative
one if we wanna test for

83
00:04:47.916 --> 00:04:51.650
the presence of f within
that bigger string.

84
00:04:51.650 --> 00:04:56.860
Well, I have tested this by teaching
brand new JavaScript developers.

85
00:04:56.860 --> 00:04:59.444
People that haven't had any
programming experience and

86
00:04:59.444 --> 00:05:01.380
have never seen
the negative one before and

87
00:05:01.380 --> 00:05:04.250
I go to explain to them the negative
one and they're confused.

88
00:05:04.250 --> 00:05:07.020
They're like, I don't understand
what negative one is about.

89
00:05:07.020 --> 00:05:11.000
Why don't you just return false, or null,
or NaN, or something else like that?

90
00:05:11.000 --> 00:05:12.200
Why does it return negative one?

91
00:05:12.200 --> 00:05:14.270
And I think they have a point.

92
00:05:14.270 --> 00:05:16.010
Because I think it ought to return NaN.

93
00:05:16.010 --> 00:05:20.860
Because NaN is already a sentinel value
that establishes invalid, did not find it,

94
00:05:20.860 --> 00:05:22.160
does not exist.

95
00:05:22.160 --> 00:05:24.870
NaN is a very sensible return result for

96
00:05:24.870 --> 00:05:27.670
this function but
that's not how they designed it.

97
00:05:27.670 --> 00:05:29.250
They designed it to return negative one.

98
00:05:30.570 --> 00:05:31.150
So what are we to do?

99
00:05:31.150 --> 00:05:35.490
Are we to just keep handing down to
generation after generation this cult

100
00:05:35.490 --> 00:05:37.150
method just compare it to negative one?

101
00:05:38.720 --> 00:05:41.670
I chose to go a different direction

102
00:05:41.670 --> 00:05:44.950
because there's another operator
that never gets any use.

103
00:05:44.950 --> 00:05:50.600
It's not a terribly useful operator, to be
completely honest, but the Tilde operator.

104
00:05:50.600 --> 00:05:54.930
That's the ones compliment, which is
otherwise known as the binary negate.

105
00:05:56.360 --> 00:05:58.575
It works on the bits,
it's a bitwise negate.

106
00:05:58.575 --> 00:06:04.420
[COUGH] It has the mathematical result,
equivalent to what we see here.

107
00:06:04.420 --> 00:06:08.770
Tilde of some number is the mathematical
equivalent of adding one to that and

108
00:06:08.770 --> 00:06:10.200
then negating, flipping the sign.

109
00:06:12.040 --> 00:06:16.965
What's the only value that you can plug
into that equation and produce a falsy

110
00:06:16.965 --> 00:06:23.972
value?
&gt;&gt; Kyle Simpson: You

111
00:06:23.972 --> 00:06:27.046
all are busting out your algebra skills
I see a few of you scratching on

112
00:06:27.046 --> 00:06:29.870
paper I'm gonna solve for
n, negative one, right?

113
00:06:29.870 --> 00:06:31.660
It's the only value that
I can plug in there.

114
00:06:31.660 --> 00:06:34.680
If I plug in negative one and
we add one to it and we get a zero and

115
00:06:34.680 --> 00:06:37.802
then we negate it, we get the negative
zero that's a falsy value, right?

116
00:06:39.060 --> 00:06:43.080
So what's interesting about tilde
is it prepares that strangely

117
00:06:43.080 --> 00:06:47.980
oriented numbering system to answer
the Boolean question for us.

118
00:06:49.040 --> 00:06:51.950
It prepares it to answer the Boolean.

119
00:06:51.950 --> 00:06:52.930
Is it existent or not?

120
00:06:54.320 --> 00:06:55.900
Now is that magic?

121
00:06:55.900 --> 00:06:57.010
Is it intuitive?

122
00:06:57.010 --> 00:06:58.610
Of course it's magic unintuitive.

123
00:06:59.740 --> 00:07:03.200
Nobody's ever seen the tilde
before used like that, of course.

124
00:07:03.200 --> 00:07:06.091
But is it anymore magical or
unintuitive than negative one?

125
00:07:06.091 --> 00:07:10.660
The only reason we know negative
one is because everybody's done it.

126
00:07:10.660 --> 00:07:15.330
So, when choosing between different magic,
this is the magic that I

127
00:07:15.330 --> 00:07:19.540
happen to prefer just ever so
slightly more than the negative one magic.

128
00:07:19.540 --> 00:07:22.340
So I tell people to use the tilde,
because it prepares it for

129
00:07:22.340 --> 00:07:24.530
Boolean coercion the way
we would expect it to work.

130
00:07:24.530 --> 00:07:27.890
If you don't like it keep using
those negative one checks, but

131
00:07:27.890 --> 00:07:31.670
I can just tell you brand new developers
scratch their head at negative one just

132
00:07:31.670 --> 00:07:35.006
like they scratch their head at a tilde,
there's not a clear winner here, okay?

133
00:07:38.390 --> 00:07:40.640
So I put that under
the heading of Explicit,

134
00:07:40.640 --> 00:07:42.910
it's sort of Explicit and implicit.

135
00:07:42.910 --> 00:07:46.921
But I put it in the heading of Explicit
because what's it doing specifically

136
00:07:46.921 --> 00:07:50.558
is making that number into something
that will be treated properly as

137
00:07:50.558 --> 00:07:54.980
a Boolean.
&gt;&gt; Kyle Simpson: The real punchline to

138
00:07:54.980 --> 00:07:59.723
this is don't use index of it
all anymore because as of ES 7,

139
00:07:59.723 --> 00:08:04.290
sorry, as of ES 2016,
which people call the S seven.

140
00:08:04.290 --> 00:08:07.573
As of ES 2016, we got array includes and

141
00:08:07.573 --> 00:08:12.810
you can use strings as arrays, so
now we can just do an includes.

142
00:08:12.810 --> 00:08:14.910
And that's the right way to test for
this stuff, okay?

143
00:08:16.260 --> 00:08:19.250
Cuz that actually returns you
a Boolean which is what you want.

144
00:08:19.250 --> 00:08:21.310
But if you're stuck using the older way,

145
00:08:21.310 --> 00:08:24.020
consider maybe using the tilde
instead of your negative one checks.

