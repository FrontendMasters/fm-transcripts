WEBVTT

1
00:00:00.119 --> 00:00:02.428
&gt;&gt; Kyle Simpson: So
let's review our information so far, and

2
00:00:02.428 --> 00:00:04.139
then we'll get to an excercise.

3
00:00:04.139 --> 00:00:06.304
What is a closure and how is it created?

4
00:00:06.304 --> 00:00:09.664
In other words, without cheating and
looking back at the slides,

5
00:00:09.664 --> 00:00:12.299
tell me that definition for closure again.

6
00:00:12.299 --> 00:00:15.553
&gt;&gt; Speaker 2: The ability for
a function to remember its scope.

7
00:00:15.553 --> 00:00:16.813
It's a lexical scope.

8
00:00:16.813 --> 00:00:18.603
&gt;&gt; Kyle Simpson: That's one part of
the definition, what's the second part?

9
00:00:18.603 --> 00:00:21.212
&gt;&gt; Speaker 3: Even outside
the lexical scope.

10
00:00:21.212 --> 00:00:24.619
&gt;&gt; Kyle Simpson: Even when the function is
executed outside of that lexical scope.

11
00:00:24.619 --> 00:00:28.418
It's a two-part definition,
if you only have one of the two parts,

12
00:00:28.418 --> 00:00:29.540
it's not closure.

13
00:00:30.650 --> 00:00:34.600
Just having a function access variables,
that's just called lexical scope.

14
00:00:34.600 --> 00:00:36.850
Just having a function run
in a different scope, but

15
00:00:36.850 --> 00:00:40.480
it doesn't access any variables,
that's just a function.

16
00:00:40.480 --> 00:00:43.400
Having a function access variables
when running in a different scope,

17
00:00:43.400 --> 00:00:44.134
that's closure, okay?

18
00:00:46.970 --> 00:00:51.794
How is it created, well, you declare
a function inside of another scope,

19
00:00:51.794 --> 00:00:55.099
and you reference a variable
from its outer scope.

20
00:00:55.099 --> 00:00:55.839
The closure's created for you.

21
00:00:59.801 --> 00:01:01.355
&gt;&gt; Kyle Simpson: How long
does the scope stay around?

22
00:01:01.355 --> 00:01:06.327
[COUGH]
&gt;&gt; Kyle Simpson: How

23
00:01:06.327 --> 00:01:08.640
long does a scope that's been
closed over stay around?

24
00:01:08.640 --> 00:01:11.391
&gt;&gt; Speaker 2: Until there's no references.

25
00:01:11.391 --> 00:01:13.599
&gt;&gt; Kyle Simpson: Until there's
no more closure over it, right?

26
00:01:13.599 --> 00:01:17.153
So if there's 1,000 closures over it,
and 999 of them go away, and

27
00:01:17.153 --> 00:01:20.056
1's hanging around,
that scope's still hanging around.

28
00:01:20.056 --> 00:01:22.118
Soon as that last closure goes away,

29
00:01:22.118 --> 00:01:24.917
the scope is then free
to be garbage-collected.

30
00:01:28.614 --> 00:01:31.330
&gt;&gt; Kyle Simpson: What was wrong with our
whole loop with the function callback

31
00:01:31.330 --> 00:01:33.417
inside of it, then,
what was the main issue?

32
00:01:33.417 --> 00:01:35.197
Not the surface issue, but the main issue?

33
00:01:43.041 --> 00:01:44.921
&gt;&gt; Speaker 2: [INAUDIBLE] was
that we were, change var to let,

34
00:01:44.921 --> 00:01:45.783
that [CROSSTALK]
&gt;&gt; Kyle Simpson: Well,

35
00:01:45.783 --> 00:01:46.995
that was one way that we solved it.

36
00:01:46.995 --> 00:01:51.564
But the main issue was that we needed
a different i for each iteration, but

37
00:01:51.564 --> 00:01:52.680
we only had one i.

38
00:01:53.690 --> 00:01:58.680
So we were, of course, were closing
a bunch of times over the same variable.

39
00:01:58.680 --> 00:02:01.670
So there were multiple ways that
we fixed it, one was the IIFE.

40
00:02:01.670 --> 00:02:06.520
Remember, we put the IIFE inside of
the for loop, that created a new i.

41
00:02:06.520 --> 00:02:10.180
Then we did a let j inside of the for
loop, and that created a new j for

42
00:02:10.180 --> 00:02:11.350
each iteration.

43
00:02:11.350 --> 00:02:15.668
Finally, we put the let directly in the
for header, which created a new i for us.

44
00:02:15.668 --> 00:02:20.544
All three of those were valid ways
of creating a new variable for

45
00:02:20.544 --> 00:02:22.481
each iteration, okay?

46
00:02:26.190 --> 00:02:28.643
&gt;&gt; Kyle Simpson: Finally,
what are the two characteristics that make

47
00:02:28.643 --> 00:02:29.631
the module pattern?

48
00:02:32.409 --> 00:02:32.980
&gt;&gt; Speaker 2: Has to run once.

49
00:02:32.980 --> 00:02:36.642
&gt;&gt; Kyle Simpson: There has to be an outer
enclosing function that runs once,

50
00:02:36.642 --> 00:02:38.925
that's the first characteristic.

51
00:02:38.925 --> 00:02:40.610
&gt;&gt; Speaker 4: An inner function
that returns, I guess, return.

52
00:02:40.610 --> 00:02:43.883
&gt;&gt; Kyle Simpson: An inner function
with closure over that internal scope,

53
00:02:43.883 --> 00:02:46.030
that gets returned on the public API.

54
00:02:47.260 --> 00:02:49.250
So we didn't really talk about this,
but I wanted to take a moment.

55
00:02:49.250 --> 00:02:52.295
What do you think are the benefits
to the module pattern?

56
00:02:52.295 --> 00:02:53.262
In your own words,

57
00:02:53.262 --> 00:02:57.075
how would you describe why the module
pattern might be beneficial to code?

58
00:02:57.075 --> 00:02:58.625
&gt;&gt; Speaker 3: Organizing
code in a meaningful way.

59
00:02:58.625 --> 00:03:01.261
&gt;&gt; Kyle Simpson: Organizing code,
yep, that's true, but

60
00:03:01.261 --> 00:03:03.904
we can also organize code with namespaces.

61
00:03:03.904 --> 00:03:07.475
So organizing's good, what's another
benefit to the module pattern?

62
00:03:07.475 --> 00:03:08.739
&gt;&gt; Speaker 2: Access, give access.

63
00:03:08.739 --> 00:03:12.682
&gt;&gt; Kyle Simpson: Restricting access,
right, so that we are defensive.

64
00:03:12.682 --> 00:03:15.700
We're not exposing something that
somebody's going to use in a way that

65
00:03:15.700 --> 00:03:16.746
we weren't expecting.

66
00:03:16.746 --> 00:03:19.490
Which then prevents us
from refactoring later.

67
00:03:19.490 --> 00:03:24.800
Primarily, the module pattern
benefit is the encapsulation,

68
00:03:24.800 --> 00:03:29.039
the hiding of things that
we don't want to expose.

69
00:03:29.039 --> 00:03:33.450
Now, what do you think the downsides
might be of the module pattern?

70
00:03:33.450 --> 00:03:37.973
One downside doesn't get talked
about a lot, testability.

71
00:03:37.973 --> 00:03:42.777
If you are of the persuasion, cuz there
are different schools of thought,

72
00:03:42.777 --> 00:03:43.930
within testing.

73
00:03:43.930 --> 00:03:48.042
Within testing,
you might have a black-box tester.

74
00:03:48.042 --> 00:03:50.549
Who's somebody who wants to
test stuff from the outside,

75
00:03:50.549 --> 00:03:52.451
doesn't care about the internal details.

76
00:03:52.451 --> 00:03:56.833
But you might have somebody
else who's a white-box tester,

77
00:03:56.833 --> 00:04:00.719
they test every internal
detail that they know about.

78
00:04:00.719 --> 00:04:04.839
Those folks, often, in terms of
unit tests, they want a function.

79
00:04:04.839 --> 00:04:09.005
Or they want a test for every single
function in a piece of software,

80
00:04:09.005 --> 00:04:13.040
even if it's normally just a hidden
internal private function.

81
00:04:13.040 --> 00:04:18.391
So they use, as their definition for
the word unit, function.

82
00:04:18.391 --> 00:04:22.120
And every function needs to be tested,
cuz there needs to be a unit test for

83
00:04:22.120 --> 00:04:22.853
everything.

84
00:04:22.853 --> 00:04:27.627
So then the question becomes, how are you
gonna test a function if it's hidden?

85
00:04:28.930 --> 00:04:31.276
&gt;&gt; Kyle Simpson: And
we have had people invent all kinds of

86
00:04:31.276 --> 00:04:36.538
interesting-slash-crazy approaches to
that, for example, dependency injection.

87
00:04:36.538 --> 00:04:41.250
Where you inject the testing apparatus
into the internals of your module,

88
00:04:41.250 --> 00:04:46.204
so that it can test itself from the
inside-out, or or other things like that.

89
00:04:46.204 --> 00:04:49.837
Some people have had code rewriting,
which will take a module, and

90
00:04:49.837 --> 00:04:53.037
rewrite it with public codes so
that they're accessible.

91
00:04:53.037 --> 00:04:56.997
Or other kinds of crazy things, there's
lots of ways that you might approach it.

92
00:04:56.997 --> 00:05:02.059
So the module pattern may have
an effect on your testing strategy.

93
00:05:02.059 --> 00:05:03.551
If you're of that persuasion,

94
00:05:03.551 --> 00:05:06.215
the module pattern sort of
actively fights against you.

95
00:05:06.215 --> 00:05:10.309
And you have to invent these other,
more sophisticated ways to test stuff.

96
00:05:10.309 --> 00:05:14.537
I happen to be of the opposite,
the black-box perspective,

97
00:05:14.537 --> 00:05:16.989
which says a unit is not a function.

98
00:05:16.989 --> 00:05:20.974
A unit is the single indivisible
piece of business logic,

99
00:05:20.974 --> 00:05:23.017
whatever that happens to be.

100
00:05:23.017 --> 00:05:28.477
Which might just be a giant module
with thousands of internal details,

101
00:05:28.477 --> 00:05:30.575
and one public API method.

102
00:05:30.575 --> 00:05:34.069
Well, my unit test needs to
test the public API method.

103
00:05:34.069 --> 00:05:38.279
The rest of the details are private,
because they're supposed to be private.

104
00:05:38.279 --> 00:05:42.688
That's the way I think about testing,
so for me, the module pattern fits.

105
00:05:42.688 --> 00:05:45.907
But if you think the other way,
the module pattern might get in your way.

106
00:05:45.907 --> 00:05:53.155
That's one set of downsides to consider,
when choosing the module pattern.

