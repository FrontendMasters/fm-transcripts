WEBVTT

1
00:00:00.810 --> 00:00:05.000
&gt;&gt; Kyle Simpson: Our fourth and
final approach to binding of this for

2
00:00:05.000 --> 00:00:07.760
a function is to use the new keyword.

3
00:00:08.840 --> 00:00:12.940
Now line 7 looks like I'm
instantiating a class.

4
00:00:12.940 --> 00:00:16.700
I understand that there is a strong
precedent that when you use the new

5
00:00:16.700 --> 00:00:21.400
keyword, it indicates to people,
you're instantiating a class.

6
00:00:21.400 --> 00:00:24.030
But what I'm just gonna have to tell
you and you might not trust me,

7
00:00:24.030 --> 00:00:29.460
but I hope you'll just give me
a little bit to prove this.

8
00:00:29.460 --> 00:00:32.010
The new keyword in JavaScript has

9
00:00:32.010 --> 00:00:36.019
absolutely positively nothing to do
with creating instances of classes.

10
00:00:37.220 --> 00:00:41.480
It is doing something very, very much
different that if you squint at it and

11
00:00:41.480 --> 00:00:45.700
just pretend, you might call it
classes but it really isn't that.

12
00:00:47.800 --> 00:00:51.801
So this isn't in the slides, but
if you've been taking notes,

13
00:00:51.801 --> 00:00:56.689
I wanna tell you the four things that the
new keyword actually does when we put it

14
00:00:56.689 --> 00:00:58.487
in front of a function call.

15
00:00:58.487 --> 00:01:01.005
And these notes will be
helpful later in our workshop.

16
00:01:02.535 --> 00:01:05.295
Four things that happen when
the new keyword is put in front of

17
00:01:05.295 --> 00:01:05.965
a function call.

18
00:01:05.965 --> 00:01:10.629
The first is that it creates a brand
new empty object out of thin air.

19
00:01:17.539 --> 00:01:18.100
&gt;&gt; Kyle Simpson: The first

20
00:01:18.100 --> 00:01:21.897
thing is that a brand new empty
object is created out of thin air.

21
00:01:21.897 --> 00:01:23.814
The second thing that happens,

22
00:01:23.814 --> 00:01:28.365
this one you'd probably want to put
an asterisk on cuz it won't make sense.

23
00:01:28.365 --> 00:01:32.209
That newly created object
gets linked to another

24
00:01:32.209 --> 00:01:37.072
object.
&gt;&gt; Kyle Simpson: I

25
00:01:37.072 --> 00:01:41.876
understand if linking doesn't make
any sense yet, we'll come back to it.

26
00:01:47.305 --> 00:01:50.103
&gt;&gt; Kyle Simpson: The third thing that

27
00:01:50.103 --> 00:01:55.865
happens, is that newly created object,

28
00:01:55.865 --> 00:02:00.308
from step one, gets passed in as

29
00:02:00.308 --> 00:02:05.755
the this context to the function call.

30
00:02:05.755 --> 00:02:09.989
And the fourth thing that happens
is if that function does not

31
00:02:09.989 --> 00:02:12.230
already return its own object,

32
00:02:12.230 --> 00:02:17.809
the new keyword assumes that you meant to
return that object that was passed in.

33
00:02:17.809 --> 00:02:24.963
So, it implies a return this.
&gt;&gt; Kyle Simpson: Step one,

34
00:02:24.963 --> 00:02:27.550
create a brand new empty
object out of thin air.

35
00:02:27.550 --> 00:02:30.010
Step two,
link that object to another object.

36
00:02:30.010 --> 00:02:34.130
Step three,
pass that object in as to this context.

37
00:02:34.130 --> 00:02:39.156
Step four, return that this if something
else object wasn't already returned.

38
00:02:41.181 --> 00:02:42.212
&gt;&gt; Kyle Simpson: Now I wanna ask you,

39
00:02:42.212 --> 00:02:46.606
in that description of things, cause that
comes straight from the spec, all right?

40
00:02:46.606 --> 00:02:48.920
This isn't me making this stuff up.

41
00:02:48.920 --> 00:02:54.670
In that description of things, which
entity seems to be doing all the work?

42
00:02:54.670 --> 00:02:56.976
Is it the foo function
that's doing all the work?

43
00:02:56.976 --> 00:02:58.907
Or is it the new keyword
that's doing all the work?

44
00:02:58.907 --> 00:03:01.108
&gt;&gt; Speaker 2: New keyword.

45
00:03:01.108 --> 00:03:01.740
&gt;&gt; Kyle Simpson: Cuz

46
00:03:01.740 --> 00:03:03.910
it seems like it's the new system, right?

47
00:03:03.910 --> 00:03:09.400
As a matter of fact, the foo function
is almost irrelevant, isn't it?

48
00:03:11.520 --> 00:03:15.260
It's almost like the foo function
doesn't even really need to be there.

49
00:03:16.630 --> 00:03:18.200
It's sort of a side effect.

50
00:03:20.490 --> 00:03:24.015
Hold on to that as a mental bookmark,
because by the end of today, we're

51
00:03:24.015 --> 00:03:28.120
gonna prove to you that the new keyword
doesn't even really need a function,

52
00:03:28.120 --> 00:03:33.680
it's just a poorly designed system
to create these new objects.

53
00:03:35.300 --> 00:03:41.011
So if we can set aside the thought that
this has something to do with classes,

54
00:03:41.011 --> 00:03:46.100
the fourth and final way to make
a this keyword pointing something,

55
00:03:46.100 --> 00:03:50.766
is to use the new keyword to create
an object for it to point to.

56
00:03:50.766 --> 00:03:54.349
And that doesn't have anything to do with
class design, that's just saying, hey,

57
00:03:54.349 --> 00:03:56.603
I got this function,
I need it to point at something.

58
00:03:56.603 --> 00:04:01.060
I wanna make a new thing for it to point
at, the new keyword can do that for

59
00:04:01.060 --> 00:04:09.026
you.
&gt;&gt; Kyle Simpson: That's it,

60
00:04:09.026 --> 00:04:10.760
those four rules.

61
00:04:10.760 --> 00:04:13.580
Let me summarize those four
rules in code for you, and

62
00:04:13.580 --> 00:04:17.300
by the way,
this is called a constructor call.

63
00:04:17.300 --> 00:04:22.070
It's not a constructor function, cuz there
really aren't constructor functions,

64
00:04:22.070 --> 00:04:24.100
cuz there really aren't classes.

65
00:04:24.100 --> 00:04:27.100
We just pretend that there's classes.

66
00:04:27.100 --> 00:04:29.990
But I refer to this as a constructor call,

67
00:04:29.990 --> 00:04:34.640
because it's any old random function
with the new keyword put in front of it.

68
00:04:34.640 --> 00:04:36.440
That's what a constructor call is.

69
00:04:36.440 --> 00:04:39.925
Any general function where you stick
the new keyword in front of it,

70
00:04:39.925 --> 00:04:41.610
it's a constructor call.

71
00:04:45.330 --> 00:04:47.680
But all it's really doing
is making an object.

72
00:04:51.460 --> 00:04:55.931
In code, this is approve point for

73
00:04:55.931 --> 00:05:02.770
the precedence, if you will,
for these rules.

74
00:05:02.770 --> 00:05:07.930
Because it is possible that one line
of code can match multiple rules,

75
00:05:07.930 --> 00:05:12.410
imagine for
a moment if I said new o.food.bind,

76
00:05:12.410 --> 00:05:17.380
that would match three different
rules in the same call site, right?

77
00:05:19.170 --> 00:05:22.350
So if we can match multiple
rules to the same call site,

78
00:05:22.350 --> 00:05:24.760
we need to know which rule wins.

79
00:05:24.760 --> 00:05:26.320
What is the order of precedence?

80
00:05:27.490 --> 00:05:29.340
Everybody follow that reasoning?

81
00:05:29.340 --> 00:05:32.304
This code proves to you what
the order of precedence is, but

82
00:05:32.304 --> 00:05:33.682
nobody wants to read code.

83
00:05:33.682 --> 00:05:38.170
So let me just summarize for you
the order of precedence for these rules.

84
00:05:38.170 --> 00:05:41.370
This is how you determine what
the this keyword points at for

85
00:05:41.370 --> 00:05:46.030
any function that has a this keyword,
it's these four rules in this order.

86
00:05:46.030 --> 00:05:49.440
Number 1, was the function
called with the new keyword?

87
00:05:50.540 --> 00:05:53.220
If so, use the newly created object.

88
00:05:55.290 --> 00:05:59.650
Number 2, if not, was the function
called by call() or apply()?

89
00:05:59.650 --> 00:06:01.960
Was it called explicitly with call() or
apply()?

90
00:06:01.960 --> 00:06:04.990
If so, use the explicitly provided
object as of this context.

91
00:06:06.070 --> 00:06:10.443
And as a side note,
bind() uses apply() under the covers so

92
00:06:10.443 --> 00:06:13.840
it's 2b,
it's just a sub-rule of that rule.

93
00:06:17.536 --> 00:06:22.550
If not, was is it called with
a context object like O2.foo

94
00:06:22.550 --> 00:06:23.820
where we borrowed the function?

95
00:06:25.060 --> 00:06:27.380
If so, use that context object.

96
00:06:27.380 --> 00:06:28.660
And fourth and final rule,

97
00:06:28.660 --> 00:06:32.640
default to the global object except in
script mode where we stay undefined.

98
00:06:34.870 --> 00:06:37.170
That's it, those four rules in that order.

99
00:06:38.600 --> 00:06:42.558
If you've spent the better part of your
JavaScript career being confused by

100
00:06:42.558 --> 00:06:46.830
the this keyword, it's just because
nobody ever presented to you this list.

101
00:06:48.230 --> 00:06:50.310
Because now that you have this list,

102
00:06:51.580 --> 00:06:53.940
you should never have any
confusion whatsoever.

103
00:06:53.940 --> 00:06:58.730
It's a very predictable question and
answer process to figure out for

104
00:06:58.730 --> 00:07:01.000
any given function what's this
key we're gonna point out.

105
00:07:02.050 --> 00:07:02.789
Just go down the list.

106
00:07:04.150 --> 00:07:07.880
Now, I wanna ask you something about
the implications of this list.

107
00:07:07.880 --> 00:07:10.870
What do you think would happen if I
put the new keyword in front of a hard

108
00:07:10.870 --> 00:07:11.630
bound function?

109
00:07:13.770 --> 00:07:15.738
What does this list imply?

110
00:07:25.592 --> 00:07:28.820
&gt;&gt; Speaker 3: That this is the new object?
&gt;&gt; Kyle Simpson: It implies that the new

111
00:07:28.820 --> 00:07:36.250
keyword is even able to trump or
override a hard binding, and it is.

112
00:07:37.540 --> 00:07:41.820
It is specially privileged to be
able to override that this binding,

113
00:07:41.820 --> 00:07:43.120
even a hard bound function.

114
00:07:44.420 --> 00:07:45.930
Why you would do that?

115
00:07:45.930 --> 00:07:48.444
I don't know, but if you wanted to,

116
00:07:48.444 --> 00:07:53.087
you could override even a hard bound
function with the new keyword.

