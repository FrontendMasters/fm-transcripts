WEBVTT

1
00:00:00.480 --> 00:00:03.980
&gt;&gt; Kyle Simpson: One last point to make
about delegation, we'll wrap up and

2
00:00:03.980 --> 00:00:04.970
do our final exercise.

3
00:00:05.980 --> 00:00:10.050
Delegation is not just
a simpler style of code.

4
00:00:10.050 --> 00:00:13.450
It's not just what I claim
is a simpler mentor model.

5
00:00:13.450 --> 00:00:16.650
It's actually a very different
way of designing software.

6
00:00:16.650 --> 00:00:19.140
It's a different design pattern.

7
00:00:19.140 --> 00:00:22.885
If functional programming
is a design pattern,

8
00:00:22.885 --> 00:00:26.629
if class-oriented coding
is a design pattern,

9
00:00:26.629 --> 00:00:30.664
delegation is a third style
of designing software.

10
00:00:30.664 --> 00:00:32.563
It doesn't get a lot of attention,

11
00:00:32.563 --> 00:00:35.918
cuz we've been using this system
of prototypes to do classes,

12
00:00:35.918 --> 00:00:40.060
instead of been using it for what it's
really good at, which is delegation.

13
00:00:40.060 --> 00:00:44.739
So I wanna point out that to begin to
change your brain about how you design

14
00:00:44.739 --> 00:00:49.879
software using this system, you have have
to move away from the thought process

15
00:00:49.879 --> 00:00:55.038
of parent and child, and instead embrace
objects that are peers of each other.

16
00:00:55.038 --> 00:00:59.542
You have to think about peer-to-peer
instead of parent-to-child, and

17
00:00:59.542 --> 00:01:03.140
I wanna give you a scenario
to demonstrate that.

18
00:01:03.140 --> 00:01:06.131
Imagine I have a login page
in my application, and

19
00:01:06.131 --> 00:01:08.278
I have two different controllers.

20
00:01:08.278 --> 00:01:12.140
I have the AuthController, which
handles communicating with the server.

21
00:01:12.140 --> 00:01:16.610
And I have the LoginFormController,
which handles dealing with the web page,

22
00:01:16.610 --> 00:01:19.478
dealing with the input form,
and the buttons, and

23
00:01:19.478 --> 00:01:22.820
the display of error messages,
and all of that.

24
00:01:22.820 --> 00:01:25.418
Now, I've only partially
implemented these, so obviously,

25
00:01:25.418 --> 00:01:27.470
there's missing functionality.

26
00:01:27.470 --> 00:01:31.512
But what I wanna point out is
what's going on on line 13 and 14.

27
00:01:31.512 --> 00:01:35.660
I make the LoginFormController,
it's a real concrete object.

28
00:01:35.660 --> 00:01:39.270
I make it delegate to
the AuthController object.

29
00:01:39.270 --> 00:01:43.850
It's not that that's its parent, it's just
they're two peers of each other, and then,

30
00:01:43.850 --> 00:01:46.480
this is how I let them work together.

31
00:01:47.530 --> 00:01:52.320
On line 16,
I grab the username from the form, and

32
00:01:52.320 --> 00:01:56.054
I set it into a property on my
LoginFormController object.

33
00:01:57.430 --> 00:02:01.320
So I say this.username = and
this.password =.

34
00:02:01.320 --> 00:02:03.329
And then look at line 18.

35
00:02:04.550 --> 00:02:07.490
I call this .authenticate.

36
00:02:07.490 --> 00:02:11.890
I'm calling a method that does
not exist on LoginFormController.

37
00:02:14.110 --> 00:02:15.250
Where does it exist?

38
00:02:16.350 --> 00:02:19.029
Line 2, under AuthController.

39
00:02:19.029 --> 00:02:23.210
So I am intentionally delegating
to a different object.

40
00:02:23.210 --> 00:02:28.570
Now, authenticate, when it runs, what's
the very first thing it does on line 4?

41
00:02:28.570 --> 00:02:34.230
It references this.username and
this.password.

42
00:02:34.230 --> 00:02:38.728
But wait a minute, AuthController doesn't
have a username and password property,

43
00:02:38.728 --> 00:02:41.281
does it?
&gt;&gt; Kyle Simpson: But

44
00:02:41.281 --> 00:02:48.052
what does the this keyword point at?
&gt;&gt; Kyle Simpson: Where's the call site?

45
00:02:48.052 --> 00:02:49.660
&gt;&gt; Speaker 2: LoginFormController.

46
00:02:49.660 --> 00:02:51.102
&gt;&gt; Kyle Simpson: The call site is line 18,

47
00:02:51.102 --> 00:02:53.490
which is gonna be the LoginFormController.

48
00:02:54.580 --> 00:02:56.350
So when we are running line 4,

49
00:02:56.350 --> 00:03:00.490
we're actually running in the context
of the LoginFormController.

50
00:03:00.490 --> 00:03:05.318
And we're able to implicitly get
the username and password property,

51
00:03:05.318 --> 00:03:08.542
that context has been
shared with that method.

52
00:03:08.542 --> 00:03:11.004
And here's where it really
starts to get interesting.

53
00:03:11.004 --> 00:03:15.097
The callback that I use for
server.authenticate,

54
00:03:15.097 --> 00:03:18.821
I make it the handleResponse
on my this object.

55
00:03:18.821 --> 00:03:23.176
But wait a minute, AuthController
doesn't have a handleResponse method.

56
00:03:23.176 --> 00:03:25.732
Who has the handleResponse method?

57
00:03:30.987 --> 00:03:35.166
&gt;&gt; Kyle Simpson: LoginFormController
has handleResponse, okay?

58
00:03:35.166 --> 00:03:38.248
Sorry, I called it handleResponse, and
I meant displayError, that's a mistake.

59
00:03:38.248 --> 00:03:41.001
Sorry about that.

60
00:03:41.001 --> 00:03:48.970
Yeah, okay, so I'm binding
the handleResponse to call displayError.

61
00:03:50.920 --> 00:03:56.617
Do you see that?
&gt;&gt; Kyle Simpson: So

62
00:03:56.617 --> 00:04:01.086
what's really happening is that
my LoginFormController object and

63
00:04:01.086 --> 00:04:05.110
my AuthController object
are independent objects.

64
00:04:05.110 --> 00:04:07.910
But during the call context,

65
00:04:07.910 --> 00:04:11.010
they virtually compose
themselves into one context.

66
00:04:12.090 --> 00:04:16.290
And one of them can share properties,
and the other one can share methods.

67
00:04:16.290 --> 00:04:17.946
And then when the call is done,

68
00:04:17.946 --> 00:04:22.534
they go back to being independent.
&gt;&gt; Kyle Simpson: That's the real power of

69
00:04:22.534 --> 00:04:23.402
delegation.

70
00:04:23.402 --> 00:04:31.231
It's what I call virtual composition.
&gt;&gt; Kyle Simpson: That at the call site,

71
00:04:31.231 --> 00:04:36.513
we decide to mix these
two objects together.

72
00:04:36.513 --> 00:04:42.042
You might be wondering,
why would this be beneficial?

73
00:04:42.042 --> 00:04:46.922
This is a different way of thinking than
I've done it before, I haven't needed it,

74
00:04:46.922 --> 00:04:48.379
why would I need it here?

75
00:04:48.379 --> 00:04:53.155
One of many benefits that I could point
out, in addition to all the questions that

76
00:04:53.155 --> 00:04:56.893
we might ask about simplicity of code and
all that other stuff.

77
00:04:56.893 --> 00:05:02.031
But one of the more concrete
benefits to delegation, is that now,

78
00:05:02.031 --> 00:05:07.471
LoginFormController and
AuthController are more easily testable.

79
00:05:07.471 --> 00:05:12.913
For example, If I wanted to test
LoginFormController, all I need

80
00:05:12.913 --> 00:05:19.340
to do is make LoginFormController
delegate to a mock AuthController object.

81
00:05:20.670 --> 00:05:24.890
I just make a fake AuthController,
a mock, and I delegate to it, and

82
00:05:24.890 --> 00:05:26.930
now I can fully test LoginFormController.

83
00:05:28.010 --> 00:05:30.750
If I wanna test AuthController,

84
00:05:30.750 --> 00:05:35.190
all I need to do is make a mock
LoginFormController that delegates to it.

85
00:05:36.510 --> 00:05:41.910
These two pieces stay independent, which
makes them easier to independently test.

86
00:05:41.910 --> 00:05:46.612
And they only sit together at
the call site time through virtual

87
00:05:46.612 --> 00:05:50.331
composition.
&gt;&gt; Kyle Simpson: Try independently

88
00:05:50.331 --> 00:05:53.420
testing two modules that
are hard coded to each other.

89
00:05:53.420 --> 00:05:57.140
Try independently testing two classes,
which one is instantiating the other, or

90
00:05:57.140 --> 00:05:59.310
one is inheriting from the other,

91
00:05:59.310 --> 00:06:03.230
and you'll find out the testing
pieces like that gets a lot harder.

92
00:06:04.330 --> 00:06:09.383
These pieces are much easier to test,
because they are independent.

93
00:06:15.111 --> 00:06:16.511
&gt;&gt; Kyle Simpson: It has been claimed, and

94
00:06:16.511 --> 00:06:19.453
this is not unique to me,
I'm simply repeating it.

95
00:06:19.453 --> 00:06:24.836
It has been claimed that if you
compare a class-oriented system

96
00:06:24.836 --> 00:06:30.619
to a delegation-oriented system,
that the delegation-oriented

97
00:06:30.619 --> 00:06:36.211
system is actually more powerful
than a class-oriented system.

98
00:06:36.211 --> 00:06:39.295
And the reason for that claim is this.

99
00:06:39.295 --> 00:06:44.777
You can implement classes or
fake classes with a delegation system,

100
00:06:44.777 --> 00:06:48.652
but you cannot implement
delegation with a class

101
00:06:48.652 --> 00:06:52.723
system.
&gt;&gt; Kyle Simpson: We've proven

102
00:06:52.723 --> 00:06:53.720
that, haven't we?

103
00:06:53.720 --> 00:06:57.280
Haven't we implemented classes on top
of JavaScript's delegation system?

104
00:06:58.860 --> 00:06:59.962
But you can't do the reverse.

105
00:06:59.962 --> 00:07:02.657
You can't go into something like Java and

106
00:07:02.657 --> 00:07:07.514
implement this graceful style of
dynamic context sharing of delegation.

107
00:07:07.514 --> 00:07:09.323
[COUGH]

