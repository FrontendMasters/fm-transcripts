WEBVTT

1
00:00:00.184 --> 00:00:02.097
&gt;&gt; Kyle Simpson: One more
set of pain to point out.

2
00:00:02.097 --> 00:00:04.454
This is how we model classes.

3
00:00:04.454 --> 00:00:08.057
I'm not gonna diagram this,
cuz the diagram's coming in just a moment.

4
00:00:08.057 --> 00:00:09.674
But we have our Foo.prototype.

5
00:00:09.674 --> 00:00:14.641
If we wanna make a child class,
we wanna make a bar that points to it.

6
00:00:14.641 --> 00:00:18.988
But the Bar.prototype that comes
with the Bar function on line 8,

7
00:00:18.988 --> 00:00:20.292
where does it link?

8
00:00:20.292 --> 00:00:23.315
It links here like all functions do.

9
00:00:23.315 --> 00:00:25.700
And where would we want
Bar.prototype to link?

10
00:00:27.250 --> 00:00:28.999
We'd want it to link to Foo.prototype,
right?

11
00:00:31.282 --> 00:00:32.245
&gt;&gt; Kyle Simpson: So what do we gotta do?

12
00:00:32.245 --> 00:00:34.317
We do line 12.

13
00:00:34.317 --> 00:00:37.530
Line 12 is using a utility
called Object.create.

14
00:00:37.530 --> 00:00:39.913
Now, I just pulled that
rabbit out of thin air,

15
00:00:39.913 --> 00:00:41.949
you're like where does that come from?

16
00:00:41.949 --> 00:00:45.506
That's a built-in utility in ES5 so
way, way back.

17
00:00:45.506 --> 00:00:49.299
But here are the two things
that Object.create does and

18
00:00:49.299 --> 00:00:51.564
tell me if this sounds familiar.

19
00:00:51.564 --> 00:00:56.630
The first thing Object.create does, create
a brand new empty object out of thin air.

20
00:00:56.630 --> 00:01:00.373
The second thing Object.create does,
link it to another object.

21
00:01:00.373 --> 00:01:01.785
Does that sound familiar?

22
00:01:01.785 --> 00:01:02.930
&gt;&gt; Speaker 2: Mm-hm.

23
00:01:02.930 --> 00:01:05.510
&gt;&gt; Kyle Simpson: It's almost like it's
the first two steps of the new algorithm.

24
00:01:06.830 --> 00:01:08.030
Which it is,

25
00:01:08.030 --> 00:01:11.004
because those are the only two steps
that we actually care about here.

26
00:01:11.004 --> 00:01:13.360
We wanna create an object and
link it to another object.

27
00:01:14.420 --> 00:01:17.419
And that's exactly what that utility does.

28
00:01:17.419 --> 00:01:23.374
So we now use that newly created linked
object as the prototype for Bar.

29
00:01:23.374 --> 00:01:26.468
That's what we do on line 12.

30
00:01:26.468 --> 00:01:28.826
So now we can start
adding the Bar.prototype.

31
00:01:28.826 --> 00:01:30.778
We can add a speak method.

32
00:01:30.778 --> 00:01:34.858
So now we've got an object down here
that's got a speak method then the speak

33
00:01:34.858 --> 00:01:37.900
method can delegate up
to the identify method.

34
00:01:37.900 --> 00:01:40.138
Still falls apart if you use shadowing.

35
00:01:40.138 --> 00:01:44.658
But at least we have some way of
approximating something that kinda looks

36
00:01:44.658 --> 00:01:45.556
like a class.

37
00:01:51.583 --> 00:01:54.639
&gt;&gt; Kyle Simpson: There's a takeaway from
this slide that's gonna set us up for

38
00:01:54.639 --> 00:01:56.590
our further discussions in this unit.

39
00:01:57.861 --> 00:02:02.035
There's a b1 object there,
everybody can agree with that, right?

40
00:02:02.035 --> 00:02:04.024
Where's b1 linked?

41
00:02:04.024 --> 00:02:06.052
It's linked to Bar.prototype, isn't it?

42
00:02:06.052 --> 00:02:08.253
Bar.prototype is an object.

43
00:02:08.253 --> 00:02:11.160
Where's Bar.prototype linked?

44
00:02:11.160 --> 00:02:12.254
&gt;&gt; Speaker 2: Foo.prototype?

45
00:02:12.254 --> 00:02:13.738
&gt;&gt; Kyle Simpson: Foo.prototype
is an object.

46
00:02:16.051 --> 00:02:17.790
&gt;&gt; Kyle Simpson: I don't know
know who to credit this to, but

47
00:02:17.790 --> 00:02:19.920
I've heard it said many times.

48
00:02:19.920 --> 00:02:22.850
There's a beautiful program hiding
inside of this ugly program.

49
00:02:24.990 --> 00:02:27.960
The beautiful program in this ugly program

50
00:02:27.960 --> 00:02:32.300
is there's an object linked to another
object, which is linked to another object.

51
00:02:32.300 --> 00:02:36.810
And we get that prototype delegation and
that super unicorn magic.

52
00:02:36.810 --> 00:02:38.660
That's an amazing system.

53
00:02:38.660 --> 00:02:41.780
And it still blows my mind that
Brenden Ike was able to create all of this

54
00:02:41.780 --> 00:02:45.440
that we've seen over this unit
[LAUGH] in the first ten days.

55
00:02:47.110 --> 00:02:51.460
I couldn't create this if I was given
four years and he did it in ten days.

56
00:02:53.190 --> 00:02:56.790
But the problem with this program is that
it's cluttered by all of this other crap.

57
00:02:58.060 --> 00:03:02.170
All of these functions and
.prototype references, and new keywords,

58
00:03:02.170 --> 00:03:08.300
all of this incidental complexity,
that's what it's called.

59
00:03:08.300 --> 00:03:12.310
There's incidental complexity
that is making this program,

60
00:03:12.310 --> 00:03:15.600
instead of being nice, and clean, and
simple, much harder to understand.

