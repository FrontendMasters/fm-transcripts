WEBVTT

1
00:00:00.400 --> 00:00:02.730
&gt;&gt; Kyle Simpson: Let's turn
our attention to Natives.

2
00:00:02.730 --> 00:00:05.930
I've listed out for you, and you notice
that they all have capital letters here.

3
00:00:05.930 --> 00:00:07.855
I've listed out for
you the built in Natives.

4
00:00:07.855 --> 00:00:10.350
There are actually more than these, but
these are the ones we'll pay attention to.

5
00:00:11.750 --> 00:00:16.279
These might look familiar because these
might look to you like these are the built

6
00:00:16.279 --> 00:00:20.541
in types that you see in Java, for
example, like capital S String looks like

7
00:00:20.541 --> 00:00:23.494
the capital S String class
that's built in to Java.

8
00:00:23.494 --> 00:00:27.438
So it'd be tempting to think
of these as Native Types,

9
00:00:27.438 --> 00:00:30.883
many people will refer
to them as Native Types.

10
00:00:30.883 --> 00:00:35.157
They're not actually dealt with as
types from the perspective of the spec,

11
00:00:35.157 --> 00:00:37.843
if you read the specification for
JavaScript.

12
00:00:37.843 --> 00:00:40.105
It does talk about these and
as a matter of fact,

13
00:00:40.105 --> 00:00:42.940
calling them natives is not
even fully agreed upon.

14
00:00:42.940 --> 00:00:46.590
That's just kind of a term of art that
people seem to have settled upon.

15
00:00:46.590 --> 00:00:49.822
But I've heard people have different
answers as to what these should even

16
00:00:49.822 --> 00:00:50.350
be called.

17
00:00:50.350 --> 00:00:53.120
So they're not really types.

18
00:00:53.120 --> 00:00:57.500
They're not really objects, although
in a sense all functions are objects,

19
00:00:57.500 --> 00:00:59.020
so they're kind of objects.

20
00:00:59.020 --> 00:01:01.750
But calling them native objects
could sound a little bit strange.

21
00:01:01.750 --> 00:01:06.152
The capital O Objects is definitely used
more like an object than a function but

22
00:01:06.152 --> 00:01:08.165
it's not really proper call them.

23
00:01:08.165 --> 00:01:11.810
You'll typically think of them in
the context of what you did with Java or

24
00:01:11.810 --> 00:01:15.239
you put the new key word in front of
them and called as a constructor.

25
00:01:15.239 --> 00:01:17.845
So you might think of these
as native constructors.

26
00:01:17.845 --> 00:01:21.676
But I really think the most
appropriate way to approach this is

27
00:01:21.676 --> 00:01:24.696
that you virtually in
almost all of these cases,

28
00:01:24.696 --> 00:01:28.029
you will never want to call
them with the new keyword.

29
00:01:28.029 --> 00:01:29.730
As a matter of fact, most of these cases,

30
00:01:29.730 --> 00:01:31.688
you'll wanna call them
as regular functions.

31
00:01:31.688 --> 00:01:35.442
So I think maybe we should just
call them the Native Functions.

32
00:01:35.442 --> 00:01:39.272
And capital N Native,
we don't mean native like built in.

33
00:01:39.272 --> 00:01:44.391
That's a special thing to distinguish
it from the primitives, okay?

34
00:01:44.391 --> 00:01:45.340
So what are these things?

35
00:01:45.340 --> 00:01:48.550
Well, used as constructors,
they definitely produce

36
00:01:48.550 --> 00:01:53.320
a representation of the value that is
similar to the primitive equivalent.

37
00:01:53.320 --> 00:01:56.490
So if I called new, capital S String,
I'm gonna get a thing that seems

38
00:01:56.490 --> 00:02:01.480
like it's related to the actual primitive
string, but they're not really the same.

39
00:02:01.480 --> 00:02:04.220
They're just a different representation,
a matter of fact,

40
00:02:04.220 --> 00:02:05.574
kind of an object wrap around.

41
00:02:05.574 --> 00:02:07.557
Same thing with numbers,
same thing with Boolean.

42
00:02:07.557 --> 00:02:10.594
Now some of these act as,
there are differences here,

43
00:02:10.594 --> 00:02:12.581
there's not a lot of consistency.

44
00:02:12.581 --> 00:02:17.618
So some of these will act as constructors,
meaning you have to call them with new or

45
00:02:17.618 --> 00:02:20.544
if you don't, they'll behave differently.

46
00:02:20.544 --> 00:02:23.228
Some of them will act as constructors
regardless of whether you call

47
00:02:23.228 --> 00:02:23.849
them with new.

48
00:02:23.849 --> 00:02:26.514
Like the Function will
produce a dynamic function,

49
00:02:26.514 --> 00:02:29.800
regardless of whether you
use the new keyword with it.

50
00:02:29.800 --> 00:02:32.666
Object will do a different thing.

51
00:02:32.666 --> 00:02:34.720
Array doesn't need the new keyword.

52
00:02:34.720 --> 00:02:36.580
RegExp doesn't need the new keyword.

53
00:02:36.580 --> 00:02:38.950
So some of these require the keyword,
and some of them don't, so

54
00:02:38.950 --> 00:02:40.540
there's some weird inconsistency,

55
00:02:40.540 --> 00:02:44.330
but I think it's more appropriate to
think of using them as functions.

56
00:02:44.330 --> 00:02:49.180
So if we compare, for example,
what happens when we call newString and

57
00:02:49.180 --> 00:02:54.540
pass in some value, when we ask,
what is foo, there on line too,

58
00:02:54.540 --> 00:02:58.520
turns out that foo, if we represent it,
if you tried that in your console,

59
00:02:58.520 --> 00:03:01.530
it's actually gonna be
represented as an object.

60
00:03:01.530 --> 00:03:05.954
It'll be represented as on object
that has properties like zero,

61
00:03:05.954 --> 00:03:09.831
the value f, and one with value o,
and two with the value.

62
00:03:09.831 --> 00:03:13.280
It presents itself almost
like an array-like object.

63
00:03:14.490 --> 00:03:18.710
And it has this weird special built-in
properties like bracket, bracket,

64
00:03:18.710 --> 00:03:21.520
primitive value,
I know there are strange things like that.

65
00:03:21.520 --> 00:03:24.860
Another battle that I fought with
the browser of vendors by the way because

66
00:03:24.860 --> 00:03:28.980
the way they represent these
values in the developer console

67
00:03:28.980 --> 00:03:32.010
is in large part going to
contribute to whether or

68
00:03:32.010 --> 00:03:35.280
not you understand what you're doing or
whether you're confused as a developer.

69
00:03:35.280 --> 00:03:38.055
And Firefox used to be
the worst offender of this,

70
00:03:38.055 --> 00:03:42.617
they would represent string object as
almost identical to the string primitive,

71
00:03:42.617 --> 00:03:46.799
the only difference being that the string
object they print it in italics.

72
00:03:46.799 --> 00:03:48.874
And I'm like, are you kidding me?

73
00:03:48.874 --> 00:03:52.659
You expect developers to distinguish in
the font between italic and non-italic and

74
00:03:52.659 --> 00:03:55.439
that's how they know whether
it's an object or a primitive?

75
00:03:55.439 --> 00:03:58.500
That is just deliberately asking for
people to be confused.

76
00:03:58.500 --> 00:03:59.730
Finally they changed that.

77
00:03:59.730 --> 00:04:06.060
They actually changed it
according to my recommendations.

78
00:04:06.060 --> 00:04:07.740
I'm still waiting on Chrome
to catch up with it.

79
00:04:07.740 --> 00:04:11.990
Cuz Chrome's representation is bad
in a different sort of way, okay?

80
00:04:11.990 --> 00:04:13.360
But these are objects.

81
00:04:13.360 --> 00:04:14.987
They're not primitive,
that's the take away here.

82
00:04:14.987 --> 00:04:17.566
And if you do type of food,
you're going to get quote object.

83
00:04:17.566 --> 00:04:21.735
Cuz it's a real object, it's not
some special kind of string thing.

84
00:04:21.735 --> 00:04:26.225
The way to think about that is
it's a wrapper object around

85
00:04:26.225 --> 00:04:31.279
the primitive string value,
the one that we passed in quote foo.

86
00:04:31.279 --> 00:04:36.892
Now, you'll notice on line 7, I called the
String function without the new keyword.

87
00:04:36.892 --> 00:04:40.337
The String function,
when used as a function rather that used

88
00:04:40.337 --> 00:04:43.396
as a constructor,
it does something very different.

89
00:04:43.396 --> 00:04:47.436
Instead of constructing an object
wrapper around a value,

90
00:04:47.436 --> 00:04:52.299
it actually coerces whatever you pass
in to that primitive value type.

91
00:04:54.100 --> 00:04:57.820
Capital S String used as a function
without the new keyword will take whatever

92
00:04:57.820 --> 00:05:00.550
you pass in,
even something like the number 42, and

93
00:05:00.550 --> 00:05:02.060
coerce it to a primitive string.

94
00:05:02.060 --> 00:05:05.370
So it would say quote,
42, would be the output.

95
00:05:05.370 --> 00:05:09.791
That is a vastly more useful mechanism
to us than creating these weird string

96
00:05:09.791 --> 00:05:14.296
object things that nobody actually wants
to deal with in JavaScript anyway.

97
00:05:14.296 --> 00:05:18.478
So my recommendation specifically for
string number in Boolean,

98
00:05:18.478 --> 00:05:21.699
use them as functions specifically for
coercion.

99
00:05:21.699 --> 00:05:24.144
Don't use them as
constructors with the new

100
00:05:24.144 --> 00:05:30.143
keyword.
&gt;&gt; Kyle Simpson: Line

101
00:05:30.143 --> 00:05:34.112
10 would produce a number object
wrapped around the 37 value.

102
00:05:34.112 --> 00:05:36.913
That's strange, okay?

103
00:05:36.913 --> 00:05:39.742
Examples of the strangeness
that you might get if you

104
00:05:39.742 --> 00:05:43.932
represent these things as objects like
a Java developer would typically do.

105
00:05:43.932 --> 00:05:48.751
If you said number of zero,
zero as a primitive

106
00:05:48.751 --> 00:05:54.073
value is falsy,
zero as a number object is truthy.

107
00:05:54.073 --> 00:05:55.755
You're setting your self up for
failure there.

108
00:05:55.755 --> 00:06:01.371
Same thing with Boolean,
false as a Boolean primitive,

109
00:06:01.371 --> 00:06:06.757
is falsy,
false as a Boolean object is truthy, okay?

110
00:06:06.757 --> 00:06:10.045
Don't construct these objects,
there's just no reason for them.

111
00:06:10.045 --> 00:06:15.008
They will set landmines, not only for
yourself, for your future self but

112
00:06:15.008 --> 00:06:21.208
also your other teammates, okay?
&gt;&gt; Kyle Simpson: Array,

113
00:06:21.208 --> 00:06:25.817
the Array constructor has its own
set of problems, but the nice thing

114
00:06:25.817 --> 00:06:30.429
about array is that there is a literal
syntax that we can use instead,

115
00:06:30.429 --> 00:06:33.310
the square brackets that we see on line 5.

116
00:06:33.310 --> 00:06:37.820
The literal syntax is vastly
preferred to the constructor form.

117
00:06:37.820 --> 00:06:42.150
Use the literal form wherever possible,
don't use the constructor form.

118
00:06:42.150 --> 00:06:47.602
There's a got you with this particular
constructor, which is if I said new Array

119
00:06:47.602 --> 00:06:53.294
42, many people would assume that I would
then get an array that was pre-sized, I

120
00:06:53.294 --> 00:06:58.163
mean that was set with the value 42 in it.
&gt;&gt; Kyle Simpson: Because I

121
00:06:58.163 --> 00:07:01.730
passed in array 1, 2, 3, and I got an
array of 1, 2, 3 so they would think, if I

122
00:07:01.730 --> 00:07:05.123
pass in a single value, unfortunately,
the Array constructor is overloaded.

123
00:07:05.123 --> 00:07:08.640
Overloading is never a good idea in
software design but it's overloaded here.

124
00:07:08.640 --> 00:07:13.551
To say if you pass in a number, and
there's only one of them, then that

125
00:07:13.551 --> 00:07:18.898
number is considered to be the length
of the new array that you wanna create.

126
00:07:18.898 --> 00:07:23.798
So we'd actually get an empty array,
presize to length 42.

127
00:07:23.798 --> 00:07:25.359
But that's not even the craziest part.

128
00:07:26.400 --> 00:07:31.936
The craziest part, the part that
is really, legitimately a W-T-F of

129
00:07:31.936 --> 00:07:37.767
JavaScript, is that we have this notion
of what's called a sparse array.

130
00:07:37.767 --> 00:07:42.116
If I create an array that is empty and
then I set it's length,

131
00:07:42.116 --> 00:07:46.228
I literally say array dot length equals,
and I say 42.

132
00:07:46.228 --> 00:07:50.822
It will present itself as being
an array that has 42 slots in it, but

133
00:07:50.822 --> 00:07:54.803
only from the perspective of
how the console deals with it.

134
00:07:54.803 --> 00:07:58.566
If you tried to loop over its
values with something like .map,

135
00:07:58.566 --> 00:08:02.105
it's not gonna have any
values to loop over.

136
00:08:02.105 --> 00:08:07.745
They're like phantom, fake slots or
so-called empty slots.

137
00:08:07.745 --> 00:08:12.355
This is literally the worst design
I've ever seen in any programming!

138
00:08:12.355 --> 00:08:16.610
Like, I've seen a lot of crazy,
crappy stuff, but

139
00:08:16.610 --> 00:08:20.788
to create a value that has
phantom locations in it.

140
00:08:20.788 --> 00:08:24.981
It's like a giant neon sign that
says I'm trying to confuse you,

141
00:08:24.981 --> 00:08:29.877
I'm trying to make you trip up,
I'm trying to create pity failure design.

142
00:08:29.877 --> 00:08:34.743
Never, ever, ever design an array and
intentionally create empty slots,

143
00:08:34.743 --> 00:08:40.460
and that's what you do when you do array,
parenthesis, and some number.

144
00:08:40.460 --> 00:08:45.640
Our notion is, for performance,
I wanna presize my array, right?

145
00:08:45.640 --> 00:08:46.450
That's nonsense,

146
00:08:46.450 --> 00:08:51.400
JavaScript does not preallocate 42
units of memory for your array.

147
00:08:51.400 --> 00:08:54.920
It literally creates an empty array which
JavaScript typically represents as linked

148
00:08:54.920 --> 00:08:59.115
list, by the way, and then it just
arbitrarily sets the length property to

149
00:08:59.115 --> 00:09:03.250
42, thereby making these phantom
slots appear that they're there and

150
00:09:03.250 --> 00:09:04.580
they're not really there.

151
00:09:04.580 --> 00:09:08.373
So don't ever do it under any
circumstances cuz there's no performance

152
00:09:08.373 --> 00:09:11.557
benefit, and there's a ton of
confusion coming around it.

153
00:09:11.557 --> 00:09:15.777
So just don't use the constructor form for
array, use the literal,

154
00:09:15.777 --> 00:09:17.761
it's always more preferable.

155
00:09:17.761 --> 00:09:23.081
Object, Object as a function
will take value and

156
00:09:23.081 --> 00:09:28.287
try to coarse it to its
object representation.

157
00:09:28.287 --> 00:09:29.805
There are some nuances around it.

158
00:09:29.805 --> 00:09:32.765
I don't recommend using object very often,
but new

159
00:09:32.765 --> 00:09:37.780
object creates an object instance exactly
the same as the curly brace instance.

160
00:09:37.780 --> 00:09:39.740
The curly brace literal form.

161
00:09:39.740 --> 00:09:42.170
The literal form is shorter,
more straight forward, and

162
00:09:42.170 --> 00:09:47.160
technically slightly more efficient,
cuz it's statically analyzable where

163
00:09:47.160 --> 00:09:51.800
the imperative property assignment
of line 8, 9, and 10 is not.

164
00:09:51.800 --> 00:09:53.370
So the literal form here yet

165
00:09:53.370 --> 00:09:58.152
again is gonna be more optimizable by the
engine because it's the declarative form

166
00:09:58.152 --> 00:10:01.582
as opposed to the imperative
form on lines 7 through 10.

167
00:10:01.582 --> 00:10:05.300
So again prefer the literal syntax over

168
00:10:05.300 --> 00:10:09.622
the imperative syntax of the constructor.
&gt;&gt; Speaker 2: So

169
00:10:09.622 --> 00:10:14.467
the benefit here is really statics and
not necessarily performance, right?

170
00:10:14.467 --> 00:10:18.550
It's just being a little bit
more better in communication.

171
00:10:18.550 --> 00:10:19.482
&gt;&gt; Kyle Simpson: I mean there is

172
00:10:19.482 --> 00:10:23.913
a performance issue to be gained
because we can say, okay, great,

173
00:10:23.913 --> 00:10:27.413
I know that the engine either already or
eventually,

174
00:10:27.413 --> 00:10:31.795
can more statically analyzed a literal and
know what to do with it.

175
00:10:31.795 --> 00:10:35.996
For example, array literal, it literally
can see at the parsing stage how many

176
00:10:35.996 --> 00:10:40.010
elements you've added, so it goes
ahead and pre-reserves that amount and

177
00:10:40.010 --> 00:10:42.220
doesn't have to like add it or whatever.

178
00:10:42.220 --> 00:10:44.920
It just knows, I'm gonna need this many,
and then it puts all of them in.

179
00:10:44.920 --> 00:10:49.460
So because it's statically analyzable,
it's more efficient that way.

180
00:10:49.460 --> 00:10:53.030
Now, we're talking about microseconds,
but it is more efficient because it's

181
00:10:53.030 --> 00:10:57.960
a declarative syntax the compiler can
recognize, as opposed to line 8, 9, and

182
00:10:57.960 --> 00:11:00.380
10, it's just figuring that
out line by line by line.

183
00:11:00.380 --> 00:11:04.050
So it has to keep growing
the object every time, right?

184
00:11:04.050 --> 00:11:05.960
So there is a performance aspect, but

185
00:11:05.960 --> 00:11:10.280
really, this is more about code
communication even than performance.

186
00:11:10.280 --> 00:11:15.294
The literal on line 10 and the literal on
line 5 communicate more clearly my intent.

187
00:11:15.294 --> 00:11:17.859
I declare literal as
opposed to imperative.

188
00:11:21.668 --> 00:11:23.456
&gt;&gt; Kyle Simpson: There are some where

189
00:11:23.456 --> 00:11:29.146
you're gonna want the new keyword,
specifically for a RegEx.

190
00:11:29.146 --> 00:11:33.285
You're gonna need to use the new keyword
if you want to dynamically create

191
00:11:33.285 --> 00:11:34.631
a regular expression.

192
00:11:34.631 --> 00:11:38.800
Now, you should prefer the literal
syntax if at all possible,

193
00:11:38.800 --> 00:11:42.040
because the literal syntax
gets compiled once.

194
00:11:42.040 --> 00:11:45.357
It doesn't get rerun at run time whereas

195
00:11:45.357 --> 00:11:49.740
the dynamic regular expression has to
get rerun every time that code runs.

196
00:11:49.740 --> 00:11:54.230
So you should prefer the literal from
performance and declarative coding

197
00:11:54.230 --> 00:11:58.230
reasons, but there are sometimes when
your patter needs to be dynamic.

198
00:11:58.230 --> 00:12:02.030
Part of the pattern is a value in your
program that you programmatically,

199
00:12:02.030 --> 00:12:03.450
logically decided,

200
00:12:03.450 --> 00:12:06.940
then you're gonna need the regular
expression constructor form, okay?

201
00:12:08.030 --> 00:12:10.420
So it's entirely okay to
use that if you have to,

202
00:12:10.420 --> 00:12:13.050
prefer the literal syntax if possible.

203
00:12:13.050 --> 00:12:17.900
Dates on the other hand have no literal,
this I think is a huge mistake,

204
00:12:17.900 --> 00:12:20.130
it's a missing gap in
the design of JavaScript.

205
00:12:20.130 --> 00:12:21.420
We should have a date literal.

206
00:12:21.420 --> 00:12:22.950
Dates are pretty important.

207
00:12:22.950 --> 00:12:26.900
And we should come up with a good date
literal that everybody can agree on, make

208
00:12:26.900 --> 00:12:30.960
it the UTC, one of those ISO standards or
whatever, and just agree upon it.

209
00:12:30.960 --> 00:12:32.811
But we don't have that right now,
[COUGH] right?

210
00:12:32.811 --> 00:12:34.476
There are some people that
are talking about adding it, but

211
00:12:34.476 --> 00:12:35.730
we don't have that right now.

212
00:12:35.730 --> 00:12:39.040
So if you wanna construct the date
timestamp, you have to use the constructor

213
00:12:39.040 --> 00:12:41.970
form of the date constructor,
you have to say new date.

214
00:12:41.970 --> 00:12:45.387
That's gonna construct a new
by default with no arguments,

215
00:12:45.387 --> 00:12:49.543
it's going to construct a timestamp
that represents this exact moment.

216
00:12:49.543 --> 00:12:53.508
It's kind of the Unix timestamp
milliseconds thing, right?

217
00:12:53.508 --> 00:12:58.411
Now, I will say most of the time
that you construct a data object,

218
00:12:58.411 --> 00:13:03.242
it's because you wanna get
the current timestamp of right now.

219
00:13:03.242 --> 00:13:07.977
And if you get a date object, you then
have to extract that number timestamp

220
00:13:07.977 --> 00:13:12.809
from it by calling a function or
coercing it, we'll talk about that later.

221
00:13:12.809 --> 00:13:16.549
There's a much better way of getting that,
and it's called Date.now.

222
00:13:16.549 --> 00:13:19.819
It's a static function,
gives you that timestamp.

223
00:13:19.819 --> 00:13:24.885
So you really should prefer not to ever
construct the data instances if possible.

224
00:13:24.885 --> 00:13:28.938
Most of the time you can get away with not
needing to construct a date instance, but

225
00:13:28.938 --> 00:13:32.547
if you do need to, you're gonna have
to use the new constructor to do it.

226
00:13:32.547 --> 00:13:33.352
Yeah.
&gt;&gt; Speaker 2: So

227
00:13:33.352 --> 00:13:37.812
that example on the previous slide
with the curly braces declaring array,

228
00:13:37.812 --> 00:13:42.622
if you try to and for some reason doesn't
come back as an array in the console it's

229
00:13:42.622 --> 00:13:44.586
more of an object-
&gt;&gt; Kyle Simpson: Which one?

230
00:13:44.586 --> 00:13:46.250
The curly braces do an object,

231
00:13:46.250 --> 00:13:48.510
the square brackets do an array.
&gt;&gt; Speaker 2: Okay,

232
00:13:48.510 --> 00:13:49.400
that's good.
&gt;&gt; Kyle Simpson: So

233
00:13:49.400 --> 00:13:52.970
if you do curly braces that's an object,
square brackets array.

234
00:13:52.970 --> 00:13:54.550
So question here from Craig.

235
00:13:54.550 --> 00:13:58.130
What advantage is a date
library like Moment JS?

236
00:13:58.130 --> 00:14:02.559
I wouldn't do any date stuff in
JavaScript without a good date library.

237
00:14:02.559 --> 00:14:05.865
And moment JS just happens to be
a really good one, I know when-

238
00:14:05.865 --> 00:14:07.264
&gt;&gt; Speaker 2: It's pretty big though, so

239
00:14:07.264 --> 00:14:11.305
there's microlibraries that are, you
know won't upload your project so much.

240
00:14:11.305 --> 00:14:12.948
&gt;&gt; Kyle Simpson: Yeah.

241
00:14:12.948 --> 00:14:14.246
&gt;&gt; Speaker 2: But moment's Craig,

242
00:14:14.246 --> 00:14:18.137
cuz it's robust, you can do time zones,
you can do time zone math,

243
00:14:18.137 --> 00:14:21.567
you can add a few days,
you can subtract, you can compare.

244
00:14:21.567 --> 00:14:22.130
&gt;&gt; Kyle Simpson: It's true,

245
00:14:22.130 --> 00:14:23.720
Moment has a lot of capability to it.

246
00:14:23.720 --> 00:14:27.710
I know one of the maintainers of Moment is
actually working on getting some of that

247
00:14:27.710 --> 00:14:29.230
stuff just built into JavaScript.

248
00:14:29.230 --> 00:14:31.890
So we don't need such
heavy libraries to do it.

249
00:14:31.890 --> 00:14:37.250
Dates are a big gap in
the behavior of JavaScript,

250
00:14:37.250 --> 00:14:40.150
stuff we need the standard library
to just grow that capability.

