WEBVTT

1
00:00:00.020 --> 00:00:02.380
&gt;&gt; Kyle Simpson: Quick little
note on the Const Keyword.

2
00:00:02.380 --> 00:00:04.230
A lot of people have actually taken to,

3
00:00:04.230 --> 00:00:06.630
now, they don't even
say let instead of var.

4
00:00:06.630 --> 00:00:08.290
Now, they say use const everywhere.

5
00:00:09.620 --> 00:00:11.560
Every once in a while use let,
and never use var.

6
00:00:11.560 --> 00:00:16.180
So the cult wisdom at this point is,
always use const.

7
00:00:16.180 --> 00:00:19.190
If you have to switch back to let,
and never use var.

8
00:00:19.190 --> 00:00:21.460
My advice is literally the opposite.

9
00:00:21.460 --> 00:00:22.760
Start out by using var.

10
00:00:22.760 --> 00:00:25.010
If you gonna block scope use let.

11
00:00:25.010 --> 00:00:28.181
Maybe everyone once in a while
there's gonna be a need for a cons.

12
00:00:28.181 --> 00:00:35.304
Let me why my advice is the inverse
of the community common.

13
00:00:35.304 --> 00:00:38.277
The cons key word implies a constant.

14
00:00:38.277 --> 00:00:40.543
And when I ask people what is a constant,

15
00:00:40.543 --> 00:00:44.620
I typically get answers like this,
it's a value that doesn't change.

16
00:00:45.780 --> 00:00:49.830
That's the general dictionary
definition for it.

17
00:00:49.830 --> 00:00:51.510
A variable that doesn't change.

18
00:00:51.510 --> 00:00:52.500
Well, that sounds all well and

19
00:00:52.500 --> 00:00:54.960
good, except that's not what we
mean in programming by a constant.

20
00:00:56.250 --> 00:00:59.200
As a matter of fact, a constant,
in any language in existence,

21
00:00:59.200 --> 00:01:01.840
const does not have anything
to do with the value.

22
00:01:03.000 --> 00:01:06.240
Const, [COUGH],
has to do with the assignment.

23
00:01:06.240 --> 00:01:09.130
A constant is not a value
that doesn't change.

24
00:01:09.130 --> 00:01:11.970
A constant is a variable
that cannot be reassigned.

25
00:01:13.460 --> 00:01:17.810
That might sound like an unimportant
nuance, but actually it's a big,

26
00:01:17.810 --> 00:01:18.920
giant huge deal.

27
00:01:18.920 --> 00:01:22.747
And my evidence for that, is go do
some searching on Stack Overflow, and

28
00:01:22.747 --> 00:01:26.011
see how many tens of thousands
of questions in all languages,

29
00:01:26.011 --> 00:01:29.779
not just JavaScript have been asked
over the years of people frustrated

30
00:01:29.779 --> 00:01:32.211
about this const key
word in their language.

31
00:01:32.211 --> 00:01:35.505
And why does it work this way, and
what does it mean, and what does it do,

32
00:01:35.505 --> 00:01:39.504
because they think that it's implying that
we create a value that doesn't change, and

33
00:01:39.504 --> 00:01:40.713
that's not what it does.

34
00:01:40.713 --> 00:01:43.861
That history that precedent has
been around for a really long time.

35
00:01:43.861 --> 00:01:47.853
We have adapted that history by bringing
const into the JavaScript language.

36
00:01:47.853 --> 00:01:51.557
And we have people today, right now,
probably right at this moment, writing on

37
00:01:51.557 --> 00:01:55.111
Stack Overflow, I don't know why const
isn't doing what I think it should.

38
00:01:55.111 --> 00:01:59.417
It's mostly because they use stuff
like line 7, they declared const and

39
00:01:59.417 --> 00:02:04.208
make it reference something, where the
value itself is already a mutable value,

40
00:02:04.208 --> 00:02:06.650
like for example an array, or an object.

41
00:02:08.080 --> 00:02:12.620
What that means to the writer of that
code, is they're thinking to themselves,

42
00:02:12.620 --> 00:02:16.824
well, c is never gonna get reassigned,
but the reader of the code thinks,

43
00:02:16.824 --> 00:02:18.258
c is never gonna change.

44
00:02:18.258 --> 00:02:20.730
Do you see how those are different?

45
00:02:20.730 --> 00:02:23.300
Cuz if somebody changes c, and
you're like, wait a minute,

46
00:02:23.300 --> 00:02:26.000
I thought it was a const,
why is it changing?

47
00:02:26.000 --> 00:02:29.270
You've created a footgun for
people to get tripped up on.

48
00:02:30.450 --> 00:02:33.022
The usage of the const keyword,
in my book,

49
00:02:33.022 --> 00:02:35.601
already starts out in the negative column.

50
00:02:35.601 --> 00:02:39.251
Because it already has this
confusing precedent for 30 or

51
00:02:39.251 --> 00:02:42.614
more years that it's been
in programming languages.

52
00:02:42.614 --> 00:02:43.906
It already starts out with that.

53
00:02:43.906 --> 00:02:47.237
So for
the const key word to actually be useful,

54
00:02:47.237 --> 00:02:50.100
it would have to somehow overcome that.

55
00:02:50.100 --> 00:02:53.990
It would have to be, not only good
enough to overcome that negativity,

56
00:02:53.990 --> 00:02:56.740
but be significantly better, so

57
00:02:56.740 --> 00:03:01.470
that it would really encourage the user
Java, it would carry its own weight.

58
00:03:01.470 --> 00:03:03.527
All this is one more the clear
that I have to learn.

59
00:03:05.312 --> 00:03:08.215
&gt;&gt; Kyle Simpson: And I don't think
the const keyword really does that,

60
00:03:08.215 --> 00:03:10.380
I don't think it carries its own light.

61
00:03:10.380 --> 00:03:14.770
Does it have any benefit, whatsoever,
it is a tiny amount of benefit.

62
00:03:14.770 --> 00:03:19.110
It might signal to a person,
I'm not gonna reassigned this thing.

63
00:03:19.110 --> 00:03:23.450
But if you're using the const as a block
scoping declared, which is what it is, and

64
00:03:23.450 --> 00:03:27.418
what it is supposed to be used for, if
you use it in a block scope, your blocks

65
00:03:27.418 --> 00:03:31.759
are typically gonna be shorter in nature
anyway, or at least that's best practice

66
00:03:31.759 --> 00:03:36.192
to have your blocks at five, or ten, or
15 lines, instead of thousands of lines.

67
00:03:36.192 --> 00:03:40.017
If you declare the const
at the top of a block,

68
00:03:40.017 --> 00:03:44.348
say it's ten lines long,
you say const x=2, and

69
00:03:44.348 --> 00:03:48.908
then,
&gt;&gt; Kyle Simpson: You have nine other lines

70
00:03:48.908 --> 00:03:53.980
within that block, and you don't reassign
it, obviously, cuz it can't be reassigned.

71
00:03:53.980 --> 00:03:57.600
Supposedly, the benefit here is that
you've told the reader of the code on line

72
00:03:57.600 --> 00:04:01.960
one, I'm not going to reassign it
in any of the following nine lines.

73
00:04:01.960 --> 00:04:06.048
Cuz, by the way, those ten lines are the
only ten lines in the entire program that

74
00:04:06.048 --> 00:04:07.567
can reassign that variable.

75
00:04:07.567 --> 00:04:12.988
Nowhere else can I reassign it,
except for the block that it exist in.

76
00:04:12.988 --> 00:04:16.036
We know that,
cuz we know how lexical scope works now.

77
00:04:16.036 --> 00:04:17.167
So you're saying,

78
00:04:17.167 --> 00:04:20.769
I'm not going to reassign it in
any of the following nine lines.

79
00:04:20.769 --> 00:04:25.108
If you've done a good job of writing your
blocks in a short enough way where they

80
00:04:25.108 --> 00:04:29.510
can be all seen at one time on the page,
visually on your screen, the other way to

81
00:04:29.510 --> 00:04:34.030
signal to people that you're not gonna
reassign it, is just to not reassign it.

82
00:04:34.030 --> 00:04:38.618
So is the const really providing
that much benefit there?

83
00:04:38.618 --> 00:04:40.894
It's a tiny amount of benefit, at best.

84
00:04:40.894 --> 00:04:43.045
And it comes with this giant caveat of,

85
00:04:43.045 --> 00:04:46.609
people are gonna get confused about
value versus assignment semantic.

86
00:04:46.609 --> 00:04:49.129
So I don't think the const
keyword carries its own weight.

87
00:04:50.590 --> 00:04:52.070
It is only a tiny amount of benefit.

88
00:04:54.180 --> 00:04:57.030
So I still use const
every once in a while.

89
00:04:57.030 --> 00:05:00.320
But I only use it for
a value that's already immutable.

90
00:05:00.320 --> 00:05:01.860
For example, line 4.

91
00:05:01.860 --> 00:05:06.850
If I was declaring a variable like var
pi equals 3.14, or something like that,

92
00:05:06.850 --> 00:05:08.600
I'd do it with a const.

93
00:05:08.600 --> 00:05:10.970
Makes complete sense, right?

94
00:05:10.970 --> 00:05:14.430
But I don't use const to
declare my arrays, for sure.

95
00:05:14.430 --> 00:05:17.542
I don't use const to declare my functions,
or any of that stuff,

96
00:05:17.542 --> 00:05:20.439
cuz I think I'm setting traps for
people to fall into later.

97
00:05:23.452 --> 00:05:26.470
&gt;&gt; Speaker 2: Can you elaborate
on function expression?

98
00:05:26.470 --> 00:05:33.630
Why wouldn't you make
a function expression a const?

99
00:05:33.630 --> 00:05:35.933
&gt;&gt; Kyle Simpson: Why would I not
make a function expression a const?

100
00:05:35.933 --> 00:05:40.603
Well, as I said earlier, my stylistic
preference is that function declarations

101
00:05:40.603 --> 00:05:44.607
are more readable than function
expressions assigned to variables.

102
00:05:44.607 --> 00:05:48.231
So I guess, in general, I would like to
say that, there's another reason which

103
00:05:48.231 --> 00:05:51.290
we'll get to later in the course,
when we talking about hoisting.

104
00:05:51.290 --> 00:05:56.061
Function declarations behave differently
than function expressions, and I tend to

105
00:05:56.061 --> 00:06:00.312
prefer the behavior of a function
declaration over a function expression.

106
00:06:04.044 --> 00:06:06.597
&gt;&gt; Kyle Simpson: But
in a more narrow sense, I wouldn't do it,

107
00:06:06.597 --> 00:06:08.830
because it doesn't offer any benefit.

