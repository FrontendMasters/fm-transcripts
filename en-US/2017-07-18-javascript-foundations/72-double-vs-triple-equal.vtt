WEBVTT

1
00:00:00.570 --> 00:00:04.394
&gt;&gt; Kyle Simpson: So now let's turn our
attention to double equals versus triple

2
00:00:04.394 --> 00:00:05.420
triple equals.

3
00:00:05.420 --> 00:00:09.029
Many people have asserted, well,
I don't see any purpose to == and

4
00:00:09.029 --> 00:00:12.701
I've heard that there's these weird
corner cases that could bite me,

5
00:00:12.701 --> 00:00:14.744
so I'm just gonna use === forever.

6
00:00:14.744 --> 00:00:15.930
Always, always use ===.

7
00:00:15.930 --> 00:00:18.977
Linters will tell you that,
books will tell you that,

8
00:00:18.977 --> 00:00:22.302
speakers will tell you that,
teachers will tell you that.

9
00:00:22.302 --> 00:00:25.789
I happen to be the only one,
it seems, stands up and

10
00:00:25.789 --> 00:00:28.152
says, maybe we ought to use both.

11
00:00:28.152 --> 00:00:30.792
Maybe there are times double equals
is useful, as matter of fact,

12
00:00:30.792 --> 00:00:33.440
I think there are some very
important times when it's useful.

13
00:00:33.440 --> 00:00:35.750
So I'm gonna compare
the usage of these two.

14
00:00:35.750 --> 00:00:39.610
How many of you have heard this before,
double equals checks the value and

15
00:00:39.610 --> 00:00:41.719
triple equals checks the value and
the type?

16
00:00:43.040 --> 00:00:44.390
Anybody heard that before?

17
00:00:44.390 --> 00:00:46.030
As the description for what's going on.

18
00:00:46.030 --> 00:00:51.940
This is the most common man,
if you will, description for this.

19
00:00:51.940 --> 00:00:54.000
Unfortunately, it's false.

20
00:00:54.000 --> 00:00:57.220
That is not at all the difference
between those two operators.

21
00:00:57.220 --> 00:00:58.400
How do I know?

22
00:00:58.400 --> 00:00:59.260
Cuz I read the spec.

23
00:01:00.720 --> 00:01:05.490
Turns out, the difference between them
is the double equals allows coercion and

24
00:01:05.490 --> 00:01:07.300
the triple equals disallows coercion.

25
00:01:09.440 --> 00:01:11.160
They both test equality.

26
00:01:11.160 --> 00:01:14.070
One of them allows coercion to occur
first and one of them doesn't.

27
00:01:16.100 --> 00:01:19.569
And just that one simple fact
reframes this whole debate.

28
00:01:20.800 --> 00:01:26.310
It reframes this debate as a question of,
in this particular comparison, would it be

29
00:01:26.310 --> 00:01:31.880
useful or helpful for me, or more readable
for me, to allow coercion to occur?

30
00:01:31.880 --> 00:01:33.110
If so, use double equals.

31
00:01:34.530 --> 00:01:39.560
In this particular comparison,
would a coercion be troublesome,

32
00:01:39.560 --> 00:01:41.700
would it be problematic for me?

33
00:01:41.700 --> 00:01:42.830
If so, don't allow coercion.

34
00:01:44.300 --> 00:01:47.110
Avoid the double equals and
use triple equals instead.

35
00:01:47.110 --> 00:01:50.640
The question should not be which one
is right and which one is wrong?

36
00:01:50.640 --> 00:01:51.470
What does Linter say?

37
00:01:51.470 --> 00:01:54.600
The question is, for this statement,
for this comparison,

38
00:01:54.600 --> 00:01:57.770
which one is the more appropriate action,
coercion or not?

39
00:01:59.010 --> 00:02:01.250
We've already established
that coercion is useful,

40
00:02:01.250 --> 00:02:06.570
we've already established that coercion
can sometimes make code more readable.

41
00:02:06.570 --> 00:02:10.920
So you just have to decide if this
particular comparison could benefit from

42
00:02:10.920 --> 00:02:12.172
the coercion or not.

43
00:02:12.172 --> 00:02:13.747
Everybody with me?

44
00:02:15.464 --> 00:02:17.980
&gt;&gt; Kyle Simpson: Here's the spec for
the double equals,

45
00:02:17.980 --> 00:02:23.270
it happens to be referred to as the
Abstract Equality Comparison algorithm.

46
00:02:23.270 --> 00:02:26.570
This is the entirety of them,
that's really it.

47
00:02:26.570 --> 00:02:30.870
This thing that you've been taught as this
black magic box that can't possibly learn,

48
00:02:30.870 --> 00:02:35.860
is ten lines long, and
most of it is spec fluff, okay?

49
00:02:35.860 --> 00:02:38.000
You could spend ten
minutes reading this and

50
00:02:38.000 --> 00:02:41.870
be an expert on this algorithm
better than 99.99% of your peers.

51
00:02:41.870 --> 00:02:48.030
And that's all I did was read the spec,
shocking as it sounds.

52
00:02:48.030 --> 00:02:49.160
It's actually pretty straightforward.

53
00:02:50.930 --> 00:02:54.470
Right here on the very first item,
number 1,

54
00:02:54.470 --> 00:03:00.190
we see exactly what I was talking about,
which is that it checks the type.

55
00:03:00.190 --> 00:03:02.720
Wait a minute, why is the double
equals checking the type?

56
00:03:04.160 --> 00:03:06.790
Cuz it turns out both
of them check the type.

57
00:03:06.790 --> 00:03:11.611
It's just that they differ on what
they do with that information, okay?

58
00:03:12.883 --> 00:03:15.740
&gt;&gt; Kyle Simpson: Now somebody was
asking online about the null.

59
00:03:15.740 --> 00:03:19.970
You'll see items 2 and 3 specifically
call out null and undefined.

60
00:03:19.970 --> 00:03:22.710
They say if one of them's null and the
other one's undefined, or one of them's

61
00:03:22.710 --> 00:03:26.510
undefined and the other one's null,
if that's the case, return true.

62
00:03:26.510 --> 00:03:30.770
In other words, make null and undefined
coercively equal to each other, and

63
00:03:30.770 --> 00:03:32.190
to no other values in the language.

64
00:03:32.190 --> 00:03:36.900
That turns out to be a really useful fact,
actually.

65
00:03:36.900 --> 00:03:39.790
One of my most favorite
facts about JavaScript,

66
00:03:39.790 --> 00:03:44.610
because I don't like the confusion of
having two different empty values,

67
00:03:44.610 --> 00:03:45.760
I find that to be frustrating.

68
00:03:47.070 --> 00:03:51.160
What this means is I can treat null and
undefined as coercively equivalent.

69
00:03:52.440 --> 00:03:53.830
I don't have to have two empty values.

70
00:03:54.880 --> 00:03:59.051
Regardless of whether it's null or
undefined, I can allow coercion to hide

71
00:03:59.051 --> 00:04:02.451
that unneccessary detail,
thereby making my code simpler.

72
00:04:06.651 --> 00:04:10.970
&gt;&gt; Kyle Simpson: I see some skeptical
looks on faces, that's okay.

73
00:04:10.970 --> 00:04:13.530
You're gonna get a chance in a moment
to work on an exercise where you get to

74
00:04:13.530 --> 00:04:14.520
practice this yourself.

75
00:04:15.680 --> 00:04:20.110
And remember I mentioned earlier,
this algorithm prefers numeric comparison.

76
00:04:20.110 --> 00:04:21.174
Here's where we see that.

77
00:04:23.541 --> 00:04:25.362
&gt;&gt; Kyle Simpson: If the type
of one is a number and

78
00:04:25.362 --> 00:04:30.860
the type of the other is a string, make
the one that's not a number into a number.

79
00:04:30.860 --> 00:04:32.040
We just see that over and over again.

80
00:04:33.630 --> 00:04:38.620
There is a default preference
to compare numbers.

81
00:04:38.620 --> 00:04:41.230
That doesn't override the null and
undefined as we saw but

82
00:04:41.230 --> 00:04:45.810
it does say if we have non-null
non-undefined primitives,

83
00:04:45.810 --> 00:04:48.420
turn them into numbers cuz number
comparison is more efficient.

84
00:04:50.250 --> 00:04:52.130
Weather or not it's more efficient,

85
00:04:52.130 --> 00:04:57.230
it's also a fact that once you learn will
make this algorithm more predictable,

86
00:04:57.230 --> 00:05:00.990
even if you don't like the outcome,
at least it's more predictable.

87
00:05:02.980 --> 00:05:03.490
You follow that?

88
00:05:04.550 --> 00:05:07.760
Even if you disagree with it,
at least you move it out of the realm

89
00:05:07.760 --> 00:05:11.990
of being an unknown to being
in the realm of being a known.

90
00:05:11.990 --> 00:05:13.720
I know what it's gonna do.

91
00:05:13.720 --> 00:05:15.583
It's gonna compare them as numbers.

92
00:05:21.657 --> 00:05:22.830
&gt;&gt; Kyle Simpson: So
here are some examples.

93
00:05:22.830 --> 00:05:24.520
I got an empty array and an empty string.

94
00:05:24.520 --> 00:05:27.850
And that should be some warning
bells that tell me don't use ==,

95
00:05:27.850 --> 00:05:30.700
cuz here the coercion would be dangerous.

96
00:05:30.700 --> 00:05:34.201
Avoid line 3, do line 6 instead.

97
00:05:34.201 --> 00:05:38.448
Make the comparison with triple, okay?

98
00:05:38.448 --> 00:05:41.890
I got a 0 and
an empty string on lines 10 and 11.

99
00:05:41.890 --> 00:05:44.070
Avoid double equals,
that's a warning sign.

100
00:05:45.290 --> 00:05:49.146
Avoid double equals,
use triple equals like line 14.

101
00:05:54.921 --> 00:05:57.791
&gt;&gt; Kyle Simpson: But
what about cases where it can be useful?

102
00:06:00.271 --> 00:06:01.900
&gt;&gt; Kyle Simpson: How about this one?

103
00:06:01.900 --> 00:06:05.350
You start off with a value that may or
may not be string 3 or the number 3,

104
00:06:05.350 --> 00:06:10.730
and you want to pass which
ever one of those two it is.

105
00:06:10.730 --> 00:06:17.720
Your first option is line 2,
which is to say, === 3 or ===, quote, 3.

106
00:06:17.720 --> 00:06:20.860
Now, there's no question that
that line is more explicit.

107
00:06:22.630 --> 00:06:25.960
But when we compare that line to line 6,

108
00:06:25.960 --> 00:06:31.020
line 6 allows coercion to occur,
where line 2 does not.

109
00:06:33.300 --> 00:06:35.182
So my question to you is,

110
00:06:35.182 --> 00:06:39.588
which one of those two lines
is on the whole more readable?

111
00:06:39.588 --> 00:06:43.755
You make your own determination but I
would argue that line 6 is more readable.

112
00:06:43.755 --> 00:06:47.800
Because for
the purposes of that decision making,

113
00:06:47.800 --> 00:06:52.700
the actual underlying value type
is not a relevant fact to me.

114
00:06:54.240 --> 00:06:57.710
The only thing that matters to me is that,
it's one of the two 3s.

115
00:06:59.460 --> 00:07:03.120
And I'm allowing coercion to hide
the rest of that unnecessary detail.

116
00:07:05.000 --> 00:07:08.160
Remember I said earlier that
the most readable code is code I

117
00:07:08.160 --> 00:07:09.520
didn't have to read.

118
00:07:09.520 --> 00:07:10.240
I don't need to read

119
00:07:10.240 --> 00:07:13.240
two different comparisons when
one comparison will suffice.

120
00:07:13.240 --> 00:07:18.360
And there is absolutely no corner
cases here to be worried about.

121
00:07:18.360 --> 00:07:22.216
Cuz I know it is either going to be 3 or
string 3, so it's totally safe for

122
00:07:22.216 --> 00:07:24.657
me to use a double equals and
simplify my code.

123
00:07:26.937 --> 00:07:29.500
&gt;&gt; Kyle Simpson: Now that's
just one little micro example.

124
00:07:29.500 --> 00:07:32.240
Null and undefined are another example.

125
00:07:32.240 --> 00:07:35.360
Remember I said, null and undefined
are coercively equal to each other.

126
00:07:35.360 --> 00:07:40.090
I can do a comparison check of ==null
like line 7 and it will catch the case of

127
00:07:40.090 --> 00:07:44.969
null or undefined like line 2, but
it will not catch any other corner cases.

128
00:07:46.420 --> 00:07:48.490
So I can either say,
double equal to null or

129
00:07:48.490 --> 00:07:51.566
I can say triple equal to null,
or triple equal to undefined.

130
00:07:53.260 --> 00:07:56.480
Do I really want to make it obvious to
the the reader of my code that there is

131
00:07:56.480 --> 00:07:59.500
two different empty values
to be concerned about?

132
00:07:59.500 --> 00:08:01.970
How about hide that
unnecessary information.

133
00:08:03.390 --> 00:08:07.430
Now what I'm getting at here is
that those are my decisions,

134
00:08:07.430 --> 00:08:12.650
they're my subjective decisions that
that improves those comparisons.

135
00:08:12.650 --> 00:08:16.980
And these are just small little examples
plucked out of much larger patterns.

136
00:08:19.190 --> 00:08:23.600
The only thing that I want you to do is
to walk away from this discussion saying,

137
00:08:23.600 --> 00:08:26.460
I'm gonna think about it critically,
that's it.

138
00:08:28.000 --> 00:08:30.200
I'm going to think about it critically and
make those decisions.

139
00:08:30.200 --> 00:08:33.210
As opposed to, I'm just going to keep
on doing the same thing I've always

140
00:08:33.210 --> 00:08:35.380
done because it doesn't matter.

141
00:08:35.380 --> 00:08:35.890
It does matter.

142
00:08:36.930 --> 00:08:39.730
The way we choose to express
our code does matter.

143
00:08:39.730 --> 00:08:44.020
And understanding how to do the code is
the first step to expressing it better.

144
00:08:45.290 --> 00:08:50.310
&gt;&gt; Speaker 2: So, in this particular case,
it comes down to style and the preference

145
00:08:50.310 --> 00:08:56.460
of the team really, rather than-
&gt;&gt; Kyle Simpson: I'm

146
00:08:56.460 --> 00:08:58.710
not sure I would totally
label this as style but

147
00:08:58.710 --> 00:09:04.510
it definitely comes down to
idiomatic decision for the team.

148
00:09:04.510 --> 00:09:07.420
Is the team willing to
say that we communicate

149
00:09:07.420 --> 00:09:10.680
better by hiding unnecessary type
information in these places, or

150
00:09:10.680 --> 00:09:13.450
is the team willing to
say we wanna be explicit?

151
00:09:13.450 --> 00:09:16.820
If your team sits down and
has a conversation about that and

152
00:09:16.820 --> 00:09:18.440
weighs the pros and cons.

153
00:09:18.440 --> 00:09:22.550
And you end up saying, we wanna be more
explicit about it, you have my blessing.

154
00:09:22.550 --> 00:09:25.480
But if your team just says, well,
that's what the Linter tells us.

155
00:09:25.480 --> 00:09:27.080
To me, that's not a sufficient standard.

156
00:09:27.080 --> 00:09:30.562
Does that help?

157
00:09:30.562 --> 00:09:32.049
I'm not telling you what to conclude,

158
00:09:32.049 --> 00:09:34.580
I'm just telling you that you should
think about it and debate it.

