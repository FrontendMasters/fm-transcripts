WEBVTT

1
00:00:00.000 --> 00:00:01.798
&gt;&gt; Kyle Simpson: Let's
check some understanding.

2
00:00:01.798 --> 00:00:05.440
What type of scoping rule, or
rules, does JavaScript have?

3
00:00:05.440 --> 00:00:07.571
&gt;&gt; Speaker 2: Function scope and
lexical scope, right?

4
00:00:07.571 --> 00:00:09.988
&gt;&gt; Kyle Simpson: Lexical scope,
that's the model, there's only one.

5
00:00:09.988 --> 00:00:11.841
Function scope is the same
thing as lexical scope.

6
00:00:11.841 --> 00:00:15.542
Dynamic scope doesn't actually
exist in JavaScript, but

7
00:00:15.542 --> 00:00:18.659
it does exist in a few esoteric languages,
okay?

8
00:00:18.659 --> 00:00:19.317
So there's just lexical scope.

9
00:00:19.317 --> 00:00:26.995
What are three different ways that
you can create a new scoped variable?

10
00:00:31.212 --> 00:00:33.566
&gt;&gt; Speaker 2: Put a let, or-
&gt;&gt; Kyle Simpson: You can do a let,

11
00:00:33.566 --> 00:00:36.239
that would create a new
variable inside of some scope.

12
00:00:37.510 --> 00:00:38.590
&gt;&gt; Speaker 2: Var.

13
00:00:38.590 --> 00:00:42.498
&gt;&gt; Kyle Simpson: Var inside of a function,
like we can make an iffy or a function and

14
00:00:42.498 --> 00:00:43.931
make a var inside of it.

15
00:00:46.107 --> 00:00:48.269
&gt;&gt; Kyle Simpson: [CROSSTALK]
There one is tricky.

16
00:00:48.269 --> 00:00:51.590
That's the same thing,
passing in an argument to an iffy.

17
00:00:51.590 --> 00:00:53.140
&gt;&gt; Speaker 2: Function declaration.

18
00:00:53.140 --> 00:00:53.692
&gt;&gt; Kyle Simpson: Same thing,

19
00:00:53.692 --> 00:00:56.609
we have a parameter list that's
the same thing as a var declaration.

20
00:00:58.893 --> 00:00:59.773
&gt;&gt; Kyle Simpson: How
about the catch clause?

21
00:00:59.773 --> 00:01:03.614
The error in the catch clause
creates a new variable.

22
00:01:06.664 --> 00:01:08.604
&gt;&gt; Kyle Simpson: Let's review
from earlier in the course.

23
00:01:08.604 --> 00:01:11.618
What is the difference between
undeclared and undefined,

24
00:01:11.618 --> 00:01:13.920
now that we fully
understand lexical scope?

25
00:01:13.920 --> 00:01:17.442
What's the difference between
undeclared and undefined?

26
00:01:21.235 --> 00:01:22.776
&gt;&gt; Speaker 2: Undeclared,
it's never been declared.

27
00:01:22.776 --> 00:01:25.913
&gt;&gt; Kyle Simpson: It's never been declared
in any scope we have access to, exactly.

28
00:01:25.913 --> 00:01:27.007
What about undefined?

29
00:01:27.007 --> 00:01:30.275
&gt;&gt; Speaker 2: It's not been declared but
it doesn't [CROSSTALK]

30
00:01:30.275 --> 00:01:31.094
&gt;&gt; Kyle Simpson: It has been declared

31
00:01:31.094 --> 00:01:31.675
in the scope.

32
00:01:31.675 --> 00:01:32.247
&gt;&gt; Speaker 2: It doesn't
currently have a value.

33
00:01:32.247 --> 00:01:34.670
&gt;&gt; Kyle Simpson: But
does not currently have a value.

34
00:01:34.670 --> 00:01:36.570
Right, does not currently have a value.

35
00:01:36.570 --> 00:01:38.035
All right.

36
00:01:38.035 --> 00:01:41.311
All right, exercise #2,
now, read the read me,

37
00:01:41.311 --> 00:01:45.941
cuz it describes to you exactly what
to do, don't skip over that detail.

38
00:01:45.941 --> 00:01:49.518
But in exercise #2, your task is
to take what we've learned about

39
00:01:49.518 --> 00:01:52.920
naming our function expressions and
using block scoping.

40
00:01:52.920 --> 00:01:56.200
Take what you know now about
lexical scope and improve the code.

41
00:01:56.200 --> 00:02:00.426
So we're not adding any new features,
we're just improving the code by usage of

42
00:02:00.426 --> 00:02:04.234
block scoping, creating explicit scopes,
that sort of stuff, okay?

43
00:02:04.234 --> 00:02:08.437
Shouldn't be more than about five or
eight lines of code that you'll write or

44
00:02:08.437 --> 00:02:13.028
change to do this, so we'll give you about
five minutes to work on the exercise, and

45
00:02:13.028 --> 00:02:14.861
then talk through the solution.

46
00:02:14.861 --> 00:02:18.317
I wanna point out a little resource
that may not have been obvious if

47
00:02:18.317 --> 00:02:19.933
you looked at the file system.

48
00:02:19.933 --> 00:02:23.946
But in the exercise folder, not only do
I provide the solution file for each of

49
00:02:23.946 --> 00:02:28.363
these exercises, which by the way, there's
not always only one right way, okay?

50
00:02:28.363 --> 00:02:33.523
So if yours differs from it,
don't feel weird or whatever.

51
00:02:33.523 --> 00:02:35.740
There's multiple ways to approach it,

52
00:02:35.740 --> 00:02:38.615
this just represents one
good way of going about it.

53
00:02:38.615 --> 00:02:43.591
But in addition to that, what I also
provided was a diff between the exercise

54
00:02:43.591 --> 00:02:49.430
file and the solution file in each of
those directories, it's called diff.txt.

55
00:02:49.430 --> 00:02:54.086
And that's just the side by side diff
output from comparing those two files.

56
00:02:54.086 --> 00:03:00.155
So for example,
if I open up the diff here, you'll notice,

57
00:03:00.155 --> 00:03:05.285
and of course,
I need to turn off my word wrap here.

58
00:03:05.285 --> 00:03:08.025
You notice that I have
a side-by-side diff going.

59
00:03:08.025 --> 00:03:14.842
It might be easier to look at this in VI
or in the terminal or something like that.

60
00:03:14.842 --> 00:03:19.136
Seems like my spacing and
my editor is going weird here.

61
00:03:19.136 --> 00:03:22.207
I don't know why my editor is
not looking at things correctly.

62
00:03:22.207 --> 00:03:26.289
Look at it in your console,
[COUGH] in VI or something like that, or

63
00:03:26.289 --> 00:03:28.100
count the output of it.

64
00:03:28.100 --> 00:03:30.508
But that should be a resource for
you to be able to look and

65
00:03:30.508 --> 00:03:33.901
check to make sure that you addressed
each of the things that I addressed, so.

