WEBVTT

1
00:00:00.530 --> 00:00:01.252
&gt;&gt; Kyle: So now let's look at some code.

2
00:00:01.252 --> 00:00:04.790
And here's where I'm gonna
start to diagram some stuff.

3
00:00:04.790 --> 00:00:07.900
And don't worry about
copying this diagram because

4
00:00:07.900 --> 00:00:11.420
this diagram shows up in your
slides a little bit later.

5
00:00:11.420 --> 00:00:13.726
So don't worry about copying this down.

6
00:00:13.726 --> 00:00:17.190
What I wanna do is show you
how each line of this code

7
00:00:18.190 --> 00:00:22.360
conceptually gets laid
out in a diagram way.

8
00:00:22.360 --> 00:00:26.300
So I'm gonna go line by line through
the code and draw it in a diagram form.

9
00:00:26.300 --> 00:00:29.290
But don't worry, the finished diagram
which will look a lot better than my white

10
00:00:29.290 --> 00:00:33.730
boarding skills, that finished diagram
is in your slides in a few slides, okay?

11
00:00:35.130 --> 00:00:39.870
To first begin to diagram this, I need to
address that there's a line 0 environment.

12
00:00:39.870 --> 00:00:42.780
There's some stuff that exists
before our program even runs.

13
00:00:44.340 --> 00:00:48.870
And that part I'm going to draw a dotted
line and draw some stuff above it.

14
00:00:48.870 --> 00:00:53.900
So let me draw a dotted line
here across the top, and

15
00:00:53.900 --> 00:00:59.652
above this dotted line I want to
create the line 0 environment.

16
00:00:59.652 --> 00:01:03.080
I wanna talk about what exists
before our program runs.

17
00:01:03.080 --> 00:01:08.940
You remember earlier in the workshop
we talked about a capital O Object.

18
00:01:08.940 --> 00:01:14.282
And I'm gonna represent functions,
I'm sorry a capital O Object function.

19
00:01:14.282 --> 00:01:19.160
I'm gonna represent functions
as circles in this diagram, so

20
00:01:19.160 --> 00:01:22.390
here's this capital O Object function.

21
00:01:26.150 --> 00:01:28.800
&gt;&gt; Kyle: That's the capital
O Object function.

22
00:01:28.800 --> 00:01:31.880
It exists before our program runs.

23
00:01:31.880 --> 00:01:33.970
There's another entity that exists.

24
00:01:35.090 --> 00:01:39.372
&gt;&gt; Kyle: I'm gonna represent
it as the square or rectangle,

25
00:01:39.372 --> 00:01:43.550
whatever you wanna call it,
it's an object.

26
00:01:43.550 --> 00:01:45.310
It's not a function it's an object.

27
00:01:45.310 --> 00:01:49.930
So functions will be circles,
objects will be squares/rectangles.

28
00:01:49.930 --> 00:01:53.740
Now this thing is a really
important entity in JavaScript, but

29
00:01:53.740 --> 00:01:55.040
it does not have a good name.

30
00:01:56.720 --> 00:01:59.790
Like the most important object in all of
JavaScript and we don't have a good name

31
00:01:59.790 --> 00:02:05.749
for it, so we refer to it,
&gt;&gt; Kyle: Based

32
00:02:05.749 --> 00:02:08.790
on the property that links to it.

33
00:02:10.515 --> 00:02:11.492
&gt;&gt; Kyle: And in particular,

34
00:02:11.492 --> 00:02:16.365
that property is called,
&gt;&gt; Kyle: .prototype.

35
00:02:19.460 --> 00:02:23.598
&gt;&gt; Kyle: There's a property from
the Object function to this other object,

36
00:02:23.598 --> 00:02:26.700
this really important thing that exists.

37
00:02:26.700 --> 00:02:28.070
And because we don't have a good name for

38
00:02:28.070 --> 00:02:31.504
it we like to refer to
it as object.prototype.

39
00:02:31.504 --> 00:02:35.730
&gt;&gt; Kyle: Now on object.prototype
there's a bunch of really useful stuff,

40
00:02:35.730 --> 00:02:40.250
stuff we've already seen, like two
string and value of and so forth, so

41
00:02:40.250 --> 00:02:44.030
there's a bunch of really
useful contents on that object.

42
00:02:44.030 --> 00:02:46.421
It's the most important
object in all of JavaScript.

43
00:02:46.421 --> 00:02:53.020
But we don't have a good name for it,
so we refer to it as object.prototype.

44
00:02:53.020 --> 00:02:57.939
Now here's one other entity here, or
actually not an entity, but a linkage.

45
00:02:59.100 --> 00:03:00.530
It goes in the other direction.

46
00:03:04.090 --> 00:03:09.340
&gt;&gt; Kyle: And that property has
a much more confusing name to it.

47
00:03:09.340 --> 00:03:12.390
Confusing because it's gonna try to
convince you that there's something

48
00:03:12.390 --> 00:03:13.130
there that isn't.

49
00:03:14.400 --> 00:03:18.305
This property is referred
to as .constructor.

50
00:03:21.300 --> 00:03:26.505
&gt;&gt; Kyle: Now that property name sure
does a really good job of implying

51
00:03:26.505 --> 00:03:31.520
that the object was constructed
by the function, right?

52
00:03:32.866 --> 00:03:36.810
Except it wasn't,
it was not constructed by the function,

53
00:03:36.810 --> 00:03:41.230
but it sure looks like it was and
constructor seems to imply that it was.

54
00:03:41.230 --> 00:03:43.770
Constructor seems to
imply that this function

55
00:03:43.770 --> 00:03:48.810
has some kind of special relationship
to the thing, like was constructed by.

56
00:03:48.810 --> 00:03:53.850
It doesn't,
this name constructor here is no more

57
00:03:53.850 --> 00:03:58.452
meaningful in a real sense in JavaScript
than if they'd called it .foobar.

58
00:04:00.870 --> 00:04:03.277
&gt;&gt; Kyle: But
because they called it .constructor,

59
00:04:03.277 --> 00:04:07.320
it actually leads people to conclude
things that aren't actually true.

60
00:04:09.600 --> 00:04:12.060
All right, that's our line 0 environment.

61
00:04:12.060 --> 00:04:14.390
Now we get to line 1 of our code.

62
00:04:14.390 --> 00:04:16.268
We have a foo function, so
we're gonna need a circle.

63
00:04:16.268 --> 00:04:20.905
So line 1 creates a circle and

64
00:04:20.905 --> 00:04:24.990
we label that circle Foo.

65
00:04:29.890 --> 00:04:33.100
Line 1 is declared a function and
we made it and made a circle.

66
00:04:34.380 --> 00:04:38.760
In addition, line 1 has done
something that's not obvious.

67
00:04:38.760 --> 00:04:40.530
It's created another entity.

68
00:04:45.289 --> 00:04:50.170
&gt;&gt; Kyle: It's created an object,
it's kind of an important object.

69
00:04:50.170 --> 00:04:52.294
We don't really have a good name for
it, so

70
00:04:52.294 --> 00:04:54.840
you can probably guess
where I'm going with this.

71
00:04:54.840 --> 00:04:58.560
We're gonna refer to it by
the property that points to it.

72
00:04:58.560 --> 00:05:00.530
There's a property that
points from there to there.

73
00:05:02.693 --> 00:05:04.628
&gt;&gt; Kyle: And
guess what that property's called?

74
00:05:04.628 --> 00:05:06.789
&gt;&gt; Speaker 2: .prototype.

75
00:05:06.789 --> 00:05:09.942
&gt;&gt; Kyle: .prototype.

76
00:05:13.601 --> 00:05:16.645
&gt;&gt; Kyle: So we don't have a good name for
this object, but

77
00:05:16.645 --> 00:05:19.104
we just refer to it as foo.prototype.

78
00:05:20.150 --> 00:05:23.520
Which is super inconvenient and weird,
but let's just go with it, okay?

79
00:05:24.570 --> 00:05:26.870
There's another thing
that was created here.

80
00:05:31.383 --> 00:05:34.350
&gt;&gt; Kyle: A property that points
back in the other direction.

81
00:05:34.350 --> 00:05:35.872
I bet you can guess
what that one's called.

82
00:05:35.872 --> 00:05:37.440
&gt;&gt; Speaker 2: Constructor.

83
00:05:37.440 --> 00:05:39.385
&gt;&gt; Kyle: .constructor.

84
00:05:39.385 --> 00:05:46.834
That has also no more meaning to it
than if they'd called it .foo bar.

85
00:05:46.834 --> 00:05:52.808
Because this object was not
constructed by this function

86
00:05:52.808 --> 00:05:59.411
even though it sort of implies
that's my constructor, okay?

87
00:05:59.411 --> 00:06:00.490
Yeah.

88
00:06:00.490 --> 00:06:02.881
&gt;&gt; Speaker 2: Does this
happen on line 1 or line 8?

89
00:06:02.881 --> 00:06:04.820
&gt;&gt; Kyle: This is all happening on line 1.

90
00:06:04.820 --> 00:06:09.310
&gt;&gt; Speaker 2: So any function,
even if it's not a constructor function,

91
00:06:09.310 --> 00:06:14.490
just like a regular function,
will have an object called prototype?

92
00:06:14.490 --> 00:06:20.680
&gt;&gt; Kyle: Yep, exactly, this is all line 1.

93
00:06:20.680 --> 00:06:23.689
As a matter of fact,
there's one other thing that line 1 does.

94
00:06:25.499 --> 00:06:33.020
&gt;&gt; Kyle: There's a relationship between
that object and object.prototype.

95
00:06:33.020 --> 00:06:37.736
There's a linkage between foo.prototype
and object.prototype, and

96
00:06:37.736 --> 00:06:40.860
I haven't fully described what that
linkage is, but we'll come back to it.

97
00:06:42.925 --> 00:06:44.220
&gt;&gt; Kyle: So that's line 1.

98
00:06:44.220 --> 00:06:45.330
Now we move to line 4.

99
00:06:45.330 --> 00:06:46.740
We'll come back to line 2 later.

100
00:06:46.740 --> 00:06:47.450
We come to line 4.

101
00:06:47.450 --> 00:06:52.203
And you'll notice that I just start
referencing that arbitrarily named,

102
00:06:52.203 --> 00:06:55.240
weirdly named foo.prototype thing.

103
00:06:55.240 --> 00:06:58.010
And what I do is I add a property
to it called identify.

104
00:06:58.010 --> 00:07:00.700
You see that?

105
00:07:00.700 --> 00:07:03.180
It actually doesn't matter that
it's a function in this case, so

106
00:07:03.180 --> 00:07:11.700
I'm just gonna write identify-
&gt;&gt; Kyle: As the contents of that object.

107
00:07:11.700 --> 00:07:13.710
We've added an identify to it.

108
00:07:15.561 --> 00:07:17.740
&gt;&gt; Kyle: We'll skip over line 5.

109
00:07:17.740 --> 00:07:21.510
Let's move to line 8,
that's where the fun really starts.

110
00:07:21.510 --> 00:07:27.420
Somebody look up in your notes, and
read for me item by item, the four

111
00:07:27.420 --> 00:07:31.330
things that happen when the new keyword
is put in front of a function call.

112
00:07:31.330 --> 00:07:34.910
Because I'm gonna diagram those
four things as they happen.

113
00:07:34.910 --> 00:07:38.080
What's the first thing that happens when
new is put in front of a function call?

114
00:07:38.080 --> 00:07:39.190
&gt;&gt; Speaker 2: It creates a new object.

115
00:07:39.190 --> 00:07:42.310
&gt;&gt; Kyle: It creates a brand new
empty object out of thin air.

116
00:07:43.470 --> 00:07:47.060
What's the second thing that
happens when new is in front of it?

117
00:07:47.060 --> 00:07:48.400
&gt;&gt; Speaker 3: The new object
gets linked to [INAUDIBLE].

118
00:07:48.400 --> 00:07:49.230
&gt;&gt; Kyle: It gets linked to.

119
00:07:49.230 --> 00:07:51.940
We haven't even described the link yet,
but let's draw it in.

120
00:07:57.518 --> 00:08:00.751
&gt;&gt; Kyle: What's the third thing that
happens when new is put in front

121
00:08:00.751 --> 00:08:01.859
of a function call?

122
00:08:05.990 --> 00:08:08.363
&gt;&gt; Speaker 4: The newly created object
is passed into the function call as-

123
00:08:08.363 --> 00:08:09.626
&gt;&gt; Kyle: Yes, it's passed into

124
00:08:09.626 --> 00:08:10.830
the function as this.

125
00:08:10.830 --> 00:08:14.050
So let's invoke the foo function and

126
00:08:14.050 --> 00:08:17.870
call as it's this keyword,
this newly created object.

127
00:08:17.870 --> 00:08:19.516
What do we do on line 2?

128
00:08:19.516 --> 00:08:23.510
We're adding a me property to it, right?

129
00:08:23.510 --> 00:08:24.840
So we're gonna put a me right here.

130
00:08:28.390 --> 00:08:29.280
What's the fourth and

131
00:08:29.280 --> 00:08:33.630
final thing that happens when new
shows up in front of a function call?

132
00:08:37.050 --> 00:08:39.459
&gt;&gt; Speaker 5: This context
is implicitly returned.

133
00:08:39.459 --> 00:08:42.941
&gt;&gt; Kyle: Because foo does
not return its own object,

134
00:08:42.941 --> 00:08:47.590
we assume that you meant to
say return this on line 2.5.

135
00:08:47.590 --> 00:08:53.196
So that object gets
returned back to line 8 and

136
00:08:53.196 --> 00:08:56.660
gets assigned the name A1.

137
00:08:56.660 --> 00:08:57.240
That's line 8.

138
00:08:57.240 --> 00:09:03.800
Does anybody feel roughly comfortable
with how I diagrammed line 8?

139
00:09:03.800 --> 00:09:06.740
So if you know line 8,
then I can just draw line 9 out.

140
00:09:16.710 --> 00:09:18.740
&gt;&gt; Kyle: That's line 9.

141
00:09:18.740 --> 00:09:20.410
Feeling okay so far?

142
00:09:21.940 --> 00:09:22.926
Let's move to line 11.

143
00:09:22.926 --> 00:09:26.480
On line 11,
I add another property directly to A2.

144
00:09:26.480 --> 00:09:30.070
So I'm putting a speak right here.

145
00:09:34.262 --> 00:09:38.074
&gt;&gt; Kyle: Now just looking at the diagram,
ignore the code for a minute, looking at

146
00:09:38.074 --> 00:09:42.084
this diagram, would you expect on this
diagram to be able to say A1.speak?

147
00:09:44.540 --> 00:09:49.097
Because when I say a2.speak
= when I assign something,

148
00:09:49.097 --> 00:09:53.197
I'm putting it directly on the object,
all right?

149
00:09:53.197 --> 00:09:57.258
That's a difference compared to what
we're about to see when we look at these

150
00:09:57.258 --> 00:09:57.890
linkages.

151
00:09:57.890 --> 00:10:01.290
I just wanna point out that assignment
here doesn't pay any attention to linkage.

152
00:10:01.290 --> 00:10:04.144
It just puts it directly on whatever
object you tell it to put it on.

153
00:10:04.144 --> 00:10:09.270
Okay, there's no relationship
between the two.

154
00:10:09.270 --> 00:10:13.936
Now if I were to call
something like a1.constructor,

155
00:10:13.936 --> 00:10:19.510
like I do on line 15,
does a1 have a constructor property on it?

156
00:10:23.660 --> 00:10:28.400
A lot of people think that the a1 object
does in fact have a constructor property.

157
00:10:28.400 --> 00:10:31.930
They think of that constructor
property as being sort of like a stamp

158
00:10:31.930 --> 00:10:34.080
that tells you where the object came from.

159
00:10:35.340 --> 00:10:38.200
But the diagram clearly shows
us that there is no such

160
00:10:38.200 --> 00:10:39.330
constructor property on it.

161
00:10:40.660 --> 00:10:42.777
So when we call a1.constructor,

162
00:10:42.777 --> 00:10:46.877
we first inspect this object to ask
if it has a constructor property.

163
00:10:46.877 --> 00:10:50.104
When we find out it does not
have a constructor property,

164
00:10:50.104 --> 00:10:54.758
there is a default behavior built into
JavaScript which has been there all along.

165
00:10:54.758 --> 00:10:57.990
You just might not have ever
heard it fully explained.

166
00:10:57.990 --> 00:11:00.250
It is called the prototype chain.

167
00:11:00.250 --> 00:11:03.430
What it will do is say,
okay, you're asking for

168
00:11:03.430 --> 00:11:05.690
something that does not
exist on this object.

169
00:11:05.690 --> 00:11:08.610
So what I'm going to do
is follow this linkage,

170
00:11:08.610 --> 00:11:10.500
which is called the prototype chain.

171
00:11:10.500 --> 00:11:14.850
I'm gonna go, do do do do do do do,
up to the next object in the chain, and

172
00:11:14.850 --> 00:11:18.640
ask to see if it has
a constructor property on it.

173
00:11:18.640 --> 00:11:19.140
Does it?

174
00:11:22.790 --> 00:11:24.500
&gt;&gt; Kyle: And where does it point?

175
00:11:24.500 --> 00:11:32.080
Foo, so we get the outcome
that a1.constructor is foo.

176
00:11:32.080 --> 00:11:36.620
Sure seems to be like we're suggesting
that a1 was constructed by foo, right?

177
00:11:38.880 --> 00:11:43.430
That's only a happy accident, but
we're trying to convince people, hey,

178
00:11:43.430 --> 00:11:47.550
this is a class system and this thing
was constructed by this other thing.

179
00:11:47.550 --> 00:11:48.830
If you squint at it and

180
00:11:48.830 --> 00:11:53.460
you don't ask any questions, you might
be able to convince yourself of that.

181
00:11:53.460 --> 00:11:55.420
But if you start asking
some critical questions,

182
00:11:55.420 --> 00:11:59.239
you will find out very quickly that
that whole house of cards falls apart.

183
00:12:01.250 --> 00:12:04.720
So it's only a happy accident that
a1.constructor points to foo.

184
00:12:04.720 --> 00:12:06.960
We'll see that fall apart
here in a few slides.

