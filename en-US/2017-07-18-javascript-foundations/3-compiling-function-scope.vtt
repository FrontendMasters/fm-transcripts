WEBVTT

1
00:00:00.300 --> 00:00:02.802
&gt;&gt; Kyle Simpson: Thanks very much
global scope, we've got a red marble in

2
00:00:02.802 --> 00:00:06.400
the bucket and we've got foo
sorted into the global scale.

3
00:00:06.400 --> 00:00:11.100
We continue compiling the code,
we come to line 3 and we say,

4
00:00:11.100 --> 00:00:14.949
hey global scope, I've got an identifier
called var, ever heard of him?

5
00:00:15.950 --> 00:00:16.825
What's the answer?

6
00:00:16.825 --> 00:00:17.526
&gt;&gt; Speaker 2: No.

7
00:00:17.526 --> 00:00:19.200
&gt;&gt; Kyle Simpson: Nope,
never heard of them.

8
00:00:19.200 --> 00:00:21.190
But now that you mention it,
I've got a bar.

9
00:00:21.190 --> 00:00:23.920
I sort that red marble
into that red bucket.

10
00:00:23.920 --> 00:00:26.250
Same scope,
we're still in the global scope.

11
00:00:26.250 --> 00:00:31.506
Now we have an identifier called foo,
and we have an identifier called bar.

12
00:00:31.506 --> 00:00:36.459
By the way, this identifier happens to
reference a formal function declaration.

13
00:00:36.459 --> 00:00:40.114
Since functions are kind important
cuz they're their own scope,

14
00:00:40.114 --> 00:00:44.616
lets go ahead a recursively step into that
function and that creates a new bucket,

15
00:00:44.616 --> 00:00:48.940
a blue bucket, and lets go talk about
the marbles that go into the blue bucket.

16
00:00:51.170 --> 00:00:54.704
So now we're in the scope of bar, we're
talking to a different scope manager.

17
00:00:54.704 --> 00:00:57.280
Now we're talking to the scope manager for
the blue bucket.

18
00:00:58.780 --> 00:01:03.300
And we again continue looking for
formal variable declarations.

19
00:01:03.300 --> 00:01:04.440
Hey, scope of bar.

20
00:01:04.440 --> 00:01:05.190
I'm on line 4.

21
00:01:05.190 --> 00:01:08.220
Hey scope of bar, I have a formal
declaration for a variable called foo.

22
00:01:08.220 --> 00:01:08.760
Ever heard of him?

23
00:01:08.760 --> 00:01:10.200
The answer is.

24
00:01:10.200 --> 00:01:10.750
&gt;&gt; Speaker 2: No.

25
00:01:10.750 --> 00:01:11.340
&gt;&gt; Kyle Simpson: No, but

26
00:01:11.340 --> 00:01:15.020
now that you mention it, let's put
that blue marble into the blue bucket.

27
00:01:16.740 --> 00:01:18.790
So now there's a foo in the blue bucket.

28
00:01:18.790 --> 00:01:23.670
That is important to note that that foo is
different from the foo we found on line 1,

29
00:01:23.670 --> 00:01:25.640
cuz these are different scopes.

30
00:01:25.640 --> 00:01:29.010
And I'm probably not telling you anything
by the way, that's surprising or

31
00:01:29.010 --> 00:01:29.900
groundbreaking.

32
00:01:29.900 --> 00:01:31.410
This is all intuitive stuff.

33
00:01:31.410 --> 00:01:34.450
It's just more formal and
rigorous than you're used to thinking.

34
00:01:34.450 --> 00:01:38.020
I promise there's a payoff
to that formality and rigor.

35
00:01:38.020 --> 00:01:41.730
It helps us avoid mistakes of
thinking that lead to later bugs.

36
00:01:42.900 --> 00:01:44.139
Just more formal and rigorous.

37
00:01:45.290 --> 00:01:46.590
Okay, so now we have two different foos.

38
00:01:46.590 --> 00:01:51.160
And by the way, there's a term for
having two different variables

39
00:01:51.160 --> 00:01:54.910
of the same name at different levels
of the scope, like we see there.

40
00:01:54.910 --> 00:01:58.199
There's a term for that,
and it's called shadowing.

41
00:01:58.199 --> 00:02:03.863
If, on line 4 and a half, or
even let's say, on line 3 and a half.

42
00:02:03.863 --> 00:02:08.758
If on line three and a half, in between
line 3 and 4, I said console.log foo,

43
00:02:08.758 --> 00:02:10.819
what do you think it would print?

44
00:02:16.649 --> 00:02:19.968
&gt;&gt; Kyle Simpson: On line 3 and
a half, if I said console.log foo,

45
00:02:19.968 --> 00:02:22.820
it's actually going to print undefined.

46
00:02:27.895 --> 00:02:30.315
&gt;&gt; Kyle Simpson: Because
this is a two pass system,

47
00:02:30.315 --> 00:02:36.890
we are handling the variable declarations
long before we ever do the execution.

48
00:02:36.890 --> 00:02:40.430
So, at the time that we register
a foo into the scope of bar,

49
00:02:40.430 --> 00:02:41.480
that's a compile time.

50
00:02:41.480 --> 00:02:43.680
We haven't paid any attention
to the console.log yet.

51
00:02:43.680 --> 00:02:45.140
That's execution.

52
00:02:45.140 --> 00:02:48.340
Later when we go to execute,
we're gonna come to line 3 and a half, and

53
00:02:48.340 --> 00:02:50.600
we're gonna be like,
I'm looking for a blue marble.

54
00:02:50.600 --> 00:02:51.800
Guess which one we're gonna find.

55
00:02:53.300 --> 00:02:55.040
The one that's in our nearest scope.

56
00:02:56.230 --> 00:02:58.974
You see your problem, when you all
just said it's gonna print out bar,

57
00:02:58.974 --> 00:03:01.147
your problem is you're
thinking top down single pass.

58
00:03:02.506 --> 00:03:04.850
&gt;&gt; Kyle Simpson: This happens all
the time, people run into these problems.

59
00:03:04.850 --> 00:03:08.628
When you try to simplify JavaScript
to something it doesn't do,

60
00:03:08.628 --> 00:03:11.659
big surprise you end up
misinterpreting your code.

61
00:03:13.260 --> 00:03:15.452
&gt;&gt; Kyle Simpson: So I am just trying to
help you think a little bit more like

62
00:03:15.452 --> 00:03:16.160
the engine does.

63
00:03:17.210 --> 00:03:22.170
&gt;&gt; Speaker 2: Now if the console.log was
lined 4 to 5, then there would be bars.

64
00:03:22.170 --> 00:03:23.515
&gt;&gt; Kyle Simpson: Then it would be bars.

65
00:03:23.515 --> 00:03:27.664
[CROSSTALK] What's that?

66
00:03:27.664 --> 00:03:30.316
&gt;&gt; Speaker 2: It will be undefined
&gt;&gt; Kyle Simpson: [INAUDIBLE] line 3

67
00:03:30.316 --> 00:03:30.908
and a half.

68
00:03:30.908 --> 00:03:35.490
&gt;&gt; Speaker 2: [CROSSTALK]
&gt;&gt; Kyle Simpson: What has been declared in

69
00:03:35.490 --> 00:03:36.441
that scope.

70
00:03:36.441 --> 00:03:37.509
It hasn't been given a value.

71
00:03:41.151 --> 00:03:45.419
&gt;&gt; Kyle Simpson: Had it not been declared,
Had line 4 not existed,

72
00:03:45.419 --> 00:03:49.499
then we clearly would have printed bar.

73
00:03:49.499 --> 00:03:51.940
We'll come back to that more of
that execution stuff in a moment.

74
00:03:51.940 --> 00:03:54.729
I just want to point out,
understanding how this

75
00:03:54.729 --> 00:03:59.020
processes from a compilation stuff
is important to avoid misconception.

76
00:04:00.600 --> 00:04:02.530
So now we have a blue
marble in that blue bucket,

77
00:04:02.530 --> 00:04:05.920
we have shadowed the one
in the outer scope.

78
00:04:05.920 --> 00:04:11.270
And that means that nowhere within bar,
no on line 3 and a half, not on line 4 and

79
00:04:11.270 --> 00:04:16.970
a half, nowhere inside of bar can we
lexically reference the foo from line 1,

80
00:04:16.970 --> 00:04:17.630
it is impossible.

81
00:04:19.520 --> 00:04:22.240
Once we shadow at compile time,

82
00:04:22.240 --> 00:04:27.440
it's impossible at run time to lexically
access something in an outer skelp,

83
00:04:27.440 --> 00:04:30.460
there's no way to lexically say,
I just want you to go one level of skill.

84
00:04:32.340 --> 00:04:36.730
There's a trick for accessing global
variables which is not lexical at all,

85
00:04:36.730 --> 00:04:40.900
it is the global variables at the same,
there are properties of the global object

86
00:04:40.900 --> 00:04:44.840
AKA window,
that correspond to the global variables.

87
00:04:44.840 --> 00:04:48.913
So technically on line 3 and
a half, you can say, window.foo and

88
00:04:48.913 --> 00:04:51.710
you'd get that quote bar value.

89
00:04:51.710 --> 00:04:56.160
But that's not a lexical thing, that's
just cheating because global variables

90
00:04:56.160 --> 00:04:57.789
are also global object properties.

91
00:04:59.070 --> 00:05:02.540
If we were 18 levels deep in the nesting,
and

92
00:05:02.540 --> 00:05:06.580
you wanted to access something from level
16 two levels up, that is not possible.

93
00:05:08.450 --> 00:05:09.190
If you do shadowing.

94
00:05:11.190 --> 00:05:13.170
So it doesn't mean shadowing is bad.

95
00:05:13.170 --> 00:05:15.304
Sometimes it's exactly what you want.

96
00:05:15.304 --> 00:05:19.190
Sometimes there's a descriptive variable
name for different purposes, and

97
00:05:19.190 --> 00:05:21.650
different scopes, and
it is entirely okay for you to shadow.

98
00:05:22.740 --> 00:05:26.472
Just know that if you do shadow, it means
that you can not access the line above.

99
00:05:30.680 --> 00:05:34.250
&gt;&gt; Kyle Simpson: So we've sorted that
blue marble into the blue bucket for bar.

100
00:05:34.250 --> 00:05:37.340
Notice that we are done
compiling the bar function.

101
00:05:37.340 --> 00:05:42.190
We finish and we recurse back
out to the outer global scope.

102
00:05:42.190 --> 00:05:45.050
And we continue looking for
formal declarations.

103
00:05:45.050 --> 00:05:49.790
Where's the next formal
declaration that we find?

104
00:05:49.790 --> 00:05:51.170
&gt;&gt; Speaker 2: We find it on line 7.

105
00:05:51.170 --> 00:05:54.360
We find a formal declaration for
an identifier called baz.

106
00:05:54.360 --> 00:05:57.370
So we say, hey global scope I have an
identifier called baz, ever heard of him?

107
00:05:57.370 --> 00:05:58.480
And the answer is?

108
00:05:58.480 --> 00:05:59.130
&gt;&gt; Kyle Simpson: No.

109
00:05:59.130 --> 00:05:59.830
&gt;&gt; Speaker 2: No.

110
00:05:59.830 --> 00:06:04.590
Cuz in that scope, we haven't seen a baz,
so we add baz into the green bucket.

111
00:06:04.590 --> 00:06:06.070
I'm sorry, into the red bucket.

112
00:06:06.070 --> 00:06:07.010
We're still in the global scale.

113
00:06:07.010 --> 00:06:09.540
We put a baz,
we put a red marble in there.

114
00:06:09.540 --> 00:06:14.430
Now the global scope has three
identifiers, foo, bar and baz in it.

115
00:06:14.430 --> 00:06:18.440
And we notice that baz happens to point to
a function, which gets its own scope, so

116
00:06:18.440 --> 00:06:21.150
let's step into that function and
process that scope.

117
00:06:23.120 --> 00:06:24.940
Have I lost anybody yet?

118
00:06:24.940 --> 00:06:29.030
It should be fairly intuitive, so
now we are in the scope of baz where we're

119
00:06:29.030 --> 00:06:33.940
talking to the green bucket,
that's gonna hold the contents of baz.

120
00:06:33.940 --> 00:06:35.797
And we go looking for formal declarations.

121
00:06:35.797 --> 00:06:39.166
Where do we find the next
formal declaration?

122
00:06:39.166 --> 00:06:40.149
&gt;&gt; Kyle Simpson: The parameter?

123
00:06:40.149 --> 00:06:41.592
&gt;&gt; Speaker 2: Line 7.

124
00:06:41.592 --> 00:06:43.635
It doesn't have a var keyword there.

125
00:06:43.635 --> 00:06:47.960
But parameters are in effect,
formal variable declarations.

126
00:06:49.900 --> 00:06:52.230
They create, for all intents and purposes,

127
00:06:52.230 --> 00:06:56.520
local variables, not technically but
for our purposes good enough.

128
00:06:57.950 --> 00:07:01.670
So foo is created as if it's a local
variable inside of the scope of baz.

129
00:07:03.210 --> 00:07:06.820
It's like, hey scope of baz, I have this
variable called foo, ever heard of him?

130
00:07:06.820 --> 00:07:08.905
And the answer is?

131
00:07:08.905 --> 00:07:10.218
&gt;&gt; Kyle Simpson: No.
&gt;&gt; Speaker 2: No.

132
00:07:10.218 --> 00:07:12.305
Now that question's really important,

133
00:07:12.305 --> 00:07:15.938
because remember earlier I sent in
strict mode, if we have a parameter,

134
00:07:15.938 --> 00:07:19.650
we have to check to make sure that we
haven't seen that parameter before.

135
00:07:19.650 --> 00:07:22.554
Because if we have, that's an error.

136
00:07:22.554 --> 00:07:25.775
So, if we were in strict mode and
we said hey scope of baz,

137
00:07:25.775 --> 00:07:30.290
I have a parameter called foo and baz is
like well, I already got one called foo.

138
00:07:30.290 --> 00:07:31.110
Then what do we do?

139
00:07:32.340 --> 00:07:33.410
We got to throw an error, right?

140
00:07:34.620 --> 00:07:37.430
So that's why that Q and
A that's going on is so important.

141
00:07:37.430 --> 00:07:38.780
division of responsibility.

142
00:07:41.210 --> 00:07:44.700
In this case, we don't have a foo yet
in the scope of baz, so we make a foo,

143
00:07:44.700 --> 00:07:46.640
we put a marble into the green bucket.

144
00:07:48.140 --> 00:07:50.925
Now, we go through the rest of
the contents of the baz function.

145
00:07:50.925 --> 00:07:55.013
[COUGH] Do we find any
more formal decoration?

146
00:08:00.510 --> 00:08:03.225
&gt;&gt; Speaker 2: Some of you may be
wondering, what's going on with line 9?

147
00:08:04.550 --> 00:08:07.440
Some of you may wonder,
is line 9 a declaration?

148
00:08:08.840 --> 00:08:13.380
Let's think about it from the perspective
of what the JavaScript compiler can

149
00:08:13.380 --> 00:08:14.560
be doing at this moment.

150
00:08:14.560 --> 00:08:16.240
What does it know, and
what does it not know?

151
00:08:17.520 --> 00:08:20.320
Line 9, when it finds a variable called,

152
00:08:20.320 --> 00:08:24.960
bam, it does not see the var key right
there, we can all agree with that, right?

153
00:08:26.160 --> 00:08:28.190
So what does it possibly know?

154
00:08:28.190 --> 00:08:31.890
Could it assume that we meant to
put a var there and we didn't?

155
00:08:33.350 --> 00:08:35.230
Well let's think about
the other possibilities.

156
00:08:35.230 --> 00:08:39.980
It is entirely possible,
that we might find a var bam on

157
00:08:39.980 --> 00:08:44.880
line 9 and a half, we don't know that yet
cuz we're on line 9 still.

158
00:08:46.000 --> 00:08:53.378
It's also possible we might find a var bam
on line 11, we haven't gotten there yet.

159
00:08:53.378 --> 00:08:57.911
It's also internally possible that we
might find a var bam in an entirely

160
00:08:57.911 --> 00:09:02.167
different file, because each file
gets to add to the global scope.

161
00:09:02.167 --> 00:09:06.325
They're all separate programs
that share the global scope, so

162
00:09:06.325 --> 00:09:08.900
the next file load might make a var bam.

163
00:09:08.900 --> 00:09:12.208
So at this moment when
we're processing line 9,

164
00:09:12.208 --> 00:09:17.430
can we say anything at all about bam
other than it's not a formal declaration?

165
00:09:18.930 --> 00:09:23.150
Can we imply or
assume where it is going to eventually be?

166
00:09:24.510 --> 00:09:25.060
And the answer is no.

167
00:09:26.560 --> 00:09:31.360
We don't know anything about line 9 other
than its not a formal declaration, and

168
00:09:31.360 --> 00:09:34.130
therefore we cannot
assume anything about it.

169
00:09:34.130 --> 00:09:37.290
So line 9 is no different than
line 8 from the perspective

170
00:09:37.290 --> 00:09:39.040
of the scope manager and the compiler.

171
00:09:41.400 --> 00:09:44.930
We can all say, well wait a minute,
I see the foo, but I don't see the bam.

172
00:09:44.930 --> 00:09:47.040
And we know the run time is
gonna do different stuff.

173
00:09:47.040 --> 00:09:50.220
But that's all having perspective
that the JavaScript compiler

174
00:09:50.220 --> 00:09:51.730
cannot have at that moment.

175
00:09:53.470 --> 00:09:57.480
At that moment, the only thing you can
do is say, it's not a declaration, so

176
00:09:57.480 --> 00:09:58.370
I'm not going to worry about it.

177
00:09:59.480 --> 00:10:02.990
I'm not gonna sort that
marble into a scope yet.

178
00:10:02.990 --> 00:10:03.940
We'll figure that out later.

179
00:10:07.206 --> 00:10:11.294
&gt;&gt; Speaker 2: Having finished the baz
function, we then continue and say,

180
00:10:11.294 --> 00:10:15.450
is there any more in this program for
us to compile?

181
00:10:15.450 --> 00:10:17.390
Finding that we're at
the end of this program,

182
00:10:17.390 --> 00:10:21.140
we're just gonna assume that maybe there's
some other stuff there that we don't see.

183
00:10:21.140 --> 00:10:23.220
But finding that we're at
the end of the program.

184
00:10:23.220 --> 00:10:24.930
We're now done withe
the compilation stuff.

185
00:10:26.640 --> 00:10:28.350
Of course the code has been generated.

186
00:10:28.350 --> 00:10:30.090
It's ready for it to execute.

187
00:10:30.090 --> 00:10:33.080
But the important part is that
all those scopes are sorted out.

188
00:10:35.050 --> 00:10:36.740
Everybody with me there?

189
00:10:36.740 --> 00:10:38.150
All those marbles.

190
00:10:38.150 --> 00:10:38.930
All those buckets.

191
00:10:38.930 --> 00:10:39.810
They're already sorted.

