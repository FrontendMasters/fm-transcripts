WEBVTT

1
00:00:00.310 --> 00:00:02.750
&gt;&gt; Kyle Simpson: Our final
unit of discussion for

2
00:00:02.750 --> 00:00:07.150
the workshop is object orienting.

3
00:00:07.150 --> 00:00:09.780
And I wanna make sure that we've

4
00:00:09.780 --> 00:00:14.040
fully get the right scope if you
will of what we're gonna talk about.

5
00:00:14.040 --> 00:00:16.940
So, let's look at the things
that we wanna address.

6
00:00:16.940 --> 00:00:18.963
We need to first address the this keyword.

7
00:00:18.963 --> 00:00:23.530
You're gonna get a chance to practice
that on your exercise in just a moment.

8
00:00:23.530 --> 00:00:26.720
But why don't we get a chance
to practice this keyword?

9
00:00:26.720 --> 00:00:30.840
But really, what we're getting out is we
need to understand the prototypes system

10
00:00:30.840 --> 00:00:35.190
cuz that's how people implement
object oriented code in JavaScript.

11
00:00:35.190 --> 00:00:38.060
Typically, they use the prototypes system.

12
00:00:38.060 --> 00:00:41.970
And we're gonna look at the pro's and
con's of that approach.

13
00:00:41.970 --> 00:00:46.360
We're gonna also look at the new class
key rid that was added in the ES6,

14
00:00:46.360 --> 00:00:49.260
we're gonna look at why the class
key word helps with some things but

15
00:00:49.260 --> 00:00:54.140
we're also gonna look at some problems
that the class keyword creates.

16
00:00:54.140 --> 00:01:00.210
Overall, the outcome of that discussion
is I don't use the class keyword and

17
00:01:00.210 --> 00:01:02.560
I don't recommend you do either.

18
00:01:02.560 --> 00:01:06.500
I know that there's a ton of people that
are like following all over themselves,

19
00:01:06.500 --> 00:01:08.550
excited about the class keyword.

20
00:01:08.550 --> 00:01:11.520
I think it was a bad idea
to add to the language.

21
00:01:11.520 --> 00:01:15.330
I think it actually created more
confusion rather than clearing it up.

22
00:01:15.330 --> 00:01:19.850
And it only appears to be useful
because it fixes a few syntactic issues

23
00:01:19.850 --> 00:01:23.060
while creating deeper conceptual problems.

24
00:01:23.060 --> 00:01:26.590
So my takeaway in that is that
I don't use the class keyword.

25
00:01:26.590 --> 00:01:28.020
As a matter of fact,

26
00:01:28.020 --> 00:01:32.070
I've never even taught the class
keyword all up in to this point.

27
00:01:32.070 --> 00:01:35.860
This is the first time I'm even
teaching it because I don't want to

28
00:01:35.860 --> 00:01:39.100
make it sound like I'm endorsing
that I think you should use it.

29
00:01:39.100 --> 00:01:42.980
But I also think it does you a disservice
if I don't explain what it's doing cuz

30
00:01:42.980 --> 00:01:45.960
you're likely to see this in
lots of code that you work with.

31
00:01:45.960 --> 00:01:47.400
So, I at least want you
to understand it but

32
00:01:47.400 --> 00:01:50.620
I'm not endorsing that you
should do class or any code.

33
00:01:50.620 --> 00:01:55.090
As a matter of fact, as we get
through this part of our discussion,

34
00:01:55.090 --> 00:01:58.320
I'm gonna be pointing out that I don't
think class oriented design belongs in

35
00:01:58.320 --> 00:01:59.400
JavaScript at all.

36
00:01:59.400 --> 00:02:02.610
As a design pattern,
it just doesn't belong.

37
00:02:02.610 --> 00:02:05.870
But I'm gonna replace it with something
that I think is a lot more natural.

38
00:02:05.870 --> 00:02:09.170
And that design pattern is the behavior
delegation design pattern.

39
00:02:09.170 --> 00:02:13.500
So rather than implementing inheritance
and using syntax or other kinds of tricks

40
00:02:13.500 --> 00:02:16.930
to do that, I think we should be going for
behavior delegation.

41
00:02:16.930 --> 00:02:21.170
The best way for me to describe the
comparison here, is to take the term OO,

42
00:02:21.170 --> 00:02:23.650
which we know means object oriented.

43
00:02:23.650 --> 00:02:26.460
Unfortunately, object oriented
really isn't object oriented,

44
00:02:26.460 --> 00:02:27.910
it's really class oriented.

45
00:02:28.930 --> 00:02:33.076
When people say OO,
they usually think of Java and C++.

46
00:02:33.076 --> 00:02:38.660
That's the traditional
classical class implementation.

47
00:02:38.660 --> 00:02:40.540
That's all about classes.

48
00:02:40.540 --> 00:02:44.996
Now, notably Alan Kay, the inventory of
the [LAUGH] concept said, when I invented

49
00:02:44.996 --> 00:02:49.660
object oriented, I did not have at
all in mind what they did with C++.

50
00:02:49.660 --> 00:02:53.900
But it doesn't really matter
what Alan Kay intended because

51
00:02:53.900 --> 00:02:57.900
most people that come to JavaScript come
to it through the path of Java or C++,

52
00:02:57.900 --> 00:03:02.100
and that colors their opinion that
classes are done a certain way.

53
00:03:03.150 --> 00:03:07.060
So we'll address what classes mean
from the perspective of most people's

54
00:03:07.060 --> 00:03:08.410
experience.

55
00:03:08.410 --> 00:03:11.630
And point out that OO is
really class oriented.

56
00:03:11.630 --> 00:03:13.890
So I need to show you, what is delegation?

57
00:03:13.890 --> 00:03:18.480
I need a catchy term for that, and
I can't use OO, so I used OLOO.

58
00:03:19.820 --> 00:03:23.050
This is a comparison between OO
which stands for object oriented but

59
00:03:23.050 --> 00:03:24.840
really means class oriented.

60
00:03:24.840 --> 00:03:29.850
And OLOO which means,
objects linked to other objects.

61
00:03:29.850 --> 00:03:33.730
Actually, OLOO is the real
true object oriented.

62
00:03:33.730 --> 00:03:37.990
It really is oriented only around
objects and not around classes.

63
00:03:37.990 --> 00:03:41.710
But unfortunately,
OO has already been taken, so OLOO.

64
00:03:42.820 --> 00:03:46.410
So that's where we're going with our
discussion the rest of the workshop.

