WEBVTT

1
00:00:00.550 --> 00:00:02.970
&gt;&gt; Kyle Simpson: So I referred to
this lexical scope several times.

2
00:00:02.970 --> 00:00:06.072
And that is the model by which
scopes are nested within each

3
00:00:06.072 --> 00:00:08.890
other that we described
earlier in this course.

4
00:00:08.890 --> 00:00:12.890
This process of putting a function in
scope and perhaps inside of another one.

5
00:00:12.890 --> 00:00:14.470
And referencing variables and

6
00:00:14.470 --> 00:00:18.000
accessing them outside of the scope,
that is the lexical scope model.

7
00:00:19.110 --> 00:00:22.740
I find it strange sometimes that
people suggest that JavaScript

8
00:00:22.740 --> 00:00:27.445
does not have lexical scope, where they
will claim that something like Java or

9
00:00:27.445 --> 00:00:29.670
C++ has lexical scope.

10
00:00:29.670 --> 00:00:32.320
Because from the perspective
of a compiler author,

11
00:00:32.320 --> 00:00:34.790
they absolutely have the same scope model.

12
00:00:34.790 --> 00:00:37.250
There are some nuances
that we'll talk about,

13
00:00:37.250 --> 00:00:39.526
mainly what we refer to as hoisting.

14
00:00:39.526 --> 00:00:43.880
There are some nuances that are slightly
different in terms of your expectation.

15
00:00:43.880 --> 00:00:46.450
But even those are not particularly
onerous to get your head around.

16
00:00:46.450 --> 00:00:48.680
It's just that most people
never actually learn it.

17
00:00:48.680 --> 00:00:51.865
So, it's just like when we talked about
coercion earlier in the course and said,

18
00:00:51.865 --> 00:00:55.450
you know, most people said it's
just too hard to learn coercion.

19
00:00:55.450 --> 00:00:57.940
So I don't even wanna learn it,
so it must be poorly designed.

20
00:00:57.940 --> 00:01:00.630
If you learn these rules it's
actually pretty straightforward.

21
00:01:00.630 --> 00:01:04.710
So I would stand firmly on the fact that
JavaScript absolutely has lexical scope.

22
00:01:06.350 --> 00:01:08.050
There is another model for scoping.

23
00:01:08.050 --> 00:01:11.950
I hinted at this earlier,
it's the dynamic scope model.

24
00:01:11.950 --> 00:01:14.770
And I wanted to quickly compare those two.

25
00:01:14.770 --> 00:01:18.290
So lexical scope,
you'll notice that I have a bar variable.

26
00:01:18.290 --> 00:01:21.700
And when I reference that
bar variable on line 5,

27
00:01:21.700 --> 00:01:25.700
the compiler has said, I know which
bucket you come from, it's from this one.

28
00:01:26.710 --> 00:01:29.510
So that reference again,
it's permanent, it's fixed.

29
00:01:29.510 --> 00:01:33.640
It's not gonna be like some dispatch
where we figure this out at runtime.

30
00:01:33.640 --> 00:01:36.540
There's a fixed relationship there and
it's never gonna change.

31
00:01:36.540 --> 00:01:39.410
No matter what you do with that baz
function, even if you pass it to other

32
00:01:39.410 --> 00:01:42.890
places, it's always gonna refer
to that exact same function.

33
00:01:42.890 --> 00:01:45.330
No matter how you call baz,
where it's called from,

34
00:01:45.330 --> 00:01:48.140
it'll always refer to that exact
same bar variable from line 2.

35
00:01:49.340 --> 00:01:52.240
That's a good nice
predictability to lexical scope.

36
00:01:52.240 --> 00:01:55.390
And I would say that's one of
the biggest benefits of lexical scope.

37
00:01:55.390 --> 00:01:59.590
As a matter of fact, the predictability
leads into more optimization.

38
00:01:59.590 --> 00:02:02.320
Virtually all programming
languages have lexical scope.

39
00:02:02.320 --> 00:02:06.320
And I think one of the reasons for that is
that lexical scope is more optimizable.

40
00:02:06.320 --> 00:02:09.980
Because we don't need to decide at
runtime where these variables come from.

41
00:02:09.980 --> 00:02:14.060
We can figure that out once at compile
time and reuse that information.

42
00:02:14.060 --> 00:02:16.430
If every time we call baz, and

43
00:02:16.430 --> 00:02:20.838
every place that we call baz from we might
get different answers which bar variable

44
00:02:20.838 --> 00:02:25.742
it referred to, that would be very much
more dynamic and much harder to optimize.

45
00:02:25.742 --> 00:02:26.742
Do we understand that part?

46
00:02:26.742 --> 00:02:32.760
So that's lexical scope, by contrast,
if JavaScript had dynamic scope.

47
00:02:32.760 --> 00:02:36.590
Sorry I wanted to point out that of
the ways that I like to visualize this is

48
00:02:36.590 --> 00:02:37.780
nested bubbles of scope.

49
00:02:38.850 --> 00:02:42.190
For me that's a little bit even more
helpful than the building metaphor,

50
00:02:42.190 --> 00:02:43.620
I like these nested bubbles.

51
00:02:43.620 --> 00:02:46.620
They're strictly nested, it's not like
Venn diagrams, they don't cross lines.

52
00:02:46.620 --> 00:02:48.020
Because it would make no sense for

53
00:02:48.020 --> 00:02:50.690
the baz scope to be partially
in two different parent scopes.

54
00:02:50.690 --> 00:02:53.410
So they're entirely
nested within each other.

55
00:02:53.410 --> 00:02:57.750
I wish there was an editor plugin
that could draw these lines around my

56
00:02:57.750 --> 00:02:59.550
scopes or whatever.

57
00:02:59.550 --> 00:03:03.840
By the way,
another shout out to Doug Crawford.

58
00:03:03.840 --> 00:03:08.900
He had buried as a little tidbit in one of
his talks that I watching at one point and

59
00:03:08.900 --> 00:03:10.770
this is from years ago.

60
00:03:10.770 --> 00:03:14.540
He talked about Syntax
highlighting in editors and

61
00:03:14.540 --> 00:03:19.050
he talked about Syntax highlighting as
being a silly thing that only uninformed

62
00:03:19.050 --> 00:03:22.220
developers need which was a really
bizarre statement to make.

63
00:03:22.220 --> 00:03:24.940
But then he made the case, which actually
the reason I'm bringing this up,

64
00:03:24.940 --> 00:03:28.770
he made the case that what we really
should have is not syntax highlighting but

65
00:03:28.770 --> 00:03:30.180
scope highlighting.

66
00:03:30.180 --> 00:03:33.590
And he showed an example where he had
code where they were nested scopes, and

67
00:03:33.590 --> 00:03:36.680
the variables were colored according
to what scope they belonged to, and

68
00:03:36.680 --> 00:03:37.860
I thought that was genius.

69
00:03:37.860 --> 00:03:40.005
I wish we had that,
I wish that tool existed,

70
00:03:40.005 --> 00:03:42.213
cuz I'd be using that with my slides for
sure.

71
00:03:43.705 --> 00:03:45.910
&gt;&gt; Kyle Simpson: [COUGH] So,
here is dynamics scope.

72
00:03:45.910 --> 00:03:49.390
As by comparison here we have a full
function that references a bar

73
00:03:49.390 --> 00:03:50.690
because it doesn't have its own bar,

74
00:03:50.690 --> 00:03:53.550
we have to figure out where
is that bar gonna come from.

75
00:03:53.550 --> 00:03:55.780
And we would normally think,
well it's gonna go to the outer scope,

76
00:03:55.780 --> 00:03:56.800
in this case the global scope.

77
00:03:56.800 --> 00:03:58.870
But in a dynamically scoped language,

78
00:03:58.870 --> 00:04:02.980
it would not matter where
the function was written or where.

79
00:04:02.980 --> 00:04:05.310
Or in any way perform how it was called.

80
00:04:05.310 --> 00:04:07.910
It will only matter where
it was called from.

81
00:04:09.560 --> 00:04:13.070
So here we wrote it on line two but
we call it from line eight.

82
00:04:13.070 --> 00:04:16.000
And that's would be how it would
decide.I'm gonna go back to where you

83
00:04:16.000 --> 00:04:16.730
were called from.

84
00:04:16.730 --> 00:04:19.060
I'm gonna walk up the call stack and

85
00:04:19.060 --> 00:04:23.050
console each of the scope
call stack to figure out.

86
00:04:23.050 --> 00:04:24.060
Which variable to use.

87
00:04:24.060 --> 00:04:27.890
It would still be a first come first
serve dispatch to find that variable.

88
00:04:28.950 --> 00:04:31.390
So you notice now that we
have the same foo function.

89
00:04:31.390 --> 00:04:33.703
If it was called from
a thousand different locations,

90
00:04:33.703 --> 00:04:36.984
we'd get a thousand different answers
as to what the bar variable points at.

91
00:04:39.573 --> 00:04:41.695
&gt;&gt; Kyle Simpson: The tradeoff here,
of course,

92
00:04:41.695 --> 00:04:47.080
Is that now things are not predictable,
but they are much more flexible.

93
00:04:47.080 --> 00:04:49.900
We've now got a system where
a function could be written and

94
00:04:49.900 --> 00:04:51.500
be used in many different contexts.

95
00:04:52.800 --> 00:04:55.740
Now this is hypothetical,
this isn't actually how JavaScript works.

96
00:04:55.740 --> 00:04:59.000
So don't worry that all of a sudden,
your whole world is coming down like no,

97
00:04:59.000 --> 00:05:00.050
what am I doing, right?

98
00:05:00.050 --> 00:05:01.590
This is theoretical.

99
00:05:01.590 --> 00:05:06.350
But, if JavaScript had
a mechanism kind of like this,

100
00:05:06.350 --> 00:05:08.450
where we could write
a function in such a way.

101
00:05:08.450 --> 00:05:14.470
And then make it dynamic in terms of
how it resolves reference to variables.

102
00:05:14.470 --> 00:05:17.090
We could do that, could we all
agree that that would be a nice,

103
00:05:17.090 --> 00:05:19.850
interesting, additional use case for
JavaScript.

104
00:05:19.850 --> 00:05:23.070
That we would have not only lexical scope,
which is predictable, but

105
00:05:23.070 --> 00:05:27.280
we'd also have this mechanism that
was dynamic and more flexible.

106
00:05:27.280 --> 00:05:30.980
And having both of those in
the language is a powerful thing.

107
00:05:30.980 --> 00:05:32.960
Most languages only have one or the other.

108
00:05:32.960 --> 00:05:37.380
And having both of them in the same
language is one of the things that I think

109
00:05:37.380 --> 00:05:40.280
is most unique and
interesting about JavaScript.

110
00:05:40.280 --> 00:05:43.710
So while this is not actually
how dynamic scale works,

111
00:05:43.710 --> 00:05:47.280
we will see the visci
word later in our course.

112
00:05:47.280 --> 00:05:51.590
And that will give us a clue to how we
can do something like dynamic contexting.

113
00:05:53.740 --> 00:05:55.960
Just keep those two ideas,

114
00:05:55.960 --> 00:05:59.980
the fixed lexical author timescoping
decision that's predictable

115
00:05:59.980 --> 00:06:03.470
compared to this dynamic scoping thing
that's dynamic and more flexible.

