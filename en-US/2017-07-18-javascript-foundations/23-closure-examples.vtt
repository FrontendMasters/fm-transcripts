WEBVTT

1
00:00:00.000 --> 00:00:02.580
&gt;&gt; Kyle Simpson: Well this
example is typically used to show

2
00:00:02.580 --> 00:00:05.910
how people gloss over the top of
closure and don't fully understand it.

3
00:00:05.910 --> 00:00:08.666
It's not usually done with timer,
usually it's done with,

4
00:00:08.666 --> 00:00:12.000
click handlers on buttons on a form or
something like that.

5
00:00:12.000 --> 00:00:16.642
But the idea here is that we're thinking
we're getting a new i for each iteration.

6
00:00:16.642 --> 00:00:21.190
And so when we close over that i on line
3, that it's gonna preserve the 1, 2, 3,

7
00:00:21.190 --> 00:00:23.350
4, 5 value that it should have.

8
00:00:23.350 --> 00:00:27.766
So at the 1 second mark, we should get i
1, at the 2 second mark we should get i 2,

9
00:00:27.766 --> 00:00:32.502
i 3, i 4, i 5, that's the spirit of what
we're trying to accomplish with this code,

10
00:00:32.502 --> 00:00:33.730
but it doesn't work.

11
00:00:35.080 --> 00:00:41.930
When you run this code,
turns out it'll print 6, 6, 6, 6, 6, why?

12
00:00:42.980 --> 00:00:44.800
Well, there's two reasons why.

13
00:00:44.800 --> 00:00:47.928
There's a surface reason why,
and there's a deeper reason why.

14
00:00:47.928 --> 00:00:52.192
The surface reason why is, well of course
i is six at the end of the loop, and

15
00:00:52.192 --> 00:00:56.275
all these timers run a lot later, so
of course it's gonna print out 6.

16
00:00:56.275 --> 00:01:00.760
But the deeper question is Why don't
we get a new i for each iteration?

17
00:01:03.505 --> 00:01:05.323
&gt;&gt; Kyle Simpson: Because we used the var,

18
00:01:05.323 --> 00:01:09.120
we made one i attached
to the existing scope.

19
00:01:09.120 --> 00:01:12.990
Of course where all five of these inner
functions are all gonna close over

20
00:01:12.990 --> 00:01:18.330
the exact same i, and
reveal the exact same answer for i right?

21
00:01:19.870 --> 00:01:21.870
That's the deeper question.

22
00:01:21.870 --> 00:01:25.270
Something about the for loop tries to
convince us that we're getting a new

23
00:01:25.270 --> 00:01:28.440
i with each iteration,
but in this way we're not.

24
00:01:28.440 --> 00:01:31.360
Do you recall earlier in the course
we talked about an example of

25
00:01:31.360 --> 00:01:34.520
how we could get a new variable for
each iteration of a for loop?

26
00:01:35.610 --> 00:01:39.150
Do you remember the IIFE, here's the IIFE.

27
00:01:40.380 --> 00:01:43.340
Now we legitimately are creating a new i.

28
00:01:43.340 --> 00:01:46.880
So the i on line four
that we're closing over,

29
00:01:46.880 --> 00:01:50.970
is that one, not the one in the for loop.

30
00:01:52.490 --> 00:01:54.680
We're making a whole new i for
each iteration.

31
00:01:55.800 --> 00:01:59.690
So now when that setTimeout runs,
what do you think it's gonna print?

32
00:01:59.690 --> 00:02:02.860
It's gonna print 1, 2, 3, 4, 5.

33
00:02:05.223 --> 00:02:07.823
&gt;&gt; Kyle Simpson: So the IIFE was
a way to create some scope, and

34
00:02:07.823 --> 00:02:11.460
not just some scope, but
a variable each time we want it to run.

35
00:02:13.710 --> 00:02:17.630
But then we looked at block scoping,
and we said that's cool, block scoping.

36
00:02:17.630 --> 00:02:21.490
I can make a new j by
just saying let j = i.

37
00:02:21.490 --> 00:02:25.050
And now, when we close over j, we're
closing over a different j each time.

38
00:02:27.912 --> 00:02:28.685
&gt;&gt; Kyle Simpson: You see that?

39
00:02:34.709 --> 00:02:36.600
&gt;&gt; Kyle Simpson: JavaScript has
one more trick up its sleeve.

40
00:02:37.970 --> 00:02:41.351
We don't need even to do the whole
let inside of the for loop thing.

41
00:02:41.351 --> 00:02:46.065
If you swap the var for
the let, right there,

42
00:02:46.065 --> 00:02:52.657
it will automatically create
a whole new i for each iteration.

43
00:02:57.016 --> 00:03:00.909
&gt;&gt; Kyle Simpson: So, the question
to critically ask yourself is,

44
00:03:00.909 --> 00:03:02.770
how many i's do I have?

45
00:03:02.770 --> 00:03:08.880
How many i's do we now have,
we now have 5, one for each iteration.

46
00:03:10.010 --> 00:03:14.231
That's the only way this could possibly
work is if each iteration got its own i,

47
00:03:14.231 --> 00:03:17.381
so that independently each one
of those function closers,

48
00:03:17.381 --> 00:03:18.839
closed over a different i.

49
00:03:18.839 --> 00:03:21.434
If they all closed over the same one,

50
00:03:21.434 --> 00:03:26.730
you're gonna get the exact same output for
all 5 console log statements.

51
00:03:28.460 --> 00:03:29.070
&gt;&gt; Kyle Simpson: Yes?

52
00:03:29.070 --> 00:03:33.823
&gt;&gt; Speaker 2: So each iteration in this
situation consumes more memory cuz it

53
00:03:33.823 --> 00:03:39.040
keeps all the other i's in memory too,
until setTimeout executes.

54
00:03:39.040 --> 00:03:41.740
&gt;&gt; Kyle Simpson: I don't that I would say
each iteration is creating more memory,

55
00:03:41.740 --> 00:03:43.312
each closure is more memory.

56
00:03:43.312 --> 00:03:47.652
Every time you create a closure there's
a small tiny little sliver a few hundred

57
00:03:47.652 --> 00:03:51.650
byte worth of code,
that's gonna be reserved for that closure.

58
00:03:51.650 --> 00:03:55.590
Closure does hold on to memory, and if you
don't what it to, you don't create it or

59
00:03:55.590 --> 00:03:58.270
make sure to unset
the closure when you're done.

60
00:03:58.270 --> 00:04:01.170
The second question,
is closure and inner function or

61
00:04:01.170 --> 00:04:04.080
its ability to remember the variable
outside of the inner function?

62
00:04:04.080 --> 00:04:08.440
A lot of people confuse this, a lot of
people say the closure is the function.

63
00:04:08.440 --> 00:04:11.620
A function is not a closure,
a closure is not a function.

64
00:04:11.620 --> 00:04:16.620
A closure is a characteristic of
a function in a lexically scoped

65
00:04:16.620 --> 00:04:21.960
environment, which allows that function to
continue to access variables outside of

66
00:04:21.960 --> 00:04:26.370
itself, even when that function is passed
to a different location and executed.

67
00:04:27.640 --> 00:04:32.010
So, the most easy way for
us to observe a closure

68
00:04:32.010 --> 00:04:36.500
is to have an inner function inside of
an outer scope like an outer function.

69
00:04:36.500 --> 00:04:39.730
And then take that inner function and
transport it out somewhere.

70
00:04:39.730 --> 00:04:44.310
Pass it as a callback, return it as a
value, assign it to some global variable,

71
00:04:44.310 --> 00:04:45.730
set it to a timer.

72
00:04:45.730 --> 00:04:49.930
Whatever we do with it, if we take
the inner function and we transport it out

73
00:04:49.930 --> 00:04:54.880
of the outer function, out of the outer
scope, Now we have a function

74
00:04:54.880 --> 00:04:58.623
that's running around here, able to play
with those variables from the inside.

75
00:04:58.623 --> 00:05:02.901
And the only way that can
work is because closure.

76
00:05:02.901 --> 00:05:05.644
Isn't concept of closure
contradicting lexical scope?

77
00:05:05.644 --> 00:05:08.641
No, they actually go hand in hand.

78
00:05:08.641 --> 00:05:11.969
If you have a lexically scoped system,
which JavaScript is, and

79
00:05:11.969 --> 00:05:14.632
you have functions which
are first class citizens,

80
00:05:14.632 --> 00:05:18.582
meaning they're values that can be
passed around, which JavaScript does.

81
00:05:18.582 --> 00:05:22.798
If those two things are true of
a language, which they are of JavaScript,

82
00:05:22.798 --> 00:05:25.740
you virtually have to have closure.

83
00:05:25.740 --> 00:05:29.140
Think about how crazy it would
be if you took a function, and

84
00:05:29.140 --> 00:05:32.830
it referenced the variable, and
it worked when you called it here.

85
00:05:32.830 --> 00:05:35.080
But then you passed it somewhere else and

86
00:05:35.080 --> 00:05:36.790
all of a sudden it forgot
about its variable.

87
00:05:38.734 --> 00:05:41.180
&gt;&gt; Kyle Simpson: That unpredictability
would be rather frustrating, right?

88
00:05:42.250 --> 00:05:45.650
You virtually have to have
closure to make functions

89
00:05:45.650 --> 00:05:48.880
as first class citizens work in
a lexically scoped language.

90
00:05:48.880 --> 00:05:52.700
They are three pillars
of the same building,

91
00:05:54.270 --> 00:05:56.040
you take one out,
the building falls apart.

92
00:05:57.280 --> 00:06:00.770
So no absolutely closure is not
a contradiction of lexical scope,

93
00:06:00.770 --> 00:06:04.260
closure is a logical
conclusion of lexical scope.

94
00:06:04.260 --> 00:06:07.009
If you understand lexical scope,
you now understand closure.

95
00:06:08.890 --> 00:06:11.500
And I would go so far as to say if
you don't understand lexical scope,

96
00:06:11.500 --> 00:06:12.960
you have no hope of understanding closure.

97
00:06:17.751 --> 00:06:18.790
&gt;&gt; Kyle Simpson: How do
you unset a closure?

98
00:06:18.790 --> 00:06:21.965
You just get rid of the reference to
the function that has as the closure.

99
00:06:23.275 --> 00:06:26.695
That could be unbinding an event handler,
if that event handler function had

100
00:06:26.695 --> 00:06:30.645
the closure unbind it, and that'll throw
away the reference to the function.

101
00:06:30.645 --> 00:06:33.815
When the function gets garbage collected,
its closure gets garbage collected,

102
00:06:33.815 --> 00:06:37.165
which means any scopes it was holding
onto can now be garbage collected.

103
00:06:39.935 --> 00:06:42.971
Exactly like you get rid of an array,
you unset it,

104
00:06:42.971 --> 00:06:45.876
you set it to null,
whatever, same principle.

105
00:06:45.876 --> 00:06:50.572
If a function has a closure, which
just by virtue of creating a function,

106
00:06:50.572 --> 00:06:54.380
you're creating a closure over
any scope it has access to.

107
00:06:54.380 --> 00:06:57.782
If a function has a closure and
you wanna get rid of that closure,

108
00:06:57.782 --> 00:07:00.871
you've gotta get rid of that
reference to that function.

109
00:07:00.871 --> 00:07:01.613
&gt;&gt; Speaker 2: So in this case,

110
00:07:01.613 --> 00:07:04.435
they will unset automatically
after those timeouts, right?

111
00:07:04.435 --> 00:07:06.085
&gt;&gt; Kyle Simpson: Because the set
timeout's gonna throw away

112
00:07:06.085 --> 00:07:07.855
those function references, exactly.

