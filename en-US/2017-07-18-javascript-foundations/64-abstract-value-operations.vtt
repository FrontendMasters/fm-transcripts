WEBVTT

1
00:00:00.300 --> 00:00:04.690
&gt;&gt; Kyle Simpson: I wanna start first on
this topic of coercion by digging a little

2
00:00:04.690 --> 00:00:09.610
bit into the nitty-gritty of some stuff
that the spec talks about here, okay?

3
00:00:09.610 --> 00:00:12.480
And I know we're gonna be down
in the weeds for a few minutes.

4
00:00:12.480 --> 00:00:15.930
You gotta just stick with me because
I'm gonna bring us back up to a higher

5
00:00:15.930 --> 00:00:17.320
level of understanding but

6
00:00:17.320 --> 00:00:20.800
I don't want us to use terminology
that you aren't familiar with.

7
00:00:20.800 --> 00:00:22.084
And if you haven't read the spec,

8
00:00:22.084 --> 00:00:24.798
there is some terminology that
definitely might be a little confusing.

9
00:00:24.798 --> 00:00:29.708
So, the spec refers to a certain
set of operations called abstract

10
00:00:29.708 --> 00:00:34.621
operations that represent these
things that we're going to do and

11
00:00:34.621 --> 00:00:40.520
an example that we're going to start
with is the ToString abstract operation.

12
00:00:40.520 --> 00:00:43.470
Now, this one I use the capital T because

13
00:00:43.470 --> 00:00:46.519
it literally is different
than the tostring method.

14
00:00:47.550 --> 00:00:50.010
You know about the ToString method
that you can call and evalue?

15
00:00:50.010 --> 00:00:51.030
This is slightly different.

16
00:00:51.030 --> 00:00:53.810
The ToString abstract operation,

17
00:00:53.810 --> 00:00:58.200
is a set of steps that JavaScript
calls for, anytime we have a value and

18
00:00:58.200 --> 00:01:02.260
we want to convert it to
the type of primitive string.

19
00:01:03.770 --> 00:01:05.600
All over the spec whenever
they wanna do that,

20
00:01:05.600 --> 00:01:09.910
they just dispatch, it's like an internal
built in function of the language.

21
00:01:09.910 --> 00:01:11.610
It is just called ToString.

22
00:01:11.610 --> 00:01:13.420
Capital T ToString.

23
00:01:13.420 --> 00:01:18.681
Now, these abstract operations
aren't actually implemented like

24
00:01:18.681 --> 00:01:24.484
there is a real function that you could
call that way there sort of guidelines

25
00:01:24.484 --> 00:01:29.846
there typically in line whenever
the engine is implementing things.

26
00:01:29.846 --> 00:01:33.041
But they're useful for
us to think about in terms of,

27
00:01:33.041 --> 00:01:37.585
if we can observe something in our code
and we can say, I know under the covers

28
00:01:37.585 --> 00:01:42.414
that's doing this particular abstract
operation, then we have an algorithm to

29
00:01:42.414 --> 00:01:47.580
inspect that tells us exactly what
that abstract operation's gonna do.

30
00:01:47.580 --> 00:01:50.750
So any time we have some value that's not
already a string, and we wanna make it

31
00:01:50.750 --> 00:01:54.780
into a string, these are the sets
of things that are going to happen.

32
00:01:54.780 --> 00:01:59.360
Rather than describe all of
the internals of that operation,

33
00:01:59.360 --> 00:02:03.050
I just want to list some
examples of what it was.

34
00:02:03.050 --> 00:02:06.210
You will notice that pretty much
all of these are pretty intuitive.

35
00:02:06.210 --> 00:02:07.680
If we take the no value and

36
00:02:07.680 --> 00:02:12.070
we call that abstract two string operation
on it we are going to get quote no.

37
00:02:12.070 --> 00:02:15.790
Undefined is quote undefined,
true, false, the number.

38
00:02:15.790 --> 00:02:17.640
So the only that's weird
is that negative 0.

39
00:02:17.640 --> 00:02:19.040
And I already told you
about that one before.

40
00:02:19.040 --> 00:02:21.610
The two strings pre-configured to lie.

41
00:02:21.610 --> 00:02:25.130
When it's given the negative 0, it's
pre-configured to lie and say quote 0.

42
00:02:25.130 --> 00:02:30.705
All the rest of them make complete sense
when call on these primitive value types.

43
00:02:34.656 --> 00:02:38.314
&gt;&gt; Kyle Simpson: When two string is called
upon a non-primitive, that is like one of

44
00:02:38.314 --> 00:02:43.490
the objects, like for example, in array,
it's a little bit more complicated.

45
00:02:43.490 --> 00:02:44.190
Okay.

46
00:02:44.190 --> 00:02:46.470
So, when we call it against the array,

47
00:02:46.470 --> 00:02:51.260
it's going to dispatch against the actual
two-string method of that value.

48
00:02:51.260 --> 00:02:53.640
Either the default one or
one that you have customized.

49
00:02:53.640 --> 00:02:55.780
So the default to string method

50
00:02:56.870 --> 00:02:59.860
when called upon an array is going
to do the following things, and

51
00:02:59.860 --> 00:03:04.880
I find these things a little bit bizarre,
the fact that an empty

52
00:03:04.880 --> 00:03:10.500
array when we stringify it becomes
the empty string, I find troubling.

53
00:03:10.500 --> 00:03:14.100
Because if I have an empty string I don't
know if that came from an empty string or

54
00:03:14.100 --> 00:03:15.690
if it came from an empty array.

55
00:03:15.690 --> 00:03:19.230
To me, the stringification of an empty
array should have the square brackets in

56
00:03:19.230 --> 00:03:21.220
it with no contents in it.

57
00:03:21.220 --> 00:03:24.410
Similar to what it would look like
of you JSON stringified it, right?

58
00:03:24.410 --> 00:03:26.480
The JSON string representation,

59
00:03:26.480 --> 00:03:30.590
that to me is the most natural
string representation for an array.

60
00:03:30.590 --> 00:03:31.970
Here, they leave off the brackets.

61
00:03:31.970 --> 00:03:35.780
You'll notice that on array 1,
2, 3, they just put the 1, 2, 3,

62
00:03:35.780 --> 00:03:37.810
and not the brackets around it.

63
00:03:37.810 --> 00:03:40.190
So I find this to be a bizarre and
puzzling one, but

64
00:03:40.190 --> 00:03:43.680
it also happens to create some other
problems for us down the road.

65
00:03:43.680 --> 00:03:47.680
So this is one of those mistakes that
I wish we could go back and fix.

66
00:03:47.680 --> 00:03:50.810
Cuz we could reduce a whole
lot of the developer confusion

67
00:03:50.810 --> 00:03:54.970
if we would fix some of these early
design decisions make the more sence.

68
00:03:56.000 --> 00:04:00.260
But the biggest one that really
bothers me on this whole slide

69
00:04:00.260 --> 00:04:04.110
is the fact that when no undefined
are individually stringified,

70
00:04:05.210 --> 00:04:08.460
they stringnified to their values null and
undefined.

71
00:04:08.460 --> 00:04:09.730
But when they're in an array and

72
00:04:09.730 --> 00:04:14.510
they stringnified they just, they're
magically empty like this third line here.

73
00:04:14.510 --> 00:04:17.300
You see there's a comma
with two empty values on.

74
00:04:17.300 --> 00:04:21.130
Like that it's just insanity to me.

75
00:04:21.130 --> 00:04:24.296
It's distinct values they represent
themselves when they're on an array they

76
00:04:24.296 --> 00:04:30.351
don't,
&gt;&gt; Kyle Simpson: Some

77
00:04:30.351 --> 00:04:34.706
of that last line, we have a slight
little grammar nuance that arrays

78
00:04:34.706 --> 00:04:37.120
are allowed to have trailing commas.

79
00:04:37.120 --> 00:04:41.910
They don't imply an empty item in the end,
so if you have a trailing comma there,

80
00:04:41.910 --> 00:04:45.390
that's why when we string a fight,
there's only three commas

81
00:04:45.390 --> 00:04:49.420
because there really is only four empty
values here, not five empty values.

82
00:04:51.350 --> 00:04:55.254
One array or I shouldn't say empty,
they're actually undefined.

83
00:05:00.960 --> 00:05:03.196
&gt;&gt; Kyle Simpson: ToString
on objects however,

84
00:05:03.196 --> 00:05:08.098
by default ToString on objects will
just create this bizarre kind of

85
00:05:08.098 --> 00:05:11.460
output where it says
object capital O Object.

86
00:05:11.460 --> 00:05:16.910
The implication here is we have an object
that was created with an Object function.

87
00:05:16.910 --> 00:05:21.650
It's not technically true that it's
always created with that function, but

88
00:05:21.650 --> 00:05:25.730
it's a good representation
that this thing was created.

89
00:05:25.730 --> 00:05:28.790
And I find this strange that no matter
what the contents of the object are,

90
00:05:28.790 --> 00:05:31.060
we get the same stringification.

91
00:05:31.060 --> 00:05:33.000
So if I have an object with a:2 in it,

92
00:05:33.000 --> 00:05:37.010
I get no representation of
that in the string output.

93
00:05:37.010 --> 00:05:40.440
I have to call JSON.string file on it or
something like that.

94
00:05:41.620 --> 00:05:42.200
By the way,

95
00:05:42.200 --> 00:05:46.390
just as a slight little sidenote on
that capital low object toward there.

96
00:05:47.820 --> 00:05:50.950
That is a specific term,
that second word shows up there.

97
00:05:50.950 --> 00:05:57.408
A specific term In ES6 parlance,
it's referred to as a string tag.

98
00:05:57.408 --> 00:06:00.040
In other words,

99
00:06:00.040 --> 00:06:05.200
it is the value that is used to describe
an object when it's stringified.

100
00:06:06.580 --> 00:06:11.010
And by default, objects have a string
tag called capital O Object.

101
00:06:11.010 --> 00:06:14.450
Because we're trying to imply that they
were created by the capital object

102
00:06:14.450 --> 00:06:16.860
function, even if they weren't.

103
00:06:16.860 --> 00:06:18.050
Okay?

104
00:06:18.050 --> 00:06:22.120
But you can actually ask the vio6
overwrite that for your own objects.

105
00:06:22.120 --> 00:06:25.330
You can change the string tag for
an object.

106
00:06:25.330 --> 00:06:30.970
There's a special metahook location
called symbol that to string tag, and

107
00:06:30.970 --> 00:06:32.060
you can change it.

108
00:06:32.060 --> 00:06:35.460
So you can literally make
your object present itself as

109
00:06:35.460 --> 00:06:40.130
lowercase o object foo bar or
whatever else you wanted.

110
00:06:40.130 --> 00:06:43.410
So as an experiment, I said,
what I'd really like my objects to do,

111
00:06:43.410 --> 00:06:45.830
is when stringified,
I'd like them to show me the contents.

112
00:06:45.830 --> 00:06:50.060
So I changed my, for
this one object in this experiment,

113
00:06:50.060 --> 00:06:55.030
I changed the string tag to
be a getter that dispatches

114
00:06:55.030 --> 00:07:00.310
on the fly rather than a set value and
it, JSON stringifies itself.

115
00:07:00.310 --> 00:07:02.540
So it actually print out
lowercase object and

116
00:07:02.540 --> 00:07:04.980
then the JSON representation
of the object.

117
00:07:04.980 --> 00:07:07.630
So you can do fun stuff like
that once you learn about

118
00:07:07.630 --> 00:07:10.360
ES6 meta programming and things like that.

119
00:07:10.360 --> 00:07:13.548
More on that in my ES6 course and
my ES6 and Beyond book.

120
00:07:16.600 --> 00:07:19.203
&gt;&gt; Kyle Simpson: But two string by
default is not very helpful for

121
00:07:19.203 --> 00:07:20.316
us on object types.

122
00:07:22.301 --> 00:07:23.400
&gt;&gt; Kyle Simpson: What about ToNumber?

123
00:07:23.400 --> 00:07:27.110
This is one that's a bit more interesting,
it's a bit more common for us and

124
00:07:27.110 --> 00:07:33.370
certainly references what we've
been talking about with NaNs Many

125
00:07:33.370 --> 00:07:37.880
of these are pretty straightforward.

126
00:07:37.880 --> 00:07:39.630
Quote 0 gives us 0.

127
00:07:39.630 --> 00:07:42.380
Negative 0 actually
does make a negative 0.

128
00:07:42.380 --> 00:07:46.040
So it works correctly in that direction.

129
00:07:46.040 --> 00:07:50.640
You'll notice the one where I have some
white space and some leading zeroes.

130
00:07:50.640 --> 00:07:54.280
It just ignores any white space and
leading zeroes, when it's calling so

131
00:07:54.280 --> 00:07:59.470
that's important because that's
different than we try to call.

132
00:08:01.100 --> 00:08:04.890
Like parseInt on a function for example,
we'll talk about parseInt later.

133
00:08:04.890 --> 00:08:08.440
ParseInt is doing something different than
coercion, parse is trying to parse stuff

134
00:08:08.440 --> 00:08:13.240
and then it guesses if it sees a 0,
thinks it octal or whatever.

135
00:08:13.240 --> 00:08:15.620
Here we're just doing
straight up coercion.

136
00:08:15.620 --> 00:08:20.560
So a leading zero is no big deal at all,
it's not gonna do anything special.

137
00:08:20.560 --> 00:08:25.442
That's why we end up with just the value
9 there from that fourth item.

138
00:08:25.442 --> 00:08:30.731
I find the the trailing decimal place and
the leading decimal place,

139
00:08:30.731 --> 00:08:34.297
they're ignored, I find that interesting.

140
00:08:34.297 --> 00:08:38.351
But it's weird that if you leave off
both the 0 on either side of it,

141
00:08:38.351 --> 00:08:40.170
you end up NaN.

142
00:08:40.170 --> 00:08:41.730
To me that seems strange,

143
00:08:41.730 --> 00:08:45.630
that is an inconsistency to me
that it ought to produce 0 again.

144
00:08:45.630 --> 00:08:48.410
If it's gonna do it for 0 dot, and
dot 0, it ought to do it for dot.

145
00:08:48.410 --> 00:08:54.490
And also you'll notice that if
I do wanna do the base types,

146
00:08:54.490 --> 00:08:57.690
and I do the actual notation for it,

147
00:08:57.690 --> 00:09:02.240
like in this case,
the hexadecimal syntax for the 0xaf.

148
00:09:02.240 --> 00:09:07.110
I'm gonna actually produce
the base ten representation of it.

149
00:09:07.110 --> 00:09:10.470
But the first item in this list,
the very first item at the top that I've

150
00:09:10.470 --> 00:09:14.240
highlighted there, that one I wanna give
some special attention to for a moment.

151
00:09:15.370 --> 00:09:21.490
The fact that JavaScript chose to do an
empty string to coerce it to the 0 value.

152
00:09:23.170 --> 00:09:25.170
And, by the way,
it's not just the empty string,

153
00:09:25.170 --> 00:09:30.930
it's any string that contains
either nothing or all white space.

154
00:09:30.930 --> 00:09:35.680
So a string with a bunch of spaces and
tabs and new lines in it, and

155
00:09:35.680 --> 00:09:39.156
nothing else,
all of that white space gets ignored and

156
00:09:39.156 --> 00:09:41.380
it gets treated the same
as an empty string.

157
00:09:42.720 --> 00:09:46.460
So, what about this empty string becoming
the zero value, does that make any sense?

158
00:09:47.800 --> 00:09:49.980
Well, I don't know if any of you
have ever tried it before, but

159
00:09:49.980 --> 00:09:54.020
this is somewhat unprecedented, because
in virtually in every other language that

160
00:09:54.020 --> 00:09:58.910
I've been able to attempt this in,
if you try to take the empty string and

161
00:09:58.910 --> 00:10:03.660
convert it, coerce it to
a number you always get an error.

162
00:10:05.010 --> 00:10:08.900
C throws an error, Java throws an error,
they all throw an error, because this is

163
00:10:08.900 --> 00:10:13.520
one of those strange corner cases and
they chose in that particular case, and

164
00:10:13.520 --> 00:10:15.920
said look nope that's just an error,
there's nothing we can do.

165
00:10:15.920 --> 00:10:19.460
There's no reason to assume
that empty string means 0.

166
00:10:19.460 --> 00:10:24.410
Empty sting is the absence of some value,
and 0 is definitely not the absence

167
00:10:24.410 --> 00:10:28.280
of a value it is an affirmative
presence of a real important value.

168
00:10:29.520 --> 00:10:33.310
So to conflate empty string
with 0 is troublesome.

169
00:10:33.310 --> 00:10:37.890
This turns out to be a really bad mistake
made early on, and as a matter of fact

170
00:10:37.890 --> 00:10:40.380
you're not gonna know this yet,
but you'll just have to trust me.

171
00:10:40.380 --> 00:10:45.300
I'm gonna lead you through a discussion
of coercion here, we'll actually find out

172
00:10:46.680 --> 00:10:53.910
that empty string becoming 0 is the root
of all coercion evil in all of JavaScript.

173
00:10:53.910 --> 00:11:00.409
Every other coercion bug, or WTF, can all
be traced back this one fateful decision.

174
00:11:02.070 --> 00:11:06.630
If empty string did not become 0,
all the other crazy ones, all the whack

175
00:11:06.630 --> 00:11:10.490
video ones, all of that stuff, they
all trace back to this one root cause.

176
00:11:12.260 --> 00:11:15.590
I didn't believe it at first, but I kept
trying and trying and it turned out,

177
00:11:15.590 --> 00:11:17.020
if you think logically about it,

178
00:11:17.020 --> 00:11:20.930
it turns out every one of them
traces back to this one root cause.

179
00:11:20.930 --> 00:11:23.530
What should empty string have become?

180
00:11:23.530 --> 00:11:26.236
Anybody have any idea on
a better value for it to become?

181
00:11:26.236 --> 00:11:28.208
&gt;&gt; Speaker 2: Not a number.

182
00:11:28.208 --> 00:11:29.890
&gt;&gt; Kyle Simpson: How about NaN?

183
00:11:29.890 --> 00:11:31.840
Doesn't that make more sense?

184
00:11:31.840 --> 00:11:34.140
If it had just become NaN instead of 0,

185
00:11:34.140 --> 00:11:36.590
virtually all other coercion
woes would've gone away.

186
00:11:36.590 --> 00:11:39.720
But they chose to make it become 0,

187
00:11:39.720 --> 00:11:44.660
more on that in a little bit.

188
00:11:44.660 --> 00:11:47.940
Booleans, nulls and
undefined, false becomes 0,

189
00:11:47.940 --> 00:11:51.460
true becomes 1, now I understand there's
lot's of historical precedent for that.

190
00:11:51.460 --> 00:11:54.770
LIke in the C language,
we didn't have Booleans so we used 0 and

191
00:11:54.770 --> 00:11:56.830
one interchangeably as true and false.

192
00:11:56.830 --> 00:12:00.680
But now in a modern programming language
that does have the Boolean type,

193
00:12:00.680 --> 00:12:03.990
the fact that false becomes 0
is a little bit sketchy to me.

194
00:12:05.010 --> 00:12:07.795
The fact that I could say false plus true,
and

195
00:12:07.795 --> 00:12:10.370
end up with the number 1 is strange to me.

196
00:12:10.370 --> 00:12:16.270
And I don't think it actually leads us to
more reasonability in our code that we can

197
00:12:16.270 --> 00:12:21.100
just implicitly treat Booleans and numbers
as interchangeable with each other.

198
00:12:21.100 --> 00:12:25.210
They have very distinct purposes, and I
don't think we should treat them as that.

199
00:12:25.210 --> 00:12:29.750
So I would almost highlight false and
true there, and say those becoming 0 and

200
00:12:29.750 --> 00:12:34.650
1, respectively, is a strange decision,
but I understand the historical precedent.

201
00:12:34.650 --> 00:12:37.320
So at least it's not out of left field,
right?

202
00:12:38.770 --> 00:12:43.620
But null,
becoming 0 where undefined becomes NaN?

203
00:12:43.620 --> 00:12:47.460
Now that is just straight up insane,
right?

204
00:12:47.460 --> 00:12:48.620
That's just crazy.

205
00:12:48.620 --> 00:12:56.030
Why does null become 0, but undefined
becomes NaN, just to mess with us?

206
00:12:56.030 --> 00:12:57.434
There's just no reason for

207
00:12:57.434 --> 00:13:01.105
this, this is a bad decision,
one of those things I'd go back and fix.

208
00:13:03.344 --> 00:13:07.508
&gt;&gt; Kyle Simpson: So what about when we
call ToNumber on an object, an object or

209
00:13:07.508 --> 00:13:08.272
an array?

210
00:13:08.272 --> 00:13:11.390
Well it turns out that ToNumber when
called against a non primitive,

211
00:13:11.390 --> 00:13:15.600
it first dispatches to another
abstract operation called ToPrimitive.

212
00:13:15.600 --> 00:13:19.490
Because ToNumber can only
operate on primitives.

213
00:13:19.490 --> 00:13:22.310
So we first have to take something
that's not already a primitive, and

214
00:13:22.310 --> 00:13:23.238
make it into a primitive.

215
00:13:23.238 --> 00:13:25.173
And there's a two step process for

216
00:13:25.173 --> 00:13:28.930
turning something that's not
a primitive into into a primitive.

217
00:13:28.930 --> 00:13:33.890
First, that ToPrimitive operation
will dispatch to a valueOf and

218
00:13:33.890 --> 00:13:36.190
then it will dispatch to a toString.

219
00:13:36.190 --> 00:13:40.900
Now that's actually reversed when
the end result is that you want

220
00:13:40.900 --> 00:13:43.934
a number versus the end
result you want a string.

221
00:13:43.934 --> 00:13:48.780
If you were to coerce
an object to a string

222
00:13:48.780 --> 00:13:53.406
it first goes to that ToPrimitive, and
it calls toString first and then valueOf.

223
00:13:53.406 --> 00:13:56.310
But here we're trying to produce
a number so it calls valueOf first, and

224
00:13:56.310 --> 00:14:01.140
if valueOf does not return us a primitive
then it dispatches to toString.

225
00:14:02.230 --> 00:14:06.870
Now this is notable because you can
actually create an object that has both

226
00:14:06.870 --> 00:14:10.580
a valueOf and
a toString method to find on it.

227
00:14:10.580 --> 00:14:15.130
And you can make those methods return
different answers, so you can really

228
00:14:15.130 --> 00:14:18.870
screw with people by creating an object
that will coerce itself differently,

229
00:14:18.870 --> 00:14:22.890
depending upon whether you ask for
a string or a number out of it.

230
00:14:22.890 --> 00:14:26.290
But not a good idea, but
you can do that, okay?

231
00:14:26.290 --> 00:14:30.570
So primarily we think of the valueOf
method as being the one that

232
00:14:30.570 --> 00:14:34.130
answers the question, what is the
primitive representation of those objects.

233
00:14:34.130 --> 00:14:37.570
So imagine you've created
a data structure, and

234
00:14:37.570 --> 00:14:42.683
you want that data structure, maybe
that data structure is a point, right?

235
00:14:42.683 --> 00:14:47.370
Like a cartesian x, y,
z point in 3D space.

236
00:14:47.370 --> 00:14:53.189
And you want that point when treated as a
number to represent itself as some number.

237
00:14:53.189 --> 00:14:55.969
For example,
you could have it be the Cartesian

238
00:14:55.969 --> 00:14:59.600
distance from that point
in 3D space to the origin.

239
00:14:59.600 --> 00:15:03.570
So you could have it calculate internally,
what is my distance,

240
00:15:03.570 --> 00:15:05.880
my Cartesian distance to the origin.

241
00:15:07.260 --> 00:15:11.611
And that's how you could
represent that object as a number,

242
00:15:11.611 --> 00:15:18.050
have the valueOf function return that
value, that number representation.

243
00:15:18.050 --> 00:15:20.298
Whereas when asked for
string representation,

244
00:15:20.298 --> 00:15:23.583
you'd probably wanna print it as
parenthesis and then the three x, y,

245
00:15:23.583 --> 00:15:26.134
z coordinates and
then another parenthesis, right?

246
00:15:26.134 --> 00:15:29.307
So it does actually sometimes
make sense to represent it

247
00:15:29.307 --> 00:15:33.295
very differently between the string and
the number representation.

248
00:15:36.601 --> 00:15:40.185
&gt;&gt; Kyle Simpson: So here's some
interesting things, when we have the array

249
00:15:40.185 --> 00:15:44.267
that it's not an empty array,
it's an array with an empty string,

250
00:15:44.267 --> 00:15:48.727
the first thing that happens is that
the array needs to call its toString.

251
00:15:48.727 --> 00:15:55.710
So array toString produces the empty
string, and then empty string produces 0.

252
00:15:55.710 --> 00:15:57.750
This is a two step process now.

253
00:15:57.750 --> 00:16:00.620
First we create the primitive,
and then we do that.

254
00:16:00.620 --> 00:16:02.830
Two number on the primitive result.

255
00:16:05.170 --> 00:16:08.310
There is our root of evil
coming back to bite us.

256
00:16:08.310 --> 00:16:13.154
If that empty string had produced a NaN
then we would have resulted in a NaN.

257
00:16:17.494 --> 00:16:20.723
&gt;&gt; Kyle Simpson: I find it very
strange that both array of null and

258
00:16:20.723 --> 00:16:22.985
array of undefined produce 0s,

259
00:16:22.985 --> 00:16:28.120
whereas null and undefined by
themselves produced different results.

260
00:16:28.120 --> 00:16:32.980
Here, because they're in an array and that
array stringification is all busted up,

261
00:16:32.980 --> 00:16:36.830
they both produce the empty string,
which then both produce 0s.

262
00:16:36.830 --> 00:16:38.300
Root of all evil thing again.

263
00:16:38.300 --> 00:16:39.180
Okay, so

264
00:16:39.180 --> 00:16:42.860
all these other weirdnesses are all
coming from that one faithful decision.

265
00:16:42.860 --> 00:16:45.291
Same thing down there on that last one.

266
00:16:45.291 --> 00:16:49.506
[COUGH] Why do you suppose the array 1,
2, 3, becomes NaN?

267
00:16:52.133 --> 00:16:53.279
&gt;&gt; Speaker 2: Two string first.

268
00:16:53.279 --> 00:16:57.350
&gt;&gt; Kyle Simpson: It calls a two
string which produces 1, 2, 3, and

269
00:16:57.350 --> 00:17:00.090
that string then coerced to a number,
it sees the common, it's like,

270
00:17:00.090 --> 00:17:01.100
that's not a valid number.

271
00:17:02.180 --> 00:17:02.850
So it gives us NaN.

272
00:17:08.030 --> 00:17:12.900
All right, ToBoolean, does exactly what
it sounds like, any time we ask for

273
00:17:12.900 --> 00:17:16.180
a value that's not a Boolean to be
treated as if it was a Boolean.

274
00:17:16.180 --> 00:17:20.410
We're dispatching to this internal
abstract operation called ToBoolean.

275
00:17:21.420 --> 00:17:23.930
Now I understand what ToBoolean does,

276
00:17:23.930 --> 00:17:26.880
we actually need to understand two
concepts called falsy and truthy.

277
00:17:26.880 --> 00:17:30.050
And this sounds like a little bit made up.

278
00:17:30.050 --> 00:17:32.460
And it is sort of, these are terms of art.

279
00:17:32.460 --> 00:17:34.950
The words falsy and
truthy don't actually appear on the spec,

280
00:17:36.020 --> 00:17:38.140
we don't really refer to
things as falsy and truthy.

281
00:17:38.140 --> 00:17:40.040
It sounds like something
a politician would make up.

282
00:17:40.040 --> 00:17:44.140
Well, it's sort of truthy-ish,
kind of, right?

283
00:17:44.140 --> 00:17:45.280
What is truthy and falsy?

284
00:17:45.280 --> 00:17:47.820
Here's what we mean by
that as the term right?.

285
00:17:47.820 --> 00:17:50.750
Falsy means if you have a value and

286
00:17:50.750 --> 00:17:55.880
you dispatch the tToBoolean operation
on it, it will always produce false.

287
00:17:57.500 --> 00:18:04.970
So it is a falsy value if when coursed
ToBoolean it produces false, okay?

288
00:18:04.970 --> 00:18:08.356
Examples of the falsy values,
the empty string,

289
00:18:08.356 --> 00:18:13.040
any representation of the 0,
null, NaN, false, and undefined.

290
00:18:13.040 --> 00:18:16.410
As a matter of fact,
those are the only falsy values.

291
00:18:16.410 --> 00:18:22.066
There's a very specific list,
it's literally this table in the spec that

292
00:18:22.066 --> 00:18:28.110
says these values when we call ToBoolean
these ones produce the Boolean false.

293
00:18:28.110 --> 00:18:32.760
And it literally says
everything else produces true.

294
00:18:34.010 --> 00:18:36.770
So there is no list of
truthy values in the spec,

295
00:18:37.940 --> 00:18:41.780
something is a truthy value if
it's not on the falsy value list.

296
00:18:43.300 --> 00:18:46.860
Examples of truthy values include "foo",

297
00:18:46.860 --> 00:18:50.690
the number 23, the object the array,
the true the function, and

298
00:18:50.690 --> 00:18:55.000
there's a .., there because there's
an infinite number of items on that list.

299
00:18:56.150 --> 00:18:57.430
So how do you know if something's truthy?

300
00:18:58.880 --> 00:19:01.010
If it's not on the falsy list.

301
00:19:01.010 --> 00:19:03.750
All you gonna dodo is
memorize that falsy list.

302
00:19:03.750 --> 00:19:07.074
The string, the empty string, any 0, null,

303
00:19:07.074 --> 00:19:11.160
undefined, false and NaN,
those are the falsy volumes.

304
00:19:13.170 --> 00:19:14.340
Now, something very important.

305
00:19:14.340 --> 00:19:17.600
If you're taking notes don't miss
this really like highlight this and

306
00:19:17.600 --> 00:19:18.429
make sure you don't miss it.

307
00:19:19.510 --> 00:19:22.610
These rules only apply if legitimately,

308
00:19:22.610 --> 00:19:26.158
the ToBoolean operation
is actually invoked.

309
00:19:28.245 --> 00:19:32.110
&gt;&gt; Kyle Simpson: And that might sound
like a no-op statement of mine.

310
00:19:32.110 --> 00:19:34.240
Well obviously, right?

311
00:19:34.240 --> 00:19:36.760
There are several places, which we're
gonna look at in just a little bit.

312
00:19:36.760 --> 00:19:41.670
There are several places that
appear syntactically as if they

313
00:19:41.670 --> 00:19:46.140
are producing a Boolean coercion, and
they're not actually producing a Boolean,

314
00:19:46.140 --> 00:19:47.960
and therefore these rules don't apply.

315
00:19:49.650 --> 00:19:51.900
So the rules only apply
if the rules apply.

316
00:19:53.110 --> 00:19:54.280
I sound like a politician, don't I?

317
00:19:55.370 --> 00:19:58.770
The rules only apply if it's
actually being invoked.

318
00:19:58.770 --> 00:20:01.996
So it's important for you to know
whether or not it's being invoked.

319
00:20:01.996 --> 00:20:03.144
Following me?

320
00:20:04.902 --> 00:20:06.440
&gt;&gt; Kyle Simpson: So
you have to learn the falsy list

