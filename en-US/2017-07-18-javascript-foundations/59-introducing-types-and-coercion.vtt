WEBVTT

1
00:00:00.224 --> 00:00:01.338
&gt;&gt; Kyle Simpson: Let's
jump into JavaScript.

2
00:00:01.338 --> 00:00:04.660
We're gonna start with that first core
foundation of the language, types and

3
00:00:04.660 --> 00:00:05.590
coercion.

4
00:00:05.590 --> 00:00:09.279
I want us to look at the primitive
types in JavaScript, and

5
00:00:09.279 --> 00:00:14.251
right off the bat that might be a little
counterintuitive to you because some of

6
00:00:14.251 --> 00:00:19.150
you may have heard before, JavaScript's
a dynamic interpreted language,

7
00:00:19.150 --> 00:00:22.947
it doesn't have types, false,
it absolutely has types.

8
00:00:22.947 --> 00:00:24.690
It absolutely has value types.

9
00:00:24.690 --> 00:00:27.310
If you read the spec,
which I happen to have done,

10
00:00:27.310 --> 00:00:30.350
turns out there are built in
primitive types in JavaScript.

11
00:00:30.350 --> 00:00:34.171
The only difference between C++ and
JavaScript on the topic of types,

12
00:00:34.171 --> 00:00:38.191
the difference between the two is not
that JavaScript doesn't have types.

13
00:00:38.191 --> 00:00:41.548
The real difference is what is typed.

14
00:00:41.548 --> 00:00:45.155
In a statically typed language
which language is like C++ and

15
00:00:45.155 --> 00:00:48.850
Java they fall under that
umbrella of statically typed.

16
00:00:48.850 --> 00:00:54.300
In a statically typed language we
refer to a type as a description for

17
00:00:54.300 --> 00:00:55.980
what can go in a variable.

18
00:00:55.980 --> 00:00:58.120
In other words the variable
itself is typed.

19
00:00:59.580 --> 00:01:03.630
In dynamic languages,
there are still types but

20
00:01:03.630 --> 00:01:07.450
we don't focus on the variable,
the container having a type.

21
00:01:07.450 --> 00:01:10.030
We focus on the value itself,
having the type.

22
00:01:11.140 --> 00:01:14.450
So, we think about them as value
types as opposed to container types.

23
00:01:15.840 --> 00:01:19.020
Now, people will disagree on
the usage of the word type and

24
00:01:19.020 --> 00:01:20.970
you shouldn't call it that, whatever.

25
00:01:20.970 --> 00:01:23.380
That's a bunch of academic nonsense.

26
00:01:24.570 --> 00:01:27.580
If I open up the JavaScript spec,
it says primitive types.

27
00:01:27.580 --> 00:01:31.507
It uses that word, so let me just
give you a definition for that word,

28
00:01:31.507 --> 00:01:35.671
type, that we can use, a very pragmatic
definition for that word type.

29
00:01:35.671 --> 00:01:42.617
The set of intrinsic behaviors that we
can expect, given any particular value.

30
00:01:42.617 --> 00:01:44.058
That's it.

31
00:01:44.058 --> 00:01:46.910
Given the value 42,
there are behaviors that we can expect.

32
00:01:46.910 --> 00:01:49.500
We can expect that we can do math on it.

33
00:01:49.500 --> 00:01:53.220
We can expect that we can add, subtract,
multiply and divide that number.

34
00:01:53.220 --> 00:01:56.110
We can format it to have different

35
00:01:57.780 --> 00:02:00.970
number representations like in base 10 or
base 16.

36
00:02:00.970 --> 00:02:04.700
We can expect to do specific
things with that number.

37
00:02:06.040 --> 00:02:11.220
The value quote 42 on the other hand,
while visually they look almost the same,

38
00:02:11.220 --> 00:02:13.320
that value has a different
set of expectations.

39
00:02:14.880 --> 00:02:18.080
Those expectations are well we can
access the individual characters.

40
00:02:18.080 --> 00:02:20.920
We can do input output with it
like print it to the console or

41
00:02:20.920 --> 00:02:21.910
add it to a DOM element.

42
00:02:24.550 --> 00:02:25.840
It's the value types that matter.

43
00:02:25.840 --> 00:02:27.920
So we want to look at
these primitive types.

44
00:02:27.920 --> 00:02:32.250
Natives this actually frankly a kind
of confusing part of JavaScript.

45
00:02:32.250 --> 00:02:34.840
It's a bit of some historical

46
00:02:36.210 --> 00:02:40.630
baggage that we get from the language
having been designed to be attractive.

47
00:02:40.630 --> 00:02:43.320
It's interesting that JavaScript was
designed to be attractive to Java

48
00:02:43.320 --> 00:02:46.400
developers, but I've never met any
crowd other than the Haskell folks.

49
00:02:46.400 --> 00:02:50.430
I've never met any crowd in all of
programming that hates JavaScript more

50
00:02:50.430 --> 00:02:53.110
than the Java developers of the world.

51
00:02:53.110 --> 00:02:56.010
And I'm not making that too broadly,
obviously there's plenty of people

52
00:02:56.010 --> 00:03:00.210
that like to write both but
it seems like when I teach

53
00:03:00.210 --> 00:03:04.530
the most vocal opponents of JavaScript
are those that come from the Java land.

54
00:03:04.530 --> 00:03:08.670
So interesting that natives were added
as one of the ways to try to make

55
00:03:08.670 --> 00:03:12.280
JavaScript more palatable to Java
developers to make it look more familiar.

56
00:03:13.740 --> 00:03:15.886
If you don't know
the history of JavaScript,

57
00:03:15.886 --> 00:03:19.846
it's Brendan Ike went to Netscape in 1995
wanting to put schema in the browser and

58
00:03:19.846 --> 00:03:23.607
in the job interview they're like yeah
yeah yeah come put schema in the browser.

59
00:03:23.607 --> 00:03:25.551
And then when he showed up they're
like no no no that's crazy.

60
00:03:25.551 --> 00:03:27.085
We're not going to put
schema in the browser.

61
00:03:27.085 --> 00:03:28.762
Anybody ever had that before?

62
00:03:28.762 --> 00:03:31.595
They tell you one thing on the job
interview than on the job.

63
00:03:31.595 --> 00:03:34.880
[CROSSTALK]
&gt;&gt; Speaker 2: Job was getting hard, right?

64
00:03:34.880 --> 00:03:39.460
&gt;&gt; Kyle Simpson: Job was getting hard and
they said now, we need something a little

65
00:03:39.460 --> 00:03:42.980
like JavaScript, it can be right a way
cuz we can't put job in the browser.

66
00:03:42.980 --> 00:03:45.720
that would be crazy to put like
a Java plugin in a browser.

67
00:03:47.500 --> 00:03:49.280
Make it look like Java then,

68
00:03:49.280 --> 00:03:52.850
don't make it look like scheme
because that's just academic program.

69
00:03:52.850 --> 00:03:56.600
So there's a lot that was added
to the language, affordances,

70
00:03:56.600 --> 00:03:59.120
if you will,
to try to make it look more like that.

71
00:03:59.120 --> 00:04:03.927
And the truth is, JavaScript actually has
a lot more in common with Scheme than it

72
00:04:03.927 --> 00:04:05.424
does with Java or C++.

73
00:04:07.049 --> 00:04:11.089
&gt;&gt; Kyle Simpson: It appears on the surface
syntactically to be more from the C family

74
00:04:11.089 --> 00:04:15.491
of programming languages because we
have curly braces and semicolons,

75
00:04:15.491 --> 00:04:19.765
everybody's favorite
syntactic affordances, right?

76
00:04:19.765 --> 00:04:23.085
It appears on the surface to be more
like that but actually under the covers,

77
00:04:23.085 --> 00:04:25.140
it's way more related to scheme.

78
00:04:27.920 --> 00:04:31.410
More on the functional
matrix JavaScript writing.

79
00:04:31.410 --> 00:04:36.180
All right, some natives, they are
confusing part how we should approach and

80
00:04:36.180 --> 00:04:38.000
how we shouldn't do it with them.

81
00:04:38.000 --> 00:04:41.060
Then everybody's dreaded topic coercion.

82
00:04:41.060 --> 00:04:46.950
I really wanna dig into coercion and
I want you to understand more about

83
00:04:46.950 --> 00:04:51.900
how this is and how it works, and why it's
not actually a negative of the language.

84
00:04:51.900 --> 00:04:56.190
Coercion is actually a very necessary
part of the programming language.

85
00:04:56.190 --> 00:04:59.670
And I wanna give you a frame of reference
or a different way of thinking about it

86
00:04:59.670 --> 00:05:04.340
that suggests that it's something that
we actually should embrace in our code.

87
00:05:06.320 --> 00:05:09.950
And that will lead us into a discussion
of equality which is the most common

88
00:05:09.950 --> 00:05:14.690
of the misunderstood parts of the types
system and the coercion system.

89
00:05:14.690 --> 00:05:17.280
How coercion interplays
with equality checks

