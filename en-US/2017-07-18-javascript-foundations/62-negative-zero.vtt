WEBVTT

1
00:00:00.390 --> 00:00:02.420
&gt;&gt; Kyle Simpson: Moving on
to our next special value.

2
00:00:02.420 --> 00:00:03.849
We'll talk about negative zero.

3
00:00:03.849 --> 00:00:07.245
You're gonna have to suspend some of your
mathematic belief for just a moment, and

4
00:00:07.245 --> 00:00:10.040
pretend that there is such
a thing as a negative zero.

5
00:00:10.040 --> 00:00:14.540
And if in that hypothetical world
there is, can we all at least agree

6
00:00:14.540 --> 00:00:19.020
that if there is a negative zero,
basically the only way to get a negative

7
00:00:19.020 --> 00:00:24.240
zero would be to do a multiplication or
division with a negative value and zero.

8
00:00:24.240 --> 00:00:28.590
Because it wouldn't make any sense to
add up or subtract to a negative zero.

9
00:00:28.590 --> 00:00:31.420
It's not like negative three plus
three would be negative zero or

10
00:00:31.420 --> 00:00:32.520
something like that.

11
00:00:32.520 --> 00:00:33.340
So multiplication or

12
00:00:33.340 --> 00:00:37.890
division would be the only way that we
could result in such a value, okay?

13
00:00:37.890 --> 00:00:41.325
So if we were to take zero and
divide it by negative three,

14
00:00:41.325 --> 00:00:45.330
it should result in this negative
0 value should one exist.

15
00:00:45.330 --> 00:00:47.154
And it turns out if we test for
it, we get true.

16
00:00:47.154 --> 00:00:51.320
But unfortunately, if we test for
the regular zero, we also get true.

17
00:00:51.320 --> 00:00:54.680
So line 3 lets us know there's
something weird going on.

18
00:00:54.680 --> 00:00:57.105
How can it both be negative 0 and 0?

19
00:00:57.105 --> 00:01:00.417
And many people stop at line 3 and
just assume well, okay,

20
00:01:00.417 --> 00:01:04.684
I guess there isn't a negative zero,
it's just ignoring that minus sign.

21
00:01:04.684 --> 00:01:08.550
Some of you may have
been confused by this.

22
00:01:08.550 --> 00:01:10.760
I certainly was confused for
quite a while.

23
00:01:10.760 --> 00:01:12.940
When you see negative 3 there on line 1.

24
00:01:14.090 --> 00:01:19.950
You probably think to yourself, JavaScript
treats that as a number called negative 3.

25
00:01:19.950 --> 00:01:22.540
But that's not how JavaScript
actually parses it.

26
00:01:22.540 --> 00:01:28.199
JavaScript actually parses it as
the number 3 then it's operated

27
00:01:28.199 --> 00:01:35.170
on by the unary negate minus operator
to produce the actual negative 3 value.

28
00:01:35.170 --> 00:01:36.868
There is no such thing
as a negative 3 literal.

29
00:01:36.868 --> 00:01:41.640
There is the 3 literal and then the minus
sign is an operator in front of it, and

30
00:01:41.640 --> 00:01:43.570
I find that bizarre.

31
00:01:43.570 --> 00:01:48.030
It's part of the reason why even in syntax
highlighting, you see that minus sign

32
00:01:48.030 --> 00:01:51.220
highlighted as an operator as opposed
doing the same color as the literal,

33
00:01:51.220 --> 00:01:54.000
because JavaScript doesn't
actually treat that as a literal.

34
00:01:54.000 --> 00:01:56.360
What that means is when we
deal with negative zero,

35
00:01:56.360 --> 00:01:58.190
we are operating on that zero.

36
00:01:58.190 --> 00:02:01.400
It's not like negative 0 is just ignored,

37
00:02:01.400 --> 00:02:05.210
it's that we are taking the regular
0 value on line 2 and negating it.

38
00:02:05.210 --> 00:02:08.200
So we are producing
the negative zero value.

39
00:02:08.200 --> 00:02:12.800
But how is it that foo can be triple equal
to negative zero and to regular zero?

40
00:02:13.880 --> 00:02:17.000
Well, the problem is not that
there isn't a negative zero, but

41
00:02:17.000 --> 00:02:19.250
that the triple equals
operator lies to us.

42
00:02:20.350 --> 00:02:21.500
And it doest that on purpose.

43
00:02:21.500 --> 00:02:25.400
If you read the spec, it literally says
if there's a negative zero, return true.

44
00:02:26.470 --> 00:02:30.000
So y isn't lying to us.

45
00:02:30.000 --> 00:02:31.810
Well, this is kinda what I
was talking about earlier.

46
00:02:33.000 --> 00:02:35.920
In the early days of JavaScript,
there was a design aesthetic

47
00:02:35.920 --> 00:02:38.503
that was basically try to be
as forgiving as possible,

48
00:02:38.503 --> 00:02:41.552
try to hide as many warts as
possible that might confuse people.

49
00:02:41.552 --> 00:02:46.081
And if you think about the earliest use
cases, many people were using JavaScript

50
00:02:46.081 --> 00:02:50.743
to translate those Java plugins into web
forms like e-commerce ordering forms and

51
00:02:50.743 --> 00:02:51.845
things like that.

52
00:02:51.845 --> 00:02:55.660
So I can imagine one of this cases
that they really wanted to avoid was

53
00:02:55.660 --> 00:02:59.897
somebody showing up within their
quantity field on an e-commerce forms,

54
00:02:59.897 --> 00:03:01.980
negative zero for the quantity zero.

55
00:03:01.980 --> 00:03:03.520
Cuz that doesn't make any sense, right?

56
00:03:03.520 --> 00:03:05.890
And it doesn't make any sense to a user.

57
00:03:05.890 --> 00:03:08.890
So how could we end up
with a negative zero here?

58
00:03:08.890 --> 00:03:13.177
So, what they basically did was when they
said all the different operations that

59
00:03:13.177 --> 00:03:15.006
could operate on a negative zero,

60
00:03:15.006 --> 00:03:18.368
just make it pretend as if you
were operating on a regular zero.

61
00:03:18.368 --> 00:03:20.995
In other words, try to hide the fact
that there is a negative zero.

62
00:03:20.995 --> 00:03:24.850
Which is why the === operator here works.

63
00:03:24.850 --> 00:03:29.130
Even when negative zero is compared to
regular zero, it actually says true.

64
00:03:30.240 --> 00:03:36.310
That's a strange choice, and it's even
true if you try to coerce it to a string.

65
00:03:36.310 --> 00:03:39.070
If you try to take the negative zero and
call two string on it,

66
00:03:39.070 --> 00:03:43.030
or negative zero and pass it in
the string function then you're gonna get

67
00:03:43.030 --> 00:03:47.860
regular zero instead of negative zero,
which is bizarre, right?

68
00:03:47.860 --> 00:03:51.280
But again, it was because they were
trying to hide the fact that this exists.

69
00:03:51.280 --> 00:03:56.960
So in all of our cases of
how we wanna try to test for

70
00:03:56.960 --> 00:03:59.100
the negative zero, it fails for us.

71
00:03:59.100 --> 00:04:03.250
Even if you try this in your browser,
and you type in foo.

72
00:04:03.250 --> 00:04:06.230
Up until about a year,
a year and a half ago,

73
00:04:06.230 --> 00:04:10.660
it would print regular zero in the browser
console instead of negative zero.

74
00:04:10.660 --> 00:04:12.910
And then it finally started passing it,

75
00:04:12.910 --> 00:04:18.150
because I complained enough to the browser
vendors, the development tool teams.

76
00:04:18.150 --> 00:04:19.100
Because I'm a teacher and

77
00:04:19.100 --> 00:04:23.060
I spend a lot of time teaching people in
web developer consoles, it's frustrating

78
00:04:23.060 --> 00:04:26.460
to me when the web developer console
doesn't work the way it ought to.

79
00:04:26.460 --> 00:04:31.260
And this is an unfortunate fact,
the web developer console is not a true,

80
00:04:31.260 --> 00:04:35.720
complete, totally reliable JavaScript
environment the way you might expect.

81
00:04:35.720 --> 00:04:39.360
You might think, I just open up my
console, it's a clean, empty page.

82
00:04:39.360 --> 00:04:41.220
I have a fresh JavaScript context,

83
00:04:41.220 --> 00:04:44.600
it's gonna behave exactly as if
I wrote my program this way.

84
00:04:44.600 --> 00:04:45.170
That's not the case.

85
00:04:46.530 --> 00:04:50.930
The console is not down by any spec,
and they can do whatever they want.

86
00:04:50.930 --> 00:04:56.333
So it's more appropriate to think
of your console and JavaScript-like

87
00:04:56.333 --> 00:05:01.540
than actual real core exactly
the same global JavaScript, okay?

88
00:05:01.540 --> 00:05:04.720
As a matter of fact,
node is also JavaScript-like.

89
00:05:04.720 --> 00:05:07.970
Not actually true, real, and
complete in all possible ways.

90
00:05:07.970 --> 00:05:10.830
Cuz it turns out that node does a bunch
of funky stuff like wrapping your

91
00:05:10.830 --> 00:05:13.390
code in module definitions and
things like that.

92
00:05:13.390 --> 00:05:17.230
They change the way you might expect
actual just regular JavaScript,

93
00:05:17.230 --> 00:05:19.040
the standalone line of code to work.

94
00:05:20.100 --> 00:05:22.894
So there really is only
one environment that

95
00:05:22.894 --> 00:05:25.761
you can write a line of
code all by itself, and

96
00:05:25.761 --> 00:05:30.836
guarantee that it's gonna work exactly
the way that core JavaScript expects.

97
00:05:30.836 --> 00:05:36.790
And that is to put it in its own file and
load that file in a webpage, that's it.

98
00:05:38.060 --> 00:05:41.095
Every other environment, you're gonna
need to have that caveat in mind,

99
00:05:41.095 --> 00:05:45.100
that they might be doing funky stuff
like changing the way something prints,

100
00:05:45.100 --> 00:05:47.830
because they think it's more friendly
to a developer or something.

101
00:05:47.830 --> 00:05:50.580
This was basically lying to developers and
that was my case.

102
00:05:50.580 --> 00:05:53.610
I said, quit lying to developers,
that's not helping anything.

103
00:05:53.610 --> 00:05:55.620
Tell them the truth, okay?

104
00:05:55.620 --> 00:05:58.756
I fought this battle about a dozen
times on different topics and

105
00:05:58.756 --> 00:06:01.904
I've had about a 50,
50 success rate of convincing them.

106
00:06:01.904 --> 00:06:04.137
Stop doing stupid stuff
that makes it hard for

107
00:06:04.137 --> 00:06:06.910
developers to understand
what they're doing, okay?

108
00:06:08.574 --> 00:06:13.900
[COUGH] I actually had a member of
the Google Chrome developer team tell me,

109
00:06:13.900 --> 00:06:16.660
we don't want the console to be
in an environment where people

110
00:06:16.660 --> 00:06:17.550
author JavaScript in.

111
00:06:19.210 --> 00:06:23.200
As counterintuitive that seems,
that is not a design goal of theirs.

112
00:06:23.200 --> 00:06:25.840
So when it doesn't behave like
a JavaScript authoring environment,

113
00:06:25.840 --> 00:06:29.870
they're like works as intended,
closing the book, okay?

114
00:06:29.870 --> 00:06:34.188
So just keep that in mind.
&gt;&gt; Kyle Simpson: So, if we can't test for

115
00:06:34.188 --> 00:06:38.360
foo being negative zero in any way
that we have meaningful to us.

116
00:06:38.360 --> 00:06:42.281
The stringification, the equals,
all these systems are gonna lie to us.

117
00:06:42.281 --> 00:06:43.846
How do you think we can test for

118
00:06:43.846 --> 00:06:45.189
negative zero?
&gt;&gt; Speaker 2: Check for

119
00:06:45.189 --> 00:06:50.380
reciprocal of its negative infinity?
&gt;&gt; Kyle Simpson: Turns out if we divide it

120
00:06:50.380 --> 00:06:53.630
into 1, we're gonna get negative infinity.

121
00:06:55.070 --> 00:06:58.320
That's the only way we can get
negative infinity with the division,

122
00:06:58.320 --> 00:06:59.830
is if we add a negative 0.

123
00:06:59.830 --> 00:07:01.953
We need to check to make sure
it's one of the two zeroes.

124
00:07:01.953 --> 00:07:05.563
That's what the ===0 check is on line 2,

125
00:07:05.563 --> 00:07:10.714
cuz negative infinity would also
also equal negative infinity.

126
00:07:10.714 --> 00:07:16.460
[COUGH] But we need to make sure we,
if it is one of the two zeroes,

127
00:07:16.460 --> 00:07:19.130
then we can divide it into one and
get a negative infinity.

128
00:07:19.130 --> 00:07:23.610
So this is a reliable check for
negative zero, okay?

129
00:07:25.290 --> 00:07:28.650
Now, you might be wondering, why on earth,
this is a bunch of academic stuff,

130
00:07:28.650 --> 00:07:31.070
why on earth would I care
about a negative zero?

131
00:07:32.830 --> 00:07:35.913
There are some mechanisms
that have been in place, and

132
00:07:35.913 --> 00:07:39.206
I have legitimately actually
used this once in real code.

133
00:07:39.206 --> 00:07:40.939
There are some mechanisms,

134
00:07:40.939 --> 00:07:45.340
which encode into a number
multiple pieces of information.

135
00:07:45.340 --> 00:07:49.643
In particular, they will use the magnitude
of the number, the size of the number,

136
00:07:49.643 --> 00:07:53.580
to represent something like how fast
something is moving in animation, for

137
00:07:53.580 --> 00:07:54.143
example.

138
00:07:54.143 --> 00:07:59.020
And they'll use the sign of the number
to encode the direction of movement.

139
00:07:59.020 --> 00:08:03.359
I use this in a navigation sort of app,
where the number represented how

140
00:08:03.359 --> 00:08:06.920
fast the car was moving on this
map as it was being plotted.

141
00:08:06.920 --> 00:08:12.440
And then the direction was encoded by the
number, wasn't moving left or right, okay?

142
00:08:12.440 --> 00:08:15.760
So think about the moment
when it goes to zero.

143
00:08:15.760 --> 00:08:19.780
If you were to lose the sign, it would
lose the orientation of that little car.

144
00:08:20.930 --> 00:08:24.149
I wouldn't be able to know if
it was facing left or right,

145
00:08:24.149 --> 00:08:26.240
where was it moving when it stopped?

146
00:08:26.240 --> 00:08:27.945
What direction was it moving?

147
00:08:27.945 --> 00:08:28.980
I'd lose that information.

148
00:08:28.980 --> 00:08:34.430
So being able to encode direction as part
of this value in the sign is kind of

149
00:08:34.430 --> 00:08:37.250
an important thing, and we don't want to
lose that information when we go to zero.

150
00:08:38.320 --> 00:08:43.685
That's one example of wanting
a negative zero for capability's sake.

151
00:08:43.685 --> 00:08:48.063
And I'm not saying that's gonna be a
common thing across all your applications,

152
00:08:48.063 --> 00:08:49.268
but it should exist and

153
00:08:49.268 --> 00:08:53.977
we should be aware of that.
&gt;&gt; Kyle Simpson: All right,

154
00:08:53.977 --> 00:08:55.574
now both the NaN check and

155
00:08:55.574 --> 00:09:00.380
the 0 check that we're talking about,
they feel a little bit contrived.

156
00:09:02.290 --> 00:09:09.370
And so they added a new mechanism
in ES6 called Object.is.

157
00:09:09.370 --> 00:09:11.130
I do not like where they put it.

158
00:09:11.130 --> 00:09:14.084
I think it's a terrible idea to
put it on the object namespace,

159
00:09:14.084 --> 00:09:17.176
because it implies that we're
dealing something with objects.

160
00:09:17.176 --> 00:09:21.549
And it reinforces a misconception
that people have said for 22 years,

161
00:09:21.549 --> 00:09:25.359
that everything in JavaScript
is an object which is nonsense.

162
00:09:26.510 --> 00:09:28.820
So I don't like that
they put it on Object,

163
00:09:28.820 --> 00:09:33.330
but the is function actually turns out
to be kind of interesting and useful.

164
00:09:33.330 --> 00:09:37.760
The is function is kind of
a quadruple equals, okay?

165
00:09:37.760 --> 00:09:39.942
If you think about double
equals is doing one thing, and

166
00:09:39.942 --> 00:09:42.280
then triple equals seems
to be a more strict check.

167
00:09:42.280 --> 00:09:46.060
But it still lies to us on the topic of
negative zero and on the topic of NaN.

168
00:09:47.360 --> 00:09:51.020
The object that is, is the quadruple
equals which doesn't do any lying.

169
00:09:51.020 --> 00:09:55.080
My little anecdote for
this is I don't know if anybody remembers.

170
00:09:55.080 --> 00:09:57.001
But the TV commercials for,

171
00:09:57.001 --> 00:10:02.210
there's a brand of men's shaving razor
called Mach or something like that.

172
00:10:02.210 --> 00:10:05.726
I don't know, years and years ago, they
had the Mach one and had the single blade.

173
00:10:05.726 --> 00:10:08.466
And then it was a big deal when
they came out with the Mach two and

174
00:10:08.466 --> 00:10:09.680
it had two blades.

175
00:10:09.680 --> 00:10:12.330
Then a year later, there came out with
the Mach three and it had three blades.

176
00:10:12.330 --> 00:10:14.533
And you're like, all right, it's
getting a little bit ridiculous, right?

177
00:10:14.533 --> 00:10:16.529
And then they had like four,
five, six, seven.

178
00:10:16.529 --> 00:10:19.045
I think they're on like Mach 28 now or
something,

179
00:10:19.045 --> 00:10:20.768
they just keep adding more blades.

180
00:10:20.768 --> 00:10:25.130
So we just keep adding more equals until
we get really quality in JavaScript.

181
00:10:25.130 --> 00:10:26.520
It's kinda the four equals.

182
00:10:26.520 --> 00:10:29.280
[LAUGH]
Now,

183
00:10:29.280 --> 00:10:33.110
should you use Object.is instead of
the double or the triple equals?

184
00:10:33.110 --> 00:10:34.580
In general, no.

185
00:10:34.580 --> 00:10:38.862
In general, do not use this, because it is
not gonna more clearly communicate, and

186
00:10:38.862 --> 00:10:42.800
it's also probably not gonna
be necessarily as performing.

187
00:10:42.800 --> 00:10:45.452
But in the specific case of NaN and

188
00:10:45.452 --> 00:10:50.500
negative zero checking, you absolutely
should use the Object.is, okay?

189
00:10:50.500 --> 00:10:54.683
So for NaN or negative zero checking or
both, use Object.is because it will well,

190
00:10:54.683 --> 00:10:58.688
and true, and faithfully tell you the
answer to your question without any lying

191
00:10:58.688 --> 00:11:04.245
whatsoever.
&gt;&gt; Kyle Simpson: All right,

192
00:11:04.245 --> 00:11:08.990
so those are our special types, our
special values within the perimeter types.

193
00:11:08.990 --> 00:11:17.060
Quiz, baz = 2, what is the type of baz?
&gt;&gt; Kyle Simpson: Quote number,

194
00:11:17.060 --> 00:11:17.810
good, right?

195
00:11:19.090 --> 00:11:24.096
Now, I say var baz again and then I say
type of baz on line 4, what is the type of

196
00:11:24.096 --> 00:11:30.297
baz?
&gt;&gt; Students: [INAUDIBLE]

197
00:11:30.297 --> 00:11:32.390
&gt;&gt; Kyle Simpson: I hear different answers.

198
00:11:32.390 --> 00:11:35.237
Only some of you are correct.

199
00:11:35.237 --> 00:11:38.851
Who thinks it's quote undefined?

200
00:11:38.851 --> 00:11:41.969
Who thinks it's quote number?

201
00:11:41.969 --> 00:11:43.720
Who thinks it's something
other than those two?

202
00:11:45.130 --> 00:11:50.500
Okay, so the trick here is that we
think of line 3 as redeclaring baz.

203
00:11:52.040 --> 00:11:55.960
And people generally will consider
that to be recreating baz and

204
00:11:55.960 --> 00:11:57.960
creating in its undefined state.

205
00:11:57.960 --> 00:12:01.830
There's no such thing as
redeclaration in JavaScript, okay?

206
00:12:01.830 --> 00:12:04.120
So var baz on line 3 is a no op,

207
00:12:04.120 --> 00:12:06.690
it does not actually do
anything at all to the baz.

208
00:12:06.690 --> 00:12:11.750
The compiler would see that and
ignore it as a no op operation, okay?

209
00:12:11.750 --> 00:12:14.355
In which case,
line 4 is exactly the same as line 2,

210
00:12:14.355 --> 00:12:16.310
baz is still in its existent state.

211
00:12:17.560 --> 00:12:18.610
That's why we're getting quote number.

212
00:12:19.740 --> 00:12:20.476
And, what about line 5?

213
00:12:20.476 --> 00:12:21.890
I say baz = null.

214
00:12:21.890 --> 00:12:23.776
And then line 6,
what's gonna be the type of baz?

215
00:12:23.776 --> 00:12:25.835
&gt;&gt; Students: Quote object.

216
00:12:25.835 --> 00:12:26.630
&gt;&gt; Kyle Simpson: Quote object.

217
00:12:26.630 --> 00:12:30.810
Instead of quote null like it ought to be,
it's gonna say quote object.

218
00:12:30.810 --> 00:12:34.027
All right, now line 8,
[COUGH] I take a string, the string baz,

219
00:12:34.027 --> 00:12:35.226
and I multiply it by 3.

220
00:12:35.226 --> 00:12:40.044
There are some languages, for example,
Ruby where the results of that will be

221
00:12:40.044 --> 00:12:43.000
repeating the string,
baz, baz, baz [LAUGH].

222
00:12:43.000 --> 00:12:44.240
That's not what JavaScript does.

223
00:12:44.240 --> 00:12:47.570
JavaScript defines
multiplication as only numeric.

224
00:12:47.570 --> 00:12:51.310
So, what's gonna happen
with the value in line 9?

225
00:12:51.310 --> 00:12:54.307
&gt;&gt; Students: Add the number.

226
00:12:54.307 --> 00:12:54.818
&gt;&gt; Kyle Simpson: Okay,

227
00:12:54.818 --> 00:12:58.571
it's gonna try to coerce,
quote baz into a number,

228
00:12:58.571 --> 00:13:02.280
that's gonna fail resulting in Nan.

229
00:13:02.280 --> 00:13:06.870
We're gonna have the invalid number Nan,
and Nan times 3 is still gonna be Nan.

230
00:13:06.870 --> 00:13:10.140
Now, but
what about the type of baz on line 10?

231
00:13:10.140 --> 00:13:11.850
&gt;&gt; Students: Quote number.

232
00:13:11.850 --> 00:13:12.976
&gt;&gt; Kyle Simpson: Quote number, okay?

233
00:13:12.976 --> 00:13:16.236
Baz = 1 divided by 0 on line 12,

234
00:13:16.236 --> 00:13:20.586
what is the value of baz in line 13?
&gt;&gt; Speaker 4: Infinity.

235
00:13:20.586 --> 00:13:22.373
&gt;&gt; Kyle Simpson: Infinity.

236
00:13:22.373 --> 00:13:23.891
And what is the type of baz?
&gt;&gt; Speaker 4: Quote

237
00:13:23.891 --> 00:13:26.000
number.
&gt;&gt; Kyle Simpson: Quote number.

238
00:13:26.000 --> 00:13:27.544
Infinity is a number.

239
00:13:27.544 --> 00:13:31.340
I've actually had people suggest it
should be something other than a number.

240
00:13:31.340 --> 00:13:33.040
It's definitely a number, okay?

