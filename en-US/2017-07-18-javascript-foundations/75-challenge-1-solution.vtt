WEBVTT

1
00:00:00.208 --> 00:00:02.121
&gt;&gt; Speaker 1: Let's talk about Exercise 1.

2
00:00:02.121 --> 00:00:04.458
So we'll kind of walk through
a few of these things.

3
00:00:04.458 --> 00:00:09.434
The readme said to check to see if
there were strings that should have

4
00:00:09.434 --> 00:00:11.715
been numbers, or vice versa.

5
00:00:11.715 --> 00:00:14.873
There were a couple of places
where that ended up happening, so

6
00:00:14.873 --> 00:00:16.310
I wanted to point those out.

7
00:00:16.310 --> 00:00:21.775
The first is, if we look in
this click handler right here,

8
00:00:21.775 --> 00:00:24.905
the one that starts on line 10.

9
00:00:24.905 --> 00:00:29.571
This click handler's what happens when you
click the button to add the entry that

10
00:00:29.571 --> 00:00:31.159
you've put into the form.

11
00:00:31.159 --> 00:00:35.253
And you'll notice that we're pulling
those values directly out of the form and

12
00:00:35.253 --> 00:00:38.566
then passing them onto to this
add to work function on line 23.

13
00:00:38.566 --> 00:00:40.971
We're just passing them along as is.

14
00:00:40.971 --> 00:00:45.177
Now the project ID and
the minutes are actually numbers.

15
00:00:45.177 --> 00:00:49.177
And there are places where we
rely upon those to be numbers so

16
00:00:49.177 --> 00:00:53.666
that they are matching correctly,
in particular the project ID.

17
00:00:53.666 --> 00:00:58.489
We hard code the project in,
like the project name.

18
00:00:58.489 --> 00:01:03.432
But the ID for the project when it's
generated, if you come to the addProject

19
00:01:03.432 --> 00:01:08.900
function, you'll notice that that's
a randomly generated number.

20
00:01:08.900 --> 00:01:11.890
So whatever number is passed
in from the select box,

21
00:01:11.890 --> 00:01:13.940
we need to make sure that it's a number,

22
00:01:13.940 --> 00:01:18.360
because there is gonna be a checked
on that check up and is right here.

23
00:01:18.360 --> 00:01:22.966
To check to make sure that the project ID
that's passed in is the same as what's in

24
00:01:22.966 --> 00:01:24.476
the project's element.

25
00:01:24.476 --> 00:01:28.177
And you'll notice I'm using a triple
equals there to make sure that it exactly

26
00:01:28.177 --> 00:01:29.080
matches.

27
00:01:29.080 --> 00:01:33.090
So one option would have been for
you to relax that with a double equals.

28
00:01:33.090 --> 00:01:34.880
That's one way of approaching it.

29
00:01:34.880 --> 00:01:38.490
And typically speaking, I would generally
say, yeah, it's not a bad idea for

30
00:01:38.490 --> 00:01:40.150
there to be a double equals there.

31
00:01:40.150 --> 00:01:43.795
What difference does it make whether it's
the string or the number equivalent?

32
00:01:43.795 --> 00:01:49.470
But I'm actually gonna do it the other way
because there's a bigger question at play.

33
00:01:49.470 --> 00:01:52.350
Because minutes definitely
needs to be a number.

34
00:01:52.350 --> 00:01:57.512
So as a rule of thumb, I don't want
to pass around or propagate a piece

35
00:01:57.512 --> 00:02:04.470
of data through a system if it's not yet
in it's appropriate type representation.

36
00:02:04.470 --> 00:02:07.130
So the first place for
me to fix that is right here.

37
00:02:07.130 --> 00:02:11.162
So I could fix that by explicitly
coercing both the project ID and

38
00:02:11.162 --> 00:02:13.186
the minutes to the number form.

39
00:02:13.186 --> 00:02:15.789
So I'm gonna use the number
function to do that.

40
00:02:21.738 --> 00:02:26.480
&gt;&gt; Speaker 1: Now I don't need to change
that triple equals to a double equals

41
00:02:26.480 --> 00:02:31.045
because we're ensuring that in
all places where the project

42
00:02:31.045 --> 00:02:33.655
idea's compared it's a number.

43
00:02:33.655 --> 00:02:35.642
So the triple equals is fine.

44
00:02:35.642 --> 00:02:38.317
You could also simplify
it to a double equals.

45
00:02:38.317 --> 00:02:42.348
Based only on the notion that
if they're both numbers,

46
00:02:42.348 --> 00:02:45.792
there's no reason for
the triple equals here.

47
00:02:45.792 --> 00:02:48.192
The double equal suffices cuz
they're of the same type.

48
00:02:48.192 --> 00:02:52.462
So either way you wanted to go about that,
you could set it as double equals or

49
00:02:52.462 --> 00:02:54.408
leave it as triple equals, okay?

50
00:02:54.408 --> 00:02:57.130
Now that we've made
the minutes into numbers,

51
00:02:57.130 --> 00:03:00.327
you might have then started to notice,
if you tried it,

52
00:03:00.327 --> 00:03:05.021
you might have then started to notice that
when it was printing out the time, it was

53
00:03:05.021 --> 00:03:10.081
clearly doing some concatenation with like
an undefined value or something like that.

54
00:03:10.081 --> 00:03:15.350
That's because currently,
the addition of those minutes is not

55
00:03:15.350 --> 00:03:20.351
happening with the value that
is already guaranteed to be 0.

56
00:03:20.351 --> 00:03:24.287
So for example, right here when we keep
track of the total project time, we're

57
00:03:24.287 --> 00:03:28.487
just saying project time, essentially
incrementing it by that number of minutes.

58
00:03:28.487 --> 00:03:32.409
But if projects.time has not
already been set to some number,

59
00:03:32.409 --> 00:03:36.775
then now we're concatenating or
adding undefined with minutes, and

60
00:03:36.775 --> 00:03:40.847
that's gonna end up as name right
cuz unrefined coerces to name.

61
00:03:40.847 --> 00:03:42.729
So there's a couple of ways
you could have solved that.

62
00:03:42.729 --> 00:03:48.010
You could have, in the project entry,
you could have forcibly set down here,

63
00:03:48.010 --> 00:03:50.663
you could have forcibly set time to 0.

64
00:03:50.663 --> 00:03:51.913
That's one way of doing it.

65
00:03:51.913 --> 00:03:53.964
You could initialize it to 0.

66
00:03:53.964 --> 00:03:57.960
The other way of doing it which was
a little bit more coercive Is to

67
00:03:57.960 --> 00:04:00.772
coerce this thing to
definitely be a number or

68
00:04:00.772 --> 00:04:05.290
to ensure this is definitely a number
using what we know about coercion.

69
00:04:05.290 --> 00:04:07.837
Here the default value idiom
might have been appropriate.

70
00:04:07.837 --> 00:04:12.456
So we could have said projects.time or 0.

71
00:04:12.456 --> 00:04:16.310
Cuz if it's not already set, or
even if it was set, but it was set to 0,

72
00:04:16.310 --> 00:04:20.511
it doesn't matter, we can use 0 as
the base point for the numeric addition.

73
00:04:20.511 --> 00:04:24.639
So the default idiom seems to be
a little bit more appropriate here for

74
00:04:24.639 --> 00:04:28.978
encoding our intent., which is our
intent is if it's not already set,

75
00:04:28.978 --> 00:04:30.779
just use 0 as the base point.

76
00:04:31.860 --> 00:04:36.221
There's another place where that happens,
and that is,

77
00:04:36.221 --> 00:04:38.541
check where we add up the work.

78
00:04:42.471 --> 00:04:43.899
&gt;&gt; Speaker 1: That happens right here.

79
00:04:43.899 --> 00:04:48.581
Again, if the project entry
doesn't already have the time, so

80
00:04:48.581 --> 00:04:52.062
we can default idiom,
the project entry to 0.

81
00:04:56.042 --> 00:04:58.416
&gt;&gt; Speaker 1: Okay, so
that should take care of the items,

82
00:04:58.416 --> 00:05:00.359
unless I'm forgetting something.

83
00:05:00.359 --> 00:05:02.882
That should take care of
several of the items.

84
00:05:02.882 --> 00:05:07.571
But there's a couple of other places where
things still wouldn't be working correct.

85
00:05:07.571 --> 00:05:11.654
In particular, you might have discovered
that the output when we formatted

86
00:05:11.654 --> 00:05:14.680
the time,
the output seemed to be incorrect.

87
00:05:14.680 --> 00:05:19.317
And it's because I intentionally have
the order of operations here not safe to

88
00:05:19.317 --> 00:05:21.787
the type conversions that we're doing.

89
00:05:21.787 --> 00:05:24.758
This is something obviously that
TypeScript would have caught for you.

90
00:05:24.758 --> 00:05:28.506
So this is one of those examples
of places where people would say,

91
00:05:28.506 --> 00:05:32.885
well TypeScript would have let me know
that my variable was changing types.

92
00:05:32.885 --> 00:05:38.332
But you'll notice that here I
changed minutes to be a string,

93
00:05:38.332 --> 00:05:43.150
and then I rely upon minutes
to be checked to see whether

94
00:05:43.150 --> 00:05:46.525
at 0 to just return the empty string.

95
00:05:46.525 --> 00:05:50.207
You might not have caught that unless
you tried to enter in no time for

96
00:05:50.207 --> 00:05:53.180
an element and
it should have printed out as empty, and

97
00:05:53.180 --> 00:05:56.299
it might have been printing
out as something different.

98
00:05:56.299 --> 00:05:57.921
Perhaps with a nan or something.

99
00:05:57.921 --> 00:06:03.405
So here the order of those two
operations needs to be swapped.

100
00:06:03.405 --> 00:06:07.395
Because we can't rely upon,
now line 150 needs to rely upon

101
00:06:07.395 --> 00:06:12.310
minutes still being a number if it's
gonna do that comparison of getting 0.

102
00:06:12.310 --> 00:06:14.236
We can't change it to be a string.

103
00:06:14.236 --> 00:06:19.271
And especially a string would
have other stuff in it.

104
00:06:19.271 --> 00:06:20.899
Or it wouldn't compare.

105
00:06:23.527 --> 00:06:24.549
&gt;&gt; Speaker 1: Okay?

106
00:06:28.395 --> 00:06:31.960
&gt;&gt; Speaker 1: Next we need to look at
the validate work entry function and

107
00:06:31.960 --> 00:06:34.232
implement those validation rules.

108
00:06:34.232 --> 00:06:38.396
First, the rule is that the description
text needed to be at least five

109
00:06:38.396 --> 00:06:39.533
characters long.

110
00:06:39.533 --> 00:06:41.549
Rather than re implement this function,

111
00:06:41.549 --> 00:06:45.075
I'm simply gonna switch to the solution
file and show you how I did that.

112
00:06:45.075 --> 00:06:50.946
You'll notice that description.length,
if it's less than five, I return false.

113
00:06:50.946 --> 00:06:55.907
I have a bias here in my
validate functions to

114
00:06:55.907 --> 00:07:00.879
always return a boolean,
a false or a true.

115
00:07:00.879 --> 00:07:03.882
Sometimes people just
do an early return and

116
00:07:03.882 --> 00:07:09.168
then rely upon the undefined that gets
returned as coercing to a false value.

117
00:07:09.168 --> 00:07:13.303
Because you'll notice when you use
the validate work entry here we just do

118
00:07:13.303 --> 00:07:15.890
a boolean check against it.

119
00:07:15.890 --> 00:07:19.400
So you could just do a return
here without anything, but

120
00:07:19.400 --> 00:07:21.480
I think this more clearly
communicates the intent.

121
00:07:21.480 --> 00:07:27.470
I'm affirmatively saying the validation
failed by saying return false, okay?

122
00:07:27.470 --> 00:07:31.356
And the same down here with true,
I'm saying if we get to this point,

123
00:07:31.356 --> 00:07:34.778
the validation clearly succeeded and
I'm returning true.

124
00:07:34.778 --> 00:07:35.803
Make sense?

125
00:07:35.803 --> 00:07:41.799
So my description length check,
if it's less than five, that's a failure.

126
00:07:41.799 --> 00:07:45.174
The readme says to also make
sure that minutes has to be

127
00:07:45.174 --> 00:07:49.452
a non-empty value ignoring the leading and
trailing white space.

128
00:07:49.452 --> 00:07:53.572
So I kinda knew right off the bat,
okay, I'm gonna need something

129
00:07:53.572 --> 00:07:57.340
like a regular expression or
something like that to ignore.

130
00:07:57.340 --> 00:08:02.080
The first thing is,
if I enter in something

131
00:08:02.080 --> 00:08:07.160
consisting only of white space,
that's what this check is doing.

132
00:08:07.160 --> 00:08:10.860
If I have something consisting only
of white space or if it's empty,

133
00:08:10.860 --> 00:08:15.290
cuz I used the star here, then that lets
me know that this was a failed entry.

134
00:08:15.290 --> 00:08:21.080
You'll notice in the read me it says
leaving minutes blank is not valid,

135
00:08:21.080 --> 00:08:22.580
it's invalid okay?

136
00:08:22.580 --> 00:08:26.183
So I wanted to check to make sure
that I wasn't leaving minutes blank.

137
00:08:26.183 --> 00:08:30.011
I also wanted to check to
make sure that what was being

138
00:08:30.011 --> 00:08:34.110
Put into minutes could valuably
be coerced to a number.

139
00:08:34.110 --> 00:08:38.387
So I first coerced it to a number and then
checked to make sure that it wasn't NaN.

140
00:08:38.387 --> 00:08:43.728
I used a number.isNaN, could have also
used object.isthere if you prefer.

141
00:08:43.728 --> 00:08:45.867
And then I checked to
make sure that minutes,

142
00:08:45.867 --> 00:08:49.244
given that I knew that it was in
the correct range, I checked to make sure

143
00:08:49.244 --> 00:08:53.018
that minutes was within the appropriate
range where it wasn't less than 0, so

144
00:08:53.018 --> 00:08:55.754
it wasn't negative and
it wasn't greater than 600.

145
00:08:55.754 --> 00:09:00.294
That allows me then to set a minutes
of 0 if I didn't wanna log any

146
00:09:00.294 --> 00:09:03.923
time against that particular work action,
okay?

147
00:09:08.841 --> 00:09:09.799
&gt;&gt; Speaker 1: The less than and

148
00:09:09.799 --> 00:09:13.434
greater than here are taking
advantage of implicit coercion.

149
00:09:13.434 --> 00:09:16.109
I did not,
at the top of my validate function,

150
00:09:16.109 --> 00:09:21.070
explicitly coerce minutes to a number,
and then do my checks against numbers.

151
00:09:21.070 --> 00:09:22.240
Why didn't I do that?

152
00:09:22.240 --> 00:09:23.564
Anybody spot why?

153
00:09:29.497 --> 00:09:31.115
&gt;&gt; Speaker 2: Cuz you have-
&gt;&gt; Speaker 3: Is it the?

154
00:09:31.115 --> 00:09:31.822
&gt;&gt; Speaker 1: What's that?

155
00:09:31.822 --> 00:09:32.820
&gt;&gt; Speaker 3: The regex?

156
00:09:32.820 --> 00:09:34.642
&gt;&gt; Speaker 1: Yeah,
because I wanted to test,

157
00:09:34.642 --> 00:09:39.135
if I hit coerced minutes to a number,
like if I say minutes= Number{minutes},

158
00:09:39.135 --> 00:09:43.647
all right cuz the first time I was making
this exercise that was my first approach.

159
00:09:43.647 --> 00:09:45.373
And then I thought wait a minute.

160
00:09:45.373 --> 00:09:50.023
What happens if somebody leaves it blank,
it's an empty string,

161
00:09:50.023 --> 00:09:52.441
and what's that gonna coerce to?

162
00:09:52.441 --> 00:09:54.065
That's gonna coerce to zero,

163
00:09:54.065 --> 00:09:58.251
zero is supposed to be an allowed value
here according to the validation rules,

164
00:09:58.251 --> 00:10:01.513
that's an allowed value, but
empty is not an allowed value.

165
00:10:01.513 --> 00:10:04.431
So I can't coerce first
before I check whether or

166
00:10:04.431 --> 00:10:08.390
not it's been passed in as
an empty string, make sense?

167
00:10:08.390 --> 00:10:11.617
So I needed to do my check first
against the string value, and

168
00:10:11.617 --> 00:10:13.971
then do my check against
the coerced value.

169
00:10:13.971 --> 00:10:18.683
I took advantage of the fact that on
lines 35 and 36 here that minutes,

170
00:10:18.683 --> 00:10:23.319
that the less than and greater than
operators will automatically coerce

171
00:10:23.319 --> 00:10:28.191
those to numbers, since they're doing
a comparison with numbers, okay?

172
00:10:31.193 --> 00:10:35.218
&gt;&gt; Speaker 1: And that represents
the work to do on the exercise.

173
00:10:35.218 --> 00:10:39.645
So what questions can I
answer about exercise one?

174
00:10:39.645 --> 00:10:41.474
&gt;&gt; Speaker 2: Can you please explain,

175
00:10:41.474 --> 00:10:45.050
what happens if we remove
the line number is NaN.

176
00:10:45.050 --> 00:10:45.957
&gt;&gt; Speaker 1: This one?

177
00:10:45.957 --> 00:10:48.054
&gt;&gt; Speaker 2: Yeah, I mean, what case,

178
00:10:48.054 --> 00:10:52.715
I just don't quite get what case
that [INAUDIBLE] correctly.

179
00:10:52.715 --> 00:10:56.596
&gt;&gt; Speaker 1: So
if we compare a string with a number,

180
00:10:56.596 --> 00:11:00.478
like if minutes came in as a string, and

181
00:11:00.478 --> 00:11:08.383
it was something other than a number
representation, then what would happen.

182
00:11:08.383 --> 00:11:09.869
Let me just.

183
00:11:09.869 --> 00:11:11.324
I'll literally comment it out.

184
00:11:11.324 --> 00:11:12.934
I gotta remember to undo it.

185
00:11:12.934 --> 00:11:14.634
I'll literally comment that out.

186
00:11:19.267 --> 00:11:25.927
&gt;&gt; Speaker 1: So if I type in a you
notice that it allowed it through.

187
00:11:25.927 --> 00:11:28.454
Now why did it allow it through?

188
00:11:28.454 --> 00:11:30.766
That obviously ended up
failing with this name thing.

189
00:11:30.766 --> 00:11:33.027
Why did that pass through
the validation function?

190
00:11:33.027 --> 00:11:36.048
Well, first of all,
it failed this check, right?

191
00:11:36.048 --> 00:11:40.563
But then we asked the question,
is quote A less than zero?

192
00:11:40.563 --> 00:11:45.930
That was the first question, and
when there's a string involved, it's gonna

193
00:11:45.930 --> 00:11:51.794
actually do a lexicographic check which is
alphabetic character check in ASCII code.

194
00:11:51.794 --> 00:11:54.923
Quote A is not less than zero.

195
00:11:54.923 --> 00:11:57.737
And it's also not greater than 600.

196
00:11:57.737 --> 00:12:01.517
So it failed both of those tests.

197
00:12:01.517 --> 00:12:06.739
Because NaN, even if it was doing
the number check NaN is not less than 0,

198
00:12:06.739 --> 00:12:08.940
nor is it greater than 600.

199
00:12:08.940 --> 00:12:15.970
So lexical graphically or numerically,
NaN would pass through just fine here.

200
00:12:15.970 --> 00:12:17.570
Which is not what we want.

201
00:12:17.570 --> 00:12:18.880
So we need to test for the NaN.

202
00:12:18.880 --> 00:12:22.340
&gt;&gt; Speaker 2: So in the comparison,
it was converted to a number.

203
00:12:22.340 --> 00:12:24.834
Which would make it a NaN.

204
00:12:24.834 --> 00:12:26.193
And then automatically.

205
00:12:29.131 --> 00:12:32.569
&gt;&gt; Speaker 1: Well, let me answer
that definitively by modeling for

206
00:12:32.569 --> 00:12:35.343
you how you should answer these questions.

207
00:12:35.343 --> 00:12:38.785
If you don't have somebody's book handy,
which we could go and

208
00:12:38.785 --> 00:12:41.919
look at my book but
let's just see what the spec has to say.

209
00:12:43.740 --> 00:12:44.929
It is section.

210
00:12:48.599 --> 00:12:53.289
&gt;&gt; Speaker 1: 7 of
the abstract operations.

211
00:12:53.289 --> 00:13:01.174
And operations on objects.

212
00:13:07.221 --> 00:13:09.293
&gt;&gt; Speaker 1: So
these are those algorithms.

213
00:13:09.293 --> 00:13:11.775
Remember the abstract equality one, right?

214
00:13:11.775 --> 00:13:13.003
We looked at that one already.

215
00:13:13.003 --> 00:13:18.363
7.2.13, Abstract Relational Comparison
is the less than and greater than.

216
00:13:18.363 --> 00:13:20.930
So let's see what this algorithm says.

217
00:13:20.930 --> 00:13:24.918
See if I can figure out what
it's talking about here.

218
00:13:24.918 --> 00:13:29.444
The comparison x less than y, where x and
y values produces true, false, or

219
00:13:29.444 --> 00:13:30.236
undefined.

220
00:13:30.236 --> 00:13:35.110
In addition, it takes a Boolean flag
named LeftFirst as a parameter.

221
00:13:35.110 --> 00:13:37.802
We're gonna assume LeftFirst.

222
00:13:37.802 --> 00:13:44.158
So we were asking if the string A was
less than 0, why would that fail?

223
00:13:44.158 --> 00:13:48.765
So it said if the left flag
is true which it would be,

224
00:13:48.765 --> 00:13:54.777
then we wanna take primitive of x
which it's already a primitive.

225
00:13:58.034 --> 00:14:02.092
&gt;&gt; Speaker 1: Okay so here it says if both
comparisons are already strings then it's

226
00:14:02.092 --> 00:14:04.515
gonna do a lexicographical Comparison.

227
00:14:04.515 --> 00:14:05.585
That's what it's doing here.

228
00:14:05.585 --> 00:14:08.691
It's gonna look at string characters and
do that comparison.

229
00:14:08.691 --> 00:14:11.517
Otherwise, it's gonna make
them both into numbers.

230
00:14:11.517 --> 00:14:14.494
So it would have taken that quote A and
made it into a number.

231
00:14:14.494 --> 00:14:18.000
And then it had the 0, and
it would have said is NaN less than 0?

232
00:14:18.000 --> 00:14:19.651
So then we have here.

233
00:14:23.854 --> 00:14:25.466
&gt;&gt; Speaker 1: See, nX.

234
00:14:25.466 --> 00:14:30.413
nX would be NaN, because it was the quote
a that got coerced to a number,

235
00:14:30.413 --> 00:14:33.877
so now it's the number
representation of it, and

236
00:14:33.877 --> 00:14:37.570
it's saying if nX is NaN,
return undefined.

237
00:14:37.570 --> 00:14:40.966
So that less than operation
wouldn't have returned false,

238
00:14:40.966 --> 00:14:42.970
it would have returned undefined.

239
00:14:42.970 --> 00:14:46.540
But undefined is a false value right?

240
00:14:46.540 --> 00:14:48.620
So that would have failed that condition.

241
00:14:48.620 --> 00:14:53.310
The exact same logic applies when we
try the court a greater than 600.

242
00:14:53.310 --> 00:14:57.330
Is that it's gonna make quote A in demand
and NaN is not greater than 600 for

243
00:14:57.330 --> 00:14:59.310
the exact same reason.

244
00:14:59.310 --> 00:15:02.040
So both would have been undefined and
undefined.

245
00:15:02.040 --> 00:15:03.120
And both of those are false.

246
00:15:03.120 --> 00:15:04.372
So both those test fail.

247
00:15:04.372 --> 00:15:08.946
&gt;&gt; Speaker 2: Just, my approach
was different, I used a return and

248
00:15:08.946 --> 00:15:16.178
actually compared that this is greater or
equal than 0 or less than equal to 600.

249
00:15:16.178 --> 00:15:18.145
That's why it worked in my case.

250
00:15:18.145 --> 00:15:20.105
&gt;&gt; Speaker 1: Okay, so the greater than or

251
00:15:20.105 --> 00:15:25.511
equals actually does something interesting
and I won't get fully into that.

252
00:15:25.511 --> 00:15:30.197
This is covered in the types and grammar
book, but we think that greater than or

253
00:15:30.197 --> 00:15:34.757
equals does the same thing as doing
greater than or an equality comparison.

254
00:15:34.757 --> 00:15:42.608
Turns out greater than or equals does
the less than and negates the result.

255
00:15:42.608 --> 00:15:43.975
So what was the last thing?

256
00:15:43.975 --> 00:15:45.033
The last thing was undefined.

257
00:15:45.033 --> 00:15:45.952
&gt;&gt; Speaker 2: Was undefined.

258
00:15:45.952 --> 00:15:48.671
&gt;&gt; Speaker 1: And then we would've
negated that to make it true.

259
00:15:48.671 --> 00:15:49.860
So that's why it worked.

260
00:15:49.860 --> 00:15:52.070
It's one of those happy accidents for you.

261
00:15:52.070 --> 00:15:56.574
&gt;&gt; Speaker 3: So as for kinda a bonus for
this exercise, you ask how would you go

262
00:15:56.574 --> 00:16:01.600
about writing simple tests to test
the behaviors of this application?

263
00:16:01.600 --> 00:16:06.665
How would that be different from
the function validate work entry

264
00:16:06.665 --> 00:16:11.836
is the function validate work entry
just kind of a data validator.

265
00:16:11.836 --> 00:16:15.048
&gt;&gt; Speaker 1: It's an input validator,
but that's not testing the application.

266
00:16:15.048 --> 00:16:20.088
What I meant by testing the application
is if I call the add work entry to

267
00:16:20.088 --> 00:16:26.291
whatever that function's called,
&gt;&gt; Speaker 1: Add work to project.

268
00:16:26.291 --> 00:16:29.217
If I called add work to project
with a certain set of input,

269
00:16:29.217 --> 00:16:32.923
does it actually end up producing the DOM
elements that I expect in exactly

270
00:16:32.923 --> 00:16:35.887
the right place with exactly
the right contents, right?

271
00:16:35.887 --> 00:16:37.955
That's kind of an integration-level test.

272
00:16:37.955 --> 00:16:40.938
There are also unit-level tests that
could be performed on several of these.

273
00:16:40.938 --> 00:16:43.317
Like, for example, the findProjectEntry,

274
00:16:43.317 --> 00:16:46.184
I could validate that if I
pass in a specific projectId,

275
00:16:46.184 --> 00:16:49.725
I get the project entry, if I pass
in a nonexistent one I get nothing.

276
00:16:49.725 --> 00:16:52.972
So there's both unit test and
a creation test that you could do here.

277
00:16:52.972 --> 00:16:55.224
I wasn't actually
expecting you to do that.

278
00:16:55.224 --> 00:17:00.202
I just wanted you to think about
how would I test this project.

279
00:17:00.202 --> 00:17:04.150
I'm glad you brought that up though
because as we get further along here,

280
00:17:04.150 --> 00:17:08.223
you may find it to be useful because this
is a certain thing that I did when I was

281
00:17:08.223 --> 00:17:09.780
writing the code.

282
00:17:09.780 --> 00:17:11.090
Did I go back and fix that?

283
00:17:11.090 --> 00:17:12.207
I think I did.

284
00:17:12.207 --> 00:17:17.703
You might find this useful.

285
00:17:17.703 --> 00:17:19.252
Nope I didn't fix that, sorry.

286
00:17:35.185 --> 00:17:36.623
&gt;&gt; Speaker 1: That should give
us an error, and it does.

287
00:17:36.623 --> 00:17:40.885
So what I did is I was doing this to make
sure as I did each iteration of this

288
00:17:40.885 --> 00:17:43.587
project that it still
did the correct thing,

289
00:17:43.587 --> 00:17:46.998
is I actually had sort of a unit test or
integration test,

290
00:17:46.998 --> 00:17:51.436
I guess more integration test that I
just ran in the console of my browser.

291
00:17:51.436 --> 00:17:56.632
So I basically called a set of calls,
I said addWorkToProject, and

292
00:17:56.632 --> 00:18:01.737
I said since I knew project was
a public array I could get at whatever

293
00:18:01.737 --> 00:18:06.496
the ID was that was randomly generated for
the first project.

294
00:18:06.496 --> 00:18:10.200
And then give it a really long comment and
then some number.

295
00:18:10.200 --> 00:18:15.070
So this was basically my unit, or
my integration test that when I ran that,

296
00:18:15.070 --> 00:18:19.790
I expected to see exactly this behavior
where I had 114 is my output and

297
00:18:19.790 --> 00:18:21.000
the 36 or whatever.

298
00:18:21.000 --> 00:18:25.944
So I just visually made sure that every
time I made these changes to the code

299
00:18:25.944 --> 00:18:29.556
that this code ran and
gave me the exact same results.

300
00:18:29.556 --> 00:18:33.970
I didn't verify it fully as a test suite,
but that was kind of my ad hoc testing.

301
00:18:33.970 --> 00:18:37.910
Then they'd be useful to you as you go
through exercises two through eight to

302
00:18:37.910 --> 00:18:39.620
come up with some kind of
test like that for yourself.

303
00:18:41.030 --> 00:18:44.930
Okay, so that represents our first core.

304
00:18:44.930 --> 00:18:46.270
The types and coercion system.

305
00:18:47.590 --> 00:18:52.520
Again, the takeaway there is to hope
that you will look at types and

306
00:18:52.520 --> 00:18:55.140
coercion with a fresh set of eyes,
and ask,

307
00:18:55.140 --> 00:18:59.460
how can I use that appropriately,
as opposed to just ignoring that topic or

308
00:18:59.460 --> 00:19:02.450
making a linter,
remove any possibility of it?

309
00:19:02.450 --> 00:19:07.380
Where are places I can use my knowledge
correctly to make my code better,

310
00:19:07.380 --> 00:19:08.660
more expressive, more readable?

