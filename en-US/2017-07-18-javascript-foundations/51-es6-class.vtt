WEBVTT

1
00:00:00.360 --> 00:00:02.230
&gt;&gt; Kyle Simpson: Speaking of classes,

2
00:00:02.230 --> 00:00:04.716
let's talk about the class
keyword added in ES6.

3
00:00:04.716 --> 00:00:08.790
And I'm gonna use our running example
that we've been talking about

4
00:00:08.790 --> 00:00:12.571
to try to help illustrate a little bit
what the class keyword is gonna give us.

5
00:00:15.350 --> 00:00:18.690
Here's making class foo
as a replacement for

6
00:00:18.690 --> 00:00:22.260
that whole thing that we were
just doing with our prototypes.

7
00:00:23.750 --> 00:00:27.540
So we have a class foo that gets
a constructor function of sorts,

8
00:00:27.540 --> 00:00:32.380
and we have an identify method that's
gonna be available on the class prototype.

9
00:00:32.380 --> 00:00:36.150
And we can still do a1 = new Foo,

10
00:00:36.150 --> 00:00:41.310
if you squint it sure looks
like a class system doesn't it?

11
00:00:41.310 --> 00:00:45.320
I mean, they definitely improved
the syntax compared to what were just

12
00:00:45.320 --> 00:00:48.320
doing with all the .prototype
crap that we had to do.

13
00:00:49.960 --> 00:00:54.150
This is extremely attractive
to JavaScript developers.

14
00:00:54.150 --> 00:00:57.100
I don't think I've seen
anything in JavaScript get so

15
00:00:57.100 --> 00:01:01.490
much excitement, as when they said I
wanna do classes, I've been doing it with

16
00:01:01.490 --> 00:01:05.420
prototypes all along and it sucked,
and now you give me this syntax.

17
00:01:05.420 --> 00:01:07.040
People are flocking in droves to it.

18
00:01:08.310 --> 00:01:09.850
There's a couple of
things I wanna point out.

19
00:01:09.850 --> 00:01:14.970
First, it is definitely true
that the syntax is nicer, but

20
00:01:14.970 --> 00:01:18.360
it is mostly just syntactic sugar.

21
00:01:19.850 --> 00:01:24.480
It really is kind of some duct tape,
or to borrow another metaphor,

22
00:01:24.480 --> 00:01:30.230
it really is kinda some lipstick on a pig,
because this is not a brand new system.

23
00:01:30.230 --> 00:01:33.260
This is still the prototypes
underneath the covers.

24
00:01:33.260 --> 00:01:36.060
It's still bound by all
the exact same rules, and

25
00:01:36.060 --> 00:01:37.800
we're gonna have a lot
of the same limitations.

26
00:01:38.820 --> 00:01:42.970
Just the syntax goes a long way to
making it so that's not obvious.

27
00:01:42.970 --> 00:01:46.630
Now, some people prefer to
have problems not be obvious.

28
00:01:47.880 --> 00:01:51.856
I on the other hand prefer for
problems to be super obvious so

29
00:01:51.856 --> 00:01:53.641
that I can deal with them.

30
00:01:53.641 --> 00:01:58.330
So, the syntax that we've created
here hides a bunch of problems

31
00:01:58.330 --> 00:02:01.290
until you run into them, and then you're
like, my God, where did that come from?

32
00:02:02.990 --> 00:02:07.140
I have tried to use classes
to model certain things, and

33
00:02:07.140 --> 00:02:09.305
I run into these problems.

34
00:02:09.305 --> 00:02:14.575
The major takeaway is that
classes are designed to

35
00:02:14.575 --> 00:02:19.005
essentially codify the static
nature of inheritance,

36
00:02:19.005 --> 00:02:22.505
as opposed to the dynamic
nature of the prototype system.

37
00:02:23.795 --> 00:02:28.330
They're designed to sort of pretend
that there's a copying going on,

38
00:02:28.330 --> 00:02:32.414
because that's the way that
classes worked in Java and C++.

39
00:02:32.414 --> 00:02:35.290
But what that really does

40
00:02:35.290 --> 00:02:39.130
is throw away most of the power
of the system that underlies it.

41
00:02:40.850 --> 00:02:44.430
All that capability that we use
to have to take a function and

42
00:02:44.430 --> 00:02:48.990
use it against a different object,
and all that dynanicism and stuff,

43
00:02:48.990 --> 00:02:54.230
it mostly just falls apart when you
opt into this class way of thinking.

44
00:02:54.230 --> 00:02:57.950
So it's kind of an all or
nothing approach, and

45
00:02:57.950 --> 00:03:01.100
I'm not a big fan of all or
nothing approaches.

46
00:03:02.830 --> 00:03:07.620
No question this code is nicer than
what we had before, if you start with

47
00:03:07.620 --> 00:03:11.630
the presupposition that you have to
use classes to design your software.

48
00:03:14.340 --> 00:03:19.621
No question that inheritance
such as it is looks nicer.

49
00:03:19.621 --> 00:03:24.785
I just get this extends keywords so I can
make a child Bar that extends Foo, and

50
00:03:24.785 --> 00:03:30.506
all I have to define is the new overridden
method, and I can call this.identify and

51
00:03:30.506 --> 00:03:34.742
it automatically goes up
the prototype chain, that's cool.

52
00:03:37.536 --> 00:03:40.127
&gt;&gt; Kyle Simpson: There's no question
that that's a lot nicer syntax.

53
00:03:44.996 --> 00:03:47.020
&gt;&gt; Kyle Simpson: We even
have a super keyword now.

54
00:03:48.430 --> 00:03:52.740
You even have the ability to
explicitly go up the prototype chain

55
00:03:52.740 --> 00:03:53.770
with a super keyword.

56
00:03:54.830 --> 00:04:00.480
That fixed one of the major frustrations
of prototype oriented code,

57
00:04:00.480 --> 00:04:04.280
is that now we actually have a way
instead of saying this.__proto__ or

58
00:04:04.280 --> 00:04:06.940
any of that other crap,
now we have a super keyword.

59
00:04:06.940 --> 00:04:11.705
See you might feel like,
well super, that's pretty super,

60
00:04:11.705 --> 00:04:15.000
it fixed one of the big pain points.

61
00:04:15.000 --> 00:04:16.050
&gt;&gt; Speaker 2: Does that
a help with shadowing?

62
00:04:17.170 --> 00:04:18.642
&gt;&gt; Kyle Simpson: It allows
you to do shadowing.

63
00:04:18.642 --> 00:04:22.640
You notice that I made an identify here
that's shadowed on the prototype chain,

64
00:04:22.640 --> 00:04:24.169
and yet the super still works.

65
00:04:25.830 --> 00:04:30.740
This is an amazing amount of duct tape
that they put in to make it work.

66
00:04:30.740 --> 00:04:34.630
They didn't change the system, they just
put in a ton of duct tape to make it work.

67
00:04:35.920 --> 00:04:38.060
And as long as you're okay with duct tape,
cool.

68
00:04:39.280 --> 00:04:42.750
But there are problems with
the super keyword, and

69
00:04:42.750 --> 00:04:46.930
you will expose those problems if you
try to color outside of the lines.

70
00:04:46.930 --> 00:04:52.030
If you try to do anything remotely
dynamic with your class structure,

71
00:04:52.030 --> 00:04:54.270
everything will start to fall apart.

72
00:04:54.270 --> 00:04:59.150
So my caution to you is, if you're gonna
pick the classes as the way to go,

73
00:04:59.150 --> 00:05:02.470
you just sort of use them and
don't think about how they work.

74
00:05:02.470 --> 00:05:06.015
And, you don't try to push any edges or
do anything sophisticated with them,

75
00:05:06.015 --> 00:05:09.100
cuz they're designed to keep
you very much within the lines,

76
00:05:09.100 --> 00:05:12.320
and they're really good at that.

77
00:05:12.320 --> 00:05:16.230
So I'll give credit where it's due,
it did a really good job of designing for

78
00:05:16.230 --> 00:05:18.650
one very specific mindset.

79
00:05:18.650 --> 00:05:22.279
Just happens to not be the mindset
that I approach JavaScript with.

80
00:05:25.746 --> 00:05:29.087
&gt;&gt; Kyle Simpson: Another set of things
that they added which actually is not

81
00:05:29.087 --> 00:05:34.460
something that's just syntactic sugar,
these are things that did not exist prior.

82
00:05:34.460 --> 00:05:39.760
So when people claim classes are just
syntax sugar, that's not fully true.

83
00:05:39.760 --> 00:05:42.550
There are some extra things
that you could not do before,

84
00:05:42.550 --> 00:05:46.666
that you can now do with classes,
one of them is static methods.

85
00:05:46.666 --> 00:05:48.900
When you declare something as static,

86
00:05:48.900 --> 00:05:53.350
it actually adds it to the class
instead of to the instance.

87
00:05:53.350 --> 00:05:59.470
And that means that the classes themselves
have an inheritance between them.

88
00:05:59.470 --> 00:06:05.300
You notice that I can say Bar.hello even
though it's only Foo that has a hello.

89
00:06:07.120 --> 00:06:11.110
So the classes themselves have
an inheritance, not just the instances.

90
00:06:12.490 --> 00:06:17.870
That is entirely different from anything
we ever did in JavaScript before.

91
00:06:17.870 --> 00:06:24.220
We never had a Bar that delegated to Foo,
that's not even possible pre ES6.

92
00:06:24.220 --> 00:06:26.054
So, that's not just syntax sugar,

93
00:06:26.054 --> 00:06:29.794
that's a whole different mechanism
that they just kind of snuck in there.

94
00:06:32.142 --> 00:06:36.680
&gt;&gt; Kyle Simpson: I guess it's cool,
but it's not just syntax sugar.

