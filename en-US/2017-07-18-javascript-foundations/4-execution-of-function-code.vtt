WEBVTT

1
00:00:00.450 --> 00:00:04.610
&gt;&gt; Kyle Simpson: Now we need to turn
our attention to executing the code.

2
00:00:04.610 --> 00:00:06.290
And to execute the code,

3
00:00:06.290 --> 00:00:10.200
we need a little bit more information
that I glossed over in that first pass.

4
00:00:11.200 --> 00:00:15.890
There is some meta information that
gets discovered as we go along,

5
00:00:15.890 --> 00:00:18.537
that is not entirely obvious as we go.

6
00:00:18.537 --> 00:00:22.073
And I skipped over it, but let's go
back and fill in that meta information.

7
00:00:23.765 --> 00:00:28.370
&gt;&gt; Kyle Simpson: There's something very
important about where a variable shows up.

8
00:00:29.550 --> 00:00:34.430
Because where t shows up,
the context in which it is used

9
00:00:34.430 --> 00:00:38.170
determines how it's going
to behave at run time.

10
00:00:39.180 --> 00:00:43.670
Remember I said earlier that an identifier
can only be in one of two positions.

11
00:00:43.670 --> 00:00:47.984
Either it's in a position where we're
going to in some way shape a form,

12
00:00:47.984 --> 00:00:50.389
extract the value from the variable, or

13
00:00:50.389 --> 00:00:55.364
it's gonna be in the position where we're
gonna put some value into the variable.

14
00:00:55.364 --> 00:00:58.788
Those are really the only two options,
okay?

15
00:00:58.788 --> 00:01:01.710
And there's a special term for that.

16
00:01:01.710 --> 00:01:05.830
But the reason that's important is that
we're gonna treat that differently at

17
00:01:05.830 --> 00:01:06.391
runtime.

18
00:01:06.391 --> 00:01:11.930
There'll be different validations on stuff
depending on which position it's in.

19
00:01:11.930 --> 00:01:15.340
So that information was stored as
the compiler was going through.

20
00:01:15.340 --> 00:01:20.290
In essence it kind of knew or it stored
based upon some meta information.

21
00:01:20.290 --> 00:01:25.496
It knows for example that the foo
on line 4 is on the left hand

22
00:01:25.496 --> 00:01:31.966
side of the equals as opposed to being
on the right hand side of the equals.

23
00:01:31.966 --> 00:01:36.580
It knows what position it's in,
and the position matters.

24
00:01:36.580 --> 00:01:39.520
If something is on the left
hand side of an equals,

25
00:01:39.520 --> 00:01:41.060
it's gonna be the target of an assignment.

26
00:01:42.630 --> 00:01:44.470
If it's on the right
hand side of an equals,

27
00:01:44.470 --> 00:01:45.990
it's gonna be the source of an assignment.

28
00:01:47.210 --> 00:01:49.270
It's gonna be the source value, okay?

29
00:01:51.150 --> 00:01:54.680
So in essence we have this question
of is it in the left position or

30
00:01:54.680 --> 00:01:55.800
the right position?

31
00:01:55.800 --> 00:01:59.790
That's basically when a compiler
theorist talks about it,

32
00:01:59.790 --> 00:02:02.350
one of the things they ask
is what position is it in?

33
00:02:02.350 --> 00:02:03.780
There's different terms for this.

34
00:02:03.780 --> 00:02:07.370
I'm old school because I took computer
science a long, long time ago.

35
00:02:09.880 --> 00:02:13.530
My professor called it LHS and RHS.

36
00:02:14.690 --> 00:02:17.405
LHS stands for left-hand side,
RHS stands for?

37
00:02:17.405 --> 00:02:19.730
&gt;&gt; Speaker 2: Right-hand side.

38
00:02:19.730 --> 00:02:21.816
&gt;&gt; Kyle Simpson: Yeah, come on,
right-hand side, right?

39
00:02:21.816 --> 00:02:24.572
Pretty easy.
Left-hand side meaning it's the target on

40
00:02:24.572 --> 00:02:29.130
assignment, right-hand side
meaning it's the source.

41
00:02:29.130 --> 00:02:32.770
Not always the source of an assignment,
but definitely the source, okay?

42
00:02:32.770 --> 00:02:36.950
So it might be more helpful to think of
target source versus left right, LHS, RHS.

43
00:02:36.950 --> 00:02:38.822
It's just my habit to call it LHS,

44
00:02:38.822 --> 00:02:42.890
RHS because that's what I learned
way back in the day, okay?

45
00:02:42.890 --> 00:02:48.500
Some more modern terminology, they'll use
L value and R value, or some other kinda.

46
00:02:48.500 --> 00:02:50.940
Whatever the terms are,
you understand it's either the target or

47
00:02:50.940 --> 00:02:52.800
it's the source, okay?

48
00:02:52.800 --> 00:02:55.800
That's metadata that we need to store
with that variable cuz we're gonna

49
00:02:55.800 --> 00:02:58.250
treat it differently depending on
whether it's a target or a source.

50
00:03:00.200 --> 00:03:02.210
So that metadata is
stored with the variable.

51
00:03:02.210 --> 00:03:05.320
Now, it's time to execute this code.

52
00:03:05.320 --> 00:03:08.850
And now that we're executing,
there are no more var declarations, and

53
00:03:08.850 --> 00:03:10.790
there are no more function declarations.

54
00:03:10.790 --> 00:03:12.750
We handle that at compile time.

55
00:03:12.750 --> 00:03:16.200
Declarations are not a run time thing,
we don't need to worry about them.

56
00:03:16.200 --> 00:03:17.950
All that's left is the executable code,
and

57
00:03:17.950 --> 00:03:22.110
technically it's not even in source code
for them anymore that we could read.

58
00:03:22.110 --> 00:03:25.584
We're gonna pretend that it's still
written like this even though it's not

59
00:03:25.584 --> 00:03:26.444
actually, okay?

60
00:03:26.444 --> 00:03:30.632
So just pretend that the vars are all gone
and the function headers are all gone and

61
00:03:30.632 --> 00:03:32.797
all that's left is the executable code.

62
00:03:35.067 --> 00:03:39.707
&gt;&gt; Kyle Simpson: That's why I said earlier
in our course, when we said var bar twice,

63
00:03:39.707 --> 00:03:44.507
the second one was a no op because
the compiler came across that var bar,

64
00:03:44.507 --> 00:03:47.479
and he said,
have you ever heard of the bar?

65
00:03:47.479 --> 00:03:49.950
And he's like yep, got him.

66
00:03:49.950 --> 00:03:54.010
Then it's a no op, I don't need to put
another duplicate marble in the bucket.

67
00:03:54.010 --> 00:03:54.780
It's a no op.

68
00:03:54.780 --> 00:03:57.750
So by the time they run the code,
the var bar doesn't exist anymore.

69
00:03:57.750 --> 00:04:00.660
Cuz it's already been handled, okay?

70
00:04:02.140 --> 00:04:04.150
So now we wanna execute this code.

71
00:04:04.150 --> 00:04:08.150
And we're gonna have two
participants in this conversation.

72
00:04:09.470 --> 00:04:11.263
Now it's gonna be
the JavaScript Virtual Machine.

73
00:04:11.263 --> 00:04:14.124
The engine is gonna be doing the running,
the executing of the code.

74
00:04:14.124 --> 00:04:17.840
But to do his work,
he needs to have access to the scope.

75
00:04:17.840 --> 00:04:20.370
So he needs to still talk
to the scope manager, okay?

76
00:04:22.200 --> 00:04:26.420
Now as I go through this conversation, I
have been feeding you the terms here, but

77
00:04:26.420 --> 00:04:30.800
I'm gonna expect for you to participate
more on this even though it sounds silly.

78
00:04:30.800 --> 00:04:33.370
I want you to actually participate
in this part of the conversation.

79
00:04:33.370 --> 00:04:40.050
So we're gonna say I'm
the JavaScript engine now.

80
00:04:40.050 --> 00:04:42.530
We're looking at line 1,
there's no var there.

81
00:04:42.530 --> 00:04:45.990
But I do find a foo, and
I find a foo in that target position,

82
00:04:45.990 --> 00:04:49.280
I find a foo in the LHS,
the target position.

83
00:04:49.280 --> 00:04:52.070
And I need to figure out whether or
not that variable exists.

84
00:04:53.290 --> 00:04:56.250
Cuz it might be that I'm using a variable
that hasn't ever been declared, and

85
00:04:56.250 --> 00:04:58.000
that's an important detail.

86
00:04:58.000 --> 00:05:00.340
So I'm gonna need to have
that same kind of back and

87
00:05:00.340 --> 00:05:03.090
forth conversation with the scope
manager that the compiler had.

88
00:05:04.180 --> 00:05:08.372
That conversation is going to
go like this, hey global scope,

89
00:05:08.372 --> 00:05:11.945
I've got an LHS reference for
a variable called foo.

90
00:05:11.945 --> 00:05:13.170
Ever heard of it?

91
00:05:14.250 --> 00:05:16.597
That's again,
one of those yeah/no questions.

92
00:05:16.597 --> 00:05:18.355
But there's even more new ones here.

93
00:05:18.355 --> 00:05:23.710
How many of you have ever played or seen
the game Go Fish, the card game Go Fish.

94
00:05:23.710 --> 00:05:24.700
Anybody heard of that?

95
00:05:24.700 --> 00:05:25.815
Okay, so I've got young kids.

96
00:05:25.815 --> 00:05:28.820
I got a four year old and a six year
old at home and I love playing Go Fish.

97
00:05:28.820 --> 00:05:31.410
My son, he's six,
love playing Go Fish with him.

98
00:05:31.410 --> 00:05:34.169
He's almost at the point where
he can hold his own cards, but

99
00:05:34.169 --> 00:05:36.778
he still kind of set them down and
arrange them and stuff.

100
00:05:36.778 --> 00:05:39.878
And I have to like pretend that I'm
not looking at his cards and I'm like,

101
00:05:39.878 --> 00:05:41.490
hey you got any eights?

102
00:05:41.490 --> 00:05:45.660
But what I love about the Go Fish game
is it's just such a simple premise.

103
00:05:45.660 --> 00:05:48.715
I ask a question,
do you have a foo variable?

104
00:05:48.715 --> 00:05:53.451
And there's only two answers,
either yes here you go or what?

105
00:05:53.451 --> 00:05:55.387
&gt;&gt; Speaker 2: Go fish.

106
00:05:55.387 --> 00:05:56.350
&gt;&gt; Kyle Simpson: Go fish.

107
00:05:56.350 --> 00:05:57.510
Go look elsewhere.

108
00:05:57.510 --> 00:05:58.480
In the game of Go Fish,

109
00:05:58.480 --> 00:06:02.260
I gotta go to the deck to see if I can
pull out the card I'm looking for.

110
00:06:02.260 --> 00:06:04.830
Here, the same premise applies.

111
00:06:04.830 --> 00:06:06.868
I am the engine and
I am looking for the marble.

112
00:06:06.868 --> 00:06:10.870
I have a reference to this marble,
but I need it.

113
00:06:10.870 --> 00:06:14.330
It's the scope manager's job to go tell me
which bucket it's in and hand it to me,

114
00:06:14.330 --> 00:06:15.460
if it exists.

115
00:06:15.460 --> 00:06:19.840
So I'm saying, hey scope manager, hey
global scope, I have this target value,

116
00:06:19.840 --> 00:06:23.110
this l value, this LHS foo,
ever heard of them?

117
00:06:24.300 --> 00:06:27.360
And if he has, he's gotta go get me the
marble, and if not, he's gotta tell me,

118
00:06:27.360 --> 00:06:28.860
nope, sorry, look elsewhere.

119
00:06:30.390 --> 00:06:31.670
What's the answer gonna be this time?

120
00:06:33.020 --> 00:06:33.660
&gt;&gt; Speaker 3: Yes.

121
00:06:33.660 --> 00:06:36.590
&gt;&gt; Kyle Simpson: Yes I have
because at compiler time,

122
00:06:36.590 --> 00:06:41.660
we added a foo variable to that scope,
we added the red marble, right?

123
00:06:43.510 --> 00:06:46.470
So the global scope manager is gonna get
that red marble and hand it back to me.

124
00:06:47.490 --> 00:06:51.000
And now, I have a variable, I have a
location in memory, I can go to the right

125
00:06:51.000 --> 00:06:54.720
hand side, find that value which is the
quote bar, and I can make the assignment.

126
00:06:55.920 --> 00:06:56.960
Do you follow how that happened?

127
00:06:58.730 --> 00:07:01.980
It only happened because there was
a formal declaration for me to discover.

128
00:07:03.410 --> 00:07:06.276
Had I been trying to do that and
the answer had been no,

129
00:07:06.276 --> 00:07:09.095
a different end result
would have occurred, okay?

130
00:07:09.095 --> 00:07:11.610
We'll get to that in a moment.

131
00:07:11.610 --> 00:07:16.060
Now we don't see any other part of
this program executing the bar or

132
00:07:16.060 --> 00:07:16.890
the baz function.

133
00:07:16.890 --> 00:07:19.179
That's on purpose cuz I didn't
wanna make things more complex.

134
00:07:20.210 --> 00:07:22.180
We don't see bar and
baz being executed, so

135
00:07:22.180 --> 00:07:26.230
let's just pretend that some other
part of this process executes them.

136
00:07:26.230 --> 00:07:29.760
Maybe they get executed as
a click handler, or on a timer,

137
00:07:29.760 --> 00:07:31.150
or just in some other part of the program.

138
00:07:31.150 --> 00:07:33.650
Somebody calls the bar function.

139
00:07:33.650 --> 00:07:35.910
So let's execute the contents of var and

140
00:07:35.910 --> 00:07:38.010
we're gonna do it exactly
the same as we did before.

141
00:07:39.320 --> 00:07:42.150
We're gonna start with this line 4.

142
00:07:42.150 --> 00:07:47.480
And on line 4, there is no var there,
there's just a foo equals.

143
00:07:47.480 --> 00:07:49.460
So how's that conversation gonna start?

144
00:07:49.460 --> 00:07:50.830
Which scope are we talking to?

145
00:07:53.380 --> 00:07:58.370
A scope of bar,
I have a what kind of reference?

146
00:07:58.370 --> 00:07:59.920
&gt;&gt; Speaker 4: Well there is a bar though.

147
00:07:59.920 --> 00:08:01.130
What do you mean there's no-
&gt;&gt; Kyle Simpson: It's already been

148
00:08:01.130 --> 00:08:02.130
compiled away.

149
00:08:02.130 --> 00:08:03.440
We're executing, right?

150
00:08:03.440 --> 00:08:05.330
&gt;&gt; Kyle Simpson: There's no bar,
it's been compiled away.

151
00:08:07.230 --> 00:08:11.562
A scope of bar,
I have a what kind of reference?

152
00:08:11.562 --> 00:08:14.739
I have an LHS reference,
an L value, a target,

153
00:08:14.739 --> 00:08:17.606
whatever you're gonna call it, for foo.

154
00:08:17.606 --> 00:08:20.022
Ever heard of them and the answer is?

155
00:08:20.022 --> 00:08:20.735
&gt;&gt; Speaker 2: Yes.

156
00:08:20.735 --> 00:08:24.294
&gt;&gt; Kyle Simpson: Yes, because you declared
him formally during the compilation step

157
00:08:24.294 --> 00:08:25.099
in this scope.

158
00:08:25.099 --> 00:08:28.045
Here is your marble.

159
00:08:28.045 --> 00:08:29.360
So now we have the marble.

160
00:08:29.360 --> 00:08:32.703
We go to the right hand side of line 4, we
find quote baz that is an immediate value.

161
00:08:32.703 --> 00:08:36.030
We make the assignment,
line 4 is complete.

162
00:08:36.030 --> 00:08:36.662
Have I lost anybody yet?

163
00:08:36.662 --> 00:08:39.618
Makes sense?

164
00:08:39.618 --> 00:08:41.680
All right,

165
00:08:41.680 --> 00:08:46.240
now sometime in the future somebody
decides to execute the baz function.

166
00:08:46.240 --> 00:08:50.220
For now we're going to assume that
they don't pass in any argument.

167
00:08:52.000 --> 00:08:54.240
Cuz there is a parameter that
could receive an argument.

168
00:08:54.240 --> 00:08:55.800
Let's ignore the argument passing for now.

169
00:08:55.800 --> 00:09:00.140
Let's just assume they invoke
the baz function, okay?

170
00:09:00.140 --> 00:09:01.800
We need to start executing with line 8.

171
00:09:03.730 --> 00:09:05.740
Line 8, how's it gonna execute.

172
00:09:05.740 --> 00:09:06.606
What scope are we talking to?

173
00:09:06.606 --> 00:09:07.106
&gt;&gt; Speaker 2: Baz.

174
00:09:08.780 --> 00:09:11.400
&gt;&gt; Kyle Simpson: Hey scope of baz.

175
00:09:11.400 --> 00:09:14.718
I have a what kind of reference for foo?

176
00:09:14.718 --> 00:09:15.551
I have LHS.

177
00:09:15.551 --> 00:09:17.358
An L value, a target reference for foo.

178
00:09:17.358 --> 00:09:18.638
Ever heard of him, the answer is?

179
00:09:18.638 --> 00:09:20.570
&gt;&gt; Speaker 4: Yes.

180
00:09:20.570 --> 00:09:21.070
&gt;&gt; Kyle Simpson: Why?

181
00:09:22.690 --> 00:09:25.158
Because of that foo perimeter on line 7,
right?

182
00:09:25.158 --> 00:09:28.437
On line 7, you formally cleared it,
so for all intents and

183
00:09:28.437 --> 00:09:33.260
purposes that's a variable that we have
access to, we can assign to, okay?

184
00:09:33.260 --> 00:09:36.060
Great, so now I have my green marble.

185
00:09:37.650 --> 00:09:40.960
I've got my marble, and
I go to the right hand side of quote bam.

186
00:09:40.960 --> 00:09:43.720
I assign quote bam into that variable,
and we're done with line 8.

187
00:09:43.720 --> 00:09:45.170
We good so far?

188
00:09:46.590 --> 00:09:48.780
Now we finally come back to line 9.

189
00:09:48.780 --> 00:09:51.830
Which we skipped over essentially
during the compilation.

190
00:09:51.830 --> 00:09:54.470
We didn't do anything
with the scope of it.

191
00:09:54.470 --> 00:09:58.950
We did keep track of the fact that
it was in an L value position, but

192
00:09:58.950 --> 00:10:01.800
we didn't do anything scopewise with it.

193
00:10:01.800 --> 00:10:04.864
And now we need to ask what's
it gonna do at runtime?

194
00:10:06.490 --> 00:10:11.080
So that conversation needs to
proceed exactly the same as before.

195
00:10:11.080 --> 00:10:11.670
So how does it go?

196
00:10:13.280 --> 00:10:14.245
A scope of?

197
00:10:14.245 --> 00:10:14.949
&gt;&gt; Speaker 2: Baz.

198
00:10:14.949 --> 00:10:17.909
&gt;&gt; Kyle Simpson: Baz, I have a
&gt;&gt; Speaker 2: LHS 4.

199
00:10:17.909 --> 00:10:18.676
&gt;&gt; Kyle Simpson: LHS 4.

200
00:10:18.676 --> 00:10:19.652
&gt;&gt; Speaker 2: Bam.

201
00:10:19.652 --> 00:10:20.407
&gt;&gt; Kyle Simpson: Bam.

202
00:10:20.407 --> 00:10:21.124
Ever heard of him?

203
00:10:21.124 --> 00:10:21.924
And the answer is?

204
00:10:21.924 --> 00:10:22.565
&gt;&gt; Speaker 2: Go fish.

205
00:10:22.565 --> 00:10:23.348
&gt;&gt; Kyle Simpson: Go fish.

206
00:10:23.348 --> 00:10:25.396
&gt;&gt; Speaker 2: [LAUGH]
&gt;&gt; Kyle Simpson: All right,

207
00:10:25.396 --> 00:10:28.960
because there is no bam
declared in that scope.

208
00:10:28.960 --> 00:10:34.920
So now we need to understand what does
go fish mean in terms of lexical slope.

209
00:10:34.920 --> 00:10:37.100
Lexical slopes are nested.

210
00:10:37.100 --> 00:10:41.222
So the default behavior then would be to
say I'm gonna go up one level of scope and

211
00:10:41.222 --> 00:10:42.525
ask the question again.

212
00:10:42.525 --> 00:10:47.120
In this case that up one
level is the global scope.

213
00:10:47.120 --> 00:10:53.766
So were gonna go up to the global scope
and say, hey global scope I have?

214
00:10:53.766 --> 00:10:54.933
&gt;&gt; Speaker 2: LHS-
&gt;&gt; Kyle Simpson: LHS for bam.

215
00:10:54.933 --> 00:10:56.037
Ever heard of him?

216
00:10:56.037 --> 00:10:56.676
And the answer is.

217
00:10:56.676 --> 00:10:57.413
&gt;&gt; Speaker 2: Go fish.

218
00:10:57.413 --> 00:11:04.860
&gt;&gt; Kyle Simpson: Okay, so we would look
for the answer to be no or go fish.

219
00:11:04.860 --> 00:11:08.830
There is no where else to go,
cuz the global scale is the end, right?

220
00:11:08.830 --> 00:11:09.900
That's the deck.

221
00:11:09.900 --> 00:11:11.883
It's either there or doesn't exist.

222
00:11:11.883 --> 00:11:17.170
It'll be nice if it said no or
through an error or

223
00:11:17.170 --> 00:11:22.550
any of those things, but unfortunately
we have a historical decision

224
00:11:22.550 --> 00:11:27.720
made early in JavaScript to be more
friendly and forgiving, I suppose.

225
00:11:28.900 --> 00:11:32.790
What the global scope will actually
say is well, no, but I went ahead and

226
00:11:32.790 --> 00:11:34.030
created one for you anyway.

227
00:11:34.030 --> 00:11:34.740
Aren't I helpful?

228
00:11:36.660 --> 00:11:37.160
What?

229
00:11:38.660 --> 00:11:41.620
It just implicitly created
a global at run time,

230
00:11:42.700 --> 00:11:45.310
because it couldn't find
one formally declared.

231
00:11:46.940 --> 00:11:49.120
So now we have a global
variable called bam.

232
00:11:49.120 --> 00:11:52.330
We have a red marble called
bam that we get handed back.

233
00:11:52.330 --> 00:11:54.120
And when we make the assignment on line 9,

234
00:11:54.120 --> 00:11:56.540
we're assigning to a global
variable called bam.

235
00:11:58.760 --> 00:11:59.260
You see that?

236
00:12:00.910 --> 00:12:06.440
Now that process that I just
described where we implicitly create

237
00:12:06.440 --> 00:12:11.310
a global as a result of assigning to a
variable that was never formally declared.

238
00:12:12.880 --> 00:12:15.373
That is virtually always a mistake.

239
00:12:17.727 --> 00:12:21.135
&gt;&gt; Kyle Simpson: Let me say it this way,
if you're doing that on purpose,

240
00:12:21.135 --> 00:12:22.200
stop doing that.

241
00:12:24.270 --> 00:12:26.130
That is never the right way to do it.

242
00:12:28.050 --> 00:12:30.660
Never, ever, ever should you code

243
00:12:30.660 --> 00:12:35.000
assuming that you will implicitly create
a declaration in some global scope.

244
00:12:35.000 --> 00:12:36.360
That is a terrible idea.

245
00:12:36.360 --> 00:12:36.880
Yes?

246
00:12:36.880 --> 00:12:41.253
&gt;&gt; Speaker 3: So
is the process the same if it's LHS?

247
00:12:43.884 --> 00:12:46.317
&gt;&gt; Kyle Simpson: We are talking about
LHSs, are you saying if it's the same?

248
00:12:46.317 --> 00:12:47.900
&gt;&gt; Speaker 3: RHSs.

249
00:12:47.900 --> 00:12:49.960
&gt;&gt; Kyle Simpson: We're gonna
get to RHS in a little bit,

250
00:12:49.960 --> 00:12:51.510
hold onto that question, okay?

251
00:12:52.770 --> 00:12:57.093
Right now we're talking about LHSs,
and this undeclared LHS or

252
00:12:57.093 --> 00:13:02.232
unfulfilled LHS, as I like to call it,
results in an implicit auto global.

253
00:13:02.232 --> 00:13:04.750
And that is a terrible, terrible thing.

254
00:13:05.890 --> 00:13:07.930
Okay, terrible for confusion.

255
00:13:07.930 --> 00:13:09.543
You end up accidentally creating and

256
00:13:09.543 --> 00:13:11.942
overwriting variables that
you never intended to do.

257
00:13:15.174 --> 00:13:18.553
&gt;&gt; Kyle Simpson: Since it's
almost always an error,

258
00:13:18.553 --> 00:13:25.270
it turns out if we use strict mode,
it is actually an error now.

259
00:13:25.270 --> 00:13:28.490
So all that same process that I
went through in the previous slide,

260
00:13:28.490 --> 00:13:31.740
If I did it with strict mode on,
which is what I am doing up here.

261
00:13:33.570 --> 00:13:35.720
I've turned strict mode on for
the program or

262
00:13:35.720 --> 00:13:37.970
I could have done it
at the function level.

263
00:13:37.970 --> 00:13:42.420
In either case, when we got to
that line 11 now and we said hey,

264
00:13:42.420 --> 00:13:45.100
global scope, I have this LHS for
bam, ever heard of it?

265
00:13:45.100 --> 00:13:50.014
The global scope would be prevented
from creating that variable because of

266
00:13:50.014 --> 00:13:53.680
the strict mode and
its only other option then would be to

267
00:13:53.680 --> 00:13:57.439
throw an error because it
can't create one implicitly.

268
00:13:57.439 --> 00:13:59.303
It would have to throw an error and

269
00:13:59.303 --> 00:14:03.110
specifically the error it would
throw is called a reference error.

270
00:14:04.830 --> 00:14:07.940
Reference error, bam is not defined.

271
00:14:09.820 --> 00:14:11.050
That's literally what it's saying.

272
00:14:13.270 --> 00:14:18.090
That does not mean the same thing as
reference error bam is undefined.

273
00:14:19.850 --> 00:14:24.270
Remember, earlier in our course we talked
about the difference between undefined and

274
00:14:24.270 --> 00:14:25.230
undeclared.

275
00:14:25.230 --> 00:14:29.082
Bam is an undeclared variable that
we just start trying to assign to.

276
00:14:29.082 --> 00:14:32.610
It is not an undefined variable.

277
00:14:34.890 --> 00:14:40.890
An undefined variable would be one that
was existent that did get declared,

278
00:14:40.890 --> 00:14:42.130
but at the moment had no value.

279
00:14:43.560 --> 00:14:44.150
That's undefined.

280
00:14:45.210 --> 00:14:50.600
I really wish that error message,
that reference error bam was not declared.

281
00:14:50.600 --> 00:14:52.680
Because that's a much
more accurate statement.

282
00:14:54.180 --> 00:14:58.270
I've been asking them to fix that error
message for about five years, and

283
00:14:58.270 --> 00:14:59.220
they have yet to fix it.

