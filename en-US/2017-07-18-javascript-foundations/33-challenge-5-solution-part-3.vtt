WEBVTT

1
00:00:00.240 --> 00:00:04.093
&gt;&gt; Kyle Simpson: Okay,
let's talk through the solution to part 3.

2
00:00:04.093 --> 00:00:09.253
First thing is I'll show how we
implement that project module factory.

3
00:00:09.253 --> 00:00:11.909
So, here's the project function.

4
00:00:11.909 --> 00:00:15.996
The only piece of input data that it needs
to take is the description because it's

5
00:00:15.996 --> 00:00:20.037
gonna generate its own ID, and we're
gonna use API methods to update the time.

6
00:00:20.037 --> 00:00:24.675
So it takes in a description,
immediately generates its own ID,

7
00:00:24.675 --> 00:00:30.003
keeps track of the work, and also,
the total time for that given project.

8
00:00:30.003 --> 00:00:31.214
Here's the public API.

9
00:00:31.214 --> 00:00:35.490
We've got a couple of getters,
we have a getId, a getDescription,

10
00:00:35.490 --> 00:00:40.009
a getTime to return those pieces of
information to the calling program.

11
00:00:40.009 --> 00:00:44.547
Rather than returning or
giving access to the actual variables,

12
00:00:44.547 --> 00:00:48.300
we use access or functions to get at them.

13
00:00:48.300 --> 00:00:49.800
Then we have a couple of,

14
00:00:49.800 --> 00:00:53.840
then we have a mutating function,
mutator that's called addWork.

15
00:00:53.840 --> 00:00:56.715
That's how we add work into the project.

16
00:00:56.715 --> 00:01:01.370
That will add an entry into the work
array and update the time and so forth.

17
00:01:01.370 --> 00:01:04.430
And then we have moved our
getWork entry count and

18
00:01:04.430 --> 00:01:10.200
our getWork entry location functions
from app over into this function.

19
00:01:10.200 --> 00:01:13.790
Because they actually are relevant
to the given project.

20
00:01:13.790 --> 00:01:17.888
Whereas before we had to pass in a project
ID, those functions now don't need

21
00:01:17.888 --> 00:01:21.105
a project ID at all,
because we already know which project,

22
00:01:21.105 --> 00:01:24.021
they're being called against
the project instance.

23
00:01:24.021 --> 00:01:26.950
So we can simply call getWork entry
count and return the work length.

24
00:01:27.950 --> 00:01:30.830
GetWork entry location still
needs a work entry ID, but

25
00:01:30.830 --> 00:01:34.670
the logic is the same, it just doesn't
need to figure out what project to do that

26
00:01:34.670 --> 00:01:36.050
against since we already know that.

27
00:01:37.080 --> 00:01:44.534
So it simplified that code to have this
isolated to a given project instance.

28
00:01:44.534 --> 00:01:48.222
Now we're gonna be calling
this project function

29
00:01:48.222 --> 00:01:52.770
to create instances of the project
each time we make one.

30
00:01:52.770 --> 00:01:57.800
So let's go to our app data model.

31
00:01:57.800 --> 00:02:01.270
You will notice instead of
making project entry data and

32
00:02:01.270 --> 00:02:04.200
all that other stuff like
we were doing before.

33
00:02:04.200 --> 00:02:08.410
Now I just called it capital P project
function pass in the description and

34
00:02:08.410 --> 00:02:10.120
get a project object back.

35
00:02:10.120 --> 00:02:12.900
I don't need to deal with any of those
details because those are handled by

36
00:02:12.900 --> 00:02:15.510
the project factory.

37
00:02:15.510 --> 00:02:18.250
So I just get a reference
to a project object and

38
00:02:18.250 --> 00:02:23.110
that's what I store in my
projects array here on line 214.

39
00:02:23.110 --> 00:02:27.210
That more cleanly separates
the concern between my data model and

40
00:02:27.210 --> 00:02:30.089
the stuff that can be abstracted
into these project instances.

41
00:02:32.150 --> 00:02:34.720
You'll also notice that
now that project object

42
00:02:34.720 --> 00:02:38.560
is the thing that project instance
is the thing that I pass around.

43
00:02:38.560 --> 00:02:42.770
Instead of passing around project ID,
project description all of that is

44
00:02:42.770 --> 00:02:47.380
separate individual pieces of data, I'm
just gonna ship that project object around

45
00:02:47.380 --> 00:02:51.540
and you can call the, the access or
methods as you see fit.

46
00:02:51.540 --> 00:02:57.030
So it simplifies the passing between
the app model and the UI model.

47
00:03:00.130 --> 00:03:03.060
Same thing down here with adwork
to project, we simplified

48
00:03:03.060 --> 00:03:07.650
quite a bit our findProjectEntry
simply gives us a project instance,

49
00:03:07.650 --> 00:03:12.850
we can call adwork on it to let it
delegate the job of handling the work.

50
00:03:12.850 --> 00:03:17.460
And then we can pass project along
to any UI methods as we see fit.

51
00:03:17.460 --> 00:03:20.060
So what you'll notice here is that
by creating this abstraction,

52
00:03:20.060 --> 00:03:22.820
we actually have simplified
the reasoning of code.

53
00:03:22.820 --> 00:03:25.670
And that's the hallmark
of good abstraction.

54
00:03:25.670 --> 00:03:27.880
Abstraction's not about hiding things.

55
00:03:27.880 --> 00:03:32.020
Abstraction is about making independent
things easier to reason about.

56
00:03:32.020 --> 00:03:35.935
So we've made this piece easier to reason
about by taking the parts that were

57
00:03:35.935 --> 00:03:39.807
cluttering it up with other stuff and
moving them to a different location.

58
00:03:39.807 --> 00:03:44.910
So we can independently think about
the project separate from thinking

59
00:03:44.910 --> 00:03:49.926
about the data model logic that's
the key idea behind obstruction and

60
00:03:49.926 --> 00:03:55.750
the module here was pretty good use for
us, now I wanna address something.

61
00:03:55.750 --> 00:04:00.470
A small elephant in the room because
we're creating multiple instances of this

62
00:04:00.470 --> 00:04:05.970
project and most people's preferences or

63
00:04:05.970 --> 00:04:10.120
their instinct would be to say,
well I should be instantiating some class.

64
00:04:10.120 --> 00:04:12.356
You would think,
why am I not doing a new here?

65
00:04:12.356 --> 00:04:14.820
Why am I not instantiation some class?

66
00:04:14.820 --> 00:04:19.774
The point that I'm trying to make, is that
there's nothing unique about classes,

67
00:04:19.774 --> 00:04:24.684
in terms of our ability to create a data
model abstraction and instantiate things.

68
00:04:24.684 --> 00:04:29.566
There's nothing specific to the class
design pattern that requires us to go that

69
00:04:29.566 --> 00:04:31.229
route to accomplish that.

70
00:04:31.229 --> 00:04:33.721
Here, we just need a module instance, so

71
00:04:33.721 --> 00:04:36.510
I can just call that
module factory function.

72
00:04:36.510 --> 00:04:41.253
I don't need to be creating some instance
of a class to accomplish that goal.

73
00:04:41.253 --> 00:04:43.115
Yes?
&gt;&gt; Speaker 2: So, in this case,

74
00:04:43.115 --> 00:04:45.631
you don't have any effect right?

75
00:04:45.631 --> 00:04:49.393
Not hurt anything if you
put new project right here,

76
00:04:49.393 --> 00:04:53.660
it will still work the same way, right?
&gt;&gt; Kyle Simpson: It would not break

77
00:04:53.660 --> 00:04:58.690
anything but it would actually be less
performant because, the new keyword, we'll

78
00:04:58.690 --> 00:05:02.300
get into this later, but the new keyword
actually creates object instances and

79
00:05:02.300 --> 00:05:05.450
would throw those away.
&gt;&gt; Speaker 2: Would that

80
00:05:05.450 --> 00:05:08.090
communicate to people that you're

81
00:05:08.090 --> 00:05:10.753
actually creating something new?
&gt;&gt; Kyle Simpson: No, I think that's

82
00:05:10.753 --> 00:05:14.336
a terrible idea, to communicate to them
something that's not actually happening.

83
00:05:14.336 --> 00:05:18.050
The new keyword says I'm making
an instance of something.

84
00:05:18.050 --> 00:05:21.918
That's different from module
factories,so if you're doing a module

85
00:05:21.918 --> 00:05:24.883
factory, it should look like
a module factory not like

86
00:05:24.883 --> 00:05:28.947
a class.
&gt;&gt; Kyle Simpson: When I see the new

87
00:05:28.947 --> 00:05:33.415
keyword, my assumption's gonna be,
you're trying to instantiate a class.

88
00:05:33.415 --> 00:05:36.318
If you don't do that,
you're creating a stumbling block for me.

89
00:05:38.216 --> 00:05:43.543
&gt;&gt; Kyle Simpson: Okay.

90
00:05:43.543 --> 00:05:48.517
The usage in the UI functions Is
more straightforward because now we

91
00:05:48.517 --> 00:05:50.010
receive a project.

92
00:05:50.010 --> 00:05:56.180
So for example, here on line 117,
I call getId on the project object, and

93
00:05:56.180 --> 00:06:00.510
that's how I get my project Id, and I call
getDescription to get the description.

94
00:06:00.510 --> 00:06:04.280
I add them to the dom elements so there's
a nice clean separation there as well.

95
00:06:07.410 --> 00:06:08.450
Same with that ProjectToList.

96
00:06:09.870 --> 00:06:13.140
If you're still feeling a bit fuzzy
about this whole module pattern and

97
00:06:13.140 --> 00:06:16.380
how to use it,
not just as a syntactic approach, but

98
00:06:16.380 --> 00:06:21.340
as an actual design pattern and
architecture that drives the design

99
00:06:21.340 --> 00:06:25.710
of your software I strongly recommend that
you put a mental bookmark to go back and

100
00:06:25.710 --> 00:06:28.820
try this exercise a few
more times from scratch.

101
00:06:28.820 --> 00:06:33.080
Try your hand at it so
that you get more experienced with that.

