WEBVTT

1
00:00:00.270 --> 00:00:01.036
&gt;&gt; Kyle Simpson: Okay, part 2.

2
00:00:01.036 --> 00:00:02.955
A little bit more
challenging than part one.

3
00:00:02.955 --> 00:00:06.090
A little bit more to weed through.

4
00:00:06.090 --> 00:00:11.250
Hopefully you're feeling a little
bit better about what it means to

5
00:00:11.250 --> 00:00:16.520
think modularly, because this is as much
a design pattern as it is a set of syntax.

6
00:00:17.680 --> 00:00:24.380
So let's talk through the ex fixed b,
the part two solution, if you will.

7
00:00:24.380 --> 00:00:27.710
First, right off the bat,
I have now a helper's object.

8
00:00:27.710 --> 00:00:30.800
And I went ahead and moved those
three constants, max visible work

9
00:00:30.800 --> 00:00:35.520
description length, min work
description length, and max work time.

10
00:00:35.520 --> 00:00:36.050
I went ahead and

11
00:00:36.050 --> 00:00:40.450
moved those from constants to
properties on this name space object.

12
00:00:40.450 --> 00:00:42.820
Cuz they're also really being
used by these helpers anyway.

13
00:00:44.050 --> 00:00:47.770
So they are not needed anywhere
else other than on this name space.

14
00:00:47.770 --> 00:00:50.270
Now, we need to move those three
functions as we described.

15
00:00:50.270 --> 00:00:53.850
I will need to validate work entry format,
work description and

16
00:00:53.850 --> 00:00:56.430
format time, move that to this object.

17
00:00:59.010 --> 00:01:03.880
And the only thing that I needed to
change about the internals of them was

18
00:01:03.880 --> 00:01:08.010
their reference needed to have a Helpers
dot in front of this constance.

19
00:01:08.010 --> 00:01:13.087
So I have Helpers., Helpers.maxVisible,
Helpers.maxVisible down

20
00:01:13.087 --> 00:01:19.070
here.
&gt;&gt; Kyle Simpson: Any

21
00:01:19.070 --> 00:01:22.303
questions about moving the static
functions into that Helpers

22
00:01:22.303 --> 00:01:26.040
name space?
&gt;&gt; Kyle Simpson: Okay,

23
00:01:26.040 --> 00:01:28.410
this isn't a module, remember?

24
00:01:28.410 --> 00:01:31.710
Because it's not using encapsulation,
it's not stateful.

25
00:01:31.710 --> 00:01:32.750
So it's not a module, but

26
00:01:32.750 --> 00:01:36.360
it is a helpful way to organize
our code into a name space.

27
00:01:38.180 --> 00:01:40.943
Now, let's look at the setup UI function.

28
00:01:40.943 --> 00:01:46.186
This is part of what our
previous [INAUDIBLE] module has.

29
00:01:46.186 --> 00:01:50.345
So you'll notice that the variables
I moved in here were the ones that

30
00:01:50.345 --> 00:01:53.850
the UI-related stuff would
need like the templates.

31
00:01:53.850 --> 00:01:59.380
These are my DOM elements that
I'm gonna store references to,

32
00:01:59.380 --> 00:02:03.010
and importantly I have
two new objects here.

33
00:02:03.010 --> 00:02:07.030
Which are gonna store by ID,
the DOM elements that I create for

34
00:02:07.030 --> 00:02:09.730
each entry in my data model.

35
00:02:09.730 --> 00:02:10.830
So projectElements,

36
00:02:10.830 --> 00:02:16.080
I'm gonna store by project ID all of
those project DOM elements that I create.

37
00:02:16.080 --> 00:02:19.280
And then, workElements, it's gonna
store each one of the individual ones.

38
00:02:19.280 --> 00:02:24.840
So when I receive a call and
a I receive a workEntry ID I'm gonna

39
00:02:24.840 --> 00:02:29.300
be able to take that ID, look up and find
the DOM element that it's associated with.

40
00:02:29.300 --> 00:02:33.270
That's instead of taking my DOM elements
and polluting my data model with them,

41
00:02:33.270 --> 00:02:38.630
it's keeping a UI data model separate
from my business logic data model, okay?

42
00:02:39.850 --> 00:02:44.540
Now, I declared a public API,
which has my init, addProject basically,

43
00:02:44.540 --> 00:02:50.660
the methods that are UI related,
I went ahead and exposed those on my UI.

44
00:02:50.660 --> 00:02:54.640
Now, this function setupUI can be called,
theoretically, it could be called multiple

45
00:02:54.640 --> 00:02:58.780
times, so we theoretically could
be creating multiple UI instances.

46
00:02:58.780 --> 00:03:03.050
You're probably only gonna create one,
but it's not a bad idea to go ahead and

47
00:03:03.050 --> 00:03:05.220
create it as a function just in case,
maybe for

48
00:03:05.220 --> 00:03:09.930
testing purposes, we'd like to create
multiple UI instances to mock stuff out.

49
00:03:11.230 --> 00:03:14.160
So, now, I have it as a function
rather than as a singleton.

50
00:03:14.160 --> 00:03:15.460
And up here's how I created it,

51
00:03:15.460 --> 00:03:19.310
I created an instance of that
module by calling setupUI.

52
00:03:19.310 --> 00:03:22.580
I store it in the UI variable,
and I call UI.init.

53
00:03:22.580 --> 00:03:26.860
So I initialized the user interface
portion of the application,

54
00:03:26.860 --> 00:03:28.779
all the DOM element stuff
has been initialized.

55
00:03:30.790 --> 00:03:32.550
Now, I'm gonna call app.

56
00:03:32.550 --> 00:03:34.190
Now, I need to set up app function,

57
00:03:34.190 --> 00:03:37.160
which we don't have before,
which we haven't had before.

58
00:03:37.160 --> 00:03:42.740
I need to pass in my UI instance, so
my app knows which UI instance to talk to.

59
00:03:42.740 --> 00:03:44.390
That's again helpful for

60
00:03:44.390 --> 00:03:50.340
test mocking if we needed to have the app
talk to a mock dom, mock UI if you will.

61
00:03:52.070 --> 00:03:53.480
So let's look at setup app.

62
00:03:56.380 --> 00:03:59.370
Setup app, again, on line 187 there.

63
00:03:59.370 --> 00:04:01.320
It takes the UI instance.

64
00:04:01.320 --> 00:04:03.380
Now, you'll notice I'm
creating some other variables,

65
00:04:03.380 --> 00:04:04.820
here I've got a list of projects.

66
00:04:04.820 --> 00:04:08.580
So my list of projects that
was in app is still here.

67
00:04:08.580 --> 00:04:12.810
I've got a total time variable now,
because I didn't need that stored on

68
00:04:12.810 --> 00:04:15.980
the projects array,
now it's stored as it's own variable.

69
00:04:17.200 --> 00:04:21.527
And my public API here has
methods that relate to adding and

70
00:04:21.527 --> 00:04:24.101
getting data about my data model.

71
00:04:24.101 --> 00:04:28.810
addProject, and addWorkToProject existed,
getWorkEntryCount and

72
00:04:28.810 --> 00:04:33.990
getWorkEntryLocation were ones that I
invented, because I needed to provide

73
00:04:33.990 --> 00:04:38.790
information about the data model to
the UI method, so it knew what to do.

74
00:04:40.620 --> 00:04:44.700
So let's look at those, because those two
are different than what we had before.

75
00:04:44.700 --> 00:04:47.280
Get work entry code
pretty straight forward

76
00:04:47.280 --> 00:04:51.690
based upon the project ID called against,
I need to look up that project ID,

77
00:04:51.690 --> 00:04:56.306
and then return the length
of its work array.

78
00:04:56.306 --> 00:04:59.970
So I just need to know how many
work elements have been added to

79
00:04:59.970 --> 00:05:01.460
a particular project.

80
00:05:01.460 --> 00:05:04.260
Work entry locations
are a little bit more involved,

81
00:05:04.260 --> 00:05:08.310
I not only need to find out which index,
or I mean,

82
00:05:08.310 --> 00:05:14.500
what ID is the adjacent one to
add something into the DOM with.

83
00:05:14.500 --> 00:05:17.910
But I also need to figure out whether,
or not I should insert before, or after.

84
00:05:17.910 --> 00:05:23.760
So what's going on here is, it's easy
to insert the data into my data model,

85
00:05:23.760 --> 00:05:26.030
and then just call sort on my data model,
so

86
00:05:26.030 --> 00:05:29.610
that it's sorted by
descending amount of time.

87
00:05:29.610 --> 00:05:32.210
But it's not so
easy to do that with the DOM.

88
00:05:32.210 --> 00:05:36.865
The DOM I need to exactly which DOM
element I need to insert after,

89
00:05:36.865 --> 00:05:38.650
or insert before.

90
00:05:38.650 --> 00:05:42.400
So the way I figure out which
DOM element it is, is to ask for

91
00:05:42.400 --> 00:05:47.660
the current DOM element
that I am dealing with.

92
00:05:47.660 --> 00:05:50.490
So, in other words,
find the current DOM element, and

93
00:05:50.490 --> 00:05:53.660
then I either need to know should
I insert before, or insert after.

94
00:05:53.660 --> 00:05:57.060
So that's what this function's about,
it's just grabbing that information and

95
00:05:57.060 --> 00:05:57.980
returning that.

96
00:05:57.980 --> 00:06:02.900
I'm returning both of those pieces
of information in an array, so

97
00:06:02.900 --> 00:06:04.260
that the UI function can use it.

98
00:06:04.260 --> 00:06:06.440
So we'll show you in a moment
how the UI function uses it.

99
00:06:07.780 --> 00:06:12.120
You notice that there's nothing in my app
anymore that deals with DOM elements,

100
00:06:12.120 --> 00:06:15.360
it's all purely data model oriented stuff.

101
00:06:15.360 --> 00:06:17.350
So this is a much cleaner
separation of concerns.

102
00:06:20.688 --> 00:06:22.499
&gt;&gt; Kyle Simpson: When I wanna call the UI,

103
00:06:22.499 --> 00:06:28.366
like for example, here on 211, when I
have added a project to the data model,

104
00:06:28.366 --> 00:06:31.490
now I want to add that
project into the UI.

105
00:06:31.490 --> 00:06:35.717
So I call off the UI add project to list,
which creates the project entry,

106
00:06:35.717 --> 00:06:36.982
the box at the bottom.

107
00:06:36.982 --> 00:06:42.430
And then, add project selection adds
the entry to my drop down for my projects.

108
00:06:43.680 --> 00:06:47.770
I just call those two UI methods and
I pass along the data that they need.

109
00:06:47.770 --> 00:06:49.860
I pass along the project ID.

110
00:06:49.860 --> 00:06:51.380
Pass along the project description.

111
00:06:53.650 --> 00:06:58.273
So let's look at what
those methods look like.

112
00:06:58.273 --> 00:07:01.320
Add project to list.

113
00:07:01.320 --> 00:07:05.220
Just takes the idea in the description
shouldn't be even really needed to change

114
00:07:05.220 --> 00:07:10.310
this one, but the one thing that's
different here now is line 110,

115
00:07:10.310 --> 00:07:13.980
where I need to store a reference
to that project's DOM element, so

116
00:07:13.980 --> 00:07:15.790
I can use it later.

117
00:07:15.790 --> 00:07:20.867
So I create the project DOM element, and
then I store it into that projectElements

118
00:07:20.867 --> 00:07:26.301
object at the projectId location.
&gt;&gt; Kyle Simpson: Same

119
00:07:26.301 --> 00:07:30.405
thing with adding project work entries,

120
00:07:30.405 --> 00:07:36.160
I store the workEntry in
workElements at its ID location.

121
00:07:37.260 --> 00:07:41.138
Those objects then are letting me look
up later when I need to get at some DOM

122
00:07:41.138 --> 00:07:45.141
element to do something with it, I now
have a list of those DOM elements that I

123
00:07:45.141 --> 00:07:49.571
can go and look them up by ID, okay?
&gt;&gt; Kyle Simpson: All right, so

124
00:07:49.571 --> 00:07:52.140
let's follow the workflow here.

125
00:07:52.140 --> 00:07:58.280
In initUI,
we set up a subNewWorkEntry click handler.

126
00:07:58.280 --> 00:08:00.340
What does submit new work entry do?

127
00:08:00.340 --> 00:08:04.460
Well, it grabs the data from the form
like the project ID that was selected in

128
00:08:04.460 --> 00:08:07.490
the drop down,
the description, the minutes.

129
00:08:07.490 --> 00:08:11.850
It validates them before,
now calling Helpers.validate.

130
00:08:11.850 --> 00:08:17.030
And it unsets the form, so that we
basically reset the form each time.

131
00:08:17.030 --> 00:08:19.850
And now, it calls app.addwork to project.

132
00:08:19.850 --> 00:08:22.010
That's a data model-oriented thing.

133
00:08:22.010 --> 00:08:25.424
So let's hand that data off to
the data model to let it do its thing.

134
00:08:25.424 --> 00:08:28.670
Now, at .addworktoproject,

135
00:08:28.670 --> 00:08:34.140
if we come down here, we already looked at
this one, this does the data model stuff.

136
00:08:34.140 --> 00:08:38.290
It updates the total amount of
time accrued across all projects.

137
00:08:38.290 --> 00:08:40.720
It creates a project entry.

138
00:08:40.720 --> 00:08:45.050
Time, it adds to the time
in the project entry.

139
00:08:45.050 --> 00:08:48.300
It creates a work entry for
the new work that's been added and

140
00:08:48.300 --> 00:08:50.440
adds that, pushes that on the list.

141
00:08:52.220 --> 00:08:57.270
If this list is more than one,
it goes ahead and sorts it.

142
00:08:59.560 --> 00:09:01.686
And then,
we call these three UI functions.

143
00:09:01.686 --> 00:09:05.677
The UI function is going to say
add that work entry to my list,

144
00:09:05.677 --> 00:09:10.299
update the project total time,
that's the little thing that gives us

145
00:09:10.299 --> 00:09:14.340
the updated time, and
update the work log total time.

146
00:09:14.340 --> 00:09:16.010
That's for each project.

147
00:09:16.010 --> 00:09:18.660
I mean, that's for
the total overall versus the project.

148
00:09:19.770 --> 00:09:23.559
Passing in the data, so let's go
look back at add work entry to list,

149
00:09:24.810 --> 00:09:27.110
we're taking a projectID
in the workEntryData.

150
00:09:28.120 --> 00:09:33.275
We pass along, here is how we create
those DOM elements, we save them.

151
00:09:33.275 --> 00:09:35.408
Here's how I use the stuff in app.

152
00:09:35.408 --> 00:09:40.460
I say, App.getWorkEntryCount, so I'm
asking how many work entries are there.

153
00:09:40.460 --> 00:09:42.910
I don't want to inspect
the dome to figure that out,

154
00:09:42.910 --> 00:09:46.060
that's a data model question,
not a DOM question.

155
00:09:46.060 --> 00:09:48.750
So I ask the data model,
how many entries are there?

156
00:09:48.750 --> 00:09:50.160
If there's more than one entry,

157
00:09:50.160 --> 00:09:53.850
then I know I need to figure out
a specific location to insert this thing.

158
00:09:53.850 --> 00:09:58.510
If this was the only entry,
I can just append it, no big deal, okay?

159
00:09:58.510 --> 00:10:00.900
Let's say I do need to figure
out where to insert it.

160
00:10:00.900 --> 00:10:03.180
Well, I need to get that information, so

161
00:10:03.180 --> 00:10:09.506
I'm gonna store the adjacentworkentryid
and the insertbefore.

162
00:10:09.506 --> 00:10:14.370
I am gonna get those by calling that
getworkentrylocation and this syntax,

163
00:10:14.370 --> 00:10:17.530
if you haven't seen that before
that's called array destruction.

164
00:10:17.530 --> 00:10:19.740
I get back a single array
from that function and

165
00:10:19.740 --> 00:10:22.270
I break it into it's two
individual pieces of data.

166
00:10:24.250 --> 00:10:30.510
So, now, I say,
if you told me to insert before the ID.

167
00:10:30.510 --> 00:10:34.650
I look for the work element of the ID and
I call before.

168
00:10:34.650 --> 00:10:36.770
If you told me to not insert before,

169
00:10:36.770 --> 00:10:40.340
then I'm gonna look up that work
element ID and insert it after.

170
00:10:42.000 --> 00:10:45.996
So that's given me the information I need
to know about which element should I

171
00:10:45.996 --> 00:10:47.547
insert this either before, or

172
00:10:47.547 --> 00:10:52.793
after in the DOM.
&gt;&gt; Kyle Simpson: If I don't have more

173
00:10:52.793 --> 00:10:58.151
than one element, it's as simple as make
the project entry itself visible and

174
00:10:58.151 --> 00:11:00.950
append the work entry into the list.

175
00:11:00.950 --> 00:11:03.230
A lot of that logic was already there, but

176
00:11:03.230 --> 00:11:07.750
I needed to figure out a clean way to
separate the data model and the UI part.

177
00:11:07.750 --> 00:11:09.180
This is just one way of doing it.

178
00:11:09.180 --> 00:11:13.200
You may have chosen to keep those pieces
of logic separate in a different way.

179
00:11:13.200 --> 00:11:17.180
This is not the only way, but
I wanted to cleanly separate the semantics

180
00:11:17.180 --> 00:11:21.640
of what I do in the UI with DOM elements
versus what the data model tracks.

181
00:11:21.640 --> 00:11:28.866
What the app data model tracks.
&gt;&gt; Kyle Simpson: We

182
00:11:28.866 --> 00:11:34.561
also solve the calls from app to these
two UI methods update project total time,

183
00:11:34.561 --> 00:11:36.856
and update work log total time,

184
00:11:36.856 --> 00:11:42.551
those are pretty straightforward they
just grab the appropriate DOM element,

185
00:11:42.551 --> 00:11:48.767
and update their information.
&gt;&gt; Kyle Simpson: So,

186
00:11:48.767 --> 00:11:55.160
big picture here, we now have a Helpers
name space with the static Helpers on it.

187
00:11:55.160 --> 00:12:01.232
And we have a UI module, which its state
that it tracks is all the state of the UI.

188
00:12:01.232 --> 00:12:01.850
And then,

189
00:12:01.850 --> 00:12:07.520
we have the app module, who's state is all
of the business logic data model stuff.

190
00:12:07.520 --> 00:12:11.809
Three separate entities that do their own,
that take care of their own concerns.

191
00:12:13.050 --> 00:12:15.910
Now, I chose a very
deliberate architecture here,

192
00:12:15.910 --> 00:12:19.300
which might be different then the way
you would have architected this app, and

193
00:12:19.300 --> 00:12:20.410
that's entirely okay.

194
00:12:20.410 --> 00:12:25.050
It was to take you down a path of
understanding what can modules do for me.

195
00:12:25.050 --> 00:12:28.288
Many people these days seem to
be enamored with components,

196
00:12:28.288 --> 00:12:31.849
it's the hot rage in react and
all the other frameworks out there.

197
00:12:31.849 --> 00:12:36.223
And in the component world,
we think about everything, UI,

198
00:12:36.223 --> 00:12:40.270
business logic, all that stuff,
all in one component.

199
00:12:41.400 --> 00:12:45.795
So if you thought about it that way, you
could have made an individual module for

200
00:12:45.795 --> 00:12:48.471
each of these different
concerns in the page, and

201
00:12:48.471 --> 00:12:51.354
it would have track its own DOM and
its own data model.

202
00:12:51.354 --> 00:12:54.415
And then, you'd have another one
over here tracking its own DOM and

203
00:12:54.415 --> 00:12:55.337
its own data model.

204
00:12:55.337 --> 00:12:59.986
So you might have had a component for the
form, and then you might have had another

205
00:12:59.986 --> 00:13:04.835
component for that total time thing that's
being printed, and another component for

206
00:13:04.835 --> 00:13:06.370
each of the projects.

207
00:13:06.370 --> 00:13:08.880
And then, within those components,
you'd have a component for

208
00:13:08.880 --> 00:13:10.970
each of the work entries within it.

209
00:13:10.970 --> 00:13:15.720
That's the more React style, or
component style way of architecting apps.

210
00:13:15.720 --> 00:13:17.730
And if that feels more familiar to you,
that's fine.

211
00:13:17.730 --> 00:13:21.580
The point I'm trying to make is that you
could've done that with modules as well.

212
00:13:21.580 --> 00:13:25.110
That doesn't necessarily mean that
you have to go the classes route like

213
00:13:25.110 --> 00:13:26.260
React does.

214
00:13:26.260 --> 00:13:28.440
We could've gone that route with modules.

215
00:13:28.440 --> 00:13:33.233
I wanted to illustrate a simpler way of
just dividing out the behavior [COUGH]

216
00:13:33.233 --> 00:13:39.050
using the module pattern.
&gt;&gt; Kyle Simpson: What

217
00:13:39.050 --> 00:13:43.410
questions could I answer
about this approach?

218
00:13:43.410 --> 00:13:47.140
So I was talking a little earlier there's
a question about why didn't I use the IIFE

219
00:13:47.140 --> 00:13:48.870
pattern on the UI?

220
00:13:48.870 --> 00:13:51.140
Why'd I make a set-up UI function?

221
00:13:51.140 --> 00:13:56.180
Primarily I made a setup UI function
instead of an IIFE, because theoretically

222
00:13:56.180 --> 00:14:00.780
if we were doing a test suite for this, we
might wanna mock out multiple different UI

223
00:14:00.780 --> 00:14:06.110
instances, so I'd wanna be able to call
the setup UI function multiple times.

224
00:14:06.110 --> 00:14:09.100
Same thing with app, I'd wanna be
able to create multiple apps, so

225
00:14:09.100 --> 00:14:11.880
that I can mock against
different UI instances.

226
00:14:11.880 --> 00:14:13.720
So I might wanna have
multiple App instances.

227
00:14:13.720 --> 00:14:17.450
So it was basically just future
thinking if I wanted to do

228
00:14:17.450 --> 00:14:22.830
testing.
&gt;&gt; Speaker 2: Is the helpers thing,

229
00:14:22.830 --> 00:14:26.320
is that a name space just for
convenience's sake of this demo?

230
00:14:26.320 --> 00:14:29.050
Or why would that not be a nodule?
&gt;&gt; Kyle Simpson: The reason it's not

231
00:14:29.050 --> 00:14:31.220
a module is,
because it doesn't have any state.

232
00:14:32.900 --> 00:14:34.930
You could make it into a module, and

233
00:14:34.930 --> 00:14:37.800
then it's a bunch of unnecessary
boiler plate for no benefit.

234
00:14:39.060 --> 00:14:44.080
So for me, the best code is the simplest
code that gets the job done appropriately.

235
00:14:44.080 --> 00:14:49.390
Here, because that stuff, by its very
nature does not have any state to it,

236
00:14:49.390 --> 00:14:53.860
there's no reason to make it into
a module, or a class, or anything else.

237
00:14:53.860 --> 00:14:57.110
It's just stuff that needs to
be collected into a name space.

238
00:14:57.110 --> 00:15:00.690
So I think that's the appropriate way to
organize that particular piece of code.

239
00:15:04.940 --> 00:15:07.030
Yeah?
&gt;&gt; Speaker 3: I'm not sure how

240
00:15:07.030 --> 00:15:09.840
to phrase this question,
but when writing this,

241
00:15:09.840 --> 00:15:12.820
do you go into it going these
are my helper functions?

242
00:15:12.820 --> 00:15:15.200
I know for a fact that they're
not gonna have any state, so

243
00:15:15.200 --> 00:15:16.900
I'm gonna write it like this.

244
00:15:16.900 --> 00:15:18.986
Or do you end up refactoring
it after the fact?

245
00:15:18.986 --> 00:15:24.420
Are you pre-planning that this is
gonna be stateless type object, or

246
00:15:24.420 --> 00:15:25.880
I'm just wondering about your methodology.

247
00:15:25.880 --> 00:15:28.220
Or do you end up coming back through,
and refactoring it?

248
00:15:28.220 --> 00:15:30.990
Maybe you did make it a module,
thinking it was.

249
00:15:30.990 --> 00:15:32.880
Just how do you start writing?

250
00:15:32.880 --> 00:15:37.100
Cuz we're refactoring existing code,
but if he starts, or I start, or

251
00:15:37.100 --> 00:15:38.200
someone starts writing it,

252
00:15:38.200 --> 00:15:41.190
then we start writing in a module pattern,
and then you come back, or do you start to

253
00:15:41.190 --> 00:15:44.000
plan that stuff out in advance?
&gt;&gt; Kyle Simpson: That's actually a much

254
00:15:44.000 --> 00:15:47.610
bigger question than even the scope of
what we're discussing within this course.

255
00:15:49.220 --> 00:15:52.890
So, for example,
the functional course that I teach,

256
00:15:52.890 --> 00:15:57.740
we talk a lot more about being very
careful to design real functions,

257
00:15:57.740 --> 00:16:01.870
meaning I got input, and I pull data
back out and that sort of thing.

258
00:16:01.870 --> 00:16:03.840
And I've got a book on that topic.

259
00:16:03.840 --> 00:16:08.770
So my instinct is to look for
any opportunity that I can to create real

260
00:16:08.770 --> 00:16:13.270
functions like that, that are stateless,
and take data in and get data back out.

261
00:16:13.270 --> 00:16:16.280
Because, that's more amenable to
functional programming principles,

262
00:16:16.280 --> 00:16:20.500
which makes code easier to read and
verify, and all of that.

263
00:16:22.070 --> 00:16:25.700
But I would say in real
response to your answer both.

264
00:16:25.700 --> 00:16:29.860
You start out hopefully looking for
that probably make some mistakes and

265
00:16:29.860 --> 00:16:31.300
have to go back and refactor a lot of it.

266
00:16:31.300 --> 00:16:33.310
It is a highly irritative process.

267
00:16:33.310 --> 00:16:35.320
So even in making this exercise for

268
00:16:35.320 --> 00:16:38.980
this course I redid it a bunch of
different times, cuz I kept changing my

269
00:16:38.980 --> 00:16:44.250
mind on not only what would be good to
demonstrate to people taking the course.

270
00:16:44.250 --> 00:16:48.050
But also just, what's good architecture,
what's a good clean separation.

271
00:16:48.050 --> 00:16:50.520
I didn't have that
preplanned out perfectly.

272
00:16:50.520 --> 00:16:52.330
I figured it out as I went along and

273
00:16:52.330 --> 00:16:56.970
I think that's generally how
I write real code is sort of,

274
00:16:56.970 --> 00:17:01.810
I've got a general idea on what's a good
practice, but I have to figure out as

275
00:17:01.810 --> 00:17:05.399
the rubber meets the road, what's the best
way to do that for any given piece.

276
00:17:07.850 --> 00:17:09.710
Unfortunately, there's
no magic formula there,

277
00:17:09.710 --> 00:17:13.220
it's just developing the instinct for,
well,

278
00:17:13.220 --> 00:17:17.310
if this doesn't need to be stateful,
it's probably better if it isn't.

279
00:17:17.310 --> 00:17:20.150
Because state list code is
a lot easier to verify and

280
00:17:20.150 --> 00:17:24.120
maintain and audit than sateful code.

281
00:17:24.120 --> 00:17:29.244
So I wanted to make as much of
that state list as I could.

282
00:17:29.244 --> 00:17:30.556
&gt;&gt; Speaker 4: So, in this case,

283
00:17:30.556 --> 00:17:35.476
is it truly a decision of separating
the code which has side effects from

284
00:17:35.476 --> 00:17:40.930
the pure code?
&gt;&gt; Kyle Simpson: I mean, that's more

285
00:17:40.930 --> 00:17:44.230
of a question for the functional products.
&gt;&gt; Speaker 4: If you

286
00:17:46.570 --> 00:17:51.360
consistently want to refactor
the direction, eventually end up having

287
00:17:52.490 --> 00:17:57.560
functions as a side effect code.
&gt;&gt; Kyle Simpson: It's

288
00:17:57.560 --> 00:18:01.510
not that what you're saying is wrong,
I'm just saying it's an orthogonal topic.

289
00:18:01.510 --> 00:18:04.420
To ask should I always do this,
or should I not?

290
00:18:04.420 --> 00:18:07.350
If you don't like functional programming
you don't wanna got that direction.

291
00:18:07.350 --> 00:18:09.970
If you like functional programming you
wanna go that direction as much as you

292
00:18:09.970 --> 00:18:14.580
possibly can, but that's separate from
the questions of given a set of things

293
00:18:14.580 --> 00:18:17.720
where I do need to manage some state
can the module pattern help me do that?

