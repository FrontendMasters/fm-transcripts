WEBVTT

1
00:00:00.224 --> 00:00:01.401
&gt;&gt; Kyle Simpson: What about Booleans?

2
00:00:01.401 --> 00:00:04.536
Anybody ever done an if statement before
where you just passed in something that

3
00:00:04.536 --> 00:00:05.673
wasn't already a Boolean?

4
00:00:05.673 --> 00:00:06.945
Anybody ever done that before?

5
00:00:06.945 --> 00:00:09.994
You might not have thought,
I'm doing an implicit coercion.

6
00:00:09.994 --> 00:00:15.431
You might have done so well writing a blog
post saying, implicit coercion is bad.

7
00:00:15.431 --> 00:00:16.960
That's implicit coercion.

8
00:00:16.960 --> 00:00:20.365
The if statement requires a Boolean and
if you don't give it a Boolean,

9
00:00:20.365 --> 00:00:21.802
guess what's gonna happen?

10
00:00:21.802 --> 00:00:23.249
It's gonna implicitly coerce it.

11
00:00:23.249 --> 00:00:24.658
Does that mean it's bad?

12
00:00:24.658 --> 00:00:25.580
Absolutely not.

13
00:00:25.580 --> 00:00:28.896
I think this is one of my favorite parts
of JavaScript, that it implicitly coerces

14
00:00:28.896 --> 00:00:31.650
those things to Boolean so
I don't have to worry about that detail.

15
00:00:31.650 --> 00:00:34.482
You know why,
cuz that's not an important detail on that

16
00:00:34.482 --> 00:00:38.733
line of code.
&gt;&gt; Kyle Simpson: What I'm communicating

17
00:00:38.733 --> 00:00:42.271
here, is that if it is truthy,
make this thing happen.

18
00:00:42.271 --> 00:00:46.879
I don't need to clutter up that code by
explicitly coercing it to a boolean so

19
00:00:46.879 --> 00:00:48.391
that I can do an if check.

20
00:00:48.391 --> 00:00:55.269
The implicit system here is helpful
because it hides the unnecessary noise.

21
00:00:55.269 --> 00:00:57.754
I'm a big fan of line 2, but

22
00:00:57.754 --> 00:01:03.256
I don't see how you can be
consistent in your world viewpoint.

23
00:01:03.256 --> 00:01:07.644
To talk bad about implicit coercion,
and then write code like that.

24
00:01:07.644 --> 00:01:11.712
So, string 123, it's truthy, right,
cause it's not on the falsey list, so

25
00:01:11.712 --> 00:01:13.119
we passed the if statement.

26
00:01:13.119 --> 00:01:17.250
The 0 on line six,
is that truthy or falsey?

27
00:01:17.250 --> 00:01:17.994
&gt;&gt; Speaker 2: Falsey.

28
00:01:17.994 --> 00:01:19.421
&gt;&gt; Kyle Simpson: So on the falsely list

29
00:01:19.421 --> 00:01:20.219
was false.

30
00:01:20.219 --> 00:01:21.947
So we're gonna print the, right.

31
00:01:21.947 --> 00:01:24.118
Now, what about line 10?

32
00:01:24.118 --> 00:01:28.103
Line 10 is where things start to
get a little bit strange here.

33
00:01:28.103 --> 00:01:35.570
Cuz it works, we compare 0 to false
with that dreaded double equals.

34
00:01:35.570 --> 00:01:37.697
Which we gonna get lots into I promise.

35
00:01:37.697 --> 00:01:40.121
We compare 0 to false.

36
00:01:40.121 --> 00:01:42.593
And it turns out that the check passes.

37
00:01:42.593 --> 00:01:46.124
So what's going on?

38
00:01:46.124 --> 00:01:49.879
Here's why I said earlier,
I made you write down in your notes,

39
00:01:49.879 --> 00:01:53.568
that the rules for Boolean coercion
only happen if the rules for

40
00:01:53.568 --> 00:01:56.158
Boolean coercion are actually happening.

41
00:01:56.158 --> 00:01:58.351
Remember that whole no op that I said?

42
00:01:58.351 --> 00:02:03.004
Sounded like a Buddhist monk saying
something weird or whatever like,

43
00:02:03.004 --> 00:02:05.418
it only works when it works, right?

44
00:02:05.418 --> 00:02:07.436
Okay, gee, thanks.

45
00:02:07.436 --> 00:02:08.636
Here's what's happening.

46
00:02:08.636 --> 00:02:14.048
When you look at foo == false,
0 == false, I'm willing to bet that most,

47
00:02:14.048 --> 00:02:18.313
if not all of you, think to yourselves,
well, 0 is falsie,

48
00:02:18.313 --> 00:02:22.987
so it's gonna become false and
then I compare to false to false, and

49
00:02:22.987 --> 00:02:26.703
of course, they're the same,
so we pass the check.

50
00:02:26.703 --> 00:02:29.777
But, that's not what happens at all.

51
00:02:29.777 --> 00:02:35.605
As a matter of fact, line 10 only
works because of a happy accident.

52
00:02:35.605 --> 00:02:37.821
I don't like relying upon
happy accidents in my code,

53
00:02:37.821 --> 00:02:41.041
I don't know about you.
&gt;&gt; Kyle Simpson: Line 10 only works

54
00:02:41.041 --> 00:02:42.187
because of a happy accident.

55
00:02:42.187 --> 00:02:43.662
Here's what actually happens.

56
00:02:43.662 --> 00:02:49.259
We're gonna get into double equals in
a minute, but I'll just tell you right now

57
00:02:49.259 --> 00:02:54.958
that what actually happens is that the
double equals prefers to compare numbers.

58
00:02:54.958 --> 00:02:58.514
So what it's actually gonna do
instead of making 0 into false and

59
00:02:58.514 --> 00:03:01.812
comparing the two falses,
it's gonna make false into 0 and

60
00:03:01.812 --> 00:03:06.152
compare the two 0s.
&gt;&gt; Kyle Simpson: Why?

61
00:03:06.152 --> 00:03:08.932
I don't know, probably cuz
number comparison is a lot more

62
00:03:08.932 --> 00:03:12.866
efficient in the internals of the CPU.
&gt;&gt; Kyle Simpson: But

63
00:03:12.866 --> 00:03:15.067
that's the way the algorithm was written,

64
00:03:15.067 --> 00:03:19.976
it prefers to compare numbers.
&gt;&gt; Kyle Simpson: I bet that's another one

65
00:03:19.976 --> 00:03:23.534
of those that you could trip people
up on in an interview question.

66
00:03:23.534 --> 00:03:25.829
Because most people never stop to think,
how does that work?

67
00:03:25.829 --> 00:03:28.130
You just assume that
is a Boolean coercion.

68
00:03:28.130 --> 00:03:29.837
Nope, it's not.

69
00:03:29.837 --> 00:03:30.877
And here it works.

70
00:03:30.877 --> 00:03:33.789
Your assumption works out okay for
you, but it's a happy accident.

71
00:03:33.789 --> 00:03:35.170
On the next screen,

72
00:03:35.170 --> 00:03:39.980
I'm gonna show you something where
that does not work so well, okay?

73
00:03:39.980 --> 00:03:44.110
Line 14.
&gt;&gt; Kyle Simpson: That or operator, that

74
00:03:44.110 --> 00:03:49.380
double pipe that we have there, everybody
recognizes that as the or operator.

75
00:03:49.380 --> 00:03:52.409
The double ampersand being the and
operator.

76
00:03:52.409 --> 00:03:53.701
What do those things do?

77
00:03:53.701 --> 00:03:59.115
Well, those things are often
called logical operators.

78
00:03:59.115 --> 00:04:00.836
That's how they're labeled.

79
00:04:00.836 --> 00:04:03.641
That's how they're labeled in
the official spec in the documentation.

80
00:04:03.641 --> 00:04:05.372
They're called logical operators.

81
00:04:05.372 --> 00:04:07.307
Why do you think they're called that?

82
00:04:07.307 --> 00:04:11.617
Well because, in their original design,

83
00:04:11.617 --> 00:04:16.774
they produced a logical value,
aka true or false.

84
00:04:16.774 --> 00:04:18.614
That was their purpose.

85
00:04:18.614 --> 00:04:21.499
Their purpose was to produce a true or
false.

86
00:04:21.499 --> 00:04:26.822
That is not how these operators work
in JavaScript, or Ruby of Python.

87
00:04:26.822 --> 00:04:30.044
The difference is subtle but
actually pretty important.

88
00:04:30.044 --> 00:04:34.079
The or operator here is not
producing a true or a false,

89
00:04:34.079 --> 00:04:38.489
baz is not going to be true or
false baz is gonna be quote foo.

90
00:04:38.489 --> 00:04:40.785
And whoa, whoa, wait a minute.

91
00:04:40.785 --> 00:04:44.056
The end result is not a logical result,

92
00:04:44.056 --> 00:04:49.921
the end result is that we actually
just picked one of the two operands.

93
00:04:49.921 --> 00:04:54.959
The or operator and the and
operator, these so-called logical

94
00:04:54.959 --> 00:04:59.633
operators actually,
are more like selection operators.

95
00:04:59.633 --> 00:05:06.003
They take two operands, they do a Boolean
coercion test against the first one.

96
00:05:06.003 --> 00:05:09.914
And based upon that end result,
pick one of the two.

97
00:05:09.914 --> 00:05:12.572
They select one of the two operands,
that's what they do.

98
00:05:12.572 --> 00:05:16.548
That's why we have this default value
idiom that we've all probably seen.

99
00:05:16.548 --> 00:05:20.140
Where I can say make baz
equal to either foo or

100
00:05:20.140 --> 00:05:26.077
back up to quote foo as a default if
the variable foo wasn't already set.

101
00:05:26.077 --> 00:05:30.848
Cuz we're gonna do Boolean check against
foo and if it passes, we're gonna use foo.

102
00:05:30.848 --> 00:05:36.282
Otherwise we're gonna to use the thing
on the other side, the other operand.

103
00:05:36.282 --> 00:05:39.371
So this thing is selecting
one of the two operands.

104
00:05:39.371 --> 00:05:41.154
Same thing with the ampersand.

105
00:05:41.154 --> 00:05:44.612
Here we call it the default value idiom.

106
00:05:44.612 --> 00:05:49.210
With the ampersand, I don't know if any
of you have ever seen this before, but

107
00:05:49.210 --> 00:05:53.948
lit JavaScript programmers like to show
off their skills of how clever they are,

108
00:05:53.948 --> 00:05:57.797
and they'll write cb,
ampersand ampersand, cb parenthesis.

109
00:05:57.797 --> 00:06:00.455
Which is a short hand way of saying,

110
00:06:00.455 --> 00:06:05.166
if the call back has been set,
then invoke the callback, why?

111
00:06:05.166 --> 00:06:08.628
Because we're checking
the value of the cb and

112
00:06:08.628 --> 00:06:14.307
it only goes to the second operand if
it passes as true.If it fails as false,

113
00:06:14.307 --> 00:06:18.062
we short circuit out and
don't try to execute it.

114
00:06:18.062 --> 00:06:22.685
So we're showing off our skills, relying
upon not only this implicit coercion

115
00:06:22.685 --> 00:06:27.519
happening, but also, we're relying upon
short circuiting of these operators.

116
00:06:27.519 --> 00:06:31.656
I'm not negative on that,
I think those are great features, but

117
00:06:31.656 --> 00:06:35.128
we have to be honest that
they're implicit features.

118
00:06:35.128 --> 00:06:39.696
How many have you ever written
something like if a or b?

119
00:06:39.696 --> 00:06:42.425
Or if a and b.

120
00:06:42.425 --> 00:06:45.829
And in all of those cases
where those things already

121
00:06:45.829 --> 00:06:50.722
Booleans?
&gt;&gt; Kyle Simpson: See

122
00:06:50.722 --> 00:06:55.619
you're already relying
upon implicit coercion.

123
00:06:55.619 --> 00:06:59.174
Does that create an identity crisis for
you that you should go back and

124
00:06:59.174 --> 00:07:02.862
fix all your code and put in all those
double negates all over the place?

125
00:07:02.862 --> 00:07:06.766
I would argue this is a place where
the implicit coercion is helping

126
00:07:06.766 --> 00:07:08.587
the readability of your code.

127
00:07:08.587 --> 00:07:14.493
Everybody following that reasoning?
&gt;&gt; Kyle Simpson: Here's where the double

128
00:07:14.493 --> 00:07:19.096
equal stuff starts to get crazy for us,
because here we have the string 123.

129
00:07:19.096 --> 00:07:23.135
Now, the string 123, we've already
established that it's truthy, right?

130
00:07:23.135 --> 00:07:27.015
So when I double equal it to true and
that fails,

131
00:07:27.015 --> 00:07:30.023
my whole world starts to fall apart.

132
00:07:30.023 --> 00:07:31.680
How can something be truthy but

133
00:07:31.680 --> 00:07:37.063
not double equal to true?
&gt;&gt; Kyle Simpson: Well, it's

134
00:07:37.063 --> 00:07:41.995
cuz the double equal isn't doing a Boolean
coercion at all, just like I said before.

135
00:07:41.995 --> 00:07:45.189
The double equals prefers
to compare numbers.

136
00:07:45.189 --> 00:07:49.450
So, if I give it a string and
a Boolean, guess what's gonna happen?

137
00:07:49.450 --> 00:07:52.297
Both of them are gonna
get coerced to numbers.

138
00:07:52.297 --> 00:07:55.627
The string is gonna coerce
to the number 1,2,3,

139
00:07:55.627 --> 00:07:58.221
the true is gonna coerce to the number 1.

140
00:07:58.221 --> 00:08:01.405
And the number 1,2,3 and number 1
are most definitely not equal to each

141
00:08:01.405 --> 00:08:05.249
other.
&gt;&gt; Kyle Simpson: Now you may be

142
00:08:05.249 --> 00:08:08.560
thinking at this point, I promise we're
getting to double equals in a minute, but

143
00:08:08.560 --> 00:08:10.214
you may be thinking at this point, well,

144
00:08:10.214 --> 00:08:12.703
geez this double equals just
seems hopelessly complicated.

145
00:08:12.703 --> 00:08:16.492
I'm never gonna be able to fully
understand this double equals thing.

146
00:08:16.492 --> 00:08:19.028
Not true,
it's actually a very simple algorithm.

147
00:08:19.028 --> 00:08:22.653
Here's the one key takeaway,
we'll come back to this.

148
00:08:22.653 --> 00:08:27.555
If you just know that double
equals prefers to compare numbers,

149
00:08:27.555 --> 00:08:30.745
most of the behavior simplifies itself.

150
00:08:30.745 --> 00:08:34.203
That's just something
nobody's taught me before.

151
00:08:34.203 --> 00:08:36.978
Double equals to prefers
to compare numbers.

152
00:08:36.978 --> 00:08:43.169
Just that one fact eliminates most of
the confusion of the double equals, okay?

153
00:08:43.169 --> 00:08:44.693
We'll get into more of that.

154
00:08:44.693 --> 00:08:47.622
So here it's not doing a Boolean coercion.

155
00:08:47.622 --> 00:08:49.906
So let me give you a takeaway.

156
00:08:49.906 --> 00:08:52.835
You're looking for, I don't wanna talk
about abstract, give me practical stuff.

157
00:08:52.835 --> 00:08:56.587
Here's a takeaway,
don't ever under any circumstances, and

158
00:08:56.587 --> 00:09:00.071
I don't very often use absolutes,
but this is one of them.

159
00:09:00.071 --> 00:09:05.174
Don't ever under any circumstances,
compare with double equals true or

160
00:09:05.174 --> 00:09:09.959
double equals false, just never,
ever, ever, ever, ever do it.

161
00:09:09.959 --> 00:09:15.575
Because, most likely,
it's only gonna work as a happy accident.

162
00:09:15.575 --> 00:09:20.592
And in the worst case,
it's gonna confuse people and create bugs.

163
00:09:20.592 --> 00:09:22.954
Just don't do it.

164
00:09:22.954 --> 00:09:26.288
We’ve already talked about
multiple other ways, for

165
00:09:26.288 --> 00:09:31.070
you to either let it do the implicit
coercion for you, or be explicit about it,

166
00:09:31.070 --> 00:09:35.419
but don’t rely upon double equals to true,
or double equals to false,

167
00:09:35.419 --> 00:09:39.142
cuz they aren’t gonna do what
you’re expecting them to do.

168
00:09:39.142 --> 00:09:43.280
And more importantly, they’re not gonna do
it, what the future reader of your code is

169
00:09:43.280 --> 00:09:49.490
expecting it do do.
&gt;&gt; Kyle Simpson: Same

170
00:09:49.490 --> 00:09:50.695
thing down on line 7.

171
00:09:50.695 --> 00:09:52.689
We've got an array.

172
00:09:52.689 --> 00:09:56.190
We know the array, even though
it's an empty array, it's truthy.

173
00:09:56.190 --> 00:09:59.142
Why is it truthy?

174
00:09:59.142 --> 00:10:01.012
It's not on the falsey list, right?

175
00:10:01.012 --> 00:10:02.681
Even though an empty array
seems like it ought to be.

176
00:10:02.681 --> 00:10:05.565
It's not on the falsy list so
it's gotta be truthy.

177
00:10:05.565 --> 00:10:09.876
So we do an if test for it and
sure enough it passes as true.

178
00:10:09.876 --> 00:10:14.421
So we've established that it's truthy but
on line 10 we double equal it to false,

179
00:10:14.421 --> 00:10:15.648
and that also passes.

180
00:10:15.648 --> 00:10:20.570
How can something be both truthy and
double equal to false?

181
00:10:20.570 --> 00:10:24.403
Or maybe it's cuz the double equals
doesn't do a Boolean coersion.

182
00:10:24.403 --> 00:10:28.208
Maybe it's cuz that double equals is
gonna try to do a numeric coersion.

183
00:10:28.208 --> 00:10:32.059
So we're gonna take the empty array,
remember primitives need to be,

184
00:10:32.059 --> 00:10:34.898
I mean non-primitives need
to become primitives.

185
00:10:34.898 --> 00:10:39.285
So what is the two primitive of
an empty array gonna produce?

186
00:10:41.213 --> 00:10:41.900
&gt;&gt; Speaker 3: String 0.

187
00:10:41.900 --> 00:10:43.453
&gt;&gt; Kyle Simpson: An empty string.

188
00:10:43.453 --> 00:10:44.907
First, we're get there right?

189
00:10:44.907 --> 00:10:47.235
You're right,
we're gonna produce an empty string.

190
00:10:47.235 --> 00:10:51.859
So now what we really have is empty
string double equal to false.

191
00:10:51.859 --> 00:10:54.492
Now we still prefer numbers, right?

192
00:10:54.492 --> 00:10:57.548
So we're gonna turn the empty
string into a number,

193
00:10:57.548 --> 00:10:59.621
which one does that become?
&gt;&gt; Speaker 3: 0.

194
00:10:59.621 --> 00:11:01.037
&gt;&gt; Kyle Simpson: 0, we're gonna turn false

195
00:11:01.037 --> 00:11:03.851
into a number which one does that become?
&gt;&gt; Speaker 3: 0.

196
00:11:03.851 --> 00:11:05.115
&gt;&gt; Kyle Simpson: So now we have these

197
00:11:05.115 --> 00:11:05.669
zeros.

198
00:11:05.669 --> 00:11:09.147
There's our root,
root of all evil again, all right?

199
00:11:09.147 --> 00:11:12.600
I told you we'd be coming
back to that over and over.

200
00:11:12.600 --> 00:11:17.052
The gateway drug here is the double
equals comparison with a Boolean.

201
00:11:17.052 --> 00:11:17.960
Just don't do it.

