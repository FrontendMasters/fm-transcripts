WEBVTT

1
00:00:00.800 --> 00:00:07.000
&gt;&gt; Kyle Simpson: Moving on to our
next topic in this unit, Prototypes.

2
00:00:07.000 --> 00:00:11.490
This one is a biggie because this
one is from where all other object

3
00:00:11.490 --> 00:00:15.070
oriented programming patterns
in JavaScript is done and

4
00:00:15.070 --> 00:00:18.880
I want to make sure we fully
understand how Prototypes work.

5
00:00:18.880 --> 00:00:23.287
So the first observation we need to make
is that objects are built by constructor

6
00:00:23.287 --> 00:00:27.101
calls, not by constructors,
cause there aren't such a thing, but

7
00:00:27.101 --> 00:00:29.432
objects are built by constructor calls.

8
00:00:29.432 --> 00:00:33.785
What was a constructor call?
&gt;&gt; Speaker 2: A function called with

9
00:00:33.785 --> 00:00:35.172
the new keyword.
&gt;&gt; Kyle Simpson: A function with the new

10
00:00:35.172 --> 00:00:36.740
keyword in front of it.

11
00:00:36.740 --> 00:00:39.610
That's essentially where
objects are gonna come from,

12
00:00:39.610 --> 00:00:43.972
okay?
&gt;&gt; Kyle Simpson: Now,

13
00:00:43.972 --> 00:00:49.049
it's often said that that constructor
call is gonna make that object based upon

14
00:00:49.049 --> 00:00:54.640
a constructor's own prototype, but
this phrase based on is problematic.

15
00:00:54.640 --> 00:00:58.380
So temporarily, just for a moment, I'm
going to take off my hat as a JavaScript

16
00:00:58.380 --> 00:01:03.790
developer and talk more as a computer
scientist in the context of class design,

17
00:01:03.790 --> 00:01:09.860
specifically classes that we
think about in C++ and Java.

18
00:01:09.860 --> 00:01:12.830
Referring back to my own
experiences in computer science,

19
00:01:12.830 --> 00:01:16.510
the way I was taught about things
Is the first metaphor they use to

20
00:01:16.510 --> 00:01:21.110
describe the instantiation of a class,
is the blueprint metaphor.

21
00:01:21.110 --> 00:01:24.900
The blueprint metaphor being,
there's a blueprint for a building, but

22
00:01:24.900 --> 00:01:28.750
that building doesn't exist until
the builder takes that blueprint and

23
00:01:28.750 --> 00:01:32.660
physically makes the building out of it,
right?

24
00:01:34.680 --> 00:01:39.980
In a sense, that process of taking a
blueprint and making a building out of it.

25
00:01:39.980 --> 00:01:43.610
I would argue the essence of
that is a copy operation.

26
00:01:44.830 --> 00:01:48.480
Specifically, what I mean by that is the
characteristics listed in the blueprint

27
00:01:48.480 --> 00:01:51.180
are copied to the physical building.

28
00:01:51.180 --> 00:01:55.290
It is not that there's some kind of
live link relationship between the two.

29
00:01:55.290 --> 00:01:59.230
That relationship exists,
only in the instant in which

30
00:01:59.230 --> 00:02:03.120
we copy the characteristic from
blue print to physical building.

31
00:02:03.120 --> 00:02:05.100
And then it ceases to
have that relationship.

32
00:02:06.200 --> 00:02:07.820
If I go to the blueprint, and

33
00:02:07.820 --> 00:02:12.820
I erase a wall It doesn't take the wall
out of the real building does it?

34
00:02:14.070 --> 00:02:15.210
They're not linked.

35
00:02:15.210 --> 00:02:16.530
If I go to the building and

36
00:02:16.530 --> 00:02:20.990
I knock out a window, it doesn't erase
the window from the blueprint does it?

37
00:02:22.370 --> 00:02:24.340
Because they're not live linked.

38
00:02:24.340 --> 00:02:25.680
There was a copy.

39
00:02:25.680 --> 00:02:29.180
There is a separation
in their relationship.

40
00:02:29.180 --> 00:02:32.730
That relationship was
simply a copy relationship.

41
00:02:32.730 --> 00:02:36.720
Furthermore when we talk about
inheritance in class-oriented coding,

42
00:02:36.720 --> 00:02:39.160
the genetic metaphor is usually used.

43
00:02:39.160 --> 00:02:42.700
Genetics like when you
biologically create an offspring.

44
00:02:42.700 --> 00:02:47.670
So I have a son and when he was created,
biologically he got a copy of my DNA.

45
00:02:47.670 --> 00:02:54.230
It was clearly a copy of my DNA
not my own DNA but a copy of it.

46
00:02:54.230 --> 00:02:57.170
Now, we are two separate individuals.

47
00:02:57.170 --> 00:03:00.410
If he breaks his leg,
my leg does not get broken.

48
00:03:00.410 --> 00:03:01.500
If I lose my hair,

49
00:03:01.500 --> 00:03:05.603
hopefully he doesn't lose his hair.
&gt;&gt; Kyle Simpson: Because our

50
00:03:05.603 --> 00:03:09.450
relationship biologically
was a copy relationship.

51
00:03:09.450 --> 00:03:10.579
Every follow that?

52
00:03:10.579 --> 00:03:13.700
The same is true in class oriented coding.

53
00:03:13.700 --> 00:03:16.670
When we instantiate something from a class

54
00:03:16.670 --> 00:03:20.710
we conceptually think about
that as being a one time event.

55
00:03:20.710 --> 00:03:23.950
We don't think about there as being
a link between the instance and

56
00:03:23.950 --> 00:03:25.378
where it came from.

57
00:03:25.378 --> 00:03:32.030
If a utility If a language allowed
you to instantiate an object,

58
00:03:32.030 --> 00:03:36.980
and then modify the class definition
after you had instantiated the object,

59
00:03:36.980 --> 00:03:42.070
would you expect for
that object instance to be able to

60
00:03:42.070 --> 00:03:47.117
have the new behavior?
&gt;&gt; Kyle Simpson: If I broke my leg,

61
00:03:47.117 --> 00:03:50.140
would you expect for
my son's leg to get broken?

62
00:03:51.240 --> 00:03:54.920
There's a term for this,
it would be retroactive inheritance.

63
00:03:56.520 --> 00:03:58.450
There's an actual term for it.

64
00:03:58.450 --> 00:04:02.580
But most people don't choose to imply

65
00:04:02.580 --> 00:04:05.910
retroactive inheritance as their
design pattern for their code.

66
00:04:07.230 --> 00:04:11.920
So if you had a system that allowed
retroactive inheritance and you used it,

67
00:04:11.920 --> 00:04:16.465
there's a more likely chance that people
reading that code might get a bit

68
00:04:16.465 --> 00:04:17.214
confused.

69
00:04:17.214 --> 00:04:18.497
Wait a minute.

70
00:04:18.497 --> 00:04:22.220
This instance already exists, and
somehow you were able to magically give it

71
00:04:22.220 --> 00:04:25.560
behavior that it did not have
at the time it was created at?

72
00:04:25.560 --> 00:04:26.710
That is unusual.

73
00:04:27.800 --> 00:04:28.300
Okay.

74
00:04:29.810 --> 00:04:30.980
So back to JavaScript.

75
00:04:32.440 --> 00:04:37.720
When we say based on that
sure implies to me at least,

76
00:04:37.720 --> 00:04:41.060
reading that that phrase
implies that there was a copy.

77
00:04:41.060 --> 00:04:43.760
That we made the object as a copy

78
00:04:43.760 --> 00:04:48.262
of the constructor's prototype.
&gt;&gt; Kyle Simpson: So

79
00:04:48.262 --> 00:04:52.270
it might surprise you when I point out
that JavaScript doesn't do copying.

80
00:04:54.750 --> 00:04:58.300
If class systems imply
copying at the conceptual and

81
00:04:58.300 --> 00:05:03.730
even at the physical level, and JavaScript
doesn't do copying, maybe that's our first

82
00:05:03.730 --> 00:05:07.369
clue that JavaScript doesn't really quite
work the way we expect classes to work.

83
00:05:08.570 --> 00:05:12.687
The more appropriate statement here is
that in JavaScript a constructor, or

84
00:05:12.687 --> 00:05:17.015
a constructor call will make an object
linked to the constructor's prototype.

85
00:05:17.015 --> 00:05:19.219
Not based on, not a copy of, but

86
00:05:19.219 --> 00:05:22.748
a link to.
&gt;&gt; Kyle Simpson: So

87
00:05:22.748 --> 00:05:25.708
there's a difference here,
conceptually and

88
00:05:25.708 --> 00:05:30.666
physically between how we know C++ and
Java to have implemented classes, and

89
00:05:30.666 --> 00:05:35.180
how this system that gets called
classes in JavaScript actually works.

