WEBVTT

1
00:00:00.420 --> 00:00:01.710
&gt;&gt; Kyle Simpson: There are lots
of different ways that

2
00:00:01.710 --> 00:00:05.860
people over the years have
chosen to describe Closure.

3
00:00:05.860 --> 00:00:07.560
Lots of different definitions given for
it.

4
00:00:07.560 --> 00:00:10.560
Closure actually comes to
us from lambda calculus.

5
00:00:10.560 --> 00:00:13.450
The only thing I know about lambda
calculus is that it's called lambda

6
00:00:13.450 --> 00:00:14.470
calculus.

7
00:00:14.470 --> 00:00:15.970
I don't know anything else about it.

8
00:00:15.970 --> 00:00:18.169
I took a bunch of cs and
a bunch of math classes.

9
00:00:18.169 --> 00:00:20.950
Still don't have the foggiest
clue what lambda calculus is.

10
00:00:20.950 --> 00:00:25.057
All I know is the Wikipedia page says that
Closure comes to us from lambda calculus.

11
00:00:25.057 --> 00:00:29.611
So I'm not gonna be particularly useful at
giving you that hyper-academic definition

12
00:00:29.611 --> 00:00:30.640
for this.

13
00:00:30.640 --> 00:00:34.875
Rather I thought it would be much more
appropriate for me to give you a super

14
00:00:34.875 --> 00:00:39.270
practical, pragmatic observational
definition for Closure.

15
00:00:39.270 --> 00:00:43.320
Specifically, this does not match with
what an academic, they might say,

16
00:00:43.320 --> 00:00:47.060
but well, actually,
that stuff doesn't matter.

17
00:00:47.060 --> 00:00:50.710
What matters is how do we observe what
Closure is, as far as I'm concerned.

18
00:00:51.820 --> 00:00:54.270
So, this is an observational definition.

19
00:00:54.270 --> 00:00:57.650
And by the way if you've been struggling
to figure out on those job interviews, how

20
00:00:57.650 --> 00:01:01.980
do I answer the question what is Closure,
you might wanna use this definition.

21
00:01:01.980 --> 00:01:06.338
Closure is when a function remembers its
lexical scope even when the function is

22
00:01:06.338 --> 00:01:08.623
executed outside of that lexical scope.

23
00:01:13.663 --> 00:01:16.878
&gt;&gt; Kyle Simpson: Closure is the ability
of a function to remember and

24
00:01:16.878 --> 00:01:21.367
continue to access the variables
surrounding it in lexical scopes even

25
00:01:21.367 --> 00:01:23.118
if you take that function.

26
00:01:23.118 --> 00:01:27.039
Send it elsewhere, pass it elsewhere or
return it or something, and

27
00:01:27.039 --> 00:01:29.618
it executes in an entirely
different scope.

28
00:01:32.823 --> 00:01:37.350
&gt;&gt; Kyle Simpson: This is not a new concept
that you've never used in your code.

29
00:01:37.350 --> 00:01:40.519
It is a virtual certainty,
if you have been writing JavaScript for

30
00:01:40.519 --> 00:01:44.325
longer than about seven calendar days,
you have written Closure in your code.

31
00:01:44.325 --> 00:01:46.470
It's just a virtual certainty.

32
00:01:46.470 --> 00:01:49.100
You might just not have
known what to call it.

33
00:01:49.100 --> 00:01:51.630
So, I'm not really introducing
some brand new concept,

34
00:01:51.630 --> 00:01:56.040
this is a little bit more like Neo
in the the first Matrix movie.

35
00:01:56.040 --> 00:02:01.330
When he's shown the Matrix for the first
time, he's not seeing a brand new thing.

36
00:02:01.330 --> 00:02:04.383
He's seeing something that
was always there, and

37
00:02:04.383 --> 00:02:06.660
just couldn't recognize it before.

38
00:02:06.660 --> 00:02:10.514
And that's what we're about to do is help
you recognize where Closure already exists

39
00:02:10.514 --> 00:02:11.700
in all your own programs.

40
00:02:13.470 --> 00:02:16.090
Here's the foo bar baz kind of example.

41
00:02:16.090 --> 00:02:18.060
I have a baz function on the inside and

42
00:02:18.060 --> 00:02:21.410
that baz function references
that bar variable.

43
00:02:21.410 --> 00:02:25.477
You'll notice the variable on line
5 references the one from line 2.

44
00:02:27.727 --> 00:02:30.854
&gt;&gt; Kyle Simpson: Now, if I were to call
baz right away on line 7, we would

45
00:02:30.854 --> 00:02:36.470
describe the ability for it to access that
variables plain old normal lexical scope.

46
00:02:36.470 --> 00:02:39.610
Exactly what we've learned up
to this point in the course.

47
00:02:39.610 --> 00:02:42.070
But we do something a little
different with baz now,

48
00:02:42.070 --> 00:02:46.700
we actually pass baz like a call back
to some other utility called bam.

49
00:02:47.710 --> 00:02:52.947
And on line 12, when we execute baz,
can we all agree that baz is now being

50
00:02:52.947 --> 00:02:57.792
executed in an entirely different
scope than where it was declared?

51
00:02:59.814 --> 00:03:02.937
&gt;&gt; Kyle Simpson: And theoretically, the
scope that it was declared in should have

52
00:03:02.937 --> 00:03:05.850
gone away and been garbage
collected by this point, right?

53
00:03:06.980 --> 00:03:08.400
But it didn't.

54
00:03:08.400 --> 00:03:13.150
Baz still had access to the bar variable,
magically.

55
00:03:13.150 --> 00:03:15.500
Well actually not magically, it's Closure.

56
00:03:16.640 --> 00:03:21.314
It said that baz, the function baz,
closes over the variable bar,

57
00:03:21.314 --> 00:03:25.745
because it makes access to a variable
in an outer lexical scope.

58
00:03:27.701 --> 00:03:29.180
&gt;&gt; Kyle Simpson: It's as simple as that.

59
00:03:29.180 --> 00:03:33.270
When a function references a variable
outside of itself, and then that function

60
00:03:33.270 --> 00:03:38.190
goes to some other scope and executes and
it still has access, that's Closure.

61
00:03:39.340 --> 00:03:43.350
That's the most pragmatic,
simplified observational definition

62
00:03:43.350 --> 00:03:45.980
I've ever been able to come up with for
what Closure is.

63
00:03:47.820 --> 00:03:50.580
Of course, passing a function as
a call back like that is not the only

64
00:03:50.580 --> 00:03:51.540
way to do so.

65
00:03:51.540 --> 00:03:53.230
You can also return functions.

66
00:03:53.230 --> 00:03:55.750
That's another way of
transporting functions around.

67
00:03:55.750 --> 00:03:56.580
Here we have the same thing.

68
00:03:56.580 --> 00:04:00.928
An inner function that references bar, we
return it and on line 10 even though that

69
00:04:00.928 --> 00:04:04.002
looks a little strange to have
these two parentheses sets.

70
00:04:04.002 --> 00:04:09.070
The first parentheses set executes foo,
which gets that function back.

71
00:04:10.160 --> 00:04:11.870
And then a microsecond later,

72
00:04:11.870 --> 00:04:15.899
we have another set of parentheses
that execute the returned function.

73
00:04:17.790 --> 00:04:19.122
&gt;&gt; Kyle Simpson: So in that gap of time,

74
00:04:19.122 --> 00:04:22.712
right in between those two sets
of parentheses on line 10.

75
00:04:22.712 --> 00:04:27.481
In that gap, we would think normally,
or at least conceptually,

76
00:04:27.481 --> 00:04:32.720
that the scope of foo had gone away,
cuz foo has finished running.

77
00:04:32.720 --> 00:04:34.748
And the bar variable should
have been garbage collected.

78
00:04:36.445 --> 00:04:37.160
&gt;&gt; Kyle Simpson: But it didn't.

79
00:04:38.230 --> 00:04:38.870
Why didn't it?

80
00:04:40.250 --> 00:04:41.860
&gt;&gt; Speaker 2: Cuz we returned the scope.

81
00:04:41.860 --> 00:04:43.059
&gt;&gt; Kyle Simpson: Yeah, but why?

82
00:04:43.059 --> 00:04:43.715
&gt;&gt; Speaker 3: Closure.

83
00:04:43.715 --> 00:04:46.570
&gt;&gt; Kyle Simpson: Closure, because that
inner function was closed over that

84
00:04:46.570 --> 00:04:49.140
variable which is going to
preserve that variable and

85
00:04:49.140 --> 00:04:50.980
not allow it to be garbage collected.

86
00:04:52.670 --> 00:04:54.020
That's what Closure is.

87
00:04:54.020 --> 00:04:58.360
The ability of a function to remember and
continue to access those variables

88
00:04:58.360 --> 00:05:00.710
even when it gets transported and
executed elsewhere.

89
00:05:02.160 --> 00:05:04.550
Let's look at some more familiar examples.

90
00:05:04.550 --> 00:05:08.110
How many of you have ever
used a setTimeout before or

91
00:05:08.110 --> 00:05:09.910
some sort of timer function?

92
00:05:09.910 --> 00:05:13.150
Good chance your function
that was your timer hook

93
00:05:13.150 --> 00:05:15.330
probably referenced
variables outside of itself.

94
00:05:16.500 --> 00:05:20.655
Did you ever stop to think how does that
function continue to access that variable

95
00:05:20.655 --> 00:05:25.115
even when it runs a lot longer in
the future after this scope should have

96
00:05:25.115 --> 00:05:25.975
gone away?

97
00:05:25.975 --> 00:05:28.800
And it's being run by the JavaScript
engine which is of an entirely

98
00:05:28.800 --> 00:05:29.615
different scope.

99
00:05:30.645 --> 00:05:31.230
How does that happen?

100
00:05:33.498 --> 00:05:33.998
&gt;&gt; Students: Closure.

101
00:05:35.860 --> 00:05:41.560
&gt;&gt; Kyle Simpson: Okay, that function
closes over the variable bar.

102
00:05:41.560 --> 00:05:44.728
Anybody ever done a click handler before?

103
00:05:44.728 --> 00:05:47.250
It closes over the variable bar,
same reasoning.

104
00:05:48.550 --> 00:05:50.640
You've already been using
Closure in all of your programs.

105
00:05:52.070 --> 00:05:54.045
All I'm doing is helping you
give a definition to it.

106
00:05:54.045 --> 00:05:58.041
Now it is important,
not just from an academic sake.

107
00:05:58.041 --> 00:06:01.291
It is important to be able to
distinguish what is Closure and

108
00:06:01.291 --> 00:06:04.610
what is not because sometimes
Closure will work against us.

109
00:06:04.610 --> 00:06:07.830
Sometimes Closure will do different
things than what we expect.

110
00:06:07.830 --> 00:06:10.927
So just like with everything else,
it's important to really know it and

111
00:06:10.927 --> 00:06:13.890
not just sort of accidentally it,
which what we all have been doing.

112
00:06:13.890 --> 00:06:17.283
We have just been accidentally
taking advantage of Closure and

113
00:06:17.283 --> 00:06:21.262
now I want you to precisely know what
it is and why you use a particular way.

114
00:06:25.688 --> 00:06:28.420
&gt;&gt; Kyle Simpson: Here's two different
functions closed over the same variable.

115
00:06:29.450 --> 00:06:31.510
It's not like there's a snapshot,

116
00:06:31.510 --> 00:06:34.100
they're literally closed over
the exact same variable.

117
00:06:34.100 --> 00:06:37.310
When one of them updates it, the other
one is updating the exact same thing.

118
00:06:41.830 --> 00:06:45.240
&gt;&gt; Kyle Simpson: Closure is as
many scopes deep as you make it.

119
00:06:45.240 --> 00:06:47.020
We've got Closure over different scopes,

120
00:06:47.020 --> 00:06:50.870
variables closed over in different scopes,
doesn't matter.

121
00:06:50.870 --> 00:06:53.270
Closure preserves the access
to those variables for

122
00:06:53.270 --> 00:06:55.900
as long as those functions exist.

123
00:06:55.900 --> 00:06:57.092
If you have one scope and

124
00:06:57.092 --> 00:07:00.733
there's a thousand different Closures
of the variables of that scope.

125
00:07:00.733 --> 00:07:04.483
And 999 of those functions go away,
they get garbage collected.

126
00:07:04.483 --> 00:07:08.172
But there's one function hanging out
somewhere in an event handler that had

127
00:07:08.172 --> 00:07:09.620
Closure of those variables.

128
00:07:09.620 --> 00:07:12.460
Those variables are not
gonna get garbage collected.

129
00:07:12.460 --> 00:07:17.050
As soon as that last function goes away,
that last Closure goes away, and

130
00:07:17.050 --> 00:07:18.790
now that scope can get garbage collected.

131
00:07:20.860 --> 00:07:25.910
If you pay close attention, that means you
can accidentally prevent stuff from being

132
00:07:25.910 --> 00:07:28.520
garbage collected,
if you create a Closure over it.

133
00:07:30.480 --> 00:07:34.480
So a few minutes ago, when I said,
I try to avoid unintended Closure wherever

134
00:07:34.480 --> 00:07:38.140
possible by making my functions
at the outer most level.

135
00:07:38.140 --> 00:07:38.800
The reason is,

136
00:07:38.800 --> 00:07:44.050
if I make a function 15 levels deep inside
of it, how many scopes is it closed over?

137
00:07:45.850 --> 00:07:49.220
Potentially over all 14
of its parent scopes.

138
00:07:49.220 --> 00:07:53.180
But if I don't need it all the way deep
and I put it all the way at the outside.

139
00:07:53.180 --> 00:07:57.301
It's not gonna close over any of those
internal ones, so I have less of a chance

140
00:07:57.301 --> 00:08:00.950
of it accidentally closing over
stuff I don't want it to close over.

141
00:08:00.950 --> 00:08:01.640
&gt;&gt; Speaker 5: It's interesting,

142
00:08:01.640 --> 00:08:05.860
so the inner scope can look up the outer
scope but not the other way around.

143
00:08:05.860 --> 00:08:07.249
&gt;&gt; Kyle Simpson: Yep,
that's lexical scope,

144
00:08:07.249 --> 00:08:10.412
that's got nothing to do with Closure,
that's just lexical scope.

145
00:08:10.412 --> 00:08:15.226
When we have a reference in level
14 to a variable from a level 11,

146
00:08:15.226 --> 00:08:16.560
it can go that way.

147
00:08:16.560 --> 00:08:19.420
But if you have a reference here, and
you're trying to reference a variable that

148
00:08:19.420 --> 00:08:22.630
isn't declared until an inner scope,
here it's just gonna be a reference error.

149
00:08:22.630 --> 00:08:24.070
There is no such thing as that variable.

