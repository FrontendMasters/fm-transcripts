WEBVTT

1
00:00:00.400 --> 00:00:02.519
&gt;&gt; Kyle: All right,
let's move on to part 2 and

2
00:00:02.519 --> 00:00:05.850
part 2 is the more sophisticated
of all three parts.

3
00:00:05.850 --> 00:00:08.629
So we're gonna spend more time
on this one, and it's okay for

4
00:00:08.629 --> 00:00:10.726
you to take some time to
try to figure this out.

5
00:00:10.726 --> 00:00:12.960
Let me orient you to
what part 2 is saying.

6
00:00:14.040 --> 00:00:16.910
It was a good start for
us to make an app module, but

7
00:00:16.910 --> 00:00:20.720
that is not really fully embracing
what it means to modularize our code.

8
00:00:22.510 --> 00:00:23.860
To really improve this code,

9
00:00:23.860 --> 00:00:27.160
we really need to separate out
the concerns into their different pieces.

10
00:00:27.160 --> 00:00:31.710
So we could make the observation that
there are at least three different

11
00:00:31.710 --> 00:00:34.640
kinds of things happening
in this application,

12
00:00:34.640 --> 00:00:39.860
three different categories of functions,
if you will, or functionality.

13
00:00:39.860 --> 00:00:43.940
One category is a set
of stateless helpers.

14
00:00:43.940 --> 00:00:48.785
For example, validateWorkEntry,
formatWorkDescription, and formatTime,

15
00:00:48.785 --> 00:00:51.110
they don't rely upon any state at all.

16
00:00:51.110 --> 00:00:53.660
You pass in some data and
you get some data back out.

17
00:00:53.660 --> 00:00:56.230
They are stateless helpers.

18
00:00:56.230 --> 00:00:57.951
They don't need any states, so

19
00:00:57.951 --> 00:01:01.275
they don't need to be collected
into any particular module.

20
00:01:01.275 --> 00:01:05.855
So why don't we make a helper's
namespace object for those to live on?

21
00:01:05.855 --> 00:01:10.625
And by the way, there are some constants
that we have been including in our module

22
00:01:10.625 --> 00:01:13.644
definition which actually
are stateless as well,

23
00:01:13.644 --> 00:01:16.520
they are part of what the helpers do.

24
00:01:16.520 --> 00:01:19.590
So those constants could be moved
to that namespace object as well.

25
00:01:22.888 --> 00:01:23.630
&gt;&gt; Kyle: That's the first part.

26
00:01:23.630 --> 00:01:28.340
The second part of part 2,
call it 2.b if you will,

27
00:01:29.620 --> 00:01:32.980
is that we wanna separate
out the UI related,

28
00:01:32.980 --> 00:01:36.830
the DOM related code from
the data model related code.

29
00:01:36.830 --> 00:01:38.450
Right now, they're all conflated together.

30
00:01:38.450 --> 00:01:40.034
When you look at a function,
it's doing both.

31
00:01:40.034 --> 00:01:44.872
We wanna create as clean a separation
semantically between those as possible,

32
00:01:44.872 --> 00:01:48.460
that's the most true
definition of abstraction.

33
00:01:48.460 --> 00:01:53.380
Abstraction does not mean hide things,
abstraction means separate things, so

34
00:01:53.380 --> 00:01:55.080
that they're independently reasonable.

35
00:01:56.770 --> 00:01:59.780
So we wanna separate out the UI DOM
related code from the data

36
00:01:59.780 --> 00:02:01.190
model related code.

37
00:02:01.190 --> 00:02:03.530
I've made suggestions on how to do that.

38
00:02:03.530 --> 00:02:09.820
First, we wanna make a function called
setup ui, which makes us a ui instance,

39
00:02:09.820 --> 00:02:13.970
a ui module instance that has
the following methods on it,

40
00:02:13.970 --> 00:02:17.640
in it, add project to list,
add project selection etc, and

41
00:02:17.640 --> 00:02:22.449
then at the one we had before should only
keep the stuff that's data model related.

42
00:02:24.440 --> 00:02:27.290
Now we'll have two separate modules,

43
00:02:27.290 --> 00:02:32.570
two separate behaviors, and
they can call each other mutually.

44
00:02:32.570 --> 00:02:38.650
App can call the UI, UI can call the App,
but we keep them in separate modules.

45
00:02:41.050 --> 00:02:47.250
So your app module is gonna store stuff
like the state of the list of projects and

46
00:02:47.250 --> 00:02:50.250
within each of those projects,
are the list of each of the work entries,

47
00:02:50.250 --> 00:02:52.170
that's the data model oriented state.

48
00:02:52.170 --> 00:02:54.350
That's what the app module does.

49
00:02:54.350 --> 00:02:55.960
The UI module on the other hand,

50
00:02:55.960 --> 00:03:00.120
needs to keep track of all the DOM
elements that it's creating.

51
00:03:00.120 --> 00:03:03.520
So you don't want to store the DOM
elements in the data model, and

52
00:03:03.520 --> 00:03:05.640
you don't want to store the data
model in the DOM elements.

53
00:03:07.170 --> 00:03:10.757
So I make a suggestion
here that in the UI,

54
00:03:10.757 --> 00:03:15.779
you wanna track all those DOM
elements in a separate list,

55
00:03:15.779 --> 00:03:20.819
keyed by the ID of the data
model entry that they come from.

56
00:03:20.819 --> 00:03:25.326
So the project id, the id that you would
look up the DOM element in the project

57
00:03:25.326 --> 00:03:29.260
tracking object, same thing for
the work elements.

58
00:03:29.260 --> 00:03:32.709
That's how you keep the data model and
the UI model separate,

59
00:03:32.709 --> 00:03:34.641
a simple way of doing that, okay?

60
00:03:34.641 --> 00:03:37.631
So take some time to make
sure you read through part 2,

61
00:03:37.631 --> 00:03:42.480
because there's plenty of details here and
start working on that part of the project.

62
00:03:42.480 --> 00:03:47.030
We are gonna give you extra time,
so 15, maybe up to 20, we'll see.

63
00:03:47.030 --> 00:03:50.219
Give you some time to work on that
because this will take a bit more work.

64
00:03:50.219 --> 00:03:53.450
You're gonna have to go in to a function,
and move some pieces out.

65
00:03:53.450 --> 00:03:56.450
You really shouldn't have
to rewrite new logic, but

66
00:03:56.450 --> 00:04:01.920
there will be functions where in the same
function, there's data model and UI stuff,

67
00:04:01.920 --> 00:04:05.250
and you're gonna have to separate those
out and figure out how that works.

68
00:04:05.250 --> 00:04:06.710
So this is where the nitty gritty,

69
00:04:06.710 --> 00:04:09.220
this is where the rubber
meets the road if you will.

70
00:04:09.220 --> 00:04:10.530
If you wanna be able to do modules,

71
00:04:10.530 --> 00:04:12.574
you have to know how to do this
kind of refactoring, okay?

