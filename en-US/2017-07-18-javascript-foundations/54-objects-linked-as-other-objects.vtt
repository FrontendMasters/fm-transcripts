WEBVTT

1
00:00:00.530 --> 00:00:01.830
&gt;&gt; Kyle: Let's simplify.

2
00:00:01.830 --> 00:00:05.640
Let's try to find that beautiful
program inside of that ugly program.

3
00:00:05.640 --> 00:00:09.670
Let's try to find what OLOO, Objects
Linked to Other Objects looks like.

4
00:00:11.456 --> 00:00:14.538
&gt;&gt; Kyle: Here's that old and busted code,

5
00:00:14.538 --> 00:00:15.180
okay?

6
00:00:16.200 --> 00:00:20.370
Remember the prototypes and
all of the ugly, unnecessary complexity.

7
00:00:20.370 --> 00:00:25.070
And you recall that I pointed out that the
beautiful part of this program is the b1

8
00:00:25.070 --> 00:00:29.400
object links to the Bar.prototype
object linked to the Foo.prototype.

9
00:00:29.400 --> 00:00:35.430
Unfortunately, to get that object in
linkage we had to do all this other stuff.

10
00:00:35.430 --> 00:00:40.409
What if i could show you how to make those
objects without all that other complexity?

11
00:00:41.490 --> 00:00:43.280
What if we could just
link objects together?

12
00:00:44.980 --> 00:00:49.603
So what I'm gonna do is walk you quickly
through a derivation of OLOO's style,

13
00:00:49.603 --> 00:00:50.460
step by step.

14
00:00:50.460 --> 00:00:53.062
You don't have to do all
these steps yourself,

15
00:00:53.062 --> 00:00:55.663
it just shows you how to refactor,
if you will,

16
00:00:55.663 --> 00:00:59.334
to embrace OLOO's style.
&gt;&gt; Kyle: So

17
00:00:59.334 --> 00:01:04.170
what I'm going to do is little by little
remove the unnecessary complexity and

18
00:01:04.170 --> 00:01:09.035
replace it with a simplicity.
&gt;&gt; Kyle: In other words,

19
00:01:09.035 --> 00:01:14.364
I'm gonna perform a Vegas style magic
trick right before your very eyes.

20
00:01:14.364 --> 00:01:17.798
But unlike a Vegas magician who
wants to distract you over here so

21
00:01:17.798 --> 00:01:22.430
you don't see how the trick is done,
I wanna show you exactly what to look at.

22
00:01:22.430 --> 00:01:25.076
I want you to keep your eye
on those three objects.

23
00:01:25.076 --> 00:01:27.810
Because the changes that I'm
about to make to this code

24
00:01:27.810 --> 00:01:32.480
are gonna have absolutely zero
functional impact on the code.

25
00:01:32.480 --> 00:01:37.600
It will have exactly the same behavior,
it'll just have a cleaner,

26
00:01:37.600 --> 00:01:39.200
simpler style of getting there.

27
00:01:40.410 --> 00:01:42.820
Keep your eye on those objects and
don't get lost.

28
00:01:42.820 --> 00:01:47.706
The first step of my magic trick is
that new keyword down there on line 17.

29
00:01:47.706 --> 00:01:51.990
I got to get rid of that new function
call, cuz the new keyword is the gateway

30
00:01:51.990 --> 00:01:54.850
to doing poorly designed
class oriented coding.

31
00:01:56.650 --> 00:01:59.577
If I could remove the new keyword
from JavaScript, I would.

32
00:01:59.577 --> 00:02:01.172
I don't think there's any need for

33
00:02:01.172 --> 00:02:03.692
it whatsoever.
&gt;&gt; Kyle: So

34
00:02:03.692 --> 00:02:05.480
let's get rid of the new keyword.

35
00:02:05.480 --> 00:02:08.520
You remember how I told you before
that the new keyword does four things.

36
00:02:08.520 --> 00:02:13.130
It creates, it links,
it passes in, and it returns.

37
00:02:13.130 --> 00:02:18.066
If you divide those into two separate
things, you'll notice that the first two

38
00:02:18.066 --> 00:02:23.013
are kind of about creation and the second
two are kind of about initialization.

39
00:02:23.013 --> 00:02:28.150
The new system does two different things,
creation and initialization.

40
00:02:29.500 --> 00:02:31.180
I wanna separate those.

41
00:02:31.180 --> 00:02:32.740
That's how we're gonna get
rid of the new keyword.

42
00:02:33.750 --> 00:02:38.490
So what I'm gonna do is replace
the new keyword with an Object.create

43
00:02:38.490 --> 00:02:40.380
call that does the first two things.

44
00:02:40.380 --> 00:02:44.320
It creates and links, and then, line 18,

45
00:02:44.320 --> 00:02:48.840
I'm gonna call the bar functions so
that we do the initialization.

46
00:02:51.110 --> 00:02:55.670
Now, that code does look a little bit,
well,

47
00:02:55.670 --> 00:02:59.360
more verbose for sure than the previous
version of the new keyword.

48
00:03:00.490 --> 00:03:02.950
Just hold on because we're gonna
make that code better too.

49
00:03:03.950 --> 00:03:06.950
But I would argue that even
though it looks more verbose now,

50
00:03:06.950 --> 00:03:09.320
it's actually simpler.

51
00:03:09.320 --> 00:03:12.290
Simpler by definition that
it's not conflated together.

52
00:03:13.330 --> 00:03:15.060
We have two separate steps.

53
00:03:15.060 --> 00:03:18.300
Have you ever needed to create
an object but not initialize it?

54
00:03:18.300 --> 00:03:20.980
Maybe you've created like objects
in an object pool before.

55
00:03:22.220 --> 00:03:23.379
I've done that on many occasions.

56
00:03:24.450 --> 00:03:28.080
When you use the new keyword you don't
have that option, so what do you do?

57
00:03:28.080 --> 00:03:31.900
You make an empty constructor so
that it creates but

58
00:03:31.900 --> 00:03:33.650
it doesn't do any initialization.

59
00:03:35.060 --> 00:03:38.410
Why don't we just give ourselves
the utility that allows us to just create

60
00:03:38.410 --> 00:03:41.880
without initialization,
that's what Object.create does.

61
00:03:41.880 --> 00:03:46.260
So I would argue that even though this
is more verbose, it's actually simpler.

62
00:03:46.260 --> 00:03:48.243
But we're gonna work on
the verbosity as well.

63
00:03:50.700 --> 00:03:53.339
&gt;&gt; Kyle: We still have a b1 object linked

64
00:03:53.339 --> 00:03:57.461
to a Bar.prototype linked
to a Foo.prototype.

65
00:03:57.461 --> 00:04:02.328
Same behavior.
&gt;&gt; Kyle: The next step of my magic

66
00:04:02.328 --> 00:04:07.340
trick is to take all the references
to Bar.prototype and get rid of them.

67
00:04:07.340 --> 00:04:10.730
And in fact,
get rid of the bar function entirely.

68
00:04:10.730 --> 00:04:13.285
Because we don't really
need a bar function.

69
00:04:13.285 --> 00:04:19.126
The function is really not even necessary.
&gt;&gt; Kyle: So

70
00:04:19.126 --> 00:04:23.724
I'm just gonna make a bar object instead
of a bar function with a bar prototype

71
00:04:23.724 --> 00:04:28.174
object.
&gt;&gt; Kyle: Line 8 creates a bar object using

72
00:04:28.174 --> 00:04:34.060
Object.create and make sure that it's
prototype link where it needs to be.

73
00:04:34.060 --> 00:04:37.632
And you'll notice that I just start
adding methods directly to bar,

74
00:04:37.632 --> 00:04:40.690
Bar.init, bar.speak.

75
00:04:40.690 --> 00:04:44.540
Why do I need a bar.protoype when
I can just do a bar object itself?

76
00:04:45.940 --> 00:04:50.001
Because the bar function with a prototype
object was just an indirection of

77
00:04:50.001 --> 00:04:54.729
complexity.
&gt;&gt; Kyle: Now look at how much

78
00:04:54.729 --> 00:04:56.949
simpler line 16 and line 17 look.

79
00:04:58.230 --> 00:05:02.313
To make a b1, I just make a b1
that Object.creates from bar.

80
00:05:02.313 --> 00:05:04.910
There's no Bar.prototype there.

81
00:05:04.910 --> 00:05:07.984
And to call this init function,
I just say b1.init, and

82
00:05:07.984 --> 00:05:12.603
I let this binding rules do what they do.
&gt;&gt; Kyle: And

83
00:05:12.603 --> 00:05:16.963
I still have a b1 linked
to a Bar linked to

84
00:05:16.963 --> 00:05:23.435
a Foo.prototype.
&gt;&gt; Kyle: One

85
00:05:23.435 --> 00:05:25.310
last step to this magic trick.

86
00:05:26.580 --> 00:05:29.765
I need to do the exact same thing
to Foo.prototype that I just did to

87
00:05:29.765 --> 00:05:31.460
Bar.prototype.

88
00:05:31.460 --> 00:05:33.470
We don't need a foo function and

89
00:05:33.470 --> 00:05:36.810
we definitely don't need
foo.prototypes cluttering up the code.

90
00:05:36.810 --> 00:05:42.671
We just need a foo object.
&gt;&gt; Kyle: So

91
00:05:42.671 --> 00:05:47.170
now I have a foo object with
methods directly on it.

92
00:05:47.170 --> 00:05:51.890
That init function that I temporarily
had on bar has now been moved up to foo

93
00:05:51.890 --> 00:05:53.050
because you know what?

94
00:05:53.050 --> 00:05:55.770
That's the place where
the initialization was happening anyway.

95
00:05:57.160 --> 00:06:01.890
That whole indirection of constructors
thing was just unnecessary complexity.

96
00:06:03.650 --> 00:06:09.090
So now I have an init, I'm linking
to foo I have an init there and

97
00:06:09.090 --> 00:06:12.799
when I, down on line 17 call b1.init.

98
00:06:12.799 --> 00:06:18.126
It delegates two levels up the chain to
that init function calls it in the context

99
00:06:18.126 --> 00:06:22.896
of b1 and adds the me property to it.
&gt;&gt; Kyle: And

100
00:06:22.896 --> 00:06:27.216
at the end of the day,
I still have a b1 linked to a Bar linked

101
00:06:27.216 --> 00:06:31.829
a Foo.
&gt;&gt; Kyle: Now I don't know about you,

102
00:06:31.829 --> 00:06:35.169
but I look at that code,
that expression of the program, and

103
00:06:35.169 --> 00:06:37.809
I feel like there's a lot
fewer moving pieces.

104
00:06:39.360 --> 00:06:44.370
There's a lot less mental overhead to
juggle syntactically, and conceptually.

105
00:06:46.720 --> 00:06:48.570
That's what I call OLOO style code.

106
00:06:49.780 --> 00:06:55.750
OLOO embraces real true object
oriented programming without classes.

107
00:06:55.750 --> 00:07:00.291
It embraces that the power of JavaScript
is to be able to create objects and

108
00:07:00.291 --> 00:07:03.603
link them together and
use delegation between them.

109
00:07:20.616 --> 00:07:23.091
&gt;&gt; Kyle: So this is the OLOO style of

110
00:07:23.091 --> 00:07:27.035
code, wired up with the b1 and b2 in it.

111
00:07:27.035 --> 00:07:29.267
So now we've got both
of those objects being

112
00:07:29.267 --> 00:07:34.974
created.
&gt;&gt; Kyle: And

113
00:07:34.974 --> 00:07:37.240
here's our Object.create function.

114
00:07:37.240 --> 00:07:40.440
This is the polyfill for Object.create.

115
00:07:40.440 --> 00:07:41.430
Look at what I'm doing here.

116
00:07:41.430 --> 00:07:46.360
I'm making an object and I'm linking its
dunder proto to the o that I asked for.

117
00:07:47.944 --> 00:07:50.760
So it's actually not a very
complex concept at all.

118
00:07:50.760 --> 00:07:52.240
I just make an object and link it.

119
00:07:53.400 --> 00:07:55.834
But this isn't really the polyfill.

120
00:07:55.834 --> 00:08:01.360
You know what the real polyfill is?
&gt;&gt; Kyle: That's the real polyfill.

121
00:08:02.490 --> 00:08:05.550
And you'll notice something
interesting about what it's doing.

122
00:08:05.550 --> 00:08:09.240
It makes a function that
nobody cares about,

123
00:08:09.240 --> 00:08:12.340
it sets it's prototype and
it calls new against it.

124
00:08:15.030 --> 00:08:16.810
Same equivalent outcome behavior.

125
00:08:18.780 --> 00:08:20.880
What I love about this visualization, and

126
00:08:20.880 --> 00:08:25.800
it may be lost on you, because I see some
tired faces at this point in the workshop.

127
00:08:25.800 --> 00:08:28.940
But this is actually my favorite
slide in the entire workshop.

128
00:08:31.080 --> 00:08:34.980
What I love about this slide
is that it points out just

129
00:08:34.980 --> 00:08:40.950
how pointless those functions and dot
prototypes and new keywords actually were.

130
00:08:40.950 --> 00:08:44.590
I took all of that complexity
out of the program and

131
00:08:44.590 --> 00:08:49.336
hid it inside of Object.create.
&gt;&gt; Kyle: It really

132
00:08:49.336 --> 00:08:54.366
hammers home the point that all we care
about is linking objects together.

133
00:08:58.691 --> 00:09:01.337
&gt;&gt; Kyle: And it's not just simpler style,

134
00:09:01.337 --> 00:09:05.817
I would also argue,
it's simpler mental models as well.

135
00:09:05.817 --> 00:09:08.877
Here's the old and busted code,

136
00:09:08.877 --> 00:09:13.468
the prototype style code,
and here's the old and

137
00:09:13.468 --> 00:09:19.840
busted mental model.
&gt;&gt; Kyle: We

138
00:09:19.840 --> 00:09:23.540
could ask the question,
was ES6 class any better?

139
00:09:23.540 --> 00:09:26.270
Maybe, it certainly was
syntactically a bit nicer.

140
00:09:26.270 --> 00:09:29.060
Still had a bunch of conceptual
problems under the covers.

141
00:09:29.060 --> 00:09:31.010
The mental model is not
significantly better.

142
00:09:32.850 --> 00:09:34.910
I claim OLOO as the new hotness.

143
00:09:36.140 --> 00:09:41.550
This foo and
bar object in the b1 that links to it, but

144
00:09:41.550 --> 00:09:45.340
here's the real big pay off,
the simplified mental model.

145
00:09:46.850 --> 00:09:50.446
Cuz it really just embraces that
the only thing we need to know about is

146
00:09:50.446 --> 00:09:52.440
the objects linked to other objects.

147
00:09:53.620 --> 00:09:55.781
That's the only thing that
ever mattered anyway.

