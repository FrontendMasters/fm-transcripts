WEBVTT

1
00:00:00.280 --> 00:00:03.730
&gt;&gt; Kyle: All right, let's talk
about the solution for exercise 7.

2
00:00:03.730 --> 00:00:08.810
As I said in the set-up, what we wanna do
is take this project factory function and

3
00:00:08.810 --> 00:00:14.180
turn it into a project constructor class,
whatever you wanna call it in JavaScript.

4
00:00:14.180 --> 00:00:17.620
So let's look at how we might do that.

5
00:00:17.620 --> 00:00:20.880
We're gonna start by still adding
a Project function now, but

6
00:00:20.880 --> 00:00:23.080
you'll notice that I need to
prepend everything with this.

7
00:00:23.080 --> 00:00:26.700
Because I'm gonna be setting these
properties directly on the instance

8
00:00:26.700 --> 00:00:29.760
of this Project class, if you will.

9
00:00:29.760 --> 00:00:32.970
So I'm gonna be setting projectId,
description, work, and time.

10
00:00:32.970 --> 00:00:35.620
All those public
properties on an instance.

11
00:00:35.620 --> 00:00:38.940
And I don't need to include
any functions in some closure,

12
00:00:38.940 --> 00:00:40.900
I'm gonna add them
directly to the prototype.

13
00:00:40.900 --> 00:00:47.719
So here, I have Project.prototype.getId,
Project prototype.getDescription,

14
00:00:47.719 --> 00:00:53.730
getTime, addWork, getWorkEntryCount,
and getWorkEntryLocation.

15
00:00:53.730 --> 00:00:56.770
So all the functions we had before,
but now they're on the prototype.

16
00:00:56.770 --> 00:01:01.226
And any place where I was
referencing a variable lexically,

17
00:01:01.226 --> 00:01:06.614
I now have a this dot in front of it.
&gt;&gt; Kyle: And

18
00:01:06.614 --> 00:01:11.259
having a this dot in front of it
allows me to access that context for

19
00:01:11.259 --> 00:01:17.578
each individual instance.
&gt;&gt; Kyle: To

20
00:01:17.578 --> 00:01:22.830
use this new project class,
&gt;&gt; Kyle: We call new

21
00:01:22.830 --> 00:01:27.910
in front of the capital P project
function like we do on line 208.

22
00:01:27.910 --> 00:01:31.630
Otherwise, from the outside world that is,

23
00:01:31.630 --> 00:01:34.970
the rest of the code inside of app and
inside of UI.

24
00:01:34.970 --> 00:01:38.830
From their perspective, the project
object, it doesn't matter how we got it.

25
00:01:40.300 --> 00:01:41.900
Because they still call methods on it and

26
00:01:41.900 --> 00:01:44.460
they still refer to it.
&gt;&gt; Speaker 2: This

27
00:01:44.460 --> 00:01:46.900
might not be a quick answer.
&gt;&gt; Kyle: When

28
00:01:46.900 --> 00:01:50.510
is customizing something
like this a good idea?

29
00:01:50.510 --> 00:01:55.592
A good,
because you could do all this without

30
00:01:55.592 --> 00:02:00.885
going down this route.
&gt;&gt; Speaker 3: What do you mean I

31
00:02:00.885 --> 00:02:02.959
could do it without going down this route?
&gt;&gt; Kyle: How would you do it

32
00:02:02.959 --> 00:02:04.628
without going down this route?
&gt;&gt; Speaker 3: The same way we've done it

33
00:02:04.628 --> 00:02:06.810
before in the sense of just-
&gt;&gt; Kyle: With the module pattern?

34
00:02:06.810 --> 00:02:08.784
&gt;&gt; Speaker 3: The module, or even just

35
00:02:08.784 --> 00:02:14.288
creating some kind of, I don't know.
&gt;&gt; Speaker 3: Just getting

36
00:02:14.288 --> 00:02:17.550
those methods somewhere, bringing them in.
&gt;&gt; Kyle: Okay, so you're asking,

37
00:02:17.550 --> 00:02:20.970
what's the benefit of doing the prototype
style over the module style?

38
00:02:20.970 --> 00:02:22.230
&gt;&gt; Speaker 3: Or yeah, or-

39
00:02:22.230 --> 00:02:23.230
&gt;&gt; Kyle: We already talked about why

40
00:02:23.230 --> 00:02:25.960
modules over just the project entry data.

41
00:02:25.960 --> 00:02:30.022
That was exercise 5c when
we switched to having

42
00:02:30.022 --> 00:02:37.460
the project as its own entity.

43
00:02:37.460 --> 00:02:39.520
That gave us a set of APIs to refer to,

44
00:02:39.520 --> 00:02:43.030
which cleaned up a lot of that code
logic that was all mixed together.

45
00:02:43.030 --> 00:02:45.500
So that part, I think,
we've already probably addressed.

46
00:02:45.500 --> 00:02:52.390
But the more important question to the
current moment is why would we do this?

47
00:02:52.390 --> 00:02:54.810
If we already had
a working module package,

48
00:02:54.810 --> 00:02:57.300
why would we go with the prototype style?

49
00:02:57.300 --> 00:02:58.776
To be quite honest with you and

50
00:02:58.776 --> 00:03:01.960
to be quite blunt,
I don't have any answer to that question.

51
00:03:03.030 --> 00:03:07.080
That's kind of my point,
is that we have been attempting to do

52
00:03:07.080 --> 00:03:11.350
this prototype oriented code for 20 years,
and I don't think it buys us anything.

53
00:03:11.350 --> 00:03:13.885
I just think it creates unnecessary added

54
00:03:13.885 --> 00:03:19.334
complexity.
&gt;&gt; Speaker 3: Okay,

55
00:03:19.334 --> 00:03:23.210
that had been my opinion just
cuz I'd ran into it once.

56
00:03:24.460 --> 00:03:26.490
Took me a long time to figure it out.
&gt;&gt; Kyle: But

57
00:03:26.490 --> 00:03:30.880
some people in the face of complexity
say I need more complexity,

58
00:03:30.880 --> 00:03:33.580
to deal with the complexity
that I already have.

59
00:03:33.580 --> 00:03:37.100
Some people like myself when you see
complexity I try to take a step back and

60
00:03:37.100 --> 00:03:39.740
say how do I do this more simply.

61
00:03:39.740 --> 00:03:43.664
When people are faced with these kinds of
complexities, what many people have done

62
00:03:43.664 --> 00:03:47.364
is they go invent whole frameworks around
these things to do all these stuff for

63
00:03:47.364 --> 00:03:52.048
them.
&gt;&gt; Kyle: I think it

64
00:03:52.048 --> 00:03:56.667
comes from the mindset of classes
work really well in my C++ code.

65
00:03:56.667 --> 00:03:59.561
I wanna do the exact same
class design in JavaScript,

66
00:03:59.561 --> 00:04:03.710
I'm really frustrated the JavaScript
doesn't do classes the same way.

67
00:04:03.710 --> 00:04:07.680
Let me invent some other thing to
put on top of it, to duct tape it so

68
00:04:07.680 --> 00:04:12.970
that it looks right.
&gt;&gt; Kyle: Yes?

69
00:04:12.970 --> 00:04:15.000
&gt;&gt; Speaker 4: So with this approach,

70
00:04:15.000 --> 00:04:18.460
there is no way to preserve encapsulation,

71
00:04:18.460 --> 00:04:19.190
right?
&gt;&gt; Kyle: Yes,

72
00:04:19.190 --> 00:04:21.480
that's definitely a trade off here.

73
00:04:21.480 --> 00:04:22.450
I was gonna get to that.

74
00:04:23.450 --> 00:04:26.480
There is no encapsulation at this point,
is there?

75
00:04:26.480 --> 00:04:29.380
Everything's a public property
on the object instance.

76
00:04:30.820 --> 00:04:33.790
Now some people like the fact
that it's all publicly available.

77
00:04:33.790 --> 00:04:37.610
Cuz now things are easier to test and
maybe it's a little bit more flexible.

78
00:04:37.610 --> 00:04:40.260
But now we've lost the ability
to encapsulation, so

79
00:04:40.260 --> 00:04:43.270
that is definitely a trade
off with this style of code.

80
00:04:43.270 --> 00:04:46.955
If you put stuff disoriented, and
you put it on a public object prototype,

81
00:04:46.955 --> 00:04:49.353
it's all hanging out there for
anybody to see and

82
00:04:49.353 --> 00:04:54.311
mess with.
&gt;&gt; Kyle: So that's kind of why

83
00:04:54.311 --> 00:04:57.020
I still like modules a lot.
&gt;&gt; Speaker 5: But

84
00:04:57.020 --> 00:04:59.980
you can get encapsulation if you
put this inside of a module and

85
00:04:59.980 --> 00:05:04.380
you export the project function.
&gt;&gt; Kyle: So the problem with going that

86
00:05:04.380 --> 00:05:10.240
route, when you try to mix the module
pattern with the prototype style pattern.

87
00:05:10.240 --> 00:05:12.310
In theory it sounds great, and

88
00:05:12.310 --> 00:05:16.230
I promise you, I have tried it so
many times I've lost count.

89
00:05:17.850 --> 00:05:18.770
Many others have tried.

90
00:05:18.770 --> 00:05:22.222
Doug Crockford has a pattern
that he is espousing these days,

91
00:05:22.222 --> 00:05:26.805
where he claims to use closure along
with objects and other stuff like that.

92
00:05:27.805 --> 00:05:30.715
There's just a flat out fact that we're
never gonna be able to get around,

93
00:05:30.715 --> 00:05:34.465
which is that the prototype system and
the lexical system do not cross over.

94
00:05:35.515 --> 00:05:39.245
So if you go to all the trouble to create
your closure inside of your factory, or

95
00:05:39.245 --> 00:05:43.890
whatever, and you just export this project
function, that'll work for one instance.

96
00:05:43.890 --> 00:05:48.550
But now you're not gonna be able to
have multiple functions sharing across,

97
00:05:48.550 --> 00:05:51.640
I mean have a function shared
across multiple instances.

98
00:05:51.640 --> 00:05:55.520
No matter what you do,
I mean you can try it if you want, but

99
00:05:55.520 --> 00:05:57.630
you can take my word for
it, cuz I've tried.

100
00:05:57.630 --> 00:06:00.983
No matter what you do, you're gonna end
up creating Frankenstein code that just

101
00:06:00.983 --> 00:06:02.478
doesn't actually get any better.

102
00:06:02.478 --> 00:06:07.247
My best advice to you is either
do prototype style code or

103
00:06:07.247 --> 00:06:09.530
do module style code.

104
00:06:09.530 --> 00:06:12.080
Don't try to mix them in
the same piece of code.

105
00:06:13.790 --> 00:06:18.836
Cuz if you mix them it's gonna
end up like Frankenstein.

106
00:06:23.143 --> 00:06:24.355
&gt;&gt; Kyle: But the response,

107
00:06:24.355 --> 00:06:29.810
really to the original question was, the
real response is, we do that because we're

108
00:06:29.810 --> 00:06:34.994
enamored with the class pattern that seems
to get us closer to the class pattern.

