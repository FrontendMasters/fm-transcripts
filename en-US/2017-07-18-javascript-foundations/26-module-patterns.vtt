WEBVTT

1
00:00:00.132 --> 00:00:03.751
&gt;&gt; Kyle Simpson: Our final topic in
this discussion unit on scope and

2
00:00:03.751 --> 00:00:06.704
closure is to look at the module pattern.

3
00:00:06.704 --> 00:00:11.482
Specifically, we wanna take this out of
the realm of esoteric academic ideas to

4
00:00:11.482 --> 00:00:15.778
something practical that we can repeat and
use in our everyday coding.

5
00:00:15.778 --> 00:00:19.303
The module pattern is probably
the most important of all the code

6
00:00:19.303 --> 00:00:23.161
organization patterns in programming,
especially in JavaScript.

7
00:00:23.161 --> 00:00:26.257
[COUGH] So, I wanna start first by
talking about what's not a module.

8
00:00:26.257 --> 00:00:30.129
That way, we fully understand and
appreciate what is a module.

9
00:00:30.129 --> 00:00:34.140
Here, I've created a foo that points
at an object that has some stuff on it.

10
00:00:34.140 --> 00:00:37.723
In this case, an o variable and
the bar method.

11
00:00:37.723 --> 00:00:41.754
And it is true that I have
collected some variables and

12
00:00:41.754 --> 00:00:44.531
some methods into a single unit, but

13
00:00:44.531 --> 00:00:50.178
that doesn't really satisfy the spirit
of what encapsulation is about and

14
00:00:50.178 --> 00:00:55.760
encapsulation is what is necessary
to fully realize the module pattern.

15
00:00:55.760 --> 00:01:00.367
Encapsulation means, specifically
hiding of information that is not

16
00:01:00.367 --> 00:01:03.141
necessary to be seen to the outside world.

17
00:01:03.141 --> 00:01:06.962
We talked earlier in the course about
the principle of least privilege or

18
00:01:06.962 --> 00:01:08.788
the principle of least exposure.

19
00:01:08.788 --> 00:01:12.379
We talked about that with block scoping
like we hide a variable from an outer

20
00:01:12.379 --> 00:01:14.200
scope, if it's not needed.

21
00:01:14.200 --> 00:01:17.080
The same principle
applies at the API level.

22
00:01:17.080 --> 00:01:21.330
If a method or a variable isn't needed,
you don't wanna expose it to

23
00:01:21.330 --> 00:01:26.420
the outside world that is the rest
of the code if you don't need to.

24
00:01:26.420 --> 00:01:29.775
If you expose it, it means that
somebody may take advantage of and

25
00:01:29.775 --> 00:01:33.203
use that method in a way that is
different than you were expecting.

26
00:01:33.203 --> 00:01:39.731
Now, the way this typically plays out
is you have some undocumented method.

27
00:01:39.731 --> 00:01:43.295
A private method that people weren't
supposed to use and maybe you make it like

28
00:01:43.295 --> 00:01:46.762
with an underscore in the variable name
and you tell people, don't use it.

29
00:01:46.762 --> 00:01:48.293
And yet, somebody starts using it.

30
00:01:48.293 --> 00:01:51.300
Somebody starts relying upon that method.

31
00:01:51.300 --> 00:01:55.369
And later, you wanna go back and refactor
and change that method or remove it and

32
00:01:55.369 --> 00:01:56.045
you can't.

33
00:01:56.045 --> 00:01:58.175
Because now,
you're gonna break people's code.

34
00:01:58.175 --> 00:02:00.166
You're like this was undocumented.

35
00:02:00.166 --> 00:02:03.691
You're not supposed to use it and
the real response is you

36
00:02:03.691 --> 00:02:08.660
were supposed to use encapsulation
to prevent people from using it.

37
00:02:08.660 --> 00:02:11.177
That's what that design pattern is for.

38
00:02:11.177 --> 00:02:15.529
So in this case, we don't have any way
to prevent somebody from using o or bar.

39
00:02:15.529 --> 00:02:19.882
At best, we might have the obscurity
of putting an underscore in the name.

40
00:02:19.882 --> 00:02:23.546
But real encapsulation would take
advantage of functions scope to hide

41
00:02:23.546 --> 00:02:25.448
the things that aren't necessary.

42
00:02:25.448 --> 00:02:27.762
So bar needs to be exposed, great.

43
00:02:27.762 --> 00:02:30.972
But what if we don't need
to expose the o variable,

44
00:02:30.972 --> 00:02:36.068
because that's an internal detail that's
not necessary to the outside world.

45
00:02:36.068 --> 00:02:38.606
So, let's look at using function scope and

46
00:02:38.606 --> 00:02:41.771
in particular closure to
realize the module pattern.

47
00:02:41.771 --> 00:02:44.292
This is the classic module pattern,

48
00:02:44.292 --> 00:02:49.101
codified most notably by Doug Crockford
back in the early 2000s.

49
00:02:49.101 --> 00:02:51.795
You'll notice that I have
an outer enclosing function.

50
00:02:51.795 --> 00:02:54.987
In this case, it's actually an IIFE,
although it doesn't have to be.

51
00:02:54.987 --> 00:02:58.113
An outer enclosing function
that starts on line 1 and

52
00:02:58.113 --> 00:03:00.478
then executes itself down on line 11.

53
00:03:00.478 --> 00:03:03.011
Inside the function,
when I declare a variable or

54
00:03:03.011 --> 00:03:05.135
if I were to make a function declaration.

55
00:03:05.135 --> 00:03:08.620
By default, all of those
are lexically hidden scope-wise from

56
00:03:08.620 --> 00:03:10.307
the rest of the outside world.

57
00:03:10.307 --> 00:03:15.243
The only stuff that's gonna be available
for you to see from the outside

58
00:03:15.243 --> 00:03:20.342
world is whatever I put on this object
right here and that object I return,

59
00:03:20.342 --> 00:03:26.200
which gets pointed to by the foo variable
represents the publicAPI for this module.

60
00:03:26.200 --> 00:03:30.818
It is the stuff that we choose to expose
and anything we don't expose stays hidden.

61
00:03:30.818 --> 00:03:33.482
So you can't say something like foo.0,

62
00:03:33.482 --> 00:03:37.629
because 0 is lexically hidden
inside the scope of that function.

63
00:03:37.629 --> 00:03:40.152
You can, however, say, foo.bar.

64
00:03:40.152 --> 00:03:43.788
Because you choose to make
that public on the API.

65
00:03:43.788 --> 00:03:46.389
That's what we call the module pattern.

66
00:03:46.389 --> 00:03:52.747
Technically, we're not really abusing, but
sort of reusing some existing mechanism.

67
00:03:52.747 --> 00:03:55.962
In this case, function and
closer to implement this pattern.

68
00:03:55.962 --> 00:04:00.224
It's not exactly like having
a module keyword that we can use.

69
00:04:00.224 --> 00:04:04.893
We'll talk about syntactic support for the
module pattern in just a little bit, but

70
00:04:04.893 --> 00:04:07.392
it's worked well enough
that this has been,

71
00:04:07.392 --> 00:04:10.021
again, as I said,
the predominant pattern for

72
00:04:10.021 --> 00:04:14.519
organizing our code across pretty much
all of JavaScript for a really long time.

73
00:04:14.519 --> 00:04:17.926
The other competing pattern
of course is classes and

74
00:04:17.926 --> 00:04:20.953
we will talk a little
bit later about classes.

75
00:04:20.953 --> 00:04:24.601
Before I move on from talking
about this specific slide,

76
00:04:24.601 --> 00:04:28.637
I just wanna emphasize that while
this is a syntactic pattern.

77
00:04:28.637 --> 00:04:32.225
There's a layer of thinking that
you need to begin to adopt and

78
00:04:32.225 --> 00:04:37.124
the exercise we're about to start working
on will encourage you to think more deeply

79
00:04:37.124 --> 00:04:41.609
about this particular or will encourage
you to challenge your way of thinking

80
00:04:41.609 --> 00:04:45.818
about this stuff differently,
because the real questions you wanna ask

81
00:04:45.818 --> 00:04:49.418
yourself are not just does my
application do the right thing.

82
00:04:49.418 --> 00:04:53.371
Think back to the exercise code we've been
working on running through this workshop.

83
00:04:53.371 --> 00:04:58.023
All the functions are just hanging out
there out in the open global space.

84
00:04:58.023 --> 00:05:02.162
A, that's not great organization that all
that stuff is hanging out in global space.

85
00:05:02.162 --> 00:05:04.359
But B, it's not good organization.

86
00:05:04.359 --> 00:05:07.581
Cuz it's not clear where
the appropriate separation or

87
00:05:07.581 --> 00:05:10.950
the appropriate boundaries
between functionality are.

88
00:05:12.060 --> 00:05:16.799
I mean, you can think about it as simply
as there's one set of responsibility which

89
00:05:16.799 --> 00:05:19.913
is managing what happens in
the DOM that you iced off and

90
00:05:19.913 --> 00:05:23.927
there's another set of responsibility for
managing the data model.

91
00:05:23.927 --> 00:05:27.754
That in of itself is two
separate pieces of functionality.

92
00:05:27.754 --> 00:05:29.658
The way the code is currently constructed,

93
00:05:29.658 --> 00:05:31.620
that stuff is all
conflated stuck together.

94
00:05:33.300 --> 00:05:38.625
And it's difficult to tease out which
parts are UI, which parts are data model.

95
00:05:38.625 --> 00:05:42.073
So the module pattern is not
just about it's pretty or

96
00:05:42.073 --> 00:05:44.492
it like organizes things into a publicAPI.

97
00:05:44.492 --> 00:05:49.770
It's really about forcing you to think
about how to design your software,

98
00:05:49.770 --> 00:05:54.379
so that the proper separation of
responsibilities is in place and

99
00:05:54.379 --> 00:05:58.261
you're gonna be wrestling
with that multiple times.

100
00:05:58.261 --> 00:06:00.394
There is three parts to
the upcoming exercise.

101
00:06:00.394 --> 00:06:05.098
You're gonna get to wrestle with
that question multiple times in this

102
00:06:05.098 --> 00:06:06.223
next exercise.

103
00:06:06.223 --> 00:06:08.129
So, this is the classic module pattern.

104
00:06:08.129 --> 00:06:11.949
Now [COUGH] there is one thing to
observe about this which may not be

105
00:06:11.949 --> 00:06:13.152
obvious at first and

106
00:06:13.152 --> 00:06:17.558
that is the object that we return,
the one we're returning on line five.

107
00:06:17.558 --> 00:06:21.223
It's sort of an anonymous object,
because we return it and

108
00:06:21.223 --> 00:06:23.215
foo can reference that object.

109
00:06:23.215 --> 00:06:29.577
But we don't retain any internal
reference to our own publicAPI.

110
00:06:29.577 --> 00:06:33.556
Inside of our module, we don't have
any access to our own publicAPI.

111
00:06:33.556 --> 00:06:38.130
And I don't know if that sounds strange
to anybody else, but that feels really

112
00:06:38.130 --> 00:06:42.239
awkward to me that a module doesn't
have access to its own publicAPI.

113
00:06:42.239 --> 00:06:43.293
Why might you need that?

114
00:06:43.293 --> 00:06:45.089
Well, a couple of use cases.

115
00:06:45.089 --> 00:06:50.621
One, I might wanna call one of my own
publicAPI methods from internally.

116
00:06:50.621 --> 00:06:54.998
Two, I might wanna add of remove
properties or update property values or

117
00:06:54.998 --> 00:06:57.739
add or
remove methods from my own publicAPI.

118
00:06:57.739 --> 00:07:03.525
If I don't retain an internal access
to it, I can't change my own API.

119
00:07:03.525 --> 00:07:06.141
I can't do anything with my own API and
then there's

120
00:07:06.141 --> 00:07:09.771
the stylistic question which is if I
were to try to reference something,

121
00:07:09.771 --> 00:07:13.003
it would not be obvious that I was
dealing with my own publicAPI.

122
00:07:15.474 --> 00:07:20.191
&gt;&gt; Kyle Simpson: So this next slide shows
a very slight variation of this pattern,

123
00:07:20.191 --> 00:07:25.082
a modified variation of the classic
module pattern where I actually

124
00:07:25.082 --> 00:07:28.534
create an object that
serves as the publicAPI.

125
00:07:28.534 --> 00:07:33.507
But I save it to an internal
variable called publicAPI and

126
00:07:33.507 --> 00:07:36.103
then return that reference.

127
00:07:36.103 --> 00:07:37.527
Same principle applies,

128
00:07:37.527 --> 00:07:41.486
this is still a scope closure based
module pattern with encapsulation.

129
00:07:41.486 --> 00:07:43.401
But now, I have an access to publicAPI.

130
00:07:43.401 --> 00:07:45.322
So when foo points at that object,

131
00:07:45.322 --> 00:07:48.314
we now have foo on the outside
pointing at the object.

132
00:07:48.314 --> 00:07:51.849
And on the inside,
publicAPI pointing at the same object.

133
00:07:51.849 --> 00:07:54.203
And now,
I can use that reference internally.

134
00:07:54.203 --> 00:07:55.320
I can call my own methods.

135
00:07:55.320 --> 00:07:57.162
Aadd and remove methods.

136
00:07:57.162 --> 00:07:59.490
Update property values as I see fit.

137
00:08:01.200 --> 00:08:05.210
Even if I don't need to do that,
I've just gotten into the habit of

138
00:08:05.210 --> 00:08:10.450
always declaring my module pattern by
explicitly calling out my publicAPI.

139
00:08:10.450 --> 00:08:14.410
Because stylistically, it makes it clearer
that's exactly what this object is doing.

140
00:08:14.410 --> 00:08:16.670
It is serving the purpose
of being a publicAPI.

141
00:08:18.040 --> 00:08:21.340
Put this in your notes cuz it's not in the
slide but it's important for you to know.

142
00:08:22.420 --> 00:08:28.520
There are two characteristics implicit
in this definition of modules and

143
00:08:28.520 --> 00:08:30.940
both of these characteristics
need to be present for

144
00:08:30.940 --> 00:08:34.300
you to legitimately be
using the module pattern.

145
00:08:34.300 --> 00:08:37.200
The first characteristic is
that there must an outer and

146
00:08:37.200 --> 00:08:40.610
closing function that runs at least once.

147
00:08:41.640 --> 00:08:45.620
And I would even more generalize it to say
there must be an outer enclosing scope.

148
00:08:45.620 --> 00:08:47.740
That's almost always
gonna be a function but

149
00:08:47.740 --> 00:08:49.870
technically it doesn't
have to be a function.

150
00:08:49.870 --> 00:08:52.430
But there has to be an enclosing scope.

151
00:08:52.430 --> 00:08:55.750
In a couple of slides ago,
we didn't have enclosing scope so

152
00:08:55.750 --> 00:08:57.780
that's why it failed
the module definition.

153
00:08:59.970 --> 00:09:01.260
Here, we have an enclosing scope.

154
00:09:01.260 --> 00:09:04.640
This function happens to run exactly once.

155
00:09:04.640 --> 00:09:07.530
We have a special term for
things that only get created once and

156
00:09:07.530 --> 00:09:09.150
it's called singleton.

157
00:09:09.150 --> 00:09:11.520
So this is kind of like
a singleton module.

158
00:09:11.520 --> 00:09:14.010
There's only one instance of it.

159
00:09:14.010 --> 00:09:18.480
Had I made that a regular function that
could be called multiple times, every time

160
00:09:18.480 --> 00:09:23.050
that function was called, it would
produce a new instance of the module.

161
00:09:23.050 --> 00:09:25.430
So it's kind of like
a module factory function.

162
00:09:26.810 --> 00:09:29.890
So if it wasn't an iffy,
if I took off the parenthesis and

163
00:09:29.890 --> 00:09:33.630
just had a function that I could call
multiple times, that's a module factory.

164
00:09:35.230 --> 00:09:39.220
But that first characteristic, we need to
have one outer enclosing in this case,

165
00:09:39.220 --> 00:09:40.740
function that runs at least once.

166
00:09:42.410 --> 00:09:48.010
Second characteristic, there needs
to be at least one internal function

167
00:09:48.010 --> 00:09:54.400
that returns back in the publicAPI that
has closure over the internal state.

168
00:09:54.400 --> 00:09:58.610
If you're not taking advantage of
the internal state of this closure,

169
00:09:58.610 --> 00:10:01.570
then you're really missing the whole
point of the module pattern.

170
00:10:01.570 --> 00:10:04.220
Why go to all this trouble to
create the wrapper syntax.

171
00:10:04.220 --> 00:10:07.740
The boiler plate overhead, if your not
gonna take advantage of being able to

172
00:10:07.740 --> 00:10:12.930
maintain that state overtime hidden
inside of the encapsulated scope.

173
00:10:14.310 --> 00:10:18.821
So really, it's those two characteristics
have to play together for

174
00:10:18.821 --> 00:10:21.501
there legitimately be a module pattern.

175
00:10:21.501 --> 00:10:24.173
Outer and
closing function that runs at least once,

176
00:10:24.173 --> 00:10:27.280
inner function with closure of
that scope that gets return.

177
00:10:29.100 --> 00:10:32.280
Beyond that there are lots of
variations that you can use.

178
00:10:34.710 --> 00:10:39.940
Some of you may have heard of AMD
style loaders like RequireJS was

179
00:10:39.940 --> 00:10:42.230
a very popular one for many years.

180
00:10:42.230 --> 00:10:45.280
They typically look something like
what I'm showing here whether some

181
00:10:45.280 --> 00:10:48.110
function like define or
something like that.

182
00:10:48.110 --> 00:10:53.180
And you give it a function that's suppose
to return back your publicAPI for

183
00:10:53.180 --> 00:10:56.980
your module and you might optionally
tell it, this is what I wanna call it.

184
00:10:56.980 --> 00:10:59.230
This is the name of my module, and

185
00:10:59.230 --> 00:11:03.440
I just wanted to point out that this
is not some magical secret sauce.

186
00:11:03.440 --> 00:11:06.630
This is exactly what I just
showed on the previous slide.

187
00:11:06.630 --> 00:11:11.440
The only part that is hidden here is,
you don't see that function being executed

188
00:11:12.770 --> 00:11:16.510
and the return value being
assigned to a variable called foo.

189
00:11:16.510 --> 00:11:20.470
That's the only part that this loader
this define loader is actually doing for

190
00:11:20.470 --> 00:11:24.680
you but everything else behaves
by exactly the same rules.

191
00:11:24.680 --> 00:11:26.490
We have internal hidden variables or

192
00:11:26.490 --> 00:11:29.740
functions that aren't
by default accessible.

193
00:11:29.740 --> 00:11:33.878
We make them accessible by
adding them to the publicAPI, so

194
00:11:33.878 --> 00:11:37.790
we end up with a foo module
that has this bar method on it.

195
00:11:37.790 --> 00:11:43.770
So I referred a moment ago to,
this is kind of repurposing

196
00:11:43.770 --> 00:11:50.750
function syntax to create this
module idiom out of thin air.

197
00:11:50.750 --> 00:11:53.190
But it's not really
exactly dedicated syntax.

198
00:11:54.390 --> 00:11:57.120
Wouldn't it be nice if
there was dedicated syntax?

199
00:11:57.120 --> 00:12:01.955
As of ES6, we got dedicated syntax for it.

200
00:12:01.955 --> 00:12:07.174
As via 6 we have import and
export that allow us to express

201
00:12:07.174 --> 00:12:12.186
that a module by default
has everything hidden.

202
00:12:12.186 --> 00:12:17.870
And export let us tell it what we
wanna add to the public exports list,

203
00:12:17.870 --> 00:12:21.540
import says, we get to list what
we wanna import from a module.

204
00:12:22.570 --> 00:12:27.070
So if I had a file called food.js here,
and I had a hidden

205
00:12:27.070 --> 00:12:30.990
internal variable called var0, you'll
notice that it's just by default hidden.

206
00:12:30.990 --> 00:12:35.440
I didn't need to wrap anything around it
because the entire contents of the file

207
00:12:35.440 --> 00:12:36.969
are treated as the module.

208
00:12:38.410 --> 00:12:39.870
That is something very unique and

209
00:12:39.870 --> 00:12:44.020
different compared to the way we've been
thinking about modules in JavaScript.

210
00:12:44.020 --> 00:12:48.160
The file is the module, the file contents.

211
00:12:48.160 --> 00:12:51.430
The way it gets treated
as the module contents

212
00:12:51.430 --> 00:12:54.320
is based upon how that file gets loaded.

213
00:12:54.320 --> 00:12:58.460
If it gets loaded by an import statement
like we see in the second code snippet,

214
00:12:59.460 --> 00:13:01.590
then it's gonna get
interpreted as a module and

215
00:13:01.590 --> 00:13:05.270
everything will be hidden
within a module scope.

216
00:13:05.270 --> 00:13:08.625
The only stuff that'll be accessible to
the outside world is the stuff that we

217
00:13:08.625 --> 00:13:10.080
choose to put export in front of.

218
00:13:11.800 --> 00:13:14.620
So what does that mean to be file based?

219
00:13:14.620 --> 00:13:19.100
The most pragmatic or practical
observation that you'll then make is,

220
00:13:19.100 --> 00:13:24.480
it is impossible for you to package
multiple modules into the same file.

221
00:13:26.760 --> 00:13:30.540
The entire contents of a file will
be treated as a single module.

222
00:13:32.350 --> 00:13:35.780
So, if you have 100 separate modules for

223
00:13:35.780 --> 00:13:40.081
your application, you're gonna have
to put those into 100 separate files.

224
00:13:41.150 --> 00:13:45.250
And you're gonna have to keep those
hundred separate files completely separate

225
00:13:45.250 --> 00:13:48.510
from the perspective of how they load,
even into the browser.

226
00:13:51.050 --> 00:13:54.190
&gt;&gt; Kyle Simpson: There's a good chance
that that might throw up some alarm bells

227
00:13:54.190 --> 00:13:57.153
in your head because you've
also probably heard for 15 or

228
00:13:57.153 --> 00:13:59.300
20 years of the web's history.

229
00:13:59.300 --> 00:14:02.850
Don't load hundreds of separate files,
cuz the performance will be terrible.

230
00:14:02.850 --> 00:14:05.300
Concatenate everything into one file.

231
00:14:05.300 --> 00:14:10.020
So it might seem like this design
is antithetical to web performance.

232
00:14:11.540 --> 00:14:16.294
The perspective that TC39 used
was that by the time module

233
00:14:16.294 --> 00:14:21.440
support had rolled down in full
scale to all of the web browsers.

234
00:14:21.440 --> 00:14:27.290
Simultaneous with that our concurrent
with that, we would had to roll out off

235
00:14:27.290 --> 00:14:33.420
another technology assistive technology
if you will which is HTTP version two.

236
00:14:33.420 --> 00:14:38.349
And the primary observation that's
different between version one and

237
00:14:38.349 --> 00:14:41.469
version two of HTTP,
is that in version two,

238
00:14:41.469 --> 00:14:46.910
everything is delivered over a single
persistent socket connection.

239
00:14:46.910 --> 00:14:49.129
Not terribly dissimilar from web sockets.

240
00:14:50.400 --> 00:14:53.370
There's one connection made
between client and server.

241
00:14:53.370 --> 00:14:56.640
That connection stays alive for
the entire lifetime.

242
00:14:56.640 --> 00:15:01.350
And all the resources that need to go out,
go out over that single connection.

243
00:15:01.350 --> 00:15:05.889
As a matter of fact, they can be inter
lived together so the worst possible thing

244
00:15:05.889 --> 00:15:09.977
you can do an HTTP version two,
is package everything up into one file.

245
00:15:09.977 --> 00:15:13.090
And send all of those bytes
serially down the line.

246
00:15:13.090 --> 00:15:16.740
The best thing you can do,
is have lots of separate resources and

247
00:15:16.740 --> 00:15:17.890
send them concurrently.

248
00:15:19.750 --> 00:15:23.112
&gt;&gt; Kyle Simpson: So their perception or
their forethought was,

249
00:15:23.112 --> 00:15:28.152
this won't be a problem to be file
based because by the time people adopt

250
00:15:28.152 --> 00:15:33.260
ES6 modules, they'll also all likely
be adopting HTTP version two.

251
00:15:33.260 --> 00:15:35.430
But that means for you today is,

252
00:15:35.430 --> 00:15:40.290
don't go adopting ES6 modules until you're
also ready to adopt HTTP version two.

253
00:15:42.460 --> 00:15:46.570
Version two of HTTP does require
a more intelligent server.

254
00:15:46.570 --> 00:15:49.938
You have things that the server has
to figure out like server push,

255
00:15:49.938 --> 00:15:52.705
where it receives a single
request from the browser and

256
00:15:52.705 --> 00:15:55.550
the server knows what resources
are gonna be asked for.

257
00:15:55.550 --> 00:15:59.050
So, it pushes them up preemptively and
all kinds of other stuff.

258
00:15:59.050 --> 00:16:01.439
You're gonna need a more sophisticated
server to figure that stuff out.

259
00:16:02.720 --> 00:16:04.420
They exist, but you're gonna need that,

260
00:16:04.420 --> 00:16:06.891
it's not just gonna automatically
come right out of the box.

261
00:16:08.589 --> 00:16:12.730
&gt;&gt; Kyle Simpson: So that's the first major
observation, modules are file based.

262
00:16:12.730 --> 00:16:15.910
And that will change a bit how you
might design your application.

263
00:16:15.910 --> 00:16:20.424
The other thing to know,
is that modules are by default singletons.

264
00:16:20.424 --> 00:16:24.231
There's only one instance
of the module in ES6.

265
00:16:24.231 --> 00:16:28.850
If I called import bar, like I do there
on the line, one with the second snippet.

266
00:16:28.850 --> 00:16:30.660
If I call that import bar 15 times,

267
00:16:30.660 --> 00:16:35.450
I'm not gonna recreate
the foo module 15 times.

268
00:16:35.450 --> 00:16:38.710
It only gets created and run once.

269
00:16:38.710 --> 00:16:43.117
And then I get 15 separate reference
copies of the same module instance.

270
00:16:44.237 --> 00:16:47.787
&gt;&gt; Kyle Simpson: So if you're in the habit
of liking to have different module

271
00:16:47.787 --> 00:16:52.331
instances like you think of them as
module factories when you require them or

272
00:16:52.331 --> 00:16:57.230
something, you're gonna have to implement
that layer of module factory on top of

273
00:16:57.230 --> 00:16:57.871
your API.

274
00:16:57.871 --> 00:17:01.186
Have to export a method like create or
factory or something,

275
00:17:01.186 --> 00:17:02.620
that can generate those.

276
00:17:02.620 --> 00:17:06.262
Because just importing it will
not create a new instance.

277
00:17:06.262 --> 00:17:08.734
That's another thing to be aware of.

278
00:17:08.734 --> 00:17:13.514
The biggest caveat that exists here is
that there's a big incompatibility between

279
00:17:13.514 --> 00:17:16.420
the syntax that rolled into JavaScript.

280
00:17:16.420 --> 00:17:21.158
And the most predominant environment
where we have modules today,

281
00:17:21.158 --> 00:17:23.995
which is the npm ecosystem in Node.js.

282
00:17:23.995 --> 00:17:27.598
To date, there's 420 something
thousand public packages,

283
00:17:27.598 --> 00:17:31.264
plus who knows how many millions
of private packages that have been

284
00:17:31.264 --> 00:17:34.270
written and
published to the npm repository.

285
00:17:34.270 --> 00:17:40.337
And 100% of those are incompatible
with this new ES6 syntax.

286
00:17:40.337 --> 00:17:45.595
Moreover, Node.js itself is incompatible
with this new syntax because Node.js

287
00:17:45.595 --> 00:17:51.090
needs to support, not only the old style,
required style, but the new import style.

288
00:17:51.090 --> 00:17:56.174
And while it seems like that would
just be a simple matching up of stuff.

289
00:17:56.174 --> 00:18:00.046
It turns out when Node went to go
implement this, they're like crap,

290
00:18:00.046 --> 00:18:04.940
this doesn't work, and we can't break
our existing ecosystem to make it work.

291
00:18:04.940 --> 00:18:06.690
So then they had to go
back to the drawing board.

292
00:18:06.690 --> 00:18:09.120
They went back to JavaScript,
the TC 39 committee and

293
00:18:09.120 --> 00:18:13.689
they're like, sorry, this is awkward but
that's not gonna work.

294
00:18:15.050 --> 00:18:18.250
And so they've been hashing this out
now for the better part of a year.

295
00:18:18.250 --> 00:18:20.090
Most recently within about a month or

296
00:18:20.090 --> 00:18:24.970
so they announced that they think
they have a path forward for

297
00:18:24.970 --> 00:18:29.259
compat, but that it will take at least
another year to iron all of that out.

298
00:18:30.880 --> 00:18:34.661
So it's not gonna be any time
soon that you can rely upon this,

299
00:18:34.661 --> 00:18:39.190
even though it's in the [LAUGH] specs
standard, that you can rely upon it.

300
00:18:39.190 --> 00:18:42.370
It may change,
they're talking about requiring you,

301
00:18:42.370 --> 00:18:46.370
if you're gonna do node modules that are
ES6, you're gonna have to use a special

302
00:18:46.370 --> 00:18:49.760
file extension or
some other kind of ridiculousness.

303
00:18:49.760 --> 00:18:50.980
This stuff is still in flux.

304
00:18:52.230 --> 00:18:55.122
So my recommendation is,
while it's cool to look at, and

305
00:18:55.122 --> 00:18:57.373
I'm excited about this syntax eventually.

306
00:18:57.373 --> 00:19:02.277
For now, I've chosen to hold off
converting to this module syntax.

307
00:19:02.277 --> 00:19:07.585
For now I continue to use
the existing classic module pattern.

308
00:19:07.585 --> 00:19:11.036
We call that common JS,
we call it UMD, we call it AMD,

309
00:19:11.036 --> 00:19:13.676
whatever terminology we put on top of it.

310
00:19:13.676 --> 00:19:18.596
That's how I ship my modules so that they
run in both Node and in the browser.

311
00:19:18.596 --> 00:19:23.012
Some people have started using
this as an authoring format, but

312
00:19:23.012 --> 00:19:27.937
then they transpile from this format
back to something like common JS.

313
00:19:27.937 --> 00:19:31.140
Personally for me,
I think it's the reverse.

314
00:19:31.140 --> 00:19:35.300
Personally for me, I'm gonna
continue to author for a long time,

315
00:19:35.300 --> 00:19:42.400
in the existing format and I eventually
might start transpiling the ES6 modules.

316
00:19:42.400 --> 00:19:46.240
So it will become instead of
an authoring format, a target format for

317
00:19:46.240 --> 00:19:48.430
the environments that support it.

318
00:19:48.430 --> 00:19:51.840
So personally, for me, I'm not likely
gonna start offering in this for

319
00:19:51.840 --> 00:19:54.280
maybe at least another five years or so.

320
00:19:54.280 --> 00:19:56.460
Let all of this stuff iron itself out.

321
00:19:56.460 --> 00:19:58.129
That's my own take.

322
00:19:58.129 --> 00:20:01.250
You can make your own decisions
as makes sense for your team.

