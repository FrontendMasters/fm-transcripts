WEBVTT

1
00:00:00.380 --> 00:00:03.678
&gt;&gt; Kyle Simpson: All right,I wanna dig
into function scoping for a little bit and

2
00:00:03.678 --> 00:00:06.913
try to develop, or try to come up
with a pattern that will help us

3
00:00:06.913 --> 00:00:09.067
understand where function scope helps.

4
00:00:09.067 --> 00:00:12.922
So I wanna start out with this example,
let's imagine you've written some code,

5
00:00:12.922 --> 00:00:15.200
you have a foo variable at the top.

6
00:00:15.200 --> 00:00:18.200
And at the bottom you have
a reference to that variable.

7
00:00:18.200 --> 00:00:20.800
But sometime in the lifetime
of this program,

8
00:00:20.800 --> 00:00:24.427
somebody comes along in the middle of
the program and inserts lines 5 and 6.

9
00:00:24.427 --> 00:00:28.550
And they choose the same variable name for
any of a variety of reasons.

10
00:00:28.550 --> 00:00:33.490
Maybe that's a really good unique,
a really good useful variable name,

11
00:00:33.490 --> 00:00:36.180
maybe they just accidentally
pick the same one that you did.

12
00:00:36.180 --> 00:00:40.040
Doesn't really matter why, but
they picked the same variable name.

13
00:00:40.040 --> 00:00:43.400
Now, we know that's not really
redeclaring the variable, so

14
00:00:43.400 --> 00:00:45.418
the var part isn't a problem.

15
00:00:45.418 --> 00:00:49.528
We already talked about this early in
the course with the fact that the compiler

16
00:00:49.528 --> 00:00:51.845
would see line 5 as
that duplicate var foo.

17
00:00:51.845 --> 00:00:52.580
It's just gonna be a know up.

18
00:00:52.580 --> 00:00:55.340
It's like thanks very much,
it's already registered.

19
00:00:55.340 --> 00:00:57.600
That marble already exists in the bucket.

20
00:00:57.600 --> 00:01:01.750
But that equal sign, that assignment on
line 5 is definitely gonna clobber things.

21
00:01:01.750 --> 00:01:05.770
So now line 10 is gonna print
out foo2 instead of just foo.

22
00:01:05.770 --> 00:01:09.148
That's clearly a problem.
&gt;&gt; Kyle Simpson: So

23
00:01:09.148 --> 00:01:13.879
I wanna talk to this idea of how do we
deal with the problem where we've got

24
00:01:13.879 --> 00:01:18.860
a variable that, in essence,
is colliding with some other variable.

25
00:01:18.860 --> 00:01:19.910
How do we fix that?

26
00:01:19.910 --> 00:01:24.450
The way we fix that is to create a scope,
to contain,

27
00:01:24.450 --> 00:01:27.770
to encapsulate that variable declaration.

28
00:01:27.770 --> 00:01:31.217
And in particular, we wanna create a
function or a scope around lines 5 and 6,

29
00:01:31.217 --> 00:01:33.560
and we're gonna do that with a function.

30
00:01:33.560 --> 00:01:35.080
So I want you to imagine that I just said,

31
00:01:35.080 --> 00:01:38.000
okay, well my fix to this is
to make some random function.

32
00:01:38.000 --> 00:01:40.390
I'm just gonna call it bob for right now.

33
00:01:40.390 --> 00:01:43.940
Make some random function in
the middle of my program,

34
00:01:43.940 --> 00:01:46.870
and then immediately call that function.

35
00:01:46.870 --> 00:01:48.740
And you'll know now that the line 4,

36
00:01:48.740 --> 00:01:53.730
that var foo on line 4,
is just contained within that function.

37
00:01:53.730 --> 00:01:57.700
So it doesn't overwrite line 1,
and that preserves line 9 to work

38
00:01:57.700 --> 00:02:01.813
correctly.
&gt;&gt; Kyle Simpson: So we've used a function

39
00:02:01.813 --> 00:02:05.640
to create some scope, and by the way, this
can happen in lots of different places.

40
00:02:05.640 --> 00:02:09.240
You might need to create some scope
instead of, I don't know, a for loop.

41
00:02:09.240 --> 00:02:10.860
That's a hint for later, okay?

42
00:02:12.200 --> 00:02:16.030
Any place that you might need to create
some scope to protect something,

43
00:02:16.030 --> 00:02:17.490
either from collision or

44
00:02:17.490 --> 00:02:21.800
just to protect it from access,
putting a function around it is a decent

45
00:02:21.800 --> 00:02:25.300
way of doing that because JavaScript's
unitive scope is the function.

