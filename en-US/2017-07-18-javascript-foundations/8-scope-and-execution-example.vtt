WEBVTT

1
00:00:00.230 --> 00:00:02.600
&gt;&gt; Kyle: Here's the slide,
the more complex example.

2
00:00:02.600 --> 00:00:04.220
Since you've already practice this,

3
00:00:04.220 --> 00:00:07.070
you should be able to help me
go through this very quickly.

4
00:00:07.070 --> 00:00:10.440
We're gonna run through this code
exactly the same as we did before.

5
00:00:10.440 --> 00:00:14.611
We're gonna compile it first and
then we're gonna execute it.

6
00:00:18.334 --> 00:00:20.432
&gt;&gt; Kyle: All right.

7
00:00:21.840 --> 00:00:23.000
How do we start?

8
00:00:23.000 --> 00:00:24.070
How is the compiler going to start?

9
00:00:26.300 --> 00:00:28.540
Which scope are we talking to,
on line one?

10
00:00:29.900 --> 00:00:30.420
&gt;&gt; Speaker 2: Global.

11
00:00:30.420 --> 00:00:31.380
&gt;&gt; Kyle: Okay, global scope.

12
00:00:31.380 --> 00:00:35.040
I have a formal declaration for-
&gt;&gt; Speaker 2: Foo.

13
00:00:35.040 --> 00:00:38.010
&gt;&gt; Kyle: Foo on line one,
ever heard of him and the answer is?

14
00:00:38.010 --> 00:00:38.870
&gt;&gt; Speaker 2: No.
&gt;&gt; Kyle: No, but

15
00:00:38.870 --> 00:00:41.990
now I've created that red marble and
put it in the red bucket.

16
00:00:41.990 --> 00:00:42.610
Thanks very much.

17
00:00:42.610 --> 00:00:44.588
What do we do next?

18
00:00:44.588 --> 00:00:45.876
&gt;&gt; Speaker 2: Three?

19
00:00:45.876 --> 00:00:46.652
&gt;&gt; Kyle: Bar?

20
00:00:46.652 --> 00:00:48.830
&gt;&gt; Speaker 2: Bar&gt;
&gt;&gt; Kyle: A global scope.

21
00:00:48.830 --> 00:00:51.430
I have an identifier called 'bar',
ever heard of him?

22
00:00:51.430 --> 00:00:53.410
The answer is-
&gt;&gt; Speaker 2: No.

23
00:00:53.410 --> 00:00:54.730
No.
&gt;&gt; Kyle: But now I've got

24
00:00:54.730 --> 00:00:57.960
another red marble in the red bucket,
called bar.

25
00:00:57.960 --> 00:01:02.120
By the way, that marble happens
to point at a function So

26
00:01:02.120 --> 00:01:03.318
let's step into the function.

27
00:01:03.318 --> 00:01:05.305
What's next?

28
00:01:07.678 --> 00:01:08.248
&gt;&gt; Speaker 2: I don't know.

29
00:01:08.248 --> 00:01:08.751
&gt;&gt; Speaker 3: Scope.

30
00:01:08.751 --> 00:01:10.050
&gt;&gt; Kyle: What scope are we talking to?

31
00:01:10.050 --> 00:01:10.890
&gt;&gt; Speaker 3: Scope of bar.

32
00:01:10.890 --> 00:01:11.890
&gt;&gt; Kyle: A scope of bar.

33
00:01:11.890 --> 00:01:14.620
We have a formal declaration for foo.

34
00:01:14.620 --> 00:01:16.530
Ever heard of any answer is?

35
00:01:16.530 --> 00:01:17.180
&gt;&gt; Speaker 3: No.

36
00:01:17.180 --> 00:01:18.930
&gt;&gt; Kyle: No,
because this is a different bucket now.

37
00:01:20.010 --> 00:01:22.570
We're not asking about the var
foo in the red bucket,

38
00:01:22.570 --> 00:01:24.950
we're now talking to the blue bucket.

39
00:01:24.950 --> 00:01:27.820
Say, scope of var,
I've got a variable called foo.

40
00:01:27.820 --> 00:01:28.730
Ever heard of him?

41
00:01:28.730 --> 00:01:30.130
And the answer is no.

42
00:01:30.130 --> 00:01:32.400
But now I have a blue marble.

43
00:01:32.400 --> 00:01:32.900
What's next?

44
00:01:38.500 --> 00:01:40.980
A scope of bar,

45
00:01:40.980 --> 00:01:46.370
I have an identifier called baz,
have you heard of him and the answer is?

46
00:01:47.600 --> 00:01:48.250
&gt;&gt; Speaker 2: No.
&gt;&gt; Kyle: Nope but

47
00:01:48.250 --> 00:01:51.430
now we have another blue
marble in the bucket,

48
00:01:51.430 --> 00:01:54.110
baz is in the blue bucket along with foo,
right?

49
00:01:55.380 --> 00:01:59.320
By the way, baz is pointing a function,
let's go inside of baz and

50
00:01:59.320 --> 00:02:00.090
make another bucket.

51
00:02:01.110 --> 00:02:02.420
This is like the green bucket.

52
00:02:03.750 --> 00:02:06.410
Okay, so now we've made a green bucket for
the scope of baz.

53
00:02:07.470 --> 00:02:08.161
How do we proceed?

54
00:02:08.161 --> 00:02:09.862
&gt;&gt; Speaker 2: A scope of baz.

55
00:02:09.862 --> 00:02:12.180
&gt;&gt; Kyle: What line are we on?

56
00:02:12.180 --> 00:02:13.570
&gt;&gt; Speaker 2: Six.
&gt;&gt; Kyle: A scope

57
00:02:13.570 --> 00:02:14.810
of
&gt;&gt; Speaker 2: baz.

58
00:02:14.810 --> 00:02:15.490
&gt;&gt; Kyle: Baz.

59
00:02:15.490 --> 00:02:19.720
I have a formal declaration for
a parameter called foo,

60
00:02:19.720 --> 00:02:20.460
anyone ever heard of him?

61
00:02:20.460 --> 00:02:21.050
The answer is?

62
00:02:21.050 --> 00:02:21.550
&gt;&gt; Speaker 4: No.

63
00:02:23.230 --> 00:02:23.830
&gt;&gt; Speaker 2: No.
&gt;&gt; Kyle: No.

64
00:02:23.830 --> 00:02:27.480
But now we've made a green marble,
with the parameter foo.

65
00:02:27.480 --> 00:02:28.710
Okay?

66
00:02:28.710 --> 00:02:29.930
We keep going.

67
00:02:29.930 --> 00:02:30.960
Anything to do with line 7?

68
00:02:30.960 --> 00:02:32.890
What about the line 8?

69
00:02:34.770 --> 00:02:35.460
No.
&gt;&gt; Speaker 2: No.

70
00:02:35.460 --> 00:02:37.110
&gt;&gt; Kyle: So now we step back out.

71
00:02:37.110 --> 00:02:38.100
Now we're on line 10.

72
00:02:38.100 --> 00:02:39.520
Anything to do with line 10?

73
00:02:39.520 --> 00:02:40.350
&gt;&gt; Speaker 2: No.

74
00:02:40.350 --> 00:02:42.910
&gt;&gt; Kyle: Other than storing metadata,
which we'll come back to at runtime,

75
00:02:42.910 --> 00:02:45.850
there's no formal declarations on those.

76
00:02:45.850 --> 00:02:48.530
If we come back out to the global
scope starting with line 13,

77
00:02:48.530 --> 00:02:50.720
any more formal declarations there?

78
00:02:50.720 --> 00:02:51.890
&gt;&gt; Speaker 2: No.

79
00:02:51.890 --> 00:02:53.160
&gt;&gt; Kyle: So are we done with compilation?

80
00:02:55.470 --> 00:02:58.930
Okay, great.Now It's
time to execute.Remember,

81
00:02:58.930 --> 00:03:00.540
all the variable declarations and

82
00:03:00.540 --> 00:03:04.700
function declarations have been compiled
away.Where does execution start?

83
00:03:06.560 --> 00:03:07.290
&gt;&gt; Speaker 5: Line one.

84
00:03:07.290 --> 00:03:10.592
&gt;&gt; Kyle: Line one,
how does line one execute?

85
00:03:14.103 --> 00:03:15.390
&gt;&gt; Speaker 5: A global scope.

86
00:03:15.390 --> 00:03:17.710
&gt;&gt; Kyle: A global scope I have a.

87
00:03:17.710 --> 00:03:20.820
I have a left hand reference for foo.

88
00:03:20.820 --> 00:03:21.590
Ever heard of him?

89
00:03:21.590 --> 00:03:22.610
The answer is?

90
00:03:22.610 --> 00:03:23.110
&gt;&gt; Speaker 5: Yes.

91
00:03:23.110 --> 00:03:26.300
&gt;&gt; Kyle: Sure so
now I've been given that red marble back.

92
00:03:26.300 --> 00:03:27.500
I go to the right hand side.

93
00:03:27.500 --> 00:03:28.640
I look at the quote bar.

94
00:03:28.640 --> 00:03:30.080
I have that value.

95
00:03:30.080 --> 00:03:31.340
I make the assignment.

96
00:03:31.340 --> 00:03:32.240
Line one is complete.

97
00:03:33.420 --> 00:03:37.320
Lines three thru eleven have been compiled
away and so execution moves to line 13.

98
00:03:37.320 --> 00:03:39.900
How does line 13 itself execute?

99
00:03:41.530 --> 00:03:45.940
You have to tell me how does
line 13 itself execute.

100
00:03:48.290 --> 00:03:50.690
Same process that we've doing all along.

101
00:03:50.690 --> 00:03:52.749
Hey global scope,
I have a what kind of reference?

102
00:03:54.600 --> 00:03:55.280
Bar?

103
00:03:55.280 --> 00:03:56.420
&gt;&gt; Speaker 2: The left.

104
00:03:56.420 --> 00:03:58.260
&gt;&gt; Speaker 5: Right.

105
00:03:58.260 --> 00:04:01.230
&gt;&gt; Kyle: So some of you say left,
some of you say right.

106
00:04:01.230 --> 00:04:02.610
&gt;&gt; Speaker 5: Right.

107
00:04:02.610 --> 00:04:04.020
&gt;&gt; Speaker 4: Left.

108
00:04:04.020 --> 00:04:07.540
&gt;&gt; Kyle: A left hand reference
is otherwise known as

109
00:04:07.540 --> 00:04:09.910
a target reference, right?

110
00:04:09.910 --> 00:04:12.310
So that would have to be
the target of an assignment.

111
00:04:12.310 --> 00:04:13.609
Is it the target of an assignment?

112
00:04:14.630 --> 00:04:18.430
So if it's not a left hand reference
it must be a right hand reference.

113
00:04:18.430 --> 00:04:21.960
Kind of like with the falsey truthy thing,
it's truthy because it's not in the falsey

114
00:04:21.960 --> 00:04:25.160
list, it's the right hand value
because it's not a left hand value

115
00:04:26.340 --> 00:04:29.380
because it's not receiving the target,
it's not the target we are saying.

116
00:04:30.650 --> 00:04:34.300
Okay, so that's an RHS,
that's a right hand sign value for

117
00:04:34.300 --> 00:04:38.030
an identifier called bar, First time
we've seen that in our examples so far.

118
00:04:38.030 --> 00:04:42.820
Okay, So, we're going to say, hey global
scope, I have an rhs reference for bar and

119
00:04:42.820 --> 00:04:43.680
the answer is?

120
00:04:45.430 --> 00:04:46.110
&gt;&gt; Speaker 2: Yes?

121
00:04:46.110 --> 00:04:48.850
&gt;&gt; Kyle: Yes, so we go and
get that marble out.

122
00:04:48.850 --> 00:04:50.820
That's a red marble, right?

123
00:04:50.820 --> 00:04:54.200
Now we need to know what
is in the value of bars and

124
00:04:54.200 --> 00:04:56.830
since we're using it as a right hand,
we need also the value.

125
00:04:56.830 --> 00:04:58.420
We go look for the value.

126
00:04:58.420 --> 00:04:59.700
What is currently in bar?

127
00:04:59.700 --> 00:05:02.250
&gt;&gt; Speaker 2: A function?

128
00:05:02.250 --> 00:05:03.900
&gt;&gt; Kyle: A function.

129
00:05:03.900 --> 00:05:04.720
Okay?

130
00:05:04.720 --> 00:05:07.490
There's currently a function in bar,
that's great.

131
00:05:07.490 --> 00:05:09.540
So, we go get that function and

132
00:05:09.540 --> 00:05:13.420
then we come to these parenthesis
here on line 13 and we execute it.

133
00:05:14.620 --> 00:05:17.760
So, your instinct is to think of
line 13 as a single statement but

134
00:05:17.760 --> 00:05:20.680
is actually two very separate and
important operations,

135
00:05:20.680 --> 00:05:25.350
the first one Go resolve the bar
expression to find out what value it is.

136
00:05:25.350 --> 00:05:27.790
The second thing is to do
that parenthesis execute.

137
00:05:29.090 --> 00:05:30.870
Parenthesis aren't
technically an operator but

138
00:05:30.870 --> 00:05:33.200
in this case they are sort
of working like an operator.

139
00:05:33.200 --> 00:05:36.419
They are executing the function.

140
00:05:36.419 --> 00:05:37.207
Okay.

141
00:05:37.207 --> 00:05:39.776
Makes sense?

142
00:05:42.257 --> 00:05:46.273
&gt;&gt; Kyle: All right, so now that we
executed bar words is execution rif 2.

143
00:05:48.542 --> 00:05:49.939
&gt;&gt; Speaker 5: Line 4.

144
00:05:49.939 --> 00:05:54.092
&gt;&gt; Kyle: Line 4, how does that go?

145
00:05:56.450 --> 00:06:00.000
&gt;&gt; Kyle: A scope of bar, I have a,
&gt;&gt; Speaker 2: L H S.

146
00:06:00.000 --> 00:06:01.280
&gt;&gt; Kyle: L H S for foo, ever heard of him?

147
00:06:01.280 --> 00:06:03.170
And the answer is?

148
00:06:03.170 --> 00:06:03.970
&gt;&gt; Speaker 2: Yes
&gt;&gt; Kyle: Yes,

149
00:06:03.970 --> 00:06:07.870
because you compiled him
just a few microseconds ago.

150
00:06:07.870 --> 00:06:09.040
Excellent.

151
00:06:09.040 --> 00:06:12.450
So, we find that blue marble now and

152
00:06:12.450 --> 00:06:15.790
then we go to the right hand side we
find quote baz, we make the assignment.

153
00:06:15.790 --> 00:06:16.700
Line four is complete.

154
00:06:17.900 --> 00:06:20.320
Six through nine have been compiled away.

155
00:06:20.320 --> 00:06:22.790
Execution moves to line 10,
how does line 10 execute?

156
00:06:26.250 --> 00:06:27.114
&gt;&gt; Speaker 2: A scope of bar.

157
00:06:27.114 --> 00:06:29.760
&gt;&gt; Kyle: A scope of bar, I have a?

158
00:06:29.760 --> 00:06:30.330
&gt;&gt; Speaker 2: RHS4.

159
00:06:30.330 --> 00:06:31.230
&gt;&gt; Kyle: RHS4.

160
00:06:31.230 --> 00:06:32.250
Baz, ever heard of him?

161
00:06:32.250 --> 00:06:33.310
The answer is?

162
00:06:33.310 --> 00:06:34.030
&gt;&gt; Speaker 2: Yes.

163
00:06:34.030 --> 00:06:36.970
&gt;&gt; Kyle: Yes,
because you formally declared him.

164
00:06:36.970 --> 00:06:38.600
Now, what is the value in baz?

165
00:06:39.650 --> 00:06:43.860
A function, so then we go to
the parentheses on line 10 and execute.

166
00:06:43.860 --> 00:06:46.360
Execution then moves to line.

167
00:06:46.360 --> 00:06:46.940
&gt;&gt; Speaker 2: Seven.

168
00:06:46.940 --> 00:06:47.840
&gt;&gt; Kyle: Seven.

169
00:06:47.840 --> 00:06:49.030
How does line seven execute?

170
00:06:49.030 --> 00:06:52.620
&gt;&gt; Speaker 6: A function baz.

171
00:06:52.620 --> 00:06:53.770
&gt;&gt; Kyle: A scope of baz.

172
00:06:53.770 --> 00:06:54.390
I have a.

173
00:06:56.500 --> 00:06:57.742
&gt;&gt; Speaker 6: I have a [CROSSTALK].

174
00:06:57.742 --> 00:06:59.760
&gt;&gt; Kyle: A left hand side reference for
foo.

175
00:06:59.760 --> 00:07:02.680
&gt;&gt; Speaker 6: A left hand side of foo.

176
00:07:02.680 --> 00:07:04.490
&gt;&gt; Kyle: Ever heard of them?

177
00:07:04.490 --> 00:07:05.190
&gt;&gt; Speaker 2: Yes.

178
00:07:05.190 --> 00:07:07.680
&gt;&gt; Kyle: Yes,
because you declared them on what line?

179
00:07:07.680 --> 00:07:10.510
The sixth, the parameter, okay?

180
00:07:10.510 --> 00:07:14.650
So now we have the green marble,
we can assign bam into foo,

181
00:07:14.650 --> 00:07:16.460
and we're done with line 7.

182
00:07:16.460 --> 00:07:18.820
How does line 8 execute?

183
00:07:18.820 --> 00:07:23.970
&gt;&gt; Speaker 2: A scope- [CROSSTALK]
&gt;&gt; Kyle: A scope of?

184
00:07:23.970 --> 00:07:27.130
Pass, I have a.

185
00:07:27.130 --> 00:07:29.280
&gt;&gt; Speaker 2: LHS.
&gt;&gt; Kyle: LHS for bam.

186
00:07:29.280 --> 00:07:29.840
Ever heard of him?

187
00:07:29.840 --> 00:07:33.910
The answer is, go fish, all right?

188
00:07:33.910 --> 00:07:34.880
So where do we go next.

189
00:07:36.690 --> 00:07:37.636
&gt;&gt; Speaker 2: We gotta discover bar.

190
00:07:37.636 --> 00:07:38.800
&gt;&gt; Kyle: We gotta discover bar.

191
00:07:38.800 --> 00:07:44.520
A scope of bar, I have a LHS for Bam.

192
00:07:44.520 --> 00:07:45.210
Bam, ever heard of him?

193
00:07:45.210 --> 00:07:46.960
The answer is?

194
00:07:46.960 --> 00:07:48.140
&gt;&gt; Speaker 2: No.
&gt;&gt; Kyle: Go fish.

195
00:07:49.180 --> 00:07:50.870
Where do we go next?

196
00:07:50.870 --> 00:07:51.430
&gt;&gt; Speaker 2: Global scope.

197
00:07:51.430 --> 00:07:54.100
&gt;&gt; Kyle: A global scope, I have a?

198
00:07:54.100 --> 00:07:55.690
&gt;&gt; Speaker 2: LHS.
&gt;&gt; Kyle: LHS for?

199
00:07:55.690 --> 00:07:56.850
&gt;&gt; Speaker 2: Bam.
&gt;&gt; Kyle: Ever heard of him?

200
00:07:56.850 --> 00:08:00.130
&gt;&gt; Speaker 5: No, but
I will create it for you [LAUGH].

201
00:08:00.130 --> 00:08:01.830
&gt;&gt; Kyle: No, but I went ahead and
created one for you anyway.

202
00:08:01.830 --> 00:08:02.680
Aren't I so helpful?

203
00:08:03.870 --> 00:08:04.370
Argh!

204
00:08:05.670 --> 00:08:08.680
So now we go to the right hand side,
find this yay value.

205
00:08:08.680 --> 00:08:13.220
We assign it into the global variable
bam as opposed to local variable, okay.

206
00:08:14.750 --> 00:08:18.170
Execution finishes with line eight,
that takes us back to ten.

207
00:08:18.170 --> 00:08:20.010
That finishes back to line 13.

208
00:08:20.010 --> 00:08:22.250
How does line 14 execute?

209
00:08:26.230 --> 00:08:31.650
&gt;&gt; Kyle: Hey global scope I have a RHS for
foo, have you ever hear of him?

210
00:08:31.650 --> 00:08:32.180
The answer is?

211
00:08:32.180 --> 00:08:33.140
&gt;&gt; Speaker 2: Yes.

212
00:08:33.140 --> 00:08:35.540
&gt;&gt; Kyle: Yes,
we're going to get his value and it is.

213
00:08:38.860 --> 00:08:40.240
&gt;&gt; Speaker 2: bar.
&gt;&gt; Kyle: I heard multiple answers.

214
00:08:43.210 --> 00:08:45.085
Who thinks of something other than var?

215
00:08:47.181 --> 00:08:48.480
&gt;&gt; Kyle: Okay?
It's gonna be bar.

216
00:08:48.480 --> 00:08:49.890
Why is it not baz or bam?

217
00:08:52.470 --> 00:08:53.430
&gt;&gt; Kyle: Those are different marbles.

218
00:08:53.430 --> 00:08:57.350
Even though they have the same name,
we found those in different buckets.

219
00:08:57.350 --> 00:09:00.820
Remember how that look up was
essentially first come, first serve.

220
00:09:00.820 --> 00:09:03.430
We asked the very first
scope that we could find.

221
00:09:03.430 --> 00:09:06.110
So when we were on line
four we didn't care about

222
00:09:06.110 --> 00:09:08.240
the marble in the bucket on line one.

223
00:09:09.260 --> 00:09:10.590
Because we already had a matching one.

224
00:09:10.590 --> 00:09:14.780
It is first come first serve
in terms of that blue bucket.

225
00:09:16.800 --> 00:09:19.850
So foo has the value "baz".

226
00:09:19.850 --> 00:09:21.470
What about line 15?

227
00:09:21.470 --> 00:09:22.500
What does it execute?

228
00:09:25.240 --> 00:09:27.400
A global scope, we have RHS for?

229
00:09:27.400 --> 00:09:28.130
&gt;&gt; Speaker 2: Bam.

230
00:09:28.130 --> 00:09:30.130
&gt;&gt; Kyle: Bam, never heard of him,
the answer is?

231
00:09:30.130 --> 00:09:30.950
&gt;&gt; Speaker 2: Yes.

232
00:09:30.950 --> 00:09:32.050
&gt;&gt; Kyle: Well now we have.

233
00:09:33.390 --> 00:09:37.050
Had line 15 been on line 12,
we wouldn't have heard of him, right?

234
00:09:37.050 --> 00:09:40.730
But because it's happened after
bar was called, we now have a bam.

235
00:09:40.730 --> 00:09:43.330
We go ask for the value of bam,
and what is it?

236
00:09:43.330 --> 00:09:44.060
Yay.
&gt;&gt; Speaker 2: Yay.

237
00:09:44.060 --> 00:09:45.430
&gt;&gt; Speaker 4: Undefined.

238
00:09:45.430 --> 00:09:48.210
&gt;&gt; Kyle: No no no.
You have to say it in the most ironic tone

239
00:09:48.210 --> 00:09:49.000
possible.

240
00:09:49.000 --> 00:09:49.500
Yay.

241
00:09:50.780 --> 00:09:52.155
The value of bam is yay.

242
00:09:52.155 --> 00:09:57.170
'Cuz this is a terrible thing to
have a global variable with that

243
00:09:57.170 --> 00:09:57.980
value in it, right?

244
00:09:59.660 --> 00:10:00.420
All right, line 16.

245
00:10:00.420 --> 00:10:01.804
How does line 16 execute?

246
00:10:01.804 --> 00:10:08.025
[CROSSTALK] [INAUDIBLE] I have
a [CROSSTALK] HRS for baz.

247
00:10:08.025 --> 00:10:09.513
Ever heard of it and

248
00:10:09.513 --> 00:10:14.538
the answer is [CROSSTALK] Have we
heard of baz in the global scope?

249
00:10:14.538 --> 00:10:15.786
&gt;&gt; Speaker 2: No.

250
00:10:15.786 --> 00:10:18.330
&gt;&gt; Kyle: What scope,
what bucket was this one in?

251
00:10:18.330 --> 00:10:20.770
R, It was in the blue bucket right?

252
00:10:20.770 --> 00:10:24.470
So when we are asking, only the global
bucket, Only the red bucket.

253
00:10:24.470 --> 00:10:25.410
We never heard of a bam.

254
00:10:25.410 --> 00:10:26.850
So what do you think.

255
00:10:26.850 --> 00:10:30.056
You think its just gonna go out and
create one for us?

256
00:10:30.056 --> 00:10:33.210
&gt;&gt; Speaker 2: no
&gt;&gt; Kyle: no it gonna throw [INAUDIBLE].

257
00:10:33.210 --> 00:10:37.770
So this is the difference
between [INAUDIBLE] which

258
00:10:37.770 --> 00:10:41.890
is the whole reason I had you understand
the difference between the two.

259
00:10:41.890 --> 00:10:47.330
Because unfulfilled LHS references like
line 8, created an implicit global.

260
00:10:48.400 --> 00:10:54.509
Unfulfilled RHS reference like line 16,
always create a reference center.

261
00:10:56.610 --> 00:10:57.349
Okay?

262
00:11:01.185 --> 00:11:05.059
&gt;&gt; Kyle: In a sense once you learned
strict mode, you don't have to pay any

263
00:11:05.059 --> 00:11:10.131
attention cuz they both created reference
error but when you're not in strict mode,

264
00:11:10.131 --> 00:11:13.881
the difference depends on what
context it was in, make sense?

265
00:11:17.603 --> 00:11:22.620
&gt;&gt; Kyle: Just one final time to reiterate
here an unfulfilled LHS reference,

266
00:11:22.620 --> 00:11:27.722
that is a variable that is referenced
on the left hand side as the target

267
00:11:27.722 --> 00:11:33.343
of an assignment but has never been
formally declared anymore An unfulfilled

268
00:11:33.343 --> 00:11:38.550
lhs reference in no strip mode results
in an implicit global variable.

269
00:11:40.200 --> 00:11:44.940
An unfulfilled rhs reference,
that is, a reference,

270
00:11:44.940 --> 00:11:49.440
a variable in the right hand side
position, the source value position

271
00:11:49.440 --> 00:11:52.590
that has never been formally declared
in any scope that we have access to.

272
00:11:52.590 --> 00:11:57.210
An unfulfilled rhs reference Always
results in a reference error.

273
00:11:57.210 --> 00:11:59.970
Reference error baz is not defined.

274
00:11:59.970 --> 00:12:03.830
And the difference between undefined and
undeclared is what?

275
00:12:06.664 --> 00:12:11.283
&gt;&gt; Speaker 2: Undefined is clear but
doesn't have a.

276
00:12:11.283 --> 00:12:11.784
&gt;&gt; Kyle: And.

277
00:12:11.784 --> 00:12:15.719
&gt;&gt; Speaker 2: And not defined is not-
&gt;&gt; Kyle: Undeclared is

278
00:12:17.710 --> 00:12:20.180
Never formally declared in
any scope we have access to.

279
00:12:20.180 --> 00:12:22.520
Let me say that one last time,

280
00:12:22.520 --> 00:12:26.790
undefined definitely been declared
just at the moment has no value.

281
00:12:26.790 --> 00:12:30.080
And by the way a lot of people like
to think it doesn't have a value yet.

282
00:12:30.080 --> 00:12:32.130
That's what they'll say,
it doesn't have a value yet.

283
00:12:32.130 --> 00:12:34.080
If you just say bar foo semicolon, right.

284
00:12:35.190 --> 00:12:37.930
Well, it turns out a variable
can have a value and

285
00:12:37.930 --> 00:12:39.370
then you can take the value away.

286
00:12:41.040 --> 00:12:43.490
You can assign the undefined
value to a variable,

287
00:12:43.490 --> 00:12:47.700
which has the effect of getting rid
of any other value that it had.

288
00:12:47.700 --> 00:12:51.840
So the most appropriate thing
is an undefined variable

289
00:12:51.840 --> 00:12:54.459
is a variable that does not
currently have any other value.

290
00:12:55.880 --> 00:12:57.540
That's the way to say it.

291
00:12:57.540 --> 00:12:59.906
A variable that does not
currently have any other variable.

292
00:12:59.906 --> 00:13:01.932
Any other value.

293
00:13:07.054 --> 00:13:10.978
&gt;&gt; Kyle: I like to think of
this lexical scope like this.

294
00:13:10.978 --> 00:13:15.040
This is the metaphor and
this is how we'll wrap For

295
00:13:15.040 --> 00:13:19.530
now, we like to think of this as
sort of like a lookup process kinda

296
00:13:19.530 --> 00:13:22.560
like if you were looking for
somebody's office in a building and

297
00:13:22.560 --> 00:13:27.240
he said hey I need you to come
to my office and just find me.

298
00:13:27.240 --> 00:13:29.000
So you'd start in the first floor and

299
00:13:29.000 --> 00:13:32.220
you'd say do I have that
office on this floor?

300
00:13:33.400 --> 00:13:36.656
The first four represents the current
scope, if you don't find it,

301
00:13:36.656 --> 00:13:37.620
you go up one level.

302
00:13:37.620 --> 00:13:39.530
And then you go up and
you go up and you go up and

303
00:13:39.530 --> 00:13:42.695
you either find it at some point or
you get to the very top of the building.

304
00:13:42.695 --> 00:13:47.060
The top floor, and you either find it or
not, but there's nowhere else to go.

305
00:13:49.110 --> 00:13:54.046
So it helps me to think of it as
the Elevators or stairs in a building,

306
00:13:54.046 --> 00:13:56.572
think about that process, okay.

307
00:13:59.577 --> 00:14:07.830
&gt;&gt; Kyle: So that's nested Lexical Scopes,
we're gonna take our break here for today.

308
00:14:07.830 --> 00:14:10.990
We're gonna meet back tomorrow
morning sharp at 9:30 and

309
00:14:10.990 --> 00:14:13.470
we'll pick up continuing
with Lexical Scopes.

310
00:14:13.470 --> 00:14:14.430
Thanks and have a great night.

