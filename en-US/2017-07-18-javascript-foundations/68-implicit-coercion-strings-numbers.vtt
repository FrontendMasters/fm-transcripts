WEBVTT

1
00:00:00.250 --> 00:00:03.980
&gt;&gt; Kyle Simpson: Okay, so
explicit coercion happens obviously.

2
00:00:03.980 --> 00:00:07.270
Implicit coercion then is something
that happens as a side effect

3
00:00:07.270 --> 00:00:09.310
of some other operation.

4
00:00:09.310 --> 00:00:10.860
Kind of the opposite of explicit, right?

5
00:00:12.420 --> 00:00:15.470
Now, as I said earlier,

6
00:00:15.470 --> 00:00:19.410
the temptation is to think that anything
that's happening as a side effect

7
00:00:19.410 --> 00:00:23.780
automatically should be labeled as
something that's like lesser desired,

8
00:00:23.780 --> 00:00:27.190
maybe it's a bug, maybe it's a poorly
designed system, you shouldn't pick it.

9
00:00:28.860 --> 00:00:30.111
That is too myopic of a view,

10
00:00:30.111 --> 00:00:33.830
because there's a whole bunch of stuff
that we do in programming that's implicit.

11
00:00:33.830 --> 00:00:37.190
It is not the case that
all implicitness is bad.

12
00:00:37.190 --> 00:00:42.940
As a matter of fact, when we talk about
choosing declarative coding style versus

13
00:00:42.940 --> 00:00:46.700
imperative coding style, you might not
have ever stopped to think about this but

14
00:00:46.700 --> 00:00:52.420
declarative coding style is actually
a coding style that exalts implicitness.

15
00:00:53.460 --> 00:00:55.040
When you do something declarative,

16
00:00:55.040 --> 00:00:59.379
you're saying, I don't care how it works,
make it happen underneath the covers.

17
00:01:00.600 --> 00:01:04.830
You're telling the engine do that work for
me, I'm not gonna be explicit about it.

18
00:01:04.830 --> 00:01:08.450
I'm just telling you the end
result is that I want this.

19
00:01:08.450 --> 00:01:09.380
You go figure it out.

20
00:01:10.560 --> 00:01:14.650
So actually, implicitness is not a thing
to be feared or to be avoided, but

21
00:01:14.650 --> 00:01:16.520
something to be embraced.

22
00:01:16.520 --> 00:01:17.860
But it has to be used responsibly.

23
00:01:19.070 --> 00:01:23.240
How many of you have ever heard this
quote before, from Arthur C Clarke,

24
00:01:23.240 --> 00:01:26.140
any sufficiently advanced technology
is indistinguishable from magic?

25
00:01:27.180 --> 00:01:30.020
Arthur C Clarke,
famous science fiction author.

26
00:01:30.020 --> 00:01:33.350
This was the third of Clarke's three laws.

27
00:01:35.210 --> 00:01:38.700
Any sufficiently advanced technology
is indistinguishable from magic.

28
00:01:38.700 --> 00:01:43.750
Often quoted, often misrepresented for
what he actually meant.

29
00:01:44.840 --> 00:01:47.760
But, in that grand tradition
of misrepresenting things,

30
00:01:47.760 --> 00:01:49.340
I'm gonna paraphrase or

31
00:01:49.340 --> 00:01:53.250
tweak this a little bit to make it
apply more to what we're talking about.

32
00:01:53.250 --> 00:01:56.590
Cuz I think many developers,
especially on a topic like coercion,

33
00:01:56.590 --> 00:02:00.030
would think to themselves, any
sufficiently complex technology, or rather

34
00:02:00.030 --> 00:02:03.950
any sufficiently confusing technology,
is indistinguishable from magic.

35
00:02:05.420 --> 00:02:07.270
Is that not true?

36
00:02:07.270 --> 00:02:12.360
Isn't that true that if something is
confusing, if you don't understand it,

37
00:02:12.360 --> 00:02:16.650
it's no different than
a black box of magic, right?

38
00:02:16.650 --> 00:02:19.406
I don't know how it works but
it sure seems to do the job.

39
00:02:22.760 --> 00:02:24.220
&gt;&gt; Kyle Simpson: Let me
paraphrase it this way.

40
00:02:25.480 --> 00:02:29.539
Any sufficiently unlearned technology
is indistinguishable from magic.

41
00:02:31.810 --> 00:02:33.030
Can coercion be learned?

42
00:02:33.030 --> 00:02:33.900
Absolutely.

43
00:02:33.900 --> 00:02:34.510
I'm living proof.

44
00:02:34.510 --> 00:02:36.510
You can learn it.

45
00:02:36.510 --> 00:02:39.080
Anybody can learn how coercion works, and

46
00:02:39.080 --> 00:02:43.480
if you can learn how coercion works then
you can learn what works and what doesn't.

47
00:02:43.480 --> 00:02:46.955
So set aside some of those
presuppositions that you

48
00:02:46.955 --> 00:02:48.799
may have that implicit
mechanisms are evil.

49
00:02:50.220 --> 00:02:54.130
Let's try to learn how implicit
coercion actually works, and

50
00:02:54.130 --> 00:02:56.030
maybe discover some places
where it's helpful.

51
00:02:57.770 --> 00:03:01.030
Here are some examples of going from
string to number and number to string, but

52
00:03:01.030 --> 00:03:04.726
now I'm doing it implicitly
as opposed to explicitly.

53
00:03:04.726 --> 00:03:08.020
I start out with the string
"123" on line 1, and on line 2,

54
00:03:08.020 --> 00:03:10.720
I do something rather strange,
I subtract 0 from it.

55
00:03:12.400 --> 00:03:14.670
And I end up with the number,
123, in line 3.

56
00:03:14.670 --> 00:03:15.230
What's going on there?

57
00:03:16.380 --> 00:03:20.500
The minus operator is specifically
designed to only do math.

58
00:03:21.790 --> 00:03:22.910
We talked about this before.

59
00:03:22.910 --> 00:03:25.270
If you give it something that's not
already a number, what's it gonna do?

60
00:03:25.270 --> 00:03:28.520
It's gonna call the two-number
abstract operation and

61
00:03:28.520 --> 00:03:30.000
produce the number equivalent.

62
00:03:30.000 --> 00:03:34.700
So that string, 123, as a side-effect of
line 2, is gonna get coerced to a number.

63
00:03:34.700 --> 00:03:37.530
And then we subtract 0 from it,
which is basically a no op.

64
00:03:38.590 --> 00:03:42.960
So we have the side effect result
of producing the numeric coercion

65
00:03:42.960 --> 00:03:45.750
from "123" to number 123.

66
00:03:45.750 --> 00:03:50.110
Now, there's a pretty good chance, cuz I
already see it in some of your faces and

67
00:03:50.110 --> 00:03:53.920
I'll bet those of you listening online
would agree, there's a pretty good chance

68
00:03:53.920 --> 00:03:57.810
that you're like, ugh,
we'll never do it that right, right?

69
00:03:57.810 --> 00:04:01.330
Sure it works but I feel as yucky, right?

70
00:04:01.330 --> 00:04:02.810
That's a technical term by the way, yucky.

71
00:04:05.200 --> 00:04:06.020
That's not good.

72
00:04:06.020 --> 00:04:07.542
I want you to hold on to that feeling,

73
00:04:07.542 --> 00:04:09.800
we're gonna come back to that
in just a couple minutes, right?

74
00:04:09.800 --> 00:04:10.394
Just hold on to that.

75
00:04:10.394 --> 00:04:14.200
So -0, similarly,

76
00:04:14.200 --> 00:04:19.750
if we did divide by 1 or
multiply by 1, same end result.

77
00:04:19.750 --> 00:04:23.440
If we do a mathematic operation,
then it would be a no-op.

78
00:04:23.440 --> 00:04:26.060
The side effect is that
a coercion is going to occur.

79
00:04:26.060 --> 00:04:28.380
Even subtracting string 0 is interesting.

80
00:04:28.380 --> 00:04:30.980
Because as strange as line 5 looks,

81
00:04:30.980 --> 00:04:34.600
the same end result happens because
both of them get coerced to numbers.

82
00:04:34.600 --> 00:04:36.200
As a matter of fact,

83
00:04:36.200 --> 00:04:40.305
subtracting empty string would also work
because the empty string would become 0.

84
00:04:40.305 --> 00:04:43.420
[NOISE] Right?

85
00:04:43.420 --> 00:04:46.560
So all of those are examples of
implicitly doing it with math.

86
00:04:46.560 --> 00:04:48.360
Let's go the other direction.

87
00:04:48.360 --> 00:04:49.560
Start out with the number 456.

88
00:04:49.560 --> 00:04:51.390
We wanna produce the string equivalent.

89
00:04:52.660 --> 00:04:58.520
We take the plus operator and
we can cut or we add the empty string.

90
00:04:58.520 --> 00:05:00.800
How many of you have done
code like line 12 before,

91
00:05:00.800 --> 00:05:03.480
at least seen it in code bases before,
okay?

92
00:05:03.480 --> 00:05:05.320
It's in virtually every
code base ever written.

93
00:05:07.300 --> 00:05:08.980
Now what is that code doing?

94
00:05:08.980 --> 00:05:11.712
Well, there's two things at play.

95
00:05:11.712 --> 00:05:15.040
First, the plus operator is overloaded.

96
00:05:15.040 --> 00:05:19.100
I already exposed earlier that I think
overloaded mechanisms are generally

97
00:05:19.100 --> 00:05:23.170
not a great design idea,
overloaded operators is a perfect example.

98
00:05:23.170 --> 00:05:25.190
I'm not a fan.

99
00:05:25.190 --> 00:05:28.450
This is an overloaded operator,
some people love that idea.

100
00:05:28.450 --> 00:05:33.150
This operator says, if either one of my

101
00:05:33.150 --> 00:05:38.910
operands is already a string,
prefer string concatenation.

102
00:05:38.910 --> 00:05:40.470
Otherwise, do numeric addition.

103
00:05:42.260 --> 00:05:46.730
So if one or both of them are already
a string, prefer concatenation.

104
00:05:46.730 --> 00:05:50.509
If they're not strings,
assume we're doing numeric addition.

105
00:05:51.680 --> 00:05:56.430
Since we are ensuring that one of them is
a string, we are going to create the side

106
00:05:56.430 --> 00:05:58.740
effect that the other one
will get coerced to a string.

107
00:05:58.740 --> 00:06:01.070
So baz is gonna get coerced to a string.

108
00:06:01.070 --> 00:06:03.040
So if you're doing the math here, quote,

109
00:06:03.040 --> 00:06:07.510
unquote, there's actually two implicit
systems involved in that statement.

110
00:06:07.510 --> 00:06:10.516
First, the operator overloading, secondly,

111
00:06:10.516 --> 00:06:13.897
the implicit coercion that
occurs as we concatenate.

112
00:06:16.349 --> 00:06:19.778
&gt;&gt; Kyle Simpson: Doubly implicit, okay?

113
00:06:19.778 --> 00:06:23.730
Now, there's a really good chance
that right now line 12 feels totally

114
00:06:23.730 --> 00:06:25.510
natural to you.

115
00:06:25.510 --> 00:06:27.280
Very enigmatic tool.

116
00:06:27.280 --> 00:06:29.370
Many of you have probably already done it.

117
00:06:29.370 --> 00:06:31.620
And you would defend
the usage of that mechanism.

118
00:06:31.620 --> 00:06:34.450
As a matter of fact, none other than
the creator of the language himself,

119
00:06:34.450 --> 00:06:38.390
Brendan Eich,
has gone on record as saying,

120
00:06:38.390 --> 00:06:43.820
if you wanna coerce something to a string,
the right way to do it, the right way.

121
00:06:43.820 --> 00:06:47.370
He literally said, the right way to do
it is to add the empty string to it,

122
00:06:47.370 --> 00:06:49.260
concatenate the empty string to it.

123
00:06:49.260 --> 00:06:53.580
So he has endorsed line 12 as
the appropriate, correct way to do so.

124
00:06:53.580 --> 00:06:58.250
That's the same guy who says most of what
I did with implicit coercion is bad.

125
00:07:00.860 --> 00:07:03.460
But yet he endorses line 12.

126
00:07:03.460 --> 00:07:06.280
So which is it?

127
00:07:06.280 --> 00:07:07.980
Is implicit coercion good, or is it bad?

128
00:07:10.140 --> 00:07:14.340
And if you like line 12,
then why don't you like line 2?

129
00:07:16.316 --> 00:07:19.064
&gt;&gt; Kyle Simpson: Because line
12 is more implicit than line 2.

130
00:07:21.660 --> 00:07:25.723
&gt;&gt; Kyle Simpson: If line 2 feels yucky
then why does line 12 feel so natural?

131
00:07:29.369 --> 00:07:33.052
&gt;&gt; Kyle Simpson: The point that I'm
trying to get at here, cuz in both cases,

132
00:07:33.052 --> 00:07:37.821
we have a literal that is of the type
we're intending, so they're both giving

133
00:07:37.821 --> 00:07:42.120
the same amount of semantic clue of
what the end result is gonna be.

134
00:07:42.120 --> 00:07:45.800
On line 2, the end result's gonna be
a number because we have a zero there.

135
00:07:45.800 --> 00:07:49.530
On line 12, the end result's gonna be a
string cuz we have an empty string there.

136
00:07:49.530 --> 00:07:53.370
We're giving the same amount of semantic
and syntactic clue as to the end result.

137
00:07:54.880 --> 00:07:58.510
The only reason why 12 feels more natural
just cuz people have done it a bunch.

138
00:08:00.350 --> 00:08:03.160
There's nothing in essence that

139
00:08:03.160 --> 00:08:05.540
is more appropriate about
that line versus line two.

140
00:08:06.670 --> 00:08:10.730
And the takeaway that I wanna get you to
here is that all of the decisions that you

141
00:08:10.730 --> 00:08:14.240
make, all of the decisions that you
make on this topic, are subjective.

142
00:08:15.740 --> 00:08:18.680
Now I'm not here to tell you
what your decision should be.

143
00:08:18.680 --> 00:08:22.580
I just want you to stop pretending that
this is a scientific coercion is evil and

144
00:08:22.580 --> 00:08:26.530
buggy and bad and should always be
because I just read it in a book, okay?

145
00:08:27.710 --> 00:08:30.050
There's critical thinking to be done here.

146
00:08:30.050 --> 00:08:35.250
You're engineers, and I trust that you
can think critically for yourselves.

147
00:08:35.250 --> 00:08:38.870
And moreover, that your team can
think critically for yourselves and

148
00:08:38.870 --> 00:08:41.970
decide which one is the appropriate
way for us to do this and

149
00:08:41.970 --> 00:08:45.830
make those decisions and
then stick consistently to them, okay?

150
00:08:47.530 --> 00:08:52.310
What we like about line 12 is
that line 12 is less verbose.

151
00:08:53.720 --> 00:08:57.610
We like line 12, and in fact many people
would say line 12 is better than what I

152
00:08:57.610 --> 00:09:00.360
showed you earlier with the usage
of the string function.

153
00:09:00.360 --> 00:09:05.250
So wait a minute, why is it that
in this case, implicit is okay but

154
00:09:05.250 --> 00:09:07.380
in other cases, we say, no, no,
no, I want it to be explicit?

155
00:09:09.410 --> 00:09:10.500
This one is not explicit.

156
00:09:10.500 --> 00:09:15.180
It's only explicit because you're familiar
with it, but it's not actually explicit.

157
00:09:16.960 --> 00:09:23.058
The reason is that implicit mechanisms
often times hide unimportant details.

158
00:09:27.461 --> 00:09:30.995
&gt;&gt; Kyle Simpson: The most readable code,
here's another one of those [INAUDIBLE]

159
00:09:30.995 --> 00:09:34.932
laws, the most readable code is
the code that doesn't have to be read.

160
00:09:36.789 --> 00:09:39.250
&gt;&gt; Kyle Simpson: I know that sounds
ridiculous because people have said

161
00:09:39.250 --> 00:09:43.480
things, like, well, the best code is
code that doesn't have to be written.

162
00:09:43.480 --> 00:09:45.270
That's a complete nonsense statement,
right?

163
00:09:46.360 --> 00:09:50.180
The best code is code that doesn't have
to be written, that's a complete paradox.

164
00:09:50.180 --> 00:09:51.810
I'm saying something different.

165
00:09:51.810 --> 00:09:56.270
The best, most readable code is
code that doesn't have to be read,

166
00:09:56.270 --> 00:09:58.470
not that code can't be
read cuz it doesn't exist.

167
00:09:58.470 --> 00:10:00.140
It's code that doesn't have to be read.

168
00:10:00.140 --> 00:10:01.200
And why?

169
00:10:01.200 --> 00:10:02.916
Because it's instantly recognizable.

170
00:10:02.916 --> 00:10:05.553
It's familiar.

171
00:10:05.553 --> 00:10:09.830
And, it only deals with the topic
that we care about at that point.

172
00:10:09.830 --> 00:10:12.410
It doesn't have any unnecessary noise.

173
00:10:12.410 --> 00:10:15.200
The best,
most readable code is the code that hides

174
00:10:15.200 --> 00:10:17.400
any stuff that I don't
need to read right now.

175
00:10:17.400 --> 00:10:21.130
Cuz I only have a finite number of neurons
that I can devote to understanding what

176
00:10:21.130 --> 00:10:23.640
I'm reading in front of me, and
I'm not particularly good at it anyway.

177
00:10:23.640 --> 00:10:28.410
And if I can hide all that other stuff
that would be inclined to distract and

178
00:10:28.410 --> 00:10:30.820
confuse me, it's gonna be more readable.

179
00:10:32.350 --> 00:10:35.710
Implicit is good in the same
way that declarative is good.

180
00:10:36.770 --> 00:10:39.660
They're isomorphic of
each other basically.

181
00:10:39.660 --> 00:10:44.200
It's good in both cases because
what they do is focus on

182
00:10:44.200 --> 00:10:47.640
the end result and
focus less on the how to get there.

183
00:10:48.700 --> 00:10:50.210
They let the engine figure that part off.

184
00:10:51.540 --> 00:10:55.310
Declarative is all about the what,
imperative is all about the how.

185
00:10:56.820 --> 00:11:01.810
Here, implicit is all about the what,
I just want a string, man,

186
00:11:01.810 --> 00:11:02.630
just give me a string.

187
00:11:03.970 --> 00:11:10.480
Implicit is all about the what and
Explicit is all about the how.

188
00:11:10.480 --> 00:11:12.899
Specifically, I'm gonna tell you,
do it with this operation.

189
00:11:15.380 --> 00:11:17.690
So maybe there's some gray area here.

190
00:11:17.690 --> 00:11:20.750
Maybe there's sometimes where
implicit is really important to us.

191
00:11:20.750 --> 00:11:23.680
When used appropriately, maybe we can
actually make our code more readable.

192
00:11:25.300 --> 00:11:27.970
You can only do that if you
actually understand the system.

193
00:11:29.290 --> 00:11:32.665
So some of you may be
wondering at this point, well,

194
00:11:32.665 --> 00:11:36.170
shouldn't I just boil it down to
the lowest common denominator?

195
00:11:36.170 --> 00:11:39.744
Cuz even though I'm here taking this
class, other people on my team,

196
00:11:39.744 --> 00:11:41.260
they're not gonna know it.

197
00:11:41.260 --> 00:11:44.030
Shouldn't I just use systems
that can't trip anybody up?

198
00:11:45.150 --> 00:11:47.120
Take into its logical extreme,

199
00:11:47.120 --> 00:11:50.060
that basically means that
you think I am suggesting,

200
00:11:50.060 --> 00:11:53.910
nobody should ever have to learn
anything to be able to understand code.

201
00:11:53.910 --> 00:11:54.890
That is not what I'm saying.

202
00:11:56.170 --> 00:11:58.000
Familiarity is good.

203
00:11:58.000 --> 00:12:02.050
Codifying idioms and
having consistency, good things.

204
00:12:02.050 --> 00:12:06.130
But that does not mean that every member
of your team should only read a code base

205
00:12:06.130 --> 00:12:11.260
that's been dumbed down to the most
inexperienced of the members of the team.

206
00:12:11.260 --> 00:12:14.440
What it mean is that everybody
on your team should going upward

207
00:12:14.440 --> 00:12:16.120
in terms of their learning.

208
00:12:16.120 --> 00:12:19.360
Or let me go this way for you, it should
be going upward in terms of your learning.

209
00:12:21.260 --> 00:12:22.650
So the downward, okay?

210
00:12:24.250 --> 00:12:26.620
I don't care where you're at in
your knowledge of JavaScript.

211
00:12:26.620 --> 00:12:27.380
That doesn't concern me.

212
00:12:27.380 --> 00:12:29.340
You know what concerns me, your direction.

213
00:12:31.250 --> 00:12:33.540
Wherever you're at,
as long as you're learning something,

214
00:12:33.540 --> 00:12:39.480
you can do a lot in the culture of
your teams to improve this situation.

215
00:12:39.480 --> 00:12:44.085
You can use code review not as
a way to insult and gait people but

216
00:12:44.085 --> 00:12:46.190
rather as a way to empower people.

217
00:12:47.800 --> 00:12:50.880
Many people are scared of code
review because the culture of their

218
00:12:50.880 --> 00:12:55.410
company is broken such that people
are afraid that they are gonna

219
00:12:55.410 --> 00:12:58.880
lose out on a promotion because
they had a bad code review.

220
00:12:58.880 --> 00:13:01.680
That is a broken culture,
that's not a code problem.

221
00:13:01.680 --> 00:13:03.290
That's a culture problem.

222
00:13:03.290 --> 00:13:06.100
And you're in control of
fixing those kinds of things.

223
00:13:06.100 --> 00:13:09.000
You can go to your bosses and your
decision makers, or your companies and

224
00:13:09.000 --> 00:13:12.470
say, code review is a vital part
of making sure that we all learn.

225
00:13:13.850 --> 00:13:14.880
You should be begging for

226
00:13:14.880 --> 00:13:18.830
the opportunity to sit with other people,
show them something a little bit more so

227
00:13:18.830 --> 00:13:22.250
they learn, and then sit with somebody who
can show you something so that you learn.

228
00:13:23.460 --> 00:13:26.020
Cuz I have news for you,
that's how humans have learned for

229
00:13:26.020 --> 00:13:27.710
tens of thousands of years.

230
00:13:27.710 --> 00:13:31.050
We don't learn by reading books,
we don't learn by sitting in classrooms.

231
00:13:31.050 --> 00:13:32.370
You know how we learn?

232
00:13:32.370 --> 00:13:35.350
By working with other people,
it's the relationships that matter.

233
00:13:36.360 --> 00:13:38.780
You should look for
every opportunity to do that.

234
00:13:38.780 --> 00:13:41.790
So in your code bases, don't look for,
well, how do I make it so

235
00:13:41.790 --> 00:13:43.550
simple that nobody could ever be confused?

236
00:13:43.550 --> 00:13:44.800
That isn't the goal.

237
00:13:44.800 --> 00:13:48.170
The goal is, make it so
that it appropriately communicates.

238
00:13:48.170 --> 00:13:51.330
And anybody that's not at that level,
help them get to that level.

239
00:13:51.330 --> 00:13:53.761
Does that make sense?

240
00:13:55.836 --> 00:13:58.405
&gt;&gt; Kyle Simpson: So a coercion is
something that can be learned, and

241
00:13:58.405 --> 00:14:00.210
I'm arguing, should be learned.

