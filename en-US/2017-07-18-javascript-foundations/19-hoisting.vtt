WEBVTT

1
00:00:00.400 --> 00:00:02.180
&gt;&gt; Kyle Simpson: I asked at
the beginning of the course

2
00:00:02.180 --> 00:00:03.630
how many of you have heard
of the term hoisting.

3
00:00:03.630 --> 00:00:06.170
Many of you raised your hand,
we've all heard this term.

4
00:00:06.170 --> 00:00:10.590
In fact, members of TC39
site hoisting as an actual,

5
00:00:10.590 --> 00:00:14.410
real thing that happens in JavaScript.

6
00:00:14.410 --> 00:00:17.830
It's a nice good shortcut but
it's actually a made up metaphor.

7
00:00:17.830 --> 00:00:19.310
It doesn't really exist.

8
00:00:19.310 --> 00:00:24.280
So I want to explain how the metaphor
works, and how then you can make that

9
00:00:24.280 --> 00:00:28.860
connection mentally to what we now
know of how JavaScript really works,

10
00:00:28.860 --> 00:00:32.700
which is the lexical scoping
enforced by the compiler, okay?

11
00:00:32.700 --> 00:00:37.330
So, hoisting, if I looked at this piece
of code and I hadn't taught you anything,

12
00:00:37.330 --> 00:00:40.910
and then I asked you,
what is gonna happen with line 1?

13
00:00:40.910 --> 00:00:42.830
Typically, I'll get
different kinds of answers.

14
00:00:42.830 --> 00:00:46.290
Some people will say, well I'm gonna
get an error cuz A doesn't exist.

15
00:00:46.290 --> 00:00:49.370
Other people are gonna say well
A exist but it's gonna be undefined.

16
00:00:49.370 --> 00:00:53.450
And still a third class of folks
would say A is gonna be the value 2,

17
00:00:53.450 --> 00:00:56.340
cuz they're sort of thinking it runs
like all the way through it and

18
00:00:56.340 --> 00:00:58.780
then hoist the value up or something.

19
00:00:58.780 --> 00:01:01.330
Only one of those can
be the correct answer.

20
00:01:01.330 --> 00:01:02.680
Let's be clear.

21
00:01:02.680 --> 00:01:03.360
So which is it?

22
00:01:03.360 --> 00:01:05.670
Which is the correct answer?

23
00:01:05.670 --> 00:01:09.340
Given what we now know about how
the compiler works, we can say definitely

24
00:01:09.340 --> 00:01:14.480
there will be an A because it would have
found the var A on line 3 at compile time.

25
00:01:14.480 --> 00:01:18.530
Registered it to the scope and then when
we tried to access it on line one there

26
00:01:18.530 --> 00:01:23.510
is a variable but at that moment it has
no value so it has the undefined value.

27
00:01:23.510 --> 00:01:27.449
That's a very simple explanation but it
requires you to think about the two paths,

28
00:01:27.449 --> 00:01:30.670
and sometimes people don't like to
talk about the two paths thing.

29
00:01:30.670 --> 00:01:35.134
So we came up with a shorthand for
describing how this really works.

30
00:01:35.134 --> 00:01:39.310
The shorthand is to say that we took the
variable declarations, only the variable

31
00:01:39.310 --> 00:01:42.770
declarations, not the assignments, and
moved them to the top of the scope.

32
00:01:44.180 --> 00:01:49.155
As if JavaScript could somehow magically
look ahead, find all the declarations, and

33
00:01:49.155 --> 00:01:53.490
re-order the code to move them to the top
and then execute starting with line one.

34
00:01:55.030 --> 00:01:57.750
Looked at this way, you could see
very clearly how we could come to

35
00:01:57.750 --> 00:02:00.280
the conclusion of what
happens with line 3.

36
00:02:00.280 --> 00:02:03.530
Surely there is a var
a because we saw it on line 1,

37
00:02:03.530 --> 00:02:06.620
but surely it has no value because
we haven't assigned it on line 5.

38
00:02:07.760 --> 00:02:11.310
So, it's a shorthand to
describe what we already know.

39
00:02:11.310 --> 00:02:14.611
Which is that variables belong
to their enclosing functions.

40
00:02:17.086 --> 00:02:21.486
&gt;&gt; Kyle Simpson: It is this point there's
idea of hoisting that people say well,

41
00:02:21.486 --> 00:02:23.650
that's not lexical skill.

42
00:02:23.650 --> 00:02:24.740
Yes it is.

43
00:02:24.740 --> 00:02:26.540
It's absolutely lexical scope.

44
00:02:26.540 --> 00:02:29.390
It just happens to be that we use
the function as the unit of scope in

45
00:02:29.390 --> 00:02:32.610
JavaScript as opposed to many
languages which only use the block.

46
00:02:34.010 --> 00:02:38.980
We're saying, this function gets this
variable, the scope gets this variable

47
00:02:38.980 --> 00:02:42.060
no matter where it was declared in there,
because it happens at compile time.

48
00:02:44.860 --> 00:02:48.060
So, it can be a nice convenient way of
describing it if you think about it.

49
00:02:48.060 --> 00:02:49.600
If you just sort of squint at it and

50
00:02:49.600 --> 00:02:53.605
say okay, I don't need to worry about the
fact that it's not actually possible for

51
00:02:53.605 --> 00:02:56.680
JavaScript to look ahead and
find things and reorder.

52
00:02:56.680 --> 00:02:57.780
That doesn't even make any sense.

53
00:02:57.780 --> 00:03:00.770
It would have to parse to
figure out what to move anyway.

54
00:03:00.770 --> 00:03:04.703
But even if that was not what was
happening, I mean it isn't what was

55
00:03:04.703 --> 00:03:09.188
happening, but even if it was what's
happening, it's a nice shorthand for

56
00:03:09.188 --> 00:03:13.059
us to describe what's really going
on with the two-pass system.

57
00:03:14.829 --> 00:03:17.506
&gt;&gt; Kyle Simpson: And it goes not only for
variable declarations, but also for

58
00:03:17.506 --> 00:03:18.672
function declarations.

59
00:03:18.672 --> 00:03:22.187
Heads up if you've been wondering why
should I use a function declaration over

60
00:03:22.187 --> 00:03:23.367
a function declaration.

61
00:03:23.367 --> 00:03:25.910
Here you're about to get
an answer to that question.

62
00:03:25.910 --> 00:03:30.190
Variable declarations and
function declarations are hoisted but

63
00:03:30.190 --> 00:03:34.780
assignments, logical, actually executable
code, that can't get reassigned.

64
00:03:34.780 --> 00:03:37.500
I mean that can't get relocated

65
00:03:37.500 --> 00:03:41.200
because the relocation could break
the whole logic of our code.

66
00:03:41.200 --> 00:03:44.220
So, we cannot reorder executable code.

67
00:03:44.220 --> 00:03:45.650
We can only reorder declarations.

68
00:03:45.650 --> 00:03:50.870
So, this code, properly thought of in the
hoisting metaphor, would look like that.

69
00:03:50.870 --> 00:03:55.680
We hoisted the function b,
then we hoisted the vars a, c, and d.

70
00:03:55.680 --> 00:03:59.800
But you'll notice that on line
11 we still have the execution

71
00:03:59.800 --> 00:04:02.560
of the assignment of that function
expression to a variable d.

72
00:04:03.580 --> 00:04:06.980
So in other words,
the function expression didn't hoist.

73
00:04:06.980 --> 00:04:09.190
Cuz it's executable code, it can't hoist.

74
00:04:09.190 --> 00:04:09.990
That would create havoc.

75
00:04:11.520 --> 00:04:16.510
So, we can use function b on line 7,

76
00:04:16.510 --> 00:04:20.940
but what would happen on line 8
when we try to use function d?

77
00:04:20.940 --> 00:04:21.440
&gt;&gt; Speaker 2: Undefined?

78
00:04:22.500 --> 00:04:25.810
&gt;&gt; Kyle Simpson: Well,
d would be undefined on line a.

79
00:04:25.810 --> 00:04:30.560
So if we try to execute an undefined
value, we're getting get a type error,

80
00:04:30.560 --> 00:04:31.880
you're not allow to execute undefined.

81
00:04:33.290 --> 00:04:34.270
So when you ask the question,

82
00:04:34.270 --> 00:04:37.570
why do you prefer a function
declaration over a function expression?

83
00:04:37.570 --> 00:04:42.700
One of my answers to that question is,
I prefer to have function hoisting so

84
00:04:42.700 --> 00:04:47.310
that I can declare a function at
the bottom and use it above, and

85
00:04:47.310 --> 00:04:48.610
know that's gonna be hoisted.

86
00:04:48.610 --> 00:04:50.185
I prefer that style of code.

87
00:04:53.646 --> 00:04:55.590
&gt;&gt; Kyle Simpson: How many of you
have ever heard of recursion before?

88
00:04:57.010 --> 00:04:59.190
Okay, how many you have
heard of mutual recursion?

89
00:05:00.670 --> 00:05:02.060
Mutual recursion is when two or

90
00:05:02.060 --> 00:05:05.970
more functions reference each
other in a recursive call stack.

91
00:05:05.970 --> 00:05:09.860
Here I've got three function,
a calls b, b calls c, c calls a.

92
00:05:11.630 --> 00:05:16.150
Thinking about mutual recursion,
which is a particular technique that is

93
00:05:16.150 --> 00:05:19.790
good at solving some particular
types of computing science problems.

94
00:05:19.790 --> 00:05:21.790
Mutual recursion is quite useful.

95
00:05:21.790 --> 00:05:24.590
But if we did not have
a notion of function hoisting,

96
00:05:24.590 --> 00:05:27.470
it would be impossible to express
a mutually recursive program.

97
00:05:28.670 --> 00:05:31.844
Because one of these functions
would always be declared too late.

98
00:05:33.954 --> 00:05:36.153
&gt;&gt; Kyle Simpson: We can move b
before a and c before b, but

99
00:05:36.153 --> 00:05:38.050
then a needs to move before.

100
00:05:38.050 --> 00:05:42.200
We're never gonna be able to
express these functions in

101
00:05:42.200 --> 00:05:44.970
the correct order because they have
a circular dependency on each other.

102
00:05:46.670 --> 00:05:48.460
Function hoisting allows us to do that.

103
00:05:48.460 --> 00:05:52.210
How many of you have written C
programming code before, anybody?

104
00:05:52.210 --> 00:05:54.650
Do you remember writing header files?

105
00:05:54.650 --> 00:05:56.700
What was the most common thing
you put into your header file?

106
00:05:57.850 --> 00:05:59.060
The function signature, right?

107
00:06:00.500 --> 00:06:02.910
Java stopped to wonder why
you needed to do that.

108
00:06:02.910 --> 00:06:08.910
The reason you had to do that is so
that the compiler, the GNU Compiler or

109
00:06:08.910 --> 00:06:12.750
whatever yours was using, so
that it knew what the functions were.

110
00:06:12.750 --> 00:06:16.390
You were essentially manually hoisting
with your head of filed operations.

111
00:06:17.530 --> 00:06:22.120
And JavaScript is automatically
hoisting these declarations for you.

112
00:06:22.120 --> 00:06:23.011
Yes?

113
00:06:23.011 --> 00:06:29.041
&gt;&gt; Speaker 3: Can you go back a little
bit into the hoisting again cuz I've

114
00:06:29.041 --> 00:06:36.170
been taught that always avoid function
declaration in favor of name.

115
00:06:36.170 --> 00:06:38.340
&gt;&gt; Kyle Simpson: There's a lot
of misinformation out there.

116
00:06:38.340 --> 00:06:41.170
&gt;&gt; Speaker 3: Right,
so I'm a little, okay.

117
00:06:41.170 --> 00:06:43.683
&gt;&gt; Kyle Simpson: Let me try
to illustrate it in this way.

118
00:06:47.986 --> 00:06:48.992
&gt;&gt; Kyle Simpson: Go over to my editor.

119
00:06:53.227 --> 00:06:59.040
&gt;&gt; Kyle Simpson: If I said, that program,
would we all agree that it's gonna work?

120
00:07:00.180 --> 00:07:03.040
Yes, cuz we're gonna find the var,
or it's gonna hoist,

121
00:07:03.040 --> 00:07:04.320
however you want to describe it.

122
00:07:04.320 --> 00:07:08.696
But would we agree that that's not
a particularly good style of code?

123
00:07:08.696 --> 00:07:10.422
It's kinda designed to sorta
be confusing to people, right?

124
00:07:10.422 --> 00:07:13.095
So because you can do that,

125
00:07:13.095 --> 00:07:19.034
people typically say hoisting is bad,
don't do hoisting.

126
00:07:19.034 --> 00:07:19.791
Okay?

127
00:07:19.791 --> 00:07:20.554
What about this program?

128
00:07:27.349 --> 00:07:28.638
&gt;&gt; Kyle Simpson: Is that
program gonna work?

129
00:07:31.496 --> 00:07:34.829
&gt;&gt; Kyle Simpson: Do we feel exactly
the same about that style as if we're

130
00:07:34.829 --> 00:07:40.330
saying that function needs to be written
earlier in the file before we use it?

131
00:07:40.330 --> 00:07:45.100
I certainly spent the first
15 to 16 years of my

132
00:07:45.100 --> 00:07:47.760
JavaScript writing as well
as in every other one.

133
00:07:47.760 --> 00:07:50.475
Writing all my code like that,
every file you opened up,

134
00:07:50.475 --> 00:07:54.280
I have all my functions at the top and I
have all my executable code at the bottom.

135
00:07:56.015 --> 00:08:00.385
And a few years back I got to thinking
man it's a lot more work for me to

136
00:08:00.385 --> 00:08:04.695
open up a file and scroll all the way to
the bottom looking for executable code.

137
00:08:04.695 --> 00:08:07.947
What if I just pull all of my
executable code at the top?

138
00:08:07.947 --> 00:08:10.245
It'd be a lot easier to find, right?

139
00:08:10.245 --> 00:08:13.575
And because functions hoist I don't
need to worry about that anymore.

140
00:08:13.575 --> 00:08:16.780
So I just go ahead and
put a little comment there,

141
00:08:16.780 --> 00:08:19.510
and draw myself a little visual line.

142
00:08:19.510 --> 00:08:22.670
And I know that all of my executable
code is gonna be above that line.

143
00:08:22.670 --> 00:08:24.930
And that's usually the stuff I care about.

144
00:08:24.930 --> 00:08:27.030
All the functions will be listed below.

145
00:08:27.030 --> 00:08:30.600
Doesn't matter what order they're listed
in, because they're all gonna get hoisted,

146
00:08:30.600 --> 00:08:31.770
and they're all usable.

147
00:08:33.530 --> 00:08:36.330
So I made the decision from
a code style perspective,

148
00:08:36.330 --> 00:08:39.650
function hoisting is
a really good useful thing.

149
00:08:39.650 --> 00:08:40.980
Variable hoisting not so much.

150
00:08:42.580 --> 00:08:45.580
Should we throw out all of hoisting,
should we say all of hoisting is bad?

151
00:08:45.580 --> 00:08:49.150
I think this example of usage of
hoisting is actually pretty good.

152
00:08:50.840 --> 00:08:53.602
Now, different people
have different styles.

153
00:08:53.602 --> 00:08:56.580
My recommendation is to
consider this approach.

154
00:08:56.580 --> 00:09:00.210
Because I have actually implemented
this now for the last several years, and

155
00:09:00.210 --> 00:09:03.740
I find my code to be a lot more
readable now that I do it this way.

156
00:09:03.740 --> 00:09:06.820
And by the way, I do it with every single
scope even if it's a function within

157
00:09:06.820 --> 00:09:11.080
a function, I put the function declaration
at the bottom of the outer function and

158
00:09:11.080 --> 00:09:13.950
I put all my executable code
at the top of the function,

159
00:09:13.950 --> 00:09:17.588
cuz the exact same principle applies,
it's easier to find the executable code.

160
00:09:17.588 --> 00:09:24.195
So, if foo had some function bar
inside of it that did something,

161
00:09:24.195 --> 00:09:29.018
[COUGH] I'd have the function
bar at the bottom.

162
00:09:29.018 --> 00:09:33.880
And then I'd have a line that demarcated
where all the function stuff was.

163
00:09:33.880 --> 00:09:37.780
I'd have all my executable code here,
including a return statement.

164
00:09:38.800 --> 00:09:42.110
So it's very easy and quick to figure
out in a function what's it gonna do,

165
00:09:42.110 --> 00:09:46.520
and not have to scroll through potentially
thousands of lines of inner functions to

166
00:09:46.520 --> 00:09:48.060
find where the executable code is.

167
00:09:49.080 --> 00:09:51.700
And if I need to look at bar,
I just scroll down and find bar.

168
00:09:53.920 --> 00:09:56.270
Sometimes people find
that to be unnerving,

169
00:09:56.270 --> 00:09:59.000
that you've declared stuff
after a return statement.

170
00:09:59.000 --> 00:10:02.300
In my opinion, this is using one
of the strengths of JavaScript,

171
00:10:02.300 --> 00:10:05.330
this hoisting, to our advantage.

172
00:10:05.330 --> 00:10:07.860
So back to our mutual recursion example.

173
00:10:07.860 --> 00:10:12.620
The function hoisting that's occurring
is what's allowing us to do this.

174
00:10:12.620 --> 00:10:16.817
So it's allowing us to call a(1) up
on that line, even though a hasn't

175
00:10:16.817 --> 00:10:21.507
actually been declared yet, because
the compiler already declared that for us.

176
00:10:21.507 --> 00:10:23.710
The compiler already handled that part for
us.

177
00:10:27.520 --> 00:10:31.150
Some of you may be wondering in your head,
what does this return?

178
00:10:31.150 --> 00:10:33.880
Sometimes we'll take
an example to try this out.

179
00:10:33.880 --> 00:10:36.860
I'll just go ahead and
tell you this returns the value 39.

180
00:10:36.860 --> 00:10:40.295
It specifically does not
return the value 42,

181
00:10:40.295 --> 00:10:43.492
cuz that's what everybody guesses, okay?

182
00:10:47.581 --> 00:10:51.198
&gt;&gt; Kyle Simpson: Last point to make
on hoisting, back to our friend,

183
00:10:51.198 --> 00:10:53.430
the let keyword.

184
00:10:53.430 --> 00:10:56.550
You remember that I said that let
key words cant be duplicated.

185
00:10:56.550 --> 00:10:58.415
One of the other behaviors
of the let key word,

186
00:10:58.415 --> 00:11:01.890
it's often said that
the let does not hoist.

187
00:11:01.890 --> 00:11:08.240
You'll notice here I'm using let baz on
line 4 but I'm referencing baz on line 3.

188
00:11:08.240 --> 00:11:11.116
If we'd done that with a var that
would have worked just fine.

189
00:11:11.116 --> 00:11:14.340
When we do it with a let,
we're gonna get an error.

190
00:11:14.340 --> 00:11:18.210
Specifically, and
I did not make this up, specifically,

191
00:11:18.210 --> 00:11:20.920
that error is called a TDZ,
a temporal dead zone error.

192
00:11:20.920 --> 00:11:25.630
Don't know where they came up with
that name, it's pretty crazy to me.

193
00:11:25.630 --> 00:11:29.450
But the temporal dead zone
error is using a variable

194
00:11:29.450 --> 00:11:33.290
in the period of time from the beginning
of that lexical environment to the point

195
00:11:33.290 --> 00:11:37.130
at which that variable
has been initialized.

196
00:11:37.130 --> 00:11:40.590
Now, we think of line 4 as
the initialization, but

197
00:11:40.590 --> 00:11:44.126
I'll just tell you the initialization
has nothing to do with the equal sign.

198
00:11:44.126 --> 00:11:47.350
If line 4 said let baz semicolon,

199
00:11:47.350 --> 00:11:50.860
that would still be
the initialization of baz on line 4.

200
00:11:50.860 --> 00:11:53.150
So it's not about the assignment part.

201
00:11:53.150 --> 00:11:57.230
There is a nuance here that you only
get if you dig into the spec like

202
00:11:57.230 --> 00:11:58.460
nerds like me do.

203
00:11:58.460 --> 00:12:02.550
There's a nuance here that when you
use a var keyword, two things happen.

204
00:12:03.550 --> 00:12:06.450
Only one of which is actually hoisting.

205
00:12:06.450 --> 00:12:07.770
What we really mean by hoisting.

206
00:12:08.900 --> 00:12:12.510
The first thing that happens
when a var keyword is used,

207
00:12:12.510 --> 00:12:17.100
is that variable is added at compile
time to the enclosing lexical scope.

208
00:12:17.100 --> 00:12:18.820
We already know that part.

209
00:12:18.820 --> 00:12:23.300
The second thing that happens, which we
didn't talk about, is that at runtime,

210
00:12:23.300 --> 00:12:28.390
when that scope starts,
when that scope is entered, any variables

211
00:12:28.390 --> 00:12:34.090
that were added to the lexical environment
get initialized to their undefined value.

212
00:12:34.090 --> 00:12:37.520
So they are then available to be
used throughout the entire scope.

213
00:12:38.860 --> 00:12:42.020
Let keywords only do one
of those two things.

214
00:12:42.020 --> 00:12:47.180
Let keywords add their declaration to
there enclosing lexical environment scope,

215
00:12:47.180 --> 00:12:50.920
but they do not initialize them
at the beginning of the scope.

216
00:12:50.920 --> 00:12:53.800
They only get initialized
at that undefined value

217
00:12:53.800 --> 00:12:56.030
at the presence of the let keyword.

218
00:12:56.030 --> 00:13:00.821
So from the beginning of our environment
to the moment that the let keyword for

219
00:13:00.821 --> 00:13:04.728
that declaration shows up,
it is in an uninitialized state and

220
00:13:04.728 --> 00:13:06.439
therefore cannot be used.

221
00:13:08.002 --> 00:13:09.919
&gt;&gt; Speaker 4: What is the reasoning for
that?

222
00:13:09.919 --> 00:13:11.550
&gt;&gt; Kyle Simpson: Cost is the same.

223
00:13:11.550 --> 00:13:18.280
Although you can't reassign a cost,
so you can't actually separate them.

224
00:13:18.280 --> 00:13:18.970
&gt;&gt; Speaker 4: What's the reasoning for

225
00:13:18.970 --> 00:13:22.870
that, why doesn't it
get hoisted like a bar?

226
00:13:22.870 --> 00:13:26.160
&gt;&gt; Kyle Simpson: So,
let me separate out your two questions.

227
00:13:26.160 --> 00:13:27.970
What's the reasoning for this behavior?

228
00:13:29.810 --> 00:13:33.994
Ostensibly, the reason for the behavior
is exactly what I said before,

229
00:13:33.994 --> 00:13:36.540
it's bad code style to
say a equals 2 var a.

230
00:13:36.540 --> 00:13:39.666
It's bad code style here to
say console.log(baz); and

231
00:13:39.666 --> 00:13:42.710
then assign baz on a different line,
right?

232
00:13:42.710 --> 00:13:44.730
There no really a functional problem,

233
00:13:44.730 --> 00:13:47.770
it's just a bad coding style
that can be more confusing.

234
00:13:47.770 --> 00:13:51.953
So, extensively they put in an error
to prevent you from doing that.

235
00:13:51.953 --> 00:13:54.390
There's more or
new [INAUDIBLE] to it than that.

236
00:13:54.390 --> 00:13:56.631
That's the most easiest way to explain.

237
00:13:56.631 --> 00:13:59.845
&gt;&gt; Speaker 4: Thinking that if you
used a variable before assigning it,

238
00:13:59.845 --> 00:14:03.920
before declaring it, that's potentially
a mistake that you've made.

239
00:14:03.920 --> 00:14:05.970
So it's trying to help
you by saying this is.

240
00:14:05.970 --> 00:14:07.410
&gt;&gt; Kyle Simpson: That's
essentially what they're saying.

241
00:14:07.410 --> 00:14:10.470
It's probably a mistake,
it's probably a stylistic problem.

242
00:14:10.470 --> 00:14:13.570
So you shouldn't do it so
let's go ahead and make it an error.

243
00:14:13.570 --> 00:14:17.202
I would agree that if you
use a variable before you've

244
00:14:17.202 --> 00:14:22.570
declared it,
it's probably not a good idea.

245
00:14:22.570 --> 00:14:26.260
But as I just illustrated using
functions before you've declared them

246
00:14:26.260 --> 00:14:27.120
makes a whole lot of sense.

247
00:14:28.400 --> 00:14:30.210
The second point,
I'm gonna get to your question but

248
00:14:30.210 --> 00:14:32.480
the second point you said
that it doesn't hoist.

249
00:14:32.480 --> 00:14:35.220
A lot of people say let does not hoist.

250
00:14:36.620 --> 00:14:42.220
While it's convenient to say it that way,
that's not technically accurate,

251
00:14:42.220 --> 00:14:47.890
the hoisting part is adding your variable
to the enclosing lexicon scope and

252
00:14:47.890 --> 00:14:48.880
both of them do that.

253
00:14:50.180 --> 00:14:54.130
Hoisting does not actually
describe the initialization point,

254
00:14:54.130 --> 00:14:57.518
that is a separate thing and
that's what different between var and let.

255
00:14:57.518 --> 00:15:00.140
So technically let still hoist.

256
00:15:00.140 --> 00:15:02.890
They just don't initialize it at
the beginning of the environment scope

257
00:15:02.890 --> 00:15:03.480
like vars do.

258
00:15:04.930 --> 00:15:09.099
And it's that lack of initialization
that they kept out so

259
00:15:09.099 --> 00:15:13.709
that you'd get an error if you
used it temporarily or too early.

260
00:15:13.709 --> 00:15:14.507
Yeah?

261
00:15:14.507 --> 00:15:17.239
&gt;&gt; Speaker 4: I know it's a
&gt;&gt; Kyle Simpson: There's no difference

262
00:15:17.239 --> 00:15:17.923
here with strict.

263
00:15:17.923 --> 00:15:21.640
&gt;&gt; Speaker 4: Same function
declaration hoists and.

264
00:15:21.640 --> 00:15:24.490
&gt;&gt; Kyle Simpson: Yep, there's no
difference with lexical scope and.

265
00:15:25.620 --> 00:15:28.040
&gt;&gt; Speaker 4: No,
I mean like in the strict mode,

266
00:15:28.040 --> 00:15:32.676
if you reference var before declaring it
&gt;&gt; Kyle Simpson: It's not

267
00:15:32.676 --> 00:15:33.342
a strict mode error.

268
00:15:36.298 --> 00:15:39.850
&gt;&gt; Speaker 4: Your example where you
say a equal 1, and then you say var A?

269
00:15:39.850 --> 00:15:41.570
&gt;&gt; Kyle Simpson: Yes.
What I'm saying is in strict mode,

270
00:15:41.570 --> 00:15:42.490
it's not an error.

271
00:15:42.490 --> 00:15:46.619
It behaves exactly the same between
strict mode or nonstrict mode.

272
00:15:54.577 --> 00:15:58.033
&gt;&gt; Kyle Simpson: The nice convenient
shortcut, cuz hoisting let's be honest,

273
00:15:58.033 --> 00:16:02.385
hoisting is a shortcut definition,
it's an easier way of describing, the nice

274
00:16:02.385 --> 00:16:07.550
easy way of describing it, which is what
most people say is let's don't hoist.

275
00:16:07.550 --> 00:16:11.670
Okay, so if you don't wanna be super
nuanced about the actual spec language,

276
00:16:11.670 --> 00:16:13.030
you can just say lets don't hoist.

277
00:16:13.030 --> 00:16:16.960
&gt;&gt; Speaker 5: It does,
it just doesn't get initialized.

278
00:16:16.960 --> 00:16:19.260
&gt;&gt; Kyle Simpson: Right,
that's the actual answer.

279
00:16:19.260 --> 00:16:21.050
It does hoist, it just get initialized.

