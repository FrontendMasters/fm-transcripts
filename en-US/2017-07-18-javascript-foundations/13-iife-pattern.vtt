WEBVTT

1
00:00:00.330 --> 00:00:03.570
&gt;&gt; Kyle Simpson: There is, however,
a downside to this approach.

2
00:00:03.570 --> 00:00:09.150
To create a function like this which was
a declaration, we had to give it a name.

3
00:00:09.150 --> 00:00:12.910
In this case bob, and that name was
included in the enclosing scope,

4
00:00:12.910 --> 00:00:17.670
the very same scope that we were
trying not to pollute or collide with.

5
00:00:17.670 --> 00:00:21.690
So now we have another race condition
between us deciding on a name that

6
00:00:21.690 --> 00:00:23.310
somebody else won't try to collide with.

7
00:00:24.480 --> 00:00:28.233
We need that name because we need it
on line 7 to invoke the function.

8
00:00:28.233 --> 00:00:30.050
Does everybody follow this reasoning?

9
00:00:30.050 --> 00:00:32.670
The good part is that we have a function,
but the bad part is oops,

10
00:00:32.670 --> 00:00:35.040
we've got a name that's polluting things.

11
00:00:35.040 --> 00:00:36.430
How do we square these two problems?

12
00:00:36.430 --> 00:00:38.960
How do we create a scope but
not pollute a name?

13
00:00:40.280 --> 00:00:43.980
There was a hint given earlier when
we talked about function expressions.

14
00:00:45.320 --> 00:00:47.900
Remember what happens to the name
of a function expression.

15
00:00:48.920 --> 00:00:53.460
So what I wanna observe first is line
7 is really two separate operations.

16
00:00:53.460 --> 00:00:56.669
You recall earlier in the course
when we were talking about

17
00:00:58.760 --> 00:01:03.550
the way a line 7 would execute is it's
first got to resolve the bob expression.

18
00:01:03.550 --> 00:01:06.995
Look up whatever value is in it,
which in this case happens to be

19
00:01:06.995 --> 00:01:11.419
a reference to a function, and then it
executes it with a parenthesis on line 7.

20
00:01:11.419 --> 00:01:14.610
So let's think about it as
literally two separate operations.

21
00:01:14.610 --> 00:01:18.810
I just put some parenthesis there to
emphasize the idea that the bob expression

22
00:01:18.810 --> 00:01:22.790
gets evaluated first and
then we call the function.

23
00:01:23.880 --> 00:01:27.770
If that's the case,
if we can think of that as an expression,

24
00:01:27.770 --> 00:01:30.430
what if we just took the function bob and

25
00:01:30.430 --> 00:01:34.275
put it in place of the variable
in that expression on line 7?

26
00:01:34.275 --> 00:01:36.965
What if we literally just made
this from a function declaration

27
00:01:38.045 --> 00:01:39.295
into a function expression?

28
00:01:40.445 --> 00:01:43.435
All I've done is take that
function declaration bob and

29
00:01:43.435 --> 00:01:46.275
put it in place of
the bob named expression.

30
00:01:47.995 --> 00:01:49.285
Now, something subtle but

31
00:01:49.285 --> 00:01:53.595
important has happened because it's no
longer a function declaration anymore.

32
00:01:53.595 --> 00:01:55.045
It's just a function expression.

33
00:01:55.045 --> 00:01:55.780
Why?

34
00:01:55.780 --> 00:01:58.690
Cuz the word function is not literally
the first thing in the statement.

35
00:02:00.030 --> 00:02:01.500
So it's a function expression,

36
00:02:01.500 --> 00:02:06.392
which means that name bob is not gonna
pollute the outer enclosing scope anymore.

37
00:02:08.610 --> 00:02:12.580
Now all of a sudden, that function
expression is just gonna sit there,

38
00:02:12.580 --> 00:02:16.310
until on line 6, we have that second
set of parentheses that executes it.

39
00:02:18.300 --> 00:02:20.420
This pattern has a name,
it's called an IIFE.

40
00:02:20.420 --> 00:02:23.680
It stands for
Immediately Invoked Function Expression.

41
00:02:24.790 --> 00:02:29.750
That parenthesis set there immediately
invokes the function expression that we

42
00:02:29.750 --> 00:02:31.190
give prior in the statement.

43
00:02:32.950 --> 00:02:36.935
If you'd like to read more about where
that name comes from, this blog post,

44
00:02:36.935 --> 00:02:41.430
I think it's widely regarded to Ben Alman,
real big in the jQuery crew.

45
00:02:41.430 --> 00:02:48.060
I think he still works for a consultancy
out of Boston [COUGH] in Bocoup.

46
00:02:48.060 --> 00:02:50.650
He's widely regarded as
coming up with the name for

47
00:02:50.650 --> 00:02:52.600
immediately invoked function expression.

48
00:02:52.600 --> 00:02:54.070
We needed some name for this pattern.

49
00:02:54.070 --> 00:02:56.460
We didn't have a good name,
so we're a creative bunch.

50
00:02:56.460 --> 00:02:58.880
We just named it the IIFE.

51
00:02:58.880 --> 00:03:02.833
So [COUGH] turns out this pattern is
actually one of the most important in all

52
00:03:02.833 --> 00:03:07.600
of JavaScript, or certainly the most
prevalent in all of JavaScript.

53
00:03:07.600 --> 00:03:08.730
It solves a big need.

54
00:03:08.730 --> 00:03:11.350
We need to be able to create
scope in various places, but

55
00:03:11.350 --> 00:03:12.650
we don't wanna pollute them with names.

56
00:03:12.650 --> 00:03:16.150
We want that function to exist only for
the purpose of scope and

57
00:03:16.150 --> 00:03:19.450
so we really just need it to run once and
be done.

58
00:03:19.450 --> 00:03:24.999
That's exactly what the IIFE does for
us, okay?

59
00:03:26.761 --> 00:03:28.937
&gt;&gt; Kyle Simpson: Some examples
of how people use IIFEs.

60
00:03:28.937 --> 00:03:32.171
And by the way, I always like
to name my IIFEs, exactly for

61
00:03:32.171 --> 00:03:36.350
the same reason that we talked
about naming function expressions.

62
00:03:36.350 --> 00:03:38.180
You should name your IIFEs.

63
00:03:38.180 --> 00:03:39.920
And if you can't come up
with some other good name,

64
00:03:39.920 --> 00:03:42.940
at least use the name IIFE, okay?

65
00:03:42.940 --> 00:03:47.070
But usually, there's some better name to
refer to that particular block of scope,

66
00:03:47.070 --> 00:03:50.410
and that's especially true
if it's an entire file.

67
00:03:50.410 --> 00:03:53.460
If the IIFE is wrapped around the whole
contents of a file, which is how it's most

68
00:03:53.460 --> 00:03:57.995
commonly used, you can think about what
the contents of that file is doing.

69
00:03:57.995 --> 00:04:02.970
Maybe those represent the customer
login utilities in your application.

70
00:04:02.970 --> 00:04:06.590
Well, call your IIFE customer login
utilities, or something like that.

71
00:04:06.590 --> 00:04:08.912
Give it a name that's
more self descriptive,

72
00:04:08.912 --> 00:04:11.304
it'll show up in the stack traces,
etc, etc.

73
00:04:13.713 --> 00:04:16.900
&gt;&gt; Kyle Simpson: But what's interesting
to me about IIFEs is that they really

74
00:04:16.900 --> 00:04:18.712
are just regular function calls,

75
00:04:18.712 --> 00:04:23.040
which means we can actually sort of import
identifiers from the enclosing scope.

76
00:04:23.040 --> 00:04:26.620
Here I'm passing in the foo and
I'm giving it a different name.

77
00:04:26.620 --> 00:04:31.879
That actually allows me to alias or to
rename things to be more convenient to me.

78
00:04:31.879 --> 00:04:35.325
So one of the ways that I like to do this
when I wrap an IIFE around the contents

79
00:04:35.325 --> 00:04:39.350
of, say, a file, I'll pass in the window
object, but I'll give it the name global.

80
00:04:40.620 --> 00:04:43.180
So the argument will be
window down on line 6, but

81
00:04:43.180 --> 00:04:46.480
the parameter name up on line 3,
I'll call it global.

82
00:04:46.480 --> 00:04:49.600
That way, any place that I need to
say global dot in front of something,

83
00:04:49.600 --> 00:04:55.070
that's a super glaring obvious neon sign
that says, this thing is on the global.

84
00:04:55.070 --> 00:04:57.610
I just think the word global is
better than the word window.

85
00:04:58.690 --> 00:05:02.173
Another place where this is often
used is with jQuery for example, or

86
00:05:02.173 --> 00:05:05.650
other frameworks that like that
dollar sign variable name.

87
00:05:05.650 --> 00:05:08.280
It's a nice short variable name but
lots of people wanna use it so

88
00:05:08.280 --> 00:05:12.040
that creates collision if you are using
more than one of those utilities.

89
00:05:12.040 --> 00:05:16.080
And how many of us love writing j capital
Q query throughout all of our code?

90
00:05:16.080 --> 00:05:18.000
That's a terrible variable name.

91
00:05:18.000 --> 00:05:20.370
So what you can do is pass
in the jQuery object or

92
00:05:20.370 --> 00:05:23.790
whatever framework of your choice,
and call it dollar sign.

93
00:05:23.790 --> 00:05:27.750
That way, within the context of your IIFE,
it will always predictably be that

94
00:05:27.750 --> 00:05:29.930
dollar sign points at the thing
you wanted it to point at.

95
00:05:32.120 --> 00:05:36.810
So it's nice and useful for
us to control our lexical main spaces

96
00:05:36.810 --> 00:05:38.970
through the arguments and
parameters to our IIFEs.

97
00:05:40.550 --> 00:05:41.840
Questions about the IIFE pattern?

98
00:05:53.353 --> 00:05:57.414
&gt;&gt; Kyle Simpson: I mentioned that using
the IIFE pattern can also be useful

99
00:05:57.414 --> 00:05:59.070
inside of loops.

100
00:05:59.070 --> 00:06:02.230
This is a big hint to something we'll
be dealing with a little bit later

101
00:06:02.230 --> 00:06:03.330
in the course.

102
00:06:03.330 --> 00:06:07.400
Here I wanted to create a block
of scope inside of my for loop.

103
00:06:07.400 --> 00:06:09.680
Why?
Because I wanted a different j for

104
00:06:09.680 --> 00:06:11.380
each iteration.

105
00:06:11.380 --> 00:06:15.770
So I made an IIFE inside of the loop and
then I've put a var j declaration there,

106
00:06:15.770 --> 00:06:20.960
and that j is gonna get recreated for
each run of the for loop.

107
00:06:22.860 --> 00:06:25.760
That'll actually turn out to be really
useful when we talk about closure later.

108
00:06:27.260 --> 00:06:30.765
So we can put these IIFEs literally in any
place that we could put a statement if we

109
00:06:30.765 --> 00:06:32.410
wanna create some scope there.

110
00:06:32.410 --> 00:06:35.830
It's not as nice and
clean as, say a block, and

111
00:06:35.830 --> 00:06:40.460
we'll get to block scoping in just
a moment, but it is the standard by

112
00:06:40.460 --> 00:06:45.360
which we've created these blocks of
scope as we just make these IIFEs.

113
00:06:45.360 --> 00:06:48.190
&gt;&gt; Speaker 2: So, I have a question.

114
00:06:48.190 --> 00:06:53.620
Does the compiler actually
create a variable for the IIFE?

115
00:06:53.620 --> 00:06:56.048
Or how does that work?

116
00:06:56.048 --> 00:06:59.180
Or just in the run time?

117
00:07:00.520 --> 00:07:04.210
&gt;&gt; Kyle Simpson: Well, this is definitely
still gonna get handled according to all

118
00:07:04.210 --> 00:07:08.680
the rules that we talked about,
the theoretical rules that

119
00:07:08.680 --> 00:07:12.850
we talked about about how compilers work
and how JavaScript is gonna be compiled.

120
00:07:12.850 --> 00:07:15.510
So it would run across this function.

121
00:07:15.510 --> 00:07:17.480
It would see that there was
a name identifier there.

122
00:07:17.480 --> 00:07:19.060
It would need to step into that scope.

123
00:07:19.060 --> 00:07:21.280
It would need to create a bucket.

124
00:07:21.280 --> 00:07:22.688
It's called a lexical environment.

125
00:07:22.688 --> 00:07:25.720
But it would need to create
a bucket like a blue bucket, and

126
00:07:25.720 --> 00:07:28.400
the var j would be a blue
marble that was stuck in it.

127
00:07:28.400 --> 00:07:30.720
All that stuff would still happen.

128
00:07:30.720 --> 00:07:36.410
But it is true that the JavaScript engines
can see stuff like this and figure out

129
00:07:36.410 --> 00:07:41.280
if there's a shortcut that they could do
to maybe not have to create a full lexical

130
00:07:41.280 --> 00:07:44.720
environment if they know it's just gonna
only be there for a short period of time.

131
00:07:44.720 --> 00:07:47.350
So there's always a reality difference.

132
00:07:47.350 --> 00:07:52.570
There's always a difference between what
we theoretically say happens conceptually

133
00:07:52.570 --> 00:07:54.020
and what physically happens.

134
00:07:54.020 --> 00:07:57.330
And I can't tell you what physically
happens cuz I'm not a browser developer.

135
00:07:57.330 --> 00:07:59.080
I don't know what they actually do.

136
00:07:59.080 --> 00:08:00.300
But conceptually,

137
00:08:00.300 --> 00:08:03.310
this runs through exactly the same
process as any other function.

138
00:08:03.310 --> 00:08:09.200
&gt;&gt; Speaker 2: So in this case,
will there be five buckets for the IIFE?

139
00:08:09.200 --> 00:08:13.210
&gt;&gt; Kyle Simpson: Again, conceptually we're
gonna be recreating a new bucket each time

140
00:08:13.210 --> 00:08:14.640
we loop, all right?

141
00:08:14.640 --> 00:08:17.840
But practically speaking,
the engine might be able to figure out,

142
00:08:17.840 --> 00:08:20.560
you're gonna reuse the scope in each loop,
maybe I'll just create one, or

143
00:08:20.560 --> 00:08:22.510
maybe I don't even need an environment.

144
00:08:22.510 --> 00:08:24.220
I don't know how they actually do it.

145
00:08:25.230 --> 00:08:28.470
That's an implementation
question that would be best

146
00:08:29.490 --> 00:08:31.300
passed along to an engine developer.

147
00:08:32.840 --> 00:08:34.879
But conceptually,
this would be five separate buckets.

148
00:08:36.380 --> 00:08:40.290
We really should keep our attention on
the concept rather than getting too

149
00:08:40.290 --> 00:08:43.270
worried about the implementation cuz
Firefox may do it differently than Chrome,

150
00:08:43.270 --> 00:08:44.910
who does it differently than Edge.

151
00:08:44.910 --> 00:08:46.210
Who knows, right?

152
00:08:46.210 --> 00:08:50.730
We should focus on the concept and the
concept is we get a separate variable, and

153
00:08:50.730 --> 00:08:52.860
we do that when we want
a separate variable.

154
00:08:52.860 --> 00:08:53.930
If I didn't have the IIFE there,

155
00:08:53.930 --> 00:08:57.870
if I just said var j on line 2,
how many js would there be?

156
00:09:01.544 --> 00:09:02.230
&gt;&gt; Kyle Simpson: Just one, right?

157
00:09:02.230 --> 00:09:05.734
Because that compiles and we'd find
the var j, we'd attach it to the enclosing

158
00:09:05.734 --> 00:09:09.620
function scope, which would have been
in this case the global scope, right?

159
00:09:09.620 --> 00:09:11.930
There's only gonna be one of those js.

160
00:09:11.930 --> 00:09:15.080
Let's say we're in a situation
where we want a j for each loop.

161
00:09:15.080 --> 00:09:16.710
This is how we have to do it.

162
00:09:16.710 --> 00:09:17.210
Make sense?
So

163
00:09:17.210 --> 00:09:20.620
think about the conceptual
requirements of your code and

164
00:09:20.620 --> 00:09:24.170
less about the nitty gritty of
how an engine might influence it.

