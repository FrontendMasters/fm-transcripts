WEBVTT

1
00:00:00.700 --> 00:00:04.010
&gt;&gt; Kyle Simpson: Let's jump
into deep JS foundations.

2
00:00:04.010 --> 00:00:09.374
We're gonna be talking about
JavaScript from the core outward.

3
00:00:09.374 --> 00:00:14.408
And as Mark mentioned,
this is revision two of

4
00:00:14.408 --> 00:00:20.100
one of my earliest and
most popular of my workshops.

5
00:00:20.100 --> 00:00:24.606
[COUGH] The previous title of this
course was Advanced JavaScript,

6
00:00:24.606 --> 00:00:28.799
the what you need to know parts and
many people have seen that.

7
00:00:28.799 --> 00:00:33.380
I'm sure some people here and
online have watched that course before.

8
00:00:33.380 --> 00:00:37.230
And I wanted to explain the context
of this one which is expanded,

9
00:00:37.230 --> 00:00:39.892
new coverage of content, deeper coverage.

10
00:00:39.892 --> 00:00:43.120
But I wanted to explain the context
of that compared to the previous one.

11
00:00:43.120 --> 00:00:44.511
So first, let me start with the title.

12
00:00:44.511 --> 00:00:48.671
I called it Advanced JavaScript way back
in the day and I stuck with that name for

13
00:00:48.671 --> 00:00:51.948
a really long time even though
it tended to create confusion,

14
00:00:51.948 --> 00:00:54.990
because I've noticed
something that's interesting.

15
00:00:54.990 --> 00:00:58.269
If you call something advanced and
then you explain it so

16
00:00:58.269 --> 00:01:01.910
well that it seem simple,
sometimes people get frustrated.

17
00:01:01.910 --> 00:01:04.451
And I've had people complain like,
wait a minute,

18
00:01:04.451 --> 00:01:07.512
I thought I was getting like every
kind of like hot framework and

19
00:01:07.512 --> 00:01:10.950
acronym of the weak or whatever and
all you did was talk about closure.

20
00:01:12.400 --> 00:01:14.020
I didn't get my money's worth.

21
00:01:14.020 --> 00:01:15.791
So, I've had that sort of a complain.

22
00:01:15.791 --> 00:01:19.445
And then on the other end of the spectrum,
when you show up and you teach something

23
00:01:19.445 --> 00:01:22.779
that is genuinely more deeper and
more rigorous than people are used to and

24
00:01:22.779 --> 00:01:25.834
they show up thinking,
it's gonna be a lighthearted intro.

25
00:01:25.834 --> 00:01:28.167
They get quickly frustrated,
because it's over their head or

26
00:01:28.167 --> 00:01:30.190
it's going faster than what they expect.

27
00:01:30.190 --> 00:01:33.150
So there's this interesting
balance between what you call it,

28
00:01:33.150 --> 00:01:35.180
the expectation that that says and what

29
00:01:36.200 --> 00:01:41.440
that will mean to people's perceptions
of the value that they got out of it.

30
00:01:41.440 --> 00:01:43.080
So after a lot of reflection,

31
00:01:43.080 --> 00:01:47.310
I decided that the reason I called it
advanced was I wanted people to know this

32
00:01:47.310 --> 00:01:53.060
is a lot more rigorous than you're used
to going with these particular topics.

33
00:01:53.060 --> 00:01:54.382
But I always had to give that caveat.

34
00:01:54.382 --> 00:01:56.904
This is not what most
people called advanced.

35
00:01:56.904 --> 00:02:00.111
Because most people say, well,
advanced should be all about

36
00:02:00.111 --> 00:02:03.008
the tools like the gulps and
the web packs of the world and

37
00:02:03.008 --> 00:02:07.500
we don't cover any of that stuff in
either the previous course or this one.

38
00:02:07.500 --> 00:02:10.076
So, I changed the name to
Deep JavaScript Foundations.

39
00:02:10.076 --> 00:02:13.982
Because I wanna point out that,
that is my specific focus.

40
00:02:13.982 --> 00:02:18.921
That's what I do when I teach and that's
what you should expect out of any course

41
00:02:18.921 --> 00:02:23.712
or any book that you read from me is that
I would hope that people would save me,

42
00:02:23.712 --> 00:02:27.547
that his material goes uncommonly
deeper into the details and

43
00:02:27.547 --> 00:02:31.780
deeper into the how and the why
behind things besides just the what.

44
00:02:32.800 --> 00:02:34.870
That's what the expectation should be.

45
00:02:34.870 --> 00:02:37.470
So, I'm setting that expectation
with the title of the course.

46
00:02:37.470 --> 00:02:38.909
I just wanna let everybody know that.

47
00:02:38.909 --> 00:02:43.669
We're not gonna be covering a broad
range of topics that will leave

48
00:02:43.669 --> 00:02:45.204
your head spinning.

49
00:02:45.204 --> 00:02:48.422
What we're gonna do is cover actually
a rather narrow set of topics, but

50
00:02:48.422 --> 00:02:51.905
we're gonna go much deeper with those
topics than most people are used to going

51
00:02:51.905 --> 00:02:52.460
with them.

52
00:02:53.870 --> 00:02:54.570
Hence, the title.

53
00:02:55.840 --> 00:02:59.275
If you have read my book series,
the You Don't Know JS books,

54
00:02:59.275 --> 00:03:02.394
you would know that those
books are also very rigorous.

55
00:03:02.394 --> 00:03:05.430
So, expect that this course
will be somewhat like that.

56
00:03:05.430 --> 00:03:07.838
Although if I would had teach
the full contents of this books,

57
00:03:07.838 --> 00:03:09.242
we would be here for weeks at a time.

58
00:03:09.242 --> 00:03:13.260
So, if you looking for where do I go next?

59
00:03:13.260 --> 00:03:16.066
He says a thing and
I wanna understand that deeper.

60
00:03:16.066 --> 00:03:17.370
I wanna go deeper with that.

61
00:03:17.370 --> 00:03:20.874
The books are the best place to go and you
can read the entire book series for free.

62
00:03:20.874 --> 00:03:24.970
All 6 books,
the 1,100 pages worth on the GitHub repo.

63
00:03:24.970 --> 00:03:27.677
So I strongly recommend
that you track along or for

64
00:03:27.677 --> 00:03:31.350
those of you who are watching this
after the live experience, go and

65
00:03:31.350 --> 00:03:34.401
take breaks and
track along with the book and read that.

66
00:03:34.401 --> 00:03:39.042
Because that is how you'll go even deeper
than the coverage that we'll have here in

67
00:03:39.042 --> 00:03:40.850
this class and in these things.

68
00:03:40.850 --> 00:03:45.392
So if you have watched the previous
course, the tactic is the same.

69
00:03:45.392 --> 00:03:48.820
We're gonna continue to go deep
with these core mechanics.

70
00:03:48.820 --> 00:03:52.393
In some ways,
we're even narrower than before.

71
00:03:52.393 --> 00:03:55.556
Because previously,
we covered asynchronous topics and

72
00:03:55.556 --> 00:04:00.071
that's now become its own full-fledged
two-day course as opposed to just an hour

73
00:04:00.071 --> 00:04:01.760
tacked onto the end of the day.

74
00:04:02.770 --> 00:04:04.757
So, we're narrowing
the focus in some respects.

75
00:04:04.757 --> 00:04:05.679
But in other respects,

76
00:04:05.679 --> 00:04:08.690
expanding the focus on the things
that we really ought to know.

77
00:04:08.690 --> 00:04:13.444
And I thought while doing that, it would
be a good opportunity to actually go

78
00:04:13.444 --> 00:04:17.545
back and come up with a fresh set
of exercises to practice on that.

79
00:04:17.545 --> 00:04:21.500
And in the previous course, there were
only three or four exercises to go over.

80
00:04:21.500 --> 00:04:24.707
There are eight for this course, so
there's double the number of exercises.

81
00:04:24.707 --> 00:04:28.604
It's actually one application
that we go back and

82
00:04:28.604 --> 00:04:31.680
work on in each of the eight exercises.

83
00:04:31.680 --> 00:04:35.105
So we progressively go back and
reexamine it, and work on it, and

84
00:04:35.105 --> 00:04:38.054
improve it throughout the course
of all the exercises.

85
00:04:38.054 --> 00:04:41.109
So, we will be doing that across
the entirety of this course.

86
00:04:42.230 --> 00:04:46.790
[COUGH] And so, what you should expect
from this is a rigorous journey

87
00:04:46.790 --> 00:04:52.060
through the three core foundations
of what JavaScript is about.

88
00:04:52.060 --> 00:04:56.830
And those foundations include
the types and coercion system,

89
00:04:56.830 --> 00:05:02.190
and that's probably the most maligned
of all the features in JavaScript.

90
00:05:02.190 --> 00:05:06.881
Most people take the prospective that
coercion is some ugly necessary evil, if

91
00:05:06.881 --> 00:05:11.781
you will to the design of the language or
it's poorly designed, even the creator of

92
00:05:11.781 --> 00:05:16.489
the language himself claims that he made
a bunch of mistakes in the design of it.

93
00:05:16.489 --> 00:05:19.527
And so oftentimes,
when I stand up and say, actually,

94
00:05:19.527 --> 00:05:22.890
I think this is a pretty
great part of the language.

95
00:05:22.890 --> 00:05:27.770
It flies in direct contrast to a lot
of the established wisdom on the topic,

96
00:05:27.770 --> 00:05:30.093
but I think understanding types and

97
00:05:30.093 --> 00:05:35.205
understanding the way the types are
converted which is coercion and using that

98
00:05:35.205 --> 00:05:40.271
to our advantage rather than being scared
of them and staying away from them.

99
00:05:40.271 --> 00:05:45.020
Understanding that mechanism, that's
the first core pillar of the language.

100
00:05:45.020 --> 00:05:47.183
And I don't think you can go
anywhere else with the language,

101
00:05:47.183 --> 00:05:49.069
if you don't really have
a solid foundation of that.

102
00:05:49.069 --> 00:05:51.667
So we're gonna start with the types and
coercion system,

103
00:05:51.667 --> 00:05:54.810
really dig into what that's about and
get into those details.

104
00:05:54.810 --> 00:05:57.895
Now the truth is we have to go
through a mired set of details,

105
00:05:57.895 --> 00:05:59.888
which can be a little bit convoluted.

106
00:05:59.888 --> 00:06:02.320
We have to go through
mired set of details for

107
00:06:02.320 --> 00:06:05.738
you to get the perspective that
you need to have on that topic,

108
00:06:05.738 --> 00:06:09.876
but it will not be the case that in your
day to day thinking or in your day to day

109
00:06:09.876 --> 00:06:13.740
development that you have to think
about every one of those details.

110
00:06:13.740 --> 00:06:17.381
We'll try to boil with everything we
talk about down to some patterns and

111
00:06:17.381 --> 00:06:21.631
some take aways that you can create some
instincts in your development code around.

112
00:06:21.631 --> 00:06:23.690
So, that's the first core foundation.

113
00:06:23.690 --> 00:06:27.812
The second one, the scope and
closures system in JavaScript.

114
00:06:27.812 --> 00:06:31.896
Of the three, if I had to pick only one
to teach, it would be the scope and

115
00:06:31.896 --> 00:06:33.270
closure system.

116
00:06:33.270 --> 00:06:35.690
Cuz it turns out that closure is actually,

117
00:06:35.690 --> 00:06:41.610
probably the most important concept every
invented in all of computing science.

118
00:06:41.610 --> 00:06:44.380
If not the most,
it's in the top two or three.

119
00:06:44.380 --> 00:06:48.503
Now, some of you know that
Doug Crockford and I don't always agree.

120
00:06:48.503 --> 00:06:49.520
We don't always see eye to eye.

121
00:06:50.590 --> 00:06:53.266
He's a smart guy,
has a lot of great stuff to say.

122
00:06:53.266 --> 00:06:55.570
And every once and awhile,
he says something truly profound.

123
00:06:55.570 --> 00:06:57.716
And he pointed out on this topic,

124
00:06:57.716 --> 00:07:01.944
he was talking about closure in
a conference talk some years ago.

125
00:07:01.944 --> 00:07:06.200
And he pointed out that if you look back
at the history of computing science,

126
00:07:06.200 --> 00:07:08.859
turns out that the most
important concepts that

127
00:07:08.859 --> 00:07:13.990
were invented took an entire generation
of programmers before they took hold.

128
00:07:13.990 --> 00:07:16.860
And his tongue in cheek theory for
that was well,

129
00:07:16.860 --> 00:07:21.910
whenever something new is invented, all
the existing crowd is resistant to change.

130
00:07:21.910 --> 00:07:23.330
Because why do I need to change it?

131
00:07:23.330 --> 00:07:26.102
So, we have to wait long enough for
them to all die or

132
00:07:26.102 --> 00:07:29.723
retire before the new crowd can
take over with these new patterns.

133
00:07:29.723 --> 00:07:33.060
And he goes on to say,
we know that closure is truly great.

134
00:07:33.060 --> 00:07:35.815
Because it took two full
generations to take hold.

135
00:07:35.815 --> 00:07:39.744
So, I think closure really is
actually the most important of all

136
00:07:39.744 --> 00:07:41.840
the foundational concepts.

137
00:07:41.840 --> 00:07:45.648
And when you start to understand what that
is and you start to recognize that in all

138
00:07:45.648 --> 00:07:48.289
places of your code,
you'll start to agree with that.

139
00:07:48.289 --> 00:07:50.040
So, we're gonna spend some
time talking about that.

140
00:07:50.040 --> 00:07:54.344
But again, that surfaces to us a set of
patterns, namely the module pattern for

141
00:07:54.344 --> 00:07:55.509
code organization.

142
00:07:55.509 --> 00:07:59.957
It surfaces to us a set of patterns that
we hopefully can use as instincts in

143
00:07:59.957 --> 00:08:04.767
writing better code and the third and
final core foundation that we'll cover in

144
00:08:04.767 --> 00:08:09.220
this course is that these,
and object prototypes system.

145
00:08:09.220 --> 00:08:10.577
And if you're paying attention,

146
00:08:10.577 --> 00:08:12.832
you notice I just listed out
the three books of my series.

147
00:08:12.832 --> 00:08:14.832
Because those are where we start.

148
00:08:14.832 --> 00:08:17.547
If you wanna understand JavaScript,
you need to understand that.

149
00:08:17.547 --> 00:08:20.568
If you tell me that you can configure
webpack with your eyes closed,

150
00:08:20.568 --> 00:08:21.370
I'm impressed.

151
00:08:21.370 --> 00:08:22.851
Because webpack is complicated.

152
00:08:22.851 --> 00:08:26.301
But if you tell me you can articulate
exactly the difference between and

153
00:08:26.301 --> 00:08:29.695
object, the prototype chain and
the closure in lexical scope chain,

154
00:08:29.695 --> 00:08:31.550
that's what really gets me impress.

