WEBVTT

1
00:00:00.380 --> 00:00:03.210
&gt;&gt; Kyle Simpson: Some thoughts about
strict mode for just a moment.

2
00:00:03.210 --> 00:00:05.390
If you're not already
using strict mode for

3
00:00:05.390 --> 00:00:08.340
all of your programs,
what are you waiting for?

4
00:00:10.550 --> 00:00:15.520
Because there's a difference
between I'm a late adopter and

5
00:00:15.520 --> 00:00:16.990
I just missed the train entirely.

6
00:00:18.520 --> 00:00:20.690
Now, I was a late adopter
with strict mode.

7
00:00:21.810 --> 00:00:28.139
I did not adopt it when it first came
around, but that was in 2008, 2009.

8
00:00:28.139 --> 00:00:31.090
It's 2017 as we record this.

9
00:00:31.090 --> 00:00:32.633
That's a really long time.

10
00:00:32.633 --> 00:00:34.990
Restrict mode is well-established.

11
00:00:34.990 --> 00:00:39.494
It is absolutely, without question,
the future of the language.

12
00:00:39.494 --> 00:00:41.520
The inevitable future of the language.

13
00:00:41.520 --> 00:00:43.120
The more that they add to the language,

14
00:00:43.120 --> 00:00:48.590
the more surface area they're adding
that requires or implies strict mode.

15
00:00:48.590 --> 00:00:52.110
So at this point, it is

16
00:00:52.110 --> 00:00:56.710
in your worst interest to continue
to avoid or not adopt strict mode.

17
00:00:57.820 --> 00:01:00.188
Now [COUGH] I wanna address this for
a moment and

18
00:01:00.188 --> 00:01:04.423
this is why I have this slide here to talk
about strict mode, because it's really

19
00:01:04.423 --> 00:01:08.492
important to have the right frame of
mind approach with strict mode is about.

20
00:01:08.492 --> 00:01:11.733
First off,
many people think of strict mode.

21
00:01:11.733 --> 00:01:17.663
The opposite of strict mode,
they will refer to this as sloppy mode and

22
00:01:17.663 --> 00:01:23.596
I disagree with that interpretation
of the difference between lose,

23
00:01:23.596 --> 00:01:29.950
I mean, the difference between strict and
whatever this non-strict is.

24
00:01:31.760 --> 00:01:36.780
In the same way that I would never
talk about a code base that has

25
00:01:36.780 --> 00:01:42.290
a lot of lines of code to it,
I would never call that a fat code base.

26
00:01:42.290 --> 00:01:45.716
Because to me,
that terminology is unempathetic.

27
00:01:45.716 --> 00:01:47.201
It's insensitive.

28
00:01:47.201 --> 00:01:48.584
It can offend the people.

29
00:01:48.584 --> 00:01:53.947
So there's a sense among some people,
many of the people that run the spec

30
00:01:53.947 --> 00:01:59.525
committee that you should never,
ever write code in the non-strict mode.

31
00:01:59.525 --> 00:02:04.070
And so we should make you feel bad,
if you're writing code that's still

32
00:02:04.070 --> 00:02:08.932
in non-strict mode and that is not at
all the message that I wanna get across.

33
00:02:08.932 --> 00:02:12.750
That's like an insulting or
a punitive way to look at it.

34
00:02:12.750 --> 00:02:17.616
And even the name sort of suggests like
an overbearing parent that won't let

35
00:02:17.616 --> 00:02:21.889
you go out and stay out past 8 o'clock and
you're like, come on.

36
00:02:21.889 --> 00:02:24.000
Why can't I stay out past 8 o'clock?

37
00:02:24.000 --> 00:02:25.655
Why you gotta restrict me?

38
00:02:25.655 --> 00:02:27.560
I need my freedom.

39
00:02:27.560 --> 00:02:31.451
Even the name of it suggests something
of a negative connotation and

40
00:02:31.451 --> 00:02:33.371
I don't think that's helpful.

41
00:02:33.371 --> 00:02:37.630
So, I wanna reframe for you the right
way to think about strict mode.

42
00:02:37.630 --> 00:02:42.186
First off, all the changes that strict
mode brought about in ES5 are all listed,

43
00:02:42.186 --> 00:02:43.518
actually any changes.

44
00:02:43.518 --> 00:02:47.490
They're all listed in
an appendix of the spec.

45
00:02:47.490 --> 00:02:49.032
I think it's appendix E.

46
00:02:49.032 --> 00:02:50.030
It's right there in the spec.

47
00:02:50.030 --> 00:02:53.426
There's just a list one after the other
and they all start kinda like this.

48
00:02:53.426 --> 00:02:56.160
It is an error if and then dot, dot, dot.

49
00:02:56.160 --> 00:02:57.580
It just fills it in.

50
00:02:57.580 --> 00:03:00.730
Essentially, it's listing out
a set of things that become

51
00:03:00.730 --> 00:03:03.320
errors which used to not be error.

52
00:03:03.320 --> 00:03:06.292
So, that feels like that's
a restriction against you.

53
00:03:06.292 --> 00:03:11.003
As a matter of fact,
there are some very prominent

54
00:03:11.003 --> 00:03:16.052
members of our community who
have vocally said on many

55
00:03:16.052 --> 00:03:20.690
occasions that they
are resisting strict mode.

56
00:03:20.690 --> 00:03:25.229
That they don't want to switch to it,
because they don't wanna be restricted

57
00:03:25.229 --> 00:03:29.007
from doing stuff to the point that
one of them went so far as to say,

58
00:03:29.007 --> 00:03:33.543
I'm gonna write all of my code such that
it will break if somebody tries to run it

59
00:03:33.543 --> 00:03:34.548
in strict mode.

60
00:03:34.548 --> 00:03:36.452
Like not just I'm not gonna pay attention,

61
00:03:36.452 --> 00:03:39.140
I'm gonna literally try to make
my code break in strict mode.

62
00:03:40.600 --> 00:03:41.860
That is an extreme deal.

63
00:03:43.600 --> 00:03:46.188
That is not something that
we should wanna emulate.

64
00:03:48.600 --> 00:03:50.585
&gt;&gt; Kyle Simpson: So,
how should we think about strict mode?

65
00:03:50.585 --> 00:03:54.550
What's the proper mindset to have for
strict mode?

66
00:03:54.550 --> 00:03:56.320
Let me try to help with that.

67
00:03:56.320 --> 00:03:58.900
If you go through and
you read all those items in the appendix

68
00:03:59.940 --> 00:04:02.940
instead of reading them as restrictions,
instead of reading those things where

69
00:04:02.940 --> 00:04:06.110
they're slapping you wrist and
saying, stop doing that thing.

70
00:04:06.110 --> 00:04:07.326
I want you to think about it like this.

71
00:04:07.326 --> 00:04:11.725
Because virtually,
all of those items that are listed there

72
00:04:11.725 --> 00:04:15.779
are things that you do in your
code that make it harder for

73
00:04:15.779 --> 00:04:20.541
the JavaScript engine to optimize
the performance of your code.

74
00:04:23.720 --> 00:04:25.486
&gt;&gt; Kyle Simpson: If you go through and
you say,

75
00:04:25.486 --> 00:04:28.106
why can't I do implicit global variables?

76
00:04:28.106 --> 00:04:29.805
Well, you know why?

77
00:04:29.805 --> 00:04:34.320
Most pragmatic reason means other than the
fact that it's a mistake in a bad design,

78
00:04:34.320 --> 00:04:38.138
the most pragmatic reason why you
shouldn't do it is because it's a lot

79
00:04:38.138 --> 00:04:42.273
slower to create a variable at runtime
than have to modify an existing lexical

80
00:04:42.273 --> 00:04:45.670
scope as opposed to being able to
figure it out at compile time.

81
00:04:47.260 --> 00:04:48.750
It's slower.

82
00:04:48.750 --> 00:04:50.850
It's going to slow down
the execution of your code.

83
00:04:52.450 --> 00:04:54.014
So, if you go through
each one of these and

84
00:04:54.014 --> 00:04:56.181
you reason through why would
they have restricted that?

85
00:04:56.181 --> 00:04:57.559
Why would they have prevented that?

86
00:04:57.559 --> 00:05:01.260
Most of them are things where if you
were doing that thing in your code,

87
00:05:01.260 --> 00:05:03.720
you're making your code
harder to optimize.

88
00:05:04.930 --> 00:05:10.170
When viewed from that perspective, strict
mode is really like a set of suggestions

89
00:05:10.170 --> 00:05:14.200
that you really ought to follow,
so that your code will run faster.

90
00:05:16.230 --> 00:05:20.820
And I don't know about you, but I need all
the help I can get writing optimal code.

91
00:05:21.840 --> 00:05:23.280
So, sign me up.

92
00:05:23.280 --> 00:05:26.340
If there's a mode that I can adhere
to that helps me from making the dumb

93
00:05:26.340 --> 00:05:30.300
mistakes that accidentally make
my code go slower, I'm on board.

94
00:05:31.940 --> 00:05:37.439
But I didn't have the right mindset, which
why I was kind of a late adopter and there

95
00:05:37.439 --> 00:05:42.722
was also a set of myths about strict mode
and I wanna clear those myths up for you.

96
00:05:42.722 --> 00:05:45.630
One of those myths was well,
we don't use strict mode yet.

97
00:05:45.630 --> 00:05:49.446
Because some of the libraries
we use don't use strict code.

98
00:05:49.446 --> 00:05:51.375
We load in jQuery and
it doesn't use it or whatever.

99
00:05:51.375 --> 00:05:53.196
I mean, they all use it now.

100
00:05:53.196 --> 00:05:55.605
But like you used to say,
well, I don't know.

101
00:05:55.605 --> 00:05:59.745
I use some like third party ad code and
they haven't updated their code in like 15

102
00:05:59.745 --> 00:06:03.230
years and they don't use strict mode,
so we don't use strict mode.

103
00:06:04.330 --> 00:06:07.944
This is a fundamental misunderstanding
of how the mechanism works.

104
00:06:07.944 --> 00:06:08.617
As a matter of fact,

105
00:06:08.617 --> 00:06:11.050
it's a fundamental misunderstanding
of how JavaScript itself works.

106
00:06:12.850 --> 00:06:17.483
JavaScript programs are file based.

107
00:06:17.483 --> 00:06:19.404
You have an application
you ship in production.

108
00:06:19.404 --> 00:06:21.770
Most of you probably work on web apps.

109
00:06:21.770 --> 00:06:26.340
Most of you have probably built
an application that has anywhere from

110
00:06:26.340 --> 00:06:31.190
a few to a dozen, maybe a couple
hundred JavaScript files in it and

111
00:06:31.190 --> 00:06:33.230
you think of that as one program.

112
00:06:33.230 --> 00:06:34.630
That's not how JavaScript thinks of it.

113
00:06:35.640 --> 00:06:38.740
Every single file is in
a completely separate program.

114
00:06:40.960 --> 00:06:44.520
Now, what they do share is they
all share the global scope.

115
00:06:44.520 --> 00:06:45.020
So, that's good.

116
00:06:46.100 --> 00:06:50.300
That makes it easy for us to combine
multiple programs into one application.

117
00:06:50.300 --> 00:06:54.060
But from the perspective of JavaScript and
rules that it applies,

118
00:06:54.060 --> 00:06:57.950
if I put use strict at the top of this
file and then I load in a whole separate

119
00:06:57.950 --> 00:07:01.940
file with a whole separate set of code and
that file does not have a use strict

120
00:07:01.940 --> 00:07:07.260
directive in it, that code is not
subject to strict mode regulations.

121
00:07:07.260 --> 00:07:10.670
Only the code that I actually
put the use strict in.

122
00:07:10.670 --> 00:07:15.056
So if your application has some
files that can be strict mode and

123
00:07:15.056 --> 00:07:19.382
some that can't,
stop worrying about the ones that can't.

124
00:07:19.382 --> 00:07:20.810
Just focus on the ones that can.

125
00:07:22.810 --> 00:07:27.307
The only time this is really a problem
is when you do something silly like take

126
00:07:27.307 --> 00:07:31.541
somebody else's code arbitrarily and
concatenate it with your code.

127
00:07:31.541 --> 00:07:36.022
That is a terrible idea for a whole bunch
of reasons not the least of which is,

128
00:07:36.022 --> 00:07:40.012
you're now asking that code to run
in the strict mode of your file and

129
00:07:40.012 --> 00:07:41.150
that may not work.

130
00:07:42.660 --> 00:07:45.072
So, do not under any circumstances.

131
00:07:45.072 --> 00:07:48.180
And if you're doing it now,
go home and change it tonight.

132
00:07:48.180 --> 00:07:52.789
Do not bundle somebody else's
untrusted code with your trusted code.

133
00:07:52.789 --> 00:07:56.990
That is never a good idea for
security reasons, for caching reasons, for

134
00:07:56.990 --> 00:07:58.355
performance reasons.

135
00:07:58.355 --> 00:08:00.560
That is just never a good idea.

136
00:08:00.560 --> 00:08:04.982
At a minimum, you should have a bundle
of untrusted stuff that comes from other

137
00:08:04.982 --> 00:08:07.941
people and
a bundle of trusted stuff that you wrote.

138
00:08:07.941 --> 00:08:08.920
Keep those two separate.

139
00:08:10.360 --> 00:08:13.660
And the stuff that you wrote, you should
be fully in control with whether or

140
00:08:13.660 --> 00:08:14.440
not that's strict mode.

141
00:08:16.110 --> 00:08:19.838
If you have stuff that is not strict mode
yet, don't concatenate into that bundle.

142
00:08:19.838 --> 00:08:21.490
Come up with a third bundle, for example.

143
00:08:23.240 --> 00:08:27.120
The other thing to know about strict
mode is that it's not all or nothing.

144
00:08:28.320 --> 00:08:30.260
I've put it at the top of this file,

145
00:08:30.260 --> 00:08:33.324
which means apply it to
the entire contents of the file.

146
00:08:33.324 --> 00:08:38.076
But if for some reason there was some
functions in this code which could not do

147
00:08:38.076 --> 00:08:43.140
that and others could, I could do the use
strict on a function by function basis.

148
00:08:44.790 --> 00:08:46.582
So, I could start out by going and

149
00:08:46.582 --> 00:08:49.846
putting that you strict in every
single function in my file.

150
00:08:49.846 --> 00:08:53.278
And then if there was a problem
if I exposed an error or a bug or

151
00:08:53.278 --> 00:08:57.489
I broke something, I could either go
fix it, which is what I ought to do.

152
00:08:57.489 --> 00:09:01.716
Or at a minimum, just take out that used
strict for that one offending functions,

153
00:09:01.716 --> 00:09:04.550
leaving it in all the other
places where it works fine.

154
00:09:06.400 --> 00:09:10.462
Preventing me from doing stupid stuff
like implicitly creating globals or

155
00:09:10.462 --> 00:09:13.562
repeating parameter names,
or other things like that.

156
00:09:13.562 --> 00:09:17.302
So you can go on a function by function
basis and you should fix those problems

157
00:09:17.302 --> 00:09:21.770
rather than cover them up or ignore them,
but you can do that little by little.

158
00:09:21.770 --> 00:09:26.026
And eventually, someday every function in
your file will have the use strict in it

159
00:09:26.026 --> 00:09:28.566
and there won't be any bugs and
then guess what?

160
00:09:28.566 --> 00:09:33.424
Just go take all the use stricts out of
the functions and put it up at the top.

161
00:09:33.424 --> 00:09:35.719
Problem solved.

162
00:09:35.719 --> 00:09:40.619
So the second myth is that you don't have
to adopt strict mode all or nothing, but

163
00:09:40.619 --> 00:09:42.990
I repeat my earlier admonition.

164
00:09:42.990 --> 00:09:44.873
What are you waiting for?

165
00:09:44.873 --> 00:09:48.660
This is the future of the langue and
this is the way we should be writing code.

166
00:09:48.660 --> 00:09:52.216
Get into that habit of starting every
file and I still have to force myself to

167
00:09:52.216 --> 00:09:54.880
remember, but
they use strict at the top of every file.

168
00:09:54.880 --> 00:09:57.799
There is maybe some day in the future and
I'm really hoping for

169
00:09:57.799 --> 00:10:00.990
it where we don't have
to opt into strict mode.

170
00:10:00.990 --> 00:10:03.029
We have to opt out of strict mode.

171
00:10:03.029 --> 00:10:04.080
I hope that day comes.

172
00:10:04.080 --> 00:10:07.314
But right now,
you're gonna have to get into that habit.

173
00:10:07.314 --> 00:10:09.544
If you're already using a trans
filer like babble or something,

174
00:10:09.544 --> 00:10:11.298
it's already putting your
code into strict mode.

175
00:10:11.298 --> 00:10:12.760
So, you're good.

176
00:10:12.760 --> 00:10:15.610
But if you're not doing that, go and
put strict mode into all your programs.

