WEBVTT

1
00:00:00.000 --> 00:00:02.640
&gt;&gt; Kyle Simpson: First,
what you need to know, definition.

2
00:00:02.640 --> 00:00:04.447
Scope means where to look for things.

3
00:00:04.447 --> 00:00:08.296
It's the set of rules that helps us
figure out where stuff is found,

4
00:00:08.296 --> 00:00:09.858
how to resolve something.

5
00:00:09.858 --> 00:00:12.403
So that definition should ask, or

6
00:00:12.403 --> 00:00:16.280
should bring up at least
two questions in your mind.

7
00:00:16.280 --> 00:00:21.080
The first question that should come to
your mind is, what are we looking for?

8
00:00:21.080 --> 00:00:22.610
Great question.

9
00:00:22.610 --> 00:00:24.780
The thing we're looking for
is any variable,

10
00:00:24.780 --> 00:00:28.620
any identifier, regardless of
how it's used in our program.

11
00:00:28.620 --> 00:00:31.030
It turns out there's only two
ways that something can be used.

12
00:00:31.030 --> 00:00:35.229
A variable can either show up in a
position where we're retrieving the value

13
00:00:35.229 --> 00:00:39.491
from it, or it can show up in a position
where we're adding the value to it, or

14
00:00:39.491 --> 00:00:41.283
we're setting a value into it.

15
00:00:41.283 --> 00:00:46.068
Those are the only two places a variable
can show up, but wherever it shows up,

16
00:00:46.068 --> 00:00:48.476
that variable belongs to some bucket.

17
00:00:48.476 --> 00:00:52.304
I like to think visually of our program
as a division where every variable is

18
00:00:52.304 --> 00:00:55.665
a colored marble, and this is my
visual way of thinking about it.

19
00:00:55.665 --> 00:00:57.755
It's like sorting all the marbles, so

20
00:00:57.755 --> 00:01:00.098
I put all the red marbles
in the red bucket and

21
00:01:00.098 --> 00:01:05.170
all the blue marbles in the blue bucket,
and the green marbles in the green bucket.

22
00:01:05.170 --> 00:01:08.912
Scope is the set of rules by which
we sort all those marbles, and

23
00:01:08.912 --> 00:01:13.516
when we want the red marble, we know what
bucket to go and get it out of, okay?

24
00:01:13.516 --> 00:01:15.480
So that's the first question,
what are we looking for?

25
00:01:15.480 --> 00:01:17.430
We're looking for the colored marbles.

26
00:01:17.430 --> 00:01:20.710
We're looking for those identifiers, but
there's another more subtle question.

27
00:01:20.710 --> 00:01:22.990
And I wanna take a few
moments to talk about scope

28
00:01:24.400 --> 00:01:29.840
from the perspective of what's going
on inside of the JavaScript engine.

29
00:01:29.840 --> 00:01:33.809
I've already said this, so I already
kinda gave it away, but many of you have

30
00:01:33.809 --> 00:01:37.677
heard JavaScript is an interpreted
language, it's a dynamic language.

31
00:01:37.677 --> 00:01:40.970
So if I were to assert to you,
JavaScript is absolutely,

32
00:01:40.970 --> 00:01:45.720
positively a compiled language, that
might fly against some of your intuition.

33
00:01:45.720 --> 00:01:49.594
You've always been told before
it's an interpreted language, and

34
00:01:49.594 --> 00:01:54.081
I will tell you absolutely, positively,
JavaScript is a compiled language.

35
00:01:54.081 --> 00:01:55.923
So I wanna dig into that for a moment,

36
00:01:55.923 --> 00:01:59.740
because the second question this should
ask is, who's doing the looking?

37
00:01:59.740 --> 00:02:01.190
Who's doing the looking?

38
00:02:01.190 --> 00:02:06.007
Is it just a JavaScript interpreter trying
to find dynamically allocated memory or

39
00:02:06.007 --> 00:02:06.778
something?

40
00:02:06.778 --> 00:02:09.349
Or is there something deeper going on?

41
00:02:09.349 --> 00:02:16.000
And this is really at the heart
of this whole unit of discussion,

42
00:02:16.000 --> 00:02:20.202
is that scope is a compile time process.

43
00:02:20.202 --> 00:02:23.370
That our program does go
through a compile step, and

44
00:02:23.370 --> 00:02:27.690
it is at the compile time that all of
these scope decisions will happen.

45
00:02:28.990 --> 00:02:33.610
We like to think of it being more like
a runtime thing, that JavaScript is

46
00:02:33.610 --> 00:02:38.557
a single pass interpreted program
language, but it really isn't that way.

47
00:02:38.557 --> 00:02:43.520
And I'm gonna point out multiple
points throughout the rest of our

48
00:02:43.520 --> 00:02:47.698
discussion where the difference
can be very dramatic.

49
00:02:47.698 --> 00:02:52.308
The difference where we say, well,
I think that it's in a single pass, and

50
00:02:52.308 --> 00:02:55.118
I think the variable should be this value,
and

51
00:02:55.118 --> 00:02:58.235
it turns out it's something
entirely different.

52
00:02:58.235 --> 00:03:02.431
And you're like, I don't understand where
my thinking is wrong, and that root

53
00:03:02.431 --> 00:03:07.400
thinking problem is that you're thinking
about JavaScript as a single pass, okay?

54
00:03:07.400 --> 00:03:09.145
So JavaScript is absolutely compiled.

55
00:03:09.145 --> 00:03:13.933
[COUGH] Let me dig into that for a moment.
&gt;&gt; Kyle Simpson: When people say

56
00:03:13.933 --> 00:03:16.670
JavaScript is not a compiled language,

57
00:03:16.670 --> 00:03:21.662
it's a dynamic interpreted language,
and they compare it to what is more

58
00:03:21.662 --> 00:03:26.680
traditionally thought of as a compiled
language, like a C++ or a Java.

59
00:03:26.680 --> 00:03:30.809
What they're usually thinking
of is the distribution model for

60
00:03:30.809 --> 00:03:33.108
the end result of the compilation.

61
00:03:33.108 --> 00:03:36.558
They're usually thinking,
well, a compiled language,

62
00:03:36.558 --> 00:03:41.250
I run it through a compiler and I produce
some executable code on the outside, and

63
00:03:41.250 --> 00:03:44.363
then I take that executable code and
I distribute it.

64
00:03:44.363 --> 00:03:48.044
So you think, well, I do that with Java,
I produce byte code,

65
00:03:48.044 --> 00:03:51.320
I do that with C++ and
I produce the binary 1s and 0s.

66
00:03:51.320 --> 00:03:55.064
But with JavaScript,
I don't compile ahead of time and

67
00:03:55.064 --> 00:03:59.660
produce some executable code,
I ship the source code.

68
00:03:59.660 --> 00:04:05.276
So we think our paradigm is, what is
the distribution mode for the program?

69
00:04:05.276 --> 00:04:10.260
Do we distribute it as the executable
code or as the source code?

70
00:04:10.260 --> 00:04:15.110
I remember in CS,
a really long time ago now, but

71
00:04:15.110 --> 00:04:18.910
I remember sitting in CS courses and
having an instructor

72
00:04:18.910 --> 00:04:23.450
essentially intimate that that is the
major difference between the languages.

73
00:04:23.450 --> 00:04:25.000
But I think that's wrong.

74
00:04:25.000 --> 00:04:28.532
I think while that may or
may not be a true validation,

75
00:04:28.532 --> 00:04:31.918
there's nuance there,
even to pick a part there.

76
00:04:31.918 --> 00:04:35.904
But while that may or may not be true,
I don't think that's at all the most

77
00:04:35.904 --> 00:04:40.298
relevant difference between a compiled
language and an interpreted language.

78
00:04:40.298 --> 00:04:43.281
Let me prove to you for just a moment
that Java Script is compiled.

79
00:04:43.281 --> 00:04:45.043
There's multiple ways I could do that.

80
00:04:45.043 --> 00:04:49.214
We could open up the source code for
V8 and we'd find that there's actually

81
00:04:49.214 --> 00:04:53.727
a compiler there, source code for
Mozilla SpiderMonkey, there's a compiler.

82
00:04:53.727 --> 00:04:56.150
But let me prove it to
you more pragmatically.

83
00:04:56.150 --> 00:05:01.378
Have any of you ever had a JavaScript bug,
anybody?

84
00:05:01.378 --> 00:05:04.345
Okay, good, we're all among friends,
we've all written bugs before.

85
00:05:04.345 --> 00:05:08.062
Have any of your bugs ever been
something where you syntactically

86
00:05:08.062 --> 00:05:12.927
did something wrong, like you were missing
a comma, or you left off a curly brace, or

87
00:05:12.927 --> 00:05:15.970
some kind of syntax error that occurred?

88
00:05:15.970 --> 00:05:19.545
Okay, in that scenario,
since we're all nodding our heads,

89
00:05:19.545 --> 00:05:23.592
in that scenario, if you've ever
created a syntax error in a program,

90
00:05:23.592 --> 00:05:28.127
did you ever think to yourself, well,
gee, that syntax error was on line ten.

91
00:05:28.127 --> 00:05:33.916
But when I went to run the program, it did
not run lines one through nine first and

92
00:05:33.916 --> 00:05:36.435
then give me the error on line ten.

93
00:05:37.615 --> 00:05:38.805
When did it give me the error?

94
00:05:40.025 --> 00:05:43.356
Before it ever ran line one, right?

95
00:05:43.356 --> 00:05:45.643
Well, how do you suppose it did that?

96
00:05:45.643 --> 00:05:50.677
How do you suppose JavaScript knew
in advance that there was gonna

97
00:05:50.677 --> 00:05:55.261
be a syntax error on line ten
before it had ever run line one?

98
00:05:55.261 --> 00:05:57.175
There's a very simple
answer to that question,

99
00:05:57.175 --> 00:05:59.469
because the JavaScript engine
compiled your code first.

100
00:06:00.870 --> 00:06:05.870
And the compilation validated the syntax
long before it ever handed off

101
00:06:05.870 --> 00:06:07.840
to some part of the engine to execute.

102
00:06:09.660 --> 00:06:11.060
So at a minimum,

103
00:06:11.060 --> 00:06:15.160
I need to adjust your thinking about
how you process JavaScript programs.

104
00:06:15.160 --> 00:06:17.805
From thinking about this as a single pass,

105
00:06:17.805 --> 00:06:22.507
we go all the way through the program
top to bottom, to thinking about this,

106
00:06:22.507 --> 00:06:25.210
at minimum, as a dual pass.
&gt;&gt; Speaker 2: [CROSSTALK] Are you using

107
00:06:25.210 --> 00:06:26.698
that interchangeably with parsing?

108
00:06:26.698 --> 00:06:28.710
I mean,
it's really just parsing it, right?

109
00:06:28.710 --> 00:06:32.340
Is that the same thing as compiling?
&gt;&gt; Kyle Simpson: Well, okay,

110
00:06:32.340 --> 00:06:33.460
that's a great question.

111
00:06:33.460 --> 00:06:40.190
So the question was, am I using
compilation interchangably with parsing?

112
00:06:41.700 --> 00:06:42.200
Yes and no.

113
00:06:43.500 --> 00:06:48.130
The important part of what we're talking
about is the fact that parsing does need

114
00:06:48.130 --> 00:06:51.432
to occur, cuz obviously, parsing needs
to happen for compilation to occur.

115
00:06:51.432 --> 00:06:57.103
But compilation, there's multiple
stages to what we mean by a compiler,

116
00:06:57.103 --> 00:07:01.716
and so I'm gonna digress a little
bit into compiler theory.

117
00:07:01.716 --> 00:07:04.010
I'm one of those people that
actually enjoyed that class.

118
00:07:04.010 --> 00:07:07.220
That was my favorite class in CS,
I loved compiler theory.

119
00:07:07.220 --> 00:07:09.854
I wrote compilers for fun now.

120
00:07:09.854 --> 00:07:12.865
I understand many people
may not be like that, but

121
00:07:12.865 --> 00:07:15.096
my brain seems to like this, right?

122
00:07:15.096 --> 00:07:17.250
So there are multiple
stages to the compiler.

123
00:07:17.250 --> 00:07:21.754
The last step of compilation
is code generation and

124
00:07:21.754 --> 00:07:25.426
linking to create your executable code.

125
00:07:25.426 --> 00:07:28.317
So does that happen with JavaScript?

126
00:07:28.317 --> 00:07:33.153
Or is it just the first stages,
where we have lexing, tokenization, and

127
00:07:33.153 --> 00:07:36.060
parsing into an abstract syntax tree?

128
00:07:36.060 --> 00:07:37.170
Which of those two is true?

129
00:07:38.200 --> 00:07:39.980
There's two ways to answer this question.

130
00:07:39.980 --> 00:07:42.130
First off, at the most base level,

131
00:07:42.130 --> 00:07:45.340
the JavaScript engine absolutely
does code generation.

132
00:07:46.530 --> 00:07:50.928
It absolutely does produce an intermediary
representation from the source code to

133
00:07:50.928 --> 00:07:54.819
the thing that it hands off in
the JavaScript engine, which is actually,

134
00:07:54.819 --> 00:07:58.428
literally in some cases,
called the JavaScript virtual machine.

135
00:07:58.428 --> 00:08:02.827
That's actually akin to a byte code, not
terribly dissimilar from what's handed off

136
00:08:02.827 --> 00:08:06.275
from Java when you compile a Java program,
you produce a byte code.

137
00:08:06.275 --> 00:08:10.849
Now, that byte code that's handed out to
the JavaScript virtual machine is not

138
00:08:10.849 --> 00:08:14.604
portable, it's not platform
independent like it is with Java,

139
00:08:14.604 --> 00:08:17.000
but it is akin to a byte code, okay?

140
00:08:17.000 --> 00:08:20.770
A set of instructions that
are the binary representations.

141
00:08:20.770 --> 00:08:22.870
So it's not literally handing off, say,

142
00:08:22.870 --> 00:08:27.560
an abstract syntax tree, it's actually
a binary intermediate representation.

143
00:08:28.700 --> 00:08:33.520
But modern JavaScript engines are actually
fantastically more complex than what I'm

144
00:08:33.520 --> 00:08:34.460
boiling down now.

145
00:08:34.460 --> 00:08:38.606
Because there's all kinds of things
like jitting and other stuff like that,

146
00:08:38.606 --> 00:08:41.239
JIT is J-I-T, Just-in-Time compilation.

147
00:08:41.239 --> 00:08:44.380
And as a matter of fact, and
this part I don't even fully understand,

148
00:08:44.380 --> 00:08:45.724
even with my knowledge of CS.

149
00:08:45.724 --> 00:08:49.856
I don't fully understand how you can
partially JIT compile a piece of code.

150
00:08:49.856 --> 00:08:51.420
To me it's an all or nothing.

151
00:08:51.420 --> 00:08:53.010
You either compile it or
you don't compile it.

152
00:08:53.010 --> 00:08:56.190
But actually,
modern engines are going through three or

153
00:08:56.190 --> 00:08:58.670
four different JIT passes.

154
00:08:58.670 --> 00:09:02.280
They have a fast JIT, and
then a slower JIT, and an even slower one.

155
00:09:02.280 --> 00:09:06.331
They go through it multiple times and
they figure out more about the program as

156
00:09:06.331 --> 00:09:09.713
they go through it, and
then they trace, well, with runtime.

157
00:09:09.713 --> 00:09:13.536
And then the engine is recompiling
stuff based upon what it knows.

158
00:09:13.536 --> 00:09:17.257
As it sees stuff happen in runtime,
it'll throw away a set of guesses and

159
00:09:17.257 --> 00:09:19.522
recompile another set, and hot swap it in.

160
00:09:19.522 --> 00:09:21.137
There's all kinds of
complexities going on.

161
00:09:21.137 --> 00:09:23.927
So it's actually not even a two pass.

162
00:09:23.927 --> 00:09:24.936
It's very much more complex.

163
00:09:24.936 --> 00:09:27.684
But if we just simplify
it down to the two pass,

164
00:09:27.684 --> 00:09:32.335
there's a single step that compiles,
which does the parsing, produces some

165
00:09:32.335 --> 00:09:37.430
representation of that program that
an execution knows what to do with.

166
00:09:37.430 --> 00:09:40.907
I'm gonna call that an IR, an intermediary
representation, it's like a byte code.

167
00:09:40.907 --> 00:09:43.140
And then there's a second
pass that executes it.

168
00:09:44.760 --> 00:09:48.281
So when I say compile, I mean JavaScript
goes through those two passes.

169
00:09:48.281 --> 00:09:49.753
That help answer that question?
&gt;&gt; Speaker 2: Yeah, yeah.

170
00:09:49.753 --> 00:09:50.502
&gt;&gt; Kyle Simpson: Okay, so

171
00:09:50.502 --> 00:09:55.472
what I'm asserting is that that
first pass has to occur because

172
00:09:55.472 --> 00:09:57.365
parsing has to happen.

173
00:09:57.365 --> 00:10:02.008
Otherwise, we'd never know about a syntax
error on line ten if we were on line one.

174
00:10:02.008 --> 00:10:06.660
As a matter of fact, there's more
proof that the parsing is happening,

175
00:10:06.660 --> 00:10:09.484
because JavaScript has
a set of things which

176
00:10:09.484 --> 00:10:12.707
are enforced in the parsing
stage of the grammar.

177
00:10:12.707 --> 00:10:15.685
They're enforced as what
are called early errors.

178
00:10:15.685 --> 00:10:20.396
For example, in strict mode, if you
have a JavaScript function that has two

179
00:10:20.396 --> 00:10:23.574
different parameters with
the same lexical name.

180
00:10:23.574 --> 00:10:28.208
Like you have function foo, and then you
say a comma a in the function signature,

181
00:10:28.208 --> 00:10:30.060
that's not a syntactic error.

182
00:10:30.060 --> 00:10:32.580
That's totally syntactically valid.

183
00:10:32.580 --> 00:10:36.380
But that is still thrown
as an early static error.

184
00:10:36.380 --> 00:10:41.090
In other words, before the program is
ever run, an error is thrown to tell you,

185
00:10:41.090 --> 00:10:44.110
you're not allowed to have two
parameters of the same name.

186
00:10:44.110 --> 00:10:48.388
That could only happen if there was
first a full pass through the program to

187
00:10:48.388 --> 00:10:52.530
do all the parsing and validation of
the code, and know everything that

188
00:10:52.530 --> 00:10:56.410
they need to know to verify these
parameters are the same, right?

189
00:10:56.410 --> 00:11:00.588
So there has to be that
first pass that occurs.

190
00:11:00.588 --> 00:11:03.136
So all I really want you to do is to just

191
00:11:03.136 --> 00:11:07.440
reset your thinking from
the one pass to the two pass.

192
00:11:07.440 --> 00:11:12.612
First, think about there's this pass
that happens to validate my program,

193
00:11:12.612 --> 00:11:16.521
and it's during that pass that
lexical scope gets set up.

194
00:11:16.521 --> 00:11:19.790
It's during that first
pass that scoping happens.

195
00:11:19.790 --> 00:11:21.630
It is not during the second pass,

196
00:11:21.630 --> 00:11:26.950
which is what most of us have sort
of loosely come to believe, okay?

197
00:11:28.900 --> 00:11:31.260
So JavaScript is absolutely
a compile language.

198
00:11:31.260 --> 00:11:35.260
As a matter of fact, I would make the case
that that compiler architecture that I

199
00:11:35.260 --> 00:11:38.760
just quickly alluded to there is
vastly more sophisticated than

200
00:11:38.760 --> 00:11:42.300
any compiler architecture for
any other language in existence.

201
00:11:42.300 --> 00:11:45.737
Because we're demanding so much more of
JavaScript, and they've come up with all

202
00:11:45.737 --> 00:11:48.897
these different techniques that were
never even relevant to other things.

203
00:11:48.897 --> 00:11:53.360
For the C++ compiler to be a JIT compiler
wouldn't even make sense, right?

204
00:11:53.360 --> 00:11:58.270
Cuz you do all AOT,
it's all ahead-of-time compilation.

205
00:11:58.270 --> 00:12:03.500
So JavaScript has to do a whole lot more,
it's a lot more sophisticated.

206
00:12:03.500 --> 00:12:08.376
Now, [COUGH] I'm gonna make this
statement, there is an asterisk

207
00:12:08.376 --> 00:12:13.087
here when I say JavaScript
organizes its scopes by functions.

208
00:12:13.087 --> 00:12:15.079
That's not entirely true.

209
00:12:15.079 --> 00:12:18.953
We are gonna talk about block
skipping later in this unit.

210
00:12:18.953 --> 00:12:22.219
But for now,
we're gonna simplify things and

211
00:12:22.219 --> 00:12:26.250
say the individual unit of
scope is the function, okay?

212
00:12:28.890 --> 00:12:33.890
So here's a piece of code
that is deceptively simple.

213
00:12:33.890 --> 00:12:38.135
This piece of code doesn't
even look like it does much,

214
00:12:38.135 --> 00:12:39.660
cuz it just makes some variables.

215
00:12:39.660 --> 00:12:42.990
There's no logic or branching or
looping or any of that stuff.

216
00:12:42.990 --> 00:12:46.472
So you'd be inclined to just sort
of skip over it and say, well,

217
00:12:46.472 --> 00:12:48.418
this isn't all that interesting.

218
00:12:48.418 --> 00:12:52.345
I'm probably gonna have this slide up for
20 or 30 minutes,

219
00:12:52.345 --> 00:12:55.626
cuz there's way more to this
than you think there is.

220
00:12:55.626 --> 00:12:59.161
For us to fully unpack what it means for
this to be a two pass system,

221
00:12:59.161 --> 00:13:02.697
to start to rewire our brains to
start to think a little bit more like

222
00:13:02.697 --> 00:13:04.450
the JavaScript engine.

223
00:13:04.450 --> 00:13:08.980
The vast majority of
the complexity of compiler theory

224
00:13:08.980 --> 00:13:11.530
is not stuff we need to
concern ourselves with.

225
00:13:11.530 --> 00:13:14.510
People like me like to obsess about it,
but it's not

226
00:13:14.510 --> 00:13:19.100
necessary that you'd be a compiler
theorist to understand JavaScript.

227
00:13:19.100 --> 00:13:23.790
But there are a few things that you should
be at least moderately aware of, okay?

228
00:13:23.790 --> 00:13:27.209
So I will use a few different terminology,
a few different concepts.

229
00:13:27.209 --> 00:13:30.825
But for the most part, the only thing
we're really concerned with is in

230
00:13:30.825 --> 00:13:33.776
that first pass when we compile the code,
we wanna look for

231
00:13:33.776 --> 00:13:37.466
all the variable declarations and
all the scopes that they get added to.

232
00:13:37.466 --> 00:13:40.876
That's the important part,
don't worry about tokenization or

233
00:13:40.876 --> 00:13:43.492
abstract syntax trees or
any of that other stuff.

234
00:13:43.492 --> 00:13:47.260
All we wanna care about is how do
those buckets get created, and

235
00:13:47.260 --> 00:13:49.878
how do we sort those marbles
into those different buckets?

236
00:13:49.878 --> 00:13:55.047
Make sense?
&gt;&gt; Kyle Simpson: So to do that,

237
00:13:55.047 --> 00:13:59.975
I've got a little trick that I
do when I teach this material,

238
00:13:59.975 --> 00:14:04.243
and it's gonna feel silly and
a little bit strange.

239
00:14:04.243 --> 00:14:07.960
If you're listening live or
if you're watching this video later,

240
00:14:07.960 --> 00:14:10.568
even if you're not
actually physically here,

241
00:14:10.568 --> 00:14:14.037
I'm going to encourage you to do this,
even if it seems silly.

242
00:14:14.037 --> 00:14:18.871
I'm gonna take you through a little
exercise here where we have

243
00:14:18.871 --> 00:14:20.977
an out loud conversation.

244
00:14:20.977 --> 00:14:24.921
And the things that we say are gonna
sound a little bit ridiculous,

245
00:14:24.921 --> 00:14:29.229
but it's okay because we're just
doing this all together, all right?

246
00:14:29.229 --> 00:14:31.926
So we're all gonna sound
ridiculous together.

247
00:14:31.926 --> 00:14:36.794
It's a little teacher trick that we
use to help something that's a bit

248
00:14:36.794 --> 00:14:40.192
abstract get stuck virally in your head,
okay?

249
00:14:40.192 --> 00:14:42.877
So I'm just being completely
transparent about it.

250
00:14:42.877 --> 00:14:46.800
It's silly on purpose because it helps
something that you otherwise wouldn't

251
00:14:46.800 --> 00:14:49.090
really think about that much.

252
00:14:49.090 --> 00:14:50.020
It helps it get stuck,

253
00:14:50.020 --> 00:14:53.540
and the important part is not that
you'll ever repeat this exercise.

254
00:14:53.540 --> 00:14:56.210
You'll never actually say
these things ever again.

255
00:14:56.210 --> 00:14:59.560
But the concept will get stuck
virally in your head, okay?

256
00:15:00.630 --> 00:15:03.630
So we're gonna go through a conversation

257
00:15:03.630 --> 00:15:05.689
that the different parts of
the JavaScript engine have.

258
00:15:07.080 --> 00:15:09.360
Fancy word, we're gonna anthropomorphize.

259
00:15:09.360 --> 00:15:12.930
That means to take something that's
not a human and treat it as if it is.

260
00:15:12.930 --> 00:15:17.240
We're gonna anthropomorphize the parts of
the JavaScript engine that are relevant,

261
00:15:17.240 --> 00:15:23.580
and eavesdrop on a conversation that's
occurring as this code is being processed.

262
00:15:23.580 --> 00:15:25.552
And I style it as a conversation so

263
00:15:25.552 --> 00:15:30.423
that we understand the different
responsibilities, and how they're divided.

264
00:15:30.423 --> 00:15:35.356
So that's why we talk as if these are two
different people having a conversation,

265
00:15:35.356 --> 00:15:38.227
and we're gonna go through
this in two passes.

266
00:15:38.227 --> 00:15:43.300
So the first pass through this code, we're
going to be doing that compiling step,

267
00:15:43.300 --> 00:15:45.630
that looking for lexical scope step.

268
00:15:45.630 --> 00:15:50.562
And [COUGH] we're going to be having
a conversation or listening in or

269
00:15:50.562 --> 00:15:55.249
pretending to have a conversation
between these two entities.

270
00:15:55.249 --> 00:16:00.031
The first one would be the compiler
itself, it's actually processing the code.

271
00:16:00.031 --> 00:16:04.454
And the second one is gonna be the scope
manager, that's the kid at the playground

272
00:16:04.454 --> 00:16:09.150
that manages the buckets, and
puts the marbles into the buckets, okay?

273
00:16:09.150 --> 00:16:14.000
These two are gonna have a conversation
as this code is processed, and

274
00:16:14.000 --> 00:16:17.090
the goal is to set up those buckets and
properly sort the marbles.

275
00:16:18.680 --> 00:16:22.034
And that conversation is gonna
start a little something like this.

276
00:16:22.034 --> 00:16:26.088
We're gonna start on line 1, we're gonna
be looking for formal declarations,

277
00:16:26.088 --> 00:16:29.920
formal declarations of variables, and
formal declarations of functions.

278
00:16:30.990 --> 00:16:35.310
Line 1 is a formal variable declaration,
because we see var keyword there.

279
00:16:35.310 --> 00:16:38.670
Line 3 is a formal function declaration
cuz, we see the function keyword there.

280
00:16:39.740 --> 00:16:44.251
There are informal declarations,
which we do not care about,

281
00:16:44.251 --> 00:16:47.496
we're only looking for formal ones, okay?

282
00:16:47.496 --> 00:16:49.298
So we get to line 1, we're the compiler,

283
00:16:49.298 --> 00:16:51.410
and we're gonna be talking
to the scope manager.

284
00:16:51.410 --> 00:16:54.882
We get to line 1, we're gonna say,
I'm the compiler speaking,

285
00:16:54.882 --> 00:16:58.230
hey global scope manager,
because I'm in the global scope, so

286
00:16:58.230 --> 00:17:00.467
I'm talking to the global scope manager.

287
00:17:00.467 --> 00:17:03.847
Hey global scope manager,
I found a formal declaration for foo, and

288
00:17:03.847 --> 00:17:05.604
then I'm gonna ask this question.

289
00:17:05.604 --> 00:17:07.347
I'm gonna say, have you ever heard of him?

290
00:17:07.347 --> 00:17:11.420
Now, the question might seem irrelevant,
but actually,

291
00:17:11.420 --> 00:17:16.553
the question is really important,
because the question lets you in on that

292
00:17:16.553 --> 00:17:21.377
division of responsibility, and
that's important to keep string.

293
00:17:21.377 --> 00:17:25.012
So the compiler is saying,
I don't know whether this variable exists,

294
00:17:25.012 --> 00:17:28.538
who's the only one that can answer
is this marble's ever been found?

295
00:17:28.538 --> 00:17:29.720
The scope manager.

296
00:17:29.720 --> 00:17:33.466
So hey, scope manager,
you ever seen this red marble before?

297
00:17:33.466 --> 00:17:36.393
I have a formal declaration for a variable
called foo, have you ever heard of him?

298
00:17:36.393 --> 00:17:41.481
And there's only two answers,
yes, or no, okay?

299
00:17:41.481 --> 00:17:45.225
In this case, what's the answer gonna be?
&gt;&gt; Speaker 3: No.

300
00:17:45.225 --> 00:17:46.590
&gt;&gt; Kyle Simpson: No, never heard of him,

301
00:17:46.590 --> 00:17:51.149
but now that you mention it, I'll go ahead
and put that marble into the red bucket.

302
00:17:51.149 --> 00:17:53.659
So now we have a red bucket
with a red marble in it.

303
00:17:53.659 --> 00:17:57.577
The variable foo has been registered
into the global scope, okay?

304
00:17:57.577 --> 00:18:01.317
You notice we didn't pay any attention to
what was going on on the right-hand side,

305
00:18:01.317 --> 00:18:04.597
the equal sign, that's all executable
code, we'll get to that later.

306
00:18:04.597 --> 00:18:08.782
All we care about now is these formal
decorations and sorting out the marbles.

