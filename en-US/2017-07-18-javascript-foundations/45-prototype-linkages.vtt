WEBVTT

1
00:00:00.490 --> 00:00:03.170
&gt;&gt; Kyle Simpson: Now,
let me throw a wrench into the mix.

2
00:00:03.170 --> 00:00:08.030
What happens if I were to add and
identify right here?

3
00:00:08.030 --> 00:00:09.890
And then I called a1 that identify.

4
00:00:10.960 --> 00:00:11.910
Where is it gonna find it?

5
00:00:13.360 --> 00:00:13.950
&gt;&gt; Speaker 2: One a1.

6
00:00:13.950 --> 00:00:14.830
&gt;&gt; Kyle Simpson: It's
gonna find it right here.

7
00:00:14.830 --> 00:00:17.820
So we're gonna be calling line 13.

8
00:00:17.820 --> 00:00:21.704
What is the disk key we're gonna
be pointing at on line 13?

9
00:00:21.704 --> 00:00:22.512
&gt;&gt; Speaker 3: A1.

10
00:00:22.512 --> 00:00:24.674
&gt;&gt; Kyle Simpson: Still a1,
do you see the problem?

11
00:00:24.674 --> 00:00:28.156
We're gonna have this like circular
recursion thing where we keep calling

12
00:00:28.156 --> 00:00:28.773
this thing.

13
00:00:28.773 --> 00:00:32.224
Because we want to like
class oriented coding,

14
00:00:32.224 --> 00:00:35.773
relatively polymorphically
refer to that one.

15
00:00:35.773 --> 00:00:38.545
But because we are using this keyword,

16
00:00:38.545 --> 00:00:41.991
it's just gonna infinitely
recurse on itself.

17
00:00:41.991 --> 00:00:47.548
So what do you think we should do to get
from this function to that function?

18
00:00:49.619 --> 00:00:52.847
&gt;&gt; Kyle Simpson: Well,
we could try calling the,

19
00:00:52.847 --> 00:00:57.241
this.__proto__.identify, right?

20
00:00:57.241 --> 00:01:02.558
We could say this.__proto__.identify,
but there's a problem here.

21
00:01:02.558 --> 00:01:03.719
That isn't gonna work.

22
00:01:03.719 --> 00:01:07.380
It's not gonna print out the a1.

23
00:01:07.380 --> 00:01:08.804
Can you spot why?

24
00:01:08.804 --> 00:01:09.694
&gt;&gt; Speaker 2: Of this context.

25
00:01:09.694 --> 00:01:11.026
&gt;&gt; Kyle Simpson: This context.

26
00:01:11.026 --> 00:01:15.625
When we call that identify up on line 6,
what is the keyboard gonna point at?

27
00:01:15.625 --> 00:01:16.725
&gt;&gt; Speaker 2: On the proto.

28
00:01:16.725 --> 00:01:22.188
&gt;&gt; Kyle Simpson: It's gonna point at
the Foo.prototype object, not at a1.

29
00:01:22.188 --> 00:01:28.069
So that's not gonna work we
can't say this._.proto.identify

30
00:01:28.069 --> 00:01:34.375
we'd actually have to say
this._proto.identify.call(this).

31
00:01:34.375 --> 00:01:35.509
Which sucks.

32
00:01:35.509 --> 00:01:40.580
But there's a bigger reason why it sucks,
because we use 1_proto there.

33
00:01:40.580 --> 00:01:45.760
But guess what happens if someday later,
we come along and we add another X object

34
00:01:45.760 --> 00:01:50.950
into the chain, and
then we call X.identify.

35
00:01:50.950 --> 00:01:52.269
Does X have been identify?

36
00:01:53.826 --> 00:01:55.004
&gt;&gt; Kyle Simpson: So where we gonna go?

37
00:01:55.004 --> 00:01:57.503
&gt;&gt; Speaker 2: A1 [INAUDIBLE]
&gt;&gt; Kyle Simpson: Here.

38
00:01:57.503 --> 00:02:00.589
Now, we gonna recalling that identify
function the line 14, if you will.

39
00:02:01.880 --> 00:02:04.690
What is this keyword,
we're gonna be pointing at on line 14?

40
00:02:04.690 --> 00:02:05.710
&gt;&gt; Speaker 2: X.

41
00:02:05.710 --> 00:02:08.390
&gt;&gt; Kyle Simpson: X, so
we're gonna go X dubbed under proto and

42
00:02:08.390 --> 00:02:11.670
get right back to here and
have our infinite recursion.

43
00:02:11.670 --> 00:02:13.280
How many dunder protos do we need now?

44
00:02:14.720 --> 00:02:15.590
&gt;&gt; Speaker 2: Two.

45
00:02:15.590 --> 00:02:16.640
&gt;&gt; Kyle Simpson: We need two.

46
00:02:16.640 --> 00:02:19.643
If you add another object now,
you need three.

47
00:02:19.643 --> 00:02:24.208
So every time you extend your inheritance
chain, you're gonna have to go back and

48
00:02:24.208 --> 00:02:27.196
fix all those references and
add more dunder protos.

49
00:02:27.196 --> 00:02:29.479
But that's not even the worst part.

50
00:02:29.479 --> 00:02:33.209
Let's say we did change that line
14 to have dunder protos in it?

51
00:02:33.209 --> 00:02:36.822
Then you call a1.dunder.identify,
what's gonna happen?

52
00:02:36.822 --> 00:02:37.961
&gt;&gt; Speaker 2: It's gonna break.

53
00:02:37.961 --> 00:02:41.633
&gt;&gt; Kyle Simpson: It's gonna go from here
to here, and then from here to here,

54
00:02:41.633 --> 00:02:43.729
does this one have an identifier?

55
00:02:43.729 --> 00:02:44.961
Not gonna work.

56
00:02:44.961 --> 00:02:49.807
The point I'm trying to make is it's
impossible to know how many dunder

57
00:02:49.807 --> 00:02:51.032
protos you need.

58
00:02:51.032 --> 00:02:55.039
Because the this and
dunder proto system is not relative,

59
00:02:55.039 --> 00:02:59.748
the way class-oriented coding gives
us relative polymorphism That

60
00:02:59.748 --> 00:03:04.414
mechanism is not relative, it's always
absolute to the bottom of the chain.

61
00:03:04.414 --> 00:03:06.877
So you can't do relative polymorphism.

62
00:03:06.877 --> 00:03:10.744
You can override a function which
is what you do in polymorphism.

63
00:03:10.744 --> 00:03:15.043
You make a child class with the method and
you override it, and call it super,

64
00:03:15.043 --> 00:03:17.769
you don't have that with
the prototype system.

65
00:03:19.070 --> 00:03:21.870
So you know what you end up having
to do to make a reliable reference?

66
00:03:22.900 --> 00:03:26.945
You have to skip the prototype chain
entirely and just do it like that.

67
00:03:26.945 --> 00:03:33.164
Foo.prototype.identify.call(this) which
completely skips out on

68
00:03:33.164 --> 00:03:39.390
the whole prototype chain and totally
shoots all the dynamism in the foot.

69
00:03:40.960 --> 00:03:42.320
I have a term for

70
00:03:42.320 --> 00:03:46.450
that foo.prototype.identify.call(this)
which is such a mouthful.

71
00:03:46.450 --> 00:03:50.510
Mostly, I just made this term
up to make myself feel smarter.

72
00:03:50.510 --> 00:03:53.640
Here's the term,
explicit pseudopolymorphism.

73
00:03:55.430 --> 00:03:58.443
I just felt I sound smart when I say it,
don't I?

74
00:03:58.443 --> 00:04:03.384
That's trademark by the way, don't steal
that, explicit pseudopolymorphism.

75
00:04:03.384 --> 00:04:08.292
Because it's not really polymorphic,
it's not using the prototype chain.

76
00:04:08.292 --> 00:04:12.712
And we have to explicitly
tell it which method to call,

77
00:04:12.712 --> 00:04:15.701
we can't relatively figure it out.

78
00:04:17.526 --> 00:04:20.646
&gt;&gt; Kyle Simpson: Take away here is,
you opt into this problems.

79
00:04:20.646 --> 00:04:24.770
These problems of explicit
pseudopolymorphism when you choose

80
00:04:24.770 --> 00:04:25.922
to do shadowing.

81
00:04:25.922 --> 00:04:31.470
Because you called identify and
identify, you opt into that problem.

82
00:04:31.470 --> 00:04:34.610
Now, you might just say, well, that's
cool, I just won't opt into that problem,

83
00:04:34.610 --> 00:04:35.800
I just won't shadow.

84
00:04:36.940 --> 00:04:38.583
I agree, you should not shadow.

85
00:04:38.583 --> 00:04:42.764
But if you don't shadow, you lose one
of the most important parts of all of

86
00:04:42.764 --> 00:04:46.958
class oriented design, which is
method overwriting and polymorphism.

87
00:04:48.708 --> 00:04:52.207
&gt;&gt; Kyle Simpson: In clustering to design
they tell you make a method in the child

88
00:04:52.207 --> 00:04:55.168
class override it,
call the base parent was super,

89
00:04:55.168 --> 00:04:58.122
you lose that if you do shadowing.

90
00:04:58.122 --> 00:05:01.101
&gt;&gt; Kyle Simpson: So
maybe this system is great, but

91
00:05:01.101 --> 00:05:05.533
maybe it's not so
great at representing classes.

92
00:05:10.734 --> 00:05:14.974
&gt;&gt; Kyle Simpson: On the other hand,
if we have methods of different names,

93
00:05:14.974 --> 00:05:18.880
like I have here,
I have both a speak and an identify.

94
00:05:18.880 --> 00:05:24.125
If I say this.identify on line 11,
what is the this key we're gonna point at?

95
00:05:25.738 --> 00:05:27.402
&gt;&gt; Speaker 2: A1.

96
00:05:27.402 --> 00:05:30.244
&gt;&gt; Kyle Simpson: A1, so
I started out at A1.speak on line 16,

97
00:05:30.244 --> 00:05:33.847
went up to find speak on the prototype,
then I came back to A1.

98
00:05:33.847 --> 00:05:37.421
And now, I walk back up and
find it on identify, and

99
00:05:37.421 --> 00:05:41.850
what's the this keyword
on line 6 gonna point at?

100
00:05:41.850 --> 00:05:42.430
&gt;&gt; Speaker 2: A1.

101
00:05:42.430 --> 00:05:43.480
&gt;&gt; Kyle Simpson: Still a1.

102
00:05:43.480 --> 00:05:46.974
No matter how many times I have to
walk up to prototype chain, and

103
00:05:46.974 --> 00:05:49.967
no matter how far up the prototype
chain I need to look.

104
00:05:49.967 --> 00:05:54.740
We always stay rooted at the call sign,
which is the object that we care about.

105
00:05:54.740 --> 00:05:56.300
I call this super unicorn magic.

106
00:05:57.390 --> 00:05:59.210
It's a beautifully designed system.

107
00:06:00.600 --> 00:06:04.930
It only falls apart when you're
try to do shadowing, aka,

108
00:06:04.930 --> 00:06:06.690
when you try to put classes on top of it.

109
00:06:08.700 --> 00:06:12.433
It's a great system,
it's just not a great class system.

