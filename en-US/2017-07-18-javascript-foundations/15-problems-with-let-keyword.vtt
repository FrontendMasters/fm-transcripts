WEBVTT

1
00:00:00.220 --> 00:00:01.540
&gt;&gt; Kyle Simpson: What about for loops?

2
00:00:01.540 --> 00:00:04.740
How many of you do the for
var i equals thing all the time?

3
00:00:04.740 --> 00:00:07.590
Anybody put your variable
declarations in your for loops?

4
00:00:07.590 --> 00:00:09.700
This is a strong habit of mine.

5
00:00:09.700 --> 00:00:13.220
I put that var right there and
I don't even think about it sometimes.

6
00:00:13.220 --> 00:00:18.540
I'm going to strongly suggest, as a matter
of fact, another one of those rare places

7
00:00:18.540 --> 00:00:24.110
where I'll make, I will say that I
have not come up with any reason

8
00:00:24.110 --> 00:00:29.131
at all, at least not yet, why you would
want to continue doing for (var i.

9
00:00:30.270 --> 00:00:34.840
There's no place where for (var i is gonna
be more preferrable than four (let i.

10
00:00:36.790 --> 00:00:40.740
The let declaration on the for loop is
always gonna be preferrable to the var.

11
00:00:41.910 --> 00:00:44.320
So I just wholesale switched to that.

12
00:00:44.320 --> 00:00:45.850
I just always make my for

13
00:00:45.850 --> 00:00:48.780
loops with let key roots in them
instead of with var key roots in them.

14
00:00:50.350 --> 00:00:54.890
One of the reasons for that is,
I consider it to be a poor coding style

15
00:00:54.890 --> 00:00:57.850
to create a variable that I'm going
to iterate over in a four loop.

16
00:00:57.850 --> 00:01:03.010
And then, be able to access that
variable on the outside of the for loop.

17
00:01:03.010 --> 00:01:05.540
You can do that, and
I certainly did that a bunch.

18
00:01:05.540 --> 00:01:08.190
But, in retrospect,
I wish I hadn't done that.

19
00:01:08.190 --> 00:01:11.240
So, what I wish I had done is what I
am doing here, which is essentially

20
00:01:11.240 --> 00:01:14.870
creating another variable on the outside
that you can capture whatever thing

21
00:01:14.870 --> 00:01:17.420
you need on the inside of loop,
and then use that variable.

22
00:01:17.420 --> 00:01:21.270
Here I could be capturing the value
of i into this result variable and

23
00:01:21.270 --> 00:01:22.840
using it on the outside.

24
00:01:22.840 --> 00:01:25.249
That's yet another hint for your exercise.

25
00:01:25.249 --> 00:01:25.749
Okay?

26
00:01:28.719 --> 00:01:30.873
&gt;&gt; Kyle Simpson: So
you notice that I'm using the var for

27
00:01:30.873 --> 00:01:35.030
a variable that is intended to
be used across multiple scopes.

28
00:01:35.030 --> 00:01:36.280
That's what var is better at.

29
00:01:37.380 --> 00:01:42.360
I could switch that to a let but
here is why not to switch that to let.

30
00:01:42.360 --> 00:01:46.740
The presence of var keyword already has
strong president in people's minds.

31
00:01:46.740 --> 00:01:49.810
It's a variable that attaches
to the whole function and

32
00:01:49.810 --> 00:01:52.010
sometimes that 's exactly what you want.

33
00:01:52.010 --> 00:01:53.590
If you switch that to let.

34
00:01:53.590 --> 00:01:57.900
You have removed that stylistic
signal from the reader of your code.

35
00:01:57.900 --> 00:01:59.640
Now they see a let result there and

36
00:01:59.640 --> 00:02:02.590
they don't know if you mean to
only use it on that one line or

37
00:02:02.590 --> 00:02:07.170
if you mean to use it throughout
the entire function, you can't tell.

38
00:02:07.170 --> 00:02:09.700
But if you use a var,
you're signaling to them,

39
00:02:09.700 --> 00:02:14.230
this variable is intentionally left scope
to the whole function cuz guess what

40
00:02:14.230 --> 00:02:17.800
its probably gonna be used in a bunch of
places, so go ahead and keep using it.

41
00:02:19.070 --> 00:02:20.540
When we say let, we are going to say,

42
00:02:20.540 --> 00:02:23.780
hey neon sign, this thing is
only going to exist right here.

43
00:02:23.780 --> 00:02:29.110
Having both those keywords in your code is
a stronger stylistic signal difference.

44
00:02:29.110 --> 00:02:31.570
That helps readability.

45
00:02:31.570 --> 00:02:32.590
If you this and

46
00:02:32.590 --> 00:02:36.039
just switch all your vars to lets then
you lose out on that stylistic signal.

47
00:02:37.890 --> 00:02:42.170
The fact is, some of your variables
will need to be function scoped and

48
00:02:42.170 --> 00:02:43.930
some of them should be block scoped.

49
00:02:44.990 --> 00:02:47.800
So it should be let plus var,
not let instead of var.

50
00:02:55.427 --> 00:02:57.552
&gt;&gt; Kyle Simpson: Some people
are asking me, well, okay,

51
00:02:57.552 --> 00:03:01.340
that's just a stylistic thing,
why would I really need to still use var?

52
00:03:01.340 --> 00:03:03.960
There are places where I
consider var to still be useful.

53
00:03:03.960 --> 00:03:07.760
One of those places where I
think var is still useful

54
00:03:07.760 --> 00:03:12.570
is when I want a variable declaration
to escape an unintentional block.

55
00:03:12.570 --> 00:03:14.230
This is one of those places.

56
00:03:14.230 --> 00:03:17.929
I don't know if anybody else uses try
catches, but I regularly will either put

57
00:03:17.929 --> 00:03:21.306
them in intentionally, or
add them in when I'm debugging something.

58
00:03:21.306 --> 00:03:26.079
And if I had used let id here to declare
the id variable, and then gone back and

59
00:03:26.079 --> 00:03:30.880
wrapped a try around it,
do you spot what the problem would be?

60
00:03:30.880 --> 00:03:35.610
Coz now all of a sudden my id variable
would only exist inside of the try clause

61
00:03:35.610 --> 00:03:39.270
or the catch clause and
wouldn't be accessible on the outside, so

62
00:03:39.270 --> 00:03:40.620
I'd create a different problem.

63
00:03:43.580 --> 00:03:47.570
This is one of those place where rather
than create declaration separately and

64
00:03:47.570 --> 00:03:48.890
use it or whatever.

65
00:03:48.890 --> 00:03:52.704
The var keyword is more helpful cuz it
can escape this unintentional scope.

66
00:03:55.020 --> 00:03:58.970
I'm also illustrating another thing
that I really find to be useful here.

67
00:03:58.970 --> 00:04:02.940
You might wonder why did I re
declare var in the catch clause.

68
00:04:03.990 --> 00:04:07.380
We know that var is gonna
belong only once to the code.

69
00:04:07.380 --> 00:04:09.200
Why did I re declare var?

70
00:04:09.200 --> 00:04:13.050
It's because I have this belief
that a variable declaration for

71
00:04:13.050 --> 00:04:15.650
readability sake only, that a variable

72
00:04:15.650 --> 00:04:20.520
declaration should be as close as possible
to the first usage of that variable.

73
00:04:21.840 --> 00:04:25.140
If I declare a variable online one of
my function but I don't use it for

74
00:04:25.140 --> 00:04:29.040
a thousand lines, and
then I'm down 1,000 lines and

75
00:04:29.040 --> 00:04:32.270
I'm looking at the usage of the variable,
I have to go looking for

76
00:04:32.270 --> 00:04:34.500
where it was declared so
I know what scope it belongs to.

77
00:04:35.780 --> 00:04:39.010
Why not put the declaration
as close as possible

78
00:04:39.010 --> 00:04:42.300
to where it's gonna be
used?And that also goes for

79
00:04:42.300 --> 00:04:47.450
if I'm gonna use it in multiple
different locations within a function.

80
00:04:47.450 --> 00:04:52.010
A rule of thumb that I use is,
if I cannot see on one screen

81
00:04:52.010 --> 00:04:56.640
the usage of a variable and
where it was declared, I redeclare it.

82
00:04:58.030 --> 00:05:02.200
So if I use it on line 1, and then 1,000
lines later I use it again, I go ahead and

83
00:05:02.200 --> 00:05:06.210
redeclare it down there so that it's
super obvious what scope it belongs to.

84
00:05:06.210 --> 00:05:10.280
I can do that with the var keyword,
I cannot do that with the let keyword.

85
00:05:10.280 --> 00:05:11.835
Let keywords can't be repeated,

86
00:05:11.835 --> 00:05:14.200
it would through an error if
you try to do a let twice.

87
00:05:14.200 --> 00:05:16.683
Yes.

88
00:05:16.683 --> 00:05:20.349
&gt;&gt; Speaker 2: I was, in my head I was
trying to figure out, my question

89
00:05:20.349 --> 00:05:25.035
was going to be so why so often do you
see all the declaration for the top?

90
00:05:25.035 --> 00:05:27.828
Why is that being talked cuz clearly
someone's teaching it cuz when I go to

91
00:05:27.828 --> 00:05:29.700
other code bases,
I see it that all the time.

92
00:05:29.700 --> 00:05:30.270
&gt;&gt; Kyle Simpson: Yep.
&gt;&gt; Speaker 2: And

93
00:05:30.270 --> 00:05:33.100
I sort of answered that in my
head thinking well, don't I know,

94
00:05:33.100 --> 00:05:36.150
want to know at the top of the scope,
what are my variables are?

95
00:05:36.150 --> 00:05:39.050
So I know what I can name because if I'm
declaring something in the middle of

96
00:05:39.050 --> 00:05:41.870
the code, I have to go look for it first.

97
00:05:41.870 --> 00:05:43.500
&gt;&gt; Kyle Simpson: Why?
&gt;&gt; Speaker 2: To make sure that

98
00:05:43.500 --> 00:05:45.020
it's not already been declared.

99
00:05:45.020 --> 00:05:47.900
&gt;&gt; Kyle Simpson: Not if you redeclared
it everytime it's been used within your

100
00:05:47.900 --> 00:05:49.780
visual context of what you can see.

101
00:05:49.780 --> 00:05:54.420
If you declare it everywhere with a var,
you can clearly see what scope it's in.

102
00:05:54.420 --> 00:05:57.800
And it should be okay to you
to reuse a variable name

103
00:05:57.800 --> 00:06:01.030
if the word id is the right name for
a variable.

104
00:06:01.030 --> 00:06:04.850
But you mean different things by id
in different parts of the function.

105
00:06:04.850 --> 00:06:07.420
To me I don't think you need to
necessarily come up with different

106
00:06:07.420 --> 00:06:08.570
variable names.

107
00:06:08.570 --> 00:06:09.690
Use the right variable name and

108
00:06:09.690 --> 00:06:12.490
if you need to reuse the variable
that should be totally okay.

109
00:06:12.490 --> 00:06:15.580
If you reuse it, re-declare it so
that it's super obvious,

110
00:06:15.580 --> 00:06:19.290
this is where this thing is coming from,
it's coming from this function scope.

111
00:06:19.290 --> 00:06:24.350
I used to teach as did a bunch of people
for like a decade, manual hoisting.

112
00:06:24.350 --> 00:06:27.180
Put all of your variable declarations
at the top of your function.

113
00:06:27.180 --> 00:06:29.270
I take my vars out of my for loops,

114
00:06:29.270 --> 00:06:31.450
and put my var i [LAUGH]
at the top of my thing.

115
00:06:31.450 --> 00:06:36.980
Like, I did it wholesale, exactly what
you're saying and I now regret that.

116
00:06:36.980 --> 00:06:40.490
Because what I did was erase all
the semantic signals, like for

117
00:06:40.490 --> 00:06:44.460
example putting it inside the if
statement a few slides ago.

118
00:06:44.460 --> 00:06:49.010
I erased all of those stylistic
semantic signals of where the intent,

119
00:06:49.010 --> 00:06:51.030
the intended usage was.

120
00:06:51.030 --> 00:06:54.340
So no I don't think we should put all
our variables at the top of a function.

121
00:06:54.340 --> 00:06:57.120
You should ideally not
have the declaration

122
00:06:57.120 --> 00:07:00.790
any more visually separated from its usage
than what you can see on one screen.

123
00:07:01.790 --> 00:07:04.600
That would be my recommendation for
readability.

