WEBVTT

1
00:00:00.350 --> 00:00:02.560
&gt;&gt; Kyle Simpson: All right,
let's talk about exercise two.

2
00:00:02.560 --> 00:00:05.062
Hopefully, you got a chance
to read through the readme.

3
00:00:05.062 --> 00:00:08.804
And you'll notice that the readme
mentions several things that we should be

4
00:00:08.804 --> 00:00:09.513
looking for.

5
00:00:09.513 --> 00:00:13.571
The first of which was, are there
anonymous function expressions that ought

6
00:00:13.571 --> 00:00:15.970
to be name function expressions?

7
00:00:15.970 --> 00:00:19.429
So to call your attention
to one such example,

8
00:00:19.429 --> 00:00:23.954
in EX2.js we have this handle
click function that's being

9
00:00:23.954 --> 00:00:28.937
declared as a variable, and
then added to the click handler here.

10
00:00:28.937 --> 00:00:33.929
Now in general, I would say, that one
probably should go ahead and be its own

11
00:00:33.929 --> 00:00:39.629
function declaration, cuz it's got several
lines of code to it, 15 lines of code.

12
00:00:39.629 --> 00:00:42.270
Typically I'd go into make
that a function declaration.

13
00:00:42.270 --> 00:00:45.160
But there was a different reason why
I chose not to make it a function

14
00:00:45.160 --> 00:00:46.270
declaration.

15
00:00:46.270 --> 00:00:50.050
If you saw in the solution file,
I chose to block scope this one.

16
00:00:50.050 --> 00:00:53.590
And it's because basically this
function really only exists for

17
00:00:53.590 --> 00:00:58.330
one particular purpose and that is,
this line work gets attached.

18
00:00:58.330 --> 00:01:01.120
So I go ahead and
create it as a block scoped variable.

19
00:01:01.120 --> 00:01:03.452
So I make an explicit block and
declare it.

20
00:01:03.452 --> 00:01:06.304
I set it to this variable,
and then I give it a name.

21
00:01:06.304 --> 00:01:08.630
And you notice that here
the name is different.

22
00:01:08.630 --> 00:01:12.900
Here the name makes more sense, because
I'm describing exactly what it's doing.

23
00:01:12.900 --> 00:01:14.560
So there's actually different purposes.

24
00:01:14.560 --> 00:01:18.030
The submitNewWorkEntry tells me
what this thing is gonna do.

25
00:01:18.030 --> 00:01:23.610
HandleClick is more appropriate to
describe what context it's being used in.

26
00:01:23.610 --> 00:01:25.700
It's being used as a click handler.

27
00:01:25.700 --> 00:01:29.410
So there's an example of
using different names,

28
00:01:29.410 --> 00:01:32.870
between the variable it's assigned to and
the function expression name.

29
00:01:32.870 --> 00:01:36.230
That's an example where the different
names were more appropriate.

30
00:01:36.230 --> 00:01:39.160
&gt;&gt; Speaker 2: Is there any reason why
you didn't declare handleClick on

31
00:01:39.160 --> 00:01:40.500
line 11 with let?

32
00:01:41.530 --> 00:01:44.550
&gt;&gt; Kyle Simpson: I typically, in my style,
I typically like to declare my

33
00:01:44.550 --> 00:01:48.430
variable separate, especially cuz I
might be doing multiple variables.

34
00:01:48.430 --> 00:01:51.510
I just put them in one let statement on
that first line, and then use them on

35
00:01:51.510 --> 00:01:55.000
the next few lines, rather than
adding them to the same declaration.

36
00:02:02.009 --> 00:02:07.650
&gt;&gt; Kyle Simpson: Okay, another example of
using the block scoping to our advantage.

37
00:02:07.650 --> 00:02:10.310
It may not have jumped out at
you as terribly obvious, but

38
00:02:10.310 --> 00:02:12.390
in this ad project function.

39
00:02:12.390 --> 00:02:16.870
We create a project ID, but we only use
it on the very next line of that code.

40
00:02:16.870 --> 00:02:19.450
The rest of that function,
it's only three or four lines, but

41
00:02:19.450 --> 00:02:23.660
the rest of that function does
not need the project ID variable.

42
00:02:23.660 --> 00:02:27.570
So from a future-proofing perspective,
since I'm only using it in that one

43
00:02:27.570 --> 00:02:33.100
localized position, I can go ahead
project ID be a blocked scope variable.

44
00:02:33.100 --> 00:02:34.700
So here's an explicit block and

45
00:02:34.700 --> 00:02:39.360
you'll notice I kept project entry data
as a regular variable on the outside

46
00:02:39.360 --> 00:02:43.340
that will get set from the inside,
similar to what we do with for loops.

47
00:02:43.340 --> 00:02:48.250
But now I've gone ahead and declared
project ID to be a blocked scope variable.

48
00:02:48.250 --> 00:02:51.109
It's set and then used and
then it goes away,

49
00:02:51.109 --> 00:02:54.806
because it's all ready been
captured into what it needs.

50
00:02:54.806 --> 00:02:59.468
Even though this a small example of only
a few lines of code, it's an example of

51
00:02:59.468 --> 00:03:04.146
the mindset to approach, ask yourself,
where does a variable need to exist?

52
00:03:04.146 --> 00:03:08.099
And there's a principle in software
engineering called the principle of least

53
00:03:08.099 --> 00:03:11.108
privilege, the principle of
least exposure, which says,

54
00:03:11.108 --> 00:03:13.650
keep something as hidden
as private as necessary.

55
00:03:13.650 --> 00:03:16.556
Only expose it where minimally necessary.

56
00:03:16.556 --> 00:03:18.000
So here I'm monitoring that by saying,

57
00:03:18.000 --> 00:03:21.375
let's only make it accessible to
those couple of lines of code.

58
00:03:21.375 --> 00:03:26.478
Few other places where I used the let,
I put them into for

59
00:03:26.478 --> 00:03:31.916
loops like for example here,
we have a let on that for loop.

60
00:03:31.916 --> 00:03:39.078
And then here's one last example,
you'll notice in the previous code,

61
00:03:39.078 --> 00:03:43.005
in the EX2 unfixed version of the code,

62
00:03:43.005 --> 00:03:47.180
I did VAR entry index there on line 115.

63
00:03:47.180 --> 00:03:48.734
And I set that entry index or

64
00:03:48.734 --> 00:03:52.230
it just got incremented as it
goes through the for loop.

65
00:03:52.230 --> 00:03:55.140
That entry index is then
used outside of the for

66
00:03:55.140 --> 00:03:57.984
loop down here on line 122 and elsewhere.

67
00:03:57.984 --> 00:04:02.090
So I'm using a variable that's
being updated by the for

68
00:04:02.090 --> 00:04:04.230
loop outside of the for loop.

69
00:04:04.230 --> 00:04:06.360
As I said earlier in my lecture,

70
00:04:06.360 --> 00:04:09.020
that's typically not a style that
I would recommend you doing.

71
00:04:09.020 --> 00:04:11.650
Of course it works, but
it's not a style I'd recommend

72
00:04:11.650 --> 00:04:14.010
because it can be a little bit
more confusing to somebody.

73
00:04:14.010 --> 00:04:16.630
Where does it come from, and
what value is it gonna have?

74
00:04:16.630 --> 00:04:18.510
So I wanted to be a bit
more explicit about it, so

75
00:04:18.510 --> 00:04:20.320
what I did was use block scoping.

76
00:04:20.320 --> 00:04:23.500
I made an entry index that is block scope,
cuz it's only needed for

77
00:04:23.500 --> 00:04:24.740
this one block of scope.

78
00:04:26.150 --> 00:04:30.810
And I used a let on the for
loop to create an i that only exists for

79
00:04:30.810 --> 00:04:32.540
the purpose of the for loop.

80
00:04:32.540 --> 00:04:35.810
And you'll notice that when I decided
to break the for loop, I went ahead and

81
00:04:35.810 --> 00:04:40.330
captured the value of i into
the entry index and then used it.

82
00:04:41.490 --> 00:04:44.350
So I kept the i for
the purposes of the for loop.

83
00:04:44.350 --> 00:04:49.200
I kept the entry index for the purposes
of this if statement, rather than

84
00:04:49.200 --> 00:04:53.059
making the let in the if statement and
made an explicit block of scope for it.

85
00:04:59.404 --> 00:05:02.570
&gt;&gt; Kyle Simpson: [COUGH] One last
thing mentioned in the readme.

86
00:05:02.570 --> 00:05:06.790
It asks, do we need some costs?

87
00:05:06.790 --> 00:05:10.582
Well, it turns out there were a couple
of places where I was doing variable

88
00:05:10.582 --> 00:05:14.206
declarations before, in particular
these two template variables.

89
00:05:14.206 --> 00:05:18.116
Both of those are templates that are not
ever gonna change throughout the course of

90
00:05:18.116 --> 00:05:18.803
the program.

91
00:05:18.803 --> 00:05:23.630
And they're already immutable values,
cuz strings are immutable values.

92
00:05:23.630 --> 00:05:26.090
So it made sense to go ahead and
declare those as const.

93
00:05:26.090 --> 00:05:29.690
So I went ahead and
declared them as conts.

94
00:05:29.690 --> 00:05:30.732
And while we're at it,

95
00:05:30.732 --> 00:05:33.872
there were a couple different literals
that I was using in the program.

96
00:05:33.872 --> 00:05:38.680
Prior, we were in the validate function,
where is that?

97
00:05:41.148 --> 00:05:45.135
&gt;&gt; Kyle Simpson: In the validate function,
you notice I'm using different literals

98
00:05:45.135 --> 00:05:48.860
here like hard coded the number 5,
600 that sort of thing.

99
00:05:48.860 --> 00:05:51.650
I'm hard coding some of these
literal into the program.

100
00:05:51.650 --> 00:05:57.460
What I decided to do was go ahead and pull
those out as separate const declarations,

101
00:05:57.460 --> 00:05:59.430
and then use those variables.

102
00:05:59.430 --> 00:06:01.400
That does a couple of different things.

103
00:06:01.400 --> 00:06:04.013
First off, at the beginning of
reading this piece of code,

104
00:06:04.013 --> 00:06:07.531
I can see where those are and if I need to
change them I can change them in one spot.

105
00:06:07.531 --> 00:06:11.086
But secondly, those names if I
give them good useful names,

106
00:06:11.086 --> 00:06:14.374
those names now make those
codes more understandable.

107
00:06:14.374 --> 00:06:17.553
So here if I ask description
link less than five,

108
00:06:17.553 --> 00:06:20.510
you don't really know
exactly what five is.

109
00:06:20.510 --> 00:06:23.700
It just looks like a magic,
the number that shows up.

110
00:06:23.700 --> 00:06:28.110
But now when I've given it the name
minWorkDescriptionLength on line 33,

111
00:06:28.110 --> 00:06:33.260
now it's more clear this thing is
specifically describing the validation

112
00:06:33.260 --> 00:06:37.050
rule specifically describing the length
can't be less than the minimum length for

113
00:06:37.050 --> 00:06:39.460
the work description.

114
00:06:39.460 --> 00:06:42.130
Same thing with greater than
maxWorkTime on line 38.

115
00:06:42.130 --> 00:06:45.570
So using those constants and giving them
good useful names, actually make those

116
00:06:45.570 --> 00:06:50.959
places in the code more readable
&gt;&gt; Kyle Simpson: So that's how

117
00:06:50.959 --> 00:06:56.000
I chose to use let, const, and explicit
block scoping to improve the code.

118
00:06:56.000 --> 00:06:59.500
We didn't add any new features, but
we just improved the code with that.

119
00:06:59.500 --> 00:07:02.440
Any questions about how you approached it,
or

120
00:07:02.440 --> 00:07:04.080
things you might have
tried to do differently?

121
00:07:05.640 --> 00:07:09.160
&gt;&gt; Speaker 2: I'm still unsure how you

122
00:07:10.490 --> 00:07:14.790
decide to use let?

123
00:07:14.790 --> 00:07:18.040
&gt;&gt; Kyle Simpson: So
I think this is the best example.

124
00:07:18.040 --> 00:07:23.190
Prior to the change,
if we compare these two.

125
00:07:28.521 --> 00:07:31.000
&gt;&gt; Kyle Simpson: Sorry, here we go.

126
00:07:31.000 --> 00:07:35.080
Prior to this change you'll notice
I just make project ID as a var.

127
00:07:35.080 --> 00:07:38.290
Now what I'm signalling there is
project ID is gonna be used to cross

128
00:07:38.290 --> 00:07:39.560
the entire function.

129
00:07:39.560 --> 00:07:43.105
It's not really terribly relevant that
the functions only six lines of code,

130
00:07:43.105 --> 00:07:45.830
because it could be 20,
or 50, or 100 lines.

131
00:07:45.830 --> 00:07:50.580
But I'm saying to the reader of the code,
almost subconsciously, projectId is

132
00:07:50.580 --> 00:07:56.160
something that's gonna be used in a bunch
of places, so know about it here, right?

133
00:07:56.160 --> 00:08:00.170
But in reality, that projectId is
only used on the very next line.

134
00:08:00.170 --> 00:08:02.180
It's used right here on line 46.

135
00:08:02.180 --> 00:08:04.850
It's not used in 47 through 50.

136
00:08:04.850 --> 00:08:08.049
So that's an example of
a localized variable.

137
00:08:08.049 --> 00:08:09.380
It's only used in in one place.

138
00:08:09.380 --> 00:08:14.850
And when you have a localized variable, it
can be more helpful to block scope that.

139
00:08:14.850 --> 00:08:18.150
Not only to visually separate it, so
you're saying this thing only exist for

140
00:08:18.150 --> 00:08:18.980
this one purpose.

141
00:08:18.980 --> 00:08:21.504
It's almost like it's
a temporary variable.

142
00:08:21.504 --> 00:08:26.147
[COUGH] So not only to visually separate
it, but also to enforce that people don't

143
00:08:26.147 --> 00:08:29.850
reuse a variable in different
places if you don't want them to.

144
00:08:29.850 --> 00:08:37.050
I think that question is saying like here,
are these curly braces necessary?

145
00:08:37.050 --> 00:08:38.700
Well yes, they're absolutely necessary.

146
00:08:38.700 --> 00:08:43.280
They're creating a block iIn which
the led declarations scopes itself.

147
00:08:43.280 --> 00:08:44.530
If I took the curly brace out,

148
00:08:44.530 --> 00:08:47.750
that a projectId would belong
to the entire function.

149
00:08:47.750 --> 00:08:51.950
So the curly braces are not like
unnecessary parenthesis for example.

150
00:08:51.950 --> 00:08:52.616
They are real.

151
00:08:52.616 --> 00:08:58.234
They are creating a block for
which I am now scoping projectId to it.

152
00:08:58.234 --> 00:08:59.880
So hopefully that answers the question.

153
00:09:01.090 --> 00:09:01.900
Yes?

154
00:09:01.900 --> 00:09:05.840
&gt;&gt; Speaker 3: In that, if you did pull off
curly braces in that example is there any

155
00:09:06.980 --> 00:09:11.000
difference between let and
var within that scope?

156
00:09:11.000 --> 00:09:12.710
&gt;&gt; Kyle Simpson: There
are difference between let and var.

157
00:09:12.710 --> 00:09:15.507
One example is that lets
can't be re-declared.

158
00:09:15.507 --> 00:09:19.180
So if you wanted to re-declare it 100
lines later in a longer function,

159
00:09:19.180 --> 00:09:21.645
you can't do that with let,
but you can with var.

160
00:09:21.645 --> 00:09:22.510
&gt;&gt; Speaker 3: Okay.

161
00:09:25.300 --> 00:09:29.474
&gt;&gt; Kyle Simpson: But stylistically, using
a let there and actually block scoping it,

162
00:09:29.474 --> 00:09:32.360
to me creates a more confusing signal.

163
00:09:32.360 --> 00:09:35.920
Or at least, if it's not more
confusing it's at least less

164
00:09:35.920 --> 00:09:37.600
information than what
we give with the var.

