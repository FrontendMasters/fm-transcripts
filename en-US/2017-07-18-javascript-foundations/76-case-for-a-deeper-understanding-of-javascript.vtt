WEBVTT

1
00:00:00.000 --> 00:00:03.447
&gt;&gt; Kyle Simpson: To be honest with you it
surprises me, although maybe it shouldn't

2
00:00:03.447 --> 00:00:06.900
having been at this now,
I've been a developer almost 20 years.

3
00:00:06.900 --> 00:00:10.436
But it does surprise me,
that developers in JavaScript

4
00:00:10.436 --> 00:00:14.875
tend to approach understanding of
JavaScript as I only need to get just

5
00:00:14.875 --> 00:00:19.407
far enough that I can ship my code,
and then that's good enough right?

6
00:00:19.407 --> 00:00:21.202
We're very pragmatic in that sense.

7
00:00:21.202 --> 00:00:23.779
I get it,
I found this thing on Stack Overflow,

8
00:00:23.779 --> 00:00:27.791
I vaguely understand kind of what it's
doing, I tweaked it a little bit.

9
00:00:27.791 --> 00:00:31.730
It's kinda like what I like to refer
to this as House of Cards design.

10
00:00:31.730 --> 00:00:33.699
Where you kind of put some stuff together,
and

11
00:00:33.699 --> 00:00:35.820
you're not really sure
exactly why it's work but

12
00:00:35.820 --> 00:00:39.422
you keep tweaking at it until it works,
and then you're like my God, it works.

13
00:00:39.422 --> 00:00:40.797
I'm not really sure why, and

14
00:00:40.797 --> 00:00:43.602
you put a code comment there
that says nobody touch this, and

15
00:00:43.602 --> 00:00:47.511
then you hold your breath and slowly back
away, hoping that it doesn't fall right?

16
00:00:47.511 --> 00:00:51.169
As long as it's in the code base long
enough that I'm not gonna get blamed for

17
00:00:51.169 --> 00:00:52.380
it we're good, right?

18
00:00:52.380 --> 00:00:55.972
That is a very ultra pragmatic
of thinking about things.

19
00:00:55.972 --> 00:00:58.408
My boss just expects me
to ship the code so,

20
00:00:58.408 --> 00:01:02.483
it doesn't matter if I know what it's
doing as long as it seems to work.

21
00:01:02.483 --> 00:01:06.392
[COUGH] This is also happy
path driven development.

22
00:01:06.392 --> 00:01:11.981
Whenever we think optimistically that all
that matters is that the code works now.

23
00:01:11.981 --> 00:01:14.683
And if the code does work now,
but I don't understand it,

24
00:01:14.683 --> 00:01:17.881
it doesn't really matter at the end
of the day, because I went home,

25
00:01:17.881 --> 00:01:20.887
I collected my paycheck, and
some code shipped to production.

26
00:01:20.887 --> 00:01:27.527
That's happy path driven development,
because if it works, of course it's great.

27
00:01:27.527 --> 00:01:31.213
But how many of you have ever had
a piece of code break before, anybody?

28
00:01:31.213 --> 00:01:33.356
Can we all agree that we're
in a big family of friends?

29
00:01:33.356 --> 00:01:38.110
We all are pretty good, and I'm probably
better at you at breaking code,

30
00:01:38.110 --> 00:01:39.731
at writing broken code.

31
00:01:39.731 --> 00:01:43.619
I've got a lot more experience than
some of you at writing broken code.

32
00:01:43.619 --> 00:01:48.644
So, why is it that we focus so myopically
on the happy path and don't think about

33
00:01:48.644 --> 00:01:53.448
what's gonna happen when I have to
revisit this code because it's broken?

34
00:01:53.448 --> 00:01:56.936
What is the scenario by which I'm gonna
get to come back and revisit this code?

35
00:01:56.936 --> 00:02:00.573
Romantically we think to ourselves I'm
gonna get to come back and revisit this

36
00:02:00.573 --> 00:02:03.823
code next sprint because I filed myself
a ticket that says come back and

37
00:02:03.823 --> 00:02:05.551
fix my technical debt, do it right.

38
00:02:05.551 --> 00:02:09.263
And I even put a code comment
there that says, to do, fix this.

39
00:02:09.263 --> 00:02:14.133
But in reality, most of us never
go back and see that line of code,

40
00:02:14.133 --> 00:02:17.335
until there's a huge fire in production.

41
00:02:17.335 --> 00:02:18.724
Something is melting down.

42
00:02:18.724 --> 00:02:20.076
The performance is terrible.

43
00:02:20.076 --> 00:02:23.238
There's a feature that nobody thought
of when they put a real dataset in

44
00:02:23.238 --> 00:02:23.828
front of it.

45
00:02:23.828 --> 00:02:25.506
And your bosses hair is on fire.

46
00:02:25.506 --> 00:02:30.090
And now you don't know what to do, but you
are in the worst possible circumstances

47
00:02:30.090 --> 00:02:34.553
to figure it out, because you don't have
the time and the luxury to plan it out.

48
00:02:34.553 --> 00:02:37.767
[COUGH] You simply have
to do more of the same.

49
00:02:37.767 --> 00:02:42.637
Just keep throwing cards at
the house of cards until it stands.

50
00:02:42.637 --> 00:02:47.642
And that,
my friends is how code grows into

51
00:02:47.642 --> 00:02:52.519
that legacy of frustration that we have.

52
00:02:52.519 --> 00:02:55.566
And you might have noticed something
that I have noticed for a long time.

53
00:02:55.566 --> 00:02:59.130
Because I've been around so long I've seen
this cycle repeat now four or five times.

54
00:02:59.130 --> 00:03:02.366
You might have noticed that about
every three or four years and

55
00:03:02.366 --> 00:03:05.479
sometimes even faster than that,
somebody comes along and

56
00:03:05.479 --> 00:03:09.714
reinvents an entire new framework, an
entire new architecture, a whole new set

57
00:03:09.714 --> 00:03:14.159
of jargon to describe how we oughta build
and architect our front end applications.

58
00:03:14.159 --> 00:03:17.990
And people flock in
droves to this new thing.

59
00:03:17.990 --> 00:03:22.100
And it's not even fully clear exactly
at that moment why that new thing is so

60
00:03:22.100 --> 00:03:22.893
much better.

61
00:03:22.893 --> 00:03:25.392
But you know why I think
people flock in droves so

62
00:03:25.392 --> 00:03:27.967
quickly whenever somebody
invents something?

63
00:03:27.967 --> 00:03:31.711
Somebody in this room or online is
probably inventing the next big framework.

64
00:03:31.711 --> 00:03:35.525
There's just, the odds are somebody's
working on that right now.

65
00:03:35.525 --> 00:03:38.185
But why is it that we
flock in droves to that?

66
00:03:38.185 --> 00:03:41.853
Well part of the reason is that we just
get so frustrated, by going back and

67
00:03:41.853 --> 00:03:45.125
having to fix the code and
work on the code, and struggle with it.

68
00:03:45.125 --> 00:03:47.870
And tell me if you've ever
had this conversation before,

69
00:03:47.870 --> 00:03:50.735
cuz I certainly have and
I've certainly have it many times.

70
00:03:50.735 --> 00:03:54.234
At some point you are frustrated, you are
working on, you are trying to fix a bug,

71
00:03:54.234 --> 00:03:55.013
or add a feature.

72
00:03:55.013 --> 00:03:59.022
And you have this conversation
with a co-worker or boss and

73
00:03:59.022 --> 00:04:03.924
you say, you know what, it would just
be faster if I rewrote it, right?

74
00:04:03.924 --> 00:04:05.718
That's the mindset here.

75
00:04:05.718 --> 00:04:10.555
Because we struggle so much to read and
understand the existing code and

76
00:04:10.555 --> 00:04:14.666
fix the existing code,
because we have taken to an extreme,

77
00:04:14.666 --> 00:04:18.798
the concept of agile development
is a good strong positive.

78
00:04:18.798 --> 00:04:21.118
And I am not talking
negatively about agile.

79
00:04:21.118 --> 00:04:23.918
But we did with that
exactly what we developers,

80
00:04:23.918 --> 00:04:28.014
the sin that we all do with everything,
which is we took it to its logical

81
00:04:28.014 --> 00:04:31.594
extreme and said,
every single statement needs to be Agile.

82
00:04:31.594 --> 00:04:33.656
Who cares whether it makes any sense?

83
00:04:33.656 --> 00:04:35.828
Who cares whether I know what it does?

84
00:04:35.828 --> 00:04:38.348
I'll have time to fix that later.

85
00:04:38.348 --> 00:04:42.884
At a macro level, Agile is a great
pattern, but at micro level of

86
00:04:42.884 --> 00:04:47.840
the code that we write, it's a terrible
idea to approach it that way.

87
00:04:47.840 --> 00:04:52.508
Researchers have studied the process
of software development, and

88
00:04:52.508 --> 00:04:55.816
they've studied,
what do we spend our time on?

89
00:04:55.816 --> 00:04:58.584
And I found this fascinating,
reading this white paper.

90
00:04:58.584 --> 00:05:03.213
They found that more than 70%
of the time that we spend on

91
00:05:03.213 --> 00:05:08.315
a day-to-day basis,
in the process of developing software,

92
00:05:08.315 --> 00:05:13.433
more than 70% of that time we spend,
reading existing code.

93
00:05:13.433 --> 00:05:16.794
Think about your typical eight hour day.

94
00:05:16.794 --> 00:05:20.773
Researchers say up to 70% of
that eight hour day is spent,

95
00:05:20.773 --> 00:05:25.781
just reading the code that you wrote
yesterday that you don't understand.

96
00:05:25.781 --> 00:05:28.587
Anybody ever had that before,
you wrote some code and then the next day,

97
00:05:28.587 --> 00:05:29.928
the next week, or the next month?

98
00:05:29.928 --> 00:05:33.710
It's been said that code that you wrote
six months ago might have been written by

99
00:05:33.710 --> 00:05:34.906
someone else entirely.

100
00:05:34.906 --> 00:05:37.888
For me, that horizon is about two weeks.

101
00:05:37.888 --> 00:05:42.424
If it's gone about two weeks and I haven't
seen a piece of code, there's no hope.

102
00:05:42.424 --> 00:05:48.856
I wrote code yesterday on the plane ride
here, that today I don't understand.

103
00:05:48.856 --> 00:05:50.996
I'm good at that, okay?

104
00:05:50.996 --> 00:05:54.642
We write code to ship.

105
00:05:54.642 --> 00:05:58.789
And that's a good thing, we all need to
ship cuz we all need to make a paycheck.

106
00:05:58.789 --> 00:06:03.233
But if we don't balance that with I
should understand this code because,

107
00:06:03.233 --> 00:06:07.329
guess what, I'm probably gonna have
to read this a few more times.

108
00:06:07.329 --> 00:06:10.894
Or a few hundred more times,
or a few thousand more times.

109
00:06:10.894 --> 00:06:15.856
Maybe if we spent a little bit more effort
understanding what we were doing from

110
00:06:15.856 --> 00:06:21.055
the get-go, there would be less of this
desire to churn and completely rewrite.

111
00:06:21.055 --> 00:06:24.579
Maybe every line of code could
be slightly more durable.

112
00:06:24.579 --> 00:06:27.499
If it was written in such a way
that the person who wrote it

113
00:06:27.499 --> 00:06:31.352
understood what they were doing, why and
how it did what it was doing, and

114
00:06:31.352 --> 00:06:33.303
here's the really important part.

115
00:06:33.303 --> 00:06:35.970
Cuz this is where it goes
from a science to an art.

116
00:06:35.970 --> 00:06:38.198
They communicated that well.

117
00:06:38.198 --> 00:06:41.223
They communicated their
thought process well.

118
00:06:41.223 --> 00:06:44.966
You've heard me say probably many
occasions in the past kinda a broken

119
00:06:44.966 --> 00:06:45.862
record on this.

120
00:06:45.862 --> 00:06:50.851
I believe this so deeply, that it's
almost a religious belief for me,

121
00:06:50.851 --> 00:06:53.355
that code is about communication.

122
00:06:53.355 --> 00:06:57.898
Did you know that code is not first and
foremost to instruct the ones and

123
00:06:57.898 --> 00:06:59.444
zeros to the computer?

124
00:06:59.444 --> 00:07:04.260
Years and years ago, decades ago when we
first invented programming languages on

125
00:07:04.260 --> 00:07:08.792
top of the 1s and 0s we started to create
a separation, a gap between the code

126
00:07:08.792 --> 00:07:12.803
that we write and the precise
instructions that the computer runs.

127
00:07:12.803 --> 00:07:15.152
Even assembly language was an abstraction.

128
00:07:15.152 --> 00:07:18.945
There is a pretty close one-to-one
correlation but not exactly.

129
00:07:18.945 --> 00:07:23.225
So, even at that level, we started to move
and create a gap between what the computer

130
00:07:23.225 --> 00:07:27.167
actually does and what we expressed to
the computer through our source code.

131
00:07:27.167 --> 00:07:30.883
And, the more that we've done that,
the more languages that we've created,

132
00:07:30.883 --> 00:07:34.155
and we're on third slash fourth
generation languages at this point,

133
00:07:34.155 --> 00:07:37.218
we're approaching more of
the natural language kind of things.

134
00:07:37.218 --> 00:07:40.995
You have SQL, for example, it's been
around for awhile, but SQL is kind of

135
00:07:40.995 --> 00:07:45.263
more, the traditional fourth generation,
it's more natural language oriented.

136
00:07:45.263 --> 00:07:48.102
And we're moving in those directions
even more, with voice oriented stuff,

137
00:07:48.102 --> 00:07:49.962
through Alexa and
all those other things, right?

138
00:07:49.962 --> 00:07:54.634
So we're seeing the progress
of creating abstraction in

139
00:07:54.634 --> 00:07:57.466
the way we instruct our computer.

140
00:07:57.466 --> 00:08:02.236
We're creating these barriers between what
we do, what we express in our code, and

141
00:08:02.236 --> 00:08:03.660
what the computer runs.

142
00:08:03.660 --> 00:08:08.232
So at best, our code is not
a precise set of instructions but

143
00:08:08.232 --> 00:08:11.716
rather a set of suggestions
in the computer.

144
00:08:11.716 --> 00:08:15.389
Really it's a set of suggestions and
the computer looks at it,

145
00:08:15.389 --> 00:08:18.589
you obsess over should I do plus plus I,
or I plus plus?

146
00:08:18.589 --> 00:08:22.805
Because you're thinking in your mind,
I saw some JS perf somewhere and

147
00:08:22.805 --> 00:08:27.440
it told me that plus plus I, was a couple
of microseconds faster than i++, so

148
00:08:27.440 --> 00:08:31.232
I have some instinct in my head
that I need to do that everywhere,

149
00:08:31.232 --> 00:08:34.147
because let's save on
all these microseconds.

150
00:08:34.147 --> 00:08:36.427
And, what's really true,
and I like to think of it,

151
00:08:36.427 --> 00:08:39.435
literally I will role play this in
my head when I'm looking at my code.

152
00:08:39.435 --> 00:08:42.763
I like to imagine that the JavaScript
engine just sort of chuckles at me,

153
00:08:42.763 --> 00:08:45.998
it's like, thanks very much but
I'm not gonna do either one of them.

154
00:08:45.998 --> 00:08:49.209
Cuz it turns out,
there's a more efficient way to do it.

155
00:08:49.209 --> 00:08:53.111
I am glad that the computer is better
at writing efficient code than I am.

156
00:08:53.111 --> 00:08:54.617
Because if it were up to me,

157
00:08:54.617 --> 00:08:57.698
I would have failed out of
this industry a long time ago.

158
00:08:57.698 --> 00:09:02.542
The computer is vastly better at
writing more efficient code than any

159
00:09:02.542 --> 00:09:05.813
of us ever will be, and
it's getting more so.

160
00:09:05.813 --> 00:09:07.252
They're catching up.

161
00:09:07.252 --> 00:09:11.600
They're doing things even better and more
sophisticated than they ever have before.

162
00:09:11.600 --> 00:09:14.148
So when you obsess about
I have this thing, and

163
00:09:14.148 --> 00:09:18.316
I'm gonna sacrifice the readability of
my code because this micro performance

164
00:09:18.316 --> 00:09:22.543
benchmark tells me I've got to make sure
that I squeeze in this micro second out of

165
00:09:22.543 --> 00:09:26.486
it and do this weird thing with a bitwise
operation or something like that.

166
00:09:26.486 --> 00:09:30.225
When you obsess about that
what you are really doing,

167
00:09:30.225 --> 00:09:32.477
is betting against the future.

168
00:09:32.477 --> 00:09:35.999
You are betting that
your current skill level,

169
00:09:35.999 --> 00:09:40.842
is better than any skill level that
will ever happen to the systems

170
00:09:40.842 --> 00:09:45.000
that run that code for
the entire lifetime of that code.

171
00:09:45.000 --> 00:09:48.603
Now in a sense code gets rewritten all
the time, so what difference does it make?

172
00:09:48.603 --> 00:09:50.439
But actually code lives a lot longer.

173
00:09:50.439 --> 00:09:53.863
It just churns and churns and churns,

174
00:09:53.863 --> 00:09:58.038
lives a lot longer than
we might want to admit.

175
00:09:58.038 --> 00:10:00.452
So maybe stop betting so
much against the future and

176
00:10:00.452 --> 00:10:02.877
maybe start saying what
should I invest my time in?

177
00:10:02.877 --> 00:10:07.582
If it's not to precisely instruct
the computer, if I should instead try to

178
00:10:07.582 --> 00:10:11.105
come up with a way to describe
what I want to have happen.

179
00:10:11.105 --> 00:10:13.224
There's a term for that,
it's called declarative.

180
00:10:13.224 --> 00:10:17.301
If you wanna describe what you
want to have happen as opposed to,

181
00:10:17.301 --> 00:10:21.541
precisely instructing how to do it,
that's called imperative.

182
00:10:21.541 --> 00:10:25.654
If you can be more declarative about your
code, you open up more opportunities for

183
00:10:25.654 --> 00:10:29.412
future improvement in the performance and
the optimization of that code,

184
00:10:29.412 --> 00:10:33.191
the system will be able to optimize it
better the more declarative you are.

185
00:10:33.191 --> 00:10:38.434
As a matter of fact, the more imperative
you are, the more you try to tinker with

186
00:10:38.434 --> 00:10:43.453
all those things, the harder you make
that code for the engine to optimize.

187
00:10:43.453 --> 00:10:47.237
You actually work against your own
favor when you have this myopic, well,

188
00:10:47.237 --> 00:10:48.934
I just gotta optimize this code.

189
00:10:51.672 --> 00:10:54.830
&gt;&gt; Kyle Simpson: So, code is not about
a precise set of instructions and

190
00:10:54.830 --> 00:10:59.429
code should not be about obsessing about
a micro performance difference of a few

191
00:10:59.429 --> 00:11:04.166
microseconds here or there because guess
what it's scale the engine is gonna do,

192
00:11:04.166 --> 00:11:06.936
it's gonna profile all
your code in real time.

193
00:11:06.936 --> 00:11:11.366
It's not gonna pay any attention to this
individual benchmark that you ran in

194
00:11:11.366 --> 00:11:15.456
jsproof.com it's gonna run it in
the entire context and make very very

195
00:11:15.456 --> 00:11:20.046
different and sometimes completely
counter intuitive decisions to your own.

196
00:11:20.046 --> 00:11:21.998
Stop betting against the future, and

197
00:11:21.998 --> 00:11:25.849
stop betting that you are better at
what the computer is clearly better at.

198
00:11:25.849 --> 00:11:29.168
Your just not going to be better than
the computer at those things, ever.

199
00:11:29.168 --> 00:11:33.058
And that's not criticism,
I'm talking to myself here.

200
00:11:33.058 --> 00:11:34.810
We're just not built for that.

201
00:11:34.810 --> 00:11:36.297
You know who's not good running programs?

202
00:11:36.297 --> 00:11:39.119
Us, you know who is?

203
00:11:39.119 --> 00:11:41.291
The computer.

204
00:11:41.291 --> 00:11:47.597
But, does that mean the developers
are eventually gonna become irrelevant?

205
00:11:47.597 --> 00:11:50.391
Are we being programmed
out of our own jobs?

206
00:11:50.391 --> 00:11:53.740
Are we making AI systems, where eventually
the computers will make their own code?

207
00:11:53.740 --> 00:11:55.101
There are some that believe that.

208
00:11:55.101 --> 00:11:57.673
There are some that believe that A,

209
00:11:57.673 --> 00:12:03.266
software developers are the new blue
collar worker, we're commoditized.

210
00:12:03.266 --> 00:12:05.359
We're just on an assembly line.

211
00:12:05.359 --> 00:12:09.331
We're not creative, we're not doing
something bigger than ourselves,

212
00:12:09.331 --> 00:12:10.853
we're just cogs in a wheel.

213
00:12:10.853 --> 00:12:12.064
There are some that believe that.

214
00:12:12.064 --> 00:12:15.967
And there are some that believe that just
like that, because we have become the new

215
00:12:15.967 --> 00:12:18.979
blue collar worker, and
we're not workers on a factory line.

216
00:12:18.979 --> 00:12:23.117
And that's not to say anything negative
about factory workers, by the way.

217
00:12:23.117 --> 00:12:26.538
That's the backbone of this country so
I don't mean to suggest that at all.

218
00:12:26.538 --> 00:12:31.047
But to suggest that software developers
have become that is to suggest that

219
00:12:31.047 --> 00:12:35.985
software developers are also subject to
automation, that our jobs will go away,

220
00:12:35.985 --> 00:12:36.858
is that true?

221
00:12:36.858 --> 00:12:40.421
I mean, we already see AI being
able to do small scale things,

222
00:12:40.421 --> 00:12:44.941
like the Microsoft AI chat bot that was
able to pull code from Stack Overflow and

223
00:12:44.941 --> 00:12:48.318
solve little small coding exercises or
things like that.

224
00:12:48.318 --> 00:12:49.493
Is that true?

225
00:12:49.493 --> 00:12:55.382
Well, here's what I think the computer
will never be better than us at, ever.

226
00:12:55.382 --> 00:13:00.030
And it's tough to make a statement like
that where you make some prediction

227
00:13:00.030 --> 00:13:03.073
against the long future,
but I'm saying ever.

228
00:13:03.073 --> 00:13:07.560
I'm drawing a line in the sand and
I'm saying I think there is one thing,

229
00:13:07.560 --> 00:13:10.662
that the computer will
never be better than us at.

230
00:13:10.662 --> 00:13:12.570
Communicating with other humans and

231
00:13:12.570 --> 00:13:15.286
communicating empathetically
with other humans.

232
00:13:15.286 --> 00:13:18.580
That's the one thing that we
will always be better at.

233
00:13:18.580 --> 00:13:21.691
It will never be the case where we
don't need to communicate anymore,

234
00:13:21.691 --> 00:13:24.392
the computer just communicates for
us, that's nonsense.

235
00:13:24.392 --> 00:13:26.660
We will always need to communicate, and

236
00:13:26.660 --> 00:13:29.270
we will always do that
better than the system.

237
00:13:29.270 --> 00:13:32.172
So maybe that's were our
intention should be.

238
00:13:32.172 --> 00:13:34.774
Understanding the tools that
we use to get our job done?

239
00:13:34.774 --> 00:13:37.359
Yes, we have to ship code.

240
00:13:37.359 --> 00:13:41.679
But maybe we should focus a little
bit more and understanding and

241
00:13:41.679 --> 00:13:44.642
communicating more clearly with our code.

242
00:13:44.642 --> 00:13:48.436
Of the infinite number of choices there
are of programs that will produce

243
00:13:48.436 --> 00:13:50.498
the exact same sequence of 1s and 0s.

244
00:13:50.498 --> 00:13:54.816
Maybe the best code,
keep using better and best.

245
00:13:54.816 --> 00:14:00.554
Maybe the best code,
is the code that fully describes itself.

246
00:14:00.554 --> 00:14:04.878
That to an untrained reader who has
no idea what the problem domain is,

247
00:14:04.878 --> 00:14:09.276
has no idea what you've tried and
failed before, can read that code and

248
00:14:09.276 --> 00:14:14.509
on the first pass through the code fully
understand, everything they need to know.

249
00:14:14.509 --> 00:14:16.250
I know that's idealized, right?

250
00:14:16.250 --> 00:14:20.596
That's not really realistic, but
shouldn't that be a goal of ours?

251
00:14:20.596 --> 00:14:22.563
To communicate so clearly with our code,

252
00:14:22.563 --> 00:14:26.507
that there's no question upon reading
that it's doing what it's supposed to do.

253
00:14:26.507 --> 00:14:31.167
Or there's no question upon reading
it's glaringly obvious where the bug is.

254
00:14:31.167 --> 00:14:33.380
What the problem in our logic is.

255
00:14:33.380 --> 00:14:35.929
That's my life's quest at this point.

256
00:14:35.929 --> 00:14:38.732
And I use this vehicle
of teaching to do that.

257
00:14:38.732 --> 00:14:40.308
Let me let you in on a little secret.

258
00:14:40.308 --> 00:14:43.624
I'm not qualified to be a teacher,
I'm not.

259
00:14:43.624 --> 00:14:45.740
I don't have a degree in teaching.

260
00:14:45.740 --> 00:14:47.847
I don't know anything
formal about teaching.

261
00:14:47.847 --> 00:14:51.828
I don't know all the terminology
around teaching methods.

262
00:14:51.828 --> 00:14:55.351
All I'm doing is going on a journey
of learning this stuff better, and

263
00:14:55.351 --> 00:14:58.052
I'm taking you along with
me on that journey, okay?

264
00:14:58.052 --> 00:15:02.183
Because I wanna learn better how to
communicate clearly with my code,

265
00:15:02.183 --> 00:15:05.907
and that starts with understanding
my programming language.

266
00:15:05.907 --> 00:15:07.582
For whatever crazy reason,

267
00:15:07.582 --> 00:15:12.060
if you've chosen to make JavaScript
your programming language of choice.

268
00:15:12.060 --> 00:15:16.009
If you write that primarily or exclusively
on a day-to-day basis, is it so

269
00:15:16.009 --> 00:15:18.984
crazy to think that you actually
ought to understand it?

270
00:15:18.984 --> 00:15:21.525
That you ought to know it more deeply?

271
00:15:21.525 --> 00:15:24.058
Is that such a far-fetched concept?

272
00:15:24.058 --> 00:15:28.298
Is it something that you couldn't possibly
ever convince your boss it's worth doing?

273
00:15:28.298 --> 00:15:31.780
Because your boss is only
concerned with shipping the code.

274
00:15:31.780 --> 00:15:35.615
Could you possibly ever have
a conversation with your boss that starts

275
00:15:35.615 --> 00:15:38.870
like, hey I need some more time
to make sure I do this right?

276
00:15:38.870 --> 00:15:42.750
I suggest that, but you may be thinking
to yourself, well, that's all well and

277
00:15:42.750 --> 00:15:46.062
good in your ivory tower, but
where I work, we're understaffed and

278
00:15:46.062 --> 00:15:49.624
we're behind budget and we're behind
track and we gotta ship this code.

279
00:15:49.624 --> 00:15:51.551
And nobody cares about any other stuff.

280
00:15:51.551 --> 00:15:55.210
Just like we don't care about tests,
we don't care about documentation.

281
00:15:55.210 --> 00:15:57.356
All we care about is getting
the code out the door.

282
00:15:57.356 --> 00:16:00.962
Couldn't possibly have this kind
of conversation with my boss.

283
00:16:00.962 --> 00:16:01.959
And I push back on that.

284
00:16:01.959 --> 00:16:05.664
I say it's cuz you're having
the wrong kind of conversation.

285
00:16:05.664 --> 00:16:10.528
When you frame this conversation as,
I need to go spend some more of my time,

286
00:16:10.528 --> 00:16:15.544
aka I need to go waste some more of your
dollars, Mr. Manager or Ms. Manager.

287
00:16:15.544 --> 00:16:18.309
I need to go waste some
more of that time and

288
00:16:18.309 --> 00:16:21.709
money on stuff that you
don't perceive as useful,

289
00:16:21.709 --> 00:16:26.707
it's because you haven't properly
talked about the value proposition.

290
00:16:26.707 --> 00:16:31.000
Because if you think about how much
managers budget for code maintenance.

291
00:16:31.000 --> 00:16:34.317
Remember, we said code
maintenance is 70% of our time.

292
00:16:34.317 --> 00:16:36.018
And you think about how
much of their budget.

293
00:16:36.018 --> 00:16:38.016
I've interviewed managers of
software development teams.

294
00:16:38.016 --> 00:16:42.381
They budget as much as 60%
of their annual budget,

295
00:16:42.381 --> 00:16:45.293
just to fix the crap that we mess up.

296
00:16:45.293 --> 00:16:49.246
The overhead of managing a code base.

297
00:16:49.246 --> 00:16:53.102
You're not having the right value
proposition discussion with that boss.

298
00:16:53.102 --> 00:16:55.750
When you myopically think well all
I've got to worry about is what's

299
00:16:55.750 --> 00:16:56.720
gonna happen right now.

300
00:16:56.720 --> 00:16:59.649
When you say you know what?

301
00:16:59.649 --> 00:17:04.213
You want me to spend one day, I could
spend two days and there's a fixed cost,

302
00:17:04.213 --> 00:17:04.856
for that.

303
00:17:04.856 --> 00:17:09.710
Versus, if I spend one on that code,
that code will actually cost us 10,

304
00:17:09.710 --> 00:17:12.270
or 15, or 20 days in the long haul.

305
00:17:12.270 --> 00:17:16.946
So let's start having a broader
discussion about timelines beyond

306
00:17:16.946 --> 00:17:18.840
what's happening today.

307
00:17:18.840 --> 00:17:21.743
Why don't we talk about what's
happening over this quarter.

308
00:17:21.743 --> 00:17:27.491
How much is that line of code gonna
cost us over the course of this quarter?

309
00:17:27.491 --> 00:17:31.018
Then we start to put in perspective
why investing in that line of code.

310
00:17:31.018 --> 00:17:35.290
And I used that word on purpose, investing
in that line of code to make sure that

311
00:17:35.290 --> 00:17:37.643
we communicate clearly what we are doing.

312
00:17:37.643 --> 00:17:41.125
And by the way,
there's a little nuance here.

313
00:17:41.125 --> 00:17:44.730
I'm sort of almost philosophically
fascinated by this nuance.

314
00:17:44.730 --> 00:17:47.412
There's the code that we write, but

315
00:17:47.412 --> 00:17:51.923
there's also the code that we
intentionally didn't write.

316
00:17:51.923 --> 00:17:57.496
Have you ever wondered why some piece
of code didn't need to be there?

317
00:17:57.496 --> 00:18:00.016
Have you ever looked at
a piece of code and said,

318
00:18:00.016 --> 00:18:02.922
why don't they need an if statement here,
all right?

319
00:18:02.922 --> 00:18:05.570
Why is this working,
why doesn't it need an if statement?

320
00:18:05.570 --> 00:18:08.985
Because my intuition is to think, it could
come in null, and throw an exception.

321
00:18:08.985 --> 00:18:11.411
Why doesn't it need an if statement here?

322
00:18:11.411 --> 00:18:14.694
Or if you've ever seen an if statement
that doesn't have an else clause, and

323
00:18:14.694 --> 00:18:16.825
ever wondered,
why isn't there an else clause?

324
00:18:19.606 --> 00:18:24.073
&gt;&gt; Kyle Simpson: I'm philosophically
fascinated by the idea that programming

325
00:18:24.073 --> 00:18:29.137
languages don't do a very good job
of describing the absence of stuff.

326
00:18:29.137 --> 00:18:32.104
That's one of the things that we need to
get better at if we wanna communicate.

327
00:18:32.104 --> 00:18:34.700
The best that we can do right
now is put a code comment,

328
00:18:34.700 --> 00:18:37.892
no else necessary because dot,
dot, dot and fill in the blanks.

329
00:18:37.892 --> 00:18:40.748
But maybe we need to get better
at designing our systems, and

330
00:18:40.748 --> 00:18:44.444
our languages, and our frameworks, and
our patterns to communicate not only

331
00:18:44.444 --> 00:18:48.087
the stuff we intentionally did, but
all the stuff that we don't want there.

332
00:18:48.087 --> 00:18:51.267
So that the future reader of that
code doesn't have to wonder,

333
00:18:51.267 --> 00:18:52.476
why isn't that there?

334
00:18:52.476 --> 00:18:54.106
The future reader of that
code doesn't have to wonder,

335
00:18:54.106 --> 00:18:55.401
why couldn't he have
just done it this way?

336
00:18:55.401 --> 00:18:58.428
Because we can communicate clearly
why that would not have worked.

337
00:18:58.428 --> 00:19:02.987
And why we left that part out, okay?

338
00:19:02.987 --> 00:19:07.212
So that's the bar that I set.

339
00:19:07.212 --> 00:19:08.816
No big deal, right?

340
00:19:08.816 --> 00:19:10.888
This is pretty easy.

