WEBVTT

1
00:00:00.360 --> 00:00:03.606
&gt;&gt; Kyle Simpson: So let's turn our
attention now to the second core

2
00:00:03.606 --> 00:00:08.087
foundation of JavaScript, the scope,
the lexical scope system and

3
00:00:08.087 --> 00:00:12.271
specifically the closure pattern
that's build on top of that.

4
00:00:12.271 --> 00:00:16.610
[COUGH] This will be our most
intensive curriculum in this workshop.

5
00:00:16.610 --> 00:00:21.756
So expect there's a bunch of
exercises that we iterate on here,

6
00:00:21.756 --> 00:00:24.249
three or four I think at least.

7
00:00:24.249 --> 00:00:28.120
Exercises where we iterate on these
topics and there's a lot to get through.

8
00:00:28.120 --> 00:00:31.754
So, definitely make
sure you keep yourself,

9
00:00:31.754 --> 00:00:35.114
you keep your brain fresh on these topics.

10
00:00:35.114 --> 00:00:38.210
If you're watching online or
watching later, make sure you go back and

11
00:00:38.210 --> 00:00:40.870
review the materials you don't miss out.

12
00:00:40.870 --> 00:00:44.800
So, where we wanna go is first looking
at how lexical scope works in terms of

13
00:00:44.800 --> 00:00:47.200
nesting, how these scopes nest together.

14
00:00:48.948 --> 00:00:52.477
Then we wanna talk about a topic, how many
of you have heard of hoisting before?

15
00:00:52.477 --> 00:00:53.530
Have you heard that term?

16
00:00:53.530 --> 00:00:56.290
Okay, so we're gonna talk about hoisting.

17
00:00:56.290 --> 00:00:59.610
Hoisting is made up,
it's not real, it doesn't exist.

18
00:00:59.610 --> 00:01:00.510
If you look at the spec,

19
00:01:00.510 --> 00:01:03.970
there's no existence of the word
hoist cuz it's not a real thing.

20
00:01:03.970 --> 00:01:07.100
It's actually a metaphor for
describing how the compiler works.

21
00:01:07.100 --> 00:01:10.120
And by the way, did you know
JavaScript is a complied language?

22
00:01:10.120 --> 00:01:11.460
We're gonna get into all of that stuff.

23
00:01:11.460 --> 00:01:15.340
So we're gonna talk about some compiler
theory, talk about how lexical scope is

24
00:01:15.340 --> 00:01:20.190
actually processed and what that means for
how we interpret our code.

25
00:01:20.190 --> 00:01:23.050
Then we're gonna look at
closure specifically.

26
00:01:23.050 --> 00:01:25.490
How many of you have ever had or given or

27
00:01:25.490 --> 00:01:29.130
maybe both the job interview,
what is closure?

28
00:01:29.130 --> 00:01:31.830
Anybody ever had that question or
heard that question before?

29
00:01:31.830 --> 00:01:32.940
It's a pretty common one.

30
00:01:32.940 --> 00:01:34.920
I received it at least once, and

31
00:01:34.920 --> 00:01:39.790
I gave it probably a hundred times in
my capacity working as a developer.

32
00:01:39.790 --> 00:01:42.616
And when I would ask
people in a job interview,

33
00:01:42.616 --> 00:01:47.707
I was brought in because I was kind of the
JavaScript expert at my job, or whatever.

34
00:01:47.707 --> 00:01:49.710
So they always me to come in and
vet the candidate,

35
00:01:49.710 --> 00:01:53.000
do they really know what they're
talking about with JavaScript?

36
00:01:53.000 --> 00:01:53.970
That's why I was brought in.

37
00:01:53.970 --> 00:01:55.665
So I had this set of rigorous questions.

38
00:01:55.665 --> 00:01:59.513
And I could tell pretty quickly whether or
not somebody had paid any attention to

39
00:01:59.513 --> 00:02:03.248
regularly thinking about the language or
if they would just you know read some

40
00:02:03.248 --> 00:02:05.441
Stack Overflow post or
something like that.

41
00:02:05.441 --> 00:02:09.570
So it does not take much
to filter through that.

42
00:02:09.570 --> 00:02:11.455
But I asked that question,
what is closure?

43
00:02:11.455 --> 00:02:13.509
And much more often that not,

44
00:02:13.509 --> 00:02:18.684
the answer I would get to that question
would be something to the effect of,

45
00:02:18.684 --> 00:02:24.540
well, it's like asynchronous callbacks,
and set timeout, and click handlers.

46
00:02:25.740 --> 00:02:29.610
Okay, can you give me any
more information than that?

47
00:02:29.610 --> 00:02:32.440
And people would stumble to articulate.

48
00:02:32.440 --> 00:02:34.990
And as I said at
the beginning of our course,

49
00:02:34.990 --> 00:02:39.070
closure is the most important concept
ever invented in computing science.

50
00:02:40.230 --> 00:02:45.380
Why is it so important and yet the most
basic of questions can you articulate?

51
00:02:45.380 --> 00:02:48.000
If I were to ask you right now,
if I put you on the spot and

52
00:02:48.000 --> 00:02:51.820
said, tell me what closure is,
if you haven't seen this course before and

53
00:02:51.820 --> 00:02:53.860
you haven't read my book,
how would you answer that question?

54
00:02:55.060 --> 00:02:57.212
I think it's important
to have a very crisp and

55
00:02:57.212 --> 00:03:00.149
specific answer to that question,
to know exactly what it is.

56
00:03:00.149 --> 00:03:04.040
And it turns out, closure's not some
brand new thing that I have to teach you.

57
00:03:04.040 --> 00:03:07.560
I just have to teach you to recognize
where closure already exists in all your

58
00:03:07.560 --> 00:03:08.360
existing programs.

59
00:03:09.560 --> 00:03:10.970
So we're gonna look at closure.

60
00:03:10.970 --> 00:03:15.340
We wanna be really familiar with that and
how we use it.

61
00:03:15.340 --> 00:03:19.530
And finally, that leaves us our big
takeaway, the big punchline here.

62
00:03:19.530 --> 00:03:21.880
It leads us to understanding
the module pattern.

63
00:03:21.880 --> 00:03:24.760
The module pattern is
probably the most important

64
00:03:24.760 --> 00:03:27.470
pattern in all of JavaScript
in terms of code organization.

