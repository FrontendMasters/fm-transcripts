WEBVTT

1
00:00:00.370 --> 00:00:02.872
&gt;&gt; Kyle Simpson: Now,
that means that a1 constructor and

2
00:00:02.872 --> 00:00:05.770
a2.constructor point at the same location.

3
00:00:05.770 --> 00:00:07.860
You'll notice that I'm using this linkage,
but

4
00:00:07.860 --> 00:00:11.640
I don't have any direct way
to say where is a1 linked to?

5
00:00:13.180 --> 00:00:18.110
And early on in JavaScript they said
that's kind of a gap in functionality.

6
00:00:18.110 --> 00:00:22.910
It would be nice for me to ask,
given any object, where is it linked to?

7
00:00:22.910 --> 00:00:25.420
What is its prototype linkage?

8
00:00:25.420 --> 00:00:29.320
This by the way, is an internal linkage,
it's not accessible from the outside.

9
00:00:29.320 --> 00:00:32.930
So how do we get a public way
to access that prototype?

10
00:00:34.110 --> 00:00:38.540
Well it turns out they
added a temporary hack,

11
00:00:38.540 --> 00:00:44.620
this __proto thing that
we see there on line 17.

12
00:00:44.620 --> 00:00:48.720
__proto__ is a really long way
of saying that property name,

13
00:00:48.720 --> 00:00:51.680
and it also doesn't make
me sound very cool.

14
00:00:51.680 --> 00:00:55.740
So I'm gonna do what the cool kids do, and
I'm gonna refer to that as dunder proto.

15
00:00:57.160 --> 00:01:01.100
That's just a made up way of
pronouncing that property name.

16
00:01:01.100 --> 00:01:02.440
So they made up dunder proto,

17
00:01:02.440 --> 00:01:06.230
and they said let's make a property
that exposes the internal link.

18
00:01:07.330 --> 00:01:12.030
So if I call a1.__proto__,
I get Foo.prototype.

19
00:01:13.590 --> 00:01:14.350
That's cool, right?

20
00:01:15.920 --> 00:01:19.110
Unfortunately, that dunder proto
was not a standard thing so

21
00:01:19.110 --> 00:01:20.890
that's why it got named in that weird way.

22
00:01:22.240 --> 00:01:25.172
And as soon as they named it in that
way and they said, don't use it,

23
00:01:25.172 --> 00:01:28.690
this is just a temporary thing until we
configure out what it should be called,

24
00:01:28.690 --> 00:01:30.530
guess what everybody did?

25
00:01:30.530 --> 00:01:35.450
They started writing code relying upon it,
proving yet again that old adage,

26
00:01:35.450 --> 00:01:38.080
there's nothing more permanent
than a temporary hack.

27
00:01:38.080 --> 00:01:41.060
Cuz as soon as they started using it, it
became a permanent part of the platform.

28
00:01:42.150 --> 00:01:44.600
You fast forward 18 or 19 years, and

29
00:01:44.600 --> 00:01:47.800
they were forced essentially,
to finally standardize it.

30
00:01:47.800 --> 00:01:51.740
So now, as of ES 6,
there's a dunder proto in the spec.

31
00:01:52.820 --> 00:01:56.484
That is the public property that
exposes the internal linkage.

32
00:01:58.719 --> 00:02:00.969
&gt;&gt; Kyle Simpson: For
about 15 of those 18 years,

33
00:02:00.969 --> 00:02:05.171
there was one browser that didn't
wanna play by those same rules,

34
00:02:05.171 --> 00:02:10.400
that didn't wanna do the dunder proto
even though everybody else did it.

35
00:02:10.400 --> 00:02:12.600
Can you guess which browser
that might have been?

36
00:02:12.600 --> 00:02:13.901
&gt;&gt; Speaker 2: IE?
&gt;&gt; Kyle Simpson: IE, they're like no,

37
00:02:13.901 --> 00:02:16.770
no, no we don't wanna add that,
it's not standard,

38
00:02:16.770 --> 00:02:20.330
which is super hypocritical because they
added a bunch of non standard stuff.

39
00:02:20.330 --> 00:02:22.910
But they're like no,
we don't wanna add dunder proto.

40
00:02:22.910 --> 00:02:26.090
Once it was finally added to
ES6 they relented and added it.

41
00:02:26.090 --> 00:02:29.883
So now, as of the latest versions
of Edge that are ES6 compliant,

42
00:02:29.883 --> 00:02:33.773
you can rely on dunder proto to ask,
where does this object link to?

43
00:02:36.159 --> 00:02:37.671
&gt;&gt; Kyle Simpson: Okay?

44
00:02:37.671 --> 00:02:43.420
Now in ES5, which was several years ago,
back in 2009, they did add a utility.

45
00:02:43.420 --> 00:02:46.090
They couldn't agree on dunder proto, but

46
00:02:46.090 --> 00:02:50.860
they did add a utility which we see
on line 15, Object.getPrototypeOf.

47
00:02:50.860 --> 00:02:54.030
That is a special utility that
can reach into an object and

48
00:02:54.030 --> 00:02:55.640
tell you what its internal linkage is.

49
00:02:55.640 --> 00:03:01.970
So that's the same thing
as calling a1.__proto__.

50
00:03:01.970 --> 00:03:05.800
IE did add that, so we have that
utility all the way back to IE9.

51
00:03:05.800 --> 00:03:12.140
But what about those unfortunate souls
that have to support IE6, 7 and 8?

52
00:03:12.140 --> 00:03:18.617
Well we have the third and
final crazy hack, follow with me.

53
00:03:18.617 --> 00:03:22.503
If I wanna get from a1 to Foo.prototype,
but

54
00:03:22.503 --> 00:03:27.884
I don't have dunder proto, and
I don't have getPrototypeOf,

55
00:03:27.884 --> 00:03:33.472
here's what I can do,
a1.constructor.prototype.

56
00:03:33.472 --> 00:03:36.510
&gt;&gt; Kyle Simpson: Yeah it really is as
ugly and hacky as it just sounded.

57
00:03:36.510 --> 00:03:42.020
Let me do that again,
a1.contructor.prototype.

58
00:03:42.020 --> 00:03:43.260
Now that's the hacky way,

59
00:03:43.260 --> 00:03:48.140
back in the day that we figured
out where is this thing linked to.

60
00:03:48.140 --> 00:03:51.530
The only problem is that .constructor and
.prototype,

61
00:03:51.530 --> 00:03:53.890
both of those properties are writable.

62
00:03:55.070 --> 00:03:59.480
So if either or both of them gets changed,
all bets are out the window.

63
00:04:02.304 --> 00:04:04.638
&gt;&gt; Kyle Simpson: It's a good thing we
finally have a standardized way of

64
00:04:04.638 --> 00:04:06.730
figuring out where one
object links to another.

65
00:04:08.720 --> 00:04:16.076
Now in that understanding, if I call
a1.identify, does a1 have an identify?

66
00:04:19.507 --> 00:04:21.115
&gt;&gt; Kyle Simpson: No, so
what are we gonna do?

67
00:04:22.748 --> 00:04:24.748
&gt;&gt; Kyle Simpson: We're gonna walk
up the prototype chain one link,

68
00:04:24.748 --> 00:04:27.040
and we're gonna say,
does this object have an identify?

69
00:04:29.360 --> 00:04:33.630
So we're gonna call that function,
now we're gonna be on line 5.

70
00:04:33.630 --> 00:04:37.052
What is the this key word on
line 5 gonna be pointing at?

71
00:04:41.298 --> 00:04:43.809
&gt;&gt; Kyle Simpson: If my call
site says a1.identify,

72
00:04:43.809 --> 00:04:47.970
what is the this keyword on
line 5 gonna be pointing at?

73
00:04:47.970 --> 00:04:50.060
&gt;&gt; Speaker 2: A1.
&gt;&gt; Kyle Simpson: A1, there's the implicit

74
00:04:50.060 --> 00:04:50.639
binding rule.

75
00:04:52.450 --> 00:04:55.760
You might have wondered why is
dynamic function context useful,

76
00:04:55.760 --> 00:04:57.020
here's why it's useful.

77
00:04:57.020 --> 00:04:59.600
Cuz we can locate functions
on different objects and

78
00:04:59.600 --> 00:05:03.520
the call site is the thing that
decides what its context is.

79
00:05:03.520 --> 00:05:08.226
Because if we wanna get the me
property off of a1 not the me property

80
00:05:08.226 --> 00:05:11.345
that doesn't even exist on Foo prototype.

81
00:05:11.345 --> 00:05:13.450
So, we call a1.identify, and

82
00:05:13.450 --> 00:05:17.219
it just magically works because
of the this binding rules.

83
00:05:20.399 --> 00:05:23.936
&gt;&gt; Kyle Simpson: So, now we finally
see that this prototype chain is

84
00:05:23.936 --> 00:05:27.570
the symmetrical mirror to
the lexical scope chain.

85
00:05:28.600 --> 00:05:31.950
These are two separate buildings
that exist in JavaScript.

86
00:05:31.950 --> 00:05:35.250
You can see that when we start at
the current scope and we go up the lexical

87
00:05:35.250 --> 00:05:39.830
scopes, that's conceptually almost
the same as starting at the current this

88
00:05:39.830 --> 00:05:44.620
object, and walking up the link of
objects in the prototype chain.

89
00:05:47.050 --> 00:05:51.260
The this and prototype chain is the
dynamic form of the lexical scope chain.

90
00:05:53.710 --> 00:05:58.690
When I discovered this several years back
studying JavaScript, it kinda blew my mind

91
00:05:58.690 --> 00:06:03.660
because I realized what a powerful concept
that was that nobody was talking about.

92
00:06:03.660 --> 00:06:07.610
That we have both of these systems
built into the same language,

93
00:06:07.610 --> 00:06:10.280
it's the best of both worlds.

94
00:06:10.280 --> 00:06:13.750
But we haven't been taught to
think independently about them, so

95
00:06:13.750 --> 00:06:16.310
we haven't known how to fully
take advantage of that power.

