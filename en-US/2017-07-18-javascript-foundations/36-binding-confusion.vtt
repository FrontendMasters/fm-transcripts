WEBVTT

1
00:00:00.260 --> 00:00:01.762
&gt;&gt; Kyle Simpson: So
there are four rules for

2
00:00:01.762 --> 00:00:04.300
how did this keyword works in JavaScript.

3
00:00:04.300 --> 00:00:09.250
It is not dependent in any way, shape or
form on where the function was written, or

4
00:00:09.250 --> 00:00:12.450
where the function is called from or
any of that stuff.

5
00:00:12.450 --> 00:00:17.290
There is only one thing that determines,
given a this aware function like the one

6
00:00:17.290 --> 00:00:21.860
on line one, foo is this aware
cause it has a this keyword in it.

7
00:00:21.860 --> 00:00:23.270
Given that function,

8
00:00:23.270 --> 00:00:27.350
there's only one way to answer what
is that this keyword gonna point at?

9
00:00:27.350 --> 00:00:30.964
And that is to say,
how was the function called?

10
00:00:30.964 --> 00:00:35.240
Doesn't matter where it was written,
doesn't matter where it was called from.

11
00:00:35.240 --> 00:00:36.820
Doesn't matter what's around it.

12
00:00:36.820 --> 00:00:40.180
The only thing that matters is
how the function was called.

13
00:00:40.180 --> 00:00:42.190
And I'm gonna say that over and

14
00:00:42.190 --> 00:00:46.976
over and over again, the only thing that
matters is how the function was called.

15
00:00:46.976 --> 00:00:49.880
That's counter intuitive,
which is why I have to say,

16
00:00:49.880 --> 00:00:52.980
the only thing that matters is
how the function was called.

17
00:00:54.560 --> 00:00:58.620
In our example here, you'll notice on line
nine, I call the function, it looks like

18
00:00:58.620 --> 00:01:03.620
a plain old normal function call, because
it is a plain old normal function call.

19
00:01:03.620 --> 00:01:07.110
That's one of four actually
different ways for

20
00:01:07.110 --> 00:01:10.550
a function to be called,
just as a plain old normal function call.

21
00:01:11.790 --> 00:01:16.560
And in the set of rules for determining
what do these keyword points at,

22
00:01:16.560 --> 00:01:19.230
this is actually the fourth and
final rule.

23
00:01:19.230 --> 00:01:23.340
So I'm going in reverse order here,
it's the default binding.

24
00:01:23.340 --> 00:01:26.600
Because there's no other rule that
will apply to that call sign,

25
00:01:26.600 --> 00:01:31.310
to that call of that function, the fourth
and final default rule kicks in, and

26
00:01:31.310 --> 00:01:36.480
the default rule says this; if a function
doesn't match any of those other rules,

27
00:01:36.480 --> 00:01:40.630
the default is a non-strict mode default
of this keyword to the global object.

28
00:01:42.820 --> 00:01:47.038
So that's why in this code which is
not strict mode, when we call foo,

29
00:01:47.038 --> 00:01:51.558
it makes to this keyword be the global
object which is why we promote bar1.

30
00:01:51.558 --> 00:01:55.772
Because it looks like
global.bar on line two, and

31
00:01:55.772 --> 00:01:59.790
it finds the global variable
bar from line five,

32
00:01:59.790 --> 00:02:05.180
had this code been in strict mode,
the default stays undefined.

33
00:02:05.180 --> 00:02:08.560
So, we would have basically
tried to do undefined.bar

34
00:02:08.560 --> 00:02:10.810
on line 2 which would
have thrown an error.

35
00:02:13.310 --> 00:02:16.830
So, you ask yourself,
why does strict mode make that an error?

36
00:02:16.830 --> 00:02:21.540
And the answer to that question is,
because it's almost always a mistake

37
00:02:21.540 --> 00:02:25.120
to have a this aware function
that you call like line nine.

38
00:02:25.120 --> 00:02:30.180
You never wanna call a this-aware
function looking like line 9.

39
00:02:30.180 --> 00:02:35.160
And if you do, and it accidentally
points at the global object,

40
00:02:35.160 --> 00:02:37.850
that is almost certainly
a bug in your program.

41
00:02:37.850 --> 00:02:41.210
That you're accidentally referring
indirectly to the global object and

42
00:02:41.210 --> 00:02:43.420
changing or accessing global properties.

43
00:02:44.850 --> 00:02:49.513
Because that's almost certainly a bug or
a problem, that's why they decided to make

44
00:02:49.513 --> 00:02:52.037
it undefined so
it literally threw an error for

45
00:02:52.037 --> 00:02:57.254
you.
&gt;&gt; Kyle Simpson: So the first rule that

46
00:02:57.254 --> 00:03:03.120
we learned, line nine is the default
binding rule, cuz no other rule applies.

47
00:03:03.120 --> 00:03:06.090
It kicks in in non-strict
mode it defaults to global.

48
00:03:06.090 --> 00:03:08.700
In strict mode, defaults to undefined.

49
00:03:09.950 --> 00:03:14.680
The second of our this binding rule says,
if there is a call site,

50
00:03:14.680 --> 00:03:19.099
if the function is called and at
the call site there is a context object.

51
00:03:20.150 --> 00:03:21.960
Like we see on line ten.

52
00:03:21.960 --> 00:03:24.210
I say o2.foo on line ten.

53
00:03:25.970 --> 00:03:26.970
It's the same function.

54
00:03:26.970 --> 00:03:31.010
You'll notice that that
comes to us from line six.

55
00:03:31.010 --> 00:03:35.130
On line six I borrow a reference
to the foo function and

56
00:03:35.130 --> 00:03:37.480
set that reference directly on o2.

57
00:03:38.800 --> 00:03:45.076
By borrowing that reference I can now
make the call site look like line 10,

58
00:03:45.076 --> 00:03:49.902
and I can implicitly say,
call foo in the context of 02.

59
00:03:49.902 --> 00:03:54.237
So, the implicit binding rule
says call the foo function,

60
00:03:54.237 --> 00:03:57.890
set its this keyword equal
to the context object.

61
00:03:59.960 --> 00:04:05.272
So, that's why we get bar 2, and
if I borrow the function again on line 7,

62
00:04:05.272 --> 00:04:10.432
and then call it using that bar load
reference on line 11, we get bar3.

63
00:04:10.432 --> 00:04:14.920
That's the implicit binding rule.

64
00:04:14.920 --> 00:04:17.082
So that's actually two of
our four rules in one slide.

65
00:04:17.082 --> 00:04:24.013
That was pretty easy.
&gt;&gt; Kyle Simpson: Of all four rules,

66
00:04:24.013 --> 00:04:29.410
the most important one for
you to get is this implicit binding rule.

67
00:04:29.410 --> 00:04:32.460
You have to be able to look at
a call site like line 10 or

68
00:04:32.460 --> 00:04:37.260
line 11 and immediately know, that
function is gonna get called whether this

69
00:04:37.260 --> 00:04:39.920
equal to that object that
shows up in front of it.

70
00:04:39.920 --> 00:04:42.570
You just gotta drill that into your brain
because we're gonna use that over and

71
00:04:42.570 --> 00:04:43.920
over and over again the rest of today.

