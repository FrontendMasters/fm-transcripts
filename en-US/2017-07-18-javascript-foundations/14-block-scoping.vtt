WEBVTT

1
00:00:00.390 --> 00:00:01.790
&gt;&gt; Kyle Simpson: Lets
talk about block scoping.

2
00:00:01.790 --> 00:00:03.450
Iffy is a good segue into if.

3
00:00:03.450 --> 00:00:08.460
We can use Iffys as kind of a heavier
weight way of creating a block of scope.

4
00:00:08.460 --> 00:00:10.680
There are some downsides to the Iffy.

5
00:00:10.680 --> 00:00:13.513
One of the things is they changed
the meaning of the return keyword,

6
00:00:13.513 --> 00:00:14.119
for example.

7
00:00:14.119 --> 00:00:16.711
So if you were wanting to
do a return inside of a for

8
00:00:16.711 --> 00:00:20.190
loop and you wrap an Iffy around it,
now that return doesn't talk

9
00:00:20.190 --> 00:00:23.370
to the external function and
now talks to the Iffy, right?

10
00:00:23.370 --> 00:00:27.015
So there are unfortunate side
effects that we'll also remap,

11
00:00:27.015 --> 00:00:31.760
or what this keyword means, or
what arguments means, and stuff like that.

12
00:00:31.760 --> 00:00:35.050
So it's kind of a heavier
weight way of creating a block.

13
00:00:35.050 --> 00:00:37.020
Be nice if JavaScript had block scoping,

14
00:00:37.020 --> 00:00:41.279
unfortunately as of ES6, we now have
the ability to create lightweight blocks.

15
00:00:42.526 --> 00:00:45.850
So I wanna give you some examples
of why you're gonna use this or

16
00:00:45.850 --> 00:00:48.440
what's the appropriate way to
think about block scoping.

17
00:00:48.440 --> 00:00:52.910
Imagine a function where I'm creating a
variable declaration inside, in this case,

18
00:00:52.910 --> 00:00:53.560
an if statement.

19
00:00:55.110 --> 00:00:59.770
If I say var tmp = x or
just the var tmp part, what I'm

20
00:00:59.770 --> 00:01:04.760
doing here is creating a temp variable
that does belong to the scope of diff.

21
00:01:04.760 --> 00:01:06.450
Remember, we talked about the rules.

22
00:01:06.450 --> 00:01:07.690
It's gonna find that var tmp.

23
00:01:07.690 --> 00:01:11.110
It's gonna say hey, scope of diff,
do you have a tmp that's gonna add it?

24
00:01:11.110 --> 00:01:13.900
There's gonna be one tmp variable for
the entire function.

25
00:01:13.900 --> 00:01:17.560
And I theoretically could use that tmp
variable on line 7 or 8 if I wanted to.

26
00:01:19.230 --> 00:01:22.480
But I've done something
stylistically different here.

27
00:01:22.480 --> 00:01:26.290
Even though implementation wise,
functionality wise,

28
00:01:26.290 --> 00:01:28.174
that tmp variable is available everywhere.

29
00:01:28.174 --> 00:01:31.530
What I've done stylistically is I've
said to the reader of this code,

30
00:01:31.530 --> 00:01:33.770
the intent is for you to

31
00:01:34.770 --> 00:01:38.209
treat this variables only being accessible
with inside of the if statement.

32
00:01:39.440 --> 00:01:41.190
There's an intent issue there.

33
00:01:41.190 --> 00:01:42.620
That's a stylistic decision.

34
00:01:44.180 --> 00:01:48.540
In the case where you were already wanting
to stylistically signal something, but

35
00:01:48.540 --> 00:01:50.220
there's no enforcement.

36
00:01:50.220 --> 00:01:53.970
It's nice to know now that as of ES6,
we have a let keyword

37
00:01:53.970 --> 00:01:57.759
that will enforce that which we were
already stylistically signalling.

38
00:02:00.276 --> 00:02:04.220
The let keyword will literally create
a temp variable that does not attach

39
00:02:04.220 --> 00:02:08.680
to the diff, the scope of diff, but
rather to the scope of the if statement.

40
00:02:10.740 --> 00:02:13.560
As a matter of fact, the if statement
didn't have a scope of before.

41
00:02:13.560 --> 00:02:16.390
The mere presence of the let
keyword within the if

42
00:02:16.390 --> 00:02:19.300
makes the if also into a block of scope.

43
00:02:21.600 --> 00:02:23.410
And that way,
it's sort of an implicit scope.

44
00:02:25.430 --> 00:02:29.309
It kind of hijack the if statement to
create some scope and it insert to create

45
00:02:29.309 --> 00:02:33.940
an environment, and insert that temp
variable into that environment.

46
00:02:33.940 --> 00:02:38.632
So now if we try to reference temp on line
7 or line 8, we get a what kind of error?

47
00:02:41.208 --> 00:02:44.090
&gt;&gt; Kyle Simpson: A reference error
because there is no temp in that scope.

48
00:02:45.950 --> 00:02:51.330
So this is a much lighter way of doing
the Iffy thing that we just talked about.

49
00:02:51.330 --> 00:02:55.400
It allows us to create a block of
scope in any place of our code

50
00:02:55.400 --> 00:02:58.100
simply by having a pair
of curly braces there.

51
00:02:58.100 --> 00:03:01.310
That can become a scope
by using the let keyword.

52
00:03:01.310 --> 00:03:06.160
I'm emphasizing that we are reinforcing
a stylistic signal with

53
00:03:06.160 --> 00:03:10.050
a functionality enforcement
because that is, in my opinion,

54
00:03:10.050 --> 00:03:13.300
the appropriate way to
approach the let keyword.

55
00:03:13.300 --> 00:03:18.120
There are many people that have adopted or
done what I've said over and

56
00:03:18.120 --> 00:03:21.340
over again that we developers are so good
at which is take one little thing that's

57
00:03:21.340 --> 00:03:24.480
good and take it to its logical extreme.

58
00:03:24.480 --> 00:03:28.678
So, great, if the let keyword is helpful
here, that means I should that everywhere.

59
00:03:28.678 --> 00:03:33.136
Get rid of that ugly var that I never
liked anyway, and just use let everywhere.

60
00:03:33.136 --> 00:03:37.030
There are literally lots and
lots of people, very prominent people,

61
00:03:37.030 --> 00:03:41.570
that have taken on that new,
let is the new var sort of perspective.

62
00:03:43.680 --> 00:03:47.620
As a metapoint on the let is
the new var end movement, or

63
00:03:47.620 --> 00:03:51.562
arrow is the new function movement,
or back ticks is,

64
00:03:51.562 --> 00:03:56.532
temperate literals is the new string
literal, or any of those things

65
00:03:56.532 --> 00:04:01.619
where we rush to say, let me take it
to the extreme and say x is the new y.

66
00:04:03.189 --> 00:04:07.413
&gt;&gt; Kyle Simpson: I will suggest to you
that virtually never in the course of

67
00:04:07.413 --> 00:04:12.253
computing history nor ever in
the future of computing history has

68
00:04:12.253 --> 00:04:15.960
there ever been a valid
statement of x is the new y.

69
00:04:15.960 --> 00:04:20.320
Here, we invented this new thing, and
at 100% with no exceptions, completely

70
00:04:20.320 --> 00:04:24.340
replaces the old thing, that just is
not the reality of computing science.

71
00:04:25.550 --> 00:04:27.030
We create new stuff, yes.

72
00:04:27.030 --> 00:04:29.444
And we should use new stuff
where it is appropriate.

73
00:04:29.444 --> 00:04:34.310
But it's virtually never the case that we
completely eliminate some entire whole

74
00:04:34.310 --> 00:04:38.110
section of thing that we used to think
was valid, and now it's entirely invalid.

75
00:04:38.110 --> 00:04:39.640
So when people say let is the new var,

76
00:04:39.640 --> 00:04:41.720
call bullshit on that
because it is not true.

77
00:04:43.470 --> 00:04:45.960
Let is not the new var, it is let and var.

78
00:04:45.960 --> 00:04:50.074
Let and var will be useful in your code,
and I'll expound upon that, okay?

79
00:04:50.074 --> 00:04:57.146
But don't rush to that cult wisdom of hey,
I can just put my let in.

80
00:04:57.146 --> 00:05:00.030
People have literally suggested
doing a global find and replace.

81
00:05:00.030 --> 00:05:04.242
I've seen T-shirts with the Ridge x
global find and replace of let and var.

82
00:05:04.242 --> 00:05:06.679
Are you kidding me?

83
00:05:06.679 --> 00:05:08.801
Not only would that break
a bunch of stuff, but

84
00:05:08.801 --> 00:05:11.010
it also just doesn't make any sense.

85
00:05:11.010 --> 00:05:15.137
We should be critically thinking
about where is let gonna be useful?

86
00:05:15.137 --> 00:05:19.855
In my opinion, the usefulness of let
is specifically to reinforce that

87
00:05:19.855 --> 00:05:24.010
what you are already
stylistically signaling.

88
00:05:24.010 --> 00:05:24.970
Don't go looking for

89
00:05:24.970 --> 00:05:29.240
places to do block scoping in a place
where that would be unnatural or weird.

90
00:05:30.900 --> 00:05:34.460
Don't just use the let because
it's nice to always use let.

91
00:05:34.460 --> 00:05:36.259
Use the let where it's gonna be helpful,

92
00:05:36.259 --> 00:05:39.616
where it's going to enforce the thing
you are already stylistically doing.

93
00:05:42.150 --> 00:05:42.844
&gt;&gt; Kyle Simpson: By the way,

94
00:05:42.844 --> 00:05:47.570
I mentioned that the let inside of some
block like an if statement, for example,

95
00:05:47.570 --> 00:05:51.070
is implicitly hijacking it and
turning it into a scope.

96
00:05:51.070 --> 00:05:53.280
I actually think we
should be more explicit.

97
00:05:53.280 --> 00:05:55.420
I think we should create
explicit blocks of scope.

98
00:05:55.420 --> 00:05:58.150
Like I'm doing here,
I just opened up a curly brace pair and

99
00:05:58.150 --> 00:06:01.160
I declared the variables
at the very first top line

100
00:06:01.160 --> 00:06:04.050
that are gonna be block-scoped
to that curly brace pair.

101
00:06:05.800 --> 00:06:06.990
There's a reason why I do that.

102
00:06:06.990 --> 00:06:11.250
First off, probably most importantly,
I wanna be super clear and

103
00:06:11.250 --> 00:06:13.360
obvious at the beginning of the block,

104
00:06:13.360 --> 00:06:16.950
any variables that you might expect
to exist only in that block.

105
00:06:16.950 --> 00:06:20.650
I don't wanna just sprinkle them
throughout the entire block,

106
00:06:20.650 --> 00:06:24.960
because then it's a lot harder for people
to figure out which thing is a scope and

107
00:06:24.960 --> 00:06:26.370
where did these things come from?

108
00:06:26.370 --> 00:06:28.610
Putting it at the top of
the block makes it super obvious.

109
00:06:28.610 --> 00:06:31.110
We're gonna create a prefix and
a REST variable.

110
00:06:31.110 --> 00:06:32.550
They're gonna exist only for this block.

111
00:06:34.530 --> 00:06:36.470
Secondly, the usage of the curly brace,

112
00:06:36.470 --> 00:06:39.820
that is not idiomatic to
JavaScript by any means.

113
00:06:39.820 --> 00:06:41.200
We've never really done that before, but

114
00:06:41.200 --> 00:06:44.670
it's been syntactically valid
since day one of JavaScript.

115
00:06:44.670 --> 00:06:47.370
It's just there was no reason
to ever do that before.

116
00:06:47.370 --> 00:06:49.390
But this isn't something I've made up.

117
00:06:49.390 --> 00:06:53.505
If you've done block scoping in any other
language in existence like Java, C++,

118
00:06:53.505 --> 00:06:56.820
etc., that's exactly how
you do block scoping.

119
00:06:56.820 --> 00:07:00.220
You open up a curly brace pair and
you make some variable declarations.

120
00:07:00.220 --> 00:07:03.471
So all I'm saying is, why don't we
use that 50 years of precedent, and

121
00:07:03.471 --> 00:07:05.029
just just keep doing that in JavaScript?

122
00:07:06.090 --> 00:07:08.020
You know what's not precedented?

123
00:07:08.020 --> 00:07:10.800
Accidentally high jacking existing plugs.

124
00:07:10.800 --> 00:07:13.524
That's not something that's very
idiomatic in those languages.

125
00:07:13.524 --> 00:07:17.080
People create explicit blocks,
cuz it's easier to read and understand.

126
00:07:18.260 --> 00:07:20.140
So all I'm saying is we ought to do that.

127
00:07:20.140 --> 00:07:23.040
And that means instead of just putting
a let inside of an if, why don't

128
00:07:23.040 --> 00:07:27.250
you go ahead and make a curly blazed pair
inside of the if to make it super obvious,

129
00:07:27.250 --> 00:07:29.050
there is a scope being created here?

130
00:07:30.280 --> 00:07:35.040
I know we're allergic to nesting and
white space, indentation.

131
00:07:35.040 --> 00:07:37.830
Those things are free, and
they help with readability.

132
00:07:37.830 --> 00:07:40.390
You should use them to that extent.

133
00:07:42.010 --> 00:07:42.920
So I prefer and

134
00:07:42.920 --> 00:07:46.980
recommend that you consider
creating explicit blocks of scope.

135
00:07:46.980 --> 00:07:49.665
And, by the way, you're gonna get some
practice on this in just a moment,

136
00:07:49.665 --> 00:07:53.330
cuz we're about to have an exercise
that lets you practice,

137
00:07:53.330 --> 00:07:55.346
where should I use a var or
where should I use a let?

