WEBVTT

1
00:00:00.440 --> 00:00:02.420
&gt;&gt; Kyle Simpson: All right,
what about the performance?

2
00:00:02.420 --> 00:00:03.350
Sometimes it's cited,

3
00:00:03.350 --> 00:00:06.990
well, triple equal's gonna be more
performance, we should use it.

4
00:00:06.990 --> 00:00:09.770
Let's go back to that
misconception earlier when I said,

5
00:00:09.770 --> 00:00:14.040
many people say,
that double equals checks the value, and

6
00:00:14.040 --> 00:00:17.290
triple equals checks the value and
the type, you remember that?

7
00:00:17.290 --> 00:00:21.581
In that statement, which one of
those two appears to do more work?

8
00:00:21.581 --> 00:00:22.436
&gt;&gt; Speaker 2: Triple equals.

9
00:00:22.436 --> 00:00:24.400
&gt;&gt; Kyle Simpson: Triple equals, okay?

10
00:00:24.400 --> 00:00:26.210
But then we've already
established that's incorrect.

11
00:00:26.210 --> 00:00:28.240
The spec says, it's incorrect.

12
00:00:28.240 --> 00:00:31.590
So what actually happens is that,
double equals allows coercion and

13
00:00:31.590 --> 00:00:33.370
triple equals disallows coercion.

14
00:00:33.370 --> 00:00:35.010
Which one of those
appears to do more work?

15
00:00:37.253 --> 00:00:37.909
&gt;&gt; Speaker 2: Double.

16
00:00:37.909 --> 00:00:42.484
&gt;&gt; Kyle Simpson: Double, so thinking
critically about this stuff, it actually

17
00:00:42.484 --> 00:00:48.970
matters how it really works cuz we can
come to an entirely opposite intuition.

18
00:00:48.970 --> 00:00:52.447
&gt;&gt; Kyle Simpson: Now, I'm actually gonna
argue that the performance doesn't matter,

19
00:00:52.447 --> 00:00:55.813
but I just wanna observe
the performance for a moment.

20
00:00:55.813 --> 00:00:59.560
&gt;&gt; Kyle Simpson: The double
equals is going to be slower, but

21
00:00:59.560 --> 00:01:02.406
only under some circumstances.

22
00:01:02.406 --> 00:01:07.439
Back to the spec, if the types
are the same, did you know that

23
00:01:07.439 --> 00:01:12.500
double equals does exactly
the same thing as triple equals?

24
00:01:14.479 --> 00:01:18.048
&gt;&gt; Kyle Simpson: If the types
are already the same, double equals and

25
00:01:18.048 --> 00:01:20.899
triple equals do exactly the same thing.

26
00:01:20.899 --> 00:01:24.578
There will be zero performance difference.

27
00:01:24.578 --> 00:01:28.340
&gt;&gt; Kyle Simpson: Just one less character
to type, if the types are the same.

28
00:01:28.340 --> 00:01:32.247
So the question you have to ask yourself
is, how often do I make comparisons where

29
00:01:32.247 --> 00:01:34.499
I know the types are already
gonna be the same?

30
00:01:35.971 --> 00:01:39.190
&gt;&gt; Kyle Simpson: Honestly,
I think you ought to do more of that.

31
00:01:39.190 --> 00:01:42.490
Honestly, I think it's better to do
comparison where you already know what

32
00:01:42.490 --> 00:01:44.030
the types are.

33
00:01:44.030 --> 00:01:46.866
Coercion is helpful in those places
where you can't avoid it, but

34
00:01:46.866 --> 00:01:48.842
it's not like you should
go around looking for

35
00:01:48.842 --> 00:01:51.141
every opportunity to do some
kind of crazy coercion.

36
00:01:52.237 --> 00:01:55.720
&gt;&gt; Kyle Simpson: So if you can get to
the point where the types are already

37
00:01:55.720 --> 00:02:00.643
the same, then double equals is guaranteed
to be safe cuz it's the same thing

38
00:02:00.643 --> 00:02:03.120
as triple equals, okay?

39
00:02:03.120 --> 00:02:05.950
So it's not gonna be slower in all cases.

40
00:02:05.950 --> 00:02:08.955
It's only gonna be slower in cases
where the types are different.

41
00:02:10.189 --> 00:02:14.239
&gt;&gt; Kyle Simpson: But, the real question
is not whether or not it's slower.

42
00:02:14.239 --> 00:02:18.871
The real question is whether or
not we want that coercion.

43
00:02:18.871 --> 00:02:21.201
Let's test this theory of whether or

44
00:02:21.201 --> 00:02:25.350
not double equals is actually in
an overall case gonna be slower.

45
00:02:25.350 --> 00:02:29.850
Let's imagine we have a number
comparison to a string comparison.

46
00:02:29.850 --> 00:02:31.290
These types differ.

47
00:02:31.290 --> 00:02:36.820
x and y are the same type, but x and
z is definitely of a different type.

48
00:02:36.820 --> 00:02:40.530
A coercion is going to occur to
allow that comparison to happen.

49
00:02:40.530 --> 00:02:43.530
There is no question that
coercion will take some time.

50
00:02:43.530 --> 00:02:49.520
We're talking about microseconds,
but it is slower, okay, no question.

51
00:02:49.520 --> 00:02:52.000
Many people stop there and
say, end of story.

52
00:02:52.000 --> 00:02:54.571
If double equals a slower
in any circumstance,

53
00:02:54.571 --> 00:02:56.634
I'm always gonna use triple equals.

54
00:02:57.714 --> 00:03:01.351
&gt;&gt; Kyle Simpson: They fail to account for
one very important fact.

55
00:03:01.351 --> 00:03:06.201
Triple equals is not more than
twice as fast as double equals,

56
00:03:06.201 --> 00:03:09.946
it's about 30% faster than double equals.

57
00:03:11.343 --> 00:03:13.600
&gt;&gt; Kyle Simpson: You might be
able to guess where I'm going.

58
00:03:13.600 --> 00:03:17.717
x == to z and
x === to z are not equivalent,

59
00:03:17.717 --> 00:03:21.470
they don't have the same behavior.

60
00:03:21.470 --> 00:03:24.730
So comparing the performance is like
comparing an apple and an orange.

61
00:03:25.930 --> 00:03:27.365
Let's compare equivalences.

62
00:03:28.897 --> 00:03:30.270
&gt;&gt; Kyle Simpson: This is the equivalence.

63
00:03:31.290 --> 00:03:38.060
You could either do x == to y, or
you could do x === to y, or x === to z.

64
00:03:38.060 --> 00:03:41.090
So you could either do one
double equals comparison, or

65
00:03:41.090 --> 00:03:43.550
you could do two triple
equals comparisons.

66
00:03:44.811 --> 00:03:50.311
&gt;&gt; Kyle Simpson: Now, if we do 2 versus 1,
which one of those 2 lines?

67
00:03:50.311 --> 00:03:53.373
Is line 2 or line 6 gonna be faster?

68
00:03:55.775 --> 00:03:58.787
&gt;&gt; Kyle Simpson: Line 2 is
actually gonna be faster,

69
00:03:58.787 --> 00:04:04.630
because triple equals is not more
than double as fast as double equals.

70
00:04:06.384 --> 00:04:09.958
&gt;&gt; Kyle Simpson: So, actually,
if we really care about microseconds,

71
00:04:09.958 --> 00:04:12.248
you ought to prefer double equals.

72
00:04:13.292 --> 00:04:15.453
&gt;&gt; Kyle Simpson: Cuz,
on the whole, the equivalence,

73
00:04:15.453 --> 00:04:17.623
it's gonna be faster to use coercion.

74
00:04:17.623 --> 00:04:21.562
This actually should fit with some
intuition of yours which I've said over

75
00:04:21.562 --> 00:04:25.817
and over and over again,
let the engine do what it's best at.

76
00:04:25.817 --> 00:04:29.150
&gt;&gt; Kyle Simpson: The engine is better at
doing coercion faster than you are able

77
00:04:29.150 --> 00:04:32.166
to list these things out explicitly.

78
00:04:32.166 --> 00:04:33.255
&gt;&gt; Kyle Simpson: It's just a fact.

79
00:04:34.839 --> 00:04:37.172
&gt;&gt; Kyle Simpson: Let the engine
do what it's better at.

80
00:04:38.280 --> 00:04:42.035
&gt;&gt; Kyle Simpson: But, even though double
equals is faster, that's not the argument

81
00:04:42.035 --> 00:04:45.738
I'm actually making, I just wanted
to debunk the other argument.

82
00:04:46.809 --> 00:04:48.990
&gt;&gt; Kyle Simpson: I think this
comment sums it up well.

83
00:04:48.990 --> 00:04:52.380
If the types compare to the same,
they are identical, that is to say,

84
00:04:52.380 --> 00:04:55.660
they use the same exact algorithm.

85
00:04:55.660 --> 00:04:56.920
If the types are different,

86
00:04:56.920 --> 00:05:00.780
the performance is irrelevant, either
you need type conversion or you don't.

87
00:05:00.780 --> 00:05:05.063
If you don't need it, don't use == because
the result you get maybe unexpected.

88
00:05:06.480 --> 00:05:08.429
&gt;&gt; Kyle Simpson: Every frame's
the whole debate, doesn't it?

89
00:05:08.429 --> 00:05:12.969
Doesn't it actually put the responsibility
back on you to be the responsible engineer

90
00:05:12.969 --> 00:05:14.660
and critically think about it?

91
00:05:15.800 --> 00:05:17.820
Do I want coercion or do I not?

92
00:05:18.933 --> 00:05:22.909
&gt;&gt; Kyle Simpson: So the FUD, the fear,
uncertainty and doubt that is often spread

93
00:05:22.909 --> 00:05:28.201
throughout this, is that using == in your
code is dangerous and you should avoid it.

94
00:05:29.356 --> 00:05:30.528
&gt;&gt; Kyle Simpson: That's the FUD.

95
00:05:30.528 --> 00:05:32.595
Let me reword that as a protip.

96
00:05:32.595 --> 00:05:36.903
Use === where it's safer and
use == where it's more helpful.

97
00:05:41.524 --> 00:05:42.994
&gt;&gt; Kyle Simpson: And let me extract that.

98
00:05:42.994 --> 00:05:48.076
Let me extrapolate that same comparison
to the larger topic of coercion.

99
00:05:49.128 --> 00:05:52.152
&gt;&gt; Kyle Simpson: JavaScript's implicit
coercion is flaw in the design of

100
00:05:52.152 --> 00:05:53.539
the language, avoid it.

101
00:05:53.539 --> 00:05:56.211
That's a near direct quote
from the good parts.

102
00:05:57.981 --> 00:05:59.321
&gt;&gt; Kyle Simpson: Let's reword that.

103
00:06:00.647 --> 00:06:02.724
&gt;&gt; Kyle Simpson: Use explicit
coercion where it's safer and

104
00:06:02.724 --> 00:06:05.089
use implicit coercion
where it's more helpful.

105
00:06:07.184 --> 00:06:09.255
&gt;&gt; Kyle Simpson: Still use coercion.

106
00:06:09.255 --> 00:06:12.714
Choose between them depending
upon which one is more helpful or

107
00:06:12.714 --> 00:06:16.448
more safe depending on
the needs of each statement.

108
00:06:16.448 --> 00:06:17.754
&gt;&gt; Kyle Simpson: And guess what?

109
00:06:17.754 --> 00:06:20.526
That's something your linters not
gonna be smart enough to figure out,

110
00:06:20.526 --> 00:06:22.035
you're gonna have to figure that out.

