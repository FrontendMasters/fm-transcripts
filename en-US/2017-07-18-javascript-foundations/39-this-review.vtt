WEBVTT

1
00:00:00.600 --> 00:00:02.170
&gt;&gt; Kyle: Let's check some understanding.

2
00:00:02.170 --> 00:00:05.841
How do you borrow a function and
implicitly set this?

3
00:00:05.841 --> 00:00:10.271
Remember how I took the foo function and
I put it on the O2 object and

4
00:00:10.271 --> 00:00:12.420
then I used O2.foo to call it?

5
00:00:13.590 --> 00:00:16.274
That was borrowing
the function reference and

6
00:00:16.274 --> 00:00:19.791
then calling that was an implicit
binding for this keyword.

7
00:00:22.328 --> 00:00:26.954
&gt;&gt; Kyle: How do you explicitly
set this for a function call?

8
00:00:26.954 --> 00:00:28.126
&gt;&gt; Speaker 2: Call and apply.

9
00:00:28.126 --> 00:00:30.831
&gt;&gt; Kyle: .call or .apply.

10
00:00:30.831 --> 00:00:34.514
How can you lock a specific
this to a function?

11
00:00:34.514 --> 00:00:35.311
&gt;&gt; Speaker 3: Bind.

12
00:00:35.311 --> 00:00:36.143
&gt;&gt; Speaker 2: Bind.

13
00:00:36.143 --> 00:00:38.790
&gt;&gt; Kyle: .bind, why is that good?

14
00:00:38.790 --> 00:00:39.820
What's helpful about that?

15
00:00:41.550 --> 00:00:42.810
&gt;&gt; Speaker 2: You always know what it is.

16
00:00:42.810 --> 00:00:43.800
&gt;&gt; Kyle: It's predictable.

17
00:00:43.800 --> 00:00:44.560
Why is it bad?

18
00:00:45.690 --> 00:00:46.610
&gt;&gt; Speaker 2: It's inflexible.

19
00:00:46.610 --> 00:00:48.160
&gt;&gt; Kyle: It's loss of flexibility.

20
00:00:49.300 --> 00:00:54.052
How do you create a new this for
the function call?

21
00:00:54.052 --> 00:00:55.043
&gt;&gt; Speaker 2: New keyword.

22
00:00:55.043 --> 00:00:56.569
&gt;&gt; Kyle: The new keyword,
not a trick question.

23
00:00:59.260 --> 00:01:01.450
What about arrow functions?

24
00:01:01.450 --> 00:01:03.084
You probably all heard
about arrow functions.

25
00:01:03.084 --> 00:01:04.357
Everybody's enamored with them.

26
00:01:04.357 --> 00:01:05.454
I don't like arrow functions.

27
00:01:05.454 --> 00:01:06.614
I don't really use them but

28
00:01:06.614 --> 00:01:09.910
there's one particular thing that you
should know about arrow functions.

29
00:01:09.910 --> 00:01:14.380
And that is that arrow functions do
not have a this keyword in them.

30
00:01:16.160 --> 00:01:20.910
Which means if you have an arrow function
with a this reference in it like I do on

31
00:01:20.910 --> 00:01:22.300
line 2.

32
00:01:22.300 --> 00:01:27.790
The this keyword inside of that function
is not a special keyword at all.

33
00:01:27.790 --> 00:01:30.583
It's just a random variable name.

34
00:01:30.583 --> 00:01:32.158
And because of that,

35
00:01:32.158 --> 00:01:38.030
it's going to look up the lexical scope
chain like any regular variable would.

36
00:01:39.090 --> 00:01:43.520
So what it's gonna do is go from the arrow
function to the enclosing function,

37
00:01:43.520 --> 00:01:45.510
which in this case is the foo function.

38
00:01:45.510 --> 00:01:49.030
And it's gonna say hey, foo function,
do you know who this is?

39
00:01:49.030 --> 00:01:51.590
And the foo function's gonna say yep,
I've got this.

40
00:01:53.970 --> 00:01:58.230
So the arrow function is said
to have a lexical this behavior.

41
00:01:58.230 --> 00:02:01.190
It's a this that behaves by lexical rules.

42
00:02:01.190 --> 00:02:05.820
As opposed to the this binding rules cuz
it doesn't really have a this itself.

43
00:02:05.820 --> 00:02:09.200
It's not a special keyword
in arrow functions.

44
00:02:09.200 --> 00:02:10.580
&gt;&gt; Speaker 2: So
where does it come from then?

45
00:02:10.580 --> 00:02:12.990
It just makes a this object?

46
00:02:12.990 --> 00:02:13.850
&gt;&gt; Kyle: Nope.

47
00:02:13.850 --> 00:02:16.220
It doesn't exist in that function.

48
00:02:16.220 --> 00:02:17.630
&gt;&gt; Speaker 2: So when did error.

49
00:02:17.630 --> 00:02:21.430
&gt;&gt; Kyle: No, it goes up one level to
the foo function and says hey foo,

50
00:02:21.430 --> 00:02:23.270
have you ever heard of a this?

51
00:02:23.270 --> 00:02:26.910
Remember earlier in the workshop when
we did that whole look up thing and

52
00:02:26.910 --> 00:02:28.820
we were looking for variables?

53
00:02:28.820 --> 00:02:31.220
It's gonna do the same thing
with the this keyword here.

54
00:02:31.220 --> 00:02:34.210
Cuz it's not a special keyword
inside of the arrow function,

55
00:02:34.210 --> 00:02:36.450
it's just a regular old variable.

56
00:02:36.450 --> 00:02:40.170
&gt;&gt; Speaker 2: So if the foo function
was a fat arrow function too, it-

57
00:02:40.170 --> 00:02:41.476
&gt;&gt; Kyle: It would go one more level up to

58
00:02:41.476 --> 00:02:43.685
the global and say hey global,
do you have a this?

59
00:02:43.685 --> 00:02:45.500
And the global always has a this.

60
00:02:45.500 --> 00:02:46.311
&gt;&gt; Speaker 2: Okay.

61
00:02:52.154 --> 00:02:55.168
&gt;&gt; Kyle: A lot of people like to say that
arrow functions have a hard bound this,

62
00:02:55.168 --> 00:02:56.890
that is inaccurate.

63
00:02:56.890 --> 00:02:59.340
Arrow functions don't have a this.

64
00:02:59.340 --> 00:03:04.011
So they always lexically inherit
from their enclosing scope.

65
00:03:04.011 --> 00:03:06.680
&gt;&gt; Speaker 2: Do you hear reference or
if it's in the global scope?

66
00:03:08.080 --> 00:03:10.030
&gt;&gt; Kyle: Nope.
Global scope always has a this.

