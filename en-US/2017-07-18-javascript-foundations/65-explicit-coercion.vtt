WEBVTT

1
00:00:00.270 --> 00:00:04.664
&gt;&gt; Kyle Simpson: So coercion is
JavaScript's, or rather I should say,

2
00:00:04.664 --> 00:00:11.403
a dynamic language's way of expressing how
values convert from one type to another.

3
00:00:11.403 --> 00:00:15.018
And we all know that languages like C++,
Java,

4
00:00:15.018 --> 00:00:20.112
basically all languages,
have some mechanism for type conversion.

5
00:00:20.112 --> 00:00:24.838
And it would be ludicrous to suggest in
for example Java, that they should do away

6
00:00:24.838 --> 00:00:29.438
with all the type conversions, there's
no reason to convert between types.

7
00:00:29.438 --> 00:00:33.872
Obviously we have to statically cast from
one type to another to do any kind of

8
00:00:33.872 --> 00:00:36.250
reasonable work in our programs.

9
00:00:36.250 --> 00:00:40.010
You have a number that you
receive from an API call, and

10
00:00:40.010 --> 00:00:42.070
you need to print it on the screen,
well guess what,

11
00:00:42.070 --> 00:00:45.960
it has to be converted to a string so
it can be printed to the screen.

12
00:00:45.960 --> 00:00:49.890
You receive a string as
input in the input box, and

13
00:00:49.890 --> 00:00:51.930
then you need to do some math with that.

14
00:00:51.930 --> 00:00:54.220
Guess what,
it has to be converted to a number.

15
00:00:54.220 --> 00:00:58.930
I would go almost so far as to say there
is no non trivial program in existence,

16
00:00:58.930 --> 00:01:03.680
that doesn't have some notion of
some type conversion happening.

17
00:01:03.680 --> 00:01:06.840
So when people suggest that
JavaScript's coercion is bad,

18
00:01:06.840 --> 00:01:12.150
and evil, and a buggy design and
should be ignored and removed.

19
00:01:12.150 --> 00:01:14.409
That's almost a ludicrous statement,

20
00:01:14.409 --> 00:01:19.550
because JavaScript couldn't do anything
useful if we couldn't do conversion.

21
00:01:19.550 --> 00:01:24.060
So rather than suggest coercion is bad,
I think we should look at

22
00:01:24.060 --> 00:01:28.430
what patterns of coercion are useful,
what ones we should avoid, okay?

23
00:01:28.430 --> 00:01:34.131
And I'm gonna arbitrarily divide this into
two categories that I'll call explicit and

24
00:01:34.131 --> 00:01:34.910
implicit.

25
00:01:36.670 --> 00:01:41.210
Immediately upon saying that, most of
you probably have some notion of well

26
00:01:41.210 --> 00:01:45.550
explicit coercion is okay,
it's implicit coercion that's bad.

27
00:01:45.550 --> 00:01:50.780
So typically developers will have
a perception that explicit mechanisms

28
00:01:50.780 --> 00:01:56.380
in code are preferable, where implicit
mechanisms are easier to misunderstand,

29
00:01:56.380 --> 00:02:00.760
and not fully grasp or be able to
tell that they're happening in code.

30
00:02:00.760 --> 00:02:03.990
So typically we'll label the explicit
as good, and implicit as bad.

31
00:02:05.120 --> 00:02:09.500
I wanna set aside some of those notions,
because I do not mean to put these in two

32
00:02:09.500 --> 00:02:13.530
categories and
say explicit good implicit bad.

33
00:02:13.530 --> 00:02:16.970
As a matter of fact,
I think the most benefit,

34
00:02:16.970 --> 00:02:22.120
the biggest proposition benefit
here is implicit coercion.

35
00:02:22.120 --> 00:02:25.080
But we need to first look at
these as distinctly different

36
00:02:25.080 --> 00:02:29.740
approaches to the problem, and then
ferret out what parts of the explicit and

37
00:02:29.740 --> 00:02:34.330
implicit coercions are useful, and
what parts will not be useful to us.

38
00:02:34.330 --> 00:02:38.120
And by the way, this is not a scientific
thing, like you must do it this way.

39
00:02:38.120 --> 00:02:39.770
There are things that we'll
talk about in this course,

40
00:02:39.770 --> 00:02:41.340
which is like, there's no argument.

41
00:02:41.340 --> 00:02:43.410
Like lexical scope works this way,

42
00:02:43.410 --> 00:02:46.910
there's no subjectivity,
there's a lot of subjectivity here.

43
00:02:46.910 --> 00:02:49.434
But there's a cargo cult against coercion.

44
00:02:49.434 --> 00:02:54.030
[COUGH] And you've heard plenty of those
cases for why people don't wanna do that,

45
00:02:54.030 --> 00:02:56.950
and why you should never use the double
equals and all of that stuff.

46
00:02:56.950 --> 00:03:01.870
And what I wanna take you through is
the distillation of the case in favor

47
00:03:01.870 --> 00:03:03.432
of these mechanisms.

48
00:03:03.432 --> 00:03:07.299
So set aside if you would while we go for
this next little bit, set aside some of

49
00:03:07.299 --> 00:03:11.658
you preconceptions about what's bad about
these things and why we should avoid them.

50
00:03:11.658 --> 00:03:15.369
And I only use type script,
I only use static types of whatever,

51
00:03:15.369 --> 00:03:19.745
just set some of that aside, because I
really do genuinely believe that some of

52
00:03:19.745 --> 00:03:23.460
these mechanisms can aid
us in writing better code.

53
00:03:23.460 --> 00:03:25.290
All right, so let's look at explicit.

54
00:03:25.290 --> 00:03:28.330
My basic what you need to
know sort of definition for

55
00:03:28.330 --> 00:03:31.290
explicit is that it's obvious from
the code that you're doing it.

56
00:03:31.290 --> 00:03:35.350
Okay, if you look at a piece of code,
and it's obvious that a conversion from

57
00:03:35.350 --> 00:03:40.180
one type to another is happening, that's
explicit coercion, no question, okay?

58
00:03:40.180 --> 00:03:44.210
Now obviously JavaScript being a runtime
oriented language, that conversion

59
00:03:44.210 --> 00:03:48.980
is not enforced and its not happening at
compile time, it's happening at runtime.

60
00:03:48.980 --> 00:03:52.130
But it's still an explicit mechanism,
you can see in the code

61
00:03:52.130 --> 00:03:55.750
you're going from a string to a number,
it's very clear, okay?

62
00:03:55.750 --> 00:03:59.200
But even within that statement,
there is some subjectivity,

63
00:03:59.200 --> 00:04:01.910
which we'll see here on
the very next slide, okay?

64
00:04:01.910 --> 00:04:06.280
So we're going to talk first about the
case of going between strings and numbers.

65
00:04:06.280 --> 00:04:10.090
It's one of the most common cases where
conversion between types will happen.

66
00:04:10.090 --> 00:04:14.300
So let's talk about going in either
direction between string and number.

67
00:04:14.300 --> 00:04:18.030
Let's imagine we start out with a string
quote 123, and what we'd like to do

68
00:04:18.030 --> 00:04:23.550
is convert that to the number 123
we'd want to coerce it, okay?

69
00:04:23.550 --> 00:04:25.360
Multiple ways to do that coercion.

70
00:04:25.360 --> 00:04:29.290
One way that is often cited,
but which I will say

71
00:04:29.290 --> 00:04:33.790
is not actually coercion is the parseInt
function like we see on line 2.

72
00:04:33.790 --> 00:04:38.730
Now with the parseInt function,
it's an unusual occurrence that

73
00:04:38.730 --> 00:04:42.720
its name is actually very
descriptive of what it's about.

74
00:04:42.720 --> 00:04:46.400
Not everybody does good API design, and
in fact there's plenty of places in

75
00:04:46.400 --> 00:04:50.010
JavaScript that I could complain
about the API design, say yeah,

76
00:04:50.010 --> 00:04:53.620
not a well designed function name,
for example.

77
00:04:53.620 --> 00:04:58.210
This one says right on the label what kind
of soup you're getting in the can, okay?

78
00:04:58.210 --> 00:05:02.420
It says right on the label
what I do is parse integers.

79
00:05:02.420 --> 00:05:05.490
So think to yourself what is parsing, and

80
00:05:05.490 --> 00:05:09.130
what is the relationship
between parsing and coercing?

81
00:05:09.130 --> 00:05:12.120
If I coerce a number out a string
what's the difference between that and

82
00:05:12.120 --> 00:05:14.352
parsing a number out of a string?

83
00:05:14.352 --> 00:05:19.530
Well I would argue that these
are distinctly different concepts, and

84
00:05:19.530 --> 00:05:24.340
using the parseInt function to coerce
is a misuse of that mechanism,

85
00:05:24.340 --> 00:05:28.110
and it should not be surprising that
may do things differently than what

86
00:05:28.110 --> 00:05:30.490
you might have otherwise expected.

87
00:05:30.490 --> 00:05:35.300
So parsing is taking a string going from
left to right, looking for characters that

88
00:05:35.300 --> 00:05:39.770
match what you're expecting, in this case
integer numbers like the decimal 0 through

89
00:05:39.770 --> 00:05:44.050
9, matching those, and
then producing the number equivalent.

90
00:05:44.050 --> 00:05:48.630
And stopping as soon as you no longer see
characters that represent that number.

91
00:05:48.630 --> 00:05:51.680
As soon as you find the first
unrecognized character, stop.

92
00:05:51.680 --> 00:05:53.580
That's what parsing is about.

93
00:05:53.580 --> 00:05:57.700
So in CSS you have
a property that is 123px and

94
00:05:57.700 --> 00:06:02.260
you pull that property out so
you have the string, quote 123px.

95
00:06:02.260 --> 00:06:05.810
If you parse that string for
an integer, you're gonna

96
00:06:05.810 --> 00:06:08.420
get the integer 123 out because it's
gonna start from left to right.

97
00:06:08.420 --> 00:06:12.190
It's gonna see the 1, 2, and 3,
recognize those, parse those out.

98
00:06:12.190 --> 00:06:17.330
As soon as it sees the p we're in base
10 p is not a valid character, so

99
00:06:17.330 --> 00:06:22.550
it's gonna skip over, I mean it's gonna
stop at that point, okay that's parsing.

100
00:06:22.550 --> 00:06:27.700
Coercion on the other hand is an all or
nothing situation, the value you give

101
00:06:27.700 --> 00:06:33.090
me either has to completely coerce to
this other type, or it fails entirely.

102
00:06:33.090 --> 00:06:36.980
There's no partial coercion,
so it's not like parsing.

103
00:06:36.980 --> 00:06:41.970
If you give me 123px as a string, and
you asked me to coerce that to a number,

104
00:06:41.970 --> 00:06:45.700
there's only one sensible answer for
that, and that's the NaN value.

105
00:06:45.700 --> 00:06:50.940
Because 123px is not a valid number,
make sense?

106
00:06:52.100 --> 00:06:53.620
So parsing is not coercion.

107
00:06:53.620 --> 00:06:56.690
I would advise you not to
try to use parsing for

108
00:06:56.690 --> 00:07:00.160
coercion, or
to try to use coercion for parsing.

109
00:07:00.160 --> 00:07:04.460
Decide what you need, and
more importantly, use the right tool for

110
00:07:04.460 --> 00:07:07.040
the right task, because you wanna
communicate clearly in your code.

111
00:07:08.560 --> 00:07:11.434
There is not only use the right tool for
the right task, but

112
00:07:11.434 --> 00:07:13.205
use the right tool in the right way.

113
00:07:13.205 --> 00:07:16.338
I use the silly metaphor, you know how
people say well don't go around swinging

114
00:07:16.338 --> 00:07:18.514
a hammer if you're trying
to drive in screws, right?

115
00:07:18.514 --> 00:07:20.930
That's a very common metaphor.

116
00:07:20.930 --> 00:07:23.980
But let's say I've got a bunch of nails,
and I wanna drive those nails in

117
00:07:23.980 --> 00:07:28.010
I have the correct tool, I have the hammer
in hand cuz I have the right tool.

118
00:07:28.010 --> 00:07:29.700
But if I put that hammer in my mouth and

119
00:07:29.700 --> 00:07:33.000
I start swinging,
using the right tool, right?

120
00:07:33.000 --> 00:07:34.720
But I'm not using the right
tool the correct way.

121
00:07:36.570 --> 00:07:39.780
So, both of those are important in
the equation, use the correct tool and

122
00:07:39.780 --> 00:07:41.670
use it correctly, as designed.

123
00:07:42.970 --> 00:07:46.830
So, parseInt, it's designed for
parsing and we should parse with that.

124
00:07:48.630 --> 00:07:50.240
[COUGH] Then we turn our
attention to line 5.

125
00:07:50.240 --> 00:07:53.830
You'll notice I'm using the number,
that native function,

126
00:07:53.830 --> 00:07:55.470
remember those we talked about earlier.

127
00:07:55.470 --> 00:08:00.012
The native function When we don't
use the new keyword in front of it,

128
00:08:00.012 --> 00:08:03.340
when it's just the function call,
it takes whatever we give it and

129
00:08:03.340 --> 00:08:05.890
it coerces it to that
corresponding primitive type.

130
00:08:05.890 --> 00:08:07.690
In this case, that primitive number.

131
00:08:07.690 --> 00:08:12.446
You will notice that line 5 actually kinda
looks a little bit like a static type

132
00:08:12.446 --> 00:08:14.780
cast in some languages.

133
00:08:14.780 --> 00:08:18.170
Technically, here it's actually
a function call, it's not a type cast.

134
00:08:18.170 --> 00:08:19.450
But it sort of looks the same.

135
00:08:21.190 --> 00:08:25.160
And I don't think that's an accident,
I actually think that's a good thing for

136
00:08:25.160 --> 00:08:29.500
us to draw upon the precedent if
people are used to seeing explicit

137
00:08:29.500 --> 00:08:34.170
type casting in a static
type oriented language.

138
00:08:34.170 --> 00:08:38.500
We can do something very familiar and
recognizable to them by doing

139
00:08:38.500 --> 00:08:42.890
a coercion from a string, in this case,
to a number, using the number function.

140
00:08:42.890 --> 00:08:47.770
So I would recommend and
endorse that, as a way to do explicit

141
00:08:47.770 --> 00:08:52.890
coercions from any value to a number, but
in this case, from a string to a number.

142
00:08:52.890 --> 00:08:54.840
Anything you pass into
the number function,

143
00:08:54.840 --> 00:08:56.690
it'll coerce it to its number equivalent.

144
00:08:56.690 --> 00:08:59.980
Including NaN if that's
the appropriate coercion, okay?

145
00:09:02.080 --> 00:09:06.869
Now, [COUGH] having said that, very few
places have I ever seen in any code base,

146
00:09:06.869 --> 00:09:10.823
especially in open source,
anybody using the number function.

147
00:09:10.823 --> 00:09:16.011
It seems virtually every time that people
want to explicitly coerce to a number,

148
00:09:16.011 --> 00:09:20.531
what they instead use is this unary
+ operator, as you see on line 8.

149
00:09:20.531 --> 00:09:22.000
Now what's that operator about?

150
00:09:22.000 --> 00:09:26.870
If you read the spec, that operator,
specifically takes whatever you give it,

151
00:09:26.870 --> 00:09:31.890
take the operand and runs the two
number abstract operation against it.

152
00:09:31.890 --> 00:09:35.930
It does the exact same thing as
the number function, exactly the same.

153
00:09:37.000 --> 00:09:39.090
One's an operator, one's a function call.

154
00:09:39.090 --> 00:09:42.390
So both of these could
rightly be under this heading

155
00:09:42.390 --> 00:09:47.110
of explicit coercions cuz they both
explicitly do one and only one thing.

156
00:09:47.110 --> 00:09:52.079
There is no other purpose to that unary
plus operator than to coerce to a number.

157
00:09:53.320 --> 00:09:56.230
And many people in the opensource
community, if they're doing

158
00:09:56.230 --> 00:09:58.340
anything in their code base where
they need to coerce to a number,

159
00:09:58.340 --> 00:10:00.010
they'll use the plus operator.

160
00:10:00.010 --> 00:10:04.120
That can get a bit confusing
when it's like x plus plus y,

161
00:10:04.120 --> 00:10:08.110
where the second plus is separated with
a space, so now it's not the plus plus

162
00:10:08.110 --> 00:10:12.280
operator but it's the you can get
really confusing with it, okay?

163
00:10:13.700 --> 00:10:17.095
But until I just taught you that,
there is at least some of you

164
00:10:17.095 --> 00:10:19.530
who have probably never seen that or
didn't know what it was doing.

165
00:10:20.740 --> 00:10:23.640
So is that an explicit coercion for you?

166
00:10:24.880 --> 00:10:29.395
Well, until you have learned it,
it may not be as self intuitive as, for

167
00:10:29.395 --> 00:10:31.478
example, the number function.

168
00:10:31.478 --> 00:10:35.069
I think most people seeing line 5
not even knowing what is going on,

169
00:10:35.069 --> 00:10:39.686
would at least have some intuition, you're
trying to make a number out of something.

170
00:10:39.686 --> 00:10:44.130
But looking at line 8, maybe not so
much intuition around it.

171
00:10:44.130 --> 00:10:47.510
Now that I've taught you, everybody is
now a certified JavaScript engineer,

172
00:10:47.510 --> 00:10:49.700
you know what that thing does.

173
00:10:49.700 --> 00:10:52.780
But is it genuinely truly explicit?

174
00:10:52.780 --> 00:10:57.210
And the point I'm trying to make here is
that there is subjectivity even within

175
00:10:57.210 --> 00:10:58.470
the realm of explicitness.

176
00:10:59.850 --> 00:11:05.670
For the members of your team, you have to
decide what is explicit and what is not.

177
00:11:05.670 --> 00:11:09.380
Just like you have discussions or should
have discussions about your style guide,

178
00:11:09.380 --> 00:11:14.430
you should have discussions about when we
want to coerce from value to a number,

179
00:11:14.430 --> 00:11:15.462
how do wanna do it?

180
00:11:16.830 --> 00:11:18.120
We wanna have a consistency.

181
00:11:19.140 --> 00:11:20.850
Why is the style guide even important?

182
00:11:20.850 --> 00:11:24.710
I mean, is it just so that we don't have
to argue about spaces versus tabs or

183
00:11:24.710 --> 00:11:26.870
trailing commas, or
any of that other stuff?

184
00:11:26.870 --> 00:11:28.290
Why are style guides important?

185
00:11:29.950 --> 00:11:32.620
It's the same reason why this
decision would be important.

186
00:11:32.620 --> 00:11:36.120
As a matter of fact, I'd argue this is
a really important part of a style guide.

187
00:11:36.120 --> 00:11:38.850
Style guides are not just
about literal code style,

188
00:11:38.850 --> 00:11:40.660
they're about idiomatic style as well.

189
00:11:41.860 --> 00:11:43.350
Given a certain type of problem,

190
00:11:43.350 --> 00:11:46.780
how do we always choose to
default to solving that problem?

191
00:11:46.780 --> 00:11:51.610
In this case, given the problem of wanting
to convert from one type to another,

192
00:11:51.610 --> 00:11:53.430
how do we do that?

193
00:11:53.430 --> 00:11:55.640
Why is consistency so important?

194
00:11:55.640 --> 00:12:00.340
Because when you are consistent,
it makes bugs more obvious.

195
00:12:00.340 --> 00:12:04.700
When you're inconsistent, bugs have
a much easier way of slipping through.

196
00:12:06.900 --> 00:12:09.320
So I would recommend,
strongly, that you and

197
00:12:09.320 --> 00:12:12.940
your team members have a discussion about,
hey, here's this thing that we know we're

198
00:12:12.940 --> 00:12:17.340
gonna have to do, let's stop pretending
that coercion doesn't need to happen.

199
00:12:17.340 --> 00:12:20.230
Let's stop pretending that
coercion is all bad all the time,

200
00:12:20.230 --> 00:12:25.290
and let's talk specifically about how we
didn't wanna do it when we need to do it.

201
00:12:25.290 --> 00:12:26.280
Let's be intentional about it.

202
00:12:27.690 --> 00:12:30.650
Choose the number function,
choose the plus operator.

203
00:12:30.650 --> 00:12:33.480
You might even choose to mix the two,
although I would argue if you

204
00:12:33.480 --> 00:12:37.590
have some inconsistency there or if it's
not a clear rule as to when to use one or

205
00:12:37.590 --> 00:12:40.580
the other,
you've shot yourself in the foot, okay?

206
00:12:41.750 --> 00:12:45.590
But both of them would fall under this
heading of the whole purpose of that

207
00:12:45.590 --> 00:12:49.810
statement is to do the conversion,
to do the coercion, so they're explicit.

208
00:12:50.850 --> 00:12:52.500
There's no side effects happening.

209
00:12:52.500 --> 00:12:55.080
Let's go the other direction
from number to string.

210
00:12:55.080 --> 00:12:59.756
On line 11 we start with the number 456,
line 12 we call the toString method.

211
00:12:59.756 --> 00:13:04.110
You've seen toString before,
we talked about it a little while ago.

212
00:13:06.770 --> 00:13:10.210
I think toString is pretty explicit.

213
00:13:10.210 --> 00:13:14.630
It says what it's gonna do and
it does it faithfully, it creates a string

214
00:13:14.630 --> 00:13:19.840
representation of the thing
that was called against, okay?

215
00:13:19.840 --> 00:13:23.420
Now, many people like to use that method
because that method feels kind of

216
00:13:23.420 --> 00:13:25.260
Java ask to them.

217
00:13:25.260 --> 00:13:28.590
I have some thing and I want to create
the string or representation to it.

218
00:13:28.590 --> 00:13:30.630
But that comes from the mindset,

219
00:13:30.630 --> 00:13:36.320
the incorrect mindset that everything
is an object in JavaScript.

220
00:13:36.320 --> 00:13:37.510
Cuz look at what you're doing,

221
00:13:37.510 --> 00:13:41.440
you're calling a method against what
is otherwise a primitive value.

222
00:13:43.270 --> 00:13:47.130
I would refer to this as sort
of implicitly explicit, or

223
00:13:47.130 --> 00:13:50.490
maybe explicitly implicit depending
on how you wanna think about it.

224
00:13:50.490 --> 00:13:54.710
Because we are in fact
explicitly calling a method that

225
00:13:54.710 --> 00:13:59.500
seems to be named very properly to
tell us what we want it to do, but

226
00:13:59.500 --> 00:14:02.009
under the covers, there's something
very much implicit happening.

227
00:14:03.280 --> 00:14:06.220
You cannot call a method
against a primitive value.

228
00:14:07.430 --> 00:14:10.460
That doesn't even make any sense
if you really think about it.

229
00:14:10.460 --> 00:14:13.880
Primitive values don't have methods,
objects have methods.

230
00:14:13.880 --> 00:14:15.530
So wait a minute, how did I start
out with the number 456 and

231
00:14:15.530 --> 00:14:17.710
somehow was able to call
a method against it?

232
00:14:17.710 --> 00:14:21.300
There's a specific name for
this, it's called boxing.

233
00:14:22.370 --> 00:14:27.180
JavaScript will automatically coerce,
that's my terminology,

234
00:14:27.180 --> 00:14:32.200
automatically coerce a primitive
to its object wrapper counterpart,

235
00:14:32.200 --> 00:14:36.480
in this case the number object
representation of that number primitive,

236
00:14:36.480 --> 00:14:38.810
so that you can call a method against it.

237
00:14:38.810 --> 00:14:40.070
It automatically does that for you.

238
00:14:41.130 --> 00:14:44.970
So when I call toString against
a primitive number, number object results,

239
00:14:44.970 --> 00:14:47.050
then I can call toString
against the number object.

240
00:14:48.720 --> 00:14:53.170
Now, you can argue ether way whether or
not that is a useful feature.

241
00:14:53.170 --> 00:14:55.300
I will take the stance, and
I will defend this a little bit later,

242
00:14:55.300 --> 00:14:58.370
that I think that's a useful
feature in JavaScript.

243
00:14:58.370 --> 00:15:01.500
The fact that I can call length against
the string primitive, for example.

244
00:15:01.500 --> 00:15:05.970
Instead of having to cast it to a string
object and then call dot account or

245
00:15:05.970 --> 00:15:07.290
something weird like that.

246
00:15:07.290 --> 00:15:09.010
And just call .length
on a string primitive.

247
00:15:09.010 --> 00:15:11.930
That's, in my opinion, useful mechanism.

248
00:15:12.960 --> 00:15:15.560
But that's an implicit mechanism.

249
00:15:15.560 --> 00:15:16.620
That's not explicit.

250
00:15:16.620 --> 00:15:21.510
There's an implicit coercion from
the primitive to the native, happening.

251
00:15:23.220 --> 00:15:27.170
From the primitive literal value,
to its wrapped object counterpart.

252
00:15:28.570 --> 00:15:30.600
So this is implicitly explicit.

253
00:15:30.600 --> 00:15:34.178
By contrast, line 15,
pretty straightforward.

254
00:15:34.178 --> 00:15:36.981
The string function does exactly
what it says on the label.

255
00:15:36.981 --> 00:15:40.697
You give it anything it will
call the toStrings abstract

256
00:15:40.697 --> 00:15:44.507
operation under the covers and
produce the string of it.

257
00:15:44.507 --> 00:15:47.957
Give it an array, it's going to
call the two primitive on that and

258
00:15:47.957 --> 00:15:50.671
then the two string on
the resulting value, okay?

259
00:15:54.830 --> 00:15:59.590
So again I would tend to
prefer lines 5 and lines 15,

260
00:15:59.590 --> 00:16:04.310
because I think they say very clearly and
explicitly what the intent is.

261
00:16:05.990 --> 00:16:10.550
Seems to be that a lot of people in the
open source community and in the broader

262
00:16:10.550 --> 00:16:13.539
JavaScript development community
kind of prefer lines 8 and lines 12.

263
00:16:14.930 --> 00:16:17.404
They're not my favorite, but

264
00:16:17.404 --> 00:16:23.122
I would endorse any one of these as
valid ways to get this result, okay?

265
00:16:23.122 --> 00:16:26.834
Questions so far about explicitly
going between string and number?

266
00:16:26.834 --> 00:16:33.490
Does that make sense?
&gt;&gt; Kyle Simpson: What

267
00:16:33.490 --> 00:16:37.204
about going from any value type
to the Boolean value type?

268
00:16:37.204 --> 00:16:38.914
This is a very common thing.

269
00:16:38.914 --> 00:16:43.266
Whenever we want to ask something, like
for example, do a Boolean test like an if

270
00:16:43.266 --> 00:16:48.002
statement or something, and we're testing
something that's not already a Boolean,

271
00:16:48.002 --> 00:16:52.460
we need a Boolean so we need to explicitly
create a Boolean for that purpose.

272
00:16:52.460 --> 00:16:56.790
Another example, say you're
producing an API data structure.

273
00:16:56.790 --> 00:16:59.150
You're gonna send it off
to some API call and

274
00:16:59.150 --> 00:17:04.130
that API expect to have true or
false in some property.

275
00:17:04.130 --> 00:17:08.318
But the thing you have is like a string or
whatever If you just pass along the string

276
00:17:08.318 --> 00:17:10.905
you're probably gonna get
an error from the API,

277
00:17:10.905 --> 00:17:14.987
especially if you're calling an API on
a language that's more static typed.

278
00:17:14.987 --> 00:17:16.283
They say no, no, we need a Boolean.

279
00:17:16.283 --> 00:17:17.928
You have to send a Boolean.

280
00:17:17.928 --> 00:17:19.571
So what are you gonna do?

281
00:17:19.571 --> 00:17:22.376
You're gonna need to
explicitly create a Boolean.

282
00:17:22.376 --> 00:17:25.636
Follow me?
&gt;&gt; Kyle Simpson: So

283
00:17:25.636 --> 00:17:28.067
start out with a string 123.

284
00:17:28.067 --> 00:17:31.881
You wanna produce the Boolean equivalent
of that value, you call the Boolean

285
00:17:31.881 --> 00:17:37.025
function, capital Boolean.
&gt;&gt; Kyle Simpson: Same as with string and

286
00:17:37.025 --> 00:17:40.830
number, it's very explicit, it says
exactly on the cover what it's gonna do.

287
00:17:42.280 --> 00:17:46.150
I've never once, in a real code base,
seen somebody do that.

288
00:17:46.150 --> 00:17:48.880
But they ought to,
cuz it's very clear and explicit.

289
00:17:48.880 --> 00:17:50.740
And if our goal is to
communicate clearly and

290
00:17:50.740 --> 00:17:53.870
explicitly, why don't we spend
a few extra characters doing that?

291
00:17:56.330 --> 00:17:58.690
Maybe it's because a lot
of us have optimized for

292
00:17:58.690 --> 00:18:00.020
something different than readability.

293
00:18:00.020 --> 00:18:03.550
Maybe we've optimized for
how quickly we can just bang out code.

294
00:18:03.550 --> 00:18:04.620
Instead of optimizing for

295
00:18:04.620 --> 00:18:07.050
the reading, which is where we
spend most of our time anyway.

296
00:18:07.050 --> 00:18:10.760
So I think you ought to spend
those extra characters.

297
00:18:10.760 --> 00:18:13.910
But you know how most people do it,
line 15, that double negate.

298
00:18:13.910 --> 00:18:19.030
As a matter of fact, that's become so
idiomatic that people actually

299
00:18:19.030 --> 00:18:24.070
believe that !!,
on line 5 is its own operator.

300
00:18:24.070 --> 00:18:25.350
It's not, but

301
00:18:25.350 --> 00:18:28.850
a lot of people think of it as a single
operator cuz it happens so often.

302
00:18:30.040 --> 00:18:32.950
I don't think I've ever seen
anybody do the Boolean function

303
00:18:32.950 --> 00:18:36.000
in actual production code,
but I've seen thousands and

304
00:18:36.000 --> 00:18:38.000
thousands of occurrences
of that double negate.

305
00:18:39.720 --> 00:18:41.060
What's happening with double negate?

306
00:18:41.060 --> 00:18:45.850
Well, it's actually two separate
operations because there is really just

307
00:18:45.850 --> 00:18:51.940
a single exclamation,
a single negate operator.

308
00:18:51.940 --> 00:18:54.660
But here is what the negate operator does.

309
00:18:54.660 --> 00:18:57.810
It specifically takes
whatever you pass it and

310
00:18:57.810 --> 00:19:00.530
if it's not already a boolean,
guess what it does.

311
00:19:01.890 --> 00:19:03.510
It coerces it to a Boolean

312
00:19:04.630 --> 00:19:08.300
calling the two Boolean abstract
operation exactly as you would expect.

313
00:19:09.450 --> 00:19:12.240
And then it does this other thing
which is frankly a little bit

314
00:19:12.240 --> 00:19:15.060
annoying in our particular
situation because

315
00:19:15.060 --> 00:19:18.240
it's converted to a Boolean
then it flips the parity.

316
00:19:19.460 --> 00:19:23.849
So once it produces the Boolean then it
says if you produce two I'm wanna flip it

317
00:19:23.849 --> 00:19:28.519
to false to produce false and it's true
because it is the negate operator, right?

318
00:19:28.519 --> 00:19:32.154
So it needs to negate,
it needs to not just coerce.

319
00:19:32.154 --> 00:19:36.462
So this is an operator that
both coerces and negates.

320
00:19:36.462 --> 00:19:37.720
The coerced part we like.

321
00:19:37.720 --> 00:19:40.740
The negate part we,
in this case, don't like.

322
00:19:40.740 --> 00:19:41.813
So what do we do?

323
00:19:41.813 --> 00:19:44.056
Flip it back with another negate.

324
00:19:44.056 --> 00:19:46.625
That's what the second exclamation is.

325
00:19:46.625 --> 00:19:52.245
We undo that undesired effect
of flipping the parody.

326
00:19:52.245 --> 00:19:53.609
That's what's happening.

327
00:19:53.609 --> 00:19:59.250
Now that is explicit in the same way
that the unary plus is explicit.

328
00:19:59.250 --> 00:20:02.190
If you know what negate does,
you know that it coerces,

329
00:20:02.190 --> 00:20:06.550
it does have this other behavior too, but
it's not like this is some side effect.

330
00:20:06.550 --> 00:20:08.530
It's specifically designed to coerce.

331
00:20:10.510 --> 00:20:13.260
So you could call this
an explicit coercion.

332
00:20:13.260 --> 00:20:16.680
As I said virtually all occurences that
I've seen use the double the gain.

333
00:20:18.280 --> 00:20:21.850
Before I taught you what it was doing,
I bet many of you would have failed

334
00:20:21.850 --> 00:20:25.350
the interview question, explain to
me exactly how double negate works.

335
00:20:25.350 --> 00:20:28.140
It's not a criticism against you, it's
just most people never think about it.

336
00:20:28.140 --> 00:20:30.140
Well that makes a bullion,
I don't care how it works.

337
00:20:31.280 --> 00:20:35.816
I do care how it works, and I'm hoping to
inspire in you that you should care how it

338
00:20:35.816 --> 00:20:42.543
works cause it matters.
&gt;&gt; Kyle Simpson: Let me stop for

339
00:20:42.543 --> 00:20:43.235
just a moment.

340
00:20:43.235 --> 00:20:46.885
I have lots of little sayings
that I pepper throughout, and

341
00:20:46.885 --> 00:20:50.544
I kind of will style these as,
kettify as laws or whatever.

342
00:20:50.544 --> 00:20:54.284
It's just made up truisms of myself.

343
00:20:54.284 --> 00:20:57.861
And they're not even entirely
original thoughts of my own.

344
00:20:57.861 --> 00:21:02.626
But I would say this,
code that you do not understand is

345
00:21:02.626 --> 00:21:07.709
code that you cannot trust.
&gt;&gt; Kyle Simpson: Code

346
00:21:07.709 --> 00:21:10.564
that you don't understand is
code that you cannot trust.

347
00:21:10.564 --> 00:21:13.737
How much of your code do
you actually understand?

348
00:21:13.737 --> 00:21:17.548
How much of it do you just use because
that's just the way it's always been done?

349
00:21:17.548 --> 00:21:22.805
I just saw it on a blog post and I just
started doing it and it just works, right?

350
00:21:22.805 --> 00:21:25.020
I'm just raising the bar and saying.

351
00:21:25.020 --> 00:21:30.330
If you wanna be good at your skill and
your craft, it's not magical.

352
00:21:30.330 --> 00:21:35.700
I'm not somehow magically born
as a JavaScript developer and

353
00:21:35.700 --> 00:21:38.900
got it from on high or know what I did?

354
00:21:38.900 --> 00:21:41.671
I read the spec, and
I asked a lot of questions,

355
00:21:41.671 --> 00:21:45.342
and I wrote about it, and
I taught about it, and I tried it, and

356
00:21:45.342 --> 00:21:48.044
I stumbled my way to
understanding it better,

357
00:21:48.044 --> 00:21:52.375
because I refuse to just write code and
not know what it was doing, or how.

358
00:21:52.375 --> 00:21:53.885
That's the only difference.

359
00:21:53.885 --> 00:21:55.789
And you can do that, too.

360
00:21:55.789 --> 00:21:57.155
Question?
&gt;&gt; Speaker 2: Just asking

361
00:21:57.155 --> 00:21:59.865
if you could go over that double negate?
&gt;&gt; Kyle Simpson: Yep.

362
00:21:59.865 --> 00:22:00.622
&gt;&gt; Speaker 2: One more time.

363
00:22:00.622 --> 00:22:01.342
&gt;&gt; Kyle Simpson: The first one,

364
00:22:01.342 --> 00:22:04.510
the right most one on line 5,
the one that's right next to the foo.

365
00:22:04.510 --> 00:22:06.230
That's the first one that's gonna run.

366
00:22:06.230 --> 00:22:08.950
What it's going to do is two things.

367
00:22:08.950 --> 00:22:13.475
First off if you pass it something that's
not already a Boolean it's going to call

368
00:22:13.475 --> 00:22:17.936
the underlying two Boolean coercion which
is essentially that look up table that

369
00:22:17.936 --> 00:22:18.937
we talked about.

370
00:22:18.937 --> 00:22:20.860
And it's gonna produce a real boolean.

371
00:22:20.860 --> 00:22:22.979
So here we gave it the string 123.

372
00:22:22.979 --> 00:22:25.607
Is the string 123 in the falsy table or

373
00:22:25.607 --> 00:22:31.718
the truthy table?
&gt;&gt; Kyle Simpson: Why is it on the truthy?

374
00:22:31.718 --> 00:22:32.597
&gt;&gt; Speaker 2: Cuz it's not false.

375
00:22:32.597 --> 00:22:33.728
&gt;&gt; Kyle Simpson: Cuz it's not one of

376
00:22:33.728 --> 00:22:36.775
the falsy ones that is explicitly listed,
right?

377
00:22:36.775 --> 00:22:41.620
So if it's not falsy, it must be truthy,
so it's going to produce true.

378
00:22:41.620 --> 00:22:42.730
Now it says, great, thanks.

379
00:22:42.730 --> 00:22:46.910
Now I have a Boolean, my job is to negate,
my job is to flip the parity.

380
00:22:46.910 --> 00:22:49.240
So since you gave me a true,
I'm gonna flip it to false.

381
00:22:49.240 --> 00:22:52.440
If you had given me a false,
I would have flipped it to true.

382
00:22:52.440 --> 00:22:55.140
So we have negated,
that's the first exclamation.

383
00:22:55.140 --> 00:22:58.690
The second exclamation is,
not gonna need to do any coercion,

384
00:22:58.690 --> 00:23:00.670
cuz coercion already happened.

385
00:23:00.670 --> 00:23:02.010
It's just gonna say, let's flip it back.

386
00:23:03.930 --> 00:23:06.670
Now, theoretically,
I do not know this to be true, and

387
00:23:06.670 --> 00:23:10.230
I don't know that it will ever be true,
but theoretically, the JavaScript engine

388
00:23:10.230 --> 00:23:15.780
could statically analyze and
recognize that idiom, and optimize for it.

389
00:23:15.780 --> 00:23:17.690
Theoretically, they could
not do the flipping.

390
00:23:17.690 --> 00:23:19.310
They're like well you're
just gonna flip it back,

391
00:23:19.310 --> 00:23:20.720
I'm just gonna skip the flipping part.

392
00:23:22.250 --> 00:23:23.220
Maybe they do, maybe they don't.

393
00:23:23.220 --> 00:23:24.880
I don't know, I'm not an engine developer.

394
00:23:26.120 --> 00:23:28.590
But there is an advantage to using syntax,

395
00:23:28.590 --> 00:23:32.860
cuz syntax is declared if an engine's
can more statically analyze syntax

396
00:23:39.414 --> 00:23:41.116
&gt;&gt; Kyle Simpson: So, line 2, line 5,

397
00:23:41.116 --> 00:23:46.840
both of them explicitly coerce,
in this case from a string to a boolean.

398
00:23:46.840 --> 00:23:49.860
Now line 9 is a little interesting.

399
00:23:49.860 --> 00:23:52.400
Again, I like to label this
as explicitly implicit.

400
00:23:53.890 --> 00:23:59.130
There's a special recognition point
that comes with code like that.

401
00:23:59.130 --> 00:24:02.210
Cuz if I see code where
we use a ternary and

402
00:24:02.210 --> 00:24:08.380
the two results encloses are true and
false respectively, I can tell you from

403
00:24:08.380 --> 00:24:13.190
ten miles away that either that code that
was transpiled from Java to JavaScript,

404
00:24:13.190 --> 00:24:17.620
or that's a Java developer who's writing
JavaScript because that's a Java-ism.

405
00:24:17.620 --> 00:24:20.360
That's what you do in Java to try
to come up with a true false.

406
00:24:20.360 --> 00:24:24.320
That's how you explicitly coerce,
if you will, to the boolean.

407
00:24:24.320 --> 00:24:26.950
You just do this ternary thing and
you end up with true or false.

408
00:24:26.950 --> 00:24:30.990
There's no question that the end result
of that is either true or false, and

409
00:24:30.990 --> 00:24:36.560
we'd all probably agree that's
an explicit mechanism then, right?

410
00:24:36.560 --> 00:24:39.030
But I call it explicitly implicit,

411
00:24:39.030 --> 00:24:42.110
because hidden underneath the cover
is actually not so hidden at all.

412
00:24:42.110 --> 00:24:47.295
Right there at the very beginning of
that statement, we have to do a boolean

413
00:24:47.295 --> 00:24:52.669
coercion on foo to do the test, to decide
whether true or false is the result.

414
00:24:52.669 --> 00:24:54.506
You see what I'm saying?

415
00:24:54.506 --> 00:24:58.627
So we have to first do an implicit
coercion to bullion to do the test.

416
00:24:58.627 --> 00:25:01.381
And then we result in the explicit true or

417
00:25:01.381 --> 00:25:05.388
false.
&gt;&gt; Kyle Simpson: Now that's just needless

418
00:25:05.388 --> 00:25:10.480
going, end a rounding ourselves,
that's chasing our own tail if you will.

419
00:25:10.480 --> 00:25:12.292
Don't do it that way.

420
00:25:12.292 --> 00:25:13.672
Use line 2 or line 5,

421
00:25:13.672 --> 00:25:18.075
there are much better options to
explicitly create a boolean, right?

422
00:25:18.075 --> 00:25:21.490
This is non-idiomatic JavaScript.

423
00:25:21.490 --> 00:25:24.560
That's how you show off that
you're a Java developer, okay?

424
00:25:24.560 --> 00:25:27.620
And I don't mean to criticize Java,
cuz it works well in Java.

425
00:25:27.620 --> 00:25:30.280
It just doesn't make any
sense in JavaScript, okay?

