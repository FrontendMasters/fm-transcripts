WEBVTT

1
00:00:00.150 --> 00:00:01.470
&gt;&gt; Lukas Ruebbelke: We're
gonna get started, and

2
00:00:01.470 --> 00:00:06.090
we're going to walk through
a variation of a solution.

3
00:00:06.090 --> 00:00:09.080
So this is a bit more
exploratory in nature, but

4
00:00:09.080 --> 00:00:11.450
we'll just kind of point
some of these things out.

5
00:00:13.580 --> 00:00:17.570
So first and foremost,
we'll start with the app module.

6
00:00:20.860 --> 00:00:24.050
So you can see here this
kind of just contains

7
00:00:24.050 --> 00:00:26.830
almost a manifest of
everything in the application.

8
00:00:26.830 --> 00:00:31.970
So, our different components
that we're importing in.

9
00:00:33.070 --> 00:00:35.800
Then we're adding them
in our declarations.

10
00:00:35.800 --> 00:00:39.520
Then we have our imports, so importing
the BrowserModule which kind of has

11
00:00:39.520 --> 00:00:46.320
Angular Core, forms, HTTP, and so
forms are obviously for our forms.

12
00:00:46.320 --> 00:00:50.460
HTTP is so
that we can make service side calls.

13
00:00:50.460 --> 00:00:55.130
And then what's more interesting
is the routing module.

14
00:00:56.280 --> 00:01:01.960
So then what we have here is
we just move to the side here.

15
00:01:01.960 --> 00:01:05.960
We're defining our routes, and
I thought this was interesting.

16
00:01:05.960 --> 00:01:07.920
It's like, well, this is of type routes.

17
00:01:09.110 --> 00:01:14.440
And really what this is,
is it's really an array of a route object.

18
00:01:14.440 --> 00:01:16.670
So it's really a route collection.

19
00:01:16.670 --> 00:01:19.520
So you can just check it out here and
see that, path,

20
00:01:19.520 --> 00:01:22.840
component there's all these
kind of different properties.

21
00:01:22.840 --> 00:01:26.470
So one of the benefits of type script

22
00:01:26.470 --> 00:01:31.450
is that if you have a question about
what something is, how it works.

23
00:01:31.450 --> 00:01:36.010
Most browsers I'm a fan of web storm but
will allow you to actually click and

24
00:01:36.010 --> 00:01:40.300
jump into the source code and
learn more about it.

25
00:01:40.300 --> 00:01:42.390
So for instance if you learn about routes.

26
00:01:42.390 --> 00:01:46.050
There like paths, components,
like those are interesting, like redirect.

27
00:01:46.050 --> 00:01:50.780
As you can start to see all of
the different things that this

28
00:01:50.780 --> 00:01:55.416
does within the typing's file so I have
a protip that doesn't cost you anything.

29
00:01:55.416 --> 00:02:02.420
But when you see this but this is
actually a collection of route objects.

30
00:02:02.420 --> 00:02:06.910
And so in our case, we have path redirect,
so we're saying if you just go to nothing,

31
00:02:06.910 --> 00:02:11.530
let's go ahead and redirect to items,
which then gets picked up here.

32
00:02:11.530 --> 00:02:13.710
And it pulls in the item component.

33
00:02:14.780 --> 00:02:19.560
But because we have a child component,
then it'll put into here.

34
00:02:19.560 --> 00:02:21.930
So we'll get into this more
when we get into routing.

35
00:02:21.930 --> 00:02:26.560
But I think as a whole,
this reads pretty well and

36
00:02:26.560 --> 00:02:28.240
if there's also we have a wild card here,
so

37
00:02:28.240 --> 00:02:32.270
if something doesn't match up,
then it just goes to the ItemsComponent.

38
00:02:33.380 --> 00:02:37.400
But this is really just
an array of objects

39
00:02:37.400 --> 00:02:39.190
that happens to line up with an interface.

40
00:02:40.920 --> 00:02:44.120
And then we're calling for root,
so that we get this fully formed

41
00:02:44.120 --> 00:02:46.580
essentially router provider that
we can use in our application.

42
00:02:48.770 --> 00:02:52.485
And then let's just check
out the app component.

43
00:02:59.006 --> 00:03:05.450
&gt;&gt; Lukas Ruebbelke: And here we have
a title that we're gonna bind to.

44
00:03:05.450 --> 00:03:08.448
So if I click here,
we can go into our template and

45
00:03:08.448 --> 00:03:12.448
see here I'm binding to the title,
&gt;&gt; Lukas Ruebbelke: And

46
00:03:12.448 --> 00:03:14.522
you can see here router-outlet,

47
00:03:14.522 --> 00:03:18.540
so this is where our components
are being loaded, via the router.

48
00:03:18.540 --> 00:03:24.730
Then we have really a links, it's just an
object that has essentially a link table.

49
00:03:24.730 --> 00:03:26.460
So we'll get into this
a little bit more as well.

50
00:03:28.270 --> 00:03:34.460
But then,
let's step into our items component,

51
00:03:34.460 --> 00:03:39.740
and so now when we go to items in the URL,
or we navigate to that route,

52
00:03:41.560 --> 00:03:46.740
then we're loading essentially
the items component,

53
00:03:46.740 --> 00:03:49.940
and so what this does is,
it's actually doing quite a bit.

54
00:03:51.400 --> 00:03:56.370
And so this kind of the parent
component for managing items.

55
00:03:56.370 --> 00:03:59.840
So listing the items, updating the item,
deleting the item, etc.

56
00:04:01.580 --> 00:04:05.510
But let's look into the template here.

57
00:04:07.650 --> 00:04:09.215
You'll notice here that one,

58
00:04:09.215 --> 00:04:15.562
we have a router outlet,
&gt;&gt; Lukas Ruebbelke: So

59
00:04:15.562 --> 00:04:19.510
this is where, essentially if we have
a child route, that this goes in here.

60
00:04:19.510 --> 00:04:21.260
So when we select an item.

61
00:04:21.260 --> 00:04:25.020
This child route is being
loaded into this router outlet.

62
00:04:25.020 --> 00:04:29.610
But more importantly
that you would think for

63
00:04:29.610 --> 00:04:32.290
all of the mark up that
there would be more.

64
00:04:32.290 --> 00:04:36.160
But we've actually encapsulated this and
marked it into sub components.

65
00:04:36.160 --> 00:04:39.975
So app items list, we are passing
the items and app item detail or

66
00:04:39.975 --> 00:04:41.820
we're passing a single item.

67
00:04:42.880 --> 00:04:46.041
So again, more on to this, but
you can see we have a component, so

68
00:04:46.041 --> 00:04:48.240
really a top level component.

69
00:04:48.240 --> 00:04:50.930
Really, like a sub components such as,
items.

70
00:04:50.930 --> 00:04:54.750
With then, that holds even more
specific sub components such as,

71
00:04:54.750 --> 00:04:58.720
like an item's list, and
then an item detail.

72
00:04:58.720 --> 00:05:02.510
And so, what I really want us to match
in our mind, is we go through this,

73
00:05:02.510 --> 00:05:06.390
is that we have tree of items,
or this tree of components.

74
00:05:06.390 --> 00:05:10.900
We have this component tree where we start
our very general, so our application

75
00:05:10.900 --> 00:05:16.030
component, that then composes
these kind of very specific

76
00:05:17.030 --> 00:05:21.410
branches of functionality
that we define as features.

77
00:05:21.410 --> 00:05:24.770
And so the idea today is learn
how to build a single feature and

78
00:05:24.770 --> 00:05:27.240
then tomorrow learn how
to put these together.

79
00:05:29.360 --> 00:05:32.360
And so we have that.

80
00:05:32.360 --> 00:05:40.646
Now let's go into real quick if
you look here in our item service.

81
00:05:44.203 --> 00:05:48.551
&gt;&gt; Lukas Ruebbelke: In this case
we're calling load items that is then

82
00:05:48.551 --> 00:05:53.312
essentially loaded in the items and
returning it, and

83
00:05:53.312 --> 00:05:58.384
then within our item's component,
then we are basically

84
00:05:58.384 --> 00:06:03.210
taking that result and
then performing operations.

85
00:06:03.210 --> 00:06:06.550
But, let's do this real quick,

86
00:06:06.550 --> 00:06:12.360
if we go here to item's service.

87
00:06:12.360 --> 00:06:14.667
If we just had a property items message.

88
00:06:21.121 --> 00:06:23.659
&gt;&gt; Lukas Ruebbelke: Holla at yer items.

89
00:06:27.606 --> 00:06:31.630
&gt;&gt; Lukas Ruebbelke: Okay, so now that we
have a property we can then consume it.

90
00:06:31.630 --> 00:06:37.325
So if we go into our items component,

91
00:06:37.325 --> 00:06:43.023
then we can go this.itemsMessage =

92
00:06:43.023 --> 00:06:49.300
this.itemsService.itemsMessage.

93
00:06:49.300 --> 00:06:54.880
And so if anybody has been doing ES5 for
any amount of time like it's really easy.

94
00:06:55.920 --> 00:06:59.760
At least for me I've kind of become
desensitized but the fact that

95
00:07:01.200 --> 00:07:06.335
you can do something like rather let's go

96
00:07:06.335 --> 00:07:12.210
items message equals
like that in JavaScript.

97
00:07:12.210 --> 00:07:14.750
So people in java and .Net are like duh.

98
00:07:15.790 --> 00:07:22.942
Like of course,
like that totally makes sense but

99
00:07:22.942 --> 00:07:27.710
at least for me not having that for

100
00:07:27.710 --> 00:07:33.854
like ever is kind of new and
exciting to me.

101
00:07:33.854 --> 00:07:40.279
So items message and now let's go to our
items component and let's drop a bomb.

102
00:07:58.572 --> 00:07:59.879
&gt;&gt; Lukas Ruebbelke: Any questions?

103
00:07:59.879 --> 00:08:05.236
So really we're pulling
data from this service into

104
00:08:05.236 --> 00:08:10.845
a component that you're
binding to in your template.

105
00:08:10.845 --> 00:08:13.022
I'm seeing some hands.

106
00:08:13.022 --> 00:08:14.017
Yes?

107
00:08:14.017 --> 00:08:17.922
&gt;&gt; Speaker 2: Can you
use destructuring there?

108
00:08:17.922 --> 00:08:20.813
&gt;&gt; Lukas Ruebbelke: Can I
use destructuring there?

109
00:08:23.202 --> 00:08:28.567
&gt;&gt; Lukas Ruebbelke: In terms of
&gt;&gt; Lukas Ruebbelke: I'm

110
00:08:28.567 --> 00:08:33.730
trying to think of, so you can use
destructuring and I do use destructuring.

111
00:08:33.730 --> 00:08:36.360
I'm trying to think of
how we would do it here.

112
00:08:36.360 --> 00:08:38.560
Because this is a simple value.

113
00:08:38.560 --> 00:08:43.490
So the answer is yes you
can use destructuring, and

114
00:08:43.490 --> 00:08:47.070
I'm having a hard time thinking,
well, actually, so

115
00:08:47.070 --> 00:08:51.390
if this was like an object in here, and I
wanted to pull a property off, absolutely.

116
00:08:51.390 --> 00:08:55.230
I recommend using
destructuring when you can.

117
00:08:58.170 --> 00:09:01.835
So one of the largest challenges
that we have right now,

118
00:09:01.835 --> 00:09:07.420
with I think any modern JavaScript
project is all of the moving pieces,

119
00:09:07.420 --> 00:09:11.349
so how many here have heard
of JavaScript fatigue?

120
00:09:11.349 --> 00:09:14.670
I think everyone, my God.

121
00:09:14.670 --> 00:09:16.202
&gt;&gt; Speaker 2: Learning JavaScript in 2016.

122
00:09:16.202 --> 00:09:16.922
&gt;&gt; Speaker 3: [CROSSTALK] Yeah.

123
00:09:16.922 --> 00:09:19.825
&gt;&gt; Speaker 2: I think this is
important before we jump of.

124
00:09:19.825 --> 00:09:20.350
&gt;&gt; Lukas Ruebbelke: Uh-huh.

125
00:09:20.350 --> 00:09:22.320
&gt;&gt; Speaker 2: Chris is asking
what is destructuring?

126
00:09:23.510 --> 00:09:28.776
&gt;&gt; Lukas Ruebbelke: So
destructuring is, it basically gives

127
00:09:28.776 --> 00:09:35.050
you ability to pull
properties off of an object.

128
00:09:35.050 --> 00:09:36.865
So let me just show.

129
00:09:53.633 --> 00:10:00.139
&gt;&gt; Lukas Ruebbelke: So what this allows,
let me just zoom this out.

130
00:10:00.139 --> 00:10:03.803
What it allows you to do, if you
are getting an object in, it allows you to

131
00:10:03.803 --> 00:10:08.311
automatically destructure that object, and
pull just the properties off you want, and

132
00:10:08.311 --> 00:10:10.800
automatically assign
that to a local variable.

133
00:10:12.150 --> 00:10:15.770
And so, this becomes actually pretty
handy when you're dealing with like for

134
00:10:15.770 --> 00:10:17.370
instance, parameters.

135
00:10:17.370 --> 00:10:19.650
Within a function call or
something like that.

136
00:10:20.810 --> 00:10:24.530
Or you're getting a large object and
you just really quickly want to pull off

137
00:10:24.530 --> 00:10:27.970
specific properties off of it,
this is what this allows you to do.

138
00:10:27.970 --> 00:10:32.900
So, you can see here that we
have an array of 1 and 2.

139
00:10:32.900 --> 00:10:37.230
In this case,
it's doing it by order is that

140
00:10:38.410 --> 00:10:43.730
by destructuring, we are creating
a local variable a, a local variable b.

141
00:10:43.730 --> 00:10:47.369
And it's assigning it to 1 and 2.

142
00:10:47.369 --> 00:10:50.650
Let me see if they, more importantly,
I'd prefer to do this with objects.

143
00:10:52.260 --> 00:10:54.904
See if we go down here.

144
00:10:57.443 --> 00:11:01.710
&gt;&gt; Lukas Ruebbelke: Come on, here we go.

145
00:11:01.710 --> 00:11:05.090
So essentially, if this was over here,

146
00:11:06.540 --> 00:11:09.870
it allows you to essentially
pull these off, really

147
00:11:09.870 --> 00:11:14.590
peel a property off of an object, and
assign a local variable, in a nutshell.

148
00:11:14.590 --> 00:11:16.180
That's what that is.

149
00:11:16.180 --> 00:11:20.730
If we have any ES6 or
typescript.wizards in the chat room,

150
00:11:20.730 --> 00:11:24.510
you'll feel free to add
in additional commentary.

151
00:11:24.510 --> 00:11:27.570
But that's something that
was introduced in ES6, and

152
00:11:27.570 --> 00:11:28.750
we used it in type script as well.

