WEBVTT

1
00:00:00.500 --> 00:00:04.480
&gt;&gt; Lukas Ruebbelke: So what I will do for
a demonstration, let's do one more output.

2
00:00:07.640 --> 00:00:12.184
Output, remember that,
&gt;&gt; Lukas Ruebbelke: Metadata or

3
00:00:12.184 --> 00:00:15.160
decorators are functions.

4
00:00:15.160 --> 00:00:17.260
So don't forget your parentheses.

5
00:00:17.260 --> 00:00:18.489
And let's just say jammin.

6
00:00:19.560 --> 00:00:27.717
Now we'll go new EventEmitter().
&gt;&gt; Lukas Ruebbelke: And

7
00:00:27.717 --> 00:00:35.306
then let's go to our items component.html.

8
00:00:35.306 --> 00:00:40.143
And so now that I've created
an output called jammin,

9
00:00:40.143 --> 00:00:45.907
how do I bind to that?
&gt;&gt; Speaker 3: They're

10
00:00:45.907 --> 00:00:47.234
in jammin?

11
00:00:47.234 --> 00:00:47.850
&gt;&gt; Speaker 2: Jammed?
&gt;&gt; Lukas Ruebbelke: We're jammin.

12
00:00:47.850 --> 00:00:53.226
&gt;&gt; Speaker 3: Banana jam.

13
00:00:53.226 --> 00:00:55.986
It's kinda neat because you
can look at the parent and

14
00:00:55.986 --> 00:00:59.300
see everything that it's capable of doing.
&gt;&gt; Lukas Ruebbelke: Yes I mean we

15
00:00:59.300 --> 00:01:01.990
are looking, like this is the contract.

16
00:01:01.990 --> 00:01:02.530
That's what I love.

17
00:01:02.530 --> 00:01:05.960
It's like input, output, output,
output rr this is what this takes.

18
00:01:05.960 --> 00:01:13.154
And you can see, so.
&gt;&gt; Lukas Ruebbelke: We're

19
00:01:13.154 --> 00:01:17.189
just gonna do something nonsensical.

20
00:01:17.189 --> 00:01:19.426
Let's go into our items component

21
00:01:41.080 --> 00:01:42.029
&gt;&gt; Lukas Ruebbelke: In my mind I'm trying

22
00:01:42.029 --> 00:01:46.270
to think of like if I was Jamaica and
how would I actually type it, anyways.

23
00:01:46.270 --> 00:01:50.153
So just in your mind when you read this do
it with a Jamaican accent please, okay?

24
00:01:50.153 --> 00:01:52.992
So jammin.

25
00:01:56.869 --> 00:02:01.569
&gt;&gt; Lukas Ruebbelke: Jammin.
&gt;&gt; Lukas Ruebbelke: So,

26
00:02:01.569 --> 00:02:08.876
the question is how do we trigger that?
&gt;&gt; Lukas Ruebbelke: We

27
00:02:08.876 --> 00:02:10.439
need to go to our list component.

28
00:02:21.257 --> 00:02:25.660
&gt;&gt; Lukas Ruebbelke: And,
&gt;&gt; Lukas Ruebbelke: I don't know,

29
00:02:25.660 --> 00:02:30.850
(mouseenter).
&gt;&gt; Lukas Ruebbelke: What's the output?

30
00:02:30.850 --> 00:02:34.049
&gt;&gt; Speaker 2: jammin.emit.

31
00:02:34.049 --> 00:02:38.094
&gt;&gt; Speaker 3: Binding.emit and data.

32
00:02:38.094 --> 00:02:40.001
Item, I don't need to
put anything into it.

33
00:02:40.001 --> 00:02:41.361
&gt;&gt; Lukas Ruebbelke: I mean, I don't really

34
00:02:41.361 --> 00:02:44.901
have, but I'll send the event in,
just to see what happens.

35
00:02:44.901 --> 00:02:46.363
And actually, let's just go back here.

36
00:03:12.298 --> 00:03:16.867
&gt;&gt; Lukas Ruebbelke: So I'm getting
an undefined, and the reason being.

37
00:03:16.867 --> 00:03:22.889
Let's go back to items component and
I'm not passing the event in.

38
00:03:22.889 --> 00:03:24.139
Let's do this one more time.

39
00:03:32.288 --> 00:03:33.660
&gt;&gt; Lukas Ruebbelke: You notice here,

40
00:03:33.660 --> 00:03:37.412
that because I'm just
sending a dollar event and

41
00:03:37.412 --> 00:03:42.630
actually nothing specific,
that I'm getting essentially the dom

42
00:03:42.630 --> 00:03:48.608
event.
&gt;&gt; Lukas Ruebbelke: Okay,

43
00:03:48.608 --> 00:03:53.035
makes sense?
&gt;&gt; Lukas Ruebbelke: Now,

44
00:03:53.035 --> 00:03:57.760
let's just do an input and
then we'll have lunch.

45
00:04:00.430 --> 00:04:04.820
So let's think of an input here.

46
00:04:06.050 --> 00:04:10.782
So we're passing in items, I don't know

47
00:04:15.379 --> 00:04:16.860
&gt;&gt; Lukas Ruebbelke: secretMessage,

48
00:04:20.828 --> 00:04:21.450
&gt;&gt; Lukas Ruebbelke: Like so.

49
00:04:21.450 --> 00:04:26.133
And now that we've created
an input the secretMessage

50
00:04:26.133 --> 00:04:29.403
it's now available in the template.

51
00:04:36.260 --> 00:04:38.113
&gt;&gt; Lukas Ruebbelke: secretMessage.

52
00:04:38.113 --> 00:04:42.972
Yay!
&gt;&gt; Lukas Ruebbelke: Let's go to items

53
00:04:42.972 --> 00:04:50.110
component.
&gt;&gt; Lukas Ruebbelke: Get over here.

54
00:04:52.080 --> 00:04:57.390
So being that we want to input this
&gt;&gt; Speaker 2: Square bracket.

55
00:04:57.390 --> 00:04:59.916
&gt;&gt; Lukas Ruebbelke: Good, love it.

56
00:04:59.916 --> 00:05:05.417
secretMessage, the fact that
the ID picks that up is tight.

57
00:05:05.417 --> 00:05:13.186
And let's go 'myMessage'.
&gt;&gt; Lukas Ruebbelke: And

58
00:05:13.186 --> 00:05:17.255
then from here, let's do something totally

59
00:05:17.255 --> 00:05:24.203
irresponsible.
&gt;&gt; Lukas Ruebbelke: Ng

60
00:05:24.203 --> 00:05:31.202
model,
&gt;&gt; Lukas Ruebbelke: And

61
00:05:31.202 --> 00:05:36.830
here's the question.
&gt;&gt; Lukas Ruebbelke: What do I do here?

62
00:05:38.120 --> 00:05:41.520
I need this to be two way.
&gt;&gt; Speaker 3: Banana in the box.

63
00:05:42.530 --> 00:05:43.410
&gt;&gt; Lukas Ruebbelke: Banana in a box.

64
00:05:44.490 --> 00:05:49.508
I'll take it.
&gt;&gt; Lukas Ruebbelke: And

65
00:05:49.508 --> 00:05:52.350
then let's go ahead and
just set this property here.

66
00:06:03.330 --> 00:06:04.440
You can tell what I'm thinking about.

67
00:06:11.960 --> 00:06:18.118
Lunch is served.
&gt;&gt; Lukas Ruebbelke: But,

68
00:06:18.118 --> 00:06:22.873
whoa, why is this happening?
&gt;&gt; Lukas Ruebbelke: Notice when I

69
00:06:22.873 --> 00:06:26.681
change it here.
&gt;&gt; Speaker 2: [CROSSTALK] It's input.

70
00:06:26.681 --> 00:06:27.806
&gt;&gt; Lukas Ruebbelke: So,

71
00:06:30.326 --> 00:06:31.341
&gt;&gt; Lukas Ruebbelke: Not so fast.

72
00:06:33.213 --> 00:06:34.262
&gt;&gt; Lukas Ruebbelke: Let me elaborate.

73
00:06:34.262 --> 00:06:41.196
Let's go back to our items component.
&gt;&gt; Lukas Ruebbelke: Man I

74
00:06:41.196 --> 00:06:50.697
just love this h1 tag.
&gt;&gt; Lukas Ruebbelke: Let's

75
00:06:50.697 --> 00:06:52.890
make sure that we do this correct.

76
00:06:54.320 --> 00:06:59.130
So down here.
&gt;&gt; Lukas Ruebbelke: This right here, and

77
00:06:59.130 --> 00:07:02.570
this right here, what's happening?

78
00:07:02.570 --> 00:07:07.464
That's two way data binding.
&gt;&gt; Lukas Ruebbelke: Or rather,

79
00:07:07.464 --> 00:07:08.910
let me rephrase that.

80
00:07:08.910 --> 00:07:11.990
What's happening in the input
is two way data binding.

81
00:07:13.430 --> 00:07:18.050
But what is happening from here and this
is important to make this distinction,

82
00:07:18.050 --> 00:07:21.950
is because we have two way data binding
between the component and the template.

83
00:07:21.950 --> 00:07:28.380
When we update the template, it updates
the property on the component, but

84
00:07:28.380 --> 00:07:34.130
because then we have one way data binding,
essentially interpolation on the top or

85
00:07:34.130 --> 00:07:37.730
property binding into our sub components.

86
00:07:38.820 --> 00:07:43.000
That when that property
changes at the component, so

87
00:07:43.000 --> 00:07:48.790
remember component to template, when
then property updates it gets sent in,

88
00:07:48.790 --> 00:07:51.590
or rather it updates the child component.

89
00:07:51.590 --> 00:07:52.240
Cuz we're bound to it.

90
00:07:53.410 --> 00:07:56.440
So we're using two-way data binding
to update it from the template

91
00:07:56.440 --> 00:07:59.660
back to the model or
to the component class.

92
00:07:59.660 --> 00:08:06.617
And then when that updates, because we've
bound to it here, it updates as well.

93
00:08:06.617 --> 00:08:08.561
And so this is how you get, or

94
00:08:08.561 --> 00:08:12.377
one of the ways you achieve
a unidirectional data flow.

95
00:08:12.377 --> 00:08:17.065
Because ultimately, what you want
is not only to minimize state, but

96
00:08:17.065 --> 00:08:20.730
you wanna get your state
moving in a single direction.

97
00:08:21.790 --> 00:08:24.420
So state flows down and

98
00:08:24.420 --> 00:08:29.850
events flow up, which with inputs and
outputs like this is perfect.

99
00:08:29.850 --> 00:08:32.600
We have state coming in,
we have events going out.

100
00:08:34.010 --> 00:08:38.333
And so this concept, when we get
into like reactive data management.

101
00:08:38.333 --> 00:08:42.857
When we start talking about these
things like how do you architect

102
00:08:42.857 --> 00:08:47.067
an application to handle not
only state but communication.

103
00:08:47.067 --> 00:08:51.564
This concept of inputs and
outputs, state falling down,

104
00:08:51.564 --> 00:08:55.877
events flowing up,
not only minimizes state because if

105
00:08:55.877 --> 00:09:00.720
we go here,
&gt;&gt; Lukas Ruebbelke: Into

106
00:09:00.720 --> 00:09:02.870
the component itself.

107
00:09:02.870 --> 00:09:04.790
How much internal state do we have?

108
00:09:04.790 --> 00:09:09.010
We're not storing other than just is
really a conduit to the template.

109
00:09:10.100 --> 00:09:11.330
We're not storing state.

110
00:09:11.330 --> 00:09:15.917
We're really just reflecting state.
&gt;&gt; Lukas Ruebbelke: And so

111
00:09:15.917 --> 00:09:23.481
now we have these components
that are not only stateless but

112
00:09:23.481 --> 00:09:30.599
we can look at this component
as we breathe life into it.

113
00:09:30.599 --> 00:09:34.275
And we know the direction
that data is going in and

114
00:09:34.275 --> 00:09:38.050
we know the direction that
events are coming out.

115
00:09:39.180 --> 00:09:45.021
And so, visually we can look and very
quickly understand, data in, events out.

116
00:09:57.376 --> 00:09:58.962
&gt;&gt; Speaker 5: Hans is taking you to task.

117
00:09:58.962 --> 00:09:59.754
&gt;&gt; Lukas Ruebbelke: Yes, so

118
00:09:59.754 --> 00:10:04.625
I think Hans is really
offended by the fact that I'm

119
00:10:04.625 --> 00:10:10.213
calling omit in the template and
&gt;&gt; Lukas Ruebbelke: I

120
00:10:10.213 --> 00:10:15.090
am going to say that we can
agree to disagree on that.

121
00:10:15.090 --> 00:10:21.540
I think that calling into the template
as opposed to abstracting that out

122
00:10:21.540 --> 00:10:27.070
into the controller or the component
class is, there's no benefit to that.

123
00:10:27.070 --> 00:10:32.830
Like you're not getting a performance
gain and I think as well,

124
00:10:32.830 --> 00:10:37.950
especially when you start to get
into observables, is that you'll

125
00:10:37.950 --> 00:10:43.290
actually consume things directly right
off the service in your template.

126
00:10:43.290 --> 00:10:48.469
So I think that at least for
me in the religious sense that

127
00:10:49.520 --> 00:10:57.070
I think just doing output.admit,

128
00:10:57.070 --> 00:10:59.490
I think it's much less

129
00:10:59.490 --> 00:11:03.230
prone to error than actually just
creating a method to pass that through.

130
00:11:03.230 --> 00:11:06.060
We're getting a request to see
where you called the emit,

131
00:11:06.060 --> 00:11:14.646
just to see it in a template again.
&gt;&gt; Lukas Ruebbelke: Right

132
00:11:14.646 --> 00:11:19.129
here.
&gt;&gt; Lukas Ruebbelke: So just to for

133
00:11:19.129 --> 00:11:22.441
the sake of conversation,

134
00:11:22.441 --> 00:11:27.052
if we were gonna do this differently.

135
00:11:29.871 --> 00:11:32.953
&gt;&gt; Lukas Ruebbelke: The solution to this

136
00:11:32.953 --> 00:11:38.579
would be to handleClick($event)

137
00:11:45.285 --> 00:11:52.429
&gt;&gt; Lukas Ruebbelke: selected.
&gt;&gt; Lukas Ruebbelke: And

138
00:11:52.429 --> 00:11:54.280
then from here-
&gt;&gt; Speaker 3: Think

139
00:11:54.280 --> 00:11:54.870
you need the emit.

140
00:11:56.360 --> 00:11:56.943
&gt;&gt; Lukas Ruebbelke: Yeah.
&gt;&gt; Speaker 3: Yep.

141
00:12:03.119 --> 00:12:03.916
&gt;&gt; Lukas Ruebbelke: Right, so

142
00:12:03.916 --> 00:12:08.782
I feel like for the sake of keeping
a method call out of the template

143
00:12:08.782 --> 00:12:13.476
then essentially what we're
doing is we're introducing even

144
00:12:13.476 --> 00:12:18.033
more complexity to avoid that.
&gt;&gt; Lukas Ruebbelke: And so

145
00:12:18.033 --> 00:12:20.221
this would be one of those things where,
and

146
00:12:20.221 --> 00:12:23.190
so there are cases where you
would wanna capture the event.

147
00:12:23.190 --> 00:12:25.940
Maybe you wanna do some quick
transformation logic as it goes

148
00:12:25.940 --> 00:12:26.650
out the door.

149
00:12:26.650 --> 00:12:28.750
So I'm not saying don't do this.

150
00:12:28.750 --> 00:12:34.770
But I think that introducing
additional code volume, to

151
00:12:34.770 --> 00:12:40.500
essentially a function to call a function,
I have a hard time justifying that.

152
00:12:40.500 --> 00:12:44.900
I mean cuz this function does absolutely
nothing other than really just call

153
00:12:44.900 --> 00:12:46.420
essentially a function.

154
00:12:47.560 --> 00:12:50.000
And so
this is one of these things where, Hans,

155
00:12:50.000 --> 00:12:54.630
if we ever meet in real life, I hope
we're still friends, and a high-five.

156
00:12:54.630 --> 00:12:57.100
But personally, this doesn't offend me.

157
00:12:58.550 --> 00:13:00.600
Cuz I think actually
the alternate is actually,

158
00:13:00.600 --> 00:13:02.660
I think a little bit more complex.

159
00:13:02.660 --> 00:13:08.190
And I prefer not to introduce
code volume into my templates,

160
00:13:08.190 --> 00:13:11.190
or rather into my component classes.

161
00:13:13.070 --> 00:13:13.770
Yes?
&gt;&gt; Speaker 6: So

162
00:13:13.770 --> 00:13:18.600
in terms of testing then with optional and
required senses, if I misspelled

163
00:13:18.600 --> 00:13:23.680
jammin as jamming somewhere else,
it'd be like no harm no foul,

164
00:13:23.680 --> 00:13:26.470
I'd just never hear about an event and-
&gt;&gt; Lukas Ruebbelke: Yep,

165
00:13:26.470 --> 00:13:28.728
it would just fail silently.
&gt;&gt; Speaker 6: [CROSSTALK]

166
00:13:28.728 --> 00:13:30.090
No TypeScript error?

167
00:13:30.090 --> 00:13:31.370
No Angular errors?
&gt;&gt; Lukas Ruebbelke: Well, let's see.

168
00:13:32.472 --> 00:13:34.609
So TypeScript actually
might throw something.

169
00:13:37.078 --> 00:13:37.619
&gt;&gt; Lukas Ruebbelke: Let's go

170
00:13:37.619 --> 00:13:39.180
into our Items component.

171
00:13:41.490 --> 00:13:49.615
So now I just went from I'm Jamaican to
&gt;&gt; Lukas Ruebbelke: I am from the midwest.

172
00:13:57.978 --> 00:13:59.562
&gt;&gt; Lukas Ruebbelke: Nothing, so

173
00:13:59.562 --> 00:14:05.034
it's just gonna be I don't recognize this,

174
00:14:05.034 --> 00:14:10.644
I'm not doing anything.
&gt;&gt; Speaker 6: Yeah it's still triggered,

175
00:14:10.644 --> 00:14:13.080
okay.
&gt;&gt; Lukas Ruebbelke: What's that?

176
00:14:13.080 --> 00:14:13.580
&gt;&gt; Speaker 6: Well type in

177
00:14:13.580 --> 00:14:14.890
the-
&gt;&gt; Lukas Ruebbelke: So

178
00:14:14.890 --> 00:14:18.233
now this is something entirely different.
&gt;&gt; Speaker 6: Right.

179
00:14:18.233 --> 00:14:19.410
&gt;&gt; Lukas Ruebbelke: If I go down here.

180
00:14:21.601 --> 00:14:22.889
&gt;&gt; Speaker 6: Yeah it's

181
00:14:22.889 --> 00:14:24.073
flawed.
&gt;&gt; Lukas Ruebbelke: So

182
00:14:24.073 --> 00:14:24.778
that's not working.
&gt;&gt; Speaker 6: Yep.

183
00:14:42.426 --> 00:14:43.686
&gt;&gt; Lukas Ruebbelke: Anymore questions?

184
00:14:47.303 --> 00:14:49.044
&gt;&gt; Speaker 6: Can you explain in this view

185
00:14:49.044 --> 00:14:52.345
where that dollar event is coming from?
&gt;&gt; Lukas Ruebbelke: So

186
00:14:52.345 --> 00:14:55.345
this is generated from the EventEmitter.

187
00:14:56.920 --> 00:15:01.664
And so it contains by default,
information about the dom event,

188
00:15:01.664 --> 00:15:04.598
but because we're passing something in

189
00:15:04.598 --> 00:15:09.693
then
&gt;&gt; Lukas Ruebbelke: In

190
00:15:09.693 --> 00:15:14.367
this case like selected then this
just gets captured as essentially

191
00:15:14.367 --> 00:15:18.874
the item that we're passing in.
&gt;&gt; Speaker 6: So, can I

192
00:15:18.874 --> 00:15:23.426
pass two parameters in, to [CROSSTALK]
&gt;&gt; Lukas Ruebbelke: So

193
00:15:23.426 --> 00:15:28.054
now we're into murky territory, of which,
I do not understand, because I've not been

194
00:15:28.054 --> 00:15:34.630
able to reasonably,
&gt;&gt; Lukas Ruebbelke: Figure this out.

195
00:15:34.630 --> 00:15:36.860
So I think you can do,
I've tried this before.

196
00:15:38.650 --> 00:15:41.900
Let's just see what happens, test.

197
00:15:41.900 --> 00:15:45.140
We'll do a test parameter.

198
00:15:45.140 --> 00:15:47.732
Then we'll go into our items component.

199
00:15:51.357 --> 00:15:54.810
&gt;&gt; Lukas Ruebbelke: SelectItem test

200
00:16:00.733 --> 00:16:02.034
&gt;&gt; Lukas Ruebbelke: And,

201
00:16:16.707 --> 00:16:17.738
&gt;&gt; Lukas Ruebbelke: This may be something

202
00:16:17.738 --> 00:16:19.398
we have to geek out over lunch, but

203
00:16:19.398 --> 00:16:23.407
this is one of these things where if you
don't have item, it still gets called, and

204
00:16:23.407 --> 00:16:26.530
it's still in there, and so
I really get, it's interesting.

205
00:16:26.530 --> 00:16:27.290
Is it a DOM event?

206
00:16:27.290 --> 00:16:28.280
What do you pass in?

207
00:16:28.280 --> 00:16:28.980
What if you need both?

208
00:16:29.990 --> 00:16:32.577
How do you handle that?

209
00:16:32.577 --> 00:16:34.180
Let's go here.

210
00:16:34.180 --> 00:16:36.230
And, yeah.

211
00:16:36.230 --> 00:16:36.910
So it's undefined.

212
00:16:36.910 --> 00:16:40.130
So I think what you have to do
is actually, I remember now.

213
00:16:40.130 --> 00:16:44.351
The only way I've been able to get this
to work is to actually create a custom

214
00:16:44.351 --> 00:16:44.891
object.

215
00:16:44.891 --> 00:16:47.880
Essentially, an event property with
additional payload that you want on it.

216
00:16:48.940 --> 00:16:51.750
So as far as I know,
I think it just takes a single parameter.

217
00:16:51.750 --> 00:16:53.450
I can verify that against the docs but.

218
00:16:53.450 --> 00:16:57.510
We had this question before of what
if you need the event information and

219
00:16:57.510 --> 00:17:00.570
some payload is then.

220
00:17:00.570 --> 00:17:05.370
At that point what I would probably do
is not call it directly in the dom but

221
00:17:05.370 --> 00:17:09.630
I would actually then pull
that into the component class.

