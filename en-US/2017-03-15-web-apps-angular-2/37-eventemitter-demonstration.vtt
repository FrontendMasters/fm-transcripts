WEBVTT

1
00:00:00.500 --> 00:00:04.480
&gt;&gt; Lukas Ruebbelke: So what I will do for
a demonstration, let's do one more output.

2
00:00:07.640 --> 00:00:12.184
Output, remember that,
&gt;&gt; Lukas Ruebbelke: Metadata or

3
00:00:12.184 --> 00:00:15.160
decorators are functions.

4
00:00:15.160 --> 00:00:17.260
So don't forget your parentheses.

5
00:00:17.260 --> 00:00:18.489
And let's just say jammin.

6
00:00:19.560 --> 00:00:21.744
Now we'll go new EventEmitter().

7
00:00:27.134 --> 00:00:35.306
&gt;&gt; Lukas Ruebbelke: And
then let's go to our items component.html.

8
00:00:35.306 --> 00:00:42.046
And so now that I've created an output
called jammin, how do I bind to that?

9
00:00:44.847 --> 00:00:47.234
&gt;&gt; Speaker 3: They're in jammin?

10
00:00:47.234 --> 00:00:47.800
&gt;&gt; Speaker 2: Jammed?

11
00:00:47.800 --> 00:00:53.226
&gt;&gt; Lukas Ruebbelke: We're jammin.
&gt;&gt; Speaker 3: Banana jam.

12
00:00:53.226 --> 00:00:55.986
It's kinda neat because you
can look at the parent and

13
00:00:55.986 --> 00:00:58.330
see everything that it's capable of doing.

14
00:00:58.330 --> 00:01:01.990
&gt;&gt; Lukas Ruebbelke: Yes I mean we
are looking, like this is the contract.

15
00:01:01.990 --> 00:01:02.530
That's what I love.

16
00:01:02.530 --> 00:01:05.960
It's like input, output, output,
output rr this is what this takes.

17
00:01:05.960 --> 00:01:07.132
And you can see, so.

18
00:01:12.421 --> 00:01:17.189
&gt;&gt; Lukas Ruebbelke: We're just
gonna do something nonsensical.

19
00:01:17.189 --> 00:01:19.426
Let's go into our items component

20
00:01:41.080 --> 00:01:42.029
&gt;&gt; Lukas Ruebbelke: In my mind I'm trying

21
00:01:42.029 --> 00:01:46.270
to think of like if I was Jamaica and
how would I actually type it, anyways.

22
00:01:46.270 --> 00:01:50.153
So just in your mind when you read this do
it with a Jamaican accent please, okay?

23
00:01:50.153 --> 00:01:52.992
So jammin.

24
00:01:56.869 --> 00:01:57.692
&gt;&gt; Lukas Ruebbelke: Jammin.

25
00:02:01.329 --> 00:02:03.560
&gt;&gt; Lukas Ruebbelke: So,
the question is how do we trigger that?

26
00:02:08.765 --> 00:02:10.439
&gt;&gt; Lukas Ruebbelke: We need
to go to our list component.

27
00:02:21.257 --> 00:02:25.660
&gt;&gt; Lukas Ruebbelke: And,
&gt;&gt; Lukas Ruebbelke: I don't know,

28
00:02:25.660 --> 00:02:26.717
(mouseenter).

29
00:02:29.270 --> 00:02:30.850
&gt;&gt; Lukas Ruebbelke: What's the output?

30
00:02:30.850 --> 00:02:34.049
&gt;&gt; Speaker 2: jammin.emit.

31
00:02:34.049 --> 00:02:38.094
&gt;&gt; Speaker 3: Binding.emit and data.

32
00:02:38.094 --> 00:02:40.001
Item, I don't need to
put anything into it.

33
00:02:40.001 --> 00:02:43.401
&gt;&gt; Lukas Ruebbelke: I mean, I don't
really have, but I'll send the event in,

34
00:02:43.401 --> 00:02:44.901
just to see what happens.

35
00:02:44.901 --> 00:02:46.363
And actually, let's just go back here.

36
00:03:12.298 --> 00:03:16.867
&gt;&gt; Lukas Ruebbelke: So I'm getting
an undefined, and the reason being.

37
00:03:16.867 --> 00:03:22.889
Let's go back to items component and
I'm not passing the event in.

38
00:03:22.889 --> 00:03:24.139
Let's do this one more time.

39
00:03:32.288 --> 00:03:37.138
&gt;&gt; Lukas Ruebbelke: You notice here, that
because I'm just sending a dollar event

40
00:03:37.138 --> 00:03:43.284
and actually nothing specific, that
I'm getting essentially the dom event.

41
00:03:47.867 --> 00:03:50.094
&gt;&gt; Lukas Ruebbelke: Okay, makes sense?

42
00:03:52.487 --> 00:03:57.760
&gt;&gt; Lukas Ruebbelke: Now, let's just do
an input and then we'll have lunch.

43
00:04:00.430 --> 00:04:04.820
So let's think of an input here.

44
00:04:06.050 --> 00:04:10.782
So we're passing in items, I don't know

45
00:04:15.379 --> 00:04:16.860
&gt;&gt; Lukas Ruebbelke: secretMessage,

46
00:04:20.828 --> 00:04:21.450
&gt;&gt; Lukas Ruebbelke: Like so.

47
00:04:21.450 --> 00:04:26.133
And now that we've created
an input the secretMessage

48
00:04:26.133 --> 00:04:29.403
it's now available in the template.

49
00:04:36.260 --> 00:04:38.113
&gt;&gt; Lukas Ruebbelke: secretMessage.

50
00:04:38.113 --> 00:04:38.965
Yay!

51
00:04:41.180 --> 00:04:44.288
&gt;&gt; Lukas Ruebbelke: Let's
go to items component.

52
00:04:49.398 --> 00:04:50.110
&gt;&gt; Lukas Ruebbelke: Get over here.

53
00:04:52.080 --> 00:04:57.390
So being that we want to input this
&gt;&gt; Speaker 2: Square bracket.

54
00:04:57.390 --> 00:04:59.916
&gt;&gt; Lukas Ruebbelke: Good, love it.

55
00:04:59.916 --> 00:05:05.417
secretMessage, the fact that
the ID picks that up is tight.

56
00:05:05.417 --> 00:05:11.021
And let's go 'myMessage'.

57
00:05:12.865 --> 00:05:18.868
&gt;&gt; Lukas Ruebbelke: And then from here,
let's do something totally irresponsible.

58
00:05:23.740 --> 00:05:31.202
&gt;&gt; Lukas Ruebbelke: Ng model,
&gt;&gt; Lukas Ruebbelke: And

59
00:05:31.202 --> 00:05:32.749
here's the question.

60
00:05:35.968 --> 00:05:36.830
&gt;&gt; Lukas Ruebbelke: What do I do here?

61
00:05:38.120 --> 00:05:40.862
I need this to be two way.

62
00:05:40.862 --> 00:05:41.520
&gt;&gt; Speaker 3: Banana in the box.

63
00:05:42.530 --> 00:05:43.410
&gt;&gt; Lukas Ruebbelke: Banana in a box.

64
00:05:44.490 --> 00:05:44.990
I'll take it.

65
00:05:49.319 --> 00:05:52.350
&gt;&gt; Lukas Ruebbelke: And then let's go
ahead and just set this property here.

66
00:06:03.330 --> 00:06:04.440
You can tell what I'm thinking about.

67
00:06:11.960 --> 00:06:13.952
Lunch is served.

68
00:06:17.836 --> 00:06:19.589
&gt;&gt; Lukas Ruebbelke: But,
whoa, why is this happening?

69
00:06:22.157 --> 00:06:23.788
&gt;&gt; Lukas Ruebbelke: Notice
when I change it here.

70
00:06:23.788 --> 00:06:26.681
&gt;&gt; Speaker 2: [CROSSTALK] It's input.

71
00:06:26.681 --> 00:06:31.341
&gt;&gt; Lukas Ruebbelke: So,
&gt;&gt; Lukas Ruebbelke: Not so fast.

72
00:06:33.213 --> 00:06:34.262
&gt;&gt; Lukas Ruebbelke: Let me elaborate.

73
00:06:34.262 --> 00:06:36.725
Let's go back to our items component.

74
00:06:40.846 --> 00:06:42.956
&gt;&gt; Lukas Ruebbelke: Man I
just love this h1 tag.

75
00:06:50.244 --> 00:06:52.890
&gt;&gt; Lukas Ruebbelke: Let's make
sure that we do this correct.

76
00:06:54.320 --> 00:06:55.176
So down here.

77
00:06:57.410 --> 00:07:02.570
&gt;&gt; Lukas Ruebbelke: This right here,
and this right here, what's happening?

78
00:07:02.570 --> 00:07:03.675
That's two way data binding.

79
00:07:06.909 --> 00:07:08.910
&gt;&gt; Lukas Ruebbelke: Or
rather, let me rephrase that.

80
00:07:08.910 --> 00:07:11.990
What's happening in the input
is two way data binding.

81
00:07:13.430 --> 00:07:18.050
But what is happening from here and this
is important to make this distinction,

82
00:07:18.050 --> 00:07:21.950
is because we have two way data binding
between the component and the template.

83
00:07:21.950 --> 00:07:28.380
When we update the template, it updates
the property on the component, but

84
00:07:28.380 --> 00:07:34.130
because then we have one way data binding,
essentially interpolation on the top or

85
00:07:34.130 --> 00:07:37.730
property binding into our sub components.

86
00:07:38.820 --> 00:07:43.000
That when that property
changes at the component, so

87
00:07:43.000 --> 00:07:48.790
remember component to template, when
then property updates it gets sent in,

88
00:07:48.790 --> 00:07:51.590
or rather it updates the child component.

89
00:07:51.590 --> 00:07:52.240
Cuz we're bound to it.

90
00:07:53.410 --> 00:07:56.440
So we're using two-way data binding
to update it from the template

91
00:07:56.440 --> 00:07:59.660
back to the model or
to the component class.

92
00:07:59.660 --> 00:08:06.617
And then when that updates, because we've
bound to it here, it updates as well.

93
00:08:06.617 --> 00:08:08.561
And so this is how you get, or

94
00:08:08.561 --> 00:08:12.377
one of the ways you achieve
a unidirectional data flow.

95
00:08:12.377 --> 00:08:17.065
Because ultimately, what you want
is not only to minimize state, but

96
00:08:17.065 --> 00:08:20.730
you wanna get your state
moving in a single direction.

97
00:08:21.790 --> 00:08:24.420
So state flows down and

98
00:08:24.420 --> 00:08:29.850
events flow up, which with inputs and
outputs like this is perfect.

99
00:08:29.850 --> 00:08:32.600
We have state coming in,
we have events going out.

100
00:08:34.010 --> 00:08:38.333
And so this concept, when we get
into like reactive data management.

101
00:08:38.333 --> 00:08:42.857
When we start talking about these
things like how do you architect

102
00:08:42.857 --> 00:08:47.067
an application to handle not
only state but communication.

103
00:08:47.067 --> 00:08:51.564
This concept of inputs and
outputs, state falling down,

104
00:08:51.564 --> 00:08:55.877
events flowing up,
not only minimizes state because if

105
00:08:55.877 --> 00:09:00.720
we go here,
&gt;&gt; Lukas Ruebbelke: Into

106
00:09:00.720 --> 00:09:02.870
the component itself.

107
00:09:02.870 --> 00:09:04.790
How much internal state do we have?

108
00:09:04.790 --> 00:09:09.010
We're not storing other than just is
really a conduit to the template.

109
00:09:10.100 --> 00:09:11.330
We're not storing state.

110
00:09:11.330 --> 00:09:13.209
We're really just reflecting state.

111
00:09:15.161 --> 00:09:20.152
&gt;&gt; Lukas Ruebbelke: And so
now we have these components that

112
00:09:20.152 --> 00:09:25.144
are not only stateless but we can look at

113
00:09:25.144 --> 00:09:30.599
this component as we breathe life into it.

114
00:09:30.599 --> 00:09:34.275
And we know the direction
that data is going in and

115
00:09:34.275 --> 00:09:38.050
we know the direction that
events are coming out.

116
00:09:39.180 --> 00:09:45.021
And so, visually we can look and very
quickly understand, data in, events out.

117
00:09:57.376 --> 00:09:58.962
&gt;&gt; Speaker 5: Hans is taking you to task.

118
00:09:58.962 --> 00:10:04.172
&gt;&gt; Lukas Ruebbelke: Yes, so I think
Hans is really offended by the fact that

119
00:10:04.172 --> 00:10:10.213
I'm calling omit in the template and
&gt;&gt; Lukas Ruebbelke: I

120
00:10:10.213 --> 00:10:15.090
am going to say that we can
agree to disagree on that.

121
00:10:15.090 --> 00:10:21.540
I think that calling into the template
as opposed to abstracting that out

122
00:10:21.540 --> 00:10:27.070
into the controller or the component
class is, there's no benefit to that.

123
00:10:27.070 --> 00:10:32.830
Like you're not getting a performance
gain and I think as well,

124
00:10:32.830 --> 00:10:37.950
especially when you start to get
into observables, is that you'll

125
00:10:37.950 --> 00:10:43.290
actually consume things directly right
off the service in your template.

126
00:10:43.290 --> 00:10:48.469
So I think that at least for
me in the religious sense that

127
00:10:49.520 --> 00:10:57.070
I think just doing output.admit,

128
00:10:57.070 --> 00:10:59.490
I think it's much less

129
00:10:59.490 --> 00:11:03.230
prone to error than actually just
creating a method to pass that through.

130
00:11:03.230 --> 00:11:06.060
We're getting a request to see
where you called the emit,

131
00:11:06.060 --> 00:11:07.747
just to see it in a template again.

132
00:11:14.186 --> 00:11:15.200
&gt;&gt; Lukas Ruebbelke: Right here.

133
00:11:17.545 --> 00:11:22.441
&gt;&gt; Lukas Ruebbelke: So just to for
the sake of conversation,

134
00:11:22.441 --> 00:11:27.052
if we were gonna do this differently.

135
00:11:29.871 --> 00:11:38.579
&gt;&gt; Lukas Ruebbelke: The solution to
this would be to handleClick($event)

136
00:11:45.285 --> 00:11:46.621
&gt;&gt; Lukas Ruebbelke: selected.

137
00:11:52.247 --> 00:11:54.870
&gt;&gt; Lukas Ruebbelke: And then from here-
&gt;&gt; Speaker 3: Think you need the emit.

138
00:11:56.360 --> 00:11:56.943
&gt;&gt; Lukas Ruebbelke: Yeah.
&gt;&gt; Speaker 3: Yep.

139
00:12:03.119 --> 00:12:04.977
&gt;&gt; Lukas Ruebbelke: Right,
so I feel like for

140
00:12:04.977 --> 00:12:10.111
the sake of keeping a method call
out of the template then essentially

141
00:12:10.111 --> 00:12:15.885
what we're doing is we're introducing
even more complexity to avoid that.

142
00:12:17.738 --> 00:12:20.339
&gt;&gt; Lukas Ruebbelke: And so this would
be one of those things where, and so

143
00:12:20.339 --> 00:12:23.190
there are cases where you
would wanna capture the event.

144
00:12:23.190 --> 00:12:25.940
Maybe you wanna do some quick
transformation logic as it goes

145
00:12:25.940 --> 00:12:26.650
out the door.

146
00:12:26.650 --> 00:12:28.750
So I'm not saying don't do this.

147
00:12:28.750 --> 00:12:34.770
But I think that introducing
additional code volume, to

148
00:12:34.770 --> 00:12:40.500
essentially a function to call a function,
I have a hard time justifying that.

149
00:12:40.500 --> 00:12:44.900
I mean cuz this function does absolutely
nothing other than really just call

150
00:12:44.900 --> 00:12:46.420
essentially a function.

151
00:12:47.560 --> 00:12:50.000
And so
this is one of these things where, Hans,

152
00:12:50.000 --> 00:12:54.630
if we ever meet in real life, I hope
we're still friends, and a high-five.

153
00:12:54.630 --> 00:12:57.100
But personally, this doesn't offend me.

154
00:12:58.550 --> 00:13:00.600
Cuz I think actually
the alternate is actually,

155
00:13:00.600 --> 00:13:02.660
I think a little bit more complex.

156
00:13:02.660 --> 00:13:08.190
And I prefer not to introduce
code volume into my templates,

157
00:13:08.190 --> 00:13:11.190
or rather into my component classes.

158
00:13:13.070 --> 00:13:13.640
Yes?

159
00:13:13.640 --> 00:13:17.940
&gt;&gt; Speaker 6: So in terms of testing then
with optional and required senses, if I

160
00:13:17.940 --> 00:13:23.680
misspelled jammin as jamming somewhere
else, it'd be like no harm no foul,

161
00:13:23.680 --> 00:13:26.470
I'd just never hear about an event and-
&gt;&gt; Lukas Ruebbelke: Yep,

162
00:13:26.470 --> 00:13:27.665
it would just fail silently.

163
00:13:27.665 --> 00:13:30.090
&gt;&gt; Speaker 6: [CROSSTALK]
No TypeScript error?

164
00:13:30.090 --> 00:13:31.370
No Angular errors?
&gt;&gt; Lukas Ruebbelke: Well, let's see.

165
00:13:32.472 --> 00:13:34.609
So TypeScript actually
might throw something.

166
00:13:37.078 --> 00:13:39.180
&gt;&gt; Lukas Ruebbelke: Let's go
into our Items component.

167
00:13:41.490 --> 00:13:49.615
So now I just went from I'm Jamaican to
&gt;&gt; Lukas Ruebbelke: I am from the midwest.

168
00:13:57.978 --> 00:14:02.874
&gt;&gt; Lukas Ruebbelke: Nothing,
so it's just gonna be I don't

169
00:14:02.874 --> 00:14:08.204
recognize this, I'm not doing anything.

170
00:14:09.388 --> 00:14:11.910
&gt;&gt; Speaker 6: Yeah it's still triggered,
okay.

171
00:14:11.910 --> 00:14:13.080
&gt;&gt; Lukas Ruebbelke: What's that?

172
00:14:13.080 --> 00:14:14.890
&gt;&gt; Speaker 6: Well type in the-
&gt;&gt; Lukas Ruebbelke: So

173
00:14:14.890 --> 00:14:17.200
now this is something entirely different.

174
00:14:17.200 --> 00:14:18.233
&gt;&gt; Speaker 6: Right.

175
00:14:18.233 --> 00:14:19.410
&gt;&gt; Lukas Ruebbelke: If I go down here.

176
00:14:21.601 --> 00:14:24.036
&gt;&gt; Speaker 6: Yeah it's flawed.

177
00:14:24.036 --> 00:14:24.778
&gt;&gt; Lukas Ruebbelke: So that's not working.
&gt;&gt; Speaker 6: Yep.

178
00:14:42.426 --> 00:14:43.686
&gt;&gt; Lukas Ruebbelke: Anymore questions?

179
00:14:47.303 --> 00:14:52.245
&gt;&gt; Speaker 6: Can you explain in this view
where that dollar event is coming from?

180
00:14:52.245 --> 00:14:55.345
&gt;&gt; Lukas Ruebbelke: So
this is generated from the EventEmitter.

181
00:14:56.920 --> 00:15:01.664
And so it contains by default,
information about the dom event,

182
00:15:01.664 --> 00:15:04.598
but because we're passing something in

183
00:15:04.598 --> 00:15:09.693
then
&gt;&gt; Lukas Ruebbelke: In

184
00:15:09.693 --> 00:15:12.645
this case like selected
then this just gets

185
00:15:12.645 --> 00:15:16.668
captured as essentially
the item that we're passing in.

186
00:15:17.770 --> 00:15:21.776
&gt;&gt; Speaker 6: So,
can I pass two parameters in,

187
00:15:21.776 --> 00:15:23.426
to [CROSSTALK]
&gt;&gt; Lukas Ruebbelke: So

188
00:15:23.426 --> 00:15:28.054
now we're into murky territory, of which,
I do not understand, because I've not been

189
00:15:28.054 --> 00:15:34.630
able to reasonably,
&gt;&gt; Lukas Ruebbelke: Figure this out.

190
00:15:34.630 --> 00:15:36.860
So I think you can do,
I've tried this before.

191
00:15:38.650 --> 00:15:41.900
Let's just see what happens, test.

192
00:15:41.900 --> 00:15:45.140
We'll do a test parameter.

193
00:15:45.140 --> 00:15:47.732
Then we'll go into our items component.

194
00:15:51.357 --> 00:15:54.810
&gt;&gt; Lukas Ruebbelke: SelectItem test

195
00:16:00.733 --> 00:16:02.034
&gt;&gt; Lukas Ruebbelke: And,

196
00:16:16.707 --> 00:16:17.738
&gt;&gt; Lukas Ruebbelke: This may be something

197
00:16:17.738 --> 00:16:19.398
we have to geek out over lunch, but

198
00:16:19.398 --> 00:16:23.407
this is one of these things where if you
don't have item, it still gets called, and

199
00:16:23.407 --> 00:16:26.530
it's still in there, and so
I really get, it's interesting.

200
00:16:26.530 --> 00:16:27.290
Is it a DOM event?

201
00:16:27.290 --> 00:16:28.280
What do you pass in?

202
00:16:28.280 --> 00:16:28.980
What if you need both?

203
00:16:29.990 --> 00:16:32.577
How do you handle that?

204
00:16:32.577 --> 00:16:34.180
Let's go here.

205
00:16:34.180 --> 00:16:36.230
And, yeah.

206
00:16:36.230 --> 00:16:36.910
So it's undefined.

207
00:16:36.910 --> 00:16:40.130
So I think what you have to do
is actually, I remember now.

208
00:16:40.130 --> 00:16:44.351
The only way I've been able to get this
to work is to actually create a custom

209
00:16:44.351 --> 00:16:44.891
object.

210
00:16:44.891 --> 00:16:47.880
Essentially, an event property with
additional payload that you want on it.

211
00:16:48.940 --> 00:16:51.750
So as far as I know,
I think it just takes a single parameter.

212
00:16:51.750 --> 00:16:53.450
I can verify that against the docs but.

213
00:16:53.450 --> 00:16:57.510
We had this question before of what
if you need the event information and

214
00:16:57.510 --> 00:17:00.570
some payload is then.

215
00:17:00.570 --> 00:17:05.370
At that point what I would probably do
is not call it directly in the dom but

216
00:17:05.370 --> 00:17:09.630
I would actually then pull
that into the component class.

