WEBVTT

1
00:00:00.290 --> 00:00:04.960
&gt;&gt; Lukas Ruebbelke: Let's go ahead and
walk through the solution.

2
00:00:04.960 --> 00:00:06.940
Just a quick review of our challenge.

3
00:00:06.940 --> 00:00:10.930
The idea is to add a widgets
collection to our widget component.

4
00:00:12.350 --> 00:00:14.930
Then, as well as a selected
widget property.

5
00:00:16.470 --> 00:00:20.600
Then, we want to display
the widgets collection.

6
00:00:20.600 --> 00:00:22.070
In the template using ngFor.

7
00:00:23.160 --> 00:00:25.660
Use event binding to
set a selected widget.

8
00:00:26.740 --> 00:00:31.720
Then, we want to display widget
properties using property binding and

9
00:00:31.720 --> 00:00:33.660
interpolation binding.

10
00:00:33.660 --> 00:00:39.033
And then, use ngIf to show
an alternate message if no widget

11
00:00:39.033 --> 00:00:44.855
is selected.
&gt;&gt; Lukas Ruebbelke: And

12
00:00:44.855 --> 00:00:50.350
I wanna ahead and
prepared some snippets that we can use.

13
00:00:50.350 --> 00:00:51.400
So, I'm just gonna hop in here.

14
00:00:54.410 --> 00:00:55.930
Let's copy this widget's collection.

15
00:00:58.040 --> 00:01:01.220
And I'm going to just blow this out.

16
00:01:04.120 --> 00:01:08.780
So, just pasted this in and
then I'm also going to

17
00:01:10.450 --> 00:01:15.340
create a selected widget property.

18
00:01:15.340 --> 00:01:19.160
So, what this does this
allows us to keep track of

19
00:01:19.160 --> 00:01:23.760
whatever widget is currently selected.
&gt;&gt; Lukas Ruebbelke: And then,

20
00:01:23.760 --> 00:01:26.260
what I'm also going to do,
because I know we're going to need this.

21
00:01:30.854 --> 00:01:32.198
&gt;&gt; Lukas Ruebbelke: Create a property, or

22
00:01:32.198 --> 00:01:34.542
rather a method called selectWidget.

23
00:01:34.542 --> 00:01:40.421
selectedWidget = widget.

24
00:01:41.670 --> 00:01:48.480
Okay, and now let's hop into our CSS.

25
00:01:50.730 --> 00:01:55.611
Back to my snippets.
&gt;&gt; Lukas Ruebbelke: Let's just

26
00:01:55.611 --> 00:01:56.270
paste this in.

27
00:02:04.114 --> 00:02:07.246
&gt;&gt; Lukas Ruebbelke: Let's just grab this

28
00:02:07.246 --> 00:02:08.291
HTML.

29
00:02:08.291 --> 00:02:09.702
And so what this is,

30
00:02:09.702 --> 00:02:14.850
is essentially is a pared down version
of what we see in the items feature.

31
00:02:16.860 --> 00:02:21.720
And if we go to our HTML,
let's just paste this in.

32
00:02:21.720 --> 00:02:25.650
And real quick,
just wanna see what this looks

33
00:02:25.650 --> 00:02:30.589
like.
&gt;&gt; Lukas Ruebbelke: Okay,

34
00:02:30.589 --> 00:02:33.770
so there's nothing here, per se.

35
00:02:34.810 --> 00:02:39.300
But, at least it looks like it
could be something eventually.

36
00:02:39.300 --> 00:02:45.810
So, the first thing that we'll
do is let's go ahead and

37
00:02:45.810 --> 00:02:50.190
display the widget.

38
00:02:50.190 --> 00:02:53.960
So, what would be the directive
that we would use here to

39
00:02:53.960 --> 00:02:55.760
lay these out?
&gt;&gt; Speaker 2: ngfor?

40
00:02:55.760 --> 00:02:56.260
&gt;&gt; Speaker 3: R4.

41
00:02:56.260 --> 00:02:57.762
&gt;&gt; Lukas Ruebbelke: ngFor,

42
00:02:57.762 --> 00:03:02.750
good.
&gt;&gt; Lukas Ruebbelke: And so,

43
00:03:02.750 --> 00:03:08.875
we want to repeat the widget card itself,

44
00:03:08.875 --> 00:03:15.000
so we'll go ngFor let widget of widgets,

45
00:03:15.000 --> 00:03:18.696
and then we'll go here.

46
00:03:18.696 --> 00:03:23.129
widget.name and

47
00:03:23.129 --> 00:03:27.266
let's go here,

48
00:03:27.266 --> 00:03:35.565
description.
&gt;&gt; Lukas Ruebbelke: Just

49
00:03:35.565 --> 00:03:37.980
double check here, so
we have name and description.

50
00:03:39.890 --> 00:03:45.270
We'll go back here and you can see that
we are now laying out the widget card.

51
00:03:46.400 --> 00:03:51.216
So far so good, we did the question
ngFor we simply laid it out and so,

52
00:03:51.216 --> 00:03:53.720
actually let me go back real quick.

53
00:03:56.370 --> 00:04:01.100
You'll notice here that prior to this, so

54
00:04:01.100 --> 00:04:06.270
let me just back this up to here.

55
00:04:06.270 --> 00:04:09.170
So, a lot of times what I'll
do is I'll lay it out once.

56
00:04:09.170 --> 00:04:13.280
And so, when this refreshes so

57
00:04:13.280 --> 00:04:16.200
we basically have a single item where
you can say okay, this is good.

58
00:04:16.200 --> 00:04:18.320
This is a good template.

59
00:04:18.320 --> 00:04:23.480
Then from there okay,
now give me 20 of them or whatever.

60
00:04:24.620 --> 00:04:26.900
And so,
then once you have that laid out or

61
00:04:26.900 --> 00:04:31.180
even because there are people
that do layout in HTML and CSS.

62
00:04:31.180 --> 00:04:34.080
You can just say lay me
out one of these and

63
00:04:34.080 --> 00:04:38.070
then from here I can just use ngFor and
we'll stamp a bunch of them.

64
00:04:40.350 --> 00:04:45.230
Okay, and then what we'll do is I
believe the next thing we needed to do

65
00:04:45.230 --> 00:04:50.580
is create an event to
set the selected widget.

66
00:04:50.580 --> 00:04:53.322
So, what do you think?

67
00:04:53.322 --> 00:04:55.962
What would be a good event?
&gt;&gt; Speaker 2: Click?

68
00:04:55.962 --> 00:04:57.526
&gt;&gt; Lukas Ruebbelke: Click.

69
00:04:57.526 --> 00:04:58.780
Okay.

70
00:04:58.780 --> 00:05:01.780
We could do click, sure.

71
00:05:02.840 --> 00:05:03.680
We'll play with this.

72
00:05:03.680 --> 00:05:06.020
I was thinking about doing like
mouse enter, or something.

73
00:05:06.020 --> 00:05:08.090
So when you actually roll over it,
it automatically sets it.

74
00:05:08.090 --> 00:05:09.424
I mean you could do any done event.

75
00:05:09.424 --> 00:05:14.217
But we'll just,
&gt;&gt; Lukas Ruebbelke: Maybe

76
00:05:14.217 --> 00:05:16.050
we'll play with that in a minute.

77
00:05:17.410 --> 00:05:22.090
selectWidget and
we'll just pass in widget.

78
00:05:22.090 --> 00:05:26.870
Now, what's interesting here is
thatangular is able to keep track of

79
00:05:26.870 --> 00:05:29.180
what this widget is.

80
00:05:29.180 --> 00:05:33.120
So it's providing context
within this loop, so

81
00:05:33.120 --> 00:05:35.880
it knows that within
this particular template,

82
00:05:35.880 --> 00:05:40.598
whatever instance you click it knows
that widget is local to this template.

83
00:05:40.598 --> 00:05:47.440
So, selectWidget then let's go down here.

84
00:05:49.240 --> 00:05:52.570
And let's do my famous, or favorite.

85
00:05:52.570 --> 00:05:58.335
I don't know how famous it is.
&gt;&gt; Lukas Ruebbelke: [INAUDIBLE]

86
00:05:58.335 --> 00:06:03.761
widget.
&gt;&gt; Lukas Ruebbelke: Let's

87
00:06:03.761 --> 00:06:12.723
dump this out.
&gt;&gt; Lukas Ruebbelke: And

88
00:06:12.723 --> 00:06:18.060
you can see now as I click this,
that we are dumping this

89
00:06:18.060 --> 00:06:23.530
essentially the selected
widget object into the page.

90
00:06:29.030 --> 00:06:31.514
&gt;&gt; Lukas Ruebbelke: Let's go back here and

91
00:06:31.514 --> 00:06:36.710
we still need to do a property finding.

92
00:06:36.710 --> 00:06:42.100
I'm going to hop into items and
we'll go to the items list and

93
00:06:42.100 --> 00:06:46.950
I'm just going to see how they did this,
or so.

94
00:06:46.950 --> 00:06:51.580
Okay, I'm just copying this image

95
00:06:51.580 --> 00:06:54.948
tag out of here,
&gt;&gt; Lukas Ruebbelke: So,

96
00:06:54.948 --> 00:06:55.660
where did I put this?

97
00:07:11.836 --> 00:07:12.361
&gt;&gt; Lukas Ruebbelke: And so,

98
00:07:12.361 --> 00:07:15.970
what we've done is I've just
copied the image element,

99
00:07:15.970 --> 00:07:19.180
we're binding source to widget.image.

100
00:07:19.180 --> 00:07:22.680
And we're binding the old
tag to widget.name.

101
00:07:22.680 --> 00:07:25.728
So, let's pop in the code.

102
00:07:25.728 --> 00:07:32.170
And you can see here, we have three super
shiny images here next to our component.

103
00:07:33.210 --> 00:07:38.970
Or within our template, rather.
&gt;&gt; Lukas Ruebbelke: And

104
00:07:38.970 --> 00:07:44.998
we have one more.
&gt;&gt; Lukas Ruebbelke: Let's-

105
00:07:48.271 --> 00:07:51.989
&gt;&gt; Lukas Ruebbelke: Let's do this.

106
00:07:58.579 --> 00:07:59.397
&gt;&gt; Lukas Ruebbelke: I've doubled this

107
00:07:59.397 --> 00:08:06.646
line.
&gt;&gt; Lukas Ruebbelke: And in a second one,

108
00:08:06.646 --> 00:08:11.803
let's go selectedWidget.name.

109
00:08:11.803 --> 00:08:13.738
And then in this one,
let's just leave this here for

110
00:08:13.738 --> 00:08:19.310
now.
&gt;&gt; Lukas Ruebbelke: Wait for it.

111
00:08:21.730 --> 00:08:26.310
So, it doesn't like it.

112
00:08:26.310 --> 00:08:34.375
Can't read property.
&gt;&gt; Lukas Ruebbelke: I

113
00:08:34.375 --> 00:08:41.542
think this will work.
&gt;&gt; Lukas Ruebbelke: Okay,

114
00:08:41.542 --> 00:08:48.738
so,
&gt;&gt; Lukas Ruebbelke: Because we're

115
00:08:48.738 --> 00:08:54.750
trying to read name on selectedWidget and
selectedWidget was not there.

116
00:08:54.750 --> 00:08:59.580
Essentially, it's saying well,
we can't do anything, so

117
00:08:59.580 --> 00:09:02.830
by adding the save navigation operator,
we were able to fix that.

118
00:09:04.070 --> 00:09:09.380
But what we want to do here
is if no widget is selected,

119
00:09:10.500 --> 00:09:12.880
then we want to show this.

120
00:09:14.150 --> 00:09:20.408
So let's go ngIf.
&gt;&gt; Lukas Ruebbelke: No

121
00:09:20.408 --> 00:09:24.089
selectedWidget.
&gt;&gt; Lukas Ruebbelke: And

122
00:09:24.089 --> 00:09:29.450
in this case,
we'll go ngIf is selectedWidget.

123
00:09:29.450 --> 00:09:31.369
So now we're just
toggling between the two.

124
00:09:38.088 --> 00:09:39.314
&gt;&gt; Lukas Ruebbelke: Refresh the page.

125
00:09:45.668 --> 00:09:47.404
&gt;&gt; Lukas Ruebbelke: The one,

126
00:09:47.404 --> 00:09:50.447
which it [NOISE].

127
00:09:50.447 --> 00:09:53.009
And let me just do one thing real quick.

128
00:09:58.970 --> 00:10:03.240
Let's go

129
00:10:03.240 --> 00:10:10.183
button Reset.

130
00:10:10.183 --> 00:10:16.114
So what we want here is selectWidget null,

131
00:10:16.114 --> 00:10:19.422
see what happens here.

132
00:10:31.355 --> 00:10:34.680
&gt;&gt; Lukas Ruebbelke: And so this is how
we're toggling between the two ngIfs.

133
00:10:35.710 --> 00:10:42.080
Is back to the code, we're saying
if we have a selectedWidget or

134
00:10:42.080 --> 00:10:45.370
we do not have a selectedWidget
show the prompt selectedWidget.

135
00:10:45.370 --> 00:10:49.644
If we do, go ahead and
show the widget's name and

136
00:10:49.644 --> 00:10:57.170
then from here we just had one more button
to essentially set selectedWidget to null.

137
00:10:57.170 --> 00:11:00.140
Does that make sense?
&gt;&gt; Speaker 2: Can

138
00:11:00.140 --> 00:11:02.596
we see your component again?
&gt;&gt; Lukas Ruebbelke: Sure.

139
00:11:07.209 --> 00:11:08.546
&gt;&gt; Lukas Ruebbelke: So start at the top,

140
00:11:08.546 --> 00:11:09.965
selectedWidget, so

141
00:11:09.965 --> 00:11:14.395
this is essentially a marker to
keep track of the selectedWidget.

142
00:11:15.870 --> 00:11:16.470
Widgets.

143
00:11:17.510 --> 00:11:18.970
And so this is just a collection.

144
00:11:21.180 --> 00:11:24.570
And then from here, selectedWidget.

145
00:11:25.840 --> 00:11:31.954
And all this is doing is essentially
a setter for the selectedWidget.

146
00:11:46.420 --> 00:11:47.320
&gt;&gt; Lukas Ruebbelke: So, yes to

147
00:11:47.320 --> 00:11:49.820
answer Crispy's question,

148
00:11:49.820 --> 00:11:55.910
you do not need the safe operation
navigator if you're using an ngIf.

149
00:11:55.910 --> 00:12:00.820
So in a sense that would
protect that from happening,

150
00:12:02.640 --> 00:12:06.100
cuz we would expect that if this is
showing on the DOM, that this does exist.

151
00:12:07.730 --> 00:12:09.950
We did the safe navigation operator first.

152
00:12:09.950 --> 00:12:14.250
But then once we did it with ngIf,
then that became unnecessary.

153
00:12:14.250 --> 00:12:22.988
So just refresh the page.
&gt;&gt; Lukas Ruebbelke: And

154
00:12:22.988 --> 00:12:26.733
so once we went to ngIf, then essentially

155
00:12:26.733 --> 00:12:31.550
we're safeguarding against
this being evaluated.

156
00:12:32.660 --> 00:12:36.900
Because how ngIf works is that it will
actually remove that element from the DOM.

157
00:12:38.320 --> 00:12:44.610
And so once it's off the DOM,
then it will not basically be evaluated.

158
00:12:44.610 --> 00:12:47.780
Then once it's attached back to the DOM,
then those bindings are kind of

159
00:12:47.780 --> 00:12:50.250
reinitialized and
it will try to evaluate it.

160
00:12:50.250 --> 00:12:53.420
But if the condition is that
this thing has to exist for

161
00:12:53.420 --> 00:12:56.800
it to show up,
then you saw that that safe navigation

162
00:12:56.800 --> 00:12:59.360
operator became unnecessary.
&gt;&gt; Speaker 2: Could

163
00:12:59.360 --> 00:13:02.939
you use it all the time?
&gt;&gt; Lukas Ruebbelke: What do you mean?

164
00:13:02.939 --> 00:13:03.928
&gt;&gt; Speaker 2: The safe operator,

165
00:13:03.928 --> 00:13:06.860
if you just-
&gt;&gt; Lukas Ruebbelke: You could, I mean, so

166
00:13:06.860 --> 00:13:10.300
it's certainly not going
to hurt anything to use it.

167
00:13:10.300 --> 00:13:13.960
But you have to be careful cuz it's almost
the equivalent of wrapping your entire

168
00:13:13.960 --> 00:13:17.370
application like try-catch.

169
00:13:17.370 --> 00:13:19.630
So I think that

170
00:13:19.630 --> 00:13:24.460
you wanna be careful not to preemptively
optimize for all the things.

171
00:13:26.920 --> 00:13:31.828
I mean even to a point of generally
in most cases where that's come up,

172
00:13:31.828 --> 00:13:36.070
I've actually found a way to
basically mitigate the need for

173
00:13:36.070 --> 00:13:38.651
safe navigation operator further up

174
00:13:38.651 --> 00:13:45.961
the stream.
&gt;&gt; Lukas Ruebbelke: Any

175
00:13:45.961 --> 00:13:52.646
other questions?
&gt;&gt; Lukas Ruebbelke: So

176
00:13:52.646 --> 00:13:55.080
if we were gonna go back and
rebuild this feature.

177
00:13:55.080 --> 00:13:59.159
So I just wanna do a real quick
recap before I go any further is

178
00:14:00.210 --> 00:14:03.200
we spent a lot of time today
talking about features.

179
00:14:03.200 --> 00:14:08.220
And really when features,
when we talk about that is

180
00:14:09.330 --> 00:14:14.070
the component, then a component
is divided into two main parts.

181
00:14:15.130 --> 00:14:18.629
Your component class and
your component template.

182
00:14:20.160 --> 00:14:25.920
And so the idea is that you expose
properties and methods on the class.

183
00:14:25.920 --> 00:14:29.070
That can be consumed by your template, so

184
00:14:29.070 --> 00:14:32.310
that you can show meaningful
information to the user.

185
00:14:32.310 --> 00:14:37.980
And as well as we use binding, so
that when a user does something,

186
00:14:37.980 --> 00:14:43.920
that we can then capture that event and
pass it back to the component class.

187
00:14:45.580 --> 00:14:52.210
And so if we were going to do yet
another feature from scratch.

188
00:14:54.240 --> 00:14:58.758
Make something up totally off the top of
our heads, what do you think would be

189
00:14:58.758 --> 00:15:03.063
the most challenging part to do that
if we were gonna recreate the last two

190
00:15:03.063 --> 00:15:08.059
challenges?
&gt;&gt; Lukas Ruebbelke: All right,

191
00:15:08.059 --> 00:15:11.630
I'm curious just where is,
what is confusing?

192
00:15:11.630 --> 00:15:12.620
What's kind of sticky?

193
00:15:14.290 --> 00:15:21.090
What are the ugly parts?
&gt;&gt; Lukas Ruebbelke: Are we comfortable

194
00:15:21.090 --> 00:15:29.567
with kind of classes, ESS classes?
&gt;&gt; Lukas Ruebbelke: Don't be shy,

195
00:15:29.567 --> 00:15:31.020
I see you looking around.

196
00:15:31.020 --> 00:15:31.960
How about you?

197
00:15:31.960 --> 00:15:34.550
If you're ever gonna recreate.
&gt;&gt; Speaker 4: Well honestly,

198
00:15:34.550 --> 00:15:38.290
I don't think I can give
a valid response cuz I'm

199
00:15:38.290 --> 00:15:41.850
just fundamentally I've got a lot
of issues I need to review.

200
00:15:41.850 --> 00:15:44.468
So I honestly don't know if I can give
a valid response to that question.

201
00:15:44.468 --> 00:15:45.591
&gt;&gt; Lukas Ruebbelke: Okay.

202
00:15:45.591 --> 00:15:47.206
&gt;&gt; Speaker 4: Unfortunately.

203
00:15:50.637 --> 00:15:52.307
&gt;&gt; Lukas Ruebbelke: Anybody else would

204
00:15:52.307 --> 00:15:58.880
like to just start the conversation?
&gt;&gt; Lukas Ruebbelke: If

205
00:15:58.880 --> 00:16:04.991
we were gonna redo this from scratch, what
would be the most confusing part of this?

206
00:16:04.991 --> 00:16:06.171
Like in your heart, when you're like.

207
00:16:06.171 --> 00:16:09.020
Let's be systematic,
let's do a thought experiment real quick.

208
00:16:09.020 --> 00:16:10.880
If your boss was like, I need you,

209
00:16:10.880 --> 00:16:13.720
because you went to this
Angular 2 class for a day.

210
00:16:13.720 --> 00:16:15.610
I need you to create an Angular component.

211
00:16:16.820 --> 00:16:18.270
Like you went to the training,

212
00:16:18.270 --> 00:16:22.800
I expect a return on my investment.
&gt;&gt; Speaker 5: Tied into service,

213
00:16:24.560 --> 00:16:25.550
go ahead.
&gt;&gt; Lukas Ruebbelke: What's that?

214
00:16:25.550 --> 00:16:26.740
&gt;&gt; Speaker 5: By from scratch

215
00:16:26.740 --> 00:16:31.240
do you mean without Angular CLI?
&gt;&gt; Lukas Ruebbelke: I'm not that cruel and

216
00:16:31.240 --> 00:16:34.316
I hope your boss isn't either.
&gt;&gt; Speaker 5: [LAUGH]

217
00:16:34.316 --> 00:16:34.986
&gt;&gt; Lukas Ruebbelke: So again Angular CLI

218
00:16:34.986 --> 00:16:37.393
so everything that I've is done by hand,
I'm only using the CLI to set up

219
00:16:37.393 --> 00:16:39.575
the project.
&gt;&gt; Speaker 6: I think for me, doing

220
00:16:39.575 --> 00:16:45.448
the gigantic picture and then narrowing
down was kind of overwhelming and

221
00:16:45.448 --> 00:16:50.562
I understand the kind of help that
that can provide some people,

222
00:16:50.562 --> 00:16:55.580
but for me then I'm trying to
figure out where I am in comparison

223
00:16:55.580 --> 00:17:00.195
to the gigantic puzzle that you shown me.
&gt;&gt; Lukas Ruebbelke: Yeah.

224
00:17:00.195 --> 00:17:00.990
&gt;&gt; Speaker 6: Whereas kind

225
00:17:00.990 --> 00:17:05.537
of starting small with a component and
then working up and then as a review,

226
00:17:05.537 --> 00:17:07.720
going up [INAUDIBLE] all the pieces.

227
00:17:07.720 --> 00:17:08.329
That's at least,

228
00:17:08.329 --> 00:17:11.390
personally how it could help me.
&gt;&gt; Lukas Ruebbelke: So I think that's

229
00:17:11.390 --> 00:17:15.310
completely valid and I struggled with
that, like do we start small and go big or

230
00:17:15.310 --> 00:17:19.790
do we go kind of here's the big picture
and then from there, start small?

231
00:17:19.790 --> 00:17:23.880
So the upside to that is, and I don't
think there is a right or wrong answer.

232
00:17:23.880 --> 00:17:25.150
I think people learn differently.

233
00:17:25.150 --> 00:17:29.680
Is that we are now on
the small to big cycle.

234
00:17:29.680 --> 00:17:31.670
We've covered the big stuff.

235
00:17:31.670 --> 00:17:33.770
That first module was a beast.

236
00:17:33.770 --> 00:17:39.080
But now what we're doing is simply,
we're going to iterate this.

237
00:17:39.080 --> 00:17:43.180
And so even to the point is if
we have to do another feature,

238
00:17:43.180 --> 00:17:46.680
like I really wanna make sure that we
understand how to write a component.

239
00:17:48.570 --> 00:17:50.570
So you actually look like
you had something to say.

240
00:17:50.570 --> 00:17:52.380
&gt;&gt; Speaker 6: Yeah tying the service to

241
00:17:52.380 --> 00:17:54.250
the component.
&gt;&gt; Lukas Ruebbelke: Okay.

242
00:17:54.250 --> 00:17:56.920
&gt;&gt; Speaker 6: That's where I lost

243
00:17:56.920 --> 00:17:58.475
the connection.
&gt;&gt; Lukas Ruebbelke: Tying

244
00:17:58.475 --> 00:18:00.810
a service into the component okay.

245
00:18:02.140 --> 00:18:07.980
Well as it happens,
the very next module is services but

246
00:18:07.980 --> 00:18:09.460
I don't wanna rush just yet.

247
00:18:10.520 --> 00:18:16.044
Like I'm really trying to
get a read of everyone and

248
00:18:16.044 --> 00:18:24.705
where they kind of are.
&gt;&gt; Lukas Ruebbelke: So

249
00:18:24.705 --> 00:18:28.500
the question is,
does the CLI come with some CSS framework?

250
00:18:28.500 --> 00:18:33.400
So it doesn't generate something
with a CSS framework, but

251
00:18:33.400 --> 00:18:35.170
it does come with preprocessor support.

252
00:18:36.420 --> 00:18:40.640
But, it's just as easy to hook something
in if you want Bootstrap, or Foundation,

253
00:18:41.740 --> 00:18:46.080
or material, then you can just
NPM install that, and hook it in.

254
00:18:46.080 --> 00:18:50.980
So it doesn't actually ship with really,
anything specific other than Angular.

255
00:18:52.330 --> 00:18:56.200
So I'm gonna try to attempt to
answer Judith's question, or

256
00:18:56.200 --> 00:19:01.730
rather to make sure that I
hopefully even understand it

257
00:19:01.730 --> 00:19:06.600
is that you can know what you want on
your page but not know the best place to

258
00:19:06.600 --> 00:19:12.020
start in terms of guiding what
you do as you write your code.

259
00:19:12.020 --> 00:19:14.650
So I think the idea is I want to.
&gt;&gt; Speaker 5: Is that

260
00:19:14.650 --> 00:19:19.580
breaking down the problem into parts?
&gt;&gt; Lukas Ruebbelke: Yes and so to that.

261
00:19:19.580 --> 00:19:24.121
I mean, so that is ultimately,
I mean that's what we do as

262
00:19:24.121 --> 00:19:28.773
programmers is we've got this problem,
and what do we do?

263
00:19:28.773 --> 00:19:32.763
And so this is for me why, one of the
reasons why I went big picture first is

264
00:19:32.763 --> 00:19:36.308
that human beings, like we are wired for
pattern recognition.

265
00:19:36.308 --> 00:19:39.904
So this is just general
programming advice.

266
00:19:39.904 --> 00:19:44.270
I think for senior engineers,
I think this will resonate with them.

267
00:19:44.270 --> 00:19:48.650
For new engineers eventually, I think
this will not become theoretical but

268
00:19:48.650 --> 00:19:53.600
something that you just
kind of experience,

269
00:19:53.600 --> 00:19:57.009
that we are wired for pattern recognition.

270
00:19:58.130 --> 00:20:02.780
And so when you start to work on something
new, it's confusing, it's foggy,

271
00:20:02.780 --> 00:20:05.330
it's fuzzy,
like you don't know where the pieces are.

272
00:20:05.330 --> 00:20:09.840
But then, as you start to build things,
patterns start to emerge and

273
00:20:09.840 --> 00:20:13.480
you start to identify
kind of these patterns.

274
00:20:13.480 --> 00:20:18.640
And so for me, for instance,
when I think of Angular 2

275
00:20:18.640 --> 00:20:23.220
I think of really, everything is a class,

276
00:20:24.640 --> 00:20:29.210
and I think of just you
have an ES6 class and

277
00:20:29.210 --> 00:20:33.880
you have some metadata and pretty much
everything is a variation of that.

278
00:20:33.880 --> 00:20:41.150
So if I were going to summarize
Angular 2 in a few sentences is,

279
00:20:41.150 --> 00:20:46.020
understand how in the ES6 class works,
understand how to wrap it in metadata, and

280
00:20:46.020 --> 00:20:51.300
once you understand binding,
you have a component.

281
00:20:51.300 --> 00:20:55.570
And from there, so we're talking about
three things, from there, it's a matter of

282
00:20:55.570 --> 00:21:01.170
learning how to stack these components
together to do larger things.

283
00:21:01.170 --> 00:21:06.240
But really, at the bottom of
the pattern is just a component.

284
00:21:06.240 --> 00:21:10.530
In fact,
I'll even show you a slide from tomorrow.

285
00:21:12.810 --> 00:21:13.780
Or rather, ha!

286
00:21:13.780 --> 00:21:14.930
You know what?

287
00:21:14.930 --> 00:21:16.340
It's not tomorrow.

288
00:21:16.340 --> 00:21:17.969
So, let me actually just show
you this slide right here.

289
00:21:19.520 --> 00:21:24.307
So as we get into services,
when I talk about services and

290
00:21:24.307 --> 00:21:28.699
why we've waited until
after components is because

291
00:21:28.699 --> 00:21:32.519
a service is just a class
with some metadata.

292
00:21:32.519 --> 00:21:34.123
So what is a directive?

293
00:21:34.123 --> 00:21:36.861
Cuz we saw that, what is a directive?

294
00:21:36.861 --> 00:21:40.885
Well, it's just a class
with some metadata.

295
00:21:41.970 --> 00:21:44.740
If we needed for instance a pipe,
that's just another word for a filter.

296
00:21:44.740 --> 00:21:48.410
Well, it's just a class
with some metadata.

297
00:21:48.410 --> 00:21:54.050
And so you notice here that the pattern
for all of these are exactly the same.

298
00:21:54.050 --> 00:21:59.079
And so I think this is the one thing
that Angular 2 got very, very right.

299
00:22:00.240 --> 00:22:04.150
Is that when you are building something
and you understand fundamentally how

300
00:22:04.150 --> 00:22:09.110
a class works, from there,
it's a matter of augmenting the class or

301
00:22:09.110 --> 00:22:13.900
connecting the class into
Angular via metadata.

302
00:22:13.900 --> 00:22:19.370
And so when you have something on
your page or you have some idea,

303
00:22:19.370 --> 00:22:24.080
some functionality that you want to build,
the trick is to first and

304
00:22:24.080 --> 00:22:28.770
foremost break the problem down into small
enough chunks to start to build something.

305
00:22:30.050 --> 00:22:34.460
And try to establish
really the patterns or

306
00:22:34.460 --> 00:22:37.150
apply the patterns that
we know to be true.

307
00:22:37.150 --> 00:22:42.660
So for instance, if somebody gave me
a layout and said can you build this?

308
00:22:42.660 --> 00:22:46.490
Well the first thing that I may do, and
this is actually a really good practice

309
00:22:46.490 --> 00:22:52.320
in terms of component composition, is I'll
take out a marker and I'll say okay, a lot

310
00:22:52.320 --> 00:22:55.890
of times it's going to look like a master
detail list, or some variation of it.

311
00:22:55.890 --> 00:22:58.080
It's like okay I got a master
collection of something.

312
00:22:58.080 --> 00:23:02.944
Well that's gonna be a list
component with various,

313
00:23:02.944 --> 00:23:06.230
so let's say it's items again.

314
00:23:06.230 --> 00:23:09.270
So speaking in generic terms is,
I have a list of items.

315
00:23:09.270 --> 00:23:11.570
So I just take a marker.

316
00:23:11.570 --> 00:23:12.840
And I would outline that.

317
00:23:12.840 --> 00:23:14.870
I'll say okay, I have an items' list.

318
00:23:14.870 --> 00:23:17.602
And within that,
I have an items' component.

319
00:23:17.602 --> 00:23:20.940
And then, it's like, okay,
now I want to actually update or

320
00:23:20.940 --> 00:23:22.790
I wanna modify this in some way.

321
00:23:22.790 --> 00:23:24.870
Well, then I'd take another marker or
I'd mark and

322
00:23:24.870 --> 00:23:30.070
I'd draw a box around that and say okay,
this is details pertaining to this item.

323
00:23:30.070 --> 00:23:32.630
And I'd say okay,
now this is an item details component.

324
00:23:33.630 --> 00:23:37.930
And from there,
you might have a top level items component

325
00:23:37.930 --> 00:23:41.630
that controls everything or
is the container for that.

326
00:23:41.630 --> 00:23:45.640
But you start to break things
into tiny pieces into,

327
00:23:45.640 --> 00:23:48.600
and start to see it as just patterns.

328
00:23:48.600 --> 00:23:54.530
Again, so computers, really at the end
of the day it's one's and zero's.

329
00:23:54.530 --> 00:23:57.630
It's just really a lot of
switches turning on or off.

330
00:23:57.630 --> 00:24:00.160
And we don't really think about
that because it's so low level.

331
00:24:00.160 --> 00:24:05.630
But, that's what computers are, just
a bunch of switches flipping on or off.

332
00:24:05.630 --> 00:24:08.780
And so, I think of an application
that when you stop and

333
00:24:08.780 --> 00:24:10.650
you'll look at it at a high level,

334
00:24:10.650 --> 00:24:15.360
it's really a composition of functionality
that we're really quite familiar with.

335
00:24:15.360 --> 00:24:18.220
Already and
we've already done in some other context.

336
00:24:18.220 --> 00:24:21.960
And so does this kind of make sense that,

337
00:24:21.960 --> 00:24:24.770
and we'll talk about this more when
we get into component composition.

338
00:24:26.080 --> 00:24:31.180
But, I think this is probably one of
the biggest or most fundamental shapes

339
00:24:32.320 --> 00:24:37.930
that we use when wealing with angular 2,

340
00:24:37.930 --> 00:24:40.890
class metadata.

341
00:24:40.890 --> 00:24:44.290
And from there it's properties and
methods.

342
00:24:45.870 --> 00:24:48.600
So the question is, now well what
do I want this component to do?

343
00:24:48.600 --> 00:24:50.357
What state does it need to have?

344
00:24:50.357 --> 00:24:52.548
Well that I'm going to assign a property
to it, to keep track of that.

345
00:24:52.548 --> 00:24:54.055
Will I need to keep track
of a selected widget?

346
00:24:54.055 --> 00:24:57.040
Or when we select a widget,
do I need to keep track of that?

347
00:24:57.040 --> 00:24:58.510
I'll create a property for that.

348
00:24:58.510 --> 00:25:00.370
But I need to be able to select a widget?

349
00:25:00.370 --> 00:25:01.860
Well I'll create a method for that.

350
00:25:03.170 --> 00:25:05.330
And so it's really than with a class.

351
00:25:05.330 --> 00:25:06.660
Well it's actually a container for

352
00:25:06.660 --> 00:25:10.923
properties and methods.
&gt;&gt; Lukas Ruebbelke: And

353
00:25:10.923 --> 00:25:12.087
then as we get into services,

354
00:25:12.087 --> 00:25:15.340
we'll see that we're actually gonna
take that collections component.

355
00:25:15.340 --> 00:25:19.330
And we're basically just going to
abstract it out into a service and

356
00:25:19.330 --> 00:25:23.968
you consume it that way, but
it's almost going to be identical.

357
00:25:26.567 --> 00:25:29.161
&gt;&gt; Speaker 7: [INAUDIBLE] questions after

358
00:25:29.161 --> 00:25:31.480
this?
&gt;&gt; Lukas Ruebbelke: Yes, good,

359
00:25:31.480 --> 00:25:35.548
let's talk.
&gt;&gt; Speaker 7: What about the house styles

360
00:25:35.548 --> 00:25:40.375
are applied across various components?
&gt;&gt; Lukas Ruebbelke: So what I recommend

361
00:25:40.375 --> 00:25:47.250
with this is, with anything, I start with
the concept of global, or local to global.

362
00:25:47.250 --> 00:25:52.623
So if I'm building out functionality
that is really component specific,

363
00:25:52.623 --> 00:25:53.739
I start there.

364
00:25:53.739 --> 00:25:57.429
And then, as there's a need for
it to become common or

365
00:25:57.429 --> 00:26:00.310
shared across maybe, two components.

366
00:26:00.310 --> 00:26:04.580
So let's say these two components
are within a same feature.

367
00:26:04.580 --> 00:26:10.090
So for instance item details, item list,
they need to share something.

368
00:26:10.090 --> 00:26:12.000
So then I'll basically extract that out.

369
00:26:12.000 --> 00:26:16.980
Just to the next level so that it's
available for everything underneath of it.

370
00:26:16.980 --> 00:26:21.270
But then let's say, the entire
application might need to use it.

371
00:26:21.270 --> 00:26:26.780
And so then, what I'll do is I'll abstract
it even further into a shared directory.

372
00:26:26.780 --> 00:26:31.611
And then from there, let's say,
multiple applications may need to use it.

373
00:26:31.611 --> 00:26:37.100
Then, I'll break it out into
either its own module first.

374
00:26:37.100 --> 00:26:41.600
But then eventually its own standalone
project that you then consume via

375
00:26:41.600 --> 00:26:42.270
like NPM.

376
00:26:42.270 --> 00:26:45.320
So for styles, this is the same thing.

377
00:26:45.320 --> 00:26:51.160
Is if you need to share styles
across multiple components

378
00:26:51.160 --> 00:26:57.620
where is the nearest parent that
all of these components share?

379
00:26:57.620 --> 00:27:00.520
And that's where it should go, I believe.

380
00:27:00.520 --> 00:27:02.310
I don't think it needs to go any higher,

381
00:27:02.310 --> 00:27:07.020
I think you need to constrain essentially
the scope of where that reaches.

382
00:27:07.020 --> 00:27:10.970
But when that needs to go higher,
then you simply promote it.

383
00:27:10.970 --> 00:27:14.770
So I believe of functionality or
access through promotion.

384
00:27:14.770 --> 00:27:22.330
Start local and then promote.
&gt;&gt; Lukas Ruebbelke: Okay, next question.

385
00:27:24.920 --> 00:27:29.983
Ever need to use input and output
decorators when using data bindings?

386
00:27:29.983 --> 00:27:33.128
Yes, so we will get into that
first thing in the morning.

387
00:27:33.128 --> 00:27:37.889
But essentially, we are creating
our own property bindings and

388
00:27:37.889 --> 00:27:41.470
event bindings using input and output.

389
00:27:41.470 --> 00:27:45.870
And this is on my top three list
of favorite Angular 2 things.

390
00:27:48.940 --> 00:27:53.990
Kaitlin asked, what order would
you recommend learning TS and ES6.

391
00:27:53.990 --> 00:27:59.260
So, TypeScript is really just
a super set of ES6 in so

392
00:27:59.260 --> 00:28:05.430
much that if you understand ES6,
then you understand most of TypeScript.

393
00:28:05.430 --> 00:28:11.495
There's a few things such as constructor
assignment, field assignment, interfaces.

394
00:28:11.495 --> 00:28:15.938
A couple little kind of sugary
things that they're trying to

395
00:28:15.938 --> 00:28:18.890
actually move into the spec.

396
00:28:18.890 --> 00:28:21.870
But I think fundamentally,
the biggest overlap

397
00:28:21.870 --> 00:28:25.590
is on ES6 with TypeScript just
being an extension of that.

398
00:28:25.590 --> 00:28:28.233
Yes.
&gt;&gt; Speaker 2: I just posted a LinkedIn

399
00:28:28.233 --> 00:28:34.040
chat for the pre release of
Cal Simpson's ES6 The Right Parts Course.

400
00:28:35.370 --> 00:28:39.460
So that is not out as a course but
you can download

401
00:28:39.460 --> 00:28:44.068
the pre release there.
&gt;&gt; Speaker 2: And

402
00:28:44.068 --> 00:28:49.530
obviously Cal Simpson is the champion.
&gt;&gt; Lukas Ruebbelke: He is the champion so

403
00:28:50.570 --> 00:28:53.100
his books you don't know JS
if you haven't read them.

404
00:28:53.100 --> 00:28:54.230
&gt;&gt; Speaker 2: Yeah they're free and

405
00:28:54.230 --> 00:28:57.210
online and.
&gt;&gt; Lukas Ruebbelke: Even though

406
00:28:57.210 --> 00:29:00.350
as he's graciously made them available for
free.

407
00:29:00.350 --> 00:29:03.660
I just went on a buying spree and
bought all of them in print.

408
00:29:03.660 --> 00:29:09.030
I think somebody who puts good work out,
for me, I personally love to support them.

409
00:29:09.030 --> 00:29:12.620
So another one is Victor
actually wrote the router book.

410
00:29:12.620 --> 00:29:16.710
So he wrote the router, and then he wrote
essentially about 120 page guide on it,

411
00:29:16.710 --> 00:29:21.180
and it's excellent.
&gt;&gt; Speaker 2: And also,

412
00:29:21.180 --> 00:29:26.676
Wes Boss has a ES6.
&gt;&gt; Lukas Ruebbelke: Yes.

413
00:29:26.676 --> 00:29:27.520
&gt;&gt; Speaker 2: I don't know, I haven't seen

414
00:29:27.520 --> 00:29:29.654
it, but I've heard good things.
&gt;&gt; Lukas Ruebbelke: Yep, so

415
00:29:29.654 --> 00:29:35.136
Wes Boss has a ES6 course.

416
00:29:35.136 --> 00:29:42.675
Actually, I think it's exploring ES6,
is I think I paid 25 bucks for it.

417
00:29:42.675 --> 00:29:45.720
And he is [INAUDIBLE] bible.

418
00:29:45.720 --> 00:29:49.420
Just a really good resource as well.

419
00:29:49.420 --> 00:29:51.140
Say that again please.

420
00:29:51.140 --> 00:29:53.760
I believe it's Exploring ES6 by

421
00:29:53.760 --> 00:29:57.154
Axel Rauschmayer.
&gt;&gt; Speaker 2: You

422
00:29:57.154 --> 00:30:00.387
have that book?
&gt;&gt; Lukas Ruebbelke: It's really quite

423
00:30:00.387 --> 00:30:02.887
good.
&gt;&gt; Speaker 2: Like Kyle Simpson's,

424
00:30:02.887 --> 00:30:05.640
You Don't Know JS Books on ES6.

425
00:30:05.640 --> 00:30:09.140
I feel like he really,
really dives in deep.

426
00:30:09.140 --> 00:30:10.800
I really like his style,

427
00:30:10.800 --> 00:30:12.680
his writing style.
&gt;&gt; Lukas Ruebbelke: So

428
00:30:12.680 --> 00:30:17.660
to answer the question real quick, Victor
Savkin is the author of The Router Book,

429
00:30:17.660 --> 00:30:19.370
so he's on the Angular Core.

430
00:30:19.370 --> 00:30:23.320
He wrote essentially The Router.

431
00:30:23.320 --> 00:30:26.747
At one point, actually the previous
version of this workshop,

432
00:30:26.747 --> 00:30:29.280
I didn't even wanna talk about the router.

433
00:30:29.280 --> 00:30:32.559
Because it was in such a bad shape.
&gt;&gt; Speaker 2: Yeah, you guys were

434
00:30:32.559 --> 00:30:34.779
complaining about it, I remember that.
&gt;&gt; Lukas Ruebbelke: I mean that was one of

435
00:30:34.779 --> 00:30:37.190
the, I think the most frustrating things.

436
00:30:37.190 --> 00:30:38.972
The director came in and
they did a really good job.

437
00:30:38.972 --> 00:30:42.452
So was it just [INAUDIBLE] but
a lot of the high level design decisions,

438
00:30:42.452 --> 00:30:44.110
I think he was involved with.

439
00:30:44.110 --> 00:30:46.430
But he wrote a router book
that's really quite good.

440
00:30:47.500 --> 00:30:50.100
But I cannot say enough
good things about Kyle.

441
00:30:50.100 --> 00:30:54.670
And so his writing style actually
really resonates with me as well.

442
00:30:54.670 --> 00:30:59.820
So, I don't think Martin Fowler's ever
gonna watch one of my workshops so

443
00:30:59.820 --> 00:31:01.410
I'll just say this.

444
00:31:01.410 --> 00:31:04.100
Let me precursor this with Martin Fowler
if I ever meet you in person,

445
00:31:04.100 --> 00:31:05.830
I love you to pieces.

446
00:31:05.830 --> 00:31:09.490
But his material is a little hard for
me to get through.

447
00:31:09.490 --> 00:31:14.327
I usually get about six pages in and
it's [SOUND].

448
00:31:14.327 --> 00:31:19.310
So, Kyle on the other hand is just,
I can read it, and read it and read it.

449
00:31:19.310 --> 00:31:20.290
And I do and I have.

450
00:31:22.710 --> 00:31:23.880
So any more questions?

451
00:31:23.880 --> 00:31:27.912
This is
&gt;&gt; Lukas Ruebbelke: I feel like we're

452
00:31:27.912 --> 00:31:29.430
making progress here.

453
00:31:29.430 --> 00:31:33.762
Look I really want everybody
to be able to right an angular

454
00:31:33.762 --> 00:31:36.660
component by the end of the day.

455
00:31:36.660 --> 00:31:39.810
And we can circle the wagons until

456
00:31:39.810 --> 00:31:42.600
I've got a good feeling about this.
&gt;&gt; Speaker 8: Do we have a good source on

457
00:31:42.600 --> 00:31:48.761
teaching or learning TypeScript itself?
&gt;&gt; Speaker 2: I

458
00:31:48.761 --> 00:31:51.800
think there's a good one on sight.
&gt;&gt; Lukas Ruebbelke: So

459
00:31:51.800 --> 00:31:53.970
there's one on sight.

460
00:31:53.970 --> 00:31:56.503
So, I haven't mentioned this yet.

461
00:31:56.503 --> 00:31:59.937
But I am actually the co
founder of Ultimate Angular.

462
00:31:59.937 --> 00:32:02.660
And, so I started this with Todd Motto.

463
00:32:02.660 --> 00:32:05.580
And we are actually going

464
00:32:06.780 --> 00:32:11.080
to launch a TypeScript course from one of
the guys who actually works on TSLint.

465
00:32:11.080 --> 00:32:14.139
His name is James and,
so that'll be I think.

466
00:32:15.820 --> 00:32:18.930
He's about as close to the core as you can
get, but he really knows TypeScript, so

467
00:32:18.930 --> 00:32:19.900
keep your eyes open for

468
00:32:19.900 --> 00:32:23.000
that on Ultimate Angular,
that'll be a really good resource as well.

469
00:32:25.630 --> 00:32:30.510
There's a few other free resources, but
I think, one of the really with ES 6, and

470
00:32:30.510 --> 00:32:36.531
typescript you just get good by doing.
&gt;&gt; Speaker 2: Yeah, I think, it's really

471
00:32:36.531 --> 00:32:39.000
important to understand JavaScript itself.
&gt;&gt; Lukas Ruebbelke: Yes.

472
00:32:39.000 --> 00:32:40.090
&gt;&gt; Speaker 2: Really deeply and

473
00:32:40.090 --> 00:32:42.330
ES6 really deeply, and

474
00:32:42.330 --> 00:32:47.620
then TypeScript makes a lot more sense.
&gt;&gt; Lukas Ruebbelke: Yeah,

475
00:32:47.620 --> 00:32:51.080
cuz unfortunately as much as I love ES6,
I have to go back and do ES5.

476
00:32:52.200 --> 00:32:54.370
And as much as I love fat arrows,

477
00:32:55.530 --> 00:33:00.830
occasionally on ES5 you have to actually
spell out into the function as a closure.

478
00:33:00.830 --> 00:33:02.790
And then also lexical scope is broken, and

479
00:33:02.790 --> 00:33:06.540
you're like, great, now I've got to
create a top level reference to this, so.

480
00:33:08.290 --> 00:33:12.814
Var that equals this or
whatever, and, so ES5,

481
00:33:12.814 --> 00:33:15.936
just is a thing we still have to do,

482
00:33:15.936 --> 00:33:22.749
unfortunately.
&gt;&gt; Lukas Ruebbelke: So,

483
00:33:22.749 --> 00:33:25.521
speaking of linting,
is TSLint the way to go or

484
00:33:25.521 --> 00:33:31.591
is there a good extension of VSLint?
&gt;&gt; Lukas Ruebbelke: So,

485
00:33:31.591 --> 00:33:36.846
I think, TSLint is, I think,
it's probably as good as any.

486
00:33:36.846 --> 00:33:39.755
I don't have a strong opinion on that.

487
00:33:39.755 --> 00:33:43.826
I think, especially on a team,
you should have lint,

488
00:33:43.826 --> 00:33:47.650
some linting into your bill process.

489
00:33:47.650 --> 00:33:53.050
But I think, it really matters what
philosophically resonates with you.

490
00:33:54.250 --> 00:33:57.690
So, actually I don't
even wanna get into that.

491
00:33:57.690 --> 00:34:02.710
There is a certain linter out
there that is controlled by a very

492
00:34:02.710 --> 00:34:03.810
particular individual.

493
00:34:04.830 --> 00:34:12.070
And that's why JSHint exists, because it's
a little bit more, it's not so dogmatic.

494
00:34:12.070 --> 00:34:15.136
So, I think, that find something that
philosophically you can kind of agree

495
00:34:15.136 --> 00:34:20.697
with, and then stick with it.
&gt;&gt; Lukas Ruebbelke: So,

496
00:34:20.697 --> 00:34:25.200
the question is does TSLint
fix errors like ESLint can?

497
00:34:25.200 --> 00:34:26.350
I don't know about that.

498
00:34:28.800 --> 00:34:32.240
And, Martin, can you give a quick
overview of directives again,

499
00:34:32.240 --> 00:34:34.030
it's a little unclear.

500
00:34:34.030 --> 00:34:34.530
Sure.

501
00:34:35.600 --> 00:34:41.612
So, let me just hop to the slide.
&gt;&gt; Lukas Ruebbelke: It's

502
00:34:41.612 --> 00:34:43.244
up here somewhere.

503
00:34:51.258 --> 00:34:52.394
&gt;&gt; Lukas Ruebbelke: Okay, so

504
00:34:52.394 --> 00:34:54.951
this is a component.

505
00:34:54.951 --> 00:35:00.920
Class, template, we have metadata.
&gt;&gt; Lukas Ruebbelke: Moving

506
00:35:00.920 --> 00:35:06.774
down.
&gt;&gt; Lukas Ruebbelke: So,

507
00:35:06.774 --> 00:35:12.040
a directive is essentially
a component without a template.

508
00:35:14.410 --> 00:35:15.820
And, so this is what this looks like.

509
00:35:15.820 --> 00:35:19.670
So, again, similar shape, notice class.

510
00:35:21.260 --> 00:35:25.110
We're importing stuff,
metadata, so CID, we're there.

511
00:35:25.110 --> 00:35:28.250
So, the cider rule still applies for this.

512
00:35:28.250 --> 00:35:33.100
But the difference is if you
look in the directive metadata,

513
00:35:33.100 --> 00:35:34.720
we are not attaching a template to it.

514
00:35:36.850 --> 00:35:39.950
And, so for instance, think of NGF.

515
00:35:42.200 --> 00:35:47.930
NGF is a good example of a directive,
because it doesn't have a template.

516
00:35:47.930 --> 00:35:51.100
There's no template attached to NGF.

517
00:35:51.100 --> 00:35:56.037
It's simply there to modify
an existing element.

518
00:35:56.037 --> 00:35:58.740
NG4 is the same way.

519
00:35:58.740 --> 00:36:00.920
So, we have NG4, we attach it.

520
00:36:00.920 --> 00:36:05.760
So, it's not even, another thing
is that components will always be,

521
00:36:05.760 --> 00:36:07.940
essentially, element selectors.

522
00:36:07.940 --> 00:36:11.160
Whereas a directive will
be an actual attribute.

523
00:36:13.020 --> 00:36:16.620
And so, that's the other thing,
is that components are elements.

524
00:36:17.820 --> 00:36:22.785
Directives are essentially attributes that
modify existing elements with additional

525
00:36:22.785 --> 00:36:27.132
behavior.
&gt;&gt; Lukas Ruebbelke: And so,

526
00:36:27.132 --> 00:36:31.538
how this actually came to be is in
Angular1, people realized there

527
00:36:31.538 --> 00:36:35.659
were really two fundamentally
different type of directives.

528
00:36:35.659 --> 00:36:40.544
So, in the land before time really
all you had was directives.

529
00:36:40.544 --> 00:36:43.760
And people realized, okay,
we have directives that can serve

530
00:36:43.760 --> 00:36:46.441
essentially as kind of
the standalone components.

531
00:36:46.441 --> 00:36:51.387
Or these self contained elements, such as
like a calendar, date picker, whatever,

532
00:36:51.387 --> 00:36:54.740
that you can then pick this up and
move it around.

533
00:36:54.740 --> 00:37:00.090
And so, people use directives to
essentially create reusable components.

534
00:37:00.090 --> 00:37:06.310
Then, on the other side, they had what
was called really decorator directives.

535
00:37:06.310 --> 00:37:10.460
And what that would do is essentially you
would just attach it to something, and

536
00:37:10.460 --> 00:37:13.040
it would just augment
the existing behavior.

537
00:37:13.040 --> 00:37:15.832
So, essentially, you're taking
an element and you're decorating it.

538
00:37:17.280 --> 00:37:20.340
So, with then,
kind of those two uses in mind,

539
00:37:21.490 --> 00:37:25.600
the component directive, well,
that became a component.

540
00:37:25.600 --> 00:37:32.710
And the decorator directive, that became
just, really, the directive in Angular 2.

541
00:37:32.710 --> 00:37:35.712
It's that it's simply there to augment, or

542
00:37:35.712 --> 00:37:40.680
enhance an existing element.
&gt;&gt; Lukas Ruebbelke: Does that make sense?

543
00:37:40.680 --> 00:37:41.720
I'm seeing some head shaking.

544
00:37:41.720 --> 00:37:43.770
Yes? Yes? Yes?
&gt;&gt; Speaker 9: Quick question on that.

545
00:37:44.880 --> 00:37:49.570
The selectors using the square brackets,
is that optional,

546
00:37:51.010 --> 00:37:52.700
or does that mean that it is an attribute?

547
00:37:54.250 --> 00:37:56.450
Could I have anything in there,
in the selector and

548
00:37:56.450 --> 00:37:58.780
then, include that as an attribute?

549
00:37:58.780 --> 00:38:01.630
An element.
&gt;&gt; Lukas Ruebbelke: So, in this case, so

550
00:38:01.630 --> 00:38:03.830
let's actually just pull
this up real quick.

551
00:38:03.830 --> 00:38:05.528
I just don't wanna misspeak here.

552
00:38:12.115 --> 00:38:14.072
&gt;&gt; Lukas Ruebbelke: Let's go to, again,

553
00:38:14.072 --> 00:38:17.678
my favorite page on the entire Internet.

554
00:38:29.468 --> 00:38:30.810
&gt;&gt; Lukas Ruebbelke: So,
this actually, hold on.

555
00:38:32.880 --> 00:38:35.540
This may have got, I think,
I was being funny when I did this.

556
00:38:35.540 --> 00:38:41.101
This is actually.
&gt;&gt; Lukas Ruebbelke: So,

557
00:38:41.101 --> 00:38:43.180
this would be whatever
you wanted on there.

558
00:38:43.180 --> 00:38:49.490
But the selector would be, in this case,
I would actually do something like this.

559
00:38:51.470 --> 00:38:52.945
And so, you put it on there, and

560
00:38:52.945 --> 00:38:59.036
it causes it to blink.
&gt;&gt; Lukas Ruebbelke: So,

561
00:38:59.036 --> 00:39:04.197
I saw a question in here.
&gt;&gt; Lukas Ruebbelke: Angular

562
00:39:04.197 --> 00:39:08.688
is doing a lot of magic under the hood.
&gt;&gt; Lukas Ruebbelke: It may be good for

563
00:39:08.688 --> 00:39:10.863
a quick prototype, and small projects, but

564
00:39:10.863 --> 00:39:13.027
is it okay to use for
big long term projects?

565
00:39:13.027 --> 00:39:14.030
Guess we need to fix and

566
00:39:14.030 --> 00:39:17.810
support the changes that Angular CLI
may have under the hood.

567
00:39:17.810 --> 00:39:21.310
So, the question is,
it's good obviously for

568
00:39:21.310 --> 00:39:23.810
spinning up small projects,
getting up and running quickly.

569
00:39:23.810 --> 00:39:27.010
But is it appropriate for large projects?

570
00:39:27.010 --> 00:39:29.250
And to that, I say, absolutely.

571
00:39:29.250 --> 00:39:35.380
So, this is, the Angular CLI is
an official project of the Angular team.

572
00:39:35.380 --> 00:39:40.072
And in part, this was created,
so that internal teams within

573
00:39:40.072 --> 00:39:44.144
Google could support their
large Angular projects.

574
00:39:44.144 --> 00:39:46.260
And so, more importantly,

575
00:39:46.260 --> 00:39:51.286
is that the Angular CLI essentially
adheres to really all of the best

576
00:39:51.286 --> 00:39:57.040
practices that the angular team has kind
of said, this is how we want it to be.

577
00:39:57.040 --> 00:40:02.760
This is idiomatic Angular
to Angular CLI let it be.

578
00:40:04.000 --> 00:40:04.860
So, be it.

579
00:40:04.860 --> 00:40:06.060
Go, do this.

580
00:40:06.060 --> 00:40:11.102
So, the upside to that is that,
if something,

581
00:40:11.102 --> 00:40:15.020
or some new technology comes along.

582
00:40:15.020 --> 00:40:18.160
So, let's say like we got web workers,

583
00:40:18.160 --> 00:40:21.450
and let's say, we got holograph workers,
I'm making this up.

584
00:40:21.450 --> 00:40:25.150
But some new kind of thing comes
along that Angular wants to support.

585
00:40:25.150 --> 00:40:29.320
Well, because it's right there at the core
team, they can bake that into the CLI, and

586
00:40:29.320 --> 00:40:31.190
you can leverage that right away.

587
00:40:31.190 --> 00:40:35.400
As opposed to some starter projects where
somebody's 12 months ago they were using

588
00:40:35.400 --> 00:40:41.040
it, and then they had their opinions about
something, and then they've moved on.

589
00:40:41.040 --> 00:40:43.547
And they're doing some other framework,
or something like that, or

590
00:40:43.547 --> 00:40:44.743
they haven't even progressed.

591
00:40:44.743 --> 00:40:49.798
Cuz there's a lot of old 1.x,
nvc, starters out there

592
00:40:49.798 --> 00:40:54.970
that's just,
that's not how we write Angular 1 at all.

593
00:40:56.850 --> 00:41:01.574
And so, therefore, I think for me,
having something that's actually really

594
00:41:01.574 --> 00:41:04.325
close to the metal with
what Angular is doing,

595
00:41:04.325 --> 00:41:07.088
because the core team is
working on them both.

596
00:41:07.088 --> 00:41:12.148
I think to me, that's the biggest
endorsement that this thing is good for

597
00:41:12.148 --> 00:41:13.790
enterprise projects.

