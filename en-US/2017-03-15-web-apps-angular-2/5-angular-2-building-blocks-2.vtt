WEBVTT

1
00:00:00.340 --> 00:00:06.550
&gt;&gt; Lukas: And so, in between template and
class, because up until this point,

2
00:00:06.550 --> 00:00:11.210
if you have a class, there's nothing
particularly angular about it.

3
00:00:12.260 --> 00:00:14.380
And if you have a template,

4
00:00:14.380 --> 00:00:17.229
there's nothing technically
really angular about that.

5
00:00:18.810 --> 00:00:20.270
Because it's mostly standard space,

6
00:00:20.270 --> 00:00:23.230
there's some debate about
some of the syntax.

7
00:00:23.230 --> 00:00:30.270
But it's just going to render, and so the
question is, how do we make it angular?

8
00:00:30.270 --> 00:00:33.890
Well, we do that with Metadata.

9
00:00:33.890 --> 00:00:37.750
So we take a regular ESS class, and

10
00:00:37.750 --> 00:00:42.940
by using metadata, we are telling Angular
essentially how to process this class.

11
00:00:44.210 --> 00:00:48.490
And then what it does is it essentially
takes that class, it takes the template.

12
00:00:48.490 --> 00:00:51.530
And it kind of puts those together.

13
00:00:51.530 --> 00:00:55.630
And then when you hit a selector or
some route definition,

14
00:00:55.630 --> 00:00:59.670
then Angular notes like, hey this
template is class they go together.

15
00:00:59.670 --> 00:01:02.140
And let's initialize it as a component.

16
00:01:03.980 --> 00:01:07.920
So we attached metadata with
TypeScript using decorators.

17
00:01:07.920 --> 00:01:09.390
They're just functions.

18
00:01:09.390 --> 00:01:13.560
And so if we're gonna do like
a super advance Angular class,

19
00:01:13.560 --> 00:01:16.720
this is something that you can
actually write, I recommend sometime.

20
00:01:16.720 --> 00:01:18.870
Trying it out, it's pretty interesting.

21
00:01:18.870 --> 00:01:23.730
But decorators are just functions that
essentially would turn another function

22
00:01:23.730 --> 00:01:27.680
that Angular then knows how to,
it essentially will call and

23
00:01:27.680 --> 00:01:30.970
initialize that component or
that property.

24
00:01:30.970 --> 00:01:32.910
This is like eating.

25
00:01:32.910 --> 00:01:34.500
I love delicious food.

26
00:01:34.500 --> 00:01:39.060
I don't necessarily need to know how I'm
processing it at the molecular level.

27
00:01:39.060 --> 00:01:44.690
So you can just use decorators and
really not go too deep into the woods.

28
00:01:44.690 --> 00:01:49.500
But if you want to geek out, just know
that you can write custom metadata and

29
00:01:49.500 --> 00:01:51.060
it's pretty neat.

30
00:01:51.060 --> 00:01:55.780
The most common is the component
decorator, and this takes config options

31
00:01:55.780 --> 00:02:00.830
such as selector, templateURL,
styles, styleURL, animations, etc.

32
00:02:00.830 --> 00:02:04.790
So this is how we tell Angular, take this
class and do Angular things with it.

33
00:02:06.220 --> 00:02:11.188
So in this case, what you have to
have is obviously a ES6 class,

34
00:02:11.188 --> 00:02:14.601
a selector and a template or
a template URL.

35
00:02:16.940 --> 00:02:22.750
&gt;&gt; Lukas: And so those are kind of the
bare minimum requirements for a component.

36
00:02:22.750 --> 00:02:24.180
You have to have a selector so

37
00:02:24.180 --> 00:02:26.900
you can put it into the Dom and
it needs a template and a class.

38
00:02:28.100 --> 00:02:31.220
So fairly simple.

39
00:02:31.220 --> 00:02:34.030
And then, we have data binding

40
00:02:34.030 --> 00:02:39.020
which allows to send data from
the template to the class and vice versa.

41
00:02:40.130 --> 00:02:43.400
So the binding syntax has expanded.

42
00:02:43.400 --> 00:02:44.340
And as a result,

43
00:02:44.340 --> 00:02:50.060
we have our built in directives like
library has just shrunk dramatically.

44
00:02:50.060 --> 00:02:54.180
But we have essentially interpolation,
which if you've done Angular one,

45
00:02:54.180 --> 00:02:56.520
you're familiar with double curly braces.

46
00:02:56.520 --> 00:03:00.100
Property binding, event binding,
and two way binding,

47
00:03:00.100 --> 00:03:04.250
which is essentially Property binding and
event binding combined.

48
00:03:04.250 --> 00:03:08.500
So if you have two one-way streets,
side by side, what do you have?

49
00:03:08.500 --> 00:03:10.633
Well, it's a two-way street.

50
00:03:10.633 --> 00:03:16.514
And so, that's the concept
of two-way data binding.

51
00:03:16.514 --> 00:03:20.039
And as I said, it's expanded but
we have a much smaller framework.

52
00:03:21.690 --> 00:03:23.860
So what we have is the doubly
curly bracelets, so

53
00:03:23.860 --> 00:03:26.340
we're sending a value from
the class to the template.

54
00:03:26.340 --> 00:03:29.480
So if you've done angular
one this is very familiar.

55
00:03:29.480 --> 00:03:34.080
But if you want to send a value and

56
00:03:34.080 --> 00:03:39.480
them bind it to essentially a property,
then you use these square brackets.

57
00:03:39.480 --> 00:03:42.830
So think of this,
is really like array axis notation.

58
00:03:42.830 --> 00:03:44.130
Is if you have an array of stuff and

59
00:03:44.130 --> 00:03:49.150
you wanna access a specific property
on it, then it is brackets.

60
00:03:49.150 --> 00:03:51.980
So this is something my friend,
Todd Motto, came up with.

61
00:03:51.980 --> 00:03:53.340
And it's just kind of clicked for me.

62
00:03:53.340 --> 00:03:55.100
So if you wanna access something,

63
00:03:55.100 --> 00:03:58.770
such as a value,
it's brackets like array notation.

64
00:03:58.770 --> 00:04:03.720
Or if you want to send something
back from the template to the class.

65
00:04:03.720 --> 00:04:05.580
So for instance, I click event.

66
00:04:05.580 --> 00:04:07.340
Then, how do you call a method?

67
00:04:07.340 --> 00:04:10.900
Well if you have a method named mymethod,
and

68
00:04:10.900 --> 00:04:14.130
if you just go this.mymethod,
you're just referencing the function.

69
00:04:14.130 --> 00:04:16.180
But if you want to execute it,
how do you do that?

70
00:04:16.180 --> 00:04:19.580
Well, you just add
parenthesis on the end of it.

71
00:04:19.580 --> 00:04:23.450
And so, think of property binding,
event binding.

72
00:04:23.450 --> 00:04:26.910
And so, in this case we're sending an
event from the template to the class and

73
00:04:26.910 --> 00:04:30.970
then we can put those together and
we have two-way data binding.

74
00:04:30.970 --> 00:04:31.600
Yes?

75
00:04:31.600 --> 00:04:36.233
&gt;&gt; Speaker 2: Two questions coming in,
one from Annie.

76
00:04:36.233 --> 00:04:38.993
Is equatable to the link function?

77
00:04:49.234 --> 00:04:51.230
&gt;&gt; Lukas: Not exactly.

78
00:04:51.230 --> 00:04:58.040
So, the question is, is on it, equivalent
to the link function in a directive?

79
00:04:58.040 --> 00:04:59.710
And I'm gonna say no.

80
00:04:59.710 --> 00:05:03.500
The reason being is because the link
function actually returns an angular one

81
00:05:03.500 --> 00:05:08.800
returns a reference about the actual
element that directive is on.

82
00:05:08.800 --> 00:05:13.530
Whereas the link function has
really no knowledge of like

83
00:05:13.530 --> 00:05:17.860
essentially like the element that it's on,
the attributes on that element, etc.

84
00:05:19.482 --> 00:05:24.890
What on in it is closer to is if
you're using doc component syntax,

85
00:05:24.890 --> 00:05:28.440
and 1.x, or 1.5, which I highly recommend,

86
00:05:28.440 --> 00:05:32.890
it's essentially equivalent to
a dollar sign, I think it's.

87
00:05:32.890 --> 00:05:37.935
So they've introduced, they've back ported
these component life cycle hooks into 1.x.

88
00:05:37.935 --> 00:05:39.940
1.5 specifically.

89
00:05:39.940 --> 00:05:42.170
I think
&gt;&gt; Speaker 2: Follow up to that from

90
00:05:42.170 --> 00:05:42.725
Chris B.

91
00:05:42.725 --> 00:05:43.230
&gt;&gt; Lukas: Mm-hm.

92
00:05:43.230 --> 00:05:45.800
&gt;&gt; Speaker 2: Link function
was just DOM manipulation?

93
00:05:47.410 --> 00:05:52.360
&gt;&gt; Lukas: Yes, although they've
updated the constructor method

94
00:05:52.360 --> 00:05:56.110
in directives that you
have dollar element.

95
00:05:56.110 --> 00:05:59.780
And you can manipulate it there as well.

96
00:05:59.780 --> 00:06:02.620
But, I recommend,
if you're doing DOM manipulation,

97
00:06:02.620 --> 00:06:05.580
really do it in the linked
function within a directive.

98
00:06:08.180 --> 00:06:09.090
&gt;&gt; Speaker 2: Next question.

99
00:06:09.090 --> 00:06:09.596
&gt;&gt; Lukas: Yes.

100
00:06:09.596 --> 00:06:11.663
&gt;&gt; Speaker 2: From.

101
00:06:11.663 --> 00:06:14.060
Is the digest cycle still there?

102
00:06:16.700 --> 00:06:20.180
&gt;&gt; Lukas: Not in the classical 1.x set.

103
00:06:20.180 --> 00:06:22.840
So there is still change
detection happening.

104
00:06:22.840 --> 00:06:26.510
But $digest as we know it is
completely dead, thank God.

105
00:06:30.150 --> 00:06:34.750
&gt;&gt; Speaker 2: One more
question from Simon.

106
00:06:34.750 --> 00:06:39.410
What about suggestions for
using style URLs versus inline styles?

107
00:06:41.820 --> 00:06:43.450
&gt;&gt; Lukas: So this actually falls back.

108
00:06:44.600 --> 00:06:50.480
I'm not as rigid on this as with
templates and template URLs.

109
00:06:50.480 --> 00:06:54.460
So just to reiterate I
think your templates or

110
00:06:54.460 --> 00:06:58.570
your components should be fine-grained in
so much that your template, your HTML,

111
00:06:58.570 --> 00:07:00.890
should comfortably fit inline.

112
00:07:00.890 --> 00:07:03.110
Again, there's cases where
that's not gonna make sense.

113
00:07:03.110 --> 00:07:07.660
For instance, if you're dealing with
a forum I found that it's pretty verbose,

114
00:07:07.660 --> 00:07:10.960
as well as if you're dealing
with a team of designers.

115
00:07:10.960 --> 00:07:14.360
And so I've mentioned this to some
people and they're like, what?

116
00:07:14.360 --> 00:07:15.980
We don't have people do our layouts.

117
00:07:15.980 --> 00:07:16.730
That's crazy.

118
00:07:16.730 --> 00:07:17.670
I do it all.

119
00:07:17.670 --> 00:07:21.220
Well unfortunately there are companies
that they actually have dedicated

120
00:07:21.220 --> 00:07:26.550
resources that all they do is html, CSS,
and they get everything pixel perfect.

121
00:07:26.550 --> 00:07:30.420
When you're dealing with that workflow,

122
00:07:30.420 --> 00:07:35.730
it's really handy to give or essentially
receive like here, so your html file,

123
00:07:35.730 --> 00:07:40.340
here is your CSS and you just
reference them as external files so

124
00:07:40.340 --> 00:07:42.510
it allows you to decouple
that in the workflow.

125
00:07:43.670 --> 00:07:49.220
With that said, if it's a very specific
simple thing then I will use style and

126
00:07:49.220 --> 00:07:51.650
drop it in there.

127
00:07:51.650 --> 00:07:57.090
I think it just comes down to what you and
your team decides.

128
00:07:57.090 --> 00:07:59.110
And then I think from that
point you should stick to it.

129
00:07:59.110 --> 00:08:01.950
So again,
consistency is better than being right.

130
00:08:03.250 --> 00:08:05.570
&gt;&gt; Speaker 2: Okay,
questions are coming in like crazy here.

131
00:08:05.570 --> 00:08:06.090
One from Macy.

132
00:08:06.090 --> 00:08:12.260
Can a property in one way data
binding be an attribute of an element?

133
00:08:14.100 --> 00:08:16.020
&gt;&gt; Lukas: Can a property
in one way data binding?

134
00:08:19.110 --> 00:08:20.300
Yes.

135
00:08:20.300 --> 00:08:20.910
That's the point.

136
00:08:21.910 --> 00:08:25.370
This is kind of the keyboard equivalent
if you're looking at like piano keys

137
00:08:25.370 --> 00:08:30.200
is that you can see we have a class and a
template, interpolation, property binding,

138
00:08:30.200 --> 00:08:33.260
so that's one way from class to template.

139
00:08:33.260 --> 00:08:37.480
Then in our template we have the event
binding, which essentially sends a event

140
00:08:37.480 --> 00:08:40.250
with information about
that Back into the class.

141
00:08:40.250 --> 00:08:42.869
And then we have the two-way data binding.

142
00:08:42.869 --> 00:08:46.640
More importantly is it helps
to actually visualize it.

143
00:08:46.640 --> 00:08:49.690
I feel like I'm looking down on top of it,
is that you have your template and

144
00:08:49.690 --> 00:08:52.920
your class with metadata
sitting in between.

145
00:08:52.920 --> 00:08:58.640
But your template is sending event binding
into the class, or event information.

146
00:08:58.640 --> 00:09:02.950
And your class is sending essentially
information as properties

147
00:09:02.950 --> 00:09:04.710
into your template.

148
00:09:04.710 --> 00:09:09.524
And so we are actually going
to revisit this exact graph or

149
00:09:09.524 --> 00:09:14.450
this diagram later when we
get into driven architecture.

150
00:09:17.126 --> 00:09:18.703
&gt;&gt; Lukas: So let's check this out here.

151
00:09:20.099 --> 00:09:21.600
&gt;&gt; Lukas: At the top, what do we have?

152
00:09:21.600 --> 00:09:23.370
The first two elements.

153
00:09:23.370 --> 00:09:24.570
What kind of binding do we have in there?

154
00:09:26.510 --> 00:09:27.170
&gt;&gt; Speaker 3: Turbulation.

155
00:09:27.170 --> 00:09:29.040
&gt;&gt; Lukas: Turbulation, yes.

156
00:09:29.040 --> 00:09:34.480
So now,
if we go to the experiment component,

157
00:09:34.480 --> 00:09:38.940
and if you look toward the ends there,
we have the brackets.

158
00:09:38.940 --> 00:09:39.761
What's going on there?

159
00:09:42.987 --> 00:09:44.470
&gt;&gt; Speaker 3: So it's a property.

160
00:09:44.470 --> 00:09:48.438
&gt;&gt; Lukas: Yes, so
essentially we're binding

161
00:09:48.438 --> 00:09:52.930
the experiment object to this template.

162
00:09:52.930 --> 00:09:56.400
And so this is, without trying to get
ahead of myself, I don't want to say too

163
00:09:56.400 --> 00:10:02.690
much, but this is how you essentially
send data into child components.

164
00:10:02.690 --> 00:10:05.280
This is the majority of what
I use property binding for

165
00:10:05.280 --> 00:10:10.290
but what we're doing is we're saying I
want to bind this experiment property

166
00:10:10.290 --> 00:10:14.280
to this experiment
attribute on this element.

167
00:10:15.450 --> 00:10:21.240
Now let's go down to
the input within the form.

168
00:10:22.760 --> 00:10:24.170
And you can see here we have NG model.

169
00:10:26.380 --> 00:10:30.950
And what do you think happens
if we have property binding and

170
00:10:30.950 --> 00:10:32.390
event binding together?

171
00:10:32.390 --> 00:10:39.390
So remember you go like this two one
way streets make a two way street.

172
00:10:39.390 --> 00:10:42.510
So this is two way data binding in action.

173
00:10:44.390 --> 00:10:45.210
This is what this looks like,

174
00:10:45.210 --> 00:10:48.890
the two things put together,
they call this banana in a box.

175
00:10:48.890 --> 00:10:51.230
Essentially you just visualize it's
just a banana sitting in a box, or

176
00:10:51.230 --> 00:10:54.100
a hotdog in a box, whatever.

177
00:10:54.100 --> 00:10:59.300
Unfortunately that's a little too
close to a very hilarious SNL skit,

178
00:10:59.300 --> 00:11:01.160
and moving along.

179
00:11:01.160 --> 00:11:03.810
In the submit, what do we have here?

180
00:11:06.360 --> 00:11:06.860
Click.

181
00:11:07.880 --> 00:11:09.170
So, what are we capturing.

182
00:11:09.170 --> 00:11:09.950
&gt;&gt; Speaker 3: The event.
&gt;&gt; Speaker 4: Event.

183
00:11:09.950 --> 00:11:10.460
&gt;&gt; Lukas: The click event.

184
00:11:10.460 --> 00:11:13.840
And so, what you can actually do,
is any dom event, as far as I know.

185
00:11:13.840 --> 00:11:17.810
I haven't exhaustively tried this out,
but if you go to the MDN, and

186
00:11:17.810 --> 00:11:22.660
you pull up dom event, you can just start
grabbing those and binding to them.

187
00:11:23.930 --> 00:11:25.670
And so we have click.

188
00:11:25.670 --> 00:11:28.620
We're binding to it, parenthesis.

189
00:11:28.620 --> 00:11:30.950
And when that click event is captured.

190
00:11:30.950 --> 00:11:35.990
Then we're calling update message and
we're passing in message, makes sense.

191
00:11:39.990 --> 00:11:43.480
Okay, this is for all my homies.

192
00:11:43.480 --> 00:11:47.660
That are doing now,
one.x, and this comes up.

193
00:11:47.660 --> 00:11:50.020
But what about directives?

194
00:11:50.020 --> 00:11:55.550
So, think of a component as
a directive with a template.

195
00:11:56.620 --> 00:12:01.260
More so, I just think of directives
as a component without a template.

196
00:12:01.260 --> 00:12:06.390
So there are times when you want
to augment an existing element.

197
00:12:06.390 --> 00:12:08.600
And this is where
directives come in handy.

198
00:12:08.600 --> 00:12:12.230
So if you want to take an existing
element and enhance it,

199
00:12:12.230 --> 00:12:15.210
so it's decorated with @Directive.

200
00:12:15.210 --> 00:12:19.120
And so a component is
a directive with a template or

201
00:12:19.120 --> 00:12:21.070
a directive is a component
without a template.

202
00:12:21.070 --> 00:12:26.220
So technically If my
life was on the line and

203
00:12:26.220 --> 00:12:32.670
had to be absolutely submantly
correct a component is a directive.

204
00:12:32.670 --> 00:12:35.440
So really a component
derives off of the directive.

205
00:12:35.440 --> 00:12:37.530
But it has a template.

206
00:12:40.240 --> 00:12:43.500
And more importantly angular comes with

207
00:12:43.500 --> 00:12:46.720
built in directives that
we'll see in a little bit.

208
00:12:48.600 --> 00:12:53.410
So what we have here is a blinker
directive, being now that

209
00:12:53.410 --> 00:12:59.280
the blink tag has been deprecated,
we could technically bring this back.

210
00:12:59.280 --> 00:13:02.430
And so now you can imagine we have
a paragraph and we want it to blink.

211
00:13:02.430 --> 00:13:05.290
So we don't need a new element or
a template.

212
00:13:05.290 --> 00:13:09.690
We want to really augment
the behaviour of an existing element.

213
00:13:09.690 --> 00:13:14.520
And so what I want everybody
to notice here is one, so

214
00:13:14.520 --> 00:13:16.750
this goes back to our link function,

215
00:13:16.750 --> 00:13:22.430
that this is slightly closer to how
a link function works in angular one.

216
00:13:22.430 --> 00:13:27.600
In the sense that you are injecting
the element ref into your constructor so

217
00:13:27.600 --> 00:13:31.570
now you have access to
the element that exists.

218
00:13:31.570 --> 00:13:37.200
So I would say more so
element ref is closer to dollar element or

219
00:13:37.200 --> 00:13:38.668
what exists in the link function.

220
00:13:38.668 --> 00:13:44.410
But this is the piece
that I want to point out.

221
00:13:44.410 --> 00:13:46.350
In the directive, or

222
00:13:46.350 --> 00:13:50.190
in our directive metadata,
notice we simply have a selector.

223
00:13:51.270 --> 00:13:52.660
We no longer have a template.

