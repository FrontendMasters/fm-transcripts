WEBVTT

1
00:00:00.220 --> 00:00:04.130
&gt;&gt; Lukas Ruebbelke: So,
AOT is ahead of time compilation.

2
00:00:04.130 --> 00:00:08.450
So right now,
we are using just in time compilation.

3
00:00:08.450 --> 00:00:12.390
So, what happens is Angular is we're
making changes to our application.

4
00:00:12.390 --> 00:00:16.485
Angular is essentially going through and
kind of recompiling templates,

5
00:00:16.485 --> 00:00:17.853
redrawing everything.

6
00:00:17.853 --> 00:00:23.549
And as things change,
it's compiling this kind of on the fly.

7
00:00:26.834 --> 00:00:30.998
&gt;&gt; Lukas Ruebbelke: So what AOT is,
is we are going to take,

8
00:00:30.998 --> 00:00:34.168
doing some more live coding.

9
00:00:36.382 --> 00:00:38.164
&gt;&gt; Lukas Ruebbelke: This
is AOT compilation.

10
00:00:38.164 --> 00:00:46.740
So, instead of having the compiler baked
into the project when you ship it.

11
00:00:46.740 --> 00:00:50.914
So with Angular 1, doing actually dynamic
compilation was really, really easy.

12
00:00:50.914 --> 00:00:52.650
You had the dollar compile service.

13
00:00:52.650 --> 00:00:54.335
You would say, take this HTML.

14
00:00:54.335 --> 00:00:57.180
Take this scope object and compile
them together completely on the fly.

15
00:00:58.226 --> 00:01:00.689
In Angular two,
because of the way compilation happens,

16
00:01:00.689 --> 00:01:02.662
because we're targeting multiple devices.

17
00:01:02.662 --> 00:01:05.980
So for instance,
you can do server side Angular.

18
00:01:05.980 --> 00:01:09.602
Right now, we're targeting the browser,
but electron or

19
00:01:09.602 --> 00:01:14.529
these different things is the complication
step happens closer to the front like

20
00:01:14.529 --> 00:01:19.036
you have to know when you fire this up,
what you're actually targeting.

21
00:01:19.036 --> 00:01:23.280
We've taken this a step further
with ahead of time compilation.

22
00:01:23.280 --> 00:01:28.575
And what this does is you compile
a specific version of the application

23
00:01:28.575 --> 00:01:33.601
that's highly optimized,
that does not ship with the compiler is

24
00:01:33.601 --> 00:01:38.539
that Angular can infer that it
knows enough about the application

25
00:01:38.539 --> 00:01:43.768
that anything that happens,
it can handle it without the compiler.

26
00:01:43.768 --> 00:01:47.824
So what this means is that whereas
you had a large application,

27
00:01:47.824 --> 00:01:52.660
cuz it had to accommodate the compiler
by doing ahead of time compilation.

28
00:01:52.660 --> 00:01:55.686
So essentially, think of it as kind
of like you're doing a static build.

29
00:01:55.686 --> 00:02:00.042
You're pulling out the compiler,
now your application just goes [SOUND] and

30
00:02:00.042 --> 00:02:02.230
it's very fast and it's very light.

31
00:02:03.790 --> 00:02:06.783
Now, when you start to get into
kind of like dynamic things.

32
00:02:06.783 --> 00:02:10.727
And so, they're still trying to figure
out how to handle lazy loaded routes with

33
00:02:10.727 --> 00:02:12.280
ahead of time compilation.

34
00:02:12.280 --> 00:02:15.848
So like that's kind of the trade-off is
pretty much once you do ahead of time

35
00:02:15.848 --> 00:02:17.203
compilation, that's it.

36
00:02:17.203 --> 00:02:19.697
For most cases, that's completely fine.

37
00:02:19.697 --> 00:02:24.745
The idea is that you get a much smaller
payload, fewer async requests and

38
00:02:24.745 --> 00:02:29.880
much faster rendering, because
Angular already knows it's almost like

39
00:02:29.880 --> 00:02:35.570
I don't want to say clairvoyance,
but it knows whats going to happen.

40
00:02:35.570 --> 00:02:42.140
So the nature of Angular itself is because
it's a tree graph, it already knows it

41
00:02:42.140 --> 00:02:46.450
can make some inferences about how events
are gonna flow, how data is going to flow.

42
00:02:46.450 --> 00:02:48.350
But then by taking it a step further and

43
00:02:48.350 --> 00:02:53.260
this is where anti-module came in is
by using anti-module, we can tell

44
00:02:53.260 --> 00:02:56.830
the Angular application everything
it needs to know to enable this.

45
00:02:59.000 --> 00:03:00.345
So here, we just compile it.

46
00:03:00.345 --> 00:03:06.095
So you need to actually install
a specific compiler for

47
00:03:06.095 --> 00:03:12.470
this, then you essentially
generate a manifest.

48
00:03:12.470 --> 00:03:14.122
And so you can read all about
this on the Internet, but

49
00:03:14.122 --> 00:03:15.314
this is kind of the high-level view.

50
00:03:15.314 --> 00:03:18.390
Install a specific compiler for it.

51
00:03:18.390 --> 00:03:21.140
You generate, basically, a manifest or

52
00:03:21.140 --> 00:03:26.170
a file that tells it how it's gonna
happen and then you compile it.

53
00:03:28.260 --> 00:03:34.701
And in doing so, you also need to, instead
of bootstrapping to your app module,

54
00:03:34.701 --> 00:03:38.600
you need to bootstrap to
the app module factory.

55
00:03:38.600 --> 00:03:44.740
So you're actually stepping it even
just a step before, essentially.

56
00:03:44.740 --> 00:03:47.202
So what you have is you have the module,
but then you have,

57
00:03:47.202 --> 00:03:48.623
where does the module come from?

58
00:03:48.623 --> 00:03:49.833
It comes from a factory.

59
00:03:49.833 --> 00:03:52.654
And so what you're basically doing is
you're moving a compilation step up

60
00:03:52.654 --> 00:03:54.020
just a step forward.

61
00:03:54.020 --> 00:03:58.355
So now you bootstrap to the app module
factory which will then be responsible for

62
00:03:58.355 --> 00:04:00.889
generating the module,
if that makes sense.

63
00:04:00.889 --> 00:04:03.683
So we're just kinda moving
things up just a step, so

64
00:04:03.683 --> 00:04:06.107
that we can get rid of
the compiler entirely.

65
00:04:06.107 --> 00:04:10.863
One of the upsides of this and
this is something I've not tried, but

66
00:04:10.863 --> 00:04:15.287
everything that I've heard has
been pretty phenomenal is that

67
00:04:15.287 --> 00:04:18.057
this also allows us to do tree shaking.

68
00:04:18.057 --> 00:04:22.001
And so if you have a large application and
you're not using something, well,

69
00:04:22.001 --> 00:04:23.570
then you can just shake it out.

70
00:04:24.890 --> 00:04:28.004
And so now you can highly optimize
not only not ship the compiler,

71
00:04:28.004 --> 00:04:30.608
but not ship parts of the code
you're just not using and

72
00:04:30.608 --> 00:04:32.717
that's where tree shaking comes in, yes?

73
00:04:32.717 --> 00:04:35.599
&gt;&gt; Speaker 2: Havy is asking,
does AOT compensate for

74
00:04:35.599 --> 00:04:39.370
the Aangular 2 internal HTML parser?

75
00:04:39.370 --> 00:04:44.845
Because Angular 2 templates
are case sensitive and

76
00:04:44.845 --> 00:04:50.579
browser's HTML parser should
not be case sensitive.

77
00:04:50.579 --> 00:04:54.130
&gt;&gt; Lukas Ruebbelke: I mean, it'll still
be handled like an Angular application.

78
00:04:54.130 --> 00:05:01.148
But basically, the raw JavaScript for your
application has been generated for it.

79
00:05:01.148 --> 00:05:06.332
And so I would wager $100 that
if it doesn't work in a regular

80
00:05:06.332 --> 00:05:11.430
Angular application,
then it's not going to work after AOT.

81
00:05:12.750 --> 00:05:15.295
And so
all of the JavaScript is being generated,

82
00:05:15.295 --> 00:05:17.736
like all your Angular JavaScript's
being generated,

83
00:05:17.736 --> 00:05:21.490
it's just Angular knows
what's going to happen and

84
00:05:21.490 --> 00:05:24.069
it can preemptively say, this is what
we need and this is how we handle it.

85
00:05:25.260 --> 00:05:30.955
So essentially, it's a very specific
custom build based on your application.

86
00:05:36.842 --> 00:05:42.410
&gt;&gt; Lukas Ruebbelke: And yeah,
so that's my last slide.

87
00:05:42.410 --> 00:05:43.515
It somehow ended there.

88
00:05:43.515 --> 00:05:45.373
All right, workshop's over everybody.

89
00:05:50.037 --> 00:05:52.175
&gt;&gt; Lukas Ruebbelke: So,
AOT, any questions?

90
00:05:52.175 --> 00:05:52.903
Make sense?

91
00:05:52.903 --> 00:05:56.250
You're just compiling ahead of time,
so ahead of time compilation and

92
00:05:56.250 --> 00:05:59.790
you just get the super optimized very
specific build to your application.

93
00:06:01.120 --> 00:06:06.966
Now if you're shipping an application for
money or that involves people or

94
00:06:06.966 --> 00:06:12.738
you care about a user experience,
I highly recommend looking into this.

95
00:06:12.738 --> 00:06:16.520
So, this goes back to my
things I love about Angular.

96
00:06:16.520 --> 00:06:19.532
This is one of the radical
things that I think is so

97
00:06:19.532 --> 00:06:23.510
far beyond like anything that any
framework is doing right now.

98
00:06:23.510 --> 00:06:26.721
That is just gonna make it
like it's already fast,

99
00:06:26.721 --> 00:06:28.819
with this it's just crazy fast.

100
00:06:28.819 --> 00:06:34.031
So this gets a big plus one on the things
that are awesome about Angular 2 or

101
00:06:34.031 --> 00:06:36.230
as I call it, the shiny parts.

