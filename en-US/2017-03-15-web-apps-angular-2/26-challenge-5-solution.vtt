WEBVTT

1
00:00:00.330 --> 00:00:04.960
&gt;&gt; Lukas Ruebbelke: So the question is how
many container components can we have?

2
00:00:06.136 --> 00:00:12.120
If we can have as many as we wish,
should we organize the ones into modules?

3
00:00:12.120 --> 00:00:16.280
And how two components on
a different module can interact?

4
00:00:16.280 --> 00:00:22.307
So that's actually three questions,
it appears like.

5
00:00:22.307 --> 00:00:28.736
So the answer is, you want as few
container components as possible.

6
00:00:28.736 --> 00:00:32.670
And you want as many presentational
components as possible.

7
00:00:32.670 --> 00:00:37.830
So the reason for that is a container
component contains state.

8
00:00:39.030 --> 00:00:42.030
And what you want to do is you
want to reduce complexity in

9
00:00:42.030 --> 00:00:44.330
your application by reducing state.

10
00:00:45.430 --> 00:00:51.114
So the idea is that you want as few
container components as possible,

11
00:00:51.114 --> 00:00:55.624
and as many presentational
components as you can get.

12
00:00:55.624 --> 00:01:02.098
My rule of thumb is I generally have
a container component for a feature.

13
00:01:02.098 --> 00:01:08.060
So for instance we have items that
gets its container component.

14
00:01:08.060 --> 00:01:11.100
We have widgets,
that gets a container component.

15
00:01:13.220 --> 00:01:17.045
The reason being is you need to
basically get the state from somewhere.

16
00:01:17.045 --> 00:01:21.908
So you basically have to have
something that gets enough state

17
00:01:21.908 --> 00:01:26.125
to satisfy the visual
requirements of that feature.

18
00:01:26.125 --> 00:01:29.958
As well as, you need the ability to
actually convey events back up to

19
00:01:29.958 --> 00:01:32.055
a service to handle business logic.

20
00:01:32.055 --> 00:01:37.016
And so, for me,
I generally try to have a Smart component,

21
00:01:37.016 --> 00:01:41.620
or a Container component,
for every feature.

22
00:01:41.620 --> 00:01:46.750
Now I have seen for various reasons,

23
00:01:46.750 --> 00:01:52.460
that you'll have a Smart component that
may have additional Smart components.

24
00:01:52.460 --> 00:01:54.908
So, you can have as many as you want, but

25
00:01:54.908 --> 00:01:58.596
really make sure that
the architecture necessitates that.

26
00:01:58.596 --> 00:02:00.565
The fundamental reason,

27
00:02:00.565 --> 00:02:05.583
is that a Container component means
that you are consuming state.

28
00:02:05.583 --> 00:02:08.102
To then feed into your
presentational components.

29
00:02:08.102 --> 00:02:11.250
You want to reduce that
as much as possible.

30
00:02:13.327 --> 00:02:14.366
&gt;&gt; Lukas Ruebbelke: With that said,

31
00:02:14.366 --> 00:02:17.335
the next question is,
should you break it out,

32
00:02:17.335 --> 00:02:20.019
your container components into modules?

33
00:02:20.019 --> 00:02:22.930
I personally do not do that.

34
00:02:22.930 --> 00:02:27.836
Where I would break it into a module
is if it needed to be abstracted

35
00:02:27.836 --> 00:02:29.543
out into a lazy route.

36
00:02:29.543 --> 00:02:35.712
Or it need to be a lazy loaded component
or I needed to move it somewhere else.

37
00:02:35.712 --> 00:02:40.250
From there the next or third question
is how do two components and

38
00:02:40.250 --> 00:02:42.948
two different modules communicate?

39
00:02:42.948 --> 00:02:46.927
Well they essentially share
a same top level component that

40
00:02:46.927 --> 00:02:49.166
they are now aware of each other.

41
00:02:49.166 --> 00:02:55.511
And they communicate as if they were in
the same module, if that makes sense.

42
00:02:55.511 --> 00:03:02.922
So if you have two components
in two separate modules.

43
00:03:02.922 --> 00:03:05.263
You need to actually import one or
the other or

44
00:03:05.263 --> 00:03:07.672
you can import them into
the top level module.

45
00:03:07.672 --> 00:03:11.322
And then, that serves as
the mechanism to communicate from

46
00:03:11.322 --> 00:03:15.330
there.
&gt;&gt; Lukas Ruebbelke: Next

47
00:03:15.330 --> 00:03:20.488
question.
&gt;&gt; Lukas Ruebbelke: All right,

48
00:03:20.488 --> 00:03:25.512
are we ready to see the solution?
&gt;&gt; Lukas Ruebbelke: Okay.

49
00:03:34.124 --> 00:03:35.146
&gt;&gt; Lukas Ruebbelke: So what we need to

50
00:03:35.146 --> 00:03:38.808
do is extract the widgets
collection to a widgets service.

51
00:03:38.808 --> 00:03:42.836
And then essentially make it so
that we can consume it.

52
00:03:42.836 --> 00:03:50.069
Or expose it, then consume it.
&gt;&gt; Lukas Ruebbelke: So

53
00:03:50.069 --> 00:03:55.120
we'll hop into here,
&gt;&gt; Lukas Ruebbelke: And I'm just going to

54
00:03:55.120 --> 00:04:00.962
get rid of this user's,
&gt;&gt; Lukas Ruebbelke: Stuff

55
00:04:00.962 --> 00:04:05.620
here.
&gt;&gt; Lukas Ruebbelke: Since I don't actually

56
00:04:05.620 --> 00:04:06.664
need that.

57
00:04:06.664 --> 00:04:07.472
Let's go ahead and delete this.

58
00:04:07.472 --> 00:04:10.199
So I'm just cleaning up this component,

59
00:04:21.298 --> 00:04:22.481
&gt;&gt; Lukas Ruebbelke: All right, so

60
00:04:22.481 --> 00:04:26.531
let's go ahead and
create our widgets service.

61
00:04:26.531 --> 00:04:32.860
So we'll go in our shared folder,
we'll go widgets.service.ts

62
00:04:37.772 --> 00:04:41.422
&gt;&gt; Lukas Ruebbelke: And while we're here,

63
00:04:41.422 --> 00:04:48.181
let's go ahead and do widget.model.ts.

64
00:04:48.181 --> 00:04:54.034
I'm pretty sure that the widget

65
00:04:54.034 --> 00:04:58.804
interface is identical to

66
00:04:58.804 --> 00:05:03.571
the item.
&gt;&gt; Lukas Ruebbelke: And

67
00:05:03.571 --> 00:05:07.650
then within our widget service, let's
go ahead and start to build this out.

68
00:05:09.510 --> 00:05:13.670
So export class widgets service,

69
00:05:15.760 --> 00:05:21.500
and then from here, Injectable().

70
00:05:21.500 --> 00:05:24.720
Now remember this is a method, so
we have to put the parentheses in there.

71
00:05:29.510 --> 00:05:36.132
And then from here, let's go into our
component and let's chop this out and

72
00:05:36.132 --> 00:05:42.046
get it out of here.
&gt;&gt; Lukas Ruebbelke: So

73
00:05:42.046 --> 00:05:50.016
now what we'll do as well.
&gt;&gt; Lukas Ruebbelke: Let's go ahead and

74
00:05:50.016 --> 00:05:54.648
type this so
this is now an array of widget objects.

75
00:05:54.648 --> 00:05:58.378
Reason being is that it
lines up with our interface.

76
00:06:01.822 --> 00:06:04.532
&gt;&gt; Lukas Ruebbelke: And so from here,

77
00:06:04.532 --> 00:06:09.600
let's go ahead and expose this.

78
00:06:09.600 --> 00:06:11.224
Let's do it through the barrel roll.

79
00:06:27.561 --> 00:06:28.604
&gt;&gt; Lukas Ruebbelke: So just,

80
00:06:31.201 --> 00:06:34.523
&gt;&gt; Lukas Ruebbelke: Exporting the service

81
00:06:34.523 --> 00:06:39.247
and the interface or the model.

82
00:06:39.247 --> 00:06:44.557
And then, let's go here.

83
00:06:44.557 --> 00:06:50.448
And now, we can attach

84
00:06:50.448 --> 00:06:55.723
this to our module.

85
00:06:55.723 --> 00:06:57.205
Any questions what I've done so far?

86
00:06:57.205 --> 00:06:59.979
I've just created a class, injectable,

87
00:06:59.979 --> 00:07:04.799
then I've added to the barrel roll.
&gt;&gt; Lukas Ruebbelke: And

88
00:07:04.799 --> 00:07:09.135
from here I've just imported
it to the app module, and

89
00:07:09.135 --> 00:07:13.730
added it to providers.
&gt;&gt; Lukas Ruebbelke: Now

90
00:07:13.730 --> 00:07:16.480
let's go here, yes?
&gt;&gt; Speaker 2: That right

91
00:07:16.480 --> 00:07:19.270
there, I was just curious
how you would set that typed

92
00:07:19.270 --> 00:07:20.508
collection, okay.
&gt;&gt; Lukas Ruebbelke: So

93
00:07:20.508 --> 00:07:22.215
you can do this another way as well.

94
00:07:22.215 --> 00:07:26.094
For some reason I just prefer this way.

95
00:07:26.094 --> 00:07:30.349
I think you can go array.
&gt;&gt; Speaker 2: Widget,

96
00:07:30.349 --> 00:07:33.012
widget.
&gt;&gt; Lukas Ruebbelke: Yeah, widget.

97
00:07:33.012 --> 00:07:34.396
So you can do this as well.

98
00:07:34.396 --> 00:07:37.936
So there are a couple
of ways to type this,

99
00:07:37.936 --> 00:07:41.587
I just, I keep wanting to do, there we go.

100
00:07:41.587 --> 00:07:42.713
To me, this just reads better,

101
00:07:42.713 --> 00:07:47.511
a little more concise.
&gt;&gt; Lukas Ruebbelke: Now let's

102
00:07:47.511 --> 00:07:48.452
consume this.

103
00:07:48.452 --> 00:07:55.309
So if we go to our widget's component.
&gt;&gt; Lukas Ruebbelke: Go

104
00:07:55.309 --> 00:08:03.965
to private widgetsService.
&gt;&gt; Lukas Ruebbelke: That's

105
00:08:03.965 --> 00:08:07.102
what I'm looking for, right there.

106
00:08:07.102 --> 00:08:12.452
And one thing we are missing,
actually let's do this.

107
00:08:12.452 --> 00:08:16.235
We'll set this to widget.

108
00:08:16.235 --> 00:08:21.698
And we'll set widgets to an array of

109
00:08:21.698 --> 00:08:28.658
widget objects.
&gt;&gt; Lukas Ruebbelke: And

110
00:08:28.658 --> 00:08:34.878
then from here, so
we've injected this into our constructor.

111
00:08:34.878 --> 00:08:43.288
Then we can go this.widgets =
this.widgetsService.widgets.

112
00:08:50.498 --> 00:08:53.598
&gt;&gt; Lukas Ruebbelke: And just to make sure,

113
00:08:53.598 --> 00:08:58.335
and we are indeed consuming this.

114
00:08:58.335 --> 00:09:02.599
Let's go back here.
&gt;&gt; Lukas Ruebbelke: Boom.

115
00:09:17.223 --> 00:09:18.292
&gt;&gt; Lukas Ruebbelke: So does anybody

116
00:09:18.292 --> 00:09:21.585
have any questions about
what I've done here?

117
00:09:21.585 --> 00:09:24.938
Does this makes sense?
&gt;&gt; Speaker 3: I'm gonna have to do it

118
00:09:24.938 --> 00:09:25.804
a handful of times.

119
00:09:25.804 --> 00:09:35.003
&gt;&gt; Lukas Ruebbelke: Yeah.

120
00:09:35.003 --> 00:09:36.682
Yes.
&gt;&gt; Speaker 2: I have a question.

121
00:09:36.682 --> 00:09:40.738
If I imported my widget service

122
00:09:40.738 --> 00:09:44.840
already in the module.
&gt;&gt; Lukas Ruebbelke: Mm-hm.

123
00:09:44.840 --> 00:09:45.680
&gt;&gt; Speaker 2: And it's injectable.

124
00:09:45.680 --> 00:09:49.115
Why do I have to import
it [INAUDIBLE] component?

125
00:09:49.115 --> 00:09:50.333
&gt;&gt; Lukas Ruebbelke: So-

126
00:09:53.023 --> 00:09:54.256
&gt;&gt; Speaker 2: It seems redundant to-

127
00:09:54.256 --> 00:09:54.990
&gt;&gt; Lukas Ruebbelke: It does.

128
00:09:54.990 --> 00:09:57.175
&gt;&gt; Speaker 2: Import it everywhere.

129
00:09:57.175 --> 00:09:58.335
&gt;&gt; Lukas Ruebbelke: So I think actually.

130
00:09:58.335 --> 00:10:02.790
Let me just delete this real quick.
&gt;&gt; Lukas Ruebbelke: Did this not get

131
00:10:02.790 --> 00:10:03.465
picked up?

132
00:10:14.906 --> 00:10:17.054
&gt;&gt; Lukas Ruebbelke: So
it's under the impression,

133
00:10:17.054 --> 00:10:22.349
that we should put it in the module.
&gt;&gt; Lukas Ruebbelke: Was there,

134
00:10:22.349 --> 00:10:26.625
but,
&gt;&gt; Lukas Ruebbelke: That may not be

135
00:10:26.625 --> 00:10:35.680
the case.
&gt;&gt; Lukas Ruebbelke: Let's refresh this,

136
00:10:35.680 --> 00:10:43.650
oops.
&gt;&gt; Lukas Ruebbelke: Think about it.

137
00:10:43.650 --> 00:10:51.031
Okay, there it is.
&gt;&gt; Lukas Ruebbelke: It's interesting,

138
00:10:51.031 --> 00:10:53.901
I think obviously components are fine.

139
00:10:53.901 --> 00:11:02.149
But, hold on.

140
00:11:02.149 --> 00:11:06.786
So this is again what
we have with language

141
00:11:06.786 --> 00:11:11.827
level modules and framework level modules.

142
00:11:11.827 --> 00:11:17.955
Is that prior to this,
what you had to do prior to module.

143
00:11:17.955 --> 00:11:21.419
Is actually, at the Angular level,
you had to inject it in.

144
00:11:21.419 --> 00:11:28.095
And so
there are kind of some moving pieces here.

145
00:11:28.095 --> 00:11:32.398
It's how dependency objection works,
is you're defining the dependencies,

146
00:11:32.398 --> 00:11:34.498
you're supplying the dependencies.

147
00:11:34.498 --> 00:11:39.134
And then you also can define how
the dependencies are satisfied.

148
00:11:39.134 --> 00:11:42.859
And so this is whole going
into dependency injection and

149
00:11:42.859 --> 00:11:46.197
I recommend reading
Pascal's blog post on that.

150
00:11:46.197 --> 00:11:51.506
And notice that we're
not having to define our

151
00:11:51.506 --> 00:11:57.784
widget service like this
from an Angular standpoint.

152
00:11:57.784 --> 00:11:59.420
So that it can handle
dependency injection.

153
00:12:01.969 --> 00:12:05.047
&gt;&gt; Lukas Ruebbelke: Because Angular knows

154
00:12:05.047 --> 00:12:11.371
how to supply that
dependency to inject it in.

155
00:12:11.371 --> 00:12:17.861
But from an ES6 module standpoint we
have to have it at the constructor

156
00:12:17.861 --> 00:12:22.812
to satisfy essentially
the type script dependency.

157
00:12:22.812 --> 00:12:26.295
So that it knows,
this is being injected in here so

158
00:12:26.295 --> 00:12:28.843
this module has to be made available.

159
00:12:28.843 --> 00:12:32.236
So ng module think of it as really for

160
00:12:32.236 --> 00:12:37.787
the dependency injection at
kind of the framework level.

161
00:12:37.787 --> 00:12:42.003
But you still need to do modules
at the language level and

162
00:12:42.003 --> 00:12:44.524
that's why that's happening.

163
00:12:44.524 --> 00:12:48.912
So that is admittedly confusing cuz
you kinda have two things happening at

164
00:12:48.912 --> 00:12:49.841
the same time.

165
00:12:49.841 --> 00:12:54.397
You have your ES6 modules then you have
your NG module which is defined for

166
00:12:54.397 --> 00:12:56.980
mainly dependency injection purposes.

