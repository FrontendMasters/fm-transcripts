WEBVTT

1
00:00:00.880 --> 00:00:04.480
&gt;&gt; Lukas Ruebbelke: So
the main building blocks of Angular 2.

2
00:00:04.480 --> 00:00:06.000
So there are some additional build blocks.

3
00:00:06.000 --> 00:00:08.490
But these are the most important ones.

4
00:00:08.490 --> 00:00:13.900
Modules, routes, components and services.

5
00:00:13.900 --> 00:00:16.700
And do let me tell you why I chose those.

6
00:00:16.700 --> 00:00:19.530
So this is The Angular 1.x Big Picture.

7
00:00:19.530 --> 00:00:24.610
When you simplify it, this is what
generally, an angular app looks like.

8
00:00:24.610 --> 00:00:29.090
Which at the time, when I did this first
diagram, Angular one was super confusing.

9
00:00:29.090 --> 00:00:31.020
People were like, so
it's just eight pieces?

10
00:00:31.020 --> 00:00:33.070
Like okay, that makes sense.

11
00:00:33.070 --> 00:00:35.210
So you have your module, config, routes.

12
00:00:35.210 --> 00:00:36.970
Then you have controller, scope and view.

13
00:00:36.970 --> 00:00:39.670
And then if you need to
extend your controller.

14
00:00:39.670 --> 00:00:41.900
Then you do that into a service.

15
00:00:41.900 --> 00:00:47.355
And if you need to extend your view,
then that becomes a directive.

16
00:00:47.355 --> 00:00:53.350
Well, this is the Angular
2 big picture as I see it.

17
00:00:53.350 --> 00:01:01.760
So you have your module, your routes,
your component and then your service.

18
00:01:01.760 --> 00:01:06.870
And so, let's step through these.
&gt;&gt; Lukas Ruebbelke: The module.

19
00:01:06.870 --> 00:01:08.320
So we have module support.

20
00:01:10.670 --> 00:01:15.700
Initially at a language level,
but now at a framework level.

21
00:01:15.700 --> 00:01:20.880
So Angular 2 uses ES6 modules for,

22
00:01:20.880 --> 00:01:24.070
essentially the core mechanism for
composition.

23
00:01:24.070 --> 00:01:29.490
So when we create something we export it,
so that we can import it somewhere else.

24
00:01:29.490 --> 00:01:35.226
So this is ES6 modules, and the goal is
to keep these modules fine-grained and

25
00:01:35.226 --> 00:01:40.796
self-documenting, clean code all the way.
&gt;&gt; Lukas Ruebbelke: And so

26
00:01:40.796 --> 00:01:47.050
what we have here is a ItemsComponent, and
you can see here that we're exporting it.

27
00:01:48.140 --> 00:01:52.260
But then you can see that for
ItemsComponent,

28
00:01:52.260 --> 00:01:57.370
that we also can import other things and
make that available.

29
00:01:57.370 --> 00:02:00.030
And so using ES6 module syntax,

30
00:02:00.030 --> 00:02:03.900
this gives us the ability to
organize things at a language-level.

31
00:02:06.160 --> 00:02:11.800
And then at RC five, we got essentially
module support at the framework-level.

32
00:02:11.800 --> 00:02:15.660
So coming from Angular one,
this is not a new concept.

33
00:02:16.790 --> 00:02:21.580
But we found that with, for instance ahead
of time compilation in different things,

34
00:02:21.580 --> 00:02:26.705
we needed to be able to compile or
know the entirety of the application,

35
00:02:26.705 --> 00:02:30.160
at compiled-time and not run-time.

36
00:02:30.160 --> 00:02:33.050
And so this is why we introduced NgModule.

37
00:02:33.050 --> 00:02:35.950
And at first, I was a little bummed out.

38
00:02:35.950 --> 00:02:40.650
But then I began to realize, this actually
cuts down on a lot of boilerplate.

39
00:02:40.650 --> 00:02:44.280
So you can actually import a dependency
into your module, and then it's available

40
00:02:44.280 --> 00:02:48.780
to every essentially, component or
dependency within that module.

41
00:02:48.780 --> 00:02:54.030
So this is the organizational
mechanism at the framework level.

42
00:02:54.030 --> 00:02:56.320
And there's a few properties.

43
00:02:56.320 --> 00:02:59.140
These are the four that I
think are the most important.

44
00:02:59.140 --> 00:03:01.540
So when you create a component,

45
00:03:01.540 --> 00:03:07.050
that essentially exist in the view,
then you put that under declarations.

46
00:03:07.050 --> 00:03:13.123
Then within your imports,
you can import the list of modules or

47
00:03:13.123 --> 00:03:17.320
sub-modules that, that module needs.

48
00:03:17.320 --> 00:03:18.280
Providers.

49
00:03:18.280 --> 00:03:20.920
So this is where you import your services.

50
00:03:20.920 --> 00:03:22.450
And then, bootstrap.

51
00:03:22.450 --> 00:03:27.020
So this defines the component
that should be bootstrapped.

52
00:03:27.020 --> 00:03:30.680
So what this looks like is declaration.

53
00:03:30.680 --> 00:03:31.930
So what goes in here?

54
00:03:31.930 --> 00:03:36.340
Well, we have an AppComponent,
ItemsComponent, ItemsListComponent, etc.

55
00:03:36.340 --> 00:03:40.750
So you can know that because
it's in the declarations,

56
00:03:40.750 --> 00:03:44.780
that this is a component that's going
to live in the DOM at some point.

57
00:03:45.850 --> 00:03:47.765
Then we have our imports.

58
00:03:47.765 --> 00:03:51.496
So we have our BrowserModule that
essentially contains Angular core,

59
00:03:51.496 --> 00:03:54.610
everything we need to run in the browser.

60
00:03:54.610 --> 00:04:01.940
FormsModule, HttpModule and
then we have the Ng2RestAppRoutingModule.

61
00:04:01.940 --> 00:04:03.060
That's a mouthful.

62
00:04:03.060 --> 00:04:06.030
Thank you Angular CLI for
generating that for us.

63
00:04:06.030 --> 00:04:10.440
But this essentially is a sub-module
that contains all the routes for

64
00:04:10.440 --> 00:04:12.310
our application.

65
00:04:12.310 --> 00:04:18.600
And then providers, ItemsService and
then we're bootstrapping the AppComponent.

66
00:04:18.600 --> 00:04:22.770
If you create a module or sub-module that
has dependencies or things in it, and then

67
00:04:22.770 --> 00:04:28.190
you import it into another module, then
that becomes available to that module.

68
00:04:28.190 --> 00:04:32.874
So as you could see here, that is we're
importing essentially the FormsModule.

69
00:04:32.874 --> 00:04:35.562
Once we import the FormsModule,

70
00:04:35.562 --> 00:04:40.650
then all of the functionality of
forms then is available to this

71
00:04:40.650 --> 00:04:47.722
main AppModule.
&gt;&gt; Lukas Ruebbelke: And

72
00:04:47.722 --> 00:04:51.157
then once we have our module in place,
so previous to RC five,

73
00:04:51.157 --> 00:04:55.160
we would actually just bootstrap
to our top-level component.

74
00:04:55.160 --> 00:04:59.900
But now instead of bootstrapping to a
component, we just bootstrap to a module.

75
00:04:59.900 --> 00:05:03.350
So this is one of the pieces that
you just kind of have to know.

76
00:05:03.350 --> 00:05:05.780
But essentially we're saying
platformBrowserDynamic(), so

77
00:05:05.780 --> 00:05:08.460
this is really just the browser.

78
00:05:08.460 --> 00:05:09.794
We're saying,

79
00:05:09.794 --> 00:05:15.340
platformBrowserDynamic().bootstrapModule
this AppModule.

80
00:05:15.340 --> 00:05:19.170
And then what that does is,
it'll bootstrap the module.

81
00:05:19.170 --> 00:05:25.080
But then it will look for
the app component and

82
00:05:25.080 --> 00:05:28.480
then basically try to spin up
the application from there.

83
00:05:28.480 --> 00:05:30.030
Let me ask you,
hop into the code real quick.

84
00:05:30.030 --> 00:05:31.479
I thought I had one more slide.

85
00:05:32.750 --> 00:05:39.596
But I'll just show you real quick,
so if we go into our index.html and

86
00:05:39.596 --> 00:05:45.882
let's go into our app component.
&gt;&gt; Lukas Ruebbelke: You can

87
00:05:45.882 --> 00:05:52.700
see here within our component,
we have a selector of app-root.

88
00:05:52.700 --> 00:05:58.190
If we go into our index.html,
you notice that that exists as app-root.

89
00:05:58.190 --> 00:06:01.120
So the selector, this is how

90
00:06:01.120 --> 00:06:05.820
this component begins to live
within essentially, your DOM.

91
00:06:05.820 --> 00:06:09.570
So every component, if it's going
to essentially be instantiated,

92
00:06:09.570 --> 00:06:15.940
it's either via really the most common way
is by actually adding it to a template.

93
00:06:15.940 --> 00:06:18.910
You can essentially load
these in via routes but

94
00:06:18.910 --> 00:06:21.630
generally, at least especially for

95
00:06:21.630 --> 00:06:25.400
the top-level of the component, you need
to actually add that to your index.html.

96
00:06:25.400 --> 00:06:31.315
So be sure to take your top-level module,
look for the top-level component,

97
00:06:31.315 --> 00:06:35.570
and from there make sure that
you've added it to the DOM.

98
00:06:37.020 --> 00:06:40.460
Now the upside is, so
let's actually just look here.

99
00:06:40.460 --> 00:06:42.655
So, bootstrap: [AppComponent].

100
00:06:42.655 --> 00:06:47.462
So it's bootstrap your module,
which then bootstraps your

101
00:06:47.462 --> 00:06:52.564
top-level component,
which then lives in your index.html.

102
00:06:54.450 --> 00:06:56.930
And so we'll get more into this
when we get into components, but

103
00:06:56.930 --> 00:07:00.200
I just wanted to call out that
when you bootstrap something,

104
00:07:00.200 --> 00:07:05.702
you need to have that top-level
module selector in your index.html.

105
00:07:05.702 --> 00:07:11.101
So routes.
&gt;&gt; Lukas Ruebbelke: So

106
00:07:11.101 --> 00:07:16.451
routes gives us the ability to essentially
take a certain state and say, for

107
00:07:16.451 --> 00:07:22.870
this state I want to take this component
and dynamically load it into the page.

108
00:07:22.870 --> 00:07:26.105
So for instance,
hopping back into the browser,

109
00:07:26.105 --> 00:07:30.930
you can see here that the URL

110
00:07:30.930 --> 00:07:35.600
is essentially a serialization or a
representation of the state that we're in.

111
00:07:35.600 --> 00:07:38.920
Up here we have widgets, but
then when I click Items,

112
00:07:38.920 --> 00:07:45.220
now I'm essentially saying load
the state for the items route.

113
00:07:45.220 --> 00:07:50.890
And what you have is a router outlet,
that's essentially taking when

114
00:07:50.890 --> 00:07:54.510
you're on Items, it's just dumping the
items component into the router outlet.

115
00:07:54.510 --> 00:07:58.450
And when you have widgets,
it's taking the widgets component and

116
00:07:58.450 --> 00:07:59.590
putting it into the router outlet.

117
00:07:59.590 --> 00:08:02.200
So you essentially have this
dynamic piece in your code.

118
00:08:02.200 --> 00:08:06.630
That would just dynamically load
components into it depending on your

119
00:08:06.630 --> 00:08:07.130
router state.

120
00:08:08.200 --> 00:08:14.780
So if we go back here,
essentially we define a route table

121
00:08:14.780 --> 00:08:21.060
that is of a type route that just, in the
simplest form, has a path and a component.

122
00:08:21.060 --> 00:08:23.660
And then from there,
when you hit upon that path,

123
00:08:23.660 --> 00:08:29.590
it will just take that component and
load it into the router-outlet component,

124
00:08:29.590 --> 00:08:31.798
which is just something
that's is in the DOM,

125
00:08:31.798 --> 00:08:35.620
it's that if you're at this path,
take this component and load it in here.

126
00:08:35.620 --> 00:08:39.445
And then we can just navigate
to routes using routerLink, or

127
00:08:39.445 --> 00:08:42.750
router.navigate if you
wanna do it imperatively.

128
00:08:45.890 --> 00:08:50.320
This is a gotcha here that the router
uses history.pushState, so

129
00:08:50.320 --> 00:08:57.720
you need to set a base-ref in your HTML so
that it can effectively handle that.

130
00:08:57.720 --> 00:09:01.640
Cuz prior to Angular 2 you could
do HTML 5 mode, but by default,

131
00:09:01.640 --> 00:09:05.030
it was essentially hashtag
whatever your route was.

132
00:09:05.030 --> 00:09:12.090
And so now, you'll notice that if I go
back here, that on widget or items,

133
00:09:12.090 --> 00:09:16.410
you'll notice that it's just forward
slash and there's not a hashtag in there.

134
00:09:16.410 --> 00:09:18.390
And so you can set that up if you want.

135
00:09:18.390 --> 00:09:20.880
There are cases where you need to do that.

136
00:09:20.880 --> 00:09:24.111
But as a whole,
it's HTML5 mode by default.

137
00:09:32.381 --> 00:09:32.984
&gt;&gt; Lukas Ruebbelke: And so

138
00:09:32.984 --> 00:09:36.250
what we have here is our routes.

139
00:09:37.360 --> 00:09:42.420
Which is essentially just
an array of route objects.

140
00:09:42.420 --> 00:09:44.470
And we have a path and a component.

141
00:09:44.470 --> 00:09:46.799
So if we go to the items path,

142
00:09:46.799 --> 00:09:51.860
then the items component gets
loaded into the router outlet.

143
00:09:51.860 --> 00:09:56.546
And then what we're doing at the bottom
is, essentially within our imports,

144
00:09:56.546 --> 00:10:00.540
we're calling router module for
route and passing our routes in.

145
00:10:00.540 --> 00:10:05.820
And what that does is,
it returns fully configured routes,

146
00:10:05.820 --> 00:10:09.240
essentially service, that we can
then pass along to our application.

147
00:10:09.240 --> 00:10:11.440
So we'll get into more of that today.

148
00:10:13.250 --> 00:10:14.330
And components.

149
00:10:14.330 --> 00:10:20.810
So components are the atomic building
block of Angular 2 applications.

150
00:10:20.810 --> 00:10:24.960
And so when I say component, if you'll
remember on the Angular 1 big picture,

151
00:10:24.960 --> 00:10:30.880
we had essentially a component or
a controller, scope and a template.

152
00:10:30.880 --> 00:10:34.700
Well this is essentially, we've combined
that together into a component.

153
00:10:34.700 --> 00:10:39.040
So component has a template and a class.

154
00:10:41.420 --> 00:10:44.570
And so
a component class is just an ES6 class.

155
00:10:44.570 --> 00:10:49.020
So you'll notice when I say that
Angular 2 is, essentially because it's

156
00:10:49.020 --> 00:10:55.060
standard-based, we're letting really
ES6 the browser do a lot of the work.

157
00:10:55.060 --> 00:10:57.920
So our components are just ES6 classes.

158
00:10:57.920 --> 00:10:58.480
Properties and

159
00:10:58.480 --> 00:11:03.210
methods of the component class,
then those are available to the template.

160
00:11:06.430 --> 00:11:09.720
Dependencies are injected
in the constructor.

161
00:11:09.720 --> 00:11:14.716
And then we have life-cycle hooks,
so that when certain events

162
00:11:14.716 --> 00:11:19.724
happen to our component we can
tap into those and leverage them.

163
00:11:19.724 --> 00:11:24.630
And so what this looks like is, we have
an ES6 class called items component.

164
00:11:24.630 --> 00:11:27.290
And we're implementing
the UnInit interface,

165
00:11:27.290 --> 00:11:28.810
which you can see here at the bottom.

166
00:11:28.810 --> 00:11:33.870
It's ngUnInit(), so it's saying when all
the data bindings have been initialized,

167
00:11:33.870 --> 00:11:35.900
then go ahead and call this method.

168
00:11:36.946 --> 00:11:41.040
Items and selectedItem,
because those are properties on the class,

169
00:11:41.040 --> 00:11:46.030
we can them bind to them in the template,
and we are injecting ItemsService

170
00:11:46.030 --> 00:11:50.625
into our constructor so now, you can
see with an ngUnInit() then we can call

171
00:11:50.625 --> 00:11:53.370
this.itemsService and
it's available for us.

172
00:11:55.620 --> 00:11:56.510
Now on the flip side.

173
00:11:57.930 --> 00:12:04.440
The template, surprise,
tells Angular how to render a component.

174
00:12:04.440 --> 00:12:08.790
And so this includes,
really data bindings, but

175
00:12:08.790 --> 00:12:13.360
it can also contain other components and
directives.

176
00:12:13.360 --> 00:12:17.317
And so, when we get into component-driven
architecture, we're gonna see a lot of

177
00:12:17.317 --> 00:12:20.942
this, is you really want small
fine-grained components that contain other

178
00:12:20.942 --> 00:12:24.454
small fine-grained components, so
not only can you bind the things, but

179
00:12:24.454 --> 00:12:28.160
you can contain sub-components, and
that's actually encouraged to do so.

180
00:12:30.440 --> 00:12:33.800
Angular 2 leverages native DOM events and
properties.

181
00:12:33.800 --> 00:12:37.570
So what this does again, is it reduces
the need for custom directives.

182
00:12:37.570 --> 00:12:43.128
You no longer need like ng-mouseup,
ng-mousedown,

183
00:12:43.128 --> 00:12:49.879
cuz you can bind directly to that
DOM event, and handle it that way.

184
00:12:49.879 --> 00:12:52.308
This is actually one of
my favorite features,

185
00:12:52.308 --> 00:12:55.970
I have a bonus module at the end
that I may talk about briefly.

186
00:12:55.970 --> 00:12:58.740
But Angular 2 by default
leverages shadow DOM.

187
00:12:59.960 --> 00:13:02.210
And so what this allows you to do is,

188
00:13:02.210 --> 00:13:06.000
essentially encapsulate
styles to your component.

189
00:13:06.000 --> 00:13:11.330
So if anybody has ever done components
that get shared across an organization,

190
00:13:12.420 --> 00:13:15.760
that you have something that's beautiful
and somebody does something totally

191
00:13:15.760 --> 00:13:20.980
irresponsible so it's just I think all
buttons should be 200 pixels wide.

192
00:13:20.980 --> 00:13:24.924
And they set some top-level super
generic button with 200 pix or

193
00:13:24.924 --> 00:13:27.910
something, and
it just blows your component out.

194
00:13:29.010 --> 00:13:32.570
And that's the problem with
CSS is the C stands for

195
00:13:32.570 --> 00:13:35.650
cascading and not for component.

196
00:13:35.650 --> 00:13:40.350
But using shadow DOM, or
by default emulate a shadow DOM,

197
00:13:40.350 --> 00:13:45.560
we can actually encapsulate those
styles to the component itself.

198
00:13:45.560 --> 00:13:47.730
So that's super super cool.

199
00:13:47.730 --> 00:13:49.458
And if we have any UI designers or

200
00:13:49.458 --> 00:13:53.819
developers who are doing component
libraries, they should just be like, yes!

201
00:13:53.819 --> 00:13:58.073
Because this is going to
save a lot of heartaches,

202
00:13:58.073 --> 00:14:03.136
a lot of tears and the fact that
when I give this to somebody,

203
00:14:03.136 --> 00:14:09.751
they're not gonna have the ability to
mess it up, or it becomes a lot harder.

204
00:14:09.751 --> 00:14:14.211
And so what we have here,
in ItemsListComponent,

205
00:14:14.211 --> 00:14:19.620
we're actually using template
URL to point to the template.

206
00:14:20.900 --> 00:14:25.476
But one thing I wanna call out is,
you can also use template and

207
00:14:25.476 --> 00:14:27.504
do your templates inline.

208
00:14:27.504 --> 00:14:31.270
And so this is generally by default,
where I start.

209
00:14:32.340 --> 00:14:35.760
The idea is that if your components
are fine-grained enough,

210
00:14:35.760 --> 00:14:40.980
the template should comfortably
live within the metadata.

211
00:14:40.980 --> 00:14:46.670
So for instance, if you have a template
that's 200 lines long of HTML,

212
00:14:46.670 --> 00:14:51.970
you can kinda stop and say, this doesn't
feel right, maybe I'm doing too much and

213
00:14:51.970 --> 00:14:55.000
I need to break this into
smaller sub-components.

214
00:14:55.000 --> 00:14:57.260
So really kind of
the general rule of thumb,

215
00:14:57.260 --> 00:15:03.780
is that your templates should be small
enough to go in-line to the component.

216
00:15:03.780 --> 00:15:05.360
Now, this is not something for

217
00:15:05.360 --> 00:15:10.500
me personally that I'm willing
to make into a religious war.

218
00:15:10.500 --> 00:15:15.010
I'm not going to belittle you,
or get upset, or offended.

219
00:15:15.010 --> 00:15:17.380
There are cases, for
instance if you're doing forms or

220
00:15:17.380 --> 00:15:21.900
somebody else is doing the HTML markup,
to do it as an external template.

221
00:15:21.900 --> 00:15:26.530
But as a whole I recommend, start here and

222
00:15:26.530 --> 00:15:29.440
then when it becomes cumbersome stop and
ask why.

223
00:15:29.440 --> 00:15:32.147
And there may be a case to break out or
not.

224
00:15:32.147 --> 00:15:33.253
Yes.
&gt;&gt; Speaker 2: Mike has

225
00:15:33.253 --> 00:15:38.107
a question from the room, is the native
DOM used where it's available?

226
00:15:38.107 --> 00:15:40.750
Excuse me,
native shadow DOM used where it's

227
00:15:40.750 --> 00:15:41.662
available?
&gt;&gt; Lukas Ruebbelke: So

228
00:15:41.662 --> 00:15:43.100
you can turn that on.

229
00:15:44.180 --> 00:15:49.190
You can turn on, essentially you have view
encapsulation, you can turn it to native.

230
00:15:49.190 --> 00:15:51.370
So by default it's emulated.

231
00:15:51.370 --> 00:15:54.543
And so Angular is gonna
basically emulate shadow DOM.

232
00:15:54.543 --> 00:16:00.050
But unless you are developing
in a vacuum on one browser,

233
00:16:00.050 --> 00:16:06.950
I think that if you go to native shadow
DOM, you are asking for trouble.

234
00:16:09.020 --> 00:16:11.250
Just because the browser support is so
poor for that right now.

235
00:16:11.250 --> 00:16:17.180
So it's not by default, it's
essentially emulated, which does work.

236
00:16:17.180 --> 00:16:21.948
But you can essentially set that on the
component is view encapsulation.native.

237
00:16:23.120 --> 00:16:25.392
Good question.
&gt;&gt; Speaker 2: Follow-up,

238
00:16:25.392 --> 00:16:27.380
well not a follow-up, another question.
&gt;&gt; Lukas Ruebbelke: Yes.

239
00:16:27.380 --> 00:16:29.540
&gt;&gt; Speaker 2: Annie is asking would UnInit

240
00:16:29.540 --> 00:16:32.200
run before or after the constructor?
&gt;&gt; Lukas Ruebbelke: That is

241
00:16:32.200 --> 00:16:33.250
a fantastic question.

242
00:16:33.250 --> 00:16:37.450
So UnInit runs after the constructor.

243
00:16:37.450 --> 00:16:42.130
And so I'm getting ahead of my slides
a bit, but what you wanna actually do is

244
00:16:42.130 --> 00:16:48.120
keep essentially initialization
logic out of your constructor.

245
00:16:48.120 --> 00:16:51.680
Because one, it makes it harder to test,
but more importantly is you may have

246
00:16:51.680 --> 00:16:57.660
a dependency further upstream that
depends on an asynchronous call.

247
00:16:57.660 --> 00:17:00.050
So your constructor is
going to run right away.

248
00:17:00.050 --> 00:17:04.810
But that incoming data may not be there,
when the constructor runs.

249
00:17:04.810 --> 00:17:06.970
And so you will throw an error.

250
00:17:06.970 --> 00:17:12.330
So what you wanna do is actually move
your initialization logic into ngUnInit,

251
00:17:12.330 --> 00:17:16.460
cuz then you know that,
hey all of my bindings

252
00:17:16.460 --> 00:17:21.490
that essentially I depend on have been
initialized, now I can safely go ahead and

253
00:17:21.490 --> 00:17:25.630
depend on the knowledge, that this
particular property is available.

254
00:17:25.630 --> 00:17:29.890
And so that was a mistake I made
when I started learning Angular 2,

255
00:17:29.890 --> 00:17:33.385
is I would basically bind to something,
essentially passing something into my

256
00:17:33.385 --> 00:17:37.420
child-component, and I would just
start doing things in the constructor.

257
00:17:37.420 --> 00:17:39.790
It's like, this thing, it's not here yet.

258
00:17:39.790 --> 00:17:42.306
It's en route from the server.

259
00:17:42.306 --> 00:17:45.380
And so
ngUnInit runs after the constructor, and

260
00:17:45.380 --> 00:17:49.640
that's really where all of your
initialization logic should live.

