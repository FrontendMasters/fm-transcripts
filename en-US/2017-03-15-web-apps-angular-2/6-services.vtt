WEBVTT

1
00:00:00.370 --> 00:00:06.230
&gt;&gt; Lukas Ruebbelke: Services, a service
is generally by that 99% of the time,

2
00:00:06.230 --> 00:00:07.400
is a class 100% of the time.

3
00:00:08.430 --> 00:00:10.590
I've actually only ever
used them as classes.

4
00:00:10.590 --> 00:00:14.180
But Pascal,
there are ways that you can actually,

5
00:00:14.180 --> 00:00:15.880
essentially use an enom or a value.

6
00:00:15.880 --> 00:00:19.890
So when they go one,
you can go dot value or dot constant.

7
00:00:19.890 --> 00:00:24.660
You can do that, but
generally a service is just a class.

8
00:00:24.660 --> 00:00:26.740
And it should do one specific thing.

9
00:00:26.740 --> 00:00:32.300
So this is single purpose role, and
what you want to do is take the burden

10
00:00:32.300 --> 00:00:37.600
of business logic out of your components,
and put into a service.

11
00:00:37.600 --> 00:00:40.560
So it's going back to this graph,

12
00:00:40.560 --> 00:00:44.160
is you want to keep your
components as thin as possible.

13
00:00:44.160 --> 00:00:48.030
So components really,
in my opinion, have two jobs.

14
00:00:48.030 --> 00:00:51.850
One, to consume the data that it
needs to satisfy its template.

15
00:00:53.180 --> 00:01:00.400
Secondly, is to capture user information
and convey that to a service for handling.

16
00:01:02.290 --> 00:01:04.330
I see a hand coming up.
&gt;&gt; Speaker 2: Okay, so

17
00:01:04.330 --> 00:01:05.910
question again from Annie.

18
00:01:05.910 --> 00:01:11.100
Would the constructor ever run before
the dom is finished rendering?

19
00:01:11.100 --> 00:01:11.702
&gt;&gt; Lukas Ruebbelke: Yes.

20
00:01:13.712 --> 00:01:14.417
&gt;&gt; Lukas Ruebbelke: Yes, that is

21
00:01:14.417 --> 00:01:15.320
a possibility.

22
00:01:16.680 --> 00:01:21.910
For instance, if within your you, the dom,

23
00:01:21.910 --> 00:01:24.590
was dependent on something
that was still coming.

24
00:01:24.590 --> 00:01:29.230
So the constructural run before your
bindings are completely initialized,

25
00:01:29.230 --> 00:01:33.450
which means that if your
bindings aren't initialized,

26
00:01:33.450 --> 00:01:35.150
then certain things
are not going to render.

27
00:01:35.150 --> 00:01:39.480
So that's absolutely why we use or
we use life cycle hooks.

28
00:01:39.480 --> 00:01:43.972
Specifically to make sure
that something doesn't run

29
00:01:43.972 --> 00:01:46.937
before the dom is even done rendering, or

30
00:01:46.937 --> 00:01:55.939
even able to render.
&gt;&gt; Lukas Ruebbelke: So

31
00:01:55.939 --> 00:01:59.896
it's considered best practice
to always use injectable so

32
00:01:59.896 --> 00:02:03.810
that the metadata is generated correctly.

33
00:02:03.810 --> 00:02:09.130
So technically you can write a service
that doesn't use injectable, but

34
00:02:09.130 --> 00:02:12.914
if that service has any dependencies,

35
00:02:12.914 --> 00:02:16.790
in other words you're trying to inject
something else into it, it will fail.

36
00:02:16.790 --> 00:02:21.261
So just by default,
I always make it a point to

37
00:02:21.261 --> 00:02:26.100
put just Injectable on top of my service.

38
00:02:26.100 --> 00:02:32.996
So you can see here, it's just a class,
and we're just going @Injectable.

39
00:02:32.996 --> 00:02:37.710
Remember they're functions so you always
have to call them, this will be a got you.

40
00:02:37.710 --> 00:02:42.180
I'm certain somebody's going to
forget to put that in there.

41
00:02:42.180 --> 00:02:46.020
The parenthesis, and
something your gonna throw an error.

42
00:02:47.040 --> 00:02:52.190
And so we have here, just a class
methods properties constructors,

43
00:02:52.190 --> 00:02:55.240
and we make it available
through Injectable.

44
00:02:56.700 --> 00:03:00.945
And then we, as we saw in the ng module,

45
00:03:00.945 --> 00:03:04.790
then you just have to import it, and
then add it into your providers array.

