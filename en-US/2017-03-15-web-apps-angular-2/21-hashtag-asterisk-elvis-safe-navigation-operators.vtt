WEBVTT

1
00:00:00.270 --> 00:00:02.000
&gt;&gt; Lukas Ruebbelke: All right,
so this gets interesting.

2
00:00:02.000 --> 00:00:04.457
We have a local template variable, and so

3
00:00:04.457 --> 00:00:08.120
you'll see this especially
when we're working with forms.

4
00:00:08.120 --> 00:00:14.518
But we have the ability to essentially
take an element in our HTML and

5
00:00:14.518 --> 00:00:19.692
assign it a variable that
Angular can then reference.

6
00:00:19.692 --> 00:00:24.920
So it's available essentially
anywhere within the current template,

7
00:00:24.920 --> 00:00:29.760
but it's also available in
the component using view child.

8
00:00:29.760 --> 00:00:34.271
So this is kind of out of
scope of this discussion, but

9
00:00:34.271 --> 00:00:38.786
anytime you want to create
a variable that references

10
00:00:38.786 --> 00:00:43.930
a specific element in your markup,
you do so with a hashtag.

11
00:00:43.930 --> 00:00:47.700
And to consume it we simply
use it without the hashtags.

12
00:00:47.700 --> 00:00:52.330
So big question,
what the heck am I talking about here?

13
00:00:54.650 --> 00:00:58.553
&gt;&gt; Lukas Ruebbelke: So
when you're using forms in Angular, and

14
00:00:58.553 --> 00:01:01.196
we'll cover this tomorrow.

15
00:01:01.196 --> 00:01:07.190
What Angular does is, you have your
HTML that represents your form.

16
00:01:08.910 --> 00:01:14.450
And you're essentially binding that
form to an object of some sort.

17
00:01:14.450 --> 00:01:19.277
So you can see here,
that we are binding this form,

18
00:01:19.277 --> 00:01:26.368
we have two inputs that's bound to
really item description and item name.

19
00:01:26.368 --> 00:01:31.893
But you'll notice here that, or
rather because you have something bound

20
00:01:31.893 --> 00:01:37.700
to a form that doesn't really give you
an indication of the state of the form.

21
00:01:39.200 --> 00:01:39.820
For instance,

22
00:01:40.900 --> 00:01:45.200
you'll notice that on our selected
item name that is a required field.

23
00:01:46.320 --> 00:01:53.590
Well how do we know the state
of the form that we're in?

24
00:01:53.590 --> 00:01:57.730
Like how do we separate the actual
values of the form that it's bound to,

25
00:01:57.730 --> 00:01:58.780
to the state of the form?

26
00:01:58.780 --> 00:02:04.380
So for instance, does the values in the
form match the requirements of the form,

27
00:02:04.380 --> 00:02:06.580
like is it actually valid?

28
00:02:06.580 --> 00:02:09.205
And so
what Angular does under the hood and

29
00:02:09.205 --> 00:02:12.806
it did this in Angular 1 in
the form of a form controller.

30
00:02:12.806 --> 00:02:17.689
Is it kind of implicitly
creates essentially this entity

31
00:02:17.689 --> 00:02:23.360
behind the scenes,
that is keeping track of your form.

32
00:02:23.360 --> 00:02:29.240
So in this case, we can reference
that by creating a local variable

33
00:02:29.240 --> 00:02:32.090
called dollar formRef,
you can call it whatever you want.

34
00:02:33.110 --> 00:02:37.840
And we're simply saying
dollar formRef = ngForm.

35
00:02:37.840 --> 00:02:41.720
So ngForm is essentially
the top level form group

36
00:02:41.720 --> 00:02:44.220
that's keeping track of
the state of your form.

37
00:02:44.220 --> 00:02:46.800
So don't worry too much
about this right now.

38
00:02:46.800 --> 00:02:50.926
Just know that Angular
has to keep track of,

39
00:02:50.926 --> 00:02:56.287
if your form is valid or not and
it does that using ngForm.

40
00:02:56.287 --> 00:02:57.580
Yes?

41
00:02:57.580 --> 00:03:01.875
&gt;&gt; Speaker 2: Two questions up,
when do we need to use ATR?

42
00:03:01.875 --> 00:03:02.525
&gt;&gt; Lukas Ruebbelke: Attribute.

43
00:03:02.525 --> 00:03:06.122
&gt;&gt; Speaker 2: Yep, and
when will we be doing template drive and

44
00:03:06.122 --> 00:03:08.690
reactive forms as well?

45
00:03:08.690 --> 00:03:10.040
&gt;&gt; Lukas Ruebbelke: So
we are going to start out with

46
00:03:10.040 --> 00:03:12.810
template driven forms tomorrow,
and we'll see how far we get.

47
00:03:14.860 --> 00:03:19.460
And you will need to use essentially
attribute when you are trying to

48
00:03:19.460 --> 00:03:23.660
bind to something that doesn't
actually exist on that element.

49
00:03:23.660 --> 00:03:26.095
So like for instance call span or
something like that is a good example.

50
00:03:26.095 --> 00:03:29.169
So when you're trying to basically bind
to attribute that doesn't exist on

51
00:03:29.169 --> 00:03:29.970
that element.

52
00:03:29.970 --> 00:03:32.600
I don't know, then you can use attribute.

53
00:03:32.600 --> 00:03:35.434
And there is actually some use cases
in the documentation where they talk

54
00:03:35.434 --> 00:03:36.510
specifically about that.

55
00:03:37.980 --> 00:03:40.620
But especially with SVG is
where you try to bind something

56
00:03:40.620 --> 00:03:42.390
that the native dome element,
it doesn't exist.

57
00:03:44.388 --> 00:03:46.539
&gt;&gt; Lukas Ruebbelke: All right,
so dollar formRef.

58
00:03:46.539 --> 00:03:51.146
We now have a reference to this
underlying form group that's

59
00:03:51.146 --> 00:03:54.140
keeping track of the state of the form.

60
00:03:56.515 --> 00:04:01.494
&gt;&gt; Lukas Ruebbelke: Now what I want
everyone to focus on is if we go to

61
00:04:01.494 --> 00:04:06.010
the bottom, button type="submit".

62
00:04:06.010 --> 00:04:11.826
Now we're binding to the disabled
property or attribute,

63
00:04:11.826 --> 00:04:18.353
and we're saying if formRef is not
valid then disable the button.

64
00:04:18.353 --> 00:04:23.110
And we know that formRef is not
valid because we are binding that

65
00:04:23.110 --> 00:04:25.010
essentially to ngForm.

66
00:04:28.874 --> 00:04:31.326
&gt;&gt; Lukas Ruebbelke: And so
let me actually, and so

67
00:04:31.326 --> 00:04:35.165
we can do this as well
with regular text input.

68
00:04:35.165 --> 00:04:39.160
So just so everybody can see this.

69
00:04:42.061 --> 00:04:44.646
&gt;&gt; Lukas Ruebbelke: So now I'm

70
00:04:44.646 --> 00:04:51.288
creating,
&gt;&gt; Lukas Ruebbelke: A local template

71
00:04:51.288 --> 00:04:56.670
variable called colorInput
as denoted by the hashtag,

72
00:04:56.670 --> 00:05:01.780
let me actually just expand this out here.

73
00:05:01.780 --> 00:05:03.174
&gt;&gt; Lukas Ruebbelke: And so now,

74
00:05:03.174 --> 00:05:04.990
let's go and,

75
00:05:11.685 --> 00:05:12.450
&gt;&gt; Lukas Ruebbelke: Actually,
let's do this.

76
00:05:12.450 --> 00:05:17.312
So just one pro tip,
this actually one of the most common

77
00:05:17.312 --> 00:05:22.691
things I use in Angular,
is when you want to debug something,

78
00:05:22.691 --> 00:05:29.008
pre-tag whatever you want to actually,
&gt;&gt; Lukas Ruebbelke: Debug.

79
00:05:29.008 --> 00:05:33.378
And then if you use JSON, essentially
what this does is it takes an object and

80
00:05:33.378 --> 00:05:34.850
it calls to JSON on it.

81
00:05:34.850 --> 00:05:39.556
And so now by wrapping this
in this pre-tag you get

82
00:05:39.556 --> 00:05:43.829
this kind of pretty JSON
object in your page.

83
00:05:43.829 --> 00:05:44.800
So we'll go here.

84
00:05:49.154 --> 00:05:49.970
&gt;&gt; Lukas Ruebbelke: And
hold on one second.

85
00:05:53.479 --> 00:05:58.199
&gt;&gt; Lukas Ruebbelke: There's one caveat.

86
00:06:01.980 --> 00:06:04.240
&gt;&gt; Lukas Ruebbelke: Believe this is it.

87
00:06:12.317 --> 00:06:12.817
&gt;&gt; Lukas Ruebbelke: There we go.

88
00:06:13.940 --> 00:06:18.516
So it doesn't allow me to actually
do two JSON on the core object.

89
00:06:18.516 --> 00:06:23.150
But I can actually grab the value
of it and dump that out.

90
00:06:23.150 --> 00:06:28.365
So this is where local template
variables come in handy,

91
00:06:28.365 --> 00:06:35.440
is when you can reference something
else into the inter template somewhere.

92
00:06:35.440 --> 00:06:40.860
So if we go here let's actually see,
and try something here.

93
00:06:55.470 --> 00:06:56.342
&gt;&gt; Lukas Ruebbelke: Okay, so

94
00:06:56.342 --> 00:07:01.038
I think that only works on the,
&gt;&gt; Lukas Ruebbelke: Hold on,

95
00:07:01.038 --> 00:07:05.649
so if I went like,
&gt;&gt; Lukas Ruebbelke: Let's do

96
00:07:05.649 --> 00:07:07.646
this on a form.

97
00:07:07.646 --> 00:07:10.862
So we'll go form,

98
00:07:10.862 --> 00:07:17.544
now validate,
&gt;&gt; Lukas Ruebbelke: ngForm,

99
00:07:17.544 --> 00:07:19.252
&gt;&gt; Lukas Ruebbelke: Then let's just put

100
00:07:19.252 --> 00:07:20.461
this in here.

101
00:07:30.354 --> 00:07:33.640
&gt;&gt; Lukas Ruebbelke: I'm getting ahead
of myself a little bit, but YOLO.

102
00:07:49.487 --> 00:07:53.919
&gt;&gt; Lukas Ruebbelke: Okay, so
now what I've done is I've created a local

103
00:07:53.919 --> 00:07:57.460
reference to the form and I can output it.

104
00:07:57.460 --> 00:08:02.213
And then you'll see here, and so
this is really what I was talking about,

105
00:08:02.213 --> 00:08:04.291
about the state of the form.

106
00:08:04.291 --> 00:08:06.258
It's no longer valid, so it's false.

107
00:08:06.258 --> 00:08:08.998
And then with just our
typing you can see now,

108
00:08:08.998 --> 00:08:14.560
there's something under the hood keeping
track of like this is a valid element.

109
00:08:14.560 --> 00:08:15.080
Makes sense?

110
00:08:16.310 --> 00:08:20.220
So this is just a way to
keep track of local template

111
00:08:21.770 --> 00:08:24.610
elements, and
you can then perform additional logic.

112
00:08:33.027 --> 00:08:38.091
&gt;&gt; Lukas Ruebbelke: So Angular does
come with some built-in directives that

113
00:08:38.091 --> 00:08:42.950
ships with it, and
they're broken into two classes.

114
00:08:42.950 --> 00:08:47.920
So structural directives, and
let's see if I can get into this.

115
00:08:47.920 --> 00:08:52.830
Actually, mainly structural
directives is that a structural

116
00:08:52.830 --> 00:08:56.638
directive essentially
changes the DOM layout.

117
00:08:56.638 --> 00:08:59.204
So there are attribute directives but
the main one,

118
00:08:59.204 --> 00:09:02.937
actually what I really wanna talk about
here, is structural directives and

119
00:09:02.937 --> 00:09:05.460
it essentially modifies
the structure of the DOM.

120
00:09:06.880 --> 00:09:12.174
Now what you're gonna see here,
&gt;&gt; Lukas Ruebbelke: Is within

121
00:09:12.174 --> 00:09:17.423
in these structural directives,

122
00:09:17.423 --> 00:09:20.138
so ngIf, ngFor,

123
00:09:20.138 --> 00:09:25.780
ngSwitch that there is an asterisk.

124
00:09:25.780 --> 00:09:29.403
I think we lost my screen,
&gt;&gt; Lukas Ruebbelke: And

125
00:09:29.403 --> 00:09:31.695
so you'll notice this asterisks here.

126
00:09:31.695 --> 00:09:37.015
So what this is, is it tells Angular that

127
00:09:37.015 --> 00:09:41.870
we are going to be modifying the DOM.

128
00:09:41.870 --> 00:09:45.861
And what that does is
provide syntactic sugar for

129
00:09:45.861 --> 00:09:50.534
Angular to essentially create
a template element within

130
00:09:50.534 --> 00:09:56.270
the page than then wraps what
we are going to actually modify.

131
00:09:56.270 --> 00:09:59.980
So what happens is when
you modify the DOM,

132
00:09:59.980 --> 00:10:04.426
kind of following this web
component kind of spec.

133
00:10:04.426 --> 00:10:08.642
Is that there's a template tag that
changes the way that a template is

134
00:10:08.642 --> 00:10:11.230
actually rendered or an element.

135
00:10:11.230 --> 00:10:16.200
So what Angular does is, when it's saying,
we are going to take this from the dom or

136
00:10:16.200 --> 00:10:19.950
add it in,
it will wrap that into a template tag.

137
00:10:19.950 --> 00:10:23.150
So this is something that unless
I told you, at this point,

138
00:10:23.150 --> 00:10:24.740
you would just never see it.

139
00:10:24.740 --> 00:10:26.896
It just happens completely under the hood.

140
00:10:26.896 --> 00:10:33.724
But the long hand version of this for
example, is you notice here we have at

141
00:10:33.724 --> 00:10:39.245
the top these spans that we're
saying based on toeChoice.

142
00:10:39.245 --> 00:10:43.873
If it's Eenie, Meanie, Miney or
Moe, then show this one element and

143
00:10:43.873 --> 00:10:46.110
then hide the other ones.

144
00:10:46.110 --> 00:10:50.360
But what's really happening under
the hood is that Angular's saying,

145
00:10:50.360 --> 00:10:52.280
we need to actually modify the DOM,

146
00:10:52.280 --> 00:10:57.760
wrap every one of these elements in
a template tag and then bind it.

147
00:10:59.060 --> 00:11:04.830
And so I would just prefer to do asterisk,
do my thing than

148
00:11:04.830 --> 00:11:09.360
having to go here and wrap all of these
elements in template tags and do that.

149
00:11:09.360 --> 00:11:14.240
So the team felt like this was just
a little verbose at the bottom,

150
00:11:14.240 --> 00:11:18.125
and so that's where they came
up with this asterisk operator.

151
00:11:18.125 --> 00:11:22.430
Again, you do not have to understand
digestion at a molecular level to

152
00:11:22.430 --> 00:11:23.300
enjoy eating.

153
00:11:26.180 --> 00:11:30.800
And one more navigation operator, and

154
00:11:30.800 --> 00:11:34.430
this is the safe navigation operator or
Elvis.

155
00:11:34.430 --> 00:11:38.110
And so occasionally you would
need to bind to something or

156
00:11:38.110 --> 00:11:42.310
a property in your DOM
that doesn't exist yet.

157
00:11:42.310 --> 00:11:46.463
So this will actually happen quite a bit
when you're working with observables where

158
00:11:46.463 --> 00:11:47.230
it can happen.

159
00:11:47.230 --> 00:11:51.614
And so what this does is it allows, so
previously Angular was just in 15 or

160
00:11:51.614 --> 00:11:56.642
1.s simply like this thing doesn't exist,
[NOISE] I'm just not gonna show it.

161
00:11:56.642 --> 00:11:57.744
Angular 2, they're little more strick and

162
00:11:57.744 --> 00:11:59.607
they're like if this things doesn't exist,
we're going to let you know.

163
00:11:59.607 --> 00:12:06.553
This is not good, and so
this allows us to safeguard against null,

164
00:12:06.553 --> 00:12:13.390
essentially null values that
were binding to in our template.

165
00:12:13.390 --> 00:12:17.601
So this would be an example of this.

166
00:12:17.601 --> 00:12:23.150
If we had a nullHero object, and
firstName did not exist on it.

167
00:12:23.150 --> 00:12:28.253
We could then use essentially
the safe navigation operator

168
00:12:28.253 --> 00:12:32.958
to say bind to this if it exists,
if not [NOISE] carry on.

169
00:12:32.958 --> 00:12:35.526
Makes sense?

170
00:12:39.373 --> 00:12:40.797
&gt;&gt; Lukas Ruebbelke: Okay, let me show you,

171
00:12:40.797 --> 00:12:45.580
I'll just show you a few more examples
then we'll get into the code challenge.

172
00:12:52.257 --> 00:12:53.140
&gt;&gt; Lukas Ruebbelke: Let's see here.

173
00:12:57.333 --> 00:13:01.699
&gt;&gt; Lukas Ruebbelke: Let's go colors,
hopefully that's not

174
00:13:01.699 --> 00:13:05.947
a reserved word, blue, red, tomato.

175
00:13:10.180 --> 00:13:12.924
&gt;&gt; Speaker 2: Papayawhip.

176
00:13:12.924 --> 00:13:13.840
&gt;&gt; Lukas Ruebbelke: Papayawhip?

177
00:13:13.840 --> 00:13:15.598
&gt;&gt; Speaker 2: Papayawhip.

178
00:13:15.598 --> 00:13:17.243
&gt;&gt; Lukas Ruebbelke: My goodness,
this is amazing.

179
00:13:21.990 --> 00:13:22.814
&gt;&gt; Lukas Ruebbelke: Papayawhip.

180
00:13:22.814 --> 00:13:25.968
&gt;&gt; Speaker 2: Yep.

181
00:13:25.968 --> 00:13:29.823
&gt;&gt; Lukas Ruebbelke: I'm kind of skeptical,
&gt;&gt; Lukas Ruebbelke: And more so

182
00:13:29.823 --> 00:13:31.946
I'm eagerly impressed, one part skeptical,

183
00:13:31.946 --> 00:13:34.665
three parts impressed that you
actually know these colors.

184
00:13:34.665 --> 00:13:37.402
Holy!

185
00:13:37.402 --> 00:13:42.221
&gt;&gt; Speaker 3: I think it's
from Bryan Holts class, right?

186
00:13:42.221 --> 00:13:49.018
&gt;&gt; Speaker 2: No, no, no,
it's 147 colors with some fanciful names.

187
00:13:53.132 --> 00:13:55.925
&gt;&gt; Lukas Ruebbelke: I feel like I've been
living below my privileges as a human

188
00:13:55.925 --> 00:13:57.070
being up to this point.

189
00:13:59.678 --> 00:14:04.156
&gt;&gt; Lukas Ruebbelke: All right, so,
&gt;&gt; Lukas Ruebbelke: Let's just keep this

190
00:14:04.156 --> 00:14:04.750
party going.

191
00:14:05.780 --> 00:14:14.467
I now have a collection of colors that
I would like to display on the stage.

192
00:14:14.467 --> 00:14:17.486
So first things first, let's use ngFor.

193
00:14:19.389 --> 00:14:24.270
&gt;&gt; Lukas Ruebbelke: So actually talk
about some of these, I realized.

194
00:14:24.270 --> 00:14:30.784
So ngFor what this does is it says for
every item in this collection go ahead and

195
00:14:30.784 --> 00:14:34.609
stamp out this element as a template,
okay?

196
00:14:34.609 --> 00:14:38.910
So we'll go let color,
that's gonna be interesting.

197
00:14:38.910 --> 00:14:40.214
You know what?
let c of

198
00:14:40.214 --> 00:14:45.003
colors,
&gt;&gt; Lukas Ruebbelke: And

199
00:14:45.003 --> 00:14:45.918
then we'll just go c.

200
00:14:48.191 --> 00:14:49.090
&gt;&gt; Lukas Ruebbelke: Let's
see what happens.

201
00:14:54.459 --> 00:14:57.320
&gt;&gt; Lukas Ruebbelke: All right,
&gt;&gt; Lukas Ruebbelke: I'm gonna go in here.

202
00:15:00.265 --> 00:15:04.658
&gt;&gt; Lukas Ruebbelke: Then what it's doing,
&gt;&gt; Lukas Ruebbelke: Is,

203
00:15:04.658 --> 00:15:06.404
&gt;&gt; Lukas Ruebbelke: Basically stamping out

204
00:15:06.404 --> 00:15:08.240
one of these every time.

205
00:15:11.239 --> 00:15:15.866
&gt;&gt; Lukas Ruebbelke: If we go back,
&gt;&gt; Lukas Ruebbelke: Let's take this

206
00:15:15.866 --> 00:15:17.467
a step further.

207
00:15:20.705 --> 00:15:29.901
&gt;&gt; Lukas Ruebbelke: So,
&gt;&gt; Lukas Ruebbelke: background.

208
00:15:33.866 --> 00:15:34.587
&gt;&gt; Lukas Ruebbelke: color maybe?

209
00:15:34.587 --> 00:15:36.513
Let's try this.

210
00:15:38.037 --> 00:15:41.285
&gt;&gt; Speaker 2: It's probably
capitalized as opposed to dash

211
00:15:41.285 --> 00:15:45.151
[INAUDIBLE]
&gt;&gt; Lukas Ruebbelke: Sounds

212
00:15:45.151 --> 00:15:47.100
like a basis for a test.

213
00:15:51.568 --> 00:15:54.111
&gt;&gt; Lukas Ruebbelke: Cool, then,

214
00:16:04.487 --> 00:16:05.073
&gt;&gt; Lukas Ruebbelke: So ngFor,

215
00:16:05.073 --> 00:16:09.115
it basically takes a collection and
for every element in the collection,

216
00:16:09.115 --> 00:16:10.560
it stamps out a template.

217
00:16:12.233 --> 00:16:18.271
&gt;&gt; Lukas Ruebbelke: The other one
that I wanna show you is ngIf.

218
00:16:18.271 --> 00:16:26.389
So we'll go div,
&gt;&gt; Lukas Ruebbelke: *ngIF,

219
00:16:26.389 --> 00:16:29.180
and we'll just take this.

220
00:16:39.725 --> 00:16:41.168
&gt;&gt; Lukas Ruebbelke: We're simply
saying that if it's not valid,

221
00:16:41.168 --> 00:16:41.834
go ahead and show it.

222
00:16:41.834 --> 00:16:46.583
Fix your form sucka!

223
00:16:57.462 --> 00:17:01.700
&gt;&gt; Lukas Ruebbelke: Cuz now that
condition is true, then it evaluates.

224
00:17:01.700 --> 00:17:02.861
It'll go ahead and show it.

225
00:17:09.523 --> 00:17:14.788
&gt;&gt; Lukas Ruebbelke: So the question is,
&gt;&gt; Lukas Ruebbelke: So

226
00:17:14.788 --> 00:17:18.260
this is just like Swift optionals, talking
about the safe navigation operator.

227
00:17:18.260 --> 00:17:20.033
I believe yes, that is.

228
00:17:20.033 --> 00:17:25.270
And Yohana's asked is there
something equal to index?

229
00:17:26.320 --> 00:17:30.479
And I'm pretty sure there is, let me
just double check the Docs real quick.

230
00:17:30.479 --> 00:17:35.300
I haven't needed to use this,
but I would wager.

231
00:17:35.300 --> 00:17:40.619
So now everybody gets to see,
when I get stuck how I solve this.

232
00:17:40.619 --> 00:17:47.209
This latest 4/API is probably the single
most helpful page in the entire,

233
00:17:54.397 --> 00:17:55.026
&gt;&gt; Lukas Ruebbelke: There we go.

234
00:17:58.489 --> 00:18:06.660
&gt;&gt; Lukas Ruebbelke: NgFor, yeah, so there
is additional properties, there we go.

235
00:18:09.060 --> 00:18:10.800
So let's actually try this,
so good question.

236
00:18:13.160 --> 00:18:15.430
&gt;&gt; Lukas Ruebbelke: [NOISE]
How would I do this?

237
00:18:15.430 --> 00:18:18.398
So we'll go.

238
00:18:24.471 --> 00:18:34.394
&gt;&gt; Lukas Ruebbelke: let
&gt;&gt; Lukas Ruebbelke: Okay,

239
00:18:50.155 --> 00:18:50.662
&gt;&gt; Lukas Ruebbelke: So you can see it

240
00:18:50.662 --> 00:18:52.353
starts at zero, zero,
one, two, three, four.

241
00:18:52.353 --> 00:18:55.440
And so you have the ability
to actually track the index.

