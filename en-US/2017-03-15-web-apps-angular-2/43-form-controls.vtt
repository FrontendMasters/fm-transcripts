WEBVTT

1
00:00:00.290 --> 00:00:02.070
&gt;&gt; Lukas Ruebbelke: So, Form Controls.

2
00:00:02.070 --> 00:00:06.858
This is what we've been seeing in
the code and it's responsible for

3
00:00:06.858 --> 00:00:09.385
tracking value, and validation.

4
00:00:09.385 --> 00:00:13.760
You can also group
FormControls with FormGroup.

5
00:00:16.083 --> 00:00:19.191
&gt;&gt; Lukas Ruebbelke: So let me see,
I think I have this in here.

6
00:00:27.612 --> 00:00:31.702
&gt;&gt; Lukas Ruebbelke: So using ngModelGroup,
you can actually bind these together or

7
00:00:31.702 --> 00:00:35.413
actually group these together,
but let me just backup and

8
00:00:35.413 --> 00:00:37.699
we'll talk about that in a moment.

9
00:00:37.699 --> 00:00:40.523
So the idea is you have a FormControl, but

10
00:00:40.523 --> 00:00:43.844
then you can group them
together in a FormGroup.

11
00:00:43.844 --> 00:00:48.146
And just like we created
a local reference to ngModel,

12
00:00:48.146 --> 00:00:53.206
we can reference the entire
FormGroup in the form using ngForm.

13
00:00:53.206 --> 00:00:58.782
And so this is where it does get
a little weird on the naming convention

14
00:00:58.782 --> 00:01:04.359
is when you wanna reference the top
level FormGroup, it's ngForm,

15
00:01:04.359 --> 00:01:10.148
but then you can then create a FormGroup
manually using ngModelGroup.

16
00:01:10.148 --> 00:01:13.612
And so, let's see what this
actually looks like in the code.

17
00:01:18.388 --> 00:01:19.717
&gt;&gt; Lukas Ruebbelke: So,
we have a single output.

18
00:01:19.717 --> 00:01:25.792
In order for this to work,
we do need to go form no action.

19
00:01:25.792 --> 00:01:28.412
Let's do novalidate and.

20
00:01:44.275 --> 00:01:46.422
&gt;&gt; Lukas Ruebbelke: We'll go myForm.

21
00:01:46.422 --> 00:01:49.697
Now instead of ngModel,
we're going to reference ngForm.

22
00:01:53.745 --> 00:01:55.389
&gt;&gt; Lukas Ruebbelke: Rather myForm,
here we go.

23
00:01:55.389 --> 00:02:00.718
So this is ngForm and
then we can now see this,

24
00:02:00.718 --> 00:02:05.489
but there's gonna be one caveat here and

25
00:02:05.489 --> 00:02:08.450
we've thrown an error.

26
00:02:08.450 --> 00:02:13.488
The reason being is and
actually I'm pretty happy about this,

27
00:02:13.488 --> 00:02:17.587
because this actually did
not used to be like this.

28
00:02:17.587 --> 00:02:21.889
So if you're using ngModel
within a form tag,

29
00:02:21.889 --> 00:02:25.529
either the name attribute must be set or

30
00:02:25.529 --> 00:02:30.510
the form control must be
defined in ngModelOptions.

31
00:02:31.580 --> 00:02:35.183
So what this means is wow.

32
00:02:35.183 --> 00:02:36.179
Actually, I didn't even notice this.

33
00:02:36.179 --> 00:02:38.068
I just saw what I need and I moved on.

34
00:02:38.068 --> 00:02:40.473
They actually give you some examples here.

35
00:02:40.473 --> 00:02:42.666
So, thank you, Angular Core team.

36
00:02:42.666 --> 00:02:50.064
This is helpful for
the the first time ever.

37
00:02:50.064 --> 00:02:51.097
Let's see here.

38
00:02:51.097 --> 00:02:56.272
Let's just close this and back to here.

39
00:02:56.272 --> 00:03:02.838
So, what we need to do here is
we just need to give it a name.

40
00:03:02.838 --> 00:03:07.792
And so,
what this does is Angular uses the name

41
00:03:07.792 --> 00:03:12.125
property to wire it in to the form group.

42
00:03:12.125 --> 00:03:15.037
So if we go back here,
now we put name on it

43
00:03:20.430 --> 00:03:23.304
&gt;&gt; Lukas Ruebbelke: We now have an object

44
00:03:23.304 --> 00:03:28.212
that represents our entire form?

45
00:03:28.212 --> 00:03:31.017
Well, that's not so impressive.

46
00:03:31.017 --> 00:03:32.150
We only have a single element.

47
00:03:34.510 --> 00:03:41.219
Let's spice things up a bit,
because yellow.

48
00:03:41.219 --> 00:03:45.612
If I can't have a drone
deliver my cookies,

49
00:03:45.612 --> 00:03:53.232
then the next best thing is creating
complex forms with more than one input.

50
00:03:53.232 --> 00:03:54.607
Imagine that.

51
00:03:54.607 --> 00:03:57.401
So, we'll go description.

52
00:04:16.272 --> 00:04:18.589
&gt;&gt; Lukas Ruebbelke: And
so now, we can see here.

53
00:04:22.970 --> 00:04:27.854
&gt;&gt; Lukas Ruebbelke: That not only are we
keeping track of all the values in

54
00:04:27.854 --> 00:04:31.080
our form, but also the validity.

55
00:04:36.495 --> 00:04:42.973
&gt;&gt; Lukas Ruebbelke: Let's do one more,
just because I really.

56
00:04:47.588 --> 00:04:48.498
&gt;&gt; Lukas Ruebbelke: Let's go div.

57
00:05:16.769 --> 00:05:17.868
&gt;&gt; Lukas Ruebbelke: Wait for it.

58
00:05:22.936 --> 00:05:25.494
&gt;&gt; Lukas Ruebbelke: Hold on,
I forgot one thing.

59
00:05:25.494 --> 00:05:27.862
Text, text, text, text, text.

60
00:05:31.854 --> 00:05:37.160
&gt;&gt; Lukas Ruebbelke: So because I am using
ngModel to bind to a property that does

61
00:05:37.160 --> 00:05:44.433
not yet exist on my component class,
you notice that when it initially loaded.

62
00:05:44.433 --> 00:05:46.807
So, let's just refresh this.

63
00:05:46.807 --> 00:05:54.288
It is not showing up in the FormGroup,
but you'll notice using ngModelGroup.

64
00:05:54.288 --> 00:05:56.687
I believe is what I called it.

65
00:05:56.687 --> 00:06:01.206
Yes, we are now essentially
grouping this form into

66
00:06:01.206 --> 00:06:06.135
an object that you're allowed
to essentially nest these

67
00:06:06.135 --> 00:06:10.857
properties into some object
that I think it's a little

68
00:06:10.857 --> 00:06:15.799
bit more descriptive of
essentially your domain model.

69
00:06:15.799 --> 00:06:19.787
So this is helpful when if you
actually wanted to submit,

70
00:06:19.787 --> 00:06:24.867
you could just send the entire basically
form object bag and pull it off.

71
00:06:28.454 --> 00:06:33.724
&gt;&gt; Lukas Ruebbelke: But you'll notice that
status is not there until you fill it out.

72
00:06:33.724 --> 00:06:40.060
The reason being is cuz I'm not
defining in my controller class.

73
00:06:43.199 --> 00:06:46.585
&gt;&gt; Lukas Ruebbelke: To the max.

74
00:06:46.585 --> 00:06:47.402
Refresh.

75
00:06:54.139 --> 00:06:54.893
&gt;&gt; Lukas Ruebbelke: There we go.

76
00:06:54.893 --> 00:07:01.096
So then the minute I delete one of these,

77
00:07:01.096 --> 00:07:08.402
it's saying, hey, the form is not here.

78
00:07:08.402 --> 00:07:14.085
So Russ asks, can you show an example of
using more than one model and a form?

79
00:07:14.085 --> 00:07:17.181
A nested form with associated models.

80
00:07:21.144 --> 00:07:22.087
&gt;&gt; Lukas Ruebbelke: Well.

81
00:07:25.021 --> 00:07:29.505
&gt;&gt; Lukas Ruebbelke: Unless I've
misunderstood the question,

82
00:07:29.505 --> 00:07:34.117
this is I mean,
this is how you would nest it.

83
00:07:34.117 --> 00:07:37.901
And in a sense, these title,
description and

84
00:07:37.901 --> 00:07:42.472
status are kinda three
independent things b or models.

85
00:07:42.472 --> 00:07:48.540
I mean, so what you could do
even is group these together to.

86
00:07:56.339 --> 00:07:57.188
&gt;&gt; Lukas Ruebbelke: Let's say, like.

87
00:08:01.128 --> 00:08:05.544
&gt;&gt; Lukas Ruebbelke: Widget, description,

88
00:08:05.544 --> 00:08:09.119
some description,

89
00:08:09.119 --> 00:08:14.376
then you can come back here and

90
00:08:14.376 --> 00:08:19.857
we can go some widget .title.

91
00:08:19.857 --> 00:08:23.908
SomeWidget description.

92
00:08:36.984 --> 00:08:37.590
&gt;&gt; Lukas Ruebbelke: There we go.

93
00:08:37.590 --> 00:08:39.737
So essentially,
we're just taking an object and

94
00:08:39.737 --> 00:08:42.507
then we're binding the fields
to the properties on the object.

95
00:08:54.290 --> 00:08:58.849
&gt;&gt; Lukas Ruebbelke: So, Javier wants
to know how would you validate a custom

96
00:08:58.849 --> 00:08:59.918
component?

97
00:08:59.918 --> 00:09:05.115
I imagine the custom component would
have to admit whether it's valid or not.

98
00:09:05.115 --> 00:09:08.742
Is there another cool way to do that?

99
00:09:08.742 --> 00:09:15.153
Yes, there is another
cool way to do that and

100
00:09:15.153 --> 00:09:20.536
it is tricky, essentially how do I.

101
00:09:28.389 --> 00:09:31.382
&gt;&gt; Lukas Ruebbelke: There's one
particular blog post that, here we go.

102
00:09:36.541 --> 00:09:40.213
&gt;&gt; Lukas Ruebbelke: So,
I'm going to delegate this as homework.

103
00:09:40.213 --> 00:09:45.682
So again, bringing up Pascal Precht and
his amazing contributions to the Angular

104
00:09:45.682 --> 00:09:50.685
community is he talks about creating
custom form controls in Angular two.

105
00:09:50.685 --> 00:09:57.558
And so, this is phenomenal and
you can actually have a custom thing.

106
00:09:57.558 --> 00:10:01.544
And so generally, when we think of a form,
we think of like, inputs,

107
00:10:01.544 --> 00:10:02.838
radio buttons, etc.

108
00:10:02.838 --> 00:10:07.363
That you can create any element and
cause it to essentially

109
00:10:07.363 --> 00:10:13.070
validate as if it were a form element,
a native form element.

110
00:10:13.070 --> 00:10:16.748
And the way to do that, let me see
if I can get to the punch line here.

111
00:10:16.748 --> 00:10:18.545
Wait for it.

112
00:10:27.908 --> 00:10:32.589
&gt;&gt; Lukas Ruebbelke: Is using.

113
00:10:32.589 --> 00:10:36.510
So one, this will hook, you use control.

114
00:10:36.510 --> 00:10:42.739
Let me go backup to the top.

115
00:10:42.739 --> 00:10:45.939
So, essentially using a custom
control value accessor.

116
00:10:45.939 --> 00:10:51.106
So this is kind of a pretty
advanced topic in Angular two,

117
00:10:51.106 --> 00:10:56.814
you can by implementing or
creating this custom value accessor

118
00:10:56.814 --> 00:11:02.213
you can cause an element to
behave like an element on a form.

119
00:11:02.213 --> 00:11:06.952
So let me go down here,
hold on real quick.

120
00:11:06.952 --> 00:11:09.857
I don't wanna go too deep into this,
but this is how you do it.

121
00:11:14.324 --> 00:11:19.572
&gt;&gt; Lukas Ruebbelke: Is you, essentially
create an input component that implements

122
00:11:19.572 --> 00:11:24.334
the control value accessor interface and
then from here,

123
00:11:24.334 --> 00:11:29.193
then it basically operates or
behaves like a form element,

124
00:11:29.193 --> 00:11:32.516
in so much that you can get ngModel on it.

125
00:11:32.516 --> 00:11:34.389
Actually, ngModel will work.

126
00:11:34.389 --> 00:11:37.623
And then from here,

127
00:11:37.623 --> 00:11:42.195
you can also do validation.

128
00:11:42.195 --> 00:11:44.248
So that is really, the nutshell on that.

129
00:11:44.248 --> 00:11:46.112
So you can do that, control value access.

130
00:11:46.112 --> 00:11:50.967
Or if you just Google, how did I get here?

131
00:11:55.797 --> 00:11:58.187
&gt;&gt; Lukas Ruebbelke: We've got some
form controls in Angular two.

132
00:11:58.187 --> 00:12:01.926
But if I RAM and this does work,
because I actually did something like

133
00:12:01.926 --> 00:12:05.872
this a couple of weeks ago using this
blog post as kind of the foundation.

134
00:12:11.620 --> 00:12:15.493
&gt;&gt; Lukas Ruebbelke: So now-
&gt;&gt; Speaker 2: Could you respond back again

135
00:12:15.493 --> 00:12:16.525
to Russ?

136
00:12:16.525 --> 00:12:17.355
He's looking for

137
00:12:17.355 --> 00:12:20.348
something a little different than
what you had initially said.

138
00:12:20.348 --> 00:12:23.194
&gt;&gt; Lukas Ruebbelke: So unfortunately,
I don't know if I understand the question.

139
00:12:23.194 --> 00:12:26.418
&gt;&gt; Speaker 2: Yeah, I'm not sure I
do either, but I'm trying to answer.

140
00:12:26.418 --> 00:12:31.214
I don't know, let me give it a go and
then we'll see where it goes.

141
00:12:31.214 --> 00:12:32.869
&gt;&gt; Lukas Ruebbelke: Sure.

142
00:12:32.869 --> 00:12:36.488
Because if we're talking about
Rails models and nesting those,

143
00:12:36.488 --> 00:12:39.137
that's something that I'm unfamiliar with.

144
00:12:42.510 --> 00:12:44.968
&gt;&gt; Lukas Ruebbelke: I think we have one.

145
00:12:56.057 --> 00:12:59.924
&gt;&gt; Lukas Ruebbelke: Here formRef,
we're pointing it to ngForm,

146
00:12:59.924 --> 00:13:04.954
ngModel,
&gt;&gt; Lukas Ruebbelke: And then here,

147
00:13:04.954 --> 00:13:12.198
we can essentially check the value
of the form as well as the validity.

148
00:13:12.198 --> 00:13:15.421
We can group this together
using entry model group.

149
00:13:15.421 --> 00:13:18.718
So, this is just a way to kind of
segment your data model in your form.

150
00:13:22.444 --> 00:13:26.110
&gt;&gt; Speaker 2: And as we saw earlier,
but this is here in the slides,

151
00:13:26.110 --> 00:13:30.440
essentially you now are able to
nest properties on the object.

