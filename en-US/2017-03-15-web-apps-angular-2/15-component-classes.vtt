WEBVTT

1
00:00:00.300 --> 00:00:02.700
&gt;&gt; Lukas Ruebbelke: In this module,
we're gonna talk about

2
00:00:02.700 --> 00:00:06.470
the anatomy of a component,
which we have already seen a bit.

3
00:00:06.470 --> 00:00:11.590
Then I'm going to talk about
a mnemonic that I came up with.

4
00:00:11.590 --> 00:00:15.290
I just noticed I was doing the same
thing over, and over, and over.

5
00:00:15.290 --> 00:00:20.775
And so I just came up with this
mnemonic of CIDER, which is class,

6
00:00:20.775 --> 00:00:25.890
import, decorate, enhance, repeat.

7
00:00:25.890 --> 00:00:31.000
Class, import, decorate being
kind of the three initial steps,

8
00:00:31.000 --> 00:00:33.600
then from there either you
kind of enhance or you

9
00:00:33.600 --> 00:00:38.520
basically augment the behavior to taste,
and then you repeat for subcomponents.

10
00:00:38.520 --> 00:00:41.508
And so we'll talk about how to
enhance with properties and methods,

11
00:00:41.508 --> 00:00:44.767
enhanced with injectables, and
than we'll talk about lifecycle hooks.

12
00:00:47.323 --> 00:00:50.246
&gt;&gt; Lukas Ruebbelke: So the anatomy
of a component, we've seen this,

13
00:00:50.246 --> 00:00:53.690
this graph is going to
become our best friend.

14
00:00:53.690 --> 00:00:59.649
There's actually not a lot to see here.

15
00:00:59.649 --> 00:01:04.582
In a sense is I think that you really have
a class, a template, metadata that kind

16
00:01:04.582 --> 00:01:09.317
of holds it together, and then you have
event binding and property binding.

17
00:01:09.317 --> 00:01:13.882
And so when it comes to really,
truly understanding

18
00:01:13.882 --> 00:01:19.290
a component in the broad sense
is its five kind of main pieces.

19
00:01:21.287 --> 00:01:25.640
&gt;&gt; Lukas Ruebbelke: Now let me just make
a point here real quick, that just because

20
00:01:25.640 --> 00:01:31.180
we're using classes does not by default
mean that we're using inheritance.

21
00:01:32.300 --> 00:01:38.100
So, coming from a more functional
programming background,

22
00:01:38.100 --> 00:01:40.890
that when I saw like my goodness,

23
00:01:40.890 --> 00:01:45.239
JavaScript is getting these classical
mechanisms baked into the spec.

24
00:01:46.240 --> 00:01:48.710
Like that does not bode well.

25
00:01:48.710 --> 00:01:53.060
Because now we're moving into
kind of Java enterprise-y,

26
00:01:53.060 --> 00:01:58.686
where you're gonna basically be like,
this class inherits from this class,

27
00:01:58.686 --> 00:02:05.020
inherits from this class, implements this
interface and this interface, and [SOUND].

28
00:02:05.020 --> 00:02:13.400
And so initially I was very resistant
to the idea of just even a ES6 class.

29
00:02:13.400 --> 00:02:18.710
But then I realized that I don't
necessarily have a problem with a class,

30
00:02:18.710 --> 00:02:21.860
especially as an organizational mechanism,
I think it works really well.

31
00:02:21.860 --> 00:02:24.320
It's a really nice way to say,

32
00:02:24.320 --> 00:02:28.778
I have this thing that has methods and
properties on it.

33
00:02:28.778 --> 00:02:34.120
I realize that what I really have
a problem with is inheritance.

34
00:02:34.120 --> 00:02:36.895
I think inheritance is, on one hand,

35
00:02:36.895 --> 00:02:41.774
there's people that never use it,
if you do, you're subhuman.

36
00:02:41.774 --> 00:02:45.030
There's some people that say well
you can use one level inheritance.

37
00:02:45.030 --> 00:02:48.128
I think that generally when
you're using inheritance,

38
00:02:48.128 --> 00:02:51.105
you can accomplish the same
thing using composition.

39
00:02:51.105 --> 00:02:55.913
And so using dependency injection and
these different things that allows you to

40
00:02:55.913 --> 00:02:59.786
extract out a piece of common
behavior that you can then inject or

41
00:02:59.786 --> 00:03:01.880
compose it into multiple things.

42
00:03:01.880 --> 00:03:06.519
So this is an entirely separate subject,
but

43
00:03:06.519 --> 00:03:12.630
the point is really avoid inheritance,
use composition.

44
00:03:12.630 --> 00:03:15.422
But, because we're using classes,

45
00:03:15.422 --> 00:03:20.403
that doesn't mean,
now I'm using inheritance, it's not.

46
00:03:20.403 --> 00:03:25.804
That it simply is, when you see it
as an organizational mechanism,

47
00:03:25.804 --> 00:03:30.639
really kind of as an object
with additional functionality,

48
00:03:30.639 --> 00:03:34.270
I think it makes it a lot
easier to reconcile.

49
00:03:36.090 --> 00:03:42.010
So, we'll start with CIDER, first and
foremost, class definition.

50
00:03:43.410 --> 00:03:47.100
So, at the core of every
component is a class.

51
00:03:47.100 --> 00:03:50.570
So, we just create
the component as an ES6 class.

52
00:03:50.570 --> 00:03:55.450
And then properties and methods on
our component class are available for

53
00:03:55.450 --> 00:03:56.650
binding in the template.

54
00:03:58.050 --> 00:04:03.900
Export class ItemsComponent,
step one, define the class.

55
00:04:03.900 --> 00:04:06.690
So every time I would do this,
that's what I would start out with.

56
00:04:07.930 --> 00:04:12.265
From there, import, what is the bare

57
00:04:12.265 --> 00:04:17.280
minimum that this component needs to work?

58
00:04:18.320 --> 00:04:19.180
So first and

59
00:04:19.180 --> 00:04:24.260
foremost you are going to need to
import component from Angular core.

60
00:04:25.830 --> 00:04:27.970
So import core Angular dependencies,

61
00:04:27.970 --> 00:04:33.040
import 3rd party dependencies,
import your custom dependencies.

62
00:04:33.040 --> 00:04:36.990
So this approach also gives us
a more fine grained control

63
00:04:36.990 --> 00:04:41.120
over managing what our application needs.

64
00:04:41.120 --> 00:04:45.364
As well as when you're testing it, then
you can then stub these things out and

65
00:04:45.364 --> 00:04:48.515
replace them when you're
setting up your test harness.

66
00:04:48.515 --> 00:04:52.685
So here, import { component } from

67
00:04:52.685 --> 00:04:57.800
'@angular/core', component import.

68
00:04:57.800 --> 00:05:01.480
From here, let's decorate our class.

69
00:05:01.480 --> 00:05:05.480
So now we are going to turn this into
something that Angular 2 can use.

70
00:05:05.480 --> 00:05:09.330
So, we use the component
syntax to decorate our class.

71
00:05:09.330 --> 00:05:15.920
And we can also decorate methods and
properties within our class.

72
00:05:15.920 --> 00:05:18.690
We'll see this tomorrow for
component driven architecture, but

73
00:05:18.690 --> 00:05:22.420
the most common is input and output.

74
00:05:22.420 --> 00:05:26.645
So just know that not only can
you decorate the class, but

75
00:05:26.645 --> 00:05:31.763
can decorate properties and methods,
which is super interesting.

76
00:05:31.763 --> 00:05:36.291
So now,
&gt;&gt; Lukas Ruebbelke: We've created

77
00:05:36.291 --> 00:05:36.835
the class.

78
00:05:38.189 --> 00:05:42.447
&gt;&gt; Lukas Ruebbelke: We've imported
our necessary dependencies and

79
00:05:42.447 --> 00:05:48.940
now we're going to decorate it
using the @component metadata.

80
00:05:48.940 --> 00:05:57.000
And now we're telling Angular 2 that
this class has a selector of app items,

81
00:05:57.000 --> 00:06:02.705
and it uses items.component.html
as its template,

82
00:06:02.705 --> 00:06:07.429
and items.component.css for its styles.

83
00:06:11.607 --> 00:06:14.900
&gt;&gt; Lukas Ruebbelke: And you can see
here that as we add in methods and

84
00:06:14.900 --> 00:06:20.490
properties that within our template these
are now available for us to bind to.

85
00:06:21.510 --> 00:06:26.797
So as we have items,
as a member on our items component class,

86
00:06:26.797 --> 00:06:30.063
it's now available in the template.

87
00:06:32.334 --> 00:06:35.683
&gt;&gt; Lukas Ruebbelke: Selected items same
thing or for instance resetItem or

88
00:06:35.683 --> 00:06:37.530
selectedItem.

89
00:06:37.530 --> 00:06:40.467
These are now things that we
can call using event binding.

90
00:06:44.245 --> 00:06:47.460
&gt;&gt; Lukas Ruebbelke: So
we can also decorate the class, so

91
00:06:47.460 --> 00:06:51.940
as to rather enhance
the class with dependencies.

92
00:06:52.940 --> 00:06:57.240
And so we need to essentially inject or

93
00:06:57.240 --> 00:07:02.650
make the itemsService available for
use within the class.

94
00:07:02.650 --> 00:07:07.560
So what we have here is within our
constructor, we are setting itemService

95
00:07:08.960 --> 00:07:16.440
as a parameter, and then we can then
use it in the rest of our class.

96
00:07:16.440 --> 00:07:20.310
Now I want to just call
something out here.

97
00:07:20.310 --> 00:07:27.590
What we're looking at in our constructor
is what's called constructor assignment.

98
00:07:27.590 --> 00:07:31.051
So you'll notice that there's
actually nothing in the constructor.

99
00:07:31.051 --> 00:07:33.956
But within the ngOnInit,

100
00:07:33.956 --> 00:07:39.238
we are referencing
the itemService as a local,

101
00:07:39.238 --> 00:07:45.190
basically property or
method, member on the class.

102
00:07:46.200 --> 00:07:47.472
So how did this happen?

103
00:07:50.495 --> 00:07:55.958
&gt;&gt; Lukas Ruebbelke: TypeScript by default
is when you put an access modifier on

104
00:07:55.958 --> 00:08:01.087
a parameter,
it assumes that that is then a method on,

105
00:08:01.087 --> 00:08:05.150
or rather a member on that class.

106
00:08:05.150 --> 00:08:08.339
And so what happens is, and
this will get you at least once.

107
00:08:12.110 --> 00:08:15.206
&gt;&gt; Lukas Ruebbelke: Let
me just jump in to,

108
00:08:19.423 --> 00:08:20.401
&gt;&gt; Lukas Ruebbelke: You know what,

109
00:08:20.401 --> 00:08:27.420
I will do this in,
&gt;&gt; Lukas Ruebbelke: StudentsComponent.

110
00:08:27.420 --> 00:08:31.919
And so this is not specific to anything
we're going to do further along,

111
00:08:31.919 --> 00:08:35.946
but,
&gt;&gt; Lukas Ruebbelke: Now what I want to do

112
00:08:35.946 --> 00:08:37.089
is, private

113
00:08:47.729 --> 00:08:50.400
&gt;&gt; Lukas Ruebbelke: And
I can now reference this down here.

114
00:08:50.400 --> 00:08:53.690
But if we go down here and

115
00:08:53.690 --> 00:08:58.720
let's say I put in some parameter or
let me do this this way.

116
00:08:58.720 --> 00:09:00.872
I'm creating a new method.

117
00:09:03.900 --> 00:09:05.377
&gt;&gt; Lukas Ruebbelke: And
I wanna pass in a student.

118
00:09:09.271 --> 00:09:12.750
&gt;&gt; Lukas Ruebbelke: And then down here,
I wanna delete a student.

119
00:09:13.980 --> 00:09:21.450
And when I want to reference this
right here, this student parameter.

120
00:09:21.450 --> 00:09:24.100
Well, this would not work.

121
00:09:24.100 --> 00:09:29.992
If I want to, for instance, this.student,
I would have no way to do that,

122
00:09:29.992 --> 00:09:36.360
because this parameter is scoped to
the function that it's being passed into.

123
00:09:36.360 --> 00:09:40.100
So you can't reference a parameter
outside of its function's scope.

124
00:09:40.100 --> 00:09:45.230
And so what happens is,
without the access modifier,

125
00:09:46.310 --> 00:09:50.000
this is simply scoped to the function.

126
00:09:51.930 --> 00:09:55.215
And so, what you could do then,

127
00:09:55.215 --> 00:10:01.783
is this.studentsService
&gt;&gt; Lukas Ruebbelke: Equals,

128
00:10:05.415 --> 00:10:06.377
&gt;&gt; Lukas Ruebbelke: Now what I'm

129
00:10:06.377 --> 00:10:11.276
doing is I'm essentially taking this and
I'm assigning this to,

130
00:10:11.276 --> 00:10:14.990
sorry about that, to this parameter.

131
00:10:14.990 --> 00:10:18.954
And so now I'm saying take this parameter
and I'm assigning it to a local member.

132
00:10:18.954 --> 00:10:23.260
Well TypeScript does this by
default with an access modifier, or

133
00:10:23.260 --> 00:10:24.770
rather a constructor assignment.

134
00:10:24.770 --> 00:10:30.370
So adding the access modifier will
then essentially take that and

135
00:10:30.370 --> 00:10:38.130
make it available for
use within the rest of the application.

136
00:10:39.330 --> 00:10:41.143
So for instance, to follow this along, and

137
00:10:41.143 --> 00:10:46.231
you'll notice here even,
&gt;&gt; Lukas Ruebbelke: If I try to actually

138
00:10:46.231 --> 00:10:51.580
get type completion,
it doesn't even know like where is it?

139
00:10:51.580 --> 00:10:55.829
If I go here,
&gt;&gt; Lukas Ruebbelke: Then it picks

140
00:10:55.829 --> 00:10:56.368
it right up.

141
00:10:56.368 --> 00:11:00.740
It knows, this is actually going to
live outside of the constructor.

142
00:11:00.740 --> 00:11:04.952
And so for somebody from a classical
background, I apologize.

143
00:11:04.952 --> 00:11:10.488
This may seem really like kind of review,
like I've seen this, like I know this,

144
00:11:10.488 --> 00:11:15.304
but I've just seen this a lot from
people coming from a JQuery with a ES5

145
00:11:15.304 --> 00:11:19.976
background that are not familiar
with constructors specifically.

146
00:11:19.976 --> 00:11:24.247
Is, they inject something
into a constructor and

147
00:11:24.247 --> 00:11:28.120
it's not available to
the rest of the class.

148
00:11:28.120 --> 00:11:32.835
And so, if you use ES6,
then you need to manually say this dot

149
00:11:32.835 --> 00:11:36.464
whatever equals whatever the parameter is,
or

150
00:11:36.464 --> 00:11:41.540
using TypeScript, it goes ahead and
handles that for you.

151
00:11:41.540 --> 00:11:42.222
Does that make sense?

152
00:11:48.843 --> 00:11:51.498
&gt;&gt; Speaker 2: There's a bit of discussion
going on in the chat room about

153
00:11:51.498 --> 00:11:52.768
this, too, so.

154
00:11:52.768 --> 00:11:53.268
&gt;&gt; Lukas Ruebbelke: Yes?

155
00:11:55.900 --> 00:12:00.522
&gt;&gt; Speaker 2: About what the private
is and also things like setters and

156
00:12:00.522 --> 00:12:03.131
getters and that sort of thing.

157
00:12:10.727 --> 00:12:13.330
&gt;&gt; Lukas Ruebbelke: All right,
let's do this.

158
00:12:13.330 --> 00:12:16.178
So this is just right for
our own TypeScript.

159
00:12:16.178 --> 00:12:17.610
We'll go class,

160
00:12:30.252 --> 00:12:32.790
&gt;&gt; Lukas Ruebbelke: So if we go like this,

161
00:12:32.790 --> 00:12:34.765
and myService.

162
00:12:36.245 --> 00:12:38.747
&gt;&gt; Lukas Ruebbelke: You can see
that it's scoped over here,

163
00:12:38.747 --> 00:12:42.880
to just a regular parameter, so
it's just a function parameter.

164
00:12:44.520 --> 00:12:48.923
But,
&gt;&gt; Lukas Ruebbelke: The minute I go

165
00:12:48.923 --> 00:12:49.641
private.

166
00:12:52.526 --> 00:12:53.545
&gt;&gt; Lukas Ruebbelke: Or public.

167
00:12:55.828 --> 00:12:57.306
&gt;&gt; Lukas Ruebbelke: Then
you can see over here,

168
00:12:57.306 --> 00:12:59.698
it's then now under the hood assigning it.

169
00:12:59.698 --> 00:13:02.920
It's saying, this.myService=myService, so

170
00:13:02.920 --> 00:13:06.180
that you can then use it
outside of the constructor.

171
00:13:06.180 --> 00:13:09.999
So, the question is, could you do
the same for non-constructor methods?

172
00:13:11.320 --> 00:13:16.433
And I'm thinking not,
but we will see here.

173
00:13:24.866 --> 00:13:25.632
&gt;&gt; Lukas Ruebbelke: So here.

174
00:13:30.246 --> 00:13:30.792
&gt;&gt; Speaker 3: Hey Lucas?

175
00:13:30.792 --> 00:13:32.208
&gt;&gt; Lukas Ruebbelke: Yes.

176
00:13:32.208 --> 00:13:34.710
&gt;&gt; Speaker 3: Could you expand the type,
the font?

177
00:13:37.148 --> 00:13:38.851
&gt;&gt; Speaker 3: There you go.

178
00:13:38.851 --> 00:13:40.726
&gt;&gt; Lukas Ruebbelke: Yeah,
so if you can see here,

179
00:13:40.726 --> 00:13:43.680
this only works on the constructor.

180
00:13:43.680 --> 00:13:49.650
So I'm trying to do it here,
and it's not taking.

181
00:13:50.670 --> 00:13:53.977
So a parameter property is only allowed
in a constructor implementation.

182
00:14:01.478 --> 00:14:05.166
&gt;&gt; Lukas Ruebbelke: Oops,
now, what's important about

183
00:14:05.166 --> 00:14:10.001
this is,
&gt;&gt; Lukas Ruebbelke: You want to inject,

184
00:14:10.001 --> 00:14:13.719
in this case the studentsService
via the constructor,

185
00:14:13.719 --> 00:14:17.929
but where you're really going to
want to use it is in ngOnInit.

186
00:14:17.929 --> 00:14:21.541
And so this is where this comes in.

187
00:14:21.541 --> 00:14:26.291
And so, at least a very naive
approach initially for me is,

188
00:14:26.291 --> 00:14:33.220
I would actually just reference
studentsService right in the constructor.

189
00:14:33.220 --> 00:14:36.020
And then the minute I wanted to move it
out of ngOnInit, then things fell apart.

