WEBVTT

1
00:00:00.499 --> 00:00:01.930
&gt;&gt; Lukas: Are we getting
sick of this diagram yet?

2
00:00:03.520 --> 00:00:09.900
It's just so fundamentally profound
that this is the essence of components.

3
00:00:09.900 --> 00:00:14.438
So again, just to beat this [INAUDIBLE],
by that I mean review and

4
00:00:14.438 --> 00:00:16.045
reinforce concepts.

5
00:00:16.045 --> 00:00:20.298
When we want to send information
from a template to a class,

6
00:00:20.298 --> 00:00:23.510
we do that with an event binding.

7
00:00:23.510 --> 00:00:27.424
When we want to send data
from a class to a template,

8
00:00:27.424 --> 00:00:30.075
we do that with property binding.

9
00:00:33.272 --> 00:00:39.140
&gt;&gt; Lukas: So now the question is,
what if we can do custom event binding and

10
00:00:39.140 --> 00:00:41.650
custom property binding?

11
00:00:43.150 --> 00:00:47.650
Because right now, all the events we have
bound to have been strictly DOM events.

12
00:00:49.490 --> 00:00:54.430
But or as well as probably all
the things that we have done property

13
00:00:54.430 --> 00:00:57.053
binding to have been
known HTML attributes.

14
00:00:57.053 --> 00:01:01.469
Like for instance, source for an image or
we've got some style binding for

15
00:01:01.469 --> 00:01:03.040
different things.

16
00:01:03.040 --> 00:01:05.580
These are things that we know
about that exist in the spec.

17
00:01:07.020 --> 00:01:11.930
What if we actually wanted to
bind to a custom property?

18
00:01:15.270 --> 00:01:17.520
Well, how would we do that?

19
00:01:17.520 --> 00:01:23.450
The answer is we can do it via output and
input.

20
00:01:23.450 --> 00:01:28.020
And what this does is this
simply establishes a component

21
00:01:28.020 --> 00:01:31.550
contract with our respective components.

22
00:01:31.550 --> 00:01:38.300
So that you say when I load this
component, it will omit these outputs and

23
00:01:38.300 --> 00:01:42.550
it will accept these inputs, so
this is very much like Angular 1.

24
00:01:42.550 --> 00:01:44.070
If you've used isolated scope,

25
00:01:45.140 --> 00:01:50.630
this is I think isolated scope in
a much less confusing implementation.

26
00:01:52.400 --> 00:01:58.100
And so now let's imagine, if you remember

27
00:01:58.100 --> 00:02:02.760
that event's were on your left,
properties were on your right.

28
00:02:04.654 --> 00:02:10.760
That an event really
takes some user event and

29
00:02:10.760 --> 00:02:15.810
it outputs that to the template.

30
00:02:15.810 --> 00:02:19.600
And then the template
takes some information and

31
00:02:19.600 --> 00:02:23.030
it inputs it into its respective template.

32
00:02:23.030 --> 00:02:28.520
So just keep that direction in mind.

33
00:02:28.520 --> 00:02:31.260
And so now let's look at it this way.

34
00:02:31.260 --> 00:02:35.943
This by the way, is a completely
new diagram I did this morning,

35
00:02:35.943 --> 00:02:40.046
never been seen by human eyes except for
mine until now.

36
00:02:42.372 --> 00:02:48.669
&gt;&gt; Lukas: So when we pass properties
from our class into our template,

37
00:02:48.669 --> 00:02:55.230
well, up to this point our template
has had just regular HTML.

38
00:02:55.230 --> 00:03:00.890
But as we've seen,
we can actually put other components

39
00:03:00.890 --> 00:03:06.110
via the DOM,
via its selector into parent components.

40
00:03:06.110 --> 00:03:12.093
And so now what we can do is we
can pass a property or data into

41
00:03:12.093 --> 00:03:17.110
a component template,

42
00:03:17.110 --> 00:03:23.690
which then can pass that via the selector
into a child component via input.

43
00:03:24.690 --> 00:03:31.350
So just think of we're taking data or
binding to it via the property binding.

44
00:03:31.350 --> 00:03:36.530
But what it's really doing is passing
this data into the child component

45
00:03:36.530 --> 00:03:39.080
via an input declaration.

46
00:03:39.080 --> 00:03:47.130
Now at the same time, class, the child
component class can output information

47
00:03:47.130 --> 00:03:52.710
as an event that gets captured by
the parent component template.

48
00:03:52.710 --> 00:03:56.870
Which then via an event,
because we are going to discuss an event,

49
00:03:56.870 --> 00:04:01.109
goes into the class or
the parent component class.

50
00:04:02.360 --> 00:04:07.980
So what I want to call out here is that
the surface area between a parent and

51
00:04:07.980 --> 00:04:11.030
a child component is the DOM.

52
00:04:12.130 --> 00:04:16.360
So when you want to add a child
component to a parent component,

53
00:04:16.360 --> 00:04:18.810
you do it in its template.

54
00:04:18.810 --> 00:04:23.460
So for instance, we have items,
items component, but

55
00:04:23.460 --> 00:04:26.900
we have two sub-components,
item list and item detail.

56
00:04:26.900 --> 00:04:30.690
And how that gets in is we add it
to the DOM via its selector, but

57
00:04:30.690 --> 00:04:33.140
we need to pass information into it.

58
00:04:33.140 --> 00:04:34.530
And so using property binding,

59
00:04:34.530 --> 00:04:39.550
we can pass information in which then
goes into the child component via input.

60
00:04:39.550 --> 00:04:43.630
And then when somebody does
something to the child component,

61
00:04:43.630 --> 00:04:46.010
some event we service that via output.

62
00:04:46.010 --> 00:04:49.140
So pretty simple,
data goes in, events come out.

63
00:04:52.090 --> 00:04:56.460
So you can think of this really just
an isolation as this continues to work

64
00:04:56.460 --> 00:04:58.080
as normal on the parent component.

65
00:04:58.080 --> 00:05:03.051
It's just event and property binding,
but the difference is they are custom.

66
00:05:05.203 --> 00:05:09.990
&gt;&gt; Lukas: And then on the child component,
they are inputs and outputs.

