WEBVTT

1
00:00:00.420 --> 00:00:04.662
&gt;&gt; Lukas Ruebbelke: I'm gonna show
you a pro technique real quick, and

2
00:00:04.662 --> 00:00:07.728
then we're gonna do the challenge.

3
00:00:09.767 --> 00:00:14.850
&gt;&gt; Lukas Ruebbelke: And so this is
&gt;&gt; Lukas Ruebbelke: Kind of important.

4
00:00:23.148 --> 00:00:26.572
&gt;&gt; Lukas Ruebbelke: Let's
talk about data mutations.

5
00:00:29.007 --> 00:00:33.753
&gt;&gt; Lukas Ruebbelke: So,
&gt;&gt; Lukas Ruebbelke: So ideally,

6
00:00:33.753 --> 00:00:39.054
when you're creating an application
that you want to one,

7
00:00:39.054 --> 00:00:44.046
minimize state but
you want your state to be immutable.

8
00:00:46.580 --> 00:00:50.554
&gt;&gt; Lukas Ruebbelke: The issue is,
when you have an application,

9
00:00:50.554 --> 00:00:55.270
if everything is immutable,
how do you do anything?

10
00:00:56.884 --> 00:01:00.430
Every application, the user has
to interact in a meaningful way.

11
00:01:02.180 --> 00:01:09.140
And so, invariably, you are going
to have to have state mutations.

12
00:01:09.140 --> 00:01:15.530
Now to be clear, mutable state
in itself is not a bad thing.

13
00:01:16.980 --> 00:01:21.370
Shared mutable state, on the other hand,
is the devil's handiwork.

14
00:01:22.780 --> 00:01:29.084
Because when you have two things that
have a reference to a property or

15
00:01:29.084 --> 00:01:34.626
an object of some sort or
state that is shared between them and

16
00:01:34.626 --> 00:01:37.684
either one of them can mutate it.

17
00:01:37.684 --> 00:01:42.470
Now, essentially they
are holding each other hostage.

18
00:01:42.470 --> 00:01:48.180
Because let's say component
A can do some nefarious

19
00:01:48.180 --> 00:01:53.200
thing to the shared object that
has an adverse effect on Item B.

20
00:01:53.200 --> 00:01:55.620
Does that make sense?

21
00:01:55.620 --> 00:02:00.571
So essentially, if you have two things
that can actually mutate a shared object,

22
00:02:00.571 --> 00:02:04.301
well, and you have no control
over what the other thing does,

23
00:02:04.301 --> 00:02:06.115
you're kind of at the mercy.

24
00:02:06.115 --> 00:02:09.450
That is a recipe for unpredictability.

25
00:02:09.450 --> 00:02:14.750
And so this is one of the reasons why even
I think inheritance is really dangerous.

26
00:02:14.750 --> 00:02:18.694
Because now you have this implicit trust
that, hey, everything is gonna work out.

27
00:02:18.694 --> 00:02:23.390
You're gonna do everything in my best
interest, and that's not always the case.

28
00:02:23.390 --> 00:02:28.290
So, mutable state is not a bad thing.

29
00:02:29.450 --> 00:02:32.275
Shared mutable state is
where things go wonky.

30
00:02:34.911 --> 00:02:37.659
&gt;&gt; Lukas Ruebbelke: So
in the case of a form, what do you do?

31
00:02:37.659 --> 00:02:41.785
Well the answer is [SOUND].

32
00:02:41.785 --> 00:02:44.771
You isolate that state or

33
00:02:44.771 --> 00:02:49.613
that state mutation to that component.

34
00:02:49.613 --> 00:02:51.497
And so let me show you how to do this.

35
00:02:51.497 --> 00:02:57.532
And actually I'm super stoked cuz I
actually forgot these was on the docket.

36
00:03:00.638 --> 00:03:04.942
&gt;&gt; Lukas Ruebbelke: So
we have in our form, let's go to items.

37
00:03:09.158 --> 00:03:12.344
&gt;&gt; Lukas Ruebbelke: A form to see and

38
00:03:12.344 --> 00:03:17.260
edit the item details.

39
00:03:17.260 --> 00:03:21.636
Now the question is,
if I were just passing this in and

40
00:03:21.636 --> 00:03:24.567
I started to actually mutate this.

41
00:03:27.070 --> 00:03:29.326
&gt;&gt; Lukas Ruebbelke: The minute
I changed it here,

42
00:03:29.326 --> 00:03:32.690
it would actually change it up here.

43
00:03:32.690 --> 00:03:34.827
And so let me actually see
if I can illustrate this.

44
00:03:36.869 --> 00:03:39.348
&gt;&gt; Lukas Ruebbelke: So this is the
solution by the way to how to get around

45
00:03:39.348 --> 00:03:45.613
this but,
&gt;&gt; Lukas Ruebbelke: Input

46
00:03:47.344 --> 00:03:49.185
&gt;&gt; Lukas Ruebbelke: Item.

47
00:04:02.583 --> 00:04:04.193
&gt;&gt; Lukas Ruebbelke: I think
I broke something, hang on.

48
00:04:08.103 --> 00:04:12.741
&gt;&gt; Lukas Ruebbelke: Item detail,
cannot read property of id line to find.

49
00:04:19.106 --> 00:04:22.680
&gt;&gt; Lukas Ruebbelke: Hold on, I just
need to update this template real quick.

50
00:04:25.077 --> 00:04:28.380
&gt;&gt; Lukas Ruebbelke: And
then I will illustrate exactly,

51
00:04:28.380 --> 00:04:31.692
let's just replace this with this.

52
00:04:43.506 --> 00:04:45.576
&gt;&gt; Lukas Ruebbelke: Still no good?

53
00:04:45.576 --> 00:04:47.400
ItemDetailComponent.

54
00:04:47.400 --> 00:04:51.998
Let's see if this shows
what else is going on.

55
00:04:51.998 --> 00:04:54.547
Not helpful.

56
00:04:58.568 --> 00:05:00.065
&gt;&gt; Lukas Ruebbelke: Keep going down.

57
00:05:04.256 --> 00:05:06.560
&gt;&gt; Lukas Ruebbelke: So this is interesting
we're talking about debugging.

58
00:05:06.560 --> 00:05:09.330
On one hand I got that super
helpful error of hey, use this and

59
00:05:09.330 --> 00:05:10.890
here's some suggested code.

60
00:05:10.890 --> 00:05:14.326
And then over here it's like
do whatever you want cuz,

61
00:05:14.326 --> 00:05:16.472
I don't know what's going on here.

62
00:05:18.561 --> 00:05:23.360
&gt;&gt; Lukas Ruebbelke: So let's see here,
ID, ID, ID, somewhere in here.

63
00:05:23.360 --> 00:05:25.528
&gt;&gt; Speaker 2: Is the item
there in line two?

64
00:05:27.115 --> 00:05:28.890
&gt;&gt; Speaker 2: I don't know maybe.

65
00:05:28.890 --> 00:05:30.940
&gt;&gt; Lukas Ruebbelke: Let's see
what happens if we do this.

66
00:05:30.940 --> 00:05:34.464
So I'm completely free styling here but
I really would love for this to work.

67
00:05:38.043 --> 00:05:38.936
&gt;&gt; Lukas Ruebbelke: Refresh.

68
00:05:41.068 --> 00:05:42.290
&gt;&gt; Lukas Ruebbelke: Name of undefined.

69
00:05:42.290 --> 00:05:43.780
&gt;&gt; Speaker 3: It's often I get that name,
yeah.

70
00:05:43.780 --> 00:05:44.280
&gt;&gt; Lukas Ruebbelke: There we go.

71
00:05:45.780 --> 00:05:46.820
So we're making progress.

72
00:05:47.990 --> 00:05:50.978
So right now you can see I'm binding
to something that doesn't exist.

73
00:06:09.040 --> 00:06:10.750
&gt;&gt; Lukas Ruebbelke: Okay,
let's change this up.

74
00:06:10.750 --> 00:06:11.515
Just a second.

75
00:06:14.740 --> 00:06:16.693
&gt;&gt; Lukas Ruebbelke: I'm gonna
make this work, or else.

76
00:06:30.310 --> 00:06:31.350
&gt;&gt; Lukas Ruebbelke: Did I
forget a description?

77
00:06:32.870 --> 00:06:33.480
ID of undefined.

78
00:06:33.480 --> 00:06:35.099
What the?

79
00:06:44.319 --> 00:06:45.530
&gt;&gt; Lukas Ruebbelke: Wait.

80
00:06:45.530 --> 00:06:50.360
&gt;&gt; [SOUND]

81
00:07:14.754 --> 00:07:15.638
&gt;&gt; Lukas Ruebbelke: All right.

82
00:07:18.240 --> 00:07:20.570
&gt;&gt; Lukas Ruebbelke: All
of that to get to here.

83
00:07:20.570 --> 00:07:24.410
So just refresh the page.

84
00:07:24.410 --> 00:07:26.686
Now, here's the issue.

85
00:07:28.277 --> 00:07:30.017
&gt;&gt; Lukas Ruebbelke: I'm
sending in an item,

86
00:07:32.039 --> 00:07:32.618
&gt;&gt; Lukas Ruebbelke: Now it's

87
00:07:32.618 --> 00:07:33.560
into the form.

88
00:07:34.930 --> 00:07:37.582
The minute that I touch this and

89
00:07:37.582 --> 00:07:43.151
start to mutate it,
&gt;&gt; Lukas Ruebbelke: Look

90
00:07:43.151 --> 00:07:44.738
what has happened.

91
00:07:44.738 --> 00:07:49.737
Because I'm passing by reference,

92
00:07:49.737 --> 00:07:54.896
that when I edit this here in the form,

93
00:07:54.896 --> 00:08:00.875
notice that it is updating
over in the list.

94
00:08:04.570 --> 00:08:06.030
&gt;&gt; Lukas Ruebbelke: So
how would I back out of this?

95
00:08:08.260 --> 00:08:11.431
I've already mutated the object.

96
00:08:11.431 --> 00:08:16.790
How do I essentially keep this?

97
00:08:16.790 --> 00:08:18.220
We're really backed out of this operation.

98
00:08:18.220 --> 00:08:21.440
What if you start to type and you're like,
I didn't really want to do anything.

99
00:08:21.440 --> 00:08:23.790
I want to basically abort this.

100
00:08:23.790 --> 00:08:27.120
How do you do that?

101
00:08:28.380 --> 00:08:30.840
Unfortunately, you've
already performed a mutation.

102
00:08:32.480 --> 00:08:33.860
That's a problem.

103
00:08:33.860 --> 00:08:39.300
And so, again, I've done this to
illustrate that shared mutable state,

104
00:08:40.600 --> 00:08:45.810
you can edit it or mutate it to one place,
and it's somewhere else.

105
00:08:45.810 --> 00:08:48.470
That cold have adverse effects.

106
00:08:48.470 --> 00:08:53.412
So, let me just back out of

107
00:08:53.412 --> 00:08:58.708
this and
&gt;&gt; Lukas Ruebbelke: And

108
00:08:58.708 --> 00:09:02.454
by the way to make that work
what I had to was actually,

109
00:09:02.454 --> 00:09:07.951
basically use an initial default value
in the parent component to initially,

110
00:09:07.951 --> 00:09:12.470
essentially seed or
populate that property binding that I had.

111
00:09:15.210 --> 00:09:18.190
Let's go back here and we'll delete this.

112
00:09:21.450 --> 00:09:23.779
&gt;&gt; Lukas Ruebbelke: And
we're gonna go here and

113
00:09:23.779 --> 00:09:26.922
back into my item detail component.

114
00:09:34.184 --> 00:09:38.836
&gt;&gt; Lukas Ruebbelke: And let's talk about
how to isolate state mutations to a single

115
00:09:38.836 --> 00:09:39.809
component.

116
00:09:41.510 --> 00:09:43.893
What we're doing here,

117
00:09:43.893 --> 00:09:49.030
is,
&gt;&gt; Lukas Ruebbelke: Using

118
00:09:49.030 --> 00:09:53.416
a setter method, on the input.

119
00:09:53.416 --> 00:09:57.184
So essentially,
instead of setting the property directly,

120
00:09:57.184 --> 00:10:01.976
when somebody goes to set the property,
it actually calls the setter method.

121
00:10:01.976 --> 00:10:05.803
And so what we're saying,
is when item gets set from the parent,

122
00:10:05.803 --> 00:10:08.743
we actually want to intercept
that with a method.

123
00:10:08.743 --> 00:10:13.924
And then using object.assign,

124
00:10:13.924 --> 00:10:21.340
we actually wanna create
a copy of this object.

125
00:10:21.340 --> 00:10:23.020
And in this case it's value.

126
00:10:23.020 --> 00:10:29.360
We essentially want to create a local copy
of item and assigned it to selected item.

127
00:10:31.660 --> 00:10:35.510
Now what I'm also doing up here
is I'm setting original names.

128
00:10:35.510 --> 00:10:40.420
So this is purely a thing and I'm just
keeping track of the original name.

129
00:10:40.420 --> 00:10:48.835
So that I can go over here and,
&gt;&gt; Lukas Ruebbelke: When we go to items,

130
00:10:48.835 --> 00:10:53.820
I still have kind of track
of like you're editing this.

131
00:10:53.820 --> 00:10:55.780
So I'm just preserving the original name.

132
00:10:57.080 --> 00:11:05.074
But, because I'm creating a copy
using object auto sign in here,

133
00:11:05.074 --> 00:11:10.361
in my template
&gt;&gt; Lukas Ruebbelke: When I

134
00:11:10.361 --> 00:11:14.900
edit my item,
I'm actually editing selected item.

135
00:11:16.020 --> 00:11:21.063
Then when I'm ready to save it and
I'm like,

136
00:11:21.063 --> 00:11:26.130
hey this is good, then we go, click, Save.

137
00:11:26.130 --> 00:11:28.760
And we're not omitting the original item.

138
00:11:28.760 --> 00:11:33.617
We're omitting the new item to be passed
to be to the parent to then be passed to

139
00:11:33.617 --> 00:11:34.529
the service.

140
00:11:34.529 --> 00:11:40.609
And so again, state comes down, events
flow up with essentially instructions or

141
00:11:40.609 --> 00:11:43.970
new state to be applied
further up the chain.

142
00:11:45.090 --> 00:11:51.562
And so, what I just really wanna call
out here, is using the setter method.

143
00:11:51.562 --> 00:11:54.941
When we set item,
I'm just trading a local copy so

144
00:11:54.941 --> 00:11:57.440
that we can mutate that all day long.

145
00:11:57.440 --> 00:12:01.710
And if we wanna throw it away,
well that's totally fine.

146
00:12:01.710 --> 00:12:04.850
Because we haven't changed
anything anywhere else.

147
00:12:04.850 --> 00:12:09.799
But when we're ready to commit it, then we
just service it to the parent component.

148
00:12:09.799 --> 00:12:13.527
And so this is actually a pretty
fundamental component or technique for

149
00:12:13.527 --> 00:12:17.500
isolating state change when you
have a component with a form.

150
00:12:17.500 --> 00:12:19.902
Is pass in the data model via input,

151
00:12:19.902 --> 00:12:25.930
use object.assign to create a copy of it,
mutate the local copy.

152
00:12:25.930 --> 00:12:29.184
And when you're ready, then you can send
it back up, or you can throw it away.

153
00:12:31.420 --> 00:12:32.460
&gt;&gt; Lukas Ruebbelke: Does that make sense?

154
00:12:33.930 --> 00:12:34.450
Yes?

155
00:12:34.450 --> 00:12:37.210
&gt;&gt; Speaker 2: This is where we might
get into a problem that has nothing to

156
00:12:37.210 --> 00:12:37.890
do with the channel.

157
00:12:37.890 --> 00:12:41.070
But assign doesn't do a deep clone.

158
00:12:41.070 --> 00:12:41.830
&gt;&gt; Lukas Ruebbelke: Right.

159
00:12:41.830 --> 00:12:43.190
&gt;&gt; Speaker 2: Right.

160
00:12:43.190 --> 00:12:48.940
So when you got a object that has
multiple levels and things like that.

161
00:12:48.940 --> 00:12:51.600
&gt;&gt; Lukas Ruebbelke: Right, so if you
have an object that has other objects.

162
00:12:52.630 --> 00:12:54.165
So just actually thank you for
pointing it out.

163
00:12:54.165 --> 00:12:57.491
Object.assign does not do a deep clone so

164
00:12:57.491 --> 00:13:02.723
depending on what you're sending
in this may not be sufficient.

165
00:13:02.723 --> 00:13:07.226
In most cases when dealing with
simple objects, it's totally fine but

166
00:13:07.226 --> 00:13:08.510
just be cognizant.

167
00:13:08.510 --> 00:13:13.260
It is a shallow copy and
if you need a deep copy,

168
00:13:13.260 --> 00:13:17.890
there are thousands of ways to do that.

169
00:13:17.890 --> 00:13:18.990
I mean, there's just libraries.

170
00:13:18.990 --> 00:13:24.360
I mean, there's plenty of utilities to
help you essentially accomplish your

171
00:13:24.360 --> 00:13:26.780
deep clone dreams.

172
00:13:26.780 --> 00:13:29.289
I think underscore,
I think every one of them has a,

173
00:13:29.289 --> 00:13:31.808
you know it's a pretty
standard utility function.

174
00:13:35.673 --> 00:13:37.360
&gt;&gt; Lukas Ruebbelke: Make sense?

175
00:13:37.360 --> 00:13:41.773
So this is actually a really important
concept that once I realized,

176
00:13:41.773 --> 00:13:46.887
this was kind of as I'm going into this
reactive stake down, event up, redux.

177
00:13:46.887 --> 00:13:50.439
That was one of the big questions I have
is look if we're moving to an immutable

178
00:13:50.439 --> 00:13:52.140
world, what do you do about forms?

179
00:13:52.140 --> 00:13:53.677
You have to change stuff.

180
00:13:53.677 --> 00:13:56.462
And so I went and talked to actually well,

181
00:13:56.462 --> 00:14:00.292
Bob Brumworld really actually
helped me out quite a bit.

182
00:14:00.292 --> 00:14:04.280
But Paul Taylor who works in RSJS,
in a couple of different lines.

183
00:14:04.280 --> 00:14:05.930
Really the consensus is like look,

184
00:14:06.970 --> 00:14:10.430
mutable state is not bad as
long as you do not share it.

185
00:14:11.580 --> 00:14:13.250
What you need to do is isolate it, and

186
00:14:13.250 --> 00:14:16.040
this is really kind of
the best way to do that.

187
00:14:16.040 --> 00:14:20.120
Is now creating a local copy to mutate and

188
00:14:20.120 --> 00:14:23.700
we're not touching essentially
the shared object that we're parsing in.

