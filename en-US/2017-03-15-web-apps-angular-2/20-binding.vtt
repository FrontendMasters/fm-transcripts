WEBVTT

1
00:00:00.458 --> 00:00:06.630
&gt;&gt; Lukas Ruebbelke: So now we have covered
really components at a very basic level.

2
00:00:08.500 --> 00:00:12.580
The next kinda step for this is templates.

3
00:00:13.680 --> 00:00:18.830
And so, we actually had some interesting
conversations over lunch about even

4
00:00:18.830 --> 00:00:24.640
some of the binding syntax and
what some of that stuff means.

5
00:00:24.640 --> 00:00:27.940
And so,
this is what we're gonna dig in to next.

6
00:00:27.940 --> 00:00:29.190
Now, I do see a question here.

7
00:00:29.190 --> 00:00:32.100
Should each component
have it's own module?

8
00:00:32.100 --> 00:00:33.660
And to that, I would say no.

9
00:00:35.170 --> 00:00:40.236
I think that using modules,

10
00:00:40.236 --> 00:00:44.330
well, so
I'm presuming he means like NG Module.

11
00:00:44.330 --> 00:00:45.170
Or that's the question.

12
00:00:45.170 --> 00:00:47.610
If it's NG Module, I would say no.

13
00:00:47.610 --> 00:00:54.938
I would group them by, maybe feature or
features, a feature set.

14
00:00:54.938 --> 00:01:00.090
But from there, so the question is, will
I ever need to pick this up and move it?

15
00:01:00.090 --> 00:01:02.390
Then, that might be a good
indicator that like, okay,

16
00:01:02.390 --> 00:01:04.090
I need to break this
into a separate module.

17
00:01:05.380 --> 00:01:08.940
Even with routing tables,
they say, break that out.

18
00:01:08.940 --> 00:01:12.010
Just, as you're composing things,
it's better to isolate that.

19
00:01:12.010 --> 00:01:17.570
But as a whole,
there's some varying views,

20
00:01:17.570 --> 00:01:21.870
but I tend to be fairly liberal
about my use of NG module.

21
00:01:21.870 --> 00:01:26.844
Like, is this a distinct feature that
I will ever need to pick up and move,

22
00:01:26.844 --> 00:01:31.495
or will it fall into, again,
also if you're doing it lazy loading,

23
00:01:31.495 --> 00:01:33.847
then it will need to be in a module.

24
00:01:39.344 --> 00:01:41.775
&gt;&gt; Lukas Ruebbelke: And yes, there
will only ever be one made module, so

25
00:01:41.775 --> 00:01:43.950
you have to bootstrap to a module.

26
00:01:43.950 --> 00:01:45.750
And so, in this case, it's at module.

27
00:01:45.750 --> 00:01:49.080
So you always have one main module and
one top level component.

28
00:01:49.080 --> 00:01:53.530
So that's the entry point and then from
there everything else is composed.

29
00:01:53.530 --> 00:01:58.469
So if you can imagine kind
of a component tree where

30
00:01:58.469 --> 00:02:03.055
really the module just kind of holds that,
but

31
00:02:03.055 --> 00:02:07.994
then within that you have
your top level component

32
00:02:07.994 --> 00:02:11.779
that everything else is attached to.

33
00:02:11.779 --> 00:02:13.330
Any more questions?

34
00:02:13.330 --> 00:02:13.830
Are we good?

35
00:02:16.160 --> 00:02:21.522
Okay, so template fundamentals,
we're gonna talk about property binding.

36
00:02:21.522 --> 00:02:28.550
Event binding, two-way binding, local
template variables, attribute directives,

37
00:02:28.550 --> 00:02:33.770
structural directives and
the safe navigation operator for fun.

38
00:02:33.770 --> 00:02:37.094
This used to be called the Elvis Operator,
I liked it so

39
00:02:37.094 --> 00:02:39.569
much more before they changed the name.

40
00:02:41.921 --> 00:02:45.330
&gt;&gt; Lukas Ruebbelke: So it's our friend.

41
00:02:45.330 --> 00:02:48.060
The anatomy of a component.

42
00:02:48.060 --> 00:02:54.180
And so, really,
we have two main styles of binding.

43
00:02:54.180 --> 00:02:58.520
We are binding to events to pass
information in to the component, or

44
00:02:58.520 --> 00:03:00.520
we're binding to properties.

45
00:03:00.520 --> 00:03:06.138
To essentially pass
information into the template.

46
00:03:06.138 --> 00:03:09.861
And then, between our template and
out class,

47
00:03:09.861 --> 00:03:13.130
we have property and event in the middle.

48
00:03:13.130 --> 00:03:15.270
So that's very much middle of the road.

49
00:03:15.270 --> 00:03:19.380
And then, you have your
string interpolation binding.

50
00:03:19.380 --> 00:03:23.440
And so, there is a question
that comes up like well,

51
00:03:23.440 --> 00:03:27.030
where would I use property binding
versus string interpolation binding?

52
00:03:28.110 --> 00:03:32.920
And there is this area where it
kind of just doesn't matter.

53
00:03:32.920 --> 00:03:36.130
They say generally,
if you use interpolation binding,

54
00:03:36.130 --> 00:03:39.340
if you're binding to a simple value,
that's not going to change.

55
00:03:41.300 --> 00:03:45.400
But other than that, it's probably
better to go for property binding.

56
00:03:47.010 --> 00:03:50.120
And so, really, actually binding to
strings is actually the other thing.

57
00:03:50.120 --> 00:03:54.490
If it's a string, you need to display it,
then that's where that goes.

58
00:03:55.556 --> 00:03:57.330
And then, two-way binding,

59
00:03:57.330 --> 00:04:01.130
which is essentially the combination
of property and event binding.

60
00:04:02.480 --> 00:04:10.010
Put those together and we have
a two-way street or two-way binding.

61
00:04:10.010 --> 00:04:12.050
So let's talk about property binding.

62
00:04:12.050 --> 00:04:17.460
So this really flows data from
the component to an element and

63
00:04:17.460 --> 00:04:20.100
this is created with brackets.

64
00:04:20.100 --> 00:04:24.220
Now, there is kind of
a long hand form to this.

65
00:04:24.220 --> 00:04:29.710
So if somebody's completely
offended by kind of this

66
00:04:29.710 --> 00:04:34.150
syntax that's being introduced,
you can actually do this long hand and

67
00:04:34.150 --> 00:04:38.720
you use simply attach bind hyphen
to whatever you want to bind.

68
00:04:38.720 --> 00:04:43.890
So the canonical form of
[property] is bind-property.

69
00:04:43.890 --> 00:04:45.570
I personally have never used this,

70
00:04:45.570 --> 00:04:48.730
but there could be some cases
where you would want to do that.

71
00:04:49.950 --> 00:04:55.629
And as well, there are some special cases
to property binding, or do you actually

72
00:04:55.629 --> 00:05:00.751
wanna bind to attributes, classes,
or styles, and it looks like this.

73
00:05:00.751 --> 00:05:05.234
So if you wanna basically bind
to an attribute property that

74
00:05:05.234 --> 00:05:09.718
doesn't exist on the element,
so this happens with SVG and

75
00:05:09.718 --> 00:05:15.300
different things you just attach ATTR for
attribute dot property class.

76
00:05:15.300 --> 00:05:16.760
class.className.

77
00:05:16.760 --> 00:05:17.280
Styles.

78
00:05:17.280 --> 00:05:18.750
style.styleName.

79
00:05:20.510 --> 00:05:24.080
And so, for instance, and
example of this would be

80
00:05:24.080 --> 00:05:29.680
if you wanted to bind to let's say like X.

81
00:05:29.680 --> 00:05:33.120
The X property or the alpha property.

82
00:05:33.120 --> 00:05:40.150
On an element, you could do style.x,
style.alpha or whatever it is opacity.

83
00:05:40.150 --> 00:05:43.950
And then, as this basically property
changed in your component it

84
00:05:43.950 --> 00:05:49.660
would then update essentially that
style property on that element.

85
00:05:49.660 --> 00:05:52.020
So this is kinda some extensions that
you can do some kind of interesting

86
00:05:52.020 --> 00:05:52.900
things with that.

87
00:05:56.383 --> 00:05:58.934
&gt;&gt; Lukas Ruebbelke: For instance, [SOUND].

88
00:05:58.934 --> 00:06:01.334
So in this case, we just want to bind or

89
00:06:01.334 --> 00:06:04.770
change the color of
the text within the span.

90
00:06:04.770 --> 00:06:07.000
So we can use style.color.

91
00:06:07.000 --> 00:06:09.950
This is kinda the special binding syntax.

92
00:06:09.950 --> 00:06:12.180
So english just having to do some
additional things under the hood,

93
00:06:12.180 --> 00:06:15.480
but that counts for attributes,
styles, and classes.

94
00:06:17.980 --> 00:06:21.796
So Event Binding, data from

95
00:06:21.796 --> 00:06:26.890
the element back into the component.

96
00:06:26.890 --> 00:06:29.981
So parentheses, and

97
00:06:29.981 --> 00:06:35.991
the canonical form of this is on-event,

98
00:06:35.991 --> 00:06:41.160
so on click, on mouse event, etc.

99
00:06:41.160 --> 00:06:44.650
And then, you can also pass, if you
actually wanna pull dom information or

100
00:06:44.650 --> 00:06:50.360
information about the dom within itself,
it's carried within the event parameter.

101
00:06:50.360 --> 00:06:51.390
Also, if you pass it in.

102
00:06:51.390 --> 00:06:55.060
So if you put something specific in there,
then you can pull that out as well, but

103
00:06:55.060 --> 00:07:00.606
essentially Target event information's
carried in the $event parameter.

104
00:07:02.413 --> 00:07:05.078
&gt;&gt; Lukas Ruebbelke: So
here we have click event, and

105
00:07:05.078 --> 00:07:09.830
if we wanted to pass this in,
I'll just put this in here.

106
00:07:14.412 --> 00:07:15.400
&gt;&gt; Lukas Ruebbelke: Like this.

107
00:07:15.400 --> 00:07:19.972
So within our component if we wanted to
actually get information off the ($event),

108
00:07:19.972 --> 00:07:22.236
then we would just accept that parameter.

109
00:07:22.236 --> 00:07:25.775
And then,
we could do interesting things with it.

110
00:07:25.775 --> 00:07:27.034
Yes?

111
00:07:27.034 --> 00:07:29.710
&gt;&gt; Speaker 2: I have a question
about can you change style?

112
00:07:32.230 --> 00:07:37.089
&gt;&gt; Lukas Ruebbelke: So
this is good for really like single

113
00:07:37.089 --> 00:07:41.805
properties of classes and styles.

114
00:07:41.805 --> 00:07:44.490
And they specifically
mention this in Angular Docs.

115
00:07:44.490 --> 00:07:47.880
So for instance, you wanted to target for
instance a single class,

116
00:07:47.880 --> 00:07:52.440
then you could just use essentially
property binding to that.

117
00:07:52.440 --> 00:07:57.000
But if you need to chain multiple classes
or styles then you would use NG class.

118
00:07:57.000 --> 00:07:58.691
And that allows you to do that.

119
00:07:58.691 --> 00:08:00.180
It gives you more control.

120
00:08:01.930 --> 00:08:02.800
And so, that's what that's for.

121
00:08:02.800 --> 00:08:04.680
It's this is good for
really a single style.

122
00:08:04.680 --> 00:08:09.160
If not,
then you're going to want to do NG class.

123
00:08:09.160 --> 00:08:13.960
That'll allow you to toggle actually
multiple classes based on some condition.

124
00:08:19.901 --> 00:08:22.585
&gt;&gt; Lukas Ruebbelke: Combination
of property and event bindings,

125
00:08:22.585 --> 00:08:25.281
used in conjunction
with ngModel generally.

126
00:08:25.281 --> 00:08:28.010
So this is where you're going to see this.

127
00:08:28.010 --> 00:08:30.350
I'm going to put this
little nugget out here.

128
00:08:30.350 --> 00:08:35.350
That you can, first and
foremost, create custom events.

129
00:08:37.030 --> 00:08:41.060
You can also create custom essentially
attributes that you bind to,

130
00:08:41.060 --> 00:08:43.490
the inputs and outputs.

131
00:08:43.490 --> 00:08:47.856
And there is a way to
create custom two-way data

132
00:08:47.856 --> 00:08:51.260
binding within your child component
to your parent component.

133
00:08:52.490 --> 00:08:56.140
And so, we may get into that tomorrow when
we get into component driven architecture.

134
00:08:56.140 --> 00:09:00.442
But, for instance,
when I change this property in the child I

135
00:09:00.442 --> 00:09:03.775
want it to automatically
update on the parent.

136
00:09:03.775 --> 00:09:08.250
And when I change it on the parent I wanna
automatically update it on the child.

137
00:09:08.250 --> 00:09:10.430
And there is a way to do that.

138
00:09:10.430 --> 00:09:15.170
Coincidentally, by combining N input and
an output

139
00:09:15.170 --> 00:09:20.640
with one semantic change, that will then
indicate like this is to a data binding.

140
00:09:20.640 --> 00:09:23.417
So you do something totally custom and

141
00:09:23.417 --> 00:09:27.773
then when you wrap it in prints and
box, then now it's 2a.

142
00:09:31.534 --> 00:09:34.402
&gt;&gt; Lukas Ruebbelke: Here we go, so
this is generally used with NG model,

143
00:09:34.402 --> 00:09:36.240
this is where you gonna see this.

144
00:09:38.240 --> 00:09:43.859
And we have a dynamic value if we type it
then it will update in the bottom here.

145
00:09:52.758 --> 00:09:55.628
&gt;&gt; Lukas Ruebbelke: So let's do, you know
what, let's take one quick break and

146
00:09:55.628 --> 00:09:58.080
let me show some code real quick.

147
00:09:58.080 --> 00:09:59.690
Just so we're really anchoring this down.

148
00:10:07.153 --> 00:10:07.780
&gt;&gt; Lukas Ruebbelke: So we go to

149
00:10:12.772 --> 00:10:18.384
&gt;&gt; Lukas Ruebbelke: Widgets component.

150
00:10:23.675 --> 00:10:27.941
&gt;&gt; Lukas Ruebbelke: And
&gt;&gt; Lukas Ruebbelke: Let's create.

151
00:10:30.273 --> 00:10:31.500
&gt;&gt; Lukas Ruebbelke: I
really like that color one.

152
00:10:35.889 --> 00:10:38.630
&gt;&gt; Lukas Ruebbelke: Color = blue.

153
00:10:43.695 --> 00:10:47.020
&gt;&gt; Lukas Ruebbelke: And then, a component.

154
00:10:47.020 --> 00:10:52.533
Does it make sense

155
00:10:52.533 --> 00:10:58.110
what i'm doing?

156
00:10:58.110 --> 00:11:03.610
I'm simply saying I wanna bind this
color and style of this element.

157
00:11:03.610 --> 00:11:06.340
To whatever this is right here.

158
00:11:10.461 --> 00:11:14.680
&gt;&gt; Lukas Ruebbelke: Interesting.

159
00:11:14.680 --> 00:11:20.500
But let's go back, and enter our code.

160
00:11:24.659 --> 00:11:28.240
&gt;&gt; Speaker 2: Was my color set
to blue in the components?

161
00:11:28.240 --> 00:11:28.860
&gt;&gt; Lukas Ruebbelke: Yes.

162
00:11:28.860 --> 00:11:29.610
&gt;&gt; Speaker 2: Okay.
&gt;&gt; Lukas Ruebbelke: So let me just put

163
00:11:29.610 --> 00:11:31.500
these side by side real quick.

164
00:11:31.500 --> 00:11:33.020
Hopefully this will.

165
00:11:33.020 --> 00:11:35.899
Can we kind of see this here?

166
00:11:35.899 --> 00:11:36.469
&gt;&gt; Speaker 2: There we go.

167
00:11:36.469 --> 00:11:37.114
&gt;&gt; Lukas Ruebbelke: So in the template.

168
00:11:37.114 --> 00:11:41.526
So we're just kinda freestyling here.

169
00:11:41.526 --> 00:11:42.445
And then, over here.

170
00:11:49.666 --> 00:11:50.860
&gt;&gt; Lukas Ruebbelke: Let's
create a method setColor.

171
00:12:05.164 --> 00:12:08.791
&gt;&gt; Lukas Ruebbelke: Now, if we wanna
just set this color, to something else,

172
00:12:08.791 --> 00:12:11.540
who need to, let's say capture and event.

173
00:12:13.661 --> 00:12:14.890
&gt;&gt; Lukas Ruebbelke: Well,
what we can do here,

174
00:12:16.496 --> 00:12:17.384
&gt;&gt; Lukas Ruebbelke: Let's go

175
00:12:17.384 --> 00:12:19.928
click,
&gt;&gt; Lukas Ruebbelke: So

176
00:12:19.928 --> 00:12:24.526
want to catch the click event on the ch1,
and

177
00:12:24.526 --> 00:12:28.774
then we want to call setColor('red')

178
00:12:39.287 --> 00:12:40.400
&gt;&gt; Lukas Ruebbelke: Snap.

179
00:12:40.400 --> 00:12:42.400
So this make sense what I've done?

180
00:12:42.400 --> 00:12:47.790
I'm basically binding, I'm taking
a property from my component and

181
00:12:47.790 --> 00:12:50.720
I'm binding it into my template so
that it renders.

182
00:12:50.720 --> 00:12:55.410
Then, when I wanna capture
an event from the template,

183
00:12:55.410 --> 00:12:59.830
I'm then using that to convey that
event back into my component.

184
00:13:02.010 --> 00:13:06.779
Now, let's check out NG model.

185
00:13:06.779 --> 00:13:12.920
So two-way data binding, so
this is where things can get interesting.

186
00:13:14.670 --> 00:13:16.620
Or more interesting at least.

187
00:13:16.620 --> 00:13:19.976
So I'm just gonna do horizontal rule and
then let's do an input.

188
00:13:19.976 --> 00:13:25.601
And then, from here,
I'm just gonna use ngModel and

189
00:13:25.601 --> 00:13:28.730
I'm gonna set it to myColor.

190
00:13:31.738 --> 00:13:36.967
&gt;&gt; Lukas Ruebbelke: Now,
what's gonna happen here is that you can

191
00:13:36.967 --> 00:13:43.010
see here in the text its
rendering as eye color.

192
00:13:43.010 --> 00:13:44.150
It's not being evaluated.

193
00:13:45.280 --> 00:13:46.410
Why is that?

194
00:13:46.410 --> 00:13:48.699
&gt;&gt; Speaker 3: You don't have the brackets.

195
00:13:48.699 --> 00:13:50.701
&gt;&gt; Lukas Ruebbelke: Cuz I
don't have the brackets.

196
00:13:52.270 --> 00:13:53.090
So if we go back here,

197
00:14:02.226 --> 00:14:04.290
&gt;&gt; Lukas Ruebbelke: Let's do
one other thing real quick.

198
00:14:07.674 --> 00:14:09.349
&gt;&gt; Lukas Ruebbelke: Just so
we can kinda keep track of this.

199
00:14:14.078 --> 00:14:14.650
&gt;&gt; Lukas Ruebbelke: myColor.

200
00:14:20.657 --> 00:14:22.063
&gt;&gt; Lukas Ruebbelke: And so, now it's being

201
00:14:22.063 --> 00:14:25.027
evaluated,
&gt;&gt; Lukas Ruebbelke: But

202
00:14:25.027 --> 00:14:27.240
let's see what happens.

203
00:14:27.240 --> 00:14:32.090
So I've just clicked it and so
it changed it at the component level and

204
00:14:32.090 --> 00:14:38.310
it updated the input and it updated
just the string interpolation binding.

205
00:14:40.240 --> 00:14:44.990
So then the question is when I go here and
I type it, what's happening?

206
00:14:44.990 --> 00:14:49.070
Well, absolutely nothing because
we're not actually conveying

207
00:14:49.070 --> 00:14:53.410
the fact that this input has
changed back to the component.

208
00:14:55.643 --> 00:14:59.868
&gt;&gt; Lukas Ruebbelke: But we can do that,
&gt;&gt; Lukas Ruebbelke: By

209
00:14:59.868 --> 00:15:02.958
making a banana in a box.

210
00:15:02.958 --> 00:15:08.346
[SOUND] And
now what we're saying is pull the property

211
00:15:08.346 --> 00:15:12.755
from the component into the template, but

212
00:15:12.755 --> 00:15:20.243
when it changes in the template convey
that value back to the component.

213
00:15:20.243 --> 00:15:26.480
So let's go here, blue,
red, get back here.

214
00:15:30.207 --> 00:15:35.828
&gt;&gt; Lukas Ruebbelke: So you can notice
that when I change this, then it updates.

215
00:15:35.828 --> 00:15:41.850
Red, green, whatever.

216
00:15:41.850 --> 00:15:46.377
I'm actually wondering what if I go F, F.

217
00:15:46.377 --> 00:15:47.944
Holy cramoly.

218
00:15:47.944 --> 00:15:50.980
That's pretty cool.

219
00:15:50.980 --> 00:15:52.867
But I think really if we
look in this microscope,

220
00:15:52.867 --> 00:15:54.810
we can kinda see what's happening.

221
00:15:56.470 --> 00:16:01.070
&gt;&gt; Speaker 2: Caitlin was asking
a question about practice of using in line

222
00:16:01.070 --> 00:16:01.709
style.

223
00:16:04.333 --> 00:16:08.301
&gt;&gt; Lukas Ruebbelke: Generally I
will not inline styles,

224
00:16:08.301 --> 00:16:12.520
this is for demonstration purposes.

225
00:16:12.520 --> 00:16:18.597
As well as there are cases where this
would make sense if you wanted to,

226
00:16:18.597 --> 00:16:22.518
for instance, dealing with an SVG element.

227
00:16:22.518 --> 00:16:24.480
I think there's cases to do that.

228
00:16:24.480 --> 00:16:25.850
I would definitely not make this

229
00:16:27.610 --> 00:16:32.220
the bedrock of your UI experience,
is binding to it.

230
00:16:32.220 --> 00:16:37.918
I think in general inlining
styles as a whole is,

231
00:16:37.918 --> 00:16:43.510
I think post-production you can
do some inlining in the page.

232
00:16:43.510 --> 00:16:44.666
But as a whole, I would not do that.

233
00:16:44.666 --> 00:16:47.220
I would very sparingly.

234
00:16:47.220 --> 00:16:50.280
So I'm not gonna start out and do that.

235
00:16:50.280 --> 00:16:54.800
But there are cases where dynamically
you want to set something.

236
00:16:54.800 --> 00:16:56.787
And so, you're not actually
applying it with a reusable style.

237
00:16:56.787 --> 00:17:01.240
And a lot of times I won't
do it at the style level.

238
00:17:01.240 --> 00:17:03.720
But I will do it at the class level.

239
00:17:03.720 --> 00:17:07.360
So I've already have this predefined
class that I wanna toggle.

240
00:17:07.360 --> 00:17:08.790
And this is much more common.

241
00:17:08.790 --> 00:17:11.470
So this is more of for
demonstration purposes.

242
00:17:11.470 --> 00:17:14.870
And there are some cases where you
might wanna toggle a single color.

243
00:17:15.940 --> 00:17:20.351
And it's so simple,
then I think that would be okay.

244
00:17:20.351 --> 00:17:21.970
Karen, you're absolutely right.

245
00:17:23.130 --> 00:17:24.390
You wanna use this judiciously.

246
00:17:27.360 --> 00:17:30.645
And I don't know,
what are some more colors?

247
00:17:30.645 --> 00:17:32.068
&gt;&gt; Speaker 2: Medium aquamarine.

248
00:17:32.068 --> 00:17:33.422
&gt;&gt; Lukas Ruebbelke: Is that all one word?

249
00:17:33.422 --> 00:17:34.089
&gt;&gt; Speaker 2: Yeah.

250
00:17:36.669 --> 00:17:38.947
&gt;&gt; Lukas Ruebbelke: Man, boom.

251
00:17:38.947 --> 00:17:39.860
&gt;&gt; Speaker 2: Tomato.

252
00:17:39.860 --> 00:17:42.393
&gt;&gt; Lukas Ruebbelke: Tomato.

253
00:17:42.393 --> 00:17:43.070
&gt;&gt; Speaker 3: You can even do.

254
00:17:43.070 --> 00:17:45.560
&gt;&gt; Lukas Ruebbelke: Wait,
is that actually a color.

255
00:17:45.560 --> 00:17:46.550
&gt;&gt; Speaker 2: Yes.
&gt;&gt; Lukas Ruebbelke: I thought

256
00:17:46.550 --> 00:17:49.199
we were singing a show tunes here.

257
00:17:49.199 --> 00:17:50.489
&gt;&gt; Speaker 3: You can even do RGBA.

258
00:17:51.780 --> 00:17:53.742
&gt;&gt; Lukas Ruebbelke: Really?

259
00:17:53.742 --> 00:17:54.521
&gt;&gt; Speaker 3: Yeah.
&gt;&gt; Lukas Ruebbelke: Really?

260
00:17:54.521 --> 00:17:56.561
&gt;&gt; Speaker 2: Yeah,
I'm sure anything that CSS will do.

261
00:17:56.561 --> 00:17:59.017
&gt;&gt; Lukas Ruebbelke: I mean if it's a
string neither is going to evaluate it so

262
00:17:59.017 --> 00:18:00.020
that's pretty cool.

263
00:18:01.510 --> 00:18:07.410
So does anybody have any questions about
what's happening in this code block here?

264
00:18:11.490 --> 00:18:12.369
You feel pretty good about it?

265
00:18:15.001 --> 00:18:16.685
&gt;&gt; Lukas Ruebbelke: All right.

266
00:18:18.617 --> 00:18:19.145
&gt;&gt; Lukas Ruebbelke: Moving along.

267
00:18:24.188 --> 00:18:26.751
&gt;&gt; Lukas Ruebbelke: So now we can
see that when we change NG model,

268
00:18:26.751 --> 00:18:31.209
it's going to update dynamic value,
which is going to update the component.

269
00:18:32.570 --> 00:18:35.200
And because we're now
binding here in the span

270
00:18:35.200 --> 00:18:37.550
it's going to update it at the bottom,
as well.

