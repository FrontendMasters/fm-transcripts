WEBVTT

1
00:00:00.640 --> 00:00:03.380
&gt;&gt; Lukas Ruebbelke: Okay,
so create a class.

2
00:00:03.380 --> 00:00:04.730
Import you dependencies.

3
00:00:04.730 --> 00:00:08.130
Decorate you class, and then enhance.

4
00:00:08.130 --> 00:00:11.610
First, by adding methods and
properties to your class.

5
00:00:11.610 --> 00:00:16.100
And then, also by injecting
services into your constructor so

6
00:00:16.100 --> 00:00:19.760
that you can then delegate
business logic back up.

7
00:00:21.710 --> 00:00:28.980
And the final piece repeat, that is once
your component gets a sufficient size,

8
00:00:28.980 --> 00:00:32.640
then be aggressive about actually
breaking that into a subcomponent.

9
00:00:32.640 --> 00:00:36.980
So that's where that comes in,
it's create, import, decorate.

10
00:00:36.980 --> 00:00:38.970
You enhance it, so you start to
build out your functionality, and

11
00:00:38.970 --> 00:00:42.450
you're like, okay,
now I've reached a place of critical mass.

12
00:00:42.450 --> 00:00:45.720
I'm going to repeat the same
process on a subcomponent and so

13
00:00:45.720 --> 00:00:47.760
you just continue to refactor.

14
00:00:49.220 --> 00:00:54.920
So one additional piece on components
that are extremely important.

15
00:00:54.920 --> 00:00:59.267
And we've kind of touched on this,
various points throughout the day,

16
00:00:59.267 --> 00:01:01.200
is lifecycle hooks.

17
00:01:01.200 --> 00:01:07.380
And so under the hood,
there is a secret life of components.

18
00:01:07.380 --> 00:01:11.930
There's things that are happening that
are just going to happen no matter what.

19
00:01:11.930 --> 00:01:14.230
So a component gets added to the stage,

20
00:01:14.230 --> 00:01:18.780
it's bindings get initialized,
some property changes, etc.

21
00:01:18.780 --> 00:01:23.350
Angular's handling these events
kind of behind the scenes.

22
00:01:23.350 --> 00:01:24.670
Well, with lifecycle hooks,

23
00:01:24.670 --> 00:01:30.290
we have the ability to hook into those
lifecycle events and perform custom logic.

24
00:01:31.966 --> 00:01:35.060
For instance,
one of the biggest ones is that your data

25
00:01:35.060 --> 00:01:39.295
is not always available in
the constructor, thus we use ngOnInit.

26
00:01:41.260 --> 00:01:44.200
&gt;&gt; Lukas Ruebbelke: As well as you'll
notice that in my code I'm using

27
00:01:44.200 --> 00:01:45.670
interfaces.

28
00:01:45.670 --> 00:01:50.805
So this isn't required, but
it is recommended to make your code

29
00:01:50.805 --> 00:01:56.460
self-documenting as well as it allows
your IDE to catch additional problems.

30
00:01:58.060 --> 00:02:00.060
And let me see here.

31
00:02:00.060 --> 00:02:02.061
Yes, so for your lifecycle hooks,

32
00:02:02.061 --> 00:02:06.680
they're just implemented as essentially
class methods on the component class.

33
00:02:08.730 --> 00:02:16.240
And so what we have here is this
entire list of lifecycle hooks.

34
00:02:16.240 --> 00:02:21.852
But generally, if we were going
to apply the 80/20 rule here,

35
00:02:21.852 --> 00:02:25.204
these are the two that get used the most.

36
00:02:25.204 --> 00:02:29.925
So you could definitely go down the rabbit
hole, and there's cases for these other

37
00:02:29.925 --> 00:02:34.270
ones, not trying to marginalize
their contributions by any means.

38
00:02:34.270 --> 00:02:39.550
But ngOnInit, well so this is
called after the first ngOnChanges.

39
00:02:39.550 --> 00:02:41.900
So essentially your bindings
have been initialized.

40
00:02:41.900 --> 00:02:49.680
And ngOnDestroy is called just before your
directive or your component is destroyed.

41
00:02:49.680 --> 00:02:54.920
So really OnInit is when
it's coming to life, and

42
00:02:54.920 --> 00:02:59.980
OnDestroy is when it's going
to be taken from the DOM.

43
00:03:03.580 --> 00:03:06.850
&gt;&gt; Lukas Ruebbelke: And so we've actually
seen this quite a bit in our code already.

44
00:03:06.850 --> 00:03:11.550
But notice ItemsComponent is
implementing the OnInit interface.

45
00:03:12.590 --> 00:03:16.140
And so now by contract,

46
00:03:16.140 --> 00:03:20.850
we are obligated to have an ngOnInit
method on our component class.

47
00:03:20.850 --> 00:03:24.430
And from here, then we're doing
some kind of initialization.

48
00:03:26.210 --> 00:03:27.640
And so
this just gets called automatically.

49
00:03:27.640 --> 00:03:31.193
So that's the one thing
about lifecycle hooks,

50
00:03:31.193 --> 00:03:34.930
is that they are implicitly
called on every event.

51
00:03:34.930 --> 00:03:36.710
You don't have to actually
explicitly call them.

52
00:03:40.053 --> 00:03:43.416
&gt;&gt; Lukas Ruebbelke: I can't think of
a reason, but it would be really weird if

53
00:03:43.416 --> 00:03:48.452
you ever had to call a lifecycle hook
directly, so if you're ever this.ngOnInit.

54
00:03:48.452 --> 00:03:53.340
I don't know, maybe for
testing I've done it on 1.x components,

55
00:03:53.340 --> 00:03:57.920
but within your actual application
Angular implicitly calls these for you.

56
00:03:59.370 --> 00:04:00.390
Yes?

57
00:04:00.390 --> 00:04:03.603
&gt;&gt; Speaker 2: So with typescript in
your implements OnInit, was that just

58
00:04:03.603 --> 00:04:07.570
a comma delimited list of lifecycle
hooks if you had on OnDestroy there?

59
00:04:07.570 --> 00:04:08.874
&gt;&gt; Lukas Ruebbelke: Yep.
&gt;&gt; Speaker 2: It would follow that same

60
00:04:08.874 --> 00:04:10.210
syntax, ngOnDestroy?

61
00:04:10.210 --> 00:04:12.700
&gt;&gt; Lukas Ruebbelke: Yep, and so the
question is, if you wanted to implement

62
00:04:12.700 --> 00:04:17.890
yet another lifecycle interface,
would that just be a comma delimited list?

63
00:04:17.890 --> 00:04:18.870
And that's correct.

64
00:04:18.870 --> 00:04:22.020
So it'd be OnInit, OnDestroy.

