WEBVTT

1
00:00:00.250 --> 00:00:03.470
&gt;&gt; Lukas Ruebbelke: The three big things I
want us to walk away with, or rather four.

2
00:00:03.470 --> 00:00:08.500
Is how to spin up a project,
how to build a component, how to hook it

3
00:00:08.500 --> 00:00:14.250
into a template, and then how to abstract
our basic business logic into a service.

4
00:00:14.250 --> 00:00:20.991
And so I dedicate this module to my
friend here, you, this is for you bud.

5
00:00:24.228 --> 00:00:28.077
&gt;&gt; Lukas Ruebbelke: Service man.

6
00:00:28.077 --> 00:00:32.562
Okay so a service is just a class, and

7
00:00:32.562 --> 00:00:36.920
we understand how classes work.

8
00:00:36.920 --> 00:00:40.277
We've built components,
properties, methods.

9
00:00:43.670 --> 00:00:46.146
&gt;&gt; Lukas Ruebbelke: And so,
this really becomes quite simple.

10
00:00:46.146 --> 00:00:48.531
How do we define a service?

11
00:00:48.531 --> 00:00:50.160
How do we expose a service?

12
00:00:50.160 --> 00:00:52.482
And how do we consume a service?

13
00:00:55.898 --> 00:01:00.770
&gt;&gt; Lukas Ruebbelke: So,
defining a service, well, look at this.

14
00:01:03.720 --> 00:01:09.820
This could, if I had not had,
so if this was called items,

15
00:01:11.300 --> 00:01:16.967
and I took off the metadata,
what do we know if this is a component, or

16
00:01:16.967 --> 00:01:23.370
a service,
I mean it would be hard to tell.

17
00:01:23.370 --> 00:01:24.960
&gt;&gt; Speaker 2: If you took off what?

18
00:01:24.960 --> 00:01:29.138
&gt;&gt; Lukas Ruebbelke: So if I went like
this, let's take off the metadata.

19
00:01:34.530 --> 00:01:35.219
&gt;&gt; Lukas Ruebbelke: I did this.

20
00:01:39.285 --> 00:01:41.517
&gt;&gt; Lukas Ruebbelke: At this
point it's just a class,

21
00:01:41.517 --> 00:01:45.720
angular has no way that we
don't know it can be anything.

22
00:01:45.720 --> 00:01:50.710
There's even times where I've had
a component that simply had a collection

23
00:01:50.710 --> 00:01:55.140
on it that I'm consuming in my templates,
I'm like this needs to be a service.

24
00:01:55.140 --> 00:01:57.860
Copy it, paste it, change the name,
change the metadata boom.

25
00:01:59.140 --> 00:02:04.920
And so this is,
again what I think Angular 2 got very,

26
00:02:04.920 --> 00:02:11.170
very right,
is we're letting ES6 do all of the heavy

27
00:02:11.170 --> 00:02:16.030
lifting in terms of organization,
exposing functionality, etcetera.

28
00:02:16.030 --> 00:02:22.427
Like, in classes now for
inheritance that's the devils work,

29
00:02:22.427 --> 00:02:27.639
but for
organizational purposes it's amazing like

30
00:02:27.639 --> 00:02:32.866
classes in modules are great for
organizing stuff.

31
00:02:32.866 --> 00:02:39.238
So that's go back, that is definitely
kind of an interesting thought

32
00:02:39.238 --> 00:02:44.860
is once we take this away, and
it's just a class, what is it?

33
00:02:47.470 --> 00:02:50.620
So the question is are static
classes okay in NG 2?

34
00:02:53.457 --> 00:02:57.590
&gt;&gt; Lukas Ruebbelke: I don't know if
typescript even has the concept of static

35
00:02:57.590 --> 00:03:04.100
classes, maybe we are getting to the edge
of my classical JavaScript experience.

36
00:03:04.100 --> 00:03:08.390
So if anybody knows that answer
about static classes and JavaScript,

37
00:03:08.390 --> 00:03:12.920
I don't think they actually exist,
typescript may have them, I don't know.

38
00:03:14.130 --> 00:03:15.070
So,
&gt;&gt; Speaker 2: Typescript itself

39
00:03:15.070 --> 00:03:16.290
certainly does not.

40
00:03:16.290 --> 00:03:18.180
&gt;&gt; Lukas Ruebbelke: Yeah, so
the first person to google that, and

41
00:03:18.180 --> 00:03:19.687
get an answer get a high five from me.

42
00:03:27.480 --> 00:03:29.452
&gt;&gt; Lukas Ruebbelke: And
so defining a service,

43
00:03:31.840 --> 00:03:33.004
&gt;&gt; Lukas Ruebbelke: It's here I don't

44
00:03:33.004 --> 00:03:35.635
feel like I don't feel like really CIDER.

45
00:03:37.744 --> 00:03:41.840
&gt;&gt; Lukas Ruebbelke: How do we expose
stuff to the application in the module?

46
00:03:41.840 --> 00:03:46.570
So we'll just go down to providers,
add it in.

47
00:03:48.780 --> 00:03:50.490
And.

48
00:03:50.490 --> 00:03:52.630
&gt;&gt; Speaker 2: Does that assume that
there's an import above it there?

49
00:03:52.630 --> 00:03:53.720
&gt;&gt; Lukas Ruebbelke: Yes.

50
00:03:53.720 --> 00:03:55.729
So we'll hop into the code and
actually walk through this.

51
00:03:55.729 --> 00:04:03.125
This is and then to consume a service
&gt;&gt; Lukas Ruebbelke: Well,

52
00:04:03.125 --> 00:04:08.879
in the constructor of the class,
using constructor assignment.

53
00:04:11.670 --> 00:04:15.876
&gt;&gt; Lukas Ruebbelke: But look at this,
you gonna actually have a service that

54
00:04:15.876 --> 00:04:20.990
consumes another service, and
the mechanism is exactly the same.

55
00:04:20.990 --> 00:04:25.374
So again talking about
the patterns like the dependency

56
00:04:25.374 --> 00:04:28.088
injection mechanism just works.

57
00:04:33.390 --> 00:04:35.720
&gt;&gt; Lukas Ruebbelke: So we're starting
to kinda see some of these patterns.

58
00:04:39.114 --> 00:04:42.557
&gt;&gt; Lukas Ruebbelke: So there was
a question would you name classes

59
00:04:42.557 --> 00:04:46.635
specifically like CSS has Bem,
and the style guide,

60
00:04:46.635 --> 00:04:51.618
the official one that John Papa did,
the Angular 2 style guide,

61
00:04:51.618 --> 00:04:55.590
they have some specific recommendations.

62
00:04:55.590 --> 00:05:01.000
I generally would do the model that
you're basically talking about,

63
00:05:01.000 --> 00:05:04.390
whatever that is, the mechanism,
so in this case like items.

64
00:05:04.390 --> 00:05:10.120
And then whatever it is like item service,
items component, item list component and

65
00:05:10.120 --> 00:05:13.360
therefore when I look at it or I'm
looking in the code I'm able to find it.

66
00:05:13.360 --> 00:05:16.926
Now some people have some very
different opinions about that for

67
00:05:16.926 --> 00:05:21.218
me personally I feel like code should be
self documenting, and I like to when I

68
00:05:21.218 --> 00:05:25.399
look at something know that this is
a service and this is a component, etc.

69
00:05:35.594 --> 00:05:39.334
&gt;&gt; Lukas Ruebbelke: Okay,
wow, demonstration time.

70
00:05:39.334 --> 00:05:40.323
Time flies.

71
00:05:46.575 --> 00:05:50.054
&gt;&gt; Lukas Ruebbelke: So the temptation
here, it's for me to just go ahead and

72
00:05:50.054 --> 00:05:54.290
solve the challenge that's coming up,
but I don't wanna do that.

73
00:05:55.310 --> 00:05:57.350
So now I need to make one
up off the top of my head.

74
00:06:00.310 --> 00:06:01.314
Let's do a new service.

75
00:06:09.774 --> 00:06:11.727
&gt;&gt; Lukas Ruebbelke: New text script file.

76
00:06:14.364 --> 00:06:18.590
&gt;&gt; Lukas Ruebbelke: Let's
go users.service.ts

77
00:06:34.218 --> 00:06:37.751
&gt;&gt; Lukas Ruebbelke: Let's

78
00:06:37.751 --> 00:06:44.227
do something

79
00:06:44.227 --> 00:06:48.937
here real

80
00:06:48.937 --> 00:06:53.061
quick.

81
00:06:53.061 --> 00:06:59.165
After this im create a, hold on I got this

82
00:06:59.165 --> 00:07:08.854
wrong
&gt;&gt; Lukas Ruebbelke: So

83
00:07:08.854 --> 00:07:12.190
I'm creating an interface for user.

84
00:07:12.190 --> 00:07:17.020
So going back to interfaces,
what this does is it defines

85
00:07:18.090 --> 00:07:21.000
what a user object should look like.

86
00:07:21.000 --> 00:07:26.720
So it allows us to actually create typing,
typings for specific objects.

87
00:07:26.720 --> 00:07:32.840
So, again C sharp, this is any classical
language we understand this quite well.

88
00:07:32.840 --> 00:07:36.176
So let's go name,

89
00:07:36.176 --> 00:07:42.015
actually let's go i.d number,

90
00:07:42.015 --> 00:07:47.869
name is string and description.

91
00:07:47.869 --> 00:07:52.840
Pretty standard, okay.

92
00:07:52.840 --> 00:07:57.400
And then what we can do is let's go,

93
00:07:57.400 --> 00:08:05.861
selected
&gt;&gt; Lukas Ruebbelke: Again,

94
00:08:05.861 --> 00:08:08.843
thank you Intellisent's.

95
00:08:08.843 --> 00:08:14.925
So we're saying is when we select set,
this selected user,

96
00:08:14.925 --> 00:08:20.340
we expect it, to be, This,
it will look like this.

97
00:08:20.340 --> 00:08:22.600
So we can then, make some inferences.

98
00:08:22.600 --> 00:08:28.416
As, well you can see here, that.

99
00:08:28.416 --> 00:08:30.565
&gt;&gt; Lukas Ruebbelke: Of how
this is going to, be shape.

100
00:08:30.565 --> 00:08:31.620
So if we go, for inferences.

101
00:08:38.969 --> 00:08:40.764
&gt;&gt; Lukas Ruebbelke: Let's see,
if this is gonna make me.

102
00:08:47.970 --> 00:08:50.942
&gt;&gt; Lukas Ruebbelke: So,
set's selected user.

103
00:08:50.942 --> 00:08:53.519
And so
now we can say when we set this in here,

104
00:08:53.519 --> 00:08:57.370
like we expect this parameter
to be of type user.

105
00:08:57.370 --> 00:09:02.573
And then we'll go, now you can see here,
because we have those three

106
00:09:02.573 --> 00:09:08.047
properties on the interface,
that probably can we make some inferences

107
00:09:08.047 --> 00:09:13.182
about what this is going to look like,
but the IDE or the IDE as well.

108
00:09:13.182 --> 00:09:19.030
Like this, now.

109
00:09:19.030 --> 00:09:25.180
I think this is cool,
you can also type, collections.

110
00:09:26.550 --> 00:09:28.850
So, what you can do here, is.

111
00:09:36.458 --> 00:09:41.383
&gt;&gt; Lukas Ruebbelke: They're saying,
We are printing a user's property,

112
00:09:41.383 --> 00:09:44.850
that is an array, of user's objects.

113
00:09:46.640 --> 00:09:52.679
So then if we go here, we'll go ID one.

114
00:09:52.679 --> 00:09:57.660
And so right now it's already anchoring,
cuz I haven't satisfied the interface.

115
00:09:57.660 --> 00:10:03.689
Name, Marcus, description,

116
00:10:03.689 --> 00:10:09.280
FEM OG, and now it's happy.

117
00:10:10.440 --> 00:10:15.357
But look what happens if for instance,

118
00:10:15.357 --> 00:10:18.491
oops it doesn't match.

119
00:10:23.737 --> 00:10:24.766
&gt;&gt; Lukas Ruebbelke: So, you go here.

120
00:10:40.858 --> 00:10:42.705
&gt;&gt; Lukas Ruebbelke: I'm like the 'FEM,
MINI ME'.

121
00:10:44.856 --> 00:10:48.798
&gt;&gt; Lukas Ruebbelke: Davis,
I don't know who this is.

122
00:10:48.798 --> 00:10:49.298
Who!?

123
00:10:52.700 --> 00:10:55.090
Okay, so far so good?

124
00:10:55.090 --> 00:10:59.350
We now have, the user service,
we've created interface, and so

125
00:10:59.350 --> 00:11:03.720
now, we've done a pretty good job of,
Of typing these things out, so

126
00:11:03.720 --> 00:11:07.130
we can see, the user interface in action.

127
00:11:07.130 --> 00:11:11.039
But, now how do we expose this
to the rest of our application?

128
00:11:17.618 --> 00:11:19.430
&gt;&gt; Lukas Ruebbelke: Yeah,
I think you've got it.

129
00:11:19.430 --> 00:11:21.210
&gt;&gt; Speaker 2: Import it, in your module.

130
00:11:21.210 --> 00:11:21.740
&gt;&gt; Lukas Ruebbelke: Yes.

131
00:11:23.050 --> 00:11:26.160
Good, so, we can do this two ways.

132
00:11:28.370 --> 00:11:29.760
&gt;&gt; Speaker 3: [CROSSTALK] We need,
a semi colon.

133
00:11:29.760 --> 00:11:31.770
&gt;&gt; Lukas Ruebbelke: What?
&gt;&gt; Speaker 3: After, selected user.

134
00:11:31.770 --> 00:11:32.450
&gt;&gt; Lukas Ruebbelke: Did,
I mess something up?

135
00:11:34.600 --> 00:11:36.739
&gt;&gt; Speaker 3: [CROSSTALK] Selected user,
&gt;&gt; Lukas Ruebbelke: Yeah.

136
00:11:36.739 --> 00:11:38.050
Thank you, so much.

137
00:11:38.050 --> 00:11:43.575
Pair programming, FTW LOL.

138
00:11:43.575 --> 00:11:46.084
So, I'm gonna go ahead, and
I'm gonna just do a barrel roll, so

139
00:11:46.084 --> 00:11:47.513
I'm going to add this to the barrel.

140
00:11:53.709 --> 00:11:57.069
&gt;&gt; Lukas Ruebbelke: Users, service and.

141
00:12:01.927 --> 00:12:05.540
&gt;&gt; Lukas Ruebbelke: we'll go ahead and,
just export this as well.

142
00:12:05.540 --> 00:12:08.893
So we can actually carry this typing,
all the way through.

143
00:12:11.967 --> 00:12:13.244
&gt;&gt; Lukas Ruebbelke: the rest,
of the application.

144
00:12:15.117 --> 00:12:20.340
&gt;&gt; Lukas Ruebbelke: So, let's go ahead
and, let's add this to our at module.

145
00:12:23.310 --> 00:12:26.905
&gt;&gt; Lukas Ruebbelke: Now, again just
following up on the barrel roll,

146
00:12:26.905 --> 00:12:33.400
is I can import this specifically,
with kinda this fully qualified path name.

147
00:12:33.400 --> 00:12:39.590
So, I can go from here,
shared/user service.

148
00:12:39.590 --> 00:12:43.270
And like this would, totally work, and

149
00:12:43.270 --> 00:12:47.500
I could add this,
i could go here, like this.

150
00:12:47.500 --> 00:12:52.545
And then I can add this,
into the providers.

151
00:12:52.545 --> 00:12:56.260
But, once you have four and
five or whatever,

152
00:12:56.260 --> 00:13:01.380
Classes in the share directory,
this starts to get tedious.

153
00:13:01.380 --> 00:13:07.902
And so, this is where, you know this or
this is why this was created,

154
00:13:07.902 --> 00:13:13.188
is that we can just import
this all in one single import,

155
00:13:13.188 --> 00:13:20.047
which is what Angular two is doing in
a lot of places as well where import,

156
00:13:20.047 --> 00:13:25.005
for instance,
component On in it et cetera, okay?

157
00:13:25.005 --> 00:13:31.126
And so now,
that this is available to our application,

158
00:13:31.126 --> 00:13:34.130
how would we consume this?

159
00:13:34.130 --> 00:13:35.739
Let's, take.
Let's go back, to our widgets.

160
00:13:39.139 --> 00:13:46.270
&gt;&gt; Lukas Ruebbelke: Widgets Component,
Here, well, first things first.

161
00:13:48.750 --> 00:13:56.284
I want a, user's collection,
that is of type User.

162
00:14:02.639 --> 00:14:04.940
&gt;&gt; Lukas Ruebbelke: And so now, I'm
saying, I'm creating collection locally.

163
00:14:04.940 --> 00:14:09.250
So, again, this is just like I was
doing in the service, same pattern.

164
00:14:10.640 --> 00:14:14.231
But now, we need to actually,
inject this in here.

165
00:14:14.231 --> 00:14:18.150
So, let's go down here.

166
00:14:18.150 --> 00:14:22.251
Constructor.

167
00:14:22.251 --> 00:14:27.887
Private.

168
00:14:27.887 --> 00:14:31.380
userService.

169
00:14:31.380 --> 00:14:36.900
And we're not going to do,
anything with this here.

170
00:14:36.900 --> 00:14:44.494
But, what we wanna do is,
let's see if this is gonna give me.

171
00:14:44.494 --> 00:14:50.207
Nope.
So let's go up here, and

172
00:14:50.207 --> 00:14:55.880
implement our, A Init.

173
00:14:57.710 --> 00:14:59.401
Well, now we have to.

174
00:15:06.733 --> 00:15:08.594
&gt;&gt; Lukas Ruebbelke: So this.userservice,

175
00:15:08.594 --> 00:15:12.920
by using the access modifier
in the constructor.

176
00:15:12.920 --> 00:15:16.246
It's, not a local number.

177
00:15:16.246 --> 00:15:20.196
Let's, actually go,

178
00:15:20.196 --> 00:15:25.336
this.users equals, users.

179
00:15:25.336 --> 00:15:28.360
Rather, so you see even how that even,
It didn't like that.

180
00:15:32.490 --> 00:15:32.990
Okay.

181
00:15:36.210 --> 00:15:37.663
Then, if we go over here.

182
00:15:40.330 --> 00:15:41.923
&gt;&gt; Lukas Ruebbelke: Where do,
I wanna put this?

183
00:15:50.462 --> 00:15:52.190
&gt;&gt; Lukas Ruebbelke: So, let's just
put this at the top for a second.

184
00:15:53.400 --> 00:15:54.062
So, pre.

185
00:15:56.657 --> 00:15:58.076
&gt;&gt; Lukas Ruebbelke: Users.

186
00:16:04.668 --> 00:16:05.474
&gt;&gt; Lukas Ruebbelke: There we go.

187
00:16:12.658 --> 00:16:13.446
&gt;&gt; Lukas Ruebbelke: And there we have it.

188
00:16:15.876 --> 00:16:20.578
&gt;&gt; Lukas Ruebbelke: So, this was
the magical mystery service tour of

189
00:16:20.578 --> 00:16:24.142
how to build a service in Angular 2.

190
00:16:27.003 --> 00:16:28.979
&gt;&gt; Speaker 2: Dale's question.

191
00:16:30.299 --> 00:16:31.949
&gt;&gt; Speaker 2: There's an answer,
and then an opinion.

192
00:16:31.949 --> 00:16:33.430
I just wanna get your opinion on that.

193
00:16:34.510 --> 00:16:38.000
&gt;&gt; Lukas Ruebbelke: So,
you can import everything from Shared.

194
00:16:40.270 --> 00:16:44.910
I prefer to be explicit,
as well as you may not want everything.

195
00:16:46.570 --> 00:16:52.220
And so that is, you may have five things
in the barrel roll and you only want two.

196
00:16:53.720 --> 00:16:55.850
So, I prefer to be very
explicit about that.

197
00:16:55.850 --> 00:16:58.870
Another example of this is, exactly.

198
00:16:58.870 --> 00:17:00.490
So, Andy nailed it.

199
00:17:00.490 --> 00:17:04.594
Is by using, really, kind of the dollar,
like input dollar from,

200
00:17:04.594 --> 00:17:06.760
is you're gonna grab everything.

201
00:17:06.760 --> 00:17:10.390
And essentially,
you are grabbing things you may not need.

202
00:17:10.390 --> 00:17:14.228
A really, really good example
of this is Observables.

203
00:17:14.228 --> 00:17:15.399
I love Observables.

204
00:17:15.399 --> 00:17:17.010
They're amazing.

205
00:17:17.010 --> 00:17:20.443
But, you have essentially
the Observable object, and

206
00:17:20.443 --> 00:17:24.468
then you have like 10,000
operators that you can then use.

207
00:17:24.468 --> 00:17:27.920
So, at one point, I think they've
kind of made it harder to do.

208
00:17:27.920 --> 00:17:31.960
But, you could just say it like,
import observable from rxjs.

209
00:17:31.960 --> 00:17:34.720
And the way you did it it would
actually grab everything.

210
00:17:34.720 --> 00:17:37.188
And it was huge and cumbersome.

211
00:17:37.188 --> 00:17:43.019
And what would happen is you would
basically import all of rxjs for

212
00:17:43.019 --> 00:17:45.999
five operators that you needed.

213
00:17:45.999 --> 00:17:49.299
And you didn't need
the other 300 operators.

214
00:17:49.299 --> 00:17:54.239
And so,
the way to do that with Observables is

215
00:17:54.239 --> 00:17:58.009
you import just the Observable and

216
00:17:58.009 --> 00:18:02.690
then you import the operators as you need.

217
00:18:02.690 --> 00:18:06.212
So, I think that really being explicit,
one,

218
00:18:06.212 --> 00:18:11.673
is it is very self-documenting about
what you are trying to accomplish,

219
00:18:11.673 --> 00:18:17.330
but it keeps you from, basically,
importing things that you don't need.

220
00:18:17.330 --> 00:18:18.110
Yes?

221
00:18:18.110 --> 00:18:20.575
&gt;&gt; Speaker 2: Okay,
this is a different question.

222
00:18:20.575 --> 00:18:22.567
Jonas is asking Lukas,

223
00:18:22.567 --> 00:18:27.757
could you please explain why we
declare services as private?

224
00:18:27.757 --> 00:18:34.193
&gt;&gt; Lukas Ruebbelke: So, the reason why we
are doing that in the Constructor is so

225
00:18:34.193 --> 00:18:38.975
that TypeScript will essentially assign.

226
00:18:38.975 --> 00:18:40.550
So, this is a TypeScript convention.

227
00:18:40.550 --> 00:18:45.166
It's called a constructor assignment,
where it will essentially take

228
00:18:45.166 --> 00:18:49.783
usersService, and because it's private,
it will assign essentially

229
00:18:49.783 --> 00:18:54.720
this.usersService = usersService,
so that we can use it down here.

230
00:18:54.720 --> 00:18:59.793
So, what this does is it allows you,
when you inject something,

231
00:18:59.793 --> 00:19:02.662
that it becomes then a local member.

232
00:19:02.662 --> 00:19:03.630
Yes?

233
00:19:03.630 --> 00:19:06.005
&gt;&gt; Speaker 2: Is that a singleton
UserService across the app?

234
00:19:06.005 --> 00:19:10.270
Or, is that new instance for
every injected instance of it?

235
00:19:10.270 --> 00:19:14.060
&gt;&gt; Lukas Ruebbelke: So,
this is a very, very good question.

236
00:19:14.060 --> 00:19:18.420
So, the question is, is this
a singleton service across the app?

237
00:19:18.420 --> 00:19:21.029
Or, is it one per instance?

238
00:19:21.029 --> 00:19:24.259
And the answer is neither.

239
00:19:28.471 --> 00:19:31.750
&gt;&gt; Lukas Ruebbelke: But,
it's actually somewhere in the middle.

240
00:19:31.750 --> 00:19:35.600
So, it's not a singleton in the sense
that you can only create one.

241
00:19:35.600 --> 00:19:38.066
So, in Angular 1 everything
was a singleton.

242
00:19:38.066 --> 00:19:41.998
You basically had a service factory
that you would say, give me this thing.

243
00:19:41.998 --> 00:19:45.200
And if it already exists
then just return it.

244
00:19:45.200 --> 00:19:48.924
And so, what will happen is, essentially,
whatever's the last thing in, or

245
00:19:48.924 --> 00:19:52.700
rather, I beleive it's the first one,
that's what you would get.

246
00:19:52.700 --> 00:19:56.306
Well, there was this collision because
there was a key value that this key equals

247
00:19:56.306 --> 00:19:58.580
this service, and that was it.

248
00:19:58.580 --> 00:20:03.070
With Angular 2,
every component has an injector.

249
00:20:04.430 --> 00:20:07.317
So, with Angular 1, it was just one
injector for the entire application.

250
00:20:07.317 --> 00:20:13.475
With Angular 2, every component has
an injector, which may be provided,

251
00:20:13.475 --> 00:20:18.010
basically, by its parent or
its parent parent parent.

252
00:20:18.010 --> 00:20:22.781
The point is at the component
level you can manually configure

253
00:20:22.781 --> 00:20:25.820
hierarchical dependency injection.

254
00:20:26.970 --> 00:20:31.260
So, what that means is you can simply say,
for

255
00:20:31.260 --> 00:20:35.110
this component I want this UserService or

256
00:20:35.110 --> 00:20:39.076
this particular version of UserService.

257
00:20:39.076 --> 00:20:44.630
But, down here I want to use
this particular version.

258
00:20:44.630 --> 00:20:49.900
And you can completely override
the injector at the component level.

259
00:20:52.140 --> 00:20:55.730
And so,
this is pretty super advanced stuff.

260
00:20:55.730 --> 00:21:01.123
Pascal Precht gives a pretty good
explanation of this on his blog,

261
00:21:01.123 --> 00:21:02.289
Thoughtram.

262
00:21:02.289 --> 00:21:07.136
But, it's not a singleton because you
can actually have more than one service

263
00:21:07.136 --> 00:21:09.760
depending on how you inject it.

264
00:21:09.760 --> 00:21:14.390
But, at the same time it's not going
to create new one every single time.

265
00:21:15.590 --> 00:21:17.230
Instead, it will essentially,

266
00:21:17.230 --> 00:21:21.240
it'll be a single instance until
you specifically tell it otherwise.

267
00:21:22.550 --> 00:21:26.691
So, the answer is no,
or yes, until it's not.

268
00:21:26.691 --> 00:21:27.830
&gt;&gt; Speaker 2: What was
the reference you gave?

269
00:21:27.830 --> 00:21:28.707
Somebody's blog?

270
00:21:28.707 --> 00:21:30.529
&gt;&gt; Lukas Ruebbelke: Yeah,
so Pascal Precht.

271
00:21:30.529 --> 00:21:37.559
I think one of the top content creators
around really, Angular 2, is Pascal.

272
00:21:37.559 --> 00:21:40.480
And he's another Angular GDE.

273
00:21:40.480 --> 00:21:45.054
And his blog is,
I think it's blog.thoughtram.io.

274
00:21:45.054 --> 00:21:50.311
And one the most prolific
Angular 2 bloggers.

275
00:21:50.311 --> 00:21:51.933
They have a ton of good articles.

276
00:21:51.933 --> 00:21:55.998
My two favorite ones are really about
hierarchical dependency injection and

277
00:21:55.998 --> 00:21:57.069
change detection.

278
00:21:59.900 --> 00:22:03.988
&gt;&gt; Lukas Ruebbelke: In fact, I will even,
in my slides, put together some additional

279
00:22:03.988 --> 00:22:08.441
resources cuz I've realized,
I know Tamara's keeping track of some of

280
00:22:08.441 --> 00:22:12.907
the things, but there's definitely
some pretty good stuff out there.

281
00:22:12.907 --> 00:22:14.806
But, definitely check
out what Pascal's doing.

282
00:22:14.806 --> 00:22:21.240
But, I think hierarchical dependency
injection is kind of one of these

283
00:22:21.240 --> 00:22:27.950
rocket science edge cases that you're
probably doing some pretty advanced stuff.

284
00:22:27.950 --> 00:22:31.568
And it's kind of the equivalent
of when you go to a workshop.

285
00:22:31.568 --> 00:22:34.503
It's like, okay,
if you're on Windows, do this.

286
00:22:34.503 --> 00:22:37.000
If you're on Mac, do this.

287
00:22:37.000 --> 00:22:38.445
If you're on Linux, you're on your own,

288
00:22:38.445 --> 00:22:40.230
cuz you're smart enough to
figure it out yourself.

289
00:22:41.730 --> 00:22:44.409
And so I think, if you're doing
hierarchical dependency injection,

290
00:22:44.409 --> 00:22:47.282
you're probably smart enough to figure
out how to actually make that work.

291
00:22:53.940 --> 00:22:54.658
&gt;&gt; Lukas Ruebbelke: Yeah, I agree.

292
00:22:54.658 --> 00:22:55.361
So, Chris.
So,

293
00:22:55.361 --> 00:22:58.386
Pascal has a really great
talk on change detection.

294
00:22:58.386 --> 00:22:59.940
And that's super helpful.

295
00:23:02.280 --> 00:23:05.868
Any other questions about services?

296
00:23:05.868 --> 00:23:07.200
Yes?
&gt;&gt; Speaker 4: I have one.

297
00:23:07.200 --> 00:23:12.455
So, basically, if you have
a service in a parent component and

298
00:23:12.455 --> 00:23:16.338
you wanted to get data
into a child component.

299
00:23:16.338 --> 00:23:20.659
So, say, for example, we had a table
of data and you select one row.

300
00:23:20.659 --> 00:23:23.654
And you want that data then to go
down into the child component-

301
00:23:23.654 --> 00:23:24.657
&gt;&gt; Lukas Ruebbelke: Mm-hm.

302
00:23:24.657 --> 00:23:28.889
&gt;&gt; Speaker 4: Is there a best
practices recommendation on whether

303
00:23:28.889 --> 00:23:33.130
you would pass that row of
data from parent to child?

304
00:23:33.130 --> 00:23:38.482
Or would you, in the child,
write code to go back into the service and

305
00:23:38.482 --> 00:23:41.080
just get the individual record?

306
00:23:42.500 --> 00:23:46.010
&gt;&gt; Lukas Ruebbelke: So,
I spend an entire module

307
00:23:46.010 --> 00:23:47.890
tomorrow morning talking about this.

308
00:23:49.120 --> 00:23:56.059
But, I will answer that,
without going too far into it.

309
00:23:56.059 --> 00:24:01.369
What I recommend is,
unless you're doing a data mutation.

310
00:24:01.369 --> 00:24:05.466
So, in other words, I wanna select
data I have a list of things.

311
00:24:05.466 --> 00:24:08.573
I want to select it and
then I wanna take that and

312
00:24:08.573 --> 00:24:12.490
I wanna pass it into like a child
component to be rendered.

313
00:24:13.510 --> 00:24:18.851
So how I would structure that and
how I have actually structured it,

314
00:24:18.851 --> 00:24:24.298
because the scenario which you have
described is this, right here.

315
00:24:24.298 --> 00:24:29.601
So at a high-level,
what you have is container components and

316
00:24:29.601 --> 00:24:32.650
presentational components.

317
00:24:32.650 --> 00:24:37.518
So prior to this before the PC
police got a hold of it,

318
00:24:37.518 --> 00:24:42.390
it was really smart and
dumb components that you have

319
00:24:42.390 --> 00:24:46.709
a container component
that is responsible for

320
00:24:46.709 --> 00:24:50.604
fetching data to satisfy the component.

321
00:24:50.604 --> 00:24:55.199
It then takes that data and
splits it up into tiny pieces as needed,

322
00:24:55.199 --> 00:24:59.560
and then feeds that into
its children components.

323
00:24:59.560 --> 00:25:03.451
And tomorrow when we get into inputs and
outputs, what happens is you have

324
00:25:03.451 --> 00:25:06.861
a component that's for
the most part, completely stateless.

325
00:25:06.861 --> 00:25:08.948
In other words, you pass it in data.

326
00:25:08.948 --> 00:25:10.590
It renders it.

327
00:25:10.590 --> 00:25:14.340
When something does something, it captures
that event instead of handling it in that

328
00:25:14.340 --> 00:25:19.750
component, it basically emits it backup
to the parent component to be handled.

329
00:25:19.750 --> 00:25:23.660
So here, when I select this item,

330
00:25:23.660 --> 00:25:28.440
what's happening is this item
list is completely done.

331
00:25:28.440 --> 00:25:32.745
It's basically getting a list of items and
it's saying, render this.

332
00:25:32.745 --> 00:25:37.530
And then when I select this item,
it's capturing that click event and

333
00:25:37.530 --> 00:25:40.869
emitting it backup to
the main items component.

334
00:25:40.869 --> 00:25:43.130
And say like, hey,
this thing was selected.

335
00:25:44.880 --> 00:25:50.300
And so then what the items component does
is say, we have a new selected item.

336
00:25:50.300 --> 00:25:51.610
Let's pass it into here.

337
00:25:51.610 --> 00:25:56.380
And so now, this item details
component is now bound to that.

338
00:25:57.940 --> 00:26:02.500
And I suppose, let me just show you what
this looks like, because I love talking

339
00:26:02.500 --> 00:26:06.677
about component driven architecture,
but the caveat is I think it's hard to

340
00:26:06.677 --> 00:26:10.948
talk about component driven architecture
before you talk about components.

341
00:26:10.948 --> 00:26:13.964
So, you have to understand how a component
works before we can talk about how to put

342
00:26:13.964 --> 00:26:15.470
them together.

343
00:26:15.470 --> 00:26:21.390
With that said,
I will show you Kind of a high-level,

344
00:26:21.390 --> 00:26:23.890
so you can start thinking about this.

345
00:26:25.020 --> 00:26:28.700
So you can see here, what do we have?

346
00:26:28.700 --> 00:26:29.430
Property binding.

347
00:26:30.450 --> 00:26:31.711
What are passing in?

348
00:26:31.711 --> 00:26:32.540
An items collection.

349
00:26:33.940 --> 00:26:36.220
So within the child component,
it's just saying,

350
00:26:36.220 --> 00:26:40.020
I've got his collection NG four
like let's loop it, let's go.

351
00:26:41.460 --> 00:26:46.268
And then here, when you select
an item in the child component,

352
00:26:46.268 --> 00:26:50.907
it's basically admitting this
back up on a selected event.

353
00:26:50.907 --> 00:26:52.800
You say, wait a second, selected?

354
00:26:52.800 --> 00:26:55.172
That's not a DOM event,
you guys made that up.

355
00:26:55.172 --> 00:26:55.725
Well, maybe this.

356
00:26:55.725 --> 00:26:57.474
I'll think it is.

357
00:26:57.474 --> 00:27:04.285
Feature's definitely not, but what we're
doing is we're now admitting custom events

358
00:27:04.285 --> 00:27:09.757
with custom data that we are handling
in this top of a little component.

359
00:27:12.670 --> 00:27:14.590
&gt;&gt; Lukas Ruebbelke: So
items, selected item.

360
00:27:14.590 --> 00:27:19.151
Well, this is actually to look vaguely
familiar with kind of what we're doing to

361
00:27:19.151 --> 00:27:19.769
widgets.

362
00:27:23.630 --> 00:27:27.098
&gt;&gt; Lukas Ruebbelke: And so
we have some interesting things here,

363
00:27:27.098 --> 00:27:31.571
because of the router and
some kind of functionality, but

364
00:27:31.571 --> 00:27:34.967
what we're doing is here, selected item.

365
00:27:34.967 --> 00:27:38.548
Now if we go back here.

366
00:27:42.288 --> 00:27:46.170
&gt;&gt; Lukas Ruebbelke: Actually,
let's go to selectItem right here.

367
00:27:47.590 --> 00:27:49.500
When this selected event gets fired, well,

368
00:27:49.500 --> 00:27:54.480
it's calling this method and
passing it here.

369
00:27:54.480 --> 00:27:57.316
So, the list is emitting a selected item.

370
00:27:57.316 --> 00:27:58.240
And so basically,

371
00:27:58.240 --> 00:28:02.380
this is just an extension of what
we did in the previous exercise.

372
00:28:02.380 --> 00:28:09.365
And then so notice now, item.

373
00:28:09.365 --> 00:28:14.640
So, the details were binding
item to selected item.

374
00:28:14.640 --> 00:28:19.779
So the minute this is selected over here,
it's omitting the selected item.

375
00:28:19.779 --> 00:28:23.656
And so it's saying, here's the selected
item, do what you want with it.

376
00:28:23.656 --> 00:28:27.366
And this becomes even more important
like for deleted, because I wanna remove

377
00:28:27.366 --> 00:28:31.480
myself, but you wanna allow an item
to remove itself from a collection.

378
00:28:31.480 --> 00:28:34.150
You want to actually defer
that up to the parent.

379
00:28:34.150 --> 00:28:38.700
So it's saying like hey,
like this item selected to mark for

380
00:28:38.700 --> 00:28:41.380
deletion like here's this information.

381
00:28:41.380 --> 00:28:44.507
And then the parent component or
the container component say, okay,

382
00:28:44.507 --> 00:28:45.519
I know what to do here.

383
00:28:45.519 --> 00:28:51.418
I'll take this item and
then I'll actually pass it on to the item

384
00:28:51.418 --> 00:28:57.662
service to be deleted from the actual
server, but selected items.

385
00:28:57.662 --> 00:29:02.119
Once it's selected, we're basically
sending that up via the event and

386
00:29:02.119 --> 00:29:05.540
we're setting it which
then now sets it here.

387
00:29:05.540 --> 00:29:09.310
And if we make some change and
we click Save.

388
00:29:10.340 --> 00:29:13.570
Well, it's saying, okay,
save this item and

389
00:29:13.570 --> 00:29:16.950
here's the new item or
basically here's the new value.

390
00:29:18.760 --> 00:29:23.970
So we'll talk more about this tomorrow,
but that's the pattern.

391
00:29:25.050 --> 00:29:28.918
So container component,
presentational or DOM components.

392
00:29:28.918 --> 00:29:30.942
We just stack them in all day long.

393
00:29:30.942 --> 00:29:32.795
Yes?

394
00:29:32.795 --> 00:29:36.230
&gt;&gt; Speaker 5: Thomas has a question, you
may have touched on it and I missed it,

395
00:29:36.230 --> 00:29:39.040
but when do you use
the injectable on service?

396
00:29:39.040 --> 00:29:41.515
&gt;&gt; Lukas Ruebbelke: Always.

397
00:29:41.515 --> 00:29:46.638
So you can get away with it sometimes,
but the minute you

398
00:29:46.638 --> 00:29:53.843
are service has a dependencies that
being injected in, then this will break.

399
00:29:53.843 --> 00:29:58.725
So you basically have to have correct
metadata generated for things,

400
00:29:58.725 --> 00:30:04.440
components, services, whatever for
Angular to know what to do with it.

401
00:30:04.440 --> 00:30:09.670
And so really, the best practice rule of
thumb is anytime you create a service,

402
00:30:09.670 --> 00:30:11.180
just annotate it with injectable.

403
00:30:12.600 --> 00:30:14.097
You'll never regret it.

404
00:30:14.097 --> 00:30:15.730
If you don't, you may regret it.

405
00:30:15.730 --> 00:30:22.196
So I think in this case, injectable is
kind of like the semicolon of JavaScript.

406
00:30:22.196 --> 00:30:25.384
It's like you are never gonna
regret using the semicolon, but

407
00:30:25.384 --> 00:30:28.710
there's times where you will not and
it will blow up in your face.

408
00:30:29.730 --> 00:30:30.400
So, that's why I do it.

409
00:30:31.500 --> 00:30:33.830
&gt;&gt; Speaker 5: Next question from Richard,

410
00:30:33.830 --> 00:30:38.040
how do you do component
binding across router outlet?

411
00:30:38.040 --> 00:30:40.944
&gt;&gt; Lukas Ruebbelke: Component
binding across router outlet.

412
00:30:44.510 --> 00:30:47.612
&gt;&gt; Lukas Ruebbelke: So, I'm trying
to think what that means generally.

413
00:30:47.612 --> 00:30:53.296
So going back to the container component,
presentational component.

414
00:30:53.296 --> 00:30:57.240
I treat really like
router outlet is being,

415
00:30:57.240 --> 00:31:01.840
like a fine-grained slot for your feature.

416
00:31:01.840 --> 00:31:07.292
And so, I would not try to do binding
on the router outlet directive or

417
00:31:07.292 --> 00:31:11.620
rather component is I think
that would be precarious.

418
00:31:11.620 --> 00:31:19.447
I think you only want to pass in fully
formed components into the router outlet.

419
00:31:19.447 --> 00:31:23.243
And so, I've never actually even heard of
any kind of like component binding done on

420
00:31:23.243 --> 00:31:24.780
the router outlet.

421
00:31:24.780 --> 00:31:25.654
Well, not only that,

422
00:31:25.654 --> 00:31:28.423
you don't actually have access to
the internals of the router outlet.

423
00:31:28.423 --> 00:31:32.268
So, I'm not sure how much
mileage you would actually get.

424
00:31:35.560 --> 00:31:38.586
&gt;&gt; Lukas Ruebbelke: But
if somebody knows of a good use case,

425
00:31:38.586 --> 00:31:42.506
that sounds like some mad scientist,
rather I can.

426
00:31:42.506 --> 00:31:47.180
I probably shouldn't, but
I'm going to kind of scenario there.

