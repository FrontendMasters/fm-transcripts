WEBVTT

1
00:00:00.008 --> 00:00:06.202
&gt;&gt; Lukas Ruebbelke: In our
app I'm going to create a new

2
00:00:06.202 --> 00:00:11.335
feature widgets, gizmos.

3
00:00:11.335 --> 00:00:17.639
What I will do?

4
00:00:22.280 --> 00:00:24.040
&gt;&gt; Lukas Ruebbelke: Let's do gadgets.

5
00:00:24.040 --> 00:00:24.720
So here,

6
00:00:30.203 --> 00:00:34.587
&gt;&gt; Lukas Ruebbelke: Gadgets.component.

7
00:00:34.587 --> 00:00:40.850
&gt;&gt; [INAUDIBLE]
&gt;&gt; Lukas Ruebbelke: There we go,

8
00:00:40.850 --> 00:00:43.150
pair programming for the win.

9
00:00:47.357 --> 00:00:48.268
&gt;&gt; Lukas Ruebbelke: Okay.

10
00:00:52.666 --> 00:00:54.896
&gt;&gt; Lukas Ruebbelke: I feel like, what?

11
00:00:54.896 --> 00:00:56.920
I'll do this in line for,
actually, you know what?

12
00:01:02.929 --> 00:01:04.839
&gt;&gt; Lukas Ruebbelke: Let's
do this not in line.

13
00:01:06.783 --> 00:01:11.080
&gt;&gt; Lukas Ruebbelke: gadgets.component.css.

14
00:01:11.080 --> 00:01:13.350
If I spell this wrong again, call me out.

15
00:01:27.315 --> 00:01:29.563
&gt;&gt; Lukas Ruebbelke: Okay,
let's just go ahead and get this,

16
00:01:29.563 --> 00:01:32.080
let's just address
the elephant in the room.

17
00:01:34.211 --> 00:01:35.670
&gt;&gt; Lukas Ruebbelke: Put
something clever here.

18
00:01:40.962 --> 00:01:47.610
&gt;&gt; Lukas Ruebbelke: All right,
I think we're ready.

19
00:01:47.610 --> 00:01:50.390
So, what should be
the first thing that I do?

20
00:01:50.390 --> 00:01:52.466
&gt;&gt; Speaker 3: Import core.

21
00:01:52.466 --> 00:01:57.460
&gt;&gt; Lukas Ruebbelke: What's that?

22
00:01:57.460 --> 00:01:59.020
&gt;&gt; Speaker 3: Import the core and
export the class.

23
00:01:59.020 --> 00:02:01.676
Is that it?
&gt;&gt; Lukas Ruebbelke: Create the class.

24
00:02:01.676 --> 00:02:06.084
Gadgets.

25
00:02:06.084 --> 00:02:10.860
Component, okay.

26
00:02:10.860 --> 00:02:13.900
So, now that I've created my class,
pretty simple, what's the next thing?

27
00:02:15.500 --> 00:02:16.330
Slider.

28
00:02:16.330 --> 00:02:16.850
Class.

29
00:02:16.850 --> 00:02:17.550
I.

30
00:02:17.550 --> 00:02:18.050
Import.

31
00:02:22.180 --> 00:02:25.350
You get like a half a point
because you like whispered it.

32
00:02:25.350 --> 00:02:25.940
You're.
&gt;&gt; Multiple: [LAUGH]

33
00:02:25.940 --> 00:02:26.780
&gt;&gt; Lukas Ruebbelke: That what just like

34
00:02:26.780 --> 00:02:27.705
import don't hit me.

35
00:02:27.705 --> 00:02:28.626
&gt;&gt; Multiple: [LAUGH]
&gt;&gt; Lukas Ruebbelke: So,

36
00:02:28.626 --> 00:02:34.236
I'm gonna import component from,

37
00:02:34.236 --> 00:02:40.414
let's see if I can do this from memory.

38
00:02:49.141 --> 00:02:53.640
&gt;&gt; Lukas Ruebbelke: All right, so
then we're gonna decorate component.

39
00:02:56.323 --> 00:02:58.640
&gt;&gt; Lukas Ruebbelke: But
let's see something here.

40
00:03:05.260 --> 00:03:07.779
&gt;&gt; Lukas Ruebbelke: So, sometimes,
actually, your imports,

41
00:03:07.779 --> 00:03:10.690
you can kinda shortcut
it with auto completion.

42
00:03:10.690 --> 00:03:13.220
Again, coming from ES5,
that never happened, ever.

43
00:03:14.310 --> 00:03:16.310
And so, now that's pretty awesome.

44
00:03:16.310 --> 00:03:23.680
So, in my meta data, what are the two
things that a component need?

45
00:03:25.020 --> 00:03:25.540
&gt;&gt; Multiple: Selector.

46
00:03:25.540 --> 00:03:26.590
&gt;&gt; Lukas Ruebbelke: Selector, yes, good.

47
00:03:26.590 --> 00:03:31.860
So-
&gt;&gt; Lukas Ruebbelke: We'll go selector and

48
00:03:31.860 --> 00:03:36.622
sticking with this prefix and

49
00:03:36.622 --> 00:03:40.065
then one more thing.

50
00:03:40.065 --> 00:03:41.620
&gt;&gt; Speaker 4: Template.

51
00:03:41.620 --> 00:03:42.820
&gt;&gt; Lukas Ruebbelke: Template or
templateUrl.

52
00:03:47.888 --> 00:03:51.239
&gt;&gt; Lukas Ruebbelke: Actually
hold on real quick,

53
00:03:51.239 --> 00:03:57.960
that's not what I wanted,
I have a feeling that I.

54
00:03:57.960 --> 00:04:00.382
There's a possibility, yeah so

55
00:04:00.382 --> 00:04:05.235
notice that they're using the ./,
just what I wanted to check.

56
00:04:06.611 --> 00:04:10.806
&gt;&gt; Lukas Ruebbelke:
Gadgets.component.html,

57
00:04:12.461 --> 00:04:13.454
&gt;&gt; Lukas Ruebbelke: Okay-

58
00:04:16.027 --> 00:04:16.814
&gt;&gt; Lukas Ruebbelke: And you'll notice

59
00:04:16.814 --> 00:04:20.944
here,
&gt;&gt; Lukas Ruebbelke: That My IDE is not

60
00:04:20.944 --> 00:04:21.870
happy.

61
00:04:23.890 --> 00:04:28.180
And the error is gadgets component
incorrectly, implement interface OnInit.

62
00:04:29.790 --> 00:04:32.350
Well, okay.

63
00:04:34.290 --> 00:04:35.600
And now, it's happy.

64
00:04:35.600 --> 00:04:37.050
So, now that we've created the component.

65
00:04:39.340 --> 00:04:41.260
What is the next step?

66
00:04:41.260 --> 00:04:43.830
How do we surface this to the application?

67
00:04:46.642 --> 00:04:49.310
&gt;&gt; Speaker 5: Import it to the module?

68
00:04:49.310 --> 00:04:50.670
&gt;&gt; Lukas Ruebbelke: Yes, good job.

69
00:04:51.920 --> 00:04:56.650
So now, that we have it,
let's go into our app module.

70
00:04:58.388 --> 00:05:00.920
&gt;&gt; Lukas Ruebbelke: And
I'm just gonna duplicate this line.

71
00:05:04.015 --> 00:05:08.229
&gt;&gt; Lukas Ruebbelke: We'll go
gadgets/gadgets.component.

72
00:05:10.380 --> 00:05:14.005
&gt;&gt; Lukas Ruebbelke: GadgetsComponent here,
and so now that I've imported it,

73
00:05:14.005 --> 00:05:17.701
I can go down here,
&gt;&gt; Lukas Ruebbelke: And

74
00:05:17.701 --> 00:05:20.730
add it to the declarations.

75
00:05:20.730 --> 00:05:23.170
So now, that you've created it
we need to make it available.

76
00:05:23.170 --> 00:05:28.440
We do that with NgModule, yes.

77
00:05:28.440 --> 00:05:30.980
Kennedy, the question is

78
00:05:30.980 --> 00:05:35.820
should we work along with the same project
as instructor or use the gizmo challenge.

79
00:05:35.820 --> 00:05:40.050
So, once I issue this particular
challenge, so up to this

80
00:05:40.050 --> 00:05:43.630
point you could have done everything
in master and you just throw it away.

81
00:05:43.630 --> 00:05:48.380
For the next challenge,
what I want everyone to do is,

82
00:05:49.750 --> 00:05:54.830
if we go here,
start on the start branch and

83
00:05:54.830 --> 00:06:00.640
from there you will work and
incrementally build out the application.

84
00:06:01.750 --> 00:06:04.990
So this is what I'm trying
to do is essentially kind of

85
00:06:04.990 --> 00:06:08.340
do a variation of what the challenge
will be so you can see it one time.

86
00:06:08.340 --> 00:06:11.740
And then, you have the opportunity
to do it in your code base.

87
00:06:16.570 --> 00:06:18.996
&gt;&gt; Lukas Ruebbelke: And
there's two Chris P's in the chatroom.

88
00:06:18.996 --> 00:06:23.543
&gt;&gt; [INAUDIBLE]
&gt;&gt; Lukas Ruebbelke: There's a programming

89
00:06:23.543 --> 00:06:24.880
joke in there somewhere, I know it.

90
00:06:24.880 --> 00:06:25.930
&gt;&gt; Speaker 3: There probably is, yes.

91
00:06:27.290 --> 00:06:28.370
Craig has a question,

92
00:06:28.370 --> 00:06:32.770
can someone explain in a bit more
detail the implement keyword?

93
00:06:32.770 --> 00:06:37.970
&gt;&gt; Lukas Ruebbelke: Yes, so
the implement is, with TypeScript,

94
00:06:37.970 --> 00:06:42.610
one of the beautiful things of TypeScript,
is we have interfaces.

95
00:06:42.610 --> 00:06:49.290
And so, what an interface is,
is it is essentially a contract or

96
00:06:49.290 --> 00:06:54.460
a specification that
something needs to implement.

97
00:06:54.460 --> 00:07:00.588
So, in our case if we go
back to GadgetsComponent.ts,

98
00:07:00.588 --> 00:07:07.010
we're saying GadgetsComponent
implements the OnInit interface and

99
00:07:07.010 --> 00:07:12.360
so now, I'm basically signing a contract
by saying, I implement this interface

100
00:07:12.360 --> 00:07:20.360
that I have to implement the methods
that this interface basically declares.

101
00:07:20.360 --> 00:07:23.080
And so, you can do this for classes,

102
00:07:23.080 --> 00:07:29.310
saying this class implements this
interface, therefore, I'm obligated.

103
00:07:29.310 --> 00:07:34.750
You'll notice right here that my gadget's
component, it's red, it's squiggly.

104
00:07:34.750 --> 00:07:36.320
And it's angry,

105
00:07:36.320 --> 00:07:41.280
the reason being is cuz I'm not
implementing the ngOnInit interface.

106
00:07:41.280 --> 00:07:46.180
But the minute I actually find that
method as put forth by this guy,

107
00:07:46.180 --> 00:07:49.690
let me see if I can
actually see the interface.

108
00:07:52.409 --> 00:07:56.256
&gt;&gt; Lukas Ruebbelke: Yeah, so this is
actually the interface right here that,

109
00:07:56.256 --> 00:07:59.170
for OnInit, I have to implement ngOnInit.

110
00:08:00.860 --> 00:08:03.730
And so, what you're doing is,
you're now giving

111
00:08:04.870 --> 00:08:09.390
the type script compiler,
as well as programmers and

112
00:08:09.390 --> 00:08:12.620
ids, some information about
how you expect this to behave.

113
00:08:14.320 --> 00:08:15.770
Well, yes.
&gt;&gt; Speaker 4: Kind of related to that,

114
00:08:15.770 --> 00:08:19.230
if you left off
the implements OnInit clause,

115
00:08:19.230 --> 00:08:21.560
would Angular still call your ngOnInit?

116
00:08:21.560 --> 00:08:23.150
&gt;&gt; Lukas Ruebbelke: Yes, yep.

117
00:08:23.150 --> 00:08:28.510
So, implementing the interface is totally
optional but it's recommended that you

118
00:08:28.510 --> 00:08:34.310
do implement the interface, so
that you can indicate this class.

119
00:08:34.310 --> 00:08:35.290
Is behaves this way.

120
00:08:36.480 --> 00:08:39.880
And so, one of the reasons why interfaces
are important is because essentially you

121
00:08:39.880 --> 00:08:46.320
get awesome ID level support,
but at compile time, it'll know,

122
00:08:46.320 --> 00:08:50.080
it'll start to catch things of like,
hey, this is really not of this type.

123
00:08:50.080 --> 00:08:53.320
And so where interfaces become also
important is when you're typing

124
00:08:54.980 --> 00:08:56.380
essentially objects.

125
00:08:56.380 --> 00:08:59.300
So, if we go for instance,
into our shared folder,

126
00:09:00.840 --> 00:09:04.220
you'll notice that we
are exporting an item interface.

127
00:09:05.260 --> 00:09:10.130
But now, we're saying when we have an item
object, we can now type it to this.

128
00:09:10.130 --> 00:09:16.050
And it's guaranteed to have an ID that's
required but it may also have img,

129
00:09:16.050 --> 00:09:21.620
name description or feature and so
now you can know things about this.

130
00:09:21.620 --> 00:09:25.312
Let me see if this actually
if this actually works.

131
00:09:25.312 --> 00:09:29.116
So cont item: Item

132
00:09:29.116 --> 00:09:35.145
=
&gt;&gt; Lukas Ruebbelke: So,

133
00:09:35.145 --> 00:09:40.150
if I go like this-
&gt;&gt; Speaker 3: You've got.

134
00:09:40.150 --> 00:09:43.936
&gt;&gt; Lukas Ruebbelke: Yeah,
I'm actually having a.

135
00:09:43.936 --> 00:09:44.601
&gt;&gt; Speaker 3: Yeah.

136
00:09:46.604 --> 00:09:48.950
&gt;&gt; Speaker 3: But your ID is saving you.

137
00:09:48.950 --> 00:09:52.130
&gt;&gt; Lukas Ruebbelke: It is, so
just saying, that's not legit.

138
00:09:52.130 --> 00:09:54.400
But now watch, so you can see it's angry.

139
00:10:00.075 --> 00:10:03.230
&gt;&gt; Lukas Ruebbelke: And so,
now it's, hey, we're good.

140
00:10:04.243 --> 00:10:04.828
&gt;&gt; Lukas Ruebbelke: But,

141
00:10:04.828 --> 00:10:08.143
what I can also do
&gt;&gt; Lukas Ruebbelke: Is,

142
00:10:08.143 --> 00:10:11.979
you'll notice here, it's introspecting,

143
00:10:11.979 --> 00:10:17.091
because I'm saying it's of this type item,
notice the hints

144
00:10:17.091 --> 00:10:23.241
that I'm getting here description,
featured, ID, image, and name.

145
00:10:23.241 --> 00:10:27.880
And so, now, because I'm on an interface,
is when I go,

146
00:10:27.880 --> 00:10:32.130
item., it knows what
properties I'm telling it,

147
00:10:32.130 --> 00:10:34.910
because of an interface,
what properties it can expect.

148
00:10:36.090 --> 00:10:40.360
And so this is, again java developers like
.net developers who come from classical

149
00:10:40.360 --> 00:10:42.900
backgrounds take this for
granted, I believe.

150
00:10:42.900 --> 00:10:49.060
But coming from an ES5
background this is magic.

151
00:10:49.060 --> 00:10:56.110
Just getting that did you mean this or
constraining your options.

152
00:10:56.110 --> 00:10:58.980
So now, I can just go featured, boom.

153
00:11:00.230 --> 00:11:00.990
And then interest.

154
00:11:00.990 --> 00:11:02.280
Let's see what happens
when I go like this.

155
00:11:04.400 --> 00:11:06.660
And so now, I'm trying to set it to one,
two, three.

156
00:11:06.660 --> 00:11:09.550
But look, it's totally upset, why?

157
00:11:09.550 --> 00:11:11.100
Because it's bullion.

158
00:11:11.100 --> 00:11:15.719
So this is a way to essentially
add author time and time.

159
00:11:17.890 --> 00:11:18.580
Kind of fix some things.

160
00:11:18.580 --> 00:11:21.360
So that's where implement comes from,

161
00:11:21.360 --> 00:11:25.330
is you're simply saying this class
will implement these methods.

162
00:11:26.550 --> 00:11:31.270
Or you can also, not implement, but
you can use interface as well to

163
00:11:31.270 --> 00:11:36.020
strongly type objects, and
that's really, really awesome.

164
00:11:42.978 --> 00:11:45.380
&gt;&gt; Lukas Ruebbelke: So
Andy had a question.

165
00:11:45.380 --> 00:11:48.140
Can you change interfaces or
chain interfaces?

166
00:11:48.140 --> 00:11:55.440
Absolutely, so if we go back here to,
let's do, well I don't know.

167
00:11:58.233 --> 00:11:59.560
&gt;&gt; Lukas Ruebbelke: OnDestroy.

168
00:12:00.830 --> 00:12:01.870
Again, you can see it's angry.

169
00:12:03.450 --> 00:12:09.077
We'll just go down here,
&gt;&gt; Lukas Ruebbelke: And it's happy.

170
00:12:17.221 --> 00:12:20.610
&gt;&gt; Lukas Ruebbelke: Yep,
so that is how that works.

171
00:12:20.610 --> 00:12:22.900
And now that I,

172
00:12:22.900 --> 00:12:28.790
kind of jumping back to where we were,
if we go back to the App Module.

173
00:12:28.790 --> 00:12:37.160
So, we've imported this in,
now let's go to, I don't know.

174
00:12:41.611 --> 00:12:42.734
&gt;&gt; Lukas Ruebbelke: I'll go to students.

175
00:12:49.695 --> 00:12:53.360
&gt;&gt; Lukas Ruebbelke: So again,
getting IntelliSense here.

176
00:12:56.183 --> 00:12:58.990
&gt;&gt; Lukas Ruebbelke: And because I've
imported this, into the module.

177
00:12:58.990 --> 00:13:03.480
App students or the students component or
the gadgets component rather.

178
00:13:03.480 --> 00:13:07.580
I can now define it here.

179
00:13:07.580 --> 00:13:12.432
So, if we go back here,
&gt;&gt; Lukas Ruebbelke: So,

180
00:13:12.432 --> 00:13:17.970
we're on the student's route but
I was able to just drop in and dump in.

181
00:13:17.970 --> 00:13:21.380
The gadgets components and have it render.

182
00:13:21.380 --> 00:13:24.700
You could do this as a route as well which

183
00:13:26.450 --> 00:13:29.560
I bet we all know how to do
that if we thought about it.

184
00:13:29.560 --> 00:13:32.620
Yes.
&gt;&gt; Speaker 3: Question from one of the.

185
00:13:32.620 --> 00:13:36.850
Are there any performance at that
kinda leads to in lining templates and

186
00:13:36.850 --> 00:13:38.170
CSS in component?

187
00:13:39.630 --> 00:13:43.500
&gt;&gt; Lukas Ruebbelke: No, it actually all,
at least with the CLI using WebPack.

188
00:13:44.510 --> 00:13:48.460
So, with WebPack it essentially
puts it all into one bundle.

189
00:13:49.780 --> 00:13:52.980
And so, it doesn't necessarily, it
doesn't really matter it's a moot point.

190
00:13:54.120 --> 00:13:57.310
So anecdotally,
one of the reasons why I really like,

191
00:13:59.300 --> 00:14:04.930
is because you get these
optimized bundles you can consume.

192
00:14:04.930 --> 00:14:09.710
I was on a project where there was
a little bit of a political thing.

193
00:14:09.710 --> 00:14:12.820
They were redoing a part
of it in angular and

194
00:14:12.820 --> 00:14:18.750
the department was were losing control and
so they were throwing shade at angula.

195
00:14:18.750 --> 00:14:23.590
And so, I said not a problem,
let me just run some benchmarks.

196
00:14:23.590 --> 00:14:27.120
And so,
there's a site called sitespeed.io that

197
00:14:27.120 --> 00:14:30.670
essentially industry leaders have agreed
these are kind of these 12 benchmarks and

198
00:14:30.670 --> 00:14:33.910
based on these 12 benchmarks
you can get a score.

199
00:14:33.910 --> 00:14:37.250
And so, there's a goat plugin that you
can actually run it against your site and

200
00:14:37.250 --> 00:14:38.650
get a score.

201
00:14:38.650 --> 00:14:42.860
And so, traditionally you should get 84,
82,83, 84.

202
00:14:42.860 --> 00:14:47.830
And I ran it against this
application just ad hoc.

203
00:14:47.830 --> 00:14:52.000
And I basically got 90 out of 100,
which is amazing.

204
00:14:52.000 --> 00:14:56.790
And the reason being is because one of
the things they talk about is basically

205
00:14:56.790 --> 00:14:59.390
inline your HTML, inline CSS to the page.

206
00:14:59.390 --> 00:15:03.650
Put everything into a bundle,
really condense everything.

207
00:15:03.650 --> 00:15:09.300
And once, I kind of brought that up
before, we got 90 out of 100 and

208
00:15:09.300 --> 00:15:13.170
it was we're not saying HTML is bad,
we're on your side now.

209
00:15:13.170 --> 00:15:18.110
But the one thing we got dinged on was
that we had a large initial payload.

210
00:15:19.420 --> 00:15:23.530
Well that actually, depending on
what you're doing, is a good thing,

211
00:15:23.530 --> 00:15:28.900
because the single most
performance heavy thing that

212
00:15:28.900 --> 00:15:32.410
you can do on a mobile device is actually
make a call over the cellular network.

213
00:15:33.660 --> 00:15:37.120
And so, you're better off, for
mobile devices, especially on 3G.

214
00:15:37.120 --> 00:15:41.560
Actually encourage the large payload
upfront, and reduce essentially,

215
00:15:41.560 --> 00:15:42.960
your network calls.

216
00:15:42.960 --> 00:15:47.030
And so, that's actually something
where I was dinged on it, and

217
00:15:47.030 --> 00:15:48.570
on a desktop there might be a problem.

218
00:15:48.570 --> 00:15:53.280
But on a mobile device, you actually want
to really incur that payload upfront.

219
00:15:53.280 --> 00:15:56.650
And so, even with the whole
thing about lazy loading modules

220
00:15:56.650 --> 00:16:00.530
is you really need to
consider your audience.

221
00:16:00.530 --> 00:16:05.000
Because if you in the background
you're having to load those things and

222
00:16:05.000 --> 00:16:10.340
the experience depends on it you may
be invariably, because you're incurring

223
00:16:10.340 --> 00:16:16.080
that network request, may actually be
compromising the over all experience.

224
00:16:16.080 --> 00:16:18.720
So with webpack,
you're not really taking a hit,

225
00:16:18.720 --> 00:16:23.860
because it all gets bundled into
a single package at the end of the day.

226
00:16:23.860 --> 00:16:26.390
Especially when you do ngBuild,
then it's even better.

227
00:16:30.737 --> 00:16:33.740
&gt;&gt; Lukas Ruebbelke: Where
is the webpack config file?

228
00:16:35.280 --> 00:16:38.290
Yes, that is a good question.

229
00:16:41.180 --> 00:16:46.160
Now, I need to remember, so

230
00:16:47.720 --> 00:16:53.460
all the configuration is actually
in the angular cli.json file.

231
00:16:56.983 --> 00:17:00.290
&gt;&gt; Lukas Ruebbelke: And then, all the web
packy stuff is happening under the hood.

232
00:17:01.910 --> 00:17:05.975
&gt;&gt; Lukas Ruebbelke: Now I will confess
that Angular CLI had me at ng-serve and

233
00:17:05.975 --> 00:17:11.650
it just worked, and so I haven't
done a ton of digging into the guts.

234
00:17:11.650 --> 00:17:14.490
But actually, that's a fair question.

235
00:17:14.490 --> 00:17:16.350
I did the same thing, like,
where is led pack config?

236
00:17:17.800 --> 00:17:22.100
And it's happening all kind of from here.

237
00:17:24.440 --> 00:17:25.610
Actually, I think if we go up.

238
00:17:37.815 --> 00:17:41.168
&gt;&gt; Lukas Ruebbelke: And it might even be
actually tucked into the module as well,

239
00:17:41.168 --> 00:17:43.680
so I can follow up,
that's a good question.

240
00:17:47.022 --> 00:17:52.154
&gt;&gt; Lukas Ruebbelke: So crispy, will any
of the load one file versus many versus

241
00:17:52.154 --> 00:17:56.810
many versus payload size
be different with HTTP2?

242
00:17:56.810 --> 00:17:59.830
I don't know a lot about HTTP2 so,

243
00:17:59.830 --> 00:18:02.950
if somebody wants to comment
on that if you know.

244
00:18:02.950 --> 00:18:05.020
&gt;&gt; Speaker 4: I think
the jury's still out.

245
00:18:05.020 --> 00:18:09.020
There's a lot of tests
that show either way and

246
00:18:09.020 --> 00:18:12.570
things are still evolving on
the performance side, so.

247
00:18:12.570 --> 00:18:14.490
&gt;&gt; Lukas Ruebbelke: So according to Mark-
&gt;&gt; Speaker 4: Eventually,

248
00:18:14.490 --> 00:18:17.180
we'll have an HTTP2, course.

249
00:18:17.180 --> 00:18:20.980
&gt;&gt; Lukas Ruebbelke: What if only there
was a workshop on masters on HTTP2.

250
00:18:22.520 --> 00:18:23.220
&gt;&gt; Speaker 4: Eventually.

251
00:18:23.220 --> 00:18:25.566
&gt;&gt; Lukas Ruebbelke: Eventually
when the jury comes in.

252
00:18:25.566 --> 00:18:29.610
&gt;&gt; Speaker 4: Yeah,

253
00:18:29.610 --> 00:18:33.780
I'll have to reach out to the performance
community and figure that out.

254
00:18:33.780 --> 00:18:35.110
&gt;&gt; Lukas Ruebbelke: So,
the answer is I don't know,

255
00:18:35.110 --> 00:18:37.170
I don't know very much about HTTP2.

256
00:18:38.600 --> 00:18:40.200
HTTP2, yes.

257
00:18:40.200 --> 00:18:42.920
Other than it's going to
be even better than YARN.

258
00:18:44.060 --> 00:18:44.600
Totally kidding.

