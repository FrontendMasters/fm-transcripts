WEBVTT

1
00:00:00.560 --> 00:00:01.490
&gt;&gt; Lukas Ruebbelke: Let's
talk about inputs and

2
00:00:01.490 --> 00:00:04.940
outputs just real quick,
just wanna do a quick review.

3
00:00:04.940 --> 00:00:07.090
So tell me what event binding does.

4
00:00:07.090 --> 00:00:10.060
&gt;&gt; Speaker 2: Well, I believe
the event binding is when we're doing

5
00:00:10.060 --> 00:00:11.360
the whole click events, right?

6
00:00:11.360 --> 00:00:13.910
And then that is routing to the class.

7
00:00:13.910 --> 00:00:19.740
So it was, I think we said it
was the whole select equals

8
00:00:19.740 --> 00:00:23.210
is in the parentheses and then it had
whatever's being set to the class, right?

9
00:00:23.210 --> 00:00:24.170
&gt;&gt; Lukas Ruebbelke: Right.

10
00:00:24.170 --> 00:00:29.990
So what it allows you to do is,
we're talking about a DOM Event,

11
00:00:29.990 --> 00:00:33.070
but it allows you to essentially
communicate some event

12
00:00:34.220 --> 00:00:39.540
from the template to the component class.

13
00:00:39.540 --> 00:00:44.640
So when something happens we do not wanna
handle this in the template obviously,

14
00:00:44.640 --> 00:00:48.000
we need to pass it along
to an imperative context.

15
00:00:49.510 --> 00:00:51.248
And so what does property binding do?

16
00:00:57.984 --> 00:01:01.000
&gt;&gt; Speaker 2: Passes change in
state down to the template.

17
00:01:01.000 --> 00:01:01.620
&gt;&gt; Lukas Ruebbelke: Yes.

18
00:01:01.620 --> 00:01:06.592
So state or basic communication
information to the template

19
00:01:06.592 --> 00:01:09.340
from the component class.

20
00:01:09.340 --> 00:01:13.954
And as it changes,
then the template will also be updated,

21
00:01:13.954 --> 00:01:18.936
as we saw, when we did that single
input into the list of items and

22
00:01:18.936 --> 00:01:23.301
as that changed ,then it
updated across all the items.

23
00:01:26.481 --> 00:01:27.713
&gt;&gt; Lukas Ruebbelke: So the next question

24
00:01:27.713 --> 00:01:32.894
is,
&gt;&gt; Lukas Ruebbelke: Let's

25
00:01:32.894 --> 00:01:35.260
parallel this and
just extend this, cuz honestly,

26
00:01:35.260 --> 00:01:38.670
this is what I really I'm
hoping I'm communicating here.

27
00:01:38.670 --> 00:01:44.720
Is that event binding, property binding,
is really the core, I mean

28
00:01:44.720 --> 00:01:49.650
we're just looking at a variation of this,
when we talk about outputs and inputs.

29
00:01:49.650 --> 00:01:54.350
That we essentially have the ability to
define our own events and our properties.

30
00:01:54.350 --> 00:01:57.071
So, let's do output.

31
00:01:59.100 --> 00:02:00.248
&gt;&gt; Lukas Ruebbelke: How does this work?

32
00:02:04.475 --> 00:02:05.100
&gt;&gt; Lukas Ruebbelke: You can do it.

33
00:02:05.100 --> 00:02:10.150
You, I know it.

34
00:02:10.150 --> 00:02:10.730
Give it to me.

35
00:02:10.730 --> 00:02:12.900
Come on, come on, come on, come on.

36
00:02:14.010 --> 00:02:15.620
&gt;&gt; Speaker 3: It's a custom event.

37
00:02:15.620 --> 00:02:20.966
So it'd work the same way as a
&gt;&gt; Speaker 3: As a standard event.

38
00:02:20.966 --> 00:02:23.790
&gt;&gt; Lukas Ruebbelke: Exactly, nailed it,
so it is essentially a custom event

39
00:02:24.860 --> 00:02:30.270
that originates from the child
component up to the parent component.

40
00:02:32.110 --> 00:02:37.090
And then an input is just
essentially a custom way to pass

41
00:02:37.090 --> 00:02:41.710
data into a sub-component.

42
00:02:41.710 --> 00:02:42.460
Yes.

43
00:02:42.460 --> 00:02:47.950
&gt;&gt; Speaker 3: Chris had a question
awhile back about use case.

44
00:02:47.950 --> 00:02:52.770
It says, 'I'm subscribing to some
observable in the parent component.

45
00:02:52.770 --> 00:02:56.420
Once I get that value,
I want to pass to the child via input.

46
00:02:56.420 --> 00:03:01.410
That child component will wait for
the input before executing on Init, and

47
00:03:01.410 --> 00:03:03.680
then, so what's the way to do that now?

48
00:03:05.220 --> 00:03:07.410
&gt;&gt; Lukas Ruebbelke: So
what I would recommend in this case,

49
00:03:07.410 --> 00:03:12.480
if I'm reading this correctly, Chris,
is initially you have like an observable,

50
00:03:12.480 --> 00:03:17.250
and when you get the event or
the value from that observable,

51
00:03:17.250 --> 00:03:20.190
you wanna pass that into the child.

52
00:03:22.180 --> 00:03:29.030
So what you can do is, first and
foremost, I would stop and

53
00:03:29.030 --> 00:03:34.410
wonder or I would ask, can I pass
this observable directly to my child?

54
00:03:35.830 --> 00:03:39.790
So in some cases, and this is again, we'll
talk about this more tomorrow in reactive

55
00:03:39.790 --> 00:03:45.930
angular, is that you'll get
an observable from let's say a service

56
00:03:45.930 --> 00:03:49.840
that goes into your parent component, and
because you do not need to process it,

57
00:03:49.840 --> 00:03:53.680
you can just push it right
into the child component.

58
00:03:55.300 --> 00:03:58.750
Not only that, is using the Async Pipe,

59
00:04:00.280 --> 00:04:05.320
you can actually bind to it,
and essentially

60
00:04:05.320 --> 00:04:11.270
bind directly to the observable, and your
child component will unwrap it for you.

61
00:04:11.270 --> 00:04:17.000
So first and foremost, I would say, do I
need to use this in my parent component?

62
00:04:17.000 --> 00:04:21.860
If not, I would just pass it to the child
component and just let it render.

63
00:04:23.220 --> 00:04:25.730
Secondly is,

64
00:04:25.730 --> 00:04:30.380
if you need to unpack it, you'll do that
in the subscribe block of the observable.

65
00:04:30.380 --> 00:04:33.210
So let's say, on your parent ngOnInit,
you're saying hey,

66
00:04:33.210 --> 00:04:35.650
go get me this thing.subscribe.

67
00:04:35.650 --> 00:04:39.650
When it comes back,
then you just set that property and

68
00:04:39.650 --> 00:04:44.250
it will initialize or
really set that value for you.

69
00:04:44.250 --> 00:04:48.270
But that's why you do not put
initialization logic in a constructor for

70
00:04:48.270 --> 00:04:53.600
this reason, because now we have
this asynchronous kind of time gap,

71
00:04:53.600 --> 00:04:58.050
where you're waiting for
this observable to essentially resolve or

72
00:04:58.050 --> 00:05:00.670
to basically emit it's first value.

73
00:05:00.670 --> 00:05:04.500
That is bound to an input
on a child component.

74
00:05:05.510 --> 00:05:08.000
And so Angular's pretty good
about figuring that out.

75
00:05:08.000 --> 00:05:14.010
So if I do not need any of that data
in the parent component, I would just

76
00:05:14.010 --> 00:05:19.130
pass that observable right to the child
component, or I would just use .subscribe.

77
00:05:19.130 --> 00:05:21.920
And from there,
you know take my final input and

78
00:05:21.920 --> 00:05:26.180
set it to a property on the component and
pass that into the child input.

79
00:05:26.180 --> 00:05:28.590
And, it should just work.

80
00:05:28.590 --> 00:05:30.760
Analyze angular are pretty
smart about that.

81
00:05:34.840 --> 00:05:36.604
And so based on the information I have,

82
00:05:36.604 --> 00:05:39.820
I think I have sufficiently
answered that question.

83
00:05:39.820 --> 00:05:43.840
But if I have not, Chris,
feel free to chime in and clarify.

84
00:05:43.840 --> 00:05:47.120
All right.

85
00:05:47.120 --> 00:05:50.418
So, we now have, good?

86
00:05:50.418 --> 00:05:52.820
All right.

87
00:05:52.820 --> 00:05:58.520
So we have here, albeit, and Hans

88
00:05:58.520 --> 00:06:03.900
is absolutely correct, that if we had less
CSS, this would be easier to work with.

89
00:06:03.900 --> 00:06:09.800
I blame them, naming conventions for
my super verbose CSS styling.

90
00:06:09.800 --> 00:06:16.140
But we have a master detail view
that is at least rendering.

91
00:06:16.140 --> 00:06:20.980
So we've got the master list and
we've got the detail list.

92
00:06:20.980 --> 00:06:26.056
Now the piece that is missing currently,
is the fact that we have no way

93
00:06:26.056 --> 00:06:33.100
to actually modify or
interact with the selected widget.

94
00:06:34.950 --> 00:06:36.930
And so this is where forms come in.

95
00:06:36.930 --> 00:06:42.960
So let's hop into the forms module and
let's see what fortunes shall befall us.

