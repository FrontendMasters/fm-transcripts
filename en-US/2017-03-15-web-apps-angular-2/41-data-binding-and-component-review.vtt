WEBVTT

1
00:00:00.560 --> 00:00:01.490
&gt;&gt; Lukas Ruebbelke: Let's
talk about inputs and

2
00:00:01.490 --> 00:00:04.940
outputs just real quick,
just wanna do a quick review.

3
00:00:04.940 --> 00:00:08.010
So tell me what event binding does.
&gt;&gt; Speaker 2: Well,

4
00:00:08.010 --> 00:00:11.360
I believe the event binding is when we're
doing the whole click events, right?

5
00:00:11.360 --> 00:00:13.910
And then that is routing to the class.

6
00:00:13.910 --> 00:00:18.730
So it was,
I think we said it was the whole select

7
00:00:18.730 --> 00:00:22.850
equals is in the parentheses and then it
had whatever's being set to the class,

8
00:00:22.850 --> 00:00:24.170
right?
&gt;&gt; Lukas Ruebbelke: Right.

9
00:00:24.170 --> 00:00:29.990
So what it allows you to do is,
we're talking about a DOM Event,

10
00:00:29.990 --> 00:00:33.070
but it allows you to essentially
communicate some event

11
00:00:34.220 --> 00:00:39.540
from the template to the component class.

12
00:00:39.540 --> 00:00:44.640
So when something happens we do not wanna
handle this in the template obviously,

13
00:00:44.640 --> 00:00:48.000
we need to pass it along
to an imperative context.

14
00:00:49.510 --> 00:00:58.408
And so what does property binding do?
&gt;&gt; Speaker 2: Passes

15
00:00:58.408 --> 00:01:01.620
change in state down to the template.
&gt;&gt; Lukas Ruebbelke: Yes.

16
00:01:01.620 --> 00:01:06.592
So state or basic communication
information to the template

17
00:01:06.592 --> 00:01:09.340
from the component class.

18
00:01:09.340 --> 00:01:14.783
And as it changes, then the template
will also be updated, as we saw,

19
00:01:14.783 --> 00:01:20.136
when we did that single input into
the list of items and as that changed

20
00:01:20.136 --> 00:01:26.626
,then it updated across all the items.
&gt;&gt; Lukas Ruebbelke: So

21
00:01:26.626 --> 00:01:32.894
the next question is,
&gt;&gt; Lukas Ruebbelke: Let's

22
00:01:32.894 --> 00:01:35.260
parallel this and
just extend this, cuz honestly,

23
00:01:35.260 --> 00:01:38.670
this is what I really I'm
hoping I'm communicating here.

24
00:01:38.670 --> 00:01:44.720
Is that event binding, property binding,
is really the core, I mean

25
00:01:44.720 --> 00:01:49.650
we're just looking at a variation of this,
when we talk about outputs and inputs.

26
00:01:49.650 --> 00:01:54.350
That we essentially have the ability to
define our own events and our properties.

27
00:01:54.350 --> 00:01:59.572
So, let's do output.
&gt;&gt; Lukas Ruebbelke: How does

28
00:01:59.572 --> 00:02:05.100
this work?
&gt;&gt; Lukas Ruebbelke: You can do it.

29
00:02:05.100 --> 00:02:10.150
You, I know it.

30
00:02:10.150 --> 00:02:10.730
Give it to me.

31
00:02:10.730 --> 00:02:15.620
Come on, come on, come on, come on.
&gt;&gt; Speaker 3: It's a custom event.

32
00:02:15.620 --> 00:02:20.966
So it'd work the same way as a
&gt;&gt; Speaker 3: As a standard event.

33
00:02:20.966 --> 00:02:22.410
&gt;&gt; Lukas Ruebbelke: Exactly, nailed it, so

34
00:02:22.410 --> 00:02:26.260
it is essentially a custom
event that originates

35
00:02:26.260 --> 00:02:30.270
from the child component
up to the parent component.

36
00:02:32.110 --> 00:02:37.090
And then an input is just
essentially a custom way to pass

37
00:02:37.090 --> 00:02:41.710
data into a sub-component.

38
00:02:41.710 --> 00:02:44.340
Yes.
&gt;&gt; Speaker 3: Chris had a question awhile

39
00:02:44.340 --> 00:02:47.950
back about use case.

40
00:02:47.950 --> 00:02:52.770
It says, 'I'm subscribing to some
observable in the parent component.

41
00:02:52.770 --> 00:02:56.420
Once I get that value,
I want to pass to the child via input.

42
00:02:56.420 --> 00:03:01.410
That child component will wait for
the input before executing on Init, and

43
00:03:01.410 --> 00:03:05.370
then, so what's the way to do that now?
&gt;&gt; Lukas Ruebbelke: So

44
00:03:05.370 --> 00:03:09.400
what I would recommend in this case,
if I'm reading this correctly, Chris,

45
00:03:09.400 --> 00:03:14.230
is initially you have like an observable,
and when you get the event or

46
00:03:14.230 --> 00:03:20.190
the value from that observable,
you wanna pass that into the child.

47
00:03:22.180 --> 00:03:29.030
So what you can do is, first and
foremost, I would stop and

48
00:03:29.030 --> 00:03:34.410
wonder or I would ask, can I pass
this observable directly to my child?

49
00:03:35.830 --> 00:03:39.790
So in some cases, and this is again, we'll
talk about this more tomorrow in reactive

50
00:03:39.790 --> 00:03:45.930
angular, is that you'll get
an observable from let's say a service

51
00:03:45.930 --> 00:03:49.840
that goes into your parent component, and
because you do not need to process it,

52
00:03:49.840 --> 00:03:53.680
you can just push it right
into the child component.

53
00:03:55.300 --> 00:03:58.750
Not only that, is using the Async Pipe,

54
00:04:00.280 --> 00:04:05.320
you can actually bind to it,
and essentially

55
00:04:05.320 --> 00:04:11.270
bind directly to the observable, and your
child component will unwrap it for you.

56
00:04:11.270 --> 00:04:17.000
So first and foremost, I would say, do I
need to use this in my parent component?

57
00:04:17.000 --> 00:04:21.860
If not, I would just pass it to the child
component and just let it render.

58
00:04:23.220 --> 00:04:25.730
Secondly is,

59
00:04:25.730 --> 00:04:30.380
if you need to unpack it, you'll do that
in the subscribe block of the observable.

60
00:04:30.380 --> 00:04:33.210
So let's say, on your parent ngOnInit,
you're saying hey,

61
00:04:33.210 --> 00:04:35.650
go get me this thing.subscribe.

62
00:04:35.650 --> 00:04:39.650
When it comes back,
then you just set that property and

63
00:04:39.650 --> 00:04:44.250
it will initialize or
really set that value for you.

64
00:04:44.250 --> 00:04:48.270
But that's why you do not put
initialization logic in a constructor for

65
00:04:48.270 --> 00:04:53.600
this reason, because now we have
this asynchronous kind of time gap,

66
00:04:53.600 --> 00:04:58.050
where you're waiting for
this observable to essentially resolve or

67
00:04:58.050 --> 00:05:00.670
to basically emit it's first value.

68
00:05:00.670 --> 00:05:04.500
That is bound to an input
on a child component.

69
00:05:05.510 --> 00:05:08.000
And so Angular's pretty good
about figuring that out.

70
00:05:08.000 --> 00:05:14.010
So if I do not need any of that data
in the parent component, I would just

71
00:05:14.010 --> 00:05:19.130
pass that observable right to the child
component, or I would just use .subscribe.

72
00:05:19.130 --> 00:05:21.920
And from there,
you know take my final input and

73
00:05:21.920 --> 00:05:26.180
set it to a property on the component and
pass that into the child input.

74
00:05:26.180 --> 00:05:28.590
And, it should just work.

75
00:05:28.590 --> 00:05:30.760
Analyze angular are pretty
smart about that.

76
00:05:34.840 --> 00:05:36.604
And so based on the information I have,

77
00:05:36.604 --> 00:05:39.820
I think I have sufficiently
answered that question.

78
00:05:39.820 --> 00:05:43.840
But if I have not, Chris,
feel free to chime in and clarify.

79
00:05:43.840 --> 00:05:47.120
All right.

80
00:05:47.120 --> 00:05:50.418
So, we now have, good?

81
00:05:50.418 --> 00:05:52.820
All right.

82
00:05:52.820 --> 00:05:58.520
So we have here, albeit, and Hans

83
00:05:58.520 --> 00:06:03.900
is absolutely correct, that if we had less
CSS, this would be easier to work with.

84
00:06:03.900 --> 00:06:09.800
I blame them, naming conventions for
my super verbose CSS styling.

85
00:06:09.800 --> 00:06:16.140
But we have a master detail view
that is at least rendering.

86
00:06:16.140 --> 00:06:20.980
So we've got the master list and
we've got the detail list.

87
00:06:20.980 --> 00:06:26.056
Now the piece that is missing currently,
is the fact that we have no way

88
00:06:26.056 --> 00:06:33.100
to actually modify or
interact with the selected widget.

89
00:06:34.950 --> 00:06:36.930
And so this is where forms come in.

90
00:06:36.930 --> 00:06:42.960
So let's hop into the forms module and
let's see what fortunes shall befall us.

