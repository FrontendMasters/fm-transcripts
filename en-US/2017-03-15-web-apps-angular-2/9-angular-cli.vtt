WEBVTT

1
00:00:00.240 --> 00:00:04.614
&gt;&gt; Lukas Ruebbelke: I would say one of the
largest problems with really any modern

2
00:00:04.614 --> 00:00:08.491
framework is the environment and
the moving pieces.

3
00:00:08.491 --> 00:00:09.626
Do you use system JS?

4
00:00:09.626 --> 00:00:11.202
Do you use webpack?

5
00:00:11.202 --> 00:00:12.879
Do you use gulp?

6
00:00:12.879 --> 00:00:15.254
Do you use webpack?

7
00:00:15.254 --> 00:00:15.964
How much gulp?

8
00:00:15.964 --> 00:00:17.300
How much webpack?

9
00:00:17.300 --> 00:00:18.950
Well, now, do you use yarn?

10
00:00:18.950 --> 00:00:22.910
That's the newest thing,
it's so hot, everybody run out.

11
00:00:22.910 --> 00:00:26.020
We got to use yarn and so,

12
00:00:26.020 --> 00:00:32.460
a lot of time I think it as like we must
be looking at like an application diagram.

13
00:00:32.460 --> 00:00:37.210
Not really,
we're looking at an ecosystem diagram.

14
00:00:37.210 --> 00:00:41.850
In the sense that this was really
painful when Angular 2 just

15
00:00:41.850 --> 00:00:46.070
being born is how to
actually get it to work.

16
00:00:46.070 --> 00:00:50.457
You would go to the five minute tutorial
and you would spend 20 minutes installing

17
00:00:50.457 --> 00:00:53.903
typescript and these different
things just to get the 5 minute,

18
00:00:53.903 --> 00:00:56.490
20 minutes prep time for
a 5 minute tutorial.

19
00:00:59.110 --> 00:01:07.290
And so, this is really I think was
the general sentiment for everyone here,

20
00:01:07.290 --> 00:01:12.840
is you would rage develop,
rage quit, and move on.

21
00:01:14.610 --> 00:01:18.160
So thus the Angular CLI was born.

22
00:01:18.160 --> 00:01:23.740
And so this is from a collaboration
with the Ember CLI and

23
00:01:23.740 --> 00:01:27.690
so I think the one thing that Rails and
kind of by

24
00:01:27.690 --> 00:01:31.750
extension Ember does really
well is conventions.

25
00:01:31.750 --> 00:01:35.695
Is that they establish conventions and
then just boom.

26
00:01:35.695 --> 00:01:39.690
You're good to go and so for instance
the first time I ever heard of Rails.

27
00:01:39.690 --> 00:01:42.460
My gosh you can build a blog in like
five minutes off of the command line.

28
00:01:42.460 --> 00:01:43.651
It just does everything for you.

29
00:01:43.651 --> 00:01:49.589
Well that kind of essence was
carried over to the Ember CLI and

30
00:01:49.589 --> 00:01:52.940
now into the Angular CLI.

31
00:01:52.940 --> 00:01:57.980
And so, what the Angular CLI
allows us to do is to quickly spin

32
00:01:57.980 --> 00:02:02.850
up a working project and it tucks away all

33
00:02:02.850 --> 00:02:07.940
of the moving pieces that you would
generally need to get started.

34
00:02:09.990 --> 00:02:13.680
And so, when you are creating
a new Angular project,

35
00:02:13.680 --> 00:02:18.370
you can just go npm install -g for
global, angular-cli.

36
00:02:18.370 --> 00:02:25.190
And then from there, ng new, whatever your
app is called, in this case my-dream-app.

37
00:02:25.190 --> 00:02:28.980
Jump into the directory,
ng serve, and you are good to go.

38
00:02:28.980 --> 00:02:33.414
Now this is a bit of a falacy here because
in between these four lines is about,

39
00:02:33.414 --> 00:02:38.208
I don't know, five to ten minutes of stuff
happening depending on your computer.

40
00:02:38.208 --> 00:02:40.830
It's doing a lot under the hood.

41
00:02:40.830 --> 00:02:42.090
But the point is,

42
00:02:42.090 --> 00:02:45.690
you are not having to manually
compose all these pieces together.

43
00:02:45.690 --> 00:02:49.420
Secondly, this is officially
supported by the angular core team.

44
00:02:49.420 --> 00:02:54.943
And so as new conventions,
as new tools, technology,

45
00:02:54.943 --> 00:03:01.652
approaches become available,
this gets baked right into the CLI.

46
00:03:01.652 --> 00:03:05.280
Now, let me make one point real quick.

47
00:03:05.280 --> 00:03:07.720
The Angular CLI is not a crutch.

48
00:03:08.720 --> 00:03:14.940
It does do code generation,
and so that is handy but

49
00:03:16.000 --> 00:03:21.110
we are going to not be using it to
generate code for the rest of the workshop

50
00:03:21.110 --> 00:03:24.400
because I'm a huge believer
in building up muscle memory.

51
00:03:24.400 --> 00:03:29.375
Do not use a code generator until
you absolutely know what's going on

52
00:03:29.375 --> 00:03:30.590
under the hood.

53
00:03:30.590 --> 00:03:34.320
At the same time,
I can't turn my nose up at him.

54
00:03:34.320 --> 00:03:38.430
Because I build out live templates and
I'm lazy.

55
00:03:38.430 --> 00:03:41.070
And so
I like being able to generate things.

56
00:03:41.070 --> 00:03:47.023
But it's really important
initially that we do this by hand.

57
00:03:47.023 --> 00:03:52.200
So it's not a crutch not to learn how
to write components, services, etc.

58
00:03:52.200 --> 00:03:56.540
But more importantly, as I see it as
a mechanism for getting the environment up

59
00:03:56.540 --> 00:04:00.146
and running as soon as possible.
&gt;&gt; Lukas Ruebbelke: So

60
00:04:00.146 --> 00:04:05.647
here's everything that you get and more,
&gt;&gt; Lukas Ruebbelke: Most

61
00:04:05.647 --> 00:04:08.710
importantly is a full functional
project generation THAT JUST WORKS!

62
00:04:08.710 --> 00:04:12.090
So you just get a working project,
that's huge.

63
00:04:12.090 --> 00:04:14.270
You do get a code generator for
components, directives, pipes,

64
00:04:14.270 --> 00:04:15.490
enums, classes, modules and services.

65
00:04:15.490 --> 00:04:19.190
[SOUND]
It also allows you to do

66
00:04:19.190 --> 00:04:20.340
a production build.

67
00:04:20.340 --> 00:04:24.368
So this is also important if you
care about actually deploying so

68
00:04:24.368 --> 00:04:25.866
that people can see it.

69
00:04:25.866 --> 00:04:27.170
You do a production build.

70
00:04:27.170 --> 00:04:33.440
You get a unit test runner,
end-to-end test runner, and hold on.

71
00:04:33.440 --> 00:04:34.590
Watch me do some live coding here.

72
00:04:36.510 --> 00:04:42.105
Boom, I hate live coding,
but that one wasn't too bad.

73
00:04:42.105 --> 00:04:46.710
So, you can actually deploy your app
to give up pages, which is convenient.

74
00:04:46.710 --> 00:04:50.200
Linting, CSS preprocessor support.

75
00:04:50.200 --> 00:04:51.850
AOT support.

76
00:04:51.850 --> 00:04:55.470
Lazy routes, but, more so lazy modules
that you can then load into routes.

77
00:04:55.470 --> 00:04:57.220
Extensible blueprints coming soon.

