WEBVTT

1
00:00:00.270 --> 00:00:05.800
&gt;&gt; Lukas Ruebbelke: Angular under the hood
will automatically assign some CSS styles

2
00:00:05.800 --> 00:00:10.510
to your input,
depending on if its valid or invalid.

3
00:00:11.600 --> 00:00:13.900
So what this means is we could

4
00:00:15.980 --> 00:00:20.149
essentially, well let me just copy this.

5
00:00:21.210 --> 00:00:22.990
Let's see what happens.

6
00:00:22.990 --> 00:00:23.680
We'll go back here.

7
00:00:32.604 --> 00:00:36.932
&gt;&gt; Lukas Ruebbelke: And the caveats of
copying something out of keynote back

8
00:00:36.932 --> 00:00:37.491
into.

9
00:00:47.308 --> 00:00:48.119
&gt;&gt; Lukas Ruebbelke: Okay?

10
00:00:55.276 --> 00:00:56.735
&gt;&gt; Lukas Ruebbelke: Did I break something?

11
00:01:00.829 --> 00:01:03.390
&gt;&gt; Speaker 2: It didn't look
like it evaluated your CSS.

12
00:01:03.390 --> 00:01:04.730
&gt;&gt; Speaker 3: No it didn't.

13
00:01:04.730 --> 00:01:09.284
&gt;&gt; Lukas Ruebbelke: I would wager that
I have some random rogue something or

14
00:01:09.284 --> 00:01:10.177
another.

15
00:01:15.131 --> 00:01:17.943
&gt;&gt; Lukas Ruebbelke: Some crazy.

16
00:01:28.994 --> 00:01:30.580
&gt;&gt; Lukas Ruebbelke: This may
have been a really stupid idea.

17
00:01:30.580 --> 00:01:32.660
If this doesn't work in like two seconds.

18
00:01:33.670 --> 00:01:34.625
&gt;&gt; Speaker 3: Delete the first line.

19
00:01:34.625 --> 00:01:36.830
&gt;&gt; [INAUDIBLE]
&gt;&gt; Lukas Ruebbelke: What's that?

20
00:01:36.830 --> 00:01:37.780
&gt;&gt; Speaker 3: Delete the first line.

21
00:01:37.780 --> 00:01:41.390
&gt;&gt; Speaker 2: No, that is the first line.

22
00:01:41.390 --> 00:01:46.344
&gt;&gt; Lukas Ruebbelke: That is
&gt;&gt; Lukas Ruebbelke: Let me

23
00:01:46.344 --> 00:01:48.074
just make sure it's this indeed.

24
00:01:51.707 --> 00:01:54.226
&gt;&gt; Lukas Ruebbelke: If it is
then I'll just do this by hand.

25
00:01:54.226 --> 00:01:55.263
Come on.

26
00:01:57.212 --> 00:01:59.020
&gt;&gt; Lukas Ruebbelke: Man keynote.

27
00:01:59.020 --> 00:02:00.375
What kind of an editor are you?

28
00:02:06.119 --> 00:02:09.530
&gt;&gt; Lukas Ruebbelke: Input.ng-valid.

29
00:02:09.530 --> 00:02:14.065
Let's go, I don't know.

30
00:02:14.065 --> 00:02:18.621
Border-buttom: solid.

31
00:02:18.621 --> 00:02:19.890
What was that?

32
00:02:19.890 --> 00:02:22.135
&gt;&gt; Speaker 4: 1px red.

33
00:02:22.135 --> 00:02:24.170
&gt;&gt; Lukas Ruebbelke: Let's go one pixel-
&gt;&gt; Speaker 4: Red.

34
00:02:25.170 --> 00:02:26.370
&gt;&gt; Lukas Ruebbelke: Not if it's valid bro.

35
00:02:26.370 --> 00:02:26.918
&gt;&gt; Speaker 4: Green.

36
00:02:26.918 --> 00:02:30.073
&gt;&gt; Speaker 2: [LAUGH]
&gt;&gt; Lukas Ruebbelke: Fine,

37
00:02:30.073 --> 00:02:34.850
I was just looking for some honey
whiffle puff or some crazy color.

38
00:02:36.140 --> 00:02:36.990
We're talking about yesterday.

39
00:02:36.990 --> 00:02:40.809
So let's just see if
we've gotten this far.

40
00:02:44.868 --> 00:02:45.830
&gt;&gt; Lukas Ruebbelke: Look at that.

41
00:02:49.500 --> 00:02:55.766
So let's go ahead and let's do invalid

42
00:03:06.003 --> 00:03:09.011
&gt;&gt; Lukas Ruebbelke: Peach puff.

43
00:03:09.011 --> 00:03:10.432
Why not?

44
00:03:13.678 --> 00:03:18.303
&gt;&gt; Lukas Ruebbelke: I think if
anything's gonna really convey

45
00:03:18.303 --> 00:03:22.035
the severity of not having Valid.

46
00:03:23.533 --> 00:03:25.070
&gt;&gt; Lukas Ruebbelke: So
I don't know if you can see that.

47
00:03:25.070 --> 00:03:25.845
It's peachy.

48
00:03:25.845 --> 00:03:27.140
It's green.

49
00:03:29.843 --> 00:03:32.482
&gt;&gt; Lukas Ruebbelke: And so this is
basically happening automatically under

50
00:03:32.482 --> 00:03:34.360
the hood, courtesy of Angular.

51
00:03:34.360 --> 00:03:36.118
So we can just basically tap into these.

52
00:03:36.118 --> 00:03:41.118
So CSS designer, some good to know,
but if you're doing any kind of

53
00:03:41.118 --> 00:03:45.440
styling that these are going
to be applied under the hood.

54
00:03:46.580 --> 00:03:49.886
When it hits an invallid state or
a valid state.

55
00:03:49.886 --> 00:03:52.277
Make sense?

56
00:03:54.256 --> 00:03:57.818
&gt;&gt; Lukas Ruebbelke: Okay.

57
00:03:57.818 --> 00:04:02.474
And so this covers pretty much
everything about forms that I

58
00:04:02.474 --> 00:04:05.650
could possibly wanna talk about maybe.

59
00:04:06.800 --> 00:04:08.820
I feel like I might've missed one thing,
hold on.

60
00:04:17.630 --> 00:04:20.676
Nope, that is it.

61
00:04:27.143 --> 00:04:31.198
&gt;&gt; Lukas Ruebbelke: Okay, any questions?

62
00:04:31.198 --> 00:04:33.660
ngModel?

63
00:04:33.660 --> 00:04:34.270
ngForm.

64
00:04:35.530 --> 00:04:37.560
Pretty simple.
You have this underlying form control

65
00:04:37.560 --> 00:04:41.920
that's keeping track of what's happening
in the form, not only from values but

66
00:04:41.920 --> 00:04:43.440
validation.

67
00:04:43.440 --> 00:04:48.860
And from there we can then use
that to make educated decisions.

68
00:04:48.860 --> 00:04:51.970
So generally what I would
do is I'll just ngmodel.

69
00:04:51.970 --> 00:04:57.550
I'll bind to that to actually bind
to an object in my component,

70
00:04:58.580 --> 00:05:03.270
and I'll let that have it, so
rarely do I use referenced ngform and

71
00:05:03.270 --> 00:05:06.040
then actually use that per se.

72
00:05:06.040 --> 00:05:10.510
I would just actually bind to
an existing object in my controller or

73
00:05:10.510 --> 00:05:12.040
my component class.

74
00:05:12.040 --> 00:05:19.292
But I will use entry form for
validation information.

75
00:05:19.292 --> 00:05:23.400
And so that's where things,

76
00:05:23.400 --> 00:05:27.070
that's where it becomes really handy
is what's the state of my form.

77
00:05:27.070 --> 00:05:30.669
And do I need to surface some
information based on that?

