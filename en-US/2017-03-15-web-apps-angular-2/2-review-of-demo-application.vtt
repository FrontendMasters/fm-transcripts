WEBVTT

1
00:00:00.190 --> 00:00:04.220
&gt;&gt; Lukas: To get started, everybody needs
to go and download this [INAUDIBLE].

2
00:00:04.220 --> 00:00:06.510
So I believe everybody here has done this.

3
00:00:06.510 --> 00:00:08.190
Now there was some confusion.

4
00:00:08.190 --> 00:00:12.240
I asked everyone to also
install the angular CLI.

5
00:00:12.240 --> 00:00:17.742
The reason why I did that is because
when you can install the angular CLI and

6
00:00:17.742 --> 00:00:23.615
run it, then I know for a fact that you
have node and NPM installed and working.

7
00:00:23.615 --> 00:00:28.269
So implicitly it kind of handles a lot
of the environment issue that I know

8
00:00:28.269 --> 00:00:33.018
you're ready to go, as well this project
is based off of the angular CLI.

9
00:00:33.018 --> 00:00:36.231
Yes?
&gt;&gt; Speaker 2: Request, is there a link for

10
00:00:36.231 --> 00:00:37.535
the slides?

11
00:00:37.535 --> 00:00:42.920
&gt;&gt; Lukas: I will post the slides, I tell
you what when this is over, when I'm done

12
00:00:42.920 --> 00:00:47.620
telling you about the big picture I will
put this in a PDF and send them out.

13
00:00:49.060 --> 00:00:50.745
So they're forthcoming.

14
00:00:50.745 --> 00:00:55.148
I always wanna fiddle with the slides
during the day of like, maybe I could say

15
00:00:55.148 --> 00:01:00.150
this better and then there's always the
pre slides, so we'll say the beta slides.

16
00:01:00.150 --> 00:01:04.530
And then, at the end of the workshop,
I'll send out a final polished slide deck.

17
00:01:07.746 --> 00:01:14.510
&gt;&gt; Lukas: So what we have here
is the angular two rest website.

18
00:01:14.510 --> 00:01:18.910
And so this is a master detailed
view which I believe is the single

19
00:01:18.910 --> 00:01:23.440
most important interface for
developers to learn how to build.

20
00:01:24.640 --> 00:01:29.000
So what you have is
a master list of items and

21
00:01:29.000 --> 00:01:32.630
then when you select one,
then you can update that.

22
00:01:32.630 --> 00:01:37.460
So essentially you have a list of items
that you can create, read, update,

23
00:01:37.460 --> 00:01:38.297
and delete.

24
00:01:38.297 --> 00:01:42.280
So this is pretty much the foundation for
every line of business app, ever.

25
00:01:42.280 --> 00:01:46.860
And so if you even look at like a to do
app, well the to do app is really just

26
00:01:46.860 --> 00:01:52.440
a fancy version or I would say
a variation of the master detail view.

27
00:01:53.860 --> 00:01:59.210
And this also connects to a rest API,
we'll get into this tomorrow.

28
00:01:59.210 --> 00:02:04.100
But I think that one of the first
milestones that any developer should

29
00:02:04.100 --> 00:02:08.510
kind of strive to when learning a new
framework is learn how to build a master

30
00:02:08.510 --> 00:02:13.240
detail view that they can do
cred operations to a rest API.

31
00:02:13.240 --> 00:02:17.104
It's kind of at that point,
you can kind of take that knowledge and

32
00:02:17.104 --> 00:02:20.348
start to transform it into
whatever you're building.

33
00:02:20.348 --> 00:02:25.198
So in this case I'm keeping it
very generic with items, but

34
00:02:25.198 --> 00:02:31.200
this could very much be users,
policies, incidences like whatever.

35
00:02:31.200 --> 00:02:32.810
So whatever your domain model is,

36
00:02:32.810 --> 00:02:37.220
it's very easy to transform it into
the master detail view interface.

37
00:02:39.252 --> 00:02:43.517
&gt;&gt; Lukas: So again simple RESTful
master detail application and

38
00:02:43.517 --> 00:02:47.504
what we have is I've built
out the items feature and

39
00:02:47.504 --> 00:02:52.340
we are going to be building out
a widgets feature in parallel.

40
00:02:53.400 --> 00:02:57.230
And so, the reason why I've done this is I
found it's helpful that as you're building

41
00:02:57.230 --> 00:03:01.030
something that if you have something
to reference that's already working

42
00:03:01.030 --> 00:03:02.480
that is helpful.

43
00:03:02.480 --> 00:03:04.551
So as we're building out
the widgets feature and

44
00:03:04.551 --> 00:03:06.229
we're going through the challenges.

45
00:03:06.229 --> 00:03:10.360
Then feel free if you get stuck to
kind of that hop over to see how

46
00:03:10.360 --> 00:03:12.970
we're doing it in the items feature.

47
00:03:12.970 --> 00:03:18.840
So personally for
me I think that we learn by example and

48
00:03:18.840 --> 00:03:24.770
I think that you don't really get a badge
of honor brute forcing something,

49
00:03:24.770 --> 00:03:29.360
this for me is like is a documentation,
does your documentation have working code?

50
00:03:29.360 --> 00:03:33.020
Even better, let me just copy it and
I'll start from here.

51
00:03:33.020 --> 00:03:35.540
So we're gonna be building
out a widgets feature,

52
00:03:35.540 --> 00:03:39.200
and use the items feature
as a reference point.

53
00:03:39.200 --> 00:03:42.690
And as well, don't be afraid.

54
00:03:42.690 --> 00:03:43.900
Try some new things.

55
00:03:43.900 --> 00:03:47.336
So if you like widgets [SOUND]
I don't care about widgets.

56
00:03:47.336 --> 00:03:49.060
I care about gadgets.

57
00:03:49.060 --> 00:03:53.450
Well, by all means, you can say whatever.

58
00:03:53.450 --> 00:03:56.650
So if you wanna do with gadgets or
you're like, this is the data model but

59
00:03:56.650 --> 00:04:02.650
I wanna try some additional properties or
whatever, feel free to explore that.

60
00:04:02.650 --> 00:04:03.740
It's one thing to note something.

61
00:04:03.740 --> 00:04:05.780
It's another thing to be a practitioner.

62
00:04:05.780 --> 00:04:08.020
You just simply do that by doing.

63
00:04:10.165 --> 00:04:12.183
&gt;&gt; Lukas: All right, so challenges for

64
00:04:12.183 --> 00:04:16.710
this module is we just need to make
sure we can run the application.

65
00:04:17.710 --> 00:04:20.650
Because this is a rest application,

66
00:04:20.650 --> 00:04:25.000
we are running in conjunction with,
essentially, the webpack server.

67
00:04:25.000 --> 00:04:27.090
We are running, it's called JSON server.

68
00:04:27.090 --> 00:04:31.460
So what that allows us to do is actually
serve up a rest API in the background.

69
00:04:31.460 --> 00:04:36.040
So when you run npm start what this is

70
00:04:36.040 --> 00:04:41.238
doing,
&gt;&gt; Lukas: Is

71
00:04:41.238 --> 00:04:46.220
it's essentially running our server.

72
00:04:46.220 --> 00:04:47.560
So if this is our JSON server, so

73
00:04:47.560 --> 00:04:50.590
if you go to local lost 3000
that's what you're gonna see.

74
00:04:50.590 --> 00:04:53.080
And I think somebody
just said this in here.

75
00:04:53.080 --> 00:04:57.430
You're gonna see something like,
congratulations, JSON server is running.

76
00:04:57.430 --> 00:05:00.608
But what we care about
is what's on port 4200.

77
00:05:01.745 --> 00:05:04.060
&gt;&gt; Lukas: I'll just show this real quick.

78
00:05:10.401 --> 00:05:12.860
&gt;&gt; Lukas: So, you can see here,
we have items and widgets.

79
00:05:12.860 --> 00:05:13.860
So, this is our rest API.

80
00:05:13.860 --> 00:05:14.980
We're going to consume.

81
00:05:16.790 --> 00:05:19.660
And what this is, and just a pro tip.

82
00:05:19.660 --> 00:05:21.560
If you're ever doing like,
proof of conquest work, and

83
00:05:21.560 --> 00:05:26.520
you need a local rest API quickly,
JSON server is the heat.

84
00:05:27.850 --> 00:05:30.352
Because then what you
can do is in our server,

85
00:05:30.352 --> 00:05:35.690
we just basically just have this JSON
file that we're dumping in here.

86
00:05:35.690 --> 00:05:39.310
And so you can actually update,
delete, whatever.

87
00:05:39.310 --> 00:05:43.390
Using the file system it'll actually
update your JSON file as well.

88
00:05:44.410 --> 00:05:47.080
And so
that's where port 3000 is coming in.

89
00:05:48.200 --> 00:05:53.170
And then, if you go to localhost 4200,

90
00:05:53.170 --> 00:05:58.680
then what we have here is items and
widgets.

91
00:05:59.800 --> 00:06:06.150
And so this is the master branch for
the project but then,

92
00:06:07.380 --> 00:06:13.640
what we've done is we have created
a branch for every module.

93
00:06:13.640 --> 00:06:17.040
And so at the end of each module,
we're going to have a challenge.

94
00:06:17.040 --> 00:06:18.880
And if you want to see the solution for

95
00:06:18.880 --> 00:06:23.250
that challenge,
then you can just hop in to that branch.

96
00:06:23.250 --> 00:06:27.610
So for instance at the end of components,
if you wanna see what that looks like.

97
00:06:27.610 --> 00:06:31.040
We'll actually step through and
see that in action.

98
00:06:31.040 --> 00:06:35.530
More importantly, is let's say somebody
has to go to a dentist appointment at 11.

99
00:06:35.530 --> 00:06:39.910
And they come back and were on services.

100
00:06:39.910 --> 00:06:43.835
Well what they would do is just go to
the module ahead, check that out and

101
00:06:43.835 --> 00:06:46.100
anywhere essentially caught up.

102
00:06:46.100 --> 00:06:49.390
And going into services,
if that makes sense?

103
00:06:49.390 --> 00:06:58.250
And so, all of our solutions essentially
in their respective branches,

104
00:06:58.250 --> 00:07:01.930
and so, if you get stuck,
you can just hop in and check that out or

105
00:07:01.930 --> 00:07:05.260
if you get stuck you can hop into
the module before and then catch up.

106
00:07:05.260 --> 00:07:09.380
Or if you want to review the solutions
then you can do that as well.

107
00:07:11.660 --> 00:07:19.770
But for the most part everything
is in the widgets feature.

108
00:07:19.770 --> 00:07:22.140
So you can see here if we go to widgets.

109
00:07:22.140 --> 00:07:24.070
You can basically kind of select this.

110
00:07:24.070 --> 00:07:28.020
We have some routing and stuff going on
that we'll get into at the end of the day.

111
00:07:28.020 --> 00:07:31.900
And you can select it, SAVE it, etc.

