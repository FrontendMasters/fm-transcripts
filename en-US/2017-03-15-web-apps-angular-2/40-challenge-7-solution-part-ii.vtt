WEBVTT

1
00:00:00.400 --> 00:00:04.111
&gt;&gt; Lukas Ruebbelke: Now, that we have
these alive and well in our application,

2
00:00:04.111 --> 00:00:06.422
what do you suppose the next step is?

3
00:00:09.006 --> 00:00:11.251
&gt;&gt; Speaker 2: Abstract the templates.

4
00:00:11.251 --> 00:00:13.550
&gt;&gt; Lukas Ruebbelke: Yeah,
abstract the templates, very good.

5
00:00:13.550 --> 00:00:18.230
So, we know that we're here,
everything is kinda hooked up properly.

6
00:00:18.230 --> 00:00:19.650
So, let's put the templates in.

7
00:00:22.190 --> 00:00:27.050
So, we'll go back here, and, yes,

8
00:00:27.050 --> 00:00:30.941
I see somebody saying
Angular CLI scaffolding.

9
00:00:30.941 --> 00:00:34.510
I would just be a hypocrite if I just
scolded everybody muscle memory,

10
00:00:34.510 --> 00:00:35.690
and then I scaffold it.

11
00:00:37.720 --> 00:00:39.650
All right, so I'm just gonna copy this.

12
00:00:41.870 --> 00:00:43.989
And we'll go to.

13
00:00:48.778 --> 00:00:50.884
&gt;&gt; Lukas Ruebbelke: Widget Detail
component.

14
00:00:50.884 --> 00:00:54.180
And I'm going to paste this here.

15
00:00:55.600 --> 00:00:57.940
Let's go back to a widget component.

16
00:01:00.750 --> 00:01:05.135
And I fully expect that when we run this,
this is going to break.

17
00:01:08.790 --> 00:01:11.139
&gt;&gt; Lukas Ruebbelke: So,
we'll chop this and.

18
00:01:14.662 --> 00:01:19.152
&gt;&gt; Lukas Ruebbelke: Widget,
list, component, yeah.

19
00:01:27.385 --> 00:01:28.433
&gt;&gt; Lukas Ruebbelke: Okay.

20
00:01:42.987 --> 00:01:44.890
&gt;&gt; Lukas Ruebbelke: So, kinda works?

21
00:01:44.890 --> 00:01:49.869
But see, I'm not throwing any air,
so that's a good sign.

22
00:01:52.718 --> 00:01:56.894
&gt;&gt; Lukas Ruebbelke: So, now,
what we need to do is first things first,

23
00:01:56.894 --> 00:02:01.300
we need to get widgets
into our widgets list.

24
00:02:01.300 --> 00:02:05.720
So, what would we use for that?

25
00:02:05.720 --> 00:02:07.988
&gt;&gt; Speaker 3: Input.
&gt;&gt; Lukas Ruebbelke: Input, yes, very good.

26
00:02:07.988 --> 00:02:15.056
And so, now,
let's start with the list component here,

27
00:02:15.056 --> 00:02:19.106
and let's just call it widgets.

28
00:02:21.832 --> 00:02:22.811
&gt;&gt; Lukas Ruebbelke: And.

29
00:02:26.700 --> 00:02:29.931
&gt;&gt; Lukas Ruebbelke: Say this
is an array of widgets.

30
00:02:34.457 --> 00:02:34.957
&gt;&gt; Lukas Ruebbelke: Come on.

31
00:02:36.670 --> 00:02:38.139
There we go.

32
00:02:38.139 --> 00:02:39.771
And so, now, I'm saying,

33
00:02:39.771 --> 00:02:44.000
I have an input of widgets that I'm
going to get from my parent component.

34
00:02:45.340 --> 00:02:49.590
Now, if we go here to.

35
00:02:49.590 --> 00:02:51.129
Let's close this down.

36
00:02:55.363 --> 00:02:58.400
&gt;&gt; Lukas Ruebbelke: [widgets] ="widgets".

37
00:02:58.400 --> 00:03:03.789
Now, we just verified that if
I go to the widgets component.

38
00:03:06.550 --> 00:03:10.410
Yes, we do indeed have the widgets
properly on the parent.

39
00:03:11.600 --> 00:03:15.560
I'm essentially taking this property,
and more so its value, and

40
00:03:15.560 --> 00:03:20.890
were passing it into
the widgets list component.

41
00:03:20.890 --> 00:03:21.786
So far so good?

42
00:03:33.770 --> 00:03:35.110
&gt;&gt; Lukas Ruebbelke: Super, there it is.

43
00:03:36.470 --> 00:03:38.110
Now, I feel like.

44
00:03:38.110 --> 00:03:40.050
Let me see here.

45
00:03:50.910 --> 00:03:52.660
Okay, I'm messing up on the CSS somewhere,
but

46
00:03:52.660 --> 00:03:54.570
I'm not going to worry
about that just yet.

47
00:03:56.030 --> 00:03:59.400
So, now, what we need to do is,
more importantly,

48
00:04:01.150 --> 00:04:08.184
we need to capture the click

49
00:04:08.184 --> 00:04:13.520
event when we select
a widget's item from the list,

50
00:04:13.520 --> 00:04:19.310
and service it back up to
our widget's component.

51
00:04:19.310 --> 00:04:21.872
So, let's go into here.

52
00:04:24.050 --> 00:04:27.945
&gt;&gt; Lukas Ruebbelke: And
let's call this output selected, now,

53
00:04:27.945 --> 00:04:30.414
this is a new event emitter.

54
00:04:35.630 --> 00:04:36.459
&gt;&gt; Lukas Ruebbelke: And.

55
00:04:38.780 --> 00:04:40.384
&gt;&gt; Lukas Ruebbelke: We're going
to define this as output.

56
00:04:46.680 --> 00:04:48.992
&gt;&gt; Lukas Ruebbelke: Did this not import,
come on.

57
00:04:53.879 --> 00:04:55.641
&gt;&gt; Lukas Ruebbelke: Ha!

58
00:04:55.641 --> 00:04:57.230
&gt;&gt; Speaker 4: Make sure you pick
the right one, there's six of them.

59
00:04:57.230 --> 00:04:59.960
&gt;&gt; Lukas Ruebbelke: Yeah, exactly
let's see here, which one do I have?

60
00:04:59.960 --> 00:05:03.207
&gt;&gt; Speaker 5: Put Output EventEmitter
you're missing.

61
00:05:03.207 --> 00:05:08.239
&gt;&gt; Lukas Ruebbelke: Let's just
take one from the core, okay?

62
00:05:08.239 --> 00:05:13.005
And then we'll go back to our

63
00:05:13.005 --> 00:05:18.570
component here, and select it.

64
00:05:21.008 --> 00:05:21.820
&gt;&gt; Lukas Ruebbelke: Select widget.

65
00:05:25.550 --> 00:05:32.190
Rather, that's what I want.

66
00:05:32.190 --> 00:05:36.305
So, now, we need to trigger
this from our list component.

67
00:05:45.745 --> 00:05:46.723
&gt;&gt; Lukas Ruebbelke: selected.emit.

68
00:05:52.963 --> 00:05:54.448
&gt;&gt; Lukas Ruebbelke: And let's see here.

69
00:05:59.127 --> 00:06:00.164
&gt;&gt; Lukas Ruebbelke: Let's hop back in.

70
00:06:03.456 --> 00:06:08.345
&gt;&gt; Lukas Ruebbelke: Click,
selected, a MIT widget.

71
00:06:08.345 --> 00:06:11.719
Let's go back here.

72
00:06:15.508 --> 00:06:17.225
&gt;&gt; Lukas Ruebbelke: selected,
selectWidget.

73
00:06:28.840 --> 00:06:30.298
&gt;&gt; Lukas Ruebbelke: Just
make sure this is firing.

74
00:06:38.711 --> 00:06:43.004
&gt;&gt; Lukas Ruebbelke: Okay, good, so
this is actually what I want, but

75
00:06:43.004 --> 00:06:46.500
I haven't hooked up the input.

76
00:06:46.500 --> 00:06:50.405
For my widget details component.

77
00:06:50.405 --> 00:06:52.105
Duh.

78
00:06:52.105 --> 00:06:53.354
&gt;&gt; Lukas Ruebbelke: I totally
thought about something.

79
00:06:57.236 --> 00:07:02.189
&gt;&gt; Lukas Ruebbelke: Okay, and
so now, in our widget deep div

80
00:07:02.189 --> 00:07:07.011
component, we have selected widget.

81
00:07:09.911 --> 00:07:12.856
&gt;&gt; Lukas Ruebbelke: Let me
just rename this real quick,

82
00:07:12.856 --> 00:07:16.887
just gonna call this widget,
widget, widget.

83
00:07:23.040 --> 00:07:27.590
&gt;&gt; Lukas Ruebbelke: There we go,
and in our detail

84
00:07:27.590 --> 00:07:32.326
component, let's go input.

85
00:07:40.185 --> 00:07:43.725
&gt;&gt; Lukas Ruebbelke: So,
now, we have the input, and

86
00:07:43.725 --> 00:07:49.780
what do we need to do here
to get our selected widget?

87
00:07:49.780 --> 00:07:52.020
Into our widget detail component.

88
00:07:55.720 --> 00:07:57.160
Yep.

89
00:07:57.160 --> 00:07:59.380
So, it is property binding.

90
00:08:01.118 --> 00:08:03.622
="selectedWidget".

91
00:08:06.611 --> 00:08:09.297
&gt;&gt; Lukas Ruebbelke: So now you can see
here, we're just using inputs, outputs.

92
00:08:09.297 --> 00:08:12.483
And we're saying, now take the selected
widget and put it in here.

93
00:08:19.966 --> 00:08:21.261
&gt;&gt; Lukas Ruebbelke: Okay,
refresh the page.

94
00:08:25.177 --> 00:08:26.267
&gt;&gt; Lukas Ruebbelke: And here we go.

95
00:08:26.267 --> 00:08:31.830
So styling aside, this is pretty
much what we want to happen.

96
00:08:35.280 --> 00:08:36.822
&gt;&gt; Lukas Ruebbelke: What
else did I say in here?

97
00:08:39.984 --> 00:08:41.615
&gt;&gt; Lukas Ruebbelke: So
delete, save, and cancel.

98
00:08:41.615 --> 00:08:42.939
So let's wire those up real quick.

99
00:08:46.164 --> 00:08:49.220
&gt;&gt; Lukas Ruebbelke: So
if we go to our items,

100
00:08:51.953 --> 00:08:53.641
&gt;&gt; Lukas Ruebbelke: Or item list, rather.

101
00:09:00.967 --> 00:09:02.677
&gt;&gt; Lukas Ruebbelke: There it is.

102
00:09:02.677 --> 00:09:03.886
You just copy this.

103
00:09:06.397 --> 00:09:14.412
&gt;&gt; Lukas Ruebbelke: And we'll go to our,
&gt;&gt; Lukas Ruebbelke: Widget

104
00:09:14.412 --> 00:09:16.751
list component or rather HTML.

105
00:09:29.798 --> 00:09:33.842
&gt;&gt; Lukas Ruebbelke: And so here, we've
already kind of predefined this deleted,

106
00:09:33.842 --> 00:09:35.990
so let's go into the component.

107
00:09:41.851 --> 00:09:48.467
&gt;&gt; Lukas Ruebbelke: Deleted
= new EventEmitter.

108
00:09:48.467 --> 00:09:54.115
And then what we'll do is in
the widget component itself,

109
00:09:54.115 --> 00:09:58.386
well actually first we
need to hook this up.

110
00:10:00.504 --> 00:10:06.208
&gt;&gt; Lukas Ruebbelke: Delete it,
we'll go deleteWidget event,

111
00:10:06.208 --> 00:10:12.230
and then we will hook
this up in the component.

112
00:10:21.228 --> 00:10:24.210
&gt;&gt; Lukas Ruebbelke: So we have
selectWidget, just make sure I don't.

113
00:10:24.210 --> 00:10:25.337
Okay, so from here.

114
00:10:38.979 --> 00:10:40.032
&gt;&gt; Lukas Ruebbelke: Delete the widget.

115
00:10:42.425 --> 00:10:42.925
&gt;&gt; Lukas Ruebbelke: Okay?

116
00:10:47.171 --> 00:10:49.166
&gt;&gt; Lukas Ruebbelke: And let me make sure.

117
00:10:49.166 --> 00:10:51.310
I think this is everything, let's see.

118
00:10:54.743 --> 00:10:56.767
&gt;&gt; Speaker 6: I think you copied and
pasted an item in there.

119
00:10:56.767 --> 00:10:58.787
Should it be widget for your delete?

120
00:10:58.787 --> 00:11:05.284
&gt;&gt; Lukas Ruebbelke: Did I,
yeah, I think you are correct.

121
00:11:05.284 --> 00:11:07.552
Did I do this in?

122
00:11:07.552 --> 00:11:11.308
&gt;&gt; Speaker 6: Your list component HTML,
on the left.

123
00:11:11.308 --> 00:11:12.845
&gt;&gt; Lukas Ruebbelke: On the left.

124
00:11:12.845 --> 00:11:15.637
&gt;&gt; Speaker 6: I'm looking at
your tabs up on the left there.

125
00:11:15.637 --> 00:11:16.163
&gt;&gt; Lukas Ruebbelke: Right here.

126
00:11:16.163 --> 00:11:20.972
&gt;&gt; Speaker 6: Yeah, there deleted.emit.

127
00:11:20.972 --> 00:11:22.593
&gt;&gt; Lukas Ruebbelke: You are my true homey.

128
00:11:25.247 --> 00:11:28.719
&gt;&gt; Lukas Ruebbelke: Mark give this guy
a cookie when we go on break after this.

129
00:11:31.337 --> 00:11:35.679
&gt;&gt; Speaker 7: There's a whole stack
of cookies next right next to him.

130
00:11:35.679 --> 00:11:41.939
&gt;&gt; Lukas Ruebbelke: There we go so now
we are surfacing this item for deletion.

131
00:11:43.879 --> 00:11:44.858
&gt;&gt; Lukas Ruebbelke: And two more and

132
00:11:44.858 --> 00:11:49.909
then we actually will take a break cuz
this is exhausted, all this live coding.

133
00:11:54.789 --> 00:11:57.532
&gt;&gt; Lukas Ruebbelke: Let's
go back into our code and,

134
00:12:01.496 --> 00:12:04.938
&gt;&gt; Lukas Ruebbelke: Item detail HTML.

135
00:12:07.550 --> 00:12:09.695
&gt;&gt; Lukas Ruebbelke: Just copy this.

136
00:12:17.108 --> 00:12:19.775
&gt;&gt; Lukas Ruebbelke: Let's
get this out of here.

137
00:12:23.084 --> 00:12:30.318
&gt;&gt; Lukas Ruebbelke: Widget I'm gonna leave
this here, we'll get into this next.

138
00:12:30.318 --> 00:12:35.083
Widget and
actually I know what is happening here and

139
00:12:35.083 --> 00:12:39.098
we'll talk about this in the next episode.

140
00:12:39.098 --> 00:12:42.279
Okay two outputs.

141
00:12:45.926 --> 00:12:47.792
&gt;&gt; Lukas Ruebbelke: Widget
detail component.

142
00:12:55.953 --> 00:12:58.339
&gt;&gt; Lukas Ruebbelke: Boom.

143
00:12:58.339 --> 00:13:05.366
Okay, was it saved?

144
00:13:05.366 --> 00:13:07.599
EventEmitter.

145
00:13:12.771 --> 00:13:18.296
&gt;&gt; Lukas Ruebbelke: And cancel.

146
00:13:18.296 --> 00:13:22.568
Did I do that right?
Let me check.

147
00:13:22.568 --> 00:13:23.824
Cancelled saved.

148
00:13:23.824 --> 00:13:27.137
Saved cancelled.

149
00:13:27.137 --> 00:13:32.068
And so from here,
&gt;&gt; Lukas Ruebbelke: We are in

150
00:13:32.068 --> 00:13:33.082
the home stretch.

151
00:13:47.948 --> 00:13:48.799
&gt;&gt; Lukas Ruebbelke: Event.

152
00:14:49.087 --> 00:14:50.248
&gt;&gt; Lukas Ruebbelke: Does this look ok?

153
00:14:50.248 --> 00:14:52.486
I think, it feels right in my soul.

154
00:14:52.486 --> 00:14:54.952
I feel like I've made good
choices with my life.

155
00:15:01.279 --> 00:15:04.104
&gt;&gt; Lukas Ruebbelke: So that's working.

156
00:15:04.104 --> 00:15:06.282
Yay.

157
00:15:06.282 --> 00:15:08.048
All right.

158
00:15:14.440 --> 00:15:15.483
&gt;&gt; Lukas Ruebbelke: And there we go.

159
00:15:18.979 --> 00:15:26.386
&gt;&gt; Lukas Ruebbelke: So any questions
about what I've done in this example.

160
00:15:30.558 --> 00:15:36.031
&gt;&gt; Lukas Ruebbelke: I think the most
important thing that I wanna call out is,

161
00:15:36.031 --> 00:15:39.794
when we look at our widgets component,

162
00:15:39.794 --> 00:15:45.509
does this right here and
right here, does this make sense?

163
00:15:47.961 --> 00:15:52.405
&gt;&gt; Speaker 8: So just to clarify for
my own sake, essentially the input and

164
00:15:52.405 --> 00:15:56.065
the output,
there on the left where in brackets or

165
00:15:56.065 --> 00:16:00.300
parens is kind of what it's
referenced as in the child.

166
00:16:00.300 --> 00:16:00.932
Right?

167
00:16:00.932 --> 00:16:01.584
&gt;&gt; Lukas Ruebbelke: Mm-hm.

168
00:16:01.584 --> 00:16:03.798
&gt;&gt; Speaker 8: Whereas in the quotes
is what it's used in the parent,

169
00:16:03.798 --> 00:16:05.686
that's kind of how
the parent is handling it?

170
00:16:05.686 --> 00:16:09.182
&gt;&gt; Lukas Ruebbelke: So what happens
is the child is responsible for

171
00:16:09.182 --> 00:16:11.160
defining its interface.

172
00:16:12.780 --> 00:16:18.300
So let's see if I can do, let me just
see if I can pick one of these here.

173
00:16:20.758 --> 00:16:21.370
&gt;&gt; Lukas Ruebbelke: Let's go with.

174
00:16:28.453 --> 00:16:29.200
&gt;&gt; Lukas Ruebbelke: All right,
we'll do this one.

175
00:16:34.310 --> 00:16:35.230
&gt;&gt; Lukas Ruebbelke: So we can see here.

176
00:16:38.266 --> 00:16:39.969
&gt;&gt; Lukas Ruebbelke: So
in the widget detail component.

177
00:16:43.016 --> 00:16:48.371
&gt;&gt; Lukas Ruebbelke: Hold on, somebody
just made something totally funny.

178
00:16:49.620 --> 00:16:52.770
&gt;&gt; Lukas Ruebbelke: Somebody said
Less CSS would be easier and

179
00:16:52.770 --> 00:16:57.272
somebody's like Less,
like capital L-E-S-S or Less.

180
00:16:57.272 --> 00:16:59.555
That's-
&gt;&gt; Speaker 4: They're being sassy.

181
00:16:59.555 --> 00:17:00.856
&gt;&gt; Lukas Ruebbelke: That's aw.

182
00:17:00.856 --> 00:17:02.866
You just totally, say it, put it in there.

183
00:17:02.866 --> 00:17:06.380
&gt;&gt; All: [LAUGH]
&gt;&gt; Speaker 4: They all heard it.

184
00:17:06.380 --> 00:17:06.880
&gt;&gt; Lukas Ruebbelke: Yeah.

185
00:17:08.400 --> 00:17:11.371
All right, so, back on track here.

186
00:17:11.371 --> 00:17:14.263
I'm gonna be laughing
about that all afternoon.

187
00:17:14.263 --> 00:17:17.038
In our WidgetDetail component, i.e.,

188
00:17:17.038 --> 00:17:22.261
the child component,
&gt;&gt; Lukas Ruebbelke: We have defined

189
00:17:22.261 --> 00:17:27.160
essentially, our interface,
our inputs and outputs.

190
00:17:29.390 --> 00:17:34.660
And over here, in the parent component,
we are now leveraging

191
00:17:35.930 --> 00:17:40.100
our inputs and outputs,
to interact with the child component.

192
00:17:41.980 --> 00:17:43.009
Does that make sense?

193
00:17:43.009 --> 00:17:47.853
And so again, I want everybody to think
of inputs and outputs are really just

194
00:17:47.853 --> 00:17:52.790
custom properties and events that we're
defining for our child component.

195
00:17:55.664 --> 00:17:57.860
&gt;&gt; Lukas Ruebbelke: And
that is really at the core,

196
00:17:59.977 --> 00:18:01.305
&gt;&gt; Lukas Ruebbelke: What we're doing here?

197
00:18:01.305 --> 00:18:04.695
We're simply saying,
I'm creating a custom component and

198
00:18:04.695 --> 00:18:08.205
I want to set these properties on it.

199
00:18:08.205 --> 00:18:11.715
And I want it, when something
happens to them at these events, so

200
00:18:11.715 --> 00:18:13.405
I can handle them outside
of the component.

201
00:18:23.890 --> 00:18:24.759
&gt;&gt; Lukas Ruebbelke: Yes?

202
00:18:24.759 --> 00:18:30.309
&gt;&gt; Speaker 5: I had a question on
the event.stop propagation on the button,

203
00:18:30.309 --> 00:18:32.580
on the click event.

204
00:18:32.580 --> 00:18:33.670
What exactly does that do?

205
00:18:34.830 --> 00:18:39.160
&gt;&gt; Lukas Ruebbelke: So what happens
is because you have a child button or

206
00:18:39.160 --> 00:18:44.200
really that delete button,
that sits on top of another element that

207
00:18:44.200 --> 00:18:48.390
we're also listening for a click event,
is that event was triggering both of them.

208
00:18:48.390 --> 00:18:50.420
So what I'm saying is when
I click the delete button,

209
00:18:51.420 --> 00:18:54.320
I want to stop the click event entirely.

210
00:18:54.320 --> 00:18:56.250
Instead of letting it basically
bubble through my DOM.

211
00:18:57.680 --> 00:19:01.140
So essentially it's like hey,
stop the event,

212
00:19:01.140 --> 00:19:05.540
essentially it's a delete button and
do not let it go any further.

213
00:19:05.540 --> 00:19:08.335
&gt;&gt; Speaker 5: It would've triggered
like the select event for attempting to?

214
00:19:08.335 --> 00:19:11.540
&gt;&gt; Lukas Ruebbelke: Mm-hm, yep, and
so basically DOM events will bubble.

215
00:19:11.540 --> 00:19:12.140
&gt;&gt; Speaker 5: Okay.

216
00:19:12.140 --> 00:19:13.506
&gt;&gt; Lukas Ruebbelke: And
that's what I wanted to prevent.

217
00:19:13.506 --> 00:19:15.290
So using event.stop propagation,

218
00:19:15.290 --> 00:19:19.920
you simply say stop it here and,
allow it to go no further.

219
00:19:22.040 --> 00:19:23.850
&gt;&gt; Lukas Ruebbelke: Because there are,
sometimes in a DOM,

220
00:19:23.850 --> 00:19:27.524
where you click on something, but there
might be text or something when you really

221
00:19:27.524 --> 00:19:31.630
actually want to click the underlying
element or the group of elements.

222
00:19:31.630 --> 00:19:35.569
And so, it's really the question is
where is that DOM event targeting.

223
00:19:35.569 --> 00:19:39.019
And so sometimes letting a bubble is good,
that's exactly what you want.

224
00:19:40.720 --> 00:19:43.750
Other times you wanna just
isolate it to just that event.

225
00:19:45.770 --> 00:19:49.030
So Chris P had a question I'm
just gonna address real quick.

226
00:19:49.030 --> 00:19:54.140
And that is, does ngOnInit
execute after input is passed in?

227
00:19:56.728 --> 00:19:59.950
&gt;&gt; Lukas Ruebbelke: And
the answer is yes, afterwards.

228
00:19:59.950 --> 00:20:07.290
So if you go to day one slides and
you look at the life cycle of hooks,

229
00:20:08.380 --> 00:20:15.300
slide in particular that ngOnInit is
called after the first ngOnChanges.

230
00:20:16.580 --> 00:20:18.760
Well, this gets called,

231
00:20:20.290 --> 00:20:24.470
ngOnChanges gets called when an input or
output binding value changes.

232
00:20:24.470 --> 00:20:28.685
So essentially you have to
have an input or an output.

233
00:20:28.685 --> 00:20:32.492
In this case, an input,
once it changes at least once,

234
00:20:32.492 --> 00:20:36.230
it's been initialized,
then ngOnInit gets called.

235
00:20:36.230 --> 00:20:41.040
So in a nutshell, what I've always
just said is ngOnInit happens

236
00:20:41.040 --> 00:20:43.220
after the bindings have been initialized.

237
00:20:43.220 --> 00:20:47.613
And so, now you can see from
the documentation is that it's called

238
00:20:47.613 --> 00:20:49.652
after the first ngOnChanges,

239
00:20:49.652 --> 00:20:54.954
at which point you can safely assume that,
&gt;&gt; Lukas Ruebbelke: Essentially, your

240
00:20:54.954 --> 00:20:59.320
bindings are there, your input has been
satisfied and the binding is ready to go.

