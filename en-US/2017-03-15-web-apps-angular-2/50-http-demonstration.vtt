WEBVTT

1
00:00:00.430 --> 00:00:05.510
&gt;&gt; Lukas Ruebbelke: So how do we do global
intercepts, intercept handlers in NG2?

2
00:00:05.510 --> 00:00:12.820
That is a good question and,
&gt;&gt; Lukas Ruebbelke: I honestly don't know.

3
00:00:12.820 --> 00:00:18.220
So the idea of an HTTP interceptor in
Angular 1 does not exist in Angular 2.

4
00:00:19.410 --> 00:00:24.090
So I do not think, this is something
I'll have to get back to you on.

5
00:00:24.090 --> 00:00:27.630
Cuz I've asked about it and
it's just like no good way.

6
00:00:27.630 --> 00:00:29.650
&gt;&gt; Speaker 2: Well I see
your handler function and

7
00:00:29.650 --> 00:00:34.370
it occurs to me you can probably
inject a service to handle that.

8
00:00:34.370 --> 00:00:36.551
And then just delegate it to a service and

9
00:00:36.551 --> 00:00:39.705
have it put up your toaster or
whatever you wanted to show.

10
00:00:39.705 --> 00:00:42.608
&gt;&gt; Lukas Ruebbelke: So with Angular 1 it
was handy because you actually could do

11
00:00:42.608 --> 00:00:45.990
aspect oriented programming and
like crosscut across everything.

12
00:00:47.650 --> 00:00:51.630
But don't hold me to that.

13
00:00:51.630 --> 00:00:55.300
On thursday we're doing
an authorization or

14
00:00:55.300 --> 00:00:58.310
secure webapp, an authorization work shop.

15
00:00:58.310 --> 00:01:01.550
And I would wager Ryan knows all about it.

16
00:01:01.550 --> 00:01:06.199
So Dale, come back on Thursday,

17
00:01:06.199 --> 00:01:09.192
and we'll let Ryan.

18
00:01:09.192 --> 00:01:10.680
Yes, Dale, I see you.

19
00:01:12.330 --> 00:01:13.882
You could've just asked that in person.

20
00:01:13.882 --> 00:01:14.740
You're right here.

21
00:01:14.740 --> 00:01:16.276
&gt;&gt; Speaker 2: I didn't want
to interrupt the flow.

22
00:01:16.276 --> 00:01:18.461
&gt;&gt; Lukas Ruebbelke: Well I appreciate
you not interrupting my flow.

23
00:01:21.308 --> 00:01:26.450
&gt;&gt; Lukas Ruebbelke: Okay, so
I think that I'm going to end

24
00:01:26.450 --> 00:01:32.409
up stepping into
the solution a little bit.

25
00:01:32.409 --> 00:01:34.005
Let's go to our.

26
00:01:39.680 --> 00:01:43.789
&gt;&gt; Lukas Ruebbelke: Widgets,
let's go to our WidgetService.

27
00:01:48.383 --> 00:01:53.160
&gt;&gt; Lukas Ruebbelke: Yes, so I would
love to see a jest for the interceptor.

28
00:01:53.160 --> 00:01:53.782
Thank you.

29
00:02:11.979 --> 00:02:13.731
&gt;&gt; Lukas Ruebbelke: So
what I'm gonna do is I'm going to copy

30
00:02:13.731 --> 00:02:14.767
just some of this here.

31
00:02:19.190 --> 00:02:20.674
&gt;&gt; Lukas Ruebbelke: We'll
go into WidgetService.

32
00:02:35.954 --> 00:02:38.478
&gt;&gt; Lukas Ruebbelke: And the reason why
we're sending this BASE_URL here is

33
00:02:38.478 --> 00:02:41.010
because we have JSON server
running in the background.

34
00:02:43.210 --> 00:02:46.940
So hopefully this will
load a collection snap.

35
00:02:46.940 --> 00:02:48.923
I think I've probably actually
overwritten this hold on.

36
00:02:55.180 --> 00:02:56.917
&gt;&gt; Lukas Ruebbelke: Or
rather what I would bet,

37
00:02:59.841 --> 00:03:01.488
&gt;&gt; Lukas Ruebbelke: Is if I go to server.

38
00:03:04.905 --> 00:03:07.012
&gt;&gt; Lukas Ruebbelke: Mm-hm.

39
00:03:07.012 --> 00:03:08.478
Hold on.

40
00:03:10.943 --> 00:03:17.610
&gt;&gt; Lukas Ruebbelke: Let's go
to github.com/onehungrymind.

41
00:03:28.357 --> 00:03:29.526
&gt;&gt; Lukas Ruebbelke: Ha, it's in here.

42
00:03:29.526 --> 00:03:34.696
So you can pull this off of master
because I've been building off of start.

43
00:03:34.696 --> 00:03:35.770
This did not exist.

44
00:03:35.770 --> 00:03:36.639
I'll just copy this.

45
00:03:38.620 --> 00:03:40.318
And let's just paste this in.

46
00:03:51.753 --> 00:03:52.400
&gt;&gt; Lukas Ruebbelke: There we go.

47
00:03:52.400 --> 00:03:55.330
So this is one reason
why I love JSON Server.

48
00:03:55.330 --> 00:04:01.265
Put the JSON on and
you get a REST API, boom.

49
00:04:01.265 --> 00:04:05.504
Okay,
&gt;&gt; Lukas Ruebbelke: So

50
00:04:05.504 --> 00:04:11.218
now that I have stuff here,
let's go ahead and wire this up.

51
00:04:22.039 --> 00:04:23.506
&gt;&gt; Lukas Ruebbelke: Let's
split this horizontal.

52
00:04:25.373 --> 00:04:27.179
&gt;&gt; Lukas Ruebbelke: Actually
that might be disconcerting.

53
00:04:33.503 --> 00:04:36.632
&gt;&gt; Lukas Ruebbelke: What I'm gonna do is
I'm going to delete these widgets here and

54
00:04:36.632 --> 00:04:38.710
we're going to get them from the server.

55
00:04:40.360 --> 00:04:46.310
So the first thing that I need
to do is get the http module.

56
00:04:46.310 --> 00:04:51.526
So we'll go constructor(private http:).

57
00:04:56.847 --> 00:04:57.736
&gt;&gt; Lukas Ruebbelke: And there we have it.

58
00:05:00.721 --> 00:05:02.422
&gt;&gt; Lukas Ruebbelke: Then from here,

59
00:05:02.422 --> 00:05:06.540
loadWidgets,
&gt;&gt; Lukas Ruebbelke: And

60
00:05:06.540 --> 00:05:09.740
let's just do this inline real quick.

61
00:05:09.740 --> 00:05:15.018
So we'll go this.http.get

62
00:05:23.715 --> 00:05:24.723
&gt;&gt; Lukas Ruebbelke: BASE_URL

63
00:05:28.685 --> 00:05:30.731
&gt;&gt; Lukas Ruebbelke: map response

64
00:05:37.378 --> 00:05:39.981
&gt;&gt; Lukas Ruebbelke: Let's go subscribe,

65
00:05:39.981 --> 00:05:42.310
let's go widgets.

66
00:05:55.450 --> 00:05:59.650
&gt;&gt; Speaker 3: Lukas I think
you got your export statement.

67
00:05:59.650 --> 00:06:01.250
&gt;&gt; Lukas Ruebbelke: What's that?
&gt;&gt; Speaker 3: Exporting the class.

68
00:06:01.250 --> 00:06:01.930
Nevermind sorry.

69
00:06:03.130 --> 00:06:04.871
And then to be.

70
00:06:04.871 --> 00:06:09.950
&gt;&gt; Lukas Ruebbelke: Firstly, I'm working
on this much screen real estate.

71
00:06:09.950 --> 00:06:16.919
So Headers, Http, and
let us see what happens.

72
00:06:21.150 --> 00:06:23.032
&gt;&gt; Lukas Ruebbelke: If this works,
I'm totally eating a cookie.

73
00:06:29.040 --> 00:06:30.981
&gt;&gt; Lukas Ruebbelke: Well, how do we know?

74
00:06:30.981 --> 00:06:32.228
Because I'm not calling it.

75
00:06:32.228 --> 00:06:33.278
All right, let's go back here.

76
00:06:37.286 --> 00:06:41.150
&gt;&gt; Lukas Ruebbelke: So it would be
really handy if we actually called this.

77
00:06:41.150 --> 00:06:45.981
So let's go into our widgets.component.

78
00:06:51.547 --> 00:06:53.573
&gt;&gt; Lukas Ruebbelke: And
we'll just go widgetsService,

79
00:06:56.422 --> 00:06:56.950
&gt;&gt; Lukas Ruebbelke: loadWidgets.

80
00:06:57.990 --> 00:06:59.592
Okay, so now we're at least calling it.

81
00:07:06.804 --> 00:07:09.037
&gt;&gt; Lukas Ruebbelke: Look at that, okay.

82
00:07:13.249 --> 00:07:13.810
&gt;&gt; Lukas Ruebbelke: There we go.

83
00:07:14.880 --> 00:07:17.173
So we're getting something, cool?

84
00:07:19.991 --> 00:07:27.220
&gt;&gt; Lukas Ruebbelke: But we actually
want to surface this into our component.

85
00:07:29.840 --> 00:07:30.885
&gt;&gt; Lukas Ruebbelke: So let's go.

86
00:07:34.412 --> 00:07:40.279
&gt;&gt; Lukas Ruebbelke: Let's do this, In
our loadWidgets, we're going to actually

87
00:07:40.279 --> 00:07:45.716
return the results of this call,
which is an observable.

88
00:07:45.716 --> 00:07:48.754
And we're going to pull
off the subscribe block.

89
00:07:54.330 --> 00:07:56.381
&gt;&gt; Lukas Ruebbelke: And
let's actually see what happens,

90
00:08:01.819 --> 00:08:05.027
&gt;&gt; Lukas Ruebbelke: When we just dump this

91
00:08:05.027 --> 00:08:05.921
out.

92
00:08:05.921 --> 00:08:07.336
What this looks like.

93
00:08:12.867 --> 00:08:16.680
&gt;&gt; Lukas Ruebbelke: So you can see here,
that we're getting an observable.

94
00:08:18.680 --> 00:08:24.758
And it has some stuff on it,
&gt;&gt; Lukas Ruebbelke: That we can dig in,

95
00:08:24.758 --> 00:08:30.710
yadda yadda yadda,
not incredibly important.

96
00:08:30.710 --> 00:08:34.720
So at this point, we essentially
have this observable object,

97
00:08:34.720 --> 00:08:37.920
that like a promise,
is we cannot access directly.

98
00:08:39.820 --> 00:08:47.271
But what we can do is if we go back here,
like a promise,

99
00:08:57.953 --> 00:09:03.491
&gt;&gt; Lukas Ruebbelke: We can go here,

100
00:09:03.491 --> 00:09:08.181
subscribe.

101
00:09:09.560 --> 00:09:12.148
Event in this case, or whatever.

102
00:09:15.654 --> 00:09:17.140
&gt;&gt; Lukas Ruebbelke: Or result I think.

103
00:09:19.060 --> 00:09:22.610
And then go this.widgets = result.

104
00:09:35.197 --> 00:09:40.601
&gt;&gt; Lukas Ruebbelke: Yay,
now what's happening

105
00:09:40.601 --> 00:09:46.454
here is if you look at the JSON,

106
00:09:46.454 --> 00:09:49.167
so we go here.

107
00:09:53.167 --> 00:09:56.871
&gt;&gt; Lukas Ruebbelke: Notice that the image
is essentially just a regular image,

108
00:09:56.871 --> 00:10:01.550
like we're actually not able to resolve
that path like it doesn't exist.

109
00:10:02.580 --> 00:10:04.600
And so
I'll show you one more demonstration.

110
00:10:08.360 --> 00:10:11.620
If we go here,
&gt;&gt; Lukas Ruebbelke: We do this in

111
00:10:11.620 --> 00:10:12.540
the items service.

112
00:10:13.710 --> 00:10:18.060
And so this is where things
get super interesting,

113
00:10:18.060 --> 00:10:24.110
that it's not possible to do these
kind of things with a promise.

114
00:10:24.110 --> 00:10:26.460
&gt;&gt; Speaker 4: Can you break the line so
we can see it all?

115
00:10:26.460 --> 00:10:27.520
&gt;&gt; Lukas Ruebbelke: I'll break the line.

116
00:10:27.520 --> 00:10:29.980
&gt;&gt; Speaker 4: Yeah yeah [LAUGH].

117
00:10:33.263 --> 00:10:38.560
&gt;&gt; Lukas Ruebbelke: This is
rather a verbose line of code.

118
00:10:44.867 --> 00:10:47.571
&gt;&gt; Lukas Ruebbelke: I feel like maybe
I should just type this up by hand and

119
00:10:47.571 --> 00:10:48.378
talk about it.

120
00:10:51.730 --> 00:10:55.232
&gt;&gt; Lukas Ruebbelke: If I'm lucky,
this will actually work.

121
00:10:55.232 --> 00:11:00.680
So with the observables, you can

122
00:11:00.680 --> 00:11:06.120
stack your transformers on top of each
other as many times as you would like.

123
00:11:07.270 --> 00:11:13.150
So in this case, because our data is
passing back an image property but

124
00:11:13.150 --> 00:11:16.580
with no knowledge of the actual path
to where it lives on the server,

125
00:11:17.600 --> 00:11:20.300
we need to update this object.

126
00:11:21.720 --> 00:11:26.205
And so what we're getting now,

127
00:11:26.205 --> 00:11:31.470
and so every transformer or
operator returns something.

128
00:11:31.470 --> 00:11:34.660
So now we're getting essentially widgets.

129
00:11:34.660 --> 00:11:39.861
And then what we want to return

130
00:11:39.861 --> 00:11:45.063
is a new widgets object that is

131
00:11:45.063 --> 00:11:51.120
a clone of
&gt;&gt; Lukas Ruebbelke: Widgets.

132
00:11:51.120 --> 00:11:52.355
Hold on.

133
00:11:54.671 --> 00:12:01.589
&gt;&gt; Lukas Ruebbelke: Rather, hold on, hold
on, hold on, hold on, hold on, hold on.

134
00:12:01.589 --> 00:12:03.335
I'm getting a little bit ahead of myself.

135
00:12:12.568 --> 00:12:14.320
&gt;&gt; Lukas Ruebbelke: So
we're just gonna loop through here.

136
00:12:14.320 --> 00:12:20.830
So using widgets, .map so within this,
we're just going to return a new object.

137
00:12:20.830 --> 00:12:24.840
So, we're actually introducing yet
another level of recursion or iteration.

138
00:12:26.020 --> 00:12:34.020
Then we're going to go,
widget, okay back on track.

139
00:12:35.400 --> 00:12:41.081
Widget,
&gt;&gt; Lukas Ruebbelke: And

140
00:12:41.081 --> 00:12:43.910
the property we want to adjust is image.

141
00:12:46.820 --> 00:12:50.251
So we essentially want to
overwrite a new image property.

142
00:12:57.305 --> 00:13:02.527
&gt;&gt; Lukas Ruebbelke: And so
we're going to take our BASE_URL,

143
00:13:02.527 --> 00:13:05.630
or rather our IMG_URL.

144
00:13:05.630 --> 00:13:11.576
We'll break this down again, so
we can see this on one line.

145
00:13:18.059 --> 00:13:23.808
&gt;&gt; Lukas Ruebbelke: And,
&gt;&gt; Lukas Ruebbelke: The widget.image

146
00:13:23.808 --> 00:13:25.240
properties.

147
00:13:25.240 --> 00:13:27.077
So this is,

148
00:13:36.391 --> 00:13:37.761
&gt;&gt; Lukas Ruebbelke: What
am I missing here?

149
00:13:37.761 --> 00:13:43.332
Why is this guy not happy?

150
00:13:43.332 --> 00:13:46.970
Is it happy, is it happy,
is it happy, is it happy?

151
00:13:46.970 --> 00:13:50.265
All right, let's see if this works
first and then we will walk through it.

152
00:13:50.265 --> 00:13:53.196
Yes, it does.

153
00:13:53.196 --> 00:13:59.186
So,
&gt;&gt; Lukas Ruebbelke: That

154
00:13:59.186 --> 00:14:02.510
was clearly not my most
graceful swan dive.

155
00:14:05.280 --> 00:14:08.880
But, let's just talk about what I doing.

156
00:14:08.880 --> 00:14:12.980
So I'm getting the widgets, and really
all I need to do, is from the widgets,

157
00:14:12.980 --> 00:14:18.040
I need to run through and
create a new widgets array

158
00:14:18.040 --> 00:14:21.710
that has an updated image property.

159
00:14:23.260 --> 00:14:26.752
And so the way that I'm
doing that is within here,

160
00:14:26.752 --> 00:14:32.940
I'm calling widgets.map and
I'm mapping over the widget's collection.

161
00:14:32.940 --> 00:14:37.430
And I'm using object.assign to
create a new widget object,

162
00:14:37.430 --> 00:14:42.580
which is the result of taking
the original widget object,

163
00:14:42.580 --> 00:14:46.212
and we're overwriting
the image property with,

164
00:14:46.212 --> 00:14:52.760
essentially the image value on

165
00:14:52.760 --> 00:14:58.788
the JSON object with a prepended image
URL, and so, that's why that renders.

166
00:14:58.788 --> 00:15:03.003
And so essentially,
what we're doing is we're stacking this.

167
00:15:03.003 --> 00:15:06.190
Now, let me show you one
other thing real quick.

168
00:15:06.190 --> 00:15:11.320
Since we're talking about
the observerables and, I'm feeling feisty.

169
00:15:12.650 --> 00:15:17.630
You can stack these up as
much as you would like.

170
00:15:17.630 --> 00:15:21.698
The caveat is if you're going to use
an operator, just make sure to import it.

171
00:15:21.698 --> 00:15:24.744
And let's

172
00:15:24.744 --> 00:15:32.235
say,
&gt;&gt; Lukas Ruebbelke: We

173
00:15:32.235 --> 00:15:36.090
wanted only widgets with an ID of one.

174
00:15:38.570 --> 00:15:43.150
And so this is a really easy way to, let's
say you call the news and say give me all

175
00:15:43.150 --> 00:15:48.600
the users, but I want to only see
the users that are active, for instance.

176
00:15:48.600 --> 00:15:55.895
So this session might be,
let's go like this, widget.featured.

177
00:15:59.230 --> 00:16:04.578
&gt;&gt; Lukas Ruebbelke: In this case,
because this is Boolean,

178
00:16:04.578 --> 00:16:11.512
we should see one widget in
here if I did not break it.

179
00:16:16.472 --> 00:16:19.334
&gt;&gt; Lukas Ruebbelke: That's okay.

180
00:16:19.334 --> 00:16:20.300
Don't panic.

181
00:16:28.655 --> 00:16:31.929
&gt;&gt; Speaker 2: Maybe.

182
00:16:31.929 --> 00:16:33.460
&gt;&gt; Lukas Ruebbelke: Actually,
I'm wondering.

183
00:16:39.620 --> 00:16:41.815
&gt;&gt; Lukas Ruebbelke: Let's do.

184
00:16:44.665 --> 00:16:46.699
&gt;&gt; Lukas Ruebbelke: Intuitively,
I feel like this is right.

185
00:16:50.597 --> 00:16:52.091
&gt;&gt; Lukas Ruebbelke: I feel like
I'm doing something silly here.

186
00:16:52.091 --> 00:16:53.116
So, let's go here.

187
00:17:12.743 --> 00:17:13.894
&gt;&gt; Lukas Ruebbelke: You
just trace this out.

188
00:17:47.220 --> 00:17:50.799
&gt;&gt; Lukas Ruebbelke: So, we're actually
just getting a single array here.

189
00:17:50.799 --> 00:17:53.474
So I will abort this for a moment and

190
00:17:53.474 --> 00:17:59.030
let's just stop, step back and
talk about what's happening.

191
00:17:59.030 --> 00:18:02.960
In fact, what I even wanna do is let's
take off this second operator here.

192
00:18:04.330 --> 00:18:09.860
Let's go into our widgets list component

193
00:18:10.930 --> 00:18:17.310
and what I'm going to do is I'm
going to take this off, as well.

194
00:18:17.310 --> 00:18:19.983
And so I just want to take five minutes,

195
00:18:19.983 --> 00:18:23.712
cuz we're at 4:30 right now and
just go over this.

196
00:18:26.102 --> 00:18:26.939
&gt;&gt; Lukas Ruebbelke: Let's go back here.

197
00:18:33.460 --> 00:18:38.983
&gt;&gt; Lukas Ruebbelke: And so, we're
pulling in widgets from the REST API.

198
00:18:38.983 --> 00:18:40.757
So if I go back here, just to prove this.

199
00:18:43.176 --> 00:18:50.673
&gt;&gt; Lukas Ruebbelke: Let's go
remote you all, there we go.

200
00:18:55.263 --> 00:18:56.569
&gt;&gt; Lukas Ruebbelke: Refresh it.

201
00:18:57.850 --> 00:19:00.202
So you can see we're actually
pulling it in from the.

202
00:19:00.202 --> 00:19:05.253
Let's just cover the mechanisms
real quick and then I will give you

203
00:19:05.253 --> 00:19:11.040
a take home challenge, and then we will
chat in a Q&amp;A for as long as you want.

204
00:19:11.040 --> 00:19:14.365
In our widget service,

205
00:19:14.365 --> 00:19:20.355
what we've done is we've imported a CTP.

206
00:19:20.355 --> 00:19:27.490
We've then injected HTTP into our service
and then using the restful verbs.

207
00:19:27.490 --> 00:19:28.617
In this case, get.

208
00:19:28.617 --> 00:19:34.270
So, there's the simplest possible
rest call that you can make.

209
00:19:34.270 --> 00:19:38.872
We are returning the result of that.

210
00:19:38.872 --> 00:19:42.067
But first, we are mapping the results.

211
00:19:42.067 --> 00:19:47.397
So we're simply saying, take the results
and convert it into a JSON structure.

212
00:19:47.397 --> 00:19:54.370
Then within our component,
we consume it almost like a promise.

213
00:19:54.370 --> 00:19:58.127
But instead of then,
we are using .subscribe.

214
00:20:01.500 --> 00:20:06.566
&gt;&gt; Lukas Ruebbelke: So real quick,
let's go to see this in its entirety or

215
00:20:06.566 --> 00:20:08.150
a version of it.

216
00:20:08.150 --> 00:20:12.789
If we go to shared, item service.

217
00:20:16.450 --> 00:20:20.197
&gt;&gt; Lukas Ruebbelke: Here we can see
now where we're mapping the URLs.

218
00:20:23.270 --> 00:20:25.829
&gt;&gt; Lukas Ruebbelke: Then
to create an item.

219
00:20:25.829 --> 00:20:28.070
We're calling post.

220
00:20:28.070 --> 00:20:32.187
We're passing in the object and

221
00:20:32.187 --> 00:20:36.914
the header, and we're just mapping

222
00:20:36.914 --> 00:20:42.262
the response to JSON, and returning it.

223
00:20:42.262 --> 00:20:46.451
And for delete, similar thing.

224
00:20:46.451 --> 00:20:47.605
And then for update,

225
00:20:47.605 --> 00:20:52.400
we're having to do a little bit of string
manipulation the rip-off our image path.

226
00:20:52.400 --> 00:21:00.353
So then it goes back into our JSON
is just the image, but that aside.

227
00:21:03.175 --> 00:21:03.690
&gt;&gt; Lukas Ruebbelke: Here we go.

228
00:21:03.690 --> 00:21:10.057
So, we're actually deleting the image and
then just kind of setting it back.

229
00:21:10.057 --> 00:21:13.552
So this is pure black magic
just to make this work, but

230
00:21:13.552 --> 00:21:16.500
the main thing is we're calling patch.

231
00:21:16.500 --> 00:21:23.491
We could do put and converting to payload,
sending the header and

232
00:21:23.491 --> 00:21:29.351
all the header is is
Content-Type application JSON.

233
00:21:29.351 --> 00:21:33.190
So we're just setting, so that our
server knows what it's dealing with.

