WEBVTT

1
00:00:00.520 --> 00:00:03.500
&gt;&gt; Lukas Ruebbelke: Let's
go into the big picture.

2
00:00:03.500 --> 00:00:09.000
So, this is the equivalent of
a table of contents for Angular 2.

3
00:00:09.000 --> 00:00:12.140
And unfortunately Mark changed
his business model, so

4
00:00:12.140 --> 00:00:14.600
this joke doesn't work anymore, but

5
00:00:14.600 --> 00:00:19.580
this is kind of the, I tell people,
if you're going to come to the workshop.

6
00:00:19.580 --> 00:00:22.250
And you're gonna space out for
the entire workshop.

7
00:00:22.250 --> 00:00:25.080
So, your boss is making you come,
you don't wanna be here.

8
00:00:25.080 --> 00:00:30.460
Pay attention to this module, because then
when they say, how did the workshop go?

9
00:00:30.460 --> 00:00:34.590
You just have to recite what you heard
here, and you'll sound smart and

10
00:00:34.590 --> 00:00:38.609
like you're giving them a good
return on their investment.

11
00:00:40.020 --> 00:00:45.840
Also the reason why I've done, I've kind
of front loaded this particular module is,

12
00:00:45.840 --> 00:00:50.900
because when I get the slides that
this serves as a good reference point.

13
00:00:50.900 --> 00:00:55.380
So, first and
foremost let's talk about Angular 2,

14
00:00:55.380 --> 00:00:58.540
so this is why Angular
2 according to Lukas.

15
00:00:58.540 --> 00:01:01.280
These are the things that I really,
really.

16
00:01:01.280 --> 00:01:02.530
Like about Angular 2.

17
00:01:02.530 --> 00:01:08.180
So, I was doing Angular 1.x at 0.9,
so I don't know how

18
00:01:08.180 --> 00:01:11.900
many people remember, but there was
actually this really horrible yellow, and

19
00:01:11.900 --> 00:01:15.850
purple website when
Angular 1 first came out.

20
00:01:15.850 --> 00:01:19.550
And it actually wasn't even
Angular 1 at the time, it was 0.9.

21
00:01:19.550 --> 00:01:24.030
And there was this huge learning
curve over the last three, and

22
00:01:24.030 --> 00:01:29.270
four years of people learning how to
build large scale web applications

23
00:01:29.270 --> 00:01:34.080
in Angular without hurting somebody,
or putting somebody in the hospital.

24
00:01:34.080 --> 00:01:40.390
Well, some patterns begin to
emerge is we begin to learn.

25
00:01:40.390 --> 00:01:46.096
And the Angular 2 team, or the Angular
team said, let's take this best practices,

26
00:01:46.096 --> 00:01:50.390
and let's just make these
essentially the thing in Angular 2.

27
00:01:50.390 --> 00:01:55.150
So, the framework just encourages you to

28
00:01:55.150 --> 00:01:59.730
basically adopt the best practices
that we learn from Angular 1

29
00:01:59.730 --> 00:02:04.790
as well as we even pulled in best
practices from even other frameworks.

30
00:02:04.790 --> 00:02:08.140
So, the fact that we're
using the Angular CLI, well,

31
00:02:08.140 --> 00:02:13.140
that comes from a collaboration with
the Amber CLI, so super awesome.

32
00:02:13.140 --> 00:02:18.248
Even the component driven
architecture that we have right now

33
00:02:18.248 --> 00:02:24.420
with container components,
presentation components, and the way

34
00:02:24.420 --> 00:02:28.690
that we think about even data flow in our
application, well, that comes from react.

35
00:02:28.690 --> 00:02:32.400
And so, those ideas have been not
only imported into Angular 1.x,

36
00:02:32.400 --> 00:02:35.440
but they're just encouraged
by default in Angular 2.

37
00:02:35.440 --> 00:02:39.350
So, we do not have to go back and
relearn those lessons,

38
00:02:39.350 --> 00:02:44.530
because Angular 2 just kind of pushes
us gently in the right direction.

39
00:02:44.530 --> 00:02:51.110
As well as focusing on standards we
get the power in half the frame work.

40
00:02:51.110 --> 00:02:57.030
So, in Angular dot X, we had a lot
of things like NG Clip, NG Submit.

41
00:02:57.030 --> 00:03:02.550
NG mouse over, NG swipe left,
NG this, NG all the things.

42
00:03:02.550 --> 00:03:09.410
Well, in Angular 2, we have one completely
rewritten the eventing framework, or

43
00:03:09.410 --> 00:03:13.510
the way that we handle events, the binding
syntax, so that we actually can capture

44
00:03:13.510 --> 00:03:18.740
just the dom events that are emitted from
the browser and bind to those directly.

45
00:03:18.740 --> 00:03:23.780
So, the binding syntax has expanded,
but as a result,

46
00:03:23.780 --> 00:03:29.100
that leverages essentially the browser,
and essentially the standards that exist.

47
00:03:29.100 --> 00:03:33.520
And from there, the framework, itself,
the footprint is a lot smaller, but

48
00:03:33.520 --> 00:03:36.140
we get twice the power,
because we're just letting the browser,

49
00:03:36.140 --> 00:03:41.130
we're letting JavaScript, and essentially,
the native things do the work.

50
00:03:41.130 --> 00:03:43.440
Yes.
&gt;&gt; Speaker 2: So, question from Javier.

51
00:03:43.440 --> 00:03:47.980
Are we going to experience cryptic
error message as Angular 1 had?

52
00:03:47.980 --> 00:03:52.270
If so, are we going to learn some
patterns to identify those error

53
00:03:52.270 --> 00:03:55.740
messages?
&gt;&gt; Lukas Ruebbelke: So, the Angular team

54
00:03:55.740 --> 00:04:01.030
is, the answer is maybe.

55
00:04:01.030 --> 00:04:05.170
So, the Angular team has actually put a
lot of work into making the error messages

56
00:04:05.170 --> 00:04:07.950
in Angular 2 a lot better.

57
00:04:07.950 --> 00:04:14.310
So, one, by using TypeScript, that you
already get pretty good error messages.

58
00:04:14.310 --> 00:04:15.760
So, if you do something wrong.

59
00:04:15.760 --> 00:04:19.220
And TypeScript doesn't like it,
then it's going to catch that.

60
00:04:19.220 --> 00:04:24.200
Is well as they're most of the time,
I find them to be pretty helpful,

61
00:04:24.200 --> 00:04:25.430
the error messages.

62
00:04:25.430 --> 00:04:27.780
Where it gets totally wonky for

63
00:04:27.780 --> 00:04:32.061
disclosure is if you run into like
something that involves zone Js.

64
00:04:33.140 --> 00:04:38.050
And that is kind of a zone Js error,
I think, it's like, zone, zone,

65
00:04:38.050 --> 00:04:40.820
zone, zone, zone, zone, zone, zone,
zone, zone, zone all the way down.

66
00:04:40.820 --> 00:04:42.940
You're like,
I don't even know what happened here.

67
00:04:42.940 --> 00:04:47.610
So, the error messages are much better,
and

68
00:04:47.610 --> 00:04:51.700
we will get helpful tips on how to
handle those as I throw them in

69
00:04:51.700 --> 00:04:55.690
my demonstrations unintentionally,
because they will happen.

70
00:04:55.690 --> 00:04:57.370
So, their messages are better,

71
00:04:57.370 --> 00:04:59.760
it's something that they're
taking very seriously.

72
00:04:59.760 --> 00:05:01.558
They were super bad in Angular 1.

73
00:05:01.558 --> 00:05:05.080
Actually, they're better now,
but they were really,

74
00:05:05.080 --> 00:05:07.580
really, really bad two and
three years ago.

75
00:05:09.440 --> 00:05:12.660
So, dramatically improved
changed detection.

76
00:05:12.660 --> 00:05:15.640
So, this was actually, I think,
one of the biggest, I think,

77
00:05:15.640 --> 00:05:17.680
this was the Achilles heel in Angular 1.

78
00:05:17.680 --> 00:05:22.230
And I think, in most cases Angular
1 performance was not an issue, but

79
00:05:22.230 --> 00:05:26.250
it was an easy target,
and it was really easy to

80
00:05:26.250 --> 00:05:30.480
put Angular 1 changed detection in
to kind of a non-performant state.

81
00:05:31.510 --> 00:05:34.570
Well, they've completely redone
changed detection Angular 2,

82
00:05:34.570 --> 00:05:37.490
and it's much, much faster.

83
00:05:37.490 --> 00:05:40.610
And it's a lot simpler to
reason in the sense of that

84
00:05:40.610 --> 00:05:44.220
it just kind of works behind the scenes,
and you don't have to worry about it.

85
00:05:44.220 --> 00:05:49.230
But it's much faster, and
not only the change detach being faster,

86
00:05:49.230 --> 00:05:53.160
Angular 2 is really focused on speed and
performance.

87
00:05:53.160 --> 00:05:55.330
So, how fast the application loads.

88
00:05:55.330 --> 00:05:58.080
So, for instance,
with ahead of time compilation.

89
00:05:58.080 --> 00:06:01.950
That in a focus on basing
mobile that the applications,

90
00:06:01.950 --> 00:06:05.780
they want the footprint to be super
small and the apps will look like this,

91
00:06:05.780 --> 00:06:10.970
but as well as the application is running,
it continues to be performant.

92
00:06:10.970 --> 00:06:15.524
And so, there's a lot of cycles going
into how do we do large applications that

93
00:06:15.524 --> 00:06:16.149
are fast.

94
00:06:16.149 --> 00:06:18.280
And they perform well.

95
00:06:18.280 --> 00:06:24.120
When I say relentless this is pretty much
like something they've just spent hours,

96
00:06:24.120 --> 00:06:28.260
and hours, and hours on trying to
make this as fast as possible.

97
00:06:28.260 --> 00:06:30.870
So, this is my favorite
reactive mechanisms

98
00:06:30.870 --> 00:06:32.820
baked right into the frame work.

99
00:06:32.820 --> 00:06:37.700
And so, what I mean by this is when you
have, a piece of data and it changes.

100
00:06:37.700 --> 00:06:39.800
Well, how did you communicate that
communicate that to the rest of your

101
00:06:39.800 --> 00:06:40.650
application?

102
00:06:40.650 --> 00:06:43.090
Well, so that's a real challenge.

103
00:06:43.090 --> 00:06:46.890
Especially if you have a piece of data
that is shared by more than one thing.

104
00:06:46.890 --> 00:06:51.830
So, if you have two components with
a single piece of data that this changes,

105
00:06:51.830 --> 00:06:55.010
or one changes it here,
how do you communicate it over here?

106
00:06:55.010 --> 00:06:56.100
So.

107
00:06:56.100 --> 00:06:59.240
Angular 2 is built with absorbables, or

108
00:06:59.240 --> 00:07:02.100
full support absorbables,
which is completely awesome.

109
00:07:02.100 --> 00:07:05.160
And what this allows you to
do is when something changes,

110
00:07:05.160 --> 00:07:10.060
you can communicate that to your
application into your components in so

111
00:07:10.060 --> 00:07:13.300
much, even right into your templates, and

112
00:07:13.300 --> 00:07:16.280
the state changes go right into
your templates for it to render.

113
00:07:16.280 --> 00:07:21.010
So, we'll see some more of this tomorrow,
but also in the Reactive workshop.

114
00:07:22.020 --> 00:07:26.840
This is a game changer in terms of
minimizing state, code volume, and

115
00:07:26.840 --> 00:07:28.675
flow control within your application.

116
00:07:28.675 --> 00:07:32.821
And finally, team work.

117
00:07:32.821 --> 00:07:35.450
So, if you remember two,
three, four years ago,

118
00:07:35.450 --> 00:07:41.260
the rhetoric around frameworks
was really I want to say toxic.

119
00:07:41.260 --> 00:07:45.260
There was a lot of, this framework is
better than this one, this framework's

120
00:07:45.260 --> 00:07:49.130
dad is going to beat up your framework's
dad, and I think, it's not just helpful.

121
00:07:49.130 --> 00:07:54.100
And we're starting to see kind of this
convergence of people realizing that 'Hey,

122
00:07:54.100 --> 00:07:59.030
we can work on a framework, you can work
on a framework, we can share ideas and

123
00:07:59.030 --> 00:08:01.530
we can propel The web forward.

124
00:08:01.530 --> 00:08:04.540
Because when one framework wins,
I think, everybody wins.

125
00:08:04.540 --> 00:08:07.390
And more importantly it's not
about frameworks winning,

126
00:08:07.390 --> 00:08:08.930
it's about developers winning.

127
00:08:08.930 --> 00:08:12.730
And I think, to get into this whole
framework for this framework, I think,

128
00:08:12.730 --> 00:08:16.470
it's myopic,
that ultimately you want to write

129
00:08:16.470 --> 00:08:21.720
put tools in developers hands that help
them create things that matter, faster.

130
00:08:21.720 --> 00:08:28.130
And so, again, the Angular CLI came
from a collaboration with the Amber CLI.

131
00:08:28.130 --> 00:08:33.107
So, the thought of, honestly,
Angular and Amber team working together,

132
00:08:33.107 --> 00:08:34.834
three years ago, [SOUND].

133
00:08:34.834 --> 00:08:37.600
I mean,
that was a gang fight waiting to happen.

134
00:08:37.600 --> 00:08:40.580
Well, not really, but
it was a little tense, and

135
00:08:40.580 --> 00:08:45.480
there's a lot of, I think,
negative rhetoric in Twitter, whatever.

136
00:08:45.480 --> 00:08:50.020
But even the Angular team working
with the React team in talking, and

137
00:08:50.020 --> 00:08:52.230
sharing ideas, and
I think, it's fantastic.

