WEBVTT

1
00:00:00.170 --> 00:00:03.930
&gt;&gt; Lukas Ruebbelke: So component driven
architecture, we're going to really just

2
00:00:03.930 --> 00:00:07.872
talk about component driven
architecture from a high level.

3
00:00:07.872 --> 00:00:11.082
What that means.
&gt;&gt; Lukas Ruebbelke: The contract that we

4
00:00:11.082 --> 00:00:15.291
establish, the inputs and outputs,
container components, presentational

5
00:00:15.291 --> 00:00:19.450
components, and then we'll dig into
input and output just a little bit more.

6
00:00:22.570 --> 00:00:24.670
But first, story time.

7
00:00:24.670 --> 00:00:31.040
You can't really talk about component
driven architecture without

8
00:00:33.010 --> 00:00:38.360
at least talking about where we came from.

9
00:00:38.360 --> 00:00:43.020
And so those who are new to Angular,
especially Angular 2,

10
00:00:43.020 --> 00:00:48.750
this may come as a surprise, but
things weren't always this awesome.

11
00:00:50.700 --> 00:00:55.840
In fact, when we started Angular, this is
in like the 0.9 version, when I started.

12
00:00:56.960 --> 00:01:01.160
That my first experience
with Angular 2 and

13
00:01:02.160 --> 00:01:07.954
it blew everybody's mind, neatest
circus trick ever was interpolation.

14
00:01:07.954 --> 00:01:11.120
Basically two-way data binding and

15
00:01:11.120 --> 00:01:16.860
you could hook up with curly brackets,
and you simply had to set a property.

16
00:01:16.860 --> 00:01:18.300
So technically it's not
two-way data binding, but

17
00:01:18.300 --> 00:01:19.490
it's really string interpolation.

18
00:01:19.490 --> 00:01:25.220
You set a property on your JavaScript and
ta-da, it renders in your HTML.

19
00:01:25.220 --> 00:01:28.860
At the point, or at that point in time,
that was actually really hard to do.

20
00:01:30.420 --> 00:01:36.180
And two-way data binding showed up,
I had been doing flex for quite some time.

21
00:01:36.180 --> 00:01:42.020
And the concept of a view and a controller
really struck me as kind of a view model.

22
00:01:42.020 --> 00:01:45.650
It really resonated with me and so

23
00:01:47.190 --> 00:01:52.960
I started out and I built a tiny app
with a tiny view in a tiny controller.

24
00:01:52.960 --> 00:01:57.160
In fact, if you go to the angularjs.org
museum of natural history

25
00:01:58.710 --> 00:02:01.720
and you look at some of their displays,

26
00:02:02.790 --> 00:02:08.550
these are exactly the kind of apps
that are on the angularjs.org website,

27
00:02:08.550 --> 00:02:12.670
very simple, single page,
in the case of this.

28
00:02:12.670 --> 00:02:17.950
I realize they're examples, but these are
the kind of apps that we started writing,

29
00:02:17.950 --> 00:02:23.562
like, I didn't do two a day to mind
you with Ang model and curly braces.

30
00:02:23.562 --> 00:02:25.310
Half my work is done.

31
00:02:25.310 --> 00:02:28.110
Amazing.
And then you move into to do apps, etc.

32
00:02:28.110 --> 00:02:30.880
Well anyways, I was hooked.

33
00:02:30.880 --> 00:02:37.220
From there, I wanted to actually do things
and so the application grew, but because

34
00:02:37.220 --> 00:02:42.280
of that when my functionality grew,
so did my view, so did my controller.

35
00:02:42.280 --> 00:02:45.510
Well then the next logical step is,
I would like to do this for

36
00:02:45.510 --> 00:02:46.850
money, with people.

37
00:02:48.560 --> 00:02:50.880
And so this is when reality hits.

38
00:02:52.070 --> 00:02:57.440
You need to produce something that's not
trivial, and your view just keeps growing.

39
00:02:58.740 --> 00:03:00.800
Your controller keeps growing.

40
00:03:00.800 --> 00:03:04.310
And things become unmanageable.

41
00:03:04.310 --> 00:03:08.970
And it gets to the point where
you have a 1200-line controller.

42
00:03:08.970 --> 00:03:14.470
And you're now negotiating who can
work on what part of the controller.

43
00:03:14.470 --> 00:03:17.030
And this has happened, like okay.

44
00:03:17.030 --> 00:03:22.080
I'm working on up to line 200,
don't touch anything.

45
00:03:22.080 --> 00:03:24.520
And anything after that you can work on.

46
00:03:24.520 --> 00:03:28.210
Well, this is a real sad panda moment.

47
00:03:28.210 --> 00:03:30.110
And so
this is actually within the first year.

48
00:03:30.110 --> 00:03:33.250
People were running into
this problem in a big way.

49
00:03:33.250 --> 00:03:39.330
Is that angular taught you where to
put your pieces in the application,

50
00:03:39.330 --> 00:03:42.150
or essentially kind of your functionality,
but they didn't really tell you, or didn't

51
00:03:42.150 --> 00:03:46.500
really have a strong opinion at the time,
of how to actually compose them together.

52
00:03:47.710 --> 00:03:54.830
But out of that pain,
two main approaches emerged.

53
00:03:54.830 --> 00:03:59.870
And they both, very viable,
the first one is to

54
00:03:59.870 --> 00:04:04.170
break your application
up using named routes.

55
00:04:04.170 --> 00:04:06.800
So again, treating your
application as a state machine,

56
00:04:06.800 --> 00:04:12.550
you would break your application up
into named routes using UI View.

57
00:04:12.550 --> 00:04:16.680
And then you would break your template and
your controller up into smaller pieces,

58
00:04:16.680 --> 00:04:21.010
and kind of put them
Into specific pieces via

59
00:04:21.010 --> 00:04:25.520
essentially UI view or
the equivalent router outlet.

60
00:04:25.520 --> 00:04:28.400
But notice you still have your component,
or

61
00:04:28.400 --> 00:04:32.060
rather your template controller
pair in Angular one.

62
00:04:33.680 --> 00:04:37.900
The next version of this
was using directives.

63
00:04:37.900 --> 00:04:41.880
So people actually started to use their
directives to break up their applications.

64
00:04:41.880 --> 00:04:46.070
So you'd for instance have a side bar
directive where your side bar went went,

65
00:04:46.070 --> 00:04:47.600
content footer.

66
00:04:47.600 --> 00:04:52.760
But you're still organizing this
into component and template pairs.

67
00:04:52.760 --> 00:04:54.979
It's just again,
an organizational mechanism.

68
00:04:56.700 --> 00:05:00.170
Well, because this is where
the web standards were going and

69
00:05:00.170 --> 00:05:02.350
pretty much every other framework,

70
00:05:02.350 --> 00:05:07.270
Angular 2 said using directives as
components, that this is a good idea.

71
00:05:07.270 --> 00:05:09.188
Let's just make components the thing.

72
00:05:09.188 --> 00:05:14.970
And so, structure.

73
00:05:14.970 --> 00:05:19.130
We now have, essentially out of this,
a best practice around structure,

74
00:05:19.130 --> 00:05:23.870
which we have been talking about and
learning about for

75
00:05:23.870 --> 00:05:29.780
the entirety of this workshop but,
also this raises the question,

76
00:05:29.780 --> 00:05:33.630
how do we handle communication
between components?

77
00:05:34.750 --> 00:05:37.800
When we structure them, how do they talk,
how do they share information.

78
00:05:37.800 --> 00:05:41.820
And so this is where component
driven architecture comes in.

79
00:05:41.820 --> 00:05:46.730
So as we've components are small,
encapsulated pieces of software that we

80
00:05:46.730 --> 00:05:52.310
can reuse and make different contexts,
so even to a point where

81
00:05:52.310 --> 00:05:57.820
we had a review component, and we just
put it into our DOM via the selector.

82
00:05:57.820 --> 00:06:02.730
And then we turned around and
we loaded it via a route.

83
00:06:02.730 --> 00:06:07.050
Because that component is self contained,
we can have it in our DOM or

84
00:06:07.050 --> 00:06:09.470
in our application in
two different places,

85
00:06:09.470 --> 00:06:14.200
same component instantiating it more than
once in actually a totally different way.

86
00:06:15.890 --> 00:06:17.370
So Angular 2, by default,

87
00:06:17.370 --> 00:06:21.790
strongly encourages component
architecture by really making it, well,

88
00:06:21.790 --> 00:06:26.630
not only easy but necessary, to build out
every feature in the app as a component.

89
00:06:28.250 --> 00:06:34.290
And, more importantly, is that it allows
us to kind of encapsulate everything so

90
00:06:34.290 --> 00:06:38.090
that one, it's predictable,
but it's portable.

91
00:06:38.090 --> 00:06:43.150
And so when you are on a large
application, especially, so

92
00:06:43.150 --> 00:06:47.890
as Angular kind of grows up
within kind of large teams, or

93
00:06:47.890 --> 00:06:50.680
even small teams that need to share
functionality, or share functionality

94
00:06:50.680 --> 00:06:54.930
between teams, you can now pick up
components, and move them, and share them.

