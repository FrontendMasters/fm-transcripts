WEBVTT

1
00:00:00.770 --> 00:00:03.600
&gt;&gt; Lukas Ruebbelke: So
this is fairly straightforward, but

2
00:00:03.600 --> 00:00:08.470
now we are completing the puzzle or
full circle by

3
00:00:08.470 --> 00:00:12.660
allowing us to communicate and
persist changes to the server.

4
00:00:14.050 --> 00:00:17.530
And so what this really
consists of is the HTTP module.

5
00:00:18.990 --> 00:00:21.320
The rest methods that exist on it.

6
00:00:22.880 --> 00:00:27.400
We'll talk about observable.toPromise,
observable.subscribe,

7
00:00:27.400 --> 00:00:28.350
the difference between the two.

8
00:00:28.350 --> 00:00:28.980
So I know Chris B.

9
00:00:28.980 --> 00:00:32.360
had a question of promises
versus observables, and so

10
00:00:32.360 --> 00:00:35.030
I'll address that actually right now.

11
00:00:35.030 --> 00:00:39.230
Headers, and then I'll talk
about error handling briefly.

12
00:00:39.230 --> 00:00:42.580
And then we will just hack until
Mark kicks us out of here.

13
00:00:43.660 --> 00:00:44.178
How's that sound?

14
00:00:44.178 --> 00:00:46.432
All right.

15
00:00:50.638 --> 00:00:54.430
&gt;&gt; Lukas Ruebbelke: Two main things here,
well, actually three.

16
00:00:54.430 --> 00:00:56.050
Look, three bullet points, how convenient.

17
00:00:57.120 --> 00:01:03.830
So really the HTTP module that allows us
to do XHR calls, you can also do JSONP.

18
00:01:03.830 --> 00:01:10.050
I recommend there are some serious
security concerns about using JSONP.

19
00:01:10.050 --> 00:01:13.860
So I recommend not doing that if you can.

20
00:01:15.450 --> 00:01:21.010
But more importantly, the API
conveniently matches RESTful verbs.

21
00:01:21.010 --> 00:01:28.170
So, if you note the REST verbs,
get, put, post, patch, delete,

22
00:01:28.170 --> 00:01:33.220
then you are familiar with the methods
that exist on the HTTP module.

23
00:01:34.610 --> 00:01:39.240
And so, originally, I was, I come from
kind of a cold fusion background where you

24
00:01:39.240 --> 00:01:42.420
would actually define
a method on the server and

25
00:01:42.420 --> 00:01:44.290
then you would call it
as if it were local.

26
00:01:44.290 --> 00:01:48.180
So interestingly enough, this is kind
of where things are going back to.

27
00:01:48.180 --> 00:01:53.330
But when REST came out, I'm like,
I don't understand what's the,

28
00:01:53.330 --> 00:01:57.350
why can't I just call or
define a method on my server called

29
00:01:57.350 --> 00:02:02.680
get super items that would just give me
everything I need and return it back.

30
00:02:02.680 --> 00:02:04.680
It's like well no, no,
no, that doesn't work.

31
00:02:04.680 --> 00:02:11.070
Basically your URL has to match your
data structure and there's conventions.

32
00:02:11.070 --> 00:02:15.670
The upside is once I actually wrap
my mind around REST conventions,

33
00:02:15.670 --> 00:02:18.000
then you never have to
think about it again.

34
00:02:18.000 --> 00:02:22.040
It doesn't actually matter
what the back end is.

35
00:02:22.040 --> 00:02:27.281
So for me, I think when you
are moving from a server-side world,

36
00:02:27.281 --> 00:02:31.830
so .NET, Java, whatever,
a lot of times, the question is, well,

37
00:02:31.830 --> 00:02:36.930
how do we kind of move into
this single page application?

38
00:02:36.930 --> 00:02:38.730
What does that look like?

39
00:02:38.730 --> 00:02:43.180
My answer is to essentially
create a line down the middle or

40
00:02:43.180 --> 00:02:47.540
demarcate your application on a REST API.

41
00:02:47.540 --> 00:02:52.450
So your server handles your business
logic, exposes it via a REST API and

42
00:02:52.450 --> 00:02:57.480
you consume it in your web application,
and

43
00:02:57.480 --> 00:03:03.200
then when you need to basic persist
things, that goes back over the REST API.

44
00:03:03.200 --> 00:03:07.050
The beauty of that is, especially if you
have a legacy system, so I know a very

45
00:03:07.050 --> 00:03:13.830
large company that was invested heavily
in .NET and they wanted to move to Node.

46
00:03:13.830 --> 00:03:17.590
So, and I've actually seen this with cold
fusion as well, so the migration strategy

47
00:03:17.590 --> 00:03:24.960
is to convert your application to
a front and back end using a REST API.

48
00:03:24.960 --> 00:03:29.980
And then what they did in piecemeal is
actually replace the REST API on the .NET

49
00:03:29.980 --> 00:03:34.970
side with a REST API on node, and
the front end was none the wiser.

50
00:03:34.970 --> 00:03:38.905
So, that convention is really,
really handy and to the point of,

51
00:03:38.905 --> 00:03:41.999
I don't consider myself
a backend programmer, but

52
00:03:41.999 --> 00:03:44.970
if I'm getting a REST API,
I don't need to know.

53
00:03:44.970 --> 00:03:48.491
As well as, there's kind of some
conventions, and some guidance,

54
00:03:48.491 --> 00:03:50.689
you can make some assumptions about that.

55
00:03:50.689 --> 00:03:54.299
Now, the HTTP module,
when you make a call,

56
00:03:54.299 --> 00:04:00.000
it returns an observable, and
we will talk about that in just a moment.

57
00:04:02.250 --> 00:04:06.870
So as with the forms modules,
you need to import the HTTP module.

58
00:04:07.870 --> 00:04:11.736
Well, thankfully for the English CLI,
that did that for us.

59
00:04:11.736 --> 00:04:14.827
And, here we go,

60
00:04:14.827 --> 00:04:20.400
simply matches the REST verbs.

61
00:04:22.100 --> 00:04:24.497
So for instance,
hopefully this is in here.

62
00:04:27.671 --> 00:04:30.020
&gt;&gt; Lukas Ruebbelke: I find this
to be fairly conventional.

63
00:04:30.020 --> 00:04:33.770
Almost to the point that
somebody could generate

64
00:04:33.770 --> 00:04:37.010
a service that calls
a rest API very quickly.

65
00:04:37.010 --> 00:04:42.270
In fact, there are I think utilities out
there that says like, here's my endpoint.

66
00:04:42.270 --> 00:04:48.470
Go ahead and just generate my
calls to my REST API for me.

67
00:04:48.470 --> 00:04:52.255
So this is one case where
it's really easy to generate,

68
00:04:52.255 --> 00:04:57.341
essentially code to consumer REST API
because it's pretty much the same.

69
00:04:57.341 --> 00:05:01.292
But for instance, load items.

70
00:05:01.292 --> 00:05:04.992
Well we just call http.git,

71
00:05:04.992 --> 00:05:10.180
create http.post, update http.put.

72
00:05:10.180 --> 00:05:13.140
You can do patch if that's your thing.

73
00:05:13.140 --> 00:05:16.240
And to delete is, http delete.

74
00:05:17.480 --> 00:05:18.510
Pretty simple right?

75
00:05:18.510 --> 00:05:19.419
So if you know the verbs.

76
00:05:20.530 --> 00:05:29.140
Then you just call the verb on the HTTP
module, or the service in this case.

77
00:05:29.140 --> 00:05:33.423
Now, you will also notice that we,
on create and

78
00:05:33.423 --> 00:05:38.339
update specifically,
we're sending in the payload.

79
00:05:39.390 --> 00:05:43.010
We are converting this into
a string to go over the wire, so

80
00:05:43.010 --> 00:05:46.550
in Angular 1 it did a lot of this for
us under the hood.

81
00:05:46.550 --> 00:05:50.380
With Angular 2, the HTTP module
is little bit more bare bones

82
00:05:50.380 --> 00:05:54.800
to give us more control over how
we want to make these calls.

83
00:05:54.800 --> 00:05:56.980
But sending a payload over the wire,

84
00:05:56.980 --> 00:06:02.600
one turn into a string using JSON
stringify so essentially you serialize it.

85
00:06:02.600 --> 00:06:06.695
And you'll notice that we're
also sending in a header object.

86
00:06:09.176 --> 00:06:10.580
&gt;&gt; Lukas Ruebbelke: Which
we'll talk about as well.

87
00:06:10.580 --> 00:06:13.630
So this is just simply a way to tell

88
00:06:13.630 --> 00:06:16.500
the server what kind of content
type is coming over the wire.

89
00:06:18.430 --> 00:06:22.480
But again, back to the verbs.

90
00:06:22.480 --> 00:06:24.080
Does everybody see them?

91
00:06:24.080 --> 00:06:24.580
Pretty civil?

92
00:06:25.920 --> 00:06:27.870
Get, post, put, delete.

93
00:06:27.870 --> 00:06:30.090
That's CRUD right there.

94
00:06:31.100 --> 00:06:37.240
You'll also notice that what we
are returning is originally,

95
00:06:37.240 --> 00:06:42.440
or so what http dot whatever
method is unobservable, we're then

96
00:06:42.440 --> 00:06:48.430
using .map to take that response and
convert it into something we can use.

97
00:06:49.870 --> 00:06:51.010
So that's what map does.

98
00:06:51.010 --> 00:06:55.740
So just like a array.map is we're saying,
take this and for

99
00:06:55.740 --> 00:06:59.540
every item in here,
go ahead an convert it to this.

100
00:06:59.540 --> 00:07:02.950
So in this case we're saying,
take your response and

101
00:07:02.950 --> 00:07:06.700
instead call JSON on it and
then return it.

102
00:07:06.700 --> 00:07:08.910
So we're essentially
taking the payload and

103
00:07:08.910 --> 00:07:12.080
getting essentially a JSON
representation of it.

104
00:07:12.080 --> 00:07:15.370
And from here, we are calling to promise.

105
00:07:16.390 --> 00:07:21.820
What this does is, as you can imagine, it
returns a promise, and not an observable.

