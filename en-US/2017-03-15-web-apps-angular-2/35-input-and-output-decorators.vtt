WEBVTT

1
00:00:00.450 --> 00:00:02.760
&gt;&gt; Lukas: I wanna skip
to some code real quick.

2
00:00:02.760 --> 00:00:06.030
I feel like I've just
dropped a bomb on everybody.

3
00:00:07.460 --> 00:00:11.781
Let's see this actually in some code,
and let's talk through this.

4
00:00:11.781 --> 00:00:18.819
So we have an items list and
we have some binding here.

5
00:00:18.819 --> 00:00:21.479
So we have property binding and
we have event binding.

6
00:00:22.840 --> 00:00:29.370
But you'll notice that on the items,
we have now a custom

7
00:00:29.370 --> 00:00:35.150
property on the element that we're binding
to, and passing in the items collection.

8
00:00:36.210 --> 00:00:40.854
So that is an input, so
we're saying, item list,

9
00:00:40.854 --> 00:00:46.208
here is your items.
&gt;&gt; Lukas: Then, at the same time,

10
00:00:46.208 --> 00:00:51.720
we have two events essentially coming
out of this, selected and deleted.

11
00:00:51.720 --> 00:00:56.040
And from there,
we are handling those via a callback,

12
00:00:56.040 --> 00:00:58.750
just as if it were a normal DOM event.

13
00:00:58.750 --> 00:00:59.729
So does that make sense?

14
00:01:00.880 --> 00:01:02.180
And because of this,

15
00:01:02.180 --> 00:01:06.180
we have a really clearly defined
contract with our component.

16
00:01:06.180 --> 00:01:11.844
We know that this component
has an input of items and

17
00:01:11.844 --> 00:01:15.802
an output of selected and deleted.

18
00:01:15.802 --> 00:01:20.504
And so, this is, you can think of,
is an Angular one isolated scope,

19
00:01:20.504 --> 00:01:23.480
was essentially, the API for a directive.

20
00:01:24.550 --> 00:01:28.880
This is, in a sense, a contract or
an API for your component.

21
00:01:31.800 --> 00:01:37.000
And so how this works is we use this,
so remember when

22
00:01:37.000 --> 00:01:41.470
I said you can decorate a class, but you
can also decorate methods and properties?

23
00:01:41.470 --> 00:01:43.610
This is where this comes in.

24
00:01:43.610 --> 00:01:50.100
So using the @Input decorator,
we can decorate some value.

25
00:01:50.100 --> 00:01:52.820
So in this case,
it is literally some value.

26
00:01:52.820 --> 00:01:57.630
And then, in the parent template,
we can actually bind to

27
00:01:57.630 --> 00:02:02.190
that using property binding.

28
00:02:02.190 --> 00:02:06.020
And so
whatever value is on the parent template,

29
00:02:06.020 --> 00:02:08.910
it now gets passed into
the child template via input.

30
00:02:11.080 --> 00:02:15.540
And also, if you need to actually
alias that input into something else,

31
00:02:15.540 --> 00:02:17.460
you can do that as well.

32
00:02:17.460 --> 00:02:25.260
Just something to point out, and so, here,
&gt;&gt; Lukas: We have MyComponent.

33
00:02:25.260 --> 00:02:27.943
What is the input on this?

34
00:02:32.147 --> 00:02:33.059
&gt;&gt; Speaker 2: Greeting.
&gt;&gt; Speaker 3: Greeting.

35
00:02:33.059 --> 00:02:35.450
&gt;&gt; Lukas: Greeting, yes, hello, greetings.

36
00:02:36.930 --> 00:02:42.900
And so now, you can see here that
we have a property of Greeting and

37
00:02:42.900 --> 00:02:50.320
we are decorating it to say,
this property is an input.

38
00:02:50.320 --> 00:02:53.790
And then you can see here, in
the template we're just binding to that.

39
00:02:55.290 --> 00:02:57.720
So we're just treating it
like any other property,

40
00:02:57.720 --> 00:03:00.110
we're simply saying this is an input.

41
00:03:03.170 --> 00:03:07.840
In other words, this is now
a property that we can bind to,

42
00:03:07.840 --> 00:03:12.030
on from the parent component
within the template.

43
00:03:12.030 --> 00:03:18.060
So here you can see that we're
instantiating my-component, in the DOM.

44
00:03:18.060 --> 00:03:24.850
We have a property called greeting, and
we're binding to it and passing it in.

45
00:03:24.850 --> 00:03:30.070
And so now, whatever value is on the
parent component then gets passed in to

46
00:03:30.070 --> 00:03:31.370
the child component.

47
00:03:31.370 --> 00:03:35.620
So really, at the core, it's inputs.

48
00:03:35.620 --> 00:03:38.870
You're simply defining an avenue or
a channel for

49
00:03:38.870 --> 00:03:41.400
some data to come into your component.

50
00:03:42.830 --> 00:03:47.800
So output is essentially an EventEmitter.

51
00:03:47.800 --> 00:03:53.510
So just as you have DOM events, what we're
doing under the hood is we are creating

52
00:03:53.510 --> 00:03:56.430
our own custom events.

53
00:03:56.430 --> 00:04:04.230
And so what we do is we actually expose
an EventEmitter, that we can then call.

54
00:04:04.230 --> 00:04:10.080
So here we have showValue,
which is a new EventEmitter.

55
00:04:11.120 --> 00:04:18.610
And this is not quite right,
let me just adjust this, there we go.

56
00:04:20.690 --> 00:04:25.643
And then when we call,
show.Value Emit, so what this does is,

57
00:04:25.643 --> 00:04:28.230
it actually triggers the event.

58
00:04:29.240 --> 00:04:36.000
Then on the parent component, we can now
bind to some value as if it were an event.

59
00:04:36.000 --> 00:04:37.200
So let's see this in code.

60
00:04:38.970 --> 00:04:43.980
So what we have here is a greeter output.

61
00:04:45.780 --> 00:04:49.860
And so, because of this, greeter is what?

62
00:04:49.860 --> 00:04:53.037
It's essentially an output or an event,

63
00:04:53.037 --> 00:04:57.137
that we can trigger from
within our child component.

64
00:05:04.620 --> 00:05:06.430
&gt;&gt; Lukas: And so from here,

65
00:05:06.430 --> 00:05:11.030
we have greeter, it's a new EventEmitter.

66
00:05:12.250 --> 00:05:14.790
So now it has the ability to emit events.

67
00:05:14.790 --> 00:05:18.044
And then within greet, so on click, and

68
00:05:18.044 --> 00:05:22.161
somebody actually clicks
in the child component,

69
00:05:22.161 --> 00:05:26.376
it's calling the greet
method which then calls emit

70
00:05:26.376 --> 00:05:31.311
on our output.
&gt;&gt; Lukas: And

71
00:05:31.311 --> 00:05:36.165
then on the parent component,
because we have a greeter output,

72
00:05:36.165 --> 00:05:42.030
we can then capture that event when we
call Emit from the child component.

73
00:05:42.030 --> 00:05:47.060
And really essentially, delegate control
to the parent component and handle it.

74
00:05:48.230 --> 00:05:50.901
So now think about this,

75
00:05:50.901 --> 00:05:56.380
within our items feature,
we have a list of Items.

76
00:05:58.130 --> 00:06:02.710
So when we want to send an items into
the items list, well how do we do that?

77
00:06:04.220 --> 00:06:08.456
We create an input of items and
bind to it.

78
00:06:08.456 --> 00:06:12.000
Now when somebody selects an item,
we want to capture that.

79
00:06:13.160 --> 00:06:14.100
How do we do that?

80
00:06:14.100 --> 00:06:16.390
Well we create a selected output.

81
00:06:17.430 --> 00:06:22.130
Or if somebody actually wants to delete
an item, we definitely want to delegate

82
00:06:22.130 --> 00:06:25.960
that up to the parent that
actually owns the collection.

83
00:06:25.960 --> 00:06:26.850
How do we do that?

84
00:06:26.850 --> 00:06:29.520
Well, we create a deleted output.

85
00:06:30.950 --> 00:06:34.780
And so this kind of paves the way for
something that looks like this.

86
00:06:34.780 --> 00:06:40.580
You have a container component that
has all these smaller components,

87
00:06:40.580 --> 00:06:45.180
that are simply responsible for
presenting data and capturing input.

88
00:06:47.580 --> 00:06:52.380
Which leads us to a incredibly important

89
00:06:52.380 --> 00:06:57.290
concept of container and
presentational components.

90
00:06:57.290 --> 00:07:02.800
So the idea is that you have a high level
container component that's responsible for

91
00:07:02.800 --> 00:07:08.090
consuming data, and
handling any kind of logic

92
00:07:08.090 --> 00:07:13.130
for any kind of an event that is
surfaced from the child component.

93
00:07:13.130 --> 00:07:16.669
It captures that and then delegates
it to the appropriate service.

94
00:07:18.000 --> 00:07:19.510
The container components,

95
00:07:19.510 --> 00:07:24.110
they essentially know state and
how to persist these changes.

96
00:07:24.110 --> 00:07:26.510
On the other hand,
presentational components,

97
00:07:26.510 --> 00:07:32.500
they're fully defined by their bindings
in so much that they are stateless.

98
00:07:32.500 --> 00:07:35.120
They are simply responsible for

99
00:07:35.120 --> 00:07:40.770
binding data in and
sending data out via their bindings.

100
00:07:40.770 --> 00:07:44.310
And the idea is that you want to create
as few container components as possible.

101
00:07:44.310 --> 00:07:48.630
And you want as many presentational
components as possible,

102
00:07:48.630 --> 00:07:51.552
yes?
&gt;&gt; Speaker 2: Hans is making a request for

103
00:07:51.552 --> 00:07:53.630
you to expand on bindings?

104
00:07:54.850 --> 00:08:00.311
Property binding, event binding,

105
00:08:00.311 --> 00:08:05.031
and CSS style binding.
&gt;&gt; Lukas: So I tell you what,

106
00:08:05.031 --> 00:08:09.290
let me finish this module and
then I'll circle back around on that.

107
00:08:10.610 --> 00:08:13.120
So here we have
a presentational component.

108
00:08:15.480 --> 00:08:17.370
&gt;&gt; Lukas: And what do we have here?

109
00:08:17.370 --> 00:08:19.978
How many inputs do we have?
&gt;&gt; Speaker 2: One.

110
00:08:19.978 --> 00:08:22.776
&gt;&gt; Lukas: One, which is?

111
00:08:22.776 --> 00:08:23.584
&gt;&gt; Speaker 2: We have items,

112
00:08:23.584 --> 00:08:24.454
right?
&gt;&gt; Lukas: Items,

113
00:08:24.454 --> 00:08:27.300
how many outputs do we have?
&gt;&gt; Speaker 3: Two.

114
00:08:27.300 --> 00:08:30.900
&gt;&gt; Lukas: Which are?

115
00:08:30.900 --> 00:08:32.010
&gt;&gt; Speaker 2: Selected and deleted.

116
00:08:32.010 --> 00:08:33.119
&gt;&gt; Lukas: Yes now,

117
00:08:33.119 --> 00:08:37.011
here's the interesting thing.

118
00:08:37.011 --> 00:08:41.682
This is,
&gt;&gt; Lukas: The entirety

119
00:08:41.682 --> 00:08:45.330
of this component class, this is it.

120
00:08:47.150 --> 00:08:52.290
The reason being, because unless Angular
is broken, data's gonna come in,

121
00:08:52.290 --> 00:08:54.430
go right into its template.

122
00:08:54.430 --> 00:08:59.560
And when an event happens,
it's going to happen,

123
00:08:59.560 --> 00:09:04.350
essentially, right through the output,
back to the parent component.

124
00:09:06.230 --> 00:09:11.679
So, let me actually pull this up.
&gt;&gt; Lukas: Step in the code here.

125
00:09:27.662 --> 00:09:30.371
&gt;&gt; Lukas: So this is, in fact,

126
00:09:30.371 --> 00:09:32.783
a real component.

127
00:09:32.783 --> 00:09:38.077
And what you have here,
&gt;&gt; Lukas: If we go to items,

128
00:09:38.077 --> 00:09:40.180
this is what we're looking at.

129
00:09:40.180 --> 00:09:44.271
So obviously, visually it does things, but

130
00:09:44.271 --> 00:09:51.684
the component class itself,
&gt;&gt; Lukas: Is

131
00:09:51.684 --> 00:09:56.620
completely stateless.
&gt;&gt; Lukas: Yes?

132
00:09:56.620 --> 00:09:57.712
&gt;&gt; Speaker 2: Richard is asking,

133
00:09:57.712 --> 00:10:01.889
when I load a component with input and
output into router outlet, how do I bind

134
00:10:01.889 --> 00:10:08.763
those property event bindings?
&gt;&gt; Lukas: So,

135
00:10:08.763 --> 00:10:13.360
I believe that you can
prefill that data to do that.

136
00:10:13.360 --> 00:10:14.670
So generally, I do not.

137
00:10:15.700 --> 00:10:18.330
So container components do
not have inputs and outputs.

138
00:10:18.330 --> 00:10:19.450
So architecturally for

139
00:10:19.450 --> 00:10:24.240
me, is that I load container
components via the router outlet.

140
00:10:24.240 --> 00:10:27.800
And then from there I load
the presentational components within that.

141
00:10:27.800 --> 00:10:30.894
So I've never needed to
actually satisfy inputs and

142
00:10:30.894 --> 00:10:36.763
outputs via the router.
&gt;&gt; Lukas: Now I

143
00:10:36.763 --> 00:10:41.768
believe you can resolve data into
a component from the router,

144
00:10:41.768 --> 00:10:44.610
and I think you could do it that way.

145
00:10:44.610 --> 00:10:48.220
Cuz there may be a case where you
wanna have, kind of a dump component,

146
00:10:48.220 --> 00:10:53.060
if you will, loaded to the dump, but
possibly loaded into the router.

147
00:10:53.060 --> 00:10:56.920
But in all honesty, I do container
components via the router and

148
00:10:56.920 --> 00:11:00.226
then I use my presentational
components within that.

149
00:11:00.226 --> 00:11:04.114
So, I wish I had a more definitive answer,
but

150
00:11:04.114 --> 00:11:08.823
architecturally I've never
went that way yet, okay?

151
00:11:08.823 --> 00:11:14.357
So looking at this ItemsListComponent,

152
00:11:14.357 --> 00:11:19.580
here's a really important question.

153
00:11:22.740 --> 00:11:23.580
How do we test this?

154
00:11:26.120 --> 00:11:27.450
Let me ask you a better question.

155
00:11:27.450 --> 00:11:35.420
What do you test?
&gt;&gt; Lukas: There's no logic in here.

156
00:11:35.420 --> 00:11:41.540
It's stateless, it's completely and
simply a conduit for state and events.

157
00:11:44.210 --> 00:11:49.590
And so now, essentially,
we have a presentational component that

158
00:11:50.590 --> 00:11:55.630
doesn't do anything, other than
display whatever you put into it and

159
00:11:55.630 --> 00:11:58.360
emit any event that happens to it.

160
00:12:00.240 --> 00:12:04.842
And so for the most part, I'm sure
there are probably edge cases, but

161
00:12:04.842 --> 00:12:07.659
this is almost an unbreakable component.

162
00:12:07.659 --> 00:12:11.100
But you certainly don't have to worry
about any internal logic going wrong here.

163
00:12:12.640 --> 00:12:16.180
And so the biggest problem
with apps is complexity.

164
00:12:18.430 --> 00:12:21.790
The biggest cause of complexity is state.

165
00:12:21.790 --> 00:12:25.254
And so
what you wanna do is reduce your state

166
00:12:25.254 --> 00:12:30.080
footprint in your application,
and this is how we do this.

167
00:12:30.080 --> 00:12:33.650
And so this is why we're moving away
from MVC more into this component,

168
00:12:33.650 --> 00:12:37.420
unidirectional data flow architecture.

169
00:12:37.420 --> 00:12:38.968
Because we have a container component,

170
00:12:38.968 --> 00:12:43.220
that essentially will grab
the data that we need.

171
00:12:44.830 --> 00:12:50.987
And then from there, we pass it off
to these presentational components,

172
00:12:50.987 --> 00:12:55.371
that essentially just render
whatever you send it.

173
00:12:55.371 --> 00:12:56.838
It looks like you have a question for me,

174
00:12:56.838 --> 00:12:58.270
Tamara.
&gt;&gt; Speaker 2: I do,

175
00:12:59.270 --> 00:13:01.810
it's also being answered in the chat room.
&gt;&gt; Lukas: Okay.

176
00:13:01.810 --> 00:13:02.800
&gt;&gt; Speaker 2: Macy's asking,

177
00:13:02.800 --> 00:13:07.750
is this example when we click,
we emit selected item?

178
00:13:07.750 --> 00:13:09.700
But in parent component template,

179
00:13:09.700 --> 00:13:13.370
we fire select function with
a dollar event argument.

180
00:13:13.370 --> 00:13:17.525
Where is the item we clicked?
&gt;&gt; Lukas: So

181
00:13:17.525 --> 00:13:22.251
the item you click is,
if you go into the template, so

182
00:13:22.251 --> 00:13:27.622
notice we have a selected,
deleted, and featured output.

183
00:13:27.622 --> 00:13:30.386
So this is a good question,

184
00:13:30.386 --> 00:13:35.561
where is this happening pray tell,
I need to know?

185
00:13:35.561 --> 00:13:38.058
So now, if you look here,

186
00:13:44.665 --> 00:13:46.003
&gt;&gt; Lukas: When we click this,

187
00:13:46.003 --> 00:13:50.804
in my previous example, I actually
had click, that called the method,

188
00:13:50.804 --> 00:13:54.520
that then internally to
the component class.

189
00:13:54.520 --> 00:14:00.537
But from here, I'm just grabbing the
output and calling emit right on in it.

190
00:14:00.537 --> 00:14:07.367
So, what about delete?

191
00:14:07.367 --> 00:14:12.740
Same thing, deleted.emit, or feature,

192
00:14:12.740 --> 00:14:20.009
for the star if you want to set a feature,
Featured.emit.

193
00:14:20.009 --> 00:14:25.989
When you look here on ngFor, items,
well where's that coming from?

194
00:14:30.471 --> 00:14:32.817
&gt;&gt; Lukas: Here.

195
00:14:32.817 --> 00:14:39.666
And so we're saying this component has an
input of items, and it has three outputs.

196
00:14:39.666 --> 00:14:44.536
Or just think of outputs as custom events,

197
00:14:44.536 --> 00:14:49.812
that it can emit three
custom events that we can

198
00:14:49.812 --> 00:14:55.057
then listen to and,
&gt;&gt; Lukas: You

199
00:14:55.057 --> 00:14:58.910
can then listen to and capture.

200
00:14:58.910 --> 00:15:02.977
So if we go to the parent component, so

201
00:15:02.977 --> 00:15:09.081
remember the surface area
between a parent component and

202
00:15:09.081 --> 00:15:11.892
child component is what?

203
00:15:11.892 --> 00:15:13.570
The template, DOM.

204
00:15:16.230 --> 00:15:21.548
So we can expect that because we
have one input and three outputs,

205
00:15:21.548 --> 00:15:31.019
that in the parent component,
&gt;&gt; Lukas: What do we have here?

206
00:15:34.981 --> 00:15:36.165
&gt;&gt; Lukas: One input, so

207
00:15:36.165 --> 00:15:39.830
we're passing in items to this component.

208
00:15:41.400 --> 00:15:48.280
And we have three outputs or three events,
that we can then capture and

209
00:15:48.280 --> 00:15:54.759
respond to.
&gt;&gt; Lukas: So let's try another one,

210
00:15:54.759 --> 00:16:01.602
this component right here.
&gt;&gt; Lukas: How many inputs do we have?

211
00:16:01.602 --> 00:16:04.293
&gt;&gt; Speaker 2: One.

212
00:16:04.293 --> 00:16:05.738
&gt;&gt; Lukas: One, and

213
00:16:05.738 --> 00:16:07.575
what is it?

214
00:16:07.575 --> 00:16:08.690
&gt;&gt; Speaker 2: Item.
&gt;&gt; Lukas: Item.

215
00:16:08.690 --> 00:16:12.371
And so essentially we're saying, here,

216
00:16:12.371 --> 00:16:17.290
item-detail, set your
item to selectedItem.

217
00:16:17.290 --> 00:16:24.200
So as selectedItem is changed, so is
the item internal to the child component.

218
00:16:24.200 --> 00:16:25.635
And that's where the property
binding comes in.

219
00:16:25.635 --> 00:16:28.823
It's now on the parent component,

220
00:16:28.823 --> 00:16:34.666
whenever this changes then we
reflect it in the child component,

221
00:16:34.666 --> 00:16:39.887
as well as, we have a saved and
cancelled output or event.

222
00:16:39.887 --> 00:16:43.710
And so, let's just dial this into
the actual application here.

223
00:16:45.930 --> 00:16:47.450
So when I click this,

224
00:16:47.450 --> 00:16:52.420
right here, what is going to happen?
&gt;&gt; Speaker 3: Fill

225
00:16:52.420 --> 00:16:55.680
out the form on the right.
&gt;&gt; Lukas: Yes, but

226
00:16:55.680 --> 00:17:00.920
the first step is we're registering
click on the list component.

227
00:17:02.580 --> 00:17:07.630
From there I am using
this to call the selected

228
00:17:09.430 --> 00:17:11.570
event, I'm actually
omitting a selected event.

229
00:17:11.570 --> 00:17:16.510
So here when I do this, internally,

230
00:17:16.510 --> 00:17:21.666
I'm saying when I click this,
I'm saying selected.emit, here's my item.

231
00:17:21.666 --> 00:17:27.920
And then I'm capturing this, and
then in the component itself,

232
00:17:27.920 --> 00:17:35.643
let's go down here.
&gt;&gt; Lukas: I'm then calling it,

233
00:17:35.643 --> 00:17:39.121
I'm calling selectItem and
setting that item, whatever it is,

234
00:17:39.121 --> 00:17:44.052
to selectedItem.
&gt;&gt; Lukas: And then from there,

235
00:17:46.191 --> 00:17:48.947
&gt;&gt; Lukas: That selectedItem updates and

236
00:17:48.947 --> 00:17:52.660
it now re-renders the child component.

237
00:17:54.600 --> 00:17:56.010
Yes, exactly right, Hans.

238
00:17:57.570 --> 00:18:03.428
So now if we go here,
&gt;&gt; Lukas: And we do this, so

239
00:18:03.428 --> 00:18:08.450
just keep in mind these are,
this one especially is totally stateless.

240
00:18:09.950 --> 00:18:17.600
I click it, it creates a selected event,
I capture, I pull the item off of that.

241
00:18:17.600 --> 00:18:19.588
I've set it to selected item,

242
00:18:19.588 --> 00:18:23.190
which then uses that to
populate the detail component.

243
00:18:25.220 --> 00:18:29.028
And if I go here, new selected event,

244
00:18:29.028 --> 00:18:34.400
selected event, selected event,
selected event.

245
00:18:34.400 --> 00:18:40.672
Or, if I do for instance feature,
I can do this and

246
00:18:40.672 --> 00:18:45.830
then it does the featured
stuff that it does.

247
00:18:45.830 --> 00:18:49.090
So I actually, I set it to feature and

248
00:18:49.090 --> 00:18:52.330
it triggers essentially the child lock for
that.

249
00:18:52.330 --> 00:18:54.070
Or I can set this back.

250
00:18:55.810 --> 00:19:03.442
So the point is here,
that this list component is really just,

251
00:19:03.442 --> 00:19:07.909
it's there for presentation only.

252
00:19:07.909 --> 00:19:09.574
And so what we have is,

253
00:19:15.774 --> 00:19:18.017
&gt;&gt; Lukas: Really just a dumb component,

254
00:19:18.017 --> 00:19:24.200
that lives inside of a presentational,
or rather a container component.

255
00:19:24.200 --> 00:19:29.073
Which is, in this case, items.
&gt;&gt; Lukas: And so

256
00:19:29.073 --> 00:19:32.820
what we have here is a component
that's responsible for

257
00:19:32.820 --> 00:19:37.204
getting the items from the service,
setting the selected item,

258
00:19:37.204 --> 00:19:41.370
and actually managing state for
all of the child components.

