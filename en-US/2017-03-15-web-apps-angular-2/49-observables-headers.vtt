WEBVTT

1
00:00:00.420 --> 00:00:05.269
&gt;&gt; Lukas Ruebbelke: So
why would you use observable to promise?

2
00:00:05.269 --> 00:00:11.104
So one, diving into observables
can be super, super,

3
00:00:11.104 --> 00:00:16.330
super, super exclamation
point intimidating.

4
00:00:17.450 --> 00:00:22.950
That there is a lot going on and
it actually requires a mental

5
00:00:22.950 --> 00:00:29.770
shift a bit on how you think about the
world and how they do works as a whole.

6
00:00:29.770 --> 00:00:33.255
I'm kind of actually putting this lightly,

7
00:00:33.255 --> 00:00:38.584
it really actually took me months
to fully appreciate observables.

8
00:00:38.584 --> 00:00:43.840
And so they can be intimidating
especially coming from 1.x.

9
00:00:43.840 --> 00:00:48.090
Sometimes people find it easier
to just convert it into a promise

10
00:00:48.090 --> 00:00:50.300
to something that they are familiar with.

11
00:00:51.510 --> 00:00:53.960
And from there you treat
it just like a promise, and

12
00:00:53.960 --> 00:00:58.330
so if somebody were dipping their
toes into an Angular 2 application.

13
00:00:58.330 --> 00:01:00.400
And they did this for
the sake of getting something up and

14
00:01:00.400 --> 00:01:02.280
running, I would not begrudge them.

15
00:01:03.930 --> 00:01:08.510
As well as I think in terms
of making an HTTP call.

16
00:01:10.220 --> 00:01:16.224
Because there is only ever a single
response, it's not like a websocket,

17
00:01:16.224 --> 00:01:22.912
that most people if HTTP is the context
in which they're learning observables,.

18
00:01:22.912 --> 00:01:27.137
I think it's a really poor place to
really flex your muscles on observables,

19
00:01:27.137 --> 00:01:30.700
because it's ever only
returning a single value.

20
00:01:30.700 --> 00:01:34.101
And so
I believe it was Chris had a comment,

21
00:01:34.101 --> 00:01:38.459
of like why would I use
an observable versus a promise.

22
00:01:38.459 --> 00:01:42.677
Because it seems like a promise
would do the same thing,

23
00:01:42.677 --> 00:01:46.190
especially for an HTTP call,
to that I agree.

24
00:01:46.190 --> 00:01:51.269
You do have the ability to stack your
transformation operators as well as

25
00:01:51.269 --> 00:01:56.360
recover from errors more elegantly
when you're using the observable.

26
00:01:56.360 --> 00:02:01.470
So you have more control over the stream
of data, as opposed to an observable

27
00:02:01.470 --> 00:02:06.450
that once it resolves, that's it,
game over, that's as far as you go.

28
00:02:06.450 --> 00:02:09.870
And so I can actually I'll talk
about that in a bit more, but

29
00:02:09.870 --> 00:02:13.970
as a whole, when you're making
the HTTP call, really a promise and

30
00:02:13.970 --> 00:02:19.060
observable at face value
are pretty close together.

31
00:02:20.300 --> 00:02:24.777
But I recommend you must use toPromise,
but

32
00:02:24.777 --> 00:02:30.343
it's actually quite easy to
just use an observable and

33
00:02:30.343 --> 00:02:33.731
let's see what this looks like.

34
00:02:33.731 --> 00:02:39.818
So here,
http.get we're mapping the response and

35
00:02:39.818 --> 00:02:42.730
over turning a promise.

36
00:02:42.730 --> 00:02:48.180
So this is a classic,
as if we were doing Angular 1.x.

37
00:02:48.180 --> 00:02:53.860
So map toPromise, and just before
that we are mapping the response.

38
00:02:55.800 --> 00:02:59.487
And then in our component,

39
00:02:59.487 --> 00:03:04.457
we are calling load items then .then

40
00:03:04.457 --> 00:03:10.300
to resolve and handle that promise.

41
00:03:10.300 --> 00:03:15.146
So if anybody's done one x,
this is pretty much par for the course,

42
00:03:15.146 --> 00:03:16.938
this is modus operandi.

43
00:03:19.863 --> 00:03:26.760
&gt;&gt; Lukas Ruebbelke: So
let's look at observable.subscribe.

44
00:03:26.760 --> 00:03:33.518
So skipping my show notes real quick,
&gt;&gt; Lukas Ruebbelke: loadItems().

45
00:03:33.518 --> 00:03:38.057
In this case, we're not having to convert
it to a promise, we're just mapping it.

46
00:03:38.057 --> 00:03:41.093
So map, done.

47
00:03:44.209 --> 00:03:48.783
&gt;&gt; Lukas Ruebbelke: And then here,
instead of .then, it's .subscribe.

48
00:03:48.783 --> 00:03:55.034
So if you even put these on a scale,
and you weighed them by line.

49
00:03:55.034 --> 00:03:56.140
I think even just using

50
00:03:56.140 --> 00:04:01.522
observable.subscribe,
&gt;&gt; Lukas Ruebbelke: You

51
00:04:01.522 --> 00:04:05.869
have an extra line in there to
actually return it to a promise, but

52
00:04:05.869 --> 00:04:10.789
then how you handle it,
&gt;&gt; Lukas Ruebbelke: .then oop,

53
00:04:10.789 --> 00:04:14.072
get back here or .subscribe,

54
00:04:14.072 --> 00:04:19.007
and they're almost
identical at this point.

55
00:04:19.007 --> 00:04:25.521
So at which point, unless there is
a good reason to use two promise,

56
00:04:25.521 --> 00:04:30.451
actually here's an example,
or here is one case.

57
00:04:30.451 --> 00:04:36.013
That if you have an existing,
&gt;&gt; Lukas Ruebbelke: Maybe

58
00:04:36.013 --> 00:04:38.269
service that consumes a service.

59
00:04:38.269 --> 00:04:41.082
So if you have something like interop,

60
00:04:41.082 --> 00:04:47.180
where you are converting kind of this back
end service and the consuming service.

61
00:04:47.180 --> 00:04:50.566
So let's say you have a service
that is completely responsible for

62
00:04:50.566 --> 00:04:52.146
communicating to the server.

63
00:04:52.146 --> 00:04:56.559
Which is then like you have another
intermediary service on top of that.

64
00:04:57.850 --> 00:05:03.278
Then if that intermediary service,
for some reason expects promises

65
00:05:03.278 --> 00:05:08.341
then it may make sense to go ahead and
convert that into a promise.

66
00:05:08.341 --> 00:05:12.720
So you don't have to actually change or
effect downstream dependencies.

67
00:05:12.720 --> 00:05:18.864
But I had to think a little bit
about that specific case as a whole,

68
00:05:18.864 --> 00:05:24.390
I would just say bite the bullet and
run with .subscribe.

69
00:05:24.390 --> 00:05:28.160
Cuz on the surface,
it acts just like a promise and

70
00:05:28.160 --> 00:05:31.280
then it does 50 bazillion
other things in the process.

71
00:05:32.830 --> 00:05:37.425
All right, so headers,
let's talk about these real quick.

72
00:05:37.425 --> 00:05:41.872
We can have an optional parameter, and

73
00:05:41.872 --> 00:05:45.790
that is a RequestOptions object.

74
00:05:46.976 --> 00:05:51.440
And the RequestOptions object
has a headers property

75
00:05:51.440 --> 00:05:52.914
which is a Headers object.

76
00:05:52.914 --> 00:05:58.380
So RequestOptions, headers, and
then we use the Headers object to set

77
00:05:58.380 --> 00:06:05.280
additional parameters that your server
cares about, for instance Content-Type.

78
00:06:05.280 --> 00:06:08.750
Now let me just switch these around here.

79
00:06:11.690 --> 00:06:15.220
So this is a very verbose
way of doing this.

80
00:06:15.220 --> 00:06:19.624
I'm creating headers,
I'd like a Headers object.

81
00:06:19.624 --> 00:06:22.806
And then I'm creating
a RequestOptions object and

82
00:06:22.806 --> 00:06:27.050
then passing in the Headers
object that I just created.

83
00:06:27.050 --> 00:06:32.346
And then in my post and I'm passing
that in as that optional perimeter.

84
00:06:36.575 --> 00:06:42.924
&gt;&gt; Lukas Ruebbelke: In this case, because
really RequestOptions is just an object.

85
00:06:42.924 --> 00:06:45.822
I have went ahead and
just kind of shorthand,

86
00:06:45.822 --> 00:06:50.190
I'm just creating an object
with a Headers property on it.

87
00:06:50.190 --> 00:06:53.952
And creating a new Header's object and
I'm just passing that in.

88
00:06:53.952 --> 00:06:59.260
So again these are things that
people get religious about.

89
00:06:59.260 --> 00:07:04.045
I'm lazy and this is I don't think
any clear advantage from doing one to

90
00:07:04.045 --> 00:07:06.055
the other that I can think of.

91
00:07:09.556 --> 00:07:13.239
&gt;&gt; Lukas Ruebbelke: So what we're doing,
creating essentially an object that serves

92
00:07:13.239 --> 00:07:17.588
as a RequestOptions object and we're
passing it in as an optional parameter.

93
00:07:20.224 --> 00:07:22.043
&gt;&gt; Lukas Ruebbelke: And
the RequestOptions,

94
00:07:24.505 --> 00:07:25.372
&gt;&gt; Lukas Ruebbelke: Version.

95
00:07:25.372 --> 00:07:28.288
So error handling.

96
00:07:28.288 --> 00:07:34.490
Now children,
we should always handle errors.

97
00:07:34.490 --> 00:07:39.830
Okay, with that said, you'll notice in my
code, I'm actually not really doing that.

98
00:07:39.830 --> 00:07:45.595
So for demo code purposes, but
if anybody's life or money or

99
00:07:45.595 --> 00:07:51.370
livelihood depends on it,
we should always handle errors.

100
00:07:51.370 --> 00:07:53.584
So this is what this looks like,

101
00:07:53.584 --> 00:07:58.354
we use Observable.catch to process
the error at the service level.

102
00:07:58.354 --> 00:08:03.560
And Observable.throw to essentially
force that error further up the stream.

103
00:08:03.560 --> 00:08:06.370
Then we can use the error
handler in subscribe,

104
00:08:06.370 --> 00:08:10.870
and the subscribe method to respond
to that error at the component level.

105
00:08:10.870 --> 00:08:12.610
So let me back up a couple of slides.

106
00:08:14.240 --> 00:08:19.790
In your subscribe block, this actually
handles or takes three methods,

107
00:08:20.870 --> 00:08:25.980
onNext, onError and onComplete.

108
00:08:25.980 --> 00:08:30.300
So our onNext is when some data is
emitted, this will get call and

109
00:08:30.300 --> 00:08:33.583
continue to be called,
unlike a promise on air.

110
00:08:33.583 --> 00:08:37.234
So if something goes wrong,
it gets called or onComplete, so

111
00:08:37.234 --> 00:08:41.080
when the stream is just done,
then this gets called as well.

112
00:08:41.080 --> 00:08:47.870
So in promise terms,
this is next catch and finally.

113
00:08:47.870 --> 00:08:52.126
So kind of a similar thing,
so going back here.

114
00:09:01.679 --> 00:09:03.395
&gt;&gt; Lukas Ruebbelke: We're
using .map again, but

115
00:09:03.395 --> 00:09:05.644
in this case we're catching the error.

116
00:09:05.644 --> 00:09:08.296
So if something happens,
we want to capture it.

117
00:09:08.296 --> 00:09:11.936
Then using Observable.throw,

118
00:09:11.936 --> 00:09:17.139
we are then sending an error
back up the stream.

119
00:09:17.139 --> 00:09:21.353
So this will get returned in lieu of, or

120
00:09:21.353 --> 00:09:25.072
as the value for this observable.

121
00:09:25.072 --> 00:09:31.570
And then within our,
&gt;&gt; Lukas Ruebbelke: Hold on.

122
00:09:31.570 --> 00:09:38.382
Yes, then within our subscribe block, what
we have here is as the error handler or

123
00:09:38.382 --> 00:09:42.941
the second parameter,
we're calling handleError.

124
00:09:44.450 --> 00:09:46.971
And so what this could also look like,
cuz I saw this for a second and

125
00:09:46.971 --> 00:09:47.748
I did a double take.

126
00:09:50.411 --> 00:09:51.796
&gt;&gt; Lukas Ruebbelke: Is
we're kind of handling this

127
00:09:51.796 --> 00:09:55.036
inline,
&gt;&gt; Lukas Ruebbelke: But

128
00:09:55.036 --> 00:09:59.395
this could also also be for instance,
&gt;&gt; Lukas Ruebbelke: An old function

129
00:09:59.395 --> 00:09:59.911
here like,

130
00:10:02.725 --> 00:10:06.095
&gt;&gt; Lukas Ruebbelke:
this.doSomethingDrastic.

131
00:10:08.779 --> 00:10:11.330
&gt;&gt; Lukas Ruebbelke: So essentially
you just stack these methods up.

132
00:10:11.330 --> 00:10:14.701
So on next, onError and onComplete.

133
00:10:19.652 --> 00:10:21.773
&gt;&gt; Lukas Ruebbelke: And so
if we had an onComplete handler,

134
00:10:21.773 --> 00:10:23.390
what that would look like is.

135
00:10:25.350 --> 00:10:28.522
And keynote is an amazing IDE by the way.

136
00:10:28.522 --> 00:10:30.652
It's so good, I love it.

137
00:10:33.423 --> 00:10:34.934
&gt;&gt; Lukas Ruebbelke: Handle complete.

138
00:10:38.682 --> 00:10:39.240
&gt;&gt; Lukas Ruebbelke: Like this.

