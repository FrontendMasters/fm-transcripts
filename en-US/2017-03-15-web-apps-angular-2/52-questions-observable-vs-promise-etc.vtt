WEBVTT

1
00:00:00.410 --> 00:00:05.490
&gt;&gt; Audience 1: So, why do you prefer
using observables to promise?

2
00:00:08.030 --> 00:00:12.420
&gt;&gt; Lukas Ruebbelke: So, the question is,
why do I prefer observables to promise?

3
00:00:15.630 --> 00:00:22.750
The main reason being that a promise
can only ever return a single value.

4
00:00:24.410 --> 00:00:27.950
An observable can return
many values over time.

5
00:00:29.450 --> 00:00:30.480
So, are we hanging out tomorrow?

6
00:00:30.480 --> 00:00:31.540
Are you coming to the workshop?

7
00:00:33.720 --> 00:00:35.800
Just when I'm getting to the good part.

8
00:00:35.800 --> 00:00:38.300
I mean, we had some bread.

9
00:00:40.930 --> 00:00:43.340
Maybe some,
I don't know blooming onion or something.

10
00:00:44.600 --> 00:00:47.730
We finally had our dinner salad and
tomorrow we're gonna sit down and

11
00:00:47.730 --> 00:00:49.500
have steak and really get into it.

12
00:00:50.540 --> 00:00:53.610
But I think you can stream and

13
00:00:53.610 --> 00:00:58.710
if you can,
they I talk a lot about this but

14
00:01:00.320 --> 00:01:06.970
the idea is that with an observable, so
I almost have to, I'm like do I jump in.

15
00:01:06.970 --> 00:01:09.862
Do I [SOUND].

16
00:01:09.862 --> 00:01:11.835
Let me show you actually
one image real quick.

17
00:01:16.370 --> 00:01:17.569
&gt;&gt; Lukas Ruebbelke: All right,
I can't help myself.

18
00:01:19.170 --> 00:01:21.873
You guys gotta hear me talk about
observables for at least five minutes.

19
00:01:21.873 --> 00:01:28.326
I'll talk about this tomorrow, but,
&gt;&gt; Lukas Ruebbelke: I

20
00:01:28.326 --> 00:01:34.270
believe there's two really main problems,
or rather kind of two and

21
00:01:34.270 --> 00:01:41.150
a half problems when it comes to an
application or maintaining an application.

22
00:01:41.150 --> 00:01:46.710
So, you've heard me talk about
complexity as it involved state,

23
00:01:46.710 --> 00:01:48.290
control flow and code volume.

24
00:01:48.290 --> 00:01:52.260
So, this is actually a quote that comes
from a paper called Out of the Tar Pit.

25
00:01:53.920 --> 00:01:57.460
And I believe it by by Ben Moseley and
Peter Marks if I'm not mistaken,

26
00:01:57.460 --> 00:02:01.190
so this is something that
Victor Savkin shared with me.

27
00:02:01.190 --> 00:02:07.921
It's about a 65-page,
I think it's like a dissertation or

28
00:02:07.921 --> 00:02:14.030
it's some kind of very high
level PhD style white paper.

29
00:02:14.030 --> 00:02:15.520
But, I recommend everybody read it.

30
00:02:15.520 --> 00:02:18.790
I read it like three or
four times just to wrap my mind around.

31
00:02:18.790 --> 00:02:24.070
The main this is probably the first 20
pages is really where you're gonna get

32
00:02:24.070 --> 00:02:25.280
the most value.

33
00:02:25.280 --> 00:02:29.910
Cuz then, it kinda veers off
into kind of academia, etcetera.

34
00:02:29.910 --> 00:02:33.110
But he makes this, they make this
really good quote at the beginning.

35
00:02:33.110 --> 00:02:37.090
In that the biggest problem with
applications is complexity.

36
00:02:38.150 --> 00:02:44.640
Complexity is the result of state,
and as a result of state management,

37
00:02:44.640 --> 00:02:48.500
we have control flow issues, and
code volume, that comes from that.

38
00:02:49.860 --> 00:02:55.990
So now,
with that as the context I believe the two

39
00:02:55.990 --> 00:02:59.570
biggest problems that we have especially
in an angular app in this context is one.

40
00:02:59.570 --> 00:03:03.220
How do we manage state and
how do we communicate that?

41
00:03:03.220 --> 00:03:08.010
So when something changes, how do we tell
the rest of our application that hey,

42
00:03:08.010 --> 00:03:08.690
this thing happened?

43
00:03:10.570 --> 00:03:15.820
And so, we've actually had two very
classy design patterns to address this.

44
00:03:16.820 --> 00:03:21.580
So for state or managing state,
we have the iterator pattern.

45
00:03:21.580 --> 00:03:26.324
And so, what this does is it
allows us to take a collection and

46
00:03:26.324 --> 00:03:29.487
incrementally pull values off of it, so

47
00:03:29.487 --> 00:03:34.338
we're gonna say next, next,
next, next until it's done.

48
00:03:34.338 --> 00:03:40.410
At the same time, we have a pattern that's
very well suited for communication.

49
00:03:40.410 --> 00:03:42.100
That's the observer pattern.

50
00:03:42.100 --> 00:03:46.070
So, any time some
indeterminate event happens,

51
00:03:46.070 --> 00:03:50.170
that we can communicate
that to our consumers.

52
00:03:50.170 --> 00:03:51.760
That, hey, this thing happens.

53
00:03:54.110 --> 00:04:00.140
So, by combining these two patterns
together, we have an observable.

54
00:04:00.140 --> 00:04:04.128
Which allows us to
communicate state over time.

55
00:04:06.968 --> 00:04:10.896
&gt;&gt; Lukas Ruebbelke: And so this is
what an observable stream looks like.

56
00:04:13.397 --> 00:04:19.763
&gt;&gt; Lukas Ruebbelke: We have time and
as things happen along this timeline.

57
00:04:19.763 --> 00:04:24.916
We can perform calculations and
either drive new state,

58
00:04:24.916 --> 00:04:30.630
receive new state, or
transform state as we move along.

59
00:04:30.630 --> 00:04:34.080
So along our timeline, we have events and

60
00:04:34.080 --> 00:04:38.549
then with each event,
we have the opportunity to do something.

61
00:04:39.650 --> 00:04:44.560
So which http, I think

62
00:04:44.560 --> 00:04:49.300
people kind of have a superficial
understanding of observables,

63
00:04:49.300 --> 00:04:54.190
because they've done .subscribe and
that's as far as it goes.

64
00:04:54.190 --> 00:04:58.290
Because an http call is really just
a single value, you call a server,

65
00:04:58.290 --> 00:05:03.310
you get something back and
then set a rather a restful call.

66
00:05:03.310 --> 00:05:06.166
But for instance in the case of like,
let's say fire base or

67
00:05:06.166 --> 00:05:12.010
a real-time web socket,
that streaming data overtime.

68
00:05:13.480 --> 00:05:16.190
Well, this is something that
is actually you're getting

69
00:05:16.190 --> 00:05:18.780
additional values as they come in.

70
00:05:18.780 --> 00:05:20.520
This is where you would want to,

71
00:05:20.520 --> 00:05:24.569
or this is where a promise would
just not be appropriate at all,

72
00:05:24.569 --> 00:05:30.200
because a promise can only ever
return a single value and that's it.

73
00:05:30.200 --> 00:05:34.190
But, what happens if there is another
value, or another value, or another value?

74
00:05:34.190 --> 00:05:37.300
And so, this is where observables come in.

75
00:05:37.300 --> 00:05:41.460
So, observables are very well
suited to handle a single value,

76
00:05:41.460 --> 00:05:43.580
just like a promise.

77
00:05:43.580 --> 00:05:51.740
But, they're also suited to not only
handle one value but multiple values.

78
00:05:51.740 --> 00:05:54.450
So, that is essentially kind of the deal.

79
00:05:54.450 --> 00:05:56.729
If you can think of, a promise is

80
00:05:57.970 --> 00:06:01.460
I think of it as a courier in
a sense of like, there's a letter.

81
00:06:02.520 --> 00:06:04.540
I'm going to deliver it and I'm done.

82
00:06:05.830 --> 00:06:07.210
Mission accomplished.

83
00:06:07.210 --> 00:06:12.023
Whereas, an observable is more like
a telephone connection like you're

84
00:06:12.023 --> 00:06:15.526
actually on the phone until
you're ready to hang up.

85
00:06:15.526 --> 00:06:18.390
So, you can continue to
communicate these events.

86
00:06:18.390 --> 00:06:20.980
now where this gets,
to me I think the best

87
00:06:20.980 --> 00:06:25.910
application to learn wrap your mind around
this observable stream is from UI events.,

88
00:06:27.120 --> 00:06:32.260
Because whether you we notice it or
not, we are always admitting and

89
00:06:32.260 --> 00:06:38.250
streaming dom events as we
interact with our application So

90
00:06:38.250 --> 00:06:42.656
for instance, if we are dragging
our mouse across the screen,

91
00:06:42.656 --> 00:06:46.240
we are emitting.

92
00:06:46.240 --> 00:06:48.600
They're happening whether
we're capturing them or not.

93
00:06:49.750 --> 00:06:51.580
And so now, using observable,

94
00:06:51.580 --> 00:06:56.870
we can actually capture those things and
Do something with them.

95
00:06:56.870 --> 00:07:01.900
And so, not only do we have the ability
to consume multiple values, but

96
00:07:01.900 --> 00:07:06.560
those values are completely encapsulated
within the observable stream.

97
00:07:08.410 --> 00:07:13.980
And because the observable
operators are pure in nature,

98
00:07:13.980 --> 00:07:19.640
meaning no side effects, that you can
then stack them on top of each other.

99
00:07:19.640 --> 00:07:24.000
And essentially, perform as many
transformations as you want,

100
00:07:25.580 --> 00:07:28.680
until you get to the end of the road,
your subscribe block.

101
00:07:28.680 --> 00:07:31.550
So, subscribe,
dot subscribe is kind of the equivalent

102
00:07:31.550 --> 00:07:34.100
of really just invoking
the observable streams.

103
00:07:34.100 --> 00:07:37.860
So, think of it like this,
I'm actually calling this and

104
00:07:37.860 --> 00:07:41.312
I wanted to now, essentially,
flip the switch, and

105
00:07:41.312 --> 00:07:45.249
it's on is that once your data
gets to your subscribe block.

106
00:07:45.249 --> 00:07:49.731
It should be in it's final form and
Ready to dump, or rather,

107
00:07:49.731 --> 00:07:53.710
ready to consume and
put right into your application.

108
00:07:55.490 --> 00:08:00.530
So, when I started with observables,
kind of the very

109
00:08:00.530 --> 00:08:05.260
first naive attempts Is I would say okay,
give me this data from this server,

110
00:08:06.440 --> 00:08:09.000
and then within my subscribe block
is I would start fiddling with it.

111
00:08:10.150 --> 00:08:12.680
And okay, now, I need to loop over, and
I need to do this, and I need to do this,

112
00:08:12.680 --> 00:08:14.010
and I need to do this.

113
00:08:14.010 --> 00:08:17.340
And then I realize,
I can actually do like .map,

114
00:08:17.340 --> 00:08:19.200
like an additional map, like .filter.

115
00:08:19.200 --> 00:08:21.700
You know da, da, da.

116
00:08:21.700 --> 00:08:24.850
And by the time it gets to my
subscribe block it should be exactly

117
00:08:24.850 --> 00:08:25.730
in the shape that I need.

118
00:08:25.730 --> 00:08:29.450
And so being able to actually stack
these operators on top of each other.

119
00:08:29.450 --> 00:08:32.319
And so this is for, especially
doing like data dashboard stuff.

120
00:08:33.450 --> 00:08:37.140
Or like payroll or you know, whatever,
any kind of data transformation.

121
00:08:37.140 --> 00:08:40.350
Here's this raw collection, and
at the bottom of the stream,

122
00:08:40.350 --> 00:08:44.890
because we've stacked these
essentially peer functions

123
00:08:46.200 --> 00:08:50.880
on top of each other is really
just totally functional.

124
00:08:50.880 --> 00:08:52.370
Peer, no side effects.

125
00:08:52.370 --> 00:08:53.700
It just kind of flows
through this funnel and

126
00:08:53.700 --> 00:08:56.880
when it gets to the bottom it's
now in the shape that you want.

127
00:08:56.880 --> 00:09:01.860
And so we're kind of familiar with this,
if you use for instance like low dash,

128
00:09:01.860 --> 00:09:05.240
you can actually chain kind of these
higher order functions together.

129
00:09:05.240 --> 00:09:09.180
I want a filter, I want a pick,
I want a map, I want to do these things.

130
00:09:09.180 --> 00:09:10.710
And at the end of it I
wanna get that value.

131
00:09:10.710 --> 00:09:14.610
So this is a similar
experience with observables,

132
00:09:14.610 --> 00:09:18.040
so that we can now like stack
these things on top of each other.

133
00:09:21.710 --> 00:09:23.046
Does that make sense?

134
00:09:23.046 --> 00:09:23.771
&gt;&gt; Audience 1: Yes.

135
00:09:23.771 --> 00:09:26.135
&gt;&gt; Lukas Ruebbelke: I think it will make
more sense if you can actually stream

136
00:09:26.135 --> 00:09:28.599
tomorrow, it's my most hopeful
desire that you can, but

137
00:09:28.599 --> 00:09:30.627
that is kind of the five
minute elevator pitch.

138
00:09:35.397 --> 00:09:37.660
&gt;&gt; Lukas Ruebbelke: When I think of
observable, it's just a single event.

139
00:09:37.660 --> 00:09:40.680
I think of promises as a single event.

140
00:09:40.680 --> 00:09:47.980
I think observables as really an entire,
almost a warship if you will.

141
00:09:47.980 --> 00:09:50.050
That it does tons of stuff.

142
00:09:51.410 --> 00:09:55.235
And It's almost like an event
state platform unto itself.

143
00:09:58.819 --> 00:10:02.280
&gt;&gt; Lukas Ruebbelke: Next question.

144
00:10:02.280 --> 00:10:05.730
Shall we talk about love,
life, heartbreak?

145
00:10:09.684 --> 00:10:11.874
&gt;&gt; Lukas Ruebbelke: Bro you're not
sneaking out, I can totally see you,

146
00:10:11.874 --> 00:10:13.370
you're right on the front row.

147
00:10:13.370 --> 00:10:14.960
This, you're busted.

148
00:10:16.170 --> 00:10:16.670
Yes.

149
00:10:18.090 --> 00:10:19.500
&gt;&gt; Audience 2: Sorry to keep
you on observables here,

150
00:10:19.500 --> 00:10:20.530
but-
&gt;&gt; Lukas Ruebbelke: Love to

151
00:10:20.530 --> 00:10:21.530
talk about them.

152
00:10:21.530 --> 00:10:23.460
&gt;&gt; Audience 2: In your example with
the API you called the get widget.

153
00:10:25.370 --> 00:10:27.640
You're only going to call
that once from your app,

154
00:10:27.640 --> 00:10:28.950
how is that different from a promise?

155
00:10:28.950 --> 00:10:31.570
You're going to get your response,
what's the difference?

156
00:10:31.570 --> 00:10:34.230
&gt;&gt; Lukas Ruebbelke: So in this case for
consuming the value it's exactly the same.

157
00:10:34.230 --> 00:10:34.730
&gt;&gt; Audience 2: Okay.

158
00:10:35.900 --> 00:10:36.890
&gt;&gt; Lukas Ruebbelke: We see-
&gt;&gt; Audience 2: I get what you said when

159
00:10:36.890 --> 00:10:41.660
you say we're observing events
that are coming from our template.

160
00:10:41.660 --> 00:10:43.570
&gt;&gt; Lukas Ruebbelke: Let me see if
I can show you a better example.

161
00:10:43.570 --> 00:10:45.543
So skipping through all these slides,
don't peek.

162
00:10:48.881 --> 00:10:50.220
&gt;&gt; Lukas Ruebbelke: So here's an example.

163
00:10:50.220 --> 00:10:54.520
So I think really UI events, when you
start to actually think of it from

164
00:10:54.520 --> 00:11:00.780
the interface first, then I think
stream start to make a lot more sense.

165
00:11:02.330 --> 00:11:06.250
Now, what if you actually wanted to
capture like an event click, and

166
00:11:06.250 --> 00:11:08.940
resolve for do something in
resolved that is a promise.

167
00:11:08.940 --> 00:11:11.763
Like, once you do it once that's it,

168
00:11:11.763 --> 00:11:16.993
you can only resolve a promise one
time but with an observable stream.

169
00:11:18.930 --> 00:11:23.930
&gt;&gt; Lukas Ruebbelke: That you can capture
clicks over and over and over and over.

170
00:11:25.320 --> 00:11:29.290
And so that's where every time
I click I want to reevaluate or

171
00:11:29.290 --> 00:11:30.990
recalculate some value.

172
00:11:33.470 --> 00:11:38.140
And so clicks, mouse events, mouse moves,

173
00:11:38.140 --> 00:11:43.390
anything where something can continue to
emit events, that's where observables.

174
00:11:43.390 --> 00:11:48.930
So I think maybe a better way of thinking
it of it is that well like promises and

175
00:11:48.930 --> 00:11:50.040
observables like.

176
00:11:50.040 --> 00:11:52.250
In the term of an ACP call,
like they're exactly the same.

177
00:11:52.250 --> 00:11:54.220
Well, in most cases, yes.

178
00:11:55.380 --> 00:11:56.560
But, pound for

179
00:11:56.560 --> 00:12:00.470
pound, there's nothing a promise can do,
that a observable can't do better.

180
00:12:01.760 --> 00:12:04.150
So, that alone is, like,
I'm just going to use observable.

181
00:12:04.150 --> 00:12:09.140
And even then, as I thinks it's,
one, as it returns an observable,

182
00:12:09.140 --> 00:12:12.090
to actually get it back to a promise you
actually have to do that extra step.

183
00:12:13.190 --> 00:12:17.940
But you have essentially resolving
a single value from an async call,

184
00:12:17.940 --> 00:12:19.310
that's boring.

185
00:12:20.580 --> 00:12:26.150
But where it's really cool is for
things that continue to emit values.

186
00:12:26.150 --> 00:12:26.650
&gt;&gt; Audience 2: Sure.

187
00:12:28.290 --> 00:12:31.630
&gt;&gt; Lukas Ruebbelke: And when we actually
talk about redux in an application store,

188
00:12:33.010 --> 00:12:35.780
that as you change things
in application store,

189
00:12:35.780 --> 00:12:38.350
it continues to actually
emit those values.

190
00:12:38.350 --> 00:12:42.350
So I think the idea is making an async
call, they're kind of pound for pound.

191
00:12:42.350 --> 00:12:47.210
It's like yeah, in this isolated example,
but what about the other 10,000 things

192
00:12:47.210 --> 00:12:51.350
that you can use observable string for.

193
00:12:51.350 --> 00:12:51.890
Yes.

194
00:12:51.890 --> 00:12:55.140
&gt;&gt; Audience 3: Chris had a question
several minutes ago now.

195
00:12:55.140 --> 00:12:55.980
&gt;&gt; Lukas Ruebbelke: Sorry Chris.

196
00:12:55.980 --> 00:12:58.040
&gt;&gt; Audience 3: No, that's my fault.

197
00:12:58.040 --> 00:13:02.140
I don't want to display a part of my page
until I get my data from the service, and

198
00:13:02.140 --> 00:13:04.510
I don't wanna use resolve.

199
00:13:04.510 --> 00:13:08.980
Currently, just using an is-loaded
Boolean, and set it to True once I get my

200
00:13:08.980 --> 00:13:15.460
data, and wrap my def in an NGF is-loaded,
is there a better approach to this?

201
00:13:20.620 --> 00:13:22.916
&gt;&gt; Lukas Ruebbelke: So,
you can leave it essentially undefined.

202
00:13:24.982 --> 00:13:28.268
&gt;&gt; Lukas Ruebbelke: Initially, and
then just check to see is this,

203
00:13:28.268 --> 00:13:30.360
does this have a value?

204
00:13:30.360 --> 00:13:31.290
So let's actually try that out.

205
00:13:33.010 --> 00:13:34.120
Let's see what happens.

206
00:13:37.150 --> 00:13:38.840
I hope I don't get embarrassed.

207
00:13:38.840 --> 00:13:39.350
Oops.

208
00:13:39.350 --> 00:13:40.340
There we go.

209
00:13:40.340 --> 00:13:41.140
Tweet deck.

210
00:13:41.140 --> 00:13:42.050
I'm getting embarrassed.

211
00:13:44.410 --> 00:13:51.320
All right.
So, let's go to our widget's component.

212
00:13:51.320 --> 00:13:57.570
And so, you can see here,
initially, widget does not exist.

213
00:13:57.570 --> 00:13:59.110
Or rather, it's undefined.

214
00:13:59.110 --> 00:14:00.130
Like, it's defined.

215
00:14:01.370 --> 00:14:02.530
But there's certainly no value.

216
00:14:02.530 --> 00:14:07.450
So it's there, but
it's of value undefined.

217
00:14:07.450 --> 00:14:08.850
I think that's correct.

218
00:14:11.130 --> 00:14:11.818
So if we go here.

219
00:14:18.426 --> 00:14:19.645
&gt;&gt; Lukas Ruebbelke: ngIF.

220
00:14:39.829 --> 00:14:41.340
&gt;&gt; Lukas Ruebbelke: This may or
may not work.

221
00:14:41.340 --> 00:14:44.015
I don't know if I've tried this.

222
00:14:46.406 --> 00:14:50.030
&gt;&gt; Lukas Ruebbelke: ngIF widgets,
widgets, widgets, [INAUDIBLE].

223
00:14:50.030 --> 00:14:52.355
Did I break this?

224
00:14:59.850 --> 00:15:06.239
&gt;&gt; Lukas Ruebbelke: Can't have multiple
template bindings with All right.

225
00:15:06.239 --> 00:15:07.754
Don't be mad.

226
00:15:36.702 --> 00:15:42.350
&gt;&gt; Lukas Ruebbelke: Yeah,
all right let's refresh this.

227
00:15:42.350 --> 00:15:46.256
it's already there let me
just clear my cache maybe.

228
00:15:46.256 --> 00:15:49.770
There's probably a way in chrome
to actually slow this down.

229
00:15:49.770 --> 00:15:54.346
&gt;&gt; Audience 4: You can put a pause in
your service call before it returns it's

230
00:15:54.346 --> 00:15:55.050
values.

231
00:15:55.050 --> 00:15:55.560
&gt;&gt; Lukas Ruebbelke: A pause.

232
00:15:55.560 --> 00:15:58.040
&gt;&gt; Audience 4: Like in your mapping or
something.

233
00:15:58.040 --> 00:16:02.510
&gt;&gt; Lukas Ruebbelke: I could.
&gt;&gt; Audience 3: [INAUDIBLE]

234
00:16:02.510 --> 00:16:05.000
&gt;&gt; Lukas Ruebbelke: I could do a time out.

235
00:16:05.000 --> 00:16:08.840
[SOUND]

236
00:16:08.840 --> 00:16:14.440
Let's do it here.

237
00:16:16.770 --> 00:16:17.440
So timeout.

238
00:16:17.440 --> 00:16:25.290
No, I just wanna use the native timeout.

239
00:16:28.130 --> 00:16:29.490
&gt;&gt; Audience 2: Ooh, setTimeout.

240
00:16:29.490 --> 00:16:30.810
&gt;&gt; Lukas Ruebbelke: Is it setTimeout?

241
00:16:30.810 --> 00:16:31.310
&gt;&gt; Audience 2: Yep.

242
00:16:35.240 --> 00:16:38.629
&gt;&gt; Lukas Ruebbelke: Yeah, okay.

243
00:16:38.629 --> 00:16:41.550
So is it function then interval?

244
00:16:41.550 --> 00:16:42.980
&gt;&gt; Audience 2: Yes.
&gt;&gt; Audience 3: Yes.

245
00:16:42.980 --> 00:16:45.594
&gt;&gt; Lukas Ruebbelke: Okay,
yes, that was so forceful.

246
00:17:03.625 --> 00:17:04.706
&gt;&gt; Lukas Ruebbelke: So, is it okay?

247
00:17:04.706 --> 00:17:08.780
All right, let's see, I don't know,

248
00:17:08.780 --> 00:17:13.326
Yolo One, two, three, boom.

249
00:17:13.326 --> 00:17:19.860
All right, so all I've simply done,
in this case,

250
00:17:19.860 --> 00:17:25.380
is ngf will evaluate to false
if something is undefined.

251
00:17:27.490 --> 00:17:33.200
And so here,
I'm just saying if it exists, show it.

252
00:17:33.200 --> 00:17:36.310
And if not show not here, I think

253
00:17:36.310 --> 00:17:39.809
there is a throttle in Chrome dev tools
&gt;&gt; Audience 4: Yeah Chris that I

254
00:17:39.809 --> 00:17:41.750
mentioned that
&gt;&gt; Lukas Ruebbelke: So

255
00:17:41.750 --> 00:17:43.580
that's another way to do that.

256
00:17:44.580 --> 00:17:47.490
Yes, next question
&gt;&gt; Audience 4: Dale is asking you

257
00:17:47.490 --> 00:17:52.380
subscribe to an observable,
that implies an unsubscribe Are there

258
00:17:52.380 --> 00:17:56.860
garbage collection leakage issues
associated with cleaning up observables?

259
00:17:56.860 --> 00:17:58.330
&gt;&gt; Lukas Ruebbelke: So
I don't wanna answer that question,

260
00:17:58.330 --> 00:17:59.900
cuz I think it's stupid.

261
00:17:59.900 --> 00:18:01.161
But what question do you have?

262
00:18:01.161 --> 00:18:01.856
&gt;&gt; Multiple: [LAUGH]
&gt;&gt; Audience 3: I have a different

263
00:18:01.856 --> 00:18:02.357
question.
&gt;&gt; Lukas Ruebbelke: No, what?

264
00:18:02.357 --> 00:18:02.858
&gt;&gt; Audience 3: No, back to the-

265
00:18:02.858 --> 00:18:03.358
&gt;&gt; Lukas Ruebbelke: Is that a different

266
00:18:03.358 --> 00:18:05.025
Dale?
&gt;&gt; Audience 3: No back to this other

267
00:18:05.025 --> 00:18:09.996
question, of showing something else,
you said you could put it

268
00:18:09.996 --> 00:18:12.764
inside the directive
&gt;&gt; Lukas Ruebbelke: Okay just to clarify

269
00:18:12.764 --> 00:18:14.550
that was a different Dale,
I thought that was you

270
00:18:14.550 --> 00:18:15.060
&gt;&gt; Audience 3: It was [LAUGH]

271
00:18:15.060 --> 00:18:16.020
&gt;&gt; Lukas Ruebbelke: Okay that was

272
00:18:16.020 --> 00:18:19.660
definitely stupid
&gt;&gt; Audience 3: Okay thank you,

273
00:18:19.660 --> 00:18:22.830
inside the template when
you have a new component

274
00:18:22.830 --> 00:18:25.550
you could put the value in there and
it would get replaced.

275
00:18:25.550 --> 00:18:28.750
Wouldn't that be a place
to put your wait for

276
00:18:28.750 --> 00:18:30.540
it
&gt;&gt; Lukas Ruebbelke: I'm

277
00:18:30.540 --> 00:18:31.230
sorry one more time?

278
00:18:32.290 --> 00:18:34.265
&gt;&gt; Audience 3: Well when we do a selector.

279
00:18:34.265 --> 00:18:34.870
&gt;&gt; Lukas Ruebbelke: Mm-hm?

280
00:18:34.870 --> 00:18:37.720
&gt;&gt; Audience 3: And
we could put a loading inside of that,

281
00:18:37.720 --> 00:18:40.920
wouldn't that be a way to address-
&gt;&gt; Audience 5: Just like

282
00:18:40.920 --> 00:18:43.768
&gt;&gt; Lukas Ruebbelke: Right, so it only,

283
00:18:43.768 --> 00:18:49.450
actually, interesting question.

284
00:18:49.450 --> 00:18:53.740
I've only ever tried to do
this on the main component.

285
00:18:55.660 --> 00:18:56.730
Well, okay.

286
00:18:56.730 --> 00:18:58.297
Yes so if we do that.

287
00:19:10.528 --> 00:19:12.127
&gt;&gt; Lukas Ruebbelke: Let's see.

288
00:19:16.280 --> 00:19:17.400
&gt;&gt; Lukas Ruebbelke: So, no.
That actually, that one worked,

289
00:19:17.400 --> 00:19:21.540
because the widget's list
component will load immediately,

290
00:19:22.850 --> 00:19:27.160
and then the actual data for
the list will actually happen.

291
00:19:28.890 --> 00:19:30.160
Like so asynchronous point.

292
00:19:30.160 --> 00:19:34.840
So the problem is that your
component will render and

293
00:19:34.840 --> 00:19:38.830
then as things come in it will
attempt to render those as well.

294
00:19:38.830 --> 00:19:41.620
&gt;&gt; Audience 3: So it really only works at
the app level while you're bootstrapping.

295
00:19:41.620 --> 00:19:45.210
&gt;&gt; Lukas Ruebbelke: Yeah, because there's
no angle to actually do anything.

296
00:19:45.210 --> 00:19:47.320
So it actually does
truly have to bootstrap.

297
00:19:47.320 --> 00:19:49.910
&gt;&gt; Audience 5: Okay,
is that along the lines of ngCloak?

298
00:19:52.540 --> 00:19:55.140
&gt;&gt; Lukas Ruebbelke: Yes, but
that kind of solves that problem.

299
00:19:55.140 --> 00:19:56.560
The fact that-
&gt;&gt; Audience 5: Sometimes-

300
00:19:56.560 --> 00:19:57.616
&gt;&gt; Lukas Ruebbelke: Nothing renders

301
00:19:57.616 --> 00:19:58.902
until it's there.

302
00:20:01.330 --> 00:20:05.254
&gt;&gt; Lukas Ruebbelke: Also, because any
type of DOM manipulation is wrapped in

303
00:20:05.254 --> 00:20:06.570
the template tag.

304
00:20:07.760 --> 00:20:12.400
And so that is the browser wanna ask
you render a template tag until it's

305
00:20:12.400 --> 00:20:15.660
been initialized or until there's
actually content inside of it.

306
00:20:16.980 --> 00:20:18.660
Or they're some event in
which template tag will be.

307
00:20:18.660 --> 00:20:21.400
I didn't even know it's
a real tag until actually

308
00:20:21.400 --> 00:20:22.850
I was reading the doc some template.

309
00:20:22.850 --> 00:20:24.070
What is this?

310
00:20:24.070 --> 00:20:26.450
It actually has to do with
the web component spec.

311
00:20:26.450 --> 00:20:30.630
And it doesn't, there's a certain point

312
00:20:30.630 --> 00:20:34.220
at which it will not actually render
until other things are in place.

313
00:20:34.220 --> 00:20:41.443
So that solves that kind of
flash of unstyled data sorts.

314
00:20:41.443 --> 00:20:46.760
Okay, I feel like there was another
question about unsubscribe.

315
00:20:46.760 --> 00:20:48.815
Dale, would you like to ask that now?

316
00:20:48.815 --> 00:20:52.190
&gt;&gt; Multiple: [LAUGH]
&gt;&gt; Audience 3: Well if is was just

317
00:20:52.190 --> 00:20:57.320
a question of you subscribe to things
like a lot of times in Java if you

318
00:20:57.320 --> 00:21:01.730
subscribe as a listener to things,
then you can end up leaking things because

319
00:21:01.730 --> 00:21:05.470
somebody holds a reference,
does crap with a weak reference.

320
00:21:05.470 --> 00:21:08.820
So I'm wondering if you start
subscribing to a lot of things,

321
00:21:08.820 --> 00:21:10.320
if you pin things in memory?

322
00:21:12.890 --> 00:21:16.460
&gt;&gt; Lukas Ruebbelke: You can, so
this is what onDestroy is for.

323
00:21:17.880 --> 00:21:21.060
That when you call that subscribe,

324
00:21:21.060 --> 00:21:26.390
that actually returns essentially
an unsubscribe method.

325
00:21:27.760 --> 00:21:29.890
If you actually look at the source
code in the constructor,

326
00:21:29.890 --> 00:21:36.730
that's what it actually returns is
a method to basically kill itself.

327
00:21:36.730 --> 00:21:40.230
And that's where you would use onDestroy.

328
00:21:40.230 --> 00:21:44.500
Essentially unsubscribe from
anything including observables.

329
00:21:44.500 --> 00:21:47.200
&gt;&gt; Audience 3: So
if I do a service call, subscribe to it,

330
00:21:47.200 --> 00:21:50.700
then I should do the onDestroy thing and
unsubscribe.

331
00:21:50.700 --> 00:21:52.696
&gt;&gt; Lukas Ruebbelke: That would
be a very boy scout thing to do.

332
00:21:52.696 --> 00:21:57.120
&gt;&gt; Audience 3: So it's not necessary?

333
00:21:57.120 --> 00:22:00.370
&gt;&gt; Lukas Ruebbelke: So browsers in
Angular 2 is very, very performant and

334
00:22:00.370 --> 00:22:02.690
it's very good about cleaning that up.

335
00:22:02.690 --> 00:22:03.960
&gt;&gt; Audience 3: Okay.

336
00:22:03.960 --> 00:22:06.970
&gt;&gt; Lukas Ruebbelke: So
you're probably going to be okay.

337
00:22:09.090 --> 00:22:17.360
But at the same time you're not going to
offend anybody by being a good neighbor.

338
00:22:20.870 --> 00:22:26.865
&gt;&gt; Lukas Ruebbelke: Next, if there are no
more questions in the next three seconds,

339
00:22:26.865 --> 00:22:29.780
I'm kicking everybody out.

340
00:22:29.780 --> 00:22:34.910
Yes?
&gt;&gt; Audience 1: How is the API set up

341
00:22:34.910 --> 00:22:37.705
on the local What 3000 or whatever it is.

342
00:22:37.705 --> 00:22:38.480
&gt;&gt; Lukas Ruebbelke: Uh-huh.

343
00:22:38.480 --> 00:22:41.346
&gt;&gt; Audience 1: How is that set up
cuz our site is running on 2200.

344
00:22:41.346 --> 00:22:43.063
&gt;&gt; Lukas Ruebbelke: Uh-huh.

345
00:22:43.063 --> 00:22:49.070
&gt;&gt; Audience 1: So
somehow we can get to the json through.

346
00:22:49.070 --> 00:22:53.590
&gt;&gt; Lukas Ruebbelke: So that's actually
json server which is just another mpm

347
00:22:53.590 --> 00:22:54.348
module.

348
00:22:54.348 --> 00:22:59.010
&gt;&gt; Audience 1: And somehow [INAUDIBLE]
&gt;&gt; Audience 4: If you look in the kit,

349
00:22:59.010 --> 00:23:01.840
there's a server directory
at the same level source.

350
00:23:01.840 --> 00:23:02.560
&gt;&gt; Audience 1: Yeah I see it.

351
00:23:02.560 --> 00:23:03.120
&gt;&gt; Audience 4: Okay.
&gt;&gt; Audience 1: But

352
00:23:03.120 --> 00:23:03.970
how does-
&gt;&gt; Audience 4: So-

353
00:23:03.970 --> 00:23:04.530
&gt;&gt; Audience 1: It know

354
00:23:05.770 --> 00:23:07.280
to open up that port.

355
00:23:07.280 --> 00:23:11.300
&gt;&gt; Audience 4: If you look in the MPM
start stuff you'll see the JSON server.

356
00:23:12.420 --> 00:23:20.300
&gt;&gt; Lukas Ruebbelke: And so
if we go to package.json or packages.json.

357
00:23:20.300 --> 00:23:25.110
On line seven, I'm basically saying,

358
00:23:25.110 --> 00:23:29.480
concurrently, I want to run server.

359
00:23:29.480 --> 00:23:34.016
Which is essentially the line eight,

360
00:23:34.016 --> 00:23:39.132
which we're calling spin up JSON server.

361
00:23:39.132 --> 00:23:46.312
And watch this db.json file.

362
00:23:46.312 --> 00:23:47.369
&gt;&gt; Audience 1: Okay.

363
00:23:49.887 --> 00:23:51.850
&gt;&gt; Audience 1: Thank you.

364
00:23:51.850 --> 00:23:54.220
&gt;&gt; Lukas Ruebbelke: And so
completely unrelated to Angular2,

365
00:23:54.220 --> 00:23:57.850
this is a great way to spin
up a rest API really quickly.

366
00:23:57.850 --> 00:24:04.248
Now I've actually done projects where
we're full steam head on the UI.

367
00:24:04.248 --> 00:24:11.400
And services are handled by another team,
and actually in one case, another company.

368
00:24:11.400 --> 00:24:13.500
And who knows when they'll be done?

369
00:24:13.500 --> 00:24:16.810
But because we can agree on
really the interface of this

370
00:24:16.810 --> 00:24:18.669
is what we're going to get at some point.

371
00:24:19.760 --> 00:24:21.550
We just basically mocked
out a bunch of data.

372
00:24:21.550 --> 00:24:23.790
Served it up using JSON Server.

373
00:24:23.790 --> 00:24:24.460
Built everything.

374
00:24:24.460 --> 00:24:26.920
And then when it was ready, we just
dropped it in and it was good to go.

