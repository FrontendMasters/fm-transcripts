WEBVTT

1
00:00:01.488 --> 00:00:03.797
[MUSIC]

2
00:00:03.797 --> 00:00:07.785
&gt;&gt; Kyle Simpson: There are ways to
extrapolate composition to a very general

3
00:00:07.785 --> 00:00:09.130
sense.

4
00:00:09.130 --> 00:00:12.470
And we are not gonna try to go very
deep down that rabbit hole cuz there's

5
00:00:12.470 --> 00:00:14.430
actually a whole bunch of complexity here.

6
00:00:14.430 --> 00:00:17.790
That I have not personally found
to be very useful in my programs.

7
00:00:17.790 --> 00:00:20.210
But I do just want to take you
slightly into the rabbit hole, so

8
00:00:20.210 --> 00:00:22.820
you understand a little bit
of how that mindset works.

9
00:00:22.820 --> 00:00:26.380
What if I wanted to create myself
a slightly more generic utility,

10
00:00:26.380 --> 00:00:31.480
a composed utility, or rather I'll
call it a composed you two utility.

11
00:00:31.480 --> 00:00:34.300
Which composes just two functions and

12
00:00:34.300 --> 00:00:37.120
it makes some assumptions about
what arguments are passed.

13
00:00:37.120 --> 00:00:40.758
What if I wanted to make that
sort of reusable utility?

14
00:00:40.758 --> 00:00:44.470
I could declare compose two function
as I'm doing here on line nine,

15
00:00:44.470 --> 00:00:46.785
it takes a function one and
a function two.

16
00:00:46.785 --> 00:00:50.120
And you'll notice that the first thing
it does is create a new function then it

17
00:00:50.120 --> 00:00:50.855
returns back.

18
00:00:50.855 --> 00:00:55.988
Uh-oh, that's a different pattern
than we've seen so far yet.

19
00:00:55.988 --> 00:00:58.949
That's a pattern that's gonna harken
forward to what we're talking about when

20
00:00:58.949 --> 00:00:59.828
we talk about closure.

21
00:00:59.828 --> 00:01:04.178
The ability for comp to continue to
access fn1 and fn2 at a later time,

22
00:01:04.178 --> 00:01:05.348
that's closure.

23
00:01:05.348 --> 00:01:07.378
So we'll see that a little bit later,

24
00:01:07.378 --> 00:01:10.688
but we are making a function as
a result of calling compose2.

25
00:01:10.688 --> 00:01:12.928
We haven't called fn1 and fn2 yet,

26
00:01:12.928 --> 00:01:16.788
we've simply made a function that
will call them at a later time.

27
00:01:16.788 --> 00:01:19.741
Now, I have an args variable here and

28
00:01:19.741 --> 00:01:24.708
I'm doing some of that crazy,
crappy JavaScript nonsense.

29
00:01:24.708 --> 00:01:29.210
That we have to do to turn the arguments
object into a real arguments array.

30
00:01:30.330 --> 00:01:31.590
Sucks, right?

31
00:01:31.590 --> 00:01:32.810
There's hope, I promise.

32
00:01:32.810 --> 00:01:34.680
On the next slide we're gonna
see there's some hope here, but

33
00:01:34.680 --> 00:01:36.710
that's the old-school
ugly way of doing it.

34
00:01:38.190 --> 00:01:44.620
And then we have arguments.shift and
arguments.shift.

35
00:01:44.620 --> 00:01:49.190
I'm simply taking the first two off of
the array and passing them into fn1.

36
00:01:50.190 --> 00:01:53.780
And its result and
then I'm taking the third argument and

37
00:01:53.780 --> 00:01:54.910
passing in to fn2, okay?

38
00:01:56.750 --> 00:02:00.220
This was a way of cheating,
saving some space for some slides.

39
00:02:00.220 --> 00:02:03.380
You might've chosen to sign those
out into separate variables and

40
00:02:03.380 --> 00:02:06.030
pass them in,
that would've been entirely fine.

41
00:02:06.030 --> 00:02:08.515
But I just making array and
then I shift some things off that array.

42
00:02:08.515 --> 00:02:10.857
And you notice here that
I made some assumptions,

43
00:02:10.857 --> 00:02:13.497
I assumed that you passed in two and
only two functions.

44
00:02:13.497 --> 00:02:18.467
And that you passed in three and
only three arguments and

45
00:02:18.467 --> 00:02:23.552
that you wanted the first two
to got the second function.

46
00:02:23.552 --> 00:02:27.470
And then the result of that plus the third
one to go to the first function,

47
00:02:27.470 --> 00:02:29.152
I made some assumptions here.

48
00:02:29.152 --> 00:02:32.078
Now, when you choose to
make utilities like this,

49
00:02:32.078 --> 00:02:36.560
you can create any sort of utility
your brain can come up with.

50
00:02:36.560 --> 00:02:40.980
What a functional programmer does is
look at principles of mathematics,

51
00:02:40.980 --> 00:02:43.330
principles of programming logic.

52
00:02:43.330 --> 00:02:47.380
And say what are the most common
patterns for how people compose stuff?

53
00:02:48.560 --> 00:02:50.680
And in fact,
all functional programming is literally,

54
00:02:50.680 --> 00:02:53.070
it's a turtles all the way
down sort of thing.

55
00:02:53.070 --> 00:02:54.810
It's, at this most basic level,

56
00:02:54.810 --> 00:02:57.817
let me define a pattern that's
really very commonly used.

57
00:02:57.817 --> 00:03:00.835
Here's how we compose some stuff and
then we make a slightly higher wrapper.

58
00:03:00.835 --> 00:03:03.755
And that's how those two
things get composed.

59
00:03:03.755 --> 00:03:06.695
And then, now that I have things of that,
when I want two of those to compose.

60
00:03:06.695 --> 00:03:08.276
That's how they normally compose,

61
00:03:08.276 --> 00:03:10.675
that's really all of what
functional programming is.

62
00:03:10.675 --> 00:03:14.255
We can dive much deeper down that
rabbit hole and spend our whole day.

63
00:03:14.255 --> 00:03:16.697
And probably not get a whole
lot of practical stuff for

64
00:03:16.697 --> 00:03:18.115
our JavaScript programming.

65
00:03:18.115 --> 00:03:21.690
So I just wanted to tease you with that
notion that you can create your own

66
00:03:21.690 --> 00:03:22.535
compositions.

67
00:03:22.535 --> 00:03:26.975
But when you do that, you wanna look for
ways that it makes your life easier.

68
00:03:26.975 --> 00:03:29.668
Don't make a pattern just
simply because it looks cool or

69
00:03:29.668 --> 00:03:32.315
you've learned some new trick or
something like that.

70
00:03:32.315 --> 00:03:34.735
Make one of these compositional patterns.

71
00:03:34.735 --> 00:03:38.233
Because it's something that you're
doing over and over and over again and

72
00:03:38.233 --> 00:03:39.295
it's gonna help you.

73
00:03:39.295 --> 00:03:42.164
And by the way,
you might end up discovering for

74
00:03:42.164 --> 00:03:45.915
yourself some of those very
common compositional patterns.

75
00:03:45.915 --> 00:03:48.969
That have those fancy names,
like monads and functors and

76
00:03:48.969 --> 00:03:50.535
all that other stuff, okay?

77
00:03:50.535 --> 00:03:53.602
Cuz that's all they've done
in functional programming,

78
00:03:53.602 --> 00:03:57.415
is observe the most common of those
patterns and make utilities for them.

79
00:03:57.415 --> 00:04:00.715
All right, so compose2 we pass
in the function multAndSum.

80
00:04:00.715 --> 00:04:03.918
And then when we call multAndSum
down there on line 21,

81
00:04:03.918 --> 00:04:06.535
you'll notice that it does correctly for
us.

82
00:04:06.535 --> 00:04:12.667
It produces our 17 value resolved.
&gt;&gt; Kyle Simpson: Any questions

83
00:04:12.667 --> 00:04:17.835
about composition so far?
&gt;&gt; Speaker 2: All right,

84
00:04:17.835 --> 00:04:18.672
well I've got a question.
&gt;&gt; Kyle Simpson: Yeah.

85
00:04:18.672 --> 00:04:20.645
&gt;&gt; Speaker 2: Why do we turn a function

86
00:04:20.645 --> 00:04:24.772
comp instead of just a function?
&gt;&gt; Kyle Simpson: Why did I give it a name?

87
00:04:24.772 --> 00:04:30.052
Yeah, basically that's
a side thing in JavaScript.

88
00:04:30.052 --> 00:04:33.786
I tend to not like anonymous functions
in fact I very much don't like anonymous

89
00:04:33.786 --> 00:04:35.480
function expressions.

90
00:04:35.480 --> 00:04:38.350
I've covered that in the advance
JavaScript course as well as my books,

91
00:04:38.350 --> 00:04:40.490
so I won't dive too deeply into it.

92
00:04:40.490 --> 00:04:44.926
But a named function expression is always
more preferable to a anonymous function

93
00:04:44.926 --> 00:04:45.706
expression.

94
00:04:45.706 --> 00:04:47.926
And I know there's probably a bunch
of people listening that'll be like.

95
00:04:47.926 --> 00:04:51.206
[SOUND] I don't like you, you should
use arrow functions or whatever.

96
00:04:51.206 --> 00:04:54.747
That's a whole other side thing that
we don't want to get into today.

97
00:04:54.747 --> 00:04:58.728
I just simply gave it a name because in
a stack trace that word will show up if

98
00:04:58.728 --> 00:05:00.190
I have an error.

99
00:05:00.190 --> 00:05:03.190
If I didn't give it a name it wouldn't
show up, that's a basic point.

100
00:05:03.190 --> 00:05:06.200
You'll see a whole bunch of places
where I don't give them names.

101
00:05:06.200 --> 00:05:09.450
Cuz I'm cheating or I'm trying to save
space on the slides or anything like that.

102
00:05:09.450 --> 00:05:12.487
So, it's definitely a do as I say [LAUGH],
not as I do sort of thing.

103
00:05:12.487 --> 00:05:15.620
But, I do try to have the discipline of
always naming my function expressions,

104
00:05:15.620 --> 00:05:16.422
yes?
&gt;&gt; Speaker 3: Actually,

105
00:05:16.422 --> 00:05:17.478
just a quick comment.

106
00:05:17.478 --> 00:05:21.969
On your previous slides you add
five plus the multiplication and

107
00:05:21.969 --> 00:05:26.750
then everyplace you're actually
adding the five afterwards.

108
00:05:26.750 --> 00:05:29.090
&gt;&gt; Kyle Simpson: Just in my comment I say

109
00:05:29.090 --> 00:05:34.640
it in the opposite and the reason I do
that is to motivate Why the parenthesis

110
00:05:34.640 --> 00:05:37.510
are necessary for order of operation.
&gt;&gt; Speaker 3: Okay.

111
00:05:37.510 --> 00:05:38.390
&gt;&gt; Kyle Simpson: I wanted the numbers to

112
00:05:38.390 --> 00:05:41.280
be strictly increasing, three, four,
five, because that's pleasant to people.

113
00:05:42.370 --> 00:05:43.140
So that's basic.

114
00:05:43.140 --> 00:05:44.910
&gt;&gt; Speaker 3: Okay.
&gt;&gt; Kyle Simpson: Yes.

115
00:05:44.910 --> 00:05:46.160
You're right.
You're right.

116
00:05:46.160 --> 00:05:47.880
Is there a question?

117
00:05:47.880 --> 00:05:49.308
Yes?
&gt;&gt; Speaker 4: There is question

118
00:05:49.308 --> 00:05:50.930
about random values.

119
00:05:50.930 --> 00:05:55.130
It seems even wrapping those
wouldn't make them pure,

120
00:05:55.130 --> 00:05:57.400
it's like wrapping
a random number generator?

121
00:05:58.900 --> 00:06:00.810
Would you be able to-
&gt;&gt; Kyle Simpson: [SOUND], is a random

122
00:06:00.810 --> 00:06:03.723
number generator a pure utility?
&gt;&gt; Speaker 4: Yeah.

123
00:06:03.723 --> 00:06:04.276
&gt;&gt; Kyle Simpson: [LAUGH]

124
00:06:04.276 --> 00:06:07.820
That is also going down a rabbit hole.

125
00:06:07.820 --> 00:06:14.060
So, Pseudo random number generators
are based upon a seed, which is a state.

126
00:06:14.060 --> 00:06:18.400
And if that state can be repeated in
some way, if it is a seatable system.

127
00:06:18.400 --> 00:06:24.990
And it changes based upon that seed,
that's an impure system.

128
00:06:24.990 --> 00:06:28.824
So, I guess at a very basic
sense I'd have to tell you yes,

129
00:06:28.824 --> 00:06:33.511
random numbers would be impure.
&gt;&gt; Speaker 4: And

130
00:06:33.511 --> 00:06:36.507
then, they were just as curious about.

131
00:06:36.507 --> 00:06:41.505
Do you think the functional approach
better fits the whole functions as values

132
00:06:41.505 --> 00:06:44.508
aspect of JavaScript?
&gt;&gt; Kyle Simpson: Say the question again,

133
00:06:44.508 --> 00:06:47.206
I'm sorry.
&gt;&gt; Speaker 4: Do you think a functional

134
00:06:47.206 --> 00:06:52.968
approach better fits the whole functions
as values aspect of JavaScript?

135
00:06:52.968 --> 00:06:54.004
&gt;&gt; Kyle Simpson: [SOUND], okay, so

136
00:06:54.004 --> 00:06:56.845
functions is value is when
most people say that.

137
00:06:56.845 --> 00:07:00.317
They're talking about functions
as first class citizens,

138
00:07:00.317 --> 00:07:02.300
first class values with closure.

139
00:07:03.450 --> 00:07:08.270
And the question then is, is closure more
closely related to functional programming?

140
00:07:08.270 --> 00:07:12.800
Absolutely, closure's a very important
piece of functional programming.

141
00:07:12.800 --> 00:07:17.751
On the other hand, I have used a ton
of closure without even remotely having

142
00:07:17.751 --> 00:07:21.147
programs that look like
functional programming.

143
00:07:21.147 --> 00:07:24.448
So closure is not only
a functional programming concept.

144
00:07:24.448 --> 00:07:27.971
But is absolutely, positively, without
a doubt one of the most important things

145
00:07:27.971 --> 00:07:29.820
that comes from functional programming.

