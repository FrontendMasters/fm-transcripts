WEBVTT

1
00:00:00.000 --> 00:00:03.961
[MUSIC]

2
00:00:03.961 --> 00:00:08.080
&gt;&gt; Kyle: Saw a couple hands, yeah?
&gt;&gt; Speaker 2: Wouldn't you have 175?

3
00:00:08.080 --> 00:00:09.940
&gt;&gt; Kyle: Sorry, I typed it wrong,

4
00:00:09.940 --> 00:00:11.930
the question was wouldn't I have 175?

5
00:00:11.930 --> 00:00:13.520
I just completely mistyped.

6
00:00:13.520 --> 00:00:15.450
Yes, the end result would be 175.

7
00:00:15.450 --> 00:00:18.600
Was that your question as well?
&gt;&gt; Speaker 3: Yeah, I just wanted to

8
00:00:18.600 --> 00:00:21.120
make sure that I got the right answer.
&gt;&gt; Kyle: I have not had enough coffee

9
00:00:21.120 --> 00:00:24.470
apparently I can't do my
math this morning, okay?

10
00:00:24.470 --> 00:00:29.730
I said 175 and typed 125.
&gt;&gt; Kyle: Yes?

11
00:00:29.730 --> 00:00:30.760
&gt;&gt; Speaker 4: There was a question,

12
00:00:30.760 --> 00:00:33.750
is it possible for an app to have
all of their functions pured?

13
00:00:36.190 --> 00:00:36.790
&gt;&gt; Kyle: Well,

14
00:00:36.790 --> 00:00:38.200
we could quibble about that.

15
00:00:38.200 --> 00:00:43.440
I would say in general, the takeaway would
be If your program was entirely pure

16
00:00:43.440 --> 00:00:48.380
with no side effects, that would mean your
program would have no input our output.

17
00:00:48.380 --> 00:00:52.490
And if no input or output, then your
program would be completely pointless.

18
00:00:53.920 --> 00:00:58.850
If it had no effect on anything, there was
no observation of it, there was no state

19
00:00:58.850 --> 00:01:02.190
change as a result of your program, then
I know what you can do with that program.

20
00:01:02.190 --> 00:01:05.650
You can simply delete it,
because that's about how useful it is.

21
00:01:05.650 --> 00:01:10.450
That's the glib way of saying
you're going to have to balance

22
00:01:10.450 --> 00:01:12.350
where you need purity and where you don't.

23
00:01:12.350 --> 00:01:16.290
And you notice, again, I didn't start
this workshop to say functional program,

24
00:01:16.290 --> 00:01:18.620
function, do all functional,
do all functional.

25
00:01:18.620 --> 00:01:23.510
Functional's cool, but it's not
the hammer that you use for everything.

26
00:01:23.510 --> 00:01:26.730
The perspective that we're taking here
is there's some usefulness to it, and

27
00:01:26.730 --> 00:01:30.010
there are places in our program that
will make it easier to reason about.

28
00:01:30.010 --> 00:01:32.620
So I don't encourage you to write your
entire program in a functional style,

29
00:01:32.620 --> 00:01:33.520
I've never once done that.

30
00:01:34.550 --> 00:01:39.030
But I have used some of these functional
concepts in my regular programs, and

31
00:01:39.030 --> 00:01:41.640
the places I've done it's
improved the understandibility,

32
00:01:41.640 --> 00:01:42.810
the reasonability back out.

33
00:01:44.970 --> 00:01:52.171
Good question online, thank you.
&gt;&gt; Kyle: Okay,

34
00:01:52.171 --> 00:01:54.090
I see a question in the chat room.

35
00:01:54.090 --> 00:01:57.380
Where would you use all these pure
functions if you're using frameworks like

36
00:01:57.380 --> 00:01:59.000
angular and such?

37
00:01:59.000 --> 00:02:01.770
My answer to this is not going
to be terribly satisfying,

38
00:02:01.770 --> 00:02:04.840
but I'm not going to answer any
questions about frameworks.

39
00:02:04.840 --> 00:02:08.150
Because that's way outside of the scope
of what we want to talk about here.

40
00:02:08.150 --> 00:02:10.000
I'm not an angular expert,
there's plenty of people,

41
00:02:10.000 --> 00:02:12.120
who are very smart about angular.

42
00:02:12.120 --> 00:02:13.560
And I would recommend,

43
00:02:13.560 --> 00:02:17.320
if you're doing angular programming
embrace the angular way.

44
00:02:17.320 --> 00:02:18.970
Okay, because angular
has a way of doing it.

45
00:02:18.970 --> 00:02:21.920
If you're doing react,
embrace the react way.

46
00:02:21.920 --> 00:02:26.340
My goal is to really sit at a lower
level than frameworks and to talk about

47
00:02:26.340 --> 00:02:29.970
the mechanisms of the language itself and
how we can use this mechanisms.

48
00:02:29.970 --> 00:02:34.020
So, I think that's entirely possible
that you might be able to improve

49
00:02:34.020 --> 00:02:38.560
some of your angular code with some
functional live programming concepts, but

50
00:02:38.560 --> 00:02:41.760
the chances are you are not going to be
able to do a full functional programming

51
00:02:41.760 --> 00:02:44.440
pass and
still use angular because that's just not

52
00:02:44.440 --> 00:02:47.050
the mindset that they used
to design that framework.

53
00:02:47.050 --> 00:02:51.550
The same would be true for react, and
ember, and backbone and all of that.

54
00:02:51.550 --> 00:02:53.820
That's one of the reasons why I am
teaching this workshop, by the way.

55
00:02:53.820 --> 00:02:57.630
As I am trying to make some this stuff
more palatable, even in mixed environments

56
00:02:57.630 --> 00:03:00.700
where you know you're not going to be able
to go entirely functional programming,

57
00:03:00.700 --> 00:03:06.670
these are little tiny tools that we can
use in very tactical specific ways.

58
00:03:06.670 --> 00:03:07.340
Yes?
&gt;&gt; Speaker 4: We're kind of

59
00:03:07.340 --> 00:03:09.160
getting a few here, so.
&gt;&gt; Kyle: Okay, great.

60
00:03:09.160 --> 00:03:10.430
&gt;&gt; Speaker 4: Bear with me.

61
00:03:10.430 --> 00:03:11.800
Is it best to return an array?

62
00:03:11.800 --> 00:03:15.390
What else could we return?

63
00:03:16.720 --> 00:03:18.025
What are the way could return Y and

64
00:03:18.025 --> 00:03:21.220
Z keep the functions up here, sorry.
&gt;&gt; Kyle: You're going to have to wrap it

65
00:03:21.220 --> 00:03:24.960
in some container, the two fundamental
containers that we have in JavaScript

66
00:03:24.960 --> 00:03:27.550
are going to be the array and the object.

67
00:03:27.550 --> 00:03:30.840
So we could have gone to the trouble of
assigning several different values and

68
00:03:30.840 --> 00:03:31.970
the properties and the object.

69
00:03:33.410 --> 00:03:36.350
Usually, functional
programmers like array.

70
00:03:36.350 --> 00:03:41.320
They like lists because lists are very
convenient to do operations on.

71
00:03:41.320 --> 00:03:45.400
So, my instinct in a functional
programming mindset or

72
00:03:45.400 --> 00:03:48.320
anything that's even remotely
close to functional programming,

73
00:03:48.320 --> 00:03:51.600
my instinct is to reach for
the array before I reach for the object.

74
00:03:51.600 --> 00:03:52.770
But, any kind of container would do.

75
00:03:52.770 --> 00:03:55.760
I mean, even a more sophisticated
container like a map or a set or

76
00:03:55.760 --> 00:03:57.266
something if you wanted to.

77
00:03:57.266 --> 00:03:59.520
You're going to have to have some
container because syntactically,

78
00:03:59.520 --> 00:04:02.140
the language only allows you
to return as single value,

79
00:04:02.140 --> 00:04:03.610
if you need to return multiple values.

80
00:04:03.610 --> 00:04:06.960
Another way of answering that I guess
is to say refactor your program so

81
00:04:06.960 --> 00:04:09.290
you don't have to return multiple values.

82
00:04:09.290 --> 00:04:12.000
But that may not be something
that you use as general advice.

83
00:04:12.000 --> 00:04:16.510
So when you do have to have multiple
side effects, you're going to need some

84
00:04:16.510 --> 00:04:21.370
container with the return keyboard.
&gt;&gt; Speaker 4: Can

85
00:04:21.370 --> 00:04:25.110
you repeat what a pure function is?
&gt;&gt; Kyle: Yes.

86
00:04:25.110 --> 00:04:28.840
A pure function is a function
that has no side effects.

87
00:04:28.840 --> 00:04:31.730
It operates entirely on its own variables,

88
00:04:31.730 --> 00:04:35.190
its own state, or
any of the things that are passed into it.

89
00:04:35.190 --> 00:04:36.720
So the arguments that are passed in, and

90
00:04:36.720 --> 00:04:39.180
any of its own- it
operates entirely on that.

91
00:04:39.180 --> 00:04:40.810
And does not change anything.

92
00:04:40.810 --> 00:04:44.930
A pure function does not mean
it doesn't access outside state,

93
00:04:44.930 --> 00:04:47.660
it means it doesn't
change the outside state.

94
00:04:47.660 --> 00:04:50.120
So there's no side effects.

95
00:04:50.120 --> 00:04:54.730
So I could write a function that accesses
a variable outside of itself, and

96
00:04:54.730 --> 00:04:56.350
that's totally okay.

97
00:04:56.350 --> 00:04:59.210
And that's not going to be considered,
at least from our perspective for

98
00:04:59.210 --> 00:05:00.162
our intents and purposes.

99
00:05:00.162 --> 00:05:03.940
That's not going to be considered
an impure function, except for

100
00:05:03.940 --> 00:05:09.310
the fact that that variable now can
change from out underneath this function,

101
00:05:09.310 --> 00:05:11.850
so the overall reasonability
of the program is less pure.

102
00:05:11.850 --> 00:05:15.570
But the function itself we still
call pure because it's not,

103
00:05:15.570 --> 00:05:16.569
it does not have a side effect.

104
00:05:17.990 --> 00:05:21.520
So if you take precautions
to make sure that you do not

105
00:05:21.520 --> 00:05:24.170
do side effects in a particular
piece of your program,

106
00:05:24.170 --> 00:05:29.060
then that piece of your program is pure.
&gt;&gt; Speaker 5: If I run this program,

107
00:05:29.060 --> 00:05:33.140
I get z is undefined or something.
&gt;&gt; Kyle: Well,

108
00:05:33.140 --> 00:05:35.640
here we're not, so
the question was Z is undefined.

109
00:05:35.640 --> 00:05:38.760
The way I rewrote this,
I'm not using Z anymore externally.

110
00:05:38.760 --> 00:05:40.550
Remember, z is only being used internally.

111
00:05:40.550 --> 00:05:42.010
That was part of the point.

112
00:05:42.010 --> 00:05:44.800
Z was a set of state that we didn't
want to change on the outside, so

113
00:05:44.800 --> 00:05:48.230
we encapsulated it as a local
variable inside of bar.

114
00:05:48.230 --> 00:05:52.920
We do use it for the brief period
of time between when we declare and

115
00:05:52.920 --> 00:05:57.210
while foo is running, it's changing, and
then we return it, so we do have it there.

116
00:05:57.210 --> 00:06:03.013
But it's not exposed on the outside,
that's intentional.

117
00:06:10.542 --> 00:06:11.464
&gt;&gt; Speaker 4: This might have been,

118
00:06:11.464 --> 00:06:12.969
I don't know if this is out of order,

119
00:06:12.969 --> 00:06:16.190
but they were asking why do we return z
if it's not being passed in and changed?

120
00:06:17.600 --> 00:06:20.940
But I don't think we are any more, right?
&gt;&gt; Kyle: Okay, so

121
00:06:20.940 --> 00:06:22.930
that's actually a very good question.

122
00:06:22.930 --> 00:06:27.430
We are returning z,
we're not passing z in.

123
00:06:27.430 --> 00:06:29.830
Z is not an input, z is an output.

124
00:06:30.850 --> 00:06:35.000
Z is how I observe the output
of this particular program.

125
00:06:35.000 --> 00:06:39.780
If I didn't give you z, it wouldn't be
a terribly useful program, would it?

126
00:06:39.780 --> 00:06:42.870
So this is, again, we're not going
to get way deep in the weens

127
00:06:42.870 --> 00:06:45.950
of functional programming, but this is
one of the ways you can think about,

128
00:06:45.950 --> 00:06:51.150
as a functional programmer, even doing
side effects without side effects,

129
00:06:51.150 --> 00:06:53.780
is to simply pass in
everything that's needed and

130
00:06:53.780 --> 00:06:56.720
return everything back that's
needed to be observed.

131
00:06:56.720 --> 00:06:58.960
Passing the inputs, receive the outputs.

132
00:06:58.960 --> 00:07:03.760
So here, one of the direct outputs is the
Z variable, and one of the side outputs,

133
00:07:03.760 --> 00:07:06.990
one of the state that we may or
may not choose to track and

134
00:07:06.990 --> 00:07:08.990
use later, is that Y variable.

135
00:07:10.070 --> 00:07:13.457
So I'm returning both of those, and
that's why I need some container around

136
00:07:13.457 --> 00:07:19.530
me.
&gt;&gt; Kyle: We good?

137
00:07:19.530 --> 00:07:20.990
All right, excellent.

138
00:07:20.990 --> 00:07:23.740
Those are fantastic questions,
thanks very much for that.

139
00:07:23.740 --> 00:07:30.010
That's exactly the kind of thing that
we want to pay our attention to.

