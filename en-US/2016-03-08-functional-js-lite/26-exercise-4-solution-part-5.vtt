WEBVTT

1
00:00:00.540 --> 00:00:04.020
[MUSIC]

2
00:00:04.020 --> 00:00:05.730
&gt;&gt; Kyle: Next step in our readme.

3
00:00:05.730 --> 00:00:10.350
let's define a slightly,
let's put a few more values in here.

4
00:00:10.350 --> 00:00:14.694
So let me come up with 15 and

5
00:00:14.694 --> 00:00:19.767
two and 98, and seven, okay.

6
00:00:19.767 --> 00:00:24.800
I just added some extra values.

7
00:00:24.800 --> 00:00:28.900
I've now lost my ability to know what that
running total will be but we'll cheat and

8
00:00:28.900 --> 00:00:32.030
love JavaScript tell us
what the total ought to be.

9
00:00:32.030 --> 00:00:39.170
Okay, so if that was our list, we might
want to exclude some items from the list.

10
00:00:39.170 --> 00:00:41.460
So the readme suggests.

11
00:00:41.460 --> 00:00:46.080
That we want to filter the array and
exclude all of the odd numbers.

12
00:00:47.580 --> 00:00:50.820
So how are we gonna exclude
the odd numbers from our list if

13
00:00:50.820 --> 00:00:52.250
we start out without a list?

14
00:00:52.250 --> 00:00:53.690
Let's make this a little easier.

15
00:00:53.690 --> 00:01:02.043
Let's start this out with this array here.
&gt;&gt; Kyle: And

16
00:01:02.043 --> 00:01:06.756
then let's perform the operations,
like we're doing.

17
00:01:06.756 --> 00:01:11.978
So right now, we have arr = arr.map

18
00:01:11.978 --> 00:01:16.390
with foo.
&gt;&gt; Kyle: So

19
00:01:16.390 --> 00:01:19.400
all I need to do is split those out so
we're dealing with separate lines now.

20
00:01:19.400 --> 00:01:22.680
All right, so
let's add an additional step in here.

21
00:01:22.680 --> 00:01:26.880
Which after before we
are mapping the functions.

22
00:01:26.880 --> 00:01:29.510
We wanna look at the values themselves and

23
00:01:29.510 --> 00:01:33.250
filter out any of those
values that are odd.

24
00:01:34.530 --> 00:01:38.945
So how do we do that?
&gt;&gt; Speaker 2: Write a function that.

25
00:01:38.945 --> 00:01:40.943
&gt;&gt; Kyle: What utility am I gonna reach for

26
00:01:40.943 --> 00:01:43.630
if I need to do an exclusion?
&gt;&gt; Speaker 3: Reach for filter.

27
00:01:43.630 --> 00:01:44.480
&gt;&gt; Kyle: I'm gonna reach for

28
00:01:44.480 --> 00:01:45.590
filter, right?

29
00:01:45.590 --> 00:01:50.306
So I need to do an exclusion
I'm gonna call arr.filter.

30
00:01:50.306 --> 00:01:55.940
And I'm gonna need a predicate, a function
to pass in that returns true or false.

31
00:01:55.940 --> 00:01:58.950
Remember before in our slides
we passed in and it is odd.

32
00:02:00.430 --> 00:02:03.310
And it returned true if the value is on.

33
00:02:03.310 --> 00:02:07.184
Is that the one that we wanna use?
&gt;&gt; Speaker 2: We might use

34
00:02:07.184 --> 00:02:09.950
zero instead of one.
&gt;&gt; Kyle: We actually want the negation of

35
00:02:09.950 --> 00:02:11.140
the is odd don't we?

36
00:02:11.140 --> 00:02:12.940
We want an isEven.

37
00:02:12.940 --> 00:02:14.520
So we could write our own is even.

38
00:02:16.010 --> 00:02:19.078
But another functional programming
technique is to observe.

39
00:02:19.078 --> 00:02:25.020
That is even is just a composition of
the negation with the isOdd function call.

40
00:02:26.880 --> 00:02:29.250
So let's assume I had an isOdd.

41
00:02:29.250 --> 00:02:34.043
That's all I had.
&gt;&gt; Kyle: Remember,

42
00:02:34.043 --> 00:02:40.090
the way it works is to mod by two and
say, that it's gotta be equal to one.

43
00:02:40.090 --> 00:02:43.270
So let's say, I only have an isOdd,
could I make an isEven?

44
00:02:43.270 --> 00:02:48.520
Yeah, I could also from a functional
programming perspective and I had

45
00:02:48.520 --> 00:02:52.570
functional utilities that did composition
this would end up being really easy.

46
00:02:52.570 --> 00:02:55.400
Because you could make a function
that just negates a Boolean.

47
00:02:56.990 --> 00:03:01.723
But if I wanted to make an isEven.
&gt;&gt; Kyle: One way of

48
00:03:01.723 --> 00:03:04.720
making is to actually do
the modules calculation.

49
00:03:04.720 --> 00:03:09.568
The other way of doing it
is to call a negation of is

50
00:03:09.568 --> 00:03:13.948
off.
&gt;&gt; Kyle: Does everybody see that?

51
00:03:13.948 --> 00:03:20.287
That's doing it manually.
&gt;&gt; Kyle: Or

52
00:03:20.287 --> 00:03:24.910
I can look at that pattern and say,
you know what, I do that an awful lot.

53
00:03:24.910 --> 00:03:27.390
I negate my Boolean
utilities an awful lot, so

54
00:03:27.390 --> 00:03:31.280
I'm gonna make myself a compositional
pattern that automatically lets me take in

55
00:03:31.280 --> 00:03:35.970
a function, call it with a value,
and negate its return response.

56
00:03:35.970 --> 00:03:39.130
So let's just pretend that
we have one like that.

57
00:03:39.130 --> 00:03:41.601
Compose neg is what we'd call it.

58
00:03:41.601 --> 00:03:46.918
I could say, isEven is equal to compose

59
00:03:46.918 --> 00:03:52.415
neg with is odd.
&gt;&gt; Kyle: So

60
00:03:52.415 --> 00:03:55.279
that would produce me a new
function that is called is odd and

61
00:03:55.279 --> 00:03:57.869
negated it's result before
returning it back to me.

62
00:03:59.470 --> 00:04:02.150
You see how that could end
up being a useful utility

63
00:04:02.150 --> 00:04:04.380
in my functional programming library.

64
00:04:04.380 --> 00:04:07.270
But only if that was a pattern
I ended up doing a lot.

65
00:04:08.370 --> 00:04:10.570
So that's what functional
programmers have done.

66
00:04:10.570 --> 00:04:13.530
They've done enough functional programming
and they've run across enough of these

67
00:04:13.530 --> 00:04:17.100
compositional patterns that they've said
here's the common ones that we're gonna

68
00:04:17.100 --> 00:04:19.029
provide to you and
they gave them a bunch of fancy names.

69
00:04:20.710 --> 00:04:23.800
All I'm suggesting to you is that
you can start with nothing and

70
00:04:23.800 --> 00:04:28.860
build yourself up, a little set of these
things that you are regularly using.

71
00:04:28.860 --> 00:04:30.090
That's basically what I've done.

72
00:04:31.090 --> 00:04:33.980
That's what I've made use
of function programming.

73
00:04:33.980 --> 00:04:38.910
That's a way of getting at the same
principles of functional programming.

74
00:04:38.910 --> 00:04:40.800
Instead of coming at it from
the other direction and

75
00:04:40.800 --> 00:04:42.470
having to learn all the academic stuff.

76
00:04:43.770 --> 00:04:46.520
Okay?
And there are tons of really great

77
00:04:46.520 --> 00:04:49.390
functional programming
libraries out there, RAMDA,

78
00:04:49.390 --> 00:04:52.650
Bacon JS, several other ones out there.

79
00:04:52.650 --> 00:04:56.540
So if you do wanna go the route of just
using someone's predefined library and

80
00:04:56.540 --> 00:05:01.950
you wanna take on the task of learning
some of those more sophisticated

81
00:05:01.950 --> 00:05:05.800
terminology and techniques and what
patterns, functional program are to use.

82
00:05:05.800 --> 00:05:09.020
That's a great next step
from what I'm teaching.

83
00:05:09.020 --> 00:05:11.940
But I hope that I'm teaching you that
there is a way to get some of the benefit

84
00:05:11.940 --> 00:05:15.950
here without having to go
through all of that effort.

85
00:05:15.950 --> 00:05:19.450
That's personally how I've woven
functional programming techniques in.

86
00:05:19.450 --> 00:05:23.790
Alright, so let's just assume
we're gonna have an isEven.

87
00:05:25.850 --> 00:05:27.770
We're just passing an isEven.

88
00:05:27.770 --> 00:05:31.240
However you end up defining it,
we wanna filter.

89
00:05:31.240 --> 00:05:33.710
So I can end up doing a reassignment here,

90
00:05:33.710 --> 00:05:38.160
as I'm doing, or
this can all just be a set of chains.

91
00:05:39.960 --> 00:05:45.056
So arr is the chain of those two commands.

92
00:05:47.876 --> 00:05:50.135
&gt;&gt; Kyle: So do we see how that works?

93
00:05:50.135 --> 00:05:56.576
Let's just double-check to make
sure I didn't mess something up.

94
00:05:56.576 --> 00:06:00.418
I need, I won't be able to run that
because I haven't find as you can see, so

95
00:06:00.418 --> 00:06:02.651
let's make one just for testing purposes.

96
00:06:19.471 --> 00:06:20.351
&gt;&gt; Kyle: Uh-oh.

97
00:06:24.331 --> 00:06:26.893
&gt;&gt; Speaker 3: [INAUDIBLE].

98
00:06:26.893 --> 00:06:27.820
&gt;&gt; Kyle: I did, didn't I?

99
00:06:27.820 --> 00:06:35.867
Sorry.
&gt;&gt; Kyle: All right,

100
00:06:35.867 --> 00:06:37.400
so that's telling us that it's 208.

101
00:06:37.400 --> 00:06:38.760
Let's just sanity check that.

102
00:06:38.760 --> 00:06:43.257
We wanna add up only the even, so 52, 108,

103
00:06:43.257 --> 00:06:48.915
110.
&gt;&gt; Kyle: Yeah 208.

104
00:06:48.915 --> 00:06:50.210
There we go.

105
00:06:51.900 --> 00:06:54.400
Okay, so 208's our expected end result.

106
00:06:54.400 --> 00:06:59.011
All right, the last step in this
exercise and then we'll wrap up.

107
00:07:05.275 --> 00:07:07.350
&gt;&gt; Kyle: We've already done the last step.

108
00:07:07.350 --> 00:07:10.220
The item that I wanted to call
your attention to is number nine,

109
00:07:12.100 --> 00:07:16.370
now we can try to stretch our brains into
thinking, how would we write tests for

110
00:07:16.370 --> 00:07:17.290
all this composition?

111
00:07:18.410 --> 00:07:20.234
We're visually looking at it and saying,

112
00:07:20.234 --> 00:07:22.730
I can tell you that the end
result is supposed to be 208.

113
00:07:22.730 --> 00:07:27.619
How would you write tests for this?
&gt;&gt; Kyle: That's

114
00:07:27.619 --> 00:07:31.434
not a question I'm expecting
a concrete answer to,

115
00:07:31.434 --> 00:07:35.850
it's a rhetorical for
you to ponder as we go forward.

116
00:07:35.850 --> 00:07:40.743
Because functional programming does end up
creating some very powerful expressions of

117
00:07:40.743 --> 00:07:43.584
our programming, but
I think you will find as I have

118
00:07:43.584 --> 00:07:47.089
found that when you use functional
programming techniques and

119
00:07:47.089 --> 00:07:50.659
you try to put those into your
traditional testing frameworks,

120
00:07:50.659 --> 00:07:54.859
you might find some incompatibilities.
&gt;&gt; Kyle: So

121
00:07:54.859 --> 00:07:59.150
pondering how you are going to test
the end result of these different things.

122
00:07:59.150 --> 00:08:01.170
Are you going to test
only the end result or

123
00:08:01.170 --> 00:08:04.100
are you gonna test each layer
of all this composition?

124
00:08:04.100 --> 00:08:05.620
Those are questions
that you should ponder.

