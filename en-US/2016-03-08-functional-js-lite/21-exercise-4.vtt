WEBVTT

1
00:00:00.000 --> 00:00:03.769
[MUSIC]

2
00:00:03.769 --> 00:00:07.387
&gt;&gt; Kyle Simpson: Hopefully some of those
ideas of functional programing light,

3
00:00:07.387 --> 00:00:11.430
functional light programming have
been stirring around in your head.

4
00:00:11.430 --> 00:00:16.710
Closures and recursions and immutable
value usage and things like that.

5
00:00:16.710 --> 00:00:21.640
We're gonna finish up our
workshop with an exercise,

6
00:00:21.640 --> 00:00:25.050
Exercise 4, it's basically the last
thing we'll do with this workshop.

7
00:00:25.050 --> 00:00:31.100
And the goal here is to sort of
walk through some steps that make

8
00:00:31.100 --> 00:00:37.439
you practice that, and to borrow the term,
to compose those ideas together a bit.

9
00:00:39.250 --> 00:00:42.820
It's still silly problem solving, we would
be here all day if I tried to give you

10
00:00:42.820 --> 00:00:46.290
a real program and
tried to in context do that.

11
00:00:46.290 --> 00:00:50.400
So they're still silly,
simple academic like examples, but

12
00:00:50.400 --> 00:00:52.630
hopefully they're a little more concrete,

13
00:00:52.630 --> 00:00:57.080
and we can start to figure out
how these things fit together.

14
00:00:57.080 --> 00:01:01.179
So, [COUGH] we're gonna start with this
empty EX4.js, and rather than this be

15
00:01:01.179 --> 00:01:04.787
an exercise that I just turn you
loose on for the next 30 minutes, and

16
00:01:04.787 --> 00:01:08.940
have you do yourself, we're gonna kinda
make this a little bit interactive.

17
00:01:08.940 --> 00:01:12.590
I'm gonna say some stuff, and I'll stop
for a minute and let you type, and

18
00:01:12.590 --> 00:01:14.560
then I'll say some more stuff,
that kinda thing.

19
00:01:14.560 --> 00:01:16.840
So this'll be an interactive thing,
roughly,

20
00:01:16.840 --> 00:01:22.890
probably 30 to 40 minutes-ish of us
discussing, and we'll figure out when

21
00:01:22.890 --> 00:01:27.233
we've gotten all of the usefulness out
of the exercise and then we'll wrap up.

22
00:01:27.233 --> 00:01:29.494
So, the first thing that
we're gonna start with, and

23
00:01:29.494 --> 00:01:31.670
if you follow along with the readme,
that's fine.

24
00:01:31.670 --> 00:01:36.050
If you want to jump ahead, you may miss
a few of the points that we're making, so

25
00:01:36.050 --> 00:01:39.810
I would encourage you maybe not to do too
much of the jumping ahead in the readme,

26
00:01:39.810 --> 00:01:43.100
even if you feel like you're
ready to go onto the next step.

27
00:01:44.510 --> 00:01:47.440
But you can follow along with the readme
cuz that's basically what I'm gonna do.

28
00:01:47.440 --> 00:01:51.360
So, what we're gonna start out with, and

29
00:01:51.360 --> 00:01:56.320
one other thing, to kinda give you a heads
up on, this is another one of those

30
00:01:56.320 --> 00:02:00.680
things that in functional programming,
I've observed from the outside.

31
00:02:00.680 --> 00:02:02.880
I'm coming at this all
from the reverse angle.

32
00:02:02.880 --> 00:02:06.140
I didn't start out learning
functional programming.

33
00:02:06.140 --> 00:02:08.580
Douglas Crockford has
a great quote on this topic.

34
00:02:08.580 --> 00:02:11.340
I don't know if it's original him,
but he has a great quote on the topic.

35
00:02:11.340 --> 00:02:14.005
That the problem with functional
programming is as soon as you understand

36
00:02:14.005 --> 00:02:16.186
it, you stop being able to teach it.

37
00:02:16.186 --> 00:02:20.440
And there's humor there, but there's also
some truth there because as soon as you

38
00:02:20.440 --> 00:02:23.630
really understand and you get steeped
in all the academic tradition and

39
00:02:23.630 --> 00:02:26.940
the terminology,
it's really hard to switch back.

40
00:02:26.940 --> 00:02:32.090
So rather than go that direction and
be ineffective at teaching,

41
00:02:32.090 --> 00:02:35.660
my goal is to come at it from the backend,
from the reverse.

42
00:02:36.990 --> 00:02:41.310
So I don't know whether, I'm not gonna
get certified as a functional programmer

43
00:02:41.310 --> 00:02:45.270
anytime soon, but hopefully some
of these things are starting to

44
00:02:45.270 --> 00:02:46.760
fit in a little more concretely for you.

45
00:02:46.760 --> 00:02:50.590
But one of the things that I have
observed from that backend perspective,

46
00:02:50.590 --> 00:02:54.720
coming at it from the reverse,
is that there are some times

47
00:02:54.720 --> 00:02:59.890
when an abstraction gets created, and
you look at the abstraction and you think,

48
00:02:59.890 --> 00:03:05.070
what even remotely prompted
somebody to come up with that?

49
00:03:05.070 --> 00:03:10.010
And the best metaphor I can give you for
it is, if you remember back,

50
00:03:10.010 --> 00:03:13.950
maybe in high school or whatever when
you took an algebra class and, or

51
00:03:13.950 --> 00:03:15.870
maybe it was a calculus class or
something like that.

52
00:03:15.870 --> 00:03:19.876
But you've been working along with some
problem and you're trying to solve for

53
00:03:19.876 --> 00:03:23.876
x in one side of the thing, and it's not
clear how you're gonna, you get to some

54
00:03:23.876 --> 00:03:28.061
point and the teacher's working through
the problem with you, and it's not clear

55
00:03:28.061 --> 00:03:32.414
looking at it, that there's an easy way to
isolate the x, to solve for x or whatever.

56
00:03:32.414 --> 00:03:34.831
And then all of a sudden, she's like,

57
00:03:34.831 --> 00:03:40.190
well, if we multiply by y cubed on
both sides, and you're like, what?

58
00:03:40.190 --> 00:03:44.520
But she does it, and all of a sudden,
it just magically makes everything,

59
00:03:44.520 --> 00:03:50.190
it unsticks the logjam and then you can
move on, and that used to drive me insane.

60
00:03:50.190 --> 00:03:55.550
How did you just pull this rabbit out
of thin air that just magically worked?

61
00:03:55.550 --> 00:03:56.950
What was it that did that?

62
00:03:56.950 --> 00:04:01.290
And I don't have a terribly great
answer for it, but it is to say this.

63
00:04:01.290 --> 00:04:05.490
I think functional programming,
my perspective, one of the most important

64
00:04:05.490 --> 00:04:09.490
techniques that you can get or one of the
most important skills that you can get at

65
00:04:09.490 --> 00:04:12.784
functional programming,
is developing instincts for things.

66
00:04:12.784 --> 00:04:15.820
And that's basically what my
algebra teacher said was,

67
00:04:15.820 --> 00:04:19.770
I've done it enough that when I see a
problem that kinda looks like this, I just

68
00:04:19.770 --> 00:04:26.060
remember that I can invoke this pattern
and it helps to unstick the solution.

69
00:04:26.060 --> 00:04:27.900
So really,
functional programming is kinda like that,

70
00:04:27.900 --> 00:04:31.350
sometimes you invoke things out of
thin air that don't logically flow

71
00:04:31.350 --> 00:04:34.260
directly from what you just did,
but they unstick you.

72
00:04:34.260 --> 00:04:36.940
They create an abstraction
that unsticks you and

73
00:04:36.940 --> 00:04:39.450
makes a solution to a problem work.

74
00:04:39.450 --> 00:04:42.110
So there are gonna be a couple of these
things where I'm gonna pull something out

75
00:04:42.110 --> 00:04:45.410
of thin air and you're gonna be like, why
are you passing that function in that way?

76
00:04:45.410 --> 00:04:47.410
It's really more based
upon those instincts.

77
00:04:47.410 --> 00:04:51.220
That's really what I'm trying to get
across with this whole workshop is to help

78
00:04:51.220 --> 00:04:54.730
you understand what those basic principles
are in functional programming, and

79
00:04:54.730 --> 00:04:57.050
let you try to weave those
together into instincts.

80
00:04:57.050 --> 00:04:58.170
When you look at a problem,

81
00:04:58.170 --> 00:05:03.980
I want you to have the instinct to say,
I've seen that before, that's a transform.

82
00:05:03.980 --> 00:05:05.210
I know how to do that, I can pull out map.

83
00:05:06.480 --> 00:05:09.570
Or even if it doesn't look yet
like a transform, but

84
00:05:09.570 --> 00:05:12.670
you're trying to figure out the cleanest
and most straightforward way of expressing

85
00:05:12.670 --> 00:05:15.610
a solution to the problem, maybe
something will go off in your head and

86
00:05:15.610 --> 00:05:19.260
you'll say, I have an instinct that this
is probably something I could do with map.

87
00:05:19.260 --> 00:05:21.960
I can wrap this value in an array and
do it with a map and

88
00:05:21.960 --> 00:05:24.230
that will make more sense.

89
00:05:24.230 --> 00:05:25.420
So it's those instincts.

90
00:05:25.420 --> 00:05:28.130
It's those pulling solutions
out of thin air thing

91
00:05:28.130 --> 00:05:32.910
that seems to be how functional
programmers are so good at what they do.

92
00:05:32.910 --> 00:05:34.637
That's just an observation that I'll make,

93
00:05:34.637 --> 00:05:36.919
and we will see a little bit
of that as we go through.

