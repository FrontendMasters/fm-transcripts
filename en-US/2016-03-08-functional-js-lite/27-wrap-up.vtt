WEBVTT

1
00:00:00.000 --> 00:00:03.755
[MUSIC]

2
00:00:03.755 --> 00:00:08.000
&gt;&gt; Kyle Simpson: We started with basically
not a lot of assumption about functional

3
00:00:08.000 --> 00:00:11.270
programming and we observed side effects.

4
00:00:11.270 --> 00:00:13.860
Side effects are when
a function does something

5
00:00:13.860 --> 00:00:15.560
in addition to it's direct effect.

6
00:00:15.560 --> 00:00:18.750
And in addition to it]s direct return
value it has some other effect.

7
00:00:18.750 --> 00:00:22.470
And that can be as simple as
printing something the console, or

8
00:00:22.470 --> 00:00:24.650
as complicated as changing some state,

9
00:00:24.650 --> 00:00:27.930
changing some variable,
in the other parts of our program.

10
00:00:27.930 --> 00:00:32.340
That's complicated not because if that
function relies on that variable,

11
00:00:32.340 --> 00:00:35.130
we have to know, how many times
the function's been called to be able to

12
00:00:35.130 --> 00:00:39.520
predict its outcome, but it's also
complicated because if there's a variable

13
00:00:39.520 --> 00:00:43.440
hanging out in free space,
that our function's relying upon,

14
00:00:43.440 --> 00:00:46.390
somebody else can change that variable and
change out from underneath.

15
00:00:46.390 --> 00:00:49.570
It's like pulling the rug out from
underneath you, changing what you expect.

16
00:00:49.570 --> 00:00:53.840
So that's one of the fundamental
motivations for functional programming,

17
00:00:53.840 --> 00:00:57.329
is to eliminate all that complexity
by doing what we call what?

18
00:00:58.929 --> 00:01:01.366
&gt;&gt; Kyle Simpson: What's the opposite
of these side effect functions?

19
00:01:01.366 --> 00:01:02.523
&gt;&gt; Speaker 2: Pure.

20
00:01:02.523 --> 00:01:03.521
&gt;&gt; Kyle Simpson: Pure functions.

21
00:01:04.550 --> 00:01:08.170
Pure functions operate only on
the stuff that they were given.

22
00:01:08.170 --> 00:01:11.180
They have a direct return
result if necessary.

23
00:01:11.180 --> 00:01:13.410
So they don't have any side
effects in the outside world,

24
00:01:13.410 --> 00:01:17.000
which means all of that complexity that
I just talked about becomes a non issue.

25
00:01:18.320 --> 00:01:20.590
Can you write an entirely pure program?

26
00:01:23.230 --> 00:01:25.600
Yeah, theoretically, yeah.

27
00:01:25.600 --> 00:01:27.220
It's gonna do anything?

28
00:01:27.220 --> 00:01:28.120
Not observable.

29
00:01:30.350 --> 00:01:32.940
[LAUGH] The fundamental definition
of observation is a side effect.

30
00:01:33.998 --> 00:01:39.180
So we're gonna have to have
some sort of cheat in there,

31
00:01:39.180 --> 00:01:42.780
and as we talk about functional
programming languages, they have for

32
00:01:42.780 --> 00:01:45.120
example, in Haskell,
they call it the IMO nav.

33
00:01:45.120 --> 00:01:49.506
Itâ€™s a special exception in there
that allows you to do some IO in

34
00:01:49.506 --> 00:01:51.952
a nonfunctional or non-pure way.

35
00:01:54.103 --> 00:01:56.450
&gt;&gt; Kyle Simpson: In JavaScript,
we have a lot more freedom.

36
00:01:56.450 --> 00:01:59.930
Languages like Scala are the same way,
more freedom, we can choose as much or

37
00:01:59.930 --> 00:02:02.340
how little of functional
programming we wrap in.

38
00:02:03.500 --> 00:02:04.990
So after we talked about pure functions,

39
00:02:04.990 --> 00:02:07.480
we talked about composing
functions together.

40
00:02:07.480 --> 00:02:10.950
So if you had an impure function
you can wrap a function around it,

41
00:02:10.950 --> 00:02:12.360
produce a pure interface.

42
00:02:12.360 --> 00:02:16.110
And now you've preserved the notion of
purity and we pass in the universe.

43
00:02:16.110 --> 00:02:19.480
And then we can compose multiple
pure functions together.

44
00:02:19.480 --> 00:02:23.540
By instead of assigning the end result to
some variable that some state that can be

45
00:02:23.540 --> 00:02:28.570
changed, simply calling the result of that
and passing it into some other function.

46
00:02:28.570 --> 00:02:32.130
And we can do that manually
by the call signature, or

47
00:02:32.130 --> 00:02:36.820
we can create compositional patterns that
we know will take two functions, and

48
00:02:36.820 --> 00:02:39.460
compose them in some specific way.

49
00:02:39.460 --> 00:02:43.220
So we talked about,
I called it composed two a way to

50
00:02:43.220 --> 00:02:47.310
specifically compose to functions and
assume two parameters to each one.

51
00:02:47.310 --> 00:02:50.520
So that's one way of
defining a composition plan.

52
00:02:51.850 --> 00:02:54.270
After we talked about composition
we moved in immutability.

53
00:02:54.270 --> 00:02:58.240
We talked about not only
immutable bindings.

54
00:02:58.240 --> 00:03:01.090
And immutable values but more importantly,

55
00:03:01.090 --> 00:03:06.070
the usage of values in
an immutably sufficient way.

56
00:03:06.070 --> 00:03:11.290
So we had utilities that could produce
a list that was changed in place or

57
00:03:11.290 --> 00:03:13.120
produce a whole new list.

58
00:03:13.120 --> 00:03:15.220
We actually started to see
that in JavaScript didn't we?

59
00:03:15.220 --> 00:03:20.630
We saw the difference with
something like slice,

60
00:03:20.630 --> 00:03:22.270
that doesn't change the array in place,

61
00:03:22.270 --> 00:03:26.760
it produces a new array, a new list,
that's a subset of the previous list.

62
00:03:27.780 --> 00:03:32.100
So using the principles of immutable
values, we create a new value every time

63
00:03:32.100 --> 00:03:35.040
we create a new list every time
rather than mutating a list in place.

64
00:03:38.210 --> 00:03:42.980
After we talked about immutability,
we moved into a discussion of closure.

65
00:03:42.980 --> 00:03:47.830
Closure being a way to wrap state around,
wrap a value,

66
00:03:47.830 --> 00:03:51.300
some state in a function and
then that function can move around and

67
00:03:51.300 --> 00:03:53.669
any time we call that function,
we can get that state back out.

68
00:03:54.770 --> 00:03:56.070
Then we talked about recursion.

69
00:03:56.070 --> 00:03:58.120
Different ways of using recursion.

70
00:03:58.120 --> 00:03:59.980
Then we moved into our list operation.

71
00:04:01.430 --> 00:04:05.380
And I hope by this point you now have
all those little fundamental legos.

72
00:04:05.380 --> 00:04:06.250
Those building blocks.

73
00:04:07.320 --> 00:04:10.380
So start using some of the principles
of functional programming.

74
00:04:10.380 --> 00:04:16.360
But without being overburdened by all
the traditional academic terminology and

75
00:04:16.360 --> 00:04:17.120
understanding.

76
00:04:17.120 --> 00:04:19.350
That is not to disparage those things and
to say,

77
00:04:19.350 --> 00:04:20.860
that functional programming is bad.

78
00:04:20.860 --> 00:04:22.290
I think it's fantastic.

79
00:04:23.510 --> 00:04:25.300
I've been at this 17 years and

80
00:04:25.300 --> 00:04:28.300
every time I have tried to learn
it from that path, I've failed.

81
00:04:29.580 --> 00:04:31.640
I failed to be able to
understand all that terminology.

82
00:04:31.640 --> 00:04:34.660
And so at some point, I said,
can I get some of the benefits here, but

83
00:04:34.660 --> 00:04:35.950
just kind of in a basic way?

84
00:04:35.950 --> 00:04:39.400
And that's where functional
light programming comes from.

85
00:04:39.400 --> 00:04:42.240
So hopefully, that's another tool that
you can add to your bag of tricks.

86
00:04:42.240 --> 00:04:46.270
And it should be something
that you can compose

87
00:04:46.270 --> 00:04:49.330
into more sophisticated understandings
as you continue your learning path.

88
00:04:50.650 --> 00:04:53.510
Are there any other questions
that we can answer?

89
00:04:53.510 --> 00:04:55.003
Before we wrap up this workshop.

90
00:05:02.665 --> 00:05:03.740
&gt;&gt; Kyle Simpson: Not a single one?

91
00:05:05.400 --> 00:05:10.990
Maybe it's that afternoon lull,
all that good Thai food, okay.

92
00:05:10.990 --> 00:05:13.540
Well it's been an honor teaching you
about functional light programming,

93
00:05:13.540 --> 00:05:15.940
I hope that you will experiment
with some of these things.

94
00:05:15.940 --> 00:05:19.490
If you have any thoughts or feedback,
again this is my contact info,

95
00:05:19.490 --> 00:05:21.710
I'd love for you to reach out for that.

96
00:05:21.710 --> 00:05:23.130
So we'll call it a rap.

97
00:05:23.130 --> 00:05:23.710
Thank you very much.

