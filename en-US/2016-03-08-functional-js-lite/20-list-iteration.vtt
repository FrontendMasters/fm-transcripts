WEBVTT

1
00:00:00.000 --> 00:00:03.898
[MUSIC]

2
00:00:03.898 --> 00:00:04.659
&gt;&gt; Kyle Simpson: List Iteration.

3
00:00:04.659 --> 00:00:08.243
I have the exclamation marks here because
I wanna remind you that even though this

4
00:00:08.243 --> 00:00:09.402
is one of those helpers and

5
00:00:09.402 --> 00:00:12.829
it oftentimes gets lumped in with
the other functional programming things,

6
00:00:12.829 --> 00:00:15.960
most people say, don't do this one and
you'll see very quickly why.

7
00:00:18.030 --> 00:00:22.588
If I made an iterate function, for
example, I wanted to take my array and

8
00:00:22.588 --> 00:00:24.849
log out all the values in the array.

9
00:00:24.849 --> 00:00:28.947
Cuz you notice I'm not actually performing
an operation on the list to change

10
00:00:28.947 --> 00:00:32.869
something, I'm just performing
a operation with the value of the list.

11
00:00:32.869 --> 00:00:37.668
But what's the only way that
doing that would mean anything?

12
00:00:37.668 --> 00:00:39.629
Is if my predicate had a side effect,
right?

13
00:00:42.189 --> 00:00:44.924
&gt;&gt; Kyle Simpson: Some side effect,
whether it's a console.log, or

14
00:00:44.924 --> 00:00:49.510
changing it in the original array, like
an in place change or something like that.

15
00:00:49.510 --> 00:00:52.190
The only reason that a list
iteration would make any sense and

16
00:00:52.190 --> 00:00:55.520
do anything useful to us at all is
if the predicate had a side effect.

17
00:00:57.090 --> 00:01:00.370
We can probably spot why that's not
the favorite tool in a functional

18
00:01:00.370 --> 00:01:01.020
programmer's bag.

19
00:01:02.530 --> 00:01:06.400
So most functional programmers would
tell you never use the forEach,

20
00:01:06.400 --> 00:01:07.510
cuz it's all about side effects.

21
00:01:09.590 --> 00:01:13.019
Now, the problem with that is that
sometimes I do want side effects [LAUGH].

22
00:01:13.019 --> 00:01:15.566
Which is why I call this
functional programming light,

23
00:01:15.566 --> 00:01:19.099
because I don't wanna be restricted to
only doing purely functional stuff.

24
00:01:19.099 --> 00:01:23.214
There are times when I want to iterate
over a list and have some side effects and

25
00:01:23.214 --> 00:01:25.808
that's why I use for
agent as a tool in my bag, but

26
00:01:25.808 --> 00:01:29.890
I use it knowing that it's not the same
thing as my other functional tricks.

27
00:01:31.340 --> 00:01:33.970
It's different and
I use it that way on purpose.

28
00:01:33.970 --> 00:01:37.220
There are people that will tell you,
no no, you should iterate with a map.

29
00:01:37.220 --> 00:01:38.330
Can you iterate with map?

30
00:01:38.330 --> 00:01:39.540
Of course you can.

31
00:01:39.540 --> 00:01:45.680
You can iterate with map where its
predicate returns the same value, right?

32
00:01:45.680 --> 00:01:47.890
Whatever function you
pass as that predicate,

33
00:01:47.890 --> 00:01:51.720
if it returns the same thing it got,
that's the same thing as iterating, right?

34
00:01:53.530 --> 00:01:56.940
That's what a functional programmer
tells you that's what you ought to do.

35
00:01:56.940 --> 00:01:58.640
No.
That's not what I would do.

36
00:01:58.640 --> 00:02:03.370
ForEach is the better tool if I want to
produce a side effect for each thing.

37
00:02:04.440 --> 00:02:05.409
So that's the forEach function.

38
00:02:10.109 --> 00:02:12.250
&gt;&gt; Kyle Simpson: All right,
any questions about our list operations?

39
00:02:14.200 --> 00:02:16.640
Those are other tools that we have.

40
00:02:16.640 --> 00:02:18.320
So we go back over it.

41
00:02:18.320 --> 00:02:21.810
We've gone over a whole bunch
of these little basic things.

42
00:02:21.810 --> 00:02:25.130
We haven't really fully covered
how we put all of them together.

43
00:02:25.130 --> 00:02:28.590
That's what exercise four is gonna try to
bring some of that to more concreteness

44
00:02:28.590 --> 00:02:30.550
and we'll do that after our lunch break.

45
00:02:30.550 --> 00:02:33.600
But I just wanted to point
out that we've covered

46
00:02:33.600 --> 00:02:36.860
quite a bit of ground here
in just a couple of hours.

47
00:02:36.860 --> 00:02:40.320
From the very beginning, we talked about
pure versus unpure, and side effects.

48
00:02:40.320 --> 00:02:42.720
And then we talked about
function composition and

49
00:02:42.720 --> 00:02:47.590
how we can compose the function
to take it from impure to pure.

50
00:02:47.590 --> 00:02:52.760
We can compose two functions so that
we're not creating impure side effects.

51
00:02:52.760 --> 00:02:56.110
Then we talked about immutability and
we talked about the value of,

52
00:02:56.110 --> 00:02:59.600
not just the mutable value but
the immutable way that we use the value.

53
00:02:59.600 --> 00:03:02.918
That's the more important part
to a functional programmer.

54
00:03:02.918 --> 00:03:06.599
Then we talked about closure,
keeping state inside of a function.

55
00:03:06.599 --> 00:03:09.166
We talked about recursion and
why recursion can be useful,

56
00:03:09.166 --> 00:03:11.079
a graceful way of expressing our programs.

57
00:03:11.079 --> 00:03:14.650
Then we talked about talked
about these list operations.

58
00:03:14.650 --> 00:03:16.580
Transform, exclude.

59
00:03:17.610 --> 00:03:18.829
Transform's called map.

60
00:03:18.829 --> 00:03:23.549
Exclude's called filter.

61
00:03:23.549 --> 00:03:27.540
What's compose called?

62
00:03:27.540 --> 00:03:28.400
Reduce.

63
00:03:28.400 --> 00:03:31.144
And finally iterate is called forEach.

