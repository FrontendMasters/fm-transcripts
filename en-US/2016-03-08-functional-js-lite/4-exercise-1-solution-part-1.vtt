WEBVTT

1
00:00:00.000 --> 00:00:04.208
[MUSIC]

2
00:00:04.208 --> 00:00:08.148
&gt;&gt; Kyle Simpson: We said in the slides,
before I introed the exercise,

3
00:00:08.148 --> 00:00:13.631
we said in the slides portion that one
of the ways to turn a stateful program,

4
00:00:13.631 --> 00:00:16.715
a side effect program into a pure program,

5
00:00:16.715 --> 00:00:19.825
is to pass in the entire
universe of state.

6
00:00:19.825 --> 00:00:21.870
Now there's lots of
different ways to do that.

7
00:00:21.870 --> 00:00:24.172
You can pass it in as an object,
of course.

8
00:00:24.172 --> 00:00:26.742
Here, we're just being very
simple to illustrate the concept.

9
00:00:26.742 --> 00:00:29.430
There's a couple of variables
that represent the state.

10
00:00:29.430 --> 00:00:33.590
So what are those variables that represent
the state, and let's look closely.

11
00:00:33.590 --> 00:00:36.790
Does x represent the state of our program?

12
00:00:37.930 --> 00:00:38.980
Not really.

13
00:00:38.980 --> 00:00:42.840
x is a parameter to the universe, but
it's not really part of the state.

14
00:00:42.840 --> 00:00:48.300
So we don't necessarily need to
represent x in some stateful fashion,

15
00:00:48.300 --> 00:00:49.390
although we're gonna need x.

16
00:00:49.390 --> 00:00:51.650
So it's gonna need to be
one of our arguments.

17
00:00:51.650 --> 00:00:52.613
Well, what about y?

18
00:00:52.613 --> 00:00:55.020
y clearly is something
that changes over time.

19
00:00:55.020 --> 00:00:56.660
It's incremented there on line 2.

20
00:00:56.660 --> 00:00:59.070
Something that changes over time,
it is part of our state.

21
00:00:59.070 --> 00:01:02.630
So we're gonna need to pass in
that initialization of that state,

22
00:01:03.780 --> 00:01:06.680
initializing it, of course,
to 5, like we do on line 6.

23
00:01:06.680 --> 00:01:08.670
So, y is part of our state.

24
00:01:08.670 --> 00:01:13.530
And z, is z part of our universe?

25
00:01:13.530 --> 00:01:15.870
Does z change over time?

26
00:01:15.870 --> 00:01:19.550
Well, z is an output of our program, but

27
00:01:19.550 --> 00:01:23.530
it's not something that
is reused each time.

28
00:01:23.530 --> 00:01:26.240
It's reset, and
we just assign it on line 3, and

29
00:01:26.240 --> 00:01:28.796
it doesn't matter whatever
value it previously had.

30
00:01:28.796 --> 00:01:32.390
So, z is not actually something we need
to import as part of the state of our

31
00:01:32.390 --> 00:01:36.540
universe, it's just something that's
going to represent an output, okay?

32
00:01:36.540 --> 00:01:39.670
So, all of that notion is just
to help you with the concept.

33
00:01:39.670 --> 00:01:42.730
The syntactic things aren't gonna
look very much different from

34
00:01:42.730 --> 00:01:44.300
what we already do.

35
00:01:44.300 --> 00:01:47.209
So, let's use a bar,
and I used, by the way,

36
00:01:47.209 --> 00:01:51.762
these function boo bar sorts of things,
because if I gave you too heavy of

37
00:01:51.762 --> 00:01:56.467
something that was kind of a specific
problem domain, then it starts to get

38
00:01:56.467 --> 00:02:01.545
a little bit like your brain has to not
only wrap your head around these concepts,

39
00:02:01.545 --> 00:02:06.659
but your brain also has to wrap your head
around that particular problem domain.

40
00:02:06.659 --> 00:02:09.066
And if it's one you're familiar with,
great, if not, well,

41
00:02:09.066 --> 00:02:10.330
now you have two things to learn.

42
00:02:10.330 --> 00:02:12.490
And I want you to have as few
things to learn as possible.

43
00:02:12.490 --> 00:02:15.130
So that's why I use the foo and
the bar thing.

44
00:02:15.130 --> 00:02:17.650
But we will, to whatever extent possible,

45
00:02:17.650 --> 00:02:20.220
try to make these things a little
bit more concrete as we go along.

46
00:02:21.244 --> 00:02:25.810
All right, so, one thing I'm gonna do, and
this is just a complete pure side note,

47
00:02:25.810 --> 00:02:28.950
but I have taken recently
in my programming

48
00:02:28.950 --> 00:02:32.590
to inverting the way I normally used
to write the functions at the top and

49
00:02:32.590 --> 00:02:36.150
the executable code at the bottom of any
particular scope, any particular file,

50
00:02:36.150 --> 00:02:37.580
or any particular function.

51
00:02:37.580 --> 00:02:39.440
And I now do the reverse.

52
00:02:39.440 --> 00:02:43.430
And the reason I do that is because it's
much easier, I've found this maintenance

53
00:02:43.430 --> 00:02:46.565
wise to be much easier to open up
a file or to look at a function, and

54
00:02:46.565 --> 00:02:49.486
at the very top,
be able to see everything that it's doing.

55
00:02:49.486 --> 00:02:54.014
And then I rely upon function decorations
and the fact that function decorations

56
00:02:54.014 --> 00:02:56.890
are hoisted to,
that they'll be definable soon.

57
00:02:56.890 --> 00:03:00.380
So I can call foo before it's
technically been declared,

58
00:03:00.380 --> 00:03:04.350
because JavaScript is compiled and
the scope is gonna take care of that

59
00:03:04.350 --> 00:03:07.050
with the shorthand way of
talking about that is hoisting.

60
00:03:07.050 --> 00:03:09.646
I talk more about that in the books and
in the advanced training video,

61
00:03:09.646 --> 00:03:11.020
if you're more interested in that.

62
00:03:11.020 --> 00:03:13.450
But I'm gonna move the function
to the bottom just because

63
00:03:13.450 --> 00:03:15.950
I'm trying to practice that more
as a discipline for myself.

64
00:03:15.950 --> 00:03:18.790
I find that to make code a little
bit easier to understand.

65
00:03:18.790 --> 00:03:23.420
So why is it going to be
a variable like a local variable?

66
00:03:23.420 --> 00:03:27.568
It's gonna be something
that's passed in for sure.

67
00:03:27.568 --> 00:03:32.160
And in fact, we're also gonna pass in x.

68
00:03:32.160 --> 00:03:34.640
Cuz we need that x value to be used.

69
00:03:34.640 --> 00:03:38.780
So I'm not gonna declare y or
x as variables, but

70
00:03:38.780 --> 00:03:42.820
I do need a z because I'm gonna
need to be able to return a z.

71
00:03:42.820 --> 00:03:45.480
So the foo function,
as we know it, takes an x.

72
00:03:45.480 --> 00:03:48.160
Now I don't have to pass the x in.

73
00:03:48.160 --> 00:03:51.330
I could take the x out, and
just simply reference it.

74
00:03:51.330 --> 00:03:54.730
You'll notice there that on line 8,
I have an x, and I can reference that.

75
00:03:54.730 --> 00:03:56.150
That's gonna be called closure.

76
00:03:56.150 --> 00:03:57.640
But we're not getting to
the closure point yet.

77
00:03:57.640 --> 00:03:59.380
So I'm gonna formally pass in the x.

78
00:04:00.640 --> 00:04:03.640
And that means the x needs
to be passed in here.

79
00:04:03.640 --> 00:04:05.390
Whatever the x was given to my universe,

80
00:04:05.390 --> 00:04:07.980
I'm gonna pass that in to
this inner impure function.

81
00:04:09.210 --> 00:04:11.370
Now you notice that I'm changing a y.

82
00:04:11.370 --> 00:04:16.710
That, of course, is changing it as
a result of that lexical scope,

83
00:04:16.710 --> 00:04:18.460
that closure over the y.

84
00:04:18.460 --> 00:04:20.770
And also the z, it's changing the z.

85
00:04:20.770 --> 00:04:23.080
So I'm gonna call the function foo.

86
00:04:23.080 --> 00:04:24.986
And then I know that my y and

87
00:04:24.986 --> 00:04:30.210
my z have been set to their proper
values for the end of my program.

88
00:04:30.210 --> 00:04:32.980
So what I need to do,
just simply return them, and

89
00:04:32.980 --> 00:04:36.800
I'm gonna encapsulate them in something,
and a functional programmer usually turns

90
00:04:36.800 --> 00:04:39.480
to an array when they wanna
encapsulate some value.

91
00:04:39.480 --> 00:04:42.650
Lists are particularly convenient,
and we'll get more to lists later.

92
00:04:42.650 --> 00:04:45.080
So, I'm just gonna simply return my y and
my z.

93
00:04:45.080 --> 00:04:46.810
Now, you notice I'm not returning x.

94
00:04:46.810 --> 00:04:48.430
I could, but

95
00:04:48.430 --> 00:04:52.240
x isn't something that's changing as
a result of any of what we're doing.

96
00:04:52.240 --> 00:04:54.990
It's just simply an input to my universe.

97
00:04:54.990 --> 00:04:57.020
It's a starting state,
it's an initial state, so

98
00:04:57.020 --> 00:04:58.660
I don't really need to return it.

99
00:04:58.660 --> 00:05:00.910
So I really only need to
return that which changed,

100
00:05:00.910 --> 00:05:03.780
that which would be something
that somebody wanted to observe.

101
00:05:03.780 --> 00:05:07.340
Now, if somebody didn't care about
observing y, for example, of course,

102
00:05:07.340 --> 00:05:09.380
this program changes y,
so you probably do.

103
00:05:09.380 --> 00:05:12.908
But if you didn't care about changing y,
you wouldn't even wanna return that.

104
00:05:12.908 --> 00:05:16.210
You only wanna return that which
somebody would wanna observe.

105
00:05:16.210 --> 00:05:18.560
Okay, so that's our bar function.

106
00:05:18.560 --> 00:05:21.450
And it's gonna execute the foo function,
and

107
00:05:21.450 --> 00:05:24.800
then return the result of
whatever those values are.

108
00:05:24.800 --> 00:05:29.560
Clearly on the inside, this function
is as impure as it gets, okay?

109
00:05:29.560 --> 00:05:31.300
Hopefully, everybody can agree with that.

110
00:05:31.300 --> 00:05:35.350
But from the outside perspective,
now, bar takes in a universe, and

111
00:05:35.350 --> 00:05:37.820
it returns back a result.

112
00:05:37.820 --> 00:05:40.640
And nothing on the outside of bar
changes a result of calling bar,

113
00:05:40.640 --> 00:05:44.510
which means we can call bar over and over
and over again with the same inputs and

114
00:05:44.510 --> 00:05:45.300
get the same outputs.

115
00:05:46.430 --> 00:05:47.720
That's how we've made it pure.

116
00:05:47.720 --> 00:05:51.756
So just to illustrate that, instead of
calling these foo variables down here,

117
00:05:51.756 --> 00:05:53.284
I'm gonna call a bar.

118
00:05:53.284 --> 00:05:55.460
I'm gonna pass in an x,
which in this case, was the 20, and

119
00:05:55.460 --> 00:05:56.880
I'm going to pass in a y.

120
00:05:56.880 --> 00:05:58.990
You remember, I've taken it out now,
but remember,

121
00:05:58.990 --> 00:06:02.410
our initial value state that
we cared about with y was 5.

122
00:06:02.410 --> 00:06:07.020
So if I pass in the value 20 and

123
00:06:07.020 --> 00:06:11.160
ask for the value 5 back,
what am I getting?

124
00:06:11.160 --> 00:06:14.831
Well, let's run through it just to make
sure, and then you can, of course,

125
00:06:14.831 --> 00:06:17.503
execute this in the console
of your browser if you care.

126
00:06:17.503 --> 00:06:21.596
But if I pass in 20 as x,
20's gonna come in as x.

127
00:06:21.596 --> 00:06:26.750
If I pass in 5 as y, 5 is gonna become 6.

128
00:06:26.750 --> 00:06:30.820
And then I'm gonna say 6 * 20 which
is 120, and that's gonna be my z.

129
00:06:30.820 --> 00:06:33.610
So what am I expecting
back as my return value?

130
00:06:33.610 --> 00:06:37.714
I'm expecting back an array with 6 and
120.

131
00:06:37.714 --> 00:06:40.150
And if you try it, you'll notice
that you get that value back, okay?

132
00:06:41.520 --> 00:06:46.760
Now, if I called bar(20,
5) again, I'm gonna

133
00:06:46.760 --> 00:06:50.160
get the exact same state back because
now I'm dealing with a pure function.

134
00:06:50.160 --> 00:06:54.097
There are no side effects,
it's a pure function, okay?

135
00:06:54.097 --> 00:06:57.044
And of course, if I call bar with 25 and

136
00:06:57.044 --> 00:07:02.440
I call it with 6 now because 6 was my
new state that I'm observing from y.

137
00:07:02.440 --> 00:07:06.245
If I take that state and I pump that
back in as the starting point for

138
00:07:06.245 --> 00:07:10.540
my second run of this universe,
now 6 is gonna become 7.

139
00:07:10.540 --> 00:07:16.932
7*25, we're gonna get,
y is gonna be what now?

140
00:07:16.932 --> 00:07:17.828
&gt;&gt; Speaker 2: 7.

141
00:07:17.828 --> 00:07:20.070
&gt;&gt; Kyle Simpson: 7, and
we're gonna get 125 back, okay.

