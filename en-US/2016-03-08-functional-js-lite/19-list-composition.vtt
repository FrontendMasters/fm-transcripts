WEBVTT

1
00:00:00.321 --> 00:00:03.921
[MUSIC]

2
00:00:03.921 --> 00:00:07.679
&gt;&gt; Kyle: Another thing we might want to do
with a list of values is to compose those

3
00:00:07.679 --> 00:00:09.420
values together.

4
00:00:09.420 --> 00:00:11.880
Remember I said earlier, so
I want to remind you, we're

5
00:00:11.880 --> 00:00:16.840
not talking when I say list composition,
I don't mean composing two lists together.

6
00:00:17.870 --> 00:00:19.950
We have a method for
that it's called concurrent.

7
00:00:19.950 --> 00:00:25.380
But that isn't as traditionally thought
of from a functional perspective.

8
00:00:25.380 --> 00:00:30.250
So what we're talking about here is
composition of items within a list.

9
00:00:30.250 --> 00:00:31.650
Either a full composition,

10
00:00:31.650 --> 00:00:36.350
which is what most people mean by it or,
sometimes it's just a partial composition.

11
00:00:36.350 --> 00:00:37.240
That's also valid.

12
00:00:38.890 --> 00:00:41.760
And that goes by the name in
functional programming of

13
00:00:41.760 --> 00:00:42.820
typically it's called a reduce.

14
00:00:45.300 --> 00:00:48.530
So what are some examples of
a reduction that we might do,

15
00:00:48.530 --> 00:00:50.344
a composition that we
might do across a list?

16
00:00:50.344 --> 00:00:52.780
See I have a list of numbers,

17
00:00:52.780 --> 00:00:56.580
remember I had a transform where I
multiplied all those numbers by 2?

18
00:00:56.580 --> 00:01:00.280
What if now I wanted to say I want
to take this list of numbers and

19
00:01:00.280 --> 00:01:01.289
add all of them together.

20
00:01:03.060 --> 00:01:06.230
I want the summation of
all the items in my list.

21
00:01:06.230 --> 00:01:10.010
You can express the summation of
items in a list as a reduction,

22
00:01:10.010 --> 00:01:12.000
it is a composition of values.

23
00:01:12.000 --> 00:01:12.970
Now, what do I mean by that?

24
00:01:12.970 --> 00:01:17.790
I'm not trying to be too terminology heavy
here, composition is when I take value

25
00:01:17.790 --> 00:01:20.630
A and value B, and
I smush them together to get value C.

26
00:01:21.820 --> 00:01:23.660
Whatever that means.

27
00:01:23.660 --> 00:01:26.550
So for numbers it might be adding,
or it might be multiplying, or

28
00:01:26.550 --> 00:01:28.150
it might be dividing.

29
00:01:28.150 --> 00:01:31.360
For functions it might be passing
one function into another function.

30
00:01:32.790 --> 00:01:36.870
For promises it might be chaining
one promise off of another promise.

31
00:01:36.870 --> 00:01:40.090
There's a nearly infinite number of ways
that you could think about taking any

32
00:01:40.090 --> 00:01:43.310
two arbitrary values and
composing them into some third value.

33
00:01:44.780 --> 00:01:49.140
Again for illustration purposes we are
using numbers, but this is a more general

34
00:01:49.140 --> 00:01:54.290
concept, composition of values, and
we turn to the reduce function.

35
00:01:54.290 --> 00:01:59.850
Now, just as a quick heads up,
the reduce function

36
00:01:59.850 --> 00:02:03.110
is more complex than the previous two,
that's why I did the first two.

37
00:02:03.110 --> 00:02:08.270
It's more complex than the first two,
and it is possible to use

38
00:02:08.270 --> 00:02:12.960
reduce in a non-pure way.

39
00:02:12.960 --> 00:02:15.060
In fact,
it's possible to do all of these, but

40
00:02:15.060 --> 00:02:20.460
it's kinda easy to do non-pure
programming with the reduce function.

41
00:02:21.680 --> 00:02:26.160
So, it's a tool that has more power to it,
but also a tool that you have to use

42
00:02:26.160 --> 00:02:29.230
responsibly if you want
to functionally program.

43
00:02:30.560 --> 00:02:34.420
So assuming that you're trying to be
functionally program minded about it, or

44
00:02:34.420 --> 00:02:37.810
as I call it functional lite programming,
assuming that's your goal,

45
00:02:37.810 --> 00:02:41.280
you have to be a little bit more
careful about how you use it.

46
00:02:41.280 --> 00:02:46.320
So list composition or reducing,
what would that look like?

47
00:02:46.320 --> 00:02:49.010
Well I could have a predicate
function like mult.

48
00:02:49.010 --> 00:02:52.380
And importantly here, because I'm doing a
composition, that means I need two values.

49
00:02:53.440 --> 00:02:57.560
So I'm gonna have an initial value,
which I'm calling x here and

50
00:02:57.560 --> 00:02:58.880
another value I'm calling y.

51
00:03:00.280 --> 00:03:03.500
Now I've named them x and y because
in the problem domain of multiplying

52
00:03:03.500 --> 00:03:05.680
we usually think about x times y.

53
00:03:05.680 --> 00:03:07.950
But if your problem domain
was something different,

54
00:03:07.950 --> 00:03:10.310
you might name those
parameters differently.

55
00:03:10.310 --> 00:03:15.560
The most common name for those parameters
to the predicate that's used in

56
00:03:15.560 --> 00:03:18.580
the composed option or
the reduce function.

57
00:03:18.580 --> 00:03:21.840
The most common name is they call
the first one the accumulator.

58
00:03:22.840 --> 00:03:24.000
And the second one, the value.

59
00:03:25.490 --> 00:03:27.710
So let me explain how that works.

60
00:03:27.710 --> 00:03:31.520
By way of looking at the implementation
of it that I have here called compose.

61
00:03:31.520 --> 00:03:34.810
You notice compose actually
takes three parameters, not two.

62
00:03:34.810 --> 00:03:36.240
Takes an array, it takes a predicate.

63
00:03:36.240 --> 00:03:39.030
But it also takes an initial value.

64
00:03:40.250 --> 00:03:41.270
Why?

65
00:03:41.270 --> 00:03:46.170
Because this is still going to be called
against every element in our list.

66
00:03:46.170 --> 00:03:50.550
But the first element in the list needs to
have something to compose with doesn't it?

67
00:03:52.210 --> 00:03:53.820
We haven't done any composition yet.

68
00:03:53.820 --> 00:03:56.990
And we're gonna pass it into a composition
we need to pass something else in.

69
00:03:56.990 --> 00:03:58.180
You know what we're gonna pass?

70
00:03:59.185 --> 00:03:59.875
An initial value.

71
00:03:59.875 --> 00:04:04.465
And then those would be composed together
and now we have a running total,

72
00:04:04.465 --> 00:04:07.560
which is why this is oftentimes
referred to as an accumulator.

73
00:04:07.560 --> 00:04:12.075
We have a value now that was the result
of the first composition, and

74
00:04:12.075 --> 00:04:16.375
then we have the second item in the list,
so we take those two and pass them in.

75
00:04:16.375 --> 00:04:17.415
And those two get composed.

76
00:04:18.690 --> 00:04:21.890
And now we have this as our value and
the third item in the list and

77
00:04:21.890 --> 00:04:24.020
those two get composed,
so that's how it works.

78
00:04:24.020 --> 00:04:25.630
That's why we need an initial value.

79
00:04:25.630 --> 00:04:26.950
What would the initial value,

80
00:04:26.950 --> 00:04:30.180
what the most appropriate initial
value would be for summation?

81
00:04:32.140 --> 00:04:34.070
Zero.
What would be the most appropriate

82
00:04:34.070 --> 00:04:36.550
initial value for multiplication?

83
00:04:36.550 --> 00:04:37.610
One.
Everybody see why?

84
00:04:38.610 --> 00:04:41.480
Cuz those are both the identity
values in those operations.

85
00:04:41.480 --> 00:04:43.805
Zero doesn't make a change
to this summation,

86
00:04:43.805 --> 00:04:46.710
one doesn't make a change to
the multiplication or the division.

87
00:04:46.710 --> 00:04:47.825
So, great, excellent.

88
00:04:47.825 --> 00:04:54.320
What about a function composition?

89
00:04:54.320 --> 00:04:56.340
What would be a good initial function?

90
00:04:58.320 --> 00:05:03.480
A which returns everything
back that it got.

91
00:05:03.480 --> 00:05:05.600
So the more complex your value types,

92
00:05:05.600 --> 00:05:09.074
the more you have to think carefully
about what would my initial value be.

93
00:05:09.074 --> 00:05:13.911
If I were doing a composition of promises,
like chaining them together,

94
00:05:13.911 --> 00:05:16.860
what would my initial value be?

95
00:05:16.860 --> 00:05:18.720
An initially resolved promise,
for example.

96
00:05:20.340 --> 00:05:23.240
So when we're thinking
about composition you

97
00:05:23.240 --> 00:05:26.170
have to also think about the initial
value, that's an extra complication.

98
00:05:27.690 --> 00:05:30.480
I've got my total here,
which because I'm doing math,

99
00:05:30.480 --> 00:05:32.630
I can just do mathematics here.

100
00:05:32.630 --> 00:05:35.150
I would need to have a more
complex implementation if I were

101
00:05:35.150 --> 00:05:36.429
doing something non-mathematic.

102
00:05:38.810 --> 00:05:40.510
Well maybe not a different implementation.

103
00:05:40.510 --> 00:05:42.130
But I'd probably call
the variables different.

104
00:05:42.130 --> 00:05:44.950
I wouldn't call it total or whatever.

105
00:05:44.950 --> 00:05:47.640
But you'll notice that I call
the fn function with whatever

106
00:05:47.640 --> 00:05:49.700
the current value of total
is plus the new value.

107
00:05:49.700 --> 00:05:51.880
And then that's what
gets assigned to total.

108
00:05:51.880 --> 00:05:55.040
So that's how I do that whole compose,
compose, compose thing.

109
00:05:55.040 --> 00:05:58.080
And then I return total back out.

110
00:05:59.600 --> 00:06:01.330
So down I'm calling it on line 12.

111
00:06:01.330 --> 00:06:03.048
I just passed in the array one,
two, three, four, five.

112
00:06:03.048 --> 00:06:07.054
My predicate mults and I start with one
because that's the most appropriate

113
00:06:07.054 --> 00:06:08.940
initial value for this operation.

114
00:06:10.320 --> 00:06:13.680
It's important to know that this is
what we would call a full reduction or

115
00:06:13.680 --> 00:06:15.570
a full composition.

116
00:06:15.570 --> 00:06:18.170
Meaning that we started out with
a list and what do we end up with?

117
00:06:19.820 --> 00:06:22.010
Something very much not list.

118
00:06:22.010 --> 00:06:22.950
In this case a number.

119
00:06:24.150 --> 00:06:27.260
It's interesting to note that the
reduction here when it's a full reduction

120
00:06:27.260 --> 00:06:29.980
like that it's not really
chainable with the other

121
00:06:29.980 --> 00:06:31.520
functional programming things is it?

122
00:06:32.650 --> 00:06:35.909
Here's where we start to see the nit picks
that functional programmers have because

123
00:06:36.940 --> 00:06:37.860
now we don't have.

124
00:06:37.860 --> 00:06:43.370
Now we have a breakdown in the consistency
of our compositional pattern because

125
00:06:43.370 --> 00:06:48.560
if you needed to do some other mathematic
operation like a map on this and

126
00:06:48.560 --> 00:06:51.440
the end result was a number, you can't
just call map directly off of it.

127
00:06:51.440 --> 00:06:54.250
You're gonna have to take that and
put it into an array and

128
00:06:54.250 --> 00:06:56.660
then call map on the array or something.

129
00:06:56.660 --> 00:06:58.770
It's just some weird inconsistency.

130
00:06:58.770 --> 00:07:00.840
Usually your reduction,
especially if it's a full one,

131
00:07:00.840 --> 00:07:02.760
usually that's the last
step in your chain anyway.

132
00:07:02.760 --> 00:07:04.630
So it's usually not a big deal.

133
00:07:04.630 --> 00:07:07.400
But there have been places
where I've had this issue.

134
00:07:07.400 --> 00:07:09.850
So the other way to think about it,
I don't have a code snippet for this, but

135
00:07:09.850 --> 00:07:12.410
it is possible that a reduce
is not a full reduce.

136
00:07:14.900 --> 00:07:18.441
In other words, the end result of your
reduction might just be another list.

137
00:07:20.881 --> 00:07:25.739
&gt;&gt; Kyle: An example, we're gonna come back
to this later, but while you're thinking

138
00:07:25.739 --> 00:07:31.430
about it, an example, what if I wanted
to perform a unique operation on a list?

139
00:07:31.430 --> 00:07:33.340
What if I wanted to filter
out the list and say,

140
00:07:33.340 --> 00:07:36.040
this list needs to only
have unique values?

141
00:07:36.040 --> 00:07:38.080
I need to turn it from a list into a set,
basically.

142
00:07:39.740 --> 00:07:41.040
Well, we couldn't use filter.

143
00:07:41.040 --> 00:07:42.260
Why couldn't we use filter?

144
00:07:45.241 --> 00:07:49.206
&gt;&gt; Kyle: What was the one characteristic I
said about how filter gets used to solve

145
00:07:49.206 --> 00:07:49.860
problems?

146
00:07:54.470 --> 00:07:58.380
Remember, filter can only make its
decision based upon the value itself.

147
00:07:59.660 --> 00:08:01.010
That's the appropriate way of using it.

148
00:08:01.010 --> 00:08:03.620
There's ways to bastardize it, of course,
but that's the appropriate way of doing

149
00:08:03.620 --> 00:08:05.950
it, is making a decision
based on the value itself.

150
00:08:07.050 --> 00:08:10.450
Well, we can't unique an array based
on knowing the value itself, can we?

151
00:08:10.450 --> 00:08:12.560
We need something more context.

152
00:08:12.560 --> 00:08:16.090
So, actually, uniquing could be
implemented more effectively.

153
00:08:16.090 --> 00:08:19.960
And more traditionally with the reduce,
because what we could do is,

154
00:08:19.960 --> 00:08:22.660
our running accumulator
could be an empty list.

155
00:08:22.660 --> 00:08:24.700
The initial value could be an empty list,
and

156
00:08:24.700 --> 00:08:27.800
we could stick something in the list
only if it's not already in the list.

157
00:08:28.840 --> 00:08:33.360
So we could run through the entire
original list looking at values.

158
00:08:33.360 --> 00:08:36.680
And every time we're about to put
one into the new list we ask,

159
00:08:36.680 --> 00:08:39.930
is it not in the list yet,
is it not in the set yet.

160
00:08:39.930 --> 00:08:41.120
That's an example of uniquing.

161
00:08:41.120 --> 00:08:43.280
So that's what I would
call a partial reduction.

162
00:08:43.280 --> 00:08:45.540
Because the end result is still the list.

163
00:08:45.540 --> 00:08:47.560
But it's not a one to one mapping.

164
00:08:47.560 --> 00:08:50.000
It wasn't a filtering based
upon one individual value,

165
00:08:50.000 --> 00:08:51.570
it was something more complex.

166
00:08:51.570 --> 00:08:55.220
That's what I meant earlier when I
said reduce is way more complex.

167
00:08:55.220 --> 00:08:56.240
More powerful but

168
00:08:56.240 --> 00:09:00.040
there's also a bunch of ways that
you can use it in very impure ways.

169
00:09:00.040 --> 00:09:01.700
So, you have to be careful about that.

