WEBVTT

1
00:00:00.000 --> 00:00:04.014
[MUSIC]

2
00:00:04.014 --> 00:00:05.850
&gt;&gt; Kyle Simpson: The next thing we
want to talk about is immutability.

3
00:00:07.040 --> 00:00:12.883
Now, immutability, mutation,
immutability means non-mutation,

4
00:00:12.883 --> 00:00:16.158
non ability to, non ability to mutate.

5
00:00:16.158 --> 00:00:21.590
But this term evokes different
things in people's heads.

6
00:00:21.590 --> 00:00:26.840
So I wanna show you one thing that
is strictly speaking immutability,

7
00:00:26.840 --> 00:00:30.480
but isn't exactly the same thing as
what a functional programmer means

8
00:00:30.480 --> 00:00:32.410
by immutability, okay.

9
00:00:32.410 --> 00:00:35.930
So if I declare a variable called x,
if I say var x = 2,

10
00:00:35.930 --> 00:00:39.910
when I try to change it as I do on line 2,
it's allowed.

11
00:00:39.910 --> 00:00:41.990
But if I declare a constant,

12
00:00:41.990 --> 00:00:46.750
const being a new keyword added
in the ES6 version of JavaScript.

13
00:00:46.750 --> 00:00:49.530
And I try to change it on line five,
that will not be allowed.

14
00:00:49.530 --> 00:00:51.790
If I'm in strict mode,
it'll throw an error.

15
00:00:51.790 --> 00:00:52.830
If I'm in non-strict mode,

16
00:00:52.830 --> 00:00:55.620
it'll simply ignore the operation and
not allow it to occur.

17
00:00:57.110 --> 00:01:01.280
So a lot of people say, well,
const gives us immutable values.

18
00:01:01.280 --> 00:01:04.380
And that's completely and utterly false.

19
00:01:04.380 --> 00:01:07.150
The const keyword is not about
giving you immutable values.

20
00:01:08.240 --> 00:01:11.180
It is about giving you
an immutable assignment,

21
00:01:11.180 --> 00:01:15.910
or to be a little bit more programmer
speak about it, it's an immutable binding.

22
00:01:15.910 --> 00:01:17.230
To a value.

23
00:01:17.230 --> 00:01:21.970
So what we mean here is that Y can never
be reassigned to some other value.

24
00:01:21.970 --> 00:01:25.030
But we're actually not saying anything
at all about the value itself

25
00:01:25.030 --> 00:01:26.780
being unchangeable.

26
00:01:26.780 --> 00:01:30.880
In fact in JavaScript primitives
are by definition immutable.

27
00:01:30.880 --> 00:01:34.050
The value three can never actually
be changed to mean something

28
00:01:34.050 --> 00:01:35.510
different than three.

29
00:01:35.510 --> 00:01:39.070
And a string, even a string, we might
think of as being a mutable thing,

30
00:01:39.070 --> 00:01:42.350
because you might think of, I could go and
change a character, no you can't.

31
00:01:42.350 --> 00:01:47.210
Strings, primitive strings, are immutable,
primitive numbers are immutable,

32
00:01:47.210 --> 00:01:51.500
primitive booleans are immutable, so the
const keyword actually has nothing to do

33
00:01:51.500 --> 00:01:55.920
with declaring a mutable or
immutable value.

34
00:01:55.920 --> 00:01:57.070
Any more than var does.

35
00:01:58.350 --> 00:02:00.700
Var and
const are controlling the assignment, or

36
00:02:00.700 --> 00:02:03.870
the binding of a variable
to some particular value.

37
00:02:03.870 --> 00:02:05.410
This is illustrated on line seven.

38
00:02:05.410 --> 00:02:08.340
I do const z and I give it some object.

39
00:02:08.340 --> 00:02:11.080
Now, we know probably, most of you, that.

40
00:02:11.080 --> 00:02:16.910
Variables that hold values, which
are non-symbol primitives, that's objects,

41
00:02:16.910 --> 00:02:21.670
arrays, functions, those are always
held by reference, rather than by value.

42
00:02:21.670 --> 00:02:25.800
So z is actually a reference to the array,
rather than holding array itself.

43
00:02:25.800 --> 00:02:29.630
And what we're saying here is only

44
00:02:29.630 --> 00:02:34.110
that z will never point to any other
array than exactly that array.

45
00:02:34.110 --> 00:02:37.650
But we're not saying anything at
all about the nature of the array.

46
00:02:39.040 --> 00:02:42.990
In fact, as we see, line eight would not
allow us to change z to point somewhere

47
00:02:42.990 --> 00:02:44.760
else, even to a different array.

48
00:02:45.810 --> 00:02:48.040
But we can reach into
the contents of z and

49
00:02:48.040 --> 00:02:49.780
change them all day long
like we do on line nine.

50
00:02:51.810 --> 00:02:55.940
So const is not declaring
an immutable array, it is declaring

51
00:02:55.940 --> 00:03:00.210
an immutable variable called z bound
to that particular array by reference.

52
00:03:00.210 --> 00:03:03.680
So I want to make sure
we clear that up and

53
00:03:03.680 --> 00:03:07.689
I've written some blog posts about this
if you wanted to search on consts and

54
00:03:07.689 --> 00:03:10.890
get a [INAUDIBLE],
you'll find a blog post about that but

55
00:03:10.890 --> 00:03:16.550
it's really important not to allow those
two things to get messed up in your mind.

56
00:03:16.550 --> 00:03:19.330
If I wanted to declare an immutable array,

57
00:03:19.330 --> 00:03:22.780
it turns out there is another
utility which is Object.freeze.

58
00:03:22.780 --> 00:03:26.500
Object.freeze the utility
built in as of ES5.

59
00:03:26.500 --> 00:03:31.540
It reaches into an object, and
at the shallow level only, that is

60
00:03:31.540 --> 00:03:36.740
the top level of all of its properties, it
makes all of those properties Read Only.

61
00:03:38.360 --> 00:03:41.830
In an array, that means all of its
numerically indexed positions.

62
00:03:41.830 --> 00:03:44.570
In an object,
it means all of its named Properties.

63
00:03:44.570 --> 00:03:47.500
It makes all of those property
assignments read only.

64
00:03:48.850 --> 00:03:53.150
It's kind of like applying const to
each of those properties retroactively.

65
00:03:53.150 --> 00:03:58.160
It makes the properties
themselves bound immutably.

66
00:03:58.160 --> 00:04:01.170
But it doesn't say anything at all about
the values that they're pointing to.

67
00:04:01.170 --> 00:04:04.280
So if I had an array with
an array inside of it

68
00:04:04.280 --> 00:04:07.060
It's not gonna make the array
inside of it frozen.

69
00:04:07.060 --> 00:04:11.270
It's just simply gonna say that array has
to always be in that particular position

70
00:04:11.270 --> 00:04:11.880
in the outer array.

71
00:04:13.500 --> 00:04:17.760
So object.freeze is the way of
doing shallow immutability.

72
00:04:17.760 --> 00:04:21.800
If you want more sophisticated
immutability, there are all kinds a,

73
00:04:21.800 --> 00:04:24.290
there are several really,
really good libraries.

74
00:04:24.290 --> 00:04:28.730
Some stuff that has come out of
the closure script world, and Facebook.

75
00:04:28.730 --> 00:04:30.620
There's an immutable,
I forget exactly what it's called.

76
00:04:30.620 --> 00:04:35.470
But there's an immutable data structures
library written in JavaScript that

77
00:04:35.470 --> 00:04:38.180
gives you immutability by default.

78
00:04:38.180 --> 00:04:40.080
It's very powerful, very useful.

79
00:04:40.080 --> 00:04:43.150
But I just want you to know that the built
in language utilities are really not

80
00:04:43.150 --> 00:04:46.110
quite exactly the same thing
as what's meant by those.

81
00:04:46.110 --> 00:04:48.390
Const is all about immutable binding,

82
00:04:48.390 --> 00:04:50.930
an immutable assignment is really
the best way to think about it.

83
00:04:50.930 --> 00:04:53.610
An object that freezes
about a shallow set of

84
00:04:53.610 --> 00:04:55.130
immutable bindings at the property level.

85
00:04:56.780 --> 00:04:58.330
Yes?
&gt;&gt; Audience: So

86
00:04:58.330 --> 00:05:02.180
other than objects of threes
is making it computable.

87
00:05:02.180 --> 00:05:05.450
So what is really there?
&gt;&gt; Kyle Simpson: Yeah,

88
00:05:05.450 --> 00:05:06.680
that's a fantastic question.

89
00:05:06.680 --> 00:05:10.980
The question is if object dot freeze is
all about making the value immutable,

90
00:05:10.980 --> 00:05:12.500
what is const doing.

91
00:05:12.500 --> 00:05:16.770
Const is saying that W will always and
forever.

92
00:05:16.770 --> 00:05:21.360
Without any chance of being incorrect,
it will always point to that exact array.

93
00:05:21.360 --> 00:05:26.070
So I cannot do line 12, I am not
allowed to make w point somewhere else.

94
00:05:26.070 --> 00:05:27.820
That's all counts the same.

95
00:05:27.820 --> 00:05:33.820
Now just as a side note since you brought
up the question, between the two,

96
00:05:33.820 --> 00:05:37.359
between making the value itself immutable,
and making the binding immutable.

97
00:05:38.670 --> 00:05:40.280
Are there different
value propositions here,

98
00:05:40.280 --> 00:05:43.130
are there different benefits to our code?

99
00:05:43.130 --> 00:05:48.300
Many people are of the opinion that
the benefit of cost is gigantic

100
00:05:48.300 --> 00:05:52.020
in their program because their concern
seems to be I don't know whether or

101
00:05:52.020 --> 00:05:53.460
not a variable's gonna get changed.

102
00:05:54.640 --> 00:05:56.960
But I actually think
that that's completely

103
00:05:58.220 --> 00:06:00.110
a mischaracterization of the issue.

104
00:06:00.110 --> 00:06:03.410
Cuz I actually think the real problem
that we have is not that our bindings

105
00:06:03.410 --> 00:06:06.970
are getting change but there are values
are getting change out from underneath us.

106
00:06:06.970 --> 00:06:07.920
And here's why.

107
00:06:07.920 --> 00:06:10.870
Cuz bindings are always localized.

108
00:06:10.870 --> 00:06:13.680
There always within the program that you
can see immediately in front of you.

109
00:06:13.680 --> 00:06:16.180
Even if it's a thousand lines
long it's always within

110
00:06:16.180 --> 00:06:17.260
the program that you can see.

111
00:06:17.260 --> 00:06:20.790
And you can lexically analyze it,
values are portable.

112
00:06:20.790 --> 00:06:24.520
They can be shipped elsewhere and
if you can ship a value elsewhere and

113
00:06:24.520 --> 00:06:27.090
somebody can change that value
that's a much bigger problem.

114
00:06:27.090 --> 00:06:28.740
That's an action at a distance problem.

115
00:06:29.770 --> 00:06:32.520
So in the world of immutability,

116
00:06:32.520 --> 00:06:36.240
immutable bindings to me are not
all that useful or interesting.

117
00:06:36.240 --> 00:06:39.030
Immutability values are a lot
more interesting and

118
00:06:39.030 --> 00:06:40.530
const has nothing to say about that.

