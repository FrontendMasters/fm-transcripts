WEBVTT

1
00:00:00.000 --> 00:00:03.949
[MUSIC]

2
00:00:03.949 --> 00:00:06.130
&gt;&gt; Kyle Simpson: Let's
talk about exclusion.

3
00:00:06.130 --> 00:00:10.120
I take the list and there are certain
items that I wanna keep in the list, and

4
00:00:10.120 --> 00:00:12.750
certain items that I want
to exclude from the list.

5
00:00:12.750 --> 00:00:14.830
I want to filter those items out.

6
00:00:16.770 --> 00:00:19.770
You might end up with a list that has
a whole bunch of numbers in it and

7
00:00:19.770 --> 00:00:23.140
in certain places because of
whatever you were using to

8
00:00:23.140 --> 00:00:26.550
create the list of numbers you
might have some no values.

9
00:00:26.550 --> 00:00:29.430
Or some undefined values and
you wanna filter those things out

10
00:00:29.430 --> 00:00:33.580
cuz you only wanna produce you operations
across a list of real numbers.

11
00:00:33.580 --> 00:00:35.008
So you have some things
that you wanna filter

12
00:00:35.008 --> 00:00:39.351
out.
&gt;&gt; Kyle Simpson: You may wanna filter out

13
00:00:39.351 --> 00:00:41.670
anything that's not an odd number.

14
00:00:41.670 --> 00:00:45.570
When I filter out the evens
by saying my predicate isOdd.

15
00:00:45.570 --> 00:00:52.020
So here, line 1, my isOdd function takes
advantage of the mathematical modulus.

16
00:00:53.030 --> 00:00:57.350
Modulus 2 is gonna return 1 for
an odd number, 0 for an even number.

17
00:00:57.350 --> 00:01:02.715
So what I'm saying here is if
the number returns 1, then

18
00:01:02.715 --> 00:01:08.310
my expression on line one there,
that expression returns true.

19
00:01:08.310 --> 00:01:11.720
So the way that we're gonna
create an exclude function is,

20
00:01:11.720 --> 00:01:15.360
you want your predicate, your function,
should always return true

21
00:01:15.360 --> 00:01:19.250
if you wanna keep it, and non true,
false, if you don't wanna keep it.

22
00:01:21.190 --> 00:01:25.210
So you're making some decision
based only on that value.

23
00:01:25.210 --> 00:01:26.760
This is important.

24
00:01:26.760 --> 00:01:29.980
You don't have any other context
by which to make that decision,

25
00:01:29.980 --> 00:01:31.150
other than the value itself.

26
00:01:32.410 --> 00:01:34.190
That's when a filter applies.

27
00:01:34.190 --> 00:01:38.918
if you have to make the decision about
inclusion versus exclusion based upon more

28
00:01:38.918 --> 00:01:43.159
complex pieces of data than just
the value itself You're gonna reach for

29
00:01:43.159 --> 00:01:44.985
a different tool than filter.

30
00:01:44.985 --> 00:01:48.260
Okay, we'll talk about
that in a little bit.

31
00:01:48.260 --> 00:01:52.260
But if all we need to do is look at
the value itself and decide whether or

32
00:01:52.260 --> 00:01:58.550
not we want to keep it, then we can
simply use a utility like exclude here.

33
00:01:58.550 --> 00:02:02.400
Exclude looks an awful lot like our
transformed it before it takes in

34
00:02:02.400 --> 00:02:05.240
an array,
takes in a predicate function called fn.

35
00:02:06.560 --> 00:02:08.090
You'll notice that I'm
producing a new list.

36
00:02:08.090 --> 00:02:12.940
Again, this is an immutable operation,
immutable principled operation.

37
00:02:12.940 --> 00:02:15.200
So I create a new list and

38
00:02:15.200 --> 00:02:20.310
that new list has potentially fewer
items in it, maybe even none.

39
00:02:22.830 --> 00:02:28.010
So I only push into the list,
on line seven, I only push into the list

40
00:02:28.010 --> 00:02:32.910
if the function that I call with
that value returns me a true value.

41
00:02:32.910 --> 00:02:36.150
So line six, I called the function
that you've passed in.

42
00:02:36.150 --> 00:02:38.870
I give it the value that I'm
currently iterating over.

43
00:02:39.910 --> 00:02:42.530
And if you give me a true value back,
I'm gonna include it,

44
00:02:42.530 --> 00:02:43.720
otherwise I'm going to leave it out.

45
00:02:46.210 --> 00:02:47.480
Pretty straightforward.

46
00:02:47.480 --> 00:02:53.310
So we call exclude down here at the bottom
and we end up with an array list of 1,

47
00:02:53.310 --> 00:02:56.810
3, 5.

48
00:02:56.810 --> 00:02:59.880
Questions about our exclude utility?

49
00:03:01.350 --> 00:03:03.730
Now, could you do exclude as a recursion?

50
00:03:05.380 --> 00:03:09.260
Think about that for a moment,
I bet you could, well I hope you

51
00:03:09.260 --> 00:03:14.170
could, I want to assign
that as a formal exercise,

52
00:03:14.170 --> 00:03:17.850
but maybe over the next break,
think about these operations.

53
00:03:17.850 --> 00:03:21.368
I'm doing them in an iterative format with
for loops because it's very illustrative,

54
00:03:21.368 --> 00:03:26.470
but how would you do it recursively?
&gt;&gt; Kyle Simpson: All right.

55
00:03:26.470 --> 00:03:29.870
So we're gonna exclude
anything that's not odd.

56
00:03:29.870 --> 00:03:32.742
We're gonna exclude the evens
from our operation.

57
00:03:35.937 --> 00:03:37.547
&gt;&gt; Kyle Simpson: Turns out this exclusion,

58
00:03:37.547 --> 00:03:41.890
this filtering is built in a language
by a way of the method called filter.

59
00:03:44.160 --> 00:03:46.380
So we don't have to write our own,
it's available to us.

60
00:03:47.480 --> 00:03:49.080
So now we have map and we have filter.

61
00:03:49.080 --> 00:03:53.570
Now that you've seen
the implementations of them,

62
00:03:53.570 --> 00:03:56.080
it makes a little bit more sense
to you how to use them, right?

63
00:03:59.890 --> 00:04:03.730
By the way, just as a little side note,
my implementation of exclude and

64
00:04:03.730 --> 00:04:04.680
transform so far.

65
00:04:05.920 --> 00:04:09.370
Here's a little bit of corner cutting for
illustrative purposes.

66
00:04:09.370 --> 00:04:11.000
They are not exactly the same.

67
00:04:11.000 --> 00:04:13.250
There are other parameter
values that are passed in,

68
00:04:13.250 --> 00:04:15.240
there are other corner case handlings or
whatever.

69
00:04:15.240 --> 00:04:19.120
Our purpose is to illustrate
the higher level concept rather than to

70
00:04:19.120 --> 00:04:21.559
create a replacement for these methods.

71
00:04:25.050 --> 00:04:26.910
Exclusion is a very common thing.

72
00:04:26.910 --> 00:04:29.860
So let's say you start out with
a list that's produced by some,

73
00:04:29.860 --> 00:04:33.110
you are a consumer of some list or
somebody passes you a list.

74
00:04:33.110 --> 00:04:36.930
The first thing you might wanna do
is transform all the values, so

75
00:04:36.930 --> 00:04:38.470
might call a map on it.

76
00:04:38.470 --> 00:04:41.170
And then you might wanna say after
that transformation there's some

77
00:04:41.170 --> 00:04:44.650
characteristic of those things where some
of those are not ones I want anymore.

78
00:04:44.650 --> 00:04:48.750
So, you'd call .map, and you'd chain
off of that and call .filter, and

79
00:04:48.750 --> 00:04:51.860
you'd end up with an array that
potentially had fewer items in it.

80
00:04:53.040 --> 00:04:55.760
So, that's how we can compose
those two operations together.

81
00:04:55.760 --> 00:04:56.950
That's one way of composing.

82
00:04:56.950 --> 00:05:02.110
Of course you could probably think
about ways to compose map and

83
00:05:02.110 --> 00:05:06.960
filter together that's much more complex
than composing two maps together.

84
00:05:06.960 --> 00:05:10.520
But it's not impossible to do.

85
00:05:10.520 --> 00:05:11.630
Questions about exclusion.

86
00:05:20.000 --> 00:05:22.200
Did we have a question about
transformation in the?

87
00:05:22.200 --> 00:05:25.470
&gt;&gt; Speaker 2: It was kind of just a more

88
00:05:25.470 --> 00:05:26.990
general one.

89
00:05:29.490 --> 00:05:33.990
He's basically asking are map
filter reduce some every for

90
00:05:33.990 --> 00:05:36.650
each the common functional
approaches to problems?

91
00:05:36.650 --> 00:05:38.811
Or are they notions that
come from a different,

92
00:05:38.811 --> 00:05:44.136
more functional domain?
&gt;&gt; Kyle Simpson: Not

93
00:05:44.136 --> 00:05:45.530
sure I understand the question.

94
00:05:47.090 --> 00:05:49.940
Our map filter reduce [INAUDIBLE].

95
00:05:49.940 --> 00:05:51.690
Common functional approaches to problems.

96
00:05:55.780 --> 00:05:59.650
What's confusing me about this question is
that it seems to be asking the same thing

97
00:05:59.650 --> 00:06:00.510
in both clauses.

98
00:06:02.930 --> 00:06:05.510
Are they common functional or
do they come from a functional domain?

99
00:06:05.510 --> 00:06:07.660
That seems to be the same thing to me.

100
00:06:07.660 --> 00:06:10.530
So I'm not sure I can
directly answer the question-

101
00:06:10.530 --> 00:06:11.330
&gt;&gt; Speaker 2: They're a few seconds behind

102
00:06:11.330 --> 00:06:14.210
here so you might add to this.
&gt;&gt; Kyle Simpson: Let me just

103
00:06:14.210 --> 00:06:17.080
speak to it more generally,
if we're waiting for another question.

104
00:06:19.680 --> 00:06:24.280
Some of those in that
list are very functional.

105
00:06:24.280 --> 00:06:26.400
Some of them are more JavaScripty.

106
00:06:28.000 --> 00:06:31.750
Map and we're about to talk about reduce,
very functional.

107
00:06:31.750 --> 00:06:35.340
You'll find that in virtually
all functional implementations.

108
00:06:35.340 --> 00:06:38.730
Filter, pretty common sometimes
filter isn't added and

109
00:06:38.730 --> 00:06:42.940
you can just make filter as a,
filter can be implemented

110
00:06:44.310 --> 00:06:47.740
based upon reduce which is what we're
gonna talk about in just a minute.

111
00:06:47.740 --> 00:06:52.070
So, some implementations will only provide
you the two perimatives of map and

112
00:06:52.070 --> 00:06:55.480
produce and then you build other
high level perimatives on top of

113
00:06:55.480 --> 00:06:56.630
that.
&gt;&gt; Speaker 2: So

114
00:06:56.630 --> 00:07:02.130
yeah added to that there.
&gt;&gt; Kyle Simpson: They

115
00:07:02.130 --> 00:07:04.800
do absolutely come from functional
programming techniques.

116
00:07:04.800 --> 00:07:06.940
The question,
they come from functional programming or

117
00:07:06.940 --> 00:07:08.870
are they just convenience methods?

118
00:07:08.870 --> 00:07:13.670
The implementation of them as chained
prototype methods is about convenience.

119
00:07:13.670 --> 00:07:18.940
But the way that they do the thing they
do, that is very, very functional.

120
00:07:18.940 --> 00:07:21.985
That's an adaptation of that functional
mindset into a JavaScript idiom.

