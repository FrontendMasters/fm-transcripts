WEBVTT

1
00:00:00.795 --> 00:00:04.054
[MUSIC]

2
00:00:04.054 --> 00:00:06.480
&gt;&gt; Kyle Simpson: Let's talk
about our topic today.

3
00:00:06.480 --> 00:00:09.050
What on earth is
functional-light programming?

4
00:00:11.080 --> 00:00:16.210
Completely made up term that I came up
with to try to describe what I hope

5
00:00:16.210 --> 00:00:21.248
is slightly more approachable,
almost remedial,

6
00:00:21.248 --> 00:00:26.970
look at this much bigger and much more
complex notion of functional programming.

7
00:00:26.970 --> 00:00:30.990
Some of you may be very, very familiar
with functional programming already.

8
00:00:30.990 --> 00:00:34.093
And for those of you that are, for
those of you that feel like you've cut

9
00:00:34.093 --> 00:00:37.941
your teeth on functional programming, you
were a lisper back in the 70s or whatever.

10
00:00:37.941 --> 00:00:40.346
If that's you listening to the tame,

11
00:00:40.346 --> 00:00:44.118
I apologize that some of this
may feel very remedial to you.

12
00:00:44.118 --> 00:00:48.819
But, I think we have a problem, because
I think functional programming is one of

13
00:00:48.819 --> 00:00:53.383
the most powerful set of techniques that
we have in programming, but I think it

14
00:00:53.383 --> 00:00:58.620
has been presented in a way that is
completely off putting to most developers.

15
00:00:58.620 --> 00:01:01.230
And I think if you cornered somebody who

16
00:01:01.230 --> 00:01:04.680
has been steeped in the traditions in the
academics around functional programming.

17
00:01:04.680 --> 00:01:07.190
If you really ask them
to admit they would say,

18
00:01:07.190 --> 00:01:09.230
it was a pretty high barrier to entry.

19
00:01:09.230 --> 00:01:10.850
It's like a really, really powerful tool.

20
00:01:10.850 --> 00:01:12.780
It's like walking into a workshop and

21
00:01:12.780 --> 00:01:17.410
seeing a chainsaw with all kinds of fancy
features on it and things like that.

22
00:01:17.410 --> 00:01:20.090
Maybe it's digital and
has an LCD display, and you're like,

23
00:01:20.090 --> 00:01:22.470
I don't have any clue how to do that.

24
00:01:22.470 --> 00:01:26.500
I just got a piece of wood I need to cut
and I have no idea how to use this thing.

25
00:01:26.500 --> 00:01:28.630
It's a high learning curve.

26
00:01:28.630 --> 00:01:30.062
So the workshop today,

27
00:01:30.062 --> 00:01:34.560
my goal is to try to get at some
of those fundamental principles.

28
00:01:34.560 --> 00:01:35.940
Without wrapping any of it,

29
00:01:35.940 --> 00:01:41.160
in any of that sort of academic
notational terminology, things like that.

30
00:01:41.160 --> 00:01:43.710
We're not gonna talk about monads.

31
00:01:43.710 --> 00:01:47.760
To be honest with you I'm not even fully
sure I understand what a monad is.

32
00:01:47.760 --> 00:01:51.270
I can kind of fumble around with some
of those sorts of things because

33
00:01:51.270 --> 00:01:55.960
I can't even tell you how many talks that
claim to be the talk that's gonna teach

34
00:01:55.960 --> 00:01:57.090
functional programming.

35
00:01:57.090 --> 00:02:00.880
And I do not claim that this talk is going
to teach you functional programming,

36
00:02:00.880 --> 00:02:04.160
this workshop is not going to teach
you functional programming but

37
00:02:04.160 --> 00:02:09.740
it is going to teach you the basis upon
which functional programming can be built

38
00:02:09.740 --> 00:02:14.710
from the observational perspective rather
than from the academic perspective.

39
00:02:14.710 --> 00:02:16.380
That's why I call it
functional-light programming.

40
00:02:16.380 --> 00:02:19.763
These are like walking into a workshop and
saying, well,

41
00:02:19.763 --> 00:02:23.401
I don't understand that crazy
complicated chainsaw thing.

42
00:02:23.401 --> 00:02:26.061
But I just have a tiny little
piece of wood that I need to cut.

43
00:02:26.061 --> 00:02:28.111
Okay, here's the little handsaw.

44
00:02:28.111 --> 00:02:31.007
It's much much simpler,
it's much more remedial.

45
00:02:31.007 --> 00:02:32.426
It doesn't take a lot of learning.

46
00:02:32.426 --> 00:02:34.846
You can figure out how to do this.

47
00:02:34.846 --> 00:02:39.540
The principles of a handsaw are the same
principles upon which a chainsaw is build.

48
00:02:39.540 --> 00:02:43.460
But obviously, the chainsaw is much more
complex because it's designed to handle

49
00:02:43.460 --> 00:02:45.250
much more complex problems.

50
00:02:45.250 --> 00:02:47.050
So what we're doing here is a start.

51
00:02:47.050 --> 00:02:49.450
It's not all of functional programming,
but

52
00:02:49.450 --> 00:02:54.240
it's a start towards understanding
where we need to go if we do want to

53
00:02:54.240 --> 00:02:56.780
be better with our functional
programming practices.

54
00:02:56.780 --> 00:02:59.960
This represents my journey to
understanding functional programming

55
00:02:59.960 --> 00:03:01.780
if I really have to boil it down.

56
00:03:01.780 --> 00:03:04.440
These are the sorts of things that,
without ever understanding any of

57
00:03:04.440 --> 00:03:08.490
the terminology, I gleaned some of
these concepts from programming and

58
00:03:08.490 --> 00:03:09.740
from looking at other people's code.

59
00:03:09.740 --> 00:03:13.190
And I'm just trying to simply lie
some of that stuff out to help you

60
00:03:13.190 --> 00:03:14.960
gain a better understanding.

61
00:03:14.960 --> 00:03:16.680
So let's quickly look at
what we're going to talk

62
00:03:16.680 --> 00:03:18.040
through over the next several hours.

63
00:03:19.540 --> 00:03:21.890
First, we're gonna talk about
what pure functions are, and

64
00:03:21.890 --> 00:03:25.690
even before that we have to understand,
obviously, what a not pure function is.

65
00:03:25.690 --> 00:03:29.320
So we're gonna look at the notion
of not pure versus pure functions.

66
00:03:29.320 --> 00:03:31.010
We're gonna look at composition.

67
00:03:31.010 --> 00:03:33.610
Already starting to sound
like a slightly fancy word,

68
00:03:33.610 --> 00:03:35.420
like a slightly fancy terminology.

69
00:03:35.420 --> 00:03:38.080
I promise I'm gonna help you
understand what that word is.

70
00:03:38.080 --> 00:03:40.760
I chose that word as opposed to
a number of other words that would make

71
00:03:40.760 --> 00:03:42.210
no sense at all.

72
00:03:42.210 --> 00:03:44.548
The famous quote about monads is like,

73
00:03:44.548 --> 00:03:48.470
they're just a bi factor in
the category then they'll factor or

74
00:03:48.470 --> 00:03:50.650
some crazy thing like we're not
gonna use any of that stuff.

75
00:03:50.650 --> 00:03:54.140
Okay, so
don't get too scared with the terminology.

76
00:03:54.140 --> 00:03:58.190
Immutability, the notion that we
have something that doesn't change.

77
00:03:58.190 --> 00:04:00.052
We treat it immutable,
we can even make it immutable.

78
00:04:00.052 --> 00:04:04.580
So we're gonna look at what immutability
is, just from a very basic sense.

79
00:04:04.580 --> 00:04:06.360
Closure.

80
00:04:06.360 --> 00:04:11.290
Closure is probably the most important
programming concept ever invented.

81
00:04:12.700 --> 00:04:15.150
I know that's a big claim to make
cuz there are a whole bunch of great

82
00:04:15.150 --> 00:04:18.830
programming concepts that have been
created and we use lots and lots of great

83
00:04:18.830 --> 00:04:24.240
tools in our programming, but
I would say that closure is the most core.

84
00:04:24.240 --> 00:04:28.950
The most important, the first place
that we really need to grasp.

85
00:04:28.950 --> 00:04:31.810
So closure, we definitely wanna
take a look just briefly,

86
00:04:31.810 --> 00:04:33.770
at understanding what that means and
how we use that.

87
00:04:35.050 --> 00:04:37.500
Some of you may have already
seen other courses and

88
00:04:37.500 --> 00:04:38.640
other books I've written on it.

89
00:04:38.640 --> 00:04:40.629
I go into that topic in much more detail,

90
00:04:40.629 --> 00:04:44.255
we're not gonna go into a lot of detail
about it but just to present to you,

91
00:04:44.255 --> 00:04:47.959
the way that we use closure from
the functional programming perspective.

92
00:04:47.959 --> 00:04:52.337
Recursion, is another one of those topics
that has usefulness outside of functional

93
00:04:52.337 --> 00:04:56.306
programming, but is also very heavily
related to functional programming.

94
00:04:56.306 --> 00:04:58.980
So I wanna have a basis
understanding of recursion.

95
00:04:58.980 --> 00:05:02.780
Recursion is one of those things I know
that is very easy to kinda scared of.

96
00:05:02.780 --> 00:05:06.870
I've talked to the students,
the college students, recently, who

97
00:05:06.870 --> 00:05:12.170
have told me things like I just can't even
possibly wrap my brain around recursion.

98
00:05:12.170 --> 00:05:13.050
And that's a shame.

99
00:05:13.050 --> 00:05:13.900
I'm saddened by that.

100
00:05:13.900 --> 00:05:16.930
I'm saddened by this notion that we can't

101
00:05:16.930 --> 00:05:19.890
figure out some basic
way of explaining this.

102
00:05:19.890 --> 00:05:23.590
So this is my attempt to help you kind
of get your brain a little more wrapped

103
00:05:23.590 --> 00:05:24.240
in that direction.

104
00:05:25.360 --> 00:05:30.650
Now we're gonna look at a set of things,
these are going to build on higher order.

105
00:05:30.650 --> 00:05:34.930
So slightly higher order patterns on
top of these basic fundamentals but

106
00:05:34.930 --> 00:05:38.630
they really are kind of the main
takeaway from our workshop today.

107
00:05:38.630 --> 00:05:41.130
So we're gonna look at
taking a list of values and

108
00:05:41.130 --> 00:05:43.620
performing a set of
transformations on them.

109
00:05:43.620 --> 00:05:45.670
For those of you that have heard
of functional programming before,

110
00:05:45.670 --> 00:05:47.610
transformation is done with maps, so

111
00:05:47.610 --> 00:05:50.090
we're gonna look at transformation and
then look at the map.

112
00:05:51.520 --> 00:05:55.140
Then we're gonna look at exclusion,
excluding items from a list.

113
00:05:55.140 --> 00:06:00.730
Paring down a list to a smaller set
of items based upon some condition,

114
00:06:00.730 --> 00:06:01.880
that goes by the name of filter.

115
00:06:02.916 --> 00:06:08.600
Then we're gonna look at composing items
from a list into either a smaller list or

116
00:06:08.600 --> 00:06:10.630
even down to a single value.

117
00:06:10.630 --> 00:06:13.330
Composing values together.

118
00:06:13.330 --> 00:06:15.919
Now, I don't mean
composing lists together.

119
00:06:15.919 --> 00:06:18.597
We're not actually gonna take
a very close look at that.

120
00:06:18.597 --> 00:06:22.107
But that's pretty straightforward as well
because we can concatenate two lists

121
00:06:22.107 --> 00:06:23.030
together.

122
00:06:23.030 --> 00:06:26.080
So there are fundamental
list operations that really

123
00:06:26.080 --> 00:06:30.180
don't necessarily show up a ton of
times in functional programming.

124
00:06:30.180 --> 00:06:33.152
The composition here,
what we mean is composition of the items,

125
00:06:33.152 --> 00:06:34.403
putting things together.

126
00:06:34.403 --> 00:06:36.762
That goes with the name reduce.

127
00:06:36.762 --> 00:06:42.720
And finally, list iteration which
in JavaScript we call forEach.

128
00:06:42.720 --> 00:06:45.530
Other frameworks will call it each or
things like that.

129
00:06:45.530 --> 00:06:49.540
In particular that last one I'm
mentioning not because that's actually

130
00:06:49.540 --> 00:06:52.750
kind of frowned upon in
the functional programming world.

131
00:06:52.750 --> 00:06:58.020
We're gonna find out that list
iteration is actually an impure action.

132
00:06:58.020 --> 00:07:01.140
So from a purely theoretical perspective,
functional programming

133
00:07:02.410 --> 00:07:06.330
they turn their eyes, turn their nose
up at something like list iteration.

134
00:07:06.330 --> 00:07:09.140
So I just wanna show you
the notion of list iteration, so

135
00:07:09.140 --> 00:07:13.840
that we understand why it's when we
watch Sesame Street as kids, and

136
00:07:13.840 --> 00:07:16.040
they're like one of these
things just doesn't belong.

137
00:07:16.040 --> 00:07:18.370
List iteration's gonna be that
thing that just doesn't belong, but

138
00:07:18.370 --> 00:07:21.440
we need to understand the other
things before we understand why.

139
00:07:21.440 --> 00:07:22.530
List iteration doesn't belong.

140
00:07:22.530 --> 00:07:24.298
So that's our set of topics
that we're gonna go through.

141
00:07:24.298 --> 00:07:27.147
There are several exercises that
we'll spend some time on and

142
00:07:27.147 --> 00:07:29.960
we will take some breaks
throughout our discussion as well.

