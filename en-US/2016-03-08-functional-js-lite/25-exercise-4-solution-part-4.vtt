WEBVTT

1
00:00:00.000 --> 00:00:04.187
[MUSIC]

2
00:00:04.187 --> 00:00:06.979
&gt;&gt; Kyle Simpson: I apologize if it got
a little muddy cuz I started my brain

3
00:00:06.979 --> 00:00:09.950
down a different way of solving this and
I got you confused so

4
00:00:09.950 --> 00:00:13.390
hopefully we backed up
the stack enough to show this.

5
00:00:13.390 --> 00:00:19.289
But the point that I want to get across
is that the expression with a reduce, and

6
00:00:19.289 --> 00:00:24.370
we could've taken care of this part with
a map but we chose to back that part out.

7
00:00:24.370 --> 00:00:27.190
I was going too far down
to the complication tree.

8
00:00:27.190 --> 00:00:32.470
But a single reduce here replaces
the complexities of recursion or

9
00:00:32.470 --> 00:00:36.310
iteration forms just simply
knowing how to use that tool.

10
00:00:36.310 --> 00:00:39.320
It's like if you walk into a workshop and
I've got a hammer in one hand and

11
00:00:39.320 --> 00:00:41.160
a mallet in the other.

12
00:00:41.160 --> 00:00:44.960
They both fundamentally can
be used to swing things and

13
00:00:44.960 --> 00:00:49.370
drive some nail-looking object in, but

14
00:00:49.370 --> 00:00:51.560
you're gonna use a mallet differently
than you're gonna use a hammer.

15
00:00:51.560 --> 00:00:53.350
You're gonna use them for
different kinds of nails.

16
00:00:53.350 --> 00:00:55.430
So that's the distinction
we're making here.

17
00:00:55.430 --> 00:00:58.400
We're not talking about the difference
between a hammer and a screwdriver.

18
00:00:58.400 --> 00:01:01.280
We're talking about the difference
between a hammer and a mallet.

19
00:01:01.280 --> 00:01:05.780
Recursion was an equally
reasonable solution, but

20
00:01:05.780 --> 00:01:09.430
the way we ended up expressing it,
might've twisted some brains.

21
00:01:09.430 --> 00:01:13.646
I hope that what I'm showing you here is
being able to use functional programming

22
00:01:13.646 --> 00:01:18.048
oftentimes can give us also a graceful
solution, even when recursion doesn't give

23
00:01:18.048 --> 00:01:24.110
us a graceful solution.
&gt;&gt; Kyle Simpson: Yes.

24
00:01:24.110 --> 00:01:25.252
&gt;&gt; Speaker 2: Someone still wants you to

25
00:01:25.252 --> 00:01:29.440
kind of explain, he doesn't understand
why the first value had to be removed?

26
00:01:29.440 --> 00:01:30.930
&gt;&gt; Kyle Simpson: Okay, look,

27
00:01:30.930 --> 00:01:33.860
let's not do it, okay?

28
00:01:35.360 --> 00:01:36.930
If that helps.

29
00:01:36.930 --> 00:01:39.580
We're gonna do a reduction
across the entire array, but

30
00:01:39.580 --> 00:01:42.580
we need a good suitable initial value.

31
00:01:44.000 --> 00:01:48.540
So, tell me what my good suitable initial
value is going to be for arithmetic sum.

32
00:01:48.540 --> 00:01:49.890
It's gotta be zero, but

33
00:01:49.890 --> 00:01:53.040
I can't just pass in zero because
everything else here is functions.

34
00:01:54.220 --> 00:01:57.754
So I have to pass in a function that will
produce zero which is how I call foo(0).

35
00:01:57.754 --> 00:02:03.490
Okay, so if that works a little
bit better with your brain.

36
00:02:03.490 --> 00:02:07.170
I feel weirder about that solution
which is why I didn't lead with it.

37
00:02:07.170 --> 00:02:09.300
It feels weird to me to
create a function only for

38
00:02:09.300 --> 00:02:14.220
the purposes of returning a zero.
&gt;&gt; Speaker 3: What I think is that some

39
00:02:14.220 --> 00:02:19.090
things get misaligned when you started
applying map, that my brain sort of, okay,

40
00:02:19.090 --> 00:02:21.260
this is what we're doing now.
&gt;&gt; Kyle Simpson: Yeah.

41
00:02:21.260 --> 00:02:24.290
That's why I took the map back out cuz I
realized I was going down the wrong route.

42
00:02:24.290 --> 00:02:24.941
&gt;&gt; Speaker 3: Yeah.

43
00:02:24.941 --> 00:02:26.037
&gt;&gt; Kyle Simpson: So that was my fault for

44
00:02:26.037 --> 00:02:27.893
confusing you.
&gt;&gt; Speaker 3: Didn't quite reset

45
00:02:27.893 --> 00:02:29.892
enough right now.
&gt;&gt; Kyle Simpson: Apologize for

46
00:02:29.892 --> 00:02:31.075
the confusion.

47
00:02:31.075 --> 00:02:35.768
Trying to pop the stat back to look at
I could delete the file and start over.

48
00:02:35.768 --> 00:02:39.278
We're trying to pop the stat back to
thinking about passing this in as a list

49
00:02:39.278 --> 00:02:40.002
of functions,

50
00:02:40.002 --> 00:02:45.425
rather than as a list of values.
&gt;&gt; Kyle Simpson: I

51
00:02:45.425 --> 00:02:48.866
just got myself one step ahead cuz our
next step is going to be to generalize

52
00:02:48.866 --> 00:02:51.140
this where I can start out
with a list of values.

53
00:02:51.140 --> 00:02:52.800
But I wasn't supposed to do the map so
early.

54
00:02:52.800 --> 00:02:53.880
So, my fault.

55
00:02:53.880 --> 00:02:54.380
Apologies.

56
00:02:58.000 --> 00:03:00.280
Does this one, perhaps, make more sense?

57
00:03:00.280 --> 00:03:04.650
This expression of it where we're
not doing a slice off the array but

58
00:03:04.650 --> 00:03:06.020
we do need an initial value.

59
00:03:06.020 --> 00:03:07.580
So here's how I produce my initial value.

60
00:03:07.580 --> 00:03:11.300
This'll work exactly the same
way if I pop this out,

61
00:03:13.200 --> 00:03:17.460
drop this in, still gonna end up with 181.

62
00:03:17.460 --> 00:03:19.700
Fundamentally, we ended up with
one extra function call there

63
00:03:21.280 --> 00:03:23.730
cuz we made a function call for a zero.

64
00:03:23.730 --> 00:03:26.640
When in reality,
we don't even actually need that.

65
00:03:26.640 --> 00:03:30.587
We know the properties of our problem are
that the initial value really could just

66
00:03:30.587 --> 00:03:37.569
start out as the beginning of the list.
&gt;&gt; Speaker 4: And

67
00:03:37.569 --> 00:03:40.258
more than one function call because
it also does another iteration.

68
00:03:40.258 --> 00:03:42.645
You call foo and then there's an.

69
00:03:42.645 --> 00:03:46.156
Anyway, that alphabet function call-
&gt;&gt; Kyle Simpson: All right,

70
00:03:46.156 --> 00:03:49.740
I'll take your word for it rather
than going down the rabbit trail.

71
00:03:49.740 --> 00:03:52.382
I've probably already confused
everybody enough, so I apologize.

72
00:03:52.382 --> 00:03:58.495
[LAUGH]
&gt;&gt; Kyle Simpson: Anymore

73
00:03:58.495 --> 00:04:01.410
questions about the reduce?

74
00:04:01.410 --> 00:04:05.700
Did on the livestream, on the chat
did we answer those questions about

75
00:04:05.700 --> 00:04:10.376
the difference in solution?
&gt;&gt; Speaker 5: They're saying good there.

76
00:04:10.376 --> 00:04:11.059
&gt;&gt; Kyle Simpson: Okay.

77
00:04:15.400 --> 00:04:16.083
&gt;&gt; Kyle Simpson: Some people

78
00:04:16.083 --> 00:04:20.720
are saying that their browser may
not have the ES6 features turned on.

79
00:04:20.720 --> 00:04:24.850
So if your browser doesn't have
the ability to do the dot, dot, dot,

80
00:04:24.850 --> 00:04:29.540
take that part out and just put a bracket
around that list and it'll work the same

81
00:04:29.540 --> 00:04:36.995
way.
&gt;&gt; Kyle Simpson: Okay.

82
00:04:41.946 --> 00:04:43.334
&gt;&gt; Kyle Simpson: All right, so now,

83
00:04:43.334 --> 00:04:46.620
we get to where I was
gonna talk about map.

84
00:04:46.620 --> 00:04:48.460
I just did it too early.

85
00:04:48.460 --> 00:04:51.610
So now, if I start out with a list
of functions, that's great.

86
00:04:51.610 --> 00:04:55.710
But if I start out with a list of values,
and I want to pump those things into

87
00:04:55.710 --> 00:05:01.220
an add in, add in is expecting a list
of functions, not a list of values.

88
00:05:01.220 --> 00:05:06.030
So if I started out with a list of 10,
42, 56, and 73, how do I make that

89
00:05:08.050 --> 00:05:13.380
into a list of functions?
&gt;&gt; Speaker 4: Map them to the foo?

90
00:05:13.380 --> 00:05:14.185
&gt;&gt; Kyle Simpson: I map it with foo.

91
00:05:14.185 --> 00:05:18.250
[LAUGH] You see why foo is
a suitable predicate for us?

92
00:05:19.940 --> 00:05:20.850
Look at the foo function.

93
00:05:20.850 --> 00:05:24.708
What does it do?
&gt;&gt; Kyle Simpson: It receives a value and

94
00:05:24.708 --> 00:05:26.780
it transforms that value by what?

95
00:05:28.600 --> 00:05:30.330
Wrapping it in a closed over function.

96
00:05:31.400 --> 00:05:34.290
That's a valid transformation for a value.

97
00:05:34.290 --> 00:05:36.340
It's to wrap it in a function
that produces that volume.

98
00:05:37.572 --> 00:05:40.382
So that's why foo is a suitable
transformation predicate for us.

99
00:05:40.382 --> 00:05:46.705
So, we would now have,
at the end of that, an array of functions.

100
00:05:46.705 --> 00:05:52.819
So, that value,
could be passed into add m.

101
00:05:54.120 --> 00:05:55.567
And that's where I was actually trying to

102
00:05:55.567 --> 00:05:59.740
go earlier.
&gt;&gt; Kyle Simpson: Okay?

103
00:05:59.740 --> 00:06:00.740
That's a suitable array.

104
00:06:02.710 --> 00:06:07.380
And because that's an array,
we can either take that dot-dot-dot off or

105
00:06:07.380 --> 00:06:12.890
leave that one there if we want to and
simply spread that array out.

106
00:06:12.890 --> 00:06:18.882
Either way.
&gt;&gt; Kyle Simpson: You're

107
00:06:18.882 --> 00:06:20.188
not always gonna be control,

108
00:06:20.188 --> 00:06:23.750
in control of all the signatures,
of all the functions you work with.

109
00:06:23.750 --> 00:06:27.224
So part of the point that I'm trying to
make here is that there are facilities

110
00:06:27.224 --> 00:06:30.560
available to us to make the adaptations
between different signatures.

