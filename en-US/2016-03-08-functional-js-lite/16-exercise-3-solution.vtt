WEBVTT

1
00:00:00.000 --> 00:00:03.962
[MUSIC]

2
00:00:03.962 --> 00:00:04.712
&gt;&gt; Kyle Simpson: First off,

3
00:00:04.712 --> 00:00:09.590
the main goal of this is to be able to
handle an arbitrary number of arguments.

4
00:00:11.570 --> 00:00:14.320
So I'm going to take those off,
those named ones, and

5
00:00:14.320 --> 00:00:19.640
in their place I'm going to take advantage
of that es6 spread.Kyle Simpson In this

6
00:00:19.640 --> 00:00:23.760
case it's called the rest operator, I like
to call it the gather operator by the way.

7
00:00:23.760 --> 00:00:26.870
But ...args, that's my gather operator, so

8
00:00:26.870 --> 00:00:31.040
I'm gonna gather everything
together into the array args.

9
00:00:32.690 --> 00:00:38.600
Now, all recursive functions, the main
defining characteristic is that they have

10
00:00:38.600 --> 00:00:43.760
a base case, some way to know that it's
time to stop so they don't run forever.

11
00:00:43.760 --> 00:00:45.590
And they have a recursive call.

12
00:00:45.590 --> 00:00:47.630
So let's deal with the base case.

13
00:00:47.630 --> 00:00:52.860
If the length of args is less than or
equal to two.

14
00:00:54.030 --> 00:01:00.250
That means I have all that I need to make
a multiplication between two elements.

15
00:01:00.250 --> 00:01:01.650
Using the multiplication operator.

16
00:01:03.940 --> 00:01:07.780
So I just am going to take args of zero
and args of one, multiply them together,

17
00:01:07.780 --> 00:01:08.830
and return that result.

18
00:01:08.830 --> 00:01:13.410
So I'm going to simply say return
args of zero times args of one.

19
00:01:13.410 --> 00:01:17.650
I was asked in chat over the work break

20
00:01:17.650 --> 00:01:20.310
what about other of those
trivial base cases?

21
00:01:20.310 --> 00:01:22.990
Like if you pass no arguments or only one.

22
00:01:22.990 --> 00:01:25.830
We're not worrying about those
trivial base cases here.

23
00:01:25.830 --> 00:01:27.327
Obviously those are easy to deal with.

24
00:01:29.599 --> 00:01:34.070
&gt;&gt; Kyle Simpson: Okay, so that's the path
we're returning if we have the base case.

25
00:01:34.070 --> 00:01:41.214
Otherwise, what we want to do is return
the args of zero times the recursive call,

26
00:01:41.214 --> 00:01:45.280
the recursive for the rest of the list.

27
00:01:45.280 --> 00:01:49.646
So I'm gonna simple say
return args of zero times.

28
00:01:49.646 --> 00:01:54.160
And the way I call mult with
the rest of the list is to say mult.

29
00:01:54.160 --> 00:01:54.880
And I'm gonna use...

30
00:01:54.880 --> 00:01:56.870
to spread out an array.

31
00:01:56.870 --> 00:02:00.515
And the array that I'm gonna
spread out is not just args, but

32
00:02:00.515 --> 00:02:03.746
it's actually args with
the first value sliced off.

33
00:02:08.635 --> 00:02:09.135
&gt;&gt; Kyle Simpson: Okay.

34
00:02:10.520 --> 00:02:13.330
Something interesting to
note here by the way.

35
00:02:13.330 --> 00:02:17.300
This will be something that we
look at a little bit more later.

36
00:02:17.300 --> 00:02:18.960
But you know how we talked
about immutability?

37
00:02:18.960 --> 00:02:22.260
We already start to see some
principals of that happening

38
00:02:22.260 --> 00:02:24.940
in the JavaScript methods
that are built into language.

39
00:02:24.940 --> 00:02:31.080
Slice, for example is a prototypal method
available to all arrays, all real arrays.

40
00:02:31.080 --> 00:02:32.210
But what does it do?

41
00:02:32.210 --> 00:02:34.720
Does it mutate the existing array?

42
00:02:34.720 --> 00:02:37.310
Actually it creates a whole new array.

43
00:02:37.310 --> 00:02:41.270
So slice is one of those
immutable methods.

44
00:02:41.270 --> 00:02:47.840
Because it takes the method as it's
context but it doesn't change that array,

45
00:02:47.840 --> 00:02:52.820
that context, it produces a whole new one
with the subset of what you asked for.

46
00:02:53.990 --> 00:02:56.200
So slice is one of those
immutable methods.

47
00:02:56.200 --> 00:03:00.720
There are other methods like for
example splice that's with a p in there.

48
00:03:00.720 --> 00:03:05.290
Splice actually changes the array
in place, doesn't create a new one.

49
00:03:06.690 --> 00:03:10.760
So we can see even built into the language
we see differences between using

50
00:03:10.760 --> 00:03:15.660
an immutable principle and returning a new
value versus changing something in place.

51
00:03:17.120 --> 00:03:18.299
So slice is one of those cases.

52
00:03:22.930 --> 00:03:24.685
Questions about exercise 3?

53
00:03:24.685 --> 00:03:25.532
Yes?

54
00:03:25.532 --> 00:03:29.771
&gt;&gt; Speaker 2: Is this now tail call
optimized because you do mult at the end?

55
00:03:29.771 --> 00:03:32.420
&gt;&gt; Kyle Simpson: Perfect question,
thank you for asking that.

56
00:03:32.420 --> 00:03:33.550
No.

57
00:03:33.550 --> 00:03:36.130
This is not a proper tail call,
great question,

58
00:03:36.130 --> 00:03:38.270
a good segway back to what
we were talking about.

59
00:03:38.270 --> 00:03:39.130
Before the work break.

60
00:03:40.330 --> 00:03:45.580
The reason why this is not a proper tail
call is because after mult is called,

61
00:03:46.600 --> 00:03:48.250
another multiplication has to occur.

62
00:03:50.170 --> 00:03:55.670
It's only a proper tail call if the very
last thing to happen is the function call,

63
00:03:55.670 --> 00:03:59.210
and then its return value is
immediately returned back.

64
00:03:59.210 --> 00:04:00.570
Okay.

65
00:04:00.570 --> 00:04:03.010
Can this be rewritten in
a proper tail call form?

66
00:04:03.010 --> 00:04:04.090
Yes.

67
00:04:04.090 --> 00:04:04.960
Am I going to do that now?

68
00:04:04.960 --> 00:04:07.670
No.
If you wanna know more about that

69
00:04:07.670 --> 00:04:11.960
technique how to rewrite in the proper
tail call form, check out the AS6 book.

70
00:04:11.960 --> 00:04:14.540
I think it's chapter 7,
if I remember correctly.

71
00:04:15.550 --> 00:04:20.730
Okay, so
recursion nice graceful way of expressing

72
00:04:22.060 --> 00:04:25.450
a problem kinda getting some of
the unnecessary details out of the way.

73
00:04:25.450 --> 00:04:28.510
ES6 helps us out a bit with the rest and
spread operator.

