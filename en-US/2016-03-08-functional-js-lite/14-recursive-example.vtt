WEBVTT

1
00:00:04.260 --> 00:00:09.152
&gt;&gt; Kyle Simpson: Here's the non-recursive
way to sum up three numbers.

2
00:00:09.152 --> 00:00:13.670
I'm gonna loop over the list of them,
have a running sum that starts at 0,

3
00:00:13.670 --> 00:00:15.460
just add them together.

4
00:00:15.460 --> 00:00:18.950
I end up with 12 at the end,
pretty straightforward.

5
00:00:18.950 --> 00:00:21.550
How can we express the same
program recursively?

6
00:00:23.950 --> 00:00:28.110
Well, this isn't as pretty as
recursive functions usually look.

7
00:00:29.180 --> 00:00:34.590
And part of the reason for that is that
there's some JavaScript nonsense here like

8
00:00:34.590 --> 00:00:39.630
changing arguments into the args and
that sort of thing, that's kind of ugly.

9
00:00:40.780 --> 00:00:44.604
But I promise in the very next slide
I'm about to show you a prettier way of

10
00:00:44.604 --> 00:00:46.498
expressing it now that we have ESX.

11
00:00:46.498 --> 00:00:50.820
But importantly here we have a base case.

12
00:00:50.820 --> 00:00:54.550
Our if statement is a base
case in which case we return

13
00:00:54.550 --> 00:00:57.780
an immediate operation that doesn't
need to call any other function.

14
00:00:59.690 --> 00:01:01.140
And then we have a recursive call.

15
00:01:01.140 --> 00:01:04.192
So we have our two characteristics
that make this a recursive solution.

16
00:01:04.192 --> 00:01:08.298
And you'll notice that what I'm saying
here is that the summation of any

17
00:01:08.298 --> 00:01:12.404
list of numbers is the same thing as
the first number plus the summation of

18
00:01:12.404 --> 00:01:13.500
everything else.

19
00:01:15.420 --> 00:01:18.860
So if I then look at that question and
I say the summation of that is the same

20
00:01:18.860 --> 00:01:21.249
thing as the first number plus
the summation of everything else.

21
00:01:22.550 --> 00:01:26.140
That's what mathematically is so graceful
about recursion is that oftentimes you can

22
00:01:26.140 --> 00:01:29.810
express it in a very simple concept
like this plus everything else.

23
00:01:31.030 --> 00:01:32.224
So that's what we're doing here.

24
00:01:32.224 --> 00:01:37.149
Line 7 is args of 0, line 8 is
the summation of everything else.

25
00:01:39.650 --> 00:01:43.578
Okay, so I promise that we could
clean up some of the code,

26
00:01:43.578 --> 00:01:48.170
make it look a little bit more
graceful using some ES6 techniques.

27
00:01:48.170 --> 00:01:51.285
This isn't an ES6 workshop but I like ES6.

28
00:01:51.285 --> 00:01:54.810
And I certainly like it in places where
it helps us express code more clearly.

29
00:01:56.260 --> 00:01:58.270
So ES6 for the win.

30
00:01:58.270 --> 00:02:01.290
I have that ...args up in line 1.

31
00:02:01.290 --> 00:02:03.830
That's the REST parameter syntax,

32
00:02:03.830 --> 00:02:07.660
which collects all of the arguments
into a real array for us.

33
00:02:07.660 --> 00:02:11.929
So I don't have to do that
crazy .slice.call crap.

34
00:02:11.929 --> 00:02:15.952
And then on line 7, I have that
...operator happening again, but

35
00:02:15.952 --> 00:02:20.130
now it's used in a value rather
than in an assignment context.

36
00:02:20.130 --> 00:02:22.950
In the value context,
the ...operator spreads.

37
00:02:24.050 --> 00:02:29.190
So it's going to spread out the array
of args.slice into the sumRecur.

38
00:02:29.190 --> 00:02:30.790
I don't even need to use apply here.

39
00:02:32.330 --> 00:02:35.200
Cuz automatically I'm going to
spread out that array into those

40
00:02:35.200 --> 00:02:36.340
argument positions for me.

41
00:02:38.430 --> 00:02:41.430
ES6 is pretty cool, it allows

42
00:02:41.430 --> 00:02:45.900
us to express things without getting
into the unnecessary details.

43
00:02:45.900 --> 00:02:50.530
All that array operation crap is useless.

44
00:02:50.530 --> 00:02:52.740
It's not helping us
understand this solution.

45
00:02:52.740 --> 00:02:56.242
So here's a place where ES6 shines cuz
it gets that stuff out of the way and

46
00:02:56.242 --> 00:02:58.236
lets us understand the solution better.

47
00:03:00.077 --> 00:03:04.815
&gt;&gt; Kyle Simpson: And it's clearer
to see where our base case and

48
00:03:04.815 --> 00:03:07.862
our [COUGH] recursive call is.

49
00:03:07.862 --> 00:03:11.167
All right, so
let's practice recursion now, exercise 3.

50
00:03:11.167 --> 00:03:12.430
I'm sorry, you have a question for me now?

51
00:03:12.430 --> 00:03:15.440
&gt;&gt; Audience: So this one, would it work
with any number of parameters, right?

52
00:03:15.440 --> 00:03:19.719
Just not 3, 4, 5 but
we give like 3, 4, 5, 6, 7, 8.

53
00:03:19.719 --> 00:03:20.328
&gt;&gt; Kyle Simpson: Yep.

54
00:03:20.328 --> 00:03:21.486
&gt;&gt; Audience: It would still slice it?

55
00:03:21.486 --> 00:03:23.357
&gt;&gt; Kyle Simpson: Yep.
It would have worked with as many

56
00:03:23.357 --> 00:03:26.750
parameters as we have, or
as many arguments as we passed to.

57
00:03:26.750 --> 00:03:29.710
By the way,
just as a little nuance nitpick,

58
00:03:29.710 --> 00:03:32.830
you've heard me use these terms already,
but I just want to make sure everybody

59
00:03:32.830 --> 00:03:35.420
understands why I'm choosing
the different term.

60
00:03:35.420 --> 00:03:38.630
The argument is what you pass in,
the parameter is what receives it.

61
00:03:38.630 --> 00:03:44.030
So in the function declaration signature
on line 1, args is a parameter.

62
00:03:44.030 --> 00:03:49.225
Line 11, the 3, 4, and
5, those are arguments.

63
00:03:49.225 --> 00:03:52.020
Okay, just make sure we understand.

64
00:03:52.020 --> 00:03:53.930
Arguments are passed in and
assigned to parameters.

