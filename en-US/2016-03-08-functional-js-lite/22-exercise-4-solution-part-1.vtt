WEBVTT

1
00:00:00.000 --> 00:00:04.044
[MUSIC]

2
00:00:04.044 --> 00:00:07.964
&gt;&gt; Kyle Simpson: So to start out with, as
the read me says, what we're going to have

3
00:00:07.964 --> 00:00:12.724
you do is write two functions, I don't
care, just call them foo and bar for now,

4
00:00:12.724 --> 00:00:16.650
and each one of those functions
should return a different number.

5
00:00:16.650 --> 00:00:19.420
So have one of them return 10 and
one of them return 42, I don't care,

6
00:00:19.420 --> 00:00:21.110
pick your favorite numbers.

7
00:00:21.110 --> 00:00:23.480
But literally have it
just return a number.

8
00:00:23.480 --> 00:00:23.980
Okay?

9
00:00:25.700 --> 00:00:28.340
Your functions probably look
something roughly like that.

10
00:00:29.440 --> 00:00:29.940
Okay?

11
00:00:31.720 --> 00:00:34.870
Now, there's something interesting in
functional programming, there's something

12
00:00:34.870 --> 00:00:39.030
interesting about the nature of
having a value wrapped in a function.

13
00:00:40.630 --> 00:00:43.230
Kind of like I said earlier that
there's an instinct to say well,

14
00:00:43.230 --> 00:00:46.190
if given the option, I try to stuff.

15
00:00:46.190 --> 00:00:49.810
I try to stuff values into
a list because I know list can.

16
00:00:49.810 --> 00:00:53.600
I can do certain sorts of operations
on list that are quite handy.

17
00:00:53.600 --> 00:00:58.410
In the same way, you also sometimes
will say if I can wrap a value in

18
00:00:58.410 --> 00:01:02.799
a function, and I know if calling
that function will give me the value,

19
00:01:04.620 --> 00:01:08.860
that starts to produce patterns of
more composibility in our programmes.

20
00:01:08.860 --> 00:01:12.670
It's easier to compose two functions
together that return numbers,

21
00:01:12.670 --> 00:01:14.490
than it is to simply
compose the two numbers.

22
00:01:14.490 --> 00:01:15.520
That's what we're getting at.

23
00:01:15.520 --> 00:01:16.270
Okay.

24
00:01:16.270 --> 00:01:18.500
So this was one of those
pull out of thin air things.

25
00:01:18.500 --> 00:01:20.460
I didn't tell you to just write
the two values 42 and 10,

26
00:01:20.460 --> 00:01:24.570
I told you to wrap them in functions
that produce those values.

27
00:01:24.570 --> 00:01:25.680
Won't be clear why yet, but

28
00:01:25.680 --> 00:01:29.600
as we go along, maybe you'll see
a little bit more of a reason why.

29
00:01:29.600 --> 00:01:30.100
Okay?

30
00:01:31.130 --> 00:01:32.510
So, item number two in the readme.

31
00:01:32.510 --> 00:01:36.365
What we're going to do, is take,
we're going to write a function,

32
00:01:36.365 --> 00:01:37.700
which we'll call add.

33
00:01:37.700 --> 00:01:42.780
And add needs to take take two numbers,
and return the result.

34
00:01:42.780 --> 00:01:46.210
We'll just leave our function bar and
function foo alone for a little bit.

35
00:01:46.210 --> 00:01:49.020
Add needs to take in two numbers and
add them two together.

36
00:01:49.020 --> 00:01:52.130
So let me give you your
fifteen seconds to write that.

37
00:01:56.350 --> 00:01:59.590
I'm going to take away points from
you if you pulled out underscore like

38
00:01:59.590 --> 00:02:02.430
there's some underscore
function I can do for this.

39
00:02:02.430 --> 00:02:05.110
We're writing our own code here,
we're learning new stuff, okay?

40
00:02:06.890 --> 00:02:08.360
That was just a little dig, I apologize.

41
00:02:08.360 --> 00:02:12.770
I'm sure there probably is
an add function in underscore.

42
00:02:13.930 --> 00:02:15.708
All right, add x and y.

43
00:02:15.708 --> 00:02:17.110
Is what I'm going to name them.

44
00:02:18.140 --> 00:02:20.340
How does add work?

45
00:02:20.340 --> 00:02:22.460
Pretty straightforward, x plus y.

46
00:02:22.460 --> 00:02:22.960
Okay.

47
00:02:24.390 --> 00:02:25.370
Not rocket science here.

48
00:02:27.830 --> 00:02:31.260
This step progression that I am
going through is intentional.

49
00:02:32.400 --> 00:02:35.440
It's intentional to lead you
two places where you start

50
00:02:35.440 --> 00:02:37.530
to get some of those instincts.

51
00:02:37.530 --> 00:02:41.830
So don't jump too quickly beyond what I'm
doing and think that it's too remedial.

52
00:02:41.830 --> 00:02:43.261
This is a very carefully,

53
00:02:43.261 --> 00:02:48.221
intentionally designed exercise.
&gt;&gt; Kyle Simpson: All right,

54
00:02:48.221 --> 00:02:49.520
the next thing we want to do.

55
00:02:49.520 --> 00:02:53.190
I could observe that an add
that takes two numbers is cool.

56
00:02:53.190 --> 00:02:56.750
But an add that takes two
functions would be even cooler.

57
00:02:58.490 --> 00:03:00.750
So I'm going to make an add2.

58
00:03:00.750 --> 00:03:06.220
And that function needs to
take in two functions, and

59
00:03:06.220 --> 00:03:11.410
it needs to cull both of those to get
their values out and then return the sum.

60
00:03:13.950 --> 00:03:15.120
Okay?

61
00:03:15.120 --> 00:03:17.540
So your function might look
something a little like this.

62
00:03:17.540 --> 00:03:19.350
I'm going to call it fn1 and fn2.

63
00:03:22.630 --> 00:03:26.540
And, it's going to use the add

64
00:03:26.540 --> 00:03:31.880
function.
&gt;&gt; Kyle Simpson: I'm going to call fn1.

65
00:03:34.470 --> 00:03:36.228
I'm going to call fn2,

66
00:03:36.228 --> 00:03:41.847
pass those to the add function.
&gt;&gt; Kyle Simpson: Again,

67
00:03:41.847 --> 00:03:46.663
it's not totally clear to you why it
decided to make add2 use add rather than

68
00:03:46.663 --> 00:03:48.930
just do its own addition.

69
00:03:48.930 --> 00:03:51.640
But in functional programming,
you see this all the time.

70
00:03:51.640 --> 00:03:54.770
Everything, every abstraction
that you define is a combination,

71
00:03:54.770 --> 00:03:57.630
it's a composition of some
lower level abstraction.

72
00:03:57.630 --> 00:03:58.460
We're always looking for

73
00:03:58.460 --> 00:04:02.660
that turtles all the way down sort
of path to defining a utilities.

74
00:04:04.340 --> 00:04:08.269
So why repeat the plus operator when I
already have a function that can compute

75
00:04:08.269 --> 00:04:14.511
them?
&gt;&gt; Kyle Simpson: Now,

76
00:04:14.511 --> 00:04:16.500
I know this stuff seems totally remedial.

77
00:04:16.500 --> 00:04:18.770
It's about to get,
here in a couple of steps,

78
00:04:18.770 --> 00:04:23.540
about to get a little more challenging,
so just hang on with us.

79
00:04:23.540 --> 00:04:26.230
So add2 passes those values in,
just like we did,

80
00:04:26.230 --> 00:04:27.720
now let's move on to item number four.

81
00:04:29.020 --> 00:04:32.020
There's two functions
that we defined that had.

82
00:04:32.020 --> 00:04:35.770
Well, before we do that, let's just
verify that we know how we can use this.

83
00:04:35.770 --> 00:04:36.930
How do we use the add2 function?

84
00:04:36.930 --> 00:04:43.477
What would the call set look like?
&gt;&gt; Kyle Simpson: add2,

85
00:04:43.477 --> 00:04:46.035
what am I going to pass into it?
&gt;&gt; Speaker 2: [INAUDIBLE]

86
00:04:46.035 --> 00:04:47.180
&gt;&gt; Kyle Simpson: Foo and bar.

87
00:04:48.590 --> 00:04:49.930
Now what am I going to get back out

88
00:04:49.930 --> 00:04:52.847
in this case?
&gt;&gt; Kyle Simpson: 52.

89
00:04:52.847 --> 00:04:55.730
Okay, so everybody make sure
we're understanding that.

90
00:04:55.730 --> 00:05:03.410
Now, let's take the foo and bar functions,
and replace them with a new function.

91
00:05:03.410 --> 00:05:05.688
Now I don't care what
you call this function,

92
00:05:05.688 --> 00:05:07.870
I'm going to still call mine foo, but

93
00:05:07.870 --> 00:05:11.970
if you have a different better name that
you like, the name doesn't matter here.

94
00:05:11.970 --> 00:05:13.860
But here's what this function needs to do.

95
00:05:13.860 --> 00:05:19.370
This function needs to take a value,
a single value, and it needs to return

96
00:05:19.370 --> 00:05:24.190
back a function that when that function
is called will give you the value on it.

97
00:05:30.420 --> 00:05:35.430
So take a moment to figure out how you
would define function 2, all right?

98
00:05:35.430 --> 00:05:37.930
So your function foo might
take a value like x.

99
00:05:37.930 --> 00:05:40.640
What does it need to do?

100
00:05:40.640 --> 00:05:48.030
It needs to return a function that
doesn't need to receive any parameters.

101
00:05:49.910 --> 00:05:51.100
Now what does that function need to do?

102
00:05:53.150 --> 00:05:56.776
Return x.
&gt;&gt; Kyle Simpson: There's our closure

103
00:05:56.776 --> 00:05:57.380
again, right?

104
00:05:59.560 --> 00:06:02.560
We're producing a function that
will remember that x value, and

105
00:06:02.560 --> 00:06:05.120
every time we call it it'll
give us that x value back.

106
00:06:06.730 --> 00:06:10.980
Here's a little hint preview
towards the asynch workshop.

107
00:06:10.980 --> 00:06:15.890
That's called a thunk, and we'll talk
about thunks, but when we get to thunks, I

108
00:06:15.890 --> 00:06:23.371
want you to remember back to this idea of
a function wrapped around a value, okay?

109
00:06:23.371 --> 00:06:26.070
All right, so now we don't have a foo and

110
00:06:26.070 --> 00:06:28.600
a bar anymore like that,
that we can just pass in.

111
00:06:28.600 --> 00:06:32.990
What do we need to do to call add to now
if want to still produce our 52 result,

112
00:06:32.990 --> 00:06:33.880
what do we need to do?

113
00:06:38.210 --> 00:06:41.600
Foo 10, and Foo 42.

114
00:06:41.600 --> 00:06:44.400
Everybody see that?

115
00:06:44.400 --> 00:06:48.620
I'm actually calling those functions, and
producing functions that get past them.

