WEBVTT

1
00:00:00.000 --> 00:00:04.033
[MUSIC]

2
00:00:04.033 --> 00:00:07.407
&gt;&gt; Mike: First off, the readme says we're
gonna need to care about only the first

3
00:00:07.407 --> 00:00:09.550
two parameters passed in.

4
00:00:09.550 --> 00:00:12.485
Quick, easiest way to do
that is to give those names.

5
00:00:12.485 --> 00:00:16.344
You could have messed around with the
arguments array if you really wanted to,

6
00:00:16.344 --> 00:00:19.849
but here, I'm gonna just cheat and
use just the two names, which means

7
00:00:19.849 --> 00:00:23.377
if you pass in any other arguments,
I'm just gonna ignore them, kay?

8
00:00:23.377 --> 00:00:26.500
Now, I need to return a function.

9
00:00:26.500 --> 00:00:29.950
I'm going to be lazy and not give it
a name, cuz it doesn't really matter here,

10
00:00:29.950 --> 00:00:32.910
but function expressions
generally should have names.

11
00:00:33.950 --> 00:00:37.850
That function, as we see the way it's
being used, if we look at the test cases,

12
00:00:37.850 --> 00:00:41.200
if you will, the way it's being used,
doesn't take any arguments, so

13
00:00:41.200 --> 00:00:42.986
I don't need an argument here.

14
00:00:42.986 --> 00:00:47.040
And the readme said that what
we wanted to do with that is add

15
00:00:47.040 --> 00:00:49.070
those two values together and return it.

16
00:00:49.070 --> 00:00:51.583
So that's all we have to do.

17
00:00:53.458 --> 00:00:57.190
&gt;&gt; Mike: Can we see that it's
closed over both x and y?

18
00:00:57.190 --> 00:01:01.800
The parameters act, in this case,
like local variables that have a value.

19
00:01:01.800 --> 00:01:04.030
Those values don't change over time.

20
00:01:04.030 --> 00:01:08.300
So, over time, as I'm calling x over and
over and over again, x and

21
00:01:08.300 --> 00:01:11.680
y are still always the 3 and
the 4 value respectively,

22
00:01:11.680 --> 00:01:15.214
which is what gives us that
value 7 each time, okay?

23
00:01:17.240 --> 00:01:22.290
As silly and stupid as this is,
being able to do that at a whim,

24
00:01:22.290 --> 00:01:26.790
being able to put a function and wrap
it around some state, and maintain that

25
00:01:26.790 --> 00:01:30.980
state, is one of the most important things
you can get, if you wanna use functional

26
00:01:30.980 --> 00:01:34.800
programming techniques, functional light,
if you will, in your programs.

27
00:01:37.080 --> 00:01:39.430
Having a mastery over
closure is really important.

28
00:01:39.430 --> 00:01:42.046
That's why I said at
the beginning that it's so

29
00:01:42.046 --> 00:01:46.480
fundamental to programming, it's so
much the most important thing.

30
00:01:46.480 --> 00:01:49.990
I literally can't count how many
different places that closure shows up in

31
00:01:49.990 --> 00:01:50.940
programming techniques.

