WEBVTT

1
00:00:04.010 --> 00:00:07.530
&gt;&gt; Kyle Simpson: Recursion's one of those
things that tends to bend people's brains.

2
00:00:08.840 --> 00:00:10.510
I find that sad.

3
00:00:10.510 --> 00:00:15.180
It's kind of like,
if we look at state of most adults.

4
00:00:15.180 --> 00:00:19.940
Now I know in a developer crowd
we have some selection bias here

5
00:00:19.940 --> 00:00:22.430
if I ask most developers,
what do you think about math?

6
00:00:22.430 --> 00:00:26.180
Probably not gonna get a lot of
negative reactions from things.

7
00:00:26.180 --> 00:00:28.686
Some people are probably very pro math.

8
00:00:28.686 --> 00:00:32.090
I certainly as a computer scientist,
I took a whole bunch of math classes.

9
00:00:32.090 --> 00:00:36.465
So, math doesn't scare me but
if you ask the general populus about math,

10
00:00:36.465 --> 00:00:40.800
well, some people will just
have a visceral reaction.

11
00:00:41.910 --> 00:00:49.210
And I find that so sad, that math is not
just something that some people, that

12
00:00:49.210 --> 00:00:52.800
many people would say, math's fine, but
I don't really care that much about it.

13
00:00:52.800 --> 00:00:54.420
That would be fine to me.

14
00:00:54.420 --> 00:00:58.620
What's sad is that math has this
negative connotation in somebody's mind.

15
00:00:58.620 --> 00:01:01.338
I think recursion is similar.

16
00:01:01.338 --> 00:01:04.630
Recursion is often times one

17
00:01:04.630 --> 00:01:08.020
of those things kinda like regular
expression as another example.

18
00:01:08.020 --> 00:01:10.641
It's a very polarizing topic,
some developers will say yeah,

19
00:01:10.641 --> 00:01:13.987
I'm okay with regular, maybe I don't use
them after, but I'm okay with them and

20
00:01:13.987 --> 00:01:15.168
some people like, no.

21
00:01:15.168 --> 00:01:19.851
Absolutely not, regular expressions
are way too confusing and

22
00:01:19.851 --> 00:01:22.840
recursion seems to be similar.

23
00:01:22.840 --> 00:01:26.070
It's another one of those things we
want to try to practice wrapping our

24
00:01:26.070 --> 00:01:26.570
brains around.

25
00:01:27.700 --> 00:01:32.160
So put simply recursion means
a function that you define,

26
00:01:32.160 --> 00:01:38.200
it's going to perform some action and
you want for that function to stop

27
00:01:38.200 --> 00:01:43.030
calling itself, it's going to call
itself as part of the solution but

28
00:01:43.030 --> 00:01:47.350
you want for it to stop calling itself
when it reaches what we call a base case.

29
00:01:47.350 --> 00:01:51.970
So the two characteristics of a recursive
function are, that there is a base case

30
00:01:51.970 --> 00:01:56.090
which stops the recursion and
there is a recursive call.

31
00:01:56.090 --> 00:02:00.460
Meaning, the function is literally
using it's same name to call itself,

32
00:02:00.460 --> 00:02:02.140
to invoke itself from inside of itself.

33
00:02:03.780 --> 00:02:07.910
Now, a closely related concept is
something called mutual recursion.

34
00:02:07.910 --> 00:02:11.050
If recursion is a single
function calling itself

35
00:02:11.050 --> 00:02:14.890
recursively until it reaches a base case,
mutual recursion is two or

36
00:02:14.890 --> 00:02:18.550
more functions calling each other
until they reach a base case.

37
00:02:19.730 --> 00:02:21.010
Same principle.

38
00:02:21.010 --> 00:02:22.940
Just whether there's one or more.

39
00:02:22.940 --> 00:02:25.820
Recursion is incredibly important and
incredibly useful.

40
00:02:26.870 --> 00:02:29.150
Make a little side note about
recursion for a moment.

41
00:02:30.420 --> 00:02:33.440
One of the reasons I think programmers
don't really spend much time,

42
00:02:33.440 --> 00:02:36.130
at least programmers in
the JavaScript community,

43
00:02:36.130 --> 00:02:38.470
don't spend much time
thinking about recursion.

44
00:02:38.470 --> 00:02:41.370
One of those, of course, is it can
be hard to wrap your brains around.

45
00:02:41.370 --> 00:02:45.490
But another reason is because many
people have observed that even

46
00:02:45.490 --> 00:02:49.830
if you understand recursion, it may not be
very practical to use in your programs for

47
00:02:49.830 --> 00:02:53.760
certain types of problems,
because there are physical limitations

48
00:02:53.760 --> 00:02:58.160
applied to our programs because of
the nature of how recursion works.

49
00:02:58.160 --> 00:03:00.230
Recursion is one of those great, great,

50
00:03:00.230 --> 00:03:05.860
great examples of works in theory
sometimes doesn't work in practice.

51
00:03:05.860 --> 00:03:07.230
What is that practice?

52
00:03:07.230 --> 00:03:13.420
Well in theory, you write a recursive
program assuming unlimited CPU and

53
00:03:13.420 --> 00:03:18.580
unlimited memory, but in practice has
anybody in here got unlimited CPU and

54
00:03:18.580 --> 00:03:20.590
unlimited memory, absolutely not.

55
00:03:20.590 --> 00:03:26.060
Doesn't exist, even in the Amazon
cloud it's not unlimited, okay?

56
00:03:26.060 --> 00:03:27.890
So recursion seems great in theory.

57
00:03:27.890 --> 00:03:33.360
I can make every single thing I
do recursive, but in practice

58
00:03:33.360 --> 00:03:36.170
certain things can be done recursively and
other things are gonna fall apart.

59
00:03:37.310 --> 00:03:40.310
Now there's a reason for that,
and the primary reason for

60
00:03:40.310 --> 00:03:43.210
it is not even the CP,
the primary reason is memory.

61
00:03:43.210 --> 00:03:47.531
When one function calls another function,
even if that function is itself,

62
00:03:47.531 --> 00:03:49.990
when one function calls another function,

63
00:03:49.990 --> 00:03:53.986
the first function call allocates in
memory what we call a stack frame.

64
00:03:53.986 --> 00:03:55.730
I'm trying not to get too complex with it,
but

65
00:03:55.730 --> 00:03:59.350
a stack frame's a place in memory where
all the variables and state are held.

66
00:03:59.350 --> 00:04:02.150
And the program counter
as it's walking through.

67
00:04:02.150 --> 00:04:05.733
When it finishes with that stack frame
it throws the stack frame away, so

68
00:04:05.733 --> 00:04:09.432
when a function finishes, it throws
that memory away and it reclaims it and

69
00:04:09.432 --> 00:04:10.400
reuses it, okay?

70
00:04:10.400 --> 00:04:12.626
So, when one function
calls a second function,

71
00:04:12.626 --> 00:04:17.440
a second stack frame allocation happens,
so if you have A calling B, and

72
00:04:17.440 --> 00:04:21.800
B calling C, and C calling D, and D
calling E, you now have five stack frames

73
00:04:21.800 --> 00:04:26.040
that have been allocated each one
taking up a little bit more memory.

74
00:04:26.040 --> 00:04:28.360
Now, in your programs,

75
00:04:28.360 --> 00:04:31.860
you probably have functions calling
other functions calling other functions.

76
00:04:31.860 --> 00:04:36.260
But I'm willing to guess that
you probably at most have,

77
00:04:36.260 --> 00:04:41.380
let's just arbitrarily say you've probably
at most ten levels deep in a run stack.

78
00:04:41.380 --> 00:04:42.904
Even when you factor in your libraries,

79
00:04:42.904 --> 00:04:46.360
10 maybe 15 it's just not very
common to go beyond that.

80
00:04:48.080 --> 00:04:54.300
So back in the day old IE had
an actual arbitrary limitation of 13.

81
00:04:54.300 --> 00:04:57.630
You could go to 13 but
once you went beyond 13 it

82
00:04:57.630 --> 00:05:01.150
would just simply cut you off and
say the call stack is too deep.

83
00:05:01.150 --> 00:05:03.910
Had nothing to do with whether
it was recursion or not.

84
00:05:03.910 --> 00:05:06.990
Just simply you had too many
snap frames allocated, and

85
00:05:06.990 --> 00:05:09.620
we're just gonna physically
cut you off at that point.

86
00:05:09.620 --> 00:05:11.380
I don't know where they
arrived at that 13 number,

87
00:05:11.380 --> 00:05:14.485
I don't know if that was something
physically with the way the engine worked,

88
00:05:14.485 --> 00:05:18.260
whether they just arbitrarily said,
that's too much memory to give away.

89
00:05:18.260 --> 00:05:19.010
I don't know.

90
00:05:19.010 --> 00:05:21.631
But 13 was the arbitrary limit.

91
00:05:21.631 --> 00:05:25.318
Now, modern browsers the limit
is up like 10 or 20,000.

92
00:05:25.318 --> 00:05:28.633
But there has to be a limit because
if they didn't have a limit,

93
00:05:28.633 --> 00:05:32.540
you could have a runway program
that ran out of all the memory.

94
00:05:32.540 --> 00:05:35.730
And especially when we're
talking about mobile devices,

95
00:05:35.730 --> 00:05:39.850
the single worst sin that you can commit
is running a device out of memory

96
00:05:39.850 --> 00:05:42.029
cuz guess what happens when it
completely runs out of memory.

97
00:05:43.050 --> 00:05:44.740
It shuts off.

98
00:05:44.740 --> 00:05:47.540
That's the worst possible user experience.

99
00:05:47.540 --> 00:05:49.799
You ever had an app that
crashed your phone, and

100
00:05:49.799 --> 00:05:52.183
your phone literally
restarted as a result of it?

101
00:05:52.183 --> 00:05:53.040
You know what they did?

102
00:05:53.040 --> 00:05:53.960
They ran out of memory.

103
00:05:55.360 --> 00:05:57.310
They didn't have any kind of
memory controls and they ran out.

104
00:05:57.310 --> 00:06:02.330
So JavaScript said that's unacceptable, to
just simply run unbounded without memory.

105
00:06:02.330 --> 00:06:04.920
Without any kind of memory restrictions.

106
00:06:04.920 --> 00:06:08.400
Because programmers can't think about
memory restrictions in terms of amount of

107
00:06:08.400 --> 00:06:12.420
memory, they had to restrict it in
terms of depth of the call stack.

108
00:06:13.830 --> 00:06:17.940
So in chrome I think it's 10,000 or
20,000 or something like that.

109
00:06:17.940 --> 00:06:19.810
Other browsers have
different arbitrary ones.

110
00:06:20.830 --> 00:06:25.390
You're never gonna write a program
that has intentionally 10,000 calls.

111
00:06:25.390 --> 00:06:27.340
Right that would be crazy, but

112
00:06:27.340 --> 00:06:31.470
it's super easy to get into that case
when you're dealing with recursion.

113
00:06:31.470 --> 00:06:33.830
If you have a problem
size that's a hundred,

114
00:06:33.830 --> 00:06:36.620
your call starts gonna
maximum be a hundred.

115
00:06:36.620 --> 00:06:39.540
When your program size grows to
a thousand now your call start

116
00:06:39.540 --> 00:06:41.280
gonna be a maximum of a thousand.

117
00:06:41.280 --> 00:06:43.120
When it grows to 10,000,

118
00:06:43.120 --> 00:06:47.310
we're starting to get close to
the point where it might fail.

119
00:06:47.310 --> 00:06:49.540
The engine might throw an error and
say, you went too deep.

120
00:06:50.550 --> 00:06:54.450
So that's one of the main reasons why
recursion has been this theoretical

121
00:06:54.450 --> 00:06:59.260
thing that some people could deal with but
in practice doesn't seem terribly easy for

122
00:06:59.260 --> 00:07:05.310
us to figure out how do I reason about
a problem that has a bounds to it?

123
00:07:05.310 --> 00:07:07.815
Because as computer scientists
we typically like to reason in

124
00:07:07.815 --> 00:07:09.200
un-bounded form.

125
00:07:09.200 --> 00:07:12.640
We'd like to assume that our function
our program would run with regardless so

126
00:07:12.640 --> 00:07:14.220
much data in there is.

127
00:07:14.220 --> 00:07:16.800
And if we know that there are some
arbitrary limit we just simply don't

128
00:07:16.800 --> 00:07:18.240
do recursion.

129
00:07:18.240 --> 00:07:22.500
That's one of the main reasons why this is
been not a technique that has been used.

130
00:07:22.500 --> 00:07:28.380
It's incredibly powerful, is it powerful
from a functionality perspective?

131
00:07:28.380 --> 00:07:29.540
Not so much.

132
00:07:29.540 --> 00:07:31.050
You know what's it's powerful for?

133
00:07:31.050 --> 00:07:33.990
Inexpersivity, it makes

134
00:07:33.990 --> 00:07:38.450
more graceful expression of many sorts
of problems that we wanna solve.

135
00:07:38.450 --> 00:07:42.630
The recursive definition of a problem is
often much more graceful to look at and

136
00:07:42.630 --> 00:07:44.985
understand and
put your wrap your brain around,

137
00:07:44.985 --> 00:07:49.752
than the iterative version which has
the overhead of a loop or whatever.

138
00:07:49.752 --> 00:07:53.762
They are isomorphic of each other,
the iterative version and

139
00:07:53.762 --> 00:07:58.927
the recursive version of solving a problem
if they come up with the same result,

140
00:07:58.927 --> 00:08:02.936
they are isomorphic,
you can transform between the two, and

141
00:08:02.936 --> 00:08:07.670
in fact many compilers in non-JavaScript
languages do in fact do that.

142
00:08:07.670 --> 00:08:10.820
If you write a recursive program
they do what's called unrolling.

143
00:08:10.820 --> 00:08:15.660
They write a loop, basically, and
they keep track of the state in a loop so

144
00:08:15.660 --> 00:08:17.440
it's not allocating all
those stack frames.

145
00:08:17.440 --> 00:08:20.000
That's how many of
the compilers handle recursion.

146
00:08:20.000 --> 00:08:23.660
But JavaScript does not have
that sort of technique in it.

147
00:08:23.660 --> 00:08:26.600
And so for the longest time
we've had this arbitrary limit.

148
00:08:26.600 --> 00:08:31.200
The reason I bring all this up is to say,
recursion is a tool that we ought

149
00:08:31.200 --> 00:08:35.573
to have and it's something that we
can reclaim back into our scope,

150
00:08:35.573 --> 00:08:40.175
back into our mindset of tools available
to us as of ES6 because there is

151
00:08:40.175 --> 00:08:45.760
an optimization that is required in ES6
and that's actually a unique thing.

152
00:08:45.760 --> 00:08:50.040
I'm not sure if I know of any
other example in JavaScript, and

153
00:08:50.040 --> 00:08:53.970
I can't really speak for other languages,
but I'm not sure I've ever heard of a case

154
00:08:53.970 --> 00:08:58.600
where a language specification
requires a particular optimization.

155
00:08:59.690 --> 00:09:04.486
Optimizations are typically thought
of as purely implementation details

156
00:09:04.486 --> 00:09:08.987
that's up to the JavaScript engine
developers how to make it happen.

157
00:09:08.987 --> 00:09:13.758
They very rarely get into discussions
about optimization, except for

158
00:09:13.758 --> 00:09:18.937
when a browser engine author might
say something like they're on TC-39.

159
00:09:18.937 --> 00:09:22.183
They may say well, we're not gonna
implement that because it would be

160
00:09:22.183 --> 00:09:25.080
too difficult to implement based
on the way our engine works.

161
00:09:25.080 --> 00:09:26.820
That's the sort of feedback
they typically get.

162
00:09:26.820 --> 00:09:30.950
But usually, we never see
the specification actually say

163
00:09:30.950 --> 00:09:33.910
you are required to do this
particular kind of optimization.

164
00:09:33.910 --> 00:09:37.028
So this is a very special case, it's
one that we ought to pay attention to.

165
00:09:37.028 --> 00:09:44.450
Essentially, the optimization goes by
the name TCO, tail call optimization.

166
00:09:45.600 --> 00:09:48.690
There's another formal term for
it, proper tail calls.

167
00:09:48.690 --> 00:09:54.940
What this says is, if I have
a function that calls another function,

168
00:09:54.940 --> 00:09:56.830
whether it's recursive or
not is irrelevant.

169
00:09:56.830 --> 00:10:01.310
If I have one function, function A calling
function B if the way that's it's calling

170
00:10:01.310 --> 00:10:05.440
function B is at the very last
statement of that code path,

171
00:10:06.680 --> 00:10:09.700
and it's returning whatever B returns.

172
00:10:09.700 --> 00:10:14.474
So in other words, if in A, at the very
end of that code path, I say return

173
00:10:14.474 --> 00:10:19.990
B(whatever; that's what
a proper tail call looks like.

174
00:10:19.990 --> 00:10:24.180
When there's a return with a function call
and nothing else after the function call.

175
00:10:24.180 --> 00:10:25.390
That's a proper tail call and

176
00:10:25.390 --> 00:10:30.170
what that means is if the JavaScript
engine can identify that that's the case,

177
00:10:30.170 --> 00:10:35.080
it can say the current stack frame
that I'm using I don't need anymore.

178
00:10:35.080 --> 00:10:37.080
So I don't need to make
a new stack frame for

179
00:10:37.080 --> 00:10:40.220
B's call I can reuse the stack frame for
A.

180
00:10:41.900 --> 00:10:46.120
Which means if all of my recursion
is done with proper tail calls,

181
00:10:46.120 --> 00:10:50.010
then I can do arbitrarily deep recursion

182
00:10:50.010 --> 00:10:55.340
with 0 of 1 memory usage,
constant memory usage.

183
00:10:55.340 --> 00:10:57.980
Just one stack frame reused over and
over and over again.

184
00:10:57.980 --> 00:10:59.300
It's a massively important.

185
00:10:59.300 --> 00:11:02.180
It's not new to JavaScript,
that's been around for decades.

186
00:11:02.180 --> 00:11:05.820
But it's a massively important
optimization that reclaims recursion as

187
00:11:05.820 --> 00:11:08.820
something that we ought to care about
because now it becomes practical to use,

188
00:11:10.920 --> 00:11:12.950
if you write with proper tail calls.

189
00:11:14.070 --> 00:11:18.040
Not all recursion is normally
expressed in proper tail calls.

190
00:11:18.040 --> 00:11:22.510
Virtually all recursion can be
rewritten to use proper tail calls, but

191
00:11:22.510 --> 00:11:23.750
that technique is difficult.

192
00:11:23.750 --> 00:11:27.290
And we're not gonna really dive into that,
but I do cover that in my ES6 book.

193
00:11:29.060 --> 00:11:32.720
So, that's why I'm talking about recursion
cuz it's something that we should

194
00:11:32.720 --> 00:11:35.440
care about, not just theoretically but
now practically.

195
00:11:35.440 --> 00:11:39.470
As engines start to get TCO implemented,
it's something that we'll start to be

196
00:11:39.470 --> 00:11:43.410
able to revisit and
use more practically in our programs.

197
00:11:44.680 --> 00:11:48.970
And by the way, I do cover in that ES6
book, I do cover a technique by which you

198
00:11:48.970 --> 00:11:53.780
can write a function in a certain pattern,
where if TCO is there, we'll just simply

199
00:11:53.780 --> 00:11:59.510
run unbounded, relying upon proper tail
call recursion for an arbitrary depth.

200
00:11:59.510 --> 00:12:04.420
But it will detect if an error occurs
because you're in a non-TCO engine and

201
00:12:04.420 --> 00:12:06.310
it will redo in batches.

202
00:12:06.310 --> 00:12:07.290
So there's a pattern for

203
00:12:07.290 --> 00:12:11.910
which you can write this code now and that
will still run okay in older browsers.

204
00:12:11.910 --> 00:12:14.060
It's a little more manual but

205
00:12:14.060 --> 00:12:16.240
it is possible to do if you
needed to bridge the gap.

