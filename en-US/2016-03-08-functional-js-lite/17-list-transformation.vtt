WEBVTT

1
00:00:00.000 --> 00:00:03.914
[MUSIC]

2
00:00:03.914 --> 00:00:05.908
&gt;&gt; Kyle: All right,
these next four I mention,

3
00:00:05.908 --> 00:00:08.690
we're gonna talk about dealing with lists.

4
00:00:08.690 --> 00:00:13.650
This is a very common refrain that you'll
hear from a functional programmer.

5
00:00:13.650 --> 00:00:19.150
We often times will express
an operation that we're going to do as.

6
00:00:19.150 --> 00:00:20.270
A list operation.

7
00:00:21.500 --> 00:00:27.250
That's true even if there's only
one value, which is interesting.

8
00:00:27.250 --> 00:00:28.370
Even if there's no values.

9
00:00:29.750 --> 00:00:34.080
You can have an empty list that you
express an operation on, in which case,

10
00:00:34.080 --> 00:00:35.600
nothing occurs.

11
00:00:35.600 --> 00:00:38.070
You can have that same list
have one value in it, and

12
00:00:38.070 --> 00:00:40.759
now that operation only
occurs on that one item.

13
00:00:41.820 --> 00:00:44.300
Or that list could have
a million items in it and

14
00:00:44.300 --> 00:00:47.780
the operation's going to be
performed across all one million.

15
00:00:47.780 --> 00:00:52.540
But the nice graceful thing is if I always
deal with an operation in terms of a list

16
00:00:52.540 --> 00:00:57.620
context, I don't need to special case all
those places where it might no value,

17
00:00:57.620 --> 00:01:00.660
or only one value, or
a million values, or a billion.

18
00:01:00.660 --> 00:01:04.410
I don't need to special case
anything because the operation is,

19
00:01:04.410 --> 00:01:08.410
if it's defined as a peer operation,
it doesn't really matter, does it?

20
00:01:09.970 --> 00:01:13.650
So again, you see that referring back
to the notion of pure functions.

21
00:01:13.650 --> 00:01:18.200
If we could define an operation that we
want to apply to every single item in

22
00:01:18.200 --> 00:01:22.310
a list, and
we define that as a peer operation,

23
00:01:22.310 --> 00:01:26.000
then it doesn't matter how many
items are or are not in the list.

24
00:01:26.000 --> 00:01:27.070
It also doesn't even matter.

25
00:01:27.070 --> 00:01:30.040
This is an implementation detail but
just to tweak your brain a little bit,

26
00:01:30.040 --> 00:01:32.070
it also doesn't matter what
order those things happen in.

27
00:01:33.150 --> 00:01:35.370
If I'm going to do a list transformation,

28
00:01:35.370 --> 00:01:37.750
does it really matter whether I go left or
right?

29
00:01:39.080 --> 00:01:40.790
Or start from the middle and go outward?

30
00:01:42.090 --> 00:01:44.860
If I'm using pure functions
it doesn't matter.

31
00:01:44.860 --> 00:01:50.550
As an optimization if you had a gigantic,
gigantic list, like billions of elements.

32
00:01:50.550 --> 00:01:54.990
And you wanted to take advantage
of a bunch of multi-processing and

33
00:01:54.990 --> 00:01:56.910
parallel processing.

34
00:01:56.910 --> 00:02:00.900
A map operation, a transformation
operation with pure functions,

35
00:02:00.900 --> 00:02:04.040
is something that you could send
each one of those things to

36
00:02:04.040 --> 00:02:06.490
entirely different threads,
into a whole bunch of stuff in parallel,

37
00:02:06.490 --> 00:02:08.640
and then assemble everything
back together at the end.

38
00:02:09.820 --> 00:02:14.230
So you can start to see why list
operations are an attraction

39
00:02:14.230 --> 00:02:15.800
abstraction for our programming.

40
00:02:17.140 --> 00:02:20.090
Here we want to talk about
the transformation operation.

41
00:02:20.090 --> 00:02:20.690
Okay?

42
00:02:20.690 --> 00:02:21.960
Transformation.

43
00:02:21.960 --> 00:02:24.400
I don't mean anything
more complex than this.

44
00:02:24.400 --> 00:02:28.090
A transformation is taking one value,
doing something to it so

45
00:02:28.090 --> 00:02:30.250
that you get a different value out.

46
00:02:30.250 --> 00:02:31.130
That's all that I mean.

47
00:02:33.340 --> 00:02:35.270
So what does that entail?

48
00:02:35.270 --> 00:02:37.880
Well the types of transformations
that you could define,

49
00:02:37.880 --> 00:02:42.209
the types of pure transformations that
you could define, are almost limitless.

50
00:02:43.320 --> 00:02:46.800
We've been dealing with numbers because
they're a convenient way of doing so.

51
00:02:46.800 --> 00:02:49.330
So what's a transformation
we can do on a number?

52
00:02:49.330 --> 00:02:51.690
Well, you could take any number and
double it.

53
00:02:52.960 --> 00:02:54.290
That's a transformation.

54
00:02:54.290 --> 00:02:56.390
Double is a transformation.

55
00:02:56.390 --> 00:02:59.110
You can take any number and
divide it by three.

56
00:02:59.110 --> 00:03:00.010
That's a transformation.

57
00:03:00.010 --> 00:03:02.940
You can take any number and
increment it by one.

58
00:03:02.940 --> 00:03:03.890
You get the point?

59
00:03:03.890 --> 00:03:07.855
You get to find a whole bunch of
different mathematic transformations,

60
00:03:07.855 --> 00:03:09.745
pure transformations on a value.

61
00:03:09.745 --> 00:03:13.989
A key characteristic here,
a transformation what is called in

62
00:03:13.989 --> 00:03:18.712
functional programming a mapping or
a map is you are going to end up with

63
00:03:18.712 --> 00:03:22.953
a new list at the end that has
exactly the same number of values as

64
00:03:22.953 --> 00:03:27.300
the original list whatever they are empty,
one, or a billion.

65
00:03:28.480 --> 00:03:31.930
And for every single value in
the new list there's a one to one

66
00:03:31.930 --> 00:03:34.310
mapping from the original
value to the new value.

67
00:03:34.310 --> 00:03:36.970
And that mapping is done with
the function that you provide,

68
00:03:36.970 --> 00:03:38.930
your pure transformation, okay?

69
00:03:38.930 --> 00:03:42.410
That's what a transformation, that's
what a list transformation looks like.

70
00:03:42.410 --> 00:03:45.330
What if we wanted to write
our own transform function?

71
00:03:45.330 --> 00:03:45.956
How would we do that?

72
00:03:45.956 --> 00:03:50.280
Probably not too surprising.

73
00:03:50.280 --> 00:03:52.320
We first define on line 1 a doubleIt.

74
00:03:52.320 --> 00:03:54.430
There's our pure transform function.

75
00:03:56.140 --> 00:03:56.640
Okay?

76
00:03:57.680 --> 00:03:58.920
Functional programming terms,

77
00:03:58.920 --> 00:04:02.930
they often use this fancy word
called predicate, who cares, right?

78
00:04:02.930 --> 00:04:04.520
It's just a function that does something.

79
00:04:04.520 --> 00:04:06.290
It's a pure function.

80
00:04:06.290 --> 00:04:07.950
So I'm not going to talk
about predicates but

81
00:04:07.950 --> 00:04:11.380
that if you've read functional programming
you might have seen that word before.

82
00:04:12.450 --> 00:04:13.190
All right so double it.

83
00:04:14.230 --> 00:04:17.070
Takes in v multiplies by
2 returns the value back.

84
00:04:17.070 --> 00:04:18.260
Doesn't get anymore simple than that.

85
00:04:19.920 --> 00:04:23.010
I'm sure somebody out there is like
why didn't he use an arrow function.

86
00:04:23.010 --> 00:04:25.410
I've got a lot of writing about why
I didn't use an arrow function.

87
00:04:26.960 --> 00:04:28.740
But transform is the one
we wanna pay attention to.

88
00:04:28.740 --> 00:04:33.290
Transform takes an array,
and a function reference.

89
00:04:33.290 --> 00:04:35.430
Whatever, doesn't matter
what the function is, right?

90
00:04:35.430 --> 00:04:38.350
This is a general utility
that we call transform.

91
00:04:38.350 --> 00:04:39.410
And you notice, by the way,

92
00:04:39.410 --> 00:04:43.810
that I intentionally use an immutable
programming technique here.

93
00:04:43.810 --> 00:04:48.200
Which is, that I declare a new value,
a new list, and I add to that new list.

94
00:04:48.200 --> 00:04:52.330
As opposed to operating in place.

95
00:04:52.330 --> 00:04:54.230
Changing the existing array.

96
00:04:54.230 --> 00:04:57.210
If I operated in place, I could come
up with the same end result but

97
00:04:57.210 --> 00:04:59.590
I would not be doing
functional programming.

98
00:04:59.590 --> 00:05:01.310
Because I would not have used
that immutable technique.

99
00:05:01.310 --> 00:05:02.440
Do you get the point.

100
00:05:02.440 --> 00:05:06.230
Everything we are talking about
is all building upon itself here.

101
00:05:06.230 --> 00:05:10.390
We are starting to see why immutable
is important for us to understand

102
00:05:10.390 --> 00:05:14.240
not as a characteristic of a value but
as a characteristic of how we use a value.

103
00:05:15.800 --> 00:05:20.440
So here we choose to use it in
an immutable fashion, not change it but

104
00:05:20.440 --> 00:05:22.560
just simply iterate over it with a for
loop.

105
00:05:23.730 --> 00:05:27.380
So I can pass in my array, 1, 2,
3, 4, 5 like I do on line 12.

106
00:05:27.380 --> 00:05:31.250
And a reference to any given function,
in this case doubleIt and

107
00:05:31.250 --> 00:05:32.990
what I get back is a whole new array.

108
00:05:34.580 --> 00:05:38.020
Where that transformation has
been applied across all of them.

109
00:05:38.020 --> 00:05:41.480
And for our intents and purposes,
we don't care how the engine did that.

110
00:05:41.480 --> 00:05:42.860
We don't care that it was a linear loop.

111
00:05:42.860 --> 00:05:44.990
Could have done it recursively.

112
00:05:46.370 --> 00:05:49.100
I bet if I have you the exercise
to write a recursive map you

113
00:05:49.100 --> 00:05:51.070
could probably figure out how
to write a recursive map.

114
00:05:52.800 --> 00:05:56.320
Either if it's a little bit more
illustrative here but this could have been

115
00:05:56.320 --> 00:06:01.100
done recursively, it could have been done
massively parallel on different threads.

116
00:06:01.100 --> 00:06:02.290
It doesn't matter to us, does it?

117
00:06:03.430 --> 00:06:06.140
All that matters is that,
it's a pure function.

118
00:06:06.140 --> 00:06:07.730
It's a pure transform.

119
00:06:07.730 --> 00:06:11.650
On the outside, on the end result, we
get a whole new list with the transforms

120
00:06:11.650 --> 00:06:15.360
having them occurred in every single
time we do that exact same transform,

121
00:06:15.360 --> 00:06:16.320
we're going to get the same result.

122
00:06:19.680 --> 00:06:21.680
So we could make our
own transform utility,

123
00:06:22.730 --> 00:06:25.400
thankfully the language provides one for
us.

124
00:06:25.400 --> 00:06:28.250
Now some people have quibbles about
this particular utility because it was

125
00:06:28.250 --> 00:06:30.550
implemented as a prototype
method on the array.

126
00:06:32.240 --> 00:06:32.820
It's called map.

127
00:06:34.460 --> 00:06:42.020
I like the name I ca see why it's very
JavaScript to have it be a method so

128
00:06:42.020 --> 00:06:45.960
it automatic ally knows its context
you don't have to pass in the value.

129
00:06:45.960 --> 00:06:47.290
Function programmers will tell you.

130
00:06:49.920 --> 00:06:53.780
I have to pass it as a context method
instead of passing in the array that

131
00:06:53.780 --> 00:06:54.620
I care about?

132
00:06:54.620 --> 00:06:59.220
You know why this is considered to be
a violation of functional programming?

133
00:06:59.220 --> 00:07:02.910
What did I talk about earlier today
where this would create a problem?

134
00:07:02.910 --> 00:07:03.820
Can anybody spot it?

135
00:07:07.575 --> 00:07:10.610
&gt;&gt; Speaker 2: Exchanging the array itself,
and not returning?

136
00:07:10.610 --> 00:07:11.550
&gt;&gt; Kyle: No, it's not actually.

137
00:07:11.550 --> 00:07:13.590
It's actually returning
us a whole new array.

138
00:07:13.590 --> 00:07:15.610
That's good, so it's not the thing.

139
00:07:15.610 --> 00:07:16.940
There's a different problem here.

140
00:07:16.940 --> 00:07:19.320
&gt;&gt; Speaker 2: It can not be counted?

141
00:07:19.320 --> 00:07:20.280
&gt;&gt; Kyle: What's that?

142
00:07:20.280 --> 00:07:22.070
&gt;&gt; Speaker 2: It can not be counted?

143
00:07:22.070 --> 00:07:23.050
&gt;&gt; Kyle: I think you're
on the right lines,

144
00:07:23.050 --> 00:07:25.080
let me just take that one step further.

145
00:07:25.080 --> 00:07:26.620
It makes it harder to compose, doesn't it?

146
00:07:28.450 --> 00:07:32.340
Composing with these is done through
chaining, which is a different kind of

147
00:07:32.340 --> 00:07:35.750
composition than what we talked about
before, which is we take one function and

148
00:07:35.750 --> 00:07:38.020
we take its result and
pump it into another function.

149
00:07:38.020 --> 00:07:41.280
If I take this function and I try to
pump it in as the parameter to another

150
00:07:41.280 --> 00:07:42.840
function, it doesn't really
work that well, does it?

151
00:07:44.060 --> 00:07:45.810
So I end up having to
chain off of the value.

152
00:07:45.810 --> 00:07:48.860
That's the way, the Java Scripty way,
we do composition and

153
00:07:48.860 --> 00:07:52.180
functional programmers always
look at that as yucky.

154
00:07:52.180 --> 00:07:54.230
You can accomplish many
of the same things.

155
00:07:54.230 --> 00:07:57.413
I can understand why
this form of composition,

156
00:07:57.413 --> 00:08:01.800
the method type of composition
can be less attractive.

157
00:08:01.800 --> 00:08:04.440
There are places where you end
up having to do extra work

158
00:08:04.440 --> 00:08:06.920
in the wrappers you create that a truly

159
00:08:06.920 --> 00:08:10.000
functional programming language wouldn't
have to worry about those details.

160
00:08:10.000 --> 00:08:13.930
Just something to be aware of but
the nice thing is it's super easy to use.

161
00:08:13.930 --> 00:08:16.410
It's a method available
on all of our arrays.

162
00:08:16.410 --> 00:08:19.130
And if you're familiar with
that fluent style of api that

163
00:08:19.130 --> 00:08:22.590
chaining style where you call one method
then call another method and all that.

164
00:08:22.590 --> 00:08:26.130
If you're familiar with that
method that form of composition

165
00:08:28.310 --> 00:08:29.850
pretty straight forward.

166
00:08:29.850 --> 00:08:31.910
That's exactly what your hoping for right.

167
00:08:31.910 --> 00:08:35.220
So map is going to yes create
a whole new array for us.

168
00:08:35.220 --> 00:08:37.230
Just like our transform did.

169
00:08:37.230 --> 00:08:40.070
And return that as the return value here.

170
00:08:40.070 --> 00:08:43.369
Which means if we wanted to do
two mappings we could do one map.

171
00:08:44.440 --> 00:08:49.430
At the end of line three we could call
dot map again and we'd be operating

172
00:08:49.430 --> 00:08:54.070
on the second array, the newly created
array, and we'd return a third array.

173
00:08:55.120 --> 00:08:56.360
You can chain these things together,

174
00:08:56.360 --> 00:08:58.090
that's how you can
compose these operations.

175
00:08:59.110 --> 00:09:04.060
Side note, functional programming talks
about this notion of being able to take

176
00:09:04.060 --> 00:09:08.470
two mappings, for example,
two mapping functions like double it, so

177
00:09:08.470 --> 00:09:11.830
maybe there's a double it function and
maybe there's an add one function.

178
00:09:12.860 --> 00:09:16.260
Two independent mappings that we
might produce over a set of lists.

179
00:09:16.260 --> 00:09:19.140
You could say .map(doubleIt).map add 1.

180
00:09:19.140 --> 00:09:21.540
You're gonna get the end result.

181
00:09:21.540 --> 00:09:25.459
You're gonna get an array that
has everything doubled plus 1.

182
00:09:26.810 --> 00:09:31.350
but implementation wise you're going
to have to run through that list twice.

183
00:09:31.350 --> 00:09:34.200
You're going to create an intermediary
ray that nobody cares about because it

184
00:09:34.200 --> 00:09:35.090
just gets thrown away.

185
00:09:36.750 --> 00:09:40.095
Implementation wise there
are some things to be desired.

186
00:09:40.095 --> 00:09:44.805
So functional programming will talk to
you more in depth about this notion of

187
00:09:44.805 --> 00:09:48.105
composing the with an add one function.

188
00:09:48.105 --> 00:09:51.412
You compose those two functions
into one single function, so

189
00:09:51.412 --> 00:09:53.362
that I do both mappings at the same time.

190
00:09:55.252 --> 00:09:58.572
That also has fancy terminology
that we won't get into, but just so

191
00:09:58.572 --> 00:10:01.542
your brain knows where to be looking
at putting little bookmarks there for

192
00:10:01.542 --> 00:10:03.752
you as you study functional
programming more.

193
00:10:03.752 --> 00:10:05.042
That's one of those places.

194
00:10:05.042 --> 00:10:08.002
If you see your self doing dot map,
dot map, dot map, dot filter, and

195
00:10:08.002 --> 00:10:09.860
doing a big old chain of things.

196
00:10:09.860 --> 00:10:13.290
There are ways to compose those
different steps together and

197
00:10:13.290 --> 00:10:18.640
have higher efficiency with
your implementation, okay?

198
00:10:18.640 --> 00:10:19.980
So there's our transformation.

199
00:10:19.980 --> 00:10:23.700
Any questions about transformation,
mapping?

200
00:10:23.700 --> 00:10:24.440
It's pretty straightforward.

201
00:10:26.480 --> 00:10:28.490
I use maps a lot.

202
00:10:28.490 --> 00:10:30.670
it's very, very useful.

203
00:10:30.670 --> 00:10:35.010
Transformations can be almost
anything that you can imagine.

204
00:10:35.010 --> 00:10:37.350
So here we're transforming numerically.

205
00:10:37.350 --> 00:10:40.120
What would a transformation of strings be.

206
00:10:40.120 --> 00:10:44.630
Well, we could do string concatenation or
we could upper case everything,

207
00:10:44.630 --> 00:10:46.460
all the characters in a string.

208
00:10:46.460 --> 00:10:49.040
So if you had an array of strings and
you wanted to lower case everything

209
00:10:50.310 --> 00:10:54.640
you could pass in a function that takes
a value and returns the lower case of it.

210
00:10:54.640 --> 00:10:57.920
That would be your predicate,
that would be your transformer function,

211
00:10:57.920 --> 00:11:00.820
and then just simply map
over your array strings.

212
00:11:00.820 --> 00:11:05.720
You can have even
hierarchical transformations.

213
00:11:05.720 --> 00:11:09.150
This is harkening to some stuff that we'll
talk about when we do an a synchronous

214
00:11:09.150 --> 00:11:10.610
programming workshop.

215
00:11:10.610 --> 00:11:13.730
But in the a synchronous programming
workshop, we'll talk about even the notion

216
00:11:14.740 --> 00:11:18.390
that ideas like,
what about transforming a function?

217
00:11:18.390 --> 00:11:19.980
What would it mean to
transform a function?

218
00:11:21.480 --> 00:11:24.110
What might need to wrap that
function in something else that does

219
00:11:24.110 --> 00:11:25.500
something different.

220
00:11:25.500 --> 00:11:26.640
So I take a function in and

221
00:11:26.640 --> 00:11:29.570
I get a new function out that
does something different.

222
00:11:29.570 --> 00:11:31.310
What would it mean to transform a promise?

223
00:11:32.490 --> 00:11:36.030
Well transforming a promise could
be like taking a promise and

224
00:11:36.030 --> 00:11:39.100
wrapping it around another promise or
performing some operation.

225
00:11:39.100 --> 00:11:40.770
So whatever value you start with,

226
00:11:40.770 --> 00:11:45.210
there is a set of things that you can do
with that value that are transformations.

227
00:11:45.210 --> 00:11:48.040
And you might wanna model that in your
program and simply putting one or

228
00:11:48.040 --> 00:11:50.010
more of those values into a list and

229
00:11:50.010 --> 00:11:53.810
using one of these functional tools
like math to do the transforms.

230
00:11:55.700 --> 00:11:56.340
So, makes sense?

231
00:11:58.540 --> 00:11:59.300
Excellent.
All right.

232
00:11:59.300 --> 00:12:01.660
So, that's transformation.

