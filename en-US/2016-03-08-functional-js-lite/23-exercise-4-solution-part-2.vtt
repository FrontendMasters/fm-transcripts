WEBVTT

1
00:00:00.000 --> 00:00:05.016
[MUSIC]

2
00:00:05.016 --> 00:00:07.180
&gt;&gt; Audience: Should we not
call it add insight though?

3
00:00:08.400 --> 00:00:12.744
&gt;&gt; Kyle Simpson: We all calling
it add right here, on line 12.

4
00:00:13.795 --> 00:00:14.295
Okay?

5
00:00:19.765 --> 00:00:23.495
Alright, now it starts to get more
interesting and a little more challenging.

6
00:00:23.495 --> 00:00:25.589
We'll see how close you've
been paying attention.

7
00:00:26.880 --> 00:00:30.970
And I want you cuz, we have this add2
function which takes two functions.

8
00:00:33.520 --> 00:00:36.981
And if I wanted to be able to take three
functions I could make and add three, or

9
00:00:36.981 --> 00:00:39.100
an add four, or an add five.

10
00:00:39.100 --> 00:00:44.700
But, I want you to make an add and
I want you to make a function that takes

11
00:00:46.240 --> 00:00:51.800
a list of an arbitrary number of
functions and adds all of those function

12
00:00:51.800 --> 00:00:57.680
return results together but
that function has to use add to.

13
00:01:00.720 --> 00:01:04.360
There's a variety of ways that
you could define your add in.

14
00:01:04.360 --> 00:01:07.330
First let's just leave the add2 here so
that we see that in comments.

15
00:01:07.330 --> 00:01:11.830
There's a variety of ways to define
the add in that we're talking about.

16
00:01:15.660 --> 00:01:17.070
But what I want you to do is,

17
00:01:17.070 --> 00:01:21.940
instead of it receiving parameters,
it's going to receive a single array.

18
00:01:21.940 --> 00:01:23.320
So I'll give you that hint.

19
00:01:23.320 --> 00:01:25.090
It's gonna receive a single array.

20
00:01:25.090 --> 00:01:29.880
That array is going to have one or
more, actually 0 or more, but

21
00:01:29.880 --> 00:01:33.000
we don't really care about those
trivial cases, functions in it.

22
00:01:34.440 --> 00:01:37.080
And you need to go through and

23
00:01:37.080 --> 00:01:40.670
calculate all of the sums of all
those things using only add2.

24
00:01:40.670 --> 00:01:44.510
Well, of course you're gonna have to
call add2 quite a few times, right?

25
00:01:44.510 --> 00:01:46.670
So you might choose to set
this up as a for loop.

26
00:01:46.670 --> 00:01:50.320
And that might be the first
way that you wanna write it.

27
00:01:50.320 --> 00:01:52.730
So try it with a loop first.

28
00:01:52.730 --> 00:01:57.098
Try it yourself, setting up your addn
function to calculate it with a loop.

29
00:01:57.098 --> 00:01:59.758
And then you'll notice the README says,

30
00:01:59.758 --> 00:02:03.330
after you've done it with
a loop try it with recursion.

31
00:02:05.470 --> 00:02:09.500
And finally,
might try it with map and reduce.

32
00:02:09.500 --> 00:02:10.260
So here's what I'm gonna do.

33
00:02:10.260 --> 00:02:11.930
I'm gonna stop talking for

34
00:02:11.930 --> 00:02:15.710
like five minutes,
I'll let you try it with a loop first.

35
00:02:15.710 --> 00:02:19.040
And maybe move on to your
recursion attempt at it.

36
00:02:19.040 --> 00:02:21.840
But then we're gonna talk through looping,
recursion, and

37
00:02:21.840 --> 00:02:24.080
then, how we might use map and reduce.

38
00:02:28.080 --> 00:02:28.880
So add in.

39
00:02:28.880 --> 00:02:32.970
I might have slightly misspoken
before I gave you the work break,

40
00:02:32.970 --> 00:02:36.220
we want this to receive an array of
values, not an array of functions.

41
00:02:36.220 --> 00:02:41.950
But either way solution is
going to be mostly the same.

42
00:02:41.950 --> 00:02:45.270
So if you sent in an array of functions,
there's just one less step to do.

43
00:02:45.270 --> 00:02:48.740
If you are going to send in an array of
values, there is one extra step to do.

44
00:02:48.740 --> 00:02:49.830
Either way.

45
00:02:49.830 --> 00:02:53.550
Let's assume an array of
values is what we're gonna do.

46
00:02:53.550 --> 00:02:56.050
So let's assume that we're
gonna call something like addn,

47
00:02:56.050 --> 00:03:01.109
and we're going to pass in
the values 10 and 42 and 56.

48
00:03:02.790 --> 00:03:06.624
And maybe one other value like 73, okay?

49
00:03:11.462 --> 00:03:14.050
&gt;&gt; Kyle Simpson: So
we expect that to give us 181 as the sum.

50
00:03:14.050 --> 00:03:19.710
How are we gonna do this with a loop,
with an iteration?

51
00:03:19.710 --> 00:03:21.440
Well of course,
we're gonna need to keep track of it.

52
00:03:21.440 --> 00:03:23.270
We're gonna need an accumulator.

53
00:03:23.270 --> 00:03:25.030
We'll call it sum, starting out at 0.

54
00:03:25.030 --> 00:03:29.320
We'll say for var i = 0.

55
00:03:29.320 --> 00:03:34.685
i less than arr.length, i ++.

56
00:03:34.685 --> 00:03:40.755
I;m going to take the entry in array,
and I'm going to call it with foo so

57
00:03:40.755 --> 00:03:46.330
that's going to produce me a function
wrapping around the value,

58
00:03:46.330 --> 00:03:51.304
that's the step you don't need
to do if you are assuming you

59
00:03:51.304 --> 00:03:55.510
have already received function,
so either way.

60
00:03:56.740 --> 00:03:59.564
&gt;&gt; Audience: Actually I did have to,
to do the accumulator.

61
00:03:59.564 --> 00:04:04.700
&gt;&gt; Kyle Simpson: So
if you already have a function

62
00:04:05.780 --> 00:04:10.590
then that step won't be necessary,
but what we're

63
00:04:10.590 --> 00:04:15.490
going to have is the sum is going to need
to call the function that it gets back

64
00:04:17.140 --> 00:04:20.550
so what we're going to do is say.

65
00:04:20.550 --> 00:04:23.170
I'm sorry not call the function
we are going to say add to,

66
00:04:28.330 --> 00:04:31.670
and one of the things
we are going to need to

67
00:04:31.670 --> 00:04:34.930
pass in is the current sum
wrapped in a function.

68
00:04:34.930 --> 00:04:36.360
So we are going to need to say fusum.

69
00:04:38.350 --> 00:04:42.670
So that particular part is optional if
you are already passing in functions.

70
00:04:42.670 --> 00:04:43.868
This part is not optional.

71
00:04:43.868 --> 00:04:47.244
Okay?

72
00:04:47.244 --> 00:04:52.801
And sum is

73
00:04:52.801 --> 00:04:57.664
equal to

74
00:04:57.664 --> 00:05:02.550
add2.

75
00:05:02.550 --> 00:05:05.130
Okay.
You could have also stepped through

76
00:05:05.130 --> 00:05:06.300
the loop two at a time.

77
00:05:07.410 --> 00:05:10.500
Passing two elements in the loop in and

78
00:05:10.500 --> 00:05:13.700
getting their some and
just doing some plus equals and add to and

79
00:05:13.700 --> 00:05:17.990
passing those in that's also an equally
valid way of solving it with the loop.

80
00:05:17.990 --> 00:05:21.172
But at the end of the day,
we can simply return sum.

81
00:05:29.679 --> 00:05:30.620
&gt;&gt; Kyle Simpson: Okay?

82
00:05:30.620 --> 00:05:32.870
Well what about if we wanted
to do this with recursion?

83
00:05:36.320 --> 00:05:39.590
In recursion we're looking for
a base case.

84
00:05:41.530 --> 00:05:46.610
And what's our recursive definition for
the addition of a list?

85
00:05:46.610 --> 00:05:47.760
The addition of a list,

86
00:05:47.760 --> 00:05:53.250
is the addition of the first two items
plus the addition of everything else.

87
00:05:53.250 --> 00:05:55.630
So it's the item,
plus everything else, and

88
00:05:55.630 --> 00:05:57.270
then it's the item plus everything else.

89
00:05:57.270 --> 00:05:58.980
That's how we add those two together.

90
00:05:58.980 --> 00:06:06.260
So, our base case would be if the array
that we've been given is length too.

91
00:06:06.260 --> 00:06:08.330
Because then we know what to do with that.

92
00:06:08.330 --> 00:06:13.950
So array.length that's 2,

93
00:06:13.950 --> 00:06:19.880
and you could for good measure if you
wanted to, say less than or equal to 2.

94
00:06:19.880 --> 00:06:23.060
But if we were given an array of at least,

95
00:06:23.060 --> 00:06:28.590
in this base case of at least having two
in it, then all we need to do is call,

96
00:06:28.590 --> 00:06:33.540
add2, and
if we've been given a set of values.

97
00:06:33.540 --> 00:06:36.460
Of course we're going
to need to wrap those.

98
00:06:36.460 --> 00:06:44.651
So, we're gonna need to say
foo(arr[0]) and foo(arr[1]).

99
00:06:44.651 --> 00:06:48.400
You don't need those foo calls if
you're passing in the functions

100
00:06:48.400 --> 00:06:49.180
already prerunned.

101
00:06:51.680 --> 00:06:54.380
What's our Recursion case.

102
00:06:55.550 --> 00:06:57.056
We're gonna say return.

103
00:06:58.495 --> 00:07:03.893
&gt;&gt; Kyle Simpson: And
we're going to call arr[0] as a function.

104
00:07:06.919 --> 00:07:09.573
&gt;&gt; Kyle Simpson: All right.

105
00:07:09.573 --> 00:07:17.057
And then add in
&gt;&gt; Kyle Simpson: So this is add and,

106
00:07:17.057 --> 00:07:22.760
we're gonna need to have an array that
has, sorry we're not gonna call it.

107
00:07:22.760 --> 00:07:28.090
We're gonna need to add in an array,
pass in an array.

108
00:07:28.090 --> 00:07:32.490
The first element in the array is going
to be what was in array position 0.

109
00:07:34.360 --> 00:07:36.580
And the second one is going to
be everything else in the list.

110
00:07:38.400 --> 00:07:39.580
Okay.

111
00:07:39.580 --> 00:07:44.240
So, that's going to be array.slice1.

112
00:07:49.310 --> 00:07:53.100
Now add in returns us back a number so
we're gonna get the numbers and

113
00:07:53.100 --> 00:07:56.169
numbers and numbers coming back and
back and back to us.

114
00:07:57.950 --> 00:08:03.180
If we're dealing with, I'm getting
a little bit ahead of myself so

115
00:08:03.180 --> 00:08:06.313
I'm gonna try to not jump too far ahead.

116
00:08:15.660 --> 00:08:17.426
&gt;&gt; Kyle Simpson: I don't mean
to pass this separately,

117
00:08:17.426 --> 00:08:19.360
that is not what I meant to do.

118
00:08:19.360 --> 00:08:22.840
I meant to call apply,
that's why I'm getting ahead of myself.

119
00:08:22.840 --> 00:08:27.880
So we wanna pass in a single,
we wanna spread out in a single array

120
00:08:27.880 --> 00:08:31.704
with that as the first value.

121
00:08:31.704 --> 00:08:37.363
And then add2 in it.

122
00:08:37.363 --> 00:08:40.110
I'm sorry.

123
00:08:41.270 --> 00:08:44.060
Getting a little bit off-track,
I think I got my brain wrapped wrong.

124
00:08:44.060 --> 00:08:45.060
So let me just double-check here.

125
00:08:48.690 --> 00:08:49.590
Right.

126
00:08:49.590 --> 00:08:50.440
There's that function.

127
00:08:53.210 --> 00:08:55.110
Okay, let's start back here.

128
00:08:59.030 --> 00:09:01.090
Gonna call add in with a single array.

129
00:09:06.040 --> 00:09:12.675
Where the first element

130
00:09:12.675 --> 00:09:19.640
in the array is a function

131
00:09:19.640 --> 00:09:23.959
that returns.

132
00:09:25.630 --> 00:09:29.140
Add2 with arr of 0 and

133
00:09:29.140 --> 00:09:33.920
arr of 1.

134
00:09:33.920 --> 00:09:39.660
So that's our first element.

135
00:09:39.660 --> 00:09:42.112
That's an array with a single element in

136
00:09:42.112 --> 00:09:47.143
it
&gt;&gt; Kyle Simpson: And

137
00:09:47.143 --> 00:09:52.920
we wanna concatenate that with everything
else that's at the starting position too.

138
00:09:52.920 --> 00:09:57.460
So I've taken the two items off the front
of the list, passed them to add to and

139
00:09:57.460 --> 00:10:01.570
replaced them with a single
calculation for it.

140
00:10:01.570 --> 00:10:03.630
And then i'm going to keep
doing that recursively.

141
00:10:03.630 --> 00:10:06.068
So I concatenate that with
the rest of the list.

142
00:10:06.068 --> 00:10:08.533
Arr.slice2.

143
00:10:08.533 --> 00:10:10.670
Should be what I show.

144
00:10:12.760 --> 00:10:13.260
Yep.

145
00:10:17.700 --> 00:10:22.180
So, Single array with a function in it,
that function is going to

146
00:10:22.180 --> 00:10:25.820
calculate the addition of the first
two elements in the list.

147
00:10:25.820 --> 00:10:30.550
And then we're going to pass
the rest of the arguments in.

148
00:10:30.550 --> 00:10:33.990
So, when if we do that the first time and
we're gonna take,

149
00:10:33.990 --> 00:10:37.560
we're gonna go from a list of four
elements to a list of three elements.

150
00:10:37.560 --> 00:10:40.950
Where the first item in the list is
a function and the rest of the elements

151
00:10:40.950 --> 00:10:45.070
are either the value or the wrapped
functions depending on which one you did.

152
00:10:46.330 --> 00:10:48.520
We've gone from four down to three.

153
00:10:48.520 --> 00:10:51.680
We're going to do it again,
where we take that function and

154
00:10:51.680 --> 00:10:55.250
add in another function,
we go from three down to two.

155
00:10:55.250 --> 00:11:00.390
Then we're going to hit this space case
which will simply pass in those functions

156
00:11:00.390 --> 00:11:01.538
and get the value back out.

157
00:11:01.538 --> 00:11:03.717
&gt;&gt; Audience: On 22 [INAUDIBLE].

158
00:11:10.080 --> 00:11:12.630
&gt;&gt; Kyle Simpson: The reason we
don't want if you don't want you're

159
00:11:12.630 --> 00:11:15.490
going to be calculating the add to now,
so you could do it that way.

160
00:11:15.490 --> 00:11:18.744
What I'm trying to show is
that creating a function that

161
00:11:18.744 --> 00:11:22.149
sort of differ the calculation
until the final end point.

162
00:11:28.639 --> 00:11:32.878
&gt;&gt; Kyle Simpson: So we can also observe,
as I have done here in the comments, that,

163
00:11:32.878 --> 00:11:38.000
and the other way of writing this is
we only need to do the recursive call.

164
00:11:38.000 --> 00:11:41.140
If the array length is
already greater than 2.

165
00:11:41.140 --> 00:11:41.885
Okay?

