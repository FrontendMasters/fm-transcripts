WEBVTT

1
00:00:00.000 --> 00:00:03.825
[MUSIC]

2
00:00:03.825 --> 00:00:05.840
&gt;&gt; Kyle: Our next topic, composition.

3
00:00:05.840 --> 00:00:09.680
And I know I said we'd try to stay
away from fancy sounding words.

4
00:00:09.680 --> 00:00:12.930
So let me try to help explain
what composition really means.

5
00:00:14.010 --> 00:00:19.800
Composition, in this sense is
about taking the output of

6
00:00:19.800 --> 00:00:25.530
one function and putting it directly
as the input to another function.

7
00:00:25.530 --> 00:00:28.520
So in other words,
instead of calling one function and

8
00:00:28.520 --> 00:00:32.106
then calling another function,
we're gonna call one function and

9
00:00:32.106 --> 00:00:35.920
its output is gonna become, at least
part of the input for another function.

10
00:00:35.920 --> 00:00:39.700
And then the output of that could become
part of the input for another function.

11
00:00:39.700 --> 00:00:43.070
That's what we mean by composition from
a functionally programming perspective,

12
00:00:43.070 --> 00:00:46.024
at a very, very simple basic level.

13
00:00:46.024 --> 00:00:48.860
All right, so what would be an example
of a program that might need some

14
00:00:48.860 --> 00:00:50.370
composition?

15
00:00:50.370 --> 00:00:53.170
Well if I had a function called
sum that takes two variables and

16
00:00:53.170 --> 00:00:55.270
adds them together,
that's a super useful function.

17
00:00:55.270 --> 00:00:57.950
You can all add that to
your utility libraries.

18
00:00:57.950 --> 00:01:00.590
Now underscore,
I don't even know if they have that yet.

19
00:01:00.590 --> 00:01:03.460
I invented the sum function and
I invented the mult function,

20
00:01:03.460 --> 00:01:06.135
which multiplies, even more powerful.

21
00:01:06.135 --> 00:01:09.370
[LAUGH] I know, silly functions.

22
00:01:09.370 --> 00:01:13.438
I don't have very much room on
these slides to show you codes so

23
00:01:13.438 --> 00:01:16.269
I have to use simple concepts here, okay?

24
00:01:16.269 --> 00:01:20.628
But if I wanted to perform an operation
like five plus three times four,

25
00:01:20.628 --> 00:01:24.510
I'm going to have to compose
these two functions in some way.

26
00:01:24.510 --> 00:01:28.980
I might compose them with state, I might
save them into a variable like I'm doing

27
00:01:28.980 --> 00:01:33.520
with z, but now you can see that
I'm doing sort of an impure thing.

28
00:01:33.520 --> 00:01:35.020
I have the side effect state.

29
00:01:36.390 --> 00:01:40.100
If on the other hand,
I were to take the result of mult and

30
00:01:40.100 --> 00:01:44.950
pass it directly into sum,
never saving it into some side variable,

31
00:01:44.950 --> 00:01:47.220
then I haven't created an impure action.

32
00:01:49.070 --> 00:01:52.090
I've simply composed two
pure functions together.

33
00:01:53.980 --> 00:01:57.400
So right now this is an impure program
because there is some side effect state

34
00:01:57.400 --> 00:01:57.990
that's happening.

35
00:01:59.240 --> 00:02:03.210
Is it a side effect in the sense that our
program is gonna return different results?

36
00:02:03.210 --> 00:02:05.050
No, because we don't use that z variable,
but

37
00:02:05.050 --> 00:02:07.010
there's still a side
effect that's happening.

38
00:02:07.010 --> 00:02:08.620
Z is still getting changed.

39
00:02:08.620 --> 00:02:12.580
That is still a complexity that could
create issues for your debugging later.

40
00:02:12.580 --> 00:02:17.600
So how could I reorganize this program so
that I wasn't assigning to some variable?

41
00:02:17.600 --> 00:02:22.280
Well, I can simply pass in the result of
mult, calling mult with three and four and

42
00:02:22.280 --> 00:02:24.070
passing its result directly into sum.

43
00:02:25.840 --> 00:02:29.540
In a functional programming sense,
this is kind of a manual composition.

44
00:02:29.540 --> 00:02:32.840
So I didn't assign to
some side variable state.

45
00:02:32.840 --> 00:02:36.360
I just took the end result and
pumped it directly into this next program.

46
00:02:36.360 --> 00:02:39.080
So, the outer program here is pure.

47
00:02:40.380 --> 00:02:41.890
Even though technically,

48
00:02:41.890 --> 00:02:45.340
at a functional, I mean at
a programmatic sense technically,

49
00:02:45.340 --> 00:02:48.660
our programming language has to
temporarily store that variable somewhere.

50
00:02:48.660 --> 00:02:53.000
But from the perspective of our program,
we've written a purer operation.

51
00:02:53.000 --> 00:02:54.400
Is everybody following that?

52
00:02:54.400 --> 00:02:56.790
That's why these concepts
build upon each other.

53
00:02:56.790 --> 00:03:01.020
So composition is a way of reducing
the amount of side effects you have.

54
00:03:01.020 --> 00:03:03.620
It is absolutely true

55
00:03:03.620 --> 00:03:06.170
that this is not some magic silver
bullet that works everywhere,

56
00:03:06.170 --> 00:03:10.300
because you're not always in control of
the design of your function signatures.

57
00:03:10.300 --> 00:03:14.867
And if our function signature happened to
not work in such a nice way where we could

58
00:03:14.867 --> 00:03:19.365
pass in a value like that or if one of our
functions needed to return two values but

59
00:03:19.365 --> 00:03:22.453
the thing we need to pass it
to only needed one of those,

60
00:03:22.453 --> 00:03:25.160
it gets a little more complicated.

61
00:03:25.160 --> 00:03:27.260
Granted, that is absolutely true.

62
00:03:28.430 --> 00:03:30.210
This is why we call this
functional-light programming.

63
00:03:30.210 --> 00:03:33.410
We're looking for
ways to develop those instincts and

64
00:03:33.410 --> 00:03:37.180
to whatever extent that you can develop
that instinct it may guide your

65
00:03:37.180 --> 00:03:39.490
design decisions for
the way you write your functions.

66
00:03:40.650 --> 00:03:43.920
You may write your functions assuming
that somebody may wanna compose

67
00:03:43.920 --> 00:03:44.689
that with a different function.

68
00:03:46.330 --> 00:03:50.060
That is not only the argument signature,
but also the return value signature.

69
00:03:51.730 --> 00:03:56.980
So if we wanted to create a pure wrapper
around this to do this composition for

70
00:03:56.980 --> 00:03:59.580
us, we could do it manually.

71
00:03:59.580 --> 00:04:04.320
We could call it multAndSum and
pass in all of the values, x, y, and z.

72
00:04:05.980 --> 00:04:07.870
And simply call mult and

73
00:04:07.870 --> 00:04:11.660
then pass its value into sum,
that's a manual composition.

74
00:04:11.660 --> 00:04:14.430
We can create ourselves a little
utility as a manual composition.

