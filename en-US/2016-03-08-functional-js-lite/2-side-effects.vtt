WEBVTT

1
00:00:00.000 --> 00:00:03.946
[MUSIC]

2
00:00:03.946 --> 00:00:07.404
&gt;&gt; Kyle Simpson: First of all, I said we
need to talk about this notion of purity

3
00:00:07.404 --> 00:00:10.710
but we have to understand
the opposite first.

4
00:00:10.710 --> 00:00:15.070
And the clearest and easiest way to
understand what an impure function is,

5
00:00:15.070 --> 00:00:18.070
is to think about a function
that produces a side effect.

6
00:00:19.180 --> 00:00:20.700
What is a side effect?

7
00:00:20.700 --> 00:00:25.750
A side effect by virtual of its
name is something that occurs

8
00:00:25.750 --> 00:00:29.860
that's indirect as a relationship
of an action that you took.

9
00:00:29.860 --> 00:00:34.310
So, an action that you take like calling
me function and asking for it to compute

10
00:00:34.310 --> 00:00:37.870
some value and return it back,
that's the direct defect of that function.

11
00:00:37.870 --> 00:00:39.240
We get the value back.

12
00:00:39.240 --> 00:00:43.940
A side effect is basically when we
change the state of the program

13
00:00:43.940 --> 00:00:45.680
through an indirect means.

14
00:00:45.680 --> 00:00:46.650
I call this function.

15
00:00:46.650 --> 00:00:47.950
I get a direct result back.

16
00:00:47.950 --> 00:00:50.520
I get some direct effect back, but

17
00:00:50.520 --> 00:00:53.870
I also change something else
about the state of my programs.

18
00:00:53.870 --> 00:00:57.380
And side effects are the big
evil in functional programming,

19
00:00:57.380 --> 00:00:58.380
like the big, big evil.

20
00:00:58.380 --> 00:01:00.000
That's why we start here.

21
00:01:00.000 --> 00:01:02.690
A functional programmer will
tell you we've gotta reduce and

22
00:01:02.690 --> 00:01:05.210
remove as many side effects as possible.

23
00:01:05.210 --> 00:01:07.930
If you've ever working in a language,
I haven't done much but

24
00:01:07.930 --> 00:01:10.170
I've read some things about Haskell.

25
00:01:10.170 --> 00:01:13.670
And Haskell and other functional
programming languages make it

26
00:01:13.670 --> 00:01:16.430
virtually impossible to do side effects.

27
00:01:16.430 --> 00:01:20.430
The language is designed from the ground
up to not even let you be able to do that,

28
00:01:20.430 --> 00:01:23.690
which to be honest with you
sort of twists my brain.

29
00:01:23.690 --> 00:01:26.969
I'm not entirely sure I understand
whether that's valuable or

30
00:01:26.969 --> 00:01:31.477
even how that works because personally, I
haven't done a lot of Haskell programming.

31
00:01:31.477 --> 00:01:33.224
But it's this notion that this is so

32
00:01:33.224 --> 00:01:36.010
important that they baked
that into the language.

33
00:01:36.010 --> 00:01:40.210
Now, unfortunately, there are some
places where we kinda have to cheat.

34
00:01:40.210 --> 00:01:45.880
For example, input and output,
even something as basic as a console

35
00:01:45.880 --> 00:01:51.900
log statement to your console is, from
a theoretical perspective, a side effect.

36
00:01:51.900 --> 00:01:53.910
You've changed the state
of what is happening.

37
00:01:55.050 --> 00:01:59.246
So input and output,
pretty basic important.

38
00:01:59.246 --> 00:02:02.610
You're not gonna get a ton of usefulness
out of your programs if you have no notion

39
00:02:02.610 --> 00:02:03.500
of input and output.

40
00:02:03.500 --> 00:02:06.770
So even in those functional programming
languages that draw a very distinct line

41
00:02:06.770 --> 00:02:09.900
and say, you should not and
cannot create side effects.

42
00:02:09.900 --> 00:02:12.310
They have this cheat, this side door cheat

43
00:02:13.930 --> 00:02:18.480
that allows them to do things like
side effects on input and output.

44
00:02:18.480 --> 00:02:21.800
And they say, well,
that's just a necessary evil.

45
00:02:21.800 --> 00:02:24.814
We don't wanna program that way, so
we keep everything else pure, and

46
00:02:24.814 --> 00:02:26.333
we just leave that over to its side.

47
00:02:26.333 --> 00:02:29.351
And there's virtue, and there's value,
in being very intentional, and

48
00:02:29.351 --> 00:02:31.840
very explicit about what's pure and
what's not pure.

49
00:02:31.840 --> 00:02:34.230
And virtually everything in a Haskell
program is pure, except for

50
00:02:34.230 --> 00:02:35.110
these few little cheats.

51
00:02:36.180 --> 00:02:39.690
So side effects, producing side effects
can be things like the console log.

52
00:02:39.690 --> 00:02:42.940
It can be changing
the state of some variable.

53
00:02:42.940 --> 00:02:46.350
Such that each time the function is called
you're gonna get a different result,

54
00:02:46.350 --> 00:02:48.840
that's also a side effect.

55
00:02:48.840 --> 00:02:52.355
What's interesting there's a little bit
of tension and I'll just sort of project

56
00:02:52.355 --> 00:02:55.177
a little bit to a little bit later
in our discussion about closure.

57
00:02:55.177 --> 00:02:59.066
So, closure is about maintaining
state inside of a function and

58
00:02:59.066 --> 00:03:03.458
when you maintain state in a way where
that function can be called over and

59
00:03:03.458 --> 00:03:07.300
over again, and
get a different result each time.

60
00:03:07.300 --> 00:03:11.220
There is some tension there between
that and this notion of side effect.

61
00:03:11.220 --> 00:03:15.040
So even the way we put this Lego blocks
together, we can have two very good Lego

62
00:03:15.040 --> 00:03:17.980
blocks that a functional programmer
would say, yep, those are both great.

63
00:03:17.980 --> 00:03:19.700
But there is a way to configure those.

64
00:03:21.360 --> 00:03:24.180
Not so great, so
we have to be careful about these things.

65
00:03:24.180 --> 00:03:27.760
Side effects are the big evil that we
wanna avoid, so if we're looking for

66
00:03:27.760 --> 00:03:31.060
the big evil to avoid,
this is just a quick illustration,

67
00:03:31.060 --> 00:03:34.960
we can see that I call through,
I pass in the value 5 and

68
00:03:34.960 --> 00:03:38.150
I have 2 side effects as
a result of this function.

69
00:03:38.150 --> 00:03:40.290
I have the y and the z variable.

70
00:03:40.290 --> 00:03:43.500
That are outside of the function.

71
00:03:45.230 --> 00:03:47.350
Now there's lot of fancy terminology for
this, but

72
00:03:47.350 --> 00:03:49.020
I'm trying to keep us away
from the terminology.

73
00:03:49.020 --> 00:03:51.150
These are just variables
in the global scale.

74
00:03:52.240 --> 00:03:53.480
And we're changing those variables.

75
00:03:53.480 --> 00:03:54.960
And by the way,
they don't have to be in the global scale.

76
00:03:54.960 --> 00:03:57.140
There could be some wrapping
function around this and

77
00:03:57.140 --> 00:04:00.420
we could still be doing the exact same
thing which is changing variables outside.

78
00:04:00.420 --> 00:04:05.320
So the first time I call foo, I changed
the state of y and z forever, permanently.

79
00:04:05.320 --> 00:04:06.290
I have changed that state.

80
00:04:07.360 --> 00:04:09.480
So foo is set to be an impure function.

81
00:04:10.940 --> 00:04:15.100
Now, one of the interesting things
that I have observed again,

82
00:04:15.100 --> 00:04:19.650
not coming at functional programming from
being steep in the academic tradition but

83
00:04:19.650 --> 00:04:22.400
trying to sort of come
at it from the reverse.

84
00:04:22.400 --> 00:04:25.810
I'm a programmer and I need to get
my hands around some of these tools.

85
00:04:25.810 --> 00:04:28.480
Well, the interesting things that I
observed is when I look at functional

86
00:04:28.480 --> 00:04:34.240
programming, even though they'd
tell you the evil is side effects.

87
00:04:34.240 --> 00:04:37.860
You should not have impure functions,
everything should be a pure function and

88
00:04:37.860 --> 00:04:39.280
I'll show you pure in just a moment.

89
00:04:39.280 --> 00:04:40.970
But what's interesting is,

90
00:04:40.970 --> 00:04:44.010
there's a whole bunch of impure
functions in their programs.

91
00:04:44.010 --> 00:04:48.550
A functional programmer will write
many times impure functions.

92
00:04:49.970 --> 00:04:53.610
But the magic is,
this again is just my takeaway,

93
00:04:53.610 --> 00:04:55.630
it's kinda like an observational takeaway.

94
00:04:55.630 --> 00:04:59.490
The magic is they never leave
something impure publicly exposed.

95
00:05:00.880 --> 00:05:04.450
So if you have some action that
fundamentally needs to be impure, it needs

96
00:05:04.450 --> 00:05:08.810
to have some sort of side effect, because
that's all you have available to you.

97
00:05:08.810 --> 00:05:10.230
The way you make it functional again,

98
00:05:10.230 --> 00:05:13.020
the way you make it pure is to
wrap another function around that.

99
00:05:14.270 --> 00:05:18.150
To contain all of those side
effects within that function.

100
00:05:18.150 --> 00:05:22.509
And from the outside world that function
itself, that outer function, is pure.

101
00:05:22.509 --> 00:05:24.164
It's kind of like turtles
all the way down.

102
00:05:24.164 --> 00:05:25.930
You know that principle?

103
00:05:25.930 --> 00:05:28.770
It's not actually pure all the way down.

104
00:05:28.770 --> 00:05:31.479
It really only has to be pure
at the highest level and

105
00:05:31.479 --> 00:05:34.258
under the covers it can be as
ugly as you need it to be.

106
00:05:34.258 --> 00:05:36.029
And we'll see some examples of that.

107
00:05:36.029 --> 00:05:39.698
So, if I have this impure function,
as I've shown on line 1,

108
00:05:39.698 --> 00:05:41.100
this impure function.

109
00:05:43.430 --> 00:05:44.950
What can I do to make it more pure?

110
00:05:46.010 --> 00:05:51.086
How could I wrap it in something

111
00:05:51.086 --> 00:05:55.191
that would be more pure?

112
00:05:55.191 --> 00:05:58.748
Before I get to that, this is just another
example of making those side effect

113
00:05:58.748 --> 00:06:02.540
changes, this is illustrating the fact
that this change is happening over time.

114
00:06:02.540 --> 00:06:06.340
So when y and
z have changed the first time.

115
00:06:06.340 --> 00:06:08.430
When I call foo online 13,

116
00:06:08.430 --> 00:06:14.430
I'm making a change to the state that's
not the same as the state was on online 8.

117
00:06:14.430 --> 00:06:17.700
So over time, and
the reason why state change, by the way,

118
00:06:17.700 --> 00:06:20.620
the reason why state change is frowned
upon, the reason why the side effect

119
00:06:20.620 --> 00:06:24.619
is frowned upon, is that that
makes code harder to reason about.

120
00:06:25.820 --> 00:06:28.330
It doesn't make it
impossible to reason it out.

121
00:06:28.330 --> 00:06:31.260
Most of you that are not steeped in
functional programming traditions

122
00:06:31.260 --> 00:06:34.270
have been very successful at writing very,
very,

123
00:06:34.270 --> 00:06:38.740
stateful programs, non-immutable,
non-pure programs.

124
00:06:38.740 --> 00:06:41.190
You can get the same job done but,

125
00:06:41.190 --> 00:06:44.180
honestly, it does make the program
a bit harder to reason it out.

126
00:06:45.290 --> 00:06:49.590
So what we're trying to strive for towards
is ways to use some of these techniques

127
00:06:49.590 --> 00:06:54.720
and patterns that will help us
make more reasonable programming.

128
00:06:54.720 --> 00:06:56.080
Not things that we couldn't do before.

129
00:06:56.080 --> 00:06:59.620
But things that we couldn't do,
as reasonably before.

130
00:06:59.620 --> 00:07:02.930
So here are the fact that I have
to know from the outside that foo

131
00:07:02.930 --> 00:07:04.970
changes some state, and
the first time I call it,

132
00:07:04.970 --> 00:07:07.520
I'm gonna get a different answer
than the second time I call it.

133
00:07:07.520 --> 00:07:11.675
That's a complexity in my program that
makes it harder to reason it out.

134
00:07:11.675 --> 00:07:15.337
I have to trace the entire runtime stack
to know how many times foo has been called

135
00:07:15.337 --> 00:07:17.640
before I can predict its output.

136
00:07:17.640 --> 00:07:22.250
If I could rearrange this program in such
a way that every time I called the outer

137
00:07:22.250 --> 00:07:26.410
function I got the same result, I don't
have that state complexity to worry about.

138
00:07:27.840 --> 00:07:32.120
Okay, so, pure, of course,
is no side effects.

139
00:07:32.120 --> 00:07:33.650
What is a pure function gonna look like?

140
00:07:33.650 --> 00:07:37.503
Well, I'm gonna wrap bar around foo.

141
00:07:37.503 --> 00:07:40.159
You notice foo is the same definition.

142
00:07:40.159 --> 00:07:45.280
But, you notice what I'm doing with
function bar declaration on line 1,

143
00:07:45.280 --> 00:07:47.897
I'm passing in the entire universe.

144
00:07:47.897 --> 00:07:52.237
The whole universe that it's cared about
and passing in the x and the y and

145
00:07:52.237 --> 00:07:53.030
the z state.

146
00:07:53.030 --> 00:07:54.450
I'm passing those things in.

147
00:07:55.450 --> 00:08:01.072
And that means that every time that I
call bar with the exact same universe,

148
00:08:01.072 --> 00:08:04.540
I'm gonna get exactly
the same answer back.

149
00:08:04.540 --> 00:08:06.470
And bar could be arbitrarily complex.

150
00:08:06.470 --> 00:08:10.300
Bar could be our entire program, and we
could have the entire state of our program

151
00:08:10.300 --> 00:08:15.420
that we put in and it churns a whole bunch
of stuff and gives us an end result back.

152
00:08:15.420 --> 00:08:18.410
And every time we run the program
we're gonna expect to get exactly

153
00:08:18.410 --> 00:08:19.040
the same result.

154
00:08:20.280 --> 00:08:23.470
So what I've done is take something
that is fundamentally impure.

155
00:08:23.470 --> 00:08:25.710
The actions that I'm doing with foo.

156
00:08:25.710 --> 00:08:29.540
And I've made it pure by
wrapping a wrap around it.

157
00:08:29.540 --> 00:08:31.340
Now, the contract is not the same.

158
00:08:31.340 --> 00:08:35.230
You'll notice that I don't have
independent free variables like y and

159
00:08:35.230 --> 00:08:36.140
z anymore.

160
00:08:36.140 --> 00:08:39.020
I get an array back with y and z in it.

161
00:08:39.020 --> 00:08:41.810
As I'm returning on line 3,
I'm an array with y and

162
00:08:41.810 --> 00:08:46.690
z because I don't have a way with
the return keyword to return multiple

163
00:08:46.690 --> 00:08:49.410
values other than to wrap it
up in some sort of container.

164
00:08:51.180 --> 00:08:53.065
But turns out that a functional
programmer will tell you,

165
00:08:53.065 --> 00:08:54.690
that's exactly what you want.

166
00:08:54.690 --> 00:08:58.000
You want some new value back that
represents some new state cuz I can take

167
00:08:58.000 --> 00:09:02.410
that new state and run my program again
with the new state if I cared to or

168
00:09:02.410 --> 00:09:04.230
I can discard that new state.

169
00:09:04.230 --> 00:09:06.220
I have those options.

170
00:09:06.220 --> 00:09:09.920
But I don't have to worry that this thing
might have been called several times and

171
00:09:09.920 --> 00:09:12.250
might have changed state in weird
ways that I can't understand.

172
00:09:13.530 --> 00:09:17.995
So creating a pure function,
eliminating the external side effects.

173
00:09:17.995 --> 00:09:21.495
Can be as simple as simply wrapping a
function around a whole bunch of impurity.

174
00:09:21.495 --> 00:09:25.245
Now, we could have gone back and
re-fractured foo itself and made foo pure.

175
00:09:25.245 --> 00:09:28.945
But I wanted to illustrate to you, and we
will see this later in some our exercises,

176
00:09:28.945 --> 00:09:33.025
that the notion of wrapping one
pure function around one or

177
00:09:33.025 --> 00:09:36.435
more impure functions is actually
something you see not terribly

178
00:09:37.855 --> 00:09:39.465
rarely in functional programming.

