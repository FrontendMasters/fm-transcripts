WEBVTT

1
00:00:00.000 --> 00:00:04.071
[MUSIC]

2
00:00:04.071 --> 00:00:07.485
&gt;&gt; Kyle Simpson: So if C and
W both pointed to the same array, and

3
00:00:07.485 --> 00:00:10.210
you froze W, Z would also be frozen.

4
00:00:11.480 --> 00:00:12.767
The contents of Z, right?

5
00:00:12.767 --> 00:00:16.359
So Z and-
&gt;&gt; Speaker 2: [CROSSTALK]

6
00:00:16.359 --> 00:00:18.261
&gt;&gt; Kyle Simpson: If you had line 11,

7
00:00:18.261 --> 00:00:24.617
const w = Object.freeze, and
then on line 11.5, you said Z = W.

8
00:00:24.617 --> 00:00:25.736
So what you're asking.

9
00:00:25.736 --> 00:00:30.056
&gt;&gt; Speaker 2: If you say w = z and
then you freeze w-

10
00:00:30.056 --> 00:00:32.788
&gt;&gt; Kyle Simpson: If line 11 said const w =

11
00:00:32.788 --> 00:00:38.280
Object.freeze Z, okay,
is that the question?

12
00:00:38.280 --> 00:00:39.050
&gt;&gt; Speaker 2: Yeah.

13
00:00:39.050 --> 00:00:41.750
&gt;&gt; Kyle Simpson: The answer to that
question is all about references.

14
00:00:41.750 --> 00:00:43.830
Z is simply a reference to the array so

15
00:00:43.830 --> 00:00:47.550
you would be taking a reference to
the array, passing in an object.freeze,

16
00:00:47.550 --> 00:00:50.990
it would be making a change to
the actual array and now z and

17
00:00:50.990 --> 00:00:55.640
w would be constant references to
the same array which now had been frozen.

18
00:00:55.640 --> 00:00:58.120
&gt;&gt; Speaker 2: Okay.
So z would be frozen also?

19
00:00:58.120 --> 00:01:01.000
&gt;&gt; Kyle Simpson: It's not appropriate
to think of it as being frozen also cuz

20
00:01:01.000 --> 00:01:01.590
there's only one.

21
00:01:01.590 --> 00:01:02.949
&gt;&gt; Speaker 2: Okay.

22
00:01:02.949 --> 00:01:06.524
&gt;&gt; Kyle Simpson: What we're saying is that
we've made that change at a distance in

23
00:01:06.524 --> 00:01:10.949
a sense, we've made it in line 11 and
affected the value that we saw on line 7.

24
00:01:10.949 --> 00:01:11.788
Okay?

25
00:01:11.788 --> 00:01:13.149
Yes?

26
00:01:13.149 --> 00:01:16.921
&gt;&gt; Speaker 3: I think you just
answered this a minute ago, but

27
00:01:16.921 --> 00:01:23.449
I understand the concept of 7 and 9, but
would you ever do 9 except by accident?

28
00:01:25.340 --> 00:01:26.150
&gt;&gt; Kyle Simpson: Absolutely.

29
00:01:26.150 --> 00:01:27.920
You know where this happens the most?

30
00:01:27.920 --> 00:01:30.650
When somebody says z.length = 0.

31
00:01:30.650 --> 00:01:34.760
The question was would line
9 ever happen intentionally?

32
00:01:34.760 --> 00:01:39.230
Not in that exact representation,
where I'm changing one of the values,

33
00:01:39.230 --> 00:01:42.890
although that can happen, but what
would happen is when somebody tried to

34
00:01:42.890 --> 00:01:47.291
empty out your array, you send in
an array and somebody said .length=0,

35
00:01:47.291 --> 00:01:51.510
now they've mutated the contents
of the array to empty it out and

36
00:01:51.510 --> 00:01:53.590
maybe they then started
adding more stuff to it.

37
00:01:53.590 --> 00:01:56.520
And they thought, I'm working on my
own copy of an array and they weren't,

38
00:01:56.520 --> 00:01:59.750
they were working on your array,
so absolutely.

39
00:01:59.750 --> 00:02:02.630
It's one of the hazards of having
references to values is when

40
00:02:02.630 --> 00:02:05.280
you pass a reference to someone, you're
giving them the keys to the kingdom.

41
00:02:09.170 --> 00:02:09.670
Yes.

42
00:02:11.250 --> 00:02:14.940
&gt;&gt; Speaker 4: They asked, so object.freeze
does not return a copy of the object?

43
00:02:14.940 --> 00:02:18.270
&gt;&gt; Kyle Simpson: It does not, it returns
the object itself having now been frozen.

44
00:02:23.350 --> 00:02:26.190
&gt;&gt; Speaker 5: Is there a way
to unfreeze that or something?

45
00:02:26.190 --> 00:02:28.978
&gt;&gt; Kyle Simpson: Is there
a way to unfreeze objects?

46
00:02:28.978 --> 00:02:34.380
You cannot unfreeze an object, but
there are multiple levels of freezing.

47
00:02:34.380 --> 00:02:36.360
This is a little bit further
than we're gonna get into,

48
00:02:36.360 --> 00:02:38.560
but freeze is like the top level.

49
00:02:38.560 --> 00:02:41.570
It's like a permanent sort
of irrevocable thing.

50
00:02:41.570 --> 00:02:44.800
But there are other
things that you can do to

51
00:02:44.800 --> 00:02:49.670
set them all as read-only and
things like that, and those are undoable.

52
00:02:49.670 --> 00:02:54.457
But freeze is sort of the [SOUND] yeah.

53
00:02:58.276 --> 00:03:00.436
&gt;&gt; Kyle Simpson: All right,
fantastic questions.

54
00:03:00.436 --> 00:03:04.140
Now, the other thing that we mean about
immutability and this is is the much more

55
00:03:04.140 --> 00:03:07.639
important thing to take away from
a functional programming perspective.

56
00:03:08.820 --> 00:03:12.240
What we mean about immutability
is actually a discipline,

57
00:03:12.240 --> 00:03:16.310
which is that whatever values we're given,
we choose not to change them.

58
00:03:17.900 --> 00:03:21.440
Whether or not the value itself
is actually unchangeable

59
00:03:21.440 --> 00:03:22.480
is not really the point.

60
00:03:24.160 --> 00:03:27.150
The point really is that
we choose not to change it.

61
00:03:28.250 --> 00:03:30.760
If we chose to change it and

62
00:03:30.760 --> 00:03:34.916
it was immutable, like it was frozen,
we'd get an error.

63
00:03:34.916 --> 00:03:38.440
If we chose to change and it wasn't, we'd
create a side effect so in either case,

64
00:03:38.440 --> 00:03:40.030
we don't wanna do it.

65
00:03:40.030 --> 00:03:44.280
So we say, I'm going to take
somebody's value, like an array, and

66
00:03:44.280 --> 00:03:49.450
I'm going to not change it but
instead produce either a copy of it or

67
00:03:49.450 --> 00:03:52.720
produce my own set of values.

68
00:03:52.720 --> 00:03:54.910
I'm not going to mutate in place.

69
00:03:54.910 --> 00:03:58.720
That's really what a functional programmer
is more talking about with immutability.

70
00:03:58.720 --> 00:04:02.270
Not a characteristic of the value
itself but a characteristic of

71
00:04:02.270 --> 00:04:05.780
how we choose to use the value,
what we choose and choose not to do.

72
00:04:05.780 --> 00:04:07.840
In a functional programming language,
they don't let you do it.

73
00:04:08.870 --> 00:04:11.040
JavaScript lets you do it,
unless it's been frozen, but

74
00:04:11.040 --> 00:04:15.550
we can still be functional programmers in
a sense that we choose not to mutate it.

75
00:04:15.550 --> 00:04:16.210
Okay?

76
00:04:16.210 --> 00:04:17.560
So, let's illustrate that.

77
00:04:17.560 --> 00:04:22.560
What if I had a function like
doubleThemMutable, okay?

78
00:04:22.560 --> 00:04:24.100
It changes the array in place.

79
00:04:25.550 --> 00:04:29.860
You notice I passed an array 3, 4,
5, I called doubleThemMutable, and

80
00:04:29.860 --> 00:04:34.220
it's actually changing the array in place,
doubling all of those values.

81
00:04:35.740 --> 00:04:40.690
We could see why this is, this would
also be considered an impure function,

82
00:04:40.690 --> 00:04:43.600
cuz it's having a side
effect on the outside world.

83
00:04:43.600 --> 00:04:46.190
Not by lexical side effect, but

84
00:04:46.190 --> 00:04:49.250
by reference side effect because
we passed in a reference.

85
00:04:49.250 --> 00:04:52.540
It's able to make a change to
a value that's actually not

86
00:04:52.540 --> 00:04:53.370
entirely within itself.

87
00:04:53.370 --> 00:04:57.440
So this is an impure
function in that sense.

88
00:04:57.440 --> 00:04:59.940
We're making a change
on the outside world.

89
00:04:59.940 --> 00:05:02.380
You've probably written hundreds
of functions like this.

90
00:05:02.380 --> 00:05:03.520
This is extremely common.

91
00:05:04.950 --> 00:05:07.530
So I'm not saying it's bad,
but I'm saying it's impure.

92
00:05:07.530 --> 00:05:10.300
It doesn't match with the principles
of functional programming.

93
00:05:10.300 --> 00:05:13.760
And to whatever extent that we're
trying to use functional programming,

94
00:05:13.760 --> 00:05:17.080
notions of immutability are things that
we wanna pay very close attention to.

95
00:05:17.080 --> 00:05:19.760
It's one of the core key concepts, okay?

96
00:05:19.760 --> 00:05:24.300
So, how could we change this
to do the same action but

97
00:05:24.300 --> 00:05:28.280
to do it in an immutable way?

98
00:05:28.280 --> 00:05:30.810
That is to produce another value,

99
00:05:30.810 --> 00:05:33.380
another list rather than
changing the list in place.

100
00:05:35.060 --> 00:05:38.800
So my superly, awesomely named
function doubleThemImmutable.

101
00:05:39.960 --> 00:05:42.710
You notice that the main
thing here is that I'm

102
00:05:42.710 --> 00:05:46.470
setting these values into a new list
array, an entirely separate array.

103
00:05:46.470 --> 00:05:50.150
Has the same number of values in it but

104
00:05:50.150 --> 00:05:55.960
when I return it back on line 12,
arr is still the original untouched array.

105
00:05:55.960 --> 00:06:00.930
It does not matter in this program
whether array was actually immutable.

106
00:06:00.930 --> 00:06:05.440
What matters is that I use the principle
of immutability not to change arr.

107
00:06:08.270 --> 00:06:11.308
Very subtle but very,
very important difference.

108
00:06:11.308 --> 00:06:14.628
So one of the chatroom questions was,
Are arrays passed as references?

109
00:06:14.628 --> 00:06:16.020
Yes.

110
00:06:16.020 --> 00:06:20.490
So the way JavaScript does it, and this
is actually covered in one of my other

111
00:06:20.490 --> 00:06:25.890
workshops, but the way JavaScript
does it is, all simple primitives,

112
00:06:25.890 --> 00:06:29.740
that's the null, undefined,
billion, string and number.

113
00:06:29.740 --> 00:06:34.891
Those five simple primitives,
those are always held by value, that means

114
00:06:34.891 --> 00:06:40.629
a variable holds that value itself, and
that means assignments are by value copy.

115
00:06:40.629 --> 00:06:42.348
Meaning the value itself is copied.

116
00:06:42.348 --> 00:06:46.820
So X = 2, Y = X,
Y got a copy of 2 in that.

117
00:06:48.136 --> 00:06:52.730
Non-simple primitives, non-primitives,
like the object, the array,

118
00:06:52.730 --> 00:06:57.140
the function, those are always held by
reference, meaning the variable doesn't

119
00:06:57.140 --> 00:06:59.940
hold the value itself, but
it only holds the reference.

120
00:06:59.940 --> 00:07:04.400
And therefore assignments are by
what we call reference copy.

121
00:07:04.400 --> 00:07:10.010
So if I say y = in an array,
and then I say z = y,

122
00:07:10.010 --> 00:07:14.220
I didn't copy the array but I copied
a reference to the array such that there

123
00:07:14.220 --> 00:07:18.020
are now two separate
references to the same array.

124
00:07:18.020 --> 00:07:20.640
So if that's true of assignment,
then all we need to do to

125
00:07:20.640 --> 00:07:24.460
answer the question about array is
being passed by reference is to say

126
00:07:24.460 --> 00:07:27.380
passing an argument is the same thing
as assigning it to a parameter.

127
00:07:28.640 --> 00:07:33.140
So all assignments happen by reference
copy for reference held values.

128
00:07:33.140 --> 00:07:35.180
They happen by value copy for
value held values.

129
00:07:36.570 --> 00:07:38.390
And there's no other way to change that.

130
00:07:38.390 --> 00:07:40.420
There's no operators or anything.

131
00:07:40.420 --> 00:07:43.650
It's just simply an intrinsic
nature of how the values are held

132
00:07:43.650 --> 00:07:46.160
based on what gets copied.

133
00:07:46.160 --> 00:07:50.580
So, bottomline, yes,
arrays are pass by reference but

134
00:07:50.580 --> 00:07:54.180
actually reference copy is
really the best way to say it.

135
00:07:54.180 --> 00:07:57.750
There are languages where by reference
means different things so I try to make

136
00:07:57.750 --> 00:08:02.250
sure we're clear on it, what JavaScript,
its value copy versus reference copy.

137
00:08:02.250 --> 00:08:04.450
Okay, any other questions?

138
00:08:07.730 --> 00:08:10.980
There were some questions about people
not seeing it throw errors or whatever.

139
00:08:10.980 --> 00:08:15.420
So, not seeing object.freeze when
we're talking about immutability.

140
00:08:15.420 --> 00:08:19.902
So, it's important to note that in
non-strict mode, which is the default,

141
00:08:19.902 --> 00:08:24.070
in non-strict mode,
it will not throw an error,

142
00:08:24.070 --> 00:08:26.280
it will just simply ignore what you did.

143
00:08:26.280 --> 00:08:28.650
In strict mode,
it will actually throw an error.

144
00:08:28.650 --> 00:08:30.430
So, if you're not in strict mode,
you're not gonna be able to see it.

145
00:08:30.430 --> 00:08:34.210
And by the way, if you're programming
at the console in your browser,

146
00:08:34.210 --> 00:08:36.820
turning on strict mode
in the console statement

147
00:08:36.820 --> 00:08:38.744
in your browser is not as
easy as you might think.

148
00:08:38.744 --> 00:08:42.110
You're gonna have to wrap everything
in an iffy, and put use strict in it.

149
00:08:42.110 --> 00:08:44.680
It's not as simple as
putting it on the first line.

150
00:08:44.680 --> 00:08:45.520
It's really annoying.

151
00:08:45.520 --> 00:08:51.556
The consoles don't work like real
JavaScript environments, so.

152
00:08:51.556 --> 00:08:52.756
Pardon me.

153
00:08:52.756 --> 00:08:57.877
So be careful with your strict versus
non-strict if you're trying to

154
00:08:57.877 --> 00:09:03.276
learn stuff about how the errors
are thrown in those immutability cases.

