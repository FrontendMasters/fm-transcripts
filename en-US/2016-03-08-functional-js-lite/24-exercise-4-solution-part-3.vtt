WEBVTT

1
00:00:00.000 --> 00:00:03.866
[MUSIC]

2
00:00:03.866 --> 00:00:06.950
&gt;&gt; Kyle Simpson: Either iteratively or
recursively this problem can be solved.

3
00:00:08.190 --> 00:00:12.800
Finally, let's try to solve it,
with map and reduce, okay?

4
00:00:14.230 --> 00:00:20.320
So, with map and reduce what we can
observe is that the calculation,

5
00:00:20.320 --> 00:00:25.540
or the changing of a value to a function
is a transformation, is it not?

6
00:00:27.060 --> 00:00:31.390
So I can take arr, and
simply call map with foo as my function.

7
00:00:32.466 --> 00:00:34.819
That's going to make sure to wrap
all of my values into function.

8
00:00:37.450 --> 00:00:42.450
And now, I want to perform
a composition of all those functions.

9
00:00:42.450 --> 00:00:43.600
Does everybody see that?

10
00:00:45.020 --> 00:00:46.346
How do I do a composition?

11
00:00:50.173 --> 00:00:51.271
&gt;&gt; Speaker 2: Reduce.

12
00:00:51.271 --> 00:00:53.929
&gt;&gt; Kyle Simpson: Right,
what does reduce take?

13
00:00:56.030 --> 00:00:57.160
What's it's first parameter.

14
00:00:57.160 --> 00:00:57.820
It's first argument.

15
00:00:59.840 --> 00:01:00.450
&gt;&gt; Speaker 3: An array?

16
00:01:00.450 --> 00:01:03.010
&gt;&gt; Kyle Simpson: It takes a predicate
function because remember it's

17
00:01:03.010 --> 00:01:05.910
operating on the array prototype method.

18
00:01:05.910 --> 00:01:07.670
So we don't have to pass the array in.

19
00:01:07.670 --> 00:01:09.599
Its going to get that context already.

20
00:01:09.599 --> 00:01:13.650
So, the first argument to the dot reduce
is going to be the predicate function.

21
00:01:13.650 --> 00:01:15.020
The function that is going to do the work.

22
00:01:15.020 --> 00:01:16.620
So we'll define that function.

23
00:01:16.620 --> 00:01:19.200
We know that functions
going to get two arguments.

24
00:01:19.200 --> 00:01:22.481
I'm just going to temporarily call them
X and Y, but we're going to rename the.

25
00:01:22.481 --> 00:01:24.190
So, let's do our function there.

26
00:01:24.190 --> 00:01:25.430
And then what else does it get?

27
00:01:25.430 --> 00:01:28.560
It gets an initial value.

28
00:01:28.560 --> 00:01:30.930
What initial value should we use here?

29
00:01:30.930 --> 00:01:34.180
Well, there's a couple of different
ways to think about this.

30
00:01:34.180 --> 00:01:39.450
We are doing a map across the entire list,
right?

31
00:01:39.450 --> 00:01:41.650
So, that's one way of doing it.

32
00:01:41.650 --> 00:01:46.597
But, the other way of
doing it is to slice off.

33
00:01:51.206 --> 00:01:53.726
&gt;&gt; Kyle Simpson: Let me just double check
and make sure I'm not, I'm trying to keep

34
00:01:53.726 --> 00:01:56.260
close to, my brain works differently
when I solve this dilemma.

35
00:01:56.260 --> 00:01:58.261
I'm trying to make sure to not get
too off track of your solution file.

36
00:02:02.887 --> 00:02:03.387
&gt;&gt; Kyle Simpson: Okay.

37
00:02:04.750 --> 00:02:10.048
So, we could do slice(1)
because we want to only

38
00:02:10.048 --> 00:02:17.460
perform the reduce transformation
across the second half of the list.

39
00:02:17.460 --> 00:02:20.820
We have the first item, and
we want to deal with the first item.

40
00:02:20.820 --> 00:02:25.670
And then, whatever happened, we're
going to reduce across the second list.

41
00:02:25.670 --> 00:02:28.075
So, if we did it that way,
what's our good initial value?

42
00:02:28.075 --> 00:02:30.004
&gt;&gt; Speaker 2: Array zero.

43
00:02:30.004 --> 00:02:31.929
&gt;&gt; Kyle Simpson: Arr[0].

44
00:02:31.929 --> 00:02:33.730
You see how I did that?

45
00:02:33.730 --> 00:02:36.920
I took the first element to the list and
made it my initial value, and

46
00:02:36.920 --> 00:02:39.630
did a reduction against
the rest of the list.

47
00:02:40.680 --> 00:02:42.140
That's just the shortest way of doing it.

48
00:02:42.140 --> 00:02:43.690
That may not always be
the way you want to do it.

49
00:02:43.690 --> 00:02:46.820
You might have just started it out
with a good initial value like

50
00:02:46.820 --> 00:02:47.920
a function that returns zero.

51
00:02:47.920 --> 00:02:49.340
So, you could have said foo zero here.

52
00:02:50.490 --> 00:02:50.990
Okay.

53
00:02:52.180 --> 00:02:54.864
But now we want to ask,
what is our accumulation?

54
00:02:54.864 --> 00:03:01.740
And, the typical names for
these, as I said,

55
00:03:01.740 --> 00:03:07.670
the typical names in the reduce predicate
are accumulator ACC and current.

56
00:03:07.670 --> 00:03:09.650
That's how most people will call them.

57
00:03:09.650 --> 00:03:12.699
I don't love accumulator and current so

58
00:03:12.699 --> 00:03:16.471
I'm going to actually use previous and
current.

59
00:03:16.471 --> 00:03:22.870
Because I think previous is a little
easier to understand than accumulator.

60
00:03:22.870 --> 00:03:27.010
But, let's analyze what is going
to happen with this first call.

61
00:03:28.790 --> 00:03:33.800
With this very first call what's
going to happen is that I'm going to,

62
00:03:33.800 --> 00:03:38.030
let's just for simplicity sake go ahead
and pass in these as functions, so

63
00:03:38.030 --> 00:03:39.310
that I'm not having to do that map there.

64
00:03:39.310 --> 00:03:41.150
Of course we know we could do the map.

65
00:03:41.150 --> 00:03:45.727
Let's just for
simplicity's sake pass those in.

66
00:03:46.887 --> 00:03:51.476
&gt;&gt; Kyle Simpson: Okay,
so array of 0 is what?

67
00:03:53.825 --> 00:03:58.621
&gt;&gt; Speaker 2: 10,4,10.

68
00:03:58.621 --> 00:03:59.402
Or a function now.

69
00:03:59.402 --> 00:04:00.259
&gt;&gt; Kyle Simpson: It's a function, right?

70
00:04:01.460 --> 00:04:07.760
And, curr is going to be array in the one
position which is also a function, right?

71
00:04:07.760 --> 00:04:09.240
So, I have two functions.

72
00:04:09.240 --> 00:04:11.540
How am I going to compose
these two functions together?

73
00:04:13.170 --> 00:04:14.930
I'm going to create a new function.

74
00:04:17.850 --> 00:04:21.100
That's one of the most common ways
that we compose functions is to wrap

75
00:04:21.100 --> 00:04:23.190
the two of them into one bigger function.

76
00:04:23.190 --> 00:04:27.330
I'm going to take create a new
function and I'm returning it,

77
00:04:27.330 --> 00:04:30.710
which is then going to make
it be the next previous.

78
00:04:30.710 --> 00:04:32.530
So, what is this function going to do?

79
00:04:32.530 --> 00:04:37.720
It's going to actually call add2,
with previous and cur.

80
00:04:41.100 --> 00:04:43.000
So, we're not calculating that sum now.

81
00:04:43.000 --> 00:04:45.509
We're just making a bigger and
bigger wrapped function.

82
00:04:46.570 --> 00:04:50.870
The end result of our reduction here,
is not to have a sum.

83
00:04:50.870 --> 00:04:54.640
It's to have one giant function
that when we call that function,

84
00:04:54.640 --> 00:04:57.080
it's going to calculate all
those intermediate sums and

85
00:04:57.080 --> 00:05:00.320
put them all together,
making a bigger and bigger function.

86
00:05:01.790 --> 00:05:04.630
The first time, we make one function and

87
00:05:04.630 --> 00:05:09.650
we replace the first two elements in
our array with one function that's set

88
00:05:09.650 --> 00:05:12.420
when it's called, it will calculate
the sum of those two functions.

89
00:05:13.440 --> 00:05:16.890
The second iteration of our reduction,
we take that

90
00:05:16.890 --> 00:05:21.580
composed function plus the function in
a list, we compose those two together.

91
00:05:21.580 --> 00:05:24.000
The third iteration we
take a bigger composed and

92
00:05:24.000 --> 00:05:26.360
the third item in the list and
we compose those.

93
00:05:26.360 --> 00:05:29.930
Until we get to the very end,
we have one giant function.

94
00:05:29.930 --> 00:05:37.400
So, if I just simply said return arr dot
slice, we would not have what we want

95
00:05:37.400 --> 00:05:42.680
here in the sense that we would
not have calculated the sum yet.

96
00:05:42.680 --> 00:05:44.910
We simply would have produced a function.

97
00:05:44.910 --> 00:05:45.470
So, what do we do?

98
00:05:47.090 --> 00:05:48.360
We then call that function.

99
00:05:50.000 --> 00:05:52.740
And, that will call it, and
call it, and call it, and

100
00:05:52.740 --> 00:05:58.345
call it however down it needs to go until
we end up with our actual sum result.

101
00:05:58.345 --> 00:06:01.670
Yes.

102
00:06:01.670 --> 00:06:03.770
&gt;&gt; Speaker 4: A couple of questions here.

103
00:06:03.770 --> 00:06:06.120
Is it possible to leave off
the initial value and reduce?

104
00:06:10.760 --> 00:06:12.640
&gt;&gt; Kyle Simpson: If you
leave off the initial value

105
00:06:14.970 --> 00:06:16.610
it's a little more complicated.

106
00:06:16.610 --> 00:06:21.520
It will default to undefined,
which might be an okay initial value

107
00:06:21.520 --> 00:06:24.770
depending upon what you're doing,
that might be an okay initial value.

108
00:06:24.770 --> 00:06:28.420
But, you should also be aware that if
you leave off the initial value and

109
00:06:28.420 --> 00:06:31.640
your list has one or
fewer items Items that throws an error.

110
00:06:33.380 --> 00:06:36.710
So, it's not really ever a good idea
to leave off the initial value.

111
00:06:36.710 --> 00:06:41.754
You almost always want to give

112
00:06:41.754 --> 00:06:47.057
it some useful initial value.

113
00:06:47.057 --> 00:06:49.983
&gt;&gt; Speaker 4: He's wondering if
you maybe can explain again,

114
00:06:49.983 --> 00:06:51.630
removing the first value.

115
00:06:53.530 --> 00:06:55.500
And why are we doing the original slice,
I guess?

116
00:06:55.500 --> 00:06:57.000
&gt;&gt; Kyle Simpson: The reason
we do the slice(1) here

117
00:06:58.210 --> 00:07:03.270
is because what we want is to perform
a reduction where we have two items.

118
00:07:04.750 --> 00:07:09.030
And, we could have not
done a slice at all.

119
00:07:09.030 --> 00:07:12.770
And then, we could have had
an initial value here of foo(0).

120
00:07:12.770 --> 00:07:13.400
If I did foo(0),

121
00:07:13.400 --> 00:07:17.380
does everybody see that that would've
been a suitable initial value?

122
00:07:17.380 --> 00:07:21.770
It would've been a function that
when called, just simply returns 0.

123
00:07:21.770 --> 00:07:24.130
Which is going to have a no-op.

124
00:07:24.130 --> 00:07:26.047
So, I could have done
my solution like that.

125
00:07:28.156 --> 00:07:31.934
&gt;&gt; Kyle Simpson: Operator reduction across
the entire list where my initial value is

126
00:07:31.934 --> 00:07:34.510
simply a basically a no-op function.

127
00:07:34.510 --> 00:07:35.458
That's one way of doing it.

128
00:07:38.697 --> 00:07:40.312
&gt;&gt; Speaker 3: Why is
the other one preferable?

129
00:07:40.312 --> 00:07:42.878
&gt;&gt; Kyle Simpson: One less
function call wrapping layer.

130
00:07:48.467 --> 00:07:52.044
&gt;&gt; Kyle Simpson: So, all I was trying to
do, I've already shown you starting out

131
00:07:52.044 --> 00:07:56.416
with an initial value, here I'm saying
actually we already know that array of

132
00:07:56.416 --> 00:08:00.588
zero is a suitable initial value, which
is why we put array of zero there and

133
00:08:00.588 --> 00:08:03.269
we do the reduction across
the rest of the list.

134
00:08:04.760 --> 00:08:05.736
Either way is entirely valid.

135
00:08:15.126 --> 00:08:16.870
&gt;&gt; Kyle Simpson: It's
important to keep track.

136
00:08:16.870 --> 00:08:19.879
I know that we're, that you kind
of get into this nesting thing and

137
00:08:19.879 --> 00:08:22.410
it's hard to keep track
of the reduce predicate.

138
00:08:22.410 --> 00:08:24.250
That's this one right here.

139
00:08:24.250 --> 00:08:25.280
It returns a function.

140
00:08:26.860 --> 00:08:30.310
So every time we pass in two functions,

141
00:08:30.310 --> 00:08:34.900
we get a third function out that's
a composition of those two functions.

142
00:08:34.900 --> 00:08:37.880
And then, when we have another
function and another function, and

143
00:08:37.880 --> 00:08:39.310
this one is already a composition,

144
00:08:39.310 --> 00:08:42.720
we get a super composition of a composed
function with a regular function.

145
00:08:42.720 --> 00:08:48.510
And then, over here on the fourth item we
get a super super composed function with

146
00:08:48.510 --> 00:08:49.380
a regular function.

147
00:08:49.380 --> 00:08:52.750
And, we've just made functions
wrapping together up the list.

148
00:08:52.750 --> 00:08:56.917
So, if we were to unroll all of that, if
you were to try and print out this thing,

149
00:08:56.917 --> 00:09:01.640
and we passed down a list of four items,
we'd have four levels of function call.

150
00:09:01.640 --> 00:09:05.010
This function returns this function call,
returns this function call,

151
00:09:05.010 --> 00:09:08.060
returns this function call,
returns the add2 of two values.

152
00:09:08.060 --> 00:09:13.080
And, it would just simply call all
those functions and unwrap them.

153
00:09:13.080 --> 00:09:14.250
So, this isn't recursive.

154
00:09:15.290 --> 00:09:19.520
This is simply unrolling
recursion into a call stack

155
00:09:19.520 --> 00:09:21.170
as many levels deep as you need.

156
00:09:22.480 --> 00:09:25.911
And, just as a little side trivia note,
has anyone ever heard of the Y Combinator?

157
00:09:25.911 --> 00:09:30.685
The Y Combinator is a general pattern for
doing exactly that.

158
00:09:30.685 --> 00:09:36.668
I don't fully understand it, but I know
that the Y Combinator takes recursion and

159
00:09:36.668 --> 00:09:40.670
unrolls it to a progressively
wrapped function loop.

160
00:09:40.670 --> 00:09:43.670
So, we could have solve our
problem exactly like we did here.

161
00:09:43.670 --> 00:09:47.050
We could have solved it with the Y
Combinator and got the exact same result.

162
00:09:47.050 --> 00:09:50.277
We would have the exact same set of
functions wrapped in other functions,

163
00:09:50.277 --> 00:09:52.130
wrapped in other functions.

164
00:09:52.130 --> 00:09:56.406
That's how Y Combinator
gets around recursion, or

165
00:09:56.406 --> 00:10:03.410
gets around the problem with recursion
is allocating all that new stack depth.

166
00:10:03.410 --> 00:10:09.050
The Y combinator gets around it
by doing fixed proper tail call

167
00:10:09.050 --> 00:10:15.460
function calls inside of function calls,
inside of function calls.

168
00:10:21.716 --> 00:10:24.450
&gt;&gt; Kyle Simpson: So, we make sure to call
that function, and we're going to end up.

169
00:10:24.450 --> 00:10:27.649
So, let's just double check this,
this is my EX4.js.

170
00:10:27.649 --> 00:10:32.440
I'm going to, actually let me
just copy it in the console.

171
00:10:32.440 --> 00:10:35.600
You can run it in your browser
using the html file if you'd like.

172
00:10:35.600 --> 00:10:38.250
I'm just going to run it in the browser,
make sure I didn't miss anything.

173
00:10:41.776 --> 00:10:46.370
I forgot to point out there was
supposed to be passing in an array.

174
00:10:46.370 --> 00:10:50.060
By the way, ES6, how do I get it

175
00:10:50.060 --> 00:10:53.610
back to where I do want to pass them in as
individual ones instead of as an array?

176
00:10:55.190 --> 00:10:57.430
Could have just done the ...,
that's all I needed to do there.

177
00:10:59.000 --> 00:11:02.210
So, if you want to have a call signature
where you don't pass in an array,

178
00:11:02.210 --> 00:11:05.380
just declare your call signature
as basically gathering

179
00:11:05.380 --> 00:11:07.210
together all arguments into an array for
you.

180
00:11:08.490 --> 00:11:10.750
All right, let's try it again,
see if I didn't mess something up.

181
00:11:10.750 --> 00:11:12.869
And there we get the 181.

