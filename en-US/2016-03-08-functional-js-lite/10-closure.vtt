WEBVTT

1
00:00:00.000 --> 00:00:04.104
[MUSIC]

2
00:00:04.104 --> 00:00:05.680
&gt;&gt; Kyle: Let's now turn
our attention to closure.

3
00:00:05.680 --> 00:00:10.340
We already sort of mentioned this several
times, I wanted to give you a slightly

4
00:00:10.340 --> 00:00:15.870
more formal, but still very, very
informal definition for Closure, okay?

5
00:00:16.970 --> 00:00:18.249
This maps somewhat,

6
00:00:18.249 --> 00:00:22.519
to another definition I've given
this in another one of my workshops.

7
00:00:22.519 --> 00:00:23.259
But again,

8
00:00:23.259 --> 00:00:28.302
this is all about trying to boil this down
to whatever basic takeaways we can get.

9
00:00:28.302 --> 00:00:33.085
So Closure is when a function
"remembers" the variables

10
00:00:33.085 --> 00:00:38.610
around it even when that
function is executed elsewhere.

11
00:00:38.610 --> 00:00:42.500
Outside of itself and then you take that
function and you send it somewhere else,

12
00:00:42.500 --> 00:00:44.930
where it wouldn't normally
have access to that variable.

13
00:00:44.930 --> 00:00:47.860
The fact that it still has access
to that variable is closure.

14
00:00:49.750 --> 00:00:54.069
I'm not going to go to extreme depth,
length to explain all of that.

15
00:00:54.069 --> 00:00:55.408
I wrote a whole book about scope and

16
00:00:55.408 --> 00:00:58.360
closure if you're interested in
digging more into that topic.

17
00:00:58.360 --> 00:01:02.600
But we'll just illustrate in a very basic
sense how closure is going to be something

18
00:01:02.600 --> 00:01:06.720
we're going to use or see being
used in our functional programming.

19
00:01:06.720 --> 00:01:09.440
Okay, so here's an example,

20
00:01:09.440 --> 00:01:13.160
I have a function foo, and inside of
it I have a variable called count.

21
00:01:13.160 --> 00:01:16.170
And then inside of that,
I have another inner function,

22
00:01:16.170 --> 00:01:18.840
in this case it happens to get returned.

23
00:01:18.840 --> 00:01:19.950
So I'm returning a function back.

24
00:01:19.950 --> 00:01:22.600
We've already seen the returning
function pattern before.

25
00:01:22.600 --> 00:01:23.910
So we're just seeing that again.

26
00:01:23.910 --> 00:01:27.819
But you'll notice that I have that count
variable inside of the function and

27
00:01:27.819 --> 00:01:30.274
it's referencing a variable
outside of it so.

28
00:01:30.274 --> 00:01:34.269
Strictly speaking that's scope but
what's important here is that,

29
00:01:34.269 --> 00:01:37.426
that function gets transported
outside of the function foo.

30
00:01:37.426 --> 00:01:41.091
And even when foo is finished,
cuz foo finishes on line 9.

31
00:01:41.091 --> 00:01:45.672
And there's microseconds of time that
happen between line 9 and line 11, 12,

32
00:01:45.672 --> 00:01:46.264
and 13.

33
00:01:46.264 --> 00:01:49.800
And we would normally think about
the whole state of foo going away.

34
00:01:50.860 --> 00:01:52.680
That foo would finish and

35
00:01:52.680 --> 00:01:55.640
all of its internal state would
just get garbage collected.

36
00:01:55.640 --> 00:01:57.330
But that doesn't happen in this case.

37
00:01:57.330 --> 00:02:00.470
And the reason it doesn't is
because that inner function,

38
00:02:00.470 --> 00:02:02.260
has a closure over that variable count.

39
00:02:03.320 --> 00:02:06.620
Just by simply referencing it,
it gets closure of it.

40
00:02:06.620 --> 00:02:08.320
And that means that that scope,

41
00:02:08.320 --> 00:02:12.430
that state, is going to be kept,
it's going to be preserved.

42
00:02:12.430 --> 00:02:13.870
So we return that function back,

43
00:02:13.870 --> 00:02:18.440
we give it the name x on line 9,
and then we call it multiple times.

44
00:02:18.440 --> 00:02:22.170
And you'll notice that we are actually,
updating that variable every time.

45
00:02:22.170 --> 00:02:23.990
So we are getting out
a new value each time.

46
00:02:26.180 --> 00:02:28.350
That's an extra size of closure.

47
00:02:28.350 --> 00:02:30.437
There are many,
many other ways to think about closure.

48
00:02:30.437 --> 00:02:35.000
I'm sure you've seen them with your
assigning click-handlers to function and

49
00:02:35.000 --> 00:02:36.487
referencing variables.

50
00:02:36.487 --> 00:02:39.939
Setting up timers, Ajax callbacks,
hundreds of other examples.

51
00:02:41.850 --> 00:02:45.320
Here we see a closure because
a function is remembering enable to

52
00:02:45.320 --> 00:02:48.010
access a variable that was around it,
that is outside of it.

53
00:02:49.280 --> 00:02:51.730
Even though we take that function and
transport it elsewhere.

54
00:02:51.730 --> 00:02:54.620
In this case returning it out.

55
00:02:56.440 --> 00:03:00.601
Now something interesting about this
closure that I want to point out is

56
00:03:00.601 --> 00:03:02.275
that while this is closure.

57
00:03:02.275 --> 00:03:06.376
This is not strictly speaking what you're
probably gonna see as a very common

58
00:03:06.376 --> 00:03:08.406
pattern in functional programming.

59
00:03:08.406 --> 00:03:11.080
Because every time I call x,
I get a different answer.

60
00:03:13.650 --> 00:03:15.860
So there's an internal
state that's happening,

61
00:03:15.860 --> 00:03:20.280
which means I still have to
track that state over time.

62
00:03:20.280 --> 00:03:23.140
I have to understand how many
times x has been called.

63
00:03:23.140 --> 00:03:26.080
It's not an external state.

64
00:03:26.080 --> 00:03:29.390
That's changing something where
that state can be changed

65
00:03:29.390 --> 00:03:31.190
in an entirely different way.

66
00:03:31.190 --> 00:03:35.453
So it's not some free range variable
like count hanging out on the outside.

67
00:03:35.453 --> 00:03:37.470
It's hidden within a closure but

68
00:03:37.470 --> 00:03:41.540
there's still side effects happening,
in the strictly purest sense.

69
00:03:41.540 --> 00:03:44.570
So the way we're using this
function have two very,

70
00:03:44.570 --> 00:03:47.590
very functional concepts
being married together here.

71
00:03:47.590 --> 00:03:52.150
But the way we've married them
together is not as functional.

72
00:03:52.150 --> 00:03:54.530
It's a bit impure that
doesn't make it bad.

73
00:03:54.530 --> 00:03:57.818
I use this all the time and many of
you use this in your programming but

74
00:03:57.818 --> 00:03:58.863
you should be aware.

75
00:03:58.863 --> 00:04:03.508
If you're trying to use
a functional concept,

76
00:04:03.508 --> 00:04:09.093
this usage of closure is
perhaps not as functional pure.

77
00:04:09.093 --> 00:04:15.310
Now how could we use closure in a more
effective way as a functional programmer?

78
00:04:15.310 --> 00:04:19.280
Same principal will apply, closure is the
same principal regardless of how you look

79
00:04:19.280 --> 00:04:21.520
at it but how we use it can be different.

80
00:04:21.520 --> 00:04:28.110
So in this case, I declare a function
called sumX, it receives an x variable.

81
00:04:28.110 --> 00:04:33.960
You'll notice that I am closing over that
x, just like I was in the previous slide.

82
00:04:33.960 --> 00:04:37.250
I am closing over that variable and
I am returning that function.

83
00:04:37.250 --> 00:04:38.580
But what's the key difference here?

84
00:04:39.620 --> 00:04:43.090
The key difference is
that x never changes.

85
00:04:43.090 --> 00:04:44.500
Does everybody see that?

86
00:04:44.500 --> 00:04:46.891
For the lifetime of my
reference of that function,

87
00:04:46.891 --> 00:04:49.458
which I happen to call on line seven,
I call it add ten.

88
00:04:49.458 --> 00:04:51.560
For the lifetime of that function,

89
00:04:51.560 --> 00:04:56.180
every single time I call it the x
value is always going to be ten.

90
00:04:56.180 --> 00:04:58.456
Same principle, still closure,

91
00:04:58.456 --> 00:05:02.779
but here I'm not allowing it to
make some side effecting change.

92
00:05:02.779 --> 00:05:06.960
Where I'm going to get a different answer
every time, this is more functional.

93
00:05:06.960 --> 00:05:11.890
This is a technique for applying more
functional programming idioms to

94
00:05:11.890 --> 00:05:13.920
our programs to make them more reasonable.

95
00:05:13.920 --> 00:05:17.470
So here I'm making a function,
an incredibly useful function and

96
00:05:17.470 --> 00:05:22.130
another one you should add to your
utility library, get rich and famous.

97
00:05:22.130 --> 00:05:26.585
I'm making the add ten function
which takes anything that you add

98
00:05:26.585 --> 00:05:28.453
to it like the value three.

99
00:05:28.453 --> 00:05:32.614
And it adds it to the value ten that
it's already saved in its state,

100
00:05:32.614 --> 00:05:34.010
saved in its closure.

101
00:05:35.600 --> 00:05:38.780
It turns out that sort of technique
of creating something, sort of as

102
00:05:38.780 --> 00:05:44.280
a specialized thing that it doesn't have
other stuff, this goes by fancier terms.

103
00:05:44.280 --> 00:05:46.230
So, bear with me for just a moment.

104
00:05:46.230 --> 00:05:51.280
It goes by currying or partial
application, but taking a function that

105
00:05:51.280 --> 00:05:55.510
normally would need multiple variables and
presetting some of those using closure.

106
00:05:55.510 --> 00:05:59.436
That's called currying or sometimes
depending on how your'e using it.

107
00:05:59.436 --> 00:06:01.876
Whether its currying or
partial application,

108
00:06:01.876 --> 00:06:04.750
they are kind of two sides of
a rubik's cube if you will.

109
00:06:06.120 --> 00:06:08.980
So yeah, so
there's some crazy complex terminology but

110
00:06:08.980 --> 00:06:11.460
let's not worry about currying and
partial application.

111
00:06:11.460 --> 00:06:14.370
Let's just worry about this idea
that a function can remember

112
00:06:14.370 --> 00:06:15.700
the variables that it has around it.

113
00:06:15.700 --> 00:06:20.240
And we can use that to our advantage
to save some state along the function.

114
00:06:20.240 --> 00:06:23.070
The fact that, that state doesn't
change over time is what makes this

115
00:06:23.070 --> 00:06:23.980
easier to reason about.

