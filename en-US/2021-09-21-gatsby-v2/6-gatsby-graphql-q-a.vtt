WEBVTT

1
00:00:00.990 --> 00:00:07.532
How can we use a mutation to create
update with Gatsby and GraphQL?

2
00:00:08.731 --> 00:00:14.465
So, Gatsby does not support mutations,
that's another another feature

3
00:00:14.465 --> 00:00:20.670
of making it a build time only solution,
you don't mutate data through Gatsby.

4
00:00:20.670 --> 00:00:24.113
What you can do and
we won't talk about this today but

5
00:00:24.113 --> 00:00:28.184
we'll get into it a little bit
with the intermediate course,

6
00:00:28.184 --> 00:00:32.192
is you can transform nodes which
is effectively a mutation.

7
00:00:32.192 --> 00:00:40.520
But that's done through Gatsby API's
that's not handled through GraphQL itself.

8
00:00:40.520 --> 00:00:45.929
So again, GraphQL and
Gatsby is not graph qL everywhere it's

9
00:00:45.929 --> 00:00:51.765
a it is a very unique approach,
to GraphQ, it's almost a subset.

10
00:00:51.765 --> 00:00:56.905
&gt;&gt; Is there a way to get data
this from asynchronous source

11
00:00:56.905 --> 00:01:01.832
like a rest or
a GraphQL server from some public API?

12
00:01:01.832 --> 00:01:06.934
&gt;&gt; Absolutely, little bit later today,
we will actually do that we'll

13
00:01:06.934 --> 00:01:11.870
load data from a third party service
using I believe their REST API.

14
00:01:13.370 --> 00:01:18.016
And there plugins from from actually
loading in from REST API's and

15
00:01:18.016 --> 00:01:22.581
in the intermediate course we'll
look at putting custom data like

16
00:01:22.581 --> 00:01:25.532
whatever you want into Gatsby's API's.

17
00:01:25.532 --> 00:01:30.510
So yeah we'll touch on it today we'll
go much deeper in the intermediate

18
00:01:30.510 --> 00:01:31.822
workshop though.

19
00:01:31.822 --> 00:01:35.552
&gt;&gt; GraphQL is specifically
used with Gatsby,

20
00:01:35.552 --> 00:01:39.295
is it compatible with
any other data layer?

21
00:01:39.295 --> 00:01:46.594
&gt;&gt; So yes in the sense that you can load
any data into Gatsby's runtime GraphQL.

22
00:01:46.594 --> 00:01:49.382
And also it's it's important to note,

23
00:01:49.382 --> 00:01:53.568
you can use Gatsby without ever
touching the GraphQL layer.

24
00:01:53.568 --> 00:01:58.180
When we look at the MDX setup,
which is in a little bit here,

25
00:01:58.180 --> 00:02:02.888
you can do everything in Gatsby
just using markdown or MDX and

26
00:02:02.888 --> 00:02:06.910
you never have to write
a GraphQL query at all.

27
00:02:06.910 --> 00:02:12.336
And the site metadata stuff, this is all
optional, the way that I'm doing it.

28
00:02:12.336 --> 00:02:16.871
I could also create a config.js
in my source folder and

29
00:02:16.871 --> 00:02:20.912
pull that in instead of
doing the site metadata,

30
00:02:20.912 --> 00:02:26.643
my config could just be import meta
from metadata.js or something.

31
00:02:26.643 --> 00:02:32.337
And then we could do metadata.title here,
so you don't have to use the GraphQL.

32
00:02:32.337 --> 00:02:38.397
And, really if I wanted to I could
pull in data from using the fetch API,

33
00:02:38.397 --> 00:02:42.610
or from other sources
to build out the site.

34
00:02:42.610 --> 00:02:45.613
And this is sorta the thing where like,

35
00:02:45.613 --> 00:02:49.799
if you find yourself really
not wanting to use Gatsby or

36
00:02:49.799 --> 00:02:54.263
GraphQL, Gatsby might not be
the right solution for you.

37
00:02:54.263 --> 00:02:59.195
There are other ways to build sites
that will let you do a lot of

38
00:02:59.195 --> 00:03:03.475
what Gatsby does without
the GraphQL requirement.

39
00:03:03.475 --> 00:03:09.457
Next.js, Astro they're always that
you can build sites similar to this,

40
00:03:09.457 --> 00:03:15.360
that don't have GraphQL as a dependency so
there are definitely options.

41
00:03:16.580 --> 00:03:20.717
But yeah, the GraphQL part is
very integral to Gatsby, but

42
00:03:20.717 --> 00:03:23.053
it's not a strict requirement.

43
00:03:23.053 --> 00:03:27.274
It's just kind of one of those
things that your life gets easier if

44
00:03:27.274 --> 00:03:29.893
you just give in and do it Gatsby's way.

45
00:03:29.893 --> 00:03:36.071
&gt;&gt; How about if you have a bunch of JSON
data that you wanna load into GraphQL and

46
00:03:36.071 --> 00:03:42.269
then query through Gatsby's GraphQL
layer is there an easy way to do that?

47
00:03:42.269 --> 00:03:47.570
&gt;&gt; Absolutely,
there is a source plugin for

48
00:03:47.570 --> 00:03:53.024
JSON specifically so Gatsby source json,

49
00:03:53.024 --> 00:03:58.182
you can just pull that data straight in.

50
00:03:58.182 --> 00:04:02.637
So you can just import it like this, so

51
00:04:02.637 --> 00:04:08.346
you can just pull it in but
you can also source it,

52
00:04:08.346 --> 00:04:16.194
and if you source it, Where did it go?

53
00:04:19.343 --> 00:04:24.248
Here you can just get any JSON data that
comes in, and it'll turn it into notes.

54
00:04:24.248 --> 00:04:29.642
So,we'll look at how this file system
plugin works, and then the transformers

55
00:04:29.642 --> 00:04:34.659
are what I was talking about where you
can have data that comes into Gatsby.

56
00:04:34.659 --> 00:04:39.450
A transformer plugin uses some
Gatsby API's to turn that data from one

57
00:04:39.450 --> 00:04:41.220
shape into another.

58
00:04:41.220 --> 00:04:46.620
So in this case it looks and
it finds that a file is a dot JSON file,

59
00:04:46.620 --> 00:04:50.127
and then converts it into a GraphQL node.

60
00:04:50.127 --> 00:04:54.561
So if you have a bunch of JSON,
you don't actually have to do

61
00:04:54.561 --> 00:04:59.102
anything you just have to
install this Gatsby transformer.

62
00:04:59.102 --> 00:05:03.648
And it'll put it into your
file like the GraphQL for

63
00:05:03.648 --> 00:05:07.147
you, it'll show up as an option here.

64
00:05:07.147 --> 00:05:14.712
&gt;&gt; Is there a way to query or make these
queries on the fly like in JavaScript?

65
00:05:14.712 --> 00:05:19.227
So you could for instance,
grab a bit of extra data dynamically,

66
00:05:19.227 --> 00:05:24.412
like Dynamic.js app and put it into
local storage or something like that?

67
00:05:25.767 --> 00:05:30.824
&gt;&gt; Yeah 100% if you wanna do
that you've now basically

68
00:05:30.824 --> 00:05:37.340
entered regular old react, so
you would pull in like use effect.

69
00:05:37.340 --> 00:05:41.054
And you'd be able to do,

70
00:05:43.832 --> 00:05:50.611
Extra data would be just fetch
whatever your endpoint was,

71
00:05:50.611 --> 00:05:57.218
and then, If you could grab it like so.

72
00:05:57.218 --> 00:06:00.208
And here,

73
00:06:02.761 --> 00:06:08.201
Would be your extra data, Right?

74
00:06:08.201 --> 00:06:11.591
So at this point you could
put it into a use state,

75
00:06:11.591 --> 00:06:16.248
you could set it in local storage,
you could do whatever you want.

76
00:06:16.248 --> 00:06:21.154
But you would be able to use for example,
you could take this title which is loaded

77
00:06:21.154 --> 00:06:24.490
at build time, and
use that to inform this fetch.

78
00:06:24.490 --> 00:06:29.489
So, a good example of that would be if I
want to server render my blog posts, but I

79
00:06:29.489 --> 00:06:34.436
don't want to server render the comments,
I wanna client side render those.

80
00:06:34.436 --> 00:06:39.917
Then I would be able to load the blog post
here, and then I would be able to use

81
00:06:39.917 --> 00:06:45.150
the ID of the blog post to make a call
to my API, and load in the comments.

82
00:06:45.150 --> 00:06:49.853
But again, you cannot call
the Gatsby GraphQL from the client side.

83
00:06:49.853 --> 00:06:53.257
So this would be calling
a third party API or

84
00:06:53.257 --> 00:06:57.893
if you could put together
a serverless function that would

85
00:06:57.893 --> 00:07:02.923
return common data, and
then call your serverless function.

86
00:07:02.923 --> 00:07:08.616
There are a lot of ways that you can solve
this problem, we will not be touching

87
00:07:08.616 --> 00:07:13.800
on this flow today, but we will in
the intermediate Gatsby workshop.

88
00:07:13.800 --> 00:07:18.547
&gt;&gt; So the reason for me for learning
Gatsby is to create basically blogs and

89
00:07:18.547 --> 00:07:21.790
content websites for
GraphQL snappy and fast and

90
00:07:21.790 --> 00:07:24.418
they work great on browser and mobile.

91
00:07:24.418 --> 00:07:28.686
And they also perform great on
the technical SEO standpoint, so

92
00:07:28.686 --> 00:07:32.173
they rank better on the search engines and
all that.

93
00:07:32.173 --> 00:07:37.078
And so that's why I did a little
bit of research on the Internet, so

94
00:07:37.078 --> 00:07:42.431
I found that Gatsby, basically two
things that came up Gatsby and Next.

95
00:07:42.431 --> 00:07:48.678
So I'm not sure which is better for
this specific reason.

96
00:07:48.678 --> 00:07:52.566
&gt;&gt; So, Gatsby versus Next is,
I'm gonna give you the most

97
00:07:52.566 --> 00:07:57.450
infuriating developer answer
ever which is it depends, right?

98
00:07:57.450 --> 00:08:02.617
So Gatsby is a very opinionated
way to get data from a lot of

99
00:08:02.617 --> 00:08:07.903
different sources, and
put it into a unified data layer.

100
00:08:07.903 --> 00:08:12.374
So that every page you build, whether
you're pulling data from a headless CMS,

101
00:08:12.374 --> 00:08:14.094
or from Json or from Markdown.

102
00:08:14.094 --> 00:08:16.669
Or from air table or
whatever you're using,

103
00:08:16.669 --> 00:08:21.470
it's always going to feel roughly
the same to work with that data.

104
00:08:21.470 --> 00:08:27.365
Next is a little bit of the other side,
Next is pretty do whatever you want,

105
00:08:27.365 --> 00:08:32.152
they provide you with some low level APIs,
to get site data.

106
00:08:32.152 --> 00:08:37.305
So they have the get static props hook and
and

107
00:08:37.305 --> 00:08:45.813
some other extensions to the React
file type that allow you to load data.

108
00:08:45.813 --> 00:08:52.773
Next is going to rely on you
building a lot more custom stuff.

109
00:08:52.773 --> 00:08:56.680
Gatsby is going to give you a lot of
batteries included, but it'll also fight

110
00:08:56.680 --> 00:09:00.543
really hard when you wanna customize it,
because it's not the Gatsby way.

111
00:09:00.543 --> 00:09:04.319
So when you're looking at your use
case what you're trying to build,

112
00:09:04.319 --> 00:09:08.095
if what you have is structured data and
you wanna get it onto a website,

113
00:09:08.095 --> 00:09:09.951
Gatsby is going to be really fast.

114
00:09:09.951 --> 00:09:14.697
If what you have is some custom stuff and
you gotta do some weirdness and

115
00:09:14.697 --> 00:09:16.152
you're looking at.

116
00:09:16.152 --> 00:09:19.695
You're not quite sure how
that date is gonna get in and

117
00:09:19.695 --> 00:09:23.884
some of its gonna load now and
someone will load it client side.

118
00:09:23.884 --> 00:09:28.646
And there's some bespoke stuff happening,
Next is gonna put less roadblocks in

119
00:09:28.646 --> 00:09:33.070
your way, but it'll also expect you to
build all of that stuff on your own.

120
00:09:33.070 --> 00:09:37.877
So these are the trade offs,
Next is more flexible

121
00:09:37.877 --> 00:09:42.122
at the expense of having
to write more code.

122
00:09:42.122 --> 00:09:46.170
Gatsby is more expedient I guess, at
the expense of having a lot of opinions.

