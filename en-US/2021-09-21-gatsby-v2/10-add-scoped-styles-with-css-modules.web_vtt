WEBVTT

1
00:00:00.210 --> 00:00:06.005
Next, we want to actually style things
up a little bit, we don't have,

2
00:00:06.005 --> 00:00:12.190
this header, it's kinda junky,
just everything smashed on top of itself.

3
00:00:12.190 --> 00:00:15.534
If we want that to look
like an actual header bar,

4
00:00:15.534 --> 00:00:20.034
we want the content to not be smashed
against the side of the page.

5
00:00:20.034 --> 00:00:22.910
So let's style our layout.

6
00:00:22.910 --> 00:00:24.742
And for the layout styles,

7
00:00:24.742 --> 00:00:29.680
I want to be able to write the styles
without fear of collision later on.

8
00:00:29.680 --> 00:00:32.453
So one of the hot topics in CSS, and

9
00:00:32.453 --> 00:00:38.577
one of the big frustrations that a lot
of people run into when doing styling,

10
00:00:38.577 --> 00:00:43.191
is, how do you avoid really
complex naming structures.

11
00:00:43.191 --> 00:00:48.940
Or just a lot of rules in the way that
you write CSS without running into

12
00:00:48.940 --> 00:00:54.013
this problem where the cascade
in CSS becomes a big foot gun?

13
00:00:54.013 --> 00:00:55.500
We don't want it to be a trap, right?

14
00:00:55.500 --> 00:00:58.471
We want it to be something
where when you write styles,

15
00:00:58.471 --> 00:01:02.540
you can take advantage of the CSS cascade,
you can just write CSS.

16
00:01:02.540 --> 00:01:08.426
And it's very powerful,
it gives you a lot of opportunities,

17
00:01:08.426 --> 00:01:12.659
but it doesn't become cumbersome, right?

18
00:01:12.659 --> 00:01:14.780
CSS should be fun, and

19
00:01:14.780 --> 00:01:20.590
I think that by using CSS with
a few guardrails, it can be fun.

20
00:01:20.590 --> 00:01:23.860
It doesn't need to be this
thing that is terrifying and

21
00:01:23.860 --> 00:01:27.214
stressful and hard to scale and
all this stuff, right?

22
00:01:27.214 --> 00:01:31.120
And so that's why in this workshop,
we're actually just going to write CSS.

23
00:01:31.120 --> 00:01:34.981
There are a million options out there,
you could introduce CSS and JS,

24
00:01:34.981 --> 00:01:36.664
one of the tools like Emotion.

25
00:01:36.664 --> 00:01:39.800
You could introduce Tailwind, or Chakra.

26
00:01:39.800 --> 00:01:43.371
Those are all good solutions, and if
that's what your team wants to do, 100%,

27
00:01:43.371 --> 00:01:45.990
do it,
they're great ways to handle styles.

28
00:01:45.990 --> 00:01:49.174
I like a less is more kind of approach, so

29
00:01:49.174 --> 00:01:54.324
I'm gonna be using CSS modules,
which is not exactly a CSS spec,

30
00:01:54.324 --> 00:02:00.690
but it allows us to not add any additional
libraries for writing our styles.

31
00:02:00.690 --> 00:02:04.515
I also really like CSS modules,
because they're more or

32
00:02:04.515 --> 00:02:07.383
less built into all the frameworks now, so

33
00:02:07.383 --> 00:02:11.830
you can use CSS modules with Gatsby,
with Next, with Knocks.

34
00:02:11.830 --> 00:02:16.250
There's a bunch of different frameworks
out there now that will just give you out

35
00:02:16.250 --> 00:02:20.070
of the box support for CSS modules,
which means you get to write CSS.

36
00:02:20.070 --> 00:02:24.479
You don't have to learn Less or Sass or
Stylus or Tailwind, or Chakra or

37
00:02:24.479 --> 00:02:26.841
emotion or any of the CSS and JS stuff.

38
00:02:26.841 --> 00:02:31.030
You can just write the CSS you already
know, import it as a module, and

39
00:02:31.030 --> 00:02:33.092
it just works, so let's do that.

40
00:02:33.092 --> 00:02:34.269
I'll show you how it works.

41
00:02:34.269 --> 00:02:38.214
So we created this one as global.css.

42
00:02:38.214 --> 00:02:44.330
For a scoped CSS or a CSS module,
we just have to do module dot CSS.

43
00:02:44.330 --> 00:02:50.237
So by adding this layout.module.css,
I have now indicated to Gatsby that I want

44
00:02:50.237 --> 00:02:55.563
to use this as a CSS module, so inside
of it, I can just start writing CSS.

45
00:02:55.563 --> 00:02:57.670
So I wanna have some styles for
the header.

46
00:02:57.670 --> 00:03:02.896
So I'm gonna use that black color for
the background and then I want the regular

47
00:03:02.896 --> 00:03:08.720
color, needs to be high contrast for
accessibility, so we'll make it white.

48
00:03:08.720 --> 00:03:14.180
I want to use display flex so that I
can get the header link, the home link

49
00:03:14.180 --> 00:03:20.380
to be on one side and the nav to be on
the other side, I want them to be spread.

50
00:03:20.380 --> 00:03:26.868
So I'm gonna use display: flex; and
then justify-content: space-between.

51
00:03:26.868 --> 00:03:30.581
Which the way that I remember this is
every time I look at the CSS rule,

52
00:03:30.581 --> 00:03:34.103
I think about that Dave Matthews' song,
The Space Between, and

53
00:03:34.103 --> 00:03:37.650
it gets stuck in my head,
now it gets to get stuck in your head too.

54
00:03:38.740 --> 00:03:45.187
So then we're gonna add a little bit of
padding around the header, about 1 rem.

55
00:03:45.187 --> 00:03:50.799
If you're not familiar with REMs,
REMs are the the original font size,

56
00:03:50.799 --> 00:03:55.859
so when we look at the global.css and
I set font size of 18 here,

57
00:03:55.859 --> 00:03:59.268
now I've basically said 1 rem is 18 pix.

58
00:03:59.268 --> 00:04:04.165
And the reason I use REMs is that I
can now make my whole layout relative

59
00:04:04.165 --> 00:04:05.864
to that base font size.

60
00:04:05.864 --> 00:04:09.422
It's a nice little pattern,
makes my life easier and

61
00:04:09.422 --> 00:04:12.690
you don't have to stress about it now.

62
00:04:12.690 --> 00:04:17.156
So inside of this, I'm gonna use
just regular old CSS selectors.

63
00:04:17.156 --> 00:04:20.098
I wanna get any link
inside of the header and

64
00:04:20.098 --> 00:04:23.880
I want to make it whatever
the color of the header is.

65
00:04:23.880 --> 00:04:31.980
I also want to make it inline-block so
that we can apply some padding around it.

66
00:04:31.980 --> 00:04:37.323
And so we're gonna set
the padding to be 0.5 rem and

67
00:04:37.323 --> 00:04:41.019
then I wanna take off the underline.

68
00:04:41.019 --> 00:04:45.987
But because I just took off the underline,
that would cause an accessibility issue,

69
00:04:45.987 --> 00:04:47.919
if I didn't add something back.

70
00:04:47.919 --> 00:04:52.353
So we're gonna go to the focus and
hover state, and

71
00:04:52.353 --> 00:04:57.718
we're going to say that when it's hovered,
we're gonna set

72
00:04:57.718 --> 00:05:03.516
the background to be white, and
the color to be black, all right.

73
00:05:03.516 --> 00:05:07.927
And then the last thing that I wanna do
here is I just wanna set a little bit of

74
00:05:07.927 --> 00:05:09.573
space around the content.

75
00:05:09.573 --> 00:05:12.990
So we're gonna create a class called
content, this will go on our main tag.

76
00:05:12.990 --> 00:05:16.205
And I want to give it a margin
of 3 rem on the top and

77
00:05:16.205 --> 00:05:20.299
bottom, and auto on the left and
right, that'll center it.

78
00:05:20.299 --> 00:05:22.493
And then I wanna put a max width of,

79
00:05:22.493 --> 00:05:26.750
we're gonna use a little trick that
I like of using the character.

80
00:05:27.810 --> 00:05:33.438
So what this means is when you look at
the legibility of text, one of the things

81
00:05:33.438 --> 00:05:39.410
that we found is that a line length has
a bigger impact than the actual width.

82
00:05:39.410 --> 00:05:42.437
So, depending on the number
of characters per line,

83
00:05:42.437 --> 00:05:45.207
you actually wanna adjust
the width the screen.

84
00:05:45.207 --> 00:05:51.340
So 54 characters wide gives you a pretty
legible reading for tracking of text.

85
00:05:52.920 --> 00:05:56.504
You can adjust this, there's really good
research you can read on the way that

86
00:05:56.504 --> 00:05:59.500
works but
I like this in CSS is kind of setting.

87
00:05:59.500 --> 00:06:02.221
Whatever we do with the font sizes,

88
00:06:02.221 --> 00:06:08.298
let's make sure that our line length is
good and adjust the width accordingly,

89
00:06:08.298 --> 00:06:13.430
so that, I think that's good enough,
let's stop there.

90
00:06:13.430 --> 00:06:17.747
So these are the styles that will
give us a header and content but

91
00:06:17.747 --> 00:06:23.138
notice I use some pretty risky class
names here, like .header, .content.

92
00:06:23.138 --> 00:06:27.827
As this codebase scales,
there's a near 100% chance

93
00:06:27.827 --> 00:06:32.050
that somebody else would
create a .content class.

94
00:06:32.050 --> 00:06:37.093
Unless we implemented some kind of naming
scheme like BEM or something where you

95
00:06:37.093 --> 00:06:42.750
have to do the component name underscore
underscore, content underscore, whatever.

96
00:06:42.750 --> 00:06:47.150
There's these tricky things you have
to do to avoid naming collisions.

97
00:06:47.150 --> 00:06:52.048
But because we're using CSS modules,
we don't have to care about that,

98
00:06:52.048 --> 00:06:57.360
we can not worry about that and instead
just write class names that we like.

99
00:06:57.360 --> 00:07:01.763
Because the way that we're actually gonna
use this is we are going to import it

100
00:07:01.763 --> 00:07:04.070
as if it was a JavaScript package.

101
00:07:04.070 --> 00:07:10.043
So down here in our our layout,
I'm gonna import header and

102
00:07:10.043 --> 00:07:14.463
content from the module,
so from styles and

103
00:07:14.463 --> 00:07:22.470
layout.module.css like they were
just JavaScript classes or objects.

104
00:07:22.470 --> 00:07:26.259
And then I can use these as class names.

105
00:07:26.259 --> 00:07:30.193
So on my header,
I'm gonna set a class name of header.

106
00:07:30.193 --> 00:07:36.110
And on my main, I'm gonna set
a class name of content, all right?

107
00:07:36.110 --> 00:07:41.465
And once I have saved this, look at that,
we've got ourselves a site,

108
00:07:41.465 --> 00:07:44.950
but here's what's really cool about these,

109
00:07:44.950 --> 00:07:50.630
let me make this a little bit bigger so
we can see what's going on here.

110
00:07:50.630 --> 00:07:56.504
When I select this header, note that
it's not using header as the class,

111
00:07:56.504 --> 00:08:01.320
it automatically generated
all of that scoping for me.

112
00:08:01.320 --> 00:08:05.925
So that these styles are actually going

113
00:08:05.925 --> 00:08:10.265
to correctly respect inheritance.

114
00:08:10.265 --> 00:08:12.588
Now there's some things that I can
do to make this hard on myself.

115
00:08:12.588 --> 00:08:20.275
I targeted every a inside of
a header without any restrictions.

116
00:08:20.275 --> 00:08:25.531
So if we had a nav component and
had a nav.module.css that had its own

117
00:08:25.531 --> 00:08:31.570
link styles, I can still get collisions,
so you can still make this hard.

118
00:08:31.570 --> 00:08:35.334
There are things that
you need to think about,

119
00:08:35.334 --> 00:08:40.160
I chose not to worry about that
because this site is not gonna

120
00:08:40.160 --> 00:08:44.890
grow beyond the couple of
pages we're making here.

121
00:08:44.890 --> 00:08:50.540
But it's a consideration, if you wanna
be absolutely sure, instead of using

122
00:08:50.540 --> 00:08:56.546
header a, we probably would have wanted
to do something like header link, right?

123
00:08:56.546 --> 00:08:59.453
It doesn't matter,
you can do it whichever way you want.

124
00:08:59.453 --> 00:09:03.920
Using named classes for everything
is probably the the safest solution.

125
00:09:03.920 --> 00:09:07.664
But if you are sure that your
header is going to always have

126
00:09:07.664 --> 00:09:12.350
links that should always look the same,
then you can make that choice.

