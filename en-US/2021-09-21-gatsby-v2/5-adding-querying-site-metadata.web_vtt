WEBVTT

1
00:00:00.153 --> 00:00:05.057
Right now, when we look at our code
we can see that we're not getting

2
00:00:05.057 --> 00:00:07.650
a whole lot of useful information.

3
00:00:09.460 --> 00:00:12.625
We close some of these out so
that we can actually see the whole,

4
00:00:12.625 --> 00:00:15.452
we're just getting like local host 8000,
right?

5
00:00:15.452 --> 00:00:17.785
It's not a useful title,
it's not interesting,

6
00:00:17.785 --> 00:00:21.640
people don't know what page they're
looking at or what it's for.

7
00:00:21.640 --> 00:00:24.666
And when we go to the about page,
same thing, it just says the URL,

8
00:00:24.666 --> 00:00:25.816
nothing useful is here.

9
00:00:25.816 --> 00:00:30.180
So let's fix that,
let's add site metadata.

10
00:00:31.610 --> 00:00:36.666
Gatsby has a concept of what
it calls a Gatsbyconfig.js So

11
00:00:36.666 --> 00:00:41.631
for some global things and
some general configuration.

12
00:00:41.631 --> 00:00:46.614
We'll get more into how we use this later,
Gatsby has a node

13
00:00:46.614 --> 00:00:52.220
file called Gatsby config and
it just exports an object.

14
00:00:52.220 --> 00:00:57.659
So in its most simplistic state,
this is a valid Gatsby config,

15
00:00:57.659 --> 00:01:04.121
it does nothing, but it won't fail,
what we wanna do is add some metadata.

16
00:01:04.121 --> 00:01:08.111
So we're gonna create an object called
Site Metadata and inside of it,

17
00:01:08.111 --> 00:01:10.760
we're gonna add a few
things about our site.

18
00:01:10.760 --> 00:01:16.628
So we don't have this deployed yet, so
we'll just put a placeholder in here.

19
00:01:16.628 --> 00:01:21.182
And say, we are gonna put it
at yourdomain.tilde and then,

20
00:01:21.182 --> 00:01:23.535
we also wanna give it a title.

21
00:01:23.535 --> 00:01:30.105
So site title and we'll call this
frontendmastersintrotogatsby.

22
00:01:30.105 --> 00:01:36.145
Wanna give it a description and
our description will be

23
00:01:37.504 --> 00:01:42.750
Frontend Masters Intro to
Gatsby course project.

24
00:01:43.790 --> 00:01:46.877
And finally,
we're gonna give it an image and

25
00:01:46.877 --> 00:01:50.214
the image that I'm gonna
use is from cloudinary.

26
00:01:50.214 --> 00:01:55.460
I just created one and stored it because
we need it to be web accessible for

27
00:01:55.460 --> 00:01:58.470
it to work for like social media sharing.

28
00:01:59.710 --> 00:02:05.295
So I will show this to you in case anybody
wants to screenshot this and do it.

29
00:02:05.295 --> 00:02:09.088
So this is the image that we're using,
you can use any image you want,

30
00:02:09.088 --> 00:02:11.614
this is just a standard
social sharing image.

31
00:02:11.614 --> 00:02:15.649
But what this is doing is it's
taking advantage of cloudinary,

32
00:02:15.649 --> 00:02:19.621
which is a cool way to host images,
I'm using their free tier.

33
00:02:19.621 --> 00:02:22.296
And that way I don't have to keep
images on my local machine or

34
00:02:22.296 --> 00:02:25.680
figure out how to get them published or
anything like that.

35
00:02:25.680 --> 00:02:31.833
&gt;&gt; How does Gatsby handle trailing slashes
with like links Is there a config option.

36
00:02:31.833 --> 00:02:36.688
&gt;&gt; There is a config for
Gatsby trailing links or

37
00:02:36.688 --> 00:02:42.449
trailing slashes and
I believe the way that it works.

38
00:02:42.449 --> 00:02:46.681
It depends on your server is
kinda the end of it ut there

39
00:02:46.681 --> 00:02:49.042
are plugins to go either way.

40
00:02:49.042 --> 00:02:54.810
So you can either force trailing slashes
or you can remove trailing slashes.

41
00:02:55.840 --> 00:02:57.527
When you deploy this though,

42
00:02:57.527 --> 00:03:01.788
you'll wanna be mindful of how your
host treats trailing slashes as well.

43
00:03:01.788 --> 00:03:06.324
Because, a lot of hosts, will have
their own opinions, so for example,

44
00:03:06.324 --> 00:03:09.840
Netlify, will do trailing
slashes in a certain way.

45
00:03:09.840 --> 00:03:12.192
So if you have a Gatsby
config that does one thing,

46
00:03:12.192 --> 00:03:14.498
and then the Netlify
config does another thing.

47
00:03:14.498 --> 00:03:17.820
You can end up with
unnecessary redirects and

48
00:03:17.820 --> 00:03:22.030
that can slow down your site,
so whatever you do.

49
00:03:22.030 --> 00:03:26.602
You can just just make sure that it
matches all the way through with whatever

50
00:03:26.602 --> 00:03:29.080
service you're using for deployment.

51
00:03:29.080 --> 00:03:30.111
By default though,

52
00:03:30.111 --> 00:03:34.860
what I recommend is just setting a rel
canonical because then it doesn't matter.

53
00:03:34.860 --> 00:03:40.563
If you set a rel canonical, then your
site will always just have the right URL.

54
00:03:40.563 --> 00:03:45.655
And if there's a duplicate,
SEO doesn't care because the canonical

55
00:03:45.655 --> 00:03:51.310
set one of them as the official URL and
we'll look at how to do that.

56
00:03:51.310 --> 00:03:57.277
So now, what we're gonna do we so
we've set this this site metadata, right?

57
00:03:57.277 --> 00:04:02.400
So here's our site metadata and
we are able to now use this or

58
00:04:02.400 --> 00:04:06.030
at least we should be able to use this.

59
00:04:06.030 --> 00:04:11.455
So let's see how Gatsby makes that work,

60
00:04:11.455 --> 00:04:17.196
so what I'm gonna do is
go into My terminal.

61
00:04:17.196 --> 00:04:23.130
Now, we just changed the config of
the site, we added a Gatsby config.

62
00:04:23.130 --> 00:04:25.977
This is one of the times when
it makes sense to stop and

63
00:04:25.977 --> 00:04:28.055
start the development server again.

64
00:04:28.055 --> 00:04:30.233
Because sometimes it'll pick it up but

65
00:04:30.233 --> 00:04:35.070
a lot of times I found it picks up some of
it and then, starts throwing weird errors.

66
00:04:35.070 --> 00:04:39.887
So it's easier to just restart it,
when in doubt restart and

67
00:04:39.887 --> 00:04:44.616
so our site here is running the same,
nothing has changed.

68
00:04:44.616 --> 00:04:45.964
But if we look at GraphQL, so

69
00:04:45.964 --> 00:04:49.350
this is actually where we'll start
digging into GraphQL a little bit.

70
00:04:50.440 --> 00:04:54.134
We have the ability to
query that site metadata.

71
00:04:54.134 --> 00:04:59.524
So what I just did is, I went to visit
local host 8000 slash underscore,

72
00:04:59.524 --> 00:05:02.150
underscore, underscore GraphQL.

73
00:05:02.150 --> 00:05:06.781
So it's triple underscore GraphQL,
this is a it's linked from your terminal.

74
00:05:06.781 --> 00:05:12.540
So you'll see this here, this is a link
to the use the GraphQL Explorer.

75
00:05:12.540 --> 00:05:17.413
And what this is,
this is a window into all the data

76
00:05:17.413 --> 00:05:21.369
in the Gatsby site during development.

77
00:05:21.369 --> 00:05:25.779
And this is where GraphQL
gets kinda weird in Gatsby,

78
00:05:25.779 --> 00:05:31.660
Gatsby treats GraphQL as a temporary
data store for building the site.

79
00:05:32.700 --> 00:05:38.523
You cannot access the GraphQL API
from Gatsby in the production site,

80
00:05:38.523 --> 00:05:41.001
so you can't make a request.

81
00:05:41.001 --> 00:05:44.590
From the client side to the GraphQL
because it won't be there,

82
00:05:44.590 --> 00:05:46.903
it's only available during the build.

83
00:05:46.903 --> 00:05:51.664
And that's where GraphQL on Gatsby
feels very different from the way that

84
00:05:51.664 --> 00:05:52.904
other sites work.

85
00:05:52.904 --> 00:05:57.434
So during development, we've got access
to this GraphQL explorer In production,

86
00:05:57.434 --> 00:05:59.040
there is no GraphQL anymore.

87
00:05:59.040 --> 00:06:02.599
It's all been compiled away and
replaced with these JSON data files,

88
00:06:02.599 --> 00:06:03.576
that I showed you.

89
00:06:03.576 --> 00:06:08.568
So, let's start by getting our metadata,
so I'm gonna open up the site and

90
00:06:08.568 --> 00:06:12.240
this explorer over here is
going to be your best friend.

91
00:06:12.240 --> 00:06:15.894
I love this Explorer,
it's very, very powerful.

92
00:06:15.894 --> 00:06:19.224
So over here, we've got site and
then, this is kinda hard to see so

93
00:06:19.224 --> 00:06:20.950
let me zoom in a little bit.

94
00:06:20.950 --> 00:06:25.601
There are purple things and there are blue
things, the contrast here is not great.

95
00:06:25.601 --> 00:06:29.139
The purple things are filters,
we don't care about those for this,

96
00:06:29.139 --> 00:06:31.560
the blue things are our data.

97
00:06:31.560 --> 00:06:35.235
So I'm going to click site
metadata here and then,

98
00:06:35.235 --> 00:06:39.939
we've got our title, description,
the image and our site URL.

99
00:06:39.939 --> 00:06:43.950
And if I hit this play button,
we can see all that data that we put

100
00:06:43.950 --> 00:06:48.590
into the Gatsby config,
is now available for us, we can use it.

101
00:06:48.590 --> 00:06:53.373
This is where Gatsby opinion
start to show up everything in

102
00:06:53.373 --> 00:06:56.409
Gatsby ends up in the GraphQL layer.

103
00:06:56.409 --> 00:07:00.378
For example, if we go in here and
we look at files,

104
00:07:00.378 --> 00:07:03.790
I can get a list of all
the files in our site.

105
00:07:07.030 --> 00:07:09.251
Which apparently is not finding
any that doesn't sound, right?

106
00:07:14.640 --> 00:07:16.420
I haven't yeah,
we haven't configured that yet, so

107
00:07:16.420 --> 00:07:17.710
the site page is what I was thinking of.

108
00:07:17.710 --> 00:07:21.461
So let's look at our site pages and
I can go to path and

109
00:07:21.461 --> 00:07:23.859
it's got a list of all the pages.

110
00:07:23.859 --> 00:07:27.944
So we can see it like it
generated a Dev 404 page for us,

111
00:07:27.944 --> 00:07:33.667
that if we go over here and look at, this
is a listing of all the pages on the site.

112
00:07:33.667 --> 00:07:36.179
This is only available during development,
so

113
00:07:36.179 --> 00:07:39.640
if we try to go to a URL that
doesn't exist, it'll show us.

114
00:07:39.640 --> 00:07:43.373
Hey, you you haven't created this page
yet, here's how you can create it.

115
00:07:43.373 --> 00:07:47.740
And here are the pages in the site
in case you wanna navigate to those.

116
00:07:47.740 --> 00:07:52.205
This is a really good way if we had
created a bunch of pages from data.

117
00:07:52.205 --> 00:07:57.122
And we don't wanna go build the directory
listing of them yet, you can just 404.

118
00:07:57.122 --> 00:08:02.486
And you'll get a list of all
the pages you've created here,

119
00:08:02.486 --> 00:08:05.545
so that can make navigation easy.

120
00:08:05.545 --> 00:08:10.254
So now, that we've got the ability
to get this site data, right?

121
00:08:10.254 --> 00:08:14.799
We're able to load our site metadata,

122
00:08:14.799 --> 00:08:20.996
we can then start using it,
so let's get this data and

123
00:08:20.996 --> 00:08:25.141
actually set the title of our site.

124
00:08:25.141 --> 00:08:30.060
So I'm going to go back into the code here
and I'm gonna go into our index page.

125
00:08:30.060 --> 00:08:33.176
And we're going to use
GraphQL in Gatsby now, so

126
00:08:33.176 --> 00:08:36.300
I'm gonna use something
called a static query.

127
00:08:36.300 --> 00:08:39.409
Now, when you are thinking
about data in Gatsby,

128
00:08:39.409 --> 00:08:43.810
I would say default to
the simplest possible solution.

129
00:08:43.810 --> 00:08:47.646
The use static query hook in Gatsby,

130
00:08:47.646 --> 00:08:51.742
is most likely the simplest solution.

131
00:08:51.742 --> 00:08:54.617
Any other way that you're gonna do,
it is gonna require a little bit of

132
00:08:54.617 --> 00:08:57.200
understanding how data
flows through Gatsby.

133
00:08:57.200 --> 00:09:00.654
So if you don't need variables,
if what you're querying for use,

134
00:09:00.654 --> 00:09:03.696
static query is going to allow
you to write a GraphQL query.

135
00:09:03.696 --> 00:09:05.428
And use the result right in place,

136
00:09:05.428 --> 00:09:08.820
with no understanding of how
data flows through Gatsby.

137
00:09:08.820 --> 00:09:11.536
And that's why I'm a fan of this approach.

138
00:09:11.536 --> 00:09:15.441
So what we can do then,
is now that we've got access to this,

139
00:09:15.441 --> 00:09:17.292
I'm going to get some data.

140
00:09:17.292 --> 00:09:22.843
And that'll be the result of use static
query and that uses a tagged template.

141
00:09:22.843 --> 00:09:28.657
So a template literal is anything
between these little back ticks and

142
00:09:28.657 --> 00:09:33.730
a tag is kinda function but
not exactly a function.

143
00:09:33.730 --> 00:09:37.216
And I'm not gonna go into
exactly how they work but

144
00:09:37.216 --> 00:09:40.868
it's a common way of dealing
with GraphQL queries.

145
00:09:40.868 --> 00:09:45.100
You'll see this a lot, where you'll
use a tag template literal like this.

146
00:09:45.100 --> 00:09:48.825
And then once we've got
this set up inside,

147
00:09:48.825 --> 00:09:55.280
I'm just literally gonna copy paste this
and I want it to have a unique name.

148
00:09:55.280 --> 00:10:00.010
So instead of calling it my query,
I'm gonna call it get site title.

149
00:10:00.010 --> 00:10:04.574
And I don't need the description image and
site URL for what we're about to do, so

150
00:10:04.574 --> 00:10:06.308
I'm gonna only use the title.

151
00:10:06.308 --> 00:10:10.644
This is another benefit of GraphQL
is that if you don't need something,

152
00:10:10.644 --> 00:10:14.150
just don't query for it and
you'll get less data.

153
00:10:14.150 --> 00:10:19.590
So no wasted data and this is a big
deal in Gatsby because remember

154
00:10:19.590 --> 00:10:24.952
what Gatsby is doing is it's
attaching this data to your site.

155
00:10:24.952 --> 00:10:27.755
So if you query for
a bunch of data you're not using,

156
00:10:27.755 --> 00:10:31.470
you're going to ship that to your
users in the form of that JSON file.

157
00:10:31.470 --> 00:10:35.006
So only query for
what you're actually going to use,

158
00:10:35.006 --> 00:10:37.293
that's a little little perf tip.

159
00:10:37.293 --> 00:10:41.228
So now, that we've got this,
it's gonna be in our data and

160
00:10:41.228 --> 00:10:45.460
I want to get the title out,
so I'm gonna get the title.

161
00:10:45.460 --> 00:10:49.817
And that will be actual let's call it
meta cuz we're getting the site metadata.

162
00:10:49.817 --> 00:10:54.389
And that site metadata is going to be
the data which should always be set but

163
00:10:54.389 --> 00:10:56.540
just in case we don't want error.

164
00:10:56.540 --> 00:11:00.942
So, I'm gonna use the optional chaining
operator, which if data is not set,

165
00:11:00.942 --> 00:11:02.156
just returns empty.

166
00:11:02.156 --> 00:11:06.395
So instead of getting a big exploding
unset can't get field whatever of

167
00:11:06.395 --> 00:11:07.180
undefined.

168
00:11:07.180 --> 00:11:11.481
We'll just get an empty string,
which for this particular thing,

169
00:11:11.481 --> 00:11:13.673
I'm okay with that I don't mind.

170
00:11:13.673 --> 00:11:17.176
Inside the data we just move in
this like it's an object, so

171
00:11:17.176 --> 00:11:21.610
we can get the site optional chain that
and then, we get the site metadata.

172
00:11:22.630 --> 00:11:25.990
Optional chain that or no,
we want optional chain that but

173
00:11:25.990 --> 00:11:28.266
we will do some knowledge coalescing.

174
00:11:28.266 --> 00:11:31.730
If it is empty, we're just gonna
give back an empty object.

175
00:11:31.730 --> 00:11:35.277
And that's because what
we're gonna do down here,

176
00:11:35.277 --> 00:11:38.593
is we're gonna set a header
that uses the title.

177
00:11:38.593 --> 00:11:42.244
So let me just repeat this because I feel
like this is one of those things that when

178
00:11:42.244 --> 00:11:44.695
you're new to GraphQL,
it's really confusing.

179
00:11:44.695 --> 00:11:47.662
And then, when it clicks,
it feels very natural.

180
00:11:47.662 --> 00:11:52.402
So the way that GraphQL queries work,
is when you make a query,

181
00:11:52.402 --> 00:11:55.365
the result of the query ends up in data.

182
00:11:56.735 --> 00:12:02.486
Inside of data, you have an object that
just represents the shape of this query.

183
00:12:02.486 --> 00:12:07.922
So data.site.sitemetadata.title will
give you the value of the title.

184
00:12:09.112 --> 00:12:11.961
The only differences is
if this is an array,

185
00:12:11.961 --> 00:12:15.429
if we were looking at posts,
posts would be an array.

186
00:12:15.429 --> 00:12:17.550
And so it wouldn't be able
to do like post dot title.

187
00:12:17.550 --> 00:12:22.225
You'd have to do posts,
array index zero or get the first post and

188
00:12:22.225 --> 00:12:26.052
then post dot title,
which we'll get into a little.

189
00:12:26.052 --> 00:12:28.887
So now that we've got that site metadata,

190
00:12:28.887 --> 00:12:33.430
this we can use as metadata title,
so I wanna add a header.

191
00:12:33.430 --> 00:12:36.454
So I'm gonna use a GraphQL fragment or

192
00:12:36.454 --> 00:12:40.998
a react fragment because I
don't want to deal with junk.

193
00:12:40.998 --> 00:12:45.555
I don't wanna add junk mark up to my site,
so I'm gonna create a header.

194
00:12:45.555 --> 00:12:50.855
And in my header I'm going
to link to our homepage and

195
00:12:50.855 --> 00:12:57.972
then, I'm gonna use metadata title
as the text of that link, right?

196
00:12:57.972 --> 00:13:02.672
So now, we have a header that will
show our site and let's go look and

197
00:13:02.672 --> 00:13:06.150
see if this worked or
if I need to restart the site.

198
00:13:08.350 --> 00:13:12.451
There it is, Front End masters intro
to Gatsby and if I come in here and

199
00:13:12.451 --> 00:13:13.318
make an edit.

200
00:13:22.010 --> 00:13:26.836
It shows up right away, no needing to
restart the server or anything like that.

201
00:13:26.836 --> 00:13:32.032
Once the config is in, we can edit
it as needed and everybody's happy,

202
00:13:32.032 --> 00:13:36.202
so this is where we start to
see some real power with this.

203
00:13:36.202 --> 00:13:39.868
Is we're able to really get these
meta tags in and editable and

204
00:13:39.868 --> 00:13:41.430
usable through GraphQL.

