[00:00:00]
>> Where we left off was we had just pulled in the site metadata that we'd created in our Gatsby config. So we pulled in this title here, and we're querying for it using Gatsby's graph qL layer. And displaying it in a little bit of a header here. So that is giving us this great experience where we have our home link in a header controlled by this Gatsby Config.

[00:00:27]
So anywhere that we use this, if we edit the config, it's going to get updated. Nice and handy. That's pretty great. So the next thing that I want to do is we still haven't solved this problem where we're just showing the the URL in the title bar. I want this to show something useful on the homepage.

[00:00:44]
I want it to show this front end masters intro to Gatsby, I wanna include a meta description. I want to include that image that we created so that if you share this on Twitter, you'll actually be able to see that image shared, right? So we wanna make sure that our sites have all the SEO benefits and meta tags that they need to be shared on Facebook, LinkedIn, Twitter, etc.

[00:01:06]
[COUGH] So let's do that. What we're gonna do first is we are going to install a react project called react helmet. This is a package that is designed for modifying the head of documents generated by react and the head tag is where we're going to put title tags, meta tags, so on and so forth.

[00:01:25]
So let's do that. And then we're also going need a plugin for Gatsby to use react helmet. And that's what allows the Gatsby to server side render se head tags so that they're available if JavaScript is disabled. So let's start with that. We're gonna npm install. Actually, let me do this in the other one.

[00:01:43]
We're gonna stop our server npm install, React helmet, and Gatsby. Plug in react helmet. And as these install, or they go, we can head back over here into our Gatsby config. And now we're going to use another field in our config, which is plugins. And plugins is an array so we can put whatever we want in here.

[00:02:12]
And I'm going to add Gatsby. Plug in react helmet. Okay, so here is Gatsby plugin react helmet, it's now added to our Gatsby config, which means we can use it. So let's restart that dev server. And as of right now, nothing has happened. If I wait for this to go, here you go, refresh the page, no changes.

[00:02:40]
So we're gonna go into our index file and we're gonna make this thing work. So the way that we do that is I'm gonna add a bunch of SEO tags. And we're gonna need this for every page, right? So let's take advantage of something that react does and let's make this into a component.

[00:02:58]
Let's not hard code this whole thing out. So I'm going to create a components folder. And inside of that, I'm gonna create a file called SEO.js. And inside of this we're gonna do the dance with react, import everything as react from react. And we're also going to use helmet, so let's import helmet from react helmet.

[00:03:30]
And finally, we're gonna need that data that we put in the static config the site config. So let's import use static query and graph qL again from Gatsby. All right, now we can export a function that we're going to call SEO and I don't want react to yell at me about not Pascal casing my company.

[00:03:50]
Opponents, which is why I'm not capitalizing the E and O, even though it deeply pains me to do that. And inside of this, we're going to accept some props because we want to pull in title, description, etc, as something you can customize in this. So let's do that we're gonna have the ability to pull in actually, what?

[00:04:14]
Let's just call these props. And I'll show you why momentarily. So first and foremost, let's get our data again. So we're gonna get data and that is going to be the result of use static query. And that's gonna use graph QL. And this time, I do actually want all of those fields.

[00:04:31]
So I'm gonna go back out to my graphical and we're gonna do site. And I do want the description image and site URL. So let me grab all of that. And again, we wanna give our queries a unique name, because otherwise Gatsby will complain that we've done something confusing.

[00:04:51]
So let's call this get site Metadata. All right. And then down here, I'm going to call these are defaults. So by default, if we don't provide any arguments, we're going to use the the metadata from Gatsby's config. So we're gonna get this as data, site, site metadata. And then we're going to, we're gonna pull out each one.

[00:05:27]
So for the title, we want to check if a title was set. If the title was set. We're gonna use it otherwise we'll use the default state title, right? So that's why and the reason I'm using props here is because I don't wanna have to have like, title equals and then here would be like actual title or something like that.

[00:05:48]
We don't wanna have to double declare. So by leaving it is a props object. We don't have to worry about that it can just be title title title. See the same thing for the description, And for the image, whoops. Description, and this one It's gonna be image. And then finally down here, we're gonna do a little bit of magic because we want the URL, we're going to do a canonical URL.

[00:06:23]
And the way that we're gonna do canonical URL is we're gonna use the URL and we'll get the props .path. So props dot path will be like the full link to our page, or it'll be just an empty like a slash. And we're gonna set the base as the site URL, right?

[00:06:51]
And so what that'll do is it'll make the canonical URL a full HTTP URL, which is what we want. And now that I think about it, we wanna do the same thing for the image. So I'm going to, let's do the same thing here. New URL because the image again in a, like a social sharing, that needs to be a full URL.

[00:07:10]
Well it can't just be like slash images slash whatever it needs to be HTTP, and so on. So we're gonna use the the props image or the default image. And that will also use as a base the defaults, site URL. And that gives us a fully qualified URL.

[00:07:28]
And the nice thing about this is if you put in here, a full URL, it'll just override this base. So the URL API is is smart enough to handle that. But if we wanna put in relative path this makes sure that it still works. So now that we've got our title, description, image and URL, we can actually start using these.

[00:07:49]
So let's return some react. The first thing we're going to do is set up a helmet component. And helmet is a kind of it's like a head tag but not quite. So it's got a little bit of its own API. For the most part, we can just use it like a standard head tag.

[00:08:12]
So we'll add in a title. Let's add in a meta Name, Description. And we'll give that one a content. Have the description. And we wanna do link rel canonical. And this will solve that trailing slash problem because this URL will be the same. And we'll get a canonical URL.

[00:08:38]
So we can set the href to be our URL. And finally, if there is an image, because there might not be, then we're gonna set a meta name of image and the content will be the image, right? Okay, so and then we need to make that here. And the reason that I make this optional is that it is possible that maybe you don't want a default image and so you leave this empty in your Gatsby config.

[00:09:14]
And then that way means we don't put a broken image up is your image. So next we want to set up for Facebook. So let's do property OJI URL, and that's gonna be content equals URL. We can do this again let's do a type and you can do a lot of things with these.

[00:09:39]
I'm doing a pretty like, general purpose this will be fine. And you can do a little more research if you want to do it like exactly the right way for for rendering the title or the OG : title will be that the description, Right? And then we want, what else?

[00:10:03]
Yeah, we need one of these image ones. So, let's copy this one actually. And this one will be an og image, and its content will be image. Alright, so that's Facebook and in a lot of other services, but we also want to make sure that we're doing Twitter.

[00:10:22]
Alright, so let's add one more. We're gonna do a name of Twitter card. And because we're assuming we're gonna have an image, we're gonna make this a summary large image, right? Then we're gonna set meta name, and that'll be Twitter title. And all of these you could make these configurable where you could Set custom stuff on Twitter and custom stuff on Facebook.

[00:10:49]
I don't like doing that mainly because it makes me lazy and I never do it. So then I just have all this config that I don't want to deal with. I get overwhelmed and either ignore it entirely or end up letting my site languish because I can't bear the thought of having to update all this content.

[00:11:09]
So let's do another one of those image ones. This one is gonna be called Twitter image. Okay, so now what we've created If we have grabbed out default metadata. We are exporting a prop called SEO that accepts props with the title, description, image and path. And we are returning all of the SEO tags that we might need.

[00:11:33]
To manage not just the browser display. But also what shows up on Google, what shows up on Facebook, what shows up on Twitter and a whole lot of other services will read these Open Graph. So like LinkedIn and stuff like that. So we're customizing the way that our site is going to look across social media.

[00:11:54]
Once we have saved that. We can head on over to our index page. And we're gonna import SEO from components SEO. I include the extension because yes modules. Include the extension and eventually we'll get away from babel and webpack and that'll mean that we will need extensions for local files.

[00:12:19]
It's optional, you don't need to do it, if you don't agree with me. That's fine, just leave it out once we have this SEO component, then we can come down here. And let's, just use it, right. And so on the homepage, we wanna use those defaults. So we just drop that thing right in Boom, no changes.

[00:12:40]
Then we can come over here. Reload let's take a look at what showed up under the hood. We move this over to the side again. And if we look at our elements we can see in our head, we've got a title. We've got a description, we've got our canonical which is bad because we have this placeholder domain but that's okay.

[00:13:01]
We can fix that later. We've got our image which is actually going to the right place. We've got the Open Graph URL, what type it, It is all the things that we need for these sites to show up properly on social media are now in place, right? And that is really handy and it used all of our defaults.

[00:13:20]
So we've got the link in the description. Intro to Gatsby course projects that's what we want it. So now, let's go look at the the about page so we didn't make any changes here. So you can see that, notice that it like kept the one from the homepage.

[00:13:37]
This is something that gets a little bit weird which is why it's important to make sure if you add SEO tags, update them, because once they're added react and react helmet and Gatsby, they're not gonna unset stuff. They're just gonna look for changes. So if you set it, if you set SEO tags, make sure you add them to all your pages.

[00:13:58]
You can do this through front matter or whatever. So let's go ahead and get this added to the about page as well. And this time we're gonna do it with some changes. So let's go to about I'm gonna import this SEO tag from components, SEO dot j s.

[00:14:16]
And then down here I'm going to wrap this whole thing in fragment so that I don't have to put my SEO tag inside of my main tag will do SEO. Whoa, thank you autocomplete. Alright, so we'll do SEO, we'll do the title and I want this to be about this site and for a description, We can put something like more information about this site.

[00:14:46]
Okay, so now we've got, here's our Seo, here's our actual site content. If I refresh the page, we can see that it's showing up properly. Let's look at these elements again. Here's the head. And we'll watch as I navigate, you'll see these kind of light up and change.

[00:15:07]
So there we go. Let's see the title change we can see some of these react components changed. You see him jumping around at the bottom here, right? So we can see that as we're navigating around, the social sharing data is updating and changing around for us. So, that is an SEO component, right?

