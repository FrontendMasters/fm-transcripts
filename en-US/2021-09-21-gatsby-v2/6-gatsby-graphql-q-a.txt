[00:00:00]
>> How can we use a mutation to create update with Gatsby and GraphQL? So, Gatsby does not support mutations. That's another feature of making it a build time only solution. You don't mutate data through Gatsby. What you can do and we won't talk about this today, but we'll get into it a little bit with the intermediate course.

[00:00:27]
Is you can transform nodes which is effectively a mutation. But that's done through Gatsby API's not through. That's not handled through like GraphQL itself. So, again, GraphQL and Gatsby is not GraphQL everywhere, it is a very unique approach to GraphQL. That is a more, it's almost a subset.

[00:00:53]

>> Is there a way to, sorry, is there a way to get data like this from a asynchronous source like a REST? Or GraphQL server from some public API.
>> Yeah, absolutely, a little bit later today, we will actually do that will load data from a third party service using their I believe their REST API.

[00:01:18]
And there are plugins from actually loading in from REST API's. And in the intermediate course we'll look at putting custom data like whatever you want into Gatsby's API's. So, yeah, well we'll touch on it today, we'll go much deeper in the intermediate workshop though.
>> GraphQL is specifically used with Gatsby, is it compatible with any other data layer?

[00:01:44]

>> So, yes, in the sense that you can load any data into Gatsby's runtime GraphQL. And also it's important to note like you can use Gatsby without ever touching the GraphQL layer, like if you, when we look at the MDX setup, which is in a little bit here.

[00:02:04]
You can do everything in Gatsby just using markdown, or MDX and you never have to write a GraphQL query at all. And the site metadata stuff. This is all optional. The way that I'm doing it, I could also create a config.js in my source folder. And pull that in instead of doing the the site metadata like my config could just be you know import meta from like metadata.js or something.

[00:02:32]
And then we could do metadata title here, so you don't have to use the GraphQL. And really, if I wanted to I could pull in data from, using the fetch API or from other sources to build out the site, where Gatsby starts. In this is sort of the thing where like, if you find yourself really not wanting to use Gatsby, or GraphQL, Gatsby might not be the right solution for you.

[00:02:59]
There are other ways to build sites that will let you do a lot of what Gatsby does without the GraphQL requirement. Next JS, Astro, they're always that you can build sites similar to this that don't have GraphQL as a dependency. So, there's, there are definitely options. But yeah the the GraphQL part is very integral to Gatsby, but it's not a strict requirement.

[00:03:28]
It's just kinda one of those things that your life gets easier if you just give in and do it Gatsby's way.
>> How about if you have a bunch of JSON data that you want to, load into GraphQL and then query through Gatsby's GraphQL layer. Is there an easy way to do that?

[00:03:47]

>> Absolutely, there is a source plugin for JSON specifically. So, Gatsby source, JSON, you can just pull that data straight in. So, you you can just import it like this. So, you can just pull it in, but you can also source it. And if you source it. Where did it go?

[00:04:24]
Here, you can just get any JSON data that comes in, and it'll turn it into nodes. So, we'll look at how this file system plugin works. And then this, the transformers are what I was talking about where you can have data that comes into Gatsby. A transformer plugin uses some Gatsby API's to turn that data from one shape into another.

[00:04:46]
So in this case it looks and it finds that a file is a .JSON file and then converts it into a GraphQL node. So, if you have a bunch of JSON, you don't actually have to do anything. You just have to install this Gatsby transformer and it will put it into your file like the GraphQL for you, it'll show up as an option here.

[00:05:12]

>> Is there a way to query, or make these queries on the fly like in JavaScript? So, you could like for instance, grab a bit of extra data dynamically, like dynamic JS app and put it into local storage, something like that.
>> Yeah 100%, if you wanna do that you've now basically entered regular old react.

[00:05:39]
So, you would pull in the use effect and you'd be able to do extra data would be, just fetch whatever your endpoint was. And then. You could like, grab it like so. And here, Would be your extra data. Right? So, at this point, you could put it into a use state.

[00:06:17]
You could set it in local storage, you could do whatever you want. But you would be able to use for example, you could take this title which is loaded at build time and use that to inform this fetch. So, a good example of that would be if I want to serve a render my blog posts, but I don't want to serve a render the comments I wanna client side render those.

[00:06:40]
Then I would be able to load the blog post here and then I would be able to use the ID of the blog post to make a call to my API and load in the comments. But again, you cannot call the Gatsby GraphQL from the client side. So this would be calling a third party API or if you could put together, a serverless function that would return common data.

[00:07:06]
And then call your your serverless function there. There are a lot of ways that you can solve this problem. We will not be touching on this flow today, but we will in the intermediate Gatsby workshop.
>> So the reason for me for learning Gatsby is to create basically blogs and content websites for that feels snappy and fast, and they work great on browser and mobile.

[00:07:29]
And they also performed great from the technical SEO standpoint. So, they rank better on the search engines and all that. And that's why I did some a little bit of research on the internet. So I found that Gatsby, basically two things that came up Gatsby and next. So, I'm not sure which worksheet, which is better for this specific reason.

[00:07:55]
Also if you have some resources regarding this specific reason, so.
>> So, Gatsby versus next is, I'm gonna give you the most infuriating developer answer ever, which is it depends, right? So, Gatsby is a very opinionated way to get data from a lot of different sources and put it into a unified data layer.

[00:08:18]
So that every page you build whether you're pulling data from a headless CMS, or from JSON, or from markdown. Or from air table or whatever you're using, it's always going to feel roughly the same to work with that data. Next is a little bit of the other side.

[00:08:34]
Next is pretty, do whatever you want. They provide you with some low level API's to get site data. So, they have like the get static props hook, and some other like extensions to the react file type that allow you to load data. Next is going to rely on you building a lot more custom stuff.

[00:09:03]
A Gatsby is going to give you a lot of batteries included, but it'll also fight really hard when you wanna customise it, because it's not the Gatsby way. So, when you're looking at your use case, what you're trying to build. If what you have is structured data and you wanna get it onto a website, Gatsby is going to be really fast.

[00:09:20]
If what you have is some custom stuff and you got to do some weirdness, and you're looking at like you're not quite sure how that date is gonna get in. And some of its gonna load, now and someone will load it client side, and it's there's some like bespoke stuff happening.

[00:09:37]
Next is gonna put less roadblocks in your way. But it'll also expect you to build all of that stuff on your own. So, these are the trade offs, like next is more flexible at the expense of having to write more code. Gatsby is more expedient, I guess, at the expense of having a lot of opinions.

