WEBVTT

1
00:00:00.480 --> 00:00:06.074
So let's do a new component in the
components folder called post layout.js.

2
00:00:06.074 --> 00:00:11.759
In this post layout, let's import,
everything is react from react,

3
00:00:11.759 --> 00:00:15.275
then we're gonna import link from Gatsby.

4
00:00:15.275 --> 00:00:20.779
Because I wanna add the ability to add
a link at the bottom of every post taking

5
00:00:20.779 --> 00:00:26.118
you back to the full listing, and
then we're going to import our layout.

6
00:00:27.314 --> 00:00:32.477
And this is so that we can grab
the content of the MDX post,

7
00:00:32.477 --> 00:00:38.838
and then I want to insert the details
from the MDX post into our layout.

8
00:00:38.838 --> 00:00:43.388
So the way that this will work is we're
gonna export a default function called

9
00:00:43.388 --> 00:00:46.328
post layout, and
that is gonna get the children,

10
00:00:46.328 --> 00:00:50.258
which is just anything inside of
it like the like the layout would.

11
00:00:50.258 --> 00:00:55.630
And then we're gonna do something
from Gatsby called page context.

12
00:00:55.630 --> 00:01:00.832
So before I do anything else,
let's just show what this looks like.

13
00:01:00.832 --> 00:01:05.551
So I'm going to return the layout, and

14
00:01:05.551 --> 00:01:11.700
inside the layout we're
gonna send the children,

15
00:01:11.700 --> 00:01:18.429
but then I also want to just
stringify the page context.

16
00:01:18.429 --> 00:01:22.790
This is one of my favorite debugging
tools, when in doubt, wait,

17
00:01:22.790 --> 00:01:23.931
got to wrap this.

18
00:01:23.931 --> 00:01:24.906
No, that should be fine.

19
00:01:26.973 --> 00:01:28.560
What have I done?

20
00:01:28.560 --> 00:01:32.534
I'm missing a closing parentheses
is why that's unhappy.

21
00:01:32.534 --> 00:01:37.153
Okay, so one of my favorite debugging
tools when I'm trying to figure out

22
00:01:37.153 --> 00:01:41.861
what's going on in Gatsby is to just
grab whatever comes out and enlist it.

23
00:01:41.861 --> 00:01:46.880
So if you want to see everything actually
this is probably even better, let's just

24
00:01:46.880 --> 00:01:51.770
do everything that's not children,
let's stringify it underneath the post.

25
00:01:51.770 --> 00:01:56.996
So now that we've got this, we need to
actually configure Gatsby to use it.

26
00:01:56.996 --> 00:02:01.657
So down in here where we have the layout,
let's just change that over to

27
00:02:01.657 --> 00:02:05.479
post layout, and
it's gonna tell us it needs to restart.

28
00:02:05.479 --> 00:02:11.752
Okay, so that's restarted, and
now we get a whole bunch of stuff.

29
00:02:11.752 --> 00:02:15.126
So this is what Gatsby is actually
passing in to any given page.

30
00:02:15.126 --> 00:02:19.266
And because this is marked down we get
a little bit extra, or MDX I mean.

31
00:02:19.266 --> 00:02:20.976
So first we get the path, okay, great.

32
00:02:20.976 --> 00:02:24.521
We knew the path, we're happy about that,
so we've got in here we've got

33
00:02:24.521 --> 00:02:27.674
the location, and that gives us
all the things that you would get,

34
00:02:27.674 --> 00:02:29.842
this is actually coming
out of reach router.

35
00:02:29.842 --> 00:02:34.387
So it's information about where we are and
the state of navigation in our app.

36
00:02:34.387 --> 00:02:36.616
Then we get down in some things that
we don't really need to worry about.

37
00:02:36.616 --> 00:02:41.236
These are Gatsby things like our page
resources, where the what the JSON is for

38
00:02:41.236 --> 00:02:41.866
the page.

39
00:02:41.866 --> 00:02:46.184
So this is if you want to see how
much data is gonna get sent down

40
00:02:46.184 --> 00:02:48.309
with your your Gatsby files.

41
00:02:48.309 --> 00:02:51.783
This is why it's good to validate that
you're not sending a bunch of data you

42
00:02:51.783 --> 00:02:52.825
won't actually use.

43
00:02:52.825 --> 00:02:58.228
Information about the page like this
is what the files will be called,

44
00:02:58.228 --> 00:03:00.434
what the webpack harsh etc.

45
00:03:00.434 --> 00:03:02.436
Static query results, so we're loading,

46
00:03:02.436 --> 00:03:05.906
remember we're using the header where
we've got this query for the title.

47
00:03:05.906 --> 00:03:11.843
And then, this is the SEO component that's
got the query for the site metadata.

48
00:03:11.843 --> 00:03:15.036
The URI, and
finally down here we've got page context.

49
00:03:15.036 --> 00:03:19.192
And so, what page context is,
is when you create a page in Gatsby,

50
00:03:19.192 --> 00:03:23.721
there's all the way at the bottom of
the stack where there's a node API,

51
00:03:23.721 --> 00:03:26.112
that Gatsby uses called Create Page.

52
00:03:26.112 --> 00:03:31.079
And you pass in a path, you pass in a file
that you wanna use as the template, and

53
00:03:31.079 --> 00:03:35.692
then you can pass in something called
context, which is just an object.

54
00:03:35.692 --> 00:03:40.282
And whatever you pass in here gets
provided in the page context object.

55
00:03:40.282 --> 00:03:44.402
And in the case of MDX, whatever you
put in the front matter gets put into

56
00:03:44.402 --> 00:03:48.053
the context object when the page
gets created through Gatsby.

57
00:03:48.053 --> 00:03:53.059
So that means that in our layout,
we can access this page context object,

58
00:03:53.059 --> 00:03:55.886
and pull out the title and description and

59
00:03:55.886 --> 00:03:59.871
date if we wanted to,
to then feed into our SEO component.

60
00:03:59.871 --> 00:04:02.697
So let's actually do that here.

61
00:04:02.697 --> 00:04:07.546
We'll go into our post layout, and
instead of the props we're gonna get

62
00:04:07.546 --> 00:04:12.090
the page context, and
we don't need to destructure this anymore.

63
00:04:12.090 --> 00:04:19.812
So instead what we're gonna do is
we're going to get out the title and

64
00:04:19.812 --> 00:04:25.023
description from page context frontmatter.

65
00:04:25.023 --> 00:04:30.876
And down here in the layout,
we're gonna set the title to be title,

66
00:04:30.876 --> 00:04:34.380
and the description to be description.

67
00:04:34.380 --> 00:04:38.595
Okay, so having done that,
we can add our link back, so

68
00:04:38.595 --> 00:04:44.006
let's add a link to, and we're gonna
do our blog role on the homepage.

69
00:04:44.006 --> 00:04:47.768
Then I'm gonna use a left
arrow HTML entity so

70
00:04:47.768 --> 00:04:51.141
that we can point back and just say Back.

71
00:04:51.141 --> 00:04:56.246
So what this gives us is now,
we actually get the things that we want.

72
00:04:56.246 --> 00:04:58.457
There's the post title, and

73
00:04:58.457 --> 00:05:03.419
if we look in here in our description,
If we can find it where to go.

74
00:05:03.419 --> 00:05:08.406
Here's our description, and it shows
us the actual description we wrote, and

75
00:05:08.406 --> 00:05:11.319
if I go back,
let's go to the first blog post.

76
00:05:14.199 --> 00:05:17.802
We can see the same thing,
so, here is our description,

77
00:05:17.802 --> 00:05:22.400
this is my first MDX blog post,
the title is updated to say my first blog.

78
00:05:22.400 --> 00:05:26.951
So now, that post layout is
actually using the front matter

79
00:05:26.951 --> 00:05:30.148
data to update the search engine values.

80
00:05:30.148 --> 00:05:33.836
So with pretty minimal changes we're
able to kind of wrap our layout and

81
00:05:33.836 --> 00:05:38.146
just do the little bit of abstraction that
we need, so it'll still use our layout.

82
00:05:38.146 --> 00:05:42.833
And if we in the future want to add more
fields to it, like we wanna add the date

83
00:05:42.833 --> 00:05:47.395
or we wanna add the Twitter author or
something like that, we can do that.

84
00:05:47.395 --> 00:05:50.597
We would just need to modify
our SEO component, and

85
00:05:50.597 --> 00:05:54.405
then add the front matter fields and
just pull them out here.

86
00:05:54.405 --> 00:05:59.047
So, if we wanted to add a new one we
can pull out like the author field and

87
00:05:59.047 --> 00:06:01.187
we could we could use that then.

88
00:06:01.187 --> 00:06:06.057
&gt;&gt; What's the max number of blog posts
that Gatsby can handle without tears?

89
00:06:06.057 --> 00:06:12.869
&gt;&gt; [LAUGH] Okay, so the thing about
Gatsby is that it's not about numbers,

90
00:06:12.869 --> 00:06:17.650
it's about the amount of
work that is being done.

91
00:06:17.650 --> 00:06:23.272
So if you take Gatsby and you feed it
a bunch of files that have one word and

92
00:06:23.272 --> 00:06:27.489
no metadata and no images,
it can handle thousands,

93
00:06:27.489 --> 00:06:32.102
tens of thousands,
potentially hundreds of thousands.

94
00:06:32.102 --> 00:06:37.236
But as you start to add in like
images to be optimized, if you feed

95
00:06:37.236 --> 00:06:43.323
it raw images direct from your camera,
and every image is 50 megabytes and

96
00:06:43.323 --> 00:06:47.911
has to be resized,
it's gonna choke on dozens of pages.

97
00:06:47.911 --> 00:06:50.802
It'll take forever to build the site, so

98
00:06:50.802 --> 00:06:55.110
it's very much a matter of what
are you asking each page to do?

99
00:06:55.110 --> 00:06:59.787
And how much work does it have to
do to get from the raw material

100
00:06:59.787 --> 00:07:03.020
to the end page that you're looking for.

101
00:07:03.020 --> 00:07:07.540
A good example is, if I'm pulling
data from a third party API, and

102
00:07:07.540 --> 00:07:11.253
that API has a rate limit that
requires us to only ask for

103
00:07:11.253 --> 00:07:16.222
10 posts per second before it would
block us from from asking for more.

104
00:07:16.222 --> 00:07:18.202
And we asked for 1000 posts,

105
00:07:18.202 --> 00:07:22.594
we've just guaranteed 100 seconds
of data loading for Gatsby to run.

106
00:07:22.594 --> 00:07:26.731
Now that's not Gatsby's fault,
that's a limitation of the API.

107
00:07:26.731 --> 00:07:31.385
Where Gatsby does struggle is
when you put tones and tones and

108
00:07:31.385 --> 00:07:33.401
tones of images in there.

109
00:07:33.401 --> 00:07:37.757
It will try to parse all of those, and
it's pretty good at caching things so

110
00:07:37.757 --> 00:07:40.470
that it doesn't do work
more than it needs to.

111
00:07:40.470 --> 00:07:46.767
But it will it just, it's a problem
that scales not quite linearly.

112
00:07:46.767 --> 00:07:51.654
I wouldn't call it a linear scale,
but it's a challenge in that

113
00:07:51.654 --> 00:07:55.997
as you are adding more work
to the Gatsby build pipeline,

114
00:07:55.997 --> 00:08:00.086
some types of things are gonna
balloon very quickly.

115
00:08:00.086 --> 00:08:04.447
Like very large images,
it'll slow down fast.

116
00:08:04.447 --> 00:08:09.191
Number of text files, it takes a long
time for that to start to bottleneck.

117
00:08:09.191 --> 00:08:13.718
So it's a little bit less about like hard
numbers and a lot more about the type and

118
00:08:13.718 --> 00:08:18.129
amount of work that you're asking Gatsby
to do as part of that build process.

119
00:08:18.129 --> 00:08:22.135
I know that's a very squishy answer, but
unfortunately that's the best I got.

120
00:08:22.135 --> 00:08:26.287
[LAUGH]
&gt;&gt; Someone commented that you could

121
00:08:26.287 --> 00:08:30.618
potentially host the data somewhere,
and then and

122
00:08:30.618 --> 00:08:34.150
Gatsby can import the data at build time.

123
00:08:34.150 --> 00:08:39.027
And with web hooks trigger
builds an incremental builds on

124
00:08:39.027 --> 00:08:43.010
Gatsby cloud which
rebuilds what's changed,

125
00:08:43.010 --> 00:08:47.502
I don't know anything about that,
but maybe you do.

126
00:08:47.502 --> 00:08:52.732
&gt;&gt; I mean if you wanna get really clever
like, here's again where I think if you

127
00:08:52.732 --> 00:08:58.305
find yourself working that hard to make
Gatsby build, maybe don't use Gatsby.

128
00:08:58.305 --> 00:09:02.788
It's one of those things where if you find
that the vast majority of the work you're

129
00:09:02.788 --> 00:09:07.163
doing is getting the tool to cooperate,
you're probably using the wrong tool.

130
00:09:07.163 --> 00:09:11.551
I think that you can,
you could like pull the data down and

131
00:09:11.551 --> 00:09:16.772
have it in a JSON file that you
refresh periodically with web hooks.

132
00:09:16.772 --> 00:09:20.548
And you can check whether or not any data
changed in a web hook to see whether or

133
00:09:20.548 --> 00:09:22.331
not it's time to rebuild the site.

134
00:09:22.331 --> 00:09:26.707
And there are ways to do that, like Gatsby
version 3 introduced incremental build as

135
00:09:26.707 --> 00:09:28.610
part of the open source frameworks.

136
00:09:28.610 --> 00:09:30.594
So if you keep around the cache,

137
00:09:30.594 --> 00:09:34.278
you will get incremental builds
as part of running Gatsby.

138
00:09:34.278 --> 00:09:36.623
So later we'll deploy it to nalify and

139
00:09:36.623 --> 00:09:41.095
we'll I'll show you how we keep
the builds or the cache between builds so

140
00:09:41.095 --> 00:09:44.567
that you get incremental
builds on whatever platform.

141
00:09:44.567 --> 00:09:47.348
If you keep your cache
folder it's gonna work,

142
00:09:47.348 --> 00:09:50.208
that's not like a Gatsby
cloud specific thing.

143
00:09:50.208 --> 00:09:57.523
You can do things like pulling
delta changes from your CMS and

144
00:09:57.523 --> 00:10:01.975
trying to merge all of that in, but,

145
00:10:03.314 --> 00:10:08.393
There's a reason that people say that
there are two hard problems in computing,

146
00:10:08.393 --> 00:10:10.419
and that one of them is caching.

147
00:10:10.419 --> 00:10:15.469
And I think that trying
to manage your own cache

148
00:10:15.469 --> 00:10:20.013
is going to be not worth
it in the long run.

149
00:10:20.013 --> 00:10:22.906
You will end up causing yourself problems,

150
00:10:22.906 --> 00:10:25.963
you'll do something
clever with your cache.

151
00:10:25.963 --> 00:10:28.585
It'll go wrong, it'll get out of sync,
your site will go down,

152
00:10:28.585 --> 00:10:30.171
you'll get paged on a Saturday night.

153
00:10:30.171 --> 00:10:33.376
Like it's anytime I've seen somebody
build a clever workaround for

154
00:10:33.376 --> 00:10:36.095
making Gatsby faster,
they've ended up regretting it.

155
00:10:36.095 --> 00:10:43.149
So instead, Look at,
what data do we actually need?

156
00:10:43.149 --> 00:10:46.334
What data are we querying for
that we're not using?

157
00:10:46.334 --> 00:10:50.565
Are images being served
at 10 megabytes each, and

158
00:10:50.565 --> 00:10:53.941
Gatsby is having to parse all those down?

159
00:10:53.941 --> 00:10:56.154
Are we holding on to the cache
folder in between builds?

160
00:10:56.154 --> 00:10:57.838
Like how often are we
running Gatsby clean?

161
00:10:57.838 --> 00:10:59.773
How often are we deleting the cache?

162
00:10:59.773 --> 00:11:02.830
Because each of those things is
gonna slow down our build times.

163
00:11:02.830 --> 00:11:06.614
A lot of people I've seen have this
bad habit of running as part of

164
00:11:06.614 --> 00:11:09.570
their build Gatsby clean
end to end Gatsby build?

165
00:11:09.570 --> 00:11:10.611
Please don't do that.

166
00:11:10.611 --> 00:11:13.887
You're guaranteeing
the slowest possible build,

167
00:11:13.887 --> 00:11:18.217
and Gatsby works really hard to to not,
like to make that cache work.

168
00:11:18.217 --> 00:11:25.587
So there's a lot of things that if you
just, Look at what you're feeding Gatsby,

169
00:11:25.587 --> 00:11:30.399
you can make it fast without having
to resort to complicated workarounds.

170
00:11:30.399 --> 00:11:33.438
And if you find yourself resorting
to complicated workarounds,

171
00:11:33.438 --> 00:11:35.877
it may be worth considering
a different build tool.

172
00:11:35.877 --> 00:11:42.829
Because ultimately, it's if the majority
of your work is fighting your build tool,

173
00:11:42.829 --> 00:11:46.797
then you're probably not
using the right tool.

174
00:11:46.797 --> 00:11:51.212
That's a little rantier than I intended
to be, but I've definitely seen

175
00:11:51.212 --> 00:11:55.269
a lot of people cause themselves a lot
of pain by digging into this and

176
00:11:55.269 --> 00:11:58.491
thinking they can outsmart
Gatsby's build system.

177
00:11:58.491 --> 00:12:02.289
Trust me, it's way too complicated,
you're not gonna outsmart it,

178
00:12:02.289 --> 00:12:03.880
you're just gonna break it.

179
00:12:03.880 --> 00:12:07.998
If you are getting inconsistently like
something's not working, you can do

180
00:12:07.998 --> 00:12:12.577
a comparison between the code that's on
the progress branch, that's been pushed.

181
00:12:12.577 --> 00:12:17.299
Let me make sure it's up to date,
yeah, everything that we've done so

182
00:12:17.299 --> 00:12:18.487
far is pushed up.

183
00:12:18.487 --> 00:12:23.616
So check that, you can pull the latest
changes to make sure that the code

184
00:12:23.616 --> 00:12:28.332
that you've written matches
the code that we've been writing.

185
00:12:28.332 --> 00:12:32.678
Otherwise, yeah, the front matter
stuff is kind of built in.

186
00:12:32.678 --> 00:12:37.088
There's not a lot if you've
got these fence code blocks,

187
00:12:37.088 --> 00:12:41.149
there's not a lot that we can
do to make that not work.

188
00:12:41.149 --> 00:12:43.075
So if it's written like this,

189
00:12:43.075 --> 00:12:47.607
it should be getting picked up,assuming
the config in here is the same.

190
00:12:47.607 --> 00:12:50.424
How can you access the variables
from the MDX file?

191
00:12:50.424 --> 00:12:54.792
We're gonna get into that,
I will show you in a couple steps,

192
00:12:54.792 --> 00:12:59.504
we'll get some some of the props,
and work with them a little bit.

193
00:12:59.504 --> 00:13:03.508
The short version is that it
that you can just access props,

194
00:13:03.508 --> 00:13:07.593
the way that you would in a react
component inside of MDX, but

195
00:13:07.593 --> 00:13:11.700
we'll actually walk through
building that in a little bit.

