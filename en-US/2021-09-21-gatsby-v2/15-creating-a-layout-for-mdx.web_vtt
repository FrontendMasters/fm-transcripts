WEBVTT

1
00:00:00.480 --> 00:00:06.160
So let's do a new component in the
components folder called post layout.js.

2
00:00:06.160 --> 00:00:11.460
In this post layout, let's import
everything is react from react.

3
00:00:12.550 --> 00:00:17.085
Then we're gonna import link from
Gatsby because I wanna add the ability

4
00:00:17.085 --> 00:00:22.440
to add a link at the bottom of every post
taking you back to the full listing.

5
00:00:22.440 --> 00:00:24.371
And then we're going to import our layout.

6
00:00:27.147 --> 00:00:32.591
And this is so that we can grab
the content of the MDX post and

7
00:00:32.591 --> 00:00:38.910
then I want to insert the details
from the MDX post into our layout.

8
00:00:38.910 --> 00:00:42.756
So the way that this will work is
we're gonna export a default function

9
00:00:42.756 --> 00:00:44.640
called post layout.

10
00:00:44.640 --> 00:00:46.622
And that is gonna get the children,

11
00:00:46.622 --> 00:00:50.250
which is just anything inside
of it like the layout would.

12
00:00:50.250 --> 00:00:55.730
And then, we're gonna do something
from Gatsby called page context.

13
00:00:55.730 --> 00:01:00.910
So before I do anything else,
let's just show what this looks like.

14
00:01:00.910 --> 00:01:05.127
So I'm going to, return the layout, and

15
00:01:05.127 --> 00:01:10.318
inside the layout we're
gonna send the children.

16
00:01:10.318 --> 00:01:15.837
But then I also want to just
stringify the page context.

17
00:01:15.837 --> 00:01:20.720
This is one of my
favorite debugging tools.

18
00:01:20.720 --> 00:01:23.780
When in doubt, wait gotta wrap this.

19
00:01:23.780 --> 00:01:24.480
No that should be fine.

20
00:01:27.070 --> 00:01:28.414
What have I done?

21
00:01:28.414 --> 00:01:32.565
I'm missing a closing parentheses
is why that's unhappy, okay.

22
00:01:32.565 --> 00:01:37.260
So one of my favorite debugging tools
when I'm trying to figure out what's

23
00:01:37.260 --> 00:01:41.960
going on in Gatsby is to just grab
whatever comes out and enlist it.

24
00:01:41.960 --> 00:01:46.271
So if you wanna see everything actually
this is probably even better let's just do

25
00:01:46.271 --> 00:01:48.770
everything that's not children.

26
00:01:48.770 --> 00:01:51.780
Let's stringify it underneath the post.

27
00:01:51.780 --> 00:01:56.780
So now that we've got this, we need to
actually configure Gatsby to use it.

28
00:01:56.780 --> 00:02:01.199
So down in here where we have the layout,
let's just change that over to post

29
00:02:01.199 --> 00:02:04.320
layout, and
it's gonna tell us it needs to restart.

30
00:02:05.600 --> 00:02:11.780
Okay, so that's restarted, and
now we get a whole bunch of stuff.

31
00:02:11.780 --> 00:02:15.300
So this is what Gatsby's actually
passing in to any given page.

32
00:02:15.300 --> 00:02:19.240
And because this is markdown,
we get a little bit extra, or MDX I mean.

33
00:02:19.240 --> 00:02:20.570
So first we get the path.

34
00:02:20.570 --> 00:02:23.040
Okay great we knew the path
we're happy about that.

35
00:02:23.040 --> 00:02:25.007
So in here we've got the location, and

36
00:02:25.007 --> 00:02:27.400
that gives us all the things
that you would get.

37
00:02:27.400 --> 00:02:29.800
This is actually coming
out of Reach Router.

38
00:02:29.800 --> 00:02:34.360
So it's information about where we are in
the state of navigation in our app.

39
00:02:34.360 --> 00:02:36.500
Then we get down into some things that
we don't really need to worry about.

40
00:02:36.500 --> 00:02:41.186
These are Gatsby things like our page
resources, where the what the JSON is for

41
00:02:41.186 --> 00:02:41.830
the page.

42
00:02:41.830 --> 00:02:46.193
So this is if you wanna see how
much data is gonna get sent down

43
00:02:46.193 --> 00:02:48.127
with your y Gatsby files.

44
00:02:48.127 --> 00:02:52.479
This is why it's good to validate that
you're not sending a bunch of data you

45
00:02:52.479 --> 00:02:53.774
won't actually use.

46
00:02:53.774 --> 00:02:57.374
Information about the page like this
is what the files will be called,

47
00:02:57.374 --> 00:02:59.030
what the web pack hash is, etc.

48
00:03:00.380 --> 00:03:03.493
Static query results so we're we're
loading remember we're using the header

49
00:03:03.493 --> 00:03:05.710
where we've got this query for the title.

50
00:03:05.710 --> 00:03:11.054
And then this is the SEO component that's
got the query for the site metadata.

51
00:03:11.054 --> 00:03:15.107
The URI, and
finally down here we've got page context.

52
00:03:15.107 --> 00:03:19.602
And so what page context is,
is when you create a page in Gatsby,

53
00:03:19.602 --> 00:03:24.518
there's all the way at the bottom of
the stack where there's a node API

54
00:03:24.518 --> 00:03:27.211
that Gatsby uses called create page.

55
00:03:27.211 --> 00:03:31.152
And you pass in a path, you pass in a file
that you wanna use as the template,

56
00:03:31.152 --> 00:03:35.680
and then you can pass in something
called context, which is just an object.

57
00:03:35.680 --> 00:03:40.110
And whatever you pass in here gets
provided in the page context object.

58
00:03:40.110 --> 00:03:43.359
And in the case of MDX,
whatever you put in the front matter,

59
00:03:43.359 --> 00:03:48.030
gets put into the context object when
the page gets created through Gatsby.

60
00:03:48.030 --> 00:03:52.897
So that means that in our layout,
we can access this page context object,

61
00:03:52.897 --> 00:03:54.544
and pull out the title and

62
00:03:54.544 --> 00:03:59.940
description and date if we wanted to
then feed into our SEO component.

63
00:03:59.940 --> 00:04:01.450
So let's actually do that here.

64
00:04:02.710 --> 00:04:04.900
We'll go into our post layout.

65
00:04:04.900 --> 00:04:08.180
And instead of the props,
we're gonna get the page context.

66
00:04:09.410 --> 00:04:11.943
And we don't need to
distructure this anymore.

67
00:04:11.943 --> 00:04:18.320
So instead what we're gonna do,
is we're going to get out the title and

68
00:04:18.320 --> 00:04:22.691
description, from page
context front matter.

69
00:04:22.691 --> 00:04:28.692
And down here in the layout,
we're gonna set the title to be title,

70
00:04:28.692 --> 00:04:32.290
and the description to be description.

71
00:04:34.310 --> 00:04:37.980
Okay, so having done that,
we can add our link back.

72
00:04:37.980 --> 00:04:44.060
So let's add a link to and we're gonna
do our blog role on the homepage.

73
00:04:44.060 --> 00:04:46.758
Then I'm gonna use a left
arrow HTML entity so

74
00:04:46.758 --> 00:04:49.180
that we can point back and just say back.

75
00:04:51.200 --> 00:04:56.370
So what this gives us is now,
we actually get the things that we want.

76
00:04:56.370 --> 00:05:00.570
There's the post title and
if we look in here in our description.

77
00:05:00.570 --> 00:05:02.130
If we can find it where to go.

78
00:05:03.550 --> 00:05:07.560
Here's our description, and it shows
us the actual description we wrote.

79
00:05:07.560 --> 00:05:11.857
And if I go back,
let's go to the first blog post.

80
00:05:14.151 --> 00:05:15.370
We can see the same thing.

81
00:05:15.370 --> 00:05:19.255
So here is our description,
this is my first MDX blog post,

82
00:05:19.255 --> 00:05:22.370
the title is updated to say my first blog.

83
00:05:22.370 --> 00:05:26.906
So now that post layout is actually
using the front matter data to

84
00:05:26.906 --> 00:05:30.040
update the search engine values.

85
00:05:30.040 --> 00:05:33.433
So with pretty minimal changes we're
able to kinda wrap our layout and

86
00:05:33.433 --> 00:05:36.210
just do the little bit of
abstraction that we need.

87
00:05:36.210 --> 00:05:38.201
So it'll still use our layout and

88
00:05:38.201 --> 00:05:42.465
if we in the future wanna add more fields
to it like we wanna add the date or

89
00:05:42.465 --> 00:05:47.140
we wanna add the Twitter author or
something like that, we can do that.

90
00:05:47.140 --> 00:05:50.162
We would just need to modify
our SEO component and

91
00:05:50.162 --> 00:05:54.370
then add the frontmatter fields and
just pull them out here.

92
00:05:54.370 --> 00:05:58.280
So if we wanted to add a new one we
can pull out like the author field.

93
00:05:58.280 --> 00:06:01.263
And we could we could use that then.

94
00:06:01.263 --> 00:06:07.312
&gt;&gt; What's the max number of blog posts
that Gatsby can handle without tears?

95
00:06:07.312 --> 00:06:13.279
&gt;&gt; [LAUGH], okay so the thing about
Gatsby is that it's not about numbers,

96
00:06:13.279 --> 00:06:17.471
it's about the amount of
work that is being done.

97
00:06:17.471 --> 00:06:22.989
So if you take Gatsby, and you feed it
a bunch of files that have one word and

98
00:06:22.989 --> 00:06:26.994
no metadata and no images,
it can handle thousands,

99
00:06:26.994 --> 00:06:31.192
tens of thousands potentially
hundreds of thousands.

100
00:06:31.192 --> 00:06:35.361
But as you start to add in
images to be optimized,

101
00:06:35.361 --> 00:06:39.939
if you feed it raw images
director from your camera and

102
00:06:39.939 --> 00:06:44.517
every images is 50 megabytes and
has to be resized,

103
00:06:44.517 --> 00:06:47.795
it's gonna choke on dozens of pages.

104
00:06:47.795 --> 00:06:49.790
It'll take forever to build the site.

105
00:06:49.790 --> 00:06:55.090
So it's very much a matter of what
are you asking each page to do?

106
00:06:55.090 --> 00:06:59.843
And how much work does it have to do to
get from the raw material to the end page

107
00:06:59.843 --> 00:07:01.980
that you're looking for?

108
00:07:01.980 --> 00:07:06.628
A good example is, if I'm pulling
data from a third party API, and

109
00:07:06.628 --> 00:07:10.446
that API has a rate limit that
requires us to only ask for

110
00:07:10.446 --> 00:07:16.210
10 posts per second before it would
like block us from from asking for more.

111
00:07:16.210 --> 00:07:18.160
And we asked for 1000 posts.

112
00:07:18.160 --> 00:07:22.540
We've just guaranteed 100 seconds
of data loading, for Gatsby to run.

113
00:07:22.540 --> 00:07:23.710
Now that's not Gatsby's fault.

114
00:07:23.710 --> 00:07:26.770
That's a limitation of the API.

115
00:07:26.770 --> 00:07:31.005
Where Gatsby does struggle,
is when you put tons and tons and

116
00:07:31.005 --> 00:07:33.330
tons of images in there.

117
00:07:33.330 --> 00:07:35.920
It will try to parse all of those.

118
00:07:35.920 --> 00:07:37.961
And it's pretty good at caching things so

119
00:07:37.961 --> 00:07:40.245
that it doesn't do work
more than it needs to.

120
00:07:40.245 --> 00:07:45.164
But it will it just a problem
that scales not quite linearly,

121
00:07:45.164 --> 00:07:50.564
I wouldn't call it a linear scale,
but it's a challenge in that,

122
00:07:50.564 --> 00:07:55.194
as you are adding more work
to the Gatsby build pipeline,

123
00:07:55.194 --> 00:07:59.547
some types of things are gonna
balloon very quickly.

124
00:07:59.547 --> 00:08:03.370
Like very large images
it'll slow down fast.

125
00:08:04.570 --> 00:08:08.790
Number of text files, it takes a long time
for that to start to bottleneck that.

126
00:08:08.790 --> 00:08:09.330
Back.

127
00:08:09.330 --> 00:08:13.504
So it's a little bit less about like hard
numbers and a lot more about the type and

128
00:08:13.504 --> 00:08:17.570
amount of work that you're asking Gatsby
to do as part of that build process.

129
00:08:17.570 --> 00:08:19.591
I know that's a very squishy answer, but

130
00:08:19.591 --> 00:08:22.090
unfortunately that's the best
thing I [LAUGH] can.

131
00:08:23.300 --> 00:08:29.733
&gt;&gt; Someone commented that you could
potentially host the data somewhere and

132
00:08:29.733 --> 00:08:33.883
then Gatsby can import
the data at build time and

133
00:08:33.883 --> 00:08:40.005
with web hooks trigger builds
an incremental builds on Gatsby cloud,

134
00:08:40.005 --> 00:08:43.170
which rebuilds what's changed.

135
00:08:43.170 --> 00:08:46.155
I don't know anything about that,
but maybe you do.

136
00:08:46.155 --> 00:08:51.466
&gt;&gt; If you wanna get really clever,
here's again where I think if you find

137
00:08:51.466 --> 00:08:57.065
yourself working that hard to make
Gatsby build maybe don't use Gatsby.

138
00:08:57.065 --> 00:09:01.161
[LAUGH] It's one of those things where if
you find the vast majority of the work

139
00:09:01.161 --> 00:09:03.785
you're doing is getting
the tool to cooperate,

140
00:09:03.785 --> 00:09:06.470
you're probably using the wrong tool.

141
00:09:06.470 --> 00:09:10.499
I think that you can,
you could pull the data down and

142
00:09:10.499 --> 00:09:16.650
have it in a JSON file that you
refresh periodically with web hooks.

143
00:09:16.650 --> 00:09:20.148
And you can check whether or not any data
changed in a web hook to see whether or

144
00:09:20.148 --> 00:09:22.310
not it's time to rebuild the site.

145
00:09:22.310 --> 00:09:25.226
And there are ways to do that
that like Gatsby version three,

146
00:09:25.226 --> 00:09:28.690
introduced incremental builds as
part of the open source frameworks.

147
00:09:28.690 --> 00:09:30.614
So if you keep around the cache,

148
00:09:30.614 --> 00:09:34.190
you will get incremental builds
as part of running Gatsby.

149
00:09:34.190 --> 00:09:36.604
So later we'll deploy it to natlaphi and

150
00:09:36.604 --> 00:09:41.077
we'll I'll show you how we keep the builds
or the cache between builds, so

151
00:09:41.077 --> 00:09:44.420
that you get incremental
builds on whatever platform.

152
00:09:44.420 --> 00:09:45.763
If you keep your cache
folder it's gonna work.

153
00:09:45.763 --> 00:09:48.498
That's not like a Gatsby
cloud specific thing.

154
00:09:48.498 --> 00:09:53.650
You can do things like,
pulling Delta changes

155
00:09:53.650 --> 00:09:59.340
from your CNS and and
trying to merge all of that in.

156
00:09:59.340 --> 00:10:04.671
But, there's a reason that
people say that there are two

157
00:10:04.671 --> 00:10:10.237
hard problems in computing and
that one of them is caching.

158
00:10:10.237 --> 00:10:15.444
And I think that,
trying to manage your own cache,

159
00:10:15.444 --> 00:10:19.691
is going to be not worth
it in the long run.

160
00:10:19.691 --> 00:10:22.455
You will end up causing yourself problems,

161
00:10:22.455 --> 00:10:25.860
you'll do something
clever with your cache.

162
00:10:25.860 --> 00:10:28.458
It'll go wrong, it'll get out of sync,
your site will go down,

163
00:10:28.458 --> 00:10:30.039
you'll get paged on a Saturday night.

164
00:10:30.039 --> 00:10:32.970
Anytime I've seen somebody
build a clever workaround for

165
00:10:32.970 --> 00:10:35.796
making Gatsby faster they've
ended up regretting it.

166
00:10:35.796 --> 00:10:37.202
So instead.

167
00:10:40.215 --> 00:10:43.290
Look at what data do we actually need?

168
00:10:43.290 --> 00:10:45.910
What data are we querying for
that we're not using?

169
00:10:45.910 --> 00:10:49.399
Are images being served
at 10 megabytes each and

170
00:10:49.399 --> 00:10:52.315
Gatsby is having to parse all those down?

171
00:10:52.315 --> 00:10:56.300
Are we holding on to the cache
folder in between builds?

172
00:10:56.300 --> 00:10:58.010
How often are we running Gatsby clean?

173
00:10:58.010 --> 00:10:59.890
How often are we deleting the cache?

174
00:10:59.890 --> 00:11:02.690
Because each of those things is
gonna slow down our build times.

175
00:11:02.690 --> 00:11:07.170
A lot of people I've seen have this bad
habit of running as part of their build

176
00:11:07.170 --> 00:11:09.660
Gatsby clean and and Gatsby build.

177
00:11:09.660 --> 00:11:10.730
Please don't do that.

178
00:11:10.730 --> 00:11:13.630
You're guaranteeing
the slowest possible build.

179
00:11:13.630 --> 00:11:18.130
And Gatsby works really hard
to make that cache work.

180
00:11:18.130 --> 00:11:24.366
So there's a lot of things that if you
just look at what you're feeding Gatsby,

181
00:11:24.366 --> 00:11:30.250
you can make it fast without having
to resort to complicated workarounds.

182
00:11:30.250 --> 00:11:34.983
And if you find yourself resorting to
complicated workarounds, It may be worth

183
00:11:34.983 --> 00:11:39.786
considering a different build tool because
ultimately, if the majority of your

184
00:11:39.786 --> 00:11:44.610
work is fighting your build tool then
you're probably not using the right tool.

185
00:11:46.200 --> 00:11:50.886
Yeah that's a little rantier than I
intended to be but, I've definitely seen

186
00:11:50.886 --> 00:11:54.933
a lot of people cause themselves a lot
of pain by digging into this and

187
00:11:54.933 --> 00:11:58.470
thinking they can outsmart
Gatsby's build system.

188
00:11:58.470 --> 00:12:00.580
Trust me, it's way too complicated.

189
00:12:00.580 --> 00:12:02.350
You're not gonna outsmart it,
you're just gonna break it.

190
00:12:03.850 --> 00:12:07.240
If you are getting inconsistently
like something's not working.

191
00:12:07.240 --> 00:12:11.280
You can do a comparison between
the code that's on the progress branch.

192
00:12:11.280 --> 00:12:12.470
That's been pushed.

193
00:12:12.470 --> 00:12:13.629
Only me make sure it's up to date.

194
00:12:15.140 --> 00:12:19.021
Yeah everything that we've done so
far is pushed up, so

195
00:12:19.021 --> 00:12:23.975
check that you can pull the latest
changes to make sure that the code that

196
00:12:23.975 --> 00:12:28.202
you've written matches the code
that we've been writing.

197
00:12:28.202 --> 00:12:32.730
Otherwise yeah,
the front matter stuff is kinda built in.

198
00:12:32.730 --> 00:12:36.225
There's not a lot if you've
got these fence code blocks,

199
00:12:36.225 --> 00:12:39.450
there's not a lot that we can
do to make that not work.

200
00:12:41.070 --> 00:12:44.910
So if it's written like this,
it should be getting picked up.

201
00:12:44.910 --> 00:12:47.700
Assuming the config in here is the same.

202
00:12:47.700 --> 00:12:50.450
How can you access the variables
from the MDX file?

203
00:12:50.450 --> 00:12:55.148
We're gonna get into that,
I will show you in a couple of steps,

204
00:12:55.148 --> 00:12:59.500
we'll get some of the props and
work with them a little bit.

205
00:12:59.500 --> 00:13:03.171
The short version is that
you can just access props,

206
00:13:03.171 --> 00:13:07.426
the way that you would in a react
component inside of MDX, but

207
00:13:07.426 --> 00:13:11.700
we'll actually walk through
building that in a little bit.

