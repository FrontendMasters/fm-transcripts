WEBVTT

1
00:00:00.168 --> 00:00:07.120
Next, we want to actually
style things up a little bit.

2
00:00:07.120 --> 00:00:12.190
We don't have, this header is kinda janky,
just everything smashed on top of itself.

3
00:00:12.190 --> 00:00:15.560
We want that to look like
an actual header bar.

4
00:00:15.560 --> 00:00:19.070
We want the content to not be smashed
against the side of the page.

5
00:00:20.100 --> 00:00:22.910
So let's style our layout.

6
00:00:22.910 --> 00:00:24.742
And for the layout styles,

7
00:00:24.742 --> 00:00:29.680
I want to be able to write the styles
without fear of collision later on.

8
00:00:29.680 --> 00:00:34.738
So one of the hot topics in CSS,
and one of the big frustrations

9
00:00:34.738 --> 00:00:38.725
that a lot of people run
into when doing styling,

10
00:00:38.725 --> 00:00:43.199
is how do you avoid really
complex naming structures or

11
00:00:43.199 --> 00:00:47.088
just a lot of rules in
the way that you write CSS,

12
00:00:47.088 --> 00:00:54.080
without running into this problem where
the cascade in CSS becomes a big footgun.

13
00:00:54.080 --> 00:00:55.500
We don't want it to be a trap, right?

14
00:00:55.500 --> 00:00:58.471
We want it to be something
where when you write styles,

15
00:00:58.471 --> 00:01:02.540
you can take advantage of the CSS cascade,
you can just write CSS.

16
00:01:02.540 --> 00:01:04.410
And it's it's very powerful.

17
00:01:04.410 --> 00:01:06.100
It gives you a lot of opportunities.

18
00:01:06.100 --> 00:01:11.045
But it doesn't become cumbersome, right?

19
00:01:11.045 --> 00:01:14.360
We don't want CSS to be,
CSS should be fun.

20
00:01:14.360 --> 00:01:20.620
And I think that by using CSS with
a few guardrails, it can be funny.

21
00:01:20.620 --> 00:01:24.756
It doesn't need to be this thing that
is terrifying, and stressful, and

22
00:01:24.756 --> 00:01:27.239
hard to scale, and all this stuff, right?

23
00:01:27.239 --> 00:01:31.120
And so, that's why in this workshop,
we're actually just going to write CSS.

24
00:01:31.120 --> 00:01:32.740
There are a million options out there.

25
00:01:32.740 --> 00:01:36.793
You could introduce CSS and
JS one of the tools like emotion.

26
00:01:36.793 --> 00:01:40.270
You could introduce tailwind or chakra.

27
00:01:40.270 --> 00:01:43.610
Those are all good solutions and if that's
what your team wants to do, 100% do it.

28
00:01:43.610 --> 00:01:45.990
They're great ways to handle styles.

29
00:01:45.990 --> 00:01:49.650
I like a, less is more kind of approach.

30
00:01:49.650 --> 00:01:55.008
So I'm gonna be using CSS modules,
which is not exactly a CSS spec,

31
00:01:55.008 --> 00:02:01.039
but it allows us to not add any additional
libraries for writing our styles.

32
00:02:01.039 --> 00:02:04.090
I also really like CSS modules,
because they're more or

33
00:02:04.090 --> 00:02:06.790
less built into all the frameworks now.

34
00:02:06.790 --> 00:02:11.830
So you can use CSS modules with
Gatsby with, Next with knucks.

35
00:02:11.830 --> 00:02:14.902
There's a bunch of different
frameworks out there now,

36
00:02:14.902 --> 00:02:18.232
that will just give you out of
the box support for CSS modules.

37
00:02:18.232 --> 00:02:22.089
Which means you get to write CSS,
you don't have to learn Less or

38
00:02:22.089 --> 00:02:26.930
Sass or Stylus or Tailwind or Chakra or
Emotion or any of the CSS and JS stuff.

39
00:02:26.930 --> 00:02:30.116
You can just write the CSS you already
know, imported as a module, and

40
00:02:30.116 --> 00:02:31.070
it just works.

41
00:02:31.070 --> 00:02:33.050
So let's do that.

42
00:02:33.050 --> 00:02:34.410
I'll show you how it works.

43
00:02:34.410 --> 00:02:38.330
So we created this one as global.css.

44
00:02:38.330 --> 00:02:44.207
For a scoped CSS or CSS module,
we just have to do module.css.

45
00:02:44.207 --> 00:02:46.552
So by adding this layout.modulecss,

46
00:02:46.552 --> 00:02:51.330
I have now indicated to Gatsby that
I want to use this as a CSS module.

47
00:02:51.330 --> 00:02:55.449
So inside of it,
I can just start writing css.

48
00:02:55.449 --> 00:02:57.670
So I wanna have some styles for
the header.

49
00:02:57.670 --> 00:03:01.794
So I'm gonna use that black color for
the background and

50
00:03:01.794 --> 00:03:07.329
then I want the regular color needs to
be high contrast for accessibility.

51
00:03:07.329 --> 00:03:08.720
So we'll make it white.

52
00:03:08.720 --> 00:03:13.985
I want to use display flex ,so that
I can get the header link ,like

53
00:03:13.985 --> 00:03:19.080
the home link to be on one side and
the nav to be on the other side.

54
00:03:19.080 --> 00:03:20.380
I want them to be spread.

55
00:03:20.380 --> 00:03:25.340
So I'm gonna use display flex, and
then justify content space between.

56
00:03:27.200 --> 00:03:31.424
Which the way that I remember this is
every time I look at the CSS role, I think

57
00:03:31.424 --> 00:03:36.110
about that Dave Matthews song, the space
between and it gets stuck in my head.

58
00:03:36.110 --> 00:03:37.650
Now it gets to get stuck in your head too.

59
00:03:38.740 --> 00:03:43.927
So then we're gonna add a little
bit of padding around the header.

60
00:03:43.927 --> 00:03:48.198
About 1rem if you're
not familiar with rems,

61
00:03:48.198 --> 00:03:51.735
rems are the the original, font size.

62
00:03:51.735 --> 00:03:56.375
So when we look at the global css and
I set font size of 18 here,

63
00:03:56.375 --> 00:03:59.629
now I've basically said 1rem is 18 pix.

64
00:03:59.629 --> 00:04:04.364
And the reason I use rems is that
I can now make my whole layout

65
00:04:04.364 --> 00:04:07.027
relative to that base font size.

66
00:04:07.027 --> 00:04:09.670
So it's a nice little
pattern makes my life easier.

67
00:04:09.670 --> 00:04:12.690
And you don't have to stress about it now.

68
00:04:12.690 --> 00:04:17.182
So inside of this I'm gonna use
just regular old CSS selectors.

69
00:04:17.182 --> 00:04:19.730
I wanna get any link inside of the header.

70
00:04:19.730 --> 00:04:23.880
And I want to make it whatever
the color of the header is.

71
00:04:23.880 --> 00:04:27.089
I also want to make it inline-block.

72
00:04:28.890 --> 00:04:31.910
So that we can apply
some padding around it.

73
00:04:31.910 --> 00:04:36.147
And so, we're gonna set
the padding to be 0.5 rem, and

74
00:04:36.147 --> 00:04:39.102
then I wanna take off the the underline.

75
00:04:39.102 --> 00:04:43.406
But because I just took off
the underline that would cause

76
00:04:43.406 --> 00:04:47.900
an accessibility issue,
if I didn't add something back.

77
00:04:47.900 --> 00:04:52.800
So we're gonna go to the focus,
and hover states.

78
00:04:52.800 --> 00:04:56.535
And we're going to say
that when it's hovered,

79
00:04:56.535 --> 00:05:02.113
we're gonna set the background to be
a white, and the color to be black.

80
00:05:02.113 --> 00:05:03.909
All right.

81
00:05:03.909 --> 00:05:07.894
And then the last thing that I wanna do
here is I just wanna set a little bit of

82
00:05:07.894 --> 00:05:09.740
space around the content.

83
00:05:09.740 --> 00:05:11.270
So we're gonna create
a class called content.

84
00:05:11.270 --> 00:05:16.341
This will go on our main tag, and I want
to give it a margin of 3rem on the top and

85
00:05:16.341 --> 00:05:20.261
bottom and auto on the left and
right, that'll center it.

86
00:05:20.261 --> 00:05:22.568
And then I wanna put a max-width of,

87
00:05:22.568 --> 00:05:26.750
we're gonna use a little trick that
I like of using the character.

88
00:05:27.810 --> 00:05:33.522
So what this means is, when you look at
the legibility of text, one of the things

89
00:05:33.522 --> 00:05:39.410
that we found is that a line length has
a bigger impact than the actual width.

90
00:05:39.410 --> 00:05:42.193
So depending on the number
of characters per line,

91
00:05:42.193 --> 00:05:45.260
you actually wanna adjust
the width of the screen.

92
00:05:45.260 --> 00:05:49.945
So 54 characters wide it gives
you a pretty legible reading for

93
00:05:49.945 --> 00:05:51.340
tracking of text.

94
00:05:52.920 --> 00:05:54.010
You can adjust this.

95
00:05:54.010 --> 00:05:58.088
There's really good research you
can read on the way that works, but

96
00:05:58.088 --> 00:06:02.513
I like this in CSS is kind of setting
that whatever we do with the font sizes,

97
00:06:02.513 --> 00:06:07.390
let's make sure that our line length is
good, and adjust the width accordingly.

98
00:06:07.390 --> 00:06:12.070
So I think that's good enough.

99
00:06:12.070 --> 00:06:13.430
Let's stop there.

100
00:06:13.430 --> 00:06:17.332
So these are the styles that will
give us a header and content.

101
00:06:17.332 --> 00:06:23.123
But notice I use some pretty risky class
names here like .header, .content.

102
00:06:23.123 --> 00:06:28.052
As this codebase scales,
there's a near 100% chance that

103
00:06:28.052 --> 00:06:33.353
somebody else would create a .content
class unless we implemented

104
00:06:33.353 --> 00:06:37.817
some kind of naming scheme like bam or
something where you

105
00:06:37.817 --> 00:06:42.750
have to do like the component name__,
content_ whatever.

106
00:06:42.750 --> 00:06:47.150
There's these tricky things you have
to do to avoid naming collisions.

107
00:06:47.150 --> 00:06:52.536
But because we're using CSS modules,
we don't have to care about that.

108
00:06:52.536 --> 00:06:57.360
We can not worry about that and instead,
just write class names that we like.

109
00:06:57.360 --> 00:07:01.763
Because the way that we're actually gonna
use this is we are going to import it

110
00:07:01.763 --> 00:07:04.070
as if it was a JavaScript package.

111
00:07:04.070 --> 00:07:07.346
So, down here in our our layout,

112
00:07:07.346 --> 00:07:12.910
I'm gonna import header and
content from the module.

113
00:07:12.910 --> 00:07:17.915
So from styles and layout.module.css,

114
00:07:17.915 --> 00:07:23.480
they were just JavaScript classes or
objects.

115
00:07:23.480 --> 00:07:26.290
And then I can use these as class names.

116
00:07:26.290 --> 00:07:30.300
So on my header,
I'm gonna set a class name of header.

117
00:07:30.300 --> 00:07:35.893
And on my main, I'm gonna set
a class name of content, all right?

118
00:07:35.893 --> 00:07:41.970
And once I have saved this, Look at that.

119
00:07:41.970 --> 00:07:43.500
We've got ourselves a site.

120
00:07:43.500 --> 00:07:48.472
But here's what's really cool about these,
let me make this a little bit bigger so

121
00:07:48.472 --> 00:07:50.473
we can see what's going on here.

122
00:07:50.473 --> 00:07:57.790
When I select this header, note that
it's not using header as the class.

123
00:07:57.790 --> 00:08:01.320
It automatically generated
all of that scoping for me.

124
00:08:01.320 --> 00:08:05.925
So that these styles are actually going

125
00:08:05.925 --> 00:08:10.265
to correctly respect inheritance.

126
00:08:10.265 --> 00:08:12.521
Now, there're some things that I
can do to make this hard on myself.

127
00:08:12.521 --> 00:08:20.275
I targeted a every a inside of
a header without any restrictions.

128
00:08:20.275 --> 00:08:24.657
So, if we add a nav component,
and had a nav.module.css

129
00:08:24.657 --> 00:08:29.220
that had its own link styles,
I can still get collisions.

130
00:08:29.220 --> 00:08:31.570
So you can still make this hard.

131
00:08:31.570 --> 00:08:36.056
You can still, there are things
that you need to think about.

132
00:08:36.056 --> 00:08:40.848
I chose not to worry about that
because this site is not gonna grow

133
00:08:40.848 --> 00:08:44.890
beyond the couple of
pages we're making here.

134
00:08:44.890 --> 00:08:47.170
But it's a consideration.

135
00:08:47.170 --> 00:08:51.715
If you wanna be absolutely sure,
instead of using header a,

136
00:08:51.715 --> 00:08:57.161
we probably would have wanted to do
something like header link, right?

137
00:08:57.161 --> 00:08:57.960
It doesn't matter.

138
00:08:57.960 --> 00:08:59.620
You can do it whichever way you want.

139
00:08:59.620 --> 00:09:03.839
Using named classes for everything
is probably the safest solution.

140
00:09:03.839 --> 00:09:08.797
But if you are sure that your header is
gonna to always have links that should

141
00:09:08.797 --> 00:09:12.350
always look the same,
then you can make that choice.

