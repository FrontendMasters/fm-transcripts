[00:00:00]
>> We're gonna do some dynamic images, so let me just clean this up a little bit, get us down to an empty folder and let's start by opening up our about page. So on our about page, I wanna get an image by querying for it, so to do that, I'm gonna get GraphQL out of Gatsby.

[00:00:18]
Now note I'm not getting use static query, we're gonna introduce something called a page query. So page queries in Gatsby are like they were the original concept, but they introduce a little bit of a cognitive leap. And that's why I usually recommend if you can just do a static query and in this case, I'm intentionally not doing a static query despite the fact that we could to show how this works.

[00:00:49]
So let's export a new concept called query, and this tells Gatsby that this is a page query. So it's gonna go in and look for all of these, so that it can pull them out. And anything that we run as a query like this export const query is gonna get injected into our component as a data, right?

[00:01:12]
So this is a very cool concept, I love the idea what we're basically doing is saying, hey, Gatsby, build time. Take this query and convert the results of this query into a prop called data. That's just a JSON object with the GraphQL query that ran. Love it as a concept, it's very, very cool.

[00:01:31]
Significantly more complicated to learn than you static query, which effectively does the same thing, but doesn't require you to know that you have to export a query and that it's gonna show up as data. You get to just context data equals use static query. Page queries though, get access to that page context.

[00:01:52]
Which we're not gonna use in this particular example, but we'll use it in the shortly when we look at at third party data. So in this query, I want to load a one image, so I'm going to head over here, let's load a single image. So I'm gonna get file and I want to load a file, that is called cocktail.

[00:02:21]
And in that I want the child image sharp, and I want the Gatsby image data. And let's get the placeholder to be dominant color and again you can choose any of the normal ones will do dominant color. So if I run this, we will get back this Gatsby image data, we've looked at this, here's our fallback.

[00:02:47]
Here's our sources, we've got the WebP version, the JPEG version, so on. This is going to be my query, but I wanna change it will say, what's called like cocktail party or something and in here, I can paste that in. Now this is going to be the GraphQL query that gets executed.

[00:03:14]
And then we'll get date.file.child image.sharp Gatsby image data, right? Then I'm gonna get a another helper from Gatsby, so this one is gonna be called Gatsby image. And then we want another thing called get image, which is a utility function. And we're pulling that in from Gatsby plugin image.

[00:03:39]
Down here with this data, we're gonna actually grab this out, so we'll go right under the layout, and we're gonna say Gatsby image. And I want the image to be get image data.file. And we can set alt and it'll be like, a cocktail set inside an elaborate floral arrangement with dry ice mist curling around it.

[00:04:13]
This is a cocktail from a bar called bar chef in Toronto that is famous for effectively making diremous you can drink from and let's go take a look at what it looks like. So let me head over to the about page and look at that cocktail seating there, that's the thing that you drink.

[00:04:34]
And this is all the stuff that's around it, but these are the like, we were able to query for that image and load it in. And this is useful if for example, you were trying to show an image gallery. You could query all file and get the source instance name of images, and then grab out these child image sharp and kind of loop over them and show Gatsby images.

[00:04:57]
This is a bit of a contrived example just to show how you would do it, but the principle kind of holds the same, we would do this the same way. If we were getting a group of files, or if we wanted to load a few different images, or what we'll look out in the future is when we don't know what's gonna be on the page.

[00:05:18]
Because we're building like a template that gets reused for all of the data from a third party system. That's when these page queries really start to shine because I can't put if we look at the index. I can't put variables in here, if I tried to put a variable in here, it will tell me no.

[00:05:40]
So that's why you use static queries until you can't. As soon as you have some kind of variable data, dynamic data, you have to introduce page queries because they're the only ones that can support variables and any kind of dynamism. But this isn't so bad, we know how to query in GraphQL, we just get to click around until we find the thing we want in here, that's why this Explorer is so great.

[00:06:06]
The Gatsby image data thing if you're new to Gatsby three, but you remember what it was like to get images in Gatsby two and previously, Gatsby image data is incredible. What a great upgrade to the system, I think for me, this is the whole reason to upgrade to Gatsby three.

[00:06:23]
There's a lot of good things that happen, but this is night and day, it's so nice to us. So now that we've got this Gatsby image data, what if we wanna do that in our MDX files, what if we wanna pull in our MDX let's say we wanna put something into another blog here.

[00:06:43]
To do that we can actually do almost exactly the same thing, so I'm going to grab this import here. And then we can actually just I also need to import GraphQL. Oops, from Gatsby and then down here, we can export a const called query, and that's gonna be GraphQL.

[00:07:20]
Now, I already know what that query is gonna look like, it's gonna be identical to this one, so I'm gonna pull it over. But instead of this one, we're gonna call this one, the smashburgerQuery. And this one is going to query for the smashburger, right? So this all effectively the same and then we just do the same thing.

[00:07:43]
Let's get a Gatsby image in here we're gonna set the image to be get image and I can't remember who asked before, but about getting things from the file. When we do this, we've now added a data prop to our page. We don't have access to the props in a traditional way where we're not seeing a function with the props added, But MDX just adds props.

[00:08:13]
So whatever gets passed to this page will get stored into the props, so we can do props data file. And so that is exactly the same as we did on this about page. The only difference is instead of destructuring data, it's like you did this. So that's the only measurable difference is that in this one we can destructure and in MDX we can, so props data file.

[00:08:38]
Then as an alt, we'll say a smashburger on a plate with french fries in the foreground. And if we save that, head back to our homepage and navigate to another blog. Hey, look at that, we've got ourselves a smashburger right on the page queried from GraphQL. So the work Flow is very similar between MDX and using it in a standard react component.

[00:09:15]
There's a couple things to just know like that props is set here. That's if you've never seen that before that can be a little unintuitive but it's one of those things that I little bit of a curve with MDX. But things start to smooth out pretty quickly and suddenly you're just often humming I really love this ability to, write MDX or write mark down.

[00:09:40]
And then drop in a react component and then go right back to writing mark down and not have to. It would just not be fun if I had to, go in and I hate having to write paragraph tags every time, right, it's not hard. It's not much but it just adds up and it's just enough friction that I talked myself out of doing the work and it keeps me from publishing it keeps me from writing.

[00:10:02]
So I really like this idea of being able to only pull things in, when I actually need something special and otherwise, I'm just writing content, I really like that as a general flow. Okay, so that's a huge section, we've just learned a lot about images. And kind of digging into this going through it again we looked at how to pull in images statically.

[00:10:28]
When you pull in a static image, you are able to get it just by its path you wherever you are. You do a path to where that image is in your source code and Gatsby will do the rest. It's gonna drop all this stuff in and then you can figure it with the placeholders width and height.

[00:10:44]
There's a full API that you can use, we only looked at a few of the properties. Honestly, you probably won't need most of the properties most of the time there, this is usually gonna be enough. If you wanna use that in a MDX post, you can install that remark plug in and just drop in Markdown the way that you always would.

[00:11:04]
You can query using GraphQL, that shows up as a data prop any GraphQL queries export ID as a constant called query, we'll get added as data. At which point you can use this Gatsby image. And if you wanna do something in your MDX, it's the same flow, you export a const called query.

[00:11:26]
You're gonna get props that have data, and you can use that Gatsby image again.

