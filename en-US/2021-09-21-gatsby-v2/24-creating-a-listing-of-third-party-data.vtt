WEBVTT

1
00:00:00.280 --> 00:00:03.704
So the next thing that we wanna
do here is let's figure out how

2
00:00:03.704 --> 00:00:05.950
to get these on the homepage right?

3
00:00:05.950 --> 00:00:10.672
Let's make a list of sites, or of recent
episodes now they're over 200, so

4
00:00:10.672 --> 00:00:13.080
we probably don't wanna show them all.

5
00:00:13.080 --> 00:00:14.569
So let's show a subset instead.

6
00:00:17.221 --> 00:00:23.288
And to do that, what we can do is we can
actually just dive right into this query,

7
00:00:23.288 --> 00:00:26.440
we don't have to make another one.

8
00:00:26.440 --> 00:00:32.020
We can just go in and just start adding
stuff so we can do all sanity episode.

9
00:00:32.020 --> 00:00:35.817
And then in here, we can take some of
these things that we already had before

10
00:00:35.817 --> 00:00:39.134
right so actually why don't we
just build this out in graphical,

11
00:00:39.134 --> 00:00:42.220
why write it by hand
when we can copy paste?

12
00:00:42.220 --> 00:00:49.730
So I want to filter where the YouTube ID
does not equal no, right?

13
00:00:49.730 --> 00:00:55.670
So here we are not equal no, I want
to get the date by order descending,

14
00:00:55.670 --> 00:00:59.614
and then I also wanna
limit to the latest 20.

15
00:00:59.614 --> 00:01:04.764
So only 20 episodes and then I'm going to

16
00:01:04.764 --> 00:01:10.090
pull out the ID, I don't need the slug.

17
00:01:10.090 --> 00:01:15.498
I want the ID for sure, I want the title,
I want the guest name so

18
00:01:15.498 --> 00:01:21.800
that I can show who was on the show,
and then I want the Gatsby path.

19
00:01:21.800 --> 00:01:25.686
Okay, so this one is kinda cool, this is
a little bit of like a magical thing that

20
00:01:25.686 --> 00:01:28.770
Gatsby does, and I believe I need
to refresh the page to get it.

21
00:01:31.510 --> 00:01:35.170
When you use the the file path name,

22
00:01:35.170 --> 00:01:41.026
it's not always predictable
what was used to access it,

23
00:01:41.026 --> 00:01:44.560
am I building this from the slug?

24
00:01:44.560 --> 00:01:49.264
And if I do, does it know that it was in
a folder and those sorts of things so

25
00:01:49.264 --> 00:01:53.973
what Gatsby does is actually gives you
the ability to just query whatever

26
00:01:53.973 --> 00:01:56.088
the path was that it generated.

27
00:01:56.088 --> 00:02:00.151
Where's this?

28
00:02:04.055 --> 00:02:06.092
Wait.

29
00:02:06.092 --> 00:02:10.781
Right, you have to actually put in

30
00:02:10.781 --> 00:02:15.471
the file path that was generated so

31
00:02:15.471 --> 00:02:21.787
we used sanity episode.slugCurrent right.

32
00:02:21.787 --> 00:02:24.412
So what we're saying is Gatsby,

33
00:02:24.412 --> 00:02:29.260
give me whatever the path would be for
this file name.

34
00:02:29.260 --> 00:02:33.136
And then when I run it,
it will give me the actual path to use so

35
00:02:33.136 --> 00:02:35.590
that we can generate those slugs.

36
00:02:35.590 --> 00:02:38.258
So that way we're not trying
to do logic in two places,

37
00:02:38.258 --> 00:02:41.798
Gatsby is generating files and
figuring out paths using one algorithm.

38
00:02:41.798 --> 00:02:46.050
And I'm doing my best guess at emulating
whatever Gatsby's doing under the hood.

39
00:02:46.050 --> 00:02:46.960
Now get away from that.

40
00:02:46.960 --> 00:02:51.873
Instead, you can just use this same
flow here of generating that Gatsby path

41
00:02:51.873 --> 00:02:53.830
based on what happened.

42
00:02:53.830 --> 00:02:58.156
So with this, if I run this,
now we get all of those files, and

43
00:02:58.156 --> 00:03:02.652
I'm gonna skip the outer query and
just get this interior part,

44
00:03:02.652 --> 00:03:05.420
because we can drop that right in here.

45
00:03:09.235 --> 00:03:16.438
Now we are pulling in our episodes
alongside our MDX and down here,

46
00:03:16.438 --> 00:03:23.780
I can just grab them out episodes
equals data.allsanity.nodes.

47
00:03:25.270 --> 00:03:30.390
And what I mean by all sanity
is all sanity episode, right?

48
00:03:31.530 --> 00:03:34.886
Then come right down to the bottom here,
and

49
00:03:34.886 --> 00:03:38.220
we can just write some
markup to lay it out.

50
00:03:38.220 --> 00:03:45.882
So let's add an h2 and we'll say latest
episodes have learned with Json,

51
00:03:45.882 --> 00:03:52.140
and underneath that we'll
do another unordered list.

52
00:03:52.140 --> 00:03:54.825
And we'll take each episode,
map through it.

53
00:04:00.801 --> 00:04:04.909
And do we wanna what we don't even need
the curlies, we can just make this into a.

54
00:04:07.441 --> 00:04:11.053
One of those dailies and
just implicitly return our markup, so

55
00:04:11.053 --> 00:04:15.580
that's gonna be an Li, and because we're
iterating we need to give it a key.

56
00:04:15.580 --> 00:04:20.407
So we'll do episode ID, that's why
it's always a kind of a nice flow to

57
00:04:20.407 --> 00:04:23.310
quit helping, my god, do you see this?

58
00:04:24.460 --> 00:04:25.540
Stop it.

59
00:04:25.540 --> 00:04:26.440
ID, thank you.

60
00:04:27.480 --> 00:04:32.450
It's because I spelled it wrong,
that's episode ID, good.

61
00:04:32.450 --> 00:04:36.620
Okay, so we're putting in
the episode ID as the key.

62
00:04:36.620 --> 00:04:40.625
Then we are going to
use the Gatsby link and

63
00:04:40.625 --> 00:04:44.410
we want to link to episode Gatsby Path.

64
00:04:46.550 --> 00:04:51.270
And this is nice, because otherwise,
if we didn't have this Gatsby Path,

65
00:04:51.270 --> 00:04:55.863
we'd have to do a global search to say
okay we actually changed our minds.

66
00:04:55.863 --> 00:05:00.904
They're not in the episode folder anymore
we moved them into the top level so

67
00:05:00.904 --> 00:05:05.472
look for everywhere in the site that
we have the the URL generation and

68
00:05:05.472 --> 00:05:07.990
make sure that you update these.

69
00:05:07.990 --> 00:05:12.618
So it's a minor thing but
boy does it add up, so

70
00:05:12.618 --> 00:05:16.460
then let's get the episode.title.

71
00:05:16.460 --> 00:05:19.983
And we'll say, with the episode.guest, and

72
00:05:19.983 --> 00:05:25.003
I wanna make sure that the guest exists,
guests are always returned

73
00:05:25.003 --> 00:05:31.010
as an array because when I designed
the sanity scheme, I made bad choices.

74
00:05:31.010 --> 00:05:34.680
But that's how we get to it.

75
00:05:34.680 --> 00:05:38.263
This is optional chaining to make sure
that if there is not a guest set,

76
00:05:38.263 --> 00:05:40.970
it doesn't cause the page to break.

77
00:05:40.970 --> 00:05:45.960
And then underneath this unordered list,
we can just make a link.

78
00:05:45.960 --> 00:05:52.816
We'll say go watch,
let's learn to Json.Dev and

79
00:05:52.816 --> 00:05:59.520
we'll say watch all episodes
of learn with Json.

80
00:06:00.840 --> 00:06:05.904
Okay, so having done this,
now what we get if we go to the homepage.

81
00:06:05.904 --> 00:06:12.108
Is we get a listing of the latest 20
episodes and then a link to the site so

82
00:06:12.108 --> 00:06:17.370
we can get into one of these all right,
come back out here.

83
00:06:17.370 --> 00:06:21.431
Get into one of these, and
then if we link through,

84
00:06:21.431 --> 00:06:25.493
it's gonna take us over to
learn with JSON site, or

85
00:06:25.493 --> 00:06:30.425
we can click over to YouTube and
watch on YouTube, right?

86
00:06:30.425 --> 00:06:35.625
So this is a, pretty quickly and
with fairly minimal

87
00:06:35.625 --> 00:06:40.351
custom code having to get
into the magic stuff,

88
00:06:40.351 --> 00:06:45.850
we were able to build a listing
of our latest things.

89
00:06:45.850 --> 00:06:49.847
And this is one of those things that like
as developers when we are working on.

90
00:06:51.584 --> 00:06:56.359
Getting our portfolios out there,
or blogging, or keeping track of,

91
00:06:56.359 --> 00:06:59.233
for me something I've struggled with is.

92
00:06:59.233 --> 00:07:02.763
Workshops like these when
I give conference talks,

93
00:07:02.763 --> 00:07:06.960
I store that information somewhere,
I'll put it on.

94
00:07:06.960 --> 00:07:11.316
Air table is one place I've tried
I'll put it on a marked down

95
00:07:11.316 --> 00:07:15.860
unordered list I'll put it in
somewhere like poly work right?

96
00:07:15.860 --> 00:07:20.562
And when I do that, I then want to show
it on my website so I tell myself yeah,

97
00:07:20.562 --> 00:07:24.870
I'm gonna remember to update
my website every month or so.

98
00:07:24.870 --> 00:07:28.119
And then I don't for 18 to 24 months,
and then someone will be,

99
00:07:28.119 --> 00:07:31.539
hey your website super out of date and
then I'll feel guilty about it for

100
00:07:31.539 --> 00:07:35.360
another 18 to 24 months before I
finally get around to fixing it.

101
00:07:35.360 --> 00:07:37.621
So with this sort of approach with this,

102
00:07:37.621 --> 00:07:41.146
this quickly being able to pull
in data from different places.

103
00:07:41.146 --> 00:07:44.657
The nice thing is, is that every
time the Gatsby site builds and

104
00:07:44.657 --> 00:07:48.633
you could theoretically say I want
my Gatsby site to rebuild every day,

105
00:07:48.633 --> 00:07:51.200
every week, something like that.

106
00:07:51.200 --> 00:07:55.213
It's gonna pull the latest data,
I never have to look at this site again,

107
00:07:55.213 --> 00:07:58.609
it's always going to pull the latest,
from learn with Json.

108
00:07:58.609 --> 00:08:02.956
So if I made my portfolio site pulling
from the learn with Json sanity and

109
00:08:02.956 --> 00:08:07.672
pulling from my, I don't know whatever
else like whatever else I'm using.

110
00:08:07.672 --> 00:08:12.630
I could have it automatically build every
week or so and it would always show up to

111
00:08:12.630 --> 00:08:17.002
date information and I personally
would never have to touch it again.

112
00:08:17.002 --> 00:08:21.793
Which is a pretty nice way to manage these
sites that we know are important, but

113
00:08:21.793 --> 00:08:25.630
that it's hard to make the time to go and
maintain.

114
00:08:25.630 --> 00:08:30.385
And again, by getting all of this, this
plumbing work out of the way by getting

115
00:08:30.385 --> 00:08:34.347
the cognitive overhead of having
to write all the market by hand or

116
00:08:34.347 --> 00:08:38.450
deal with bespoke data types or
any of those sorts of things.

117
00:08:38.450 --> 00:08:43.318
I can just focus that limited maintenance
time that I have on actually writing that

118
00:08:43.318 --> 00:08:47.160
blog post that I've been
promising somebody for a year.

119
00:08:47.160 --> 00:08:51.216
Or actually updating my bio instead
of trying to figure out why

120
00:08:51.216 --> 00:08:55.450
the site won't build so
that I can eventually update my bio.

121
00:08:55.450 --> 00:09:00.000
There's so many things that get in
the way of us actually producing.

122
00:09:00.000 --> 00:09:02.870
And one of the ways that
it gets described is a term

123
00:09:02.870 --> 00:09:06.010
called yack shaving if
you've never heard it.

124
00:09:06.010 --> 00:09:09.631
Which is you wanna do one task but
before you can do that task,

125
00:09:09.631 --> 00:09:14.820
you have to do a whole bunch of other
tasks that unblock that first task.

126
00:09:14.820 --> 00:09:19.896
I like Gatsby because it removes a lot
of that yak shaving, I don't have

127
00:09:19.896 --> 00:09:25.460
to do a bunch of cleanup or special stuff,
I can just build the thing, right?

128
00:09:25.460 --> 00:09:30.595
That to me is one of the reasons that you
would want to use a tool like Gatsby is if

129
00:09:30.595 --> 00:09:35.920
you are not necessarily interested in
tinkering with the code of your website.

130
00:09:35.920 --> 00:09:39.795
If you're interested in producing things
on your website you wanna publish,

131
00:09:39.795 --> 00:09:41.626
that's a good reason to use Gatsby.

132
00:09:44.128 --> 00:09:48.150
Okay, I mean with that,
I think we're ready to deploy.

133
00:09:48.150 --> 00:09:52.126
Does anybody have questions about loading
in third party data before we move on to

134
00:09:52.126 --> 00:09:52.835
deployment.

135
00:09:52.835 --> 00:09:56.633
&gt;&gt; If I will lose for example,

136
00:09:56.633 --> 00:10:01.752
sunny side for example or Shopify for

137
00:10:01.752 --> 00:10:07.047
grabbing data and use it into Gatsby.

138
00:10:07.047 --> 00:10:13.054
So if I went back your posts for
example from Shopify,

139
00:10:13.054 --> 00:10:18.795
the data will be updated
automatically in Gatsby or

140
00:10:18.795 --> 00:10:22.010
I have to do some something.

141
00:10:23.460 --> 00:10:28.703
&gt;&gt; You would use something
called a sanity web hook

142
00:10:28.703 --> 00:10:34.950
when you set up content there
are easy ways to do this.

143
00:10:34.950 --> 00:10:40.849
So here there's a web hooks tab under
your settings and what I can do is I can

144
00:10:40.849 --> 00:10:46.930
set it so that whenever something changes,
it will trigger a build.

145
00:10:46.930 --> 00:10:50.497
So whenever the production
data set changes,

146
00:10:50.497 --> 00:10:55.900
it sends a post to this web hook that
will cause the the site to rebuild.

147
00:10:58.040 --> 00:11:00.619
So WordPress and sanity and

148
00:11:00.619 --> 00:11:06.620
a lot of CMSs have some kind
of web hook support like that.

149
00:11:06.620 --> 00:11:08.670
That would be the way
that you would do that.

150
00:11:08.670 --> 00:11:12.261
If they don't have web hook support
what you would be looking for instead,

151
00:11:12.261 --> 00:11:15.750
is some kind of a cron job where you
would just rebuild the site every day.

