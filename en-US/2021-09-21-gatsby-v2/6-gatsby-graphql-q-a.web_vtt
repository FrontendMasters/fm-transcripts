WEBVTT

1
00:00:00.990 --> 00:00:08.755
How can we use a mutation to create
update with Gatsby and GraphQL?

2
00:00:08.755 --> 00:00:12.080
So, Gatsby does not support mutations.

3
00:00:12.080 --> 00:00:18.545
That's another feature of making
it a build time only solution.

4
00:00:18.545 --> 00:00:20.855
You don't mutate data through Gatsby.

5
00:00:20.855 --> 00:00:23.832
What you can do and
we won't talk about this today, but

6
00:00:23.832 --> 00:00:27.630
we'll get into it a little bit
with the intermediate course.

7
00:00:27.630 --> 00:00:32.370
Is you can transform nodes which
is effectively a mutation.

8
00:00:32.370 --> 00:00:35.410
But that's done through
Gatsby API's not through.

9
00:00:37.140 --> 00:00:40.520
That's not handled through
like GraphQL itself.

10
00:00:40.520 --> 00:00:45.602
So, again, GraphQL and
Gatsby is not GraphQL everywhere,

11
00:00:45.602 --> 00:00:49.430
it is a very unique approach to GraphQL.

12
00:00:49.430 --> 00:00:51.122
That is a more, it's almost a subset.

13
00:00:53.379 --> 00:00:55.480
&gt;&gt; Is there a way to, sorry,

14
00:00:55.480 --> 00:01:01.410
is there a way to get data like this
from a asynchronous source like a REST?

15
00:01:02.610 --> 00:01:07.010
Or GraphQL server from some public API.

16
00:01:07.010 --> 00:01:12.197
&gt;&gt; Yeah, absolutely, a little bit later
today, we will actually do that will

17
00:01:12.197 --> 00:01:17.240
load data from a third party service
using their I believe their REST API.

18
00:01:18.760 --> 00:01:24.510
And there are plugins from actually
loading in from REST API's.

19
00:01:24.510 --> 00:01:29.109
And in the intermediate course we'll look
at putting custom data like whatever you

20
00:01:29.109 --> 00:01:31.130
want into Gatsby's API's.

21
00:01:31.130 --> 00:01:33.129
So, yeah, well we'll touch on it today,

22
00:01:33.129 --> 00:01:35.970
we'll go much deeper in
the intermediate workshop though.

23
00:01:37.420 --> 00:01:40.084
&gt;&gt; GraphQL is specifically
used with Gatsby,

24
00:01:40.084 --> 00:01:42.750
is it compatible with
any other data layer?

25
00:01:44.840 --> 00:01:51.994
&gt;&gt; So, yes, in the sense that you can load
any data into Gatsby's runtime GraphQL.

26
00:01:51.994 --> 00:01:56.690
And also it's important to note
like you can use Gatsby without

27
00:01:56.690 --> 00:02:00.233
ever touching the GraphQL layer,
like if you,

28
00:02:00.233 --> 00:02:04.680
when we look at the MDX setup,
which is in a little bit here.

29
00:02:04.680 --> 00:02:08.281
You can do everything in
Gatsby just using markdown, or

30
00:02:08.281 --> 00:02:12.280
MDX and you never have to
write a GraphQL query at all.

31
00:02:12.280 --> 00:02:14.000
And the site metadata stuff.

32
00:02:14.000 --> 00:02:14.810
This is all optional.

33
00:02:14.810 --> 00:02:19.798
The way that I'm doing it, I could also
create a config.js in my source folder.

34
00:02:19.798 --> 00:02:24.880
And pull that in instead of
doing the the site metadata like

35
00:02:24.880 --> 00:02:32.053
my config could just be you know import
meta from like metadata.js or something.

36
00:02:32.053 --> 00:02:36.610
And then we could do metadata title here,
so you don't have to use the GraphQL.

37
00:02:36.610 --> 00:02:43.894
And really, if I wanted to I could pull
in data from, using the fetch API or

38
00:02:43.894 --> 00:02:50.253
from other sources to build out the site,
where Gatsby starts.

39
00:02:50.253 --> 00:02:55.248
In this is sort of the thing where like,
if you find yourself really not wanting to

40
00:02:55.248 --> 00:02:59.810
use Gatsby, or GraphQL, Gatsby might
not be the right solution for you.

41
00:02:59.810 --> 00:03:04.507
There are other ways to build sites that
will let you do a lot of what Gatsby

42
00:03:04.507 --> 00:03:07.158
does without the GraphQL requirement.

43
00:03:07.158 --> 00:03:13.092
Next JS, Astro,
they're always that you can build sites

44
00:03:13.092 --> 00:03:19.040
similar to this that don't
have GraphQL as a dependency.

45
00:03:19.040 --> 00:03:20.720
So, there's, there are definitely options.

46
00:03:21.950 --> 00:03:26.242
But yeah the the GraphQL part
is very integral to Gatsby, but

47
00:03:26.242 --> 00:03:28.610
it's not a strict requirement.

48
00:03:28.610 --> 00:03:32.211
It's just kinda one of those things that
your life gets easier if you just give in

49
00:03:32.211 --> 00:03:33.350
and do it Gatsby's way.

50
00:03:35.450 --> 00:03:40.202
&gt;&gt; How about if you have a bunch
of JSON data that you want to,

51
00:03:40.202 --> 00:03:45.860
load into GraphQL and
then query through Gatsby's GraphQL layer.

52
00:03:45.860 --> 00:03:47.890
Is there an easy way to do that?

53
00:03:47.890 --> 00:03:52.826
&gt;&gt; Absolutely, there is a source
plugin for JSON specifically.

54
00:03:52.826 --> 00:03:56.644
So, Gatsby source, JSON,

55
00:03:56.644 --> 00:04:02.060
you can just pull that data straight in.

56
00:04:03.580 --> 00:04:07.810
So, you you can just import it like this.

57
00:04:07.810 --> 00:04:13.850
So, you can just pull it in,
but you can also source it.

58
00:04:13.850 --> 00:04:15.907
And if you source it.

59
00:04:19.229 --> 00:04:19.729
Where did it go?

60
00:04:24.930 --> 00:04:29.710
Here, you can just get any JSON data that
comes in, and it'll turn it into nodes.

61
00:04:29.710 --> 00:04:33.610
So, we'll look at how this
file system plugin works.

62
00:04:33.610 --> 00:04:38.553
And then this, the transformers are what
I was talking about where you can

63
00:04:38.553 --> 00:04:40.875
have data that comes into Gatsby.

64
00:04:40.875 --> 00:04:45.360
A transformer plugin uses some Gatsby
API's to turn that data from one shape

65
00:04:45.360 --> 00:04:46.590
into another.

66
00:04:46.590 --> 00:04:52.106
So in this case it looks and
it finds that a file is a .JSON file and

67
00:04:52.106 --> 00:04:55.670
then converts it into a GraphQL node.

68
00:04:55.670 --> 00:04:59.910
So, if you have a bunch of JSON,
you don't actually have to do anything.

69
00:04:59.910 --> 00:05:04.718
You just have to install
this Gatsby transformer and

70
00:05:04.718 --> 00:05:09.088
it will put it into your
file like the GraphQL for

71
00:05:09.088 --> 00:05:12.704
you, it'll show up as an option here.

72
00:05:12.704 --> 00:05:18.670
&gt;&gt; Is there a way to query, or make these
queries on the fly like in JavaScript?

73
00:05:18.670 --> 00:05:24.500
So, you could like for instance,
grab a bit of extra data dynamically,

74
00:05:24.500 --> 00:05:30.353
like dynamic JS app and put it into
local storage, something like that.

75
00:05:30.353 --> 00:05:35.136
&gt;&gt; Yeah 100%, if you wanna do that you've

76
00:05:35.136 --> 00:05:39.910
now basically entered regular old react.

77
00:05:39.910 --> 00:05:45.172
So, you would pull in the use effect and

78
00:05:45.172 --> 00:05:51.234
you'd be able to do extra data would be,

79
00:05:51.234 --> 00:05:56.670
just fetch whatever your endpoint was.

80
00:05:56.670 --> 00:05:57.170
And then.

81
00:05:59.827 --> 00:06:03.938
You could like, grab it like so.

82
00:06:03.938 --> 00:06:09.377
And here, Would be your extra data.

83
00:06:13.427 --> 00:06:15.155
Right?
So, at this point,

84
00:06:15.155 --> 00:06:17.438
you could put it into a use state.

85
00:06:17.438 --> 00:06:21.350
You could set it in local storage,
you could do whatever you want.

86
00:06:21.350 --> 00:06:26.067
But you would be able to use for example,
you could take this title which is

87
00:06:26.067 --> 00:06:29.860
loaded at build time and
use that to inform this fetch.

88
00:06:29.860 --> 00:06:35.008
So, a good example of that would be if I
want to serve a render my blog posts, but

89
00:06:35.008 --> 00:06:40.091
I don't want to serve a render the
comments I wanna client side render those.

90
00:06:40.091 --> 00:06:45.133
Then I would be able to load the blog
post here and then I would be able to use

91
00:06:45.133 --> 00:06:50.250
the ID of the blog post to make a call
to my API and load in the comments.

92
00:06:50.250 --> 00:06:57.200
But again, you cannot call
the Gatsby GraphQL from the client side.

93
00:06:57.200 --> 00:07:02.351
So this would be calling a third party
API or if you could put together,

94
00:07:02.351 --> 00:07:06.384
a serverless function that
would return common data.

95
00:07:06.384 --> 00:07:08.510
And then call your your
serverless function there.

96
00:07:08.510 --> 00:07:10.950
There are a lot of ways that
you can solve this problem.

97
00:07:10.950 --> 00:07:14.878
We will not be touching
on this flow today, but

98
00:07:14.878 --> 00:07:18.821
we will in the intermediate
Gatsby workshop.

99
00:07:18.821 --> 00:07:23.359
&gt;&gt; So the reason for me for learning
Gatsby is to create basically blogs and

100
00:07:23.359 --> 00:07:26.761
content websites for
that feels snappy and fast, and

101
00:07:26.761 --> 00:07:29.268
they work great on browser and mobile.

102
00:07:29.268 --> 00:07:33.220
And they also performed great from
the technical SEO standpoint.

103
00:07:34.360 --> 00:07:37.730
So, they rank better on
the search engines and all that.

104
00:07:37.730 --> 00:07:40.950
And that's why I did some a little
bit of research on the internet.

105
00:07:40.950 --> 00:07:48.050
So I found that Gatsby, basically two
things that came up Gatsby and next.

106
00:07:48.050 --> 00:07:54.550
So, I'm not sure which worksheet,
which is better for this specific reason.

107
00:07:55.630 --> 00:07:59.790
Also if you have some resources
regarding this specific reason, so.

108
00:07:59.790 --> 00:08:04.664
&gt;&gt; So, Gatsby versus next is, I'm gonna
give you the most infuriating developer

109
00:08:04.664 --> 00:08:07.685
answer ever, which is it depends, right?

110
00:08:07.685 --> 00:08:13.070
So, Gatsby is a very opinionated
way to get data from a lot of

111
00:08:13.070 --> 00:08:18.155
different sources and
put it into a unified data layer.

112
00:08:18.155 --> 00:08:22.517
So that every page you build whether
you're pulling data from a headless CMS,

113
00:08:22.517 --> 00:08:24.378
or from JSON, or from markdown.

114
00:08:24.378 --> 00:08:26.962
Or from air table or
whatever you're using,

115
00:08:26.962 --> 00:08:31.680
it's always going to feel roughly
the same to work with that data.

116
00:08:31.680 --> 00:08:34.041
Next is a little bit of the other side.

117
00:08:34.041 --> 00:08:37.320
Next is pretty, do whatever you want.

118
00:08:37.320 --> 00:08:42.540
They provide you with some low
level API's to get site data.

119
00:08:42.540 --> 00:08:47.748
So, they have like the get
static props hook, and

120
00:08:47.748 --> 00:08:55.812
some other like extensions to the react
file type that allow you to load data.

121
00:08:55.812 --> 00:09:03.200
Next is going to rely on you
building a lot more custom stuff.

122
00:09:03.200 --> 00:09:06.962
A Gatsby is going to give you a lot of
batteries included, but it'll also fight

123
00:09:06.962 --> 00:09:10.970
really hard when you wanna customise it,
because it's not the Gatsby way.

124
00:09:10.970 --> 00:09:14.545
So, when you're looking at your use case,
what you're trying to build.

125
00:09:14.545 --> 00:09:18.204
If what you have is structured data and
you wanna get it onto a website,

126
00:09:18.204 --> 00:09:20.420
Gatsby is going to be really fast.

127
00:09:20.420 --> 00:09:24.400
If what you have is some custom stuff and
you got to do some weirdness, and

128
00:09:24.400 --> 00:09:28.588
you're looking at like you're not quite
sure how that date is gonna get in.

129
00:09:28.588 --> 00:09:33.094
And some of its gonna load, now and
someone will load it client side,

130
00:09:33.094 --> 00:09:37.240
and it's there's some like
bespoke stuff happening.

131
00:09:37.240 --> 00:09:40.750
Next is gonna put less
roadblocks in your way.

132
00:09:40.750 --> 00:09:43.290
But it'll also expect you to build
all of that stuff on your own.

133
00:09:43.290 --> 00:09:44.757
So, these are the trade offs,

134
00:09:44.757 --> 00:09:48.570
like next is more flexible at the expense
of having to write more code.

135
00:09:48.570 --> 00:09:52.181
Gatsby is more expedient, I guess,

136
00:09:52.181 --> 00:09:56.380
at the expense of having
a lot of opinions.

