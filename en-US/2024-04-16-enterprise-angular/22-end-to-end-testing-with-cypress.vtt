WEBVTT

1
00:00:00.560 --> 00:00:03.193
We've covered unit testing, but

2
00:00:03.193 --> 00:00:09.019
I believe that no testing story is
complete without end-to-end testing.

3
00:00:09.019 --> 00:00:11.545
And end testing, in my opinion,

4
00:00:11.545 --> 00:00:17.320
is one of the most underrepresented
value ads within an organization.

5
00:00:17.320 --> 00:00:23.700
And there's a myriad of reasons why
I'm being able to test your features

6
00:00:23.700 --> 00:00:30.969
in conjunction with each other how they
fit together is the ultimate safety net.

7
00:00:30.969 --> 00:00:35.381
Not only does it give you kind of the
peace of mind that when I make a change,

8
00:00:35.381 --> 00:00:36.603
everything works.

9
00:00:36.603 --> 00:00:40.880
I have seen very bad things happen
in terms of regression errors or

10
00:00:40.880 --> 00:00:43.603
maybe something works in isolation, but

11
00:00:43.603 --> 00:00:48.290
when you run it in the context of
the entire app, all hell breaks loose.

12
00:00:48.290 --> 00:00:54.697
And so end in testing is something
that a lot of organizations

13
00:00:54.697 --> 00:01:00.613
do not prioritize, but
I blame that in part to tooling.

14
00:01:00.613 --> 00:01:05.756
I think that a lot of the tooling
available to us was not great and

15
00:01:05.756 --> 00:01:10.200
not written for
modern front end web applications.

16
00:01:10.200 --> 00:01:14.490
But there's two very good tools that have
emerged over the last couple of years

17
00:01:14.490 --> 00:01:16.950
that's Cypress and playwright.

18
00:01:16.950 --> 00:01:22.555
And so what I wanna do is, just show
you a real quick demo how to get up and

19
00:01:22.555 --> 00:01:29.641
running with an end-to-end test with
Cypress in the context of this project.

20
00:01:29.641 --> 00:01:37.127
So the command to run your NN test
within an NX workspace is NPX,

21
00:01:37.127 --> 00:01:41.083
NX, E2E, for end-to-end and

22
00:01:41.083 --> 00:01:46.997
then the project that you want to target.

23
00:01:46.997 --> 00:01:52.947
Now, before I run this, I need to
make a few changes for this to work.

24
00:01:52.947 --> 00:01:57.912
Because we have a large amount of
apps within our Monorepo that we're

25
00:01:57.912 --> 00:01:59.205
kind of playing.

26
00:01:59.205 --> 00:02:01.930
I don't wanna say musical ports, but

27
00:02:01.930 --> 00:02:06.628
we definitely need to dial these
ports in or it's not gonna work.

28
00:02:06.628 --> 00:02:10.700
So because challenges is running on 4202

29
00:02:10.700 --> 00:02:15.644
in the cypress .config file,
we need to update that.

30
00:02:15.644 --> 00:02:21.269
The default Cypress test that

31
00:02:21.269 --> 00:02:28.476
is generated comes in the structure.

32
00:02:28.476 --> 00:02:34.820
You have fixtures which is for
essentially mock data.

33
00:02:34.820 --> 00:02:39.719
In the support, we have a app.po.ts.

34
00:02:39.719 --> 00:02:45.485
So PO stands for page object and what
this allows you to do is kind of segment

35
00:02:45.485 --> 00:02:51.283
your selection logic and
your testing logic into a single place.

36
00:02:51.283 --> 00:02:57.378
And then we have within the E2E portfolio,

37
00:02:57.378 --> 00:03:00.846
the actual test itself.

38
00:03:04.399 --> 00:03:10.871
In the test itself, this is very
similar to kind of a Jasmine syntax.

39
00:03:10.871 --> 00:03:14.032
So describe challenges end-to-end,
before each,

40
00:03:14.032 --> 00:03:16.377
it visits the root directory of the app.

41
00:03:16.377 --> 00:03:19.063
You could change this if you needed to,
and

42
00:03:19.063 --> 00:03:22.055
it says it should display
the welcome message.

43
00:03:23.726 --> 00:03:26.202
And we have a command here
that we're not going to use.

44
00:03:26.202 --> 00:03:29.880
I'm going to delete that, and

45
00:03:29.880 --> 00:03:34.126
we have a call here, get greeting.

46
00:03:35.296 --> 00:03:38.239
That is essentially
selecting an element and

47
00:03:38.239 --> 00:03:42.739
then it's looking to make sure that
it contains some text fragment.

48
00:03:44.929 --> 00:03:48.739
Well, this was generated and obviously
we've changed the app since then.

49
00:03:48.739 --> 00:03:55.848
So let's go ahead and update our template
to be able to run a test against so

50
00:03:55.848 --> 00:04:00.909
when you have the regular app and
your end to end app.

51
00:04:01.964 --> 00:04:06.919
The way that they interface,
because they run

52
00:04:06.919 --> 00:04:11.493
side by side is through the templates and
so

53
00:04:11.493 --> 00:04:17.100
end-end testing should
be fairly non-invasive.

54
00:04:17.100 --> 00:04:21.977
That a lot of times we work with
developers when they're building out

55
00:04:21.977 --> 00:04:24.164
their templates to go ahead and

56
00:04:24.164 --> 00:04:28.806
add in the instrumentation to make
it easy to run end to end tests.

57
00:04:28.806 --> 00:04:33.668
So what I recommend is using
a selector specifically for

58
00:04:33.668 --> 00:04:39.150
testing, so we'll use data tests,
you could use a side test,

59
00:04:39.150 --> 00:04:46.486
there's a number of things I prefer to
keep this a little bit more agnostic.

60
00:04:46.486 --> 00:04:52.476
And then what we're gonna do is we're
going to give this a name of list title.

61
00:04:54.306 --> 00:04:59.070
What this eliminates is,
occasionally you'll see

62
00:04:59.070 --> 00:05:04.376
selectors that are these long
CSS dependent kinda queries

63
00:05:04.376 --> 00:05:09.047
to go with this thing, and
that is pretty brittle.

64
00:05:09.047 --> 00:05:13.510
If somebody moves something or
the structure changes, you have problems.

65
00:05:13.510 --> 00:05:18.632
Whereas by having a test ID, I can move
this element anywhere around the page and

66
00:05:18.632 --> 00:05:23.337
it's still going to work because
it's very, very specific.

67
00:05:23.337 --> 00:05:29.797
So now that I have my test ID in,
I can go back over to the page object.

68
00:05:30.847 --> 00:05:32.518
And from here.

69
00:05:34.690 --> 00:05:40.002
Let's go ahead and let's write a new
function that's responsible for

70
00:05:40.002 --> 00:05:42.211
getting the title.

71
00:05:42.211 --> 00:05:47.287
So export const getTitle and
these selectors typically

72
00:05:47.287 --> 00:05:54.521
end up being very small very specific
functions that are grabbing one thing.

73
00:05:54.521 --> 00:05:58.869
So get title and
then from here we're gonna do cy.get and

74
00:05:58.869 --> 00:06:02.682
let me just break this to
another line real quick.

75
00:06:06.018 --> 00:06:08.796
And then we're gonna use
this syntax right here.

76
00:06:10.933 --> 00:06:18.216
Data-test equals list-title.

77
00:06:20.726 --> 00:06:21.238
There we go.

78
00:06:23.086 --> 00:06:28.362
So now this is going and looking
forward the ID directly on the page.

79
00:06:28.362 --> 00:06:33.672
It's so sad having to cascade or
really query the DOM, which is very,

80
00:06:33.672 --> 00:06:38.986
very fast and it's recommended best
practice according to Cypress.

81
00:06:40.266 --> 00:06:44.235
Now, let's hop into our actual test and

82
00:06:44.235 --> 00:06:49.138
let's update this test here
to be a little bit more

83
00:06:49.138 --> 00:06:53.183
specific to what we're wanting to do.

84
00:06:53.183 --> 00:06:57.863
So should display list title and
we don't wanna

85
00:06:57.863 --> 00:07:02.549
use get greeting instead
let's use getTitle.

86
00:07:04.399 --> 00:07:08.584
And we're going to go contains and

87
00:07:08.584 --> 00:07:13.211
let's say challenges, there we go.

88
00:07:18.108 --> 00:07:24.876
All right, let's save that and
let's Run it and see what happens.

89
00:07:26.576 --> 00:07:29.863
So I'm now gonna hit this and
hopefully everything works.

90
00:07:33.052 --> 00:07:40.206
So it's going to spin up the app as
well as the test runner for Cypress.

91
00:07:40.206 --> 00:07:43.015
And essentially,
one the two against each other.

92
00:07:43.015 --> 00:07:45.916
So this will take just
a small moment of time.

93
00:07:48.886 --> 00:07:53.635
So we can see that generated the app,
which it just did.

94
00:07:53.635 --> 00:08:00.391
Now it's running Cypress against it and
all tests passed.

95
00:08:00.391 --> 00:08:03.403
So fairly simple to get up and running,

96
00:08:03.403 --> 00:08:07.801
which I think we did that in
just a matter of a few minutes.

97
00:08:08.941 --> 00:08:14.577
One additional element that
I would like to make is,

98
00:08:14.577 --> 00:08:19.060
I personally try to keep
all of my logic and

99
00:08:19.060 --> 00:08:25.081
selection logic and
assertion logic or let's say get,

100
00:08:25.081 --> 00:08:29.949
a range act assert that
any of my assertions or

101
00:08:29.949 --> 00:08:35.925
my arranging,
I try to put into the page object.

102
00:08:35.925 --> 00:08:40.949
So right now we're doing get
title contains challenges,

103
00:08:40.949 --> 00:08:44.955
but I think we can do
a little better than that.

104
00:08:44.955 --> 00:08:50.071
So what I usually like to do is

105
00:08:50.071 --> 00:08:55.410
create a static page object.

106
00:08:56.960 --> 00:09:02.399
Or just I'll just call it page and
then create a key value pair for

107
00:09:02.399 --> 00:09:07.435
the things that are on the page
that I either want to select or

108
00:09:07.435 --> 00:09:09.858
I want to reference.

109
00:09:09.858 --> 00:09:14.037
So what I could do here is title and

110
00:09:14.037 --> 00:09:21.866
we'll just take the string here and
put that in like so.

111
00:09:21.866 --> 00:09:29.287
And then we'll go title label, and
we're gonna just go challenges.

112
00:09:31.931 --> 00:09:34.812
Now what we're gonna do is we're
going to write an additional test.

113
00:09:37.779 --> 00:09:43.579
Or an additional function that has a test,
and it's going to be checkTitle.

114
00:09:47.968 --> 00:09:53.774
And now we're going to go getTitle.

115
00:09:53.774 --> 00:10:00.381
And if we go back to our test, we can
see that we're doing an assertion here.

116
00:10:00.381 --> 00:10:06.413
So let's go back to our page object,

117
00:10:06.413 --> 00:10:11.473
and we're going to update this

118
00:10:11.473 --> 00:10:17.515
to instead point to the title label.

119
00:10:17.515 --> 00:10:23.604
So we're gonna go page.titleLabel,

120
00:10:23.604 --> 00:10:28.036
and let's go page.title.

121
00:10:28.036 --> 00:10:33.472
And so, this, I believe, is beneficial,
because by segmenting out all

122
00:10:33.472 --> 00:10:38.823
the kind of the variables into a single
object, if this label changes and

123
00:10:38.823 --> 00:10:44.815
you're referencing it in more than one
test, then it's very easy to change it.

124
00:10:44.815 --> 00:10:49.943
So, now what we wanna do
is back into our test,

125
00:10:49.943 --> 00:10:57.584
instead of get title, we're going
to just do checkTitle and we can.

126
00:11:07.119 --> 00:11:14.494
Let's optimize imports,
there we go, organize imports.

127
00:11:14.494 --> 00:11:16.554
All right, now it's clean.

128
00:11:16.554 --> 00:11:20.635
Let's go ahead and
run this test one more time.

129
00:11:23.993 --> 00:11:27.234
So just a little clean
up to make it nicer.

130
00:11:27.234 --> 00:11:30.044
And if you were to continue
kind of doing this,

131
00:11:30.044 --> 00:11:33.951
you would just go through and
instrument your templates.

132
00:11:33.951 --> 00:11:39.728
And I would say update your page object
to hold not only your selectors but

133
00:11:39.728 --> 00:11:43.434
your assertions, and
then write your specs.

134
00:11:43.434 --> 00:11:47.555
But, what I do like about
this is this is very,

135
00:11:47.555 --> 00:11:52.828
very concise, very terse,
and very easy to read.

136
00:11:52.828 --> 00:11:55.897
If you want to dig deeper into Cypress,

137
00:11:55.897 --> 00:12:00.268
this was obviously a very
kind of a quick example.

138
00:12:00.268 --> 00:12:04.477
There is a great title testing web
apps with Cypress by Steve Kenney,

139
00:12:04.477 --> 00:12:05.646
who is legendary.

140
00:12:05.646 --> 00:12:10.277
And if you wanna dig more into Cypress,
I recommend checking that course out.

141
00:12:10.277 --> 00:12:11.297
It's really great.

