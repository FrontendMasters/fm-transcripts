WEBVTT

1
00:00:01.548 --> 00:00:03.400
Homestretch.

2
00:00:06.585 --> 00:00:09.456
I wanna talk about two things, and

3
00:00:09.456 --> 00:00:14.516
it'll probably be a ratio of
one to two-ish or three-ish.

4
00:00:18.142 --> 00:00:22.527
The first thing I wanna talk about is,

5
00:00:25.733 --> 00:00:29.745
Standalone components and
the standalone API.

6
00:00:32.262 --> 00:00:36.615
Admittedly, when I first
started playing around with it,

7
00:00:36.615 --> 00:00:39.060
I'm like, what's this about?

8
00:00:40.897 --> 00:00:46.738
I don't feel like we've
actually solved problems,

9
00:00:46.738 --> 00:00:52.318
that I think sometimes it's
like a kid who doesn't

10
00:00:52.318 --> 00:00:57.249
want to eat their vegetables for
dinner, and

11
00:00:57.249 --> 00:01:02.337
what they do is they just
kinda push it around.

12
00:01:02.337 --> 00:01:06.444
And I think sometimes as engineers,
that's what we do, is we're just like,

13
00:01:06.444 --> 00:01:09.824
I don't wanna deal with this and
let's push it onto the server.

14
00:01:09.824 --> 00:01:11.472
Let's push it onto Q&amp;A or whatever.

15
00:01:11.472 --> 00:01:18.237
And with that said,
I think the standalone API,

16
00:01:18.237 --> 00:01:23.187
which is moving Angular in the right

17
00:01:23.187 --> 00:01:28.302
direction from the sense of it allows

18
00:01:28.302 --> 00:01:33.912
us to do a lot more dynamic composition,

19
00:01:33.912 --> 00:01:41.502
because we're shifting
the focus onto components and

20
00:01:41.502 --> 00:01:46.471
routes, specifically on routes.

21
00:01:46.471 --> 00:01:52.400
And the ability to inject providers

22
00:01:52.400 --> 00:01:58.130
into the routes as you load them and

23
00:01:58.130 --> 00:02:05.243
compose the context in
which a component is

24
00:02:05.243 --> 00:02:10.380
being rendered at runtime is,

25
00:02:10.380 --> 00:02:14.740
I think, very powerful.

26
00:02:14.740 --> 00:02:18.074
And I think we're just
starting to see some of

27
00:02:18.074 --> 00:02:21.684
the interesting things
that we can do with this.

28
00:02:21.684 --> 00:02:27.114
So for me,
I'm warming up to the standalone API.

29
00:02:30.113 --> 00:02:35.061
I believe that the advantage
of it is that it

30
00:02:35.061 --> 00:02:39.602
allows us to do more things at runtime.

31
00:02:39.602 --> 00:02:46.724
I think that what we
are seeing is a module was,

32
00:02:46.724 --> 00:02:51.289
I think, a good mechanism for

33
00:02:51.289 --> 00:02:56.050
creating kind of boundaries.

34
00:02:56.050 --> 00:03:00.877
And so one of the things with,
even JavaScript or

35
00:03:00.877 --> 00:03:05.586
TypeScript moving into
a kind of more of an OOP,

36
00:03:05.586 --> 00:03:11.027
object-oriented programming,
kind of a paradigm.

37
00:03:11.027 --> 00:03:17.025
That I was originally concerned
about it because I personally,

38
00:03:17.025 --> 00:03:24.143
I think that stylistically I leaned
towards more functional programming.

39
00:03:24.143 --> 00:03:28.725
And so I'm like, great,
we're turning JavaScript into Java,

40
00:03:28.725 --> 00:03:33.709
which is funny, because Java,
they're trying to be dynamic and closure.

41
00:03:33.709 --> 00:03:39.452
And it's kinda funny,
it's like we're going in these circles.

42
00:03:39.452 --> 00:03:44.790
But the way that I was
able to resolve that

43
00:03:44.790 --> 00:03:52.641
cognitive dissonance is that
objects represent reality,

44
00:03:52.641 --> 00:03:56.577
we live in a world of objects.

45
00:03:56.577 --> 00:04:01.776
And as an organizational mechanism,
objects and

46
00:04:01.776 --> 00:04:06.365
modules are a great sense-making device.

47
00:04:06.365 --> 00:04:11.877
And I think where we deviate
from reality is when we start

48
00:04:11.877 --> 00:04:17.626
doing things like inheritance
because that just doesn't

49
00:04:17.626 --> 00:04:22.922
happen in the real world
the way that happens in code.

50
00:04:22.922 --> 00:04:26.126
And you just have to be
really careful about that.

51
00:04:26.126 --> 00:04:31.978
And I realized that just
because you can do something

52
00:04:31.978 --> 00:04:37.165
doesn't mean that you're going to, and so,

53
00:04:37.165 --> 00:04:44.087
yes, I acknowledge that I can
do inheritance in JavaScript.

54
00:04:44.087 --> 00:04:49.146
And I can write JavaScript like Java,

55
00:04:49.146 --> 00:04:51.999
but I don't have to.

56
00:04:51.999 --> 00:04:57.440
So I think as an organizational
mechanism it was fine.

57
00:04:57.440 --> 00:05:02.378
The problem is that it
is by nature a static

58
00:05:02.378 --> 00:05:07.035
stationary construct within the app,

59
00:05:07.035 --> 00:05:11.832
and the standalone API just gives us some

60
00:05:11.832 --> 00:05:16.645
more options at runtime, which I like.

61
00:05:16.645 --> 00:05:21.841
And one of the things that I like as well,
and

62
00:05:21.841 --> 00:05:27.742
I'll flesh this out,
is that you can write very,

63
00:05:27.742 --> 00:05:32.099
very portable pipes, directives,

64
00:05:32.099 --> 00:05:38.282
interceptors that you're
no longer having to go and

65
00:05:38.282 --> 00:05:42.237
register those with the module.

66
00:05:42.237 --> 00:05:46.056
And I think this is where people at
the disconnect was, is that I wanna put it

67
00:05:46.056 --> 00:05:49.653
into this thing here, why do I gotta
go register it and come back down?

68
00:05:49.653 --> 00:05:54.556
It sounded like you show up in a town and
you gotta drive across town

69
00:05:54.556 --> 00:05:58.938
to check in with the magistrate,
it doesn't make sense.

70
00:05:58.938 --> 00:06:05.824
So that was just a little
bit of a thought on that.

71
00:06:05.824 --> 00:06:10.235
I think that anybody new to Angular
who's maybe hasn't done it for

72
00:06:10.235 --> 00:06:14.253
a while and they're coming back or
they're just starting,

73
00:06:14.253 --> 00:06:16.717
it's definitely a paradigm shift.

74
00:06:16.717 --> 00:06:21.705
I also have it on good
authority that we haven't

75
00:06:21.705 --> 00:06:26.201
fully seen everything that's possible.

76
00:06:26.201 --> 00:06:31.862
And so I have the benefit of being able to
interface with the Angular core team and

77
00:06:31.862 --> 00:06:33.393
the different ones.

78
00:06:33.393 --> 00:06:38.559
And there's some really, really cool
stuff coming down the pipeline,

79
00:06:38.559 --> 00:06:42.116
and they've done a good
job of looking forward and

80
00:06:42.116 --> 00:06:46.096
really seeing where
the technological landscape is and

81
00:06:46.096 --> 00:06:50.686
kind of what's on the horizon and
making good choices for that.

82
00:06:50.686 --> 00:06:56.549
&gt;&gt; As far as standalone components, they
can be intermixed with regular components?

83
00:06:56.549 --> 00:06:59.276
&gt;&gt; Yep, the interop is seamless,

84
00:06:59.276 --> 00:07:04.631
that you can put static modules
into standalone components and

85
00:07:04.631 --> 00:07:08.582
standalone components into static modules.

86
00:07:08.582 --> 00:07:16.939
&gt;&gt; So maybe you created some kinda
utility component that was standalone,

87
00:07:16.939 --> 00:07:21.328
just has a specific job or something.

88
00:07:21.328 --> 00:07:26.183
You sent directives or
whatnot or pipes or something,

89
00:07:26.183 --> 00:07:32.633
no longer do you have to go into the app
module and make a reference there?

90
00:07:32.633 --> 00:07:37.603
&gt;&gt; Yep, in some cases,
well, the other thing is,

91
00:07:40.254 --> 00:07:44.398
And we saw this with observable operators,

92
00:07:44.398 --> 00:07:50.894
is that it's funny to me that most
of the time when we talk about RSJS,

93
00:07:50.894 --> 00:07:56.720
there's a lot of people that are like,
ooh, that's tough.

94
00:07:56.720 --> 00:08:01.603
But really, what I think
they're getting hung up on is,

95
00:08:01.603 --> 00:08:08.627
are they talking about the observable
stream or the 323 operators that exist,

96
00:08:08.627 --> 00:08:14.043
and it's not actually,
I think it's like 120 something.

97
00:08:14.043 --> 00:08:19.530
And, [COUGH] when Angular first
started using observables,

98
00:08:19.530 --> 00:08:24.598
you would just pull everything in,
you just import it.

99
00:08:24.598 --> 00:08:29.593
And I think that created a lot
of problems, it was very heavy.

100
00:08:29.593 --> 00:08:34.158
And I am a fan of if you're going to
use an operator or use something,

101
00:08:34.158 --> 00:08:37.457
be explicit about it,
be intentional about it.

102
00:08:37.457 --> 00:08:42.827
And so with the standalone API,
there are things that you have to

103
00:08:42.827 --> 00:08:48.811
pull in to your component that before
just came in with a common module.

104
00:08:48.811 --> 00:08:54.713
But the upside is you're able
to pull just that thing in and

105
00:08:54.713 --> 00:08:59.770
not all the other things,
and so I would give it a,

106
00:08:59.770 --> 00:09:04.602
I think it's something that's interesting.

107
00:09:04.602 --> 00:09:09.167
I'm not over the moon in love with it,
not like observables, but

108
00:09:09.167 --> 00:09:12.155
I do think there are some good reasons,
and

109
00:09:12.155 --> 00:09:17.882
it doesn't offend me to the point I'm
like, I'm not using this, this is crazy.

110
00:09:17.882 --> 00:09:22.685
It's pretty painless, and they've
done a pretty decent job of creating

111
00:09:22.685 --> 00:09:25.250
some migration paths for that as well.

112
00:09:25.250 --> 00:09:28.985
&gt;&gt; One tiny more question,
one more question.

113
00:09:28.985 --> 00:09:32.930
Is there a default when you create a new
component of standalone or not standalone?

114
00:09:32.930 --> 00:09:35.117
&gt;&gt; Standalone is now the default.

115
00:09:35.117 --> 00:09:39.773
&gt;&gt; So don't you find that strange if,
I do anyway,

116
00:09:39.773 --> 00:09:43.975
that standalone would kinda be a one-off,

117
00:09:43.975 --> 00:09:49.780
why it would be the default, or
am I not thinking right mind?

118
00:09:49.780 --> 00:09:54.450
&gt;&gt; Well, I think,
especially if it's a one-off,

119
00:09:54.450 --> 00:09:59.009
you wouldn't want to
anchor it unnecessarily to

120
00:09:59.009 --> 00:10:02.583
the rest of the application context.

121
00:10:02.583 --> 00:10:07.870
So if I had a details component,
I wouldn't need to go and

122
00:10:07.870 --> 00:10:14.607
register that up at the module,
I can just register it at the consuming.

123
00:10:14.607 --> 00:10:16.052
&gt;&gt; Okay, yeah, yeah, I get it.

124
00:10:16.052 --> 00:10:20.675
&gt;&gt; So it's a little bit more wiring up,

125
00:10:20.675 --> 00:10:24.104
but it's for a reason, and

126
00:10:24.104 --> 00:10:29.027
what ultimately it does is it allows for

127
00:10:29.027 --> 00:10:33.373
a better signaling of intention.

128
00:10:33.373 --> 00:10:38.538
And more importantly, that you're
not doing these, so for instance,

129
00:10:38.538 --> 00:10:43.629
if I just imported all of RSJS,
you don't know what my intentions are.

130
00:10:43.629 --> 00:10:48.389
I've just imported like 120 operators,
versus if I do from and

131
00:10:48.389 --> 00:10:53.234
of, or whatever, you'd have a pretty
good idea of what I'm up to,

132
00:10:53.234 --> 00:10:56.308
so a minimum, I think it's good signaling

