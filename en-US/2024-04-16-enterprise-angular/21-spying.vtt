WEBVTT

1
00:00:00.940 --> 00:00:05.328
One of the important things about testing

2
00:00:05.328 --> 00:00:10.100
is that you only test
what the function does.

3
00:00:12.030 --> 00:00:19.031
Nothing else, if you're testing
a service that calls HTTP client,

4
00:00:19.031 --> 00:00:27.256
you're not testing HTTP clients ability
to do its job, there's test for that.

5
00:00:28.556 --> 00:00:34.329
So if I were looking at, Let me see here.

6
00:00:40.329 --> 00:00:45.181
What does this method right here,
what does it do?

7
00:00:54.361 --> 00:00:57.745
Just read it out loud and
you'll probably get a pretty good hint.

8
00:00:57.745 --> 00:01:01.009
&gt;&gt; Returns-
&gt;&gt; Return the action.

9
00:01:01.009 --> 00:01:03.079
&gt;&gt; Challenges.

10
00:01:03.079 --> 00:01:07.170
&gt;&gt; Yeah, so,
it's loading challenges, right?

11
00:01:07.170 --> 00:01:12.015
What is it actually doing in the function?

12
00:01:12.015 --> 00:01:13.876
&gt;&gt; Calling the API.

13
00:01:13.876 --> 00:01:16.316
&gt;&gt; Yeah, it's calling dispatch.

14
00:01:16.316 --> 00:01:20.477
And so, if we are going to
test just what this function

15
00:01:20.477 --> 00:01:25.513
does, What do we verify?

16
00:01:27.543 --> 00:01:29.308
&gt;&gt; That we got a 200.

17
00:01:29.308 --> 00:01:31.143
&gt;&gt; No, not even that.

18
00:01:31.143 --> 00:01:36.044
It's when I call load challenges,
I need to just verify

19
00:01:36.044 --> 00:01:40.442
that the load challenges
action was dispatched.

20
00:01:40.442 --> 00:01:46.098
And actually not even that,
I need to verify that this function

21
00:01:46.098 --> 00:01:52.945
load challenges called dispatch with
this object, that's what I verify.

22
00:01:52.945 --> 00:02:00.552
Cuz that's all it's doing, is you're
just testing has it delegated correctly.

23
00:02:00.552 --> 00:02:04.695
And when you have
functions that appear and

24
00:02:04.695 --> 00:02:10.220
you are avoiding any kind of
transformation logic in it,

25
00:02:10.220 --> 00:02:12.997
they're very easy to test.

26
00:02:12.997 --> 00:02:19.029
And I believe that, I wanna say
probably 70 to 80% of your code,

27
00:02:19.029 --> 00:02:22.981
if you do it correctly,
you're just testing

28
00:02:22.981 --> 00:02:27.540
the delegation mechanism because-
&gt;&gt; Just the call.

29
00:02:27.540 --> 00:02:28.373
&gt;&gt; Just the call.

30
00:02:28.373 --> 00:02:32.933
&gt;&gt; Yeah, but does the test runner
have a quick pass, fail, yes, no,

31
00:02:32.933 --> 00:02:34.378
yes, no, yes, no?

32
00:02:34.378 --> 00:02:39.500
&gt;&gt; I mean, so okay, back to the spec.

33
00:02:39.500 --> 00:02:46.146
What we're doing here is
we're spying on dispatch.

34
00:02:49.895 --> 00:02:54.421
We are creating a fake action, so

35
00:02:54.421 --> 00:02:59.594
arrange a cert test, and we are saying

36
00:02:59.594 --> 00:03:04.932
that when we call selectChallenge that

37
00:03:04.932 --> 00:03:11.093
it should have been
called with this action.

38
00:03:14.169 --> 00:03:15.399
Loadchallenges on load.

39
00:03:15.399 --> 00:03:16.659
So this is exactly right here.

40
00:03:16.659 --> 00:03:19.439
So what are we spying on, dispatch.

41
00:03:20.839 --> 00:03:27.434
And we're saying when we call
loadChallenges that we expect that,

42
00:03:27.434 --> 00:03:34.613
The spy was called with this action.

43
00:03:34.613 --> 00:03:35.424
That's it.
&gt;&gt; [COUGH] So

44
00:03:35.424 --> 00:03:39.315
you're coding is pretty minimal
of the unit test harness.

45
00:03:39.315 --> 00:03:44.355
You have to get good at expect
statements and things like that.

46
00:03:44.355 --> 00:03:45.886
It's a one liner, right?

47
00:03:45.886 --> 00:03:50.431
&gt;&gt; I try very hard to
make my code as small and

48
00:03:50.431 --> 00:03:57.403
precise as possible because this is very,
very easy to test.

49
00:04:00.216 --> 00:04:01.121
Arrange.

50
00:04:04.132 --> 00:04:08.491
Act, and even I have some arrange
happening underneath of it, so

51
00:04:08.491 --> 00:04:10.955
it's not written in stone.

52
00:04:10.955 --> 00:04:12.765
But it's just arrange, act, assert.

53
00:04:12.765 --> 00:04:17.632
But ideally, you're looking to test

54
00:04:17.632 --> 00:04:23.725
typically one statement
within the function.

55
00:04:23.725 --> 00:04:28.522
So we talked about mocks, spies.

56
00:04:28.522 --> 00:04:32.472
That's the provide mechanism with
use value, use class, use object.

57
00:04:33.822 --> 00:04:38.387
The next piece,
if your functions are small enough,

58
00:04:38.387 --> 00:04:45.801
all you're doing is spying on the function
that's being called inside the function.

59
00:04:47.201 --> 00:04:51.944
Really, really, really simple and

60
00:04:51.944 --> 00:04:58.217
I can say for
somebody who has been victimized and

61
00:04:58.217 --> 00:05:04.490
traumatized from bad
tests that I'm learning,

62
00:05:04.490 --> 00:05:12.905
and I'm just healing in my heart
to learn to love tests like this,

63
00:05:12.905 --> 00:05:17.580
cuz it's really quite simple.

64
00:05:17.580 --> 00:05:22.930
&gt;&gt; And you use the built-in spec
file with the Just command then.

65
00:05:23.980 --> 00:05:29.111
&gt;&gt; Yeah, so
we're using Just as the test runner and

66
00:05:29.111 --> 00:05:36.024
which I believe is built with
whatever assertion they have.

67
00:05:36.024 --> 00:05:42.033
So let's look at, Maybe just a few more,

68
00:05:42.033 --> 00:05:47.578
because I think that just
that piece right there,

69
00:05:47.578 --> 00:05:51.155
if we can just converge on that.

70
00:05:51.155 --> 00:05:54.452
How do you satisfy dependencies?

71
00:05:54.452 --> 00:05:58.251
How do you spy on functions?

72
00:05:58.251 --> 00:06:05.559
You are light years ahead and a lot of
times the reason why people have a really,

73
00:06:05.559 --> 00:06:10.878
really hard time writing test
is because they're trying

74
00:06:10.878 --> 00:06:15.665
to test something that's
not really testable so,

75
00:06:18.632 --> 00:06:21.078
What do you think we're testing here?

76
00:06:25.928 --> 00:06:27.086
This will be the last one.

77
00:06:27.086 --> 00:06:34.996
And then I will leave you to,
Go explore this application and

78
00:06:34.996 --> 00:06:39.381
the website and-
&gt;&gt; See if it's in the endpoints.

79
00:06:41.061 --> 00:06:42.571
&gt;&gt; Not that it's hitting it.

80
00:06:42.571 --> 00:06:43.519
&gt;&gt; That is calling it.

81
00:06:43.519 --> 00:06:48.085
&gt;&gt; That's calling it, as if you have a
function that's calling another function.

82
00:06:48.085 --> 00:06:54.885
You just have to validate that
the delegation has happened.

83
00:06:54.885 --> 00:06:59.962
And that is conceptually a lot easier

84
00:06:59.962 --> 00:07:07.508
than when you have a method
that's doing 22 things.

85
00:07:07.508 --> 00:07:09.090
It's impossible.

86
00:07:09.090 --> 00:07:10.676
I wouldn't even try.

87
00:07:16.747 --> 00:07:22.025
The Angular team has actually
even done a good job of

88
00:07:22.025 --> 00:07:27.933
providing a testing module,
a testing controller, and

89
00:07:30.968 --> 00:07:35.231
This is a little interesting
because it is asynchronous,

90
00:07:35.231 --> 00:07:39.150
that there's this flush
method that you make a call.

91
00:07:39.150 --> 00:07:41.860
And what we're doing is, in this case.

92
00:07:45.009 --> 00:07:46.362
We're kind of doing two things here.

93
00:07:46.362 --> 00:07:53.631
And I'm going to permit it because this
is, I think, what has been prescribed.

94
00:07:53.631 --> 00:07:59.611
But we're calling it and this right
here I think we could do without,

95
00:07:59.611 --> 00:08:03.333
but it's here so I'm not gonna rip it out.

96
00:08:03.333 --> 00:08:07.722
But what I really care about is, well,

97
00:08:07.722 --> 00:08:15.037
I think what's happening is
that we're calling service.all,

98
00:08:15.037 --> 00:08:19.027
and so we have to call the method, so

99
00:08:19.027 --> 00:08:24.565
we may as well validate
the result in some way.

100
00:08:24.565 --> 00:08:27.828
That's fine, I think we probably
don't need to do that but

101
00:08:27.828 --> 00:08:31.173
it kind of in a way contradicts
a little bit what I'm saying.

102
00:08:31.173 --> 00:08:37.739
But I would not throw a chair
through a window if somebody did it.

103
00:08:37.739 --> 00:08:43.459
It's just, I would say,
do you really need to do this right here?

104
00:08:43.459 --> 00:08:45.609
I think, if anything,
we just need to call it.

105
00:08:46.729 --> 00:08:49.843
Well, the one thing I,
actually, let me back up.

106
00:08:49.843 --> 00:08:54.895
So because subscribe or
observables are lazily

107
00:08:54.895 --> 00:08:59.363
instantiated, is that you have to call.

108
00:08:59.363 --> 00:09:01.283
And so you're getting a result anyways.

109
00:09:01.283 --> 00:09:06.233
So I think at this point,
it's like, well, let validate it.

110
00:09:07.783 --> 00:09:12.338
But here, we called it and
we're saying, hey,

111
00:09:12.338 --> 00:09:15.461
we expected one call to this URL.

112
00:09:19.271 --> 00:09:24.122
So we're saying this is the expectation,
this is what we

113
00:09:24.122 --> 00:09:29.277
expected the request to be,
and then we're calling flush,

114
00:09:29.277 --> 00:09:34.345
which essentially,
it basically simulates an HTTP call.

115
00:09:34.345 --> 00:09:36.668
And from there, we're validating it.

