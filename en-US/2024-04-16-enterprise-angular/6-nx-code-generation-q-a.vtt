WEBVTT

1
00:00:00.300 --> 00:00:02.740
I believe the gentleman in
the corner had a question.

2
00:00:02.740 --> 00:00:06.290
&gt;&gt; Yeah, so you had us create
like a state and a data library.

3
00:00:06.290 --> 00:00:11.236
Would you essentially, and if you're in
a large enterprise, create a state and

4
00:00:11.236 --> 00:00:13.724
a data library for each domain you have?

5
00:00:13.724 --> 00:00:18.387
So whether or
not you would create like a state and

6
00:00:18.387 --> 00:00:22.255
a data library for every single domain,

7
00:00:22.255 --> 00:00:27.390
I think it's really contextual
to the environment.

8
00:00:29.640 --> 00:00:34.216
Again, if I was doing
a fairly small application,

9
00:00:34.216 --> 00:00:38.270
I would have just a core state and
a core data.

10
00:00:39.570 --> 00:00:43.750
But, especially with the CLI, it's very,

11
00:00:43.750 --> 00:00:48.920
very easy to refactor through
promotion is that you're

12
00:00:48.920 --> 00:00:56.335
just one command away from cutting
a new library and dropping that in.

13
00:00:56.335 --> 00:01:02.796
Especially with the template wizard,
it's pretty easy and

14
00:01:02.796 --> 00:01:07.863
one of the things that
we'll just see this theme

15
00:01:07.863 --> 00:01:12.424
throughout the day is that, engineers and

16
00:01:12.424 --> 00:01:18.377
I think there's a part when
you come to a coding workshop

17
00:01:18.377 --> 00:01:24.330
it's like show me how the code works and
there is that but

18
00:01:24.330 --> 00:01:29.396
I think more importantly
is that at this level,

19
00:01:29.396 --> 00:01:33.867
it's examining how we think about code.

20
00:01:33.867 --> 00:01:39.103
And so that is that's a great question,
do we have a separate data

21
00:01:39.103 --> 00:01:44.817
in state library for every kind of
entity in the domain or every domain,

22
00:01:44.817 --> 00:01:50.054
and in this case we have a domain
with kind of a single entity in it,

23
00:01:50.054 --> 00:01:53.320
and for the sake of this exercise, yes.

24
00:01:53.320 --> 00:01:56.053
&gt;&gt; Do the nouns need plural?

25
00:01:56.053 --> 00:01:59.997
Or do the nouns need to be plural,
like users-data or

26
00:01:59.997 --> 00:02:03.779
workshop-data where they
list multiple things?

27
00:02:06.259 --> 00:02:12.593
&gt;&gt; So typically I make them plural
because I believe that encapsulates

28
00:02:12.593 --> 00:02:18.051
a collection of the thing and
so there's some weird ones.

29
00:02:18.051 --> 00:02:22.258
Like obviously I wouldn't do logins data.

30
00:02:22.258 --> 00:02:27.041
So there's somewhere semantically it
doesn't make sense again, you want your

31
00:02:27.041 --> 00:02:31.288
code to be really self-documenting and
reflective of your reality.

32
00:02:31.288 --> 00:02:36.706
But i would say if you were
dealing with a single user then

33
00:02:36.706 --> 00:02:41.906
i think you could have like
a user state in a user data.

34
00:02:43.056 --> 00:02:47.353
But typically, if I'm dealing
with more than one of the thing,

35
00:02:47.353 --> 00:02:48.872
then I make it plural.

36
00:02:48.872 --> 00:02:54.729
And that's just how we talk, so
&gt;&gt; And then the question from earlier,

37
00:02:54.729 --> 00:02:59.184
he clarified, if I have different
repos for the UI, the UI is Angular.

38
00:02:59.184 --> 00:03:04.562
And then the API, which is Node.Js,
would I use Nx for the Angular app?

39
00:03:07.892 --> 00:03:13.486
&gt;&gt; I would say that if
everything is working, fine,

40
00:03:13.486 --> 00:03:20.557
and it's not getting in the way
of your business initiatives.

41
00:03:20.557 --> 00:03:24.441
Then you may not need to do anything.

42
00:03:24.441 --> 00:03:25.971
On the other hand,

43
00:03:25.971 --> 00:03:31.816
I would say that Nx would be a great
candidate to put everything in there.

44
00:03:31.816 --> 00:03:38.461
And I oftentimes will run like Angular and
Node or Angular Node React.

45
00:03:38.461 --> 00:03:42.285
And so answer is,
if it's business as usual and

46
00:03:42.285 --> 00:03:47.829
it's not impeding your ability to
deliver value to your customers,

47
00:03:47.829 --> 00:03:51.365
you could probably stay the course.

48
00:03:51.365 --> 00:03:58.232
But if it is slowing you down or creating
friction and you need to go faster,

49
00:03:58.232 --> 00:04:05.004
absolutely moving those into a single
mono repo is going to speed that up.

50
00:04:08.106 --> 00:04:12.174
&gt;&gt; If I need to make changes
across every data service,

51
00:04:12.174 --> 00:04:18.274
like supporting feature flags and the URL
for version one versus version two,

52
00:04:18.274 --> 00:04:23.843
how would you handle that,
would you use something like inheritance?

53
00:04:23.843 --> 00:04:25.415
&gt;&gt; I love that question so much.

54
00:04:25.415 --> 00:04:29.484
So if you need to make
a cross cutting change,

55
00:04:29.484 --> 00:04:34.635
a across multiple services,
how would you handle that?

56
00:04:36.085 --> 00:04:42.618
Well, ideally,
I would handle that with an interceptor or

57
00:04:42.618 --> 00:04:46.415
some aspect oriented mechanism.

58
00:04:47.705 --> 00:04:55.066
So without understanding
what the actual use case is,

59
00:04:55.066 --> 00:05:00.347
that if you have something that impacts

60
00:05:00.347 --> 00:05:07.242
a large number of things,
try to extract that out.

61
00:05:07.242 --> 00:05:10.260
So you can change that
independently of the thing.

62
00:05:10.260 --> 00:05:13.857
And so it's almost the opposite
of inheritance and

63
00:05:13.857 --> 00:05:16.959
that you're leaning towards extraction.

64
00:05:16.959 --> 00:05:21.189
And so you want to converge on
the things that are the same and

65
00:05:21.189 --> 00:05:24.569
then the things that are different.

66
00:05:24.569 --> 00:05:27.419
Those are the things that
you wanna program towards.

67
00:05:27.419 --> 00:05:31.336
So if you had to make a change
to like all the services,

68
00:05:31.336 --> 00:05:34.658
I would ask myself,
what do I need to change?

69
00:05:34.658 --> 00:05:38.129
Let's say it's the remote endpoint.

70
00:05:38.129 --> 00:05:42.958
Well, I would try to capture
that with an interceptor or

71
00:05:42.958 --> 00:05:48.200
in this case, possibly even
just an environment variable or

72
00:05:48.200 --> 00:05:51.099
some of runtime configuration.

73
00:05:51.099 --> 00:05:58.763
So that the core body of the service
itself stays the same and

74
00:05:58.763 --> 00:06:07.055
the context in the execution
details are handled outside of it.

75
00:06:07.055 --> 00:06:13.316
One of the things that really
bothered me about Angular JS and

76
00:06:13.316 --> 00:06:17.368
even Angular pre-Redux is that You had

77
00:06:17.368 --> 00:06:21.912
services that were not
only responsible for

78
00:06:21.912 --> 00:06:26.456
communicating with a remote endpoint, but

79
00:06:26.456 --> 00:06:31.526
they were also responsible for
managing state.

80
00:06:31.526 --> 00:06:33.976
So I'm gonna go call the service and
when I get it back,

81
00:06:33.976 --> 00:06:37.035
I'm gonna transform it into something and
then I'm gonna save it.

82
00:06:38.045 --> 00:06:40.970
But then if you wanna make a change,
you wanna get something,

83
00:06:40.970 --> 00:06:44.973
you're going to talk to me and I'm gonna
also manage the state for this thing.

84
00:06:44.973 --> 00:06:46.139
And that really,

85
00:06:46.139 --> 00:06:50.896
really bothered me because that's
not a clear separation of concerns.

86
00:06:50.896 --> 00:06:54.161
Anytime you ask yourself, what is this do?

87
00:06:54.161 --> 00:07:01.672
And you're like, well, does this end,
the men who say end, stop, that's a flag.

88
00:07:01.672 --> 00:07:05.882
You're doing probably more than one thing.

89
00:07:05.882 --> 00:07:13.081
And so, if we look at, For
instance, the note service,

90
00:07:15.248 --> 00:07:19.710
Other than,
It has this console log in here.

91
00:07:19.710 --> 00:07:20.701
I don't know where that came from.

92
00:07:20.701 --> 00:07:25.274
But what do we notice about this?

93
00:07:25.274 --> 00:07:29.805
How many lines are each of my functions?

94
00:07:32.488 --> 00:07:38.166
The body is just doing one thing.

95
00:07:38.166 --> 00:07:42.811
And what this allows me
to do is because now

96
00:07:42.811 --> 00:07:47.866
it's separated out from the state portion.

97
00:07:47.866 --> 00:07:50.566
Let's say I wanted to have
a GraphQL endpoint, so

98
00:07:50.566 --> 00:07:53.537
it can totally different
transportation mechanism.

99
00:07:54.737 --> 00:08:01.366
Well, I could create notes,
GraphQL data library,

100
00:08:01.366 --> 00:08:05.935
encapsulate the GraphQL stuff, and

101
00:08:05.935 --> 00:08:13.612
then the state layer doesn't
have to know anything about it.

102
00:08:14.822 --> 00:08:19.431
They just know that I call this thing,
and this is what I get back, and

103
00:08:19.431 --> 00:08:24.220
they are communicating on a contract and
everything is encapsulated.

104
00:08:27.275 --> 00:08:30.549
It took me a long time
to figure that out but

105
00:08:30.549 --> 00:08:34.398
at scale it's very painful
to not figure it out.

