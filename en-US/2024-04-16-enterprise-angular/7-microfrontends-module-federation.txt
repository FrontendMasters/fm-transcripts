[00:00:00]
>> Let's get into. A little bit more of a precarious subject here. Conceptually, I love the idea, but if something goes wrong, I will say that this is still new technology and I think that there's very few people that have deep experience with federated modules or micro front ends.

[00:00:30]
So, real quick, who here knows what a micro front end is?
>> Commonly I don't use it, but I have some experience, learning a little bit about.
>> Right.
>> Angular and react is one point, they want to have the angular and react.
>> Mm-hm.
>> Components that one team using angular and then the other team using react.

[00:01:00]
So how can we share the components together, right? So there's some library that we can generate, the standard component or reusable component that both Angular and React can use together [INAUDIBLE]
>> Additional commentary from the corner?
>> I've understood cuz I actually use it to some degree, it's the goal of building the app so that a specific feature, like cart, can be ran by a team and deployed separately than the rest of the entire application.

[00:01:39]

>> Bing bong.
>> But I've only done it when it's on a sub-domain.
>> Okay?
>> Not I used to work for target. I know their cart is a micro-frontend on the same page as different features. I just don't know how to do that part.
>> So you both have really just hit on the essence.

[00:01:56]
It's the idea that you take a single feature or some functionality, and you deploy that independently, is essentially a standalone remote application that gets loaded in to a host or shell application. What this allows us to do, which I think is really cool, is that we can have any number of independently deployed applications that we are pulling in to our host application.

[00:02:39]
So if you have typically an application with four features, and somebody makes an update to one of them and they wanna deploy it, so this is a monolith. We'll guess what? You have to deploy all the features, and this is where having to coordinate that across the organization can be really, really tough.

[00:03:10]
I have seen changes and deployments sit in the queue for over two weeks or more. Now imagine we're talking like a fortune 100 ish company that it's sitting in the hopper, because it required six or eight people to be in a room for this thing to deploy. So from a technological standpoint micro front ends are compelling.

[00:03:47]
From a human communication standpoint, it's a game changer. The fact that you have the ability to say, I'm going to deploy my feature. And I don't have to go get permission. And I don't have to worry about air traffic control. And I don't have to get my permission slips signed.

[00:04:09]
So I can do this. This is really important. Not only that is there are some huge performance benefits for being able to load your application in pieces. So with that said, let's do an example. We created the workshop feature in the school directory. Let's do one more and I'm just gonna show it to you here.

[00:04:54]
So it's right. In here, all the snippets, so this is where I haven't, there's a setting you can set on your computer to just automatically publish and I haven't done that yet, but don't judge. All right, cool. Let's, I'm gonna check out another branch off of this because we are turning a corner and.

[00:05:25]
We'll call this Workshop. Federated modules. It's like that song. Gotta keep on federated. Anybody who was a teenager in the 90s I know what I'm talking about. Let's look at the. Library real quick just the file structure. I think what I wanna do is, inside of. They wanna put I don't think.

[00:06:19]
I didn't actually generate a front-end application yet. This makes it super easy. All right, life is good. So what we're going to do in the concept of microphone ends is that you have your host application and then you have your remote application. So the first thing that I'm going to do is I'm going to generate.

[00:06:52]
My. Host application. So, following a pretty standard format of mpx, nx, g for generate, and we're doing angular host. And we're generating a remote application, or actually we're gonna generate this, it's gonna be static for a moment. Because I wanna walk through what's happening under the hood to make this kinda work.

[00:07:26]
And then we're gonna do a couple things to make it dynamic. So, putting it in the work I wouldn't have even caught this. There was a question about should it be plural? And so, thank you for that. So, basic configuration. I like SAS, Cypress. I'm gonna add Tailwind.

[00:07:53]
I think Tailwind's pretty awesome. And then prefix is the NPM kind of a prefix that you use if you're doing any kind of package aliasing or whatever, all right? Let this run and we're gonna do this as provided. I really hope that we can come to maybe a better API run this thing right here.

[00:08:28]
I think it's funny that this when Angular, no, I think Angular got good around Angular four and a half. Up to then it was tough and I think one of the big reasons, or I think how I got so good, is because the Angular team teamed up with the Amber team and all of a sudden we got a CLI that took care of a lot of these things.

[00:08:52]
So I think this looks right. So I'm gonna generate this again without the safety net. And if I don't make it back, you guys can have my records. All right, so now I have generated my remote app. Now, I need to. Generate, or my host, I need to generate a remote app and so.

[00:09:33]
Let's think, I'm not planning on digging into this. I'm just thinking of something that would have to do with a session. How does that sound like sessions? Cool, everybody, all right, So let's go ahead and drop this in. I wanna put the safety net on, a seat belt.

[00:10:13]
And then the host, we do need to fix that is gonna be workshops And we're gonna call this sessions. All right, this is look right I think, feel free to yell out if I spelled something wrong. I think we're in business. All right. YOLO, okay? Let's see what happens, mpx, nx, serve, workshops.

[00:11:33]
I am just hanging in the balance here, just riding the void. It's funny thing the narratives you tell yourself, you're like, my God, just make this work. I'll stop playing video games I promise. [LAUGH] All right. So what this has done is it detected that we have the host and we have the remote, right?

[00:12:08]
So, a host, one remote, and it's picking up on that, and this should work. So, you can also see 4201 is where the remote is. All right, let me come over here. So what we have is this nx welcoming thing which is not Is helpful. Also very clever branding, good job, guys.

[00:12:44]
And what it's done is it's generated two routes here. And if I click on this, everybody see that? Wow, microfinance for the win right here. So, how is this happening? What reality are we in right now? Well, it looks like magic, it's not, and I can explain. Let me close some of this down and I wanna walk through some of this code and so we can see what's the deal.

[00:13:34]
All right, the most important thing in this. You have this module federation config, so this is all happening through webpack. And you can see here that in the configuration. We have the name of the host. Then what we have is the remotes, right, sessions. And so when this spins up that Webpack specifically is saying, this is who you are, but you also have these additional remotes.

[00:14:31]
And so if I could generate two or three more kinda remotes and say, workshops is the host, and then this would just kinda fill out. And then if we go to. Remember how I said with the standalone API that everything it's moving to a component and more specifically a route centric, kind of paradigm is that inside of the workshops we have a route here for sessions and it's importing sessions routes.

[00:15:24]
So that sessions is coming from that Webpack config that we saw. Then what it's doing is, it's loading it and it's saying, hey, go get me the remote routes. Then I gotta figure out where in the world. The sessions, I bet it. So this is kinda interesting, I actually did not put it in the school kind of subdirectory, but anyways, it still works.

[00:15:55]
It doesn't matter. So here. It's exposing the routes. And so I kinda had to click through, as I was wrapping my mind around this, and to see, cuz you have two things that are totally unrelated in a way that are now being kinda stitched together. And it's ultimately happening first at the webpack level, but then also on the routes and you're basically lazy loading this entire application is a micro front end.

[00:16:34]
And then if you go and. Some routes I'm trying to think if. Somewhere in here. That's why, all right. So it's pointing to remote entering that's important, so typically the convention is that, within an application you have a remote entry kind of a folder that has kind of the hook into everything else.

[00:17:14]
And so, what we have here is the basic kind of top level route. And I can just scoot this over. So, it's saying when you load this, so in the down here, so we'll just try to tie this together. It's hitting routes, kind of the key here, or sessions, which is then pointing to the routes, which is then saying, when you hit this, go pull in the entry routes.

[00:17:52]
And then the entry routes is saying, kind of the root route on this is the remote entry component, drop it in and render it. What I would also recommend, at some point, just kind of clicking through some of this and nothing beats a tour of the application to just kind of start to figure out what's happening.

