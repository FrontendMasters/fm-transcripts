[00:00:00]
>> This is where it gets fun for me. Because using a tool like Nx, and I'll just pull this up real quick. I feel like probably, well, as I don't wanna assume anything so, there is a ton of tooling around these extensions. And so I recommend taking some time, clicking through here.

[00:00:37]
There's something for everybody. Even this idea of, what if you had one API and you wanted to have, let's say, a React app and an Angular app? It's very easy to put that all into one place. And now you're able to share that same API and keep that in close proximity.

[00:00:59]
So the one thing that I do wanna kinda just point out real quick and then we'll get into it, is they have a ton of generators. And to me, because I'm super lazy, I love generators. Because why let a human being do what a robot can do perfectly every single time?

[00:01:26]
And I'm trying to see if I can just find this real quick. Well, actually, let's just hop into the terminal. All right, so we're currently in our enterprise app, at the root of it. And because we now know that we want to add another feature into our application, we can do this very easily.

[00:01:57]
And I'm not gonna do it just yet, I'm gonna just run some commands. And this is usually what, When I'm digging into this, typically what this workflow looks like. So, I'm thinking, I want to generate a library. And so I want to generate a library. So we have workshops is the feature slice.

[00:02:29]
And so what we can do is, we can come in here, and I'm just going to, I don't really want to type this, so I'm gonna just paste it in. It's all into the site. And, So, I'm gonna modify this a little bit. I'm also gonna put a d flag on here.

[00:02:58]
So I recommend doing this, is that, I will tably run a command sometimes five, six, seven times, until I get it just the way that I want it. I don't want it differently, so. So we have workshops, we want to do, well, clearly, we need somewhere to hold our service.

[00:03:22]
So I'm going to just start to modify this into the new feature slice that we're targeting. So workshops-data, pretty simple. So we're generating a library. This is where you wanna put it. It's standalone, we'll talk about it a little bit later, it has to do with the standalone API.

[00:03:50]
You get something generated a little differently, depending on what you choose. And I'm just going to hit Enter. So what this is gonna do now is saying, or it's gonna say, hey, if you did not have the flag on here, this is what we would have generated. So I'm gonna go ahead and do that.

[00:04:21]
There we go. And I'm afraid to run this, but let's just see what happens. So one of the things, with Angular, you have the CLI, with Nest, you have the CLI, but Nx takes all of that and just puts it on steroids, basically. So the one thing is because I do not have an Nx installed globally, is I was getting bitten by that.

[00:04:51]
And so now, There's not a lot here, but you can see that It's starting to generate some information to create observability into your application. As if we were to build this out, and we will, suddenly this tooling becomes a lot more interesting. But, I think this is pretty cool that we get this for free.

[00:05:23]
So let's revisit this in a little bit and let's keep building. All right-
>> I guess there's a question from online.
>> Yes.
>> Could you explain the advantages of the mono repo style again? Aren't we actually coupling these projects together in the mono repo? I'm worried about, in development, spending more time solving problems with Nx than actually developing.

[00:05:57]

>> So that's a very good question. And there's a balance in engineering between coupling and cohesion, is that you want things to be grouped together that are conceptually in proximity. At the same time, you want to keep things independent. So you can have proximity and cohesion without creating coupling..

[00:06:37]
And so I think that is a fair question. And the, From a developer experience, it makes it a lot easier when you are working on a front-end app and you're working on the API at the same time, so a full-stack experience. I've had it where I've had to jump from three different instances of APIs.

[00:07:13]
I'm here, and then I'm here, and then I'm here, what? One of the advantages that mono repos do is that they lower kind of the cognitive impedance to understand where everything is. This is why when I run my end-to-end test, I like that end-to-end app to be right next to the app that it's tested, because it's right there.

[00:07:37]
Versus, and I've seen this work, imagine having 20 different API endpoints and they're in 20 different repositories. Now, imagine having to work on those. So this is where it's like, you clone the repository, you clone the repository, you clone the repository. And I'm not saying that's bad, but I'm saying there is overhead from the developer experience to having these things broken up into a bunch of different repositories.

[00:08:15]
Where having it broken up, where that complexity transfers, it's harder to develop, it's a lot easier to deploy when things are independent. So just so I'm not sitting here with mono repo rose-colored glasses, it is difficult or more difficult, and you have to factor in how you're going to deploy the individual apps within the mono repo.

[00:08:43]
As well as, here's another good trade-off, that when you have, let's say, five Angular apps in a mono repo that are sharing the same, essentially, package manifest. It's very easy to make sure that everybody is using the same version of Angular, or Nest, or whatever. So version control is a lot easier.

[00:09:08]
But on the flip side, when you go to deploy the application and you have seven different apps or whatever, all of those packages that are defined in that single top-level manifest is going to get dumped into each individual app, and that's a problem. And so there's ways to get around that, and it requires some additional markups.

[00:09:36]
So, I think the lesson here is that nothing is for free. What I would say and challenge everybody is, the whole point of enterprise development is to have a deep understanding of the enterprise and the domain that you're in. And then choosing the appropriate technology that's appropriate for the time that you're at or the season you're at, the timeframe, and ultimately, is going to serve your organization's best interest.

[00:10:15]
So being a consultant for instance, if I was dealing with a completely new team, and they had never done Angular before, well, the way that I approach that team and I train them and the solutions that I'm going to present is going to be a lot different. Than if I was talking to a seasoned, SEAL's team six style, they can do anything, is we're going straight to level 400 stuff.

[00:10:45]
But we do not serve our team members and our clients well, we don't calibrate our solutions and our approaches to where they are and what serves them the best, cognitively and emotionally, and the organization. So hopefully that was helpful. Yes.
>> What's the difference between Turborepo and Nx?

[00:11:08]

>> They are, I think, just different flavors of the same concept.
>> It's really nice when you're developing libraries and packages that rely on each other and don't have to work in a bunch of different repos, especially with things like pnpm workspaces.
>> Yep, so that is one of the benefits of being in a mono repo, is proximal convenience, is that everything is kind of in one place.

[00:11:40]
So when we cloned the repo, what did we get? Well, we got 12 apps for free in one place. And that's pretty awesome. So I generated the lib for the, Let's go all the way down the bottom, for the data. Now, let's do one other thing, Real quick, is, Let's go ahead and generate a service.

[00:12:14]
So if I wasn't offering commentary I would actually generate this all into one script and run it all at once. But what I'm hoping to highlight is that all of the heavy lifting where, I don't know if you've ever had to go on like, okay, I'm gonna create a component, I'm gonna create a template, I'm gonna create my style sheet, and you're doing that by hand over and over and over.

[00:12:36]
Those days are gone, is that, you can generate an entire application shell off of the domain in minutes. So let's do one more. I'm gonna just do the service here. And hopefully that copied. All right, Let me just run this with the d flag. And I would imagine without the commentary, We would have been done with both these commands in a matter of minutes.

[00:13:17]
I totally did that backwards, didn't I? [LAUGH] challenges-workshops, that would be like workshops-data. All right, let's try this. There we go. All right, Now, what we can do is just to kinda flex a little bit. I'm gonna go back into my repository and I'm gonna just pick up any old service.

[00:13:54]
I'm gonna go with notes, not the same spec. I'm gonna just pick this up. And I'm gonna go back into my tool. And I'm gonna paste this in. And so this is why I really, really, really, really like this. And so the keyword here or the base word is note.

[00:14:16]
So we'll just go note, singular. I'm gonna hit Enter. Then what I'm gonna do, because I'm not dealing with any of these domain models, I'm just going to go, workshop. So this is a fully functioning service that I can now, My friend was actually helping me with this sample app.

[00:14:38]
And he's like, I put a copy button in there, I was so sick of having to drag. I hope you don't mind. I'm like, push that into Master, my friend. So go here into workshops-data, Into the service. And there we go.

