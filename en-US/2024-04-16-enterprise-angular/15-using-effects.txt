[00:00:00]
>> Now, we're using EntityState, which, let me see if I can click in here. EntityState is an array of IDs, and then it's a dictionary or a key value pair of the objects themselves. So what you have is an array of 1, 2, 3, 4, 5, 6. You just have the property as the id and then the value is the object itself.

[00:00:30]
And that is pretty much it. It's an object with the id. [COUGH] Is a property, and then the object itself is the value. When we extend EntityState, it's creating these IDs and entities for us. We get that for free. We're also extending it. Meaning that we want to track the selected id.

[00:01:05]
So when you click one, we wanna track that. If there's an error, we wanna track that. We also wanna track if essentially data has been loaded. So typically on that first load, do we have workshops? Are they loaded? Well, the store says yes. Or creating an EntityAdapter. So this is taking our collection and turning it into this shape.

[00:01:36]
One thing I recommend is if you click on these types, they'll take you right into the type definitions. They're very informative. So you have all sorts of things, getSelectors, selectid, all sorts of stuff. So we're creating an EntityAdapter, then we're defining our initial state. So we have to say what is the state that we're starting out with, which is workshop state right here.

[00:02:08]
And we're just pre setting loaded to false, because obviously it's not loaded. What I've done so I'm not burdened with creating a fill of failure callback function or really a callback for every single time something fails, all I've done is I've grouped all of these actions into a single group.

[00:02:31]
And then if any of these go wrong, just call on failure. So that's why you're seeing this right here. [COUGH] Now, this is really, in my opinion, where all of the complexity exists for the Reducer. And it is, essentially you're calling it createReducer. You are passing in the initial state [COUGH] and then you're chaining like a bajillion of these on method calls.

[00:03:14]
They're basically dynamically wiring up, The action types and the responses to the Reducer. Before you'd had to do this by hand and it was, I mean, this isn't that much greater but it is when you got a template wizard. But they've just tried to streamline it by just essentially passing, and when this happens do this, and it takes two parameters.

[00:03:48]
The first one is always state, because it's always returning state, and the action that is going to determine what gets called. So let's say when this thing gets called, essentially, look for this. So they're creating a map under the hood, I believe. And then they're invoking this function.

[00:04:07]
So kind of interesting functional things. Now, What do we notice about these actions here? What do all at least five of these have in common?
>> They're taking a state variable.
>> Well, look at the action type.
>> They're all success.
>> Right. Now we are to the hard part.

[00:04:40]

>> I'm sorry, what was that?
>> They're all success.
>> This is-
>> They're all-
>> Something good.
>> They're all success. They're all responding to success action types.

