WEBVTT

1
00:00:00.230 --> 00:00:06.112
I wanna do just a real quick detour

2
00:00:08.962 --> 00:00:15.601
Because I think that This is super useful.

3
00:00:15.601 --> 00:00:20.853
We should have the ability to consume,
remote,

4
00:00:20.853 --> 00:00:25.215
endpoints in the easiest way possible.

5
00:00:25.215 --> 00:00:30.643
And the best way to do that,
in my opinion is with JSON server.

6
00:00:30.643 --> 00:00:35.896
So I don't know if anybody's
ever heard it or used it,

7
00:00:35.896 --> 00:00:42.877
but I wanna take just a few minutes
real quick and show you how this works.

8
00:00:42.877 --> 00:00:48.438
So JSON server is incredibly simple.

9
00:00:48.438 --> 00:00:54.580
I think this is gonna be
approximately a 5 minute demo.

10
00:00:54.580 --> 00:01:01.938
But it is a game changer when
you are trying to approximate or

11
00:01:01.938 --> 00:01:07.692
you are working faster
than the backend team.

12
00:01:07.692 --> 00:01:13.565
So all JSON server is, it's a simple

13
00:01:13.565 --> 00:01:18.302
express node implementation

14
00:01:18.302 --> 00:01:23.038
that takes some basic JSON and

15
00:01:23.038 --> 00:01:27.972
exposes it as a REST endpoint.

16
00:01:27.972 --> 00:01:34.765
So what I can do is we
were doing workshops.

17
00:01:34.765 --> 00:01:38.873
So I'm just going to create a new file.

18
00:01:38.873 --> 00:01:42.631
Call this workshops.json.

19
00:01:42.631 --> 00:01:47.744
And This isn't like real JSON, so

20
00:01:47.744 --> 00:01:52.722
I always kind of mess this up, All right.

21
00:01:52.722 --> 00:01:55.219
There we go.

22
00:01:55.219 --> 00:02:00.201
All right, so all I wanted to do
is pull this mark challenges array

23
00:02:00.201 --> 00:02:02.478
that we did out of the facade.

24
00:02:02.478 --> 00:02:08.543
And push it into the service or
push it into essentially an endpoint

25
00:02:08.543 --> 00:02:13.649
that we can then consume with
an asynchronous service.

26
00:02:16.281 --> 00:02:23.076
So I'm just going to,
Something about this event,

27
00:02:23.076 --> 00:02:30.818
like, let me just,
There we go, little buddy.

28
00:02:37.997 --> 00:02:41.100
Yeah, all right.

29
00:02:41.100 --> 00:02:44.119
So now, what you can do?

30
00:02:44.119 --> 00:02:48.802
Just a JSON file, there's nothing
up my sleeves at all, okay?

31
00:02:48.802 --> 00:02:49.784
Not trying to fool you.

32
00:02:52.871 --> 00:02:58.345
In your package.json,
I'll actually show you,

33
00:02:58.345 --> 00:03:05.231
there's two packages that I
install when I'm setting this up.

34
00:03:05.231 --> 00:03:12.647
The first one is obviously
a JSON web server,

35
00:03:14.936 --> 00:03:18.349
Or just json-server, okay?

36
00:03:18.349 --> 00:03:25.295
What I also install in
parallel is concurrently.

37
00:03:25.295 --> 00:03:28.804
What that allows me to do is to, well,

38
00:03:28.804 --> 00:03:33.961
you can see it right here is
that I'm able to essentially

39
00:03:33.961 --> 00:03:38.369
create concurrent commands and
execute them.

40
00:03:38.369 --> 00:03:44.271
Concurrently, and so
this is where I will do,

41
00:03:50.023 --> 00:03:55.634
Just Paste this in,

42
00:03:55.634 --> 00:03:58.666
we'll do a workshops.

43
00:04:07.393 --> 00:04:11.217
No, that's horrible.

44
00:04:11.217 --> 00:04:13.514
I got more work to do.

45
00:04:13.514 --> 00:04:15.061
I hate it.

46
00:04:15.061 --> 00:04:16.064
I wanna do work.

47
00:04:19.761 --> 00:04:20.928
Or even take this one.

48
00:04:25.687 --> 00:04:26.485
Fine, I'll do it.

49
00:04:31.627 --> 00:04:36.503
So One thing

50
00:04:36.503 --> 00:04:41.807
that I think it's pretty
obvious at this point after

51
00:04:41.807 --> 00:04:46.867
spending an entire day
hanging out with me is that I

52
00:04:46.867 --> 00:04:52.547
really like to think about
hard programming problems.

53
00:04:52.547 --> 00:04:58.307
But I do not like to spend a lot of time

54
00:04:58.307 --> 00:05:04.453
kind of wallowing around in fatigue.

55
00:05:04.453 --> 00:05:09.140
And so even there's kind of in a weird

56
00:05:09.140 --> 00:05:14.228
way, I kind of get a little
bit self-conscious.

57
00:05:14.228 --> 00:05:19.185
Oops, wow, I don't mean to do that,
I just blew the place up.

58
00:05:19.185 --> 00:05:21.483
I don't even know what happened.

59
00:05:21.483 --> 00:05:27.400
I get a little bit self-conscious
about the fact that I'm copying and

60
00:05:27.400 --> 00:05:30.308
pasting and moving stuff around,

61
00:05:30.308 --> 00:05:35.376
but I would much rather, on principle,

62
00:05:37.990 --> 00:05:44.297
Hang out with everybody here and
talk about problems and

63
00:05:44.297 --> 00:05:49.664
how to solve them versus
writing the same bits of

64
00:05:49.664 --> 00:05:55.569
code that I've written
a Brazilian times before and

65
00:05:55.569 --> 00:05:59.477
it's just not interesting to me.

66
00:06:02.253 --> 00:06:04.653
All right, I think that's it.

67
00:06:04.653 --> 00:06:13.249
Now Let's

68
00:06:13.249 --> 00:06:15.062
go 3500.

69
00:06:16.603 --> 00:06:21.034
So one of the odd pieces is that
eventually, like port management.

70
00:06:21.034 --> 00:06:25.921
Especially when you're going
with in increments of 100.

71
00:06:25.921 --> 00:06:28.794
I could probably do better but,

72
00:06:34.141 --> 00:06:40.584
All right, npm run s, and
I've already forgotten it.

73
00:06:40.584 --> 00:06:42.724
Man alive.

74
00:06:42.724 --> 00:06:44.692
Workshops-json.

75
00:06:44.692 --> 00:06:47.847
So I did have serve, and
I'm like, that's too much.

76
00:06:47.847 --> 00:06:51.917
Let's just, I think we understand
what I'm trying to say, all right.

77
00:06:55.831 --> 00:06:56.819
Wow, that was fast.

78
00:06:59.426 --> 00:07:03.711
So here you go, JSON, and
you can actually create, read, update, and

79
00:07:03.711 --> 00:07:04.853
delete in memory.

80
00:07:04.853 --> 00:07:11.038
One of the other things that I will show,
since we're here,

81
00:07:11.038 --> 00:07:17.725
is that when I'm setting up nest,
that nest has a global prefix.

82
00:07:17.725 --> 00:07:22.176
And so everything ends up,

83
00:07:22.176 --> 00:07:25.465
did I do this right,

84
00:07:25.465 --> 00:07:30.119
ends up being host port API.

85
00:07:30.119 --> 00:07:35.227
And what I ultimately wanna do
is I want this to be as close as

86
00:07:35.227 --> 00:07:41.612
possible because I want to be able to
change the composition at runtime.

87
00:07:41.612 --> 00:07:47.661
So as a result, What I have done is,

88
00:07:47.661 --> 00:07:53.543
if we go into Server,

89
00:07:53.543 --> 00:08:00.616
there is a routes, the JSON,
it's just a really simple kind of a regex.

90
00:08:02.927 --> 00:08:07.777
And so
this is why when you see me start it,

91
00:08:11.222 --> 00:08:16.155
Somewhere in here, yeah,
I'm pointing to the routes here.

92
00:08:16.155 --> 00:08:21.139
The other thing that I'm
doing which I'm not doing or

93
00:08:21.139 --> 00:08:27.245
haven't done yet but
is that because it is essentially express.

94
00:08:27.245 --> 00:08:33.631
That it's really easy to set up
a lightweight authentication

95
00:08:33.631 --> 00:08:39.784
mechanism to just basically
generate simple JSON for off.

96
00:08:39.784 --> 00:08:44.884
So you can absolutely simulate that

97
00:08:44.884 --> 00:08:49.479
in less than 70 lines of code.

98
00:08:49.479 --> 00:08:52.587
So you get that for free as well.

