WEBVTT

1
00:00:00.003 --> 00:00:07.956
&gt;&gt; Lukas Ruebbelke: So, how many people
know what the Facade pattern is?

2
00:00:07.956 --> 00:00:13.605
I would wager you could
probably infer a reasonable

3
00:00:13.605 --> 00:00:18.468
guess based on the fact
that it's a Facade.

4
00:00:18.468 --> 00:00:20.831
Like, what it gotta be.

5
00:00:20.831 --> 00:00:26.780
It's like, tell me what the Phantom
of the Opera pattern does.

6
00:00:26.780 --> 00:00:32.423
It's like, well, super creepy and

7
00:00:32.423 --> 00:00:37.338
likes to sing, and so, a Facade

8
00:00:37.338 --> 00:00:42.801
pattern is essentially a thin layer

9
00:00:42.801 --> 00:00:48.214
that
&gt;&gt; Lukas Ruebbelke: Interfaces between,

10
00:00:48.214 --> 00:00:52.752
I would say, two kind of distinct systems.

11
00:00:52.752 --> 00:00:57.421
And
&gt;&gt; Lukas Ruebbelke: So for me,

12
00:00:57.421 --> 00:01:01.494
I quite like the facade pattern,

13
00:01:01.494 --> 00:01:06.005
because what it does is it allows me to

14
00:01:06.005 --> 00:01:11.388
abstract away the state management details

15
00:01:11.388 --> 00:01:16.929
of an application from
the component layer.

16
00:01:16.929 --> 00:01:21.749
I, on principle, do not the believe

17
00:01:21.749 --> 00:01:26.415
that your components should know or

18
00:01:26.415 --> 00:01:32.960
care how your state
management is being handled.

19
00:01:32.960 --> 00:01:38.010
We certainly, and
I'm trying to avoid going into this deep

20
00:01:38.010 --> 00:01:43.363
philosophical conversation, but
if I suggested that we start

21
00:01:43.363 --> 00:01:48.312
shipping angular material with
NgRx store baked into it,

22
00:01:48.312 --> 00:01:51.754
people would be like, absolutely not.

23
00:01:51.754 --> 00:01:53.482
We're not doing it.

24
00:01:53.482 --> 00:01:57.947
So, why would you not let angular

25
00:01:57.947 --> 00:02:02.733
material ship with NgRx store, but

26
00:02:02.733 --> 00:02:11.041
you'd have no problem putting
it into your component layer?

27
00:02:11.041 --> 00:02:15.876
I think that ultimately
the difference is scale.

28
00:02:15.876 --> 00:02:19.854
And I think it's totally fine to say,

29
00:02:19.854 --> 00:02:26.566
we understand that we are coupling
our component layer to NgRx,

30
00:02:26.566 --> 00:02:31.555
and that's a tradeoff
we're willing to make.

31
00:02:31.555 --> 00:02:35.261
What I have a hard time with is
that when somebody has heard

32
00:02:35.261 --> 00:02:40.124
from somebody that heard from somebody
that the Facade pattern is bad, and

33
00:02:40.124 --> 00:02:42.766
then they're like, well, it's bad.

34
00:02:42.766 --> 00:02:44.733
And you're like, but why?

35
00:02:44.733 --> 00:02:50.361
And it's clear that,
at least in the conversations I've been,

36
00:02:50.361 --> 00:02:55.786
is that these individuals have
not thought about the second and

37
00:02:55.786 --> 00:03:02.767
third orders of complexity of coupling
their component layer to the NgRx store.

38
00:03:02.767 --> 00:03:09.069
And the one criticism that I will
agree with is that a Facade,

39
00:03:09.069 --> 00:03:12.908
it's a delegation layer, period.

40
00:03:12.908 --> 00:03:19.771
What I have seen is that developers
have used it as like a junk drawer.

41
00:03:19.771 --> 00:03:24.505
Of like, well,
I don't know where to put this logic, so

42
00:03:24.505 --> 00:03:28.859
I'm gonna throw it in the Facade,
and that's bad.

43
00:03:28.859 --> 00:03:34.742
That approach is bad,
that doesn't make Facades bad.

44
00:03:34.742 --> 00:03:39.883
Somebody drives the Tesla off a cliff,
are they a bad driver?

45
00:03:39.883 --> 00:03:40.968
Was it a bad thing that happened?

46
00:03:40.968 --> 00:03:42.147
Or is Tesla bad?

47
00:03:42.147 --> 00:03:49.667
So again, separating the mechanism,
the institution from the execution.

48
00:03:49.667 --> 00:03:57.104
So, with that said,
before we get into stage management,

49
00:03:57.104 --> 00:04:02.312
let's talk about just some very specific

50
00:04:02.312 --> 00:04:07.965
reactive example that
I kinda wanna get out,

51
00:04:07.965 --> 00:04:14.834
and I think it is a pretty
valuable tool in the toolbox.

52
00:04:14.834 --> 00:04:18.631
So,
&gt;&gt; Lukas Ruebbelke: Before we get into,

53
00:04:18.631 --> 00:04:24.501
like I said, state management, we are
going to approximate it with the Facade.

54
00:04:24.501 --> 00:04:28.813
So ideally, and it's a little bit,

55
00:04:28.813 --> 00:04:34.239
it's not quite as clean
as I would have liked,

56
00:04:34.239 --> 00:04:39.525
but using the new
standalone component API,

57
00:04:39.525 --> 00:04:43.154
but it's still pretty close.

58
00:04:43.154 --> 00:04:48.242
So, what I'm gonna do is I am

59
00:04:48.242 --> 00:04:54.178
going to generate a new library.

60
00:04:54.178 --> 00:04:58.969
And I'm gonna call this
challenges logo data,

61
00:04:58.969 --> 00:05:03.759
I'm going to put it in
the appropriate folder,

62
00:05:03.759 --> 00:05:07.370
lives, challenges, local data.

63
00:05:07.370 --> 00:05:12.518
Standalone is false, and
the project name and

64
00:05:12.518 --> 00:05:15.689
root format is as provided.

65
00:05:15.689 --> 00:05:20.232
Let me just,
&gt;&gt; Lukas Ruebbelke: Put my seatbelt on.

66
00:05:25.854 --> 00:05:26.983
&gt;&gt; Lukas Ruebbelke: All right.

67
00:05:31.528 --> 00:05:36.219
&gt;&gt; Lukas Ruebbelke: So, does anybody wanna
take a guess at what this library is

68
00:05:36.219 --> 00:05:37.095
gonna do?

69
00:05:45.717 --> 00:05:50.505
&gt;&gt; Lukas Ruebbelke: Local data,
so, we are going to use

70
00:05:50.505 --> 00:05:54.817
this to essentially stub out and

71
00:05:54.817 --> 00:06:00.564
mock out what would
appear to be a service,

72
00:06:00.564 --> 00:06:06.313
but we're only dealing
with [COUGH] the data

73
00:06:06.313 --> 00:06:11.440
structure within the Facade itself.

74
00:06:11.440 --> 00:06:16.671
All right, so now what I'm gonna do,
I'm gonna copy a bunch of stuff in here,

75
00:06:16.671 --> 00:06:20.334
I'm gonna paste it, and
then we're gonna unpack it.

76
00:06:27.474 --> 00:06:28.455
&gt;&gt; Lukas Ruebbelke: That's
a little better.

77
00:06:28.455 --> 00:06:29.956
I must have zoomed that out.

78
00:06:29.956 --> 00:06:39.155
[COUGH]
&gt;&gt; Lukas Ruebbelke: Libs, local data.

79
00:06:42.243 --> 00:06:44.513
&gt;&gt; Lukas Ruebbelke: I forgot something.

80
00:06:55.608 --> 00:07:00.708
&gt;&gt; Lukas Ruebbelke: I need to
generate a service real quick.

81
00:07:03.480 --> 00:07:06.934
&gt;&gt; Lukas Ruebbelke: Data, data,
data, all right, here we go.

82
00:07:13.714 --> 00:07:14.567
&gt;&gt; Lukas Ruebbelke: Let's paste this in.

83
00:07:27.367 --> 00:07:28.684
&gt;&gt; Lukas Ruebbelke: What
do I call this thing?

84
00:07:35.966 --> 00:07:39.630
&gt;&gt; Lukas Ruebbelke: Actually, it doesn't
matter quite what I'm calling it,

85
00:07:39.630 --> 00:07:42.354
because I'm gonna change this in a second.

86
00:07:51.275 --> 00:07:52.248
&gt;&gt; Lukas Ruebbelke: All right, so

87
00:07:52.248 --> 00:07:56.393
I'm doing this, I'm creating
a service that It looks like a

88
00:08:08.297 --> 00:08:09.918
&gt;&gt; Lukas Ruebbelke: [INAUDIBLE] I should

89
00:08:09.918 --> 00:08:13.467
have done this and called it local state.

90
00:08:16.335 --> 00:08:20.424
&gt;&gt; Lukas Ruebbelke: So let me
actually just change that real quick.

91
00:08:27.821 --> 00:08:29.713
&gt;&gt; Lukas Ruebbelke: Service,
service, service.

92
00:08:41.617 --> 00:08:42.767
&gt;&gt; Lukas Ruebbelke: There we go.

93
00:08:44.647 --> 00:08:45.948
&gt;&gt; Lukas Ruebbelke: Well, what the heck?

94
00:08:56.921 --> 00:08:59.171
&gt;&gt; Lukas Ruebbelke: All right,
that's fine, I can make this work.

95
00:09:11.132 --> 00:09:16.423
&gt;&gt; Lukas Ruebbelke: All right,
so, within the services here, and

96
00:09:16.423 --> 00:09:23.446
what I'm actually gonna do,
just cuz this is gonna bother me.

97
00:09:39.135 --> 00:09:41.138
&gt;&gt; Lukas Ruebbelke: Well,
we'll just leave it for now.

98
00:09:41.138 --> 00:09:45.761
All right,
&gt;&gt; Lukas Ruebbelke: So

99
00:09:45.761 --> 00:09:50.434
I'm going to just rename this,
because what we're

100
00:09:50.434 --> 00:09:55.696
actually doing is
&gt;&gt; Lukas Ruebbelke: creating

101
00:09:55.696 --> 00:10:01.595
a Facade
&gt;&gt; Lukas Ruebbelke: And

102
00:10:01.595 --> 00:10:07.090
normally, I'd have put this
in the state limb, but.

103
00:10:07.090 --> 00:10:08.536
&gt;&gt; Speaker 2: I think you
have one in the state limb.

104
00:10:08.536 --> 00:10:09.304
&gt;&gt; Lukas Ruebbelke: Do I?

105
00:10:09.304 --> 00:10:12.488
&gt;&gt; Speaker 2: Yeah, that's where I was.

106
00:10:12.488 --> 00:10:13.638
&gt;&gt; Lukas Ruebbelke: Yes, I do.

107
00:10:13.638 --> 00:10:17.053
&gt;&gt; Speaker 2: Yeah, and it's all there.

108
00:10:17.053 --> 00:10:19.356
&gt;&gt; Lukas Ruebbelke: I don't mind,
I wanna play my hand.

109
00:10:23.447 --> 00:10:28.920
&gt;&gt; Lukas Ruebbelke: Let's do
&gt;&gt; Lukas Ruebbelke: All right,

110
00:10:28.920 --> 00:10:29.796
let's do this.

111
00:10:29.796 --> 00:10:33.514
Let's operate under this one,
and I'm gonna

112
00:10:33.514 --> 00:10:40.317
just
&gt;&gt; Lukas Ruebbelke: I'm

113
00:10:40.317 --> 00:10:42.177
gonna just pretend that
I just generated this.

114
00:10:44.902 --> 00:10:46.597
&gt;&gt; Lukas Ruebbelke: Good call out.

115
00:10:46.597 --> 00:10:50.879
It's the lesson I did before I
left the hotel this morning.

116
00:10:50.879 --> 00:10:56.164
All right, so, what I've done previously,
generated changes,

117
00:10:56.164 --> 00:11:00.071
local, Facade, and
this is in the state folder.

118
00:11:00.071 --> 00:11:04.189
So, I apologize that was a little abrupt,
but

119
00:11:04.189 --> 00:11:09.585
thanks to the power of pair programming,
we got that fixed.

120
00:11:09.585 --> 00:11:14.326
So, what I wanna do is, I want to

121
00:11:14.326 --> 00:11:19.247
create a file that is essentially

122
00:11:19.247 --> 00:11:24.518
serving as an interface to NgRx, or

123
00:11:24.518 --> 00:11:29.986
that's typically what I use it for.

124
00:11:29.986 --> 00:11:37.209
So in the feature Facade,
which we'll talk about in the next module.

125
00:11:37.209 --> 00:11:42.202
But the point is that we have state
management, how the component communicates

126
00:11:42.202 --> 00:11:45.703
with the rest of the application
is through the Facade,

127
00:11:45.703 --> 00:11:48.476
which then gets delegated
out to the store.

128
00:11:48.476 --> 00:11:54.765
So you can see here, we are injecting
a lot of NgRx stuff into the Facade, and

129
00:11:54.765 --> 00:12:00.780
the Facade is dispatching all the actions
and all the different things.

130
00:12:00.780 --> 00:12:07.395
So, in the local Facade,
is we want to achieve that same or

131
00:12:07.395 --> 00:12:12.802
simulate that same
interaction without NgRx.

132
00:12:12.802 --> 00:12:17.008
So it has the same interface,
remember we talked about contracts and

133
00:12:17.008 --> 00:12:19.632
programming to contracts as interfaces?

134
00:12:19.632 --> 00:12:25.639
And so here,
what I can also say is if you go and

135
00:12:25.639 --> 00:12:29.751
you look at challenges state,

136
00:12:29.751 --> 00:12:37.519
I have a Facade that you can
compare against, right here.

137
00:12:37.519 --> 00:12:42.469
So I basically have to create
a version of this without NgRx.

138
00:12:42.469 --> 00:12:45.712
Thus it's a Facade,
it's a fake version of it.

139
00:12:45.712 --> 00:12:51.168
So, I've generated some mock data,

140
00:12:51.168 --> 00:12:54.237
mock challenge, and

141
00:12:54.237 --> 00:12:59.359
I have a challenge, local Facade.

142
00:12:59.359 --> 00:13:04.762
Now what I'm doing is,
I'm using a behavior

143
00:13:04.762 --> 00:13:11.166
subject to essentially
manage the state and memory.

144
00:13:11.166 --> 00:13:16.534
So, a subject is a mechanism
that will emit data

145
00:13:16.534 --> 00:13:21.634
as it becomes available,
a behavior subject

146
00:13:21.634 --> 00:13:27.015
is a subject that remembers state or
behavior.

147
00:13:27.015 --> 00:13:32.433
And so, it basically was funny
cuz when Redux- Isn't there

148
00:13:32.433 --> 00:13:37.638
other ways to do that though,
with the state management,

149
00:13:37.638 --> 00:13:42.633
like little things,
like input output in listeners for

150
00:13:42.633 --> 00:13:48.926
sharing values across states,
like different pages or components?

151
00:13:48.926 --> 00:13:53.067
&gt;&gt; Speaker 2: I don't like using input or
output or listeners,

152
00:13:53.067 --> 00:13:57.908
I rely on behavior subject all the time,
almost too much.

153
00:13:57.908 --> 00:14:00.136
Can you be using it too much?

154
00:14:00.136 --> 00:14:00.829
&gt;&gt; Lukas Ruebbelke: Yes.

155
00:14:00.829 --> 00:14:06.190
&gt;&gt; Speaker 3: [LAUGH]
&gt;&gt; Lukas Ruebbelke: Yes, sir.

156
00:14:06.190 --> 00:14:11.790
I mean, you kind of encoded
the answer in the question.

157
00:14:11.790 --> 00:14:18.325
So, just a quick save and
get this done in 30 seconds,

158
00:14:18.325 --> 00:14:23.419
is that
&gt;&gt; Lukas Ruebbelke: Observables handle

159
00:14:23.419 --> 00:14:30.439
state in a, essentially,
a microtransaction level.

160
00:14:30.439 --> 00:14:32.945
Here's this data, and
I wanna move from here to here,

161
00:14:32.945 --> 00:14:35.504
I wanna manage state within
the observable stream, and

162
00:14:35.504 --> 00:14:38.625
I want it to come out the other side,
and I want it to be in some shape.

163
00:14:38.625 --> 00:14:45.378
So, I think of it at a micro level,
this is where an observable comes in.

164
00:14:45.378 --> 00:14:47.195
I mean, literally, in the stream,

165
00:14:47.195 --> 00:14:50.657
it's called an observable stream
as you're protecting that data and

166
00:14:50.657 --> 00:14:54.839
transporting it from one place to another,
and then transforming it if you need to.

167
00:14:56.223 --> 00:15:02.042
&gt;&gt; Lukas Ruebbelke: At a medium level,
I think, is this is where you have,

168
00:15:02.042 --> 00:15:09.000
inputs and outputs from a parent
component to a child component,

169
00:15:09.000 --> 00:15:14.963
is that state is flowing down
into the child component.

170
00:15:14.963 --> 00:15:20.319
When something happens in the child
component, it fires an event and

171
00:15:20.319 --> 00:15:25.872
it bubbles up to the parent component
to be delegated and taken care of.

172
00:15:25.872 --> 00:15:29.291
And so it's like my nine-year-old
coming to me and saying,

173
00:15:29.291 --> 00:15:31.803
the 13-year-old hit me, go punish him.

174
00:15:31.803 --> 00:15:37.210
It's kind of that equivalent of,
this thing happened, go take care of it.

175
00:15:37.210 --> 00:15:40.015
At a macro level,

176
00:15:40.015 --> 00:15:46.004
this is where the NgRx store comes in.

177
00:15:46.004 --> 00:15:53.300
An observable is not appropriate
to manage application state,

178
00:15:53.300 --> 00:15:59.117
it's very good for
managing a transaction state.

179
00:15:59.117 --> 00:16:05.188
Inputs and outputs Are good for
measuring presentation state.

180
00:16:05.188 --> 00:16:11.442
This is where signals come in.

181
00:16:11.442 --> 00:16:13.846
Signals are just very,
very lightweight observables.

182
00:16:13.846 --> 00:16:17.722
If I just need to signal efficiently,
something happened,

183
00:16:17.722 --> 00:16:19.394
you need to know about it.

184
00:16:19.394 --> 00:16:24.971
This is where signals come in,
that it's just, I think of signals,

185
00:16:24.971 --> 00:16:29.599
and I've talked to a lot of
the Angular folks about this.

186
00:16:29.599 --> 00:16:34.580
Conceptually, I believe
that signals are for

187
00:16:34.580 --> 00:16:40.466
presentation state,
NgRx is for application state.

188
00:16:40.466 --> 00:16:49.034
You do not need NgRx to manage what
buttons are visible on a page.

189
00:16:49.034 --> 00:16:50.488
This is where signals come in.

190
00:16:50.488 --> 00:16:55.666
So if you're using it to manage
temporal presentation state,

191
00:16:55.666 --> 00:17:01.638
signals are great, as well as inputs and
outputs, it's a part of that.

192
00:17:01.638 --> 00:17:07.759
So for me, I think of when you have
the kind of container presenter model or

193
00:17:07.759 --> 00:17:13.582
Spark DOM, and you don't tell,
it was canceled, is that I think of,

194
00:17:13.582 --> 00:17:18.717
this kinda goes back to the domain
model in the future slides,

195
00:17:18.717 --> 00:17:21.734
is that it all kind of just lines up.

196
00:17:21.734 --> 00:17:27.232
Is I try to have large container modules

197
00:17:27.232 --> 00:17:35.240
that interfaces with the facade
that's hooked to NgRx.

198
00:17:35.240 --> 00:17:41.418
From the container module to the presenter
module, it's inputs and outputs.

199
00:17:43.482 --> 00:17:48.162
&gt;&gt; Lukas Ruebbelke: Within any of
the components, so I said module,

200
00:17:48.162 --> 00:17:52.046
but container-presenter component,

201
00:17:52.046 --> 00:17:57.299
is that any transaction that happens,
this is where,

202
00:17:57.299 --> 00:18:04.404
depending on the level of the transaction,
it's RxJS or it's a signal.

203
00:18:07.078 --> 00:18:08.659
&gt;&gt; Lukas Ruebbelke: Does that make sense?

204
00:18:08.659 --> 00:18:14.044
&gt;&gt; Speaker 2: Yeah, the only part of
that I'm a little foggy is that whole

205
00:18:14.044 --> 00:18:19.323
listener kind of scenario where
you need some sort of event

206
00:18:19.323 --> 00:18:24.170
to make this show up over
here in a different component

207
00:18:24.170 --> 00:18:28.819
like a trigger, or
a host listener, or whatever.

208
00:18:28.819 --> 00:18:30.894
Event emitter, that's the one.

209
00:18:30.894 --> 00:18:34.000
&gt;&gt; Lukas Ruebbelke: Right,
so that's an output, I mean.

210
00:18:34.000 --> 00:18:35.220
&gt;&gt; Speaker 2: Technically, yeah.

211
00:18:35.220 --> 00:18:40.068
&gt;&gt; Lukas Ruebbelke: And so again,
following, I said it previously, but

212
00:18:40.068 --> 00:18:44.069
this is a good opportunity
to reiterate it.

213
00:18:44.069 --> 00:18:48.786
Is that if you have two
adjacent mechanisms

214
00:18:48.786 --> 00:18:53.503
that have a shared interest in something,

215
00:18:53.503 --> 00:18:59.136
what you need to do is you
need to promote that shared

216
00:18:59.136 --> 00:19:04.247
thing to the next
available abstraction layer

217
00:19:04.247 --> 00:19:09.507
that the two adjacent
siblings have access to.

218
00:19:09.507 --> 00:19:15.172
So a good example, and
I think we'll get to it,

219
00:19:15.172 --> 00:19:21.277
is I'm a huge fan of
master-detail view layouts.

220
00:19:21.277 --> 00:19:24.778
And so if you've ever seen
any of my workshops, I mean,

221
00:19:24.778 --> 00:19:28.441
everything at the end of the day
is a master-detail view.

222
00:19:28.441 --> 00:19:32.373
When you look at your email,
Facebook, Twitter, whatever,

223
00:19:32.373 --> 00:19:35.983
is that you have a list
of a collection of items.

224
00:19:35.983 --> 00:19:39.610
And then you select one, and
then in the Detail View,

225
00:19:39.610 --> 00:19:45.429
you're able to see those details and then
you can either update it, modify it, etc.

226
00:19:45.429 --> 00:19:51.950
And so what that looks like,
&gt;&gt; Lukas Ruebbelke: I'll Just

227
00:19:51.950 --> 00:19:54.991
veer over here real quick, and
then we will get back on track, I promise.

228
00:19:59.632 --> 00:20:02.719
&gt;&gt; Lukas Ruebbelke: So
here is good example,

229
00:20:02.719 --> 00:20:08.011
that when I select
an item in the List View,

230
00:20:08.011 --> 00:20:13.891
the Detail View has
an interest in what that is,

231
00:20:13.891 --> 00:20:18.743
but they don't know about each other.

232
00:20:18.743 --> 00:20:23.207
All the List View knows
is that I'm sending

233
00:20:23.207 --> 00:20:26.934
you a list of challenges to render.

234
00:20:26.934 --> 00:20:33.108
And if any of your challenges
are selected or deleted, let me know.

235
00:20:33.108 --> 00:20:36.230
But aside from saying it's deleted,
it just say,

236
00:20:36.230 --> 00:20:38.780
let me know if these buttons are clicked.

237
00:20:38.780 --> 00:20:42.556
So when you hit Select, in this case,

238
00:20:42.556 --> 00:20:47.394
I'm whipping around to the store and
back down,

239
00:20:47.394 --> 00:20:53.303
is this is just saying,
I've got a challenge, render it.

240
00:20:53.303 --> 00:20:55.492
And so this is how this is being selected.

241
00:20:55.492 --> 00:20:58.563
And so they don't know about each other,

242
00:20:58.563 --> 00:21:03.228
because one's delegating,
&gt;&gt; Lukas Ruebbelke: To

243
00:21:03.228 --> 00:21:05.301
the layer just above it.

244
00:21:05.301 --> 00:21:06.486
Things are happening.

245
00:21:06.486 --> 00:21:11.914
I mean, these two components have
no idea what's actually happening

246
00:21:11.914 --> 00:21:17.351
that they went up, up, up, up,
up into the NgRx store and back down.

247
00:21:17.351 --> 00:21:22.326
This works,
because Angular is built to be reactive,

248
00:21:22.326 --> 00:21:27.409
that instead of us pulling information,
we're able to

249
00:21:27.409 --> 00:21:33.118
push it to interested parties so
that they can respond.

250
00:21:33.118 --> 00:21:38.030
So its observables typically going
into the container component,

251
00:21:38.030 --> 00:21:41.649
which then is being then
passed down via binding,

252
00:21:41.649 --> 00:21:46.747
which binding under the hood is
nothing more than an event mechanism.

253
00:21:48.017 --> 00:21:49.517
So if you actually went and looked,

254
00:21:49.517 --> 00:21:53.087
it's just a venting that they've
just hid really, really well.

255
00:21:53.087 --> 00:21:57.199
So now, back to this.

256
00:21:57.199 --> 00:22:01.064
And the reason why I
like this is inputs and

257
00:22:01.064 --> 00:22:06.379
outputs essentially
are separating command and query.

258
00:22:06.379 --> 00:22:12.687
So in a facade,
what you have is you have your queries.

259
00:22:12.687 --> 00:22:14.743
This is what I want from the store.

260
00:22:14.743 --> 00:22:17.949
This is what I need to
hydrate my template.

261
00:22:17.949 --> 00:22:20.397
Instead of using the store,

262
00:22:20.397 --> 00:22:25.908
we are essentially using
the BehaviorSubject as a micro store.

263
00:22:25.908 --> 00:22:30.383
If you go look and
dig through the API, under the hood,

264
00:22:30.383 --> 00:22:33.511
it is some form of a BehaviorSubject.

265
00:22:33.511 --> 00:22:39.111
So what's really funny to me
is that people that don't

266
00:22:39.111 --> 00:22:44.224
like NgRx because they
think it's too heavy, and

267
00:22:44.224 --> 00:22:51.161
instead want to get religious about
using a service with a subject,

268
00:22:51.161 --> 00:22:55.421
I think it's funny to me that it's like,

269
00:22:55.421 --> 00:22:59.829
I'm a huge fan of
a service with a subject.

270
00:22:59.829 --> 00:23:01.503
It's called the NgRx Store.

271
00:23:01.503 --> 00:23:06.183
The difference is, I'm happy with one, and
for some reason, you hate them so much,

272
00:23:06.183 --> 00:23:08.197
you need 20 of them.

273
00:23:08.197 --> 00:23:10.408
And again, I'm totally fine with it.

274
00:23:10.408 --> 00:23:14.815
It's just I think sometimes people
are a little bit disingenuine about where

275
00:23:14.815 --> 00:23:18.085
they're coming from or
they haven't thought about it.

276
00:23:18.085 --> 00:23:22.894
So anyways, sorry,
I'm not trying to be offensive.

277
00:23:22.894 --> 00:23:28.524
It's, I've just had some very emotional
arguments that was completely and

278
00:23:28.524 --> 00:23:30.526
logically inconsistent.

