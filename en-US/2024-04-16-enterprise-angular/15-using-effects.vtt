WEBVTT

1
00:00:00.100 --> 00:00:05.865
Now, we're using EntityState, which,
let me see if I can click in here.

2
00:00:08.285 --> 00:00:12.942
EntityState is an array of IDs, and

3
00:00:12.942 --> 00:00:16.357
then it's a dictionary or

4
00:00:16.357 --> 00:00:22.113
a key value pair of
the objects themselves.

5
00:00:22.113 --> 00:00:23.413
So what you have is an array of 1,
2, 3, 4, 5, 6.

6
00:00:23.413 --> 00:00:28.626
You just have the property as the id and
then the value is the object itself.

7
00:00:30.931 --> 00:00:37.753
And that is pretty much it.

8
00:00:37.753 --> 00:00:40.007
It's an object with the id.

9
00:00:42.586 --> 00:00:46.413
[COUGH] Is a property, and
then the object itself is the value.

10
00:00:46.413 --> 00:00:49.855
When we extend EntityState,

11
00:00:49.855 --> 00:00:55.583
it's creating these IDs and
entities for us.

12
00:00:55.583 --> 00:00:56.433
We get that for free.

13
00:00:58.623 --> 00:01:00.420
We're also extending it.

14
00:01:00.420 --> 00:01:05.130
Meaning that we want to
track the selected id.

15
00:01:05.130 --> 00:01:07.210
So when you click one,
we wanna track that.

16
00:01:08.920 --> 00:01:10.750
If there's an error, we wanna track that.

17
00:01:10.750 --> 00:01:18.670
We also wanna track if
essentially data has been loaded.

18
00:01:18.670 --> 00:01:23.281
So typically on that first load,
do we have workshops?

19
00:01:23.281 --> 00:01:24.081
Are they loaded?

20
00:01:24.081 --> 00:01:25.904
Well, the store says yes.

21
00:01:25.904 --> 00:01:28.341
Or creating an EntityAdapter.

22
00:01:28.341 --> 00:01:32.684
So this is taking our collection and

23
00:01:32.684 --> 00:01:36.167
turning it into this shape.

24
00:01:36.167 --> 00:01:39.926
One thing I recommend is if
you click on these types,

25
00:01:39.926 --> 00:01:44.038
they'll take you right
into the type definitions.

26
00:01:44.038 --> 00:01:48.305
They're very informative.

27
00:01:48.305 --> 00:01:51.300
So you have all sorts of things,
getSelectors, selectid,

28
00:01:51.300 --> 00:01:52.308
all sorts of stuff.

29
00:01:53.568 --> 00:01:59.750
So we're creating an EntityAdapter,
then we're defining our initial state.

30
00:01:59.750 --> 00:02:05.104
So we have to say what is the state
that we're starting out with,

31
00:02:05.104 --> 00:02:08.868
which is workshop state right here.

32
00:02:08.868 --> 00:02:14.688
And we're just pre setting loaded to
false, because obviously it's not loaded.

33
00:02:14.688 --> 00:02:19.840
What I've done so I'm not burdened
with creating a fill of failure

34
00:02:19.840 --> 00:02:26.004
callback function or really a callback for
every single time something fails,

35
00:02:26.004 --> 00:02:31.712
all I've done is I've grouped all of
these actions into a single group.

36
00:02:31.712 --> 00:02:34.272
And then if any of these go wrong,
just call on failure.

37
00:02:34.272 --> 00:02:37.667
So that's why you're
seeing this right here.

38
00:02:37.667 --> 00:02:44.093
[COUGH] Now, this is really,
in my opinion,

39
00:02:44.093 --> 00:02:51.748
where all of the complexity exists for
the Reducer.

40
00:02:53.962 --> 00:03:01.347
And it is, essentially you're
calling it createReducer.

41
00:03:01.347 --> 00:03:06.692
You are passing in
the initial state [COUGH] and

42
00:03:06.692 --> 00:03:14.434
then you're chaining like a bajillion
of these on method calls.

43
00:03:14.434 --> 00:03:17.211
They're basically dynamically wiring up,

44
00:03:20.041 --> 00:03:24.835
The action types and
the responses to the Reducer.

45
00:03:24.835 --> 00:03:29.343
Before you'd had to do this by hand and
it was, I mean,

46
00:03:29.343 --> 00:03:35.135
this isn't that much greater but
it is when you got a template wizard.

47
00:03:36.485 --> 00:03:42.939
But they've just tried to streamline
it by just essentially passing,

48
00:03:42.939 --> 00:03:48.623
and when this happens do this,
and it takes two parameters.

49
00:03:48.623 --> 00:03:53.821
The first one is always state,
because it's always returning state,

50
00:03:53.821 --> 00:03:58.163
and the action that is going
to determine what gets called.

51
00:03:58.163 --> 00:04:02.359
So let's say when this thing gets called,
essentially, look for this.

52
00:04:02.359 --> 00:04:04.809
So they're creating a map under the hood,
I believe.

53
00:04:06.099 --> 00:04:07.699
And then they're invoking this function.

54
00:04:07.699 --> 00:04:10.229
So kind of interesting functional things.

55
00:04:13.309 --> 00:04:17.721
Now, What do we

56
00:04:17.721 --> 00:04:22.960
notice about these actions here?

57
00:04:22.960 --> 00:04:27.303
What do all at least five
of these have in common?

58
00:04:27.303 --> 00:04:30.703
&gt;&gt; They're taking a state variable.

59
00:04:30.703 --> 00:04:32.243
&gt;&gt; Well, look at the action type.

60
00:04:32.243 --> 00:04:34.853
&gt;&gt; They're all success.

61
00:04:34.853 --> 00:04:35.903
&gt;&gt; Right.

62
00:04:35.903 --> 00:04:39.001
Now we are to the hard part.

63
00:04:40.261 --> 00:04:42.601
&gt;&gt; I'm sorry, what was that?

64
00:04:42.601 --> 00:04:43.941
&gt;&gt; They're all success.

65
00:04:43.941 --> 00:04:45.653
&gt;&gt; This is-
&gt;&gt; They're all-

66
00:04:45.653 --> 00:04:46.581
&gt;&gt; Something good.

67
00:04:47.921 --> 00:04:49.091
&gt;&gt; They're all success.

68
00:04:49.091 --> 00:04:52.802
They're all responding
to success action types.

