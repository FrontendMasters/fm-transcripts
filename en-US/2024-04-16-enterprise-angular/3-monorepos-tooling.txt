[00:00:00]
>> Let's move on to Monorepos and Tooling. The one thing that I will say about monorepos, so, the one that we are specifically looking at is NX by Narwhal, which was created by Victor Savkin and Jeff Cross, who worked at Google on the Angular team, and Google has an extensive monorepo.

[00:00:32]
I mean, it's crazy how massive their monorepo is. And It's a monorepo but not a monolith, is that everything is in a single project but, it's organized in a way where everything is kind of autonomous and decoupled. And so, let me just show you maybe the file structure here.

[00:01:05]
The idea with a monorepo is that you can have more than one app. So, in this case, we have portal and dashboard, which these are top level host applications. Then you're gonna have remote applications that are candidates to be micro front ends. And so these are all web applications.

[00:01:37]
If the platform that I was working on or the business domain was small enough, it would not be uncommon for me to put my APIs in this folder as well. I think that you take an approach where you refactor through promotion, is that you start small, as it starts to grow, you just refactor it and you just keep promoting it to the next obstruction layer.

[00:02:07]
So, within this monorepo, as it stands, but not for long, [LAUGH] we have at least, I don't know, it looks like 12 just in the apps folder. But what I've also done is, I've broken a few other things out. So you have your libs. So libs are your reusable, consumable pieces of functionality that you want to make available to all of the applications.

[00:02:47]
So, a good example of that is API interfaces. So if I'm doing angular and nest, well, I have that contract there and in my node app or my nest app, I can program to the interfaces. The other piece that I have, and in this case I've broken this out per feature, but I will put what I call a data lib.

[00:03:15]
So that's the library that holds the HTTP client to communicate with the backend. So, this is where it's either core data if it's small or if I'm breaking it out, in this case, you've got challenges data, features data. So you can see that we're essentially separating it per feature slice.

[00:03:38]
Also, you have, state. So this is challenges state, future state, and this holds the state management piece to your application. And the beautiful thing about this, it is incredibly efficient and gratifying when you build, let's say, a web app and then you decide you want a mobile app and so you spin up for instance, Ionic and 80% of your app is written because your state and your data layers are in the libs that you just pull in.

[00:04:24]
So, think of your applications is purely, really just component layers, is that I will typically have my components, the routing to navigate across those components and a façade. More on the façade later. I imagine that there's people on the interwebs, their eye is twitching, and I'll unpack why I think the façade pattern is pretty incredible, but that's it.

[00:04:59]
It's just components, and some way for that component layer to have an API, which is essentially what the façade serves as is an application API into the rest of the app. And everything else is abstracted out. Your components should not have to know where the data is coming from or how your state is being managed.

[00:05:24]
This is absolutely critical. So, as we start to think about how do we become enterprisey it's how do we start to break things up in a meaningful way. So that if we want to change something, that we're not having to go and tinker. It's like, I need to change my tire well, then you got to go take your glove box out of your car.

[00:05:47]
It makes no sense, right? So, this is where, well, I'll get into that, I'll just iterate. What we also have is remote, so this is where I put the APIs and then I just have some server and some database stuff. But you can see that, typically for every feature slice that we identified, that there's a corresponding layer in the application that we have the front end, the state, the data, we have the API.

[00:06:21]
We have the server, which is JSON server, currently, but it's all there. And so I personally think of apps in a horizontal way. But you can also think of them you could even do them vertically. So, if somebody wanted to actually move all of the, let's say user stuff into one place, I've seen it where it's organized into domains.

[00:06:46]
And then you have everything for that feature slice in one place, totally fine. You can think about it horizontally or vertically.

