WEBVTT

1
00:00:00.080 --> 00:00:07.029
In our application, there's really
kinda four distinct domains.

2
00:00:07.029 --> 00:00:13.347
A lot of times, these will
manifest in the form of features.

3
00:00:13.347 --> 00:00:18.066
So it's very common that
features kind of wrap

4
00:00:18.066 --> 00:00:22.673
around specific kind of domain boundaries.

5
00:00:22.673 --> 00:00:27.529
And so for us,
we have a user domain which has

6
00:00:27.529 --> 00:00:33.845
a conceptually distinct set of tasks and
things they do.

7
00:00:33.845 --> 00:00:38.562
We have challenges, flashcards, and notes.

8
00:00:38.562 --> 00:00:43.928
And the idea is that when
you're building an application,

9
00:00:43.928 --> 00:00:48.651
you wanna properly segment
your domains in a way that

10
00:00:48.651 --> 00:00:52.213
they're not dependent on each other.

11
00:00:52.213 --> 00:00:56.281
At the same time, they can still
communicate in a meaningful way.

12
00:00:56.281 --> 00:01:00.063
And one of the things I've been doing,

13
00:01:00.063 --> 00:01:05.335
quite a bit of microservices
over the last two years and

14
00:01:05.335 --> 00:01:11.080
the concept of every microservice
has its own data source.

15
00:01:11.080 --> 00:01:15.019
The first time I heard that,
I'm like, what are you talking about?

16
00:01:15.019 --> 00:01:16.356
That's madness.

17
00:01:16.356 --> 00:01:21.545
But then I realized that when you have
a single database with a bunch of data

18
00:01:21.545 --> 00:01:26.566
models in there and somebody needs to
make a change in one place, you can

19
00:01:26.566 --> 00:01:31.780
have a just an incredibly disruptive
effect across the entire database.

20
00:01:32.930 --> 00:01:41.564
Now, a separate database per endpoint
is there's a cost that comes with it.

21
00:01:41.564 --> 00:01:46.480
There's a really good microservices book,
there's a honeycomb and

22
00:01:46.480 --> 00:01:48.322
a beat or something on it.

23
00:01:48.322 --> 00:01:52.022
And I think it's Sam Newman, whoever,
he spends a lot of time talking about,

24
00:01:52.022 --> 00:01:53.660
there are trade-offs to do this.

25
00:01:53.660 --> 00:01:58.642
Enterprise is that there's
a certain scale where that's when

26
00:01:58.642 --> 00:02:01.746
it makes sense to go on that direction.

27
00:02:01.746 --> 00:02:08.932
But even though maybe we're not in the
enterprise, we can still be enterprising.

28
00:02:08.932 --> 00:02:13.097
And so with that,
we have our kind of four domains.

29
00:02:13.097 --> 00:02:21.559
And the idea is that within the domains
that we are going to build an app or

30
00:02:21.559 --> 00:02:27.343
apps that capture specific
parts of the domain,

31
00:02:27.343 --> 00:02:32.420
but we're going to try
to do it in a way where

32
00:02:32.420 --> 00:02:40.485
each app in each feature slice is
uncoupled from the other feature.

33
00:02:40.485 --> 00:02:44.797
And this is really important that
you're gonna have a user's team

34
00:02:44.797 --> 00:02:49.340
that's working on the user's feature and
they wanna deploy the app or

35
00:02:49.340 --> 00:02:51.652
they wanna deploy their endpoint.

36
00:02:51.652 --> 00:02:53.647
Well, they can do that and

37
00:02:53.647 --> 00:02:59.019
they don't have to go ask the challenges
team if it's okay to do that.

38
00:02:59.019 --> 00:03:04.982
And so I think the big takeaway
here is I want to just,

39
00:03:06.822 --> 00:03:12.852
Encourage everybody to think about their
domain and then start to think about,

40
00:03:12.852 --> 00:03:18.264
in a very disciplined way, what it
would take to keep those separated.

41
00:03:18.264 --> 00:03:24.164
And this is my goal by the end of
the day is if we understood how to

42
00:03:24.164 --> 00:03:31.772
spin up a feature alongside other features
without blowing the whole thing up or

43
00:03:31.772 --> 00:03:36.087
it's completely independent decoupled but

44
00:03:36.087 --> 00:03:43.035
you can still operate in a meaningful way,
that would be a big win for me.

45
00:03:43.035 --> 00:03:47.853
So the goal today is that
we understand how to build

46
00:03:47.853 --> 00:03:52.245
a feature within a larger application.

47
00:03:52.245 --> 00:03:59.191
One thing that we have to talk about,
and this is incredibly important.

48
00:03:59.191 --> 00:04:03.130
You have to have a data contract.

49
00:04:03.130 --> 00:04:07.859
So first and foremost, it comes to
having an understanding of the domain.

50
00:04:07.859 --> 00:04:12.339
And then you must agree
on a data contract or

51
00:04:12.339 --> 00:04:17.950
a data model in which everybody
is going to adhere to.

52
00:04:20.098 --> 00:04:25.099
Because what happens, and I don't know
if anybody has experienced this, but

53
00:04:25.099 --> 00:04:29.873
you have the frontend team that they're
working at a certain cadence, and

54
00:04:29.873 --> 00:04:35.060
then you have the backend team and they're
working at a much different cadence.

55
00:04:35.060 --> 00:04:40.834
Usually, what I've seen is you have one
frontend team working on a feature and

56
00:04:40.834 --> 00:04:44.520
you have a backend team
working on a dozen API's.

57
00:04:45.610 --> 00:04:52.002
And it's very, very common that you have
one side or the other sitting around and

58
00:04:52.002 --> 00:04:57.078
saying, well, we can't build
this because we're waiting for

59
00:04:57.078 --> 00:05:00.760
the API, or
we can't do this because of this.

60
00:05:00.760 --> 00:05:07.752
When you have a data contract, you
decouple the frontend from the backend,

61
00:05:07.752 --> 00:05:14.429
because everybody is in agreement
about what is coming across the wire.

62
00:05:14.429 --> 00:05:19.334
And so one of the things
we're gonna see today is once

63
00:05:19.334 --> 00:05:23.461
you're in agreement on the data contract,

64
00:05:23.461 --> 00:05:29.165
then the frontend team could
mock out data to that contract.

65
00:05:29.165 --> 00:05:32.962
The backend team,
they know what their target is.

66
00:05:32.962 --> 00:05:37.761
And I've been in situations
where we had a contract,

67
00:05:37.761 --> 00:05:40.648
we built it out, the frontend.

68
00:05:40.648 --> 00:05:45.064
And when API was ready because
it was to the contract,

69
00:05:45.064 --> 00:05:49.873
you just flip the switch,
point it to the live endpoint and

70
00:05:49.873 --> 00:05:54.705
it just works because you're
programming to a contract.

71
00:05:54.705 --> 00:05:58.349
Usually what I do, and
I'm not gonna go get the whiteboard and

72
00:05:58.349 --> 00:06:01.023
pull it out here and
we're not gonna do that.

73
00:06:01.023 --> 00:06:03.731
But you'll sit on the whiteboard and

74
00:06:03.731 --> 00:06:09.846
you'll endeavor to understand the business
domain and how things communicate and

75
00:06:09.846 --> 00:06:14.753
what are the events that cause
things to happen within the domain.

76
00:06:14.753 --> 00:06:21.483
And for me, I usually will then translate
that Into, because Typescript or

77
00:06:21.483 --> 00:06:27.386
Javascript is my native language,
I use Typescript interfaces.

78
00:06:27.386 --> 00:06:32.732
But I've also seen it
done in a graphQL schema.

79
00:06:32.732 --> 00:06:38.963
The point being you need to be
able to define your domain.

80
00:06:40.147 --> 00:06:44.990
And so within this page,
we have interfaces for

81
00:06:44.990 --> 00:06:52.376
all of the features that before I
started building anything I sat down and

82
00:06:52.376 --> 00:06:56.613
pretended I was 20 people, and I said,

83
00:06:56.613 --> 00:07:01.722
if I was 20 people,
what would I want this to be?

84
00:07:01.722 --> 00:07:08.643
And so we have an interface
that services a contract for

85
00:07:08.643 --> 00:07:13.314
every single kinda feature in here.

86
00:07:14.704 --> 00:07:19.599
So what I would like us to do

87
00:07:19.599 --> 00:07:24.718
just on the outset of this,

88
00:07:24.718 --> 00:07:30.949
I would like for us to think of some

89
00:07:30.949 --> 00:07:37.850
entity that we can add to the domain,

90
00:07:37.850 --> 00:07:43.209
and I'm gonna do workshop.

91
00:07:43.209 --> 00:07:44.726
I don't know why.

92
00:07:44.726 --> 00:07:47.250
It just seems relevant, I guess.

93
00:07:47.250 --> 00:07:50.812
So I'm gonna do workshop, and

94
00:07:50.812 --> 00:07:55.885
I'm not gonna put too
much thought into it.

95
00:07:55.885 --> 00:08:01.495
But I would like for
us to come up with a domain and

96
00:08:01.495 --> 00:08:07.949
then within the API interface
inside of our mono repo,

97
00:08:07.949 --> 00:08:12.458
and we'll get into some of that more.

98
00:08:12.458 --> 00:08:15.496
So we're kinda easing into this.

99
00:08:15.496 --> 00:08:20.287
I would for
everybody to create an interface for

100
00:08:20.287 --> 00:08:26.410
the entity that they chose and
it could be anything you want.

101
00:08:26.410 --> 00:08:30.502
You are the entire company that you
represent your entire organization,

102
00:08:30.502 --> 00:08:32.101
at least for this workshop.

103
00:08:32.101 --> 00:08:37.108
But what I would like
everybody to do is if

104
00:08:37.108 --> 00:08:42.703
you go into Visual Studio Code,
in the libs,

105
00:08:42.703 --> 00:08:49.480
the very first folder that
you see is API interfaces and

106
00:08:49.480 --> 00:08:56.284
we are going to just come up
with an additional entity.

107
00:08:56.284 --> 00:08:59.432
So I decided to go with workshop, and

108
00:08:59.432 --> 00:09:04.420
I haven't actually thought
through this until just now.

109
00:09:04.420 --> 00:09:09.813
But one of the nice things about
programming is that [COUGH] we are,

110
00:09:09.813 --> 00:09:13.650
in fact,
modeling reality in the real world.

111
00:09:13.650 --> 00:09:17.874
I think the further we just
drift away from that reality,

112
00:09:17.874 --> 00:09:21.174
the more problems that we run into.

113
00:09:21.174 --> 00:09:27.248
And it's always amusing to me when
somebody's programming is hard.

114
00:09:27.248 --> 00:09:31.354
And it's like, well,
that's because life is hard.

115
00:09:31.354 --> 00:09:32.355
Reality is hard.

116
00:09:32.355 --> 00:09:39.270
And you're trying to model something
that it's complex and complicated.

117
00:09:39.270 --> 00:09:43.211
And so
I would just say is a little boop bonus.

118
00:09:43.211 --> 00:09:48.162
Is that if you are modeling
your domain and you're like,

119
00:09:48.162 --> 00:09:53.734
we're drifting away from reality,
stop and check yourself and

120
00:09:53.734 --> 00:10:00.662
be like, if we keep going down this way
path, are we gonna end up creating code?

121
00:10:00.662 --> 00:10:04.670
That's going to be impossible to maintain,

122
00:10:04.670 --> 00:10:10.899
because it's not going to be able to
move and adapt with the business.

123
00:10:10.899 --> 00:10:17.580
So with that said,
I am going to create a new interface,

124
00:10:17.580 --> 00:10:22.271
and we're gonna call it Workshop, and

125
00:10:22.271 --> 00:10:27.401
I'm gonna be pretty simplistic about it.

126
00:10:31.473 --> 00:10:36.224
And the reason why if
you see the BaseEntity,

127
00:10:36.224 --> 00:10:42.032
I just do it so that I can just
put on the ID at a top level.

128
00:10:42.032 --> 00:10:45.000
Typically, I'm not a huge
fan of inheritance, but

129
00:10:45.000 --> 00:10:49.585
this is one case where I think it's just
a lot easier when you're not having to see

130
00:10:49.585 --> 00:10:52.908
that ID explicitly like,
okay, it's there, we get it.

131
00:10:52.908 --> 00:10:58.511
So for a workshop, I'm gonna say title,

132
00:11:00.064 --> 00:11:06.780
And, Description,

133
00:11:09.867 --> 00:11:12.625
And what else?

134
00:11:15.949 --> 00:11:19.530
When we think of workshop, let's just-
&gt;&gt; Date.

135
00:11:19.530 --> 00:11:24.500
&gt;&gt; Date, yeah, so date, which I

136
00:11:24.500 --> 00:11:29.862
think is a type of date, I think.

137
00:11:31.082 --> 00:11:32.847
Topic, yeah, that's good.

138
00:11:36.485 --> 00:11:38.449
&gt;&gt; Instructor.

139
00:11:38.449 --> 00:11:40.785
&gt;&gt; Instructor.

140
00:11:43.017 --> 00:11:47.859
And let's actually do instructor ID,
that way,

141
00:11:47.859 --> 00:11:55.293
you can have a table of users or whatever,
and then you just drop the ID in.

142
00:11:55.293 --> 00:12:01.410
And so one of the things we'll talk
about a little bit more that in Redux,

143
00:12:01.410 --> 00:12:06.725
that it's really,
really important to normalize your data so

144
00:12:06.725 --> 00:12:12.466
that you are working with essentially
key value pairs or entities.

145
00:12:12.466 --> 00:12:15.812
Because it's 0, 0,
like the log 0, whatever that is.

146
00:12:15.812 --> 00:12:19.216
Look up when you have a dictionary and
you have the key,

147
00:12:19.216 --> 00:12:23.287
you just can go straight to not
having to diverse the collection.

148
00:12:23.287 --> 00:12:28.256
And so I was already on board with that,
then you start getting into microservices

149
00:12:28.256 --> 00:12:31.282
and you realize that
everything is normalized and

150
00:12:31.282 --> 00:12:34.672
then split out and
you're just sharing ideas around.

151
00:12:34.672 --> 00:12:41.121
So I think this is probably pretty good.

152
00:12:41.121 --> 00:12:42.399
And-
&gt;&gt; Excuse me.

153
00:12:42.399 --> 00:12:44.506
&gt;&gt; Yes.
&gt;&gt; Instructor ID,

154
00:12:44.506 --> 00:12:49.931
is it okay to be number instead
of string in data type?

155
00:12:49.931 --> 00:12:56.296
&gt;&gt; So it's actually like a UU ID, which-
&gt;&gt; A combination of-

156
00:12:56.296 --> 00:12:56.868
&gt;&gt; Yeah, so

157
00:12:56.868 --> 00:12:59.231
you really want it to be alphanumeric.

158
00:12:59.231 --> 00:13:02.884
And unless you're doing
something really simplistic,

159
00:13:02.884 --> 00:13:05.250
strict numbers are pretty limited.

160
00:13:05.250 --> 00:13:09.466
So I learned that the hard way.

161
00:13:09.466 --> 00:13:15.960
&gt;&gt; So how about were you wanted to tie
the instructor ID to a user entity?

162
00:13:17.080 --> 00:13:20.414
At this point, are you worried about OG?

163
00:13:20.414 --> 00:13:23.915
Is there an ID field and
user all because of BaseEntity?

164
00:13:23.915 --> 00:13:26.504
&gt;&gt; That was a good question.

165
00:13:26.504 --> 00:13:29.855
Do we have something we can
actually kind of pin onto?

166
00:13:29.855 --> 00:13:35.311
And because we're extending BaseEntity,
we have that ID.

167
00:13:35.311 --> 00:13:41.396
So this is why I'm not
a fan of inheritance.

168
00:13:41.396 --> 00:13:45.218
Is because there's something
happening that's not obvious,

169
00:13:45.218 --> 00:13:48.270
is that it creates a certain
level of indirection.

170
00:13:48.270 --> 00:13:54.635
And inheritance is, I think,
a rather egregious form of coupling.

171
00:13:54.635 --> 00:13:58.877
The idea is that we want to favor
composition over inheritance.

172
00:13:58.877 --> 00:14:03.795
This is, I think, one concession
that I make just because it's there.

173
00:14:03.795 --> 00:14:07.435
&gt;&gt; It's actually a real common pattern,
so yeah.

174
00:14:07.435 --> 00:14:08.236
&gt;&gt; Very good question.

175
00:14:08.236 --> 00:14:13.528
So all right, I think this is pretty good.

176
00:14:13.528 --> 00:14:20.493
Fortunately, we're not
doing heart surgery.

177
00:14:20.493 --> 00:14:23.144
And we're not even building pacemakers.

178
00:14:23.144 --> 00:14:28.353
Or if we get this wrong,
then you know what happens at this point?

179
00:14:28.353 --> 00:14:30.384
We tear it down and we start over.

180
00:14:30.384 --> 00:14:36.217
So has anybody heard of the concept
of immutable infrastructure?

181
00:14:37.927 --> 00:14:42.541
That if you have a A Kubernetes
cluster out in the cloud and

182
00:14:42.541 --> 00:14:48.790
you need to make an update, well,
you're not gonna SSH into that cluster and

183
00:14:48.790 --> 00:14:54.967
fix it, you're just going to tear that
cluster down and redeploy a new one.

184
00:14:54.967 --> 00:15:00.484
And I think that as engineers,
when we adopt that same mindset of,

185
00:15:00.484 --> 00:15:04.227
let's do something, let's get feedback,

186
00:15:04.227 --> 00:15:08.279
and then let's tear it down and
keep iterating.

187
00:15:08.279 --> 00:15:12.027
This is why I love CLIs,
this is why I love generators,

188
00:15:12.027 --> 00:15:16.934
is because it gives us the opportunity
to iterate very, very quickly.

