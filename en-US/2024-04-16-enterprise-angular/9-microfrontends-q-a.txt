[00:00:00]
>> Does anybody have any questions that they would like to ask me?
>> So, what are the requirements for a micro frontend, or the trade offs of using micro frontends, and when do they become problematic?
>> So, as I said, nothing is for free. Is that, there is overhead for implementing a micro frontend architecture.

[00:00:28]
Obviously, I've kind of been chuckling about this all day, is that breaking everything up towards like I've got a single library with a single service that's serving one thing. Locally that looks kind of silly, but there's two main things to consider, I believe, when evaluating, do we need to start making a change?

[00:00:58]
And they're entirely contextual in that, are you trying to release a specific feature slice at a cadence that's faster than everybody else can keep up with? So that's one. Like, are you moving in a different cadence than the rest of the team. Kind of conversely to that is not so much on a cadence side, but is the overhead of having to just factor in the other features and the other facets of the platform holding you back.

[00:01:43]
And so for me, I believe that micro frontends, the real value is really in the things that are kind of hard to measure. So, yes, you can deploy faster, yes, there's better, more deployable, more stable. But if you've ever been in a war room where you're faced with doing a critical upgrade, but if you don't get it right, and if the platform goes down, then your company is literally losing millions of dollars every minute.

[00:02:27]
That is, I think you almost have to use your imagination a little bit in terms of, what is that like? What I can say, it's not fun. It's not fun when you are sitting here saying, I want or I need to deploy this critical bug fix, or this patch, or this feature.

[00:02:47]
And bad things are gonna happen if I cannot coordinate this other thing over here that has nothing to do with me. And so, this is where I believe that none of this is all or nothing, is that you have things like the strangler fig pattern of, it's incremental.

[00:03:11]
And I think, where you should start evaluating it seriously, is the burden of the rest of the platform preventing you from releasing fast and releasing safe? And from there, I would suggest, start looking at ways to incrementally adopt a micro-frontend strategy within your organization. But I would definitely say, don't be like, we're doing, micro-frontends, burn the platform down, is that, you are just tempting fate when you do that.

[00:03:57]
Is, I think ultimately, there's ways to evaluate the feasibility and viability of a technology or an approach without going all in. It's like, hey, I wanna be a doctor, I wanna go to this special school that is out in Siberia. And so, I don't know if I wanna be a doctor really, but I have to go to Siberia and stick around for four years or eight years.

[00:04:26]
Versus, maybe I wanna go volunteer at the hospital for a week and see if I can even stand the smell of a medical facility, is that, take small, tiny incremental bets and measurements and move from there. Does that make sense?
>> Yeah.
>> Awesome.
>> I have a question regarding decoupling in a mono repo.

[00:04:52]
According to you, at which point would we make an application instead of a component, for instance Instance? Before we'd create a car component in a shared folder, for instance, now would we create an application for that? It would be great to get a, sort of guideline or general rule to decide shared code versus a separate.

[00:05:17]

>> One of the things that you have to start with is, are we describing something that is conceptually independent. That it represents a large enough, indistinct enough unit of the business domain to warrant having a user interact solely with that thing. That, again, coding to model the real world, I would say, if you can justify having this as a standalone app, then I think it's worth considering.

[00:05:56]
I think, with mono repos, if all your business logic and your state management is in libraries, then it's very easy to just build a wrapper around that and expose it. So suddenly the idea of spinning up an application is not nearly as cumbersome as it used to be.

[00:06:19]
What I would also say, we were having an interesting conversation during the break, is, what do you do in terms of authentication with micro-frontends? And my opinion, just right now, is that I would not have a standalone authentication micro-frontend because I don't think the function, and it could be, but the functionality in and of itself.

[00:06:53]
I don't believe warrants enough to be an entirely standalone deployable application. There could be scenarios where you would change my mind, but I think it absolutely would make sense as a standalone library that you then pull in to your micro frontends, and either into your remotes or your host.

[00:07:18]
So, the idea is that you pull into the library, so you can independently load it. It checks for a token. If it's not there, then you see the login lib. If it is there, it just goes away, and what that allows you to do is, when you load it into a parent or a host application, the host can pass that token down into the remote.

[00:07:47]
And say, I've been authenticated and I don't need to load this library. But it allows you, by having that shared component, to look at remotes independently or remotes within the context of host.
>> Could you explain the difference between micro-frontends and module federation, and when we would need either or?

[00:08:11]

>> Micro-frontends is the concept of having small, independently deployed frontends or web applications that you can then load into other host applications. Federated modules are just a way to do that, and it happens to be very effective. I think that web pack and federated modules is probably the best option right now.

[00:08:41]
And so, I would say that all federated modules are probably micro-frontends, but not all micro-frontends are using federated modules.

