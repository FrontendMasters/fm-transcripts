WEBVTT

1
00:00:00.293 --> 00:00:05.789
I wanna talk about one more module and
then we are going to call it a day.

2
00:00:05.789 --> 00:00:08.432
We're actually running
out of film in the back.

3
00:00:08.432 --> 00:00:13.747
They only bought so many tapes,
maybe I should not talk so

4
00:00:13.747 --> 00:00:16.976
much, or maybe talk really fast.

5
00:00:16.976 --> 00:00:23.719
All right, so I wanna take a moment and
I wanna talk about unit testing.

6
00:00:23.719 --> 00:00:28.295
And I wanna talk about conceptually how we

7
00:00:28.295 --> 00:00:32.479
should think about unit testing, and

8
00:00:32.479 --> 00:00:38.230
then just show a few patterns
that when I write test,

9
00:00:38.230 --> 00:00:42.169
I just see it over and over and over.

10
00:00:42.169 --> 00:00:46.102
As well as, I believe the standalone
API also makes this a lot easier.

11
00:00:46.102 --> 00:00:53.575
So in Angular,
my experience is that I spend,

12
00:00:53.575 --> 00:00:59.901
probably 90% of my time just getting

13
00:00:59.901 --> 00:01:05.662
the unit under test to initialize.

14
00:01:05.662 --> 00:01:11.307
Because, essentially,
every dependency that exists,

15
00:01:11.307 --> 00:01:14.194
you have to account for that.

16
00:01:14.194 --> 00:01:20.580
And in some cases, when you have very
large components with components,

17
00:01:20.580 --> 00:01:25.730
sometimes I just end up just
doing process of elimination,

18
00:01:25.730 --> 00:01:32.946
cuz you don't need to inject everything,
just enough to satisfy the dependency.

19
00:01:32.946 --> 00:01:36.045
So literally,
I'm looking at 20 dependencies.

20
00:01:36.045 --> 00:01:39.904
I'm just adding them in one by one,
until it renders.

21
00:01:39.904 --> 00:01:44.449
So one thing I would say is
that keep your components,

22
00:01:44.449 --> 00:01:49.708
your services, everything,
fine grain, single purpose.

23
00:01:49.708 --> 00:01:53.913
And if you find that
you're having to import,

24
00:01:57.102 --> 00:02:00.847
Four or five, six modules,

25
00:02:00.847 --> 00:02:05.848
ask yourself why that's necessary.

26
00:02:05.848 --> 00:02:12.748
And you probably have a component
that is too coarse-grained.

27
00:02:12.748 --> 00:02:16.707
Or you're doing something
that's too coarse-grained.

28
00:02:16.707 --> 00:02:22.022
A really, really great book,
probably one of my favorite

29
00:02:22.022 --> 00:02:26.799
programming books is
Clean Code by Robert C Martin.

30
00:02:26.799 --> 00:02:30.477
And I've read it probably three or
four times, and

31
00:02:30.477 --> 00:02:34.337
I actually am fortunate
enough to have a signed copy.

32
00:02:34.337 --> 00:02:40.187
And if my house ever caught on fire and
my kids were safe,

33
00:02:40.187 --> 00:02:44.916
I would run in,
grab that copy of that book and

34
00:02:44.916 --> 00:02:51.015
my Fender Rhodes keyboard,
and I'd be out of there,

35
00:02:51.015 --> 00:02:56.629
and my golf clubs, and
my shoes, and my skateboard.

36
00:02:56.629 --> 00:03:02.960
Just kidding,
I've grabbed three skateboards.

37
00:03:02.960 --> 00:03:07.358
All right, so one of the things that,

38
00:03:07.358 --> 00:03:12.856
when you read Clean Code,
what's interesting

39
00:03:12.856 --> 00:03:18.226
to me is that in hindsight,
it's so obvious.

40
00:03:18.226 --> 00:03:25.292
What uncle Bob is talking
about is common sense.

41
00:03:25.292 --> 00:03:27.884
I think it's really about portion control.

42
00:03:27.884 --> 00:03:32.489
If I could describe
Clean Code in the simplest

43
00:03:32.489 --> 00:03:37.465
possible terms,
it's about portion control.

44
00:03:37.465 --> 00:03:44.713
Is that, do not do too much,
do just enough.

45
00:03:44.713 --> 00:03:49.330
And if you're doing too much,
you need to break it up.

46
00:03:49.330 --> 00:03:50.816
You need to refactor.

47
00:03:50.816 --> 00:03:57.155
And I've talked about this
before in other workshops, but

48
00:03:57.155 --> 00:04:02.227
what's interesting to me
even in an enterprise

49
00:04:02.227 --> 00:04:07.552
products workshop context,
to this day 85%,

50
00:04:07.552 --> 00:04:14.806
if not more of the code that I see,
comes down to three basic errors.

51
00:04:14.806 --> 00:04:20.014
Every single time, show me a code base and
there's three things that are happening.

52
00:04:20.014 --> 00:04:27.022
One, hidden state, nested logic,
and SRP violations,

53
00:04:27.022 --> 00:04:32.897
single responsibility
principle violations.

54
00:04:32.897 --> 00:04:36.964
And every single one of those are,

55
00:04:36.964 --> 00:04:42.714
I think one of the easiest
things to fix in code and

56
00:04:42.714 --> 00:04:48.605
it creates so much pain and
suffering and misery,

57
00:04:48.605 --> 00:04:55.633
and it just ushers in the apocalypse
in your organization.

58
00:04:55.633 --> 00:05:00.219
And it's like the end of time,
and it seems so

59
00:05:00.219 --> 00:05:05.531
innocent at first, but
what happens is things start

60
00:05:05.531 --> 00:05:10.738
to get coupled in a way
that you can't uncouple it.

61
00:05:10.738 --> 00:05:15.616
And then you leave with your
boss to go to some other company

62
00:05:15.616 --> 00:05:21.094
because you wanna create a better and
cooler culture over there,

63
00:05:21.094 --> 00:05:24.497
and I don't think he's taken the bait.

64
00:05:24.497 --> 00:05:31.720
&gt;&gt; [LAUGH]
&gt;&gt; [LAUGH] Michaela Maroney is not amused.

65
00:05:31.720 --> 00:05:36.368
But it's a slippery slope and
it creates entropy and

66
00:05:36.368 --> 00:05:40.072
rot in the code, and it's super simple.

67
00:05:40.072 --> 00:05:45.559
Is, when I describe in the state
nested logic SRP violations,

68
00:05:45.559 --> 00:05:50.424
it's things that are tightly
coupled in the wrong way,

69
00:05:50.424 --> 00:05:55.186
is that you have hidden state
coupled into a function,

70
00:05:55.186 --> 00:05:58.104
nested logic, SRP violations.

71
00:05:58.104 --> 00:06:01.470
And when something is word,

72
00:06:01.470 --> 00:06:06.238
it should be the opposite is the solution

73
00:06:06.238 --> 00:06:11.156
in that extract, promote, move it out.

74
00:06:11.156 --> 00:06:16.063
So if you have, for instance,
hidden state in a function where

75
00:06:16.063 --> 00:06:21.341
you're mutating state within a function,
and so you have the state

76
00:06:21.341 --> 00:06:26.817
mutation inside of a function, well,
how do you test that function?

77
00:06:26.817 --> 00:06:27.709
You can't,

78
00:06:27.709 --> 00:06:32.979
because you have no way of knowing what
the end result of that function is gonna

79
00:06:32.979 --> 00:06:37.864
be without knowing things that
are happening outside of the function.

80
00:06:37.864 --> 00:06:44.679
Super easy to solve, you take the hidden
state, you pass it in as a parameter.

81
00:06:44.679 --> 00:06:49.358
Extract the parameter,
that's the logic, extract a function.

82
00:06:49.358 --> 00:06:54.546
So if you have an if else statement or
a switch statement and you got these

83
00:06:54.546 --> 00:06:59.836
complicated, there's business logic
in there, how do you test that?

84
00:06:59.836 --> 00:07:03.206
How do you test that and
step over the other things?

85
00:07:03.206 --> 00:07:07.387
Suddenly, you got this complicated
setup to just get into that one thing.

86
00:07:07.387 --> 00:07:11.118
Well, you just extract it to a method.

87
00:07:11.118 --> 00:07:12.664
It's that simple.

88
00:07:12.664 --> 00:07:18.606
If you have a function that's doing
two things or more, what do you do?

89
00:07:18.606 --> 00:07:24.342
Extract a method, and so the,

90
00:07:26.890 --> 00:07:32.858
I think one of the first principles or

91
00:07:32.858 --> 00:07:40.374
core principles of
programming is to commit.

92
00:07:40.374 --> 00:07:44.343
If you want to write good tests,
write good code.

93
00:07:44.343 --> 00:07:49.203
And its always funny to me
when somebody comes to me and

94
00:07:49.203 --> 00:07:54.177
says, hey, we wanna hire you to come and
fix the test.

95
00:07:54.177 --> 00:07:56.845
And you're like, fix the test?

96
00:07:56.845 --> 00:07:59.972
[LAUGH] I can't fix the test
without fixing your code,

97
00:07:59.972 --> 00:08:03.109
which means that I probably
have to fix your culture.

98
00:08:03.109 --> 00:08:06.044
Which means then we probably
have to fix your organization.

99
00:08:06.044 --> 00:08:07.957
That's the canary in the coal mine.

100
00:08:07.957 --> 00:08:13.915
So with that said, I want to just show

101
00:08:13.915 --> 00:08:19.305
a few patterns in the sample app.

102
00:08:19.305 --> 00:08:21.223
All right, git push.

103
00:08:45.595 --> 00:08:47.689
I'm guessing here.

104
00:08:47.689 --> 00:08:50.643
This feels like the right thing.

105
00:08:50.643 --> 00:08:54.494
And P, [LAUGH] nice try, Louis.

106
00:09:11.363 --> 00:09:16.215
All right, that's it, we did it.

107
00:09:16.215 --> 00:09:21.291
Everybody, go home,
have a good weekend, awesome.

108
00:09:21.291 --> 00:09:24.978
That, for a second, I almost believed it.

109
00:09:30.924 --> 00:09:36.188
Let's just step through the components and
kinda work through just a few things.

110
00:09:36.188 --> 00:09:42.921
The biggest thing, as I said,
that when you are writing tests for

111
00:09:42.921 --> 00:09:48.186
Angular, I think the majority
of your time is going

112
00:09:48.186 --> 00:09:53.339
to revolve around satisfying
the dependencies.

113
00:09:53.339 --> 00:09:59.943
This is why when you have fine-grained
code with minimal dependencies,

114
00:09:59.943 --> 00:10:06.879
it's so much easier to set up the context
for that unit under test to operate.

115
00:10:06.879 --> 00:10:12.477
So the question is then,

116
00:10:12.477 --> 00:10:18.341
if you have a dependency,

117
00:10:18.341 --> 00:10:23.406
what can you do to solve

118
00:10:23.406 --> 00:10:27.681
that dependency?

119
00:10:27.681 --> 00:10:29.429
If you have a dependency, what do you do?

120
00:10:29.429 --> 00:10:32.045
Well, there's a few things, so,

121
00:10:35.375 --> 00:10:39.621
One is you can, and

122
00:10:39.621 --> 00:10:47.039
if I look up, Here,

123
00:10:47.039 --> 00:10:53.171
[SOUND] you can use mocks or stubs.

124
00:10:53.171 --> 00:10:58.582
And so when I say mock or stub,
and if anybody wants to offer

125
00:10:58.582 --> 00:11:04.214
the version of what they think is
that when I think of a mock and

126
00:11:04.214 --> 00:11:09.514
a stub, a stub is the bare
minimum to satisfy the API, and

127
00:11:09.514 --> 00:11:15.833
a mock actually has some basic
functionality kind of baked into it.

128
00:11:15.833 --> 00:11:18.265
So a mock actually can
exhibit some behavior.

129
00:11:18.265 --> 00:11:22.368
Stub is just a stubby little object.

130
00:11:22.368 --> 00:11:27.356
When you are writing your test,

131
00:11:27.356 --> 00:11:35.869
that's the first thing that
you have to ask yourself.

132
00:11:35.869 --> 00:11:41.038
And I'm looking to see if I'm trying

133
00:11:41.038 --> 00:11:46.539
to find a good example of, I would wager

134
00:11:46.539 --> 00:11:52.061
either in one of these state ones, or,

135
00:11:58.749 --> 00:12:01.873
Perfect, awesome, so

136
00:12:01.873 --> 00:12:06.558
dependency injection for the win,

137
00:12:06.558 --> 00:12:12.035
we are setting up the challengesFacade.

138
00:12:12.035 --> 00:12:16.713
And so what we're able to do is

139
00:12:16.713 --> 00:12:21.578
provide the action subject and

140
00:12:21.578 --> 00:12:28.326
use this mock action subject in its place.

141
00:12:28.326 --> 00:12:32.581
So this is really, really nice when
it's like, you have this dependency,

142
00:12:32.581 --> 00:12:36.781
I can give it to you, we can call it that,
but it's really something else.

143
00:12:36.781 --> 00:12:42.748
And the action subject here,

144
00:12:46.144 --> 00:12:52.675
Is, we're actually using, I think,
the full one if I'm not mistaken.

145
00:12:52.675 --> 00:12:57.129
So what you have as well,
speaking of mocks,

146
00:12:57.129 --> 00:13:01.363
is that NGRX provides some of this for
you.

147
00:13:01.363 --> 00:13:06.395
I will say this,
if you want, I think some of

148
00:13:06.395 --> 00:13:12.787
the best API documentation for
a library is in the test.

149
00:13:12.787 --> 00:13:17.544
If you're confused at how something works,
go look at the test.

150
00:13:17.544 --> 00:13:19.685
And it's very, very precise,

151
00:13:19.685 --> 00:13:24.375
highly concentrated examples of how
do you interact with this thing.

152
00:13:24.375 --> 00:13:28.220
Well, because it's a unit under test,
and you can see it.

153
00:13:28.220 --> 00:13:32.484
So now, when we are creating this,

154
00:13:32.484 --> 00:13:38.466
we're testing the challengesFacade,
we have,

155
00:13:42.975 --> 00:13:48.305
A few dependencies, and what's interesting

156
00:13:48.305 --> 00:13:54.597
is that we're using the inject or
to pull in the store.

157
00:13:54.597 --> 00:13:57.063
So this is coming off the core.

158
00:13:57.063 --> 00:14:02.565
And so typically, I look for
hard dependencies.

159
00:14:02.565 --> 00:14:05.869
And then I create a reference
to the unit in our test.

160
00:14:05.869 --> 00:14:07.762
So we're testing the challengesFacade.

161
00:14:07.762 --> 00:14:12.103
So I create a placeholder for
an instance of that, and

162
00:14:12.103 --> 00:14:17.810
then a placeholder for the things
that we're directly injecting in.

163
00:14:17.810 --> 00:14:24.029
And then in the testing module,
then we use providers, crying out loud.

164
00:14:30.238 --> 00:14:34.623
This VS code is all over the place,

165
00:14:34.623 --> 00:14:38.412
to override and wire this up.

166
00:14:38.412 --> 00:14:41.976
So here, provide mock store.

167
00:14:41.976 --> 00:14:47.926
So it's like the store, but it's not
action subject, mock action subject.

168
00:14:47.926 --> 00:14:53.912
And then we're able to
inject these instances,

169
00:14:53.912 --> 00:14:56.978
these units under test,

170
00:14:56.978 --> 00:15:01.796
into the test module or the testbed, so

171
00:15:01.796 --> 00:15:06.774
the testbed actually wraps the module.

172
00:15:06.774 --> 00:15:08.770
So that's the first piece,

173
00:15:08.770 --> 00:15:12.773
is understanding how to
satisfy dependency injection.

174
00:15:12.773 --> 00:15:16.461
If you can figure that out, or better yet,

175
00:15:16.461 --> 00:15:22.515
if you can figure out how to avoid
creating dependencies, high five.

176
00:15:22.515 --> 00:15:28.838
Then satisfying them is pretty
easy using the provide,

177
00:15:28.838 --> 00:15:33.824
use value, use class, use object syntax.

