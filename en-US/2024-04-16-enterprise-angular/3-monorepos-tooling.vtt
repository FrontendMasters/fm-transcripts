WEBVTT

1
00:00:00.410 --> 00:00:06.810
Let's move on to Monorepos and Tooling.

2
00:00:06.810 --> 00:00:12.111
The one thing that I will
say about monorepos, so,

3
00:00:12.111 --> 00:00:18.396
the one that we are specifically
looking at is NX by Narwhal,

4
00:00:18.396 --> 00:00:23.698
which was created by Victor Savkin and
Jeff Cross,

5
00:00:23.698 --> 00:00:28.382
who worked at Google on the Angular team,
and

6
00:00:28.382 --> 00:00:32.110
Google has an extensive monorepo.

7
00:00:32.110 --> 00:00:39.480
I mean,
it's crazy how massive their monorepo is.

8
00:00:39.480 --> 00:00:44.115
And It's a monorepo but not a monolith,

9
00:00:44.115 --> 00:00:49.429
is that everything is in
a single project but,

10
00:00:49.429 --> 00:00:54.201
it's organized in a way where everything

11
00:00:54.201 --> 00:00:58.577
is kind of autonomous and decoupled.

12
00:00:58.577 --> 00:01:05.318
And so, let me just show you
maybe the file structure here.

13
00:01:05.318 --> 00:01:11.520
The idea with a monorepo is that
you can have more than one app.

14
00:01:11.520 --> 00:01:18.459
So, in this case,
we have portal and dashboard,

15
00:01:18.459 --> 00:01:24.912
which these are top
level host applications.

16
00:01:24.912 --> 00:01:29.200
Then you're gonna have remote applications

17
00:01:29.200 --> 00:01:33.384
that are candidates to
be micro front ends.

18
00:01:33.384 --> 00:01:37.289
And so these are all web applications.

19
00:01:37.289 --> 00:01:42.254
If the platform that I was working on or
the business

20
00:01:42.254 --> 00:01:47.449
domain was small enough,
it would not be uncommon for

21
00:01:47.449 --> 00:01:52.246
me to put my APIs in this folder as well.

22
00:01:52.246 --> 00:01:57.398
I think that you take an approach
where you refactor through promotion,

23
00:01:57.398 --> 00:02:02.381
is that you start small, as it starts
to grow, you just refactor it and

24
00:02:02.381 --> 00:02:07.226
you just keep promoting it to
the next obstruction layer.

25
00:02:07.226 --> 00:02:12.274
So, within this monorepo, as it stands,

26
00:02:12.274 --> 00:02:19.006
but not for long,
[LAUGH] we have at least, I don't know,

27
00:02:19.006 --> 00:02:25.050
it looks like 12 just in the apps folder.

28
00:02:25.050 --> 00:02:31.330
But what I've also done is,
I've broken a few other things out.

29
00:02:31.330 --> 00:02:35.250
So you have your libs.

30
00:02:35.250 --> 00:02:41.470
So libs are your reusable,
consumable pieces of functionality

31
00:02:41.470 --> 00:02:47.398
that you want to make available
to all of the applications.

32
00:02:47.398 --> 00:02:51.268
So, a good example of
that is API interfaces.

33
00:02:51.268 --> 00:02:57.235
So if I'm doing angular and nest,
well, I have that contract there and

34
00:02:57.235 --> 00:03:03.376
in my node app or my nest app,
I can program to the interfaces.

35
00:03:03.376 --> 00:03:08.965
The other piece that I have,
and in this case I've broken

36
00:03:08.965 --> 00:03:15.396
this out per feature, but
I will put what I call a data lib.

37
00:03:15.396 --> 00:03:22.039
So that's the library that holds the HTTP
client to communicate with the backend.

38
00:03:23.119 --> 00:03:28.814
So, this is where it's either core data
if it's small or if I'm breaking it out,

39
00:03:28.814 --> 00:03:33.389
in this case, you've got challenges data,
features data.

40
00:03:33.389 --> 00:03:38.469
So you can see that we're essentially
separating it per feature slice.

41
00:03:38.469 --> 00:03:42.185
Also, you have, state.

42
00:03:42.185 --> 00:03:46.950
So this is challenges state,
future state, and

43
00:03:46.950 --> 00:03:52.888
this holds the state management
piece to your application.

44
00:03:52.888 --> 00:03:59.974
And the beautiful thing about this,
it is incredibly efficient and

45
00:03:59.974 --> 00:04:04.325
gratifying when you build, let's say,

46
00:04:04.325 --> 00:04:09.670
a web app and
then you decide you want a mobile app and

47
00:04:09.670 --> 00:04:13.647
so you spin up for instance, Ionic and

48
00:04:13.647 --> 00:04:18.991
80% of your app is written
because your state and

49
00:04:18.991 --> 00:04:24.615
your data layers are in
the libs that you just pull in.

50
00:04:24.615 --> 00:04:31.863
So, think of your applications is purely,
really just component layers,

51
00:04:31.863 --> 00:04:36.166
is that I will typically
have my components,

52
00:04:36.166 --> 00:04:42.956
the routing to navigate across
those components and a façade.

53
00:04:42.956 --> 00:04:45.716
More on the façade later.

54
00:04:45.716 --> 00:04:52.252
I imagine that there's people on
the interwebs, their eye is twitching, and

55
00:04:52.252 --> 00:04:59.668
I'll unpack why I think the façade pattern
is pretty incredible, but that's it.

56
00:04:59.668 --> 00:05:02.695
It's just components, and some way for

57
00:05:02.695 --> 00:05:07.414
that component layer to have an API,
which is essentially what

58
00:05:07.414 --> 00:05:13.298
the façade serves as is an application
API into the rest of the app.

59
00:05:13.298 --> 00:05:16.277
And everything else is abstracted out.

60
00:05:16.277 --> 00:05:21.851
Your components should not have to
know where the data is coming from or

61
00:05:21.851 --> 00:05:24.507
how your state is being managed.

62
00:05:24.507 --> 00:05:25.967
This is absolutely critical.

63
00:05:25.967 --> 00:05:30.906
So, as we start to think about how
do we become enterprisey it's how do

64
00:05:30.906 --> 00:05:34.987
we start to break things
up in a meaningful way.

65
00:05:34.987 --> 00:05:41.953
So that if we want to change something,
that we're not having to go and tinker.

66
00:05:41.953 --> 00:05:44.624
It's like, I need to change my tire well,

67
00:05:44.624 --> 00:05:47.903
then you got to go take your
glove box out of your car.

68
00:05:47.903 --> 00:05:49.843
It makes no sense, right?

69
00:05:49.843 --> 00:05:56.322
So, this is where, well,
I'll get into that, I'll just iterate.

70
00:05:56.322 --> 00:06:01.905
What we also have is remote, so
this is where I put the APIs and

71
00:06:01.905 --> 00:06:06.849
then I just have some server and
some database stuff.

72
00:06:06.849 --> 00:06:12.489
But you can see that, typically for
every feature slice that we identified,

73
00:06:12.489 --> 00:06:18.564
that there's a corresponding layer in the
application that we have the front end,

74
00:06:18.564 --> 00:06:21.799
the state, the data, we have the API.

75
00:06:21.799 --> 00:06:27.579
We have the server, which is JSON server,
currently, but it's all there.

76
00:06:27.579 --> 00:06:32.149
And so I personally think of
apps in a horizontal way.

77
00:06:32.149 --> 00:06:35.819
But you can also think of them you
could even do them vertically.

78
00:06:35.819 --> 00:06:39.316
So, if somebody wanted to
actually move all of the,

79
00:06:39.316 --> 00:06:46.024
let's say user stuff into one place, I've
seen it where it's organized into domains.

80
00:06:46.024 --> 00:06:50.484
And then you have everything for that
feature slice in one place, totally fine.

81
00:06:50.484 --> 00:06:54.515
You can think about it horizontally or
vertically.

