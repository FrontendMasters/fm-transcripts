WEBVTT

1
00:00:00.650 --> 00:00:03.600
&gt;&gt; Lukas: When somebody is learning Redux.

2
00:00:05.616 --> 00:00:09.435
&gt;&gt; Lukas: The first phase is you got to
get them comfortable with state flows

3
00:00:09.435 --> 00:00:10.832
down, event flows up.

4
00:00:13.416 --> 00:00:16.587
&gt;&gt; Lukas: One of two questions
is going to happen next.

5
00:00:19.938 --> 00:00:25.088
&gt;&gt; Lukas: The first one, or
it can happen in any order, but

6
00:00:25.088 --> 00:00:32.259
one of them is what happens if you
have a relational data structure?

7
00:00:32.259 --> 00:00:34.077
How do you put those back together?

8
00:00:36.404 --> 00:00:41.380
&gt;&gt; Lukas: The second question is what
happens if I need to do something at

9
00:00:41.380 --> 00:00:44.647
the server before I save it to the store?

10
00:00:46.127 --> 00:00:52.717
So, how do you compose relational data?

11
00:00:52.717 --> 00:00:57.044
So you have two slices, like let's
say we had users and challenges or

12
00:00:57.044 --> 00:01:00.325
whatever, and
like how do I actually combine that,

13
00:01:00.325 --> 00:01:05.709
because they're separated because
you don't want it in two places.

14
00:01:05.709 --> 00:01:11.486
And so,
we'll go with the asynchronous one first,

15
00:01:11.486 --> 00:01:18.069
because we've already touched
on the compositional one.

16
00:01:18.069 --> 00:01:22.894
&gt;&gt; Speaker 2: Sorry, excuse me,
if I may ask, I'm looking at this now, and

17
00:01:22.894 --> 00:01:26.263
then going back to the visualstudio.net,

18
00:01:26.263 --> 00:01:30.177
the way we used to structure is this,
the data set or

19
00:01:30.177 --> 00:01:35.640
data source where you have all the data
pulled into a particular place,

20
00:01:35.640 --> 00:01:40.982
and then finish working, and
then you take everything back to.

21
00:01:40.982 --> 00:01:47.884
&gt;&gt; Lukas: Yes, so this is basically a port
of Redux which is heavily into to React,

22
00:01:47.884 --> 00:01:54.448
and the idea is that all state gets
composed into a single state tree,

23
00:01:54.448 --> 00:01:59.352
and all your application
state is in one place.

24
00:01:59.352 --> 00:02:03.210
Why this is important, and

25
00:02:03.210 --> 00:02:08.578
the other thing is any operation you do

26
00:02:08.578 --> 00:02:13.791
to application state is immutable.

27
00:02:16.671 --> 00:02:18.957
The reason being is that,

28
00:02:22.488 --> 00:02:27.161
&gt;&gt; Lukas: How does garbage collection

29
00:02:27.161 --> 00:02:32.421
know if something has changed?

30
00:02:36.691 --> 00:02:43.927
&gt;&gt; Lukas: Well, a very obvious way is
that the memory pointer changes, and

31
00:02:43.927 --> 00:02:51.163
so when you have a variable pointing
to a specific heap of memory,

32
00:02:51.163 --> 00:02:56.233
and historically, we would just mutate it.

33
00:02:56.233 --> 00:03:00.690
It's like, I've got an array of 20 things,
and I'm gonna go change the 9th one, well,

34
00:03:00.690 --> 00:03:02.657
how do you know it changed?

35
00:03:02.657 --> 00:03:03.947
How do you know it changed?

36
00:03:05.177 --> 00:03:10.197
Versus, I'm going to replace
the entire array with a new one, well,

37
00:03:10.197 --> 00:03:16.070
that's a pretty good indication that
something's changed and you no longer have

38
00:03:16.070 --> 00:03:21.544
to go and waste the cycle is trying to
figure out like, well, what changed?

39
00:03:21.544 --> 00:03:22.184
What do I update?

40
00:03:22.184 --> 00:03:22.754
What happened?

41
00:03:23.884 --> 00:03:28.815
And it's actually trying
to go figure out like what

42
00:03:28.815 --> 00:03:34.320
actually was mutated,
versus I'm just gonna swap it and

43
00:03:34.320 --> 00:03:39.950
just respond by refreshing or
re-rendering the things.

44
00:03:39.950 --> 00:03:44.612
And so this is why there's a lot
of other things I could say

45
00:03:44.612 --> 00:03:49.099
about immutable operations,
but this is one of them.

46
00:03:49.099 --> 00:03:55.163
Is that all your state goes into
one place, when you change state,

47
00:03:55.163 --> 00:03:59.929
it essentially swaps that
object out with a new one,

48
00:03:59.929 --> 00:04:03.743
which you can store and create a memento.

49
00:04:03.743 --> 00:04:07.665
You can do a lot of really interesting
things, I've done it where I've actually,

50
00:04:07.665 --> 00:04:11.196
when you throw an error, I capture
the previous state and the command, and

51
00:04:11.196 --> 00:04:14.804
I send it to LogRocket, and then you
can actually replay that entire state.

52
00:04:14.804 --> 00:04:18.907
You can pull the state tree back down,
replay that,

53
00:04:18.907 --> 00:04:23.478
and you can recreate with total
precision the application

54
00:04:23.478 --> 00:04:28.340
before it went into an air state,
it's pretty interesting.

55
00:04:28.340 --> 00:04:33.355
So, this is, yes, to answer your
question in a very roundabout way,

56
00:04:33.355 --> 00:04:36.330
it's this is exactly what's happened.

57
00:04:36.330 --> 00:04:39.107
This was heavily inspired by Redux, and

58
00:04:39.107 --> 00:04:43.773
I'll actually show you something
kind of interesting in a moment.

59
00:04:45.163 --> 00:04:47.610
So, the asynchronous part.

60
00:04:51.315 --> 00:04:56.361
&gt;&gt; Lukas: This, I believe, is the hardest

61
00:04:56.361 --> 00:05:01.047
part about learning NgRX, and

62
00:05:01.047 --> 00:05:08.447
this is where I think people,
really get stuck.

63
00:05:08.447 --> 00:05:10.514
And I feel like maybe
I've said this already,

64
00:05:10.514 --> 00:05:13.227
I feel like I just made went back
in time Groundhog day style.

65
00:05:14.367 --> 00:05:19.521
The reason why people
struggle with effects,

66
00:05:19.521 --> 00:05:26.668
is because you're dealing with
asynchronous business logic.

67
00:05:29.090 --> 00:05:34.457
&gt;&gt; Lukas: And
that's hard because most people do not

68
00:05:34.457 --> 00:05:40.730
appropriately understand
observable streams.

69
00:05:43.396 --> 00:05:48.470
&gt;&gt; Lukas: And if you don't
understand observable streams,

70
00:05:48.470 --> 00:05:53.544
the asynchronous nature of
an observable stream is

71
00:05:53.544 --> 00:05:59.336
going to be mysterious and
confusing and unpredictable.

72
00:05:59.336 --> 00:06:02.718
I think I talked about it
in one of the courses here,

73
00:06:02.718 --> 00:06:05.236
so I'm not gonna get too much into it,

74
00:06:05.236 --> 00:06:11.079
it's just asynchronous logic is tough in
any domain, any technology, any platform.

75
00:06:13.979 --> 00:06:18.441
&gt;&gt; Lukas: And,
I can say that most certainly.

76
00:06:22.494 --> 00:06:25.464
&gt;&gt; Lukas: Effects are no exception.

77
00:06:25.464 --> 00:06:28.794
What we have here is,

78
00:06:28.794 --> 00:06:33.604
we're creating an effect that

79
00:06:33.604 --> 00:06:38.602
is looking for a trigger event.

80
00:06:38.602 --> 00:06:43.852
So in this case,
&gt;&gt; Lukas: We

81
00:06:43.852 --> 00:06:47.686
are listening for, if I can get
this mouse to stop being stupid,

82
00:06:47.686 --> 00:06:50.676
what's the action that we're looking for
here?

83
00:06:50.676 --> 00:06:51.666
Can you guys see this?

84
00:06:53.756 --> 00:07:00.548
Load workshops, right,
this is the trigger event.

85
00:07:00.548 --> 00:07:06.794
Then you either have a success or
failure completion event.

86
00:07:08.024 --> 00:07:12.342
And so,
effects are basically middleware for

87
00:07:12.342 --> 00:07:16.660
your front end app were
just like the reducer,

88
00:07:16.660 --> 00:07:22.766
they're listening for actions and
responding if it matches up.

89
00:07:24.556 --> 00:07:31.052
Now, it is possible to have a reducer and
an effect listening for

90
00:07:31.052 --> 00:07:36.240
the same event,
I would recommend avoiding that.

91
00:07:39.672 --> 00:07:43.960
&gt;&gt; Lukas: Where I think maybe I would
permit it and I think it's actually in

92
00:07:43.960 --> 00:07:47.932
this example is that if I needed
to set loading to false and so

93
00:07:47.932 --> 00:07:51.507
I need to just like it's loaded,
it's not loaded but

94
00:07:51.507 --> 00:07:55.573
then all of the logic, and
even then I'm not in love with it.

95
00:07:55.573 --> 00:08:00.637
But you have a trigger event or action.

96
00:08:00.637 --> 00:08:06.781
Those go into effects, then the effects

97
00:08:06.781 --> 00:08:11.850
dispatch the completion event.

98
00:08:11.850 --> 00:08:18.855
And so I think of it as,
you're assembling a train.

99
00:08:18.855 --> 00:08:24.564
Cuz you can actually have an effect
that listens for a trigger event,

100
00:08:24.564 --> 00:08:30.079
that dispatches an event,
that gets picked up by another effect,

101
00:08:30.079 --> 00:08:35.809
that triggers another event,
that gets picked up by another event.

102
00:08:35.809 --> 00:08:42.229
You can string effects together and
do some really interesting asynchronous,

103
00:08:42.229 --> 00:08:46.459
like logic composition and
workflow composition.

104
00:08:46.459 --> 00:08:51.609
If anybody is familiar with
step functions in AWS Lambda,

105
00:08:51.609 --> 00:08:56.457
it's all event-based
distributed workflow stuff.

106
00:08:56.457 --> 00:09:00.291
Well, in a microcosm,
this is what effects are, trigger,

107
00:09:00.291 --> 00:09:02.784
completion, trigger, completion.

108
00:09:02.784 --> 00:09:06.564
So most of the time, the trigger event is,

109
00:09:06.564 --> 00:09:10.554
do some asynchronous
thing it to the server,

110
00:09:10.554 --> 00:09:16.753
the completion event is this is
the result of it, save it to the store.

111
00:09:16.753 --> 00:09:23.515
And we have some basic stuff.

112
00:09:23.515 --> 00:09:28.923
I would say that this is a matter of
just kinda looking at the operators and

113
00:09:28.923 --> 00:09:31.862
doing a little bit of homework on them.

114
00:09:31.862 --> 00:09:36.896
The other piece, or
the other question that I posed is,

115
00:09:36.896 --> 00:09:40.976
what happens when you
have relational data?

116
00:09:42.968 --> 00:09:47.127
&gt;&gt; Lukas: That,
let's say we have users and lessons, and

117
00:09:47.127 --> 00:09:52.817
I want to stitch those back together
to display them, what do I do?

118
00:09:52.817 --> 00:09:59.534
Well, this is where you use a selector
to essentially create two subselectors,

119
00:09:59.534 --> 00:10:05.858
combine them together cuz they're
just streams, compose them together,

120
00:10:05.858 --> 00:10:10.632
and then return a new stream
with a combined data source.

121
00:10:10.632 --> 00:10:13.370
State flows down, events flow up.

122
00:10:13.370 --> 00:10:20.207
If event flows up, if there's
an asynchronous action, it hits an effect.

123
00:10:20.207 --> 00:10:24.035
That effect completes and
it pushes it into the store.

124
00:10:24.035 --> 00:10:30.278
If state flows down, and you need to
perform some sort of composition,

125
00:10:30.278 --> 00:10:36.834
it goes into a selector or selectors,
that then performs that operation,

126
00:10:36.834 --> 00:10:42.559
and then returns it as unified
stream into the really the facade,

127
00:10:42.559 --> 00:10:46.958
which then gets passed on
to the component layer.

128
00:10:46.958 --> 00:10:49.323
Does that make sense so far?

129
00:10:49.323 --> 00:10:56.316
All right, we have just a few
more things to wire up here,

130
00:10:56.316 --> 00:11:03.763
just wanna make sure I'm giving
this the proper attention.

131
00:11:08.652 --> 00:11:13.871
&gt;&gt; Lukas: Oops,
the one thing that I haven't done yet

132
00:11:13.871 --> 00:11:19.233
is because we're no
longer pushing this into

133
00:11:19.233 --> 00:11:25.160
an entry module,
because of the standalone API,

134
00:11:25.160 --> 00:11:30.682
that you have to achieve
that somewhere else.

135
00:11:30.682 --> 00:11:34.567
And so in this case, what I've done, and

136
00:11:34.567 --> 00:11:40.671
what I do is,
&gt;&gt; Lukas: Well,

137
00:11:40.671 --> 00:11:43.122
apparently, I'm totally
discombobulated right now, hold on.

138
00:11:49.411 --> 00:11:52.158
&gt;&gt; Lukas: user-state,
workshop-state, there we go.

139
00:11:56.073 --> 00:12:00.857
&gt;&gt; Lukas: I just create a state.ts file,
go in here

140
00:12:08.787 --> 00:12:12.243
&gt;&gt; Lukas: Now, the one thing that needs to

141
00:12:12.243 --> 00:12:17.879
happen, if anybody wants
to submit a pull request,

142
00:12:17.879 --> 00:12:24.042
is my template wizard does not
do a good job with all caps.

143
00:12:24.042 --> 00:12:28.759
So I would accept a pull request on that.

144
00:12:37.412 --> 00:12:45.059
&gt;&gt; Lukas: So I have to go through and,
&gt;&gt; Lukas: So

145
00:12:45.059 --> 00:12:51.256
this I believe, for
the most part, is all the stuff.

146
00:12:51.256 --> 00:12:53.264
I feel like I might have,

147
00:13:07.918 --> 00:13:10.295
&gt;&gt; Lukas: What am I missing here?

148
00:13:10.295 --> 00:13:12.206
I'm on a spec, okay, that's fine.

149
00:13:18.388 --> 00:13:21.232
&gt;&gt; Lukas: Admittedly,
there are a lot of moving pieces.

150
00:13:21.232 --> 00:13:24.766
So the other thing is
kinda the barrel roll or

151
00:13:24.766 --> 00:13:30.030
kind of the index file that serves
as kinda the public API is this.

152
00:13:30.030 --> 00:13:34.468
So, eloquently, point out here,

153
00:13:37.412 --> 00:13:39.877
[SOUND]

154
00:13:49.300 --> 00:13:50.567
&gt;&gt; Lukas: All right, so

155
00:13:50.567 --> 00:13:56.598
I think the library, or the state
library is pretty much good to go.

156
00:13:56.598 --> 00:14:01.562
Now the question is,
how do we actually get this hooked in?

157
00:14:01.562 --> 00:14:10.035
And this is where, when I was wrapping
my mind rather new standalone API.

158
00:14:10.035 --> 00:14:15.944
Poor Brian Love, just called him on
the phone, just sobbing my eyes out.

159
00:14:25.099 --> 00:14:29.631
&gt;&gt; Lukas: All right, so, I believe

160
00:14:29.631 --> 00:14:34.781
there's only two places that

161
00:14:34.781 --> 00:14:39.313
you see NgRx kind of emerge

162
00:14:39.313 --> 00:14:44.060
into the consuming layer.

163
00:14:44.060 --> 00:14:46.850
And fortunately it happens in the,

164
00:14:46.850 --> 00:14:52.246
maybe not totally constrained with
the way that we're doing it now.

165
00:14:52.246 --> 00:14:57.800
[COUGH] It's pretty much isolated
into the remote entry point,

166
00:14:57.800 --> 00:15:00.638
which I'm pretty happy about.

167
00:15:02.177 --> 00:15:06.048
So one is,
when you're setting up your app config.

168
00:15:06.048 --> 00:15:10.937
So when you're Bootstrapping
your application that

169
00:15:10.937 --> 00:15:14.846
instead of having just this big, long, or

170
00:15:14.846 --> 00:15:20.713
this huge thing where you're
calling Bootstrap application,

171
00:15:20.713 --> 00:15:23.863
you got this big config object that

172
00:15:23.863 --> 00:15:28.556
they've started to move
this out into appConfig.

173
00:15:32.524 --> 00:15:34.849
&gt;&gt; Lukas: I'm just gonna copy this.

174
00:15:48.078 --> 00:15:52.637
&gt;&gt; Lukas: I keep forgetting that
workshops is all the way down here.

175
00:16:04.907 --> 00:16:11.228
&gt;&gt; Lukas: What's interesting this is
actually a host application that,

176
00:16:11.228 --> 00:16:16.035
notice, it doesn't have
a remote entry point.

177
00:16:16.035 --> 00:16:22.837
And the last thing that we have is,

178
00:16:22.837 --> 00:16:29.170
we need to just wire in the facade

179
00:16:29.170 --> 00:16:33.404
into the component.

180
00:16:33.404 --> 00:16:35.748
So typically,

181
00:16:46.628 --> 00:16:49.306
&gt;&gt; Lukas: In this case, it would go into,

182
00:16:57.615 --> 00:17:02.079
&gt;&gt; Lukas: The container component in

183
00:17:02.079 --> 00:17:07.281
the,
&gt;&gt; Lukas: Application, but

184
00:17:07.281 --> 00:17:12.422
I don't have all of this in, so
I am gonna just put this in here.

185
00:17:12.422 --> 00:17:16.224
I think really what I would
need to do in this case,

186
00:17:16.224 --> 00:17:21.841
if I was gonna be thorough, is actually
generate a workshops component,

187
00:17:21.841 --> 00:17:24.575
Master Detail View to put in there.

188
00:17:24.575 --> 00:17:29.507
So what I'm going to do instead is,

189
00:17:35.154 --> 00:17:38.207
&gt;&gt; Lukas: I'm just going to copy

190
00:17:38.207 --> 00:17:39.977
the facade.

191
00:17:44.564 --> 00:17:45.903
&gt;&gt; Lukas: And,

192
00:18:08.492 --> 00:18:11.857
&gt;&gt; Lukas: What file am I in?

193
00:18:11.857 --> 00:18:14.948
Wrong, that's not it, all right?

194
00:18:18.103 --> 00:18:19.827
&gt;&gt; Lukas: I'm excited
thinking about a break.

195
00:18:23.337 --> 00:18:26.098
&gt;&gt; Lukas: All right,
now I'm in the right place.

196
00:18:26.098 --> 00:18:33.172
So private workshopsFacade.

197
00:18:51.770 --> 00:18:53.691
&gt;&gt; Lukas: I was really hoping
this would just pick up.

198
00:19:07.695 --> 00:19:09.904
&gt;&gt; Speaker 3: Line 15 needs an A in facade

199
00:19:16.066 --> 00:19:19.255
&gt;&gt; Lukas: I might have actually sabotaged.

200
00:19:22.646 --> 00:19:24.097
&gt;&gt; Lukas: I thought I did this already.

201
00:19:27.981 --> 00:19:33.149
&gt;&gt; Lukas: Come on, notes,
notes, notes, notes.

202
00:19:40.941 --> 00:19:46.154
&gt;&gt; Lukas: Actually,
I think I did this, almost done.

203
00:19:59.941 --> 00:20:03.259
&gt;&gt; Lukas: Go in your hole you stupid ball.

204
00:20:03.259 --> 00:20:04.235
All right,

205
00:20:04.235 --> 00:20:11.690
that's done
&gt;&gt; Speaker 4: I

206
00:20:11.690 --> 00:20:16.387
think you're importing it
from the data not the state.

207
00:20:16.387 --> 00:20:21.115
&gt;&gt; Lukas: Am I doing that cuz
that would make a lot of sense.

208
00:20:21.115 --> 00:20:25.137
&gt;&gt; Speaker 4: Yeah,
you definitely didn't have an export for

209
00:20:25.137 --> 00:20:27.379
the facade on the data lib
&gt;&gt; Lukas: So

210
00:20:27.379 --> 00:20:31.851
that's where we have unintended
consequences where like,

211
00:20:31.851 --> 00:20:35.720
I'm just gonna leave this
here it's totally fine.

212
00:20:35.720 --> 00:20:38.695
And if I wasn't in front of everybody
just desperate for your approval,

213
00:20:38.695 --> 00:20:40.471
I probably would have went and fixed that.

214
00:20:40.471 --> 00:20:42.284
So, all right,

