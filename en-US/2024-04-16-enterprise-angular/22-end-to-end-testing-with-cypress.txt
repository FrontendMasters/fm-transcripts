[00:00:00]
>> We've covered unit testing, but I believe that no testing story is complete without end-to-end testing. And end testing, in my opinion, is one of the most underrepresented value ads within an organization. And there's a myriad of reasons why I'm being able to test your features in conjunction with each other how they fit together is the ultimate safety net.

[00:00:30]
Not only does it give you kind of the peace of mind that when I make a change, everything works. I have seen very bad things happen in terms of regression errors or maybe something works in isolation, but when you run it in the context of the entire app, all hell breaks loose.

[00:00:48]
And so end in testing is something that a lot of organizations do not prioritize, but I blame that in part to tooling. I think that a lot of the tooling available to us was not great and not written for modern front end web applications. But there's two very good tools that have emerged over the last couple of years that's Cypress and playwright.

[00:01:16]
And so what I wanna do is, just show you a real quick demo how to get up and running with an end-to-end test with Cypress in the context of this project. So the command to run your NN test within an NX workspace is NPX, NX, E2E, for end-to-end and then the project that you want to target.

[00:01:46]
Now, before I run this, I need to make a few changes for this to work. Because we have a large amount of apps within our Monorepo that we're kind of playing. I don't wanna say musical ports, but we definitely need to dial these ports in or it's not gonna work.

[00:02:06]
So because challenges is running on 4202 in the cypress .config file, we need to update that. The default Cypress test that is generated comes in the structure. You have fixtures which is for essentially mock data. In the support, we have a app.po.ts. So PO stands for page object and what this allows you to do is kind of segment your selection logic and your testing logic into a single place.

[00:02:51]
And then we have within the E2E portfolio, the actual test itself. In the test itself, this is very similar to kind of a Jasmine syntax. So describe challenges end-to-end, before each, it visits the root directory of the app. You could change this if you needed to, and it says it should display the welcome message.

[00:03:23]
And we have a command here that we're not going to use. I'm going to delete that, and we have a call here, get greeting. That is essentially selecting an element and then it's looking to make sure that it contains some text fragment. Well, this was generated and obviously we've changed the app since then.

[00:03:48]
So let's go ahead and update our template to be able to run a test against so when you have the regular app and your end to end app. The way that they interface, because they run side by side is through the templates and so end-end testing should be fairly non-invasive.

[00:04:17]
That a lot of times we work with developers when they're building out their templates to go ahead and add in the instrumentation to make it easy to run end to end tests. So what I recommend is using a selector specifically for testing, so we'll use data tests, you could use a side test, there's a number of things I prefer to keep this a little bit more agnostic.

[00:04:46]
And then what we're gonna do is we're going to give this a name of list title. What this eliminates is, occasionally you'll see selectors that are these long CSS dependent kinda queries to go with this thing, and that is pretty brittle. If somebody moves something or the structure changes, you have problems.

[00:05:13]
Whereas by having a test ID, I can move this element anywhere around the page and it's still going to work because it's very, very specific. So now that I have my test ID in, I can go back over to the page object. And from here. Let's go ahead and let's write a new function that's responsible for getting the title.

[00:05:42]
So export const getTitle and these selectors typically end up being very small very specific functions that are grabbing one thing. So get title and then from here we're gonna do cy.get and let me just break this to another line real quick. And then we're gonna use this syntax right here.

[00:06:10]
Data-test equals list-title. There we go. So now this is going and looking forward the ID directly on the page. It's so sad having to cascade or really query the DOM, which is very, very fast and it's recommended best practice according to Cypress. Now, let's hop into our actual test and let's update this test here to be a little bit more specific to what we're wanting to do.

[00:06:53]
So should display list title and we don't wanna use get greeting instead let's use getTitle. And we're going to go contains and let's say challenges, there we go. All right, let's save that and let's Run it and see what happens. So I'm now gonna hit this and hopefully everything works.

[00:07:33]
So it's going to spin up the app as well as the test runner for Cypress. And essentially, one the two against each other. So this will take just a small moment of time. So we can see that generated the app, which it just did. Now it's running Cypress against it and all tests passed.

[00:08:00]
So fairly simple to get up and running, which I think we did that in just a matter of a few minutes. One additional element that I would like to make is, I personally try to keep all of my logic and selection logic and assertion logic or let's say get, a range act assert that any of my assertions or my arranging, I try to put into the page object.

[00:08:35]
So right now we're doing get title contains challenges, but I think we can do a little better than that. So what I usually like to do is create a static page object. Or just I'll just call it page and then create a key value pair for the things that are on the page that I either want to select or I want to reference.

[00:09:09]
So what I could do here is title and we'll just take the string here and put that in like so. And then we'll go title label, and we're gonna just go challenges. Now what we're gonna do is we're going to write an additional test. Or an additional function that has a test, and it's going to be checkTitle.

[00:09:47]
And now we're going to go getTitle. And if we go back to our test, we can see that we're doing an assertion here. So let's go back to our page object, and we're going to update this to instead point to the title label. So we're gonna go page.titleLabel, and let's go page.title.

[00:10:28]
And so, this, I believe, is beneficial, because by segmenting out all the kind of the variables into a single object, if this label changes and you're referencing it in more than one test, then it's very easy to change it. So, now what we wanna do is back into our test, instead of get title, we're going to just do checkTitle and we can.

[00:11:07]
Let's optimize imports, there we go, organize imports. All right, now it's clean. Let's go ahead and run this test one more time. So just a little clean up to make it nicer. And if you were to continue kind of doing this, you would just go through and instrument your templates.

[00:11:33]
And I would say update your page object to hold not only your selectors but your assertions, and then write your specs. But, what I do like about this is this is very, very concise, very terse, and very easy to read. If you want to dig deeper into Cypress, this was obviously a very kind of a quick example.

[00:12:00]
There is a great title testing web apps with Cypress by Steve Kenney, who is legendary. And if you wanna dig more into Cypress, I recommend checking that course out. It's really great.

