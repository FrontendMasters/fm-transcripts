WEBVTT

1
00:00:00.100 --> 00:00:04.320
Welcome to the advanced Remix workshop.

2
00:00:04.320 --> 00:00:06.940
I'm so
excited to teach you all about Remix.

3
00:00:08.040 --> 00:00:12.202
If you haven't already been through the
fundamentals workshop, and you don't have

4
00:00:12.202 --> 00:00:15.955
any experience with Remix, or have very
little, or even I suppose if you have

5
00:00:15.955 --> 00:00:20.116
some, because I've had some people who are
actually working on deploying Remix apps

6
00:00:20.116 --> 00:00:23.740
right now who said that they learned
stuff in the fundamentals workshop.

7
00:00:23.740 --> 00:00:25.994
So, if you haven't already
been through that one,

8
00:00:25.994 --> 00:00:28.690
I suggest that you take the time
to go through that one.

9
00:00:28.690 --> 00:00:31.570
Today, we're gonna be talking
about more advanced topics.

10
00:00:31.570 --> 00:00:36.284
And so, you want to have at least
some good understanding of Remix

11
00:00:36.284 --> 00:00:40.200
before going through today's workshop.

12
00:00:40.200 --> 00:00:42.111
For those of you who are new here,

13
00:00:42.111 --> 00:00:46.754
Remix is a web framework that enables you
to build excellent user experiences and

14
00:00:46.754 --> 00:00:50.230
not feel ashamed of the code
that you wrote to do that.

15
00:00:50.230 --> 00:00:55.004
And was the experience for me when I
rewrote my personal website, in Remix,

16
00:00:55.004 --> 00:00:59.555
was I realized how awesome the user
experience was that I could create and

17
00:00:59.555 --> 00:01:02.762
what an enormous scope of
application I can make and

18
00:01:02.762 --> 00:01:05.992
still feel really good about
the code that I wrote.

19
00:01:05.992 --> 00:01:11.194
And just to be clear that the scope
of this web application is not

20
00:01:11.194 --> 00:01:16.750
like your typical developer
portfolio blog sort of thing.

21
00:01:16.750 --> 00:01:19.367
Lots of really cool things in here,

22
00:01:19.367 --> 00:01:24.169
probably the the most impressive
I think is the Call Cat Podcast,

23
00:01:24.169 --> 00:01:29.495
where you can literally record a question
that you wanna ask me in here and

24
00:01:29.495 --> 00:01:33.424
you submit this recording and
I record my response and

25
00:01:33.424 --> 00:01:38.090
then our conversation gets
turned into a podcast episode.

26
00:01:38.090 --> 00:01:40.210
And I do that every day,
and it's pretty cool.

27
00:01:40.210 --> 00:01:44.340
And this whole thing,
whole experience, is built with Remix.

28
00:01:44.340 --> 00:01:48.225
And so, today I hope to be able to show
you a couple of the things that I use on

29
00:01:48.225 --> 00:01:52.431
my website in addition to some things
that I actually haven't implemented on my

30
00:01:52.431 --> 00:01:53.500
website yet.

31
00:01:53.500 --> 00:01:57.948
In fact, one of the topics that we're
going to be talking about today is

32
00:01:57.948 --> 00:02:03.600
currently unreleased, we'll be using
an experimental version of Remix for that.

33
00:02:03.600 --> 00:02:06.749
By the time this is a course it
probably will be released and

34
00:02:06.749 --> 00:02:09.340
we're pretty solid on the API as well.

35
00:02:09.340 --> 00:02:12.940
So, lots of really cool
things to look forward to.

36
00:02:12.940 --> 00:02:17.787
Before I talk too much about the logistics
and everything else, I think it's good for

37
00:02:17.787 --> 00:02:19.790
us to get the workshop set up.

38
00:02:19.790 --> 00:02:23.202
So, you'll go to
the Front End Masters GitHub and

39
00:02:23.202 --> 00:02:26.840
there is an advanced
Remix repository in here.

40
00:02:26.840 --> 00:02:28.725
And you'll just come down to,

41
00:02:28.725 --> 00:02:33.581
make sure that you have the proper system
requirements before you run this, but

42
00:02:33.581 --> 00:02:38.700
you'll come down to the Setup section,
and I just stick this on my desktop.

43
00:02:38.700 --> 00:02:39.860
Okay, here we go.

44
00:02:40.880 --> 00:02:43.865
So, that should get
everything set up locally.

45
00:02:43.865 --> 00:02:46.899
And while that's happening
in the background,

46
00:02:46.899 --> 00:02:49.639
we're gonna talk a little bit about Remix.

47
00:02:49.639 --> 00:02:55.467
So, in the Remix Fundamentals workshop,
we gave you an idea of the Route Module,

48
00:02:55.467 --> 00:02:58.935
some of the things that
you could export on that.

49
00:02:58.935 --> 00:03:02.925
We talked a little bit about nested
routing and that sort of thing,

50
00:03:02.925 --> 00:03:07.772
we talked a lot about the things that you
can do before JavaScript is even included

51
00:03:07.772 --> 00:03:08.572
on the page.

52
00:03:08.572 --> 00:03:12.250
We did get into progressive enhancement
and adding some pending UI and stuff.

53
00:03:12.250 --> 00:03:16.353
Today's workshop is what what
can you do now that we do have

54
00:03:16.353 --> 00:03:18.126
JavaScript on the page?

55
00:03:18.126 --> 00:03:22.939
All of the really cool things that you can
get, the better user experience that you

56
00:03:22.939 --> 00:03:25.825
can offer than just
the browser can do by itself.

57
00:03:25.825 --> 00:03:30.478
So, some of the exercises that we have
are doing mutations that don't involve

58
00:03:30.478 --> 00:03:31.390
navigation.

59
00:03:31.390 --> 00:03:35.342
So, in the Fundamentals Workshop, when you
created a blog post, you're gonna navigate

60
00:03:35.342 --> 00:03:38.680
somewhere else, when that is finished,
you're gonna go somewhere else.

61
00:03:39.770 --> 00:03:44.496
If you had to go somewhere else, for
every time you favorited a tweet,

62
00:03:44.496 --> 00:03:46.670
that wouldn't make any sense.

63
00:03:46.670 --> 00:03:48.613
So, there are a lot of use cases for

64
00:03:48.613 --> 00:03:52.772
just doing a fetch request that
doesn't actually trigger a navigation.

65
00:03:52.772 --> 00:03:57.617
And we're gonna talk about optimistic UI,
so making your application feel like

66
00:03:57.617 --> 00:04:01.835
it's instant even though there is
actually network latency at play.

67
00:04:01.835 --> 00:04:05.469
No matter how fast you make your app,
there will always be an element that

68
00:04:05.469 --> 00:04:10.490
you don't control in your app, and that's
the network, the user's device connection.

69
00:04:10.490 --> 00:04:15.180
And that is just one of the things
that makes web development so fun.

70
00:04:15.180 --> 00:04:20.229
And so we have to deal with that but
we can make it feel like the experience

71
00:04:20.229 --> 00:04:24.703
is really fast even before we go
into full on PWA offline stuff.

72
00:04:24.703 --> 00:04:27.060
So, we're not gonna get into any of that,

73
00:04:27.060 --> 00:04:30.880
we'll just get to the edge of
that with the Optimistic UI.

74
00:04:30.880 --> 00:04:34.289
We're going to be talking
about focus management,

75
00:04:34.289 --> 00:04:38.080
the true reason that we have
to use effect in React.

76
00:04:38.080 --> 00:04:42.451
And so, helping us manage focus as the
user submits a form and they have errors,

77
00:04:42.451 --> 00:04:45.861
we want auto focus to the field
that has the error for example.

78
00:04:45.861 --> 00:04:47.631
Revalidation optimization, so

79
00:04:47.631 --> 00:04:52.181
as we learned in the Remix fundamentals
workshop, Remix automatically revalidates

80
00:04:52.181 --> 00:04:56.286
all of your data when you make a mutation
because all bets are off on this data,

81
00:04:56.286 --> 00:05:00.320
you just change something,
I don't know if this data is up to date.

82
00:05:00.320 --> 00:05:02.620
That is the correct default.

83
00:05:02.620 --> 00:05:07.165
But sometimes that may not be what
the desired outcome there, maybe that's

84
00:05:07.165 --> 00:05:11.284
just a ton of data you want to manage
that state yourself a little bit or

85
00:05:11.284 --> 00:05:15.630
you just wanna optimize when
that's revalidation takes place.

86
00:05:15.630 --> 00:05:21.720
So, we're gonna use what is currently
an unstable API for revalidation.

87
00:05:21.720 --> 00:05:24.709
We're going to also do non naff fetching,
so

88
00:05:24.709 --> 00:05:29.993
this is similar to our non naff mutations
but this is for making a Fetch Request.

89
00:05:29.993 --> 00:05:33.844
This one could also be titled
Back End Connected UI Components,

90
00:05:33.844 --> 00:05:38.048
where you have a UI component that,
well, let's take it a step back,

91
00:05:38.048 --> 00:05:43.110
when React came out and they're like, look
at this thing, you've got your HTML and

92
00:05:43.110 --> 00:05:47.140
your JavaScript, and everybody's like,
what garbage is this?

93
00:05:47.140 --> 00:05:49.720
And now we're all doing
it because it's amazing.

94
00:05:49.720 --> 00:05:52.628
And then CSS and JS comes around,
and it's like, look,

95
00:05:52.628 --> 00:05:55.310
you've got CSS in you are JavaScripting.

96
00:05:55.310 --> 00:06:00.415
That was arguably, maybe not the best
idea, but it kind of inspired a lot of

97
00:06:00.415 --> 00:06:05.370
things as well in the view ecosystem,
you have single file components.

98
00:06:05.370 --> 00:06:10.272
So, that idea of like let's bring
as much into this single file as we

99
00:06:10.272 --> 00:06:12.430
can is really powerful.

100
00:06:12.430 --> 00:06:16.031
A component is when we're talking
about separation of concerns,

101
00:06:16.031 --> 00:06:20.339
a lot of times people would say well,
you gotta have JavaScript, HTML and CSS,

102
00:06:20.339 --> 00:06:23.300
they gotta be separated,
separation concerns.

103
00:06:23.300 --> 00:06:26.390
That is totally wrong because
the concern is the component and

104
00:06:26.390 --> 00:06:29.930
the component is incomplete
without all three of those things.

105
00:06:29.930 --> 00:06:33.749
Well it turns out that your component
is actually still incomplete without

106
00:06:33.749 --> 00:06:36.990
the back end, as well, for
a lot of types of components.

107
00:06:36.990 --> 00:06:40.927
And so, in this one we're going to
be adding that back end element,

108
00:06:40.927 --> 00:06:42.910
should be really cool.

109
00:06:42.910 --> 00:06:46.870
We are not using CSS and JS,
we're using Tailwind because it's amazing.

110
00:06:48.260 --> 00:06:51.410
But it sort of is, CSS and
JS, if you squint.

111
00:06:51.410 --> 00:06:55.056
So, anyway,
that one's gonna be really cool.

112
00:06:55.056 --> 00:06:58.250
We're also doing imperative mutations, so

113
00:06:58.250 --> 00:07:03.047
we need to have something happen
without the user doing any action.

114
00:07:03.047 --> 00:07:06.615
There are plenty of examples of that and
we'll talk about when you want something

115
00:07:06.615 --> 00:07:09.200
like that to happen and
how to make that happen with Remix.

116
00:07:09.200 --> 00:07:12.290
It's a very app-like sort of thing.

117
00:07:12.290 --> 00:07:17.776
And then pending UI, the last three are
actually all talking about what happens or

118
00:07:17.776 --> 00:07:22.960
how do you improve the user's experience
when they have a slow network?

119
00:07:22.960 --> 00:07:26.601
And then actually the last one is how do
you improve the user's experience when you

120
00:07:26.601 --> 00:07:29.590
have a slow back end that
you can't do anything about.

121
00:07:29.590 --> 00:07:33.588
Hey, cuz I mean, raise your hand
if you have ever experienced that.

122
00:07:33.588 --> 00:07:37.160
Now you don't have to, but yes,
I have [LAUGH], and it is frustrating.

123
00:07:37.160 --> 00:07:40.301
But if you can't do anything
about your slow back end,

124
00:07:40.301 --> 00:07:43.102
then there's a really cool
API that Remix has for

125
00:07:43.102 --> 00:07:46.600
you to make that experience as
good as possible for the user.

