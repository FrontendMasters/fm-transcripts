WEBVTT

1
00:00:00.000 --> 00:00:03.627
We're being optimistic
today with optimistic UI.

2
00:00:03.627 --> 00:00:09.309
And the UI we want to be optimistic
about is this piece, the deposits.

3
00:00:09.309 --> 00:00:11.865
So even if the user is on a slow network,

4
00:00:11.865 --> 00:00:16.366
I want to be able to submit this
deposit and have it appear instantly.

5
00:00:16.366 --> 00:00:19.064
We also actually will clear the form and

6
00:00:19.064 --> 00:00:22.512
we'll improve that in
the next exercise as well.

7
00:00:22.512 --> 00:00:27.186
But we're gonna just add query in
the form when the request is ultimately

8
00:00:27.186 --> 00:00:28.575
successful as well.

9
00:00:28.575 --> 00:00:33.963
So we're in the invoice ID route and
there's the deposit form right

10
00:00:33.963 --> 00:00:39.633
around here, and this deposit form,
when the user submits this form,

11
00:00:39.633 --> 00:00:44.192
this fetcher is going to have
that submission data on it.

12
00:00:44.192 --> 00:00:47.466
So we actually know everything
we need to display that

13
00:00:47.466 --> 00:00:49.950
information that the user is gonna get.

14
00:00:49.950 --> 00:00:54.832
Sometimes you can't really do this because
sometimes what the user is creating and

15
00:00:54.832 --> 00:00:59.101
there's gonna be some sort of calculation
that happens on the back end.

16
00:00:59.101 --> 00:01:01.718
And like, for example,
the Consent Podcast,

17
00:01:01.718 --> 00:01:06.430
I can't optimistically display the final
episode because they're on the back end,

18
00:01:06.430 --> 00:01:11.222
we're actually stitching together the two
pieces, so I can't do that in the client.

19
00:01:11.222 --> 00:01:13.691
So sometimes you cannot do optimistic UI.

20
00:01:13.691 --> 00:01:18.276
But in this case, we have everything
we need to display the optimistic UI.

21
00:01:18.276 --> 00:01:21.497
And in those cases where it
doesn't feel like you can,

22
00:01:21.497 --> 00:01:26.118
you might be able to still because you can
show just like a little skeleton UI for

23
00:01:26.118 --> 00:01:28.657
the piece of data that you don't have yet.

24
00:01:28.657 --> 00:01:31.054
We'll actually look at
skeleton UIs later today.

25
00:01:31.054 --> 00:01:37.426
So for this, we just need to find out
what was it that the user submitted,

26
00:01:37.426 --> 00:01:42.345
and then add it into the list
of deposits that we render.

27
00:01:42.345 --> 00:01:44.881
So that is what we're
going to be doing here.

28
00:01:44.881 --> 00:01:49.797
Instead of using data dot deposits,
I'm actually going to

29
00:01:49.797 --> 00:01:54.417
create a new deposits variable,
data dot deposits, so

30
00:01:54.417 --> 00:01:59.951
now we can just swap this in both
of these places for just deposits.

31
00:01:59.951 --> 00:02:03.215
As a straight up refactor,
nothing useful going on there

32
00:02:03.215 --> 00:02:07.375
until I make a copy of this,
because I'm actually going to mutate this.

33
00:02:07.375 --> 00:02:10.828
I don't want to mutate something that's
coming from I use loader data or

34
00:02:10.828 --> 00:02:13.728
use date or any of that stuff,
we're not gonna mutate that.

35
00:02:13.728 --> 00:02:17.178
But variables that I create,
sure I'll mutate that all day long, and

36
00:02:17.178 --> 00:02:21.157
so that's what we're gonna do is we're
going to say, hey new deposit fetcher,

37
00:02:21.157 --> 00:02:23.439
do you have a submission
with a valid deposit,

38
00:02:23.439 --> 00:02:26.746
let's just add one of those to
the deposits that we're entering.

39
00:02:26.746 --> 00:02:28.094
Now that works out nicely.

40
00:02:28.094 --> 00:02:32.288
You wouldn't have to do it this way, you
could actually leave it the way it was,

41
00:02:32.288 --> 00:02:35.042
and then just go down to
the bottom of the deposits and

42
00:02:35.042 --> 00:02:37.315
add another one like
that if you wanted to.

43
00:02:37.315 --> 00:02:39.534
I just find this to be a lot easier.

44
00:02:39.534 --> 00:02:44.431
So what we need to do is find out
whether there is a submission going

45
00:02:44.431 --> 00:02:47.917
on that has the data that we need for
a deposit.

46
00:02:47.917 --> 00:02:52.633
So I'm gonna say if new deposit
fetcher dot submission,

47
00:02:52.633 --> 00:02:57.852
if it's been submitted then,
yeah sort of, thanks copilot.

48
00:02:57.852 --> 00:03:00.859
Not quite though, so
we are going to push and

49
00:03:00.859 --> 00:03:03.551
we need to have a couple things on here.

50
00:03:03.551 --> 00:03:04.498
We're gonna have an ID.

51
00:03:04.498 --> 00:03:07.965
The problem with the ID is that
that is generated by the back end.

52
00:03:07.965 --> 00:03:09.543
So the user didn't give that to us.

53
00:03:09.543 --> 00:03:12.572
The nice thing is, we actually don't care.

54
00:03:12.572 --> 00:03:14.669
We don't display the ID or
anything like that.

55
00:03:14.669 --> 00:03:16.578
We actually do use it in the link, and

56
00:03:16.578 --> 00:03:19.173
there are a couple of ideas
you could do with that.

57
00:03:19.173 --> 00:03:22.401
You could just have it link to nowhere or
whatever.

58
00:03:22.401 --> 00:03:27.396
Hopefully the idea is that we're just
trying to be a little extra helpful to

59
00:03:27.396 --> 00:03:31.915
the user and this is a situation that
is hopefully sort of unusual for

60
00:03:31.915 --> 00:03:35.110
the user to look at this for
too long of a period.

61
00:03:35.110 --> 00:03:37.652
But you could have it
linked to a page that says,

62
00:03:37.652 --> 00:03:40.909
wow you're really fast,
congratulations, or whatever.

63
00:03:40.909 --> 00:03:45.175
But what I'm going to do
is just set this to new.

64
00:03:45.175 --> 00:03:48.408
And the only situation where
this would actually be

65
00:03:48.408 --> 00:03:52.392
a problem aside from linking to
deposit that doesn't exist yet

66
00:03:52.392 --> 00:03:56.994
is if the user submits a bunch of these,
we actually use the ID as the key.

67
00:03:56.994 --> 00:04:01.311
And so React is gonna be like I
don't know what to do about this,

68
00:04:01.311 --> 00:04:04.244
probably would actually be okay but yeah,

69
00:04:04.244 --> 00:04:09.796
you may wanna generate this if you want it
to really be resilient to issues there.

70
00:04:09.796 --> 00:04:14.241
So we need to set the ID,
we also need to set the amount and

71
00:04:14.241 --> 00:04:20.596
that is going to be new deposit fetcher
dot submission dot form data get amount.

72
00:04:20.596 --> 00:04:25.157
So the amount that the user submitted,
we know that that is how we

73
00:04:25.157 --> 00:04:29.633
get that out of the submission
because if we go down to our form,

74
00:04:29.633 --> 00:04:33.695
we have the input that the user
is using has a name amount.

75
00:04:33.695 --> 00:04:37.622
So that's how we know, that's what we're
gonna pull out of the form submission

76
00:04:37.622 --> 00:04:39.309
because that is what it is called.

77
00:04:39.309 --> 00:04:43.414
So we get the amount and then we also
have the deposit date formatted.

78
00:04:43.414 --> 00:04:49.133
So this is actually what our loader will
send back for each one of these deposits.

79
00:04:49.133 --> 00:04:54.616
So what we're actually
submitting is the deposit date

80
00:04:54.616 --> 00:05:02.852
which is going to actually be stringified
to I think it's Y, Y, Y, M, M, D, D.

81
00:05:02.852 --> 00:05:04.321
So year, month, day,

82
00:05:04.321 --> 00:05:09.247
that's how it's serialized with the way
the browser submits and everything.

83
00:05:09.247 --> 00:05:14.913
So we actually need to parse that and
format it in the way that we display it.

84
00:05:14.913 --> 00:05:18.248
So that's what we're going to do, but
it's gonna be called the deposit date.

85
00:05:18.248 --> 00:05:22.904
And I mentioned also that when
we send back in our loader,

86
00:05:22.904 --> 00:05:26.299
we send back the deposit date formatted.

87
00:05:26.299 --> 00:05:28.698
We're just using to local date string.

88
00:05:28.698 --> 00:05:30.272
In any legitimate application,

89
00:05:30.272 --> 00:05:34.274
you're probably going to want to have a
date formatting library in everything too.

90
00:05:34.274 --> 00:05:39.349
So that is deposit date formatted,
so we're going to get

91
00:05:39.349 --> 00:05:45.073
the date out of new deposit,
yeah, thank you for that Copilot.

92
00:05:45.073 --> 00:05:49.508
So we're gonna get it out of the form
data, but again we need to format this and

93
00:05:49.508 --> 00:05:53.346
we have a handy parse date and
then we can use to locale date string.

94
00:05:53.346 --> 00:05:58.623
So when you take converted to
a dot date object via parse

95
00:05:58.623 --> 00:06:04.372
date which is a utility that we
have that we can just import.

96
00:06:04.372 --> 00:06:08.740
Pass that along and
then call to locale date string.

97
00:06:08.740 --> 00:06:13.626
This actually, it may work differently
on your machine because your to locale

98
00:06:13.626 --> 00:06:16.968
date string could be different
based on your locale.

99
00:06:16.968 --> 00:06:21.220
And so that's why you probably
wanna have a date formatting

100
00:06:21.220 --> 00:06:23.949
library as part of your application.

101
00:06:23.949 --> 00:06:28.225
So in any case, we're getting some errors
here because TypeScript isn't super jazzed

102
00:06:28.225 --> 00:06:31.399
about the fact that this can be
a form data entry value or null, and

103
00:06:31.399 --> 00:06:33.155
we're passing that to parse date.

104
00:06:33.155 --> 00:06:36.646
And yeah, the same thing for
the amount, actually, but

105
00:06:36.646 --> 00:06:38.696
I'm gonna leave that for later.

106
00:06:38.696 --> 00:06:40.183
We just wanna make sure
that this thing works.

107
00:06:40.183 --> 00:06:42.512
This will probably work as expected, but

108
00:06:42.512 --> 00:06:47.314
TypeScript is just helping us think about
those cases that could absolutely happen.

109
00:06:47.314 --> 00:06:51.859
I tweeted a while ago that TypeScript
isn't making your life miserable,

110
00:06:51.859 --> 00:06:55.609
it's just showing you how
miserable your life actually is.

111
00:06:55.609 --> 00:06:57.910
So that is what TypeScript is doing for
us.

112
00:06:57.910 --> 00:06:59.428
We'll take care of this here in a second.

113
00:06:59.428 --> 00:07:03.437
What I want to do is just make sure
that this optimistic UI piece is

114
00:07:03.437 --> 00:07:07.171
actually working, so
that we can deal with it if it's not.

115
00:07:07.171 --> 00:07:13.310
Okay, so we'll go slow 3G I give
it an amount of 25 bucks and

116
00:07:13.310 --> 00:07:17.100
that was today and here's your 25.

117
00:07:17.100 --> 00:07:21.523
I hit Create, we're on a slow 3G network
so this should show up instantly which

118
00:07:21.523 --> 00:07:24.703
it does, that works great,
and so we're in a good spot.

119
00:07:24.703 --> 00:07:28.668
And when revalidation happens,
all of that optimistic UI or

120
00:07:28.668 --> 00:07:32.012
the optimistic data deposit
that we just created,

121
00:07:32.012 --> 00:07:36.461
that actually is gone now because
the submission no longer exists.

122
00:07:36.461 --> 00:07:40.562
And so this if statement will not happen
because there's no longer a submission.

123
00:07:40.562 --> 00:07:44.612
And now data deposits actually
includes the real deposit,

124
00:07:44.612 --> 00:07:49.238
and if I hover over this you can see
the link to the specific deposit.

125
00:07:49.238 --> 00:07:53.361
If I submit this again and then I hover
over quickly, you'll see it actually links

126
00:07:53.361 --> 00:07:56.484
to slash new, which is the problem
that I described earlier.

127
00:07:56.484 --> 00:08:01.241
But when revalidation happens,
then it gets updated to the correct URL.

128
00:08:01.241 --> 00:08:05.658
Okay, so next we're gonna do a little bit
of work to make TypeScript happier about

129
00:08:05.658 --> 00:08:08.922
this and just kind of talk about
how to deal with some of that,

130
00:08:08.922 --> 00:08:11.501
as well as actually do
a little validation too.

131
00:08:11.501 --> 00:08:15.402
&gt;&gt; If the client ID matches one
that's already in the deposits array,

132
00:08:15.402 --> 00:08:20.262
could we avoid submitting another deposit
to prevent accidental double deposit for

133
00:08:20.262 --> 00:08:20.956
instance?

134
00:08:20.956 --> 00:08:27.094
&gt;&gt; Yeah, so I don't know how
you could possibly set this ID,

135
00:08:27.094 --> 00:08:35.386
that optimistic ID, to something that
already exists in the deposits array.

136
00:08:35.386 --> 00:08:41.924
That would be like these IDs are nuts, so
I'm not sure that is a practical problem.

137
00:08:41.924 --> 00:08:45.039
I might be misunderstanding
the question though.

138
00:08:45.039 --> 00:08:46.021
In general,

139
00:08:46.021 --> 00:08:51.572
I don't think that this is going to
surface as an actual issue for people.

140
00:08:51.572 --> 00:08:53.882
And we'll just focus on this last bit,

141
00:08:53.882 --> 00:08:57.526
which is resetting the form when
the submission is finished.

142
00:08:57.526 --> 00:09:02.952
So we're going to use
a use effect from React.

143
00:09:02.952 --> 00:09:05.442
We're not going to use the plus symbol.

144
00:09:05.442 --> 00:09:06.673
We're gonna type correctly.

145
00:09:06.673 --> 00:09:09.447
We're gonna add our dependency array.

146
00:09:09.447 --> 00:09:14.751
And now what I need to do is nope,
nope, you know what, I'm gonna disable

147
00:09:14.751 --> 00:09:19.478
Copilot because as awesome as it
is sometimes it's not awesome.

148
00:09:19.478 --> 00:09:24.527
So what I need to do is first I
need to add a ref to the form so

149
00:09:24.527 --> 00:09:26.469
I can reset the form.

150
00:09:26.469 --> 00:09:33.936
So let's do that first here
got my deposit form ref.

151
00:09:33.936 --> 00:09:38.031
We'll just call it the form ref wherein
the deposits components is gonna be,

152
00:09:38.031 --> 00:09:39.550
our deposit form of course.

153
00:09:39.550 --> 00:09:45.455
Use ref, that is used reducer, not what
I wanted to type, use ref, there we go.

154
00:09:45.455 --> 00:09:52.968
And set that to know initially, we're
gonna make this an HTML form element.

155
00:09:52.968 --> 00:09:58.964
And then down here on my HTML form
element I'll say ref equals my form ref,

156
00:09:58.964 --> 00:10:05.654
and then I'll first just do a little thing
that I often do in these types of things.

157
00:10:05.654 --> 00:10:08.819
If there's not a form ref dot current,
then I'm gonna return.

158
00:10:08.819 --> 00:10:12.053
So what that does for me is now form
ref dot current totally exists and

159
00:10:12.053 --> 00:10:15.599
I don't have to do any more null
checking and whatever, so that's nice.

160
00:10:15.599 --> 00:10:20.190
The next thing that I wanna do is,
ultimately what I'm trying to

161
00:10:20.190 --> 00:10:24.282
accomplish here is form ref
dot reset current dot reset.

162
00:10:24.282 --> 00:10:28.443
And that will reset the form to its
original state to all of its default

163
00:10:28.443 --> 00:10:29.678
values and things.

164
00:10:29.678 --> 00:10:34.808
But I only want to do that when
the new deposit fetcher state is idle,

165
00:10:34.808 --> 00:10:39.676
so when the submission is finished
then we wanna reset the form.

166
00:10:39.676 --> 00:10:42.854
We don't wanna do that in any other
rerender like as users typing or

167
00:10:42.854 --> 00:10:44.855
anything else, we don't wanna do that.

168
00:10:44.855 --> 00:10:48.050
So we'll say if it's not idle,
then we'll return,

169
00:10:48.050 --> 00:10:50.467
you can write that however you'd like.

170
00:10:50.467 --> 00:10:52.973
And then I'll let Dan Abramoff
fill that in for me.

171
00:10:52.973 --> 00:10:55.841
Thank you, Dan.

172
00:10:55.841 --> 00:11:00.680
Cool, so now if I come back over here and
we wait for

173
00:11:00.680 --> 00:11:06.559
this slow three gen network to
load the app, and we say 45,

174
00:11:06.559 --> 00:11:11.886
45, and we get the automatic or
that optimistic UI.

175
00:11:11.886 --> 00:11:16.555
And when revalidation is all finished,
then that gets reset for us.

176
00:11:16.555 --> 00:11:21.027
Next exercise we'll talk about
focusing back on the right field and

177
00:11:21.027 --> 00:11:22.212
stuff like that.

178
00:11:22.212 --> 00:11:24.134
Okay, great.

179
00:11:24.134 --> 00:11:28.310
So now the last thing is just
to make TypeScript happy, and

180
00:11:28.310 --> 00:11:32.844
actually we're gonna do some
handy dandy validation as well.

181
00:11:32.844 --> 00:11:39.386
Before we do that, I'm gonna say what
if I set this is missing an amount.

182
00:11:39.386 --> 00:11:44.014
So we're gonna skip the amount and
hit Create.

183
00:11:44.014 --> 00:11:47.850
Well thank you browser for that.

184
00:11:47.850 --> 00:11:52.251
What if I change that to say no validate?

185
00:11:52.251 --> 00:11:53.586
What do you think about that browser?

186
00:11:53.586 --> 00:11:57.229
Boom, okay, so
we're gonna get zero over there.

187
00:11:57.229 --> 00:12:01.891
And that will roll back actually
because that is an error.

188
00:12:01.891 --> 00:12:06.783
And if we go to our network and look at
that post request, we are going to get in

189
00:12:06.783 --> 00:12:11.156
our response this error,
it says amount must be greater than zero.

190
00:12:11.156 --> 00:12:15.300
And the deposit date didn't have an error,
so we're fine there.

191
00:12:15.300 --> 00:12:19.847
So in that case, we can actually get
that error out of the submission or

192
00:12:19.847 --> 00:12:24.394
the fetcher dot data that will have
it there and we could display that,

193
00:12:24.394 --> 00:12:26.728
we're not gonna do that right now.

194
00:12:26.728 --> 00:12:31.807
But what I want to note is the fact
that it rolled back for us.

195
00:12:31.807 --> 00:12:37.182
So user submitted something, our optimism
was misplaced, that optimistic UI is gone,

196
00:12:37.182 --> 00:12:41.495
and we didn't code anything that
thought about that even a little bit.

197
00:12:41.495 --> 00:12:43.017
So that's neat.

198
00:12:43.017 --> 00:12:47.817
That bug is is not a problem for
us, which I think is cool.

199
00:12:47.817 --> 00:12:52.717
We can hit Create and right because
they're all new, so if I generated the ID

200
00:12:52.717 --> 00:12:57.629
you could actually hit Create a bunch of
times and the right thing will happen.

201
00:12:57.629 --> 00:13:01.666
It will say all of these optimistic
UI things should go away and

202
00:13:01.666 --> 00:13:03.984
they will not ultimately be created.

203
00:13:03.984 --> 00:13:05.365
So that's cool.

204
00:13:05.365 --> 00:13:08.377
So let's just make TypeScript happy here,
and

205
00:13:08.377 --> 00:13:10.949
then we can move on to the next exercise.

206
00:13:10.949 --> 00:13:15.640
So for our amount, TypeScript is
angry about this because this returns

207
00:13:15.640 --> 00:13:17.761
a form data entry value or null.

208
00:13:17.761 --> 00:13:23.854
So what I'm gonna do here
is we'll say form amount,

209
00:13:23.854 --> 00:13:28.976
and now I'll just say
if the type form amount

210
00:13:28.976 --> 00:13:34.099
is equal to a number and
then we'll do this,

211
00:13:34.099 --> 00:13:38.963
and now Typescript's happy about that.

212
00:13:38.963 --> 00:13:43.684
For this piece, we'll

213
00:13:43.684 --> 00:13:48.641
say this is our deposit or

214
00:13:48.641 --> 00:13:52.661
form deposit date.

215
00:13:52.661 --> 00:13:57.307
And we can say,
let's actually put that up here and

216
00:13:57.307 --> 00:14:00.667
the type of this is equal to a string.

217
00:14:00.667 --> 00:14:04.099
And actually you know what, it just occurs
to me, this will never be a number,

218
00:14:04.099 --> 00:14:06.244
it's either a form data entry value or
a string.

219
00:14:06.244 --> 00:14:08.744
So this is going to be a string.

220
00:14:08.744 --> 00:14:13.377
I'm going to say we'll numberfy

221
00:14:13.377 --> 00:14:17.683
this thing, number, there.

222
00:14:17.683 --> 00:14:22.017
So now this is going to be of type number.

223
00:14:22.017 --> 00:14:26.816
It could be num potentially, so like you
could add a bunch of extra checks here,

224
00:14:26.816 --> 00:14:28.549
but I think you get the idea.

225
00:14:28.549 --> 00:14:32.323
You're just doing a little bit of
validation before you do optimistic UI.

226
00:14:32.323 --> 00:14:35.469
Same thing for our form deposit date,
we're just gonna check that it's a string.

227
00:14:35.469 --> 00:14:39.611
You could also make sure that parse date
results in an actual validate and all

228
00:14:39.611 --> 00:14:44.204
of that, but hopefully you get the idea,
you can do all sorts of validation before,

229
00:14:44.204 --> 00:14:48.500
that's all client side validation before
actually doing the optimistic UI.

230
00:14:48.500 --> 00:14:53.625
Because it's doesn't make any sense
to actually send the request and show

231
00:14:53.625 --> 00:14:59.006
the optimistic UI if you know for certain
that this is not going to work anyway.

232
00:14:59.006 --> 00:15:03.996
Additionally, what's really neat about
this is you can actually use the same

233
00:15:03.996 --> 00:15:07.256
validation logic that
we're using in our action.

234
00:15:07.256 --> 00:15:10.454
So you could literally just say,
hey, validate my amount and

235
00:15:10.454 --> 00:15:13.605
don't show optimistic UI if
this validation is gonna fail.

236
00:15:13.605 --> 00:15:17.321
Because I know it's going to fail,
why show that optimism?

237
00:15:17.321 --> 00:15:21.222
Same thing for our deposit date,
and so we could do all that,

238
00:15:21.222 --> 00:15:24.369
I think you get the idea so
I'm not gonna bother.

239
00:15:24.369 --> 00:15:29.255
It would all just go as part of the if
statements that we have before we

240
00:15:29.255 --> 00:15:32.019
actually add an item to the deposits.

