WEBVTT

1
00:00:00.309 --> 00:00:04.481
The differ await suspense
up produces an error and

2
00:00:04.481 --> 00:00:09.644
the council were on page load
where it says uncaught error this

3
00:00:09.644 --> 00:00:15.520
suspense boundary received an update
before it finished hydrating.

4
00:00:15.520 --> 00:00:18.343
This caused a boundary just
switch to client rendering.

5
00:00:18.343 --> 00:00:22.037
Is that something we should worry about?

6
00:00:22.037 --> 00:00:27.299
&gt;&gt; Well, I do not see that myself.

7
00:00:27.299 --> 00:00:29.280
So here I'm not deferring.

8
00:00:29.280 --> 00:00:31.804
Let me just give you this.

9
00:00:36.570 --> 00:00:40.836
Okay, yes, I am seeing that myself.

10
00:00:40.836 --> 00:00:45.267
I'm not sure about that,
I haven't seen this before so

11
00:00:45.267 --> 00:00:48.675
what we actually just gonna test this out.

12
00:00:48.675 --> 00:00:53.675
We actually recently realized
that one problem with hydrating

13
00:00:53.675 --> 00:00:56.880
is that it can cause
a stutter on scroll so

14
00:00:56.880 --> 00:01:01.030
if the app loads with HTML and
you start scrolling and

15
00:01:01.030 --> 00:01:06.147
then hydration happens,
it will stop the scroll temporarily.

16
00:01:06.147 --> 00:01:07.447
It's super annoying.

17
00:01:07.447 --> 00:01:11.914
And you can actually solve that
really easily with built in React

18
00:01:11.914 --> 00:01:14.320
features with startTransition.

19
00:01:14.320 --> 00:01:18.985
So if we have startTransition from React,

20
00:01:18.985 --> 00:01:26.111
we put that inside of here,
that is going to make this possible for

21
00:01:26.111 --> 00:01:30.405
React to use its concurrent features.

22
00:01:30.405 --> 00:01:33.472
So that it will be able to
pause as the user's scrolling.

23
00:01:33.472 --> 00:01:37.283
So if the user is scrolling and it's
hydrating, it will be able to do work in

24
00:01:37.283 --> 00:01:40.922
little chunks, so it doesn't cause
stutter, actually pretty cool.

25
00:01:40.922 --> 00:01:45.474
So I wonder if that fixes it,
it doesn't look like it does, so

26
00:01:45.474 --> 00:01:49.151
I'm not sure what this is and,
yeah, probably,

27
00:01:49.151 --> 00:01:53.356
I mean it doesn't cause an actual
problem in the app, but

28
00:01:53.356 --> 00:01:56.980
be something to look into in the future,
sorry.

