WEBVTT

1
00:00:00.460 --> 00:00:02.845
All right, we're back from exercise four,

2
00:00:02.845 --> 00:00:06.126
hopefully you had a good time
working with this unstable API.

3
00:00:06.126 --> 00:00:09.464
Like I said, this should
hopefully be stable pretty soon.

4
00:00:09.464 --> 00:00:14.081
But we're just working out what API
we really want to offer to you, and

5
00:00:14.081 --> 00:00:17.141
so it's very possible
that this will change.

6
00:00:17.141 --> 00:00:21.926
But I would say that it is totally
safe to use this API today,

7
00:00:21.926 --> 00:00:27.314
because whatever we end up switching
to will satisfy the use case.

8
00:00:27.314 --> 00:00:30.744
So it's not like we're gonna pull
the use case out from under you.

9
00:00:30.744 --> 00:00:35.491
If you do ever use unstable APIs in
any library, just make sure you're

10
00:00:35.491 --> 00:00:39.926
always checking every new version
bump before you just upgrade.

11
00:00:39.926 --> 00:00:44.407
Because, yeah, that is unsafe,
that's why it's prefixed with unstable.

12
00:00:44.407 --> 00:00:49.245
So with all of that said, our objective
in this exercise is to make it so

13
00:00:49.245 --> 00:00:52.279
that our user, which is loaded right here,

14
00:00:52.279 --> 00:00:58.990
is not reloaded as we're making changes
to something completely different, right?

15
00:00:58.990 --> 00:01:01.420
Because it wouldn't make any sense for

16
00:01:01.420 --> 00:01:05.551
the user data to be refetched just
because we submitted a deposit.

17
00:01:05.551 --> 00:01:07.160
It's not like I logged out or
anything, right?

18
00:01:07.160 --> 00:01:12.130
So we don't need to refetch
the user on every single request,

19
00:01:12.130 --> 00:01:15.199
or every single mutation of the data.

20
00:01:15.199 --> 00:01:19.275
In particular, for apps like this,
the user doesn't change, except for

21
00:01:19.275 --> 00:01:20.773
when they log in or log out.

22
00:01:20.773 --> 00:01:25.273
And for the bulk of the time,
the users in the application,

23
00:01:25.273 --> 00:01:29.774
they're not going to be changing
their user information.

24
00:01:29.774 --> 00:01:32.755
So if you've ever used the React.memo API,

25
00:01:32.755 --> 00:01:36.600
it actually has a second
argument called the comparator,

26
00:01:36.600 --> 00:01:41.002
which allows you to compare previous
props to the upcoming props.

27
00:01:41.002 --> 00:01:44.180
And you decide whether your
component needs to rerender.

28
00:01:44.180 --> 00:01:47.946
So this is an optimization that you
opt into, and when you do that,

29
00:01:47.946 --> 00:01:52.260
those comparator functions
are actually kinda difficult to write.

30
00:01:52.260 --> 00:01:58.076
And so I typically don't
recommend that you write those.

31
00:01:58.076 --> 00:02:01.621
And yeah, React.memo is
a completely different thing.

32
00:02:01.621 --> 00:02:06.721
But yeah, in the same way,
shouldReload will give you information

33
00:02:06.721 --> 00:02:11.193
about where you're at currently and
where you're going so

34
00:02:11.193 --> 00:02:16.560
that you can determine whether or
not you want to update or reload.

35
00:02:16.560 --> 00:02:18.496
And this shouldReload runs on the client,

36
00:02:18.496 --> 00:02:20.986
because that's the only
place where it's relevant.

37
00:02:20.986 --> 00:02:24.736
If we're doing a server render, then yeah,
of course, we're not reloading,

38
00:02:24.736 --> 00:02:26.940
we're loading all of the data.

39
00:02:26.940 --> 00:02:31.168
So it's just for client transitions
going from one route to another.

40
00:02:31.168 --> 00:02:34.278
Or when we've made some sort of mutation,
and

41
00:02:34.278 --> 00:02:39.900
we're deciding should we load this data,
or should we reload this data?

42
00:02:39.900 --> 00:02:44.218
Okay, so with that out of the way,
actually, let's just make

43
00:02:44.218 --> 00:02:49.610
sure we've got our test case here,
so we can compare before and after.

44
00:02:49.610 --> 00:02:56.340
So if I add an amount here, and I hit
Create, then you notice we have our POST.

45
00:02:56.340 --> 00:03:02.486
This is the POST to, yeah, there's our
method POST, to actually update this.

46
00:03:02.486 --> 00:03:05.996
And then when that POST is finished,
then we do some GETs for,

47
00:03:05.996 --> 00:03:07.288
this is the data root.

48
00:03:07.288 --> 00:03:10.160
That's kinda implementation detail stuff,
but

49
00:03:10.160 --> 00:03:14.952
you can see in the query string there,
we're revalidating the data for the route.

50
00:03:14.952 --> 00:03:20.121
This is for the sales route, and the
sales/invoices route, and the invoice ID.

51
00:03:20.121 --> 00:03:22.922
So you can see that the root
would be the whole app.

52
00:03:22.922 --> 00:03:30.050
The sales/invoices is right here,
as well as right here.

53
00:03:30.050 --> 00:03:33.030
And then our invoice ID is
this invoice right here.

54
00:03:33.030 --> 00:03:37.337
So each one of these routes is being
revalidated concurrently, and so

55
00:03:37.337 --> 00:03:38.725
it's nice and quick.

56
00:03:38.725 --> 00:03:44.416
But it is unnecessary to revalidate,
actually, most of these.

57
00:03:44.416 --> 00:03:46.926
We don't need to revalidate the root,

58
00:03:46.926 --> 00:03:50.664
we don't need to revalidate the sales,
or the invoices.

59
00:03:50.664 --> 00:03:55.977
However, I wouldn't bother
personally adding this

60
00:03:55.977 --> 00:04:01.417
optimization, really,
to any of these, honestly.

61
00:04:01.417 --> 00:04:06.030
I don't think that it's that big of
an issue to just revalidate this stuff.

62
00:04:06.030 --> 00:04:10.717
However, for the purposes of your
education, I think we'll at least

63
00:04:10.717 --> 00:04:15.096
make it so that the root is not
revalidated, so that's the goal.

64
00:04:15.096 --> 00:04:19.481
So we'll go into the root route,
and this is an export, so

65
00:04:19.481 --> 00:04:24.049
we're going to export const
unstable_shouldReload, and

66
00:04:24.049 --> 00:04:27.120
this is a shouldReload function.

67
00:04:27.120 --> 00:04:29.314
That's the type for this.

68
00:04:29.314 --> 00:04:31.154
It is a synchronous function,

69
00:04:31.154 --> 00:04:34.562
cuz we're not gonna wait to
find out if we should reload.

70
00:04:34.562 --> 00:04:36.950
We're going to synchronously
determine whether we should reload.

71
00:04:37.980 --> 00:04:41.350
And there are a couple of things
that you get as a part of this.

72
00:04:41.350 --> 00:04:46.125
You get the params, you get the previous
URL, where you're coming from, and the URL

73
00:04:46.125 --> 00:04:51.053
that you're going to, and the submission
that is triggering this revalidation here.

74
00:04:51.053 --> 00:04:53.827
And that's what we want to determine,
there are two cases.

75
00:04:53.827 --> 00:04:58.577
When you're using this API,
you're responsible for thinking, okay,

76
00:04:58.577 --> 00:05:02.190
so what are the cases where
my loader data could change?

77
00:05:02.190 --> 00:05:06.004
So you look up at your loader data,
and you say, okay, so

78
00:05:06.004 --> 00:05:08.130
my loader is getting the user.

79
00:05:08.130 --> 00:05:11.900
What are the situations where this
getUser could return something else,

80
00:05:11.900 --> 00:05:13.690
something different?

81
00:05:13.690 --> 00:05:18.449
And that's why the way this API works
is it's part of the route itself,

82
00:05:18.449 --> 00:05:24.003
rather than being part of some other route
that triggered the revalidation through

83
00:05:24.003 --> 00:05:29.082
mutation, is because the responsibility
for whether it should revalidate

84
00:05:29.082 --> 00:05:34.265
should belong to the thing that
determines what data it's getting, right?

85
00:05:34.265 --> 00:05:37.484
And so we're gonna keep these two
things in the same file to say, okay,

86
00:05:37.484 --> 00:05:41.005
now I'm looking at my loader,
I see all of the data that it's getting.

87
00:05:41.005 --> 00:05:43.945
What are the situations where
this data could change?

88
00:05:43.945 --> 00:05:48.410
That's the mental model that you
should be holding in your head.

89
00:05:48.410 --> 00:05:53.260
So for us, it is when there's
a submission to log in or log out.

90
00:05:53.260 --> 00:05:55.680
That's the only time that
the user will change.

91
00:05:55.680 --> 00:05:59.128
Sometimes this will be a fair bit
more complicated for you, but for us,

92
00:05:59.128 --> 00:06:01.270
this is actually pretty straightforward.

93
00:06:01.270 --> 00:06:05.810
So we've got our submission
that is being handled.

94
00:06:05.810 --> 00:06:11.675
So we can say,
if the submission.action is login,

95
00:06:11.675 --> 00:06:17.673
so if we're doing a POST or
something to login route,

96
00:06:17.673 --> 00:06:20.625
then we'll return true.

97
00:06:20.625 --> 00:06:26.161
Otherwise, if we're submitting to the
logout route, then we should return true.

98
00:06:26.161 --> 00:06:27.460
Otherwise we return false.

99
00:06:27.460 --> 00:06:29.140
And of course,
you could rewrite this differently.

100
00:06:29.140 --> 00:06:32.920
I think I write this a little differently,
but that's the basic idea.

101
00:06:32.920 --> 00:06:36.950
So if we're submitting either to login or
logout, we should reload.

102
00:06:36.950 --> 00:06:39.070
Otherwise, we don't need
to bother reloading.

103
00:06:39.070 --> 00:06:44.277
And actually, just for funsies, let's
console.log the submission right here,

104
00:06:44.277 --> 00:06:47.620
so we can see why that didn't
end up getting called.

105
00:06:47.620 --> 00:06:51.795
So we'll console, or, yeah,
let's look at the network here first.

106
00:06:51.795 --> 00:06:55.575
We'll add another submission here.

107
00:06:58.747 --> 00:07:02.630
And you'll notice we have one
fewer than we had before.

108
00:07:02.630 --> 00:07:06.544
So we have our POST, and
now we're revalidating the sales route and

109
00:07:06.544 --> 00:07:10.740
invoice ID, but
no root route being revalidated here.

110
00:07:10.740 --> 00:07:15.730
If we look at our console,
we'll see the submission there.

111
00:07:15.730 --> 00:07:20.490
And the reason is the action was
to /sales/invoices, yada, yada.

112
00:07:20.490 --> 00:07:24.250
If I go and log out,
then we don't get that log,

113
00:07:24.250 --> 00:07:28.104
because this was an action
to that logout route.

114
00:07:28.104 --> 00:07:33.137
If I go kody@remix.run, Kody loves you,

115
00:07:33.137 --> 00:07:39.122
then again that was a submission
to the login route,

116
00:07:39.122 --> 00:07:44.040
and so that decided to revalidate, okay?

117
00:07:44.040 --> 00:07:47.424
The mental model is,
if you're going to opt into this,

118
00:07:47.424 --> 00:07:52.370
think about when do I need to reload
this data, the data for this loader.

119
00:07:52.370 --> 00:07:55.020
And so actually in that case,
I put this here at the bottom,

120
00:07:55.020 --> 00:07:58.950
just cuz I wanted to get it out of
the way, cuz it's unstable and yucky.

121
00:07:58.950 --> 00:08:00.461
Just kidding, it's not yucky, it's fine.

122
00:08:00.461 --> 00:08:03.950
But it might make more sense
to colocate those two things.

123
00:08:03.950 --> 00:08:07.670
Here's the loader, here's when
that loader data should change.

124
00:08:07.670 --> 00:08:10.529
I think that makes sense to
put those two things together.

125
00:08:13.186 --> 00:08:14.005
Sweet, yeah.

126
00:08:14.005 --> 00:08:17.724
&gt;&gt; Just to clarify, this can be
on any route, not just the root?

127
00:08:17.724 --> 00:08:18.381
&gt;&gt; Correct.

128
00:08:18.381 --> 00:08:23.157
[LAUGH] Cool,

129
00:08:23.157 --> 00:08:27.320
any other questions from chat,
or in the room, yeah.

130
00:08:27.320 --> 00:08:29.699
&gt;&gt; Another one slightly related, but,

131
00:08:29.699 --> 00:08:33.051
in a production app would
you hardcode these routes?

132
00:08:33.051 --> 00:08:36.827
Or is there some sort of route manifest,
or strongly typed routes that you can

133
00:08:36.827 --> 00:08:38.395
reference in a-
&gt;&gt; I see, yeah,

134
00:08:38.395 --> 00:08:40.760
so that you're not referencing
all of this stuff.

135
00:08:40.760 --> 00:08:47.907
Yeah, we could go to the login route here.

136
00:08:47.907 --> 00:08:52.260
And our form, we've got a lot of forms.

137
00:08:52.260 --> 00:08:57.161
We could actually just say, you know what,
I want this to post to api/login,

138
00:08:57.161 --> 00:08:57.916
whatever.

139
00:08:57.916 --> 00:09:02.753
So I just busted my revalidation, right?

140
00:09:02.753 --> 00:09:08.587
I'm not aware of any utility that
you can use to have all these types.

141
00:09:08.587 --> 00:09:13.303
But you could totally extract these,
and just make it a rule,

142
00:09:13.303 --> 00:09:17.306
like we do not use just
regular strings here, yeah.

143
00:09:19.021 --> 00:09:19.880
Would I do that?

144
00:09:19.880 --> 00:09:22.661
I don't know, yeah,
I think it'd probably okay.

145
00:09:22.661 --> 00:09:24.452
It's something like this in particular,

146
00:09:24.452 --> 00:09:26.695
it's actually really easy
to see that you busted it.

147
00:09:26.695 --> 00:09:31.334
Cuz when you try to log in, it won't work,
cuz you're not revalidating the root.

148
00:09:31.334 --> 00:09:37.479
And I'm pretty sure that would
be the case most of the time.

149
00:09:37.479 --> 00:09:40.651
I suppose you could break the logout,
and never try to log out.

150
00:09:40.651 --> 00:09:43.954
But why would you not try,
if you change the logout,

151
00:09:43.954 --> 00:09:46.450
you'd probably wanna try the logout.

152
00:09:46.450 --> 00:09:49.270
So I'm pretty sure you would always
know that you busted something.

153
00:09:49.270 --> 00:09:51.290
And hopefully you're testing, so.

154
00:09:51.290 --> 00:09:53.998
&gt;&gt; If you put your console.log
on the first line,

155
00:09:53.998 --> 00:09:56.840
logging gets called three times?

156
00:09:56.840 --> 00:09:58.580
&gt;&gt; Yes, good question.

157
00:09:58.580 --> 00:10:02.979
So you should not rely on this
only being called one time.

158
00:10:04.120 --> 00:10:09.217
This will be called, I actually I'm not
sure why it would be called three times.

159
00:10:09.217 --> 00:10:14.783
But I'm not concerned by the fact that it
is, yeah, I can't answer specifically why.

160
00:10:14.783 --> 00:10:21.101
But yeah, do not rely on this only
being called once per revalidation.

161
00:10:21.101 --> 00:10:26.296
Yeah, it's gonna be, and actually the same
applies for your components as well.

162
00:10:26.296 --> 00:10:30.093
If you log in here,
things like StrictMode, and

163
00:10:30.093 --> 00:10:36.010
various other sundry things are going
to trigger plenty of rerenders.

164
00:10:36.010 --> 00:10:40.783
You don't really need to worry about
that typically in a Remix app,

165
00:10:40.783 --> 00:10:46.070
just thanks to the fact that,
because of nested routing, in particular.

166
00:10:46.070 --> 00:10:50.408
But yeah,
if you were to console.log(useTransition),

167
00:10:50.408 --> 00:10:55.510
that's the main one that's gonna be
triggering all of the rerenders,

168
00:10:55.510 --> 00:10:57.410
is these transitions.

169
00:10:57.410 --> 00:11:01.740
So that could be the reason that our
shouldReload is logged in multiple times.

170
00:11:02.870 --> 00:11:07.715
&gt;&gt; How would we handle it if the user
session could be invalidated by

171
00:11:07.715 --> 00:11:11.136
responses from outer unauthorized routes?

172
00:11:11.136 --> 00:11:16.143
&gt;&gt; Yeah, so I'm pretty sure
the question is about, my data can be

173
00:11:16.143 --> 00:11:22.230
changed by other systems or other users or
something, so how do I know?

174
00:11:22.230 --> 00:11:25.533
Or how do I update the data in the app
when the user is not the one who triggered

175
00:11:25.533 --> 00:11:26.910
the mutation?

176
00:11:26.910 --> 00:11:30.267
So this is, we start getting
into real-time conversations and

177
00:11:30.267 --> 00:11:31.206
stuff like that.

178
00:11:31.206 --> 00:11:35.333
And the easiest way to deal with
that is with server-sent events,

179
00:11:35.333 --> 00:11:40.284
we actually talked about this a little
bit in the React Fundamentals workshop.

180
00:11:40.284 --> 00:11:43.244
But if you look at, yeah, SSE,

181
00:11:43.244 --> 00:11:48.070
there's this demo by Jacob Ebey
that shows how to use

182
00:11:48.070 --> 00:11:53.788
server-sent events with Remix,
and it's really awesome.

183
00:11:53.788 --> 00:11:57.734
If you take a look at this,
which is a resource route,

184
00:11:57.734 --> 00:12:02.672
it has a loader that sends a response,
which is a ReadableStream.

185
00:12:02.672 --> 00:12:08.517
So this keeps the response, or the HTTP
request, open between this browser and

186
00:12:08.517 --> 00:12:13.941
server for an extended, a very long time,
until it's closed, really.

187
00:12:13.941 --> 00:12:17.790
And so
it can continue to send updates over time.

188
00:12:17.790 --> 00:12:21.898
This is only communication between
the server and the client, which for

189
00:12:21.898 --> 00:12:23.797
a lot of use cases is all you need.

190
00:12:23.797 --> 00:12:28.448
The clients don't typically need
to send any more than just an HTTP

191
00:12:28.448 --> 00:12:31.370
request every now and then to the server.

192
00:12:31.370 --> 00:12:34.286
And so then you use the platform,
just the EventSource,

193
00:12:34.286 --> 00:12:36.551
to subscribe to that event and
get updates.

194
00:12:36.551 --> 00:12:38.863
So if that's the sort of thing
that you want to update,

195
00:12:38.863 --> 00:12:42.070
there's nothing built into Remix,
necessarily, for that.

196
00:12:42.070 --> 00:12:44.499
We're just using the platform for this.

197
00:12:44.499 --> 00:12:47.412
The ReadableStream is not a Remix thing,
Response is not a Remix thing,

198
00:12:47.412 --> 00:12:49.300
it's all just platform stuff.

199
00:12:49.300 --> 00:12:52.732
And so you just use those
platform APIs to manage,

200
00:12:52.732 --> 00:12:56.610
like, somebody just updated this data.

201
00:12:56.610 --> 00:12:57.485
I'm gonna go and

202
00:12:57.485 --> 00:13:01.685
tell all the clients that that data has
been updated, they need to revalidate.

203
00:13:01.685 --> 00:13:04.201
So that's how I would do that.

