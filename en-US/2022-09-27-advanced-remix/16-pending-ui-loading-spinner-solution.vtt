WEBVTT

1
00:00:00.390 --> 00:00:02.820
Welcome back to exercise seven.

2
00:00:02.820 --> 00:00:06.180
Hopefully you had a good
time working through this.

3
00:00:06.180 --> 00:00:09.740
And we are going to just add a spinner.

4
00:00:09.740 --> 00:00:17.740
So, in the app layout route, this is the
route responsible for rendering of this.

5
00:00:17.740 --> 00:00:22.870
It's basically the route for
the logged in portion of the app.

6
00:00:22.870 --> 00:00:27.096
So, if we look at the actual route,
this route is responsible for the HTML,

7
00:00:27.096 --> 00:00:31.656
the head, the body, everything that's
like common whether you're logged in or

8
00:00:31.656 --> 00:00:32.840
logged out.

9
00:00:32.840 --> 00:00:34.790
And then our Dunder app.

10
00:00:34.790 --> 00:00:40.411
That's what you call double underscore,
I am told, our Dunder app components here,

11
00:00:40.411 --> 00:00:44.420
the app route is responsible for
all the logged in user stuff.

12
00:00:44.420 --> 00:00:48.075
That's why our login screen looks
completely different from the rest of who

13
00:00:48.075 --> 00:00:52.500
logged in the app where we can have
the fake books on the left and all that.

14
00:00:52.500 --> 00:00:55.865
So that's why we're here because we're
gonna be adding a spinner to the fake

15
00:00:55.865 --> 00:00:57.790
books logo right next to that.

16
00:00:57.790 --> 00:01:02.760
And we have a spinner implemented for
you in this component right there.

17
00:01:02.760 --> 00:01:07.732
And so, if we come up and
render that spinner,

18
00:01:07.732 --> 00:01:10.670
and we say visible, true.

19
00:01:10.670 --> 00:01:15.710
And we'll come over here and right, we're
on a slow page, we'll deal with that.

20
00:01:15.710 --> 00:01:19.082
But there is our spinner,
nice and spinny but

21
00:01:19.082 --> 00:01:24.784
we need to determine when should this
spinner show up and when should it not.

22
00:01:24.784 --> 00:01:28.508
So we're going to hook into with a hook,

23
00:01:28.508 --> 00:01:33.840
remix state for
the transitions as they happen.

24
00:01:33.840 --> 00:01:38.321
So we're gonna get our
transition is use transition and

25
00:01:38.321 --> 00:01:43.770
again this is coming from the remix,
run, react, not from react.

26
00:01:43.770 --> 00:01:48.563
We shipped first, we're gonna change
it because React is bigger than we are.

27
00:01:48.563 --> 00:01:52.752
And also our name makes more sense to
call it a navigation, so that's probably

28
00:01:52.752 --> 00:01:56.702
we will probably change it and
it will probably be changed to transition.

29
00:01:56.702 --> 00:02:01.241
So now we need to determine what or we're
gonna use the transition to determine

30
00:02:01.241 --> 00:02:04.275
whether we should be showing the spinner.

31
00:02:04.275 --> 00:02:08.105
So we can determine if we
are in a loading state.

32
00:02:08.105 --> 00:02:11.849
So we're transitioning, so we'll say,

33
00:02:11.849 --> 00:02:17.675
show a spinner is based on
transition.state is not equal to idle.

34
00:02:17.675 --> 00:02:19.943
So if it's anything else and
we are transitioning,

35
00:02:19.943 --> 00:02:21.392
there's a transition going on.

36
00:02:21.392 --> 00:02:24.392
We're submitting a form
that is a transition or

37
00:02:24.392 --> 00:02:29.119
at least a form that is a transition
in fetchers or not that doesn't apply.

38
00:02:29.119 --> 00:02:33.571
But for forms that like redirect like or
create new custom form for example, or

39
00:02:33.571 --> 00:02:38.361
we're navigating over to the customers,
navigating between customers all of that

40
00:02:38.361 --> 00:02:42.610
will have a transition state of either,
of one of the other two options here

41
00:02:42.610 --> 00:02:45.802
which TypeScript will Tossers loading or
submitting.

42
00:02:45.802 --> 00:02:49.460
So, when we're submitting the form,
and then loading is when we view

43
00:02:49.460 --> 00:02:54.542
revalidating or just transitioning between
pages, we just get a loading state there.

44
00:02:54.542 --> 00:02:59.272
So if we're anything but idle, then we
know we're in a transitioning state.

45
00:02:59.272 --> 00:03:03.402
And so we should show the spinner,
and that will do it for us.

46
00:03:03.402 --> 00:03:08.526
So if I go between customers, then we're
gonna get our spinner right there and

47
00:03:08.526 --> 00:03:12.732
and go to another customer boom
there is our spinner looks nice.

48
00:03:12.732 --> 00:03:17.821
If I go between invoices now,
that transition happens so

49
00:03:17.821 --> 00:03:23.333
quickly that we do not see the spinner and
the reason for that,

50
00:03:23.333 --> 00:03:30.030
if we come down to our spinner is,
we have it animating from zero to 100.

51
00:03:30.030 --> 00:03:34.386
We transition that over some time, so
it's not transitioning fast enough for

52
00:03:34.386 --> 00:03:36.060
us to be able to see it.

53
00:03:36.060 --> 00:03:41.233
But it could let's say that the request
takes like just the right amount of

54
00:03:41.233 --> 00:03:46.992
time to to display before the transition
finishes, and so the spinner will show up

55
00:03:46.992 --> 00:03:52.840
and then it will disappear really quickly
that will get a flash reloading state.

56
00:03:52.840 --> 00:03:55.210
It's not terrible, but
it's not the best either.

57
00:03:55.210 --> 00:03:57.585
And this is a very common problem.

58
00:03:57.585 --> 00:04:00.681
This has nothing to do with remix,
it's just flush with loading state,

59
00:04:00.681 --> 00:04:03.625
like you thought that you were gonna
need to show a loading spinner and

60
00:04:03.625 --> 00:04:07.235
then the request is faster than
you expect it, so it goes away.

61
00:04:07.235 --> 00:04:10.025
Flash reloading stays really
common problem on the web.

62
00:04:10.025 --> 00:04:12.677
And what I used to do back
in my AngularJS days is,

63
00:04:12.677 --> 00:04:15.375
I would actually to solve this problem.

64
00:04:15.375 --> 00:04:21.460
I made it so that every request took at
least 300 milliseconds, every one of them.

65
00:04:21.460 --> 00:04:24.113
So, any requests that led
to a loading state, so

66
00:04:24.113 --> 00:04:26.975
that I would never show
a flashing of loading state.

67
00:04:26.975 --> 00:04:32.478
For my use case, I could argue that
that was actually a better solution

68
00:04:32.478 --> 00:04:38.990
than the flash, but for what application
I was building, but still not awesome.

69
00:04:38.990 --> 00:04:41.548
Like, what if the request
only took 50 milliseconds,

70
00:04:41.548 --> 00:04:44.190
then I just slowed the user
down by 250 milliseconds.

71
00:04:44.190 --> 00:04:45.880
That's kind of silly.

72
00:04:45.880 --> 00:04:49.684
So, what's better is if there was
some mechanism for us to say,

73
00:04:49.684 --> 00:04:54.405
if the request takes 200 milliseconds,
then we don't need to show a loading

74
00:04:54.405 --> 00:04:58.040
spinner but
if it takes more than 200 milliseconds.

75
00:04:58.040 --> 00:04:59.590
Let's show a loading spinner.

76
00:04:59.590 --> 00:05:02.485
And if we show the loading spinner,
let's keep it showing for

77
00:05:02.485 --> 00:05:05.370
at least another 300 milliseconds, okay?

78
00:05:05.370 --> 00:05:08.451
And even if we've already finished
the transition and everything,

79
00:05:08.451 --> 00:05:11.710
that's at least like keep
that that spinner showing up.

80
00:05:11.710 --> 00:05:13.840
So that is the idea.

81
00:05:13.840 --> 00:05:15.431
If you need a loading spinner,

82
00:05:15.431 --> 00:05:18.500
then show up for at least long
enough that it's not a flash.

83
00:05:18.500 --> 00:05:21.130
And that's what the spin-delay is for.

84
00:05:21.130 --> 00:05:25.921
And fun fact, this was actually built by
somebody that I contracted to help me

85
00:05:25.921 --> 00:05:29.827
implement designs on my website
his name's Stefan Mayer, and

86
00:05:29.827 --> 00:05:32.390
he built this module for my website.

87
00:05:32.390 --> 00:05:39.110
And so you can actually see it on if you
can make a slower request on my website.

88
00:05:39.110 --> 00:05:44.037
Like if we go to the chats page,
then boom, there it is, and

89
00:05:44.037 --> 00:05:49.880
that was the show spin module in action,
or the spindling..

90
00:05:49.880 --> 00:05:54.020
So we're going to use SpinDelay.

91
00:05:54.020 --> 00:05:57.470
And I don't know why it imports it as
a default, because I don't think it works.

92
00:05:57.470 --> 00:05:59.670
You have to do the namespace import.

93
00:05:59.670 --> 00:06:03.260
That's kind of weird, but
yeah, so import it that way.

94
00:06:03.260 --> 00:06:05.280
And then we have some
configuration options.

95
00:06:05.280 --> 00:06:08.860
So, first we provide the show spinner.

96
00:06:10.950 --> 00:06:15.518
The Boolean that we want to have, all that
it actually does is it has those semantics

97
00:06:15.518 --> 00:06:18.065
I described and
you just provided a Boolean and

98
00:06:18.065 --> 00:06:21.680
it gives you a Boolean that only
changes within those semantics.

99
00:06:22.760 --> 00:06:28.410
So, we're actually gonna take this,
and assign our showSpinner to that.

100
00:06:28.410 --> 00:06:33.132
We're gonna provide that as our Boolean,
and then the configuration options,

101
00:06:33.132 --> 00:06:36.880
like you can set the min or
there it is, the min duration and the,

102
00:06:36.880 --> 00:06:38.530
what's the other option?

103
00:06:38.530 --> 00:06:39.289
The delay.

104
00:06:39.289 --> 00:06:40.825
The defaults are actually pretty good,

105
00:06:40.825 --> 00:06:43.816
so, I'm gonna just stick
with the defaults for this.

106
00:06:43.816 --> 00:06:48.206
So now we come back here, and I didn't
like set that up in a way that you could

107
00:06:48.206 --> 00:06:52.882
see that demonstrated, but you'll see
that like the experience it's still as

108
00:06:52.882 --> 00:06:55.011
good the user clicks on something.

109
00:06:55.011 --> 00:06:56.587
They see the spinner show up,

110
00:06:56.587 --> 00:07:00.740
it's a much better experience than
like not seeing anything at all.

111
00:07:00.740 --> 00:07:05.729
And still our prefetching still works,
so if I wait here for a second and

112
00:07:05.729 --> 00:07:11.053
then I click boom it's instant and
everything works nicely, so we've just

113
00:07:11.053 --> 00:07:16.890
improved the experience slightly by
giving our users something to say, okay.

114
00:07:16.890 --> 00:07:21.248
Like app is responding, even if
they're on a slow network connection.

115
00:07:23.659 --> 00:07:26.410
Okay, and this is how you do that.

116
00:07:26.410 --> 00:07:28.600
You can put this use transition anywhere.

117
00:07:28.600 --> 00:07:32.867
You could have like the little loading
bar at the top that some apps will do,

118
00:07:32.867 --> 00:07:36.525
like GitHub does that where it's
like lying to you, it says like

119
00:07:36.525 --> 00:07:41.162
here's the progress and then it gets like
to the end and then it just never moves.

120
00:07:41.162 --> 00:07:45.380
And you're like, I knew you were lying,
you don't know anything.

121
00:07:45.380 --> 00:07:47.300
With Server Sent Events,
though, you could,

122
00:07:47.300 --> 00:07:50.970
you could send them like here's
the progress on that thing, it's amazing.

123
00:07:50.970 --> 00:07:52.280
It's cool stuff, we can do.

124
00:07:52.280 --> 00:07:54.909
&gt;&gt; This only for
like navigation changes or

125
00:07:54.909 --> 00:07:59.670
when you mutate things would
that transition be updated.

126
00:07:59.670 --> 00:08:06.140
&gt;&gt; Yes, yeah so you will get a transition
anytime you're using the Form component,

127
00:08:06.140 --> 00:08:10.360
if you're using a fetcher
form that doesn't count,

128
00:08:10.360 --> 00:08:13.831
cuz there's no transition there However,

129
00:08:13.831 --> 00:08:17.940
you can get the the pending
state with a fetcher.

130
00:08:17.940 --> 00:08:21.300
You just use the fetcher itself
rather than the use transition.

131
00:08:21.300 --> 00:08:22.995
But yeah, for global transitions,

132
00:08:22.995 --> 00:08:26.711
that's the only situation where it would
make sense to do a global thing anyway,

133
00:08:26.711 --> 00:08:30.020
if you've just got fetchers
that are doing stuff.

134
00:08:30.020 --> 00:08:33.090
You could still do a global thing
by using the use fetchers hook.

135
00:08:33.090 --> 00:08:34.969
But typically you wouldn't do that,

136
00:08:34.969 --> 00:08:38.030
that would all be like local to
where it's showing up anyway.

137
00:08:39.290 --> 00:08:42.784
So yeah, as usual,
I'm long winded in my answers and

138
00:08:42.784 --> 00:08:47.144
I used a lot of words to answer
your simple question, yes, [LAUGH].

139
00:08:47.144 --> 00:08:50.961
&gt;&gt; What's the difference again,
between the dunderapp.TSX and

140
00:08:50.961 --> 00:08:52.710
the Dunder app folder?

141
00:08:52.710 --> 00:08:55.710
Yes [LAUGH].
So the Dunder app TSX is the parent route,

142
00:08:55.710 --> 00:09:00.430
it's as far as the layout is concerned,
this is, all of the stuff that

143
00:09:00.430 --> 00:09:05.077
wraps all of the components that
are inside of the Dunder app folder.

144
00:09:05.077 --> 00:09:09.031
So and all of those components inside of
there all those routes will show up right

145
00:09:09.031 --> 00:09:10.281
here in the outlet spot.

146
00:09:10.281 --> 00:09:14.242
So that's why you see this
left hand app over here and

147
00:09:14.242 --> 00:09:18.656
that always stays the same no
matter what page you're on,

148
00:09:18.656 --> 00:09:23.430
because the left side is
the responsibility of the parent, and

149
00:09:23.430 --> 00:09:27.059
all of these pages
are children of that parent.

