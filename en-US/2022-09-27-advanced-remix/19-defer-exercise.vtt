WEBVTT

1
00:00:00.500 --> 00:00:05.461
To open up the ReadMe there,
close other editors

2
00:00:05.461 --> 00:00:09.580
pull this up and no to dev exercise nine.

3
00:00:10.810 --> 00:00:13.740
Come over here,
we're on exercise nine now.

4
00:00:13.740 --> 00:00:20.242
And login is Kody@remix.run and
Kody loves you, and there we are.

5
00:00:20.242 --> 00:00:23.033
We still have a slow customers experience.

6
00:00:23.033 --> 00:00:27.430
This is exactly what we just finished
with, everything is exactly the same.

7
00:00:28.870 --> 00:00:30.980
So we have the skeleton UI, all of that.

8
00:00:32.070 --> 00:00:37.336
And now what we want to
solve is I want to make it,

9
00:00:37.336 --> 00:00:41.350
so that I can land on this page.

10
00:00:41.350 --> 00:00:45.930
And so, we've moved from slow network
connection to now the back end is slow.

11
00:00:45.930 --> 00:00:48.890
So my network is fine, it's fast.

12
00:00:48.890 --> 00:00:50.420
But we've got a slow back end.

13
00:00:50.420 --> 00:00:52.730
So something on the back end is slow.

14
00:00:52.730 --> 00:00:57.410
And for some reason,
we cannot speed it up.

15
00:00:57.410 --> 00:01:02.195
So there are a couple of things that
you should do when you've got to

16
00:01:02.195 --> 00:01:04.768
slow back end first, make it fast.

17
00:01:04.768 --> 00:01:10.186
[LAUGH] So that we spend a lot of time on
the front end like D bouncing inputs and

18
00:01:10.186 --> 00:01:14.241
whatever to try and
make the user experience not so bad.

19
00:01:14.241 --> 00:01:19.243
When we could just ask the back end
engineers to index the database or

20
00:01:19.243 --> 00:01:22.000
make those requests faster.

21
00:01:22.000 --> 00:01:27.070
So make the slow thing fast first,
and especially those backend things.

22
00:01:27.070 --> 00:01:29.630
So optimize your database queries,
add some caching.

23
00:01:29.630 --> 00:01:35.750
In our case, we actually totally could,
but let's just assume we cannot a caching.

24
00:01:35.750 --> 00:01:38.879
You use a different data source or
whatever we're already concurrently

25
00:01:38.879 --> 00:01:41.750
loading data with promise dot all
we've done all of these things,

26
00:01:41.750 --> 00:01:42.890
we cannot make it faster.

27
00:01:42.890 --> 00:01:46.686
And there are certainly cases like that,
you can't cache it because it's

28
00:01:46.686 --> 00:01:49.820
a completely different calculation
every time, I call it and

29
00:01:49.820 --> 00:01:52.730
it's completely different,
can't cache that thing.

30
00:01:54.000 --> 00:01:56.977
I can't optimize the database queries,
we've hired the best and

31
00:01:56.977 --> 00:01:58.420
they can't make it any faster.

32
00:01:58.420 --> 00:02:00.610
It is slow, that's the way it is.

33
00:02:00.610 --> 00:02:03.779
There are absolutely cases of slow
things that you cannot cache,

34
00:02:03.779 --> 00:02:05.570
you cannot make any faster.

35
00:02:05.570 --> 00:02:09.221
Or again,
everything that you do in software,

36
00:02:09.221 --> 00:02:13.530
you're making trade offs with
the time that you spend.

37
00:02:13.530 --> 00:02:15.330
So you spend time fixing bugs.

38
00:02:15.330 --> 00:02:17.110
Well, now you're making
a trade-off on new features.

39
00:02:17.110 --> 00:02:21.367
You're working on this particular feature
that means you can't work on that feature.

40
00:02:21.367 --> 00:02:23.584
You're always deciding what return or

41
00:02:23.584 --> 00:02:27.823
what thing you can do with your time
to get the better return on investment.

42
00:02:27.823 --> 00:02:31.210
And so maybe it is possible to
speed up your back end, but

43
00:02:31.210 --> 00:02:33.238
maybe it's just not a priority.

44
00:02:33.238 --> 00:02:35.771
It is a sad reality of lots of engineers,

45
00:02:35.771 --> 00:02:38.908
at least are lots of my
experience in enterprise.

46
00:02:38.908 --> 00:02:43.779
Especially is like getting on the priority
list of the other teams that I integrate

47
00:02:43.779 --> 00:02:46.910
with, it's like really can be hard.

48
00:02:46.910 --> 00:02:51.681
And so, wouldn't it be nice if we had some
way to deal with this in a way that gives

49
00:02:51.681 --> 00:02:54.800
our users the best experience possible?

50
00:02:54.800 --> 00:02:56.430
That is what we are going to be doing.

51
00:02:56.430 --> 00:03:00.401
The other thing we have already done,
prefetching, the goberspiners,

52
00:03:00.401 --> 00:03:03.039
the skeleton UI,
we have already done all that.

53
00:03:04.350 --> 00:03:08.020
The next thing that we
could do to make this or

54
00:03:08.020 --> 00:03:12.670
without this new feature that
is coming to remix soon.

55
00:03:12.670 --> 00:03:16.224
So that we're gonna be using
an experimental version of remix actually

56
00:03:16.224 --> 00:03:18.475
here in a sec, but
without this new feature,

57
00:03:18.475 --> 00:03:21.610
what you would have to do
is fetch on the client.

58
00:03:21.610 --> 00:03:26.903
So the reason that this is slow when you
show up here is because we're waiting for

59
00:03:26.903 --> 00:03:28.246
the loader to run and

60
00:03:28.246 --> 00:03:32.900
do all that slow stuff before we
can even render any of the HTML.

61
00:03:32.900 --> 00:03:37.353
Well, if we render HTML and
don't even request the slow stuff,

62
00:03:37.353 --> 00:03:40.660
then this response can come back nice and
fast.

63
00:03:40.660 --> 00:03:43.110
And so that's what the example is.

64
00:03:43.110 --> 00:03:47.896
So if I run node dev example,
clients or whatever it is, there we go,

65
00:03:47.896 --> 00:03:49.887
client-side-fetching.

66
00:03:49.887 --> 00:03:56.760
That's gonna pop up in here,
kody@remix.run and Kody loves you.

67
00:03:58.270 --> 00:04:01.430
And so now if I click on customers,
boom, there I am really fast,

68
00:04:01.430 --> 00:04:04.510
nice and quick,
I get the loading state right away.

69
00:04:04.510 --> 00:04:07.230
If I open it up here, same thing.

70
00:04:07.230 --> 00:04:09.069
So that's the experience
we're looking for, but

71
00:04:09.069 --> 00:04:11.210
there's a big problem with this approach.

72
00:04:11.210 --> 00:04:14.069
First, the problem is and
I'll show you the implementation too,

73
00:04:14.069 --> 00:04:15.660
because it's kind of interesting.

74
00:04:15.660 --> 00:04:23.088
So if we go to examples,
it is customer ID, let's see.

75
00:04:23.088 --> 00:04:24.000
Client, yeah, there we go.

76
00:04:25.130 --> 00:04:32.187
So the way that this works is we have
a fetcher and we have a use effect.

77
00:04:32.187 --> 00:04:35.663
And the fetcher runs on initial mount,

78
00:04:35.663 --> 00:04:41.365
it will load the invoice details for
this particular customer.

79
00:04:41.365 --> 00:04:46.210
So rather than our loader sending
all of the customer info and

80
00:04:46.210 --> 00:04:50.400
its invoice details on that
initial server render.

81
00:04:50.400 --> 00:04:54.678
We actually add this little feature to
our loader to say, hey, if we're actually

82
00:04:54.678 --> 00:04:58.845
specifically requesting the invoice
details, and let's send that instead.

83
00:04:58.845 --> 00:05:01.350
So it's a separate branch of our loader.

84
00:05:01.350 --> 00:05:04.138
So we're kind of hijacking our loader for
our purposes here,

85
00:05:04.138 --> 00:05:07.180
treating our loader kind
of like a resource route.

86
00:05:07.180 --> 00:05:10.291
So in any case, this is a slow bid and
we do this on the client,

87
00:05:10.291 --> 00:05:12.220
we make this request on the client.

88
00:05:12.220 --> 00:05:15.497
So this is still running on the server,
but we make the request for

89
00:05:15.497 --> 00:05:18.730
this when the client hydrates
as part of this use effect.

90
00:05:18.730 --> 00:05:23.362
And when that finishes, then we come
down here, when our fetcher is idle, and

91
00:05:23.362 --> 00:05:26.954
we have data, then we'll render
all of that all right here.

92
00:05:26.954 --> 00:05:31.716
And it works, and it works fine, this is
actually relative to lots of other fetch

93
00:05:31.716 --> 00:05:34.813
on the client solutions
that I've done in the past.

94
00:05:34.813 --> 00:05:38.383
This is actually not all that complicated
because you still get like the server code

95
00:05:38.383 --> 00:05:41.500
is right there and
it's pretty straightforward.

96
00:05:41.500 --> 00:05:44.660
However, the user
experience is suboptimal.

97
00:05:45.910 --> 00:05:47.890
So first of all ,yeah,

98
00:05:47.890 --> 00:05:53.140
I messed that up because I have
two versions of the app running,

99
00:05:53.140 --> 00:05:59.097
I forgot which port this one's on we
are gonna be using this one, okay?

100
00:06:04.588 --> 00:06:08.144
You should figure out a way to stay
logged in, no matter which app you're on,

101
00:06:08.144 --> 00:06:10.930
that would be kind of interesting
to challenge yourself.

102
00:06:10.930 --> 00:06:13.439
Okay, so if we look at the network tab,

103
00:06:13.439 --> 00:06:17.244
this network tab tells you
everything you need to know about

104
00:06:17.244 --> 00:06:22.960
the user's experience when they land
on your site, they're on any site.

105
00:06:22.960 --> 00:06:27.389
So if hit Go, and
actually let's do user lens here after you

106
00:06:27.389 --> 00:06:31.030
deployed a new version of your site or
whatever.

107
00:06:31.030 --> 00:06:36.940
So the cache doesn't work anymore,
you have all new stuff.

108
00:06:36.940 --> 00:06:40.190
So the first thing that you gonna,
that's gonna be a long.

109
00:06:40.190 --> 00:06:43.828
Sometimes, for some weird reasons,
the document request is long.

110
00:06:43.828 --> 00:06:48.836
So there we go we get a pretty
quick document request or

111
00:06:48.836 --> 00:06:55.177
where's my, way it's kind of hard
to show overview, there we go,

112
00:06:55.177 --> 00:07:00.439
I just want the first little bit here,
just that stuff.

113
00:07:00.439 --> 00:07:03.641
Okay, so
that document request is pretty quick and

114
00:07:03.641 --> 00:07:07.593
then we start fetching all of the CSS and
JavaScript and stuff.

115
00:07:07.593 --> 00:07:10.395
And then finally,
when the JavaScript hydrates,

116
00:07:10.395 --> 00:07:15.595
we can make this network request, that
is the long network request right there.

117
00:07:15.595 --> 00:07:18.989
Hold on, that's the socket, where's
where's our network's request for stuff?

118
00:07:18.989 --> 00:07:19.658
There it is.

119
00:07:19.658 --> 00:07:24.320
So this is a request that gets us
the customer details and invoice details,

120
00:07:24.320 --> 00:07:27.267
all that stuff that's really slow.

121
00:07:27.267 --> 00:07:29.497
So this request, yeah, that's right.

122
00:07:29.497 --> 00:07:34.980
Sometimes Chrome the network tab will
show pull these off of each other.

123
00:07:34.980 --> 00:07:37.930
But yes, it wasn't the socket,
the socket is still pending.

124
00:07:37.930 --> 00:07:39.930
It's this request that's
like super duper long.

125
00:07:40.930 --> 00:07:45.684
So the key thing here that I want you
to take away from is when this request

126
00:07:45.684 --> 00:07:46.960
starts, right?

127
00:07:46.960 --> 00:07:49.035
That is the point of all of this.

128
00:07:49.035 --> 00:07:54.270
The request starts after
the latest JavaScript thing.

129
00:07:54.270 --> 00:07:56.885
As soon as that last
JavaScript thing finishes and

130
00:07:56.885 --> 00:08:00.210
we run all that JavaScript and
we hydrate the app.

131
00:08:00.210 --> 00:08:04.953
Now I can start the request as not great,
I don't want that,

132
00:08:04.953 --> 00:08:08.558
it would be cooler if
their request started.

133
00:08:08.558 --> 00:08:12.730
I don't know with the document,
like it does when we're using our loaders.

134
00:08:12.730 --> 00:08:14.910
That's one of the reasons why remix is so
fast.

135
00:08:14.910 --> 00:08:19.823
It's because all of the, requests for data
start as soon as the documents requested,

136
00:08:19.823 --> 00:08:23.389
not after the documents done,
as soon as it's requested, and

137
00:08:23.389 --> 00:08:25.161
so we're missing out on that.

138
00:08:25.161 --> 00:08:32.799
[LAUGH] That's gonna be hard am sure
as soon as that JavaScript loads and

139
00:08:32.799 --> 00:08:37.470
now we can finally start requesting this.

140
00:08:37.470 --> 00:08:40.875
Would be really cool if we could
start this request earlier,

141
00:08:40.875 --> 00:08:44.870
that's what the defer API that
you're about to use enables.

142
00:08:44.870 --> 00:08:48.039
So let's move this over,
but still not wait for it,

143
00:08:48.039 --> 00:08:52.170
we call it promise teleportation,
it's pretty cool.

144
00:08:52.170 --> 00:08:55.272
We live with a promise on the server and
then on the client we still have

145
00:08:55.272 --> 00:08:58.552
that promise, it's not the same
promise cuz that's like impossible.

146
00:08:58.552 --> 00:09:02.128
But it feels like Get,
and it's really cool, so

147
00:09:02.128 --> 00:09:07.375
that's what you're gonna be doing
is solving that specific problem.

148
00:09:07.375 --> 00:09:11.759
And yeah, I describe that in
the background here I'll give you

149
00:09:11.759 --> 00:09:15.145
an example of what these APIs look like.

150
00:09:15.145 --> 00:09:18.870
And yeah, I have so
many things to say about this,

151
00:09:18.870 --> 00:09:23.815
but I'll talk about it after
our exercise is finished.

152
00:09:23.815 --> 00:09:28.082
So you're going to be implementing
the defer suspense and

153
00:09:28.082 --> 00:09:33.230
await API's on that customer ID route
to make this feel really great.

154
00:09:34.250 --> 00:09:37.166
I mean, as great as you can make it
because you can't speed up the back

155
00:09:37.166 --> 00:09:37.730
end, okay?

