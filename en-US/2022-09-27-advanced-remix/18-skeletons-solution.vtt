WEBVTT

1
00:00:00.320 --> 00:00:04.236
Okay, welcome back,
exercise eight, super fun,

2
00:00:04.236 --> 00:00:09.224
where we're going to show a fancy
loading skeleton for our users.

3
00:00:09.224 --> 00:00:12.816
And actually, yeah,
let's just open it right up here.

4
00:00:12.816 --> 00:00:18.469
So we need to determine when we show the
skeleton, versus when we show the outlet.

5
00:00:18.469 --> 00:00:23.703
So I'm gonna start down here,
actually, and I'm going to say true,

6
00:00:23.703 --> 00:00:29.570
we'll fill that in with an actual
variable later, then render the skeleton.

7
00:00:29.570 --> 00:00:31.148
Skeleton, how do you spell skeleton?

8
00:00:31.148 --> 00:00:34.172
CustomerSkeleton, there we go.

9
00:00:34.172 --> 00:00:37.596
Otherwise, we render the outlet.

10
00:00:39.207 --> 00:00:45.414
And in the case of the CustomerSkeleton,
it also wants a name and an email.

11
00:00:45.414 --> 00:00:53.410
So we provide the name of Kent,
and the email of kody@remix.run.

12
00:00:53.410 --> 00:00:56.600
I mean, you can send an email there,
but I don't think it goes to anybody.

13
00:00:56.600 --> 00:01:00.543
So with that,
we can see what our skeleton looks like,

14
00:01:00.543 --> 00:01:03.914
as soon as our really
slow backend is done.

15
00:01:03.914 --> 00:01:06.038
I've rendered two Outlet in there.

16
00:01:06.038 --> 00:01:10.530
Actually, fun fact,
you can render multiple outlets [LAUGH].

17
00:01:10.530 --> 00:01:12.896
And it will do exactly
what you think it will do.

18
00:01:12.896 --> 00:01:15.243
It will render that outlet multiple times.

19
00:01:15.243 --> 00:01:18.799
I can't imagine why you'd want to do that,
but, I mean,

20
00:01:18.799 --> 00:01:21.062
the world is your oyster, so [LAUGH].

21
00:01:21.062 --> 00:01:25.172
Anyway, this is what we get,
the customer email, customer name.

22
00:01:25.172 --> 00:01:28.710
And then the invoices with
the fancy little loading state.

23
00:01:28.710 --> 00:01:34.070
So now all we need to do is figure out,
okay, when do we show this?

24
00:01:34.070 --> 00:01:40.850
And what is the email and username and
name of the customer that we selected?

25
00:01:40.850 --> 00:01:44.776
Now, if you're like me,
your first impulse is to think, well,

26
00:01:44.776 --> 00:01:48.090
I'll just have some state that I manage.

27
00:01:48.090 --> 00:01:52.787
That as soon as I click on this,
that just says last clicked customer, or

28
00:01:52.787 --> 00:01:54.252
something like that.

29
00:01:54.252 --> 00:01:56.646
That's how I would have
implemented this before.

30
00:01:56.646 --> 00:01:58.809
Honestly, Ryan, taught me better [LAUGH].

31
00:01:58.809 --> 00:02:04.193
Because the browser's already managing
some state for you in the history API,

32
00:02:04.193 --> 00:02:08.280
if you say history.state,
there's some state in here.

33
00:02:08.280 --> 00:02:14.302
Now, some of this stuff is implementation
detail stuff for the router.

34
00:02:14.302 --> 00:02:19.826
But we can actually access this via
a fancy little prop on links and

35
00:02:19.826 --> 00:02:26.520
NavLinks, which are just basically
links that are kinda special.

36
00:02:26.520 --> 00:02:30.872
So with that now, whichever link
we click on is going to update

37
00:02:30.872 --> 00:02:34.400
the history.state to have
a customer prop on it.

38
00:02:34.400 --> 00:02:39.359
So if we come over here, and
then we click on this link, and

39
00:02:39.359 --> 00:02:45.356
then we look at history.state,
then here's usr, this user state.

40
00:02:45.356 --> 00:02:48.817
So React Router is managing that for us.

41
00:02:48.817 --> 00:02:52.703
But there's our customer,
that's the customer that was clicked on.

42
00:02:52.703 --> 00:02:56.437
So I don't have to manage state,
hurray, thank you, Remix, again, for

43
00:02:56.437 --> 00:02:57.932
keeping state out of my code.

44
00:02:57.932 --> 00:02:59.930
So I'm just literally saying,

45
00:02:59.930 --> 00:03:04.453
here's the customer that I'm clicking
on when I click on this NavLink.

46
00:03:04.453 --> 00:03:07.525
And so from that,
I can say who's the next customer,

47
00:03:07.525 --> 00:03:12.155
and that's the customer I should
be sending to this name and email.

48
00:03:12.155 --> 00:03:17.422
So we gotta get that state out
of React Router, out of Remix.

49
00:03:17.422 --> 00:03:21.342
So we're gonna get our loading customer,
and

50
00:03:21.342 --> 00:03:25.472
actually let's initialize
that to undefined.

51
00:03:25.472 --> 00:03:30.290
And then if the transition.location,

52
00:03:30.290 --> 00:03:35.377
hold on,
we forgot to bring in useTransition.

53
00:03:35.377 --> 00:03:42.799
UseTransition, again, from Remix, not
React Router, or not React, transition.

54
00:03:42.799 --> 00:03:47.239
Okay, so now if the location has state,

55
00:03:47.239 --> 00:03:51.550
then we'll say our loadingCustomer =

56
00:03:51.550 --> 00:03:56.660
transition.location.state.customer.

57
00:03:56.660 --> 00:03:59.025
Now, TypeScript is not
gonna be happy about this,

58
00:03:59.025 --> 00:04:01.006
cuz this cannot be typed as anything else.

59
00:04:01.006 --> 00:04:03.670
TypeScript cannot know
what could go in there.

60
00:04:03.670 --> 00:04:06.314
And frankly, we can't either,
we can't be sure,

61
00:04:06.314 --> 00:04:10.010
somebody could be coming to this
from something else completely.

62
00:04:10.010 --> 00:04:13.310
And we have no way of knowing for sure.

63
00:04:13.310 --> 00:04:19.738
So it might be good to add
some type safety here for now.

64
00:04:19.738 --> 00:04:24.538
What I mean by that is a runtime
type assertion to assert that yes,

65
00:04:24.538 --> 00:04:26.561
this is indeed a customer.

66
00:04:26.561 --> 00:04:31.075
For now, we're just gonna shut
up TypeScript by saying as any.

67
00:04:31.075 --> 00:04:33.620
Cool, so now we have our loadingCustomer.

68
00:04:33.620 --> 00:04:35.560
And this also is gonna be typed as any.

69
00:04:37.370 --> 00:04:38.754
This is not a TypeScript workshop.

70
00:04:38.754 --> 00:04:41.380
So we're gonna skip over
making that happier.

71
00:04:41.380 --> 00:04:46.008
So we'll take that loadingCustomer,
and we'll say,

72
00:04:46.008 --> 00:04:51.560
showSkeleton =,
I guess just Boolean(loadingCustomer).

73
00:04:51.560 --> 00:04:55.250
If a loading customer exists,
then we should show the skeleton.

74
00:04:55.250 --> 00:05:01.998
So now I come down here, and
we'll do loadingCustomer.name and

75
00:05:01.998 --> 00:05:04.950
loadingCustomer.email.

76
00:05:06.750 --> 00:05:09.871
And that, my friends, is how you do that.

77
00:05:09.871 --> 00:05:13.520
Click, boom, there it is,
that sure makes it feel faster.

78
00:05:13.520 --> 00:05:17.474
I don't know about you, to me,
I feel like that's a faster experience.

79
00:05:17.474 --> 00:05:22.345
The one trade-off that we're making,
as I mentioned earlier, is if I click on

80
00:05:22.345 --> 00:05:27.565
this one, and then decide, I actually
wanna go to that, I have to go back.

81
00:05:27.565 --> 00:05:31.205
Wait, actually,
I wanna go back, shoot, right?

82
00:05:31.205 --> 00:05:35.218
So you are making a tradeoff,
it's not just like this is always better.

83
00:05:35.218 --> 00:05:41.248
But in my opinion, for this specific
situation, I think this is better, I do.

84
00:05:41.248 --> 00:05:43.861
So that's what we're gonna go with.

85
00:05:43.861 --> 00:05:48.450
And yeah, it's quite nice, considering
the user's network is really slow,

86
00:05:48.450 --> 00:05:51.131
which is what we're
trying to simulate here.

87
00:05:51.131 --> 00:05:54.659
So I think as far as giving the user
as good as an experience as

88
00:05:54.659 --> 00:05:58.695
possible with their slow network,
we're prefetching properly.

89
00:05:58.695 --> 00:06:01.742
So I hover over this for
a second with my slow network.

90
00:06:01.742 --> 00:06:04.840
And then I finally click and
that just shows up.

91
00:06:04.840 --> 00:06:07.530
You may have noticed there was
a flash of loading state right there.

92
00:06:07.530 --> 00:06:12.090
Let's fix that here really
quick with our SpinDelay stuff.

93
00:06:12.090 --> 00:06:15.664
So let's say, actually our showSkeleton,

94
00:06:15.664 --> 00:06:20.750
it's gonna be useSpinDelay, and
again, it imports it wrong.

95
00:06:20.750 --> 00:06:24.620
I don't know why, but
we're gonna fix that, useSpinDelay.

96
00:06:24.620 --> 00:06:28.450
Here's my Boolean, and
I'll stick with the defaults here too.

97
00:06:28.450 --> 00:06:33.233
You can look up that, and kind of move
those knobs however you like, but

98
00:06:33.233 --> 00:06:35.638
that's what we're gonna go with.

99
00:06:35.638 --> 00:06:39.191
And so now, I'm not sure how,
it's hard to simulate this,

100
00:06:39.191 --> 00:06:41.497
because it's a random length of time.

101
00:06:41.497 --> 00:06:47.204
But we're not gonna get that
flash of loadingState anymore.

102
00:06:47.204 --> 00:06:47.926
What the devil?

103
00:06:47.926 --> 00:06:49.710
I don't know what that was.

104
00:06:49.710 --> 00:06:52.454
We're gonna pretend that didn't happen.

105
00:06:52.454 --> 00:06:56.378
[LAUGH] I don't wanna take
the time to look into that,

106
00:06:56.378 --> 00:06:58.884
that's never happened before.

107
00:06:58.884 --> 00:07:03.287
And that is, yeah,
that's everything to show you about this.

108
00:07:03.287 --> 00:07:07.923
So you do not control the network at all,
that is out of your control.

109
00:07:07.923 --> 00:07:14.140
What you do control is how your app
responds to slower network experiences.

110
00:07:14.140 --> 00:07:16.804
And you can do that by prefetching and
showing a global spinner.

111
00:07:16.804 --> 00:07:21.049
And then showing more localized loading
states like skeletons in appropriate ways.

112
00:07:21.049 --> 00:07:26.444
And I think Remix gives you really
nice APIs to be able to do that.

113
00:07:26.444 --> 00:07:28.258
I feel like this is actually
pretty straightforward and simple.

114
00:07:28.258 --> 00:07:33.633
If you want to look at how
I make this more type safe,

115
00:07:33.633 --> 00:07:41.138
you can take a look at the finished
version where I do all of that, okay?

116
00:07:41.138 --> 00:07:47.355
Cool, any questions about skeletons?

117
00:07:47.355 --> 00:07:51.627
UI skeletons, I don't know anything
about human anatomy skeletons.

118
00:07:51.627 --> 00:07:54.400
I think my femur is somewhere around here.

119
00:07:54.400 --> 00:07:58.320
&gt;&gt; If you navigate directly to this page,
it will take a long time.

120
00:07:58.320 --> 00:08:01.100
Is there a way to display
the app in chunks?

121
00:08:01.100 --> 00:08:03.987
&gt;&gt; Yes, wow, what a great question.

122
00:08:03.987 --> 00:08:07.344
Holy smokes,
it's almost like that's our next exercise.

123
00:08:07.344 --> 00:08:14.217
Yes, so you're exactly right,
this is not great.

124
00:08:14.217 --> 00:08:18.401
If what the problem is,
is your user's network connection,

125
00:08:18.401 --> 00:08:20.570
you can do nothing about this.

126
00:08:20.570 --> 00:08:24.420
I don't care if you SSG or
whatever nonsense you're doing.

127
00:08:24.420 --> 00:08:27.468
If your user is on a slow connection,
you're stuck,

128
00:08:27.468 --> 00:08:31.143
this is just gonna take a long time for
them to load, that's it.

129
00:08:31.143 --> 00:08:34.676
Same thing with transitioning
to this customer's page.

130
00:08:34.676 --> 00:08:39.980
You're stuck with that loading spinner,
sort of.

131
00:08:39.980 --> 00:08:43.379
The next exercise will
actually solve that, even for

132
00:08:43.379 --> 00:08:45.730
users on a slow network connection.

133
00:08:45.730 --> 00:08:50.205
Because even if your backend is
really fast at getting you the data,

134
00:08:50.205 --> 00:08:54.992
if it takes the user a long time to go and
ask for it, and then download it,

135
00:08:54.992 --> 00:08:57.570
again, it's still gonna be slow.

136
00:08:57.570 --> 00:09:00.203
There's not much you can do about that,

137
00:09:00.203 --> 00:09:03.539
because we are already
chunking the application.

138
00:09:03.539 --> 00:09:06.257
So even if we don't
load data on this page,

139
00:09:06.257 --> 00:09:11.694
just to get the code to show the spinners
and whatever, that's gonna take some time.

140
00:09:11.694 --> 00:09:15.739
And if your user's got a slow
network connection, that's it.

141
00:09:15.739 --> 00:09:18.951
So yeah, if you want to,
the best you can do is prefetch.

142
00:09:18.951 --> 00:09:22.610
And that'll prefetch the JavaScript
resources and stuff.

143
00:09:22.610 --> 00:09:28.398
And you could also even say, hey, I wanna
prefetch the JavaScript stuff right away.

144
00:09:28.398 --> 00:09:31.197
They logged in, boom,
I just download the entire app.

145
00:09:31.197 --> 00:09:34.538
You can totally do that if you want.

146
00:09:34.538 --> 00:09:39.529
But yeah, as far as downloading the data,
unless you wanna download all the data to

147
00:09:39.529 --> 00:09:43.380
the users device as well,
which you probably don't wanna do for

148
00:09:43.380 --> 00:09:47.050
most applications,
the best you can offer is that spinner.

149
00:09:48.440 --> 00:09:52.417
However, if the problem is not
your user's network connection,

150
00:09:52.417 --> 00:09:57.045
but actually your backend is slow,
that's what the next exercise is about.

151
00:09:57.045 --> 00:10:00.002
So great question.

