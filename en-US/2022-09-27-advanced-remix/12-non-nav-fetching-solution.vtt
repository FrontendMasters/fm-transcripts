WEBVTT

1
00:00:00.115 --> 00:00:04.717
Welcome back, hopefully you had
a great time with exercise five,

2
00:00:04.717 --> 00:00:10.315
we're gonna work through it together and
feel free to ask questions and things.

3
00:00:10.315 --> 00:00:16.629
I'm gonna start on the new TSX file,
so this is our customer combo box.

4
00:00:16.629 --> 00:00:19.048
ComboBox, that is exported
from our resource route.

5
00:00:19.048 --> 00:00:24.528
So, if you look at that import that is
coming from a routes resources customers.

6
00:00:24.528 --> 00:00:29.611
I'm gonna leave it like this full import
rather than doing relative import,

7
00:00:29.611 --> 00:00:32.046
I just prefer having that till date.

8
00:00:32.046 --> 00:00:36.424
I don't want to do
a relative import there.

9
00:00:36.424 --> 00:00:38.772
Because yeah, like who wants to do that?

10
00:00:38.772 --> 00:00:40.034
Not me, no.

11
00:00:40.034 --> 00:00:41.321
So, we're gonna go with that.

12
00:00:41.321 --> 00:00:45.562
And again, you do not typically
want to see this in your codebase,

13
00:00:45.562 --> 00:00:49.677
you should not be importing things
from routes most of the time.

14
00:00:49.677 --> 00:00:52.426
This is an exception, and
it's a darn good one.

15
00:00:52.426 --> 00:00:56.441
So, the other thing that this customer
combo box accepts is the error because

16
00:00:56.441 --> 00:00:59.407
it's the one responsible for
rendering our inputs and so

17
00:00:59.407 --> 00:01:01.717
it's gonna render the error force as well.

18
00:01:01.717 --> 00:01:06.402
And we get our errors from
the action data similar to this.

19
00:01:06.402 --> 00:01:11.355
And that's gonna be errors dot customer.

20
00:01:11.355 --> 00:01:15.189
This will get passed on in
our customer combo box.

21
00:01:15.189 --> 00:01:19.989
Okay, great, so, in the customer
combo box, I actually created this

22
00:01:19.989 --> 00:01:24.709
pattern when I created this workshop,
I was like, okay, I've got to

23
00:01:24.709 --> 00:01:29.684
have a backend connected component
where I'm gonna put that component.

24
00:01:29.684 --> 00:01:31.193
Well, here's my resource route.

25
00:01:31.193 --> 00:01:33.684
I guess I could put make
a components directory or

26
00:01:33.684 --> 00:01:37.510
something that why don't I just stick it
in there and then I can export it and

27
00:01:37.510 --> 00:01:40.757
it actually is so nice to be able
to have this back end front end.

28
00:01:40.757 --> 00:01:42.659
So, this is all very
much a front end thing.

29
00:01:42.659 --> 00:01:48.644
We've got Downshift to this use
combo box hook that we're using and

30
00:01:48.644 --> 00:01:52.434
rendering out all of our UI stuff for
that.

31
00:01:52.434 --> 00:01:56.040
I think it's pretty rad.

32
00:01:56.040 --> 00:01:59.370
And then we have our
back end code right here.

33
00:01:59.370 --> 00:02:04.250
I think we wanna start is with our UI.

34
00:02:04.250 --> 00:02:07.403
But you could really start with
whichever one that you want.

35
00:02:07.403 --> 00:02:09.312
But I'm gonna start with the UI.

36
00:02:09.312 --> 00:02:13.520
And so, we'll say we need to use fetcher
that's gonna be triggering the fetch

37
00:02:13.520 --> 00:02:14.808
to our research route.

38
00:02:14.808 --> 00:02:19.745
So our fetcher, use fetcher.

39
00:02:19.745 --> 00:02:21.909
And fetcher seems like a pretty
reasonable name for me.

40
00:02:21.909 --> 00:02:23.648
So, I'm gonna stick with that.

41
00:02:23.648 --> 00:02:27.158
The fetcher when we do fetch
is gonna have a data property.

42
00:02:27.158 --> 00:02:32.195
So, when that fetch is successful, it's
gonna have a data property that we can

43
00:02:32.195 --> 00:02:37.395
use for the customers that we feed into
our combo box, the customers or the items.

44
00:02:37.395 --> 00:02:44.182
And so, what we're going
to do is say fetcher.data.

45
00:02:44.182 --> 00:02:49.379
And I think that the way that I do in
the final, is we say dot customers.

46
00:02:49.379 --> 00:02:55.189
Because for me, I typically like objects
coming back with descriptive key names,

47
00:02:55.189 --> 00:02:58.766
but you could just return the array,
that is fine.

48
00:02:58.766 --> 00:03:02.993
So, if the fetcher data customers exist,
then that is what it is gonna be.

49
00:03:02.993 --> 00:03:06.297
Otherwise we will have
it be an empty array.

50
00:03:06.297 --> 00:03:08.121
Okay, so, if we have already fetched and

51
00:03:08.121 --> 00:03:11.001
we have got some customers that is
what we want to show on our list.

52
00:03:11.001 --> 00:03:15.109
Otherwise, we don't have
anything in the array there.

53
00:03:15.109 --> 00:03:20.770
Great, so then, in our use combo
box on input value change,

54
00:03:20.770 --> 00:03:28.208
we need to do a few things to actually
trigger this fetcher to submit this query.

55
00:03:28.208 --> 00:03:31.561
So, first we're going to say,

56
00:03:31.561 --> 00:03:36.291
if the changes that happened.inputvalue.

57
00:03:36.291 --> 00:03:41.000
So, if there's no input value
then we'll just return or

58
00:03:41.000 --> 00:03:46.898
just quick exit, we don't need to
make any fetch request in that case.

59
00:03:46.898 --> 00:03:52.527
We could potentially store some state here
and say set customers to an empty array

60
00:03:52.527 --> 00:03:57.852
to clear it out that's an option that you
have if you wanted to do it that way.

61
00:03:57.852 --> 00:04:01.579
But we're just gonna leave the customers
that were there at the time that the input

62
00:04:01.579 --> 00:04:02.616
value got grayed out.

63
00:04:02.616 --> 00:04:05.800
So, that's a UX choice
that you can make there.

64
00:04:05.800 --> 00:04:08.704
Okay, so, if there is an input value, and

65
00:04:08.704 --> 00:04:12.103
we had that change,
then we're going to submit.

66
00:04:12.103 --> 00:04:17.502
So, we're gonna say fetcher.submit.

67
00:04:17.502 --> 00:04:22.947
And we're going to submit our query,
which will be changes.inputvalue.

68
00:04:22.947 --> 00:04:25.528
So, this this query is our search.

69
00:04:25.528 --> 00:04:30.200
And this is actually gonna go on
the search params on the query

70
00:04:30.200 --> 00:04:35.068
params cuz we're actually going
to set this to a method of get.

71
00:04:35.068 --> 00:04:38.628
So, we're going to submit this as a get.

72
00:04:38.628 --> 00:04:41.646
And if we do not provide an action here,

73
00:04:41.646 --> 00:04:47.687
then the action will default to whatever
route this component is rendered in.

74
00:04:47.687 --> 00:04:50.645
So, it could go into,
in our case that will render in here and

75
00:04:50.645 --> 00:04:53.893
we would have to have a loader that
handles this request in there and

76
00:04:53.893 --> 00:04:55.758
that just does not really make sense.

77
00:04:55.758 --> 00:04:59.143
I don't wanna have a loader
that handles the back end for

78
00:04:59.143 --> 00:05:02.312
this component in every
route that I render this in,

79
00:05:02.312 --> 00:05:06.219
that's what we're trying to do
in this exercise is avoid that.

80
00:05:06.219 --> 00:05:09.400
And so,
we're going to specify an action and

81
00:05:09.400 --> 00:05:15.357
that will point to the route that we're
currently in which is resources customers.

82
00:05:15.357 --> 00:05:18.995
So, we'll say resources/customers.

83
00:05:18.995 --> 00:05:21.647
And this is where things just get so

84
00:05:21.647 --> 00:05:27.421
magical because now I'm looking at
the back end code for my front end code.

85
00:05:27.421 --> 00:05:30.113
Goodbye indirection.

86
00:05:30.113 --> 00:05:33.769
That sounds like a band one direction,
but it's no indirection.

87
00:05:33.769 --> 00:05:36.894
So, this is great.

88
00:05:36.894 --> 00:05:41.148
So, that's what we need to do to make sure
this ends up in the loader is to set it to

89
00:05:41.148 --> 00:05:45.399
again and when you set it to get this will
be serialized as part of the query string

90
00:05:45.399 --> 00:05:46.306
of the request.

91
00:05:46.306 --> 00:05:51.083
So, first thing in our loader we wanna
do is to require the user we don't

92
00:05:51.083 --> 00:05:55.546
want just random people to curl this
URL and get all of our customers

93
00:05:55.546 --> 00:06:00.190
cuz that would be bad if they found
out that company x is our customer.

94
00:06:00.190 --> 00:06:04.054
So, first we'll say,
await require a user and

95
00:06:04.054 --> 00:06:07.929
we'll pass the request
we're gonna get here.

96
00:06:07.929 --> 00:06:14.248
Let's say loaderArgs, and
we'll pass along the request.

97
00:06:14.248 --> 00:06:18.587
So, make sure that we've got
an authenticated user before making

98
00:06:18.587 --> 00:06:19.598
this request.

99
00:06:19.598 --> 00:06:22.811
And now, we're going to perform
the search with search customers.

100
00:06:22.811 --> 00:06:26.488
Now, where do we get this
query that was passed along?

101
00:06:26.488 --> 00:06:30.765
We're gonna get that from
the search params on the request.

102
00:06:30.765 --> 00:06:34.541
So, let's turn this
request URL into a URL.

103
00:06:34.541 --> 00:06:38.515
So, a new URL, and
that's platform API right there.

104
00:06:38.515 --> 00:06:42.704
request dot URL, also platform API.

105
00:06:42.704 --> 00:06:45.466
So, now we've got the URL,
we can get the search params off of that.

106
00:06:45.466 --> 00:06:50.960
So, we'll say search brands
is url.searchParams.

107
00:06:50.960 --> 00:06:56.227
Here actually,
let's just call this our query.getquery.

108
00:06:56.227 --> 00:06:59.000
So, now you've got a query and
this one is interesting.

109
00:06:59.000 --> 00:07:03.236
So, this kind of resembles the API for
form data, right,

110
00:07:03.236 --> 00:07:05.914
where you say dot get but this can only

111
00:07:05.914 --> 00:07:10.851
be a string because you can't put
a file in the query string of a URL.

112
00:07:10.851 --> 00:07:13.713
So, it can only be a string or
it could be null.

113
00:07:13.713 --> 00:07:17.965
To take care of Typescript and just like
check ourselves because it should never

114
00:07:17.965 --> 00:07:21.016
be no because we're never
calling this without a query.

115
00:07:21.016 --> 00:07:25.176
But maybe somebody is gonna
do something silly so

116
00:07:25.176 --> 00:07:30.961
let's just put an invariant in here,
it says type of query string,

117
00:07:30.961 --> 00:07:34.423
and we could say query must be provided.

118
00:07:34.423 --> 00:07:40.924
Alright, so, with that now we can say
search customers with that query.

119
00:07:40.924 --> 00:07:45.904
And here's the matching customers or
we'll just call it customers and

120
00:07:45.904 --> 00:07:49.474
that's gonna be a wait cuz
it is an a sync function.

121
00:07:49.474 --> 00:07:56.614
And now, the last thing is return
a JSON response with the customers and

122
00:07:56.614 --> 00:08:01.731
that JSON response is gonna
come from the same place

123
00:08:01.731 --> 00:08:06.624
our loader actually came from,
Remix run node.

124
00:08:06.624 --> 00:08:11.638
All right, great, I think we should
be set snap there was a problem.

125
00:08:11.638 --> 00:08:17.281
Well, let's figure out
what the problem was then.

126
00:08:17.281 --> 00:08:21.144
So much stuff,
cannot read property reading customers.

127
00:08:21.144 --> 00:08:27.694
All right,
that is my bad data could be undefined.

128
00:08:27.694 --> 00:08:31.937
There we go.
So, now, we say, yeah, wide open spaces.

129
00:08:31.937 --> 00:08:37.617
We select that one, we say here's
my due date, here's the quantity,

130
00:08:37.617 --> 00:08:41.798
we had two add to 5000,
it's Koala paintings.

131
00:08:41.798 --> 00:08:45.487
Create invoice [SOUND] and
remember none of my code is saying

132
00:08:45.487 --> 00:08:49.888
we just created a new invoice, so
let's add that to our array of invoices.

133
00:08:49.888 --> 00:08:53.470
None of that because we
were revalidating for

134
00:08:53.470 --> 00:08:58.945
you automatically just like the way
the web does, so that's great.

135
00:08:58.945 --> 00:09:01.157
And that is creating an invoice,

136
00:09:01.157 --> 00:09:05.590
we've just created a component
that is connected to its back end.

137
00:09:09.216 --> 00:09:10.403
Yeah, I think that's pretty sweet.

138
00:09:12.474 --> 00:09:15.603
What questions do you have
about what we have done here?

139
00:09:15.603 --> 00:09:17.896
There are things that we could do,
I should have mentioned, or

140
00:09:17.896 --> 00:09:20.728
things we could do to make this more type
safe add a bunch of TypeScript stuff.

141
00:09:20.728 --> 00:09:24.046
This is not a TypeScript workshop, so
I'm not gonna bother with all that.

142
00:09:24.046 --> 00:09:28.178
But yeah, just know that's actually why
I ran into that runtime errors because I

143
00:09:28.178 --> 00:09:29.951
haven't made this type safe yet.

144
00:09:29.951 --> 00:09:31.984
So, Peter, yeah.

145
00:09:31.984 --> 00:09:36.000
&gt;&gt; In the loader, you can use the request
but there's also a params key,

146
00:09:36.000 --> 00:09:38.463
could you use that to
get the query params?

147
00:09:38.463 --> 00:09:40.595
&gt;&gt; So, I'm glad that you asked that.

148
00:09:40.595 --> 00:09:44.421
So, these are search params and
these are request params.

149
00:09:44.421 --> 00:09:49.371
The request params that is a Remix
specific thing or react router as well.

150
00:09:49.371 --> 00:09:53.126
And that would apply if I
said dollar customer ID, and

151
00:09:53.126 --> 00:09:56.221
then I could get
the customer ID off of that.

152
00:09:56.221 --> 00:10:00.261
So, that's what those params
are referring to the parameters,

153
00:10:00.261 --> 00:10:04.448
the search params are like actually
here we can witness this with our

154
00:10:04.448 --> 00:10:08.572
very own eyes if I type something
then we're gonna get customers.

155
00:10:08.572 --> 00:10:12.059
And you'll see there's our search
params right there that we added.

156
00:10:12.059 --> 00:10:15.667
Remix is adding another query or
search params there, but

157
00:10:15.667 --> 00:10:18.625
it strips that off before
it hands it off to you.

158
00:10:18.625 --> 00:10:20.350
That's all implementation detail stuff.

159
00:10:20.350 --> 00:10:23.460
But you can see your
search params right there.

160
00:10:23.460 --> 00:10:26.737
And yeah, thanks for the question.

161
00:10:26.737 --> 00:10:29.900
Any other questions?

162
00:10:29.900 --> 00:10:32.619
Yeah,
&gt;&gt; What benefits do you get by putting

163
00:10:32.619 --> 00:10:35.586
the fetcher inside routes
in the first place?

164
00:10:35.586 --> 00:10:40.679
If in general it's a bad idea,
why can't it be just a separate component?

165
00:10:40.679 --> 00:10:45.404
Is it because it needs this fake route for
its back end loader?

166
00:10:45.404 --> 00:10:46.543
&gt;&gt; Great question.

167
00:10:46.543 --> 00:10:49.888
So, to be clear,
this is not a fake route at all.

168
00:10:49.888 --> 00:10:52.359
This is an actual route and
we could take this out.

169
00:10:52.359 --> 00:10:58.515
And you can hit this API as
like an API route specifically.

170
00:10:58.515 --> 00:11:00.553
So, we call this a resource route.

171
00:11:00.553 --> 00:11:06.050
A resource route, is a route that
does not export a default function.

172
00:11:06.050 --> 00:11:07.628
So, no default export.

173
00:11:07.628 --> 00:11:09.869
Now you can hit this like
it's an API endpoint.

174
00:11:09.869 --> 00:11:13.168
So, there's nothing
fake about this loader,

175
00:11:13.168 --> 00:11:18.610
what we're doing the benefit is if I want
to have a component that tucks sorry,

176
00:11:18.610 --> 00:11:21.510
that talks specifically to this loader.

177
00:11:21.510 --> 00:11:25.857
Then typically what I would do is I'd
put it in at components directory or

178
00:11:25.857 --> 00:11:30.065
something and stick it in there and
then I'd have indirection between

179
00:11:30.065 --> 00:11:34.369
the component that cares about the route
and the route that handles it.

180
00:11:34.369 --> 00:11:38.864
Because they're in different places,
but by putting it here,

181
00:11:38.864 --> 00:11:42.455
I is still technically have indirection,
right?

182
00:11:42.455 --> 00:11:47.860
Because if I change the name of this file,
then yeah, I've totally busted this.

183
00:11:47.860 --> 00:11:52.962
But, I mean, you maybe could do
some code gen to like autofill.

184
00:11:52.962 --> 00:11:54.627
That would be kind of interesting, but

185
00:11:54.627 --> 00:11:56.750
that's not something that
was built into Remix.

186
00:11:56.750 --> 00:12:01.827
But the indirection is greatly reduced
because you see exactly the component

187
00:12:01.827 --> 00:12:07.228
that is responsible for talking to this
back end, which just may that's so nice.

188
00:12:07.228 --> 00:12:12.163
So, I do definitely
recommend this pattern,

189
00:12:12.163 --> 00:12:16.978
and that is why I'm
teaching it to you today.

190
00:12:16.978 --> 00:12:21.969
And just to be clear, we could not get the
same behavior if we moved all of the code

191
00:12:21.969 --> 00:12:25.710
in this file to something
outside of the routes directory.

192
00:12:25.710 --> 00:12:31.428
For this loader to be a loader,
it has to be in the routes directory.

193
00:12:31.428 --> 00:12:34.641
&gt;&gt; Would you add debouncing
in this scenario?

194
00:12:34.641 --> 00:12:36.112
&gt;&gt; Great question.
Yeah, so,

195
00:12:36.112 --> 00:12:40.607
it is pretty common practice
to debounce the input so

196
00:12:40.607 --> 00:12:45.419
that you don't search instantly
as the user is typing.

197
00:12:45.419 --> 00:12:48.584
And you can see maybe
why as I type in here,

198
00:12:48.584 --> 00:12:53.575
every single time I type something
I'm making another request.

199
00:12:53.575 --> 00:12:59.096
And normally, I have done that,
I have added debounce.

200
00:12:59.096 --> 00:13:02.157
In this case, I actually think it's fine.

201
00:13:02.157 --> 00:13:03.621
Is there a problem with this?

202
00:13:03.621 --> 00:13:05.957
I don't think so.

203
00:13:05.957 --> 00:13:10.915
Unless your backend can't handle a couple
of requests from a couple of users.

204
00:13:10.915 --> 00:13:12.360
I don't know.

205
00:13:12.360 --> 00:13:17.210
It seems fine, there could be some
infrastructure related limitations

206
00:13:17.210 --> 00:13:20.797
that you've got but for
me this actually seems okay.

207
00:13:20.797 --> 00:13:24.521
I think the reason that I would typically
debounce is because I wasn't confident in

208
00:13:24.521 --> 00:13:26.543
my ability of handling race conditions,
but

209
00:13:26.543 --> 00:13:28.848
Remix handles those of
handling race conditions.

210
00:13:28.848 --> 00:13:31.611
But remix handles those for
me automatically so,

211
00:13:31.611 --> 00:13:33.532
I don't have to think about that.

212
00:13:33.532 --> 00:13:37.400
So yeah, I probably, if I were
building this UI today, I would not

213
00:13:37.400 --> 00:13:42.376
bother adding a debounce, if you wanted to
add a debounce then you absolutely could,

214
00:13:42.376 --> 00:13:44.402
you have your debounce function.

215
00:13:44.402 --> 00:13:48.618
Debounce inside of React code
is kind of surprisingly tricky,

216
00:13:48.618 --> 00:13:51.571
but there are probably NPM packages for
it.

217
00:13:51.571 --> 00:13:55.771
You'd have your debounce function out here
that's responsible for doing the fetcher,

218
00:13:55.771 --> 00:13:57.285
and then you'd call it in here.

219
00:13:57.285 --> 00:13:59.968
And that should work.

220
00:13:59.968 --> 00:14:04.916
I think actually you may be able to create
the debounce function, now you'd have

221
00:14:04.916 --> 00:14:09.789
to put it inside the component so you have
access to the fetcher which is a shame,

222
00:14:09.789 --> 00:14:13.533
made me work but
it's Debounce always complicates things.

223
00:14:13.533 --> 00:14:19.259
It's not gonna be a lot but enough that I
don't see enough of a problem to add it.

224
00:14:19.259 --> 00:14:23.312
And on top of that debounce also
makes your app feel slower.

225
00:14:23.312 --> 00:14:28.109
Because now you're automatically having to
wait two to 300 milliseconds before any

226
00:14:28.109 --> 00:14:29.092
requests go out.

227
00:14:29.092 --> 00:14:31.770
So, this is this pretty fast.

228
00:14:31.770 --> 00:14:37.182
The other thing is we haven't
done anything here with this yet

229
00:14:37.182 --> 00:14:40.929
but you can add headers and cache control,

230
00:14:40.929 --> 00:14:45.218
for a second I forgot what
this header is called.

231
00:14:45.218 --> 00:14:50.763
And max age of 10 or 30.

232
00:14:50.763 --> 00:14:53.649
And so,
as the user is typing I go backspace and

233
00:14:53.649 --> 00:14:57.719
they're making the same request
they're gonna get the same data

234
00:14:57.719 --> 00:15:01.423
they did before and
that's all just stored in the browser.

235
00:15:01.423 --> 00:15:05.054
So, it's user specific and everything.

236
00:15:05.054 --> 00:15:08.409
So, in that case you're hitting your back
end less even though you're making all of

237
00:15:08.409 --> 00:15:09.131
those requests.

238
00:15:09.131 --> 00:15:11.934
So, that might be something worth adding,

239
00:15:11.934 --> 00:15:16.418
I would certainly add that before
I started thinking about debounce.

240
00:15:16.418 --> 00:15:17.471
Yeah.

241
00:15:17.471 --> 00:15:21.585
&gt;&gt; How would you approach this progressive
enhancement without JavaScript?

242
00:15:21.585 --> 00:15:23.157
&gt;&gt; Yeah, okay, good question.

243
00:15:23.157 --> 00:15:25.388
How do you do this with
progressive enhancement?

244
00:15:25.388 --> 00:15:29.485
So yes, there is no way that this
progressively enhances by itself.

245
00:15:29.485 --> 00:15:35.365
Because when you're doing imperative data
fetching, imperative by itself just says

246
00:15:35.365 --> 00:15:40.690
cannot be done without JavaScript,
you got to have clients that JavaScript.

247
00:15:40.690 --> 00:15:46.382
So, if the progressive enhancement
story matters a lot to you and

248
00:15:46.382 --> 00:15:52.294
your app then what you could do is
initially render this as a select.

249
00:15:52.294 --> 00:15:58.213
Or there actually is a built in I think
it's called a dataset input element.

250
00:15:58.213 --> 00:16:00.271
And you could have it be a dataset.

251
00:16:00.271 --> 00:16:03.831
The problem with that is if you
have a really big customer list,

252
00:16:03.831 --> 00:16:08.346
which is typically why you build something
like this search in the first place.

253
00:16:08.346 --> 00:16:13.024
Yeah, that's gonna be
loading too much data, right?

254
00:16:13.024 --> 00:16:19.769
So, in that case, if you really needed the
progressive, I would not bother with this.

255
00:16:19.769 --> 00:16:22.812
Let me just state that clearly,
I would just say,

256
00:16:22.812 --> 00:16:26.593
app only works with JavaScript for
this particular use case.

257
00:16:26.593 --> 00:16:30.860
But if it was important to you, then
you would instead allow people to input

258
00:16:30.860 --> 00:16:35.212
the customer ID, because that's
what's ultimately gonna be submitted.

259
00:16:35.212 --> 00:16:39.770
In fact, when I select wide open spaces,
if we dive into this,

260
00:16:39.770 --> 00:16:44.500
we'll see the input right here,
the value is wide open spaces but

261
00:16:44.500 --> 00:16:48.812
I also render an input right
here with the name customer ID.

262
00:16:48.812 --> 00:16:52.438
So, this is actually that
workaround I was talking about and

263
00:16:52.438 --> 00:16:56.146
the reason downshift is accessible and
it does the web thing.

264
00:16:56.146 --> 00:16:59.341
The problem is that I don't wanna
submit the customer name, but

265
00:16:59.341 --> 00:17:01.126
I wanna display the customer name.

266
00:17:01.126 --> 00:17:05.390
So, that's why I'm doing this little
workaround where I can have a hidden input

267
00:17:05.390 --> 00:17:06.527
for the customer ID.

268
00:17:06.527 --> 00:17:10.099
So, you could just require that
they provide the customer ID and

269
00:17:10.099 --> 00:17:13.208
then you have another page
that has all the customers and

270
00:17:13.208 --> 00:17:15.471
they look it up over there or something.

271
00:17:15.471 --> 00:17:20.010
Okay, so yeah, it's challenging with
some more of these advanced API's but

272
00:17:20.010 --> 00:17:21.194
totally possible.

273
00:17:21.194 --> 00:17:24.179
&gt;&gt; Can I get extra points for
using fetcher dot load?

274
00:17:24.179 --> 00:17:26.127
Or maybe I did something wrong.

275
00:17:26.127 --> 00:17:27.299
&gt;&gt; Yeah, that's a good question.

276
00:17:27.299 --> 00:17:34.863
You can totally use fetcher dot load and
in that case you don't get the second,

277
00:17:34.863 --> 00:17:39.525
how does,
I don't use fetcher dot load very much.

278
00:17:39.525 --> 00:17:43.139
I think it expects the URL here,
let's look at what this says.

279
00:17:43.139 --> 00:17:48.375
Yeah, it expects the h ref and
then you construct the search string,

280
00:17:48.375 --> 00:17:50.641
that works totally fine too.

281
00:17:50.641 --> 00:17:53.737
I just find this to be a little easier.

282
00:17:53.737 --> 00:17:57.932
But yeah, here if we wanted to do it
this way, we'd say url search params,

283
00:17:57.932 --> 00:18:01.264
new url search params or
you could construct it yourself but

284
00:18:01.264 --> 00:18:04.214
then you need to make sure
you escape it and all that.

285
00:18:04.214 --> 00:18:06.584
So, I'm not gonna bother
with that nonsense.

286
00:18:06.584 --> 00:18:10.617
We're gonna say,
put our query thing in here.

287
00:18:10.617 --> 00:18:18.803
And we'll say resources customers and

288
00:18:18.803 --> 00:18:23.273
then search params.

289
00:18:23.273 --> 00:18:26.147
So, that is functionally
equivalent to what we've done.

290
00:18:26.147 --> 00:18:30.390
Extra points, I don't know,
are I don't just give those out, yeah,

291
00:18:30.390 --> 00:18:33.172
totally extra points,
but that should work.

292
00:18:33.172 --> 00:18:34.288
I would just use the submit.

293
00:18:34.288 --> 00:18:35.193
I just think it's easier.

