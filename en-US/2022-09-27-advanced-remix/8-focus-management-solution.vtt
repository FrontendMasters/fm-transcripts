WEBVTT

1
00:00:00.375 --> 00:00:06.445
All righty, so we had somebody really
nice added error messages for us.

2
00:00:06.445 --> 00:00:09.505
And so,
if you take a look at the code here,

3
00:00:09.505 --> 00:00:15.289
we've got our errors being displayed if
somebody submits one of these in error.

4
00:00:15.289 --> 00:00:18.576
So, if you click on that, then it
will say it must be greater than 0,

5
00:00:18.576 --> 00:00:19.905
please enter a valid date.

6
00:00:19.905 --> 00:00:23.954
But combining this with, and
that all works fine, and

7
00:00:23.954 --> 00:00:29.677
in fact even with optimistic UI, if we
do give it something greater than 0 and

8
00:00:29.677 --> 00:00:32.847
all this, everything is still working and

9
00:00:32.847 --> 00:00:38.070
when the revalidation is finished,
we're resetting all properly.

10
00:00:38.070 --> 00:00:42.126
The one thing that we're missing
right now is when we submit,

11
00:00:42.126 --> 00:00:46.338
we will display the error, but
it would be really nice if we focus

12
00:00:46.338 --> 00:00:49.787
the input that has the error so
the user can fix that.

13
00:00:49.787 --> 00:00:52.451
And also,
we are actually resetting the form so

14
00:00:52.451 --> 00:00:55.855
all the other work that they did
that was correct is all gone.

15
00:00:55.855 --> 00:00:59.221
We don't wanna reset the form
if there are errors, and so

16
00:00:59.221 --> 00:01:01.480
that is what we're going to be doing.

17
00:01:01.480 --> 00:01:07.546
So we're gonna have a couple if statements
and this will end up in the else case.

18
00:01:07.546 --> 00:01:10.561
So if there's an error on the amount, so

19
00:01:10.561 --> 00:01:16.342
we've got actually let's bring in
the error as a dependency array element.

20
00:01:16.342 --> 00:01:20.995
We will say error, and
actually it's gonna be errors,

21
00:01:20.995 --> 00:01:25.549
I should have had Dan do that for
me, errors.amount.

22
00:01:25.549 --> 00:01:29.498
And actually,
errors could be undefined as well, so

23
00:01:29.498 --> 00:01:35.487
if there's errors.amount, then we're
going to focus on the amount element.

24
00:01:35.487 --> 00:01:40.423
And I believe the easiest way to do
that is actually to access it through

25
00:01:40.423 --> 00:01:41.436
the form ref.

26
00:01:41.436 --> 00:01:44.623
If you want to you can make a ref for
every input,

27
00:01:44.623 --> 00:01:49.483
but the form ref, actually, we have
it typed as a deposit form element,

28
00:01:49.483 --> 00:01:54.927
which includes the form elements for all
the forms stuff that we've got in here.

29
00:01:54.927 --> 00:01:57.896
So that should make it nice and easy.

30
00:01:57.896 --> 00:02:04.035
So we'll say,
formRef.current.elements.amount.

31
00:02:04.035 --> 00:02:09.143
And if that exists, cuz it's possible
it doesn't, we'll say focus.

32
00:02:09.143 --> 00:02:12.304
So if there's an error for the amount,
then we'll focus on the amount.

33
00:02:12.304 --> 00:02:19.202
Otherwise, if there's an error for
the deposit date,

34
00:02:19.202 --> 00:02:25.671
then we'll do the same oops,
for the deposit date.

35
00:02:27.254 --> 00:02:28.239
Sweet.

36
00:02:28.239 --> 00:02:34.206
And if there is no error,
then we wanna focus,

37
00:02:34.206 --> 00:02:40.021
or then we want to get rid of or
reset the form.

38
00:02:40.021 --> 00:02:43.322
And we also want to focus on the amount,
just so

39
00:02:43.322 --> 00:02:47.056
that they can enter in these
values really quickly.

40
00:02:47.056 --> 00:02:50.302
So we come back over here,
let's not throttle, so

41
00:02:50.302 --> 00:02:52.725
we can load it fast and then throttle.

42
00:02:52.725 --> 00:02:58.223
So then, we say skip the amount,
set our date, and set something there.

43
00:02:58.223 --> 00:03:01.870
This request is going to happen,
revalidation will occur, and

44
00:03:01.870 --> 00:03:05.592
then we focus on the element that
has the error, so that's nice.

45
00:03:05.592 --> 00:03:09.916
We can fill this in, and
we get that process again, and

46
00:03:09.916 --> 00:03:15.372
when revalidation is complete,
then we focus back into the amount.

47
00:03:15.372 --> 00:03:20.304
So the one case where we're thinking,
hey, hold on,

48
00:03:20.304 --> 00:03:26.753
what if the user has actually already
started to fill in the new amount?

49
00:03:26.753 --> 00:03:30.240
So like they're moving
fast within our reset,

50
00:03:30.240 --> 00:03:35.131
then we probably don't wanna reset
the work that they're doing.

51
00:03:35.131 --> 00:03:39.928
So the one case where we actually
wanna do one more check before

52
00:03:39.928 --> 00:03:43.816
we will focus on the amount,
and before we reset.

53
00:03:43.816 --> 00:03:49.469
So this is gonna actually be another
else if, and in this case, we want to

54
00:03:49.469 --> 00:03:55.883
check is the currently focused element the
same as it was when this was submitted.

55
00:03:55.883 --> 00:03:59.223
So is it the created element?

56
00:03:59.223 --> 00:04:04.637
I'm actually gonna need to reference cuz
I feel like I have a better way of doing

57
00:04:04.637 --> 00:04:10.065
this than I'm thinking of right now, and
I wanna make sure I do it the same way.

58
00:04:10.065 --> 00:04:11.623
This invoice ID.

59
00:04:11.623 --> 00:04:14.125
So sorry, I am cheating.

60
00:04:14.125 --> 00:04:15.907
Yeah, intent, that's right.

61
00:04:15.907 --> 00:04:20.226
Okay, So

62
00:04:20.226 --> 00:04:24.645
the forms actually have a, well, so

63
00:04:24.645 --> 00:04:30.776
the submit button on our
form has a name and a value,

64
00:04:30.776 --> 00:04:36.635
and the name of this submit
button is the intent.

65
00:04:36.635 --> 00:04:40.775
So we want to say is the currently
active element the submit button.

66
00:04:40.775 --> 00:04:44.729
If it is, then we're good to reset
because they haven't moved anywhere,

67
00:04:44.729 --> 00:04:47.255
they're still sitting
on that submit button.

68
00:04:47.255 --> 00:04:50.950
If they've moved, and then they
probably are off doing something else,

69
00:04:50.950 --> 00:04:52.809
we do not want to reset this for them.

70
00:04:52.809 --> 00:04:59.593
So we'll say, if the document current
element nope, not current script,

71
00:04:59.593 --> 00:05:05.317
current element, or activeElement,
that's right, is not or

72
00:05:05.317 --> 00:05:10.407
is equal to
the formRef.current.elements.intent.

73
00:05:10.407 --> 00:05:12.958
So if it's that submit button,

74
00:05:12.958 --> 00:05:17.591
then we're good to focus on the amount and
reset the form.

75
00:05:17.591 --> 00:05:20.907
And that is it,
that gives us a nicer user experience for

76
00:05:20.907 --> 00:05:23.600
users who want to be
quick about everything.

77
00:05:23.600 --> 00:05:25.864
Yeah, Mark.

78
00:05:25.864 --> 00:05:30.778
&gt;&gt; When doing optimistic UI, is it
the best user experience to wait until

79
00:05:30.778 --> 00:05:34.380
the response comes back in
order to reset the form?

80
00:05:34.380 --> 00:05:38.596
Won't the user be confused if they
can see a new record posted, but

81
00:05:38.596 --> 00:05:40.788
the form still has the last entry?

82
00:05:40.788 --> 00:05:43.504
Any suggestions how to
deal with this scenario,

83
00:05:43.504 --> 00:05:45.831
maybe the form field should be disabled?

84
00:05:45.831 --> 00:05:48.306
&gt;&gt; Yeah, that's that's a good question.

85
00:05:48.306 --> 00:05:53.804
This is where computer programming turns
into an art, I think, where you have to,

86
00:05:53.804 --> 00:05:58.136
or not the programming aspect,
but the user experience aspect.

87
00:05:58.136 --> 00:06:01.392
Because you have to kind of decide
what are the trade-offs that you want.

88
00:06:01.392 --> 00:06:06.696
You might have noticed in the remix
to do MVC, I did not wait for

89
00:06:06.696 --> 00:06:12.520
the request to be finished before
resetting the field or the input.

90
00:06:12.520 --> 00:06:16.620
I just reset it right away and
just assume everything's going to work.

91
00:06:16.620 --> 00:06:18.579
We could do that ourselves as well.

92
00:06:18.579 --> 00:06:24.572
You could actually use this as a reference
implementation for how to accomplish that.

93
00:06:24.572 --> 00:06:29.513
What's actually happening under
the hood is this input right here is

94
00:06:29.513 --> 00:06:30.967
its own component.

95
00:06:30.967 --> 00:06:35.803
And when I create a new one, I actually
leave that component there as hidden and

96
00:06:35.803 --> 00:06:37.132
make a brand new one.

97
00:06:37.132 --> 00:06:42.425
And so, every single time you submit one,
two, three, we've got three inputs,

98
00:06:42.425 --> 00:06:46.447
two of which are hidden while
those submissions are finished.

99
00:06:46.447 --> 00:06:51.620
And so, if one of them ends up being
an error, then I actually just

100
00:06:51.620 --> 00:06:56.435
bring that field back to be visible,
so I can show the error.

101
00:06:56.435 --> 00:06:59.177
And then that's how you can actually
just work through them all.

102
00:06:59.177 --> 00:07:01.825
So there are actually some
pretty interesting, and

103
00:07:01.825 --> 00:07:04.002
it's not all that complicated actually.

104
00:07:04.002 --> 00:07:07.973
So there are pretty interesting
things that you can do to make sure,

105
00:07:07.973 --> 00:07:12.084
because the biggest challenge is
that if your optimism is misplaced,

106
00:07:12.084 --> 00:07:15.567
you got to bring everything back
to the state at the time that

107
00:07:15.567 --> 00:07:19.487
the user submitted it because
otherwise they lose a bunch of work.

108
00:07:19.487 --> 00:07:22.763
And so by going that route
of let's just hide this and

109
00:07:22.763 --> 00:07:27.311
then we'll bring it back, you can
actually preserve all of that state.

110
00:07:27.311 --> 00:07:29.057
Ends up being quite simple.

111
00:07:29.057 --> 00:07:31.589
So that's the way I implemented it for
this.

112
00:07:31.589 --> 00:07:35.881
If we were to instantly reset this
as soon as the request was made, and

113
00:07:35.881 --> 00:07:40.099
then there's an error, we just have
to hold that state somewhere so

114
00:07:40.099 --> 00:07:45.149
that when the error shows up, we've got
to restore all of their previous stuff.

115
00:07:45.149 --> 00:07:50.024
Which is where optimistic UI
becomes a little bit tricky, and

116
00:07:50.024 --> 00:07:54.429
so there are a couple of tricks
that I show in that example

117
00:07:54.429 --> 00:07:58.012
that you can use to make
that a little easier.

118
00:07:58.012 --> 00:08:02.149
But this is a really,
really great first experience for

119
00:08:02.149 --> 00:08:07.972
an optimistic UI that you could build
that is pretty low effort, high reward.

120
00:08:07.972 --> 00:08:12.083
And then you can layer on top of that
additional levels of complexity to make

121
00:08:12.083 --> 00:08:13.268
that easier, yeah.

122
00:08:13.268 --> 00:08:17.288
&gt;&gt; If you had a really long form where
you wanted to save progress as a user is

123
00:08:17.288 --> 00:08:20.236
filling it out without
submitting it necessarily,

124
00:08:20.236 --> 00:08:21.920
how do you do that right next?

125
00:08:21.920 --> 00:08:23.214
&gt;&gt; Yeah, that's a great question.

126
00:08:23.214 --> 00:08:25.488
So saving progress in a form, or

127
00:08:25.488 --> 00:08:30.800
I actually saw another question somebody
asked in the chat now I remember,

128
00:08:30.800 --> 00:08:34.778
asking about like a multistep forms,
stuff like that.

129
00:08:34.778 --> 00:08:39.166
So it depends kind of on how you want
to say that you could, of course,

130
00:08:39.166 --> 00:08:41.830
save this to local storage if you want to.

131
00:08:41.830 --> 00:08:45.180
Maybe not the most secure thing to do, but

132
00:08:45.180 --> 00:08:49.216
if that is not a concern,
then that's an option.

133
00:08:49.216 --> 00:08:54.147
So in remix, the best way to do this
would probably be to use a cookie because

134
00:08:54.147 --> 00:08:58.238
then you can store the users,
all the users' fields in that.

135
00:08:58.238 --> 00:09:02.434
It can be persisted even if they
close the tab and everything.

136
00:09:02.434 --> 00:09:06.797
It can be secure, so
it's HTTPS only and all that.

137
00:09:06.797 --> 00:09:10.160
And then,
through some of the other exercises,

138
00:09:10.160 --> 00:09:13.114
we'll see doing imperative fetching, so

139
00:09:13.114 --> 00:09:18.459
you could actually just on an interval
save stuff or maybe on blur save stuff.

140
00:09:18.459 --> 00:09:23.433
As far as a wizard, you could also
do that in a cookie, or you can,

141
00:09:23.433 --> 00:09:27.065
of course,
save this in just your local state.

142
00:09:27.065 --> 00:09:30.482
So if you don't care about
if the user closes this,

143
00:09:30.482 --> 00:09:34.852
I don't care to that or anything,
then you could put it in

144
00:09:34.852 --> 00:09:38.441
a context provider of your
own making above the form.

145
00:09:38.441 --> 00:09:43.574
And then as the user blurs the inputs or
changes or whatever, you just

146
00:09:43.574 --> 00:09:49.697
update that and then just delete it when
the user submits the form, potentially.

147
00:09:49.697 --> 00:09:54.499
&gt;&gt; Can you explain
the document.activeElement ===

148
00:09:54.499 --> 00:09:58.451
formRefl.elements.intent a bit again?

149
00:09:58.451 --> 00:10:03.006
&gt;&gt; Yes, so the document, activeElement,
is a read only property of the browser

150
00:10:03.006 --> 00:10:07.157
that will tell you whatever element
currently has focused on the page.

151
00:10:07.157 --> 00:10:11.425
The formRef is referring to our form.

152
00:10:11.425 --> 00:10:14.780
This is the current value of that ref,
which will always be the same, but

153
00:10:14.780 --> 00:10:16.496
that's just the way that refs work.

154
00:10:16.496 --> 00:10:19.792
In the elements' property on that form,

155
00:10:19.792 --> 00:10:25.362
DOM node is all of the elements of
the form that are keyed by their name.

156
00:10:25.362 --> 00:10:30.358
And so
the name of our submit button is intent.

157
00:10:30.358 --> 00:10:32.378
And so
we access the submit button by intent.

158
00:10:32.378 --> 00:10:37.175
So what this statement is saying is if
the document active element is triple, or

159
00:10:37.175 --> 00:10:42.115
what this expression is saying I should
say, the active element is triple equal to

160
00:10:42.115 --> 00:10:46.212
the submit button, that's what
we're trying to establish here.

161
00:10:46.212 --> 00:10:48.547
So if the user is still
on the submit button,

162
00:10:48.547 --> 00:10:50.644
then we can focus the amount and reset.

163
00:10:50.644 --> 00:10:54.357
If they're somewhere else,
then we don't want to delete their work.

164
00:10:54.357 --> 00:10:57.790
And again, this is only one
way to approach this problem.

165
00:10:57.790 --> 00:11:02.826
In my to-do MVC, I reset everything and
just hide stuff and

166
00:11:02.826 --> 00:11:07.978
bring it back if we need to,
if the user needs to fix an error.

167
00:11:07.978 --> 00:11:13.745
And if I were to go a little further
on the optimistic UI experience,

168
00:11:13.745 --> 00:11:20.439
with this, I would probably take that
same approach with this as well, yeah.

169
00:11:20.439 --> 00:11:25.970
&gt;&gt; Are form libraries like React
hooks incompatible then with Remix?

170
00:11:25.970 --> 00:11:28.718
&gt;&gt; If the form library is
compatible with the web,

171
00:11:28.718 --> 00:11:30.993
then it will be compatible with Remix.

172
00:11:30.993 --> 00:11:38.031
Unfortunately, there are a number
of libraries that I will not name.

173
00:11:38.031 --> 00:11:44.683
I will name one,
Ant Design is a very popular library.

174
00:11:44.683 --> 00:11:49.184
I've had trouble with that library for
years because I created a testing

175
00:11:49.184 --> 00:11:54.003
library which focused very heavily on
querying by accessibility and stuff.

176
00:11:54.003 --> 00:11:57.327
And Ant Design is just,
maybe it's better now, but for

177
00:11:57.327 --> 00:12:00.508
a long time I just get a lot
of issues of people saying,

178
00:12:00.508 --> 00:12:04.282
I can't test this because I can't
query the way that you show.

179
00:12:04.282 --> 00:12:07.777
Because they just didn't label
their inputs properly, and

180
00:12:07.777 --> 00:12:09.496
they didn't render inputs.

181
00:12:09.496 --> 00:12:11.777
And so, yeah, that library.

182
00:12:11.777 --> 00:12:16.292
And actually I've seen some people have
trouble with that particular library with

183
00:12:16.292 --> 00:12:18.428
Remix because they don't use the web.

184
00:12:18.428 --> 00:12:23.398
And so you're gonna have trouble with
anything that doesn't use the web, but

185
00:12:23.398 --> 00:12:26.936
I believe that React hook
form does just render inputs,

186
00:12:26.936 --> 00:12:31.701
or at least you are the one who's
rendering, so you can render the inputs.

187
00:12:31.701 --> 00:12:36.066
And even if you're not
the one rendering the inputs,

188
00:12:36.066 --> 00:12:41.110
if you have some way to be notified
of what that state value is,

189
00:12:41.110 --> 00:12:45.475
so like on select or on change or
something like that,

190
00:12:45.475 --> 00:12:50.616
then you can actually work around
that by adding an input hidden

191
00:12:50.616 --> 00:12:56.538
with the name of whatever and
value is {theSelectvalue}, whatever.

192
00:12:56.538 --> 00:13:00.095
So, now you're kinda using their library,
but

193
00:13:00.095 --> 00:13:06.189
then sticking the value into the form, and
so that is literally just a workaround.

194
00:13:06.189 --> 00:13:08.669
That's not what you want to do.

195
00:13:08.669 --> 00:13:11.607
You could also say type it in,
most people do that.

196
00:13:11.607 --> 00:13:15.005
I think React has some optimizations
if you use the hidden prop though.

197
00:13:15.005 --> 00:13:17.963
So something to look into.

198
00:13:17.963 --> 00:13:22.057
But yeah, that would be one way to
work around that, but short answer to

199
00:13:22.057 --> 00:13:26.644
the question is, yes, I believe that
that particular library is compatible.

