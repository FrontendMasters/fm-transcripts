WEBVTT

1
00:00:00.219 --> 00:00:05.542
All right, you're about to get excited,
Kent, because [LAUGH] I love this feature.

2
00:00:05.542 --> 00:00:10.469
It is magic, and I'm gonna do my best
to explain it to you of how it works.

3
00:00:10.469 --> 00:00:14.522
But first, let's implement it so we can
see what the user experience is like.

4
00:00:14.522 --> 00:00:20.410
So I'm gonna open up our
exercise 9 customer ID here.

5
00:00:20.410 --> 00:00:24.315
And the first thing that I'm going
to do is implement this piece,

6
00:00:24.315 --> 00:00:28.718
because it turns out that you actually
can use all these components even if

7
00:00:28.718 --> 00:00:32.924
you're not using the defer API that
we're gonna use here in a second.

8
00:00:32.924 --> 00:00:37.949
So we'll update all of our UI, make sure
that still working as feature parity,

9
00:00:37.949 --> 00:00:40.578
and then we can bring in everything else.

10
00:00:40.578 --> 00:00:47.364
So first of all, I should mention that
this feature requires React 18 streaming.

11
00:00:47.364 --> 00:00:52.138
You cannot use this feature currently
with any other framework or

12
00:00:52.138 --> 00:00:54.230
any other version of React.

13
00:00:54.230 --> 00:00:57.089
And in addition to that,
you have to be streaming.

14
00:00:57.089 --> 00:01:00.387
And this project is already configured for
that.

15
00:01:00.387 --> 00:01:03.543
When this defer API is stable and
actually published,

16
00:01:03.543 --> 00:01:07.246
we will have docs to show you how
to implement this function, but

17
00:01:07.246 --> 00:01:11.721
you basically copy paste this, and not
a lot of changes you need to make here.

18
00:01:11.721 --> 00:01:17.105
The important piece is
renderToPipeableStream with

19
00:01:17.105 --> 00:01:25.249
a remix server, and this will just send
pieces chunks of the data as they come in.

20
00:01:25.249 --> 00:01:27.037
I'm not a streams expert,

21
00:01:27.037 --> 00:01:32.418
there may be a course about streams on
Frontend Masters, I'm not sure actually.

22
00:01:32.418 --> 00:01:34.782
But yeah, definitely, there is.

23
00:01:34.782 --> 00:01:36.518
&gt;&gt; Complete intro to real time.

24
00:01:36.518 --> 00:01:42.726
&gt;&gt; Yes, sweet, so
streams are a thing on Frontend Masters.

25
00:01:42.726 --> 00:01:45.110
Above my paygrade,
I guess is how they say that.

26
00:01:45.110 --> 00:01:49.812
So we have this all configured for
streaming with remix or with React, and so

27
00:01:49.812 --> 00:01:52.247
now we can use these features in remix.

28
00:01:52.247 --> 00:01:56.456
Another important piece here that I should
mention is you wanna make sure that your

29
00:01:56.456 --> 00:02:00.604
host support streaming as well, because
there are a lot of hosts that don't, or

30
00:02:00.604 --> 00:02:02.747
at least some of their offerings don't.

31
00:02:02.747 --> 00:02:08.314
So anything currently that's
built on wraps AWS Lambda,

32
00:02:08.314 --> 00:02:14.569
AWS lambda today in August 2022
does not support streaming.

33
00:02:14.569 --> 00:02:17.433
What they do when you try to stream
is they will buffer it all up and

34
00:02:17.433 --> 00:02:21.043
wait until the connection is closed and
then they will flush it out to the client,

35
00:02:21.043 --> 00:02:22.182
which is basically not.

36
00:02:22.182 --> 00:02:25.381
That's not at all streaming
far as the user's concerned.

37
00:02:25.381 --> 00:02:32.277
So there are popular hosts like
Netlify and Vercel, both wrap AWS.

38
00:02:32.277 --> 00:02:37.355
However, both of those also wrap other
services, Netlify has an offering

39
00:02:37.355 --> 00:02:42.045
that wraps Dino, and Vercel has
an offering that wraps Cloudflare.

40
00:02:42.045 --> 00:02:45.103
And both of those services
do support streaming.

41
00:02:45.103 --> 00:02:51.586
And of course, if you're shipping a Docker
container that has no JS or something or

42
00:02:51.586 --> 00:02:57.621
even been as a runtime, those do support
streaming, and so you can use that.

43
00:02:57.621 --> 00:02:59.615
Just make sure that your
host supports streaming.

44
00:02:59.615 --> 00:03:02.274
If you're unsure, you're gonna ask them,
and they will tell you.

45
00:03:02.274 --> 00:03:05.418
And just make sure that you
understand each other when you do.

46
00:03:05.418 --> 00:03:09.544
Okay, great, so with that established,
we have streaming enabled,

47
00:03:09.544 --> 00:03:11.005
everything is working.

48
00:03:11.005 --> 00:03:14.071
And having that streaming
configured in our Entry server,

49
00:03:14.071 --> 00:03:17.882
doesn't actually start doing anything
all that useful or interesting.

50
00:03:17.882 --> 00:03:21.467
It is technically streaming the HTML.

51
00:03:21.467 --> 00:03:25.576
So it is technically a little different,
but it's basically the same.

52
00:03:25.576 --> 00:03:31.025
We're not taking advantage of any of
those streaming features until right now.

53
00:03:31.025 --> 00:03:34.748
So suspense is a React
component that you can use.

54
00:03:34.748 --> 00:03:40.337
And inside of suspense,
you can put components that can suspend.

55
00:03:40.337 --> 00:03:44.109
And hopefully, you never yourself have to
write a component that suspends cuz it

56
00:03:44.109 --> 00:03:45.562
involves throwing promises.

57
00:03:45.562 --> 00:03:47.483
And who wants to throw promises?

58
00:03:47.483 --> 00:03:49.227
Not me.

59
00:03:49.227 --> 00:03:53.753
So even in courses where I teach
about suspense and how to make

60
00:03:53.753 --> 00:03:59.167
a suspending component, together we
build a suspending abstraction so

61
00:03:59.167 --> 00:04:03.804
that we can do that somewhere else,
cuz it's not a lot of fun.

62
00:04:03.804 --> 00:04:08.870
And this await component is from remix,
and this is the suspending component.

63
00:04:08.870 --> 00:04:13.869
So it is await from remix, and
this accepts a couple of arguments,

64
00:04:13.869 --> 00:04:18.887
and in fact, it also accepts children,
so we'll put that there.

65
00:04:18.887 --> 00:04:24.628
So first of all,
you're gonna need a fallback element.

66
00:04:24.628 --> 00:04:32.357
So this is what to show when the children
of the suspense component are suspending.

67
00:04:32.357 --> 00:04:35.495
So, if we're still waiting for
these children to finish and

68
00:04:35.495 --> 00:04:39.446
resolve their promises, this is what
we should show while we're waiting.

69
00:04:39.446 --> 00:04:44.858
And for that, we have
an InvoiceDetailsFallback that we can use.

70
00:04:44.858 --> 00:04:48.760
That is the fancy pulsing
thing that we have.

71
00:04:48.760 --> 00:04:54.961
And then for our await, and
we're gonna use the resolve prop here.

72
00:04:54.961 --> 00:04:59.396
And this is going to be the promise
that we're going to wait for.

73
00:04:59.396 --> 00:05:03.377
Now, currently, we don't have a promise,
we're still loading everything with JSON.

74
00:05:03.377 --> 00:05:05.068
So we're still waiting for everything.

75
00:05:05.068 --> 00:05:09.632
But as it turns out, you can await
anything in regular JavaScript.

76
00:05:09.632 --> 00:05:13.611
You can say, await hi, and this is hi,

77
00:05:13.611 --> 00:05:19.529
that is type of string right there,
so yeah, at runtime.

78
00:05:19.529 --> 00:05:24.257
So that is totally possible,
something that you can do.

79
00:05:24.257 --> 00:05:26.017
And in the same way, this component,

80
00:05:26.017 --> 00:05:28.497
you can pass it even something
that's not a promise.

81
00:05:28.497 --> 00:05:30.742
And so
that's what we're gonna do right now, and

82
00:05:30.742 --> 00:05:32.623
then we'll turn it into a promise later.

83
00:05:32.623 --> 00:05:36.694
So what we're going to be deferring,
what we're gonna be waiting for

84
00:05:36.694 --> 00:05:38.214
is the customer details.

85
00:05:38.214 --> 00:05:42.198
And then in the case of an error,
we want an errorElement.

86
00:05:42.198 --> 00:05:47.314
Then we're going to have
an ErrorFallback here.

87
00:05:47.314 --> 00:05:54.598
And we'll just say,
Something dun went wrong.

88
00:05:54.598 --> 00:05:55.374
There we go.

89
00:05:55.374 --> 00:05:57.108
ErrorFallback, and

90
00:05:57.108 --> 00:06:02.512
it looks like actually I need to
use the message from a bad message.

91
00:06:02.512 --> 00:06:04.868
Okay, cool.

92
00:06:04.868 --> 00:06:10.234
So now, here is the fun part of await.

93
00:06:10.234 --> 00:06:14.143
If you all thought that render props
were gone, they're back, baby.

94
00:06:14.143 --> 00:06:17.441
And back with a vengeance,
cuz this feature is amazing.

95
00:06:17.441 --> 00:06:21.680
So we're gonna grab all that and
stick it into here.

96
00:06:21.680 --> 00:06:26.627
And the value that we get out
of this is our customerDetails.

97
00:06:26.627 --> 00:06:29.814
So it's the resolved value of
the promise that you provided.

98
00:06:29.814 --> 00:06:33.527
Again, this isn't a promise yet, but
you can still resolve a non-promise.

99
00:06:33.527 --> 00:06:37.093
So that's what this value is going to be,
we've got all of our types and

100
00:06:37.093 --> 00:06:38.469
everything is still nice.

101
00:06:38.469 --> 00:06:42.935
So we're gonna reference
the resolved customerDetails.

102
00:06:42.935 --> 00:06:44.462
And all of this should still work.

103
00:06:44.462 --> 00:06:46.090
This is feature parity,

104
00:06:46.090 --> 00:06:50.513
exactly the same way that it was
before we made all of these changes.

105
00:06:50.513 --> 00:06:54.163
So it's still gonna be slow, we're still
waiting for all those invoices and

106
00:06:54.163 --> 00:06:57.716
everything, and we're still getting
the skeleton and all of that stuff.

107
00:06:57.716 --> 00:07:00.830
Okay, so no changes other than the code.

108
00:07:00.830 --> 00:07:07.484
However, with these changes,
we can now do some really awesome stuff.

109
00:07:07.484 --> 00:07:12.762
So coming back up here, I don't want
to wait for the customerDetails.

110
00:07:12.762 --> 00:07:17.382
So we're going to unconcurrent this stuff
to make it a little easier to see what

111
00:07:17.382 --> 00:07:18.433
the changes are.

112
00:07:18.433 --> 00:07:24.435
So first, I'm going to say,
here's my CustomerInfo = await that.

113
00:07:24.435 --> 00:07:26.871
And then we're gonna
need to spell it right.

114
00:07:26.871 --> 00:07:27.822
Here we go.

115
00:07:27.822 --> 00:07:33.995
And then our customerDetails = await this,
okay?

116
00:07:33.995 --> 00:07:38.058
So this is not what you typically wanna
do, if the two things aren't dependent on

117
00:07:38.058 --> 00:07:41.564
each other, you wanna run them
concurrently with promises.

118
00:07:41.564 --> 00:07:43.951
Wait, or premise.all, but

119
00:07:43.951 --> 00:07:49.018
this will make it a little easier
to see what we're doing here.

120
00:07:49.018 --> 00:07:53.628
So now, what we're gonna do
is I'm actually not going to

121
00:07:53.628 --> 00:07:57.088
return the customerDetails as an object,

122
00:07:57.088 --> 00:08:01.906
I'm going to change this to
the customerDetailsPromise.

123
00:08:01.906 --> 00:08:05.571
And that's what I'm going to
assign to customerDetails,

124
00:08:05.571 --> 00:08:07.558
because I am going to not await.

125
00:08:07.558 --> 00:08:11.558
No more waiting, and
I'm going to send a promise.

126
00:08:11.558 --> 00:08:15.320
Now, JSON is going to serialize
that promise into object object,

127
00:08:15.320 --> 00:08:17.281
the object you think that it does.

128
00:08:17.281 --> 00:08:20.104
So we're going to use defer instead.

129
00:08:20.104 --> 00:08:23.755
And this is gonna come
from remix-run/node.

130
00:08:25.868 --> 00:08:29.923
And we no longer can, or
there's no point in doing this anymore,

131
00:08:29.923 --> 00:08:32.601
where we check, does the promise exists?

132
00:08:32.601 --> 00:08:34.970
Of course, it's going to exist,
TypeScript knows that.

133
00:08:34.970 --> 00:08:37.422
So we get rid of that.

134
00:08:37.422 --> 00:08:40.701
When you defer something,
you give up the opportunity to say, 404,

135
00:08:40.701 --> 00:08:43.391
that doesn't exist anymore,
because we don't know until

136
00:08:43.391 --> 00:08:46.264
after the document's gone,
the status has already been set.

137
00:08:46.264 --> 00:08:49.864
This is just a trade off that you make
when you're streaming in general,

138
00:08:49.864 --> 00:08:51.880
is that you started sending something.

139
00:08:51.880 --> 00:08:55.972
That status is part of that first chunk
that you send to the browser, and so

140
00:08:55.972 --> 00:08:58.157
there's no way to change that status.

141
00:08:58.157 --> 00:09:02.222
There is, however, what is it called?

142
00:09:02.222 --> 00:09:09.668
It's status 103,
if we go see if this pulls it up for us.

143
00:09:09.668 --> 00:09:15.760
No, that's not what I was looking for,
103 Early Hints is what it's called.

144
00:09:15.760 --> 00:09:17.519
This is still, I believe experimental.

145
00:09:17.519 --> 00:09:21.188
Yeah, a bunch of browsers
don't support this yet, but

146
00:09:21.188 --> 00:09:26.107
this allows us to give a preliminary
status code intended to use with header

147
00:09:26.107 --> 00:09:29.793
to allow the user agent to
start preloading resources.

148
00:09:29.793 --> 00:09:33.616
This would actually be quite cool,
because it would allow you to say, hey,

149
00:09:33.616 --> 00:09:35.187
I'm working on your request.

150
00:09:35.187 --> 00:09:39.789
I'm gonna do some stuff, but here's some
JavaScript files, some CSS files, and

151
00:09:39.789 --> 00:09:41.645
I'm pretty sure you gonna need.

152
00:09:41.645 --> 00:09:44.613
So start loading those while I
finish putting together this thing.

153
00:09:44.613 --> 00:09:46.531
It's actually kinda cool.

154
00:09:46.531 --> 00:09:49.496
But again, mostly only useful for
slow backends.

155
00:09:49.496 --> 00:09:52.275
If your backend is fast,
it's not gonna do too much for you.

156
00:09:52.275 --> 00:09:56.874
So anyway, barring that, which is
still experimental, you give up your

157
00:09:56.874 --> 00:10:02.083
opportunity to change the status code
based on something that you're streaming.

158
00:10:02.083 --> 00:10:06.700
All right, so with that, we are done.

159
00:10:06.700 --> 00:10:12.136
So we await this stuff that is fast,
we do not await the stuff that is slow.

160
00:10:12.136 --> 00:10:15.875
We defer and we send a promise instead.

161
00:10:15.875 --> 00:10:21.848
And then on this side of the network,
we get what is a promise.

162
00:10:21.848 --> 00:10:27.526
So this customerDetails is now
a promise which we are passing

163
00:10:27.526 --> 00:10:32.436
to our await component
passing as the result value.

164
00:10:32.436 --> 00:10:36.410
And this is complaining now
because this could actually be no.

165
00:10:36.410 --> 00:10:41.209
See before, we were checking if it was
known, we're gonna throw in an error.

166
00:10:41.209 --> 00:10:45.474
Now, it's like, hey,
it actually could be no.

167
00:10:45.474 --> 00:10:52.807
I'm gonna leave it as a exercise for
the viewer to handle that case.

168
00:10:52.807 --> 00:10:58.117
It's unlikely to happen,
because in this specific case, because of

169
00:10:58.117 --> 00:11:04.239
the customer info exists, customerDetails
are probably going to exist, too.

170
00:11:04.239 --> 00:11:06.676
So in this use case, we're probably
fine to just stick with that.

171
00:11:06.676 --> 00:11:11.253
But you might wanna add something
here that says, no invoice details,

172
00:11:11.253 --> 00:11:12.910
however you wanna do that.

173
00:11:12.910 --> 00:11:16.119
Okay, so we're done, that's it.

174
00:11:16.119 --> 00:11:18.560
Tada, check this out.

175
00:11:18.560 --> 00:11:19.920
Boom, there it is.

176
00:11:19.920 --> 00:11:23.116
Like lightning, kind of like our
client side fetching thing, but

177
00:11:23.116 --> 00:11:25.698
very different from our
client side fetching thing.

178
00:11:25.698 --> 00:11:29.343
For one thing, you can actually
notice right from the start,

179
00:11:29.343 --> 00:11:30.612
look at the fav icon.

180
00:11:30.612 --> 00:11:32.809
It's still spinning.

181
00:11:32.809 --> 00:11:34.379
Our client side fetching didn't have that.

182
00:11:34.379 --> 00:11:37.909
Our client side fetching was spinning,
spinning, and then it stopped, and

183
00:11:37.909 --> 00:11:40.318
then the request to go get
the data went out, right?

184
00:11:40.318 --> 00:11:43.286
In this case,
we are streaming in the response.

