WEBVTT

1
00:00:00.450 --> 00:00:03.579
How would we make
the optimistic updates apply to

2
00:00:03.579 --> 00:00:08.397
other components which depend on the same
state to keep the UI consistent?

3
00:00:08.397 --> 00:00:09.546
&gt;&gt; Yeah, that's a super question.

4
00:00:09.546 --> 00:00:13.676
Actually, I'm super glad that we're
talking about this cuz I kinda forgot

5
00:00:13.676 --> 00:00:15.236
to demonstrate something.

6
00:00:15.236 --> 00:00:20.514
When we talked earlier about useFetchers,
that's the answer is useFetchers.

7
00:00:20.514 --> 00:00:24.321
TodoMVC, anybody remember this thing?

8
00:00:24.321 --> 00:00:30.498
I know Mark does, cuz he just rebuilt one
in vanilla that was 170 lines of code.

9
00:00:30.498 --> 00:00:31.970
&gt;&gt; Yeah, it was 174.

10
00:00:31.970 --> 00:00:36.630
&gt;&gt; Yeah, welcome to the modern Web,
it's amazing what you can do.

11
00:00:36.630 --> 00:00:41.395
I also built a TodoMVC with Remix, and
this one has a bunch of other features,

12
00:00:41.395 --> 00:00:45.225
like login and user,
it saves to a database, all the things.

13
00:00:45.225 --> 00:00:50.191
But I also went way heavy
on the optimistic UI here.

14
00:00:50.191 --> 00:00:55.196
And so if you go to a slow 3G network and
say one, two, three,

15
00:00:55.196 --> 00:01:00.608
error, four, five, and
that error is gonna actually come back.

16
00:01:00.608 --> 00:01:03.825
And it's gonna say, hey, this one
was wrong, you need to fix that one.

17
00:01:03.825 --> 00:01:06.170
I coded it so that you can
include the word error in a todo.

18
00:01:07.370 --> 00:01:10.110
So now I can say, okay,
well, let's fix that.

19
00:01:10.110 --> 00:01:16.584
And then six, seven, error,
eight, error, nine, there it is.

20
00:01:16.584 --> 00:01:21.910
[LAUGH] And so that error,
I submitted two errors this time, right?

21
00:01:21.910 --> 00:01:25.802
So I'm gonna fix this one, and
that other one came back, too,

22
00:01:25.802 --> 00:01:27.350
both of these came back.

23
00:01:27.350 --> 00:01:29.040
And now I can continue with my nine.

24
00:01:29.040 --> 00:01:33.063
It's a really amazing experience,
and this is one route.

25
00:01:33.063 --> 00:01:35.780
Again, it handles user authentication,

26
00:01:35.780 --> 00:01:40.685
actually persisting to a database on
the back end, taking care of network and

27
00:01:40.685 --> 00:01:45.072
all of that stuff in 600 lines of
code with all that optimistic UI.

28
00:01:45.072 --> 00:01:48.516
That's pretty rad, and
I challenge anybody watching to

29
00:01:48.516 --> 00:01:53.121
rebuild this in any other framework and
compare it to what I have with Remix.

30
00:01:53.121 --> 00:01:58.751
You can find this one at remix-todomvc.

31
00:01:58.751 --> 00:02:03.913
And just let me know what you think
about if you have feature parity with

32
00:02:03.913 --> 00:02:09.601
what I have and compare it to what we can
do with Remix with this optimistic UI,

33
00:02:09.601 --> 00:02:11.510
cuz it is amazing.

34
00:02:11.510 --> 00:02:15.191
So for all of this,
I have a couple of things.

35
00:02:15.191 --> 00:02:18.767
Each one of these is its own component,
it has its own useFetchers for

36
00:02:18.767 --> 00:02:21.183
stuff like checking these off and
all of that.

37
00:02:21.183 --> 00:02:24.092
And then this parent here, let me
actually get rid of a couple of these so

38
00:02:24.092 --> 00:02:25.510
we can see the whole thing.

39
00:02:25.510 --> 00:02:31.031
This parent down here, or the parent that
wraps all of those in parent component,

40
00:02:31.031 --> 00:02:33.846
is rendering how many items we have left.

41
00:02:33.846 --> 00:02:38.074
So it needs to be optimistic
about how many items are left or

42
00:02:38.074 --> 00:02:40.070
that are left to do as well.

43
00:02:40.070 --> 00:02:44.003
So when I mark this as complete,
even though it takes a couple seconds,

44
00:02:44.003 --> 00:02:47.754
I still need to say, hey,
how many are available optimistically?

45
00:02:47.754 --> 00:02:50.546
So as I go back and forth between this,

46
00:02:50.546 --> 00:02:56.180
we're going to get that number updating,
and I use useFetchers for that.

47
00:02:56.180 --> 00:03:00.167
So the parent component uses useFetchers,
finds all the fetchers that are on

48
00:03:00.167 --> 00:03:03.070
the page, and
determines what number to show here.

49
00:03:03.070 --> 00:03:08.108
It also does the same thing for
these filters to know which ones to

50
00:03:08.108 --> 00:03:14.097
show optimistically, even if that
isn't actually totally complete yet.

51
00:03:14.097 --> 00:03:19.550
So it's pretty cool what we
can do with optimistic UI.

52
00:03:19.550 --> 00:03:21.794
Yeah?
&gt;&gt; Do the fetchers have names?

53
00:03:21.794 --> 00:03:23.580
How do you identify which one?

54
00:03:23.580 --> 00:03:27.659
&gt;&gt; Yeah, so because each one of those
lines, I guess I should pull that back up.

55
00:03:27.659 --> 00:03:31.197
Because each one of these
lines is its own component,

56
00:03:31.197 --> 00:03:35.533
then they can all just be specific,
or they can name what they do.

57
00:03:35.533 --> 00:03:41.044
So I have a toggle-complete fetcher,
I've got a delete fetcher,

58
00:03:41.044 --> 00:03:44.440
yeah, all of that that you would expect.

59
00:03:46.830 --> 00:03:47.770
So yeah, Mark?

60
00:03:48.770 --> 00:03:52.781
&gt;&gt; The previous question was
around more double submit and

61
00:03:52.781 --> 00:03:57.653
preventing double submit, and
I guess it ties into optimistic UI.

62
00:03:57.653 --> 00:04:01.690
If they click twice quickly,
how do you prevent a double submit-

63
00:04:01.690 --> 00:04:02.951
&gt;&gt; Yeah, great question.

64
00:04:02.951 --> 00:04:06.494
So when I check this checkbox,

65
00:04:06.494 --> 00:04:11.638
that is a submit, as is being described.

66
00:04:11.638 --> 00:04:15.630
Here, let's slow down the network,
and Slow 3G.

67
00:04:15.630 --> 00:04:18.513
I'm going to click it,
starting in an off-positioning,

68
00:04:18.513 --> 00:04:20.137
I'm gonna click it seven times.

69
00:04:20.137 --> 00:04:23.574
So it should be checked when I'm done and
after all revalidation, everything.

70
00:04:23.574 --> 00:04:25.731
One, two, three, four, five, six, seven.

71
00:04:25.731 --> 00:04:30.859
You see in the network tab Remix is
automatically canceling the request.

72
00:04:30.859 --> 00:04:32.779
Because as soon as I submit a new one,
Remix is like,

73
00:04:32.779 --> 00:04:34.350
that request doesn't matter.

74
00:04:34.350 --> 00:04:38.542
There's no way for us to go to the back
end and say, hey, that request, I mean,

75
00:04:38.542 --> 00:04:42.986
the Web platform doesn't offer any way to
say, hey, never mind on that request, so

76
00:04:42.986 --> 00:04:45.000
that would be application code.

77
00:04:45.000 --> 00:04:49.231
But for us, the way that we're building
this, actually, it doesn't matter.

78
00:04:49.231 --> 00:04:55.387
Because when we do this submission
Payload here, we actually just send,

79
00:04:55.387 --> 00:05:00.669
what is the state that I want it
to be rather than saying toggle.

80
00:05:00.669 --> 00:05:04.532
If you sent toggle, then that's your bad.

81
00:05:04.532 --> 00:05:06.440
So set it to what you want it to be,

82
00:05:06.440 --> 00:05:10.670
and that's the best way to build
a nice optimistic UI experience.

83
00:05:10.670 --> 00:05:15.460
So yeah, resubmissions, we actually don't
need these requests to be canceled.

84
00:05:15.460 --> 00:05:20.956
This is just Remix being a little bit nice
to your users and saving them the data.

85
00:05:20.956 --> 00:05:23.861
What you're actually canceling is
the response, not the request,

86
00:05:23.861 --> 00:05:25.160
when you do this.

87
00:05:25.160 --> 00:05:30.660
So yeah, Remix handles that for
you automatically, which is why I guess I

88
00:05:30.660 --> 00:05:36.533
failed to mention it, because you don't
have to think about it, yay, cool?

89
00:05:36.533 --> 00:05:37.033
Yeah?

90
00:05:38.660 --> 00:05:43.010
&gt;&gt; What is the formRef.current.reset
doing exactly?

91
00:05:43.010 --> 00:05:51.003
&gt;&gt; Yeah, so that is resetting all of
the form fields to their default values.

92
00:05:51.003 --> 00:05:54.415
So that's just a Web thing,
nothing to do with Remix,

93
00:05:54.415 --> 00:05:57.468
as lots of things with
Remix are just Web things.

94
00:06:00.036 --> 00:06:03.467
&gt;&gt; So
we would use the fetcher in the parent and

95
00:06:03.467 --> 00:06:07.672
prop-drill the optimistic
state to its children?

96
00:06:07.672 --> 00:06:12.937
&gt;&gt; No, so the fetcher will be colocated
to the component that needs it.

97
00:06:12.937 --> 00:06:17.220
And then the parent can find all
of the fetchers via useFetchers.

98
00:06:17.220 --> 00:06:21.194
So useFetchers will return all of
the fetchers that are active on the page,

99
00:06:21.194 --> 00:06:23.096
even ones that are outside of this.

100
00:06:23.096 --> 00:06:27.361
And I can just briefly show you how

101
00:06:27.361 --> 00:06:32.090
the code works for that in our todos.

102
00:06:32.090 --> 00:06:38.760
Here, useFetchers right here, so I get
all the fetchers that are on the page.

103
00:06:38.760 --> 00:06:43.188
I filter those down to the ones
that we can be optimistic about.

104
00:06:43.188 --> 00:06:46.337
There's a semantic around
that you can take a look at.

105
00:06:46.337 --> 00:06:49.379
And then I filter that down to
the fetchers that are responsible for

106
00:06:49.379 --> 00:06:52.857
creating new todos, the ones that
are responsible for deleting todos, and

107
00:06:52.857 --> 00:06:55.737
the ones that are responsible for
toggling the state of todos,

108
00:06:55.737 --> 00:06:57.672
cuz that's what the parent cares about.

109
00:06:57.672 --> 00:07:01.802
It's like, if there's anything that
I could be optimistic about toggling,

110
00:07:01.802 --> 00:07:04.220
then now I know what number to show.

111
00:07:04.220 --> 00:07:09.914
I know which ones to show and which
active or completed or deleted, all that.

112
00:07:09.914 --> 00:07:10.849
Yeah?

113
00:07:10.849 --> 00:07:15.498
&gt;&gt; Is this using XState or
something similar behind the scenes?

114
00:07:15.498 --> 00:07:20.746
&gt;&gt; So Remix is not, but I believe that
there are elements conceptually of state

115
00:07:20.746 --> 00:07:26.243
machines in the transition manager,
which is responsible for all this stuff.

