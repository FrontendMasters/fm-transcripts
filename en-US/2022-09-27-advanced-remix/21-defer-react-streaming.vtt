WEBVTT

1
00:00:00.129 --> 00:00:02.104
Let's take a look at our network tab.

2
00:00:02.104 --> 00:00:05.839
And by the way also like as we're
navigating between these we're actually

3
00:00:05.839 --> 00:00:09.232
still using the skeleton work that
we did in the previous exercise.

4
00:00:09.232 --> 00:00:13.802
So this is not,
this piece of like the skeleton UI that

5
00:00:13.802 --> 00:00:19.096
actually has nothing to do with
the work we did with deferred.

6
00:00:19.096 --> 00:00:24.196
Deferred will not, or the loader will
not differ on transitions between

7
00:00:24.196 --> 00:00:29.890
the sibling routes like this, it only
happens on the initial load of that route.

8
00:00:29.890 --> 00:00:32.603
That's important, little note, and so

9
00:00:32.603 --> 00:00:36.101
we're going to keep our
existing work on pending UI.

10
00:00:36.101 --> 00:00:41.477
Okay, so let's take a look at
the network tab when we load this, yeah.

11
00:00:41.477 --> 00:00:47.621
So again the defer is only about
the initial load of the route, that's it.

12
00:00:47.621 --> 00:00:51.079
And if you're transitioning from one
completely different route to this route,

13
00:00:51.079 --> 00:00:52.240
then yes defer will apply.

14
00:00:52.240 --> 00:00:58.299
If you're loading the page, defer will
apply, in other cases it does not, okay?

15
00:00:58.299 --> 00:01:03.410
So we load the page, we have this document
requests and now the document request

16
00:01:03.410 --> 00:01:08.288
is really long, and you're like no
my document request is long, but no,

17
00:01:08.288 --> 00:01:13.043
the document request is just open,
and it's sending the data over time.

18
00:01:13.043 --> 00:01:18.156
Unfortunately, I checked and
the view source actually,

19
00:01:18.156 --> 00:01:21.818
here, let's see if we can do it this way.

20
00:01:21.818 --> 00:01:23.267
View source will sit around, and

21
00:01:23.267 --> 00:01:26.228
it doesn't show us the stuff that
is being streamed in our weights.

22
00:01:26.228 --> 00:01:29.352
It buffers everything before it
actually shows us all the stuff.

23
00:01:29.352 --> 00:01:33.038
But this is actually interesting
to look at what is happening

24
00:01:33.038 --> 00:01:34.639
when it's all finished.

25
00:01:34.639 --> 00:01:38.932
So if we look at the source of this thing,
and let's make sure I'm on here,

26
00:01:38.932 --> 00:01:42.973
let's do a view source of that just
to make sure we're on the same one.

27
00:01:42.973 --> 00:01:45.594
So, we have invoice 2000.

28
00:01:45.594 --> 00:01:50.334
So if we look for 2000 in this document,
nope, that bad example.

29
00:01:50.334 --> 00:01:52.969
Let's like get 10002.

30
00:01:52.969 --> 00:01:55.817
10002, there we go.

31
00:01:55.817 --> 00:02:00.907
Now where it shows up in the HTML or
in the DOM when we're all done, should

32
00:02:00.907 --> 00:02:06.428
be like somewhere in the middle between
the body open body, and closing body.

33
00:02:06.428 --> 00:02:09.767
Well, let's look for the closing body,
that's gonna be right here.

34
00:02:09.767 --> 00:02:14.007
There's the close to HTML,
if we look for that 10,000,

35
00:02:14.007 --> 00:02:16.167
that is after the closing HTML.

36
00:02:16.167 --> 00:02:17.574
That streaming folks,

37
00:02:17.574 --> 00:02:22.300
we sent everything, we sent everything
between the opening and closing HTML.

38
00:02:22.300 --> 00:02:25.464
And then the server is still working,
and the browser's like, I'm just

39
00:02:25.464 --> 00:02:28.898
gonna hang on to this request because you
told me you're sending me more stuff.

40
00:02:28.898 --> 00:02:30.171
So I'm just gonna hang on.

41
00:02:30.171 --> 00:02:34.842
And so, this is this piece is actually
react streaming this is not a remix

42
00:02:34.842 --> 00:02:37.537
thing this is how react streaming works.

43
00:02:37.537 --> 00:02:43.795
Is they just you leave that request
open or that that connection open and

44
00:02:43.795 --> 00:02:48.091
then when React is ready to go,
yeah there we go.

45
00:02:48.091 --> 00:02:53.299
When React is ready to go,
it sends the rest of the resolved UI and

46
00:02:53.299 --> 00:02:59.285
data along to all along for the ride,
and that part is the remix part that.

47
00:02:59.285 --> 00:03:03.323
Remix decides, okay, now that this is
ready here's the UI that I need to send in

48
00:03:03.323 --> 00:03:06.965
it says here react here's the UI you
need to send and react sends it off.

49
00:03:06.965 --> 00:03:09.303
If we dive in a little bit deeper here,

50
00:03:09.303 --> 00:03:13.187
you'll see a div after the closing
HTML that has a hidden prop.

51
00:03:13.187 --> 00:03:17.176
So UI doesn't see it, and
then we see the table.

52
00:03:17.176 --> 00:03:20.938
That's the UI that was our result value.

53
00:03:20.938 --> 00:03:22.942
This is what we render
when we're all done.

54
00:03:22.942 --> 00:03:27.267
And this is gonna have all of the UI for
this.

55
00:03:27.267 --> 00:03:29.071
There's our 10,002.

56
00:03:29.071 --> 00:03:32.401
And then after that, we have a script tag.

57
00:03:32.401 --> 00:03:37.605
And this script tag is responsible for
taking the placeholder that we had

58
00:03:37.605 --> 00:03:43.585
before our loading state and swapping it
with this content that it was streamed in.

59
00:03:43.585 --> 00:03:47.240
It's magic, it is so cool,
so cool how this works, so

60
00:03:47.240 --> 00:03:52.491
it's got this idea of s0, and if we
look for s0, that's in the JavaScript.

61
00:03:52.491 --> 00:03:57.570
It says hey let me find it find that b0,
whereas that up here,

62
00:03:57.570 --> 00:04:01.485
and we're going to swap
that b0 with the rs0.

63
00:04:03.190 --> 00:04:09.513
[LAUGH] Who comes up with this stuff,
so cool, just think that is so rad.

64
00:04:09.513 --> 00:04:12.809
And so then in addition remix and
remix is responsible for

65
00:04:12.809 --> 00:04:15.555
rendering those places where they're at,
but

66
00:04:15.555 --> 00:04:19.964
React is the one that actually creates
that script tag that does all of that.

67
00:04:19.964 --> 00:04:25.256
But remix also renders this script tag
to put all of the data that we just

68
00:04:25.256 --> 00:04:30.202
streamed in into the React context
that remix is managing for us.

69
00:04:30.202 --> 00:04:34.104
So when you call user loader data again,
it gets that result value and

70
00:04:34.104 --> 00:04:37.153
that goes in through the awaited and
did everything.

71
00:04:37.153 --> 00:04:39.736
So that's why in here we
see our invoice details and

72
00:04:39.736 --> 00:04:43.955
boom there's our total amount and thank
you, JavaScript, for being such a jerk.

73
00:04:43.955 --> 00:04:48.777
[LAUGH] Don't build finance
websites in JavaScript,

74
00:04:48.777 --> 00:04:51.997
I guess or something I don't know.

75
00:04:51.997 --> 00:04:55.986
[LAUGH] Yeah, or we should do what is,

76
00:04:55.986 --> 00:05:00.380
what a big number, what is that called?

77
00:05:00.380 --> 00:05:01.404
&gt;&gt; Big end again.

78
00:05:01.404 --> 00:05:01.945
&gt;&gt; Yeah, big end.

79
00:05:01.945 --> 00:05:02.932
Yeah.
[COUGH] Actually,

80
00:05:02.932 --> 00:05:05.845
I think that's how it's stored in the
database, and I'm converting it to number,

81
00:05:05.845 --> 00:05:06.430
so it's my bad.

82
00:05:06.430 --> 00:05:08.549
[LAUGH] My goodness.

83
00:05:08.549 --> 00:05:09.298
That's hilarious.

84
00:05:09.298 --> 00:05:12.931
So, anyway, that is how all that works.

85
00:05:12.931 --> 00:05:17.225
It just boggles my mind and on top of
this, it's a little bit easier, or

86
00:05:17.225 --> 00:05:21.890
it's kind of interesting to see this
if we're looking at the data requests.

87
00:05:21.890 --> 00:05:24.287
So when we're,
when we're doing a full page load,

88
00:05:24.287 --> 00:05:26.962
this is all what's happening
with the document request.

89
00:05:26.962 --> 00:05:30.669
But if we transition from one
completely separate route to this new

90
00:05:30.669 --> 00:05:35.168
route that has a deferred, then we can see
the date of the request that happens and

91
00:05:35.168 --> 00:05:36.644
that one must be that one.

92
00:05:36.644 --> 00:05:40.459
And we preview and we have some info.

93
00:05:40.459 --> 00:05:46.252
It would be easier actually, if I just
take, what the devil, will take this.

94
00:05:46.252 --> 00:05:46.961
Copy that.

95
00:05:46.961 --> 00:05:48.157
Paste it there, watch.

96
00:05:50.485 --> 00:05:54.238
And that's streaming right there.

97
00:05:54.238 --> 00:05:59.771
So it streamed in my loader
data that I was not deferring.

98
00:05:59.771 --> 00:06:02.357
So there's my customer info,
I awaited that and

99
00:06:02.357 --> 00:06:04.260
that's why it was here right away.

100
00:06:04.260 --> 00:06:06.970
The customer details,
whoever I gave it a promise.

101
00:06:06.970 --> 00:06:10.752
And so,
it sent me just this identifier for

102
00:06:10.752 --> 00:06:14.862
the promise for
the client side remix dinner.

103
00:06:14.862 --> 00:06:18.380
Okay, so this customer details,
I'm gonna make a promise for that, and

104
00:06:18.380 --> 00:06:21.302
I'm going to resolve when the rest
of this gets streamed in.

105
00:06:21.302 --> 00:06:27.915
In fact, even the content type, for the
response header, is a text remix deferred.

106
00:06:27.915 --> 00:06:31.860
So, this is not application JSON anymore,
because we're streaming in, and

107
00:06:31.860 --> 00:06:36.164
you'll notice I've got a plugins, or an
extension installed, that parses JSON for

108
00:06:36.164 --> 00:06:38.885
me, and it thought that this
was supposed to be JSON.

109
00:06:38.885 --> 00:06:43.171
It's not,
it just kind of resembles that JSON.

110
00:06:43.171 --> 00:06:46.871
This actually sort of resembles server
sent events, the way that that works.

111
00:06:46.871 --> 00:06:50.840
So, we have this new line,
and then data colon, and

112
00:06:50.840 --> 00:06:54.101
then, the data for the customer details.

113
00:06:54.101 --> 00:06:56.535
So, those two things are the same.

114
00:06:56.535 --> 00:06:59.609
So you can defer a bunch of things,
you'll get deferred promise, and

115
00:06:59.609 --> 00:07:03.375
I should probably mention that I'm showing
you some of the implementation details.

116
00:07:03.375 --> 00:07:05.396
These are absolutely possible to change.

117
00:07:05.396 --> 00:07:07.903
You should not rely on
the implementation details, but

118
00:07:07.903 --> 00:07:11.380
I think it helps you understand how to
use this if you understand how it works.

119
00:07:11.380 --> 00:07:13.675
So that's why I'm explaining all this.

120
00:07:13.675 --> 00:07:19.665
So Remix will grab this piece, parse it as
JSON, and hand to those customer details,

121
00:07:19.665 --> 00:07:24.342
resolve the promise that our client
is waiting on with this value.

122
00:07:26.888 --> 00:07:31.480
And it's freaking magic,
because it means now,

123
00:07:31.480 --> 00:07:34.662
watch this, I can prefetch this.

124
00:07:34.662 --> 00:07:39.447
I hover over that, and
I'm It's being deferred, and boom.

125
00:07:39.447 --> 00:07:42.005
Tried to do that with your
client side data fetching.

126
00:07:42.005 --> 00:07:45.640
[SOUND] Yeah, good luck.

127
00:07:45.640 --> 00:07:47.015
You have to wire that manually.

128
00:07:47.015 --> 00:07:50.304
It's possible, totally possible, but
you have to wire it all up manually.

129
00:07:50.304 --> 00:07:55.018
I'm controlling all of this
with just this defer thing.

130
00:07:55.018 --> 00:07:58.521
And watch this,
what if I decide you know what?

131
00:07:58.521 --> 00:08:03.425
Sometimes or like, maybe it's actually
better to make the user wait,

132
00:08:03.425 --> 00:08:04.497
I don't know.

133
00:08:04.497 --> 00:08:06.782
How about we do an AB bucket test?

134
00:08:06.782 --> 00:08:12.563
So I've got this little will
make a little function is or

135
00:08:12.563 --> 00:08:15.644
yeah, should defer, okay?

136
00:08:15.644 --> 00:08:19.635
And then, we'll use some
environment variable or whatever,

137
00:08:19.635 --> 00:08:24.320
you all do the feature flags and
bucket testing like AB testing and stuff?

138
00:08:24.320 --> 00:08:28.134
So we'll just say, for
the purposes of what we're doing,

139
00:08:28.134 --> 00:08:32.328
we're in the bucket that says,
yeah, you should defer that, or

140
00:08:32.328 --> 00:08:37.016
let's say we're in the bucket that
says no, you should not defer this.

141
00:08:37.016 --> 00:08:38.336
So false.

142
00:08:38.336 --> 00:08:41.714
[LAUGH] So now,

143
00:08:41.714 --> 00:08:47.629
I say here should defer.

144
00:08:47.629 --> 00:08:50.084
If we should defer, then we'll defer that.

145
00:08:50.084 --> 00:08:55.327
Otherwise, we'll await that
customer details promise.

146
00:08:55.327 --> 00:09:00.883
I just did AB testing of whether I
should fetch it at like show that.

147
00:09:00.883 --> 00:09:06.553
So what we're doing here we've
got a lever content layout shift,

148
00:09:06.553 --> 00:09:13.653
time to first byte, which do I care about,
do I not want any content layout shifts.

149
00:09:13.653 --> 00:09:17.223
No content layout shift, and I'm not going
to defer, I'm gonna wait for this thing.

150
00:09:17.223 --> 00:09:19.029
So I don't get content layout shift.

151
00:09:19.029 --> 00:09:21.045
Do I want fast time to first byte?

152
00:09:21.045 --> 00:09:22.276
Okay, that's fine.

153
00:09:22.276 --> 00:09:27.509
I will defer, and I'll pay with
content layout shift, and that's it.

154
00:09:27.509 --> 00:09:29.018
And you can split this
up however you want.

155
00:09:29.018 --> 00:09:31.950
You're like, well, one part of the data
is slow, the rest of it's fast.

156
00:09:31.950 --> 00:09:33.505
That's exactly what I did here.

157
00:09:33.505 --> 00:09:36.675
I said the customer info that's fast,
customer details, that's slow.

158
00:09:36.675 --> 00:09:41.395
So I'm gonna defer that but not,
and it works like it totally does.

159
00:09:41.395 --> 00:09:45.723
So we're in the bucket that says no, we're
not we're gonna wait for everything and so

160
00:09:45.723 --> 00:09:49.898
yeah, it's gonna take a while but there's
no content layout shift, that's it.

161
00:09:49.898 --> 00:09:53.330
Literally, we basically
took the await keyword And

162
00:09:53.330 --> 00:09:55.436
we moved it into our component.

163
00:09:55.436 --> 00:09:58.883
That's all the code changes necessary for
this.

164
00:09:58.883 --> 00:10:00.838
That's pretty rad.

165
00:10:00.838 --> 00:10:05.556
What if you happen to know that one
customer getting their invoice details is

166
00:10:05.556 --> 00:10:06.451
really fast.

167
00:10:06.451 --> 00:10:11.543
So let's say Santa Monica is superfast,

168
00:10:11.543 --> 00:10:19.116
so we can say if customer
info.info.email is Santa Monica.

169
00:10:19.116 --> 00:10:25.704
Here will say should or
defer it, should defer,

170
00:10:25.704 --> 00:10:30.212
or the customer info is not our N.

171
00:10:30.212 --> 00:10:36.080
Let's say N, and it's not sent to Monaco,

172
00:10:36.080 --> 00:10:39.736
so, if we want to defer,.

173
00:10:39.736 --> 00:10:43.221
If we should defer because
we're in a bucket, or

174
00:10:43.221 --> 00:10:46.196
we also know that it's not Santa Monica.

175
00:10:46.196 --> 00:10:52.650
So like we can decide based on other data
whether or not we should defer this.

176
00:10:52.650 --> 00:10:56.245
I happen to know that that customer's
data is like really fast, so

177
00:10:56.245 --> 00:11:00.482
I won't even bother no flash a loading
state let's just wait no content layout

178
00:11:00.482 --> 00:11:01.910
shift at runtime people.

179
00:11:05.541 --> 00:11:06.570
I can't.

180
00:11:11.248 --> 00:11:16.532
I've never seen anything quite like this,
only possible because of what

181
00:11:16.532 --> 00:11:21.741
React has done with streaming and
what Remix is doing with that feature.

182
00:11:21.741 --> 00:11:26.856
It took you like all of five to 10 minutes
to never have heard of this before and

183
00:11:26.856 --> 00:11:27.875
implement it.

184
00:11:30.464 --> 00:11:32.489
What?

185
00:11:32.489 --> 00:11:34.592
[LAUGH] Yeah.

186
00:11:34.592 --> 00:11:39.297
This is one of those things like,
yeah, I could do that in all the way I

187
00:11:39.297 --> 00:11:43.774
used to do things, I could work
around those problems whatever.

188
00:11:43.774 --> 00:11:48.545
This is something no, you could not
do this before this is an enabling

189
00:11:48.545 --> 00:11:54.075
technology that you could not do before
that's I get excited about that stuff.

190
00:11:54.075 --> 00:11:59.939
Okay, [SOUND] so that is it.

191
00:11:59.939 --> 00:12:01.370
I think that's everything I have to share.

192
00:12:03.618 --> 00:12:04.731
Any questions?

193
00:12:07.005 --> 00:12:07.546
Yeah.

194
00:12:07.546 --> 00:12:11.146
&gt;&gt; Can you nest suspense and awaits?

195
00:12:11.146 --> 00:12:13.254
&gt;&gt; Yes, you can.

196
00:12:13.254 --> 00:12:18.047
And the cool thing is that, so we talked
about React server components and

197
00:12:18.047 --> 00:12:22.299
the work that the React team is doing and
suspense in general, and

198
00:12:22.299 --> 00:12:24.334
it's really exciting stuff.

199
00:12:24.334 --> 00:12:28.686
The challenge with that is that all
they do our handle the fallback when

200
00:12:28.686 --> 00:12:32.540
something is wait, we're waiting for
something to happen.

201
00:12:32.540 --> 00:12:36.865
In that world, you can very
easily end up with stairsteps,

202
00:12:36.865 --> 00:12:41.634
if you're triggering the fetch
when the component is rendered.

203
00:12:41.634 --> 00:12:45.351
So you have one suspense boundary, and
then here's the component that like,

204
00:12:45.351 --> 00:12:47.283
okay, we're gonna trigger and throw.

205
00:12:47.283 --> 00:12:49.494
And now, we're waiting for
that one, and then that's done.

206
00:12:49.494 --> 00:12:51.151
And now we're gonna go down to this one.

207
00:12:51.151 --> 00:12:52.342
That's gonna trigger another one.

208
00:12:52.342 --> 00:12:56.218
So now, it's just a stair step waterfall,
not a good user experience.

209
00:12:56.218 --> 00:12:56.917
It's really bad.

210
00:12:56.917 --> 00:13:00.716
So what you have to do is you have to know
all of the things that are gonna suspend,

211
00:13:00.716 --> 00:13:04.178
and you trigger them all at the same
time that's really difficult to do,

212
00:13:04.178 --> 00:13:05.626
unless you're using remix.

213
00:13:05.626 --> 00:13:08.170
Because remix does it for
you because it's all in your loader,

214
00:13:08.170 --> 00:13:10.478
it's like here's all the data
that this routing needs.

215
00:13:10.478 --> 00:13:13.989
So, yes, you totally can.

216
00:13:13.989 --> 00:13:21.592
I can't think of any use case on the top
of my head where I'd want to do but no.

217
00:13:21.592 --> 00:13:26.492
Yeah, I could see situations like,
let's say that, you've got

218
00:13:26.492 --> 00:13:31.567
a couple of elements in here where you
want to defer a couple of them and

219
00:13:31.567 --> 00:13:36.406
so you could render the parents
with the suspense boundary here.

220
00:13:36.406 --> 00:13:39.368
I'd probably more likely see
these as sibling things.

221
00:13:39.368 --> 00:13:43.241
But then there's also the suspense
list component that can, like,

222
00:13:43.241 --> 00:13:46.177
help you make sure that they
load in the right order,

223
00:13:46.177 --> 00:13:50.414
even if they load out of order,
that they're rendered in the right order.

224
00:13:50.414 --> 00:13:53.368
But yeah, so you can have a couple of
these things that are deferred and

225
00:13:53.368 --> 00:13:54.333
have them all nested.

226
00:13:54.333 --> 00:13:58.403
And what's cool about that is they're
all kicked off ahead of time.

227
00:13:58.403 --> 00:14:01.962
So you're not gonna be
running into a stairstep,

228
00:14:01.962 --> 00:14:04.683
they're all running concurrently.

229
00:14:04.683 --> 00:14:06.357
So does that answer your question?

230
00:14:06.357 --> 00:14:07.551
Okay, cool.

231
00:14:07.551 --> 00:14:09.277
Any other questions?

232
00:14:09.277 --> 00:14:15.110
&gt;&gt; What happens if you have an effect that
changes something in the deferred context?

233
00:14:15.110 --> 00:14:21.382
&gt;&gt; What happens if you have an effect
that changes the different context.

234
00:14:21.382 --> 00:14:25.091
I'm not sure I understand, I'm guessing
by effects they mean a use effect,

235
00:14:25.091 --> 00:14:26.186
use effect callback.

236
00:14:26.186 --> 00:14:27.049
&gt;&gt; Yeah.

237
00:14:27.049 --> 00:14:27.748
&gt;&gt; Okay.

238
00:14:27.748 --> 00:14:33.333
So when would it use effects change,
the different context?

239
00:14:33.333 --> 00:14:35.285
You don't really have control over that.

240
00:14:35.285 --> 00:14:38.561
So I can't think of a reason
why you'd want to, so

241
00:14:38.561 --> 00:14:41.297
I'm not sure I understand the question.

242
00:14:41.297 --> 00:14:45.241
&gt;&gt; If you can provide additional context,

243
00:14:45.241 --> 00:14:49.189
I don't think that should be possible.

244
00:14:49.189 --> 00:14:53.299
&gt;&gt; I do feel like I have to
mention that in chat there's a lot

245
00:14:53.299 --> 00:14:56.454
of like I'm in awe like crap, wow.

246
00:14:56.454 --> 00:15:00.208
&gt;&gt; That's, Brad, great use case, etc.

247
00:15:00.208 --> 00:15:00.836
&gt;&gt; Yeah.

248
00:15:00.836 --> 00:15:02.379
That's great.

249
00:15:02.379 --> 00:15:06.253
I am not excited by myself, cool.

