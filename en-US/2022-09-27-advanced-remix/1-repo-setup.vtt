WEBVTT

1
00:00:00.147 --> 00:00:02.520
So that's what we're
gonna be covering today.

2
00:00:02.520 --> 00:00:07.885
And let's talk about the logistics
of how this workshop operates.

3
00:00:07.885 --> 00:00:14.032
So hopefully, you have a repo
setup locally on your machine.

4
00:00:14.032 --> 00:00:19.327
You'll notice we have three directories
that have different apps in them.

5
00:00:19.327 --> 00:00:24.155
So the example directory will reference
this in one of the exercises, so

6
00:00:24.155 --> 00:00:26.619
don't worry about that one for now.

7
00:00:26.619 --> 00:00:30.719
The exercise directory was where you're
going to be spending most of your time,

8
00:00:30.719 --> 00:00:34.837
and the final directory is where the
finished version of the exercises resides.

9
00:00:34.837 --> 00:00:39.994
And in the exercise directory each
one of these is a full remix app and

10
00:00:39.994 --> 00:00:43.884
so the app that we're using
is actually the same for

11
00:00:43.884 --> 00:00:46.888
all of the these different remix apps.

12
00:00:46.888 --> 00:00:50.026
And for each exercise,
we actually remove a feature and

13
00:00:50.026 --> 00:00:51.638
your job is to add it back in.

14
00:00:51.638 --> 00:00:57.364
And so, we're going to explore this and
your instructions will be in the README

15
00:00:57.364 --> 00:01:03.015
file where we have some background
information for you to read and reference.

16
00:01:03.015 --> 00:01:07.542
And then, some information on
the exercises specifics of what you're

17
00:01:07.542 --> 00:01:11.097
supposed to do,
what your job is to accomplish in here.

18
00:01:11.097 --> 00:01:16.068
And then, we have the files that you're
gonna be working in and inside of each

19
00:01:16.068 --> 00:01:20.517
of those files, for example,
the app, the double underscore app.

20
00:01:20.517 --> 00:01:24.981
We didn't actually talk about this
in the fundamentals' workshop, but

21
00:01:24.981 --> 00:01:27.575
this is the convention in the file system.

22
00:01:27.575 --> 00:01:32.761
So I want to have a special layout for all
of the components under this directory.

23
00:01:32.761 --> 00:01:36.966
So I wanna have a parent layout that
has like my form and this nav and

24
00:01:36.966 --> 00:01:41.345
everything, but I don't want
a segment in the URL for that, okay?

25
00:01:41.345 --> 00:01:42.485
I don't want that.

26
00:01:42.485 --> 00:01:45.910
I don't want a double
underscore app slash anywhere,

27
00:01:45.910 --> 00:01:48.004
I just wanted this to be @ slash.

28
00:01:48.004 --> 00:01:52.844
And so that's that's what that convention
is all about, if we go into invoices,

29
00:01:52.844 --> 00:01:53.624
invoice ID.

30
00:01:53.624 --> 00:01:58.461
And then, you can scroll down, and
you'll find Kody, the Koala, who will give

31
00:01:58.461 --> 00:02:03.102
you the instructions on where you're
supposed to be making changes to code.

32
00:02:03.102 --> 00:02:08.441
For some of these exercises, there's
actually not a lot of changes to be made,

33
00:02:08.441 --> 00:02:13.542
but most of your time should be spent
experimenting in the browser and seeing

34
00:02:13.542 --> 00:02:19.304
the difference in what changes happen when
you make the changes that you're making.

35
00:02:19.304 --> 00:02:21.994
And then, we have this elaboration and
feedback at the bottom here.

36
00:02:21.994 --> 00:02:25.064
You can submit feedback to me
on the exercise specifically.

37
00:02:25.064 --> 00:02:28.201
And what's more important is that
you do this elaboration piece and

38
00:02:28.201 --> 00:02:32.120
whether you elaborate on what you learned,
like you just write it in your own words.

39
00:02:32.120 --> 00:02:35.008
Whether you elaborate on what
you learned in this form or

40
00:02:35.008 --> 00:02:39.310
in the note section at the top of each of
these READMEs, it doesn't matter to me, or

41
00:02:39.310 --> 00:02:41.660
you could do it in your
own note-taking app.

42
00:02:41.660 --> 00:02:46.414
The important thing is that, for
your retention, you need to be able to

43
00:02:46.414 --> 00:02:51.642
rewrite or just kind of explain in your
own words, what it is that you learned,

44
00:02:51.642 --> 00:02:55.946
and that process is what solidifies
your learning in your head.

45
00:02:55.946 --> 00:02:59.663
The other thing that I'll just mention
is that my approach to teaching

46
00:02:59.663 --> 00:03:01.179
has changed over the years.

47
00:03:01.179 --> 00:03:06.069
I used to just say okay follow
along with me, turns out because,

48
00:03:06.069 --> 00:03:09.705
I have the curse of knowledge and
I do this a lot.

49
00:03:09.705 --> 00:03:12.272
I'm really fast, and
it was hard for people to keep up.

50
00:03:12.272 --> 00:03:15.602
So, then I went to okay,
let me do it, and now you do it.

51
00:03:15.602 --> 00:03:17.746
And that did not help with retention.

52
00:03:17.746 --> 00:03:21.234
I even said I'll do a similar example,
and you'll do a different,

53
00:03:21.234 --> 00:03:23.265
one still did not help with retention.

54
00:03:23.265 --> 00:03:27.206
So, what helps with retention is for
me to throw you into the ocean,

55
00:03:27.206 --> 00:03:31.232
give you a life jacket and have you
struggled for a little bit on this.

56
00:03:31.232 --> 00:03:35.444
And the life jacket is this
background information and so, and

57
00:03:35.444 --> 00:03:37.836
links to docs and things like that.

58
00:03:37.836 --> 00:03:41.467
And with that,
you hopefully have enough to be able to

59
00:03:41.467 --> 00:03:46.227
struggle in an effective way so
that when I come back and go through it,

60
00:03:46.227 --> 00:03:51.085
you'll have all the questions in your
mind answered as I go through it.

61
00:03:51.085 --> 00:03:55.441
And if I don't answer all those questions,
then we'll have an opportunity to ask and

62
00:03:55.441 --> 00:03:57.877
answer questions at
the end of every exercise.

63
00:03:57.877 --> 00:04:01.021
That is how things work from a high level.

64
00:04:01.021 --> 00:04:05.975
Now from a technical level,
to get each one of these apps running

65
00:04:05.975 --> 00:04:11.021
you're going to use the these two
scripts it is the dev scripts and

66
00:04:11.021 --> 00:04:15.729
then the diff scripts, so
let me demonstrate both of those.

67
00:04:15.729 --> 00:04:19.159
So from the root you can say node
dev to run the dev script and

68
00:04:19.159 --> 00:04:21.825
this will ask you which
app you want to start.

69
00:04:21.825 --> 00:04:25.831
You can start any of the exercises,
any of the finals and the example.

70
00:04:25.831 --> 00:04:29.229
And so, if I select the exercise
the first exercise,

71
00:04:29.229 --> 00:04:33.394
then this will tell me that my
app has started on port 4,001.

72
00:04:33.394 --> 00:04:36.522
The final always starts on port 5,000.

73
00:04:36.522 --> 00:04:40.773
And then each exercise or
the port will be the number of

74
00:04:40.773 --> 00:04:44.746
the exercise plus the 4,000 or 5,000.

75
00:04:44.746 --> 00:04:49.162
So you always know that you're on
the right out based on what the port is.

76
00:04:49.162 --> 00:04:53.050
And then, we'll log in this workshop,
you're going to need to

77
00:04:53.050 --> 00:04:57.443
log in every time you go to a different
exercise, you'll need to log in.

78
00:04:57.443 --> 00:04:58.751
So the username and

79
00:04:58.751 --> 00:05:04.165
password you can find in the seed script
that's in the Prisma slash seed.ts.

80
00:05:04.165 --> 00:05:09.180
That's the user that we seed into
the database when we set things up,

81
00:05:09.180 --> 00:05:14.720
but the username is kody@remix.run,
and the password is kodylovesyou.

82
00:05:14.720 --> 00:05:20.952
So because kody does love you, so remix
are run, kody loves you, and then login.

83
00:05:20.952 --> 00:05:23.991
And this is the app that
we're gonna be working with.

84
00:05:23.991 --> 00:05:25.589
It's not completely built out.

85
00:05:25.589 --> 00:05:30.689
So if you go to some of these,
they were working on this together, right?

86
00:05:30.689 --> 00:05:32.139
We're in the middle of building this.

87
00:05:32.139 --> 00:05:33.476
We're gonna finish it.

88
00:05:33.476 --> 00:05:36.663
We're gonna sell it to QuickBooks and
make silly amounts of money.

89
00:05:36.663 --> 00:05:38.440
Maybe, I don't know, but

90
00:05:38.440 --> 00:05:42.707
the invoices customers and
deposits pages are mostly finished.

91
00:05:42.707 --> 00:05:47.010
And we're like I said,
this app is finished, and

92
00:05:47.010 --> 00:05:54.198
then each exercise removes a feature that
you're responsible for adding back in.

93
00:05:54.198 --> 00:05:55.730
So, that is the dev script.

94
00:05:55.730 --> 00:06:00.399
You can also be a little faster if
you just say the exercise number.

95
00:06:00.399 --> 00:06:05.601
You can also say if you want to run
the final, then you just prefix it with

96
00:06:05.601 --> 00:06:11.267
final and then a number, however you want
to do that as quickly as you prefer.

97
00:06:11.267 --> 00:06:14.319
And then, if you get totally stuck,
and you're working on it.

98
00:06:14.319 --> 00:06:18.712
You're like I'm pretty sure I have exactly
what he has in the finished version,

99
00:06:18.712 --> 00:06:22.266
then you can actually find a diff
between the finished version and

100
00:06:22.266 --> 00:06:23.833
yours by running node diff.

101
00:06:23.833 --> 00:06:27.318
And then the exercise number or
just written no diff, and

102
00:06:27.318 --> 00:06:30.451
it will allow you to choose
which one to compare to.

103
00:06:30.451 --> 00:06:33.571
And this will just take a diff
of what's in the app directory.

104
00:06:33.571 --> 00:06:38.423
So that should be enough to get us going,
yeah?

105
00:06:38.423 --> 00:06:40.069
&gt;&gt; Was testing on that list?

106
00:06:40.069 --> 00:06:41.682
&gt;&gt; Yes, testing is not in this list.

107
00:06:41.682 --> 00:06:44.752
Testing would be an entire
workshop by itself.

108
00:06:44.752 --> 00:06:48.880
So, but I can address testing
with remix really briefly.

109
00:06:48.880 --> 00:06:53.751
So testing clearly like I have,
the testing course here on frontend

110
00:06:53.751 --> 00:06:58.287
masters talks about principles
as well as testing with React.

111
00:06:58.287 --> 00:07:03.145
And so, testing is clearly something
that's important to me in remix,

112
00:07:03.145 --> 00:07:07.604
all of the stacks that we talked
about in the fundamentals course,

113
00:07:07.604 --> 00:07:11.045
those stacks come
pre-configured with testing.

114
00:07:11.045 --> 00:07:15.015
And they have Vitest setup for
your unit testing and

115
00:07:15.015 --> 00:07:18.720
Cypress set up for
your end-to-end testing.

116
00:07:18.720 --> 00:07:23.297
The integration testing piece
of like component integration is

117
00:07:23.297 --> 00:07:26.178
currently there's not a great story for

118
00:07:26.178 --> 00:07:31.445
that because Remix components require
providers that we don't expose.

119
00:07:31.445 --> 00:07:36.885
And so, there's not a good way to render a
component that renders a link for example.

120
00:07:36.885 --> 00:07:42.486
And so, currently the solution for
that is to mock out the link component.

121
00:07:42.486 --> 00:07:45.633
And it's not a great solution, but
that's that's what I would recommend,

122
00:07:45.633 --> 00:07:46.852
that's the simplest thing.

123
00:07:46.852 --> 00:07:50.077
In the very near future,
when the remix router is released,

124
00:07:50.077 --> 00:07:54.315
we can start working on testing utilities
that will provide all of that stuff for

125
00:07:54.315 --> 00:07:55.848
you, it'd be a lot easier.

126
00:07:55.848 --> 00:07:58.576
But yeah, right now that is the story.

127
00:07:58.576 --> 00:08:02.240
I should mention also that loaders and
actions are actually pretty easy to test

128
00:08:02.240 --> 00:08:05.795
relative to what you might be used to
because you're literally just calling

129
00:08:05.795 --> 00:08:09.149
a function with a couple arguments and
asserting on it, it's output.

130
00:08:09.149 --> 00:08:13.543
So I can't think of too many things
that are easier to test with from

131
00:08:13.543 --> 00:08:15.273
a backhand perspective.

132
00:08:15.273 --> 00:08:18.825
Of course, you may need to
mock a database and stuff, but

133
00:08:18.825 --> 00:08:21.128
that's how you do backend testing.

134
00:08:21.128 --> 00:08:21.812
So yeah,

135
00:08:21.812 --> 00:08:27.301
the trickiest bit is just the components
that use remix components in them.

136
00:08:27.301 --> 00:08:30.027
And for now,
you'll just mock the those things out.

137
00:08:30.027 --> 00:08:33.357
In the future,
we'll have better utilities for that.

138
00:08:33.357 --> 00:08:35.003
So thanks for asking and

139
00:08:35.003 --> 00:08:39.788
yes in the future we will have a course
on testing remix apps for sure.

140
00:08:39.788 --> 00:08:43.502
&gt;&gt; If you have an existing Express app,
how would you go about adding remix into

141
00:08:43.502 --> 00:08:46.301
the application without
having to rewrite everything?

142
00:08:46.301 --> 00:08:48.178
&gt;&gt; Yeah, that's a great question.

143
00:08:48.178 --> 00:08:51.381
Not necessarily related
to what we have here, but

144
00:08:51.381 --> 00:08:54.520
I will briefly give you
an idea of what I would do.

145
00:08:54.520 --> 00:08:59.081
I would say, npx create remix,
and when you generate this

146
00:08:59.081 --> 00:09:03.550
project say just the basics and
choose Express server and

147
00:09:03.550 --> 00:09:07.947
use TypeScript or JavaScript,
whichever you prefer.

148
00:09:07.947 --> 00:09:12.112
I'll just say no here, and
we'll cd into to my remix app,

149
00:09:12.112 --> 00:09:14.078
just to take a look at this.

150
00:09:14.078 --> 00:09:19.048
And you'll see we have a server.js
that is using Express that will

151
00:09:19.048 --> 00:09:22.523
show you how to integrate
remix with Express.

152
00:09:22.523 --> 00:09:25.333
It's literally just this.

153
00:09:25.333 --> 00:09:28.573
There's some helper stuff here
like this purge require cache.

154
00:09:28.573 --> 00:09:32.038
So you don't have to restart your server
every time you change code on the backend,

155
00:09:32.038 --> 00:09:33.486
which is kind of nice, actually.

156
00:09:33.486 --> 00:09:37.314
But yes, so if you have an existing
Express app, I would just look at this.

157
00:09:37.314 --> 00:09:41.108
This is actually there's a template
that you could just look at that code on

158
00:09:41.108 --> 00:09:43.047
GitHub that generates this project.

159
00:09:43.047 --> 00:09:49.291
And then, you can integrate
this on a route-by-route basis.

160
00:09:49.291 --> 00:09:53.151
So over time, you just move more routes
into remix until they're all remix.

161
00:09:53.151 --> 00:09:58.321
And that's actually, kind of,
similar to the way that I would do

162
00:09:58.321 --> 00:10:04.814
a migration from a create react app thing
or anything that's using react router.

163
00:10:04.814 --> 00:10:08.856
You just over time move things over, and
we actually do have a migration guide

164
00:10:08.856 --> 00:10:12.088
on the remix docs for
migrating from create react app or some,

165
00:10:12.088 --> 00:10:14.470
like you're on web pack
thing over to remix.

166
00:10:14.470 --> 00:10:16.913
And we're gonna have even better
answers for that in the future as well.

