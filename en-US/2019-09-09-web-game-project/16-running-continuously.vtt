WEBVTT

1
00:00:00.950 --> 00:00:03.207
&gt;&gt; Brian Holt: So, let's go see
what that looks like over here.

2
00:00:05.753 --> 00:00:08.746
&gt;&gt; Brian Holt: I'm gonna write a function
called nextFrame, cuz we're gonna have

3
00:00:08.746 --> 00:00:11.600
some sort of ticking thing of some
function that's going to run.

4
00:00:11.600 --> 00:00:14.700
So, function nextFrame.

5
00:00:20.740 --> 00:00:25.355
&gt;&gt; Brian Holt: I'm gonna say,
const now = Date.now.

6
00:00:28.215 --> 00:00:29.905
&gt;&gt; Brian Holt: And then I'll say, for.

7
00:00:32.525 --> 00:00:37.701
&gt;&gt; Brian Holt: Yeah, okay, for(let i =

8
00:00:37.701 --> 00:00:44.684
0; i &lt; moles.length; i++).

9
00:00:49.009 --> 00:00:51.832
&gt;&gt; Brian Holt: Well, yeah,
I guess that's what we have to do as well.

10
00:00:54.558 --> 00:00:55.719
&gt;&gt; Brian Holt: If.

11
00:01:01.206 --> 00:01:08.353
&gt;&gt; Brian Holt: (RunAgainAt &gt;= now),

12
00:01:08.353 --> 00:01:13.014
then we're gonna

13
00:01:13.014 --> 00:01:17.990
do another check.

14
00:01:22.990 --> 00:01:27.030
&gt;&gt; Brian Holt: RunAgainAt,
we're just gonna have equal to,

15
00:01:27.030 --> 00:01:33.600
let runAgainAt = Date.now,
let's do a check every 100 milliseconds.

16
00:01:33.600 --> 00:01:37.010
Since there's not a lot of going on in
this game, we can check pretty frequently.

17
00:01:37.010 --> 00:01:43.474
So we're gonna check every 100
milliseconds, or every 10th of a second.

18
00:01:43.474 --> 00:01:48.431
RunAgainAt, so, once you've gotten past
the point where now is greater than

19
00:01:48.431 --> 00:01:51.600
runAgainAt, so it is this way,
so this is right.

20
00:01:53.480 --> 00:01:58.751
Let me make sure that I'm doing
this correctly, because I might.

21
00:01:58.751 --> 00:02:01.802
This is one of those things where
you're just gonna have to guess and

22
00:02:01.802 --> 00:02:02.453
check [LAUGH].

23
00:02:04.740 --> 00:02:06.584
&gt;&gt; Brian Holt: Let's do this, okay.

24
00:02:10.562 --> 00:02:14.020
&gt;&gt; Brian Holt: Console.log('now').

25
00:02:15.860 --> 00:02:21.758
And then, if that happens,
then you're gonna say,

26
00:02:21.758 --> 00:02:25.044
runAgainAt = now + 100.

27
00:02:25.044 --> 00:02:27.485
Just coming back over here, run.

28
00:02:30.603 --> 00:02:32.920
&gt;&gt; Brian Holt: And then you have to run
it for the first time as well, nextFrame.

29
00:02:45.615 --> 00:02:47.610
&gt;&gt; Brian Holt: And
then you have to do requestAnimationFrame.

30
00:02:47.610 --> 00:02:50.400
Sorry, requestAnimationFrame(nextFrame).

31
00:02:58.050 --> 00:03:03.252
&gt;&gt; Brian Holt: Or let's,
what happens if you do this 1,000?

32
00:03:10.831 --> 00:03:12.600
&gt;&gt; Brian Holt: Yeah, okay, that is right.

33
00:03:12.600 --> 00:03:13.100
So.

34
00:03:18.190 --> 00:03:22.440
&gt;&gt; Brian Holt: The idea is,
here with requestAnimationFrame is that,

35
00:03:24.120 --> 00:03:27.670
you are giving a function to the browser
and saying, when you're not doing

36
00:03:27.670 --> 00:03:30.630
anything, next time you have
an idle second, run this function.

37
00:03:30.630 --> 00:03:34.730
So you're more or less guaranteeing that
you're not interrupting something else,

38
00:03:34.730 --> 00:03:38.650
that's the point of requestAnimationFrame
versus setInterval.

39
00:03:38.650 --> 00:03:42.790
It does not matter what the browser's
doing, after 1,000 milliseconds it's gonna

40
00:03:42.790 --> 00:03:46.180
run that function, it's going to
interrupt whatever was happening.

41
00:03:46.180 --> 00:03:47.490
The user could be scrolling or

42
00:03:47.490 --> 00:03:51.150
something bad, lots of bad things can
happen if you setInterval in that way.

43
00:03:51.150 --> 00:03:54.740
It can seem like your interface
is a little more janky.

44
00:03:55.930 --> 00:04:04.080
So, what I'm doing here with
this if runAgainAt &lt;= now,

45
00:04:04.080 --> 00:04:08.670
I'm basically guaranteeing that this block
is only gonna run every 100 milliseconds.

46
00:04:08.670 --> 00:04:11.350
Because I don't want it
to run every millisecond,

47
00:04:11.350 --> 00:04:13.470
I want it to run every 100 milliseconds.

48
00:04:15.000 --> 00:04:16.829
So, what I'm doing here is, I'm saying.

49
00:04:23.924 --> 00:04:28.433
&gt;&gt; Brian Holt: Yeah, I guess,
it's useful if I can demonstrate it here.

50
00:04:30.880 --> 00:04:35.400
&gt;&gt; Brian Holt: So if I say Date.now, and

51
00:04:35.400 --> 00:04:38.650
then I call it again later,
this number gets bigger over time.

52
00:04:38.650 --> 00:04:42.280
Cuz you're adding more and
more milliseconds over time.

53
00:04:42.280 --> 00:04:47.039
So what I'm saying here is,
once that number becomes

54
00:04:47.039 --> 00:04:52.328
bigger than runAgainAt,
then run the function again, and

55
00:04:52.328 --> 00:04:58.060
I'm putting runAgainAt 100
milliseconds into the future.

56
00:04:58.060 --> 00:05:00.746
&gt;&gt; Speaker 2: And is Date.now updating?

57
00:05:00.746 --> 00:05:05.614
When is now?

58
00:05:05.614 --> 00:05:10.839
[LAUGH]
No.

59
00:05:10.839 --> 00:05:12.387
&gt;&gt; Brian Holt: So Date.now is,

60
00:05:12.387 --> 00:05:18.190
how many milliseconds it's
been since January 1st, 1970.

61
00:05:18.190 --> 00:05:21.540
So that number is constantly getting
larger and larger, and larger.

62
00:05:21.540 --> 00:05:27.060
So, what I'm just saying is, Date.now is
this number I'm putting 100 milliseconds

63
00:05:27.060 --> 00:05:31.060
in the future, once Date.now gets past
that number, then run that function again.

64
00:05:33.180 --> 00:05:39.010
So we're capturing date.now
in this runAgainAt.

65
00:05:39.010 --> 00:05:43.250
So this is now, at this moment in time,
then when the function runs again,

66
00:05:43.250 --> 00:05:46.060
this now is updated to a new value, and

67
00:05:46.060 --> 00:05:49.050
we're comparing it to what it
was last time I called it.

68
00:05:49.050 --> 00:05:49.880
&gt;&gt; Speaker 2: Last time you called it?

69
00:05:49.880 --> 00:05:52.139
&gt;&gt; Brian Holt: Last time I set it rather,
cuz notice,

70
00:05:52.139 --> 00:05:54.266
this is inside the if statement.

71
00:05:54.266 --> 00:05:56.431
&gt;&gt; Speaker 2: Okay, so
first you're setting runAgainAt, and

72
00:05:56.431 --> 00:05:58.449
then you're calling it
again within itself?

73
00:05:58.449 --> 00:05:58.949
&gt;&gt; Brian Holt: Mm-hm.

