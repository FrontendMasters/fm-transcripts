WEBVTT

1
00:00:00.006 --> 00:00:04.284
&gt;&gt; Brian Holt: So,
&gt;&gt; Brian Holt: Any questions?

2
00:00:09.429 --> 00:00:13.710
&gt;&gt; Speaker 2: Can you show us the worm,
I guess the JavaScript for the worm stuff?

3
00:00:13.710 --> 00:00:17.430
&gt;&gt; Brian Holt: Yep, really the only thing
that affected the worm was this one,

4
00:00:18.980 --> 00:00:20.940
line 146 there.

5
00:00:20.940 --> 00:00:23.260
&gt;&gt; Speaker 2: And
that is inside of your feed function?

6
00:00:23.260 --> 00:00:25.510
&gt;&gt; Brian Holt: Yep, so
if they successfully or

7
00:00:25.510 --> 00:00:30.061
are able to click it then you just use
the new score that you added to or

8
00:00:30.061 --> 00:00:34.010
added two to, and
then you just say ten times score.

9
00:00:34.010 --> 00:00:39.193
So let's say they're at four, right, 40%
of the worm container would be showing.

10
00:00:46.627 --> 00:00:50.739
&gt;&gt; Brian Holt: So
who here was able to follow along mostly?

11
00:00:50.739 --> 00:00:54.180
Yeah, that's great.

12
00:00:54.180 --> 00:00:56.237
Is there any part of this that
doesn't make any sense to you?

13
00:01:00.924 --> 00:01:05.684
&gt;&gt; Speaker 3: This, not that this
doesn't make sense necessarily,

14
00:01:05.684 --> 00:01:10.742
but if we were working on it,
we did make it a score of three,

15
00:01:10.742 --> 00:01:15.390
then the worm would never
show up properly, right?

16
00:01:15.390 --> 00:01:16.130
&gt;&gt; Brian Holt: Correct.

17
00:01:16.130 --> 00:01:19.520
&gt;&gt; Speaker 3: If you were saying, all
right, I'm giving this to a customer and

18
00:01:19.520 --> 00:01:25.000
I want them to be able to adjust the score
that they need to get to get 100%,

19
00:01:25.000 --> 00:01:28.880
then you'd have to do a little,
turn what, I didn't do.

20
00:01:28.880 --> 00:01:30.490
&gt;&gt; Brian Holt: So
you're saying max score and

21
00:01:30.490 --> 00:01:33.220
let's just assign it to five for
argument's sake.

22
00:01:33.220 --> 00:01:35.700
This is a great question, right.

23
00:01:35.700 --> 00:01:40.052
And then we're gonna make everything
based on the math from this, okay.

24
00:01:40.052 --> 00:01:44.469
So we would come down here and
into feed, so

25
00:01:44.469 --> 00:01:49.883
score is greater than or
equal to max score, right.

26
00:01:49.883 --> 00:01:54.615
And then here ten was just the max
amount of things, right, so

27
00:01:54.615 --> 00:01:59.321
this would be,
&gt;&gt; Brian Holt: So

28
00:01:59.321 --> 00:02:00.451
this has to be a function of ten.

29
00:02:00.451 --> 00:02:03.233
&gt;&gt; Speaker 3: Max score
times something equals 100%.

30
00:02:03.233 --> 00:02:09.637
&gt;&gt; Brian Holt: Percentage of 10,
so it would just be the score

31
00:02:09.637 --> 00:02:15.430
divided by max score times 100, right.

32
00:02:15.430 --> 00:02:17.288
Am I getting my math in correctly?

33
00:02:17.288 --> 00:02:18.362
I can never tell.

34
00:02:21.523 --> 00:02:26.201
&gt;&gt; Brian Holt: So this was 3,
right, 3 divided by 5,

35
00:02:26.201 --> 00:02:31.432
3 divided by 5 would be 0.6 times 100.

36
00:02:31.432 --> 00:02:35.712
You'd end up with 60%, right.

37
00:02:35.712 --> 00:02:38.021
So then you would be able to do that I

38
00:02:38.021 --> 00:02:43.658
think
&gt;&gt; Brian Holt: And

39
00:02:43.658 --> 00:02:50.010
then the worm would be always
the correct size based on max score.

40
00:02:51.680 --> 00:02:54.932
&gt;&gt; Speaker 3: And
all you did was create a new constant?

41
00:02:54.932 --> 00:02:57.184
&gt;&gt; Brian Holt: Yep, and
then your client can come up here and

42
00:02:57.184 --> 00:03:00.505
just say change that number or
you can change the number for them and

43
00:03:00.505 --> 00:03:02.171
charge them a lot of money for it.

44
00:03:02.171 --> 00:03:04.650
&gt;&gt; Speaker 3: Right [LAUGH]
&gt;&gt; Brian Holt: And

45
00:03:04.650 --> 00:03:07.510
then the number would always be correct.

46
00:03:07.510 --> 00:03:11.830
Let me validate my assumption here
because I talk a big game but

47
00:03:11.830 --> 00:03:12.800
sometimes it's not true.

48
00:03:14.830 --> 00:03:16.467
So that looks roughly right doesn't it?

49
00:03:18.947 --> 00:03:22.593
&gt;&gt; Speaker 3: Yeah,
cuz first one was a key and threw me off.

50
00:03:22.593 --> 00:03:25.396
&gt;&gt; Brian Holt: Yep, then you might make it
adjustable how many points to each mole's

51
00:03:25.396 --> 00:03:26.644
worth or something like that.

52
00:03:26.644 --> 00:03:29.758
It probably would make the math easier if
you just adjusted how many points each

53
00:03:29.758 --> 00:03:32.699
mole was worth, right, and
make it out of 100 or something like that.

54
00:03:34.980 --> 00:03:37.355
But that's obviously something
you can play around with,

55
00:03:37.355 --> 00:03:38.980
you can make your own design decisions.

56
00:03:38.980 --> 00:03:42.580
Again, this is one way to code this game,
there are a myriad of other ways,

57
00:03:42.580 --> 00:03:45.038
infinite amount of ways
that you can code this, and

58
00:03:45.038 --> 00:03:47.570
no one of these is gonna be
any better than the other.

59
00:03:48.780 --> 00:03:51.930
The best kind of game is the one
that's done, [LAUGH] right.

60
00:03:51.930 --> 00:03:54.022
So if you finish it,
then it's the best one.

61
00:03:57.758 --> 00:03:58.766
&gt;&gt; Brian Holt: Any other questions?

62
00:04:01.374 --> 00:04:02.180
&gt;&gt; Brian Holt: Yeah.

63
00:04:02.180 --> 00:04:04.745
&gt;&gt; Speaker 2: Can you go
over the feed function,

64
00:04:04.745 --> 00:04:09.964
I'm just a little confused on how it
works away, once the mole is fed,

65
00:04:09.964 --> 00:04:13.962
how it works away from hungry
instead of going to sad.

66
00:04:13.962 --> 00:04:14.462
&gt;&gt; Brian Holt: Okay, sure.

67
00:04:16.962 --> 00:04:20.283
&gt;&gt; Brian Holt: So
here inside of our getNextStatus, right,

68
00:04:20.283 --> 00:04:26.245
this is running roughly every, well this
only runs when the mole has a next status,

69
00:04:26.245 --> 00:04:31.460
right, so after 500 milliseconds or
100 milliseconds, right.

70
00:04:31.460 --> 00:04:36.050
So it comes in here and
it says this mole at this given time,

71
00:04:36.050 --> 00:04:39.590
what is it status, right, and
it goes through one of these statuses.

72
00:04:39.590 --> 00:04:41.560
So this is a type loop, again,

73
00:04:41.560 --> 00:04:45.206
you can see here that this just runs
indefinitely unless, well yeah,

74
00:04:45.206 --> 00:04:48.930
it just runs indefinitely
through this cycle of statuses.

75
00:04:48.930 --> 00:04:54.010
Now if a user correctly
clicks on a hungry mole,

76
00:04:54.010 --> 00:04:55.990
than it calls this feed function, right.

77
00:04:57.340 --> 00:05:01.070
So what we do here is we change
the status to fed manually

78
00:05:01.070 --> 00:05:02.940
outside of that loop, right.

79
00:05:02.940 --> 00:05:06.950
So before everything was happening inside
of the next status one, right, but

80
00:05:06.950 --> 00:05:10.840
now we're kind of hitting
a fork in the road here.

81
00:05:10.840 --> 00:05:14.927
We're forcing this to be fed,
we're changing its .next, right,

82
00:05:14.927 --> 00:05:18.380
so we're kind of modifying
it out of cycle.

83
00:05:18.380 --> 00:05:23.772
&gt;&gt; Speaker 2: And that event at the top
is saying, but it's saying if you,

84
00:05:23.772 --> 00:05:28.960
wait, I'm a little confused about
the not cuz the exclamation

85
00:05:28.960 --> 00:05:32.603
mark means that-
&gt;&gt; Brian Holt: Not, right.

86
00:05:32.603 --> 00:05:33.175
&gt;&gt; Speaker 2: Okay.

87
00:05:33.175 --> 00:05:35.543
&gt;&gt; Brian Holt: So
the reason why we do this stuff up here,

88
00:05:35.543 --> 00:05:38.940
there's one event listener for
this entire page, right.

89
00:05:38.940 --> 00:05:42.380
If you scroll down to the bottom here,
we're listening for

90
00:05:42.380 --> 00:05:45.450
events on background, right.

91
00:05:45.450 --> 00:05:50.290
So if I click here, not on any of the
moles, it's still firing events that this

92
00:05:50.290 --> 00:05:55.140
event listener is catching, right, so
I have to weed out all of that stuff.

93
00:05:55.140 --> 00:06:02.280
So here I'm checking is this an image and
does that image contain hungry?

94
00:06:02.280 --> 00:06:05.603
Honestly, since nothing else
can possibly have hungry on it,

95
00:06:05.603 --> 00:06:09.942
cuz we don't put it anywhere, you really
could just get rid of the first part too.

96
00:06:09.942 --> 00:06:15.910
And honestly,
&gt;&gt; Brian Holt: This is better, yeah.

97
00:06:15.910 --> 00:06:19.780
So you still have to check does
this contain hungry, right.

98
00:06:19.780 --> 00:06:24.535
If it doesn't contain hungry,
then just stop, yeah.

99
00:06:24.535 --> 00:06:25.378
Does that follow?

100
00:06:25.378 --> 00:06:26.984
&gt;&gt; Speaker 2: Yeah.

101
00:06:26.984 --> 00:06:30.403
&gt;&gt; Brian Holt: Okay,
any other questions on it?

102
00:06:30.403 --> 00:06:31.084
Cool.

103
00:06:33.546 --> 00:06:34.259
&gt;&gt; Brian Holt: Other questions?

104
00:06:39.936 --> 00:06:42.490
&gt;&gt; Speaker 2: When you are writing
code like this, would you,

105
00:06:42.490 --> 00:06:46.060
I feel like we did a lot of jumping in and
out of different functions.

106
00:06:46.060 --> 00:06:48.220
And okay,
now we're adding a new feature, so

107
00:06:48.220 --> 00:06:50.260
we're changing something in this function,
and this one.

108
00:06:50.260 --> 00:06:53.895
And it's not super intuitive to
me how to know which function,

109
00:06:53.895 --> 00:06:56.970
where to put certain pieces of code.

110
00:06:56.970 --> 00:07:02.027
So when you would be writing
something like this would you like

111
00:07:02.027 --> 00:07:07.183
the entire feed function first and
kind of fill in the functions

112
00:07:07.183 --> 00:07:11.948
that you know you need,
kind like what we did verses like,

113
00:07:11.948 --> 00:07:16.641
I guess it doesn't make sense
to do it based on features.

114
00:07:16.641 --> 00:07:18.037
What's the trade off there?

115
00:07:18.037 --> 00:07:25.479
&gt;&gt; Brian Holt: I think it's gonna
vary wildly depending on who you ask.

116
00:07:25.479 --> 00:07:27.947
I try and solve a problem at a time,
right, and

117
00:07:27.947 --> 00:07:30.360
kind of validate assumptions, right.

118
00:07:30.360 --> 00:07:33.189
So you can see the first
thing I chased after here was

119
00:07:34.470 --> 00:07:37.710
making that cycle work correctly, right.

120
00:07:37.710 --> 00:07:42.600
That was one of the bigger
features to tackle.

121
00:07:42.600 --> 00:07:44.600
But honestly I think when I
was writing this from scratch,

122
00:07:44.600 --> 00:07:45.580
cuz I have the notes here,

123
00:07:45.580 --> 00:07:48.840
I know how this all works, I've already
thought all the way through this before.

124
00:07:48.840 --> 00:07:52.230
I think what I did first time is rather
than doing the whole cycle here,

125
00:07:52.230 --> 00:07:54.520
I just had to go back and
forth from hungry and gone.

126
00:07:55.790 --> 00:07:58.750
And I started there with like a really
simple thing that I could write this and

127
00:07:58.750 --> 00:08:00.680
immediately see results, right.

128
00:08:00.680 --> 00:08:03.730
And then I kind of just slowly added
more and more steps to this, right.

129
00:08:04.750 --> 00:08:09.370
But I try and
just solve one problem at a time.

130
00:08:09.370 --> 00:08:13.856
So a lot of times I'll do things like
this, remember how I just wrote win?

131
00:08:13.856 --> 00:08:17.473
It was like, I don't wanna think
through what winning means right now,

132
00:08:17.473 --> 00:08:20.640
I just want to know that this
is where winning happens, right.

133
00:08:20.640 --> 00:08:24.240
And sometimes I won't do that,
I'll just do you win here,

134
00:08:24.240 --> 00:08:28.060
and then I'll just keep going and
finishing up the rest of my thought.

135
00:08:28.060 --> 00:08:33.651
So I'll leave myself a lot of
like to-do's, like this to-do.

136
00:08:33.651 --> 00:08:36.130
And then I actually have a tool
here that won't let me check and

137
00:08:36.130 --> 00:08:39.030
code if it still has to-do's in it cuz
that means I didn't finish something.

138
00:08:40.640 --> 00:08:42.822
So I do that a lot.

139
00:08:42.822 --> 00:08:45.390
And then I just try and
keep these functions pretty small.

140
00:08:45.390 --> 00:08:47.990
In this one the getNetStatus
got pretty long,

141
00:08:49.010 --> 00:08:51.440
I'm a little unhappy
with how long this is.

142
00:08:53.190 --> 00:09:01.930
Next time I might have a function that
says make leaving or something like that,

143
00:09:01.930 --> 00:09:05.790
and then have them just broken out
into smaller and smaller functions.

144
00:09:05.790 --> 00:09:07.060
But for now this works.

145
00:09:08.620 --> 00:09:11.300
Does that kind of roundabout
answer your question?

146
00:09:11.300 --> 00:09:14.430
Just try and
tackle bite sized pieces at a time.

147
00:09:15.760 --> 00:09:18.430
As much as small pieces you
can break off at a time.

148
00:09:18.430 --> 00:09:20.546
And if it's too big,
then break it into two smaller pieces.

149
00:09:24.118 --> 00:09:27.371
&gt;&gt; Brian Holt: But I don't have that
much room for stuff in my brain, so

150
00:09:27.371 --> 00:09:32.149
the less amount of stuff I can keep in my
brain, the less I'm gonna get confused and

151
00:09:32.149 --> 00:09:36.519
forget about things and have to regain
context and all that kind of stuff.

152
00:09:36.519 --> 00:09:40.830
Cuz I feel like half of my time spent
as a programmer is staring at my code,

153
00:09:40.830 --> 00:09:45.220
trying to get everything in my head so I
can think about the problem holistically.

154
00:09:45.220 --> 00:09:49.910
So the more I can limit that so that the
smaller about it means I can read about it

155
00:09:49.910 --> 00:09:54.790
and reason about that code more easily and
more quickly.

156
00:09:57.360 --> 00:09:59.474
So yeah, I think that's my thought on it.

157
00:10:02.916 --> 00:10:06.828
&gt;&gt; Brian Holt: Cool, well I think my
challenges for you here then is to go and

158
00:10:06.828 --> 00:10:10.511
complete this game on your own and
get it on your profile so

159
00:10:10.511 --> 00:10:15.923
you have another thing that you can show
people, like check out this thing I built.

160
00:10:15.923 --> 00:10:18.900
And yeah, thanks for coming.

161
00:10:18.900 --> 00:10:21.500
That's the end of at least
the coding part of the boot camp.

162
00:10:21.500 --> 00:10:27.148
Congratulations, you made it.

163
00:10:27.148 --> 00:10:28.669
&gt;&gt; [APPLAUSE]

