WEBVTT

1
00:00:00.180 --> 00:00:02.990
&gt;&gt; Speaker 1: So I wanted to
show you two ways of doing this.

2
00:00:02.990 --> 00:00:07.090
I showed you the interval way first,
because that's the easier way to do it.

3
00:00:07.090 --> 00:00:12.670
And you are welcome to complete this
particular project using setInterval.

4
00:00:12.670 --> 00:00:17.380
The new more modern way of doing things is
something called request animation frame.

5
00:00:17.380 --> 00:00:21.050
And so what request animation frame does
is you're basically asking the browser,

6
00:00:21.050 --> 00:00:26.330
next time you have a second, next time
you're not rendering something or

7
00:00:26.330 --> 00:00:28.590
executing something,
run this for me, right?

8
00:00:28.590 --> 00:00:31.810
And that's usually not immediately,
but it's usually

9
00:00:31.810 --> 00:00:36.580
no more than about a millisecond away,
right, so the advantage of this is this

10
00:00:36.580 --> 00:00:41.120
helps you with performance because you're
never forcing the browser to stop.

11
00:00:41.120 --> 00:00:45.370
With set interval you're saying drop
everything and run this right now, right?

12
00:00:45.370 --> 00:00:48.320
Whenever this interval is up,
you have to do it right now.

13
00:00:48.320 --> 00:00:51.130
Which, it can be a problem if you're
trying to re-render something or

14
00:00:51.130 --> 00:00:55.440
garbage collection is going on or any one
of these things that could be potentially

15
00:00:55.440 --> 00:00:59.520
happening after that interval, okay?

16
00:01:02.250 --> 00:01:06.330
So here I'm showing you
both of them side by side.

17
00:01:06.330 --> 00:01:10.720
What's interesting is,
why is requestAnimationFrame so much lower

18
00:01:10.720 --> 00:01:15.130
than setInterval, despite the fact
they're both running about every second?

19
00:01:16.810 --> 00:01:20.100
Well something else that's really cool
that requestAnimationFrame does is,

20
00:01:20.100 --> 00:01:25.270
if I'm playing your game, and
then I get up and go do something else.

21
00:01:25.270 --> 00:01:29.035
Or change the tab and read my email, and
then I'm gonna come back to your game,

22
00:01:29.035 --> 00:01:32.230
requestAnimationFrame is gonna pause,
okay, and

23
00:01:32.230 --> 00:01:36.260
then when the user opens it back up,
it's gonna start going again.

24
00:01:36.260 --> 00:01:38.540
Whereas with setInterval,
it does not matter.

25
00:01:38.540 --> 00:01:40.190
It's still running there
in the backgrounds.

26
00:01:41.480 --> 00:01:47.820
So that's another advantage
of requestAnimationFrame.

27
00:01:49.340 --> 00:01:50.915
Now why is this a little
bit tougher to do?

28
00:01:50.915 --> 00:01:58.850
So this top part right here,
lines 7 through 11,

29
00:01:58.850 --> 00:02:04.760
this is roughly all the code that you
need to run, the interval, right.

30
00:02:04.760 --> 00:02:09.180
Interval account, and then after every

31
00:02:09.180 --> 00:02:12.980
second plus plus and then set that
to be the interior of it, right?

32
00:02:12.980 --> 00:02:15.440
So that's roughly what I
was showing you before.

33
00:02:15.440 --> 00:02:19.300
Let's show you what
requestAnimationFrame looks like.

34
00:02:20.970 --> 00:02:24.209
So the first thing is I started down here,
requestAnimationFrame right there.

35
00:02:25.900 --> 00:02:30.460
And then the first thing I
do is run again at, right?

36
00:02:30.460 --> 00:02:34.300
So I'm letting the browser know,
run this again at this particular time.

37
00:02:34.300 --> 00:02:36.780
So I immediately started by
saying run it now, right?.

38
00:02:38.200 --> 00:02:43.140
And then here I asked,
if date.now is greater than run again at,

39
00:02:43.140 --> 00:02:46.670
right, so if I've gone past the time
when I expect to run this again,

40
00:02:46.670 --> 00:02:48.130
then run this function body.

41
00:02:49.240 --> 00:02:50.670
Otherwise don't run it.

42
00:02:52.670 --> 00:02:53.930
Why is that?

43
00:02:53.930 --> 00:03:00.486
Well, I'm just gonna show you
what happens if I take this out.

44
00:03:13.104 --> 00:03:17.760
&gt;&gt; Speaker 1: So let's put this in here.

45
00:03:17.760 --> 00:03:19.620
I just put this in here and paste it.

46
00:03:27.510 --> 00:03:29.960
&gt;&gt; Speaker 1: So you can see there,
it goes a little bit faster.

47
00:03:36.790 --> 00:03:38.600
&gt;&gt; Speaker 1: I'm not exactly
sure how fast that is.

48
00:03:40.190 --> 00:03:41.751
It's more than a second though,

49
00:03:41.751 --> 00:03:44.380
right, or it's going faster
than every once a second.

50
00:03:45.870 --> 00:03:47.670
So when I say requestAnimationFrame,
it says,

51
00:03:47.670 --> 00:03:51.850
literally the next time you have nothing
else to do, let me run my code again.

52
00:03:51.850 --> 00:03:54.200
And so that's quite frequently, right.

53
00:03:54.200 --> 00:03:56.619
So that's why you have to kind
of mitigate that by saying,

54
00:03:57.680 --> 00:03:59.280
doing this run again thing.

55
00:03:59.280 --> 00:04:05.180
So that's what I'm saying here, run again
at date now plus 1000 milliseconds, right?

56
00:04:05.180 --> 00:04:06.600
So in 1000 milliseconds run this again.

57
00:04:08.510 --> 00:04:10.960
So you can see here this
is gonna get run a lot.

58
00:04:10.960 --> 00:04:16.600
Luckily for us date.now is pretty fast and
conditional checks are really fast, right?

59
00:04:16.600 --> 00:04:20.070
So this is still performance
to do it this way.

60
00:04:22.320 --> 00:04:23.850
You are welcome to do this either way.

61
00:04:25.570 --> 00:04:30.540
I like to do this with
requestAnimationFrame but this

62
00:04:30.540 --> 00:04:35.260
project is hard enough as is, if interval
speaks to you just go with it, okay.

