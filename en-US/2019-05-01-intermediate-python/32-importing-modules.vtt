WEBVTT

1
00:00:00.370 --> 00:00:01.510
&gt;&gt; Nina Zakharenko: Now for modules and

2
00:00:01.510 --> 00:00:05.150
imports, Python has a pretty
simple package structure.

3
00:00:05.150 --> 00:00:10.325
But this has changed between Python 2 and
Python 3.

4
00:00:10.325 --> 00:00:18.209
So in Python 2, this dunder init.py
file was required to be in a folder for

5
00:00:18.209 --> 00:00:23.490
Python to consider that
folder a package module.

6
00:00:23.490 --> 00:00:28.092
In Python 3, it's no longer required,
but it is still supported and

7
00:00:28.092 --> 00:00:29.263
it can be useful.

8
00:00:32.152 --> 00:00:35.880
&gt;&gt; Nina Zakharenko: Let's
make a basic function.

9
00:00:35.880 --> 00:00:39.278
And we're gonna make a new module.

10
00:00:47.733 --> 00:00:49.625
&gt;&gt; Nina Zakharenko: So
going back to the VS Code

11
00:00:49.625 --> 00:00:54.335
here,
&gt;&gt; Nina Zakharenko: If you don't

12
00:00:54.335 --> 00:00:57.575
have a PowerShell for
Windows or a Bash for Mac,

13
00:00:57.575 --> 00:01:01.059
you might wanna create
a new terminal window here.

14
00:01:03.558 --> 00:01:07.533
&gt;&gt; Nina Zakharenko: And if you'll notice,
because I have the Python extension

15
00:01:07.533 --> 00:01:10.713
activated, when I make
a new terminal window,

16
00:01:10.713 --> 00:01:15.347
VS Code automatically sources
the virtual environment, so handy.

17
00:01:15.347 --> 00:01:16.800
Okay, so I'm gonna make a new folder.

18
00:01:16.800 --> 00:01:20.100
And I'm gonna call it my_math_functions.

19
00:01:20.100 --> 00:01:21.709
And then I'm gonna cd into there.

20
00:01:25.974 --> 00:01:31.050
&gt;&gt; Nina Zakharenko: I'm
gonna make a new file

21
00:01:31.050 --> 00:01:35.421
and,
&gt;&gt; Nina Zakharenko: I'm

22
00:01:35.421 --> 00:01:39.512
gonna call it __init__.py.

23
00:01:48.518 --> 00:01:53.702
&gt;&gt; Nina Zakharenko: You
can also open a new window

24
00:01:53.702 --> 00:01:58.470
here and save it, so bbb.

25
00:01:58.470 --> 00:02:01.630
In this my_math_functions __init.__py,

26
00:02:01.630 --> 00:02:05.600
I'm gonna put this simple function,
add_numbers(x, y).

27
00:02:06.910 --> 00:02:12.080
I want to go back up one
directory to pyworkshop,

28
00:02:12.080 --> 00:02:14.940
because I'm gonna be
importing this folder.

29
00:02:16.820 --> 00:02:18.070
So let's try that again.

30
00:02:18.070 --> 00:02:19.520
I'm gonna type python.

31
00:02:19.520 --> 00:02:23.827
And I'm gonna say,
import my_math_functions.

32
00:02:26.812 --> 00:02:34.605
&gt;&gt; Nina Zakharenko: Now I can call
my_math_functions.add_numbers.

33
00:02:39.426 --> 00:02:41.680
&gt;&gt; Nina Zakharenko: There we go,
we can use that as a library.

34
00:02:41.680 --> 00:02:47.472
So generally,
&gt;&gt; Nina Zakharenko: If you wanted,

35
00:02:47.472 --> 00:02:52.270
if I had a bunch of functions in here,
it's valid syntax for Python,

36
00:02:52.270 --> 00:02:54.670
but don't do this.

37
00:02:54.670 --> 00:03:00.050
I could say from
my_math_functions import *.

38
00:03:00.050 --> 00:03:05.476
And that's gonna go and import everything

39
00:03:05.476 --> 00:03:11.220
from this file into my
current environment.

40
00:03:11.220 --> 00:03:13.500
And then I can just say,
add_numbers three and five.

41
00:03:16.150 --> 00:03:17.120
But this isn't great.

42
00:03:17.120 --> 00:03:23.080
Generally, when we're using
functions in these types of modules,

43
00:03:23.080 --> 00:03:26.859
we wanna be as specific as possible and
only import what we're going to use.

44
00:03:28.690 --> 00:03:33.420
That lets us keep our environment,

45
00:03:33.420 --> 00:03:36.450
also called a namespace in Python,
as clean as possible, and

46
00:03:36.450 --> 00:03:39.550
not littered with other values
that we don't care about.

47
00:03:40.850 --> 00:03:44.560
So if I just wanted to import add_numbers,

48
00:03:44.560 --> 00:03:49.790
I would say from my_math_functions
import add_numbers.

49
00:03:52.639 --> 00:03:57.191
&gt;&gt; Nina Zakharenko: And
then I can say add_numbers(1, 2).

50
00:04:06.504 --> 00:04:12.295
&gt;&gt; Nina Zakharenko: If our library has a
useful name, which it should, our module,

51
00:04:12.295 --> 00:04:18.550
sometimes, and we plan on importing
quite a few things from it.

52
00:04:18.550 --> 00:04:25.513
Sometimes it's okay to just say,
import my_math_functions,

53
00:04:25.513 --> 00:04:31.270
and then call
my_math_functions.add_numbers.

54
00:04:31.270 --> 00:04:36.250
Because that gives you some context
of where that method came from.

55
00:04:36.250 --> 00:04:40.810
So different best practices for

56
00:04:42.230 --> 00:04:45.200
different scenarios.

57
00:04:48.270 --> 00:04:54.220
You can also use that as keyword,
like we did with exceptions, to change how

58
00:04:54.220 --> 00:05:00.680
that import is seen in your current
environment or your namespace.

59
00:05:00.680 --> 00:05:05.960
So there's a function called prettyprint
that we haven't talked about yet, that

60
00:05:05.960 --> 00:05:13.490
helps you print out large dictionaries
in a little bit of a cleaner way.

61
00:05:13.490 --> 00:05:19.748
So let's say I had a dictionary

62
00:05:19.748 --> 00:05:24.810
with some squares in it.

63
00:05:26.050 --> 00:05:28.700
The key is the number,
the value is the squares.

64
00:05:28.700 --> 00:05:34.475
And I'm gonna say for
num in range, say 30.

65
00:05:37.315 --> 00:05:40.371
&gt;&gt; Nina Zakharenko: If I
just print my dictionary,

66
00:05:40.371 --> 00:05:44.020
it's gonna be a little bit of a blob.

67
00:05:45.050 --> 00:05:47.400
I can import something called prettyprint.

68
00:05:47.400 --> 00:05:51.118
I'd say from prettyprint,
which is the module,

69
00:05:51.118 --> 00:05:54.580
import prettyprint, which is the function.

70
00:05:56.370 --> 00:05:58.850
Sorry, it's not prettyprint, it's pprint.

71
00:05:58.850 --> 00:06:03.180
So I would say from pprint import pprint.

72
00:06:03.180 --> 00:06:04.960
And pprint stands for prettyprint.

73
00:06:06.050 --> 00:06:10.274
Now I can say pprint(my_dict).

74
00:06:10.274 --> 00:06:12.860
And look at that,
it prints it out a little bit nicer.

75
00:06:12.860 --> 00:06:16.680
There's some new lines here,
a little bit easier for us to read.

76
00:06:16.680 --> 00:06:19.000
But pprint is kind of a mouthful.

77
00:06:19.000 --> 00:06:24.080
So I could also say from
pprint import pprint as pp.

78
00:06:25.710 --> 00:06:29.470
And now thatâ€™s considered an alias.

79
00:06:29.470 --> 00:06:35.630
If I didn't already import pprint,
it would not be available in this context.

80
00:06:35.630 --> 00:06:39.730
I would just have to use pp, pp(my_dict).

81
00:06:39.730 --> 00:06:41.551
And that works just the same.

