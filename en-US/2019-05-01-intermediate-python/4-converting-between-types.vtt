WEBVTT

1
00:00:00.020 --> 00:00:02.370
&gt;&gt; Nina Zakharenko: I feel like something
that really encompasses this Python

2
00:00:02.370 --> 00:00:06.770
philosophy is how easy it is
to convert between data types,

3
00:00:07.940 --> 00:00:11.620
and this is something I
tend to use all the time.

4
00:00:13.040 --> 00:00:16.080
So first,
we'll talk about some string operations.

5
00:00:16.080 --> 00:00:23.487
But let's say we have a string and
it is a comma-separated string.

6
00:00:29.627 --> 00:00:32.235
&gt;&gt; Nina Zakharenko: What data
type does this look like?

7
00:00:33.796 --> 00:00:35.149
&gt;&gt; Speaker 2: A string.

8
00:00:35.149 --> 00:00:37.952
&gt;&gt; Nina Zakharenko: But
what kind of data do we see out in

9
00:00:37.952 --> 00:00:40.964
the real world that looks like this?

10
00:00:42.454 --> 00:00:43.501
&gt;&gt; Speaker 3: CSV.

11
00:00:43.501 --> 00:00:48.010
&gt;&gt; Nina Zakharenko: Yeah, a CSV file,
has everyone worked with CSV files?

12
00:00:48.010 --> 00:00:50.319
They're a tax for representation of data.

13
00:00:50.319 --> 00:00:54.056
So usually they'll have
a comma-separated column line, and

14
00:00:54.056 --> 00:00:58.929
then all of your data is there in the file
separated, just some texts with commas.

15
00:01:00.400 --> 00:01:05.141
So a few of you know other programming
languages, how might you approach taking

16
00:01:05.141 --> 00:01:09.830
this CSV file and then breaking it up
into something that's actually useful?

17
00:01:12.296 --> 00:01:13.790
&gt;&gt; Speaker 4: Split?
&gt;&gt; Nina Zakharenko: Yeah, so

18
00:01:13.790 --> 00:01:18.852
in Python we can split this data,

19
00:01:22.887 --> 00:01:24.393
&gt;&gt; Nina Zakharenko: On the comma, and

20
00:01:24.393 --> 00:01:26.406
we'll get back a list.

21
00:01:35.282 --> 00:01:42.189
&gt;&gt; Nina Zakharenko: Let's say,
if we had a comma-separated student.

22
00:01:46.424 --> 00:01:50.819
&gt;&gt; Nina Zakharenko: I have Mary, she's 8,
and her favorite subject is History.

23
00:01:52.014 --> 00:01:55.138
&gt;&gt; Nina Zakharenko: Actually it's Math,
Mary likes Math.

24
00:01:56.583 --> 00:01:57.657
&gt;&gt; Nina Zakharenko: Now we can say,

25
00:01:57.657 --> 00:02:01.859
student.split,
&gt;&gt; Nina Zakharenko: On the comma, and

26
00:02:01.859 --> 00:02:03.645
we'll get back a list.

27
00:02:06.308 --> 00:02:10.680
&gt;&gt; Nina Zakharenko: We saw a little
bit of a tuple unpacking yesterday.

28
00:02:10.680 --> 00:02:15.480
I mentioned that you can also
unpack variables from a list,

29
00:02:15.480 --> 00:02:17.320
it was just not as common.

30
00:02:17.320 --> 00:02:18.900
But I can go ahead and do that.

31
00:02:18.900 --> 00:02:25.201
So I can just say name, age, and
subject is equal to student.split, right?

32
00:02:25.201 --> 00:02:28.830
Because student.split gave me this list.

33
00:02:28.830 --> 00:02:33.070
And now I have Mary's name,
I have her age, I have her subject.

34
00:02:33.070 --> 00:02:39.561
Super easy to throw this in a loop, right,
if you had to go through multiple lines.

35
00:02:41.713 --> 00:02:45.232
&gt;&gt; Nina Zakharenko: If I had,
I have my data,

36
00:02:45.232 --> 00:02:49.765
I'm gonna make a list out of it.

37
00:02:52.783 --> 00:02:55.370
&gt;&gt; Nina Zakharenko: Then I'm
gonna split on that comma again.

38
00:02:57.020 --> 00:03:01.630
So now I have my_list of individual
items that were split by the comma.

39
00:03:01.630 --> 00:03:06.580
If I wanted to combine all the items
in this list back together,

40
00:03:09.240 --> 00:03:14.280
the easiest and best and most efficient
way to do this is with a join.

41
00:03:14.280 --> 00:03:18.080
So the syntax for join is a little bit
weird, I see this trip up beginners.

42
00:03:18.080 --> 00:03:22.041
But you'll want to start
with your delimiter here.

43
00:03:23.839 --> 00:03:26.751
&gt;&gt; Nina Zakharenko: And
then call join on that, and

44
00:03:26.751 --> 00:03:30.234
you'll parse in a sequence to join.

45
00:03:30.234 --> 00:03:36.424
So here, I'll use my_list, and
now we'll see our new delimiter here.

46
00:03:38.001 --> 00:03:41.556
&gt;&gt; Nina Zakharenko: If you want to
make this easier to read, for example,

47
00:03:41.556 --> 00:03:45.119
to make it back into a CSV,
I can also add a space here.

48
00:03:45.119 --> 00:03:48.688
And I'll easily just put
a comma after each word.

49
00:03:48.688 --> 00:03:52.754
Notice that Python is smart and
doesn't include the trailing one.

50
00:03:54.744 --> 00:03:57.821
&gt;&gt; Nina Zakharenko: In other languages,
this is a lot harder,

51
00:03:57.821 --> 00:03:59.622
a lot more complicated.

52
00:03:59.622 --> 00:04:07.106
We know that, we saw yesterday that we
can parse strings into the integer.

53
00:04:10.511 --> 00:04:13.915
&gt;&gt; Nina Zakharenko: The integer type and
get back an int back.

54
00:04:13.915 --> 00:04:18.143
&gt;&gt; Nina Zakharenko: We
can make float numbers.

55
00:04:20.569 --> 00:04:23.595
&gt;&gt; Nina Zakharenko: As you learn about
looping, and comprehensions, and

56
00:04:23.595 --> 00:04:27.365
working with your data,
you'll see exactly how powerful this is.

57
00:04:29.204 --> 00:04:33.420
&gt;&gt; Nina Zakharenko: So open up your
course website if you haven't already,

58
00:04:33.420 --> 00:04:36.481
click on Day 2, Intermediate Python.

59
00:04:36.481 --> 00:04:39.630
If you don't see it there,
you might have to refresh your site.

60
00:04:39.630 --> 00:04:43.148
And then we're in chapter one, Exercise.

