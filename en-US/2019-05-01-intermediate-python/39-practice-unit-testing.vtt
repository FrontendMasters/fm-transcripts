WEBVTT

1
00:00:05.311 --> 00:00:07.592
&gt;&gt; Nina Zakharenko: In this
exercise on unit tests,

2
00:00:07.592 --> 00:00:13.334
we're gonna use the built-in Python unit
test library to write test classes and

3
00:00:13.334 --> 00:00:17.821
test cases, and on our unit tests and
make sure that they pass.

4
00:00:17.821 --> 00:00:24.516
So by now, you're an expert in
Python unit testing, right?

5
00:00:24.516 --> 00:00:29.447
We wrote our first unit test,
we used this exercise to use

6
00:00:29.447 --> 00:00:34.189
the unit test library in
the Python standard library.

7
00:00:34.189 --> 00:00:39.673
We didn't have to install anything extra,
use any other frameworks.

8
00:00:39.673 --> 00:00:41.725
It's all available to us right here.

9
00:00:42.935 --> 00:00:44.676
&gt;&gt; Nina Zakharenko: So let's go to VSCode.

10
00:00:44.676 --> 00:00:46.836
I'm gonna make a new file.

11
00:00:46.836 --> 00:00:49.336
And I'm gonna call it divisible.py.

12
00:00:53.330 --> 00:00:56.284
&gt;&gt; Nina Zakharenko: And
I'm gonna define a new function here, and

13
00:00:56.284 --> 00:00:58.570
I'm gonna call it divisible_by.

14
00:00:58.570 --> 00:01:03.703
And checking a number, the number that
I wanna check, and then the divisor.

15
00:01:05.846 --> 00:01:09.188
&gt;&gt; Nina Zakharenko: And I'm gonna return,

16
00:01:09.188 --> 00:01:13.539
if check_number % divisor,

17
00:01:16.852 --> 00:01:19.392
&gt;&gt; Nina Zakharenko: == 0.

18
00:01:19.392 --> 00:01:24.628
So if the number that I'm checking
is 8 and I'm doing a % 2,

19
00:01:24.628 --> 00:01:28.879
it will be equal to 0
because 8 is an even number.

20
00:01:30.999 --> 00:01:33.321
&gt;&gt; Nina Zakharenko: Let's
make another new file.

21
00:01:33.321 --> 00:01:37.682
This time I'm gonna save
it as test_divisible.py.

22
00:01:44.987 --> 00:01:45.576
&gt;&gt; Nina Zakharenko: Okay.

23
00:01:52.813 --> 00:01:56.330
&gt;&gt; Nina Zakharenko: And
this is where we'll write our unit tests.

24
00:01:56.330 --> 00:01:58.330
So we want to import unittest.

25
00:01:59.680 --> 00:02:05.080
We also want to import the code that
we're gonna test in a new file.

26
00:02:05.080 --> 00:02:06.776
So I'm gonna import,

27
00:02:06.776 --> 00:02:12.737
I'm gonna say from divisible,
&gt;&gt; Nina Zakharenko: So

28
00:02:12.737 --> 00:02:14.665
the name of our file.

29
00:02:14.665 --> 00:02:19.796
I'm gonna import the divisible_by method.

30
00:02:19.796 --> 00:02:26.577
I'm gonna write a new class, and
I'm gonna call it DivisibleTestCase.

31
00:02:26.577 --> 00:02:30.797
What does it need to inherit from
in order to be a valid test case?

32
00:02:30.797 --> 00:02:32.415
&gt;&gt; Student: unitTest.TestCase.

33
00:02:32.415 --> 00:02:34.521
&gt;&gt; Nina Zakharenko: That's right,
unittest.TestCase.

34
00:02:36.303 --> 00:02:39.199
&gt;&gt; Nina Zakharenko: And now I can go ahead
and start writing some tests in here.

35
00:02:43.430 --> 00:02:46.030
&gt;&gt; Nina Zakharenko: Remember,
the test has to start with test_ or

36
00:02:46.030 --> 00:02:47.503
it's not going to be run.

37
00:02:47.503 --> 00:02:52.415
So I'm gonna say test_divisible_by,

38
00:02:52.415 --> 00:02:55.368
I'm gonna pass in self.

39
00:02:55.368 --> 00:02:59.416
I'm gonna use the assertTrue assertion.

40
00:02:59.416 --> 00:03:05.408
That if I call divisible_by
with the arguments of 10 and

41
00:03:05.408 --> 00:03:08.473
2, it should be true, and,

42
00:03:14.082 --> 00:03:16.964
&gt;&gt; Nina Zakharenko: Let's say I want to

43
00:03:16.964 --> 00:03:24.172
test that assert true,
that divisible_by for

44
00:03:24.172 --> 00:03:27.963
10 and 3 is also true.

45
00:03:27.963 --> 00:03:33.140
And I'm gonna put in a, if __name__ ==

46
00:03:33.140 --> 00:03:38.465
'__main__', just run this unit test.

47
00:03:38.465 --> 00:03:44.400
Call the main method on
the unittest module here.

48
00:03:44.400 --> 00:03:47.432
And it knows how to do the rest.

49
00:03:47.432 --> 00:03:51.824
So let me use the command pallet,
run the Python file on my terminal, and

50
00:03:51.824 --> 00:03:53.051
I got an error here.

51
00:03:53.051 --> 00:03:56.040
It says,
AssertionError: False is not true.

52
00:03:56.040 --> 00:03:59.699
So this is a good opportunity for
me to take a look and say,

53
00:03:59.699 --> 00:04:04.137
is it my code that's not correct or
is it my test that's not correct?

54
00:04:04.137 --> 00:04:06.461
Got a failure.

55
00:04:06.461 --> 00:04:08.452
Well, it's actually my test
that's not correct, right?

56
00:04:08.452 --> 00:04:10.596
10 is not divisible by 3.

57
00:04:10.596 --> 00:04:16.441
So I'm gonna change this to false and
run the Python file in the repl again.

58
00:04:16.441 --> 00:04:18.973
And now I should see that one test ran

59
00:04:18.973 --> 00:04:23.563
and,
&gt;&gt; Nina Zakharenko: One test, or

60
00:04:23.563 --> 00:04:27.077
one test ran and it running successfully.

61
00:04:27.077 --> 00:04:34.785
I can also run,
&gt;&gt; Nina Zakharenko: This with the -v flag.

62
00:04:34.785 --> 00:04:38.978
Or if you pass in two dashes,
that would be the dash for both flag.

63
00:04:38.978 --> 00:04:42.373
And that will tell me exactly which
test ran and which test case.

64
00:04:47.776 --> 00:04:51.129
&gt;&gt; Nina Zakharenko: The nice thing here
is I can have multiple test cases,

65
00:04:51.129 --> 00:04:55.911
multiple tests, and I don't have to
do anything special besides for this.

66
00:04:55.911 --> 00:05:01.221
If I didn't have this check for
a main method here,

67
00:05:01.221 --> 00:05:06.285
remember that I could run
python -m unittest and

68
00:05:06.285 --> 00:05:09.510
pass in the name of the module.

69
00:05:09.510 --> 00:05:12.157
So there's no .py here.

70
00:05:12.157 --> 00:05:16.150
Oops, I'm sorry, divisible.

71
00:05:19.788 --> 00:05:21.514
&gt;&gt; Nina Zakharenko: There's no .py here.

72
00:05:21.514 --> 00:05:23.798
We're passing in the name of the module,

73
00:05:23.798 --> 00:05:26.089
which in this case is
the name of the file.

74
00:05:26.089 --> 00:05:28.263
Ran our test successfully, awesome.

