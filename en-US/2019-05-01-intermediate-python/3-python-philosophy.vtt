WEBVTT

1
00:00:00.022 --> 00:00:04.587
&gt;&gt; Nina Zakhareko: Python has an
interesting philosophy, The Zen of Python,

2
00:00:04.587 --> 00:00:10.340
it's a list collection of 19 software
principles written in poem form,

3
00:00:10.340 --> 00:00:15.089
that influence the design of
the Python Programming Language

4
00:00:15.089 --> 00:00:18.979
and,
&gt;&gt; Nina Zakhareko: Kinda really captures,

5
00:00:18.979 --> 00:00:20.471
I feel like the essence of it.

6
00:00:20.471 --> 00:00:25.943
It was published on a Python mailing
list in June of 1999 by Tim Peters.

7
00:00:25.943 --> 00:00:30.092
As we learned yesterday,
Python is 30 years old,

8
00:00:30.092 --> 00:00:36.332
Python 3 is 11 years old, so it's gonna
be old enough to vote soon, right?

9
00:00:36.332 --> 00:00:40.276
[LAUGH] So
a cute little Easter egg in Python,

10
00:00:40.276 --> 00:00:44.549
The Zen of Python is in
the Python interpreter.

11
00:00:44.549 --> 00:00:51.349
So you should all have your REPLs open,
type import this and press Enter.

12
00:00:51.349 --> 00:00:54.703
But I'm gonna talk through
some of the first principles,

13
00:00:54.703 --> 00:00:57.860
I recommend coming back and
looking at the rest later.

14
00:00:57.860 --> 00:01:02.165
So The Zen of Python starts with,
beautiful is better than ugly,

15
00:01:02.165 --> 00:01:06.316
explicit better than implicit,
simple better than complex,

16
00:01:06.316 --> 00:01:12.224
complex better than complicated, it's an
important one, an important distinction.

17
00:01:12.224 --> 00:01:17.864
Flat better than nested,
sparse is better than dense,

18
00:01:17.864 --> 00:01:24.707
readability counts, so
these are really important Python ideas.

19
00:01:24.707 --> 00:01:30.245
Simple is better than complex, generally
Python programmers prefer to be explicit

20
00:01:30.245 --> 00:01:35.471
and write simple, understandable, and
maintainable code, instead of maybe

21
00:01:35.471 --> 00:01:40.467
doing some ego flexing and writing
things that are unnecessarily complex.

22
00:01:40.467 --> 00:01:41.845
Sure as developers,

23
00:01:41.845 --> 00:01:46.905
we've all seen things that didn't just
didn't need to be that complicated.

24
00:01:46.905 --> 00:01:50.326
Readability counts,
making your code easy to read,

25
00:01:50.326 --> 00:01:53.221
avoiding single character variable names.

26
00:01:53.221 --> 00:01:57.321
Calling your functions with named
parameters where applicable,

27
00:01:57.321 --> 00:01:59.084
using good variable names.

28
00:02:01.752 --> 00:02:06.208
&gt;&gt; Nina Zakhareko: And this is really, I
feel like, really ties in hand with PEP 8.

29
00:02:06.208 --> 00:02:11.376
We learned about PEP 8 yesterday,
how it's an important style guide for

30
00:02:11.376 --> 00:02:16.893
Python developers because most good
Python code should look pretty similar.

31
00:02:16.893 --> 00:02:19.696
And that really helps in
terms of readability, right,

32
00:02:19.696 --> 00:02:22.215
you know all the imports
are going to be at the top.

33
00:02:22.215 --> 00:02:25.956
You know if something is named with camel
case then it's likely to be a class.

34
00:02:25.956 --> 00:02:29.978
Your variables are all lower class and
divided by underscores.

35
00:02:34.053 --> 00:02:39.017
&gt;&gt; Nina Zakhareko: I have a few
more fun Easter eggs to show you.

36
00:02:39.017 --> 00:02:42.797
So I'm going to start my REPL here.

37
00:02:47.842 --> 00:02:49.623
&gt;&gt; Nina Zakhareko: Let's see,
where did my REPL go?

38
00:02:49.623 --> 00:02:54.585
No, looks like my REPL crashed.

39
00:02:54.585 --> 00:02:59.991
So if this happens to you, if you see any,
weirdness, things aren't working as

40
00:02:59.991 --> 00:03:05.174
you're as expected, so set this trash
can here, and it'll blow that away.

41
00:03:05.174 --> 00:03:07.699
And let's try that again, awesome.

42
00:03:09.363 --> 00:03:15.474
&gt;&gt; Nina Zakhareko: Okay, so
our next Easter egg, we can do from __,

43
00:03:15.474 --> 00:03:23.863
remember those double underscores
are also called dunder in Python,

44
00:03:23.863 --> 00:03:30.699
from __future__ import braces,
&gt;&gt; Nina Zakhareko: That's not happening.

45
00:03:36.923 --> 00:03:42.247
&gt;&gt; Nina Zakhareko: And one of my favorite
Easter eggs if you import antigravity.

46
00:03:48.585 --> 00:03:51.031
&gt;&gt; Nina Zakhareko: Should
see a fun little XKCD.

47
00:03:51.031 --> 00:03:54.929
Maybe one of my favorites,
which just says, YOU'RE FLYING!

48
00:03:54.929 --> 00:03:56.223
HOW?

49
00:03:56.223 --> 00:03:57.839
PYTHON!

50
00:03:57.839 --> 00:04:00.184
I LEARNED IT LAST NIGHT!

51
00:04:00.184 --> 00:04:01.189
EVERYTHING IS SO SIMPLE!

52
00:04:01.189 --> 00:04:07.388
HELLO WORLD IS JUST print "Hello world!"
in Python 3, put parentheses around this.

53
00:04:07.388 --> 00:04:12.631
There's dynamic typing and there's
the white space, it's a whole new world.

54
00:04:12.631 --> 00:04:17.062
So if you ever need a little pick
me up just import antigravity.

