WEBVTT

1
00:00:00.138 --> 00:00:03.042
&gt;&gt; Nina Zakharenko: To make
our first basic Flask app,

2
00:00:03.042 --> 00:00:06.154
we're gonna need to install Flask.

3
00:00:07.493 --> 00:00:12.761
&gt;&gt; Nina Zakharenko: So to do that it's,
python -m pip install flask.

4
00:00:15.420 --> 00:00:19.201
&gt;&gt; Nina Zakharenko: And I already have it,
but you should see it downloading.

5
00:00:20.357 --> 00:00:23.039
&gt;&gt; Nina Zakharenko: Okay,
I'm gonna make a new file.

6
00:00:23.039 --> 00:00:25.555
And I'm gonna save it as app.py.

7
00:00:28.198 --> 00:00:33.073
&gt;&gt; Nina Zakharenko: And then,
&gt;&gt; Nina Zakharenko: The first

8
00:00:33.073 --> 00:00:35.766
thing I'm gonna need
to do is import Flask.

9
00:00:35.766 --> 00:00:40.695
So I'm gonna say from lowercase flask,
which is the package here,

10
00:00:40.695 --> 00:00:43.299
import Flask, which is the class.

11
00:00:44.960 --> 00:00:47.600
&gt;&gt; Nina Zakharenko: And
then I'm gonna make a new app object.

12
00:00:47.600 --> 00:00:50.343
I'm gonna say the app is
equal to the Flask class.

13
00:00:50.343 --> 00:00:53.719
And I'm gonna instantiate
it with vendor name.

14
00:01:00.280 --> 00:01:04.418
&gt;&gt; Nina Zakharenko: Now,
the way Flask knows how to handle

15
00:01:04.418 --> 00:01:08.826
requests is by specifying an app route.

16
00:01:08.826 --> 00:01:14.177
We're gonna use something called
a decorator to specify this route.

17
00:01:16.483 --> 00:01:19.896
&gt;&gt; Nina Zakharenko: And the way that
decorators work in Python is you put them

18
00:01:19.896 --> 00:01:21.937
above the function definition.

19
00:01:21.937 --> 00:01:28.298
So I'm gonna have a simple
hello_world method here.

20
00:01:28.298 --> 00:01:31.513
And I want it to return Hello World!

21
00:01:31.513 --> 00:01:36.673
But in order for Flask to know which
route to serve this from, I'm gonna

22
00:01:36.673 --> 00:01:42.533
have use the @ symbol, that's the symbol
for decorator, and say app.route.

23
00:01:44.096 --> 00:01:47.869
&gt;&gt; Nina Zakharenko: And I'm gonna
pass in a string here of just a /.

24
00:01:47.869 --> 00:01:50.837
That's the route for our application.

25
00:01:50.837 --> 00:02:00.078
Now if I save this file,
&gt;&gt; Nina Zakharenko: I'm

26
00:02:00.078 --> 00:02:06.194
gonna save this file as app.py or
as hello.py so I can use app.py later.

27
00:02:06.194 --> 00:02:12.453
So I'm gonna move this app.py to hello.py.

28
00:02:12.453 --> 00:02:17.421
And if you are not sure how
to do that from the terminal,

29
00:02:17.421 --> 00:02:20.445
you can just do Save As in VS Code.

30
00:02:20.445 --> 00:02:26.689
Okay, so to run my FLASK_APP,
&gt;&gt; Nina Zakharenko: I

31
00:02:26.689 --> 00:02:29.922
need to tell the Flask runner,

32
00:02:36.187 --> 00:02:39.292
&gt;&gt; Nina Zakharenko: Where
is my code contained?

33
00:02:39.292 --> 00:02:42.243
I'm gonna say it's contained in hello.py.

34
00:02:42.243 --> 00:02:45.168
And then I'm gonna say flask run.

35
00:02:45.168 --> 00:02:47.254
Let me try that again.

36
00:02:47.254 --> 00:02:51.606
So this brings up a local
server on our computer

37
00:02:51.606 --> 00:02:56.305
that's running our applications,
serving it.

38
00:02:56.305 --> 00:03:00.735
You don't wanna use this development
server in a production environment, right?

39
00:03:00.735 --> 00:03:03.535
It doesn't scale, it's just for testing.

40
00:03:03.535 --> 00:03:06.941
You wanna use the production
WSGI server instead.

41
00:03:06.941 --> 00:03:09.791
So just an FYI.

42
00:03:09.791 --> 00:03:13.056
Something like Gunicorn
would do the trick.

43
00:03:13.056 --> 00:03:19.059
A really great feature of VS Code is
I can put my mouse over this link.

44
00:03:19.059 --> 00:03:21.985
And it will tell me I can
Cmd + click to follow it.

45
00:03:21.985 --> 00:03:28.608
So if I do that, I should get my
Hello World Flask application here.

46
00:03:28.608 --> 00:03:30.326
Does everyone see the same thing?

47
00:03:33.496 --> 00:03:37.183
&gt;&gt; Nina Zakharenko: Okay,
&gt;&gt; Nina Zakharenko: So

48
00:03:37.183 --> 00:03:42.373
that is Flask Hello World,
It's pretty easy.

49
00:03:42.373 --> 00:03:45.537
Windows folks,
you're gonna have to try this out for me.

50
00:03:50.474 --> 00:03:53.157
&gt;&gt; Nina Zakharenko: $env in here, and

51
00:03:53.157 --> 00:03:58.537
just copy this in here, this commit.

52
00:04:03.462 --> 00:04:06.030
&gt;&gt; Nina Zakharenko: So for Windows folks,

53
00:04:06.030 --> 00:04:10.921
try $env:FLASK_APP,
&gt;&gt; Nina Zakharenko: =,

54
00:04:10.921 --> 00:04:16.014
and then these single quotes, 'hello.py'.

55
00:04:16.014 --> 00:04:23.442
And then this : and flask run.

56
00:04:23.442 --> 00:04:24.928
And let me know if that works.

57
00:04:24.928 --> 00:04:28.388
&gt;&gt; Speaker 2: Is that a semicolon or
a colon after the hello.py?

58
00:04:28.388 --> 00:04:29.358
&gt;&gt; Nina Zakharenko: It's a semicolon.

59
00:04:29.358 --> 00:04:31.036
&gt;&gt; Speaker 2: Semicolon, thank you.

60
00:04:31.036 --> 00:04:34.418
&gt;&gt; Nina Zakharenko: And
I'll just paste it up here.

61
00:04:34.418 --> 00:04:36.464
And I'll say Windows?

62
00:04:36.464 --> 00:04:38.126
Hello.

63
00:04:38.126 --> 00:04:40.141
&gt;&gt; Speaker 3: That works for me.

64
00:04:40.141 --> 00:04:40.890
&gt;&gt; Nina Zakharenko: Awesome.

65
00:04:40.890 --> 00:04:42.274
&gt;&gt; Speaker 2: Good to go, thank you.

66
00:04:42.274 --> 00:04:47.632
&gt;&gt; Nina Zakharenko: Awesome, okay, so
save this command somewhere handy.

67
00:04:47.632 --> 00:04:51.839
You'll be needing that for
the rest of the exercise.

68
00:04:51.839 --> 00:04:56.698
And I will put this at the top,
right here.

69
00:04:56.698 --> 00:05:00.193
And I'm gonna have to open my hello.py.

70
00:05:00.193 --> 00:05:01.537
Okay, here we go.

