WEBVTT

1
00:00:05.105 --> 00:00:08.900
&gt;&gt; Nina Zakharenko: Just a reminder, this
is what our final exercise looks like.

2
00:00:08.900 --> 00:00:12.895
We can select different languages here,
and then go and

3
00:00:12.895 --> 00:00:17.346
hit the,
&gt;&gt; Nina Zakharenko: GitHub search API and

4
00:00:17.346 --> 00:00:19.511
display the results.

5
00:00:19.511 --> 00:00:25.376
Pretty straightforward Flask app,
we're not using a database here,

6
00:00:25.376 --> 00:00:28.904
we're not really maintaining any state.

7
00:00:28.904 --> 00:00:34.378
We're just checking what the user
checked and unchecked at each request.

8
00:00:34.378 --> 00:00:35.781
Pretty easy peasy.

9
00:00:37.465 --> 00:00:42.690
&gt;&gt; Nina Zakharenko: Now,
let's go through how to implement this.

10
00:00:46.414 --> 00:00:52.102
&gt;&gt; Nina Zakharenko: I'm gonna exit out of
the development server that I was using,

11
00:00:52.102 --> 00:00:56.933
and I'm gonna run a command
called tree that's going

12
00:00:56.933 --> 00:01:01.566
to list the directory structure for
this chapter.

13
00:01:01.566 --> 00:01:07.375
If you're on Mac OS just know that,
&gt;&gt; Nina Zakharenko: Know

14
00:01:07.375 --> 00:01:12.719
that this utility doesn't come with Mac,
you have to install it.

15
00:01:12.719 --> 00:01:15.345
So at the root, we have api.py.

16
00:01:15.345 --> 00:01:19.697
I have exceptions.py where
I put my custom exception.

17
00:01:19.697 --> 00:01:25.485
I have models.py,
&gt;&gt; Nina Zakharenko: Where I

18
00:01:25.485 --> 00:01:29.242
put the model that stores
my GitHub repository.

19
00:01:31.125 --> 00:01:35.333
&gt;&gt; Nina Zakharenko: Then I have
a static folder with a favicon for

20
00:01:35.333 --> 00:01:40.467
my website,
CSS styles that I've provided for you.

21
00:01:40.467 --> 00:01:43.933
Please don't get the pitchfoks
out if my CSS isn't good.

22
00:01:43.933 --> 00:01:48.485
I'm one of those full stack developers.

23
00:01:48.485 --> 00:01:50.486
And then, we have a few templates.

24
00:01:50.486 --> 00:01:54.289
We have a template for
an error page and a template for

25
00:01:54.289 --> 00:01:58.185
our index page,
as well as some texts that we can run.

26
00:02:02.605 --> 00:02:06.878
&gt;&gt; Nina Zakharenko: Let's go through and
look at these files.

27
00:02:11.654 --> 00:02:16.793
&gt;&gt; Nina Zakharenko: Our exceptions.py
file is pretty straightforward.

28
00:02:19.826 --> 00:02:22.647
&gt;&gt; Nina Zakharenko: I have a class here,
and like you saw before,

29
00:02:22.647 --> 00:02:24.512
it inherits from Exception.

30
00:02:26.666 --> 00:02:29.912
&gt;&gt; Nina Zakharenko: In the constructor
I'm taking a status code, and

31
00:02:29.912 --> 00:02:34.331
if the status code was 403 it's
gonna say Rate limited reached.

32
00:02:34.331 --> 00:02:39.019
If the status code was any other type of
error status code it's just gonna print

33
00:02:39.019 --> 00:02:39.669
that out.

34
00:02:39.669 --> 00:02:47.966
And then I pass this new modified message
that I created to our super()._init.

35
00:02:51.262 --> 00:02:56.908
&gt;&gt; Nina Zakharenko: Looking at the models
file, we live coded this earlier.

36
00:02:56.908 --> 00:03:03.159
This class, the GithubRepo class, is used
to represent a single GitHub repository.

37
00:03:03.159 --> 00:03:09.596
So in my constructor I take the name,
the language, the number of stars, and

38
00:03:09.596 --> 00:03:15.156
I also return a handy string
representation in the __repr__.

39
00:03:17.807 --> 00:03:22.711
&gt;&gt; Nina Zakharenko: Now,
looking at api.py, this is where I put my

40
00:03:22.711 --> 00:03:28.975
create_query and
my repos_with_most_stars methods.

41
00:03:28.975 --> 00:03:33.974
And remember that we wrote methods
that look almost exactly like

42
00:03:33.974 --> 00:03:37.410
this in the intro to
Python final exercise.

43
00:03:37.410 --> 00:03:42.912
Going through these, for
creating a query I take

44
00:03:42.912 --> 00:03:48.692
a list of languages in
the minimum amount of stars.

45
00:03:48.692 --> 00:03:55.005
In yesterday's code we were
looping over each query,

46
00:03:55.005 --> 00:04:00.357
adding it on to the string
using concatenate,

47
00:04:00.357 --> 00:04:05.861
using this string join
is much more efficient.

48
00:04:05.861 --> 00:04:09.754
String concatenation is a pretty
inefficient operation, and

49
00:04:09.754 --> 00:04:11.888
using string join is much faster.

50
00:04:11.888 --> 00:04:15.726
So now we can make that same
query using an f string,

51
00:04:15.726 --> 00:04:19.299
for language,
going through each language and

52
00:04:19.299 --> 00:04:24.226
languages, stripping out any trailing or
leading white space.

53
00:04:24.226 --> 00:04:29.100
And then creating our new query
with just one concatenation, and

54
00:04:29.100 --> 00:04:34.076
concatenating the minimum number
of stars that we'd like to see.

55
00:04:34.076 --> 00:04:38.044
Now in the repos with most stars method,

56
00:04:38.044 --> 00:04:43.070
we get our query by using
that create query method.

57
00:04:43.070 --> 00:04:46.159
We have the same parameters.

58
00:04:46.159 --> 00:04:50.984
I've printed them out here, but
you don't need to do that in your code.

59
00:04:50.984 --> 00:04:54.796
I get the response by
using the request library.

60
00:04:54.796 --> 00:05:01.418
To get the resource at this
GitHub api search URL,

61
00:05:01.418 --> 00:05:06.158
passing in the parameters I set up.

62
00:05:06.158 --> 00:05:12.878
Now, if the status code was not 200,
that means if anything went wrong,

63
00:05:12.878 --> 00:05:18.128
I'm just gonna raise instance
of my GitHub API exception,

64
00:05:18.128 --> 00:05:21.914
passing in the response.status_code.

65
00:05:21.914 --> 00:05:25.367
Next, I get the JSON from the response.

66
00:05:25.367 --> 00:05:30.519
I get the items at the Items key,
and I'm just gonna use

67
00:05:30.519 --> 00:05:36.345
a list comprehension to return
an instance of my GitHub repo.

68
00:05:36.345 --> 00:05:39.157
A list of instances of
my GitHub repo class,

69
00:05:39.157 --> 00:05:43.261
passing in the name, the language,
and the star gazers count.

70
00:05:43.261 --> 00:05:48.528
And using a list comprehension to
do that for each item in items.

71
00:05:48.528 --> 00:05:50.500
Notice there is no main method here.

72
00:05:50.500 --> 00:05:53.186
We're not running our
code in the same file.

73
00:05:53.186 --> 00:05:58.620
Instead we're gonna be using this
as a library from our Flask app.

74
00:05:58.620 --> 00:06:02.995
Scrolling to the top,
notice that we imported requests so

75
00:06:02.995 --> 00:06:06.221
that we can use it as
an available library.

76
00:06:06.221 --> 00:06:10.885
We're also importing a few things
from our own custom classes, so

77
00:06:10.885 --> 00:06:14.560
our GitHubApiException and
our GitHubRepo model.

78
00:06:17.380 --> 00:06:21.100
&gt;&gt; Nina Zakharenko: Okay,
those are all the building blocks.

79
00:06:21.100 --> 00:06:27.983
Now, open up .py and
see how it all gets put together.

80
00:06:27.983 --> 00:06:34.225
For you Windows folks, I'm going to
put in additional instructions here,

81
00:06:34.225 --> 00:06:39.013
just so you have them in one
place with the final exercise.

82
00:06:40.979 --> 00:06:43.765
&gt;&gt; Nina Zakharenko: But
we have a few imports here as well.

83
00:06:43.765 --> 00:06:49.623
We're importing a few things from Flask,
we're importing the Flask class,

84
00:06:49.623 --> 00:06:56.637
we're importing render_template, and we're
also importing something called request,

85
00:06:56.637 --> 00:07:02.694
which gives us information about the
request that we are currently processing.

86
00:07:02.694 --> 00:07:09.019
From my API I'm also importing
this repos_with_most_stars method,

87
00:07:09.019 --> 00:07:16.575
and I'm importing my GitHubApiException so
that I can catch it, do something with it.

88
00:07:18.277 --> 00:07:21.531
&gt;&gt; Nina Zakharenko: And
creating a new app, a new Flask app here.

89
00:07:21.531 --> 00:07:24.389
By passing in under name.

90
00:07:24.389 --> 00:07:29.234
And then I'm making a list of available
languages that I want my users of

91
00:07:29.234 --> 00:07:32.321
my web application to
be able to choose from.

92
00:07:34.502 --> 00:07:38.547
&gt;&gt; Nina Zakharenko: And
I have an index method here.

93
00:07:38.547 --> 00:07:40.840
If you've noticed here at the top,

94
00:07:40.840 --> 00:07:44.365
my app.route takes a list
of methods that it accepts.

95
00:07:44.365 --> 00:07:50.196
So if I tried to call this route
with a method that is not accepted,

96
00:07:50.196 --> 00:07:54.768
like put,
my server's just gonna throw an error.

97
00:07:54.768 --> 00:07:59.099
Now, if the requested method was GET,
meaning we haven't submitted anything yet,

98
00:07:59.099 --> 00:08:01.159
we're not hitting that Submit button.

99
00:08:01.159 --> 00:08:04.741
I'm just gonna set
the selected_languages to all of

100
00:08:04.741 --> 00:08:07.453
the available_languages by default.

101
00:08:07.453 --> 00:08:12.487
If the method was 'POST' instead,
I'm gonna use

102
00:08:12.487 --> 00:08:17.533
that request variable that
I imported from Flask.

103
00:08:17.533 --> 00:08:22.401
That variable has a form which is attached

104
00:08:22.401 --> 00:08:26.243
to,
&gt;&gt; Nina Zakharenko: The form that I've

105
00:08:26.243 --> 00:08:28.986
used to submit to this endpoint.

106
00:08:28.986 --> 00:08:33.891
And there's a helper method
on this called getlist,

107
00:08:33.891 --> 00:08:38.586
and this tells me which form
I would like to look at.

108
00:08:41.505 --> 00:08:46.503
&gt;&gt; Nina Zakharenko: Now, I get my results
from the repos_with_most_stars method just

109
00:08:46.503 --> 00:08:50.497
like I did in my Introduction
to Python final exercise.

110
00:08:50.497 --> 00:08:54.586
This time, instead of passing
in all of the languages,

111
00:08:54.586 --> 00:08:58.679
I'm just gonna pass in the ones
that the user selected.

112
00:08:58.679 --> 00:09:03.897
Next, I'm gonna render my template so
the first argument to render template

113
00:09:03.897 --> 00:09:08.646
is index.HTML, we'll take a look
at that template in just a second.

114
00:09:08.646 --> 00:09:14.912
I'm also passing in which languages were
selected, so that when the page reloads,

115
00:09:14.912 --> 00:09:19.076
the languages that we had
checked off stay checked off.

116
00:09:19.076 --> 00:09:24.047
And I'm passing in that list of
all the available languages so

117
00:09:24.047 --> 00:09:28.444
that the check boxes know
whether they're selected or

118
00:09:28.444 --> 00:09:31.518
not and to display the check on or off.

119
00:09:31.518 --> 00:09:37.520
And lastly, I'm just passing in one
additional variable to the template,

120
00:09:37.520 --> 00:09:43.733
and that's our list of results which
contain those instances of GitHub repo.

121
00:09:43.733 --> 00:09:47.877
There's one last thing
that happens down here.

122
00:09:47.877 --> 00:09:50.389
I'm using another decorator.

123
00:09:50.389 --> 00:09:54.180
This one is called app.airhandler.

124
00:09:54.180 --> 00:09:59.440
And to this decorator I can
pass in an exception type, and

125
00:09:59.440 --> 00:10:06.575
just provide a single method that will
run if this class of exception occurs.

126
00:10:08.118 --> 00:10:12.329
&gt;&gt; Nina Zakharenko: And here I'm gonna
render a different type of template,

127
00:10:12.329 --> 00:10:13.477
error.html.

128
00:10:13.477 --> 00:10:18.769
And the message is just gonna be
the string representation of the error.

129
00:10:18.769 --> 00:10:23.282
Let's take a look at
what's in these templates.

130
00:10:23.282 --> 00:10:29.092
First, I'm going to open error.html
from my final exercise files,

131
00:10:29.092 --> 00:10:32.842
and we'll see that I
linked to a stylesheet.

132
00:10:32.842 --> 00:10:34.736
I have a div here.

133
00:10:34.736 --> 00:10:39.578
But really the most important
bit is I'm just gonna

134
00:10:39.578 --> 00:10:43.417
display the message that got passed in.

135
00:10:47.264 --> 00:10:51.648
&gt;&gt; Nina Zakharenko: One second,
let me close some of these files.

136
00:11:01.664 --> 00:11:05.153
&gt;&gt; Nina Zakharenko: And
I'm gonna open my app.py.

137
00:11:05.153 --> 00:11:08.094
Oops, that's not what I wanted.

138
00:11:08.094 --> 00:11:12.290
Sorry, one second, app.py is right here.

139
00:11:12.290 --> 00:11:20.253
And I'm gonna open my,
&gt;&gt; Nina Zakharenko: error.html file.

140
00:11:20.253 --> 00:11:26.025
Okay, let me see if I can display these
side by side with my current font size.

141
00:11:29.908 --> 00:11:34.233
&gt;&gt; Nina Zakharenko: Okay, so
here I'm returning render_template,

142
00:11:34.233 --> 00:11:39.967
I'm passing in the message which
is the exception that was thrown,

143
00:11:39.967 --> 00:11:44.593
and here in my template I'm
looking at that message and

144
00:11:44.593 --> 00:11:48.031
with these curly brace printing it out.

145
00:11:48.031 --> 00:11:52.994
Okay, now I'm gonna open
index.html from the,

146
00:11:54.616 --> 00:11:56.267
&gt;&gt; Nina Zakharenko: Final Exercise

147
00:11:56.267 --> 00:11:58.811
Templates directory.

148
00:11:58.811 --> 00:12:04.456
And we'll see I have a title here,
but the body is pretty strong.

149
00:12:04.456 --> 00:12:11.566
Or, the body of this is pretty short,
pretty brief, pretty easy to read.

150
00:12:13.421 --> 00:12:15.997
&gt;&gt; Nina Zakharenko: So
here is the form action that I'm taking.

151
00:12:15.997 --> 00:12:21.540
I'm using this built-in that's
available in templates.

152
00:12:21.540 --> 00:12:25.157
And I'm asking for the URL for

153
00:12:25.157 --> 00:12:31.152
this index,
&gt;&gt; Nina Zakharenko: Method

154
00:12:31.152 --> 00:12:32.615
that I've created right here.

155
00:12:32.615 --> 00:12:36.773
So I don't have to do any
weird things with paths,

156
00:12:36.773 --> 00:12:41.134
and I'm specifying my form
that the method is POST.

157
00:12:41.134 --> 00:12:44.947
Now you'll remember that
here in my index method,

158
00:12:44.947 --> 00:12:50.631
I'm rendering a template and I'm passing
in a few things to this template.

159
00:12:50.631 --> 00:12:55.638
The selected languages,
the available languages and the results.

160
00:12:55.638 --> 00:13:01.721
So, I'm gonna loop through each
language in my available languages.

161
00:13:01.721 --> 00:13:07.727
And I'm gonna do, I'm gonna set the value
to the language for that checkbox so

162
00:13:07.727 --> 00:13:12.732
that when I submit this form I have
that language available to me.

163
00:13:12.732 --> 00:13:16.108
And then I'm gonna return checked.

164
00:13:16.108 --> 00:13:20.271
I'm gonna insert here checked if
the languages in the selected languages.

165
00:13:20.271 --> 00:13:24.755
Otherwise, the check box
is going to be unchecked.

166
00:13:24.755 --> 00:13:29.570
And finally, I'm gonna print
out the label for the language.

167
00:13:29.570 --> 00:13:34.573
That generates this section right here.

168
00:13:34.573 --> 00:13:37.829
Lastly, I just have a Submit button.

169
00:13:37.829 --> 00:13:43.495
Remember that for
templates I'm gonna have to end this for

170
00:13:43.495 --> 00:13:50.183
statement, because just like HTML there's
an opening tag and a closing tag.

171
00:13:50.183 --> 00:13:55.824
Okay, now I'm gonna print out my
popular GitHub repos by stars.

172
00:13:55.824 --> 00:14:01.621
And all I'm doing here, again,
I passed in results to my template.

173
00:14:01.621 --> 00:14:05.225
If there are no results,
I don't wanna bother rendering the table,

174
00:14:05.225 --> 00:14:06.478
it's gonna look ugly.

175
00:14:06.478 --> 00:14:09.430
So instead,
I'm just gonna print out No Results.

176
00:14:09.430 --> 00:14:13.852
Otherwise, I'm going to
print out the table header.

177
00:14:13.852 --> 00:14:18.435
Now I'm gonna loop through
every result in my results.

178
00:14:18.435 --> 00:14:22.820
And for
table data I'll pull the result name,

179
00:14:22.820 --> 00:14:28.225
result language, and
result.num*, and that's it.

180
00:14:28.225 --> 00:14:34.119
This is a 60-line index.html file.

181
00:14:34.119 --> 00:14:39.707
And that's all that we need to
generate this functional website.

182
00:14:42.564 --> 00:14:46.668
&gt;&gt; Nina Zakharenko: This is the kind
of project that you can easily do in

183
00:14:46.668 --> 00:14:47.952
an afternoon.

184
00:14:47.952 --> 00:14:52.875
One more thing I wanted to show you,
I wrote a few simple unit

185
00:14:52.875 --> 00:14:57.511
tests,
&gt;&gt; Nina Zakharenko: For my application.

186
00:14:57.511 --> 00:15:01.663
I also wrote a few unit tests for
this simple application,

187
00:15:01.663 --> 00:15:04.386
those tests are included in the repo.

188
00:15:04.386 --> 00:15:08.062
So if you'd like,
take a look at those and run them and

189
00:15:08.062 --> 00:15:10.282
let's make sure our app works.

