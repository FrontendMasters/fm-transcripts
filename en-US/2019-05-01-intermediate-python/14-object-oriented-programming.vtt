WEBVTT

1
00:00:00.160 --> 00:00:03.110
&gt;&gt; Nina Zakharenko: Next, we're gonna
talk about, classes, objects and

2
00:00:03.110 --> 00:00:04.817
object oriented programming.

3
00:00:04.817 --> 00:00:06.794
Object oriented programming,

4
00:00:06.794 --> 00:00:10.389
it allows us to represent our
code in a much different way.

5
00:00:10.389 --> 00:00:13.677
Organized intaclasses.

6
00:00:13.677 --> 00:00:19.617
The concept of object oriented
programming, it's a language model or

7
00:00:19.617 --> 00:00:25.565
a paradigm where properties or
behaviors are organized into objects.

8
00:00:25.565 --> 00:00:28.043
Some programming languages,

9
00:00:28.043 --> 00:00:33.220
they encourage a more procedural style,
like COBOL or BASIC.

10
00:00:33.220 --> 00:00:36.040
You just go through
everything step by step.

11
00:00:36.040 --> 00:00:40.160
You're not jumping to other parts
of the program necessarily.

12
00:00:41.200 --> 00:00:42.891
But more modern languages,

13
00:00:42.891 --> 00:00:47.542
they tend to adopt an object oriented
style to organize things into objects and

14
00:00:47.542 --> 00:00:51.567
provide methods for those objects
to communicate with each other.

15
00:00:54.515 --> 00:00:58.689
&gt;&gt; Nina Zakharenko: So what is an object?

16
00:00:58.689 --> 00:01:02.970
In Python, it can be a function,
it could be a variable, a property,

17
00:01:02.970 --> 00:01:04.213
it could be a class.

18
00:01:04.213 --> 00:01:06.958
Everything in Python is an object.

19
00:01:06.958 --> 00:01:09.595
It's a very kind of important concept.

20
00:01:09.595 --> 00:01:13.085
When you think of some type of languages,
like Java,

21
00:01:13.085 --> 00:01:17.595
it has these, what you can think of,
primitive types, like an int.

22
00:01:18.845 --> 00:01:23.127
&gt;&gt; Nina Zakharenko: And that int
is just kind of a very bare bones,

23
00:01:23.127 --> 00:01:29.599
kind of more down to the level type of,
&gt;&gt; Nina Zakharenko: Type,

24
00:01:29.599 --> 00:01:31.602
it's not an object.

25
00:01:31.602 --> 00:01:39.096
Whereas in Python, as we saw,
even the integers, they're an object.

26
00:01:39.096 --> 00:01:41.884
You can call a method on them.

27
00:01:41.884 --> 00:01:44.710
So in Python everything is an object.

28
00:01:48.543 --> 00:01:51.698
&gt;&gt; Nina Zakharenko: You can think of the
objects that we're gonna make kind of like

29
00:01:51.698 --> 00:01:52.857
a generic container.

30
00:01:54.781 --> 00:01:58.496
&gt;&gt; Nina Zakharenko: We can even make our
own objects that maybe look something like

31
00:01:58.496 --> 00:01:59.000
a list.

32
00:01:59.000 --> 00:02:01.980
To do that,
you would have to use magic methods,

33
00:02:01.980 --> 00:02:06.281
which I'm not going to cover today,
but something to keep into mind.

34
00:02:08.632 --> 00:02:11.758
&gt;&gt; Nina Zakharenko: And if you wanted
to make your object that looks kind of

35
00:02:11.758 --> 00:02:14.682
a list,
you might have some helper methods on it.

36
00:02:14.682 --> 00:02:19.025
Like code that might be
executed on the whole list or

37
00:02:19.025 --> 00:02:22.060
maybe some of the items on the list.

38
00:02:22.060 --> 00:02:27.532
Just a way to group
these concepts together.

39
00:02:27.532 --> 00:02:31.638
Python buys pretty heavily into
this object oriented model.

40
00:02:31.638 --> 00:02:35.012
But that doesn't mean that you
always have to use objects or

41
00:02:35.012 --> 00:02:36.574
classes in your programs.

42
00:02:36.574 --> 00:02:38.452
Python also, as we've seen,

43
00:02:38.452 --> 00:02:41.496
works perfectly fine in
a procedural sort of way.

44
00:02:43.402 --> 00:02:45.312
&gt;&gt; Nina Zakharenko: Like
a scripting language,

45
00:02:45.312 --> 00:02:49.940
where one command is just executed
one after the other like a recipe.

46
00:02:49.940 --> 00:02:54.064
But as you get familiar with
object oriented programming,

47
00:02:54.064 --> 00:02:59.263
as you read more Python code written
by other people, you'll really learn

48
00:02:59.263 --> 00:03:04.791
to help you encapsulate your thinking,
encapsulate your code into objects for

49
00:03:04.791 --> 00:03:08.613
better organization, and
readability, and reuse.

50
00:03:08.613 --> 00:03:13.126
And maintainability,
code maintainability is always important.

51
00:03:13.126 --> 00:03:16.467
So objects in Python,
they're center stage.

52
00:03:16.467 --> 00:03:20.370
Representing not just the data, but
the overall structure of your programs.

