WEBVTT

1
00:00:00.230 --> 00:00:06.811
&gt;&gt; Nina Zakharenko: We want to catch
the more specific exception first.

2
00:00:06.811 --> 00:00:11.433
&gt;&gt; Nina Zakharenko: So I'm going to
make a little function here, and

3
00:00:11.433 --> 00:00:14.266
I'm gonna call it division.

4
00:00:14.266 --> 00:00:21.061
And it's gonna take the number to divide,
Sam and I just call that num.

5
00:00:21.061 --> 00:00:26.645
And Iâ€™m gonna say, try: result =,

6
00:00:26.645 --> 00:00:33.808
let me make sure my
indentation is correct here.

7
00:00:33.808 --> 00:00:38.797
Okay, result is going
to equal to the value

8
00:00:38.797 --> 00:00:43.377
of pi divided by the user input number.

9
00:00:43.377 --> 00:00:49.136
We're going to except
on ArithmeticError and

10
00:00:49.136 --> 00:00:54.460
print out that we had
a general math error.

11
00:00:57.300 --> 00:01:01.580
Otherwise, I'm also going to accept
on a special type of exception called

12
00:01:01.580 --> 00:01:04.010
the ZeroDivisionError.

13
00:01:05.450 --> 00:01:08.581
Why might this come up?

14
00:01:08.581 --> 00:01:12.545
&gt;&gt; Speaker 2: If you divide by zero and
the number is zero.

15
00:01:12.545 --> 00:01:14.638
&gt;&gt; Nina Zakharenko: Yes,
so if the number is zero.

16
00:01:14.638 --> 00:01:18.878
Yeah, and I can say, Divide by zero error.

17
00:01:18.878 --> 00:01:23.965
&gt;&gt; Speaker 3: I think you're gonna have
problems because the arithmetic is spelled

18
00:01:23.965 --> 00:01:29.080
wrong and you missed the first i, and so-
&gt;&gt; Nina Zakharenko: Thank you.

19
00:01:29.080 --> 00:01:36.310
Let me just put that back in real quickly.

20
00:01:36.310 --> 00:01:41.740
So result = 3.14 / num and
except Arithmetic.

21
00:01:41.740 --> 00:01:44.020
Got that right.

22
00:01:44.020 --> 00:01:45.208
Yeah, Error.

23
00:01:45.208 --> 00:01:48.906
Okay, and I'm gonna print out, math error.

24
00:01:50.889 --> 00:01:55.871
&gt;&gt; Nina Zakharenko: And
then I'm gonna except on

25
00:01:55.871 --> 00:01:59.830
ZeroDivisionError.

26
00:01:59.830 --> 00:02:06.093
And I'm going to print, zero division.

27
00:02:06.093 --> 00:02:10.840
Okay, if I try to do division by 0,

28
00:02:10.840 --> 00:02:13.200
we're gonna see something
a little bit unexpected.

29
00:02:14.990 --> 00:02:20.270
I'm going to get a math error, and
that's because the 0 division error

30
00:02:20.270 --> 00:02:26.410
is the more specific error, and
arithmetic error is the more general one.

31
00:02:26.410 --> 00:02:30.778
So by catching the more
general exception first,

32
00:02:30.778 --> 00:02:34.734
I swallowed the more
helpful error message.

33
00:02:34.734 --> 00:02:37.514
And to figure out this
exception hierarchy,

34
00:02:37.514 --> 00:02:39.792
you can look at the Python docs page.

35
00:02:44.273 --> 00:02:46.361
&gt;&gt; Nina Zakharenko: And check it out.

36
00:02:46.361 --> 00:02:50.920
There's a lot there,
the link is in the course website.

37
00:02:50.920 --> 00:02:57.632
In general, it's pretty bad to
catch exception in your code,

38
00:02:57.632 --> 00:03:02.571
because let's say I was
using the GitHub API,

39
00:03:02.571 --> 00:03:08.070
and I caught exception
when I tried to use it.

40
00:03:08.070 --> 00:03:14.390
I just completely lost context of
what the general exception was.

41
00:03:14.390 --> 00:03:20.640
And now I can't really change the flow
of my program by what I can do with it.

42
00:03:20.640 --> 00:03:28.666
The absolute worst thing that
you can do is try some code.

43
00:03:31.523 --> 00:03:33.523
&gt;&gt; Nina Zakharenko: Except on Exception.

44
00:03:36.253 --> 00:03:37.994
&gt;&gt; Nina Zakharenko: And then do nothing.

45
00:03:40.721 --> 00:03:43.460
&gt;&gt; Nina Zakharenko: Everything went
fine according to my code, right?

46
00:03:44.780 --> 00:03:48.820
So this is called
swallowing the exception.

47
00:03:48.820 --> 00:03:52.330
You should at least try to log it or
do something,

48
00:03:52.330 --> 00:03:56.990
maybe page your ops guy depending
on the severity of the error.

49
00:03:56.990 --> 00:04:02.060
But by doing this you'll
really lose a lot of context.

50
00:04:02.060 --> 00:04:06.850
And again, generally don't catch
base exception, or not generally,

51
00:04:06.850 --> 00:04:09.840
but definitely don't do that ever, ever.

52
00:04:09.840 --> 00:04:11.300
That's even the worst form of this.

