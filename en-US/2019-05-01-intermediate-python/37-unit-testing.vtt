WEBVTT

1
00:00:00.350 --> 00:00:01.850
&gt;&gt; Nina Zakharenko: There
are a few different frameworks for

2
00:00:01.850 --> 00:00:04.525
writing them in Python,
they're all pretty similar.

3
00:00:04.525 --> 00:00:08.670
But we're gonna focus on the one that
comes with the standard library,

4
00:00:08.670 --> 00:00:14.180
it's pretty easy to remember,
it's called unittest.

5
00:00:14.180 --> 00:00:20.120
unittest is both a framework for
writing tests as well as a test runner.

6
00:00:20.120 --> 00:00:25.890
Meaning that you can use it to execute
your test and return the results as well.

7
00:00:27.580 --> 00:00:33.054
In order to write unittest
using this standard library,

8
00:00:33.054 --> 00:00:38.070
we need to write our test as
methods within a class and

9
00:00:38.070 --> 00:00:43.087
we need to use a series of
assertions that come in this

10
00:00:43.087 --> 00:00:47.782
unittest library not using
the assert key word.

11
00:00:49.851 --> 00:00:54.338
&gt;&gt; Nina Zakharenko: Okay,
let's make a file here,

12
00:00:54.338 --> 00:00:59.162
I'm gonna call it multiply.py.

13
00:00:59.162 --> 00:01:05.110
Actually, I'm just gonna call it mult.py,
keep me from having more typo errors.

14
00:01:05.110 --> 00:01:08.020
And I'm gonna define a function
here called multiply.

15
00:01:08.020 --> 00:01:12.905
And it's gonna take an x and
y and it's gonna return,

16
00:01:17.263 --> 00:01:18.286
&gt;&gt; Nina Zakharenko: x times y.

17
00:01:18.286 --> 00:01:22.744
Okay, fair enough.

18
00:01:22.744 --> 00:01:27.753
Now let's write a test case for it.

19
00:01:27.753 --> 00:01:31.939
Usually, these tests are in
a separate file, usually for

20
00:01:31.939 --> 00:01:36.042
larger projects,
in a separate module called tests, so

21
00:01:36.042 --> 00:01:39.986
that you can cleanly break
them up from your code base.

22
00:01:39.986 --> 00:01:44.843
But for this example, I'm just
gonna put them right in this file,

23
00:01:44.843 --> 00:01:49.293
so, I'll say usually tests live
in a test file, or module,

24
00:01:54.057 --> 00:01:56.600
&gt;&gt; Nina Zakharenko: Not inline.

25
00:01:56.600 --> 00:02:00.948
And again, usually imports live
at the top of the file but

26
00:02:00.948 --> 00:02:04.036
we're suspending our disbelief here.

27
00:02:04.036 --> 00:02:10.557
Some I'm gonna import the unittest
library, and close my terminal there.

28
00:02:13.745 --> 00:02:18.175
&gt;&gt; Nina Zakharenko: I'm going to
import it at the top here because

29
00:02:18.175 --> 00:02:22.030
it's driving my nit pickiness crazy.

30
00:02:23.220 --> 00:02:27.554
So,
&gt;&gt; Nina Zakharenko: We need to write our

31
00:02:27.554 --> 00:02:34.290
tests in a separate class, and
I'm gonna call this class TestMultiply.

32
00:02:35.880 --> 00:02:40.604
Calling it TestMultiply doesn't
actually make it a unittest class,

33
00:02:40.604 --> 00:02:45.016
in order to do that we need to
subclass from unittest.TestCase.

34
00:02:48.836 --> 00:02:53.341
&gt;&gt; Nina Zakharenko: That signifies that
this class contains a collection of unit

35
00:02:53.341 --> 00:02:53.968
tests.

36
00:02:53.968 --> 00:02:57.583
Now, let's write our very first unittest.

37
00:02:57.583 --> 00:03:02.866
Your unit test methods needs
to start with test underscore,

38
00:03:02.866 --> 00:03:06.710
or they won't run they won't be picked up.

39
00:03:06.710 --> 00:03:10.069
And we are gonna pass in self here.

40
00:03:10.069 --> 00:03:14.790
And I'm gonna say the test value for
x is 5 and

41
00:03:14.790 --> 00:03:17.779
the test value for y is 10.

42
00:03:17.779 --> 00:03:22.382
And we want to use
the assertions provided to us by

43
00:03:22.382 --> 00:03:27.149
the unittest,
&gt;&gt; Nina Zakharenko: By the unit

44
00:03:27.149 --> 00:03:29.070
test class here.

45
00:03:29.070 --> 00:03:33.140
To find the fullest of assertions,
take a look at the Python documentation,

46
00:03:33.140 --> 00:03:36.400
I'll make sure that there's a link
to it in the class website.

47
00:03:36.400 --> 00:03:39.113
But until then there's kind
of a few standard ones.

48
00:03:39.113 --> 00:03:42.281
And if you're using VS code and
your interpreter is set up correctly,

49
00:03:42.281 --> 00:03:44.770
you'll actually get some
helpful hints here.

50
00:03:44.770 --> 00:03:48.611
They all start with assert,
which is great.

51
00:03:48.611 --> 00:03:51.994
If I wanna test assertEqual,

52
00:03:51.994 --> 00:03:57.631
I can even hit the,
&gt;&gt; Nina Zakharenko: If I call it

53
00:03:57.631 --> 00:04:02.637
without arguments, VS code will
give me this little pop up, and

54
00:04:02.637 --> 00:04:08.033
it's gonna tell me that,
what the arguments are, first, second.

55
00:04:08.033 --> 00:04:13.186
Message is a optional parameter
here that we can pass in if we

56
00:04:13.186 --> 00:04:18.250
want to have our own custom
error message when this fails.

57
00:04:18.250 --> 00:04:22.361
And we wanna fail if the two
objects are unequal as

58
00:04:22.361 --> 00:04:26.083
determined by the equals operator, okay?

59
00:04:26.083 --> 00:04:34.278
So we're gonna call multiply,
&gt;&gt; Nina Zakharenko: With our test_x and

60
00:04:34.278 --> 00:04:40.952
our test_y, and,
&gt;&gt; Nina Zakharenko: This

61
00:04:40.952 --> 00:04:42.385
should equal 50, right?

62
00:04:46.218 --> 00:04:48.151
&gt;&gt; Nina Zakharenko: If we just
have a few simple unittests,

63
00:04:48.151 --> 00:04:51.220
we don't care about having
something called a test runner.

64
00:04:51.220 --> 00:04:55.757
The test runner helps you discover
tests in multiple directories.

65
00:04:55.757 --> 00:05:01.301
So I can just say if __name__ ==
" __main__ " put in some code and

66
00:05:01.301 --> 00:05:02.802
a main method here.

67
00:05:02.802 --> 00:05:06.862
So if I run this multiply,
or mult.py file directly,

68
00:05:06.862 --> 00:05:10.055
I want to call the unittest.main method.

69
00:05:15.523 --> 00:05:17.859
&gt;&gt; Nina Zakharenko: Okay,
and let's run this.

70
00:05:20.280 --> 00:05:23.689
We'll see that it ran one test and
the test was okay.

71
00:05:26.929 --> 00:05:31.905
&gt;&gt; Nina Zakharenko: Let's
introduce a bug into our code.

72
00:05:31.905 --> 00:05:34.769
I'm gonna change our multiply
method to do addition instead.

73
00:05:36.580 --> 00:05:39.370
Now when I run this test, or

74
00:05:39.370 --> 00:05:44.300
run this file that has our test in it,
it's gonna say failed.

75
00:05:44.300 --> 00:05:46.792
And the failures were one failure.

76
00:05:46.792 --> 00:05:48.574
Ran one test, and it failed one test.

77
00:05:53.799 --> 00:05:59.825
&gt;&gt; Nina Zakharenko: If I provided
a custom error message here that optional

78
00:05:59.825 --> 00:06:06.188
argument,
&gt;&gt; Nina Zakharenko: Should

79
00:06:06.188 --> 00:06:08.983
see a little bit more information there.

80
00:06:08.983 --> 00:06:14.277
So we got AssertionError 15 was not
equal to 50, it should be 50, right?

81
00:06:14.277 --> 00:06:18.413
So this will help us
catch bugs in our code.

82
00:06:18.413 --> 00:06:21.399
A few important concepts here, test case.

83
00:06:21.399 --> 00:06:26.113
The class must be a subclass
your own test case

84
00:06:26.113 --> 00:06:30.740
must be a subclass of unittest.TestCase.

85
00:06:30.740 --> 00:06:34.490
The names of your functions
must begin with test.

86
00:06:34.490 --> 00:06:38.503
And because these tests usually
live in a separate test file or

87
00:06:38.503 --> 00:06:43.376
a module not in line, don't forget to
import the code that you wanna test.

88
00:06:46.200 --> 00:06:49.732
&gt;&gt; Nina Zakharenko: Okay, so running
your test, one common way of doing it,

89
00:06:49.732 --> 00:06:51.657
we kinda saw, was using this.

90
00:06:54.320 --> 00:06:57.272
&gt;&gt; Nina Zakharenko: Triggering
unittest.main, if we're in our main

91
00:06:57.272 --> 00:07:02.927
context
&gt;&gt; Nina Zakharenko: If

92
00:07:02.927 --> 00:07:09.372
you skip this part,
&gt;&gt; Nina Zakharenko: The other

93
00:07:09.372 --> 00:07:15.120
way to run your unittest is
to use that python -n flag.

94
00:07:15.120 --> 00:07:19.370
Remember, that's says Python run
this next thing as a module.

95
00:07:19.370 --> 00:07:25.706
And you can pass in the name of
unittest along with your test file.

96
00:07:25.706 --> 00:07:26.709
And it'll go and

97
00:07:26.709 --> 00:07:31.658
do the same thing even though I never said
anywhere to explicitly run these tests.

98
00:07:34.077 --> 00:07:39.276
&gt;&gt; Nina Zakharenko: When you're running
your unitest with a -n unittest,

99
00:07:39.276 --> 00:07:43.050
you can also, it has to be after the -n.

100
00:07:43.050 --> 00:07:47.111
You can provide a -v flag.

101
00:07:47.111 --> 00:07:52.220
And if we look at our input now,
&gt;&gt; Nina Zakharenko: We'll

102
00:07:52.220 --> 00:07:57.428
see that our output was a lot verbose,
instead of saying one test failed,

103
00:07:57.428 --> 00:08:01.468
now it shows us which test it was and
which class it was in.

