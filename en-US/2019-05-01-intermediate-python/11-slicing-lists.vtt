WEBVTT

1
00:00:00.250 --> 00:00:02.765
&gt;&gt; Nina Zakharenko: Python doesn't really
know how to represent this generator

2
00:00:02.765 --> 00:00:03.510
in any other way.

3
00:00:03.510 --> 00:00:06.465
It doesn't know what's in it until
you start looping through it.

4
00:00:07.660 --> 00:00:10.100
The other cool thing about generators is

5
00:00:10.100 --> 00:00:13.030
they don't necessarily have
to have an end, right?

6
00:00:14.130 --> 00:00:15.900
The structure is not in memory, so

7
00:00:15.900 --> 00:00:18.582
you can kind of be a little
loosey-goosey about it.

8
00:00:20.190 --> 00:00:27.290
A good way to think about generator
is the list has all the items in it.

9
00:00:27.290 --> 00:00:30.570
But a generator,
it only knows where it is right now, and

10
00:00:30.570 --> 00:00:32.350
it knows the very next step.

11
00:00:32.350 --> 00:00:34.880
It has no idea what happened in the past.

12
00:00:34.880 --> 00:00:37.350
It's got some weird amnesia.

13
00:00:37.350 --> 00:00:41.303
And it doesn't really know where
it's going in the future besides for

14
00:00:41.303 --> 00:00:42.443
the very next step.

15
00:00:42.443 --> 00:00:46.066
Does that make a little bit more sense?

16
00:00:46.066 --> 00:00:53.093
Okay, we talked a little bit
about slicing yesterday,

17
00:00:53.093 --> 00:01:00.830
but slicing is a way to create
sublists from larger lists.

18
00:01:00.830 --> 00:01:03.981
So let's say I had my_string.

19
00:01:03.981 --> 00:01:07.461
So a string is kind of
considered a sequence in Python.

20
00:01:15.164 --> 00:01:18.693
&gt;&gt; Nina Zakharenko: What
will my_string(0) return?

21
00:01:18.693 --> 00:01:19.436
&gt;&gt; Speaker 2: 'H'.

22
00:01:19.436 --> 00:01:20.188
&gt;&gt; Nina Zakharenko: 'H'.

23
00:01:23.389 --> 00:01:26.085
&gt;&gt; Nina Zakharenko: We also
looked at negative slicing.

24
00:01:26.085 --> 00:01:30.532
What will my_string[-1] return?

25
00:01:30.532 --> 00:01:31.032
&gt;&gt; Speaker 3: !.

26
00:01:32.225 --> 00:01:32.963
&gt;&gt; Nina Zakharenko: !, but

27
00:01:32.963 --> 00:01:39.400
we also learned that we can provide
two numbers into this range.

28
00:01:39.400 --> 00:01:42.490
So let's just say I wanted
to return the string hello.

29
00:01:42.490 --> 00:01:45.781
I can say zero, one, two, three, four.

30
00:01:48.957 --> 00:01:52.649
&gt;&gt; Nina Zakharenko: And I would put
in position 5 because just like

31
00:01:52.649 --> 00:01:57.119
range,
&gt;&gt; Nina Zakharenko: These

32
00:01:57.119 --> 00:01:59.510
are the first four
characters just like range.

33
00:01:59.510 --> 00:02:03.510
The second argument to
the subscript it's exclusive, so

34
00:02:03.510 --> 00:02:07.350
it does not include the character
that you put in there.

35
00:02:08.900 --> 00:02:15.711
We also know that when you're working with
either the first value of the list or

36
00:02:15.711 --> 00:02:20.270
the last value of the list,
that the 0 is optional.

37
00:02:20.270 --> 00:02:21.635
It gives us the same thing.

38
00:02:24.482 --> 00:02:30.080
&gt;&gt; Nina Zakharenko: So we can put
any numbers in here that we want.

39
00:02:30.080 --> 00:02:35.720
It'll give us a new copy of
those values from the string.

40
00:02:37.460 --> 00:02:45.824
So doing it with a list,
&gt;&gt; Nina Zakharenko: Renders

41
00:02:45.824 --> 00:02:47.260
the same results.

42
00:02:49.440 --> 00:02:54.978
Say I have a list of four items,
what we'll name 0 return?

43
00:02:54.978 --> 00:02:55.810
&gt;&gt; Speaker 3: Nina.

44
00:02:55.810 --> 00:02:59.272
&gt;&gt; Nina Zakharenko: Nina, and names[-1].

45
00:02:59.272 --> 00:03:00.433
&gt;&gt; Speaker 4: Jimmy.
&gt;&gt; Speaker 5: None.

46
00:03:00.433 --> 00:03:01.410
Nope, Jimmy.

47
00:03:01.410 --> 00:03:05.435
&gt;&gt; Nina Zakharenko: Jimmy,
it's the last item.

48
00:03:05.435 --> 00:03:09.090
What if I wanted the first
two items in the list?

49
00:03:09.090 --> 00:03:12.387
What would I put for
my second range variable?

50
00:03:12.387 --> 00:03:14.447
&gt;&gt; Speaker 3: 1?

51
00:03:14.447 --> 00:03:15.653
&gt;&gt; Nina Zakharenko: First two items.

52
00:03:15.653 --> 00:03:16.341
&gt;&gt; Speaker 2: 3?

53
00:03:16.341 --> 00:03:16.925
&gt;&gt; Nina Zakharenko: Would be 3.

54
00:03:16.925 --> 00:03:18.725
&gt;&gt; Speaker 4: 2?

55
00:03:18.725 --> 00:03:22.751
&gt;&gt; Nina Zakharenko: I'm sorry,
2, whoever corrected me,

56
00:03:22.751 --> 00:03:28.165
you were right because list
indexes start at 0, okay.

57
00:03:28.165 --> 00:03:30.974
And is this 0 optional or not?

58
00:03:30.974 --> 00:03:31.717
&gt;&gt; Speaker 4: It is.

59
00:03:31.717 --> 00:03:35.740
&gt;&gt; Nina Zakharenko: It is, okay.

60
00:03:35.740 --> 00:03:39.990
If I wanted to go to
the end of the string,

61
00:03:39.990 --> 00:03:43.490
I would start at 0, 1, 2, and

62
00:03:43.490 --> 00:03:49.873
I would go to,
&gt;&gt; Nina Zakharenko: I would go to 4.

63
00:03:49.873 --> 00:03:53.504
So that's the end of my list,
that's the length of it.

64
00:03:53.504 --> 00:03:57.066
Just like with 0, is this 4 optional?

65
00:03:57.066 --> 00:03:57.825
&gt;&gt; Speaker 2: Yes.

66
00:03:57.825 --> 00:04:01.761
&gt;&gt; Nina Zakharenko: It is, cuz we're
going all the way to the end, okay.

67
00:04:04.147 --> 00:04:09.025
&gt;&gt; Nina Zakharenko: One of the cool
useful uses for this substring, so

68
00:04:09.025 --> 00:04:16.590
if we have a list, let's say my list
names, and I reassign it to new_names.

69
00:04:16.590 --> 00:04:20.828
If I append a new value here,

70
00:04:20.828 --> 00:04:25.781
is it gonna change my names list?

71
00:04:27.637 --> 00:04:28.446
&gt;&gt; Nina Zakharenko: Will it?

72
00:04:28.446 --> 00:04:29.093
&gt;&gt; Speaker 3: Yes.

73
00:04:31.840 --> 00:04:36.110
&gt;&gt; Nina Zakharenko: It will, right,
cuz all I did is I changed the label here.

74
00:04:37.250 --> 00:04:39.350
I didn't make a new list, right?

75
00:04:39.350 --> 00:04:42.563
I just told Python these
things share a name now.

76
00:04:42.563 --> 00:04:47.350
They're pointed at the same thing, so-
&gt;&gt; Speaker 4: Can you print out names too?

77
00:04:49.420 --> 00:04:49.920
&gt;&gt; Nina Zakharenko: It's the same.

78
00:04:51.640 --> 00:04:55.464
So if I quickly wanted to
make a copy of my list so

79
00:04:55.464 --> 00:05:00.662
that I can do some operations on it and
not modify the original,

80
00:05:00.662 --> 00:05:03.817
let's say I had my list of names here.

81
00:05:11.034 --> 00:05:14.798
&gt;&gt; Nina Zakharenko: If we start at
the beginning of a sequence and

82
00:05:14.798 --> 00:05:18.170
we wanna take a slice, is 0 optional?

83
00:05:18.170 --> 00:05:19.657
&gt;&gt; Speaker 4: Yes.
&gt;&gt; Nina Zakharenko: Yes, okay,

84
00:05:19.657 --> 00:05:23.797
if we go to the end of the sequence,
is the last number,

85
00:05:23.797 --> 00:05:26.590
that last value, is that optional?

86
00:05:27.740 --> 00:05:33.110
It is, so if I put just the : here,
I'll get a copy of my list.

87
00:05:34.780 --> 00:05:39.989
And now I can say, new_names is
equal to a copy of my names list.

88
00:05:41.480 --> 00:05:44.980
Sorry, we got news_names but bear with me.

89
00:05:44.980 --> 00:05:51.144
If I append something to this now,
&gt;&gt; Nina Zakharenko: Will

90
00:05:51.144 --> 00:05:52.360
my names list change?

91
00:05:53.680 --> 00:06:00.540
No, but
my news_names I modified that, right?

92
00:06:03.932 --> 00:06:08.844
&gt;&gt; Nina Zakharenko: Okay, let's talk
about negative indexing a little bit.

93
00:06:11.565 --> 00:06:16.307
&gt;&gt; Nina Zakharenko: So
I had my_string here, "Hello World!".

94
00:06:19.244 --> 00:06:22.280
&gt;&gt; Nina Zakharenko: If I do
a negative index [-1] what do I get?

95
00:06:23.980 --> 00:06:25.991
&gt;&gt; Speaker 5: Exclamation point?

96
00:06:25.991 --> 00:06:28.104
&gt;&gt; Nina Zakharenko: What
about negative index [-2]?

97
00:06:28.104 --> 00:06:28.992
&gt;&gt; Speaker 5: d.

98
00:06:28.992 --> 00:06:31.201
&gt;&gt; Nina Zakharenko: It's a d, right.

99
00:06:31.201 --> 00:06:34.480
See where I'm getting here?

100
00:06:34.480 --> 00:06:35.913
&gt;&gt; Speaker 5: Kinda like it's circular.

101
00:06:35.913 --> 00:06:40.898
&gt;&gt; Nina Zakharenko: Yeah, so
-1 goes to the first last item,

102
00:06:40.898 --> 00:06:43.950
-2, kind of etc, etc.

103
00:06:45.290 --> 00:06:49.790
You can get kinda interesting here.

104
00:06:49.790 --> 00:06:55.800
You can go from the end, the length of
the string, to the fourth from the end

105
00:06:57.260 --> 00:07:02.870
and end up with some subset of the string.

106
00:07:02.870 --> 00:07:05.320
You can do the same thing for lists.

107
00:07:05.320 --> 00:07:09.710
You kinda rarely want to get too

108
00:07:09.710 --> 00:07:13.500
tricky with the substrings because
explicit is better than implicit.

109
00:07:13.500 --> 00:07:15.000
You want to be clear.

110
00:07:15.000 --> 00:07:17.898
But it's available to you, and
you might see this in Python code.

111
00:07:19.793 --> 00:07:22.480
&gt;&gt; Nina Zakharenko: Okay,
one last argument.

112
00:07:23.520 --> 00:07:30.335
Let's say I had a list of
the numbers from 0 to 9.

113
00:07:30.335 --> 00:07:34.839
I can quickly build that list with range,
right, and

114
00:07:34.839 --> 00:07:40.958
pass it into list and just looking at
our list, the numbers from 0 to 9.

115
00:07:45.158 --> 00:07:48.054
&gt;&gt; Nina Zakharenko: We know that
this will give us the whole list.

116
00:07:48.054 --> 00:07:52.350
There's one additional of
third argument to step, and

117
00:07:52.350 --> 00:07:54.020
you can kinda think about it like range.

118
00:07:54.020 --> 00:07:58.620
So the first argument to range,
the optional first argument, is the start.

119
00:07:58.620 --> 00:08:01.690
The second argument to range is the end.

120
00:08:01.690 --> 00:08:04.590
What's the third optional
argument to range?

121
00:08:04.590 --> 00:08:05.175
&gt;&gt; Speaker 2: Step.

122
00:08:05.175 --> 00:08:06.392
&gt;&gt; Speaker 5: Interval.

123
00:08:06.392 --> 00:08:09.140
&gt;&gt; Nina Zakharenko: It's a step,
yeah, interval or a step.

124
00:08:09.140 --> 00:08:14.577
So I can do the same thing here and
say, just give me every other one.

125
00:08:17.694 --> 00:08:21.932
&gt;&gt; Nina Zakharenko: One little other bit
of trickery here, what if the step was -1,

126
00:08:21.932 --> 00:08:24.027
what do you think that would do?

127
00:08:26.606 --> 00:08:27.870
&gt;&gt; Speaker 5: Tell it backwards?

128
00:08:27.870 --> 00:08:29.010
&gt;&gt; Nina Zakharenko: That's right, yeah.

129
00:08:30.230 --> 00:08:36.910
So going through the whole list,
stepping from the end to the beginning.

130
00:08:36.910 --> 00:08:38.440
So just a little bit of trickery there.

131
00:08:40.700 --> 00:08:47.392
Let's say I wanted to,
&gt;&gt; Nina Zakharenko: Go

132
00:08:47.392 --> 00:08:52.620
start from the first value and
let's look at my list again here.

133
00:08:54.330 --> 00:09:00.110
I wanted to start from the first value,
go to the sixth one,

134
00:09:00.110 --> 00:09:03.150
and then skip every other.

135
00:09:03.150 --> 00:09:09.705
I could use all three of
those arguments to range.

136
00:09:11.859 --> 00:09:15.203
&gt;&gt; Nina Zakharenko: And remember that
you can slice to get a subset of items

137
00:09:15.203 --> 00:09:18.690
from any data type that
maintains an order.

138
00:09:18.690 --> 00:09:20.939
So that would be your list and your tuple.

139
00:09:21.980 --> 00:09:30.703
Can you do this sort of sub sequencing
with a dictionary or a set?

140
00:09:30.703 --> 00:09:33.200
No, right, why?

141
00:09:33.200 --> 00:09:34.180
&gt;&gt; Speaker 2: Unordered.

142
00:09:34.180 --> 00:09:35.780
&gt;&gt; Nina Zakharenko: They're unordered,
right?

143
00:09:37.120 --> 00:09:42.740
So for the data structure,
if you can't subscript it by an index,

144
00:09:42.740 --> 00:09:45.770
and remember,
you can do this with the dictionary,

145
00:09:45.770 --> 00:09:49.590
only if the dictionary has a key of 0,
so that doesn't count.

146
00:09:49.590 --> 00:09:52.810
If you can do this to the data type,
then you can take a slice of it.

