WEBVTT

1
00:00:04.861 --> 00:00:07.551
&gt;&gt; Nina Zakharenko: In this
exercise on the standard library,

2
00:00:07.551 --> 00:00:12.036
you're gonna use the OS package and
the standard library to get a little

3
00:00:12.036 --> 00:00:17.580
bit more information about our local
directory and print out its contents.

4
00:00:17.580 --> 00:00:24.620
You're also going to use the sys package
to get information about our system,

5
00:00:24.620 --> 00:00:30.520
what platform we're on, and also accept
arguments into our Python scripts.

6
00:00:31.700 --> 00:00:38.352
So using the standard library I'm
going to make a new file here.

7
00:00:45.930 --> 00:00:52.795
&gt;&gt; Nina Zakharenko: And I'm gonna
import os, and I'll save that here,

8
00:00:52.795 --> 00:00:59.050
just in my pyworkshop,
call it lib_example.

9
00:01:01.380 --> 00:01:05.010
So oops, I did the wrong thing there.

10
00:01:07.248 --> 00:01:12.864
&gt;&gt; Nina Zakharenko: I want to do a file,
save as, want that to be a .py,

11
00:01:12.864 --> 00:01:16.679
otherwise VS Code doesn't know.

12
00:01:16.679 --> 00:01:23.756
Okay, so import os, what does os in
the standard library do, what is it for?

13
00:01:23.756 --> 00:01:24.579
&gt;&gt; Speaker 2: Operating system functions.

14
00:01:24.579 --> 00:01:27.500
&gt;&gt; Nina Zakharenko: Operating
system functions.

15
00:01:27.500 --> 00:01:31.090
So I can say, my_folder =, and

16
00:01:31.090 --> 00:01:36.670
I can use the os module to get the cwd.

17
00:01:36.670 --> 00:01:39.379
CW stands for current working directory.

18
00:01:41.900 --> 00:01:45.980
And then I can print out,
Here are the files in:.

19
00:01:49.280 --> 00:01:58.960
Let me make that an f string and
say, {my_folder}.

20
00:01:58.960 --> 00:02:01.870
So this is gonna be
the name of the folder.

21
00:02:01.870 --> 00:02:05.459
Let me quickly run this.

22
00:02:05.459 --> 00:02:06.649
Sorry, not Start REPL.

23
00:02:06.649 --> 00:02:08.450
I'm gonna Select Run Python File
in Terminal.

24
00:02:10.340 --> 00:02:15.430
And because I started a new REPL session
in this terminal that VS Code doesn't

25
00:02:15.430 --> 00:02:20.130
really know what to track, I'm gonna
have to hit CTRL + C to exit the REPL.

26
00:02:20.130 --> 00:02:23.840
And then I should be able to
run my file in the terminal.

27
00:02:23.840 --> 00:02:27.350
So here is the full path, and

28
00:02:27.350 --> 00:02:31.990
then if I wanted to loop
through this folder,

29
00:02:31.990 --> 00:02:39.516
I can say with os.scandirectory my_folder,
as folder.

30
00:02:40.800 --> 00:02:44.000
And we haven't seen this
with syntax just yet,

31
00:02:44.000 --> 00:02:47.780
but what this is, is a context manager.

32
00:02:47.780 --> 00:02:52.500
And after the code in this
block is done running,

33
00:02:52.500 --> 00:02:57.920
the context manager is automatically
going to do some code clean up.

34
00:02:57.920 --> 00:03:01.450
So generally a good idea when
we're working with files because

35
00:03:01.450 --> 00:03:05.830
the system will wanna close
the handles to those files.

36
00:03:05.830 --> 00:03:11.965
So you'll also see this with syntax
when working with or writing to files.

37
00:03:11.965 --> 00:03:16.260
Okay, so I'm using the as label.

38
00:03:16.260 --> 00:03:20.430
We're gonna get the contents of scanning
this directory and assign it to folder.

39
00:03:21.690 --> 00:03:25.751
So I can say for entry in folder,

40
00:03:25.751 --> 00:03:31.478
print out an f string of
the name of the entry.

41
00:03:34.284 --> 00:03:36.687
&gt;&gt; Nina Zakharenko: And
if I run this in my terminal,

42
00:03:36.687 --> 00:03:42.210
you'll see all of the files here,
the top level files in that directory.

43
00:03:48.117 --> 00:03:51.320
&gt;&gt; Nina Zakharenko: Sys is
another useful library.

44
00:03:51.320 --> 00:03:53.360
It's gonna give you
access to variables and

45
00:03:53.360 --> 00:03:57.810
functions, user maintained
by Python interpreter.

46
00:03:57.810 --> 00:04:00.100
So I'm gonna make a new file here.

47
00:04:00.100 --> 00:04:04.043
I'm gonna save it as sys_example.py.

48
00:04:04.043 --> 00:04:05.710
Here I'm gonna import sys.

49
00:04:07.290 --> 00:04:12.421
And there is a variable called
sysy.argv that is always

50
00:04:12.421 --> 00:04:17.780
set to the command line arguments
used to run this script.

51
00:04:18.920 --> 00:04:24.367
So I can say, I'm gonna print out,
We received these

52
00:04:24.367 --> 00:04:28.743
arguments.

53
00:04:28.743 --> 00:04:32.099
And I'm just gonna print them out.

54
00:04:34.123 --> 00:04:40.674
&gt;&gt; Nina Zakharenko: And then I can also
say, I'm gonna print out an f string and

55
00:04:40.674 --> 00:04:45.355
say, We're currently running on a, and

56
00:04:45.355 --> 00:04:49.903
use sys.platform, which will be set to

57
00:04:49.903 --> 00:04:54.750
the OS that you're using machine, okay.

58
00:04:54.750 --> 00:05:00.210
So if I run this in the terminal,
I'll see that we received these arguments,

59
00:05:00.210 --> 00:05:06.182
and there's already one value in this list
even though we didn't pass anything in.

60
00:05:08.891 --> 00:05:16.307
&gt;&gt; Nina Zakharenko: So running that
again without providing the full path,

61
00:05:16.307 --> 00:05:20.259
whati s this first argument?

62
00:05:20.259 --> 00:05:21.119
&gt;&gt; Speaker 2: It's the filename.

63
00:05:21.119 --> 00:05:22.221
&gt;&gt; Nina Zakharenko: It's the filename.

64
00:05:22.221 --> 00:05:28.865
So sys.argv is never empty, the zeroth
element is always the name of the file.

65
00:05:28.865 --> 00:05:34.475
And after that I can pass
in whatever values I want.

66
00:05:34.475 --> 00:05:38.656
And we'll see that we
received these arguments.

67
00:05:38.656 --> 00:05:44.104
And each of those space separated
arguments gets passed into sys.argv.

68
00:05:44.104 --> 00:05:47.821
Notice that even though I
passed in some integers here,

69
00:05:47.821 --> 00:05:50.206
the arguments are always strings.

70
00:05:53.785 --> 00:05:59.379
&gt;&gt; Nina Zakharenko: Okay, using PyPi,
if we don't wanna open the website and

71
00:05:59.379 --> 00:06:04.174
we kind of wanna deal
a little bit of exploration,

72
00:06:04.174 --> 00:06:08.074
PyPi has really helpful search method.

73
00:06:08.074 --> 00:06:12.650
So I could say, python-m pip.

74
00:06:12.650 --> 00:06:16.060
And pip is the tool associated with PyPi.

75
00:06:16.060 --> 00:06:18.610
And I can say pip search request.

76
00:06:18.610 --> 00:06:25.530
And this will go and get me a list of the
packages that have requests in the name.

77
00:06:27.240 --> 00:06:33.984
If I want to install a package, I could
say python -m pip install requests.

78
00:06:33.984 --> 00:06:36.803
And I already have it installed, but
then it will go ahead and do that.

