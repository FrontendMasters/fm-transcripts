WEBVTT

1
00:00:05.496 --> 00:00:07.084
&gt;&gt; Nina Zakharenko: For
this second exercise,

2
00:00:07.084 --> 00:00:09.714
we're gonna practice our comprehensions.

3
00:00:09.714 --> 00:00:12.074
Our list comprehensions and more.

4
00:00:12.074 --> 00:00:16.917
We're also gonna take a closer look
at slicing and use the zip function.

5
00:00:31.251 --> 00:00:31.883
&gt;&gt; Nina Zakharenko: Okay, so

6
00:00:31.883 --> 00:00:36.230
we talked about all sorts of
different types of comprehensions.

7
00:00:37.250 --> 00:00:39.680
Comprehension looks something like this.

8
00:00:41.060 --> 00:00:46.123
I can say,
give me all the even numbers from 0

9
00:00:46.123 --> 00:00:51.320
to 99 by looping through and
saying for num,

10
00:00:51.320 --> 00:00:58.666
let me say for num in range of 100
&gt;&gt; Nina Zakharenko: And

11
00:00:58.666 --> 00:01:02.754
going back to the beginning,
I know that I just want the number.

12
00:01:02.754 --> 00:01:04.150
I don't want anything special with it.

13
00:01:06.170 --> 00:01:10.918
&gt;&gt; Nina Zakharenko: If I wanted
to get just the even numbers,

14
00:01:10.918 --> 00:01:14.130
I would do a modulo check and

15
00:01:14.130 --> 00:01:19.451
say that if the num % 2 is 0, that's even.

16
00:01:19.451 --> 00:01:23.820
One important thing to remember
here is that you have to use

17
00:01:23.820 --> 00:01:28.646
the equality operator to check
that the value is explicitly 0.

18
00:01:28.646 --> 00:01:31.484
Otherwise, it's gonna be falsy.

19
00:01:31.484 --> 00:01:36.863
And you're gonna get
the odd values instead.

20
00:01:36.863 --> 00:01:39.074
Okay, there we go.

21
00:01:39.074 --> 00:01:41.775
I'm gonna assign this to a variable.

22
00:01:47.534 --> 00:01:52.663
&gt;&gt; Nina Zakharenko: And
I'm gonna use something from this

23
00:01:52.663 --> 00:01:58.117
standard library, the random method.

24
00:01:58.117 --> 00:02:01.578
Itâ€™s gonna help me get a random number.

25
00:02:01.578 --> 00:02:04.564
In the REPL, you can type import random.

26
00:02:04.564 --> 00:02:08.334
But know that when you
do imports Python files,

27
00:02:08.334 --> 00:02:11.643
you always wanna put your imports at top.

28
00:02:11.643 --> 00:02:15.906
And as an aside, there is a command in

29
00:02:15.906 --> 00:02:21.001
the command pallet call organize imports.

30
00:02:21.001 --> 00:02:24.857
Once you start making Python
files with a lot of the imports,

31
00:02:24.857 --> 00:02:28.346
it'll just organize them in
a really nice way for you.

32
00:02:29.894 --> 00:02:34.458
&gt;&gt; Nina Zakharenko: So,
&gt;&gt; Nina Zakharenko: I want to make

33
00:02:34.458 --> 00:02:39.138
a dictionary where
the key is the number and

34
00:02:39.138 --> 00:02:44.990
then the value is just
a random number from 0 to 99.

35
00:02:44.990 --> 00:02:51.001
So to get a random number,
I can say random.randint.

36
00:02:51.001 --> 00:02:55.191
And let's say I didn't remember
what this method did or

37
00:02:55.191 --> 00:03:00.730
what the arguments were, what can I use
to get me a little bit of guidance?

38
00:03:00.730 --> 00:03:01.995
&gt;&gt; Audience: Help?

39
00:03:01.995 --> 00:03:03.968
&gt;&gt; Nina Zakharenko: The help method, yeah.

40
00:03:03.968 --> 00:03:07.312
So I can pass this whole thing into help.

41
00:03:07.312 --> 00:03:12.050
And I'll say rand, a and b,
return a random integer in

42
00:03:12.050 --> 00:03:16.275
the range of a and b,
including both endpoints.

43
00:03:16.275 --> 00:03:21.949
Okay, so I'll call random.randint(0,
100) and

44
00:03:21.949 --> 00:03:28.676
call this multiple times,
get a new value each time that's random.

45
00:03:28.676 --> 00:03:33.085
So for my dictionary,
I'm gonna make a dictionary comprehension.

46
00:03:33.085 --> 00:03:39.009
And what's the difference in syntax
between a dictionary comprehension and

47
00:03:39.009 --> 00:03:40.748
a set comprehension?

48
00:03:40.748 --> 00:03:41.256
&gt;&gt; Audience: The colon.

49
00:03:41.256 --> 00:03:43.207
&gt;&gt; Nina Zakharenko: The colon, right.

50
00:03:43.207 --> 00:03:47.919
So on the left side of
the colon is my key.

51
00:03:47.919 --> 00:03:52.914
And on the right side, I'm gonna use this

52
00:03:52.914 --> 00:03:57.354
random.randint from 0 to 100.

53
00:03:57.354 --> 00:04:01.022
What am I looping over?

54
00:04:01.022 --> 00:04:01.646
&gt;&gt; Audience: The list.

55
00:04:01.646 --> 00:04:05.463
&gt;&gt; Nina Zakharenko: Right, my list,
so I'm gonna say for num in my_list.

56
00:04:10.320 --> 00:04:13.789
&gt;&gt; Nina Zakharenko: And
taking a look at my_dict, there we go.

57
00:04:13.789 --> 00:04:15.971
Each value is a random number.

58
00:04:20.012 --> 00:04:23.406
&gt;&gt; Nina Zakharenko: Let me look at
the values that were generated.

59
00:04:23.406 --> 00:04:26.161
You can do that with my_dict.values().

60
00:04:26.161 --> 00:04:29.681
And it's likely that there
are some duplicates here.

61
00:04:29.681 --> 00:04:31.016
Not entirely sure, right?

62
00:04:31.016 --> 00:04:32.581
The numbers are random.

63
00:04:32.581 --> 00:04:39.746
So if I wanted to quickly
de-duplicate this data structure,

64
00:04:39.746 --> 00:04:44.030
there's two ways that I could do it.

65
00:04:44.030 --> 00:04:49.215
The first would be to pass it into a set.

66
00:04:53.277 --> 00:04:56.051
&gt;&gt; Nina Zakharenko: Or
I can use a set comprehension too.

67
00:04:56.051 --> 00:05:00.088
Let's say if I wanted to make some
modifications before I de-duped it,

68
00:05:00.088 --> 00:05:02.815
that would be a good use for
a set comprehension.

69
00:05:02.815 --> 00:05:06.012
So here I could just say, num for

70
00:05:06.012 --> 00:05:11.452
num,
&gt;&gt; Nina Zakharenko: In my_dict.values.

71
00:05:17.049 --> 00:05:20.006
&gt;&gt; Nina Zakharenko: Whoops,
I'm sorry about that, there we go.

72
00:05:20.006 --> 00:05:23.242
And that'll do the same thing.

73
00:05:23.242 --> 00:05:30.850
For slicing, I'm gonna make a new
list with the numbers from 0 to 99.

74
00:05:30.850 --> 00:05:34.773
As we saw, I can do that in two ways.

75
00:05:34.773 --> 00:05:41.475
If I had the range from 0 to 100,
I can pass this into list.

76
00:05:43.667 --> 00:05:46.293
&gt;&gt; Nina Zakharenko: Or if I wanted
to make some modifications to it,

77
00:05:46.293 --> 00:05:48.930
then at list comprehension
would be a good way.

78
00:05:48.930 --> 00:05:55.858
I could just say, num for
num in range(100).

79
00:05:55.858 --> 00:05:57.923
And my modifications would be here, but

80
00:05:57.923 --> 00:06:00.182
I'm just gonna show you
this as an example.

81
00:06:00.182 --> 00:06:03.471
I'm gonna name this my_list.

82
00:06:03.471 --> 00:06:08.620
And I'm gonna take a slice of the list.

83
00:06:08.620 --> 00:06:12.435
In the REPL,
it's easy to see the slicing as you go.

84
00:06:12.435 --> 00:06:18.967
So the first thing I wanna do is take a
slice from the 30th value to the 69th one.

85
00:06:24.131 --> 00:06:29.724
&gt;&gt; Nina Zakharenko: If I wanted to do
the same slice but take every other value

86
00:06:29.724 --> 00:06:35.090
instead, what is the third
parameter I can add here?

87
00:06:35.090 --> 00:06:36.423
Every or other?

88
00:06:36.423 --> 00:06:37.394
&gt;&gt; Audience: [INAUDIBLE] 2.

89
00:06:37.394 --> 00:06:39.674
&gt;&gt; Nina Zakharenko: That would be 2.

90
00:06:39.674 --> 00:06:41.095
So that would give me every other one.

91
00:06:43.293 --> 00:06:48.176
&gt;&gt; Nina Zakharenko: If I had my
list here and I wanted to get all

92
00:06:48.176 --> 00:06:52.629
the values in it but just in reverse,

93
00:06:52.629 --> 00:06:56.809
what is a shortcut using slicing?

94
00:06:56.809 --> 00:06:57.678
&gt;&gt; Audience: Colon, colon..

95
00:06:57.678 --> 00:07:00.214
&gt;&gt; Nina Zakharenko: ::-1.

96
00:07:02.570 --> 00:07:05.952
&gt;&gt; Nina Zakharenko: From
the Introduction to Python course,

97
00:07:05.952 --> 00:07:11.369
what's another way that we can
reverse all of the values in a list?

98
00:07:11.369 --> 00:07:12.332
&gt;&gt; Audience: .reverse.

99
00:07:12.332 --> 00:07:13.472
&gt;&gt; Nina Zakharenko: .reverse, yeah.

100
00:07:13.472 --> 00:07:18.820
I can say my_list.reverse()
# does the same thing.

101
00:07:20.941 --> 00:07:24.798
&gt;&gt; Nina Zakharenko: What
is the difference here?

102
00:07:24.798 --> 00:07:28.091
This didn't return anything, right?

103
00:07:28.091 --> 00:07:29.329
&gt;&gt; Audience: Sorted in place.

104
00:07:29.329 --> 00:07:31.114
&gt;&gt; Nina Zakharenko: Sorted in place.

105
00:07:31.114 --> 00:07:33.163
Well, this returns a copy.

106
00:07:40.672 --> 00:07:44.824
&gt;&gt; Nina Zakharenko: Okay, I'm gonna
.reverse my list one more time so

107
00:07:44.824 --> 00:07:47.637
that we end up with the same thing.

108
00:07:47.637 --> 00:07:51.310
If I wanted it to return
a reverse copy of the list,

109
00:07:51.310 --> 00:07:54.113
what's one other way that I can do it?

110
00:07:54.113 --> 00:07:56.397
&gt;&gt; Audience: Sorted with the reverse true.

111
00:07:56.397 --> 00:07:56.897
&gt;&gt; Nina Zakharenko: Right.

112
00:07:59.560 --> 00:08:03.414
&gt;&gt; Nina Zakharenko: So,
&gt;&gt; Nina Zakharenko: Sorry,

113
00:08:03.414 --> 00:08:04.959
that's not quite right.

114
00:08:04.959 --> 00:08:09.622
It will work on this list of numbers, but

115
00:08:09.622 --> 00:08:15.255
that's because they're
all already in order.

116
00:08:15.255 --> 00:08:21.132
So just kind of to keep in
mind that when we use that,

117
00:08:21.132 --> 00:08:27.981
.reverse and this syntax will
return the list backwards.

118
00:08:27.981 --> 00:08:35.562
But if you use .sort or sorted and
pass in the reverse flag,

119
00:08:35.562 --> 00:08:39.968
it's gonna do a descending sort.

120
00:08:39.968 --> 00:08:43.220
So hard to see with a list of numbers, but

121
00:08:43.220 --> 00:08:47.344
easier to see with other
types of data structures.

122
00:08:47.344 --> 00:08:50.833
Okay, let's talk about zip.

123
00:08:50.833 --> 00:08:58.034
Yeah Nina, Max, Floyd, and we have Lloyd.

124
00:08:59.894 --> 00:09:05.355
&gt;&gt; Nina Zakharenko: And
they all have some scores in a game.

125
00:09:05.355 --> 00:09:09.491
Let's use random again here and ask for

126
00:09:09.491 --> 00:09:13.760
a random integer between 0 and 100.

127
00:09:13.760 --> 00:09:15.400
And I'm gonna loop through each name.

128
00:09:20.203 --> 00:09:21.366
&gt;&gt; Nina Zakharenko: No, I'm losing.

129
00:09:21.366 --> 00:09:25.966
[LAUGH] Okay, so if I wanted to zip up

130
00:09:25.966 --> 00:09:30.884
these values, I can say, for name,

131
00:09:30.884 --> 00:09:35.500
score in zip(names, scores).

132
00:09:35.500 --> 00:09:41.050
And print out an f string that says,

133
00:09:41.050 --> 00:09:46.421
{name} got {scores} points.

134
00:09:55.293 --> 00:09:57.659
&gt;&gt; Audience: You want
score instead of scores.

135
00:09:57.659 --> 00:09:58.159
&gt;&gt; Nina Zakharenko: Thank you.

136
00:10:02.617 --> 00:10:06.078
&gt;&gt; Nina Zakharenko: Group pair
programming is always the quickest way.

137
00:10:06.078 --> 00:10:08.959
Okay, there we go.

138
00:10:08.959 --> 00:10:14.012
What if I wanted a dictionary
of these names to their scores?

139
00:10:14.012 --> 00:10:22.575
I can just pass that zip into the dict
constructor and end up with that.

140
00:10:22.575 --> 00:10:27.198
Someone asked a really good question while
they were doing the exercise, and so

141
00:10:27.198 --> 00:10:31.071
I wanted to review that very quickly so
that we're all clear on it.

142
00:10:31.071 --> 00:10:35.953
So if I look at the zip of names and
scores and get back something that looks

143
00:10:35.953 --> 00:10:40.933
like this, this is usually a hint that
this type of object might be a what?

144
00:10:40.933 --> 00:10:41.804
&gt;&gt; Audience: Generator.

145
00:10:41.804 --> 00:10:44.571
&gt;&gt; Nina Zakharenko: Yeah,
it might be a generator.

146
00:10:44.571 --> 00:10:49.778
And note, for these built-in types,
if you make your own classes and

147
00:10:49.778 --> 00:10:53.045
you don't put in a string representation,

148
00:10:53.045 --> 00:10:58.092
you might also see something like this,
but it's not a generator.

149
00:10:58.092 --> 00:11:05.793
You just didn't go through with putting
a representation function in there.

150
00:11:05.793 --> 00:11:11.138
If I then assign this to a variable,

151
00:11:11.138 --> 00:11:16.462
so,
&gt;&gt; Nina Zakharenko: I'm

152
00:11:16.462 --> 00:11:19.782
gonna show you what happens
when a generator is exhausted.

153
00:11:19.782 --> 00:11:23.737
I'm gonna say that my_zip is the zip
of the names and the scores.

154
00:11:27.596 --> 00:11:34.630
&gt;&gt; Nina Zakharenko: If I loop through
this, and I'm just gonna say,

155
00:11:34.630 --> 00:11:39.273
for z in my_zip, print(z).

156
00:11:39.273 --> 00:11:43.760
And it went through each tuple
in the list, printed it out.

157
00:11:46.176 --> 00:11:48.663
&gt;&gt; Nina Zakharenko: We know that
these generator expressions,

158
00:11:48.663 --> 00:11:52.504
they only know kinda their current
value that they're returning.

159
00:11:52.504 --> 00:11:54.725
And they know just the next
step in the future.

160
00:11:54.725 --> 00:11:56.845
They don't know anything about the past.

161
00:11:56.845 --> 00:12:00.567
And they can't see far
ahead into the future,

162
00:12:00.567 --> 00:12:08.945
so,
&gt;&gt; Nina Zakharenko: If I

163
00:12:08.945 --> 00:12:14.064
try to do this again and
say, for z in my_zip,

164
00:12:14.064 --> 00:12:18.808
print(z), what do you think I'll see?

165
00:12:27.536 --> 00:12:32.280
&gt;&gt; Nina Zakharenko: Nothing, why is that?

166
00:12:32.280 --> 00:12:35.144
It's because-
&gt;&gt; Audience: Used it up as we go through?

167
00:12:35.144 --> 00:12:36.856
&gt;&gt; Nina Zakharenko: Yeah,
I've already used it up.

168
00:12:39.028 --> 00:12:40.941
&gt;&gt; Nina Zakharenko: It's empty.

169
00:12:40.941 --> 00:12:45.582
It knew that the last step was,
it finished the last step, and

170
00:12:45.582 --> 00:12:46.936
then it's gone.

171
00:12:46.936 --> 00:12:49.150
There's nothing more in it.

172
00:12:49.150 --> 00:12:51.473
So you can't reuse these generators.

173
00:12:51.473 --> 00:12:53.280
They're kind of a one-time
use sort of thing.

