WEBVTT

1
00:00:00.420 --> 00:00:04.190
&gt;&gt; Nina Zakharenko: These classes,
they take a,

2
00:00:04.190 --> 00:00:08.730
if we want to be able to instantiate
them and pass in arguments to them,

3
00:00:08.730 --> 00:00:14.560
like we did with int, we need to
make the special type of method.

4
00:00:14.560 --> 00:00:17.590
That's called the initializer method and

5
00:00:17.590 --> 00:00:23.330
it starts with these double underscores or
__init__.

6
00:00:23.330 --> 00:00:26.990
What do these double
underscores tend to mean?

7
00:00:26.990 --> 00:00:27.790
&gt;&gt; Speaker 2: Special.

8
00:00:27.790 --> 00:00:28.980
&gt;&gt; Nina Zakharenko: Yeah, special.

9
00:00:28.980 --> 00:00:32.353
So you shouldn't be calling this
initializer method directly,

10
00:00:32.353 --> 00:00:34.142
it kind of happens under the hood.

11
00:00:44.541 --> 00:00:48.765
&gt;&gt; Nina Zakharenko: I'm gonna print out
does run and I'm gonna access runs,

12
00:00:48.765 --> 00:00:52.640
like runs is a class variable, right?

13
00:00:52.640 --> 00:00:57.390
So if I run this code, well,
the syntax highlighter here

14
00:00:57.390 --> 00:00:59.720
is giving you a little bit of
a hint that I forgot something.

15
00:01:02.030 --> 00:01:05.742
&gt;&gt; Nina Zakharenko: Let's say
I didn't have this at all, and

16
00:01:05.742 --> 00:01:08.827
I'm just gonna print out new car.

17
00:01:13.889 --> 00:01:16.881
&gt;&gt; Nina Zakharenko: Syntax highlighter
is still giving us a little bit of

18
00:01:16.881 --> 00:01:17.980
a hint there.

19
00:01:17.980 --> 00:01:20.123
Why is that?

20
00:01:20.123 --> 00:01:24.355
It's because I'm missing something, and.

21
00:01:24.355 --> 00:01:25.172
&gt;&gt; Speaker 3: Self.

22
00:01:25.172 --> 00:01:25.811
&gt;&gt; Nina Zakharenko: Right.

23
00:01:27.550 --> 00:01:35.450
&gt;&gt; Nina Zakharenko: So
self is a required argument to __init__.

24
00:01:35.450 --> 00:01:38.690
It's kind of a hidden one,
you don't have to explicitly pass it in.

25
00:01:39.740 --> 00:01:41.480
I'm going to import some things, so

26
00:01:41.480 --> 00:01:46.840
that I can pull in the newest version
of my car class as I modify it.

27
00:01:46.840 --> 00:01:51.150
So if you're following along
with me in this by using a file,

28
00:01:51.150 --> 00:01:53.070
you'll have to do this as well.

29
00:01:53.070 --> 00:01:57.447
So you would have to import importlib and

30
00:01:57.447 --> 00:02:00.925
then say importlib.reload and

31
00:02:00.925 --> 00:02:06.732
the name of your package,
in this case, it's cars.

32
00:02:11.702 --> 00:02:13.640
&gt;&gt; Nina Zakharenko: If I
can just type today.

33
00:02:14.680 --> 00:02:16.390
The reload must be a module.

34
00:02:16.390 --> 00:02:20.840
Okay, so, to do this kind of
live reload in the [INAUDIBLE],

35
00:02:20.840 --> 00:02:23.730
not something that we usually do.

36
00:02:23.730 --> 00:02:26.720
Usually we're either working just in
the [INAUDIBLE] or just with files.

37
00:02:26.720 --> 00:02:31.650
I would need to import cars as a module,

38
00:02:33.130 --> 00:02:43.100
and then, I can say importlib.reload and
give the package name of cars.

39
00:02:44.290 --> 00:02:46.820
And that'll just reload
it from my session.

40
00:02:46.820 --> 00:02:47.910
Make sense?

41
00:02:47.910 --> 00:02:52.920
So now if I wanna make a new car,
I just have to say, cars.car,

42
00:02:52.920 --> 00:02:56.370
and to verify that the type
of that is a class type.

43
00:02:56.370 --> 00:03:00.459
Okay, so if I try to make a new car now.

44
00:03:11.785 --> 00:03:15.149
&gt;&gt; Nina Zakharenko: I'm not gonna be
able to access any sort of instance

45
00:03:15.149 --> 00:03:16.342
variables on it.

46
00:03:16.342 --> 00:03:21.983
And we'll see here that the linter
is giving me a hint on that.

47
00:03:21.983 --> 00:03:27.060
So in order to do that,
I'm gonna have to pass it in self.

48
00:03:33.564 --> 00:03:36.230
&gt;&gt; Nina Zakharenko: And
let's change things around a little bit.

49
00:03:36.230 --> 00:03:38.150
I'm just gonna close this.

50
00:03:38.150 --> 00:03:42.760
I don't want to specify a new
name every time I start my car.

51
00:03:42.760 --> 00:03:44.270
It doesn't make sense, right?

52
00:03:45.360 --> 00:03:49.850
When I make my new car instance, I should
be able to say what the type of it is,

53
00:03:49.850 --> 00:03:54.320
or I'm sorry, what the model of my car
is once, not every time I start it.

54
00:03:54.320 --> 00:03:55.960
It should just know.

55
00:03:55.960 --> 00:03:58.730
So I'm gonna move this name variable.

56
00:04:01.424 --> 00:04:04.193
&gt;&gt; Nina Zakharenko: I'm gonna
move that into the init.

57
00:04:07.897 --> 00:04:11.073
&gt;&gt; Nina Zakharenko: What do I need
to do to save it to the instance?

58
00:04:11.073 --> 00:04:13.255
&gt;&gt; Speaker 3: Self.name.

59
00:04:13.255 --> 00:04:15.437
&gt;&gt; Nina Zakharenko: Self.name=name.

60
00:04:15.437 --> 00:04:18.045
Now, it can take this out.

61
00:04:18.045 --> 00:04:22.082
Am I passing a name into
the start method here?

62
00:04:22.082 --> 00:04:29.040
I'm not, I still have to pass in self to
signify that this is an instance method.

63
00:04:30.360 --> 00:04:32.780
Now, I can still access self.name.

64
00:04:34.957 --> 00:04:38.484
&gt;&gt; Nina Zakharenko: But I don't have
access to it in this particular method,

65
00:04:38.484 --> 00:04:41.610
and it's all via the magic of self.

66
00:04:41.610 --> 00:04:44.369
So let me reload this.

67
00:04:48.857 --> 00:04:54.360
&gt;&gt; Nina Zakharenko: And
now I can say my_subaru = cars.Car.

68
00:04:54.360 --> 00:04:56.724
And I'm gonna give it a name of Subaru.

69
00:04:59.709 --> 00:05:01.710
&gt;&gt; Nina Zakharenko: And cool, new car.

70
00:05:01.710 --> 00:05:04.659
Now I can say my_subaru.runs.

71
00:05:06.851 --> 00:05:08.160
&gt;&gt; Nina Zakharenko: Starts.

72
00:05:08.160 --> 00:05:10.821
I don't know why I got runs into my head.

73
00:05:10.821 --> 00:05:12.608
Okay, my_subaru.starts.

74
00:05:12.608 --> 00:05:13.376
&gt;&gt; Speaker 3: Start.

75
00:05:13.376 --> 00:05:15.280
&gt;&gt; Nina Zakharenko: Start.

76
00:05:15.280 --> 00:05:18.680
Thank you guys, my_subaru.start.

77
00:05:18.680 --> 00:05:24.710
And start knows that the name of my car
is Subaru, via that instance variable.

78
00:05:26.500 --> 00:05:31.960
Okay, that's kind of
the basics of classes here.

79
00:05:33.300 --> 00:05:34.740
That self refers to an instance.

80
00:05:34.740 --> 00:05:40.900
&gt;&gt; Speaker 4: So the method start-
&gt;&gt; Nina Zakharenko: Oops, yes.

81
00:05:40.900 --> 00:05:46.580
&gt;&gt; Speaker 4: The way it reads self.name
is Linda's program initializes,

82
00:05:46.580 --> 00:05:49.160
that's where self.name.

83
00:05:49.160 --> 00:05:51.912
I'm just wondering how it reached ten.

84
00:05:51.912 --> 00:05:59.547
&gt;&gt; Nina Zakharenko: So let's say I
had a new car my_Mustang=cars.Car.

85
00:05:59.547 --> 00:06:02.007
What do we know about
positional arguments?

86
00:06:04.283 --> 00:06:06.632
&gt;&gt; Nina Zakharenko: They are required,
right, and

87
00:06:06.632 --> 00:06:09.800
they have to be passed in in order.

88
00:06:09.800 --> 00:06:12.890
So now if I try to make a new car, and

89
00:06:12.890 --> 00:06:17.205
I don't pass in that name argument,
what's gonna happen?

90
00:06:17.205 --> 00:06:19.132
I'm gonna get a tape error.

91
00:06:19.132 --> 00:06:24.363
It's gonna tell me that init is missing
one required positional argument of name.

92
00:06:28.530 --> 00:06:32.723
&gt;&gt; Nina Zakharenko: So I know that if I
have an instance of a car because I'm

93
00:06:32.723 --> 00:06:38.430
asking for it in the constructor,
and I'm setting self.name as name.

94
00:06:38.430 --> 00:06:41.565
I know that it's guaranteed
to be there as a variable.

95
00:06:43.359 --> 00:06:45.090
&gt;&gt; Nina Zakharenko: To
show you one more time,

96
00:06:45.090 --> 00:06:48.560
it looks like I didn't
correctly reload my module.

97
00:06:48.560 --> 00:06:54.610
So let me show you, if I make an init and

98
00:06:54.610 --> 00:07:00.360
that does not take self, and
let me correctly reload this time.

99
00:07:01.770 --> 00:07:07.140
if I say cars.Car, if I try to make a new
instance now, I'm gonna get a TypeError.

100
00:07:07.140 --> 00:07:11.410
It says init takes 0 positional
arguments but 1 was given.

101
00:07:13.080 --> 00:07:13.890
Weird, right?

102
00:07:15.360 --> 00:07:17.440
What position or argument was given?

103
00:07:17.440 --> 00:07:19.278
We didn't pass any in.

104
00:07:20.487 --> 00:07:21.213
&gt;&gt; Speaker 4: Self.

105
00:07:21.213 --> 00:07:23.472
&gt;&gt; Nina Zakharenko: Self,
exactly right, but

106
00:07:23.472 --> 00:07:27.310
that binding happens under the hood,
right?

107
00:07:27.310 --> 00:07:30.566
So when you make a new
instance of a class,

108
00:07:30.566 --> 00:07:34.858
Python will always pass in
self as the first argument.

109
00:07:37.226 --> 00:07:37.898
&gt;&gt; Nina Zakharenko: Okay.

110
00:07:50.471 --> 00:07:53.670
&gt;&gt; Nina Zakharenko: And so let me make
sure to pass in that name argument again.

