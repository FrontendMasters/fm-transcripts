WEBVTT

1
00:00:04.624 --> 00:00:09.364
&gt;&gt; Nina: We're gonna do an exercise
where we cover our syntax errors,

2
00:00:09.364 --> 00:00:11.800
our custom exceptions.

3
00:00:11.800 --> 00:00:17.430
Talk about try accept and see how
we might be able to reraise errors.

4
00:00:18.600 --> 00:00:24.710
Some common types of exceptions we’ve
seen, if I try to define a function

5
00:00:25.990 --> 00:00:31.816
and I don’t put in the right indentation,
I’ll get an indentation error here.

6
00:00:31.816 --> 00:00:38.330
We saw SyntaxError yesterday,

7
00:00:38.330 --> 00:00:44.280
it's a little bit harder to trigger
a syntax error for a list here.

8
00:00:44.280 --> 00:00:45.818
But let's say I did something like that,

9
00:00:45.818 --> 00:00:50.730
that's a SyntaxEerror, invalid syntax,
I didn't put in the value.

10
00:00:51.740 --> 00:00:56.250
If I tried to do this and
I forgot the comma between

11
00:00:56.250 --> 00:01:00.217
the last two values, also a SyntaxError.

12
00:01:00.217 --> 00:01:05.074
So it's some common exceptions
that we might see, 1 divided 0,

13
00:01:05.074 --> 00:01:08.818
that's that ZeroDivisonError
that we've seen.

14
00:01:14.812 --> 00:01:21.889
&gt;&gt; Nina: And some of those other
common exceptions are TypeError.

15
00:01:21.889 --> 00:01:25.747
So if we try to add an integer and
a string,

16
00:01:25.747 --> 00:01:29.730
that's an unsupported operand, right?

17
00:01:29.730 --> 00:01:36.290
We would need to call str on that number
before we can concatenate them together.

18
00:01:37.880 --> 00:01:42.262
ValueError, like we saw earlier, if I
try to make integer out of a string a,

19
00:01:42.262 --> 00:01:43.503
it's a ValueError.

20
00:01:43.503 --> 00:01:47.889
It's saying, I don't know what this,
is this a number?

21
00:01:47.889 --> 00:01:50.480
And lastly, the KeyError.

22
00:01:50.480 --> 00:01:57.845
So if I try to make a dictionary,
&gt;&gt; Nina: With a hello for

23
00:01:57.845 --> 00:02:02.672
the key and a world as the value for
that key, and

24
00:02:02.672 --> 00:02:09.330
I try to use a key that doesn't exist,
I'm gonna get a KeyError.

25
00:02:12.570 --> 00:02:18.150
In terms of raising our own exceptions,
the classes that we make,

26
00:02:20.258 --> 00:02:23.124
&gt;&gt; Nina: Should inherit from Exception and

27
00:02:23.124 --> 00:02:27.273
generally end with,
usually you'll see Error,

28
00:02:27.273 --> 00:02:31.380
very occasionally you'll see Exception.

29
00:02:31.380 --> 00:02:34.725
But usually naming these
error is more common,

30
00:02:34.725 --> 00:02:39.720
as you've seen the TypeError,
ValueError, KeyError, etc.

31
00:02:39.720 --> 00:02:46.860
So to follow that convention, let me name
this MyError, and subclass from Exception.

32
00:02:48.100 --> 00:02:54.811
Do I need to have anything in this class,
or can it just be empty, right?

33
00:02:54.811 --> 00:03:00.308
And to throw, or to raise this exception,
I use the raise keyword.

34
00:03:02.490 --> 00:03:04.065
&gt;&gt; Nina: And
that'll generate that trace back there.

35
00:03:07.268 --> 00:03:11.960
&gt;&gt; Nina: I can also make my own custom
exceptions a little bit fancier.

36
00:03:11.960 --> 00:03:17.460
So I can say, class MyError(Exception) and

37
00:03:17.460 --> 00:03:21.010
provide my own constructor.

38
00:03:21.010 --> 00:03:23.140
I'm going to say self and message.

39
00:03:27.722 --> 00:03:33.305
&gt;&gt; Nina: Now, I'm gonna change my message,

40
00:03:33.305 --> 00:03:40.157
and it's gonna say, ERROR system failure.

41
00:03:40.157 --> 00:03:47.762
That means it's a really serious error,
&gt;&gt; Nina: Followed by the message,

42
00:03:51.351 --> 00:03:55.939
&gt;&gt; Nina: Okay, and what do I need to do so

43
00:03:55.939 --> 00:04:01.594
that my new message is propagated up?

44
00:04:01.594 --> 00:04:02.770
&gt;&gt; Speaker 2: [INAUDIBLE] super.

45
00:04:02.770 --> 00:04:04.440
&gt;&gt; Nina: Super, right.

46
00:04:04.440 --> 00:04:07.640
And super will call
the constructor which class?

47
00:04:07.640 --> 00:04:08.250
&gt;&gt; Speaker 2: Exception.

48
00:04:08.250 --> 00:04:10.570
&gt;&gt; Nina: Exception, right.

49
00:04:10.570 --> 00:04:14.750
So we're gonna need to call .init there
and we're gonna pass in our new message.

50
00:04:17.090 --> 00:04:22.821
Now, if I raise myError,
is this gonna work?

51
00:04:25.621 --> 00:04:32.330
&gt;&gt; Nina: It won't because message is
required and I did not provide one.

52
00:04:32.330 --> 00:04:36.160
So I'm gonna provide a helpful
error message here, wow.

53
00:04:36.160 --> 00:04:41.618
Okay, and that's what we get.

54
00:04:41.618 --> 00:04:45.551
Programming is very serious,
it's very serious business,

55
00:04:45.551 --> 00:04:47.829
no laughing allowed in this class.

56
00:04:47.829 --> 00:04:49.755
Just kidding.

57
00:04:49.755 --> 00:04:53.500
Okay, try and except.

58
00:04:53.500 --> 00:05:00.201
If I have a dictionary here,
&gt;&gt; Nina: The key is "Hello" and

59
00:05:00.201 --> 00:05:02.190
the value for that key is world.

60
00:05:04.760 --> 00:05:09.888
I can try to print out my dictionary,

61
00:05:09.888 --> 00:05:13.220
look for random key.

62
00:05:13.220 --> 00:05:14.591
It's not in there, right?

63
00:05:14.591 --> 00:05:20.273
So what do I want to catch in
this instance, which type?

64
00:05:20.273 --> 00:05:21.268
KeyError, yeah.

65
00:05:25.634 --> 00:05:30.350
&gt;&gt; Nina: Oops,
I think I messed up my, let's see.

66
00:05:30.350 --> 00:05:33.590
Right here,
forgot that closing parenthesis.

67
00:05:33.590 --> 00:05:39.366
Okay, I'm gonna except on KeyError and
print, no key found.

68
00:05:43.265 --> 00:05:47.066
&gt;&gt; Nina: Okay, works as expected.

69
00:05:47.066 --> 00:05:53.090
I can also add a label to that exception
if I wanted to do anything with it.

70
00:05:53.090 --> 00:05:56.030
Generally more useful for
our own custom exceptions, right?

71
00:05:58.600 --> 00:06:04.770
Let's say I was going to try getting

72
00:06:06.950 --> 00:06:14.330
some random key here, and
I could except on KeyError.

73
00:06:14.330 --> 00:06:19.690
And how do I give a variable
name to that error.

74
00:06:19.690 --> 00:06:21.145
&gt;&gt; Speaker 2: As.
&gt;&gt; Nina: Right, as.

75
00:06:21.145 --> 00:06:25.920
I'm gonna say as e, and
now I can print out

76
00:06:25.920 --> 00:06:30.720
an f string and it will say, No!

77
00:06:30.720 --> 00:06:34.658
the key doesn't exist,

78
00:06:34.658 --> 00:06:38.414
and I can say error was.

79
00:06:48.597 --> 00:06:52.351
&gt;&gt; Nina: We can also reraise exceptions,
so

80
00:06:52.351 --> 00:06:56.982
catching a runtime error or something, and

81
00:06:56.982 --> 00:07:02.440
then raising one of our
own custom exceptions.

82
00:07:02.440 --> 00:07:05.270
That might be a good case for one.

83
00:07:07.020 --> 00:07:12.934
So I had the class, MyException.

84
00:07:15.821 --> 00:07:18.810
&gt;&gt; Nina: And
just as a reminder here,when I raise my

85
00:07:18.810 --> 00:07:23.588
exception,
&gt;&gt; Nina: And

86
00:07:23.588 --> 00:07:26.778
got that, oops I'm sorry,
I called it my_error.

87
00:07:30.044 --> 00:07:34.652
&gt;&gt; Nina: When I raised my error I get
this very helpful message, right?

88
00:07:34.652 --> 00:07:39.487
So,
&gt;&gt; Nina: Maybe what I

89
00:07:39.487 --> 00:07:44.472
wanna do here is I'm gonna
loop over a range of

90
00:07:44.472 --> 00:07:49.207
numbers and I'm gonna do that in reverse.

91
00:07:49.207 --> 00:07:54.681
So if I call range with 0 and

92
00:07:54.681 --> 00:08:00.155
5 and -1, and I'm gonna

93
00:08:00.155 --> 00:08:04.925
show you this as a list.

94
00:08:04.925 --> 00:08:08.474
Sorry, that's not what I want.

95
00:08:08.474 --> 00:08:14.603
I wanna start at 5, go to 0.

96
00:08:14.603 --> 00:08:20.005
So if I wanted to go through
a range of numbers in reverse,

97
00:08:20.005 --> 00:08:25.440
I would do the end value first,
the start value second.

98
00:08:25.440 --> 00:08:28.443
So kind of flip that around and
then pass in a negative number here.

99
00:08:32.172 --> 00:08:38.750
&gt;&gt; Nina: And as a reminder,
that second argument is not inclusive.

100
00:08:38.750 --> 00:08:44.240
And so if I want to go to 0,
I'm gonna have to put -1 there, right?

101
00:08:44.240 --> 00:08:46.984
So I'm going to loop over this.

102
00:08:49.992 --> 00:08:54.848
&gt;&gt; Nina: And say, for
num in this range, print out,

103
00:08:58.664 --> 00:09:00.742
&gt;&gt; Nina: 5 divided by the number.

104
00:09:03.545 --> 00:09:08.560
&gt;&gt; Nina: And eventually it's gonna get
to zero and say ZeroDivisionError.

105
00:09:08.560 --> 00:09:14.350
So instead,
&gt;&gt; Nina: I

106
00:09:14.350 --> 00:09:19.362
can put this whole thing in a try, right,

107
00:09:19.362 --> 00:09:24.100
and print out 5 divided by the number.

108
00:09:25.640 --> 00:09:30.473
Okay, just to show you,
we had MyError that I can raise,

109
00:09:30.473 --> 00:09:35.062
and,
&gt;&gt; Nina: I'm gonna loop over this list of

110
00:09:35.062 --> 00:09:35.810
numbers.

111
00:09:35.810 --> 00:09:37.420
And now I'm gonna put this in a try block.

112
00:09:37.420 --> 00:09:42.600
And I'm gonna say,
try to divide 5 by that number.

113
00:09:42.600 --> 00:09:47.346
I'm going to except on
the ZeroDivisionError.

114
00:09:50.099 --> 00:09:53.210
&gt;&gt; Nina: And then I'm gonna
raise a different type of error.

115
00:09:53.210 --> 00:09:58.058
I'm gonna raise MyError and say,

116
00:09:58.058 --> 00:10:02.746
lulz you tried to divide by zero.

117
00:10:06.593 --> 00:10:09.302
&gt;&gt; Nina: Okay, so
we'll see that in the REPL,

118
00:10:09.302 --> 00:10:15.510
it'll say during the handling of that
exception another exception occurred.

119
00:10:15.510 --> 00:10:20.159
You won't see that particular detail
in your tracebacks when you run Python

120
00:10:20.159 --> 00:10:21.310
programs.

121
00:10:21.310 --> 00:10:26.605
So this exception cused another one,
and I reraised,

122
00:10:26.605 --> 00:10:31.030
I caught this one and
I raised another one.

123
00:10:31.030 --> 00:10:33.519
And so what are you trying to do here?

