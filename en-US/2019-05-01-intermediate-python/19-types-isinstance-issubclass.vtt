WEBVTT

1
00:00:00.000 --> 00:00:04.979
&gt;&gt; Nina: Just like we've been using dir,
and help, and type,

2
00:00:04.979 --> 00:00:09.418
on the REPL there are a few
really helpful methods

3
00:00:09.418 --> 00:00:13.868
associated with instances and
classes as well.

4
00:00:13.868 --> 00:00:18.828
So we can check the type,
like we've been doing.

5
00:00:18.828 --> 00:00:24.693
So cars.Car, that's a type,

6
00:00:24.693 --> 00:00:29.692
the type(my_subaru),

7
00:00:29.692 --> 00:00:35.351
is this class itself, right?

8
00:00:35.351 --> 00:00:42.295
So just like we did with int,
the type of int is a class type.

9
00:00:42.295 --> 00:00:48.038
The type of an instance of
int is the class itself.

10
00:00:48.038 --> 00:00:52.370
There's a built in method called
isInstance to help us answer

11
00:00:52.370 --> 00:00:57.466
the question of, is this particular
instance of this particular type.

12
00:00:57.466 --> 00:01:01.463
So this is just built in, you don't
have to import it from any where.

13
00:01:01.463 --> 00:01:07.415
I can ask is the instance 42 of type int,
I'll get True.

14
00:01:07.415 --> 00:01:12.767
IsInstance of hello world,
is this a string?

15
00:01:12.767 --> 00:01:13.760
&gt;&gt; Speaker 2: Yes.

16
00:01:13.760 --> 00:01:20.304
&gt;&gt; Nina: Yes, IsInstance 42 a string?

17
00:01:20.304 --> 00:01:23.343
No, it's not.

18
00:01:23.343 --> 00:01:30.859
IsInstance my_subaru, an int?

19
00:01:30.859 --> 00:01:36.983
No, if I ask isinstance(my_subaru,

20
00:01:36.983 --> 00:01:42.572
cars.Car), it's true, right?

21
00:01:42.572 --> 00:01:45.069
We saw that earlier when
we looked at the types.

22
00:01:47.418 --> 00:01:51.722
&gt;&gt; Nina: Just kind of a funny,
interesting factoid here,

23
00:01:51.722 --> 00:01:54.904
don't use this in production code.

24
00:01:54.904 --> 00:02:01.169
If I check isInstance of a boolean

25
00:02:01.169 --> 00:02:06.324
with int, I'll see true.

26
00:02:09.218 --> 00:02:13.350
&gt;&gt; Nina: So
we talked about how the boolean,

27
00:02:13.350 --> 00:02:17.629
the truthiness value of 0 is false.

28
00:02:17.629 --> 00:02:22.725
The truthiness of any number but
0 is true.

29
00:02:22.725 --> 00:02:27.884
Booleans were added in Python,
later on, after integers.

30
00:02:27.884 --> 00:02:32.371
And they wanted to kind of make
sure that this new language feature

31
00:02:32.371 --> 00:02:34.096
minimized disruption.

32
00:02:34.096 --> 00:02:37.770
And so booleans are a subclass of int.

33
00:02:40.724 --> 00:02:43.821
&gt;&gt; Nina: And again, don't do this, but

34
00:02:43.821 --> 00:02:49.000
you can add them together,
it's not a syntax error.

35
00:02:51.839 --> 00:02:56.249
&gt;&gt; Speaker 2: So, Nina, this is why if you
have a set and you have 0, 1, True, False,

36
00:02:56.249 --> 00:02:59.419
you actually only get 0 and
1 back as the duplicate.

37
00:03:01.878 --> 00:03:07.875
&gt;&gt; Nina: Oops,
that's not what I wanted to do.

38
00:03:07.875 --> 00:03:09.282
&gt;&gt; Speaker 2: So that's why.

39
00:03:09.282 --> 00:03:13.690
&gt;&gt; Nina: Yeah, don't do this in
production code, it's pretty bad.

40
00:03:18.333 --> 00:03:21.361
&gt;&gt; Nina: One place you might
find this a little bit useful,

41
00:03:21.361 --> 00:03:25.337
this isn't in the course website,
just to digress a little bit.

42
00:03:25.337 --> 00:03:31.148
There are two really useful
methods called all and any.

43
00:03:31.148 --> 00:03:35.145
So any you can pass in a list and
it'll say,

44
00:03:38.800 --> 00:03:43.115
&gt;&gt; Nina: Are any of these values truthy?

45
00:03:43.115 --> 00:03:44.848
And this is really weird, right?

46
00:03:44.848 --> 00:03:46.321
It's kind of hard to read.

47
00:03:46.321 --> 00:03:52.319
I even find it hard to remember
that -1 is truthy in Python, right?

48
00:03:52.319 --> 00:03:57.771
So the better way of doing this would

49
00:03:57.771 --> 00:04:02.690
be True, False, True, True.

50
00:04:02.690 --> 00:04:05.410
And then you can say
are any of these true?

51
00:04:05.410 --> 00:04:08.714
You can also use all and
ask, are all of these true?

52
00:04:08.714 --> 00:04:10.540
And you'll get False.

53
00:04:10.540 --> 00:04:15.441
So anyway, interesting little factoid.

54
00:04:15.441 --> 00:04:20.949
And everything in Python is
a subclass of this kind of greater

55
00:04:20.949 --> 00:04:25.924
built in type that we don't
really use called object.

56
00:04:30.671 --> 00:04:35.252
&gt;&gt; Nina: .So integers, strings, booleans,
under the head, they're all objects.

