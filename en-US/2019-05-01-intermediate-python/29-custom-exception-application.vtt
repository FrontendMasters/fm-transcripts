WEBVTT

1
00:00:00.340 --> 00:00:07.053
&gt;&gt; Nina Zakharenko: Let's write
a custom exception for our GitHub API.

2
00:00:09.488 --> 00:00:13.958
&gt;&gt; Nina Zakharenko: I'm gonna make a new
class here, or a new Python file here and

3
00:00:13.958 --> 00:00:17.400
I'm gonna call it exceptions.py.

4
00:00:17.400 --> 00:00:22.180
As you organize your Python code you'll
see that this is kind of a common practice

5
00:00:22.180 --> 00:00:28.163
of putting a lot of your custom
exceptions in an exceptions module.

6
00:00:28.163 --> 00:00:32.228
So I'm gonna call it GitHubAPIError,

7
00:00:32.228 --> 00:00:37.771
usually ending these custom
sub-classes an error or

8
00:00:37.771 --> 00:00:44.620
exception is the norm, so
that you know exactly how to use it.

9
00:00:44.620 --> 00:00:48.979
What do I use as the base class?

10
00:00:48.979 --> 00:00:50.343
&gt;&gt; Speaker 2: Exceptions.

11
00:00:50.343 --> 00:00:54.189
&gt;&gt; Nina Zakharenko: Exception,
&gt;&gt; Nina Zakharenko: And

12
00:00:54.189 --> 00:00:58.015
I'm gonna have a constructor here and

13
00:00:58.015 --> 00:01:03.516
going back to our final exercise,
looking here we're

14
00:01:03.516 --> 00:01:09.030
raising a RuntimeError,
that's not great, right?

15
00:01:09.030 --> 00:01:11.696
And so
one of those built-in exception classes,

16
00:01:11.696 --> 00:01:16.819
we're not,
&gt;&gt; Nina Zakharenko: Really doing the right

17
00:01:16.819 --> 00:01:21.366
thing cuz all sorts of different other
scenarios might cause a run time error.

18
00:01:25.951 --> 00:01:28.960
&gt;&gt; Nina Zakharenko: So, something we might
wanna pass in here is this status code

19
00:01:28.960 --> 00:01:30.436
that we got back from the API.

20
00:01:32.558 --> 00:01:35.126
&gt;&gt; Nina Zakharenko: Specifically for
those in class,

21
00:01:35.126 --> 00:01:38.124
because this API has a rate limit.

22
00:01:38.124 --> 00:01:41.289
We wanna check for
403 to see if that rate limit was reached.

23
00:01:42.540 --> 00:01:46.280
And so
I'm gonna take a status_code here and

24
00:01:46.280 --> 00:01:50.240
then I'm gonna say if my
status_code is equal to 403,

25
00:01:50.240 --> 00:01:54.410
I'm gonna say my message was,
rate limit reached.

26
00:01:57.760 --> 00:02:02.585
Otherwise,
&gt;&gt; Nina Zakharenko: Any other type of

27
00:02:02.585 --> 00:02:08.371
status code, I'm just gonna say,
&gt;&gt; Nina Zakharenko: The f

28
00:02:08.371 --> 00:02:12.940
string the status code was, status code.

29
00:02:12.940 --> 00:02:17.734
&gt;&gt; Speaker 2: You have three
s's in the message there.

30
00:02:17.734 --> 00:02:18.991
&gt;&gt; Nina Zakharenko: Thank you.
Okay,

31
00:02:24.690 --> 00:02:25.327
&gt;&gt; Nina Zakharenko: Okay, so

32
00:02:25.327 --> 00:02:27.404
I'm still missing one thing.

33
00:02:27.404 --> 00:02:32.934
What do I have to do to make sure that
my message gets passed up to exception?

34
00:02:32.934 --> 00:02:34.624
&gt;&gt; Speaker 3: Call super.

35
00:02:34.624 --> 00:02:39.618
&gt;&gt; Nina Zakharenko: Mm-hm, call
super().__init, and pass in our new custom

36
00:02:39.618 --> 00:02:44.522
message
&gt;&gt; Nina Zakharenko: And

37
00:02:44.522 --> 00:02:50.861
I'm going to run this,
&gt;&gt; Nina Zakharenko: File

38
00:02:50.861 --> 00:02:56.427
from with interactive mode,
just so I can show you.

39
00:02:59.045 --> 00:03:00.177
&gt;&gt; Nina Zakharenko: Very quickly,

40
00:03:00.177 --> 00:03:04.364
intermediate_Python call
this file exceptions.py.

41
00:03:04.364 --> 00:03:09.698
Okay, so I have my GitHub API here.

42
00:03:09.698 --> 00:03:17.476
&gt;&gt; Nina Zakharenko: And remember we
don't just make a new instance of it.

43
00:03:17.476 --> 00:03:21.440
If you wanna see the exception get
raised we use the raised keyword.

44
00:03:21.440 --> 00:03:25.720
And if I try not to pass any arguments,
we'll see type error that init is missing

45
00:03:25.720 --> 00:03:28.560
one required positional argument,
the status code, right?

46
00:03:30.000 --> 00:03:31.830
So let's say the status code is 500,

47
00:03:31.830 --> 00:03:37.170
it'll say GitHubAPIError really
helps me narrow it down.

48
00:03:37.170 --> 00:03:40.128
Status code was 500.

49
00:03:40.128 --> 00:03:41.990
What if I pass in a 403 here?

50
00:03:43.440 --> 00:03:45.300
&gt;&gt; Speaker 4: It should say,
rate limit reached.

51
00:03:45.300 --> 00:03:46.730
&gt;&gt; Nina Zakharenko: Rate limit reached,
yeah.

52
00:03:46.730 --> 00:03:49.770
So now we can be a lot more specific and
useful.

