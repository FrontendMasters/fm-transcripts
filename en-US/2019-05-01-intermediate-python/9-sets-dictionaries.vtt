WEBVTT

1
00:00:00.110 --> 00:00:02.942
&gt;&gt; Nina Zakharenko: We talked about
four different data types yesterday.

2
00:00:05.544 --> 00:00:09.899
&gt;&gt; Nina Zakharenko: Four
different container,

3
00:00:11.890 --> 00:00:13.940
&gt;&gt; Nina Zakharenko: Data types.

4
00:00:13.940 --> 00:00:20.060
We talked about lists, tuples,
sets, dictionaries, right?

5
00:00:21.550 --> 00:00:24.724
Do you think that these other
container types have comprehensions?

6
00:00:24.724 --> 00:00:29.175
They do, yeah.

7
00:00:29.175 --> 00:00:34.091
So if I wanted to do a set comprehension,
I would use,

8
00:00:34.091 --> 00:00:39.560
I remember that set is kind
of those curly braces, right?

9
00:00:39.560 --> 00:00:40.646
This is a dictionary.

10
00:00:40.646 --> 00:00:43.680
We remember that, but

11
00:00:43.680 --> 00:00:48.950
as long as there are items in it,
then it's a set.

12
00:00:48.950 --> 00:00:52.700
So we're gonna use this
curly brace syntax.

13
00:00:52.700 --> 00:00:58.280
Let's say we want to do
a set of our squares.

14
00:00:58.280 --> 00:01:02.197
I would do the same thing that
I did in my list comprehension.

15
00:01:02.197 --> 00:01:07.374
Let's say for num in range,
&gt;&gt; Nina Zakharenko: Let's

16
00:01:07.374 --> 00:01:11.720
give it a bigger range now,
for num in range(11).

17
00:01:11.720 --> 00:01:16.015
That's my loop and
then my action is just num * num.

18
00:01:18.494 --> 00:01:20.974
&gt;&gt; Nina Zakharenko: Remember,
sets are unordered, so

19
00:01:20.974 --> 00:01:26.110
you won't see the results in order
like you would in the list, right?

20
00:01:26.110 --> 00:01:28.128
And to quickly check that,

21
00:01:28.128 --> 00:01:34.229
I can change the start on the end,
&gt;&gt; Nina Zakharenko: Right,

22
00:01:34.229 --> 00:01:35.769
and confirm my assumptions.

23
00:01:38.036 --> 00:01:42.340
&gt;&gt; Nina Zakharenko: What's the difference
in syntax between a set and a dictionary?

24
00:01:43.760 --> 00:01:48.960
Consider a set to be a collection of keys,
just keys.

25
00:01:48.960 --> 00:01:51.470
What's different about a dictionary?

26
00:01:51.470 --> 00:01:53.210
&gt;&gt; Speaker 2: It's values
attached those keys.

27
00:01:53.210 --> 00:01:55.167
&gt;&gt; Nina Zakharenko: Yes, key value pairs.

28
00:01:57.272 --> 00:02:00.468
&gt;&gt; Nina Zakharenko: What's different
between our syntax for a set and

29
00:02:00.468 --> 00:02:02.377
our syntax for a dictionary?

30
00:02:05.972 --> 00:02:06.990
&gt;&gt; Speaker 2: Commas.

31
00:02:08.100 --> 00:02:08.980
&gt;&gt; Nina Zakharenko: Colons.

32
00:02:08.980 --> 00:02:09.850
&gt;&gt; Speaker 2: Commas.

33
00:02:09.850 --> 00:02:13.340
&gt;&gt; Nina Zakharenko: It's not
commas cuz you differentiate

34
00:02:13.340 --> 00:02:15.109
the items in your set by commas.

35
00:02:16.270 --> 00:02:16.780
But it-
&gt;&gt; Speaker 2: Colons.

36
00:02:16.780 --> 00:02:17.910
&gt;&gt; Nina Zakharenko: It is colons, yeah.

37
00:02:19.190 --> 00:02:24.130
So what if I wanted to make
a dictionary where the key was

38
00:02:24.130 --> 00:02:28.480
the original number and
the value was the square?

39
00:02:29.980 --> 00:02:32.360
So my key is the original number.

40
00:02:32.360 --> 00:02:34.410
The value is the square.

41
00:02:34.410 --> 00:02:36.970
So we know I have to put in a colon.

42
00:02:36.970 --> 00:02:37.980
Where does the key go?

43
00:02:40.080 --> 00:02:41.125
&gt;&gt; Speaker 2: Before the value.

44
00:02:41.125 --> 00:02:42.461
&gt;&gt; Nina Zakharenko: Right,
before the value.

45
00:02:44.307 --> 00:02:48.424
&gt;&gt; Nina Zakharenko: Now I've
turned my set comprehension into

46
00:02:48.424 --> 00:02:51.405
a dictionary comprehension.

47
00:02:51.405 --> 00:02:53.911
Just like I showed you f strings before,

48
00:02:53.911 --> 00:02:56.795
you can use f strings
in your comprehensions.

49
00:02:56.795 --> 00:03:02.242
So let's say I had my
list of names right here.

50
00:03:05.718 --> 00:03:09.654
&gt;&gt; Nina Zakharenko: I can do a list or
a set comprehension,

51
00:03:09.654 --> 00:03:14.160
I can do a dictionary comprehension.

52
00:03:14.160 --> 00:03:17.900
But just for simplicity, I'm gonna do
a list comprehension and I'm gonna say for

53
00:03:17.900 --> 00:03:19.510
name in names.

54
00:03:21.220 --> 00:03:24.750
And as my expression,
I can put an f string.

55
00:03:24.750 --> 00:03:27.470
And say the name is {name}.

56
00:03:29.794 --> 00:03:34.820
Let's say I had a list of names with dups
in it, I'm gonna call it dups_names.

57
00:03:34.820 --> 00:03:40.550
And there's gonna be Nina in here,
and Max, and Nina again.

58
00:03:44.447 --> 00:03:47.667
&gt;&gt; Nina Zakharenko: I know that
I can call set on dups_names and

59
00:03:47.667 --> 00:03:50.180
it will take out the duplicates.

60
00:03:51.660 --> 00:03:59.457
I can also call set on,
&gt;&gt; Nina Zakharenko: A list comprehension.

61
00:03:59.457 --> 00:04:03.979
&gt;&gt; Nina Zakharenko: Let's say that
I wanted to get the length of

62
00:04:03.979 --> 00:04:06.498
each name in this list.

63
00:04:06.498 --> 00:04:11.747
So I would say, for name in dups_names,

64
00:04:12.828 --> 00:04:15.144
&gt;&gt; Nina Zakharenko: And I would print out.

65
00:04:15.144 --> 00:04:19.149
Sorry, the value would be
the length of the name.

66
00:04:19.149 --> 00:04:20.914
And so my set just has 3 and

67
00:04:20.914 --> 00:04:24.702
4 in it because the name Nina
has the same length twice.

68
00:04:26.381 --> 00:04:26.881
&gt;&gt; Nina Zakharenko: Something to

