WEBVTT

1
00:00:00.060 --> 00:00:06.640
&gt;&gt; Nina: Try except, most languages
have a concept of a try except block.

2
00:00:06.640 --> 00:00:11.176
Lets say that in my REPLI tried to

3
00:00:11.176 --> 00:00:16.217
make an integer out of the letter A.

4
00:00:16.217 --> 00:00:18.690
I'm gonna get a value error here.

5
00:00:21.080 --> 00:00:24.490
Python's like, I have no idea what to
do with this, this is just bad input.

6
00:00:25.660 --> 00:00:30.530
If I don't want my program to quit,
I notice in the REPL,

7
00:00:30.530 --> 00:00:34.240
exceptions get thrown, but
we can continue working.

8
00:00:34.240 --> 00:00:37.910
In your Python file as soon as
an uncaught exception is thrown,

9
00:00:37.910 --> 00:00:38.770
that ends your program.

10
00:00:38.770 --> 00:00:40.200
So a little bit of a difference there.

11
00:00:41.280 --> 00:00:42.830
This is a lot easier to use for

12
00:00:42.830 --> 00:00:46.560
testing, debugging, etc without
completely losing all of your state.

13
00:00:47.810 --> 00:00:50.460
Okay, so let's say I get some user input.

14
00:00:55.576 --> 00:00:59.220
&gt;&gt; Nina: If I want to catch this
exception, I would put the code,

15
00:01:03.085 --> 00:01:04.651
&gt;&gt; Nina: Under a try block and

16
00:01:04.651 --> 00:01:09.443
then I would accept and
then I would pass in the name of the class

17
00:01:09.443 --> 00:01:13.290
of the specific type of
error that I wanna catch.

18
00:01:13.290 --> 00:01:18.730
Luckily for us it's pretty easy
Python just prints it out right here.

19
00:01:18.730 --> 00:01:24.327
So I'm gonna say except ValueError and
print out,

20
00:01:24.327 --> 00:01:31.135
no way, that's not a number,
what are you thinking, user?

21
00:01:31.135 --> 00:01:34.024
&gt;&gt; Speaker 2: [LAUGH]
&gt;&gt; Nina: Okay, so

22
00:01:34.024 --> 00:01:35.697
what's going to happen here?

23
00:01:40.193 --> 00:01:42.993
&gt;&gt; Nina: Our user input is A,
we're gonna try to make it an integer,

24
00:01:42.993 --> 00:01:45.070
Python's gonna fail.

25
00:01:45.070 --> 00:01:47.310
What code is going to run?

26
00:01:47.310 --> 00:01:48.750
&gt;&gt; Speaker 2: The code in
the except print click.

27
00:01:48.750 --> 00:01:49.850
&gt;&gt; Nina: The code in the except block.

28
00:01:51.900 --> 00:01:56.380
And just to show you again,
if I have try here and

29
00:01:56.380 --> 00:02:00.301
I'm trying to make an int and I print out,

30
00:02:00.301 --> 00:02:07.242
I'm gonna say,
&gt;&gt; Nina: Sorry, I'm gonna quit that.

31
00:02:07.242 --> 00:02:14.498
And I'm gonna say my number
is int of user_input.

32
00:02:14.498 --> 00:02:18.258
Print out, great number!, good job.

33
00:02:21.588 --> 00:02:22.480
&gt;&gt; Nina: What's that?

34
00:02:22.480 --> 00:02:24.070
&gt;&gt; Speaker 2: I said, you did it!

35
00:02:24.070 --> 00:02:25.605
&gt;&gt; Nina: You did it, exactly.

36
00:02:25.605 --> 00:02:26.630
&gt;&gt; Speaker 2: [LAUGH]
&gt;&gt; Nina: And

37
00:02:26.630 --> 00:02:31.830
now I'm going to accept on my ValueError,
and say what are you doing?

38
00:02:33.540 --> 00:02:37.370
Okay, so it's gonna print out,
No way!, that's not a number!

39
00:02:37.370 --> 00:02:39.780
But it's not gonna print out,
great Number, why?

40
00:02:39.780 --> 00:02:42.580
Because we never got to this code.

41
00:02:42.580 --> 00:02:45.669
An exception was thrown
here at this line and

42
00:02:45.669 --> 00:02:48.849
we immediately jumped
to the except clause.

43
00:02:51.348 --> 00:02:57.178
&gt;&gt; Nina: Your except clause
can have multiple exceptions

44
00:02:57.178 --> 00:03:02.170
given as a tuple, parenthesized tuple.

45
00:03:02.170 --> 00:03:07.460
So, that

46
00:03:07.460 --> 00:03:11.740
code will run if any of
those exceptions are thrown.

47
00:03:13.590 --> 00:03:16.570
So, let's say I have a dictionary,

48
00:03:16.570 --> 00:03:22.560
a simple dictionary and
I have my user input.

49
00:03:25.540 --> 00:03:30.196
I can say try turning my

50
00:03:30.196 --> 00:03:35.588
user_input into an int,

51
00:03:35.588 --> 00:03:40.252
or if that works fine.

52
00:03:40.252 --> 00:03:48.640
And actually sorry, I'm gonna say
that my user_input is the number 2.

53
00:03:48.640 --> 00:03:55.120
So just to be clear, our d has that in it,
our user input is 2.

54
00:03:55.120 --> 00:04:01.132
So I'm gonna try to turn our
user_input into a integer and

55
00:04:01.132 --> 00:04:04.936
I'm also gonna try to get the value in

56
00:04:04.936 --> 00:04:09.980
the dictionary on key
based on the user_input.

57
00:04:11.280 --> 00:04:18.410
Now I can say except and pass in a list
of or rather tuple of exception classes.

58
00:04:18.410 --> 00:04:22.110
So we know TypeError is
gonna be been e one of them.

59
00:04:22.110 --> 00:04:22.745
What's the other one?

60
00:04:25.536 --> 00:04:26.710
&gt;&gt; Speaker 2: Out ValueError.

61
00:04:26.710 --> 00:04:30.100
&gt;&gt; Nina: Right, I'm sorry, ValueError.

62
00:04:30.100 --> 00:04:31.090
And what's the other one?

63
00:04:32.680 --> 00:04:37.150
What error do we get if we try to get
a key from a dictionary that's not there?

64
00:04:37.150 --> 00:04:38.625
&gt;&gt; Speaker 2: Shouldn't there be
a column at the end of ValueError?

65
00:04:38.625 --> 00:04:39.450
&gt;&gt; Speaker 3: KeyError.

66
00:04:39.450 --> 00:04:40.764
&gt;&gt; Nina: KeyError, yeah.

67
00:04:44.952 --> 00:04:51.177
&gt;&gt; Nina: Print, no,
&gt;&gt; Nina: Okay, so,

68
00:04:51.177 --> 00:04:56.690
I'm so sorry, let's see,
let me try that again.

69
00:04:56.690 --> 00:05:01.087
So int(user_input) and
I'm just gonna print it out.

70
00:05:05.204 --> 00:05:08.454
&gt;&gt; Nina: And I also wanted to get
the dictionary, not at user, but

71
00:05:08.454 --> 00:05:09.510
at user_input.

72
00:05:09.510 --> 00:05:13.530
And then the rest of this code will
be the same except ValueError,

73
00:05:13.530 --> 00:05:16.320
KeyError, and then we're gonna print, no.

74
00:05:18.450 --> 00:05:22.410
So this time we will print the user_input.

75
00:05:23.780 --> 00:05:30.108
But then we're going to print, no,
&gt;&gt; Nina: Sorry,

76
00:05:30.108 --> 00:05:32.960
this prints out twice
because of the REPL here.

77
00:05:34.060 --> 00:05:39.300
So this through right here and this
general except clause caught both of them.

78
00:05:40.810 --> 00:05:45.320
We can also stack our try and
excepts generally,

79
00:05:45.320 --> 00:05:50.460
we want to catch the more specific one
first and the less specific one later.

80
00:05:50.460 --> 00:05:56.150
And one more thing about the except
clause we can also give that

81
00:05:56.150 --> 00:06:02.400
exception a name if we want to do anything
with it, look at the label, log it.

82
00:06:02.400 --> 00:06:06.940
So I can say,
try make an integer out of this

83
00:06:08.970 --> 00:06:11.740
and then accept on that value error.

84
00:06:11.740 --> 00:06:16.752
And to give this a name I can say as e,
or doesn't matter what

85
00:06:16.752 --> 00:06:21.478
you name it and then I can print out,
no, as well as e.

86
00:06:21.478 --> 00:06:25.850
And that gives us the message for
that exception.

