WEBVTT

1
00:00:00.066 --> 00:00:02.381
&gt;&gt; Nina Zakharenko: We're gonna
talk about testing in Python.

2
00:00:02.381 --> 00:00:07.179
Tests are a cornerstone of
a solid Python program.

3
00:00:07.179 --> 00:00:11.585
And thankfully, because of Python's
batteries included philosophy,

4
00:00:11.585 --> 00:00:16.425
everything that we need to write unit
tests is included in the standard library.

5
00:00:16.425 --> 00:00:21.248
So let's learn about
the basics of unit testing.

6
00:00:21.248 --> 00:00:26.126
Unit testing is a method of testing
software methods where individual

7
00:00:26.126 --> 00:00:31.006
functions are tested in an automatic
fashion to determine if they work

8
00:00:31.006 --> 00:00:32.010
as expected.

9
00:00:33.470 --> 00:00:37.760
These automated tests,
they help you find bugs quicker and

10
00:00:37.760 --> 00:00:43.000
faster than not testing all,
or even manual testing.

11
00:00:43.000 --> 00:00:48.365
And you can also write them alongside,
or before you write your functions, in

12
00:00:48.365 --> 00:00:54.238
a style called test-driven development to
help your code be as bug free as possible.

13
00:00:54.238 --> 00:00:58.667
There are three types of
automated tests that can be

14
00:00:58.667 --> 00:01:02.899
performed at different
levels of abstraction.

15
00:01:02.899 --> 00:01:07.356
Unit tests operate on a small
testable unit of code,

16
00:01:07.356 --> 00:01:12.845
usually a function,
that does a single action or an operation.

17
00:01:12.845 --> 00:01:16.838
Integration tests will check
to see if different units or

18
00:01:16.838 --> 00:01:19.757
modules of code work together as a group.

19
00:01:19.757 --> 00:01:22.476
And then functional tests
operate on units of

20
00:01:22.476 --> 00:01:27.209
functionality to make sure that a specific
function of a software is working.

21
00:01:27.209 --> 00:01:31.297
And it may involve a lot of unit tests or
whole systems working together.

22
00:01:32.860 --> 00:01:33.820
&gt;&gt; Nina Zakharenko: For this class,

23
00:01:33.820 --> 00:01:36.639
I'm just gonna show you
how to write unit tests.

24
00:01:36.639 --> 00:01:40.962
But know that tests in the real
world are pretty essential for

25
00:01:40.962 --> 00:01:43.521
your Python production programs.

26
00:01:43.521 --> 00:01:49.241
They're very helpful because many
companies use a style of development

27
00:01:49.241 --> 00:01:54.973
called CI/CD, or continuous
integration/continuous deployment.

28
00:01:54.973 --> 00:01:59.318
That means a lot of unit tests,
integration tests,

29
00:01:59.318 --> 00:02:04.357
maybe even a few functional tests,
which run automatically

30
00:02:04.357 --> 00:02:09.620
before your code is merged in
with the deployed master branch.

31
00:02:10.710 --> 00:02:15.630
If the tests fail, the deployment
can be stopped or not happen at all.

32
00:02:15.630 --> 00:02:17.790
The developers can be notified.

33
00:02:17.790 --> 00:02:22.310
And your broken code doesn't make
it into your production servers.

34
00:02:22.310 --> 00:02:27.669
But this technique only works if
you write a lot of good tests.

35
00:02:27.669 --> 00:02:30.372
It can be a bit complicated
to set this appropriately,

36
00:02:30.372 --> 00:02:33.213
depending on which deployment
strategy you're using.

37
00:02:33.213 --> 00:02:39.015
But it really saves you an enormous
amount of time in the long run and

38
00:02:39.015 --> 00:02:41.921
helps your users to not see bugs.

39
00:02:43.876 --> 00:02:48.705
&gt;&gt; Nina Zakharenko: So before we
talk about unit tests themselves,

40
00:02:48.705 --> 00:02:54.509
Python comes with something
called the assert keyword.

41
00:02:54.509 --> 00:02:59.618
And that kinda helps you do a little
bit of quick sanity checking.

42
00:02:59.618 --> 00:03:04.698
An assertion just checks
a boolean value of a condition

43
00:03:04.698 --> 00:03:08.902
to see if it's true or
false, if it matches.

44
00:03:08.902 --> 00:03:12.591
If the assertion is true,
the program will continue.

45
00:03:12.591 --> 00:03:16.387
If it's false, you'll see an assertion
error and your program will stop.

46
00:03:16.387 --> 00:03:22.634
So let's say, I'm going back to my REPL,
&gt;&gt; Nina Zakharenko: Let's

47
00:03:22.634 --> 00:03:24.422
say I have a number a.

48
00:03:24.422 --> 00:03:30.234
I can type assert &gt; 0.

49
00:03:30.234 --> 00:03:31.770
And that passes just fine.

50
00:03:31.770 --> 00:03:37.754
If I assert that a &gt; 0,
I'm gonna get an assertion error.

51
00:03:37.754 --> 00:03:41.502
Know that assertion errors are for
sanity checking.

52
00:03:41.502 --> 00:03:43.389
They're not for production.

53
00:03:43.389 --> 00:03:49.115
Simple checks, sanity checks,
they're not for validation.

54
00:03:49.115 --> 00:03:53.211
Certainly not for
validating any type of user input or

55
00:03:53.211 --> 00:03:58.290
determining if a file isn't found,
something like that.

56
00:03:58.290 --> 00:04:04.220
These situations are better suited for
raising an actual exception.

57
00:04:04.220 --> 00:04:07.440
And the other thing about assertions is

58
00:04:07.440 --> 00:04:10.800
they're not guaranteed to be
run in your production code.

59
00:04:10.800 --> 00:04:15.810
It's easy to turn off,
disable all assertions at run time,

60
00:04:15.810 --> 00:04:19.690
just by starting up your Python
program with a particular flag.

61
00:04:19.690 --> 00:04:23.740
So never rely on assertions
to run on production code.

62
00:04:23.740 --> 00:04:25.950
Never use them for validation.

63
00:04:25.950 --> 00:04:30.000
Never use them for user input validation.

64
00:04:30.000 --> 00:04:30.668
Make sense?

