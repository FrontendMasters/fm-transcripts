WEBVTT

1
00:00:00.270 --> 00:00:05.008
&gt;&gt; Nina Zakharenko: We can also use
conditional statements like if statements

2
00:00:05.008 --> 00:00:09.948
in our list comprehensions to
make them even more powerful.

3
00:00:09.948 --> 00:00:14.628
So before I had square, right, for

4
00:00:14.628 --> 00:00:20.252
num in range of 6,
I printed out num x num.

5
00:00:23.332 --> 00:00:27.568
&gt;&gt; Nina Zakharenko: What if I only
wanted to do this for the even numbers?

6
00:00:31.839 --> 00:00:34.216
&gt;&gt; Nina Zakharenko: I would
use an if statement, and

7
00:00:34.216 --> 00:00:38.101
a quick thing about
the condition we're gonna use.

8
00:00:38.101 --> 00:00:41.095
Does everyone know what
the modulo operation is?

9
00:00:41.095 --> 00:00:42.217
Modulo, okay.

10
00:00:42.217 --> 00:00:44.976
So I'll explain it very quickly.

11
00:00:44.976 --> 00:00:48.935
Modulo operation is the remainder
that you get from division.

12
00:00:48.935 --> 00:00:54.244
So 6 modulo 2, you do modulo with
the percentage sign, it's gonna be 0.

13
00:00:56.864 --> 00:01:02.133
&gt;&gt; Nina Zakharenko: We wanna check
if our number is divisible by two,

14
00:01:02.133 --> 00:01:06.126
that's how we know that it's even.

15
00:01:06.126 --> 00:01:08.600
But there's one little gotcha here.

16
00:01:08.600 --> 00:01:12.588
We learned about truthiness yesterday,
right?

17
00:01:12.588 --> 00:01:16.399
And that we can quickly check
the truthiness of something by passing it

18
00:01:16.399 --> 00:01:17.052
into bull.

19
00:01:17.052 --> 00:01:20.177
So we know that positive
numbers are truthy,

20
00:01:20.177 --> 00:01:24.580
we know that negative
numbers are truthy as well.

21
00:01:24.580 --> 00:01:26.960
Which numbers are falsey in Python?

22
00:01:26.960 --> 00:01:27.567
&gt;&gt; Speaker 2: 0.

23
00:01:27.567 --> 00:01:34.807
&gt;&gt; Nina Zakharenko: 0, so
we want to check if 6 is module 2.

24
00:01:34.807 --> 00:01:40.320
What if we forget to do an extra check and
actually check if it's 0,

25
00:01:40.320 --> 00:01:43.827
will this expression be truthy or falsey?

26
00:01:43.827 --> 00:01:46.939
So it will be falsey, right?

27
00:01:46.939 --> 00:01:52.079
If I check by passing this whole
expression into 2 it's false, right?

28
00:01:52.079 --> 00:01:59.831
So what we actually want to check is
if the number modulo 2 is equal to 0.

29
00:01:59.831 --> 00:02:04.290
This is a little kinda subtle bug that
still gets me occasionally in my own

30
00:02:04.290 --> 00:02:05.248
programming.

31
00:02:05.248 --> 00:02:09.572
So this is one of those cases that
we want to explicitly check or

32
00:02:09.572 --> 00:02:12.494
we are gonna get the wrong result, okay.

33
00:02:12.494 --> 00:02:15.875
Going back to our squares here and

34
00:02:15.875 --> 00:02:21.442
you can just use the up arrow
to scroll up in the raffle.

35
00:02:21.442 --> 00:02:25.554
My conditional goes on the right side.

36
00:02:25.554 --> 00:02:30.828
So first, I have my result,
next I have my for loop, and

37
00:02:30.828 --> 00:02:38.130
last in the formula I have my if
statement, I put my condition here.

38
00:02:38.130 --> 00:02:40.950
So based on what we learned above,
how would I check,

39
00:02:40.950 --> 00:02:44.890
how would I only return this
if the numbers were even?

40
00:02:44.890 --> 00:02:47.512
What would my expression be?

41
00:02:47.512 --> 00:02:50.875
&gt;&gt; Speaker 2: If num % 2 = the quantity 0.

42
00:02:50.875 --> 00:02:54.809
&gt;&gt; Nina Zakharenko: Equals quantity 0,
right?

43
00:02:54.809 --> 00:03:00.590
So that will only give
me the even squares.

44
00:03:00.590 --> 00:03:05.000
Let's say I had this list of even squares,
and

45
00:03:05.000 --> 00:03:10.160
I'm gonna assign it to a variable so that
I can work with it a little bit easier.

46
00:03:11.840 --> 00:03:17.910
Knowing everything that we know now, we
know that these even squares are integers,

47
00:03:17.910 --> 00:03:24.910
how would we print out a comma separated
list of these values as a string?

48
00:03:25.950 --> 00:03:29.293
How can we combine these operations?

49
00:03:29.293 --> 00:03:30.357
What are the different pieces?

50
00:03:34.669 --> 00:03:36.246
&gt;&gt; Nina Zakharenko: How
do we take a list and

51
00:03:36.246 --> 00:03:39.162
combine it into comma separated values?

52
00:03:39.162 --> 00:03:40.066
&gt;&gt; Speaker 2: With join.

53
00:03:40.066 --> 00:03:40.908
&gt;&gt; Nina Zakharenko: With join.

54
00:03:40.908 --> 00:03:43.431
And what is on the left
side of the join equation?

55
00:03:43.431 --> 00:03:44.653
&gt;&gt; Speaker 2: The delimiter.

56
00:03:44.653 --> 00:03:45.720
&gt;&gt; Nina Zakharenko: The delimiter.

57
00:03:45.720 --> 00:03:52.014
That's right.

58
00:03:52.014 --> 00:03:53.360
What am I joining on?

59
00:03:53.360 --> 00:03:58.200
We know that even squares
is my list of numbers and

60
00:03:58.200 --> 00:04:03.877
that join takes a list, or
list comprehension, right?

61
00:04:03.877 --> 00:04:06.508
Or list comprehension returns the list.

62
00:04:06.508 --> 00:04:07.880
So what am I looping over?

63
00:04:07.880 --> 00:04:10.390
&gt;&gt; Speaker 2: Even squares?

64
00:04:10.390 --> 00:04:17.332
&gt;&gt; Nina Zakharenko: Yeah, I can say for
even_square in even_squares,

65
00:04:17.332 --> 00:04:21.351
it's what I'm looping over.

66
00:04:21.351 --> 00:04:26.090
But I know that join takes
a list of strings, and

67
00:04:26.090 --> 00:04:32.027
we have a list of integers,
how do we make that conversion?

68
00:04:32.027 --> 00:04:34.386
&gt;&gt; Speaker 2: Would str(even_square)?

69
00:04:34.386 --> 00:04:38.220
&gt;&gt; Nina Zakharenko: That's right,
str(even_square).

70
00:04:38.220 --> 00:04:46.390
That converts from any other type
to its string representation.

71
00:04:46.390 --> 00:04:50.579
So now we have a list of strings and
we can call join on it.

72
00:04:50.579 --> 00:04:53.739
If I press Enter here, we get our result.

73
00:04:53.739 --> 00:04:57.900
That's kinda how you start thinking
putting some of these pieces together.

