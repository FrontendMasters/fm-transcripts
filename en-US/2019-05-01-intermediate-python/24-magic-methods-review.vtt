WEBVTT

1
00:00:01.520 --> 00:00:08.220
&gt;&gt; Nina: Let's say that we wanted to
write a custom class that represented

2
00:00:08.220 --> 00:00:13.960
the GitHub repositories that we did in our
final exercise in introduction to Python.

3
00:00:15.230 --> 00:00:18.023
So our final exercise.

4
00:00:19.736 --> 00:00:22.035
&gt;&gt; Nina: Let me open up that file quickly.

5
00:00:30.679 --> 00:00:35.756
&gt;&gt; Nina: So if we remember in our
final exercise, we created a query and

6
00:00:35.756 --> 00:00:41.120
then we got back this list of
items from the GitHub API.

7
00:00:41.120 --> 00:00:45.910
And then we looped through all
the results, which is a dictionary.

8
00:00:45.910 --> 00:00:49.900
And we got the language, we got
the number of stars, we got the name, and

9
00:00:49.900 --> 00:00:51.610
we printed this out.

10
00:00:51.610 --> 00:00:55.596
How could we refactor
this into a custom class?

11
00:00:58.948 --> 00:01:04.170
&gt;&gt; Nina: So the first thing we would wanna
do is make a class called GitHubRepo.

12
00:01:06.230 --> 00:01:09.991
And we would wanna create
a constructor here.

13
00:01:09.991 --> 00:01:14.423
And what are the variables
that we would take here?

14
00:01:14.423 --> 00:01:17.800
&gt;&gt; [INAUDIBLE]
&gt;&gt; Nina: Not languages, right?

15
00:01:20.900 --> 00:01:24.520
The repo has a single language, right?

16
00:01:24.520 --> 00:01:26.060
So this is each repository.

17
00:01:26.060 --> 00:01:31.570
So it would take a name, a language,
and the number of stars that it has.

18
00:01:31.570 --> 00:01:34.863
And then we would just assign
these values to the instance.

19
00:01:42.321 --> 00:01:49.492
&gt;&gt; Nina: Okay, if I wanted to take this
printout here, a string, and make it so

20
00:01:49.492 --> 00:01:55.587
it's available on every instance
of my GitHubRepo class.

21
00:01:55.587 --> 00:01:58.570
What method would I wanna put it in?

22
00:01:58.570 --> 00:02:00.895
This nice human readable printout.

23
00:02:00.895 --> 00:02:02.400
&gt;&gt; Speaker 2: String.

24
00:02:02.400 --> 00:02:04.824
&gt;&gt; Nina: Right, and
not just string, but what?

25
00:02:04.824 --> 00:02:05.641
&gt;&gt; Speaker 2: Dunder string.

26
00:02:05.641 --> 00:02:09.540
&gt;&gt; Nina: Dunder str, right,
and that also takes a self.

27
00:02:09.540 --> 00:02:14.434
We don't need any of the other variables
because we know that they're attached

28
00:02:14.434 --> 00:02:18.169
to the instance, and
we wanna return a string here, right?

29
00:02:20.602 --> 00:02:27.544
&gt;&gt; Nina: And use self.name,
self.language, and self.strs.

30
00:02:30.574 --> 00:02:35.598
&gt;&gt; Nina: Okay, so
I'm going to run this file

31
00:02:35.598 --> 00:02:40.455
again in this interactive mode and

32
00:02:40.455 --> 00:02:45.010
now I can make a new GitHubRepo.

33
00:02:45.010 --> 00:02:48.250
And again,
even though these are required variables,

34
00:02:48.250 --> 00:02:50.750
I can provide names here if I want to.

35
00:02:50.750 --> 00:02:55.387
So let's say this is,
&gt;&gt; Nina: Vue and

36
00:02:55.387 --> 00:02:58.430
the language is JavaScript.

37
00:02:59.600 --> 00:03:04.005
And the number of stars is 50,000.

38
00:03:08.184 --> 00:03:10.590
&gt;&gt; Nina: I want to save
this into a variable.

39
00:03:11.620 --> 00:03:16.060
Why are saying this here when
we make a new GitHubRepo?

40
00:03:16.060 --> 00:03:17.320
&gt;&gt; Speaker 2: It's a generator.

41
00:03:17.320 --> 00:03:20.887
&gt;&gt; Nina: Well not a generator,
I only implemented str but

42
00:03:20.887 --> 00:03:23.847
I didn't implement what other method?

43
00:03:23.847 --> 00:03:25.039
&gt;&gt; Speaker 3: Wrapper.

44
00:03:25.039 --> 00:03:31.754
&gt;&gt; Nina: Wrapper, and when we enter this
instance into the REPL without a print or

45
00:03:31.754 --> 00:03:35.730
anything like that, it uses the wrapper.

46
00:03:35.730 --> 00:03:42.320
Know that I have assigned a variable,
vue, I can double check that assumption.

47
00:03:42.320 --> 00:03:46.280
If I ask for the wrapper it's that.

48
00:03:46.280 --> 00:03:51.100
And keep in mind for those kind of
built in types, the zip, the range,

49
00:03:51.100 --> 00:03:56.150
if you see something like that it
means that it might be a generator.

50
00:03:56.150 --> 00:03:59.960
It's not guaranteed, but if you see
this for your own custom classes

51
00:03:59.960 --> 00:04:04.930
it means that you forgot to
implement str or a wrapper.

52
00:04:04.930 --> 00:04:10.240
But now if we work at str(vue),
oops sorry, I made a mistake here.

53
00:04:10.240 --> 00:04:14.967
It's num_stars and I'm just

54
00:04:14.967 --> 00:04:20.055
going to copy this into the file so

55
00:04:20.055 --> 00:04:26.080
that I can just run print(vue) here.

56
00:04:26.080 --> 00:04:30.790
Under the hood print call str because
we're using print when we wanna represent

57
00:04:30.790 --> 00:04:36.310
to the user and str is the one
that is the user friendly one.

58
00:04:36.310 --> 00:04:39.841
So I'll run that Python
file in the terminal, oops,

59
00:04:39.841 --> 00:04:46.950
I have to,
&gt;&gt; Nina: For

60
00:04:46.950 --> 00:04:49.520
some reason my VS Code
terminal just is not happy.

61
00:04:49.520 --> 00:04:53.917
So I'm gonna delete that one and
run it again.

62
00:04:53.917 --> 00:04:58.780
And there we go, we'll see that vue is
a JavaScript repo with 50,000 stars.

63
00:04:58.780 --> 00:05:02.600
So this is how we start encapsulating
some of the data we've been working with.

