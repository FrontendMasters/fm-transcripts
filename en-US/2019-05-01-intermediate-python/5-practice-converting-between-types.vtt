WEBVTT

1
00:00:05.053 --> 00:00:10.301
&gt;&gt; Nina Zakharenko: Okay, let's go through
our converting between types exercise.

2
00:00:12.267 --> 00:00:17.710
&gt;&gt; Nina Zakharenko: So
converting between strings and numbers,

3
00:00:17.710 --> 00:00:22.728
I can make a new string like this, right?

4
00:00:22.728 --> 00:00:26.076
Or, if I wanted to pas a number into,

5
00:00:26.076 --> 00:00:31.155
if I wanted to quickly convert
an integer in to a string,

6
00:00:31.155 --> 00:00:34.408
I can pass it into the str function.

7
00:00:35.641 --> 00:00:38.148
&gt;&gt; Nina Zakharenko: You might come across
an error that looks like something

8
00:00:38.148 --> 00:00:38.688
like this.

9
00:00:38.688 --> 00:00:46.370
Let's say I wanted to print out,
&gt;&gt; Nina Zakharenko: Today is the,

10
00:00:46.370 --> 00:00:50.024
and then I wanna say, it's the 30th.

11
00:00:50.024 --> 00:00:51.330
So I put 30.

12
00:00:51.330 --> 00:00:54.104
And I'll get an error,
TypeError, that says,

13
00:00:54.104 --> 00:00:56.956
you can only concatenate string not int,
right?

14
00:00:56.956 --> 00:01:02.058
So if you want to concatenate
these two strings,

15
00:01:02.058 --> 00:01:09.410
you could wrap this number in that
str call and that error will go away.

16
00:01:12.037 --> 00:01:15.787
&gt;&gt; Nina Zakharenko: Okay, so
if I check the type of str,

17
00:01:15.787 --> 00:01:19.290
100, we know that it's str.

18
00:01:20.750 --> 00:01:24.490
If I check the type, if I pass a string

19
00:01:25.930 --> 00:01:30.350
into int, here,
we know that it would be an int.

20
00:01:30.350 --> 00:01:34.221
Again, if I pass the string into int,
it'll come back with the integer.

21
00:01:36.371 --> 00:01:39.501
&gt;&gt; Nina Zakharenko: We can also do
this for floating point numbers.

22
00:01:46.561 --> 00:01:48.974
&gt;&gt; Nina Zakharenko: And that will come
back with the floating point number.

23
00:01:48.974 --> 00:01:54.641
Now, converting between lists and strings,
&gt;&gt; Nina Zakharenko: As I mentioned

24
00:01:54.641 --> 00:01:59.744
in Introduction to Python, a string is
actually just kind of considered a list or

25
00:01:59.744 --> 00:02:01.481
a sequence of characters.

26
00:02:01.481 --> 00:02:03.930
So converting back and
forth is pretty easy.

27
00:02:05.480 --> 00:02:11.120
Let's say I had a variable here called
greeting and the value is hello.

28
00:02:12.640 --> 00:02:15.640
I can pass that greeting into a list.

29
00:02:15.640 --> 00:02:16.567
What will I see?

30
00:02:18.816 --> 00:02:21.445
&gt;&gt; Nina Zakharenko: What
will the type of this be?

31
00:02:21.445 --> 00:02:23.810
&gt;&gt; Speaker 2: List.

32
00:02:23.810 --> 00:02:25.430
&gt;&gt; Nina Zakharenko: It'll be a list.

33
00:02:25.430 --> 00:02:28.500
And how many items will it have in it?

34
00:02:28.500 --> 00:02:30.150
&gt;&gt; Speaker 2: Five [INAUDIBLE].
&gt;&gt; Nina Zakharenko: Five items,

35
00:02:30.150 --> 00:02:32.663
that's right.

36
00:02:32.663 --> 00:02:35.673
&gt;&gt; Nina Zakharenko: So easy peasy.

37
00:02:35.673 --> 00:02:42.127
Let's say I wanted to
undo what I just did.

38
00:02:42.127 --> 00:02:47.139
How do I take a list of characters and
smush them back into one string?

39
00:02:47.139 --> 00:02:48.273
&gt;&gt; Speaker 2: Join.

40
00:02:48.273 --> 00:02:49.743
&gt;&gt; Nina Zakharenko: Join, yes.

41
00:02:49.743 --> 00:02:51.748
There's no smush method, it's just join.

42
00:02:51.748 --> 00:02:57.768
Okay, so
if I wanted to combine them back and

43
00:02:57.768 --> 00:03:03.970
separate them by commas,
I could call join.

44
00:03:05.856 --> 00:03:10.145
&gt;&gt; Nina Zakharenko: If I didnâ€™t make
a variable for this list that I just made,

45
00:03:10.145 --> 00:03:13.839
I can pass this whole thing
into this join method.

46
00:03:16.454 --> 00:03:20.049
&gt;&gt; Nina Zakharenko: Or I could say,
&gt;&gt; Nina Zakharenko: That my

47
00:03:20.049 --> 00:03:22.854
characters were a list of my greeting,
right?

48
00:03:22.854 --> 00:03:24.885
So that's just kind of the same thing.

49
00:03:24.885 --> 00:03:29.116
If I wanted to combine all these
characters back without a delimiter,

50
00:03:29.116 --> 00:03:31.422
I could just join on the empty string.

51
00:03:34.001 --> 00:03:35.682
&gt;&gt; Nina Zakharenko: And
that gets us back to where we started.

52
00:03:39.330 --> 00:03:42.892
&gt;&gt; Nina Zakharenko: To split
up values in a string,

53
00:03:42.892 --> 00:03:48.783
in a comma separated value
list like you might see,

54
00:03:48.783 --> 00:03:55.089
we can say csv_row =
"the,quick,brown,fox".

55
00:03:55.089 --> 00:04:01.908
And what method would we need to
call to make this a list of items?

56
00:04:01.908 --> 00:04:04.060
&gt;&gt; [INAUDIBLE]
&gt;&gt; Nina Zakharenko: Not quite, right?

57
00:04:04.060 --> 00:04:04.793
&gt;&gt; Speaker 2: Split.

58
00:04:04.793 --> 00:04:06.344
&gt;&gt; Nina Zakharenko: Yeah,
we'll need to call split.

59
00:04:07.785 --> 00:04:09.263
&gt;&gt; Nina Zakharenko: So with split,

60
00:04:09.263 --> 00:04:14.735
we call it on the the string
that we're taking action on.

61
00:04:17.027 --> 00:04:23.000
&gt;&gt; Nina Zakharenko: But with join,
what do we call the join method on?

62
00:04:23.000 --> 00:04:23.937
&gt;&gt; Speaker 2: The string.

63
00:04:23.937 --> 00:04:26.056
&gt;&gt; Nina Zakharenko: The string,
which string?

64
00:04:26.056 --> 00:04:26.631
&gt;&gt; Speaker 2: Delimiter.

65
00:04:26.631 --> 00:04:30.293
&gt;&gt; Nina Zakharenko: The delimiter string,
that's exactly right.

66
00:04:30.293 --> 00:04:33.066
So, this kinda stuff all make sense?

67
00:04:35.987 --> 00:04:39.227
&gt;&gt; Nina Zakharenko: There's one other,
well, I'll come back it,

68
00:04:39.227 --> 00:04:45.143
I'll cover it later, but,
&gt;&gt; Nina Zakharenko: I showed you yesterday

69
00:04:45.143 --> 00:04:50.978
how if you had a list with some duplicates
in it, let's say I had a list of names.

70
00:04:50.978 --> 00:04:54.451
And you can type your own names here.

71
00:04:54.451 --> 00:04:56.121
Maybe we have Bob.

72
00:04:56.121 --> 00:04:58.223
We have some folks in the class.

73
00:04:58.223 --> 00:05:02.540
So we have a Jeff, and
we have Madeline, and

74
00:05:02.540 --> 00:05:06.057
then we have another Nina, right?

75
00:05:06.057 --> 00:05:09.189
So whichever list you make
just insert a duplicate.

76
00:05:09.189 --> 00:05:14.401
If I wanted to quickly
de-duplicate this list of names,

77
00:05:14.401 --> 00:05:17.450
what data structure could I use?

78
00:05:17.450 --> 00:05:18.210
&gt;&gt; Speaker 2: Set.

79
00:05:18.210 --> 00:05:19.409
&gt;&gt; Nina Zakharenko: A set, right.

80
00:05:19.409 --> 00:05:22.305
A set cannot contain duplicates.

81
00:05:22.305 --> 00:05:28.235
So just like I was converting between
the other types, I can say set,

82
00:05:28.235 --> 00:05:32.948
pass in my list of names,
now the duplicates are gone.

83
00:05:32.948 --> 00:05:36.616
If I wanted to,
I can convert those back into a list.

84
00:05:36.616 --> 00:05:39.600
If I wanted to sort it,

85
00:05:39.600 --> 00:05:45.420
I could pass the set
into the sorted method.

86
00:05:45.420 --> 00:05:47.623
What comes back from sorted, what type?

87
00:05:49.685 --> 00:05:50.368
&gt;&gt; Speaker 2: A list.

88
00:05:50.368 --> 00:05:51.512
&gt;&gt; Nina Zakharenko: It's a list, right?

89
00:05:51.512 --> 00:05:55.567
Because lists have order, sets do not.

90
00:05:55.567 --> 00:05:58.479
Okay, so
it's super easy to convert back and forth.

91
00:05:58.479 --> 00:06:04.027
This will be really handy as you
go through your Python journey.

