WEBVTT

1
00:00:00.247 --> 00:00:05.065
&gt;&gt; Nina: If we look at the string
representation of some of these built

2
00:00:05.065 --> 00:00:08.285
in types that we've been working with.

3
00:00:08.285 --> 00:00:13.181
Let's say I have a list here,
if I pass this into string I

4
00:00:13.181 --> 00:00:18.189
get kind of nice human readable
string representation.

5
00:00:18.189 --> 00:00:21.805
Something we're haven't
talked about is repr.

6
00:00:21.805 --> 00:00:24.001
If I pass the list into repr,

7
00:00:24.001 --> 00:00:29.420
this first string it looks a little
bit different but let's try this.

8
00:00:31.370 --> 00:00:36.124
&gt;&gt; Nina: So as we build up our objects,
these simple ones can have

9
00:00:36.124 --> 00:00:41.384
the same str and repr, but
more advanced objects you can think

10
00:00:41.384 --> 00:00:46.162
of the string value as the human
readable string value.

11
00:00:46.162 --> 00:00:49.530
What would I put in here that
would help other developers?

12
00:00:50.630 --> 00:00:57.631
For repr, it's how would I tell Python
to create a new instance of this class?

13
00:00:57.631 --> 00:01:01.788
So it's more kind of programmatic,
it's for

14
00:01:01.788 --> 00:01:06.276
the system, not necessarily for
people to read.

15
00:01:06.276 --> 00:01:10.454
And we'll see this as we work
with more advanced objects,

16
00:01:10.454 --> 00:01:13.867
not really going to talk
about dates today, but

17
00:01:13.867 --> 00:01:18.403
this is part of the standard library,
so the datetime module.

18
00:01:18.403 --> 00:01:23.479
And something you might see is,
&gt;&gt; Nina: We

19
00:01:23.479 --> 00:01:25.971
wanna get the current time right now.

20
00:01:25.971 --> 00:01:29.045
So this is the name of the module.

21
00:01:29.045 --> 00:01:34.009
I'll need to import datetime
again just like I did from cars,

22
00:01:34.009 --> 00:01:39.076
import car, so this is like from datetime,
import datetime.

23
00:01:39.076 --> 00:01:42.654
And I will call the now method on it.

24
00:01:42.654 --> 00:01:47.827
If I look at the str(now), it will kind
of give me this human readable date.

25
00:01:47.827 --> 00:01:52.636
If I look at the repr,
it's just gonna give me what

26
00:01:52.636 --> 00:01:58.373
arguments I would need to pass
in to make any instance of it.

27
00:01:58.373 --> 00:02:03.597
So let’s make a few, let’s make

28
00:02:03.597 --> 00:02:08.269
a str and a repr for our class.

29
00:02:13.608 --> 00:02:17.648
&gt;&gt; Nina: And we know that this dunder
init, I’m gonna put them up here.

30
00:02:19.649 --> 00:02:24.811
&gt;&gt; Nina: We know that this dunder
init method gets called under

31
00:02:24.811 --> 00:02:29.752
the hood when we create
a new instance of our class.

32
00:02:29.752 --> 00:02:35.076
If we're using this built in
repr method on our class,

33
00:02:35.076 --> 00:02:39.138
how might we represent that in our class?

34
00:02:39.138 --> 00:02:42.133
&gt;&gt; Speaker 2: [INAUDIBLE]
&gt;&gt; Nina: What's more dunder it's more

35
00:02:42.133 --> 00:02:43.740
double underscores.

36
00:02:44.830 --> 00:02:49.653
So if I have my_subaru now,
before I put in either of

37
00:02:49.653 --> 00:02:55.110
these methods,
it's gonna print out this junk.

38
00:02:55.110 --> 00:03:00.223
Totally unuseful, doesn't tell me
anything about what's in the instance,

39
00:03:00.223 --> 00:03:05.497
it just says, well, it's an object of
a car and it lives at this memory address.

40
00:03:05.497 --> 00:03:07.287
And like, what now, right?

41
00:03:07.287 --> 00:03:11.223
We wanna be friendly to other developers,
we wanna be friendly to ourselves.

42
00:03:11.223 --> 00:03:15.802
So let's make a string method first and
to do that,

43
00:03:15.802 --> 00:03:19.649
that's right, the double underscores.

44
00:03:19.649 --> 00:03:24.525
Now, to represent the string
representation of my instance,

45
00:03:24.525 --> 00:03:28.027
what am I gonna need
passed into this method?

46
00:03:28.027 --> 00:03:28.891
&gt;&gt; Speaker 2: Self.

47
00:03:28.891 --> 00:03:32.012
&gt;&gt; Nina: Self, that's right.

48
00:03:32.012 --> 00:03:39.623
And then, I don't wanna use print here,
we wanna return a string.

49
00:03:39.623 --> 00:03:43.174
The print function does
a call to display a value but

50
00:03:43.174 --> 00:03:47.481
the print function itself
actually doesn't return a value.

51
00:03:47.481 --> 00:03:50.425
So a little bit of
an important distinction here.

52
00:03:50.425 --> 00:03:54.591
If I assigned a value to print,
the print statement,

53
00:03:54.591 --> 00:03:59.789
it would do the print out but
if I checked the type of x, it's none.

54
00:04:01.773 --> 00:04:03.565
&gt;&gt; Nina: Does that makes sense as to why?

55
00:04:03.565 --> 00:04:09.197
Yeah so in this string method we
want to actually return a string.

56
00:04:09.197 --> 00:04:14.427
And we're gonna,
&gt;&gt; Nina: We're

57
00:04:14.427 --> 00:04:18.768
going to,
&gt;&gt; Nina: Just put

58
00:04:18.768 --> 00:04:21.397
some stuff about our car in here right?

59
00:04:21.397 --> 00:04:26.699
Human readable it doesn't really
matter what so I can say,

60
00:04:26.699 --> 00:04:34.771
My car the {self.name},
&gt;&gt; Nina: currently,

61
00:04:37.147 --> 00:04:41.883
&gt;&gt; Nina: Self, {self.runs},

62
00:04:45.356 --> 00:04:46.046
&gt;&gt; Nina: Okay, and

63
00:04:46.046 --> 00:04:49.507
now scrolling to the top,
I'm going to reload that.

64
00:04:52.491 --> 00:04:56.891
&gt;&gt; Nina: Okay, now if I make a new car,

65
00:05:05.708 --> 00:05:07.882
&gt;&gt; Nina: I can now call str on it.

66
00:05:13.850 --> 00:05:15.882
&gt;&gt; Nina: And it print something out.

67
00:05:15.882 --> 00:05:18.130
And if I make a new_subaru,

68
00:05:27.562 --> 00:05:28.350
&gt;&gt; Nina: Print out that,

69
00:05:28.350 --> 00:05:29.650
My car the subaru, right?

70
00:05:29.650 --> 00:05:33.331
So each instance,
print out the values for each instance.

71
00:05:36.227 --> 00:05:43.172
&gt;&gt; Nina: For repr,
&gt;&gt; Nina: We

72
00:05:43.172 --> 00:05:45.810
wanna do things a little bit differently.

73
00:05:45.810 --> 00:05:53.275
So if I look at the datetime,
&gt;&gt; Nina: The repr for

74
00:05:53.275 --> 00:05:57.230
the datetime, we'll see that
it's the class parentheses and

75
00:05:57.230 --> 00:06:00.520
all of the arguments that
we need to instantiate it.

76
00:06:03.320 --> 00:06:06.640
&gt;&gt; Nina: So
we would tend to do the same thing here.

77
00:06:09.192 --> 00:06:13.674
&gt;&gt; Nina: And we would put, there's
some kind of tricky Python ways to get

78
00:06:13.674 --> 00:06:19.655
the current class, but we're not gonna use
them right now we're just gonna say car.

79
00:06:19.655 --> 00:06:24.525
And then we're gonna put
the parenthesis here,

80
00:06:24.525 --> 00:06:29.171
and in here we're gonna put {self.name}.

81
00:06:32.330 --> 00:06:33.530
&gt;&gt; Nina: Reload that.

82
00:06:37.881 --> 00:06:41.143
&gt;&gt; Nina: So now if I make a new car,

83
00:06:47.666 --> 00:06:49.962
&gt;&gt; Nina: (Subaru Outback),

84
00:06:56.075 --> 00:06:57.178
&gt;&gt; Speaker 2: You capitalize car.

85
00:06:57.178 --> 00:07:02.002
&gt;&gt; Nina: All right,
capitalize car, thank you.

86
00:07:02.002 --> 00:07:05.754
I can now call str on it,
on my new_subaru.

87
00:07:07.762 --> 00:07:09.793
&gt;&gt; Nina: I could call repr on it as well.

88
00:07:13.125 --> 00:07:17.772
&gt;&gt; Nina: And d is underscore special
underscore methods are tied into

89
00:07:17.772 --> 00:07:20.607
these built-in methods in Python.

90
00:07:24.920 --> 00:07:28.847
&gt;&gt; Nina: And as we saw earlier we keep
making new instances as part of a list

91
00:07:28.847 --> 00:07:30.560
comprehension.

92
00:07:30.560 --> 00:07:38.347
So if I had a list of
strings of numbers in here,

93
00:07:41.098 --> 00:07:43.504
&gt;&gt; Nina: Oops.

94
00:07:43.504 --> 00:07:45.633
A list of numbers.

95
00:07:45.633 --> 00:07:50.650
I can say I want to assign
this to a variable.

96
00:07:50.650 --> 00:07:54.458
Can do a list comprehension and say for

97
00:07:54.458 --> 00:07:58.982
num in nums call int on
each of those numbers.

98
00:08:01.206 --> 00:08:03.295
&gt;&gt; Nina: Oops I'm sorry so
I made a mistake here.

99
00:08:03.295 --> 00:08:06.935
I made a float string here.

100
00:08:06.935 --> 00:08:14.223
So maybe instead of calling int, let's
call float so that I can use my input.

101
00:08:14.223 --> 00:08:16.480
And this'll return a list of floats.

102
00:08:16.480 --> 00:08:20.700
And you can make new instances of
your custom classes in your list

103
00:08:20.700 --> 00:08:22.350
comprehension as well.

