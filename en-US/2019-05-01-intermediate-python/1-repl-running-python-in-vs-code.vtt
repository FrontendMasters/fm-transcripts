WEBVTT

1
00:00:00.000 --> 00:00:01.380
&gt;&gt; Nina: Using the REPL.

2
00:00:01.380 --> 00:00:05.270
For Introduction to Python,
we worked exclusively in the REPL.

3
00:00:05.270 --> 00:00:06.550
For Intermediate Python,

4
00:00:06.550 --> 00:00:11.370
we're gonna be working in both
the REPL and in Python files.

5
00:00:11.370 --> 00:00:14.720
REPL stands for Read Evaluate Print Loop.

6
00:00:14.720 --> 00:00:19.209
It's the interactive Python interpreter
that lets us type commands in and

7
00:00:19.209 --> 00:00:20.712
quickly see the output.

8
00:00:23.093 --> 00:00:25.370
&gt;&gt; Nina: Unlike running
your Python code on a file,

9
00:00:25.370 --> 00:00:29.490
you also don't necessarily need to
display any output in a print statement.

10
00:00:31.120 --> 00:00:34.020
You can just type in
the name of the variable and

11
00:00:34.020 --> 00:00:36.380
the REPL will show you its value.

12
00:00:36.380 --> 00:00:40.790
This is really great for
quick prototyping, debugging.

13
00:00:40.790 --> 00:00:44.550
As a python developer,
I've worked in python for six years,

14
00:00:44.550 --> 00:00:50.190
I still have REPL open daily so
that I can experiment with my code,

15
00:00:50.190 --> 00:00:53.340
look at documentation very quickly etc.

16
00:00:53.340 --> 00:00:57.930
So in the VS Code to open the REPL,
we're gonna go to VS Code,

17
00:00:57.930 --> 00:01:02.160
use the keyword shortcut for
our command power for Mac,

18
00:01:02.160 --> 00:01:06.762
that's command Shift P and
we're gonna select Start REPL.

19
00:01:09.912 --> 00:01:12.435
&gt;&gt; Nina: And
that should open REPL here at the bottom.

20
00:01:15.927 --> 00:01:20.200
&gt;&gt; Nina: Now I think that you know
the best way to learn a language,

21
00:01:20.200 --> 00:01:25.900
the best way to learn anything is
just typing along Muscle memory.

22
00:01:25.900 --> 00:01:30.810
So I recommend that as I'm coding,
and as I'm showing concepts, and

23
00:01:30.810 --> 00:01:36.930
as I'm experimenting that all of the
students follow along in the REPL live.

24
00:01:36.930 --> 00:01:39.660
That's how you'll get the most
value out of this class.

25
00:01:39.660 --> 00:01:41.850
Just a quick tour of the REPL.

26
00:01:41.850 --> 00:01:46.550
These three arrows here means it's
a prompt, it's ready for input.

27
00:01:46.550 --> 00:01:48.950
So I can type stuff in here.

28
00:01:48.950 --> 00:01:51.750
If I just type the name of
a variable I'll see the output.

29
00:01:52.810 --> 00:01:58.960
If I start a if statement for
example I'll see these three dots here,

30
00:01:58.960 --> 00:02:02.730
and that means that the REPL
is awaiting more input.

31
00:02:02.730 --> 00:02:07.410
So here I would have to provide
a level of indentation, and

32
00:02:07.410 --> 00:02:11.410
say the rest of my statements.

33
00:02:11.410 --> 00:02:15.240
As you notice in an if statement,
the first time I press enter when I'm done

34
00:02:15.240 --> 00:02:20.270
with my code block I still see these
three dots, still waiting for input.

35
00:02:20.270 --> 00:02:25.650
So in the REPL we'll have to press Enter
just one more time to make sure that

36
00:02:25.650 --> 00:02:31.010
this command is executed successfully,
great.

37
00:02:31.010 --> 00:02:35.460
Throughout the course,
you will see code that looks like this.

38
00:02:35.460 --> 00:02:38.460
If you see these right arrows
here on this label that says,

39
00:02:38.460 --> 00:02:42.180
PYTHON REPL, that means that
the file was run in the REPL.

40
00:02:42.180 --> 00:02:47.500
Otherwise you'll see Python file, and that
means run this code from a Python file.

41
00:02:47.500 --> 00:02:50.900
You can copy and
paste my Python REPL code,

42
00:02:50.900 --> 00:02:53.370
maybe occasionally you'll
see a little bit of a blip.

43
00:02:53.370 --> 00:02:56.150
And then you can paste
it right into your REPL.

44
00:02:56.150 --> 00:02:58.473
You'll just have to hit Enter
to run the last command,

45
00:02:58.473 --> 00:03:00.351
that's how I make sure that you're awake.

46
00:03:03.823 --> 00:03:07.354
&gt;&gt; Nina: Okay,
these three most important commands for

47
00:03:07.354 --> 00:03:11.071
the REPL are type(), dir(), and help().

48
00:03:12.340 --> 00:03:17.807
So if I'm not sure about the type of
something I can call the built-in

49
00:03:17.807 --> 00:03:23.943
type class and pass in my variable,
it'll let me know that a was of class int.

50
00:03:25.832 --> 00:03:27.650
&gt;&gt; Nina: Let's say I have a string here.

51
00:03:29.600 --> 00:03:36.070
If I want to know all of the methods
available on string cuz we're not Google.

52
00:03:36.070 --> 00:03:39.340
As programmers,
we don't have to memorize these things.

53
00:03:39.340 --> 00:03:46.320
I can use the built in dir
function here in pass in a class.

54
00:03:46.320 --> 00:03:50.058
So very quickly if I look for

55
00:03:50.058 --> 00:03:54.809
the type of name Type of name oops.

56
00:03:54.809 --> 00:03:58.330
I'm so sorry I cannot type this morning.

57
00:04:00.470 --> 00:04:07.330
So I'm pressing Control+C to kind of
exit the statement if I make a mistake.

58
00:04:07.330 --> 00:04:11.298
So type of name is str.

59
00:04:11.298 --> 00:04:15.600
I can do dir on str.

60
00:04:15.600 --> 00:04:17.210
That's the class right here.

61
00:04:17.210 --> 00:04:22.250
And that will show me all of the methods
available on the string class.

62
00:04:22.250 --> 00:04:26.180
The ones that we care about are the ones
that don't start with the underscores or

63
00:04:26.180 --> 00:04:27.710
double double underscores.

64
00:04:27.710 --> 00:04:31.690
You can kind of consider
those to be private methods.

65
00:04:31.690 --> 00:04:34.930
And let's say I don't
remember what upper does.

66
00:04:34.930 --> 00:04:41.750
This is where help comes in so
I can pass in either a whole type to help

67
00:04:41.750 --> 00:04:46.610
and it'll show me all of the help for
all of the methods or

68
00:04:46.610 --> 00:04:52.290
if I just want to zoom in on a particular
function here I could do str,

69
00:04:52.290 --> 00:04:57.250
and then I would just type the name
of the method that I'm interested in.

70
00:04:57.250 --> 00:05:01.240
No additional parentheses here or
anything, and this will bring up help.

71
00:05:01.240 --> 00:05:05.250
A little bit of documentation, it will
show me what arguments are required,

72
00:05:05.250 --> 00:05:11.180
if any, and usually a helpful message,
sometimes not so much.

73
00:05:11.180 --> 00:05:13.180
To exit out of the screen just hit Q.

74
00:05:14.290 --> 00:05:19.799
Okay, so that's the tour of the REPL,
I recommend everybody has one open.

75
00:05:22.502 --> 00:05:27.188
&gt;&gt; Nina: So, running code we'll be
working with a mix of The REPL and

76
00:05:27.188 --> 00:05:29.820
Python files in day two.

77
00:05:29.820 --> 00:05:33.640
New Python files have a .py extension.

78
00:05:33.640 --> 00:05:34.380
To create them,

79
00:05:34.380 --> 00:05:38.810
just hit Command and or Control+N,
depending on your operating system.

80
00:05:38.810 --> 00:05:43.205
And then you'll have to save that
file as a .py file in order for

81
00:05:43.205 --> 00:05:47.890
VS Code to recognize that
it's working with Python.

82
00:05:47.890 --> 00:05:50.350
Once you do that,
you should see syntax highlighting,

83
00:05:50.350 --> 00:05:53.268
you should see Linting if
you installed your Linter.

84
00:05:53.268 --> 00:05:57.530
You'll have autocomplete, a lot of
kinda really nice helpful things there.

85
00:05:59.440 --> 00:06:03.605
So you don't have to follow along here but

86
00:06:03.605 --> 00:06:08.722
if I'm make a new file, and
I print out paste in this

87
00:06:08.722 --> 00:06:14.720
from the class website well
it's all white, right?

88
00:06:14.720 --> 00:06:16.870
And I'm not seeing any
syntax highlighting.

89
00:06:16.870 --> 00:06:22.510
So what I have to do is
save that file as hello.py,

90
00:06:22.510 --> 00:06:25.510
I see all my syntax highlighting.

91
00:06:25.510 --> 00:06:30.500
To run this file very quickly and
easily using the correct interpreter

92
00:06:32.790 --> 00:06:38.880
You would have to open your command
palette, Cmd+Shift+P, python.

93
00:06:38.880 --> 00:06:40.269
Run Python File in Terminal.

94
00:06:43.111 --> 00:06:45.177
&gt;&gt; Nina: Easy peasy.

95
00:06:47.994 --> 00:06:52.905
&gt;&gt; Nina: Lastly, the VS Code terminal
window, it'll automatically pop up

96
00:06:52.905 --> 00:06:58.730
if you start the REPL from the Python
file from the command palette.

97
00:06:58.730 --> 00:07:04.561
To quickly open and close the REPL on
Mac it's Control and and back tick.

98
00:07:07.656 --> 00:07:11.600
&gt;&gt; Nina: As we see here on Windows I
believe it's Control and single quote.

99
00:07:13.080 --> 00:07:15.130
That will open and close the REPL for you.

100
00:07:16.210 --> 00:07:21.090
An important thing to know about the REPL
if you click here in this drop down box,

101
00:07:21.090 --> 00:07:26.390
these are all your different if
important thing about the terminal.

102
00:07:26.390 --> 00:07:29.080
If you click here in this drop
down box you'll see tabs for

103
00:07:29.080 --> 00:07:30.230
all your different terminology.

104
00:07:30.230 --> 00:07:33.248
You'll have your REPL here your,
Python, maybe a shell and

105
00:07:33.248 --> 00:07:35.268
this is how you can switch between them.

106
00:07:37.433 --> 00:07:41.820
&gt;&gt; Nina: Okay that's
the whirlwind tour of VS Code.

