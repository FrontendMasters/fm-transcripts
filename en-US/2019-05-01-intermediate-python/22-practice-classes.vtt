WEBVTT

1
00:00:05.728 --> 00:00:10.019
&gt;&gt; Nina Zakharenko: For this third
exercise on object oriented programming,

2
00:00:10.019 --> 00:00:14.747
we're gonna learn about classes and
self instance variables,

3
00:00:14.747 --> 00:00:20.000
inheritance, and also using the is
subclass and is instance methods,

4
00:00:20.000 --> 00:00:24.840
to learn a little bit more
about our class structure.

5
00:00:24.840 --> 00:00:28.010
This time around we're
going to be making files.

6
00:00:28.010 --> 00:00:31.990
So I'm going to make a new file and

7
00:00:31.990 --> 00:00:39.070
I'm gonna save it as classExample.py,
just in the root here.

8
00:00:41.420 --> 00:00:44.359
And we're gonna practice
making a simple class.

9
00:00:46.630 --> 00:00:49.200
We're gonna pass in several variables and

10
00:00:49.200 --> 00:00:52.340
then we're going to save them
to the instance by using self.

11
00:00:54.090 --> 00:01:00.513
So we'll type class Vehicle,
define that __init__ class,

12
00:01:00.513 --> 00:01:05.400
and what do I have to pass to __init__?

13
00:01:05.400 --> 00:01:06.200
&gt;&gt; Speaker 2: Self.

14
00:01:06.200 --> 00:01:12.030
&gt;&gt; Nina Zakharenko: Self, even if I accept
no arguments self always has to be there.

15
00:01:12.030 --> 00:01:16.812
But we will take a few arguments,
we're gonna take a make, a model,

16
00:01:16.812 --> 00:01:18.803
and a fuel is going to be gas.

17
00:01:22.144 --> 00:01:27.260
&gt;&gt; Nina Zakharenko: And
to save those values to our instance

18
00:01:27.260 --> 00:01:34.236
we're gonna have to do
a self.make is equal to make,

19
00:01:34.236 --> 00:01:38.422
self.model is equal to model,

20
00:01:38.422 --> 00:01:43.246
self.fuel is equal to fuel, okay?

21
00:01:43.246 --> 00:01:45.994
Yesterday we talked about main method and

22
00:01:45.994 --> 00:01:49.380
when we would wanna put our
code in the main method.

23
00:01:49.380 --> 00:01:52.502
But just a reminder it's not required,
so for

24
00:01:52.502 --> 00:01:57.383
this simple exercises am just going to
put the code where I used the class I

25
00:01:57.383 --> 00:02:01.470
defined just right underneath
here in the same file.

26
00:02:01.470 --> 00:02:05.050
Just remember indentation is important.

27
00:02:05.050 --> 00:02:08.890
So this indentation level
belongs to this method.

28
00:02:10.600 --> 00:02:14.630
This indentation level where
def is belongs to the class.

29
00:02:14.630 --> 00:02:17.735
So if we're gonna want to use this class,

30
00:02:17.735 --> 00:02:22.794
we're gonna have to break out of
that class's indentation level,

31
00:02:22.794 --> 00:02:26.519
and I'm gonna say that my
daily car is a vehicle and

32
00:02:26.519 --> 00:02:33.353
it's a Subaru Crosstrek
&gt;&gt; Nina Zakharenko: And

33
00:02:33.353 --> 00:02:37.460
let's take a look at
what this prints out too.

34
00:02:37.460 --> 00:02:42.908
So remember the fastest way to
run this in Python in VS Code

35
00:02:42.908 --> 00:02:47.915
is just to say
Python:RunPythonFile in terminal.

36
00:02:47.915 --> 00:02:54.947
And we see yuck,
prints out that is vehicle object and

37
00:02:54.947 --> 00:02:59.020
you see this dunder main here?

38
00:03:00.180 --> 00:03:04.340
We talked about why that is in the
introduction class, can anyone remind me?

39
00:03:07.970 --> 00:03:12.020
That gets set when we run
this script directly, so

40
00:03:12.020 --> 00:03:15.330
that's the same dunder main that you check
for if you wanna have a main method.

41
00:03:16.340 --> 00:03:19.650
And this is a memory address,
so nothing useful at all.

42
00:03:23.200 --> 00:03:27.626
But we do have access to the variables,
and so

43
00:03:27.626 --> 00:03:31.121
I'm going to comment this out, and

44
00:03:31.121 --> 00:03:36.014
instead I'll print out an f string and
I'll say,

45
00:03:36.014 --> 00:03:41.913
I drive,
&gt;&gt; Nina Zakharenko: Daily.make,

46
00:03:45.049 --> 00:03:46.208
&gt;&gt; Nina Zakharenko: Daily.model,

47
00:03:48.520 --> 00:03:50.065
&gt;&gt; Nina Zakharenko: It runs on,

48
00:03:52.010 --> 00:03:53.345
&gt;&gt; Nina Zakharenko: Daily.fuel.

49
00:03:55.479 --> 00:03:56.742
&gt;&gt; Nina Zakharenko: Okay, if I run this.

50
00:03:58.585 --> 00:04:00.600
&gt;&gt; Nina Zakharenko: Okay,
a little bit of an improvement, right?

51
00:04:00.600 --> 00:04:03.520
It says I drive a Subaru Crosstrek and
it runs on gas.

52
00:04:05.710 --> 00:04:09.360
And I'll just put a period
there to finish our sentence.

53
00:04:12.850 --> 00:04:17.845
Remember that the better way of
doing this is to create a wrapper.

54
00:04:21.270 --> 00:04:22.351
&gt;&gt; Nina Zakharenko: Or a str.

55
00:04:25.558 --> 00:04:30.568
&gt;&gt; Nina Zakharenko: So,
let's make a quick str method here,

56
00:04:30.568 --> 00:04:34.620
and then I'll take a self.

57
00:04:34.620 --> 00:04:37.587
Why don't we need to pass in
any of the other arguments?

58
00:04:39.994 --> 00:04:41.434
&gt;&gt; Nina Zakharenko: Make, model, fuel.

59
00:04:43.602 --> 00:04:46.780
&gt;&gt; Speaker 2: It's already implied
within that self attached to that.

60
00:04:46.780 --> 00:04:48.300
&gt;&gt; Nina Zakharenko: Right,
it's attached to the self,

61
00:04:48.300 --> 00:04:49.690
it's attached to the instance.

62
00:04:51.484 --> 00:04:57.900
So now I'm just going to cut
the string here and paste right here.

63
00:04:57.900 --> 00:04:59.920
But this isn't going to work, why?

64
00:05:01.300 --> 00:05:03.300
There's two problems.

65
00:05:03.300 --> 00:05:04.270
&gt;&gt; Speaker 2: Got to return it.

66
00:05:04.270 --> 00:05:07.480
&gt;&gt; Nina Zakharenko: I need to return it,
so str needs to return a string.

67
00:05:07.480 --> 00:05:09.820
What's the other problem here?

68
00:05:09.820 --> 00:05:11.718
&gt;&gt; Speaker 2: Daily is out of scope,
you want self instead of-

69
00:05:11.718 --> 00:05:12.373
&gt;&gt; Nina Zakharenko: Right,

70
00:05:12.373 --> 00:05:15.280
daily is out of scope, we want self.

71
00:05:15.280 --> 00:05:19.961
So self.make, self.model, self.fuel.

72
00:05:22.770 --> 00:05:24.732
&gt;&gt; Nina Zakharenko: Now I'm
gonna uncomment my

73
00:05:24.732 --> 00:05:27.718
printdaily,
&gt;&gt; Nina Zakharenko: And

74
00:05:27.718 --> 00:05:29.560
should see the same result.

75
00:05:30.660 --> 00:05:36.824
So instead of having to conjure up this
long string every time I want to represent

76
00:05:36.824 --> 00:05:42.724
my vehicle, I can just use __str__
instead and then it's in one place.

77
00:05:42.724 --> 00:05:46.010
Okay, so
we talked about class variables as well.

78
00:05:46.010 --> 00:05:51.540
Variables that exist for
all instances of that class whether or

79
00:05:51.540 --> 00:05:58.610
not, it exists on the type as well
as all instances of that class.

80
00:05:58.610 --> 00:06:02.840
So you don't even have to have
an instance to use it and see it.

81
00:06:02.840 --> 00:06:09.959
So we're gonna make,
&gt;&gt; Nina Zakharenko: A number_of_wheels

82
00:06:09.959 --> 00:06:15.555
class variable here and I'm gonna say 4.

83
00:06:18.224 --> 00:06:27.208
&gt;&gt; Nina Zakharenko: And now I can print
out my daily.number_of _wheels and

84
00:06:27.208 --> 00:06:33.023
Iâ€™ll just say this is the instance,

85
00:06:35.793 --> 00:06:37.144
&gt;&gt; Nina Zakharenko: For instance.

86
00:06:37.144 --> 00:06:42.009
I can print out the like class or

87
00:06:42.009 --> 00:06:45.758
type variable as well.

88
00:06:57.671 --> 00:07:01.213
&gt;&gt; Nina Zakharenko: How
do I access that class,

89
00:07:01.213 --> 00:07:05.679
not an instance, just the class.

90
00:07:08.069 --> 00:07:09.342
&gt;&gt; Speaker 2: Vehicle, capital V.

91
00:07:09.342 --> 00:07:11.381
&gt;&gt; Nina Zakharenko: That's right,
capital V vehicle.

92
00:07:18.727 --> 00:07:20.289
&gt;&gt; Nina Zakharenko: Okay,
I'm gonna run this.

93
00:07:21.830 --> 00:07:25.217
See for the class it's 4,
for the instance it's 4.

