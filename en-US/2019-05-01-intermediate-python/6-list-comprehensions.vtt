WEBVTT

1
00:00:00.190 --> 00:00:01.990
&gt;&gt; Nina Zakharenko: We talked
about simple loops yesterday.

2
00:00:01.990 --> 00:00:06.715
We talked about for loops,
how loop over each item in a list.

3
00:00:06.715 --> 00:00:11.718
List comprehensions are one of those
incredible features of Python that I think

4
00:00:11.718 --> 00:00:16.736
have been making their way into other
programming languages slowly over time.

5
00:00:16.736 --> 00:00:21.665
They let you take kind of a for
loop and condense it down into just

6
00:00:21.665 --> 00:00:26.225
one statement in a way that's
actually pretty readable.

7
00:00:28.737 --> 00:00:33.317
&gt;&gt; Nina Zakharenko: So
we'll start with list comprehensions.

8
00:00:36.341 --> 00:00:45.090
&gt;&gt; Nina Zakharenko: And,
&gt;&gt; Nina Zakharenko: Let's

9
00:00:45.090 --> 00:00:47.320
say I had my list of names.

10
00:00:52.597 --> 00:00:54.874
&gt;&gt; Nina Zakharenko: So
just a list of three items.

11
00:00:54.874 --> 00:00:58.306
Everyone who's typing along,
you can use whatever names you want.

12
00:01:01.195 --> 00:01:06.313
&gt;&gt; Nina Zakharenko: Earlier,
I wanted to build a new list that

13
00:01:06.313 --> 00:01:12.320
had maybe all the lowercase names in it,
right?

14
00:01:12.320 --> 00:01:16.656
So I know that if I say, string .lower,

15
00:01:16.656 --> 00:01:19.980
it'll give me the lowercase.

16
00:01:19.980 --> 00:01:23.850
If I say string.upper,
it will give me the uppercase.

17
00:01:23.850 --> 00:01:25.770
Okay, let's say I wanted
to do uppercase names,

18
00:01:25.770 --> 00:01:28.240
let's say I wanted to shout them, right?

19
00:01:28.240 --> 00:01:32.860
Reading them and shouting, you know that
these names are kind of really important.

20
00:01:32.860 --> 00:01:37.843
So before, I would make my
list of uppercase names and

21
00:01:37.843 --> 00:01:41.627
I would go through in a for loop, right?

22
00:01:41.627 --> 00:01:44.996
for name in names.

23
00:01:44.996 --> 00:01:50.632
I would say that the upper_case_name

24
00:01:50.632 --> 00:01:55.934
would be equal to name.upper().

25
00:01:55.934 --> 00:02:00.524
And then what action would I need
to take next to build up my list of

26
00:02:00.524 --> 00:02:03.001
upper_names with these values?

27
00:02:03.001 --> 00:02:05.696
How do we add to the end of a list?

28
00:02:05.696 --> 00:02:06.327
&gt;&gt; Speaker 2: Append.

29
00:02:06.327 --> 00:02:12.920
&gt;&gt; Nina Zakharenko: Append, so
I would say upper_names.append,

30
00:02:12.920 --> 00:02:16.791
and my upper_case_name.

31
00:02:16.791 --> 00:02:19.852
Okay, if we look in our upper_names now,

32
00:02:19.852 --> 00:02:23.422
we'll see that we've
looped through this list,

33
00:02:23.422 --> 00:02:28.901
we've taken some action on it, right, but,
&gt;&gt; Nina Zakharenko: This is a lot of code,

34
00:02:28.901 --> 00:02:31.181
and it's a pretty common
programming paradigm.

35
00:02:31.181 --> 00:02:34.280
We do this type of
programming all the time.

36
00:02:34.280 --> 00:02:40.420
And so Python came up with
a really handy shortcut for it.

37
00:02:40.420 --> 00:02:45.590
To do a list comprehension, you start with
the list syntax, so the square brackets.

38
00:02:47.650 --> 00:02:50.350
And then as your kind of
getting used to these,

39
00:02:50.350 --> 00:02:54.000
I find that the order
really trips people up.

40
00:02:54.000 --> 00:02:57.150
And so
I tend to basically write mine backwards.

41
00:02:57.150 --> 00:03:01.660
I think about, what do I wanna loop over,
and I type that first.

42
00:03:01.660 --> 00:03:05.722
So what were we looping
over in our for-loop?

43
00:03:05.722 --> 00:03:06.442
&gt;&gt; [INAUDIBLE].

44
00:03:06.442 --> 00:03:08.270
&gt;&gt; Nina Zakharenko: Yeah,
so I would say, for

45
00:03:08.270 --> 00:03:11.608
name in names,
&gt;&gt; Nina Zakharenko: So

46
00:03:11.608 --> 00:03:15.703
that's the second half of
our list comprehension.

47
00:03:15.703 --> 00:03:20.063
Now, move your cursor
back to the beginning and

48
00:03:20.063 --> 00:03:25.850
place it right to the right side
of that first opening bracket.

49
00:03:25.850 --> 00:03:30.374
The first part of the list comprehension
is the action that we want to take.

50
00:03:30.374 --> 00:03:35.982
So what was I doing with my
name in the previous example?

51
00:03:35.982 --> 00:03:36.607
&gt;&gt; Speaker 2: Uppercase.

52
00:03:36.607 --> 00:03:38.480
&gt;&gt; Nina Zakharenko: Yeah,
I was making it uppercase.

53
00:03:38.480 --> 00:03:43.009
So here, on the left-hand side,
I would say name.upper().

54
00:03:45.497 --> 00:03:48.983
&gt;&gt; Nina Zakharenko: What result
do we get when we run this?

55
00:03:48.983 --> 00:03:50.997
&gt;&gt; Speaker 2: It lists the uppercase and
[INAUDIBLE].

56
00:03:50.997 --> 00:03:53.254
&gt;&gt; Nina Zakharenko: That's right,
a list of uppercase names.

57
00:03:53.254 --> 00:03:54.427
Pretty useful, right?

58
00:03:57.400 --> 00:04:00.865
&gt;&gt; Nina Zakharenko: Let's say
we wanted to build a list of,

59
00:04:02.656 --> 00:04:04.708
&gt;&gt; Nina Zakharenko: Square's, right?

60
00:04:04.708 --> 00:04:11.652
What function can we use in Python to
generate a list of number's in a sequence?

61
00:04:11.652 --> 00:04:12.276
&gt;&gt; Speaker 2: Range.

62
00:04:12.276 --> 00:04:13.722
&gt;&gt; Nina Zakharenko: Range, right.

63
00:04:13.722 --> 00:04:17.780
So a quick recap of range.

64
00:04:17.780 --> 00:04:21.393
If we call range without doing
any sort of looping over it,

65
00:04:21.393 --> 00:04:25.818
we'll see this kind of range object,
it's because each object in it is

66
00:04:25.818 --> 00:04:28.799
generated on the fly,
which is great, right?

67
00:04:28.799 --> 00:04:30.126
It's great for performance.

68
00:04:30.126 --> 00:04:31.799
It's great for memory.

69
00:04:31.799 --> 00:04:37.743
As we're learning,
if we want a peak inside of range,

70
00:04:37.743 --> 00:04:41.373
just maybe we forget the syntax.

71
00:04:50.058 --> 00:04:51.427
&gt;&gt; Nina Zakharenko: And
just a quick note here for

72
00:04:51.427 --> 00:04:53.378
everyone who's not paying attention.

73
00:04:53.378 --> 00:04:55.914
Don't call range on a huge
list of numbers and

74
00:04:55.914 --> 00:04:58.230
call list around it cuz Nina told you so.

75
00:04:58.230 --> 00:05:00.740
Cuz that is not what I'm saying, okay?

76
00:05:00.740 --> 00:05:06.170
So if we want to peek inside of a range,
we can call list on it, right?

77
00:05:06.170 --> 00:05:12.502
So range with just one number will go
up to that number, but not inclusive.

78
00:05:12.502 --> 00:05:15.017
So exclusive.

79
00:05:15.017 --> 00:05:20.418
If we call range with two numbers,
this first number is the starting number,

80
00:05:20.418 --> 00:05:24.075
the range will be inclusive
of the starting number,

81
00:05:24.075 --> 00:05:26.422
exclusive of the ending number.

82
00:05:29.473 --> 00:05:34.084
&gt;&gt; Nina Zakharenko: And
the third argument to range is a step.

83
00:05:34.084 --> 00:05:37.764
So if I wanted to go through all
the even numbers, or I'm sorry,

84
00:05:37.764 --> 00:05:39.276
not all the even numbers.

85
00:05:39.276 --> 00:05:45.611
If I wanted to go from 1 to 4 and
add 2 each time, I would get 1 and 3.

86
00:05:45.611 --> 00:05:48.705
So that's how range works.

87
00:05:48.705 --> 00:05:53.789
Let's say I wanted to
make a list comprehension

88
00:05:53.789 --> 00:05:59.252
that went through all of
the numbers from 0 to 5 and

89
00:05:59.252 --> 00:06:02.190
print it out, the square.

90
00:06:02.190 --> 00:06:08.186
So I would say, for num in range,
if I wanted the numbers from 0 to 5,

91
00:06:08.186 --> 00:06:11.557
what value would I need to put in range?

92
00:06:11.557 --> 00:06:12.541
&gt;&gt; Speaker 2: 6.

93
00:06:12.541 --> 00:06:13.549
&gt;&gt; Nina Zakharenko: 6, okay, so

94
00:06:13.549 --> 00:06:18.185
this is what we're going to loop
over in our list comprehension.

95
00:06:18.185 --> 00:06:20.869
And then moving back to
the start of the line.

96
00:06:23.725 --> 00:06:28.548
&gt;&gt; Nina Zakharenko: Windows users, I don't
know, Mac users, Ctrl+A might help you get

97
00:06:28.548 --> 00:06:32.903
your line to the start, or
your cursor to the start of the line.

98
00:06:32.903 --> 00:06:38.575
And if I wanted to do the scores,
I would just say, num for num.

99
00:06:40.603 --> 00:06:43.340
&gt;&gt; Nina Zakharenko: That's
quickly all of our squares.

100
00:06:43.340 --> 00:06:50.400
We can return a list of any of the other
types that we've talked about.

101
00:06:50.400 --> 00:06:51.985
In our first example, we saw strings.

102
00:06:51.985 --> 00:06:56.033
In our second example, we saw a number.

103
00:06:57.696 --> 00:07:00.882
&gt;&gt; Nina Zakharenko: Let's take a look
at a more complicated data type.

104
00:07:00.882 --> 00:07:06.204
Let's say I wanted to
return a list of tuples,

105
00:07:06.204 --> 00:07:09.841
and,
&gt;&gt; Nina Zakharenko: The way that I would

106
00:07:09.841 --> 00:07:15.936
do that, so I have names variable here,
I would make my list comprehension.

107
00:07:15.936 --> 00:07:18.656
I'm gonna loop over the name in names.

108
00:07:20.467 --> 00:07:23.002
&gt;&gt; Nina Zakharenko: And
what I want to return is a tuple.

109
00:07:23.002 --> 00:07:26.478
So I'm gonna put those
parentheses around it.

110
00:07:26.478 --> 00:07:31.368
I want a tuple that has
the string length in it, for

111
00:07:31.368 --> 00:07:35.799
example, along with
the length of the name.

112
00:07:35.799 --> 00:07:38.735
How do we get the length of a string?

113
00:07:38.735 --> 00:07:40.366
&gt;&gt; Speaker 2: With length, len.

114
00:07:40.366 --> 00:07:41.188
&gt;&gt; Nina Zakharenko: That's right.

115
00:07:42.375 --> 00:07:45.793
&gt;&gt; Nina Zakharenko: Don't forget
an extra parenthesis here.

116
00:07:45.793 --> 00:07:48.859
And that would get the length of my name.

117
00:07:48.859 --> 00:07:53.968
So any variable that's on the right
side of this for statement,

118
00:07:53.968 --> 00:07:59.183
that's available for us to use in
the left side of this equation.

119
00:08:01.571 --> 00:08:06.621
&gt;&gt; Nina Zakharenko: Yesterday we used
tuple unpacking to loop through two items

120
00:08:06.621 --> 00:08:12.085
at once, for example,
if we were looping over a list of tuples.

121
00:08:12.085 --> 00:08:15.018
So, okay, call this list comprehension,

122
00:08:15.018 --> 00:08:19.001
I get the word length followed
by the length of each string.

123
00:08:19.001 --> 00:08:22.698
One last thing I wanna show with split and

124
00:08:22.698 --> 00:08:27.278
join, I've shown you kind of f strings,
right?

125
00:08:27.278 --> 00:08:31.270
So let's say the name is Nina, and

126
00:08:31.270 --> 00:08:36.223
my f string, starts with an f, it can say,

127
00:08:36.223 --> 00:08:40.504
The name is, followed by {name}.

128
00:08:46.267 --> 00:08:51.352
&gt;&gt; Nina Zakharenko: If I wanted
to do the same thing for

129
00:08:51.352 --> 00:08:56.256
a list of names and print them out

130
00:08:56.256 --> 00:09:00.978
in a comma separating string,

131
00:09:00.978 --> 00:09:06.081
I can do that with a join, right?

132
00:09:16.284 --> 00:09:19.231
&gt;&gt; Nina Zakharenko: So
if I just had kind of my one string here,

133
00:09:19.231 --> 00:09:23.209
it'd be kind of funky,
it's because it's not a list.

134
00:09:26.074 --> 00:09:32.796
&gt;&gt; Nina Zakharenko: You can pass
a list comprehension into join, right?

135
00:09:32.796 --> 00:09:33.786
Join takes a list.

136
00:09:33.786 --> 00:09:40.229
So I can say, for name in names,
like I did before.

137
00:09:40.229 --> 00:09:45.390
And I can just go with the right,
put my cursor to the right of that

138
00:09:45.390 --> 00:09:51.239
opening bracket, and I can put an f
string in here and say, name is name.

139
00:09:55.015 --> 00:09:57.140
&gt;&gt; Nina Zakharenko: So we're just
putting some of these pieces together.

