WEBVTT

1
00:00:00.328 --> 00:00:04.015
&gt;&gt; Nina Zakharenko: I also wanna talk to
you about how to write basic command line

2
00:00:04.015 --> 00:00:05.874
tools and scripts in Python.

3
00:00:05.874 --> 00:00:10.815
We wanna know how to accept
command line arguments.

4
00:00:10.815 --> 00:00:12.224
It's pretty useful for a script, right?

5
00:00:12.224 --> 00:00:14.408
You want to interact with the user.

6
00:00:14.408 --> 00:00:18.570
We saw sys.argv.

7
00:00:18.570 --> 00:00:26.297
So that's one way of accepting input from,
&gt;&gt; Nina Zakharenko: Input from the user.

8
00:00:29.355 --> 00:00:34.983
&gt;&gt; Nina Zakharenko: A nice trick for
sys.argv, we can use slicing to remove

9
00:00:34.983 --> 00:00:41.945
the name of the file because we
usually don't care about it, right?

10
00:00:41.945 --> 00:00:46.630
So I can say arguments equal,
and where would I start my slice?

11
00:00:49.233 --> 00:00:52.440
&gt;&gt; Nina Zakharenko: Which is the first
value that we care about, at what index?

12
00:00:52.440 --> 00:00:53.830
&gt;&gt; Speaker 2: One.

13
00:00:53.830 --> 00:00:57.170
&gt;&gt; Nina Zakharenko: Index one,
and go to the very end.

14
00:00:58.510 --> 00:01:00.300
We care about the rest of them.

15
00:01:00.300 --> 00:01:04.500
Now, if I,
&gt;&gt; Nina Zakharenko: Oops, I'm sorry.

16
00:01:04.500 --> 00:01:07.058
It was arguments sys.argv.

17
00:01:10.066 --> 00:01:12.485
&gt;&gt; Nina Zakharenko: So
I'll comment that out.

18
00:01:12.485 --> 00:01:17.333
Now, if I run this again,
&gt;&gt; Nina Zakharenko: We'll see that, okay,

19
00:01:17.333 --> 00:01:18.540
this is actually useful.

20
00:01:18.540 --> 00:01:20.480
I didn't get any arguments.

21
00:01:20.480 --> 00:01:23.606
And now I can say, 123 hello goodbye, and

22
00:01:23.606 --> 00:01:28.388
it'll only print out the arguments
that were actually useful to me.

23
00:01:35.367 --> 00:01:39.422
&gt;&gt; Nina Zakharenko: Make a new file here,
we're gonna call it,

24
00:01:41.576 --> 00:01:44.249
&gt;&gt; Nina Zakharenko: Input_example.py.

25
00:01:46.494 --> 00:01:49.013
&gt;&gt; Nina Zakharenko: To get and
interact with user input,

26
00:01:49.013 --> 00:01:52.516
we can use the built-in
input function in Python.

27
00:01:52.516 --> 00:01:58.890
So I'm gonna say that name equals,
call the built-in input function.

28
00:01:58.890 --> 00:02:02.180
And the argument here is what you
want the prompt to look like.

29
00:02:02.180 --> 00:02:09.440
So say, Hello human, what is your name?

30
00:02:09.440 --> 00:02:12.850
Generally you wanna put a space here so
that there's a little bit of spacing.

31
00:02:12.850 --> 00:02:16.110
You can even put a colon or
something to kind of

32
00:02:16.110 --> 00:02:20.440
signify that you want some input here.

33
00:02:20.440 --> 00:02:25.723
And then you can say, print out,

34
00:02:25.723 --> 00:02:31.398
hello, (name) nice to meet you!

35
00:02:36.446 --> 00:02:40.074
&gt;&gt; Nina Zakharenko: Running
this from the command palette,

36
00:02:40.074 --> 00:02:43.600
we'll see that my prompt has changed.

37
00:02:43.600 --> 00:02:45.570
It's a block now, it's waiting for input.

38
00:02:46.990 --> 00:02:51.400
So I can type my name in here and
get my response back.

39
00:02:52.510 --> 00:02:58.660
Note that if you just press Enter,
you'll get back an empty string.

40
00:02:58.660 --> 00:03:01.374
So when you're accepting user input,

41
00:03:01.374 --> 00:03:06.895
it's generally a good idea to do some
validation on it or some syntax checking.

