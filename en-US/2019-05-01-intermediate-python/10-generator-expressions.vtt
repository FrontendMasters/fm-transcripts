WEBVTT

1
00:00:00.190 --> 00:00:04.400
&gt;&gt; Nina: Something to note here is that
this list comprehension, it won't go and

2
00:00:04.400 --> 00:00:07.550
build up that whole list in memory.

3
00:00:07.550 --> 00:00:10.006
And it's a little bit inefficient.

4
00:00:10.006 --> 00:00:16.220
In Python 3, there's idea of generators,

5
00:00:16.220 --> 00:00:21.190
and like we saw when we call the range,
it's like here's this funky object.

6
00:00:23.360 --> 00:00:28.280
Calling range each
number will be generated

7
00:00:28.280 --> 00:00:33.300
as we loop over it, kind of just in time,
think about it as a lazy evaluation.

8
00:00:35.180 --> 00:00:41.510
As we work with bigger datasets,
we can pretty easily do the same thing.

9
00:00:42.660 --> 00:00:45.550
So here's my length for naming dupes.

10
00:00:47.260 --> 00:00:52.080
To make a generator expression,
it's called generator expression

11
00:00:52.080 --> 00:00:56.820
in Python, but
I like to call it generator comprehension.

12
00:00:56.820 --> 00:00:59.560
I think that just makes
a little bit more sense.

13
00:00:59.560 --> 00:01:02.990
Generator expression is
the kind of correct name.

14
00:01:02.990 --> 00:01:05.180
Generator comprehension is
how you can think about it.

15
00:01:06.330 --> 00:01:10.220
So you get this weird
generator object back.

16
00:01:11.520 --> 00:01:16.712
And just like with range, that value
will be calculated as we need it,

17
00:01:16.712 --> 00:01:19.713
which is generally when we loop over it.

18
00:01:22.265 --> 00:01:28.434
&gt;&gt; Nina: And
you can pass this generator comprehension

19
00:01:28.434 --> 00:01:34.001
into some of our other,
&gt;&gt; Nina: Methods,

20
00:01:34.001 --> 00:01:36.230
so here I'm calling a set on it.

21
00:01:36.230 --> 00:01:37.631
This is a lot more efficient.

22
00:01:40.593 --> 00:01:45.670
&gt;&gt; Nina: When you pass in this generator
comprehension to other methods,

23
00:01:45.670 --> 00:01:50.392
these extra parenthesis are optional,
Python just knows.

24
00:01:55.854 --> 00:02:02.214
&gt;&gt; Nina: You can also call
those other methods the sum,

25
00:02:02.214 --> 00:02:06.312
the max, and the min on them.

26
00:02:06.312 --> 00:02:09.432
So the more efficient representation.

27
00:02:12.706 --> 00:02:17.639
&gt;&gt; Nina: Notice that when we make
a generator comprehension, and

28
00:02:17.639 --> 00:02:24.230
here let me simplify a little bit,
I'll just say I'll do my squares again.

29
00:02:29.310 --> 00:02:32.930
Let's say I assign it to a value.

30
00:02:34.090 --> 00:02:36.850
I can't do like my_get(0).

31
00:02:36.850 --> 00:02:41.058
I could with the last,
I can't access the first item.

32
00:02:41.058 --> 00:02:43.610
It's not subscriptable, right?

33
00:02:43.610 --> 00:02:48.070
So the way that we get at these items
in the generator is we loop over them,

34
00:02:49.210 --> 00:02:52.390
either in our comprehension or
a four loop right,

35
00:02:56.490 --> 00:03:00.290
that's when these values become
available as we loop over them.

36
00:03:01.950 --> 00:03:03.640
Any questions about generators?

37
00:03:03.640 --> 00:03:04.620
Yeah?
&gt;&gt; Speaker 2: So why would you

38
00:03:04.620 --> 00:03:05.410
use a generator?

39
00:03:05.410 --> 00:03:07.140
What's the benefit to that?

40
00:03:07.140 --> 00:03:08.232
Is it a performance thing?

41
00:03:08.232 --> 00:03:13.375
&gt;&gt; Nina: Yeah, as your data structures
grow, as you're using large numbers,

42
00:03:13.375 --> 00:03:19.304
working with large datasets, like you
would in AIML Generators become crucial.

43
00:03:19.304 --> 00:03:24.162
Because you don't have to generate or
Python is not creating that whole list,

44
00:03:24.162 --> 00:03:26.530
that whole data structure in memory.

45
00:03:27.560 --> 00:03:31.311
It's doing a lazy evaluation.

46
00:03:31.311 --> 00:03:34.146
And I could talk all
day about iterators and

47
00:03:34.146 --> 00:03:38.097
generators, this is just what
I have enough time to cover.

48
00:03:38.097 --> 00:03:40.240
They're really interesting and
fascinating.

