WEBVTT

1
00:00:00.780 --> 00:00:05.320
&gt;&gt; Nina Zakharenko: So very quickly,
yesterday we looked at the request and

2
00:00:05.320 --> 00:00:07.430
response cycle for an API.

3
00:00:08.840 --> 00:00:12.500
Think of routing in
Flask as the same thing.

4
00:00:12.500 --> 00:00:16.919
Flask is our web application,
consider it our server.

5
00:00:16.919 --> 00:00:19.490
So our client is the browser.

6
00:00:19.490 --> 00:00:24.896
In this case, I'm asking for
the route URL from my server, and

7
00:00:24.896 --> 00:00:32.141
my server is returning a response, just
a plain old string that says, hello world.

8
00:00:38.684 --> 00:00:40.910
&gt;&gt; Nina Zakharenko: Declaring
routes in Flask.

9
00:00:43.240 --> 00:00:48.290
We saw that forward slash
resolves to the route.

10
00:00:49.410 --> 00:00:55.256
But we can also put in as
many paths as we want.

11
00:00:55.256 --> 00:01:03.038
Let's say bonjour_worlds returns,

12
00:01:03.038 --> 00:01:08.229
"Bonjour, World!".

13
00:01:08.229 --> 00:01:14.261
By default, we want all of our
visitors to see, "Hello World!",

14
00:01:14.261 --> 00:01:19.149
but optionally,
if they wanna take the special path for

15
00:01:19.149 --> 00:01:22.420
let's say France, we can do that.

16
00:01:22.420 --> 00:01:25.423
So we would wanna declare a new app route.

17
00:01:25.423 --> 00:01:28.640
So still the forward slash,
that's the route.

18
00:01:30.280 --> 00:01:32.696
But now I'm gonna say /french.

19
00:01:35.520 --> 00:01:40.820
&gt;&gt; Nina Zakharenko: And make sure
that your Flask app is running here.

20
00:01:42.670 --> 00:01:46.300
Before we do that,
I'm gonna show you something pretty handy.

21
00:01:47.710 --> 00:01:52.080
In Flask you can have the debug mode for
you local environment,

22
00:01:53.200 --> 00:02:00.470
where you can have your site
just live reload your code.

23
00:02:00.470 --> 00:02:05.489
So that you don't have to type your new
function, change your route, play around

24
00:02:05.489 --> 00:02:10.526
with things, kill the server, start it
back up again, pretty tedious process.

25
00:02:10.526 --> 00:02:14.918
So here, just like we set
the Flask app to be hello.py,

26
00:02:14.918 --> 00:02:17.352
we want to back up a little bit.

27
00:02:17.352 --> 00:02:21.200
And we want to set a new
environment variable.

28
00:02:21.200 --> 00:02:24.714
And we're gonna set FLASK_ENV =

29
00:02:24.714 --> 00:02:28.994
development
&gt;&gt; Nina Zakharenko: So

30
00:02:28.994 --> 00:02:30.400
I'm just gonna copy that.

31
00:02:32.040 --> 00:02:36.939
So for Mac, it would be this and
for Windows,

32
00:02:43.935 --> 00:02:44.608
&gt;&gt; Nina Zakharenko: Hopefully,

33
00:02:44.608 --> 00:02:45.590
sorry about that.

34
00:02:47.030 --> 00:02:50.840
For Windows, hopefully I can just,
come on, VS Code,

35
00:02:50.840 --> 00:02:53.300
you are not collaborating with me today.

36
00:02:53.300 --> 00:02:56.293
Hopefully I can just copy and
paste this whole thing,

37
00:02:56.293 --> 00:02:58.030
and that does the right trick.

38
00:02:58.030 --> 00:03:05.871
So I'm saying that FLASK_ENV
is equal to development,

39
00:03:12.496 --> 00:03:14.166
&gt;&gt; Nina Zakharenko: For Windows.

40
00:03:14.166 --> 00:03:18.460
Okay, now when we run Flask with

41
00:03:18.460 --> 00:03:23.480
our development environment,
we'll see that debug mode is on.

42
00:03:24.580 --> 00:03:28.080
And it'll say, restarting what stat,
the debugger's active.

43
00:03:30.600 --> 00:03:32.130
And now let's see.

44
00:03:32.130 --> 00:03:37.640
If we go to our webpage,
we should be able to load it just fine.

45
00:03:37.640 --> 00:03:40.030
Now if we try to add the path french,

46
00:03:41.810 --> 00:03:45.640
we'll see that the more
specific route was picked up.

47
00:03:45.640 --> 00:03:48.470
Or I'm sorry, the route for
french was picked up.

48
00:03:55.019 --> 00:03:57.640
&gt;&gt; Nina Zakharenko: You can
do a lot with this app.route.

49
00:03:57.640 --> 00:03:59.746
You can even accept parameters.

50
00:04:00.770 --> 00:04:04.029
&gt;&gt; Nina Zakharenko: You can give
type hints for those parameters.

51
00:04:05.840 --> 00:04:11.510
You can specify which HTTP methods
you want to accept in your route.

52
00:04:11.510 --> 00:04:13.930
For example, just get or just post.

53
00:04:15.530 --> 00:04:22.959
Let's try to make a new route
that accepts a parameter.

54
00:04:22.959 --> 00:04:30.398
So I'm gonna call this
app route /name/ and

55
00:04:30.398 --> 00:04:37.264
then a new symbol here, these brackets.

56
00:04:37.264 --> 00:04:43.333
And I'm gonna put a,
&gt;&gt; Nina Zakharenko: Name in here.

57
00:04:46.983 --> 00:04:52.332
&gt;&gt; Nina Zakharenko: Now I can say,
I'm gonna write a new function here,

58
00:04:52.332 --> 00:04:57.197
and my function has to
accept this one parameter

59
00:04:57.197 --> 00:05:01.347
because I defined it in the app.route.

60
00:05:01.347 --> 00:05:07.714
And I'm gonna return an f string,
and it's gonna say, Hello, and name.

61
00:05:11.186 --> 00:05:14.421
&gt;&gt; Nina Zakharenko: Okay, now,
saving this, I don't have to stop and

62
00:05:14.421 --> 00:05:16.300
start my server.

63
00:05:16.300 --> 00:05:20.131
I'm gonna go to the path name/Nina, and

64
00:05:20.131 --> 00:05:26.271
now whatever I put at the end of this
URL will be used as a parameter.

