WEBVTT

1
00:00:00.000 --> 00:00:03.436
&gt;&gt; Nina: To talk about objects,
let's talk about classes.

2
00:00:11.655 --> 00:00:18.633
&gt;&gt; Nina: So,
&gt;&gt; Nina: Everything

3
00:00:18.633 --> 00:00:20.605
in Python is an instance,

4
00:00:20.605 --> 00:00:26.623
all the variables that we've been working
with have been instances of a class.

5
00:00:26.623 --> 00:00:32.174
So,
&gt;&gt; Nina: For integers,

6
00:00:32.174 --> 00:00:38.124
to make a new one I could just pass
in a number to the int constructor.

7
00:00:38.124 --> 00:00:41.402
And if I check the type of that
we'll see that it's a class int.

8
00:00:44.031 --> 00:00:50.550
&gt;&gt; Nina: Something we haven't done
is check the type of int itself.

9
00:00:50.550 --> 00:00:52.927
It's a little bit different,
the class is a type.

10
00:00:54.530 --> 00:00:57.151
&gt;&gt; Nina: Classes versus instances,

11
00:00:57.151 --> 00:01:02.508
this OOP programming paradigms
structured around them.

12
00:01:02.508 --> 00:01:08.562
You can think of a class as a type of
something, here the type is an int, or

13
00:01:08.562 --> 00:01:13.949
you can think about specific
incidents of something like a car.

14
00:01:13.949 --> 00:01:17.934
Or I'm sorry,
you can think of a specific class, or

15
00:01:17.934 --> 00:01:20.755
category of something, lIke a car.

16
00:01:20.755 --> 00:01:26.677
And then the instance is
the specific instance of something.

17
00:01:26.677 --> 00:01:33.254
So here the int is the type, it's a class.

18
00:01:33.254 --> 00:01:39.362
Whereas the int(5), this is now
an instance, this is the number 5.

19
00:01:39.362 --> 00:01:43.170
So if my class was a car
you might think of

20
00:01:43.170 --> 00:01:47.217
it being a specific thing like my Subaru.

21
00:01:49.441 --> 00:01:53.794
&gt;&gt; Nina: All right,
a class is kind of like a template or

22
00:01:53.794 --> 00:01:58.484
a recipe and
then you can use that to make new active

23
00:01:58.484 --> 00:02:02.852
instances that have
specific values in them.

24
00:02:02.852 --> 00:02:08.117
When you change the class
variable that's only gonna

25
00:02:08.117 --> 00:02:14.206
change what's returned from
that variable for everything.

26
00:02:14.206 --> 00:02:17.875
But if you change the value
of something in an instance,

27
00:02:17.875 --> 00:02:19.991
you're not changing the type.

28
00:02:19.991 --> 00:02:21.382
You're not changing the recipe.

29
00:02:21.382 --> 00:02:26.967
You're only changing that
particular instance that you have.

30
00:02:26.967 --> 00:02:29.452
So I'm gonna come back to this later.

31
00:02:29.452 --> 00:02:34.698
It's a little bit confusing but
those of you who've been doing Python for

32
00:02:34.698 --> 00:02:40.207
a while, you might have seen this soft
key word, peppered throughout code.

33
00:02:40.207 --> 00:02:43.005
So let's talk a little
bit about what that does.

34
00:02:43.005 --> 00:02:47.567
If I try to just put code in a new file,
no syntax highlighting.

35
00:02:47.567 --> 00:02:48.871
So I have to save it.

36
00:02:51.171 --> 00:02:56.308
&gt;&gt; Nina: I'm gonna save it as a cars.py.

37
00:03:00.191 --> 00:03:06.752
&gt;&gt; Nina: Okay, so my class Car,
I have a class method her runs = True.

38
00:03:06.752 --> 00:03:14.522
And start method here takes the name or
it takes the self.

39
00:03:17.161 --> 00:03:20.116
&gt;&gt; Nina: And
I also wanted to take a name for my car.

40
00:03:23.992 --> 00:03:29.458
&gt;&gt; Nina: This time I wanna show you that,
so self is associated with the instance.

41
00:03:29.458 --> 00:03:34.048
If I wanted to save the name
that I pass into this method,

42
00:03:34.048 --> 00:03:37.769
I would do that by
saying self.name = name.

43
00:03:40.144 --> 00:03:46.880
&gt;&gt; Nina: And now I can say if
self.runs: print("Car is started"),

44
00:03:46.880 --> 00:03:53.383
and I'm gonna put my f in here
this time and the name of the car.

45
00:03:55.525 --> 00:04:01.818
&gt;&gt; Nina: Because name is passed into here,
we know that we'll have it.

46
00:04:01.818 --> 00:04:07.309
But if we wanted access to
it in a method that didn't

47
00:04:07.309 --> 00:04:14.092
necessarily take this as a parameter,
we can use self.name.

48
00:04:14.092 --> 00:04:17.856
That'll will give other
methods access to it.

49
00:04:17.856 --> 00:04:23.025
And then I can say,
otherwise print the f-string,

50
00:04:23.025 --> 00:04:28.913
put the f in there now,
self.name, car is broken, no.

51
00:04:31.962 --> 00:04:34.500
&gt;&gt; Nina: We'll talk about
imports a little bit more later.

52
00:04:34.500 --> 00:04:41.458
I might have to restart my REPL,
in order to pick up this new file.

53
00:04:41.458 --> 00:04:48.251
Now, I should be able to
do from cars import Car.

54
00:04:48.251 --> 00:04:53.686
And if you all put those cars file in
your top-level directory you should

55
00:04:53.686 --> 00:04:58.977
be able to do that as well or so,
&gt;&gt; Nina: Okay, now,

56
00:04:58.977 --> 00:05:04.621
I can say I can check the type of car,
it's of class type.

57
00:05:04.621 --> 00:05:11.346
I can look at car and see the value of
runs because that's a class variable.

58
00:05:11.346 --> 00:05:13.387
But if I try to check car.name,

59
00:05:13.387 --> 00:05:17.174
there's no attribute name
that's a instance attribute.

60
00:05:17.174 --> 00:05:22.978
So I'm gonna make a new instance and
say my_subaru is a new car.

61
00:05:22.978 --> 00:05:26.716
The type of my_subaru,

62
00:05:31.785 --> 00:05:36.019
&gt;&gt; Nina: It's a instance of class

63
00:05:36.019 --> 00:05:38.241
cars.car.

64
00:05:38.241 --> 00:05:44.019
Now, I can say in my_subaru.runs and
passing the string subaru.

65
00:05:44.019 --> 00:05:46.491
What is going on?

66
00:05:46.491 --> 00:05:48.128
Pull object is not callable.

67
00:05:48.128 --> 00:05:49.119
&gt;&gt; Speaker 2: You wanna call start.

68
00:05:53.769 --> 00:05:55.013
&gt;&gt; Nina: Thank you so much.

69
00:05:55.013 --> 00:05:57.346
Such a total brain fart.

70
00:05:57.346 --> 00:06:02.313
Okay, my_subaru.start("Subaru").

71
00:06:02.313 --> 00:06:04.222
There we go, ta-da.

72
00:06:04.222 --> 00:06:07.543
So my Subaru car is started.

73
00:06:07.543 --> 00:06:12.423
I know that when I tried
to check the type,

74
00:06:12.423 --> 00:06:16.058
so Car.name, I got an error.

75
00:06:16.058 --> 00:06:21.047
What if I ask for
my_subaru.name, what will I get?

76
00:06:21.047 --> 00:06:22.474
The Subaru, right?

77
00:06:22.474 --> 00:06:27.060
So that variable is associated with
the instance, not with the class type.

