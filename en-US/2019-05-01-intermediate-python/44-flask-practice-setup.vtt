WEBVTT

1
00:00:00.850 --> 00:00:05.520
&gt;&gt; Nina Zakharenko: And all of that
leads us into our final exercise.

2
00:00:05.520 --> 00:00:11.500
So for intermediate Python,
go to Chapter eight, the final exercise.

3
00:00:12.550 --> 00:00:18.880
We're going to build that basic
web app that we saw earlier.

4
00:00:18.880 --> 00:00:23.006
And let me kill this one and bring up
the window where I had it running.

5
00:00:25.997 --> 00:00:28.457
&gt;&gt; Nina Zakharenko: So this basic web app,

6
00:00:28.457 --> 00:00:34.844
sorry,
&gt;&gt; Nina Zakharenko: Allows us

7
00:00:34.844 --> 00:00:40.425
to select our languages via checkbox and
hit Submit, and with each submission,

8
00:00:40.425 --> 00:00:45.620
we don't have a database,
we're just hitting the GitHub API.

9
00:00:45.620 --> 00:00:50.115
So for the few of you folks in class, as
you build this, if you kinda really mash

10
00:00:50.115 --> 00:00:54.905
all the buttons, you might hit the rate
limit, so just something to be mindful of.

11
00:00:54.905 --> 00:01:01.416
And I can go and hit this API filter
by whichever language I want.

12
00:01:04.484 --> 00:01:09.338
&gt;&gt; Nina Zakharenko: Okay, for
this exercise, if you go to

13
00:01:09.338 --> 00:01:15.105
the class website,
you should have flask and

14
00:01:15.105 --> 00:01:19.080
requests installed already.

15
00:01:19.080 --> 00:01:23.590
If you don't, you can take a look
at this requirements.txt file

16
00:01:25.150 --> 00:01:30.680
that I put in with my package.

17
00:01:30.680 --> 00:01:33.530
And this file is in the course repository,
so

18
00:01:33.530 --> 00:01:37.070
if you get poll,
you'll get all the latest changes.

19
00:01:37.070 --> 00:01:42.000
This lists all of the libraries that
are required to run my program.

20
00:01:42.000 --> 00:01:46.070
You can even peg these to a specific
version with a double equal signs

21
00:01:46.070 --> 00:01:49.270
if you want to, just an example there.

22
00:01:49.270 --> 00:01:55.480
So if you didn't have the required
dependencies installed,

23
00:01:55.480 --> 00:02:01.370
you can do a python -m pip install and
then pass the -r flag to specify a file.

24
00:02:02.970 --> 00:02:04.930
Once you advance in
your Python journey and

25
00:02:04.930 --> 00:02:07.560
your requirements become more complicated,

26
00:02:07.560 --> 00:02:13.900
you can use the more advanced pipenv
tool to handle complicated dependencies.

27
00:02:13.900 --> 00:02:17.320
So just an important thing
about this final exercise.

28
00:02:17.320 --> 00:02:23.790
Download the zip file that contains
the static files for this application.

29
00:02:23.790 --> 00:02:26.102
And just like the templates directory,

30
00:02:26.102 --> 00:02:29.507
where Flask just knew all my
templates just lived in there.

31
00:02:29.507 --> 00:02:32.970
For our static files,
we have a static directory, and

32
00:02:32.970 --> 00:02:36.610
Flask just knows that
those are static files.

33
00:02:36.610 --> 00:02:40.893
So I'm going to provide
you with a CSS file and

34
00:02:40.893 --> 00:02:47.225
an index.html template that does
the ginger templating for you.

35
00:02:47.225 --> 00:02:52.446
And you're gonna write your
own flask routing that takes,

36
00:02:52.446 --> 00:02:55.892
the route is gonna be at the root URL, or

37
00:02:55.892 --> 00:03:00.382
that route is gonna accept a get and
a post, right,

38
00:03:00.382 --> 00:03:05.103
when we submit a form,
that's gonna be an HTTP post.

39
00:03:05.103 --> 00:03:08.936
When we first visit the page
that's just a get, and

40
00:03:08.936 --> 00:03:14.119
you're gonna build that along with
the static files that I provide.

41
00:03:15.670 --> 00:03:19.810
You're also gonna use some of
the things that we learned earlier.

42
00:03:19.810 --> 00:03:27.130
So, our GitHub repositories, those
are gonna be stored in our own class.

43
00:03:27.130 --> 00:03:29.500
We're gonna throw a custom exception.

