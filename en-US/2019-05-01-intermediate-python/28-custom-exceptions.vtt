WEBVTT

1
00:00:00.176 --> 00:00:04.859
&gt;&gt; Nina: Exceptions are just
regular classes the inherit

2
00:00:04.859 --> 00:00:07.491
from the exception class.

3
00:00:07.491 --> 00:00:16.979
And so I can ask Issubclass(ValueError,
Exception).

4
00:00:16.979 --> 00:00:19.700
It's true, right?

5
00:00:19.700 --> 00:00:22.350
You can do this for all of the exceptions
that we've been looking at.

6
00:00:24.040 --> 00:00:29.010
So in order to make our own custom
exceptions, all we need to do

7
00:00:29.010 --> 00:00:34.640
is subclass from exception, just like
all these other types of exceptions do.

8
00:00:34.640 --> 00:00:39.550
So I can say class MyCustomException,
subclass from Exception.

9
00:00:41.350 --> 00:00:43.792
And then it doesn't really matter.

10
00:00:43.792 --> 00:00:50.293
You can even have just pass, which
means it's a valid statement in Python,

11
00:00:50.293 --> 00:00:56.185
so it means you can kind of have
an empty class without any variables or

12
00:00:56.185 --> 00:00:59.554
an initializer or anything like that.

13
00:01:03.066 --> 00:01:07.829
&gt;&gt; Nina: Now I can raise this
CustomException class by using

14
00:01:07.829 --> 00:01:09.718
the raise keyword.

15
00:01:14.549 --> 00:01:17.932
&gt;&gt; Nina: Oops, sorry, no colon there.

16
00:01:17.932 --> 00:01:21.926
And now we get a trace back
going back to MyCustomException.

17
00:01:24.542 --> 00:01:29.496
&gt;&gt; Nina: This is a really useful way
of signaling error conditions in

18
00:01:29.496 --> 00:01:33.040
your production Python code.

19
00:01:33.040 --> 00:01:37.973
It's good to have custom exception
classes so that you can then handle them

20
00:01:37.973 --> 00:01:42.728
as specifically as you want
in your error checking code.

21
00:01:42.728 --> 00:01:46.049
&gt;&gt; Nina: Does that make sense why?

22
00:01:46.049 --> 00:01:50.652
Okay, the nice thing about these
custom exception classes is they

23
00:01:50.652 --> 00:01:52.550
don't have to get simple.

24
00:01:52.550 --> 00:01:55.700
We can get as fancy as we want here.

25
00:01:55.700 --> 00:01:58.930
So I'm gonna make a new class.

26
00:01:58.930 --> 00:02:03.212
The IncorrectValueError,
it's gonna sub class from Exception.

27
00:02:07.791 --> 00:02:11.329
&gt;&gt; Nina: And
I'm gonna make a constructor here.

28
00:02:11.329 --> 00:02:17.732
I'm gonna take self and
I'm also gonna take value.

29
00:02:20.969 --> 00:02:24.037
&gt;&gt; Nina: Now I know that
exceptions all have a message.

30
00:02:24.037 --> 00:02:29.680
I did this by looking at the documentation
and you can too, but bear with me for now.

31
00:02:29.680 --> 00:02:35.319
I can say that from my error request,
I want the message to be got a bad value,

32
00:02:35.319 --> 00:02:38.858
and then actually print
out what the value was.

33
00:02:43.279 --> 00:02:50.507
&gt;&gt; Nina: How do I call the exception
class and pass in my new message?

34
00:02:50.507 --> 00:02:51.344
&gt;&gt; Speaker 2: Super.

35
00:02:51.344 --> 00:02:53.133
&gt;&gt; Nina: Its super.

36
00:02:53.133 --> 00:02:57.705
&gt;&gt; [INAUDIBLE]
&gt;&gt; Nina: Then I pass in my new message.

37
00:03:00.951 --> 00:03:06.643
&gt;&gt; Nina: Okay, so
now I can say my value equals and

38
00:03:06.643 --> 00:03:14.290
if my value is greater than 998,
&gt;&gt; Nina: Oops.

39
00:03:17.168 --> 00:03:18.370
&gt;&gt; Nina: Let me fix that underscore there.

40
00:03:18.370 --> 00:03:22.660
If my value is greater than 998,

41
00:03:22.660 --> 00:03:29.241
raise my IncorrectValueError and
pass in my_value.

42
00:03:32.319 --> 00:03:34.540
&gt;&gt; Nina: There we go,
that's my error message, right?

43
00:03:34.540 --> 00:03:37.200
That looks like the other
Python trace backs.

44
00:03:37.200 --> 00:03:39.799
It gives us the type and
then it gives us the message.

45
00:03:41.160 --> 00:03:43.660
So very useful, especially for logging.

46
00:03:45.470 --> 00:03:50.410
We can do this because exception
in general takes the message.

47
00:03:50.410 --> 00:03:55.132
So if I wanted to, don't do this.

48
00:03:57.358 --> 00:03:58.923
&gt;&gt; Nina: Not good practice.

49
00:03:58.923 --> 00:04:01.171
Just showing you.

50
00:04:01.171 --> 00:04:05.676
You generally don't wanna raise
the exception because your custom error

51
00:04:05.676 --> 00:04:10.048
handling code,
&gt;&gt; Nina: Probably

52
00:04:10.048 --> 00:04:14.998
doesn't do a good job of figuring out
in why this exception was thrown.

53
00:04:14.998 --> 00:04:22.584
But you can pass a message here,
you say whatever message I want.

54
00:04:25.402 --> 00:04:27.012
&gt;&gt; Nina: There we go.

55
00:04:29.672 --> 00:04:35.910
&gt;&gt; Nina: Let's write a custom
exception for our GitHub API.

