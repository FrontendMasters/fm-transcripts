WEBVTT

1
00:00:00.120 --> 00:00:04.386
&gt;&gt; Nina Zakharenko: One more topic to
cover before we go into our exercise is

2
00:00:04.386 --> 00:00:05.601
inheritance.

3
00:00:08.603 --> 00:00:13.090
&gt;&gt; Nina Zakharenko: As you saw on
this classes in Python help us make

4
00:00:13.090 --> 00:00:14.708
reusable code.

5
00:00:14.708 --> 00:00:19.658
And I'm gonna make a new file here,
and I'm gonna save that, and

6
00:00:19.658 --> 00:00:25.208
I'm gonna call it vehicle
&gt;&gt; Nina Zakharenko: We'll call that py.

7
00:00:28.281 --> 00:00:28.924
&gt;&gt; Nina Zakharenko: Okay.

8
00:00:31.057 --> 00:00:35.629
&gt;&gt; Nina Zakharenko: Sometimes we want our
classes to share properties between each

9
00:00:35.629 --> 00:00:36.240
other.

10
00:00:36.240 --> 00:00:41.855
So we saw that my car had four wheels.

11
00:00:41.855 --> 00:00:45.204
Well, I could also have a motorcycle, and

12
00:00:45.204 --> 00:00:50.050
my motorcycle will have two wheels but
it still runs, right?

13
00:00:51.200 --> 00:00:59.376
So inheritance is a way the kind of
make type that have should attribute.

14
00:00:59.376 --> 00:01:04.288
It helps us break an organizer code in
a hierarchy from more generic to more

15
00:01:04.288 --> 00:01:05.090
specific.

16
00:01:06.270 --> 00:01:11.945
Objects that belong to classes higher up
the hierarchy, the more generic ones,

17
00:01:11.945 --> 00:01:17.549
they're accessible via the more specific
sub-classes, but not vice versa.

18
00:01:19.452 --> 00:01:23.104
&gt;&gt; Nina Zakharenko: Earlier, we saw that,

19
00:01:27.266 --> 00:01:30.143
&gt;&gt; Nina Zakharenko: The bull type

20
00:01:30.143 --> 00:01:33.285
issubclass,

21
00:01:49.588 --> 00:01:50.090
&gt;&gt; Nina Zakharenko: Sorry,

22
00:01:50.090 --> 00:01:54.252
I forgot the arguments and
instead of scrolling through my history,

23
00:01:54.252 --> 00:01:57.924
I'm just gonna show you the quickest
way to get help on that.

24
00:01:57.924 --> 00:02:04.692
So the first thing is the cls, and
the second thing is the class_or_tuple,

25
00:02:04.692 --> 00:02:11.391
so,
&gt;&gt; Nina Zakharenko: issubclass x, okay.

26
00:02:11.391 --> 00:02:14.694
So I would ask,
issubclass of bool and int,

27
00:02:14.694 --> 00:02:18.340
both of the arguments
have to be a class there.

28
00:02:18.340 --> 00:02:19.370
Okay, true.

29
00:02:19.370 --> 00:02:25.080
So just like we saw earlier
this Boolean subclass

30
00:02:25.080 --> 00:02:31.630
it took all of the properties of int, and
then it added to and extended them, right?

31
00:02:31.630 --> 00:02:35.300
So it's still got all the stuff
that's under the hood.

32
00:02:35.300 --> 00:02:40.420
You can be weird and add them together,
but it has a lot more properties.

33
00:02:43.810 --> 00:02:47.530
We can do the same thing
with our classes as well.

34
00:02:47.530 --> 00:02:51.554
So looking at this vehicle.py file,

35
00:02:51.554 --> 00:02:59.404
I'm gonna make a class vehicle,
&gt;&gt; Nina Zakharenko: And

36
00:02:59.404 --> 00:03:03.415
I'm gonna make a __init__ for it.

37
00:03:03.415 --> 00:03:06.190
What does the first argument
to __init__ have to be?

38
00:03:06.190 --> 00:03:06.690
&gt;&gt; Speaker 2: Self.

39
00:03:10.310 --> 00:03:14.497
&gt;&gt; Nina Zakharenko: And
I'm gonna put a make here and a model And

40
00:03:14.497 --> 00:03:19.845
the type of fuel that it takes,
just like in other types

41
00:03:19.845 --> 00:03:24.869
of functions I can pass in
a default argument here.

42
00:03:24.869 --> 00:03:29.570
Just remember that all of those default
arguments have to come last in order.

43
00:03:30.750 --> 00:03:34.896
How do I save these parameters
that are passed into my instance?

44
00:03:34.896 --> 00:03:36.131
&gt;&gt; Speaker 2: Self.make.

45
00:03:36.131 --> 00:03:40.156
&gt;&gt; Nina Zakharenko: Right, so
self.make is gonna be the passed in make.

46
00:03:40.156 --> 00:03:43.780
Self.model is gonna be
the passed in model.

47
00:03:44.880 --> 00:03:47.590
And self.fuel is gonna
be the passed in fuel.

48
00:03:49.360 --> 00:03:54.930
For you more advanced folks who
wanna do more research after class.

49
00:03:54.930 --> 00:03:59.340
There's a great thing in Python
3.7 called a data class,

50
00:03:59.340 --> 00:04:04.410
that is kind of a special type
of more advanced class that

51
00:04:04.410 --> 00:04:08.630
kind of helps you do a lot less
of this kind of template stuff.

52
00:04:09.860 --> 00:04:14.162
Cuz the more arguments you add, if you
want to save them into the instance,

53
00:04:14.162 --> 00:04:17.577
you're gonna have to kind of
have a long list of assignments

54
00:04:17.577 --> 00:04:21.416
here
&gt;&gt; Nina Zakharenko: Okay, and

55
00:04:21.416 --> 00:04:24.803
then I'm gonna make a new class now for
my Car, and

56
00:04:24.803 --> 00:04:28.650
it's going to inherit and
extend from vehicle.

57
00:04:28.650 --> 00:04:32.330
And in order to do that,
I add some parentheses here.

58
00:04:32.330 --> 00:04:37.060
And then I put in the class
that I want to extend from.

59
00:04:37.060 --> 00:04:40.510
So notice this is the type,
it's not an instance, right?

60
00:04:40.510 --> 00:04:42.430
This is the type I want to inherit from.

61
00:04:43.550 --> 00:04:48.471
And my car is going to
have its own constructor.

62
00:04:53.782 --> 00:04:56.570
&gt;&gt; Nina Zakharenko: And
it's gonna take self again.

63
00:04:56.570 --> 00:04:58.560
It's gonna take the make, the model.

64
00:05:00.430 --> 00:05:03.938
It's gonna take the fuel.

65
00:05:03.938 --> 00:05:11.756
But it's also gonna take another
optional argument, number_wheels.

66
00:05:20.632 --> 00:05:25.256
&gt;&gt; Nina Zakharenko: If I want to
call the constructor on my vehicle,

67
00:05:25.256 --> 00:05:30.110
because I already do,
I wrote the code to do most of

68
00:05:30.110 --> 00:05:34.637
the stuff just adding on
a little bit of extra.

69
00:05:34.637 --> 00:05:37.490
I have to use a special keyword
in Python called super.

70
00:05:39.250 --> 00:05:41.280
And if you use Python 2 or

71
00:05:41.280 --> 00:05:45.660
if you've seen Python 2, this super
keyword is just a bit of a mess.

72
00:05:49.468 --> 00:05:54.597
In Python 3, it's a lot easier,
he just used the super keyword,

73
00:05:54.597 --> 00:06:01.259
you kinda call it with this empty,
&gt;&gt; Nina Zakharenko: Empty string and

74
00:06:01.259 --> 00:06:06.176
you do the method of the super
class that you want to call,

75
00:06:06.176 --> 00:06:09.255
and then you pass in the arguments.

76
00:06:15.966 --> 00:06:21.611
&gt;&gt; Nina Zakharenko: So this just calls,
these were part of the parameters I gave,

77
00:06:21.611 --> 00:06:24.690
but we missed something.

78
00:06:24.690 --> 00:06:27.510
We're passing in a new parameter.

79
00:06:27.510 --> 00:06:30.090
What do we have with the number of wheels?

80
00:06:30.090 --> 00:06:31.130
&gt;&gt; Speaker 2: Assign it to self.

81
00:06:31.130 --> 00:06:33.431
&gt;&gt; Nina Zakharenko: Assign it to self,
all right?

82
00:06:39.268 --> 00:06:43.017
&gt;&gt; Nina Zakharenko: Okay,
I'm gonna copy over this of reload stuff,

83
00:06:43.017 --> 00:06:45.796
this reload comment to the top here.

84
00:06:48.687 --> 00:06:50.279
&gt;&gt; Nina Zakharenko: So it's a little more,

85
00:06:50.279 --> 00:06:55.705
we're not usually changing a file this
much, and I'm gonna open my REPL again.

86
00:06:55.705 --> 00:07:00.216
So now I'm gonna say,

87
00:07:00.216 --> 00:07:04.491
import vehicle, and

88
00:07:04.491 --> 00:07:09.723
I'm gonna make a new car.

89
00:07:09.723 --> 00:07:13.747
I'm gonna say, my_subaru = actually,

90
00:07:13.747 --> 00:07:19.125
before I do that,
I'm gonna make a new vehicle, right?

91
00:07:19.125 --> 00:07:24.941
This super class,
maybe I have a four_by_four, right?

92
00:07:24.941 --> 00:07:27.932
It doesn't fit into the other categories.

93
00:07:27.932 --> 00:07:31.050
So I'm gonna say that my
four_by_four is a vehicle.

94
00:07:31.050 --> 00:07:35.370
And the make of it,
I don't know about four_by_four.

95
00:07:35.370 --> 00:07:40.340
So I'm gonna say, the make of it is zoom,

96
00:07:40.340 --> 00:07:44.316
and the model is it goes fast, and

97
00:07:44.316 --> 00:07:50.157
the fuel is cooking oil,
it's very efficient.

98
00:07:50.157 --> 00:07:55.467
I'm sorry, I had to do a vehicle.vehicle
&gt;&gt; Nina Zakharenko: Usually

99
00:07:55.467 --> 00:07:58.501
it would just say from vehicle import,
the vehicle class, but

100
00:07:58.501 --> 00:08:01.260
because I have to reload we're
kind of doing it this way.

101
00:08:02.280 --> 00:08:07.982
Okay, so now my four_by_four,
&gt;&gt; Nina Zakharenko: It

102
00:08:07.982 --> 00:08:12.891
has a make, it has a model,
and it has a fuel.

103
00:08:15.863 --> 00:08:17.964
&gt;&gt; Nina Zakharenko: I'm gonna
make a new instance of Car.

104
00:08:22.238 --> 00:08:27.973
&gt;&gt; Nina Zakharenko: So
I'm gonna say my_subaru is a vehicle.Cars,

105
00:08:27.973 --> 00:08:30.838
and the make is Subaru and

106
00:08:30.838 --> 00:08:36.447
the model is cross trek,
and the fuel is diesel.

107
00:08:42.648 --> 00:08:48.390
&gt;&gt; Nina Zakharenko: I'm sorry,
I called it Car, so vehicle.Car, okay?

108
00:08:48.390 --> 00:08:51.039
So I have my_subaru instance now.

109
00:08:51.039 --> 00:08:57.853
My_subaru.make, my_subaru.model,

110
00:08:57.853 --> 00:09:01.170
my_subaru.fuel.

111
00:09:03.930 --> 00:09:08.228
Does my_subaru.num_wheels variable?

112
00:09:08.228 --> 00:09:10.116
Does it?

113
00:09:10.116 --> 00:09:15.220
&gt;&gt; Speaker 2: [INAUDIBLE]
&gt;&gt; Nina Zakharenko: It does, all right?

114
00:09:16.740 --> 00:09:21.562
Does, let's see, what did I name it here,
my four_by_four.

115
00:09:21.562 --> 00:09:25.190
Does my four_by_four.num_wheels?

116
00:09:27.010 --> 00:09:28.157
Does it?
&gt;&gt; Speaker 2: No.

117
00:09:28.157 --> 00:09:29.387
&gt;&gt; Nina Zakharenko: No, right, no.

118
00:09:31.503 --> 00:09:34.455
&gt;&gt; Nina Zakharenko: Vehicle object
has no attribute num_wheels.

119
00:09:36.129 --> 00:09:38.803
&gt;&gt; Nina Zakharenko: My Car does,
my Vehicle doesn't.

120
00:09:38.803 --> 00:09:43.768
And this is a good opportunity for
me now if I wanted to make a motorcycle

121
00:09:43.768 --> 00:09:48.080
to make a new class that has
the default num_wheels to be 2.

122
00:09:48.080 --> 00:09:53.410
And that really kinda cuts down on data
duplication, makes this code a lot more

123
00:09:55.260 --> 00:09:59.930
composable, I want more like
easier to maintain, right?

124
00:09:59.930 --> 00:10:06.433
If I had a method on Vehicle,
&gt;&gt; Nina Zakharenko: Let's say,

125
00:10:12.947 --> 00:10:15.096
&gt;&gt; Nina Zakharenko: Is my fuel efficient,

126
00:10:15.096 --> 00:10:17.250
is_eco_friendly?

127
00:10:19.972 --> 00:10:25.821
&gt;&gt; Nina Zakharenko: And I would take
in self, and if the fuel = gas,

128
00:10:25.821 --> 00:10:29.342
we're gonna return False.

129
00:10:29.342 --> 00:10:36.560
Otherwise, we're gonna return True,

130
00:10:36.560 --> 00:10:41.876
and my self.fuel of course.

131
00:10:41.876 --> 00:10:46.650
And I know that self.fuel

132
00:10:46.650 --> 00:10:51.750
is always in my Vehicle.

133
00:10:51.750 --> 00:10:54.430
Even if I removed with this,

134
00:10:54.430 --> 00:10:57.630
it wouldn't matter because
the fuel here is by default gas.

135
00:10:59.000 --> 00:11:03.403
So now I'm gonna go in,
I'm going to reload

136
00:11:03.403 --> 00:11:10.641
this,
&gt;&gt; Nina Zakharenko: And

137
00:11:10.641 --> 00:11:17.176
then I'm gonna say,
I'm gonna go back to my four_by_four.

138
00:11:22.980 --> 00:11:26.986
&gt;&gt; Nina Zakharenko: And make a new
instance, gonna make a new instance of

139
00:11:26.986 --> 00:11:33.903
my_subaru,
&gt;&gt; Nina Zakharenko: Subaru,

140
00:11:33.903 --> 00:11:41.322
crosstrek,
&gt;&gt; Nina Zakharenko: Does my four_by_four,

141
00:11:41.322 --> 00:11:46.019
can I call this is_eco_friendly,
method on it?

142
00:11:46.019 --> 00:11:48.888
Yes.

143
00:11:48.888 --> 00:11:53.052
Can, right?

144
00:11:53.052 --> 00:12:01.328
Can I call it on my_subaru,
&gt;&gt; Speaker 2: No,

145
00:12:01.328 --> 00:12:04.510
because you didn't bring it in in super?

146
00:12:06.210 --> 00:12:14.463
&gt;&gt; Nina Zakharenko: I didn't, but what
did I do here by calling super().__init?

147
00:12:16.989 --> 00:12:22.205
&gt;&gt; Nina Zakharenko: I called init
on my Vehicle and my Car inherits

148
00:12:22.205 --> 00:12:27.146
from vehicle, so any methods available to

149
00:12:27.146 --> 00:12:33.200
my Vehicle will also be
available on my Car.

150
00:12:33.200 --> 00:12:37.130
That's how we encourage code reuse.

151
00:12:37.130 --> 00:12:40.570
If I made a new motorcycle class
that inherited from Vehicle,

152
00:12:40.570 --> 00:12:43.940
it would also have this
is_eco_friendly method.

153
00:12:43.940 --> 00:12:47.829
So instead of making a motorcycle,
and a car, and

154
00:12:47.829 --> 00:12:52.921
a four_by_four that all have
their own version of this method,

155
00:12:52.921 --> 00:12:57.382
we cut down on code duplication,
and put it in one place.

156
00:12:57.382 --> 00:12:59.051
Okay, the last topic here,

157
00:12:59.051 --> 00:13:03.920
I'm not gonna talk about very much
I just wanna give you a heads up.

158
00:13:03.920 --> 00:13:08.390
Unlike in other languages, in Python,
you can have multiple inheritance.

159
00:13:08.390 --> 00:13:13.040
So you can inherit from multiple
different other classes at once.

160
00:13:14.350 --> 00:13:21.160
And things get a bit hairy, but one use
case of this is something called a mix in.

161
00:13:21.160 --> 00:13:28.880
So a mix in might be a class that
just has a method like this on it.

162
00:13:28.880 --> 00:13:32.320
And I don't care if my
four_by-four is_eco_friendly.

163
00:13:32.320 --> 00:13:35.325
I'm driving it through the grass and
mowing it down, and

164
00:13:35.325 --> 00:13:41.200
what do I care if it's gas or solar.

165
00:13:41.200 --> 00:13:45.670
So well, in the cases where
I do care maybe like a car,

166
00:13:45.670 --> 00:13:50.750
I can have an additional class that I
inherit from, it just have this method.

167
00:13:52.370 --> 00:13:55.290
So one of my favorite,
one common used case for

168
00:13:55.290 --> 00:14:00.160
this you might see if you're
declaring database tables in Python.

169
00:14:00.160 --> 00:14:02.104
You might have some mix-ins for

170
00:14:02.104 --> 00:14:06.066
something like a date column
where you don't necessarily want.

171
00:14:06.066 --> 00:14:08.039
You want to have a date,

172
00:14:08.039 --> 00:14:13.790
a created on date on all of your
objects just for compliance reasons.

173
00:14:13.790 --> 00:14:17.590
But you don't wanna have to say class
vehicle dot date equals whatever.

174
00:14:17.590 --> 00:14:20.100
Class motorcycle dot date equals whatever.

175
00:14:20.100 --> 00:14:24.560
So you can just have a mix in class
that will create that column for

176
00:14:24.560 --> 00:14:28.390
you, and provide all of the methods
that you might need to use it.

177
00:14:28.390 --> 00:14:33.220
&gt;&gt; Speaker 3: I've seen Python code that,
an objects that don't, or

178
00:14:33.220 --> 00:14:35.300
classes that don't inherit
from anything else,

179
00:14:35.300 --> 00:14:39.840
put the object keyword as
the object that they inherit from.

180
00:14:39.840 --> 00:14:42.743
Instead of just saying the name,
the class :,

181
00:14:42.743 --> 00:14:46.962
will have object after the class
definition, is there difference?

182
00:14:46.962 --> 00:14:52.108
&gt;&gt; Nina Zakharenko: Yeah, that is one
of the differences between Python 2 and

183
00:14:52.108 --> 00:14:53.163
Python 3.

184
00:14:53.163 --> 00:14:58.101
In Python 3, you don't need to do
that any more, i t's redundant,

185
00:14:58.101 --> 00:15:00.330
samples better than complex.

186
00:15:01.390 --> 00:15:07.174
You can still do it, and it's not
a syntax error, you just shouldn't.

