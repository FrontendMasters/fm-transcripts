WEBVTT

1
00:00:00.790 --> 00:00:05.489
&gt;&gt; Nina: If I wanted to track
the number of wheels on my car.

2
00:00:10.932 --> 00:00:16.222
&gt;&gt; Nina: And if you all are working in a
file so that you can follow along with me,

3
00:00:16.222 --> 00:00:19.374
let me show you what I
typed into the Repl.

4
00:00:26.472 --> 00:00:31.571
&gt;&gt; Nina: And cars is the name of my
py file without the py extension,

5
00:00:31.571 --> 00:00:34.082
just so you have that there.

6
00:00:34.082 --> 00:00:34.739
Okay.

7
00:00:38.681 --> 00:00:42.939
&gt;&gt; Nina: If I want to be able to access

8
00:00:42.939 --> 00:00:47.573
these class variables in my,

9
00:00:51.372 --> 00:00:53.331
&gt;&gt; Nina: In my methods,

10
00:00:53.331 --> 00:00:59.370
I can provide something
called a class method.

11
00:01:02.064 --> 00:01:09.580
&gt;&gt; Nina: And those are defined
with decorator like this.

12
00:01:09.580 --> 00:01:11.120
I'm not gonna go into too much detail,

13
00:01:11.120 --> 00:01:13.890
I just wanna show you because you
might see those in other code.

14
00:01:15.060 --> 00:01:16.769
The thing about the class method,

15
00:01:23.455 --> 00:01:27.660
&gt;&gt; Nina: A class method doesn't take self.

16
00:01:27.660 --> 00:01:32.170
Instead, it takes a different
argument called cls, or,

17
00:01:32.170 --> 00:01:35.300
it doesn't really matter what you name it,
but this is kind of the convention.

18
00:01:36.580 --> 00:01:41.280
Now you can access,
&gt;&gt; Nina: Now you can

19
00:01:41.280 --> 00:01:43.289
access these class variables.

20
00:01:48.333 --> 00:01:52.700
&gt;&gt; Nina: Oops, I want to return
the number of wheels variable.

21
00:01:54.310 --> 00:01:58.130
So it's saving that and reloading it.

22
00:02:00.410 --> 00:02:09.020
I can say my Subaru is
a cars.car("subaru").

23
00:02:12.483 --> 00:02:13.903
&gt;&gt; Nina: That's my instance.

24
00:02:18.684 --> 00:02:25.085
&gt;&gt; Nina: I wasn't able to access
the name from just the type.

25
00:02:25.085 --> 00:02:30.351
But now,
because I made this a class method,

26
00:02:30.351 --> 00:02:37.580
I can say cars.Car and
call get_number_of_wheels().

27
00:02:37.580 --> 00:02:40.706
Notice, this is the type,
not the instance.

28
00:02:40.706 --> 00:02:45.230
It's the difference between a class
method and an instance method.

29
00:02:45.230 --> 00:02:49.500
As you're just starting out, you'll
probably be using all instance methods.

30
00:02:49.500 --> 00:02:52.580
Class methods are generally for
special cases.

31
00:02:52.580 --> 00:02:57.087
You can also call these class
methods on an instance,

32
00:02:57.087 --> 00:03:03.407
because,
&gt;&gt; Nina: The instance

33
00:03:03.407 --> 00:03:08.579
knows about the class, but
not kind of the other way around.

34
00:03:08.579 --> 00:03:11.765
So I still can't call .star, right?

35
00:03:11.765 --> 00:03:15.408
So if I try to call cars.Car.start(),

36
00:03:15.408 --> 00:03:19.770
this is expecting an instance,
I don't have one.

37
00:03:19.770 --> 00:03:24.072
And I'm gonna get an error that says
start() is missing 1 required positional

38
00:03:24.072 --> 00:03:25.095
argument of self.

39
00:03:28.519 --> 00:03:32.735
&gt;&gt; Nina: So now you kind of know
what some of these errors mean,

40
00:03:32.735 --> 00:03:38.840
where self is appearing from, kind of
being binded under the hood by Python.

