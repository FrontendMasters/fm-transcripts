WEBVTT

1
00:00:00.740 --> 00:00:02.690
&gt;&gt; Nina Zakharenko: Let's
talk about exceptions.

2
00:00:02.690 --> 00:00:05.670
We've seen exceptions quite a bit
over the course of this class.

3
00:00:05.670 --> 00:00:11.850
We've seen type error, syntax error,
value error, indentation error.

4
00:00:11.850 --> 00:00:14.360
But we haven't really figured
out what to do about them.

5
00:00:14.360 --> 00:00:17.470
We saw some simple try excepts yesterday.

6
00:00:17.470 --> 00:00:24.420
But that's not enough in the course
of a more complex program.

7
00:00:24.420 --> 00:00:27.980
So I'm gonna tell you a little bit
about the exception of hierarchy,

8
00:00:27.980 --> 00:00:33.530
about raising exceptions, and
about how do you use try catch,

9
00:00:33.530 --> 00:00:39.299
and how to create our own
custom exception process.

10
00:00:41.440 --> 00:00:43.120
So a little bit about exceptions.

11
00:00:46.946 --> 00:00:50.606
&gt;&gt; Nina Zakharenko: The built-in
exceptions and exception handling,

12
00:00:50.606 --> 00:00:53.360
it's a really nice feature of Python.

13
00:00:54.518 --> 00:00:56.452
Those syntax errors that we've seen,

14
00:00:56.452 --> 00:00:59.564
they do a pretty good job of
telling us what went wrong, right?

15
00:01:01.100 --> 00:01:02.929
&gt;&gt; Nina Zakharenko: If we
get an indentation error,

16
00:01:02.929 --> 00:01:06.250
we know that we didn't
indent our code properly.

17
00:01:06.250 --> 00:01:07.601
If we get a value error,

18
00:01:07.601 --> 00:01:11.670
that means that something is wrong
with the input that we gave, right?

19
00:01:14.835 --> 00:01:17.353
&gt;&gt; Nina Zakharenko: Even if
the syntax is totally correct,

20
00:01:17.353 --> 00:01:21.000
sometimes errors occur
when your program is run.

21
00:01:21.000 --> 00:01:26.470
For example, if you tried to run our final
exercise from introduction to Python and

22
00:01:26.470 --> 00:01:28.870
you didn't have a valid
internet connection,

23
00:01:28.870 --> 00:01:33.720
it would just raise an exception that
we didn't catch and exit the program.

24
00:01:35.530 --> 00:01:42.660
So even if your syntax is 100% correct,
your program can still have exceptions.

25
00:01:42.660 --> 00:01:46.070
Unhandled exceptions
are fatal to your program.

26
00:01:46.070 --> 00:01:49.124
It's gonna print out a traceback and

27
00:01:49.124 --> 00:01:54.040
then quit your code wherever
it was at that time.

28
00:01:54.040 --> 00:01:55.997
&gt;&gt; Nina Zakharenko: And
it'll stop your interpreter.

29
00:01:55.997 --> 00:01:57.390
It'll exit your program.

30
00:01:57.390 --> 00:02:02.570
So for production code, having uncaught
exceptions is pretty bad, right?

31
00:02:02.570 --> 00:02:09.840
Just take down your website,
depending on kind of what you're seeing.

32
00:02:09.840 --> 00:02:14.570
Or if you're using a web server,
your end user will see a 500 error.

33
00:02:14.570 --> 00:02:15.850
And that's not very good, right?

34
00:02:17.572 --> 00:02:21.900
But once you learn a little bit more about
these exceptions and about how to handle

35
00:02:21.900 --> 00:02:29.830
them, it'll help you write apps that are
a lot more robust in the face of issues.

36
00:02:29.830 --> 00:02:33.563
So some common types of
exceptions that you might see,

37
00:02:33.563 --> 00:02:38.284
there are a few more in the Python
documentation, but very quickly.

38
00:02:38.284 --> 00:02:43.776
AttributeError, if I tried to use a
attribute name that wasn't on my instance,

39
00:02:43.776 --> 00:02:45.785
I would get this error.

40
00:02:45.785 --> 00:02:49.245
ImportError, if I try to import
something that wasn't found.

41
00:02:49.245 --> 00:02:53.840
KeyError, we've seen this one,
if a key was not in our dictionary.

42
00:02:55.780 --> 00:02:59.578
SyntaxError, the parser just doesn't
even know what to do with your file.

43
00:02:59.578 --> 00:03:05.203
IndentationError, if you're messing
with the level of indentation for

44
00:03:05.203 --> 00:03:08.740
if statements, classes, etc, functions,

45
00:03:08.740 --> 00:03:13.745
where you need to have your first
line of code indented one level.

46
00:03:13.745 --> 00:03:17.250
And this KeyboardInterrupt error,
that's an interesting one.

47
00:03:17.250 --> 00:03:21.026
So for those of you who have
been seeing me use use the REPL,

48
00:03:30.210 --> 00:03:31.859
&gt;&gt; Nina Zakharenko: You've seen me hit

49
00:03:31.859 --> 00:03:33.330
maybe Ctrl+C.

50
00:03:33.330 --> 00:03:35.170
If I'm typing something and

51
00:03:35.170 --> 00:03:39.430
I'm like, I made a mistake, I don't
wanna hit Enter and get a syntax error.

52
00:03:39.430 --> 00:03:41.650
I know that this isn't valid code.

53
00:03:41.650 --> 00:03:43.331
I could hit Ctrl+C.

54
00:03:43.331 --> 00:03:45.005
It doesn't run my code.

55
00:03:45.005 --> 00:03:49.597
And in this case,
it generates a KeyboardInterrupt error.

56
00:03:51.283 --> 00:03:54.615
&gt;&gt; Nina Zakharenko: For
programs that you run on the command line,

57
00:03:54.615 --> 00:04:00.256
if it's taking a really long time,
we've been writing pretty fast scripts,

58
00:04:00.256 --> 00:04:04.600
and you wanna exist out of it,
you can hit Ctrl+C.

59
00:04:04.600 --> 00:04:08.436
It'll generate a keyboard error, and it'll
quit your program while it's running.

60
00:04:12.517 --> 00:04:16.410
&gt;&gt; Nina Zakharenko: Just a quick thing
about this KeyboardInterrupt error.

61
00:04:17.600 --> 00:04:19.880
Let me take a look at
the Python documentation here.

62
00:04:21.260 --> 00:04:26.820
So these built-in exceptions, we'll see
that there's an exception base class.

63
00:04:26.820 --> 00:04:30.460
And all of the exceptions
mostly use this base class

64
00:04:31.480 --> 00:04:33.170
in terms of their object hierarchy.

65
00:04:35.310 --> 00:04:38.390
We, in our program code,
don't want to do that.

66
00:04:39.480 --> 00:04:44.480
If we're going to be handling exceptions,
we always want to handle types that

67
00:04:44.480 --> 00:04:49.110
are of exception Exception,
never BaseException.

68
00:04:49.110 --> 00:04:55.970
Exception here is one of
the subclasses of BaseException.

69
00:04:55.970 --> 00:05:04.004
If we catch BaseException, we're gonna
also catch those KeyboardInterrupt errors.

70
00:05:04.004 --> 00:05:07.566
Someone will be running your script,
press Ctrl+C, and it won't do anything.

71
00:05:07.566 --> 00:05:09.582
And they're gonna get pretty mad at you.

72
00:05:09.582 --> 00:05:14.940
So remember that, don't catch
BaseException, catch Exception instead.

