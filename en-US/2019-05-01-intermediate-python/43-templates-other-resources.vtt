WEBVTT

1
00:00:00.160 --> 00:00:03.850
&gt;&gt; Nina Zakharenko: It would be great if
the web was all plain text, but it's not.

2
00:00:05.600 --> 00:00:10.220
So, Flask provides something
called templating,

3
00:00:10.220 --> 00:00:15.300
which allows us to quickly and
easily access variables without

4
00:00:17.460 --> 00:00:20.320
having to use JavaScript or
anything fancy.

5
00:00:22.360 --> 00:00:27.071
In order to use a template
in whichever folder your

6
00:00:27.071 --> 00:00:31.680
hello.py is,
we're gonna open the terminal.

7
00:00:33.020 --> 00:00:36.760
We can kill our server for now just so
we know we're on the right path.

8
00:00:36.760 --> 00:00:40.766
We're gonna make a new directory and
we're gonna call it templates.

9
00:00:43.979 --> 00:00:51.020
&gt;&gt; Nina Zakharenko: And then we're
gonna touch a file here, index.html.

10
00:00:51.020 --> 00:00:54.799
And-
&gt;&gt; Nina Zakharenko: That touch

11
00:00:54.799 --> 00:00:57.540
command won't work for Windows.

12
00:00:57.540 --> 00:01:02.803
So let me quickly, yeah,
I believe it's F-C.

13
00:01:02.803 --> 00:01:08.370
And then a forward slash.

14
00:01:09.580 --> 00:01:14.050
So for Windows it's,
or not a forward slash,

15
00:01:14.050 --> 00:01:18.990
it's a bracket templates/index.html, okay?

16
00:01:22.847 --> 00:01:25.105
&gt;&gt; Nina Zakharenko: To get
our simple template to work,

17
00:01:25.105 --> 00:01:26.770
we have to do a few things.

18
00:01:28.490 --> 00:01:36.223
The first is we need to import
render_template from Flask.

19
00:01:40.620 --> 00:01:42.410
&gt;&gt; Nina Zakharenko: And render_template

20
00:01:42.410 --> 00:01:46.524
takes-
&gt;&gt; Nina Zakharenko: The name of

21
00:01:46.524 --> 00:01:48.280
the template that we want to use.

22
00:01:49.790 --> 00:01:55.250
So here, instead of returning hello_world,
we're gonna return render_template,

23
00:01:55.250 --> 00:01:57.350
and we're gonna pass in
the name of our template,

24
00:01:57.350 --> 00:01:59.410
we don't have to put in
the template's directory.

25
00:02:00.760 --> 00:02:06.075
Now let's open our index.html file and

26
00:02:06.075 --> 00:02:11.554
put, this is a template, and save that.

27
00:02:14.653 --> 00:02:17.570
&gt;&gt; Nina Zakharenko: After
you're done creating the files,

28
00:02:17.570 --> 00:02:20.580
remember to run your Flask server again.

29
00:02:22.430 --> 00:02:26.860
And now if I click on this link,
there we go, got, this is a template!.

30
00:02:28.730 --> 00:02:31.280
Is everyone seeing the same thing?

31
00:02:31.280 --> 00:02:35.910
Flask supports a templating language
called Jinja that allows you to populate

32
00:02:35.910 --> 00:02:39.790
your HTML files with data from
your Flask app at render time.

33
00:02:41.250 --> 00:02:47.455
I'm not going to go into
the specifics of Jinja, but

34
00:02:47.455 --> 00:02:54.252
I will show you a-
&gt;&gt; Nina Zakharenko: Simple example.

35
00:02:57.128 --> 00:02:59.341
&gt;&gt; Nina Zakharenko: So let's just make a,

36
00:02:59.341 --> 00:03:03.767
let's put some HTML texts
in our template and

37
00:03:03.767 --> 00:03:08.790
make the title of our page be,
Hello, from Flask!

38
00:03:10.720 --> 00:03:12.320
We can delete our this is a template.

39
00:03:14.410 --> 00:03:18.740
So, in order for
our template to have variables,

40
00:03:18.740 --> 00:03:20.830
we need to explicitly pass them in.

41
00:03:22.670 --> 00:03:28.117
The way that we would do that
is via this render template.

42
00:03:28.117 --> 00:03:31.210
So the first argument is
the name of the template, and

43
00:03:31.210 --> 00:03:35.130
then any other arguments after
that get passed into the template.

44
00:03:35.130 --> 00:03:37.210
So I can say, the name is Nina,

45
00:03:37.210 --> 00:03:40.901
and then pass it in here in
the call to render template.

46
00:03:43.726 --> 00:03:46.147
&gt;&gt; Nina Zakharenko: Going
back to our template file,

47
00:03:46.147 --> 00:03:49.280
we now have access to this variable.

48
00:03:49.280 --> 00:03:53.890
And so this Jinja templating
language looks like this.

49
00:03:53.890 --> 00:03:57.110
The arguments are within
a curly brace percent sign.

50
00:03:57.110 --> 00:04:00.770
So if you've used templating for
other languages, like JavaScript,

51
00:04:00.770 --> 00:04:02.230
this shouldn't look too far-fetched.

52
00:04:04.080 --> 00:04:07.610
And so,
I can put simple expressions in here.

53
00:04:07.610 --> 00:04:10.580
If you wanna know more about Jinja I
would check out the documentation.

54
00:04:10.580 --> 00:04:15.167
But I can say if name-
&gt;&gt; Nina Zakharenko: And with Jinja,

55
00:04:15.167 --> 00:04:20.140
Jinja is just like HTML, so
we need to have opening tags and

56
00:04:20.140 --> 00:04:23.600
closing tags to signify a block of code.

57
00:04:23.600 --> 00:04:30.309
So to close an if statement in Jinja,
you would just say endif.

58
00:04:33.533 --> 00:04:38.630
&gt;&gt; Nina Zakharenko: Now we can put some
conditional code between these two texts.

59
00:04:38.630 --> 00:04:43.760
I can say hello in each one.

60
00:04:43.760 --> 00:04:46.880
And then to access
the value of a variable,

61
00:04:46.880 --> 00:04:52.290
you just use two sets of curly braces, and
this will print out the value of name.

62
00:04:52.290 --> 00:04:57.730
Let's reload our web page, and we'll see
the information from our new template.

63
00:04:57.730 --> 00:04:58.491
So everyone see that?

64
00:05:01.199 --> 00:05:01.699
&gt;&gt; Nina Zakharenko: Great!

65
00:05:04.160 --> 00:05:06.690
So, just a little bit more about Flask.

66
00:05:06.690 --> 00:05:11.635
Like I mentioned, Flask,
any of these other web frameworks,

67
00:05:11.635 --> 00:05:14.164
they're really easy to add to.

68
00:05:14.164 --> 00:05:19.023
So if your app is ready for the big
time and you want to add a database,

69
00:05:19.023 --> 00:05:24.010
Flask is a useful mechanism for
accessing database objects.

70
00:05:24.010 --> 00:05:28.979
It makes it really easy to use databases
and store your data for a dynamic web app.

71
00:05:30.330 --> 00:05:34.350
You can find a lot more information about
that in the Flask documentation, but

72
00:05:34.350 --> 00:05:39.020
unless you want to be here until
midnight it's a topic for another day.

73
00:05:39.020 --> 00:05:41.050
In terms of deploying your web app,

74
00:05:41.050 --> 00:05:46.140
there are a lot of different
options from beginner to advanced.

75
00:05:48.280 --> 00:05:54.860
To deploy your real web server, I think
Heroku is the best bet for beginners.

76
00:05:54.860 --> 00:05:57.970
It's pretty easy, it provides a lot
of step by step instructions, and

77
00:05:57.970 --> 00:06:01.530
then as your app grows you
can graduate from there.

78
00:06:01.530 --> 00:06:05.110
The Flask documentation list
other deployment options.

79
00:06:07.010 --> 00:06:10.767
And know that we're covering
just the basics of Flask today.

80
00:06:10.767 --> 00:06:12.985
But to deep dive and learn more,

81
00:06:12.985 --> 00:06:18.253
the Flask Mega-Tutorial is a great
resource to check out after this class.

82
00:06:18.253 --> 00:06:23.262
It's a huge tutorial
that covers everything

83
00:06:23.262 --> 00:06:27.906
from databases to to time zones.

84
00:06:27.906 --> 00:06:30.140
Probably take you a few days to complete,
and

85
00:06:30.140 --> 00:06:32.590
you'll feel pretty comfortable
with Flask after that.

