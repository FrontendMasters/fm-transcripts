WEBVTT

1
00:00:00.630 --> 00:00:02.590
&gt;&gt; Nina Zakharenko: One last
thing would be the zip function.

2
00:00:07.633 --> 00:00:10.876
&gt;&gt; Nina Zakharenko: Let's say I
used a dictionary comprehension.

3
00:00:15.585 --> 00:00:19.399
&gt;&gt; Nina Zakharenko: And I wanted to
build up a dictionary where the key was

4
00:00:19.399 --> 00:00:23.127
the number and
the value was that number squared for

5
00:00:23.127 --> 00:00:25.570
all the numbers from zero to ten.

6
00:00:27.010 --> 00:00:29.450
How do I start my
dictionary comprehension?

7
00:00:29.450 --> 00:00:30.840
What's my loop?

8
00:00:30.840 --> 00:00:31.770
What am I looping over?

9
00:00:39.727 --> 00:00:42.222
&gt;&gt; Nina Zakharenko: Well,
I don't have any numbers, so

10
00:00:42.222 --> 00:00:46.176
how would I get a list of numbers
from zero to ten's range?

11
00:00:50.896 --> 00:00:52.411
&gt;&gt; Nina Zakharenko: And
to build up my dictionary,

12
00:00:52.411 --> 00:00:54.051
what's the key here that I want?

13
00:00:54.051 --> 00:00:54.867
&gt;&gt; Speaker 2: Num.

14
00:00:54.867 --> 00:00:55.630
&gt;&gt; Nina Zakharenko: Num.

15
00:00:57.296 --> 00:00:59.364
&gt;&gt; Nina Zakharenko: And
the value is num times num.

16
00:01:06.032 --> 00:01:09.957
&gt;&gt; Nina Zakharenko: If I wanted to
see all of the keys in my dictionary,

17
00:01:09.957 --> 00:01:12.020
what method would I call?

18
00:01:12.020 --> 00:01:14.020
&gt;&gt; Speaker 2: .keys.

19
00:01:14.020 --> 00:01:14.639
&gt;&gt; Nina Zakharenko: .keys.

20
00:01:16.200 --> 00:01:19.650
And all of the values, .values.

21
00:01:19.650 --> 00:01:21.970
These two look kind of like a list, right?

22
00:01:21.970 --> 00:01:26.390
It's kind of a different data structure,
they look kinda like a list, right?

23
00:01:26.390 --> 00:01:30.939
What if I wanted to get
the key value pairs?

24
00:01:30.939 --> 00:01:32.261
&gt;&gt; Speaker 2: Items?

25
00:01:32.261 --> 00:01:38.120
&gt;&gt; Nina Zakharenko: .items, okay,
kind of ignoring this part.

26
00:01:38.120 --> 00:01:40.970
What sort of data structure
does this result look like?

27
00:01:43.060 --> 00:01:44.370
&gt;&gt; Speaker 2: A list of tuples.

28
00:01:47.770 --> 00:01:48.538
&gt;&gt; Nina Zakharenko: A list of tuples.

29
00:01:48.538 --> 00:01:50.395
Does that make sense to everyone?

30
00:01:50.395 --> 00:01:51.970
Okay.
&gt;&gt; Nina Zakharenko: If you think we had

31
00:01:51.970 --> 00:01:53.136
a list of tuples.

32
00:01:55.998 --> 00:01:58.178
&gt;&gt; Nina Zakharenko: Maybe there is a way
we can turn it back into a dictionary.

33
00:02:01.215 --> 00:02:05.883
&gt;&gt; Nina Zakharenko: Okay, so
let's say I had a list of players.

34
00:02:13.601 --> 00:02:17.112
&gt;&gt; Nina Zakharenko: And those players had-
&gt;&gt; Nina Zakharenko: Some scores in a game.

35
00:02:17.112 --> 00:02:20.969
So I got the best score, obviously.

36
00:02:20.969 --> 00:02:26.217
Bob got five points, and
let's say Alice is a runner up.

37
00:02:32.257 --> 00:02:37.148
&gt;&gt; Nina Zakharenko: Quick way to combine
the values in these two lists is

38
00:02:37.148 --> 00:02:39.436
with the zip function.

39
00:02:43.234 --> 00:02:48.750
&gt;&gt; Nina Zakharenko: So
you're passing two or more, I believe.

40
00:02:50.560 --> 00:02:53.220
I don't remember about the more,
but I'll have to look it up.

41
00:02:53.220 --> 00:02:58.640
But we'll talk about two,
you pass in two different lists to zip.

42
00:02:58.640 --> 00:03:04.730
And we get something that looks like this,
and it's like okay, well, what is this?

43
00:03:04.730 --> 00:03:07.460
What does this kind of
look like that we've seen?

44
00:03:07.460 --> 00:03:09.470
Generator, right.

45
00:03:09.470 --> 00:03:16.480
So we can't really do anything with this
data structure until we loop over it.

46
00:03:16.480 --> 00:03:20.500
So let me just do that,

47
00:03:20.500 --> 00:03:25.450
let's say for, we don't really know
what this data structure contains.

48
00:03:25.450 --> 00:03:29.631
So maybe let's just print out for

49
00:03:29.631 --> 00:03:34.257
item, just like the item in the zip,

50
00:03:34.257 --> 00:03:39.502
players and scores, print out the item.

51
00:03:41.894 --> 00:03:45.980
&gt;&gt; Nina Zakharenko: Okay, here we go.
Now we know that we have a list of tuples.

52
00:03:46.980 --> 00:03:50.210
How do we loop over
this list of tuples and

53
00:03:50.210 --> 00:03:54.810
use tuple unpacking to pull out
the name and the score from each one?

54
00:03:54.810 --> 00:03:55.676
What would I loop over?

55
00:03:58.324 --> 00:03:59.250
&gt;&gt; Speaker 2: Name, score.

56
00:03:59.250 --> 00:04:01.277
&gt;&gt; Nina Zakharenko: Name,
score in zip(players, scores).

57
00:04:09.180 --> 00:04:13.489
&gt;&gt; Nina Zakharenko: And
I can print out an f string and say,

58
00:04:13.489 --> 00:04:18.353
Name: {name} had a score of {score}.

59
00:04:22.983 --> 00:04:24.602
&gt;&gt; Nina Zakharenko: Could I
do this with a comprehension?

60
00:04:26.856 --> 00:04:28.280
&gt;&gt; Nina Zakharenko: Yeah, I could, right?

61
00:04:28.280 --> 00:04:34.338
I would be looping over for
name, score in zip(players,

62
00:04:34.338 --> 00:04:37.975
scores), and
I could just print out my same f string.

63
00:04:37.975 --> 00:04:45.060
Name {name} had score {score}.

64
00:04:45.060 --> 00:04:49.150
And that would give me
a list of formatted strings.

65
00:04:51.250 --> 00:04:54.940
The interesting thing about zip
is you need to be mindful of,

66
00:04:54.940 --> 00:04:59.090
let's say I had my_list1, and it had

67
00:05:01.580 --> 00:05:07.240
three items in it, and
my_list2 had two items in it.

68
00:05:08.960 --> 00:05:15.530
If we try to zip these things-
&gt;&gt; Nina Zakharenko: We'd

69
00:05:15.530 --> 00:05:17.460
get this zip object.

70
00:05:17.460 --> 00:05:21.100
When we wanted to look at
everything that a generator,

71
00:05:22.120 --> 00:05:26.552
the range generator had in it, what did
I quickly do to kind of debug that?

72
00:05:28.200 --> 00:05:30.862
&gt;&gt; Nina Zakharenko: I used a for loop,
but I can also pass it into what?

73
00:05:30.862 --> 00:05:31.639
&gt;&gt; Speaker 2: List.

74
00:05:31.639 --> 00:05:33.146
&gt;&gt; Nina Zakharenko: Yes,
I passed it into list.

75
00:05:35.506 --> 00:05:38.800
&gt;&gt; Nina Zakharenko: So,
as we'll see here, zip only works.

76
00:05:38.800 --> 00:05:42.580
It goes through all the items in both
lists and it matches them up one by one.

77
00:05:42.580 --> 00:05:46.190
So one's pair was A, two's pair was B.

78
00:05:46.190 --> 00:05:47.221
What is three's pair?

79
00:05:49.489 --> 00:05:50.700
&gt;&gt; Nina Zakharenko: It didn't have one,
right?

80
00:05:50.700 --> 00:05:56.290
So it didn't make it into
the final list of tuples.

81
00:05:58.520 --> 00:06:01.910
Okay, going back to our zip of players and
scores.

82
00:06:04.876 --> 00:06:07.920
&gt;&gt; Nina Zakharenko: I'm gonna pass this
into list just so we can look at it.

83
00:06:10.014 --> 00:06:14.620
If dictionary.items
returned a list of tuples,

84
00:06:14.620 --> 00:06:17.935
maybe we can take this list of tuples and
turn it into a dictionary.

85
00:06:17.935 --> 00:06:23.140
All right, and
the way of doing that is very simple.

86
00:06:23.140 --> 00:06:27.951
Just like I passed the zip into list here,

87
00:06:27.951 --> 00:06:33.037
to see it in list form,
I could also just pass

88
00:06:33.037 --> 00:06:38.685
it into a dict here and
get a dictionary out of it.

89
00:06:41.521 --> 00:06:49.730
&gt;&gt; Nina Zakharenko: And keep in mind that
the tuple has to be two items, right?

90
00:06:49.730 --> 00:06:52.508
The first item is the key,
the second item is the what?

91
00:06:52.508 --> 00:06:54.392
&gt;&gt; Speaker 3: The value.

92
00:06:54.392 --> 00:06:54.892
&gt;&gt; Nina Zakharenko: The value.

93
00:06:56.770 --> 00:07:00.540
&gt;&gt; Speaker 2: Nina, would it be fair to
say that if you create a dictionary from

94
00:07:00.540 --> 00:07:06.290
a zip generator you're gonna
use up some memory doing that?

95
00:07:07.690 --> 00:07:09.936
Okay, so that's good to know.

96
00:07:11.377 --> 00:07:14.250
&gt;&gt; Nina Zakharenko: Yeah, it just kind
of depends on your end result, right?

97
00:07:14.250 --> 00:07:17.760
Do you wanna see the data
in a key value form?

98
00:07:17.760 --> 00:07:23.220
Do you wanna take advantage of
very quick membership testing,

99
00:07:23.220 --> 00:07:28.560
finding out very quickly if a key is or
is not in the dictionary?

100
00:07:28.560 --> 00:07:32.230
Or do you wanna loop over all
the items and take some action?

101
00:07:33.300 --> 00:07:35.440
So it kinda depends on the end use case.

