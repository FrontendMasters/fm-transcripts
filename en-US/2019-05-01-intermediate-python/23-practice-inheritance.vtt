WEBVTT

1
00:00:04.704 --> 00:00:10.758
&gt;&gt; Nina Zakharenko: What if I
say daily.number_of_wheels=3?

2
00:00:10.758 --> 00:00:11.960
And I copy and

3
00:00:11.960 --> 00:00:17.276
paste these two print statements
&gt;&gt; Nina Zakharenko: All right,

4
00:00:17.276 --> 00:00:18.845
for the class, it's still 4.

5
00:00:18.845 --> 00:00:23.440
But now for this specific instance, and

6
00:00:23.440 --> 00:00:27.765
I should say for this instance daily,

7
00:00:27.765 --> 00:00:32.645
now the number of wheels is three, right?

8
00:00:32.645 --> 00:00:36.674
Okay,
&gt;&gt; Nina Zakharenko: So inheritance.

9
00:00:41.207 --> 00:00:44.006
&gt;&gt; Nina Zakharenko: Let me
close this REPL window.

10
00:00:44.006 --> 00:00:45.956
I have my class vehicle.

11
00:00:45.956 --> 00:00:49.595
Let's make a new class.

12
00:00:49.595 --> 00:00:54.548
And we don't necessarily want
the vehicle class to tell us how many

13
00:00:54.548 --> 00:00:56.145
numbers a wheel has.

14
00:00:56.145 --> 00:00:58.754
That's more of an implementation detail.

15
00:00:58.754 --> 00:01:00.568
So I'm gonna take that away for now.

16
00:01:00.568 --> 00:01:02.312
Instead, I'm gonna make two new classes.

17
00:01:02.312 --> 00:01:08.100
I'm gonna make a class Car(Vehicle) and
inherit from vehicle.

18
00:01:08.100 --> 00:01:13.841
And it's gonna have
a number_of_wheels = 4.

19
00:01:19.492 --> 00:01:24.516
&gt;&gt; Nina Zakharenko: Notice that last
time when I showed you inheritance I

20
00:01:24.516 --> 00:01:29.662
showed making a new init method for
that child class.

21
00:01:29.662 --> 00:01:35.633
But I don't need one here, if I don't
provide an init method in the subclass,

22
00:01:35.633 --> 00:01:38.539
which initializer is it going to use?

23
00:01:41.067 --> 00:01:43.159
&gt;&gt; Nina Zakharenko: If there
is no init method here,

24
00:01:43.159 --> 00:01:46.188
it'll just call the init method for
vehicle.

25
00:01:49.071 --> 00:01:55.261
&gt;&gt; Nina Zakharenko: In the same way that
we saw if the vehicle has a variable,

26
00:01:55.261 --> 00:02:00.020
it's available to all of its subclasses.

27
00:02:00.020 --> 00:02:02.310
Same thing for methods.

28
00:02:02.310 --> 00:02:06.221
Python will try to instantiate the car,
if it doesn't see it, it will look for

29
00:02:06.221 --> 00:02:08.847
the vehicle, and
it'll just be that very same one.

30
00:02:10.242 --> 00:02:13.829
&gt;&gt; Nina Zakharenko: And
let's say we have a class Truck.

31
00:02:15.639 --> 00:02:17.263
&gt;&gt; Nina Zakharenko: It's also a vehicle.

32
00:02:19.878 --> 00:02:22.029
&gt;&gt; Nina Zakharenko: And
the truck has six wheels

33
00:02:26.221 --> 00:02:27.405
&gt;&gt; Nina Zakharenko: And it's also,

34
00:02:27.405 --> 00:02:32.830
these trucks run on diesel, so
this time let's make a custom constructor.

35
00:02:32.830 --> 00:02:37.167
I'll say def_ini_, pass in self.

36
00:02:37.167 --> 00:02:42.625
I'll take a make, model, and
the fuel will be diesel.

37
00:02:46.436 --> 00:02:54.997
&gt;&gt; Nina Zakharenko: Okay, this time, I
wanna call the init on super, why is that?

38
00:02:54.997 --> 00:02:58.635
Looking at the fuel here and
the fuel here, why is that?

39
00:02:58.635 --> 00:03:01.121
&gt;&gt; Speaker 2: Cuz we need
to override that value?

40
00:03:01.121 --> 00:03:03.997
&gt;&gt; Nina Zakharenko: Yeah,
I'm overriding this default value

41
00:03:05.847 --> 00:03:07.701
&gt;&gt; Nina Zakharenko: And so super.init,

42
00:03:07.701 --> 00:03:12.748
we're gonna pass in the make and
the model, and the fuel.

43
00:03:17.563 --> 00:03:22.969
&gt;&gt; Nina Zakharenko: Okay,
now let's take a look at this.

44
00:03:22.969 --> 00:03:27.342
And I wanna show you something
that's not in the class website.

45
00:03:27.342 --> 00:03:33.735
But as a pretty cool feature of Python.

46
00:03:33.735 --> 00:03:38.340
I can open up my Python tab here and
VS code.

47
00:03:38.340 --> 00:03:44.064
And if we press the up key,
we'll see that this is the command

48
00:03:44.064 --> 00:03:49.239
that VS code automatically
filled in to run my script.

49
00:03:49.239 --> 00:03:55.594
So it's got the full path to my
python3 virtual environment and

50
00:03:55.594 --> 00:03:59.487
then it's got the full path to my file.

51
00:03:59.487 --> 00:04:03.625
I don't necessarily need all of that.

52
00:04:03.625 --> 00:04:07.839
I can just say Python in
my virtual environment and

53
00:04:07.839 --> 00:04:10.156
pass in the path like that.

54
00:04:12.005 --> 00:04:18.117
&gt;&gt; Nina Zakharenko: Oops, sorry and only
to comment out my old code here because

55
00:04:18.117 --> 00:04:23.510
the vehicle no longer has
the number_of_wheels.

56
00:04:26.535 --> 00:04:31.362
&gt;&gt; Nina Zakharenko: Handy shortcut to
coming out a bunch of lines in VS code,

57
00:04:31.362 --> 00:04:36.716
at least for OSX,
you can just select them and press Cmd+/.

58
00:04:36.716 --> 00:04:42.233
And if you select commented out code and
press it again, it'll uncomment it.

59
00:04:42.233 --> 00:04:43.602
Okay, let's try that again.

60
00:04:45.983 --> 00:04:47.886
&gt;&gt; Nina Zakharenko: Okay, this works.

61
00:04:47.886 --> 00:04:53.377
A really cool thing that Python can
do is called run in interactive mode,

62
00:04:53.377 --> 00:04:58.237
this is great for debugging and
it's not in the course website so

63
00:04:58.237 --> 00:05:01.220
if you wanna know this, write it down.

64
00:05:01.220 --> 00:05:08.283
All you need to do is pass the -i
flag after python before your script.

65
00:05:08.283 --> 00:05:13.081
What this is gonna do is run
everything in this python file and

66
00:05:13.081 --> 00:05:15.633
then it'll drop you into REPL.

67
00:05:15.633 --> 00:05:19.832
So you can take a look at
the state of everything.

68
00:05:19.832 --> 00:05:22.882
I see here that I made the daily variable.

69
00:05:22.882 --> 00:05:27.288
Now, I can look at that right in my REPL.

70
00:05:27.288 --> 00:05:31.126
So really nifty thing to know
when you're just debugging.

71
00:05:33.834 --> 00:05:37.582
&gt;&gt; Nina Zakharenko: Now, I'm gonna
show you some of our new instances.

72
00:05:37.582 --> 00:05:42.154
So I'm gonna say my daily
driver is a car and

73
00:05:42.154 --> 00:05:46.602
it's a Subaru, the make is a Crosstrek.

74
00:05:51.121 --> 00:05:55.418
&gt;&gt; Nina Zakharenko: And
now I can print out an up string,

75
00:05:55.418 --> 00:06:04.828
"I drive (daily.make},
&gt;&gt; Nina Zakharenko: (daily.model).

76
00:06:07.969 --> 00:06:15.206
&gt;&gt; Nina Zakharenko: It uses {daily.fuel)
&gt;&gt; Nina Zakharenko: And

77
00:06:15.206 --> 00:06:24.061
drives on daily.num_wheels, okay?

78
00:06:28.862 --> 00:06:32.430
&gt;&gt; Nina Zakharenko: What did I do here,
daily.make.

79
00:06:32.430 --> 00:06:34.623
&gt;&gt; Speaker 2: Number_of_wheels.

80
00:06:34.623 --> 00:06:39.333
&gt;&gt; Nina Zakharenko: Yes, number_of_wheels.

81
00:06:39.333 --> 00:06:40.886
Thank you.

82
00:06:40.886 --> 00:06:41.783
Okay, there we go.

83
00:06:41.783 --> 00:06:44.946
Drive Subaru Crosstrek uses gas and
has four wheels.

84
00:06:44.946 --> 00:06:46.877
I can do the same thing for truck.

85
00:06:46.877 --> 00:06:52.314
I can say my truck is a Ford F350,

86
00:06:52.314 --> 00:06:55.947
so awesome cool truck.

87
00:06:55.947 --> 00:07:00.276
I can check the truck.make, truck.model,

88
00:07:00.276 --> 00:07:03.831
what's the truck.fuel going to be?

89
00:07:03.831 --> 00:07:05.129
&gt;&gt; Speaker 2: Gas.

90
00:07:05.129 --> 00:07:06.232
&gt;&gt; Nina Zakharenko: It's not gas.

91
00:07:06.232 --> 00:07:08.537
So if I look at where I-
&gt;&gt; Speaker 2: Diesel,

92
00:07:08.537 --> 00:07:09.951
I forgot what the default was.

93
00:07:09.951 --> 00:07:11.633
[LAUGH]
&gt;&gt; Nina Zakharenko: That's It's okay, so

94
00:07:11.633 --> 00:07:13.426
my truck fuel is gonna be diesel.

95
00:07:13.426 --> 00:07:17.276
All my trucks are gonna be diesel,
pretty useful, right?

96
00:07:20.990 --> 00:07:25.984
&gt;&gt; Nina Zakharenko: Using type
as instance and this subclass,

97
00:07:25.984 --> 00:07:29.874
so the type of my truck is a truck.

98
00:07:29.874 --> 00:07:35.558
The type of my daily driver,
[SOUND] I really can't type today,

99
00:07:35.558 --> 00:07:38.164
there is no truck method here.

100
00:07:38.164 --> 00:07:40.097
It is type of daily.

101
00:07:40.097 --> 00:07:42.834
Okay, so it's car.

102
00:07:42.834 --> 00:07:49.635
I can ask, isinstance(daily, Car).

103
00:07:49.635 --> 00:07:51.641
What will I get?

104
00:07:51.641 --> 00:07:53.346
Yeah, true, right?

105
00:07:53.346 --> 00:08:00.194
Isinstance(truck, Truck), yeah.

106
00:08:00.194 --> 00:08:01.538
And just a side note here.

107
00:08:01.538 --> 00:08:07.917
I know that this truck is my
lowercase variable, my instance.

108
00:08:07.917 --> 00:08:11.907
And I know that this capital Truck
is my class kind of just by looking

109
00:08:11.907 --> 00:08:14.274
at it from naming convention, right?

110
00:08:14.274 --> 00:08:19.136
It's one of the reasons that
convention is in Python or so powerful.

111
00:08:19.136 --> 00:08:24.073
Awesome, now, I wanna ask

112
00:08:24.073 --> 00:08:30.521
issubclass(Truck, Vehicle)?

113
00:08:30.521 --> 00:08:31.139
&gt;&gt; Speaker 2: Yes.

114
00:08:31.139 --> 00:08:37.617
&gt;&gt; Nina Zakharenko: Yep, and
issubclass(Car, Vehicle)?

115
00:08:37.617 --> 00:08:44.009
Yeah, what about issubclass(Vehicle, Car)?

116
00:08:44.009 --> 00:08:44.568
&gt;&gt; Speaker 2: Nope.

117
00:08:44.568 --> 00:08:45.482
&gt;&gt; Nina Zakharenko: Nope.

