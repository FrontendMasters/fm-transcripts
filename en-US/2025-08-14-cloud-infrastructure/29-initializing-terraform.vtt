WEBVTT

1
00:00:00.320 --> 00:00:03.070
&gt;&gt; Erik Reinert: All right, so the next
thing we want to do after we create our

2
00:00:03.070 --> 00:00:06.865
provider and again, hopefully that gives
you a little bit more help around like at

3
00:00:06.865 --> 00:00:09.120
least creating Amazon resources and stuff.

4
00:00:09.120 --> 00:00:12.640
We're now going to create
a backend TF file.

5
00:00:12.640 --> 00:00:19.408
And so this file, although I'm going to do
Alt F4 because that was my unique bucket,

6
00:00:19.408 --> 00:00:25.040
this file actually tells Terraform
where to store your state.

7
00:00:25.040 --> 00:00:28.800
That means that Terraform does
know how to integrate with Amazon.

8
00:00:28.800 --> 00:00:30.160
It has natural support.

9
00:00:30.160 --> 00:00:34.000
Again, it has support to connecting
to Amazon via the provider.

10
00:00:34.000 --> 00:00:35.840
And that's what those providers are for.

11
00:00:37.200 --> 00:00:39.760
If you might be wondering why did we use.

12
00:00:39.760 --> 00:00:40.720
What is a provider?

13
00:00:40.720 --> 00:00:42.160
Why are we using it?

14
00:00:42.160 --> 00:00:43.680
Terraform.

15
00:00:43.680 --> 00:00:48.501
The easiest way to put it is Terraform
uses providers as a way to connect to

16
00:00:48.501 --> 00:00:51.840
the services that it needs to manage.

17
00:00:51.840 --> 00:00:54.721
And so basically Terraform will
run against a provider and

18
00:00:54.721 --> 00:00:57.130
then that provider will go
out to the Internet and

19
00:00:57.130 --> 00:01:01.900
communicate with the thing that you're
trying to automate automate against.

20
00:01:01.900 --> 00:01:03.620
There's tons of providers out there.

21
00:01:03.620 --> 00:01:06.780
Again, there's Proxmox,
there's Spotify, there's whatever.

22
00:01:06.780 --> 00:01:10.318
But the main point of a provider is to
be the interface between Terraform and

23
00:01:10.318 --> 00:01:13.180
the thing that you're trying to manage.

24
00:01:13.180 --> 00:01:17.430
And so because of that, Terraform can also
work with a lot of these providers for

25
00:01:17.430 --> 00:01:18.260
other things.

26
00:01:18.260 --> 00:01:23.492
And so in this case,
Terraform is actually able to use S3

27
00:01:23.492 --> 00:01:28.509
as a backend and
set up Terraform state on that bucket.

28
00:01:28.509 --> 00:01:29.367
And so yeah,

29
00:01:29.367 --> 00:01:35.144
we're basically gonna say terraform
backend s3 bucket fem-fd-service-altf4.

30
00:01:35.144 --> 00:01:37.940
The key is really just the file, right?

31
00:01:37.940 --> 00:01:40.380
That's the file where all of
our state is going to go.

32
00:01:40.380 --> 00:01:42.180
It can be whatever you want.

33
00:01:42.180 --> 00:01:46.660
It doesn't even have to be
a dot just to put it out there.

34
00:01:46.660 --> 00:01:49.868
For anyone who doesn't or
hasn't really worked with S3,

35
00:01:49.868 --> 00:01:53.540
you don't have to give file extensions
in S3 if you don't want to.

36
00:01:54.560 --> 00:01:56.800
It doesn't have to work that way.

37
00:01:56.800 --> 00:01:59.280
You could create UUIDs for all your files.

38
00:01:59.280 --> 00:02:00.720
It doesn't really matter.

39
00:02:00.720 --> 00:02:01.994
But normally this is for

40
00:02:01.994 --> 00:02:06.080
visual recognition knowing like,
that's the Terraform state file.

41
00:02:06.080 --> 00:02:06.640
Okay, cool.

42
00:02:06.640 --> 00:02:10.919
But I've seen some places where
they randomize everything.

43
00:02:10.919 --> 00:02:14.235
Anyways, we're gonna save that file and

44
00:02:14.235 --> 00:02:20.100
then what we're gonna do is we're
gonna just do a terraform init.

45
00:02:20.100 --> 00:02:22.700
When you run it,
it should say initializing backend.

46
00:02:22.700 --> 00:02:26.340
It should say that it
connects to S3 successfully.

47
00:02:26.340 --> 00:02:29.860
And then, yeah, you should
basically Say initialize success.

48
00:02:29.860 --> 00:02:31.300
We did Terraform init.

49
00:02:31.300 --> 00:02:34.660
We all know that Terraform init now works.

50
00:02:34.660 --> 00:02:37.956
And you could run this as
many times as you want, but

51
00:02:37.956 --> 00:02:41.060
preferably in the right directory.

52
00:02:41.060 --> 00:02:44.888
It'll just make sure that
everything is up to date for

53
00:02:44.888 --> 00:02:49.490
dependencies and connectivity and
then you'll be good to go.

54
00:02:49.490 --> 00:02:50.531
Cool.
Okay, so

55
00:02:50.531 --> 00:02:53.410
we have successfully set up remote state.

56
00:02:53.410 --> 00:02:54.930
We created a bucket, right?

57
00:02:54.930 --> 00:02:57.970
And then we configure
Terraform to use that bucket.

58
00:02:57.970 --> 00:03:01.493
And we're using our AUTH credentials
to allow Terraform to be able to

59
00:03:01.493 --> 00:03:03.010
connect to it.

60
00:03:03.010 --> 00:03:05.410
&gt;&gt; Male: Are we supposed to
see something in the bucket?

61
00:03:05.410 --> 00:03:06.210
&gt;&gt; Erik Reinert: Nope.

62
00:03:06.210 --> 00:03:08.530
Yeah, we haven't created anything yet,
so no.

63
00:03:08.530 --> 00:03:14.510
So Terraform won't update that file until
we actually add a resource to our project.

64
00:03:14.510 --> 00:03:17.470
If we don't add a resource,
it doesn't do anything, yeah.

65
00:03:17.470 --> 00:03:20.070
So I could, I could add more
variables here if I wanted.

66
00:03:20.070 --> 00:03:23.242
I could do whatever, but
until I actually create something,

67
00:03:23.242 --> 00:03:25.310
that file won't get created.

68
00:03:25.310 --> 00:03:29.687
One other thing I want to note really
fast is you got more than likely

69
00:03:29.687 --> 00:03:32.990
a Terraform lock file
when you did the init.

70
00:03:32.990 --> 00:03:36.294
What is kind of nice about terraform
is they do try and have some kind

71
00:03:36.294 --> 00:03:40.230
of consistency with all these providers
cuz they have tons of them, right?

72
00:03:40.230 --> 00:03:43.842
And one of the things that they
are genuinely concerned about,

73
00:03:43.842 --> 00:03:46.911
which does make sense,
is that somebody could hack or

74
00:03:46.911 --> 00:03:50.594
exploit a provider in a way that
they could start provisioning or

75
00:03:50.594 --> 00:03:55.390
creating or maintaining or backdooring
into systems and stuff like that, right?

76
00:03:55.390 --> 00:03:56.790
Like that would not be good.

77
00:03:56.790 --> 00:03:58.790
This is all open source.

78
00:03:58.790 --> 00:04:03.889
And so what they do is they provide
hashes as a way to verify that what

79
00:04:03.889 --> 00:04:11.060
you used before should be the same thing
that you're using in other situations.

80
00:04:11.060 --> 00:04:15.112
This Terraform lock file
basically just says, hey,

81
00:04:15.112 --> 00:04:21.506
these are all the dependencies for
the HashiCorp version 5.97.0 provider and

82
00:04:21.506 --> 00:04:27.285
everything that it needs to uncompress and
or move or whatever for it set up.

83
00:04:27.285 --> 00:04:30.561
So, for example,
if this provider was redownloaded but

84
00:04:30.561 --> 00:04:34.460
it didn't match the hashes exactly
terraform would give an error.

85
00:04:34.460 --> 00:04:38.428
It would say, hey, it's great that
you think this is that provider, but

86
00:04:38.428 --> 00:04:40.180
I don't recognize it as this.

87
00:04:40.180 --> 00:04:47.300
So these are beneficial, but at the same
time they're also kind of super annoying.

88
00:04:47.300 --> 00:04:50.801
A big reason for that is when
you want to update a provider,

89
00:04:50.801 --> 00:04:55.231
it's a little bit more of an annoying
process because you actually have to

90
00:04:55.231 --> 00:05:00.610
either let it manually or, I'm sorry,
use the Terraform CLI to update the file.

91
00:05:00.610 --> 00:05:04.830
Or what I like to do, which is the same
thing I do with package lock files,

92
00:05:04.830 --> 00:05:07.198
delete them and then let it recreate it.

93
00:05:07.198 --> 00:05:08.890
So it's up to you.

94
00:05:08.890 --> 00:05:12.998
But it is nice if you want that
additional security and caching as well,

95
00:05:12.998 --> 00:05:17.730
just to make sure that you're getting
the exact same provider every single time.

96
00:05:20.610 --> 00:05:23.364
&gt;&gt; Male: I looked at what
other files are in there and

97
00:05:23.364 --> 00:05:26.300
there's this Terraform provider file.

98
00:05:26.300 --> 00:05:29.260
It's 695 megabytes.

99
00:05:29.260 --> 00:05:34.238
&gt;&gt; Erik Reinert: Yeah, if you're talking
about this one here, that's a binary.

100
00:05:34.238 --> 00:05:37.740
So this is the actual,
I don't know if you can actually run it.

101
00:05:37.740 --> 00:05:38.700
Yeah, there you go.

102
00:05:38.700 --> 00:05:45.660
Yeah, so there's actually
a lot of tools that do this.

103
00:05:45.660 --> 00:05:49.378
As a matter of fact,
the tool I'm building does this as well,

104
00:05:49.378 --> 00:05:53.739
which is how do you have one person's
code base work with your code base,

105
00:05:53.739 --> 00:05:57.550
especially if it's written in
another language or whatever.

106
00:05:59.310 --> 00:06:04.228
What Terraform does underneath
the hood is these providers create

107
00:06:04.228 --> 00:06:08.968
binaries that are then ran by
Terraform when you run Terraform,

108
00:06:08.968 --> 00:06:14.030
and they are normally set up as
services or clis or whatever.

109
00:06:14.030 --> 00:06:18.830
So, yeah, you'll normally get a big
binary depending on the provider.

110
00:06:18.830 --> 00:06:23.566
So if we add in another provider, we
would see HashiCorp or whatever else and

111
00:06:23.566 --> 00:06:26.760
then in there would be a binary for
that provider.

112
00:06:26.760 --> 00:06:30.360
&gt;&gt; Male: And this one is so
big because Amazon can do a lot of stuff.

113
00:06:30.360 --> 00:06:30.960
&gt;&gt; Erik Reinert: Exactly.

114
00:06:30.960 --> 00:06:33.382
Yeah.
They have all of the schema definitions

115
00:06:33.382 --> 00:06:33.960
in there.

116
00:06:33.960 --> 00:06:36.338
They have all the API endpoints in there.

117
00:06:36.338 --> 00:06:40.760
So I'm actually kind of surprised it's
only 600 [LAUGH] you'd think it'd be huge.

118
00:06:40.760 --> 00:06:45.640
And so, yeah, that's per provider,
every provider.

119
00:06:45.640 --> 00:06:50.399
So it is kind of interesting to note
that if you had tons of providers,

120
00:06:50.399 --> 00:06:54.930
this could be like a node module
situation where it becomes huge.

