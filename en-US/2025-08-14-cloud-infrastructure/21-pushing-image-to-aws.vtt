WEBVTT

1
00:00:00.228 --> 00:00:04.675
&gt;&gt; Erik Reinert: Now, what we want to
do is we want to update our pipeline so

2
00:00:04.675 --> 00:00:08.160
that it also takes care of the push step.

3
00:00:08.160 --> 00:00:14.800
So what I'm gonna do is I'm
going to simply add a new step.

4
00:00:16.320 --> 00:00:21.378
What's neat about GitHub Actions,
at least is you don't have to provide

5
00:00:21.378 --> 00:00:25.960
the environment variables to
the entire job if you don't want to.

6
00:00:25.960 --> 00:00:30.536
For example, if you're just like,
I just want this one command

7
00:00:30.536 --> 00:00:34.610
to have access to the cli,
you could totally do that.

8
00:00:34.610 --> 00:00:36.770
That's absolutely fine.

9
00:00:36.770 --> 00:00:37.970
That's exactly what we're doing.

10
00:00:37.970 --> 00:00:43.155
In this case, what we're doing is
we're basically just saying, hey, for

11
00:00:43.155 --> 00:00:49.970
this specific run command or this specific
step, add the environment variables to it.

12
00:00:49.970 --> 00:00:52.530
Again, you guys can
copy this from my repo.

13
00:00:52.530 --> 00:00:54.930
So I'm just going to go ahead and
add it to my repo.

14
00:00:54.930 --> 00:00:58.534
Then I'm going to commit this and
push it up.

15
00:00:58.534 --> 00:01:01.650
So I'm gonna do this, paste this in.

16
00:01:01.650 --> 00:01:05.556
So I'm noticing somebody in chat is
also saying a nice alternative is to use

17
00:01:05.556 --> 00:01:10.050
OpenID Connect with your GitHub flows
to authenticate with Amazon services.

18
00:01:10.050 --> 00:01:11.170
Yeah, I fully agree.

19
00:01:11.170 --> 00:01:16.345
I actually do use that normally, but
that's like an optimization on this.

20
00:01:16.345 --> 00:01:21.298
But the idea is that you can basically
tell your Amazon account that

21
00:01:21.298 --> 00:01:26.438
GitHub can connect to your services
as a unit or as an entity, right?

22
00:01:26.438 --> 00:01:30.488
And then you don't need to
really give it credentials,

23
00:01:30.488 --> 00:01:34.710
it just identifies the pipelines
that you're running and

24
00:01:34.710 --> 00:01:38.000
then will give you those credentials for
it.

25
00:01:38.000 --> 00:01:40.799
So it's kind of like Amazon
identifies your repos and

26
00:01:40.799 --> 00:01:44.718
then recognizes when a repo goes to
push something or build something, and

27
00:01:44.718 --> 00:01:48.160
then it goes, okay, well,
I know that you're doing this.

28
00:01:48.160 --> 00:01:49.166
Here's a key for you.

29
00:01:49.166 --> 00:01:50.260
So it's the inverse.

30
00:01:50.260 --> 00:01:54.986
Instead of you creating keys and
then putting them in there as secrets,

31
00:01:54.986 --> 00:01:59.820
you can kind of get them on the fly
when you're running the pipelines.

32
00:01:59.820 --> 00:02:02.060
Really quick shout out.

33
00:02:02.060 --> 00:02:06.940
We have a article on our
blog about this too.

34
00:02:06.940 --> 00:02:11.302
So if you're curious about this,
if you go to altf4blog and

35
00:02:11.302 --> 00:02:15.406
then click on using iam
the secure way in GitHub actions,

36
00:02:15.406 --> 00:02:19.560
this will show you entirely
how to set that up.

37
00:02:19.560 --> 00:02:22.680
This means that you don't have to
create credentials and all that stuff.

38
00:02:22.680 --> 00:02:28.760
You can just generate them on
the fly in the actual pipeline.

39
00:02:31.160 --> 00:02:35.104
Cool, so again, for now we've got this and
I'm going to go ahead and

40
00:02:35.104 --> 00:02:36.920
push this code up.

41
00:02:36.920 --> 00:02:40.930
Now, when I push this code up,
I should expect to see two things happen.

42
00:02:40.930 --> 00:02:44.242
The first thing I should expect to see
happen is I should expect to see that

43
00:02:44.242 --> 00:02:44.850
build step.

44
00:02:45.890 --> 00:02:49.324
Then the second thing I should see
is I should see it actually push

45
00:02:49.324 --> 00:02:53.410
that image to Amazon ECR and we should
be able to confirm that that happened.

46
00:02:56.770 --> 00:03:01.378
Let's go ahead and
let this build and push.

47
00:03:01.378 --> 00:03:04.466
&gt;&gt; Student: Ubuntu already
has Docker nowadays.

48
00:03:04.466 --> 00:03:10.898
&gt;&gt; Erik Reinert: Yep, well,
the GitHub Runner images do, yeah.

49
00:03:10.898 --> 00:03:14.747
So the GitHub Runner images, you might be
like, why aren't you installing Docker or

50
00:03:14.747 --> 00:03:16.430
any of the tools that you're running?

51
00:03:19.470 --> 00:03:22.790
So, as I said before,
if you make your tools portable,

52
00:03:22.790 --> 00:03:25.390
you don't have to worry about that.

53
00:03:25.390 --> 00:03:27.150
How did we make our tools portable?

54
00:03:27.150 --> 00:03:34.600
We made Docker the primary tool because
the runners have Docker on them at least.

55
00:03:34.600 --> 00:03:37.918
I don't really need to install anything
else because I'm running Docker to do

56
00:03:37.918 --> 00:03:39.960
everything and everything I need to do.

57
00:03:39.960 --> 00:03:43.758
So that's a little bit of a quick tip for
anyone who ends up making pipelines in

58
00:03:43.758 --> 00:03:47.207
the future, or you're trying to
figure out how to avoid installing so

59
00:03:47.207 --> 00:03:49.800
many things in the beginning
of your pipeline.

60
00:03:49.800 --> 00:03:54.360
Make a container image out of it,
push that container image up, and

61
00:03:54.360 --> 00:03:57.240
then use that as your runtime with Docker.

62
00:03:58.370 --> 00:04:02.050
And like I said, we do that where I work,
and it works really well.

63
00:04:03.970 --> 00:04:05.010
Okay, cool.

64
00:04:05.010 --> 00:04:07.570
So our build is just about done.

65
00:04:07.570 --> 00:04:09.010
Let's see if we get a push.

66
00:04:10.530 --> 00:04:11.730
&gt;&gt; Student: Does this cost money?

67
00:04:13.010 --> 00:04:15.650
&gt;&gt; Erik Reinert: Does GitHub Actions
cost money?

68
00:04:15.650 --> 00:04:16.850
They have free.

69
00:04:19.070 --> 00:04:20.471
Whoops.

70
00:04:20.471 --> 00:04:23.740
Okay, so what happened?

71
00:04:26.380 --> 00:04:27.820
Tag does not exist.

72
00:04:30.072 --> 00:04:32.540
I need to make a small
change to the Docker file.

73
00:04:32.540 --> 00:04:34.940
This was expecting it to
be in a different state.

74
00:04:34.940 --> 00:04:35.500
I see.

75
00:04:36.700 --> 00:04:37.580
So it did run.

76
00:04:37.580 --> 00:04:40.495
What's actually kind of nice is
you can see here in the output,

77
00:04:40.495 --> 00:04:43.500
we did actually get our credentials and
log in.

78
00:04:43.500 --> 00:04:48.700
And then when we went to push it,
you'll see that it says refers to tag.

79
00:04:48.700 --> 00:04:50.780
Tag does not exist.

80
00:04:50.780 --> 00:04:56.367
The reason for
that is because if we go to our makefile,

81
00:04:56.367 --> 00:05:03.180
you'll notice that we build with
the git Shaw build image, riht.

82
00:05:03.180 --> 00:05:08.780
But then down here, we push with
the build tag, which is latest.

83
00:05:08.780 --> 00:05:11.326
That means that underneath the hood,

84
00:05:11.326 --> 00:05:17.070
if I do Docker image ls see how now I have
a tag with like a really long value here.

85
00:05:17.070 --> 00:05:18.670
That's the git commit.

86
00:05:18.670 --> 00:05:24.255
This is a standard thing that I
do at my company that I think is

87
00:05:24.255 --> 00:05:29.731
really worth doing,
which is every time you build a Docker

88
00:05:29.731 --> 00:05:35.230
image in CI,
use the commit of that image as the tag.

89
00:05:35.230 --> 00:05:37.549
The reason for that is because one,

90
00:05:37.549 --> 00:05:42.990
it should always only build the same
tag once because it's cached like that.

91
00:05:42.990 --> 00:05:48.971
But also it means that your devs, everyone
in your company, all of your automation,

92
00:05:48.971 --> 00:05:53.630
everything uses the SHA as
the version of that image, right?

93
00:05:53.630 --> 00:05:58.761
So if that's the version,
then if you want to promote something,

94
00:05:58.761 --> 00:06:04.990
you would just say, okay, I want to
tag off of that version to this tag.

95
00:06:04.990 --> 00:06:09.135
And so what we're doing underneath
the hood, when we're promoting something,

96
00:06:09.135 --> 00:06:12.634
we're really just saying, okay,
this shawl should now be latest.

97
00:06:12.634 --> 00:06:17.040
So we're gonna tag off of this SHA to
latest and then we're gonna push that.

98
00:06:17.040 --> 00:06:19.840
That's really our promotion process.

99
00:06:19.840 --> 00:06:22.080
So there was a small change
that I needed to make.

100
00:06:22.080 --> 00:06:22.960
It's right here.

101
00:06:22.960 --> 00:06:26.000
If you run into this problem,
just be aware of it.

102
00:06:26.000 --> 00:06:27.680
Build image, push.

103
00:06:27.680 --> 00:06:31.600
In the first stage,
because we were using latest,

104
00:06:31.600 --> 00:06:35.920
it expected latest,
we want this to push the sha.

105
00:06:35.920 --> 00:06:40.352
So the idea is we're only pushing shaws
and then we're pulling down shaws and

106
00:06:40.352 --> 00:06:43.230
then tagging and
then pushing up the tag, right?

107
00:06:43.230 --> 00:06:45.710
So that was the one thing
that needed to be changed.

