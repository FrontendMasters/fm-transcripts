WEBVTT

1
00:00:00.240 --> 00:00:03.357
&gt;&gt; Erik Reinert: So
now that we've done that, we can go here,

2
00:00:03.357 --> 00:00:09.920
we can go to App Runner, and now we're
ready to actually deploy our application.

3
00:00:09.920 --> 00:00:13.760
So you'll see here that I have a running
application FEM FD Service Preview.

4
00:00:13.760 --> 00:00:14.520
Fantastic.

5
00:00:14.520 --> 00:00:15.360
Let's do a new one.

6
00:00:15.360 --> 00:00:18.720
So I'm going to click Create Service
up in the top right hand corner.

7
00:00:18.720 --> 00:00:23.505
And again, this deployment was set up and
specifically focused on

8
00:00:23.505 --> 00:00:28.560
doing one thing and then being able
to leverage that thing we just did.

9
00:00:29.720 --> 00:00:34.494
So if we go back to our diagram super
quickly, we set up a container image,

10
00:00:34.494 --> 00:00:36.040
we set up a database.

11
00:00:36.040 --> 00:00:38.694
Well, now that we've set
up the container image,

12
00:00:38.694 --> 00:00:42.040
we can draw the line between
App Runner and the container image.

13
00:00:42.040 --> 00:00:43.400
Because we've already done that.

14
00:00:43.400 --> 00:00:44.799
That's exactly what we're going to do.

15
00:00:44.799 --> 00:00:49.337
Now by going into the Create service,
it already is like,

16
00:00:49.337 --> 00:00:52.680
okay, cool, I can run container images.

17
00:00:52.680 --> 00:00:53.880
Which one you wanna run?

18
00:00:53.880 --> 00:00:55.027
So if I go in here,

19
00:00:55.027 --> 00:01:00.090
I'll say Container Registry as
my repository type provider ECR.

20
00:01:00.090 --> 00:01:04.440
If I click browse, I can click on
the image repository that I want,

21
00:01:04.440 --> 00:01:07.250
in this case FEM fdservice, and then bam.

22
00:01:07.250 --> 00:01:10.170
You should see that latest tag appear.

23
00:01:10.170 --> 00:01:14.116
That means that now this application
is going to deploy based off of that

24
00:01:14.116 --> 00:01:16.490
latest tag and that latest tag only.

25
00:01:16.490 --> 00:01:17.530
So I'm going to hit continue.

26
00:01:18.570 --> 00:01:19.930
You'll see at the bottom.

27
00:01:19.930 --> 00:01:20.530
Look at that.

28
00:01:20.530 --> 00:01:21.450
Deployment settings.

29
00:01:21.450 --> 00:01:23.850
I don't even have to
worry about deployment.

30
00:01:23.850 --> 00:01:24.970
So I could do manual.

31
00:01:24.970 --> 00:01:28.650
I can just tell it, hey, I'll take care
of it manually, don't worry about that.

32
00:01:28.650 --> 00:01:31.050
But I actually don't want to do that.

33
00:01:31.050 --> 00:01:34.667
What I really want to do is I want to say,
tell you what,

34
00:01:34.667 --> 00:01:39.703
every time I push to latest, which is
basically the same as merging domain,

35
00:01:39.703 --> 00:01:42.330
then deploy my application.

36
00:01:42.330 --> 00:01:46.930
So you might be like, okay, well, how does
that work in the sense of deployment?

37
00:01:46.930 --> 00:01:50.788
Well, we just built our CI
pipeline because all I have

38
00:01:50.788 --> 00:01:55.690
to do is push an image to ECR and
then that will go out and be deployed.

39
00:01:57.210 --> 00:02:01.791
When you're talking about a startup phase
and not having CI or anything like that,

40
00:02:01.791 --> 00:02:03.370
we just did our deployment.

41
00:02:03.370 --> 00:02:08.142
You built the image locally, you made
sure it was for the right platform, and

42
00:02:08.142 --> 00:02:09.850
then you pushed it to ecr.

43
00:02:09.850 --> 00:02:10.530
Well, cool.

44
00:02:10.530 --> 00:02:13.450
Now you can trigger
deployments that same way too.

45
00:02:13.450 --> 00:02:17.462
Meaning that you've enabled the developer
to immediately start being able to deploy

46
00:02:17.462 --> 00:02:18.250
if they want to.

47
00:02:19.450 --> 00:02:22.160
So, yeah, automatic is perfect here.

48
00:02:22.160 --> 00:02:27.083
And then it might tell you to create
a new service role or use an existing

49
00:02:27.083 --> 00:02:32.520
service role, but the TLDR is you want
to use that app Runner ECR Access role.

50
00:02:32.520 --> 00:02:35.120
So if you don't have it,
just click Create new service role.

51
00:02:35.120 --> 00:02:37.840
It'll create the exact one that I'm using.

52
00:02:37.840 --> 00:02:40.220
Or you can click Use
existing service role and

53
00:02:40.220 --> 00:02:43.360
you're going to want to use
the app Runner ECR Access role.

54
00:02:43.360 --> 00:02:45.890
So now, what we're going to do is
we're going to click next, and

55
00:02:45.890 --> 00:02:47.960
now it's actually gonna ask us for
our service name.

56
00:02:47.960 --> 00:02:49.840
So we're gonna say FEM-FD service.

57
00:02:53.080 --> 00:02:54.880
We don't want to spend a lot of money,
right?

58
00:02:54.880 --> 00:02:55.925
We don't really need,

59
00:02:55.925 --> 00:02:59.760
like we don't really know how much traffic
we're gonna take on or anything like that.

60
00:02:59.760 --> 00:03:02.480
So I would recommend starting
as small as possible, right?

61
00:03:02.480 --> 00:03:03.400
Save the most money.

62
00:03:03.400 --> 00:03:06.360
We are going to be charging or
being paid or sorry, not paid.

63
00:03:06.360 --> 00:03:08.200
We are going to be charged for this.

64
00:03:08.200 --> 00:03:11.320
So let's make sure we just save
as much money as we possibly can.

65
00:03:11.320 --> 00:03:13.120
And then the next thing.

66
00:03:13.120 --> 00:03:15.240
Runtime environment variables.

67
00:03:15.240 --> 00:03:15.800
Perfect.

68
00:03:15.800 --> 00:03:17.640
That's exactly how we ran it locally.

69
00:03:17.640 --> 00:03:21.823
So what I'm going to do now is I'm
going to create four environment

70
00:03:21.823 --> 00:03:26.380
variables that I want to use
inside of this application.

71
00:03:26.380 --> 00:03:28.870
The first one,
the source is actually going to be.

72
00:03:28.870 --> 00:03:29.660
Look at that.

73
00:03:29.660 --> 00:03:31.466
Parameter store and SSM.

74
00:03:31.466 --> 00:03:33.872
Man, it's like they were so
perfectly integrated.

75
00:03:33.872 --> 00:03:36.740
[LAUGH] So there we go.

76
00:03:36.740 --> 00:03:39.340
Parameter store will be the first one.

77
00:03:39.340 --> 00:03:41.180
Parameter store will be the second one.

78
00:03:41.180 --> 00:03:43.910
We'll make plain text be the third one and

79
00:03:43.910 --> 00:03:48.070
then we will make parameter
store be the fourth one.

80
00:03:48.070 --> 00:03:52.325
And so what we're going to do is in each
one of the environment variable names,

81
00:03:52.325 --> 00:03:56.837
if you were curious or might have guessed
it, we're going to put in the environment

82
00:03:56.837 --> 00:03:59.910
variable names that our
application expects.

83
00:03:59.910 --> 00:04:04.790
So Client id Client secret, right?

84
00:04:04.790 --> 00:04:10.056
Google redirect URL and

85
00:04:10.056 --> 00:04:13.480
Postgres URL.

86
00:04:15.160 --> 00:04:17.000
So make sure you've got each one of those.

87
00:04:17.000 --> 00:04:23.560
Google Client id Google Client Secret,
Google redirect URL and postgres URL.

88
00:04:23.560 --> 00:04:26.680
And then the next thing I want you to do
is I want you to open up another tab.

89
00:04:26.680 --> 00:04:27.239
Sorry.

90
00:04:27.239 --> 00:04:30.920
Unfortunately, when you build stuff in the
cloud, you have to open up a lot of tabs.

91
00:04:30.920 --> 00:04:34.680
But I want you to open up another tab and
then I want you to go to ssm.

92
00:04:34.680 --> 00:04:40.319
So again,
you can type in SSM at the top SSM and

93
00:04:40.319 --> 00:04:43.890
then go to parameter store.

94
00:04:45.170 --> 00:04:53.250
Because this is the only easy
way to get this FEM FD service.

95
00:04:55.650 --> 00:04:58.263
And then I'm going to click
on each one of these and

96
00:04:58.263 --> 00:05:01.010
I'm going to get what's called the arn.

97
00:05:01.010 --> 00:05:08.350
The arn is effectively the identity or
the identifier in Amazon of the resource.

98
00:05:08.350 --> 00:05:10.790
And so that's going to tell App Runner.

99
00:05:10.790 --> 00:05:14.990
Remember earlier how I said services
can use other services in Amazon?

100
00:05:14.990 --> 00:05:16.830
Well, we're literally doing that now.

101
00:05:16.830 --> 00:05:20.870
We're telling App Runner, hey, this is
the location of my Google Client id.

102
00:05:20.870 --> 00:05:24.750
So if I click on that,
you'll see arn right here.

103
00:05:24.750 --> 00:05:31.734
If I copy that, I'm going to paste
it into this third line here.

104
00:05:31.734 --> 00:05:33.131
So let me take a step back.

105
00:05:33.131 --> 00:05:35.916
[LAUGH] I have added parameters to ssm,

106
00:05:35.916 --> 00:05:42.020
meaning that users can now configure their
application in a UI whenever they need.

107
00:05:44.900 --> 00:05:46.412
I've set up policies for

108
00:05:46.412 --> 00:05:51.220
the App Runner service to be able to
pull those exact same credentials.

109
00:05:51.220 --> 00:05:54.182
So if I change them in the future,
I can deploy new changes and

110
00:05:54.182 --> 00:05:56.340
new configuration values whenever I want.

111
00:05:57.540 --> 00:06:02.168
What I'm doing now is I'm mapping the path
to where it exists in Amazon with

112
00:06:02.168 --> 00:06:06.850
the environment variable that
should be used in the application.

113
00:06:06.850 --> 00:06:12.453
So I'm delivering our secrets very
securely at a very early stage,

114
00:06:12.453 --> 00:06:17.970
which, to be fair, not a lot of
applications do at an early stage.

115
00:06:19.250 --> 00:06:22.250
So I'm going to grab this one,
I'm going to paste this one in here.

116
00:06:22.250 --> 00:06:25.141
Now, for the third value,
you might be like, what are we using for

117
00:06:25.141 --> 00:06:26.290
the Google redirect URL?

118
00:06:27.500 --> 00:06:30.944
Well, this is what we call a chicken
before the egg scenario, which is,

119
00:06:30.944 --> 00:06:34.838
unfortunately, we don't know the URL yet
because it's going to be generated for

120
00:06:34.838 --> 00:06:36.860
us by the application.

121
00:06:36.860 --> 00:06:38.020
What we're going to do for

122
00:06:38.020 --> 00:06:41.460
now is we're just going to put in the
local host one and then we'll update it.

123
00:06:41.460 --> 00:06:45.979
Once we actually have the URL
of the application that's

124
00:06:45.979 --> 00:06:50.380
running in App Runner,
I'm going to postgres URL.

125
00:06:50.380 --> 00:06:51.100
Thank, gosh!

126
00:06:51.100 --> 00:06:54.100
I wasn't sure if I sent
encrypted that one or not.

127
00:06:54.100 --> 00:06:55.620
And then we'll paste that in there.

128
00:06:55.620 --> 00:06:59.860
So again, first one should be
the arn to the Google client id.

129
00:06:59.860 --> 00:07:02.100
Second one should be the arn
to the client secret.

130
00:07:02.100 --> 00:07:04.980
Third one should just be that
local host callback URL.

131
00:07:04.980 --> 00:07:09.940
And then the last one here should
be the postgres arn as well.

132
00:07:12.900 --> 00:07:14.580
So then, we scroll down a little bit.

133
00:07:14.580 --> 00:07:15.660
Oops, sorry.

134
00:07:15.660 --> 00:07:17.380
Scroll down a little bit.

135
00:07:17.380 --> 00:07:18.500
We should see the port.

136
00:07:18.500 --> 00:07:19.688
So, so just like a container,

137
00:07:19.688 --> 00:07:21.850
it's going to ask us what
port it's going to listen on.

138
00:07:21.850 --> 00:07:23.210
So I'm going to tell it 8080.

139
00:07:24.250 --> 00:07:27.386
Then we're going to scroll
down a little bit Further, and

140
00:07:27.386 --> 00:07:29.770
we're going to see security.

141
00:07:29.770 --> 00:07:30.678
In security,

142
00:07:30.678 --> 00:07:35.610
this is where we're actually going to
tell it to use the role that we created.

143
00:07:35.610 --> 00:07:40.246
So if I click this, you'll see that
I have two, but you should have one,

144
00:07:40.246 --> 00:07:42.010
which is FEMFD service.

145
00:07:42.010 --> 00:07:44.798
Now, if you didn't set up
that role correctly or

146
00:07:44.798 --> 00:07:49.100
make sure that the assume role was there,
that would not show in the list.

147
00:07:49.100 --> 00:07:54.700
Amazon is able to tell if you've given
the role permission to the service.

148
00:07:54.700 --> 00:07:58.307
And so if it's not there, then that
means effectively the role failed setup,

149
00:07:58.307 --> 00:08:02.140
it wasn't created properly, and
you're gonna have to go debug that role.

150
00:08:02.140 --> 00:08:08.220
But because it is, we should see
FEMFD service in the instance role.

151
00:08:10.780 --> 00:08:12.800
So we're gonna scroll
down a little bit more.

152
00:08:12.800 --> 00:08:14.000
We're gonna click next.

153
00:08:14.000 --> 00:08:15.760
We're gonna leave
everything else the same.

154
00:08:15.760 --> 00:08:16.920
Everything else could stay the same.

155
00:08:16.920 --> 00:08:18.880
And I'll explain why in a second.

156
00:08:18.880 --> 00:08:22.770
So this next part is really gonna
show us what we're gonna get

157
00:08:22.770 --> 00:08:26.320
out of deploying this
service on App Runner.

158
00:08:26.320 --> 00:08:30.058
So the first thing is it's gonna show
us our source, which in this case,

159
00:08:30.058 --> 00:08:34.400
this service that's gonna run in the cloud
is gonna get its source from ecr.

160
00:08:34.400 --> 00:08:39.335
And anytime the latest image is updated,
it's going to do automatic deployments for

161
00:08:39.335 --> 00:08:40.739
us, right?

162
00:08:40.739 --> 00:08:45.940
It's going to access ECR using the App
Runner ECR access role that we told

163
00:08:45.940 --> 00:08:51.225
it to use, and then it's going to
configure the service using the service

164
00:08:51.225 --> 00:08:57.539
name of FemfdService with 0.25 cores and
half a gigabyte of memory on port 80.

165
00:08:57.539 --> 00:09:01.906
And then, it's going to map
the environment variables to the SSN or

166
00:09:01.906 --> 00:09:05.830
the plain text options that we tell it,
right?

167
00:09:05.830 --> 00:09:07.244
The next stuff is nice, and

168
00:09:07.244 --> 00:09:10.628
what's really nice about using
something like App Runner, if we

169
00:09:10.628 --> 00:09:15.030
scroll down a little bit further, you'll
actually see that we have auto scaling.

170
00:09:15.030 --> 00:09:18.470
We have auto-scaling
built into App Runner.

171
00:09:18.470 --> 00:09:23.265
What's really nice about this is
that this actually auto scales

172
00:09:23.265 --> 00:09:26.390
based off of your request size.

173
00:09:26.390 --> 00:09:30.606
So basically, your concurrency,
your minimum size, and

174
00:09:30.606 --> 00:09:36.360
your maximum size are the minimum size is
how little, how low you can scale down.

175
00:09:36.360 --> 00:09:38.760
Maximum size is how far you can scale up.

176
00:09:38.760 --> 00:09:43.052
And then the concurrency is how many
requests per second you will get before it

177
00:09:43.052 --> 00:09:44.040
scales up.

178
00:09:44.040 --> 00:09:48.629
So right now it will stay scaled down
until we get up to 100 requests per

179
00:09:48.629 --> 00:09:49.240
second.

180
00:09:49.240 --> 00:09:53.626
And then once we get to 100 requests per
second, that will then scale out and

181
00:09:53.626 --> 00:09:58.360
keep scaling out until that value drops
to under 100 requests per second.

182
00:09:58.360 --> 00:09:59.440
So that's really nice.

183
00:09:59.440 --> 00:10:04.420
That means that,
let's talk about a VPS for a second.

184
00:10:04.420 --> 00:10:08.180
If we did this with a vps,
unfortunately this would not help us.

185
00:10:08.180 --> 00:10:10.540
A VPS would not help us at all here,
right?

186
00:10:10.540 --> 00:10:14.552
Because a vps, you would have to scale,
you would have to have more instances and

187
00:10:14.552 --> 00:10:17.620
you can't scale something
that's already like separated.

188
00:10:19.220 --> 00:10:23.902
This is another reason why I went
container first is because a lot of these

189
00:10:23.902 --> 00:10:29.460
container first systems have auto scaling
and these kind of systems built into them.

190
00:10:30.940 --> 00:10:35.420
So what's nice is because we took
the container route, even though again,

191
00:10:35.420 --> 00:10:39.420
Docker's a little annoying,
we got auto-scaling out of the box.

192
00:10:41.500 --> 00:10:46.136
In all fairness, and
I try to be as fair as I can in any kind

193
00:10:46.136 --> 00:10:50.976
of technical decision at least,
or discussion at least,

194
00:10:50.976 --> 00:10:55.750
is we could probably be on top of this for
a while, right?

195
00:10:55.750 --> 00:10:58.845
Like our biggest problems
are really being solved,

196
00:10:58.845 --> 00:11:03.134
which is how do we configure the service,
how do we deploy the service and

197
00:11:03.134 --> 00:11:06.310
how does it scale or
handle traffic, right?

198
00:11:06.310 --> 00:11:08.230
This is all right here.

199
00:11:08.230 --> 00:11:11.434
And again, even though it took us
a little bit longer to get here,

200
00:11:11.434 --> 00:11:15.449
the reality of it is, is if you, you know,
if we were moving at a more normal pace,

201
00:11:15.449 --> 00:11:18.510
this would probably be like
an hour's worth of work, right?

202
00:11:18.510 --> 00:11:23.660
To be able to go from a service with
absolutely nothing in it to a Docker file,

203
00:11:23.660 --> 00:11:27.282
to a database, to configuration,
to policy setup,

204
00:11:27.282 --> 00:11:30.190
to now a completely auto scaling service.

205
00:11:31.230 --> 00:11:33.070
It has health checks built into it.

206
00:11:33.070 --> 00:11:35.390
Again, we have security permissions,

207
00:11:35.390 --> 00:11:38.950
we even have networking settings
as well where we can tell it.

208
00:11:38.950 --> 00:11:41.390
Do we want it to be a private endpoint,
do we want it to be public?

209
00:11:42.510 --> 00:11:46.526
We can add observability so
we can add additional metrics and

210
00:11:46.526 --> 00:11:48.780
logging on top of that.

211
00:11:48.780 --> 00:11:52.979
But anyways, what I'm going to do now
is I'm going to click the create and

212
00:11:52.979 --> 00:11:55.580
deploy button and bam, there we go.

213
00:11:55.580 --> 00:11:56.780
Underneath the hood.

214
00:11:56.780 --> 00:12:00.180
What it's going to do is it's
going to start our deployment.

215
00:12:00.180 --> 00:12:04.060
If I scroll down to the bottom, you'll
see that we have a deployment log here.

216
00:12:06.460 --> 00:12:12.113
There's no CI CD to this, but
built in we do have the ability

217
00:12:12.113 --> 00:12:16.650
to see some logs and
output of what's going on.

218
00:12:16.650 --> 00:12:20.591
So if I was curious to see where
are we with the deployment,

219
00:12:20.591 --> 00:12:23.170
I can keep refreshing the logs here.

220
00:12:23.170 --> 00:12:23.810
There you go.

221
00:12:23.810 --> 00:12:26.290
I see that a deployment was created.

222
00:12:26.290 --> 00:12:29.090
It's getting the actual ECR artifact.

223
00:12:29.090 --> 00:12:30.530
It created a pipeline.

224
00:12:30.530 --> 00:12:33.730
Now it's working on actually
deploying the service itself.

225
00:12:33.730 --> 00:12:34.490
Okay, cool.

226
00:12:34.490 --> 00:12:36.290
It pulled the ECR image.

227
00:12:36.290 --> 00:12:37.970
It was successful in doing that.

228
00:12:39.570 --> 00:12:41.570
It's just going through that deployment.

229
00:12:41.570 --> 00:12:44.690
We have CICD or at least we have CD.

230
00:12:44.690 --> 00:12:47.630
We don't have CI, but we have cd, right?

231
00:12:47.630 --> 00:12:52.241
And again, I know we've been talking
a lot and I've been filling your

232
00:12:52.241 --> 00:12:57.242
brain with all of these things, but
it's only to show you how if you're just

233
00:12:57.242 --> 00:13:02.510
trying to get something out,
you're just trying to be focused on that.

234
00:13:02.510 --> 00:13:05.630
You can really easily do that
if you are a one man team.

235
00:13:07.310 --> 00:13:11.859
You're really using the cloud
here to your full advantage and

236
00:13:11.859 --> 00:13:14.580
to save you as much time as possible.

237
00:13:15.860 --> 00:13:20.255
You can see here, it pulled the image,
it created the instance for

238
00:13:20.255 --> 00:13:25.060
me, it deployed it, it's doing health
checks right now and it failed.

239
00:13:27.939 --> 00:13:34.180
However, what's neat is
we have application logs.

240
00:13:35.700 --> 00:13:41.590
You could see here I'm getting
an error PQ authentication error.

241
00:13:41.590 --> 00:13:45.550
So more than likely I copied
my SSM parameter wrong.

242
00:13:45.550 --> 00:13:50.638
But what's nice is that even this solution
gives me the ability to debug and

243
00:13:50.638 --> 00:13:52.350
know what's going on.

244
00:13:52.350 --> 00:13:54.990
One thing that I did forget
that is a little important.

245
00:13:56.110 --> 00:14:01.790
I did mention that we
would stay in US West 2.

246
00:14:01.790 --> 00:14:05.965
However, I did not tell you
to click up at the top and

247
00:14:05.965 --> 00:14:09.320
actually change to US west too.

248
00:14:09.320 --> 00:14:12.208
So in the off chance that
you did not do that and

249
00:14:12.208 --> 00:14:16.616
you're like having deployment failures or
other things like that,

250
00:14:16.616 --> 00:14:20.600
make sure you're in the right
region just to be safe.

251
00:14:20.600 --> 00:14:23.921
So after a little bit of labor and
a little bit of annoyance,

252
00:14:23.921 --> 00:14:27.160
we have a service up and
running in App Runner.

253
00:14:27.160 --> 00:14:28.240
And so you can see here,

254
00:14:28.240 --> 00:14:31.700
this is an example of a service
that is running in App Runner.

255
00:14:31.700 --> 00:14:32.780
A few things that you'll note.

256
00:14:32.780 --> 00:14:34.100
You'll see that it says running.

257
00:14:34.100 --> 00:14:37.540
So if you see the green running,
that means, hey, my service is running.

258
00:14:37.540 --> 00:14:38.420
That's awesome.

259
00:14:38.420 --> 00:14:40.660
You'll see that it's on a public domain.

260
00:14:40.660 --> 00:14:42.900
We have the default domain here.

261
00:14:44.100 --> 00:14:48.180
Then if I scroll down,
I can see again the server event logs.

262
00:14:48.180 --> 00:14:50.180
I can see all of the deployments.

263
00:14:50.180 --> 00:14:51.980
So you'll see here that I've
done a few deployments.

264
00:14:51.980 --> 00:14:54.660
So you can see all of the deployments
that have gone through.

265
00:14:54.660 --> 00:14:59.214
This should mean that these deployments
were either manually triggered by me or or

266
00:14:59.214 --> 00:15:01.460
they were triggered by a push to latest.

267
00:15:02.740 --> 00:15:06.902
Then if I click on application logs,
you can see that I have had no logs for

268
00:15:06.902 --> 00:15:09.780
a while, but if I did,
I would be able to see them.

269
00:15:11.540 --> 00:15:13.560
Another thing that's really,

270
00:15:13.560 --> 00:15:18.269
really nice is we also do have a little
bit of observability, for example,

271
00:15:18.269 --> 00:15:22.340
I can click on metrics, and
then it will load my request count.

272
00:15:22.340 --> 00:15:24.540
It'll show me my 200 responses.

273
00:15:24.540 --> 00:15:28.664
It'll show me my 400 responses,
my 500 responses, my latency,

274
00:15:28.664 --> 00:15:32.923
my active instances, if I'm using,
using my CPU utilization, memory,

275
00:15:32.923 --> 00:15:34.720
concurrency, all of this.

276
00:15:34.720 --> 00:15:39.593
So another thing to note about you
doing this yourself, as one person,

277
00:15:39.593 --> 00:15:44.400
you already have a lot of observability
kind of out of the box, right?

278
00:15:44.400 --> 00:15:46.771
Like, you don't just get like CPU and
memory,

279
00:15:46.771 --> 00:15:50.216
you're actually getting like request
count and request latency and

280
00:15:50.216 --> 00:15:53.200
five hundreds and four hundreds and
two hundreds, right?

281
00:15:53.200 --> 00:15:57.149
So this service really was and
one of the reasons why I like it is it was

282
00:15:57.149 --> 00:15:59.800
really set up to kind of
be like out of the box.

283
00:15:59.800 --> 00:16:01.880
You can get started.

284
00:16:01.880 --> 00:16:06.440
You can actually get started with
something that works well for you.

