WEBVTT

1
00:00:00.160 --> 00:00:02.580
&gt;&gt; Erik Reinert: Let's talk about
the phase changes really quickly from this

2
00:00:02.580 --> 00:00:03.280
second phase.

3
00:00:03.280 --> 00:00:06.742
So we went through startup,
we experienced what startup was like, and

4
00:00:06.742 --> 00:00:10.280
you got to experience the pains of
managing infrastructure on your own.

5
00:00:10.280 --> 00:00:12.400
That was super fun, right?

6
00:00:12.400 --> 00:00:16.269
And then in phase two, you kind of
got to understand the pains of CI and

7
00:00:16.269 --> 00:00:21.520
like how to set all that up and like
build this developer experience, right?

8
00:00:21.520 --> 00:00:25.212
And basically through that,
we added database migrations so

9
00:00:25.212 --> 00:00:28.620
database databases can be securely and
safely updated.

10
00:00:28.620 --> 00:00:31.802
Now we added a make file for
developer automation,

11
00:00:31.802 --> 00:00:35.860
which also means that we
added automation for CI too.

12
00:00:35.860 --> 00:00:38.980
We added a multi stage docker file for
different uses.

13
00:00:38.980 --> 00:00:41.260
Again, that was the real
takeaway I wanted you to have.

14
00:00:41.260 --> 00:00:44.462
There is you can make a build image
that you can reuse in CI, but

15
00:00:44.462 --> 00:00:47.662
then if you want to just have
a very smaller production image,

16
00:00:47.662 --> 00:00:51.620
you can separate those two and
reuse them as much as you want.

17
00:00:51.620 --> 00:00:53.670
We added a build step for code changes.

18
00:00:53.670 --> 00:00:57.249
We added a test step for schema changes,
and then we added a deploy step for

19
00:00:57.249 --> 00:00:59.740
automated deployments, right?

20
00:00:59.740 --> 00:01:04.534
Then the biggest part too is we added
a lot of future support because we

21
00:01:04.534 --> 00:01:06.940
have GitHub Actions in there now.

22
00:01:06.940 --> 00:01:08.660
Because we have a Makefile in there now.

23
00:01:08.660 --> 00:01:13.340
We can add more commands in the future, we
can add more pipeline jobs in the future.

24
00:01:13.340 --> 00:01:15.620
This is that growth that
I'm telling you about.

25
00:01:15.620 --> 00:01:18.700
It's not just growing, but we want to
make sure it can continue growing.

26
00:01:20.100 --> 00:01:23.690
But what are the pros to this phase,
this growth phase?

27
00:01:23.690 --> 00:01:27.930
Well, there was no real impactful changes
made if you think about it, right?

28
00:01:27.930 --> 00:01:31.490
Like we never touched the service once,
service never went down, right?

29
00:01:31.490 --> 00:01:34.890
And we still got tons of value
out of what we did, right?

30
00:01:34.890 --> 00:01:40.210
It was behind the scenes, but
it was still a lot of added value, right?

31
00:01:40.210 --> 00:01:43.370
We improved our schema management, right?

32
00:01:43.370 --> 00:01:45.774
We improved developer productivity,

33
00:01:45.774 --> 00:01:50.370
we improved code reliability as well
as the life cycle with delivery jobs.

34
00:01:50.370 --> 00:01:51.850
Now we have a complete life cycle.

35
00:01:51.850 --> 00:01:53.430
Merge, merge, deploy.

36
00:01:53.430 --> 00:01:54.830
Merge, deploy, right?

37
00:01:54.830 --> 00:01:57.430
Test, merge, deploy, test, merge, deploy.

38
00:01:57.430 --> 00:01:58.550
That's the whole.

39
00:01:58.550 --> 00:02:01.878
If I was in some way to sum up,
really a big part of this course,

40
00:02:01.878 --> 00:02:04.695
that's what you just want
to get comfortable with,

41
00:02:04.695 --> 00:02:08.069
is what are the steps you need
to do to get to your goal?

42
00:02:08.069 --> 00:02:11.590
I want to build, I want to test,
I want to deploy, okay?

43
00:02:11.590 --> 00:02:14.020
In the future now I want to build,
then I want to run migrations,

44
00:02:14.020 --> 00:02:14.790
then I want to test.

45
00:02:16.230 --> 00:02:20.830
We built an actual life cycle
there that we can rely on.

46
00:02:20.830 --> 00:02:22.670
What are the cons to this?

47
00:02:23.870 --> 00:02:27.870
Well, we still have no infrastructure
management whatsoever.

48
00:02:27.870 --> 00:02:31.190
If we have to go back and
manage the service, it's still clunky.

49
00:02:31.190 --> 00:02:33.630
We still have to deal
with App Runner a bit.

50
00:02:34.990 --> 00:02:37.125
We don't have a staging environment, so

51
00:02:37.125 --> 00:02:40.670
we're deploying directly
to production right now.

52
00:02:40.670 --> 00:02:43.230
There's no I want to check in dev and
then go to prod.

53
00:02:44.590 --> 00:02:46.670
There's also no network isolation.

54
00:02:46.670 --> 00:02:50.943
So again, your database is publicly
exposed as well as if you had a dev

55
00:02:50.943 --> 00:02:54.200
environment, that would
be publicly exposed too.

56
00:02:55.240 --> 00:02:57.920
There's no service support
really here either.

57
00:02:57.920 --> 00:03:01.720
What happens in the future if we
want to build another application?

58
00:03:01.720 --> 00:03:03.320
How would those two communicate?

59
00:03:03.320 --> 00:03:08.520
And how would we be able to build more
of a microservice infrastructure?

60
00:03:08.520 --> 00:03:12.120
We can't really do that in this current
setup, because it's just like App Runner.

61
00:03:14.040 --> 00:03:16.520
Those are the cons, basically.

