WEBVTT

1
00:00:00.056 --> 00:00:03.006
&gt;&gt; Erik Reinert: So the next thing
I'm going to do is I'm going

2
00:00:03.006 --> 00:00:04.800
to create a distribution.

3
00:00:06.560 --> 00:00:12.720
So we just said that we are creating
a private load balancer, right?

4
00:00:12.720 --> 00:00:17.474
So if we go back to our diagram really
quickly here, we now have the resources

5
00:00:17.474 --> 00:00:22.480
for the ECS cluster itself, and now
we're kind of working outwards this way.

6
00:00:22.480 --> 00:00:26.436
So if you kind of think about
like the ways that we've worked,

7
00:00:26.436 --> 00:00:30.165
we effectively started in the middle,
then in phase two,

8
00:00:30.165 --> 00:00:35.130
we moved over to the right, and now we're
moving all the way over to the left.

9
00:00:36.170 --> 00:00:38.577
We just added all the load
balancer parameter or

10
00:00:38.577 --> 00:00:40.330
all the load balancer resources.

11
00:00:40.330 --> 00:00:44.023
And now what we're going to do is we're
going to add the cloud front resources or

12
00:00:44.023 --> 00:00:45.690
the distribution.

13
00:00:45.690 --> 00:00:50.370
What's nice about this is that
this is a private load balancer.

14
00:00:50.370 --> 00:00:53.610
It's completely secured,
it's not accessible to anybody.

15
00:00:53.610 --> 00:00:58.808
But what we can do is we can put
an entire global CDN in front of our

16
00:00:58.808 --> 00:01:04.111
load balancer and then that CDN
communicate directly to our load

17
00:01:04.111 --> 00:01:09.930
balancer without any concerns for
connection or anything like that.

18
00:01:09.930 --> 00:01:13.710
But we get the added benefit of
now getting a CDN out of the box,

19
00:01:13.710 --> 00:01:17.349
meaning that every request will
be fulfilled over the cdn,

20
00:01:17.349 --> 00:01:22.960
it'll be routed through their internal
network and then to our load balancer.

21
00:01:22.960 --> 00:01:27.577
Nine times out of ten, that will be
faster than you not using a CDN for

22
00:01:27.577 --> 00:01:28.720
your requests.

23
00:01:31.920 --> 00:01:33.619
If you think about it for a second,

24
00:01:33.619 --> 00:01:36.797
yesterday when we loaded up
the application, what did it have?

25
00:01:36.797 --> 00:01:39.400
It had a loading page or
it had a landing page.

26
00:01:39.400 --> 00:01:43.760
It had buttons, it had style sheets,
it had HTML, all that stuff.

27
00:01:43.760 --> 00:01:48.162
Well, because this is a multipurpose
cluster, we want a way of

28
00:01:48.162 --> 00:01:53.470
delivering all of that stuff to
the user as efficiently as possible.

29
00:01:53.470 --> 00:01:56.910
If we used a public load balancer and
just stopped there,

30
00:01:56.910 --> 00:02:00.063
we'd have to figure out how
to lower that latency and

31
00:02:00.063 --> 00:02:05.230
do that caching and all that other stuff
that a natural CDN would do, right?

32
00:02:05.230 --> 00:02:09.349
So what we do instead is we say, okay,
well we know we need some way for

33
00:02:09.349 --> 00:02:12.110
the CDN to communicate to our cluster.

34
00:02:12.110 --> 00:02:15.855
Let's put a private load
balancer in between the two and

35
00:02:15.855 --> 00:02:20.081
then let's make everything
publicly route through the CDN and

36
00:02:20.081 --> 00:02:24.546
then privately use their internal network,
which is high speed,

37
00:02:24.546 --> 00:02:29.830
way faster than your Internet connection,
and route it to the load balancer.

38
00:02:29.830 --> 00:02:34.638
So in this case, what would end
up happen is if you were in,

39
00:02:34.638 --> 00:02:39.449
I don't know, England or
France or something like that,

40
00:02:39.449 --> 00:02:42.983
and then you made
a request to your domain,

41
00:02:42.983 --> 00:02:47.594
you would first get routed
to The CDN in France, right,

42
00:02:47.594 --> 00:02:52.799
that would then hit that node and
then at that point your request

43
00:02:52.799 --> 00:02:58.201
performance is no longer impacted
by your Internet speed because

44
00:02:58.201 --> 00:03:03.740
the only thing you needed to
connect to was the CDN in France.

45
00:03:03.740 --> 00:03:07.340
You didn't have to go all
the way back to the us.

46
00:03:07.340 --> 00:03:11.876
However, what is going to happen is that
CDN is going to get that request and

47
00:03:11.876 --> 00:03:15.980
if it doesn't have it cached,
Amazon will now take your request and

48
00:03:15.980 --> 00:03:20.948
using their internal network again,
which is like 100 gigabit, way faster,

49
00:03:20.948 --> 00:03:25.916
they'll ship that request all the way
through the network to your load balancer,

50
00:03:25.916 --> 00:03:30.452
which then they will, then you'll be
able to get it on your load balancer,

51
00:03:30.452 --> 00:03:36.040
that'll get forwarded to your service and
then you can fulfill the request.

52
00:03:36.040 --> 00:03:41.820
So it's a good thing, even though you have
an API to still have a CDN in front of it.

53
00:03:41.820 --> 00:03:47.900
CDNs are good for caching things and
static assets and all that stuff.

54
00:03:47.900 --> 00:03:52.133
But again, you will never be
able to compete with the network

55
00:03:52.133 --> 00:03:56.620
performance of a massive scale
cloud provider like Amazon.

56
00:03:56.620 --> 00:03:59.586
So just even putting
your API behind it and

57
00:03:59.586 --> 00:04:03.232
then saying at least have
a connection point closer

58
00:04:03.232 --> 00:04:08.570
to the user will mean that that
routing to you will be faster as well.

59
00:04:08.570 --> 00:04:11.635
And so yeah, that's why we're
putting a CDN in front of it or

60
00:04:11.635 --> 00:04:15.847
a cloudfront distribution in front of it
is because we're getting benefits pretty

61
00:04:15.847 --> 00:04:17.610
much as much as we can to locality.

62
00:04:19.530 --> 00:04:20.170
Cool.

63
00:04:20.170 --> 00:04:24.957
So in here, all of this is
actually possible because of

64
00:04:24.957 --> 00:04:30.560
a change Amazon made not too long ago,
before this course.

65
00:04:30.560 --> 00:04:33.440
Like I would say like maybe a year or
two ago.

66
00:04:33.440 --> 00:04:35.920
This wasn't possible, by the way.

67
00:04:35.920 --> 00:04:41.516
Back in the day, Amazon's cloudfront
would only talk to other public things,

68
00:04:41.516 --> 00:04:46.040
meaning it could not connect to
private resources and whatnot.

69
00:04:46.040 --> 00:04:50.480
And then Amazon introduced
something called VPC Origins.

70
00:04:50.480 --> 00:04:55.668
And the idea behind a VPC origin
is it's something that exists

71
00:04:55.668 --> 00:05:01.050
inside of your VPC that you
want to connect to Cloudfront.

72
00:05:01.050 --> 00:05:05.610
It could be a bucket, it could be a load
balancer, it could be whatever you want.

73
00:05:05.610 --> 00:05:10.704
But the goal here is to take that private
thing and connect it privately to

74
00:05:10.704 --> 00:05:17.050
the distribution so that the only thing
that is public is the distribution itself.

75
00:05:17.050 --> 00:05:20.650
And so at the very, very top,
we create our VPC origin.

76
00:05:20.650 --> 00:05:24.170
We say origin protocol policy, HTTP only.

77
00:05:24.170 --> 00:05:31.500
Can anyone guess why we're saying that
the Origin protocol policy is HTTP only?

78
00:05:33.900 --> 00:05:37.100
Now the origin, just to be clear,
is the load balancer.

79
00:05:37.100 --> 00:05:39.340
The load balancer we just created.

80
00:05:39.340 --> 00:05:43.820
We created something on the load
balancer with a specific Value.

81
00:05:44.860 --> 00:05:50.476
In this case,
what we are doing is we are getting a SSL

82
00:05:50.476 --> 00:05:57.110
public request that Cloudfront's
taken care of, right?

83
00:05:57.110 --> 00:06:02.870
But once we get behind the cdn,
we don't need SSL anymore, right?

84
00:06:02.870 --> 00:06:06.470
Because we've been encrypted
by the SSL request publicly.

85
00:06:06.470 --> 00:06:10.660
So behind the cdn we can just
make a normal HTTP request and

86
00:06:10.660 --> 00:06:14.310
pass it privately down
to the load balancer.

87
00:06:14.310 --> 00:06:19.190
That is how we get around the load
balancer needing an SSL certificate.

88
00:06:19.190 --> 00:06:24.000
We let Cloudfront create the certificate
for us on the Cloudfront domain.

89
00:06:24.000 --> 00:06:26.160
They manage all that themselves.

90
00:06:26.160 --> 00:06:30.333
And then the moment the CDN gets
the request and it gets behind the cdn,

91
00:06:30.333 --> 00:06:35.285
we're now in safe zone, we're now private
again, the load balancer is private,

92
00:06:35.285 --> 00:06:39.280
so we don't have to worry about
something else connecting to it.

93
00:06:39.280 --> 00:06:42.160
And then it can just be HTTP only.

94
00:06:42.160 --> 00:06:48.541
So if you hate SSL, [LAUGH] which I do,
this makes it a lot easier to.

95
00:06:48.541 --> 00:06:52.816
This makes it a lot easier to
hide services behind a CDN and

96
00:06:52.816 --> 00:06:57.460
not have to worry about encryption and
all that kind of stuff.

97
00:06:57.460 --> 00:06:58.300
It's really nice.

98
00:06:58.300 --> 00:07:02.307
It gives you the ability to have
a distribution out of the box and

99
00:07:02.307 --> 00:07:06.020
you're just basically plugging
in a load balancer to it.

100
00:07:07.540 --> 00:07:09.100
Once you have that VPC origin,

101
00:07:09.100 --> 00:07:12.100
you can then create your actual
Cloudfront distribution.

102
00:07:12.100 --> 00:07:16.660
Now, Cloudfront itself is its own
beast of pricing and modeling and

103
00:07:16.660 --> 00:07:19.300
blah, blah, blah and all this stuff.

104
00:07:19.300 --> 00:07:22.281
So I will say you could
spend a lot of money

105
00:07:22.281 --> 00:07:26.241
on Cloudfront if you don't
know what you're doing.

106
00:07:26.241 --> 00:07:30.730
Cloudfront provisions globally
by default in 100 countries or

107
00:07:30.730 --> 00:07:32.900
whatever, some nonsense.

108
00:07:32.900 --> 00:07:36.382
And if you don't set it to not do that,
it will do that and

109
00:07:36.382 --> 00:07:38.740
you will have to pay for it.

110
00:07:38.740 --> 00:07:40.728
So setting like the price class,

111
00:07:40.728 --> 00:07:45.130
stuff like that is really important to
make sure that you're not going for

112
00:07:45.130 --> 00:07:49.900
the Ferrari level of network
throughput and when you don't need it.

113
00:07:49.900 --> 00:07:52.420
But price class is a setting that we have.

114
00:07:52.420 --> 00:07:54.060
We also have origin.

115
00:07:54.060 --> 00:07:59.900
This is where we tell the distribution
where our load balancer is.

116
00:07:59.900 --> 00:08:02.940
And so
you can see here that the domain name for

117
00:08:02.940 --> 00:08:06.700
the origin is the DNS name
of the load balancer.

118
00:08:06.700 --> 00:08:11.920
We're telling it that the origin ID
in this case is cluster var name or

119
00:08:11.920 --> 00:08:15.510
cluster.dev or cluster staging or.

120
00:08:15.510 --> 00:08:19.196
And then we're telling it
that the VPC origin config

121
00:08:19.196 --> 00:08:22.390
the ID is the VPC origin
that we just created.

122
00:08:22.390 --> 00:08:28.150
And then now we have just bound our load
balancer to our Cloudfront distribution.

123
00:08:28.150 --> 00:08:33.830
So now we can actually communicate
through the CDN to the load balancer.

124
00:08:33.830 --> 00:08:37.750
Because it's a cdn,
we have caching features, right?

125
00:08:37.750 --> 00:08:41.591
So we have the ability to say like,
okay, in general,

126
00:08:41.591 --> 00:08:45.690
what methods are allowed to
actually go over the CDN CDNs?

127
00:08:45.690 --> 00:08:49.530
Sometimes you don't need every request and
you don't want to allow every request.

128
00:08:49.530 --> 00:08:54.513
Like, again, if it's just a static website
with no HTTP calls or anything like that,

129
00:08:54.513 --> 00:08:58.883
then you probably don't need to make
sure that the CDN supports put, post,

130
00:08:58.883 --> 00:09:00.410
patch, delete, right?

131
00:09:00.410 --> 00:09:01.850
Like, you won't need any of those.

132
00:09:01.850 --> 00:09:05.930
So you can easily disable
those if you want.

133
00:09:05.930 --> 00:09:10.391
But in our case, because we're using an
actual like, we're putting an API behind

134
00:09:10.391 --> 00:09:14.710
it, we want to make sure that we can
support all of these other methods.

135
00:09:14.710 --> 00:09:19.140
And so we have put pass, patch and
delete in there as well.

136
00:09:19.140 --> 00:09:25.150
However, you'll notice that we only
cache git and head response types.

137
00:09:25.150 --> 00:09:26.855
Why is that?

138
00:09:26.855 --> 00:09:30.070
Why do we only cache git and head methods?

139
00:09:31.670 --> 00:09:33.919
The other ones actually change data.

140
00:09:33.919 --> 00:09:37.886
Exactly, yeah, the other ones
will actually change data and or

141
00:09:37.886 --> 00:09:41.140
they'll have different
data in their requests.

142
00:09:41.140 --> 00:09:43.700
We don't want to necessarily cache that.

143
00:09:43.700 --> 00:09:47.496
We want to make sure that every time
we want to get new data for put, post,

144
00:09:47.496 --> 00:09:50.340
patch or delete,
we don't cache any of that.

145
00:09:50.340 --> 00:09:55.046
We only cache get and head to make
sure that those two are the only ones

146
00:09:55.046 --> 00:09:58.180
that aren't changing effectively.

147
00:09:58.180 --> 00:10:03.291
But that does mean, again, going back to
the benefit of using a cdn, that does

148
00:10:03.291 --> 00:10:08.418
mean that all of those CSS files,
all those JPEG images, all that stuff.

149
00:10:08.418 --> 00:10:09.770
Yeah, that'll get cached.

150
00:10:09.770 --> 00:10:12.530
That'll get cached directly on the edge.

151
00:10:12.530 --> 00:10:16.020
And what's really nice is going back to
like the whole, you know, we're in France,

152
00:10:16.020 --> 00:10:18.250
we want to look at our website.

153
00:10:18.250 --> 00:10:22.570
It will go to the VP or
it'll go to the distribution in France.

154
00:10:22.570 --> 00:10:24.169
It'll hit the node.

155
00:10:24.169 --> 00:10:29.210
Well, what's cool is that it will
have that cache stuff there.

156
00:10:29.210 --> 00:10:33.763
So you'll immediately download that and
then the only thing it has to wait for

157
00:10:33.763 --> 00:10:35.876
is the request to your API service.

158
00:10:35.876 --> 00:10:40.110
So your site should load
instantaneously almost.

159
00:10:40.110 --> 00:10:44.018
And then you may have just a little bit
of like a loader window or something for

160
00:10:44.018 --> 00:10:47.150
the actual API request, but
it's still like, it's fast.

161
00:10:47.150 --> 00:10:47.710
You know what I mean?

162
00:10:47.710 --> 00:10:51.023
You still get that performance out of it.

163
00:10:51.023 --> 00:10:55.216
Redirect to HTTPs, this basically
just says, hey, we don't want to

164
00:10:55.216 --> 00:10:59.950
use on the front end of the distribution,
we don't want to use HTTP at all.

165
00:10:59.950 --> 00:11:00.670
So make sure.

166
00:11:00.670 --> 00:11:03.070
That everything gets redirected to HTTPs.

167
00:11:04.190 --> 00:11:05.870
We want to forward values.

168
00:11:05.870 --> 00:11:09.782
So forwarding values means that once
we go through the load balancer,

169
00:11:09.782 --> 00:11:11.390
what are we keeping?

170
00:11:11.390 --> 00:11:13.630
Are we keeping the query string parameter?

171
00:11:13.630 --> 00:11:15.982
Are we keeping forward cookies?

172
00:11:15.982 --> 00:11:17.310
Right, all that kind of stuff.

173
00:11:18.830 --> 00:11:20.310
Here's GEO restrictions.

174
00:11:20.310 --> 00:11:22.902
So for example,
if you wanted to say, well,

175
00:11:22.902 --> 00:11:27.408
I only want a provision in the United
States and Germany and blah blah blah, and

176
00:11:27.408 --> 00:11:31.710
blah blah blah, you could set up GEO
restrictions, which in all honesty,

177
00:11:31.710 --> 00:11:36.060
normally when you create a cdn you
will eventually do that [LAUGH].

178
00:11:36.060 --> 00:11:38.220
You are in the global space now,

179
00:11:38.220 --> 00:11:43.260
which means that there are a lot
of people who will mess with you.

180
00:11:43.260 --> 00:11:47.051
And in all honesty, there
are definitely a few countries that we,

181
00:11:47.051 --> 00:11:50.638
even at my job have had to be like,
we don't even service data,

182
00:11:50.638 --> 00:11:53.300
we don't service any
kind of product to them.

183
00:11:53.300 --> 00:11:58.111
So just block it because at the end of the
day it makes it easier to prevent attacks,

184
00:11:58.111 --> 00:11:59.870
you know, things like that.

185
00:11:59.870 --> 00:12:04.830
And I think as a business,
as a business, right.

186
00:12:04.830 --> 00:12:08.861
Not as like an open source project or
anything else, it does kind of make

187
00:12:08.861 --> 00:12:13.763
sense to block countries you just don't do
business in, you know, unless you want for

188
00:12:13.763 --> 00:12:17.550
some reason to let them still
be able to come in or whatever.

189
00:12:17.550 --> 00:12:21.590
You know, unless you have a specific
reason, you know, it's fine.

190
00:12:21.590 --> 00:12:27.070
You know, it may frustrate some people but
you know, it's a lot easier than trying

191
00:12:27.070 --> 00:12:32.890
to filter out like these attacks and where
they're coming from and stuff like that.

192
00:12:32.890 --> 00:12:35.450
So you can do that here basically.

193
00:12:35.450 --> 00:12:40.202
And then the viewer certificate, this just
basically means like on the front end side

194
00:12:40.202 --> 00:12:45.450
or on the, in front of the distribution,
where are we getting our SSL certificate?

195
00:12:45.450 --> 00:12:47.632
Since we're not going to
be using a custom domain,

196
00:12:47.632 --> 00:12:50.890
we're just going to use
the Cloudfront default certificate.

197
00:12:50.890 --> 00:12:55.633
And again, this is what's nice about
Cloudfront that we don't get with

198
00:12:55.633 --> 00:12:59.690
load balancers is we at least get
a certificate out of the box.

199
00:12:59.690 --> 00:13:03.770
We don't have to create SSL or worry
about it or really anything like that.

