WEBVTT

1
00:00:00.223 --> 00:00:03.111
&gt;&gt; Erik Reinert: So now, what I'm going
to do is I'm going to make another module

2
00:00:03.111 --> 00:00:04.000
called Network.

3
00:00:04.000 --> 00:00:07.600
Now we are going into the networking
part of the Terraform.

4
00:00:09.360 --> 00:00:13.462
What we're going to do is we're going
to go into the network directory and

5
00:00:13.462 --> 00:00:17.680
we're going to create
Our1stMain TF in that directory.

6
00:00:17.680 --> 00:00:22.243
I'm going to copy it from my notes and
I'm going to paste in two resources and

7
00:00:22.243 --> 00:00:25.040
then I'm going to explain
to you what they do.

8
00:00:26.420 --> 00:00:29.498
Okay, so I have a main TF file and

9
00:00:29.498 --> 00:00:34.260
I have two modules actually
inside of this file.

10
00:00:34.260 --> 00:00:38.986
Now what is one thing that might stand out
really quickly about this is that I am

11
00:00:38.986 --> 00:00:41.140
using purely modules here.

12
00:00:41.140 --> 00:00:45.460
So I'm not using any kind
of bare resources directly.

13
00:00:45.460 --> 00:00:50.491
I'm immediately relying on somebody or
some other community that has built

14
00:00:50.491 --> 00:00:55.300
networks on Amazon and I'm using their
module to create my own network.

15
00:00:56.420 --> 00:01:01.003
That's the takeaway I want you to have
here, which is I didn't want to have to

16
00:01:01.003 --> 00:01:06.420
create a production ready, highly scalable
network and I don't want you to either.

17
00:01:06.420 --> 00:01:10.020
You can let others handle those complex
and complicated problems for you.

18
00:01:10.020 --> 00:01:11.780
That's the beauty of open source.

19
00:01:13.780 --> 00:01:18.355
What I ended up doing was using one of
those modules from one of the modules

20
00:01:18.355 --> 00:01:20.660
I showed you earlier.

21
00:01:20.660 --> 00:01:23.515
So if you remember when
I went to the registry,

22
00:01:23.515 --> 00:01:26.500
I showed you the Terraform VPC module.

23
00:01:26.500 --> 00:01:28.980
Well, we're actually using that module.

24
00:01:28.980 --> 00:01:33.910
This is a live example of us using
effectively again a community

25
00:01:33.910 --> 00:01:39.220
driven project to be able to create
all of our networking in Amazon.

26
00:01:40.820 --> 00:01:46.475
However, what is equally annoying
about creating Networking,

27
00:01:46.475 --> 00:01:50.700
figuring out CIDRs and
network address spaces.

28
00:01:51.820 --> 00:01:54.193
How many of you can actually
calculate CIDRs and

29
00:01:54.193 --> 00:01:56.220
know all of that stuff in your head?

30
00:01:56.220 --> 00:01:57.580
I can't either.

31
00:01:57.580 --> 00:02:03.740
I knew it at one point when I was much
younger and I had a much better memory.

32
00:02:03.740 --> 00:02:07.517
But the reality of it is also
when you create these networks,

33
00:02:07.517 --> 00:02:11.590
you have to figure out how much
address space per subnet you want,

34
00:02:11.590 --> 00:02:15.981
how many IP addresses you want to be
able to provision in those spaces.

35
00:02:15.981 --> 00:02:19.023
It's just a pain,
it really is just a pain,

36
00:02:19.023 --> 00:02:23.640
there are nice modules out there
that don't even do resources.

37
00:02:23.640 --> 00:02:28.920
They can do things like help calculate
things and all that kind of stuff.

38
00:02:28.920 --> 00:02:34.292
Hashicorp provides a module which
will actually create networks for

39
00:02:34.292 --> 00:02:38.643
you based off of a base CIDR block and
then the subnets and

40
00:02:38.643 --> 00:02:42.840
their availability zones and
stuff like that.

41
00:02:42.840 --> 00:02:45.356
Basically what I'm doing, and

42
00:02:45.356 --> 00:02:50.759
I'll go into a little bit more detail
in it, is I'm using first a open

43
00:02:50.759 --> 00:02:56.178
source module to Calculate all of
the CIDR addresses for my subnets.

44
00:02:56.178 --> 00:02:58.565
This is also per availability zone.

45
00:02:58.565 --> 00:03:03.250
So this is actually a really complex and
annoying operation.

46
00:03:03.250 --> 00:03:09.035
But I'm letting Terraform do this for
me so that if I give it a different CIDR,

47
00:03:09.035 --> 00:03:15.250
maybe I do 192 in one cluster, but
then I do like 10.0 in another cluster.

48
00:03:15.250 --> 00:03:19.346
I don't have to worry about it in the
sense that I still know I'll get the same

49
00:03:19.346 --> 00:03:22.430
65,000 IP addresses address spaces.

50
00:03:22.430 --> 00:03:26.559
But it will know how to either
take a 192 versus a 10 and

51
00:03:26.559 --> 00:03:29.390
then calculate that for me.

52
00:03:29.390 --> 00:03:33.995
So it makes it a lot easier to set up
these networks because all I really have

53
00:03:33.995 --> 00:03:39.790
to think about is do I want it 10.0,
do I want it 192, do I want it 172?

54
00:03:39.790 --> 00:03:44.428
And then tell it the Availability zones
that I effectively want it to be in and

55
00:03:44.428 --> 00:03:46.830
then it will calculate the rest for me.

56
00:03:48.910 --> 00:03:52.867
Once we have all of our subnets and
all of our CIDR blocks,

57
00:03:52.867 --> 00:03:56.990
the next thing we do is we
create the actual VPC itself.

58
00:03:56.990 --> 00:04:00.342
Now this module going
back to the whole 200 and

59
00:04:00.342 --> 00:04:05.249
something resources that we'll be
creating today, it's not as bad as

60
00:04:05.249 --> 00:04:10.190
it seems because this one module
will probably create 50 resources.

61
00:04:11.310 --> 00:04:15.950
That's the beauty of these modules is they
really do take care of the grunt work of

62
00:04:15.950 --> 00:04:19.568
setting up all the low level
stuff that's really annoying that

63
00:04:19.568 --> 00:04:21.450
you don't want to have to do.

64
00:04:21.450 --> 00:04:24.159
And it does take care of a lot of again,

65
00:04:24.159 --> 00:04:28.410
that tedious creation of
multiple resources and whatnot.

66
00:04:29.610 --> 00:04:34.170
All I have to do is tell it which
Availability zones I want it to be in.

67
00:04:34.170 --> 00:04:36.170
What's the CIDR address?

68
00:04:36.170 --> 00:04:40.130
Everybody knows what a CIDR is,
by the way, what I mean by the term cidr?

69
00:04:40.130 --> 00:04:42.970
No?
Okay, all right.

70
00:04:42.970 --> 00:04:49.123
A CIDR address, just super,
super fast is the actual

71
00:04:49.123 --> 00:04:54.196
network address space
that you want to own.

72
00:04:54.196 --> 00:04:59.957
So for example, if I did 10.0.0.0 16,

73
00:04:59.957 --> 00:05:04.073
then that means that I will have is it

74
00:05:04.073 --> 00:05:08.887
65,000 IP addresses or whatever.

75
00:05:08.887 --> 00:05:13.135
But really what it means
is that anything in

76
00:05:13.135 --> 00:05:18.091
10.0.00 I think, or is it yeah, zero to,

77
00:05:18.091 --> 00:05:24.940
I don't remember the exact 10 dot
like 100 I think is what it is.

78
00:05:25.980 --> 00:05:29.420
0.0.0 is all available to me.

79
00:05:29.420 --> 00:05:30.540
It could go beyond that.

80
00:05:30.540 --> 00:05:35.130
But the only thing I want you to take away
here is that this translates into telling

81
00:05:35.130 --> 00:05:38.470
how much addresses you can
have from here to here.

82
00:05:38.470 --> 00:05:40.310
That's what a CIDR does.

83
00:05:40.310 --> 00:05:46.545
What I can do is once I have this address,
I can calculate and

84
00:05:46.545 --> 00:05:53.907
say, okay, I want the database
network to be 10.50.0.0 and

85
00:05:53.907 --> 00:05:59.910
then I want the containers
to be on 7.5.0.0.

86
00:05:59.910 --> 00:06:02.640
But it allows me to say there's a base

87
00:06:02.640 --> 00:06:07.390
network that I want everything
to be in this huge space.

88
00:06:07.390 --> 00:06:11.016
And then I can take that and say, okay,
now I want this much space to go here,

89
00:06:11.016 --> 00:06:12.830
I want this much space to go there.

90
00:06:12.830 --> 00:06:14.670
And that's what that module does.

91
00:06:14.670 --> 00:06:18.430
The module basically does all
of that calculating for me.

92
00:06:18.430 --> 00:06:21.970
There is one thing that I don't have
here yet, which I'll go ahead and

93
00:06:21.970 --> 00:06:24.590
add now just so that you can see it.

94
00:06:24.590 --> 00:06:30.191
So we're going to do,
we're going to create a locals TF file and

95
00:06:30.191 --> 00:06:36.120
then inside of this file we're going
to add what are called octets.

96
00:06:39.400 --> 00:06:44.216
Again, if you don't know networking, you
don't understand CIDR classifications or

97
00:06:44.216 --> 00:06:45.256
any of that stuff,

98
00:06:45.256 --> 00:06:49.960
then seeing these five numbers may really
confuse you onto how you calculate things.

99
00:06:51.000 --> 00:06:55.601
But effectively what these
numbers mean is how many

100
00:06:55.601 --> 00:06:59.240
addresses I want in each address space.

101
00:07:00.250 --> 00:07:04.712
So if I go again, I'm not trying to
go super deep into networking, but

102
00:07:04.712 --> 00:07:11.050
to give an understanding here, basically
these two files combined do the following.

103
00:07:11.050 --> 00:07:16.700
The first is we tell or
we define how many addresses we want

104
00:07:16.700 --> 00:07:22.250
in each address space using the octet for
that value.

105
00:07:22.250 --> 00:07:28.511
So I think six, I think six is
basically like 1,024 addresses.

106
00:07:28.511 --> 00:07:33.244
And then, I think 5 is like 256 or
something like that,

107
00:07:33.244 --> 00:07:36.379
and I think three is like 10, right?

108
00:07:36.379 --> 00:07:40.294
So as you go lower you get less addresses,
whereas if you go higher,

109
00:07:40.294 --> 00:07:42.870
you get more addresses, right?

110
00:07:42.870 --> 00:07:45.588
And so
what I'm doing is I'm purposely saying,

111
00:07:45.588 --> 00:07:48.310
well or no, it's the opposite, I think.

112
00:07:48.310 --> 00:07:49.910
Yeah, it's the opposite, yeah, sorry.

113
00:07:49.910 --> 00:07:55.390
So database will have like 100
addresses because it's a higher value.

114
00:07:55.390 --> 00:07:57.470
But then when we go lower, private.

115
00:07:57.470 --> 00:08:01.804
Private will have like 20,000
addresses available to it.

116
00:08:01.804 --> 00:08:05.601
And the reason why we do that is because
I'm not going to provision 20,000

117
00:08:05.601 --> 00:08:06.630
databases, right?

118
00:08:06.630 --> 00:08:09.962
So why allocate so
much space to that subnet?

119
00:08:09.962 --> 00:08:11.239
I don't need to, right?

120
00:08:11.239 --> 00:08:13.790
I'd rather have more
space in other places.

121
00:08:13.790 --> 00:08:16.830
And so I can say, okay,
database, you get 100 IPs.

122
00:08:16.830 --> 00:08:19.150
Elasticache, you get 100 IPs.

123
00:08:19.150 --> 00:08:20.830
Intra, you get maybe more.

124
00:08:20.830 --> 00:08:25.750
Because that's like a private,
complete, isolated space.

125
00:08:25.750 --> 00:08:29.157
But then private, we know we're
going to use private all the time.

126
00:08:29.157 --> 00:08:31.510
Private is pretty much where
everything's going to exist.

127
00:08:31.510 --> 00:08:35.435
So let's give that again,
10,000, 20,000 IP addresses or

128
00:08:35.435 --> 00:08:39.425
whatever somebody smarter than me can
remember or look at these numbers and

129
00:08:39.425 --> 00:08:42.230
immediately know what they
actually calculate to.

130
00:08:42.230 --> 00:08:46.293
But that's the easiest, that's the only
takeaway I want you to take away from

131
00:08:46.293 --> 00:08:50.482
this, is that these are octets and the
lower the value, the more IP addresses and

132
00:08:50.482 --> 00:08:53.380
the higher the value,
the less IP addresses.

133
00:08:53.380 --> 00:08:59.365
We take those octets and we use this
module here to off of the CIDR that

134
00:08:59.365 --> 00:09:06.500
we provide it calculate per Availability
zone for each subnet, those spaces.

135
00:09:06.500 --> 00:09:11.149
So down here, when you look at
the VPC module, you'll see that I have

136
00:09:11.149 --> 00:09:16.284
database subnets, I have elasticache
subnets, I have interest subnets,

137
00:09:16.284 --> 00:09:21.840
I have private subnets, I have public
subnets, I have all of these subnets.

138
00:09:21.840 --> 00:09:24.480
That's why we're using
this module up here.

139
00:09:24.480 --> 00:09:27.747
Because if you look closely,

140
00:09:27.747 --> 00:09:32.974
you'll see that for
AZ in Availability zones,

141
00:09:32.974 --> 00:09:37.426
module subnets, network CIDR blocks.

142
00:09:37.426 --> 00:09:41.729
Get the CIDR block for
the Availability zone, that subnet and

143
00:09:41.729 --> 00:09:43.557
that Availability zone.

144
00:09:43.557 --> 00:09:45.692
Yeah,
&gt;&gt; Speaker 2: it's dividing your address

145
00:09:45.692 --> 00:09:47.040
space into subnets.

146
00:09:47.040 --> 00:09:49.360
Is that just a custom best practice?

147
00:09:51.250 --> 00:09:54.604
&gt;&gt; Erik Reinert: So I think why
they do this here is because, for

148
00:09:54.604 --> 00:09:59.334
starters, they expect you to use
Amazon for multiple things, so

149
00:09:59.334 --> 00:10:03.032
they're trying to support
multiple solutions and

150
00:10:03.032 --> 00:10:10.130
I think simultaneously they're just trying
to create good standards and practices.

151
00:10:10.130 --> 00:10:12.138
Most applications have a database space,

152
00:10:12.138 --> 00:10:15.330
most applications have a private
network versus a public network.

153
00:10:16.380 --> 00:10:17.880
You don't have to use all of these,

154
00:10:17.880 --> 00:10:21.180
you don't have to use any of these
if you don't really want to.

155
00:10:21.180 --> 00:10:24.623
But I normally just use these because
I end up pretty much using all of them

156
00:10:24.623 --> 00:10:25.446
anyways.

157
00:10:25.446 --> 00:10:29.579
&gt;&gt; Speaker 3: I suppose it's a way to
manage permissions between things too.

158
00:10:29.579 --> 00:10:30.860
&gt;&gt; Erik Reinert: Absolutely, yeah, yeah.

159
00:10:30.860 --> 00:10:34.649
So you can say like, I want a security
group in the database network

160
00:10:34.649 --> 00:10:37.425
that does only allow from
the private network and

161
00:10:37.425 --> 00:10:41.500
then blocks everything from the public
network or the public subnets.

162
00:10:41.500 --> 00:10:42.860
Yeah, absolutely, yeah.

163
00:10:42.860 --> 00:10:46.599
So it's just, there's no rhyme or
reason really to it, except for

164
00:10:46.599 --> 00:10:49.881
it's just looking at how others
have provisioned stuff and

165
00:10:49.881 --> 00:10:52.720
going they're probably
going to have databases.

166
00:10:52.720 --> 00:10:57.426
If they're running rds, they probably want
their own database subnets for databases,

167
00:10:57.426 --> 00:11:00.640
like you said, to then isolate and
protect where they need.

168
00:11:00.640 --> 00:11:02.000
Yeah, absolutely.

169
00:11:03.280 --> 00:11:06.427
But yeah, again, you don't have
to feel like you have to do this.

170
00:11:06.427 --> 00:11:11.184
The reason why I'm doing it is because we
are in the plan for the future phase, so

171
00:11:11.184 --> 00:11:14.876
why not make sure we've got more
than enough address space for

172
00:11:14.876 --> 00:11:18.370
everything that we're trying to do, right?

173
00:11:18.370 --> 00:11:23.130
And one of the ones that I actually
really like out of this is the intra one.

174
00:11:23.130 --> 00:11:25.290
Can anyone guess what the intra one does?

175
00:11:25.290 --> 00:11:30.289
I actually said it earlier, but can
anyone guess what the intra network does?

176
00:11:30.289 --> 00:11:35.593
If you remember,
we don't really use it as much anymore,

177
00:11:35.593 --> 00:11:40.914
but we used to have Internets and
then intranets, right?

178
00:11:40.914 --> 00:11:46.393
An intranet is a network that's
completely isolated from everything,

179
00:11:46.393 --> 00:11:51.792
there's no network connectivity,
it's completely managed by you.

180
00:11:51.792 --> 00:11:56.651
And so, you get an intranet or
an intra set of subnets with this

181
00:11:56.651 --> 00:12:02.320
module as well, that is,
what's the word I'm looking for?

182
00:12:02.320 --> 00:12:06.222
When it's completely offline,
there's no connectivity to the Internet or

183
00:12:06.222 --> 00:12:07.790
anything outside of it at all.

184
00:12:09.630 --> 00:12:11.790
Black boxed, is that what it's called?

185
00:12:11.790 --> 00:12:13.950
I forget the word
somebody in chat will be.

186
00:12:13.950 --> 00:12:15.390
Yeah, it's isolated, basically.

187
00:12:15.390 --> 00:12:16.070
Thank you, Whisper.

188
00:12:16.070 --> 00:12:20.199
Yeah, so for example, if you needed
subnets that did not connect to

189
00:12:20.199 --> 00:12:23.098
the Internet at all to
run specific workloads,

190
00:12:23.098 --> 00:12:27.734
then you would put them in the intra
network and then you could guarantee that

191
00:12:27.734 --> 00:12:32.469
nothing can connect to those workloads and
they're completely separated.

192
00:12:32.469 --> 00:12:36.023
So I do like that they add
that just in case of the like.

193
00:12:36.023 --> 00:12:39.700
For example, you could actually put your
databases in the intra network if you

194
00:12:39.700 --> 00:12:40.990
really wanted to, right?

195
00:12:40.990 --> 00:12:45.151
If you're like, I don't want my databases
connected at all to the Internet or

196
00:12:45.151 --> 00:12:48.491
some other services,
you just put them in the intra network and

197
00:12:48.491 --> 00:12:50.430
now they are 100% isolated.

198
00:12:50.430 --> 00:12:55.269
So yeah, you get kind of nice standards
and stuff like that out of these

199
00:12:55.269 --> 00:12:59.470
modules that you would have to
think of yourself basically.

