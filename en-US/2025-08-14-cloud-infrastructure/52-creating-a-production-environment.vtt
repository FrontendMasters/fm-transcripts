WEBVTT

1
00:00:00.160 --> 00:00:04.291
&gt;&gt; Erik Reinert: The next thing we want
to do really quickly is we want to create

2
00:00:04.291 --> 00:00:06.400
an entirely new environment.

3
00:00:07.600 --> 00:00:12.920
Now, to save time, I'm not going to do it,
but it's just to save time.

4
00:00:12.920 --> 00:00:16.076
However, I am going to show you really
quickly what it looks like when you do so

5
00:00:16.076 --> 00:00:19.440
say you're at the point where you're like,
all right, I want Prod.

6
00:00:19.440 --> 00:00:21.760
Sweet prod, awesome.

7
00:00:21.760 --> 00:00:22.480
Let's do it.

8
00:00:22.480 --> 00:00:24.720
So what we would do is
we would go to main.

9
00:00:26.330 --> 00:00:30.410
We would just copy this and
we would just type in prod.

10
00:00:30.410 --> 00:00:36.410
Or if you want production like it says,
and then production like this, whatever.

11
00:00:36.410 --> 00:00:38.840
I like to call it prod,
just because it's a little bit shorter,

12
00:00:38.840 --> 00:00:40.490
it makes the names shorter.

13
00:00:40.490 --> 00:00:43.917
But whatever you decide to choose or
whatever you decide to use,

14
00:00:43.917 --> 00:00:48.250
this is literally all you need to do
to create an entirely new environment.

15
00:00:48.250 --> 00:00:48.890
That's it.

16
00:00:48.890 --> 00:00:53.209
Once I save that file and
then I do a terraform in it,

17
00:00:53.209 --> 00:00:58.940
we will now see all of the production
modules also get initialized.

18
00:01:02.220 --> 00:01:04.460
Then if I do a terraform plan.

19
00:01:05.820 --> 00:01:08.877
And again, the only reason why I'm not
doing it is because the distribution and

20
00:01:08.877 --> 00:01:11.580
everything takes like 20 minutes,
so I don't wanna wait for that.

21
00:01:15.100 --> 00:01:15.900
Look at that.

22
00:01:15.900 --> 00:01:18.220
101 resources.

23
00:01:18.220 --> 00:01:22.383
So that is what it looks like when you
have a completely automated environment

24
00:01:22.383 --> 00:01:24.600
out of the box ready to go.

25
00:01:24.600 --> 00:01:27.640
And so if you want to create a new
environment, that's all you need to do.

26
00:01:27.640 --> 00:01:28.920
Just copy and paste it,

27
00:01:28.920 --> 00:01:33.720
everything that we talked about up until
this point would be exactly the same.

28
00:01:33.720 --> 00:01:37.440
So again, you would go to ECR for
your deployments.

29
00:01:37.440 --> 00:01:41.000
Except for this would use the Prod image,
so it'd use prod.

30
00:01:42.200 --> 00:01:47.019
If you wanted to look at your services,
you would go to the Prod cluster,

31
00:01:47.019 --> 00:01:50.337
you'd click on the Prod service,
you would go and

32
00:01:50.337 --> 00:01:54.610
update the prod environment or
the prod SSM variables.

33
00:01:54.610 --> 00:01:56.250
It's exactly the same.

34
00:01:56.250 --> 00:01:59.577
The experience is exactly the same.

35
00:01:59.577 --> 00:02:03.890
If you wanna configure anything or
do anything like that, you easily can.

36
00:02:06.290 --> 00:02:10.216
What we would do is we would just
add that, do a terraform apply,

37
00:02:10.216 --> 00:02:13.620
which I can do in
the background if I want to.

38
00:02:13.620 --> 00:02:16.038
I could do a terraform apply in
the background right now, and

39
00:02:16.038 --> 00:02:18.180
it'll start creating that
prod environment for me.

40
00:02:18.180 --> 00:02:20.500
There we go, off to the races.

41
00:02:20.500 --> 00:02:25.300
While that's running, though, we want
to make sure that we can deploy to it.

42
00:02:25.300 --> 00:02:27.980
We want to make sure that we actually
have the deployment parts that we were

43
00:02:27.980 --> 00:02:29.780
talking about earlier.

44
00:02:29.780 --> 00:02:32.580
So I've made it so terraform runs,
but I haven't yet.

45
00:02:32.580 --> 00:02:37.060
Made it so that we're not deploying
on App Runner and Supabase anymore.

46
00:02:37.060 --> 00:02:44.560
Now we want to be deploying to ECS and
RDS Database Container instance.

47
00:02:44.560 --> 00:02:49.893
Now, what's kind of cool,
before when we ran migrations,

48
00:02:49.893 --> 00:02:53.040
we needed a public endpoint, why?

49
00:02:53.040 --> 00:02:54.720
Why did we need a public endpoint?

50
00:02:54.720 --> 00:02:57.388
If I wanted to run migrations
from the GitHub runner,

51
00:02:57.388 --> 00:03:01.200
I'd have to make sure the GitHub runner
can communicate with the database.

52
00:03:02.800 --> 00:03:07.300
In this case, the database is
completely disconnected from the world.

53
00:03:07.300 --> 00:03:10.273
The GitHub runner is not
running in our environment, so

54
00:03:10.273 --> 00:03:12.340
how do we solve this problem?

55
00:03:12.340 --> 00:03:16.020
Now, you might initially say, well,
put a runner in the environment.

56
00:03:16.020 --> 00:03:17.100
And you can do that.

57
00:03:17.100 --> 00:03:18.500
You totally can do that.

58
00:03:18.500 --> 00:03:24.236
However, you might have noticed
that we added the Goose

59
00:03:24.236 --> 00:03:30.100
database URL and
the Goose driver to the container.

60
00:03:30.100 --> 00:03:35.709
So it's kind of neat about ECS is not
only can you run services with ECS,

61
00:03:35.709 --> 00:03:39.530
but you can run ad-hoc tasks with ECS.

62
00:03:39.530 --> 00:03:44.490
So I can take the exact same task
definition with all the configuration and

63
00:03:44.490 --> 00:03:49.690
then I can tell it, hey, change
the command you run in that container.

64
00:03:49.690 --> 00:03:54.526
That's exactly why we put Goose inside
of the main and the migrations inside of

65
00:03:54.526 --> 00:03:59.362
the main deployed image is because not
only does the image run the service, but

66
00:03:59.362 --> 00:04:02.030
it also runs the migrations.

67
00:04:02.030 --> 00:04:06.270
What's cool about this is
this is a CLI API call.

68
00:04:06.270 --> 00:04:11.262
So all we have to do is make
a CLI API call to Amazon and say,

69
00:04:11.262 --> 00:04:16.359
hey, run me a container on
ECS with this command, Goose,

70
00:04:16.359 --> 00:04:20.950
db migrate, blah blah, or
up, and then just exit.

71
00:04:20.950 --> 00:04:22.590
You don't have to stay there.

72
00:04:22.590 --> 00:04:23.790
Then that's exactly what it does.

73
00:04:23.790 --> 00:04:27.310
It goes out, runs the migration
inside of the entire environment.

74
00:04:27.310 --> 00:04:28.719
You got networking there,

75
00:04:28.719 --> 00:04:32.280
you got the literal entire container
of the service itself, right?

76
00:04:32.280 --> 00:04:34.667
And then it just runs that
command inside of it,

77
00:04:34.667 --> 00:04:38.188
which means that it runs our migrations
inside of that environment and

78
00:04:38.188 --> 00:04:42.120
then we're off to the races and we don't
need to connect our CI at all to it.

79
00:04:42.120 --> 00:04:44.120
And so
that's the approach we're gonna take.

