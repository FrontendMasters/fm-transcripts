WEBVTT

1
00:00:00.560 --> 00:00:05.840
&gt;&gt; Erik Reinert: So what I'm going to do
actually is I'm going to run this locally.

2
00:00:05.840 --> 00:00:12.080
And so let's do this really quickly.

3
00:00:12.080 --> 00:00:15.920
Let's open up our GitHub actions here.

4
00:00:17.120 --> 00:00:20.640
And again, so it's ECS cluster name,
ECS service name.

5
00:00:20.640 --> 00:00:24.160
So this is the command I'm
going to run locally, right?

6
00:00:24.160 --> 00:00:28.816
But what I'm going to do is
I'm just going to say export

7
00:00:28.816 --> 00:00:32.470
ECS cluster name equals staging, right?

8
00:00:32.470 --> 00:00:33.110
And then.

9
00:00:34.338 --> 00:00:39.306
Not echo export, export and

10
00:00:39.306 --> 00:00:45.516
then export ECS service name equals

11
00:00:45.516 --> 00:00:51.830
ECS cluster name dash service.

12
00:00:51.830 --> 00:00:58.410
So if I do echo ECS and then cluster name,
I've got my cluster name.

13
00:00:58.410 --> 00:01:05.130
Then if I do echo ECSS service name,
I should have staging service.

14
00:01:06.250 --> 00:01:09.370
Just so that we are all on the same page.

15
00:01:09.370 --> 00:01:12.010
Let's go back to our container service.

16
00:01:13.130 --> 00:01:15.610
If I go to staging staging service.

17
00:01:15.610 --> 00:01:16.210
Okay, cool.

18
00:01:16.210 --> 00:01:17.250
So that all looks good to me.

19
00:01:17.250 --> 00:01:21.618
So I'm going to click on staging service,
go to tasks again,

20
00:01:21.618 --> 00:01:27.260
this is unhealthy and it's failing
because we don't have our migrations ran.

21
00:01:28.700 --> 00:01:35.340
So I'm going to do, I'm going to run that
make command and let's see what happens.

22
00:01:35.340 --> 00:01:36.380
All right, so there we go.

23
00:01:36.380 --> 00:01:38.300
The task has been ran.

24
00:01:38.300 --> 00:01:41.260
So now we're waiting for
the task to complete.

25
00:01:41.260 --> 00:01:45.315
Right now I should be
able to go into here and

26
00:01:45.315 --> 00:01:51.750
actually go to just staging directly
tasks and we'll see stopped.

27
00:01:52.870 --> 00:01:53.990
Actually, let's go here.

28
00:01:55.910 --> 00:01:59.590
Created 23 seconds ago, stopped.

29
00:01:59.590 --> 00:02:00.510
Okay, cool.

30
00:02:00.510 --> 00:02:01.670
So it was successful.

31
00:02:01.670 --> 00:02:03.350
The migration ran.

32
00:02:03.350 --> 00:02:04.550
Awesome.

33
00:02:04.550 --> 00:02:07.274
Because we wouldn't have
gotten to waiting for

34
00:02:07.274 --> 00:02:11.110
ECS service to stabilize if we
hadn't gotten a successful code.

35
00:02:11.110 --> 00:02:14.482
But if I click on this,
which was the task that ran,

36
00:02:14.482 --> 00:02:18.970
you'll see essential container
in exit tasks or in task exited.

37
00:02:18.970 --> 00:02:22.666
But it's not saying an error, it's just
saying, hey, just to let you know,

38
00:02:22.666 --> 00:02:24.250
this successfully closed.

39
00:02:24.250 --> 00:02:28.904
If we go to logs, there they are,
there's our migration logs.

40
00:02:28.904 --> 00:02:32.235
So if you wanna be able
to see the migration,

41
00:02:32.235 --> 00:02:37.920
see the logs from the migration, all you
have to do is go find that task ARN.

42
00:02:37.920 --> 00:02:43.850
If we scroll up, so again, this is
output from the actual successful task.

43
00:02:43.850 --> 00:02:45.290
A lot of it.

44
00:02:45.290 --> 00:02:49.450
But yeah, if we scroll up right here,
you'll see tat running task.

45
00:02:49.450 --> 00:02:51.770
Here's the pending task.

46
00:02:51.770 --> 00:02:55.936
Task completed successfully with zero
updating ECS service to use the latest

47
00:02:55.936 --> 00:02:57.050
task definition.

48
00:02:57.050 --> 00:03:00.490
We get our service information if
we want to be able to debug it.

49
00:03:00.490 --> 00:03:03.450
And now we're waiting for
that service to stabilize.

50
00:03:03.450 --> 00:03:06.866
Now if I go to Tasks or
if I go to staging,

51
00:03:06.866 --> 00:03:10.900
Staging service, we go to deployments.

52
00:03:10.900 --> 00:03:11.980
Hey, look at that.

53
00:03:11.980 --> 00:03:13.700
We're getting healthy.

54
00:03:13.700 --> 00:03:20.380
If we go to tasks here,
we can see one running health and metrics.

55
00:03:20.380 --> 00:03:21.060
Look at that.

56
00:03:21.060 --> 00:03:22.100
Healthy.

57
00:03:22.100 --> 00:03:23.380
Awesome.

58
00:03:23.380 --> 00:03:27.171
Now if we go back to our

59
00:03:27.171 --> 00:03:33.616
distribution, copy our URL.

60
00:03:33.616 --> 00:03:35.460
That might be the prod one, hang on.

61
00:03:40.050 --> 00:03:41.530
Okay.
Yeah, this is the staging one.

62
00:03:41.530 --> 00:03:42.690
So grab this URL.

63
00:03:45.010 --> 00:03:47.330
Hey, we did it.

64
00:03:48.370 --> 00:03:49.490
So there you go.

65
00:03:49.490 --> 00:03:54.803
We now have a application running
entirely on ECs behind a CDN

66
00:03:54.803 --> 00:04:00.530
on top of the image that we're running,
configured by ssm.

67
00:04:00.530 --> 00:04:05.789
And just really quickly, before we say
anything else, I just want to again

68
00:04:05.789 --> 00:04:10.810
exemplify this is the same effect we
had yesterday when App Runner ran.

69
00:04:12.810 --> 00:04:17.343
But the difference here again
is the amount of effort and

70
00:04:17.343 --> 00:04:23.330
management required into getting
a deployment like this running again.

71
00:04:23.330 --> 00:04:27.553
You saw the amount of terraform we had to
create, the amount of knowledge we had to

72
00:04:27.553 --> 00:04:31.490
have understanding how to organize
all this stuff and do all of it.

73
00:04:31.490 --> 00:04:32.370
It's a lot of work.

74
00:04:32.370 --> 00:04:33.330
It is.

75
00:04:33.330 --> 00:04:35.090
Now what are the benefits here?

76
00:04:35.090 --> 00:04:39.566
As you sure also probably understand,
there are tons of layers that you can

77
00:04:39.566 --> 00:04:43.010
control, manage, update,
do whatever you need to.

78
00:04:43.010 --> 00:04:48.025
You have a lot more insight
into what's running again,

79
00:04:48.025 --> 00:04:53.050
if I want to, I can go into
where did my service thing go?

80
00:04:53.050 --> 00:04:57.679
So if we go back into here, right, like if
we want to talk about observability and

81
00:04:57.679 --> 00:05:02.375
metrics really quickly, like what do we
have again, if we go into our vpc, we have

82
00:05:02.375 --> 00:05:06.970
the ability to look at VPC related metrics
like networking and stuff like that.

83
00:05:08.410 --> 00:05:10.010
What else?

84
00:05:10.010 --> 00:05:12.992
If we go in here we go to staging,
we can see again,

85
00:05:12.992 --> 00:05:16.250
we can enable flow logs and
things like that.

86
00:05:16.250 --> 00:05:19.733
If we go to our database rds,
we can go and

87
00:05:19.733 --> 00:05:24.240
look at its metrics regarding
again connections and

88
00:05:24.240 --> 00:05:29.750
you can start to see the other
environment provisioning.

89
00:05:29.750 --> 00:05:33.633
So we'll go in here, go to monitoring,
we have all the monitoring related stuff

90
00:05:33.633 --> 00:05:35.990
which it's been running for
a little while now.

91
00:05:35.990 --> 00:05:39.190
So we can actually see
some metrics in here.

92
00:05:39.190 --> 00:05:45.310
The only one going up is my
credit balance ECS as well.

93
00:05:45.310 --> 00:05:48.870
Ecs, we turned on container metrics or
container insights.

94
00:05:48.870 --> 00:05:54.326
If I go to staging, I click on a service,
we could see some of the container

95
00:05:54.326 --> 00:06:00.046
insights here I can click on container
insights and see even more utilization

96
00:06:00.046 --> 00:06:05.210
RX storage, read numbering of
running tasks, all this stuff.

97
00:06:05.210 --> 00:06:10.730
So yeah, you're a lot deeper into it now,
you're definitely a lot deeper into it.

98
00:06:10.730 --> 00:06:14.450
Does it mean that the other one
can scale better than this one?

99
00:06:14.450 --> 00:06:15.890
No, I mean, not necessarily.

100
00:06:15.890 --> 00:06:19.220
And does this mean that this one could
scale way better than the other one?

101
00:06:19.220 --> 00:06:23.971
I mean, maybe a little bit, but
not substantially to the point where it's

102
00:06:23.971 --> 00:06:28.180
going to be so
massively impactful really quickly.

103
00:06:28.180 --> 00:06:32.580
Again, what we would do after this is,
okay, cool, we know that it's running.

104
00:06:32.580 --> 00:06:37.378
I'm gonna go ahead and
add the make file changes,

105
00:06:37.378 --> 00:06:41.720
add the deploy changes,
add all of this, and

106
00:06:41.720 --> 00:06:47.220
then do git commit_m feature
added deployments to ecs.

107
00:06:48.500 --> 00:06:50.820
I'm going to push this up.

108
00:06:50.820 --> 00:06:52.860
This is now available to you guys.

109
00:06:52.860 --> 00:06:55.017
So if you want to get
access to this again,

110
00:06:55.017 --> 00:06:58.420
it's either in the stage three branch or
in the workshop branch.

111
00:06:59.460 --> 00:07:00.820
But yeah, there we go.

112
00:07:00.820 --> 00:07:01.940
Now we've pushed it up.

113
00:07:02.980 --> 00:07:06.580
The moment I merged again, you've already
seen deployments and how they work.

114
00:07:06.580 --> 00:07:08.410
What happens is we merge it to main,

115
00:07:08.410 --> 00:07:12.192
that's going to get deployed to
the staging environment, like we said,

116
00:07:12.192 --> 00:07:14.580
because of the variable
in the deploy script.

117
00:07:15.730 --> 00:07:19.235
And then if it's on the production branch,
which what we

118
00:07:19.235 --> 00:07:24.127
would do realistically is we would say,
okay, I want to go into my main branch,

119
00:07:24.127 --> 00:07:28.970
I want to go to branches, I already
created one, but here I'll do it anyways.

120
00:07:28.970 --> 00:07:33.743
Again, go in here,
create a new branch off of Main,

121
00:07:33.743 --> 00:07:37.490
call it Prod, create that branch.

122
00:07:37.490 --> 00:07:41.873
And now your deployment process
will be work in your pr,

123
00:07:41.873 --> 00:07:45.508
work in your pr,
work in your PR merge domain,

124
00:07:45.508 --> 00:07:50.820
that'll go to staging, merge domain,
that'll go to Staging.

125
00:07:50.820 --> 00:07:54.360
And then once you go, okay,
I'm ready to deploy, you take staging and

126
00:07:54.360 --> 00:07:56.420
then you just merge it into Prod.

127
00:07:56.420 --> 00:07:57.060
Bam.

128
00:07:57.060 --> 00:07:58.598
All those changes get built,

129
00:07:58.598 --> 00:08:02.420
that gets deployed directly
out to the Prod environment.

130
00:08:02.420 --> 00:08:05.622
Now, as we said before,
what else we wanted to create was

131
00:08:05.622 --> 00:08:09.940
promotions in the sense of from
one cloud environment to another.

132
00:08:09.940 --> 00:08:11.540
Now we can do that.

133
00:08:11.540 --> 00:08:13.980
Now we have complete control
over those cloud environments.

134
00:08:13.980 --> 00:08:18.070
We can deploy to them whenever we want,
and then one URLs for our dev environment,

135
00:08:18.070 --> 00:08:20.900
one URLs for a production environment.

136
00:08:20.900 --> 00:08:23.380
You can even go further with
this if you really wanted to.

137
00:08:23.380 --> 00:08:26.404
You could say, okay,
let's get rid of the CDN and dev and

138
00:08:26.404 --> 00:08:28.620
then we'll only have the load balancer.

139
00:08:28.620 --> 00:08:32.717
So dev's completely offline, or
staging is completely offline, but

140
00:08:32.717 --> 00:08:35.940
have the production one
completely set up like normal.

