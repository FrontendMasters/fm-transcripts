WEBVTT

1
00:00:00.000 --> 00:00:03.164
&gt;&gt; Erik Reinert: We've got one
more file that we need to do, and

2
00:00:03.164 --> 00:00:05.120
this is our Bastion TF file.

3
00:00:06.160 --> 00:00:09.840
So in this file we're actually
doing some pretty cool stuff.

4
00:00:09.840 --> 00:00:13.876
And again, I'm just really trying
to show you guys how flexible,

5
00:00:13.876 --> 00:00:17.782
how customized, and
how much you can automate with Terraform.

6
00:00:17.782 --> 00:00:22.106
So at the very bottom,
we'll start with the very bottom,

7
00:00:22.106 --> 00:00:26.440
actually, this is our module
to create an EC2 instance.

8
00:00:26.440 --> 00:00:30.230
You're going to notice that I use modules
a lot of I use them a lot because I just

9
00:00:30.230 --> 00:00:32.170
don't want to have to find and look up.

10
00:00:32.170 --> 00:00:33.770
Because think about it like this.

11
00:00:33.770 --> 00:00:37.532
If you use a module, you also don't have
to look up Terraform resources because

12
00:00:37.532 --> 00:00:39.530
they're all in the module.

13
00:00:39.530 --> 00:00:42.372
Modules save time,
even from a development standpoint,

14
00:00:42.372 --> 00:00:46.250
because all I have to worry about are the
options that I want to provide to it.

15
00:00:46.250 --> 00:00:50.720
I don't have to think about, okay,
what's the AMI Data lookup file or

16
00:00:50.720 --> 00:00:55.130
Data Resource, and then what's
the EC2 create instance resource?

17
00:00:55.130 --> 00:00:56.702
How do I glue those two together?

18
00:00:56.702 --> 00:00:59.899
Like, the module just takes
care of all of that for you, so

19
00:00:59.899 --> 00:01:03.310
I do recommend using modules and
Terraform as much as you can.

20
00:01:03.310 --> 00:01:05.830
You'll move very, very fast.

21
00:01:05.830 --> 00:01:09.566
And like I said, even the 200,
300 resources we'll be creating,

22
00:01:09.566 --> 00:01:12.470
we're only really probably
creating like 50 things.

23
00:01:12.470 --> 00:01:16.550
And then everything else is in
the module and underneath it.

24
00:01:16.550 --> 00:01:21.188
So in this case, I'm using
a module called EC2 instance, and

25
00:01:21.188 --> 00:01:24.790
it allows me to create an EC2 instance,
right?

26
00:01:24.790 --> 00:01:27.670
So I'm telling it that
the module's name is Bastion.

27
00:01:27.670 --> 00:01:30.530
I'm telling it that I want
to associate an IP address.

28
00:01:30.530 --> 00:01:32.490
Why?
Because this is a Bastion node.

29
00:01:32.490 --> 00:01:35.010
I want to be able to connect
to that node publicly.

30
00:01:35.010 --> 00:01:38.370
I'm giving it a very,
very small instance size, right?

31
00:01:38.370 --> 00:01:40.210
Because this is just a jump box.

32
00:01:40.210 --> 00:01:42.530
I don't need tons of resources here.

33
00:01:42.530 --> 00:01:44.510
I just want to be able
to connect to it and

34
00:01:44.510 --> 00:01:47.490
then connect to other things from it,
right?

35
00:01:47.490 --> 00:01:52.175
However, one thing that's really
interesting is the AWS key pair or

36
00:01:52.175 --> 00:01:54.290
the key name on that next line.

37
00:01:57.110 --> 00:02:00.470
So I don't want to manage SSH keys.

38
00:02:00.470 --> 00:02:01.430
That sucks.

39
00:02:01.430 --> 00:02:02.950
That is annoying.

40
00:02:02.950 --> 00:02:05.698
This environment has this SSH key.

41
00:02:05.698 --> 00:02:08.460
This environment has this SSH key.

42
00:02:08.460 --> 00:02:10.790
Blah, blah, blah, blah, blah,
so forth and so on, right?

43
00:02:10.790 --> 00:02:15.243
Like, I would much rather make it so
that it just generates me SSH keys and

44
00:02:15.243 --> 00:02:19.112
then maybe like stores them in ssm and
then like as a developer,

45
00:02:19.112 --> 00:02:22.470
I can just go grab that key at SSM and
then connect to it.

46
00:02:22.470 --> 00:02:24.100
That's a better experience for me.

47
00:02:24.100 --> 00:02:30.600
And so, that's what we're doing above,
creating the instance with Terraform.

48
00:02:30.600 --> 00:02:34.680
Like I said, you can use tons of
providers and tons of modules.

49
00:02:34.680 --> 00:02:37.800
One of the things I'm
doing is at the very top,

50
00:02:37.800 --> 00:02:43.240
I'm telling Terraform to literally
just generate me a TLS private key.

51
00:02:43.240 --> 00:02:44.040
That's it.

52
00:02:44.040 --> 00:02:49.642
So you can even have Terraform generate
you values, passwords, secrets, whatever,

53
00:02:49.642 --> 00:02:54.900
so that you can then use those values
in specific things you're trying to do.

54
00:02:54.900 --> 00:03:00.020
So in this case I'm using
a TLS private key, RSA 4096.

55
00:03:01.220 --> 00:03:05.220
Then out of this resource will come
a private key and a public key.

56
00:03:05.220 --> 00:03:08.181
Now that I have a private key and
a public key, I can attach

57
00:03:08.181 --> 00:03:12.340
those to my bastion instance and then also
have the private key to connect to it.

58
00:03:13.460 --> 00:03:18.399
What happens is then I tell Amazon,
hey, I want you to take this public key

59
00:03:18.399 --> 00:03:22.800
that I just created and
created AWS key pair out of that.

60
00:03:22.800 --> 00:03:25.964
And then when I create
my bastion instance,

61
00:03:25.964 --> 00:03:30.800
I want you to use that key name
as the key for the instance.

62
00:03:30.800 --> 00:03:34.160
So now I don't have to worry
about managing keys at all.

63
00:03:34.160 --> 00:03:35.969
Whenever I create an environment,

64
00:03:35.969 --> 00:03:40.240
an SSM parameter gets created with
the private and public keys inside of it.

65
00:03:40.240 --> 00:03:44.999
So now developers can know that if they
need to access the SSA or the bastion key,

66
00:03:44.999 --> 00:03:47.200
I don't even have to give it to them,

67
00:03:47.200 --> 00:03:50.520
I just give them permission
to view the key in ssm.

68
00:03:50.520 --> 00:03:51.240
There you go.

69
00:03:51.240 --> 00:03:53.160
Now you go get it yourself.

70
00:03:53.160 --> 00:03:57.160
That's the motto DevOps should
have you go get it yourself.

71
00:03:57.160 --> 00:04:00.920
Because that's truly DevOps
in my mind is self serve.

72
00:04:00.920 --> 00:04:04.094
Let them be able to empower
themselves to do it.

73
00:04:04.094 --> 00:04:09.093
In this case, we wrote automation in a way
where we're solving the future problem

74
00:04:09.093 --> 00:04:13.668
of people trying to connect to the bastion
node or get access to it, right?

75
00:04:13.668 --> 00:04:17.758
I'm basically just saying, you know what,
put this in Amazon, making sure that

76
00:04:17.758 --> 00:04:21.878
people can access it, and then they'll be
able to connect to it when they need to.

77
00:04:21.878 --> 00:04:25.847
We enable monitoring as well,
we put it in one of the public

78
00:04:25.847 --> 00:04:31.020
subnets because it's a public
IP address or a public service.

79
00:04:31.020 --> 00:04:36.860
And then the last thing we do here is
we provide the VPC Security Group IDs.

80
00:04:36.860 --> 00:04:40.871
Now what you're going to notice is
that I give this two security groups,

81
00:04:40.871 --> 00:04:44.910
I give it a bastion security group and
I give it a private security group.

82
00:04:44.910 --> 00:04:46.670
Why do I give it both?

83
00:04:48.350 --> 00:04:51.873
Based off of what I've told you
earlier and how security groups work,

84
00:04:51.873 --> 00:04:55.390
why did I give it bastion and
why did I give it public?

85
00:04:55.390 --> 00:04:56.350
Can anyone guess?

86
00:05:00.270 --> 00:05:01.950
&gt;&gt; Speaker 2: It has to
connect to both of them.

87
00:05:01.950 --> 00:05:03.630
&gt;&gt; Erik Reinert: Exactly, yeah.

88
00:05:03.630 --> 00:05:08.951
So the bastion security group
handles the ingress filtering only,

89
00:05:08.951 --> 00:05:13.640
meaning which public IP
addresses can connect to it.

90
00:05:13.640 --> 00:05:16.708
But if I just put
the bastion one on there,

91
00:05:16.708 --> 00:05:21.800
I would not be allowed to connect
to anything in the private subnet.

92
00:05:21.800 --> 00:05:27.298
The reason for that is because we
are using access through the composition

93
00:05:27.298 --> 00:05:32.618
of security groups, meaning that if
I put the private security group,

94
00:05:32.618 --> 00:05:37.761
which allows anything with the private
security group access to it,

95
00:05:37.761 --> 00:05:40.155
then I have just given Bastion,

96
00:05:40.155 --> 00:05:44.440
the bastion node,
access to the entire private subnet.

97
00:05:46.520 --> 00:05:51.482
The way that we're composing these
security groups, the only real takeaway I

98
00:05:51.482 --> 00:05:56.669
want you to have is we don't have to write
additional terraform that says, okay,

99
00:05:56.669 --> 00:06:01.723
this bastion node, poke a hole into the
security group and now you have access.

100
00:06:01.723 --> 00:06:07.450
It's literally just if it has the security
group, that's all you need, right?

101
00:06:07.450 --> 00:06:11.753
So this is why we reuse those module
security groups, because we just attach

102
00:06:11.753 --> 00:06:15.690
them to the resources and
now those resources have access.

103
00:06:15.690 --> 00:06:20.513
So if we combine the ability to
have public IP addresses connect to

104
00:06:20.513 --> 00:06:25.599
this node with the ability for
it to be on the private security group,

105
00:06:25.599 --> 00:06:29.210
then we've now bridged
where they can come in.

106
00:06:29.210 --> 00:06:31.314
We can manage those rules separately, but

107
00:06:31.314 --> 00:06:35.406
because it's on the private subnet group
than anything else on that private subnet

108
00:06:35.406 --> 00:06:38.380
group the bastion node
will have access to.

109
00:06:38.380 --> 00:06:42.780
Now what's also nice about this is if
it's on the private security group, and

110
00:06:42.780 --> 00:06:46.314
then we allow the private security
group to access something,

111
00:06:46.314 --> 00:06:49.734
everything on that security
group now just got access to it.

112
00:06:49.734 --> 00:06:54.662
So this is also like future-proof in the
sense that if I tell the private security

113
00:06:54.662 --> 00:06:58.211
group, okay, now I want you
to access the intra subnets,

114
00:06:58.211 --> 00:07:03.010
then the bastion service also has access
to the interest subnets now, right?

115
00:07:03.010 --> 00:07:05.130
Because we have this composability.

116
00:07:05.130 --> 00:07:08.330
So this is how I like to
shape traffic on Amazon.

117
00:07:09.770 --> 00:07:13.093
When I started out, I thought of
it way more literally of like,

118
00:07:13.093 --> 00:07:15.490
here's IPs, here's IPs gotta poke holes.

119
00:07:15.490 --> 00:07:16.170
Da, da, da.

120
00:07:16.170 --> 00:07:19.287
But now that I use it more,
more and more I do this,

121
00:07:19.287 --> 00:07:22.650
which is just like security
group to security group.

122
00:07:22.650 --> 00:07:25.645
If you're in this security group,
you get access to everything,

123
00:07:25.645 --> 00:07:28.330
create more security groups
if you want more granularity.

124
00:07:29.370 --> 00:07:34.154
And so, yeah, yeah,
&gt;&gt; Speaker 3: so maybe just taking a step

125
00:07:34.154 --> 00:07:42.490
back on the, I guess where this is
coming from is online, whatever that is.

126
00:07:42.490 --> 00:07:44.026
Six towards the bottom.

127
00:07:44.026 --> 00:07:46.170
&gt;&gt; Erik Reinert: Yeah,
sorry, this one right here?

128
00:07:46.170 --> 00:07:46.690
&gt;&gt; Speaker 3: Yeah.

129
00:07:46.690 --> 00:07:50.170
So like you're grabbing
the first subnet there.

130
00:07:50.170 --> 00:07:53.850
This bastion is Going to be set up
on a per environment basis, right?

131
00:07:53.850 --> 00:07:55.656
&gt;&gt; Erik Reinert: Yep.
&gt;&gt; Speaker 3: One for each environment.

132
00:07:55.656 --> 00:07:56.763
&gt;&gt; Erik Reinert: Yep.

133
00:07:56.763 --> 00:08:01.022
&gt;&gt; Speaker 3: So then is our address
space also per environment or

134
00:08:01.022 --> 00:08:05.590
do we have one address space for
all the environments?

135
00:08:05.590 --> 00:08:08.310
&gt;&gt; Erik Reinert: I see, so you're saying,
like, is there a conflict there?

136
00:08:08.310 --> 00:08:11.664
&gt;&gt; Speaker 3: Yeah.
Or like I'm just trying to understand,

137
00:08:11.664 --> 00:08:13.826
I guess, better how like,

138
00:08:13.826 --> 00:08:18.433
is did l have all the dev resources
all gonna be in the same.

139
00:08:18.433 --> 00:08:21.884
&gt;&gt; Erik Reinert: Yeah, all the dev
resources would be in the same vpc,

140
00:08:21.884 --> 00:08:24.270
the same subnets and all that stuff?

141
00:08:24.270 --> 00:08:26.286
&gt;&gt; Speaker 3: Well, like, and I guess,

142
00:08:26.286 --> 00:08:31.550
would they be on the same security
group as the prod stuff too, then?

143
00:08:31.550 --> 00:08:33.848
&gt;&gt; Erik Reinert: No.
&gt;&gt; Speaker 3: So then there is like per

144
00:08:33.848 --> 00:08:38.768
environment, there is
different address space.

145
00:08:38.768 --> 00:08:44.228
&gt;&gt; Erik Reinert: So yes and no,
this is where it gets like,

146
00:08:44.228 --> 00:08:46.889
kind of confusing.

147
00:08:46.889 --> 00:08:48.997
&gt;&gt; Speaker 3: If we don't
have to go down that route.

148
00:08:48.997 --> 00:08:52.980
&gt;&gt; Erik Reinert: No, it's totally fine,
it's a great question.

149
00:08:52.980 --> 00:08:57.237
You found a potential problem for
us in the future if we didn't plan for

150
00:08:57.237 --> 00:08:58.186
it correctly.

151
00:08:58.186 --> 00:09:03.436
So again, the environment contains
everything that an environment needs,

152
00:09:03.436 --> 00:09:06.113
which is including a network, right?

153
00:09:06.113 --> 00:09:09.300
Database, blah, blah, blah,
blah, blah, blah, right?

154
00:09:09.300 --> 00:09:14.580
So that must mean that when I create a new
environment, I get a new network, right?

155
00:09:14.580 --> 00:09:17.540
Well, those two networks do not
communicate with each other at all.

156
00:09:17.540 --> 00:09:21.060
From an Amazon perspective,
they are completely separate VPCs, or

157
00:09:21.060 --> 00:09:23.030
Virtual Private clouds.

158
00:09:23.030 --> 00:09:26.550
Meaning that if I wanted to
connect to prod from dev,

159
00:09:26.550 --> 00:09:28.950
I literally could not do that.

160
00:09:28.950 --> 00:09:33.667
There's no connectivity
whatsoever in the Amazon world,

161
00:09:33.667 --> 00:09:36.790
VPCs are the isolators there, right?

162
00:09:37.990 --> 00:09:42.696
However, because they are so
isolated and so virtualized,

163
00:09:42.696 --> 00:09:49.380
it does mean that I could create
a staging network with 10.0.0.16.

164
00:09:49.380 --> 00:09:52.420
But I could also create a prod
network with 10.0.0 dot 16.

165
00:09:53.460 --> 00:09:56.037
Now, if I do that, and
then in the future I go, well, no,

166
00:09:56.037 --> 00:09:59.140
I actually want those two networks
to communicate with each other.

167
00:09:59.140 --> 00:10:04.007
It won't work because I just provisioned
two networks with the exact same address

168
00:10:04.007 --> 00:10:08.820
spaces and eventually there will be a
collision and they will not work together.

169
00:10:10.260 --> 00:10:13.380
So what would be an optimization to this?

170
00:10:13.380 --> 00:10:16.820
We're not doing that because we have
the bastion node per environment.

171
00:10:17.820 --> 00:10:20.368
So all we have to do is hop
on another bastion node and

172
00:10:20.368 --> 00:10:24.540
now we're in that environment and we don't
want prod and staging to communicate.

173
00:10:24.540 --> 00:10:26.304
So that isolation is fine as well.

174
00:10:26.304 --> 00:10:29.271
But if in the future that was a problem.

175
00:10:29.271 --> 00:10:33.768
&gt;&gt; Speaker 3: Like maybe what
a good example would be like,

176
00:10:33.768 --> 00:10:37.580
we want to refresh stage with prod data.

177
00:10:37.580 --> 00:10:38.780
&gt;&gt; Erik Reinert: Sure,
that's a great example.

178
00:10:38.780 --> 00:10:40.180
That's literally what I do at my job.

179
00:10:40.180 --> 00:10:40.860
Yeah.

180
00:10:40.860 --> 00:10:43.397
And in that case,
if you wanted to do that,

181
00:10:43.397 --> 00:10:47.840
what you would do is you would go even
further with the CIDR configuration.

182
00:10:48.880 --> 00:10:53.501
So what you would do is you would say,

183
00:10:53.501 --> 00:10:59.465
you do something like this,
you'd say staging

184
00:10:59.465 --> 00:11:04.480
is 10, 00016 but then prod is.

185
00:11:04.480 --> 00:11:06.811
Let's see if it'll autocomplete it for me.

186
00:11:06.811 --> 00:11:14.759
10.0 like 100.0.0/16.

187
00:11:14.759 --> 00:11:21.656
Now, as long as the last address
in 10.0.0.16 does not collide or

188
00:11:21.656 --> 00:11:26.362
overlap with the first
address in the PROD subnet or

189
00:11:26.362 --> 00:11:32.618
in the PROD network, then you can
put those two networks together.

190
00:11:32.618 --> 00:11:37.620
And then, you could communicate from
staging to prod if you wanted to.

191
00:11:37.620 --> 00:11:41.552
But if you do plan to do that, where you
want to have like a VPC over here and

192
00:11:41.552 --> 00:11:45.487
a VPC over there, you do have to take
into consideration that overlap and

193
00:11:45.487 --> 00:11:48.020
making sure that that doesn't happen.

194
00:11:48.020 --> 00:11:50.420
Otherwise Amazon, it'll just break stuff.

195
00:11:50.420 --> 00:11:51.700
That's a great question.

196
00:11:51.700 --> 00:11:56.558
And again when we talk about scale, that's
if you were going to glue two networks

197
00:11:56.558 --> 00:11:59.570
together, which is common,
you would hit the.

198
00:11:59.570 --> 00:12:01.540
Yeah, you'd.
Absolutely.

199
00:12:01.540 --> 00:12:06.009
Let's put it this way, if I didn't tell
you that, you'd be mad at me because it

200
00:12:06.009 --> 00:12:09.760
would be very diffic because
at that point you're screwed.

201
00:12:09.760 --> 00:12:14.912
At that point you have to create a new
network with the non conflicting space,

202
00:12:14.912 --> 00:12:20.240
move everything to that new network and
then glue those two networks together.

203
00:12:21.280 --> 00:12:24.320
So it's actually very important
that you're cognizant of that.

204
00:12:24.320 --> 00:12:28.880
Otherwise yeah, it's going to be
a massive foothold in the future for you.

