WEBVTT

1
00:00:00.320 --> 00:00:01.955
&gt;&gt; Erik Reinert: All right,
so now that we've done that,

2
00:00:01.955 --> 00:00:03.600
we're going to do Terraform Init again.

3
00:00:06.960 --> 00:00:08.000
We're going to do a plan.

4
00:00:18.400 --> 00:00:19.080
There we go.

5
00:00:19.080 --> 00:00:21.920
We've got 19 resources to add.

6
00:00:21.920 --> 00:00:27.671
And it's funny because earlier we created
a virtual network with 63 resources and

7
00:00:27.671 --> 00:00:33.180
IT felt really simple, [LAUGH] you can
tell how annoying even 19 resources are.

8
00:00:34.460 --> 00:00:35.500
Modules are helpful.

9
00:00:35.500 --> 00:00:36.180
Use modules.

10
00:00:36.180 --> 00:00:38.940
If you can use modules,
they will save you a lot of time.

11
00:00:39.980 --> 00:00:43.180
So, okay, now that we've got the plan,
let's go ahead and use the apply.

12
00:00:50.460 --> 00:00:56.300
And now we are working on creating
our cluster, the spot instances.

13
00:00:56.300 --> 00:01:00.950
&gt;&gt; Student: They can
shut down just anytime.

14
00:01:00.950 --> 00:01:03.430
So you have to be able to deal with that.

15
00:01:03.430 --> 00:01:05.940
&gt;&gt; Erik Reinert: Yeah, that's why
we're putting them in auto scaling

16
00:01:05.940 --> 00:01:06.950
groups though.

17
00:01:06.950 --> 00:01:11.343
So an auto scaling group underneath
the hood basically says I want this many

18
00:01:11.343 --> 00:01:15.590
instances and
if any of them disappear I will refill it.

19
00:01:15.590 --> 00:01:16.598
And if I want to,

20
00:01:16.598 --> 00:01:20.710
I want to also scale this auto
scaling group to this many instances.

21
00:01:20.710 --> 00:01:24.990
And then if we lose one of those,
I want to replace that one too.

22
00:01:24.990 --> 00:01:29.029
So if we're at 5 and then 1 of our
spots gets taken and we go down to 4,

23
00:01:29.029 --> 00:01:32.750
the auto scaling group will know,
well, we have to be at 5.

24
00:01:32.750 --> 00:01:34.190
So let me bring it back to 5.

25
00:01:35.390 --> 00:01:40.344
The goal there is to make it so
that your high availability is good enough

26
00:01:40.344 --> 00:01:44.474
to where you don't have to worry
about having any outages or

27
00:01:44.474 --> 00:01:47.870
requests failing or
anything like that for it.

28
00:01:47.870 --> 00:01:52.848
So really what you would do is you would
have an auto scaling group with stuff,

29
00:01:52.848 --> 00:01:56.679
six or seven versions of the same
container running it, and

30
00:01:56.679 --> 00:02:00.280
then you would send traffic
to all of those instances and

31
00:02:00.280 --> 00:02:05.260
then the moment you lost one of those
instances, you would stop traffic going

32
00:02:05.260 --> 00:02:10.010
to that instance,
which a load balancer does basically.

33
00:02:10.010 --> 00:02:12.085
And then once that new instance comes in,

34
00:02:12.085 --> 00:02:14.810
it allows traffic to start
going to that instance.

35
00:02:14.810 --> 00:02:18.842
So for us, the mechanisms that are doing
that are the auto scaling group and

36
00:02:18.842 --> 00:02:20.390
the load balancer.

37
00:02:20.390 --> 00:02:25.426
They work together to know when requests
are failing to take an instance out and

38
00:02:25.426 --> 00:02:28.950
when requests are successful
to keep the instance in.

39
00:02:30.230 --> 00:02:32.230
And it does everything
underneath the hood.

40
00:02:32.230 --> 00:02:37.188
&gt;&gt; Student: Do they give you
any guaranteed minimum time

41
00:02:37.188 --> 00:02:39.470
on a spot instance?

42
00:02:39.470 --> 00:02:40.191
I guess maybe.

43
00:02:40.191 --> 00:02:41.288
&gt;&gt; Erik Reinert: No [LAUGH].

44
00:02:41.288 --> 00:02:42.910
No, they really don't.

45
00:02:42.910 --> 00:02:48.783
No, and the reason why I say that is
just because we were provisioning

46
00:02:48.783 --> 00:02:54.556
like 32 core 196 gigabyte RAM
instances which are just huge and

47
00:02:54.556 --> 00:02:59.330
we'd only get for
like 15 minutes at a time on spot.

48
00:02:59.330 --> 00:03:00.850
it was ridiculously short.

49
00:03:00.850 --> 00:03:05.250
And I was like, okay, well Nevermind,
some are just better than others.

50
00:03:05.250 --> 00:03:09.858
If you get a two core 4 gigabit RAM
instance, you'll probably keep that for

51
00:03:09.858 --> 00:03:13.746
a while because they've got
hundreds upon thousands of them and

52
00:03:13.746 --> 00:03:17.170
they all kind of keep in
like a very stable market.

53
00:03:17.170 --> 00:03:20.370
But if you got like really big instances
and the market fluctuates a lot,

54
00:03:20.370 --> 00:03:23.836
if they can sell that instance for a
bigger value, they're going to take it and

55
00:03:23.836 --> 00:03:25.250
they're going to go sell it.

56
00:03:25.250 --> 00:03:28.730
That's really why they take the instance,
is because they want to,

57
00:03:28.730 --> 00:03:31.670
they found a better buyer for
what you're paying for and so

58
00:03:31.670 --> 00:03:35.330
they can make more money off of
the instance they just gave you.

59
00:03:35.330 --> 00:03:40.241
Well, while this is running, one thing we
can check really quickly is we could start

60
00:03:40.241 --> 00:03:42.950
looking at some of our cluster stuff.

61
00:03:42.950 --> 00:03:44.310
So if I go to ecs.

62
00:03:48.070 --> 00:03:48.630
Awesome.

63
00:03:48.630 --> 00:03:50.590
So there's a couple of
really good signs here.

64
00:03:50.590 --> 00:03:53.270
So here's our ECS cluster right here.

65
00:03:53.270 --> 00:03:55.750
I'm inside of the ECS console.

66
00:03:55.750 --> 00:03:57.703
You'll see that I have two other ones, but

67
00:03:57.703 --> 00:04:00.630
you'll see that I have my
third one here staging.

68
00:04:00.630 --> 00:04:04.338
You'll see that I have zero services,
I have no tasks running, but

69
00:04:04.338 --> 00:04:06.400
I do have one EC2 instance.

70
00:04:06.400 --> 00:04:10.591
So that means that the EC2 instance
in my auto scaling group started it,

71
00:04:10.591 --> 00:04:13.614
got that value in the template
that we provided it and

72
00:04:13.614 --> 00:04:17.280
it knew that it should connect
to my staging cluster.

73
00:04:17.280 --> 00:04:18.920
We also have container insights.

74
00:04:18.920 --> 00:04:22.400
So you can see here that I actually have
more advanced metrics and stuff like that.

75
00:04:22.400 --> 00:04:26.560
If I click on staging itself, I can
actually start looking at the cluster.

76
00:04:26.560 --> 00:04:30.880
So again you'll see that I have no
services currently, no tasks either.

77
00:04:30.880 --> 00:04:33.698
But if I click on infrastructure,
you can see, hey,

78
00:04:33.698 --> 00:04:36.230
there's my staging spot capacity provider.

79
00:04:36.230 --> 00:04:38.150
There's my active container instance.

80
00:04:38.150 --> 00:04:41.672
If I scroll all the way to the right here,

81
00:04:41.672 --> 00:04:47.060
you can see that I have 2048
units of compute available and

82
00:04:47.060 --> 00:04:52.670
I have 3083,
3883 megabytes of RAM available as well.

83
00:04:52.670 --> 00:04:54.790
So like I have a running cluster now.

84
00:04:54.790 --> 00:04:57.774
I have a running cluster with
an instance attached to it,

85
00:04:57.774 --> 00:05:01.890
ready to take services when we're ready
to start scheduling those services.

86
00:05:04.690 --> 00:05:07.650
&gt;&gt; Student: We still don't
have the code deployed, right?

87
00:05:07.650 --> 00:05:08.530
&gt;&gt; Erik Reinert: Not yet, no.

88
00:05:08.530 --> 00:05:12.290
Well, so technically we do,
but it's on App Runner, right?

89
00:05:12.290 --> 00:05:15.441
So during this whole time,
if you were at your company,

90
00:05:15.441 --> 00:05:19.210
you would absolutely be leaving
that stuff on App Runner, right?

91
00:05:19.210 --> 00:05:22.370
Let the devs keep going through
that process and all of that.

92
00:05:22.370 --> 00:05:25.906
And then once all of this was deployed,

93
00:05:25.906 --> 00:05:30.200
then you would move
everything over to ecs.

94
00:05:30.200 --> 00:05:34.120
Awesome, so we got provisioned.

95
00:05:34.120 --> 00:05:37.720
Now, again, we just created a cluster and
a distribution.

96
00:05:37.720 --> 00:05:41.880
But as I said before,
we've taken a look at the staging cluster.

97
00:05:41.880 --> 00:05:44.205
We can see that we do have infrastructure,

98
00:05:44.205 --> 00:05:48.200
we have our capacity provider as
well as even an instance right here.

99
00:05:48.200 --> 00:05:50.436
We can see we're completely wired up and

100
00:05:50.436 --> 00:05:53.610
ready to go in the sense
of running containers.

101
00:05:53.610 --> 00:05:58.207
And then if I go to distribution, I can go
to Cloudfront and then if I go in here,

102
00:05:58.207 --> 00:06:03.021
again, disregard all my other stuff, but
the one that's actually not labeled,

103
00:06:03.021 --> 00:06:07.450
if I click on that one, this is the one
that we just created for our cluster.

104
00:06:07.450 --> 00:06:09.850
And so you can see we got a domain name.

105
00:06:09.850 --> 00:06:11.648
And what's kind of neat,

106
00:06:11.648 --> 00:06:17.610
if we want to see if it's actually
propagating properly, I can do this.

107
00:06:17.610 --> 00:06:20.094
Now, remember it in the load balancer,

108
00:06:20.094 --> 00:06:24.900
we said that if nothing else could
be handled, I should get a 404.

109
00:06:24.900 --> 00:06:29.973
So technically, if I make a request
to this CDN and I get a 404,

110
00:06:29.973 --> 00:06:34.420
that means that's the response
from the load balancer.

111
00:06:34.420 --> 00:06:38.660
So I'm gonna hit Enter,
hey, 404 not found.

112
00:06:38.660 --> 00:06:42.052
So even though I don't have
an application running yet,

113
00:06:42.052 --> 00:06:47.250
we still have complete connectivity from
the CDN to the load balancer internally.

114
00:06:47.250 --> 00:06:49.970
And that's the default response for it.

115
00:06:49.970 --> 00:06:50.730
So that's awesome.

116
00:06:50.730 --> 00:06:54.530
That means that, yeah, we're fully
ready to start provisioning a service.

117
00:06:54.530 --> 00:06:58.318
So if I just pull up the directory
in my code base really quickly,

118
00:06:58.318 --> 00:07:02.388
that module directory, what's neat
is that the module directory is

119
00:07:02.388 --> 00:07:05.490
really even describing our
infrastructure for us.

120
00:07:07.330 --> 00:07:13.276
If there's anything I've really grown to
appreciate in infrastructure management,

121
00:07:13.276 --> 00:07:16.020
it really is good organization, dude.

122
00:07:16.020 --> 00:07:20.248
You're managing stuff at the end of
the day, whether it be virtual stuff or

123
00:07:20.248 --> 00:07:22.020
physical stuff or whatever.

124
00:07:22.020 --> 00:07:25.380
And it really is nice
when it's organized well.

125
00:07:25.380 --> 00:07:27.860
It's easy to understand,
it's approachable.

126
00:07:29.140 --> 00:07:34.170
I've been on so many different jobs
where things weren't organized well or

127
00:07:34.170 --> 00:07:39.620
they didn't take the time to think
of anybody else using it but them.

128
00:07:39.620 --> 00:07:44.039
And yeah, being able to go into this
module directory and just see cluster,

129
00:07:44.039 --> 00:07:48.806
database, environment, network, this
is possible not just in this workshop,

130
00:07:48.806 --> 00:07:52.240
it's very possible in
a real world scenario.

131
00:07:52.240 --> 00:07:58.237
You just have to be conscious of what
you're trying to logically separate and

132
00:07:58.237 --> 00:08:02.400
really describing it in as
simple terms as possible.

133
00:08:04.320 --> 00:08:07.226
Again, we have a cluster, we have
a database, we have an environment,

134
00:08:07.226 --> 00:08:08.000
we have a network.

135
00:08:08.000 --> 00:08:13.370
We're not saying ECS cluster,
we're not saying RDS database, instance.

136
00:08:13.370 --> 00:08:15.770
We're just speaking in general terms.

137
00:08:15.770 --> 00:08:20.214
And the idea is that, okay,
so what happens in the future

138
00:08:20.214 --> 00:08:24.302
if we want our databases to
be Aurora instead of RDS?

139
00:08:24.302 --> 00:08:29.073
We could make it so
that this database module takes a variable

140
00:08:29.073 --> 00:08:32.450
that is Aurora as an option or
postgres or.

141
00:08:32.450 --> 00:08:36.330
I'm sorry, or
is RDS instance as an option, right?

142
00:08:36.330 --> 00:08:39.531
And now people can use
the exact same module and

143
00:08:39.531 --> 00:08:43.319
have more functionality and
more things to do with it.

144
00:08:43.319 --> 00:08:47.846
So, yeah, I think speaking in general
terms also makes it so that it's more

145
00:08:47.846 --> 00:08:52.589
direct to solving the problem and makes
it so that it's more approachable where

146
00:08:52.589 --> 00:08:57.799
you're not speaking so much in the cloud
resources terms, you're speaking more in.

147
00:08:57.799 --> 00:09:00.839
Just like,
this is what a database means to us,

148
00:09:00.839 --> 00:09:03.580
this is what a cluster means to us, right?

149
00:09:03.580 --> 00:09:05.820
When new people come on,
that's what you say to them.

150
00:09:05.820 --> 00:09:11.220
You say, okay, well, if we say the word
cluster, you think ECS cluster, right?

151
00:09:11.220 --> 00:09:15.860
And then everyone kind of is working
together in a really common language.

