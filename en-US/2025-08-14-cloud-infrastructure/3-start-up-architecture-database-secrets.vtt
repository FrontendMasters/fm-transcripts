WEBVTT

1
00:00:00.320 --> 00:00:02.840
&gt;&gt; Erik Reinert: So we have our
application deployed in App Runner.

2
00:00:02.840 --> 00:00:04.720
Great, awesome.

3
00:00:04.720 --> 00:00:08.080
However, App Runner needs
a container image, right?

4
00:00:08.080 --> 00:00:11.080
And so this is where we're gonna
start jumping into Docker.

5
00:00:11.080 --> 00:00:15.075
We're gonna create a very
simple container image, and

6
00:00:15.075 --> 00:00:19.920
then App Runner will actually use
Amazon storage to run that image.

7
00:00:19.920 --> 00:00:23.799
So we'll actually create the image,
put it in Amazon's storage, and

8
00:00:23.799 --> 00:00:28.090
then App Runner will use that as
a reference to pull the image and run it.

9
00:00:28.090 --> 00:00:29.810
So now we've got two pieces, right?

10
00:00:29.810 --> 00:00:33.930
So we've got App Runner and
we know that we need a container image.

11
00:00:33.930 --> 00:00:35.370
What about database?

12
00:00:35.370 --> 00:00:37.130
Okay, so here's the fun part.

13
00:00:39.130 --> 00:00:42.050
I've said multiple things about Amazon,
I actually really do like them.

14
00:00:42.050 --> 00:00:44.010
As a cloud provider,
they're one of my favorites.

15
00:00:44.010 --> 00:00:48.250
But RDS sucks, it really does.

16
00:00:50.170 --> 00:00:52.906
RDS is like its own beast,
and don't worry,

17
00:00:52.906 --> 00:00:55.720
we're still gonna be
working with RDS today.

18
00:00:56.760 --> 00:01:01.160
But I think I get this,
not a thing, I get this a lot.

19
00:01:01.160 --> 00:01:04.040
Where people will be like, well,
should I set up my own RDS instance?

20
00:01:04.040 --> 00:01:05.960
Should I create my own database instance?

21
00:01:08.920 --> 00:01:12.320
There's so much management that comes
into managing your own database.

22
00:01:12.320 --> 00:01:14.200
How many here knows what a DBA is?

23
00:01:15.240 --> 00:01:17.240
Okay, so, yeah, a few of you.

24
00:01:17.240 --> 00:01:21.763
A DBA is basically a database
administrator that companies hire because

25
00:01:21.763 --> 00:01:25.360
nobody else knows what postgres is or
how to use it.

26
00:01:25.360 --> 00:01:26.560
That's the easiest way to put it.

27
00:01:26.560 --> 00:01:30.880
It's like we have this massive database
with millions and millions of rows.

28
00:01:30.880 --> 00:01:34.080
We're gonna hire somebody
dedicated to that.

29
00:01:34.080 --> 00:01:37.440
When you're at a company, that's
normally what you end up doing, right?

30
00:01:37.440 --> 00:01:40.353
If you're in a scenario where
you aren't gonna do that or

31
00:01:40.353 --> 00:01:42.174
don't have the ability to do that,

32
00:01:42.174 --> 00:01:46.960
then I would make databases as less of
a problem for you as humanly possible.

33
00:01:46.960 --> 00:01:48.520
That's my personal opinion on it.

34
00:01:48.520 --> 00:01:52.633
I don't like having to think about
my data retention or my backups or

35
00:01:52.633 --> 00:01:55.180
uptime, all that stuff.

36
00:01:55.180 --> 00:01:59.500
So in this scenario, in this start-up
phase, we outsource it, right?

37
00:01:59.500 --> 00:02:04.340
There's a lot of really good options
outside of RDS that exist out there.

38
00:02:04.340 --> 00:02:08.339
And there's actually options that we're
gonna be using today that use RDS that

39
00:02:08.339 --> 00:02:11.739
made a company model on top of it,
that then give you basically RDS,

40
00:02:11.739 --> 00:02:14.620
but with a few clicks of a button,
and that's Supabase.

41
00:02:15.740 --> 00:02:19.550
I really do think that these
kinds of services that just say,

42
00:02:19.550 --> 00:02:24.650
here's a public endpoint with your,
I know, it's scary, I get it, I get it.

43
00:02:24.650 --> 00:02:29.966
But just having a public endpoint to
start off with easily, not having to

44
00:02:29.966 --> 00:02:36.250
deal with the networking part of it, makes
it easier to go to production directly.

45
00:02:36.250 --> 00:02:40.545
And so that's another decision as to why
we chose this infrastructure the way

46
00:02:40.545 --> 00:02:44.573
that we did is because then I don't
have to worry about security groups or

47
00:02:44.573 --> 00:02:46.770
firewalls or any of these other stuff.

48
00:02:46.770 --> 00:02:48.930
It's just there's a connection string.

49
00:02:48.930 --> 00:02:51.170
They manage it,
they manage the connections.

50
00:02:51.170 --> 00:02:52.450
They'll take care of all that stuff.

51
00:02:52.450 --> 00:02:53.890
Fantastic.

52
00:02:53.890 --> 00:02:54.930
Put it on them.

53
00:02:54.930 --> 00:02:58.890
So that's why we chose
Supabase in this first setup.

54
00:02:58.890 --> 00:03:01.170
Does that mean we're
gonna stay on Supabase?

55
00:03:01.170 --> 00:03:04.850
No, because more than likely, Supabase
will end up costing us a lot of money.

56
00:03:04.850 --> 00:03:07.440
That's how they end up making their money,
right?

57
00:03:07.440 --> 00:03:11.936
But in the early stages, especially, dude,
especially if you're making no money,

58
00:03:11.936 --> 00:03:14.050
don't pay for a database online.

59
00:03:14.050 --> 00:03:15.810
You are now in the red, my friend.

60
00:03:16.850 --> 00:03:20.210
Lean on free services as much as you can.

61
00:03:20.210 --> 00:03:22.770
Amazon's got a free tier,
Azure's got a free tier.

62
00:03:22.770 --> 00:03:25.730
Pretty much all of these
places have free tiers now.

63
00:03:25.730 --> 00:03:28.930
And if you can lean on that and
use it, yeah, feel free to.

64
00:03:28.930 --> 00:03:32.702
And so that's why we chose Supabase
in this model was just to say,

65
00:03:32.702 --> 00:03:37.250
I don't have database knowledge,
I don't know how to manage those things.

66
00:03:37.250 --> 00:03:39.850
So I'm gonna let another provider
take care of that for me.

67
00:03:39.850 --> 00:03:44.041
I'm gonna throw money at the problem,
but I know it'll work reliably and

68
00:03:44.041 --> 00:03:45.820
I'll be real.

69
00:03:45.820 --> 00:03:49.260
This could save you tons
of maintenance hours.

70
00:03:49.260 --> 00:03:50.020
Think about it.

71
00:03:50.020 --> 00:03:53.918
Migrations running, failures, like all
that kind of stuff, all the databases

72
00:03:53.918 --> 00:03:57.260
down, you don't have to worry about
any of that with this approach.

73
00:03:57.260 --> 00:03:58.684
Yeah.
&gt;&gt; Male Student 1: So you're hoping

74
00:03:58.684 --> 00:04:02.460
to save some cost by not having
a database administrator.

75
00:04:02.460 --> 00:04:06.940
And especially when your scale is small,
these costs can be small, right?

76
00:04:06.940 --> 00:04:09.660
&gt;&gt; Erik Reinert: Absolutely,
yeah, absolutely.

77
00:04:09.660 --> 00:04:11.665
Where I am today, where I work,

78
00:04:11.665 --> 00:04:15.630
we're currently making
the evaluation of moving our CICD.

79
00:04:15.630 --> 00:04:18.231
And one of the first arguments I made was,
well,

80
00:04:18.231 --> 00:04:20.670
when do you ever worry about our CICD?

81
00:04:20.670 --> 00:04:22.030
Because we don't.

82
00:04:22.030 --> 00:04:23.630
It's so abstracted.

83
00:04:23.630 --> 00:04:26.510
Thankfully, we don't
have to worry about that.

84
00:04:26.510 --> 00:04:28.990
Those are the kind of solutions
you wanna find, right?

85
00:04:28.990 --> 00:04:31.173
I know it's fun to play
with the technology, but

86
00:04:31.173 --> 00:04:33.950
part of it is to make it so
it works [LAUGH].

87
00:04:33.950 --> 00:04:35.950
So, yeah, that's exactly it.

88
00:04:35.950 --> 00:04:39.497
You don't wanna have to worry
about hiring somebody to do it or

89
00:04:39.497 --> 00:04:43.330
the knowledge around it, so
you can just pay them to do it, right?

90
00:04:44.770 --> 00:04:49.473
The last thing, and this is just
kind of an additional thing and

91
00:04:49.473 --> 00:04:52.490
this is something that I chose which is,

92
00:04:52.490 --> 00:04:57.938
I need a place to store credentials and
secrets for the service, right?

93
00:04:57.938 --> 00:05:02.850
Now I would assume you want some sort of
security, [LAUGH] you know what I mean?

94
00:05:04.100 --> 00:05:06.660
You can, if you want, say,
I'm not even gonna use this.

95
00:05:06.660 --> 00:05:09.734
I'm just gonna put secrets directly
in my environment variables and

96
00:05:09.734 --> 00:05:11.540
the security's up to you, man.

97
00:05:11.540 --> 00:05:15.077
However, personally,
I would like some kind of secure place

98
00:05:15.077 --> 00:05:18.580
to put my configurations and
secrets and stuff like that.

99
00:05:18.580 --> 00:05:21.620
And so
we're using Parameter Store for this.

100
00:05:21.620 --> 00:05:22.780
It's a really nice tool.

101
00:05:22.780 --> 00:05:25.422
The reason why we're using it, if you're
like, why aren't you using Vault or

102
00:05:25.422 --> 00:05:26.060
blah blah, blah.

103
00:05:26.060 --> 00:05:28.180
Well, for starters,
I don't wanna deploy anything, right?

104
00:05:28.180 --> 00:05:30.830
That's the first thing,
I don't want to have to manage that.

105
00:05:30.830 --> 00:05:34.861
Then the second thing is I want a UI,
I don't wanna manage credentials in

106
00:05:34.861 --> 00:05:37.912
some kind of code base or
anything like that right now.

107
00:05:37.912 --> 00:05:42.190
It's just easier for me to go to UI,
make a couple changes, click a button.

108
00:05:42.190 --> 00:05:44.190
Out the door it goes, right?

109
00:05:44.190 --> 00:05:47.470
So now we're kind of building
the developer experience around it.

110
00:05:47.470 --> 00:05:51.310
And that's why the second part
is the developer side of it.

111
00:05:51.310 --> 00:05:54.590
So what you'll note is that everything
is basically manual, right?

112
00:05:55.950 --> 00:05:59.150
The user has to go to
App Runner to view your page.

113
00:05:59.150 --> 00:06:02.315
But then if you want to change anything
that the user sees or interacts,

114
00:06:02.315 --> 00:06:06.010
interacts with, you have to do
it manually yourself, right?

115
00:06:06.010 --> 00:06:08.810
This is the other side of
that start-up phase, right?

116
00:06:08.810 --> 00:06:11.530
You normally don't have
a whole bunch of automate.

117
00:06:11.530 --> 00:06:13.668
How many of you guys have
created a project and

118
00:06:13.668 --> 00:06:16.490
then just done everything
manually by the CLI?

119
00:06:16.490 --> 00:06:17.370
Right, we've all done it.

120
00:06:18.489 --> 00:06:21.770
And that's really where you'll be
in the start-up phase of a company.

121
00:06:21.770 --> 00:06:24.010
You'll more than likely
be just running commands.

122
00:06:24.010 --> 00:06:28.930
Because the amount of effort and
requirement it takes sometimes to get to

123
00:06:28.930 --> 00:06:33.770
that automation is something
you have to pay for, right?

124
00:06:33.770 --> 00:06:36.890
So yeah,
that's what we're gonna be building.

125
00:06:36.890 --> 00:06:40.087
Again, I know it was a little bit
of a long winded discussion, but

126
00:06:40.087 --> 00:06:42.993
I feel like now at least you
understand why we chose the way or

127
00:06:42.993 --> 00:06:45.050
the infrastructure that we did, right?

128
00:06:45.050 --> 00:06:49.152
And again, each part of these or each
one of these components were picked for

129
00:06:49.152 --> 00:06:53.610
a very specific reason to solve the
problem that we're trying to solve, right?

130
00:06:53.610 --> 00:06:57.874
&gt;&gt; Male Speaker 2: What do you think of
AWS Secret Manager to solve the credential

131
00:06:57.874 --> 00:06:59.340
management?

132
00:06:59.340 --> 00:07:04.020
&gt;&gt; Erik Reinert: Yeah, so
I have used Secrets Manager.

133
00:07:04.020 --> 00:07:08.940
I use it at my job and
I use Parameter Store mostly personally.

134
00:07:11.340 --> 00:07:18.620
Secrets Manager, you can kind of look at
it as a book with a ton of pages in it.

135
00:07:18.620 --> 00:07:21.500
And those pages can be super long and
super big or

136
00:07:21.500 --> 00:07:23.660
they can just be one or two entries.

137
00:07:25.760 --> 00:07:28.080
You just grab that document and
then you get all your secrets.

138
00:07:28.080 --> 00:07:28.600
Awesome.

139
00:07:28.600 --> 00:07:32.240
That makes it really nice if you have
tons of secrets to pull it in one

140
00:07:32.240 --> 00:07:33.280
request, right?

141
00:07:34.960 --> 00:07:42.000
Systems SSM or Parameter Store is really
meant to be value by value, right?

142
00:07:42.000 --> 00:07:45.600
So it's like a real key store storage.

143
00:07:45.600 --> 00:07:50.520
So what you would do in Parameter Store
that you probably wouldn't do in

144
00:07:50.520 --> 00:07:55.770
Secrets Manager is only have one value for
database password, right?

145
00:07:55.770 --> 00:08:01.210
You have a new parameter for user
password versus database password, right?

146
00:08:01.210 --> 00:08:05.210
Technically, that's the real
difference between the two.

147
00:08:05.210 --> 00:08:07.210
However, it's mostly preference.

148
00:08:07.210 --> 00:08:09.330
They both store and encrypt the same way.

149
00:08:09.330 --> 00:08:12.490
They both work effectively the same way.

150
00:08:12.490 --> 00:08:15.942
I tend to lean towards
more service discovery,

151
00:08:15.942 --> 00:08:19.741
which is where key value is
more helpful than pulling

152
00:08:19.741 --> 00:08:23.900
down huge Secrets Manager objects and
things like that.

153
00:08:23.900 --> 00:08:25.580
So it's really just a preference.

154
00:08:25.580 --> 00:08:30.494
But Parameter Store is meant to be
more like, I just want this one value,

155
00:08:30.494 --> 00:08:33.164
right, I don't want the whole thing.

