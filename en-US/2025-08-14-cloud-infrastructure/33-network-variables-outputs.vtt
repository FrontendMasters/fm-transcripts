WEBVTT

1
00:00:00.560 --> 00:00:04.886
&gt;&gt; Erik Reinert: The next thing
we're going to add is a Variables,

2
00:00:04.886 --> 00:00:06.640
variables TF file.

3
00:00:08.240 --> 00:00:11.644
Again, just like before,
we now have the opportunity

4
00:00:11.644 --> 00:00:15.200
to describe how we want this
network to be customizable.

5
00:00:16.320 --> 00:00:18.800
Now, the bastion ingress,
you'll notice, is there.

6
00:00:18.800 --> 00:00:25.040
Again, this is one of the things about
Terraform which is slightly cumbersome.

7
00:00:25.040 --> 00:00:28.080
I don't want to call it annoying
because I understand why.

8
00:00:28.080 --> 00:00:31.449
But if you have a variable
that's four modules higher,

9
00:00:31.449 --> 00:00:36.510
you will have to put that variable in
every module that it gets passed through.

10
00:00:36.510 --> 00:00:42.350
So we created a variable for
bastion ingress in the environment.

11
00:00:42.350 --> 00:00:46.120
Well, we also need to create a variable
for the bastion ingress in the network

12
00:00:46.120 --> 00:00:49.710
because the environment passes
the variable to the network.

13
00:00:49.710 --> 00:00:56.830
If you think of it in kind of like react
terms, these are our component props.

14
00:00:56.830 --> 00:00:57.966
So we want to make it so

15
00:00:57.966 --> 00:01:02.030
that we can pass down those props to all
of the modules inside of the modules.

16
00:01:03.230 --> 00:01:06.070
That's right.
I know some react stuff, but yeah,

17
00:01:06.070 --> 00:01:10.392
in this case that means that by
the time this module gets loaded,

18
00:01:10.392 --> 00:01:16.000
we've passed the bastion ingress from the
root module through the environment and

19
00:01:16.000 --> 00:01:20.110
now down to the actual network so
that it can be used again.

20
00:01:20.110 --> 00:01:25.062
These layers make it so that all the way
up here I, I can make one little tweak and

21
00:01:25.062 --> 00:01:29.713
then down here it will get updated and
again going back to the whole Legos or

22
00:01:29.713 --> 00:01:32.290
even building, that's what you want.

23
00:01:32.290 --> 00:01:36.930
You wanna make one tiny change and then
see it propagate across a larger scale.

24
00:01:38.050 --> 00:01:41.730
But some of the other stuff is a little
bit more specific, availability zones.

25
00:01:43.090 --> 00:01:46.813
A big reason why we have Availability
zones is up there is honestly just like

26
00:01:46.813 --> 00:01:49.370
maybe you don't wanna
provision in all three AZs.

27
00:01:49.370 --> 00:01:53.020
Maybe, maybe you don't wanna, maybe you
don't need five availability zones.

28
00:01:53.020 --> 00:01:56.104
The reality of it is,
is who here knows what it would take for

29
00:01:56.104 --> 00:01:58.460
an Availability Zone to go down,
by the way?

30
00:02:00.700 --> 00:02:02.676
So a fun thing about azs,

31
00:02:02.676 --> 00:02:09.180
Amazon has built these things like
end of the world scenario, surviving.

32
00:02:09.180 --> 00:02:11.735
The only real way most
of the time an entire

33
00:02:11.735 --> 00:02:15.900
Availability Zone would go down is
if they call it like an act of God.

34
00:02:17.510 --> 00:02:18.310
It's pretty crazy.

35
00:02:18.310 --> 00:02:23.030
But Amazon does have like act
of God redundancy, it's insane.

36
00:02:23.030 --> 00:02:27.330
So unless like it's a massive earthquake
or, you know, I don't know, the,

37
00:02:27.330 --> 00:02:32.790
I don't know, the head to the network like
just somehow gets completely severed.

38
00:02:32.790 --> 00:02:35.910
You normally don't need like 5 AZs.

39
00:02:35.910 --> 00:02:37.470
That's a little overkill.

40
00:02:37.470 --> 00:02:38.602
And to be honest with you,

41
00:02:38.602 --> 00:02:41.910
you're probably spending way more money
than you need to on availability.

42
00:02:43.170 --> 00:02:47.582
For example, even where I work,
we only really use 2 AZS,

43
00:02:47.582 --> 00:02:49.970
1 and then 1 for failover 3.

44
00:02:49.970 --> 00:02:54.617
Failover means that three parts
of the country have gone down,

45
00:02:54.617 --> 00:02:57.170
which is kind of a lot.

46
00:02:57.170 --> 00:03:01.318
Two is normally good enough, but if you
find yourself in a scenario where you're

47
00:03:01.318 --> 00:03:04.290
at a company,
this is the reason why we have this.

48
00:03:04.290 --> 00:03:08.155
Say you're at a company where you
provisioned with 2 AZS 6 months

49
00:03:08.155 --> 00:03:11.340
a year later you go, okay,
we actually do want three.

50
00:03:12.460 --> 00:03:17.403
It is incredibly difficult if you don't
have this as a setting to then go in and

51
00:03:17.403 --> 00:03:22.740
add that additional az, because then it
has to calculate those new subnet spaces.

52
00:03:22.740 --> 00:03:24.940
It's got to create all
the resources around it.

53
00:03:26.300 --> 00:03:28.060
It's a lot of work.

54
00:03:28.060 --> 00:03:31.476
So this is another future proofing
thing where it's like, well,

55
00:03:31.476 --> 00:03:33.611
if in the future we
want to add another az,

56
00:03:33.611 --> 00:03:38.130
we want to make the code dynamic enough
to where I can just add it as a value.

57
00:03:38.130 --> 00:03:43.441
Again, it doesn't really look like it
here because we're not at that scale,

58
00:03:43.441 --> 00:03:48.509
but when you have 10,000 instances
in one AZ and you need to replicate

59
00:03:48.509 --> 00:03:53.979
all of that over to another availability
zone, the ability to just add a value and

60
00:03:53.979 --> 00:03:58.805
then see all of those instantly move
over is a lot nicer than going to each

61
00:03:58.805 --> 00:04:03.570
one of them and be like, okay,
AZ3 AZ3 AZ3 over and over and over.

62
00:04:03.570 --> 00:04:04.197
So again,

63
00:04:04.197 --> 00:04:08.601
this is the kind of future proofing
that we're talking about s little bit.

64
00:04:08.601 --> 00:04:09.740
Cidr.
Pretty straightforward.

65
00:04:09.740 --> 00:04:13.650
Again, this is the address space of
the actual network that we want and

66
00:04:13.650 --> 00:04:16.565
then the name of the network as well,
which for now,

67
00:04:16.565 --> 00:04:20.580
the name of the network will
be the environment itself.

68
00:04:20.580 --> 00:04:23.780
So that means that if it's dev,
the VPC will be called dev.

69
00:04:24.820 --> 00:04:27.380
We're going to make an outputs TF file.

70
00:04:29.220 --> 00:04:33.920
And can anyone guess what outputs are?

71
00:04:33.920 --> 00:04:37.840
We said we have variables, but
what would you think an output is?

72
00:04:45.040 --> 00:04:49.760
Something that can get reused from other.

73
00:04:49.760 --> 00:04:50.640
Exactly.

74
00:04:50.640 --> 00:04:52.320
Yep, exactly.

75
00:04:52.320 --> 00:04:52.915
Yeah.
So

76
00:04:52.915 --> 00:04:58.204
if you group together a whole bunch of
Terraform resources together in a module,

77
00:04:58.204 --> 00:05:03.610
you do obscure away all of the values
that come out of those resources.

78
00:05:03.610 --> 00:05:04.890
How do you access it?

79
00:05:04.890 --> 00:05:08.090
If it's in a module,
how do you access the VPC id?

80
00:05:09.130 --> 00:05:15.008
Well, Terraform provides you the ability
to use outputs in modules to then say,

81
00:05:15.008 --> 00:05:20.368
okay, well if there is a security group
that you want or subnets or VPC ID or

82
00:05:20.368 --> 00:05:25.988
name or whatever, it will provide it so
that you can then use this as outputs,

83
00:05:25.988 --> 00:05:31.060
or you can use these as values
in other resources or modules.

84
00:05:31.060 --> 00:05:33.979
So what this is saying Is that
we're going to create a network,

85
00:05:33.979 --> 00:05:35.860
it's going to be highly customizable.

86
00:05:35.860 --> 00:05:40.211
But at the same time, we wanted to
export values that we can use for

87
00:05:40.211 --> 00:05:44.820
creating our database or
creating our clusters or whatever else.

88
00:05:44.820 --> 00:05:48.020
And we don't have to recalculate or
re look up these values.

89
00:05:48.020 --> 00:05:49.060
They're already there.

90
00:05:49.060 --> 00:05:50.860
We can just reuse them in our code.

91
00:05:50.860 --> 00:05:54.810
So outputs are only local, to be clear.

92
00:05:54.810 --> 00:05:58.934
Meaning that this wouldn't mean that
I could use this in a completely

93
00:05:58.934 --> 00:06:00.330
different repo.

94
00:06:00.330 --> 00:06:02.650
Outputs are variables, basically.

95
00:06:02.650 --> 00:06:05.530
So you'd only be able to
use it in the local repo.

96
00:06:05.530 --> 00:06:08.309
Yeah, how do you think about sequencing

97
00:06:08.309 --> 00:06:12.810
resource creation if you need
certain outputs or something?

98
00:06:12.810 --> 00:06:13.850
Is that a concern?

99
00:06:13.850 --> 00:06:15.210
No.
Yeah, it's a great question.

100
00:06:15.210 --> 00:06:19.990
So Terraform does what's called
a directed acyclical graph.

101
00:06:19.990 --> 00:06:24.872
And the idea is that it will take all of
your resources and then using a top sort

102
00:06:24.872 --> 00:06:30.550
algorithm will say, okay, what's the
lowest level resource that nothing needs?

103
00:06:30.550 --> 00:06:33.550
And it slowly builds out
everything from there.

104
00:06:33.550 --> 00:06:36.310
So thank goodness you don't
have to think about that.

105
00:06:36.310 --> 00:06:40.710
However, there are times where
Terraform isn't smart enough.

106
00:06:40.710 --> 00:06:44.350
Maybe you have a resource that
needed to be created, but

107
00:06:44.350 --> 00:06:50.340
it doesn't have a direct link to the thing
that it depends on, which is very common.

108
00:06:50.340 --> 00:06:54.420
Terraform does also provide
you a depends on option.

109
00:06:54.420 --> 00:06:55.020
Really quickly.

110
00:06:55.020 --> 00:06:55.860
I'll show you.

111
00:06:55.860 --> 00:06:59.910
What you can do is if it doesn't or
it's not able to do that,

112
00:06:59.910 --> 00:07:04.446
I can be like this dependson and
then I can tell it like module vpc and

113
00:07:04.446 --> 00:07:09.060
then it will wait until that's
created to then create this.

114
00:07:09.060 --> 00:07:12.416
So by default it should take
care of everything, but

115
00:07:12.416 --> 00:07:17.090
if it doesn't, you have the ability
to add that manually if you need to.

116
00:07:17.090 --> 00:07:18.850
And sometimes you do.

117
00:07:18.850 --> 00:07:21.879
It's nice when it calculates
everything automatically, but

118
00:07:21.879 --> 00:07:25.090
sometimes it's just again,
your infrastructure becomes huge.

119
00:07:25.090 --> 00:07:27.250
You've got thousands of resources.

120
00:07:27.250 --> 00:07:31.330
It's hard to always propagate
that appropriately.

