WEBVTT

1
00:00:00.320 --> 00:00:02.701
&gt;&gt; Erik Reinert: The next thing we're
going to do is we're gonna create

2
00:00:02.701 --> 00:00:03.920
a makefile.

3
00:00:03.920 --> 00:00:07.360
If you've never heard of
a makefile before, like I said,

4
00:00:07.360 --> 00:00:12.560
the makefile is really, in its purest
form, a makefile is meant to make files.

5
00:00:12.560 --> 00:00:13.200
Literally.

6
00:00:14.320 --> 00:00:15.944
As a matter of fact,

7
00:00:15.944 --> 00:00:21.011
in the old school days when you'd
build GCC or other GNU tools,

8
00:00:21.011 --> 00:00:27.410
what's nice about the makefile is
you would say make some binary, but.

9
00:00:27.410 --> 00:00:32.770
And what's cool is that if that file
exists, the makefile won't build it again.

10
00:00:32.770 --> 00:00:35.535
So it has this really neat ability to say,

11
00:00:35.535 --> 00:00:39.490
I'm only gonna make things
that I need to make, right?

12
00:00:39.490 --> 00:00:42.929
However, we want these things
to run all of the time.

13
00:00:42.929 --> 00:00:47.772
So the thing I kind of want you to note is
that we are going to be using a makefile

14
00:00:47.772 --> 00:00:52.130
not to make things, but
to run commands that do things for us.

15
00:00:52.130 --> 00:00:55.778
So we're kind of making our own little
script that makes it easy to work with our

16
00:00:55.778 --> 00:00:57.140
project.

17
00:00:57.140 --> 00:00:59.100
So what I'm going to do first is
I'm going to create a new file.

18
00:00:59.100 --> 00:01:02.260
I'm going to say touch makefile, right?

19
00:01:02.260 --> 00:01:03.860
And then I'm going to open up this file.

20
00:01:04.900 --> 00:01:08.933
Now what we're going to do first is we're
going to add a whole bunch of variables to

21
00:01:08.933 --> 00:01:09.820
the top, right?

22
00:01:09.820 --> 00:01:12.899
And I will explain all of this
really quickly as I add them.

23
00:01:12.899 --> 00:01:15.966
But at the first part,
in the first part of a make file,

24
00:01:15.966 --> 00:01:18.860
you normally have variables of some sort,
right?

25
00:01:18.860 --> 00:01:23.817
So make is its own kind of syntax and
its own kind of like not really language,

26
00:01:23.817 --> 00:01:25.060
but its own way of.

27
00:01:25.060 --> 00:01:28.020
It has its own way of writing
these configuration files.

28
00:01:29.550 --> 00:01:32.995
You might understand what I'm
doing just by looking at it, but

29
00:01:32.995 --> 00:01:36.830
basically I'm telling MAKE that I
have a whole bunch of variables that

30
00:01:36.830 --> 00:01:40.590
I want to use in the commands
that I'm going to be running.

31
00:01:40.590 --> 00:01:42.750
You might look at these and go, wow.

32
00:01:42.750 --> 00:01:43.870
Yeah, that's really nice.

33
00:01:43.870 --> 00:01:46.270
This makes a lot of this a lot easier.

34
00:01:46.270 --> 00:01:49.510
For example,
I have my migration directory now.

35
00:01:49.510 --> 00:01:54.030
Now I don't have to worry about
doing Dash D migrations every time.

36
00:01:54.030 --> 00:01:55.790
It's right there and available to me.

37
00:01:55.790 --> 00:01:59.250
I have my account ID and
my account default region.

38
00:01:59.250 --> 00:02:03.850
And what's nice about that is then
I can form the AWS ECR domain.

39
00:02:03.850 --> 00:02:06.810
I don't even have to worry about
storing it or keeping it anywhere.

40
00:02:06.810 --> 00:02:10.690
It's right there in my makefile,
my git shell.

41
00:02:10.690 --> 00:02:15.172
I want to know the latest version of
the thing that I'm building, the latest

42
00:02:15.172 --> 00:02:20.370
changes So I can actually put that into
a variable and use that as well as I want.

43
00:02:20.370 --> 00:02:24.760
Not only can I just use normal plain text
and use that in this makefile, I can

44
00:02:24.760 --> 00:02:29.220
actually tell make to run a command and
then get the output of that command and

45
00:02:29.220 --> 00:02:32.730
use that as a variable as well,
which makes it really nice.

46
00:02:32.730 --> 00:02:37.432
I'm sure the mind starts ticking
here on how much you could solve and

47
00:02:37.432 --> 00:02:42.382
how much time you could save by just
writing some kind of file like this to

48
00:02:42.382 --> 00:02:44.050
make your life easier.

49
00:02:45.330 --> 00:02:48.290
You'll also see that I
have my build image,

50
00:02:48.290 --> 00:02:52.850
which I will just quickly update so
that it says just the normal one.

51
00:02:53.900 --> 00:02:59.123
I also have a build tag, and this is
a little bit more complex, but the idea

52
00:02:59.123 --> 00:03:04.860
here is it's saying, hey, if build tag
exists, then use the build tag value.

53
00:03:04.860 --> 00:03:07.900
But if it doesn't exist, then use latest.

54
00:03:09.019 --> 00:03:09.940
This can help a lot.

55
00:03:09.940 --> 00:03:14.340
When you're running commands and you want
default values, you want to just say,

56
00:03:14.340 --> 00:03:15.804
I just want to run this, but

57
00:03:15.804 --> 00:03:19.020
then override it when I need to
versus when I don't need to.

58
00:03:20.630 --> 00:03:25.788
I've got a little bit more of a complex
thing here, which is I needed to

59
00:03:25.788 --> 00:03:32.470
get the host name, just the host name,
from the postgres URL that we're using.

60
00:03:32.470 --> 00:03:36.857
I can use some bash foo to do that, but
what's even nicer is I can use that bash

61
00:03:36.857 --> 00:03:40.630
foo and
then put it into an environment variable.

62
00:03:40.630 --> 00:03:45.395
Now I can run commands like Dockerize
to check and connect to the host and

63
00:03:45.395 --> 00:03:49.300
see if it's running before I
actually run my migrations.

64
00:03:51.370 --> 00:03:56.229
Then we've got the same thing here with
the Dockerize URL, where then I say, okay,

65
00:03:56.229 --> 00:04:00.690
well, if I've got the host,
if the host is defined, then do that 5432.

66
00:04:00.690 --> 00:04:04.170
Otherwise use local host 5432.

67
00:04:04.170 --> 00:04:07.876
What's nice about this is
now it means that I can even

68
00:04:07.876 --> 00:04:11.170
target my database as
a parameter when I want.

69
00:04:11.170 --> 00:04:14.710
So if I'm doing local development and I
just want to connect to my local database,

70
00:04:14.710 --> 00:04:16.680
that'll work out of the box.

71
00:04:16.680 --> 00:04:19.108
But say I want to actually
have Dockerize or

72
00:04:19.108 --> 00:04:23.626
something else connect to something
remote, I can use the exact same command,

73
00:04:23.626 --> 00:04:27.480
but then I can just override
the dockerize URL with something else.

74
00:04:27.480 --> 00:04:31.720
You'll see a little bit
more of that in a moment.

75
00:04:34.920 --> 00:04:38.800
The next thing we're going to do is we're
going to add what are called targets.

76
00:04:38.800 --> 00:04:41.109
These are the actual commands or

77
00:04:41.109 --> 00:04:46.080
the sub commands that we want to be
able to do with makefile right now.

78
00:04:46.080 --> 00:04:48.898
If I do make and
I just do build, you'll see.

79
00:04:48.898 --> 00:04:51.370
Well, there's no rule to do that.

80
00:04:51.370 --> 00:04:52.770
Like you don't have any
ability to do that.

81
00:04:52.770 --> 00:04:53.570
But that's what I want.

82
00:04:53.570 --> 00:04:58.257
I want to do something like make build and
that actually run, go build, blah,

83
00:04:58.257 --> 00:04:59.970
blah, blah, blah, blah.

84
00:04:59.970 --> 00:05:00.850
So how do we do that?

85
00:05:00.850 --> 00:05:04.905
Well, what I'll do is I'll
go to the make file and

86
00:05:04.905 --> 00:05:11.130
then underneath this I will just add
a new line and I will say build.

87
00:05:11.130 --> 00:05:14.290
This is where I'm adding my targets.

88
00:05:14.290 --> 00:05:18.622
What I'm doing is I'm telling make, hey,
there is a target or whatever rule,

89
00:05:18.622 --> 00:05:21.090
whatever you want to call it,
called build.

90
00:05:22.210 --> 00:05:24.690
With build,
I want you to run this command.

91
00:05:26.210 --> 00:05:31.490
If I just save this with everything
we have and then I do make build.

92
00:05:33.330 --> 00:05:34.210
There we go.

93
00:05:34.210 --> 00:05:37.010
I now just built my application.

94
00:05:37.010 --> 00:05:43.808
What's cool is because the make file
has what's called the default goal set,

95
00:05:43.808 --> 00:05:49.691
I can also run make, and
it'll run the exact same command, right?

96
00:05:49.691 --> 00:05:55.090
So this is how we could start using
make to make our lives easier, right?

97
00:05:55.090 --> 00:05:56.850
So that's what we're going to do.

98
00:05:56.850 --> 00:05:59.298
So I'm going to delete that file really
quickly, I'm going to open up and

99
00:05:59.298 --> 00:06:00.610
we're going to add some more targets.

100
00:06:00.610 --> 00:06:04.120
So what are some things, like if you
guys could tell me really quickly,

101
00:06:04.120 --> 00:06:07.410
what are some things that we did in
the repo that are command based?

102
00:06:09.150 --> 00:06:10.070
&gt;&gt; Speaker 3: Pushing your image.

103
00:06:10.070 --> 00:06:10.910
&gt;&gt; Erik Reinert: Pushing your image.

104
00:06:10.910 --> 00:06:13.150
Sure.
Okay, what else?

105
00:06:13.150 --> 00:06:15.790
There's one before pushing
that you have to do.

106
00:06:15.790 --> 00:06:16.350
&gt;&gt; Speaker 3: Building.

107
00:06:16.350 --> 00:06:17.811
&gt;&gt; Erik Reinert: Building.
Yep, building it as well.

108
00:06:17.811 --> 00:06:19.568
Yep.

109
00:06:19.568 --> 00:06:21.053
&gt;&gt; Speaker 2: Running the migration.

110
00:06:21.053 --> 00:06:21.859
&gt;&gt; Erik Reinert: Yep, yep.

111
00:06:21.859 --> 00:06:22.750
Running the migration.

112
00:06:22.750 --> 00:06:23.710
Yep.

113
00:06:23.710 --> 00:06:27.790
Everything you just said, we have
to remember the commands of, right?

114
00:06:27.790 --> 00:06:32.558
So my rule of thumb that I like to do
with a makefile is anything you run that

115
00:06:32.558 --> 00:06:36.465
you're gonna run again,
put it in the makefile, make it so

116
00:06:36.465 --> 00:06:40.010
that it's easy to remember and
get back to, right?

117
00:06:40.010 --> 00:06:42.690
So one of you said build image.

118
00:06:42.690 --> 00:06:50.730
So what we're gonna do is we
are going to do build image.

119
00:06:52.170 --> 00:06:57.055
And then what I'm gonna do is just because
I wanna make sure it's consistent,

120
00:06:57.055 --> 00:06:59.210
we're just gonna do this latest.

121
00:07:01.140 --> 00:07:06.020
Now if I have, remember, buildX,
build platform, build image.

122
00:07:06.020 --> 00:07:13.460
We're using our actual value now in the
command, so that if I do make build image.

123
00:07:15.380 --> 00:07:16.740
There we go.

124
00:07:16.740 --> 00:07:19.780
Now I don't have to remember
the entire command.

125
00:07:19.780 --> 00:07:23.060
I could just use make for pretty much
everything that I'm going to be doing.

126
00:07:28.896 --> 00:07:30.990
We don't actually have to wait for that.

127
00:07:30.990 --> 00:07:33.550
Okay, so let's go ahead and
Add the rest of the stuff.

128
00:07:33.550 --> 00:07:38.143
So we've got build image.

129
00:07:38.143 --> 00:07:41.577
We've got even our build
image login command, right?

130
00:07:41.577 --> 00:07:43.310
Like that sucked to have to do, right.

131
00:07:43.310 --> 00:07:44.350
Why do that twice?

132
00:07:44.350 --> 00:07:45.310
Put that in there.

133
00:07:47.070 --> 00:07:51.677
We've got buildimage push, right?

134
00:07:51.677 --> 00:07:54.090
So why even put that in there, right?

135
00:07:54.090 --> 00:07:55.290
No need to do that.

136
00:07:55.290 --> 00:07:56.810
As a matter of fact, I'm sorry.

137
00:07:56.810 --> 00:07:58.570
This should be build tag.

138
00:07:58.570 --> 00:07:59.210
My bad.

139
00:07:59.210 --> 00:08:01.210
This should be build tag.

140
00:08:01.210 --> 00:08:02.650
Why should this be build tag?

141
00:08:02.650 --> 00:08:07.530
Can anyone tell me, instead of latest, why
would I use the build tag variable here?

142
00:08:10.090 --> 00:08:11.210
&gt;&gt; Speaker 3: Might not always be latest.

143
00:08:12.279 --> 00:08:14.048
&gt;&gt; Speaker 3: Might not always be latest.

144
00:08:14.048 --> 00:08:15.210
&gt;&gt; Erik Reinert: Exactly.

145
00:08:15.210 --> 00:08:17.660
And if it is, or if we want to use latest,

146
00:08:17.660 --> 00:08:21.450
we can just use the default
value of build tag.

147
00:08:21.450 --> 00:08:25.930
So if you look at build tag at the top,
it has that weird if statement.

148
00:08:25.930 --> 00:08:30.354
And again, like I said, if the environment
variable build tag is set,

149
00:08:30.354 --> 00:08:35.130
then it will use that, but if it's not,
it will use the latest value.

150
00:08:35.130 --> 00:08:39.613
So because I'd rather it do that be
dynamic instead of me have to do it

151
00:08:39.613 --> 00:08:44.900
manually, I'm just going to tell it to
use the build tag there as well, right?

152
00:08:46.820 --> 00:08:48.980
Can anyone tell me what
this means right here?

153
00:08:51.300 --> 00:08:52.839
Why is build image log in here?

154
00:08:52.839 --> 00:08:53.953
Yep?

155
00:08:53.953 --> 00:08:57.540
&gt;&gt; Speaker 3: This say,
[LAUGH] the make file.

156
00:08:57.540 --> 00:09:04.740
If that one is already done or
hasn't changed, is older, then you don't.

157
00:09:04.740 --> 00:09:05.700
Have to do it again.

158
00:09:05.700 --> 00:09:06.820
&gt;&gt; Erik Reinert: Yeah, exactly.

159
00:09:06.820 --> 00:09:09.340
So it's basically like a prerequisite.

160
00:09:09.340 --> 00:09:12.305
It'll run that command first and
say, okay,

161
00:09:12.305 --> 00:09:15.740
is there anything we need
to do to build image login?

162
00:09:15.740 --> 00:09:16.500
Okay, cool.

163
00:09:16.500 --> 00:09:17.460
We don't need to do that.

164
00:09:17.460 --> 00:09:19.340
Okay, now we'll do build image push.

165
00:09:19.340 --> 00:09:21.100
So it's a way to even sequence.

166
00:09:21.100 --> 00:09:25.022
So if I really wanted to, I could say
like, build image login, Build image and

167
00:09:25.022 --> 00:09:26.300
then build image push.

168
00:09:26.300 --> 00:09:30.412
And then if I ran that command,
it would do all of those things at once.

169
00:09:30.412 --> 00:09:32.140
So I only need to do that.

170
00:09:32.140 --> 00:09:35.998
So if you have like a series of commands
that you're running or you know,

171
00:09:35.998 --> 00:09:39.729
in a specific order and you want to
make sure that order is consistent,

172
00:09:39.729 --> 00:09:43.588
you can add the other targets after
the semicolon or after the colon, and

173
00:09:43.588 --> 00:09:46.182
it will run that one and
then run the next one, and

174
00:09:46.182 --> 00:09:50.080
it'll run the next one and then it'll
finally run the one that you want.

175
00:09:50.080 --> 00:09:53.918
And so because, you know, we're only
pushing to ecr, it makes sense to make

176
00:09:53.918 --> 00:09:57.479
sure that we log in every time to make
sure that it's a successful push.

177
00:09:59.560 --> 00:10:02.920
Okay, so we've got push, we've got pull.

178
00:10:02.920 --> 00:10:04.080
Right?
That's another one.

179
00:10:04.080 --> 00:10:07.400
Like, even though it's like a simple
symbol command, it's still worth doing.

180
00:10:08.660 --> 00:10:09.700
Then we got a big one.

181
00:10:11.140 --> 00:10:13.737
I'm going to go into this one
a little bit more into detail, but

182
00:10:13.737 --> 00:10:15.140
this is a bit of a spoiler.

183
00:10:15.140 --> 00:10:19.780
Can anyone tell me by looking at the code
what is going on with this command?

184
00:10:21.620 --> 00:10:23.140
&gt;&gt; Speaker 3: It's
connecting to the database.

185
00:10:23.140 --> 00:10:24.298
Running migrations.

186
00:10:24.298 --> 00:10:25.980
&gt;&gt; Erik Reinert: Yep, exactly.

187
00:10:25.980 --> 00:10:27.260
It's literally doing that.

188
00:10:27.260 --> 00:10:29.460
It's just doing it in the docker file.

189
00:10:30.820 --> 00:10:32.778
We want reproducibility,

190
00:10:32.778 --> 00:10:37.886
which means that maybe Goose won't
always be in my dev environment, or

191
00:10:37.886 --> 00:10:43.580
maybe Goose won't always just be
readily available in CI, for example.

192
00:10:43.580 --> 00:10:48.380
It actually makes a lot more sense
to run migrations in the container.

193
00:10:48.380 --> 00:10:50.814
Why not?
We can put the migration in the container,

194
00:10:50.814 --> 00:10:54.613
we can put the installer in the container,
and then we can literally even connect to

195
00:10:54.613 --> 00:10:57.180
the same database in the container
if we want to as well.

196
00:10:58.380 --> 00:11:04.700
So, yeah, it can be very valuable to
rerun containers when we need to.

197
00:11:06.070 --> 00:11:07.910
Again, that's exactly
what we're doing here.

198
00:11:07.910 --> 00:11:10.536
We're basically saying, hey,

199
00:11:10.536 --> 00:11:15.990
we want to use the image itself to
run migrations for where we want to.

200
00:11:18.150 --> 00:11:21.989
This is more of a complex example of
when this can be really valuable,

201
00:11:21.989 --> 00:11:25.110
because now I can run migrations
locally very quickly.

202
00:11:26.230 --> 00:11:30.247
We're going to add a build
promote command and

203
00:11:30.247 --> 00:11:35.809
then the last couple of things
we're going to add are just up or,

204
00:11:35.809 --> 00:11:40.753
sorry, down up, which again,
you can see up runs down,

205
00:11:40.753 --> 00:11:44.990
and then we'll add normal
migration commands.

206
00:11:44.990 --> 00:11:49.284
So if we're running the migration outside
of the container, and if we're running

207
00:11:49.284 --> 00:11:53.210
the migration inside of the container,
that's a little bit of a spoiler for

208
00:11:53.210 --> 00:11:56.550
the CICD work we're going to be
adding in the next short moment.

209
00:12:00.780 --> 00:12:05.864
And then we will add run,
which just runs build or

210
00:12:05.864 --> 00:12:12.460
start, which just runs build and
then runs our goals.

211
00:12:12.460 --> 00:12:13.420
Okay, cool.

212
00:12:13.420 --> 00:12:15.580
So I'm gonna save this
command really quickly.

213
00:12:15.580 --> 00:12:18.460
And then, what I want to do is,
I want to make sure everything's working.

214
00:12:18.460 --> 00:12:20.300
So I'm going to run make.

215
00:12:20.300 --> 00:12:22.060
I'm going to run make Build.

216
00:12:22.060 --> 00:12:22.900
I'm going to run make.

217
00:12:22.900 --> 00:12:23.740
Build image.

218
00:12:32.680 --> 00:12:33.400
Give this a second.

219
00:12:34.600 --> 00:12:37.080
Make Down.

220
00:12:37.080 --> 00:12:37.960
Make Up.

221
00:12:39.320 --> 00:12:40.360
Make.

222
00:12:40.360 --> 00:12:40.860
Start.

223
00:12:42.360 --> 00:12:43.080
Cool.

224
00:12:43.080 --> 00:12:44.600
Make Migrate.

225
00:12:45.880 --> 00:12:48.520
Make Migrate.

226
00:12:48.520 --> 00:12:49.901
Status.

227
00:12:49.901 --> 00:12:55.223
Make, migrate-validate.

228
00:12:55.223 --> 00:12:59.715
Oops, see how much faster that is,
[LAUGH] than having to

229
00:12:59.715 --> 00:13:05.050
remember all those commands over and
over and over again.

230
00:13:05.050 --> 00:13:09.223
Think about how much more productive your
developers are just by simply adding that

231
00:13:09.223 --> 00:13:10.330
one file.

232
00:13:10.330 --> 00:13:11.810
You just became more productive.

233
00:13:11.810 --> 00:13:17.900
Where else could we use a makefile
that we may need to add in the future?

234
00:13:17.900 --> 00:13:19.500
Like, where else could we run it?

235
00:13:19.500 --> 00:13:20.580
&gt;&gt; Speaker 3: GitHub actions.

236
00:13:20.580 --> 00:13:22.100
&gt;&gt; Erik Reinert: Exactly right.

237
00:13:22.100 --> 00:13:25.186
How many of you have written
GitHub Actions or other CI pipelines and

238
00:13:25.186 --> 00:13:29.180
stuff and then had to be like, okay, let's
copy these commands and put them in here.

239
00:13:29.180 --> 00:13:30.780
You have consistency now.

240
00:13:30.780 --> 00:13:34.869
You can literally run the exact same
commands that you do to build an image

241
00:13:34.869 --> 00:13:36.620
locally as you do in CI.

242
00:13:36.620 --> 00:13:38.720
So there's no longer a confusion of like,
well,

243
00:13:38.720 --> 00:13:41.180
how's it running in CI versus
how's it running locally?

244
00:13:41.180 --> 00:13:44.317
You literally just run
the exact same commands and

245
00:13:44.317 --> 00:13:46.750
it works right out of the box.

246
00:13:46.750 --> 00:13:51.510
So that's another big reason why I would
use something what's called a task runner.

247
00:13:51.510 --> 00:13:56.145
Now makefile isn't really a task runner or
there's nerds on the Internet who will

248
00:13:56.145 --> 00:14:00.590
argue about it, but they're really called
task runners at the end of the day.

249
00:14:00.590 --> 00:14:03.806
There's another one out there
that I really love called Just,

250
00:14:03.806 --> 00:14:05.550
which is a one I'm a big fan of.

251
00:14:05.550 --> 00:14:08.590
There's tons of them out there,
so you don't have to use make.

252
00:14:08.590 --> 00:14:11.110
If somebody's out there like,
why don't you use this versus that?

253
00:14:11.110 --> 00:14:12.450
Or whatever.

254
00:14:12.450 --> 00:14:13.490
It's up to you, man.

255
00:14:13.490 --> 00:14:17.650
Make is pretty much on every
Linux based operating system.

256
00:14:17.650 --> 00:14:20.370
So it just makes it easier to use Make.

257
00:14:20.370 --> 00:14:22.850
But if you don't like make,
don't use make.

258
00:14:22.850 --> 00:14:24.050
All good, don't worry about it.

