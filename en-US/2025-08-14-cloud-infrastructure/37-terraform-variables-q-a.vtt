WEBVTT

1
00:00:00.480 --> 00:00:02.320
&gt;&gt; Male: So if you go back into that file.

2
00:00:02.320 --> 00:00:02.995
&gt;&gt; Erik Reinert: Which one?

3
00:00:02.995 --> 00:00:04.549
&gt;&gt; Male: The environment
one that we were just in.

4
00:00:04.549 --> 00:00:05.680
&gt;&gt; Erik Reinert: Yep.

5
00:00:05.680 --> 00:00:08.836
&gt;&gt; Male: So like for example, on line 14,

6
00:00:08.836 --> 00:00:14.960
the VAR name that's going to be like,
where is that coming from?

7
00:00:14.960 --> 00:00:19.203
&gt;&gt; Erik Reinert: So
that's coming from the root module.

8
00:00:19.203 --> 00:00:19.820
&gt;&gt; Male: Right.

9
00:00:19.820 --> 00:00:25.003
&gt;&gt; Erik Reinert: Right, so
let me do this really quickly.

10
00:00:25.003 --> 00:00:28.956
Yeah, we’ll just do a quick
little Excel draw here, just so

11
00:00:28.956 --> 00:00:31.056
that we are all on the same page.

12
00:00:31.056 --> 00:00:35.903
So we are using like the term that I
really want you to keep in your mind here

13
00:00:35.903 --> 00:00:39.331
is just composability,
like composing, right?

14
00:00:39.331 --> 00:00:46.149
So we first, at the lowest level,
have our main.tf,

15
00:00:46.149 --> 00:00:50.460
which is our root module, right?

16
00:00:50.460 --> 00:00:52.540
This is like you as a developer,

17
00:00:52.540 --> 00:00:56.400
this is more than likely what
you'll be interacting with.

18
00:00:57.520 --> 00:01:02.813
&gt;&gt; Male: Now,
underneath this we have an environment

19
00:01:02.813 --> 00:01:07.280
directory with a main TF inside of it.

20
00:01:07.280 --> 00:01:09.439
&gt;&gt; Erik Reinert: This is
our environment module.

21
00:01:09.439 --> 00:01:15.920
And what happens is the main TF here
uses this module and imports it.

22
00:01:17.840 --> 00:01:22.395
Then we say, okay, now this has multiple

23
00:01:22.395 --> 00:01:27.750
modules in it that are in
that main.tf file.

24
00:01:27.750 --> 00:01:32.790
So this would be like database,
and then this would be network.

25
00:01:34.390 --> 00:01:39.192
And so what happens is,
in each one of these modules you also

26
00:01:39.192 --> 00:01:42.470
can have a variables.tf file, right?

27
00:01:44.470 --> 00:01:46.721
What we do is we say, okay, well,

28
00:01:46.721 --> 00:01:50.390
what are the variables at
the lowest level that we need?

29
00:01:51.920 --> 00:01:57.440
Then we basically bubble those up to
the top modules and make those variables.

30
00:01:57.440 --> 00:02:02.470
For example, if we go back to the
environment one here, you'll see that I

31
00:02:02.470 --> 00:02:08.080
say availability zones, bastion,
ingress, cidr and name for network.

32
00:02:08.080 --> 00:02:13.440
Then I say security group,
subnets name and VPC name for database.

33
00:02:13.440 --> 00:02:18.610
That's because these settings are only
specific to configuring an environment.

34
00:02:18.610 --> 00:02:19.570
That's it.

35
00:02:19.570 --> 00:02:24.530
They're not specific to just configuring
a database or just configuring a network.

36
00:02:24.530 --> 00:02:28.562
These should be settings that if
you wanted to change which network

37
00:02:28.562 --> 00:02:33.674
the database or which subnet the database
was in, or which VPC this database was in,

38
00:02:33.674 --> 00:02:38.370
you could do that in an environment
level where everything else still stays.

39
00:02:39.890 --> 00:02:43.707
But when we go lower, like, say again,
when we go into an actual database,

40
00:02:43.707 --> 00:02:47.900
that's when you're actually looking at
it from the perspective of the resource.

41
00:02:47.900 --> 00:02:50.460
And like, okay,
well what are the variables for this?

42
00:02:53.340 --> 00:02:58.620
You really would either A hard code these,
or B make variables that have defaults.

43
00:02:59.740 --> 00:03:03.014
And then you say, okay,
here's the things that you care about, and

44
00:03:03.014 --> 00:03:07.260
then here's the other things that you may
want to use or maybe not want to use.

45
00:03:07.260 --> 00:03:11.886
But the main point is to kind of
like look at them as small units

46
00:03:11.886 --> 00:03:15.710
that we're kind of building
on top of each other.

47
00:03:15.710 --> 00:03:20.216
And then if we need a variable that goes
all the way down to that lower unit,

48
00:03:20.216 --> 00:03:23.950
we make sure that a variable is
created in the one above it.

49
00:03:23.950 --> 00:03:27.299
The variables.tf inside the folder,

50
00:03:27.299 --> 00:03:31.969
is that like a convention that
Terraform is aware of and

51
00:03:31.969 --> 00:03:37.249
then can reference those
variables magically type of thing,

52
00:03:37.249 --> 00:03:41.630
or is, guess,
how do we follow the thread on that?

53
00:03:41.630 --> 00:03:42.230
I got you.

54
00:03:42.230 --> 00:03:44.950
So we'll start at the top
here in the main.tf, right?

55
00:03:44.950 --> 00:03:45.750
So, this is the root.

56
00:03:45.750 --> 00:03:47.750
This is current.

57
00:03:47.750 --> 00:03:51.752
If I open up this,
you'll see that I declare source for

58
00:03:51.752 --> 00:03:55.110
my module and I say module environment.

59
00:03:55.110 --> 00:03:58.710
The thing to note here is that
we're looking at a directory.

60
00:03:59.910 --> 00:04:01.670
So every module is a directory.

61
00:04:03.680 --> 00:04:08.815
If the directory has a variables.tf file,
or, I’m sorry, no,

62
00:04:08.815 --> 00:04:14.682
not if it has a variables.tf file, but
if it has a file with variables in it,

63
00:04:14.682 --> 00:04:19.840
it will expose those variables
to the module right here, right?

64
00:04:19.840 --> 00:04:23.920
So to be clear, there's a lot of.

65
00:04:25.200 --> 00:04:29.778
When people started working with
Terraform way back in the day,

66
00:04:29.778 --> 00:04:34.970
these concepts were hard to teach,
which I went through the same thing.

67
00:04:34.970 --> 00:04:36.610
I was like, what?

68
00:04:36.610 --> 00:04:41.446
And so what we did as a community
is we just started naming files

69
00:04:41.446 --> 00:04:44.130
like variables TF and Locals tf.

70
00:04:44.130 --> 00:04:49.050
But the real reality of it is that you
don't have to name any of those files.

71
00:04:49.050 --> 00:04:53.970
That it's just as long as the file
contains an output, right?

72
00:04:53.970 --> 00:04:58.720
And then it reads the entire directory
recursively for any of those things.

73
00:04:58.720 --> 00:05:02.633
So, yeah,
once I went into module environment and

74
00:05:02.633 --> 00:05:06.640
I declared some outputs or
some variables, right?

75
00:05:06.640 --> 00:05:10.951
In this case, variables, that made it so
that when Terraform read that directory,

76
00:05:10.951 --> 00:05:14.720
it just like recursively inside of it,
looked for everything.

77
00:05:14.720 --> 00:05:16.820
It found some outputs and

78
00:05:16.820 --> 00:05:22.720
now they became available as a parameter
when I reuse it other places.

79
00:05:22.720 --> 00:05:26.810
Yeah, so
you could put this all in main tf.

80
00:05:26.810 --> 00:05:27.410
Absolutely.

81
00:05:27.410 --> 00:05:28.970
Just lose track of it all.

82
00:05:28.970 --> 00:05:30.164
Yes, exactly.

83
00:05:30.164 --> 00:05:35.334
Yeah, and what's funny is if you
go to the Terraform modules that

84
00:05:35.334 --> 00:05:40.410
I've been showing you, they do that,
which really is annoying

85
00:05:40.410 --> 00:05:46.995
to me because when I'm trying to decipher
what is what, you see these huge things.

86
00:05:46.995 --> 00:05:49.465
But for example,
if we go here really quick,

87
00:05:49.465 --> 00:05:51.486
you'll see they only have a main tf.

88
00:05:51.486 --> 00:05:54.979
So if we go in here,
everything is in here,

89
00:05:54.979 --> 00:06:00.450
all the resources and
everything are just in the main tf.

90
00:06:00.450 --> 00:06:03.490
That's really also what
I mean by composability.

91
00:06:03.490 --> 00:06:05.890
It's up to you how you want to compose it.

92
00:06:05.890 --> 00:06:08.290
But you can compose it
any way that you want.

93
00:06:09.330 --> 00:06:14.178
The value really of using modules is,
in my opinion,

94
00:06:14.178 --> 00:06:19.891
to abstract away the need to know
what you're provisioning and

95
00:06:19.891 --> 00:06:24.440
only care about the settings
that you need for it.

96
00:06:26.600 --> 00:06:31.850
Another thing I think as well for me is
making standardizations that are reusable,

97
00:06:31.850 --> 00:06:36.575
like naming conventions, things like that,
so that I don't have to worry

98
00:06:36.575 --> 00:06:41.450
about did it get named the right thing or
blah blah, blah, whatever.

99
00:06:41.450 --> 00:06:44.730
I kind of just build those practices
into the module themselves.

