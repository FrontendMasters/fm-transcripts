WEBVTT

1
00:00:00.000 --> 00:00:03.036
&gt;&gt; Erik Reinert: So we've created our
bastion file, we've created our locals

2
00:00:03.036 --> 00:00:07.120
file, our main file, our output,
our security group and our variables file.

3
00:00:07.120 --> 00:00:07.760
Awesome.

4
00:00:07.760 --> 00:00:11.800
Now the last thing we want to do is
we actually want to use this module.

5
00:00:11.800 --> 00:00:13.200
We just created it.

6
00:00:13.200 --> 00:00:15.919
Now I want to provision a whole
bunch of stuff with it.

7
00:00:15.919 --> 00:00:18.604
If I do it in the main
at the root repository,

8
00:00:18.604 --> 00:00:23.467
I'm outside of my staging module, which
means that if I copy this and paste it,

9
00:00:23.467 --> 00:00:26.320
I won't get that network
module inside of it.

10
00:00:26.320 --> 00:00:29.040
I'll have to copy and
paste the network module too.

11
00:00:29.040 --> 00:00:33.780
So what I want to do is I actually want
to do the whole module inside of a module

12
00:00:33.780 --> 00:00:34.710
scenario.

13
00:00:34.710 --> 00:00:40.484
And so what we're going to do is, is we're
actually going to go into environment,

14
00:00:40.484 --> 00:00:42.793
go to that blank main TF file, and

15
00:00:42.793 --> 00:00:48.230
then I'm going to add my first module,
which is my network module.

16
00:00:48.230 --> 00:00:51.865
And so if I reopen this really quickly,
you'll see that I again,

17
00:00:51.865 --> 00:00:53.990
I use module, I say network, right?

18
00:00:53.990 --> 00:00:57.350
The source is directory up network, right.

19
00:00:57.350 --> 00:01:00.270
So I'm literally referencing a directory.

20
00:01:01.310 --> 00:01:06.430
Then you'll see here,
it's the variables that I provided before.

21
00:01:06.430 --> 00:01:10.891
Now again, to go back to your question,
this is hard coded, meaning that again,

22
00:01:10.891 --> 00:01:14.577
if I take that environment,
the higher level environment module,

23
00:01:14.577 --> 00:01:18.777
and I copy and paste it and I create a new
network or I create a new environment,

24
00:01:18.777 --> 00:01:22.750
then those two environments
will have the exact same CIDRs.

25
00:01:22.750 --> 00:01:28.440
But if I wanted to, and again, I don't do
this, but if I wanted to, I could do this.

26
00:01:28.440 --> 00:01:30.840
I could say variable cider.

27
00:01:32.920 --> 00:01:36.930
Okay, thanks for
not helping me at all, copilot.

28
00:01:36.930 --> 00:01:41.014
And then, we'll say like type string.

29
00:01:41.014 --> 00:01:46.722
And then, if I go here, now what I
can do is I can say, var cider here,

30
00:01:46.722 --> 00:01:53.640
and then go up a level to where I have
that whole like high level composability.

31
00:01:53.640 --> 00:01:57.880
And then here I would
say cider equals this.

32
00:01:57.880 --> 00:02:01.640
And then I'd be like, okay,
well I know I use this on staging.

33
00:02:01.640 --> 00:02:09.240
So now when I go to create prod,
right, I want to use 100.

34
00:02:09.240 --> 00:02:11.799
And now I've created
two separate networks.

35
00:02:11.799 --> 00:02:14.520
But the only thing I needed
to change was the cider.

36
00:02:14.520 --> 00:02:17.705
And that's a higher level
value in the environment, so

37
00:02:17.705 --> 00:02:19.480
I can just easily change that.

38
00:02:19.480 --> 00:02:22.830
And then bam,
everything's mapped up and ready to go.

39
00:02:22.830 --> 00:02:26.394
So if you were in a scenario where
you had to do something like that,

40
00:02:26.394 --> 00:02:30.469
that's basically how you would make it
really easy to give multiple CIDRs to

41
00:02:30.469 --> 00:02:31.630
multiple networks.

42
00:02:34.030 --> 00:02:38.270
Let me go ahead and
delete that really quickly though.

43
00:02:40.830 --> 00:02:43.186
10.0.0.16.

44
00:02:43.186 --> 00:02:45.696
That is missing a dot zero.

45
00:02:45.696 --> 00:02:49.550
All right, so we're doing that,
we'll get rid of the cider here.

46
00:02:49.550 --> 00:02:50.350
We don't need that.

47
00:02:52.350 --> 00:02:57.350
Now we have our very first
problem that we're trying to

48
00:02:57.350 --> 00:03:00.910
solve inside of our environment.

49
00:03:00.910 --> 00:03:06.236
Again, this isn't just a module, but
it's a solution to something that we need,

50
00:03:06.236 --> 00:03:09.675
which is an entire network
that should come out of it.

51
00:03:09.675 --> 00:03:12.492
Now, what I'm gonna do is I'm
gonna go to the top level,

52
00:03:12.492 --> 00:03:15.110
I'm gonna do Terraform in
it again because, why?

53
00:03:15.110 --> 00:03:17.550
Because I created a whole
bunch of modules, right?

54
00:03:17.550 --> 00:03:22.339
So once I do Terraform Init, it's going
to go out and then you'll see, look,

55
00:03:22.339 --> 00:03:24.966
now it's even adding more stuff, right?

56
00:03:24.966 --> 00:03:29.067
And it even went out onto the Internet and
made sure that it downloaded anything that

57
00:03:29.067 --> 00:03:33.910
I was using remotely, like any remote
modules or anything like that, right?

58
00:03:33.910 --> 00:03:38.230
Now when I run Terraform Plan, I should
actually have like some resources.

59
00:03:38.230 --> 00:03:39.590
So let's do Terraform Plan.

60
00:03:45.950 --> 00:03:46.586
Okay?
And so

61
00:03:46.586 --> 00:03:51.086
remember how I told you that if I didn't
update that value, it would fail?

62
00:03:51.086 --> 00:03:56.419
Well, it did, so let me quickly grab

63
00:03:56.419 --> 00:04:03.310
the IP address of here and
plan, so there we go.

64
00:04:03.310 --> 00:04:07.900
You can see that Terraform is now saying,
hey, I've got a whole bunch of resources.

65
00:04:07.900 --> 00:04:11.410
And actually for the three or
four modules that we used,

66
00:04:11.410 --> 00:04:15.060
look at how many resources it's creating.

67
00:04:15.060 --> 00:04:20.420
You would have had to do that all
yourself if you hadn't used a module.

68
00:04:20.420 --> 00:04:23.192
So even though we used like three or
four modules,

69
00:04:23.192 --> 00:04:26.833
we're getting 63 resources created,
which is a lot, right?

70
00:04:26.833 --> 00:04:28.572
Like that's actually crazy.

71
00:04:28.572 --> 00:04:32.992
So if I scrolled up to this, which I'm not
gonna scroll up too far because I don't

72
00:04:32.992 --> 00:04:35.140
want to dox the IP address I just added.

73
00:04:36.310 --> 00:04:39.590
But for example, look at this subnet,
the public subnet.

74
00:04:39.590 --> 00:04:45.591
Do you see how it automatically calculated
the address as well as the CIDR to it 21.

75
00:04:45.591 --> 00:04:47.067
So it's 176.21,

76
00:04:47.067 --> 00:04:52.390
that's everything that that subnet module
I was telling you about before is doing.

77
00:04:52.390 --> 00:04:57.150
It's going out looking at my CIDR base of
10.0.0.16 and then saying, okay, cool.

78
00:04:57.150 --> 00:04:59.670
Well, you told me you want 500 IPs.

79
00:04:59.670 --> 00:05:02.750
Great.
Well this is from there to here.

80
00:05:02.750 --> 00:05:05.110
This is the address space that
you can have to calculate.

81
00:05:05.110 --> 00:05:07.110
So again, it's really nice and
it's really easy.

82
00:05:08.450 --> 00:05:10.290
Use something like that to do it.

83
00:05:10.290 --> 00:05:15.170
Now that we have a plan we are actually in
the situation where we're ready to apply.

84
00:05:15.170 --> 00:05:17.795
I'm going to do Terraform Apply.

85
00:05:17.795 --> 00:05:23.689
And off we go, we should start
provisioning, there you go.

86
00:05:23.689 --> 00:05:25.890
We're now provisioning our network.

87
00:05:25.890 --> 00:05:29.469
Now this is going to take a little while,
so if we want we can go ahead and

88
00:05:29.469 --> 00:05:32.050
pause here and
let everything get provisioned.

89
00:05:32.050 --> 00:05:35.130
But basically what you're
seeing now is Terraform.

90
00:05:35.130 --> 00:05:40.410
Go through the process of creating
everything in, in my environment.

91
00:05:40.410 --> 00:05:44.605
And you can see, yeah, it's creating
security groups, it's creating route

92
00:05:44.605 --> 00:05:49.130
tables, it's creating VPCs, it's creating
every subnets, everything we need.

93
00:05:49.130 --> 00:05:53.755
But the thing I want you to note is
look at the naming convention module,

94
00:05:53.755 --> 00:05:57.472
staging module, network module,
vpc awsroutetable.

95
00:05:57.472 --> 00:05:58.330
Da, da, da, da.

96
00:05:59.690 --> 00:06:03.126
Another thing that's really
nice about composing things in

97
00:06:03.126 --> 00:06:06.810
modules is it isolates
the resources really, really well.

98
00:06:06.810 --> 00:06:10.682
And once you get really comfortable with
writing modules, the naming conventions

99
00:06:10.682 --> 00:06:14.410
kind of really show you exactly where and
what they're provisioning.

100
00:06:14.410 --> 00:06:16.424
So in this case,
if we were looking at this and

101
00:06:16.424 --> 00:06:19.180
I was just like looking at it
head on first, I would go, okay,

102
00:06:19.180 --> 00:06:23.210
well we're provisioning, networking
stuff inside of the staging environment.

103
00:06:23.210 --> 00:06:24.570
Awesome.

104
00:06:24.570 --> 00:06:28.294
So that naming convention can
actually be helpful as well,

105
00:06:28.294 --> 00:06:31.350
just knowing where everything is and
what it is.

106
00:06:31.350 --> 00:06:34.542
But yeah,
we have created our first module or

107
00:06:34.542 --> 00:06:37.910
our first like part of
our new infrastructure.

