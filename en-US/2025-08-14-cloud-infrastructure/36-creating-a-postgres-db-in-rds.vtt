WEBVTT

1
00:00:00.400 --> 00:00:04.720
&gt;&gt; Erik Reinert: So we have an environment
and we have a network, right?

2
00:00:04.720 --> 00:00:10.080
So the next thing we need to do is we need
to solve the next logical problem, right?

3
00:00:10.080 --> 00:00:16.320
If we remember our graph or our chart,
we had a database in there.

4
00:00:16.320 --> 00:00:18.280
So why don't we go ahead and
add that next?

5
00:00:18.280 --> 00:00:22.400
So I'm going to say new directory and
I'm going to call it database.

6
00:00:22.400 --> 00:00:28.030
And now I have a database directory or
module that I'm ready to set up.

7
00:00:28.030 --> 00:00:31.790
Then inside of that,
we'll do a main TF file as well.

8
00:00:31.790 --> 00:00:37.510
Again, this is a pretty common pattern of
create a module, create a main TF file.

9
00:00:37.510 --> 00:00:39.470
Create a module, create a main TF file.

10
00:00:40.510 --> 00:00:45.230
Now, I'm creating the main TF file for
our terraform module.

11
00:00:45.230 --> 00:00:50.131
As before, this is a situation
where I have some data or

12
00:00:50.131 --> 00:00:53.710
some parameter that I need to create.

13
00:00:53.710 --> 00:00:58.370
Because before I create my resource,
in this case, it's a password.

14
00:00:58.370 --> 00:01:03.350
And so we already have this convention of
like, well, I know that if I create my SSH

15
00:01:03.350 --> 00:01:07.730
keys, I can put those in SSM and
developers can get access to them.

16
00:01:07.730 --> 00:01:10.410
Why not do the same thing for
the database password as well?

17
00:01:10.410 --> 00:01:12.530
And so
that's exactly what we end up doing here.

18
00:01:12.530 --> 00:01:16.414
We create a random string,
we take that value and

19
00:01:16.414 --> 00:01:21.170
we store it in SSM as a parameter
called database password.

20
00:01:22.550 --> 00:01:26.630
Then underneath that,
we create our actual database itself.

21
00:01:26.630 --> 00:01:31.176
This is really where you would modify
pretty much any specific database

22
00:01:31.176 --> 00:01:33.110
instance setting.

23
00:01:33.110 --> 00:01:37.034
Again, I am using
a module terraform RDS or

24
00:01:37.034 --> 00:01:41.176
the Amazon provider has
direct resources for

25
00:01:41.176 --> 00:01:47.310
managing databases, but
there's multiple ones to do it.

26
00:01:47.310 --> 00:01:52.670
RDS instance or a group, and then a subnet
group and a bunch of other things.

27
00:01:52.670 --> 00:01:56.751
Again, I'm using a module here
simply to solve that problem and

28
00:01:56.751 --> 00:02:00.430
make it easier for
me to create this database.

29
00:02:00.430 --> 00:02:05.066
And again, what's nice is that this module
kind of makes those parameters more

30
00:02:05.066 --> 00:02:09.230
towards what problems I'm trying to solve,
which is why I like those.

31
00:02:09.230 --> 00:02:13.507
If you think about it,
when you use raw terraform resources,

32
00:02:13.507 --> 00:02:17.880
you are solving options that
the cloud provider is giving you.

33
00:02:17.880 --> 00:02:21.245
You might not know what like
a volume parameter is or

34
00:02:21.245 --> 00:02:23.760
some other weird things, right?

35
00:02:23.760 --> 00:02:27.638
But they're abstracting it into a module,
into a way where it just says, like,

36
00:02:27.638 --> 00:02:28.960
do you want a volume or not?

37
00:02:28.960 --> 00:02:29.600
You know what I mean?

38
00:02:29.600 --> 00:02:31.840
It makes it easier to understand.

39
00:02:31.840 --> 00:02:34.301
And so again, that's just another reason,

40
00:02:34.301 --> 00:02:38.400
especially with more complex things
like rds, RDS can be very confusing.

41
00:02:39.600 --> 00:02:44.423
Again, you normally hire somebody
to manage your database and

42
00:02:44.423 --> 00:02:48.427
they would absolutely know
a lot of the parameters or

43
00:02:48.427 --> 00:02:52.240
things like that that
would go into creating it.

44
00:02:52.240 --> 00:02:54.600
In this case,
we're creating a very simple database.

45
00:02:54.600 --> 00:03:01.440
We're creating a 50 gigabyte
storage volume for it.

46
00:03:01.440 --> 00:03:04.592
We're not creating a option group,
we're not creating a parameter group,

47
00:03:04.592 --> 00:03:07.761
we're not creating a subnet group,
we're not creating a monitoring role.

48
00:03:07.761 --> 00:03:09.760
So we're kind of going
very bare bones with this.

49
00:03:10.990 --> 00:03:13.395
We're giving it an existing subnet group,

50
00:03:13.395 --> 00:03:16.190
which is our network that
we've already created.

51
00:03:16.190 --> 00:03:23.058
Remember we created a database subnet and
so we're actually telling the module,

52
00:03:23.058 --> 00:03:27.533
well, no, you can use the VPC
name as the subnet group

53
00:03:27.533 --> 00:03:32.134
because the VPC name is
the environment network name.

54
00:03:32.134 --> 00:03:34.510
We are setting the engine to postgres.

55
00:03:34.510 --> 00:03:37.150
We're using 17.2.

56
00:03:37.150 --> 00:03:41.503
So again, going back to that whole
how do you know your devs locally

57
00:03:41.503 --> 00:03:45.570
are using the same version as
your database in the cloud?

58
00:03:45.570 --> 00:03:50.690
More than likely you would make this
be the standard de facto or default.

59
00:03:50.690 --> 00:03:54.740
And then everything would
follow this version.

60
00:03:54.740 --> 00:03:56.970
We wouldn't reverse it to
where this follows devs.

61
00:03:56.970 --> 00:03:59.337
We would make it so
that this is the standard and

62
00:03:59.337 --> 00:04:01.490
all devs follow what's in production.

63
00:04:01.490 --> 00:04:04.090
So in this case we would make sure
that everything was up to date.

64
00:04:04.090 --> 00:04:07.690
It was 17.2 IAM database
authentication enabled.

65
00:04:07.690 --> 00:04:12.474
So this is kind of a newer thing,
but this basically makes it so

66
00:04:12.474 --> 00:04:18.090
that you can use AWS's IAM security
practices to connect to a database.

67
00:04:18.090 --> 00:04:23.767
Instead of just doing like postgres user
and postgres password, it actually can

68
00:04:23.767 --> 00:04:29.290
set up identities in the database directly
with IAM roles and stuff and users.

69
00:04:29.290 --> 00:04:33.784
And so you, you can actually before,
when we created an IM user, right,

70
00:04:33.784 --> 00:04:37.263
you could actually use that to
connect to the database and

71
00:04:37.263 --> 00:04:40.400
that would integrate with
the database directly.

72
00:04:40.400 --> 00:04:42.280
We're not gonna use that for
now, cause we don't need it.

73
00:04:43.320 --> 00:04:46.520
We also are telling it our
max allocated storage.

74
00:04:46.520 --> 00:04:48.000
So this is actually a database.

75
00:04:48.000 --> 00:04:53.050
And this is really one of the nice
things about this is one of the things

76
00:04:53.050 --> 00:04:57.420
that's really nice about RDS
is that it has scale, right?

77
00:04:57.420 --> 00:05:01.177
So if you're in a scenario where
you're like, well, I only want 50, but

78
00:05:01.177 --> 00:05:04.935
I don't want my database to freeze up
when we hit 50 because I don't want my

79
00:05:04.935 --> 00:05:07.100
production environment to go down.

80
00:05:07.100 --> 00:05:11.198
You can tell it, all right,
I want to do a max allocated of 100, so

81
00:05:11.198 --> 00:05:14.540
it will allocate out at least
double of its normal size.

82
00:05:14.540 --> 00:05:16.220
So you don't have to worry about that.

83
00:05:16.220 --> 00:05:19.500
And then you can put like alerting and
logging and monitoring around it.

84
00:05:19.500 --> 00:05:24.536
So if it hits the 75 area you go,
okay, crap, we might need to increase

85
00:05:24.536 --> 00:05:29.820
the max allocated more or figure out why
you're consuming so much data storage.

86
00:05:32.540 --> 00:05:37.420
By default, Amazon creates
parameter groups and option groups.

87
00:05:38.620 --> 00:05:40.740
They are pretty much
what they say they are.

88
00:05:40.740 --> 00:05:44.980
They are the literal options that
you provide to postgres from like

89
00:05:44.980 --> 00:05:48.780
the configuration file and
the same thing for parameters.

90
00:05:49.860 --> 00:05:54.616
So again, if you're really, really
proficient with postgres to the point

91
00:05:54.616 --> 00:05:59.447
where you know all the, you know,
parameters required for the database that

92
00:05:59.447 --> 00:06:04.380
you need, then you would create your own
parameter group and or option group.

93
00:06:04.380 --> 00:06:06.420
In this case, we don't need it.

94
00:06:06.420 --> 00:06:09.460
Amazon provides defaults for each.

95
00:06:09.460 --> 00:06:10.700
And so that's what we're using.

96
00:06:10.700 --> 00:06:15.432
We're using basically the default
parameter group postgres17 and

97
00:06:15.432 --> 00:06:18.730
the default option group
postgres17 as well.

98
00:06:20.650 --> 00:06:24.010
I'll be fair, this is all pretty standard.

99
00:06:24.010 --> 00:06:27.370
It's tweaked and tuned to run
on their infrastructure as well.

100
00:06:28.810 --> 00:06:30.170
It's always worked for me.

101
00:06:30.170 --> 00:06:34.730
I haven't really needed to jump
too deep into either of those.

102
00:06:34.730 --> 00:06:39.257
The password we are setting is that
random string password result.

103
00:06:39.257 --> 00:06:43.774
So we're actually able to inject it
not just into the SSM parameter above,

104
00:06:43.774 --> 00:06:46.510
but we can even use it
in multiple locations.

105
00:06:46.510 --> 00:06:50.660
Again, that's another nice thing
about HCL is it is programmable,

106
00:06:50.660 --> 00:06:54.447
it is a language and so you can do
the same normal reuse values and

107
00:06:54.447 --> 00:06:56.750
all that kind of stuff with it as well.

108
00:06:56.750 --> 00:06:58.510
This one's a big one.

109
00:06:58.510 --> 00:06:59.750
Publicly accessible.

110
00:06:59.750 --> 00:07:01.070
False.

111
00:07:01.070 --> 00:07:06.163
We are migrating for the complete
purpose of making this offline and

112
00:07:06.163 --> 00:07:10.340
behind a VPC or behind a network firewall.

113
00:07:10.340 --> 00:07:12.279
And so in this case we're telling it no,

114
00:07:12.279 --> 00:07:14.340
we do not want you to
be public accessible.

115
00:07:14.340 --> 00:07:18.736
This is why the bastion host can be very
helpful if you need somebody to be able

116
00:07:18.736 --> 00:07:21.300
to directly access the database.

117
00:07:21.300 --> 00:07:24.539
You know for a fact that they won't be
able to do that unless they go through

118
00:07:24.539 --> 00:07:26.180
the process you want them to.

119
00:07:26.180 --> 00:07:29.097
Which again would be like, you know,
jumping on the bastion host,

120
00:07:29.097 --> 00:07:32.475
maybe having the credentials there that
they need so that they can, you know,

121
00:07:32.475 --> 00:07:33.620
connect to the database.

122
00:07:33.620 --> 00:07:36.460
And maybe those credentials are read only.

123
00:07:36.460 --> 00:07:39.020
You don't have to worry as much
about them breaking anything.

124
00:07:41.420 --> 00:07:43.420
Skip final snapshot.

125
00:07:43.420 --> 00:07:47.180
So this is just a more of a redundancy.

126
00:07:47.180 --> 00:07:52.327
If you delete this database, it can keep
you a final snapshot after it's deleted,

127
00:07:52.327 --> 00:07:55.709
and it'll take that snapshot
before it gets deleted so

128
00:07:55.709 --> 00:07:59.260
that it has a final snapshot of your data.

129
00:07:59.260 --> 00:08:00.380
This is up to you.

130
00:08:00.380 --> 00:08:05.308
I don't normally keep this because I
will also potentially do other kinds

131
00:08:05.308 --> 00:08:08.260
of data backups or other things like that.

132
00:08:08.260 --> 00:08:10.380
So in this case it's up to you.

133
00:08:10.380 --> 00:08:15.261
If you want to enable it, it just means
that when you delete the database,

134
00:08:15.261 --> 00:08:18.820
there's going to be a snapshot
saved of it username.

135
00:08:18.820 --> 00:08:21.460
So the username is actually
pretty straightforward.

136
00:08:21.460 --> 00:08:25.629
It's just the name that
we provide the module and

137
00:08:25.629 --> 00:08:29.807
then any dashes are replaced
with underscores.

138
00:08:29.807 --> 00:08:32.020
And that's just a postgres
kind of standard.

139
00:08:32.020 --> 00:08:35.500
Normally when you create usernames in
postgres they have underscores with them.

140
00:08:36.700 --> 00:08:40.780
In this case it's going to be
based off of the environment.

141
00:08:42.220 --> 00:08:43.900
There's a pretty big reason for that.

142
00:08:45.500 --> 00:08:49.980
If you recall, we're creating environments
and we're putting a database inside of it.

143
00:08:49.980 --> 00:08:54.380
That means that this is a shared database
is really all I'm trying to say.

144
00:08:54.380 --> 00:08:56.540
This is an environment database.

145
00:08:56.540 --> 00:08:59.580
That means that multiple services
will connect to this database.

146
00:08:59.580 --> 00:09:03.800
You'll create multiple,
multiple databases inside of the instance.

147
00:09:05.000 --> 00:09:08.520
But the reason why we're doing this
is because we want to save money.

148
00:09:09.880 --> 00:09:13.295
We could provision a database
per service if we wanted to and

149
00:09:13.295 --> 00:09:15.560
have more of a microservice approach.

150
00:09:16.680 --> 00:09:23.080
But this is also, like we're balancing
between saving money and also scaling out.

151
00:09:23.080 --> 00:09:27.080
A lot of RDS instances just
become a lot more money.

152
00:09:27.080 --> 00:09:31.720
So I don't necessarily recommend
it in non production environments.

153
00:09:31.720 --> 00:09:36.508
So at my company we have a shared
database per environment that we

154
00:09:36.508 --> 00:09:40.360
then can control access to and everything.

155
00:09:40.360 --> 00:09:45.160
And then in production we scale out to
where every service has its own database.

156
00:09:45.160 --> 00:09:50.685
But in my mind it's just a better
cost-effective way of handling for

157
00:09:50.685 --> 00:09:55.733
if you don't need to have a isolated
database per service, but

158
00:09:55.733 --> 00:10:01.120
if you wanted to, you could last
thing VPC Security Group IDs.

159
00:10:01.120 --> 00:10:06.200
So as we said before, we are traffic
shaping by security group, right?

160
00:10:06.200 --> 00:10:10.705
And so in this case we would provide it
the security groups that it should be

161
00:10:10.705 --> 00:10:12.959
attached to for access.

162
00:10:12.959 --> 00:10:17.738
We gave in the network module,
if you remember, we created a security

163
00:10:17.738 --> 00:10:22.440
group called DB and then we allowed
the private network access to it.

164
00:10:22.440 --> 00:10:27.102
So in this case the only security group
that we need to give it is the database

165
00:10:27.102 --> 00:10:29.914
security group because
we don't really care

166
00:10:29.914 --> 00:10:33.310
about it needing to access anything else.

167
00:10:33.310 --> 00:10:37.710
And we don't want to necessarily give
it the entire private security group.

168
00:10:37.710 --> 00:10:40.470
We just want to make it so
private can access it.

169
00:10:40.470 --> 00:10:41.870
That's it.

170
00:10:41.870 --> 00:10:45.928
That's why we're making it use
its database security group and

171
00:10:45.928 --> 00:10:51.320
then just Making a firewall rule from
private to database allows access.

172
00:10:51.320 --> 00:10:53.640
So only need one security group there.

173
00:10:53.640 --> 00:10:56.435
Cool.
Okay, so that is the instance or

174
00:10:56.435 --> 00:10:58.360
the main RDS module.

175
00:10:58.360 --> 00:11:00.400
There's just a couple of
other things we're gonna use.

176
00:11:00.400 --> 00:11:05.000
The first one is going to be
the variables or variables.

177
00:11:07.880 --> 00:11:12.280
Again, we are picking variables that
make it so that this is dynamic.

178
00:11:12.280 --> 00:11:14.041
Right?
So if I take this module and

179
00:11:14.041 --> 00:11:17.880
I use it somewhere else,
I should be able to use it pretty easily.

180
00:11:17.880 --> 00:11:20.616
Right.
And so the biggest things that we really

181
00:11:20.616 --> 00:11:25.296
care about in this module as a variable
are the name, the security groups that

182
00:11:25.296 --> 00:11:30.192
it's connecting or that it's using to
connect with the subnets that it's using

183
00:11:30.192 --> 00:11:35.700
to connect to, and then the VPC name
that it's going to be provisioned in.

184
00:11:35.700 --> 00:11:39.269
What's again nice about this is this
should mean that even if I use this in

185
00:11:39.269 --> 00:11:42.782
a completely other project,
this module completely somewhere else,

186
00:11:42.782 --> 00:11:46.938
it shouldn't have opinions to the point
where I can't just easily do that without,

187
00:11:46.938 --> 00:11:48.990
without a couple of options.

188
00:11:48.990 --> 00:11:53.127
And so these are like a good example of
that where if I wanted to use this module

189
00:11:53.127 --> 00:11:57.072
in a completely separate project,
in a completely separate whatever,

190
00:11:57.072 --> 00:11:59.550
I should be able to
without too much trouble.

191
00:12:01.870 --> 00:12:02.746
Cool.
Okay, so

192
00:12:02.746 --> 00:12:05.230
database is actually
really straightforward.

193
00:12:05.230 --> 00:12:07.358
It's just those two files and

194
00:12:07.358 --> 00:12:12.390
then we go back into our environment
directory and we add a new module.

195
00:12:12.390 --> 00:12:18.550
So again, before I was in the database
directory, database main variables.

196
00:12:18.550 --> 00:12:21.818
Now I'm going out, I'm going into
the environment directory and

197
00:12:21.818 --> 00:12:23.870
then I'm going to the main file in there.

198
00:12:23.870 --> 00:12:28.270
So when you're composing modules, there
is definitely a lot of hopping around.

199
00:12:28.270 --> 00:12:31.261
Like, okay, I'm gonna go into this module,
do this, and I'm gonna go over here and

200
00:12:31.261 --> 00:12:33.750
do this, and
I'm gonna import this module from here.

201
00:12:33.750 --> 00:12:37.052
So yeah, I just want to note that
we will be hopping around a bit and

202
00:12:37.052 --> 00:12:41.510
if you ever feel like you're lost or
anything like that, you can use the.

203
00:12:41.510 --> 00:12:43.310
Whenever I'm in here,

204
00:12:43.310 --> 00:12:48.350
you can use the path at the top to
see where I am, or you can just ask.

205
00:12:48.350 --> 00:12:50.550
Feel free to ask as well.

206
00:12:50.550 --> 00:12:54.207
I'm going to go to
the environment main TF and

207
00:12:54.207 --> 00:12:59.590
now what I've done is I've
added a module for my database.

208
00:12:59.590 --> 00:13:01.750
This is starting to look
like an actual environment.

209
00:13:01.750 --> 00:13:07.054
Now what's nice or what I like about it at
least is that when you get to this layer,

210
00:13:07.054 --> 00:13:11.590
when you're at the environment module,
it's pretty easy to read.

211
00:13:12.790 --> 00:13:14.270
Like, it's actually not that difficult.

212
00:13:14.270 --> 00:13:17.830
Okay, I get a network, I get a database.

213
00:13:17.830 --> 00:13:19.310
These are the settings for
the network, right?

214
00:13:19.310 --> 00:13:21.670
These are the settings for the database.

215
00:13:21.670 --> 00:13:26.150
It's not as granular as
the modules underneath it.

216
00:13:26.150 --> 00:13:28.070
So that makes it a lot easier.

217
00:13:28.070 --> 00:13:30.094
Again, when you're in
those scenarios of like,

218
00:13:30.094 --> 00:13:31.590
can we just get a whole new environment?

219
00:13:32.950 --> 00:13:37.618
Yeah, actually, you can, because it's
a lot easier to configure because we've

220
00:13:37.618 --> 00:13:41.569
abstracted away all of those
challenges and those problems, right?

221
00:13:41.569 --> 00:13:46.089
And so, yeah, now as an organization,
we don't just have an environment, but

222
00:13:46.089 --> 00:13:48.820
we have an easy way to create databases,
right?

223
00:13:48.820 --> 00:13:50.500
We have an easy way to create networks.

224
00:13:50.500 --> 00:13:55.254
So the more that we invest into this,
the more it should pay off and help us,

225
00:13:55.254 --> 00:13:55.940
you know.

