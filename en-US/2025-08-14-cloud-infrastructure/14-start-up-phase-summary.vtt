WEBVTT

1
00:00:00.240 --> 00:00:02.720
&gt;&gt; Erik Reinert: Through
what did we change?

2
00:00:04.000 --> 00:00:05.480
We added a docker file.

3
00:00:05.480 --> 00:00:08.320
Like I said, that's literally all we did.

4
00:00:08.320 --> 00:00:11.463
We made sure that the application ran,
we tested it, but

5
00:00:11.463 --> 00:00:14.800
we only really added
a docker file as our change.

6
00:00:14.800 --> 00:00:17.440
Everything else we did was in the cloud.

7
00:00:17.440 --> 00:00:20.780
Everything else we did through
navigating through the ui,

8
00:00:20.780 --> 00:00:23.662
clicking stuff around,
we did it all in the cloud.

9
00:00:23.662 --> 00:00:28.150
Again, a note here is that
this change made us heavily

10
00:00:28.150 --> 00:00:32.150
dependent on vendor based solutions,
right?

11
00:00:32.150 --> 00:00:35.909
We're using supabase for
our database, we're using Amazon for

12
00:00:35.909 --> 00:00:39.270
the parameter store and
ECR and blah blah, blah, right?

13
00:00:39.270 --> 00:00:42.270
So we're definitely like heavily
vendor locked in right now.

14
00:00:42.270 --> 00:00:45.390
But again, we're also solving
the problems that we're trying to solve.

15
00:00:45.390 --> 00:00:46.270
What are the pros?

16
00:00:46.270 --> 00:00:49.270
Well, for starters,
this is a turnkey environment.

17
00:00:49.270 --> 00:00:52.710
It really is in pretty much
every aspect of the word.

18
00:00:52.710 --> 00:00:55.350
Sure, you had to set some stuff up, but.

19
00:00:55.350 --> 00:00:59.190
But the reality of it is 99% of the work
you just did was in the browser.

20
00:00:59.190 --> 00:01:02.950
Clicking around, copying things,
configuring things.

21
00:01:02.950 --> 00:01:05.819
You didn't have to learn Terraform or

22
00:01:05.819 --> 00:01:10.390
have more blockers to get you
to where you were trying to be.

23
00:01:10.390 --> 00:01:13.030
You basically just did all
of the work in the browser.

24
00:01:15.430 --> 00:01:17.350
They're easy deployments.

25
00:01:17.350 --> 00:01:19.510
You guys got within.

26
00:01:20.790 --> 00:01:23.457
Once you got it successfully working,
that is,

27
00:01:23.457 --> 00:01:27.165
you got really comfortable very
quickly with managing it going in,

28
00:01:27.165 --> 00:01:31.650
in making a parameter change, save and
deploy, push an image, same thing.

29
00:01:31.650 --> 00:01:35.890
If you want to, I would recommend
making a change to the docker file.

30
00:01:35.890 --> 00:01:38.690
Make a build and push and
then see if it triggers a build.

31
00:01:38.690 --> 00:01:42.610
You should, you should see it
trigger a deployment to production.

32
00:01:42.610 --> 00:01:46.414
Meaning that basically you'll
automatically update your deployment or

33
00:01:46.414 --> 00:01:48.570
your service whenever you push an image.

34
00:01:48.570 --> 00:01:51.810
So whenever you push that latest tag,
you'll get a deployment triggered.

35
00:01:51.810 --> 00:01:54.684
And then whenever you want to
make a configuration change,

36
00:01:54.684 --> 00:01:57.729
you'll just go to ssm,
update that and then click, you know,

37
00:01:57.729 --> 00:02:00.330
rebuild basically and
it'll deploy those changes.

38
00:02:00.330 --> 00:02:04.139
So you have the ability to not just
get a turnkey environment, but

39
00:02:04.139 --> 00:02:07.890
you have an ability to easily update it,
to keep moving with it.

40
00:02:07.890 --> 00:02:11.770
And again, if you're a single person,
you know, one person team.

41
00:02:11.770 --> 00:02:12.410
That's nice.

42
00:02:12.410 --> 00:02:15.508
Like, that's really, you know, I'm sure
you can kind of see the process here and

43
00:02:15.508 --> 00:02:16.450
how you write some code.

44
00:02:16.450 --> 00:02:17.010
Write some code.

45
00:02:17.010 --> 00:02:18.930
Okay.
Deploy, so forth and so on.

46
00:02:18.930 --> 00:02:19.430
Yeah.

47
00:02:20.650 --> 00:02:24.459
&gt;&gt; Speaker 2: So how would you set
up where you would have like a,

48
00:02:24.459 --> 00:02:29.089
let's say production branch in GitHub and
when you commit or

49
00:02:29.089 --> 00:02:33.810
like do a pull request,
then it kicks off this deployment.

50
00:02:33.810 --> 00:02:34.770
&gt;&gt; Erik Reinert: Yeah.

51
00:02:34.770 --> 00:02:37.690
So if you were to say, all right,
I just want to stay in this phase.

52
00:02:37.690 --> 00:02:39.090
I don't want to go to other phases.

53
00:02:39.090 --> 00:02:42.450
Because to be fair,
we do that in another phase, right?

54
00:02:42.450 --> 00:02:48.690
What I would say is you would just create
new SSM parameters for that new service.

55
00:02:48.690 --> 00:02:52.499
You would create a new database
in Supabase for the database, and

56
00:02:52.499 --> 00:02:57.139
then you'd create a new app, but you would
tell it to track a different branch or

57
00:02:57.139 --> 00:02:58.670
a different tag.

58
00:02:58.670 --> 00:03:03.710
So latest would go to production and
then dev would go to your other one.

59
00:03:05.630 --> 00:03:07.150
The real separator for

60
00:03:07.150 --> 00:03:12.350
each environment in this scenario
is just the little image tag.

61
00:03:12.350 --> 00:03:16.231
You can tell if we go back
here just to show visually,

62
00:03:16.231 --> 00:03:19.950
you could see that my source
is latest right here.

63
00:03:21.230 --> 00:03:25.427
So if I told another app
to run off of dev, and

64
00:03:25.427 --> 00:03:30.419
then when I merge to dev,
I only push to that dev tag,

65
00:03:30.419 --> 00:03:35.870
then I have releases to dev
every time I merge to main.

66
00:03:35.870 --> 00:03:39.071
And then if I just create
a new branch called prod, and

67
00:03:39.071 --> 00:03:42.629
then tell it to build just
the latest image and push to that,

68
00:03:42.629 --> 00:03:46.130
then if I merge into Prod,
I have deployments to produce.

69
00:03:47.160 --> 00:03:48.120
Does that make sense?

70
00:03:48.120 --> 00:03:48.920
Yeah.

71
00:03:48.920 --> 00:03:49.880
And then, there you go.

72
00:03:49.880 --> 00:03:51.080
All you need is.

73
00:03:51.080 --> 00:03:53.998
Yeah.
&gt;&gt; Speaker 2: And then in this scenario,

74
00:03:53.998 --> 00:03:58.484
you're charged based on, like CPU utilize.

75
00:03:58.484 --> 00:03:59.032
&gt;&gt; Erik Reinert: Yeah.

76
00:03:59.032 --> 00:04:02.600
&gt;&gt; Speaker 2: What is the actual
billing model under the hood of this?

77
00:04:02.600 --> 00:04:06.128
&gt;&gt; Erik Reinert: So what's really
cool about this is like it kind of

78
00:04:06.128 --> 00:04:09.480
incorporates everything into one, right?

79
00:04:09.480 --> 00:04:12.090
So you're paying for the CPU cost, right.

80
00:04:12.090 --> 00:04:15.277
You'll be paying for
a little bit of bandwidth, but

81
00:04:15.277 --> 00:04:19.418
more than likely the main overhead
here would probably just be CPU.

82
00:04:19.418 --> 00:04:22.591
Yeah.
And you're paying for that,

83
00:04:22.591 --> 00:04:26.450
like you would a like per minute model.

84
00:04:26.450 --> 00:04:29.048
So it's like a very small,
like pennies per minute,

85
00:04:29.048 --> 00:04:30.970
basically model that I would imagine.

86
00:04:30.970 --> 00:04:32.290
I don't know the exact cost.

87
00:04:32.290 --> 00:04:37.250
Like, I can do this AWS calc app runner.

88
00:04:40.790 --> 00:04:41.390
So let's see here.

89
00:04:41.390 --> 00:04:42.310
If we go here.

90
00:04:42.310 --> 00:04:45.127
And if you're curious about like costs and
stuff like that,

91
00:04:45.127 --> 00:04:46.950
you can use this as a way to do it.

92
00:04:46.950 --> 00:04:47.630
So there you go.

93
00:04:47.630 --> 00:04:50.070
App runner configure.

94
00:04:51.350 --> 00:04:56.030
So we said 0.255 auto scaling concurrency.

95
00:04:56.030 --> 00:05:02.310
We set 200 minimum enter
numbers of hours per day.

96
00:05:04.640 --> 00:05:06.440
I would say, maybe like 8.

97
00:05:06.440 --> 00:05:09.680
I guess, if you've got like a full
day's worth of traffic, right?

98
00:05:09.680 --> 00:05:12.240
Probably you would not be
at 100 requests per second.

99
00:05:12.240 --> 00:05:18.480
You'd probably be like 10, requests
per during peak off, like one, right?

100
00:05:18.480 --> 00:05:19.564
So there you go.

101
00:05:19.564 --> 00:05:24.513
It'd probably be around 12 to
$14 to host it a month, right?

102
00:05:24.513 --> 00:05:26.920
It'll auto-scale.

103
00:05:26.920 --> 00:05:28.816
It'll self-heal, right?

104
00:05:28.816 --> 00:05:33.371
You have a complete deployment process,
right, for like 12 bucks a month.

105
00:05:33.371 --> 00:05:36.340
&gt;&gt; Speaker 3: [COUGH] This doesn't
include the database, right?

106
00:05:36.340 --> 00:05:41.020
&gt;&gt; Erik Reinert: No,
but it's free for now.

107
00:05:41.020 --> 00:05:41.872
It's free, right?

108
00:05:41.872 --> 00:05:45.780
Lean on those free plans
as much as you can, right?

109
00:05:45.780 --> 00:05:47.260
And so that's what I would recommend.

110
00:05:47.260 --> 00:05:50.940
You know, it's like if Supabase lets
you create two free databases, do it.

111
00:05:50.940 --> 00:05:51.440
Right.

112
00:05:52.740 --> 00:05:57.150
Actually, thank you for asking that,
because you don't get that with rds.

113
00:05:57.150 --> 00:06:01.230
With rds, you're going to pay for
the database right out of the box.

114
00:06:01.230 --> 00:06:03.710
That's another reason why
I took this approach.

115
00:06:03.710 --> 00:06:06.230
Again, Mark,
I remember you asking me why Supabase?

116
00:06:06.230 --> 00:06:07.790
That's exactly why.

117
00:06:07.790 --> 00:06:10.412
Because in this deployment, in this model,

118
00:06:10.412 --> 00:06:13.870
I can literally start from zero
free plan across the board.

119
00:06:15.310 --> 00:06:17.230
This would be a part of it.

120
00:06:17.230 --> 00:06:18.990
You do get free plan stuff.

121
00:06:18.990 --> 00:06:23.670
I would imagine that you'll
probably get some of this off even.

122
00:06:23.670 --> 00:06:25.199
But yeah, realistically,

123
00:06:25.199 --> 00:06:29.030
your database is free until you get
to a point where you need more.

124
00:06:29.030 --> 00:06:33.421
And then your application running in
the cloud would be like 12 bucks a month,

125
00:06:33.421 --> 00:06:34.150
basically.

126
00:06:35.190 --> 00:06:39.889
Again, it's not just that you have
an application running in the cloud, but

127
00:06:39.889 --> 00:06:43.576
you have an application in
the cloud with logs and metrics and

128
00:06:43.576 --> 00:06:47.430
scalability and SSL and
everything else underneath the hood.

129
00:06:49.460 --> 00:06:51.660
That's the turnkey environment you get,
right?

130
00:06:51.660 --> 00:06:56.180
That's the turnkey environment you get
if you're in the startup scenario.

131
00:06:56.180 --> 00:06:58.020
Again, it's horizontally scalable.

132
00:06:58.020 --> 00:06:58.860
We told it.

133
00:06:58.860 --> 00:07:01.540
Hey, these are the requests per
second I want you to track.

134
00:07:01.540 --> 00:07:03.020
And this is when I want you to scale.

135
00:07:03.020 --> 00:07:06.048
So you have complete control over
how often you want to scale,

136
00:07:06.048 --> 00:07:07.940
when you want to scale.

137
00:07:07.940 --> 00:07:10.420
And it has basic monitoring into it.

138
00:07:10.420 --> 00:07:11.780
Is it crazy monitoring?

139
00:07:11.780 --> 00:07:14.420
No, but it'll get you through the door.

140
00:07:14.420 --> 00:07:15.700
It'll at least help.

141
00:07:15.700 --> 00:07:17.820
Cool.

142
00:07:17.820 --> 00:07:18.900
Awesome.
So, yeah.

143
00:07:18.900 --> 00:07:20.980
So, you know, what are the cons to this?

144
00:07:20.980 --> 00:07:23.620
There, There are quite a bit.

145
00:07:23.620 --> 00:07:25.180
You know, there are some downsides.

146
00:07:25.180 --> 00:07:26.900
As always, the.

147
00:07:26.900 --> 00:07:31.140
The four cons that I tried to note or
note out here are no reproducibility.

148
00:07:31.140 --> 00:07:33.315
Again, we all had to
have like notepads open.

149
00:07:33.315 --> 00:07:36.082
That's what I meant by
the pain was literal.

150
00:07:36.082 --> 00:07:38.860
[LAUGH] That's why I meant by like,
I literally.

151
00:07:38.860 --> 00:07:42.559
I knew it was going to be slightly
annoying and a little bit more cumbersome

152
00:07:42.559 --> 00:07:46.735
to do this part, but because I can't just
give you code and say, run it right, this

153
00:07:46.735 --> 00:07:50.700
is you going through the process of having
to create this and do this manually.

154
00:07:50.700 --> 00:07:55.397
And the reality of it is you don't really
have a lot of reproducibility with that,

155
00:07:55.397 --> 00:07:58.052
you're gonna have to
remember everything and

156
00:07:58.052 --> 00:08:02.100
redo these things by memory
rather than having code to do it.

157
00:08:02.100 --> 00:08:04.820
Not a lot of extensibility either.

158
00:08:04.820 --> 00:08:09.436
Now, granted, we are an Amazon, so
if we decided we wanted our app to

159
00:08:09.436 --> 00:08:13.270
start using S3 or SQS or
all that other stuff, we can.

160
00:08:13.270 --> 00:08:13.910
That's awesome.

161
00:08:13.910 --> 00:08:15.990
We're kind of out of the box with that.

162
00:08:15.990 --> 00:08:20.138
But the actual way that the service
is deployed and how that's managed,

163
00:08:20.138 --> 00:08:23.190
we don't really have
a lot of control around.

164
00:08:23.190 --> 00:08:24.870
App Runner takes care of all of that.

165
00:08:24.870 --> 00:08:30.630
We can't change how the logs show or
things like that.

166
00:08:30.630 --> 00:08:34.230
There's no real extensibility or
things that we can change there.

167
00:08:35.590 --> 00:08:37.070
I said no automation.

168
00:08:37.070 --> 00:08:39.098
But what I mean by that is just, again,

169
00:08:39.098 --> 00:08:42.640
there's nothing here that's
helping you do this process.

170
00:08:42.640 --> 00:08:46.294
You're pretty much doing it manually, you
know, and that means that when you want to

171
00:08:46.294 --> 00:08:49.320
push an image, you're going to
build that image yourself manually.

172
00:08:49.320 --> 00:08:51.120
You're going to push that
image yourself manually.

173
00:08:51.120 --> 00:08:55.120
There's no like CI process
involved in this solution.

174
00:08:55.120 --> 00:08:56.869
Right.
But the expectation here is,

175
00:08:56.869 --> 00:08:59.703
is that you would be working as
like a single person, again,

176
00:08:59.703 --> 00:09:01.040
you know, by yourself.

177
00:09:01.040 --> 00:09:01.680
So you don't.

178
00:09:01.680 --> 00:09:04.000
You may not really need any of that stuff.

179
00:09:04.000 --> 00:09:04.720
Right.

180
00:09:04.720 --> 00:09:09.300
And then again, multiple vendor lock ins,
aws, supabase, right?

181
00:09:09.300 --> 00:09:10.660
You're kind of really putting yourself.

182
00:09:10.660 --> 00:09:15.420
And I would say this, when you do multiple
vendor lock ins versus singular lock in,

183
00:09:15.420 --> 00:09:17.940
it becomes even more challenging, right?

184
00:09:17.940 --> 00:09:21.904
Because then you got to figure out why
Amazon isn't talking to Supabase and blah,

185
00:09:21.904 --> 00:09:25.639
blah, blah, and you know, versus just
having everything in your own VPC and

186
00:09:25.639 --> 00:09:29.604
stuff like that, you have, you know,
a little bit more of like, leeway of like,

187
00:09:29.604 --> 00:09:33.396
okay, well, at least no it's in my network
so I don't have to worry about it,

188
00:09:33.396 --> 00:09:34.980
you know, and stuff like that.

189
00:09:37.060 --> 00:09:38.140
Cool.
Okay.

190
00:09:38.140 --> 00:09:39.940
So we got through the first phase.

191
00:09:41.860 --> 00:09:44.260
We got through the first phase.

192
00:09:44.260 --> 00:09:46.100
That was the startup phase.

193
00:09:46.100 --> 00:09:47.612
And if anything, again,

194
00:09:47.612 --> 00:09:52.180
it was really meant to kind of exemplify
what it feels like to be in that phase.

195
00:09:52.180 --> 00:09:56.407
Like really dirty, just moving,
trying to get stuff up and running,

196
00:09:56.407 --> 00:09:57.780
debugging on the fly.

197
00:09:59.300 --> 00:10:02.900
It's funny, somebody said in chat this is
the DevOps experience, but yeah, you did.

198
00:10:02.900 --> 00:10:05.700
You really got the feeling of
a startup phase environment.

199
00:10:05.700 --> 00:10:07.760
That is it showing to people.

200
00:10:07.760 --> 00:10:08.360
I don't know.

201
00:10:08.360 --> 00:10:09.580
Let me debug.
Okay, cool.

202
00:10:09.580 --> 00:10:12.645
Green, all good to go, whatever.

203
00:10:12.645 --> 00:10:17.336
And you could kind of see why
you wouldn't be able to go

204
00:10:17.336 --> 00:10:20.320
fast in that scenario, right?

205
00:10:20.320 --> 00:10:23.953
Like, if you have to constantly be
clicking things yourself manually and

206
00:10:23.953 --> 00:10:27.360
doing all this other stuff,
you wouldn't really be able to do that.

207
00:10:27.360 --> 00:10:30.160
And so
that's what will impede your growth.

208
00:10:30.160 --> 00:10:34.479
Like, that's what will stop you from being
able to grow as a software company or

209
00:10:34.479 --> 00:10:37.790
application, whatever
you're trying to grow or.

210
00:10:37.790 --> 00:10:41.324
And so that's why, again,
if you think about what we just did,

211
00:10:41.324 --> 00:10:45.644
think about running that for a solid
month, you'd be able to run everything,

212
00:10:45.644 --> 00:10:50.359
you'd be able to deploy everything, but
the moment you wanted to change something,

213
00:10:50.359 --> 00:10:52.430
that would immediately slow down.

214
00:10:52.430 --> 00:10:57.070
So it really only solves the use case of
exactly the environment that we're in.

