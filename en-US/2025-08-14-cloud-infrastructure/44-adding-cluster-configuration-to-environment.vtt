WEBVTT

1
00:00:00.160 --> 00:00:02.225
&gt;&gt; Erik Reinert: Cool.
Okay, so I have my distribution,

2
00:00:02.225 --> 00:00:04.960
I've explained that for you guys.

3
00:00:04.960 --> 00:00:07.800
Let's go ahead and
add the normal suspects.

4
00:00:07.800 --> 00:00:10.640
So we're gonna add our variables.tf,
right?

5
00:00:10.640 --> 00:00:13.920
We said that these are pretty
much in every one of the modules.

6
00:00:13.920 --> 00:00:17.049
Again, you can see here the capacity
provider that we create,

7
00:00:17.049 --> 00:00:21.040
the name of the module, the security
groups, the subnets and the VPC id.

8
00:00:21.040 --> 00:00:23.440
This is all related to creating a cluster.

9
00:00:23.440 --> 00:00:27.031
But again, if I wanted to take this
cluster and use it in other automation,

10
00:00:27.031 --> 00:00:30.800
these variables shouldn't be enough or
should be enough to be able to do that.

11
00:00:32.240 --> 00:00:37.480
Then I'm going to do outputs TF and
I'm going to add my outputs.

12
00:00:37.480 --> 00:00:41.883
And as we said before, these are things
that other resources can use, which more

13
00:00:41.883 --> 00:00:46.400
than likely means that these may be
things that the services end up using.

14
00:00:46.400 --> 00:00:47.680
Right?

15
00:00:47.680 --> 00:00:49.600
So we're going to go ahead and
output those.

16
00:00:50.800 --> 00:00:55.892
And then the last thing we need to do
is we need to go to main or, I'm sorry,

17
00:00:55.892 --> 00:01:00.246
we need to go to the main inside
of the environment directory and

18
00:01:00.246 --> 00:01:04.960
we're going to add our cluster
configuration to our environment.

19
00:01:07.040 --> 00:01:12.189
So really quickly,
each one of the modules in this main TF

20
00:01:12.189 --> 00:01:17.680
are our own custom modules with
parameters that we have set.

21
00:01:18.880 --> 00:01:21.430
So again, our network, our database,

22
00:01:21.430 --> 00:01:26.220
these are variables from those variables
TF files that we said we needed.

23
00:01:26.220 --> 00:01:28.860
And we are doing the exact
same thing with the cluster.

24
00:01:30.300 --> 00:01:35.348
Now what's interesting about these
configurations is if in the future

25
00:01:35.348 --> 00:01:40.225
you had a desire to create a cluster
network and you wanted to make it so

26
00:01:40.225 --> 00:01:45.778
that every environment now provisioned
clusters on those cluster networks,

27
00:01:45.778 --> 00:01:48.140
you should be able to do that.

28
00:01:48.140 --> 00:01:52.876
You would just add a cluster
network to the main network module,

29
00:01:52.876 --> 00:01:57.964
you would export it as a variable and
then you would put subnets module

30
00:01:57.964 --> 00:02:03.480
network clustersubnets instead of
module network privatesubnets.

31
00:02:03.480 --> 00:02:05.880
So this is why these aren't hard coded.

32
00:02:05.880 --> 00:02:10.280
You have the ability to play and,
or change things if you need to.

33
00:02:12.280 --> 00:02:13.613
Again, in this case,

34
00:02:13.613 --> 00:02:17.970
we are wanting the cluster to be
on the private network entirely.

35
00:02:17.970 --> 00:02:21.570
So we say module network,
private security group.

36
00:02:21.570 --> 00:02:23.410
We want it to be on the private subnets.

37
00:02:23.410 --> 00:02:25.730
So we say module network, private subnets.

38
00:02:25.730 --> 00:02:27.170
We give it the name.

39
00:02:27.170 --> 00:02:32.161
This also means that our cluster is
per environment because we're not

40
00:02:32.161 --> 00:02:34.370
creating multiple clusters.

41
00:02:34.370 --> 00:02:39.106
Now what's kind of neat is
every single one of these

42
00:02:39.106 --> 00:02:42.610
components can also be duplicated.

43
00:02:42.610 --> 00:02:43.770
So what do I mean by that?

44
00:02:43.770 --> 00:02:47.130
Well, what if you want two
networks in your environment?

45
00:02:47.130 --> 00:02:49.210
What if you want three
databases in your environment?

46
00:02:49.210 --> 00:02:52.250
What if you want multiple
clusters in your environment?

47
00:02:52.250 --> 00:02:56.650
You can Easily change this,
adapt it to whatever you need.

48
00:02:56.650 --> 00:03:01.314
One of the things we would do at
my job is we would actually create

49
00:03:01.314 --> 00:03:03.690
a cluster per what we call tier.

50
00:03:05.050 --> 00:03:09.140
Tiers where I work
are effectively the layers

51
00:03:09.140 --> 00:03:13.740
of applications that we create and deploy.

52
00:03:13.740 --> 00:03:18.163
So for example, we have a backend tier and
those are all private,

53
00:03:18.163 --> 00:03:23.403
completely cut off from the Internet
services that can be accessed via HTTP.

54
00:03:23.403 --> 00:03:25.660
And then we have a gateway tier.

55
00:03:25.660 --> 00:03:30.052
The gateway tier is the exact same thing
as a back end tier, but it has access to

56
00:03:30.052 --> 00:03:35.180
the Internet, meaning that those
services can then be requested directly.

57
00:03:35.180 --> 00:03:38.727
Then we have a front end tier where
all of our front end services go and

58
00:03:38.727 --> 00:03:39.980
then those have a load.

59
00:03:39.980 --> 00:03:45.887
So we have multiple clusters that further
logically separate our services and

60
00:03:45.887 --> 00:03:52.020
what we're deploying this granularity
again, still entirely up to you.

61
00:03:52.020 --> 00:03:56.820
I'm just giving you a template
to start with and work with.

62
00:03:56.820 --> 00:04:00.478
The other thing I really want to note
here before I provision everything is

63
00:04:00.478 --> 00:04:02.740
the capacity providers.

64
00:04:02.740 --> 00:04:08.704
This is entirely a setting that I
have created to solve the problem

65
00:04:08.704 --> 00:04:14.430
of I want to schedule containers
A on instances B, right?

66
00:04:14.430 --> 00:04:17.683
So for example,
if I wanted a bunch of containers to get

67
00:04:17.683 --> 00:04:21.506
scheduled to the spot instances or
the spot capacity provider,

68
00:04:21.506 --> 00:04:25.310
I would tell it, hey,
the instance type is, is whatever.

69
00:04:25.310 --> 00:04:27.390
And then the market type is spot.

70
00:04:27.390 --> 00:04:29.790
Cool.
Now I have capacity.

71
00:04:29.790 --> 00:04:33.230
And so for example, if I wanted
to say like spot medium, right?

72
00:04:33.230 --> 00:04:38.920
And then I wanted to say like,
you know, spot large.

73
00:04:38.920 --> 00:04:42.840
And then I wanted to say this
was like a extra large, right?

74
00:04:42.840 --> 00:04:47.347
Now I have medium instances that are on
spot and I have extra large instances that

75
00:04:47.347 --> 00:04:50.520
are on spot and
I can provision my containers to either.

76
00:04:50.520 --> 00:04:55.163
Or if I wanted to, I could say, you know,
something like on demand large,

77
00:04:55.163 --> 00:05:00.030
and then just say on demand here, meaning
now I have small spot instances that I

78
00:05:00.030 --> 00:05:05.180
can provision to and I have large on
demand instances that I can provision to.

79
00:05:05.180 --> 00:05:08.948
So the point of the capacity providers
is really to give you that complete

80
00:05:08.948 --> 00:05:12.347
customization of what kind of
instances are you provisioning and

81
00:05:12.347 --> 00:05:16.140
where you can put those containers
when they're ready to be scheduled.

82
00:05:18.300 --> 00:05:20.789
For now we're just going to
put everything on spot and

83
00:05:20.789 --> 00:05:24.780
we're going to use the smallest instance
size we can for what we're trying to do.

84
00:05:24.780 --> 00:05:26.100
So we're going to say spot.

85
00:05:26.100 --> 00:05:29.110
We're going to create one
capacity provider called Spot.

86
00:05:29.110 --> 00:05:31.777
Its instance type is going to be a T3,
a medium, and

87
00:05:31.777 --> 00:05:35.430
the market type will be of course spot,
because it's a spot instance.

