WEBVTT

1
00:00:00.240 --> 00:00:01.339
&gt;&gt; Erik Reinert: So let's go ahead and

2
00:00:01.339 --> 00:00:04.400
let's create our next module
which is our service module.

3
00:00:04.400 --> 00:00:08.659
So if I do service as a directory,
I'm now going to have cluster,

4
00:00:08.659 --> 00:00:12.080
database, environment, network, service.

5
00:00:12.080 --> 00:00:12.741
And again,

6
00:00:12.741 --> 00:00:16.920
what's kind of cool is as you could see
how these all kind of stack, right?

7
00:00:16.920 --> 00:00:20.347
So we have environment at the very top,
then inside of environment we

8
00:00:20.347 --> 00:00:23.360
have cluster, database,
network, service, right?

9
00:00:23.360 --> 00:00:27.622
And then at the very, very top level
we have environments that we use which

10
00:00:27.622 --> 00:00:29.980
have clusters networks inside of them.

11
00:00:32.300 --> 00:00:34.300
So we're going to go
into our service again.

12
00:00:34.300 --> 00:00:36.256
If you want to know
where I am in the path,

13
00:00:36.256 --> 00:00:39.500
you can just look at my terminal
at the top and it'll show you.

14
00:00:39.500 --> 00:00:42.232
So I'm in the terraform
module service directory and

15
00:00:42.232 --> 00:00:43.940
I'm going to create some files.

16
00:00:43.940 --> 00:00:47.340
So the first file I'm going
to create is a data TF file.

17
00:00:47.340 --> 00:00:50.860
So you should see there it is,
there's my data TF file.

18
00:00:50.860 --> 00:00:55.002
And inside of this I'm going to copy paste
all of the stuff we need for data and

19
00:00:55.002 --> 00:00:57.990
I'm going to go through it really quickly.

20
00:00:57.990 --> 00:00:58.951
As I said before,

21
00:00:58.951 --> 00:01:02.550
we need to give permissions to
things to be able to do things.

22
00:01:02.550 --> 00:01:06.945
And up until now there really
hasn't been much that things we

23
00:01:06.945 --> 00:01:09.670
are provisioning need to do.

24
00:01:09.670 --> 00:01:12.870
And what I mean by that is
a network is just a network.

25
00:01:12.870 --> 00:01:15.914
It's not like the network goes out and
talks to other networks and

26
00:01:15.914 --> 00:01:17.510
all that kind of stuff.

27
00:01:17.510 --> 00:01:18.270
It's just a network.

28
00:01:18.270 --> 00:01:20.950
It doesn't do anything besides be there.

29
00:01:20.950 --> 00:01:22.270
Same thing with a database.

30
00:01:22.270 --> 00:01:26.470
A database doesn't talk to s3 and
any of that.

31
00:01:26.470 --> 00:01:28.070
So we don't have to worry about that.

32
00:01:28.070 --> 00:01:32.614
But when you're talking about the compute
plane, specifically compute being like

33
00:01:32.614 --> 00:01:37.750
anything that processes something,
you'll normally have to give it policies.

34
00:01:37.750 --> 00:01:41.615
And so
you will start seeing more policies and

35
00:01:41.615 --> 00:01:46.906
permissions in more like actionable
services like lambdas or

36
00:01:46.906 --> 00:01:52.310
ECS or again anything logically
that can do something can act.

37
00:01:53.320 --> 00:01:56.120
You need to normally give
it permissions to act.

38
00:01:56.120 --> 00:02:00.076
In this case we're creating
an assume role for that service so

39
00:02:00.076 --> 00:02:02.520
that the service can do what it needs.

40
00:02:02.520 --> 00:02:06.360
Now earlier, we created roles for
nodes, right?

41
00:02:08.120 --> 00:02:12.681
You might be asking yourself the question
why are we having node roles and

42
00:02:12.681 --> 00:02:14.680
then service roles?

43
00:02:14.680 --> 00:02:19.878
The main point of that is
the separation between the two, right?

44
00:02:19.878 --> 00:02:25.900
The node may need permissions to mount
a volume for the cluster, right?

45
00:02:25.900 --> 00:02:30.178
Or do other cluster related operations,
but that doesn't mean that

46
00:02:30.178 --> 00:02:35.060
the service running on top of it should
be able to do those operations, right?

47
00:02:35.060 --> 00:02:36.657
And so what we do is we say,

48
00:02:36.657 --> 00:02:41.313
okay, well the node can do things
specific to the infrastructure side, but

49
00:02:41.313 --> 00:02:45.450
the service focuses on roles
related to the service side.

50
00:02:45.450 --> 00:02:49.228
So if the service needs to connect to sqs,
we don't want to give that to the or,

51
00:02:49.228 --> 00:02:52.092
I'm sorry, yeah,
if the service needs to connect to sqs,

52
00:02:52.092 --> 00:02:54.010
we don't want to give that to the node.

53
00:02:54.010 --> 00:02:54.650
There's no need.

54
00:02:54.650 --> 00:02:58.810
The node has no connection to sqs or
need to communicate with it.

55
00:02:58.810 --> 00:03:01.210
So the node wouldn't need that permission.

56
00:03:01.210 --> 00:03:03.121
So we keep those separate.

57
00:03:03.121 --> 00:03:07.280
If you were doing a VPA,
VPS equivalent, right,

58
00:03:07.280 --> 00:03:11.600
in that case you don't
get that separation.

59
00:03:11.600 --> 00:03:15.603
So the node would act as both because
everything's running directly on the host,

60
00:03:15.603 --> 00:03:17.120
there's no container there.

61
00:03:17.120 --> 00:03:19.845
So we have a service role
that we're creating and

62
00:03:19.845 --> 00:03:25.200
in that service role we're really just
telling it that it can do three things.

63
00:03:25.200 --> 00:03:28.000
It can get parameters.

64
00:03:28.000 --> 00:03:32.101
Remember all the way back in
App Runner when we had to copy and

65
00:03:32.101 --> 00:03:34.240
paste the arns in and stuff.

66
00:03:34.240 --> 00:03:35.680
Yeah, that's gone.

67
00:03:35.680 --> 00:03:38.780
That's a way easier and
nicer way of doing it.

68
00:03:38.780 --> 00:03:43.521
And yeah, we can just reuse
the parameters that we have in a different

69
00:03:43.521 --> 00:03:45.740
part of the module as code.

70
00:03:45.740 --> 00:03:50.546
And so in this case what we're doing
is we are iterating over a for

71
00:03:50.546 --> 00:03:54.996
loop and we're saying, hey,
get the SSM parameter arn and

72
00:03:54.996 --> 00:03:59.180
make it so that this can
actually request those values.

73
00:03:59.180 --> 00:04:03.180
The other thing is log stream and
put log events.

74
00:04:03.180 --> 00:04:05.820
Basically this is all
related to CloudWatch.

75
00:04:05.820 --> 00:04:09.498
We want to be able to see what's coming
out of the containers just like we did in

76
00:04:09.498 --> 00:04:11.000
App Runner.

77
00:04:11.000 --> 00:04:13.640
And so this is a little bit more fancy.

78
00:04:13.640 --> 00:04:18.331
You're getting like a nice little log
group with a seven day retention period

79
00:04:18.331 --> 00:04:21.070
and inside of it you get
the access to permit or

80
00:04:21.070 --> 00:04:24.840
you're giving the service
the ability to push the logs to it.

81
00:04:28.040 --> 00:04:29.720
Okay, cool.

82
00:04:29.720 --> 00:04:33.800
So then we just create a task assume
role and a service assume role.

83
00:04:34.840 --> 00:04:37.480
There is a little bit
of a confusing thing.

84
00:04:37.480 --> 00:04:40.420
I don't want to go super deep down
the rabbit hole because it's just

85
00:04:40.420 --> 00:04:41.980
like Amazon specific stuff stuff.

86
00:04:43.100 --> 00:04:47.753
But there's like an execution role and
then I think there's a task role or

87
00:04:47.753 --> 00:04:51.900
basically there's two different
types of roles that ECS uses.

88
00:04:51.900 --> 00:04:57.750
The main gist of the difference is one
is used to start the container and

89
00:04:57.750 --> 00:05:02.212
the things that are needed
to start that container and

90
00:05:02.212 --> 00:05:06.376
the permissions around it and
the other is used for

91
00:05:06.376 --> 00:05:11.433
the requests actually inside
of the container so again, for

92
00:05:11.433 --> 00:05:16.391
example, if a container needs
ECR access in order to pull,

93
00:05:16.391 --> 00:05:19.610
then that would be an execution role.

94
00:05:20.650 --> 00:05:25.882
But if I don't want the internal
container to be able to pull an image,

95
00:05:25.882 --> 00:05:31.930
then I want to put that on the execution
role, not on the service role.

96
00:05:31.930 --> 00:05:35.480
So there's even another
layer of separation there.

97
00:05:35.480 --> 00:05:37.520
Again, you don't need
to go too deep into it.

98
00:05:37.520 --> 00:05:40.945
You just need to know if the service
role is really the one that is giving us

99
00:05:40.945 --> 00:05:43.320
the ability to get parameters and
all that stuff.

100
00:05:43.320 --> 00:05:48.826
But just a little bit of background
into how annoying ECs can be.

101
00:05:48.826 --> 00:05:52.800
&gt;&gt; Speaker 2: I guess,
why are you assuming that role twice?

102
00:05:52.800 --> 00:05:56.289
I mean, that third one that
you have to assume ECS task,

103
00:05:56.289 --> 00:05:58.600
you also have it at the top, I think.

104
00:06:00.680 --> 00:06:02.520
What's the difference between those two?

105
00:06:02.520 --> 00:06:05.080
The task assume role and
the execution role.

106
00:06:08.900 --> 00:06:11.866
&gt;&gt; Erik Reinert: So, okay, if we see
here the execution assume role, I mean,

107
00:06:11.866 --> 00:06:13.820
they all do the same thing technically.

108
00:06:13.820 --> 00:06:16.940
They all do the exact same thing, right?

109
00:06:16.940 --> 00:06:19.812
AssumeRole ecs.

110
00:06:19.812 --> 00:06:22.260
Sorry, no, this is for ECS tasks.

111
00:06:22.260 --> 00:06:24.180
Yeah, so
that would be the difference there.

112
00:06:24.180 --> 00:06:26.100
And this is also ECS tasks.

113
00:06:26.100 --> 00:06:30.831
Yeah, so I guess that's the difference
is just the domains that

114
00:06:30.831 --> 00:06:34.270
the identifiers are referencing.

115
00:06:34.270 --> 00:06:36.868
Yeah, now it does mean though,

116
00:06:36.868 --> 00:06:42.190
that every service on ecs needs a task and
an execution role.

117
00:06:42.190 --> 00:06:43.870
So that's why we're creating two of them.

118
00:06:48.190 --> 00:06:53.603
The third one, the service role,
may be another thing that I'm doing,

119
00:06:53.603 --> 00:06:57.450
or it may be being used for
another resource.

120
00:06:57.450 --> 00:07:00.999
So I would just pay attention
to the task assume role and

121
00:07:00.999 --> 00:07:03.170
then the execution assume role.

122
00:07:03.170 --> 00:07:07.210
Those are the two that we're talking
about that a service actually uses.

123
00:07:07.210 --> 00:07:09.010
So
&gt;&gt; Speaker 3: I'm a little confused.

124
00:07:09.010 --> 00:07:12.170
Like, if we're creating these,
why are they data?

125
00:07:13.810 --> 00:07:15.770
&gt;&gt; Erik Reinert: Okay, good question.

126
00:07:15.770 --> 00:07:20.112
So a resource normally means
a logically created thing,

127
00:07:20.112 --> 00:07:25.370
something that actually exists and
has state of existence, right?

128
00:07:26.650 --> 00:07:30.410
But this goes back to the whole like
pulumi versus terraform thing even.

129
00:07:30.410 --> 00:07:32.150
Right.
In a normal code base,

130
00:07:32.150 --> 00:07:36.610
you could just be const value JSON,
blah blah, blah, blah blah, right?

131
00:07:36.610 --> 00:07:38.090
And then write out your JSON.

132
00:07:38.090 --> 00:07:43.250
You can't do that in terraform easily,
right?

133
00:07:43.250 --> 00:07:48.316
And so especially with writing,
you remember how you might notice

134
00:07:48.316 --> 00:07:53.940
that in these dados data brackets,
they don't have the statement name.

135
00:07:53.940 --> 00:07:57.220
And the ones that are in
Amazon are much larger.

136
00:07:57.220 --> 00:08:00.738
Basically, these
are helpful data resources,

137
00:08:00.738 --> 00:08:05.711
basically that will take this code and
then turn it into JSON for you,

138
00:08:05.711 --> 00:08:10.620
and it'll kind of like fluff it out
into what it actually should be.

139
00:08:10.620 --> 00:08:12.900
Or expand it out to what it should be.

140
00:08:12.900 --> 00:08:17.043
So all we have to do is be like statement,
principles,

141
00:08:17.043 --> 00:08:21.800
identifiers, types, and
then it will translate that to.

142
00:08:21.800 --> 00:08:23.160
Hold on, I can actually show you.

143
00:08:23.160 --> 00:08:28.750
So if we go to IAM really quickly,
go to Policies.

144
00:08:28.750 --> 00:08:32.612
Do I have an assume role in here?

145
00:08:32.612 --> 00:08:33.560
No, actually, hold on.

146
00:08:33.560 --> 00:08:35.095
That would be this.

147
00:08:35.095 --> 00:08:42.850
So let's do, do I have, yeah, I do, cool.

148
00:08:42.850 --> 00:08:43.493
Yeah.
So

149
00:08:43.493 --> 00:08:47.410
you see how this one has like
version statement, right.

150
00:08:47.410 --> 00:08:49.250
And the structure is a bit different.

151
00:08:49.250 --> 00:08:54.770
Basically, the terraform provider
provides an interface that will make it.

152
00:08:54.770 --> 00:08:59.170
So you only have to write this and
then it will translate it to this.

153
00:08:59.170 --> 00:09:00.636
Yeah.
&gt;&gt; Speaker 3: So it's kind of like

154
00:09:00.636 --> 00:09:02.730
a hacky type thing almost-
&gt;&gt; Erik Reinert: Exactly.

155
00:09:02.730 --> 00:09:03.410
&gt;&gt; Speaker 3: Terraform.

156
00:09:03.410 --> 00:09:05.010
&gt;&gt; Erik Reinert: Yeah,
because you can do it without it.

157
00:09:05.010 --> 00:09:06.691
Like if you really wanted to,

158
00:09:06.691 --> 00:09:10.800
you could write this as like as
that literally in terraform.

159
00:09:10.800 --> 00:09:14.248
But it's a lot of extra lines
you're writing over and over and

160
00:09:14.248 --> 00:09:18.040
then you have to remember how to
capitalize and when to capitalize.

161
00:09:18.040 --> 00:09:21.200
So there's a lot of errors
that could happen here.

162
00:09:21.200 --> 00:09:24.000
I think they also validate them as well.

163
00:09:24.000 --> 00:09:26.960
So I think it's got a bit
more data validation too.

164
00:09:26.960 --> 00:09:28.960
But yeah, you don't have to use them.

165
00:09:28.960 --> 00:09:30.320
They're there to be helpful.

166
00:09:31.920 --> 00:09:37.190
But they do they literally translate
this into that right there?

167
00:09:37.190 --> 00:09:37.690
Yeah.

168
00:09:39.830 --> 00:09:41.110
Cool.
Okay, awesome.

169
00:09:41.110 --> 00:09:42.470
So that's our data file.

170
00:09:42.470 --> 00:09:43.910
Let's go ahead and save that.

