WEBVTT

1
00:00:00.160 --> 00:00:01.040
&gt;&gt; Erik Reinert: So
here's what we're building.

2
00:00:02.880 --> 00:00:07.200
As you could tell, the workflow
has kind of slowly grown more and

3
00:00:07.200 --> 00:00:08.720
more as we've moved.

4
00:00:08.720 --> 00:00:12.560
Can anyone tell me what is
different that stands out to you?

5
00:00:14.240 --> 00:00:16.079
&gt;&gt; Speaker 2: Got a load balancer.

6
00:00:16.079 --> 00:00:17.109
Cdn.

7
00:00:17.109 --> 00:00:18.796
&gt;&gt; Erik Reinert: Yep, CDN, yep.

8
00:00:18.796 --> 00:00:19.852
&gt;&gt; Speaker 2: RDS?

9
00:00:19.852 --> 00:00:21.531
&gt;&gt; Erik Reinert: Yep, RDS, yep.

10
00:00:21.531 --> 00:00:23.855
&gt;&gt; Speaker 2: And, well,
ECS instead of App Runner.

11
00:00:23.855 --> 00:00:25.930
&gt;&gt; Erik Reinert: Yep, exactly, yeah.

12
00:00:25.930 --> 00:00:30.890
So, yeah, we've kind of gutted most
of the pipeline and changed it.

13
00:00:30.890 --> 00:00:35.480
But you'll notice that we don't
necessarily always change

14
00:00:35.480 --> 00:00:38.410
everything that's purposeful.

15
00:00:38.410 --> 00:00:43.317
We don't want to change everything
at once because then that just

16
00:00:43.317 --> 00:00:46.650
massively disrupts productivity.

17
00:00:46.650 --> 00:00:51.106
But what you might notice, based off
of our phases and what we've done,

18
00:00:51.106 --> 00:00:54.395
we've basically done first
phase infrastructure,

19
00:00:54.395 --> 00:00:58.434
second phase developer,
third phase infrastructure, right?

20
00:00:58.434 --> 00:01:03.158
And so we're able to do these pivots
where it's kind of like roadwork in

21
00:01:03.158 --> 00:01:05.380
the middle of the night.

22
00:01:05.380 --> 00:01:09.791
We're kind of pivoting around
the developers as they're working so

23
00:01:09.791 --> 00:01:12.993
that everybody can still be productive,
right?

24
00:01:12.993 --> 00:01:16.745
And so on the right, we still have GitHub,
we still have GitHub Actions,

25
00:01:16.745 --> 00:01:20.050
we even still have the whole
deployment process.

26
00:01:20.050 --> 00:01:23.170
That's a big part of why
we separate these things.

27
00:01:23.170 --> 00:01:27.522
Because when we separate these things, we
can work over here and be a more seamless

28
00:01:27.522 --> 00:01:32.004
experience to the developers while the
developers keep working, shipping code and

29
00:01:32.004 --> 00:01:32.970
stuff like that.

30
00:01:32.970 --> 00:01:37.672
So in this scenario, for example, what we
could do is all of this work here could be

31
00:01:37.672 --> 00:01:41.730
done in a branch while developers
are still shipping to App Runner.

32
00:01:41.730 --> 00:01:44.397
Then the moment when we're
ready to ship over to ecs,

33
00:01:44.397 --> 00:01:48.720
we just merged that branch and
now we're shipping to ECS instead.

34
00:01:48.720 --> 00:01:51.200
So it's a much more seamless
experience as well.

35
00:01:51.200 --> 00:01:56.111
So being aware of where you're making
these changes is definitely helpful again,

36
00:01:56.111 --> 00:02:00.640
to the impact of the productivity
of everyone else around you.

37
00:02:00.640 --> 00:02:05.235
Another thing to note is just that from
a client and a developer perspective,

38
00:02:05.235 --> 00:02:07.680
this should be seamless.

39
00:02:07.680 --> 00:02:12.623
So I should be able to move the entire
platform from App Runner to ECS without

40
00:02:12.623 --> 00:02:18.050
having any downtime, having any concerns
about downtime or anything like that.

41
00:02:19.090 --> 00:02:22.978
It's just something to note that
these changes we should be able

42
00:02:22.978 --> 00:02:28.370
to make in a way that doesn't impact
anybody and we can make them efficiently.

43
00:02:28.370 --> 00:02:30.850
But yeah, we have added a few things.

44
00:02:30.850 --> 00:02:33.090
The first thing we added is a cdn.

45
00:02:33.090 --> 00:02:38.050
So we are gonna be using
Cloudfront as our main CDN.

46
00:02:38.050 --> 00:02:41.395
Again, we're trying to stay on Amazon as
much as possible possible because that's

47
00:02:41.395 --> 00:02:44.010
where we're probably going
to get the biggest wins.

48
00:02:44.010 --> 00:02:46.490
And so
Cloudfront is a pretty good solution.

49
00:02:46.490 --> 00:02:50.128
Just a normal cdn, it's got
distribution all over the world, so

50
00:02:50.128 --> 00:02:54.890
it helps really well with like normal
static assets and things like that.

51
00:02:54.890 --> 00:02:57.779
What's also really nice about
it is because it's Amazon,

52
00:02:57.779 --> 00:03:00.810
it has deep integrations with
all of its other services.

53
00:03:00.810 --> 00:03:05.485
And so one of the reasons why we're
doing a CDN is because we don't

54
00:03:05.485 --> 00:03:09.650
want to make our cluster
directly accessible.

55
00:03:09.650 --> 00:03:12.770
Like, we're trying to make it in a way
where it's also like future proof.

56
00:03:12.770 --> 00:03:15.489
We don't want anyone to
be able to like DDoS,

57
00:03:15.489 --> 00:03:18.507
our load balancer or
anything like that, right?

58
00:03:18.507 --> 00:03:23.064
And so what we're actually able to do
is we're able to create a AWS ALB and

59
00:03:23.064 --> 00:03:25.250
create that in a private subnet.

60
00:03:25.250 --> 00:03:30.775
And so we can use our CDN as our front end
to deliver all of our main content and

61
00:03:30.775 --> 00:03:35.164
APIs and everything, but
then have a private load balancer

62
00:03:35.164 --> 00:03:40.250
internally if we want to, I don't know,
pull, put a VPN in place and

63
00:03:40.250 --> 00:03:45.165
then make it so that developers
can use the load balancer locally,

64
00:03:45.165 --> 00:03:48.470
but then go through the CDN for
production.

65
00:03:49.510 --> 00:03:52.188
Or if we want other services
to communicate internally,

66
00:03:52.188 --> 00:03:56.070
they can communicate via that
load balancer, things like that.

67
00:03:56.070 --> 00:04:00.498
And so, yeah, the nice thing about it all
being on Amazon is that Cloudfront can

68
00:04:00.498 --> 00:04:04.796
point directly to that private load
balancer because they're in accessible

69
00:04:04.796 --> 00:04:07.410
networks and stuff like that.

70
00:04:07.410 --> 00:04:12.064
Once we have that load balancer set up,
we are going to set up ECS as well, right?

71
00:04:12.064 --> 00:04:16.450
And so ECs, how many of you have
used ECS before or know about it?

72
00:04:16.450 --> 00:04:17.530
Okay, got a couple.

73
00:04:17.530 --> 00:04:21.732
Okay, so CloudFront being the CDN, AWS,

74
00:04:21.732 --> 00:04:28.610
ALB being the load balancer,
ECS is the container Orchestrator.

75
00:04:28.610 --> 00:04:31.860
That's where basically all
the containers are ranked.

76
00:04:31.860 --> 00:04:32.360
It is.

77
00:04:34.260 --> 00:04:37.220
I don't know if I would say
it's a Kubernetes competitor.

78
00:04:37.220 --> 00:04:40.305
I would say Kubernetes is
much better than it, but

79
00:04:40.305 --> 00:04:43.324
it does a really good job
at running containers.

80
00:04:43.324 --> 00:04:47.123
If you just wanna run containers,
get them up in the cloud and

81
00:04:47.123 --> 00:04:52.040
you want a little bit more customization
around the container, basically you

82
00:04:52.040 --> 00:04:57.060
want more than App Runner, ECS is probably
going to be your final destination.

83
00:04:58.220 --> 00:05:02.240
You can go EKS if you want,
which is elastic, Kubernetes, clusters or

84
00:05:02.240 --> 00:05:06.060
something like that, but
then you're in a whole different world.

85
00:05:06.060 --> 00:05:11.033
So if you don't, Basically, I would say
the steps are if you just want to get

86
00:05:11.033 --> 00:05:15.020
your app out really quick,
you don't Care about anything.

87
00:05:15.020 --> 00:05:19.195
App Runner's probably your best solution
if you're looking for more scale,

88
00:05:19.195 --> 00:05:21.420
more customization, things like that.

89
00:05:21.420 --> 00:05:23.900
ECS is probably where you'll be.

90
00:05:23.900 --> 00:05:28.888
But then if you want to have a unified
platform that can move anywhere and blah,

91
00:05:28.888 --> 00:05:32.920
blah, blah, that's when
Kubernetes will come into play.

92
00:05:32.920 --> 00:05:37.800
So that would be like my scaling
of where you kinda would go.

93
00:05:37.800 --> 00:05:39.800
We're purposely not going to Kubernetes.

94
00:05:44.760 --> 00:05:45.840
You don't need it, man.

95
00:05:45.840 --> 00:05:47.640
You just don't need it.

96
00:05:47.640 --> 00:05:50.440
Most of the times, you just don't need it.

97
00:05:50.440 --> 00:05:52.400
My company runs on ecs.

98
00:05:52.400 --> 00:05:54.650
We do a fantastic job of running on it.

99
00:05:54.650 --> 00:05:58.507
I'm not saying that my company
couldn't benefit from it, but

100
00:05:58.507 --> 00:06:02.507
I am saying that there's a lot of
effort that takes to get there and

101
00:06:02.507 --> 00:06:04.650
you have to make that cost value.

102
00:06:04.650 --> 00:06:05.770
Is it worth doing that?

103
00:06:05.770 --> 00:06:07.130
Is it not?

104
00:06:07.130 --> 00:06:09.050
And that's totally up
to your organization.

105
00:06:09.050 --> 00:06:15.210
But most of the time, ECS or something
like it can take care of it pretty well.

106
00:06:17.370 --> 00:06:20.188
The other thing we did change,
as you might have noticed,

107
00:06:20.188 --> 00:06:21.770
is we also did add RDs.

108
00:06:21.770 --> 00:06:26.650
And you might be wondering, well,
okay, we had Supabase before, why rds?

109
00:06:26.650 --> 00:06:28.650
Now it's that same thing.

110
00:06:28.650 --> 00:06:30.231
Now we want to be able to customize,

111
00:06:30.231 --> 00:06:32.410
manage the database
a little bit more directly.

112
00:06:32.410 --> 00:06:34.170
We want to have more control over it.

113
00:06:34.170 --> 00:06:37.769
And another big thing is we want
that database to be private.

114
00:06:37.769 --> 00:06:39.770
We want it to be completely isolated.

115
00:06:39.770 --> 00:06:43.530
And because we are now fully on Amazon and
in that world,

116
00:06:43.530 --> 00:06:48.300
we can use what's called a VPC or
a virtual private Cloud.

117
00:06:48.300 --> 00:06:52.250
At the end of the day, if you were
wondering, what does that actually mean,

118
00:06:52.250 --> 00:06:55.646
it just means a private network in
Amazon that you have access to,

119
00:06:55.646 --> 00:06:59.820
you can provision your instances to,
and you have complete control over.

120
00:06:59.820 --> 00:07:03.420
So this really does become
a lot about ownership.

121
00:07:03.420 --> 00:07:07.358
I want to start owning
the resources that I run and

122
00:07:07.358 --> 00:07:11.500
I don't want others to be
maintaining them for me.

123
00:07:13.580 --> 00:07:17.951
Just as a kind of a comparison
to stage one or phase one,

124
00:07:17.951 --> 00:07:22.590
you could see it's a lot more ownership,
[LAUGH] right?

125
00:07:22.590 --> 00:07:24.190
It's a lot more.

126
00:07:24.190 --> 00:07:28.445
And how many people do you think it
would take minimal to manage something

127
00:07:28.445 --> 00:07:29.150
like this?

128
00:07:30.510 --> 00:07:32.542
Just curious, when you look at this,

129
00:07:32.542 --> 00:07:36.677
how many devs do you think it would take
to manage all of this infrastructure.

130
00:07:36.677 --> 00:07:38.310
&gt;&gt; Speaker 2: You need like a DBA for
sure.

131
00:07:38.310 --> 00:07:39.150
Probably.

132
00:07:39.150 --> 00:07:40.960
&gt;&gt; Erik Reinert: Yeah, yeah, absolutely.

133
00:07:40.960 --> 00:07:41.640
I would say so.

134
00:07:41.640 --> 00:07:43.200
Otherwise it would be very painful.

135
00:07:45.440 --> 00:07:49.365
&gt;&gt; Speaker 2: And then probably
solid DevOps, platform engineer,

136
00:07:49.365 --> 00:07:51.920
whatever you want to call them.

137
00:07:51.920 --> 00:07:55.472
&gt;&gt; Erik Reinert: Let's put it this way,
if you only had one,

138
00:07:55.472 --> 00:08:00.480
they would be cranky,
quite Often so you could have one.

139
00:08:00.480 --> 00:08:01.640
I've done this as well.

140
00:08:01.640 --> 00:08:06.160
I was at a medium sized company where
I was really the only DevOps guy.

141
00:08:06.160 --> 00:08:11.520
I was on a 10 man team and I hated it
[LAUGH] mostly because I was the only guy.

142
00:08:11.520 --> 00:08:13.520
I was the only point for everything.

143
00:08:13.520 --> 00:08:18.000
And when you have this much
complexity that is just overwhelming,

144
00:08:18.000 --> 00:08:20.720
it becomes very overwhelming.

145
00:08:20.720 --> 00:08:24.472
And I stayed there for like three and
a half, four years building, you know,

146
00:08:24.472 --> 00:08:25.640
everything with them.

147
00:08:25.640 --> 00:08:29.673
But that was a big reason why I ended up
leaving was, is because I was just like,

148
00:08:29.673 --> 00:08:31.400
I'm the only person doing this.

149
00:08:31.400 --> 00:08:33.000
Like, it's just too stressful.

150
00:08:33.000 --> 00:08:34.190
I want to be.

151
00:08:34.190 --> 00:08:37.502
There's like, there's benefits
to being at a small company and

152
00:08:37.502 --> 00:08:41.390
then there's also benefits to being
a cog in a much bigger wheel.

153
00:08:41.390 --> 00:08:46.103
I personally like the COG approach because
there's a lot more room, there's a lot

154
00:08:46.103 --> 00:08:50.699
more flexibility, there's a lot more
things that you can do like this, right?

155
00:08:50.699 --> 00:08:54.670
And so it gives a lot more opportunity for
learning, I think.

156
00:08:54.670 --> 00:08:57.439
Whereas when you're at a startup
you'll learn a lot, but

157
00:08:57.439 --> 00:09:00.670
it's gonna be like through the MUD
approach, you know what I mean?

158
00:09:00.670 --> 00:09:04.825
Whereas if you're at a larger company, you
might be able to kind of like take a step

159
00:09:04.825 --> 00:09:08.740
back and like have a mentor or
somebody else who can kind of guide you.

160
00:09:08.740 --> 00:09:10.180
Yeah, yeah.

161
00:09:10.180 --> 00:09:14.308
&gt;&gt; Speaker 2: I had a couple questions so
for on rds and

162
00:09:14.308 --> 00:09:18.699
I guess this applies to Supabase as well.

163
00:09:18.699 --> 00:09:23.649
But I'm just curious like,
is there any risks as far as like

164
00:09:23.649 --> 00:09:29.193
the developers running their
container locally with postgres and

165
00:09:29.193 --> 00:09:34.638
then it being like slightly
different in the postgres instance,

166
00:09:34.638 --> 00:09:38.301
behaving slightly different in Supabase or

167
00:09:38.301 --> 00:09:42.072
RDS and
things aren't perfectly one to one.

168
00:09:42.072 --> 00:09:42.949
&gt;&gt; Erik Reinert: Yeah.
&gt;&gt; Speaker 2: Is that a thing, or?

169
00:09:42.949 --> 00:09:45.900
&gt;&gt; Erik Reinert: So
absolutely, yeah, 100%, yeah.

170
00:09:45.900 --> 00:09:46.780
That's a great question.

171
00:09:48.060 --> 00:09:52.650
So if you are in a scenario like
that where database parameters

172
00:09:52.650 --> 00:09:57.429
are very important, right,
which normally they are, right?

173
00:09:57.429 --> 00:10:03.210
You would more than likely want to
run your own RDS for starters, right?

174
00:10:03.210 --> 00:10:06.482
Mostly because-
&gt;&gt; Speaker 2: Like as a developer.

175
00:10:06.482 --> 00:10:07.163
&gt;&gt; Erik Reinert: Sorry.

176
00:10:07.163 --> 00:10:08.000
&gt;&gt; Speaker 2: Like you would wanna run.

177
00:10:08.000 --> 00:10:10.303
&gt;&gt; Erik Reinert: No, no, no, no,
sorry, I mean as an organization,

178
00:10:10.303 --> 00:10:12.707
like if you were gonna be
deploying stuff into the cloud,

179
00:10:12.707 --> 00:10:15.180
you'd probably wanna pick more
of an RDS than a Supabase.

180
00:10:15.180 --> 00:10:18.679
RDS has direct access to
your parameter groups and

181
00:10:18.679 --> 00:10:22.920
every option that postgres
directly gives you.

182
00:10:22.920 --> 00:10:25.732
So for example, if locally, I don't know,

183
00:10:25.732 --> 00:10:30.172
you needed to increase your shared
connection count or some other weird

184
00:10:30.172 --> 00:10:34.834
obscure postgres setting, you might
get that with supabase, but there is

185
00:10:34.834 --> 00:10:39.800
a solid chance that they're not going to
expose those direct settings for you.

186
00:10:40.920 --> 00:10:45.783
But if you go the RDS route, you can
match your local developer settings or

187
00:10:45.783 --> 00:10:49.800
container settings one to one
to your deployment settings.

188
00:10:51.090 --> 00:10:53.210
And that is actually what
we do at my job as well.

189
00:10:53.210 --> 00:10:56.990
There are a few settings that we
need because of our indexes and

190
00:10:56.990 --> 00:10:58.890
how much data we load into dev.

191
00:10:58.890 --> 00:11:04.497
Even we have a parameter group in
Amazon that when the service starts,

192
00:11:04.497 --> 00:11:09.250
it sets those settings so
that they match one to one.

193
00:11:09.250 --> 00:11:12.613
The other side of it is, okay,
well then how do you make sure that all

194
00:11:12.613 --> 00:11:14.930
the developers are in
sync with the database?

195
00:11:16.130 --> 00:11:19.016
I actually talk about
this in my first course,

196
00:11:19.016 --> 00:11:22.570
which is there are ways of
solving that with automation.

197
00:11:23.770 --> 00:11:29.792
What we do and what I've adapted to
now because of what I do at my job,

198
00:11:29.792 --> 00:11:34.570
is we use templates for
all the repositories.

199
00:11:34.570 --> 00:11:39.235
So, for example, the Docker compose file
isn't something the developer creates,

200
00:11:39.235 --> 00:11:43.641
it's something DevOps gives them and
says, here's your Docker compose file,

201
00:11:43.641 --> 00:11:44.770
it's in your repo.

202
00:11:44.770 --> 00:11:48.669
And then we own that file,
like in GitHub, under code owners,

203
00:11:48.669 --> 00:11:50.460
we own all of those files.

204
00:11:50.460 --> 00:11:53.371
And so at any time we can go in and
change them, update them,

205
00:11:53.371 --> 00:11:54.780
make sure they're in sync.

206
00:11:54.780 --> 00:11:59.199
And so that's a part of scale is
like being able to work around

207
00:11:59.199 --> 00:12:02.501
the people while they're working, right?

208
00:12:02.501 --> 00:12:07.311
So everyone in my company kind of
expects anybody in DevOps to go

209
00:12:07.311 --> 00:12:12.390
into their repo at any time and
make a change and just be like, hey,

210
00:12:12.390 --> 00:12:18.240
the expectation from us is then to make
it in a way where it's not impactful.

211
00:12:19.440 --> 00:12:22.158
We go into the repo, we make changes,
we double check it, triple check it,

212
00:12:22.158 --> 00:12:23.680
make sure everything's working.

213
00:12:23.680 --> 00:12:26.960
And then we go, okay,
we've deployed this new postgres version.

214
00:12:26.960 --> 00:12:28.960
You guys all have PRs now open.

215
00:12:28.960 --> 00:12:30.960
Please merge them in when you can.

216
00:12:30.960 --> 00:12:35.040
And then now we've all moved to either
a new parameter or a new version.

217
00:12:36.720 --> 00:12:40.502
We're actually in the process
right now of doing that with node,

218
00:12:40.502 --> 00:12:43.410
we're on 18 and
we want to get to 22, I think.

219
00:12:43.410 --> 00:12:45.650
Yeah, and so we're gonna be doing that.

220
00:12:45.650 --> 00:12:47.570
We're going to basically be generating.

221
00:12:47.570 --> 00:12:51.250
We don't manage the package JSON,
but we manage the dockerfile.

222
00:12:51.250 --> 00:12:55.154
So we upgrade all the versions of Node in
the Docker files and then we say, okay,

223
00:12:55.154 --> 00:12:57.329
all of your Docker files
have been updated.

224
00:12:57.329 --> 00:12:58.250
Please merge them in.

225
00:12:58.250 --> 00:12:59.250
Pipelines are green.

226
00:12:59.250 --> 00:13:04.530
If not, please fix and then merge in so
it's a bit of a dance.

227
00:13:06.370 --> 00:13:08.532
Just to get the technology is one thing,
but

228
00:13:08.532 --> 00:13:11.280
then figuring out how to have
that dance of like, okay,

229
00:13:11.280 --> 00:13:15.510
let's make sure everybody's in sync is
a completely separate challenge than that.

230
00:13:15.510 --> 00:13:20.950
So, from the tech side, RDS would
probably give you the ability to do that.

231
00:13:20.950 --> 00:13:24.924
Basically, we're going to be replacing
Supabase, we're going to be using rds,

232
00:13:24.924 --> 00:13:26.550
we're going to be keeping ecr.

233
00:13:26.550 --> 00:13:28.870
Again, we have no need to move that.

234
00:13:28.870 --> 00:13:33.654
And what's also nice about this is we
would not impact our current deployments

235
00:13:33.654 --> 00:13:37.590
to App Runner,
even because we're not getting.

236
00:13:37.590 --> 00:13:40.996
Even though we're using rds, it doesn't
mean we have to delete the post or

237
00:13:40.996 --> 00:13:43.430
the Supabase instance right away.

238
00:13:43.430 --> 00:13:47.618
There could be a cost there where it's
just like, okay, we'll keep Supabase

239
00:13:47.618 --> 00:13:52.150
up until everything's ready to go and
then we'll just switch over, right?

240
00:13:52.150 --> 00:13:55.750
That means that deployments can keep
running, and I highly encourage that.

241
00:13:56.950 --> 00:14:00.580
This phase and going into this phase,
and the reason why I'm talking so

242
00:14:00.580 --> 00:14:04.452
much is just because I want you guys to
understand that you can go through this

243
00:14:04.452 --> 00:14:06.710
phase without making everybody mad at you.

244
00:14:08.070 --> 00:14:12.512
I've done it, I've gone through it,
but it takes a lot of planning and

245
00:14:12.512 --> 00:14:17.179
consideration of what everything that
you're touching and what are those

246
00:14:17.179 --> 00:14:22.510
points to the developers and how it
could impact them and stuff like that.

247
00:14:22.510 --> 00:14:24.506
So, yeah, in this case, technically,

248
00:14:24.506 --> 00:14:27.630
it does mean everything from
phase two could stay online.

249
00:14:27.630 --> 00:14:30.505
You'd be fully able to keep doing that,
and

250
00:14:30.505 --> 00:14:33.536
then you could just
basically flip a switch and

251
00:14:33.536 --> 00:14:39.230
then you'd go over to deploying directly
to ECS and your database, all that stuff.

252
00:14:39.230 --> 00:14:42.686
The only thing I would say you may
have is you would have to do a data

253
00:14:42.686 --> 00:14:43.840
migration, right?

254
00:14:43.840 --> 00:14:48.880
You'd have to figure out a way to get all
of your data out of Supabase and into rds.

255
00:14:48.880 --> 00:14:53.040
And you might need like, one night of
maintenance where it's low traffic and

256
00:14:53.040 --> 00:14:56.944
you can do that, but outside of that,
it should be a completely online,

257
00:14:56.944 --> 00:14:58.160
seamless migration.

