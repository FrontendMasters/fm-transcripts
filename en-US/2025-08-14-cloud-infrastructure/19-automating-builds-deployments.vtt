WEBVTT

1
00:00:00.160 --> 00:00:04.050
&gt;&gt; Erik Reinert: To recap really quickly,
really fast, what have we done so far,

2
00:00:04.050 --> 00:00:04.560
right?

3
00:00:06.160 --> 00:00:09.597
We came out of stage one with
a deployed environment and

4
00:00:09.597 --> 00:00:12.080
a process that allows us to ship code.

5
00:00:12.080 --> 00:00:13.600
Easiest way to put it.

6
00:00:13.600 --> 00:00:16.603
We went into stage two, we realized, okay,

7
00:00:16.603 --> 00:00:21.440
this is great that we have this set up,
but it's kind of specific.

8
00:00:21.440 --> 00:00:23.040
We could use some improving here.

9
00:00:23.040 --> 00:00:24.640
We knew a lot of painpoints.

10
00:00:24.640 --> 00:00:28.114
Again, we all went through the pain points
of having to remember the commands and

11
00:00:28.114 --> 00:00:30.480
setting up the environment and
da, da, da, da, da.

12
00:00:32.540 --> 00:00:37.140
I just want to reiterate that a lot
of this isn't just creating cloud

13
00:00:37.140 --> 00:00:40.620
infrastructure and
building things in the cloud.

14
00:00:42.300 --> 00:00:46.015
A lot of creating deployments and
infrastructure and

15
00:00:46.015 --> 00:00:51.628
stuff like that is also improving your
environment and what you're working in,

16
00:00:51.628 --> 00:00:57.340
making it so that developers can move fast
but also still do complex operations.

17
00:00:57.340 --> 00:00:59.820
That's really the problem
you're trying to solve.

18
00:01:01.180 --> 00:01:04.730
If a dev is just like you said earlier,
is it really just this?

19
00:01:04.730 --> 00:01:06.330
Yeah, it really is just that.

20
00:01:06.330 --> 00:01:08.650
Because that's the point, right?

21
00:01:08.650 --> 00:01:12.088
Is to make it so that if a dev
is just brand new to a project,

22
00:01:12.088 --> 00:01:17.181
they don't necessarily need to know what's
Dockers running underneath the hood or

23
00:01:17.181 --> 00:01:18.490
anything like that.

24
00:01:18.490 --> 00:01:20.650
You've abstracted that
problem away from them.

25
00:01:20.650 --> 00:01:22.970
They just need to know the make
commands that are available.

26
00:01:22.970 --> 00:01:24.810
That's it, right?

27
00:01:24.810 --> 00:01:28.010
And so again, even though it was
such a challenge in the first part,

28
00:01:28.010 --> 00:01:31.730
we've now solved that problem and you
could see the value that that provides.

29
00:01:31.730 --> 00:01:35.646
Like, that was the goal of that whole
experiment was to show you the value that

30
00:01:35.646 --> 00:01:37.890
that provides so
that you walk away with it.

31
00:01:37.890 --> 00:01:41.170
So we added a make file,
we added migrations, right?

32
00:01:41.170 --> 00:01:46.138
We said, okay, well, you know, copying and
pasting schema into a query document or

33
00:01:46.138 --> 00:01:50.554
query, you know, input box, and
then hoping to God it works, maybe isn't

34
00:01:50.554 --> 00:01:55.510
the best approach, maybe we should like
use a tool that does this really well.

35
00:01:55.510 --> 00:01:57.750
And so we added migrations as well.

36
00:01:57.750 --> 00:02:01.727
Two, like, nothing related to
infrastructure, whatever, but two really

37
00:02:01.727 --> 00:02:06.230
huge wins that are going to make it so
that we ship code faster, right?

38
00:02:06.230 --> 00:02:07.910
Improving the docker file.

39
00:02:07.910 --> 00:02:11.469
That improvement is really
focused on cost, right?

40
00:02:11.469 --> 00:02:14.950
Like, how much are you
spending in storage and ECR?

41
00:02:14.950 --> 00:02:19.446
It's a lot easier to store a 90 megabyte
image than a 300 megabyte image or

42
00:02:19.446 --> 00:02:21.830
a 500 megabyte image, right?

43
00:02:21.830 --> 00:02:24.910
You're cutting down those storage
costs when you make that.

44
00:02:24.910 --> 00:02:28.753
On top of it, the other changes we did
around, you know, making it cache in

45
00:02:28.753 --> 00:02:32.850
the specific places that we wanted it to
will make your developers move faster.

46
00:02:32.850 --> 00:02:35.290
Make Your pipelines go faster, right?

47
00:02:35.290 --> 00:02:36.556
So these are small changes and

48
00:02:36.556 --> 00:02:40.010
they might not be fully noticeable on
the value that you're getting out of them.

49
00:02:40.010 --> 00:02:42.666
But again,
we didn't make any massive changes and

50
00:02:42.666 --> 00:02:46.690
we're getting a lot of value out of it so
that we can grow and move faster.

51
00:02:46.690 --> 00:02:50.533
We still have a lot of like manual
process, we still have to run the commands

52
00:02:50.533 --> 00:02:54.570
every time we want to do testing, and
we don't really want to do that, right?

53
00:02:54.570 --> 00:02:58.933
Like, we really want to make it so that
like, we just make our changes, push it,

54
00:02:58.933 --> 00:03:02.350
and then something does those
rudimentary steps for us.

55
00:03:02.350 --> 00:03:06.190
And that's really where
GitHub Actions comes into play.

56
00:03:06.190 --> 00:03:11.470
Now I will say one thing, which is
don't abuse your CI pipelines, please.

57
00:03:11.470 --> 00:03:14.670
For the people who manage them,
please don't abuse your pipelines.

58
00:03:14.670 --> 00:03:15.710
What do I mean by that?

59
00:03:15.710 --> 00:03:20.562
What I mean is that things that
you can run locally that will save

60
00:03:20.562 --> 00:03:24.590
you time rather than just
expecting it to run in CI.

61
00:03:24.590 --> 00:03:25.850
Try and do that.

62
00:03:25.850 --> 00:03:26.490
You know what I mean?

63
00:03:26.490 --> 00:03:28.908
Like, if you can run
your unit tests locally,

64
00:03:28.908 --> 00:03:32.170
of course there are going to be
unit tests that are run in CI.

65
00:03:32.170 --> 00:03:36.570
But like, maybe don't just blindly commit
your code and hope that your tests work.

66
00:03:36.570 --> 00:03:39.530
Like maybe actually run the test locally,
right?

67
00:03:39.530 --> 00:03:42.236
If you wanna talk about
real impactful changes,

68
00:03:42.236 --> 00:03:46.970
it's stuff like that that's gonna save
you money and save you time in CI.

69
00:03:46.970 --> 00:03:51.802
I know we have stuff that happens
at my company where people kind

70
00:03:51.802 --> 00:03:56.542
of blindly push code and
I will see fail, fail, fail, fail,

71
00:03:56.542 --> 00:04:01.300
fail, fixed problem success,
you know, and like that's.

72
00:04:01.300 --> 00:04:04.221
It's just like there are times
where I feel like I have to go to

73
00:04:04.221 --> 00:04:07.771
the developer and be like, hey man,
I get what you're doing, but like,

74
00:04:07.771 --> 00:04:11.060
just run the test locally before
it fails on lint nine times, okay?

75
00:04:11.060 --> 00:04:14.220
Like, just don't just be like,
fix, push, fix, push.

76
00:04:14.220 --> 00:04:18.020
Like try and understand what CI is doing.

77
00:04:18.020 --> 00:04:18.980
So that's our goal.

78
00:04:18.980 --> 00:04:22.020
Our goal is just to put the stuff in CI
that we don't really wanna hav run twice.

79
00:04:23.570 --> 00:04:26.290
So what I'm going to do first is,
I'm going to create a new directory.

80
00:04:26.290 --> 00:04:30.410
I'm gonna say mkdir.p.github/workflows.

81
00:04:30.410 --> 00:04:35.513
So I'm actually gonna make
a directory in a directory, and

82
00:04:35.513 --> 00:04:40.516
then I'm gonna create a file
called github.workflows,

83
00:04:40.516 --> 00:04:43.730
build and deploy.yaml, right?

84
00:04:43.730 --> 00:04:47.522
So I'm going to create a new file and
then I'm going to open up that file so

85
00:04:47.522 --> 00:04:49.090
I have a blank YAML file here.

86
00:04:49.090 --> 00:04:52.240
Show of hands,
how many of you worked with YAML before?

87
00:04:52.240 --> 00:04:53.160
Okay, all of you.

88
00:04:53.160 --> 00:04:53.800
Fantastic.

89
00:04:53.800 --> 00:04:55.960
YAML is the standard language that we do.

90
00:04:55.960 --> 00:04:59.448
All of our configuring in
Terraform uses hcl, but

91
00:04:59.448 --> 00:05:03.440
most of it's like JSON, YAML,
HCL and stuff like that.

92
00:05:03.440 --> 00:05:06.712
So get comfortable with YAML because
you're definitely going to be using it

93
00:05:06.712 --> 00:05:07.280
quite a bit.

94
00:05:07.280 --> 00:05:12.280
So at the top of the file we are going
to add the name of our workflow.

95
00:05:12.280 --> 00:05:15.360
We're going to add the name of the actual
workflow that we are creating.

96
00:05:15.360 --> 00:05:17.120
In this case,
it's called Build and Deploy.

97
00:05:17.120 --> 00:05:19.020
It's the same name of our file.

98
00:05:19.020 --> 00:05:22.863
The next thing underneath we're going
to add to that is what is called our

99
00:05:22.863 --> 00:05:23.660
triggers.

100
00:05:23.660 --> 00:05:27.057
So this is a GitHub Action specific thing,
but

101
00:05:27.057 --> 00:05:32.620
this tells GitHub Actions what exactly
should tell it to run pipelines.

102
00:05:32.620 --> 00:05:37.020
So there are really two things that
are telling it to run pipelines.

103
00:05:37.020 --> 00:05:42.780
The first one is a pull request and the
second one is a push to the main branch.

104
00:05:42.780 --> 00:05:47.219
So that means that if I open up a pull
request anywhere in this repository or, or

105
00:05:47.219 --> 00:05:50.448
if I push to the main branch
anywhere in this repository,

106
00:05:50.448 --> 00:05:52.160
then I should get a pipeline.

107
00:05:52.160 --> 00:05:59.520
Effectively the next thing I want to
do is I want to add our very first job.

108
00:05:59.520 --> 00:06:03.440
We are going to take
the Docker approach here.

109
00:06:03.440 --> 00:06:05.520
There are multiple ways of doing this.

110
00:06:05.520 --> 00:06:08.504
I could make a job that installs Go and

111
00:06:08.504 --> 00:06:14.060
then runs the go build on the actual
runner itself for the job.

112
00:06:14.060 --> 00:06:16.620
But that Go version may change.

113
00:06:16.620 --> 00:06:21.420
There may be other things that happen on
the runner that are impacting the build.

114
00:06:21.420 --> 00:06:23.990
This is how Docker can be
really helpful because again,

115
00:06:23.990 --> 00:06:26.300
we've already got
the Make Build Image command.

116
00:06:26.300 --> 00:06:28.220
We're already using Docker to do it.

117
00:06:28.220 --> 00:06:31.740
Might as well just use Docker in
our pipelines to build the image.

118
00:06:31.740 --> 00:06:36.782
And we're shipping a container, so
there's really no need to try and

119
00:06:36.782 --> 00:06:39.780
run Go directly in the run or
in the build.

120
00:06:39.780 --> 00:06:44.038
What we're really going to do is we're
going to tell it that our build stage

121
00:06:44.038 --> 00:06:46.010
builds us a image.

122
00:06:46.010 --> 00:06:47.890
Actually, that's all I'm going to do for
now.

123
00:06:47.890 --> 00:06:50.130
Just to get this started,
I'm going to do that.

124
00:06:50.130 --> 00:06:54.212
And the reason why is because
that is all you need really

125
00:06:54.212 --> 00:06:57.370
to start to get a pipeline running.

126
00:06:57.370 --> 00:06:59.690
I commit my code and
I'm going to push it up.

127
00:06:59.690 --> 00:07:02.650
Now again, if you want to access
this code, go check it out.

128
00:07:02.650 --> 00:07:06.259
But you can see here that
I pushed my code and hey,

129
00:07:06.259 --> 00:07:09.920
look at that,
I got a little orange circle.

130
00:07:09.920 --> 00:07:11.360
We're actually cooking now.

131
00:07:11.360 --> 00:07:14.640
So if we go in here, look at that.

132
00:07:15.840 --> 00:07:21.360
GitHub Actions is running the exact same
command that I run to build my container.

133
00:07:21.360 --> 00:07:26.606
Now, if we stopped here, the value we
get out of this is every time we push

134
00:07:26.606 --> 00:07:31.520
code to our repo, we should know
that the make build command works.

135
00:07:32.720 --> 00:07:33.600
So that's nice.

136
00:07:33.600 --> 00:07:37.505
Good to know that at least every time we
make a change that the build, you know,

137
00:07:37.505 --> 00:07:38.820
the build command works.

138
00:07:38.820 --> 00:07:41.860
But there may be more things we want,
right?

139
00:07:41.860 --> 00:07:45.380
Like we kind of want to know that
the migrations run successfully, right?

140
00:07:45.380 --> 00:07:48.620
We want it to also, like, do a deployment
for us and all this other stuff.

