WEBVTT

1
00:00:00.400 --> 00:00:03.664
&gt;&gt; Erik Reinert: So now what we want to
do is we actually want to start laying

2
00:00:03.664 --> 00:00:07.611
the foundation work for
our infrastructure and our automation, and

3
00:00:07.611 --> 00:00:09.800
we're going to focus this entirely.

4
00:00:09.800 --> 00:00:13.325
And what I think you should do when
you're building Terraform is entirely on

5
00:00:13.325 --> 00:00:15.760
the problems that you're trying to solve,
right?

6
00:00:15.760 --> 00:00:19.160
So don't think about like,
I need a bucket.

7
00:00:19.160 --> 00:00:23.028
And then don't think of it too
technically, think of it in the plainest

8
00:00:23.028 --> 00:00:27.130
terms that you can like,
I want this module to solve this problem.

9
00:00:27.130 --> 00:00:32.857
And the first problem that we kind of want
to solve is not networking or databases or

10
00:00:32.857 --> 00:00:38.330
anything like that, even though those
are problems that we want to solve.

11
00:00:38.330 --> 00:00:43.122
The first problem we really want to solve
is figuring out how to describe our

12
00:00:43.122 --> 00:00:44.730
environments, right?

13
00:00:44.730 --> 00:00:47.545
And the reason for
that is because I want to create,

14
00:00:47.545 --> 00:00:51.606
I want to just go into Terraform,
copy an environment module, paste it,

15
00:00:51.606 --> 00:00:55.640
change the name of that environment,
and now I get everything.

16
00:00:55.640 --> 00:01:00.960
I get ecs, I get cdn, I get load balancer,
I get everything, right?

17
00:01:00.960 --> 00:01:03.480
So that's the composability that I want.

18
00:01:03.480 --> 00:01:07.346
So before I start thinking about VPs or
VPCs and all of this other stuff,

19
00:01:07.346 --> 00:01:11.150
I want to kind of think of how they're
going to be organized together so

20
00:01:11.150 --> 00:01:14.440
that I don't have to copy
tons of things individually.

21
00:01:14.440 --> 00:01:18.039
I can have like a huge module
that's my entire environment,

22
00:01:18.039 --> 00:01:21.960
and then I can just be like,
okay, device, staging, prod.

23
00:01:21.960 --> 00:01:26.760
And then everything gets created
underneath that to do that.

24
00:01:26.760 --> 00:01:29.429
And again, this will make a little
bit more sense once we get into it

25
00:01:29.429 --> 00:01:30.360
a little bit more.

26
00:01:30.360 --> 00:01:34.675
What I'm going to do is I'm going to
create a directory inside of Terraform

27
00:01:34.675 --> 00:01:35.640
called Module.

28
00:01:36.680 --> 00:01:40.360
Then inside of Module, I'm going to
create a directory called environment.

29
00:01:41.800 --> 00:01:45.850
What we are going to do is we
are going to separate all of

30
00:01:45.850 --> 00:01:50.350
our main problems that we
are trying to solve into modules.

31
00:01:51.860 --> 00:01:55.940
The first module that we are going
to create is what's called

32
00:01:55.940 --> 00:01:57.860
an environment module.

33
00:01:57.860 --> 00:02:01.940
Now this doesn't mean that this module
will be directly doing one thing.

34
00:02:01.940 --> 00:02:06.842
It means that it's really just about
grouping all of the other problems that

35
00:02:06.842 --> 00:02:10.289
we're trying to solve together,
like networking,

36
00:02:10.289 --> 00:02:13.540
like again, database, whatever else.

37
00:02:13.540 --> 00:02:16.060
So inside of this directory
I'm going to go into it.

38
00:02:16.060 --> 00:02:18.389
So I'm going to go into module,
environment, and

39
00:02:18.389 --> 00:02:21.520
inside of this directory I'm
going to create some new files.

40
00:02:21.520 --> 00:02:25.760
So the first thing I'm going to do is
I'm going to create a main TF file.

41
00:02:25.760 --> 00:02:29.453
Main TF file is kind of
just like an arbitrary or

42
00:02:29.453 --> 00:02:35.440
standard way of making like an entry
point to all of your automation.

43
00:02:35.440 --> 00:02:40.017
You don't have to call it main TF to be
clear, as long as any Terraform files

44
00:02:40.017 --> 00:02:43.652
exist in the directory,
then Terraform will see them, but

45
00:02:43.652 --> 00:02:48.521
you'll more than likely see like a main TF
or like all of the main stuff exists and

46
00:02:48.521 --> 00:02:52.470
then other files that
are relative to that main tf.

47
00:02:52.470 --> 00:02:55.874
However, we're not going to add
anything to this main TF yet

48
00:02:55.874 --> 00:02:58.430
because we have no other resources, right?

49
00:02:58.430 --> 00:03:00.710
So this is technically
like an empty environment.

50
00:03:00.710 --> 00:03:05.141
But there are a couple of other things we
know that this environment needs in order

51
00:03:05.141 --> 00:03:06.470
to work.

52
00:03:06.470 --> 00:03:11.343
So one of the first things we're going
to do is we're going to create a data

53
00:03:11.343 --> 00:03:15.520
TF file, and in that file I'm
going to put in two data lookups.

54
00:03:17.030 --> 00:03:20.550
Terraform doesn't just create resources,

55
00:03:20.550 --> 00:03:27.110
it also allows you to look up resources
in the provider that you're using.

56
00:03:27.110 --> 00:03:31.295
So for example,
if something already exists in aws,

57
00:03:31.295 --> 00:03:36.470
you don't necessarily have to
create it if you don't want to.

58
00:03:36.470 --> 00:03:41.950
And I actually do this a lot in
my enterprise course that I did.

59
00:03:41.950 --> 00:03:46.442
I talk a lot about separation of concerns
where you would have a network terraform

60
00:03:46.442 --> 00:03:49.876
repo, and then you would have
a database terraform repo, and

61
00:03:49.876 --> 00:03:54.762
then you'd have all these other repos that
are completely separate, they don't share

62
00:03:54.762 --> 00:03:59.870
the same code bases, but they all work
together and build on top of each other.

63
00:03:59.870 --> 00:04:01.201
The reason for that and

64
00:04:01.201 --> 00:04:06.350
why we do that is because it allows us
to separate the life cycle of changes.

65
00:04:06.350 --> 00:04:09.350
I can update databases
entirely on their own.

66
00:04:09.350 --> 00:04:11.630
I don't have to worry
about touching network or

67
00:04:11.630 --> 00:04:15.620
running anything related to network, or
even planning against network, because

68
00:04:15.620 --> 00:04:19.770
that's its own completely separate module
and its own completely separate repo.

69
00:04:19.770 --> 00:04:23.742
And so what we do is we say, okay,
we run the network repo first,

70
00:04:23.742 --> 00:04:27.421
then we run the database repo,
then we run the ECS repo, and

71
00:04:27.421 --> 00:04:32.057
you keep blocking these repos together
to where they become this stack that

72
00:04:32.057 --> 00:04:35.610
everything's running on,
but each repo is separated.

73
00:04:35.610 --> 00:04:38.475
So if I just want to change
one unit in that stack and

74
00:04:38.475 --> 00:04:43.118
it's provisioned like 50 databases,
then I can just change the databases and

75
00:04:43.118 --> 00:04:46.910
I don't have to worry about
impacting anything else.

76
00:04:46.910 --> 00:04:49.790
And so that's where data
lookups can be really nice.

77
00:04:49.790 --> 00:04:52.318
Because then you can say like, okay,

78
00:04:52.318 --> 00:04:56.750
in the database automation we
expect the network to exist.

79
00:04:56.750 --> 00:04:58.905
Cool.
Well, if the network exists,

80
00:04:58.905 --> 00:05:03.086
then I can do a data lookup to find the
VPC id and now I can create Databases in

81
00:05:03.086 --> 00:05:06.350
that vpc even though they're
not in the same repo per se.

82
00:05:08.090 --> 00:05:09.730
So data lookups are really nice for that.

83
00:05:09.730 --> 00:05:10.890
We're not going to be doing that.

84
00:05:10.890 --> 00:05:14.650
We are just going to be creating
a mono repo of Terraform today.

85
00:05:14.650 --> 00:05:16.410
That's just because it's easy.

86
00:05:16.410 --> 00:05:19.610
I've had many arguments about
which approach is better.

87
00:05:19.610 --> 00:05:24.090
I would say the easiest approach is
the one that fits your team the best.

88
00:05:24.090 --> 00:05:27.290
Because if you have tons of repos,
that is a lot more work.

89
00:05:27.290 --> 00:05:30.422
You have to go around to a lot more
places, click a lot more buttons and

90
00:05:30.422 --> 00:05:33.500
it can be annoying versus just like
having everything in one place.

91
00:05:34.940 --> 00:05:36.780
Cool.
Okay, so we've got data.

92
00:05:36.780 --> 00:05:42.580
The next thing we want to
create is a variables TF file.

93
00:05:42.580 --> 00:05:45.582
So again you can see here I have
a data file, I have a main file and

94
00:05:45.582 --> 00:05:47.260
I have a variables file.

95
00:05:47.260 --> 00:05:51.660
I'm going to edit this file and
I'm going to paste in two variables.

96
00:05:51.660 --> 00:05:52.488
So remember,

97
00:05:52.488 --> 00:05:56.700
at the root of our module we created
a locals file with a bastion ingress.

98
00:05:58.310 --> 00:06:02.116
However, now in the environment
module we're making it so

99
00:06:02.116 --> 00:06:05.190
that the bastion ingress is a variable.

100
00:06:05.190 --> 00:06:06.550
Why are we doing that?

101
00:06:06.550 --> 00:06:10.470
Why am I not just hard coding
the value into the environment?

102
00:06:14.150 --> 00:06:19.600
&gt;&gt; Speaker 2: Because you're gonna
have an amount of bastion hosts for

103
00:06:19.600 --> 00:06:21.310
n environments.

104
00:06:21.310 --> 00:06:24.919
&gt;&gt; Erik Reinert: Yep, yep, and what I
wanna do with that is I wanna make it so

105
00:06:24.919 --> 00:06:28.620
that if it's dev,
only these people can have access to it.

106
00:06:28.620 --> 00:06:31.740
And if it's prod, then only these
people can have access to it.

107
00:06:31.740 --> 00:06:35.940
So even though an environment is
really a collection of other modules,

108
00:06:35.940 --> 00:06:39.660
I can still give it parameters
that are environment specific.

109
00:06:40.780 --> 00:06:43.628
So if I wanted to,
if I wanted to say like, okay,

110
00:06:43.628 --> 00:06:47.171
I only want these people to be
able to access the dev bastion so

111
00:06:47.171 --> 00:06:51.100
devs can go in and connect to nodes
if they need to develop stuff.

112
00:06:51.100 --> 00:06:54.054
But in production, I don't want
anybody to be able to do that, or

113
00:06:54.054 --> 00:06:56.390
I want specific people
to be able to do that.

114
00:06:56.390 --> 00:07:00.329
If it's a variable and it's set at
the environment level in that environment

115
00:07:00.329 --> 00:07:03.750
module, then it's just a little
value I have to tweak.

116
00:07:03.750 --> 00:07:05.670
Then it's really easy to manage.

117
00:07:05.670 --> 00:07:10.065
This is why the environment module exists,
is to have a high level set of

118
00:07:10.065 --> 00:07:14.710
configuration that then bleeds down
into all of your other components.

119
00:07:14.710 --> 00:07:18.094
So that if you want to tweak just
one thing for that environment,

120
00:07:18.094 --> 00:07:19.670
you can easily do that again.

121
00:07:19.670 --> 00:07:22.981
Legos, if you like Legos, you're
definitely going to enjoy Terraform,

122
00:07:22.981 --> 00:07:24.630
that's for sure.

123
00:07:24.630 --> 00:07:28.980
The name is also very explanatory,
right, dev staging, prod.

124
00:07:28.980 --> 00:07:31.450
If you wanna have a random name,
like, I don't know,

125
00:07:31.450 --> 00:07:33.460
maybe you need a demo environment, right?

126
00:07:33.460 --> 00:07:35.940
Other things like that,
the composability here.

127
00:07:35.940 --> 00:07:38.840
Think about it if somebody
came up to you and said, hey,

128
00:07:38.840 --> 00:07:43.289
I need an entirely new environment of our
deployment or of our infrastructure today,

129
00:07:43.289 --> 00:07:45.540
how easy would it be at
your jobs to do that?

130
00:07:48.020 --> 00:07:49.500
&gt;&gt; Speaker 3: Use Terraform,
so pretty easy.

131
00:07:49.500 --> 00:07:50.660
&gt;&gt; Erik Reinert: Okay, yes, there you go.

132
00:07:50.660 --> 00:07:54.570
Yeah, if you're using Terraform,
it is, it is pretty easy.

133
00:07:54.570 --> 00:07:59.417
But if you're not, it's just like,
my gosh, so, yeah, when you're here and

134
00:07:59.417 --> 00:08:03.923
you're doing it, again, going back to
think about phase one and phase two,

135
00:08:03.923 --> 00:08:09.048
you're not thinking in this world of like,
okay, well, now I can have a little bit

136
00:08:09.048 --> 00:08:13.810
of more nice things and have a little bit
more customization and stuff like that.

137
00:08:13.810 --> 00:08:17.514
This is that kind of future proofing of
like, well, we don't know what the name of

138
00:08:17.514 --> 00:08:21.290
the environment might be, so let's make
it anything so that we can have anything.

139
00:08:23.080 --> 00:08:24.520
Okay, cool.

140
00:08:24.520 --> 00:08:27.080
&gt;&gt; Speaker 3: And
I have gotten that type of request before.

141
00:08:27.080 --> 00:08:27.875
&gt;&gt; Erik Reinert: Yeah.
Yeah.

142
00:08:27.875 --> 00:08:29.261
&gt;&gt; Speaker 3: From like a C suite.

143
00:08:29.261 --> 00:08:29.776
&gt;&gt; Erik Reinert: Yes.

144
00:08:29.776 --> 00:08:32.241
&gt;&gt; Speaker 3: Hey, we need to-
&gt;&gt; Erik Reinert: Yeah.

145
00:08:32.241 --> 00:08:36.760
&gt;&gt; Speaker 3: Show something to
a client or a customer or whatever.

146
00:08:36.760 --> 00:08:39.160
Can you make us a separate environment?

147
00:08:39.160 --> 00:08:40.920
&gt;&gt; Erik Reinert: Yep, it's very common.

148
00:08:40.920 --> 00:08:44.410
That's why it's good to have
composability around your environments,

149
00:08:44.410 --> 00:08:45.600
because you will get it.

150
00:08:45.600 --> 00:08:47.120
I get.
I've gotten it before too.

151
00:08:47.120 --> 00:08:50.386
And again, thankfully we used Terraform,
but, you know,

152
00:08:50.386 --> 00:08:52.640
ours is still a little bit more daunting.

153
00:08:52.640 --> 00:08:59.480
But yeah, I mean, yeah, it's gonna happen,
[LAUGH] it's gonna happen.

154
00:08:59.480 --> 00:09:02.320
So being prepared for it is very powerful.

155
00:09:02.320 --> 00:09:05.600
Especially when you could say,
yeah, and they're like, okay, cool.

156
00:09:05.600 --> 00:09:09.613
You know,
&gt;&gt; Speaker 3: well, even like, you know,

157
00:09:09.613 --> 00:09:10.920
you'll.

158
00:09:10.920 --> 00:09:15.070
Let's say you have dev, Stage and prod.

159
00:09:15.070 --> 00:09:15.591
Right.
But

160
00:09:15.591 --> 00:09:19.750
maybe the company is trying to figure
out a way to save money or something.

161
00:09:19.750 --> 00:09:22.670
It's like, if you guys really
don't need a stage environment.

162
00:09:22.670 --> 00:09:23.832
&gt;&gt; Erik Reinert: Yeah.
&gt;&gt; Speaker 3: Let's get rid of all

163
00:09:23.832 --> 00:09:27.310
of our stage environments on the apps and
services that we don't need.

164
00:09:27.310 --> 00:09:27.830
&gt;&gt; Erik Reinert: Yep.

165
00:09:27.830 --> 00:09:29.150
&gt;&gt; Speaker 3: Stage environments.

166
00:09:29.150 --> 00:09:33.620
It's so much easier just to destroy
those stage environments with Terraform

167
00:09:33.620 --> 00:09:35.070
than doing it manually.

168
00:09:35.070 --> 00:09:35.910
So.
&gt;&gt; Erik Reinert: Yep.

169
00:09:35.910 --> 00:09:40.030
And you can decide if you want to as well,
making them more ephemeral.

170
00:09:40.030 --> 00:09:44.590
You know, maybe have environments per PR
versus like, environments all the time.

171
00:09:44.590 --> 00:09:45.450
Right.

172
00:09:45.450 --> 00:09:50.035
You have that composability now because
it's all in that definition it's very,

173
00:09:50.035 --> 00:09:50.970
very powerful.

174
00:09:54.650 --> 00:09:59.050
The next thing we want to do is we
actually want to go back to our root

175
00:09:59.050 --> 00:09:59.770
module.

176
00:09:59.770 --> 00:10:03.173
Because at this point we've
defined our environment module,

177
00:10:03.173 --> 00:10:05.931
we set up variables,
we know we want some data, but

178
00:10:05.931 --> 00:10:10.010
we don't have any resources or
other modules to put in it yet.

179
00:10:10.010 --> 00:10:15.205
But if I did, right now, if I just
did Terraform Plan, just for fun,

180
00:10:15.205 --> 00:10:20.761
it really wouldn't do anything because
I haven't added any resources or

181
00:10:20.761 --> 00:10:22.870
anything like that.

182
00:10:22.870 --> 00:10:27.590
But it also means that it
doesn't know my modules there.

183
00:10:27.590 --> 00:10:31.590
That's because I haven't used
it in my root level yet.

184
00:10:31.590 --> 00:10:37.083
Now what I want to do is I want to
create a main TF file at the root of

185
00:10:37.083 --> 00:10:44.080
the project at the root where back end
locals and all that other stuff is.

186
00:10:44.080 --> 00:10:45.520
Then in here.

187
00:10:45.520 --> 00:10:49.280
I'm actually going to set
up our staging environment.

188
00:10:52.000 --> 00:10:56.655
What I'm going to do is I'm
going to say in my main TF file,

189
00:10:56.655 --> 00:11:02.320
I'm going to define a module,
I'm going to call it Staging.

190
00:11:02.320 --> 00:11:08.058
I'm gonna tell it that the source of
this module is my environment, right?

191
00:11:08.058 --> 00:11:12.319
I'm going to pass it the variables
bastion, ingress and

192
00:11:12.319 --> 00:11:17.470
name, and that's all I need
to create an environment.

193
00:11:17.470 --> 00:11:17.970
That's it.

194
00:11:22.550 --> 00:11:24.030
Let me just reopen it with color.

195
00:11:24.030 --> 00:11:25.070
There you go.

196
00:11:25.070 --> 00:11:28.190
So this is all like this,
and I wanna be clear.

197
00:11:28.190 --> 00:11:31.385
Another big benefit of using Terraform

198
00:11:31.385 --> 00:11:35.945
is to solve hard problems
with easy solutions, right?

199
00:11:35.945 --> 00:11:41.930
If I can as a developer, just come
in here and go, okay, Prod demo dev.

200
00:11:43.050 --> 00:11:43.930
Think about that.

201
00:11:43.930 --> 00:11:45.570
Think about underneath the hood.

202
00:11:45.570 --> 00:11:48.402
We're talking about five
different ECS clusters,

203
00:11:48.402 --> 00:11:52.250
five different CDN distributions,
five different.

204
00:11:52.250 --> 00:11:56.250
All of that stuff out of the box for
free, right?

205
00:11:56.250 --> 00:12:00.363
This is the power of IAC, when you
organize it well and you focus on what

206
00:12:00.363 --> 00:12:04.993
problem you're trying to solve,
not just like, I want an S3 bucket, yeah.

207
00:12:04.993 --> 00:12:05.954
&gt;&gt; Speaker 4: IAC.

208
00:12:05.954 --> 00:12:09.171
&gt;&gt; Erik Reinert: Infrastructure is code,
yeah, sorry if you've never heard of

209
00:12:09.171 --> 00:12:12.280
the term before,
IAC equals infrastructure as code, yeah.

210
00:12:14.120 --> 00:12:17.324
Cool.
Okay, so now if I do a Terraform plan,

211
00:12:17.324 --> 00:12:19.000
I should get an error.

212
00:12:20.440 --> 00:12:21.880
Yeah, there you go.

213
00:12:21.880 --> 00:12:24.832
So whenever you add a module to Terraform,

214
00:12:24.832 --> 00:12:28.200
Terraform has to first
initialize that module.

215
00:12:29.320 --> 00:12:35.741
I don't know why, but what's ironic
is that if I do Terraform init,

216
00:12:35.741 --> 00:12:41.510
you'll see that it initializes
my staging module.

217
00:12:41.510 --> 00:12:47.313
But what you actually end up
with is effectively a reference

218
00:12:47.313 --> 00:12:52.390
to the directory in
the Terraform configuration.

219
00:12:52.390 --> 00:12:57.687
You'll see here that Terraform
underneath the hood adds my module with

220
00:12:57.687 --> 00:13:03.310
the key the path to it and then
the directory effectively that it's in.

221
00:13:03.310 --> 00:13:08.270
So this is something that's required
every time you create it or add a module.

222
00:13:08.270 --> 00:13:10.590
This is not required for resources.

223
00:13:10.590 --> 00:13:13.710
So you don't have to do Terraform in
it every time you add a resource.

224
00:13:13.710 --> 00:13:16.728
But if you add a module with
this specific module key,

225
00:13:16.728 --> 00:13:20.030
you have to do Terraform Init
otherwise it'll just fail.

226
00:13:20.030 --> 00:13:23.190
It'll say hey, you haven't initialized
first, please, please initialize.

227
00:13:23.190 --> 00:13:27.798
So whenever you're using modules, just
remember to do Terraform init before plan,

228
00:13:27.798 --> 00:13:30.360
otherwise it will error out and
be be mad at you.

229
00:13:32.040 --> 00:13:32.840
Cool.
Okay.

230
00:13:32.840 --> 00:13:37.160
And again, I can do plan one more
time now that I've done init and

231
00:13:37.160 --> 00:13:39.080
we should get no resources.

232
00:13:39.080 --> 00:13:43.931
But you will see that now we're actually
starting to see some of that data,

233
00:13:43.931 --> 00:13:45.320
those data lookups.

234
00:13:45.320 --> 00:13:49.743
So you can see here it first went out and
got the region that I'm using and

235
00:13:49.743 --> 00:13:52.490
they've got the caller identity as well.

236
00:13:52.490 --> 00:13:56.228
So that basically I can know in my
automation what region we're provisioning

237
00:13:56.228 --> 00:13:59.689
in and then like what's my account ID and
all that kinda stuff, right?

238
00:13:59.689 --> 00:14:02.970
So that just helps with everything
else that we are about to write.

