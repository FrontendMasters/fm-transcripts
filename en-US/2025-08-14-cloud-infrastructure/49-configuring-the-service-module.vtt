WEBVTT

1
00:00:00.160 --> 00:00:01.655
&gt;&gt; Erik Reinert: The last thing we need,
and

2
00:00:01.655 --> 00:00:05.960
this one's probably the most intricate
of all of the configuration objects.

3
00:00:05.960 --> 00:00:10.680
And you'll see as we go more and
more we get a little bit more advanced.

4
00:00:10.680 --> 00:00:13.600
Here is the service module.

5
00:00:13.600 --> 00:00:17.360
This is the service module right here and
it does quite a bit.

6
00:00:18.560 --> 00:00:23.267
Now, effectively the first thing
we do is we tell it which capacity

7
00:00:23.267 --> 00:00:25.042
provider that it's in.

8
00:00:25.042 --> 00:00:29.005
Again, if you notice at the top of the
editor you'll see spot right there, well,

9
00:00:29.005 --> 00:00:31.312
that's why those match
in naming convention.

10
00:00:31.312 --> 00:00:33.814
That I'm telling the service, hey,

11
00:00:33.814 --> 00:00:37.980
I want you to provision to
the spot capacity provider.

12
00:00:37.980 --> 00:00:42.232
If it doesn't have a capacity provider
that it matches, it will not deploy.

13
00:00:42.232 --> 00:00:44.544
So it'll just be in a broken state.

14
00:00:44.544 --> 00:00:47.147
Cluster ID, we give it the cluster ARN.

15
00:00:47.147 --> 00:00:49.420
Cluster name, we give it the cluster name.

16
00:00:49.420 --> 00:00:50.660
Image repository.

17
00:00:50.660 --> 00:00:53.853
So this one's a little bit of
string interpolation that we've got

18
00:00:53.853 --> 00:00:54.603
going on here.

19
00:00:54.603 --> 00:00:56.320
But it's just your ECR domain,

20
00:00:56.320 --> 00:00:59.830
it's just the ECR domain where
we push all of the images to.

21
00:00:59.830 --> 00:01:04.269
I'm just calculating the ID as well as
the region that you're pulling from

22
00:01:04.269 --> 00:01:08.710
effectively or that you're
building services on effectively.

23
00:01:08.710 --> 00:01:10.910
So you'll see I have
an image repository as well.

24
00:01:10.910 --> 00:01:16.406
FEM fdservice image tag var name
module cluster listener arn,

25
00:01:16.406 --> 00:01:19.990
which is for the listener arn.

26
00:01:19.990 --> 00:01:23.270
And again, the image tag,
for example, is a variable.

27
00:01:23.270 --> 00:01:27.970
So that means that we can give it
from a higher level and if we need,

28
00:01:27.970 --> 00:01:33.280
where else name service because we
don't really have any other service.

29
00:01:33.280 --> 00:01:36.440
So we can literally just
call this one service path.

30
00:01:36.440 --> 00:01:39.311
So again, I said that we had the ability

31
00:01:39.311 --> 00:01:43.320
to map which route the load
balancer can respond with.

32
00:01:43.320 --> 00:01:45.920
So in this case we're
mapping just slash star.

33
00:01:45.920 --> 00:01:47.680
So we're mapping everything.

34
00:01:47.680 --> 00:01:51.400
The port that the service listens on and
then the VPC id.

35
00:01:51.400 --> 00:01:55.488
And that's really everything related
to the actual like resources or

36
00:01:55.488 --> 00:01:57.780
configuration of the service itself.

37
00:01:57.780 --> 00:02:01.220
The next lines are all custom.

38
00:02:01.220 --> 00:02:03.073
The next lines are all custom and

39
00:02:03.073 --> 00:02:07.860
written with the intention to enable
the developer to do what they need to do.

40
00:02:07.860 --> 00:02:09.985
So the first one is the config, and

41
00:02:09.985 --> 00:02:15.540
the config is basically the unencrypted
open plain text environment variables.

42
00:02:15.540 --> 00:02:21.200
So you've seen us do the Google redirect
URL and the goose driver, right?

43
00:02:21.200 --> 00:02:26.589
Well, this is where we add environment
variables for the service.

44
00:02:26.589 --> 00:02:30.823
And to be fair, I don't think you really
need to manage environment variables in

45
00:02:30.823 --> 00:02:33.949
parameter store,
I think that's a little bit extra work.

46
00:02:33.949 --> 00:02:36.559
You can if you want, it's up to you.

47
00:02:36.559 --> 00:02:40.880
But in this case I don't think these
would change as much as secrets.

48
00:02:40.880 --> 00:02:44.064
So this I feel is fine to
have in terraform, but again,

49
00:02:44.064 --> 00:02:46.000
it's entirely up to you.

50
00:02:46.000 --> 00:02:49.571
Secrets are more specific because you
would not be storing them in terraform

51
00:02:49.571 --> 00:02:50.570
anyways.

52
00:02:50.570 --> 00:02:52.366
So you have to figure out
a way to provision and

53
00:02:52.366 --> 00:02:55.290
manage the secret without
caring about the value.

54
00:02:55.290 --> 00:02:57.610
That's why we do it the way that we do it.

55
00:02:57.610 --> 00:03:01.010
But with a config I think
it's actually totally fine.

56
00:03:01.010 --> 00:03:03.638
Again, you can do nice
stuff like this where I

57
00:03:03.638 --> 00:03:08.490
might not know what the distribution
domain is, but the automation does.

58
00:03:08.490 --> 00:03:11.352
So I can inject that into
the environment variable directly and

59
00:03:11.352 --> 00:03:12.810
I don't have to worry about it.

60
00:03:12.810 --> 00:03:14.650
That's how we solve that problem.

61
00:03:14.650 --> 00:03:19.310
I know somebody yesterday asked how else
could you get the Google redirect URL?

62
00:03:19.310 --> 00:03:20.550
Well, that's how we do it.

63
00:03:20.550 --> 00:03:24.790
We just basically get the domain
name from the distribution resource.

64
00:03:26.470 --> 00:03:28.030
Then yeah, we get our secrets as well.

65
00:03:28.030 --> 00:03:32.460
So Google Client id, Google Client Secret,
Goose DB and postgres URL,

66
00:03:32.460 --> 00:03:36.816
those are all added and these will
get created as entries inside of ssm,

67
00:03:36.816 --> 00:03:38.790
inside of the parameter store.

