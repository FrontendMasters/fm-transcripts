WEBVTT

1
00:00:00.240 --> 00:00:04.593
&gt;&gt; Erik Reinert: Okay, so really
quickly we're going to now go over to

2
00:00:04.593 --> 00:00:09.160
Google Cloud because we want
to set up the credentials.

3
00:00:09.160 --> 00:00:12.787
We basically we want to get all of
the like, you know, configuring and

4
00:00:12.787 --> 00:00:15.600
like credentials and
all that stuff out of the way.

5
00:00:15.600 --> 00:00:19.572
So I'm going to quickly switch
to my right account and

6
00:00:19.572 --> 00:00:25.680
then I'm going to go to cloud.google.com
and then make sure you're logged in.

7
00:00:25.680 --> 00:00:28.300
And then once you're logged in,
click on Console.

8
00:00:28.300 --> 00:00:29.500
Console.

9
00:00:29.500 --> 00:00:33.875
Although I will say I don't, I don't
know whose UI I hate worse, Amazon's or

10
00:00:33.875 --> 00:00:34.620
Google's.

11
00:00:36.140 --> 00:00:37.580
I can't stand material.

12
00:00:37.580 --> 00:00:41.393
Ui.
Yeah, just to clarify, we're using GCP or

13
00:00:41.393 --> 00:00:45.177
Google Cloud for
being able to log in with Google so

14
00:00:45.177 --> 00:00:50.060
that Google is handling authentication for
our app, Correct?

15
00:00:50.060 --> 00:00:50.900
Right.
Yeah.

16
00:00:50.900 --> 00:00:54.420
So let's talk about that really quickly
while you guys are getting there.

17
00:00:54.420 --> 00:00:57.060
Who here likes authentication and
managing it?

18
00:00:58.420 --> 00:00:59.060
Anybody?

19
00:01:00.260 --> 00:01:01.380
No.
Okay, cool.

20
00:01:01.380 --> 00:01:02.020
Yeah.

21
00:01:02.020 --> 00:01:05.356
So this is a whole other argument of like,

22
00:01:05.356 --> 00:01:09.300
do I go to here to manage my auth or
do I roll my own auth?

23
00:01:09.300 --> 00:01:10.660
Now let me say this.

24
00:01:10.660 --> 00:01:13.860
Rolling your own auth is
really not that difficult.

25
00:01:13.860 --> 00:01:14.580
It's not.

26
00:01:14.580 --> 00:01:16.460
Most people overcomplicate it and

27
00:01:16.460 --> 00:01:20.620
worry about too many security
parameters like, what happens to this?

28
00:01:20.620 --> 00:01:21.580
Dude just get it started.

29
00:01:21.580 --> 00:01:23.820
You'll figure out along
the way what's the problem.

30
00:01:23.820 --> 00:01:29.475
But that was kind of the approach
we took here, which was like,

31
00:01:29.475 --> 00:01:35.237
why rely on another service to roll
off when you could just simply

32
00:01:35.237 --> 00:01:41.340
use something like GCP to create
OAuth tokens and just call it a day.

33
00:01:42.620 --> 00:01:47.470
That's why we're using gcp,
because it's a very simple auth approach

34
00:01:47.470 --> 00:01:50.900
that is easy to set up and
then we're just done.

35
00:01:50.900 --> 00:01:56.620
There's no need of a third party
service or all this other stuff.

36
00:01:56.620 --> 00:01:59.916
It's literally just create
some credentials, set them and

37
00:01:59.916 --> 00:02:01.540
then we're off to the races.

38
00:02:03.540 --> 00:02:07.353
Once you're logged in and
you're at this page,

39
00:02:07.353 --> 00:02:11.910
the next thing you're going to
go to is API and services and

40
00:02:11.910 --> 00:02:15.451
then you're going to click on credentials.

41
00:02:15.451 --> 00:02:19.310
Now I already have it,
it's right here, right?

42
00:02:19.310 --> 00:02:24.539
But what we're going to want to do is
we're going to want to create credentials

43
00:02:24.539 --> 00:02:28.990
up at the top and then we're going
to want to click OAuth Client ID.

44
00:02:30.270 --> 00:02:33.630
Now you may not see this.

45
00:02:33.630 --> 00:02:36.190
How many of you do not see
this when you click that?

46
00:02:36.190 --> 00:02:43.210
Okay, it may ask you for something
called the OAuth consent screen, right?

47
00:02:43.210 --> 00:02:46.730
Yeah.
Okay, so this is Very simple.

48
00:02:46.730 --> 00:02:49.530
You just have to do
a couple of quick clicks.

49
00:02:49.530 --> 00:02:51.610
It's basically just next, next.

50
00:02:51.610 --> 00:02:55.850
But you're just, you're basically
just telling Google who you are.

51
00:02:55.850 --> 00:02:56.490
That's it.

52
00:02:56.490 --> 00:03:00.810
Because this is an actual application that
they are validating on their platform.

53
00:03:00.810 --> 00:03:04.011
So they want to validate that you
are in fact who you say you are for

54
00:03:04.011 --> 00:03:05.050
the application.

55
00:03:05.050 --> 00:03:06.440
So do me a favor.

56
00:03:06.440 --> 00:03:07.760
I can't see that again.

57
00:03:07.760 --> 00:03:09.527
I only get to see it once per project, so

58
00:03:09.527 --> 00:03:12.240
I'd have to go to a completely
new project to see that.

59
00:03:12.240 --> 00:03:15.680
But once you go through that process,
you will get back to this page.

60
00:03:15.680 --> 00:03:18.255
&gt;&gt; Male: Should we use
the internal audience type so

61
00:03:18.255 --> 00:03:20.480
we don't have to submit our app for.

62
00:03:20.480 --> 00:03:21.040
&gt;&gt; Erik Reinert: Yes.

63
00:03:21.040 --> 00:03:21.799
Yeah, yeah.

64
00:03:21.799 --> 00:03:24.560
So it asks you to like submit app or
just use.

65
00:03:24.560 --> 00:03:26.120
I think it's external audience.

66
00:03:26.120 --> 00:03:26.800
Is that.

67
00:03:26.800 --> 00:03:28.877
&gt;&gt; Male: Actually that
option is disabled for

68
00:03:28.877 --> 00:03:32.495
me because it says because you're
not a Google workspace user,

69
00:03:32.495 --> 00:03:36.480
you can only make your app available
to external general audience.

70
00:03:36.480 --> 00:03:37.500
&gt;&gt; Erik Reinert: Yes, yes, yes.

71
00:03:37.500 --> 00:03:38.620
Yeah, that's the option you want.

72
00:03:38.620 --> 00:03:40.620
Yeah, yeah, yeah.

73
00:03:40.620 --> 00:03:45.033
Basically what Google is saying is
because Google doesn't have you as

74
00:03:45.033 --> 00:03:47.277
a organization in their accounts,

75
00:03:47.277 --> 00:03:52.540
you're just gonna use it like any other
app using Google Credentials would use it.

76
00:03:52.540 --> 00:03:54.540
So it's just a normal third party thing.

77
00:03:54.540 --> 00:03:56.660
So it may send you back to Overview.

78
00:03:56.660 --> 00:04:01.460
Just click on clients again and
then Create Client and then bam.

79
00:04:01.460 --> 00:04:03.220
You should be able to be right where I am.

80
00:04:03.220 --> 00:04:07.960
So you just wanna make sure you're back
on the create OAuth client ID page.

81
00:04:07.960 --> 00:04:09.071
Cool.
Awesome, so

82
00:04:09.071 --> 00:04:13.160
we're gonna click Application type and
we are going to click Web application.

83
00:04:14.600 --> 00:04:15.640
You'll give it a name?

84
00:04:15.640 --> 00:04:17.320
I would give it the name normally.

85
00:04:17.320 --> 00:04:22.600
Okay, so really quickly,
let's talk about service credentials.

86
00:04:23.720 --> 00:04:27.568
These are the things that aren't fun
to talk about, but I feel like I should

87
00:04:27.568 --> 00:04:32.610
share them with you because these are the
things that honestly can ruin a company.

88
00:04:32.610 --> 00:04:33.970
And you might be like, why?

89
00:04:33.970 --> 00:04:34.850
What does that mean?

90
00:04:34.850 --> 00:04:37.210
How can you ruin a company, dude?

91
00:04:37.210 --> 00:04:41.000
I cannot tell you how many times
I've heard some random oauth or

92
00:04:41.000 --> 00:04:44.148
keys were generated,
somebody forgot about them,

93
00:04:44.148 --> 00:04:48.890
and now two years later they still exist
because they didn't know and name it.

94
00:04:48.890 --> 00:04:49.410
Right.

95
00:04:49.410 --> 00:04:54.525
And so now somebody's backdoored into our
services because that got exploited and

96
00:04:54.525 --> 00:04:56.725
has now become available, right?

97
00:04:56.725 --> 00:05:01.145
This course isn't a security
course [LAUGH] I'm not trying to

98
00:05:01.145 --> 00:05:05.230
necessarily teach you the best
ways of doing security.

99
00:05:06.350 --> 00:05:10.110
However, two things about this
that I want to point out.

100
00:05:10.110 --> 00:05:14.344
One, if you're creating authentication
credentials on third party services at

101
00:05:14.344 --> 00:05:17.550
all, try and scope it to
the service that you're deploying.

102
00:05:18.590 --> 00:05:19.584
So for example,

103
00:05:19.584 --> 00:05:25.070
I would say FEM FD service, since that's
the service that we're deploying.

104
00:05:25.070 --> 00:05:28.666
If I had another service,
then I would go in, create credentials for

105
00:05:28.666 --> 00:05:32.040
that other service and
then use those credentials.

106
00:05:32.040 --> 00:05:33.880
Now you might be like, well, that sucks.

107
00:05:33.880 --> 00:05:35.600
I have to manage all these credentials.

108
00:05:35.600 --> 00:05:39.686
Yeah, but if one of them gets exploited,
it's going to be a lot easier to deal with

109
00:05:39.686 --> 00:05:43.560
just one instead of every system
that uses those credentials.

110
00:05:43.560 --> 00:05:48.162
So that's the main takeaway I want you to
do, or I want you to have here is at least

111
00:05:48.162 --> 00:05:52.700
isolate well, so that if you get into
a scenario where something bad happens,

112
00:05:52.700 --> 00:05:58.250
you can separate that without necessarily
blowing up everything underneath it.

113
00:05:58.250 --> 00:06:02.810
And I've been in that scenario too,
where credentials were globally used.

114
00:06:02.810 --> 00:06:07.530
Like again today, we created the AWS
user with the administrator star Star.

115
00:06:07.530 --> 00:06:10.543
If you guys don't remember
to delete that and

116
00:06:10.543 --> 00:06:15.313
then that were to get out into the world,
then okay, that's not good.

117
00:06:15.313 --> 00:06:20.240
So, yeah, be aware of these credentials
that you're generating just so

118
00:06:20.240 --> 00:06:24.450
that you don't shoot yourself
in the foot in the future.

119
00:06:24.450 --> 00:06:27.422
Okay, so what we're going to do
now is we're going to type in or

120
00:06:27.422 --> 00:06:30.930
down at the bottom, you're going
to see authorized redirect URIs.

121
00:06:30.930 --> 00:06:33.490
Who here knows how OAuth works?

122
00:06:33.490 --> 00:06:35.850
How many of you don't
know how OAuth works?

123
00:06:35.850 --> 00:06:36.850
Really quickly?

124
00:06:36.850 --> 00:06:37.770
Okay, okay.

125
00:06:37.770 --> 00:06:38.370
No, it's all good.

126
00:06:38.370 --> 00:06:39.810
It's all good.

127
00:06:39.810 --> 00:06:41.330
To be fair, I don't know if I fully do.

128
00:06:41.330 --> 00:06:43.410
So we'll see if I can restate it.

129
00:06:44.690 --> 00:06:49.170
So OAuth is really about handshaking.

130
00:06:49.170 --> 00:06:50.370
That's the easiest way to put it.

131
00:06:50.370 --> 00:06:53.610
It's about saying like, okay,
we're going to go somewhere,

132
00:06:53.610 --> 00:06:56.610
we're going to get validated,
and then when we come back,

133
00:06:56.610 --> 00:07:00.520
we can now say that we've been validated
and we can act upon that validation.

134
00:07:00.520 --> 00:07:02.720
That's the easiest way to put it.

135
00:07:02.720 --> 00:07:06.607
What happens though,
is that when you use something like OAuth,

136
00:07:06.607 --> 00:07:10.080
the provider needs to know that
you are who you say you are.

137
00:07:11.120 --> 00:07:15.111
Say, for example,
I set up a credentials, right,

138
00:07:15.111 --> 00:07:21.270
how does the provider know to send
you back to where you were, right?

139
00:07:21.270 --> 00:07:24.617
Because we redirect them to you or
to the provider.

140
00:07:24.617 --> 00:07:27.830
So then how does the provider
know how to get back, right?

141
00:07:27.830 --> 00:07:28.790
Because we've all done that.

142
00:07:28.790 --> 00:07:31.190
We've clicked OAuth, we click a button,
it goes to something else and

143
00:07:31.190 --> 00:07:32.630
then somehow we end up
back on the website.

144
00:07:34.150 --> 00:07:39.171
That is what the redirect URI is,
and that's part of the OAuth flow,

145
00:07:39.171 --> 00:07:45.058
where in the specification OAuth says,
well, hey, if we're going to do this,

146
00:07:45.058 --> 00:07:50.163
we need a URL of some sort to send
the user back to that you confirm is your

147
00:07:50.163 --> 00:07:55.350
URL and then we can validate that and
then you can get the request.

148
00:07:55.350 --> 00:08:00.140
What happens underneath the hood
is it becomes again this handshake

149
00:08:00.140 --> 00:08:05.190
handoff where the user logs in,
they get sent over to the third party.

150
00:08:05.190 --> 00:08:08.931
The third party then generates
the access key or a little token for

151
00:08:08.931 --> 00:08:11.430
that specific OAuth request.

152
00:08:11.430 --> 00:08:15.510
Then the user almost has a little bag
now where it's like, okay, go back home.

153
00:08:15.510 --> 00:08:20.240
And then they go back to your app
with that secret or whatever.

154
00:08:20.240 --> 00:08:26.000
And then you take that and you validate
it when you get to that webhook endpoint.

155
00:08:26.000 --> 00:08:32.960
So users actually go to an API
before they get back to your page.

156
00:08:32.960 --> 00:08:35.843
So they'll hit an API endpoint,
you'll get that data,

157
00:08:35.843 --> 00:08:39.200
you'll go, cool, I got the email,
put it in the database.

158
00:08:39.200 --> 00:08:42.706
And then nine times out of 10,
what you won't see is the,

159
00:08:42.706 --> 00:08:47.490
the application will then redirect you to
the front page or something like that.

160
00:08:47.490 --> 00:08:49.930
So you never see that callback URL.

161
00:08:49.930 --> 00:08:54.002
But that's basically how OAuth works
is you ship them out to a third party,

162
00:08:54.002 --> 00:08:58.730
that third party says, well,
I know the URL that I'm supposed to go to.

163
00:08:58.730 --> 00:09:01.770
So now I'm gonna send them
back with their little packet.

164
00:09:01.770 --> 00:09:05.782
And then once you get that packet and
open it up, you should see their email and

165
00:09:05.782 --> 00:09:08.501
everything so
that then you can authenticate them,

166
00:09:08.501 --> 00:09:13.100
create a session with that email,
then send them back to the front page.

167
00:09:13.100 --> 00:09:16.904
So yeah, there's still like
programming is never simple,

168
00:09:16.904 --> 00:09:20.140
there's still work you
have to do somewhere.

169
00:09:20.140 --> 00:09:24.346
But normally that whole process I just
described is a lot easier than sending out

170
00:09:24.346 --> 00:09:24.860
emails.

171
00:09:26.780 --> 00:09:29.260
Sending out emails and
transactionals is really annoying.

172
00:09:29.260 --> 00:09:32.862
So this is why developers,
especially front end developers and stuff,

173
00:09:32.862 --> 00:09:36.579
are getting really, really hyped about
OAuth is because you don't have to

174
00:09:36.579 --> 00:09:39.590
deal with email,
you can just immediately get started.

175
00:09:39.590 --> 00:09:42.950
And again, it's a validated endpoint
that you don't have to worry about.

176
00:09:44.150 --> 00:09:48.753
Okay, cool, so we're going to go to
authorize redirect URIs now that you guys

177
00:09:48.753 --> 00:09:53.030
understand that, and we are going to
put in our local host callback URL.

178
00:09:53.030 --> 00:09:57.046
So I'm going to just go ahead and
copy and paste it and

179
00:09:57.046 --> 00:10:00.515
then I'll let you guys write it in yours,
but

180
00:10:00.515 --> 00:10:06.480
we're basically going to do HTTP
localhost8080auth Google callback.

181
00:10:10.960 --> 00:10:12.760
I don't think you need to click Add uri.

182
00:10:12.760 --> 00:10:14.320
I think it's already there.

183
00:10:14.320 --> 00:10:15.680
So I think we're good.

184
00:10:15.680 --> 00:10:16.840
So go ahead and type that in.

185
00:10:16.840 --> 00:10:18.400
I'll give you a second here.

186
00:10:18.400 --> 00:10:21.280
HTTP, not HTTPs.

187
00:10:21.280 --> 00:10:23.760
Yep [LAUGH] All right.

188
00:10:23.760 --> 00:10:26.120
Yep, we're going insecure for right now.

189
00:10:26.120 --> 00:10:28.228
I mean, again, it's local host.

190
00:10:28.228 --> 00:10:28.800
Of course.

191
00:10:28.800 --> 00:10:29.743
Yeah.
I mean,

192
00:10:29.743 --> 00:10:33.670
you could kind of think of local
host as like an SSL in a way.

193
00:10:33.670 --> 00:10:39.651
Normally, nothing is gonna get on
localhost unless your computer is hacked,

194
00:10:39.651 --> 00:10:42.070
so should be fine.

195
00:10:42.070 --> 00:10:46.987
But to go back to what I said earlier, and
this is something we are going to do in

196
00:10:46.987 --> 00:10:52.059
this course, you will probably also
want to create credentials per redirect,

197
00:10:52.059 --> 00:10:55.910
like URI if it's in
different environments.

198
00:10:55.910 --> 00:11:00.350
For example, this is dev token, right?

199
00:11:00.350 --> 00:11:05.768
Now, if I put this in prod, that does
technically mean that I could use that

200
00:11:05.768 --> 00:11:11.272
localhost URL in the production
environment because it's the same token,

201
00:11:11.272 --> 00:11:14.270
meaning that application expects it.

202
00:11:14.270 --> 00:11:17.109
Now, again,
I'm not here to teach you security, but

203
00:11:17.109 --> 00:11:21.470
I have messed up enough to know where
some of these problems can happen.

204
00:11:21.470 --> 00:11:25.819
So normally what you would do is you
would create a no oauth client for

205
00:11:25.819 --> 00:11:28.580
that environment with that specific URL.

206
00:11:28.580 --> 00:11:32.526
So again, in the future,
if somebody tried to use that token or

207
00:11:32.526 --> 00:11:36.770
if they figured out a way to bypass
the normal authorized redirect,

208
00:11:36.770 --> 00:11:40.580
they can't use that token in
production and access things.

209
00:11:40.580 --> 00:11:42.860
But for this,
we're not going to worry about it.

210
00:11:42.860 --> 00:11:46.922
So I'm going to hit create and
I'm going to dox myself, but

211
00:11:46.922 --> 00:11:50.020
I'm going to do it so
that you guys can see it.

212
00:11:50.020 --> 00:11:52.060
And then I'm going to delete this and
do this off screen.

213
00:11:52.060 --> 00:11:53.780
So you will get this.

214
00:11:53.780 --> 00:11:54.940
Yeah, good luck chat.

215
00:11:54.940 --> 00:11:57.140
Try and get in as quick as you can.

216
00:11:57.140 --> 00:12:01.340
You will get this oauth client created,
you'll get a client id, a client secret,

217
00:12:01.340 --> 00:12:03.500
and then you can even click Download JSON.

218
00:12:03.500 --> 00:12:06.977
I would recommend downloading that JSON,
but at least copy the client ID and

219
00:12:06.977 --> 00:12:10.580
the client secret and like put it in
a separate window or notepad or something.

