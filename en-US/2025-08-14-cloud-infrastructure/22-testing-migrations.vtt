WEBVTT

1
00:00:00.000 --> 00:00:03.589
&gt;&gt; Erik Reinert: Okay,
while this is running in the background,

2
00:00:03.589 --> 00:00:07.972
the next thing we wanna do is
we wanna add some kind of tests.

3
00:00:07.972 --> 00:00:11.804
I don't wanna just build something, I'd
actually like to test something, right?

4
00:00:11.804 --> 00:00:15.125
And so the only thing we
can truly test right now,

5
00:00:15.125 --> 00:00:20.560
because the application doesn't have
tests itself, are the migrations.

6
00:00:20.560 --> 00:00:23.217
So let's at least be sure that our
migrations are written right and

7
00:00:23.217 --> 00:00:24.080
work, right?

8
00:00:24.080 --> 00:00:28.090
So what we're gonna do is we're gonna
actually add a whole new job and

9
00:00:28.090 --> 00:00:30.410
we're gonna call it test.

10
00:00:30.410 --> 00:00:34.010
Now test, if you look closely,
needs build.

11
00:00:34.010 --> 00:00:38.490
That means that test will never run
unless build is successful, right?

12
00:00:38.490 --> 00:00:39.690
But that's what we want.

13
00:00:39.690 --> 00:00:44.090
The reason why we want that is because we
wanna use the same image again, right?

14
00:00:44.090 --> 00:00:47.530
So we also can't run that image
until it's been built, right?

15
00:00:47.530 --> 00:00:51.610
So we say, okay, build runs on Ubuntu
latest, just like it did before.

16
00:00:51.610 --> 00:00:52.210
There you go.

17
00:00:52.210 --> 00:00:55.244
You can see my push was successful now,
right, so

18
00:00:55.244 --> 00:00:58.290
I've successfully pushed
my SHA up to the cloud.

19
00:00:58.290 --> 00:01:01.650
That specific SHA version,
right, now I wanna run it.

20
00:01:01.650 --> 00:01:05.321
So what we do is we say, hey, well,
because I'm on a brand new runner,

21
00:01:05.321 --> 00:01:07.490
I first wanna pull it, right?

22
00:01:07.490 --> 00:01:08.050
So again,

23
00:01:08.050 --> 00:01:12.130
the reason why we have that make file is
to make these commands easier to use.

24
00:01:12.130 --> 00:01:15.250
So sure enough, there you go,
there's our make build image poll.

25
00:01:16.290 --> 00:01:19.650
So we make sure it has access,
we give it the access credentials for

26
00:01:19.650 --> 00:01:21.010
that command, right?

27
00:01:21.010 --> 00:01:24.244
The next thing we do, look,
we, we do makeup, right,

28
00:01:24.244 --> 00:01:27.600
literally the exact same
commands that we run locally.

29
00:01:27.600 --> 00:01:34.240
We can run in CI and
then we run build image migrate, right?

30
00:01:34.240 --> 00:01:38.240
So this will use the build image and
it'll run a migration inside of it, right?

31
00:01:38.240 --> 00:01:43.364
And then, because we can add these
environment variables per command or

32
00:01:43.364 --> 00:01:48.320
per step, we add hard coded
GOOSE_DBSTRING as well as goose driver.

33
00:01:49.780 --> 00:01:53.726
The reason why this is hard coded is
because this is meant to be local

34
00:01:53.726 --> 00:01:54.660
migrations.

35
00:01:54.660 --> 00:01:58.500
It's meant to run locally in Docker and
all that stuff.

36
00:01:58.500 --> 00:02:00.484
You could put it in a config
value if you wanted to, but

37
00:02:00.484 --> 00:02:03.540
the reality of it is you're probably
never gonna change it, right?

38
00:02:03.540 --> 00:02:05.460
It's just test credentials.

39
00:02:05.460 --> 00:02:07.140
It doesn't really matter too much.

40
00:02:07.140 --> 00:02:10.104
You can either leave it here or
you can do whatever you want.

41
00:02:10.104 --> 00:02:13.764
But the last thing is make down, right?

42
00:02:13.764 --> 00:02:17.390
The reason why we have if always is
in the off chance that the pipeline

43
00:02:17.390 --> 00:02:20.880
doesn't work for some reason,
or we have a failure.

44
00:02:20.880 --> 00:02:23.881
At least we always make sure that
the containers get stopped at the end of

45
00:02:23.881 --> 00:02:25.360
the job, right?

46
00:02:25.360 --> 00:02:27.760
Very simple, very simple job.

47
00:02:27.760 --> 00:02:31.656
What makes this really possible,
to be 100% clear with you, and

48
00:02:31.656 --> 00:02:36.089
why a lot of people probably don't run
migrations in their pipelines versus us

49
00:02:36.089 --> 00:02:39.760
doing it is because we made
it easy to run [LAUGH].

50
00:02:39.760 --> 00:02:41.440
Right, we made it easy to run.

51
00:02:41.440 --> 00:02:46.080
We put all the most complex commands and
everything in the makefile, right?

52
00:02:46.080 --> 00:02:49.509
So it's like if it's easy to run,
then we can easily run it anywhere.

53
00:02:49.509 --> 00:02:52.926
So just to throw that out there
that you might be like, well,

54
00:02:52.926 --> 00:02:54.470
we don't run migrations.

55
00:02:54.470 --> 00:02:57.303
That might be why it might be
really hard to run migrations, but

56
00:02:57.303 --> 00:03:00.150
it doesn't mean that you still
shouldn't test them, right?

57
00:03:02.630 --> 00:03:07.705
So what we're gonna do now is we're
gonna add that and then I'm going to

58
00:03:07.705 --> 00:03:12.790
add a commit that says setup, test,
job and I'm going to push this up.

59
00:03:14.630 --> 00:03:17.590
And now we're going to go
to our pipeline again.

60
00:03:18.690 --> 00:03:23.154
So now if I go here and remember, every
time I add a new job to my pipelines,

61
00:03:23.154 --> 00:03:26.610
that's going to be run every
time I do a new push, right?

62
00:03:30.210 --> 00:03:33.624
One thing to note as well
about this is you'll notice

63
00:03:33.624 --> 00:03:38.450
that we have to rebuild the image from
scratch every single time, right?

64
00:03:39.890 --> 00:03:41.890
There's ways of getting around that.

65
00:03:41.890 --> 00:03:44.720
I didn't include that because honestly,
I want you guys to play.

66
00:03:44.720 --> 00:03:48.311
I want you guys to take this play,
improve it, because I'm gonna be real,

67
00:03:48.311 --> 00:03:52.680
there's tons of improvements that
can be made even off of this, right?

68
00:03:52.680 --> 00:03:56.273
I'm only really showing you
how to get it out the door and

69
00:03:56.273 --> 00:03:58.810
how to get to that optimization stage.

70
00:03:58.810 --> 00:04:03.099
In this case, what I would recommend,
for example, is you could make it so

71
00:04:03.099 --> 00:04:06.520
that before this starts,
you always pull latest, right?

72
00:04:07.720 --> 00:04:09.880
You'll have some build cache of some sort.

73
00:04:09.880 --> 00:04:11.785
You may not have all the build cache,

74
00:04:11.785 --> 00:04:15.610
but you may have a lot of the stuff
that again, depending on your changes.

75
00:04:15.610 --> 00:04:19.797
Like we talked about before,
if you only changed a template and

76
00:04:19.797 --> 00:04:25.090
you didn't change the binary itself,
then that won't also run in CI, right?

77
00:04:25.090 --> 00:04:27.590
So that caching becomes portable now too,

78
00:04:27.590 --> 00:04:30.650
to where you can benefit
from it in multiple places.

79
00:04:30.650 --> 00:04:35.577
So yeah, I would say if you just
threw in a Docker image poll latest,

80
00:04:35.577 --> 00:04:39.037
you'd probably make this pipeline go 30%,

81
00:04:39.037 --> 00:04:42.590
60% faster just because
the cache is there.

82
00:04:42.590 --> 00:04:46.453
But again, I wanted to do this to
show you and be able to explain and

83
00:04:46.453 --> 00:04:49.950
you can see the value of that
would be as well, right?

84
00:04:49.950 --> 00:04:55.415
You could literally save money

85
00:04:55.415 --> 00:05:01.307
by just adding a single command.

86
00:05:01.307 --> 00:05:04.430
Cool, so our build step worked and
was successful.

87
00:05:04.430 --> 00:05:06.430
And if I go to the Summary,
you can see, there it is.

88
00:05:06.430 --> 00:05:08.400
My build step is successful.

89
00:05:08.400 --> 00:05:09.740
Now I'm gonna click on Test.

90
00:05:09.740 --> 00:05:17.600
And now, we have test running, and so
there you go, it ran my image pull, right?

91
00:05:17.600 --> 00:05:19.887
It got the SHA that it expected and

92
00:05:19.887 --> 00:05:24.720
now it's actually bringing up
the environment and it failed, okay.

93
00:05:27.360 --> 00:05:35.120
So the reason why this failed is
because I know exactly what it is.

94
00:05:35.120 --> 00:05:39.036
The problem is that when
we do docker compose up,

95
00:05:39.036 --> 00:05:42.090
we expose the ports via proxying, but

96
00:05:42.090 --> 00:05:47.546
when we run the containers directly,
we actually run them on host.

97
00:05:47.546 --> 00:05:54.080
So the local hosts are not the same,
they're two separate local hosts.

98
00:05:54.080 --> 00:05:58.242
So what it's trying to do is it's trying
to connect to the local host on the host,

99
00:05:58.242 --> 00:05:59.520
but it's not there.

100
00:05:59.520 --> 00:06:03.240
It's trying to go through a proxy
that's not working and so it's failing.

101
00:06:03.240 --> 00:06:06.260
Basically, it's trying to go
through itself and dying.

102
00:06:06.260 --> 00:06:09.380
I really wanna use host, so
I'm just gonna use what works.

103
00:06:11.140 --> 00:06:13.260
Yeah, I'm just gonna
use network_mode: host.

104
00:06:13.260 --> 00:06:16.325
I was going to try and
do it a different way, but

105
00:06:16.325 --> 00:06:21.300
I think for now I'm just gonna
use the network_mode: host.

106
00:06:21.300 --> 00:06:24.346
That seems to be the problem here.

107
00:06:24.346 --> 00:06:31.316
So just gonna do that and push that up,
and this should work for both.

