WEBVTT

1
00:00:00.240 --> 00:00:01.320
&gt;&gt; Erik Reinert: All right,
so the startup phase.

2
00:00:01.320 --> 00:00:02.040
Just get it working.

3
00:00:02.040 --> 00:00:04.879
If you've ever worked at
a startup company before,

4
00:00:04.879 --> 00:00:08.687
if you've ever been on a project
that's been growing or starting to be

5
00:00:08.687 --> 00:00:12.720
developed as an application,
you've probably heard this quite a bit.

6
00:00:12.720 --> 00:00:13.560
Just get it working.

7
00:00:13.560 --> 00:00:16.000
You've probably heard it
from your manager too.

8
00:00:16.000 --> 00:00:20.656
This is normally a phase that
is heavily focused around we

9
00:00:20.656 --> 00:00:23.680
need to get things out the door.

10
00:00:23.680 --> 00:00:26.165
The highest priority right
now is users features,

11
00:00:26.165 --> 00:00:29.620
being able to get more
people onto the application.

12
00:00:29.620 --> 00:00:32.700
And that's really what we talk about,
a business priority.

13
00:00:32.700 --> 00:00:35.140
That's all business is caring about.

14
00:00:35.140 --> 00:00:39.673
Something to note about DevOps and
platform, especially as you move up higher

15
00:00:39.673 --> 00:00:43.244
in it, it will become more and
more about business and less and

16
00:00:43.244 --> 00:00:47.639
less about technology because a lot of
it eventually ends up becoming okay,

17
00:00:47.639 --> 00:00:51.210
well I want to convince you why
we should make these changes and

18
00:00:51.210 --> 00:00:55.020
why we should actually move from
this platform to this platform.

19
00:00:55.020 --> 00:00:58.970
And so in this phase, normally you'll
deal with the hardest pushback.

20
00:00:58.970 --> 00:01:01.250
Normally people will be like, no,
I don't care about any of this.

21
00:01:01.250 --> 00:01:02.770
Just get it run, just get it working.

22
00:01:03.970 --> 00:01:05.730
Our phase scenario.

23
00:01:05.730 --> 00:01:07.450
Each phase, like I said, has a scenario.

24
00:01:07.450 --> 00:01:11.570
The phase scenario here is that we have
source code managed by a development team.

25
00:01:11.570 --> 00:01:13.090
We didn't write this source code.

26
00:01:13.090 --> 00:01:15.890
We don't really have any
understanding of it.

27
00:01:15.890 --> 00:01:18.695
We know that there takes some
environment variables and

28
00:01:18.695 --> 00:01:21.890
we know that if we run
the binary it should work.

29
00:01:21.890 --> 00:01:25.090
But that's really about as far as we're
going with the source code itself.

30
00:01:25.090 --> 00:01:28.396
We're not going to really be doing any
actual source source code changes or

31
00:01:28.396 --> 00:01:29.990
anything like that.

32
00:01:29.990 --> 00:01:34.590
And this is pretty common in a DevOps
platform deployment scenario.

33
00:01:34.590 --> 00:01:36.150
You don't really know.

34
00:01:36.150 --> 00:01:39.481
You might not have a deep knowledge
of the actual source code itself, but

35
00:01:39.481 --> 00:01:42.390
you are going to be maintaining
the infrastructure around it.

36
00:01:42.390 --> 00:01:44.310
So that's the mindset I want you to be in.

37
00:01:45.750 --> 00:01:49.510
We need the quickest deployment
with minimal effort required.

38
00:01:49.510 --> 00:01:54.438
So again, the goal here should be I don't
want to have to hire another person to

39
00:01:54.438 --> 00:01:55.870
get this out the door.

40
00:01:55.870 --> 00:01:57.610
I want to be able to do it myself.

41
00:01:57.610 --> 00:02:03.210
I want to be able to get this up and
running pretty easily.

42
00:02:03.210 --> 00:02:06.250
We're looking for the biggest
wins with minimal required setup.

43
00:02:06.250 --> 00:02:08.918
So again,
going back to that whole minimal effort,

44
00:02:08.918 --> 00:02:11.050
we want to just again just get it working.

45
00:02:11.050 --> 00:02:14.090
We want it to be online,
set up and running.

46
00:02:14.090 --> 00:02:18.170
I don't want to have to put in
a ton of effort to do that.

47
00:02:18.170 --> 00:02:21.770
Then the last thing is we're learning
about what needs to be maintained.

48
00:02:21.770 --> 00:02:23.610
None of you know what we're deploying.

49
00:02:24.910 --> 00:02:27.790
I do, but
in this scenario I wouldn't either.

50
00:02:27.790 --> 00:02:30.270
So this would be also
a learning part as well.

51
00:02:30.270 --> 00:02:34.990
So you can't expect in your
first phase to be optimizing.

52
00:02:34.990 --> 00:02:36.950
That's something I want you
to take away from this.

53
00:02:36.950 --> 00:02:41.776
This is like normally in a startup phase,
you're not optimizing, you're focusing on

54
00:02:41.776 --> 00:02:46.270
getting the fundamentals down and
again, just get it working.

55
00:02:46.270 --> 00:02:48.990
The goals here are actually very simple.

56
00:02:48.990 --> 00:02:52.060
We're going to create a repository
to store source code.

57
00:02:52.060 --> 00:02:53.260
Each of you are going to do that.

58
00:02:53.260 --> 00:02:56.615
We're going to create a database
deployment for production and we're going

59
00:02:56.615 --> 00:03:00.140
to create an application production or
a deployment for production as well.

60
00:03:00.140 --> 00:03:01.820
So really three simple things.

61
00:03:01.820 --> 00:03:05.740
Repo database deployment and
application deployment.

62
00:03:05.740 --> 00:03:09.413
Before each phase, I'm going to quickly
talk about what we're building, why we're

63
00:03:09.413 --> 00:03:12.700
building it, and you get to see a fun
flowchart, because I like flowcharts.

64
00:03:14.060 --> 00:03:17.174
So in the startup phase,
we're going to be focused on building

65
00:03:17.174 --> 00:03:19.900
the infrastructure that you
see right in front of you.

66
00:03:21.660 --> 00:03:25.740
It looks complex, but
it's actually very, very simple.

67
00:03:25.740 --> 00:03:30.380
So the goal of this infrastructure is,
as we said before, to just get it working.

68
00:03:31.820 --> 00:03:34.660
I don't want to worry
about managing things.

69
00:03:34.660 --> 00:03:36.460
So what are the things
that we have to manage?

70
00:03:36.460 --> 00:03:39.069
Well, we need to manage
an application running and

71
00:03:39.069 --> 00:03:42.780
we need to manage a database that
that application connects to, right?

72
00:03:42.780 --> 00:03:47.554
Those are the two things that we will
have to figure out solutions for

73
00:03:47.554 --> 00:03:50.233
now, you may immediately go, okay,

74
00:03:50.233 --> 00:03:54.370
well let's build on top of Amazon and
use VPCs and Da Da da.

75
00:03:54.370 --> 00:03:57.650
But you don't need any of that, right?

76
00:03:57.650 --> 00:04:01.449
Like you can, sure, if you want to,
if you want to become a cloud architect,

77
00:04:01.449 --> 00:04:04.850
you can go out and learn that stuff,
but you don't really need that.

78
00:04:04.850 --> 00:04:07.529
And like when you're in
the startup phase of a company or

79
00:04:07.529 --> 00:04:11.463
in the startup phase of an application,
you've probably heard like, you know,

80
00:04:11.463 --> 00:04:13.130
host my WordPress on Kubernetes.

81
00:04:14.330 --> 00:04:19.018
Like that's definitely one of those
scenarios where it's like, dude,

82
00:04:19.018 --> 00:04:21.610
you don't need, just put it on a vps.

83
00:04:21.610 --> 00:04:25.825
Again, just simple,
put it on a vps, have it running,

84
00:04:25.825 --> 00:04:29.850
just do whatever you need to,
just get it online.

85
00:04:29.850 --> 00:04:35.450
Now there's a couple of things that we
do want to kind of make decision wise.

86
00:04:35.450 --> 00:04:39.598
The first one is do we want to use
a VPS or do we want to at least try and

87
00:04:39.598 --> 00:04:41.700
be containerized?

88
00:04:41.700 --> 00:04:45.718
That's probably a decision you'll end up
making whenever you start trying to Deploy

89
00:04:45.718 --> 00:04:46.340
something.

90
00:04:47.860 --> 00:04:50.340
Here's what I will say about that.

91
00:04:50.340 --> 00:04:53.928
VPSs are great, but
in terms of technology and

92
00:04:53.928 --> 00:04:58.740
the things we can do today,
they are a little outdated.

93
00:04:58.740 --> 00:05:01.540
A vps, when we mean a vps,
it's just an instance.

94
00:05:01.540 --> 00:05:06.562
You get a Linux instance, ussh into it,
you set up all the programs you need,

95
00:05:06.562 --> 00:05:10.580
you copied the files over to the instance,
all that work, and

96
00:05:10.580 --> 00:05:14.480
then you run a command and
then boom, there you go.

97
00:05:14.480 --> 00:05:15.280
You can do that.

98
00:05:15.280 --> 00:05:16.840
And I'm not trying to say you shouldn't.

99
00:05:16.840 --> 00:05:19.040
If you wanna set up a VPS, go for it.

100
00:05:19.040 --> 00:05:22.969
I'm not here to necessarily
tell you what to do, but again,

101
00:05:22.969 --> 00:05:26.667
I want you to hear me out When I
say there's reason as to why

102
00:05:26.667 --> 00:05:30.000
every single one of these
components were picked.

103
00:05:30.000 --> 00:05:32.160
It wasn't just because
I like Amazon products.

104
00:05:34.400 --> 00:05:38.400
So for me personally,
we are using Containers now.

105
00:05:38.400 --> 00:05:41.220
We have the day of images, right?

106
00:05:41.220 --> 00:05:44.660
I can ship an operating
system with Docker, right?

107
00:05:44.660 --> 00:05:52.100
I can at least ship a image of that VPs
basically with a Docker image, right?

108
00:05:52.100 --> 00:05:55.938
And so one of the decisions that were made
in the startup phase was to say, okay,

109
00:05:55.938 --> 00:05:57.500
we're going to do containers.

110
00:05:57.500 --> 00:06:02.443
We're gonna at least out the gate,
we're gonna do containers to make it so

111
00:06:02.443 --> 00:06:05.910
that we can at least also
move in the future, right?

112
00:06:05.910 --> 00:06:08.676
Because we know we're going to eventually
probably want to move to bigger

113
00:06:08.676 --> 00:06:10.070
orchestrators and stuff like that.

114
00:06:10.070 --> 00:06:14.016
So why not make this decision now,
right at the startup phase and

115
00:06:14.016 --> 00:06:17.830
then let that grow as the organization or
as the project goes.

116
00:06:17.830 --> 00:06:21.909
So containers was a strategic
decision here, right?

117
00:06:21.909 --> 00:06:27.124
And so, whenever you're thinking about
infrastructure, these are the kind

118
00:06:27.124 --> 00:06:32.418
of things and the kind of arguments that
you can make in these discussions to help

119
00:06:32.418 --> 00:06:37.730
solidify what you're trying to do or
help your argument basically, yeah.

120
00:06:37.730 --> 00:06:40.850
&gt;&gt; Speaker 3: Is there any argument for
not using containers?

121
00:06:40.850 --> 00:06:43.970
&gt;&gt; Erik Reinert: Tons,
VPS are actually still used heavily.

122
00:06:43.970 --> 00:06:48.494
Yeah, I have this problem myself
personally because I've been in

123
00:06:48.494 --> 00:06:53.850
the industry for a little while now that
you're up here, you know what I mean?

124
00:06:53.850 --> 00:06:57.570
You're so used to kubernetes,
da da da, you're up here.

125
00:06:57.570 --> 00:06:59.779
But the majority of development and

126
00:06:59.779 --> 00:07:04.550
stuff like that is still very much
down here, you know what I mean?

127
00:07:04.550 --> 00:07:09.494
And so, you may be used to Terraform and
IEC and Kubernetes and cloud, blah,

128
00:07:09.494 --> 00:07:13.221
blah, blah, but no, honestly,
a lot of storefronts and

129
00:07:13.221 --> 00:07:17.864
things like that today are still like
either running co-located even or

130
00:07:17.864 --> 00:07:22.230
yeah, still running VPSs or
VPCs sorry, VPSs and stuff like that.

131
00:07:22.230 --> 00:07:23.350
Because it's just.

132
00:07:23.350 --> 00:07:26.870
It's this startup phase mentality of like,
I just want to get it running.

133
00:07:26.870 --> 00:07:29.110
I don't know how to get to that point.

134
00:07:29.110 --> 00:07:31.340
So, I know how to run commands, right?

135
00:07:31.340 --> 00:07:32.060
I know how to.

136
00:07:32.060 --> 00:07:34.060
And then they just stay, right?

137
00:07:34.060 --> 00:07:34.660
And that's it.

138
00:07:34.660 --> 00:07:35.540
And then there you go.

139
00:07:35.540 --> 00:07:40.300
&gt;&gt; MALE: Right, and so no,
VPS are actually super common still, yeah.

140
00:07:40.300 --> 00:07:42.220
&gt;&gt; Erik Reinert: What is a vps?

141
00:07:42.220 --> 00:07:42.720
Gosh.

142
00:07:43.900 --> 00:07:44.500
What is it?

143
00:07:44.500 --> 00:07:48.860
It's a virtual private cloud.

144
00:07:48.860 --> 00:07:49.820
Well, vpc.

145
00:07:49.820 --> 00:07:52.060
That's VPC server.

146
00:07:52.060 --> 00:07:53.380
VPS is server.

147
00:07:53.380 --> 00:07:55.580
Yeah, Virtual private server, basically.

148
00:07:56.620 --> 00:08:01.206
So in the good old days when we
didn't have massive scaling and

149
00:08:01.206 --> 00:08:07.293
horizontal whatever, everybody would go
to their favorite hosting provider and

150
00:08:07.293 --> 00:08:11.370
pay for a little slice of compute and
RAM, basically.

151
00:08:12.490 --> 00:08:15.570
And so,
we called them VPSs back in the day.

152
00:08:15.570 --> 00:08:17.970
That was like the marketing term.

153
00:08:17.970 --> 00:08:19.970
That sounded cool, I guess.

154
00:08:19.970 --> 00:08:20.570
I don't know.

155
00:08:20.570 --> 00:08:21.490
I actually hated it.

156
00:08:21.490 --> 00:08:23.050
I was just like,
just call it an instance, man.

157
00:08:23.050 --> 00:08:24.350
I don't know.

158
00:08:24.350 --> 00:08:28.190
But yeah, VPSs are just,
you go to a provider.

159
00:08:28.190 --> 00:08:30.750
I want two cores, four gigs of RAM.

160
00:08:30.750 --> 00:08:31.310
Cool.

161
00:08:31.310 --> 00:08:34.350
I'll take care of the rest
in the full stack.

162
00:08:34.350 --> 00:08:37.318
Learning path on frontend Masters,
which is something you guys,

163
00:08:37.318 --> 00:08:39.390
I would definitely recommend.

164
00:08:39.390 --> 00:08:42.714
Jem made a course that focuses
basically on a lot of what you guys

165
00:08:42.714 --> 00:08:43.790
are talking about.

166
00:08:43.790 --> 00:08:48.299
Like, okay, I want to deploy a vps,
I want to go with cli, Create, setup,

167
00:08:48.299 --> 00:08:51.920
Docker, manage it, all that kind of stuff.

168
00:08:51.920 --> 00:08:55.731
Yeah, that would absolutely be a good
starter to this course because then it

169
00:08:55.731 --> 00:08:59.440
would at least get you more comfortable
with even some of these concepts.

170
00:08:59.440 --> 00:09:01.360
And what is this versus this?

171
00:09:01.360 --> 00:09:03.277
If you don't understand
what a VPS is at all,

172
00:09:03.277 --> 00:09:05.360
I would recommend
checking out that course.

173
00:09:05.360 --> 00:09:06.600
It'll probably help you a bit.

174
00:09:06.600 --> 00:09:08.951
But yeah, these are all like,

175
00:09:08.951 --> 00:09:13.927
there's the engineer in the room
who will give suggestions, but

176
00:09:13.927 --> 00:09:19.790
then there's the engineer in the room
that will make decisions, right?

177
00:09:19.790 --> 00:09:23.990
And you normally don't want to be
the engineer, just making suggestions.

178
00:09:23.990 --> 00:09:27.590
Like, if you really want to impact
a company and even grow in your career,

179
00:09:27.590 --> 00:09:29.950
you want to be making decisions.

180
00:09:29.950 --> 00:09:33.866
So again, if there's two people
who are like, I like Azure.

181
00:09:33.866 --> 00:09:34.509
I like Amazon.

182
00:09:34.509 --> 00:09:37.710
Well, it's like, okay, that's great,
but what works for us, right?

183
00:09:37.710 --> 00:09:42.198
And so again, just to go back off of what
you said earlier, that would be a massive

184
00:09:42.198 --> 00:09:46.620
argument that could be solvable by simply
saying, well, Azure can get us in and

185
00:09:46.620 --> 00:09:51.350
on the cloud without even needing
Docker knowledge or anything like that.

186
00:09:51.350 --> 00:09:52.790
We do take a similar Approach.

187
00:09:52.790 --> 00:09:59.341
Again, I did take on the expectation or
the responsibility of saying, well,

188
00:09:59.341 --> 00:10:05.510
I want it to be containerized, but
again that's also a decision around.

189
00:10:06.550 --> 00:10:09.187
I know I'm going to be running
containers in the future, so

190
00:10:09.187 --> 00:10:10.470
might as well just do it now.

191
00:10:11.680 --> 00:10:14.204
&gt;&gt; Speaker 3: Yeah, I was just getting
at like kind of maybe what's like

192
00:10:14.204 --> 00:10:14.960
the trade off.

193
00:10:14.960 --> 00:10:16.080
&gt;&gt; Erik Reinert: Yep.

194
00:10:16.080 --> 00:10:18.640
&gt;&gt; Speaker 3: It seems like the VPS
is like the lowest level and

195
00:10:18.640 --> 00:10:21.904
then you got kind of like the managed
like Azure app service or

196
00:10:21.904 --> 00:10:25.440
elastic Beanstalk and
then you got the containerized approach.

197
00:10:25.440 --> 00:10:28.080
Like yeah, what's the trade off there?

198
00:10:28.080 --> 00:10:32.736
&gt;&gt; Erik Reinert: Normally the managed
services are containerization abstracted

199
00:10:32.736 --> 00:10:33.840
away, right?

200
00:10:33.840 --> 00:10:36.280
Like normally that's what they are,
like Beanstalk.

201
00:10:36.280 --> 00:10:39.595
Again, the reason why I said what I said
was is because I have used Beanstalk at

202
00:10:39.595 --> 00:10:40.890
least like years ago.

203
00:10:40.890 --> 00:10:45.498
And from what I recall it would take
your code, bundle it up for you and

204
00:10:45.498 --> 00:10:47.410
ship it out for you, right?

205
00:10:47.410 --> 00:10:50.250
And then they would containerize it and
take care of all of it for you.

206
00:10:52.490 --> 00:10:58.730
But yeah, I mean, and kind of just to give
a little bit more of, which is better.

207
00:11:01.130 --> 00:11:06.660
So technically a VPS will give
you more dedicated resources.

208
00:11:08.820 --> 00:11:11.009
The reason for
that is just based off of the pure and

209
00:11:11.009 --> 00:11:13.540
simple fact that it's a virtual machine.

210
00:11:13.540 --> 00:11:16.455
A virtual machine takes
a specific piece of compute and

211
00:11:16.455 --> 00:11:19.380
a specific piece of memory and
says, that is mine now.

212
00:11:19.380 --> 00:11:24.100
Thank you.
I only own this if you have scale.

213
00:11:24.100 --> 00:11:27.620
If you're really worried about I want
as much compute power as possible.

214
00:11:27.620 --> 00:11:30.340
A VPS might be better for you.

215
00:11:30.340 --> 00:11:34.972
The reason why I say that
is because I don't know why

216
00:11:34.972 --> 00:11:40.210
Bitcoin came in mind, but
that would be a good example.

217
00:11:40.210 --> 00:11:44.290
It's like, I know I'm going to be
throttling the CPU the entire time.

218
00:11:44.290 --> 00:11:47.410
I know it's going to be
consuming tons of resources.

219
00:11:47.410 --> 00:11:49.958
Probably don't want to put that
on a container with thousands of

220
00:11:49.958 --> 00:11:50.770
other containers.

221
00:11:50.770 --> 00:11:52.668
You're going to be a bad neighbor and

222
00:11:52.668 --> 00:11:55.250
you're going to probably
make the provider mad.

223
00:11:56.450 --> 00:11:58.210
A VPS would be more helpful there.

224
00:11:59.210 --> 00:12:02.810
Not that I'm saying go to your cloud
provider and start running Bitcoin miners.

225
00:12:02.810 --> 00:12:05.890
But yeah, there's trade offs there.

226
00:12:05.890 --> 00:12:09.610
So yeah, it's really good to think
about what works best for you guys.

227
00:12:09.610 --> 00:12:12.210
The application that we're going
to be deploying is very simple.

228
00:12:12.210 --> 00:12:15.970
It's just a go application
that connects to a database.

229
00:12:15.970 --> 00:12:19.770
We're not really worried about tons of
processing power and stuff like that.

230
00:12:19.770 --> 00:12:23.450
So like I said, I knew that I wanted
to be on containers in the future.

231
00:12:23.450 --> 00:12:25.570
So, containers is kind
of where we're starting.

232
00:12:25.570 --> 00:12:27.850
That's like the first layer of
the foundation of the house.

233
00:12:27.850 --> 00:12:29.700
It's like, okay, containers, great.

234
00:12:29.700 --> 00:12:33.300
We made one decision, now where
do we want to run that container?

235
00:12:33.300 --> 00:12:38.300
&gt;&gt; MALE: Right, that's the next decision
to go back to what you said as well.

236
00:12:39.340 --> 00:12:43.243
&gt;&gt; Erik Reinert: The nice thing about
cloud providers is they normally provide

237
00:12:43.243 --> 00:12:45.580
some kind of managed easy solution.

238
00:12:46.940 --> 00:12:49.830
They'll have an entry point
solution because they want you

239
00:12:49.830 --> 00:12:53.740
to drink the Kool Aid and
then eventually get to the big solution.

240
00:12:53.740 --> 00:12:56.950
They want you on Kubernetes, but
they know you can't get there.

241
00:12:56.950 --> 00:13:00.995
So they've built smaller, more again,
abstracted away solutions that make it so

242
00:13:00.995 --> 00:13:03.075
that you can just drop
your application and

243
00:13:03.075 --> 00:13:07.030
then two years later you're giving
them $100,000 a year or something.

244
00:13:08.230 --> 00:13:12.950
In this case,
the service I chose was App Runner.

245
00:13:12.950 --> 00:13:17.411
Now, App Runner is probably
similar to Azure's app service,

246
00:13:17.411 --> 00:13:22.470
where its goal is really just to be like,
I have absolutely nothing.

247
00:13:22.470 --> 00:13:24.630
I just want to get my thing
running in the cloud.

248
00:13:25.710 --> 00:13:27.750
That's exactly what App Runner focuses on.

249
00:13:27.750 --> 00:13:29.550
It will take your source code.

250
00:13:29.550 --> 00:13:34.624
It will potentially, or if you want it to,
it'll even run its own backend builds for

251
00:13:34.624 --> 00:13:39.710
you, it'll containerize it and then it'll
put it up in the cloud and run it for you.

252
00:13:40.990 --> 00:13:42.270
What's nice about that?

253
00:13:43.390 --> 00:13:47.695
Well, technically, again,
talking about that abstraction level,

254
00:13:47.695 --> 00:13:49.418
it's containerization and

255
00:13:49.418 --> 00:13:53.590
it's using all of Amazon's existing
tooling underneath the hood.

256
00:13:53.590 --> 00:13:54.850
That's how Amazon works.

257
00:13:54.850 --> 00:13:55.970
Most cloud providers do that.

258
00:13:55.970 --> 00:13:59.490
They'll be like, okay,
well we've already got ecs.

259
00:13:59.490 --> 00:14:02.607
Well, let's build another service
that's even easier on top of ECS and

260
00:14:02.607 --> 00:14:03.690
then charge more for it.

261
00:14:03.690 --> 00:14:04.450
And then there we go.

262
00:14:04.450 --> 00:14:08.770
Now we're making two handed
money in both hands basically.

263
00:14:10.530 --> 00:14:11.810
And that's what App Runner is.

264
00:14:11.810 --> 00:14:16.240
App Runner is basically a service on top
of a service that makes it easier for

265
00:14:16.240 --> 00:14:18.370
you to get into the door.

266
00:14:18.370 --> 00:14:22.402
But it does mean that underneath
the hood you're going to have horizontal

267
00:14:22.402 --> 00:14:23.970
scalability out of the box.

268
00:14:23.970 --> 00:14:29.490
With App Runner, you'll be able to scale
to however many instances you need.

269
00:14:29.490 --> 00:14:31.570
It'll still have that.

270
00:14:31.570 --> 00:14:35.804
I don't know if you guys remember,
years ago, Google had a keynote where they

271
00:14:35.804 --> 00:14:40.166
showed off the first horizontal scaling
Kubernetes and everybody was amazed and

272
00:14:40.166 --> 00:14:43.650
was like, my gosh,
he's creating thousands of instances.

273
00:14:45.810 --> 00:14:49.815
We're at the point now where these low
level, simple entry level services,

274
00:14:49.815 --> 00:14:53.110
they do that,
like they'll do that out of the box.

275
00:14:53.110 --> 00:14:56.812
So, there's kind of an argument
here to say as well that,

276
00:14:56.812 --> 00:15:00.230
you could never leave
the startup phase too, right?

277
00:15:00.230 --> 00:15:04.038
Like, you could pick a solution that works
so well that you could be like, well,

278
00:15:04.038 --> 00:15:05.270
why do I need kubernetes?

279
00:15:05.270 --> 00:15:07.470
Like, it's already doing that for me.

280
00:15:07.470 --> 00:15:11.867
I'm already getting auto scaling,
I'm already getting automatic restarts and

281
00:15:11.867 --> 00:15:12.830
stuff like that.

282
00:15:12.830 --> 00:15:16.750
And so
these do become like vendor lock ins.

283
00:15:16.750 --> 00:15:18.795
Is really what I'm trying to say is like,
you know,

284
00:15:18.795 --> 00:15:22.120
at some point you'll either be running on
App Runner or you'll be running an ec.

285
00:15:22.120 --> 00:15:24.920
Yes, but it's really all the same
Kool Aid, it's all the same sauce.

286
00:15:24.920 --> 00:15:29.640
At the end of the day, it's just, how much
of that ownership do you want to take on?

287
00:15:29.640 --> 00:15:31.640
It's really my only point
that I'm trying to make.

288
00:15:32.680 --> 00:15:36.401
So in the diagram, you'll see that
our client makes a request and

289
00:15:36.401 --> 00:15:38.239
it goes directly to App Runner.

290
00:15:38.239 --> 00:15:40.960
Now, from us, from our mentality,
that's all we know.

291
00:15:40.960 --> 00:15:42.800
We just know it goes to App Runner.

292
00:15:42.800 --> 00:15:45.000
Does that mean there's
a CDN underneath it?

293
00:15:45.000 --> 00:15:46.480
Does that mean that there's caching?

294
00:15:46.480 --> 00:15:47.040
Does that mean.

295
00:15:47.040 --> 00:15:48.510
I have no idea.

296
00:15:48.510 --> 00:15:52.425
So that's the other side of using
services like this is you're putting

297
00:15:52.425 --> 00:15:56.750
a lot of responsibility on that one thing
to solve a lot of different problems.

