WEBVTT

1
00:00:00.000 --> 00:00:00.720
&gt;&gt; Erik Reinert: Okay, cool.

2
00:00:00.720 --> 00:00:07.280
So we've got that the next file we
want to create is security group tf.

3
00:00:08.800 --> 00:00:13.157
So again, we took care of the calculation
of our subnets and we made or

4
00:00:13.157 --> 00:00:18.560
we reused a base module for
creating like our networking environment.

5
00:00:18.560 --> 00:00:22.137
However, it doesn't necessarily mean
that it's going to solve all of our

6
00:00:22.137 --> 00:00:23.000
problems for it.

7
00:00:23.000 --> 00:00:23.761
It's just us,

8
00:00:23.761 --> 00:00:27.690
it's just going to take care of that lower
level networking part at some point.

9
00:00:27.690 --> 00:00:31.850
The module can only go so far before you
have to start solving your own things.

10
00:00:31.850 --> 00:00:35.583
Like, okay, I want these
security rules of my preference,

11
00:00:35.583 --> 00:00:39.130
not any other person's security rules or
whatever.

12
00:00:39.130 --> 00:00:44.410
In this case you can actually use
a module with other normal resources or

13
00:00:44.410 --> 00:00:46.810
other modules as well.

14
00:00:46.810 --> 00:00:48.490
That's exactly what I'm doing here.

15
00:00:48.490 --> 00:00:54.510
I'm using more modules to now create
security groups on top of that network.

16
00:00:54.510 --> 00:00:56.707
So I've created the network and

17
00:00:56.707 --> 00:01:01.988
I know that it's all set up basically out
of the box, but now I want to make it so

18
00:01:01.988 --> 00:01:07.026
I can give SSH access to my bastion box or
I want to make it so that the private

19
00:01:07.026 --> 00:01:11.775
network will be able to only
communicate with the database network.

20
00:01:11.775 --> 00:01:15.726
Like other kind of more custom
preferences that I have.

21
00:01:15.726 --> 00:01:20.710
So in this file,
what we're doing is we're doing just that.

22
00:01:20.710 --> 00:01:25.641
This is our first security group
where we are telling it, hey,

23
00:01:25.641 --> 00:01:28.590
I want to name it var name Bastion.

24
00:01:28.590 --> 00:01:32.965
What's nice about this is remember
it's all separated into environments,

25
00:01:32.965 --> 00:01:37.150
which means we will get out of the box
a bastion node in every environment.

26
00:01:39.710 --> 00:01:43.114
Again, it's just another reason why
this environment organization is really

27
00:01:43.114 --> 00:01:43.870
powerful.

28
00:01:43.870 --> 00:01:46.880
Because it means that, okay,
if I was looking at EC2 and

29
00:01:46.880 --> 00:01:50.350
I wanted to look at the dev bastion,
I would just see dev bastion.

30
00:01:50.350 --> 00:01:52.810
Okay, cool.
Probably prod-bastion, okay, cool.

31
00:01:52.810 --> 00:01:54.730
Now I know which ones I'm
trying to connect to.

32
00:01:56.330 --> 00:02:01.290
We tell it what ingress with CIDR
blocks that we want to connect to.

33
00:02:01.290 --> 00:02:07.558
And so I'm doing a little bit of
terraform logic here to basically say,

34
00:02:07.558 --> 00:02:12.677
hey, for each bastion ingress
value inside of the array,

35
00:02:12.677 --> 00:02:18.270
give it the CIDR block and
then allow it over SSH tcp.

36
00:02:18.270 --> 00:02:20.923
And because I'm using a module to do this,

37
00:02:20.923 --> 00:02:25.865
this module itself is also going to create
multiple internal resources that has

38
00:02:25.865 --> 00:02:30.805
just made it easier to customize because
when you don't use a module like this,

39
00:02:30.805 --> 00:02:34.860
you actually need two resources,
you need the security group and

40
00:02:34.860 --> 00:02:39.390
then you have to add rules to that
security group with another resource.

41
00:02:39.390 --> 00:02:41.470
So it's just more cumbersome, more work.

42
00:02:41.470 --> 00:02:45.060
I can do everything in one place
with this module directly.

43
00:02:45.060 --> 00:02:49.385
So we do the same thing for our database
security group where we basically say,

44
00:02:49.385 --> 00:02:53.460
hey, if anything is on the database
network, allow it to access itself.

45
00:02:53.460 --> 00:02:57.759
So by default, only databases on
the database network can communicate with

46
00:02:57.759 --> 00:02:59.380
other databases right now.

47
00:03:00.659 --> 00:03:03.908
And then we do the same thing for
elasticache,

48
00:03:03.908 --> 00:03:06.740
we create a private subnet as well.

49
00:03:06.740 --> 00:03:11.162
Basically what you're noticing here is
that I'm creating security groups for

50
00:03:11.162 --> 00:03:12.690
each network.

51
00:03:12.690 --> 00:03:16.370
Like I'm just laying out the plane or
each subnet space, right?

52
00:03:16.370 --> 00:03:19.700
So I'm saying like, okay,
here's the security group for database,

53
00:03:19.700 --> 00:03:22.370
here's the security group for
the private subnets.

54
00:03:22.370 --> 00:03:26.199
And I'm just like slowly
separating all of my traffic and

55
00:03:26.199 --> 00:03:29.010
filtering based off of just those.

56
00:03:29.010 --> 00:03:31.671
So I'm not trying to focus on say, okay,

57
00:03:31.671 --> 00:03:35.410
only this RDS instance can just
talk to this RDS instance.

58
00:03:35.410 --> 00:03:39.230
I don't think that's a really great
way of making networking in Amazon.

59
00:03:39.230 --> 00:03:42.510
A big reason for
that is because it's one to one, right?

60
00:03:42.510 --> 00:03:46.653
And so if you make a change, if something
happens, if you make a firewall change,

61
00:03:46.653 --> 00:03:50.670
you could accidentally break
something without meaning to.

62
00:03:50.670 --> 00:03:54.842
So what I like to do is I like to
have higher level security groups

63
00:03:54.842 --> 00:03:56.910
that everything shares.

64
00:03:56.910 --> 00:03:58.522
So today when we create stuff,

65
00:03:58.522 --> 00:04:02.590
everything's going to get provisioned
with the private security group.

66
00:04:02.590 --> 00:04:03.750
That's it, I'm done.

67
00:04:03.750 --> 00:04:06.550
I don't have to think about filtering or
anything else.

68
00:04:06.550 --> 00:04:09.369
I know that everything on the private
security group will be accessible via

69
00:04:09.369 --> 00:04:10.498
the private security group.

70
00:04:10.498 --> 00:04:14.906
It's internal, so I don't have to worry
about it being online either, right?

71
00:04:14.906 --> 00:04:17.510
And it just makes
networking a lot simpler.

72
00:04:17.510 --> 00:04:20.690
So if you want to go deep down into like
the rabbit hole of like, I'm going to

73
00:04:20.690 --> 00:04:23.970
create a security group just for this
database and then just for this database

74
00:04:23.970 --> 00:04:27.070
and then I'm going to make it so that I
add a rule here and add a rule there.

75
00:04:27.070 --> 00:04:30.049
Well, that's like four operations that
you're going to have to figure out how

76
00:04:30.049 --> 00:04:30.630
to do, right?

77
00:04:30.630 --> 00:04:33.484
Whereas instead I can just
create a security group and

78
00:04:33.484 --> 00:04:37.672
then wherever else I provision things,
whenever I go to use a security group,

79
00:04:37.672 --> 00:04:42.020
I can just look this one up and say
we're just going to use the private one.

80
00:04:42.020 --> 00:04:46.660
Then again, because ingress with self,
meaning that, hey,

81
00:04:46.660 --> 00:04:52.268
anything in the private security group
can access across every protocol and

82
00:04:52.268 --> 00:04:54.900
across everything effectively.

83
00:04:54.900 --> 00:04:56.460
There's no blocking whatsoever.

84
00:04:56.460 --> 00:04:59.780
If you're in the private security group,
you get access to everything.

85
00:05:01.190 --> 00:05:05.321
And this is like, again,
this is like where I like to start, but

86
00:05:05.321 --> 00:05:09.300
we do want to poke some holes and
so what we're doing is again,

87
00:05:09.300 --> 00:05:14.655
instead of poking a hole from one instance
to another, what we're saying is that,

88
00:05:14.655 --> 00:05:19.990
hey, we want to allow the private
subnet to access the database subnet.

89
00:05:19.990 --> 00:05:25.110
And so we say, okay, 5432, poke a hole
from one security group to another.

90
00:05:25.110 --> 00:05:29.239
This is another thing that's really
nice about constructing policies and

91
00:05:29.239 --> 00:05:31.460
security policies in Amazon.

92
00:05:31.460 --> 00:05:34.980
Have you noticed that I haven't defined
a CIDR or IP address at all here?

93
00:05:36.020 --> 00:05:39.602
That's because I'm just using
abstracted security rules and

94
00:05:39.602 --> 00:05:41.940
I'm gluing those together.

95
00:05:41.940 --> 00:05:45.060
I'm just saying, hey, if you're in this
security group, you're good to go.

96
00:05:45.060 --> 00:05:49.054
It doesn't matter what your IP address is,
it doesn't matter what space you're in,

97
00:05:49.054 --> 00:05:51.079
but if you don't have that security group,

98
00:05:51.079 --> 00:05:53.451
you will not be able to
access this cluster, yeah.

99
00:05:53.451 --> 00:05:58.083
So when we're talking
about security groups,

100
00:05:58.083 --> 00:06:04.576
is that just a higher level concept
on the built in firewall in AWS?

101
00:06:04.576 --> 00:06:09.331
It's literally iptables basically,
yeah, it's literal firewalling.

102
00:06:09.331 --> 00:06:14.471
Yeah, so when we create our subnets and
we like put something on the network

103
00:06:14.471 --> 00:06:19.540
in those subnets, by default they
can all communicate with each other.

104
00:06:19.540 --> 00:06:23.772
Like that's just how Amazon
works out of the box is that

105
00:06:23.772 --> 00:06:29.630
every everything in
the 10.0.0.0 16 address space.

106
00:06:29.630 --> 00:06:32.489
If you're in that address space, you can
communicate with anything inside of it.

107
00:06:32.489 --> 00:06:35.938
So we want some isolation there, right?

108
00:06:35.938 --> 00:06:40.910
But we've already separated
our stuff by subnet.

109
00:06:40.910 --> 00:06:45.598
So I don't really want to go lower than
that cuz it's five things versus 90

110
00:06:45.598 --> 00:06:47.150
things.

111
00:06:47.150 --> 00:06:50.599
So in this case what we're doing is
we're saying, okay, we're, well, I have

112
00:06:50.599 --> 00:06:53.965
a database subnet, I have elasticache
subnet, intra or private and public.

113
00:06:53.965 --> 00:06:58.564
Let's create security groups for
those subnets and then let's make it so

114
00:06:58.564 --> 00:07:02.497
that every resource gets attached
to those security groups and

115
00:07:02.497 --> 00:07:07.120
then we'll do all of our filtering
through the security groups, right?

116
00:07:07.120 --> 00:07:09.910
And so
then it just naturally gets inherited.

117
00:07:09.910 --> 00:07:12.367
You don't have to worry about IP
addresses or anything like that.

118
00:07:12.367 --> 00:07:16.148
But you're still traffic shaping
in a way where you know, okay,

119
00:07:16.148 --> 00:07:20.480
private can only talk to database or
database only lets private talk to it,

120
00:07:20.480 --> 00:07:22.222
right, and stuff like that.

121
00:07:22.222 --> 00:07:27.963
Yeah, it's a little higher level, but it
is, yeah, it's like, it's like, it's like

122
00:07:27.963 --> 00:07:33.210
you said it's like network filtering on
top of the network that we created, yeah.

123
00:07:34.490 --> 00:07:38.346
And so, yeah, in this case,
what we're doing is we're allowing,

124
00:07:38.346 --> 00:07:41.005
you'll see the referenced
security group id,

125
00:07:41.005 --> 00:07:44.010
that's the private network
that we want to allow in.

126
00:07:44.010 --> 00:07:47.509
And then the security group ID is
the address or the net or, sorry,

127
00:07:47.509 --> 00:07:50.380
the security group that we want to update.

128
00:07:50.380 --> 00:07:54.371
So in this case, we're saying,
hey, database security group,

129
00:07:54.371 --> 00:07:58.740
when it's the private security group,
allow it just over 5,432.

130
00:07:58.740 --> 00:08:02.266
So we did make a hole, but
we made just like a tiny little hole for

131
00:08:02.266 --> 00:08:06.212
that entire address space,
which means we didn't do all, all here.

132
00:08:06.212 --> 00:08:08.336
I could have just said, all right, well,

133
00:08:08.336 --> 00:08:10.940
allow everything from
the database network to the.

134
00:08:10.940 --> 00:08:14.716
But it's like, well, I know it's
only going to be used over 5,432 and

135
00:08:14.716 --> 00:08:17.140
I know it's only going to be used for
databases.

136
00:08:17.140 --> 00:08:19.210
So let's be somewhat granular there.

137
00:08:19.210 --> 00:08:23.290
But let's not make it too complex to
where it's going to be a pain in the.

138
00:08:23.290 --> 00:08:25.210
Don't make it so that it's a random port.

139
00:08:25.210 --> 00:08:26.250
You know what I mean?

140
00:08:26.250 --> 00:08:29.450
Don't let your databases
provision on anything but 5432.

141
00:08:29.450 --> 00:08:30.250
You'll be good.

142
00:08:31.370 --> 00:08:35.690
That's the standardization we're
putting in place with our traffic.

143
00:08:35.690 --> 00:08:39.069
So if somebody created a database and
they put it on 5433 and

144
00:08:39.069 --> 00:08:43.170
they come to you and they're like,
why is my database isn't working?

145
00:08:43.170 --> 00:08:43.850
It's your fault.

146
00:08:43.850 --> 00:08:45.810
It's like, well,
what address did you put it on?

147
00:08:45.810 --> 00:08:46.890
5457.

148
00:08:48.070 --> 00:08:49.870
Why just use the default one?

149
00:08:49.870 --> 00:08:52.230
That's the one that works out of the box.

150
00:08:52.230 --> 00:08:56.230
We do the exact same
thing with Redis as well.

151
00:08:56.230 --> 00:09:01.990
So we say, okay, elasticache,
we want you to be able to connect to the.

152
00:09:01.990 --> 00:09:02.675
I'm sorry,

153
00:09:02.675 --> 00:09:06.630
we want the private subnet to be able
to connect to Elasticache for Redis.

154
00:09:06.630 --> 00:09:09.270
Redis default is 6379.

155
00:09:09.270 --> 00:09:10.232
That should never change.

156
00:09:10.232 --> 00:09:15.257
So as long as you use the default port and
you're connecting from

157
00:09:15.257 --> 00:09:21.320
the private subnets to the elasticache
subnets, you have allowed traffic.

158
00:09:21.320 --> 00:09:22.360
You can do that.

159
00:09:22.360 --> 00:09:27.067
So again, we're putting some security in
place, but we're not getting massively

160
00:09:27.067 --> 00:09:31.509
granular with it to the point where we're
trying to do it with every resource and

161
00:09:31.509 --> 00:09:32.520
stuff like that.

