WEBVTT

1
00:00:00.160 --> 00:00:02.040
&gt;&gt; Erik Reinert: So
let's go here and again.

2
00:00:02.040 --> 00:00:05.280
So this is our environment,
this is our database.

3
00:00:05.280 --> 00:00:09.461
And so now what I'm going to do is I'm
going to go back to the root level,

4
00:00:09.461 --> 00:00:12.400
I'm going to run Terraform in it again and
again.

5
00:00:12.400 --> 00:00:16.391
You have to do this every time you add
a new module because it has to set up

6
00:00:16.391 --> 00:00:20.000
the configuration and
all that in Terraform.

7
00:00:20.000 --> 00:00:22.640
And then I'm going to do Terraform plan.

8
00:00:25.600 --> 00:00:30.308
While this is running, I want you to
note really quickly, at my command, you,

9
00:00:30.308 --> 00:00:33.210
you'll see here that I
do out terraform TFPlan.

10
00:00:34.970 --> 00:00:37.170
You don't have to do that here.

11
00:00:37.170 --> 00:00:37.850
I'll go back.

12
00:00:40.330 --> 00:00:41.850
So you don't have to do that.

13
00:00:42.890 --> 00:00:46.303
But the main reason why I do
is because it makes it so

14
00:00:46.303 --> 00:00:51.264
that when you run plans, you can create
files that then you can reference

15
00:00:51.264 --> 00:00:55.815
directly in kind of like an immutable
way where, you know, like,

16
00:00:55.815 --> 00:01:00.310
okay, I made this file,
now I can run apply against it.

17
00:01:00.310 --> 00:01:02.750
You'll normally do this in CI/CD.

18
00:01:02.750 --> 00:01:06.150
As a matter of fact,
we'll do this in CI/CD as well.

19
00:01:06.150 --> 00:01:10.027
And it kind of makes it nice too,
because when you do it in CI/CD,

20
00:01:10.027 --> 00:01:14.183
you can generate the plan in one job and
then save that as an artifact and

21
00:01:14.183 --> 00:01:19.190
then only use it if the deployment is
triggered, but you still get that plan.

22
00:01:19.190 --> 00:01:24.400
So if you want to download the plan and
then rerun it, you can do that as well.

23
00:01:24.400 --> 00:01:26.720
I do like exporting it as a file.

24
00:01:26.720 --> 00:01:31.160
Just in my mind it's a little bit nicer,
but.

25
00:01:31.160 --> 00:01:31.720
Okay, cool.

26
00:01:31.720 --> 00:01:36.240
You can see that when I ran my plan,
I now have an SSM parameter.

27
00:01:36.240 --> 00:01:40.200
It's going to get created in
staging database password.

28
00:01:40.200 --> 00:01:41.840
So I can get the database password.

29
00:01:43.040 --> 00:01:45.760
And then you'll see here,
here's my database instance.

30
00:01:45.760 --> 00:01:49.080
Again, because it's a database, there's
not like hundreds of resources here.

31
00:01:49.080 --> 00:01:50.040
We only have three.

32
00:01:51.320 --> 00:01:54.600
Yeah, Amazon doesn't really have
a ton of resources for databases.

33
00:01:57.640 --> 00:01:59.320
Terraform apply.

34
00:01:59.320 --> 00:02:01.160
So let's go ahead and apply it now.

35
00:02:01.160 --> 00:02:05.518
Now, databases do take a few minutes, so
if you guys want, you guys can go ahead

36
00:02:05.518 --> 00:02:09.506
and keep trying to get your plans and
everything for your environments.

37
00:02:09.506 --> 00:02:15.087
&gt;&gt; Speaker 2: Much rather type some
commands than a bunch of click ops.

38
00:02:15.087 --> 00:02:17.457
&gt;&gt; Erik Reinert: Well, that's like again,

39
00:02:17.457 --> 00:02:21.218
you say that now because you know it,
right?

40
00:02:21.218 --> 00:02:25.940
But when you don't know how to do
all the like CLI and everything.

41
00:02:25.940 --> 00:02:29.260
Again, that feels like a scene
in the matrix like that we know.

42
00:02:29.260 --> 00:02:30.180
He's like, what are you looking at?

43
00:02:30.180 --> 00:02:31.460
You know, everything.

44
00:02:31.460 --> 00:02:33.460
You know, like they don't.

45
00:02:33.460 --> 00:02:35.940
Like I talked To.

46
00:02:35.940 --> 00:02:36.820
I can't remember who.

47
00:02:36.820 --> 00:02:41.582
I talked to somebody recently and I was
like, you really have no idea what I do,

48
00:02:41.582 --> 00:02:42.490
do you?

49
00:02:42.490 --> 00:02:45.850
And they're like, yeah, no, I've.

50
00:02:45.850 --> 00:02:51.059
And this is like, I don't know if this
gives you guys perspective at all,

51
00:02:51.059 --> 00:02:55.610
but for like years,
people just constantly thought I was busy.

52
00:02:55.610 --> 00:02:56.970
Like, no, no, no, no, I get it.

53
00:02:56.970 --> 00:02:58.449
You're busy, you're busy, right?

54
00:02:58.449 --> 00:03:01.850
And I'm like, well, yeah,
I know I'm working, whatever, you know.

55
00:03:01.850 --> 00:03:03.730
But they're like, no, no, no,
you're busy, you're busy.

56
00:03:03.730 --> 00:03:07.848
What I didn't realize is they'd come into
my office, they'd look at my monitor and

57
00:03:07.848 --> 00:03:09.750
it would be so confusing.

58
00:03:09.750 --> 00:03:12.950
They just assumed I was
always working on work stuff.

59
00:03:12.950 --> 00:03:14.870
And I was like, no, no, this is personal.

60
00:03:14.870 --> 00:03:16.630
Like, I'm doing this for fun.

61
00:03:16.630 --> 00:03:17.964
And then they'd be like, so

62
00:03:17.964 --> 00:03:20.310
you're technically just like
playing around right now?

63
00:03:20.310 --> 00:03:21.150
I was like, yeah.

64
00:03:21.150 --> 00:03:23.230
And then they're like, my God.

65
00:03:23.230 --> 00:03:26.145
Like, you know,
they didn't realize that, you know,

66
00:03:26.145 --> 00:03:30.033
there is a difference between like
the code you open for work and when you're

67
00:03:30.033 --> 00:03:34.070
work working versus even just learning and
having fun or whatever, you know.

68
00:03:35.690 --> 00:03:38.796
So, yeah,
it is a kind of a massive step away for

69
00:03:38.796 --> 00:03:43.306
some people to understand how it can
be valuable, how it can actually

70
00:03:43.306 --> 00:03:48.810
save you time when just looking at
it is incredibly daunting and scary.

71
00:03:48.810 --> 00:03:51.449
So I get it, I totally do.

72
00:03:51.449 --> 00:03:52.890
But yeah, you're absolutely right.

73
00:03:54.490 --> 00:03:56.530
That's why these things were created.

74
00:03:56.530 --> 00:04:01.707
Whereas to solve the problem of
having to do repetitive tasks that

75
00:04:01.707 --> 00:04:07.270
are really complex, you know, over and
over and over and over again.

76
00:04:08.550 --> 00:04:09.990
So yeah, there you go.

77
00:04:09.990 --> 00:04:11.302
Now, we have a database.

78
00:04:11.302 --> 00:04:14.570
And so what's kind of cool is, and
we haven't really done this yet.

79
00:04:14.570 --> 00:04:19.539
But this is where in my mind it really
does start to feel like you're using

80
00:04:19.539 --> 00:04:22.552
the cloud provider for
what its purpose is,

81
00:04:22.552 --> 00:04:27.520
which is to build infrastructure on top
of it and get to be able to see it and

82
00:04:27.520 --> 00:04:31.190
manage it and
work with it very easily, right?

83
00:04:31.190 --> 00:04:33.590
How many of you have
ever done self hosting?

84
00:04:33.590 --> 00:04:35.870
Just curious,
like how many of you have actually done.

85
00:04:35.870 --> 00:04:37.990
Okay, so
we got a couple self hosted stuff.

86
00:04:39.270 --> 00:04:44.274
When you do self-hosting, you don't get an
out-of-the-box UI normally, [LAUGH] right?

87
00:04:44.274 --> 00:04:44.855
You don't.

88
00:04:44.855 --> 00:04:48.630
There's a lot of work that takes
to get to what you see here.

89
00:04:49.830 --> 00:04:53.344
So the fact that it is so
approachable and so easy is why again,

90
00:04:53.344 --> 00:04:55.430
the cloud is really valuable.

91
00:04:55.430 --> 00:04:58.540
And so like, for example,
if I want to go and look at my VPC or

92
00:04:58.540 --> 00:04:59.990
my network that I created.

93
00:04:59.990 --> 00:05:01.830
I can just go to VPC at the top.

94
00:05:03.450 --> 00:05:04.970
I can go to VPCs here.

95
00:05:04.970 --> 00:05:07.530
You'll see I have a couple of them.

96
00:05:07.530 --> 00:05:14.707
By the way, if you're curious why I
have a VPC called Alta4 LLC Bulbasaur,

97
00:05:14.707 --> 00:05:19.644
that's because me and
a friend of mine were debating

98
00:05:19.644 --> 00:05:24.152
on what would be the best
way to version things.

99
00:05:24.152 --> 00:05:27.707
And so I figured versioning by
PokÃ©mon name would be great, right?

100
00:05:27.707 --> 00:05:28.588
0 to 100.

101
00:05:28.588 --> 00:05:32.025
So technically, that's the first cluster,

102
00:05:32.025 --> 00:05:36.480
the first virtual environment
that we have, right?

103
00:05:36.480 --> 00:05:40.731
And so if we were to create a new one and
need to migrate it to it or whatever,

104
00:05:40.731 --> 00:05:43.120
then that one would be, what is it?

105
00:05:43.120 --> 00:05:46.000
Ivysaur or Venusaur or whatever.

106
00:05:46.000 --> 00:05:50.880
But yeah, so
I do it by convention of Pokemon.

107
00:05:50.880 --> 00:05:56.240
But yeah, that is a fun way to do
versioning and stuff like that.

108
00:05:56.240 --> 00:06:01.098
If you, you didn't want to just
do cluster one, cluster two,

109
00:06:01.098 --> 00:06:03.860
cluster three, I do it by Pokemon.

110
00:06:03.860 --> 00:06:07.820
Anyways, so
the staging network is right here.

111
00:06:07.820 --> 00:06:11.874
You can see that actually
my Alta 4 LLC Bulbasaur and

112
00:06:11.874 --> 00:06:15.660
my staging have the same address space.

113
00:06:15.660 --> 00:06:19.007
That means that if I did try and
connect these two networks together,

114
00:06:19.007 --> 00:06:22.460
we would have collisions and
they wouldn't work.

115
00:06:22.460 --> 00:06:27.370
So they would be incompatible
to effectively be conjoined.

116
00:06:28.410 --> 00:06:31.559
Whereas the default comes
with a 172 address space,

117
00:06:31.559 --> 00:06:37.130
meaning that I could connect those two
together and I wouldn't have that problem.

118
00:06:37.130 --> 00:06:41.750
So that's just kind of another thing to
note is just keep an eye on your networks

119
00:06:41.750 --> 00:06:44.620
IP spaces and
make sure that you're not creating

120
00:06:44.620 --> 00:06:47.290
overlaps if you don't
want them to overlap.

121
00:06:48.650 --> 00:06:50.313
Yeah,
&gt;&gt; Speaker 3: bit of an aside, but

122
00:06:50.313 --> 00:06:55.156
where would you build in controls over
who can do a terraform destroy, for

123
00:06:55.156 --> 00:07:00.490
example, on certain resources or
protections against tearing things down?

124
00:07:00.490 --> 00:07:04.223
&gt;&gt; Erik Reinert: Yeah, so
it's a little tricky and

125
00:07:04.223 --> 00:07:09.450
you might end up doing
it in multiple places.

126
00:07:09.450 --> 00:07:14.646
So one of the places you could
prevent people from deleting things

127
00:07:14.646 --> 00:07:19.540
is this is what I do for
my company and the projects I work on.

128
00:07:19.540 --> 00:07:24.420
I actually create roles for
plans and roles for applies.

129
00:07:24.420 --> 00:07:27.460
That means that when you plan,
it's read only.

130
00:07:27.460 --> 00:07:29.100
They can't actually write anything.

131
00:07:29.100 --> 00:07:30.500
Nothing can be created.

132
00:07:30.500 --> 00:07:37.540
But then when we apply, you have access to
create and put and all that kind of stuff.

133
00:07:37.540 --> 00:07:39.770
However, with Amazon's policies,

134
00:07:39.770 --> 00:07:42.842
that doesn't mean that you
could prevent a delete.

135
00:07:42.842 --> 00:07:47.640
Put could mean in some cases change or
delete, right?

136
00:07:47.640 --> 00:07:52.162
So that may mean that you
have another layer of

137
00:07:52.162 --> 00:07:58.120
granularity around terraform,
maybe by default.

138
00:07:58.120 --> 00:07:59.720
In all Honesty.

139
00:07:59.720 --> 00:08:02.280
That's where
Terraform Enterprise comes in.

140
00:08:02.280 --> 00:08:07.574
Because Terraform Enterprise is about
not letting people run locally and

141
00:08:07.574 --> 00:08:12.620
making everybody run through their
cloud platform and their ui.

142
00:08:12.620 --> 00:08:14.700
And you'd basically want
to achieve the same.

143
00:08:14.700 --> 00:08:18.220
You'd basically want to say, okay,
nobody's allowed to apply locally.

144
00:08:18.220 --> 00:08:21.704
And if you want to do a delete, you
have to go through a user interface and

145
00:08:21.704 --> 00:08:24.610
click a button and
have permissions to click that button and

146
00:08:24.610 --> 00:08:26.940
then it'll run a delete plan.

147
00:08:26.940 --> 00:08:31.900
But you have to build something around
Terraform to kind of fully stop it.

148
00:08:31.900 --> 00:08:36.684
But you can kind of stop it, like I said
with the plan and apply roles that'll at

149
00:08:36.684 --> 00:08:41.615
least make sure that if you wanted to give
a read only role to developers locally so

150
00:08:41.615 --> 00:08:44.442
they could test the plan but
then not apply it,

151
00:08:44.442 --> 00:08:48.969
then you would just give them that read
only role for all of the resources.

152
00:08:48.969 --> 00:08:52.154
And then if they tried to plan or
delete or apply or

153
00:08:52.154 --> 00:08:54.889
destroy, they couldn't do either.

154
00:08:54.889 --> 00:08:57.049
So yeah,
that's another approach you could take.

155
00:08:57.049 --> 00:08:57.710
Yeah,
&gt;&gt; Speaker 4: or

156
00:08:57.710 --> 00:09:02.906
put the apply on the actual cd
whenever you push this out,

157
00:09:02.906 --> 00:09:09.520
just put the role that can apply on
the continuous delivery in your repo.

158
00:09:09.520 --> 00:09:12.880
&gt;&gt; Erik Reinert: Yeah,
just keep that in CI/CD if you want.

159
00:09:14.480 --> 00:09:17.703
Cool.
Okay, so if we click on the vpc, there's

160
00:09:17.703 --> 00:09:22.960
actually something I do want to point
out which is really nice in my opinion.

161
00:09:22.960 --> 00:09:25.360
I'm really glad they added this.

162
00:09:25.360 --> 00:09:28.069
You could see a full resource map or

163
00:09:28.069 --> 00:09:33.040
network map of your entire VPC or
virtual private cloud.

164
00:09:33.040 --> 00:09:38.290
So what you're seeing here is three
different availability zones,

165
00:09:38.290 --> 00:09:43.640
US West 2A 2B 2C and all of the subnets
that are provisioned in them.

166
00:09:43.640 --> 00:09:46.920
You can see as if I hover or
when I hover over them,

167
00:09:46.920 --> 00:09:49.241
it shows how they actually route.

168
00:09:49.241 --> 00:09:54.127
So this is kind of nice too, if you wanna
see if a subnet's connected to a public

169
00:09:54.127 --> 00:09:56.360
versus a private network, right?

170
00:09:56.360 --> 00:09:57.000
You can see that.

171
00:09:57.000 --> 00:10:01.991
And so here you can see that private goes
basically entirely through the private NAT

172
00:10:01.991 --> 00:10:03.200
gateway.

173
00:10:03.200 --> 00:10:06.591
And so you can see all of the, you get
to see actually all of the subnets that

174
00:10:06.591 --> 00:10:10.080
are connected to the private NAT
gateway for Internet access.

175
00:10:10.080 --> 00:10:15.200
And then you can see the 1 Networks or
subnets that are connected to public.

176
00:10:15.200 --> 00:10:16.720
And then.
Yeah, all the way here on the.

177
00:10:16.720 --> 00:10:18.418
Right.
These are the actual.

178
00:10:18.418 --> 00:10:24.560
Sorry, so this is the Internet gateway and
then this is the NAT gateway.

179
00:10:25.760 --> 00:10:28.554
These are the route tables.

180
00:10:28.554 --> 00:10:31.414
How many of you know
what a route table is?

181
00:10:31.414 --> 00:10:33.190
Okay?
&gt;&gt; Speaker 4: IP tables.

182
00:10:33.190 --> 00:10:39.340
&gt;&gt; Erik Reinert: Yeah, it's basically,
a routing table is a network.

183
00:10:39.340 --> 00:10:43.939
I guess an easiest way to call it
is like A networking principle or

184
00:10:43.939 --> 00:10:48.795
part of networking that says these
IPs in this space can communicate

185
00:10:48.795 --> 00:10:51.180
with these IPs in this space.

186
00:10:51.180 --> 00:10:56.612
So when we say a route table, we literally
mean that all of these subnets are routing

187
00:10:56.612 --> 00:11:01.269
out to this Internet connection right
here, which is our NAT gateway,

188
00:11:01.269 --> 00:11:07.290
versus these, which just route out to
this public Internet gateway right here.

189
00:11:07.290 --> 00:11:09.410
Again, just a little bit of
networking knowledge for you.

190
00:11:09.410 --> 00:11:13.970
If you're curious, say yeah,
and then we can see CIDRS.

191
00:11:13.970 --> 00:11:15.850
We can see there's our 10.0.0.16.

192
00:11:15.850 --> 00:11:17.690
We can add flow logs.

193
00:11:17.690 --> 00:11:20.601
What's cool about flow
logs is flow logs enables

194
00:11:20.601 --> 00:11:25.250
you to log all of the networking
traffic coming in and out of your vpc.

195
00:11:25.250 --> 00:11:28.303
So if you wanted to monitor things for
security reasons or

196
00:11:28.303 --> 00:11:32.290
other things like that,
you can monitor them through flow logs.

197
00:11:32.290 --> 00:11:33.250
Yeah.

198
00:11:33.250 --> 00:11:35.330
Another thing,
you can also look at your subnets.

199
00:11:35.330 --> 00:11:38.742
So if you want, you click on subnets,
we can see all of our subnets here again,

200
00:11:38.742 --> 00:11:40.570
we can see all of our
route tables as well.

201
00:11:40.570 --> 00:11:44.530
So if you're curious to see like how
routing works, you just click on routes.

202
00:11:44.530 --> 00:11:48.016
And just to give you a quick idea
of like what routing means or

203
00:11:48.016 --> 00:11:52.290
how to read it effectively,
you have your destination and your target.

204
00:11:53.360 --> 00:11:57.834
So your destination is effectively
what you're trying to route from and

205
00:11:57.834 --> 00:12:01.280
basically what you're trying to route to.

206
00:12:01.280 --> 00:12:06.480
So in this case we're saying
000 is out of the NAT gateway.

207
00:12:06.480 --> 00:12:10.281
So that means that if you
route to the NAT gateway,

208
00:12:10.281 --> 00:12:15.348
then you should be able to access 000 and
then anything local you

209
00:12:15.348 --> 00:12:21.580
can access 10.0.0.16 if you're
local effectively to the network.

210
00:12:21.580 --> 00:12:24.985
So what this really means is just
we only have Internet access and

211
00:12:24.985 --> 00:12:27.140
we have access to our 1000 network.

212
00:12:27.140 --> 00:12:29.820
There's no other address
spaces that we have access to.

213
00:12:32.060 --> 00:12:33.980
Yeah, that's really it for the network.

214
00:12:33.980 --> 00:12:36.380
So then we can take a look
at RDS really quickly.

215
00:12:36.380 --> 00:12:41.420
So here's RDS again,
another Amazon Console ui.

216
00:12:41.420 --> 00:12:44.496
But this would show you where
all of your databases are and

217
00:12:44.496 --> 00:12:46.110
it shows you in a list format.

218
00:12:46.110 --> 00:12:48.903
So again, you can kind of see
like all of your databases and

219
00:12:48.903 --> 00:12:53.070
some micro information about it, like the
CPU connectivity, all that kind of stuff.

220
00:12:53.070 --> 00:12:56.589
But if we click on it directly,
we can get more information about it,

221
00:12:56.589 --> 00:12:57.630
like the endpoint.

222
00:12:57.630 --> 00:13:00.630
So if you were curious, like,
well, what's the URL of it?

223
00:13:00.630 --> 00:13:03.590
This is where you can get
the URL of your database.

224
00:13:03.590 --> 00:13:05.190
You can also see monitoring.

225
00:13:05.190 --> 00:13:09.110
So out of the box you get
very simple monitoring.

226
00:13:10.160 --> 00:13:13.984
So you'll get like burst balance,
checkpoint lag, CPU credit,

227
00:13:13.984 --> 00:13:15.360
all that kind of stuff.

228
00:13:15.360 --> 00:13:18.920
Utilization, database connections,
disk queue depth.

229
00:13:18.920 --> 00:13:23.920
Like a lot of the more standard things you
won't get, like transactional metrics.

230
00:13:23.920 --> 00:13:26.360
That's really more what
the database insights.

231
00:13:26.360 --> 00:13:29.840
This like big buy me button is right here.

232
00:13:29.840 --> 00:13:32.866
But this will make it so that you
can actually see like transactions,

233
00:13:32.866 --> 00:13:36.623
how long they're taking, what kind of lag
they're introducing into the database,

234
00:13:36.623 --> 00:13:38.060
all that kind of stuff.

235
00:13:38.060 --> 00:13:45.100
So another thing to note about RDS and
really just Amazon services in general.

236
00:13:46.620 --> 00:13:50.929
Amazon is such a massive,
massive ecosystem that other

237
00:13:50.929 --> 00:13:55.340
ecosystems exist on top of it
like a shark and pilot fish.

238
00:13:56.460 --> 00:13:58.274
And what I mean by that is,

239
00:13:58.274 --> 00:14:02.820
don't feel limited by the observability
that you even see here.

240
00:14:02.820 --> 00:14:05.757
Like I said before,
we are trying to create observability and

241
00:14:05.757 --> 00:14:07.630
we are gaining that.

242
00:14:07.630 --> 00:14:09.294
Like, if I want to, I can go and

243
00:14:09.294 --> 00:14:12.750
take a look at my network
observability in the VPC section.

244
00:14:12.750 --> 00:14:15.924
If I want to take a look at
my database observability,

245
00:14:15.924 --> 00:14:18.430
I can look at the RDS section, right?

246
00:14:18.430 --> 00:14:20.430
But it doesn't mean that it stops there.

247
00:14:20.430 --> 00:14:25.672
Like, if you've ever heard of Grafana
before, there are other solutions like

248
00:14:25.672 --> 00:14:30.758
it Grafana Cloud, where you can hook
into metrics that are inside of Amazon,

249
00:14:30.758 --> 00:14:36.159
create dashboards, create better,
more customized metrics that you may have,

250
00:14:36.159 --> 00:14:41.210
create more like customized alerts,
or change the platform.

251
00:14:41.210 --> 00:14:45.452
You don't have to feel like you have to
be vendor locked into Amazon even though

252
00:14:45.452 --> 00:14:48.490
you're like hosting resources on Amazon.

253
00:14:48.490 --> 00:14:52.066
And a good example of that is,
for my company,

254
00:14:52.066 --> 00:14:56.850
I actually run Amazon Resources,
but they're all lambdas.

255
00:14:56.850 --> 00:15:00.730
And what I do is I ship all of
my metrics to Grafana Cloud.

256
00:15:00.730 --> 00:15:02.810
Grafana Cloud's a lot cheaper.

257
00:15:02.810 --> 00:15:05.130
You get a lot of really
cool benefits out of it.

258
00:15:05.130 --> 00:15:08.510
And personally,
I just don't like the CloudWatch UI.

259
00:15:08.510 --> 00:15:10.510
I'm not a real big fan of it.

260
00:15:10.510 --> 00:15:12.070
I like the Grafana ui.

261
00:15:12.070 --> 00:15:17.230
And so that's another reason why
I use Grafana Cloud as well.

262
00:15:17.230 --> 00:15:21.499
So, yeah, you don't have to feel like your
monitoring stack and everything like that

263
00:15:21.499 --> 00:15:25.310
has to be on Amazon just because you're
creating infrastructure on Amazon.

264
00:15:27.310 --> 00:15:29.470
But yeah,
we've got pretty much everything here.

265
00:15:29.470 --> 00:15:32.970
You can click on configuration,
you can see that we've got two CPUs,

266
00:15:32.970 --> 00:15:34.110
one gigabytes of RAM.

267
00:15:35.210 --> 00:15:40.810
You might be curious as to why
we have more CPUs than RAM.

268
00:15:40.810 --> 00:15:45.370
This is just a default to how
databases are provisioned.

269
00:15:45.370 --> 00:15:50.773
If you do like a micro or something
like that, you might get more CPU versus

270
00:15:50.773 --> 00:15:55.674
RAM versus other instance Sizes
that give you more RAM versus cpu.

271
00:15:55.674 --> 00:16:01.692
So it's just because this one in
particular is a very small instance,

272
00:16:01.692 --> 00:16:06.900
and it focuses more on giving
CPUs versus RAM, in this case.

273
00:16:06.900 --> 00:16:08.770
Maintenance and backups, so
this is kind of important.

274
00:16:08.770 --> 00:16:13.525
I'm not gonna go super down this road,
but if you are working in a modernized

275
00:16:13.525 --> 00:16:18.890
deployment environment,
you're gonna have backups in some sense.

276
00:16:18.890 --> 00:16:23.963
Now realistically what you would
do is you would probably configure

277
00:16:23.963 --> 00:16:29.340
this in the terraform module that
created the instance, right?

278
00:16:29.340 --> 00:16:33.027
But regardless, you may want to
make sure that you set up some kind

279
00:16:33.027 --> 00:16:37.740
of like maintenance or backup settings,
make sure that it has automated backups.

280
00:16:37.740 --> 00:16:40.700
Like right now you'll see
mine are disabled, right?

281
00:16:40.700 --> 00:16:44.220
That means that if my instance or
anything were to die or you know,

282
00:16:44.220 --> 00:16:49.340
I needed a restore for any reason,
I would be kind of, you know, in trouble.

283
00:16:49.340 --> 00:16:52.900
And so it may be good to create,
you know, or enable backup.

284
00:16:52.900 --> 00:16:56.302
Set it to like a seven day
retention plan at least so

285
00:16:56.302 --> 00:17:02.210
that I have the last seven days of data if
I need to revert or anything like that.

286
00:17:02.210 --> 00:17:04.050
Just another thing to put out there.

287
00:17:04.050 --> 00:17:08.210
I'm not trying to check every single box,
you know what I mean?

288
00:17:09.810 --> 00:17:14.298
A lot of this terraform automation is for
you to take and play with and

289
00:17:14.298 --> 00:17:16.050
build upon and grow.

290
00:17:16.050 --> 00:17:17.730
This is just the first step.

291
00:17:17.730 --> 00:17:21.810
And that's kind of another thing
about taking this scale approach.

292
00:17:23.399 --> 00:17:25.959
You don't really stop
with the scale approach.

293
00:17:25.959 --> 00:17:29.787
You're kind of always adding and
growing and things like that.

294
00:17:29.787 --> 00:17:34.724
And so you'll always find new
things to fix or tinker with or

295
00:17:34.724 --> 00:17:41.759
whatever scale is kind of like, again,
outside of hardening and things like that.

296
00:17:41.759 --> 00:17:43.825
Scale is kind of like
one of the last steps.

297
00:17:43.825 --> 00:17:45.479
Normally, an application really has.

