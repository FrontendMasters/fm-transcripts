WEBVTT

1
00:00:00.160 --> 00:00:02.002
&gt;&gt; Erik Reinert: And so
you can see that in this phase,

2
00:00:02.002 --> 00:00:06.000
that's one of our first key points,
we wanna support multiple teams, right?

3
00:00:06.000 --> 00:00:08.444
You could probably look at App Runner and
go like, yeah, sure,

4
00:00:08.444 --> 00:00:10.000
like it could work with multiple teams.

5
00:00:10.000 --> 00:00:14.606
But I would argue that at some point
somebody would probably trip over somebody

6
00:00:14.606 --> 00:00:16.640
else and something would happen.

7
00:00:17.680 --> 00:00:20.766
And so we want a more like
a better environment for

8
00:00:20.766 --> 00:00:25.040
multiple people who are gonna
be touching it, right?

9
00:00:25.040 --> 00:00:27.660
We want minimal deployment friction.

10
00:00:27.660 --> 00:00:31.800
So that's in itself a really big
challenge, which is like if you have,

11
00:00:31.800 --> 00:00:36.009
I don't know, five or six teams of
10 people on it each and they're all

12
00:00:36.009 --> 00:00:40.780
deploying at the same time, how do you
make sure that there's no friction there?

13
00:00:40.780 --> 00:00:43.340
How do you make sure all of
those deployments are going out?

14
00:00:43.340 --> 00:00:46.420
We're talking hundreds
of deployments a day,

15
00:00:46.420 --> 00:00:52.460
potentially to hundreds of different
microservices that exist in the system.

16
00:00:52.460 --> 00:00:55.115
We want long term architected solutions,
again,

17
00:00:55.115 --> 00:00:57.840
this kind of goes back to
the whole App Runner thing.

18
00:00:57.840 --> 00:01:01.005
App Runner is a great tool,
especially when you're starting or

19
00:01:01.005 --> 00:01:03.280
when you're a smaller team.

20
00:01:03.280 --> 00:01:07.648
But there are other solutions that can be
explored with containers especially, and

21
00:01:07.648 --> 00:01:10.000
even infrastructure in general.

22
00:01:10.000 --> 00:01:13.920
There's a lot that we are not
really in control of right now.

23
00:01:13.920 --> 00:01:15.560
We don't have control
of the load balancer.

24
00:01:15.560 --> 00:01:21.600
We don't have control over really any part
of the container orchestration stack.

25
00:01:21.600 --> 00:01:25.186
We really just have the ability to
set a port, set CPU and ram and

26
00:01:25.186 --> 00:01:28.570
then the things that you would
really just need to configure

27
00:01:28.570 --> 00:01:31.290
a service that's all we
can really care about.

28
00:01:33.210 --> 00:01:38.395
I would say that this last one is more
than likely a part of the scale part,

29
00:01:38.395 --> 00:01:43.050
which is we have some money to
spend in the first two phases.

30
00:01:43.050 --> 00:01:47.850
You're probably also hearing we
need to save as much as we can.

31
00:01:47.850 --> 00:01:51.690
Do it for cheap, do it free if you can.

32
00:01:51.690 --> 00:01:55.735
That is very common in a startup or even
a growth scale because you don't want to

33
00:01:55.735 --> 00:02:00.110
spend tons of money yet where you, you
know, where you don't necessarily need it.

34
00:02:00.110 --> 00:02:04.470
You'd rather put that towards whatever
your platform or your service is.

35
00:02:04.470 --> 00:02:08.677
But there does hopefully become a point in
an organization where you are able to kind

36
00:02:08.677 --> 00:02:12.220
of take a step back after running so
much and go like, okay, we've got

37
00:02:12.220 --> 00:02:17.190
some money to spend, like, let's clean
up here, let's optimize where we can.

38
00:02:17.190 --> 00:02:21.061
You really should, like, hopefully you
shouldn't be at a point where pretty much

39
00:02:21.061 --> 00:02:25.060
your whole experience there is just, you
know, like, we can't because of budget.

40
00:02:25.060 --> 00:02:27.820
That's not a good answer.

41
00:02:27.820 --> 00:02:28.320
Always.

42
00:02:29.500 --> 00:02:33.893
Most of the time it's fine, you know,
but the reality of it is is at some

43
00:02:33.893 --> 00:02:37.265
point if you're making
a decision to better things and

44
00:02:37.265 --> 00:02:40.380
it does cost money,
that's part of business.

45
00:02:40.380 --> 00:02:44.300
That's just like, here,
take money, solve problem.

46
00:02:44.300 --> 00:02:47.340
There's bigger solutions that
come out of that, right?

47
00:02:47.340 --> 00:02:50.805
And so I do believe that like at
some point you will have to spend,

48
00:02:50.805 --> 00:02:52.024
spend some money, but

49
00:02:52.024 --> 00:02:56.980
it's about allocating that money in a way
where it actually rewards more back.

50
00:02:56.980 --> 00:02:59.480
Like, okay,
we are going to spend money on this, but

51
00:02:59.480 --> 00:03:02.020
we're not going to have to manage that.

52
00:03:02.020 --> 00:03:07.860
And that's actually an example of
the whole CI system at my work.

53
00:03:07.860 --> 00:03:13.100
Again, as I said before, we don't really
worry about our CICD system at all.

54
00:03:13.100 --> 00:03:18.433
And one of the reasons for
that is because a long time ago I and

55
00:03:18.433 --> 00:03:25.060
my team decided that we didn't want
to manage the CICD system scheduler.

56
00:03:26.100 --> 00:03:29.460
We didn't want to manage that part
because that's the part that sucks,

57
00:03:29.460 --> 00:03:32.132
that's the part that's annoying to manage.

58
00:03:32.132 --> 00:03:36.631
The queue went down, the database
isn't working, the system's locked up,

59
00:03:36.631 --> 00:03:38.660
we got to restart the.

60
00:03:38.660 --> 00:03:40.340
All that stuff sucks.

61
00:03:40.340 --> 00:03:43.476
All I want to do is just be like,
you tell me when I need to run a job and

62
00:03:43.476 --> 00:03:45.700
I'll give you an instance.

63
00:03:45.700 --> 00:03:50.531
And that is what's made it so
that CICD has been thoughtless and

64
00:03:50.531 --> 00:03:55.100
not worried about at all
because it's just provisioning.

65
00:03:55.100 --> 00:03:58.100
And as long as it keeps provisioning,
we're fine.

66
00:03:58.100 --> 00:04:02.619
So having some money to spend there and
say, okay, we'll use CircleCI and

67
00:04:02.619 --> 00:04:06.180
spend that,
we know that that's a cost that we want.

68
00:04:06.180 --> 00:04:10.501
But then knowing within the return that
because we're not managing that part of

69
00:04:10.501 --> 00:04:13.350
the system,
we don't have to worry about it.

70
00:04:13.350 --> 00:04:18.550
Downtime for us hopefully would be never,
unless it's our fault.

71
00:04:19.750 --> 00:04:23.990
Okay, so the phase goals are going to
be create infrastructure automation.

72
00:04:23.990 --> 00:04:27.990
So we haven't touched infrastructure
automation at all yet.

73
00:04:27.990 --> 00:04:32.510
I want to kind of point out here that
think about that right after everything

74
00:04:32.510 --> 00:04:35.889
we did, we haven't touched
Terraform at all, right?

75
00:04:35.889 --> 00:04:39.303
That is kind of a sign to show and
something I wanted to,

76
00:04:39.303 --> 00:04:40.788
you know, exemplify,

77
00:04:40.788 --> 00:04:45.800
which is you don't need to write
infrastructure as code to be successful.

78
00:04:45.800 --> 00:04:46.840
Like you don't.

79
00:04:46.840 --> 00:04:50.814
If you really want, you can go directly,
you know, to minimal,

80
00:04:50.814 --> 00:04:54.501
you know, mvp, get it out the door and
start like that's how

81
00:04:54.501 --> 00:04:58.360
a lot of companies are Actually
making tons of money right now.

82
00:04:58.360 --> 00:05:02.160
You know, they don't care about what
their deployment system is or whatever.

83
00:05:02.160 --> 00:05:04.786
Like they only care about their
application that they're building and

84
00:05:04.786 --> 00:05:07.230
how quickly they can get it out the door.

85
00:05:07.230 --> 00:05:12.748
And so I have a friend who works on
a really big, very popular bot on Twitch,

86
00:05:12.748 --> 00:05:17.230
and I talk to him often and
I'm like, how are you doing this?

87
00:05:17.230 --> 00:05:18.350
Are you using containers?

88
00:05:18.350 --> 00:05:22.479
He's like, no, dude, it's a VPC or a vps
just running as big as it possibly can

89
00:05:22.479 --> 00:05:26.110
because he scales vertically,
he doesn't scale horizontally.

90
00:05:26.110 --> 00:05:27.350
And I was like, why do you do that?

91
00:05:27.350 --> 00:05:30.190
And he's like, because it's easier to
manage and I get better performance.

92
00:05:30.190 --> 00:05:32.690
And I was like, yeah,
okay, that makes sense.

93
00:05:32.690 --> 00:05:37.570
So there's a lot of different cases
where you just don't need it.

94
00:05:37.570 --> 00:05:41.530
And you can be in scenarios where you just
don't need infrastructure automation yet.

95
00:05:41.530 --> 00:05:46.444
Although it always can help, there still
is a cost sink into how much time it

96
00:05:46.444 --> 00:05:49.410
takes to set up and
manage and all that stuff.

97
00:05:50.930 --> 00:05:54.050
So we want to create cloud
environments as well.

98
00:05:54.050 --> 00:05:57.165
Basically, once we have our
infrastructure automation set up,

99
00:05:57.165 --> 00:06:01.090
we want to be able to compose
environments with that automation.

100
00:06:01.090 --> 00:06:04.534
I want to be able to say,
okay, this is staging and

101
00:06:04.534 --> 00:06:07.330
then this is prod and so forth and so on.

102
00:06:07.330 --> 00:06:10.850
We want to be able to create
a promotion process as well.

103
00:06:10.850 --> 00:06:15.608
So we want to be able to say, okay, cool,
I have merged into my main branch and

104
00:06:15.608 --> 00:06:17.410
that'll go to staging.

105
00:06:17.410 --> 00:06:23.426
And then whether I tag or
sorry, tag or push to a branch,

106
00:06:23.426 --> 00:06:30.220
whatever, then it'll go to
production if we want it to.

107
00:06:30.220 --> 00:06:35.062
So we want to actually have a promotion
process because right now we've just been

108
00:06:35.062 --> 00:06:39.420
basically pushing to prod and
then create application observability.

109
00:06:39.420 --> 00:06:42.336
We had a little bit of
observability yesterday, but

110
00:06:42.336 --> 00:06:44.860
we want to be able to
create more if possible.

111
00:06:46.060 --> 00:06:50.545
Something like App Runner will only
really vendor lock us into CloudWatch and

112
00:06:50.545 --> 00:06:52.070
Amazon products, but.

113
00:06:52.070 --> 00:06:53.639
But with something like ECS,

114
00:06:53.639 --> 00:06:57.990
there's a bit more options on the table
because you have access to the vm, right?

115
00:06:57.990 --> 00:07:00.950
So you can install your own log push and
stuff like that.

116
00:07:02.390 --> 00:07:04.950
Yeah, so those are our phase goals.

117
00:07:04.950 --> 00:07:08.630
Requirements is pretty
much exactly the same.

118
00:07:08.630 --> 00:07:11.722
Again, this whole project revolves around
pretty much these requirements, so

119
00:07:11.722 --> 00:07:14.710
there really shouldn't be anything
that you guys need to set up.

120
00:07:14.710 --> 00:07:17.190
The only thing I will say is,
again, just make sure.

121
00:07:17.190 --> 00:07:20.091
Actually the one thing that we're missing
on here is the one thing we need today,

122
00:07:20.091 --> 00:07:21.350
which is Terraform.

123
00:07:21.350 --> 00:07:23.470
I don't know why that's not there, but.

124
00:07:23.470 --> 00:07:25.770
Yeah, make sure you have
terraform installed.

125
00:07:25.770 --> 00:07:26.690
Right.
And we're going to

126
00:07:26.690 --> 00:07:27.890
be using terraform heavily today.

