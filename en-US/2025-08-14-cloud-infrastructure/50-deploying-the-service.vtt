WEBVTT

1
00:00:00.400 --> 00:00:03.239
&gt;&gt; Erik Reinert: Okay, so now what we're
gonna do is we're gonna save this up and

2
00:00:03.239 --> 00:00:05.200
once again we're gonna do Terraform Init.

3
00:00:11.600 --> 00:00:13.920
We'll do Terraform Plan.

4
00:00:17.360 --> 00:00:19.200
Now the last two that we did.

5
00:00:19.200 --> 00:00:22.720
Cluster and Service, were not modules.

6
00:00:22.720 --> 00:00:29.270
I used individual resources for
each one of those inside of that module.

7
00:00:29.270 --> 00:00:31.688
So, you know, if I'm honest,

8
00:00:31.688 --> 00:00:37.430
like I can do that because I've written
a lot of Terraform and I've worked.

9
00:00:37.430 --> 00:00:39.270
On a lot of Amazon resources.

10
00:00:39.270 --> 00:00:43.110
But again, I'm just gonna
push this home one more time.

11
00:00:43.110 --> 00:00:44.990
If you wanna be productive.

12
00:00:44.990 --> 00:00:48.647
And you don't feel confident in doing
a lot of the stuff or defining the things

13
00:00:48.647 --> 00:00:52.302
a lot of the ways that I just did, if you
can find a module that can do it for you,

14
00:00:52.302 --> 00:00:55.750
like, you know, you could still get
the benefit of doing those things.

15
00:00:55.750 --> 00:00:59.150
It's just, just you might have to
find some open source project or

16
00:00:59.150 --> 00:01:01.560
something that can help you do it.

17
00:01:01.560 --> 00:01:03.040
And again, I even do that with.

18
00:01:03.040 --> 00:01:05.680
VPCs and Kubernetes and
all the other stuff.

19
00:01:05.680 --> 00:01:08.812
So, it's just after doing it for so long,

20
00:01:08.812 --> 00:01:12.560
I hate having to slog
through all those resources.

21
00:01:12.560 --> 00:01:15.845
To be honest, it is annoying because
you go to other cloud providers,

22
00:01:15.845 --> 00:01:17.800
the resources really aren't as bad.

23
00:01:17.800 --> 00:01:19.640
It's partially Amazon.

24
00:01:19.640 --> 00:01:24.260
Amazon is so granular that you feel
that weight after a while you're,

25
00:01:24.260 --> 00:01:27.230
my God, dude, it's an attachment as well.

26
00:01:27.230 --> 00:01:29.150
Come on.
Why isn't it just attach itself?

27
00:01:30.190 --> 00:01:32.750
It's incredibly frustrating.

28
00:01:32.750 --> 00:01:36.350
But all cloud providers
are different as well.

29
00:01:36.350 --> 00:01:40.148
You go to gcp, you'll have a bit of
a different experience than you would with

30
00:01:40.148 --> 00:01:42.670
Amazon and you might like or
hate that more or less.

31
00:01:43.710 --> 00:01:44.470
Okay, cool.

32
00:01:44.470 --> 00:01:45.310
So we did our plan.

33
00:01:45.310 --> 00:01:46.350
Let's do our apply.

34
00:01:53.392 --> 00:01:55.720
That happened way faster
than I expected it to.

35
00:01:56.920 --> 00:01:57.840
Staging service.

36
00:01:57.840 --> 00:01:58.520
Okay, that's right.

37
00:01:58.520 --> 00:02:01.827
Yeah.
So one thing that we changed convention

38
00:02:01.827 --> 00:02:07.320
wise was we changed the placement of
where resources are because now we can.

39
00:02:07.320 --> 00:02:11.080
Localize them to environments and
clusters and stuff like that.

40
00:02:11.080 --> 00:02:13.560
So, we're not just saying FEM.

41
00:02:13.560 --> 00:02:16.761
Now what I can do is I can
actually add some organization so

42
00:02:16.761 --> 00:02:18.940
I can do like staging.

43
00:02:18.940 --> 00:02:19.740
Then look at that.

44
00:02:19.740 --> 00:02:24.860
Now I get everything that's in staging
in a nice format that I can read.

45
00:02:24.860 --> 00:02:29.185
You can see here my bastion private key,
my cluster private key, database password,

46
00:02:29.185 --> 00:02:31.340
all that stuff up here.

47
00:02:31.340 --> 00:02:37.300
Then you'll see down here I've got my
service bastion, cluster and database for.

48
00:02:37.300 --> 00:02:39.340
All of the resources.

49
00:02:39.340 --> 00:02:40.740
Then you can see down here all.

50
00:02:40.740 --> 00:02:41.740
My service level stuff.

51
00:02:41.740 --> 00:02:47.110
So Client id client secret goose
database string, postgres, URL.

52
00:02:47.110 --> 00:02:48.070
It's nice.

53
00:02:48.070 --> 00:02:54.150
Now you have a much larger
scale on the whole environment.

54
00:02:54.150 --> 00:02:57.310
And then if I wanted to see prod,
I would just do prod and cool.

55
00:02:57.310 --> 00:02:59.830
Now I can see all prod stuff and
go through that as well.

56
00:02:59.830 --> 00:03:04.541
So that's another reason why I like
parameter stores is that you can filter

57
00:03:04.541 --> 00:03:08.753
and jump around like that and
you could do that in Secrets Manager.

58
00:03:08.753 --> 00:03:10.750
But It's just not as proficient.

59
00:03:11.870 --> 00:03:15.030
Really quickly, let's go ahead and
just go to ECS and let's just see.

60
00:03:15.030 --> 00:03:15.830
What'S going on with the service.

61
00:03:15.830 --> 00:03:18.648
It got deployed pretty quickly,
so let's go ahead and go here and

62
00:03:18.648 --> 00:03:19.630
see what's going on.

63
00:03:19.630 --> 00:03:21.230
Hey, we got a service.

64
00:03:21.230 --> 00:03:23.310
Awesome staging services there.

65
00:03:23.310 --> 00:03:25.870
We also see zero out of one tasks running.

66
00:03:25.870 --> 00:03:29.870
Well, we knew it might not be working,
so let's see what's going on here.

67
00:03:31.470 --> 00:03:34.933
But we're gonna click on
the actual service itself and

68
00:03:34.933 --> 00:03:37.300
we'll see one failed tag.

69
00:03:37.300 --> 00:03:39.940
Okay, so again, we kind of knew
that was gonna be happening.

70
00:03:39.940 --> 00:03:41.780
But we're seeing configuration here.

71
00:03:41.780 --> 00:03:44.340
We're seeing task definition,
we're seeing a lot of stuff.

72
00:03:44.340 --> 00:03:45.980
So we got a good sign that.

73
00:03:45.980 --> 00:03:47.700
We at least provisioned some stuff.

74
00:03:47.700 --> 00:03:52.140
Right, so we're seeing in here, we're
seeing stopped task, failed to start.

75
00:03:52.140 --> 00:03:54.820
And then we're kind of seeing
containers start over and over.

76
00:03:55.940 --> 00:04:01.620
So one thing to note about ECS
is it will be in a perpetual.

77
00:04:01.620 --> 00:04:03.220
Loop for as long as you let it be.

78
00:04:04.420 --> 00:04:07.458
It will eventually kind of back off for
5 minutes or 10 minutes or

79
00:04:07.458 --> 00:04:08.640
something like that.

80
00:04:08.640 --> 00:04:09.680
Then it'll try doing it again.

81
00:04:09.680 --> 00:04:12.042
It does have eventual fail off, but

82
00:04:12.042 --> 00:04:16.240
it will eventually kick back
in if I just leave this here.

83
00:04:16.240 --> 00:04:17.920
We should start seeing more and more.

84
00:04:17.920 --> 00:04:19.960
Containers just keep trying to go and go.

85
00:04:19.960 --> 00:04:23.560
That's why I said it's okay in
my mind to let a container fail.

86
00:04:23.560 --> 00:04:24.400
It's not that big a deal.

87
00:04:24.400 --> 00:04:27.600
It's just starting something and
stopping it on the host.

88
00:04:27.600 --> 00:04:30.160
But you don't want this going for months.

89
00:04:31.360 --> 00:04:33.520
Let's go ahead and
go to logs really quickly.

90
00:04:34.560 --> 00:04:37.880
We're not seeing anything in logs,
so that's interesting.

91
00:04:37.880 --> 00:04:42.472
So, I'm gonna do some quick
troubleshooting mainly because I did

92
00:04:42.472 --> 00:04:44.520
clean up my environment.

93
00:04:44.520 --> 00:04:47.560
So I'm curious to see if
maybe I deleted something.

94
00:04:47.560 --> 00:04:52.920
So, what I'm gonna do is I'm
gonna go to the container itself.

95
00:04:52.920 --> 00:04:53.600
There we go.

96
00:04:53.600 --> 00:04:59.855
And sure enough, look at this manifest
Unknown REQUESTED IMAGE NOT FOUND So

97
00:04:59.855 --> 00:05:04.460
it's trying to pull
FEM FD service staging.

98
00:05:04.460 --> 00:05:05.340
Interesting.

99
00:05:06.780 --> 00:05:10.860
We talked about environments and
promoting and all that stuff.

100
00:05:10.860 --> 00:05:14.300
Once we created an environment for
staging, we no longer needed latest.

101
00:05:15.340 --> 00:05:16.500
We don't want to use latest.

102
00:05:16.500 --> 00:05:18.380
We want to make sure
that staging gets this.

103
00:05:19.500 --> 00:05:24.142
So what I need to do now is I need to
quickly make sure that I create a build

104
00:05:24.142 --> 00:05:25.100
for staging.

105
00:05:25.100 --> 00:05:29.800
So, what I'm gonna do really fast is I'm
just gonna do my docker login, right, and

106
00:05:29.800 --> 00:05:32.730
I'm just gonna quickly build an image for
staging.

107
00:05:32.730 --> 00:05:36.810
So we'll do make build image because
remember, we always build the SHA first.

108
00:05:36.810 --> 00:05:37.690
That's my mistake.

109
00:05:37.690 --> 00:05:39.176
We always build the SHA first and

110
00:05:39.176 --> 00:05:43.130
then we promote it to the environment
that we're trying to promote to.

111
00:05:43.130 --> 00:05:45.685
So in this case,
instead of promoting it to latest,

112
00:05:45.685 --> 00:05:47.610
we're going to promote it to staging.

113
00:05:50.970 --> 00:05:54.810
So while this is running, there is
another thing we need to do though.

114
00:05:54.810 --> 00:05:55.810
So I want to go back to.

115
00:05:55.810 --> 00:05:59.540
System Manager or SSM really quickly and.

116
00:05:59.540 --> 00:06:04.940
I want to fill in the parameters
that are currently set as example.

117
00:06:04.940 --> 00:06:09.340
So remember, by default when we create
a secret from scratch, we just get.

118
00:06:09.340 --> 00:06:10.540
A secret that says example.

119
00:06:10.540 --> 00:06:12.507
So if I go to service Goose DB string,

120
00:06:12.507 --> 00:06:16.740
I shouldn't be worried about clicking
that because it says example.

121
00:06:16.740 --> 00:06:20.420
So, what we need to do is this
is kind of the manual part.

122
00:06:20.420 --> 00:06:26.065
We need to go get the values from
our either previous environments or

123
00:06:26.065 --> 00:06:29.136
from our new database or whatever and

124
00:06:29.136 --> 00:06:33.410
populate those values
really quickly off screen.

125
00:06:33.410 --> 00:06:39.810
I did actually delete my Google
client key and client id.

126
00:06:39.810 --> 00:06:43.810
So, I'm gonna quickly generate that and
then I'm gonna fill in these values.

127
00:06:45.490 --> 00:06:47.330
This is what happens when
you start building stuff.

128
00:06:47.330 --> 00:06:48.490
You can do two things at once.

129
00:06:48.490 --> 00:06:52.179
While I'm doing that,
I'm also gonna do make build tag,

130
00:06:52.179 --> 00:06:54.870
build image promote, right?

131
00:06:54.870 --> 00:06:57.270
And this will make sure that
this gets pushed off to staging.

132
00:06:59.990 --> 00:07:04.070
Now that I've built that image and
pushed it, I should be able to go to.

133
00:07:04.070 --> 00:07:11.350
I'm going to open up ECR or
ECS in another tab staging tasks and.

134
00:07:11.350 --> 00:07:15.950
We should at least be able to see
it have started, even though it.

135
00:07:15.950 --> 00:07:18.110
Might not have actually been successful.

136
00:07:18.110 --> 00:07:23.670
Now what's interesting is, is you'll see
that it's red before and now it's yellow.

137
00:07:23.670 --> 00:07:25.470
So maybe something else has gone on.

138
00:07:25.470 --> 00:07:31.110
So, let's go ahead and click on that Task,
essential container in Task exited.

139
00:07:31.110 --> 00:07:33.710
Okay, so it actually ran and
we got a task.

140
00:07:33.710 --> 00:07:34.427
Now again,

141
00:07:34.427 --> 00:07:39.750
remember we're doing this to kind of
show you how to debug in this scenario.

142
00:07:39.750 --> 00:07:45.920
Okay, so it actually failed, but it did
run So I wonder if I can look at logs.

143
00:07:45.920 --> 00:07:46.640
Okay, cool.

144
00:07:46.640 --> 00:07:47.840
Sure enough.

145
00:07:47.840 --> 00:07:52.000
Awesome, I'm actually seeing logs now,
right, and I could see.

146
00:07:52.000 --> 00:07:54.600
Okay, I'm example in connection info.

147
00:07:54.600 --> 00:07:55.360
Okay, that makes sense.

148
00:07:55.360 --> 00:07:59.040
I didn't potentially set up
the connection info properly.

149
00:07:59.040 --> 00:08:00.673
So that means again,

150
00:08:00.673 --> 00:08:05.680
I need to set up the values in
Systems Manager for what I'm doing.

151
00:08:07.280 --> 00:08:10.810
What I'm going to do is, like I said,
I'm going to grab the client id.

152
00:08:10.810 --> 00:08:15.810
Let me just copy this link,
paste and then copy this link.

153
00:08:15.810 --> 00:08:18.010
Let me just do these off
screen really quickly.

154
00:08:18.010 --> 00:08:21.610
Sorry, but this is essentially
what you'll need to do as well.

155
00:08:21.610 --> 00:08:26.524
When you run the automation,
you'll need to make sure that you

156
00:08:26.524 --> 00:08:31.690
update these values,
otherwise it will also be in a dead loop.

157
00:08:31.690 --> 00:08:36.270
Now, I'm not going to actually
use the Supabase URL.

158
00:08:36.270 --> 00:08:38.470
To be clear,
I'm not gonna use the Supabase URL.

159
00:08:38.470 --> 00:08:41.870
What I wanna use is,
I wanna use my RDS URL, right?

160
00:08:41.870 --> 00:08:43.630
Because we have a completely
new instance now.

161
00:08:43.630 --> 00:08:44.630
So what I wanna do is I.

162
00:08:44.630 --> 00:08:49.713
Wanna go to Aurora and Amazon, I wanna go
to DB instances, I wanna click on staging,

163
00:08:49.713 --> 00:08:53.722
and I wanna grab this endpoint and
I wanna replace that endpoint and

164
00:08:53.722 --> 00:08:56.910
let me get this and
at least replace the password.

165
00:08:56.910 --> 00:09:00.670
So it's like password, there we go.

166
00:09:00.670 --> 00:09:04.149
What I wanna do is if we open,
I open it up in an editor and

167
00:09:04.149 --> 00:09:06.230
kind of like break it down.

168
00:09:06.230 --> 00:09:10.931
What I want to do is I want to
replace this, which is my username,

169
00:09:10.931 --> 00:09:14.950
I want to replace this,
which is my password, right?

170
00:09:14.950 --> 00:09:18.416
And then what I want to do as
well is I want to replace this,

171
00:09:18.416 --> 00:09:21.190
which is my host name, right?

172
00:09:21.190 --> 00:09:23.670
So this is really how this postgres.

173
00:09:23.670 --> 00:09:25.430
Connection URL breaks down.

174
00:09:25.430 --> 00:09:28.675
And so, to get this completely populated,

175
00:09:28.675 --> 00:09:34.230
what I first need to do is,
is grab this and paste in the host name.

176
00:09:34.230 --> 00:09:35.750
So we'll do that.

177
00:09:35.750 --> 00:09:36.270
There we go.

178
00:09:36.270 --> 00:09:38.470
I got my host name, now I need my user.

179
00:09:38.470 --> 00:09:41.197
So then what I'm gonna do is
I'm gonna go to configuration,

180
00:09:41.197 --> 00:09:44.939
I'm gonna scroll down and we'll see that
the master username is staging, right,

181
00:09:44.939 --> 00:09:47.110
because it's a staging environment.

182
00:09:47.110 --> 00:09:52.550
So then what I'm gonna do is I'm gonna go
to username and I'm gonna type in staging.

183
00:09:52.550 --> 00:09:53.910
Now the last thing I'm going to.

184
00:09:53.910 --> 00:09:55.550
Do is I'm going to get my password.

185
00:09:55.550 --> 00:09:58.410
But remember, my password isn't here, my.

186
00:09:58.410 --> 00:09:59.890
Password is in ssm.

187
00:09:59.890 --> 00:10:07.410
So what I'm gonna do is I'm go to ssm,
I'm gonna go to Parameter store.

188
00:10:09.330 --> 00:10:11.890
I'm gonna go to staging.

189
00:10:13.090 --> 00:10:16.290
And then there's my database
password right here.

190
00:10:16.290 --> 00:10:18.130
I'm gonna grab this value.

191
00:10:18.130 --> 00:10:21.570
I'm not gonna show it, so I'm gonna
show that value to myself off screen.

192
00:10:22.940 --> 00:10:26.224
Then I'm gonna paste that into the last
part of the connection string,

193
00:10:26.224 --> 00:10:28.460
which is the password right here.

194
00:10:28.460 --> 00:10:30.940
I'm going to grab this, copy this.

195
00:10:32.060 --> 00:10:32.860
Go over here.

196
00:10:35.660 --> 00:10:36.660
Paste this in, and.

197
00:10:36.660 --> 00:10:42.338
This goes into both the goose DB string or

198
00:10:42.338 --> 00:10:49.030
the goose DB string as
well as the postgres URL.

199
00:10:49.030 --> 00:10:51.990
So, you wanna update
the same value in both.

200
00:10:51.990 --> 00:10:54.710
But then what I'm going to do is
I'm going to open up ECS again.

201
00:10:54.710 --> 00:10:56.006
Oops, I did not.

202
00:10:56.006 --> 00:10:56.710
Well, whatever.

203
00:10:56.710 --> 00:10:58.070
So, we're gonna go to staging.

204
00:10:59.430 --> 00:11:01.110
Staging service.

205
00:11:01.110 --> 00:11:02.470
We see some failed.

206
00:11:04.950 --> 00:11:05.830
So let's see.

207
00:11:07.030 --> 00:11:08.110
Let's see what's going on.

208
00:11:08.110 --> 00:11:11.627
So, before it was kind of restarting
every few seconds and whatever, but

209
00:11:11.627 --> 00:11:12.830
now you can kind of tell.

210
00:11:12.830 --> 00:11:15.413
It's kind of been like, bro, I've been
trying for the last five minutes and

211
00:11:15.413 --> 00:11:16.450
nothing's happened.

212
00:11:16.450 --> 00:11:17.730
So, we're gonna wait.

213
00:11:17.730 --> 00:11:21.410
If you get caught in a scenario
where it's effectively like,

214
00:11:21.410 --> 00:11:25.890
I'm not gonna do anything, you can
do what's called force a deployment.

215
00:11:25.890 --> 00:11:27.090
And this is also what you would.

216
00:11:27.090 --> 00:11:28.997
Do if you made a configuration change and

217
00:11:28.997 --> 00:11:31.890
you wanted it to actually
roll that change out.

218
00:11:31.890 --> 00:11:33.170
Up in the top right hand corner.

219
00:11:33.170 --> 00:11:35.010
Here, you'll see
the Update service button.

220
00:11:35.010 --> 00:11:36.810
You just click this dropdown and then.

221
00:11:36.810 --> 00:11:38.210
You just click Force new deployment.

222
00:11:38.210 --> 00:11:39.970
And then once you click that to.

223
00:11:39.970 --> 00:11:41.570
Make sure that it did in fact.

224
00:11:41.570 --> 00:11:45.448
Do that, you can go to the deployments
tab, you can scroll down just a little

225
00:11:45.448 --> 00:11:49.440
bit, and then you'll see that there
is a service deployment in progress.

226
00:11:49.440 --> 00:11:54.125
If I refresh this, you'll see that
the previous one then gets stopped and

227
00:11:54.125 --> 00:11:56.480
a new one gets created, hopefully.

228
00:11:56.480 --> 00:11:57.680
Now if we go to tasks.

229
00:11:58.960 --> 00:12:02.640
My gosh and then refresh.

230
00:12:02.640 --> 00:12:03.280
There you go.

231
00:12:03.280 --> 00:12:06.480
Now we can see that it's activating and
it might actually even be running.

232
00:12:08.080 --> 00:12:09.920
Yeah, see, now we're actually running.

233
00:12:09.920 --> 00:12:11.120
Now it's waiting to.

234
00:12:13.840 --> 00:12:16.640
Waiting for
the process to get a health check.

235
00:12:16.640 --> 00:12:18.240
Hey, look at that.

236
00:12:18.240 --> 00:12:19.360
Now we're online.

237
00:12:19.360 --> 00:12:20.080
Awesome.

238
00:12:20.080 --> 00:12:25.280
So again, we deployed it broken, but
we deployed it with everything it needed.

239
00:12:25.280 --> 00:12:28.720
The developer expectation here was
just go in and update the secrets.

240
00:12:28.720 --> 00:12:30.880
It's not that difficult.

241
00:12:30.880 --> 00:12:33.956
And then potentially go in and
force a deployment or

242
00:12:33.956 --> 00:12:37.470
wait until CI runs the next deploy,
which will then run.

243
00:12:37.470 --> 00:12:39.310
Roll out the service, it'll be green.

244
00:12:39.310 --> 00:12:41.470
And we're all good to go.

245
00:12:41.470 --> 00:12:44.990
So, yeah, I have a running service now,
which is pretty cool.

246
00:12:44.990 --> 00:12:48.070
So, out of curiosity,
I'm just gonna do this real fast.

247
00:12:48.070 --> 00:12:49.310
I'm going to close this out.

248
00:12:49.310 --> 00:12:52.830
I'm going to do this and
then I'm going to do HTTPs body again.

249
00:12:54.910 --> 00:12:56.910
PG Relation, user doesn't work.

250
00:12:56.910 --> 00:13:00.190
Okay, so we know this,
but hey, we're online.

251
00:13:00.190 --> 00:13:02.430
We're just broken, right?

