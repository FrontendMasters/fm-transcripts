WEBVTT

1
00:00:00.000 --> 00:00:01.440
&gt;&gt; Erik Reinert: So now,
we're just going to create a new branch.

2
00:00:01.440 --> 00:00:07.680
We're just going to do git checkout
dash B stage 02 dash growth.

3
00:00:07.680 --> 00:00:10.800
So we're just going to create a brand new
branch and switch into it every stage.

4
00:00:10.800 --> 00:00:14.400
We basically create a new branch,
create a new PR and work off of that PR.

5
00:00:14.400 --> 00:00:18.309
What we're going to want to do is we're
going to first want to set up our

6
00:00:18.309 --> 00:00:19.120
migrations.

7
00:00:19.120 --> 00:00:22.991
Now, when you set up migrations for
schemas and repositories or whatever,

8
00:00:22.991 --> 00:00:27.360
there's tons of different tools out there,
there's ORMs that exist and whatever.

9
00:00:28.560 --> 00:00:31.480
Don't be afraid to pick whatever
solution works best for you.

10
00:00:31.480 --> 00:00:34.220
I'm saying that you have
to take this approach.

11
00:00:34.220 --> 00:00:37.340
But I decided to use a tool called Goose.

12
00:00:38.780 --> 00:00:41.900
It's basically a migrations
tool written in Go.

13
00:00:42.940 --> 00:00:48.335
The whole purpose of this tool and
what it does is it effectively allows you

14
00:00:48.335 --> 00:00:54.180
to create SQL files and then make changes
to your database over a period of time.

15
00:00:54.180 --> 00:00:56.060
That's the easiest way to put it.

16
00:00:56.060 --> 00:00:58.778
Every time you make a new
change to your database,

17
00:00:58.778 --> 00:01:02.770
you basically create a new migration,
which does two things.

18
00:01:02.770 --> 00:01:05.729
First, it makes the changes
that you want it to change and

19
00:01:05.729 --> 00:01:08.050
then it also reverts those changes.

20
00:01:08.050 --> 00:01:12.674
The reason for that is because if
you have something that breaks or

21
00:01:12.674 --> 00:01:16.960
you need to roll backwards,
then you only roll backwards for

22
00:01:16.960 --> 00:01:21.570
that one specific version or
a specific set of changes.

23
00:01:21.570 --> 00:01:24.784
When you do a migration and
you create a migration,

24
00:01:24.784 --> 00:01:28.449
you're actually creating
the changes you want to make and

25
00:01:28.449 --> 00:01:32.520
then you're also making SQL
that reverts the those changes.

26
00:01:32.520 --> 00:01:37.183
So that's our goal, that's what we
want to do first is we want to create

27
00:01:37.183 --> 00:01:41.560
a document or a, what's it called,
a migration for our code.

28
00:01:41.560 --> 00:01:45.785
So the first thing I'm going to do
is if you guys have Go installed,

29
00:01:45.785 --> 00:01:50.839
you're going to go ahead and do go install
go space install space GitHub.com,

30
00:01:50.839 --> 00:01:53.800
pressley goose v3 command goose @ latest.

31
00:01:53.800 --> 00:01:56.200
So go ahead and run that command for me.

32
00:01:56.200 --> 00:02:01.500
Now, after you run that command,
you might run it and it doesn't work.

33
00:02:01.500 --> 00:02:03.660
Does the goose command not work for
you guys?

34
00:02:04.860 --> 00:02:05.580
It does work.

35
00:02:05.580 --> 00:02:06.540
Okay, cool.

36
00:02:06.540 --> 00:02:08.370
So if it doesn't work,

37
00:02:08.370 --> 00:02:14.860
the reason why is potentially that you
don't have your go bin in your path.

38
00:02:14.860 --> 00:02:18.953
So if I do echo and then I do go path,

39
00:02:18.953 --> 00:02:23.020
you'll see my go path is empty.

40
00:02:23.020 --> 00:02:29.268
And if I do path, you'll see that
I don't have anything in here for

41
00:02:29.268 --> 00:02:33.490
go at all, except for
the go binary itself.

42
00:02:33.490 --> 00:02:39.890
Basically what I want to do is
I want to export a go path.

43
00:02:39.890 --> 00:02:45.490
I basically want to tell Go where
all of my go code is expected to be.

44
00:02:47.730 --> 00:02:49.010
Now, I'm not going to do this.

45
00:02:49.010 --> 00:02:50.850
I'll just do, for now, just do home.

46
00:02:52.010 --> 00:02:54.650
So I'll put my go directory as home.

47
00:02:54.650 --> 00:02:57.663
I'll just do home slash Go.

48
00:02:57.663 --> 00:03:06.413
Then what I'm going to do is I'm going
to export my go bin to be gopath bin.

49
00:03:06.413 --> 00:03:11.397
So I'm telling Go where the Go path is and
then I'm telling Go bin,

50
00:03:11.397 --> 00:03:15.850
hey, Go bin is just the bin
directory inside of the Go path.

51
00:03:17.520 --> 00:03:23.574
Then the last thing I will do is I
will export my path where I will say,

52
00:03:23.574 --> 00:03:27.040
hey, export path, Go bin path.

53
00:03:27.040 --> 00:03:31.190
This makes it so that now if I install
anything or do anything like that,

54
00:03:31.190 --> 00:03:34.320
it should actually become available to me.

55
00:03:34.320 --> 00:03:35.760
I think if I do Goose now.

56
00:03:35.760 --> 00:03:38.960
There you go,
you can see Goose is now available.

57
00:03:38.960 --> 00:03:42.240
I'll scroll up just so that you
have those commands one more time.

58
00:03:43.370 --> 00:03:49.370
If it doesn't work for you,
you want to set a Go path home Go, right?

59
00:03:49.370 --> 00:03:55.290
Set a Go bin, Go path bin and
then path Go bin.

60
00:03:55.290 --> 00:03:57.730
Now, if you've installed Go by default,
this should work.

61
00:03:57.730 --> 00:03:59.570
It's pretty much set up
out of the box to work.

62
00:03:59.570 --> 00:04:02.297
But if you didn't have any weird setup or
anything like that,

63
00:04:02.297 --> 00:04:04.330
that may be something you need to do.

64
00:04:04.330 --> 00:04:07.189
&gt;&gt; Speaker 2: And as a note, if they
do that and close their terminal and

65
00:04:07.189 --> 00:04:09.703
reopen it, it's just for
this session, right?

66
00:04:09.703 --> 00:04:11.983
They don't have to add
it to their ZSHRC or

67
00:04:11.983 --> 00:04:14.600
something if they wanted
that to stay forever.

68
00:04:14.600 --> 00:04:15.800
&gt;&gt; Erik Reinert: Exactly, yeah, yeah.

69
00:04:15.800 --> 00:04:19.745
So just to reiterate for if you guys don't
know, because I'm exporting environment

70
00:04:19.745 --> 00:04:22.880
variables, right,
they're only going to stay in that shell.

71
00:04:22.880 --> 00:04:26.000
So if I close this shell,
these will go away.

72
00:04:26.000 --> 00:04:28.717
So, you know,
if you want this to be persistent,

73
00:04:28.717 --> 00:04:32.560
add this to like your bash profile or
your bash rc, whatever you want.

74
00:04:32.560 --> 00:04:35.446
You would just add these
three go path go bin and

75
00:04:35.446 --> 00:04:38.193
then update path to have
go bin inside of it.

76
00:04:38.193 --> 00:04:38.693
Yep.

77
00:04:40.020 --> 00:04:40.820
Okay, awesome.

78
00:04:40.820 --> 00:04:44.340
Now that we've done that,
we want to create our first migration.

79
00:04:44.340 --> 00:04:51.051
What we're going to do is
we're going to run Goose,

80
00:04:51.051 --> 00:04:57.620
dash dir migrations,
create base schema and SQL.

81
00:04:58.820 --> 00:05:03.820
Now this may fail because
the directory doesn't exist.

82
00:05:03.820 --> 00:05:06.550
So let's make the directory
really quickly.

83
00:05:06.550 --> 00:05:07.990
I didn't remember if it did.

84
00:05:07.990 --> 00:05:13.707
So there you go, migrations and then bam.

85
00:05:13.707 --> 00:05:15.230
So create the directory migrations.

86
00:05:15.230 --> 00:05:19.812
If that fails for you, and
then run the create command and

87
00:05:19.812 --> 00:05:24.490
you'll see that it says that,
hey, I created a new file,

88
00:05:24.490 --> 00:05:28.615
migrations 200-blah-blah, blah, right?

89
00:05:28.615 --> 00:05:30.470
Now, if we go into that file.

90
00:05:30.470 --> 00:05:32.568
Go ahead and go into that file, you,

91
00:05:32.568 --> 00:05:37.360
you'll notice that it has generated us
a very simple and empty SQL file, right?

92
00:05:37.360 --> 00:05:40.403
This SQL file is what
they expect us to update

93
00:05:40.403 --> 00:05:44.120
with the schema changes that
we actually want to run.

94
00:05:44.120 --> 00:05:48.751
And so what we're going to do is we're
just going to stay within the statement

95
00:05:48.751 --> 00:05:52.610
begin and statement end statements for
both the up and the down.

96
00:05:52.610 --> 00:05:55.822
Now, up means the changes
that you want to make, and

97
00:05:55.822 --> 00:06:00.210
down means the changes that are how
you revert those changes, right?

98
00:06:00.210 --> 00:06:01.330
So what do we want to do?

99
00:06:01.330 --> 00:06:03.170
Well, for starters, I want to.

100
00:06:04.210 --> 00:06:04.970
Let's do this.

101
00:06:04.970 --> 00:06:08.130
I want to open up the readme, right?

102
00:06:08.130 --> 00:06:13.358
I want to take this whole block
of code right here, all of it,

103
00:06:13.358 --> 00:06:18.850
and then I want to go back and
open up the migrations file.

104
00:06:18.850 --> 00:06:20.330
And then I just want to paste.

105
00:06:20.330 --> 00:06:20.930
Oops.

106
00:06:22.130 --> 00:06:25.982
I just want to paste that
whole thing inside of there.

107
00:06:25.982 --> 00:06:27.450
That's it, just want to paste that.

108
00:06:28.970 --> 00:06:31.364
And there we go.

109
00:06:33.310 --> 00:06:37.610
&gt;&gt; Erik Reinert: Now, I have all of my
great migrations for creating my schema.

110
00:06:37.610 --> 00:06:40.570
However, I don't have the delete part.

111
00:06:40.570 --> 00:06:42.810
So this is the part that we need to add.

112
00:06:42.810 --> 00:06:47.626
And so what we're going to
do is underneath down and

113
00:06:47.626 --> 00:06:53.410
in the statement,
we're just going to add drop values.

114
00:06:53.410 --> 00:06:58.108
So we're just going to say, hey, if we go
down, we want to drop comments, followers,

115
00:06:58.108 --> 00:07:01.283
likes, aspiration updates,
administrators and users,

116
00:07:01.283 --> 00:07:03.570
basically everything that we added.

117
00:07:03.570 --> 00:07:06.770
So now that we've got that, we're going
to go ahead and just save that file.

118
00:07:06.770 --> 00:07:11.421
And then now what we want to do is we want
to update our env one more time because we

119
00:07:11.421 --> 00:07:16.050
have a couple of new environment
variables that we need to add.

120
00:07:16.050 --> 00:07:21.422
So the first thing we're going to do
is we're going to above postgres URL.

121
00:07:21.422 --> 00:07:24.592
We're just going to say,
now do this in your dot m file,

122
00:07:24.592 --> 00:07:28.167
I'm doing it in the example one so
that I don't dot myself, but

123
00:07:28.167 --> 00:07:30.880
do this in your normal env file, right?

124
00:07:30.880 --> 00:07:36.214
So open up your m file and
then inside of it add goose

125
00:07:36.214 --> 00:07:41.040
DB string and
then just add an equals for now.

126
00:07:41.040 --> 00:07:41.700
And then.

127
00:07:41.700 --> 00:07:42.480
Yep.
Thank you.

128
00:07:42.480 --> 00:07:46.870
Copilot goose driver equals postgres.

129
00:07:46.870 --> 00:07:48.843
&gt;&gt; Speaker 3: There's copilot for neovim.

130
00:07:48.843 --> 00:07:50.790
&gt;&gt; Erik Reinert: Yeah, of course.

131
00:07:50.790 --> 00:07:51.670
Come on now.

132
00:07:51.670 --> 00:07:55.161
Not living in ancient times in neovim.

133
00:07:55.161 --> 00:08:02.510
[LAUGH] So here's what I would say is it's
up to you on how you want to do this.

134
00:08:02.510 --> 00:08:06.950
You can either take the existing value and
then just copy and paste it.

135
00:08:06.950 --> 00:08:11.760
Or if you wanted to, you could actually
take the DB string, move it down here and.

136
00:08:11.760 --> 00:08:16.560
And then you could just say postgres URL
and so it'll use the exact same value.

137
00:08:16.560 --> 00:08:18.600
So it's up to you on which
way you want to do it.

138
00:08:18.600 --> 00:08:23.840
If you want to just have the value be
the same twice, or if you just want to do.

139
00:08:23.840 --> 00:08:27.483
If you want the DB string to use
the exact same thing as the postgres URL,

140
00:08:27.483 --> 00:08:28.470
which it needs to.

141
00:08:28.470 --> 00:08:31.360
That's what it needs to use, right?

142
00:08:31.360 --> 00:08:36.747
Then you can just tell it to reuse
the postgres URL underneath it.

143
00:08:36.747 --> 00:08:37.360
Makes sense?

144
00:08:40.779 --> 00:08:41.979
Awesome.

145
00:08:41.979 --> 00:08:44.464
All right, so I'm going to go ahead and
save this file.

146
00:08:44.464 --> 00:08:45.219
All right, awesome.

147
00:08:45.219 --> 00:08:47.539
And then I'm just going to
source my M file one more time.

148
00:08:47.539 --> 00:08:53.179
So now if I do echo Goose DB string.

149
00:08:54.779 --> 00:08:56.379
Cool works.

150
00:08:56.379 --> 00:08:57.899
That should work for you as well.

151
00:08:57.899 --> 00:09:01.099
Let's do a quick docker compose down.

152
00:09:01.099 --> 00:09:03.691
Let's just bring down our instance
running in the background or

153
00:09:03.691 --> 00:09:05.419
our container running in the background.

154
00:09:08.130 --> 00:09:11.784
Then let's do another docker compose up,
detach.

155
00:09:11.784 --> 00:09:15.486
So we're just restarting it now,
I want to note,

156
00:09:15.486 --> 00:09:19.890
make sure you add in the down
remove orphans and volumes.

157
00:09:19.890 --> 00:09:21.450
Make sure you add both of those.

158
00:09:21.450 --> 00:09:24.490
Because we want to delete the volume for
the instance.

159
00:09:24.490 --> 00:09:26.170
We want to make sure that
the volume goes away.

160
00:09:26.170 --> 00:09:29.330
Because we're about to run new
migrations on the database.

161
00:09:29.330 --> 00:09:31.782
We've already added
the schemas to it once, so

162
00:09:31.782 --> 00:09:35.730
we want to make sure that we remove it so
that we can add them again.

163
00:09:35.730 --> 00:09:39.570
&gt;&gt; Speaker 4: What if we already
ran it without those flags?

164
00:09:39.570 --> 00:09:41.410
&gt;&gt; Erik Reinert: Then
just rerun it with them.

165
00:09:41.410 --> 00:09:46.065
Yeah, and you'll see here,
when I rerun it with the flags,

166
00:09:46.065 --> 00:09:48.911
it just removes my volume by itself.

167
00:09:48.911 --> 00:09:51.330
Cool, okay, so
then we're going to do up and detach.

168
00:09:53.010 --> 00:09:56.868
And then what we're going to do is we're

169
00:09:56.868 --> 00:10:01.640
going to first run a goose
dir migrations status.

170
00:10:04.520 --> 00:10:09.360
And you should see that, hey,
I was able to connect to the database.

171
00:10:09.360 --> 00:10:10.040
We're good.

172
00:10:10.040 --> 00:10:13.960
And we have a pending migration,
meaning that this has not ran yet.

173
00:10:13.960 --> 00:10:16.680
Then the next thing we
want to do is validate.

174
00:10:16.680 --> 00:10:20.238
This will make sure that our migrations
are actually valid because, yes,

175
00:10:20.238 --> 00:10:21.800
we can do validation.

176
00:10:21.800 --> 00:10:25.020
Then the last thing we
will do after that is up.

177
00:10:25.020 --> 00:10:26.540
If I hit enter.

178
00:10:26.540 --> 00:10:31.580
We should see very, very quickly it
finds the migration it needs to run.

179
00:10:31.580 --> 00:10:34.300
It runs it in under 33ms.

180
00:10:34.300 --> 00:10:38.806
And then it tells me that the database has
been successfully migrated to that new

181
00:10:38.806 --> 00:10:39.420
version.

182
00:10:43.260 --> 00:10:46.220
&gt;&gt; Speaker 5: Where does it keep
track of which ones it's run?

183
00:10:46.220 --> 00:10:47.740
&gt;&gt; Erik Reinert: Great question.

184
00:10:47.740 --> 00:10:53.290
So if you were to open up the database,
which I don't, maybe I can.

185
00:10:53.290 --> 00:10:55.501
If you look in my database tables,

186
00:10:55.501 --> 00:11:00.170
you'll see that there is a goose DB
version and version ID sequence for.

187
00:11:00.170 --> 00:11:01.004
Yeah, exactly.

188
00:11:01.004 --> 00:11:05.615
So it creates an index in
a table that records hashes, so

189
00:11:05.615 --> 00:11:10.730
it'll actually take your file and
then make like a hash of it.

190
00:11:10.730 --> 00:11:14.490
And then it'll say, okay,
this is a version that I need to go to.

191
00:11:14.490 --> 00:11:16.449
And it'll save those in the database.

192
00:11:16.449 --> 00:11:19.380
Yeah.
So you have just by doing the little bit

193
00:11:19.380 --> 00:11:24.930
we just did, you now have complete,
like, we just added data reliability.

194
00:11:24.930 --> 00:11:26.210
That's the easiest way to put it.

195
00:11:26.210 --> 00:11:26.710
Yeah.

196
00:11:27.810 --> 00:11:28.801
Cool.
Okay.

197
00:11:28.801 --> 00:11:32.530
So again, if I do up and run it again,
it'll just say, hey, no migrations to run.

198
00:11:32.530 --> 00:11:34.610
And that's something to kind of note for
future.

199
00:11:34.610 --> 00:11:38.314
With regards to deployments, we don't
have to worry about this running over and

200
00:11:38.314 --> 00:11:39.410
over and over, right?

201
00:11:39.410 --> 00:11:43.999
We can just run it in the pipeline on
deploy, run it again, doesn't matter,

202
00:11:43.999 --> 00:11:46.130
as long as it can connect and check.

203
00:11:46.130 --> 00:11:49.070
So, cool, we've got migrations now.

204
00:11:49.070 --> 00:11:49.710
Okay.

205
00:11:49.710 --> 00:11:53.721
So what I would like you to
do really quickly is just add

206
00:11:53.721 --> 00:11:58.190
those changes that you made and
commit them to your branch.

207
00:11:58.190 --> 00:12:01.446
So we'll just say feature
added migrations.

