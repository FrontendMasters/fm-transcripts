WEBVTT

1
00:00:00.480 --> 00:00:03.982
&gt;&gt; Erik Reinert: I had actually just
finished going through the main.tf file,

2
00:00:03.982 --> 00:00:08.240
which was really everything
related to the cluster itself.

3
00:00:08.240 --> 00:00:12.049
So now we're going to create a couple of
other files that are related to things

4
00:00:12.049 --> 00:00:13.990
that kind of help the cluster, right?

5
00:00:13.990 --> 00:00:18.265
Right now, if I just provisioned this
based off of what we have in here,

6
00:00:18.265 --> 00:00:21.920
I would really just create
a bunch of compute nodes, right?

7
00:00:21.920 --> 00:00:27.200
I don't have any ingress or
load balancer or anything like that.

8
00:00:27.200 --> 00:00:28.680
So that's what we wanna add next.

9
00:00:28.680 --> 00:00:31.425
Normally when you have
a cluster of any part,

10
00:00:31.425 --> 00:00:35.327
that's a big step away from again,
something like App Runner,

11
00:00:35.327 --> 00:00:40.440
which would be more focused on just
here's your container, run it, right?

12
00:00:40.440 --> 00:00:45.338
When you have a cluster, you're kind of
legoing together this car almost that

13
00:00:45.338 --> 00:00:48.760
you're gonna drive all of
your deployments out with.

14
00:00:48.760 --> 00:00:53.318
And so in this scenario,
we need headlights, we need a frame,

15
00:00:53.318 --> 00:00:54.440
we need doors.

16
00:00:55.530 --> 00:00:57.690
So that's what a lot of these
other components are like.

17
00:00:57.690 --> 00:01:03.450
The load balancer is what lets customers
or requests into the cluster, right?

18
00:01:03.450 --> 00:01:08.650
You just don't get that out of the box,
that's an option you can add later.

19
00:01:10.810 --> 00:01:15.895
So now what we're gonna do is we're gonna
create a file called load_balancer.tf and

20
00:01:15.895 --> 00:01:19.587
this is where all of our load
balancer settings are gonna go, or

21
00:01:19.587 --> 00:01:22.810
all of our load balancer
configurations are gonna go.

22
00:01:23.810 --> 00:01:28.839
As I said before, man, when you take
the ownership of managing infrastructure

23
00:01:28.839 --> 00:01:33.790
at scale, I really do think that it's
coming completely home now to you guys in

24
00:01:33.790 --> 00:01:38.690
the sense of what scale looks like
versus what start-up looks like, right?

25
00:01:41.170 --> 00:01:45.707
We are concerning ourselves with so
many more problems and

26
00:01:45.707 --> 00:01:50.530
things to manage in the scale
world that it's a lot to take on.

27
00:01:51.570 --> 00:01:56.765
And for example, with the load balancer
even we don't just create a load balancer,

28
00:01:56.765 --> 00:01:59.106
we create a security group to make it so

29
00:01:59.106 --> 00:02:03.936
that things can appropriately access
the load balancer and firewall rules and

30
00:02:03.936 --> 00:02:08.050
all this stuff because we
are managing it ourselves.

31
00:02:08.050 --> 00:02:10.530
And so
we create a load balancer security group.

32
00:02:10.530 --> 00:02:16.610
We tell it that, hey, pretty much anything
can access 80 on this load balancer.

33
00:02:18.210 --> 00:02:22.480
There is a small tweak I could
make here if we really wanted to,

34
00:02:22.480 --> 00:02:27.159
which is I could, you'll see that
this is the first time I'm adding

35
00:02:27.159 --> 00:02:31.450
a rule that's focused entirely
on a IP address or CIDR range.

36
00:02:31.450 --> 00:02:34.061
Like up until now we've just
saying security_group_access,

37
00:02:34.061 --> 00:02:35.650
security_group_access.

38
00:02:35.650 --> 00:02:39.650
But this time I'm saying 0.0.0 and
0.0.0, right?

39
00:02:40.930 --> 00:02:45.479
I could if I wanted to pass in
the private security group and say like,

40
00:02:45.479 --> 00:02:49.794
okay, the private security group
can access the load balancer,

41
00:02:49.794 --> 00:02:53.893
for example, but
maybe the database security group can't.

42
00:02:53.893 --> 00:02:59.360
In this scenario, technically, even though
I'm in an internal network, meaning

43
00:02:59.360 --> 00:03:04.930
that this load balancer will be private,
it will not have a public address.

44
00:03:04.930 --> 00:03:09.918
It will mean that anything inside of
my private network will be able to

45
00:03:09.918 --> 00:03:11.300
access it on 80.

46
00:03:11.300 --> 00:03:17.152
So if I didn't want that, I would
tell this security_group_ingres_rule

47
00:03:17.152 --> 00:03:23.040
to accept from the security_group,
not from the IP address, right?

48
00:03:23.040 --> 00:03:26.369
But because it's all private and
I don't really care about adding and

49
00:03:26.369 --> 00:03:27.960
passing down another variable.

50
00:03:27.960 --> 00:03:32.320
Like we said, we have to add variable
entries, pass it down, all that stuff.

51
00:03:32.320 --> 00:03:33.800
I was just like, eh, we'll just do 80.

52
00:03:33.800 --> 00:03:34.880
It's not that big of a deal.

53
00:03:36.650 --> 00:03:40.591
So then after we have our
security_group_ingress and egress rule,

54
00:03:40.591 --> 00:03:42.994
we then have our load balancer itself and
so

55
00:03:42.994 --> 00:03:46.090
we can add a couple of things
like your idle_timeout.

56
00:03:46.090 --> 00:03:49.643
So basically I'm saying
a request can stay open up to

57
00:03:49.643 --> 00:03:53.450
300 seconds before we cancel it, right?

58
00:03:53.450 --> 00:03:57.290
I'm telling it that it's
an internal load balancer, right?

59
00:03:57.290 --> 00:03:58.170
Internal, true.

60
00:03:58.170 --> 00:04:03.274
That means again that it will not be
provisioned in public subnets and

61
00:04:03.274 --> 00:04:07.150
it will also not be given
a public IP address either.

62
00:04:07.150 --> 00:04:11.982
So this is a truly internal private
load balancer, load_balancer_type,

63
00:04:11.982 --> 00:04:15.590
application, preserve_host_header, false.

64
00:04:15.590 --> 00:04:19.621
And then subnets are the subnets
that we provide it via

65
00:04:19.621 --> 00:04:24.110
the var in the module itself,
security_groups, right?

66
00:04:24.110 --> 00:04:28.247
In this case, what we're doing is
we're telling the load_balancer, hey,

67
00:04:28.247 --> 00:04:31.696
you have the access to your main
load balancer security_group,

68
00:04:31.696 --> 00:04:34.220
but if we wanna add any other ones to it,
we can.

69
00:04:34.220 --> 00:04:37.649
So if we wanna add here,
if we want to add the security group,

70
00:04:37.649 --> 00:04:40.140
the private security group, we could, and

71
00:04:40.140 --> 00:04:44.987
then they would be able to connect to each
other through the private security groups,

72
00:04:44.987 --> 00:04:49.020
kind of making this one not even
needed anymore to be honest.

73
00:04:49.020 --> 00:04:55.660
Or this ingress rule not even needed
anymore to be honest, but anyways.

74
00:04:55.660 --> 00:04:59.414
So again with load balancers,
even on Amazon, it's not just like,

75
00:04:59.414 --> 00:05:01.930
here's a load balancer, you're done.

76
00:05:01.930 --> 00:05:04.576
You have to create listeners and
target groups and

77
00:05:04.576 --> 00:05:08.490
all of this other stuff to finally get
that request to that load balancer.

78
00:05:10.090 --> 00:05:14.027
After we create the load balancer,
we create what's called a listener,

79
00:05:14.027 --> 00:05:18.890
meaning that the load balancer,
by itself doesn't actually listen at all.

80
00:05:18.890 --> 00:05:21.620
We need to tell it what port
we want it to listen on,

81
00:05:21.620 --> 00:05:25.930
what protocol we want it to use,
what's the default response.

82
00:05:25.930 --> 00:05:27.450
And so that's what we're doing here.

83
00:05:27.450 --> 00:05:31.561
After we create the load balancer
we're actually telling Amazon, hey,

84
00:05:31.561 --> 00:05:34.090
now create a listener
on that load balancer.

85
00:05:34.090 --> 00:05:35.907
The listener port is port 80.

86
00:05:35.907 --> 00:05:41.019
It's an HTTP protocol and
if the listener doesn't know how to

87
00:05:41.019 --> 00:05:47.610
respond to the request then by default
give it a 404 not found, right?

88
00:05:47.610 --> 00:05:52.387
And so this will make it so that by
default if somebody tries accessing this

89
00:05:52.387 --> 00:05:56.778
load balancer they now can access
it over port 80 and if the request

90
00:05:56.778 --> 00:06:01.710
doesn't get fulfilled properly it will
go to a 404 not found response and

91
00:06:01.710 --> 00:06:03.583
that's the load balancer.

92
00:06:03.583 --> 00:06:07.430
Again, I hope you understand why
modules can be so powerful [LAUGH].

93
00:06:08.470 --> 00:06:09.433
There's just so

94
00:06:09.433 --> 00:06:13.775
much less you have to write when you're
not using the resources directly.

