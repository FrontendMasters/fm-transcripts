WEBVTT

1
00:00:00.000 --> 00:00:02.529
&gt;&gt; Erik Reinert: Now, that we've
figured out how the application runs,

2
00:00:02.529 --> 00:00:04.320
we've confirmed that it runs locally,

3
00:00:04.320 --> 00:00:07.440
we're ready to actually start putting
the application in the cloud.

4
00:00:08.800 --> 00:00:10.360
We've covered all of our bases.

5
00:00:10.360 --> 00:00:13.283
I know that if I run into any bugs or
any problems or anything like that,

6
00:00:13.283 --> 00:00:14.720
I should be good to go.

7
00:00:14.720 --> 00:00:17.120
Now what I want to do is
actually start working on.

8
00:00:17.120 --> 00:00:19.400
Cool, let's get our
deployment out the door.

9
00:00:19.400 --> 00:00:21.040
Let's take the code as it is.

10
00:00:21.040 --> 00:00:25.360
I should expect that this code in this
state should now just run in the cloud.

11
00:00:26.820 --> 00:00:29.669
So the first thing we're going to
want to do is we're going to actually

12
00:00:29.669 --> 00:00:30.820
go to Amazon.

13
00:00:30.820 --> 00:00:38.180
So I'm going to go to Amazon and
then I am going to go to the console.

14
00:00:38.180 --> 00:00:42.266
So everybody go to the main
console here at the front, and

15
00:00:42.266 --> 00:00:46.420
then I'm going to,
up in the top bar, type in ecr.

16
00:00:46.420 --> 00:00:49.220
Has anyone here ever
worked with ECR before?

17
00:00:49.220 --> 00:00:50.580
Does anyone know what it is?

18
00:00:52.810 --> 00:00:59.930
So ECR is
Amazon's Elastic Container Registry.

19
00:01:01.370 --> 00:01:03.894
We said that we want to get this up and

20
00:01:03.894 --> 00:01:09.450
running as minimally as humanly possible,
but we want to use containers.

21
00:01:09.450 --> 00:01:15.050
That means that we have to have our
image stored somewhere in the cloud.

22
00:01:15.050 --> 00:01:17.056
We have to put that image somewhere so

23
00:01:17.056 --> 00:01:20.640
that the thing that's running our
service is able to access it.

24
00:01:20.640 --> 00:01:21.920
That's all we really care about.

25
00:01:21.920 --> 00:01:23.680
But that's the requirement.

26
00:01:23.680 --> 00:01:26.419
And what I like to do when
I'm building things or

27
00:01:26.419 --> 00:01:30.938
trying to think about how to solve things,
I look at my most closest problem and

28
00:01:30.938 --> 00:01:33.814
then go, okay,
let me just solve this problem and

29
00:01:33.814 --> 00:01:37.600
then I'll solve the next one,
and then I'll solve the next one.

30
00:01:37.600 --> 00:01:41.320
I don't really take huge problems
on with tons of questions at once.

31
00:01:41.320 --> 00:01:42.600
I like to look at it very simply.

32
00:01:42.600 --> 00:01:45.935
So if we were to go, I want to get my
container running up in the cloud,

33
00:01:45.935 --> 00:01:49.270
the first thing we need to do
is put that image somewhere.

34
00:01:49.270 --> 00:01:53.007
Amazon has a service called
Elastic Container Registry and

35
00:01:53.007 --> 00:01:56.230
I can create a repository
to put all of my images in.

36
00:01:56.230 --> 00:01:59.910
And you can see here that I
already have one for the preview.

37
00:01:59.910 --> 00:02:01.630
This is basically what we're trying to do.

38
00:02:01.630 --> 00:02:06.124
I'm going to click Create Repository
up in the top right hand corner.

39
00:02:06.124 --> 00:02:09.190
Then, I'm going to type in fem md service.

40
00:02:10.630 --> 00:02:14.760
You'll notice that on
the left here there's a URL.

41
00:02:14.760 --> 00:02:18.080
The only thing I want you to take away
from this is this value right here.

42
00:02:18.080 --> 00:02:20.760
This value is your account id.

43
00:02:20.760 --> 00:02:24.160
Amazon separates all of its
resources based off of account ID.

44
00:02:24.160 --> 00:02:28.920
And more often than not, you'll see
your account ID and permissions or

45
00:02:28.920 --> 00:02:30.600
URLs or whatever.

46
00:02:30.600 --> 00:02:34.600
So just take note of this URL and
just copy it.

47
00:02:34.600 --> 00:02:38.150
Just put it off to the side, put it in
your editor, do whatever you want, but

48
00:02:38.150 --> 00:02:42.690
just take note of that URL, because
we're going to want that in the future.

49
00:02:42.690 --> 00:02:43.850
We're not going to change anything else.

50
00:02:43.850 --> 00:02:46.330
We're not going to worry about
immutability or mutability or whatever.

51
00:02:46.330 --> 00:02:51.330
We're just going to type in FEMFD service
and then we're going to click Create.

52
00:02:54.370 --> 00:02:56.727
What you could do is,
once you see that it's been created,

53
00:02:56.727 --> 00:02:58.010
you can see I have it right here.

54
00:02:58.010 --> 00:03:02.690
You can actually click on it and then do
something like click View, push commands.

55
00:03:02.690 --> 00:03:07.164
Then you'll see in here that
Amazon actually provides

56
00:03:07.164 --> 00:03:11.744
us a nice little UI to kind of
show you how to get started.

57
00:03:11.744 --> 00:03:16.682
The two most important things I want
you to kind of note are the git

58
00:03:16.682 --> 00:03:21.420
login password, and
then the tagging down here.

59
00:03:21.420 --> 00:03:25.927
So if you've ever used Docker before,
you've probably had to authenticate with

60
00:03:25.927 --> 00:03:28.860
like a registry at some
point to push up an image.

61
00:03:28.860 --> 00:03:32.260
And this is how you authenticate
with Amazon's registry.

62
00:03:32.260 --> 00:03:36.098
So what I want you to do really quickly
is I want you to copy this URL or

63
00:03:36.098 --> 00:03:37.410
copy this first line.

64
00:03:37.410 --> 00:03:39.890
So just click Code copied right there.

65
00:03:39.890 --> 00:03:44.916
Then I want in your terminal to
stop running the program, close out

66
00:03:44.916 --> 00:03:50.770
any other windows if you need, and
then paste in that command just like that.

67
00:03:52.130 --> 00:03:52.850
Then hit Enter.

68
00:03:54.930 --> 00:03:56.289
It should take a second, but

69
00:03:56.289 --> 00:03:59.130
then it should say login
succeeded once you've logged in.

70
00:03:59.130 --> 00:04:00.868
We now know that we can
basically push images.

71
00:04:00.868 --> 00:04:03.455
So if I wanted to, I could be like,
docker image, push, whatever,

72
00:04:03.455 --> 00:04:04.406
we're authenticated.

73
00:04:04.406 --> 00:04:07.232
So the next thing we need to do is
we need to create a docker file.

74
00:04:07.232 --> 00:04:09.950
Like, we don't anything to actually build,
right?

75
00:04:09.950 --> 00:04:11.070
Like, if we look here, there's no.

76
00:04:11.070 --> 00:04:12.350
There's a Docker compose.

77
00:04:12.350 --> 00:04:15.790
That's great that we got that, but
we didn't get a Docker file, right?

78
00:04:15.790 --> 00:04:17.470
So we actually need to create one now.

79
00:04:17.470 --> 00:04:19.150
So I'm going to create a new file, right?

80
00:04:19.150 --> 00:04:24.073
I'm just going to say touch Docker file
in the directory in the main directory,

81
00:04:24.073 --> 00:04:28.260
and then I'm just going to open up
that file and I'm going to copy and

82
00:04:28.260 --> 00:04:31.470
paste over for
you guys exactly what we want.

83
00:04:31.470 --> 00:04:35.639
Now, if you've ever started with
Docker before, this is a very simple,

84
00:04:35.639 --> 00:04:36.860
simple Docker file.

85
00:04:36.860 --> 00:04:41.187
This is one of the most common
Docker files approaches,

86
00:04:41.187 --> 00:04:47.020
which is very Simply at the top,
we tell it which image we want to use.

87
00:04:47.020 --> 00:04:50.036
And nine times out of 10,
when you're getting started,

88
00:04:50.036 --> 00:04:52.220
you're using just a language image.

89
00:04:52.220 --> 00:04:54.140
You'll notice here I'm using golang.

90
00:04:55.980 --> 00:04:57.780
We set up a working directory.

91
00:04:57.780 --> 00:05:02.846
So in this case, I'm telling Docker, hey,
inside of the container, when you build,

92
00:05:02.846 --> 00:05:08.120
I want you to change to the app directory,
which more than likely is empty.

93
00:05:08.120 --> 00:05:09.640
That's where I want to do all of my work.

94
00:05:10.680 --> 00:05:16.600
Then I'm going to copy my go mod and
my go sum into that directory.

95
00:05:16.600 --> 00:05:20.869
That means that when this copy happens,

96
00:05:20.869 --> 00:05:25.480
it will be AppGo mod and app Go sum.

97
00:05:25.480 --> 00:05:26.620
Now, really quickly,

98
00:05:26.620 --> 00:05:29.760
can anyone tell me why I'm just
copying those two files to start?

99
00:05:29.760 --> 00:05:34.022
Does anyone know why am I copying
just the go mod and the go.

100
00:05:34.022 --> 00:05:35.245
Sum.
&gt;&gt; Speaker 2: To initialize,

101
00:05:35.245 --> 00:05:36.635
I guess, the project,

102
00:05:36.635 --> 00:05:40.817
the code and everything, download
the dependencies that it may have.

103
00:05:40.817 --> 00:05:41.360
&gt;&gt; Erik Reinert: Yeah.

104
00:05:41.360 --> 00:05:46.184
So Docker has caching built into it,
which is nice.

105
00:05:46.184 --> 00:05:50.120
So if you have something
that's really labor-intensive,

106
00:05:50.120 --> 00:05:54.056
like downloading a ton of dependencies or
things like that,

107
00:05:54.056 --> 00:05:58.390
you can tell Docker to just do that
part first so that in the future.

108
00:05:58.390 --> 00:06:02.713
If another file changes, it doesn't have
to run that command over and over and

109
00:06:02.713 --> 00:06:03.440
over again.

110
00:06:04.560 --> 00:06:08.371
If you've ever used Node Modules or
NPM install inside of a container,

111
00:06:08.371 --> 00:06:12.689
it's pretty much the same effect where
you take a package JSON, a package lock,

112
00:06:12.689 --> 00:06:16.560
you do the NPM install and then you
copy all of your source code again.

113
00:06:16.560 --> 00:06:18.040
That's exactly what we're doing here.

114
00:06:18.040 --> 00:06:22.640
We're copying in the main stuff and
then we do a go mod download.

115
00:06:22.640 --> 00:06:26.789
This will make sure that it downloads all
the dependencies for the application.

116
00:06:26.789 --> 00:06:32.920
But then, here is where we will break
cache if we make any changes, right?

117
00:06:32.920 --> 00:06:37.516
So as long as I don't change the go mod or
the go sum every time I rebuild this

118
00:06:37.516 --> 00:06:42.440
image, it will only start from here,
which will save time in development.

119
00:06:42.440 --> 00:06:45.560
I don't have to worry about doing like,
it's just saving time, really.

120
00:06:45.560 --> 00:06:46.560
That's the easiest way to put it.

121
00:06:46.560 --> 00:06:47.400
It just saves time.

122
00:06:49.000 --> 00:06:51.614
So then after we do our go mod download,
we copy.

123
00:06:51.614 --> 00:06:53.960
So we do dot, dot, right?

124
00:06:53.960 --> 00:06:57.758
This is a very simple copy
everything in my current directory

125
00:06:57.758 --> 00:07:02.086
to everything in the directory I'm
inside of the Docker container.

126
00:07:02.086 --> 00:07:05.790
So that case, this means that I
am copying everything into app.

127
00:07:05.790 --> 00:07:09.430
And it also does mean that I'm
recopying go mod and go some.

128
00:07:09.430 --> 00:07:12.070
If you're like,
does that mean that that's happening?

129
00:07:12.070 --> 00:07:13.150
Yes, it totally does.

130
00:07:13.150 --> 00:07:15.190
But it doesn't matter at this point.

131
00:07:15.190 --> 00:07:16.310
We've already copied it once.

132
00:07:16.310 --> 00:07:18.002
We've already cached what
we wanted to cache, so

133
00:07:18.002 --> 00:07:19.710
it doesn't really matter
if it gets moved again.

134
00:07:19.710 --> 00:07:21.470
It's not that big of a deal.

135
00:07:21.470 --> 00:07:26.230
We know our build command, so
our build command should be go build O.

136
00:07:26.230 --> 00:07:28.780
In this case, I'm just calling it main.

137
00:07:28.780 --> 00:07:30.620
So I'm just saying go build main.

138
00:07:30.620 --> 00:07:31.452
Go or main, and

139
00:07:31.452 --> 00:07:35.820
then I'm doing dot at the end to tell it
to build in the current directory as well.

140
00:07:36.860 --> 00:07:38.900
Then the last two things
are Docker specific.

141
00:07:38.900 --> 00:07:41.163
We tell it the port we
want it to expose on,

142
00:07:41.163 --> 00:07:44.804
and then we tell it the application
that we want it to actually run.

143
00:07:44.804 --> 00:07:48.063
So that's it, pretty straightforward,
very simple Docker file,

144
00:07:48.063 --> 00:07:49.820
nothing too crazy about it.

145
00:07:49.820 --> 00:07:53.852
The next thing I want to
do is I want to follow

146
00:07:53.852 --> 00:07:59.100
the commands actually inside
of the push commands.

147
00:07:59.100 --> 00:08:01.076
So if I go back in here,

148
00:08:01.076 --> 00:08:06.692
you'll notice that there's
a build command, Docker build T.

149
00:08:06.692 --> 00:08:12.700
So I can just copy this,
paste this in, and then hit Enter.

150
00:08:12.700 --> 00:08:14.026
And if this works for you,

151
00:08:14.026 --> 00:08:17.660
then you should start seeing Docker
basically do the exact same thing.

152
00:08:21.100 --> 00:08:25.670
&gt;&gt; Speaker 2: That Dockerfile, like the
syntax or whatever you want to call that.

153
00:08:25.670 --> 00:08:30.070
Is that Docker specific,
like the copy run?

154
00:08:30.070 --> 00:08:33.110
&gt;&gt; Erik Reinert: Yeah,
those are all Docker specific syntax.

155
00:08:33.110 --> 00:08:36.230
And the Docker file is
unique to Docker itself.

156
00:08:37.590 --> 00:08:42.350
There are technically, I think Podman has
its own POD file or something like that.

157
00:08:42.350 --> 00:08:45.803
But no, that's the basic Docker.

158
00:08:45.803 --> 00:08:50.320
Yeah, dope, okay, so cool.

159
00:08:50.320 --> 00:08:52.320
We built our image.

160
00:08:52.320 --> 00:08:52.960
Awesome.

161
00:08:52.960 --> 00:08:56.000
Now, I'm gonna make one small change here.

162
00:08:56.000 --> 00:09:01.390
For those of you who are on ARM PCs or
ARM intel, or on ARM, sorry,

163
00:09:01.390 --> 00:09:07.680
processors, you'll notice that
before we ran this command, right?

164
00:09:07.680 --> 00:09:09.040
Cool, that's awesome.

165
00:09:09.040 --> 00:09:13.320
But if you're on one of the new
MacBook Pros, this will not work for you.

166
00:09:13.320 --> 00:09:15.040
And you might be like, why?

167
00:09:15.040 --> 00:09:19.228
Well, because you just built an image for
ARM64, which means that if I want

168
00:09:19.228 --> 00:09:22.960
to deploy this image,
I need to Deploy to an ARM64 processor.

169
00:09:22.960 --> 00:09:27.127
There's a way of getting around this,
and I'm going to show it to you,

170
00:09:27.127 --> 00:09:30.120
which is I can tell Docker
with the Build X command.

171
00:09:30.120 --> 00:09:36.160
So not build, but Build X what
platform I want to actually build for.

172
00:09:36.160 --> 00:09:40.323
So what I want you to do is,
even though we ran this build command,

173
00:09:40.323 --> 00:09:43.900
I want you to then run this
build command underneath it.

174
00:09:45.020 --> 00:09:49.909
So Docker build X build platform,

175
00:09:49.909 --> 00:09:55.810
Linux amd64 tag fem fd service latest so

176
00:09:55.810 --> 00:10:00.541
just run that command directly.

177
00:10:00.541 --> 00:10:01.560
&gt;&gt; Speaker 2: All of us are just.

178
00:10:01.560 --> 00:10:02.740
&gt;&gt; Erik Reinert: All of us, yeah, yeah.

179
00:10:02.740 --> 00:10:03.540
Everybody, Yeah.

180
00:10:03.540 --> 00:10:05.740
I mean, if it works, you may not.

181
00:10:05.740 --> 00:10:10.294
It may not work for you, but

182
00:10:10.294 --> 00:10:14.258
if it does, then yeah.

183
00:10:14.258 --> 00:10:15.600
So I'm going to hit Enter, and

184
00:10:15.600 --> 00:10:19.380
you'll notice that it actually does
everything again from scratch.

185
00:10:19.380 --> 00:10:24.178
That's because this time it's actually
pulling the AMD 64 version of the image,

186
00:10:24.178 --> 00:10:27.500
running the build and
making sure that everything works.

187
00:10:27.500 --> 00:10:31.860
On AMD 64, we did technically
just do a multi platform build.

188
00:10:31.860 --> 00:10:35.880
We first built it on ARM,
if you're on an ARM PC.

189
00:10:35.880 --> 00:10:41.756
And then we reran it with AMD 64 to
make sure that it gets built properly.

190
00:10:41.756 --> 00:10:42.440
And there you go.

191
00:10:44.040 --> 00:10:48.120
&gt;&gt; Speaker 2: What's the colon
latest there at the end?

192
00:10:51.000 --> 00:10:55.233
That's the main difference I'm seeing
between the one copied from AWS and

193
00:10:55.233 --> 00:10:56.840
the one that you have.

194
00:10:56.840 --> 00:10:57.560
&gt;&gt; Erik Reinert: Yeah.

195
00:10:57.560 --> 00:11:03.771
So Docker images have what
are called tags, and those are like.

196
00:11:03.771 --> 00:11:06.258
So the first part here is
the name of the image, but

197
00:11:06.258 --> 00:11:09.630
then this is the actual version
of the image that I want, right?

198
00:11:09.630 --> 00:11:13.678
So latest is kind of like a convention
in Docker that simply says I want to get

199
00:11:13.678 --> 00:11:16.430
the absolute latest
image that's available.

200
00:11:16.430 --> 00:11:18.510
So they just use the latest tag.

201
00:11:18.510 --> 00:11:22.270
However, I am like slightly.

202
00:11:22.270 --> 00:11:26.091
Well, I'm autistic and I'm very
deliberate with everything I do, so

203
00:11:26.091 --> 00:11:27.310
I like to be explicit.

204
00:11:27.310 --> 00:11:28.951
So I always put it in regardless.

205
00:11:28.951 --> 00:11:32.533
But you don't actually have to that If
you want, you can just remove latest and

206
00:11:32.533 --> 00:11:33.300
you'd be fine.

207
00:11:33.300 --> 00:11:36.922
But I have really weird quirks and
that's one of them.

208
00:11:36.922 --> 00:11:39.122
I would rather see it than not,
but if you remove it,

209
00:11:39.122 --> 00:11:40.740
it'll still be tagged as latest.

210
00:11:40.740 --> 00:11:44.315
Yeah, we generated credentials,
we ran our postgres locally,

211
00:11:44.315 --> 00:11:48.420
we made sure that the application works
locally, so we know the app works.

212
00:11:48.420 --> 00:11:50.226
We made a Docker file for it and

213
00:11:50.226 --> 00:11:54.740
then we built that dockerfile to make
sure that that is all good as well.

214
00:11:54.740 --> 00:11:59.610
So the last thing we really need
to do is simply tag and push it.

215
00:11:59.610 --> 00:12:02.611
So what I'm going to do
is in the commands here,

216
00:12:02.611 --> 00:12:07.186
you'll notice that we have a third
line that says Docker tag, fem, fd,

217
00:12:07.186 --> 00:12:10.730
service, latest, blah,
blah, blah, blah, blah.

218
00:12:10.730 --> 00:12:15.690
So I'm going to copy that third line and
then I'm just going to paste that in.

219
00:12:15.690 --> 00:12:23.210
So I'm just taking exactly what is
in the document and then enter.

220
00:12:24.820 --> 00:12:28.500
If I do that,
what I've effectively just done is.

221
00:12:28.500 --> 00:12:31.860
And it's hard to see because my text is so
big.

222
00:12:31.860 --> 00:12:34.140
Let me reset the font size here.

223
00:12:34.140 --> 00:12:35.140
There you go.

224
00:12:35.140 --> 00:12:36.860
You'll see that I have Two tags.

225
00:12:36.860 --> 00:12:40.634
Now I have one with my normal
FEM FD service tag on latest, and

226
00:12:40.634 --> 00:12:43.540
then I have another one
with a much longer.

227
00:12:43.540 --> 00:12:46.980
Remember that URL I told
you about before from ecr?

228
00:12:46.980 --> 00:12:50.502
Well, it tacked on that
URL in front of it and

229
00:12:50.502 --> 00:12:54.036
it made that the name of the image,
latest.

230
00:12:54.036 --> 00:12:59.320
So basically, we're setting this
up to be pushed to Amazon ECR.

231
00:12:59.320 --> 00:13:04.120
And so the last thing we can do is we
can copy that last command, docker,

232
00:13:04.120 --> 00:13:07.080
push, paste that and then hit Enter.

233
00:13:07.080 --> 00:13:11.076
And if your credentials are set up and
everything's good to go,

234
00:13:11.076 --> 00:13:15.000
you should start seeing your
image get pushed to Amazon cloud.

235
00:13:21.170 --> 00:13:23.490
I like how somebody in chat's
talking about the image size.

236
00:13:23.490 --> 00:13:25.650
Don't worry, we'll get to that.

237
00:13:25.650 --> 00:13:27.250
It is a chunky container.

238
00:13:28.850 --> 00:13:33.732
So if everything works, everything is
good, then you can close this window out,

239
00:13:33.732 --> 00:13:35.853
you can click on your image in ECR and

240
00:13:35.853 --> 00:13:39.890
sure enough, we should see our
latest image tag right there.

241
00:13:39.890 --> 00:13:43.309
You just took your very first
step to working on a deployment,

242
00:13:43.309 --> 00:13:47.250
which is, as we said in the beginning
of this phase, I just want to get my

243
00:13:47.250 --> 00:13:50.910
app running right and I want to be
able to connect it to a database.

244
00:13:50.910 --> 00:13:53.709
Well, we just did the first
part of the running,

245
00:13:53.709 --> 00:13:56.590
which is our image work or
our application works.

246
00:13:56.590 --> 00:13:58.954
We know how to configure it,
we can build it, and

247
00:13:58.954 --> 00:14:02.030
now we've put it up in the cloud so
that other things can use it.

