WEBVTT

1
00:00:00.090 --> 00:00:01.977
Currently, we're running in dev mode.

2
00:00:01.977 --> 00:00:05.605
And in dev mode, basically,
Vite is running.

3
00:00:05.605 --> 00:00:11.243
And what Vite is doing is, well,
there are two parts running.

4
00:00:11.243 --> 00:00:14.888
First of all,
there is this thing we call optimizer,

5
00:00:14.888 --> 00:00:19.996
optimizer is written in Rust, and
it takes your code base and breaks it up.

6
00:00:19.996 --> 00:00:24.229
So it looks for the dollar signs, and
wherever it sees a dollar sign, it says,

7
00:00:24.229 --> 00:00:28.145
that's a potential lazy loading thing,
and I'm gonna break this up and

8
00:00:28.145 --> 00:00:30.417
allow you to lazy load that piece of code.

9
00:00:30.417 --> 00:00:33.723
And so the optimizer is the thing
that allows you to break everything

10
00:00:33.723 --> 00:00:34.422
into pieces.

11
00:00:34.422 --> 00:00:37.919
Now in dev mode,
we run everything through Vite, and

12
00:00:37.919 --> 00:00:41.354
Vite will serve all of
those pieces independently.

13
00:00:41.354 --> 00:00:48.767
So in this situation in Vite,
you could easily get to waterfall events.

14
00:00:48.767 --> 00:00:50.329
Let me show you what I mean by that.

15
00:00:50.329 --> 00:00:54.217
So let's say we have our search.

16
00:00:54.217 --> 00:00:55.818
Let's run this.

17
00:00:55.818 --> 00:01:02.285
Okay, it's running.

18
00:01:02.285 --> 00:01:07.095
Let's go to our Search and,

19
00:01:11.483 --> 00:01:16.929
Just for fun, just to be complicated,
I am going to pull this out.

20
00:01:16.929 --> 00:01:20.972
So let's see.
What I wanna do is I want to say

21
00:01:20.972 --> 00:01:25.875
set Filter, I'm gonna pull this out.

22
00:01:25.875 --> 00:01:31.115
So now we have a method called set filter,

23
00:01:31.115 --> 00:01:36.207
and so now I'm gonna say const setFilter

24
00:01:36.207 --> 00:01:41.447
which will get a value
which is a string and

25
00:01:41.447 --> 00:01:45.961
it will do filter.value = value.

26
00:01:45.961 --> 00:01:51.288
Okay, I just pulled it out into
a kind of a helper function, right?

27
00:01:51.288 --> 00:01:53.493
This doesn't change anything.

28
00:01:53.493 --> 00:01:55.911
But a few things that are happening
right now, first of all,

29
00:01:55.911 --> 00:01:57.582
it's complaining about the setFilter.

30
00:01:57.582 --> 00:02:00.702
And so if you hover over it,
what it saying is,

31
00:02:00.702 --> 00:02:05.585
look, you are referring to setFilter,
but I am going to refactor this.

32
00:02:05.585 --> 00:02:09.598
Because this is in a dollar sign, I'm
gonna refactor this to a top level thing

33
00:02:09.598 --> 00:02:11.905
and I won't be able to
reach the setFilter.

34
00:02:11.905 --> 00:02:12.836
So the rules are,

35
00:02:12.836 --> 00:02:17.251
if you're gonna do something like this,
setFilter either has to be importable, so

36
00:02:17.251 --> 00:02:20.755
I need to be able to write an import
statement to kind of get it to it.

37
00:02:20.755 --> 00:02:25.372
In this case, I can't import that or
I need to be able to serialize it, and

38
00:02:25.372 --> 00:02:29.104
this is a closure, and
I don't know how to serialize this.

39
00:02:29.104 --> 00:02:30.969
So you need to do something.

40
00:02:30.969 --> 00:02:35.873
And so in the world of Quake,
what you do is you import,

41
00:02:35.873 --> 00:02:38.442
you wrap it in a dollar sign.

42
00:02:38.442 --> 00:02:43.410
And for some reason,
I have to manually add this thing here.

43
00:02:43.410 --> 00:02:46.555
Okay, so
we've wrapped it in a dollar sign, and

44
00:02:46.555 --> 00:02:50.008
what that basically means
is that it says optimizer,

45
00:02:50.008 --> 00:02:55.171
please take this function and turn it
into a lazy loadable, importable think.

46
00:02:55.171 --> 00:02:58.529
And when I did this,
now this particular code is happy,

47
00:02:58.529 --> 00:03:03.465
it's perfectly happy to call the set
value because it's serializable, right?

48
00:03:03.465 --> 00:03:05.796
Now notice what's happening here.

49
00:03:05.796 --> 00:03:09.622
This closure is capturing setFilter and

50
00:03:09.622 --> 00:03:15.480
then setFilter internally is
capturing the filter, right?

51
00:03:15.480 --> 00:03:18.938
And so if we go here,
it should still work, so if I type an a,

52
00:03:18.938 --> 00:03:21.245
everything's working as you expect.

53
00:03:21.245 --> 00:03:25.600
But notice what happens in terms
of our code that we download.

54
00:03:25.600 --> 00:03:29.797
So the first piece we
download [COUGH] is we

55
00:03:29.797 --> 00:03:35.117
downloaded the handler for
our code base, right?

56
00:03:35.117 --> 00:03:40.061
And right after that, we downloaded
the set value which then in turn

57
00:03:40.061 --> 00:03:43.714
downloaded the JSX and
everything else, right?

58
00:03:43.714 --> 00:03:48.363
And so if you look at from the point
of view of, refresh this again,

59
00:03:48.363 --> 00:03:52.931
the waterfall that's on the left-hand
side here, if I enter a,

60
00:03:52.931 --> 00:03:57.682
there's a bit of a waterfall happening,
it's kind of hard to see.

61
00:03:57.682 --> 00:03:58.942
Let me see if I can do it immediately.

62
00:03:58.942 --> 00:04:03.006
There's a bit of a waterfall
happening in here, right, and

63
00:04:03.006 --> 00:04:06.435
[COUGH] it's downloading
a whole bunch of code, and

64
00:04:06.435 --> 00:04:10.681
all of this thing is not good for
performance when production.

65
00:04:10.681 --> 00:04:13.882
So what happens in production?

66
00:04:13.882 --> 00:04:17.033
So in production, we don't do Vite,
instead we have to build this thing.

67
00:04:17.033 --> 00:04:17.582
So let me see.

68
00:04:17.582 --> 00:04:21.358
Instead of npm run dev, we say build.

69
00:04:21.358 --> 00:04:26.234
And so this goes and builds for
us a whole bunch of things,

70
00:04:26.234 --> 00:04:30.718
and it complains that this is imported but
not used.

71
00:04:30.718 --> 00:04:35.452
And this is imported and

72
00:04:35.452 --> 00:04:39.005
not used, okay?

73
00:04:39.005 --> 00:04:39.900
Let's build it.

74
00:04:39.900 --> 00:04:46.645
Okay, so now it broke up our application
into lots of individual pieces.

75
00:04:46.645 --> 00:04:52.140
You see all of these chunks are broken up,
and then everything is made available.

76
00:04:52.140 --> 00:04:57.998
So let's go and
try to run this in production mode.

77
00:04:57.998 --> 00:05:02.130
So in production mode,
you do preview, I think.

78
00:05:02.130 --> 00:05:06.890
There's a different command for whether
you're doing production of Netlify, or

79
00:05:06.890 --> 00:05:08.527
Cloudflare, or whatever.

80
00:05:08.527 --> 00:05:11.310
So this is just a Node.js version.

81
00:05:11.310 --> 00:05:18.376
And so let's grab this URL /contacts.

82
00:05:22.226 --> 00:05:24.009
And let's go to Network.

83
00:05:24.009 --> 00:05:27.477
And let's do JavaScript and refresh.

84
00:05:27.477 --> 00:05:29.298
So, notice what's happening here.

85
00:05:29.298 --> 00:05:32.226
We still are downloading
the first chunk and

86
00:05:32.226 --> 00:05:36.669
the second chunk cuz the clock
is happening immediately, right?

87
00:05:36.669 --> 00:05:42.090
But notice that the service worker
responded, we never made a request.

88
00:05:42.090 --> 00:05:45.265
Let me show this to you in
a slightly different way.

89
00:05:45.265 --> 00:05:47.099
Let's refresh this.

90
00:05:47.099 --> 00:05:51.821
Actually, let me now disable cache.

91
00:05:51.821 --> 00:05:57.020
And let me clear the Service Worker cache,

92
00:05:57.020 --> 00:06:03.384
Delete Service Worker,
Local Host, Unregister.

93
00:06:03.384 --> 00:06:07.726
Okay, so we are now navigating
to the page first time, so

94
00:06:07.726 --> 00:06:10.626
we do an empty cache and a hard reload.

95
00:06:10.626 --> 00:06:13.638
The service worker immediately
started fetching the code, right, so

96
00:06:13.638 --> 00:06:15.959
this is the prefetching
that happens automatically.

97
00:06:15.959 --> 00:06:17.423
And in this particular case,

98
00:06:17.423 --> 00:06:21.465
the service worker kind of recognized that
these are the only pieces that we need,

99
00:06:21.465 --> 00:06:24.057
and so it downloaded all
those pieces ahead of time.

100
00:06:24.057 --> 00:06:28.756
And so now if I flip over to
JavaScript mode and I start searching,

101
00:06:28.756 --> 00:06:32.522
notice my code was from
the service worker, right?

102
00:06:32.522 --> 00:06:34.419
It responded from the service worker.

103
00:06:34.419 --> 00:06:38.532
And so as a result,
the downloads didn't happen.

104
00:06:38.532 --> 00:06:40.097
That's the first difference.

105
00:06:40.097 --> 00:06:46.979
There is a service worker and this service
worker if I go into it, if I go here.

106
00:06:46.979 --> 00:06:50.170
This service worker if you look at it,

107
00:06:50.170 --> 00:06:53.970
knows about all of
the bundles ahead of time.

108
00:06:53.970 --> 00:06:56.957
Not only does it know
about all the bundles,

109
00:06:56.957 --> 00:07:01.498
it also understands how these
bundles import from other bundles.

110
00:07:01.498 --> 00:07:05.156
And because it understands this,
it knows like,

111
00:07:05.156 --> 00:07:09.619
if you request bundle A,
I am gonna need to also download bundle B.

112
00:07:09.619 --> 00:07:14.029
And so the service worker
immediately on hitting the URL,

113
00:07:14.029 --> 00:07:16.729
starts fetching all of the things.

114
00:07:16.729 --> 00:07:18.614
Now, how does it know what
it can possibly fetch?

115
00:07:18.614 --> 00:07:23.567
Well, the reason it knows that is
because when we render a page,

116
00:07:23.567 --> 00:07:28.078
let's go back to this page,
[COUGH] one of the things we do.

117
00:07:33.953 --> 00:07:38.359
Yes, so in here is a tiny JavaScript.

118
00:07:38.359 --> 00:07:41.192
That's one,
there's I think more of them here.

119
00:07:41.192 --> 00:07:48.791
[COUGH] This tiny piece of JavaScript sets
up a global listener called QPrefetch.

120
00:07:48.791 --> 00:07:53.736
And then anywhere in the system, you can
just dispatch an event, the custom event

121
00:07:53.736 --> 00:07:58.196
called Qprefetch, and you specify
which bundles do you want right here.

122
00:07:58.196 --> 00:08:01.364
And so
at the beginning when the system wakes up,

123
00:08:01.364 --> 00:08:06.402
when we were running on a server, we
looked at all the possible entry points.

124
00:08:06.402 --> 00:08:07.924
In other words, what can you do?

125
00:08:07.924 --> 00:08:11.473
You can click on stuff, you can interact
with the page, you can hover over things,

126
00:08:11.473 --> 00:08:13.666
whatever, we collected
all the possible things.

127
00:08:13.666 --> 00:08:18.632
And we saw that, the only possible
ways you can interact with the system

128
00:08:18.632 --> 00:08:22.606
means that you may need this,
this, this, or this bundle.

129
00:08:22.606 --> 00:08:26.770
And so we fire this event off, and
now the service worker says, okay,

130
00:08:26.770 --> 00:08:28.048
let me go fetch this.

131
00:08:28.048 --> 00:08:31.478
But I now know that if you ask for
this bundle,

132
00:08:31.478 --> 00:08:36.720
I'm also gonna need this other bundle,
so it does it transitively.

133
00:08:36.720 --> 00:08:41.663
And the reason why this is important
is because you can very easily create

134
00:08:41.663 --> 00:08:43.212
things like unhover.

135
00:08:43.212 --> 00:08:47.700
So for example, when something becomes
visible or when you hover over something,

136
00:08:47.700 --> 00:08:51.288
you immediately can see,
now you are likely to click on this,

137
00:08:51.288 --> 00:08:54.131
let me go tell the service
worker to start fetching.

138
00:08:54.131 --> 00:08:59.148
Or better yet, you are on the particular
page and that page doesn't

139
00:08:59.148 --> 00:09:05.410
have a particular button, so therefore,
you cannot execute some bundle, right?

140
00:09:05.410 --> 00:09:06.939
So we don't fetch that bundle.

141
00:09:06.939 --> 00:09:11.108
But then you open up a model dialogue box
and that model has a whole bunch of new

142
00:09:11.108 --> 00:09:14.626
buttons, and so it's very easy to
just do query selector all and

143
00:09:14.626 --> 00:09:17.315
find all of the possible
things you can click on.

144
00:09:17.315 --> 00:09:21.736
And now you issue another event that says,
okay, now that we have transitioned,

145
00:09:21.736 --> 00:09:24.574
I now know about new set of
bundles that I might need.

146
00:09:24.574 --> 00:09:28.911
And so you fire this Qprefetch event,
the service worker picks it up and

147
00:09:28.911 --> 00:09:31.237
make sure that the data is available.

148
00:09:31.237 --> 00:09:35.904
So as you're navigating through your
application, as you go from page

149
00:09:35.904 --> 00:09:40.331
A to page B, or to modal, or
you open things or unhide things, etc,

150
00:09:40.331 --> 00:09:45.420
a new possible links become visible or
new possible buttons become visible.

151
00:09:45.420 --> 00:09:48.873
The system automatically tells
the service worker, like,

152
00:09:48.873 --> 00:09:51.049
go get me this stuff, I may need this.

153
00:09:51.049 --> 00:09:51.998
And over time,

154
00:09:51.998 --> 00:09:56.020
the service worker basically fills
in all the items in the cache.

155
00:09:56.020 --> 00:10:01.022
So basically, the moment a button comes
on a page that has a click listener,

156
00:10:01.022 --> 00:10:06.650
the service worker immediately proactively
starts fetching the code associated for

157
00:10:06.650 --> 00:10:10.184
the button, whether or
not you actually click on it.

158
00:10:10.184 --> 00:10:14.624
And so in this way, the service worker
will stay as a step ahead of you,

159
00:10:14.624 --> 00:10:19.221
and you should never get to the situation
where you click on something and

160
00:10:19.221 --> 00:10:21.810
the code is not available for you, yes?

161
00:10:21.810 --> 00:10:23.064
&gt;&gt; So to clarify,

162
00:10:23.064 --> 00:10:28.569
the service worker is proactively
doing this based on visibility?

163
00:10:28.569 --> 00:10:31.892
Or is there something that you have to do

164
00:10:31.892 --> 00:10:35.529
in your code in order
to make it proactive?

165
00:10:35.529 --> 00:10:40.761
The service worker is doing this
automatically not because of visibility,

166
00:10:40.761 --> 00:10:44.845
it's doing it because on a server,
when it renders a page,

167
00:10:44.845 --> 00:10:48.298
the server tells it what
are the possible things.

168
00:10:48.298 --> 00:10:52.073
And then when the code runs on
the client to render new things,

169
00:10:52.073 --> 00:10:56.139
the rendering process now tells it that,
as I was rendering,

170
00:10:56.139 --> 00:10:59.061
I've discovered these
other possible paths.

171
00:10:59.061 --> 00:11:03.813
By the way, we call those QRLs, so
it says I discovered these new QRLs,

172
00:11:03.813 --> 00:11:04.857
go fetch them.

173
00:11:08.955 --> 00:11:13.615
And so in practice even if you're
in a slow connection or whatever,

174
00:11:13.615 --> 00:11:18.112
you should never be in a situation
where you click on something and

175
00:11:18.112 --> 00:11:20.595
the code is not available, right?

176
00:11:20.595 --> 00:11:24.661
And you can also see that we can do all
kinds of optimizations that normal systems

177
00:11:24.661 --> 00:11:25.275
cannot do.

178
00:11:25.275 --> 00:11:29.043
So normal systems typically have this
problem that you end up with the one

179
00:11:29.043 --> 00:11:32.254
humongous chunk, and
there's no way to break this chunk up,

180
00:11:32.254 --> 00:11:34.627
or no easy way to break this chunk up,
right?

181
00:11:34.627 --> 00:11:38.164
Here because we already broken
this up into thousands of pieces,

182
00:11:38.164 --> 00:11:40.428
it's easy to put those pieces together.

183
00:11:40.428 --> 00:11:44.350
And so we now have choices to put
these pieces first or those pieces?

184
00:11:44.350 --> 00:11:46.870
So we give you one chunk or ten chunks?

185
00:11:46.870 --> 00:11:51.256
All of those things are essentially
a configuration information into

186
00:11:51.256 --> 00:11:52.743
the bundling system and

187
00:11:52.743 --> 00:11:56.399
none of them require you to
change any kind of source code.

188
00:11:56.399 --> 00:12:00.888
So the idea is you first build an app,
and at the beginning, you don't have much

189
00:12:00.888 --> 00:12:05.647
information about how people use your app,
and so some default heuristics happen.

190
00:12:05.647 --> 00:12:09.158
And then as people start using the app,
you start collecting information.

191
00:12:09.158 --> 00:12:12.170
And by the way,
the symbols are intentionally made

192
00:12:12.170 --> 00:12:15.453
such that the hash of the symbol
is stable across the builds.

193
00:12:15.453 --> 00:12:19.964
And so you get to collect and find out,
these symbols are together, and

194
00:12:19.964 --> 00:12:24.285
this button is more likely to be
clicked than this other button, right?

195
00:12:24.285 --> 00:12:30.654
And so as a result, you really end up
with the absolute optimal bundle size.

196
00:12:30.654 --> 00:12:35.296
I cannot imagine what else could we
do to make this even more optimal,

197
00:12:35.296 --> 00:12:38.830
every trick that I could
think of is in here, right?

198
00:12:38.830 --> 00:12:43.810
We know how to break it up, we do it into
pieces, we put it in the correct order.

199
00:12:43.810 --> 00:12:47.909
You solve one problem with having a single
large bundle is that you cannot execute

200
00:12:47.909 --> 00:12:51.056
anything good until the whole
bundle is downloaded, right?

201
00:12:51.056 --> 00:12:54.276
So for this reason,
you should have fewer smaller bundles, so

202
00:12:54.276 --> 00:12:57.946
that as the first bundle shows up,
you can start executing it, right?

203
00:12:57.946 --> 00:13:00.850
Of course, we don't need to execute
anything because we're resumable, but

204
00:13:00.850 --> 00:13:03.062
let's say it's a clock,
like situation in here, right?

205
00:13:03.062 --> 00:13:06.842
In this case, the system should
be smart enough to basically say,

206
00:13:06.842 --> 00:13:10.685
the symbol associated with the clock
is the first one that we need, and so

207
00:13:10.685 --> 00:13:12.900
please put it inside of the first bundle.

208
00:13:12.900 --> 00:13:17.930
And then the second bundle needs
to have this code over here.

209
00:13:17.930 --> 00:13:19.935
And then the other bundles for login and

210
00:13:19.935 --> 00:13:23.720
logout, those are low priority because
you can't reach them from here.

211
00:13:23.720 --> 00:13:26.803
You have to navigate somewhere else
before you can get reach that particular

212
00:13:26.803 --> 00:13:27.436
piece of code.

