WEBVTT

1
00:00:00.150 --> 00:00:04.900
Let's talk about Qwik and
basically the two properties that it has.

2
00:00:04.900 --> 00:00:07.260
So it's resumable and it's progressive.

3
00:00:08.290 --> 00:00:10.600
So what do we mean by resumable?

4
00:00:10.600 --> 00:00:14.680
So when I first heard about virtual
machines, my mind was blown away.

5
00:00:14.680 --> 00:00:19.757
And specifically was the fact that,
let's say you had a Windows

6
00:00:19.757 --> 00:00:25.784
machine you could boot up a Linux
inside of your Windows machine, right?

7
00:00:25.784 --> 00:00:30.272
That was kind of cool but then,
inside of the Linux machine you would

8
00:00:30.272 --> 00:00:35.334
actually watch it boot,
you would actually see the BIOS run again.

9
00:00:35.334 --> 00:00:38.682
And then the whole boot up process would
run and then you get to the login page and

10
00:00:38.682 --> 00:00:41.576
you could log in and then open up
an application like spreadsheet and

11
00:00:41.576 --> 00:00:44.369
start working on your spreadsheet, right?

12
00:00:44.369 --> 00:00:48.089
But the thing that really blew my mind
is the fact that you could now pause

13
00:00:48.089 --> 00:00:52.609
the application, to pause the virtual
machine and you would save it to a file.

14
00:00:52.609 --> 00:00:56.820
You could take this file to a different
machine, physical machine, and

15
00:00:56.820 --> 00:01:01.250
there you could open it and there you
would skip the boot up process, right?

16
00:01:01.250 --> 00:01:03.872
You would literally just open
it where you left off and

17
00:01:03.872 --> 00:01:05.880
there would be no boot up, right?

18
00:01:05.880 --> 00:01:09.482
There would be no watching the boot
up system go or login page or

19
00:01:09.482 --> 00:01:12.820
anything like you literally
started where you left off.

20
00:01:14.430 --> 00:01:16.120
And that's what the resumability is,
right?

21
00:01:16.120 --> 00:01:21.219
If you have the full information of the
system, then you can skip, the boot up.

22
00:01:21.219 --> 00:01:27.894
And if you think about it, hydration is
the boot up process that's happening.

23
00:01:27.894 --> 00:01:31.922
And so instead of saving the state
of the system into the file,

24
00:01:31.922 --> 00:01:35.014
we can save the system into the HTML.

25
00:01:35.014 --> 00:01:37.344
And this is what the resumability is.

26
00:01:37.344 --> 00:01:40.489
Is that on a server,
when we do pre-rendering, right?

27
00:01:40.489 --> 00:01:45.609
When we pre-render the application,
we go through the full boot up process,

28
00:01:45.609 --> 00:01:50.354
there we don't have a choice,
we have to run all the code.

29
00:01:50.354 --> 00:01:54.114
But then at some point we serialize
everything into the HTML.

30
00:01:54.114 --> 00:01:55.912
And once we serialize the HTML,

31
00:01:55.912 --> 00:01:58.909
the HTML can be either shipped
to a different client or

32
00:01:58.909 --> 00:02:04.710
it could be saved in a CDN or it could be
a pre-rendered content, it doesn't matter.

33
00:02:04.710 --> 00:02:08.670
Once you get the HTML,
you can just continue where you left off.

34
00:02:08.670 --> 00:02:12.870
And the continuing of the left off, the
the real value there is not necessarily

35
00:02:12.870 --> 00:02:15.288
the amount of JavaScript
that you download,

36
00:02:15.288 --> 00:02:19.570
it is the fact that you don't have to
execute all the JavaScript again, right?

37
00:02:20.795 --> 00:02:23.927
The real value is lazy execution
of the code that you don't need.

38
00:02:26.270 --> 00:02:29.228
And so if you think about it,
what's happening in

39
00:02:29.228 --> 00:02:34.088
the hydration is that in the server, you
execute the whole application, then you

40
00:02:34.088 --> 00:02:38.472
have to serialize the application,
then you download the HTML, right?

41
00:02:38.472 --> 00:02:43.032
And then guess what, you have to replay
all of the application again, right?

42
00:02:43.032 --> 00:02:46.692
This big box here, this code and
this code are the same thing.

43
00:02:47.932 --> 00:02:50.762
You are redoing the work
that the server already did.

44
00:02:51.842 --> 00:02:56.800
And this what makes hydration slower
because you are doing stuff unnecessarily

45
00:02:56.800 --> 00:02:58.172
twice, right?

46
00:02:58.172 --> 00:03:01.013
And so the user interaction
is pushed down over here.

47
00:03:01.013 --> 00:03:04.783
And so in the case of resumability, you
still have to do this stuff on a server.

48
00:03:05.843 --> 00:03:08.893
You do the serialization,
which we call the pause.

49
00:03:08.893 --> 00:03:12.186
And then on the client,
you don't have to do anything,

50
00:03:12.186 --> 00:03:15.563
because you just continue where
you left off on a server.

51
00:03:16.663 --> 00:03:21.197
But that requires that the client
can serialize not just

52
00:03:21.197 --> 00:03:23.714
the state of the application.

53
00:03:23.714 --> 00:03:28.954
The HTML serializes also the component
boundaries, the listeners,

54
00:03:28.954 --> 00:03:34.193
it serializes the reactivity graphs so
that it understands that if you

55
00:03:34.193 --> 00:03:39.398
modify data here, what other
component needs to get re-rendered.

56
00:03:39.398 --> 00:03:43.572
And if you can you serialize all of these
things then hydration becomes unnecessary.

57
00:03:43.572 --> 00:03:48.141
Because what hydration is, is a way for
the framework to recover information about

58
00:03:48.141 --> 00:03:51.286
the application by executing
the application, right?

59
00:03:52.566 --> 00:03:54.357
Resumability is basically saying,

60
00:03:54.357 --> 00:03:57.606
I don't need to recover it
by re-executing everything.

61
00:03:57.606 --> 00:04:02.393
I can recover it by just reading
a bunch of stuff out of the JSON.

62
00:04:02.393 --> 00:04:06.892
And because it's just reading out of the
JSON and JSON deserialization is extremely

63
00:04:06.892 --> 00:04:10.083
fast, the hydration cost
is extremely cheap, right?

64
00:04:10.083 --> 00:04:15.011
Sorry, the resumability cost is
very cheap because you can just

65
00:04:15.011 --> 00:04:17.210
wait until the user clicks.

66
00:04:17.210 --> 00:04:20.511
It's only at that point that you need
to actually deserialize the JSON.

67
00:04:20.511 --> 00:04:22.932
Because the JSON deserialization is very,
very quick.

68
00:04:24.932 --> 00:04:28.985
I think we have some numbers that
basically says that for the most

69
00:04:28.985 --> 00:04:34.169
applications you would build, the initial
JSON deserialization adds something

70
00:04:34.169 --> 00:04:39.822
like the 20 millisecond range on initial
click, which basically is nothing, right?

71
00:04:39.822 --> 00:04:41.739
But the real reason why it's so

72
00:04:41.739 --> 00:04:46.477
little is because you don't have to
execute any application code, right?

73
00:04:46.477 --> 00:04:49.528
You literally just have to
do JSON.parse nothing else.

74
00:04:49.528 --> 00:04:52.451
So the big difference
between hydration and

75
00:04:52.451 --> 00:04:57.112
resumability is that the resumability
doesn't require execution of

76
00:04:57.112 --> 00:05:02.715
the application code to continue where
I left off, and that's the key, right?

77
00:05:02.715 --> 00:05:06.501
Because if you don't require application
code to be present or executed,

78
00:05:06.501 --> 00:05:10.165
that's how you can get the real
improvements in speed, right?

79
00:05:10.165 --> 00:05:15.564
Because frameworks like solid are better
at executing code that improve that,

80
00:05:15.564 --> 00:05:18.225
we just don't even do it.

81
00:05:18.225 --> 00:05:22.386
And it's hard to make something
faster than doing nothing,

82
00:05:22.386 --> 00:05:26.745
it's the ultimate in speed,
right, you just don't do it.

83
00:05:26.745 --> 00:05:30.399
Okay, so the second bit here
is that a Qwik is progressive.

84
00:05:30.399 --> 00:05:32.839
And what we mean by this
is that normal frameworks,

85
00:05:32.839 --> 00:05:35.869
they basically download all the code and
execute all the code.

86
00:05:35.869 --> 00:05:40.700
And so the amount of JavaScript that's
required to run your site is essentially

87
00:05:40.700 --> 00:05:41.429
constant.

88
00:05:41.429 --> 00:05:45.153
Now this might go up if you've
done some lazy loading, but

89
00:05:45.153 --> 00:05:50.170
it's kinda tricky because lazy loading
in existing systems is only useful for

90
00:05:50.170 --> 00:05:53.687
components that are not
currently in the render tree.

91
00:05:55.317 --> 00:05:57.702
The moment the component
is in the render tree,

92
00:05:57.702 --> 00:06:01.327
if it's behind a laser loaded boundary,
it doesn't matter.

93
00:06:01.327 --> 00:06:04.400
The framework has to cross over
that lazy loaded boundary,

94
00:06:04.400 --> 00:06:07.867
it has to eagerly download,
it has to eagerly execute it.

95
00:06:07.867 --> 00:06:11.857
Just to figure out is,
are there any listeners over there, right?

96
00:06:11.857 --> 00:06:16.608
And so lazy loading in the current
frameworks is only useful for

97
00:06:16.608 --> 00:06:23.162
basically the other route, only for things
that are currently not in the render tree.

98
00:06:24.312 --> 00:06:28.568
The beauty of Qwik is that quick
can lazy load or more importantly,

99
00:06:28.568 --> 00:06:31.612
as I said,
execute only the code as you need it.

100
00:06:31.612 --> 00:06:36.542
And so the whole code download
in Qwik is very progressive.

101
00:06:36.542 --> 00:06:40.109
We start essentially at zero and
as you do interactions more and

102
00:06:40.109 --> 00:06:42.073
more code gets executed, right?

103
00:06:43.883 --> 00:06:47.197
Maybe this just says downloaded
JavaScript, but better way of thinking

104
00:06:47.197 --> 00:06:50.993
about it is the amount of code executed
rather than downloaded, right?.

105
00:06:50.993 --> 00:06:55.046
So the thing that you really
wanna look at is what percent

106
00:06:55.046 --> 00:06:57.903
of the application has been executed?

107
00:06:57.903 --> 00:06:59.910
So if you look at the code coverage,
right,

108
00:06:59.910 --> 00:07:02.301
that's the thing you really care about.

109
00:07:02.301 --> 00:07:06.676
And so in the case of existing systems,
there's a huge code coverage initial jump.

110
00:07:06.676 --> 00:07:11.140
Because you executed pretty much
the whole application in order to figure

111
00:07:11.140 --> 00:07:15.531
out where are the listeners, and
then it stays pretty stable.

112
00:07:15.531 --> 00:07:20.131
Whereas in a progressive system,
you basically start with nothing.

113
00:07:20.131 --> 00:07:23.435
And as you interact with the page
more things happen, right?

114
00:07:23.435 --> 00:07:28.172
So again, going back to the shopping cart
example, when I navigate to the page,

115
00:07:28.172 --> 00:07:30.145
no Javascript, right?

116
00:07:30.145 --> 00:07:33.650
It's only when I click on a button
that says Add to shopping cart,

117
00:07:33.650 --> 00:07:37.155
does that listener for
that button execute, right?

118
00:07:37.155 --> 00:07:40.641
And it is at the point of execution of
that listener, does the listener go and

119
00:07:40.641 --> 00:07:43.365
modify some kind of state of the system.

120
00:07:43.365 --> 00:07:46.990
And then modification of the state of the
system tells the framework that there is

121
00:07:46.990 --> 00:07:48.945
the reactivity graph.

122
00:07:48.945 --> 00:07:53.178
And the framework now knows, you modifying
this state of the system requires me to go

123
00:07:53.178 --> 00:07:56.065
re-render the shopping cart component.

124
00:07:56.065 --> 00:08:00.435
And so the shopping cart component
gets executed and re-rendered, right?

125
00:08:00.435 --> 00:08:04.167
And the fact that there were many many
components around you, that did other

126
00:08:04.167 --> 00:08:07.839
things like a complicated menu system
to check on the status of your thing or

127
00:08:07.839 --> 00:08:10.318
log out or go to preferences or whatever.

128
00:08:10.318 --> 00:08:15.258
None of that matters, because
the reactivity graph understands this.

129
00:08:15.258 --> 00:08:18.866
And that actually brings
up a very good point,

130
00:08:18.866 --> 00:08:23.134
which is that resumable
systems require reactivity.

131
00:08:24.704 --> 00:08:28.453
Because if you don't have reactivity,
then the moment I click on a button,

132
00:08:28.453 --> 00:08:31.733
the framework's like,
something changed, I have no idea what,

133
00:08:31.733 --> 00:08:35.634
let's just go to the root component and
re-render everything.

134
00:08:35.634 --> 00:08:37.766
Which is kinda what many frameworks do,
right?

135
00:08:37.766 --> 00:08:41.040
And if you do that,
then you just lost the battle.

136
00:08:41.040 --> 00:08:45.320
Right, because on first interaction you
have to download and execute everything.

137
00:08:45.320 --> 00:08:49.650
And so, reactivity is a strong
prerequisite for resumability.

138
00:08:49.650 --> 00:08:53.664
Because unless you are reactive unless
you understand the reactivity graph,

139
00:08:53.664 --> 00:08:57.140
you will end up just
re-executing everything.

140
00:08:57.140 --> 00:09:01.189
And that brings us to another next point
which is lead and there are Are already

141
00:09:01.189 --> 00:09:05.835
reactive systems out there, like,
for example, Solid Js and svelte.

142
00:09:05.835 --> 00:09:08.335
So can't they add reactivity?

143
00:09:08.335 --> 00:09:12.876
Not so simple, the problem is that
all reactive systems require that you

144
00:09:12.876 --> 00:09:17.275
execute the application once in
order to build the reactivity graph.

145
00:09:18.785 --> 00:09:19.482
And again,

146
00:09:19.482 --> 00:09:24.232
that kind of ruins your day from
the point of view of resumability, right?

147
00:09:24.232 --> 00:09:27.836
So the hard part is, or the tricky part
here is, one, you have to be reactive.

148
00:09:27.836 --> 00:09:32.378
And the second bit is that reactivity
graph must be serializable on

149
00:09:32.378 --> 00:09:37.162
the server so that when the system
wakes up on the client, it can reason

150
00:09:37.162 --> 00:09:42.591
about the application without
the application code being present.

151
00:09:42.591 --> 00:09:46.191
And that's the key point here,
you wanna reason about the system.

152
00:09:46.191 --> 00:09:49.631
You wanna know that changing
this requires me to render that.

153
00:09:50.671 --> 00:09:53.586
And you wanna have that information
without the application code

154
00:09:53.586 --> 00:09:54.331
being present.

155
00:09:55.591 --> 00:09:58.891
And that's the hard part, that's really
what the key to reasonability is.

156
00:09:58.891 --> 00:10:02.494
If you can do that, if you can reason
about the system without the application

157
00:10:02.494 --> 00:10:04.888
code being present,
then that's resumability.

158
00:10:06.058 --> 00:10:10.350
That allows you to be very surgical about
the kind of code that you download and

159
00:10:10.350 --> 00:10:10.952
execute.

160
00:10:10.952 --> 00:10:14.656
So that you can just, know that I have
to execute the button that clicks on

161
00:10:14.656 --> 00:10:18.140
the shopping cart and I know I have
to re-render the shopping cart.

162
00:10:18.140 --> 00:10:21.461
And all the other code on the page is
irrelevant I can ignore that code,

163
00:10:21.461 --> 00:10:24.216
I don't need to download it,
I don't need to execute it,

164
00:10:24.216 --> 00:10:26.707
I don't have to have a present.

165
00:10:26.707 --> 00:10:29.700
Okay, so
kind of the lay of the land here is that,

166
00:10:29.700 --> 00:10:33.432
in my opinion, there are two
kinds of frameworks out there.

167
00:10:33.432 --> 00:10:38.087
There are what I would call
replayable frameworks, right?

168
00:10:38.087 --> 00:10:41.531
And what I mean by replayable is that
in order for this frameworks to run,

169
00:10:41.531 --> 00:10:44.133
they have to replay the same
thing the server just did.

170
00:10:46.255 --> 00:10:48.705
And then there are resumable frameworks,

171
00:10:48.705 --> 00:10:52.865
which is a set of frameworks that can
continue where the server left off.

172
00:10:54.705 --> 00:10:58.912
And this continuing where the server
left off is really the magical bit that

173
00:10:58.912 --> 00:11:01.523
allows you to be performant, right?

174
00:11:01.523 --> 00:11:04.889
Because it is the thing that turns
the problem of, let me download the whole

175
00:11:04.889 --> 00:11:08.419
application, which is kind of unbound in
size as the application gets more and

176
00:11:08.419 --> 00:11:12.002
more complicated, like the amount of code
you download is bigger and bigger and

177
00:11:12.002 --> 00:11:13.293
bigger, right?

178
00:11:13.293 --> 00:11:17.532
Which is the reason why a Hello World
could be 100 on 100 on any platform, but

179
00:11:17.532 --> 00:11:22.565
once it hits the real world requirements,
nobody can get 100 out of 100.

180
00:11:22.565 --> 00:11:26.150
And a resumable system is that
basically you can think of

181
00:11:26.150 --> 00:11:29.047
it as turning everything into an island,
but

182
00:11:29.047 --> 00:11:34.195
they do it in a way where it doesn't
change your developer experience.

183
00:11:34.195 --> 00:11:37.845
You don't have to now think about it,
it's just how the system works.

184
00:11:39.165 --> 00:11:43.032
But there's another important thing about
turning everything to an island, which is,

185
00:11:43.032 --> 00:11:46.536
if you look at existing systems like
Astro, the moment an island gets hydrated,

186
00:11:46.536 --> 00:11:48.201
they have to hydrate the whole thing.

187
00:11:49.441 --> 00:11:54.086
Whereas Qwik, or these resumable systems
have this property that just because

188
00:11:54.086 --> 00:11:58.522
a component somewhere in the hierarchy
got re-rendered, it doesn't mean

189
00:11:58.522 --> 00:12:03.424
that the parent component or
the child component have to be rendered.

190
00:12:03.424 --> 00:12:04.931
And if they don't have to be rendered,

191
00:12:04.931 --> 00:12:07.454
it also means they don't have
to be downloaded, right?

192
00:12:07.454 --> 00:12:12.230
So the hard part here is to be able to
re-render a component in the middle of

193
00:12:12.230 --> 00:12:13.624
the hierarchy tree.

194
00:12:15.544 --> 00:12:18.154
And that's something that
most systems cannot do.

195
00:12:19.354 --> 00:12:23.396
Most systems have a very strict,
start at the top, go to the leaves,

196
00:12:23.396 --> 00:12:24.802
kind of a mental model.

197
00:12:24.802 --> 00:12:29.463
And yes, they can prune the tree a little
bit so they don't have to do the whole

198
00:12:29.463 --> 00:12:33.152
tree, but for the most part,
they have to do the whole tree.

