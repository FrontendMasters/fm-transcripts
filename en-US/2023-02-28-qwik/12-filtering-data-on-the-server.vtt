WEBVTT

1
00:00:00.290 --> 00:00:04.600
So one of the these you should
probably do is say, you know what?

2
00:00:04.600 --> 00:00:09.590
Really, we're only showing avatar, and
the person's text, and nothing else.

3
00:00:09.590 --> 00:00:13.660
But we are now sending the GitHub,
the Twitter, and everything else in there.

4
00:00:13.660 --> 00:00:17.718
So this is where you can get into kind
of this higher level optimization and

5
00:00:17.718 --> 00:00:21.750
realize like I'm probably sending
too much data to the client, right?

6
00:00:21.750 --> 00:00:26.829
Because there is nothing
that binds to the GitHub,

7
00:00:26.829 --> 00:00:30.855
and the Twitter, and the LinkedIn URL.

8
00:00:30.855 --> 00:00:35.584
But because it's a property on an object
and that object has also avatar.

9
00:00:35.584 --> 00:00:38.837
There's no choice for the system, but
to include the whole object, right?

10
00:00:38.837 --> 00:00:40.750
Does that make sense what I'm saying?

11
00:00:40.750 --> 00:00:45.116
&gt;&gt; Right, so maybe this is the scenario
where dataset is maybe smaller,

12
00:00:45.116 --> 00:00:48.020
maybe 100 records or something.

13
00:00:48.020 --> 00:00:52.149
But if you talk about the real data
where we are having thousands or

14
00:00:52.149 --> 00:00:53.550
millions of rows.

15
00:00:53.550 --> 00:00:57.937
&gt;&gt; Yes, so you have to implement some kind
of pagination, or something like that or

16
00:00:57.937 --> 00:00:59.562
lazy fetching of data, etc.

17
00:00:59.562 --> 00:01:02.411
That is no different In
other frameworks as well, so

18
00:01:02.411 --> 00:01:05.230
we can't do magic all the way through.

19
00:01:05.230 --> 00:01:09.248
But we did do a whole bunch of things
that I think are pretty useful out of

20
00:01:09.248 --> 00:01:10.280
the box, right?

21
00:01:10.280 --> 00:01:13.440
So many things that we could have
done out of the box we already did.

22
00:01:13.440 --> 00:01:16.199
So we are only sending
the data that you need.

23
00:01:16.199 --> 00:01:18.230
We're removing the data
that you don't need.

24
00:01:18.230 --> 00:01:19.649
We are pre-rendering on a server,

25
00:01:19.649 --> 00:01:22.840
we're sending only the JavaScript
that's actually needed, right?

26
00:01:22.840 --> 00:01:27.570
So in this particular case, known as
the amount of JavaScript increase,

27
00:01:27.570 --> 00:01:32.020
remember at the beginning,
we only had the filter and nothing else.

28
00:01:32.020 --> 00:01:35.770
Now, obviously, we send the filter,
we send the framework, but now,

29
00:01:35.770 --> 00:01:37.520
we also have to send the JSX.

30
00:01:37.520 --> 00:01:43.140
Now, we are like, yeah, because you
are messing with this filter over here.

31
00:01:43.140 --> 00:01:46.350
We have no choice, but
to start sending to JSX as well.

32
00:01:46.350 --> 00:01:50.834
And so we send the JSX, and
then there's some other files which should

33
00:01:50.834 --> 00:01:55.690
get tree shaken once the bundler
kind of runs through all of it.

34
00:01:55.690 --> 00:01:59.683
Actually, I think this is because
I need to restart the beat.

35
00:02:02.820 --> 00:02:09.429
Yeah, so the number of items gets longer,
because you had to do more things.

36
00:02:09.429 --> 00:02:13.860
But as a developer, you didn't have to
think about it, it was just automatic.

37
00:02:13.860 --> 00:02:17.267
And it's still only a tiny portion
of the overall application, right?

38
00:02:17.267 --> 00:02:19.840
The other thing to keep in
mind is this is dev mode.

39
00:02:19.840 --> 00:02:23.550
So every single fetch is a separate
thing and you could get into waterfall.

40
00:02:23.550 --> 00:02:27.360
In production, we're gonna talk about
later, we bundle things together.

41
00:02:27.360 --> 00:02:30.473
And so the waterfall effect won't happen,
and also if it did,

42
00:02:30.473 --> 00:02:32.551
the service worker will save you from it.

43
00:02:32.551 --> 00:02:34.467
Because it wouldn't be
a separate request and

44
00:02:34.467 --> 00:02:37.130
we're all to be prefetching becoming
out of the cache and so on.

45
00:02:37.130 --> 00:02:41.039
So there's a lot of other things to
discuss about how this thing works in

46
00:02:41.039 --> 00:02:42.560
production.

47
00:02:42.560 --> 00:02:46.918
But the thing to understand at this point
is that we can lazy fetch everything in

48
00:02:46.918 --> 00:02:48.450
a very fine grained thing.

49
00:02:49.510 --> 00:02:53.158
So for example, the layout which
we talked about earlier, right,

50
00:02:53.158 --> 00:02:56.330
this file, never made it to the client.

51
00:02:56.330 --> 00:03:00.417
And this file not only this file
never made it to the client.

52
00:03:00.417 --> 00:03:05.375
But also the QwikCityProvider which
is the QwikCity kinda the meta

53
00:03:05.375 --> 00:03:09.330
framework also never
made it to the client.

54
00:03:09.330 --> 00:03:14.224
So many things, many components that
are in here, declared and written,

55
00:03:14.224 --> 00:03:16.095
never made it to the client.

56
00:03:16.095 --> 00:03:17.520
And it's kind of the point and

57
00:03:17.520 --> 00:03:21.070
the beauty of Qwik is that as a developer
you don't have to think about it.

58
00:03:21.070 --> 00:03:23.771
I just write my applications
that I've always written and

59
00:03:23.771 --> 00:03:26.780
a whole bunch of stuff just
never shows up on the client.

60
00:03:26.780 --> 00:03:30.658
&gt;&gt; Picking up where we left off,
you were talking about,

61
00:03:30.658 --> 00:03:34.215
because you did a filter
that exposes the object.

62
00:03:34.215 --> 00:03:40.360
And then the object has to get
in line to the JSON, okay?

63
00:03:40.360 --> 00:03:44.795
And so what I wanna understand is,
what is the guard against that?

64
00:03:44.795 --> 00:03:50.590
Do you map, and then filter, or
is there another technique that you use?

65
00:03:50.590 --> 00:03:54.600
&gt;&gt; Right, so the problem here is,
let's look at myself over here, right?

66
00:03:54.600 --> 00:03:58.976
So I'm here,
I'm serializing the GitHub URL,

67
00:03:58.976 --> 00:04:04.645
the Twitter URL and the LinkedIn URL
even though it is not here.

68
00:04:04.645 --> 00:04:08.640
And the reason for
that is because the object is reachable.

69
00:04:08.640 --> 00:04:11.076
And so while it's not in the UI right now,

70
00:04:11.076 --> 00:04:15.340
maybe I could change something in
the UI and it becomes visible, right?

71
00:04:15.340 --> 00:04:19.900
So the system just cannot guess,
it knows that it's not used right now.

72
00:04:19.900 --> 00:04:23.050
But it could be used in the future
when you modify something, right?

73
00:04:23.050 --> 00:04:25.548
So as long as an object
is reachable somehow,

74
00:04:25.548 --> 00:04:27.800
that object has to be fully serialized.

75
00:04:28.850 --> 00:04:29.944
And so in this particular case,

76
00:04:29.944 --> 00:04:32.140
we have additional information
that the system doesn't have.

77
00:04:32.140 --> 00:04:37.001
And we know that our UI will never,
ever render the GitHub, for

78
00:04:37.001 --> 00:04:40.410
example, and so
we can do a smaller object.

79
00:04:41.900 --> 00:04:45.280
So let's go back to our index.tsx.

80
00:04:46.483 --> 00:04:49.270
And so right now,
we're just returning contacts.

81
00:04:49.270 --> 00:04:52.638
Let's just run a map through that.

82
00:04:53.867 --> 00:05:00.805
And so the map is, So

83
00:05:00.805 --> 00:05:05.060
what we need to do is,
we need the name, right?

84
00:05:05.060 --> 00:05:09.000
So it's a c.name, for the next step,
we're also gonna need the ID.

85
00:05:09.000 --> 00:05:15.662
So I'm just gonna include it here and
we also need the avatar, Right?

86
00:05:15.662 --> 00:05:20.510
Now, this is gonna come, it should
complain, because, I see the problems,

87
00:05:20.510 --> 00:05:21.638
the premise here.

88
00:05:24.615 --> 00:05:29.978
Now, this is gonna complain,
if I can get my semicolons right.

89
00:05:36.058 --> 00:05:37.690
Why is it not complaining TypeScript?

90
00:05:37.690 --> 00:05:39.320
Why are you not helping me?

91
00:05:39.320 --> 00:05:42.284
TypeScript should complain that
this is no longer a contact array,

92
00:05:42.284 --> 00:05:44.380
this is not a smaller thing.

93
00:05:44.380 --> 00:05:48.317
So let's make a smaller object,
not sure why the TypeScript is not.

94
00:06:02.604 --> 00:06:05.494
Okay, so I have a simpler object,
which is the,

95
00:06:05.494 --> 00:06:10.089
I'm gonna call it simple context and
I'm gonna have a simple contact array.

96
00:06:17.819 --> 00:06:18.941
What?

97
00:06:21.733 --> 00:06:23.514
Is not assignable?

98
00:06:26.079 --> 00:06:30.498
Because avatar is a question,
that's weird.

99
00:06:30.498 --> 00:06:33.260
Okay, the avatar is optional, okay.

100
00:06:33.260 --> 00:06:35.670
So now, it's a subset, right?

101
00:06:35.670 --> 00:06:37.418
And so now, the nice thing here,

102
00:06:37.418 --> 00:06:42.240
is notice that the endpoint knows that
it's of type simple contact, right?

103
00:06:42.240 --> 00:06:46.840
And when we get to here, we know that
we have array of simple contact, right?

104
00:06:46.840 --> 00:06:49.950
And so
we can't even access this particular data.

105
00:06:49.950 --> 00:06:54.750
So you're kind of getting type safety for
free, right?

106
00:06:54.750 --> 00:06:56.843
There's other libraries
out there like tRPC,

107
00:06:56.843 --> 00:06:59.600
which kinda give you this
in the existing systems.

108
00:06:59.600 --> 00:07:06.240
But it's kind of just for free in quick,
because of how everything just flows over.

109
00:07:06.240 --> 00:07:09.790
Now, because we filtered it out
at the server, if we go and

110
00:07:09.790 --> 00:07:14.150
see what's serialized, we see that
there's a lot less data, right?

111
00:07:14.150 --> 00:07:17.554
We see that we have our name and
we have our image URL, but

112
00:07:17.554 --> 00:07:20.610
we don't have anything else available,
right?

113
00:07:20.610 --> 00:07:23.140
So this is how you kind of deal with that.

