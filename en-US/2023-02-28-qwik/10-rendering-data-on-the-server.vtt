WEBVTT

1
00:00:00.000 --> 00:00:04.642
All right, so let's go back to index.ts.

2
00:00:04.642 --> 00:00:09.246
And let's say we want to
actually render something of use,

3
00:00:09.246 --> 00:00:11.741
right, like individual data.

4
00:00:11.741 --> 00:00:16.642
So we need to have a list
of things we wanna render.

5
00:00:16.642 --> 00:00:19.373
And so
I don't wanna set up a whole database, so

6
00:00:19.373 --> 00:00:23.279
I'm gonna cheat a little bit and
just set up a very simple database.

7
00:00:23.279 --> 00:00:25.225
So I'm gonna copy this file.

8
00:00:27.173 --> 00:00:33.463
So inside of the contacts, I will
create a new file called fake-db.ts.

9
00:00:33.463 --> 00:00:38.596
And inside of here, all I'm doing is
setting up a type saying a contact

10
00:00:38.596 --> 00:00:45.670
will have an ID, name, an avatar, a GitHub
URL, Twitter URL, and LinkedIn URL.

11
00:00:45.670 --> 00:00:52.988
&gt;&gt; And I'm setting up a few of these
items, so that we can have a list.

12
00:00:52.988 --> 00:00:56.262
And I'm gonna delete the rest, right?

13
00:00:56.262 --> 00:01:01.795
So all we have is basically mock data for
us to print.

14
00:01:01.795 --> 00:01:07.672
And so let's say, we want to use
this data to do the rendering.

15
00:01:07.672 --> 00:01:11.034
Now, the way you think about it is,
typically,

16
00:01:11.034 --> 00:01:14.970
what happens is inside of your component,
you will go and

17
00:01:14.970 --> 00:01:19.653
make like an XML HTTP request to kind
of fetch the data that you want.

18
00:01:19.653 --> 00:01:22.654
But that means that you
can't really do streaming.

19
00:01:22.654 --> 00:01:26.416
In an ideal world,
you want to be able to get a request.

20
00:01:26.416 --> 00:01:29.636
And as soon as you want to get a request,
you want to be able to go and

21
00:01:29.636 --> 00:01:31.230
start talking to the database.

22
00:01:31.230 --> 00:01:34.666
And then while the connections
database is happening,

23
00:01:34.666 --> 00:01:38.551
you want to start rendering as
much as you can without the data.

24
00:01:38.551 --> 00:01:41.142
And then once the data
shows up from the database,

25
00:01:41.142 --> 00:01:43.433
then you wanna render that particular bit.

26
00:01:43.433 --> 00:01:49.847
So if I put a HTML fetch operation inside
of this component, I will not execute

27
00:01:49.847 --> 00:01:55.882
that fetch until I get to that component
which might be way down the line.

28
00:01:55.882 --> 00:02:00.879
So what I really wanna do is I wanna
calls the fetching of the data

29
00:02:00.879 --> 00:02:03.157
as rigorously as possible.

30
00:02:03.157 --> 00:02:10.067
And so you can declare
a well-known function name on Git,

31
00:02:10.067 --> 00:02:14.023
which is of top RequestHandler.

32
00:02:14.023 --> 00:02:21.272
And let's just make this
function do nothing for now.

33
00:02:21.272 --> 00:02:23.100
And of course, we have to import it.

34
00:02:26.284 --> 00:02:28.338
And let's just say console.log.

35
00:02:32.571 --> 00:02:34.101
Okay, so we're gonna print this.

36
00:02:34.101 --> 00:02:37.787
Notice what's happening,
every time I refresh this page,

37
00:02:37.787 --> 00:02:40.255
I will get this call on a server, right?

38
00:02:40.255 --> 00:02:43.277
So this function here is
executing on a server.

39
00:02:43.277 --> 00:02:45.743
And it's always guaranteed
to execute on a server.

40
00:02:45.743 --> 00:02:50.727
And so the thing we would like to do here
is we would like to respond with the data.

41
00:02:50.727 --> 00:02:53.517
So we can just say, let's talk to a data.

42
00:02:53.517 --> 00:02:57.665
This function can be async, right?

43
00:02:57.665 --> 00:03:04.074
But let's go and talk to our, let's just
return the fake data from the database.

44
00:03:04.074 --> 00:03:07.614
What you would normally do here is you
would talk to an actual database or

45
00:03:07.614 --> 00:03:09.620
make an HTTP request to somewhere else.

46
00:03:09.620 --> 00:03:14.687
But this is happening on a server and
so you're basically fetching the data.

47
00:03:14.687 --> 00:03:23.043
So at this point,
this is where you would put your pretend.

48
00:03:23.043 --> 00:03:25.389
We are pitching data from the database,
I love autopilot, wow, it's amazing.

49
00:03:25.389 --> 00:03:28.529
Okay, so pretend we are fetching
data from the database here, right?

50
00:03:28.529 --> 00:03:31.505
So you do whatever you do to talk
to your database, fetch the data,

51
00:03:31.505 --> 00:03:33.702
this function can be async so
you can have await.

52
00:03:33.702 --> 00:03:37.129
And at some point,
you return the dataset here.

53
00:03:37.129 --> 00:03:41.463
There's a more advanced case where we
can start rendering without the data is

54
00:03:41.463 --> 00:03:44.940
actually returned, but
I'm not gonna go into that just yet.

55
00:03:44.940 --> 00:03:49.497
But basically, the mental model is as soon
as the request comes in, the thing you

56
00:03:49.497 --> 00:03:53.868
start doing is you start talking to
the database before you render anything.

57
00:03:53.868 --> 00:03:58.910
And then as soon as you return, which in
our case is gonna be pretty synchronous,

58
00:03:58.910 --> 00:04:01.520
we can start rendering the page, right?

59
00:04:01.520 --> 00:04:05.271
So we start at the root component and
start visiting all the layouts.

60
00:04:05.271 --> 00:04:09.157
And as we go through the layouts, we
eventually get into the index., over here.

61
00:04:09.157 --> 00:04:10.726
And so at this point,

62
00:04:10.726 --> 00:04:16.058
we would like to get hold of the data
that we've gotten on a server, yes?

63
00:04:16.058 --> 00:04:19.915
&gt;&gt; You're saying,
do we need to await contacts?

64
00:04:19.915 --> 00:04:24.725
&gt;&gt; You could, but in this case,
it's synchronized, you don't have to.

65
00:04:24.725 --> 00:04:27.509
But because it's a async method,
you could put awaits in there,

66
00:04:27.509 --> 00:04:28.834
you can put whatever you want.

67
00:04:28.834 --> 00:04:31.752
Actually, just to prove a point,
I can say,

68
00:04:35.944 --> 00:04:39.416
Right, we can do something like this.

69
00:04:39.416 --> 00:04:41.598
It doesn't really add anything in here.

70
00:04:41.598 --> 00:04:45.164
One thing that's actually kind of
different about Qwik is, with Qwik,

71
00:04:45.164 --> 00:04:48.447
you can use asynchronous methods and
awaits just about anywhere.

72
00:04:48.447 --> 00:04:52.780
A lot of existing frameworks basically
have all these restrictions on you cannot

73
00:04:52.780 --> 00:04:55.913
have await statements inside
of the rendering pipeline.

74
00:04:55.913 --> 00:04:58.304
In Qwik, you can put it in
just about anywhere, yes.

75
00:04:58.304 --> 00:05:02.867
&gt;&gt; What's the motivation behind
where you would want to include it?

76
00:05:02.867 --> 00:05:04.507
&gt;&gt; Include what?

77
00:05:04.507 --> 00:05:05.721
&gt;&gt; Async and await.

78
00:05:05.721 --> 00:05:07.354
&gt;&gt; Well, if you're talking to a database,

79
00:05:07.354 --> 00:05:09.228
it would be a asynchronous operation,
right?

80
00:05:09.228 --> 00:05:13.354
So I'm just pointing out the fact
that this method is asynchronous, so

81
00:05:13.354 --> 00:05:16.541
that you can do asynchronous
operations inside of it.

82
00:05:16.541 --> 00:05:17.152
&gt;&gt; Got you.

83
00:05:17.152 --> 00:05:20.201
&gt;&gt; In our case, we are not doing
asynchronous operation, right?

84
00:05:20.201 --> 00:05:24.035
But when you have a real database,
then it must be asynchronous, right?

85
00:05:24.035 --> 00:05:27.600
But it's very nature, and so
if you have a framework that doesn't allow

86
00:05:27.600 --> 00:05:30.476
asynchronicity at this location,
you'd be in trouble.

87
00:05:30.476 --> 00:05:33.033
Okay, so now we've gotten the data, and so

88
00:05:33.033 --> 00:05:35.948
we wanna actually use it
inside of the component.

89
00:05:35.948 --> 00:05:42.118
And so what we can do is we can say const,
we call this the endpoint.

90
00:05:42.118 --> 00:05:49.453
And we can say, useEndpoint, But before
we do that, let's give it some type.

91
00:05:49.453 --> 00:05:54.522
So what we're returning here is we're

92
00:05:54.522 --> 00:06:00.369
gonna be returning a contact array, right?

93
00:06:00.369 --> 00:06:06.073
So we're basically specifying it that the
thing we're returning is array of contact,

94
00:06:06.073 --> 00:06:06.622
right?

95
00:06:06.622 --> 00:06:11.654
And so this endpoint, and
then say, type of, oops,

96
00:06:17.450 --> 00:06:19.629
This is just complaining
that it's not used.

97
00:06:19.629 --> 00:06:24.538
And so we are basically connecting
this component's data to what came out

98
00:06:24.538 --> 00:06:25.574
of the server.

99
00:06:25.574 --> 00:06:27.389
And notice all of this is typesafe, right?

100
00:06:27.389 --> 00:06:32.400
So the fact that we declare to
this as a contract array, now,

101
00:06:32.400 --> 00:06:38.001
this endpoint knows that, okay,
I'm gonna be getting this,

102
00:06:38.001 --> 00:06:41.368
over here is a array of contact, right?

103
00:06:41.368 --> 00:06:47.126
Now, the thing to do, So

104
00:06:47.126 --> 00:06:51.911
we have a component called resource and
I'll explain this in a second.

105
00:06:51.911 --> 00:06:53.878
Let me just write it out first.

106
00:06:53.878 --> 00:06:59.709
So what resource does is basically says,
let me back up a second.

107
00:06:59.709 --> 00:07:04.426
What you get here, what the endpoint is,
is kind of like a promise.

108
00:07:04.426 --> 00:07:08.660
In other words, we're saying like, look,
at this point, we can give you this data,

109
00:07:08.660 --> 00:07:12.142
but we don't know whether the back
can actually return the data or not.

110
00:07:12.142 --> 00:07:15.827
And so think of this as a promise.

111
00:07:15.827 --> 00:07:19.499
And the reason we do this is because we
wanna be able to stream the output as soon

112
00:07:19.499 --> 00:07:20.585
as possible, right?

113
00:07:20.585 --> 00:07:24.920
So we wanna start streaming
everything in the UI that we can,

114
00:07:24.920 --> 00:07:28.752
before the data actually
returns from the database.

115
00:07:28.752 --> 00:07:33.653
And so in the UI, we basically say
resource, and this has to be imported.

116
00:07:38.454 --> 00:07:40.231
And so we say we have an endpoint.

117
00:07:42.922 --> 00:07:49.937
And so now, we can say onPending,
we wanna say something like loading.

118
00:07:49.937 --> 00:07:52.537
So this is the loading indicator.

119
00:07:52.537 --> 00:07:55.992
And onResolved,
we're gonna get a contacts.

120
00:07:55.992 --> 00:08:03.275
Let me just do it this way, okay,
and why is this complaining?

121
00:08:03.275 --> 00:08:05.965
Yeah, because this has to return a JSX.

122
00:08:05.965 --> 00:08:07.872
And so let's just return,

123
00:08:20.520 --> 00:08:23.559
Contacts, okay, right, I was right, sorry.

124
00:08:23.559 --> 00:08:28.007
Let's just do JSON here for
now, stringify.

125
00:08:31.852 --> 00:08:36.495
Okay, so request comes in for this URL,

126
00:08:36.495 --> 00:08:41.420
that triggers us talking to the database.

127
00:08:41.420 --> 00:08:45.619
Concurrently, while we're
talking to the database,

128
00:08:45.619 --> 00:08:51.168
we can then start fetching, start
streaming the response to the client.

129
00:08:51.168 --> 00:08:55.835
We can get as far as the resource is,
and the resource basically

130
00:08:55.835 --> 00:09:00.605
says in order to continue streaming,
you have a choice to make.

131
00:09:00.605 --> 00:09:04.550
Either render the pending or
render the actual data,

132
00:09:04.550 --> 00:09:06.837
just to kind of make the point.

133
00:09:06.837 --> 00:09:08.397
Let's see, this should, yep,

134
00:09:08.397 --> 00:09:11.808
see the data actually shows up inside
of the contact right here, right?

135
00:09:11.808 --> 00:09:15.032
So the resource has a choice.

136
00:09:15.032 --> 00:09:21.896
It either can say I'm still loading the
data, or this is what you need to render.

137
00:09:21.896 --> 00:09:26.034
Now, Qwik is kind of strange in that
it runs both on a server on the client.

138
00:09:26.034 --> 00:09:30.724
And so on a server,
we will never render the onPending, right?

139
00:09:30.724 --> 00:09:34.486
Because we know that we are on a server,
and so we know to just wait for

140
00:09:34.486 --> 00:09:37.338
the data to show up, and
then continue streaming.

141
00:09:37.338 --> 00:09:40.885
And so on a server,
the onPending gets ignored, and

142
00:09:40.885 --> 00:09:43.715
then only the onResolved gets executed.

143
00:09:43.715 --> 00:09:47.944
&gt;&gt; As you said, this onGet will not get
bundled into the client-side library,

144
00:09:47.944 --> 00:09:48.473
but how?

145
00:09:48.473 --> 00:09:55.498
Because is there any route in
the server site which will hit or how?

146
00:09:55.498 --> 00:09:59.039
&gt;&gt; So when we navigate to
this particular page, right?

147
00:09:59.039 --> 00:10:02.287
It hits this file,
which then executes this code,

148
00:10:02.287 --> 00:10:07.066
which then fetches the data,
which then starts rendering the component.

149
00:10:07.066 --> 00:10:09.706
The data is returned as a promise here.

150
00:10:09.706 --> 00:10:15.220
When the promise resolves,
then we execute the onResolved function.

151
00:10:15.220 --> 00:10:18.081
And, by the way,
all of this thing happens on a server.

152
00:10:18.081 --> 00:10:22.662
So if you look at the Network tab,
there is no JavaScript here.

153
00:10:22.662 --> 00:10:26.491
Actually, we added the Partytown,
but besides the Partytown,

154
00:10:26.491 --> 00:10:28.308
there's no JavaScript here.

155
00:10:28.308 --> 00:10:34.093
I'm gonna remove the Partytown just to
kind of keep things neat, if that's okay.

156
00:10:34.093 --> 00:10:35.361
Sorry, that was inside of route.

157
00:10:37.742 --> 00:10:43.667
&gt;&gt; So while deploying this app,
are we going to deploy in say NGINX?

158
00:10:43.667 --> 00:10:48.750
And then I mean, create some route or
then the bundler will,

159
00:10:48.750 --> 00:10:53.207
I mean, I'm not able to visualize the-
&gt;&gt; Yeah, so

160
00:10:53.207 --> 00:10:58.123
using the, here, I'm not gonna run this.

161
00:10:58.123 --> 00:11:03.946
But if you do NPM click add, it gives
you a list of things and you can for

162
00:11:03.946 --> 00:11:09.985
example add the Cloudflare,
Netlify resell, Node js, static site.

163
00:11:09.985 --> 00:11:15.834
So we have adapters, so that allows you
to deploy it into different places.

164
00:11:15.834 --> 00:11:20.188
Or you could write your own hand coded,
kind of answer to this particular thing.

165
00:11:20.188 --> 00:11:23.897
So when you're ready to deploy,
into one of these technologies,

166
00:11:23.897 --> 00:11:28.003
you could just do the integration, or
if you have a custom Node js system,

167
00:11:28.003 --> 00:11:31.403
you can do that too, or
you wanna run on a Deno, or whatever.

168
00:11:31.403 --> 00:11:36.262
So that's a deployment thing that
we can get into later once we're

169
00:11:36.262 --> 00:11:40.970
finished building the basic things,
but yes, good question.

170
00:11:40.970 --> 00:11:47.863
Okay, so we've got here, okay, let me run
the server again, the server is running.

171
00:11:47.863 --> 00:11:50.107
My only point here that I
wanna show is that, look,

172
00:11:50.107 --> 00:11:52.994
there's no JavaScript being
downloaded in here, everything.

173
00:11:52.994 --> 00:11:55.265
We build this page in JavaScript.

174
00:11:55.265 --> 00:11:58.509
We did everything we need to be
fetch the data, we inline it, etc.

175
00:11:58.509 --> 00:12:02.930
But nothing actually in terms of
JavaScript is being downloaded here

176
00:12:02.930 --> 00:12:08.203
because the system correctly identified
that none of this stuff is interactive.

177
00:12:08.203 --> 00:12:11.230
There is nothing to do here,
and so no JavaScript.

178
00:12:11.230 --> 00:12:15.262
If you look into the data that got
serialized, notice it's empty, right?

179
00:12:15.262 --> 00:12:20.396
We're not serializing any references,
any objects, or any subscriptions.

180
00:12:20.396 --> 00:12:23.612
So let's keep on going here.

181
00:12:23.612 --> 00:12:27.719
So let's do an ordered list here,
all right?

182
00:12:27.719 --> 00:12:32.405
And so let's wrap this
resources unordered list and

183
00:12:32.405 --> 00:12:37.422
this creates an li, but
we need one li per each contact.

184
00:12:37.422 --> 00:12:41.673
So at this point,
we wanna say something like contacts map.

185
00:12:41.673 --> 00:12:44.474
And then in here,
we wanna do something like that.

186
00:12:44.474 --> 00:12:49.277
And then in here, we wanna say contact,

187
00:12:49.277 --> 00:12:53.810
oops, I cannot type, contact name.

188
00:12:53.810 --> 00:12:58.166
Oops I don't know why it is, but
when other people are watching,

189
00:12:58.166 --> 00:12:59.934
my typing skills disappear.

190
00:12:59.934 --> 00:13:04.268
I don't know if other people
have the similar experience.

191
00:13:04.268 --> 00:13:07.963
Okay, why is this complaining?

192
00:13:07.963 --> 00:13:13.206
I see, the li should be here, on our list,

193
00:13:13.206 --> 00:13:18.465
and this, and, There we go,

194
00:13:18.465 --> 00:13:23.630
okay, so we start fetching immediately.

195
00:13:23.630 --> 00:13:26.261
We start streaming,
once we get to this point, hopefully,

196
00:13:26.261 --> 00:13:27.817
the database is already resolved.

197
00:13:27.817 --> 00:13:32.770
We continue streaming over here and
we iterate over individual items.

198
00:13:32.770 --> 00:13:35.921
And so now, we have our names, right?

199
00:13:35.921 --> 00:13:40.386
The way to think about it is,
this URL produces some data.

200
00:13:40.386 --> 00:13:43.080
In this case,
it produces a list of contacts.

201
00:13:43.080 --> 00:13:44.941
And there is two ways to look at the data.

202
00:13:44.941 --> 00:13:50.865
You can look at it as JSON or
you can look at it as HTML.

203
00:13:50.865 --> 00:13:53.208
It's the same data,
just different format, right?

204
00:13:53.208 --> 00:13:56.098
And so what's actually happening
is if you go to the Network tab.

205
00:13:56.098 --> 00:14:00.080
And if I go to All, and
I look at this thing,

206
00:14:00.080 --> 00:14:04.068
because this thing here says accept HTML,

207
00:14:04.068 --> 00:14:10.412
because it says accept HTML,
the system knows to send you the HTML.

208
00:14:10.412 --> 00:14:13.377
If this said, accept JSON,

209
00:14:13.377 --> 00:14:18.083
then assistant would
return to you the JSON.

210
00:14:18.083 --> 00:14:23.989
So the same URL is used both for rendering
HTML, as well as for fetching the data.

211
00:14:23.989 --> 00:14:27.053
&gt;&gt; So remember, intercept the header,
and then act accordingly.

212
00:14:27.053 --> 00:14:30.616
&gt;&gt; Yes, so that's exactly what happens.

213
00:14:30.616 --> 00:14:35.513
So if you're on a client and for
example, you need to refresh the data,

214
00:14:35.513 --> 00:14:39.022
the URL fetch you would do
is the same exact URL, but

215
00:14:39.022 --> 00:14:41.815
you just say I want it
in the form of JSON.

216
00:14:41.815 --> 00:14:44.442
And so you get back JSON rather than HTML.

