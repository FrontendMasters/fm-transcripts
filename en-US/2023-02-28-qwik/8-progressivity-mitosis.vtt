WEBVTT

1
00:00:00.000 --> 00:00:05.839
So, let me show you one more demo,
which I think is super cool.

2
00:00:05.839 --> 00:00:10.966
Okay, so, here is the todo app.

3
00:00:10.966 --> 00:00:12.586
And again, let's go to Network tab.

4
00:00:12.586 --> 00:00:14.593
So watch the Network tab in here.

5
00:00:14.593 --> 00:00:17.673
Let's add a new item.

6
00:00:17.673 --> 00:00:19.887
Notice JavaScript showed up.

7
00:00:19.887 --> 00:00:22.624
I hit enter, more JavaScript shows up.

8
00:00:22.624 --> 00:00:26.246
Let me check this,
maybe I'm gonna delete this one here and

9
00:00:26.246 --> 00:00:29.506
I noticed as I as I am interacting
with the code more and

10
00:00:29.506 --> 00:00:34.670
more JavaScript is showing up, and let's
just show active ones over here, right?

11
00:00:34.670 --> 00:00:37.594
And so, this is what I mean
by progressivity, right?

12
00:00:37.594 --> 00:00:39.791
As you interact more code shows up, so

13
00:00:39.791 --> 00:00:42.615
you can have as big of
a complication as you want.

14
00:00:42.615 --> 00:00:45.766
It's not like the user can interact
with everything all at once.

15
00:00:45.766 --> 00:00:49.624
There are choices that the user can
make and so the way to think about it is

16
00:00:49.624 --> 00:00:53.691
like you are streaming the application
rather than upfront downloading.

17
00:00:53.691 --> 00:00:56.720
Imagine watching a movie that would
require you to download the movie before

18
00:00:56.720 --> 00:00:58.906
you can watch it,
it would be a pretty bad experience.

19
00:00:58.906 --> 00:01:00.574
That's the world we're in, right,

20
00:01:00.574 --> 00:01:02.618
you download all the code
then we get to run it.

21
00:01:02.618 --> 00:01:06.417
So, now come to the world of streaming
where like as you are interacting or

22
00:01:06.417 --> 00:01:09.006
watching the movie,
more and more code shows up.

23
00:01:09.006 --> 00:01:13.614
Now for the application and it's a little
not ideal thing because the paths are,

24
00:01:13.614 --> 00:01:17.027
it's more of a tree structure
rather than a linear stream.

25
00:01:17.027 --> 00:01:20.867
But it's the same exact idea, which is,
you don't need to have all the code

26
00:01:20.867 --> 00:01:23.207
present before you can
interact with the app.

27
00:01:23.207 --> 00:01:27.702
And by doing that we significantly
lower the barrier of entry and

28
00:01:27.702 --> 00:01:32.198
we makes it basically any application
of any size will have a good

29
00:01:32.198 --> 00:01:36.945
startup performance because it's
not about how big the app is it's

30
00:01:36.945 --> 00:01:40.548
about what you actually need to get going,
right?

31
00:01:40.548 --> 00:01:45.760
And the answer over there should be pretty
close to zero and about every case.

32
00:01:45.760 --> 00:01:48.568
Now, yes.

33
00:01:48.568 --> 00:01:52.396
&gt;&gt; If you see other frameworks
like React or Angular and

34
00:01:52.396 --> 00:01:55.966
all they are very good
ecosystem of components.

35
00:01:55.966 --> 00:02:00.666
Then they come too Qwik, I mean,
if I need singlet, I need calendar,

36
00:02:00.666 --> 00:02:02.187
I need something tab.

37
00:02:02.187 --> 00:02:08.204
How the components leverage, do we need
to develop everything from scratch?

38
00:02:08.204 --> 00:02:09.991
&gt;&gt; Yes, so that's a good question,
what about components?

39
00:02:09.991 --> 00:02:13.269
So the short answer is,
Qwik is new, and so

40
00:02:13.269 --> 00:02:18.203
as a result, we will have a much
smaller community, all right?

41
00:02:18.203 --> 00:02:22.589
People are already building
these components out there, but

42
00:02:22.589 --> 00:02:26.391
we can actually run React
components inside of Qwik.

43
00:02:26.391 --> 00:02:31.326
So, react as a huge ecosystem right now
these components won't magically get all

44
00:02:31.326 --> 00:02:36.639
the properties of Qwik, right, but you can
turn them relatively easily into islands.

45
00:02:36.639 --> 00:02:39.671
So, you can think of it as
It's kind of like Astro,

46
00:02:39.671 --> 00:02:42.146
where you take your component and add it.

47
00:02:42.146 --> 00:02:46.783
We can lazy hydrate it, we can do all
of the tricks that you can think of for

48
00:02:46.783 --> 00:02:47.706
a component.

49
00:02:47.706 --> 00:02:50.336
So, if you need a calendar widget,
you can do React.

50
00:02:50.336 --> 00:02:53.307
Now, it will mean that you're including
that React in your app, right?

51
00:02:53.307 --> 00:02:56.023
And it will mean that widget
will have to hydrate.

52
00:02:56.023 --> 00:02:58.910
But maybe we can delay hydrate
it until it's visible or

53
00:02:58.910 --> 00:03:01.625
until you mouse hover on it or
something like that.

54
00:03:01.625 --> 00:03:05.119
So there are tricks you could do to
kind of improve the situation, but

55
00:03:05.119 --> 00:03:09.156
there is a bridge between Qwik and React
so that you can take React components and

56
00:03:09.156 --> 00:03:10.736
you can run them inside a Qwik.

57
00:03:10.736 --> 00:03:16.845
&gt;&gt; Yeah, so, we've explored
the adapter for React to Qwik.

58
00:03:16.845 --> 00:03:22.606
You also mentioned mitosis and what was
interesting about that is the idea that

59
00:03:22.606 --> 00:03:27.769
you could start with something
agnostic and generate all the things.

60
00:03:27.769 --> 00:03:28.959
Well, what does that look like?

61
00:03:28.959 --> 00:03:33.624
And secondly, does it generate
Qwik code among the other things?

62
00:03:33.624 --> 00:03:37.218
&gt;&gt; Yes, so
you're asking what does mitosis look like?

63
00:03:37.218 --> 00:03:40.207
Okay, so, you can check it out yourself,

64
00:03:40.207 --> 00:03:45.033
gonna mitosis that build a URL,
let me make the font a little bigger.

65
00:03:45.033 --> 00:03:50.335
So, here is a component like a demo
component this is written in mitosis,

66
00:03:50.335 --> 00:03:54.012
which is react ish like,
not quite the same thing,

67
00:03:54.012 --> 00:03:58.049
but this is kind of like
the pseudo language so to speak.

68
00:03:58.049 --> 00:04:00.828
And then this is the language can
be converted to, for example,

69
00:04:00.828 --> 00:04:03.102
this is what the equivalent
would look like in view.

70
00:04:03.102 --> 00:04:04.398
And notice if you look at the view,

71
00:04:04.398 --> 00:04:06.384
there's nothing here that
says anything mitosis.

72
00:04:06.384 --> 00:04:10.034
So this is a idiomatic view code, right?

73
00:04:10.034 --> 00:04:12.760
And this is idiomatic React application.

74
00:04:12.760 --> 00:04:16.654
This is an idiomatic Qwik application,
Qwik component and so on and so

75
00:04:16.654 --> 00:04:17.582
forth, right?

76
00:04:17.582 --> 00:04:19.363
And Angular, Svelte and
so on and so forth.

77
00:04:19.363 --> 00:04:23.493
So, you can write your components,
like if you have a design system,

78
00:04:23.493 --> 00:04:28.393
you can write it once in mitosis, and then
it will generate all the different source

79
00:04:28.393 --> 00:04:30.852
codes for all the different frameworks.

80
00:04:30.852 --> 00:04:32.856
So that it's native to that thing.

81
00:04:32.856 --> 00:04:36.601
It's not a web component, it's wrapped,
it's native to that particular framework.

82
00:04:36.601 --> 00:04:40.004
&gt;&gt; So then could you go react to mitosis?

83
00:04:40.004 --> 00:04:42.950
&gt;&gt; And that's much more complicated.

84
00:04:42.950 --> 00:04:44.914
The answer is not so simple.

85
00:04:44.914 --> 00:04:49.302
The reason for that is that this here,
even though it looks like JavaScript is

86
00:04:49.302 --> 00:04:52.220
actually declarative,
it's restricted thing.

87
00:04:52.220 --> 00:04:54.560
Whereas in React,
you can do all kinds of things and

88
00:04:54.560 --> 00:04:56.144
we wouldn't know how to parse it.

89
00:04:56.144 --> 00:05:00.458
We wouldn't know what the semantic
meaning behind the thing that you did is.

90
00:05:00.458 --> 00:05:04.226
So, there is a restricted state here now.

91
00:05:04.226 --> 00:05:06.458
The JSX looks very much like React.

92
00:05:06.458 --> 00:05:08.695
And this mitosis was inspired by React, so

93
00:05:08.695 --> 00:05:11.439
it is very close to what
a React code would look like.

94
00:05:11.439 --> 00:05:14.192
But we had somebody actually
wrote a Svelte front end.

95
00:05:14.192 --> 00:05:16.410
So, the Svelte input again,

96
00:05:16.410 --> 00:05:21.575
restricted Svelte would be written here,
it's called sveltoses.

97
00:05:21.575 --> 00:05:24.184
And then the other outputs are over there.

98
00:05:24.184 --> 00:05:29.832
So, you can think of this as the front
end input that's highly restricted.

99
00:05:29.832 --> 00:05:33.907
You can do anything you want in here,
there's certain rules you have to follow.

100
00:05:33.907 --> 00:05:35.839
But if you follow those rules,

101
00:05:35.839 --> 00:05:40.308
then we will give you an output on
the other side which is in components.

102
00:05:40.308 --> 00:05:44.747
And the restrictions of these rules is
basically what prevents us from just

103
00:05:44.747 --> 00:05:45.945
taking anything and

104
00:05:45.945 --> 00:05:50.390
be able to ingest it because we just
don't know what the meaning of that is.

105
00:05:50.390 --> 00:05:54.827
We had this demo of the todos and
I wanted to explain reasonability.

106
00:05:54.827 --> 00:05:57.977
So, I can click on this HTML and
if I go to console,

107
00:05:57.977 --> 00:06:03.159
you know the trick that dollar zero gives
you basically the HTML element, right?

108
00:06:03.159 --> 00:06:07.271
So, Qwik because it's a container,

109
00:06:07.271 --> 00:06:10.964
dot I can pause this.

110
00:06:10.964 --> 00:06:16.872
And what pausing will do is that if
you notice inside of the script tags,

111
00:06:16.872 --> 00:06:20.225
if I hit Enter, it's not gonna show up.

112
00:06:20.225 --> 00:06:23.336
So, there is a new script tag that
I inserted, this one right here.

113
00:06:23.336 --> 00:06:27.093
This is the state of the system
that gets serialized in here.

114
00:06:27.093 --> 00:06:31.152
What I can do here is I can go and
copy the outer HTML.

115
00:06:31.152 --> 00:06:32.590
This is a source of truth.

116
00:06:32.590 --> 00:06:34.014
And let's open up Safari.

117
00:06:36.029 --> 00:06:38.635
And I don't know how to use Safari,
so bear with me here.

118
00:06:38.635 --> 00:06:42.723
So, if I go to local host,
I need to have the same URL port.

119
00:06:42.723 --> 00:06:46.285
So, let's just go to this home
page here that has no JavaScript.

120
00:06:46.285 --> 00:06:49.280
And if I go here, and then can I edit?

121
00:06:50.495 --> 00:06:55.455
And if I paste my app into it,
the app shows up, right?

122
00:06:55.455 --> 00:06:58.572
That in itself is not impressive
because it's just HTML.

123
00:06:58.572 --> 00:07:01.981
But the question is,
will the app be interactive and

124
00:07:01.981 --> 00:07:03.851
will it remember its state?

125
00:07:03.851 --> 00:07:06.845
Remember there was an item that I've
hidden, so it only shows active.

126
00:07:06.845 --> 00:07:10.616
If I click all here, will something
happen and will the state be remembered?

127
00:07:10.616 --> 00:07:16.235
So, if I click all, sorry.

128
00:07:16.235 --> 00:07:19.233
When you paste HTML,
it doesn't execute the Qwik loader.

129
00:07:19.233 --> 00:07:21.148
So, there's the Qwik loader right here.

130
00:07:21.148 --> 00:07:24.791
So how do I do console?

131
00:07:24.791 --> 00:07:32.334
I need to .content, text content?

132
00:07:32.334 --> 00:07:38.121
Okay, so this piece of JavaScript, which
is the Qwik loader, has to get executed.

133
00:07:38.121 --> 00:07:39.824
That's the boot up.

134
00:07:39.824 --> 00:07:45.434
And now I can click on the O,
it's still not doing, what's going on?

135
00:07:49.154 --> 00:07:53.197
Okay, well, this demo is not going as
well as it should have been going.

136
00:07:53.197 --> 00:07:54.339
Let me try this.

137
00:07:54.339 --> 00:07:58.283
Let me do the counter cuz that one
already has the Qwik loader loaded.

138
00:07:58.283 --> 00:08:02.840
It's an if I go edit html and

139
00:08:05.937 --> 00:08:08.756
Okay, paste it here.

140
00:08:08.756 --> 00:08:11.110
Now it works and it shows up, right.

141
00:08:11.110 --> 00:08:15.697
So now, you can see that the state of the
system like this profit was hidden, right,

142
00:08:15.697 --> 00:08:18.602
it wasn't an HTML, and
it knew that it needed it and so

143
00:08:18.602 --> 00:08:20.619
will serialize inside of code JSON.

144
00:08:20.619 --> 00:08:27.031
So, this is what I mean by reasonability
is kinda like, the virtual machines.

145
00:08:27.031 --> 00:08:32.745
You can at any time, freeze your
application, serialize everything and

146
00:08:32.745 --> 00:08:36.999
the whole application is
fully contained in the HTML.

147
00:08:36.999 --> 00:08:38.407
But not really the whole of it, right?

148
00:08:38.407 --> 00:08:42.486
Because the JavaScript is
pointing to somewhere else.

149
00:08:42.486 --> 00:08:46.806
That's why I had to make sure
that the URL was the same, so

150
00:08:46.806 --> 00:08:49.601
you could download the JavaScript.

151
00:08:49.601 --> 00:08:54.201
All of the other bits are in the HTML, and
this is what makes it so powerful, because

152
00:08:54.201 --> 00:08:58.300
this is literally how the application
gets from the server to the client.

153
00:08:58.300 --> 00:09:01.728
It runs on a server, we pause it,
we move it to the client and

154
00:09:01.728 --> 00:09:03.520
we continue where we left off.

