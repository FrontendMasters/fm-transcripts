WEBVTT

1
00:00:00.337 --> 00:00:02.468
How did we build websites in the past?

2
00:00:02.468 --> 00:00:04.668
And I think this is kind
of a good history lesson.

3
00:00:04.668 --> 00:00:09.758
So in the past, we build websites by using
a server side technology like PHP rails.

4
00:00:09.758 --> 00:00:11.954
I'm not picking on any of these, right?

5
00:00:11.954 --> 00:00:13.951
There's a lot more out there.

6
00:00:13.951 --> 00:00:18.790
I'm just saying we use something other
than JavaScript to render on a server.

7
00:00:18.790 --> 00:00:21.107
And then this actually turns
out to be very performant,

8
00:00:21.107 --> 00:00:22.990
because the browser just
had to show up HTML.

9
00:00:22.990 --> 00:00:27.181
There was no JavaScript, and so
this is pinnacle of performance, right?

10
00:00:27.181 --> 00:00:29.871
The problem is it's not interactive.

11
00:00:29.871 --> 00:00:34.943
And so people introduced, basically,
jQuery to add interactivity.

12
00:00:34.943 --> 00:00:38.682
And this actually was a good
solution in terms of performance and

13
00:00:38.682 --> 00:00:41.175
the user experience, cuz it was fast, but

14
00:00:41.175 --> 00:00:44.373
it was not very good in terms
of developer experience.

15
00:00:44.373 --> 00:00:47.996
And the problem here is that
it's very error prone and

16
00:00:47.996 --> 00:00:51.310
you basically have to
know multiple languages.

17
00:00:51.310 --> 00:00:53.081
And not only is it error prone, but

18
00:00:53.081 --> 00:00:56.699
you actually have to oftentimes
write the same thing twice.

19
00:00:56.699 --> 00:01:00.367
So if you go to a page that shows
a list of contacts, the PHP or whatever

20
00:01:00.367 --> 00:01:04.498
the server side technology you have has
to know how to render those contacts.

21
00:01:04.498 --> 00:01:07.465
But then in the client,
you wanna be able to add a contact.

22
00:01:07.465 --> 00:01:10.716
And now you have a problem of, well,
now I have to do the code twice,

23
00:01:10.716 --> 00:01:13.913
once on a server, so that I can
render the contacts initially, and

24
00:01:13.913 --> 00:01:17.197
then in the client, so that the jQuery
can add a contact on a client.

25
00:01:17.197 --> 00:01:20.369
So now I am basically doing
the same thing twice.

26
00:01:20.369 --> 00:01:24.272
I have to do validation twice,
I have to do rendering twice,

27
00:01:24.272 --> 00:01:28.110
I have to do data binding twice,
and so this is error prone.

28
00:01:28.110 --> 00:01:33.569
And so with current set of technologies,
it was all about developer experience.

29
00:01:33.569 --> 00:01:35.061
Like, let's improve
the developer experience.

30
00:01:35.061 --> 00:01:39.615
And so the approach we took with
all of these frameworks, and

31
00:01:39.615 --> 00:01:44.794
Angular was one of the first ones,
I think, was the idea that you have

32
00:01:44.794 --> 00:01:50.082
a unified model, meaning,
both server and a client are same code.

33
00:01:50.082 --> 00:01:52.808
Actually, all these frameworks
basically started with saying,

34
00:01:52.808 --> 00:01:54.520
let's just do everything on the client.

35
00:01:54.520 --> 00:01:57.522
Forget the server,
let's just do everything on the client.

36
00:01:57.522 --> 00:02:01.568
And then as an afterthought,
they said, well, there's a problem,

37
00:02:01.568 --> 00:02:03.365
can we do some of it on a server?

38
00:02:03.365 --> 00:02:09.088
And because this was an afterthought,
it never really lived up to its potential.

39
00:02:10.088 --> 00:02:13.497
But the nice thing about this particular
world is that it's all just JavaScript.

40
00:02:13.497 --> 00:02:18.134
You have no code duplications, there's
a unified mental model, everything is in

41
00:02:18.134 --> 00:02:22.852
a single framework, but you have this
problem, that your application runs twice.

42
00:02:23.942 --> 00:02:28.430
It runs once on a server to
generate the initial HTML, and

43
00:02:28.430 --> 00:02:30.872
then it runs again on a client.

44
00:02:30.872 --> 00:02:34.993
And if you think about it, the HTML that
was rendered on a server, that HTML can

45
00:02:34.993 --> 00:02:39.372
be thrown away because when a client
reruns, it will rebuild everything, right?

46
00:02:39.372 --> 00:02:43.391
The HTML that came from
the server was only there for

47
00:02:43.391 --> 00:02:48.924
you to kind of look at something while
the page is kind of being loaded.

48
00:02:48.924 --> 00:02:51.054
And so we're kind of having this,
basically,

49
00:02:51.054 --> 00:02:53.515
the problem with this
particular world is hydration.

50
00:02:55.075 --> 00:02:59.823
Because in order to become interactive,
we need to run hydration, and

51
00:02:59.823 --> 00:03:04.904
hydration is basically rerunning
the whole website from scratch, right?

52
00:03:04.904 --> 00:03:10.472
Yeah, we can reuse DOM nodes, but
it turns out that if you deleted the HTML,

53
00:03:10.472 --> 00:03:13.396
the framework was just recreated.

54
00:03:13.396 --> 00:03:17.528
So yes, it can sort of reuse it, so
we use fancy word like reconciliation.

55
00:03:17.528 --> 00:03:20.008
But at the end of the day,
the DOM nodes are unnecessary.

56
00:03:20.008 --> 00:03:22.714
If they're not there the framework just
recreates everything from scratch.

57
00:03:22.714 --> 00:03:26.822
And so, the good mental model is
basically, yes, HTML showed up,

58
00:03:26.822 --> 00:03:31.597
we're gonna throw it away and we're
gonna rebuild everything in the client.

59
00:03:31.597 --> 00:03:32.960
And that's exactly what's happening.

60
00:03:34.953 --> 00:03:36.635
So what does the future hold?

61
00:03:36.635 --> 00:03:41.393
And so, this is where, I think we
have a good developer experience, but

62
00:03:41.393 --> 00:03:44.995
we need to get better at the performance.

63
00:03:44.995 --> 00:03:49.771
And so, the future, in my opinion,
is all about keeping the DX we have, but

64
00:03:49.771 --> 00:03:51.872
adding a good performance to it.

65
00:03:51.872 --> 00:03:55.085
And again, when I talk about performance,
I don't mean the runtime performance.

66
00:03:55.085 --> 00:03:57.871
I don't mean the performance
in a sense of the solid JS,

67
00:03:57.871 --> 00:04:00.376
which is one of the fastest
frameworks out there.

68
00:04:00.376 --> 00:04:02.818
I'm talking about a startup performance.

69
00:04:02.818 --> 00:04:06.456
I'm specifically talking about,
how long does it take for

70
00:04:06.456 --> 00:04:10.091
a user to click on a link and
then seeing what they wanna see,

71
00:04:10.091 --> 00:04:14.630
the site that they wanna see, and
being able to interact with it, right?

72
00:04:14.630 --> 00:04:19.117
The problem we have is not how long
does it take to add a thousand items in

73
00:04:19.117 --> 00:04:20.957
the shopping cart, right?

74
00:04:20.957 --> 00:04:23.475
Because most of the benchmarks are like,
add 1 ,000 items into something.

75
00:04:23.475 --> 00:04:24.671
That's not our problem.

76
00:04:24.671 --> 00:04:25.895
The problem is,

77
00:04:25.895 --> 00:04:31.324
we can't click on that button to add
a single item into the shopping cart.

78
00:04:31.324 --> 00:04:35.081
Okay, so there's a couple of frameworks
out in this category that are worth

79
00:04:35.081 --> 00:04:36.591
talking about.

80
00:04:36.591 --> 00:04:40.832
And obviously QUIC, which is kind of
what we're talking about today, but

81
00:04:40.832 --> 00:04:43.391
turns out eBay has
a framework called Marco,

82
00:04:43.391 --> 00:04:47.523
which they have not done very good job
of kind of telling the world about.

83
00:04:47.523 --> 00:04:53.238
But Marco version 6, which is just about
to be released, apparently has hydration.

84
00:04:53.238 --> 00:04:56.073
I've spent a lot of time chatting
with my friends at eBay, and

85
00:04:56.073 --> 00:04:59.141
they're doing a lot of cool stuff
in that particular department.

86
00:04:59.141 --> 00:05:04.978
And they are approaching the hydration
story that the QUIC has as well.

87
00:05:04.978 --> 00:05:06.746
And there's also Google Ways,

88
00:05:06.746 --> 00:05:09.898
Google Ways is an internal
framework that is not public.

89
00:05:09.898 --> 00:05:13.268
&gt;&gt; Is this form a first visit perspective?

90
00:05:13.268 --> 00:05:14.373
&gt;&gt; Form of what?

91
00:05:14.373 --> 00:05:18.346
&gt;&gt; First visit perspective,
as far as the boot up time.

92
00:05:18.346 --> 00:05:21.880
&gt;&gt; So, everything we talked about for
startup performance is both for

93
00:05:21.880 --> 00:05:24.794
the first time visit and
the subsequent visit, right?

94
00:05:24.794 --> 00:05:27.963
So, the first time you visit,
obviously, it's a little slower,

95
00:05:27.963 --> 00:05:30.661
because you have to
download the JavaScript.

96
00:05:30.661 --> 00:05:33.748
But the issue here isn't
the download of JavaScript,

97
00:05:33.748 --> 00:05:36.913
the issue here is the execution
of JavaScript, right?

98
00:05:36.913 --> 00:05:41.446
So while the cost of the Javascript
download might be on the order of,

99
00:05:41.446 --> 00:05:45.946
I don't know, a second or two,
I'm just making up a number.

100
00:05:45.946 --> 00:05:48.973
The execution might be on
the order of multiple seconds,

101
00:05:48.973 --> 00:05:50.682
like ten plus seconds, right?

102
00:05:50.682 --> 00:05:54.604
So even if you do a subsequent visit and,
of course, this time you can skip

103
00:05:54.604 --> 00:05:59.366
the download of Javascript, it's not
gonna make a huge performance impact.

104
00:05:59.366 --> 00:06:04.387
&gt;&gt; And then they're asking about, what
about frameworks like Astro and Eleventy.

105
00:06:04.387 --> 00:06:07.324
&gt;&gt; Yes, so those are good questions, what
about frameworks like Astro and Eleventy?

106
00:06:07.324 --> 00:06:12.136
So, frameworks like Astro and
Eleventy basically say

107
00:06:12.136 --> 00:06:17.270
they wanna move away from
JavaScript as much as possible.

108
00:06:17.270 --> 00:06:21.262
And their point is,
how about we just don't have JavaScript.

109
00:06:21.262 --> 00:06:24.735
So they're kinda going back in past.

110
00:06:24.735 --> 00:06:27.379
And the point I'm trying to
make with QUIC is that like,

111
00:06:27.379 --> 00:06:30.136
I don't wanna give up on
the amount of JavaScript we have,

112
00:06:30.136 --> 00:06:34.542
we need that JavaScript, but we just
don't wanna download it all up front.

113
00:06:34.542 --> 00:06:39.837
So the way Astra, for example, deals with
it, is they break the application into,

114
00:06:39.837 --> 00:06:43.803
Those islands, and
then they can lazy hydrate those islands.

115
00:06:43.803 --> 00:06:48.335
So with Astro, the debate isn't about
the amount of JavaScript that needs to get

116
00:06:48.335 --> 00:06:53.403
downloaded, the debate is about like, when
exactly am I doing the hydration work?

117
00:06:53.403 --> 00:06:58.196
So you're pushing the hydration
work into later point in time

118
00:06:58.196 --> 00:07:01.245
instead of doing everything up front.

119
00:07:01.245 --> 00:07:06.158
So a framework like Astro, the debate
is about not if I'm gonna do hydration,

120
00:07:06.158 --> 00:07:09.285
it's when am I gonna do the hydration,
right?

121
00:07:09.285 --> 00:07:09.786
That's one point.

122
00:07:09.786 --> 00:07:14.461
The second point with frameworks like
Astro is that, because they break up your

123
00:07:14.461 --> 00:07:19.513
app into small islands, these islands
are essentially independent applications.

124
00:07:19.513 --> 00:07:23.584
And now you have to have an inter-island
communication problem that you have

125
00:07:23.584 --> 00:07:24.155
to solve.

126
00:07:24.155 --> 00:07:26.978
And so, I don't wanna think
of my application as many,

127
00:07:26.978 --> 00:07:30.943
many small applications, I really wanna
just think of it as an application and

128
00:07:30.943 --> 00:07:33.453
I want to just be able
to do all of this stuff.

129
00:07:33.453 --> 00:07:34.649
The other point is, with Astro,

130
00:07:34.649 --> 00:07:37.479
you actually have to set up your islands
by yourself and kind of do everything.

131
00:07:37.479 --> 00:07:42.385
So it is definitely a step in the right
direction, but I don't think it addresses

132
00:07:42.385 --> 00:07:47.561
the application problem space that
we're trying to address over here.

133
00:07:47.561 --> 00:07:51.018
And I wanna point out that we are not
the first ones to think about this problem

134
00:07:51.018 --> 00:07:53.937
this particular way,
there were others before us, right, and

135
00:07:53.937 --> 00:07:55.256
I wanna give credit to them.

136
00:07:55.256 --> 00:07:57.991
And the biggest one is Google Wits.

137
00:07:57.991 --> 00:07:59.802
So every time you go to Google Search,

138
00:07:59.802 --> 00:08:02.921
the Google Search page is actually
running on top of Google Wits.

139
00:08:02.921 --> 00:08:05.986
So the framework that the Google search
page is built with is Google Wit.

140
00:08:07.016 --> 00:08:09.396
And part of was our open source.

141
00:08:09.396 --> 00:08:12.576
So for example, one part is called
JS Action, that thing is open source.

142
00:08:12.576 --> 00:08:16.191
There is a,
templating system is open source, so

143
00:08:16.191 --> 00:08:20.923
it's not all of it is proprietary,
some of it Is open source, but

144
00:08:20.923 --> 00:08:24.469
kind of the most bits
are proprietary to Google.

145
00:08:24.469 --> 00:08:29.297
Now what's interesting about Google Wits,
is that if you go to the search page,

146
00:08:29.297 --> 00:08:34.177
first of all, you will all agree that
Google is amazingly fast, right?

147
00:08:34.177 --> 00:08:38.210
Second thing is, you cannot get into
a situation where you wanna interact with

148
00:08:38.210 --> 00:08:41.324
Google search which
page before it's ready?

149
00:08:41.324 --> 00:08:43.044
Like that just doesn't happen.

150
00:08:43.044 --> 00:08:46.230
And the last thing I want to point out is
like people often says like, Yeah, but

151
00:08:46.230 --> 00:08:47.304
it's like a search page.

152
00:08:47.304 --> 00:08:48.204
It's like simple.

153
00:08:48.204 --> 00:08:49.684
I'm like, have you looked at that thing?

154
00:08:49.684 --> 00:08:54.804
Like if you put in like, a plus b
equals seven like it shows you a graph.

155
00:08:54.804 --> 00:08:58.249
You know, if you search for a movie,
it like shows you a movie listing and

156
00:08:58.249 --> 00:09:00.765
then you can scroll Through the carousel.

157
00:09:00.765 --> 00:09:03.025
Like, there's different queries.

158
00:09:03.025 --> 00:09:04.150
If you search for an address,

159
00:09:04.150 --> 00:09:06.895
there's a map that's actually
scrollable in there, right?

160
00:09:06.895 --> 00:09:11.227
There are pretty complicated
use cases hidden inside of

161
00:09:11.227 --> 00:09:15.305
the Google search thing
that is powered by Wiz.

162
00:09:15.305 --> 00:09:19.205
Now, Wiz was built about 10 years ago.

163
00:09:19.205 --> 00:09:20.172
And.

164
00:09:20.172 --> 00:09:25.425
The ideas are kind of similar, but the way
it actually works is quite different and

165
00:09:25.425 --> 00:09:29.688
one of the things about Wiz is that
because of historical reasons,

166
00:09:29.688 --> 00:09:33.189
because we built ten years ago,
or about a decade ago,

167
00:09:33.189 --> 00:09:36.942
the developer experience is not the best,
right?

168
00:09:36.942 --> 00:09:39.650
But the end user experience is amazing.

169
00:09:39.650 --> 00:09:40.230
Right.

170
00:09:40.230 --> 00:09:43.010
And so the thing that we want
really is how do we marry this?

171
00:09:43.010 --> 00:09:47.067
How do we have an amazing developer
experience that we're so used to,

172
00:09:47.067 --> 00:09:50.050
but how do we have this
performance that we want?

173
00:09:50.050 --> 00:09:53.364
Right?
And so my argument here is that the future

174
00:09:53.364 --> 00:09:57.375
is about having both a good dx and
good performance.

175
00:09:57.375 --> 00:10:00.213
And so how do we merge basically,
the rendering and

176
00:10:00.213 --> 00:10:02.854
inter Interactivity into
a single framework,

177
00:10:02.854 --> 00:10:07.027
which is the DX that we have before and
have a unified mental model, right?

178
00:10:07.027 --> 00:10:10.798
Which we talked about about how
there's one state and all the parts,

179
00:10:10.798 --> 00:10:12.759
but kind of we only run the app once.

180
00:10:12.759 --> 00:10:15.852
We don't have the problem that when
we show up to a particular website,

181
00:10:15.852 --> 00:10:18.379
there's this huge amount of
JavaScript we have to execute

182
00:10:18.379 --> 00:10:21.409
because a huge amount of JavaScript Is
what's killing us, right?

183
00:10:21.409 --> 00:10:23.620
And and the problem is you can't optimize.

184
00:10:23.620 --> 00:10:26.141
You can't make it to execute
the JavaScript faster,

185
00:10:26.141 --> 00:10:28.349
that's not a thing we can do, yes.

186
00:10:28.349 --> 00:10:32.378
&gt;&gt; Yes, I have just one question,
how do you see the MFA architecture,

187
00:10:32.378 --> 00:10:34.131
which is in trend these days?

188
00:10:34.131 --> 00:10:35.019
&gt;&gt; Yes.

189
00:10:35.019 --> 00:10:38.569
&gt;&gt; I mean, complex e-commerce
website has multiple MFA and

190
00:10:38.569 --> 00:10:39.392
then-
&gt;&gt; Yes,

191
00:10:39.392 --> 00:10:41.926
I think that that's a great question.

192
00:10:41.926 --> 00:10:47.435
So, microphones are, I think are super
cool, we can actually get tomorrow into,

193
00:10:47.435 --> 00:10:51.306
I have an awesome demo of
building a e-commerce website.

194
00:10:51.306 --> 00:10:56.070
And that demo is made up basically of, the
header gets rendered on a separate URL,

195
00:10:56.070 --> 00:11:00.629
the the hero section gets rendered
separately The shopping cart gets rendered

196
00:11:00.629 --> 00:11:01.470
separately.

197
00:11:01.470 --> 00:11:04.446
And then it all gets
assembled into one piece.

198
00:11:04.446 --> 00:11:08.886
And then the nice thing about it is that
Quick is really good at hosting multiple,

199
00:11:08.886 --> 00:11:12.494
essentially Quick containers,
we call containers, on a page.

200
00:11:12.494 --> 00:11:15.575
And the Quick knows how to wake
them up in the correct order and

201
00:11:15.575 --> 00:11:19.600
how to interact with one container
before the other container is ready.

202
00:11:19.600 --> 00:11:20.231
And so.

203
00:11:20.231 --> 00:11:23.717
All of those things are things that
Quick is kind of almost made for.

204
00:11:23.717 --> 00:11:29.561
And the reason for that is because Quick
App can be serialized into just HTML.

205
00:11:29.561 --> 00:11:32.339
And because it's just HTML,
it's really easy for

206
00:11:32.339 --> 00:11:36.681
a microphone to just concatenate a bunch
of HTML together into a final product.

207
00:11:36.681 --> 00:11:41.378
Something that's not possible with
existing technologies because existing is

208
00:11:41.378 --> 00:11:45.244
a mixture of JavaScript and HTML and
CSS and loading strategies and

209
00:11:45.244 --> 00:11:49.403
order matters and all of these things,
and becomes kind of difficult.

210
00:11:49.403 --> 00:11:50.973
And so quick makes it easy.

