WEBVTT

1
00:00:00.060 --> 00:00:03.550
Let's do a kind of a quick
demo of what Qwik is.

2
00:00:03.550 --> 00:00:07.159
First of all, this is a site
that has many demos on it, but

3
00:00:07.159 --> 00:00:11.540
you can think of this site as
a cohesive single application, right?

4
00:00:11.540 --> 00:00:14.579
So it's a single app that has many,
many different sites on it,

5
00:00:14.579 --> 00:00:16.565
many different pages on it.

6
00:00:16.565 --> 00:00:19.202
And the reason I want to point
this out is because there are many

7
00:00:19.202 --> 00:00:20.175
components on a page.

8
00:00:21.485 --> 00:00:26.045
So in this particular case,
there is a component that does the header,

9
00:00:26.045 --> 00:00:27.490
that does the footer.

10
00:00:27.490 --> 00:00:29.667
Let me scroll,
there's a footer on the bottom.

11
00:00:29.667 --> 00:00:31.653
There's a component that
renders these things and

12
00:00:31.653 --> 00:00:33.368
you can see all these
components in the DOM.

13
00:00:33.368 --> 00:00:36.462
Every time there's a component,
there is a qv.

14
00:00:36.462 --> 00:00:39.835
Let me get the font bigger here,
how's that?

15
00:00:39.835 --> 00:00:41.384
So every time you see a qv in the DOM,

16
00:00:41.384 --> 00:00:43.623
that means there's
a component in that location.

17
00:00:43.623 --> 00:00:47.354
And this is what we mean by the framework
serializes sufficient amount of

18
00:00:47.354 --> 00:00:51.825
information into the HTML so that you
can reason about the application, right?

19
00:00:51.825 --> 00:00:53.174
So by looking at these comments,

20
00:00:53.174 --> 00:00:55.305
the framework knows where
the components started.

21
00:00:55.305 --> 00:00:58.317
And so we will have to re-render
something, it knows, don't go there,

22
00:00:58.317 --> 00:01:01.390
that's a separate component, or
go here cuz that's the same component.

23
00:01:04.006 --> 00:01:05.203
And all this information is present.

24
00:01:05.203 --> 00:01:08.658
Now, what's interesting about it,
let's go to the Network tab.

25
00:01:11.280 --> 00:01:13.980
So I have vite filtered out.

26
00:01:13.980 --> 00:01:15.760
So let me refresh this.

27
00:01:15.760 --> 00:01:18.834
This is running in dev mode and so
there's hot module reloading and so

28
00:01:18.834 --> 00:01:19.740
the beach shows up.

29
00:01:19.740 --> 00:01:23.310
So I'm just gonna filter out vite and
say pretend vite is not here.

30
00:01:23.310 --> 00:01:25.390
And I'm only interested in the JavaScript.

31
00:01:25.390 --> 00:01:27.264
And so the thing to kind of see is that,

32
00:01:27.264 --> 00:01:31.250
the framework kinda looked at this page
and says, you don't need JavaScript for

33
00:01:31.250 --> 00:01:34.450
this page,
there's nothing here that's interactive.

34
00:01:34.450 --> 00:01:38.468
And so no JavaScript got sent,
the state of the system,

35
00:01:38.468 --> 00:01:43.700
this is the serialization, right,
is basically serialized nothing.

36
00:01:46.710 --> 00:01:47.830
This is for prefetching.

37
00:01:48.980 --> 00:01:50.300
This is div that doesn't count.

38
00:01:50.300 --> 00:01:51.780
Let's see what else is in here.

39
00:01:51.780 --> 00:01:55.610
This is for dev mode error handling,
this doesn't count.

40
00:01:55.610 --> 00:02:00.932
This is also error handling for, okay, so
a bunch of these scripts here are only for

41
00:02:00.932 --> 00:02:04.431
dev mode and
they're actually not doing anything in,

42
00:02:04.431 --> 00:02:07.570
these three scripts would
not be in production.

43
00:02:08.600 --> 00:02:12.530
And the vite wouldn't be in production and

44
00:02:12.530 --> 00:02:17.018
this is just prefetching
of code that is needed.

45
00:02:17.018 --> 00:02:20.829
But as far as everything else,
there is no JavaScript in here.

46
00:02:20.829 --> 00:02:24.227
So let's go to Hello World and
Network tab, same exact thing,

47
00:02:24.227 --> 00:02:25.583
no JavaScript, right?

48
00:02:25.583 --> 00:02:28.380
Now, let's go to a Counter.

49
00:02:28.380 --> 00:02:30.330
So a Counter requires an alert.

50
00:02:30.330 --> 00:02:32.630
So if I click on Alert, an Alert comes in.

51
00:02:32.630 --> 00:02:35.710
And if I hit Increment, I can
increment the number over here, right?

52
00:02:37.830 --> 00:02:44.210
And that's kinda cool because, notice
what happened, there was no JavaScript.

53
00:02:44.210 --> 00:02:48.188
And then when I hit Increment,
the JavaScript showed up.

54
00:02:48.188 --> 00:02:49.743
And it's kinda the magic of it, right?

55
00:02:49.743 --> 00:02:54.470
Which is that, let's see,
can we show preview?

56
00:02:54.470 --> 00:02:55.130
Here we go.

57
00:02:55.130 --> 00:02:57.762
The only thing that showed up
is the code for incrementing and

58
00:02:57.762 --> 00:02:59.009
then the framework itself.

59
00:03:00.070 --> 00:03:02.791
And again, this is a dev mode, and
so the framework here is huge,

60
00:03:02.791 --> 00:03:04.788
I think it's like two megabytes or
something.

61
00:03:04.788 --> 00:03:08.300
In production,
the framework is only about 20 kilobytes.

62
00:03:08.300 --> 00:03:14.355
But because of all the comments and
docs, and etc, it's pretty big.

63
00:03:14.355 --> 00:03:17.190
But it's about 20 kilobytes in production.

64
00:03:17.190 --> 00:03:20.733
And so when I click on the second button,
more JavaScript shows up.

65
00:03:20.733 --> 00:03:23.385
And in this particular case,
let's look at the button by itself.

66
00:03:23.385 --> 00:03:25.038
If I click on the Alert,

67
00:03:25.038 --> 00:03:29.707
the only code that showed up
is literally just the alert.

68
00:03:29.707 --> 00:03:34.387
The framework looked at that and said, as
a developer, you asked me to do an alert.

69
00:03:34.387 --> 00:03:37.707
And so the only code I need to ship
to the client is just the alert.

70
00:03:37.707 --> 00:03:40.825
And in this particular case,
the framework just basically said,

71
00:03:40.825 --> 00:03:44.567
not only do you just need an alert,
you don't even need the framework.

72
00:03:44.567 --> 00:03:46.937
So when I click Alert,
the framework doesn't even show up.

73
00:03:47.990 --> 00:03:53.290
The framework only shows up once I hit
Increment, and now the items go up.

74
00:03:57.020 --> 00:04:01.164
This is one of my favorite demos
which shows, again, no JavaScript.

75
00:04:01.164 --> 00:04:05.020
And if you scroll to the bottom, there is
a clock that updates every one second.

76
00:04:05.020 --> 00:04:08.520
And notice, the moment I scrolled it
into the position, the clock showed up.

77
00:04:08.520 --> 00:04:12.230
Let me show this again, so no JavaScript.

78
00:04:12.230 --> 00:04:17.500
The act of scrolling this particular thing
into view is what made the clock show up.

79
00:04:17.500 --> 00:04:21.150
And so there is JavaScript
that updates the clock.

80
00:04:22.210 --> 00:04:24.100
And the framework does the updating.

81
00:04:24.100 --> 00:04:28.909
Now we talked about tree shaking,
let me go back actually.

82
00:04:28.909 --> 00:04:34.246
If I go to the counter and if I look at
the serialized state, here's the JSON,

83
00:04:34.246 --> 00:04:39.358
you will see that there's 0 here,
represents the 0 over here, right?

84
00:04:39.358 --> 00:04:42.203
The state of the system
is serialized in here.

85
00:04:42.203 --> 00:04:48.460
The subscriptions over here talk
about the reactivity graph, right?

86
00:04:48.460 --> 00:04:52.627
So it understands the clicking this button
needs to update this particular thing

87
00:04:52.627 --> 00:04:53.248
over here.

88
00:04:53.248 --> 00:04:54.421
So that's straightforward.

89
00:04:54.421 --> 00:04:59.191
Now what I find interesting is that, if I
go to the Hacker News, the system looked

90
00:04:59.191 --> 00:05:03.810
at it and said, actually,
I don't need to serialize anything, right?

91
00:05:03.810 --> 00:05:07.243
Because, yeah,
the data came from some REST API and

92
00:05:07.243 --> 00:05:11.300
I had to do data binding to
kinda make it show up, etc.

93
00:05:11.300 --> 00:05:15.642
But if you think about it, there's nothing
that I can do on a client that would cause

94
00:05:15.642 --> 00:05:19.195
the data to change, so then why am
I sending the data to you, right?

95
00:05:19.195 --> 00:05:21.960
So this is an example of tree
shaking of the data itself.

96
00:05:21.960 --> 00:05:24.588
Now if I go to the comments section,

97
00:05:24.588 --> 00:05:28.365
notice that the JSON now
contains a lot more stuff.

98
00:05:28.365 --> 00:05:32.330
This is basically whether or not
a particular comment is open or closed.

99
00:05:32.330 --> 00:05:34.347
So this is information about
the state of the components,

100
00:05:34.347 --> 00:05:35.550
whether they're open or closed.

101
00:05:35.550 --> 00:05:37.390
In this particular case, they're all open.

102
00:05:37.390 --> 00:05:42.370
And this looks like a very, very long
thread with many, 80 comments, so

103
00:05:42.370 --> 00:05:44.010
it's pretty big.

104
00:05:44.010 --> 00:05:48.660
But what you don't see anywhere in
here is, you don't see the actual text

105
00:05:48.660 --> 00:05:52.487
serialize anywhere in here,
is just serializing whether or

106
00:05:52.487 --> 00:05:57.190
not a particular component is open,
right, so I can close this.

107
00:05:57.190 --> 00:06:01.150
I can click on, I can open it and
close it, right?

108
00:06:01.150 --> 00:06:03.430
So it behaves the way you would expect.

109
00:06:03.430 --> 00:06:09.419
But the data from the server is not
in here, it's not included, right?

110
00:06:09.419 --> 00:06:14.343
&gt;&gt; And to clarify the reason why that's
the only thing that shows up in the data

111
00:06:14.343 --> 00:06:18.112
is because that's the only
part that's interactable?

112
00:06:18.112 --> 00:06:19.658
&gt;&gt; That's right, that's right.

113
00:06:19.658 --> 00:06:20.537
&gt;&gt; Got you.

114
00:06:20.537 --> 00:06:21.882
&gt;&gt; Yes, Mark?

115
00:06:21.882 --> 00:06:27.927
&gt;&gt; It's a question around offline,
and if you become offline,

116
00:06:27.927 --> 00:06:32.250
will you download, or how does that work?

117
00:06:32.250 --> 00:06:33.808
&gt;&gt; Yeah, so
that's a super comical question.

118
00:06:33.808 --> 00:06:37.122
What happens on a slow network,
on a spotty network,

119
00:06:37.122 --> 00:06:39.267
if you get through a tunnel, etc.

120
00:06:39.267 --> 00:06:41.630
So, first of all, this is a dev mode.

121
00:06:41.630 --> 00:06:44.030
This is not actually how it
works in production, okay?

122
00:06:44.030 --> 00:06:46.460
There's lots of other
things we do in production.

123
00:06:46.460 --> 00:06:49.750
But in production, what you have is,
you have a service worker, or

124
00:06:49.750 --> 00:06:50.920
let me back up a second.

125
00:06:50.920 --> 00:06:53.704
The way to think about is,
when you run the application,

126
00:06:53.704 --> 00:06:57.400
we break up the application into
as many pieces as possible.

127
00:06:57.400 --> 00:07:01.339
And then as the application is running,
we collect information about what bits

128
00:07:01.339 --> 00:07:04.840
are actually needed and
what actually are not needed.

129
00:07:04.840 --> 00:07:09.272
Based on that information, we can create
ideal bundles that have just the bits that

130
00:07:09.272 --> 00:07:13.850
is required and the bits that are not
downloaded, those are not required.

131
00:07:13.850 --> 00:07:18.949
And that information actually gets
produced as part of the build step and

132
00:07:18.949 --> 00:07:21.110
is fed to the service worker.

133
00:07:21.110 --> 00:07:24.966
And so the service worker starts
prefetching all of the code ahead of

134
00:07:24.966 --> 00:07:28.210
time so that by the time you
enter the tunnel or whatever,

135
00:07:28.210 --> 00:07:31.960
you'll have everything available for
yourself, right?

136
00:07:31.960 --> 00:07:36.441
And so once the service worker is
done with prefetching all the code,

137
00:07:36.441 --> 00:07:40.480
it's no different than any
other application, right?

138
00:07:40.480 --> 00:07:45.117
The key thing to understand is, or
the first order of approximation we

139
00:07:45.117 --> 00:07:49.596
should think about is, is not that
we are lazy loading everything,

140
00:07:49.596 --> 00:07:53.340
is that we are lazy executing everything,
right?

141
00:07:53.340 --> 00:07:54.635
Think about the fact like,

142
00:07:54.635 --> 00:07:58.410
let me just download all of JavaScript
as an existing system, right?

143
00:07:58.410 --> 00:08:01.950
I don't have to execute it eagerly,
that alone is a huge win.

144
00:08:02.980 --> 00:08:06.657
The fact that we can further subdivide
your chunks and lazy load those,

145
00:08:06.657 --> 00:08:09.060
that's just icing on a cake.

146
00:08:09.060 --> 00:08:13.550
The big win is the fact that we didn't
eagerly have to execute everything, right?

147
00:08:13.550 --> 00:08:18.770
So, it's more about lazy execution, rather
than about lazy downloading of code.

148
00:08:18.770 --> 00:08:20.890
Lazy downloading of code
is just icing on a cake.

149
00:08:20.890 --> 00:08:24.354
But there's a service worker
that makes sure that you will

150
00:08:24.354 --> 00:08:28.805
never get in a situation where you
clicking on something means that the code

151
00:08:28.805 --> 00:08:30.090
isn't downloaded.

152
00:08:30.090 --> 00:08:32.911
The service worker will prefetch
all of these things and

153
00:08:32.911 --> 00:08:34.670
make them available to you.

154
00:08:34.670 --> 00:08:38.796
And because the amount of code is less
than what would be a normal application,

155
00:08:38.796 --> 00:08:43.108
the service worker will always finish its
job way before the existing system would

156
00:08:43.108 --> 00:08:45.090
even download the JavaScript.

157
00:08:45.090 --> 00:08:48.540
Just wanna point out that a lot of times
people get caught up by this idea that,

158
00:08:48.540 --> 00:08:52.110
I'm gonna click and I'll have to download
the code and it's gonna be slow, right?

159
00:08:52.110 --> 00:08:56.260
And I just wanna dispel that it's not how
it actually works in production, right?

160
00:08:56.260 --> 00:08:59.541
In production,
the code is downloaded eagerly.

161
00:08:59.541 --> 00:09:06.115
The when is the lazy parsing and
execution of that code, right?

162
00:09:06.115 --> 00:09:07.686
Yes?

163
00:09:07.686 --> 00:09:12.501
&gt;&gt; So, I mean, if I see the angler where
we do the lazy loading end or we just,

164
00:09:12.501 --> 00:09:18.049
I mean, create the lazy loading pattern
where the bundler will divide the modules.

165
00:09:18.049 --> 00:09:21.537
So in Qwik,
we have to follow any kind of pattern or

166
00:09:21.537 --> 00:09:26.620
bundler will do the job automatically
dividing the whole application?

167
00:09:27.640 --> 00:09:29.450
&gt;&gt; Yes, so let's see where am I here?

168
00:09:30.490 --> 00:09:34.405
The conference app, so, oops.

169
00:09:34.405 --> 00:09:37.637
Let's go to the clip,
so this is the clock.

170
00:09:39.587 --> 00:09:41.370
Is this the clock?
Yeah, this is the clock demo here.

171
00:09:41.370 --> 00:09:43.227
So let's go back to the clock demo.

172
00:09:47.467 --> 00:09:51.871
Every time you see a dollar sign in Qwik,
this basically tells the system that,

173
00:09:51.871 --> 00:09:55.104
I would like you to insert lazy
loaded boundary over here.

174
00:09:55.104 --> 00:10:02.294
I'm not saying that you should lazy load
here, I'm saying that it could be, right?

175
00:10:02.294 --> 00:10:06.031
Because whether or not the lazy loading
boundary is actually ended up with

176
00:10:06.031 --> 00:10:09.963
is a thing that happens based on how
the users actually use your application.

177
00:10:09.963 --> 00:10:12.661
So as they use the application,
you collect information about,

178
00:10:12.661 --> 00:10:14.890
what actually is needed, what isn't.

179
00:10:14.890 --> 00:10:17.101
And based on that,
you create ideal bundle sizes and

180
00:10:17.101 --> 00:10:19.250
ideal bundle distributions, right?

181
00:10:19.250 --> 00:10:22.050
But it requires you to be able to do that.

182
00:10:22.050 --> 00:10:25.250
And this being able to is done
through this dollar sign.

183
00:10:25.250 --> 00:10:29.220
So every time you see a dollar sign,
think, this could be lazy loaded, right?

184
00:10:29.220 --> 00:10:32.799
And so if you go down, you'll see,
this could be lazy loaded.

185
00:10:32.799 --> 00:10:34.950
The styles could be lazy loaded.

186
00:10:34.950 --> 00:10:36.530
The client effect can be lazy loaded.

187
00:10:36.530 --> 00:10:38.460
The whole component can be lazy loaded,
right?

188
00:10:38.460 --> 00:10:42.017
And so by including these dollar signs,
you're placing lots and

189
00:10:42.017 --> 00:10:45.460
lots of places where lazy
loading could happen.

190
00:10:45.460 --> 00:10:50.236
And the biggest problem with the existing
frameworks today is that lazy loading is

191
00:10:50.236 --> 00:10:52.760
not something that is easy to do, right?

192
00:10:52.760 --> 00:10:56.020
It's quite a lot of ceremony
to do lazy loading.

193
00:10:56.020 --> 00:10:59.250
And again, we're gonna dive
into this more tomorrow, right?

194
00:10:59.250 --> 00:11:03.830
So by making lazy loading so cheap and
so low cost as single character,

195
00:11:03.830 --> 00:11:07.990
by the way, it's not like I can
forget to type this character here.

196
00:11:07.990 --> 00:11:11.208
Because if I do, TypeScripts
gonna scream at me and be like,

197
00:11:11.208 --> 00:11:15.514
there's no such thing as a component,
there is component dollar sign, right?

198
00:11:15.514 --> 00:11:20.090
And so the TypeScript just kinda
forces you down this particular path.

199
00:11:20.090 --> 00:11:24.740
So, for example, this click button that
says, print a console test, right?

200
00:11:24.740 --> 00:11:30.370
This, p here is, clicking here,
I'm sorry that's a conference.

201
00:11:30.370 --> 00:11:33.240
Sorry, where is that p,
yes, it's a console.

202
00:11:33.240 --> 00:11:35.590
Here we go, let's do it, refresh again.

203
00:11:35.590 --> 00:11:37.120
If I click, it prints test, right?

204
00:11:38.120 --> 00:11:41.000
That, if you look at the Network tab,

205
00:11:41.000 --> 00:11:44.965
literally only downloaded
the console.log test.

206
00:11:44.965 --> 00:11:47.673
Because, well,
it's behind the dollar sign and

207
00:11:47.673 --> 00:11:50.520
the framework automatically pulls it out,
right?

208
00:11:50.520 --> 00:11:52.542
Think about it an existing
existing framework,

209
00:11:52.542 --> 00:11:56.041
existing framework would be like, well, I
have to hydrate the component in order to

210
00:11:56.041 --> 00:11:57.737
figure out if there is a click listener.

211
00:11:57.737 --> 00:11:59.761
Which means I have to
download the whole component,

212
00:11:59.761 --> 00:12:01.280
I have to execute the whole component.

213
00:12:01.280 --> 00:12:04.241
And then I have to find where
the listener is, right?

214
00:12:04.241 --> 00:12:06.519
And I will create a closure for
that listener.

215
00:12:06.519 --> 00:12:08.448
And then closure gets attached to the DOM,
and

216
00:12:08.448 --> 00:12:10.191
then I'm ready to do your stuff, right?

217
00:12:10.191 --> 00:12:14.602
Whereas here, none of that stuff happened,
all that stuff got skipped.

