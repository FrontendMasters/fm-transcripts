WEBVTT

1
00:00:00.017 --> 00:00:02.996
So find a directory on your computer,
which is useful.

2
00:00:02.996 --> 00:00:08.032
And so there you do npm
create qwik@latest, right?

3
00:00:08.032 --> 00:00:11.675
So this is our script to
basically set up your

4
00:00:11.675 --> 00:00:15.717
directory structure with
everything you need.

5
00:00:15.717 --> 00:00:18.507
So let's kick it off.

6
00:00:18.507 --> 00:00:22.012
It's going to ask you for a place
where you wanna put this application,

7
00:00:22.012 --> 00:00:23.835
that seems like a reasonable place.

8
00:00:23.835 --> 00:00:27.873
And you probably choose the basic app
unless you're building a component,

9
00:00:27.873 --> 00:00:30.659
which is a library that
others can consume, right?

10
00:00:30.659 --> 00:00:33.201
If it's a standalone application,

11
00:00:33.201 --> 00:00:37.466
you probably wanna have the basic
application for QwikCity.

12
00:00:37.466 --> 00:00:39.282
And let's install npm.

13
00:00:39.282 --> 00:00:42.404
And that gets everything up and running.

14
00:00:42.404 --> 00:00:47.642
So now I can go into the Qwik app, and
let's open up your favorite editor.

15
00:00:49.564 --> 00:00:55.514
Visual code or
whatever you happen to be using.

16
00:00:57.046 --> 00:01:01.383
And just rearrange things here,
I apologize.

17
00:01:05.986 --> 00:01:10.508
Okay, so here we are, we are in Qwik, so

18
00:01:10.508 --> 00:01:17.843
the npm Quickstart basically
generated all of this code for you.

19
00:01:17.843 --> 00:01:20.260
Step one is to get it going.

20
00:01:20.260 --> 00:01:24.473
So let's do npm run dev.

21
00:01:24.473 --> 00:01:30.142
So dev mode is what gets our server up and
running, and then opens up port 5173.

22
00:01:30.142 --> 00:01:35.254
So this is what you should
see once 5173 comes up.

23
00:01:35.254 --> 00:01:39.848
Basically, it's just a very
simple kind of Hello, World app.

24
00:01:39.848 --> 00:01:45.274
Currently, it has a root content here,
and then there is

25
00:01:45.274 --> 00:01:52.296
a simple demo showing interactivity
that's on a slash flower sub route.

26
00:01:52.296 --> 00:01:56.520
So the first thing I think we could do is
we just kind of, a lot of things happen

27
00:01:56.520 --> 00:02:00.226
here, so let's just talk about
how all the pieces come together.

28
00:02:00.226 --> 00:02:05.487
So when QwikCity, when you kind
of skeleton app gets created,

29
00:02:05.487 --> 00:02:10.550
so in the source folder,
you have two main subdirectories,

30
00:02:10.550 --> 00:02:13.246
we have components and routes.

31
00:02:13.246 --> 00:02:17.301
So routes here map to
the routes over here, so

32
00:02:17.301 --> 00:02:22.761
you can see that this one is in
a subdirectory called flower.

33
00:02:22.761 --> 00:02:25.680
And if you go into routes
&gt; flower subdirectory,

34
00:02:25.680 --> 00:02:28.540
you have the component that's in here,
right?

35
00:02:28.540 --> 00:02:34.436
So this demo component here is
equal to this file over here.

36
00:02:34.436 --> 00:02:39.726
So because it's in routes &gt; flower
subfolder, this is what gets rendered.

37
00:02:39.726 --> 00:02:41.181
Make sense so far?

38
00:02:41.181 --> 00:02:45.751
Okay, but
if you look at the component itself,

39
00:02:45.751 --> 00:02:50.094
you will notice that it
starts at the input and

40
00:02:50.094 --> 00:02:53.880
it ends with, looks like just the dev.

41
00:02:53.880 --> 00:02:57.035
So it's really just this part right here.

42
00:02:57.035 --> 00:03:01.215
The menu and also the footer
are not part of the component.

43
00:03:01.215 --> 00:03:03.292
That's because they're part of the layout.

44
00:03:03.292 --> 00:03:06.811
So as you go up the hierarchy of
the directories, you're looking for

45
00:03:06.811 --> 00:03:08.279
a file called layout.tsx.

46
00:03:08.279 --> 00:03:13.028
So if you go up one folder, you'll see
that there's a file called layout.tsx.

47
00:03:13.028 --> 00:03:17.634
So what's happening here is
that the flower &gt; index.tsx

48
00:03:17.634 --> 00:03:21.116
is getting embedded into the layout.tsx.

49
00:03:21.116 --> 00:03:23.769
And the embedding happens right here.

50
00:03:23.769 --> 00:03:29.979
So if I go to the section and I say class,

51
00:03:29.979 --> 00:03:35.258
sorry, style(border, oops,

52
00:03:37.568 --> 00:03:43.632
1px solid red, You should see a box.

53
00:03:43.632 --> 00:03:46.029
Why don't we refresh?

54
00:03:46.029 --> 00:03:46.630
Where's the box?

55
00:03:46.630 --> 00:03:47.685
What am I missing here?

56
00:03:50.837 --> 00:03:52.954
I can't type.

57
00:03:52.954 --> 00:03:53.733
There we go.

58
00:03:53.733 --> 00:03:57.987
So you can see where
the layout of the page is and

59
00:03:57.987 --> 00:04:02.695
what the actual component inside of it is,
right?

60
00:04:02.695 --> 00:04:05.422
And so if I go to the previous page,

61
00:04:05.422 --> 00:04:10.982
you're also gonna see the same exact
layout in this location as well.

62
00:04:10.982 --> 00:04:14.557
And you see that this box is red.

63
00:04:14.557 --> 00:04:19.246
So the idea is you create a bunch of
layouts that kind of lay out the page, and

64
00:04:19.246 --> 00:04:22.671
then inside of these layouts,
you place index.tsx,

65
00:04:22.671 --> 00:04:26.255
which is your actual page for
this particular location.

66
00:04:26.255 --> 00:04:29.496
Between the layout and the index.tsx,

67
00:04:29.496 --> 00:04:33.601
you can kind of build up
the applications you want.

68
00:04:33.601 --> 00:04:37.849
If you go to layout, though, you'll see
that, for example, there is a Header, and

69
00:04:37.849 --> 00:04:40.685
this Header is imported from
the components directory.

70
00:04:40.685 --> 00:04:43.673
So inside of the components, this is just
a convention, doesn't have to be there.

71
00:04:43.673 --> 00:04:46.812
We have the header.tsx,
which gives us our logo,

72
00:04:46.812 --> 00:04:49.666
our docks, examples and tutorials, right?

73
00:04:49.666 --> 00:04:55.467
So this part right here is our header
that gets inserted in that location.

74
00:04:58.084 --> 00:05:02.952
And so you can build up your components
as you would normally build up and

75
00:05:02.952 --> 00:05:04.748
build your application.

76
00:05:04.748 --> 00:05:08.820
So if you're familiar with
things like Next.js or

77
00:05:08.820 --> 00:05:13.755
Sveltekit or SolidStart,
these are all very similar ideas.

78
00:05:13.755 --> 00:05:15.923
That in itself is not kind of interesting.

79
00:05:15.923 --> 00:05:18.960
What's interesting is basically
what happens in here.

80
00:05:18.960 --> 00:05:23.586
So what is unique about this particular
approach is that if you go into

81
00:05:23.586 --> 00:05:26.220
the JavaScript here, specifically,

82
00:05:26.220 --> 00:05:30.631
you can look at the amount of
JavaScript that's being executed.

83
00:05:30.631 --> 00:05:32.636
Where is Network?

84
00:05:32.636 --> 00:05:35.955
We are filtering out vite because we're
running in dev mode, so it doesn't count.

85
00:05:35.955 --> 00:05:38.701
You noticed that no JavaScript
is available on this page.

86
00:05:38.701 --> 00:05:43.423
But if I navigate to this other page,
now the JavaScript shows up, and

87
00:05:43.423 --> 00:05:45.192
it's kind of hard to see.

88
00:05:45.192 --> 00:05:50.114
But the JavaScript only shows up for
the relevant pieces of the page, right?

89
00:05:50.114 --> 00:05:51.746
So this is interactive.

90
00:05:51.746 --> 00:05:56.708
So the JavaScript only shows up
when it becomes interactive.

91
00:05:56.708 --> 00:06:02.784
And I think you can change
the number of things, etc.

92
00:06:02.784 --> 00:06:04.173
Let's see what else to talk about.

93
00:06:04.173 --> 00:06:07.937
Okay, so what's unique about
Qwik is how it bootstraps.

94
00:06:07.937 --> 00:06:12.746
So the classical way of bootstrapping
applications is you create index.html,

95
00:06:12.746 --> 00:06:14.311
like we create some page.

96
00:06:14.311 --> 00:06:19.417
And then inside of the HTML, you say
this is kind of the root element, and

97
00:06:19.417 --> 00:06:25.047
then you tell the framework to go and
bootstrap yourself from the root element.

98
00:06:25.047 --> 00:06:28.978
The problem with that particular approach
is that you're kind of introducing

99
00:06:28.978 --> 00:06:31.132
an entry point, the main method, right?

100
00:06:31.132 --> 00:06:33.667
You're setting up a place
where everything happens.

101
00:06:33.667 --> 00:06:37.848
And what Qwik wants to do is Qwik really
hard tries to make sure that everything's

102
00:06:37.848 --> 00:06:39.699
lazy executable, lazy loadable.

103
00:06:39.699 --> 00:06:44.356
And so you realize that there is no
single place of entry point, right?

104
00:06:44.356 --> 00:06:49.889
For Qwik application, the entry point
might be the thing you click on,

105
00:06:49.889 --> 00:06:54.698
the clicking on point A is
different than clicking on point B.

106
00:06:54.698 --> 00:06:56.571
And so there's a different entry point.

107
00:06:56.571 --> 00:07:01.144
And so as a result, when you look at Qwik,

108
00:07:01.144 --> 00:07:05.992
there is a top level
component that exists.

109
00:07:05.992 --> 00:07:09.251
And this represents kind of the HTML,
the head of the system, right?

110
00:07:09.251 --> 00:07:12.864
So you start declaring
your page from the HTML.

111
00:07:12.864 --> 00:07:15.559
As you can see,
there's HTML, there's head,

112
00:07:15.559 --> 00:07:19.521
there's subcomponent that includes
the router header information.

113
00:07:19.521 --> 00:07:23.670
There is a component that
does the routing outlet,

114
00:07:23.670 --> 00:07:27.635
the component that
registers a service worker.

115
00:07:27.635 --> 00:07:33.288
The service worker is used in production
for prefetching all of the JavaScript so

116
00:07:33.288 --> 00:07:38.624
that the user never gets in a situation
where the JavaScript is not fetched.

117
00:07:38.624 --> 00:07:42.994
So when you click on something, you know
that JavaScript is already available.

118
00:07:42.994 --> 00:07:47.438
And so one of kind of big differences
is that you start at the root.

119
00:07:47.438 --> 00:07:52.006
So you go from the root and
then you enter these layouts, right,

120
00:07:52.006 --> 00:07:57.520
that now add the main, the sections,
the footer, and all the other pieces.

121
00:07:57.520 --> 00:07:58.429
Yes?

122
00:07:58.429 --> 00:08:03.427
&gt;&gt; Going back to the service worker,
is it easier to get

123
00:08:03.427 --> 00:08:06.736
Partytown working with Qwik-
&gt;&gt; Yes.

124
00:08:06.736 --> 00:08:08.624
&gt;&gt; Than other frameworks?

125
00:08:08.624 --> 00:08:11.591
&gt;&gt; Yes, so let's do this.

126
00:08:11.591 --> 00:08:15.921
I believe if you just do yarn, sorry, npm,

127
00:08:15.921 --> 00:08:21.200
npm run qwik add, and it says,
what do you wanna add?

128
00:08:21.200 --> 00:08:25.696
And one of them should be Partytown,
Partytown right here.

129
00:08:25.696 --> 00:08:32.325
And so now, you have Partytown
included inside of your setup.

130
00:08:32.325 --> 00:08:39.278
So now if I go somewhere, I don't know,
you must add the component, okay.

131
00:08:39.278 --> 00:08:43.842
So yep, so this component here
needs to be added into here.

132
00:08:43.842 --> 00:08:45.239
And then it needs to be imported.

133
00:08:49.003 --> 00:08:56.619
Oops, There we go.

134
00:08:56.619 --> 00:09:02.516
So now we have Partytown
included inside of our site.

135
00:09:02.516 --> 00:09:09.010
Let's see, if I run,
I should see Partytown now.

136
00:09:09.010 --> 00:09:12.642
One of the script tags should include
Partytown, so which one is it?

137
00:09:12.642 --> 00:09:14.030
That's white.

138
00:09:14.030 --> 00:09:16.549
&gt;&gt; The iframes right below you.

139
00:09:16.549 --> 00:09:23.920
&gt;&gt; Yeah, so this is the Partytown, iframe
but it's probably one of the scripts.

140
00:09:23.920 --> 00:09:27.499
Yeah, this is the Partytown
script right here.

141
00:09:27.499 --> 00:09:29.441
That's very, very straightforward.

142
00:09:29.441 --> 00:09:35.951
Okay, any questions before we
start building actual app?

143
00:09:38.125 --> 00:09:46.023
So let's say we wanted to make
a new route called contacts.

144
00:09:46.023 --> 00:09:49.295
Right now, if you go there,
there's 404, there's nothing here.

145
00:09:49.295 --> 00:09:55.217
So to do that, again,
we go to our routes folder.

146
00:09:55.217 --> 00:09:57.200
And in here, we create a new file.

147
00:09:57.200 --> 00:10:04.895
And so in our case,
we want contacts, /index.tsx.

148
00:10:04.895 --> 00:10:07.900
So every file has to end in index.tsx.

149
00:10:10.534 --> 00:10:14.090
So that creates an empty page.

150
00:10:14.090 --> 00:10:18.791
And so the minimum thing we have
to put in here is the thing

151
00:10:18.791 --> 00:10:22.502
we wanna render export default component.

152
00:10:25.470 --> 00:10:28.159
And this component is gonna just return.

153
00:10:28.159 --> 00:10:30.532
I'll look at that,
autopilot to the rescue.

154
00:10:36.040 --> 00:10:40.693
Right, so this is the bare minimum
kind of a code to print Hello, World.

155
00:10:40.693 --> 00:10:43.830
So now if we go to this page and
we refresh, and

156
00:10:43.830 --> 00:10:47.805
then Vite sometimes has troubles,
let me restart Vite.

157
00:10:47.805 --> 00:10:50.237
Here we go.

158
00:10:50.237 --> 00:10:54.701
Now, it's showing up our component.

159
00:10:54.701 --> 00:10:56.458
So that's pretty straightforward.

160
00:10:56.458 --> 00:10:58.099
Now, we can do a couple of things,
for example,

161
00:10:58.099 --> 00:10:59.349
we could choose a different layout.

162
00:10:59.349 --> 00:11:03.178
So let's take this layout that's up here,

163
00:11:03.178 --> 00:11:07.113
and let's copy it into
our contacts folder.

164
00:11:07.113 --> 00:11:11.016
And now,
it's gonna complain about the header.

165
00:11:11.016 --> 00:11:14.690
It's probably because we have
to do an extra, okay, perfect.

166
00:11:14.690 --> 00:11:18.994
And so now, what we end up doing is we
will have the header twice, I believe.

167
00:11:21.747 --> 00:11:24.805
We have nested the layout
twice inside of it, right?

168
00:11:24.805 --> 00:11:27.941
And so sometimes you just basically
wanna do completely different layouts.

169
00:11:27.941 --> 00:11:32.540
So one of the things we can do is we can
rename this file to an exclamation point.

170
00:11:32.540 --> 00:11:37.380
And now, we're saying, don't keep
going up the directory tree, but

171
00:11:37.380 --> 00:11:41.668
rather stop at this particular
location and don't continue.

172
00:11:45.532 --> 00:11:50.121
And you can put the exclamation point on
index.tsx as well, so we can control it.

173
00:11:50.121 --> 00:11:53.843
And so in this case,
let's just delete our header so

174
00:11:53.843 --> 00:11:59.017
that we don't have the header in here,
and let's get rid of our styles.

175
00:12:01.641 --> 00:12:03.809
And so now we have our contacts.

176
00:12:06.893 --> 00:12:10.567
So maybe in here, we say h1,

177
00:12:17.097 --> 00:12:17.718
Okay?

