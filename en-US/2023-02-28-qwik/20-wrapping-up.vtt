WEBVTT

1
00:00:00.016 --> 00:00:01.274
So, where do you get more stuff?

2
00:00:01.274 --> 00:00:02.732
Well, check out our homepage.

3
00:00:02.732 --> 00:00:09.653
And by the way, this is a perfect
example of lazy loading in action.

4
00:00:09.653 --> 00:00:11.760
So, this search button over here,

5
00:00:11.760 --> 00:00:15.002
I am gonna intentionally make
it small here like that.

6
00:00:15.002 --> 00:00:17.043
If you go to Network tab,

7
00:00:17.043 --> 00:00:22.304
this search button downloads
a single chunk over here, right?

8
00:00:22.304 --> 00:00:26.341
And the reason you download a single
chunk, this is the actual, no,

9
00:00:26.341 --> 00:00:27.464
that's the demo.

10
00:00:27.464 --> 00:00:28.880
This is the Qwik website.

11
00:00:28.880 --> 00:00:31.872
So, this is the Algolia search.

12
00:00:31.872 --> 00:00:34.237
And this is the Algolia
search that tells it,

13
00:00:34.237 --> 00:00:37.733
make sure that all of these symbols
are together in a single thing.

14
00:00:37.733 --> 00:00:39.194
This is how this works, right?

15
00:00:39.194 --> 00:00:41.383
So, when you go and click on it,

16
00:00:41.383 --> 00:00:45.370
this particular thing gets
served immediately, right?

17
00:00:45.370 --> 00:00:48.992
This this is the time
this is two milliseconds.

18
00:00:48.992 --> 00:00:51.395
It's kind of hard to see.

19
00:00:51.395 --> 00:00:52.766
Yeah, so two milliseconds, right?

20
00:00:52.766 --> 00:00:56.301
So, service worker responds within
two milliseconds with the code

21
00:00:56.301 --> 00:00:59.040
necessary to get the Algolia search up and
running.

22
00:00:59.040 --> 00:01:00.210
And it's a hit, right?

23
00:01:00.210 --> 00:01:05.097
It's a service worker hit because, even
if I show up to this page with no cash,

24
00:01:05.097 --> 00:01:09.985
the first thing that the system does is
starts downloading the chunk because it

25
00:01:09.985 --> 00:01:13.168
knows that it is a possible
thing that you as a user,

26
00:01:13.168 --> 00:01:15.268
I can do this from this location.

27
00:01:15.268 --> 00:01:16.378
And so, it gets prefetched.

28
00:01:18.741 --> 00:01:22.367
Right, so,
this is where you check out stuff.

29
00:01:22.367 --> 00:01:22.867
Oops.

30
00:01:25.520 --> 00:01:27.087
We have some cool things in here.

31
00:01:27.087 --> 00:01:31.917
The thing that I'm most proud
of is basically we have these

32
00:01:31.917 --> 00:01:35.575
super nice tutorials you can follow along.

33
00:01:35.575 --> 00:01:39.477
A lot of things that we
talked about are here.

34
00:01:39.477 --> 00:01:43.721
Many of these things, so let's talk,
we also have examples, [COUGH] and

35
00:01:43.721 --> 00:01:46.852
one of them is the clock,
which I showed you earlier,

36
00:01:46.852 --> 00:01:49.653
which below the fold clock
that kinda shows up.

37
00:01:49.653 --> 00:01:51.958
And it shows you what's happening.

38
00:01:51.958 --> 00:01:56.404
You can actually open this up in a
playground, edit the source code to it and

39
00:01:56.404 --> 00:01:57.260
play with it.

40
00:01:57.260 --> 00:02:00.813
Again, notice that it's
posted on a server, right?

41
00:02:00.813 --> 00:02:03.297
And when you scroll the clock into view,

42
00:02:03.297 --> 00:02:08.500
the JavaScript shows up associated with
it and it's resumed on the client, right?

43
00:02:08.500 --> 00:02:10.759
To paint the thick, you can edit it.

44
00:02:10.759 --> 00:02:14.553
You can see what kind of
HTML gets sent across.

45
00:02:14.553 --> 00:02:16.482
You can see what's being generated.

46
00:02:16.482 --> 00:02:23.639
You can see what symbols how the
application got broken down into pieces,

47
00:02:23.639 --> 00:02:28.142
so you can see that clog
broken up into styles,

48
00:02:28.142 --> 00:02:33.002
into the client effect and
all of these parts etc.

49
00:02:33.002 --> 00:02:38.052
So, this app got broken
up into 1 2 3 4 5 pieces.

50
00:02:38.052 --> 00:02:42.429
But then in production once it runs really
only two of them are needed, right?

51
00:02:42.429 --> 00:02:46.430
So, instead of five pieces being
downloaded only two of them are actually

52
00:02:46.430 --> 00:02:47.213
downloaded.

53
00:02:47.213 --> 00:02:49.911
It shows you how the bundles get created.

54
00:02:49.911 --> 00:02:55.073
You can choose the bundling strategy
which is somewhere under options,

55
00:02:55.073 --> 00:02:58.797
you can choose different
bundling strategies, and

56
00:02:58.797 --> 00:03:02.277
you can see the number of files changes,
right?

57
00:03:02.277 --> 00:03:06.890
It's configured in a different way.

58
00:03:06.890 --> 00:03:10.338
In line is a special strategy for
making libraries and

59
00:03:10.338 --> 00:03:15.163
you can see what server gets, what
the server side gets when the server side

60
00:03:15.163 --> 00:03:18.399
rendering happens what
the bundle is over there.

61
00:03:18.399 --> 00:03:23.248
So, it's kind of a good way to explore
of what's going on, how this works.

62
00:03:23.248 --> 00:03:26.074
The cool thing is the did
optimizer is written in rust,

63
00:03:26.074 --> 00:03:28.778
it's transpired using
Wrasm into JavaScript, and

64
00:03:28.778 --> 00:03:31.860
it's actually running as
a service worker in the browser.

65
00:03:31.860 --> 00:03:36.129
So, when we are simulating this
HTML being generated on the server,

66
00:03:36.129 --> 00:03:39.600
it's actually being generated
in the service worker.

67
00:03:39.600 --> 00:03:44.439
And so, the service worker had to
download the rasm optimizer break up

68
00:03:44.439 --> 00:03:49.195
the source code, run it to kind of
bundle it up execute it on a server,

69
00:03:49.195 --> 00:03:53.705
but it's really a service worker,
and then produce a response,

70
00:03:53.705 --> 00:03:56.187
which is this response right here.

71
00:03:56.187 --> 00:03:59.416
And this is what gets sent to
the client and then you can go and

72
00:03:59.416 --> 00:04:02.137
interact with the app and
see what's happening.

73
00:04:02.137 --> 00:04:05.242
So, that's a cool way to kind
of play with that as well.

74
00:04:05.242 --> 00:04:11.060
The only other bit is join us on this
call with super active community.

75
00:04:11.060 --> 00:04:13.556
Few thousand people,
I think about we are seven or

76
00:04:13.556 --> 00:04:15.826
eight thousand I think
something like that.

77
00:04:15.826 --> 00:04:18.948
And a lot of good questions
are getting answered,

78
00:04:18.948 --> 00:04:23.855
people in the community are getting
interested in helping with things like for

79
00:04:23.855 --> 00:04:27.442
example vanilla extract was
a community contribution.

80
00:04:27.442 --> 00:04:33.123
I think Telvin was also community
contribution and so on and so forth, Mark.

81
00:04:33.123 --> 00:04:38.125
&gt;&gt; Is a question around if I
want to use third party react

82
00:04:38.125 --> 00:04:43.822
libraries can I do run Qwik add react and
then use the razor.

83
00:04:43.822 --> 00:04:48.016
&gt;&gt; Qwik has a bridge to run with other
frameworks and currently we have,

84
00:04:48.016 --> 00:04:49.837
React is the furthest along.

85
00:04:49.837 --> 00:04:54.342
So you can take react apps,
react components, and use them in Qwik

86
00:04:54.342 --> 00:04:59.251
the most common use cases, people
take material UI widget libraries and

87
00:04:59.251 --> 00:05:03.211
wrap them in react Qwikify and
then run them inside a Qwik.

88
00:05:03.211 --> 00:05:06.514
Obviously you won't get all these magical,
lazy loading all that stuff for

89
00:05:06.514 --> 00:05:08.535
the components, but
we do lazy hydrate them.

90
00:05:08.535 --> 00:05:12.577
So in a way you get islands
architecture kind of for free.

91
00:05:12.577 --> 00:05:20.032
We also have the same thing for view, but
that's not as far along as the React one.

92
00:05:20.032 --> 00:05:25.820
But yeah, you can take React code and that
this is used both basically for re-using

93
00:05:25.820 --> 00:05:31.289
the open source libraries of react
ecosystem, but also as a migration story.

94
00:05:31.289 --> 00:05:36.274
The other thing we would like to do is to
have kind of a reverse proxy for nexus,

95
00:05:36.274 --> 00:05:41.262
so that you can have individual pages
inside of your nexus be served by Qwik and

96
00:05:41.262 --> 00:05:45.350
another way to kind of try things out and
see where you wanna go.

97
00:05:45.350 --> 00:05:46.437
Yeah.

98
00:05:46.437 --> 00:05:50.660
&gt;&gt; Are there any GraphQL
libraries around Qwik?

99
00:05:50.660 --> 00:05:55.242
&gt;&gt; There's nothing specific to Qwik, but
I think most GraphQL libraries should just

100
00:05:55.242 --> 00:05:59.704
work inside of it, because they they're
not dependent on a rendering, right?

101
00:05:59.704 --> 00:06:03.730
So, you should be able to just
import GraphQL library and run it.

102
00:06:03.730 --> 00:06:09.480
There is one thing to watch out for,
one things I've noticed

103
00:06:09.480 --> 00:06:14.452
is people love putting
things in use client effect.

104
00:06:14.452 --> 00:06:19.320
Which is fine, you can do that, but you in
a way you are undoing all this hard work

105
00:06:19.320 --> 00:06:24.352
of not doing stuff eagerly in the client,
so, kind of do it with caution, right?

106
00:06:24.352 --> 00:06:27.837
Recognize that, all this work
we've done to make sure we lazy

107
00:06:27.837 --> 00:06:32.608
load your application by doing use client
effect, you're kind of making it eager.

108
00:06:32.608 --> 00:06:35.453
So, just the things to consider.

109
00:06:35.453 --> 00:06:39.926
&gt;&gt; So, related to that because
I was thinking about the tree

110
00:06:39.926 --> 00:06:41.612
shaking of the data.

111
00:06:41.612 --> 00:06:46.429
And how you could prevent all
that extra not needed data from

112
00:06:46.429 --> 00:06:49.810
I traveling down the wire to your client.

113
00:06:49.810 --> 00:06:54.976
And it occurred to me that t the major
advantage of GraphQL in analog

114
00:06:54.976 --> 00:07:00.234
situations could go away as long
as you're fetching on the server,

115
00:07:00.234 --> 00:07:06.530
you're doing the transform and getting
to just what the client actually needs.

116
00:07:06.530 --> 00:07:11.190
So, your obviating them the need for
GraphQL in a huge number of situations.

117
00:07:11.190 --> 00:07:16.489
&gt;&gt; Yeah, I think that is one thing that's
gonna be happening over the next months

118
00:07:16.489 --> 00:07:21.870
and years is that people will rediscover
different patterns that work better or

119
00:07:21.870 --> 00:07:26.066
differently for
reasonability pursuit hydration, right?

120
00:07:26.066 --> 00:07:29.831
If you have the hydration mental model,
then you end up in different places, then,

121
00:07:29.831 --> 00:07:33.543
when you have the reasonability mental
model, you've been such a good audience,

122
00:07:33.543 --> 00:07:34.568
such good questions.

123
00:07:34.568 --> 00:07:36.223
This was so entertaining and so much fun.

124
00:07:36.223 --> 00:07:37.533
I enjoyed myself.

125
00:07:37.533 --> 00:07:43.163
&gt;&gt; [APPLAUSE]

