WEBVTT

1
00:00:00.580 --> 00:00:02.456
So let's kind of continue with this.

2
00:00:02.456 --> 00:00:08.003
So okay, we have this, so
let's add couple of things.

3
00:00:08.003 --> 00:00:11.622
So lets add an image here.

4
00:00:14.717 --> 00:00:22.009
So source equals, and
I think if I do contact.avatar,

5
00:00:22.009 --> 00:00:26.519
I will have pictures of us in here.

6
00:00:26.519 --> 00:00:28.433
Now these are obviously huge images.

7
00:00:28.433 --> 00:00:30.427
So let's see if we can do some styling,
right?

8
00:00:30.427 --> 00:00:35.106
So the next thing to do
is let's add index.css,

9
00:00:37.200 --> 00:00:43.439
And I'm gonna put them next to each other,
and we can import, let's close this.

10
00:00:43.439 --> 00:00:48.243
We can import the CSS by saying,
import CSS from

11
00:00:48.243 --> 00:00:52.942
/index.css and this is little white trick.

12
00:00:52.942 --> 00:00:57.441
So normally when you import css in byte,
sorry, byte,

13
00:00:57.441 --> 00:01:00.519
it actually inserts it into the head.

14
00:01:00.519 --> 00:01:03.129
And so we are trying to tell ve like the,
don't insert it in the head,

15
00:01:03.129 --> 00:01:04.398
I just want the content, right?

16
00:01:04.398 --> 00:01:07.913
So the question mark in line
is the way you say that.

17
00:01:07.913 --> 00:01:12.426
And the next part is you say use styled,

18
00:01:15.012 --> 00:01:18.839
And you passed on the CSS.

19
00:01:18.839 --> 00:01:23.440
So what this has done is that it tells
the system to scope the CSS to just me,

20
00:01:23.440 --> 00:01:27.450
just my component is the only
component that should be allowed to

21
00:01:27.450 --> 00:01:29.621
kind of modify this data, right?

22
00:01:29.621 --> 00:01:33.443
Sorry, the CSS only modifies
my component nothing else, and

23
00:01:33.443 --> 00:01:35.141
we can put styling in here.

24
00:01:35.141 --> 00:01:38.209
And of course, this is gonna get loaded,
so let's do that.

25
00:01:38.209 --> 00:01:42.838
So let's deal with the image first, so

26
00:01:42.838 --> 00:01:48.590
the image width,
I think should be 75 pixels,

27
00:01:48.590 --> 00:01:53.944
height 75 pixels, border radius 50%.

28
00:01:53.944 --> 00:01:55.218
Does that do the thing I want?

29
00:01:55.218 --> 00:01:55.722
Here we go.

30
00:01:55.722 --> 00:01:56.339
That's kind of big.

31
00:01:56.339 --> 00:01:57.632
Let's make me smaller.

32
00:02:02.490 --> 00:02:03.636
Here we go.

33
00:02:03.636 --> 00:02:09.016
So now we have images and
I think we need to,

34
00:02:09.016 --> 00:02:12.462
what is the vertical line?

35
00:02:12.462 --> 00:02:16.564
Middle is that yeah, here we go.

36
00:02:16.564 --> 00:02:18.756
My CSS skills are horrible.

37
00:02:18.756 --> 00:02:21.215
So the fact that I can do this,
I'm very impressed by myself.

38
00:02:21.215 --> 00:02:23.324
Okay, yeah.

39
00:02:23.324 --> 00:02:25.914
And then we have the Li and
we don't wanna dot in front of it.

40
00:02:25.914 --> 00:02:30.418
So I think it is Li list style now.

41
00:02:30.418 --> 00:02:32.654
Here we go.

42
00:02:32.654 --> 00:02:33.244
Okay, perfect.

43
00:02:33.244 --> 00:02:36.243
So now we just have
a list without the items.

44
00:02:36.243 --> 00:02:40.134
So let's look at what
actually happened in here.

45
00:02:40.134 --> 00:02:45.479
So notice, everybody that is our
component gets a special class.

46
00:02:45.479 --> 00:02:48.783
And then we inserted a style
tag in the correct location and

47
00:02:48.783 --> 00:02:51.087
everything is scoped to just our class.

48
00:02:51.087 --> 00:02:54.967
So even though we're talking about
an image in general, we're not,

49
00:02:54.967 --> 00:02:59.320
we know that it's gonna get scoped to
only our component, not the whole page.

50
00:02:59.320 --> 00:03:02.264
The other thing to kind of
understand is that this style tag,

51
00:03:02.264 --> 00:03:06.090
we didn't know about the style tag until
we started rendering the component.

52
00:03:06.090 --> 00:03:10.728
And so the style tag got inserted right at
the location where the component was about

53
00:03:10.728 --> 00:03:11.665
to be inserted.

54
00:03:11.665 --> 00:03:14.119
We made sure the style tag goes first.

55
00:03:14.119 --> 00:03:16.330
And then we inserted the component.

56
00:03:16.330 --> 00:03:19.218
And this is done because
when you start streaming,

57
00:03:19.218 --> 00:03:23.527
you don't know which components
are gonna be active, so to speak, right?

58
00:03:23.527 --> 00:03:25.476
And so in order to have stream ability,

59
00:03:25.476 --> 00:03:28.676
you wanna make sure that these
styles show up at the last minute.

60
00:03:28.676 --> 00:03:32.826
Now, if we included
the same component twice,

61
00:03:32.826 --> 00:03:36.054
we would only insert the style once.

62
00:03:36.054 --> 00:03:39.735
And there is now another problem which is
that, okay, let's say we insert it twice,

63
00:03:39.735 --> 00:03:42.206
but then on the client,
we remove one of the components.

64
00:03:42.206 --> 00:03:43.819
Should we remove the style or not?

65
00:03:43.819 --> 00:03:44.426
I don't know.

66
00:03:44.426 --> 00:03:48.653
So we have logic that takes the style and
actually moves it to the head.

67
00:03:48.653 --> 00:03:52.571
So it gets streamed inline, but
once the application starts running,

68
00:03:52.571 --> 00:03:56.112
the styles move to the head so
that they work as you would expect.

69
00:03:56.112 --> 00:03:59.820
And all of this is done because we wanna
make sure that streaming is something we

70
00:03:59.820 --> 00:04:00.953
support out of the box.

71
00:04:00.953 --> 00:04:07.153
Now, at this point, I wanna point out
that we can only stream things in order.

72
00:04:07.153 --> 00:04:10.124
But one of the features we're working
on is to be able to do out of

73
00:04:10.124 --> 00:04:11.031
order streaming.

74
00:04:11.031 --> 00:04:16.057
That is, imagine coming to this location,
imagine your database is slow.

75
00:04:16.057 --> 00:04:21.345
What if the resource was configured to
wait for, I don't know, 100 milliseconds.

76
00:04:21.345 --> 00:04:23.341
And if the data doesn't show up for
100 milliseconds, then it says,

77
00:04:23.341 --> 00:04:24.105
you know what, forget it.

78
00:04:24.105 --> 00:04:25.025
Let me continue.

79
00:04:25.025 --> 00:04:26.585
And it just renders loading and

80
00:04:26.585 --> 00:04:29.234
keeps going,
keeps rendering the rest of the page.

81
00:04:29.234 --> 00:04:34.105
And then when that particular section
is finally resolved, there will be

82
00:04:34.105 --> 00:04:39.369
a super tiny script tag inserted into your
HTML that says go back to the beginning

83
00:04:39.369 --> 00:04:43.866
of the HTML where you skip that bit and
replace it with this new HTML.

84
00:04:43.866 --> 00:04:47.396
And so in this way,
we're hoping to do out of order streaming,

85
00:04:47.396 --> 00:04:50.270
which is not something
that's possible just yet.

86
00:04:50.270 --> 00:04:55.888
But notice how the whole system is
basically set up with streaming in mind.

87
00:04:55.888 --> 00:04:59.097
We wanna make sure that we can
do streaming from day one.

88
00:04:59.097 --> 00:05:01.087
It's not an afterthought.

89
00:05:01.087 --> 00:05:08.807
It is fundamentally a core decision of how
things are done in this particular case.

90
00:05:08.807 --> 00:05:11.752
So now we would like to
only render some parts,

91
00:05:11.752 --> 00:05:14.254
we would like to implement the search.

92
00:05:14.254 --> 00:05:16.114
So we need to declare a state.

93
00:05:16.114 --> 00:05:21.855
And so we say const filter = useSignal.

94
00:05:21.855 --> 00:05:26.822
And initial signal is nothing.

95
00:05:26.822 --> 00:05:32.960
And then in here we wanna
say on is a change,

96
00:05:36.199 --> 00:05:41.794
Is a filtered at value equals

97
00:05:41.794 --> 00:05:46.927
event.target.value.

98
00:05:49.263 --> 00:05:54.508
So let me just print it out,
so right after the input.

99
00:05:54.508 --> 00:05:56.022
And I'll say filter.value.

100
00:06:02.756 --> 00:06:04.404
No, what did I mess up?

101
00:06:08.867 --> 00:06:10.377
No, it works.

102
00:06:10.377 --> 00:06:11.095
I see.

103
00:06:11.095 --> 00:06:12.663
It's not Onchange, it's on.

104
00:06:18.459 --> 00:06:23.987
Do you guys remember what is the input
thing to change on every character,

105
00:06:23.987 --> 00:06:28.910
it's not Onchange cuz Onchange
only does when I leave the field.

106
00:06:28.910 --> 00:06:30.636
There is one-
&gt;&gt; Oninput?

107
00:06:30.636 --> 00:06:32.482
&gt;&gt; Oninput, thank you.

108
00:06:32.482 --> 00:06:33.726
&gt;&gt; My God.

109
00:06:33.726 --> 00:06:38.085
&gt;&gt; Thank you, and now this doesn't

110
00:06:38.085 --> 00:06:42.606
know that it is HTML input, okay.

111
00:06:44.716 --> 00:06:47.012
Perfect, so as I type here, right,

112
00:06:47.012 --> 00:06:50.579
you can see that I'm data
binding on the other location.

113
00:06:50.579 --> 00:06:56.739
Obviously, let me refresh this again,
no JavaScript until I start typing, right?

114
00:06:56.739 --> 00:06:59.274
And we still don't have any data.

115
00:06:59.274 --> 00:07:01.410
So if I look at the qwik json,

116
00:07:01.410 --> 00:07:06.052
the only data we have is associated
with this filter, right?

117
00:07:06.052 --> 00:07:10.967
So this empty string right here
talks about the fact that,

118
00:07:10.967 --> 00:07:14.791
there is the useSignal
that was the empty state.

119
00:07:14.791 --> 00:07:16.567
But notice what's not showing up in here.

120
00:07:16.567 --> 00:07:22.247
What's not showing up over here, inside
of here is the list of users, right?

121
00:07:22.247 --> 00:07:26.114
That gets thrown away because the system
says, well, you can't modify this stuff.

122
00:07:26.114 --> 00:07:27.718
There's no way to render this stuff.

123
00:07:27.718 --> 00:07:33.062
And so why should we include
this inside of the UI?

124
00:07:33.062 --> 00:07:35.844
Actually, let's talk about one thing,
which I think is pretty cool.

125
00:07:35.844 --> 00:07:42.577
If you look at the network,
what downloaded is the listener, right?

126
00:07:42.577 --> 00:07:46.960
This is the code that I wrote right here,
this input right here, so

127
00:07:46.960 --> 00:07:49.622
that thing downloaded, and of course,

128
00:07:49.622 --> 00:07:54.498
the framework had to download because
that's running but nothing else.

129
00:07:54.498 --> 00:07:59.426
What we didn't download is,
for example, even this JSX.

130
00:07:59.426 --> 00:08:03.306
We can re-render this
component without the JSX for

131
00:08:03.306 --> 00:08:05.874
the component to be even present.

132
00:08:05.874 --> 00:08:07.671
And I think that's kind of cool.

133
00:08:07.671 --> 00:08:10.453
All right, so let's do the next bit.

134
00:08:10.453 --> 00:08:17.691
So the next bit is this filter right
here should only print if it's in there,

135
00:08:17.691 --> 00:08:22.004
so before we do a map,
we want to do .filter.

136
00:08:22.004 --> 00:08:29.603
And so the contact, and so
we wanna say contact.name,

137
00:08:29.603 --> 00:08:34.788
that to contact.name, why is this.

138
00:08:34.788 --> 00:08:39.138
Filter cc, what am I doing here?

139
00:08:39.138 --> 00:08:48.509
Yes, so C should be Sorry,
the arrow, sorry.

140
00:08:48.509 --> 00:08:54.811
Okay, so C.name, two lowercase,

141
00:08:54.811 --> 00:09:03.362
not index of filter.value.toLowerCase().

142
00:09:03.362 --> 00:09:07.178
If that is greater than -1, right,

143
00:09:07.178 --> 00:09:12.443
then we should keep it or
it goes gonna go backwards.

144
00:09:12.443 --> 00:09:13.514
Here you go.

145
00:09:13.514 --> 00:09:18.467
Oops, let me remove this part right here,
okay.

146
00:09:18.467 --> 00:09:20.796
So now, we have our filter, right?

147
00:09:20.796 --> 00:09:26.398
So if I search for
my name of course, my name shows up.

148
00:09:26.398 --> 00:09:29.464
If I search for a in Adam and
my name shows up, and so

149
00:09:29.464 --> 00:09:31.801
we have interactivity on the client.

150
00:09:31.801 --> 00:09:35.189
Now many things just changed with
that one single line of code.

151
00:09:35.189 --> 00:09:39.928
So first of all, notice that now
when we serialize the state,

152
00:09:39.928 --> 00:09:42.846
the serialized state is much bigger,

153
00:09:42.846 --> 00:09:47.790
we now have to include,
the serialization of the data, right?

154
00:09:47.790 --> 00:09:49.836
As a developer, you didn't have
to think about this, right?

155
00:09:49.836 --> 00:09:52.476
You were like,
I need to search this thing, and so bam.

156
00:09:52.476 --> 00:09:55.459
But what the framework did,
it was like, okay, well,

157
00:09:55.459 --> 00:09:57.625
now you are actually changing the data.

158
00:09:57.625 --> 00:10:02.521
You are gonna change what's listed,
and so now I have no choice but

159
00:10:02.521 --> 00:10:05.942
to also download the data
associated with it.

160
00:10:05.942 --> 00:10:08.690
And this is what we mean by
the data is tree-shakable, right?

161
00:10:08.690 --> 00:10:13.662
So if I remove,
if I comment out this filter, right,

162
00:10:13.662 --> 00:10:19.754
the filtering doesn't work but
also the data doesn't get sent.

163
00:10:19.754 --> 00:10:23.686
You see this data is essentially empty,
there's nothing in here.

164
00:10:23.686 --> 00:10:28.277
If I put it back in, now it works.

165
00:10:28.277 --> 00:10:30.296
But now the data is so much bigger.

166
00:10:30.296 --> 00:10:31.567
I have to include the stuff in there.

167
00:10:31.567 --> 00:10:34.927
Why is the refresh not working?

168
00:10:34.927 --> 00:10:40.890
Right, the data now that's being
included is much, much better.

169
00:10:40.890 --> 00:10:45.021
And so I think it's pretty cool
because you get to think about it.

