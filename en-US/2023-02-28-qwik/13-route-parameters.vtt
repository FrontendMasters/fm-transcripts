WEBVTT

1
00:00:00.583 --> 00:00:01.161
Yes.

2
00:00:01.161 --> 00:00:06.123
&gt;&gt; So going back to that original map,
you could easily just use object

3
00:00:06.123 --> 00:00:11.275
destructuring, and then you wouldn't
have to redeclare each prop.

4
00:00:11.275 --> 00:00:13.870
&gt;&gt; Yes, but
then you just copy everything over, right?

5
00:00:13.870 --> 00:00:16.987
&gt;&gt; Right, so
request handlers simply copy, gotcha.

6
00:00:16.987 --> 00:00:19.930
&gt;&gt; Yeah, you could do that.

7
00:00:19.930 --> 00:00:23.166
Okay, so next step is we probably
wanna be able to click on it.

8
00:00:23.166 --> 00:00:27.418
So instead of just having contact name,

9
00:00:27.418 --> 00:00:30.925
let's make this into an anchor.

10
00:00:40.937 --> 00:00:41.805
Yeah.

11
00:00:43.426 --> 00:00:47.458
Sorry, okay, so now we added an anchor.

12
00:00:47.458 --> 00:00:50.624
And in this particular case,
let's navigate to /contacts.

13
00:00:54.450 --> 00:00:59.165
Slash, and let's do contact.id.

14
00:01:05.042 --> 00:01:10.224
Okay, as of right now, this route
navigation is not typesafe, right?

15
00:01:10.224 --> 00:01:12.422
If I do a typo, it will not stop me.

16
00:01:12.422 --> 00:01:16.933
But one of the feature we're working
on is to make sure that it is typesafe.

17
00:01:16.933 --> 00:01:20.989
So type safety for
route navigations will be coming soon,

18
00:01:20.989 --> 00:01:25.809
just like there's a type safety for
the data that the onGet returns.

19
00:01:25.809 --> 00:01:29.473
We will have type safety for
the navigation over here.

20
00:01:29.473 --> 00:01:34.666
So all I'm saying here now is that I can
now click on any of these icons, right?

21
00:01:34.666 --> 00:01:39.383
And this will take me to a new URL,
which is contacts/mhevery.

22
00:01:39.383 --> 00:01:41.717
Now, that URL is not created.

23
00:01:41.717 --> 00:01:43.384
So let's create that URL.

24
00:01:43.384 --> 00:01:46.058
So we need to have that route.

25
00:01:46.058 --> 00:01:47.823
So what do you think we're gonna do here?

26
00:01:50.048 --> 00:01:52.119
&gt;&gt; Do you use a bracket notation or
something like that?

27
00:01:52.119 --> 00:01:55.089
&gt;&gt; That's right, so

28
00:01:55.089 --> 00:02:00.662
contactid/index.tsx, right?

29
00:02:00.662 --> 00:02:07.882
And, again,
we just do export default, component.

30
00:02:14.760 --> 00:02:16.511
Sure, TODO sounds good.

31
00:02:16.511 --> 00:02:23.220
So now if we go here and refresh this,
it is having issues, okay, start it.

32
00:02:23.220 --> 00:02:27.657
Now it just shows TODO, right, because
that's all I created for the route.

33
00:02:29.493 --> 00:02:34.249
So the thing to do now is to use the chunk
of the URL we would call params.

34
00:02:34.249 --> 00:02:37.051
And then extract that somehow and

35
00:02:37.051 --> 00:02:42.165
then deliver the correct person for
this URL, makes sense?

36
00:02:42.165 --> 00:02:44.009
Let me know if it's
a good time to continue.

37
00:02:46.960 --> 00:02:51.992
So again, we're gonna do export
const onGet, which is gonna be

38
00:02:51.992 --> 00:02:58.903
a request handler,
Which is gonna return a contact,

39
00:02:58.903 --> 00:03:03.990
which will be async function
that will do some stuff.

40
00:03:03.990 --> 00:03:10.332
And so the thing we wanna return
here is we wanna go to contacts and

41
00:03:10.332 --> 00:03:18.123
we wanna filter it and, Let's see,
does the autopilot do the right thing?

42
00:03:18.123 --> 00:03:22.081
Let's see, the contactId is the, wow,

43
00:03:22.081 --> 00:03:26.847
autopilot, that's amazing,
you got it right.

44
00:03:26.847 --> 00:03:29.952
At what point is our job
gonna not be have a job here?

45
00:03:32.127 --> 00:03:36.227
Okay, so
this returns now a contact for us.

46
00:03:36.227 --> 00:03:38.950
So now we can grab the contact,
let's say, endpoint.

47
00:03:42.088 --> 00:03:44.673
Wow, this needs to be imported.

48
00:03:46.536 --> 00:03:50.095
And so now in here,

49
00:03:50.095 --> 00:03:55.661
we can say JSON.stringify.

50
00:04:00.321 --> 00:04:04.088
Sorry, that's an endpoint, so
we have to do a resource first.

51
00:04:08.334 --> 00:04:14.437
Resource, Value is endpoint,

52
00:04:16.650 --> 00:04:21.183
onPending is,

53
00:04:29.987 --> 00:04:38.152
Okay, onResolved is,
What are we gonna do on resolved?

54
00:04:39.968 --> 00:04:44.729
I've got a contact here, and for now,

55
00:04:44.729 --> 00:04:49.924
let's just do JSON.stringify contact,

56
00:04:49.924 --> 00:04:52.965
keep it simple, right?

57
00:04:52.965 --> 00:04:58.148
So now, you see that if I navigate to this
particular URL, this is the data for me.

58
00:04:58.148 --> 00:05:01.889
If I go back and I navigate to Steve,
I will get Steve, and so on and so

59
00:05:01.889 --> 00:05:02.821
forth, right?

60
00:05:02.821 --> 00:05:06.528
So there's different URLs that that
show up for this particular path.

61
00:05:06.528 --> 00:05:10.435
Pretty straightforward, onGet,
we go to our fake database.

62
00:05:10.435 --> 00:05:13.942
We retrieve our item
from the fake database.

63
00:05:16.057 --> 00:05:19.589
And that's the data that's gonna be
used for rendering the component.

64
00:05:19.589 --> 00:05:22.956
And the component gets a hold
of this data on useEndpoint, and

65
00:05:22.956 --> 00:05:24.463
all of this magic happens.

66
00:05:31.078 --> 00:05:32.258
Yes.

67
00:05:32.258 --> 00:05:34.098
&gt;&gt; Can you do multiple onGets?

68
00:05:35.613 --> 00:05:37.590
&gt;&gt; No, you can only have one onGet.

69
00:05:37.590 --> 00:05:44.200
The idea is inside your onGet, you can
talk to as many databases as you want.

70
00:05:44.200 --> 00:05:47.467
But you wanna return just one dataset,
right?

71
00:05:47.467 --> 00:05:52.355
So nothing's stopping you
inside of the onGet to talk to

72
00:05:52.355 --> 00:05:55.373
five different storage systems.

73
00:05:55.373 --> 00:05:55.904
[COUGH] But

74
00:05:55.904 --> 00:06:00.098
you wanna assemble it as a single data
packet that you return to the client.

75
00:06:04.318 --> 00:06:09.075
All right, so let's print out this thing.

76
00:06:12.396 --> 00:06:13.372
Let's do a div here.

77
00:06:18.416 --> 00:06:21.707
Okay, so we wanna print an image.

78
00:06:26.861 --> 00:06:35.016
C.avatar, span c.name.

79
00:06:38.889 --> 00:06:46.197
That's image,

80
00:06:46.197 --> 00:06:51.939
my mistake,

81
00:06:51.939 --> 00:06:57.161
here we go.

82
00:06:57.161 --> 00:06:58.769
So we have our image.

83
00:07:10.826 --> 00:07:16.071
So then let me see if I remember
it from the other place.

84
00:07:16.071 --> 00:07:19.160
ContactSearchPane, no,
that's not in contact.

85
00:07:21.443 --> 00:07:24.482
I am cheating from existing
code contact details.

86
00:07:31.915 --> 00:07:33.234
Here we go.

87
00:07:38.712 --> 00:07:41.145
This is LinkedIn.

88
00:07:46.959 --> 00:07:52.841
So this is LinkedIn, GitHub, Twitter,

89
00:07:52.841 --> 00:07:57.217
except the image is LinkedIn.

90
00:08:03.969 --> 00:08:06.370
This is GitHub.

91
00:08:10.524 --> 00:08:15.985
I will push all that into,
where's Twitter?

92
00:08:15.985 --> 00:08:19.995
Here we go, no?

93
00:08:19.995 --> 00:08:21.269
Here we go.

94
00:08:28.403 --> 00:08:31.461
Okay, how does that look like?

95
00:08:31.461 --> 00:08:32.944
Why am I there twice?

96
00:08:37.152 --> 00:08:39.037
Cuz I'm typing myself twice here.

97
00:08:41.494 --> 00:08:46.722
Okay, [COUGH] so
it needs a little bit of styling.

98
00:08:46.722 --> 00:08:53.014
Yes, and also these URLs,
these things are supposed to be links.

99
00:08:53.014 --> 00:08:58.844
So that actually becomes, Not span,

100
00:08:58.844 --> 00:09:03.682
this becomes a, href c.linked.

101
00:09:03.682 --> 00:09:05.809
And then here, we just wanna do last.

102
00:09:10.027 --> 00:09:15.934
Function last url string returns string.

103
00:09:15.934 --> 00:09:17.971
Wow, autopilot is amazing.

104
00:09:17.971 --> 00:09:19.130
How does it know that?

105
00:09:34.020 --> 00:09:38.471
Okay, why are you complaining?

106
00:09:40.927 --> 00:09:43.815
[COUGH] this is actually
an interesting error.

107
00:09:43.815 --> 00:09:46.068
It's worth talking about.

108
00:09:46.068 --> 00:09:50.960
So what I did over here is completely
normal, but I notice it's complaining.

109
00:09:50.960 --> 00:09:54.372
And the complaint over here
basically says, it's like, look,

110
00:09:54.372 --> 00:09:56.122
you're trying to refer to last.

111
00:09:56.122 --> 00:09:59.981
But last is a function
that's not exported.

112
00:09:59.981 --> 00:10:03.754
And I am over here
inside of a dollar sign.

113
00:10:03.754 --> 00:10:08.882
And so this thing will be lazy loaded
from some other URL somewhere.

114
00:10:08.882 --> 00:10:10.497
And so this code is gonna get moved.

115
00:10:10.497 --> 00:10:15.406
So how in the world am I supposed
to get hold of last if you do this?

116
00:10:15.406 --> 00:10:19.210
And so this is one of those things where
you have to be like, yes, export, right?

117
00:10:19.210 --> 00:10:26.493
So now it's happy because,
this could be undefined.

118
00:10:26.493 --> 00:10:28.950
Okay, so let me make this undefined, too.

119
00:10:37.265 --> 00:10:43.750
&gt;&gt; Could you just do optional branch,
optional cheating operator there?

120
00:10:43.750 --> 00:10:44.960
&gt;&gt; Yeah, what is it?

121
00:10:46.360 --> 00:10:47.320
What is it, is it like this?

122
00:10:47.320 --> 00:10:49.030
No, I guess.

123
00:10:49.030 --> 00:10:49.870
&gt;&gt; You just add, yeah.

124
00:10:49.870 --> 00:10:50.479
&gt;&gt; Yeah, sorry.

125
00:10:52.720 --> 00:10:54.048
Typescript's not my strong point.

126
00:10:54.048 --> 00:10:57.778
[LAUGH] [COUGH] No, it disappeared.

127
00:10:57.778 --> 00:10:59.326
Hold on, what did we do wrong here?

128
00:11:01.233 --> 00:11:02.785
URL.

129
00:11:07.740 --> 00:11:08.910
Why don't we see it?

130
00:11:11.030 --> 00:11:12.839
What am I missing here, last?

131
00:11:19.266 --> 00:11:20.890
Yeah, the link is there.

132
00:11:23.774 --> 00:11:27.155
Because it ends in a slash,
duh, okay, okay, okay, okay.

133
00:11:27.155 --> 00:11:28.576
It's a little more complicated.

134
00:11:28.576 --> 00:11:30.310
You know what,
I'm just gonna steal it from here.

135
00:11:32.668 --> 00:11:33.763
Yeah, here we go.

136
00:11:39.374 --> 00:11:43.410
Okay, so this just takes the last
chunk out of the list, right?

137
00:11:43.410 --> 00:11:46.921
Here we go.
[COUGH] So now the same thing,

138
00:11:46.921 --> 00:11:51.936
let's move the code to be the same for
GitHub.

139
00:11:59.337 --> 00:12:03.298
And same code for Twitter.

140
00:12:08.069 --> 00:12:09.965
Yep, all of the pieces are there.

141
00:12:09.965 --> 00:12:11.420
So let's do some styling.

142
00:12:22.170 --> 00:12:28.063
You have to import, wow,
so good, autopilot.

143
00:12:31.063 --> 00:12:35.713
StylesScoped.

144
00:12:38.297 --> 00:12:42.624
Okay, so .icon is width,

145
00:12:42.624 --> 00:12:47.328
I don't know, 40 pixels,

146
00:12:47.328 --> 00:12:51.102
height, 40 pixels.

147
00:12:53.430 --> 00:12:56.951
No, it's still big, 20?

148
00:12:58.746 --> 00:13:00.085
There we go.

149
00:13:00.085 --> 00:13:05.674
It has to be vertical-align middle.

150
00:13:05.674 --> 00:13:11.015
Yep, and
then the image on the top is just image.

151
00:13:13.854 --> 00:13:19.493
So let's say this is class, avatar.

152
00:13:29.169 --> 00:13:31.585
Let's make this 75.

153
00:13:38.232 --> 00:13:40.334
Yeah, ship it?

154
00:13:40.334 --> 00:13:45.454
[LAUGH]
&gt;&gt; Let's write some tests first,

155
00:13:45.454 --> 00:13:46.295
but then yes.

156
00:13:46.295 --> 00:13:52.859
&gt;&gt; [LAUGH] margin-right.

157
00:14:06.820 --> 00:14:07.466
All right,

158
00:14:07.466 --> 00:14:11.542
I'm gonna call it as good as I'm gonna
get given my styling capabilities.

