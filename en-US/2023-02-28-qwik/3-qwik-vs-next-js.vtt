WEBVTT

1
00:00:00.330 --> 00:00:04.467
Yeah, I was actually going to
ask you to try and compare and

2
00:00:04.467 --> 00:00:11.190
contrast that against the React Server
Components and streaming HTML with Nextjs.

3
00:00:11.190 --> 00:00:15.653
&gt;&gt; Right, so React Server Components,
I think React server components is

4
00:00:15.653 --> 00:00:19.100
like a mini-framework inside
of the React ecosystem.

5
00:00:19.100 --> 00:00:24.235
And what I mean by that is, React Server
Components have special rules, right?

6
00:00:24.235 --> 00:00:26.479
If you have a React Server Component,
first of all,

7
00:00:26.479 --> 00:00:28.475
you still need to ship the framework,
right?

8
00:00:28.475 --> 00:00:33.233
So with React Server Components,
framework is still have has to be shipped.

9
00:00:33.233 --> 00:00:37.777
The next problem is, you can have a React
Server Component as a top level component,

10
00:00:37.777 --> 00:00:42.385
which can include other Reacts Components,
and can include client components, but

11
00:00:42.385 --> 00:00:45.845
client components cannot include
a Server Component, right?

12
00:00:45.845 --> 00:00:46.625
So it's a one way trip.

13
00:00:47.655 --> 00:00:51.480
And it also means that, when a React
Server Component calls into the client

14
00:00:51.480 --> 00:00:54.465
component, you cannot pass in functions.

15
00:00:54.465 --> 00:00:58.625
And passing functions around is
a very common thing to do, right?

16
00:00:58.625 --> 00:01:01.874
The next problem is,
React Server Components cannot have state,

17
00:01:01.874 --> 00:01:05.704
they cannot have listeners, whereas
the client components can have state and

18
00:01:05.704 --> 00:01:09.649
can have listeners, but
their client side rendered, right?

19
00:01:09.649 --> 00:01:12.829
And so there's a lot of these
different constraints in there.

20
00:01:12.829 --> 00:01:15.096
Qwik the one way to think
about Qwik is that,

21
00:01:15.096 --> 00:01:18.173
there is no distinction between
the server and the client.

22
00:01:18.173 --> 00:01:22.504
And Qwik has this interesting property
where a component can start up on

23
00:01:22.504 --> 00:01:25.762
a server and then yet
continue execution on a client.

24
00:01:25.762 --> 00:01:28.886
So there's very kind of, it's almost
like every component is a server

25
00:01:28.886 --> 00:01:31.554
side component and
a client side component at the same time.

26
00:01:31.554 --> 00:01:36.228
So you can get all the benefits of
React Server Components with QUIC, but

27
00:01:36.228 --> 00:01:41.820
you can also have listeners, you can also
pass in functions, you can also basically,

28
00:01:41.820 --> 00:01:46.520
do all of these pieces that are not
possible in React Server Components.

29
00:01:46.520 --> 00:01:51.078
And there is no kind of constraint of
like, a React Server Component can

30
00:01:51.078 --> 00:01:54.928
include the client, but
the client cannot include the server,

31
00:01:54.928 --> 00:01:57.867
none of these constraints
kind of exist in QUIC.

32
00:01:57.867 --> 00:02:01.953
And so, I think from that point of view,
it's just a much better mental model.

33
00:02:01.953 --> 00:02:04.896
And having said that React Server
Components still require you to do

34
00:02:04.896 --> 00:02:08.159
hydration for the client components,
so you can't skip on that, right?

35
00:02:08.159 --> 00:02:10.588
Whereas, Qwik doesn't do that.

36
00:02:10.588 --> 00:02:14.188
And so, React Server Components are
definitely a step in the right direction,

37
00:02:14.188 --> 00:02:15.327
and it's improving it.

38
00:02:15.327 --> 00:02:18.845
And it's probably the best you can
do given the constraints of legacy,

39
00:02:18.845 --> 00:02:22.991
existing technology's without
breaking the backwards compatibility.

40
00:02:22.991 --> 00:02:27.726
But quickly just basically says,
let's start a new and

41
00:02:27.726 --> 00:02:30.961
specifically have this goal in mind.

42
00:02:31.961 --> 00:02:35.761
And so this is kind of how
Qwik is different, right?

43
00:02:35.761 --> 00:02:38.360
And, yeah, so
using mobility causes the old one,

44
00:02:38.360 --> 00:02:41.639
meaning that it doesn't matter
how big your application gets.

45
00:02:41.639 --> 00:02:46.815
The amount of code that is initially
executed on a client is one.

46
00:02:46.815 --> 00:02:52.795
And a lot of times we talk about
lazy loading of JavaScript.

47
00:02:52.795 --> 00:02:55.570
But really, I think that misses
the point and confuses a lot of people,

48
00:02:55.570 --> 00:02:58.621
because then people immediately go
down the path of like, that means that

49
00:02:58.621 --> 00:03:02.000
if I'm gonna slow connection, I click
a button, I have to wait for it, right?

50
00:03:02.000 --> 00:03:04.736
No, it's not about lazy
loading of JavaScript,

51
00:03:04.736 --> 00:03:07.940
it is about lazy execution of JavaScript.

52
00:03:07.940 --> 00:03:12.213
Imagine the world where you upfront
download all the JavaScript eagerly just

53
00:03:12.213 --> 00:03:16.300
like you do in the current system,
but you just don't have to execute it.

54
00:03:16.300 --> 00:03:20.297
That's really what Qwik is about, right?

55
00:03:20.297 --> 00:03:22.803
We can also break up JavaScript,
we can also lazy loaded,

56
00:03:22.803 --> 00:03:26.140
we can do all this other magic with it,
but it's not the really amazing part.

57
00:03:26.140 --> 00:03:30.172
The amazing part is, you don't have to
eagerly execute all the code that's being

58
00:03:30.172 --> 00:03:33.700
downloaded, and that's what
gives it the superpower, right?

59
00:03:33.700 --> 00:03:38.472
Because when you go to an existing system
like React Server Components, even if you

60
00:03:38.472 --> 00:03:43.107
download the framework, and even if all
the JavaScript is eagerly available and

61
00:03:43.107 --> 00:03:48.350
on the client and ready to go because
it's the second time you visit it, right?

62
00:03:48.350 --> 00:03:51.396
Even in that case,
you still have to go through hydration and

63
00:03:51.396 --> 00:03:54.060
all of the execution and download, etc.

64
00:03:54.060 --> 00:03:57.113
And none of that stuff has
to happen with QUIC, Mark.

65
00:03:57.113 --> 00:04:02.013
&gt;&gt; Is that why something like Next.js
ships a ton of state in the HTML?

66
00:04:02.013 --> 00:04:06.813
&gt;&gt; So when you use something like Next.js,
right, in order for

67
00:04:06.813 --> 00:04:09.396
the hydration to be able to work,

68
00:04:09.396 --> 00:04:14.771
one of the things that hydration
requires is the state of the system.

69
00:04:14.771 --> 00:04:19.061
In other words,
is the menu open or closed?

70
00:04:19.061 --> 00:04:22.217
If it's a contact list,
what are the contacts available?

71
00:04:22.217 --> 00:04:26.968
So when hydration happens, the state
of the app is already on the client so

72
00:04:26.968 --> 00:04:33.047
that you don't have to go fetch the state
of the system from the server, right?

73
00:04:33.047 --> 00:04:36.073
So Next.js basically ships
what they call next data,

74
00:04:36.073 --> 00:04:40.239
I believe, which is basically
the serialized state of your application.

75
00:04:40.239 --> 00:04:44.255
Qwik does something very similar,
Qwik also ships the state,

76
00:04:44.255 --> 00:04:48.799
but there is a big difference in that,
Next.js, or basically, all of

77
00:04:48.799 --> 00:04:53.842
the existing framework, not just Next.js
can only ship the state of the app.

78
00:04:53.842 --> 00:04:56.911
But if you think about it,
there is additional state in the system.

79
00:04:56.911 --> 00:04:58.462
The framework itself has stayed,

80
00:04:58.462 --> 00:05:02.005
the framework needs to know where
are the component boundaries?

81
00:05:02.005 --> 00:05:03.889
Where are the listeners?

82
00:05:03.889 --> 00:05:05.405
What are the listeners, right?

83
00:05:05.405 --> 00:05:08.901
So if I click over here,
what exactly am I supposed to do?

84
00:05:08.901 --> 00:05:13.333
And all of these bits are not
shipped with existing frameworks.

85
00:05:13.333 --> 00:05:16.318
And so, the framework has to
get hold of this bit somehow.

86
00:05:16.318 --> 00:05:21.494
And so the way you get hold of these bits,
is that, you re-execute the application.

87
00:05:21.494 --> 00:05:26.346
And as the application is re-executed,
the framework collects information about

88
00:05:26.346 --> 00:05:29.831
the component boundaries,
about where the listeners are,

89
00:05:29.831 --> 00:05:34.029
about the reactivity graph, or
what have you about the system.

90
00:05:34.029 --> 00:05:36.047
And once the application
finishes executing,

91
00:05:36.047 --> 00:05:39.478
the framework is like, now that I know
everything about your application,

92
00:05:39.478 --> 00:05:42.528
now I can do my magic,
can be useful for you, right?

93
00:05:42.528 --> 00:05:47.203
And so, the trick that Qwik does is that
not only is it sterilized the application

94
00:05:47.203 --> 00:05:50.318
state, but
it also serializes the framework state.

95
00:05:51.358 --> 00:05:54.446
And that's the magical bit that
allows us to do reasonability.

96
00:05:54.446 --> 00:05:58.583
Just like Next.js can
resume the application from

97
00:05:58.583 --> 00:06:02.729
the state that's serialized in the JSON,
right?

98
00:06:02.729 --> 00:06:06.264
The state of the application is resumed,
but it doesn't know how to

99
00:06:06.264 --> 00:06:09.435
resume the framework,
it must execute all the JavaScript.

100
00:06:09.435 --> 00:06:13.593
We just took the step further and said,
not only can we resume the application,

101
00:06:13.593 --> 00:06:16.841
in other words,
we have this application state serialized.

102
00:06:16.841 --> 00:06:20.647
We've also serialized location of
the listeners, the reactivity graph,

103
00:06:20.647 --> 00:06:23.745
we basically serialize everything
we need about the system.

104
00:06:25.485 --> 00:06:27.595
And that's what reasonability is right?

105
00:06:27.595 --> 00:06:30.158
So, let's let's look at a simple example.

106
00:06:30.158 --> 00:06:33.560
Let's say it's a shopping cart, there's a
button that says Add to shopping cart and

107
00:06:33.560 --> 00:06:35.557
there's a shopping cart
in the corner over here.

108
00:06:35.557 --> 00:06:39.214
Clicking the button that required that the
shopping cart updates with from 0 items to

109
00:06:39.214 --> 00:06:39.985
1 item, right?

110
00:06:41.866 --> 00:06:45.856
The way existing systems work is great,
I have the shot the data for

111
00:06:45.856 --> 00:06:49.062
the fact that this is a shoo
in serialized into JSON and

112
00:06:49.062 --> 00:06:53.426
I know the price of the shoes
utilizing the JSON and all that stuff.

113
00:06:53.426 --> 00:06:57.736
All of those things are in
the JSON in the next data bit.

114
00:06:57.736 --> 00:07:01.671
That's easy, but where are the listeners?

115
00:07:01.671 --> 00:07:03.991
How do I know that I need to
go update the shopping cart?

116
00:07:03.991 --> 00:07:06.231
That information is not in the JSON.

117
00:07:06.231 --> 00:07:09.904
And so, what the framework has to
do is execute the application.

118
00:07:09.904 --> 00:07:14.038
But it's not just about executing
the application, is like,

119
00:07:14.038 --> 00:07:16.768
you don't know where the listeners are.

120
00:07:16.768 --> 00:07:19.761
And the only way to do that is to
start at the root component and

121
00:07:19.761 --> 00:07:23.574
visit every single component on a page and
say, where's your listeners?

122
00:07:23.574 --> 00:07:25.194
Can you give them over to me, right?

123
00:07:25.194 --> 00:07:28.394
And that execution is the thing
that's hard and expensive.

124
00:07:28.394 --> 00:07:31.684
And once you execute everything,
then the framework knows,

125
00:07:31.684 --> 00:07:35.764
when you click this button,
I have to update the shopping cart, right?

126
00:07:35.764 --> 00:07:40.664
So if you can somehow serialize this
information on a server then on

127
00:07:40.664 --> 00:07:45.652
the client, Qwik is resumable,
because it says, I need nothing,

128
00:07:45.652 --> 00:07:47.944
you click on a button, great.

129
00:07:47.944 --> 00:07:51.959
I wake up the listener for clicking on
the button and that listener goes and

130
00:07:51.959 --> 00:07:53.598
mutates a particular state.

131
00:07:53.598 --> 00:07:55.005
And because I have a reactivity graph,

132
00:07:55.005 --> 00:07:57.704
I understand that that state is connected
to the shopping cart over there.

133
00:07:57.704 --> 00:08:00.189
So now,
I know I have to go wake up the shopping.

134
00:08:00.189 --> 00:08:03.254
And so I wake up the shopping cart
re-render, the shopping cart and I'm done.

135
00:08:03.254 --> 00:08:07.555
I didn't have to touch rest of the system,
it doesn't matter how complex the rest of

136
00:08:07.555 --> 00:08:11.744
the page was, and how many complicated
menu systems you had over there.

137
00:08:11.744 --> 00:08:15.824
I only had to wake up the button and
the shopping cart and nothing else.

138
00:08:15.824 --> 00:08:17.104
I think Mark had a question.

139
00:08:17.104 --> 00:08:22.367
&gt;&gt; Yeah, so Josh was just clarifying that,
so next data can be large, but

140
00:08:22.367 --> 00:08:27.838
even if download isn't the problem,
the problem is the execution time.

141
00:08:27.838 --> 00:08:31.342
&gt;&gt; Yes,
speaking about this next data being large,

142
00:08:31.342 --> 00:08:35.237
one of the things that Qwik can
do is that it can tree shake it.

143
00:08:35.237 --> 00:08:40.292
In other words, Qwik can look at
the data that the application have,

144
00:08:40.292 --> 00:08:45.173
and then recognize the fact that
certain parts of the data can never

145
00:08:45.173 --> 00:08:47.103
be updated in the client.

146
00:08:47.103 --> 00:08:49.969
And therefore,
that data never has to be shipped,

147
00:08:49.969 --> 00:08:54.581
because there is no code path that exists
that would allow you to modify that data.

148
00:08:54.581 --> 00:08:57.018
And because there's no code
path that modifies the data,

149
00:08:57.018 --> 00:09:00.216
there is no code path that will cause
a particular component to re-render.

150
00:09:00.216 --> 00:09:03.274
And because the component never
re-renders, why are you shipping the data?

151
00:09:03.274 --> 00:09:06.327
Like, for example,
let's take the title of the shoe.

152
00:09:06.327 --> 00:09:10.269
Let's say we're in a shopping cart,
there's a shoe.

153
00:09:10.269 --> 00:09:15.064
If I cannot change the title of the shoe
or the item I'm looking at, and

154
00:09:15.064 --> 00:09:18.480
that will never cause
the product to re-render,

155
00:09:18.480 --> 00:09:23.633
why am I shipping the information about
that shoe into the client, right?

156
00:09:23.633 --> 00:09:28.905
It's already in the HTML and
I can't edit it, and so let's not ship it.

157
00:09:28.905 --> 00:09:33.910
So Qwik basically allows you to tree
shake the data set that you're sending

158
00:09:33.910 --> 00:09:39.163
to the client, so that only the data
that's actually modifiable can be sent.

159
00:09:39.163 --> 00:09:41.879
Tools like Next.js don't
know how to do that.

160
00:09:41.879 --> 00:09:44.339
And as a result,
they just send everything.

161
00:09:44.339 --> 00:09:47.859
And so, the HTML gets huge, sorry,
the JSON in HTML gets huge.

