WEBVTT

1
00:00:00.350 --> 00:00:04.390
Can you clarify where the border
between server and client code is?

2
00:00:04.390 --> 00:00:08.539
Are there any best practices
around separating out the logic or

3
00:00:08.539 --> 00:00:12.420
is it a single file component recommended?

4
00:00:12.420 --> 00:00:13.720
&gt;&gt; Yeah, so where are the borders?

5
00:00:13.720 --> 00:00:21.720
This is kind of the, let's see,
let's go to the index file right here.

6
00:00:21.720 --> 00:00:25.464
So, this is, this page right here
that we're looking at over here.

7
00:00:25.464 --> 00:00:30.440
[COUGH] So, the onget will for
sure execute only on a server.

8
00:00:32.340 --> 00:00:35.040
There's no question about that
because of the way it is.

9
00:00:35.040 --> 00:00:38.918
And we actually make sure that even if
you try to import and refer to this

10
00:00:38.918 --> 00:00:43.220
file from somewhere else, the optimizer
will prevent that from happening.

11
00:00:43.220 --> 00:00:48.147
So, you are guaranteed that onget
will never get to the client because

12
00:00:48.147 --> 00:00:50.410
it's never gets to the client.

13
00:00:52.850 --> 00:00:57.180
The component on the other hand, this
component can run both on the client and

14
00:00:57.180 --> 00:00:58.150
on a server.

15
00:00:58.150 --> 00:01:02.992
In this particular case, it runs only on
a server, but part of it runs both on

16
00:01:02.992 --> 00:01:07.985
a server, on a client, for example,
the filtering part and this input causes

17
00:01:07.985 --> 00:01:13.600
the component to initially run on
a server when it's initially rendered.

18
00:01:13.600 --> 00:01:17.410
And then run again on the client when
I start typing into the search box.

19
00:01:17.410 --> 00:01:19.520
So, it's a very kind of a mixed mode,
right?

20
00:01:19.520 --> 00:01:24.670
So, I can't say that this component is
purely server, or it's purely client.

21
00:01:24.670 --> 00:01:28.755
It starts its life on a server, but then
it transitions to the client execution.

22
00:01:31.751 --> 00:01:35.280
And so, by the way,
let's show you something.

23
00:01:35.280 --> 00:01:36.850
Let's go to Layout.

24
00:01:36.850 --> 00:01:41.880
And just for fun, in the Layout,
it says made by us.

25
00:01:41.880 --> 00:01:51.280
And so let's print out,
let's say, timestamp that value.

26
00:01:51.280 --> 00:01:58.399
So, we have to create a const timestamp.

27
00:01:58.399 --> 00:02:02.864
Timestamp is use signal and

28
00:02:02.864 --> 00:02:07.136
start with empty think and

29
00:02:07.136 --> 00:02:11.805
then say use client effect.

30
00:02:15.676 --> 00:02:21.395
And then we want to do that but
we want to do this function update.

31
00:02:23.641 --> 00:02:28.307
And then we want to say set interval
every one second, and of course,

32
00:02:28.307 --> 00:02:30.969
initially we have to do update as well.

33
00:02:30.969 --> 00:02:36.064
Okay, so timestamp value equals.

34
00:02:37.073 --> 00:02:40.160
Okay, I need this.

35
00:02:41.510 --> 00:02:42.960
Timestamp, molly, why are you complaining?

36
00:02:45.140 --> 00:02:47.580
Timestamp is a signal, yeah?

37
00:02:52.289 --> 00:02:54.770
&gt;&gt; You no longer have to access stuff.

38
00:02:54.770 --> 00:02:59.784
&gt;&gt; Sorry, I imported timestamp
that was not what I wanted,

39
00:02:59.784 --> 00:03:03.868
and it's okay,
I did not put the same casing.

40
00:03:03.868 --> 00:03:05.490
There we go, okay.

41
00:03:07.810 --> 00:03:11.680
So, now you can see that there is a clock
here on the bottom that updates, so

42
00:03:11.680 --> 00:03:14.530
maybe instead of two string, what is it?

43
00:03:14.530 --> 00:03:16.421
There's a shorter version to it.

44
00:03:16.421 --> 00:03:20.675
It's two ISO string.

45
00:03:23.938 --> 00:03:27.050
Is it to locale, what is it?

46
00:03:28.590 --> 00:03:31.950
localeTimestream, let's do that.

47
00:03:33.260 --> 00:03:33.840
&gt;&gt; Here we go.

48
00:03:33.840 --> 00:03:34.430
That sounds good.

49
00:03:34.430 --> 00:03:37.610
And I'm just going to wrap
it in div because why not?

50
00:03:42.130 --> 00:03:43.030
There we go.

51
00:03:43.030 --> 00:03:46.130
So, now we have a time over there
that updates every one second, right?

52
00:03:46.130 --> 00:03:47.380
So, now this component.

53
00:03:49.120 --> 00:03:53.949
This code right here, has to download
it eagerly all the time, right?

54
00:03:55.640 --> 00:04:00.254
And so if I go to the network tab and I
show just the JavaScript, no matter how I

55
00:04:00.254 --> 00:04:05.162
refresh, I immediately have that code
showing up because, well, you said that

56
00:04:05.162 --> 00:04:10.340
you wanted to update every one second,
and so I have no choice but doing this.

57
00:04:10.340 --> 00:04:14.760
But let me show you something else,
which I think is let me zoom this in.

58
00:04:16.360 --> 00:04:21.086
I like this level and refresh all because
it's a top level component, okay,

59
00:04:21.086 --> 00:04:25.885
that's not going to work sorry let me
refractor this slightly to make it work so

60
00:04:25.885 --> 00:04:29.665
the problem is this whole component
is always visible, and so

61
00:04:29.665 --> 00:04:32.126
I am going to make a new component here.

62
00:04:32.126 --> 00:04:40.490
Export const clock equals, okay?

63
00:04:40.490 --> 00:04:42.361
And I'm going to move all this code here.

64
00:04:46.519 --> 00:04:49.390
Here and then return div.

65
00:04:51.380 --> 00:04:53.497
Turn this bit right here.

66
00:04:57.554 --> 00:04:59.782
And I am going to put the clock here.

67
00:05:03.258 --> 00:05:05.309
So, I just refactor to
a separate component and

68
00:05:05.309 --> 00:05:07.740
you can see that still works as before.

69
00:05:07.740 --> 00:05:10.652
But now something strange will happen,
when I zoom in and

70
00:05:10.652 --> 00:05:12.540
I refresh the page, no JavaScript.

71
00:05:14.430 --> 00:05:16.500
Scroll it down, JavaScript shows up.

72
00:05:18.130 --> 00:05:21.784
And I find this fascinating because
I wasn't trying to do that,

73
00:05:21.784 --> 00:05:24.010
it's just how the system works.

74
00:05:24.010 --> 00:05:28.615
Like what's happening here is that
when you have used client effect

75
00:05:28.615 --> 00:05:32.690
normally the answer is,
well, when should this run?

76
00:05:32.690 --> 00:05:34.460
And the answer is, well,
like during hydration.

77
00:05:34.460 --> 00:05:36.870
All right, well, where else would
it run then during hydration?

78
00:05:38.470 --> 00:05:40.970
But there's no hydration in quick.

79
00:05:40.970 --> 00:05:41.800
So, when should it run?

80
00:05:41.800 --> 00:05:46.020
And then the answer becomes like,
well, when should we run it?

81
00:05:46.020 --> 00:05:48.000
And so
there are two obvious answers to that.

82
00:05:48.000 --> 00:05:51.170
One is you just run it
eagerly when the page loads.

83
00:05:51.170 --> 00:05:55.170
The other answer is just run it
when the component becomes visible.

84
00:05:55.170 --> 00:05:56.390
And so that's the default behavior.

85
00:05:56.390 --> 00:05:59.207
We can set the other behavior
as well if you want, but

86
00:05:59.207 --> 00:06:04.090
the default behavior is only run this
code when the component is visible.

87
00:06:04.090 --> 00:06:07.835
And so out of the box, without even
trying, you get this fascinating behavior

88
00:06:07.835 --> 00:06:10.860
that if the clock doesn't show up,
you're not paying for it.

89
00:06:10.860 --> 00:06:12.796
But when it shows up,
you start paying for it.

90
00:06:12.796 --> 00:06:13.894
Yes.

91
00:06:13.894 --> 00:06:18.610
&gt;&gt; That effect is relying on
the browser flag is visible,

92
00:06:18.610 --> 00:06:25.190
not a projection of the event stream
from advancing the page, correct?

93
00:06:25.190 --> 00:06:25.864
&gt;&gt; Correct.
So,

94
00:06:25.864 --> 00:06:30.254
what happens actually is that
the quick loader, piece of code,

95
00:06:30.254 --> 00:06:36.840
we will talk about it more tomorrow,
has a lot, let's see what's going on here.

96
00:06:36.840 --> 00:06:40.010
If I refresh, where is our clock?

97
00:06:40.010 --> 00:06:50.050
So, that if I go here,
oops, It's on a footer.

98
00:06:50.050 --> 00:06:52.720
So, in the footer we have a clock
somewhere, where's the clock?

99
00:06:52.720 --> 00:06:54.050
Here we go, here's our div.

100
00:06:54.050 --> 00:06:56.020
There's nothing inside of div right now.

101
00:06:56.020 --> 00:06:59.320
Notice there is a synthetic
event on q visible.

102
00:06:59.320 --> 00:07:02.510
So, the system fires a synthetic event
when the components become visible.

103
00:07:02.510 --> 00:07:06.271
And I'm just going to
change this to clock.

104
00:07:06.271 --> 00:07:10.060
Sorry, click.

105
00:07:10.060 --> 00:07:12.500
And then if I scroll, nothing happens.

106
00:07:12.500 --> 00:07:14.590
Except I can't click on it now
because there's nothing in there.

107
00:07:14.590 --> 00:07:15.100
Okay, hold on.

108
00:07:16.830 --> 00:07:18.210
Let's just change it on a server.

109
00:07:18.210 --> 00:07:20.911
So, the default would be dot, dot, dot.

110
00:07:23.682 --> 00:07:26.800
Okay, so
now let me do the same exact thing.

111
00:07:26.800 --> 00:07:31.630
Refresh, change this to Click.

112
00:07:33.490 --> 00:07:35.330
Now you have loading, right?

113
00:07:35.330 --> 00:07:36.710
And so it's waiting for an event.

114
00:07:36.710 --> 00:07:38.310
Normally it's the visible event.

115
00:07:38.310 --> 00:07:39.180
That's not.

116
00:07:40.460 --> 00:07:41.583
If I click on it.

117
00:07:43.992 --> 00:07:48.170
[LAUGH] Okay, so [LAUGH],
it's not working for a funny reason.

118
00:07:48.170 --> 00:07:53.040
Because the system needs to
know what are the events.

119
00:07:53.040 --> 00:07:55.377
And so
somewhere in here we basically said,

120
00:07:55.377 --> 00:07:58.866
the only possible events currently
in the system are visible and input.

121
00:07:58.866 --> 00:08:02.120
And so, we created a new event and so

122
00:08:02.120 --> 00:08:07.437
we have to tell it about it so
we have to say, click Loader,

123
00:08:07.437 --> 00:08:13.220
click Events, push click and
if I click on it, bam.

124
00:08:13.220 --> 00:08:14.290
It runs.

125
00:08:14.290 --> 00:08:19.700
But normally, you don't think about
this is auto generated, right?

126
00:08:19.700 --> 00:08:22.956
So, we look at all the possible
things that exist in the system, and

127
00:08:22.956 --> 00:08:26.210
we know what are all the possible
events that we care about.

128
00:08:26.210 --> 00:08:29.400
And this is what's causing
the global listener registration.

129
00:08:29.400 --> 00:08:30.760
But you don't have to think
about any of that stuff.

130
00:08:32.460 --> 00:08:37.312
So, that gives you kind of an idea
about the original question

131
00:08:37.312 --> 00:08:41.920
was how do we know what runs on a server
and what runs on the client, and

132
00:08:41.920 --> 00:08:46.557
this is a very convoluted way of
saying it's very nebulous, right?

133
00:08:46.557 --> 00:08:50.751
Because clearly this component only ever
executed on a server and there is no

134
00:08:50.751 --> 00:08:54.960
action that I can do on the client to
ever get this component to re-execute.

135
00:08:54.960 --> 00:08:56.610
So, this is a purely server component.

136
00:08:56.610 --> 00:08:59.459
And then this component right here, well,

137
00:08:59.459 --> 00:09:03.160
the effect is the only thing
that executes on the client.

138
00:09:03.160 --> 00:09:05.373
If you go to the Network tab, right?

139
00:09:05.373 --> 00:09:10.140
This effect has downloaded eagerly and
is executed on the client.

140
00:09:10.140 --> 00:09:13.858
But the component itself,
this part is not downloaded,

141
00:09:13.858 --> 00:09:16.420
which is also kind of strange, right?

142
00:09:16.420 --> 00:09:17.671
If you think about it, right?

143
00:09:17.671 --> 00:09:21.200
We are re-rendering component without
actually having the component present on

144
00:09:21.200 --> 00:09:21.769
the client.

145
00:09:23.858 --> 00:09:30.030
And so, it's a very mixed world of what
is on a server, what is on the client?

146
00:09:30.030 --> 00:09:32.877
it the only thing that you really know for

147
00:09:32.877 --> 00:09:36.910
a fact is that the onget methods
are always on the server.

148
00:09:38.060 --> 00:09:42.775
And you know that the use client effect,
because it has the word client,

149
00:09:42.775 --> 00:09:44.990
is always on the client.

150
00:09:44.990 --> 00:09:48.631
There are other methods like use
server mount, which you know,

151
00:09:48.631 --> 00:09:50.890
I will always be on a server.

152
00:09:50.890 --> 00:09:55.281
So, unless a method specifically
says the word client or

153
00:09:55.281 --> 00:09:59.770
a server, it is in this strange
land that it could be both.

154
00:10:00.970 --> 00:10:03.920
And it takes a little
bit to get used to it.

155
00:10:03.920 --> 00:10:05.490
But it is exactly what you want.

156
00:10:05.490 --> 00:10:08.494
You want a code that starts
its life on a server and

157
00:10:08.494 --> 00:10:11.211
then transitions to executing on a client.

158
00:10:11.211 --> 00:10:14.777
And as a developer,
I shouldn't have to think about it,

159
00:10:14.777 --> 00:10:19.400
I shouldn't be making any decisions
about where the bits and pieces are.

