WEBVTT

1
00:00:00.170 --> 00:00:03.210
All right, how was that?

2
00:00:03.210 --> 00:00:07.247
For some of you that was
probably a bit challenging.

3
00:00:07.247 --> 00:00:10.178
For some of you, crushed it.

4
00:00:10.178 --> 00:00:12.427
Rolled through it easily.

5
00:00:12.427 --> 00:00:16.742
So in the interest of honesty and
fairness, I also did this code challenge.

6
00:00:16.742 --> 00:00:17.471
I did not do it before.

7
00:00:17.471 --> 00:00:21.620
I wrote it up, but I didn't solve it until
I was solving the same time you were.

8
00:00:21.620 --> 00:00:23.909
Here is my solution.

9
00:00:23.909 --> 00:00:26.191
So here's the general blah, blah, blah.

10
00:00:26.191 --> 00:00:28.021
I don't modify this.

11
00:00:28.021 --> 00:00:29.172
I created this.

12
00:00:29.172 --> 00:00:32.460
So every other solution I will
live code after I've done but

13
00:00:32.460 --> 00:00:34.047
this one I'm a slow typist.

14
00:00:34.047 --> 00:00:36.002
So just trust me that I did it.

15
00:00:36.002 --> 00:00:37.104
I didn't cheat.

16
00:00:37.104 --> 00:00:41.340
I even here I left up my Google
queries because I also need help.

17
00:00:41.340 --> 00:00:42.695
I don't remember these things.

18
00:00:42.695 --> 00:00:44.029
I'm not perfect.

19
00:00:44.029 --> 00:00:45.994
I had to look up this stuff too.

20
00:00:45.994 --> 00:00:48.536
So my solution was I created a class.

21
00:00:48.536 --> 00:00:50.836
And I know that it takes
an element of some sort,

22
00:00:50.836 --> 00:00:53.202
it takes food data doesn't
matter on the order.

23
00:00:53.202 --> 00:00:55.910
And I'm just creating those in the scope.

24
00:00:55.910 --> 00:00:58.350
I created a function called render list.

25
00:00:58.350 --> 00:01:02.359
Actually did this last cuz it's probably
the last thing I need to worry about.

26
00:01:02.359 --> 00:01:06.646
But what I did was I knew that I
needed to create a list of items.

27
00:01:06.646 --> 00:01:08.039
And I didn't want to do
that in this one function.

28
00:01:08.039 --> 00:01:13.608
So I created this separate
function called createFoodItems.

29
00:01:13.608 --> 00:01:18.340
Now, on this question,
was this challenging, or

30
00:01:18.340 --> 00:01:20.989
was it sort of in the middle?

31
00:01:20.989 --> 00:01:22.956
Sorta in the middle, challenging?

32
00:01:22.956 --> 00:01:26.953
For a lot of people, and this is generally
the kind of the style of code question I

33
00:01:26.953 --> 00:01:30.295
like, it's are you very, very,
very dependent on frameworks or

34
00:01:30.295 --> 00:01:33.396
do you understand kinda the basics
of can I create an element,

35
00:01:33.396 --> 00:01:35.931
can I create an end listener and
things like that?

36
00:01:35.931 --> 00:01:37.117
That's why I like to ask this question.

37
00:01:37.117 --> 00:01:40.781
Is I don't care about specific
framework knowledge or expertise.

38
00:01:40.781 --> 00:01:43.803
You could be the world's
leading a react expert.

39
00:01:43.803 --> 00:01:47.246
Can you create an HTML page that
renders stuff into the dom?

40
00:01:47.246 --> 00:01:48.604
That's it.

41
00:01:48.604 --> 00:01:52.312
And to use that I had to use create
element, which is my go to, yes,

42
00:01:52.312 --> 00:01:53.586
I'm using a &lt;div&gt;.

43
00:01:53.586 --> 00:01:56.332
Don't judge me if I use a list or
something like that a better element.

44
00:01:56.332 --> 00:01:59.693
But am using &lt;div&gt; because it's
a code test and I'm limited on time.

45
00:01:59.693 --> 00:02:02.680
I just added the image, you can use
the name doesn't really matter.

46
00:02:02.680 --> 00:02:06.257
I add the class list,
I'm adding the item name of the class.

47
00:02:06.257 --> 00:02:08.726
Don't know I'm gonna do with
that I just did it just in case.

48
00:02:08.726 --> 00:02:11.876
And I'm returning that
element that I created.

49
00:02:11.876 --> 00:02:16.210
So next thing I did was after I
created this function was I created

50
00:02:16.210 --> 00:02:17.745
a document fragment.

51
00:02:17.745 --> 00:02:23.734
This is if you're giving a solid code test
or answering a solved code test like this.

52
00:02:23.734 --> 00:02:29.607
Create a document fragment cuz what that
does is it creates a copy of an elements.

53
00:02:29.607 --> 00:02:33.769
And then I can just insert things
into that fragment piece of document.

54
00:02:33.769 --> 00:02:38.940
And then once I'm done inserting,
I append that to the actual dom.

55
00:02:38.940 --> 00:02:41.857
What's the advantage of
using document fragments,

56
00:02:41.857 --> 00:02:44.328
instead of just appending
straight into it?

57
00:02:44.328 --> 00:02:48.498
Cuz I also could have

58
00:02:48.498 --> 00:02:53.164
done something like.

59
00:02:53.164 --> 00:02:58.929
In the forEach I could have
said this.brute.append child.

60
00:03:00.869 --> 00:03:02.614
And then I could have called this.

61
00:03:05.011 --> 00:03:07.418
I hope that works.

62
00:03:07.418 --> 00:03:09.518
I could have done something like that.

63
00:03:09.518 --> 00:03:13.644
But why did I use a document fragment?

64
00:03:13.644 --> 00:03:16.839
Anybody, anybody at all?

65
00:03:16.839 --> 00:03:19.429
&gt;&gt; You're appending a bunch of times.

66
00:03:19.429 --> 00:03:20.058
&gt;&gt; Yeah.
&gt;&gt; And

67
00:03:20.058 --> 00:03:22.380
this one you're just appending once.

68
00:03:22.380 --> 00:03:24.882
&gt;&gt; So what are the implications of that?

69
00:03:24.882 --> 00:03:28.655
&gt;&gt; You're doing more stuff with the dom,
when you're appending, so

70
00:03:28.655 --> 00:03:30.254
some sort of performances.

71
00:03:30.254 --> 00:03:31.794
&gt;&gt; Yeah, that's exactly right.

72
00:03:31.794 --> 00:03:34.929
If we're appending, that means we're
constantly updating DOM which means it's

73
00:03:34.929 --> 00:03:37.360
rerendering, between performances
it's gonna be degraded.

74
00:03:37.360 --> 00:03:42.670
Versus if I only append once,
it's one render and then I'm done.

75
00:03:42.670 --> 00:03:44.251
That's something I look for.

76
00:03:44.251 --> 00:03:46.629
I want people to understand
document fragments or

77
00:03:46.629 --> 00:03:50.092
just the performance implications
of constantly rendering to the dom.

78
00:03:50.092 --> 00:03:51.767
Not a magic trick.

79
00:03:51.767 --> 00:03:54.420
It's just kind of good knowledge to have,

80
00:03:54.420 --> 00:03:57.597
in understanding like how
does rendering work?.

81
00:03:57.597 --> 00:04:01.550
And once I'm done, I append that child and
I append that document fragment in so

82
00:04:01.550 --> 00:04:02.503
it's one render.

83
00:04:02.503 --> 00:04:06.942
Then once I was done, and just in case,
I know there's some skeptics out there.

84
00:04:06.942 --> 00:04:11.875
This is my console log, I threw a lot
of errors while I was doing this.

85
00:04:11.875 --> 00:04:14.152
And I'm giving this course and
I still write errors.

86
00:04:14.152 --> 00:04:18.225
I open my developer tools just to
see what errors are getting thrown.

87
00:04:18.225 --> 00:04:19.988
This is real life, no one's perfect.

88
00:04:22.927 --> 00:04:25.835
So the last thing I did was I ran a little
bit of trouble cuz I had to remember how

89
00:04:25.835 --> 00:04:26.852
event listeners worked.

90
00:04:26.852 --> 00:04:31.403
But I added an event listener to the root
and then I extracted the target.

91
00:04:31.403 --> 00:04:35.096
And the target is the thing that is being
clicked on when you have an event listener

92
00:04:35.096 --> 00:04:36.303
or click event listener.

93
00:04:36.303 --> 00:04:40.396
And now, I said remove, which I have to
look up as well, document remove element.

94
00:04:40.396 --> 00:04:44.404
Just .remove, I should probably
should have known that but

95
00:04:44.404 --> 00:04:45.906
I had to look it up too.

96
00:04:45.906 --> 00:04:48.566
But the reason why I
added it to the root and

97
00:04:48.566 --> 00:04:52.898
not the actual child element itself,
which I also could have done,

98
00:04:52.898 --> 00:04:57.244
was event delegation and
this is what event delegation looks like.

99
00:04:57.244 --> 00:05:02.648
It means there's one event listener rather
than however many items I have here.

100
00:05:02.648 --> 00:05:05.476
And it's good to think
in terms of that way,

101
00:05:05.476 --> 00:05:08.921
because let's say I had
a list of 1,000 things.

102
00:05:08.921 --> 00:05:12.002
You'd see your performance
slow dramatically down.

103
00:05:12.002 --> 00:05:16.706
And of course, when I click it removes
everything from the list, one at a time.

104
00:05:16.706 --> 00:05:18.948
That's an example of a code test.

105
00:05:18.948 --> 00:05:22.664
And I consider it a fairly reasonable
code test for a general UI engineer.

106
00:05:22.664 --> 00:05:27.090
Now if I needed a, say angular engineer,
I might ask a question in angular and

107
00:05:27.090 --> 00:05:30.715
have you solve that that way, or
react or something like that.

108
00:05:30.715 --> 00:05:36.662
If I'm saying I want a UI engineer, don't
really have specific framework in mind,

109
00:05:36.662 --> 00:05:39.278
I'll ask a question like this sure.

110
00:05:39.278 --> 00:05:43.018
Because I don't necessarily
want a language or framework or

111
00:05:43.018 --> 00:05:44.787
a library specific expert.

112
00:05:44.787 --> 00:05:50.244
Cuz what if we switch to,
what's a new framework that just came out.

113
00:05:50.244 --> 00:05:51.770
&gt;&gt; Svelte.

114
00:05:51.770 --> 00:05:55.285
&gt;&gt; Yeah, let's say we switch to Svelte
instead of React or something like that.

115
00:05:55.285 --> 00:05:57.843
Then all that React knowledge,
it's worthless.

116
00:05:57.843 --> 00:06:00.377
So I want a general UI engineer.

117
00:06:00.377 --> 00:06:03.471
If you understand something like this,
then I know you can learn something else.

118
00:06:03.471 --> 00:06:06.811
But if you only spend your entire career
coding one framework, you're probably not

119
00:06:06.811 --> 00:06:10.121
gonna be as flexible in your thinking,
that's might not be what I'm looking for.

120
00:06:10.121 --> 00:06:12.551
Nice job, all of you who completed it.

121
00:06:12.551 --> 00:06:17.219
If it was a little challenging, don't
worry, it throws people because you get so

122
00:06:17.219 --> 00:06:20.266
used to all the heavy lifting
that the libraries do for

123
00:06:20.266 --> 00:06:23.399
you that going back old school
can throw you for a loop.

124
00:06:23.399 --> 00:06:26.937
But once you see it, hopefully you
understand it's not too tricky.

125
00:06:26.937 --> 00:06:30.080
And I didn't ask anything like create
a web worker and start multi threading or

126
00:06:30.080 --> 00:06:30.947
anything like that.

127
00:06:30.947 --> 00:06:32.613
Just things you can look up.

128
00:06:32.613 --> 00:06:33.540
So that was a phone screen.

