WEBVTT

1
00:00:00.210 --> 00:00:02.990
As earlier we discussed scope is
essentially the context that you're

2
00:00:02.990 --> 00:00:05.510
operating in,
the things that are available to you.

3
00:00:05.510 --> 00:00:07.570
And when we think about scope,

4
00:00:07.570 --> 00:00:11.750
we generally wanna know what
are the ways to change the scope.

5
00:00:12.950 --> 00:00:14.640
Because implicit scope, that's fine.

6
00:00:14.640 --> 00:00:17.100
If you run a function,
it's gonna be in the module scope or

7
00:00:17.100 --> 00:00:18.420
the window scope, things like that.

8
00:00:18.420 --> 00:00:20.980
But if I wanna change that because
I'm referencing this variable or

9
00:00:20.980 --> 00:00:26.550
anything like that, that's something we do
as engineers sometimes when we need to.

10
00:00:26.550 --> 00:00:29.450
Particularly in react if we need to bind,

11
00:00:29.450 --> 00:00:31.640
we say bind this to change the scope,
things like that.

12
00:00:32.750 --> 00:00:37.378
But the three main ways we change
scope our call, what's call take?

13
00:00:39.515 --> 00:00:40.940
A bunch of elements, right?

14
00:00:40.940 --> 00:00:42.240
Yes.
Good answer.

15
00:00:42.240 --> 00:00:45.020
Apply takes does same thing,
but it takes an array.

16
00:00:45.020 --> 00:00:49.410
And then bind is a way of
doing partial application.

17
00:00:49.410 --> 00:00:52.620
So we change the scope without
actually calling the function itself.

18
00:00:52.620 --> 00:00:54.341
In this one we're returning the function.

19
00:00:54.341 --> 00:00:59.070
These other two will return or
will actually execute the function itself.

20
00:00:59.070 --> 00:01:02.790
Whereas bind says, here's the new scope,
but we'll execute it later.

21
00:01:02.790 --> 00:01:06.710
I use bind for partial application
because you can say bind this and

22
00:01:06.710 --> 00:01:07.730
apply a bunch of parameters.

23
00:01:07.730 --> 00:01:11.360
And then now those will be implicitly
past whenever you execute that function.

24
00:01:12.520 --> 00:01:17.100
I know, if I'm talking a little bit
like what is partial application?

25
00:01:17.100 --> 00:01:17.770
I would Google it.

26
00:01:17.770 --> 00:01:21.220
It's actually a pretty useful
tool once you understand it.

27
00:01:21.220 --> 00:01:23.480
But I'm not gonna ask you to code
that up because that's not fair.

28
00:01:23.480 --> 00:01:25.440
I don't think that's a relevant question.

29
00:01:25.440 --> 00:01:29.720
But what I do think is a relevant
question is implementing bind.

30
00:01:31.040 --> 00:01:35.960
So what I want you to do today is I want
you to implement function prototype bind.

31
00:01:37.040 --> 00:01:41.419
And I'll give you a hint cuz this one is a
little trickier, the solution is not long.

32
00:01:42.490 --> 00:01:45.329
But you're gonna need one of
those methods we just talked

33
00:01:45.329 --> 00:01:46.876
about earlier that is in bind.

