WEBVTT

1
00:00:00.000 --> 00:00:01.880
That was a tough problem.

2
00:00:01.880 --> 00:00:05.030
I know when I first ran across it,
that's challenging.

3
00:00:05.030 --> 00:00:06.490
So let's walk through the solution now.

4
00:00:07.570 --> 00:00:11.344
And the solution,
it'll give you a hint in the name.

5
00:00:11.344 --> 00:00:15.950
We'll call it reverse path, because that's
what we're ultimately trying to do.

6
00:00:15.950 --> 00:00:19.630
And we know we're gonna get some sort of
element and we're gonna get the tree.

7
00:00:20.880 --> 00:00:23.935
If you're gonna pass someone a tree,
it's generally represented as the root.

8
00:00:23.935 --> 00:00:26.890
Cuz once you have the root,
you can iterate through the entire tree.

9
00:00:26.890 --> 00:00:30.434
For many JavaScript developers, it's
difficult to conceptualize this because

10
00:00:30.434 --> 00:00:33.513
you're used to data structures where,
I pass you the data structure,

11
00:00:33.513 --> 00:00:35.019
it's the entire data structure.

12
00:00:35.019 --> 00:00:37.239
Like an array, or an object, or a set.

13
00:00:37.239 --> 00:00:39.873
Whereas a tree is generally
only give you the root, and

14
00:00:39.873 --> 00:00:42.740
that's known as passing you the tree.

15
00:00:42.740 --> 00:00:49.270
So what we wanna do is, knowing this,
we wanna walk back up to the root.

16
00:00:49.270 --> 00:00:52.300
And along the way,
we wanna have a way of recording the path.

17
00:00:52.300 --> 00:00:56.660
So that when we jump over to this tree,
we walk back down that exact same path.

18
00:00:56.660 --> 00:00:59.470
I guess you could think of
it like reversing a string.

19
00:00:59.470 --> 00:01:03.430
Very similar to the first problem we did,
actually, it's not similar at all.

20
00:01:03.430 --> 00:01:06.480
But conceptually, you can iterate over
backwards, and that's what we're doing.

21
00:01:06.480 --> 00:01:08.260
We're iterating backwards
over the path that we get.

22
00:01:10.050 --> 00:01:11.980
So to start off with, what do I know?

23
00:01:11.980 --> 00:01:15.648
I know that I'm gonna need
a way of storing that path.

24
00:01:15.648 --> 00:01:22.100
And because we know that elements
have two parts, they have parent,

25
00:01:22.100 --> 00:01:27.786
and the parent, Is gonna have children.

26
00:01:33.044 --> 00:01:35.740
But that doesn't really help us,
that knowledge.

27
00:01:35.740 --> 00:01:37.710
But how do we find the index,

28
00:01:37.710 --> 00:01:41.500
or the position of the child
that we're currently on?

29
00:01:42.830 --> 00:01:44.610
I think I said it already.

30
00:01:44.610 --> 00:01:45.171
&gt;&gt; indexOf.

31
00:01:45.171 --> 00:01:54.640
&gt;&gt; indexOf, yeah, so if we wanted to get,
So we can say indexOf some elements.

32
00:01:55.720 --> 00:01:58.890
And this would be one part of the path.

33
00:01:58.890 --> 00:02:01.006
So if we know the position of the child,
so it's gonna be 0 or

34
00:02:01.006 --> 00:02:04.700
1 in this case, cuz they're pretty simple,
or 2 or 3, it doesn't matte.

35
00:02:04.700 --> 00:02:08.420
We can say 0, this will be,
well, there's only one, so

36
00:02:08.420 --> 00:02:10.880
this will be 0, this will be 0.

37
00:02:10.880 --> 00:02:13.410
And there's no path here
cuz we're at the root.

38
00:02:13.410 --> 00:02:17.743
And if we replay that,
we say parent.children, and

39
00:02:17.743 --> 00:02:22.896
we replay that path, so
we pop that off, so we say 0, 0, 1.

40
00:02:22.896 --> 00:02:26.780
And that would get us the element
no matter where it is in the tree.

41
00:02:26.780 --> 00:02:28.894
So conceptually, if we understand that,

42
00:02:28.894 --> 00:02:31.252
we can understand how to
create a reverse path.

43
00:02:34.144 --> 00:02:38.645
So the firs thing I wanna do is, I even
said it, since we wanna pop off something,

44
00:02:38.645 --> 00:02:40.648
I'm gonna say the path is an array.

45
00:02:40.648 --> 00:02:42.115
I'm gonna store it as an array of numbers.

46
00:02:44.178 --> 00:02:47.406
And I wanna stop when I get to the root,
so I'm gonna say while,

47
00:02:51.070 --> 00:02:55.360
And I'm gonna say element.parent,
actually, I'm gonna say current.

48
00:02:55.360 --> 00:03:00.354
Should I say pointer, I'll say pointer,
cuz it technically is a pointer, so

49
00:03:00.354 --> 00:03:02.070
that's good.

50
00:03:02.070 --> 00:03:04.756
We know this while loop will
run until we get to the root,

51
00:03:04.756 --> 00:03:06.709
because the root will not have a parent.

52
00:03:06.709 --> 00:03:10.542
So the first thing I wanna do is,
I wanna initialize the pointer,

53
00:03:10.542 --> 00:03:14.183
because we're just pointing at
different nodes on the tree.

54
00:03:14.183 --> 00:03:21.756
So I wanna say, let pointer, and
we'll say it's the elements.

55
00:03:21.756 --> 00:03:23.697
We wanna start somewhere,
that's our base case.

56
00:03:26.641 --> 00:03:27.580
So what did we do before?

57
00:03:27.580 --> 00:03:30.213
We wanted to get
the position of the pointer.

58
00:03:30.213 --> 00:03:33.993
So the position is represented as 0,
1, or 2, or 3, or 4, or 5,

59
00:03:33.993 --> 00:03:35.570
wherever it is in that array.

60
00:03:35.570 --> 00:03:38.080
So we can print that back out.

61
00:03:38.080 --> 00:03:42.260
So I'm gonna say index is,

62
00:03:42.260 --> 00:03:46.740
we have the pointer.

63
00:03:46.740 --> 00:03:50.560
And we're gonna grab the parent, and
then we're gonna grab the children.

64
00:03:51.780 --> 00:03:54.028
And then we're gonna say,
it's not technically an array.

65
00:03:54.028 --> 00:03:56.832
It's an array-like structure, but
I'm not gonna convert it to an array.

66
00:03:56.832 --> 00:04:01.154
Normally you'd have to do something
like this, and then you call indexOf.

67
00:04:01.154 --> 00:04:05.390
But I'm not gonna do that for simplicity.

68
00:04:06.470 --> 00:04:10.050
Again, a whiteboard solution, I care that
you kind of have it conceptually down.

69
00:04:10.050 --> 00:04:15.790
And then we're gonna say
the index of the pointer itself.

70
00:04:15.790 --> 00:04:19.230
So this will get us the position
in the array that we need.

71
00:04:19.230 --> 00:04:21.620
So this will get us
the first step in our path.

72
00:04:21.620 --> 00:04:25.860
And so I'm gonna say path.push,
the index itself.

73
00:04:27.940 --> 00:04:31.180
And then I'm going to move the pointer
up to the parent at this point.

74
00:04:31.180 --> 00:04:35.000
Cuz I wanna know where the parent
is in its parent's children array.

75
00:04:35.000 --> 00:04:39.679
So I'm gonna say pointer = pointer.parent.

76
00:04:43.159 --> 00:04:47.730
Of the whole thing, I think conceptually
this is the most difficult part.

77
00:04:47.730 --> 00:04:51.945
The fact that you have to go up to look
down to see where you are is tricky with

78
00:04:51.945 --> 00:04:54.020
a tree, and
it's kind of the key to this whole thing.

79
00:04:55.360 --> 00:04:59.600
So given this while loop,
we can push the path every single time.

80
00:04:59.600 --> 00:05:04.200
So looking at this one, this is in
position 0, this is in position 0,

81
00:05:04.200 --> 00:05:08.970
position 0, position 0,
this happens that they're all 0s.

82
00:05:08.970 --> 00:05:13.749
So in this while loop, we're gonna
end up with a path that's 1 or 0 or

83
00:05:13.749 --> 00:05:16.140
2 or 3, some array.

84
00:05:16.140 --> 00:05:17.465
So what do we do now?

85
00:05:17.465 --> 00:05:23.640
Since we have the reverse path,
we wanna replay that into the next tree.

86
00:05:23.640 --> 00:05:26.870
So I'm gonna say the pointer
is now the root.

87
00:05:29.100 --> 00:05:30.610
So I've now switched to this tree now.

88
00:05:30.610 --> 00:05:36.075
And I'm gonna say,
while the path has any arguments in it,

89
00:05:36.075 --> 00:05:39.913
I'm gonna keep iterating down the tree.

90
00:05:39.913 --> 00:05:43.931
Whoops, I cannot spell today.

91
00:05:43.931 --> 00:05:47.565
So how do we move down the tree?

92
00:05:47.565 --> 00:05:54.070
Yeah, pop, we wanna move that
pointer to the next child.

93
00:05:54.070 --> 00:05:55.958
So I can say pointer is,

94
00:05:55.958 --> 00:06:01.350
we wanna get to the children cuz
we're maneuvering down the array.

95
00:06:01.350 --> 00:06:06.693
And I'm gonna say, path.pop.

96
00:06:14.202 --> 00:06:16.350
That's it, that's a reverse algorithm.

97
00:06:19.930 --> 00:06:22.346
When you think about it conceptually,
if I just said,

98
00:06:22.346 --> 00:06:25.668
give me a reverse path algorithm,
that's not helpful as an interviewer.

99
00:06:25.668 --> 00:06:28.589
But if I can explain what we're trying
to do and I draw it out, hopefully,

100
00:06:28.589 --> 00:06:32.456
understanding HTML and DOM structure, you
say, there's parents and there`s children,

101
00:06:32.456 --> 00:06:35.180
and here's how children
would be represented.

102
00:06:35.180 --> 00:06:37.840
You can conceptually work this out.

103
00:06:37.840 --> 00:06:41.204
And if you didn't get this right,
it's okay, this is challenging.

104
00:06:41.204 --> 00:06:44.470
But hopefully, it helps grow
your understanding of trees, and

105
00:06:44.470 --> 00:06:45.930
how to move up and down them.

106
00:06:47.630 --> 00:06:51.834
All right, maybe I didn't warn you,
maybe I should have warned you that,

107
00:06:51.834 --> 00:06:56.739
as we move to the end, it's gonna get more
and more difficult, that's just how it is.

108
00:06:56.739 --> 00:07:00.420
I wanna give you a warm up question,
reverse string one, just to get you going.

109
00:07:00.420 --> 00:07:05.310
I could've started with this, you'd be
like, [LAUGH] this is a stupid course.

110
00:07:05.310 --> 00:07:07.410
I can't believe I took this course,
what is he teaching?

111
00:07:07.410 --> 00:07:11.365
But as we work our way to here, hopefully
it's a little conceptually clearer.

