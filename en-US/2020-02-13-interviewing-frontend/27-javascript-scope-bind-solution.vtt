WEBVTT

1
00:00:00.144 --> 00:00:04.104
Implementing bind, this one is tricky.

2
00:00:04.104 --> 00:00:09.963
It's a little tricky, you have to know
about scope, and context, call, and apply.

3
00:00:09.963 --> 00:00:13.381
And if you failed on this one or
you couldn't get anything down,

4
00:00:13.381 --> 00:00:14.343
don't feel bad.

5
00:00:14.343 --> 00:00:16.477
We're gonna learn the solution now.

6
00:00:16.477 --> 00:00:19.333
The best part of learning
is sometimes its failure.

7
00:00:19.333 --> 00:00:21.025
You have to fail because you'll remember.

8
00:00:21.025 --> 00:00:24.108
You'll remember this now because you're
like, I spent so long on this and

9
00:00:24.108 --> 00:00:26.450
then it clicks in place,
you're like this makes sense.

10
00:00:26.450 --> 00:00:27.470
This is how JavaScript works.

11
00:00:27.470 --> 00:00:28.848
Now I know a little bit more.

12
00:00:28.848 --> 00:00:31.755
And being honest,
I wanna work with people who failed.

13
00:00:31.755 --> 00:00:33.680
I don't wanna work with people
who only succeed in life.

14
00:00:33.680 --> 00:00:35.560
That means they didn't learn as much.

15
00:00:35.560 --> 00:00:37.782
Not saying if you're super successful,
you didn't learn a lot.

16
00:00:37.782 --> 00:00:41.558
But people that have failed,
they know what it's like to fall down and

17
00:00:41.558 --> 00:00:42.271
get back up.

18
00:00:42.271 --> 00:00:43.471
And that's what it's like.

19
00:00:43.471 --> 00:00:48.060
Because remember,
half the interviews you're gonna fail.

20
00:00:48.060 --> 00:00:51.227
Like almost probably, you're gonna fail
over half the interviews you take.

21
00:00:51.227 --> 00:00:51.979
That's okay.

22
00:00:51.979 --> 00:00:54.743
I failed many,
I failed on this question before.

23
00:00:54.743 --> 00:00:58.379
But now I know how to solve it,
and that's just part of learning.

24
00:00:58.379 --> 00:01:03.053
All right, so let's do the standard way
we always approach a problem, which is,

25
00:01:03.053 --> 00:01:05.989
I need to implement
function.prototype.bind.

26
00:01:05.989 --> 00:01:08.635
Since it's a prototype,
I'm gonna start off there.

27
00:01:08.635 --> 00:01:13.160
So function.prototype.bind.

28
00:01:13.160 --> 00:01:16.847
And we know because it's a function
that we're gonna eventually invoke,

29
00:01:16.847 --> 00:01:18.200
it's gonna be a function.

30
00:01:18.200 --> 00:01:20.557
So I'm gonna say function.

31
00:01:20.557 --> 00:01:23.623
And I'm gonna make
an anonymous function for now.

32
00:01:23.623 --> 00:01:26.985
And this function is gonna take
an argument which will be the new context

33
00:01:26.985 --> 00:01:29.090
that we're trying to pass in.

34
00:01:29.090 --> 00:01:33.857
So I'm gonna call you context for now.

35
00:01:33.857 --> 00:01:38.637
And we know eventually the way we invoke
bind is we're setting the new context and

36
00:01:38.637 --> 00:01:40.477
we're gonna invoke it later.

37
00:01:40.477 --> 00:01:44.857
And if you ever see a pattern like this or
someone says, you're returning a function

38
00:01:44.857 --> 00:01:49.498
that's gonna eventually be invoked later,
you know it's gonna return a new function.

39
00:01:49.498 --> 00:01:54.700
So let's say,
return another anonymous function.

40
00:01:54.700 --> 00:01:59.015
And I'm not gonna take any
arguments on this one.

41
00:01:59.015 --> 00:02:04.984
Okay, but ultimately,
what do we wanna accomplish with bind?

42
00:02:04.984 --> 00:02:08.497
We're trying to return a function
that has a different context.

43
00:02:08.497 --> 00:02:09.893
And how do we do that?

44
00:02:09.893 --> 00:02:15.710
We do it with our old
friends either call or apply.

45
00:02:15.710 --> 00:02:18.986
So I wanna say the function,

46
00:02:20.957 --> 00:02:24.089
I could say some function and
then I wanna call or apply it.

47
00:02:24.089 --> 00:02:26.226
But because this one is
a little trickier and

48
00:02:26.226 --> 00:02:28.725
I could have asked a slightly
different question.

49
00:02:28.725 --> 00:02:31.541
But I could have said,
how do you implement just bind?

50
00:02:31.541 --> 00:02:34.159
Which would take a function and a context.

51
00:02:36.722 --> 00:02:37.769
I could have asked that.

52
00:02:37.769 --> 00:02:39.744
But I'm saying, this is the prototype now.

53
00:02:39.744 --> 00:02:48.276
So in this case, so I'm gonna say this,
Is the function itself.

54
00:02:48.276 --> 00:02:51.438
So we don't need to pass in the function
because it's implied in this because we're

55
00:02:51.438 --> 00:02:52.787
on the prototype of that function.

56
00:02:54.805 --> 00:02:57.002
Okay, so we have the function.

57
00:02:57.002 --> 00:02:59.110
Actually, I'm gonna make
it easier to grock.

58
00:02:59.110 --> 00:03:02.373
I'm gonna call you the function is this.

59
00:03:02.373 --> 00:03:05.209
And I need to invoke this function so
I can say call.

60
00:03:07.114 --> 00:03:08.652
And I'm going to pass in the context.

61
00:03:11.275 --> 00:03:12.378
That's it.

62
00:03:14.612 --> 00:03:17.772
People are nodding, you're nodding
along at home, it makes sense now.

63
00:03:17.772 --> 00:03:19.874
The solution's pretty short.

64
00:03:19.874 --> 00:03:23.474
So if I wanted to say,
if I don't want to just implement bind,

65
00:03:23.474 --> 00:03:27.727
because we all learn differently and
this is a different way of doing it.

66
00:03:27.727 --> 00:03:31.352
Exit bind, it's gonna take a function and
the context.

67
00:03:31.352 --> 00:03:36.819
I can just take that out,
and it's the same solution.

68
00:03:36.819 --> 00:03:38.588
All right, any questions on this, yes?

69
00:03:38.588 --> 00:03:42.478
&gt;&gt; I almost got it except I used
apply what does apply mean.

70
00:03:42.478 --> 00:03:43.970
&gt;&gt; Yes, apply works just as well.

71
00:03:43.970 --> 00:03:45.327
&gt;&gt; All right, okay.

72
00:03:45.327 --> 00:03:48.305
&gt;&gt; It will just change the way,
and I didn't get more advanced.

73
00:03:48.305 --> 00:03:52.793
This to me is a perfect solution or
not a perfect solution, it works for

74
00:03:52.793 --> 00:03:53.713
white board.

75
00:03:53.713 --> 00:03:55.405
I'm not trying to trick you.

76
00:03:55.405 --> 00:03:58.673
If I wanted to make it more difficult or
someone's being a wise person,

77
00:03:58.673 --> 00:04:00.641
they're trying to be like, I got this.

78
00:04:00.641 --> 00:04:04.267
I'd be like, okay, so
how do you deal with arguments?

79
00:04:04.267 --> 00:04:07.466
So you'd have to know that you can pass or
with call,

80
00:04:07.466 --> 00:04:12.150
it would be the arguments actually for
this one, for call, I'd use apply.

81
00:04:12.150 --> 00:04:16.125
And then I take the arguments and
I spread them out.

82
00:04:16.125 --> 00:04:20.906
Args, arguments, and I'd spread them
out if I want to pass arguments.

83
00:04:20.906 --> 00:04:22.923
But, again, I didn't wanna get that deep.

84
00:04:22.923 --> 00:04:27.938
I just wanna know conceptually,
do people understand scope and how to

85
00:04:27.938 --> 00:04:33.379
change it if you really had to, much
bigger than just calling call or reply.

86
00:04:33.379 --> 00:04:34.802
All right, questions?

87
00:04:34.802 --> 00:04:38.196
&gt;&gt; A more, I guess,
technical question, but

88
00:04:38.196 --> 00:04:43.165
in the implementation of
the prototype you created a constant.

89
00:04:43.165 --> 00:04:47.961
And then you referenced that constant in
the new anonymous function that you're

90
00:04:47.961 --> 00:04:48.746
returning.

91
00:04:48.746 --> 00:04:52.237
Is that because if you
actually just used this,

92
00:04:52.237 --> 00:04:57.315
it would be bound to the anonymous
function that you're returning?

93
00:04:57.315 --> 00:04:58.630
&gt;&gt; Mm-hm, that's exactly right.

94
00:04:58.630 --> 00:05:01.296
It would be bound to the complex
that you apply it in.

95
00:05:01.296 --> 00:05:01.831
&gt;&gt; Yeah, okay.

96
00:05:01.831 --> 00:05:05.678
&gt;&gt; But in this case we wanna make sure
that when this function is invoked,

97
00:05:05.678 --> 00:05:09.602
we wanna make sure this is accessible,
so we state it within the scope.

98
00:05:09.602 --> 00:05:10.577
Good question, though.

99
00:05:10.577 --> 00:05:13.129
This is why this one's a bit
more advanced, more for

100
00:05:13.129 --> 00:05:16.848
on the senior side, is you have to
understand scoping and things like that.

101
00:05:16.848 --> 00:05:20.937
All right, all right,
now if you ever see this question again,

102
00:05:20.937 --> 00:05:23.379
you'll know the general structure.

103
00:05:23.379 --> 00:05:25.824
And I think if you get
the general structure, and

104
00:05:25.824 --> 00:05:29.831
you realize that you'll have to call or
apply at some point, that's helpful.

105
00:05:29.831 --> 00:05:32.877
But again, if you didn't get it it's okay.

106
00:05:32.877 --> 00:05:33.816
We all start somewhere.

107
00:05:33.816 --> 00:05:35.350
I have failed all these question before.

