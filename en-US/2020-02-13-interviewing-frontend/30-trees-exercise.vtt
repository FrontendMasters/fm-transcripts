WEBVTT

1
00:00:01.123 --> 00:00:02.911
Trees.

2
00:00:02.911 --> 00:00:07.110
Normally, I would say.

3
00:00:07.110 --> 00:00:10.340
I don't know, in an interview, I don't
know if I'd ask something about trees

4
00:00:10.340 --> 00:00:14.030
unless they're a pretty senior engineer
cuz it's not something we think about.

5
00:00:15.070 --> 00:00:20.200
This next problem is one that,
I failed it.

6
00:00:20.200 --> 00:00:22.820
I failed it hard,
cuz I never thought about trees.

7
00:00:22.820 --> 00:00:25.070
But once I understood how
to solve the problem,

8
00:00:25.070 --> 00:00:27.550
really it changed my perspective
on the way trees work.

9
00:00:27.550 --> 00:00:28.700
I'm like, okay, I get it.

10
00:00:28.700 --> 00:00:30.960
I get how to iterate through a tree.

11
00:00:30.960 --> 00:00:35.420
But until I was forced to do it and
forced to fail, I didn't learn anything.

12
00:00:35.420 --> 00:00:38.466
I was like, yeah, trees, I know trees.

13
00:00:38.466 --> 00:00:40.580
The DOM is a tree, cool.

14
00:00:40.580 --> 00:00:42.210
When am I have to use this?

15
00:00:42.210 --> 00:00:45.920
But until I got this question and failed
it, I didn't force myself to learn it.

16
00:00:45.920 --> 00:00:46.800
But once you learn trees,

17
00:00:46.800 --> 00:00:50.880
you kind of, the knowledge you
learn is applicable to any tree.

18
00:00:50.880 --> 00:00:55.590
Cuz trees are, the way you traverse a tree
is generally gonna be the same way.

19
00:00:55.590 --> 00:00:58.600
There's different types of trees,
which I'm definitely not gonna go into.

20
00:00:58.600 --> 00:01:01.750
I pretty sure there's another
Frontend Master's course which talks more

21
00:01:01.750 --> 00:01:03.089
about tree algorithms and different types.

22
00:01:04.240 --> 00:01:05.510
We're not gonna do that today.

23
00:01:05.510 --> 00:01:07.662
We're just gonna do the most basic tree.

24
00:01:07.662 --> 00:01:09.590
But gonna start off with a tree.

25
00:01:09.590 --> 00:01:10.840
If you didn't know anything about trees,

26
00:01:10.840 --> 00:01:14.160
which I didn't at the time,
all trees have two properties.

27
00:01:14.160 --> 00:01:17.742
They have a root, where the tree begins,
and they have nodes.

28
00:01:20.176 --> 00:01:24.089
And to break up those nodes,
the child, there's are parents and

29
00:01:24.089 --> 00:01:25.383
there are children.

30
00:01:25.383 --> 00:01:29.730
The children, of course,
are the children of the parent node.

31
00:01:29.730 --> 00:01:32.440
So the root, everything
underneath the root is the child.

32
00:01:32.440 --> 00:01:34.300
But of course the root
itself is a node as well.

33
00:01:35.510 --> 00:01:39.490
And the way you wanna think about
this programmatically is the parent.

34
00:01:39.490 --> 00:01:42.030
If you thought, I don't know,
parent.children?

35
00:01:42.030 --> 00:01:46.426
How would you represent the position
of the children on a tree?

36
00:01:48.861 --> 00:01:53.761
I know, it's a little tricky, but
what if we said this was zero and one?

37
00:01:53.761 --> 00:01:54.399
What if I had three children?

38
00:01:54.399 --> 00:01:55.930
It'd be zero, one, two.

39
00:01:55.930 --> 00:01:57.296
Zero, one, two, three, four.

40
00:01:57.296 --> 00:02:00.050
That's how we would jump the order of the
tree if you're reading from left to right,

41
00:02:00.050 --> 00:02:02.040
and that's generally
how you think about it.

42
00:02:02.040 --> 00:02:04.500
Programmatically, we'd say,
that's an array.

43
00:02:05.560 --> 00:02:07.925
So think of this in terms
of JavaScript objects.

44
00:02:07.925 --> 00:02:12.310
Parent.children is an array of items.

45
00:02:12.310 --> 00:02:17.040
So child 1 at index 0 is gonna be
some node, it's gonna be this node.

46
00:02:17.040 --> 00:02:19.370
Child 2 is gonna be this node,
and so on and so forth.

47
00:02:21.280 --> 00:02:23.930
This will be applicable for
this next question.

48
00:02:23.930 --> 00:02:27.940
So what's a tree that we all know and
love?

49
00:02:27.940 --> 00:02:29.930
I've said it like four times already.

50
00:02:32.753 --> 00:02:33.413
&gt;&gt; DOM.

51
00:02:33.413 --> 00:02:35.760
&gt;&gt; The DOM, yes, it's a tree.

52
00:02:35.760 --> 00:02:38.270
And what does the DOM have for properties?

53
00:02:39.610 --> 00:02:43.540
You have a root, that's HTML,
it's always gonna start with HTML.

54
00:02:43.540 --> 00:02:45.850
Then you have maybe a body,
a title, a head.

55
00:02:45.850 --> 00:02:49.805
It's a tree, so what does every tree have?

56
00:02:49.805 --> 00:02:50.598
Give you a hint.

57
00:02:52.893 --> 00:02:54.420
Child nodes.

58
00:02:54.420 --> 00:02:57.320
And you've probably actually used that, we
might have used that in an early example.

59
00:02:57.320 --> 00:03:00.220
.children is how to get
the child node to the parent.

60
00:03:00.220 --> 00:03:04.470
So every HTML element has a children,
it has a parent you can guarantee that.

61
00:03:04.470 --> 00:03:07.759
If I wanna Iterate through an array.

62
00:03:07.759 --> 00:03:10.986
So if I click something and
I wanna say, what did I click on?

63
00:03:10.986 --> 00:03:12.821
Cuz event's not working or something.

64
00:03:12.821 --> 00:03:15.295
I would just say .parent,
.parent, .parent, .parent.

65
00:03:15.295 --> 00:03:16.268
I'd just iterate up.

66
00:03:16.268 --> 00:03:19.240
If I wanna iterate down,
I say that children at position zero,

67
00:03:19.240 --> 00:03:22.510
dot children opposition one and
that way I'm moving through a tree.

68
00:03:24.530 --> 00:03:27.560
I will give you fair warning,
this one is was challenging.

69
00:03:27.560 --> 00:03:30.970
But again, i think it's helpful because
once you understand the solution,

70
00:03:30.970 --> 00:03:34.210
this problem you understand
how to iterate through a tree.

71
00:03:34.210 --> 00:03:37.840
Using Dom as a good exposure,
that if you understand Dom you understand,

72
00:03:37.840 --> 00:03:42.830
i can iterate through a binary search
tree or I can iterate through a vl tree.

73
00:03:42.830 --> 00:03:44.422
Or many different types of trees.

74
00:03:46.790 --> 00:03:49.110
So for this particular problem,
I have drawn it out.

75
00:03:50.420 --> 00:03:52.700
You're given two DOM trees.

76
00:03:52.700 --> 00:03:57.570
So think of, I don't know, two different
copies of webpage if you wanted to.

77
00:03:57.570 --> 00:04:01.080
Or let's say you offloaded your DOM,

78
00:04:01.080 --> 00:04:03.490
your virtual DOM, into a web worker,
and you wanna iterate through,

79
00:04:03.490 --> 00:04:07.270
you wanna manipulate them both So
you can use HTML directly on those.

80
00:04:08.400 --> 00:04:10.830
But you know,
we're one element isn't a tree.

81
00:04:10.830 --> 00:04:11.940
So you have a DOM tree.

82
00:04:11.940 --> 00:04:14.460
It's represents things that are just HTML.

83
00:04:14.460 --> 00:04:17.760
Let's say you have a clone
of that exact same tree.

84
00:04:17.760 --> 00:04:20.250
How would you get the path
to a given element?

85
00:04:22.150 --> 00:04:25.970
So if I give you the location
of a button One domTree,

86
00:04:25.970 --> 00:04:28.860
how would you get to that
button in an identical domTree.

87
00:04:28.860 --> 00:04:32.820
So I'll say the more formal way we
have two identical boundaries A and B.

88
00:04:32.820 --> 00:04:34.590
For DOM tree A, we have location and

89
00:04:34.590 --> 00:04:38.350
element creative function to find
that same element in DOM tree B.

90
00:04:40.640 --> 00:04:44.850
For this one, I will give you 20 minutes
and I'll definitely help you out.

91
00:04:46.710 --> 00:04:50.060
This one is tricky, but
think of what we know already.

92
00:04:50.060 --> 00:04:51.720
What do we know about DOM tree a?

93
00:04:53.040 --> 00:04:56.920
We know that it has a root, fine.

94
00:04:56.920 --> 00:04:58.140
But we're not given the root.

95
00:04:58.140 --> 00:05:02.240
We're given an element to find,
and we're given the other tree.

96
00:05:02.240 --> 00:05:06.100
So how would we get to the root,
given an element, any node?

97
00:05:07.330 --> 00:05:11.220
So given this node how
do we get up to here?

98
00:05:14.140 --> 00:05:16.250
&gt;&gt; Recursion from the parents.

99
00:05:16.250 --> 00:05:18.460
&gt;&gt; Exactly, you can use recursion.

100
00:05:18.460 --> 00:05:20.950
I would just say a loop and
just walk back over.

101
00:05:20.950 --> 00:05:25.480
Because this node we know for
a fact has a parent.

102
00:05:26.530 --> 00:05:29.760
And then this node has a parent and
this node has a parent.

103
00:05:29.760 --> 00:05:32.150
So you can walk back up the tree
just calling the parent every time.

104
00:05:32.150 --> 00:05:35.990
I'll give you another hint in
another five minutes or so,

105
00:05:35.990 --> 00:05:38.138
but that should start
you on the right path.

106
00:05:38.138 --> 00:05:40.139
All right.

107
00:05:40.139 --> 00:05:45.220
Right, mid problem hint since
this one is a Challenging,

108
00:05:45.220 --> 00:05:47.070
especially if you never
thought about trees.

109
00:05:48.200 --> 00:05:50.350
But let's think about the things we know.

110
00:05:50.350 --> 00:05:52.200
We know we're probably gonna
need some sort of function.

111
00:05:52.200 --> 00:06:00.080
And that's gonna take an elements and then
it's gonna take that other tree, okay.

112
00:06:01.740 --> 00:06:04.580
But ultimately what are we trying to do?

113
00:06:04.580 --> 00:06:11.260
And if I say it, you'll be like,
We're trying to go up the tree.

114
00:06:15.451 --> 00:06:17.300
We have this element and
then we have this other tree.

115
00:06:17.300 --> 00:06:18.540
That's what we know.

116
00:06:18.540 --> 00:06:21.540
We're trying to get to here, essentially.

117
00:06:22.640 --> 00:06:26.450
And then, we can replay that
same path to get to here.

118
00:06:27.960 --> 00:06:29.780
So that would be a reverse path algorithm.

119
00:06:31.160 --> 00:06:35.220
So essentially you start here,
how would we walk up the tree?

120
00:06:36.570 --> 00:06:37.780
We would call dot parent.

121
00:06:37.780 --> 00:06:39.840
And then we call the parent and
then we call the parent.

122
00:06:41.600 --> 00:06:43.180
If there is no parent, we're at the root.

123
00:06:45.820 --> 00:06:47.410
So if we can store that.

124
00:06:47.410 --> 00:06:52.120
We can then replay that, reversing it
to walk back down the tree to here.

125
00:06:53.620 --> 00:06:57.050
Remember that every element has
a parent and it has children.

126
00:06:59.930 --> 00:07:02.610
That's the hint I'll give you.

127
00:07:02.610 --> 00:07:06.580
So I'll say, you want to iterate
up until you hit the root node.

128
00:07:06.580 --> 00:07:09.270
And then you want to jump back,
go back down.

