WEBVTT

1
00:00:00.280 --> 00:00:02.320
Let's talk about the code tests.

2
00:00:02.320 --> 00:00:07.820
The code tests is, depending on the
company, is something that they give you.

3
00:00:07.820 --> 00:00:11.187
It's probably gonna be
a multi hour project,

4
00:00:11.187 --> 00:00:14.476
maybe 5 to 10 hours, somewhere in there.

5
00:00:14.476 --> 00:00:17.057
But they want to see how you
code in a larger environment.

6
00:00:17.057 --> 00:00:20.960
Code tests are something I
personally am on the fence about.

7
00:00:20.960 --> 00:00:24.706
If someone has a robust GitHub or a
history of delivering projects, like yeah,

8
00:00:24.706 --> 00:00:26.349
you worked on that project, okay.

9
00:00:26.349 --> 00:00:30.160
I can check out their GitHub,
I may not do a code test.

10
00:00:30.160 --> 00:00:32.650
But there are plenty of companies
you'll get a code test for.

11
00:00:32.650 --> 00:00:36.430
Here are some of the things,
certainly some of the tips you want to do.

12
00:00:38.470 --> 00:00:44.080
Tip number one, if you ignore
everything else I say, follow this.

13
00:00:44.080 --> 00:00:47.080
Make your code as readable as possible.

14
00:00:47.080 --> 00:00:48.550
Don't try to be clever.

15
00:00:48.550 --> 00:00:52.820
No one's gonna applaud you for
using double tilde instead of math.round.

16
00:00:52.820 --> 00:00:56.410
Yeah, it looks cool and you're like, wow,
look how they're gonna see how smart I am.

17
00:00:56.410 --> 00:01:01.224
If you're reading through many code
reviews, you're not gonna want cleverness,

18
00:01:01.224 --> 00:01:02.661
you want readable code.

19
00:01:02.661 --> 00:01:05.051
As an engineer,
if I'm reading someone's code review or

20
00:01:05.051 --> 00:01:07.825
reviewing someone's code test I
want to see do they know the code.

21
00:01:07.825 --> 00:01:11.758
It's this type of code I want to see
if I come up in my code base itself.

22
00:01:11.758 --> 00:01:13.722
These are the kind of
PRs I want to review.

23
00:01:13.722 --> 00:01:19.470
That's it, don't be clever,
just get it done and make it readable.

24
00:01:19.470 --> 00:01:20.830
And comment your code.

25
00:01:20.830 --> 00:01:23.860
Until the day I die,
I'm gonna say comment your code.

26
00:01:23.860 --> 00:01:25.650
Funny enough,
not everybody agrees with me on this.

27
00:01:25.650 --> 00:01:29.520
Some people say,
code should be self-documenting.

28
00:01:29.520 --> 00:01:30.830
People say that all the time.

29
00:01:30.830 --> 00:01:34.040
Cool, make it self-documenting, but
also comment your code, that's it.

30
00:01:34.040 --> 00:01:36.510
Especially if you're reading
a lot of code tests.

31
00:01:36.510 --> 00:01:38.310
Comment you code,
it makes it easier to understand.

32
00:01:38.310 --> 00:01:41.340
Okay, I don't necessarily agree with
the way they're doing things, but

33
00:01:41.340 --> 00:01:42.210
I follow their logic.

34
00:01:42.210 --> 00:01:44.135
Because they told me
what they're doing and

35
00:01:44.135 --> 00:01:46.120
I don't have to take
time to figure that out.

36
00:01:46.120 --> 00:01:48.559
Because if I have to take time to
figure it out, I'll probably be like,

37
00:01:48.559 --> 00:01:50.580
this is too complicated, next.

38
00:01:50.580 --> 00:01:51.480
That's just how it goes.

39
00:01:51.480 --> 00:01:54.068
You're a busy person, I'm a busy person.

40
00:01:54.068 --> 00:01:58.640
Just make your code readable, and
comment it and don't over complicate it.

41
00:01:58.640 --> 00:02:01.550
It's tempting to try to be like I said,
clever.

42
00:02:02.600 --> 00:02:06.200
Just make it simple,
the best code is the simplest code.

43
00:02:06.200 --> 00:02:08.320
The best code is actually
the least amount of code.

44
00:02:08.320 --> 00:02:11.217
If someone blows up something and
it's six different functions, and

45
00:02:11.217 --> 00:02:13.536
it doesn't need to be,
that's overcomplicating it.

46
00:02:13.536 --> 00:02:16.770
Keep it clean, keep it readable,
don't make it too wild.

47
00:02:17.910 --> 00:02:19.600
Don't import too many libraries.

48
00:02:19.600 --> 00:02:21.332
Libraries don't tell me what you know.

49
00:02:21.332 --> 00:02:23.351
They tell me that you know
how to Google things or

50
00:02:23.351 --> 00:02:25.400
you know how to use
what other people know.

51
00:02:25.400 --> 00:02:26.460
Which is a skill too, but

52
00:02:26.460 --> 00:02:29.604
in this particular test I'm trying to
see do you know what you're doing?

53
00:02:29.604 --> 00:02:31.210
Do you know how to code?

54
00:02:31.210 --> 00:02:33.390
It's okay to import a library here and

55
00:02:33.390 --> 00:02:36.320
there, depending on what the people
who is giving the code test are.

56
00:02:36.320 --> 00:02:39.510
Some people say no library,
some people say do whatever you want.

57
00:02:39.510 --> 00:02:41.700
But even if they say you can use React or
Angular or Vue or

58
00:02:41.700 --> 00:02:45.370
whatever you want, I wouldn't go
overboard on importing libraries.

59
00:02:45.370 --> 00:02:47.900
It's better to keep it
as simple as possible.

60
00:02:47.900 --> 00:02:52.962
I generally stick to Lodash,
just utility functions.

61
00:02:52.962 --> 00:02:56.030
I could code up these utility functions,
but it's nice that someone did it for me.

62
00:02:56.030 --> 00:02:57.630
But they're not cheating anyway.

63
00:02:58.970 --> 00:03:04.850
If you have any time at the end,
as a cherry on top, add some unit tests.

64
00:03:04.850 --> 00:03:06.146
This person is a well rounded engineer.

65
00:03:06.146 --> 00:03:07.565
They don't just think about
getting the job done,

66
00:03:07.565 --> 00:03:08.740
they think about maintainability.

67
00:03:08.740 --> 00:03:11.708
They think about how this
code is gonna live over time.

68
00:03:11.708 --> 00:03:14.279
And if you have any questions
on the code test, ask questions.

69
00:03:15.720 --> 00:03:18.200
I know, if you have questions,
ask questions, but you often don't.

70
00:03:18.200 --> 00:03:19.639
Feel free to email that person back and
say.

71
00:03:19.639 --> 00:03:24.509
Hey, I have a question on, I don't
really understand the requirements,

72
00:03:24.509 --> 00:03:27.380
or this is unclear to me, ask questions.

73
00:03:27.380 --> 00:03:30.420
It's better to ask questions ahead
of time, you won't look silly.

74
00:03:30.420 --> 00:03:32.254
Than to do the code test and
it's completely wrong.

75
00:03:32.254 --> 00:03:35.690
And they're like, well,
at best we're gonna ask you to redo it.

76
00:03:35.690 --> 00:03:38.793
At worst they're gonna be like sorry,
no, next.

77
00:03:38.793 --> 00:03:42.314
And you wasted your time,
you wasted their time.

78
00:03:42.314 --> 00:03:43.260
So ask questions ahead of time.

