WEBVTT

1
00:00:00.160 --> 00:00:01.800
Flattening an array.

2
00:00:01.800 --> 00:00:03.850
Mm, yes.

3
00:00:03.850 --> 00:00:07.570
We could use flat, flat map or
something like that.

4
00:00:07.570 --> 00:00:08.978
But because it's an interview,

5
00:00:08.978 --> 00:00:11.955
I wanna see how well you understand
reducing data structure.

6
00:00:11.955 --> 00:00:15.637
How well you understand array methods, how
well do you understand arrays in general?

7
00:00:15.637 --> 00:00:18.581
[LAUGH] Arrays, I wish I can get a raise.

8
00:00:18.581 --> 00:00:20.725
As usual, we'll start off the same way.

9
00:00:20.725 --> 00:00:22.060
Thank you, I got some laughs that time.

10
00:00:22.060 --> 00:00:23.878
&gt;&gt; [LAUGH]
&gt;&gt; We'll start off the same way.

11
00:00:23.878 --> 00:00:27.957
So, I need to create a function
to flatten an array.

12
00:00:27.957 --> 00:00:34.094
So, I need a function and
we'll call it flatten, flatter.

13
00:00:34.094 --> 00:00:35.513
And we know it takes an array.

14
00:00:39.335 --> 00:00:41.630
Now, what do we wanna do?

15
00:00:41.630 --> 00:00:42.643
What are we thinking?

16
00:00:44.733 --> 00:00:48.280
Or eventually,
we know we wanna return an array.

17
00:00:48.280 --> 00:00:49.700
So I could start here.

18
00:00:49.700 --> 00:00:55.876
I could say return someNewArray,
new array.

19
00:00:57.923 --> 00:01:01.070
We're probably gonna change this but
this will work too.

20
00:01:01.070 --> 00:01:03.729
There are many different
ways to do this problem.

21
00:01:03.729 --> 00:01:08.486
I'm gonna use my favorite function, or
my favorite method, which is reduce.

22
00:01:08.486 --> 00:01:13.760
So I'm gonna say arr.reduce.

23
00:01:13.760 --> 00:01:17.770
And reducer, well,
they take four arguments.

24
00:01:17.770 --> 00:01:21.253
But the ones you actually care
about are the accumulator,

25
00:01:21.253 --> 00:01:25.319
which I'm gonna say the accumulator,
and the actual item itself.

26
00:01:25.319 --> 00:01:27.912
And let's finish this out.

27
00:01:30.497 --> 00:01:34.399
And reduce takes the other argument,
which is the thing you wanna start with.

28
00:01:34.399 --> 00:01:35.482
So this will be the accumulator.

29
00:01:35.482 --> 00:01:38.120
This will be our base value,
which is just an array.

30
00:01:39.680 --> 00:01:43.517
Okay, cool, cool.

31
00:01:43.517 --> 00:01:46.900
So mentally what I'm doing is
now I'm looking at the array.

32
00:01:46.900 --> 00:01:48.590
I'm looking at the data structure.

33
00:01:48.590 --> 00:01:51.220
The item is gonna be one because
this is where I started,

34
00:01:51.220 --> 00:01:53.170
I'm just starting out my iteration.

35
00:01:53.170 --> 00:01:57.530
So I wanna check if the item at index
zero, which would be one in this case, but

36
00:01:57.530 --> 00:02:00.630
let's say I didn't know that,
I wanna check if it's a number or

37
00:02:00.630 --> 00:02:01.260
if it's an array.

38
00:02:02.260 --> 00:02:05.960
And the way to do that is Array.isArray.

39
00:02:05.960 --> 00:02:09.722
So I can say, if the item,

40
00:02:09.722 --> 00:02:14.342
actually say Array.isArray,

41
00:02:14.342 --> 00:02:17.780
check if it's an item.

42
00:02:17.780 --> 00:02:19.640
I'll deal with that in a second.

43
00:02:19.640 --> 00:02:21.540
It gets a little more complicated.

44
00:02:21.540 --> 00:02:24.100
But if it's not an array,
what do I wanna do?

45
00:02:24.100 --> 00:02:26.621
I wanna just return it to my accumulator.

46
00:02:26.621 --> 00:02:30.251
So I'm gonna say acc.push.

47
00:02:30.251 --> 00:02:33.862
And I'm gonna push the item into
the accumulator that I wanna eventually

48
00:02:33.862 --> 00:02:34.520
build up to.

49
00:02:35.530 --> 00:02:38.979
And then, ultimately,
this will get me every time on reducers,

50
00:02:38.979 --> 00:02:40.931
you have to return the accumulator.

51
00:02:40.931 --> 00:02:42.320
It doesn't return by default.

52
00:02:44.659 --> 00:02:47.952
So, we did one,
we have one in our new array, we have two,

53
00:02:47.952 --> 00:02:50.270
we have two in our new array, crap.

54
00:02:50.270 --> 00:02:52.431
Now we hit an array, a different array.

55
00:02:52.431 --> 00:02:53.562
What do we do now?

56
00:02:55.961 --> 00:02:59.880
I need a way of reducing this array down.

57
00:02:59.880 --> 00:03:03.510
So we're gonna use what we call recursion,

58
00:03:03.510 --> 00:03:08.130
recursion is the idea of reducing a value
down by calling the function over and

59
00:03:08.130 --> 00:03:11.430
over again and every time,
the value gets a little bit smaller.

60
00:03:11.430 --> 00:03:12.810
You don't have to use recursion for this,

61
00:03:12.810 --> 00:03:14.520
there are many different
ways to solve this, but

62
00:03:14.520 --> 00:03:17.350
this particular problem lands
itself well to recursion.

63
00:03:17.350 --> 00:03:21.126
So at some point,
what I wanna do is I need to concatenates,

64
00:03:21.126 --> 00:03:23.260
I need to reduce this down.

65
00:03:23.260 --> 00:03:26.260
Once it's flat,
I can concatenate that into another array.

66
00:03:26.260 --> 00:03:31.422
So I'll say item and I'm gonna say

67
00:03:31.422 --> 00:03:36.417
item., what do I wanna do here?

68
00:03:36.417 --> 00:03:38.060
I wanna say concat.

69
00:03:39.670 --> 00:03:46.390
Essentially, concat this
item down into- actually no.

70
00:03:46.390 --> 00:03:48.870
No, what I wanna do is
I wanna flatten this.

71
00:03:48.870 --> 00:03:52.046
Assuming my flatten function
will work eventually,

72
00:03:52.046 --> 00:03:53.956
I wanna flatten this item down.

73
00:03:53.956 --> 00:03:56.389
So the item is now flattened.

74
00:03:56.389 --> 00:04:00.268
I wanna concatenate this
down into the other thing.

75
00:04:00.268 --> 00:04:04.992
This is what always gets me on flatten
is you get messed up with types.

76
00:04:04.992 --> 00:04:06.680
I'm like, what do I have now?

77
00:04:06.680 --> 00:04:08.840
Do I have an array, do I have an item?

78
00:04:08.840 --> 00:04:10.420
Flatten is gonna return an array.

79
00:04:10.420 --> 00:04:11.450
So what do we do with arrays?

80
00:04:11.450 --> 00:04:12.902
We concatenate those.

81
00:04:12.902 --> 00:04:17.300
So, I can say, actually,
I'm gonna shorten this.

82
00:04:17.300 --> 00:04:19.139
It's gonna return here.

83
00:04:19.139 --> 00:04:21.591
Save me some time.

84
00:04:21.591 --> 00:04:23.563
And then I'm gonna say concacts.

85
00:04:31.625 --> 00:04:35.370
Actually, yeah, yes.

86
00:04:35.370 --> 00:04:36.006
That's the solution.

87
00:04:37.968 --> 00:04:39.690
Does everybody follow?

88
00:04:39.690 --> 00:04:41.540
There are many ways to do this,
this is one of them.

89
00:04:43.010 --> 00:04:43.758
So we have an array.

90
00:04:43.758 --> 00:04:48.440
We iterate over the array until we
hit an array, then we concatenate by

91
00:04:48.440 --> 00:04:51.790
recursively calling our own function,
because we know eventually,

92
00:04:51.790 --> 00:04:54.850
this will return in or
it'll return a flattened array.

93
00:04:54.850 --> 00:04:57.700
So it doesn't matter how
deeply nested we go here,

94
00:04:57.700 --> 00:05:00.440
it will always return an array
once it is done returning.

95
00:05:00.440 --> 00:05:02.198
And that's the power of recursion.

96
00:05:02.198 --> 00:05:05.422
Some problems lend themself
well to recursion, some do not.

97
00:05:05.422 --> 00:05:07.929
But generally it's something like this
where you're diving deeper and deeper and

98
00:05:07.929 --> 00:05:10.000
deeper, but
eventually you wanna bubble back up.

99
00:05:10.000 --> 00:05:11.260
Recursion is a good solution to it.

100
00:05:14.940 --> 00:05:16.221
Not bad, not bad at all.

101
00:05:16.221 --> 00:05:18.252
Actually, I forgot one thing.

102
00:05:20.352 --> 00:05:26.839
I forgot to, Accumulator equals,

103
00:05:26.839 --> 00:05:30.851
cut that, and
I'm gonna change that a little bit.

104
00:05:33.698 --> 00:05:37.894
And like I said, if I'm syntactically
a little off here, that's okay,

105
00:05:37.894 --> 00:05:38.920
the idea stands.

106
00:05:38.920 --> 00:05:42.680
If you can get this far some solution,
good enough, this is good enough for

107
00:05:42.680 --> 00:05:44.070
a whiteboard problem.

108
00:05:44.070 --> 00:05:47.200
So, don't at me on Twitter,
if I've made a small mistake somewhere.

109
00:05:48.410 --> 00:05:49.920
Twitter's vicious, it's vicious.

