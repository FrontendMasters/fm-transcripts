WEBVTT

1
00:00:00.590 --> 00:00:03.700
Now, moving subjects rapidly.

2
00:00:03.700 --> 00:00:05.740
Let's talk about rendering.

3
00:00:07.150 --> 00:00:10.220
How would I render something
smoothly in a DOM?

4
00:00:10.220 --> 00:00:12.980
Let's say I give you a code challenge and

5
00:00:12.980 --> 00:00:18.610
it's move some elements from
left to right by 500 pixels.

6
00:00:18.610 --> 00:00:20.130
How would you do that?

7
00:00:20.130 --> 00:00:23.270
What we, what sort of properties
do we have in elements?

8
00:00:23.270 --> 00:00:25.160
We have positions.

9
00:00:25.160 --> 00:00:30.030
So, okay in CSS how would you move,
how would you move an element?

10
00:00:30.030 --> 00:00:31.860
It's really you've done
that at some point.

11
00:00:31.860 --> 00:00:36.823
&gt;&gt; Margins, margins are the different

12
00:00:36.823 --> 00:00:39.850
aligning positions
&gt;&gt; I mean,

13
00:00:39.850 --> 00:00:42.870
that's not, you would move the element but
you wouldn't want to move with

14
00:00:42.870 --> 00:00:45.310
margins because they're off
the layout of the whole page.

15
00:00:45.310 --> 00:00:49.370
You would use position,
x position, y position.

16
00:00:50.680 --> 00:00:52.550
x left,
&gt;&gt; top left,

17
00:00:52.550 --> 00:00:54.300
&gt;&gt; top left, bottom right.

18
00:00:54.300 --> 00:00:56.980
&gt;&gt; I and in this case we would
use on giving you a hint.

19
00:00:56.980 --> 00:01:01.780
How do you translate because translate,
unlike the calling anything else,

20
00:01:01.780 --> 00:01:03.990
it will not force a reflow.

21
00:01:03.990 --> 00:01:06.100
It essentially takes it out of
the the flow of the DOM and

22
00:01:06.100 --> 00:01:07.370
it just moves it independently.

23
00:01:08.520 --> 00:01:10.140
And you've all done this in CSS.

24
00:01:10.140 --> 00:01:12.330
But when you're sitting on a whiteboard,

25
00:01:12.330 --> 00:01:14.260
it's much harder to
remember all these things.

26
00:01:15.820 --> 00:01:19.340
&gt;&gt; But knowing, rendering and
understanding, okay,

27
00:01:19.340 --> 00:01:20.480
we understand and move position.

28
00:01:20.480 --> 00:01:22.330
We do it all the time in CSS.

29
00:01:22.330 --> 00:01:25.360
Doing JavaScript is just doing
calling this styles manually.

30
00:01:25.360 --> 00:01:29.440
So some element that style, transform,

31
00:01:29.440 --> 00:01:33.060
translate x, the same thing doing
CSS we're just doing in JavaScript.

32
00:01:33.060 --> 00:01:34.690
But how do we get
something to move smoothly?

33
00:01:36.080 --> 00:01:38.300
This is a good actually
high level question.

34
00:01:38.300 --> 00:01:39.560
How would you smoothly animate something?

35
00:01:40.880 --> 00:01:42.830
&gt;&gt; CSS transitions.

36
00:01:42.830 --> 00:01:44.520
&gt;&gt; It's not bad, yeah.

37
00:01:44.520 --> 00:01:48.150
But if we're doing it in JAVA script,
we're using request animation frame.

38
00:01:48.150 --> 00:01:50.170
Now what is request animation frame?

39
00:01:50.170 --> 00:01:50.740
Have you heard of it?

40
00:01:52.720 --> 00:01:53.420
All right.

41
00:01:53.420 --> 00:01:59.110
So request animation frame is a globally
available function on the Window objects.

42
00:01:59.110 --> 00:02:02.020
And what it does is every
time there's a render,

43
00:02:02.020 --> 00:02:03.820
it makes a call to requestAnimationFrame.

44
00:02:04.890 --> 00:02:07.700
And this is important because if we're
trying to get a smooth animation,

45
00:02:07.700 --> 00:02:09.300
we don't want any stuttering.

46
00:02:09.300 --> 00:02:12.530
That means every time there's
a new render, we wanna move it

47
00:02:12.530 --> 00:02:16.560
just a little bit more, we wanna move
that element just a little bit more.

48
00:02:16.560 --> 00:02:21.470
And all browsers render that 60 frames
a second That means in one second it's

49
00:02:21.470 --> 00:02:24.460
gonna call requestAnimationFrame
approximately seconds.

50
00:02:25.740 --> 00:02:31.090
Station frame it's gonna smoothly
only when the render happens.

51
00:02:31.090 --> 00:02:35.750
It'll never block if you're
making some short game or

52
00:02:35.750 --> 00:02:39.830
arrogant use requestAnimationFrame
If you didn't know about it,

53
00:02:39.830 --> 00:02:41.580
it is another way of doing
timing in JavaScript,

54
00:02:41.580 --> 00:02:46.600
if you wanted something to happen
every 16 or so milliseconds, roughly.

55
00:02:46.600 --> 00:02:50.180
There are edge cases, but
I don't wanna go too far into that.

56
00:02:50.180 --> 00:02:53.520
So knowing that every 16
something milliseconds

57
00:02:53.520 --> 00:02:55.750
request animation frame is called.

58
00:02:55.750 --> 00:02:57.910
That's where we wanna do all for
animations.

59
00:02:59.890 --> 00:03:01.150
Suite our next problem.

60
00:03:01.150 --> 00:03:02.800
It's exactly what I described.

61
00:03:02.800 --> 00:03:06.040
I want you to move an elements and
I gave you a hint in a real interview,

62
00:03:06.040 --> 00:03:07.730
they wouldn't tell you to
use request Animation Frame.

63
00:03:09.320 --> 00:03:10.130
Let's take a look at this one.

64
00:03:14.460 --> 00:03:18.970
Creative function to move an element
&gt;&gt; The arguments are the duration.

65
00:03:18.970 --> 00:03:22.500
So if I want to move 500 pixels,
over 10 seconds,

66
00:03:22.500 --> 00:03:26.820
I pass in 10,000 milliseconds or
seconds doesn't really matter.

67
00:03:26.820 --> 00:03:28.400
I'd say the pixel so that'd be 500.

68
00:03:28.400 --> 00:03:29.910
And then I put in the elements and move.

69
00:03:31.990 --> 00:03:33.260
You could do this in CSS.

70
00:03:33.260 --> 00:03:37.510
If you want it to But
this is a good application of data strips.

71
00:03:38.550 --> 00:03:39.690
It's a little math heavy.

72
00:03:41.350 --> 00:03:43.090
But this have to be,
it depends on your approach.

