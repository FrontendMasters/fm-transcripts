WEBVTT

1
00:00:00.250 --> 00:00:02.430
&gt;&gt; Evan You: So
what is a virtual DOM anyway?

2
00:00:02.430 --> 00:00:05.988
The actual DOM,
most of us know the native DOM API.

3
00:00:05.988 --> 00:00:09.450
For example document.createElement,
we can create a real

4
00:00:09.450 --> 00:00:14.760
div node that represents this
div in our actual document.

5
00:00:14.760 --> 00:00:16.410
So this is native API.

6
00:00:16.410 --> 00:00:21.479
And it's internals are in fact
implementing C++ by the browser engine.

7
00:00:22.660 --> 00:00:26.290
We don't actually get to touch most of it.

8
00:00:26.290 --> 00:00:31.670
It just exposes the API in JavaScript for
us to work with it.

9
00:00:31.670 --> 00:00:36.839
In comparision, the virtual DOM in view,
on each instance there's actually

10
00:00:36.839 --> 00:00:42.738
this $createElement function which returns
a virtual node that also represents a div.

11
00:00:42.738 --> 00:00:44.920
But it's just pure JavaScript.

12
00:00:44.920 --> 00:00:45.619
It's just an object.

13
00:00:47.918 --> 00:00:49.579
&gt;&gt; Evan You: The difference
is actually pretty huge.

14
00:00:49.579 --> 00:00:53.828
Because as you know, if you log
a div's properties inside the browser,

15
00:00:53.828 --> 00:00:57.184
you'll see that a real div node have so
many properties.

16
00:00:57.184 --> 00:01:00.542
And the underlying implementation
is in fact pretty heavy.

17
00:01:00.542 --> 00:01:05.147
And also,
because we are essentially calling this

18
00:01:05.147 --> 00:01:08.896
native code via a JavaScript interface,

19
00:01:08.896 --> 00:01:14.265
there is this cost of communication
between the two sides.

20
00:01:14.265 --> 00:01:16.836
And it's going to be more expensive than,
say,

21
00:01:16.836 --> 00:01:20.740
doing pure Javascript operations
in pure Javascript land.

22
00:01:20.740 --> 00:01:26.600
So this is why a lot of times we say if
you touch the DOM, things get slower.

23
00:01:26.600 --> 00:01:29.020
In some browsers,
they might optimize that.

24
00:01:29.020 --> 00:01:32.343
But in general, there is this slight
overhead when you are reaching

25
00:01:32.343 --> 00:01:34.453
to native stuff from the JavaScript side.

26
00:01:37.715 --> 00:01:42.060
&gt;&gt; Evan You: So as you can see,
the virtual DOM div is just an object.

27
00:01:42.060 --> 00:01:45.750
It has a tag that tells us it's a div.

28
00:01:45.750 --> 00:01:50.860
It has a data object,
which contains possible attributes.

29
00:01:50.860 --> 00:01:54.170
If it doesn't have any attributes, it
doesn't even need to have a data object.

30
00:01:55.960 --> 00:02:00.717
And then it can have a list of children,
which is an array of more virtual nodes,

31
00:02:00.717 --> 00:02:04.987
so now we have a tree of virtual nodes
which constitute the virtual DOM.

32
00:02:07.970 --> 00:02:12.030
&gt;&gt; Evan You: So this is just
very high-level understanding.

33
00:02:13.080 --> 00:02:15.560
Virtual DOM is cheaper than
the actual DOM, right?

34
00:02:15.560 --> 00:02:18.802
So let's say we have
a list of 1,000 elements.

35
00:02:18.802 --> 00:02:22.770
Creating 1,000 JavaScript
objects is pretty cheap.

36
00:02:22.770 --> 00:02:24.230
It's pretty fast as well.

37
00:02:24.230 --> 00:02:29.140
But creating 1,000 actual div nodes
is much, much more expensive, okay?

38
00:02:31.370 --> 00:02:34.818
&gt;&gt; Evan You: So this virtual DOM is
essentially a lightweight JavaScript data

39
00:02:34.818 --> 00:02:39.090
format to represent what the actual DOM
should look like at a given point in time.

40
00:02:39.090 --> 00:02:44.880
This is important because we're generating
copies of virtual DOM on every update.

41
00:02:44.880 --> 00:02:49.230
This is only made possible because
virtual DOM is cheaper than real DOM is.

42
00:02:49.230 --> 00:02:55.820
If we, say, use inner HTML to update our
app, we're essentially throwing away all

43
00:02:55.820 --> 00:03:00.250
the previous DOM nodes, real DOM nodes,
regenerating all the real DOM nodes again.

44
00:03:01.560 --> 00:03:04.980
So this cost is much much
more expensive than, say,

45
00:03:04.980 --> 00:03:07.860
just generating a new
virtual DOM snapshot.

46
00:03:07.860 --> 00:03:10.440
And inner HTML also has a problem.

47
00:03:10.440 --> 00:03:14.720
It throws away the current state on, say,
form input elements and all that stuff.

48
00:03:16.680 --> 00:03:20.660
But a common misunderstanding is virtual
DOM is what makes a lot of these

49
00:03:20.660 --> 00:03:21.920
frameworks fast.

50
00:03:21.920 --> 00:03:22.980
It does not.

51
00:03:22.980 --> 00:03:27.750
Virtual DOM is just a way to get around

52
00:03:27.750 --> 00:03:32.080
the limitations of the original DOM so
that it enables this

53
00:03:32.080 --> 00:03:37.630
paradigm of declaratively composing
what you want the DOM to look like.

54
00:03:37.630 --> 00:03:40.300
So this unlocks a bunch of possibilities.

55
00:03:40.300 --> 00:03:48.502
But there's also this comparison between,
&gt;&gt; Evan You: Well,

56
00:03:48.502 --> 00:03:50.930
I'll talk about it later.

57
00:03:50.930 --> 00:03:55.510
Another benefit of the virtual DOM
is that it decouples rendering

58
00:03:55.510 --> 00:03:58.265
logic from the actual DOM, right?

59
00:03:59.920 --> 00:04:04.290
So we have the steps of diffing,
then we apply those changes to the DOM.

60
00:04:04.290 --> 00:04:06.220
If we throw away the last step,

61
00:04:06.220 --> 00:04:10.000
all of our apps updating logic can
actually be executed virtually.

62
00:04:10.000 --> 00:04:12.640
It doesn't need to ever touch the DOM.

63
00:04:12.640 --> 00:04:16.350
And in fact, if we abstract out
these eventual connecting points,

64
00:04:16.350 --> 00:04:23.040
API's that touch the DOM and then sort
of redirect them to other places.

65
00:04:23.040 --> 00:04:27.560
We can create the same app running
virtually in any environment that supports

66
00:04:27.560 --> 00:04:30.970
JavaScript, but it doesn't
necessarily have to touch the DOM.

67
00:04:30.970 --> 00:04:37.310
Instead, it can talk to a native rendering
engine, for example, iOS or Android.

68
00:04:37.310 --> 00:04:40.960
Or on the server side, we can turn
the virtual DOM into strings or

69
00:04:40.960 --> 00:04:42.670
a string finder.

70
00:04:42.670 --> 00:04:47.740
So making a virtual DOM
talk to a native rendering

71
00:04:47.740 --> 00:04:53.590
instead is what enables projects like
react native, weeks, native script.

72
00:04:53.590 --> 00:04:57.307
They all have this similar
architecture where

73
00:04:57.307 --> 00:05:02.320
the JavaScript app runs virtually
inside an embedded JavaScript engine.

74
00:05:02.320 --> 00:05:07.300
And it only sends the necessary
messages about, after say diffing,

75
00:05:07.300 --> 00:05:12.170
or any actual node operations
send to the render aside.

76
00:05:12.170 --> 00:05:15.040
So this is the architectural
advantage of virtual DOM.

77
00:05:15.040 --> 00:05:17.820
Obviously, virtual DOM is not
the only way to achieve that, but

78
00:05:17.820 --> 00:05:19.684
it's a pretty good way to do that.

79
00:05:19.684 --> 00:05:26.490
And render function, finally, it's just
a function that returns Virtual DOM.

80
00:05:27.690 --> 00:05:33.240
Okay, so templates in VJS are compiling
to render functions by the compiler.

81
00:05:33.240 --> 00:05:35.720
So we have a little app called
View Template Explorer,

82
00:05:36.870 --> 00:05:40.000
which you can use to sort of get a,

83
00:05:40.000 --> 00:05:44.590
you can explore how the templates
are compiled into render functions.

84
00:05:44.590 --> 00:05:49.290
But we'll talk about what render functions
actually look like in more details later.

