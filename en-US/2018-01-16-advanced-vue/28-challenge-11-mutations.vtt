WEBVTT

1
00:00:00.380 --> 00:00:06.290
&gt;&gt; Evan You: Inside our next exercise,
we'll see that it's still the same app

2
00:00:06.290 --> 00:00:12.320
except we now have a function
called create store.

3
00:00:12.320 --> 00:00:19.220
So this function is essentially trying
to emulate a simple version of UX.

4
00:00:19.220 --> 00:00:24.860
And what the way it should work is
create store takes an object obviously.

5
00:00:26.540 --> 00:00:32.210
It takes some state, and
takes some mutations, and

6
00:00:32.210 --> 00:00:37.409
inside mutations each mutation function
receives the state as the argument.

7
00:00:39.080 --> 00:00:41.080
And it operates on that piece of state.

8
00:00:41.080 --> 00:00:47.170
So this state will essentially
be this object here, okay?

9
00:00:47.170 --> 00:00:52.383
And if you've used VX before,
you'll notice

10
00:00:52.383 --> 00:00:57.073
this is exactly the same as this, right?

11
00:00:57.073 --> 00:01:00.340
So VX store essentially
exposes this exact API.

12
00:01:01.520 --> 00:01:07.149
Except now we want to implement
a simple version of it here,

13
00:01:07.149 --> 00:01:10.100
okay, with only mutations.

14
00:01:10.100 --> 00:01:12.700
No concern for modules or
actions or anything else.

15
00:01:12.700 --> 00:01:17.973
Just do this.
&gt;&gt; Evan You: And the way you use

16
00:01:17.973 --> 00:01:25.630
it is you can refer store.state.count.

17
00:01:25.630 --> 00:01:29.470
When you want to access
state from the store and

18
00:01:29.470 --> 00:01:34.190
the way you trigger change in
the store is by committing a mutation.

19
00:01:34.190 --> 00:01:36.260
So, commit.

20
00:01:36.260 --> 00:01:38.860
Then the ID of the mutation.

21
00:01:38.860 --> 00:01:44.038
So the ID increment here which responds
to the ID here that we're seeing

22
00:01:44.038 --> 00:01:49.492
inside our stored declaration.
&gt;&gt; Evan You: And

23
00:01:49.492 --> 00:01:53.760
the internal implementation is for
yours to fill up.

24
00:01:55.280 --> 00:01:59.633
And obviously it should follow along from
our previous exercise where we're using

25
00:01:59.633 --> 00:02:02.176
view instances as reactive stores.

26
00:02:02.176 --> 00:02:08.480
So yeah, so essentially what we're
asking you to do is use a view

27
00:02:08.480 --> 00:02:13.950
instance to fit the API requirements
that's outlined in the exercise.

