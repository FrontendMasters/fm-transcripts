WEBVTT

1
00:00:00.012 --> 00:00:05.136
&gt;&gt; Evan: Some of the [INAUDIBLE] that you
might have run into is if you use this,

2
00:00:05.136 --> 00:00:11.320
you will not be able to access this,
this way.

3
00:00:11.320 --> 00:00:13.860
Because this is an arrow function and

4
00:00:13.860 --> 00:00:18.000
JavaScript arrow functions will
use the this of the outer context.

5
00:00:18.000 --> 00:00:20.336
It doesn't have its own this, okay?

6
00:00:20.336 --> 00:00:25.380
So make sure if you need this, you always
need to use the full function declaration.

7
00:00:26.540 --> 00:00:28.020
This is the short hand.

8
00:00:28.020 --> 00:00:32.870
This is just a short hand of this,
if you're not familiar with that.

9
00:00:32.870 --> 00:00:34.070
This can be shortened to this, okay?

10
00:00:36.560 --> 00:00:40.090
But if you're using this
normal function declaration,

11
00:00:40.090 --> 00:00:42.100
then you need to remember to return it.

12
00:00:42.100 --> 00:00:45.230
Because you no longer have the implicit
return of the arrow functions.

13
00:00:46.610 --> 00:00:53.150
So what we need to do, obviously,
this should accept a tags prop.

14
00:00:53.150 --> 00:00:56.450
So we're gonna skip all the other thing.

15
00:00:56.450 --> 00:01:03.830
Just use the most simple syntax so that we
can access it inside our render functions.

16
00:01:03.830 --> 00:01:07.690
Now you can access this.tags here,
it should be an array of strings.

17
00:01:07.690 --> 00:01:11.020
We'll just assume it's always
an array of strings and

18
00:01:11.020 --> 00:01:13.290
we'll not care about validation or
anything.

19
00:01:15.250 --> 00:01:19.660
The cool thing is that we're rendering,
so we're rendering a list of the things.

20
00:01:19.660 --> 00:01:25.100
Essentially, we have
a route that is a div,

21
00:01:25.100 --> 00:01:28.760
obviously, and it should have
a list of children elements.

22
00:01:28.760 --> 00:01:34.069
So one easy way to think about this
is like we want something like this.

23
00:01:35.170 --> 00:01:39.330
But notice that these tags will be
coming from the tags dynamically, and

24
00:01:39.330 --> 00:01:42.730
we don't really know how long
this array is gonna be, right?

25
00:01:42.730 --> 00:01:47.800
So you have to construct this
children array programatically.

26
00:01:47.800 --> 00:01:50.552
So we can just map it, right?

27
00:01:50.552 --> 00:01:56.027
So because it's an array and

28
00:01:56.027 --> 00:02:01.734
const children, like this.

29
00:02:01.734 --> 00:02:04.786
I'll just do this, right?

30
00:02:04.786 --> 00:02:07.310
So question is, how do we do this, right?

31
00:02:07.310 --> 00:02:13.510
So when we map it, for each tag, we're
gonna create a corresponding virtual node.

32
00:02:13.510 --> 00:02:17.290
So what we will be returning is an h call.

33
00:02:18.480 --> 00:02:21.320
And obviously,
this h call would just create this tag.

34
00:02:24.240 --> 00:02:28.480
And remember, another requirement for
the test to pass

35
00:02:28.480 --> 00:02:34.210
is that each of these elements should
render the current index in the array.

36
00:02:34.210 --> 00:02:39.520
So to get that index,
the map function, the iterator

37
00:02:39.520 --> 00:02:45.640
pass through the map function takes
a second argument, which is the index.

38
00:02:45.640 --> 00:02:50.970
As you can see, VS code is nicely
hinting the function syntax for me.

39
00:02:50.970 --> 00:02:53.020
And we can use that,

40
00:02:53.020 --> 00:02:56.738
we can pass that number directly
into the h function, and we're done.

41
00:02:56.738 --> 00:02:59.681
So this is pretty much it, and in fact,

42
00:02:59.681 --> 00:03:03.449
we can just copy this here
to make it a one-liner.

43
00:03:09.115 --> 00:03:11.700
&gt;&gt; Evan: And this should suffice.

44
00:03:11.700 --> 00:03:18.658
Let's run a test.
&gt;&gt; Evan: And

45
00:03:18.658 --> 00:03:22.784
it fails, of course, so

46
00:03:22.784 --> 00:03:28.061
hmm,
&gt;&gt; Evan: Says what,

47
00:03:28.061 --> 00:03:32.820
failed to, right,
because I didn't register the component.

48
00:03:32.820 --> 00:03:35.661
Wait, no, I did.
&gt;&gt; Speaker 2: You ran 3.2.

49
00:03:35.661 --> 00:03:36.949
&gt;&gt; Evan: What?

50
00:03:36.949 --> 00:03:38.912
&gt;&gt; Speaker 2: Didn't you run the 3.2 test?

51
00:03:38.912 --> 00:03:42.152
&gt;&gt; Evan: This is the 3.1 test, okay,

52
00:03:42.152 --> 00:03:46.958
wrong test,
yes [LAUGH] actually works, okay.

53
00:03:46.958 --> 00:03:50.878
All right, so
I hope this sort of gets you sort

54
00:03:50.878 --> 00:03:55.460
of familiarized with how
render functions work.

55
00:03:55.460 --> 00:03:57.600
Everything is just JavaScript.

56
00:03:57.600 --> 00:03:58.930
When you need to return something,

57
00:03:58.930 --> 00:04:02.540
remember they need to be virtual nodes or
text.

58
00:04:02.540 --> 00:04:05.940
Or in this case,
we can actually pass numbers, too.

59
00:04:05.940 --> 00:04:10.352
They get casted into strings.
&gt;&gt; Evan: And

60
00:04:10.352 --> 00:04:13.290
you can optionally omit this data object.

61
00:04:15.580 --> 00:04:18.740
And if you want this
thing to have attributes,

62
00:04:18.740 --> 00:04:22.340
you need to do something
like this to give you an ID.

63
00:04:23.860 --> 00:04:29.851
So this is all hopefully
self-explanatory enough.

