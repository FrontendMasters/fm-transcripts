WEBVTT

1
00:00:00.260 --> 00:00:03.340
&gt;&gt; Evan You: We're gonna look into how
to actually do this ourselves, and

2
00:00:03.340 --> 00:00:06.140
we're gonna actually implement
a mini data observer

3
00:00:06.140 --> 00:00:08.660
that's similar to how it works in view.

4
00:00:08.660 --> 00:00:13.830
So I assume everyone's got
the zipped repository,

5
00:00:13.830 --> 00:00:17.990
so let's extract it and
go into the repository.

6
00:00:19.230 --> 00:00:26.730
So we'll see these files,
inside reactivity look at 1.1.md.

7
00:00:26.730 --> 00:00:31.719
So each exercise comes
with a markdown file that

8
00:00:31.719 --> 00:00:37.707
describes the requirement and
an associated html file,

9
00:00:37.707 --> 00:00:43.380
which asks you to
implement the requirements.

10
00:00:43.380 --> 00:00:47.960
So the first exercise is understanding
how to use Object.defineProperty.

11
00:00:49.600 --> 00:00:53.302
If you've never used this API before,

12
00:00:53.302 --> 00:00:58.024
look it up on MDN, and
check out how the API works.

13
00:00:58.024 --> 00:01:04.079
Essentially how Object.defineProperty
works, I think I'm going to just quickly

14
00:01:04.079 --> 00:01:10.090
walk through it, because reading
through the docs may take some time.

15
00:01:10.090 --> 00:01:16.179
It's just a global API
that looks like this,

16
00:01:16.179 --> 00:01:19.400
Property, all right?

17
00:01:19.400 --> 00:01:22.980
And it takes the source object,
obviously, as the first argument, and

18
00:01:22.980 --> 00:01:27.390
the second argument is the key of
the property that you want to manipulate.

19
00:01:27.390 --> 00:01:31.591
So this key can be in the existing key,
or in an unexisting key.

20
00:01:31.591 --> 00:01:35.497
So if it doesn't exist it'll create it for
you,

21
00:01:35.497 --> 00:01:41.820
if it exists it depends on whether that
property is so-called configurable.

22
00:01:41.820 --> 00:01:44.500
If it's configurable, we can override it.

23
00:01:46.000 --> 00:01:49.070
So we'll just use a random key, and

24
00:01:49.070 --> 00:01:52.220
then the third argument should
be an object descriptor.

25
00:01:52.220 --> 00:01:57.870
So this descriptor can take some
properties like, enumerable.

26
00:01:59.989 --> 00:02:03.080
&gt;&gt; Evan You: By default all of
these properties are false.

27
00:02:03.080 --> 00:02:06.758
So if a property is declared
as enumerable false,

28
00:02:06.758 --> 00:02:11.663
then when you use, say, for
far keying object to iterate over it,

29
00:02:11.663 --> 00:02:15.532
it will not show up,
because it's not enumerable.

30
00:02:15.532 --> 00:02:19.537
Similarly it will not show
up in object keys, and

31
00:02:19.537 --> 00:02:26.696
configurable as we just talked about,
prevents it from being redefined again.

32
00:02:26.696 --> 00:02:29.140
So once you've define something
with configurable false,

33
00:02:29.140 --> 00:02:32.180
it can never be changed again,
so be careful with that.

34
00:02:32.180 --> 00:02:39.440
And then we have writable, so
if a property is not writable,

35
00:02:39.440 --> 00:02:44.150
you can still assign to it, but it will
have no effect, and it will fail silently.

36
00:02:44.150 --> 00:02:48.150
So it's also something that
you should be careful about.

37
00:02:48.150 --> 00:02:52.670
But finally the most important
thing is the get and set functions.

38
00:02:53.910 --> 00:02:58.099
So we can define functions get and set,
&gt;&gt; Evan You: And

39
00:02:58.099 --> 00:03:01.853
this will overwrite the default behavior,
so

40
00:03:01.853 --> 00:03:08.040
get overwrites the .access, and
set overwrites the assignment.

41
00:03:08.040 --> 00:03:10.730
So you can return arbitrary
values from the get function.

42
00:03:10.730 --> 00:03:16.260
So if you [LAUGH] return bar, so
you will have a property that always,

43
00:03:16.260 --> 00:03:21.390
always, always return bar no matter what,
you cannot change it [LAUGH] anymore.

44
00:03:21.390 --> 00:03:26.880
What you can do to change it, though, is,
so the set obviously takes the new value

45
00:03:26.880 --> 00:03:32.590
as the argument, and the problem's how
do you save this value somewhere, right?

46
00:03:32.590 --> 00:03:37.540
So obviously, you have to save it
somewhere else, so the realValue,

47
00:03:37.540 --> 00:03:39.530
you need to put it in another variable.

48
00:03:40.770 --> 00:03:45.986
So you can then return realValue,
&gt;&gt; Evan You: And

49
00:03:45.986 --> 00:03:49.159
I'll let you fill in the rest, so
let's open the first exercise.

50
00:03:53.783 --> 00:03:59.348
&gt;&gt; Evan You: So the exercise requires
you to implement a convert object.

51
00:03:59.348 --> 00:04:02.038
[COUGH] And the requirement is,

52
00:04:02.038 --> 00:04:07.936
it should walk through all
the properties inside the given object,

53
00:04:07.936 --> 00:04:13.126
and convert each of them into
a pair of getters and setters.

54
00:04:13.126 --> 00:04:18.161
And the converting object should retain
the original behavior, so if you assign

55
00:04:18.161 --> 00:04:23.230
it a new value and then you access it
again, it should return the new value.

56
00:04:23.230 --> 00:04:27.638
It should just act just like the original
object, but at the same time,

57
00:04:27.638 --> 00:04:32.130
whenever you access a property,
you should console.log that access.

58
00:04:32.130 --> 00:04:37.360
And whenever you set a property to
a new value, it should also be logged.

59
00:04:37.360 --> 00:04:42.320
Essentially you need to create an object
that automatically logs all the access and

60
00:04:42.320 --> 00:04:43.600
assignments that's happening on it.

61
00:04:45.260 --> 00:04:45.760
Is that clear?

62
00:04:47.662 --> 00:04:50.774
&gt;&gt; Evan You: So, if you have
Node.js installed on your machine,

63
00:04:50.774 --> 00:04:55.280
inside the repository you can run
NPM Install to install some testing tools.

64
00:04:56.788 --> 00:05:00.996
Some of these exercises include automated
test suites that you can run with

65
00:05:00.996 --> 00:05:05.020
NPM Test, to assert whether your
current implementation is correct.

66
00:05:05.020 --> 00:05:07.796
Make sure to pass these arguments, so

67
00:05:07.796 --> 00:05:11.370
that you limit the test
to the current exercise.

