WEBVTT

1
00:00:00.560 --> 00:00:04.160
&gt;&gt; Evan You: So let's take a look at
how to handle this dynamic segment.

2
00:00:04.160 --> 00:00:09.160
As mentioned just now, ideally we want
to precompile the regular expressions

3
00:00:09.160 --> 00:00:15.590
that we need to use before the component
is even rendered, because just

4
00:00:15.590 --> 00:00:20.440
from the performance perspective it's also
better to precompile, because you don't

5
00:00:20.440 --> 00:00:27.010
want to recompile the regular expression
of every single render on your app, right?

6
00:00:27.010 --> 00:00:28.940
So let's take a look at
the render function right here,

7
00:00:28.940 --> 00:00:31.740
we have the componentToRender and
we have the props.

8
00:00:31.740 --> 00:00:34.870
The question is how do we figure
out which component to use?

9
00:00:34.870 --> 00:00:39.880
The difference from the previous
exercise is that our route table,

10
00:00:39.880 --> 00:00:43.940
we can no longer simply use a key,

11
00:00:43.940 --> 00:00:50.080
object key access check to determine
if a component is matched or not.

12
00:00:50.080 --> 00:00:54.640
In fact, we will never know unless we

13
00:00:54.640 --> 00:00:59.379
iterate through every possible key in
the object until we find one that matches.

14
00:01:01.210 --> 00:01:04.420
So you can root force this.

15
00:01:04.420 --> 00:01:11.848
You can do something like object.keys

16
00:01:11.848 --> 00:01:16.810
routetable for each key.

17
00:01:16.810 --> 00:01:19.600
And then you can compile
the regular expression here, and

18
00:01:19.600 --> 00:01:21.166
then try to see if it matches.

19
00:01:21.166 --> 00:01:28.410
It'll work, but from a performance
perspective it's not that efficient.

20
00:01:28.410 --> 00:01:31.890
So let's create something
called a compiledRouteTable.

21
00:01:35.030 --> 00:01:39.819
&gt;&gt; Evan You: We are gonna iterate
through this raw routeTable

22
00:01:39.819 --> 00:01:44.150
which is essentially provided by our user.

23
00:01:45.750 --> 00:01:52.730
And for each path in the round
table we will compile it.

24
00:01:52.730 --> 00:01:56.701
So now we can use path to

25
00:01:56.701 --> 00:02:01.541
regular expression path.

26
00:02:01.541 --> 00:02:06.410
And remember we need the keys array
to hold the dynamic segments.

27
00:02:09.375 --> 00:02:12.727
&gt;&gt; Evan You: In fact, I would have just
called them dynamic segments here so

28
00:02:12.727 --> 00:02:14.700
that it's clear what we're doing.

29
00:02:18.852 --> 00:02:21.815
&gt;&gt; Evan You: And dynamic segment, okay, so

30
00:02:21.815 --> 00:02:28.390
we got the regular expression,
we got the dynamic segments.

31
00:02:28.390 --> 00:02:33.674
And we also have a component

32
00:02:33.674 --> 00:02:40.404
= routeTable[path], right?

33
00:02:40.404 --> 00:02:46.090
This is the component we want to render,
so these three things

34
00:02:46.090 --> 00:02:52.410
are needed if we want to check if
a raw incoming path matches a certain,

35
00:02:52.410 --> 00:02:56.630
to determine whether this component should
be rendered given an incoming path.

36
00:02:56.630 --> 00:03:03.750
So, what we can do is on the compiled
route table, we'll just store it.

37
00:03:05.790 --> 00:03:10.870
In fact, this compile routeTable
doesn't even need to be an object.

38
00:03:10.870 --> 00:03:13.320
It can be just an array, right?

39
00:03:13.320 --> 00:03:17.706
So compiled routes, even,
it doesn't need to be an object.

40
00:03:17.706 --> 00:03:23.166
Compiled routes, push,

41
00:03:23.166 --> 00:03:27.385
component Regex and

42
00:03:27.385 --> 00:03:31.610
dynamicSegments.

43
00:03:35.337 --> 00:03:43.660
&gt;&gt; Evan You: So, now we've created
an array containing our route entries.

44
00:03:43.660 --> 00:03:48.162
Now, what we need to do inside
our component here is instead of

45
00:03:48.162 --> 00:03:53.310
iterating to the thing,
compiledRoutes dot.

46
00:03:54.740 --> 00:03:58.670
We can do forEach, but
we can also do some.

47
00:04:02.620 --> 00:04:06.270
This way we can terminate the iteration
when we find a route that

48
00:04:06.270 --> 00:04:07.880
actually matches.

49
00:04:07.880 --> 00:04:13.610
So now we need to check if this
is the path that we are getting,

50
00:04:13.610 --> 00:04:19.610
that we are currently at, and
this where we need to figure out if this

51
00:04:19.610 --> 00:04:25.630
route somehow, this route and
this path somehow they match, right?

52
00:04:25.630 --> 00:04:31.610
And the way to find out is to do this.

53
00:04:35.743 --> 00:04:37.660
&gt;&gt; Evan You: Right?

54
00:04:37.660 --> 00:04:43.348
So if there is a match,
&gt;&gt; Evan You: Then

55
00:04:43.348 --> 00:04:49.490
the component to render is obviously
the component of this route.

56
00:04:53.270 --> 00:04:54.040
&gt;&gt; Evan You: Right.

57
00:04:57.530 --> 00:05:03.180
And notice here, I have component to
render here as well so if none of these

58
00:05:03.180 --> 00:05:08.460
routes exactly match then the component
to render should proably be not found.

59
00:05:09.880 --> 00:05:11.710
So we can initialize it here.

60
00:05:12.910 --> 00:05:20.020
Or we can initialize it to undefined and
just fall back to not found here.

61
00:05:20.020 --> 00:05:20.580
Both are okay.

62
00:05:20.580 --> 00:05:29.180
And then another question is how do
we extract the props to use here?

63
00:05:29.180 --> 00:05:32.490
So in fact, the answer is already here.

64
00:05:33.830 --> 00:05:38.687
In the comment,
we have this piece of code.

65
00:05:38.687 --> 00:05:41.560
&gt;&gt; Evan You: Actually,
this is using the old API.

66
00:05:41.560 --> 00:05:45.428
So this is already sort of

67
00:05:45.428 --> 00:05:50.600
out of date on this library,

68
00:05:50.600 --> 00:05:54.720
but what you're gonna do, let's copy
that piece of code and paste it here.

69
00:05:59.886 --> 00:06:03.910
&gt;&gt; Evan You: And
in fact you can just do this.

70
00:06:07.240 --> 00:06:11.738
&gt;&gt; Evan You: You don't need to even
reduce, you can just do dynamic segments

71
00:06:11.738 --> 00:06:19.230
are for each,
&gt;&gt; Evan You: index,

72
00:06:19.230 --> 00:06:22.821
props[key]

73
00:06:27.235 --> 00:06:31.166
&gt;&gt; Evan You:
Route.dynamicSegments.forEach, so

74
00:06:31.166 --> 00:06:34.648
it actually looks a bit different.

75
00:06:34.648 --> 00:06:39.700
So, route.dynamicSegments is going

76
00:06:39.700 --> 00:06:45.630
to be array that contains objects, okay so

77
00:06:45.630 --> 00:06:50.543
segment
&gt;&gt; Evan You: We want

78
00:06:50.543 --> 00:06:52.740
a segment.name, right?

79
00:06:53.930 --> 00:06:56.714
So set it on the props.

80
00:06:59.319 --> 00:07:02.679
&gt;&gt; Evan You: And
we also need the index here so

81
00:07:02.679 --> 00:07:08.164
that we can retrieve
the corresponding value from,

82
00:07:14.353 --> 00:07:17.348
&gt;&gt; Evan You: Well, dynamic segments,

83
00:07:17.348 --> 00:07:21.515
yeah, from the match result here, so

84
00:07:21.515 --> 00:07:26.923
the match will contain the
&gt;&gt; Evan You: Index + 1,

85
00:07:26.923 --> 00:07:31.385
remember to offset it by 1
because the first element in

86
00:07:31.385 --> 00:07:35.450
the match array will be
the full matched path.

87
00:07:35.450 --> 00:07:41.640
Only starting from index 1 it's
the dynamic segments value.

88
00:07:41.640 --> 00:07:45.000
So now we've essentially
completed the task.

89
00:07:45.000 --> 00:07:50.170
We've figured out which component
we should render and we filled in

90
00:07:50.170 --> 00:07:56.430
the props object with the proper extracted
dynamic segments if there are any.

91
00:07:58.940 --> 00:08:03.571
And we pass it along,
and this should work.

92
00:08:03.571 --> 00:08:06.056
Yes?
&gt;&gt; Speaker 2: Why do you have a leading

93
00:08:06.056 --> 00:08:11.183
slash when you construct
the path variable inside render.

94
00:08:11.183 --> 00:08:13.053
Why you pre-pin that?

95
00:08:13.053 --> 00:08:17.880
&gt;&gt; Evan You: That's because I think
in the reference implementation we

96
00:08:17.880 --> 00:08:20.250
actually have a raw table
that looks like this.

97
00:08:21.454 --> 00:08:26.170
All right, because in real route
configuration most of the path you do

98
00:08:26.170 --> 00:08:32.610
start with a slash and

99
00:08:32.610 --> 00:08:37.450
because in some cases you might have
nested configurations like this.

100
00:08:39.920 --> 00:08:43.630
And you can even have children routes,
like this.

101
00:08:44.770 --> 00:08:49.379
But that's sort of another topic.

102
00:08:50.450 --> 00:08:54.780
In fact, if you look at the Vue Router's
configuration, it looks like this.

103
00:08:57.889 --> 00:09:00.490
&gt;&gt; Evan You: ID, component, foo.

104
00:09:02.450 --> 00:09:07.310
And then it can have children,
where you can nest them.

105
00:09:09.040 --> 00:09:13.290
So in children, you don't start
the child path with a slash, so

106
00:09:13.290 --> 00:09:15.730
that this can be appended to this.

107
00:09:15.730 --> 00:09:18.780
Because if you do this, this will be
treated as like an absolute path,

108
00:09:19.950 --> 00:09:24.350
that's just, so this will be appended for
you implicitly.

109
00:09:28.550 --> 00:09:30.010
So I think that

110
00:09:31.200 --> 00:09:33.550
this will be slightly different
from the reference implementation.

111
00:09:33.550 --> 00:09:35.520
But let's hope it works.

112
00:09:37.402 --> 00:09:41.590
&gt;&gt; Evan You: So,
&gt;&gt; Evan You: It works.

113
00:09:41.590 --> 00:09:44.435
Let's make it big.

114
00:09:44.435 --> 00:09:49.520
&gt;&gt; Evan You: This foo and
foo is not being properly separated.

115
00:09:49.520 --> 00:09:51.079
So let's make it more obvious.

116
00:09:52.240 --> 00:09:56.530
Add a new line here, and foo 123, foo 234.

117
00:10:00.937 --> 00:10:05.124
&gt;&gt; Evan You: Okay, so notice that
if we reload the page at foo 123,

118
00:10:05.124 --> 00:10:09.070
it instantly displays this
instead of not found.

119
00:10:09.070 --> 00:10:13.210
And we can switch between them and
we can also go to bar.

120
00:10:14.610 --> 00:10:18.920
So now we've successfully
created a semi-working

121
00:10:18.920 --> 00:10:20.720
routing system that can
handle dynamic segments.

122
00:10:20.720 --> 00:10:24.020
And we are able to extract
these dynamic segments and

123
00:10:24.020 --> 00:10:26.540
pass along them to route
components as prompts.

124
00:10:28.120 --> 00:10:33.620
So the next step is handle nested routes.

125
00:10:33.620 --> 00:10:38.600
And that'll be tricky but I don't think
we have time to go over that today.

126
00:10:38.600 --> 00:10:41.760
Some other concerns are for example,

127
00:10:43.420 --> 00:10:50.050
how to extract this matching logic instead
of having to write it in every app.

128
00:10:50.050 --> 00:10:54.360
You can extract this,
the whole matching logic out into

129
00:10:54.360 --> 00:10:59.630
a component called router view, which is
the component that we use in Vue Router.

130
00:10:59.630 --> 00:11:02.850
So you can essentially, in your app,
you're just dropping this router view.

131
00:11:02.850 --> 00:11:05.940
It'll figure out which component
it should render at that place.

132
00:11:07.230 --> 00:11:12.050
And then we get something really close
to what Vue Router actually looks like.

