WEBVTT

1
00:00:00.004 --> 00:00:03.516
&gt;&gt; Evan You: As mentioned,
if you're using REDUX functions,

2
00:00:03.516 --> 00:00:05.892
we don't really need all of that.

3
00:00:05.892 --> 00:00:08.122
We need to implement it ourselves.

4
00:00:08.122 --> 00:00:13.809
And the url handling part is
largely the same as last time.

5
00:00:13.809 --> 00:00:18.760
Window.location.hash slice1,

6
00:00:18.760 --> 00:00:22.912
and we'll just copy this, and

7
00:00:22.912 --> 00:00:29.786
update our app.url when
everything's changed.

8
00:00:29.786 --> 00:00:38.210
And the [SOUND] midi part here is how
to figure out which component to use.

9
00:00:38.210 --> 00:00:43.602
So lets write the router table so
we can obviously

10
00:00:43.602 --> 00:00:48.871
just do this,
[SOUND] pretty straightforward.

11
00:00:48.871 --> 00:00:53.764
So just so that it looks more
like a router table let's

12
00:00:53.764 --> 00:00:58.873
make the key strings and,
what to do here is we still need

13
00:00:58.873 --> 00:01:04.018
a root level div if we want to
render those links as well.

14
00:01:04.018 --> 00:01:08.204
Inside the div the first thing we
want to return is the component,

15
00:01:08.204 --> 00:01:12.936
essentially the router view that we
want to render for the current route.

16
00:01:12.936 --> 00:01:15.628
And we have the current URL.

17
00:01:15.628 --> 00:01:18.148
And we have the route table.

18
00:01:18.148 --> 00:01:24.130
So let's just check if
the route table contains

19
00:01:24.130 --> 00:01:30.270
a component that's matching
what we want here.

20
00:01:30.270 --> 00:01:33.738
And if there's nothing there,

21
00:01:33.738 --> 00:01:39.265
we can simply fall back to
the not found component.

22
00:01:39.265 --> 00:01:43.649
So this completes the task of finding
the corresponding component out

23
00:01:43.649 --> 00:01:48.638
of the route table and falling back to
the NotFound if there is nothing matched.

24
00:01:48.638 --> 00:01:54.873
And we also need to have the two a links,
I believe.

25
00:01:54.873 --> 00:02:03.644
[SOUND]
Foo.

26
00:02:07.359 --> 00:02:09.585
&gt;&gt; Evan You: And copy it with it bar.

27
00:02:13.696 --> 00:02:17.512
&gt;&gt; Evan You: So one thing you may notice,
if we run this,

28
00:02:27.846 --> 00:02:28.462
&gt;&gt; Evan You: But notice

29
00:02:28.462 --> 00:02:32.715
that there's no space between foo and
bar, unlike if you use templates.

30
00:02:32.715 --> 00:02:35.948
This is because when
you use HTML templates,

31
00:02:35.948 --> 00:02:41.154
it retains the white space between
your elements if there are new lines.

32
00:02:41.154 --> 00:02:46.624
This is the same behavior as
if you're writing normal HTML,

33
00:02:46.624 --> 00:02:50.272
but when you're using Reno functions,

34
00:02:50.272 --> 00:02:55.116
there's no white space node
between the foo and bar.

35
00:02:55.116 --> 00:03:00.248
So they're just close to each;
there's no white space in between.

36
00:03:00.248 --> 00:03:03.643
So a lot of people are not used to this
when they switch to reno functions.

37
00:03:03.643 --> 00:03:08.591
And you can either deal with this
with CSS, or if you want to,

38
00:03:08.591 --> 00:03:13.073
you could just add an empty
space in between manually.

39
00:03:17.646 --> 00:03:19.678
&gt;&gt; Evan You: So
this should make it look better.

40
00:03:24.137 --> 00:03:26.021
&gt;&gt; Evan You: And it switches and
more importantly.

41
00:03:26.021 --> 00:03:29.570
Let's go to some random URL and
it will show not found.

