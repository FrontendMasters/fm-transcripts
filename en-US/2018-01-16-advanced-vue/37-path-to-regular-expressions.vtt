WEBVTT

1
00:00:00.680 --> 00:00:03.430
&gt;&gt; Evan You: We've implemented
some pretty rudimentary routing.

2
00:00:03.430 --> 00:00:08.590
If all your app needs to do is just
switching between top level pages,

3
00:00:08.590 --> 00:00:10.630
we've essentially achieved the goal.

4
00:00:10.630 --> 00:00:15.270
But in reality routing is much
more complicated than that.

5
00:00:15.270 --> 00:00:23.289
Imagine you have URLs like,
&gt;&gt; Evan You: Foo/123.

6
00:00:23.289 --> 00:00:30.250
It's very common to say user username or,
right?

7
00:00:30.250 --> 00:00:34.730
You have all these dynamic segments here,
and if you've used a rounder before you

8
00:00:34.730 --> 00:00:42.880
know that common convention is to denote
a dynamic segment starting with a colon.

9
00:00:42.880 --> 00:00:48.140
So a URL pattern like this
means we want to match anything

10
00:00:48.140 --> 00:00:53.220
that starts with user and
this part can be anything.

11
00:00:54.370 --> 00:00:58.683
And also, we want to extract
this dynamic segment, and

12
00:00:58.683 --> 00:01:04.750
pass it to our component as a prop or
as some sort of data.

13
00:01:04.750 --> 00:01:07.970
The component needs to be able to
access and know like the current,

14
00:01:07.970 --> 00:01:11.230
what the current dynamic segment is.

15
00:01:11.230 --> 00:01:15.730
And so in reality,
this will match something like this,

16
00:01:15.730 --> 00:01:20.970
where your component will
probably get an object like this.

17
00:01:23.290 --> 00:01:27.730
Which is the dynamic data that's
associated with the current route.

18
00:01:27.730 --> 00:01:31.990
And then,
imagine if you have something like this.

19
00:01:34.100 --> 00:01:40.565
Then you probably expect something

20
00:01:40.565 --> 00:01:45.738
like path, user/123,

21
00:01:45.738 --> 00:01:50.048
Then this is considered

22
00:01:50.048 --> 00:01:54.574
something like parans,

23
00:01:54.574 --> 00:01:58.470
and query is foo bar.

24
00:01:58.470 --> 00:02:04.220
So essentially, we're translating
a raw URL into a JavaScript

25
00:02:04.220 --> 00:02:09.890
data structure that's easier for
our components to consume, right?

26
00:02:09.890 --> 00:02:11.700
Instead of having to part it everywhere.

27
00:02:12.730 --> 00:02:18.580
So this is very common need and
in the next section,

28
00:02:20.160 --> 00:02:25.340
I will try to deal with some of it.

29
00:02:25.340 --> 00:02:28.970
We're not going to like construct
a full like route object like this.

30
00:02:28.970 --> 00:02:34.710
What we want to do is really just be
able to mesh dynamic paths like this.

31
00:02:36.220 --> 00:02:40.860
And being able to extract the user name 1,
2, 3 part and pass it to our component.

32
00:02:43.090 --> 00:02:49.405
So we want is essentially this, okay.

33
00:02:49.405 --> 00:02:51.259
So how do we do this?

34
00:02:53.630 --> 00:02:56.790
This involves some advanced parsing.

35
00:02:56.790 --> 00:03:01.290
You need to somehow write a parser
that knows how to parse a URL and

36
00:03:01.290 --> 00:03:04.140
figure out these dynamic segments.

37
00:03:04.140 --> 00:03:09.910
And then figure out how to match this
incoming raw path to this patent,

38
00:03:09.910 --> 00:03:11.610
and extract this username.

39
00:03:11.610 --> 00:03:14.920
So seems like there could be
some way you can probably

40
00:03:14.920 --> 00:03:17.980
handwrite a regular expression to do that.

41
00:03:17.980 --> 00:03:21.280
But we want this whole
process to be automatic.

42
00:03:21.280 --> 00:03:28.660
So we need something to convert these
patents into regular expressions.

43
00:03:28.660 --> 00:03:31.050
That can help us do
the parsing at run time.

44
00:03:32.110 --> 00:03:34.440
And luckily,
you don't have to write that yourself.

45
00:03:34.440 --> 00:03:38.160
There is an existing library that
does a pretty good job at this and

46
00:03:38.160 --> 00:03:43.740
that library is called path to regexp.

47
00:03:43.740 --> 00:03:50.105
So if you look it up on Google,
path to regexp,

48
00:03:50.105 --> 00:03:56.150
this is where it shows up.

49
00:03:56.150 --> 00:03:58.380
So it's a pretty popular package.

50
00:03:58.380 --> 00:04:00.923
It's used in quite a few
router implementations.

51
00:04:00.923 --> 00:04:03.933
And the API though,

52
00:04:03.933 --> 00:04:08.810
is not super straightforward.

53
00:04:08.810 --> 00:04:10.880
Well, it's actually
pretty straightforward.

54
00:04:10.880 --> 00:04:13.640
So, API looks like this.

55
00:04:18.160 --> 00:04:23.020
Obviously, it exposes a function called,
pathToRegexp, and

56
00:04:23.020 --> 00:04:26.030
you need to pass your pattern,
as the first argument into it.

57
00:04:27.250 --> 00:04:33.070
The weird thing is you also
need to pass in a keys array.

58
00:04:33.070 --> 00:04:40.210
So this array will be used to fill in
the dynamic segments, if there are any.

59
00:04:40.210 --> 00:04:45.040
So see there,
there is a dynamic segment bar.

60
00:04:45.040 --> 00:04:47.980
After we get the regexp,

61
00:04:47.980 --> 00:04:53.490
we also have this keys array
filled up with an object.

62
00:04:53.490 --> 00:05:00.230
And this object has a name, bar, prefix /
delimiter / optional, blah, blah, blah.

63
00:05:00.230 --> 00:05:04.860
So most of these,
you don't really need to worry about.

64
00:05:04.860 --> 00:05:09.770
The information that we need is that
there is one dynamic segment and

65
00:05:09.770 --> 00:05:12.740
its name is bar, okay?

66
00:05:12.740 --> 00:05:17.284
And this corresponds to
when you execute this

67
00:05:17.284 --> 00:05:21.836
regular expression on
an incoming raw path.

68
00:05:21.836 --> 00:05:25.508
If you've worked with JavaScript
regular expression before,

69
00:05:25.508 --> 00:05:28.970
you know if it matches
it will return an array.

70
00:05:28.970 --> 00:05:31.380
And this array will contain,

71
00:05:33.140 --> 00:05:36.790
if you have capture groups inside your
regular expression, this array will,

72
00:05:36.790 --> 00:05:42.120
in addition to the whole matching
string as a first element in the array.

73
00:05:42.120 --> 00:05:47.270
It will be followed by all these capture
groups, the strings that's matched by this

74
00:05:47.270 --> 00:05:53.010
capture groups, so those capture groups
will correspond to this keys array.

75
00:05:53.010 --> 00:05:58.250
So if you execute this on imagine path,

76
00:05:58.250 --> 00:06:02.000
you will get an array which first
element is the full path and

77
00:06:02.000 --> 00:06:06.470
second element will be the content
that matches the bar segment.

78
00:06:08.680 --> 00:06:14.642
So this might be a bit abstract to
talk about, so we'll go into the code

79
00:06:14.642 --> 00:06:20.620
to just quickly show you
how the thing works.

80
00:06:20.620 --> 00:06:23.251
So let's say, const keys equals this.

81
00:06:23.251 --> 00:06:25.616
So if you use latest repository,

82
00:06:25.616 --> 00:06:31.450
we already linked path to regexp onto
the page so you can access directly.

83
00:06:31.450 --> 00:06:38.090
So pass to regexp,

84
00:06:38.090 --> 00:06:44.317
foo bar keys, and

85
00:06:48.435 --> 00:06:51.616
&gt;&gt; Evan You: Okay.

86
00:06:51.616 --> 00:06:57.245
And let's make this, so
you can either do this.

87
00:07:01.495 --> 00:07:04.219
&gt;&gt; Evan You: Foo 123.

88
00:07:08.844 --> 00:07:09.716
&gt;&gt; Evan You: Okay, so

89
00:07:09.716 --> 00:07:12.660
if we do this now and it matches,

90
00:07:12.660 --> 00:07:17.970
result will be an array that
looks something like this.

91
00:07:17.970 --> 00:07:26.002
It will be foo123123,

92
00:07:26.002 --> 00:07:29.230
like this.

93
00:07:29.230 --> 00:07:31.040
I probably should just hide it.

94
00:07:31.040 --> 00:07:38.850
Okay, and the keys will look like
something like this, name bar.

95
00:07:39.960 --> 00:07:43.310
Or ignore all the fields
that we don't care about.

96
00:07:43.310 --> 00:07:46.340
So keys is this and the result is this, so

97
00:07:46.340 --> 00:07:51.500
what you want to do is
to slice off the result.

98
00:07:51.500 --> 00:07:52.930
Just remove the first element.

99
00:07:54.570 --> 00:07:59.599
And now, we can use these to erase,
to construct a parents object

100
00:07:59.599 --> 00:08:06.567
into this.
&gt;&gt; Evan You: So

101
00:08:06.567 --> 00:08:10.291
in order to eventually obtain this object,

102
00:08:10.291 --> 00:08:15.740
in order to feed it to our components,
this is what we need to do.

103
00:08:15.740 --> 00:08:19.992
We need to take the raw matching
result and the keys, and

104
00:08:19.992 --> 00:08:25.893
somehow iterate over them eventually
construct an object like this, okay.

