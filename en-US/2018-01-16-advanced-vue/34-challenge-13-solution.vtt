WEBVTT

1
00:00:00.012 --> 00:00:05.419
&gt;&gt; Evan You: So the very obvious,
well, not really obvious but

2
00:00:05.419 --> 00:00:12.333
we need to keep the URL as a piece
of reactive state inside our app,

3
00:00:12.333 --> 00:00:17.010
in order for
our app to react to the changes.

4
00:00:17.010 --> 00:00:19.370
So our root and probably,

5
00:00:19.370 --> 00:00:24.964
should have data property called
url to hold the current url.

6
00:00:24.964 --> 00:00:26.315
And where do we get the url?

7
00:00:26.315 --> 00:00:31.590
We get it by retrieving
window.location.hash, and

8
00:00:31.590 --> 00:00:38.720
we can slice off the leading hash,
just so things look a bit cleaner.

9
00:00:38.720 --> 00:00:41.041
But the important thing is,

10
00:00:41.041 --> 00:00:46.856
you want to initialize your app URL
with that hash, when the app boots.

11
00:00:46.856 --> 00:00:52.312
This is important for
passing the test because,

12
00:00:52.312 --> 00:00:57.510
if you directly visit
your page with hash foo.

13
00:00:58.880 --> 00:01:01.704
And you don't initialize,

14
00:01:01.704 --> 00:01:07.596
you're always something like null or
something, right?

15
00:01:07.596 --> 00:01:11.303
Then, no components will be matched,
and your page will

16
00:01:11.303 --> 00:01:16.700
just be blank when people visit
an existing, directly visit a hashed drl.

17
00:01:16.700 --> 00:01:17.415
Which is not good.

18
00:01:17.415 --> 00:01:21.844
So initializing your f state to
width with the hash on start up,

19
00:01:21.844 --> 00:01:24.780
it's important to enable deep linking.

20
00:01:26.690 --> 00:01:33.665
And then, inside the hashchange listener,
we just update the URL.

21
00:01:33.665 --> 00:01:39.710
So this is enough to trigger reactive
updates, causing you to update your app.

22
00:01:40.790 --> 00:01:45.704
And next is, in this case,
I'm using two components here.

23
00:01:45.704 --> 00:01:51.205
But if you are lazy or
you just want to get it working,

24
00:01:51.205 --> 00:01:55.770
you can in fact just
do something like url.

25
00:01:55.770 --> 00:01:58.415
[LAUGH] That's pretty much it.

26
00:01:58.415 --> 00:02:01.388
But in most cases, when you do routing,

27
00:02:01.388 --> 00:02:06.170
you are switching between pages,
virtual pages, right?

28
00:02:06.170 --> 00:02:10.496
And in the context of view or
most of today's frameworks,

29
00:02:10.496 --> 00:02:13.245
pages are just components, right?

30
00:02:13.245 --> 00:02:15.080
It just boxes all the way down.

31
00:02:15.080 --> 00:02:19.047
So we use components, top level
components to represent the pages.

32
00:02:19.047 --> 00:02:24.109
And really when you talk about switching
pages in a single page application app,

33
00:02:24.109 --> 00:02:26.650
you're switched between components.

34
00:02:27.710 --> 00:02:32.731
So which is why
the component is syntax is,

35
00:02:32.731 --> 00:02:36.364
well suited for this use case.

36
00:02:36.364 --> 00:02:41.253
Alternatively, you can get rid of
all this and get renofunctions,

37
00:02:41.253 --> 00:02:47.620
remembering renofunctions, we were able
to, we'll actually talk about that later.

38
00:02:47.620 --> 00:02:54.502
Now, our components are standardly
registered under fluent bar,

39
00:02:54.502 --> 00:02:58.735
and we use component is url to match that.

40
00:02:58.735 --> 00:03:03.902
This should give us the desired
result in the browser.

41
00:03:03.902 --> 00:03:08.658
Really, all you need to do is make sure
the URL is reactive and that there is

42
00:03:08.658 --> 00:03:13.370
a way to translate URL into a component
that's rendered in your template

