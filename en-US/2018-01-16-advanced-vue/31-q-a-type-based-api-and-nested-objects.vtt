WEBVTT

1
00:00:00.170 --> 00:00:02.310
&gt;&gt; Evan You: So, types your questions as,

2
00:00:02.310 --> 00:00:06.770
right about view class component and
decorators.

3
00:00:06.770 --> 00:00:11.620
Yes, these are officially supported and
recommended ways to use TS with view, but

4
00:00:11.620 --> 00:00:19.540
we are also planning some upgrades to the
type system 2.5 which allows you to get

5
00:00:19.540 --> 00:00:24.450
appropriate type inference, even using
the default through API, so by the,

6
00:00:24.450 --> 00:00:29.980
view class component will be strictly
optional for TypeScript users.

7
00:00:29.980 --> 00:00:33.621
But if you prefer a type based API,
you should probably still use it.

8
00:00:36.306 --> 00:00:40.306
&gt;&gt; Evan You: Next question is,
do you have any hints on good practices,

9
00:00:40.306 --> 00:00:44.870
how to design complex store or
having nested objects is a good idea?

10
00:00:45.890 --> 00:00:46.994
Or maybe having flat structure is better.

11
00:00:49.044 --> 00:00:55.629
&gt;&gt; Evan You: There really isn't a apply
everywhere rule for designing this.

12
00:00:57.490 --> 00:01:03.090
We design and
shipped the module feature for view x,

13
00:01:03.090 --> 00:01:08.500
to sort of help you divide
your big store into very clear

14
00:01:08.500 --> 00:01:13.140
units that you can that
recompose together.

15
00:01:15.020 --> 00:01:19.570
Having nested objects really isn't,
I don't think

16
00:01:19.570 --> 00:01:23.620
there's any particular downside to it,
but having a flat structure,

17
00:01:24.700 --> 00:01:29.370
I wouldn't necessarily say
one is better than the other.

18
00:01:29.370 --> 00:01:32.280
It really depends on your use case,

19
00:01:32.280 --> 00:01:35.920
what your data structure is,
what you are dealing with.

20
00:01:35.920 --> 00:01:40.070
So I think this might be
too generic to answer.

21
00:01:40.070 --> 00:01:44.880
And it's hard to discuss without
concrete requirements of the app.

22
00:01:50.260 --> 00:01:57.030
In Redux, there's this common practice
of so called normalizing your data,

23
00:01:57.030 --> 00:02:03.060
and by normalizing,
it means it makes it flat,

24
00:02:03.060 --> 00:02:07.360
in that, when you have one type of
entity that is referring to another,

25
00:02:07.360 --> 00:02:13.250
similar to columns, similar to
tables in a relational database.

26
00:02:14.710 --> 00:02:20.610
Instead of embedding another entity
directly into a parent entity,

27
00:02:20.610 --> 00:02:24.030
you will store them in
different collections and

28
00:02:24.030 --> 00:02:27.590
then reference each
other using entity ID's.

29
00:02:27.590 --> 00:02:32.650
So, sort of may restore more
a relation of database of some sorts,

30
00:02:32.650 --> 00:02:36.700
which I think is probably a good idea if
your data model is particularly complex.

31
00:02:38.170 --> 00:02:43.730
So, that I would actually think is
a better way to organize things.

32
00:02:43.730 --> 00:02:47.375
If you can successfully model
your data structure that way,

33
00:02:47.375 --> 00:02:49.527
than you should probably go for it.

34
00:02:55.147 --> 00:02:56.080
&gt;&gt; Evan You: Question.

35
00:02:56.080 --> 00:02:59.115
What do you think of
creating data files for

36
00:02:59.115 --> 00:03:02.755
specific states with
specific Wi-Fi functions?

37
00:03:06.860 --> 00:03:11.430
&gt;&gt; Evan You: Yeah,
they seems totally fine to me.

38
00:03:11.430 --> 00:03:15.120
This is in fact, very similar to how you

39
00:03:15.120 --> 00:03:19.880
would probably split different models
into different files in Vuex, as well.

40
00:03:20.900 --> 00:03:22.080
I'm just speaking to the chat.

