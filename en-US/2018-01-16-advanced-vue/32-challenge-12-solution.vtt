WEBVTT

1
00:00:00.440 --> 00:00:04.570
&gt;&gt; Evan: Let's take a look at
how we can make this happen.

2
00:00:04.570 --> 00:00:10.540
Think the obvious thing is we need to
create a Vue instance somewhere and

3
00:00:10.540 --> 00:00:15.710
we can directly pass el into it
because yeah, that's the same thing.

4
00:00:15.710 --> 00:00:19.332
And then model obvious should
be passing to the data

5
00:00:22.543 --> 00:00:24.950
&gt;&gt; Evan: So let's make it reactive.

6
00:00:27.991 --> 00:00:32.290
&gt;&gt; Evan: And then view,
so view is a function.

7
00:00:32.290 --> 00:00:35.140
View is a function that
takes three arguments.

8
00:00:35.140 --> 00:00:38.530
And because view is essentially
the render function,

9
00:00:38.530 --> 00:00:41.990
what we need to do is call it
inside our render function.

10
00:00:41.990 --> 00:00:46.850
So we are essentially returning the view
that's generated for our review function.

11
00:00:46.850 --> 00:00:50.377
And the first argument is obviously the h.

12
00:00:50.377 --> 00:00:52.350
And the second argument is model.

13
00:00:52.350 --> 00:00:57.334
So we can,
because model is made reactive here we can

14
00:00:57.334 --> 00:01:01.540
actually directly pass
it in if you want to.

15
00:01:03.364 --> 00:01:06.784
&gt;&gt; Evan: And really, the last question is,

16
00:01:06.784 --> 00:01:11.130
how do we create this actions thing,
right?

17
00:01:11.130 --> 00:01:15.848
Directly passing actions
probably does not work, right?

18
00:01:15.848 --> 00:01:18.110
Because if you pass it here.

19
00:01:19.650 --> 00:01:25.324
When you pass the click,
this will be called with, the as

20
00:01:25.324 --> 00:01:31.942
the argument is that of what you expect
here which is our model essentially.

21
00:01:31.942 --> 00:01:34.600
And we also need to collect the return

22
00:01:34.600 --> 00:01:39.600
value from these actions in order
to somehow trigger state updates.

23
00:01:39.600 --> 00:01:44.164
So it's pretty, so we realize
that we cannot just directly pass

24
00:01:44.164 --> 00:01:47.639
the same actions object
into our view function.

25
00:01:47.639 --> 00:01:54.065
Instead we need to maybe,
like wrappedactions or something.

26
00:01:54.065 --> 00:01:58.748
And this wrappedactions will
contain the same tease,

27
00:01:58.748 --> 00:02:06.270
as the original actions object, but
the implementation will be different.

28
00:02:06.270 --> 00:02:10.659
So what we can do is
&gt;&gt; Evan: Let's

29
00:02:10.659 --> 00:02:12.649
make wrappedactions an object.

30
00:02:14.733 --> 00:02:20.696
&gt;&gt; Evan: And then we iterate through
the incoming, the source actions.

31
00:02:25.193 --> 00:02:25.950
&gt;&gt; Evan: All right?

32
00:02:25.950 --> 00:02:31.300
In wrapped actions, K equals something.

33
00:02:32.600 --> 00:02:37.030
So now we can think about how
they are expected to work.

34
00:02:37.030 --> 00:02:41.470
They should receive the current state.

35
00:02:42.570 --> 00:02:48.410
So they should be, wait,
wait, wait, sorry.

36
00:02:49.600 --> 00:02:53.060
wrappedactions, let's just
make it s function first.

37
00:02:53.060 --> 00:02:54.470
Think about what you do later.

38
00:02:55.840 --> 00:02:57.280
And these arguments.

39
00:02:57.280 --> 00:03:01.300
So this argument is actually what
we receive from the click event.

40
00:03:01.300 --> 00:03:06.270
So for us that's really not useful so
we can just ignore it.

41
00:03:07.460 --> 00:03:11.850
What we care more about is
that this function is called.

42
00:03:13.420 --> 00:03:21.694
And we will probably want to save
the original action somewhere.

43
00:03:24.105 --> 00:03:26.621
&gt;&gt; Evan: So
when the wrapped action is invoked,

44
00:03:26.621 --> 00:03:29.680
obviously it should call
the original action.

45
00:03:32.580 --> 00:03:36.170
And our original action inspects
the model, so we pass the model to it.

46
00:03:37.380 --> 00:03:40.456
And the original action returns the next

47
00:03:40.456 --> 00:03:44.688
model
&gt;&gt; Evan: Right?

48
00:03:44.688 --> 00:03:46.090
Now comes the interesting part.

49
00:03:46.090 --> 00:03:49.462
How do we take the next model and

50
00:03:49.462 --> 00:03:54.929
somehow make our state
reflect what's going on?

51
00:03:58.276 --> 00:04:05.318
&gt;&gt; Evan: So what we can do is
&gt;&gt; Evan: In

52
00:04:05.318 --> 00:04:10.305
fact I think we should probably do
something like this down model like this.

53
00:04:14.077 --> 00:04:19.230
&gt;&gt; Evan: Const app,
well let's call it a vm, okay.

54
00:04:20.710 --> 00:04:24.972
And we want to reference
the latest model here.

55
00:04:24.972 --> 00:04:29.873
And vm.model = nextModel.

56
00:04:29.873 --> 00:04:35.710
So this could probably work.

57
00:04:35.710 --> 00:04:40.090
I believe this is slightly different
from our reference implementation.

58
00:04:41.260 --> 00:04:46.610
But just for the sake of it,
we should probably

59
00:04:46.610 --> 00:04:51.690
give it a shot,
see if there are any errors, no errors.

60
00:04:52.710 --> 00:04:58.790
And yeah, it works, so we've successfully

61
00:04:58.790 --> 00:05:03.560
satisfied the API requirements
that we see in the exercise.

62
00:05:06.240 --> 00:05:07.436
So let's recap.

63
00:05:07.436 --> 00:05:14.650
The first thing we're doing is, so the
thought process is actually in reverse.

64
00:05:14.650 --> 00:05:17.770
We first started thinking about

65
00:05:17.770 --> 00:05:22.060
the top level requirement is we need to
create a view instance and mount it to l.

66
00:05:23.130 --> 00:05:28.190
This view instance should take
the incoming model and make it reactive.

67
00:05:29.680 --> 00:05:33.690
And then inside this instance,
this render function,

68
00:05:33.690 --> 00:05:39.940
it'll invoke the view function and
pass it to the necessary arguments.

69
00:05:39.940 --> 00:05:43.460
Which is the h, the model, and actions.

70
00:05:43.460 --> 00:05:49.890
Then we realize the incoming raw actions
will not satisfy our requirements.

71
00:05:49.890 --> 00:05:54.380
And we somehow need to essentially
map the original actions to

72
00:05:54.380 --> 00:05:58.910
a another version of it to
satisfy the API requirement.

73
00:05:58.910 --> 00:06:03.070
So we create another clone object, and

74
00:06:03.070 --> 00:06:07.090
then essentially create
these mapped functions.

75
00:06:08.860 --> 00:06:13.608
And inside these mapped actions
we will call the original action,

76
00:06:13.608 --> 00:06:17.676
feed it the current model to
retrieve the next model, and

77
00:06:17.676 --> 00:06:21.599
then we replace the current
model with the next model.

78
00:06:23.560 --> 00:06:28.520
&gt;&gt; Evan: So as you can see, internally
this is still sort of mutating stuff.

79
00:06:28.520 --> 00:06:34.190
But what we expose to the external
is purely functional.

80
00:06:34.190 --> 00:06:39.309
In fact, you can see that this whole app
doesnâ€™t contain any mutation in any place.

81
00:06:40.500 --> 00:06:45.170
Everything is just functions,
arguments in, arguments out.

82
00:06:46.440 --> 00:06:48.840
And the point of this
exercise is really so

83
00:06:48.840 --> 00:06:53.500
show that despite
the superficial difference.

84
00:06:53.500 --> 00:06:59.210
So when we talk about going for a more
functional style or a more whatever style.

85
00:07:01.270 --> 00:07:04.560
It's more important to understand
the online connections between different

86
00:07:04.560 --> 00:07:05.590
paradigms.

87
00:07:05.590 --> 00:07:11.420
Similar to JSX versus templates or
functional versus non-functional.

88
00:07:11.420 --> 00:07:16.020
I believe the most important thing
is to understand what problems

89
00:07:16.020 --> 00:07:17.680
are they trying to solve.

90
00:07:17.680 --> 00:07:21.983
Instead of just sticking to one thing and
believing it's better than the other.

91
00:07:21.983 --> 00:07:28.530
So who's early, he worked on early on.

92
00:07:28.530 --> 00:07:31.250
He recently had a Tweet,
which I like a lot.

93
00:07:31.250 --> 00:07:37.620
He says the things that you like
probably not as good as you think.

94
00:07:37.620 --> 00:07:40.830
The things that you hate are probably
not as bad as you think.

95
00:07:40.830 --> 00:07:44.570
So I think it's important to always
keep an open mind when you see

96
00:07:44.570 --> 00:07:46.820
confronting paradigms and try to.

97
00:07:46.820 --> 00:07:49.350
It's always worthwhile to
explore the other side,

98
00:07:49.350 --> 00:07:52.580
to understand the benefits of both.

99
00:07:52.580 --> 00:07:53.440
That'll help you,

100
00:07:53.440 --> 00:07:58.130
even if you don't switch that'll help you
understand the underlying problem better.

