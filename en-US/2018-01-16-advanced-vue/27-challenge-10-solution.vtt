WEBVTT

1
00:00:00.000 --> 00:00:01.200
&gt;&gt; Evan You: Shared instance.

2
00:00:01.200 --> 00:00:06.273
We've noticed that when view,
a view instance takes some data in,

3
00:00:06.273 --> 00:00:11.258
the default behavior is it proxies
all the root level properties on

4
00:00:11.258 --> 00:00:15.547
that data object onto the view
instance itself, right?

5
00:00:15.547 --> 00:00:22.833
So we can in fact use the view instance
as some sort of reactive data store or

6
00:00:22.833 --> 00:00:29.480
a model which makes it look very
similar to MobX in that sense.

7
00:00:29.480 --> 00:00:34.452
So if we have, because this is
a single instance we can use directly,

8
00:00:34.452 --> 00:00:36.443
just do this, count:0.

9
00:00:39.633 --> 00:00:44.575
&gt;&gt; Evan You: And more importantly,
we can colocate the logic for

10
00:00:44.575 --> 00:00:48.853
possible state changes into this instance.

11
00:00:48.853 --> 00:00:51.760
And we use methods for that, right?

12
00:00:51.760 --> 00:00:53.743
So if we have this.

13
00:00:59.050 --> 00:01:01.266
&gt;&gt; Evan You: So now,
we have something that's pretty neat.

14
00:01:01.266 --> 00:01:07.560
We have its state in the way of state
can possible change in one place.

15
00:01:09.300 --> 00:01:14.345
And because the state object
itself is reactive we

16
00:01:14.345 --> 00:01:20.353
can just directly [COUGH]
reference inside other components

17
00:01:20.353 --> 00:01:26.132
without even worrying about
turning it into data first.

18
00:01:28.960 --> 00:01:33.401
&gt;&gt; Evan You: So now this counter
component will actually work,

19
00:01:33.401 --> 00:01:40.543
because when state was processed by view,
view instance is reactive by default.

20
00:01:40.543 --> 00:01:46.659
So the idea that it is reactive
means when you access state.count,

21
00:01:46.659 --> 00:01:52.456
this would trigger a getter,
which registers the dependency,

22
00:01:52.456 --> 00:01:58.170
which in turn calls this whole
render function to be reactive.

23
00:01:59.420 --> 00:02:03.341
And later on, when state count changes,
this render function will be called again,

24
00:02:03.341 --> 00:02:05.694
triggering the counter
component to re-render.

25
00:02:07.780 --> 00:02:15.444
&gt;&gt; Evan You: And in our app here, it still
needs a register counter, obviously.

26
00:02:15.444 --> 00:02:20.432
And we still need to somehow proxy
the call to the ink but now instead of

27
00:02:20.432 --> 00:02:26.900
directly manipulating the state here,
we're just calling a function here.

28
00:02:26.900 --> 00:02:30.702
So [COUGH] this may seem redundant for
this little example.

29
00:02:30.702 --> 00:02:32.174
But the good thing is,

30
00:02:32.174 --> 00:02:36.970
we are hiding the details of how
the state actually is mutated.

31
00:02:36.970 --> 00:02:41.298
So the details of how state
actually is mutated is co-located

32
00:02:41.298 --> 00:02:43.972
with the state with the store itself.

33
00:02:43.972 --> 00:02:50.160
In real apps, this logic can be much more
complex than just incrementing a count.

34
00:02:51.280 --> 00:02:56.641
This can involve going to an API,
fetching some things, doing filtering,

35
00:02:56.641 --> 00:03:01.016
comparisons and all that and
eventually mutating the state.

36
00:03:01.016 --> 00:03:06.514
And if these state logic is inherently
coupled with the state instead

37
00:03:06.514 --> 00:03:11.726
of couple with the logic of those
components, then it makes sense

38
00:03:11.726 --> 00:03:17.340
to take out of these logic and
put them in the centralized place, too.

39
00:03:17.340 --> 00:03:20.800
So this would become your go to place.

40
00:03:20.800 --> 00:03:23.404
So this state could be-
&gt;&gt; Evan You: So

41
00:03:23.404 --> 00:03:26.380
this pattern actually applies very well.

42
00:03:26.380 --> 00:03:31.932
So let say you have an app and you have
different kind of data in your app.

43
00:03:31.932 --> 00:03:36.173
So you can literally change
the naming to a store and

44
00:03:36.173 --> 00:03:40.808
assign them names like userStore,
productStore, and

45
00:03:40.808 --> 00:03:46.540
each of them is dedicated to dealing
with one specific domain or app.

46
00:03:47.780 --> 00:03:50.141
And then they can be directly imported and

47
00:03:50.141 --> 00:03:52.851
used in all your components
anywhere you want.

48
00:03:52.851 --> 00:03:58.500
Even reference them directly
inside render functions.

49
00:03:58.500 --> 00:04:05.470
So this pattern actually works
pretty well for medium sized apps.

50
00:04:05.470 --> 00:04:11.897
And if this kind of domain model based
state management is what you prefer,

51
00:04:11.897 --> 00:04:16.804
you can even extend it,
to build upon it for bigger apps.

52
00:04:16.804 --> 00:04:22.628
But this is already getting pretty
close to VueX which is our,

53
00:04:22.628 --> 00:04:27.340
the pattern is designed
to handle bigger skills.

54
00:04:28.840 --> 00:04:35.714
And if you've used VueX before you will
notice that we can rename a few things,

55
00:04:35.714 --> 00:04:40.210
for example,
we can call this thing the store and-

56
00:04:43.390 --> 00:04:47.079
&gt;&gt; Evan You: VueX has this concept called

57
00:04:47.079 --> 00:04:50.311
mutations and actions.

58
00:04:50.311 --> 00:04:55.123
So the difference between mutations and
actions is mutations are the code or

59
00:04:55.123 --> 00:05:00.254
the functions that actually changes
your state, actually mutates your state.

60
00:05:00.254 --> 00:05:02.850
So this is where the mutation happens.

61
00:05:04.260 --> 00:05:06.580
And they must be synchronous.

62
00:05:06.580 --> 00:05:11.081
The reason that they must be
synchronous is because Vuex has

63
00:05:11.081 --> 00:05:13.730
a devtools integration.

64
00:05:13.730 --> 00:05:18.692
If you've seen the devtools integration,
you know there's the time travel

65
00:05:18.692 --> 00:05:23.445
feature and we have snapshots of your
state whenever a mutation happens.

66
00:05:23.445 --> 00:05:29.757
If you want to take snapshots then
it is critical that the mutations

67
00:05:29.757 --> 00:05:34.830
be synchronous because you
can compare the before and

68
00:05:34.830 --> 00:05:39.581
after immediately after
the function is called.

69
00:05:39.581 --> 00:05:43.783
If a mutation can contain
arbitrary asynchronous operations,

70
00:05:43.783 --> 00:05:48.449
then after you call the mutation you
don't really know how long you have

71
00:05:48.449 --> 00:05:51.580
to wait until your state
has actually changed.

72
00:05:51.580 --> 00:05:57.100
So that can make the snapshot
comparisons a lot harder to implement.

73
00:05:57.100 --> 00:06:04.136
So and also, asynchronicity and the actual
mutation of your code is better separated,

74
00:06:04.136 --> 00:06:10.333
because asynchronicity is really sort
of a complex topic of its own, right?

75
00:06:10.333 --> 00:06:15.139
So essentially in VueX the concept of
actions and mutations are really just

76
00:06:15.139 --> 00:06:20.724
meant to separate asyncrhonousity from the
actual procedures of mutating your code.

77
00:06:20.724 --> 00:06:26.105
Also inside actions you can do a lot of
things like calling to external APIs,

78
00:06:26.105 --> 00:06:31.503
whereas your mutations will be focused
just on dealing just with the state.

79
00:06:31.503 --> 00:06:34.247
Your mutations will take some
arguments and mutate the state, and

80
00:06:34.247 --> 00:06:36.259
that's pretty much all
their responsibility.

81
00:06:36.259 --> 00:06:40.632
While in actions there's a lot
more things you can do and

82
00:06:40.632 --> 00:06:43.245
it can involve asynchronously.

