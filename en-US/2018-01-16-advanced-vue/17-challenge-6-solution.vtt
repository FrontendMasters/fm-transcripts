WEBVTT

1
00:00:00.490 --> 00:00:03.416
&gt;&gt; Evan You: So let's take a look
at how this could be implemented.

2
00:00:03.416 --> 00:00:08.248
So foo and bar are pretty straight forward
because they simply render static content

3
00:00:08.248 --> 00:00:12.040
and since there's no data,
no props, we don't need this.

4
00:00:12.040 --> 00:00:13.100
We can use the arrow function.

5
00:00:16.625 --> 00:00:22.438
&gt;&gt; Evan You: Wait, no okay, so
this is how we do it, right?

6
00:00:22.438 --> 00:00:27.960
So some people in chat has been
asking about functional components.

7
00:00:27.960 --> 00:00:31.367
And this is in fact
a pretty good candidate for

8
00:00:31.367 --> 00:00:35.680
functional components because
this is the purest form.

9
00:00:35.680 --> 00:00:37.450
It doesn't really depend on anything.

10
00:00:38.830 --> 00:00:43.750
So turning it into a functional component
really is just simple as adding that.

11
00:00:45.870 --> 00:00:50.640
And you have a functional component, but
this doesn't really help much because

12
00:00:52.830 --> 00:00:56.020
this doesn't really depend on any state or
props.

13
00:00:56.020 --> 00:01:04.040
So we'll actually go back into 3.1,
and take a look at this one.

14
00:01:04.040 --> 00:01:10.600
Our example component takes tags, and
we're referencing the props via this.tags.

15
00:01:12.060 --> 00:01:17.670
The difference between a normal
component and or stateful component and

16
00:01:17.670 --> 00:01:23.140
functional component is that normal
components have an instance,

17
00:01:23.140 --> 00:01:26.860
but functional components do not
have a backing instance at all.

18
00:01:26.860 --> 00:01:29.810
Functional components
as the name suggests,

19
00:01:29.810 --> 00:01:32.020
you can think of them as just functions.

20
00:01:32.020 --> 00:01:35.450
They take arguments in the return virtual.

21
00:01:35.450 --> 00:01:39.350
That's it,
it doesn't hold any state of its own.

22
00:01:39.350 --> 00:01:42.740
And in fact,
in Views version of implementation,

23
00:01:42.740 --> 00:01:46.280
functional components
are expanded eagerly.

24
00:01:46.280 --> 00:01:51.150
So if you use a functional component
inside a parent component,

25
00:01:51.150 --> 00:01:54.110
this functional component's
render function will be invoked

26
00:01:54.110 --> 00:01:58.470
eagerly inside that parent
component's render function.

27
00:01:58.470 --> 00:02:02.660
So it's kind of expended
in line which makes it

28
00:02:02.660 --> 00:02:07.450
extremely cheap because there's no
overhead of creating a backing instance,

29
00:02:07.450 --> 00:02:10.680
holding all these data properties
in place and everything.

30
00:02:10.680 --> 00:02:14.270
So the perfect use case for
functional components is for

31
00:02:14.270 --> 00:02:18.070
performance optimizations when
you have a lot of leaf nodes.

32
00:02:20.040 --> 00:02:26.520
By leaf nodes, I mean for example you
have a huge list, so it's probably

33
00:02:26.520 --> 00:02:31.240
inevitable that you have to make each item
in the list a real stateful component, but

34
00:02:31.240 --> 00:02:34.950
inside each of these components you
might have even more components.

35
00:02:34.950 --> 00:02:37.130
And those components can
be purely presentational.

36
00:02:37.130 --> 00:02:39.400
For example,
you're just rendering a button, or

37
00:02:39.400 --> 00:02:43.170
just rendering a static avatar or
something, right?

38
00:02:43.170 --> 00:02:48.370
These components don't really have too
much responsibilities in terms of state.

39
00:02:48.370 --> 00:02:51.160
Some of them are used to
encapsulate some styling,

40
00:02:51.160 --> 00:02:54.580
some of them are just like markup, right?

41
00:02:54.580 --> 00:02:58.610
If you have these presentational
components which simply takes some data,

42
00:02:58.610 --> 00:03:03.510
takes some props in and renders some
output depending on their props

43
00:03:03.510 --> 00:03:06.570
then this seems a perfect candidate for
functional components.

44
00:03:06.570 --> 00:03:12.150
And if these components are repeated
in many places in your app,

45
00:03:12.150 --> 00:03:16.720
turning them into functional ones
should boost the performance of an app.

46
00:03:18.090 --> 00:03:21.830
So let's take a look at
functional components.

47
00:03:21.830 --> 00:03:26.235
All we need to do is really just
add the functional true option, and

48
00:03:26.235 --> 00:03:30.247
it takes the same props
declarations as normal components,

49
00:03:30.247 --> 00:03:36.086
the difference being that
&gt;&gt; Evan You: Instead of accessing this

50
00:03:36.086 --> 00:03:41.887
prompt using this because we no
longer have access to this anymore,

51
00:03:41.887 --> 00:03:47.630
this is passed in via a second
context object, second argument.

52
00:03:47.630 --> 00:03:50.420
This is a functional rendering context.

53
00:03:50.420 --> 00:03:53.180
So this context object
contains a few things.

54
00:03:53.180 --> 00:03:57.050
So first, you can access context.props.

55
00:03:57.050 --> 00:04:00.060
So props will be held in this context.

56
00:04:00.060 --> 00:04:03.050
You can also have contact.slots.

57
00:04:03.050 --> 00:04:05.320
It's a function.

58
00:04:05.320 --> 00:04:09.330
When you call this, it's a function.

59
00:04:09.330 --> 00:04:13.690
It'll give you resolved slot usage
because functional components may also be

60
00:04:13.690 --> 00:04:15.420
used with slots.

61
00:04:15.420 --> 00:04:20.960
Even if the example is functional,
you may be passing things here, right?

62
00:04:20.960 --> 00:04:22.510
So how do we access these?

63
00:04:22.510 --> 00:04:27.400
So they're passed in via slots, so
you can use the same name slots or

64
00:04:27.400 --> 00:04:29.190
our name slots API.

65
00:04:29.190 --> 00:04:36.170
This will give you the same as
this.slots as a normal render functions

66
00:04:37.570 --> 00:04:41.150
and you can also have context.children.

67
00:04:41.150 --> 00:04:45.445
So this is different from slots in
the sense that this is the raw children.

68
00:04:45.445 --> 00:04:48.564
So anything,
even if they have slot names on them,

69
00:04:48.564 --> 00:04:53.081
you'll just get the raw list of virtual
nodes that's passing into this.

70
00:04:53.081 --> 00:04:58.258
So this is only used when you have
really low level concerns like you want

71
00:04:58.258 --> 00:05:03.280
to do crazy things, but we're not
gonna talk too much about it here.

72
00:05:03.280 --> 00:05:08.710
And then you can access
the context.parent which is

73
00:05:08.710 --> 00:05:15.010
the context in which this functional
component was rendered in.

74
00:05:15.010 --> 00:05:16.609
In this case, the root instance.

75
00:05:17.650 --> 00:05:20.653
Remember, if you do something like this.

76
00:05:25.056 --> 00:05:29.467
&gt;&gt; Evan You: If you're passing example
a functional component into another

77
00:05:29.467 --> 00:05:34.121
component via slots, usually if
example is a stateful component,

78
00:05:34.121 --> 00:05:37.649
it's entire parent will
be referencing foo here.

79
00:05:38.690 --> 00:05:42.140
However in the sense of
functional components,

80
00:05:42.140 --> 00:05:46.550
the context pairings will be actually
referenced in the root instance here.

81
00:05:46.550 --> 00:05:50.520
It only references the context
that this function was expanded in

82
00:05:50.520 --> 00:05:52.830
instead of the stateful parent.

83
00:05:52.830 --> 00:05:58.040
This is because as we said functional
components are evaluated eagerly.

84
00:05:58.040 --> 00:06:03.280
So this is actually expanded
before they're even passed to foo.

85
00:06:03.280 --> 00:06:07.058
So when we are here, the instance for
foo isn't even created yet, so

86
00:06:07.058 --> 00:06:08.895
there's no way to reference it.

87
00:06:11.169 --> 00:06:12.616
&gt;&gt; Evan You: Okay, so we got through that.

88
00:06:16.293 --> 00:06:21.920
&gt;&gt; Evan You: And in here, so we see that
it's cool that you can access props here.

89
00:06:21.920 --> 00:06:27.510
So this will become
context.props.tags.map,

90
00:06:27.510 --> 00:06:33.070
and this completes our
functional transformation.

91
00:06:33.070 --> 00:06:38.095
But we can simplify this a bit further
in that we can use the structuring here,

92
00:06:38.095 --> 00:06:44.540
so props { tags }.

93
00:06:44.540 --> 00:06:49.966
So you can destruct multiple props here,
like this, foo, bar.

94
00:06:49.966 --> 00:06:53.740
And some will find that it's annoying
that you have to also explicitly

95
00:06:53.740 --> 00:06:56.760
declare props for
functional components, and

96
00:06:56.760 --> 00:06:59.460
in the latest version of Vue,
it's actually optional now.

97
00:06:59.460 --> 00:07:02.900
So you can create functional components
that don't declare any props.

98
00:07:02.900 --> 00:07:06.780
It'll just bucket collect
all the things as props.

99
00:07:08.460 --> 00:07:13.640
And yeah, so
this is a more concise version.

100
00:07:13.640 --> 00:07:19.260
And if you use JSX, we have official

101
00:07:19.260 --> 00:07:24.490
Babble plugging called Babble Plugging,
transform view JSX

102
00:07:24.490 --> 00:07:29.805
that allows you to write JSX, which
allows you to do something like this.

103
00:07:29.805 --> 00:07:36.137
[SOUND] it’s complaining, but
it doesn’t like JSX though.

104
00:07:36.137 --> 00:07:40.989
It can do something like this
if you enable JSX in your app.

105
00:07:42.720 --> 00:07:48.071
And the cool thing about
using JSX is you can

106
00:07:48.071 --> 00:07:53.730
actually declare your components this way.

107
00:07:53.730 --> 00:07:56.960
So usually when you declare
a functional component,

108
00:07:56.960 --> 00:07:59.930
you declare it like this,
const example like this.

109
00:07:59.930 --> 00:08:04.372
You still need this outer object
boilerplate declare a function true.

110
00:08:04.372 --> 00:08:09.713
So someone in the Regis
team made a bevel transform

111
00:08:09.713 --> 00:08:16.200
called bevel plug in transform
view functional component or

112
00:08:16.200 --> 00:08:22.050
something which allows you
to just write it like this,

113
00:08:22.050 --> 00:08:27.677
= Props and,
&gt;&gt; Evan You: Yeah,

114
00:08:27.677 --> 00:08:33.661
so essentially,
&gt;&gt; Evan You: You

115
00:08:33.661 --> 00:08:40.730
can treat them as just a one liner
function and to make it look a bit better.

116
00:08:40.730 --> 00:08:43.050
So this is really just a function, and

117
00:08:43.050 --> 00:08:46.590
we'll recognize that this
function is returning JSX.

118
00:08:46.590 --> 00:08:51.460
And we'll compile them into
the full version here, and

119
00:08:51.460 --> 00:08:56.970
then compile all the JSX
into h render calls for you.

120
00:08:56.970 --> 00:08:59.980
So if you enable that plugin,

121
00:08:59.980 --> 00:09:04.100
this is the most concise form of
functional components you can write.

122
00:09:04.100 --> 00:09:08.140
And it's very similar to React
functional components as well.

123
00:09:10.090 --> 00:09:15.240
So I believe we've talked enough
about functional components,

124
00:09:15.240 --> 00:09:16.260
and we're gonna look at this.

125
00:09:17.560 --> 00:09:19.170
Finally getting to our exercise.

126
00:09:21.700 --> 00:09:28.519
So this is gonna be bar
&gt;&gt; Evan You: And

127
00:09:28.519 --> 00:09:36.100
we want to implement this example
also using render functions, right?

128
00:09:36.100 --> 00:09:40.964
So this example takes a prop,
&gt;&gt; Evan You: Okay,

129
00:09:40.964 --> 00:09:45.700
and in fact we can make it functional and
be done with it.

130
00:09:48.270 --> 00:09:50.570
Remember that we can directly return

131
00:09:53.100 --> 00:09:58.930
another component as our own
root node inside one component.

132
00:09:58.930 --> 00:10:03.609
So in this case,
what to return depends on this OK prop.

133
00:10:05.240 --> 00:10:11.800
So if ok, we'll return foo and
if not, we'll return bar.

134
00:10:11.800 --> 00:10:14.610
And this is pretty much it, all right?

135
00:10:14.610 --> 00:10:20.261
And in order to complete the test, to pass
the test we need to implement a button.

136
00:10:30.853 --> 00:10:34.400
&gt;&gt; Evan You: And yeah,
this should put us through the test.

137
00:10:35.490 --> 00:10:36.840
Let me try that.

138
00:10:40.943 --> 00:10:47.947
Okay,
&gt;&gt; Evan You: Expected to match,

139
00:10:47.947 --> 00:10:50.540
it's in reverse, I guess?

140
00:10:50.540 --> 00:10:53.160
&gt;&gt; Speaker 2: You have to
initialize ok to true.

141
00:10:53.160 --> 00:10:56.636
&gt;&gt; Evan You: Yeah,
I think you got ok in your model.

142
00:10:56.636 --> 00:11:00.059
Here, it didn't have this here.

143
00:11:04.423 --> 00:11:06.886
&gt;&gt; Evan You: And right, okay,
it doesn't exist in the root scope, so

144
00:11:06.886 --> 00:11:07.951
we need to declare that.

145
00:11:10.489 --> 00:11:12.470
&gt;&gt; Evan You: And it passed, great.

146
00:11:12.470 --> 00:11:17.910
So yeah, so
essentially this is again very concise,

147
00:11:17.910 --> 00:11:19.910
toggling between two components and

148
00:11:19.910 --> 00:11:22.600
the fact that you can return other
component as your own root node.

