WEBVTT

1
00:00:00.110 --> 00:00:02.560
&gt;&gt; Evan You: So
we're done with the reactivity system.

2
00:00:02.560 --> 00:00:05.470
We got something very basic working.

3
00:00:05.470 --> 00:00:10.739
And if inside the functions,
you're doing some manipulations,

4
00:00:10.739 --> 00:00:15.558
you've essentially built a tiny
reactivity engine that can automatically

5
00:00:15.558 --> 00:00:18.434
keep your state and in sync, right?

6
00:00:18.434 --> 00:00:23.900
So that's the very simple version of
how vue's update system actually works.

7
00:00:25.090 --> 00:00:29.060
And next we are going to take
little detour into another topic.

8
00:00:29.060 --> 00:00:31.310
Let's talk about writing plugins.

9
00:00:31.310 --> 00:00:36.786
So, you probably used
a plugin before with vue.use.

10
00:00:36.786 --> 00:00:42.550
And how many of you have read the page
about writing plugins in the docs?

11
00:00:43.880 --> 00:00:44.730
No one?

12
00:00:44.730 --> 00:00:45.800
&gt;&gt; Speaker 2: Glanced?

13
00:00:45.800 --> 00:00:47.352
&gt;&gt; Evan You: Glanced, okay.

14
00:00:47.352 --> 00:00:53.474
All right, so
essentially a plugin is just a function

15
00:00:53.474 --> 00:00:58.372
that receives Vue as
the first argument and

16
00:00:58.372 --> 00:01:02.874
optionally second argument options.

17
00:01:02.874 --> 00:01:06.590
And then you do something
with Vue inside your plugin.

18
00:01:06.590 --> 00:01:10.630
That's the higher level Vue of it, but

19
00:01:10.630 --> 00:01:15.774
some of the commonly used
techniques when you're

20
00:01:15.774 --> 00:01:20.805
writing plugins involves
this Vue.mixin API.

21
00:01:20.805 --> 00:01:22.147
How many of you have used mixins?

22
00:01:23.674 --> 00:01:25.511
&gt;&gt; Evan You: Okay.

23
00:01:25.511 --> 00:01:32.010
So mixins are essentially parts
reusable snippets or parts of

24
00:01:32.010 --> 00:01:38.010
Vue component options that can be mixed
into an existing component, all right?

25
00:01:38.010 --> 00:01:42.460
So you can use them on
a per component basis but

26
00:01:42.460 --> 00:01:47.264
Vue.mixin is a global API
that will apply a mixin

27
00:01:47.264 --> 00:01:52.083
to every instance created from then on,
right?

28
00:01:52.083 --> 00:01:55.010
So it's very powerful, but the greater
the power the greater the responsibility.

29
00:01:55.010 --> 00:01:57.974
So you don't do crazy things
inside the global mixins,

30
00:01:57.974 --> 00:02:01.070
all right,
because it affects every instance.

31
00:02:01.070 --> 00:02:03.820
But it's very commonly,
if you want to apply some

32
00:02:03.820 --> 00:02:09.290
global functionality to your Vue app,
you will be using global mixins.

33
00:02:09.290 --> 00:02:12.200
And usually it's a better idea to

34
00:02:12.200 --> 00:02:16.910
wrap this with a plugin interface because
plugins are automatically deduped.

35
00:02:16.910 --> 00:02:19.680
If you have multiple vue.use
calls to the same plugin it will

36
00:02:19.680 --> 00:02:22.050
prevent it from being applied over and
over again.

37
00:02:22.050 --> 00:02:24.040
The vue.mixin doesn't do that.

38
00:02:24.040 --> 00:02:30.160
So it's best practice to always wrap
global mixins in a plugin interface.

39
00:02:30.160 --> 00:02:33.610
And it's also more consistent
when you see your entry script.

40
00:02:33.610 --> 00:02:36.700
You always see vue.use,
this plugin, that plugin.

41
00:02:36.700 --> 00:02:38.350
It's more consistent that way.

42
00:02:39.400 --> 00:02:43.790
And the other commonly used thing
is this dollar options property,

43
00:02:43.790 --> 00:02:44.590
instance property.

44
00:02:45.980 --> 00:02:50.680
So probably not many of you
know this thing exists, but

45
00:02:50.680 --> 00:02:58.170
this dot dollar options exist on every
component and this contains the merged,

46
00:02:58.170 --> 00:03:03.020
normalized options object
of that specific instance,

47
00:03:03.020 --> 00:03:06.590
because we know Vue component options
can come from a lot of places.

48
00:03:06.590 --> 00:03:09.040
It can come from global mixins.

49
00:03:09.040 --> 00:03:12.420
It can come from
the component's own definition.

50
00:03:12.420 --> 00:03:15.290
It can come from
the options you pass to it

51
00:03:15.290 --> 00:03:18.010
when you're creating the instance,
all right.

52
00:03:18.010 --> 00:03:22.340
And it can be also from
an answers component if you have

53
00:03:22.340 --> 00:03:25.250
further chains of
view.extend along the way.

54
00:03:25.250 --> 00:03:30.090
So all of these options need to be merged
and normalized into this final options

55
00:03:30.090 --> 00:03:34.750
object for that instance, and
that is $options for each instance.

56
00:03:37.180 --> 00:03:39.580
And interestingly,

57
00:03:39.580 --> 00:03:43.970
this also contains any custom options
that you added to that component.

58
00:03:43.970 --> 00:03:46.134
So it doesn't have to
be a built-in option.

59
00:03:47.160 --> 00:03:48.864
So we will just merge everything in here.

