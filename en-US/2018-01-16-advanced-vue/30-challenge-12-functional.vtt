WEBVTT

1
00:00:00.000 --> 00:00:02.300
&gt;&gt; Evan You: So much for Vuex.

2
00:00:02.300 --> 00:00:06.598
The next exercise,
I wanna sort of just switch gears and

3
00:00:06.598 --> 00:00:09.991
talk about something functional, right?

4
00:00:09.991 --> 00:00:13.378
So if you're familiar with react,

5
00:00:13.378 --> 00:00:17.870
you probably know that react
is in general its ecosystem.

6
00:00:17.870 --> 00:00:21.859
And its community is in general much
more into functional programming.

7
00:00:21.859 --> 00:00:29.130
And Redux is a very good example
of that sort of preference.

8
00:00:29.130 --> 00:00:34.280
because the whole premise of Redux is

9
00:00:34.280 --> 00:00:39.103
that your app state is immutable.

10
00:00:39.103 --> 00:00:44.440
All right, so
if we have an initial state of count: 0.

11
00:00:44.440 --> 00:00:50.131
Similar to how Vuex takes
different mutations,

12
00:00:50.131 --> 00:00:54.584
Redux takes different action types.

13
00:00:54.584 --> 00:00:59.290
And the core concept in redux is
called something called a reducer.

14
00:00:59.290 --> 00:01:04.516
So a reducer is a function that looks

15
00:01:04.516 --> 00:01:10.096
like this, and reducer takes state.

16
00:01:10.096 --> 00:01:18.130
So this is prevState and
action and it does something.

17
00:01:18.130 --> 00:01:24.462
So what it does is the reducer will
return a whole new copy of your

18
00:01:24.462 --> 00:01:29.730
state using the previous state and
the action type.

19
00:01:29.730 --> 00:01:32.000
And because this is just one big function,
right?

20
00:01:33.340 --> 00:01:34.460
So we'll do a big switch statement.

21
00:01:34.460 --> 00:01:39.667
switch (action; {

22
00:01:39.667 --> 00:01:45.741
case 'inc': return {

23
00:01:45.741 --> 00:01:52.106
count= preState.count

24
00:01:52.106 --> 00:01:58.468
+ 1 } And case: 'dec'

25
00:01:58.468 --> 00:02:03.385
: return { count:

26
00:02:03.385 --> 00:02:10.368
prevState.count- 1 }.

27
00:02:10.368 --> 00:02:13.817
And because we have
return statements here,

28
00:02:13.817 --> 00:02:18.185
I'm not going to do the,
there is an extra colon here.

29
00:02:18.185 --> 00:02:21.682
I'm not going to do the break because
the return statement kind of does that

30
00:02:21.682 --> 00:02:23.160
already.

31
00:02:23.160 --> 00:02:28.428
And if it's default, just return

32
00:02:28.428 --> 00:02:34.066
prevState or you can throw an error.

33
00:02:34.066 --> 00:02:39.470
Like on no action type, but
the idea is pretty simple.

34
00:02:39.470 --> 00:02:44.733
You have a previous state and
your next date is always constructed

35
00:02:44.733 --> 00:02:50.293
on top of the previous state,
based on what action type you receive.

36
00:02:50.293 --> 00:02:55.985
So it's very functional because it takes
some arguments who return something new,

37
00:02:55.985 --> 00:02:59.280
and it's not mutating anything in place.

38
00:02:59.280 --> 00:03:04.054
But, in effect, when you apply this
to same management pattern and

39
00:03:04.054 --> 00:03:07.929
achieve the same in effect
in terms of your component.

40
00:03:07.929 --> 00:03:12.630
Where both dispassion and action,
send it to the central store,

41
00:03:12.630 --> 00:03:16.830
something happens to the store,
your state get updated.

42
00:03:16.830 --> 00:03:20.830
Either replace or
mutate it and eventually,

43
00:03:20.830 --> 00:03:24.520
that change is reflected as side effect.

44
00:03:24.520 --> 00:03:31.230
And the side effect, in a front end
app is updates in the DOM, right?

45
00:03:31.230 --> 00:03:35.569
So this is the essence of redux, right?

46
00:03:35.569 --> 00:03:44.040
So we can apply very similar
concepts in a Vue app.

47
00:03:44.040 --> 00:03:47.287
If this is the type of API you prefer.

48
00:03:47.287 --> 00:03:50.230
We can totally do that in Vue as well.

49
00:03:50.230 --> 00:03:55.775
So let's look at our exercise and
look at the desired API.

50
00:03:55.775 --> 00:04:00.455
So this interface in fact inspired from,
so

51
00:04:00.455 --> 00:04:07.920
this kind of combined influence from
redux and a few other libraries.

52
00:04:07.920 --> 00:04:13.423
There is a library called Hyperapp, which
exposes almost exactly this interface.

53
00:04:13.423 --> 00:04:17.250
And I believe also looks
very similar to this.

54
00:04:17.250 --> 00:04:23.032
But the idea is,
you sorta have this model,

55
00:04:23.032 --> 00:04:26.638
which is the same as state.

56
00:04:26.638 --> 00:04:28.850
And you have possible actions.

57
00:04:28.850 --> 00:04:33.589
And each of these actions take,
so these actions,

58
00:04:33.589 --> 00:04:39.102
essentially receive the previous
state as the argument and

59
00:04:39.102 --> 00:04:41.760
they return the next state.

60
00:04:41.760 --> 00:04:45.090
So instead of switch statement, we still
break them into separate functions.

61
00:04:45.090 --> 00:04:51.478
But all of them receive your state as the
argument and returns the next new state.

62
00:04:51.478 --> 00:04:55.520
And your view is,
a function that you see three arguments.

63
00:04:55.520 --> 00:05:01.579
The h is our random function argument,
and then there's model.

64
00:05:01.579 --> 00:05:05.044
It's directly passed into
your random function, and

65
00:05:05.044 --> 00:05:09.470
your actions are also passed
into the random functions.

66
00:05:09.470 --> 00:05:13.897
So everything is passed,
into your function as arguments.

67
00:05:13.897 --> 00:05:16.260
This is like as functional as it can get.

68
00:05:16.260 --> 00:05:23.464
[LAUGH] And what you need to do, when you
need state you reference it on the model.

69
00:05:23.464 --> 00:05:31.120
When you need things to change you
trigger functions on your action, right?

70
00:05:32.190 --> 00:05:35.898
So here you can see that we're passing, so

71
00:05:35.898 --> 00:05:40.945
this is the syntax for
handling events in renofunctions.

72
00:05:40.945 --> 00:05:44.542
You use the on nested under
your data object, and

73
00:05:44.542 --> 00:05:49.544
inside that you do {on: { click and
passing the function to call,

74
00:05:49.544 --> 00:05:55.996
when the button is clicked.
&gt;&gt; Evan You: Eventually,

75
00:05:55.996 --> 00:05:59.090
this is what we want to achieve.

76
00:05:59.090 --> 00:06:06.109
Really, the whole exercise is about,
given a desired API,

77
00:06:06.109 --> 00:06:12.454
how do you use existing
primitive to present that API?

78
00:06:12.454 --> 00:06:16.010
To create something that
satisfies that API.

79
00:06:16.010 --> 00:06:19.997
And this is in fact,
totally feasible within the context.

80
00:06:19.997 --> 00:06:23.488
And if you look at
the reference implementation,

81
00:06:23.488 --> 00:06:26.740
it can be as short as
down to 12 lines of code.

