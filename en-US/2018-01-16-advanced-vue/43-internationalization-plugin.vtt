WEBVTT

1
00:00:00.340 --> 00:00:04.765
&gt;&gt; Evan You: But
here we're just gonna simply talk about,

2
00:00:04.765 --> 00:00:11.586
how to write a simple plugin that
exposes this dollar T method, right?

3
00:00:11.586 --> 00:00:13.720
The usage looks like this.

4
00:00:13.720 --> 00:00:18.060
We're finally using this second
argument of our view use function.

5
00:00:18.060 --> 00:00:22.315
So you can passing additional
options into use of plugin.

6
00:00:22.315 --> 00:00:27.387
And in the case of 8nplugin, we're
just gonna pass the local dictionary,

7
00:00:27.387 --> 00:00:30.415
which contains of few different languages.

8
00:00:30.415 --> 00:00:35.759
This is Netherlands, cuz [LAUGH] I gave

9
00:00:35.759 --> 00:00:41.439
the workshop in Netherlands before so.

10
00:00:41.439 --> 00:00:46.165
And in terms of language,
we will be requiring the user to

11
00:00:46.165 --> 00:00:51.490
declare a reactive data property
called land at the root level.

12
00:00:53.760 --> 00:00:58.563
And the way you change language is,
simply setting it to a different language.

13
00:00:58.563 --> 00:01:00.891
So let's implement this quickly.

14
00:01:00.891 --> 00:01:05.692
Our install function take view itself and
the locals.

15
00:01:05.692 --> 00:01:09.125
All right, and

16
00:01:09.125 --> 00:01:14.412
we need to mixin [COUGH].

17
00:01:14.412 --> 00:01:19.600
So we need dollar T function to be
available everywhere and every component.

18
00:01:19.600 --> 00:01:26.498
So we can do the mixin thing,
we can do methods $t,

19
00:01:26.498 --> 00:01:31.793
but this is less efficient than, say,

20
00:01:31.793 --> 00:01:38.542
just do Vue.prototype.$t = something else.

21
00:01:40.916 --> 00:01:43.530
&gt;&gt; Evan You: Right,
we just attach it to Vue's prototype.

22
00:01:43.530 --> 00:01:46.735
And this will become available
in every Vue instance.

23
00:01:46.735 --> 00:01:50.537
This is just how prototype
inheritance in JavaScript works.

24
00:01:50.537 --> 00:01:54.610
And this will be much more performant
because there won't be any runtime

25
00:01:54.610 --> 00:01:57.090
overhead of finding the methods, option.

26
00:01:57.090 --> 00:02:03.825
And then, setting up the method and
all that stuff.

27
00:02:03.825 --> 00:02:07.400
And what we do is,
this function will take some id.

28
00:02:07.400 --> 00:02:12.282
And in fact, we don't want it to be narrow

29
00:02:12.282 --> 00:02:17.734
function because we do
need access to this ID.

30
00:02:17.734 --> 00:02:22.176
And now, we need another thing
to figure out what to do.

31
00:02:22.176 --> 00:02:25.015
Because first,
we need access to the id, and

32
00:02:25.015 --> 00:02:28.990
then we need to locals, and
then we need the current language.

33
00:02:28.990 --> 00:02:31.010
Where do we find the current language?

34
00:02:31.010 --> 00:02:33.796
So if your using a state
management package,

35
00:02:33.796 --> 00:02:36.664
you can store the current
language in a store.

36
00:02:36.664 --> 00:02:40.240
And that would be very straight forward,

37
00:02:40.240 --> 00:02:45.970
you just somehow feed the store of
either option into your plugin.

38
00:02:45.970 --> 00:02:48.814
And the plugin would have
access to your store.

39
00:02:48.814 --> 00:02:52.860
But in this case, we're just
gonna do the quick and dirty way.

40
00:02:52.860 --> 00:02:58.820
We require that the user have this
land property in the root instance.

41
00:02:58.820 --> 00:03:00.709
So we know it should always be there.

42
00:03:00.709 --> 00:03:04.493
So we just do this.$root.lang.

43
00:03:04.493 --> 00:03:07.300
This is our language right?

44
00:03:07.300 --> 00:03:12.745
So and we can find the dictionary
from the locals and

45
00:03:12.745 --> 00:03:17.693
find the corresponding id and
just return it.

46
00:03:17.693 --> 00:03:23.173
And this is pretty much it.

47
00:03:32.695 --> 00:03:37.500
&gt;&gt; Evan You: So yeah, switch and
between them works, and

48
00:03:37.500 --> 00:03:41.550
so there really isn't too much to it.

49
00:03:41.550 --> 00:03:45.560
The only thing I want to sort
of emphasize, so this is kind of

50
00:03:45.560 --> 00:03:50.067
a combination of the plugin exercise and
the reactivity section.

51
00:03:50.067 --> 00:03:53.909
Because understanding, why the language
switch works is pretty important here.

52
00:03:55.660 --> 00:04:00.840
&gt;&gt; Evan You: This $t function
references this .$root.lang.

53
00:04:00.840 --> 00:04:05.860
This dot here is what
registers the reactivity.

54
00:04:05.860 --> 00:04:08.944
And it's important,
this lang is a data property,

55
00:04:08.944 --> 00:04:13.164
instead of static property,
because it needs to be reactive, right?

56
00:04:13.164 --> 00:04:15.961
This is also what enables
it to trigger changes,

57
00:04:15.961 --> 00:04:18.840
when we later on set the lang
to a different value.

58
00:04:18.840 --> 00:04:22.700
And why would this register reactivity?

59
00:04:22.700 --> 00:04:29.881
It's because this $t function was
invoked here in the template.

60
00:04:29.881 --> 00:04:33.492
And when the template gets
compiled into render functions,

61
00:04:33.492 --> 00:04:37.470
this $t will also be invoked when
the render function, renders.

62
00:04:38.900 --> 00:04:44.628
That's why the whole render function also,
registers root.lang as a dependency and

63
00:04:44.628 --> 00:04:47.857
that's why later on
the whole switching works.

64
00:04:47.857 --> 00:04:53.864
So yeah, this is essentially it,
if you're using directives,

65
00:04:53.864 --> 00:04:58.684
things might have to work
a little bit differently.

66
00:04:58.684 --> 00:05:04.092
But we don't really have that
much time to talk about that now,

67
00:05:04.092 --> 00:05:08.390
so that's pretty much it for
the whole workshop.

