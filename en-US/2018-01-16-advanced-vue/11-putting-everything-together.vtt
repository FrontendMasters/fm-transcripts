WEBVTT

1
00:00:00.380 --> 00:00:02.480
&gt;&gt; Evan You: So
putting everything together,

2
00:00:02.480 --> 00:00:06.390
this is putting the render function side
and our reactivity lessons together.

3
00:00:06.390 --> 00:00:08.260
Each component has a render function.

4
00:00:09.290 --> 00:00:12.600
And this render function, when we run it,

5
00:00:12.600 --> 00:00:16.350
it's essentially wrapped inside an auto
run that we implemented earlier.

6
00:00:16.350 --> 00:00:21.275
So that's why when it renders,
we're collecting all these dependencies by

7
00:00:21.275 --> 00:00:24.443
invoking these getters
on our data properties.

8
00:00:24.443 --> 00:00:27.580
And then we have this additional concept,
kind of watcher,

9
00:00:27.580 --> 00:00:31.710
that each component has
a watcher that's responsible for

10
00:00:31.710 --> 00:00:37.490
collecting dependencies, cleaning them up,
and notifying everything.

11
00:00:39.230 --> 00:00:42.600
And the component render
functions returns Virtual DOM.

12
00:00:42.600 --> 00:00:48.040
So you see the loop here because
we're inside Autorun where we render.

13
00:00:48.040 --> 00:00:49.450
The render will be called over and

14
00:00:49.450 --> 00:00:54.200
over again, whenever the property that
we depend on viewing the render changes.

15
00:00:54.200 --> 00:00:59.080
So each component has sort
of it's own Autorun loop.

16
00:01:00.340 --> 00:01:04.270
And a component tree consists
of many of these components,

17
00:01:04.270 --> 00:01:12.560
each as a dependency boundary, so each
component tracks its own dependencies.

18
00:01:12.560 --> 00:01:16.000
So, this is in fact an advantage
when you have a huge component tree,

19
00:01:16.000 --> 00:01:20.910
because you can have the data
dependencies change.

20
00:01:20.910 --> 00:01:24.140
Your data may be mutated from anywhere,
but

21
00:01:24.140 --> 00:01:29.050
because each component tracks its own
dependencies inside a big component tree,

22
00:01:29.050 --> 00:01:34.280
we precisely know which components are
affected by arbitrary data manipulation.

23
00:01:34.280 --> 00:01:37.040
So, we never over render, we don't

24
00:01:37.040 --> 00:01:42.340
have the problem of having too many
components being rerendered unnecessarily,

25
00:01:42.340 --> 00:01:46.910
because we have a precise dependency
tracking system in place.

26
00:01:46.910 --> 00:01:52.040
So, [COUGH] that's an architectural
advantage that gets rid of

27
00:01:52.040 --> 00:01:55.880
some sort of optimization
efforts that you need to do in

28
00:01:55.880 --> 00:01:59.780
a more top down based rendering
model that React uses.

29
00:02:01.430 --> 00:02:06.400
But we also pay the overhead of converting
these data into getters and setters.

30
00:02:06.400 --> 00:02:08.470
This has a slight overhead as well.

31
00:02:08.470 --> 00:02:13.520
So it's not like a silver bullet,
there's pros and cons on both sides, but

32
00:02:13.520 --> 00:02:19.790
in general both approaches are viable and
people have built huge apps in both React

33
00:02:19.790 --> 00:02:25.290
and View, so, in practice, the difference
would only show up in very extreme cases.

