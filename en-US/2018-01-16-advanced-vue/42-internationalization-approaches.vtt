WEBVTT

1
00:00:00.860 --> 00:00:02.360
&gt;&gt; Evan You: And yeah,

2
00:00:02.360 --> 00:00:06.570
the final topic that we're gonna
talk about is internationalization.

3
00:00:06.570 --> 00:00:11.940
Again, internationalization can take very
different, can take different styles.

4
00:00:13.340 --> 00:00:17.980
There is a plugin called vue-i18n by

5
00:00:17.980 --> 00:00:23.930
Kazupon who is a core
team member from Japan.

6
00:00:23.930 --> 00:00:28.850
And he's been experimenting extensively
about internationalization and

7
00:00:30.470 --> 00:00:32.000
experimented with three
different approaches.

8
00:00:32.000 --> 00:00:35.680
The first is what we're gonna discuss
here, is the most straightforward and

9
00:00:35.680 --> 00:00:37.270
obvious solution.

10
00:00:37.270 --> 00:00:41.750
But it comes with some performance
cost if your app is really huge.

11
00:00:41.750 --> 00:00:47.143
And that is, if you want
something to be internationalized,

12
00:00:47.143 --> 00:00:53.070
you will use this special $t function and
give it a slug name for id.

13
00:00:53.070 --> 00:00:57.194
Which will then go into
your locale dictionary and

14
00:00:57.194 --> 00:01:03.010
find the correct message and
just render it, very straightforward.

15
00:01:03.010 --> 00:01:09.800
The other two approaches, the other one
is, another one is going with directives.

16
00:01:09.800 --> 00:01:14.660
So you do something like v i18n

17
00:01:14.660 --> 00:01:19.160
equals welcome message, and

18
00:01:19.160 --> 00:01:23.480
then it just goes like this.

19
00:01:24.620 --> 00:01:27.726
So,
&gt;&gt; Evan You: The advantage of using

20
00:01:27.726 --> 00:01:31.230
directives is if you don't care
about server side rendering,

21
00:01:31.230 --> 00:01:35.210
inside directives you can directly
manipulate this current element.

22
00:01:36.920 --> 00:01:42.565
So essentially the update will
be very fast because it doesn't

23
00:01:42.565 --> 00:01:47.590
have to go through vue's
virtual dom diffing process.

24
00:01:47.590 --> 00:01:50.720
So you will achieve slightly
better performance,

25
00:01:50.720 --> 00:01:53.350
especially when you're dynamically
switching between languages.

26
00:01:54.480 --> 00:01:56.800
But it's really just an API difference.

27
00:01:56.800 --> 00:02:02.083
And the limitation of the directive
based internationalization

28
00:02:02.083 --> 00:02:05.546
is you won't be able to use it everywhere.

29
00:02:05.546 --> 00:02:09.596
And in some cases you still need to
use $t in cases where directive just

30
00:02:09.596 --> 00:02:12.630
simply won't work, for
example, in JavaScript.

31
00:02:14.150 --> 00:02:20.320
And the final approach,
which is sort of out of scope of this but

32
00:02:20.320 --> 00:02:23.990
let's look at this piece of information.

33
00:02:23.990 --> 00:02:28.980
As I talked about earlier, templates are
static so they're very easy to analyze.

34
00:02:28.980 --> 00:02:30.745
So it's possible to, say,

35
00:02:30.745 --> 00:02:35.390
inside vue-loader we can add
a vue-loader compilation plugin.

36
00:02:35.390 --> 00:02:38.310
So there is this hidden feature
in vue-loader that allows you to

37
00:02:38.310 --> 00:02:41.880
inject custom template compilation modules

38
00:02:41.880 --> 00:02:46.410
to allow you to do transforms of
vue templates at compile time.

39
00:02:46.410 --> 00:02:54.148
So Kazupon actually wrote a plugin that
analyzed the template at compile time and

40
00:02:54.148 --> 00:03:00.090
find references to $t inside
the template and compile them.

41
00:03:00.090 --> 00:03:07.160
Basically replace them with the correct
localized text at compile time,

42
00:03:07.160 --> 00:03:13.490
then he builds three different
versions of his app and deployed them.

43
00:03:13.490 --> 00:03:17.200
So instead of dynamically
switching between it at run time,

44
00:03:17.200 --> 00:03:22.030
he has three static versions
of his app all pre-compiled.

45
00:03:22.030 --> 00:03:27.245
Now this completely eliminates the run
time cost of evaluating, looking

46
00:03:27.245 --> 00:03:32.838
up the locales, and you have to ship
the locale json dictionary to the client.

47
00:03:32.838 --> 00:03:35.780
And all the extra overhead
are gone because they're all

48
00:03:36.830 --> 00:03:39.439
kind of moved to the compilation phase.

49
00:03:41.460 --> 00:03:45.400
So, this is a valid strategy if
performance is extremely important and

50
00:03:45.400 --> 00:03:49.910
you're okay with the deployment overhead
where you have to maintain three

51
00:03:49.910 --> 00:03:53.720
branches under three different URLs.

52
00:03:53.720 --> 00:03:57.150
But if performance gain is huge
then it's probably worth it.

