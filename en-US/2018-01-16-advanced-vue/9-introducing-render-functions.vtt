WEBVTT

1
00:00:00.390 --> 00:00:03.760
&gt;&gt; Evan You: So we talked about
reactivity in the first section, and

2
00:00:03.760 --> 00:00:06.200
now we're talking about random functions,
and

3
00:00:06.200 --> 00:00:09.460
random functions are essentially
the other half of the puzzle that

4
00:00:09.460 --> 00:00:14.870
completes the whole reactivity
rendering system in view itself.

5
00:00:14.870 --> 00:00:18.510
And in case you don't
know render functions,

6
00:00:18.510 --> 00:00:23.090
view templates are in fact compiled
into render functions under the hood.

7
00:00:23.090 --> 00:00:27.890
And since not everyone has used React,
we're

8
00:00:27.890 --> 00:00:32.770
gonna share some,
I guess, basic knowledge.

9
00:00:32.770 --> 00:00:38.190
So, in a view context,
when we first render a view app,

10
00:00:38.190 --> 00:00:42.290
we will first compile the template
into Render function.

11
00:00:42.290 --> 00:00:47.570
So this compilation process happens on the
fly if you are using the full build and

12
00:00:47.570 --> 00:00:50.710
your directly say using in DOM template,

13
00:00:50.710 --> 00:00:53.170
like your writing the template
directly in the DOM.

14
00:00:53.170 --> 00:00:57.500
Or you're giving the view
instance a string of templates.

15
00:00:57.500 --> 00:01:01.918
But if you're using view CLI to
scaffold a project with a build step.

16
00:01:01.918 --> 00:01:04.031
So with webpack and view loader,

17
00:01:04.031 --> 00:01:08.660
view loader actually pre-compiles
the template at built time.

18
00:01:08.660 --> 00:01:11.960
So, the code that you ship to the browser
doesn't contain the original template,

19
00:01:11.960 --> 00:01:17.510
instead it ships the compiled render
function code, which is pure JavaScript.

20
00:01:17.510 --> 00:01:21.560
So this is similar to the ALT
compilation in Angular context.

21
00:01:23.390 --> 00:01:27.370
In that it saves the long-term cost of
actually doing the compilation on the fly.

22
00:01:27.370 --> 00:01:31.926
And also, we can shift
the runtime without the compiler.

23
00:01:31.926 --> 00:01:35.880
So in view, we have two builds,
we have a full build,

24
00:01:35.880 --> 00:01:39.610
which includes a compiler,
which is close to 30 KBG zipped.

25
00:01:39.610 --> 00:01:44.180
But if you throw away the compiler
the runtime-only build is 20 KB.

26
00:01:44.180 --> 00:01:48.000
So that's like a third
size saving which is

27
00:01:48.000 --> 00:01:52.350
pretty good if you were using
ahead-of-time compilation, okay?

28
00:01:52.350 --> 00:01:56.760
So after compiled into Render Functions,
and what Render Functions

29
00:01:56.760 --> 00:02:00.180
are are essentially functions that
return virtual DOM, all right?

30
00:02:00.180 --> 00:02:04.900
And then view generates the actual
DOM based on the virtual DOM.

31
00:02:04.900 --> 00:02:08.160
And then we're gonna talk a bit
about what virtual DOM is.

32
00:02:08.160 --> 00:02:10.530
But before we do that, so

33
00:02:10.530 --> 00:02:15.480
on subsequent updates, so
notice that initial render is what

34
00:02:15.480 --> 00:02:20.730
happens if you're going back to the auto
run function that we implemented earlier.

35
00:02:20.730 --> 00:02:23.950
This is what happens inside
the auto run function, okay.

36
00:02:25.210 --> 00:02:30.190
And after this process,
during the process that we're generating

37
00:02:30.190 --> 00:02:33.160
the Virtual Dom essentially
calling the render function.

38
00:02:33.160 --> 00:02:36.300
Because the render function depends on
all these data properties on your view

39
00:02:36.300 --> 00:02:37.400
instances.

40
00:02:37.400 --> 00:02:41.100
And these data properties are reactive,
all these data properties

41
00:02:41.100 --> 00:02:44.649
are collected as dependencies of
this components render function.

42
00:02:46.120 --> 00:02:48.745
And now if any of those
dependencies change,

43
00:02:48.745 --> 00:02:52.140
what happens is the render
function will be called again.

44
00:02:52.140 --> 00:02:56.920
All right, and on subsequent updates,
the render function gets called again and

45
00:02:56.920 --> 00:02:58.870
it'll return a new virtual DOM.

46
00:03:00.710 --> 00:03:03.960
And the old virtual DOM and the new
virtual DOM will be compared and diffed.

47
00:03:05.064 --> 00:03:11.040
And eventually we apply the minimal
amount of changes to the actual DOM.

