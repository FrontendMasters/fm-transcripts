WEBVTT

1
00:00:00.400 --> 00:00:03.457
&gt;&gt; Evan You: Render functions,
this is a few component.

2
00:00:03.457 --> 00:00:08.202
And instead of giving at a template you
give render function, here's your point.

3
00:00:08.202 --> 00:00:11.842
So the render function
takes single argument h, so

4
00:00:11.842 --> 00:00:14.475
this is an aliasfor create element.

5
00:00:14.475 --> 00:00:19.475
H is just a convention because there
are a lot of different implementations

6
00:00:19.475 --> 00:00:20.674
of virtual dome.

7
00:00:20.674 --> 00:00:25.938
And they sort of have agreed on
a common API called hyperscript,

8
00:00:25.938 --> 00:00:31.313
which is a style of writing these
virtual dome render functions.

9
00:00:31.313 --> 00:00:38.883
And because html is like
hyper text transfer protocol.

10
00:00:38.883 --> 00:00:44.933
And so hyper script is a script
that produces hypertext.

11
00:00:44.933 --> 00:00:49.703
And eventually it gets shortened
to h because it's easy to type,

12
00:00:49.703 --> 00:00:52.144
it's just a convention, okay.

13
00:00:52.144 --> 00:00:54.804
So it takes three arguments.

14
00:00:54.804 --> 00:00:58.113
First, argument is the type
of the element, very obvious.

15
00:00:58.113 --> 00:00:59.896
The second is a data object.

16
00:00:59.896 --> 00:01:04.470
The render object can contain,
so nested under it.

17
00:01:04.470 --> 00:01:08.808
In React this is directly
the props object, but

18
00:01:08.808 --> 00:01:13.150
in Vue,
we nest more fields under this object.

19
00:01:13.150 --> 00:01:17.972
So props, ATRs, DOM props can each be

20
00:01:17.972 --> 00:01:21.903
nested in different objects.

21
00:01:21.903 --> 00:01:27.993
And class and style are also get
special treatment because they are so

22
00:01:27.993 --> 00:01:29.467
commonly used.

23
00:01:29.467 --> 00:01:33.635
And we have some special convenience
support for class and style.

24
00:01:33.635 --> 00:01:39.734
So for example, in templates you can
bind to class using an array on object.

25
00:01:39.734 --> 00:01:43.669
You can do that in the same in render
functions, the API is the same.

26
00:01:43.669 --> 00:01:48.648
And eventually the third argument is
just an array of more child nodes, so

27
00:01:48.648 --> 00:01:53.241
you will nest h calls inside this
array to produce more child nodes.

28
00:01:53.241 --> 00:01:57.563
So everything is just nested calls,
eventually together they return a tree of

29
00:01:57.563 --> 00:02:01.905
virtual nodes.
&gt;&gt; Evan You: And

30
00:02:01.905 --> 00:02:04.089
it's pretty versatile too.

31
00:02:04.089 --> 00:02:07.791
Notice that the second
data object is optional,

32
00:02:07.791 --> 00:02:10.966
if you don't have any data for this node.

33
00:02:10.966 --> 00:02:14.121
This is just a bare div node,
you can omit the second object and

34
00:02:14.121 --> 00:02:15.709
directly give it to children.

35
00:02:15.709 --> 00:02:19.678
And the children argument is also
pretty flexible, it can be an array or

36
00:02:19.678 --> 00:02:21.938
you can just directly give it some text.

37
00:02:21.938 --> 00:02:26.042
It will automatically
convert this text into

38
00:02:26.042 --> 00:02:29.719
a children array of virtual text nodes.

39
00:02:29.719 --> 00:02:33.858
So the first line here creates
a div with some text inside of it.

40
00:02:33.858 --> 00:02:38.630
The second one creates the same
div except it has a class of foo.

41
00:02:38.630 --> 00:02:44.062
And the third one creates
a div with some real children.

42
00:02:44.062 --> 00:02:47.582
So you can have some text
inside the children array,

43
00:02:47.582 --> 00:02:51.750
alongside it with another virtual
child node which is a span.

44
00:02:51.750 --> 00:02:58.550
So this would create something like div,
some text, span, a bar.

45
00:02:58.550 --> 00:03:05.212
So if you search for random functions in
the API docs, you will see more details.

46
00:03:05.212 --> 00:03:09.592
But this should get you through
most of the basic use cases.

47
00:03:09.592 --> 00:03:11.859
Any questions so far?
&gt;&gt; Speaker 2: So

48
00:03:11.859 --> 00:03:15.139
any time you would have text,
that would just be

49
00:03:15.139 --> 00:03:17.897
the actual text inside of there?
&gt;&gt; Evan You: Yep.

50
00:03:17.897 --> 00:03:19.738
&gt;&gt; Speaker 2: And if it was a child that

51
00:03:19.738 --> 00:03:23.892
had an object,
that would be an actual HTML element.

52
00:03:23.892 --> 00:03:24.780
&gt;&gt; Evan You: Yeah, so

53
00:03:24.780 --> 00:03:29.337
you need to create it with the h function,
yeah.

54
00:03:29.337 --> 00:03:36.526
And remember inside your render function
you would need to eventually return this

55
00:03:36.526 --> 00:03:41.641
top level element, so
that the whole tree gets returned.

56
00:03:41.641 --> 00:03:46.489
And a relatively lesser known feature of
the h function is that it can directly

57
00:03:46.489 --> 00:03:48.287
render a component as well.

58
00:03:48.287 --> 00:03:52.802
Similar to how we use custom
component tags as custom

59
00:03:52.802 --> 00:03:55.988
element tags inside our templates.

60
00:03:55.988 --> 00:03:59.532
The h,
in addition to taking string tag types,

61
00:03:59.532 --> 00:04:03.349
it can also directly take
a component definition.

62
00:04:03.349 --> 00:04:08.920
So let's say we import a component
from another view component file.

63
00:04:08.920 --> 00:04:13.436
And you can directly pass that
component into the h function.

64
00:04:13.436 --> 00:04:18.370
So that'll create a component instance,
that'll create a v node

65
00:04:18.370 --> 00:04:22.787
representing that component
instead of a normal element.

66
00:04:22.787 --> 00:04:27.323
And you can then pass
the props to that component in

67
00:04:27.323 --> 00:04:32.293
the data object as well,
let's run another feature.

68
00:04:32.293 --> 00:04:37.966
So basically this means that you no longer
have to register the component inside

69
00:04:37.966 --> 00:04:43.480
the component's option, then reference
it using the kebab case name of it.

70
00:04:43.480 --> 00:04:48.864
You can completely skip that step
when you're using render functions.

71
00:04:48.864 --> 00:04:49.901
&gt;&gt; Speaker 3: There's some questions on

72
00:04:49.901 --> 00:04:51.845
chad, I'm not sure when
you want to address them.

73
00:04:51.845 --> 00:04:52.983
&gt;&gt; Evan You: Sure, I can take questions

74
00:04:52.983 --> 00:04:53.931
now.
&gt;&gt; Speaker 3: Okay, so

75
00:04:53.931 --> 00:04:59.413
do you know any major production sites
that precompiled their templates?

76
00:04:59.413 --> 00:05:00.720
&gt;&gt; Evan You: I think almost all major

77
00:05:00.720 --> 00:05:04.449
production sites built with view
are precompiling the templates.

78
00:05:04.449 --> 00:05:09.265
Because you will be using Webpack and
Vue Loader, and if you're using that,

79
00:05:09.265 --> 00:05:13.497
you're already precompiling by default.
&gt;&gt; Speaker 3: What do you think about

80
00:05:13.497 --> 00:05:17.520
templates for functional components?
&gt;&gt; Evan You: That's something we

81
00:05:17.520 --> 00:05:19.199
are planning to support,

82
00:05:19.199 --> 00:05:23.407
but there are some edge cases that
we need to carefully evaluate.

83
00:05:23.407 --> 00:05:28.000
Because functional components do not
support everything that stateful

84
00:05:28.000 --> 00:05:29.438
components support.

85
00:05:29.438 --> 00:05:34.719
But internally we have an experimental
branch by Blake Hizarotine,

86
00:05:34.719 --> 00:05:40.467
and he's done an experimental branch
that already sort of got it working.

87
00:05:40.467 --> 00:05:45.400
It's just we have to iron out some edge
cases to make sure everything works

88
00:05:45.400 --> 00:05:50.357
smoothly as expected.
&gt;&gt; Speaker 3: Can you

89
00:05:50.357 --> 00:05:55.293
ask whether the render
function is different than

90
00:05:55.293 --> 00:05:59.654
the render object inside of view instance?

91
00:05:59.654 --> 00:06:05.034
Usually seen when I create
an app via view CLI.

92
00:06:05.034 --> 00:06:06.165
&gt;&gt; Evan You: The render object?

93
00:06:06.165 --> 00:06:07.450
&gt;&gt; Speaker 4: When you create an app,

94
00:06:07.450 --> 00:06:10.031
I can kind of help rephrase
it cuz I've seen it.

95
00:06:10.031 --> 00:06:12.993
When you create an app with
UCLI at the top level-

96
00:06:12.993 --> 00:06:14.020
[CROSSTALK]
&gt;&gt; Evan You: Right.

97
00:06:14.020 --> 00:06:16.815
&gt;&gt; Speaker 4: In the view instance there's

98
00:06:16.815 --> 00:06:20.042
a render and then h,
&gt;&gt; Evan You: Returns app, right,

99
00:06:20.042 --> 00:06:22.692
yeah.
&gt;&gt; Speaker 4: And h app yeah, so I think

100
00:06:22.692 --> 00:06:26.535
that's exactly what you're describing
&gt;&gt; Evan You: So

101
00:06:26.535 --> 00:06:30.452
that's a render function, and it's just
using the arrow function shorthand.

102
00:06:30.452 --> 00:06:35.114
Instead of doing the full
render return it's just

103
00:06:35.114 --> 00:06:38.999
directly returning another component.

104
00:06:38.999 --> 00:06:42.946
This is also a very common pattern,
which we will in fact talk about later.

105
00:06:42.946 --> 00:06:47.183
That a component can return another
component as it's own root node.

106
00:06:47.183 --> 00:06:51.506
So this outer component doesn't
render anything of it's ow,

107
00:06:51.506 --> 00:06:54.859
iInstead it simply renders
another component.

108
00:06:54.859 --> 00:06:56.957
So this is like a shell component, but

109
00:06:56.957 --> 00:06:59.986
this shell component can
do some interesting things.

110
00:06:59.986 --> 00:07:02.846
And in the case of the root instance,

111
00:07:02.846 --> 00:07:06.641
in the view CI template
we let the root instance.

112
00:07:06.641 --> 00:07:11.373
We want to separate the responsibility of
the root instance because we do inject

113
00:07:11.373 --> 00:07:13.431
stores routers at the root level.

114
00:07:13.431 --> 00:07:18.038
Also the root instance
cannot be hot reloaded, so

115
00:07:18.038 --> 00:07:21.225
that's a technical limitation.

116
00:07:21.225 --> 00:07:26.047
So by separating the root instance
with your app component that allows

117
00:07:26.047 --> 00:07:28.834
our app component to be hot reloadable.

118
00:07:28.834 --> 00:07:32.844
So when you edit the app.vue file,
you will see hot reloads.

119
00:07:32.844 --> 00:07:35.705
But if you edit the root instance itself,

120
00:07:35.705 --> 00:07:38.746
then you have to manually
reload your page.

121
00:07:38.746 --> 00:07:42.310
So that's just also a development
experience concern.

