WEBVTT

1
00:00:00.560 --> 00:00:04.721
&gt;&gt; Evan You: So there's a question in the
chats which asks can we have logic that

2
00:00:04.721 --> 00:00:06.587
fetch the avatar Alon Mixin.

3
00:00:06.587 --> 00:00:08.137
Which is a good question,

4
00:00:08.137 --> 00:00:12.936
because it's more common to do this kind
of things with Mixins in the View world.

5
00:00:12.936 --> 00:00:16.774
The benefits of using
a higher order component here

6
00:00:16.774 --> 00:00:21.515
is that you don't really pollute
the inner avatar component.

7
00:00:21.515 --> 00:00:26.089
The inner avatar component can
be used in other contexts.

8
00:00:26.089 --> 00:00:31.727
It can be enhanced by
a different enhancer.

9
00:00:31.727 --> 00:00:38.210
So in this sense, higher order components
offer a bit more reusability, but

10
00:00:38.210 --> 00:00:43.712
if that's not a concern,
then using Mixins are perfectly fine.

11
00:00:43.712 --> 00:00:46.440
Like you know this component
is only used in this project.

12
00:00:46.440 --> 00:00:50.546
And it's a very specific
task that's specifically for

13
00:00:50.546 --> 00:00:53.787
this project and mixings are totally fine.

14
00:00:53.787 --> 00:00:59.249
But higher order components in theory
provides a higher level of reusability,

15
00:00:59.249 --> 00:01:04.548
especially like in when you want to reuse
the inner component as many places as

16
00:01:04.548 --> 00:01:09.607
possible.
&gt;&gt; Evan You: And

17
00:01:09.607 --> 00:01:16.115
another advantage is this makes
the inner component more testable

18
00:01:16.115 --> 00:01:21.240
because it doesn't have
any logic coupled with it.

19
00:01:21.240 --> 00:01:27.213
And you can test the and
the inner component separately.

20
00:01:27.213 --> 00:01:32.144
Instead with a Mixin you sort of have
this only one component that does both in

21
00:01:32.144 --> 00:01:33.158
the same time.

22
00:01:33.158 --> 00:01:36.650
So you either test both at the same time,
or

23
00:01:36.650 --> 00:01:40.052
then you have a harder time of testing it.

24
00:01:40.052 --> 00:01:43.762
Testing the two parts, the rendering and
the data fetching logic separately.

25
00:01:43.762 --> 00:01:49.232
So I would say this offers a better
separation of concern as well,

26
00:01:49.232 --> 00:01:52.314
but I wouldn't really recommend for

27
00:01:52.314 --> 00:01:57.395
using higher order components just for
the sake of using it.

28
00:01:57.395 --> 00:02:01.513
It's really about realizing what
the problems you're trying to solve.

29
00:02:01.513 --> 00:02:05.707
Does it actually make it better for
your case?

30
00:02:05.707 --> 00:02:10.350
And sometimes Mixin can really
just be more, easier to grasp,

31
00:02:10.350 --> 00:02:15.257
because when you have too many high
order components the component

32
00:02:15.257 --> 00:02:17.988
hierarchy becomes really complex.

33
00:02:17.988 --> 00:02:23.404
And it can become harder to find out
which responsibility falls where and

34
00:02:23.404 --> 00:02:28.021
figuring out how of all these
are stacked together and

35
00:02:28.021 --> 00:02:30.706
how they interact with each other.

36
00:02:30.706 --> 00:02:36.314
And also when you have multiple
layers you need to be intentional,

37
00:02:36.314 --> 00:02:39.526
you have to pass a lot
of props down the way.

38
00:02:39.526 --> 00:02:43.881
And having more nested components
also have some performance costs,

39
00:02:43.881 --> 00:02:47.737
cuz you're now having more
component instances in your app.

40
00:02:47.737 --> 00:02:50.361
And more communication of your props.

41
00:02:50.361 --> 00:02:54.277
All of these are overheads that
you can avoid by using Mixins.

42
00:02:54.277 --> 00:02:58.562
So you, yeah, know the pros and
cons of both approaches and

43
00:02:58.562 --> 00:03:01.230
pick the one that fits your use case.

