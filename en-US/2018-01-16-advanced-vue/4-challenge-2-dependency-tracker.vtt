WEBVTT

1
00:00:00.390 --> 00:00:04.280
&gt;&gt; Evan You: We're gonna try to walk
through the solution a little bit.

2
00:00:04.280 --> 00:00:10.030
So, if you've followed up until here,
we kind of understand that

3
00:00:11.220 --> 00:00:16.970
all of this does is making sure that
when this inner update function executes

4
00:00:16.970 --> 00:00:22.020
our dependency class can actually have
access to the current active update.

5
00:00:22.020 --> 00:00:24.090
That's the whole point, right?

6
00:00:24.090 --> 00:00:29.510
So, now that we have a grab of the current
update or function that's being executed,

7
00:00:29.510 --> 00:00:35.700
we will register that of the function
as a subscriber to this dependency.

8
00:00:35.700 --> 00:00:43.770
So we'll just add that active
update into our subscriber list.

9
00:00:43.770 --> 00:00:44.500
Right?

10
00:00:44.500 --> 00:00:48.670
So, as you can see, okay,
we'll talk about that later,

11
00:00:48.670 --> 00:00:51.290
but inside notify this is
actually pretty straightforward.

12
00:00:53.110 --> 00:00:55.410
ESX also has the for each function, so

13
00:00:55.410 --> 00:01:00.000
we can just take the subscriber
function and just invoke it.

14
00:01:00.000 --> 00:01:00.680
That's pretty much it.

15
00:01:01.900 --> 00:01:04.190
So this is actually
the whole implementation.

16
00:01:05.210 --> 00:01:13.220
So, one thing to note here,
is why are we using this wrapped update?

17
00:01:13.220 --> 00:01:16.190
We are registering the wrapped
update as the active update.

18
00:01:16.190 --> 00:01:22.490
So that when our dependency changes and
the update function is called again,

19
00:01:22.490 --> 00:01:26.710
we're, in fact,
calling this again, so that this

20
00:01:27.900 --> 00:01:33.290
little dependency tracking trick is
still working on future iterations.

21
00:01:33.290 --> 00:01:35.480
So it keeps collecting dependencies.

22
00:01:35.480 --> 00:01:37.740
So this is important
because in some cases,

23
00:01:37.740 --> 00:01:40.750
our updated function might
contain conditionals.

24
00:01:40.750 --> 00:01:44.630
So, one variable is true,
it might collect this dependencies and

25
00:01:44.630 --> 00:01:48.040
when the variable is flipped,
it might collect another dependency.

26
00:01:48.040 --> 00:01:51.130
So, in fact our dependency
collecting system

27
00:01:51.130 --> 00:01:56.270
needs to be dynamically
re-balancing these dependencies to

28
00:01:56.270 --> 00:01:59.000
make sure the dependency
list is always up to date.

29
00:01:59.000 --> 00:02:02.810
So, our implementation, although
working for our test case, in fact,

30
00:02:02.810 --> 00:02:08.760
misses some edge cases, for example,

31
00:02:08.760 --> 00:02:12.270
we need to clean up stale dependencies.

32
00:02:13.310 --> 00:02:16.770
So if the execution no longer
depends on a certain dependency,

33
00:02:16.770 --> 00:02:18.000
we need to actually clean it up.

34
00:02:18.000 --> 00:02:20.810
This is not accounted for
in this simple implementation.

35
00:02:20.810 --> 00:02:26.100
And then, there's the question of
how to deal with the raise, right?

36
00:02:26.100 --> 00:02:30.180
And the question of how to deal
with newly added properties.

37
00:02:30.180 --> 00:02:35.910
So, these are much more complex questions,
and if you're interested,

38
00:02:35.910 --> 00:02:38.900
you should probably read the source
code of Vue to figure that out.

39
00:02:38.900 --> 00:02:43.940
But due to the time here, we're gonna
move on with this simple version of it.

