WEBVTT

1
00:00:00.360 --> 00:00:03.270
&gt;&gt; Evan You: Our exercise is gonna
leverage these knowledge and

2
00:00:03.270 --> 00:00:04.300
write a simple plugin.

3
00:00:04.300 --> 00:00:05.730
Let's go into the repository.

4
00:00:05.730 --> 00:00:11.135
We can close the first directory now and
go into Plugin,

5
00:00:11.135 --> 00:00:17.377
and go into [INAUDIBLE]
&gt;&gt; Evan You: [COUGH] And

6
00:00:17.377 --> 00:00:21.712
our goal is to create
a plugin that teaches Vue

7
00:00:21.712 --> 00:00:26.730
components to handle
a custom rules option.

8
00:00:26.730 --> 00:00:30.219
The rules option expects an object
that specifies validation rules for

9
00:00:30.219 --> 00:00:31.388
data in the component.

10
00:00:34.689 --> 00:00:37.710
&gt;&gt; Evan You: So notice this usage example.

11
00:00:37.710 --> 00:00:41.380
This rules option doesn't
exist in Vue's own API.

12
00:00:41.380 --> 00:00:43.120
It's completely custom.

13
00:00:43.120 --> 00:00:47.010
If you just add this to
a vanilla Vue component,

14
00:00:47.010 --> 00:00:49.600
it doesn't do anything,
Vue will just ignore it.

15
00:00:49.600 --> 00:00:51.675
But it doesn't complain about it.

16
00:00:51.675 --> 00:00:58.820
But if inside this
component's created hook, and

17
00:00:58.820 --> 00:01:05.220
you try to do this.$options.rules,
you actually get this object here.

18
00:01:07.780 --> 00:01:08.480
Right?

19
00:01:08.480 --> 00:01:13.330
So, this provides us with
an interesting opportunity

20
00:01:13.330 --> 00:01:17.480
to do things to [INAUDIBLE]
Based on this custom option.

21
00:01:18.670 --> 00:01:23.670
And understand, we don't want the
consumers of our plugin to always have to

22
00:01:23.670 --> 00:01:28.280
manually create this hook in
order to access this thing.

23
00:01:28.280 --> 00:01:32.018
So, we can abstract this
away inside of Mixin.

24
00:01:32.018 --> 00:01:33.360
Right?

25
00:01:33.360 --> 00:01:38.450
So, const myMixin equals this.

26
00:01:40.060 --> 00:01:43.049
And what we can do is,
inside this mixing we can check for

27
00:01:43.049 --> 00:01:44.966
the existence of this custom rule.

28
00:01:47.386 --> 00:01:49.733
&gt;&gt; Evan You: If this rule exists,
we can do something about it.

29
00:01:52.792 --> 00:01:53.922
&gt;&gt; Evan You: Right?

30
00:01:53.922 --> 00:01:58.527
And going further,
if we apply this mixing globally.

31
00:02:00.843 --> 00:02:05.762
&gt;&gt; Evan You: We've essentially taught
every Vue instance how to deal

32
00:02:05.762 --> 00:02:09.568
with this custom rules option, all right?

33
00:02:09.568 --> 00:02:14.224
And going one step further, if we
take this global mixing operation and

34
00:02:14.224 --> 00:02:18.974
put it inside a plugin
&gt;&gt; Evan You: So

35
00:02:18.974 --> 00:02:23.050
view plug-ins can be just a function.

36
00:02:24.850 --> 00:02:26.113
So the simplest form is just this.

37
00:02:38.270 --> 00:02:42.050
&gt;&gt; Evan You: Okay, so sometimes your
plug-in can Can also take the more verbose

38
00:02:42.050 --> 00:02:45.182
object formats,
which exposes the install function.

39
00:02:47.585 --> 00:02:51.490
&gt;&gt; Evan You: This is essentially the same
thing, just alternative interface.

40
00:02:52.800 --> 00:03:01.640
Okay, so this is how we This is
the boil plate for creating a plugin.

41
00:03:01.640 --> 00:03:04.070
When you call view, don't use this plugin.

42
00:03:04.070 --> 00:03:10.480
It'll apply this global mixing which
will teach every view instance created

43
00:03:10.480 --> 00:03:17.300
after that point, they will invoke this
creative hook when they're created, And

44
00:03:17.300 --> 00:03:23.200
then we'll execute our code of checking
for this custom rules option, okay?

45
00:03:23.200 --> 00:03:27.693
So, the exercise wants us to implement

46
00:03:27.693 --> 00:03:32.740
the plug-in that knows how to handle this.

47
00:03:34.730 --> 00:03:37.270
Okay.
So the end effect is, if we provide these

48
00:03:37.270 --> 00:03:42.110
rules, so the rules are essentially saying
for the property full Which is here.

49
00:03:43.260 --> 00:03:45.100
We will have a validator function.

50
00:03:45.100 --> 00:03:50.000
This validator function will
be run every time foo changes.

51
00:03:50.000 --> 00:03:53.500
And if it doesn't,
it fails the validation,

52
00:03:53.500 --> 00:03:57.108
we'll log this message to the console,
okay?

53
00:03:58.514 --> 00:04:02.257
&gt;&gt; Evan You: And essentially What
you need to fill in is this part.

54
00:04:04.572 --> 00:04:07.190
&gt;&gt; Evan You: And
there are some hints at the end too.

