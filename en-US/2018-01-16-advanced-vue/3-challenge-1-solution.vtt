WEBVTT

1
00:00:00.600 --> 00:00:04.146
&gt;&gt; Evan You: If you want to check
out the reference implementation,

2
00:00:04.146 --> 00:00:08.145
what you can do is first save
your current work, commit it, and

3
00:00:08.145 --> 00:00:14.293
then do git checkout solutions.
&gt;&gt; Evan You: And this

4
00:00:14.293 --> 00:00:18.800
will put you in a branch where everything
is completely implemented for you.

5
00:00:18.800 --> 00:00:22.760
So you can reference what it is doing.

6
00:00:24.510 --> 00:00:27.800
So yeah this actually is
pretty straightforward.

7
00:00:27.800 --> 00:00:34.100
So we first use object.keys to get a list
of the current existing properties,

8
00:00:34.100 --> 00:00:36.810
and then we iterate
through that keys array.

9
00:00:36.810 --> 00:00:40.606
And for each key,
we get a closure here, right?

10
00:00:40.606 --> 00:00:45.640
So that gives us some opportunity
to just store this, oops!

11
00:00:45.640 --> 00:00:48.630
To store this variable
here inside this closure.

12
00:00:48.630 --> 00:00:50.770
This is the internal value.

13
00:00:50.770 --> 00:00:56.510
And remember to assign it to the initial
value of that original property,

14
00:00:56.510 --> 00:00:59.460
otherwise, you get undefined
on the first access.

15
00:00:59.460 --> 00:01:02.720
And then we use definedProperty
to override it.

16
00:01:02.720 --> 00:01:07.470
So I'm omitting all the extra
innumerable staff here but

17
00:01:07.470 --> 00:01:11.850
remember to think about them for
your use cases in real applications.

18
00:01:11.850 --> 00:01:17.060
And then inside the get, we simply log
the internal value, view the get access,

19
00:01:17.060 --> 00:01:18.189
and return the internalValue.

20
00:01:19.530 --> 00:01:21.870
This will retain the original
access behavior.

21
00:01:21.870 --> 00:01:25.590
And inside the set, we'll just set
the internal value into the new value and

22
00:01:25.590 --> 00:01:28.600
lock the set operation.

23
00:01:28.600 --> 00:01:32.638
Switch back to the master branch, so
that you don't see the solutions for

24
00:01:32.638 --> 00:01:37.682
the next exercise.
&gt;&gt; Evan You: And

25
00:01:37.682 --> 00:01:40.614
then open 1.2.md.

26
00:01:42.790 --> 00:01:49.187
So now we're getting into something
called dependency tracking, okay?

27
00:01:49.187 --> 00:01:50.880
So dependencies.

28
00:01:50.880 --> 00:01:54.820
So how do we abstract
the concept of a dependency?

29
00:01:54.820 --> 00:01:56.710
Let's just create a class, okay?

30
00:01:56.710 --> 00:02:00.210
Let's create a class called dep.

31
00:02:00.210 --> 00:02:04.720
And this class will have two methods,
depend and notify.

32
00:02:07.010 --> 00:02:11.050
Depend means the current
code that's executing

33
00:02:11.050 --> 00:02:14.190
depends on this dependency, all right?

34
00:02:14.190 --> 00:02:17.280
And notify means this
dependency has changed.

35
00:02:17.280 --> 00:02:21.860
So any previous expressions, computations,

36
00:02:21.860 --> 00:02:25.720
functions that have previously depended

37
00:02:25.720 --> 00:02:31.200
on the step should be re-executed,
they should be notified.

38
00:02:31.200 --> 00:02:35.930
What this means is we need to
find a way to associate a piece,

39
00:02:35.930 --> 00:02:40.260
a function or
a piece of expression or computation,

40
00:02:40.260 --> 00:02:45.010
I would call it associated
computation to dependency.

41
00:02:45.010 --> 00:02:48.330
And this computation should probably

42
00:02:48.330 --> 00:02:53.450
be considered something like
a subscriber of this dependency, right?

43
00:02:53.450 --> 00:02:58.480
So that's how the dependency class works,

44
00:02:58.480 --> 00:03:00.910
and then we will have another
function called autorun.

45
00:03:01.940 --> 00:03:07.301
And what this autorun function facilitates
is that it'll take an update function or

46
00:03:07.301 --> 00:03:11.560
an updater function or
a computation, as I would call it.

47
00:03:11.560 --> 00:03:15.870
So this update function,
when you enter this updater function,

48
00:03:15.870 --> 00:03:17.190
everything becomes special.

49
00:03:17.190 --> 00:03:19.670
We're in the reactive zone.

50
00:03:19.670 --> 00:03:25.250
So when you're inside this reactive zone,
you're able to register dependencies.

51
00:03:25.250 --> 00:03:28.000
So let's take a look at how
that would actually work.

52
00:03:28.000 --> 00:03:32.550
So the expect usage looks like this,
right?

53
00:03:32.550 --> 00:03:37.080
So we'll have the dep class, we'll create
an instance of the dep class called dep.

54
00:03:37.080 --> 00:03:39.910
So this represents a dependency.

55
00:03:39.910 --> 00:03:43.190
And then we'll autorun a computation, and

56
00:03:43.190 --> 00:03:48.150
all it does is, the side effect we're
producing is just a console.log, okay?

57
00:03:48.150 --> 00:03:50.950
But the important thing here is,
inside this computation,

58
00:03:50.950 --> 00:03:54.270
we're calling dep.depend, which

59
00:03:55.790 --> 00:04:00.519
associates this function, this
computation to this specific dependency.

60
00:04:02.180 --> 00:04:06.850
So we're essentially adding this function
into the subscriber list of this

61
00:04:06.850 --> 00:04:08.930
dep, okay?

62
00:04:08.930 --> 00:04:12.819
And later on,
when you call dep.notify anywhere else,

63
00:04:12.819 --> 00:04:16.510
it doesn't need to be inside autorun or
anything.

64
00:04:16.510 --> 00:04:18.194
When you call dep.notify,

65
00:04:18.194 --> 00:04:23.096
this function will be called again.
&gt;&gt; Evan You: Does

66
00:04:23.096 --> 00:04:26.575
that make sense?
&gt;&gt; Evan You: So

67
00:04:26.575 --> 00:04:29.080
the API is actually pretty simple.

68
00:04:29.080 --> 00:04:33.450
All you need to do is
create the dep class and

69
00:04:33.450 --> 00:04:36.030
the autorun function that
makes this code possible.

70
00:04:37.740 --> 00:04:40.924
So similarly, you can run tests with this.

71
00:04:40.924 --> 00:04:47.180
And if you look at the file,
the boiler plate is pretty simple,

72
00:04:47.180 --> 00:04:51.660
we just ask you to implement this.

73
00:04:51.660 --> 00:04:55.460
It takes a little bit of a trick.

74
00:04:55.460 --> 00:05:00.800
So let's working on this in ten minutes,
I think.

75
00:05:00.800 --> 00:05:03.870
I'll try to see how everyone is doing and

76
00:05:03.870 --> 00:05:07.580
provide some hints as we go
half through the time, okay?

77
00:05:09.000 --> 00:05:14.370
So now I'm going to provide some
hints on how this might work.

78
00:05:14.370 --> 00:05:19.380
So the idea here is we want
to associate an instance of

79
00:05:19.380 --> 00:05:27.100
a dependency to a computation.

80
00:05:27.100 --> 00:05:32.860
So the catch here is this update
function now we're taking in here,

81
00:05:32.860 --> 00:05:37.350
in fact, can be stored somewhere as well.

82
00:05:37.350 --> 00:05:39.450
It's a variable, right?

83
00:05:39.450 --> 00:05:40.740
Functions are variables.

84
00:05:42.290 --> 00:05:47.247
So what we can do is let's
have something like a global

85
00:05:47.247 --> 00:05:51.410
variable called activeUpdate, right?

86
00:05:51.410 --> 00:05:54.780
Because in JavaScript,
JavaScript is single threaded.

87
00:05:54.780 --> 00:06:00.220
At any given time, only one function
can be currently executing, right?

88
00:06:00.220 --> 00:06:04.590
So if we create a function

89
00:06:04.590 --> 00:06:08.800
that marks itself as the function
that is currently being executed,

90
00:06:09.940 --> 00:06:15.290
then we can know any time whether
this function is currently running.

91
00:06:15.290 --> 00:06:19.750
So now we know if we're inside this
function, does that make sense?

92
00:06:19.750 --> 00:06:24.387
So let's say we have this function called

93
00:06:24.387 --> 00:06:30.644
wrappedUpdate,
&gt;&gt; Evan You: And

94
00:06:30.644 --> 00:06:34.916
inside wrappedUpdate,
we call the original update, okay?

95
00:06:34.916 --> 00:06:37.900
So this is equivalent.

96
00:06:37.900 --> 00:06:42.450
What we want to do is
we want to know whether

97
00:06:42.450 --> 00:06:47.620
we are inside this inner update function.

98
00:06:47.620 --> 00:06:52.571
And the way we can do that is do,

99
00:06:52.571 --> 00:06:58.100
activeUpdate = wrappedUpdate.

100
00:07:05.987 --> 00:07:08.850
&gt;&gt; Evan You: So let's think about what we

101
00:07:08.850 --> 00:07:11.002
have achieved here.

102
00:07:11.002 --> 00:07:13.912
Whenever we call wrappedUpdate and

103
00:07:13.912 --> 00:07:19.247
the code inside this update
function executes, any functions or

104
00:07:19.247 --> 00:07:24.388
any code being called to execute
inside this update function,

105
00:07:24.388 --> 00:07:29.820
they're guaranteed to be able to
access this outer wrappedUpdate

106
00:07:29.820 --> 00:07:34.090
function viewed as
activeUpdate global variable.

107
00:07:35.470 --> 00:07:39.663
So if we do this, and let's say autorun

108
00:07:39.663 --> 00:07:48.230
a function,
&gt;&gt; Evan You: So

109
00:07:48.230 --> 00:07:53.877
now we can check activeUpdate here, right?

110
00:07:53.877 --> 00:07:57.641
This activeUpdate will
always be pointing to

111
00:07:57.641 --> 00:08:01.810
the wrappedUpdate that's created for
this one.

112
00:08:04.810 --> 00:08:10.170
Does that make sense?
&gt;&gt; Evan You: So

113
00:08:10.170 --> 00:08:15.868
this variable will always

114
00:08:15.868 --> 00:08:21.049
point to something that

115
00:08:21.049 --> 00:08:25.780
references this.

116
00:08:25.780 --> 00:08:31.770
But what's more important is when
we call dep.depend here, right?

117
00:08:31.770 --> 00:08:36.450
Even inside the dep class,
we can check the activeUpdate as well.

118
00:08:38.360 --> 00:08:46.806
So inside the dep's implementation,
&gt;&gt; Evan You: Remember,

119
00:08:46.806 --> 00:08:50.344
we're calling dep.depend
inside the autorun, and

120
00:08:50.344 --> 00:08:53.340
we're essentially calling it inside here.

121
00:08:53.340 --> 00:08:56.263
And because we're calling here,

122
00:08:56.263 --> 00:09:00.707
this activeUpdate would
have been set to this, so,

123
00:09:07.605 --> 00:09:12.310
&gt;&gt; Evan You: if (activeUpdate), we need to

124
00:09:12.310 --> 00:09:17.350
register the current active update

125
00:09:17.350 --> 00:09:24.153
as a subscriber.
&gt;&gt; Evan You: And

126
00:09:24.153 --> 00:09:31.192
what the notify function
does is run all subscriber

127
00:09:31.192 --> 00:09:38.518
functions.
&gt;&gt; Evan You: What

128
00:09:38.518 --> 00:09:43.483
this means is this dep class
probably needs an instant property

129
00:09:43.483 --> 00:09:46.300
to store its subscribers, right?

130
00:09:47.660 --> 00:09:52.762
Let's create a constructor,
&gt;&gt; Evan You: So

131
00:09:52.762 --> 00:09:56.905
we can use an array but
array requires some.

132
00:09:56.905 --> 00:10:02.944
So we'll use the ES Set, which is easier,
&gt;&gt; Evan You: Okay?

133
00:10:02.944 --> 00:10:06.954
So, essentially,
&gt;&gt; Evan You: What

134
00:10:06.954 --> 00:10:08.620
you need to do is fill in the rest.

