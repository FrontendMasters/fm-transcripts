WEBVTT

1
00:00:00.030 --> 00:00:03.600
&gt;&gt; Evan: So
this outer component basically becomes,

2
00:00:03.600 --> 00:00:06.180
it doesn't render anything of it's own,
right?

3
00:00:06.180 --> 00:00:12.520
Which is interesting, like, we can do more
things in this component actually, right?

4
00:00:12.520 --> 00:00:17.680
So this leads us into the next topic which
is pretty common in the React world.

5
00:00:17.680 --> 00:00:21.280
It's a concept called
higher-order components, okay?

6
00:00:21.280 --> 00:00:26.820
So it sounds pretty fancy how many of you
have heard of like, high order functions?

7
00:00:28.590 --> 00:00:29.650
Yeah.
So,

8
00:00:29.650 --> 00:00:35.370
in functional programming you have this
sort of, you have a original function,

9
00:00:35.370 --> 00:00:41.680
you can take that function compose it
to return a higher order function.

10
00:00:41.680 --> 00:00:47.450
Which does additional things, but it still
utilizes the original function internally.

11
00:00:47.450 --> 00:00:52.615
But that's pretty abstract, so
let's try to think about what

12
00:00:52.615 --> 00:00:58.250
a high order component could be in a,
in a more practical case.

13
00:00:58.250 --> 00:01:02.346
So let's imagine we have a,
let's go into 2.3, and

14
00:01:02.346 --> 00:01:07.480
we can see that
&gt;&gt; Evan: We have this Avatar component.

15
00:01:08.530 --> 00:01:09.410
This is a very,

16
00:01:09.410 --> 00:01:16.290
very simple component in that its sole
responsibility is rendering some template.

17
00:01:16.290 --> 00:01:20.660
But in real word use cases,
you might have additional things.

18
00:01:20.660 --> 00:01:23.020
For example,
you have styling associated with it.

19
00:01:23.020 --> 00:01:25.410
You have a more complex styling structure.

20
00:01:25.410 --> 00:01:28.690
But eventually you want to hide this
all away, abstract the inside of

21
00:01:28.690 --> 00:01:31.960
this nicely reusable avatar
component that you can use anywhere.

22
00:01:33.180 --> 00:01:36.960
And then, when you use it,
the downside is,

23
00:01:36.960 --> 00:01:39.790
this avatar component is not that smart.

24
00:01:39.790 --> 00:01:44.596
It expects you to give this full URL to
the image that it should be displaying

25
00:01:44.596 --> 00:01:48.862
which isn't super nice.

26
00:01:48.862 --> 00:01:51.170
Like, in some cases, for

27
00:01:51.170 --> 00:01:55.100
example, you are working with a system
where you only have the user name.

28
00:01:55.100 --> 00:02:01.270
And then you need to call an API to figure
out what the avatar URL for that user is.

29
00:02:01.270 --> 00:02:05.520
Then eventually you need to pass
it to this avatar component.

30
00:02:05.520 --> 00:02:11.300
If you put that logic inside a parent
component that is using avatar,

31
00:02:11.300 --> 00:02:14.670
you're essentially polluting this parent
component with some logic that it should

32
00:02:14.670 --> 00:02:16.870
not really be concerned about with.

33
00:02:16.870 --> 00:02:21.638
Right, and this logic is going to
be re-used in a lot places in your

34
00:02:21.638 --> 00:02:26.420
app because you don't want to be
always passing a full, long URL.

35
00:02:26.420 --> 00:02:31.890
You want to just, what you want is
something like this, a smart component.

36
00:02:33.170 --> 00:02:35.470
All you need to give it is the username.

37
00:02:35.470 --> 00:02:39.820
And it figures out what the URL for
this avatar should be and

38
00:02:39.820 --> 00:02:43.630
then pass it into this internal
avatar component for you.

39
00:02:43.630 --> 00:02:48.730
So this smart avatar is
essentially a component that

40
00:02:48.730 --> 00:02:53.935
abstracts away some repetitive logic,
it separates

41
00:02:53.935 --> 00:02:58.720
that from both the parent context and
this inner component.

42
00:02:58.720 --> 00:03:01.430
So a very dedicated
piece of responsibility.

43
00:03:01.430 --> 00:03:03.700
This inner component is now very,
very dumb.

44
00:03:03.700 --> 00:03:07.110
It doesn't care about any logic
it just takes some props and

45
00:03:07.110 --> 00:03:11.940
render it outer context is also
unaware of anything going on.

46
00:03:11.940 --> 00:03:13.550
All it knows is I use this component.

47
00:03:13.550 --> 00:03:14.380
Give it a user name.

48
00:03:14.380 --> 00:03:16.060
It will do the right thing.

49
00:03:16.060 --> 00:03:19.340
So this is a very nice
encapsulation mechanism.

50
00:03:20.630 --> 00:03:27.230
It's like composing different layers
of responsibility with components.

51
00:03:27.230 --> 00:03:31.240
Which is why this pattern has become
very popular in the react world,

52
00:03:31.240 --> 00:03:35.940
because naturally, random functions
are closer to functional programming and

53
00:03:35.940 --> 00:03:37.990
makes these patterns shine.

54
00:03:37.990 --> 00:03:41.040
But because Vue can use random functions,
so

55
00:03:41.040 --> 00:03:45.860
there's really nothing preventing you
from applying the same technique in

56
00:03:45.860 --> 00:03:51.090
a Vue context if you really
enjoy this kind of composition.

57
00:03:51.090 --> 00:03:54.800
So, let's take a look at our exercise.

58
00:03:54.800 --> 00:03:57.770
We have a mocked API function here.

59
00:03:58.840 --> 00:04:01.560
All it does is it takes a username and

60
00:04:01.560 --> 00:04:05.010
gives you back an avatar
URL inside a callback.

61
00:04:05.010 --> 00:04:10.080
And it fakes it with a 500 millisecond,
delay.

62
00:04:10.080 --> 00:04:12.500
And it always give you the same
URL which is the view logo.

63
00:04:13.600 --> 00:04:16.930
So it doesn't really matter
what username you passed in.

64
00:04:16.930 --> 00:04:20.380
It's just for faking an API call.

65
00:04:20.380 --> 00:04:22.190
And now we have this
base avatar component.

66
00:04:23.330 --> 00:04:24.350
Okay.

67
00:04:24.350 --> 00:04:27.280
And then we have this
smart avatar component

68
00:04:27.280 --> 00:04:30.550
which we use like this
inside our roots is this.

69
00:04:31.670 --> 00:04:33.680
We've setup everything else for you.

70
00:04:33.680 --> 00:04:37.790
What you need to implement this
function called withAvatarURL.

71
00:04:37.790 --> 00:04:42.321
This is something more like so
called component enhancer or

72
00:04:42.321 --> 00:04:49.300
if you enable something like decorators.

73
00:04:49.300 --> 00:04:53.150
You can actually do something like this,

74
00:04:53.150 --> 00:04:59.880
which uses this function as a decorator so

75
00:04:59.880 --> 00:05:04.790
you don't have to call
this something like that.

76
00:05:04.790 --> 00:05:10.200
But eventually what
this does is it returns

77
00:05:11.950 --> 00:05:15.640
another component which
is here at smart avatar.

78
00:05:15.640 --> 00:05:18.240
So it's essentially
returning another component.

79
00:05:18.240 --> 00:05:21.810
And that component,
this smart avatar component,

80
00:05:21.810 --> 00:05:27.050
should be internally
rendering this at its root.

81
00:05:27.050 --> 00:05:32.530
But it should maintain
the logic of taking its

82
00:05:32.530 --> 00:05:37.540
username prompt, go to the API,
find out the avatar for the, in the URL.

83
00:05:37.540 --> 00:05:40.416
Pass it on to the inner avatar component.

84
00:05:40.416 --> 00:05:45.386
And also between the time where you're
sending out the API and waiting for

85
00:05:45.386 --> 00:05:48.186
to come back you should

86
00:05:48.186 --> 00:05:50.986
be rendering the inner avatar
component with the placeholder image.

