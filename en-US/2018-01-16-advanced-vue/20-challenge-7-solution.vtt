WEBVTT

1
00:00:00.329 --> 00:00:06.124
&gt;&gt; Evan: The idea is, [COUGH] our
smart avatar is a stateful component,

2
00:00:06.124 --> 00:00:10.916
so it can hold some state,
it can be responsible for

3
00:00:10.916 --> 00:00:16.488
counting the API, and
will do that in its lifecycle hooks,

4
00:00:16.488 --> 00:00:21.626
right?
&gt;&gt; Evan: So the width after your

5
00:00:21.626 --> 00:00:28.690
URL should return the smart avatar itself,
in this case we use object syntax.

6
00:00:28.690 --> 00:00:33.819
The first thing we do is instead
accepting source as a prop,

7
00:00:33.819 --> 00:00:37.316
we accept user name as prop, all right?

8
00:00:37.316 --> 00:00:40.458
And the other thing is it should be

9
00:00:40.458 --> 00:00:44.556
rendering,
&gt;&gt; Evan: Remember to use

10
00:00:44.556 --> 00:00:47.076
the proper function syntax.

11
00:00:47.076 --> 00:00:52.251
So obviously, it should be just returning
the avatar component internally.

12
00:00:52.251 --> 00:00:55.559
Because ultimately,
this is what we're trying to do.

13
00:00:55.559 --> 00:01:00.387
The interesting thing is,
we want to pass additional data.

14
00:01:00.387 --> 00:01:06.483
I want to pass props to avatar,
I want to pass it to the source props.

15
00:01:06.483 --> 00:01:13.417
The question is how do we find
out what the source is, right?

16
00:01:13.417 --> 00:01:18.182
And let's just say,

17
00:01:18.182 --> 00:01:23.742
we have some local states

18
00:01:23.742 --> 00:01:29.303
inside this component,

19
00:01:29.303 --> 00:01:32.492
which is URL.

20
00:01:32.492 --> 00:01:37.351
And by default, when we first load this
component, we only have the username.

21
00:01:37.351 --> 00:01:39.291
We don't have the URL yet.

22
00:01:39.291 --> 00:01:43.262
And the requirement says,
we should, wait, it is here.

23
00:01:43.262 --> 00:01:45.313
Where is the requirements?

24
00:01:45.313 --> 00:01:46.790
Okay, It's here.

25
00:01:46.790 --> 00:01:51.606
It says, before the API returns,
the higher order component should be

26
00:01:51.606 --> 00:01:54.988
passing placeholder URL
to the inner component.

27
00:01:54.988 --> 00:01:59.076
We'll just copy that and use that as

28
00:01:59.076 --> 00:02:03.990
the default value for our URL here, ight?

29
00:02:03.990 --> 00:02:08.770
We'll just whatever,
we'll just pass it in.

30
00:02:08.770 --> 00:02:14.232
So now, first, we've created a smart
avatar component, not so smart.

31
00:02:14.232 --> 00:02:17.825
It always just renders in avatar
with a placeholder image.

32
00:02:17.825 --> 00:02:23.072
And now, we need to figure out how
to find out where the real URL is.

33
00:02:23.072 --> 00:02:25.353
So let's do that in a life cycle hook.

34
00:02:25.353 --> 00:02:29.414
So when the component is created,
we're gonna call this API.

35
00:02:29.414 --> 00:02:31.254
We're gonna fetchURL.

36
00:02:31.254 --> 00:02:36.619
And because it's expected user name,
we'll just, right?

37
00:02:36.619 --> 00:02:39.572
We'll call it with the username.

38
00:02:39.572 --> 00:02:44.270
And it accepts the call back which
gives you the url that we need.

39
00:02:46.005 --> 00:02:48.558
&gt;&gt; Evan: And inside that call back,

40
00:02:48.558 --> 00:02:52.558
we'll just set our url to the correct url.

41
00:02:55.263 --> 00:03:01.435
&gt;&gt; Evan: So does this make sense?

42
00:03:01.435 --> 00:03:08.088
So essentially, we're maintaining
an intermediate piece of state.

43
00:03:08.088 --> 00:03:14.040
And this state is the url, and
it starts with a placeholder.

44
00:03:14.040 --> 00:03:21.381
And it is changes after we have
fetched the desired URL from the API.

45
00:03:21.381 --> 00:03:25.860
All we are doing is passing it
down to the avatar component.

46
00:03:25.860 --> 00:03:31.012
The good thing is we have
extracted a piece of functionality

47
00:03:31.012 --> 00:03:36.484
very cleanly out of inner and
outer component into this thing.

48
00:03:36.484 --> 00:03:39.595
And believe it should work, so

49
00:03:39.595 --> 00:03:44.391
it's better to just
actually open it in order.

50
00:03:44.391 --> 00:03:49.158
So this is the effect, so it shows
a placeholder and interns into that.

51
00:03:49.158 --> 00:03:52.643
So imagine, you can do something
like a blurry effect or

52
00:03:52.643 --> 00:03:57.033
initially showing other things you
can do a lot of fancy stuff in here.

53
00:03:57.033 --> 00:03:57.961
The good thing is,

54
00:03:57.961 --> 00:04:01.336
you can encapsulate all of that
inside this higher order component.

55
00:04:01.336 --> 00:04:05.671
It doesn't leak anywhere else,
so which is very nice.

56
00:04:05.671 --> 00:04:10.297
So one small thing,
that we might want to think about,

57
00:04:10.297 --> 00:04:15.036
is that this component
currently is pretty optimized.

58
00:04:15.036 --> 00:04:19.586
In the sense, it always hits the API,
whenever it's created.

59
00:04:19.586 --> 00:04:24.616
But we can actually create
something like a cache

60
00:04:24.616 --> 00:04:29.286
here that caches the username and
URL pairs.

61
00:04:29.286 --> 00:04:34.203
So that, we don't need to actually
hit the API all the time.

62
00:04:34.203 --> 00:04:38.520
You can have a cache here with
a username and URL pairs.

63
00:04:38.520 --> 00:04:44.328
And inside our data here,
we can directly start with

64
00:04:44.328 --> 00:04:49.742
a cached hit if it exists and
we check again here.

65
00:04:49.742 --> 00:04:54.435
If it's already a cached hit,
we don't need to call the API at all.

66
00:04:54.435 --> 00:04:57.964
So you can do a lot of things,
authorizations,

67
00:04:57.964 --> 00:05:00.973
fancy functionalities, inside here.

68
00:05:00.973 --> 00:05:05.765
But it doesn't affect the usage
to the parent component at all.

69
00:05:05.765 --> 00:05:08.277
No matter what you do
inside that component,

70
00:05:08.277 --> 00:05:10.799
this parent component
usage stays the same.

71
00:05:10.799 --> 00:05:14.532
This inner component,
the Avatar component stays the same.

72
00:05:14.532 --> 00:05:17.055
They don't need to change, right?

73
00:05:17.055 --> 00:05:22.054
You can do all the work inside
this higher order component, but

74
00:05:22.054 --> 00:05:26.031
you're not affecting your parent,
your child.

75
00:05:26.031 --> 00:05:31.110
So this is good, because it shows that
it is a good encapsulation mechanism.

76
00:05:31.110 --> 00:05:35.279
The only interface we're using
to talk between the parent and

77
00:05:35.279 --> 00:05:36.971
the child is view props.

78
00:05:36.971 --> 00:05:41.085
Because the way we communicate is so
constrained.

79
00:05:41.085 --> 00:05:45.490
This make ensures that change in
the inter implementation of this

80
00:05:45.490 --> 00:05:49.025
enhancer doesn't affect
other parts in your code.

81
00:05:49.025 --> 00:05:53.246
This is critical,
if you have a large team, a large project.

82
00:05:53.246 --> 00:05:57.516
And you want to make sure when you are
changing things, you're not stepping on

83
00:05:57.516 --> 00:06:01.154
other people's toes,
not accidentally breaking other things.

84
00:06:01.154 --> 00:06:05.261
The trick to that is,
make sure this piece of code,

85
00:06:05.261 --> 00:06:10.622
finding contracts with other parts
of the code base, is minimal.

86
00:06:10.622 --> 00:06:15.425
In this case, the only thing that is
connecting to other pieces in the code

87
00:06:15.425 --> 00:06:18.535
are the incoming props and
the outgoing props.

88
00:06:18.535 --> 00:06:23.812
So this is great, because this is a very
clear constraint, it's very minimal.

89
00:06:23.812 --> 00:06:27.342
It gives you very little chance of
breaking other people's things.

90
00:06:27.342 --> 00:06:28.448
&gt;&gt; Speaker 2: In your render function

91
00:06:28.448 --> 00:06:30.281
there, you're referencing Avatar.

92
00:06:30.281 --> 00:06:32.984
Shouldn't you be actually
referencing the InnerComponent?

93
00:06:32.984 --> 00:06:35.319
&gt;&gt; Evan: Yes that's a mistake here.

94
00:06:35.319 --> 00:06:41.016
Yeah, so this makes this with
Avatar url more generic.

95
00:06:41.016 --> 00:06:45.856
So any InnerComponent that
takes a URL prop can be

96
00:06:45.856 --> 00:06:49.171
used with this avatar URL thing.

97
00:06:49.171 --> 00:06:54.720
And it can be more generic, for
example you can take something like,

98
00:06:54.720 --> 00:06:59.130
you can even pass the fetchURL
function here, right?

99
00:06:59.130 --> 00:07:03.021
So instead of hardcoded to
always be fetching avatars,

100
00:07:03.021 --> 00:07:07.342
you can on the fly customize
what you're actually fetching.

101
00:07:07.342 --> 00:07:09.833
It takes the username,
you can fetch the avatar,

102
00:07:09.833 --> 00:07:12.277
you can fetch other
information about the user.

103
00:07:12.277 --> 00:07:16.134
But you're using the same interface
to enhance inner components.

104
00:07:16.134 --> 00:07:20.615
And this increases the reusability for
this enhancer as well.

105
00:07:20.615 --> 00:07:23.822
What are the difference between
created and mounted hooks for

106
00:07:23.822 --> 00:07:28.750
fetching data?
&gt;&gt; Evan: To be honest,

107
00:07:28.750 --> 00:07:31.343
the difference is minimal.

108
00:07:31.343 --> 00:07:35.729
The main difference is that
mounted is called after

109
00:07:35.729 --> 00:07:40.831
the rendering happens and
the actual dominos are created.

110
00:07:40.831 --> 00:07:48.515
So technically, created will be
caught earlier, then mounted.

111
00:07:48.515 --> 00:07:52.170
If your component takes
a long time to render,

112
00:07:52.170 --> 00:07:56.682
then created might be called
even earlier than mounted.

113
00:07:56.682 --> 00:07:59.822
And it's good to send
the request out beforehand,

114
00:07:59.822 --> 00:08:04.507
because the request needs to go through
the internet and there's latency.

115
00:08:04.507 --> 00:08:09.030
So the can overlap with the time
it takes to render a component.

116
00:08:09.030 --> 00:08:10.482
So that's the main thing.

117
00:08:10.482 --> 00:08:15.013
There was an early question about slots.

118
00:08:15.013 --> 00:08:18.868
I think, it's actually easier
to read the docs about slots.

119
00:08:18.868 --> 00:08:23.464
But slots API was actually derived

120
00:08:23.464 --> 00:08:28.067
from the same standard from W3C.

121
00:08:28.067 --> 00:08:31.640
And so, in web components,
there's a slot mechanism.

122
00:08:31.640 --> 00:08:36.394
And views implementation
loosely follows that spec, but

123
00:08:36.394 --> 00:08:39.116
we kinda enhance it in a few ways.

124
00:08:39.116 --> 00:08:43.643
And most importantly, view slot mechanism
works in rendered functions too.

125
00:08:43.643 --> 00:08:47.932
So if you use a function that
uses rendered functions,

126
00:08:47.932 --> 00:08:52.502
a user component that uses
render functions like this, so

127
00:08:52.502 --> 00:08:57.728
you can do, slot = "foo".
&gt;&gt; Evan: And

128
00:08:57.728 --> 00:09:02.073
the way to access this
slot inside a render

129
00:09:02.073 --> 00:09:06.680
function is by doing this.$slots.foo.

130
00:09:06.680 --> 00:09:13.127
This will give you
an array of virtual nodes,

131
00:09:13.127 --> 00:09:17.035
that falls into this slot.

132
00:09:17.035 --> 00:09:21.458
Because you can have multiple things
that fall into the same slot.

133
00:09:21.458 --> 00:09:23.476
So you gonna have an array.

134
00:09:23.476 --> 00:09:27.767
And if you don't give it any slot name,

135
00:09:27.767 --> 00:09:34.804
then all unnamed ones will be
inside this.$slots.default.

136
00:09:34.804 --> 00:09:38.871
This is also an array, so

137
00:09:38.871 --> 00:09:46.637
you can pass them directly
as children to this.

138
00:09:46.637 --> 00:09:53.035
Essentially, you're passing on the slot
content into this inner component.

139
00:09:53.035 --> 00:10:00.308
Even better, well, yeah,
this is a typical use case.

140
00:10:00.308 --> 00:10:05.789
Another trick that we can talk about
is inheriting the outer attributes.

141
00:10:05.789 --> 00:10:09.507
So we have this higher
order components like here.

142
00:10:09.507 --> 00:10:14.248
If you do something like, id="foo",
unfortunately it won't be passed down to

143
00:10:14.248 --> 00:10:17.856
the inner component,
because we didn't explicitly list it.

144
00:10:17.856 --> 00:10:21.954
But this id will in fact,
be collected inside an attribute card,

145
00:10:21.954 --> 00:10:24.343
a property called, this.$attrs.

146
00:10:24.343 --> 00:10:26.271
This is a new feature in 2.4.

147
00:10:26.271 --> 00:10:31.619
Which means you can pass

148
00:10:31.619 --> 00:10:35.902
it down like this.

149
00:10:35.902 --> 00:10:36.760
So this way,

150
00:10:36.760 --> 00:10:41.927
you're relaying all the additional
attributes down to the intercomponent.

151
00:10:41.927 --> 00:10:48.372
So this id were in fact, now,
be rendered on the internal Avatar.

152
00:10:48.372 --> 00:10:53.195
But the default behavior is only
explicitly listed props will

153
00:10:53.195 --> 00:10:54.499
be passed down.

154
00:10:54.499 --> 00:10:58.676
This also means in created hook, you can
not access dominoes, that's correct.

155
00:10:58.676 --> 00:11:04.410
Only mounted hook guarantees
the DOM has been created.

156
00:11:04.410 --> 00:11:08.152
In created hook,
it means the instance is created.

157
00:11:08.152 --> 00:11:13.462
On the website, there's a documentation,

158
00:11:15.033 --> 00:11:17.471
&gt;&gt; Evan: Lifecycle Diagram.

159
00:11:18.757 --> 00:11:19.862
&gt;&gt; Evan: As you can see,

160
00:11:19.862 --> 00:11:24.112
when the created hook is called
we have initialize events,

161
00:11:24.112 --> 00:11:27.007
Lifecycle injections and reactivity.

162
00:11:27.007 --> 00:11:31.908
These are instance specific,
they don't have anything

163
00:11:31.908 --> 00:11:36.106
to do with the DOM, or
rendering, or anything.

164
00:11:36.106 --> 00:11:41.636
Real rendering, only happens after
created hook has been called and

165
00:11:41.636 --> 00:11:47.276
there could be on the far compilation and
then virtual DOM rendering.

166
00:11:47.276 --> 00:11:51.354
And eventually,
when the actual DOM has been created,

167
00:11:51.354 --> 00:11:54.147
that's when mounted will be called.

168
00:11:54.147 --> 00:11:58.435
So now, the component is
considered to be in mounted state.

169
00:11:58.435 --> 00:12:04.100
I have a question,
in view router could import food be change

170
00:12:04.100 --> 00:12:09.210
to something like lazy import
to get a slightly simpler

171
00:12:09.210 --> 00:12:14.887
syntax?
&gt;&gt; Evan: Not really,

172
00:12:14.887 --> 00:12:18.803
so the question is really
about async components and

173
00:12:18.803 --> 00:12:22.621
code splitting together.
&gt;&gt; Evan: I think,

174
00:12:22.621 --> 00:12:26.159
this kind of syntax is
already simple enough.

175
00:12:26.159 --> 00:12:32.464
[LAUGH] So the more important
thing is the import syntax,

176
00:12:32.464 --> 00:12:36.362
dynamic import is a spec, right?

177
00:12:36.362 --> 00:12:40.168
Arrow function is part of JavaScript,
dynamic import is part of JavaScript.

178
00:12:40.168 --> 00:12:44.872
We're just using these standard language
features for async components and

179
00:12:44.872 --> 00:12:45.889
close fitting.

180
00:12:45.889 --> 00:12:50.518
Which, in my opinion is better
than having to have a custom

181
00:12:50.518 --> 00:12:55.150
Lazy import function,
which is not part of the standard.

182
00:12:55.150 --> 00:12:58.724
Essentially, we are having our own API
instead of using standard language

183
00:12:58.724 --> 00:12:59.300
features.

