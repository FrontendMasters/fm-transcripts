WEBVTT

1
00:00:00.280 --> 00:00:04.480
&gt;&gt; Evan You: In the afternoon, we're going
to talk about two very important topics,

2
00:00:04.480 --> 00:00:07.340
state management and routing.

3
00:00:07.340 --> 00:00:12.090
So state management is
kind of a big topic.

4
00:00:13.550 --> 00:00:17.760
So the agenda really
covers four exercises,

5
00:00:17.760 --> 00:00:20.640
but before diving into exercises,
obviously,

6
00:00:20.640 --> 00:00:24.340
we need to talk a little bit about
state management in general.

7
00:00:24.340 --> 00:00:31.055
So the idea of state management
sorta did not exist in

8
00:00:31.055 --> 00:00:37.810
frontend until Facebook brought
up this concept called Flux.

9
00:00:37.810 --> 00:00:45.050
Well, before that, we were trying to
move MVC into the frontend world,

10
00:00:45.050 --> 00:00:49.324
and our state lives in so-called models,

11
00:00:49.324 --> 00:00:53.970
which is a good abstraction for
a lot of cases.

12
00:00:53.970 --> 00:00:58.710
In fact,
it probably still works pretty well, but

13
00:00:58.710 --> 00:01:03.840
the primary problem with, say,
backbone back then is we lacked a way

14
00:01:03.840 --> 00:01:09.150
to declaratively hook our models
into our rendering process.

15
00:01:09.150 --> 00:01:14.140
So this new wave of React, Vue, and
Angular, the biggest advantage is our

16
00:01:14.140 --> 00:01:17.880
state is now sort of transparently
connected to our Vue.

17
00:01:19.020 --> 00:01:22.590
But that also brings in the problem,
because it is so

18
00:01:22.590 --> 00:01:27.640
easy to spread state everywhere,
and change them anywhere.

19
00:01:27.640 --> 00:01:32.650
Your application, as it grows,
it becomes more and more difficult to

20
00:01:32.650 --> 00:01:36.996
track down where you store the state and
where you're changing the state, right?

21
00:01:38.330 --> 00:01:42.740
At the end of the day,
a lot of the problem is really trying to

22
00:01:42.740 --> 00:01:47.020
pinpoint where the problem originates
from when you run into something.

23
00:01:47.020 --> 00:01:49.460
And without a proper pattern for

24
00:01:49.460 --> 00:01:53.390
you to organize all these code
that's touching your state,

25
00:01:53.390 --> 00:01:59.170
you end up with a sort of a hunting
game when you run into something weird.

26
00:01:59.170 --> 00:02:04.040
And really, your app becomes more and
more unpredictable in that sense.

27
00:02:04.040 --> 00:02:09.050
So state management, really, it's just
a movement of frontend developers

28
00:02:09.050 --> 00:02:14.100
trying to figure out ways to sort of
bring disciplines into where your

29
00:02:14.100 --> 00:02:19.360
code should live, and
how you should manage your states.

30
00:02:19.360 --> 00:02:23.130
And eventually, makes it easier for you to
pinpoint problems when things go wrong,

31
00:02:23.130 --> 00:02:25.820
and also helps with collaboration and
that stuff.

32
00:02:25.820 --> 00:02:32.690
So Flux was sort of this first idea of
unidirectional data flow and all that.

33
00:02:35.770 --> 00:02:40.520
And later on, the React community popped
up a lot of different implementations of

34
00:02:40.520 --> 00:02:47.710
the Flux pattern, and eventually, today
the de facto library people use is Redux.

35
00:02:47.710 --> 00:02:51.138
And there's a alternative pattern, MobX,

36
00:02:51.138 --> 00:02:55.196
which is closer to the reactivity
model pattern, and

37
00:02:55.196 --> 00:03:00.444
its internal implementation is
actually very similar to to Vue's.

38
00:03:00.444 --> 00:03:04.869
So in the Vue world, obviously,
it's pretty straightforward and

39
00:03:04.869 --> 00:03:08.290
easy to just put your state
inside your components.

40
00:03:08.290 --> 00:03:11.129
In fact, it probably would
work in a lot of simple cases.

41
00:03:12.670 --> 00:03:16.095
I personally think that state
management libraries or

42
00:03:16.095 --> 00:03:21.750
patterns is not necessarily
needed in every case.

43
00:03:21.750 --> 00:03:25.690
For simple scenarios,
you might be better off without it.

44
00:03:25.690 --> 00:03:30.710
And the author of Redux,
Dan Abramov, has a quote saying that

45
00:03:32.850 --> 00:03:36.660
Flux patterns are like glasses.

46
00:03:36.660 --> 00:03:38.280
You know it when you need it, right?

47
00:03:38.280 --> 00:03:43.930
If you're seeing everything perfectly
fine, then you probably don't need it, but

48
00:03:43.930 --> 00:03:48.890
the moment you realize, there's something
wrong with my sight, you do need it.

49
00:03:48.890 --> 00:03:52.690
And it's a natural process,
but sometimes it's

50
00:03:52.690 --> 00:03:58.080
not that easy to predict how big your app
will be, but you have intuition, right?

51
00:03:58.080 --> 00:03:59.300
If your boss tell you, hey,

52
00:03:59.300 --> 00:04:04.230
this is our most important app,
you need to expect to maintain it for

53
00:04:04.230 --> 00:04:08.480
a few years, then you probably need to
think about state management from day one.

54
00:04:10.350 --> 00:04:13.528
So let's talk a bit about Vuex,

55
00:04:13.528 --> 00:04:18.510
which is the state management pattern for
Vue.

56
00:04:18.510 --> 00:04:23.390
It's an official library by the Vue team,
and

57
00:04:23.390 --> 00:04:30.710
it's also associated with the code
organizing patterns that comes with it.

58
00:04:30.710 --> 00:04:34.800
But today we're not really going to
be talking about how to use Vuex.

59
00:04:34.800 --> 00:04:41.143
If you have not used it before,
&gt;&gt; Evan You: Has

60
00:04:41.143 --> 00:04:43.830
any one of you used Vuex before?

61
00:04:45.010 --> 00:04:48.000
Okay, great, so
some of you already know what it does.

62
00:04:48.000 --> 00:04:51.870
So if you haven't,

63
00:04:51.870 --> 00:04:56.423
it might be a good idea to

64
00:04:56.423 --> 00:05:01.214
read through this page.

65
00:05:01.214 --> 00:05:02.768
It's called What is Vuex?

66
00:05:02.768 --> 00:05:03.810
It's in the Vuex docs.

67
00:05:06.849 --> 00:05:10.870
&gt;&gt; Evan You: A quick example,
we have code like this.

68
00:05:10.870 --> 00:05:14.340
Everybody know what this does.

69
00:05:14.340 --> 00:05:15.210
It's a Vue instance.

70
00:05:15.210 --> 00:05:20.160
It has some state, it has a template,
it has some methods,

71
00:05:21.400 --> 00:05:27.410
and [COUGH] if you call app.increment,

72
00:05:27.410 --> 00:05:32.060
it will increment the count,
in turn, render the count.

73
00:05:32.060 --> 00:05:36.430
So this is a very simple app,
but it has the three

74
00:05:36.430 --> 00:05:40.413
essential pieces of what a user
interface is consisted of.

75
00:05:40.413 --> 00:05:42.735
It has a state, it has the view,

76
00:05:42.735 --> 00:05:46.610
it has our possible ways
that the state could change.

77
00:05:47.780 --> 00:05:54.980
And the difficulty arises when
[COUGH] we have multiple applications,

78
00:05:54.980 --> 00:05:58.610
or we have multiple components
in the same app, really.

79
00:05:59.880 --> 00:06:03.800
But you can think of
a component as a small circle.

80
00:06:03.800 --> 00:06:06.160
It's a self-contained unit, right?

81
00:06:06.160 --> 00:06:09.880
Ideally, we want our components
to be as decoupled as possible.

82
00:06:09.880 --> 00:06:12.600
That's the ideal situation,
because if they're decoupled,

83
00:06:12.600 --> 00:06:14.150
they're easy to maintain.

84
00:06:14.150 --> 00:06:16.630
But the problem arises when you have

85
00:06:16.630 --> 00:06:19.790
multiple components that need
access to the same piece of state.

86
00:06:19.790 --> 00:06:22.490
That's where the complexity comes in, and

87
00:06:22.490 --> 00:06:26.900
in reality, in almost all the big apps,
you will run into such scenarios.

88
00:06:26.900 --> 00:06:30.780
For example,
you grab some data from the backend API,

89
00:06:30.780 --> 00:06:34.940
and your page A needs that data,
your page B also needs that data.

90
00:06:34.940 --> 00:06:40.000
And even worse, there could be two
different components nested in

91
00:06:40.000 --> 00:06:43.260
very different,
deeply nested component trees, but

92
00:06:43.260 --> 00:06:46.120
they still need to access
the same piece of data.

93
00:06:46.120 --> 00:06:51.120
So the question becomes unclear which
component should own the data, right, and

94
00:06:51.120 --> 00:06:54.120
eventually, you realize neither
of them should own the data.

95
00:06:54.120 --> 00:06:58.950
The data should be hoisted out
to be managed in a centralized

96
00:06:58.950 --> 00:07:04.540
place if the data is meant to be shared
by multiple components across your app.

97
00:07:04.540 --> 00:07:09.372
So that brings up the necessity for
a library or a pattern for you to do that,

98
00:07:09.372 --> 00:07:14.190
and Vuex is essentially
that whole thing for

99
00:07:14.190 --> 00:07:17.089
the Vue ecosystem.

100
00:07:17.089 --> 00:07:22.660
But Vuex really kind of has already
gone through quite a few iterations,

101
00:07:22.660 --> 00:07:27.736
so in addition to the basic concepts,
it also brings more.

102
00:07:27.736 --> 00:07:32.455
It also brings some extra
things that's only meant for

103
00:07:32.455 --> 00:07:36.559
when you are really growing big,
for example,

104
00:07:36.559 --> 00:07:41.730
the module system, and
plugin system, and all that.

105
00:07:41.730 --> 00:07:44.140
But today we're not going
to talk about that.

106
00:07:44.140 --> 00:07:49.290
We're going to sort of go from the ground
up, as the name of this workshop suggests.

107
00:07:49.290 --> 00:07:56.580
We're gonna think about how we can sorta
start with the most simple, most minimal

108
00:07:56.580 --> 00:08:01.320
implementation of what a potential state
management library could look for Vue.

