WEBVTT

1
00:00:00.332 --> 00:00:04.249
&gt;&gt; Evan You: Let's take a look
at how to tackle this function.

2
00:00:04.249 --> 00:00:06.393
As we see, it returns the store.

3
00:00:06.393 --> 00:00:10.439
Obviously, we just return
a new view instance from it.

4
00:00:10.439 --> 00:00:16.555
And first thing we need to do is,
look at the apr requirement.

5
00:00:16.555 --> 00:00:23.596
We need to be able to access the state,
in store view store.state.

6
00:00:23.596 --> 00:00:30.296
So seems pretty obvious that we
can just put the state here,

7
00:00:30.296 --> 00:00:36.060
that allows us to access
store.state directly and

8
00:00:36.060 --> 00:00:39.960
it's reactive, which is great.

9
00:00:39.960 --> 00:00:44.549
And the other part of the API
is ,this commit method, right?

10
00:00:44.549 --> 00:00:49.893
So obviously,
we can make a commit method here.

11
00:00:49.893 --> 00:00:56.575
And the implementation is that,
we look at what arguments does it take?

12
00:00:56.575 --> 00:01:02.011
It takes the ID of the mutation, so

13
00:01:02.011 --> 00:01:08.390
it's like mutationType or something.

14
00:01:08.390 --> 00:01:12.843
And notice that, we are destructuring
the mutations object from our

15
00:01:12.843 --> 00:01:17.619
declaration here, and mutations is
just an object with different keys.

16
00:01:21.586 --> 00:01:22.919
&gt;&gt; Evan You: And so,

17
00:01:22.919 --> 00:01:28.065
mutations[mutationType].

18
00:01:28.065 --> 00:01:33.644
This will give us
the corresponding function,

19
00:01:33.644 --> 00:01:37.551
which is this inc function here.

20
00:01:37.551 --> 00:01:43.826
And notice that this inc function
needs to be passed .state,

21
00:01:43.826 --> 00:01:50.444
so it needs to be passed here.
&gt;&gt; Evan You: And now,

22
00:01:50.444 --> 00:01:57.010
we've essentially complete the picture.
&gt;&gt; Evan You: So

23
00:01:57.010 --> 00:02:00.816
yeah, pretty straight forward,

24
00:02:00.816 --> 00:02:04.752
the real thing to note here is that,

25
00:02:04.752 --> 00:02:12.644
the step from going to a bare bone
view instance, to how we can use that.

26
00:02:12.644 --> 00:02:17.455
Wrap it up with some utility functions and

27
00:02:17.455 --> 00:02:21.997
eventually, expose a different API.

28
00:02:21.997 --> 00:02:27.849
So for this small exercise, our new
create store effect doesn't really make

29
00:02:27.849 --> 00:02:32.906
things fundamentally more useful,
than a simple view instance.

30
00:02:32.906 --> 00:02:37.904
This is really just to
demonstrate how ViewX,

31
00:02:37.904 --> 00:02:44.056
in fact ViewX is implementing
in a very similar fashion,

32
00:02:44.056 --> 00:02:48.683
but we can add more functionalities to it.

33
00:02:48.683 --> 00:02:54.540
For example, ViewX has a concept
of actions, getters, modules.

34
00:02:54.540 --> 00:03:01.372
And build it upon that, but at the root
of it, at the core of ViewX is still,

35
00:03:01.372 --> 00:03:05.933
this reactivity system
driven by view essences.

36
00:03:05.933 --> 00:03:13.534
So hopefully, you kinda get an idea,
you can leverage the same pattern,

37
00:03:13.534 --> 00:03:17.467
tweak the API to a state that you like.

38
00:03:17.467 --> 00:03:21.350
To create an alternative state of
management solution to your liking,

39
00:03:21.350 --> 00:03:23.042
so that's totally possible.

40
00:03:23.042 --> 00:03:27.716
And I really recommend people to
experiment and just fiddle with these,

41
00:03:27.716 --> 00:03:30.408
because it really helps you understand.

42
00:03:30.408 --> 00:03:34.879
How a famed engine library
that looks really fancy and

43
00:03:34.879 --> 00:03:39.259
powerful are in fact composed
of these little bits.

44
00:03:39.259 --> 00:03:41.970
They're all built from
these common primitives.

