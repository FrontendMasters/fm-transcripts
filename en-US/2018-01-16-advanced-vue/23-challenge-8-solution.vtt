WEBVTT

1
00:00:00.670 --> 00:00:04.940
&gt;&gt; Evan You: We have our app, and
this one should be very straightforward.

2
00:00:04.940 --> 00:00:10.040
So we can just create
an inline component counter,

3
00:00:10.040 --> 00:00:15.378
the and expectation is it
should just render the count

4
00:00:15.378 --> 00:00:21.561
inside a div in order to pass the test
&gt;&gt; Evan You: And

5
00:00:21.561 --> 00:00:29.366
obviously it should take a count prompt.
&gt;&gt; Evan You: That's it,

6
00:00:29.366 --> 00:00:33.364
and then this count,
the real piece of state,

7
00:00:33.364 --> 00:00:37.580
this count,
should live in our root component.

8
00:00:39.770 --> 00:00:44.023
So,
&gt;&gt; Evan You: You can see that

9
00:00:44.023 --> 00:00:48.516
the counter itself simply takes
some props and renders it, and

10
00:00:48.516 --> 00:00:53.280
the source of truth is in the common
parent of all these instances.

11
00:00:55.820 --> 00:01:03.400
And so this is the most basic
form of stage management

12
00:01:03.400 --> 00:01:08.130
in a lot of cases, but like in the worst
case scenario you can have all your state

13
00:01:08.130 --> 00:01:12.150
in your root component and just keep
passing them down with your props, right?

14
00:01:12.150 --> 00:01:15.550
But you can quickly see how
this pattern breaks down

15
00:01:15.550 --> 00:01:19.450
when your component tree structure
becomes larger and larger and

16
00:01:19.450 --> 00:01:24.320
it's just completely infeasible to keep
passing props over and over again.

