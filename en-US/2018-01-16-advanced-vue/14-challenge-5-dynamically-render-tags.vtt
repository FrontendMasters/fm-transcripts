WEBVTT

1
00:00:00.390 --> 00:00:02.860
&gt;&gt; Evan: So
we talked enough about render functions.

2
00:00:02.860 --> 00:00:06.840
Time to get our hands dirty and
do some exercises.

3
00:00:06.840 --> 00:00:12.080
So 3.1 says implement
the example component which

4
00:00:12.080 --> 00:00:17.440
given the following usage, so
obviously it takes a tags prompt.

5
00:00:17.440 --> 00:00:19.780
And the tags prompt takes an array.

6
00:00:21.960 --> 00:00:28.672
An array of h1, h2, h3.
Array of strings, tag names, right?

7
00:00:28.672 --> 00:00:31.726
And then this component,
when it's rendered,

8
00:00:31.726 --> 00:00:34.340
it should produce the following markup.

9
00:00:35.820 --> 00:00:40.657
It should just render these tags and
inside each tag it

10
00:00:40.657 --> 00:00:45.184
should be the index of that element and
the array.

11
00:00:45.184 --> 00:00:49.830
So imagine how to do this in templates,
right?

12
00:00:51.110 --> 00:00:59.634
How would you do this in templates?
&gt;&gt; Evan: Right?

13
00:00:59.634 --> 00:01:04.931
So by default we don't really have
a construct that allows you to,

14
00:01:04.931 --> 00:01:10.710
say, dynamically render this tag
here using this data source, right?

15
00:01:11.910 --> 00:01:14.790
So in Vue we have this
construct called component is.

16
00:01:17.060 --> 00:01:19.730
This is the closest thing to it.

17
00:01:19.730 --> 00:01:25.090
Because component is just an abstract
placeholder, what it really renders

18
00:01:25.090 --> 00:01:30.750
is determined by this is.

19
00:01:30.750 --> 00:01:37.510
So if you do component is="h1"
this works as well, right?

20
00:01:37.510 --> 00:01:42.126
But the original intention of this API
is really it's just to allow you to

21
00:01:42.126 --> 00:01:45.381
dynamically switch between
components instead of

22
00:01:45.381 --> 00:01:49.759
rendering real tags.
&gt;&gt; Evan: And you are only

23
00:01:49.759 --> 00:01:54.770
able to do this with templates because
we've provided this API to you, right?

24
00:01:54.770 --> 00:01:59.382
So the important thing to note here is, if
we didn't provide this API, then there's

25
00:01:59.382 --> 00:02:04.470
no way for you to achieve what you're
trying to do here with just templates.

26
00:02:04.470 --> 00:02:09.695
So we come to an interesting disadvantage
of the template, is that we have

27
00:02:09.695 --> 00:02:15.620
to come up with a lot of these syntax
APIs, in order to solve some use cases.

28
00:02:15.620 --> 00:02:19.888
But when you run into a case that
it's not supported by the template,

29
00:02:19.888 --> 00:02:24.674
the only thing you can do is really go and
open the feature request on GitHub and

30
00:02:24.674 --> 00:02:26.459
wait for us to implement it.

31
00:02:26.459 --> 00:02:28.573
Which is not optimal if
your manager is waiting for

32
00:02:28.573 --> 00:02:31.500
the app to ship in the next week or
something, right?

33
00:02:31.500 --> 00:02:36.160
But with render functions,
we can just solve that with JavaScript.

34
00:02:38.150 --> 00:02:41.680
So the exercise really is

35
00:02:42.910 --> 00:02:47.290
implement this example component with
render functions that achieve this goal.

36
00:02:48.460 --> 00:02:54.010
And you can look up the render
function usage in the docs or

37
00:02:54.010 --> 00:03:00.690
from the slides, and
let's work on this for ten minutes.

