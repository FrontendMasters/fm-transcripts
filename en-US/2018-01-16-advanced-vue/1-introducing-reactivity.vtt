WEBVTT

1
00:00:00.160 --> 00:00:02.310
&gt;&gt; Evan You: So
there's a lot of misunderstandings or

2
00:00:02.310 --> 00:00:06.830
confusions about the term reactivity
actually means in a programming context.

3
00:00:06.830 --> 00:00:09.120
To some people it might just mean rx.

4
00:00:09.120 --> 00:00:12.020
Reactive programming is like streams and
stuff, but

5
00:00:12.020 --> 00:00:17.170
in our context this really just means
that when you change the state and

6
00:00:17.170 --> 00:00:20.906
how the state reflects in
the update of the entire system.

7
00:00:20.906 --> 00:00:25.990
In our particular context, how changing
state reflects into changes in the dom.

8
00:00:25.990 --> 00:00:29.000
How does Vue track changes?

9
00:00:29.000 --> 00:00:35.886
So let's first think about a variable,
JavaScript variable, that's just a = 3.

10
00:00:35.886 --> 00:00:39.950
And then we have another variable
b which is 10 times of a.

11
00:00:39.950 --> 00:00:43.800
So this is a requirement, so
imagine you're the developer and

12
00:00:43.800 --> 00:00:47.060
your manager tells you hey
we need to build a program.

13
00:00:47.060 --> 00:00:52.220
The requirement is the variable b should
always be 10 times the value of a.

14
00:00:52.220 --> 00:00:53.960
Okay so how would you implement that?

15
00:00:53.960 --> 00:00:57.450
So this is a very naive
imperative solution right?

16
00:00:57.450 --> 00:01:03.950
The problem is later on when you change a,
b doesn't update because it's procedural.

17
00:01:03.950 --> 00:01:06.380
It doesn't keep the relationship in sync.

18
00:01:06.380 --> 00:01:09.840
So how can we keep them in sync, right?

19
00:01:09.840 --> 00:01:13.030
So the idea is,
instead of having to manually

20
00:01:13.030 --> 00:01:17.309
update b every time you change a we want
that relationship to be declarative.

21
00:01:19.070 --> 00:01:22.880
So we realize what your manager
actually wants you to build

22
00:01:22.880 --> 00:01:25.070
is a spreadsheet, right?

23
00:01:25.070 --> 00:01:26.900
They want you to build Excel.

24
00:01:26.900 --> 00:01:28.880
We have two cells.

25
00:01:28.880 --> 00:01:31.590
The B cell should always
be ten times of A.

26
00:01:31.590 --> 00:01:34.660
And in Excel we have this thing called
functions that allows you to declare

27
00:01:34.660 --> 00:01:36.720
the relationship between two cells.

28
00:01:36.720 --> 00:01:39.680
So cell B should always be 10
times the value of cell A.

29
00:01:39.680 --> 00:01:42.840
And how do we express that
in programming terms?

30
00:01:42.840 --> 00:01:46.923
So what if we can have the a magic
function called onAChanged?

31
00:01:46.923 --> 00:01:50.059
That just takes an internal function and

32
00:01:50.059 --> 00:01:55.000
will re-execute this
function whenever A changes.

33
00:01:55.000 --> 00:01:55.879
Then our problem is solved.

34
00:01:55.879 --> 00:02:00.540
The problem is,
how do implement that function?

35
00:02:02.630 --> 00:02:04.440
But before we dive into that,

36
00:02:04.440 --> 00:02:08.870
let's translate the problem into something
that's closer to web development.

37
00:02:08.870 --> 00:02:14.030
Let's say we have this actually span cell
and we want to make sure the a cell.

38
00:02:15.110 --> 00:02:17.090
So we have the b1 cell,
we also have the a1 cell.

39
00:02:17.090 --> 00:02:19.550
We want to make sure the b1 cell is always

40
00:02:19.550 --> 00:02:23.400
kept in sync per the requirements
of the spreadsheet.

41
00:02:23.400 --> 00:02:25.710
So this is imperative way of doing it,
right?

42
00:02:25.710 --> 00:02:30.380
We can just use the DOM API,
select it, set the text content.

43
00:02:32.240 --> 00:02:35.870
And if we wrap this thing
inside our magic onaChanged or

44
00:02:35.870 --> 00:02:39.780
onStateChanged function Suddenly
it becomes declarative, right?

45
00:02:39.780 --> 00:02:44.625
We've declared that
the relationship between

46
00:02:44.625 --> 00:02:49.600
our state.a and
the DOM staging of the cell b1.

47
00:02:49.600 --> 00:02:55.916
And if we abstract further away,
abstract away this imperative DOM into

48
00:02:55.916 --> 00:03:02.770
a templating language We have essentially
created a view library, all right?

49
00:03:02.770 --> 00:03:08.700
So this internal representation,
view = render(state) is

50
00:03:08.700 --> 00:03:14.820
the very high level abstraction of how
all the view rendering systems work.

51
00:03:15.820 --> 00:03:18.180
If we look at that the bigger question.

52
00:03:18.180 --> 00:03:22.776
So we'll not really bother with
the details in here because it involves

53
00:03:22.776 --> 00:03:28.860
detailed DOM, DOM implementations,
virtual DOM implementations and all that.

54
00:03:28.860 --> 00:03:30.070
We're not going to look into that.

55
00:03:30.070 --> 00:03:35.780
What we're more interested about is how
do we implement this outer function and

56
00:03:35.780 --> 00:03:39.730
this is how it might be implemented,
all right.

57
00:03:39.730 --> 00:03:45.380
So it simply saves the update
function somewhere and

58
00:03:45.380 --> 00:03:49.570
then, instead of allowing users to
arbitrarily manipulate the state,

59
00:03:49.570 --> 00:03:53.520
we require them to always call
a function to manipulate the state.

60
00:03:53.520 --> 00:03:56.080
And that function is called a set state.

61
00:03:56.080 --> 00:03:59.530
Set state simply takes the new state,
and replaces the old state, and

62
00:03:59.530 --> 00:04:01.780
then calls update function again.

63
00:04:01.780 --> 00:04:07.180
Right and if you've used React
you will find this extremely

64
00:04:07.180 --> 00:04:12.500
familiar because React forces you to
trigger on state changes of your setState.

65
00:04:12.500 --> 00:04:15.740
And this is essentially
what React is all about.

66
00:04:15.740 --> 00:04:20.080
Not all about but this is in
a nutshell how React works, right?

67
00:04:21.490 --> 00:04:24.000
So we've noticed something
different in the view context or

68
00:04:24.000 --> 00:04:26.830
in the angular context that we can,
in fact,

69
00:04:26.830 --> 00:04:30.480
directly manipulate the state
without having to call set state.

70
00:04:32.050 --> 00:04:33.710
So how does that work?

71
00:04:33.710 --> 00:04:34.890
Well, in angulars,

72
00:04:34.890 --> 00:04:39.840
things are a bit different because angular
uses dirty checking, and it's sort of

73
00:04:39.840 --> 00:04:45.480
intercepts your events,
like clicks to perform a digest cycle.

74
00:04:45.480 --> 00:04:49.870
Then it sort of checks all the things,
whether it has changed.

75
00:04:49.870 --> 00:04:54.420
In views contacts we do it a bit
more granularly in the sense that we

76
00:04:54.420 --> 00:04:59.020
actually convert your state
objects to become reactive.

77
00:04:59.020 --> 00:05:03.280
By using the ES5
object.defineProperty API,

78
00:05:03.280 --> 00:05:05.810
we convert all these properties
into getters and setters.

79
00:05:05.810 --> 00:05:12.410
So in the case of state.a, we actually
convert a into a getter and a setter.

80
00:05:12.410 --> 00:05:17.040
And in those scenarios,
we'll be able to do interesting things.

81
00:05:17.040 --> 00:05:23.610
So if we renamed onStateChanged
function to something like auto run.

82
00:05:23.610 --> 00:05:28.550
This is essentially a basic form
of dependency tracking that's

83
00:05:28.550 --> 00:05:33.590
commonly shared in Knockout.js,
Meteor Tracker, and Vue.js and MobX.

84
00:05:33.590 --> 00:05:35.820
MobX is a state management pattern for
React.

