WEBVTT

1
00:00:00.460 --> 00:00:02.300
&gt;&gt; Evan You: So, routing.

2
00:00:02.300 --> 00:00:05.919
How many of you have
used the devue router?

3
00:00:05.919 --> 00:00:09.470
Okay, how many of used the router
of sorting another framework?

4
00:00:10.500 --> 00:00:11.000
Okay, great.

5
00:00:11.000 --> 00:00:16.330
So, I guess, most of us know what single
page application routing is all about.

6
00:00:16.330 --> 00:00:22.210
You have URLs, you wanna map them to
components, that's the gist of it.

7
00:00:22.210 --> 00:00:28.160
So, the goal of these exercises is really
about going from the ground up and

8
00:00:28.160 --> 00:00:30.390
see how it can be done
in the view context.

9
00:00:31.570 --> 00:00:34.730
So, let's go into the first exercise in

10
00:00:34.730 --> 00:00:38.700
routing
&gt;&gt; Evan You: And

11
00:00:38.700 --> 00:00:42.791
it's,
&gt;&gt; Evan You: Let's put

12
00:00:42.791 --> 00:00:45.990
a very extremely simple
hash-based routing solution.

13
00:00:45.990 --> 00:00:53.930
It's not even a router, it's just
routing using direct browser API's.

14
00:00:53.930 --> 00:00:58.860
So, we all know that in
the browser there are two ways to

15
00:00:58.860 --> 00:01:03.830
do routing you can use a hash or
you can use the HTML5 History API.

16
00:01:03.830 --> 00:01:08.130
HTML5 History API is better in the sense,

17
00:01:08.130 --> 00:01:14.090
it supports pop state and
you get better looking URLs

18
00:01:14.090 --> 00:01:18.110
but it requires some sort
of server configuration, so

19
00:01:18.110 --> 00:01:23.180
that when you directly visit a deep link,
the server still renders

20
00:01:23.180 --> 00:01:28.580
the same static HTML page for
your client-side router to pick up.

21
00:01:28.580 --> 00:01:31.710
So, for the sake of exercise where just

22
00:01:31.710 --> 00:01:36.690
also the history API is a bit more
complex than a hash API to work with.

23
00:01:36.690 --> 00:01:40.950
So, for the sake of the exercise,
we're just gonna stick to hash routers.

24
00:01:40.950 --> 00:01:43.870
Because aside from
the browser API differences,

25
00:01:43.870 --> 00:01:47.849
the [INAUDIBLE] Implementation is really
the more similar and more important part.

26
00:01:50.580 --> 00:01:57.590
Our goal is build a small app that when
hash is foo, it should display foo.

27
00:01:57.590 --> 00:02:00.440
When hash is bar,
it should display bar, simple as that.

28
00:02:01.600 --> 00:02:07.530
The two APIs you can use is, if you wanna
access the current hash in the URL,

29
00:02:07.530 --> 00:02:09.766
use window.location.hash.

30
00:02:09.766 --> 00:02:12.560
If you wanna listen to hash changes,

31
00:02:12.560 --> 00:02:18.600
you can add a hashchange listener to
your window, to listen for changes.

32
00:02:19.640 --> 00:02:22.890
And the template is already
written out for you.

33
00:02:22.890 --> 00:02:25.250
You need to figure out
what to fill in here.

34
00:02:25.250 --> 00:02:28.571
This is where our main
view will be rendered.

35
00:02:28.571 --> 00:02:34.380
We provide two link already,
and the rest is up to you.

