WEBVTT

1
00:00:00.520 --> 00:00:04.225
&gt;&gt; Evan You: So we've mentioned that
your plugin should look something like

2
00:00:04.225 --> 00:00:07.493
this.
&gt;&gt; Evan You: So we're just gonna

3
00:00:07.493 --> 00:00:11.219
copy that internal code here.
&gt;&gt; Evan You: So

4
00:00:11.219 --> 00:00:15.831
this install function will be invoked
when we call Vue.use(RulesPlugin).

5
00:00:15.831 --> 00:00:18.729
This essentially just calls
this install function.

6
00:00:18.729 --> 00:00:21.371
And we apply the global mixin,

7
00:00:21.371 --> 00:00:25.760
which installs a created
hook into our component.

8
00:00:25.760 --> 00:00:30.930
And we check for rules,
and if the rules exists,

9
00:00:30.930 --> 00:00:38.772
let's copy over the usage here to see
how it actually looks like, right?

10
00:00:38.772 --> 00:00:44.596
So look at the shape of this rules object,
and we notice that it's using keys

11
00:00:44.596 --> 00:00:51.950
that corresponding to the data property
that we're trying to check and validate.

12
00:00:51.950 --> 00:00:58.340
So obviously it should be able to
contain more rules, if you want to.

13
00:00:58.340 --> 00:01:05.038
You need to iterate over them, so
we use the familiar pattern again,

14
00:01:05.038 --> 00:01:11.121
Object.keys,
&gt;&gt; Evan You: (this.$options.rules),

15
00:01:11.121 --> 00:01:13.480
but .forEach rule.

16
00:01:13.480 --> 00:01:20.290
So for each rule, we have a validate
function and a message, right?

17
00:01:20.290 --> 00:01:25.810
So we can just destruct it here,
in fact, validate, message.

18
00:01:27.060 --> 00:01:29.933
So our line's getting pretty long, but

19
00:01:29.933 --> 00:01:34.356
that should be fine.
&gt;&gt; Evan You: Missing a bracket here,

20
00:01:34.356 --> 00:01:38.764
okay.
&gt;&gt; Evan You: So we have validate

21
00:01:38.764 --> 00:01:44.031
a message, and obviously we want to,

22
00:01:44.031 --> 00:01:47.661
we also have key, right?

23
00:01:47.661 --> 00:01:51.800
In fact what we get here is the key,
I'm sorry,

24
00:01:51.800 --> 00:01:56.365
[LAUGH] what we get is the key,
and the rule itself is,

25
00:02:00.635 --> 00:02:03.715
&gt;&gt; Evan You: this.$options.rules[key],

26
00:02:03.715 --> 00:02:08.910
right, this is the actual rule,
&gt;&gt; Evan You: And

27
00:02:08.910 --> 00:02:16.396
I'll just ignore the, mm, there's some
syntax over here, okay, all right.

28
00:02:16.396 --> 00:02:21.862
So now what we wanna do is, for
each rule [COUGH] we want to watch

29
00:02:21.862 --> 00:02:26.810
the corresponding property
on the instance, right?

30
00:02:26.810 --> 00:02:29.034
So we use this $watch key,

31
00:02:29.034 --> 00:02:34.370
if you've never used $watch before,
just look it up in the API.

32
00:02:34.370 --> 00:02:40.080
This allows us to call a callback
whenever this watch property changes.

33
00:02:41.790 --> 00:02:43.877
And it takes a callback
which takes a new value.

34
00:02:46.006 --> 00:02:47.478
&gt;&gt; Evan You: We don't really care about

35
00:02:47.478 --> 00:02:49.724
the old value, so we'll just ignore it.

36
00:02:49.724 --> 00:02:52.302
[COUGH] So because we have the new value,

37
00:02:52.302 --> 00:02:57.440
what we need to do with the new value,
the value has changed, all right?

38
00:02:57.440 --> 00:03:02.950
So the new value,
we want to do rule.validate(newValue).

39
00:03:02.950 --> 00:03:07.842
Notice that the validate takes a value and

40
00:03:07.842 --> 00:03:12.173
returns a Boolean, all right, so,

41
00:03:12.173 --> 00:03:17.309
result.
&gt;&gt; Evan You: Our validation result, so

42
00:03:17.309 --> 00:03:23.871
if the result is not true,
&gt;&gt; Evan You: The validation has failed,

43
00:03:23.871 --> 00:03:26.719
and now we need to log the message.

44
00:03:30.291 --> 00:03:33.890
&gt;&gt; Evan You: And this is pretty much it.

45
00:03:33.890 --> 00:03:38.409
So really this exercise is
partially about understanding

46
00:03:38.409 --> 00:03:43.580
the boilerplate of how to apply
global functionality via a plugin.

47
00:03:43.580 --> 00:03:48.970
The other part is, know that inside
the plugin you can basically do anything.

48
00:03:48.970 --> 00:03:57.260
And it's really about knowing what
APIs to use to achieve the end result.

49
00:03:57.260 --> 00:03:59.470
So a lot of times when
you design a plugin,

50
00:03:59.470 --> 00:04:03.450
it's probably a good idea to
start with the desired API.

51
00:04:03.450 --> 00:04:06.940
Start think about what would
be a good experience if we

52
00:04:06.940 --> 00:04:08.675
want others to use the plugin.

53
00:04:08.675 --> 00:04:13.610
And then you figure out how you
can achieve that goal by going

54
00:04:13.610 --> 00:04:18.910
through the existing API service of Vue,
using these low level primitives.

55
00:04:18.910 --> 00:04:22.700
Assemble them together inside
the plugin to provide some higher-level

56
00:04:22.700 --> 00:04:27.590
abstract functionality that can be reused
and shared across multiple applications.

57
00:04:27.590 --> 00:04:30.430
So this just a very, very simple example.

58
00:04:30.430 --> 00:04:33.710
In fact in the afternoon we're
gonna expand on this one and

59
00:04:33.710 --> 00:04:35.450
make it into something
actually more useful.

