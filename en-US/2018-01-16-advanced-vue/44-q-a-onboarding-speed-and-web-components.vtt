WEBVTT

1
00:00:00.420 --> 00:00:01.550
&gt;&gt; Speaker 1: I have a question.

2
00:00:01.550 --> 00:00:05.800
I promised my manager I
would ask this when she

3
00:00:05.800 --> 00:00:08.570
allowed me to come to this workshop today.

4
00:00:08.570 --> 00:00:13.100
We are looking at transitioning a product
in the front end space away from

5
00:00:13.100 --> 00:00:16.890
an older framework, really can't react and
really can't beat them.

6
00:00:16.890 --> 00:00:21.371
What are,
&gt;&gt; Speaker 1: The major points that we

7
00:00:21.371 --> 00:00:22.640
should be aware of?

8
00:00:22.640 --> 00:00:27.635
Obviously we've read the React versus
Vue comparisons on the website.

9
00:00:27.635 --> 00:00:30.720
But talking about things like testing or
about translation,

10
00:00:30.720 --> 00:00:34.370
which we just covered briefly, what are
the big points I can go back to her and

11
00:00:34.370 --> 00:00:37.630
say, this is why we should use Vue?

12
00:00:39.190 --> 00:00:44.203
&gt;&gt; Evan You: Cuz this question really
depends on, so there was a recent article

13
00:00:44.203 --> 00:00:50.128
on Medium talking about someone who was
choosing frameworks and he chose Vue.

14
00:00:50.128 --> 00:00:55.063
And one thing to realize about making
these framework positions is that your

15
00:00:55.063 --> 00:00:59.920
company's situation really
kind of dictates the result.

16
00:00:59.920 --> 00:01:05.620
It's hard to make a blanket statement
to say Vue is better than React,

17
00:01:05.620 --> 00:01:08.592
unless we have a concrete situation.

18
00:01:08.592 --> 00:01:13.260
For example,
the Medium article talked about how he was

19
00:01:14.620 --> 00:01:18.350
having a Lexy app with a lot of bugs.

20
00:01:18.350 --> 00:01:24.110
And the cost of migrating it,
upgrading the old app was just too high.

21
00:01:24.110 --> 00:01:25.830
And they have limited resources.

22
00:01:25.830 --> 00:01:28.220
There was only one developer at that time.

23
00:01:28.220 --> 00:01:33.780
And they need to be able to very quickly
onboard new devs onto this new app and

24
00:01:33.780 --> 00:01:35.642
they need to rewrite it.

25
00:01:35.642 --> 00:01:41.471
And so development efficiency and
time pressure all plays into this,

26
00:01:41.471 --> 00:01:47.920
of how fast can you build something and
how fast can you onboard new devs to it?

27
00:01:47.920 --> 00:01:51.835
And personally,
I feel that in terms of onboarding speed,

28
00:01:51.835 --> 00:01:56.310
Vue is probably the best among
the current mainstream frameworks.

29
00:01:58.290 --> 00:02:03.154
So let's say, if you read through
the docs, and you are already pretty good

30
00:02:03.154 --> 00:02:07.410
at JavaScript, you should be able
to pick up Vue reasonably fast.

31
00:02:07.410 --> 00:02:12.020
In a day or two, you should be able to
do some basic things, and in a week, you

32
00:02:12.020 --> 00:02:17.010
should feel very comfortable contributing
to something in production, right?

33
00:02:18.160 --> 00:02:23.090
Which is not necessarily the case when
we speak about some bigger frameworks,

34
00:02:23.090 --> 00:02:25.190
which are more complex.

35
00:02:25.190 --> 00:02:28.110
There are more concepts you need to be,

36
00:02:28.110 --> 00:02:32.890
you have to just have to grab more
concepts to be able to feel confident.

37
00:02:32.890 --> 00:02:35.130
I think that's one big thing.

38
00:02:35.130 --> 00:02:39.580
So, if onboarding speed
is really important for

39
00:02:39.580 --> 00:02:45.120
the current timeline, then I think
Vue would be a really good choice.

40
00:02:45.120 --> 00:02:48.020
That's one of the biggest advantages,
I would say.

41
00:02:48.020 --> 00:02:49.370
Because eventually,

42
00:02:49.370 --> 00:02:54.025
if you have enough time in the long run,
&gt;&gt; Evan You: All

43
00:02:54.025 --> 00:02:58.486
the three major frameworks are able
to sort of provide the necessary

44
00:02:58.486 --> 00:03:01.640
bits that you'll eventually need.

45
00:03:01.640 --> 00:03:10.130
But another aspect of it is productivity
or when we talk about productivity,

46
00:03:10.130 --> 00:03:14.730
it's kind of important to realize
that it's not always objective.

47
00:03:14.730 --> 00:03:19.460
Productivity has a lot to do with
the subjective preference of your team.

48
00:03:19.460 --> 00:03:24.820
If your team, so
I've observed that developers can kind of

49
00:03:24.820 --> 00:03:28.580
very naturally falls into different camps
when there are preferences involved.

50
00:03:28.580 --> 00:03:32.970
And a lot of times,
you cannot really easily

51
00:03:32.970 --> 00:03:37.300
force people to overcome their
preference in a lot of ways.

52
00:03:37.300 --> 00:03:41.409
Like the JSX versus template debate,
I've just seen it so many times, so

53
00:03:41.409 --> 00:03:43.741
many people have voiced their opinions.

54
00:03:43.741 --> 00:03:47.176
But still this conversation
just goes on and on, and

55
00:03:47.176 --> 00:03:51.170
sometimes it's just really
hard to change people's mind.

56
00:03:51.170 --> 00:03:55.955
And even if you believe something is
objectively superior, if the other

57
00:03:55.955 --> 00:04:01.170
developer just hates it, he will never
be really productive with it, right?

58
00:04:01.170 --> 00:04:04.820
If he doesn't fall in love with it, he
probably won't enjoy working on the app.

59
00:04:04.820 --> 00:04:06.950
So his productivity will naturally fall.

60
00:04:08.190 --> 00:04:15.020
So I think it's important to
actually let the team try things and

61
00:04:15.020 --> 00:04:19.922
get their direct feedback on whether
they enjoy working with the framework.

62
00:04:19.922 --> 00:04:23.580
if they do, then it's a good indicator
that they will be more productive than

63
00:04:23.580 --> 00:04:25.860
with, say, another framework.

64
00:04:25.860 --> 00:04:29.760
And I wouldn't say Vue is
always more pleasant one.

65
00:04:29.760 --> 00:04:32.850
Because some people do prefer React or
prefer Angular.

66
00:04:32.850 --> 00:04:34.250
So it's important to find it out for

67
00:04:34.250 --> 00:04:38.720
your team because every team will
consist of different developers, yeah.

68
00:04:38.720 --> 00:04:41.060
So try it out is I think is
the most important thing.

69
00:04:42.970 --> 00:04:45.430
So to answer your question,

70
00:04:45.430 --> 00:04:48.670
I wouldn't necessarily believe your
company would be better off using View.

71
00:04:48.670 --> 00:04:53.097
It really depends on the result
of actually trying it, yeah.

72
00:04:54.960 --> 00:04:57.250
&gt;&gt; Speaker 3: What do you
think about web components?

73
00:04:57.250 --> 00:05:02.000
Is it possible that in the future
View will use web components,

74
00:05:02.000 --> 00:05:04.480
shadow DOM, stuff like that?

75
00:05:04.480 --> 00:05:08.568
&gt;&gt; Evan You: So there is a possibility
because we do have, [COUGH] say, for

76
00:05:08.568 --> 00:05:13.540
example, Angular 2.04 does have
different modes, where one of it is

77
00:05:13.540 --> 00:05:18.773
using actual web components, the other
is kind of implicitly falling back.

78
00:05:18.773 --> 00:05:23.797
It's feasible that in the future,
when web components are indeed

79
00:05:23.797 --> 00:05:29.090
supported in all browsers or
cover more than 98% of your user base,

80
00:05:29.090 --> 00:05:34.980
we will eventually ship a version
that leverages some of the features.

81
00:05:34.980 --> 00:05:37.413
It will not necessarily be
full on web components.

82
00:05:37.413 --> 00:05:42.524
We will probably be able to leverage
shadow DOM for style encapsulation.

83
00:05:42.524 --> 00:05:47.910
We will probably be able to leverage some
of the features that comes along with it.

84
00:05:47.910 --> 00:05:53.643
But I still believe that web
components ultimately will probably

85
00:05:53.643 --> 00:06:00.010
serve better as a form of distribution for
interop between frameworks.

86
00:06:01.140 --> 00:06:05.990
So some of the libraries
are pretty good at, for

87
00:06:05.990 --> 00:06:09.460
example, svelte is pretty good
at compiling itself down into

88
00:06:10.970 --> 00:06:13.590
the formats that doesn't
need a big runtime.

89
00:06:13.590 --> 00:06:17.720
So those are really good for distributing,
wrap it up as a web component.

90
00:06:17.720 --> 00:06:21.060
You can throw in any framework in it,
you can use it.

91
00:06:21.060 --> 00:06:24.150
I think that's the biggest value
of web components at this moment.

92
00:06:25.670 --> 00:06:31.325
The biggest hurdle is
still browser support.

93
00:06:31.325 --> 00:06:35.839
And also we see that React has
brought up a lot of ideas, for

94
00:06:35.839 --> 00:06:40.082
example, declarative and
functional programming,

95
00:06:40.082 --> 00:06:46.190
that are not necessarily problems that
are even addressed by web components.

96
00:06:46.190 --> 00:06:50.760
So web components isn't going to
be this sort of once and for all.

97
00:06:50.760 --> 00:06:53.810
And the framework, well,
I don't think that's going to happen.

98
00:06:53.810 --> 00:06:56.900
It's more or less going to be this,

99
00:06:56.900 --> 00:07:02.540
I think it's because value it sort
of bringing about these upcoming new

100
00:07:02.540 --> 00:07:06.350
primitives that frameworks
can then leverage.

101
00:07:06.350 --> 00:07:10.250
To simplify their own implementations or
build on top of it, and

102
00:07:10.250 --> 00:07:13.860
then facilitate interop
between different frameworks.

103
00:07:16.440 --> 00:07:17.840
Yeah, that's my view of it.

104
00:07:21.545 --> 00:07:26.134
&gt;&gt; Speaker 3: Can you elaborate when we
should choose Vue X with Vue versus Redux

105
00:07:26.134 --> 00:07:27.570
with Vue?

106
00:07:27.570 --> 00:07:30.384
&gt;&gt; Evan You: Well, my opinion is,
unless you are super,

107
00:07:30.384 --> 00:07:34.840
super into immutable and functional stuff,
you should always use UX.

108
00:07:34.840 --> 00:07:42.440
Because it's designed to work with Vuw and
better dev tools integration.

109
00:07:42.440 --> 00:07:49.875
And also, it's just the way
that UX relies on mutations

110
00:07:49.875 --> 00:07:55.470
fits more naturally with how Vue detect
changes and its rendering architecture.

111
00:07:55.470 --> 00:07:59.020
So, it's naturally more automized
out of the box, I would say.

112
00:08:00.210 --> 00:08:04.053
With Redux,
it's still pretty efficient but

113
00:08:04.053 --> 00:08:07.310
just not as efficient as Vue X would be.

114
00:08:08.560 --> 00:08:13.510
And also another thing is Vue X,
if from, say, a hiring perspective,

115
00:08:13.510 --> 00:08:17.816
since Vue X is the official state
management pattern for Vue.

116
00:08:17.816 --> 00:08:22.880
So if you're hiring a new Vue dev,
he or she will probably already

117
00:08:22.880 --> 00:08:27.870
somewhat familiar with Vue X,
but not necessarily with Redux.

