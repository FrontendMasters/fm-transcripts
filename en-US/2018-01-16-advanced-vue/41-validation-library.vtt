WEBVTT

1
00:00:00.150 --> 00:00:02.120
&gt;&gt; Evan You: And
we'll actually find this pretty familiar.

2
00:00:02.120 --> 00:00:06.200
So let's look at the usage first, okay?

3
00:00:06.200 --> 00:00:08.930
Just ignore this super
long regular expression.

4
00:00:08.930 --> 00:00:11.710
It's just for
checking whether a string is an email.

5
00:00:11.710 --> 00:00:13.930
And we have an app, we have some data.

6
00:00:13.930 --> 00:00:15.660
This is so small, I'm sorry.

7
00:00:17.860 --> 00:00:20.730
We have an app, we have some data.

8
00:00:20.730 --> 00:00:26.000
We have the text, which is foo, and
email, which starts with an empty string.

9
00:00:26.000 --> 00:00:29.305
And notice this custom option,
validations.

10
00:00:29.305 --> 00:00:31.130
So see, this looks very,

11
00:00:31.130 --> 00:00:35.290
very similar to the plugin that
we wrote in the morning, right?

12
00:00:35.290 --> 00:00:39.331
It's a validations custom
option contains text and

13
00:00:39.331 --> 00:00:44.560
e-mail and each of them contains a
validate function and a message function.

14
00:00:44.560 --> 00:00:46.934
Notice this message is
not just a static string.

15
00:00:46.934 --> 00:00:52.300
It is actually a function that takes
the key and value of the current value so

16
00:00:52.300 --> 00:00:55.820
that you can generate dynamic
warning messages at one time.

17
00:00:56.900 --> 00:01:01.980
So, text must be,
length must be bigger than 5.

18
00:01:01.980 --> 00:01:04.100
And for email,

19
00:01:04.100 --> 00:01:07.970
we just tested against the email regular
expression to check whether it's valid.

20
00:01:09.840 --> 00:01:14.290
And the good thing about being
in JavaScript is, right,

21
00:01:14.290 --> 00:01:16.770
this function you can replace
it with anything you like.

22
00:01:16.770 --> 00:01:21.300
So if the library provides some built in,

23
00:01:21.300 --> 00:01:25.840
you can say, you can have helper functions

24
00:01:25.840 --> 00:01:31.200
that just help you create these
validator functions for you, right?

25
00:01:31.200 --> 00:01:36.370
And you can also have for

26
00:01:36.370 --> 00:01:44.879
example compose (greaterThan(5),
allCaps().

27
00:01:44.879 --> 00:01:49.070
So you can sort of have all these.

28
00:01:49.070 --> 00:01:52.900
In JavaScript land you can
play with your creativity and

29
00:01:52.900 --> 00:01:56.780
compose all these validation rules and
make them work together.

30
00:01:56.780 --> 00:01:59.270
Or you can make your plugin
more powerful by accepting

31
00:01:59.270 --> 00:02:01.850
an array of validated functions.

32
00:02:01.850 --> 00:02:05.258
That's all up to you, but for
now we're just gonna do value.

33
00:02:08.623 --> 00:02:12.890
&gt;&gt; Evan You: It must have
the minimum length of five, okay?

34
00:02:12.890 --> 00:02:18.900
So and then we have,
this validate function doesn't really.

35
00:02:19.960 --> 00:02:22.100
We'll use it when we submit the form.

36
00:02:22.100 --> 00:02:24.770
So when the user attempts
to submit the form,

37
00:02:24.770 --> 00:02:30.260
we'll again do a check to prevent it from
submitting if the form is not valid.

38
00:02:31.380 --> 00:02:36.896
And notice that we're using this thing,
this sort of like, what is this $v thing?

39
00:02:36.896 --> 00:02:42.610
So this $v is going to be sort of
injected or provided by the plugging.

40
00:02:44.620 --> 00:02:49.473
And this $v will be a sort of a big
object that contains the whole

41
00:02:49.473 --> 00:02:53.360
state of your current validation state.

42
00:02:53.360 --> 00:02:57.320
So this top level valid property
essentially means the whole form

43
00:02:57.320 --> 00:02:58.520
is valid or not.

44
00:02:59.560 --> 00:03:03.370
If any of the fields fail a validation,
this value will be false.

45
00:03:06.150 --> 00:03:10.310
And then there's some other things
that if you look at the template here,

46
00:03:11.500 --> 00:03:16.560
we have a form and on the forms submit
we will call the validate function.

47
00:03:16.560 --> 00:03:19.916
So that will help us prevent default,
preventing the page from reloading.

48
00:03:22.880 --> 00:03:25.959
&gt;&gt; Evan You: And input with v-model.

49
00:03:25.959 --> 00:03:29.580
Pretty straightforward,
just syncs the input into our online data.

50
00:03:31.260 --> 00:03:32.140
And look at this part.

51
00:03:32.140 --> 00:03:35.075
This is the part where we
display validation errors.

52
00:03:35.075 --> 00:03:38.730
So notice that v-if equals not valid,

53
00:03:38.730 --> 00:03:44.500
if this block only shows up if
the form is not currently valid.

54
00:03:45.560 --> 00:03:47.280
And it has a red color.

55
00:03:48.470 --> 00:03:52.640
So the good thing here is notice
that we are responsible for

56
00:03:52.640 --> 00:03:55.280
rendering form errors ourselves because

57
00:03:56.960 --> 00:04:01.860
from the plugins perspective all
it does is provide some state.

58
00:04:01.860 --> 00:04:04.980
How to present that state,
how to present it to the user,

59
00:04:04.980 --> 00:04:08.120
how to style all of the messages,
where to place them?

60
00:04:08.120 --> 00:04:10.150
Completely up to you.

61
00:04:10.150 --> 00:04:13.640
So this gives you more room for
customization and flexibility.

62
00:04:14.980 --> 00:04:18.319
So we can just iterate through $v.errors.

63
00:04:18.319 --> 00:04:20.440
So this is another API requirement.

64
00:04:20.440 --> 00:04:25.070
The $v should expose an array of errors,
which can just be strings.

65
00:04:25.070 --> 00:04:26.830
So we're just like show them here.

66
00:04:28.450 --> 00:04:33.137
And then we have a form submit button,
which you can

67
00:04:33.137 --> 00:04:38.410
disable the button based on
the valid status of the form.

68
00:04:38.410 --> 00:04:44.800
So let's take a look at, so
if we check out the solutions.

69
00:04:45.990 --> 00:04:46.490
Oops!

70
00:04:52.580 --> 00:05:01.350
And run the code,
this it how it looks like, so.

71
00:05:01.350 --> 00:05:04.660
Our default state already
triggers warnings.

72
00:05:04.660 --> 00:05:10.090
Text should have a min length of 5,
but got 3 and the email is empty so

73
00:05:10.090 --> 00:05:14.860
it's not valid, and the whole form
is disabled because it's not valid.

74
00:05:14.860 --> 00:05:16.580
So let's fill in something.

75
00:05:16.580 --> 00:05:23.240
Once we have a string longer than 5 the
first warning disappears, and let's just

76
00:05:25.830 --> 00:05:29.340
and it's valid so
this email address gets a lot of emails.

77
00:05:29.340 --> 00:05:31.360
And it's actually a valid email address.

78
00:05:33.610 --> 00:05:36.856
Because it's used so often it's
almost like DDoS'ed all the time.

79
00:05:41.463 --> 00:05:43.449
&gt;&gt; Evan You: So how do we implement that?

80
00:05:45.727 --> 00:05:51.610
&gt;&gt; Evan You: Let's go back to the master
branch and try to implement that.

81
00:05:51.610 --> 00:05:53.906
So remember for any plugin,

82
00:05:53.906 --> 00:05:59.180
we should have an install method
which takes Vue as the argument.

83
00:06:00.997 --> 00:06:05.620
&gt;&gt; Evan You: And, let's think about
what we need to do for this plug-in.

84
00:06:05.620 --> 00:06:09.830
We need to be able to process
this custom validation's object.

85
00:06:09.830 --> 00:06:14.010
So, that means we need
to have a global mixing

86
00:06:15.360 --> 00:06:17.816
that injects the created
hook into every component.

87
00:06:19.340 --> 00:06:25.729
And then we check if
(this.$options.validations),

88
00:06:25.729 --> 00:06:30.079
this is where we need to do work, right?

89
00:06:33.044 --> 00:06:38.146
&gt;&gt; Evan You: So some of the,
let's see if we actually

90
00:06:38.146 --> 00:06:42.970
should use the created hook, right?

91
00:06:42.970 --> 00:06:44.330
There's really, so

92
00:06:44.330 --> 00:06:50.230
some of you might start to think you can
set up watchers in the created hook.

93
00:06:50.230 --> 00:06:53.800
Each of the properties run
through the validations, and

94
00:06:53.800 --> 00:06:59.570
then set the data onto the $v right,
that works.

95
00:06:59.570 --> 00:07:00.920
That could, indeed, work.

96
00:07:00.920 --> 00:07:03.050
But that feels very imperative.

97
00:07:03.050 --> 00:07:06.290
Is there a more declarative
way to think about this?

98
00:07:08.090 --> 00:07:09.910
The fact is, there is.

99
00:07:09.910 --> 00:07:11.990
So, let's look at this $v thing.

100
00:07:11.990 --> 00:07:13.520
What should it be?

101
00:07:13.520 --> 00:07:19.340
Should it be just an object on
the instance that we can mutate?

102
00:07:19.340 --> 00:07:25.880
Or could it just be some declarative
mapping from our current form state?

103
00:07:25.880 --> 00:07:29.320
So if we take that approach,

104
00:07:31.980 --> 00:07:38.300
let's actually mix it in as
a computed property, right?

105
00:07:38.300 --> 00:07:39.339
So you can do this.

106
00:07:41.410 --> 00:07:44.497
And now inside this computed property,

107
00:07:44.497 --> 00:07:49.687
you still have access to
this.$options.validations, right?

108
00:07:54.948 --> 00:07:57.506
&gt;&gt; Evan You: So
a more optimized version of

109
00:07:57.506 --> 00:08:01.435
this plugin would only
make seeing this $v.

110
00:08:01.435 --> 00:08:07.290
Property if
this.$options.validations is found.

111
00:08:07.290 --> 00:08:11.612
So you can do something like- created() {

112
00:08:11.612 --> 00:08:18.788
if(this.$options.validations) {

113
00:08:18.788 --> 00:08:23.510
this.$options So at this point,

114
00:08:23.510 --> 00:08:28.400
unfortunately, the computer properties
we have are already being initialized.

115
00:08:28.400 --> 00:08:34.046
But if you use before create
&gt;&gt; Evan You: [INAUDIBLE] before create,

116
00:08:34.046 --> 00:08:38.570
computer properties, the reactivity
system has not been set up yet.

117
00:08:38.570 --> 00:08:41.967
So here is your chance to
kind of cheat the system and

118
00:08:41.967 --> 00:08:46.598
like sort of
&gt;&gt; Evan You: just do this.

119
00:08:54.317 --> 00:08:59.696
&gt;&gt; Evan You: So
you essentially create a, overwrite this

120
00:09:05.070 --> 00:09:06.600
&gt;&gt; Evan You: See what we're doing here?

121
00:09:06.600 --> 00:09:10.500
We're not, so we need to retain
whatever is already declared there.

122
00:09:10.500 --> 00:09:11.725
But this might be on the find.

123
00:09:11.725 --> 00:09:15.411
So we're just using
object.assign here here because

124
00:09:15.411 --> 00:09:17.662
it can handle undefined values.

125
00:09:17.662 --> 00:09:22.632
Essentially we want to clone everything,
if there is any, into this empty object,

126
00:09:22.632 --> 00:09:26.700
and then eventually we add
this $v functionality to it.

127
00:09:26.700 --> 00:09:34.186
S inside this $v we want
to do return something,

128
00:09:34.186 --> 00:09:39.482
and it should probably have errors

129
00:09:39.482 --> 00:09:45.340
if there are any, and a valid status.

130
00:09:46.670 --> 00:09:53.526
So the question becomes let valid = true,

131
00:09:53.526 --> 00:09:57.722
const errors = an array.

132
00:09:59.140 --> 00:10:02.830
Now the question becomes,
how do we do this?

133
00:10:02.830 --> 00:10:10.940
How do we map the current status
to these valid or errors?

134
00:10:11.950 --> 00:10:14.380
This becomes much more straightforward.

135
00:10:14.380 --> 00:10:19.680
This is just synchronous computation,
you're going from some state to another.

136
00:10:19.680 --> 00:10:25.060
And where do we get the form
state that we care about?

137
00:10:26.660 --> 00:10:31.808
Notice that we have this so
let's extract it out, const rules.

138
00:10:37.653 --> 00:10:41.120
&gt;&gt; Evan You: Again we're gonna
iterate through the rules object.

139
00:10:42.510 --> 00:10:47.550
Keys, rules forEach(key).

140
00:10:51.130 --> 00:10:56.970
And in here we'll have rule = rules(key).

141
00:10:58.650 --> 00:11:05.450
Const currentvalue =, now,
we are trying to get the value.

142
00:11:05.450 --> 00:11:07.360
So, where do we get this?

143
00:11:07.360 --> 00:11:09.880
Just take it from this, right?

144
00:11:09.880 --> 00:11:12.580
Because we are inside a computed property,

145
00:11:12.580 --> 00:11:15.940
we have access to this which
is component instance.

146
00:11:15.940 --> 00:11:19.980
And this key actually
point to the field of this

147
00:11:19.980 --> 00:11:21.530
particular role is interested then.

148
00:11:22.710 --> 00:11:27.290
Now this is very similar to what we did in
the plugging that we did in the morning.

149
00:11:27.290 --> 00:11:31.531
We can just do const result =

150
00:11:31.531 --> 00:11:38.299
rule.validate,
&gt;&gt; Evan You: So

151
00:11:38.299 --> 00:11:41.414
let me just do this, validate(value).

152
00:11:42.450 --> 00:11:42.950
Right?

153
00:11:44.160 --> 00:11:48.380
If the result fails
something should happen and

154
00:11:48.380 --> 00:11:53.870
that is setting the whole form to invalid.

155
00:11:53.870 --> 00:11:57.350
Invalidate the whole form if
any one of them fails right?

156
00:11:59.080 --> 00:12:06.130
And we need to push a message into
the errors, and where do we get that?

157
00:12:06.130 --> 00:12:09.460
We can do push(rule.message).

158
00:12:09.460 --> 00:12:11.340
Remember message is also a function.

159
00:12:13.000 --> 00:12:17.690
It takes the key, it takes the value,
and that's pretty much it.

160
00:12:17.690 --> 00:12:21.490
So we've,
we're iterating through the rules.

161
00:12:21.490 --> 00:12:27.100
For each rule, we'll retrieve the current
value and run the validate function.

162
00:12:27.100 --> 00:12:32.360
If the result does not validate,
we will set the whole form to

163
00:12:32.360 --> 00:12:37.310
invalid status and push the corresponding
message into our errors array.

164
00:12:37.310 --> 00:12:38.500
And after we do this,

165
00:12:38.500 --> 00:12:42.290
we simply return this object that
contains the valid field and errors.

166
00:12:42.290 --> 00:12:44.660
Now this is just a computer property.

167
00:12:44.660 --> 00:12:51.270
So notice that this is where
reactivity is registered.

168
00:12:51.270 --> 00:12:53.360
When we access this key,

169
00:12:54.890 --> 00:12:59.230
this is similar to a dot access which
triggers the getter on our instance.

170
00:12:59.230 --> 00:13:04.790
So it registered the activity,
which means when any of these fields

171
00:13:04.790 --> 00:13:10.620
change, our computed property
will be properly updated.

172
00:13:12.980 --> 00:13:15.240
So, let's take a look.

173
00:13:18.340 --> 00:13:19.360
It doesn't work.

174
00:13:19.360 --> 00:13:20.020
Let's see.

175
00:13:21.560 --> 00:13:25.605
It's not defined by reference
to our render, okay.

176
00:13:25.605 --> 00:13:31.477
So this $v is
&gt;&gt; Evan You: not being defined.

177
00:13:35.211 --> 00:13:41.559
&gt;&gt; Evan You: Okay, so
&gt;&gt; Evan You: options computed.

178
00:13:47.852 --> 00:13:48.352
&gt;&gt; Evan You: Hm.

179
00:13:49.770 --> 00:13:54.500
Well for the, so just to be safe,

180
00:13:54.500 --> 00:13:59.650
our monkey patch and options scheme
may not be working properly.

181
00:13:59.650 --> 00:14:05.974
So what we want to do is
take this whole part out.

182
00:14:08.283 --> 00:14:12.632
&gt;&gt; Evan You: And
instead we will simply mix this computing

183
00:14:12.632 --> 00:14:15.729
property into every instance.

184
00:14:18.790 --> 00:14:23.248
&gt;&gt; Evan You: Well,
this my screen is too big so

185
00:14:23.248 --> 00:14:28.440
the sensitivity of
the scrolling is much too high.

186
00:14:33.370 --> 00:14:36.010
Right, so we can take these out.

187
00:14:37.110 --> 00:14:37.610
Okay.

188
00:14:39.780 --> 00:14:41.880
Still this on work.

189
00:14:41.880 --> 00:14:43.380
Rules is not defined.

190
00:14:46.300 --> 00:14:46.800
Okay.

191
00:14:50.925 --> 00:14:52.870
&gt;&gt; Evan You: Const rules.

192
00:14:52.870 --> 00:14:55.942
You put this .options.validations.

193
00:15:00.515 --> 00:15:07.538
&gt;&gt; Evan You: If (rules) well actually
you don't so object keys works on.

194
00:15:10.145 --> 00:15:11.180
&gt;&gt; Evan You: Let's just do this.

195
00:15:12.798 --> 00:15:15.313
Okay,
&gt;&gt; Evan You: So

196
00:15:15.313 --> 00:15:17.199
we're achieving the desired result here.

197
00:15:21.752 --> 00:15:25.803
&gt;&gt; Evan You: And
always just a single computed property,

198
00:15:25.803 --> 00:15:33.250
really all it does is It's actually
pretty functional if you think about it.

199
00:15:33.250 --> 00:15:36.190
So we have, this is the input.

200
00:15:36.190 --> 00:15:42.700
The validation is the input and
this key is also input.

201
00:15:42.700 --> 00:15:48.510
So the data source is the current state of
your component and these validation rule.

202
00:15:48.510 --> 00:15:53.740
All we do is compute the current
status based on the source data and

203
00:15:53.740 --> 00:15:56.580
then return it from within
a computed property.

204
00:15:56.580 --> 00:16:01.350
And with this computed property,
we can do arbitrary rendering styling,

205
00:16:01.350 --> 00:16:05.430
decide how to actually present
these error messages to the user

206
00:16:07.340 --> 00:16:11.790
and you can decide preventing form
submissions, disabling buttons.

207
00:16:11.790 --> 00:16:16.500
Everything is state driven so this

208
00:16:16.500 --> 00:16:20.860
is sort of the way you do
model based validation.

209
00:16:22.280 --> 00:16:26.160
And it actually is very similar
to how Vuelidate works.

210
00:16:26.160 --> 00:16:28.810
So if you like this style of form
validation you should probably check

211
00:16:28.810 --> 00:16:29.460
out Vuelidate.

