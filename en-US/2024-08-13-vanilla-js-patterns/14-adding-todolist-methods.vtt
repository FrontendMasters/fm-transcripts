WEBVTT

1
00:00:00.161 --> 00:00:01.760
&gt;&gt; Maximiliano Firtman: Well,
what else do we need in the list?

2
00:00:01.760 --> 00:00:07.159
Well, actually, the actual list behavior,
that's actually, well,

3
00:00:07.159 --> 00:00:12.310
it depends on the behavior you want,
the American or the English one.

4
00:00:13.840 --> 00:00:18.830
My brain sometimes is doing a mix of
British English and American English.

5
00:00:20.238 --> 00:00:23.601
So,
&gt;&gt; Maximiliano Firtman: What's

6
00:00:23.601 --> 00:00:24.298
the list behavior?

7
00:00:24.298 --> 00:00:30.377
Well, actually, we need to add an item,

8
00:00:30.377 --> 00:00:37.178
we need to delete an item,
and delete an item.

9
00:00:37.178 --> 00:00:42.876
We're going to add also some properties or
methods, actually,

10
00:00:42.876 --> 00:00:47.756
that we will use later,
such as find where we get a text.

11
00:00:47.756 --> 00:00:52.786
And we will find in the list if
the to-do is already there, okay?

12
00:00:52.786 --> 00:00:56.594
Also we have a replace list that
that we will use later, but

13
00:00:56.594 --> 00:00:59.015
we can add the code later if you want.

14
00:00:59.015 --> 00:01:04.644
But why replace list, because maybe we
wanna be thinking about the future.

15
00:01:04.644 --> 00:01:08.506
I wanna get the list from the database,
from somewhere else,

16
00:01:08.506 --> 00:01:11.401
and I wanna just take that and
replace my list,

17
00:01:11.401 --> 00:01:15.950
my whole list with the list I receive
as an argument, okay, make sense?

18
00:01:15.950 --> 00:01:20.198
And then I need to fill the gaps here,
but it's not really a big deal.

19
00:01:21.229 --> 00:01:25.999
First, to add the list,
I can just go and say, hey,

20
00:01:25.999 --> 00:01:29.372
this.data.add(item), okay?

21
00:01:29.372 --> 00:01:34.660
Yeah, it's okay, but
if I do that, I'm skipping that

22
00:01:34.660 --> 00:01:39.836
part that I mentioned before
that should check first if

23
00:01:39.836 --> 00:01:45.238
there is no duplicates from
a value option point of view,

24
00:01:45.238 --> 00:01:49.201
if I already have that Todo or not, okay?

25
00:01:49.201 --> 00:01:53.619
So then I will add something here.

26
00:01:53.619 --> 00:01:58.561
Another thing is that we will see later
if you're going to receive the item or

27
00:01:58.561 --> 00:01:59.575
just the text.

28
00:01:59.575 --> 00:02:02.826
I think that we may receive the text.

29
00:02:02.826 --> 00:02:07.377
So not the item, because from the outside,

30
00:02:07.377 --> 00:02:13.292
they don't see items, okay,
they see just the record.

31
00:02:13.292 --> 00:02:19.921
So maybe that, I think it's okay,
so let's do replaceList first.

32
00:02:19.921 --> 00:02:22.275
We will just say this is the simplest one,

33
00:02:22.275 --> 00:02:25.515
this data equals the list that
we receive as an argument.

34
00:02:25.515 --> 00:02:28.068
So we need to receive
the list as an argument.

35
00:02:28.068 --> 00:02:30.537
So we're going to receive a list, and

36
00:02:30.537 --> 00:02:35.488
we're going to replace our private
data field with that, that's simple.

37
00:02:36.918 --> 00:02:41.355
For add, so
let's fill the problem that we have here.

38
00:02:41.355 --> 00:02:48.565
Again, what's the problem, what happens
if I go and add here lunch twice?

39
00:02:48.565 --> 00:02:51.045
I don't wanna add lunch twice.

40
00:02:51.045 --> 00:02:55.498
And even if I have a set, okay,
the problem is that because I'm creating

41
00:02:55.498 --> 00:02:59.303
new objects all the time,
it's not gonna make a difference.

42
00:02:59.303 --> 00:03:03.302
So I need to go and check manually, so

43
00:03:03.302 --> 00:03:07.946
I need to check if
the todo already exists,

44
00:03:07.946 --> 00:03:11.047
okay, Exists, like that.

45
00:03:11.047 --> 00:03:17.732
Because it's a set, I mean, I can use
a filter to check if it's there or not.

46
00:03:17.732 --> 00:03:21.564
The problem is that set does
not support filter or map or

47
00:03:21.564 --> 00:03:26.990
other of the array method that we
are used to in functional programming.

48
00:03:26.990 --> 00:03:32.143
So something quick that we can do, I mean,
there are other ways to solve the problem,

49
00:03:32.143 --> 00:03:35.375
but something quick is we
can quick an array version.

50
00:03:35.375 --> 00:03:39.422
So we can say Array.from(this.#data),

51
00:03:39.422 --> 00:03:44.411
and now because it's an array,
we can filter the array.

52
00:03:44.411 --> 00:03:50.373
And we can try to find, if I have a todo,
we can use our equals function.

53
00:03:50.373 --> 00:03:55.213
Remember, we did an equals function here,
and we're going to use that one.

54
00:03:55.213 --> 00:04:01.184
So why I'm using this.text,
why I'm using equals and

55
00:04:01.184 --> 00:04:04.625
not this comparison directly?

56
00:04:04.625 --> 00:04:08.180
Because in the future,
I might add more properties.

57
00:04:08.180 --> 00:04:12.656
So it's better to the item
to include the logic inside

58
00:04:12.656 --> 00:04:15.670
the item to decouple the problem.

59
00:04:15.670 --> 00:04:19.200
We always need to decouple our problems,
okay?

60
00:04:19.200 --> 00:04:24.223
So then I'm going to say if t.equals

61
00:04:24.223 --> 00:04:29.894
is equal to the item that we receive here,

62
00:04:29.894 --> 00:04:35.090
okay, so this item that we have here.

63
00:04:35.090 --> 00:04:39.725
And we are going to check if the filter
actually returns another array,

64
00:04:39.725 --> 00:04:45.289
if the length of the array,
&gt;&gt; Maximiliano Firtman: Is greater than 0,

65
00:04:45.289 --> 00:04:49.545
I think I have a parentheses issue,
and there we are.

66
00:04:49.545 --> 00:04:55.725
So if I have more than 0 in the array,
it means that it's array there.

67
00:04:55.725 --> 00:05:00.729
By the way, it should be 0 or 1 only
because we're not adding duplicates.

68
00:05:00.729 --> 00:05:05.664
So then we are going to add
only if it doesn't exist.

69
00:05:08.366 --> 00:05:12.310
&gt;&gt; Maximiliano Firtman: If it already
exists, I'm not going to add anything to

70
00:05:12.310 --> 00:05:16.627
the list,
&gt;&gt; Maximiliano Firtman: Okay?

71
00:05:16.627 --> 00:05:21.955
For deleting the data,
I actually need to do something similar.

72
00:05:21.955 --> 00:05:26.591
So I actually need to
loop through the array,

73
00:05:26.591 --> 00:05:31.105
by the way, let's call this item on every,

74
00:05:31.105 --> 00:05:34.646
just to use the same pattern here.

75
00:05:34.646 --> 00:05:40.315
I don't even remember exactly the name
I used on the companion website.

76
00:05:40.315 --> 00:05:45.488
So I will delete the item, so
I convert it into an array,

77
00:05:45.488 --> 00:05:49.903
and I need to find the todo
that I need to delete.

78
00:05:49.903 --> 00:05:56.709
And I will filter again, and I will find,
for every todo I will check.

79
00:05:56.709 --> 00:06:01.649
If it's equals, I can call equals again

80
00:06:01.649 --> 00:06:05.726
to the one that I receive, okay?

81
00:06:05.726 --> 00:06:11.663
And by the way, I can also say this is
always an array, so I should check (0).

82
00:06:11.663 --> 00:06:14.873
But the problem is that
maybe it doesn't exist, so

83
00:06:14.873 --> 00:06:20.113
I should check if someone is asking me to
delete that, to do that, it's not there.

84
00:06:20.113 --> 00:06:25.723
It shouldn't happen, okay, but
anyway, we can leave here a flag,

85
00:06:25.723 --> 00:06:30.895
check for later, okay,
just to focus on the important part.

86
00:06:30.895 --> 00:06:35.683
So then I can talk to my data, set, and

87
00:06:35.683 --> 00:06:42.284
delete there the todoToDelete,
okay, like that.

88
00:06:42.284 --> 00:06:49.015
And finding by text,
it's also going to be taking the array and

89
00:06:49.015 --> 00:06:54.858
returning if we find,
&gt;&gt; Maximiliano Firtman: A todo

90
00:06:54.858 --> 00:06:58.861
that is equals to the, by the way,

91
00:06:58.861 --> 00:07:05.664
I think I have a problem here
that we will solve later.

92
00:07:05.664 --> 00:07:10.141
Because what we receive
here to call equals, okay,

93
00:07:10.141 --> 00:07:14.820
the problem that we have on
delete a list is that later,

94
00:07:14.820 --> 00:07:17.770
I think that when we are deleting,

95
00:07:17.770 --> 00:07:22.564
we don't have the item,
we have just the text.

96
00:07:22.564 --> 00:07:26.773
So if we call equals, okay,
when we get the equals here,

97
00:07:26.773 --> 00:07:32.037
the problem is that it's expecting
an object, not a string, unless we

98
00:07:32.037 --> 00:07:37.854
change this equals and check the type,
if it's an object or if it's a string.

99
00:07:38.994 --> 00:07:41.093
So maybe you're not following yet

100
00:07:41.093 --> 00:07:44.790
what's the problem because we
didn't code the other part.

101
00:07:44.790 --> 00:07:51.368
But I mean, right now,
I think that item can be just the text.

102
00:07:51.368 --> 00:07:54.472
Let's just clarify this by
changing the name, okay?

103
00:07:54.472 --> 00:07:58.216
So because of that, for now at least,

104
00:07:58.216 --> 00:08:03.013
then later we can change that,
we can say, hey,

105
00:08:03.013 --> 00:08:07.933
let's check if the text is,
wait a minute, why?

106
00:08:07.933 --> 00:08:12.457
No, I'm doing this wrong, this is this.

107
00:08:12.457 --> 00:08:17.779
I'm just going to check if
the text is equals to the text.

108
00:08:17.779 --> 00:08:22.356
So I'm manually checking the text here,
okay, just that property.

109
00:08:22.356 --> 00:08:24.312
And something similar should happen here.

110
00:08:24.312 --> 00:08:29.772
So let's call this todo_text, so
it's not gonna be the same problem.

111
00:08:29.772 --> 00:08:34.669
So I will check for
every todo if the text is equals

112
00:08:34.669 --> 00:08:38.978
to the todo text we are looking for, okay?

113
00:08:38.978 --> 00:08:43.731
I think we should be good for now.

114
00:08:43.731 --> 00:08:46.647
There is one more thing that is important.

115
00:08:46.647 --> 00:08:51.503
Remember, this class is
implementing the observer pattern,

116
00:08:51.503 --> 00:08:55.544
right, because we apply
the mix-in at the bottom.

117
00:08:55.544 --> 00:09:00.133
That means that we're expecting something.

118
00:09:00.133 --> 00:09:03.784
We're expecting observers
to observe our list.

119
00:09:05.114 --> 00:09:08.798
And when you apply observer,
it's not just managing the observers,

120
00:09:08.798 --> 00:09:12.117
removing the observer,
it's also notifying the observers.

121
00:09:12.117 --> 00:09:18.230
So it should notify my observers
when my data changes, okay?

122
00:09:18.230 --> 00:09:23.917
In my case, well, the data changes here
in replaceList, so I should call notify.

123
00:09:25.097 --> 00:09:27.702
And again, do we have a notify method?

124
00:09:31.220 --> 00:09:32.797
&gt;&gt; Maximiliano Firtman: Yes or no?

125
00:09:32.797 --> 00:09:37.977
Well, actually, it depends,
that's a good answer here.

126
00:09:37.977 --> 00:09:43.340
So it's not actually written in the class,
we are burying checked

127
00:09:43.340 --> 00:09:48.148
in that method through the mix-in,
so I can execute this.

128
00:09:48.148 --> 00:09:52.936
So then I also should notify, also when
we delete, because we are changing

129
00:09:52.936 --> 00:09:58.939
the list and when we are adding, probably
in the if, only when we add something.

130
00:09:58.939 --> 00:10:03.601
So remember, this notify will actually
use the observer pattern, and

131
00:10:03.601 --> 00:10:08.817
it will broadcast to all the observers
that something has been changed, yeah?

132
00:10:11.937 --> 00:10:18.148
&gt;&gt; Student: The duplication of
the Array.from lines in each method,

133
00:10:18.148 --> 00:10:24.500
is there a drier way to do that or
is that not a real big issue.

134
00:10:24.500 --> 00:10:27.160
&gt;&gt; Maximiliano Firtman: I mean,
it's not that big a issue,

135
00:10:27.160 --> 00:10:31.343
we could create a method that
will do that in every case.

136
00:10:31.343 --> 00:10:34.551
I mean, Array.from will
create an array on the fly.

137
00:10:34.551 --> 00:10:38.745
And because this is dynamic
data you're changing, I mean,

138
00:10:38.745 --> 00:10:43.527
we cannot create an array and
keep it consistent with the set, okay?

139
00:10:43.527 --> 00:10:47.619
So of course,
we could get out of the set and

140
00:10:47.619 --> 00:10:53.328
directly work with arrays and
we will not need that change.

141
00:10:53.328 --> 00:10:57.882
So I'm saying, instead of using a set,
if you change here with an array,

142
00:10:57.882 --> 00:11:01.047
then you don't need those
array's declaration.

143
00:11:02.388 --> 00:11:06.464
And if you wanna simplify that part,
you can just change that and

144
00:11:06.464 --> 00:11:09.848
data is going to be an array directly,
okay?

145
00:11:09.848 --> 00:11:15.290
But you won't have that
security of the set that won't

146
00:11:15.290 --> 00:11:20.507
add the same element twice
cuz you have that, okay?

147
00:11:20.507 --> 00:11:25.876
But I don't think that adding a method
here will make any difference,

148
00:11:25.876 --> 00:11:28.335
I think it's gonna be the same.

149
00:11:28.335 --> 00:11:33.202
Because this is already a method call,
we are just changing one method call

150
00:11:33.202 --> 00:11:38.312
with another method call, it's not
gonna be different, okay, make sense?

151
00:11:38.312 --> 00:11:44.697
Okay, so I think that our
classes are ready to be used.

