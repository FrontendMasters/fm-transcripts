WEBVTT

1
00:00:00.008 --> 00:00:04.649
&gt;&gt; Maximiliano Firtman: Adapter, this is
simple to understand what's the problem,

2
00:00:04.649 --> 00:00:08.860
I have 2 interfaces that are incompatible.

3
00:00:08.860 --> 00:00:11.105
What are two interfaces, two libraries?

4
00:00:11.105 --> 00:00:13.908
I'm using one library that
is printing a PDF, and

5
00:00:13.908 --> 00:00:18.860
I have another library generating a PDF,
but they, the RPIs are not compatible.

6
00:00:18.860 --> 00:00:24.450
What I need an interface, in the middle,
that will call one, will transform

7
00:00:24.450 --> 00:00:30.127
the response into something that can I
use as an input for the other one, okay?

8
00:00:30.127 --> 00:00:31.653
That's an adapter,

9
00:00:31.653 --> 00:00:36.585
so we translate one interface into
another, that a client expects.

10
00:00:36.585 --> 00:00:40.332
Another typical thing here
is that you have an API,

11
00:00:40.332 --> 00:00:43.655
you call the API,
you have a data structure.

12
00:00:43.655 --> 00:00:49.090
And then you need to transform that data
structure, into a different one that goes

13
00:00:49.090 --> 00:00:54.158
to a SQLite database, so you transform
the data, and that's the adapter.

14
00:00:55.408 --> 00:01:00.727
So use cases integrating third-party
libraries with different interfaces,

15
00:01:00.727 --> 00:01:03.899
adapting legacy code to
work with new systems,

16
00:01:03.899 --> 00:01:06.375
that's something that we use a lot.

17
00:01:06.375 --> 00:01:10.984
I mean, you have something that was
created 15 years ago with jQuery.

18
00:01:12.244 --> 00:01:15.229
Yeah, it's with jQuery, but
now we have a vanilla JavaScript, but

19
00:01:15.229 --> 00:01:17.184
we're not going to touch that part.

20
00:01:17.184 --> 00:01:21.754
Well, we need to integrate, we need
to create an interface from jQuery to

21
00:01:21.754 --> 00:01:27.778
Vanilla, Vanilla to jQuery, and converting
data format, these are just examples.

22
00:01:27.778 --> 00:01:30.498
The code in this case,
it depends on when you are transforming.

23
00:01:30.498 --> 00:01:35.386
So I don't have an example because
it depends on the case, but

24
00:01:35.386 --> 00:01:41.796
it's just creating an interface
that connects to different systems.

25
00:01:41.796 --> 00:01:46.724
Mixins, this one is important and
something really powerful in JavaScript

26
00:01:46.724 --> 00:01:50.726
that I don't see in action a lot,
and we will use it.

27
00:01:50.726 --> 00:01:51.456
What's a mixin?

28
00:01:53.006 --> 00:01:55.533
By the way, there are languages this day

29
00:01:55.533 --> 00:02:00.527
that are already supporting mixins from
the ground up, Kotlin is one of those.

30
00:02:00.527 --> 00:02:04.918
The problem to solve is I wanna
share functionality between classes,

31
00:02:04.918 --> 00:02:07.831
but without using inheritance,
why is that?

32
00:02:08.881 --> 00:02:13.541
Because I have some functionality,
let's think about one case.

33
00:02:13.541 --> 00:02:18.101
Initially, I wanna debug objects,
so I wanna render in the terminal,

34
00:02:18.101 --> 00:02:23.012
in the console, or wherever,
an object with one specific format, okay?

35
00:02:23.012 --> 00:02:28.018
So, but I don't wanna create a class and
make my objects extending from

36
00:02:28.018 --> 00:02:33.062
that class because, semantically,
it's not really what I want.

37
00:02:33.062 --> 00:02:36.130
I wanna add functionality to a class,
to an object, but

38
00:02:36.130 --> 00:02:41.645
without changing its nature, and changing
Inheritance is changing its nature.

39
00:02:41.645 --> 00:02:46.759
So then we create a class or an object,
depends on the language containing

40
00:02:46.759 --> 00:02:51.765
the methods that can be used by other
classes and apply them somehow.

41
00:02:51.765 --> 00:02:55.364
So, for example, I have a mixin here,

42
00:02:55.364 --> 00:02:59.410
what's a mixin, the mixin is sayHiMixin.

43
00:02:59.410 --> 00:03:01.871
Name, it's an object, so
it's a literal object, okay?

44
00:03:01.871 --> 00:03:07.903
So I'm opening call the braces sayHi,
that is just alerting Hello, this name.

45
00:03:07.903 --> 00:03:12.348
And it's a it's just an object
with one function, that's all.

46
00:03:12.348 --> 00:03:17.302
Then I have a class, class user,
the class user has a name, and

47
00:03:17.302 --> 00:03:21.481
I'm not extending from
anything from mixin.

48
00:03:21.481 --> 00:03:26.431
How can I add that behavior with
object assign, you use object,

49
00:03:26.431 --> 00:03:31.441
assign user, dot prototype,
and you add the mixin.

50
00:03:31.441 --> 00:03:37.502
In that case, you are injecting, every
behavior that you have in that object,

51
00:03:37.502 --> 00:03:41.579
in say HiMixin,
into every object of the class user.

52
00:03:41.579 --> 00:03:45.971
Because you're talking to the prototype,

53
00:03:45.971 --> 00:03:51.324
this is like injecting this
directly into the class.

54
00:03:51.324 --> 00:03:56.633
On C sharp, this can be done with
extension methods, for example,

55
00:03:56.633 --> 00:04:02.889
it's another way that you have to extend
a class, without touching the class.

56
00:04:02.889 --> 00:04:04.635
An important part here is that
I'm not touching the class.

57
00:04:07.136 --> 00:04:11.362
&gt;&gt; Maximiliano Firtman: That also
means that I can apply that mixin,

58
00:04:11.362 --> 00:04:15.140
into classes that I don't own, okay?

59
00:04:15.140 --> 00:04:21.143
In any object or class,
I can now, Inject that say Hi.

60
00:04:21.143 --> 00:04:28.203
Value object, the name doesn't actually,
say anything, to be honest, value object.

61
00:04:29.353 --> 00:04:32.698
The problem that it's
solving is that sometimes,

62
00:04:32.698 --> 00:04:35.198
there are values that are immutable.

63
00:04:35.198 --> 00:04:39.488
And they're distinct from
other objects based on its

64
00:04:39.488 --> 00:04:43.296
properties rather than its identity.

65
00:04:43.296 --> 00:04:45.864
&gt;&gt; Maximiliano Firtman: Let
me go with the solution, and

66
00:04:45.864 --> 00:04:49.395
then give you some examples of that.

67
00:04:49.395 --> 00:04:53.410
So the solution is create a class,
where instances are considered equal,

68
00:04:53.410 --> 00:04:55.335
if all their properties are equal.

69
00:04:55.335 --> 00:05:01.233
And also ensure the object is immutable,
so no one can change the The option, okay?

70
00:05:01.233 --> 00:05:07.553
So in that case, it's like creating
singletons by value, something like that.

71
00:05:07.553 --> 00:05:12.597
So that means that,
when you have an object with a that value,

72
00:05:12.597 --> 00:05:14.354
it doesn't matter.

73
00:05:14.354 --> 00:05:17.143
If you have another one with the same
value, it's just the same option,

74
00:05:17.143 --> 00:05:19.911
I want to treat them as the same option,
that's idea.

75
00:05:19.911 --> 00:05:26.252
Use cases, representing complex data, for
example, money, coordinates, or date.

76
00:05:26.252 --> 00:05:30.484
I have a date object,
in this case, the date object,

77
00:05:30.484 --> 00:05:35.481
I don't care about if it's
the same instance of another date.

78
00:05:35.481 --> 00:05:40.841
If you had the same year, month and day,
it's the same date, that's the idea.

79
00:05:42.501 --> 00:05:47.870
So, for example, for money,
this is how you apply this in JavaScript,

80
00:05:47.870 --> 00:05:52.095
money can have an amount and
currency, money can be, for

81
00:05:52.095 --> 00:05:55.721
example, bank notes,
or something like that.

82
00:05:55.721 --> 00:05:58.775
I'm freezing the object, object.freeze,

83
00:05:58.775 --> 00:06:03.448
that's one part, so once it was set,
it cannot be changed.

84
00:06:03.448 --> 00:06:06.799
And also I'm implementing equals,
if the amount and

85
00:06:06.799 --> 00:06:10.754
the currencies are the same,
it's actually the same option.

86
00:06:10.754 --> 00:06:16.785
That means that if I have a $50 object,
every other $50 object is the same object,

87
00:06:16.785 --> 00:06:19.812
I don't have different instances of that.

