WEBVTT

1
00:00:00.000 --> 00:00:02.556
&gt;&gt; Maximiliano Firtman: So here,
you sometimes you think, but

2
00:00:02.556 --> 00:00:05.036
if it's a multi-page application,

3
00:00:05.036 --> 00:00:09.076
do we need vanilla JavaScript or
do we need JavaScript at all?

4
00:00:09.076 --> 00:00:13.779
Well, we are going to see less
available design patterns, but

5
00:00:13.779 --> 00:00:16.987
there are still some
things that we can do.

6
00:00:16.987 --> 00:00:21.763
So let's cover some of them, but
first let's define multi-page application.

7
00:00:21.763 --> 00:00:26.617
This is just a traditional web application
architecture where you have each page of

8
00:00:26.617 --> 00:00:31.142
the application is a different HTML
document that you serve from the server.

9
00:00:31.142 --> 00:00:35.982
Server side, it can be,
you can have a framework server side that

10
00:00:35.982 --> 00:00:40.567
is creating those pages, or
it can be server side generated.

11
00:00:40.567 --> 00:00:45.089
So it can be a static website, or
they can be just plain HTML files, okay?

12
00:00:45.089 --> 00:00:50.032
It doesn't matter, but from a client
point of view, you have different HTMLs,

13
00:00:50.032 --> 00:00:51.641
and you link those HTMLs.

14
00:00:51.641 --> 00:00:56.667
So for example, remember
View Transitions from five minutes ago?

15
00:00:56.667 --> 00:01:02.625
Well, do you know that we can do
the same for multi page applications?

16
00:01:02.625 --> 00:01:06.908
I think this is one of the biggest
reasons a lot of people

17
00:01:06.908 --> 00:01:10.365
are deciding single-page applications.

18
00:01:10.365 --> 00:01:15.785
Because if you need to click on a link and
then you need to load the whole page,

19
00:01:15.785 --> 00:01:20.037
the user will see a white page
until the next page is loaded.

20
00:01:20.037 --> 00:01:23.826
Well, now, we can use View Transition for

21
00:01:23.826 --> 00:01:29.202
multi-page applications to
avoid seeing the white flash.

22
00:01:29.202 --> 00:01:33.612
So we are going to use
the View Transition API for

23
00:01:33.612 --> 00:01:37.583
cross-documents that's brand new, and

24
00:01:37.583 --> 00:01:42.116
it's available in Chrome since Chrome 126.

25
00:01:42.116 --> 00:01:42.853
Use cases,

26
00:01:42.853 --> 00:01:47.511
well make multi-page applications
feel like single page applications.

27
00:01:47.511 --> 00:01:50.708
Like it's everything is there, okay?

28
00:01:50.708 --> 00:01:55.373
For example,
you can also use this to morph one

29
00:01:55.373 --> 00:02:00.156
element from page A from one HTML,
into another

30
00:02:00.156 --> 00:02:05.076
element of the next page,
which is kind of cool.

31
00:02:05.076 --> 00:02:08.274
Another design pattern, prefetch.

32
00:02:08.274 --> 00:02:15.164
So I think that one was in my
2006 book on Ajax patterns.

33
00:02:15.164 --> 00:02:17.976
So the difference is the implementation.

34
00:02:17.976 --> 00:02:22.344
Prefetch, the idea is that when
we have a multi-page application,

35
00:02:22.344 --> 00:02:24.770
we have this problem of performance.

36
00:02:24.770 --> 00:02:28.770
When the user is navigating the app,
it needs to wait.

37
00:02:28.770 --> 00:02:32.473
When you click something, it needs
to wait for the next page to appear.

38
00:02:32.473 --> 00:02:36.025
Well, you can prefetch or pre-render that,

39
00:02:36.025 --> 00:02:39.681
typically we use prefetch
as an umbrella term.

40
00:02:39.681 --> 00:02:41.942
But then we have a specific
ways to do that.

41
00:02:41.942 --> 00:02:45.777
It can be prefetch,
it can be pre-render, pre-connect.

42
00:02:45.777 --> 00:02:49.308
And the idea is that we can try to guess,

43
00:02:49.308 --> 00:02:54.125
we can estimate what is
the most probable next page for

44
00:02:54.125 --> 00:02:58.421
that user, and
ask the browser to prefetch it.

45
00:02:58.421 --> 00:02:59.688
That's kind of the idea.

46
00:02:59.688 --> 00:03:03.109
There are different
techniques to do that today,

47
00:03:03.109 --> 00:03:07.106
including using the Cache Storage
with Service Workers.

48
00:03:07.106 --> 00:03:09.722
So if you know about service workers,

49
00:03:09.722 --> 00:03:14.646
you can actually prefetch some assets
including HTML, the next page.

50
00:03:14.646 --> 00:03:17.243
So when the user clicks on the next page,
it's already there.

51
00:03:17.243 --> 00:03:21.078
It's already client-side,
so it will be fast enough.

52
00:03:21.078 --> 00:03:25.947
But we will use in our project a new one,
Speculation Rules API.

53
00:03:25.947 --> 00:03:29.606
Not sure if you have even heard about it.

54
00:03:29.606 --> 00:03:34.529
So use case is to prefetch or pre-render
the most probable next page on every HTML.

55
00:03:34.529 --> 00:03:37.801
What's the difference between prefetch and
pre-render?

