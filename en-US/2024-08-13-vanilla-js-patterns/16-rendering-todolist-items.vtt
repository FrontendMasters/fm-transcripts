WEBVTT

1
00:00:00.172 --> 00:00:04.001
&gt;&gt; Maximiliano Firtman: Something
that we can do at this point,

2
00:00:04.001 --> 00:00:08.419
let's see in which order
that we can do this.

3
00:00:08.419 --> 00:00:12.793
Let's try to fill the gaps here
on the ad first, for example,

4
00:00:12.793 --> 00:00:14.930
we can actually do that.

5
00:00:14.930 --> 00:00:17.777
So first, this is when you click Add.

6
00:00:17.777 --> 00:00:19.874
Let's remember our UI.

7
00:00:21.395 --> 00:00:24.556
We are here, so
we are clicking on this button, okay?

8
00:00:24.556 --> 00:00:31.535
So, what are the steps that we need to
execute to add something on the list?

9
00:00:31.535 --> 00:00:35.083
Should we turn to the list here?

10
00:00:35.083 --> 00:00:38.915
So should I take the value from the input?

11
00:00:38.915 --> 00:00:42.612
Validate the input,
we already have a command for that.

12
00:00:42.612 --> 00:00:47.219
So what we need to do is we need
to talk with our CommandExecutor.

13
00:00:48.399 --> 00:00:50.197
That actually, where is it?

14
00:00:50.197 --> 00:00:51.979
In command?

15
00:00:51.979 --> 00:00:55.405
It doesn't appear in the oil complete.

16
00:00:55.405 --> 00:00:56.899
Why is that?

17
00:00:56.899 --> 00:01:01.943
Because it's in its own module,
and I'm not exporting this.

18
00:01:01.943 --> 00:01:06.786
So you need to always
remember to export everything

19
00:01:06.786 --> 00:01:12.688
you wanna make public to
the outside of your module.

20
00:01:12.688 --> 00:01:15.333
So now, if I try this now,
it appears there.

21
00:01:15.333 --> 00:01:20.867
So return, and please remember to
add the .js here on the import.

22
00:01:20.867 --> 00:01:25.740
So CommandExecutor.execute,
and I need to pass a command.

23
00:01:25.740 --> 00:01:33.970
So I can create a new Command that
the name is from the list of commands.

24
00:01:33.970 --> 00:01:37.161
ADD, of course, if you don't like this,

25
00:01:37.161 --> 00:01:41.073
we can just create first variable,
cmd or command.

26
00:01:43.953 --> 00:01:46.328
&gt;&gt; Maximiliano Firtman: And just do this.

27
00:01:46.328 --> 00:01:48.603
So we create a command,
no arguments in this case.

28
00:01:50.333 --> 00:01:55.264
We could also think about maybe we
could test the text as an argument, so

29
00:01:55.264 --> 00:02:00.544
then the command is not talking to the DOM
and we decouple this even further.

30
00:02:00.544 --> 00:02:02.632
It's an idea to implement, okay?

31
00:02:02.632 --> 00:02:05.173
So there are always several ways.

32
00:02:05.173 --> 00:02:09.354
So always, it's better to decouple
as much as possible, okay?

33
00:02:09.354 --> 00:02:13.371
If it's not getting too complex,
I think it's fine.

34
00:02:13.371 --> 00:02:16.314
Then when you delete, before deleting,

35
00:02:16.314 --> 00:02:20.868
I think it will be better to
actually try to render something.

36
00:02:20.868 --> 00:02:24.252
Because first, maybe if I run this now,
at this point,

37
00:02:24.252 --> 00:02:28.873
if I refresh, nothing will work probably,
and probably, we have errors.

38
00:02:28.873 --> 00:02:30.818
So the first error we have is on mixin.

39
00:02:30.818 --> 00:02:34.644
Let's try to solve this,
mixins js, so let's see.

40
00:02:34.644 --> 00:02:40.131
Mixins is actually important here,
because it's mixin,

41
00:02:40.131 --> 00:02:43.870
not mixins, at least in my case, okay?

42
00:02:43.870 --> 00:02:46.884
Refresh, okay, no more errors.

43
00:02:46.884 --> 00:02:50.623
So now, I'm adding something here,
like finish, whatever,

44
00:02:50.623 --> 00:02:53.287
Add, and I'm getting error on commands.

45
00:02:53.287 --> 00:02:54.530
Okay, let's go one by one.

46
00:02:54.530 --> 00:02:55.836
Commands is not defined.

47
00:02:55.836 --> 00:02:57.430
It says, okay, let's see.

48
00:02:57.430 --> 00:03:00.595
So on app.js, we are using commands here.

49
00:03:01.736 --> 00:03:03.022
What's a problem?

50
00:03:03.022 --> 00:03:07.106
I'm not importing commands, so
it's not importing everything.

51
00:03:07.106 --> 00:03:09.986
And maybe you're thinking,
why don't you use a star?

52
00:03:09.986 --> 00:03:12.486
Because that's not ECMAScript.

53
00:03:12.486 --> 00:03:15.830
We cannot use a star on an import.

54
00:03:15.830 --> 00:03:21.946
So the way to solve that problem is
to use export defaults on one side,

55
00:03:21.946 --> 00:03:27.019
and then you receive one
object with everything inside.

56
00:03:27.019 --> 00:03:30.851
So I should add commands as well here.

57
00:03:30.851 --> 00:03:33.409
So now, we should know what it is.

58
00:03:33.409 --> 00:03:36.041
Okay, nothing happens.

59
00:03:36.041 --> 00:03:39.365
Okay, well,
it's actually removing it from the list.

60
00:03:39.365 --> 00:03:41.331
So it's removing my text.

61
00:03:41.331 --> 00:03:45.953
Maybe something is happening, but I'm
not seeing anything on the screen, okay?

62
00:03:45.953 --> 00:03:49.051
Which is expectable,
because I didn't render any data.

63
00:03:50.681 --> 00:03:53.672
So let's finish that part and
then we add the delete.

64
00:03:53.672 --> 00:03:56.505
To render the list,
there are many ways to do that, okay, so

65
00:03:56.505 --> 00:03:58.091
there are many ways to do that.

66
00:03:58.091 --> 00:04:00.980
I will use the simplest way.

67
00:04:00.980 --> 00:04:06.277
That doesn't mean it's the best one, but
it's gonna be the best one for us today.

68
00:04:06.277 --> 00:04:09.351
But we are not going to
discuss performance, okay?

69
00:04:09.351 --> 00:04:12.804
So have my mind that we
can improve that later.

70
00:04:12.804 --> 00:04:16.584
So I'm going to create within
app.js a function renderLlist.

71
00:04:16.584 --> 00:04:18.064
We're going to render the list.

72
00:04:19.274 --> 00:04:25.219
Quick question for you, when should
we execute this function, renderList?

73
00:04:28.288 --> 00:04:30.048
&gt;&gt; Maximiliano Firtman: In
terms of the life cycle or

74
00:04:30.048 --> 00:04:32.197
where we should be running this?

75
00:04:32.197 --> 00:04:33.050
What do you think?

76
00:04:38.784 --> 00:04:39.470
&gt;&gt; Speaker 2: On load.

77
00:04:39.470 --> 00:04:44.101
&gt;&gt; Maximiliano Firtman: On load, well,
on load it's an event that happens when

78
00:04:44.101 --> 00:04:50.122
everything is loaded, including iframes,
images, and other stuff.

79
00:04:50.122 --> 00:04:54.359
DOMContentLoad is probably what you meant,
so it's better than load.

80
00:04:54.359 --> 00:04:55.485
So, yeah, unload is one.

81
00:04:55.485 --> 00:05:01.281
So anywhere here, like here,
I can call renderList.

82
00:05:01.281 --> 00:05:04.244
&gt;&gt; Speaker 2: Are there suggestion for
notify?

83
00:05:04.244 --> 00:05:08.631
&gt;&gt; Maximiliano Firtman: For notify,
so let's try to dig into that.

84
00:05:08.631 --> 00:05:13.900
Notify is one of the methods that we
have in a mixin that was an observer.

85
00:05:13.900 --> 00:05:20.892
So trying to translate that notify
answer from someone in the chat,

86
00:05:20.892 --> 00:05:26.176
I think he's talking about
the observer pattern.

87
00:05:26.176 --> 00:05:30.309
So that means, remember, we have a list.

88
00:05:30.309 --> 00:05:36.565
The list is implementing the observer
pattern that will notify all the observers

89
00:05:36.565 --> 00:05:42.095
about the change, which means,
can we just talk to our TodoList here?

90
00:05:42.095 --> 00:05:47.219
Get the instance of it,
remember it's a singleton, and

91
00:05:47.219 --> 00:05:52.468
add an observer, and we can say,
execute my renderList.

92
00:05:52.468 --> 00:05:58.191
So every time the list is changing
from a data point of view,

93
00:05:58.191 --> 00:06:02.585
I wanna render the list again, okay?

94
00:06:02.585 --> 00:06:03.098
Make sense?

95
00:06:03.098 --> 00:06:05.955
Be careful,
I'm not adding parentheses here.

96
00:06:05.955 --> 00:06:10.098
I'm not executing renderList right now,
I'm passing renderList as an argument for

97
00:06:10.098 --> 00:06:10.854
the observer.

98
00:06:13.665 --> 00:06:15.683
&gt;&gt; Maximiliano Firtman: Okay, make sense?

99
00:06:15.683 --> 00:06:17.415
Again, we can discuss performance.

100
00:06:17.415 --> 00:06:21.141
That's another situation in terms of
performance in the DOM, but that's for

101
00:06:21.141 --> 00:06:22.449
another another version.

102
00:06:22.449 --> 00:06:27.370
So now, renderLlist, then we execute it
the first time when you open the app.

103
00:06:28.450 --> 00:06:32.239
And by the way, every time you open the
app for now, at least, it's always empty.

104
00:06:32.239 --> 00:06:36.820
I mean, the list is always empty,
and also when the list changes.

105
00:06:36.820 --> 00:06:39.915
So what I mean with that empty thing?

106
00:06:39.915 --> 00:06:45.036
I mean that maybe we don't need this one,
because the list is always empty.

107
00:06:45.036 --> 00:06:46.690
But maybe you're thinking, why?

108
00:06:46.690 --> 00:06:49.278
But maybe in the future, we will.

109
00:06:49.278 --> 00:06:53.116
In the near future,
in the next couple of minutes,

110
00:06:53.116 --> 00:06:57.150
we can save the data somewhere and
retrieve the data.

111
00:06:57.150 --> 00:07:01.912
But if that happens, maybe we'll
also trigger the observer pattern.

112
00:07:03.583 --> 00:07:07.392
So maybe I don't need to
render the list initially.

113
00:07:07.392 --> 00:07:11.511
Maybe if the data changes,
even if it's when the page loads,

114
00:07:11.511 --> 00:07:15.013
it will render the list anyway,
okay, make sense?

115
00:07:16.593 --> 00:07:19.296
So well, renderList,
what do I going to do?

116
00:07:19.296 --> 00:07:22.911
So I'm going to first,
I need to get all my lists.

117
00:07:22.911 --> 00:07:26.024
So my list of to-dos from the getInstance.

118
00:07:26.024 --> 00:07:31.106
Remember, I can also create
a global variable for

119
00:07:31.106 --> 00:07:34.861
that pointer, it doesn't matter.

120
00:07:35.901 --> 00:07:40.052
I'm going to check, yeah,
we have the classes.js, that's fine.

121
00:07:40.052 --> 00:07:46.511
And then I'm going to loop through,
for every todo of that List.

122
00:07:46.511 --> 00:07:51.061
Actually, not the list,
but the items in the list.

123
00:07:51.061 --> 00:07:53.660
Do we have an items property?

124
00:07:53.660 --> 00:07:54.679
Do you remember?

125
00:07:54.679 --> 00:07:56.130
Let's get into the TodoList.

126
00:07:56.130 --> 00:08:00.225
Do we have an item for property?

127
00:08:00.225 --> 00:08:04.295
Yes, we do have a getter for
a property, so it's a property.

128
00:08:06.365 --> 00:08:10.179
So we will loop through the items and
we will do something.

129
00:08:10.179 --> 00:08:14.421
So here comes the part where some of
you may think it's a little dirty

130
00:08:14.421 --> 00:08:19.145
implementation, which is okay,
because there are many ways to do that.

131
00:08:19.145 --> 00:08:21.805
I will mix some techniques
at the same time here.

132
00:08:21.805 --> 00:08:25.297
I'm going to create a ListItem.

133
00:08:25.297 --> 00:08:30.431
This is actually the same code that was
originally in the previous todo, okay?

134
00:08:30.431 --> 00:08:35.457
So I'm creating an element,
a DOM element of type Li, okay?

135
00:08:37.887 --> 00:08:41.047
Then I'm defining a class name.

136
00:08:41.047 --> 00:08:45.779
You can define the class name or
you can add a class to the list,

137
00:08:45.779 --> 00:08:50.329
it's just the same to the item,
or class name equals true.

138
00:08:50.329 --> 00:08:52.330
For this case, it's the same.

139
00:08:52.330 --> 00:08:56.612
Then I'm going to define the innerHTML.

140
00:08:56.612 --> 00:08:59.256
And by the way,
I'm not using text content,

141
00:08:59.256 --> 00:09:01.700
because I'm going to add some HTML here.

142
00:09:01.700 --> 00:09:07.151
There are some security concerns about
using your HTML, but for now, it's fine.

143
00:09:07.151 --> 00:09:12.920
And I will just pull here
the text from the current todo.

144
00:09:12.920 --> 00:09:18.663
And also, I will render a button
with the class='delete-btn'&gt;Delete.

145
00:09:18.663 --> 00:09:24.214
I can also use an emoji or an image for
that, it doesn't matter, okay?

146
00:09:24.214 --> 00:09:28.942
So that's my innerHTML, and
then I'm going to do this.

147
00:09:28.942 --> 00:09:35.275
Let's see if you know what it is,
dataset.text=todo.text.

148
00:09:36.545 --> 00:09:38.643
Does anyone know what dataset is?

149
00:09:38.643 --> 00:09:39.995
This is the DOM API.

150
00:09:42.025 --> 00:09:43.906
&gt;&gt; Speaker 3: See, data-attribute.

151
00:09:43.906 --> 00:09:48.651
&gt;&gt; Maximiliano Firtman: Exactly,
it's a collection of attributes that

152
00:09:48.651 --> 00:09:53.049
you can manage on every
HTML element that from

153
00:09:53.049 --> 00:09:58.296
an HTML point of view,
it's data- something.

154
00:09:58.296 --> 00:10:01.217
So actually, this is the Li.

155
00:10:01.217 --> 00:10:05.378
So from an HTML point of view,
this is creating an Li with

156
00:10:05.378 --> 00:10:09.637
a data-text property with
some content inside, okay?

157
00:10:09.637 --> 00:10:11.958
You will see why we need that.

158
00:10:11.958 --> 00:10:16.456
And then now that I have the Li,
I will talk to my, remember,

159
00:10:16.456 --> 00:10:21.935
we have the DOM pointing to this variable,
we do have here the TodoList.

160
00:10:21.935 --> 00:10:26.717
This is the UL, we're going to append,
&gt;&gt; Maximiliano Firtman: Child that

161
00:10:26.717 --> 00:10:31.551
ListItem, okay, something like that.

162
00:10:35.515 --> 00:10:36.885
&gt;&gt; Maximiliano Firtman: Are there
better ways to do that?

163
00:10:36.885 --> 00:10:38.185
Yes, a lot.

164
00:10:38.185 --> 00:10:42.612
And in the next lab,
we will see other options, okay, so

165
00:10:42.612 --> 00:10:47.426
that's why I don't wanna show
you all on one particular lab.

166
00:10:47.426 --> 00:10:49.014
So let's see what happens.

167
00:10:49.014 --> 00:10:55.807
I will refresh, I will todo,
let's go lunch, Add, wallah.

168
00:10:55.807 --> 00:10:57.242
We have lunch there.

169
00:10:57.242 --> 00:11:00.584
If I try to have lunch again,
let's see, nothing happens.

170
00:11:00.584 --> 00:11:03.714
I mean, I could have a message here or
something, but yeah.

171
00:11:03.714 --> 00:11:10.842
Dinner, it works, but, oops, oops, oops.

172
00:11:10.842 --> 00:11:11.580
What's going on?

173
00:11:13.800 --> 00:11:17.543
Every time I'm rendering the change,
I'm rendering the list,

174
00:11:17.543 --> 00:11:20.140
it's attaching to the previous rendering.

175
00:11:20.140 --> 00:11:22.464
So okay, does it make sense?

176
00:11:22.464 --> 00:11:23.974
So we have that problem.

177
00:11:23.974 --> 00:11:27.345
So every time we are rendering the list,

178
00:11:27.345 --> 00:11:33.311
I should start talking to my TodoList and
just clearing the whole list.

179
00:11:33.311 --> 00:11:36.264
A little dirty, but it works, okay?

180
00:11:36.264 --> 00:11:37.529
Makes sense?

181
00:11:37.529 --> 00:11:40.710
So now let me refresh.

182
00:11:40.710 --> 00:11:45.491
I can add a lunch, dinner, and it works.

183
00:11:45.491 --> 00:11:47.217
I'm not seeing that repetition.

184
00:11:47.217 --> 00:11:51.361
When I will delete, nothing happens
because I'm still missing that part.

185
00:11:51.361 --> 00:11:56.491
Let's add that code, and with that,
we're going to be exactly

186
00:11:56.491 --> 00:12:02.016
with the same behavior as before,
but with a lot of design patterns.

187
00:12:02.016 --> 00:12:07.170
So here, if we are in the Delete button,

188
00:12:07.170 --> 00:12:10.049
what we need is first,

189
00:12:10.049 --> 00:12:16.986
remember the value that
we set here in dataset?

190
00:12:16.986 --> 00:12:22.533
I'm going to use that to retrieve
the todo that we need to delete.

191
00:12:22.533 --> 00:12:27.479
So the todo that we need to delete
is going to be the event.target

192
00:12:27.479 --> 00:12:31.887
that's actually the,
&gt;&gt; Maximiliano Firtman: So

193
00:12:31.887 --> 00:12:35.022
let's understand what we are doing here.

194
00:12:35.022 --> 00:12:36.651
Let me show you here.

195
00:12:36.651 --> 00:12:40.282
Let's inspect, I want you to follow me.

196
00:12:40.282 --> 00:12:44.435
So we have a lot Li, and
then we have text within the layer text.

197
00:12:44.435 --> 00:12:48.053
This is a text node,
a no text, and a button, okay?

198
00:12:48.053 --> 00:12:52.414
When you click on the button,
I'm actually listening for

199
00:12:52.414 --> 00:12:57.407
the click event on the whole Li,
but checking if it's the button.

200
00:12:57.407 --> 00:13:02.045
So I wanna take the data-text,
lunch, okay?

201
00:13:02.045 --> 00:13:04.358
So I'm inside the button now.

202
00:13:04.358 --> 00:13:06.509
The target is the button, so

203
00:13:06.509 --> 00:13:11.207
I need to go one level up to
the Li to get the data-text.

204
00:13:11.207 --> 00:13:12.481
Does it make sense?

205
00:13:12.481 --> 00:13:13.587
I wanna take the lunch.

206
00:13:13.587 --> 00:13:16.891
So that's why here,
I will take the target is the button.

207
00:13:16.891 --> 00:13:19.567
I need to get to the parent node,
that's the Li.

208
00:13:20.607 --> 00:13:25.654
And here, I will take from
the set of data, the text.

209
00:13:25.654 --> 00:13:30.573
Then I will create the command,
&gt;&gt; Maximiliano Firtman: Command

210
00:13:30.573 --> 00:13:34.929
that the command will
be of type delete and

211
00:13:34.929 --> 00:13:39.658
the arguments it's
an array with that text,

212
00:13:39.658 --> 00:13:44.021
and we will execute that command, okay.

213
00:13:44.021 --> 00:13:44.784
Makes sense?

214
00:13:48.182 --> 00:13:53.918
&gt;&gt; Maximiliano Firtman: So if I refresh,
let's see, lunch, Delete, it disappears.

215
00:13:53.918 --> 00:13:58.327
Lunch, I can add another one,
and it works.

216
00:13:58.327 --> 00:14:03.654
So at this point, we have exactly
the same behavior as before,

217
00:14:03.654 --> 00:14:06.678
but with a lot of more code, right?

