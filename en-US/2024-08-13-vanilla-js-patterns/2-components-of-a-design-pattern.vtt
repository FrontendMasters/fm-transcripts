WEBVTT

1
00:00:00.000 --> 00:00:04.102
&gt;&gt; Maximiliano Firtman: So, components of
a design pattern, a name, and again, yeah,

2
00:00:04.102 --> 00:00:08.670
we know there is a name, but the name
is important to create vocabulary.

3
00:00:08.670 --> 00:00:12.639
So then, when we are saying,
I'm going to do a singleton here,

4
00:00:12.639 --> 00:00:14.633
singleton is a design pattern.

5
00:00:14.633 --> 00:00:18.133
We all know, what we are talking about,
I don't need to explain,

6
00:00:18.133 --> 00:00:19.580
what I'm doing., okay?

7
00:00:19.580 --> 00:00:24.945
So that's the idea, so it has a name, it
has a problem that tries to solve, okay?

8
00:00:24.945 --> 00:00:28.010
So there is a problem there, and

9
00:00:28.010 --> 00:00:33.011
we need to check actually
if we do have that problem.

10
00:00:33.011 --> 00:00:37.450
There is a solution of course so
an explanation saying okay,

11
00:00:37.450 --> 00:00:42.334
to solve this problem, one solution,
is to do this and that okay?

12
00:00:42.334 --> 00:00:43.998
We also have a context,

13
00:00:43.998 --> 00:00:49.750
because not every problem should be solved
in the same way on different contexts.

14
00:00:49.750 --> 00:00:55.590
So, we are talking about just text here,
so this is written somewhere,

15
00:00:55.590 --> 00:01:00.474
there is a context explaining,
well, you should apply this

16
00:01:00.474 --> 00:01:05.485
solution to this problem,
when the context looks like this.

17
00:01:05.485 --> 00:01:09.415
Consequences, because not
everything is shiny here,

18
00:01:09.415 --> 00:01:14.430
when you apply a design pattern,
you will also get some consequences,

19
00:01:14.430 --> 00:01:17.874
positive or negative actually,
and examples.

20
00:01:17.874 --> 00:01:22.799
So typically, we have an example,
in one particular language,

21
00:01:22.799 --> 00:01:27.375
remember not every language is the same,
or looks the same.

22
00:01:27.375 --> 00:01:31.101
So while some languages are pretty
similar, I mean if you take Java and

23
00:01:31.101 --> 00:01:32.996
C sharp, with their differences,

24
00:01:32.996 --> 00:01:36.802
when we are talking about design
patterns it's kind of the same thing.

25
00:01:36.802 --> 00:01:43.168
So, when we go to JavaScript Script,
that's a completely different story.

26
00:01:43.168 --> 00:01:47.333
So, why is this important for
Vanilla JS project?

27
00:01:47.333 --> 00:01:51.998
So, with Vanilla JavaScript,
we have complete freedom,

28
00:01:51.998 --> 00:01:56.212
that's good, but
that's also a challenge, okay?

29
00:01:56.212 --> 00:02:00.980
That we can do whatever we want,
and, if you have experience doing

30
00:02:00.980 --> 00:02:06.174
vanilla JavaScript project,
you start simple, which is pretty good,

31
00:02:06.174 --> 00:02:10.879
it works, it's fast, but
then you start adding more features.

32
00:02:10.879 --> 00:02:15.951
You want to add some other ideas,
and then you start finding

33
00:02:15.951 --> 00:02:21.038
some challenges,
that then you get into a spaghetti code.

34
00:02:21.038 --> 00:02:26.928
You are actually coupling a lot of parts
of your project in the same code and

35
00:02:26.928 --> 00:02:31.774
you start realizing hey,
I don't like how this looks like.

36
00:02:31.774 --> 00:02:37.249
And then that's when you realize
maybe I should have used a library,

37
00:02:37.249 --> 00:02:41.060
React or Angular or Vue or
whatever, or next.JS.

38
00:02:41.060 --> 00:02:45.697
And, well will see that
understanding some design patterns,

39
00:02:45.697 --> 00:02:51.557
you can think about applying some ideas
that are currently in some libraries and

40
00:02:51.557 --> 00:02:55.249
frameworks, but
in Vanilla JavaScript as well.

41
00:02:55.249 --> 00:02:59.614
So, we need to set guidelines,
that's the idea.

42
00:02:59.614 --> 00:03:04.661
So, the guidelines will actually
let us improve reusability

43
00:03:04.661 --> 00:03:08.832
of our code and
you will see that with the first lab,

44
00:03:08.832 --> 00:03:13.698
the first project that we will work,
that's clear there.

45
00:03:13.698 --> 00:03:18.972
Reusability, scalability,
meaning when they start adding more

46
00:03:18.972 --> 00:03:24.256
features at some point,
is like a monster, difficult to manage.

47
00:03:24.256 --> 00:03:29.360
Consistency, because on every part,
on every, let's say, functionality

48
00:03:29.360 --> 00:03:34.077
of your web app, you're using
a different pattern, a different code,

49
00:03:34.077 --> 00:03:38.590
if you don't have a guideline,
if you are not following some rules.

50
00:03:38.590 --> 00:03:44.106
Efficiency, I'm talking about developers
experience here, I mean, you're efficient

51
00:03:44.106 --> 00:03:48.778
as a developer and also performance
sometimes, when executing the web app.

52
00:03:48.778 --> 00:03:53.821
And debugging, debugging a vanilla
JavaScript project, when, you're

53
00:03:53.821 --> 00:03:59.513
not following some guidelines and using
some design patterns, might be a problem.

54
00:03:59.513 --> 00:04:05.433
So we will try, to solve these issues
by applying some design patterns, okay?

55
00:04:05.433 --> 00:04:10.469
Anyone, can create a design pattern,
we can create one today, if we want to.

56
00:04:10.469 --> 00:04:14.936
We typically start with a blog post or
an article published somewhere,

57
00:04:14.936 --> 00:04:19.484
where we are going to set a name, and
we will explain the problem, okay?

58
00:04:19.484 --> 00:04:23.666
How we have been creating an app,
we found this problem, and

59
00:04:23.666 --> 00:04:28.506
then we start thinking about the solution,
and this is the solution.

60
00:04:28.506 --> 00:04:33.308
And you explain the solution, and
then you put some code sample there,

61
00:04:33.308 --> 00:04:35.389
and you publish it, and yeah,

62
00:04:35.389 --> 00:04:40.609
maybe no one is going to like your
design pattern, which is possible, okay?

63
00:04:40.609 --> 00:04:44.451
It's for probable, but
all design patterns stuff like that, but

64
00:04:44.451 --> 00:04:49.605
maybe the community will say that's a good
idea, we will start implementing that.

65
00:04:49.605 --> 00:04:52.947
And then maybe you will find the
conference the next year that someone is

66
00:04:52.947 --> 00:04:54.846
creating a talk on that design pattern.

67
00:04:54.846 --> 00:04:59.405
Or maybe you are creating a talk for
a conference, and

68
00:04:59.405 --> 00:05:04.380
that's how the design pattern
life cycle starts, okay?

69
00:05:04.380 --> 00:05:08.108
There is no design pattern
organization that defines,

70
00:05:08.108 --> 00:05:10.748
this is the approved design pattern okay?

71
00:05:10.748 --> 00:05:15.075
This is just community based,
these are just ideas, ideas and

72
00:05:15.075 --> 00:05:18.435
how to solve problems and,
that's all, okay?

73
00:05:18.435 --> 00:05:21.466
Anyone can create a design pattern.

74
00:05:21.466 --> 00:05:24.133
And, this is probably
the most important part,

75
00:05:24.133 --> 00:05:28.233
probably the only slide that you
should remember from today's workshop,

76
00:05:28.233 --> 00:05:31.763
don't use design patterns just
because it sounds cool, okay?

77
00:05:31.763 --> 00:05:36.153
So, we shouldn't use design patterns
because everyone is using it.

78
00:05:36.153 --> 00:05:41.293
So one of the most important part of
design patterns, is that, we should check.

79
00:05:41.293 --> 00:05:46.521
If we do have that problem first,
and we do have the context,

80
00:05:46.521 --> 00:05:50.211
that was defined with the design pattern,

81
00:05:50.211 --> 00:05:54.631
before saying I will use
that design pattern.

82
00:05:54.631 --> 00:05:58.610
Because if we don't have,
we are adding, more problems,

83
00:05:58.610 --> 00:06:00.848
to our current problems, okay?

84
00:06:00.848 --> 00:06:06.192
This is not, on every project on
everybody that's asking project,

85
00:06:06.192 --> 00:06:10.168
you need to always use
these 15 design patterns.

86
00:06:10.168 --> 00:06:12.590
I'm not going tell you this today,

87
00:06:12.590 --> 00:06:16.878
there is no list of design patterns
that you should always use.

88
00:06:16.878 --> 00:06:19.997
It always depends on the project,
on every project,

89
00:06:19.997 --> 00:06:23.046
on every problem that you have,
you will sit down and

90
00:06:23.046 --> 00:06:26.738
say okay, I will solve this
problem with this pattern, okay?

91
00:06:26.738 --> 00:06:31.145
That's the idea, so
that's why you can get to

92
00:06:31.145 --> 00:06:36.344
failures using design patterns,
over engineering.

93
00:06:36.344 --> 00:06:41.403
And also you will probably feel
that we are getting there,

94
00:06:41.403 --> 00:06:46.679
in our first project,
because we will start really simple.

95
00:06:46.679 --> 00:06:50.911
That first project is not using any design
pattern, and it's simple to understand,

96
00:06:50.911 --> 00:06:53.285
but you will see the promise
that we have there.

97
00:06:53.285 --> 00:06:59.527
And then we will apply design patterns,
and we will end up with the same behavior,

98
00:06:59.527 --> 00:07:03.777
but with better scalability and
all the good stuff, but

99
00:07:03.777 --> 00:07:08.853
also you will feel that,
I think that now it's over engineering.

100
00:07:08.853 --> 00:07:12.155
So we need to find also the balance, okay?

101
00:07:12.155 --> 00:07:15.986
The balance where you feel comfortable,
applying more design patterns.

102
00:07:15.986 --> 00:07:20.110
Every design pattern, well,
sorry, not every design pattern,

103
00:07:20.110 --> 00:07:21.594
most design patterns.

104
00:07:21.594 --> 00:07:24.751
Are adding abstraction layers,
on top of your code,

105
00:07:24.751 --> 00:07:28.692
which means more files,
more components, more classes, okay?

106
00:07:28.692 --> 00:07:36.288
More code, in general, so that can
lead to over engineering at one point.

107
00:07:36.288 --> 00:07:41.491
Misapplication, that's what I said
before that you are applying a design

108
00:07:41.491 --> 00:07:47.036
pattern that is not for your current
problem, it's not solving your problem.

109
00:07:47.036 --> 00:07:52.008
Inflexibility, and that has to
do sometimes with thinking that

110
00:07:52.008 --> 00:07:57.071
the design pattern is kind of a law,
that you need to comply with,

111
00:07:57.071 --> 00:08:01.237
and you don't understand
that this is just a recipe.

112
00:08:01.237 --> 00:08:05.072
I mean if you are cooking and
you are following a recipe, but

113
00:08:05.072 --> 00:08:09.771
you feel like something is not what
you want, you can change the recipe.

114
00:08:09.771 --> 00:08:13.810
Of course, it can go, well, or
bad, but you can change it,

115
00:08:13.810 --> 00:08:16.127
you have a flexibility to change.

116
00:08:16.127 --> 00:08:20.177
I mean it says six eggs, I say no,
let's add four eggs, and

117
00:08:20.177 --> 00:08:25.133
maybe two ydx, you can, you have
the flexibility to change the recipe.

118
00:08:25.133 --> 00:08:28.697
The same happens here
with design patterns,

119
00:08:28.697 --> 00:08:32.652
if you just follow what the document says,
okay?

120
00:08:32.652 --> 00:08:37.103
You may end up with the wrong solution,
learning cue for

121
00:08:37.103 --> 00:08:41.188
the team,
is also something that can be a problem.

122
00:08:41.188 --> 00:08:44.930
I mean if you're working with a team, and
they don't know about design patterns,

123
00:08:44.930 --> 00:08:45.843
they have to learn.

124
00:08:45.843 --> 00:08:49.274
But the same happens with
the library of course, right?

125
00:08:49.274 --> 00:08:54.477
Complexity, it gets more complex and
you will see on the first lab that it can

126
00:08:54.477 --> 00:09:00.028
get more complex when you are applying
design patterns, you have pros and cons.

127
00:09:00.028 --> 00:09:04.484
And performance overhead,
because we have more components,

128
00:09:04.484 --> 00:09:09.033
more files to load,
more classes to instantiate on the memory.

129
00:09:09.033 --> 00:09:12.819
So, we have a performance overhead,
sometimes it's not a big deal, or

130
00:09:12.819 --> 00:09:14.443
it's not really a small deal.

131
00:09:14.443 --> 00:09:18.070
It's not a deal at all, and
sometimes it can be a problem, so

132
00:09:18.070 --> 00:09:19.506
it depends on the case.

133
00:09:19.506 --> 00:09:23.432
I mean if you're creating,
time applications,

134
00:09:23.432 --> 00:09:27.083
that you are talking to live or
dead hardware.

135
00:09:27.083 --> 00:09:31.987
Yeah, probably you will try not to use
a lot of design patterns that we will use

136
00:09:31.987 --> 00:09:35.401
today, but
that's not typically a web app, right?

137
00:09:35.401 --> 00:09:39.554
So, also we have a definition
known as the anti-pattern,

138
00:09:39.554 --> 00:09:45.048
when we say this is an anti-pattern,
is that, you're applying a practice.

139
00:09:45.048 --> 00:09:49.176
It can be a design pattern,
a recipe, a solution,

140
00:09:49.176 --> 00:09:56.190
that may initially seem beneficial, but
at the end, it's leading to poor outcomes.

141
00:09:56.190 --> 00:10:00.965
So, we need to try to get out of
anti-patterns, so when someone is saying,

142
00:10:00.965 --> 00:10:03.065
hey, this is an anti-pattern.

143
00:10:03.065 --> 00:10:07.894
Don't do that,
just think that it's just saying,

144
00:10:07.894 --> 00:10:14.599
I mean it feels like it's giving you
some advantages, but actually no.

145
00:10:14.599 --> 00:10:19.469
So, even today, you probably
know a lot of design patterns,

146
00:10:19.469 --> 00:10:23.697
even if you don't recognize
them initially as that.

147
00:10:23.697 --> 00:10:28.387
So you have been, working with web apps,
with JavaScript, and you have been,

148
00:10:28.387 --> 00:10:29.933
dealing with some ideas.

149
00:10:29.933 --> 00:10:34.722
Even sometimes you have found those ideas,
you created an object,

150
00:10:34.722 --> 00:10:39.595
with this format, and
after seeing design patterns you realize

151
00:10:39.595 --> 00:10:42.470
I didn't know I was creating a factory.

152
00:10:42.470 --> 00:10:46.603
Maybe you didn't know about the name,
the factory name, but you were actually

153
00:10:46.603 --> 00:10:50.748
applying the idea anyway, because it's
just an idea, but now you have a name.

154
00:10:50.748 --> 00:10:53.268
So then when you're
talking with a colleague,

155
00:10:53.268 --> 00:10:57.055
you can now say that's a factory,
I'm applying a factory there.

