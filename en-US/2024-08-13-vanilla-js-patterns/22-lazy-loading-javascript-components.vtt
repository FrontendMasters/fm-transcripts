WEBVTT

1
00:00:00.000 --> 00:00:02.079
&gt;&gt; Maximiliano Firtman: Let's
talk a little bit about, well,

2
00:00:02.079 --> 00:00:03.661
it's doing web components.

3
00:00:03.661 --> 00:00:07.724
So for example, right now,
if I analyze the content, I have a main,

4
00:00:07.724 --> 00:00:10.891
and inside the main,
I'm right now in an order page.

5
00:00:10.891 --> 00:00:12.806
Can you see that order-page?

6
00:00:12.806 --> 00:00:15.643
That's a custom element.

7
00:00:15.643 --> 00:00:17.597
That's the order page.

8
00:00:17.597 --> 00:00:20.695
If I'm going to the home,
now it's menu-page.

9
00:00:20.695 --> 00:00:24.071
If I get into the details,
it's details-page, okay?

10
00:00:24.071 --> 00:00:27.239
So these are web components.

11
00:00:27.239 --> 00:00:31.950
That is actually the design pattern,
okay, web components.

12
00:00:31.950 --> 00:00:36.441
Inside that web component,
it has a shadow-root, shadow DOM,

13
00:00:36.441 --> 00:00:40.209
that actually that's kind of
its own mini DOM and CSS.

14
00:00:40.209 --> 00:00:44.570
When you apply CSS, it applies only
to that tree, to that sub-tree and

15
00:00:44.570 --> 00:00:45.959
not to the whole page.

16
00:00:45.959 --> 00:00:48.592
That's the idea.

17
00:00:48.592 --> 00:00:51.162
Anyway, and you have HTML, okay?

18
00:00:51.162 --> 00:00:57.970
Well, these tags are actually defined
in a module, in an ECMAScript module.

19
00:00:57.970 --> 00:00:59.006
And all of them,

20
00:00:59.006 --> 00:01:04.633
if we go to the Network tab,
&gt;&gt; Maximiliano Firtman: Let's do this so

21
00:01:04.633 --> 00:01:05.986
we can see better.

22
00:01:12.287 --> 00:01:15.960
&gt;&gt; Maximiliano Firtman: Decrease
a little bit the font size, and

23
00:01:15.960 --> 00:01:21.586
let's go to the home, refresh,
and now I'm going to see JS.

24
00:01:21.586 --> 00:01:27.051
So you can see that every
DetailsPage.js is the web component for

25
00:01:27.051 --> 00:01:33.325
DetailsPage, ProductItem, CartItem,
Menu, OrderPage, MenuPage.

26
00:01:33.325 --> 00:01:40.572
So, when we load the project, actually,
all the pages are being loaded.

27
00:01:40.572 --> 00:01:43.509
So the web component of all
the pages are being loaded.

28
00:01:43.509 --> 00:01:46.746
This is how modules work.

29
00:01:46.746 --> 00:01:53.413
When the page loads, the ECMAScript
engine creates a tree, a modules tree.

30
00:01:53.413 --> 00:01:56.957
So I'm loading this module, that module
is importing from another module,

31
00:01:56.957 --> 00:01:59.419
that other module is importing
from another module.

32
00:01:59.419 --> 00:02:02.719
So it's downloading all
the JavaScript files, okay?

33
00:02:02.719 --> 00:02:06.859
So, that loading process
is taking the network,

34
00:02:06.859 --> 00:02:11.899
is taking time in parsing and
execution when the page loads.

35
00:02:11.899 --> 00:02:16.704
And maybe we can increase
performance if we can do lazy load.

36
00:02:16.704 --> 00:02:19.934
So for example, if I'm in the home,

37
00:02:19.934 --> 00:02:24.638
I shouldn't download all the content for
the order.

38
00:02:24.638 --> 00:02:28.685
If I'm getting into the order,
I'm gonna do that.

39
00:02:28.685 --> 00:02:30.767
Okay, makes sense?

40
00:02:30.767 --> 00:02:33.905
So now we are going to implement that.

41
00:02:33.905 --> 00:02:40.445
So to do that, the first step
is to remove the static import.

42
00:02:40.445 --> 00:02:44.668
So, right now,
these static imports are in app.js.

43
00:02:44.668 --> 00:02:51.201
So if you open app.js, there is a section
here that says Web Components Imports.

44
00:02:51.201 --> 00:02:53.481
These are static imports.

45
00:02:53.481 --> 00:02:55.437
So, this is the one that says hey,

46
00:02:55.437 --> 00:02:59.367
you should download OrderPage even
if you are not using it right now.

47
00:02:59.367 --> 00:03:02.522
So if I remove OrderPage from here,

48
00:03:02.522 --> 00:03:08.421
then it's not part of the tree anymore,
the import tree anymore.

49
00:03:08.421 --> 00:03:13.007
So, if I go back here and refresh,
I shouldn't be seeing OrderPage,

50
00:03:13.007 --> 00:03:16.297
just MenuPage and
DetailsPage, not OrderPage.

51
00:03:16.297 --> 00:03:20.150
Now if I go to OrderPage,
I see nothing rendered.

52
00:03:20.150 --> 00:03:21.645
Why is that?

53
00:03:21.645 --> 00:03:26.579
Because there is an order
page component there or

54
00:03:26.579 --> 00:03:32.005
tag, html tag,
that has no web component register.

55
00:03:32.005 --> 00:03:34.321
So it's empty, okay?

56
00:03:34.321 --> 00:03:38.740
So, what I need then is that
when you go to that section,

57
00:03:38.740 --> 00:03:45.058
when you go to the order section, I wanna
dynamically import that file, okay?

58
00:03:45.058 --> 00:03:46.374
Makes sense?

59
00:03:46.374 --> 00:03:49.850
To solve the problem,
I need to open services, Router.js.

60
00:03:49.850 --> 00:03:52.916
That has all the logic for routing.

61
00:03:52.916 --> 00:03:57.802
Let me decrease the font size a little
bit, and go back, there we are.

62
00:03:57.802 --> 00:04:02.609
So, here you can see that
it's creating the element of

63
00:04:02.609 --> 00:04:05.545
type order-page at that point.

64
00:04:05.545 --> 00:04:09.175
So but now we know that before doing that,

65
00:04:09.175 --> 00:04:13.754
we need to download and
parse and execute lazy load.

66
00:04:13.754 --> 00:04:14.260
That's the term.

67
00:04:14.260 --> 00:04:17.904
We need to lazy load
the JavaScript file for that.

68
00:04:17.904 --> 00:04:21.864
Before dynamic imports was
available in browsers,

69
00:04:21.864 --> 00:04:25.018
there were a lot of techniques to do that.

70
00:04:25.018 --> 00:04:29.767
So, one technique was actually
to inject a script tag,

71
00:04:29.767 --> 00:04:33.818
and I'm not sure if you
have heard about JSONP.

72
00:04:33.818 --> 00:04:38.397
Have you heard about JSONP,
JSON with payload [INAUDIBLE]?

73
00:04:38.397 --> 00:04:44.137
Anyway, the idea is that something similar
to JSONP where you were loading that and

74
00:04:44.137 --> 00:04:49.637
that script at the end should, callback
function so you know when it's ready.

75
00:04:49.637 --> 00:04:51.388
It was really complicated.

76
00:04:51.388 --> 00:04:53.546
Now it's actually much simpler.

77
00:04:53.546 --> 00:04:57.651
So here we are going to
implement the Lazy Load Pattern.

78
00:04:57.651 --> 00:04:59.066
We will just do this.

79
00:04:59.066 --> 00:05:02.448
We are going to await for

80
00:05:02.448 --> 00:05:08.543
importing components/OrderPage.js.

81
00:05:08.543 --> 00:05:10.010
Import is a new function.

82
00:05:10.010 --> 00:05:13.041
So it's the same import
that we use at the top.

83
00:05:13.041 --> 00:05:17.684
It looks like the same, but
this one is a function.

84
00:05:17.684 --> 00:05:22.643
The function version will
dynamically load that, and

85
00:05:22.643 --> 00:05:25.346
it returns a promise, okay?

86
00:05:25.346 --> 00:05:29.664
So I can use then and catch,
or I can use async await.

87
00:05:29.664 --> 00:05:33.741
But to use await,
I need to change my function and

88
00:05:33.741 --> 00:05:37.530
convert that into an async function, okay?

89
00:05:37.530 --> 00:05:40.380
If not, I can just stay with then.

90
00:05:40.380 --> 00:05:45.386
So I wait for that, and it will
just kind of stay there waiting for

91
00:05:45.386 --> 00:05:47.256
that import to appear.

92
00:05:47.256 --> 00:05:53.579
And now, I'm done, so pretty simple.

93
00:05:53.579 --> 00:05:57.034
So going back to the home, I'm refreshing.

94
00:05:57.034 --> 00:05:59.968
I'm going to order, and

95
00:05:59.968 --> 00:06:05.989
now I'm seeing something,
which means it works.

96
00:06:05.989 --> 00:06:09.048
What's the difference compared
with the previous version?

97
00:06:09.048 --> 00:06:14.095
I mean, it's difficult to see
the difference visually in

98
00:06:14.095 --> 00:06:20.595
the context of the page, but let me
decrease a little bit this, like that.

99
00:06:20.595 --> 00:06:24.986
If I refresh,
I'm not seeing OrderPage until I'm

100
00:06:24.986 --> 00:06:28.570
getting into the page for the first time.

101
00:06:28.570 --> 00:06:35.525
So OrderPage and actually CartItem,
that is a dependency of OrderPage,

102
00:06:35.525 --> 00:06:40.806
they're being downloaded
later when they are needed.

103
00:06:40.806 --> 00:06:42.373
That's lazy load.

104
00:06:42.373 --> 00:06:44.822
That's how you lazy load.

105
00:06:44.822 --> 00:06:49.468
It can become web components, or
it can be any module, okay, so any module.

106
00:06:49.468 --> 00:06:54.460
Again, talking about the registration
form example we mentioned before,

107
00:06:54.460 --> 00:06:58.438
you load the JavaScript necessary for
that registration for

108
00:06:58.438 --> 00:07:00.468
only when the user goes there.

109
00:07:03.437 --> 00:07:07.255
&gt;&gt; Speaker 2: Have you seen that
pattern used with infinite scroll or

110
00:07:07.255 --> 00:07:09.496
the intersection observer, or

111
00:07:09.496 --> 00:07:12.643
is that gonna be too slow to-
&gt;&gt; Maximiliano Firtman: The thing is that

112
00:07:12.643 --> 00:07:15.860
in that case when you
have an infinite scroll,

113
00:07:15.860 --> 00:07:20.659
you are talking about data,
not behavior, so you are loading data.

114
00:07:20.659 --> 00:07:25.277
I mean,
I don't think I can find a use case for

115
00:07:25.277 --> 00:07:29.411
loading this in that moment, but yeah,

116
00:07:29.411 --> 00:07:36.120
you have to understand that that
await is making an HTTP request.

117
00:07:36.120 --> 00:07:41.177
And maybe not just one because it's
creating another tree because in fact,

118
00:07:41.177 --> 00:07:44.509
in this case,
OrderPage is including CartItem.

119
00:07:44.509 --> 00:07:47.989
So actually,
you need to download two files.

120
00:07:47.989 --> 00:07:52.070
It can be 100 files, and it takes time.

121
00:07:52.070 --> 00:07:56.539
So, if you are doing that in a scroll,
it's a bad practice.

122
00:07:56.539 --> 00:08:00.257
Also, if you are reading the onscroll,
probably you are using

123
00:08:00.257 --> 00:08:04.697
passive event listeners that, yeah,
blah, blah, blah, blah, blah.

124
00:08:04.697 --> 00:08:07.773
I don't think you will use this
pattern in that situation.

