WEBVTT

1
00:00:00.000 --> 00:00:04.885
&gt;&gt; Maximiliano Firtman: The next part that
is actually for this, well, actually,

2
00:00:04.885 --> 00:00:11.340
we have two more design patterns for
this one, is to try to use HTML templates.

3
00:00:11.340 --> 00:00:15.276
So let's look at this.

4
00:00:15.276 --> 00:00:16.589
Let's go back to this template.

5
00:00:16.589 --> 00:00:20.326
You can see here that the template
the web component is using.

6
00:00:20.326 --> 00:00:23.501
Can you see that I have an empty
paragraph, an empty price,

7
00:00:23.501 --> 00:00:25.288
even an empty image, no source?

8
00:00:25.288 --> 00:00:30.802
So if you're used to Angular,
Vue, templates, React,

9
00:00:30.802 --> 00:00:37.449
typically somehow you say here,
hey, here I want something, okay?

10
00:00:37.449 --> 00:00:41.486
So you express that you
want something there.

11
00:00:41.486 --> 00:00:46.824
But by default on web components,
you don't do that.

12
00:00:46.824 --> 00:00:51.140
But I like the design pattern
from React for interpolation,

13
00:00:51.140 --> 00:00:54.440
where you can go to the template and
say, hey,

14
00:00:54.440 --> 00:00:58.684
here you put the variable with the name,
the description.

15
00:00:58.684 --> 00:01:01.238
Here you put the variable
with the name price.

16
00:01:01.238 --> 00:01:06.748
But let's try to do that, but
with Vanilla JavaScript with no libraries.

17
00:01:06.748 --> 00:01:08.648
It's kind of tricky, to be honest.

18
00:01:08.648 --> 00:01:11.548
We are going to work with this one,
with this template,

19
00:01:11.548 --> 00:01:13.409
it's the cart-item-template.

20
00:01:13.409 --> 00:01:17.934
That from this app is when you
add something to the cart,

21
00:01:17.934 --> 00:01:20.065
it's actually this one.

22
00:01:20.065 --> 00:01:24.178
So it's a web component that
is rendering the line, okay?

23
00:01:24.178 --> 00:01:25.840
The row, each row.

24
00:01:25.840 --> 00:01:28.680
So we are going to try to
use the template there.

25
00:01:28.680 --> 00:01:33.557
But right now it's using this HTML,
so I'm going to add something here.

26
00:01:33.557 --> 00:01:37.662
I'm going to use template string syntax.

27
00:01:37.662 --> 00:01:38.983
So it's gonna be something like this.

28
00:01:38.983 --> 00:01:43.000
And let's say, all right,
here I'm going to use

29
00:01:43.000 --> 00:01:47.784
the variable with the name quantity or
QTY, name, price,

30
00:01:47.784 --> 00:01:52.488
and yeah, for the button,
we don't need to do anything.

31
00:01:52.488 --> 00:01:57.871
So I want to somehow,
these two automatically now

32
00:01:57.871 --> 00:02:03.253
be tied to the data instead
of me going and saying,

33
00:02:03.253 --> 00:02:07.996
because right now, this is cartitem.js,

34
00:02:07.996 --> 00:02:11.218
it's reading the template.

35
00:02:11.218 --> 00:02:16.120
But then it's actually using
querySelector to find the element and

36
00:02:16.120 --> 00:02:17.843
changing the content.

37
00:02:17.843 --> 00:02:22.976
It's not automatically creating or
binding the data, okay?

38
00:02:22.976 --> 00:02:25.040
Makes sense?

39
00:02:25.040 --> 00:02:29.030
So as I mentioned before,
this is kind of a trick,

40
00:02:29.030 --> 00:02:34.734
actually it's not really part of an API,
so it's hack to make it work.

41
00:02:34.734 --> 00:02:37.332
So to make it work, this is how it works.

42
00:02:37.332 --> 00:02:41.319
We don't want to create a function
that typically would call the function

43
00:02:41.319 --> 00:02:42.550
Interpolate, okay?

44
00:02:42.550 --> 00:02:44.999
Interpolate, I mean I will write it,

45
00:02:44.999 --> 00:02:48.378
it takes time to get to
understand what's going on.

46
00:02:48.378 --> 00:02:49.460
I'm not sure,

47
00:02:49.460 --> 00:02:54.964
I'm not confident that you will
understand exactly what's going on, okay?

48
00:02:54.964 --> 00:02:59.095
But I mean, it's not about you,
it's really hacky, okay?

49
00:02:59.095 --> 00:03:03.928
And also, it's not about, man,
it's really really hacky.

50
00:03:03.928 --> 00:03:05.233
Let me write it.

51
00:03:05.233 --> 00:03:09.714
So you will receive a string and
parameters, okay?

52
00:03:09.714 --> 00:03:13.000
And I'm going to say,
I'm going to get the names,

53
00:03:13.000 --> 00:03:17.673
object.keys from the parameters,
the name of the parameters, okay?

54
00:03:17.673 --> 00:03:23.732
And the values of those parameters,
with object values.

55
00:03:23.732 --> 00:03:31.282
I will try to do some kind of test to see
if you get, here comes the hacky part.

56
00:03:31.282 --> 00:03:34.262
I'm going to return a new function.

57
00:03:34.262 --> 00:03:35.657
You say a what?

58
00:03:35.657 --> 00:03:39.056
A new function, I'm not sure even if you
know that you can return a function, okay?

59
00:03:39.056 --> 00:03:40.735
A new function like this.

60
00:03:40.735 --> 00:03:42.151
The function will receive

61
00:03:47.139 --> 00:03:49.950
&gt;&gt; Maximiliano Firtman: The names like

62
00:03:49.950 --> 00:03:51.358
this.

63
00:03:51.358 --> 00:03:54.996
Actually, this is the arguments, and

64
00:03:54.996 --> 00:03:59.967
then we pass in a string with
the body of the function.

65
00:03:59.967 --> 00:04:01.762
So it's creating a function on the fly.

66
00:04:01.762 --> 00:04:03.346
We can do that in JavaScript.

67
00:04:03.346 --> 00:04:07.666
And we pass as a string
the body of the function, okay?

68
00:04:07.666 --> 00:04:10.786
So, it's empty right now, okay?

69
00:04:10.786 --> 00:04:13.974
So this is the function definition, and

70
00:04:13.974 --> 00:04:19.333
now I'm going to call the function,
spreading the values, okay?

71
00:04:19.333 --> 00:04:24.286
And it's not yet,
if this is not hack enough,

72
00:04:24.286 --> 00:04:27.085
we need to do this, okay?

73
00:04:27.085 --> 00:04:32.671
And also, we are now going to return this.

74
00:04:32.671 --> 00:04:35.390
It says, then what?

75
00:04:35.390 --> 00:04:37.861
I said it was hacky, okay?

76
00:04:37.861 --> 00:04:43.471
I think, all right, I don't need
that comma, but anyway, if you want,

77
00:04:43.471 --> 00:04:48.195
we can take this out and
call this the body and put it like this.

78
00:04:48.195 --> 00:04:55.057
Okay, it's really hacky, as you can see,
but we will see if that works.

79
00:04:55.057 --> 00:04:56.505
So what's the idea, okay?

80
00:04:56.505 --> 00:04:58.326
What's the idea?

81
00:04:58.326 --> 00:05:03.103
The idea is that, let's try to
understand that function first.

82
00:05:03.103 --> 00:05:04.054
What's the hack?

83
00:05:04.054 --> 00:05:04.821
How the hack looks like?

84
00:05:04.821 --> 00:05:09.357
By the way, this function is just,
you create the function once,

85
00:05:09.357 --> 00:05:13.741
you use it every time you want
to implement this pattern, okay?

86
00:05:13.741 --> 00:05:20.560
So let's say, I will delete this, so
this is just for testing purposes.

87
00:05:20.560 --> 00:05:24.401
I have an HTML that will look like this.

88
00:05:24.401 --> 00:05:30.574
I want an h1, and I want the h1
to interpolate with the title.

89
00:05:30.574 --> 00:05:36.530
And I have a paragraph that I want to
interpolate with the description, okay?

90
00:05:36.530 --> 00:05:41.081
But I don't have the title or
the description right now, so

91
00:05:41.081 --> 00:05:45.813
I'm not going to use, here,
I'm not going to use backtick,

92
00:05:45.813 --> 00:05:48.102
just a normal string, okay?

93
00:05:48.102 --> 00:05:53.175
Because I don't have a title
,I don't have a description,

94
00:05:53.175 --> 00:05:59.555
it's just, this is my template by the way,
I can you I cannot use new lines.

95
00:05:59.555 --> 00:06:03.489
But I want somehow to
make the interpolation.

96
00:06:03.489 --> 00:06:07.271
So I'm going to call,
I will say the final HTML,

97
00:06:07.271 --> 00:06:12.439
it's calling my function,
interpolate, I will pass my string,

98
00:06:12.439 --> 00:06:16.338
HTML, and
I will pass an object with parameters.

99
00:06:16.338 --> 00:06:17.695
That's the idea.

100
00:06:17.695 --> 00:06:23.262
So I will pass an object that
will have a title, I don't know,

101
00:06:23.262 --> 00:06:29.385
Vanilla JS, and a description,
&gt;&gt; Maximiliano Firtman: Great

102
00:06:29.385 --> 00:06:32.625
way to create web apps.

103
00:06:32.625 --> 00:06:37.323
So I want that to happen, so
we understand the goal, right?

104
00:06:37.323 --> 00:06:39.008
Well, how does it work?

105
00:06:39.008 --> 00:06:41.630
Well, first, let's try to analyze this.

106
00:06:41.630 --> 00:06:49.126
Names would actually get the names of
the keys, so it's title and description.

107
00:06:49.126 --> 00:06:53.540
Values will get, well, Vanilla JS, and

108
00:06:53.540 --> 00:06:57.206
great way for blah, blah, okay?

109
00:06:57.206 --> 00:06:58.903
Make sense?

110
00:06:58.903 --> 00:07:00.618
Now, here comes the tricky part.

111
00:07:00.618 --> 00:07:04.498
We create the body, okay, with this.

112
00:07:04.498 --> 00:07:12.069
So the body will actually be return and
the string, and the string is this.

113
00:07:17.606 --> 00:07:19.611
&gt;&gt; Maximiliano Firtman: That's
where we are returning, okay?

114
00:07:19.611 --> 00:07:22.422
And we are creating a function now.

115
00:07:22.422 --> 00:07:25.955
We are creating a function,
let's create the function.

116
00:07:25.955 --> 00:07:28.924
So I'm testing this to see if
you can get what's going on.

117
00:07:28.924 --> 00:07:32.436
It doesn't matter if you don't get it,
you just use it.

118
00:07:32.436 --> 00:07:37.015
We create a function,
receiving then spreading the names, so,

119
00:07:37.015 --> 00:07:38.773
title and description.

120
00:07:38.773 --> 00:07:43.039
So it receives title and
description as an argument, okay?

121
00:07:43.039 --> 00:07:47.141
And the body is, this is a body.

122
00:07:48.526 --> 00:07:51.689
&gt;&gt; Maximiliano Firtman: And
then it executes the function,

123
00:07:52.898 --> 00:07:54.387
&gt;&gt; Maximiliano Firtman: With the values.

124
00:07:54.387 --> 00:07:58.086
And the values are my true text.

125
00:07:58.086 --> 00:08:04.751
And so the trick is actually
creating a function on the fly,

126
00:08:04.751 --> 00:08:13.282
that will execute a template string
that receives a type span description,

127
00:08:13.282 --> 00:08:17.965
and just call the normal interpolation.

128
00:08:17.965 --> 00:08:21.049
It's really hacky, okay?

129
00:08:21.049 --> 00:08:26.570
By the way, we were really used
to these hacks 15 years ago.

130
00:08:26.570 --> 00:08:28.398
Everything was a hack at that time, okay?

131
00:08:28.398 --> 00:08:30.118
But does it make sense?

132
00:08:30.118 --> 00:08:32.355
Kind of, okay?

133
00:08:32.355 --> 00:08:37.843
Anyway, so let me remove all
the demo part I have here.

134
00:08:37.843 --> 00:08:43.003
So, that means that now I can,
the whole idea is

135
00:08:43.003 --> 00:08:48.425
to now replace all these
things that we have here.

136
00:08:48.425 --> 00:08:50.177
So I'm going to just delete,

137
00:08:50.177 --> 00:08:54.183
I will keep the delete button
because I'm not touching the button.

138
00:08:54.183 --> 00:09:00.777
I just need to,
I got the template, that's okay.

139
00:09:00.777 --> 00:09:04.408
I'm actually not using this anymore,
that's fine.

140
00:09:04.408 --> 00:09:07.863
And now I'm gonna say, my inner HTML will

141
00:09:07.863 --> 00:09:12.715
be the interpolation of the inner
HTML from the template.

142
00:09:12.715 --> 00:09:17.032
That's the one that we
are getting from here.

143
00:09:17.032 --> 00:09:20.245
So this is my string, okay?

144
00:09:20.245 --> 00:09:25.322
And I want to interpolate,
to run the interpolation over

145
00:09:25.322 --> 00:09:32.643
an object that I'm creating with
the properties, quantity, price, and name.

146
00:09:32.643 --> 00:09:35.991
Because these are the variables
that I'm expecting, okay?

147
00:09:35.991 --> 00:09:40.691
Well, in this case,
I already deleted the previous call, but

148
00:09:40.691 --> 00:09:42.655
I already have the thing.

149
00:09:42.655 --> 00:09:48.574
But actually,
here I need the item.quantity.

150
00:09:48.574 --> 00:09:52.428
And I'm adding an x, so it says 2x, 3x.

151
00:09:52.428 --> 00:09:55.968
Price, it's gonna be the dollar sign and

152
00:09:55.968 --> 00:10:00.530
then an interpolation
with item .product.price.

153
00:10:00.530 --> 00:10:04.346
To fixed two, so
we have only two decimals.

154
00:10:06.983 --> 00:10:09.309
&gt;&gt; Maximiliano Firtman: That's
what I want to interpolate here.

155
00:10:09.309 --> 00:10:14.264
And name is simple, item.product.name.

156
00:10:14.264 --> 00:10:17.111
Missing a comma, like that.

157
00:10:17.111 --> 00:10:20.581
Again, this Interpolate function
should be somewhere else,

158
00:10:20.581 --> 00:10:24.124
it doesn't need to be there, so
I can reuse it anytime I need it.

159
00:10:24.124 --> 00:10:27.836
It can be a class, it can be a singleton,
okay, you name it.

160
00:10:27.836 --> 00:10:31.384
And then you call it every time
you wanna do something like this.

161
00:10:31.384 --> 00:10:36.020
And now cross your fingers, let's see if
that if that works or not, I don't know.

162
00:10:40.944 --> 00:10:43.503
&gt;&gt; Maximiliano Firtman: Let's reload,
add something here.

163
00:10:43.503 --> 00:10:46.625
Let me add another Macchiato.

164
00:10:46.625 --> 00:10:52.759
When I'm getting there, it's there,
but now it's interpolated.

165
00:10:52.759 --> 00:10:56.055
So, adding something new, it's simpler.

166
00:10:56.055 --> 00:10:58.664
I go to the template,
I just add what I want.

167
00:10:58.664 --> 00:11:04.392
So, I mean, I go here and
I add something else, like,

168
00:11:04.392 --> 00:11:09.392
I have the name, and
also, color, whatever.

169
00:11:09.392 --> 00:11:12.712
Then I'm going here and

170
00:11:12.712 --> 00:11:17.862
I'm adding something, whatever.

171
00:11:17.862 --> 00:11:23.703
Anyway, string will work, so
it's it's simple now, it's simpler,

172
00:11:23.703 --> 00:11:29.951
to go and change my template and then
bind that template with something else.

173
00:11:29.951 --> 00:11:34.693
So if that worked, now I have that, okay?

174
00:11:34.693 --> 00:11:37.509
So now it's much simpler to change that.

175
00:11:37.509 --> 00:11:41.603
I don't need to touch the DOM,
I just changed my data,

176
00:11:41.603 --> 00:11:44.907
the data source, and the template, okay?

177
00:11:44.907 --> 00:11:46.819
Make sense?

178
00:11:46.819 --> 00:11:49.696
Yeah, hackey, but useful anyway.

179
00:11:49.696 --> 00:11:54.008
By the way, if you're using React, I'm
not saying they're using this hack, but

180
00:11:54.008 --> 00:11:55.562
they're not using the hack.

181
00:11:55.562 --> 00:12:01.257
But internally, if you think about
everything that happens with React, it's

182
00:12:01.257 --> 00:12:07.124
also hacky in terms of what's going on
when everything is being executed, okay?

183
00:12:07.124 --> 00:12:10.976
It's not this hack, it's a different hack,
but it's also hacky, okay?

184
00:12:10.976 --> 00:12:15.913
So, yeah, this is like a micro framework
that you are creating, at some point.

