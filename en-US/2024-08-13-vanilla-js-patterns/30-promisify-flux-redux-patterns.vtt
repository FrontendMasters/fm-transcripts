WEBVTT

1
00:00:00.110 --> 00:00:02.775
&gt;&gt; Maximiliano Firtman: Patterns
about data and state management.

2
00:00:02.775 --> 00:00:06.540
And also typically this is useful or

3
00:00:06.540 --> 00:00:12.446
more useful when you have
large-scale applications.

4
00:00:12.446 --> 00:00:16.555
So let's start with some, I'm just going
to tell you about some design patterns.

5
00:00:16.555 --> 00:00:17.840
There are a lot, and

6
00:00:17.840 --> 00:00:22.762
maybe I can link to one of the examples
that we have already done in some cases.

7
00:00:22.762 --> 00:00:27.670
For example this one,
promisify data, what is this?

8
00:00:27.670 --> 00:00:29.583
Also, the term is weird.

9
00:00:29.583 --> 00:00:33.517
The problem is that data management
tends to change in the future.

10
00:00:33.517 --> 00:00:39.377
I mean, I have a list of something and
in the future, that list will change.

11
00:00:39.377 --> 00:00:42.950
The source of the list will change.

12
00:00:42.950 --> 00:00:45.598
So when working with a static,
hardcoded data,

13
00:00:45.598 --> 00:00:47.999
is difficult to move
later to an async call.

14
00:00:47.999 --> 00:00:53.545
For example, I have our list of commands.

15
00:00:53.545 --> 00:00:56.482
It's a hardcoded list.

16
00:00:56.482 --> 00:00:59.649
Okay, that's one example,

17
00:00:59.649 --> 00:01:04.849
the data that we have in
our to-do list was a set.

18
00:01:04.849 --> 00:01:07.947
It was a synchronous set.

19
00:01:07.947 --> 00:01:11.358
Well, we have a problem there.

20
00:01:11.358 --> 00:01:15.215
We don't know that we had a problem,
but we have a problem in the future,

21
00:01:15.215 --> 00:01:16.110
if we wanna get.

22
00:01:16.110 --> 00:01:18.416
So let me show you
the problem in the code.

23
00:01:18.416 --> 00:01:23.339
Let me load again the to-do masters.

24
00:01:23.339 --> 00:01:26.671
So I'm talking about this.

25
00:01:26.671 --> 00:01:30.883
The actually items, I guess is a problem.

26
00:01:30.883 --> 00:01:34.785
I'm returning the data synchronously.

27
00:01:34.785 --> 00:01:41.725
What if tomorrow the items are coming
from a database or from the network?

28
00:01:41.725 --> 00:01:47.757
Yeah, well, I need to change
this to an async function,

29
00:01:47.757 --> 00:01:52.924
but also I need to change
every consumer of that.

30
00:01:52.924 --> 00:01:57.720
Do you realize that we were using this
in a lot of places, and we have already

31
00:01:57.720 --> 00:02:02.303
coded that tested that we are late to
the party if you wanna change that.

32
00:02:02.303 --> 00:02:06.817
So the promisified data
design pattern says

33
00:02:06.817 --> 00:02:11.214
that we should from start create an async.

34
00:02:11.214 --> 00:02:16.036
So instead of doing that, I should,
even if it's a set, it doesn't matter,

35
00:02:16.036 --> 00:02:20.360
I should already, from the beginning,
create something like this.

36
00:02:20.360 --> 00:02:24.205
getItems, not using a property now,
getItems.

37
00:02:24.205 --> 00:02:28.848
And I'm going to return a promise,
even if it's not async.

38
00:02:28.848 --> 00:02:33.505
So for now, I can return a Promise..

39
00:02:33.505 --> 00:02:40.939
And I can directly resolve
the promise with that data.

40
00:02:40.939 --> 00:02:46.377
From scratch, so from scratch, every data
that you have, even if it's hardcoded or

41
00:02:46.377 --> 00:02:50.244
if it's a synchronous data,
just always return a promise.

42
00:02:50.244 --> 00:02:57.790
So now consumers are forced to wait for
this, to use, to consume a promise.

43
00:02:57.790 --> 00:03:02.356
So you can use promises with synchronous
information as well, like in this case.

44
00:03:02.356 --> 00:03:06.094
So in the future,
if I change the implementation, and

45
00:03:06.094 --> 00:03:10.972
now the sync data becomes async
because it's coming from the network,

46
00:03:10.972 --> 00:03:15.303
it's coming from hardware that
I have somewhere or whatever.

47
00:03:15.303 --> 00:03:18.682
And now I don't need to
change all the consumers.

48
00:03:18.682 --> 00:03:20.637
I just change the implementation, okay?

49
00:03:20.637 --> 00:03:22.616
Make sense?

50
00:03:22.616 --> 00:03:24.002
You have any question on that?

51
00:03:28.578 --> 00:03:32.400
&gt;&gt; Maximiliano Firtman: Just even
if you are returning a value here,

52
00:03:32.400 --> 00:03:38.616
I know you have a maxAmount of and
you say, it's 5, okay, return 5.

53
00:03:38.616 --> 00:03:43.682
No, don't return 5,
return Promise-resolve(5).

54
00:03:43.682 --> 00:03:48.684
So force yourself to return
always a promise when

55
00:03:48.684 --> 00:03:56.746
you think that maybe in the future that
data can be coming from an async source.

56
00:03:56.746 --> 00:03:59.684
That's kind of the idea, okay?

57
00:03:59.684 --> 00:04:05.783
Okay, that's promisified data, that was
actually what we're explaining here.

58
00:04:05.783 --> 00:04:08.881
So right here,
have an example on how to do that.

59
00:04:08.881 --> 00:04:13.123
So before we were returning the data,
now we just return Promise.resolve and

60
00:04:13.123 --> 00:04:13.901
that's all.

61
00:04:13.901 --> 00:04:20.052
But that will make things easier
in the future, if that changes.

62
00:04:20.052 --> 00:04:25.147
Flux, have you heard about the Flux term?

63
00:04:25.147 --> 00:04:27.348
No, design pattern?

64
00:04:27.348 --> 00:04:28.431
We have one yes.

65
00:04:28.431 --> 00:04:29.683
&gt;&gt; Student: Redux is based on, right?

66
00:04:29.683 --> 00:04:32.677
&gt;&gt; Maximiliano Firtman: Exactly,
probably you have heard about Redux.

67
00:04:32.677 --> 00:04:36.648
Well, Flux is the theory behind Redux.

68
00:04:36.648 --> 00:04:41.414
Actually, Redux is a shorter
implementation of the Flux design pattern.

69
00:04:41.414 --> 00:04:45.423
So the problem to solve is that
in large scale applications,

70
00:04:45.423 --> 00:04:48.805
managing the state of an app
becomes too complex and

71
00:04:48.805 --> 00:04:52.043
unpredictable that anyone
can change the data.

72
00:04:52.043 --> 00:04:55.443
And what happens is that data
should update something, and

73
00:04:55.443 --> 00:05:00.071
then I change the data, but I'm forgetting
to update the data and the database.

74
00:05:00.071 --> 00:05:03.421
So, it becomes really unmanageable.

75
00:05:03.421 --> 00:05:08.660
So the Flux design pattern
uses unidirectional data flow,

76
00:05:08.660 --> 00:05:14.855
simplifying the architecture and
predictability of state changes.

77
00:05:14.855 --> 00:05:16.543
If you have never played with this,

78
00:05:16.543 --> 00:05:20.495
I'm not expecting you to understand fully
the design pattern just in two minutes.

79
00:05:20.495 --> 00:05:22.242
That I'm going to mention that.

80
00:05:22.242 --> 00:05:28.241
But it's just a trigger for
you to go and get more later.

81
00:05:28.241 --> 00:05:30.386
But some use cases is data storage,

82
00:05:30.386 --> 00:05:34.895
form-intense applications where
everything is a form in several steps,

83
00:05:34.895 --> 00:05:39.490
things like that, e-commerce,
content management systems, and so on.

84
00:05:39.490 --> 00:05:42.280
And I will show you now
a very common animation.

85
00:05:42.280 --> 00:05:48.203
It's from the official Redux website that
shows this case is Redux that it's not

86
00:05:48.203 --> 00:05:54.228
100% following the Flux design pattern,
but it's kind of going on that way.

87
00:05:54.228 --> 00:05:57.579
So, it's simpler to
understand if you know Redux,

88
00:05:57.579 --> 00:06:02.454
the difference is the Flux animation,
except that's more than one store,

89
00:06:02.454 --> 00:06:04.986
which is not part of Redux, actually.

90
00:06:04.986 --> 00:06:05.921
Redux has only one store.

91
00:06:05.921 --> 00:06:09.577
But actually,
you separate this in a store.

92
00:06:09.577 --> 00:06:11.348
What's a store?

93
00:06:11.348 --> 00:06:13.104
An object with your data.

94
00:06:13.104 --> 00:06:16.621
For example, our to-do items,
that's a store.

95
00:06:16.621 --> 00:06:20.917
Our set of to-do items, that's a store.

96
00:06:20.917 --> 00:06:21.725
Then we have the view.

97
00:06:21.725 --> 00:06:22.333
What's the view?

98
00:06:22.333 --> 00:06:26.192
HTML, so HTML, the domain API,
that's the view.

99
00:06:26.192 --> 00:06:30.192
The view is the,
why is it called the view and not HTML?

100
00:06:30.192 --> 00:06:32.698
Because the pattern is
agnostic to the platform.

101
00:06:32.698 --> 00:06:36.290
You can use Redux on mobile apps,
on desktop native apps.

102
00:06:36.290 --> 00:06:37.589
It's not for web apps, okay?

103
00:06:37.589 --> 00:06:42.147
Yeah, we are using it on web apps, but
you can use it on any piece of software.

104
00:06:42.147 --> 00:06:43.448
So that's a view.

105
00:06:43.448 --> 00:06:47.852
Actions are actually similar
to the commands idea,

106
00:06:47.852 --> 00:06:53.771
the commands that we created, so
things that happen over the system.

107
00:06:53.771 --> 00:06:58.198
And then we have middleware,
dispatcher, let's get out that for

108
00:06:58.198 --> 00:07:02.625
a second, and reducers,
those are the most important part here,

109
00:07:02.625 --> 00:07:07.788
there are functions that receives
the action that has just been dispatched.

110
00:07:07.788 --> 00:07:10.670
For example,
someone has just added the to-do.

111
00:07:10.670 --> 00:07:13.304
Reducers will receive that action and

112
00:07:13.304 --> 00:07:17.840
will make a decision about if they
need to change or not the store.

113
00:07:17.840 --> 00:07:22.215
I'm simplifying this, and again,
this is a two-minute expansion of this.

114
00:07:22.215 --> 00:07:24.120
But here you have the animation.

115
00:07:24.120 --> 00:07:28.330
So let's say that there is an event
in the view, you click a button and

116
00:07:28.330 --> 00:07:29.792
action is dispatched.

117
00:07:29.792 --> 00:07:32.477
Then that action goes to all the reducers.

118
00:07:32.477 --> 00:07:36.218
The reducers are making
a change in the state.

119
00:07:36.218 --> 00:07:38.286
And because you change the store,

120
00:07:38.286 --> 00:07:41.575
you change the state something
has changing the view.

121
00:07:41.575 --> 00:07:44.154
So I'm adding a new to-do, okay?

122
00:07:44.154 --> 00:07:44.741
So think about it.

123
00:07:44.741 --> 00:07:45.602
I'm adding a new to-do.

124
00:07:45.602 --> 00:07:49.869
You press the button,
then it creates an action, the add action.

125
00:07:49.869 --> 00:07:51.314
Let's go there the action.

126
00:07:51.314 --> 00:07:53.271
The add action goes there.

127
00:07:53.271 --> 00:07:55.598
One reducer says, yeah, I can take that.

128
00:07:55.598 --> 00:07:59.554
I need to add that to my set, and
because the state has changed,

129
00:07:59.554 --> 00:08:01.131
I'm updating the view.

130
00:08:01.131 --> 00:08:03.034
It's unidirectional.

131
00:08:03.034 --> 00:08:04.279
That's the idea, okay?

132
00:08:04.279 --> 00:08:08.698
That's a design pattern that you can
implement with your own ideas or

133
00:08:08.698 --> 00:08:13.057
you probably will going to use
the library for that, such as Redux.

134
00:08:13.057 --> 00:08:17.711
There are other Flux-related
design patterns or

135
00:08:17.711 --> 00:08:22.705
libraries that are based
on design patterns as well.

136
00:08:22.705 --> 00:08:25.888
&gt;&gt; Student: And just to know,
we have a couple of courses on,

137
00:08:25.888 --> 00:08:28.606
we have a Redux fundamentals course, and

138
00:08:28.606 --> 00:08:33.048
then a Redux that goes into Redux Toolkit,
taught by Steve Kinney.

139
00:08:33.048 --> 00:08:35.084
&gt;&gt; Maximiliano Firtman: Okay,
cool yeah, it's a big topic.

140
00:08:35.084 --> 00:08:37.966
Okay, so, and by the way,
it's a design pattern, so

141
00:08:37.966 --> 00:08:41.181
that means that you don't need
to implement that, always.

142
00:08:41.181 --> 00:08:45.422
In fact, there was a wave, I think that
it was four years ago, five years ago,

143
00:08:45.422 --> 00:08:47.753
where everyone said, I need to use Redux.

144
00:08:47.753 --> 00:08:50.502
If you're not using Redux,
you are doing something wrong.

145
00:08:50.502 --> 00:08:53.309
And then that era has already passed,

146
00:08:53.309 --> 00:08:57.881
but that's because we were not
thinking on design patterns.

147
00:08:57.881 --> 00:09:01.181
We were thinking that it's
the cool library of the moment.

148
00:09:01.181 --> 00:09:06.121
It is a design pattern, so, you need to
see if it applies to your problem, and

149
00:09:06.121 --> 00:09:08.100
if it applies to your context.

150
00:09:08.100 --> 00:09:10.946
We need to remember those
ideas from a design pattern.

