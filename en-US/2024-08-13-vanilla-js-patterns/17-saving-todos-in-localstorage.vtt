WEBVTT

1
00:00:00.000 --> 00:00:03.614
&gt;&gt; Maximiliano Firtman: So far,
okay, maybe you can trust me, okay?

2
00:00:03.614 --> 00:00:06.288
That we'll get better, but
let's try to make it better.

3
00:00:06.288 --> 00:00:08.949
So let's add some ideas.

4
00:00:08.949 --> 00:00:11.131
For example,
let's start by adding persistence.

5
00:00:11.131 --> 00:00:15.852
So now, every time I'm reloading,
I don't need to create a new list.

6
00:00:15.852 --> 00:00:17.315
So let's add persistence.

7
00:00:17.315 --> 00:00:21.120
And I'm trying to remember
when I asked you this before,

8
00:00:21.120 --> 00:00:25.875
how to add persistent, and we had to
dig into the DOM to actually get it,

9
00:00:25.875 --> 00:00:31.207
it was actually complicated, but let's
try to do it with our current version.

10
00:00:31.207 --> 00:00:35.584
So I'm going to create a new file,
storage.js, and

11
00:00:35.584 --> 00:00:39.487
storage.js will actually
work with the list.

12
00:00:39.487 --> 00:00:45.741
So let's first start by
getting the singleton, okay?

13
00:00:45.741 --> 00:00:47.064
That's the list.

14
00:00:47.064 --> 00:00:54.157
I'm then going to export a locally storage
object, a little object that I'm creating,

15
00:00:54.157 --> 00:00:58.708
then we shall have two functions,
load and save, okay?

16
00:00:58.708 --> 00:01:02.333
We'll load and save, I need a comma here.

17
00:01:02.333 --> 00:01:07.244
There we are, we are using object literal,
load and save.

18
00:01:07.244 --> 00:01:12.126
Then it will use the local storage API,
later in the future,

19
00:01:12.126 --> 00:01:16.720
you can change this for
index EV or any other, or SQLite,

20
00:01:16.720 --> 00:01:20.107
to using WebAssembly, or any other API.

21
00:01:20.107 --> 00:01:21.781
If you wanna get more into that,

22
00:01:21.781 --> 00:01:25.877
you can check the data storage course
at frontendmasters.io from anywhere.

23
00:01:25.877 --> 00:01:30.736
So we use different APIs there for
storing data, but

24
00:01:30.736 --> 00:01:36.700
we will use just the basic one
that will just take local storage,

25
00:01:36.700 --> 00:01:42.234
set item, so this will persist
among different sessions.

26
00:01:42.234 --> 00:01:45.945
We can call these todos, and

27
00:01:45.945 --> 00:01:51.057
you should stringify the collection.

28
00:01:51.057 --> 00:01:56.862
But we have a small problem,
that we know how to solve anyway,

29
00:01:56.862 --> 00:02:02.681
sets cannot be converted into
JSON directly with stringify.

30
00:02:02.681 --> 00:02:07.261
So we need to convert them into an array
first, that we have already done before.

31
00:02:07.261 --> 00:02:12.785
Okay, so I'm going to create
an array from that set.

32
00:02:12.785 --> 00:02:18.373
Yeah, that set has some advantages,
but also at the same time,

33
00:02:18.373 --> 00:02:22.319
it's adding some overhead on other places.

34
00:02:22.319 --> 00:02:26.539
So we are going to save this,
and now for loading,

35
00:02:26.539 --> 00:02:30.469
by the way,
when we should be executing save?

36
00:02:30.469 --> 00:02:37.891
So we wanna save this, when,
which moments of my life cycle?

37
00:02:37.891 --> 00:02:39.552
&gt;&gt; Speaker 2: Unified.

38
00:02:39.552 --> 00:02:41.097
&gt;&gt; Maximiliano Firtman: Sorry
&gt;&gt; Speaker 2: Notify.

39
00:02:41.097 --> 00:02:43.480
&gt;&gt; Maximiliano Firtman: Notify,
well, going back to the, yeah,

40
00:02:43.480 --> 00:02:47.138
remember that from a consumer,
we don't see the notify, okay?

41
00:02:47.138 --> 00:02:51.738
But when the data changes, and we already
implemented the observer pattern there.

42
00:02:51.738 --> 00:02:57.046
So we can go here, directly here, and
just talk to my TodoList and say, hey,

43
00:02:57.046 --> 00:03:02.380
can you add me another observer, and
just call LocalStorage, I should say.

44
00:03:02.380 --> 00:03:07.575
So I'm adding another observer that now
we have two, the one that is rendering

45
00:03:07.575 --> 00:03:12.946
the list on the screen, and now we have
added another one that is saving the data.

46
00:03:12.946 --> 00:03:17.812
So every time the data changes, it's not
the best performance solution, okay,

47
00:03:17.812 --> 00:03:20.703
but we are not talking
about performance today,

48
00:03:20.703 --> 00:03:23.117
we're talking about design patterns.

49
00:03:23.117 --> 00:03:27.854
Well, to load,
we need to do some stuff here first.

50
00:03:27.854 --> 00:03:30.691
Let's check, because the first
time you load the web app,

51
00:03:30.691 --> 00:03:33.487
there is nothing in the LocalStorage,
it's undefined.

52
00:03:33.487 --> 00:03:36.670
So let's check if we do have todos.

53
00:03:36.670 --> 00:03:41.607
If we do have todos,
we need to do something like this.

54
00:03:41.607 --> 00:03:47.849
So you may be tempted to go and
say, or do the reverse operation,

55
00:03:47.849 --> 00:03:53.631
like JSON.parse of
LocalStorage.getItem"todos" and

56
00:03:53.631 --> 00:03:55.720
store that in items.

57
00:03:55.720 --> 00:04:02.192
You're probably gonna be tempted for that,
but there is a problem if we do that.

58
00:04:02.192 --> 00:04:05.810
So, I mean, I will change this code.

59
00:04:05.810 --> 00:04:10.894
So, we did create the replace list,

60
00:04:10.894 --> 00:04:15.984
okay, something like this, okay?

61
00:04:15.984 --> 00:04:18.962
I mean, it seems okay,
but there is a problem.

62
00:04:21.804 --> 00:04:26.119
&gt;&gt; Maximiliano Firtman: This is an array,
and the other one is a set, so

63
00:04:26.119 --> 00:04:29.451
we are kind of changing the nature.

64
00:04:29.451 --> 00:04:32.105
So JSON.parse returns an array.

65
00:04:32.105 --> 00:04:37.545
So instead of doing that, I mean,
quickly, something that we can do,

66
00:04:37.545 --> 00:04:41.642
it can just convert that and
then loop, like create.

67
00:04:44.247 --> 00:04:49.426
&gt;&gt; Maximiliano Firtman: Let t
of JSON.parse, like so, yep.

68
00:04:49.426 --> 00:04:52.968
And then, add one by one and

69
00:04:52.968 --> 00:04:57.751
create a new TodoItem with the text.

70
00:04:57.751 --> 00:05:04.918
It's like mapping back to my
original structure, okay?

71
00:05:04.918 --> 00:05:08.302
So, saving happens automatically, but

72
00:05:08.302 --> 00:05:12.563
loading it might not happen automatically,
okay?

73
00:05:12.563 --> 00:05:18.584
So we need to somehow
find a way to call this.

74
00:05:18.584 --> 00:05:25.830
Where do you think is a good
spot to call LocalStorage load?

75
00:05:25.830 --> 00:05:26.991
&gt;&gt; Speaker 3: ContentLoaded.

76
00:05:26.991 --> 00:05:28.778
&gt;&gt; Maximiliano Firtman: Add
DOMContentLoaded in App.js?

77
00:05:28.778 --> 00:05:29.759
Yeah, here.

78
00:05:29.759 --> 00:05:33.096
And by the way,
we have a very large DOMContentLoaded,

79
00:05:33.096 --> 00:05:34.662
there is no need for that.

80
00:05:34.662 --> 00:05:42.028
So I can just, for example,
close it here, and open another one.

81
00:05:42.028 --> 00:05:46.514
In case you feel it feels better,
so because this is the observer

82
00:05:46.514 --> 00:05:51.102
pattern as well in the DOM, so
I can have several, one per topic.

83
00:05:51.102 --> 00:05:56.079
So we can separate and I can add another
one here that will also be responsible for

84
00:05:56.079 --> 00:05:57.279
loading the data.

85
00:05:57.279 --> 00:05:58.925
So I will talk with LocalStorage.

86
00:05:58.925 --> 00:06:02.947
Remember, this is coming
from another module .load.

87
00:06:02.947 --> 00:06:06.367
And every time you're
importing another module,

88
00:06:06.367 --> 00:06:11.307
please remember to go to the top and
check that in this case it added the js.

89
00:06:11.307 --> 00:06:14.709
And don't ask me why,
we don't have the .js now and no before,

90
00:06:14.709 --> 00:06:16.727
because I don't have the answer yet.

91
00:06:16.727 --> 00:06:21.338
There should be an answer, there's
always an answer, but I don't have it.

92
00:06:21.338 --> 00:06:23.103
Just always go and check.

93
00:06:23.103 --> 00:06:28.719
So to see if this works,
let me refresh and let me add some here.

94
00:06:28.719 --> 00:06:35.193
So we have again, lunch, and
now it's all working, so let's see why.

95
00:06:35.193 --> 00:06:37.192
Console, TodoList is not defined.

96
00:06:37.192 --> 00:06:44.590
Okay, storage line one, because I didn't
import TodoList, so it's correct.

97
00:06:44.590 --> 00:06:49.242
And now we don't have the .js,
so let's add it.

98
00:06:49.242 --> 00:06:53.823
And now, TodoItem, okay, you're right.

99
00:06:53.823 --> 00:06:57.701
TodoItem as well, cool.

100
00:06:57.701 --> 00:06:59.260
Now we are back.

101
00:06:59.260 --> 00:07:01.663
By the way, where is this coming from?

102
00:07:01.663 --> 00:07:07.173
[LAUGH] So, it seems like my saving
was actually working behind scenes.

103
00:07:07.173 --> 00:07:11.041
So now I can add anything,
if I refresh, it's still there.

104
00:07:13.272 --> 00:07:17.623
&gt;&gt; Maximiliano Firtman: So
now we have added one line in our app.js,

105
00:07:17.623 --> 00:07:21.855
just one line, this one, and now we have,

106
00:07:21.855 --> 00:07:25.635
automatically, data persistence.

107
00:07:25.635 --> 00:07:30.308
Yeah, we also created the class,
but we are really the couple, so

108
00:07:30.308 --> 00:07:33.153
it was actually pretty easy to add this.

109
00:07:33.153 --> 00:07:37.103
We didn't touch the DOM or
anything so complicated,

110
00:07:37.103 --> 00:07:41.332
we just initialized something,
and now it's working.

111
00:07:41.332 --> 00:07:47.148
So now we have persistence, so
if I delete, refresh, it's still empty.

112
00:07:47.148 --> 00:07:52.240
Launch, let's say, finish the workshop.

113
00:07:52.240 --> 00:07:57.161
Okay, and then we'll get the gin tonic,
wherever.

114
00:07:57.161 --> 00:07:59.837
And now if I refresh, I have persistence.

