WEBVTT

1
00:00:00.160 --> 00:00:05.140
So far, we have already created
the mixing and the classes.

2
00:00:05.140 --> 00:00:09.726
We have one more step before we can
actually connect this together and

3
00:00:09.726 --> 00:00:11.240
see if it's working.

4
00:00:12.250 --> 00:00:17.330
We're going to implement
the command design pattern.

5
00:00:17.330 --> 00:00:23.560
For that, I'm going to create another file
within the web app folder, command.js.

6
00:00:23.560 --> 00:00:28.949
And here, we're going to
implement actually one class and

7
00:00:28.949 --> 00:00:31.436
then two literal objects.

8
00:00:31.436 --> 00:00:34.543
We're going to create a class for
one command.

9
00:00:34.543 --> 00:00:37.329
Actually, it's one command execution,
but typically,

10
00:00:37.329 --> 00:00:39.067
this is what is known as the command.

11
00:00:39.067 --> 00:00:43.292
So the command is a class that
will typically has the name.

12
00:00:43.292 --> 00:00:48.222
So remember, what's a command, something
that you wanna execute in your app.

13
00:00:48.222 --> 00:00:50.811
So for example, it can be add, delete.

14
00:00:50.811 --> 00:00:53.522
So every action has a name.

15
00:00:53.522 --> 00:00:55.632
And also, it can contain arguments.

16
00:00:57.062 --> 00:01:00.871
So then just for
making this easier to construct,

17
00:01:00.871 --> 00:01:05.951
we can create the constructor,
receiving both name and args, and

18
00:01:05.951 --> 00:01:11.086
just applying this,
&gt;&gt; Maximiliano Firtman: To the properties.

19
00:01:13.246 --> 00:01:15.126
That's all our class, nothing else.

20
00:01:15.126 --> 00:01:20.978
Then I'm going to create
some kind of enum for

21
00:01:20.978 --> 00:01:24.213
all the classes we have.

22
00:01:24.213 --> 00:01:27.169
We don't have enums in JavaScript, so

23
00:01:27.169 --> 00:01:32.196
we can simulate the idea of an enum,
so like a short set of options.

24
00:01:32.196 --> 00:01:32.970
We can call this Commands.

25
00:01:32.970 --> 00:01:38.712
I'm using capital C to express
it's kind of a singleton class,

26
00:01:38.712 --> 00:01:43.300
even if it's not a class,
okay, it's an object.

27
00:01:43.300 --> 00:01:47.350
And then we have two right now,
ADD and DELETE.

28
00:01:47.350 --> 00:01:53.920
And because this is object literal syntax,
we need to actually set a value to those.

29
00:01:55.560 --> 00:01:57.080
This is just for the name.

30
00:01:57.080 --> 00:02:02.118
So then we don't need to pass the name,
we can just use that constant value,

31
00:02:02.118 --> 00:02:05.453
okay, like emulating
enums in other languages.

32
00:02:05.453 --> 00:02:10.078
And finally, we need to create another
object that should be a singleton.

33
00:02:10.078 --> 00:02:14.831
So, instead of creating a class and
applying the singleton pattern there,

34
00:02:14.831 --> 00:02:17.592
I can just use the idea
of an object literal.

35
00:02:17.592 --> 00:02:20.549
And I'm going to create
the CommandExecutor.

36
00:02:21.995 --> 00:02:26.319
&gt;&gt; Maximiliano Firtman: That will for
now just have one only method, execute,

37
00:02:26.319 --> 00:02:31.028
that will receive a command and
it will try to execute that.

38
00:02:31.028 --> 00:02:33.206
So this is the command.

39
00:02:33.206 --> 00:02:38.535
One point, we could also do OOP here and
create commands extending from command.

40
00:02:38.535 --> 00:02:42.261
So there are more ways to
solve the problem, but

41
00:02:42.261 --> 00:02:44.974
I don't wanna overreact, okay?

42
00:02:44.974 --> 00:02:48.987
Because we can actually cross the line and
add so

43
00:02:48.987 --> 00:02:54.544
much complexity to this that we
are going into an anti-pattern.

44
00:02:54.544 --> 00:02:59.344
So for now, I will just do a switch,
asking for the name of that command,

45
00:02:59.344 --> 00:03:00.473
and then check.

46
00:03:00.473 --> 00:03:04.859
If it's Commands.ADD,
I will do something, and

47
00:03:04.859 --> 00:03:09.657
if it's Commands.DELETE,
I will do something else.

48
00:03:10.687 --> 00:03:13.380
Okay, I can do a break as well.

49
00:03:13.380 --> 00:03:17.387
On both ADD and DELETE,
I think I will need the TodoList.

50
00:03:17.387 --> 00:03:22.462
I remember our to-do list is the class
that we have created the list,

51
00:03:22.462 --> 00:03:26.192
that has the singleton using getInstance.

52
00:03:26.192 --> 00:03:29.952
So something that I can do is here,

53
00:03:29.952 --> 00:03:35.138
before the switch,
I can create the property,

54
00:03:35.138 --> 00:03:40.209
a reference to that TodoList.getInstance.

55
00:03:40.209 --> 00:03:44.985
So we can use the instance on
both the ADD and DELETE commands.

56
00:03:44.985 --> 00:03:49.974
Have in mind that TodoList is a class
that is available on a separate file on

57
00:03:49.974 --> 00:03:51.917
a separate module.

58
00:03:51.917 --> 00:03:57.726
So VS Code may have already added
the import that we know it's in value for

59
00:03:57.726 --> 00:03:59.537
the browser.

60
00:03:59.537 --> 00:04:02.939
So we need to add the .js
to that import as well.

61
00:04:04.589 --> 00:04:05.632
But now we need to add some code.

62
00:04:05.632 --> 00:04:10.917
And actually, I can use pretty much
the same code that I had before,

63
00:04:10.917 --> 00:04:13.906
okay, in our todo without patterns.

64
00:04:13.906 --> 00:04:19.896
But anyway, I need the input,
the DOM element.

65
00:04:19.896 --> 00:04:27.414
And if you remember,
we do have in globalThis, the DOM object.

66
00:04:27.414 --> 00:04:32.380
So globalThis.DOM,
I'm fighting with the autocomplete,

67
00:04:32.380 --> 00:04:35.060
globalThis.DOM.todoInput.

68
00:04:35.060 --> 00:04:37.174
That's my input.

69
00:04:37.174 --> 00:04:44.297
So I'm going to take the text
from from that input.value.trim.

70
00:04:44.297 --> 00:04:46.771
I'm trimming the spaces, just in case.

71
00:04:46.771 --> 00:04:50.038
And then I will create an itemToAdd.

72
00:04:54.830 --> 00:04:59.032
&gt;&gt; Maximiliano Firtman: Actually, before
creating an item, I should check, for

73
00:04:59.032 --> 00:05:02.387
example, if the item
is actually available.

74
00:05:02.387 --> 00:05:08.548
Because remember that idea that we
don't wanna add twice the same todo.

75
00:05:08.548 --> 00:05:12.376
So lunch, it should be there once.

76
00:05:12.376 --> 00:05:16.836
So we can check first here if it exists or
not.

77
00:05:16.836 --> 00:05:24.407
So we can say this is the itemToAdd.

78
00:05:24.407 --> 00:05:27.877
So we can call, for
our todoList, our find.

79
00:05:27.877 --> 00:05:29.417
Remember, we do have a find method.

80
00:05:30.527 --> 00:05:37.697
So we're going to find if, A todo
with that text already exists there.

81
00:05:38.717 --> 00:05:45.455
So then, we're going to add something
to the list if two conditions are true.

82
00:05:45.455 --> 00:05:50.437
First, the text shouldn't
be just empty string, okay?

83
00:05:50.437 --> 00:05:55.055
And also,
we need the itemToAdd to be null.

84
00:05:58.089 --> 00:06:00.010
Well, actually, we can change the name.

85
00:06:00.010 --> 00:06:03.712
Here, it can be itemInList.

86
00:06:03.712 --> 00:06:08.224
I think that will be better for
understanding what it is, right?

87
00:06:08.224 --> 00:06:12.622
So then, if that's the case,
I will first remove

88
00:06:12.622 --> 00:06:17.250
the value from the input,
so I will clear the input.

89
00:06:17.250 --> 00:06:21.218
And then I will talk to my todoList and

90
00:06:21.218 --> 00:06:28.772
I will add a new todoItem that is
another class using that text, okay?

91
00:06:28.772 --> 00:06:31.346
So if those conditions are happening,

92
00:06:31.346 --> 00:06:36.650
that means that I don't have the todoItem
in the list, and also it's not empty,

93
00:06:36.650 --> 00:06:40.483
the text is not empty,
I'm going to add something there.

94
00:06:40.483 --> 00:06:44.827
And just verify that when the new
todoItem class was added here,

95
00:06:44.827 --> 00:06:50.667
it's in the right place with the .js
import, if you're using VS Code.

96
00:06:50.667 --> 00:06:51.567
Okay, that's for that.

97
00:06:51.567 --> 00:06:56.767
And then for DELETE, we're going
to use the arguments for DELETE.

98
00:06:56.767 --> 00:06:58.857
Remember that a command has arguments.

99
00:06:58.857 --> 00:07:06.159
So the arguments, typically, talking about
these arguments, typically, it's an array.

100
00:07:06.159 --> 00:07:08.246
It's not mandatory,
we are creating this, okay?

101
00:07:08.246 --> 00:07:11.509
But on the design pattern,
typically, arguments is an array.

102
00:07:11.509 --> 00:07:13.009
That's why it's args, okay?.

103
00:07:13.009 --> 00:07:15.637
There is an s, so it's an array.

104
00:07:15.637 --> 00:07:17.822
So in this case, when we are deleting,

105
00:07:17.822 --> 00:07:22.041
we are receiving one argument that
is the text that we wanna delete.

106
00:07:22.041 --> 00:07:28.577
So we can actually destructure
the array and say the textToDelete, or

107
00:07:28.577 --> 00:07:34.981
the item to delete,
it's from the current command arguments.

108
00:07:34.981 --> 00:07:36.681
This is destructuring.

109
00:07:36.681 --> 00:07:40.884
This is like sub zero,
it's destructuring the first element.

110
00:07:40.884 --> 00:07:45.561
And then we will code to the list,
the DELETE method, delete,

111
00:07:45.561 --> 00:07:48.923
passing as an argument, the textToDelete.

112
00:07:53.802 --> 00:07:57.393
So at at some point, I'm pretty
sure that some of you are thinking,

113
00:07:57.393 --> 00:07:59.031
I'm not sure if all of you, but

114
00:07:59.031 --> 00:08:03.441
some of you're thinking that this is too
complex compared with the other example.

115
00:08:03.441 --> 00:08:06.355
And yeah, I get it, okay?

116
00:08:06.355 --> 00:08:08.069
I feel the pain.

117
00:08:08.069 --> 00:08:13.301
But believe me that in a couple of
minutes, you will start understanding

118
00:08:13.301 --> 00:08:17.436
why this is better,
mostly when we are adding features.

119
00:08:17.436 --> 00:08:23.857
And you will see how simple it is to add
more features after you have implemented.

120
00:08:23.857 --> 00:08:30.442
So it's like we have some pain initially,
so it's more painful initially,

121
00:08:30.442 --> 00:08:34.712
but after that,
everything is is better, okay?

122
00:08:34.712 --> 00:08:37.967
Okay, and I think that we
are ready with our command.

123
00:08:37.967 --> 00:08:42.978
So and question on this implementation?

124
00:08:42.978 --> 00:08:46.386
I think array.find returns
undefined instead of null.

125
00:08:46.386 --> 00:08:48.333
Probably, we'll see.

126
00:08:48.333 --> 00:08:54.285
You're talking about- Line 26 Line 26,
this one?

127
00:08:54.285 --> 00:08:56.048
So this is itemInList.

128
00:08:56.048 --> 00:08:58.409
This can go into find.

129
00:08:58.409 --> 00:08:59.844
Okay, we can check.

130
00:08:59.844 --> 00:09:02.796
I can trust you, and
we can check that later.

131
00:09:02.796 --> 00:09:05.078
&gt;&gt; Speaker 2: I don't trust me,
so I just looked on MDN.

132
00:09:05.078 --> 00:09:07.058
&gt;&gt; Maximiliano Firtman: Okay, no worries.

133
00:09:07.058 --> 00:09:09.201
Anyway, we can also do something better.

134
00:09:09.201 --> 00:09:14.604
We can just check for the validity
of this in terms of, we'll see.

135
00:09:14.604 --> 00:09:18.264
Anyway, because this is coming from find,
and

136
00:09:18.264 --> 00:09:21.840
find is coming from classes here,
from find.

137
00:09:21.840 --> 00:09:26.160
So actually, it's finding from array.

138
00:09:26.160 --> 00:09:31.203
So the question is, well,
when you are using find with array,

139
00:09:31.203 --> 00:09:33.782
what are you getting in return?

140
00:09:33.782 --> 00:09:35.192
Good question, right?

141
00:09:35.192 --> 00:09:39.410
So we can get here and see in
the documentation, it returns a value in

142
00:09:39.410 --> 00:09:43.924
the array where predicate is true,
and undefined, okay, otherwise.

143
00:09:43.924 --> 00:09:45.680
So you were right, it's undefined.

144
00:09:45.680 --> 00:09:48.317
&gt;&gt; Speaker 2: MDN was right,
I wasn't sure.

145
00:09:48.317 --> 00:09:51.949
&gt;&gt; Maximiliano Firtman: That's okay,
yeah, but that's how you drag and

146
00:09:51.949 --> 00:09:57.324
you browse through this documentation and
see if something is wrong.

147
00:09:57.324 --> 00:09:58.044
Okay, cool.

148
00:09:59.504 --> 00:10:03.466
So now that we have this,
it's time to go back to app.js and

149
00:10:03.466 --> 00:10:06.814
start filling the gaps that we have there,
okay?

150
00:10:06.814 --> 00:10:10.139
So we can use the command and
also our classes and

151
00:10:10.139 --> 00:10:12.895
try to render something on the screen.

