WEBVTT

1
00:00:00.081 --> 00:00:03.017
&gt;&gt; Maximiliano Firtman: Our app.js is
ready for now, of course, nothing happens.

2
00:00:03.017 --> 00:00:06.191
It's not working because
everything's empty.

3
00:00:06.191 --> 00:00:08.844
I'm going to create a folder here.

4
00:00:08.844 --> 00:00:13.909
I mean, I could call the folder scripts,
but I will use webapp just to show

5
00:00:13.909 --> 00:00:19.565
you that we don't need to name the folders
as in the 90s, like scripts, style.

6
00:00:19.565 --> 00:00:22.818
So we can name our modules,

7
00:00:22.818 --> 00:00:28.475
we can name the folders
of our modules by topic,

8
00:00:28.475 --> 00:00:33.578
not by just the type of
file that is inside.

9
00:00:33.578 --> 00:00:38.415
Here, I'm going to start with a mixin,
I think that's one of the cool parts.

10
00:00:38.415 --> 00:00:41.753
So I'm going to create a miixins,
file mixin or

11
00:00:41.753 --> 00:00:45.848
mixins, doesn't matter,
where I can put here 1 mixin.

12
00:00:45.848 --> 00:00:49.757
Of course, if you have a lot of mixins,
probably you wanna create a lot

13
00:00:49.757 --> 00:00:54.412
of modules, one per mixing or things like
that, but in this case, we have only 1.

14
00:00:54.412 --> 00:00:58.232
So we are going to apply two
design patterns at the same time.

15
00:00:58.232 --> 00:01:06.106
We are going to create a mixin that will
implement the observer pattern, why?

16
00:01:06.106 --> 00:01:09.070
Because we will have a list, okay?

17
00:01:09.070 --> 00:01:11.486
So we have a list of to-dos.

18
00:01:11.486 --> 00:01:17.739
That list will change, I can add elements,
I can remove elements, make sense?

19
00:01:17.739 --> 00:01:20.772
So, maybe I wanna implement
the idea of observer.

20
00:01:20.772 --> 00:01:27.084
I want observers to observe
changes on the list.

21
00:01:27.084 --> 00:01:27.725
Makes sense?

22
00:01:27.725 --> 00:01:32.872
So I can go and inject the observer
pattern directly into my list,

23
00:01:32.872 --> 00:01:38.392
but I can create a mixin that I can
reuse later on other classes as well,

24
00:01:38.392 --> 00:01:40.373
that's idea of a mixin.

25
00:01:40.373 --> 00:01:45.860
I create behavior that then I can
inject in one or more classes, okay?

26
00:01:45.860 --> 00:01:50.642
So in this case,
we're going to create an observer

27
00:01:50.642 --> 00:01:55.757
mixin that is going to be an object,
a literal object,

28
00:01:55.757 --> 00:01:59.446
that will have first a new collection.

29
00:01:59.446 --> 00:02:02.624
I can use a set, I mean,
I can use an array if you want.

30
00:02:02.624 --> 00:02:07.411
The difference with the set is
that there is no order, and

31
00:02:07.411 --> 00:02:10.618
also it doesn't accept duplicates.

32
00:02:10.618 --> 00:02:14.416
So I cannot add twice the same observer,

33
00:02:14.416 --> 00:02:18.896
the same function,
the same callback, okay?

34
00:02:18.896 --> 00:02:23.902
It's not going to accept the same
callback again, which is a little better.

35
00:02:23.902 --> 00:02:31.331
So, and then we have the addObserver
method that will receive an observer and

36
00:02:31.331 --> 00:02:35.345
we'll just, let's use method syntax.

37
00:02:35.345 --> 00:02:37.719
I can use Harvard syntax as well,
but anyway.

38
00:02:37.719 --> 00:02:41.311
Well, I will say these observers,

39
00:02:41.311 --> 00:02:48.032
we'll add the observer that we
receive as an argument to our list.

40
00:02:48.032 --> 00:02:52.192
Then we have the removeObserver
that receives an observer and

41
00:02:52.192 --> 00:02:54.833
it's going to delete it from the list.

42
00:02:59.732 --> 00:03:00.326
&gt;&gt; Maximiliano Firtman: By the way,

43
00:03:00.326 --> 00:03:03.245
this is a simple implementation
of the observer pattern.

44
00:03:03.245 --> 00:03:07.224
It can be more complex, for
example, when you subscribe,

45
00:03:07.224 --> 00:03:12.646
when you add an observer, you can also
specify which event do you wanna observe.

46
00:03:12.646 --> 00:03:19.363
In the case, the subject has different
events, like load, change, delete,

47
00:03:19.363 --> 00:03:24.396
so you can can clone
the AddEventListener pattern, okay?

48
00:03:24.396 --> 00:03:29.643
But in this case, we will create one
observer that will be applied for

49
00:03:29.643 --> 00:03:33.452
just change, okay,
we are changing something.

50
00:03:33.452 --> 00:03:37.970
And then, we notify, so there is a method

51
00:03:37.970 --> 00:03:42.885
notify that will take
the list of observers.

52
00:03:42.885 --> 00:03:49.231
It will iterate over each observer and
it will execute each observer.

53
00:03:49.231 --> 00:03:55.246
If you don't understand yet
what's going on here, I'm missing a comma,

54
00:03:55.246 --> 00:04:00.878
the whole idea here is that if I have
an object with the observer mixin,

55
00:04:00.878 --> 00:04:04.812
I can add an observer,
and what's an observer?

56
00:04:04.812 --> 00:04:09.939
Anything, but I will pass functions,
so I can create something like this.

57
00:04:09.939 --> 00:04:13.293
And then, I can add another one and
another one, so

58
00:04:13.293 --> 00:04:15.556
it's like an addEventListener.

59
00:04:15.556 --> 00:04:21.130
And at some point,
I can call observer notify.

60
00:04:21.130 --> 00:04:26.671
A notify will actually go through
the three observers and execute them.

61
00:04:26.671 --> 00:04:28.456
Remember, this is a function.

62
00:04:28.456 --> 00:04:34.374
So actually, the set observers
will be a set of functions.

63
00:04:34.374 --> 00:04:36.805
So that's why I'm executing
the function here.

64
00:04:38.845 --> 00:04:41.508
&gt;&gt; Maximiliano Firtman: I mean for
code security point of view,

65
00:04:41.508 --> 00:04:44.896
I should check later if it's a function or
not, so

66
00:04:44.896 --> 00:04:48.542
I should do some stuff to
make sure that my code works.

67
00:04:48.542 --> 00:04:53.597
But I wanna keep it simple so
we understand the design pattern here.

68
00:04:53.597 --> 00:04:54.451
Do you have any questions?

69
00:04:54.451 --> 00:04:57.476
Of course, this is just a sample,
I don't need that code.

70
00:04:59.662 --> 00:05:01.910
&gt;&gt; Maximiliano Firtman: We
are not applying the mixin here.

71
00:05:01.910 --> 00:05:06.102
Remember, the mixin is a way that we have
to add behavior to another object without

72
00:05:06.102 --> 00:05:09.766
changing the nature of the object,
without changing the superclass.

