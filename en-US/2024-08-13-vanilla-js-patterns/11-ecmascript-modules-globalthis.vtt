WEBVTT

1
00:00:00.230 --> 00:00:04.750
&gt;&gt; Maximiliano Firtman: Let's think about
the questions that I gave you before.

2
00:00:04.750 --> 00:00:10.520
So based on this ToDo application if
I wanna create the undo operation,

3
00:00:10.520 --> 00:00:12.330
how can I do that?

4
00:00:12.330 --> 00:00:17.187
So I wanna be here I have deleted the,

5
00:00:17.187 --> 00:00:20.592
apply design patterns.

6
00:00:20.592 --> 00:00:22.742
How can I get it back with control C?

7
00:00:22.742 --> 00:00:26.912
I mean,
think about developing the solution.

8
00:00:27.962 --> 00:00:28.642
How to do that?

9
00:00:31.342 --> 00:00:33.202
It's actually complicated.

10
00:00:33.202 --> 00:00:37.185
And what if I wanna type something and

11
00:00:37.185 --> 00:00:42.018
press control P, and add it as well.

12
00:00:42.018 --> 00:00:46.738
So use my keyword
shortcuts to apply actions.

13
00:00:47.938 --> 00:00:54.528
Well, the problem is that everything is
too tied to my DOM event handlers here.

14
00:00:54.528 --> 00:00:59.537
So yeah, then you need to add
another event listener and

15
00:00:59.537 --> 00:01:05.825
copy these or put this in a function,
so we can see that while simple and

16
00:01:05.825 --> 00:01:09.574
working, the solution is not scalable.

17
00:01:10.974 --> 00:01:18.933
I mean, it works, but when I try to add
more functionality, it's difficult.

18
00:01:18.933 --> 00:01:23.223
I can, but
they will end up with a spaghetti code,

19
00:01:23.223 --> 00:01:27.320
difficult to follow,
difficult to maintain.

20
00:01:27.320 --> 00:01:30.218
Okay, or if I wanna save the data, so

21
00:01:30.218 --> 00:01:36.312
because the problem that I have
here is if I reload, it's empty.

22
00:01:36.312 --> 00:01:40.511
So every time I reload my web app,
I'm losing all the list.

23
00:01:40.511 --> 00:01:42.781
So if I wanna save that, restore that.

24
00:01:44.271 --> 00:01:47.151
So if, if I wanna save it,
what should I do?

25
00:01:47.151 --> 00:01:50.311
Because now, where is my data here?

26
00:01:50.311 --> 00:01:51.331
Where do I have the data?

27
00:01:52.881 --> 00:01:53.821
The list.

28
00:01:53.821 --> 00:01:56.311
&gt;&gt; Speaker 2: Right now,
It's just attached to the DOM, right?

29
00:01:56.311 --> 00:01:59.211
It's just on each HTML element.

30
00:02:00.241 --> 00:02:04.222
&gt;&gt; Maximiliano Firtman: Yeah exactly,
the problem is that my data is in the DOM,

31
00:02:04.222 --> 00:02:06.320
and that's a problem.

32
00:02:06.320 --> 00:02:09.987
So yeah, I should read the DOM and
check the UL,

33
00:02:09.987 --> 00:02:14.590
grab the data from the text content or
in HTML from the ULIs.

34
00:02:14.590 --> 00:02:17.440
But yeah, everything sounds dirty.

35
00:02:17.440 --> 00:02:19.910
I mean, it will work,
we can get into a solution.

36
00:02:19.910 --> 00:02:26.342
But, I think it's time to rewrite
the whole application, okay?

37
00:02:26.342 --> 00:02:28.589
So, this is a vanilla
JavaScript application, but

38
00:02:28.589 --> 00:02:30.412
without any design pattern.

39
00:02:30.412 --> 00:02:35.137
We are going to use now a couple of
design patterns to make it work, okay,

40
00:02:35.137 --> 00:02:36.072
makes sense?

41
00:02:36.072 --> 00:02:40.275
The first step will be to select
all the code that we have,

42
00:02:40.275 --> 00:02:43.881
In app.js and delete everything.

43
00:02:43.881 --> 00:02:45.371
So I'm going to delete everything.

44
00:02:45.371 --> 00:02:49.324
I'm not going to touch the HTML,
maybe there is one little exception, and

45
00:02:49.324 --> 00:02:51.371
I'm not going to touch CSS.

46
00:02:51.371 --> 00:02:56.203
With the same,
I'm just going to rewrite this app

47
00:02:56.203 --> 00:02:59.667
to use a couple of design patterns.

48
00:03:00.757 --> 00:03:05.162
Just to give you a hint of the design
patterns that we will use,

49
00:03:05.162 --> 00:03:09.821
I will use Singleton,
I will use Memento, Mixin, Command, and

50
00:03:09.821 --> 00:03:15.017
maybe some others in the middle,
okay, to create the same code.

51
00:03:15.017 --> 00:03:18.409
By the way, you will see that
the code that we will end up,

52
00:03:18.409 --> 00:03:20.750
it will be more complex, yeah.

53
00:03:20.750 --> 00:03:25.566
From amount of lines and everything,
it will feel more complex but

54
00:03:25.566 --> 00:03:27.802
it will be far more scalable and

55
00:03:27.802 --> 00:03:32.790
you will see that in action when we
want to add more features how simple

56
00:03:32.790 --> 00:03:38.640
it is to add more features if you
started using some design pattern.

57
00:03:38.640 --> 00:03:43.511
Okay, so delete everything, and
I will start writing code here.

58
00:03:44.531 --> 00:03:50.091
But I said that I will make one very
little change in my HTML, only one.

59
00:03:50.091 --> 00:03:56.691
The only thing that I'm going to
change is, if you take the script tag,

60
00:03:56.691 --> 00:04:01.531
I'm going to add to the script
tag this type module,

61
00:04:01.531 --> 00:04:08.091
because I going to use ECMAScript
modules to modularize my code.

62
00:04:08.091 --> 00:04:12.131
That, by the way,
is another design pattern modularization.

63
00:04:12.131 --> 00:04:16.811
So when you use modules so you separate
your code in different modules,

64
00:04:16.811 --> 00:04:20.112
that's a pattern by itself, okay?

65
00:04:20.112 --> 00:04:24.378
In ECMAScript,
in the browser to use ECMAScript modules,

66
00:04:24.378 --> 00:04:27.402
you need to type equals module.

67
00:04:27.402 --> 00:04:31.697
That means that now within that file,
App.js,

68
00:04:31.697 --> 00:04:36.322
I can import content or
objects from other modules.

69
00:04:37.502 --> 00:04:39.017
That before that, it wasn't possible.

70
00:04:39.017 --> 00:04:44.193
Okay, okay, so now,
because now we are in a module,

71
00:04:44.193 --> 00:04:48.449
we are not in a global context anymore.

72
00:04:48.449 --> 00:04:53.351
Sorry, I'm not sure if you
remember that we do have

73
00:04:53.351 --> 00:04:58.608
document.addEventListener(DomContentLoa-
des.

74
00:04:58.608 --> 00:05:02.756
I will keep it here,
this event listener, content,

75
00:05:02.756 --> 00:05:06.450
I have a typo, by the way,
DOM content loaded.

76
00:05:08.520 --> 00:05:14.740
And DOM actually is O,
M, DOM content loaded.

77
00:05:14.740 --> 00:05:19.654
In Manila JavaScript, this event is
being fired with the DOM when the DOM Is

78
00:05:19.654 --> 00:05:22.699
already parsed in memory and
ready to be used.

79
00:05:24.239 --> 00:05:29.783
So the first thing that I want is to,
I'm not sure if you remember,

80
00:05:29.783 --> 00:05:36.020
our original code had three variables for
the three elements that we need.

81
00:05:36.020 --> 00:05:38.779
The list, the button, the input.

82
00:05:38.779 --> 00:05:40.669
Let's typically a good pattern.

83
00:05:40.669 --> 00:05:43.538
Instead of using get element by ID or
query selector,

84
00:05:43.538 --> 00:05:47.489
instead of using the Do API,
every time we need to access one element.

85
00:05:47.489 --> 00:05:49.171
It's a good idea, at least for

86
00:05:49.171 --> 00:05:54.179
those elements that we will use a lot to
create references so we can use later.

87
00:05:54.179 --> 00:05:59.271
Okay, for the button, for the input,
remember we are talking about a reference,

88
00:05:59.271 --> 00:06:03.855
so this input type a reference to this
button because we want a click handler

89
00:06:03.855 --> 00:06:06.766
within the input to actually
get the content and

90
00:06:06.766 --> 00:06:10.523
we need the UL because we wanna
render data in that UL, okay.

91
00:06:10.523 --> 00:06:14.701
So it's a good idea always
to create variables and

92
00:06:14.701 --> 00:06:18.192
I'm going to refactor this code, okay.

93
00:06:18.192 --> 00:06:20.800
So I'm going to write some code in
case you're following along and

94
00:06:20.800 --> 00:06:22.700
I'm going to change it later.

95
00:06:22.700 --> 00:06:25.657
So I can create variables, bar, let,

96
00:06:25.657 --> 00:06:31.160
it doesn't matter in this case
because it's a global scope.

97
00:06:31.160 --> 00:06:36.510
So I need a to-do list, I need the button,
add BTN, and the To-Do input.

98
00:06:40.540 --> 00:06:45.244
But we are working with modules,
now, what happens with modules?

99
00:06:46.504 --> 00:06:49.634
Are these global variables,
what do you think?

100
00:06:52.814 --> 00:06:57.584
No, because it's a module, I mean,
if I don't have type module,

101
00:06:57.584 --> 00:07:00.444
there will be global variables, okay.

102
00:07:00.444 --> 00:07:05.570
But if it's a module, so,
the scope is the module, so

103
00:07:05.570 --> 00:07:11.068
I cannot access these
variables from other modules.

104
00:07:11.068 --> 00:07:14.513
But I think it might be useful
later to access those variables,

105
00:07:14.513 --> 00:07:18.508
because I want my whole application
to access those DOM elements.

106
00:07:18.508 --> 00:07:23.114
So something that I can do, it's one way,
I'm not saying is the only way,

107
00:07:23.114 --> 00:07:24.676
It's one way.

108
00:07:24.676 --> 00:07:28.736
I can do this, I can create a variable,

109
00:07:28.736 --> 00:07:33.976
an object,
I can call it Dom in global disk.

110
00:07:33.976 --> 00:07:38.016
Does anyone know what global
disk is in modern JavaScript?

111
00:07:40.596 --> 00:07:45.355
&gt;&gt; Speaker 2: It's the window,
the self if a worker or a this?

112
00:07:45.355 --> 00:07:48.450
&gt;&gt; Maximiliano Firtman: Okay,
that's the best answer that we can get, so

113
00:07:48.450 --> 00:07:52.605
it depends on the context that
we are running this script.

114
00:07:52.605 --> 00:07:57.363
It's always the global object that
in the browser is the window object.

115
00:07:57.363 --> 00:08:02.327
If it's node.js, it's a global object,
if it's a worker, it's a self object.

116
00:08:02.327 --> 00:08:08.277
So in this case, it's the same as same
window, but it's more cross platform.

117
00:08:08.277 --> 00:08:16.097
So using global Ds, D, it's an object that
is pointing always to the global object.

118
00:08:16.097 --> 00:08:19.117
So I'm actually attaching
a DOM object there.

119
00:08:19.117 --> 00:08:23.491
So then these three variables,

120
00:08:23.491 --> 00:08:27.978
may become,
&gt;&gt; Maximiliano Firtman: Just

121
00:08:27.978 --> 00:08:33.423
properties of that DOM variable.

122
00:08:33.423 --> 00:08:38.013
And by the way,
every time I wanna use that variable,

123
00:08:38.013 --> 00:08:41.487
I should use global this.global this.

124
00:08:41.487 --> 00:08:45.936
So, maybe what I can do
is create just a local

125
00:08:45.936 --> 00:08:50.524
pointer to that for
this particular module.

126
00:08:54.371 --> 00:08:59.538
&gt;&gt; Maximiliano Firtman: And
actually now what I need is

127
00:08:59.538 --> 00:09:07.397
to get those elements by
ID from the real DOM.

128
00:09:10.186 --> 00:09:14.983
&gt;&gt; Maximiliano Firtman: Okay, so
I'm going to, this is following

129
00:09:14.983 --> 00:09:19.904
the same name so and this is kebab case.

130
00:09:19.904 --> 00:09:24.885
Cuz we are using hyphens and
from JavaScript point of view,

131
00:09:24.885 --> 00:09:27.984
we are using CamelCase, okay?

132
00:09:27.984 --> 00:09:32.803
So now with this, in every module,
it doesn't matter which module,

133
00:09:32.803 --> 00:09:36.174
we have access to those elements.

134
00:09:36.174 --> 00:09:40.549
And we are sure that we are doing
this on DOM content loaded, so

135
00:09:40.549 --> 00:09:42.074
they are safe to use.

136
00:09:43.085 --> 00:09:47.733
And then I will need, for
the add button, an event listener for

137
00:09:47.733 --> 00:09:49.675
the click event handler.

138
00:09:52.365 --> 00:09:56.176
We can use arrow functions or
normal functions, wherever you prefer.

139
00:10:00.841 --> 00:10:04.743
&gt;&gt; Maximiliano Firtman: And
also click on the list.

140
00:10:13.062 --> 00:10:17.087
&gt;&gt; Maximiliano Firtman: To
simplify the delete operation,

141
00:10:17.087 --> 00:10:25.274
what I'm doing here is instead of
reading each delete button manually,

142
00:10:25.274 --> 00:10:30.506
I'm checking for
the click of the whole list,

143
00:10:30.506 --> 00:10:35.604
and then I'm verifying
if the event target,

144
00:10:35.604 --> 00:10:41.642
event.target has the list,
if it contains the class

145
00:10:41.642 --> 00:10:46.739
delete button, so if it's a delete button,

146
00:10:46.739 --> 00:10:51.212
okay, and we will fill the gaps later.

147
00:10:51.212 --> 00:10:52.032
Yes?

148
00:10:52.032 --> 00:10:56.525
&gt;&gt; Speaker 2: So if this module was loaded
into a different module would global this

149
00:10:56.525 --> 00:10:58.592
still point to the window?

150
00:10:58.592 --> 00:11:03.152
&gt;&gt; Maximiliano Firtman: Yeah globalThis
points to window anywhere in your code,

151
00:11:03.152 --> 00:11:09.618
it doesn't matter on which module it is,
if it's loaded in the browser, okay.

152
00:11:09.618 --> 00:11:14.698
Also in the browser,
you can create a worker, a thread.

153
00:11:14.698 --> 00:11:19.527
If you create a worker and a worker is
importing this module, in that case,

154
00:11:19.527 --> 00:11:23.605
global this would actually be The worker,
the thread, okay?

155
00:11:23.605 --> 00:11:25.625
But despite that difference,

156
00:11:25.625 --> 00:11:30.975
because the thread cannot access the UI
can access the DOM the main thread.

157
00:11:30.975 --> 00:11:33.425
So that's why it's a security problem.

158
00:11:33.425 --> 00:11:36.827
But, if you're not working
with threads in the browser,

159
00:11:36.827 --> 00:11:39.125
global Ds will always point to window.

160
00:11:40.275 --> 00:11:44.132
This is one of the latest ECMAScript
new additions to the language.

161
00:11:45.202 --> 00:11:49.739
So, but so it's a good idea to
start getting used to using

162
00:11:49.739 --> 00:11:54.000
globalThis instead of window,
okay, makes sense?

163
00:11:54.000 --> 00:11:58.717
So your ECMAScript code will
be more platform agnostic.

