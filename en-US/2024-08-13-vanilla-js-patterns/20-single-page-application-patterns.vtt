WEBVTT

1
00:00:00.161 --> 00:00:04.382
&gt;&gt; Maximiliano Firtman: Let's get into
patterns that are actually focused on

2
00:00:04.382 --> 00:00:08.600
web apps, and
we're going to start with the ones that

3
00:00:08.600 --> 00:00:11.990
are focused on single page applications.

4
00:00:11.990 --> 00:00:16.509
And also in this category,
we have a lot, a lot of patterns, and

5
00:00:16.509 --> 00:00:20.027
I've been dealing with this pattern for
a while,

6
00:00:20.027 --> 00:00:24.908
before talking about single page
applications, I remember books.

7
00:00:24.908 --> 00:00:28.234
Also one of the books
that I author in 2006,

8
00:00:28.234 --> 00:00:31.894
that we were talking about
Ajax design patterns, or

9
00:00:31.894 --> 00:00:38.065
Rich Internet Application design patterns,
RIA, not sure if you remember that term.

10
00:00:38.065 --> 00:00:41.097
Now we are talking about
a single page application, but

11
00:00:41.097 --> 00:00:42.720
it's always the same thing.

12
00:00:42.720 --> 00:00:47.321
So not all the patterns are the same
over the years, because of course,

13
00:00:47.321 --> 00:00:50.710
browsers are changing,
techniques are changing.

14
00:00:50.710 --> 00:00:55.297
But, just in case, let's define
a Single Page Application or SPA,

15
00:00:55.297 --> 00:00:59.806
it's a web application that interacts
with the user by dynamically

16
00:00:59.806 --> 00:01:01.959
rewriting the current web app.

17
00:01:01.959 --> 00:01:05.961
Or the current web page,
with new data from the web server,

18
00:01:05.961 --> 00:01:11.664
instead of loading entire new pages,
okay, so that's a single page application.

19
00:01:11.664 --> 00:01:15.464
So for example,
I will show you some patterns here and

20
00:01:15.464 --> 00:01:19.274
then we will implement some
of them in real pressure.

21
00:01:19.274 --> 00:01:23.283
Lazy load,
one of the biggest problem of web apps,

22
00:01:23.283 --> 00:01:26.369
is loading too many JavaScript files.

23
00:01:26.369 --> 00:01:31.100
Or even, if you're using Angular
react maybe, only one file, but

24
00:01:31.100 --> 00:01:36.412
really big like, those apps or
web apps with 10 megabytes of JavaScript,

25
00:01:36.412 --> 00:01:39.650
a bundle.js, that is actually really huge.

26
00:01:39.650 --> 00:01:43.750
Well, that's a performance problem,
and also memory usage.

27
00:01:43.750 --> 00:01:48.550
So now over time there were
a lot of solutions available,

28
00:01:48.550 --> 00:01:53.150
but today we can use dynamic
imports from ECMAScript,

29
00:01:53.150 --> 00:01:56.351
to load modules when needed, right?

30
00:01:56.351 --> 00:01:59.417
And we will do,
one example of that in a second.

31
00:01:59.417 --> 00:02:04.981
Use Cases, for example for loading web
components, only when you need them.

32
00:02:04.981 --> 00:02:09.744
Think about this, you're creating a web
app, that has a registration form and

33
00:02:09.744 --> 00:02:14.098
a login form, how many users are actually
using the registration form?

34
00:02:14.098 --> 00:02:17.144
Only new users, and
typically once, so maybe,

35
00:02:17.144 --> 00:02:21.619
I don't know, 10% of your visits
are using the registration form.

36
00:02:21.619 --> 00:02:26.215
So why do you need to load all
the logic of the JavaScript logic,

37
00:02:26.215 --> 00:02:31.095
even that can include the HTML,
the CSS and everything, always?

38
00:02:31.095 --> 00:02:35.151
Well, maybe you can load
the registration form logic only

39
00:02:35.151 --> 00:02:39.372
when the user goes to
the registration section, of course,

40
00:02:39.372 --> 00:02:43.453
you don't wanna use this pattern for
everything, okay?

41
00:02:43.453 --> 00:02:49.205
Just for the parts of your web app
that makes sense in terms of the size,

42
00:02:49.205 --> 00:02:53.314
and in terms of the probability
of getting there.

43
00:02:53.314 --> 00:02:57.320
Loading routes in single page
application when you access them, so

44
00:02:57.320 --> 00:02:58.875
lazy loading the routes.

45
00:02:58.875 --> 00:03:04.270
The route means the destination page,
you load the web

46
00:03:04.270 --> 00:03:10.495
component related to that page
when the user goes to that page.

47
00:03:10.495 --> 00:03:16.025
Another one, that I think is pretty cool,
we will see that in action, it's called

48
00:03:16.025 --> 00:03:21.003
view transitions, it's a mix between
a design pattern and also a new API.

49
00:03:21.003 --> 00:03:25.356
But actually,
before the API has landed in browsers,

50
00:03:25.356 --> 00:03:31.315
we have the design pattern, but
we were implemented with a different way,

51
00:03:31.315 --> 00:03:35.487
using CSS transitions, but
now we will use the API.

52
00:03:35.487 --> 00:03:39.697
The problem is that, when changing
between routes, there are no transitions.

53
00:03:39.697 --> 00:03:44.085
So I mean, if you're in a mobile app,
the slide transition, you go back,

54
00:03:44.085 --> 00:03:45.842
you see the back transition.

55
00:03:45.842 --> 00:03:48.512
Sometimes you see,
the sliding the new window,

56
00:03:48.512 --> 00:03:50.545
the new page appear from the bottom.

57
00:03:50.545 --> 00:03:54.620
But by defaulting JavaScript,
when you change the route, it just boom,

58
00:03:54.620 --> 00:03:57.660
the new content appear boom,
the new content appear.

59
00:03:57.660 --> 00:04:02.195
We don't have any transition that's
marking that the new page is coming, or

60
00:04:02.195 --> 00:04:03.328
things like that.

61
00:04:03.328 --> 00:04:07.996
So for that, we are going to
use a new API available today,

62
00:04:07.996 --> 00:04:10.867
at the time of shooting this video.

63
00:04:10.867 --> 00:04:13.795
It's available in Chromium-based
browsers only, but

64
00:04:13.795 --> 00:04:17.398
it's available in Safari technology
preview, in the beta version.

65
00:04:17.398 --> 00:04:20.301
So maybe when you're watching this video,

66
00:04:20.301 --> 00:04:23.681
online it's already
available in Safari as well.

67
00:04:23.681 --> 00:04:27.963
Also we are going to use
another design pattern,

68
00:04:27.963 --> 00:04:31.414
that maybe for estimate enhancement.

69
00:04:31.414 --> 00:04:35.606
That means that, if the API is not there,
it doesn't matter, the whole thing

70
00:04:35.606 --> 00:04:39.622
will work, yeah without the finance
animation, but it will work anyway.

71
00:04:39.622 --> 00:04:43.553
So Use Cases, to animate the page
change is typically the most common but

72
00:04:43.553 --> 00:04:44.850
it's not the only one.

73
00:04:44.850 --> 00:04:49.699
Actually you can do a lot of animations
when you have a carousel, of images and

74
00:04:49.699 --> 00:04:51.574
the user is dragging images.

75
00:04:51.574 --> 00:04:56.423
Well, the carousel movement,
you can do that using this API instead

76
00:04:56.423 --> 00:05:01.369
of using a JavaScript-based animation,
or CSS-based animation.

77
00:05:01.369 --> 00:05:04.217
To morph elements between pages,

78
00:05:04.217 --> 00:05:09.222
I think this is the best way to
understand how good the API is,

79
00:05:09.222 --> 00:05:14.839
and you will have to wait a couple
of minutes to, see that in action.

80
00:05:14.839 --> 00:05:18.162
HTML templates with interpolation, so

81
00:05:18.162 --> 00:05:23.146
when you're doing single page
applications, typically,

82
00:05:23.146 --> 00:05:27.654
there are many ways to
implement page content change.

83
00:05:27.654 --> 00:05:31.631
So let's say, you are in a in a website
with a master detail website,

84
00:05:31.631 --> 00:05:36.033
master of detail mean, you have a list
you click and you go through details.

85
00:05:36.033 --> 00:05:41.922
So how to render the details, there
are many ways, but what we don't have is,

86
00:05:41.922 --> 00:05:47.296
if you're using web components for
example and the template HTML tag.

87
00:05:47.296 --> 00:05:50.560
I'm not sure how many of you
are comfortable with that,

88
00:05:50.560 --> 00:05:52.998
you can express in the HTML the bindings.

89
00:05:52.998 --> 00:05:58.201
As with Angular templates or
JSX in react, where you,

90
00:05:58.201 --> 00:06:05.566
I mean, you put a div, and within the div,
you say here it goes the name.

91
00:06:05.566 --> 00:06:10.040
Then you put the paragraph,
here you put the description, so

92
00:06:10.040 --> 00:06:15.291
that's it the semantics,
cannot be expressed in Vanilla JavaScript,

93
00:06:15.291 --> 00:06:18.577
so those template ideas
are from libraries.

94
00:06:18.577 --> 00:06:22.304
So we will use a trick,
it's kind of a hacky trick,

95
00:06:22.304 --> 00:06:26.476
that let us interpolate with
dynamic data from the HTML.

96
00:06:26.476 --> 00:06:30.513
We will see this in action,
but the idea is that,

97
00:06:30.513 --> 00:06:35.156
in the HTML, we can define
the data that we want to bind.

98
00:06:36.211 --> 00:06:40.981
&gt;&gt; Maximiliano Firtman: Routing metadata,
so, in a single page application,

99
00:06:40.981 --> 00:06:44.641
when work with a single page application.

100
00:06:44.641 --> 00:06:48.997
Web page metadata such as the title,
SEO metadata, and

101
00:06:48.997 --> 00:06:53.919
other information stays static,
not matter the current URL.

102
00:06:53.919 --> 00:06:57.906
This is even more important when
you're doing progressive web apps,

103
00:06:57.906 --> 00:07:01.769
so web apps that users can install,
and then they work standalone.

104
00:07:01.769 --> 00:07:06.949
When they are standalone, they have their
own title, their own window title bar,

105
00:07:06.949 --> 00:07:12.066
and the text that appears in the title bar
stays the same, no matter where you are.

106
00:07:12.066 --> 00:07:16.572
So there is a solution is to update
the metadata dynamically used when

107
00:07:16.572 --> 00:07:19.613
the route changes,
we will do that, as well.

108
00:07:19.613 --> 00:07:21.964
It's simple, it's a design pattern,

109
00:07:21.964 --> 00:07:26.951
it's something that you need to think when
you're doing single page applications.

110
00:07:26.951 --> 00:07:31.375
So for example we can adapt the theme
color, if you don't know what that is,

111
00:07:31.375 --> 00:07:32.976
you will see it in a second.

112
00:07:32.976 --> 00:07:37.490
You can change the title and
other metadata as well, for example,

113
00:07:37.490 --> 00:07:42.979
updating the file icon, based on where
you are, it's something interesting.

