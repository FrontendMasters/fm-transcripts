WEBVTT

1
00:00:00.000 --> 00:00:02.939
&gt;&gt; Maximiliano Firtman: Well, these are
just two examples of the creational design

2
00:00:02.939 --> 00:00:03.539
patterns.

3
00:00:03.539 --> 00:00:07.912
There are more, okay, but
these are just two simple examples.

4
00:00:07.912 --> 00:00:11.583
Let's see now some structural
design patterns that,

5
00:00:11.583 --> 00:00:15.253
in this case, are solutions for
composing classes and

6
00:00:15.253 --> 00:00:20.620
objects to form larger structures while
keeping them flexible and efficient.

7
00:00:20.620 --> 00:00:26.448
So they are focusing on simplifying
relationships between entities.

8
00:00:26.448 --> 00:00:28.286
In terms of creation,

9
00:00:28.286 --> 00:00:33.812
now we are talking about relationship
between entities in my code.

10
00:00:33.812 --> 00:00:37.738
So, some examples of that, decorator.

11
00:00:37.738 --> 00:00:40.557
Actually, the decorator button
is being used in React.

12
00:00:40.557 --> 00:00:44.563
So if you are a React developer,
probably you have used this pattern.

13
00:00:44.563 --> 00:00:47.923
There are many ways in which
React is using this pattern.

14
00:00:47.923 --> 00:00:51.603
One is known as the Higher-Order
Component, I'm not sure if you're a React

15
00:00:51.603 --> 00:00:55.807
developer and you have used a Higher-Order
Component, but that's kind of a degrade.

16
00:00:55.807 --> 00:01:00.493
The problem that it's solving is,
we need to add additional functionality to

17
00:01:00.493 --> 00:01:04.687
objects dynamically without modifying
the structure of the object.

18
00:01:04.687 --> 00:01:09.694
Let's say I have a button, and
now I have a class that creates a button,

19
00:01:09.694 --> 00:01:13.635
it renders the button on the screen,
and that's okay.

20
00:01:13.635 --> 00:01:21.420
But now, I need that button to have a
different behavior or additional behavior.

21
00:01:21.420 --> 00:01:26.409
I know, for example, if I right-click
on the button, I want a menu,

22
00:01:26.409 --> 00:01:28.962
but I don't wanna touch my button.

23
00:01:28.962 --> 00:01:31.715
My button is there, I know it's working,
I don't wanna touch it.

24
00:01:31.715 --> 00:01:35.151
Because I'm using the button
in my page in lot of places,

25
00:01:35.151 --> 00:01:36.948
I don't wanna rerun my test.

26
00:01:36.948 --> 00:01:39.265
It's working, let's keep it that way.

27
00:01:39.265 --> 00:01:41.058
Well, let's decorate the button, and

28
00:01:41.058 --> 00:01:43.547
the decorator is actually
something that is wrapping.

29
00:01:43.547 --> 00:01:47.859
We are going to wrap that object
with something else on top.

30
00:01:47.859 --> 00:01:52.211
So we're going to take that button, and
we're going to decorate the button with

31
00:01:52.211 --> 00:01:56.578
a right-click behavior that will show
a contextual menu, for example, okay?

32
00:01:56.578 --> 00:01:59.876
So we wrap an object with another object.

33
00:01:59.876 --> 00:02:05.133
And use cases, adding logging,
validation, caching to method calls.

34
00:02:05.133 --> 00:02:10.241
So you have an API call object, so
you have an object, or a class, or

35
00:02:10.241 --> 00:02:15.817
a function, that it's going to a network
and grabbing data from the API.

36
00:02:15.817 --> 00:02:18.436
I don't wanna change that code, but

37
00:02:18.436 --> 00:02:23.860
then I can wrap it with something else
that will log that in the log database.

38
00:02:23.860 --> 00:02:27.700
So for debugging purposes,
if there is a problem later,

39
00:02:27.700 --> 00:02:30.340
I can go to the log and see what happens.

40
00:02:30.340 --> 00:02:34.116
Extending the user interface
component with additional features,

41
00:02:34.116 --> 00:02:36.469
the pattern example, it's another one.

42
00:02:36.469 --> 00:02:40.170
And how to implement in
JavaScript decorator,

43
00:02:40.170 --> 00:02:42.768
there are many ways before that.

44
00:02:42.768 --> 00:02:48.058
Another use case is wrapping
API responses to format or

45
00:02:48.058 --> 00:02:51.511
process data before passing it on.

46
00:02:51.511 --> 00:02:57.605
So you have, again, the API call,
and you are getting the data back.

47
00:02:57.605 --> 00:03:00.888
Well, maybe from a security point of view,

48
00:03:00.888 --> 00:03:05.699
you wanna check if there is no
cross-site scripting problems.

49
00:03:05.699 --> 00:03:09.261
You wanna validate that the user
has authorization for that data or

50
00:03:09.261 --> 00:03:10.479
something like that.

51
00:03:10.479 --> 00:03:18.096
Well, you can decorate their response or
parse the response with a decorator.

52
00:03:18.096 --> 00:03:22.915
From a JavaScript point of view,
there are many ways to implement this,

53
00:03:22.915 --> 00:03:27.023
but one very simple, and
you will feel sometimes, even not so

54
00:03:27.023 --> 00:03:30.191
clever solution,
is to just use inheritance.

55
00:03:30.191 --> 00:03:34.591
So I have a button with a render method,
so I create another button

56
00:03:34.591 --> 00:03:39.246
extending from the other one,
overriding render, calling super.

57
00:03:39.246 --> 00:03:45.951
So we are still keeping the original
button behavior and adding our own code.

58
00:03:45.951 --> 00:03:49.806
For example, the event handler for
the right-click,

59
00:03:49.806 --> 00:03:53.589
that will render the menu,
so that's the decorator.

60
00:03:53.589 --> 00:03:57.809
And I'm pretty sure that most of
you have already used this pattern,

61
00:03:57.809 --> 00:04:00.150
even if you didn't know it had a name.

62
00:04:02.128 --> 00:04:07.045
&gt;&gt; Maximiliano Firtman: Okay, the
decorator pattern is just adding behavior

63
00:04:07.045 --> 00:04:14.375
without changing the original element,
the original components, the idea.

