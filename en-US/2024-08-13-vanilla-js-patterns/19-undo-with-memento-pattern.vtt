WEBVTT

1
00:00:00.000 --> 00:00:02.770
&gt;&gt; Maximiliano Firtman: What
if we want to implement undo?

2
00:00:02.770 --> 00:00:09.009
Say when I press Ctrl+C and
I wanna go back to the previous list.

3
00:00:09.009 --> 00:00:10.660
Let's try to do that.

4
00:00:10.660 --> 00:00:16.820
Again, without design patterns,
it will be really complicated.

5
00:00:16.820 --> 00:00:19.234
But now it's not going to be so bad.

6
00:00:19.234 --> 00:00:20.143
So for that,

7
00:00:20.143 --> 00:00:25.783
we are going to implement that memento
design pattern that we mentioned before.

8
00:00:25.783 --> 00:00:28.919
Again, even if you don't
remember the name of the pattern,

9
00:00:28.919 --> 00:00:31.575
it doesn't matter,
just remember the solution.

10
00:00:31.575 --> 00:00:37.075
So to do that,
then we're going to create another file,

11
00:00:37.075 --> 00:00:41.443
memento.js, memento.js, there we are.

12
00:00:41.443 --> 00:00:46.303
And here, we're going to export
one object that is going to be

13
00:00:46.303 --> 00:00:49.206
a singleton in the term of an object.

14
00:00:49.206 --> 00:00:50.534
We can call this the TodoHistory.

15
00:00:53.653 --> 00:00:56.101
&gt;&gt; Maximiliano Firtman: I'm going
to start with an empty array.

16
00:00:56.101 --> 00:01:00.951
And typically, you have push,
you receive the current state, and

17
00:01:00.951 --> 00:01:04.283
you have pop,
that returns on a state, okay?

18
00:01:04.283 --> 00:01:05.473
That's kind of the deal always.

19
00:01:05.473 --> 00:01:11.395
So to push, it's just, I will check if
I do receive a state, just in case,

20
00:01:11.395 --> 00:01:16.386
I'm going to push it into my history,
this.history.push.

21
00:01:16.386 --> 00:01:20.790
And here is something important, so
before adding, let me add something here,

22
00:01:20.790 --> 00:01:22.618
but then I will change it, okay?

23
00:01:22.618 --> 00:01:26.772
So, I will leave a mark there.

24
00:01:26.772 --> 00:01:29.580
Then pop, if we don't have something,

25
00:01:29.580 --> 00:01:33.225
actually you will see later
that we need two things.

26
00:01:33.225 --> 00:01:35.111
I need to pop twice.

27
00:01:35.111 --> 00:01:36.122
You will understand why [LAUGH] in

28
00:01:36.122 --> 00:01:41.335
a second,
&gt;&gt; Maximiliano Firtman: Because

29
00:01:41.335 --> 00:01:45.215
the last state is actually
the current state.

30
00:01:45.215 --> 00:01:51.065
Actually, I need to take out the current
state and also the previous one, okay?

31
00:01:51.065 --> 00:01:52.753
You can implement this in another way.

32
00:01:52.753 --> 00:01:57.930
So I'm returning the other one.

33
00:01:57.930 --> 00:01:59.369
That makes sense?

34
00:01:59.369 --> 00:02:02.537
The current one, out,
I take the previous one, and

35
00:02:02.537 --> 00:02:06.858
I wanna take that previous one and
convert that into my new current one.

36
00:02:06.858 --> 00:02:10.708
So why I added the mark here, flag here?

37
00:02:10.708 --> 00:02:11.297
I should do flag.

38
00:02:11.297 --> 00:02:14.876
So this is not gonna work completely, why?

39
00:02:14.876 --> 00:02:15.663
So what is the state?

40
00:02:15.663 --> 00:02:19.318
Let's try to understand what is the state.

41
00:02:19.318 --> 00:02:24.047
The state is gonna be my list,
okay, my list.

42
00:02:24.047 --> 00:02:27.355
My list is a set, remember that?

43
00:02:27.355 --> 00:02:28.510
So what is a set?

44
00:02:28.510 --> 00:02:35.056
So a set,
it's actually a list of pointers to

45
00:02:35.056 --> 00:02:41.785
different objects of type todo items,
okay?

46
00:02:41.785 --> 00:02:45.208
So let's say,
this is my current situation.

47
00:02:45.208 --> 00:02:51.501
I have four Todos, and
I remove one, okay, I remove one.

48
00:02:51.501 --> 00:02:55.475
See, I remove one,
I'm deleting one, which is okay.

49
00:02:55.475 --> 00:03:00.070
The problem that we have is that

50
00:03:00.070 --> 00:03:04.488
when we are saving the state,

51
00:03:04.488 --> 00:03:09.453
we are not cloning the contents.

52
00:03:09.453 --> 00:03:12.803
So which means,
if you change one of these pointers,

53
00:03:12.803 --> 00:03:17.957
you're changing not just that state, but
all the previous states that you have.

54
00:03:17.957 --> 00:03:22.202
If you have ever played with React,
with Redux, or

55
00:03:22.202 --> 00:03:28.244
with other data framework libraries,
you have already deal with this.

56
00:03:28.244 --> 00:03:33.147
In this case,
when you are changing the state,

57
00:03:33.147 --> 00:03:37.935
you need to clone the whole structure,
okay?

58
00:03:37.935 --> 00:03:40.800
For our example, it will work,
I mean, this will work.

59
00:03:40.800 --> 00:03:45.096
But in the future,
if we have a way to edit the text and

60
00:03:45.096 --> 00:03:50.089
change the text, the problem is
that the undo will not work.

61
00:03:50.089 --> 00:03:54.939
Because when I'm changing the third one,
it will check the third one for

62
00:03:54.939 --> 00:03:59.789
all the historical lists that we have
because all the sets are pointing to

63
00:03:59.789 --> 00:04:01.000
the same object.

64
00:04:01.000 --> 00:04:05.066
So every time I'm pushing into the
history, I need to clone the whole thing.

65
00:04:05.066 --> 00:04:08.331
If you don't understand exactly
what I'm doing, don't worry.

66
00:04:08.331 --> 00:04:11.844
But actually,
I need to do something like this,

67
00:04:11.844 --> 00:04:16.995
creating a new set based on the current
state, a new parenthesis here.

68
00:04:16.995 --> 00:04:20.462
So here I'm taking the current state,
if you're coming from Redux,

69
00:04:20.462 --> 00:04:21.949
probably you have used this.

70
00:04:21.949 --> 00:04:26.849
You're spreading the contents
of the state in a new array,

71
00:04:26.849 --> 00:04:29.691
and we then are creating a new set.

72
00:04:29.691 --> 00:04:34.676
So I'm always creating a new
set when I'm saving this, okay?

73
00:04:34.676 --> 00:04:37.862
Anyway, have in mind
that if I don't do that,

74
00:04:37.862 --> 00:04:41.475
it will work anyway in our
example as it is right now.

75
00:04:41.475 --> 00:04:48.384
Okay, so the question is
when to push the new state.

76
00:04:48.384 --> 00:04:55.613
When do you think is a good moment to push
a new state in this memento's collection?

77
00:04:58.826 --> 00:05:02.090
&gt;&gt; Speaker 2: On add or on delete.

78
00:05:02.090 --> 00:05:03.206
&gt;&gt; Maximiliano Firtman: On add or
on delete, yeah.

79
00:05:03.206 --> 00:05:08.457
Do we have any other better,
I mean, it's okay, but

80
00:05:08.457 --> 00:05:13.827
we might have a better way
that will also embrace add and

81
00:05:13.827 --> 00:05:17.822
delete, the observer pattern notify.

82
00:05:17.822 --> 00:05:20.604
We can add another observer.

83
00:05:20.604 --> 00:05:25.168
For when the list changes,
I will save the new state,

84
00:05:25.168 --> 00:05:29.130
as we did for a storage,
something like this.

85
00:05:29.130 --> 00:05:33.736
So we don't have yet
the todo items here, so

86
00:05:33.736 --> 00:05:37.855
I need to import that, remember.js.

87
00:05:37.855 --> 00:05:39.638
So we'll say, okay, you know what?

88
00:05:39.638 --> 00:05:43.717
For TodoItems, get the instance,
the singleton.

89
00:05:43.717 --> 00:05:46.575
I'm going to add an observer.

90
00:05:46.575 --> 00:05:52.434
And I'm going to say,
I want to talk to my TodoHistory,

91
00:05:52.434 --> 00:05:55.311
and we will push the state.

92
00:05:55.311 --> 00:05:57.909
What's the state?

93
00:05:57.909 --> 00:05:59.277
Well, actually,

94
00:05:59.277 --> 00:06:05.090
let me create the variable,
&gt;&gt; Maximiliano Firtman: For

95
00:06:05.090 --> 00:06:07.470
the instance, so
I don't need to access this.

96
00:06:07.470 --> 00:06:10.149
The getter twice,
it's not a big deal anyway.

97
00:06:10.149 --> 00:06:13.710
But TodoItem,
&gt;&gt; Maximiliano Firtman: So

98
00:06:13.710 --> 00:06:18.439
the current state is the current set.

99
00:06:18.439 --> 00:06:25.068
Okay, so addObserver, this goes like this.

100
00:06:25.068 --> 00:06:31.490
Yep, so I'm adding a new observer,
pushing into the history.

101
00:06:31.490 --> 00:06:37.570
And all the logic for
saving the state is here.

102
00:06:39.252 --> 00:06:41.238
&gt;&gt; Maximiliano Firtman: So it's just that.

103
00:06:41.238 --> 00:06:45.175
The only thing that is left yet is, okay,

104
00:06:45.175 --> 00:06:49.789
we need to communicate this
with the UI somehow to

105
00:06:49.789 --> 00:06:54.981
trigger an undo operation,
okay, that makes sense?

106
00:06:54.981 --> 00:07:01.191
And also we need maybe to add here
in app.js another, if checking for

107
00:07:01.191 --> 00:07:06.242
Ctrl+C, if you're on a Mac,
you can add also Cmd+C.

108
00:07:06.242 --> 00:07:12.894
But anyway, if you want,
Mac users will be comfortable with Cmd+C.

109
00:07:12.894 --> 00:07:15.004
But anyway, let's do Ctrl+C for now.

110
00:07:15.004 --> 00:07:21.709
But here, should I talk
directly to my memento object,

111
00:07:21.709 --> 00:07:25.856
from my history object from here?

112
00:07:27.459 --> 00:07:28.898
&gt;&gt; Maximiliano Firtman: Can I?

113
00:07:28.898 --> 00:07:31.030
Yes, I can, definitely.

114
00:07:31.030 --> 00:07:34.863
So I can go and talk to my pop,
okay, I can do that.

115
00:07:34.863 --> 00:07:38.680
But we have a command design pattern.

116
00:07:38.680 --> 00:07:41.958
Isn't it a better idea
to create a new command?

117
00:07:41.958 --> 00:07:45.023
Because now it's Ctrl+C,
but maybe in the future,

118
00:07:45.023 --> 00:07:47.620
I have a button on the screen as well for
undo.

119
00:07:47.620 --> 00:07:52.366
So it's much better to decouple
the implementation of the action

120
00:07:52.366 --> 00:07:56.949
from the invoker, and
that's actually the command pattern.

121
00:07:56.949 --> 00:07:58.643
And we already have a command, so

122
00:07:58.643 --> 00:08:01.498
the only thing I need is to
add another command for undo.

123
00:08:04.663 --> 00:08:10.078
So undo, then another case here,

124
00:08:10.078 --> 00:08:16.053
and we will implement what to do here,

125
00:08:16.053 --> 00:08:21.859
Commands.UNDO, break, like so.

126
00:08:21.859 --> 00:08:26.951
And actually, what I need to do is,
I need to take

127
00:08:26.951 --> 00:08:32.310
the previousList from TodoHistory.pop();.

128
00:08:32.310 --> 00:08:36.485
And if I do have one, for some reason,
let's say that there is no one because

129
00:08:36.485 --> 00:08:39.566
there is nothing in the history or
something like that.

130
00:08:39.566 --> 00:08:44.869
Well, I will call todoList.replaceList.

131
00:08:44.869 --> 00:08:51.610
Remember, we did that replaceList,
it's replacing the list with this one.

132
00:08:52.811 --> 00:08:56.066
&gt;&gt; Maximiliano Firtman: So it's important
if we have a command executor or

133
00:08:56.066 --> 00:09:00.405
something, that is, every new
operation that we have in the app,

134
00:09:00.405 --> 00:09:02.198
just go through a command.

135
00:09:02.198 --> 00:09:05.296
So then you can add multiple entry points,

136
00:09:05.296 --> 00:09:09.436
multiple ways to code that command,
does it make sense?

137
00:09:09.436 --> 00:09:13.169
Yep?
So then what we need to do here is what?

138
00:09:13.169 --> 00:09:17.959
Well, create a command and
execute it what is going to be UNDO.

139
00:09:21.204 --> 00:09:22.990
&gt;&gt; Maximiliano Firtman: There
is no argument in this case.

140
00:09:25.169 --> 00:09:31.625
So cross your fingers and
let's see what happens, yeah.

141
00:09:31.625 --> 00:09:35.973
&gt;&gt; Speaker 2: I think at the bottom of
memento, it's todoList, not todoItem, but

142
00:09:35.973 --> 00:09:37.090
I might be wrong.

143
00:09:37.090 --> 00:09:38.925
&gt;&gt; Maximiliano Firtman: Probably,
well, actually,

144
00:09:38.925 --> 00:09:41.187
it's probably going to work anyway.

145
00:09:41.187 --> 00:09:44.975
But you're right that the name
that I use should be todoList.

146
00:09:44.975 --> 00:09:50.994
I mean, it won't work because it's just
a variable name, but that one you said?

147
00:09:50.994 --> 00:09:53.794
This is the list, not the item.

148
00:09:53.794 --> 00:09:56.422
So you were right.

149
00:09:56.422 --> 00:09:59.595
&gt;&gt; Speaker 2: But on line 18,
it's not TodoItem.getInstance, right?

150
00:09:59.595 --> 00:10:00.702
&gt;&gt; Maximiliano Firtman: Here, yeah.

151
00:10:00.702 --> 00:10:01.454
&gt;&gt; Speaker 2: Okay, yeah.

152
00:10:01.454 --> 00:10:04.899
&gt;&gt; Maximiliano Firtman: Yeah,
you're right, so everything is todoList,

153
00:10:04.899 --> 00:10:06.711
not todoItem, thank you.

154
00:10:09.562 --> 00:10:16.315
&gt;&gt; Maximiliano Firtman: So now let's
add another one, or let's delete one.

155
00:10:16.315 --> 00:10:18.845
So let's see,
I'm not sure if it's gonna work.

156
00:10:18.845 --> 00:10:21.067
That's right, I'm going to delete lunch.

157
00:10:21.067 --> 00:10:24.531
I'm going to press Ctrl+C.

158
00:10:24.531 --> 00:10:27.697
We have an error, okay,
but something happens.

159
00:10:27.697 --> 00:10:29.523
TodoHistory is not defined.

160
00:10:29.523 --> 00:10:33.102
Typically, when you see that,
it's an import issue.

161
00:10:33.102 --> 00:10:36.987
So let's go to command.js.

162
00:10:36.987 --> 00:10:41.579
And here, it's using TodoHistory,
and it's not imported.

163
00:10:41.579 --> 00:10:43.808
And of course,
this is coming from another module.

164
00:10:43.808 --> 00:10:49.062
So let's add the import with the .js,
okay?

165
00:10:49.062 --> 00:10:55.921
Refresh, well, now,
TodoList is not defined, let me see.

166
00:10:55.921 --> 00:11:02.167
18 of memento, it's here, TodoList.

167
00:11:02.167 --> 00:11:04.837
Maybe because when we change this,

168
00:11:04.837 --> 00:11:09.028
we didn't change the import,
okay, cool, refresh.

169
00:11:09.028 --> 00:11:12.996
Okay, well, it disappeared,
okay, I deleted that.

170
00:11:12.996 --> 00:11:15.779
So let's add lunch, okay?

171
00:11:15.779 --> 00:11:20.637
Ctrl+C, whoop, let me finish the workshop.

172
00:11:20.637 --> 00:11:22.958
Ctrl+C, gets back.

173
00:11:22.958 --> 00:11:28.474
Ctrl+C, we have a problem there probably.

174
00:11:28.474 --> 00:11:31.231
It's deleting more than one for
some reason.

175
00:11:31.231 --> 00:11:35.145
But lunch works, dinner works, also,

176
00:11:35.145 --> 00:11:41.014
when we have some errors in the middle,
with local storage,

177
00:11:41.014 --> 00:11:48.628
it's always a good idea because sometimes
we end up with some invalid states.

178
00:11:48.628 --> 00:11:51.410
To go back here to Application &gt; Storage,
so

179
00:11:51.410 --> 00:11:54.864
DevTools &gt; Application &gt;
Storage &gt; Clear site data.

180
00:11:54.864 --> 00:11:57.392
So let's start from scratch, okay?

181
00:11:57.392 --> 00:12:02.192
So we cleared everything, so now we
refresh and we start from scratch, okay,

182
00:12:02.192 --> 00:12:03.078
just in case.

183
00:12:03.078 --> 00:12:09.355
Well, lunch, dinner,
by the way, Cmd+C, Cmd+C no,

184
00:12:09.355 --> 00:12:15.265
Ctrl+C, sorry,
[LAUGH] I can go back here, I can add.

185
00:12:15.265 --> 00:12:17.208
Wherever I said no, I don't want this.

186
00:12:17.208 --> 00:12:22.319
Ctrl+C, for asdf it's working, okay?

187
00:12:22.319 --> 00:12:27.327
So implementing undo is typically,
if you don't use design patterns,

188
00:12:27.327 --> 00:12:30.374
seems like a very difficult thing, right?

189
00:12:30.374 --> 00:12:34.687
But here, it was just a matter of,
I don't know, three minutes.

190
00:12:34.687 --> 00:12:39.518
And I'm explaining this, if not in one
minute, two minutes, in one, two minutes,

191
00:12:39.518 --> 00:12:42.606
you can have a full new feature
that seems complex, but

192
00:12:42.606 --> 00:12:45.988
thanks to using design patterns,
it's actually simple.

193
00:12:45.988 --> 00:12:48.133
So for now, this is our final version.

194
00:12:48.133 --> 00:12:50.588
There are much more things we can improve.

195
00:12:50.588 --> 00:12:52.662
There are better ways
to do a lot of stuff.

196
00:12:52.662 --> 00:12:57.159
Right now, we are re-rendering
the whole UL every time instead of

197
00:12:57.159 --> 00:13:01.267
reusing DOM elements, so
that we can improve performance.

198
00:13:01.267 --> 00:13:05.007
So if we are not changing,
so what I'm saying is,

199
00:13:05.007 --> 00:13:09.371
if I'm adding a new task now,
asdf, lunch, dinner, and

200
00:13:09.371 --> 00:13:14.652
sdf are going to be recreated in the DOM,
and there is no need for that.

201
00:13:14.652 --> 00:13:19.905
I mean, you don't see any problem because
we are not talking about 10,000 elements,

202
00:13:19.905 --> 00:13:21.195
so it's fast enough.

203
00:13:21.195 --> 00:13:25.317
But anyway, it's still not the best
performance probably, but it works.

204
00:13:25.317 --> 00:13:29.994
And for a lot of apps,
it's good enough, to be honest, okay?

205
00:13:29.994 --> 00:13:34.629
But it was just a way to prove
the usage of many design patterns.

206
00:13:34.629 --> 00:13:37.510
Just remember that there are many more,

207
00:13:37.510 --> 00:13:40.909
we just covered the surface
of those patterns.

208
00:13:40.909 --> 00:13:45.969
So there are probably more than
50 patterns that applies to,

209
00:13:45.969 --> 00:13:49.123
so far, design that we haven't used.

210
00:13:49.123 --> 00:13:50.368
So there are more to learn.

