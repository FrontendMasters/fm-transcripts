WEBVTT

1
00:00:00.004 --> 00:00:03.654
Another one, and
we will implement this one later.

2
00:00:03.654 --> 00:00:05.723
Memento, that's a nice name.

3
00:00:05.723 --> 00:00:07.948
Have you seen the movie, Memento?

4
00:00:07.948 --> 00:00:11.351
There is a relationship with the movie.

5
00:00:11.351 --> 00:00:16.314
The problem to solve is we wanna capture
and externalize an object's internal

6
00:00:16.314 --> 00:00:21.143
state so that it can be restored later,
without violating encapsulation.

7
00:00:21.143 --> 00:00:22.777
And you say, why memento?

8
00:00:22.777 --> 00:00:26.689
Memento has to do with memory, right?

9
00:00:26.689 --> 00:00:30.295
So it has to do with having memory
of the current state of the app.

10
00:00:30.295 --> 00:00:34.162
So we create an object that stores
the state of the original object and

11
00:00:34.162 --> 00:00:36.777
provide method to save and
restore the state.

12
00:00:36.777 --> 00:00:40.840
I mean, it sounds like blah, blah,
but it's actually pretty simple.

13
00:00:40.840 --> 00:00:47.439
And one of the great use cases of
this is Undo/Redo functionality.

14
00:00:47.439 --> 00:00:52.241
So we can create an undo system,
so Ctrl + C or Command + C, for

15
00:00:52.241 --> 00:00:57.065
example, on your system, and
go back to your previous state.

16
00:00:57.065 --> 00:01:00.151
And we will implement this later, and

17
00:01:00.151 --> 00:01:05.655
you will see how we see is to implement
undo when you use the pattern.

18
00:01:05.655 --> 00:01:08.425
Without the pattern,
it's actually so complicated.

19
00:01:08.425 --> 00:01:12.027
It's actually how to go back
to the previous state, okay?

20
00:01:12.027 --> 00:01:16.155
Well, saving a game, an app session.

21
00:01:16.155 --> 00:01:18.784
So I can restore that when I go back.

22
00:01:18.784 --> 00:01:21.393
This is pretty useful for web apps.

23
00:01:21.393 --> 00:01:24.615
So when you go back to the web app,

24
00:01:24.615 --> 00:01:29.691
it's the same situation
where you left yesterday.

25
00:01:29.691 --> 00:01:33.960
Or time-travel debugging, for
debugging, this is important.

26
00:01:33.960 --> 00:01:38.946
So there was a problem, but now the user
continues changing the web app.

27
00:01:38.946 --> 00:01:40.704
So how can I go back?

28
00:01:40.704 --> 00:01:46.587
How can I time-travel back to the moment
where the exception happened so

29
00:01:46.587 --> 00:01:50.842
I can see what was the problem
at that moment, okay?

30
00:01:50.842 --> 00:01:52.052
So we will implement that.

31
00:01:52.052 --> 00:01:55.736
So I will take more time to explain
this later, it's not a big deal.

32
00:01:55.736 --> 00:01:58.821
We have typically a history
manager that has an array.

33
00:01:58.821 --> 00:02:03.828
And we push, actually,
we take treated this as a pile,

34
00:02:03.828 --> 00:02:07.036
so we push and we pop, that's all.

35
00:02:07.036 --> 00:02:10.275
The state, and what's the state?

36
00:02:10.275 --> 00:02:15.473
Anything that defines your app.

37
00:02:15.473 --> 00:02:21.696
It can be all the information on
the screen, the scroll position,

38
00:02:21.696 --> 00:02:26.940
whatever is typed in every
input form element and so on.

39
00:02:26.940 --> 00:02:28.632
We will see this in action in a second.

40
00:02:28.632 --> 00:02:33.894
And the last one before actually
implementing this in code,

41
00:02:33.894 --> 00:02:37.720
that is the funnest part here, is command.

42
00:02:37.720 --> 00:02:39.995
What's the idea of command?

43
00:02:39.995 --> 00:02:44.398
We wanna avoid hard-wiring
a request from its invoker.

44
00:02:44.398 --> 00:02:49.224
So I have a button on click,
you put an on click handler, and you say,

45
00:02:49.224 --> 00:02:53.654
when that button is pressed,
I need to save data in a database.

46
00:02:53.654 --> 00:03:00.247
So on click equals to function, and
you start writing your SQL query,

47
00:03:00.247 --> 00:03:04.177
so index DB-API usage to store the data.

48
00:03:04.177 --> 00:03:09.718
But you are hard-wiring there
the invoker with the process.

49
00:03:09.718 --> 00:03:14.349
So later, for example,
if you also wanna save with Ctrl + S,

50
00:03:14.349 --> 00:03:19.531
it's already wired into the on
click handler, so it's difficult.

51
00:03:19.531 --> 00:03:23.386
Then you listen for
the keyboard events and

52
00:03:23.386 --> 00:03:28.003
you call the click event handler,
so it's a mess.

53
00:03:28.003 --> 00:03:32.563
So we wanna avoid that, so for
that we create an object that is used to

54
00:03:32.563 --> 00:03:36.805
encapsulate all the information
needed to perform an action or

55
00:03:36.805 --> 00:03:39.057
trigger an event in your system.

56
00:03:39.057 --> 00:03:46.369
it's like you say, I wanna save, and
you talk to a command executor option,

57
00:03:46.369 --> 00:03:50.419
hey, I need to save and
he knows how to save.

58
00:03:50.419 --> 00:03:55.058
So you don't write the code to
save in the click handler, okay?

59
00:03:55.058 --> 00:03:55.977
Make sense?

60
00:03:55.977 --> 00:03:59.916
So managing the action of your app is
one use case, add, delete, print, save.

61
00:03:59.916 --> 00:04:05.452
Everything that happens in your app, you
don't hardwire that in the event handlers.

