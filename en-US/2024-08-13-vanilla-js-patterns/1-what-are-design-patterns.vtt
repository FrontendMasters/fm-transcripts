WEBVTT

1
00:00:00.167 --> 00:00:02.414
Let's get directly into the topic.

2
00:00:02.414 --> 00:00:05.130
So we will talk about design patterns,
right?

3
00:00:05.130 --> 00:00:08.365
So, let's start with the definition,
what's a design pattern?

4
00:00:08.365 --> 00:00:14.110
So, let me, before reading this,
the simplest way to analyze or

5
00:00:14.110 --> 00:00:19.970
define a design pattern is like
a recipe to solve a problem, okay?

6
00:00:19.970 --> 00:00:25.671
So, but it's a reusable template for
solving common software design problems,

7
00:00:25.671 --> 00:00:30.971
enhancing covid ability and efficiency and
creating a common vocabulary.

8
00:00:30.971 --> 00:00:33.755
I think the last part is important, so

9
00:00:33.755 --> 00:00:38.455
when we are using a design pattern,
we are naming that pattern.

10
00:00:38.455 --> 00:00:43.072
And then we can talk to our colleagues and
say, hey, I'm going to implement x

11
00:00:43.072 --> 00:00:48.135
pattern, and the other colleague might
immediately understand what I'm saying.

12
00:00:48.135 --> 00:00:51.297
So, design patterns
are creating vocabulary,

13
00:00:51.297 --> 00:00:54.311
common vocabulary among developers, okay?

14
00:00:54.311 --> 00:00:58.742
And that's one of the important
parts of using design partners as,

15
00:00:58.742 --> 00:01:01.475
apart from solving the problem, right?

16
00:01:01.475 --> 00:01:03.236
The idea is to solve a problem.

17
00:01:03.236 --> 00:01:05.372
So most of the time we have a problem.

18
00:01:05.372 --> 00:01:08.330
And if you are a JavaScript developer and

19
00:01:08.330 --> 00:01:12.245
you have experience doing
Vanilla JavaScript apps,

20
00:01:12.245 --> 00:01:17.378
then you have probably encountered
a lot of problems, that you're,

21
00:01:17.378 --> 00:01:23.045
a lot of questions like, I have
a problem here, how should I solve this?

22
00:01:23.045 --> 00:01:26.745
Because when I'm using React,
or when I'm using Angular,

23
00:01:26.745 --> 00:01:28.933
there is solved in this or that way.

24
00:01:28.933 --> 00:01:33.446
But now, in Vanilla JavaScript,
I don't have a way to do that based on

25
00:01:33.446 --> 00:01:38.053
the framework, because there is no
framework I can do whatever I want.

26
00:01:38.053 --> 00:01:42.563
So the design pattern will
guide me through a path

27
00:01:42.563 --> 00:01:45.539
to actually solve the problem.

28
00:01:45.539 --> 00:01:51.721
Design patterns are actually coming from
architecture from the 70s, the term,

29
00:01:51.721 --> 00:01:57.739
the idea on architecture when you were
building, I don't know, an apartment.

30
00:01:57.739 --> 00:02:02.345
You are designing an apartment, they were
designed patterns for solving issues.

31
00:02:02.345 --> 00:02:07.298
For example, let's say,
I have a corner that is really small,

32
00:02:07.298 --> 00:02:09.697
I need to put a bathroom there.

33
00:02:09.697 --> 00:02:14.976
Okay, so someone created a design
pattern for that saying, okay,

34
00:02:14.976 --> 00:02:20.730
maybe you should put the toilet here,
and then the door there, and so on.

35
00:02:20.730 --> 00:02:24.026
That was the design pattern,
was a recipe, okay, for

36
00:02:24.026 --> 00:02:27.255
architects when they were
designing buildings, and

37
00:02:27.255 --> 00:02:31.361
apartments, and houses,
the idea come from there from the 70s.

38
00:02:31.361 --> 00:02:38.191
And then, actually it's exactly,
I think, 30 years ago.

39
00:02:38.191 --> 00:02:43.033
30 years ago, this book appear for
software design patterns,

40
00:02:43.033 --> 00:02:46.654
element of reusable
object oriented software.

41
00:02:46.654 --> 00:02:48.936
So, this book

42
00:02:51.137 --> 00:02:55.793
Took the idea of design patterns
into software development, okay?

43
00:02:55.793 --> 00:02:59.478
It was the first one that
was talking about that and

44
00:02:59.478 --> 00:03:03.004
if you have heard about the Gang of Four,
okay?

45
00:03:03.004 --> 00:03:07.532
Gang of Four is actually these four
authors, authors that were actually

46
00:03:07.532 --> 00:03:12.216
publishing this book, and they created
here a lot of the design patterns.

47
00:03:12.216 --> 00:03:17.020
The latest version is actually 23
design patterns on software design,

48
00:03:17.020 --> 00:03:21.201
so this is not our web apps,
it was 30 years ago before the web,

49
00:03:21.201 --> 00:03:24.079
before JavaScript actually close to that.

50
00:03:24.079 --> 00:03:27.965
But it's before we were actually
using JavaScript for web apps.

51
00:03:27.965 --> 00:03:31.018
So, it was, but it was for
object oriented software, okay?

52
00:03:31.018 --> 00:03:37.689
So, the original idea and most of these
design patterns were prepared and

53
00:03:37.689 --> 00:03:41.787
organized for an object oriented language.

54
00:03:41.787 --> 00:03:42.966
Maybe I have a question for you.

55
00:03:42.966 --> 00:03:47.901
Is JavaScript an object-oriented
language or not?

56
00:03:47.901 --> 00:03:49.523
Only if you mean to it.

57
00:03:49.523 --> 00:03:52.657
Only if you're mean to it, well,
that's a good answer, actually.

58
00:03:52.657 --> 00:03:56.355
So, I mean, it's not a strict
object-oriented language,

59
00:03:56.355 --> 00:03:58.000
it's prototype-based.

60
00:03:58.000 --> 00:04:03.924
We can emulate most of the object-oriented
ideas, most of them, not all of them.

61
00:04:03.924 --> 00:04:09.132
Even with modern ECMAScript, for
example, you cannot quickly or

62
00:04:09.132 --> 00:04:13.131
easily emulate protected properties or
methods,

63
00:04:13.131 --> 00:04:17.795
that's one thing that it's
almost impossible to create.

64
00:04:17.795 --> 00:04:23.173
But anyway, because JavaScript is not
really an object-oriented software.

65
00:04:23.173 --> 00:04:28.080
If you read this book, I mean, you may
want to implement some of those design

66
00:04:28.080 --> 00:04:31.313
patterns, and
you will find some issues, okay?

67
00:04:31.313 --> 00:04:32.947
So have that in mind.

68
00:04:32.947 --> 00:04:37.203
But anyway, this book was the, let's say,

69
00:04:37.203 --> 00:04:44.602
initial push into talking about design
patterns with web-making software.

