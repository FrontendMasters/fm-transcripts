WEBVTT

1
00:00:00.150 --> 00:00:01.422
&gt;&gt; Maximiliano Firtman: Let's
create the classes,

2
00:00:01.422 --> 00:00:03.650
including the one that will use the mixin,
okay?

3
00:00:05.010 --> 00:00:10.205
So, for that, I'm going to
create another JavaScript file,

4
00:00:10.205 --> 00:00:12.690
I can call this classes.js.

5
00:00:12.690 --> 00:00:17.590
I know if you're coming from Java or
C# it looks so dirty.

6
00:00:17.590 --> 00:00:22.121
We're going to create two classes,
one for the todo item,

7
00:00:22.121 --> 00:00:26.650
one todo, and then another class
that is the list of todos,

8
00:00:26.650 --> 00:00:29.747
the list of items, okay, two classes.

9
00:00:29.747 --> 00:00:33.761
In two classes, these are two classes,
they are not so big,

10
00:00:33.761 --> 00:00:37.530
so I think that we can just
put them together in one file.

11
00:00:37.530 --> 00:00:40.762
It's not a big deal,
we don't need to follow Java guidelines.

12
00:00:40.762 --> 00:00:44.522
In Java, every class should
be in a separate file, okay?

13
00:00:44.522 --> 00:00:46.932
But this is not Java,
we are in JavaScript.

14
00:00:46.932 --> 00:00:51.677
So, we can create the class
TodoItem that will

15
00:00:51.677 --> 00:00:56.552
just include a text,
it's just a text for now.

16
00:00:56.552 --> 00:01:00.583
Later, you can add more properties,
okay, but for now, it's just a text.

17
00:01:00.583 --> 00:01:07.518
I'm going to just save my text in
a property, and I will use equals (other),

18
00:01:07.518 --> 00:01:12.763
return this.text = other.text,
what is this?

19
00:01:12.763 --> 00:01:17.272
This is actually very similar, not 100%
to the value object pattern, I'm sure,

20
00:01:17.272 --> 00:01:19.223
if you remember that one.

21
00:01:19.223 --> 00:01:23.531
Actually, if I'm adding
twice the same todo, so

22
00:01:23.531 --> 00:01:28.188
I need to get lunch and
then I add again get lunch.

23
00:01:28.188 --> 00:01:30.098
It's the same action, right?

24
00:01:30.098 --> 00:01:34.338
So I shouldn't add it again,
does that make sense?

25
00:01:34.338 --> 00:01:38.554
So we can kind of think on the value
object, like the chudo text,

26
00:01:38.554 --> 00:01:44.828
it's a value object, I shouldn't have
duplicates, it doesn't make any sense.

27
00:01:44.828 --> 00:01:50.298
Have lunch, is have lunch so I shouldn't
have two have lunch, that makes sense.

28
00:01:50.298 --> 00:01:55.003
So that's why it's just
a equals method that will

29
00:01:55.003 --> 00:01:59.235
check if my text is equal to another todo.

30
00:01:59.235 --> 00:02:03.505
And if it's like that, then I'm not
going to add it to the list, yeah.

31
00:02:04.705 --> 00:02:08.286
&gt;&gt; Speaker 1: In a situation like this,
I would typically reach for

32
00:02:08.286 --> 00:02:10.115
the set data type.

33
00:02:10.115 --> 00:02:12.885
I assume you're not using that just
cuz it's a teaching example, or

34
00:02:12.885 --> 00:02:14.285
are there other considerations?

35
00:02:14.285 --> 00:02:16.825
&gt;&gt; Maximiliano Firtman: There are other
concepts, what happens with the set?

36
00:02:16.825 --> 00:02:22.461
So, if I have let's do this I have a set,
new set.

37
00:02:22.461 --> 00:02:28.681
And then I say, S, I'm going to
add a new object with a text A.

38
00:02:30.151 --> 00:02:32.691
Then I'm going to add
another object with a text A.

39
00:02:33.751 --> 00:02:37.014
What happens with that,
will it add it or not?

40
00:02:37.014 --> 00:02:37.961
&gt;&gt; Speaker 2: It will add it.

41
00:02:37.961 --> 00:02:39.460
&gt;&gt; Maximiliano Firtman: It will add it,
why?

42
00:02:39.460 --> 00:02:42.862
Because it's a different object,
it's a different leader,

43
00:02:42.862 --> 00:02:45.170
even if it has the same text.

44
00:02:45.170 --> 00:02:49.590
Value object the design pattern
is actually solving that problem.

45
00:02:49.590 --> 00:02:51.464
It's actually saying, okay, so yeah,

46
00:02:51.464 --> 00:02:55.720
we are talking about two different objects
but the values inside are the same.

47
00:02:55.720 --> 00:03:00.520
It's a different object but because
the values inside are the same we should

48
00:03:00.520 --> 00:03:05.248
treat them as the same object, even if
they are not the same object, okay?

49
00:03:08.018 --> 00:03:10.868
Cool, so, that's the TodoItem, actually.

50
00:03:10.868 --> 00:03:13.662
It's pretty simple,
it just has one property,

51
00:03:13.662 --> 00:03:18.160
constructor receiving the property, and
the equals that we will use later for

52
00:03:18.160 --> 00:03:21.233
emulating this Value object pattern.

53
00:03:21.233 --> 00:03:24.251
Now let's go into the TodoList.

54
00:03:24.251 --> 00:03:30.753
So the TodoList will include all the data.

55
00:03:30.753 --> 00:03:36.563
And I'm going to set my data as
a set as well, I can use an array.

56
00:03:37.563 --> 00:03:41.895
By the way, do you all know what
this syntax is, the hash prefix?

57
00:03:44.255 --> 00:03:45.895
&gt;&gt; Speaker 3: To make it a private.

58
00:03:45.895 --> 00:03:49.073
&gt;&gt; Maximiliano Firtman: It's a private
property, a private field, actually,

59
00:03:49.073 --> 00:03:53.377
that's a term in ECMAscript,
in JavaScript, so that means it's private,

60
00:03:53.377 --> 00:03:55.585
I cannot access data from the outside.

61
00:03:56.925 --> 00:03:59.410
So I'm gonna say it's a new set.

62
00:03:59.410 --> 00:04:04.528
And then I can, get because from
the outside, maybe I wanna get

63
00:04:04.528 --> 00:04:09.647
the items at some point,
I'm going to create the property with

64
00:04:09.647 --> 00:04:15.223
the getter called items,and it
will just return this.data.

65
00:04:15.223 --> 00:04:16.383
Remember to add the hash.

66
00:04:17.593 --> 00:04:20.848
So now I can access from the outside,
you may be thinking,

67
00:04:20.848 --> 00:04:24.647
well, why don't you create
the public property directly?

68
00:04:24.647 --> 00:04:30.078
Well, it's a good design pattern to
keep separate the public interface

69
00:04:30.078 --> 00:04:37.027
from the data itself of in the future,
in the future, I may want to change this.

70
00:04:37.027 --> 00:04:39.995
So in the future,
I may want to say, well, maybe.

71
00:04:39.995 --> 00:04:46.125
I need to go and grab the data first
from a database, I don't know, whatever.

72
00:04:46.125 --> 00:04:49.245
So for future proof,
it's better to create the getter.

73
00:04:52.565 --> 00:04:56.981
Of course, that by the way, when you're
doing this from the outside, you create

74
00:04:56.981 --> 00:05:01.282
a new TodoList something like this, and
then you just call items as a property.

75
00:05:03.002 --> 00:05:05.983
Just in case you haven't
played with getters,

76
00:05:05.983 --> 00:05:10.828
it's not even if it's a function,
I'm treating it as a field as a property,

77
00:05:10.828 --> 00:05:16.232
and it's going to execute the function,
and the function returns the data.

78
00:05:16.232 --> 00:05:16.892
Okay, make sense?

79
00:05:18.622 --> 00:05:23.511
Cool now, this is a TodoList, this is
the list that will hold all my data.

80
00:05:25.241 --> 00:05:28.741
I don't want to have multiple instances.

81
00:05:28.741 --> 00:05:30.981
At least this web app at this point.

82
00:05:30.981 --> 00:05:37.441
It doesn't contain separate list
producer or work and personal stuff.

83
00:05:37.441 --> 00:05:39.962
It's just one TodoList, okay?

84
00:05:39.962 --> 00:05:45.333
One and only one, because it's one and
only one I don't want

85
00:05:45.333 --> 00:05:50.914
anyone to create a new TodoList
add some elements to the list and

86
00:05:50.914 --> 00:05:54.518
then if you create a new one it's empty.

87
00:05:54.518 --> 00:05:59.562
So I want it to be one and
only one so it's a candidate for

88
00:05:59.562 --> 00:06:03.503
a Singleton, does that make sense?

89
00:06:03.503 --> 00:06:06.558
So I want to apply Singleton
to the to the TodoList.

90
00:06:06.558 --> 00:06:10.025
I only want one TodoList,
I don't need more than one.

91
00:06:10.025 --> 00:06:14.643
If someone can create another one,
it's actually a problem.

92
00:06:14.643 --> 00:06:18.819
Okay, so if you remember from the slides,
when I was explaining Singleton,

93
00:06:18.819 --> 00:06:20.437
I mentioned that the simple.

94
00:06:20.437 --> 00:06:23.727
Simplest way to implement the Singleton,
just create an object literal.

95
00:06:23.727 --> 00:06:28.457
But here I'm going to use a different
approach, it's a class, okay?

96
00:06:28.457 --> 00:06:31.790
So we will try to see how one way,
because there are JavaScript,

97
00:06:31.790 --> 00:06:35.237
there are always many ways
to solve the same problem.

98
00:06:35.237 --> 00:06:39.819
One way to implement my Singleton.

99
00:06:39.819 --> 00:06:46.122
So we can kind of following, in case you
have ever played with Singleton in Java,

100
00:06:46.122 --> 00:06:53.082
I'm going to start copying the Java part,
and then we will get out of the Java way.

101
00:06:53.082 --> 00:06:57.672
So for that, I can create a static
property called instance that

102
00:06:57.672 --> 00:07:01.490
it wants to start as null
in modern JavaScript.

103
00:07:01.490 --> 00:07:06.313
We can also use the static prefix to
specify that a property is static,

104
00:07:06.313 --> 00:07:10.260
which means it's a class field,
not an instance field.

105
00:07:11.840 --> 00:07:15.990
So there will be one
instance per TodoList, okay?

106
00:07:15.990 --> 00:07:22.203
Then I'm going to create a static
in it block code that is also new.

107
00:07:22.203 --> 00:07:28.253
In ECMAScript, that that code will be
executed whenever the class is parsed.

108
00:07:28.253 --> 00:07:32.025
When the class is parsed, even if you
are not creating any object for the class,

109
00:07:32.025 --> 00:07:33.953
the static code block will be executed.

110
00:07:35.783 --> 00:07:39.901
And it will be executed
only once per project, for

111
00:07:39.901 --> 00:07:46.093
web app execution So in this case,
I will create a new to the list.

112
00:07:46.093 --> 00:07:51.003
So this is creating the actual instance
and saving that as a static property.

113
00:07:51.003 --> 00:07:55.293
Then I will need a method get instance.

114
00:07:57.143 --> 00:08:00.295
I mean, I don't need the getter,
but I can just access the instance.

115
00:08:00.295 --> 00:08:08.595
But I think just having it
together is a good idea.

116
00:08:08.595 --> 00:08:13.115
If you see the code, this is similar
on how you implement this in Java.

117
00:08:14.505 --> 00:08:18.175
It's called instant,
getInstance, it's the same idea.

118
00:08:18.175 --> 00:08:22.719
But I still have a problem because, yeah,

119
00:08:22.719 --> 00:08:28.401
what's the idea,
now I can create here a variable and

120
00:08:28.401 --> 00:08:34.093
say my todoList = TodoList.getInstance,
right?

121
00:08:34.093 --> 00:08:39.383
That's idea of creating a static method.

122
00:08:39.383 --> 00:08:43.860
So this is going to execute this method,
okay?

123
00:08:43.860 --> 00:08:47.802
Okay, cool,
if I create another todoList and

124
00:08:47.802 --> 00:08:52.870
call getInstance,
I'm still getting the same todoList.

125
00:08:55.150 --> 00:08:56.930
Do you all follow that?

126
00:08:56.930 --> 00:09:00.052
So every time I'm calling get.Instance,
I'm getting the one and

127
00:09:00.052 --> 00:09:02.099
only instance available.

128
00:09:02.099 --> 00:09:06.009
What's the problem that
we still have here?

129
00:09:06.009 --> 00:09:11.509
I can create a new one like this and
what happens if I do this?

130
00:09:13.769 --> 00:09:17.001
Am I getting the same instance or
a different one?

131
00:09:18.770 --> 00:09:20.551
&gt;&gt; Maximiliano Firtman: A different one,

132
00:09:20.551 --> 00:09:27.498
because I cannot not force
the class to avoid the execution.

133
00:09:27.498 --> 00:09:34.985
But something that we can do
is create a constructor and

134
00:09:34.985 --> 00:09:40.029
here we can throw an error, saying,

135
00:09:40.029 --> 00:09:48.680
hey hey, Use TodoList
get.Instance() to access the list.

136
00:09:50.190 --> 00:09:51.070
So we can throw an error.

137
00:09:52.090 --> 00:09:57.261
Now, no one can create a new option.

138
00:09:59.456 --> 00:10:01.906
&gt;&gt; Maximiliano Firtman: Okay,
any questions?

139
00:10:01.906 --> 00:10:03.648
It is not ready yet.

140
00:10:03.648 --> 00:10:07.108
&gt;&gt; Speaker 3: Does constructor have to
be after a new todoList and the static?

141
00:10:08.208 --> 00:10:11.358
&gt;&gt; Maximiliano Firtman: So you mentioned
about the order, it doesn't matter.

142
00:10:11.358 --> 00:10:15.068
I mean, if your brain is happier
with putting it like this, but

143
00:10:15.068 --> 00:10:17.178
the order doesn't matter.

144
00:10:17.178 --> 00:10:19.288
So, but
let's put it within Singleton anyway.

145
00:10:21.016 --> 00:10:23.686
However, if I try this,
it's not gonna work, why?

146
00:10:24.826 --> 00:10:28.046
Because no one can create a new instance.

147
00:10:28.046 --> 00:10:30.926
Not even myself in the static code block.

148
00:10:30.926 --> 00:10:34.931
So when I'm trying to create the instance,
the one and only instance,

149
00:10:34.931 --> 00:10:36.277
it will throw an error.

150
00:10:36.277 --> 00:10:39.219
So something a little hacky,
but yeah, it is what it is.

151
00:10:39.219 --> 00:10:40.942
I can just check.

152
00:10:40.942 --> 00:10:45.267
If I do have in a static instance so

153
00:10:45.267 --> 00:10:49.902
basically this will try just let's

154
00:10:49.902 --> 00:10:54.691
try to follow what's going on here so

155
00:10:54.691 --> 00:10:59.969
the first time you execute you're the.

156
00:10:59.969 --> 00:11:04.769
The web app, the instance is null, okay?

157
00:11:04.769 --> 00:11:08.354
So then the static code block
is going to be executed, and

158
00:11:08.354 --> 00:11:12.549
this one is creating a new todoList so
it's creating an instance.

159
00:11:13.669 --> 00:11:19.521
When it's inflating this object,
it goes through the constructor.

160
00:11:20.532 --> 00:11:23.442
And the constructor says,
do we already have an instance?

161
00:11:24.822 --> 00:11:30.512
No, it's null, because it's null,
it's not going to throw the error.

162
00:11:30.512 --> 00:11:34.625
It will let me create the instance and

163
00:11:34.625 --> 00:11:42.063
now I will save that instance in
my static variable, makes sense?

164
00:11:42.063 --> 00:11:43.291
So it works.

165
00:11:43.291 --> 00:11:46.119
Next time I'm trying to create a new one.

166
00:11:46.119 --> 00:11:49.506
Now, instance does exist, so

167
00:11:49.506 --> 00:11:54.339
I throw in the error,
does that make sense?

168
00:11:55.829 --> 00:11:58.939
I mean, it looks either hacky,
but that that's a way.

169
00:11:58.939 --> 00:12:03.585
I mean, simply I should create an object,
a literal object, but

170
00:12:03.585 --> 00:12:08.570
it's a way to still use classes and
all the advantages of classes, but

171
00:12:08.570 --> 00:12:11.806
in this case we are forcing
a real Singleton.

172
00:12:13.216 --> 00:12:17.596
By the way,
right now this class has a Singleton.

173
00:12:17.596 --> 00:12:19.624
Let's remove the candidate.

174
00:12:19.624 --> 00:12:23.534
And remember that we also
wanted to apply the mixin.

175
00:12:23.534 --> 00:12:25.874
How to apply the mixin to this class?

176
00:12:25.874 --> 00:12:31.884
To apply the mixin,
we can use object assign and where is.

177
00:12:31.884 --> 00:12:35.614
First we need to pass the object
where we going to apply the mixin.

178
00:12:35.614 --> 00:12:40.000
And initially you think that
we want to apply To the class.

179
00:12:41.490 --> 00:12:42.800
But that's not the case.

180
00:12:42.800 --> 00:12:47.711
I'm not sure, do you know what the type
of a class is in in JavaScript?

181
00:12:47.711 --> 00:12:48.710
&gt;&gt; Speaker 1: Function?

182
00:12:48.710 --> 00:12:49.960
&gt;&gt; Maximiliano Firtman: It's a function,
correct.

183
00:12:49.960 --> 00:12:54.979
So a class is actually a function,
and which it's weird,

184
00:12:54.979 --> 00:12:58.783
yeah, but this is for historical reasons.

185
00:13:00.334 --> 00:13:04.463
If I'm doing this,
I'm going to add the mixin to

186
00:13:04.463 --> 00:13:09.674
the function that constructs
the object of the class.

187
00:13:09.674 --> 00:13:11.134
That's not what I want.

188
00:13:11.134 --> 00:13:13.604
So I wanna change the prototype.

189
00:13:13.604 --> 00:13:18.596
And again,
we don't have enough time today to explain

190
00:13:18.596 --> 00:13:23.696
prototyping in JavaScript,
but actually this will add

191
00:13:23.696 --> 00:13:28.872
the mixin behavior to all
the instances of the class.

192
00:13:28.872 --> 00:13:32.602
Now, by the way, we know there is only
one instance in this example, but anyway,

193
00:13:32.602 --> 00:13:33.917
because it's a Singleton.

194
00:13:33.917 --> 00:13:37.985
And I'm going to apply the observerMixin.

195
00:13:37.985 --> 00:13:39.557
What's the problem?

196
00:13:39.557 --> 00:13:46.555
My observerMixin is written
in a different module, right?

197
00:13:46.555 --> 00:13:51.015
The problem is that that
mixin should be exported.

198
00:13:52.065 --> 00:13:54.806
So I need to export the mixin, if not,

199
00:13:54.806 --> 00:14:00.184
I won't be able to use it from
the other model, okay, makes sense?

200
00:14:00.184 --> 00:14:06.934
And now that I exported it,
I need to import the observerMixin.

201
00:14:06.934 --> 00:14:10.503
So if you ask the ID todo that, so

202
00:14:10.503 --> 00:14:15.524
I select this from the order complete.

203
00:14:15.524 --> 00:14:21.142
It's adding me the import, but there is
a big problem with VS code and vanilla

204
00:14:21.142 --> 00:14:26.778
JavaScript projects, if you execute this,
we will get a 404 HTTP error.

205
00:14:26.778 --> 00:14:29.629
&gt;&gt; Speaker 2: Because it
doesn't have the file type.

206
00:14:29.629 --> 00:14:32.705
&gt;&gt; Maximiliano Firtman: Because
it doesn't contain the extension.

207
00:14:34.115 --> 00:14:39.061
It says, load this from mixin,
but it's actually mixing.js.

208
00:14:41.247 --> 00:14:44.923
When we're doing vanilla
JavaScript projects, client-side,

209
00:14:44.923 --> 00:14:47.607
it's the browser making HTTP requests.

210
00:14:47.607 --> 00:14:51.467
The browser needs to have
the full qualified URL.

211
00:14:51.467 --> 00:14:56.065
And the problem is that we're
used to Babel, TypeScript, and

212
00:14:56.065 --> 00:14:59.096
other builders that helps us with that.

213
00:14:59.096 --> 00:15:05.066
And then we don't need to use.js
when we are using those builders.

214
00:15:05.066 --> 00:15:10.462
And of course, they transpile our code,
and they will finally add the .js, okay?

215
00:15:10.462 --> 00:15:15.959
But VS code by default, it's kind of
thinking that we will use Babel or

216
00:15:15.959 --> 00:15:20.348
any other builder, so
it's not adding the .js.

217
00:15:20.348 --> 00:15:21.428
So be careful with that.

218
00:15:21.428 --> 00:15:26.975
Okay, so
we need to import this from ./mixin.js,

219
00:15:26.975 --> 00:15:32.418
so now we can actually apply and
it will work, okay.

220
00:15:32.418 --> 00:15:37.764
And this is then applying
the observerMixin

221
00:15:37.764 --> 00:15:41.135
to the,
&gt;&gt; Maximiliano Firtman: So

222
00:15:41.135 --> 00:15:45.661
now my TodoList will also have
the methods of the mixin,

223
00:15:45.661 --> 00:15:49.239
notify, add observer, remove observer.

224
00:15:50.459 --> 00:15:55.288
Automagically, we injected that behavior
and also the set for the observers.

