WEBVTT

1
00:00:00.254 --> 00:00:01.647
&gt;&gt; Maximiliano Firtman: The next and
last pattern,

2
00:00:01.647 --> 00:00:05.282
because with a multi-page application
we have less design patterns,

3
00:00:05.282 --> 00:00:07.903
because we don't have JavaScript,
okay, here.

4
00:00:07.903 --> 00:00:12.067
So it's about the speculation rules.

5
00:00:12.067 --> 00:00:15.838
So if you are in the HTML,
it's about prefetch, so

6
00:00:15.838 --> 00:00:21.715
you are in this HTML in the home, think
about this, which is the most probable or

7
00:00:21.715 --> 00:00:26.306
probables recipes that you will click or
the user will click?

8
00:00:26.306 --> 00:00:27.408
&gt;&gt; Student: The first two.

9
00:00:27.408 --> 00:00:31.209
&gt;&gt; Maximiliano Firtman: The first two,
right, because they are bigger, larger,

10
00:00:31.209 --> 00:00:35.314
so it's more probable, of course,
you can use your own stats,

11
00:00:35.314 --> 00:00:40.354
you actually get real data, real user
metrics, but let's say the first two.

12
00:00:40.354 --> 00:00:45.391
So how can I tell the browser
in my index.html that I want

13
00:00:45.391 --> 00:00:50.119
the browser to prefetch or
prerender the first two?

14
00:00:50.119 --> 00:00:52.236
How would you do that?

15
00:00:52.236 --> 00:00:57.388
There is a history of different meta
tags that were available before link,

16
00:00:57.388 --> 00:00:59.939
we used to have a link rel prerender.

17
00:00:59.939 --> 00:01:02.884
It doesn't exist anymore,
so it was deprecated.

18
00:01:02.884 --> 00:01:06.461
So that's not the case,
also, using service workers,

19
00:01:06.461 --> 00:01:09.898
you can use the CacheStorage
as well to do it manually.

20
00:01:09.898 --> 00:01:15.939
But now we have speculation
rules that look weird initially.

21
00:01:15.939 --> 00:01:20.462
We are going to create a script,
but not in JavaScript,

22
00:01:20.462 --> 00:01:23.265
with the type speculation rules.

23
00:01:23.265 --> 00:01:25.131
You said, what?

24
00:01:25.131 --> 00:01:29.800
Yeah, we're going to create a script
with the type speculation rules.

25
00:01:29.800 --> 00:01:33.199
Inside we're going to write JSON, so

26
00:01:33.199 --> 00:01:37.564
it's like metadata written
in JSON in the HTML.

27
00:01:37.564 --> 00:01:42.817
And we're going to specify
that we wanna prerender,

28
00:01:42.817 --> 00:01:48.780
that there is a prerender group
here that is an array of URLs.

29
00:01:48.780 --> 00:01:53.921
And URLs, actually,
it's an array, URLs, yeah,

30
00:01:53.921 --> 00:01:59.540
that's okay, where I can add
different URLs in an array.

31
00:01:59.540 --> 00:02:04.824
For example, I can add fish-tacos.html,
that's the first one.

32
00:02:06.780 --> 00:02:13.461
&gt;&gt; Maximiliano Firtman: And
I can have vegetarian-pho.html, like so.

33
00:02:13.461 --> 00:02:16.132
Instead of prerender,
I can also use prefetch.

34
00:02:16.132 --> 00:02:23.168
Remember, prefetch will just download
the HML, but not render the content,

35
00:02:23.168 --> 00:02:27.976
and prerender will do all the stuff,
so that's all.

36
00:02:27.976 --> 00:02:31.988
The API can get more complex,
you can use regular expressions,

37
00:02:31.988 --> 00:02:35.785
there are a lot of things you can do,
you can add more groups.

38
00:02:35.785 --> 00:02:39.179
If you are in the website, do I have it?

39
00:02:39.179 --> 00:02:39.946
&gt;&gt; Student: No?

40
00:02:46.108 --> 00:02:49.781
&gt;&gt; Maximiliano Firtman: Here when you
get into Prefetch, the last chapter,

41
00:02:49.781 --> 00:02:53.120
there is a link here for
the documentation, for

42
00:02:53.120 --> 00:02:58.566
the speculation rules API, where you
can see that it can get complex, okay?

43
00:02:58.566 --> 00:03:04.748
The rules that you can set to the browser,
okay, to actually make it work.

44
00:03:04.748 --> 00:03:09.898
And, I mean, when we render this,
mostly if it's local,

45
00:03:09.898 --> 00:03:13.918
we won't really see a big difference,
okay?

46
00:03:13.918 --> 00:03:18.341
But now the browser will prerender
those URLs, and by the way,

47
00:03:18.341 --> 00:03:21.859
the browser is or
using the best effort scenario.

48
00:03:21.859 --> 00:03:24.823
So it might decide, for example,

49
00:03:24.823 --> 00:03:29.526
if you're on Chrome on Android and
you are in roaming or

50
00:03:29.526 --> 00:03:35.063
in Gigi for some reason,
it can decide not to prerender the URL.

51
00:03:35.063 --> 00:03:40.543
So it's a best case scenario,
it's not guaranteed to happen, okay?

52
00:03:40.543 --> 00:03:45.010
And the browser, when it has time and
there is nothing else to do,

53
00:03:45.010 --> 00:03:50.292
the browser will say, okay, let's go and
prerender the next two elements,

54
00:03:50.292 --> 00:03:53.967
so now it's faster,
they are already there, okay?

55
00:03:53.967 --> 00:03:58.689
So I don't have the transition here
because I don't have the Vue transition

56
00:03:58.689 --> 00:04:00.915
name, but they are already there.

57
00:04:00.915 --> 00:04:04.430
And of course, then you can go here and
say, okay, what's the possible next?

58
00:04:04.430 --> 00:04:08.323
On each HTML, you can set your own rule.

59
00:04:08.323 --> 00:04:11.374
What's the possible next
page after this one?

60
00:04:11.374 --> 00:04:15.520
Maybe the home page, well, then you
set the home page, the index.html.

61
00:04:15.520 --> 00:04:21.048
And if you're using a server side
framework or library, of course,

62
00:04:21.048 --> 00:04:27.836
you can create these speculation rules
APIs dynamically, based on rules or stats.

63
00:04:27.836 --> 00:04:30.554
They can be a stats per user,
if the user is logged in

64
00:04:30.554 --> 00:04:34.613
based on the previous navigation of
that user, blah, blah, blah, blah.

