WEBVTT

1
00:00:00.240 --> 00:00:03.312
&gt;&gt; Maximiliano Firtman: So, we're going
to start talking about the classic design

2
00:00:03.312 --> 00:00:07.750
patterns, but applied in JavaScript,
I think that part is important.

3
00:00:07.750 --> 00:00:11.450
So, these are the ones
coming from this book.

4
00:00:11.450 --> 00:00:16.080
Should I mean,
am I recommending you to read the book?

5
00:00:16.080 --> 00:00:18.732
So, I have the book, I have, actually,
I think it's the fourth edition,

6
00:00:18.732 --> 00:00:20.842
this is the first edition of the cover.

7
00:00:20.842 --> 00:00:23.746
If you read the book today, also,

8
00:00:23.746 --> 00:00:28.562
if you're a web developer,
it's hard to read, right?

9
00:00:28.562 --> 00:00:33.702
So it's really hard, it's not safe
because it's from a design point of view.

10
00:00:33.702 --> 00:00:36.832
Of course,
it's not close to the implementation.

11
00:00:36.832 --> 00:00:42.420
So you have a lot of UML, diagrams there.

12
00:00:42.420 --> 00:00:45.105
So I think it's not close
to a web developer, so

13
00:00:45.105 --> 00:00:47.870
it's not talking to a web developer,
the book.

14
00:00:47.870 --> 00:00:54.740
So I mean, if you like that stuff it's
a good book, but yeah it's hard to read.

15
00:00:54.740 --> 00:00:59.722
So typically most of these
patterns are around OOP solutions,

16
00:00:59.722 --> 00:01:03.106
Object Oriented Programming solutions,

17
00:01:03.106 --> 00:01:06.833
that we mentioned before
that in JavaScript.

18
00:01:06.833 --> 00:01:11.802
We can simulate, emulate,
use some of those ideas, but

19
00:01:11.802 --> 00:01:16.979
it's not a 100% OOP language,
which means that some of

20
00:01:16.979 --> 00:01:22.906
the solutions that are there might
not be suitable for JavaScript.

21
00:01:22.906 --> 00:01:28.496
So and there they are categorized
in creational design patterns.

22
00:01:28.496 --> 00:01:32.625
We'll get into those in a second,
and I will show you two or

23
00:01:32.625 --> 00:01:37.527
three examples of each, structural or
behavioral design pattern.

24
00:01:37.527 --> 00:01:45.407
In JavaScript, there were a lot of design
patterns that are now covered by ES6.

25
00:01:45.407 --> 00:01:49.324
So before ES6, that's 2015, before that,

26
00:01:49.324 --> 00:01:54.423
there were a lot of ideas that were
available as design patterns and

27
00:01:54.423 --> 00:01:59.522
ways to implement that, but
from ECMAScript 6, and actually for

28
00:01:59.522 --> 00:02:06.527
the New versions of ECMAScript, there are
different ways to solve the same problems.

29
00:02:06.527 --> 00:02:10.893
ECMAScript 2020, 2022 has added
a lot of features to the, for

30
00:02:10.893 --> 00:02:14.487
example, the class syntax in JavaScript.

31
00:02:14.487 --> 00:02:18.918
Also, if you wanna learn more about that,
there is a professional JavaScript course

32
00:02:18.918 --> 00:02:22.075
of Frontend Masters,
covering all these features.

33
00:02:22.075 --> 00:02:27.569
But that means that if you google, for
example, JavaScript design patterns,

34
00:02:27.569 --> 00:02:32.445
you will find a lot of solutions that
are kind of outdated these days.

35
00:02:32.445 --> 00:02:36.818
There are a lot of those blog posts
that are giving you a solution that

36
00:02:36.818 --> 00:02:40.886
will work today, but
let's say that with modern ECMAScript,

37
00:02:40.886 --> 00:02:44.649
there are better ways to
apply that design pattern.

38
00:02:44.649 --> 00:02:46.929
So have in mind that.

39
00:02:48.049 --> 00:02:52.249
And because in JavaScript there are many
ways to implement the same design pattern.

40
00:02:53.389 --> 00:02:58.047
Because JavaScript is a dynamic language,
it has this dynamic nature inside,

41
00:02:58.047 --> 00:03:02.499
that means that the same problem can
be solved in very different ways.

42
00:03:02.499 --> 00:03:06.089
And there is no best way, okay?

43
00:03:06.089 --> 00:03:09.841
So we will use one way here, but
if you don't like that way, well,

44
00:03:09.841 --> 00:03:13.995
if you understand the idea and what's
the problem we are solving and how we

45
00:03:13.995 --> 00:03:18.698
are solving the problem, go ahead and
write your own version, it's fine, okay?

46
00:03:21.048 --> 00:03:28.518
So, and I think this is another
important advice that I have for you.

47
00:03:28.518 --> 00:03:32.092
Mostly if you are searching on the web for
design patterns,

48
00:03:32.092 --> 00:03:36.808
don't implement design patterns
as if you're writing Java.

49
00:03:36.808 --> 00:03:41.896
Most of the design patterns,
including the ones in the book

50
00:03:41.896 --> 00:03:46.706
are actually targeting Java or
Java-like languages.

51
00:03:46.706 --> 00:03:52.456
Even some blog posts about web
apps are actually taking the Java

52
00:03:52.456 --> 00:03:58.076
implementation and
just emulating that in JavaScript.

53
00:03:58.076 --> 00:04:02.442
I don't think that's the best way to
implement design patterns in a web app.

54
00:04:02.442 --> 00:04:08.082
We need to take the power of
JavaScript and use it in our favor.

55
00:04:08.082 --> 00:04:13.012
Don't write JavaScript as if it's Java,
it's a general advice, but

56
00:04:13.012 --> 00:04:16.722
specifically more important
with design patterns.

