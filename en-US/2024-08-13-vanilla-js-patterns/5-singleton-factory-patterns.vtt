WEBVTT

1
00:00:00.000 --> 00:00:04.061
&gt;&gt; Maximiliano Firtman: I would give you
five or six design patterns initially and

2
00:00:04.061 --> 00:00:06.630
then we will jump into the lab.

3
00:00:06.630 --> 00:00:12.220
Okay, so we will go and
try to implement those ideas in our code.

4
00:00:12.220 --> 00:00:15.690
So, we will start talking about
the creational design patterns.

5
00:00:15.690 --> 00:00:21.441
So in this case they aim to solve the
problems associated with creating objects.

6
00:00:21.441 --> 00:00:27.013
So instead of using new, I mean new user,
instead of creating objects in that way,

7
00:00:27.013 --> 00:00:31.781
we are trying to solve the problem
to reuse existing code.

8
00:00:31.781 --> 00:00:35.761
And we wanna separate the logic of
the object from the rest of the code.

9
00:00:35.761 --> 00:00:39.919
Most of the design patterns,
not all of them, but most of them,

10
00:00:39.919 --> 00:00:45.001
at least the classic design patterns
are trying to decouple code all the time,

11
00:00:45.001 --> 00:00:46.399
decouple elements.

12
00:00:46.399 --> 00:00:51.066
So reusability has to do with
decouple the problems and

13
00:00:51.066 --> 00:00:55.129
in separate layers that
then can communicate.

14
00:00:56.909 --> 00:00:58.142
So the first one and

15
00:00:58.142 --> 00:01:03.984
some design pattern that probably you
have seen in the past is singleton, okay?

16
00:01:03.984 --> 00:01:05.194
So what's a singleton?

17
00:01:05.194 --> 00:01:09.913
The problem is to ensure that
the class has only one instance and

18
00:01:09.913 --> 00:01:12.861
provide the global point to access it.

19
00:01:12.861 --> 00:01:16.991
So the solution is to restrict
instantiation of the class to one object

20
00:01:16.991 --> 00:01:19.581
and provide the global
point to access it and

21
00:01:19.581 --> 00:01:22.792
provide a method to access this instance.

22
00:01:22.792 --> 00:01:27.664
Most of the code that you will find there
is based in Java, where, for example,

23
00:01:27.664 --> 00:01:30.937
I'm not sure how many of you
are Java developers, but

24
00:01:30.937 --> 00:01:34.102
in Java you can create
a private constructor.

25
00:01:34.102 --> 00:01:36.482
Not sure if you know that.

26
00:01:36.482 --> 00:01:39.801
And with that thing,
then you cannot create a new instance.

27
00:01:39.801 --> 00:01:43.799
From new, using new, but
that's not possible in JavaScript.

28
00:01:43.799 --> 00:01:46.636
We don't have a private constructor idea,

29
00:01:46.636 --> 00:01:50.789
so we need to use our imagination
to actually solve the problem.

30
00:01:50.789 --> 00:01:52.830
But it's actually pretty simple.

31
00:01:52.830 --> 00:01:56.109
Use cases for this,
managing a global configuration object.

32
00:01:56.109 --> 00:02:00.026
So we have a web app, we have
configuration as a current language.

33
00:02:00.026 --> 00:02:03.174
Current theme,
if the user is logged in or not.

34
00:02:03.174 --> 00:02:09.446
Well, that information should be
a singleton, should be only one instance.

35
00:02:10.786 --> 00:02:15.648
Database connection pooling, when you're
using IndexedDB or something like that,

36
00:02:15.648 --> 00:02:17.096
a login service.

37
00:02:17.096 --> 00:02:21.752
So I don't wanna have different clones,
I just wanna have one Instance of that.

38
00:02:21.752 --> 00:02:24.232
For those use cases,
you can use a singleton.

39
00:02:25.562 --> 00:02:28.630
So a state management as well.

40
00:02:28.630 --> 00:02:33.882
The state management has to do with
the state of a web app is every data,

41
00:02:33.882 --> 00:02:40.790
every information that defines how the web
app is rendered right now on the screen.

42
00:02:40.790 --> 00:02:42.477
So for that, you can use a singleton.

43
00:02:42.477 --> 00:02:46.777
So the simplest singleton that you
can create in JavaScript is just

44
00:02:46.777 --> 00:02:49.400
creating an object, a literal object.

45
00:02:50.920 --> 00:02:54.249
So sometimes we forget about this,
that we're in JavaScript,

46
00:02:54.249 --> 00:02:55.680
we can create objects.

47
00:02:55.680 --> 00:02:56.955
I don't need to always create a class.

48
00:02:56.955 --> 00:03:00.213
So when you go and read the singleton.

49
00:03:00.213 --> 00:03:05.565
Description they will say you create
the class, so you start thinking how I'm

50
00:03:05.565 --> 00:03:10.837
going to create the class then, I can well
we will do one example of that later but

51
00:03:10.837 --> 00:03:14.872
you can just go, and
create a global object and that's all.

52
00:03:14.872 --> 00:03:18.277
I mean there is only one instance of that,
so

53
00:03:18.277 --> 00:03:22.339
you cannot create a new one,
yeah you make clone it.

54
00:03:22.339 --> 00:03:26.531
But that's all, so that's a simple
singleton applied in JavaScript.

55
00:03:26.531 --> 00:03:30.938
Remember, so
use the power of JavaScript in your favor.

56
00:03:30.938 --> 00:03:33.965
Okay, a factory.

57
00:03:33.965 --> 00:03:38.607
The problem that a factory is solving
is that the object creation can become

58
00:03:38.607 --> 00:03:39.941
complex sometimes.

59
00:03:39.941 --> 00:03:42.853
So, that's why you need to
check if you have a problem and

60
00:03:42.853 --> 00:03:46.327
may involve multiple steps,
conditional logic or dependencies.

61
00:03:46.327 --> 00:03:49.913
For example, your Google Drive, so

62
00:03:49.913 --> 00:03:55.128
you have the creation of the document,
the new menu.

63
00:03:55.128 --> 00:04:00.970
And you can create a new document, a new
page-based document, a new spreadsheet.

64
00:04:00.970 --> 00:04:05.532
You can create a new slide,
like a new presentation.

65
00:04:05.532 --> 00:04:11.521
Now you can create a new code lab for
some Python code and lot of things.

66
00:04:11.521 --> 00:04:16.375
So think about the code that you have to,
on the unclick of that menu you

67
00:04:16.375 --> 00:04:20.753
have a switch saying, okay,
the conditional saying, okay.

68
00:04:20.753 --> 00:04:25.790
The user has selected that, so I need
to create a new spreadsheet document.

69
00:04:25.790 --> 00:04:31.010
So well, instead of doing that,
we can apply a factory that actually

70
00:04:31.010 --> 00:04:36.231
will encapsulate the object creation
process in a separate method or

71
00:04:36.231 --> 00:04:40.926
class, isolating it from the rest
of the application logic.

72
00:04:40.926 --> 00:04:45.725
So you will have some document
factory object, and you will say,

73
00:04:45.725 --> 00:04:51.659
you know what factory the user has just
click here, I need the document object for

74
00:04:51.659 --> 00:04:56.213
that selection, and
that class will be responsible of that.

75
00:04:56.213 --> 00:04:59.381
By the way, design patterns are not magic.

76
00:04:59.381 --> 00:05:02.322
There will be a conditional
somewhere probably.

77
00:05:02.322 --> 00:05:06.894
What we are doing is
decoupling the problem or

78
00:05:06.894 --> 00:05:13.515
the code in separate processes or
components of our app, okay?

79
00:05:13.515 --> 00:05:14.015
Make sense?

80
00:05:15.435 --> 00:05:18.365
Use cases, UI element creation,
you need to create a button.

81
00:05:18.365 --> 00:05:21.578
There are different kind of
buttons based on where you are.

82
00:05:21.578 --> 00:05:24.498
While you ask a factory,
hey, give me a button,

83
00:05:24.498 --> 00:05:29.578
instead of you creating the button with
a new keyword, right, you talk to that.

84
00:05:29.578 --> 00:05:33.608
Different types of notifications,
if you have a notification system.

85
00:05:33.608 --> 00:05:35.426
Some use cases, there are more.

86
00:05:35.426 --> 00:05:37.958
The data parsers,
you need to parse the data.

87
00:05:37.958 --> 00:05:41.089
The user is uploading a file and
you need to parse that file.

88
00:05:41.089 --> 00:05:46.034
It can be JSON, CSV,
an Excel spreadsheet, JSON file,

89
00:05:46.034 --> 00:05:50.772
the SQL file, well,
based on the file type, you ask,

90
00:05:50.772 --> 00:05:55.832
a factory, hey, give me a converter,
a parser for that.

91
00:05:55.832 --> 00:06:00.177
And this is just, I mean, from a code
point of view, there is no magic.

92
00:06:00.177 --> 00:06:01.329
It can be just the class.

93
00:06:01.329 --> 00:06:07.610
In this case, it can be the class reader.

94
00:06:07.610 --> 00:06:11.770
The class reader has a static method,
getReader, and

95
00:06:11.770 --> 00:06:17.015
based on a url, or the MIME type of
the URL, or based on the metadata,

96
00:06:17.015 --> 00:06:23.089
it will just return one of the readers,
PDFReaders, CSVReader, SQLReader.

97
00:06:23.089 --> 00:06:29.224
So then you don't, from your app,
you don't directly create the SQLReader.

98
00:06:29.224 --> 00:06:35.186
You should ask the factory, getReader, to,
hey, give me the reader I need to use.

99
00:06:35.186 --> 00:06:37.355
And then you use it.

100
00:06:37.355 --> 00:06:38.316
Okay, make sense?

101
00:06:39.336 --> 00:06:42.136
I know that if this is the first
time you are seeing design patterns.

102
00:06:42.136 --> 00:06:45.383
You see at this code and
say, that's not any magic.

103
00:06:45.383 --> 00:06:47.303
There is no magic.

104
00:06:47.303 --> 00:06:49.203
A design pattern is just a recipe.

105
00:06:49.203 --> 00:06:53.150
And probably you have used something
like that in the past, and

106
00:06:53.150 --> 00:06:56.957
maybe you didn't know that
the solution has a name factory.

