WEBVTT

1
00:00:00.000 --> 00:00:00.872
&gt;&gt; Maximiliano Firtman: Lazy sync,

2
00:00:00.872 --> 00:00:05.152
the problem is that syncing
data to the server takes time.

3
00:00:05.152 --> 00:00:07.990
It's not always possible,
because maybe the connection is down,

4
00:00:07.990 --> 00:00:10.200
the server is down, things like that.

5
00:00:10.200 --> 00:00:14.770
So lazy sync, it has other names as well.

6
00:00:14.770 --> 00:00:18.252
The solution is make all the sync
to the server asynchronously and

7
00:00:18.252 --> 00:00:19.460
detached from the UI.

8
00:00:20.925 --> 00:00:26.023
For example, I think the first web app
that I remember that was using this

9
00:00:26.023 --> 00:00:31.745
technique was Facebook, when Facebook
was the coolest social network, okay?

10
00:00:31.745 --> 00:00:35.085
So, 2006, something around that.

11
00:00:35.085 --> 00:00:40.076
It was the like button, actually,
when you were liking a post.

12
00:00:40.076 --> 00:00:46.893
It, at that time, was a surprise
to see how fast the like was.

13
00:00:46.893 --> 00:00:51.764
So you was pressing like and
the icon was changing to blue immediately.

14
00:00:51.764 --> 00:00:54.071
So you went, this is really fast.

15
00:00:54.071 --> 00:01:00.722
But actually, it wasn't waiting for
the server to accept the like,

16
00:01:00.722 --> 00:01:07.620
it was detaching the syncing that like
to the server from the actual UI.

17
00:01:07.620 --> 00:01:10.391
The next one that was doing
something similar was Gmail.

18
00:01:11.661 --> 00:01:16.271
You were sending an email and
it was gone, and you said, I'm done.

19
00:01:16.271 --> 00:01:20.663
But if you don't have connection, I'm sure
it happened to you, after a few second,

20
00:01:20.663 --> 00:01:24.329
a message will appear, you know what,
we couldn't send the message.

21
00:01:24.329 --> 00:01:26.663
So it was a reality.

22
00:01:26.663 --> 00:01:31.652
Okay, you thought that the message is
gone, it's out, but actually, it was not.

23
00:01:31.652 --> 00:01:39.052
And that's lazy sync, we detach the UI
from syncing the data to the server.

24
00:01:39.052 --> 00:01:43.268
Use cases, save data,
save analytics, downloading news, so

25
00:01:43.268 --> 00:01:47.484
then when you open the app,
it seems already fresh and updated,

26
00:01:47.484 --> 00:01:51.258
and update the app's
components in the background.

27
00:01:51.258 --> 00:01:52.527
It's also interesting.

28
00:01:52.527 --> 00:01:56.621
This has to do, for example,
to uploading the assets,

29
00:01:56.621 --> 00:02:01.151
downloading new assets,
new versions of the logo, the CSS,

30
00:02:01.151 --> 00:02:06.054
when you're doing PWA,
progressive web app, things like that.

31
00:02:06.054 --> 00:02:07.254
This is a use case.

32
00:02:07.254 --> 00:02:12.953
Another link to another Frontend Masters'
course, is you can check the JavaScript

33
00:02:12.953 --> 00:02:17.929
in the background, Frontend Masters,
of course, where I explained how

34
00:02:17.929 --> 00:02:22.851
to implement this API with service
workers and the background sync API.

35
00:02:22.851 --> 00:02:27.319
There is a background sync API that will
let you do the sync in the background,

36
00:02:27.319 --> 00:02:30.056
even if the user is not using your app.

37
00:02:30.056 --> 00:02:33.396
So you can be in a web
app doing some stuff.

38
00:02:33.396 --> 00:02:38.586
You can be saving that stuff locally, and
maybe there is no connection at that time.

39
00:02:38.586 --> 00:02:41.733
So the user will get out of there,
and it takes,

40
00:02:41.733 --> 00:02:45.051
I don't know,
the underground somewhere else.

41
00:02:45.051 --> 00:02:49.630
At some point in the future,
the device restores connection, and

42
00:02:49.630 --> 00:02:53.555
in the background,
with the browser in the background,

43
00:02:53.555 --> 00:02:57.558
your code can take action,
can wake up, can be woken up and

44
00:02:57.558 --> 00:03:02.590
say, yeah, there is something else
I need to sync, let me try now.

45
00:03:02.590 --> 00:03:05.236
And you can see that in the background,
okay?

46
00:03:05.236 --> 00:03:09.087
So check the JavaScript in
the background core for more ideas.

47
00:03:09.087 --> 00:03:11.520
The proxy pattern, actually,

48
00:03:11.520 --> 00:03:16.834
the proxy pattern is one of the classic
patterns from the Gang of Four,

49
00:03:16.834 --> 00:03:20.904
but with time,
it got more complicated, actually.

50
00:03:20.904 --> 00:03:24.915
But the idea of the problem is that we
don't have always control on the access

51
00:03:24.915 --> 00:03:28.127
to an object, including to
detect when some value changes.

52
00:03:28.127 --> 00:03:33.689
So we have an object, an array,
a configuration object, whatever,

53
00:03:33.689 --> 00:03:39.064
and how can we control who access
the data and if it change the value,

54
00:03:39.064 --> 00:03:45.686
if the value is valid or not, because
anyone can go and change the content?

55
00:03:45.686 --> 00:03:49.806
So the solution is to create
a proxy to the option.

56
00:03:49.806 --> 00:03:54.679
So fortunately for us web developers,

57
00:03:54.679 --> 00:03:58.666
we have the proxy design pattern

58
00:03:58.666 --> 00:04:03.550
implemented in modern ActionScript.

59
00:04:03.550 --> 00:04:07.783
Actually from, ES6,
we have the proxy available.

60
00:04:07.783 --> 00:04:11.460
Use cases for this, reactive programming.

61
00:04:11.460 --> 00:04:12.533
What's reactive programming?

62
00:04:12.533 --> 00:04:17.403
It's more than a design pattern,
it's more of

63
00:04:17.403 --> 00:04:23.004
a programming paradigm,
where you write some code and

64
00:04:23.004 --> 00:04:28.257
you expect the code to
change things in the future.

65
00:04:28.257 --> 00:04:30.994
Let me get out of here for a sec.

66
00:04:30.994 --> 00:04:33.049
Let me try to explain this.

67
00:04:33.049 --> 00:04:37.613
So if I have a variable a, this is
pseudocode, not real JavaScript, okay?

68
00:04:37.613 --> 00:04:38.921
Forget about Javascript.

69
00:04:38.921 --> 00:04:46.189
So I'm saying something like this,
var a =5, then I'm saying b = a+2.

70
00:04:46.189 --> 00:04:48.085
And then you change a.

71
00:04:49.365 --> 00:04:54.240
If I do console.log(b), what's the result?

72
00:04:54.240 --> 00:04:56.730
7 or 12.

73
00:04:56.730 --> 00:04:57.999
&gt;&gt; Student: 7.

74
00:04:57.999 --> 00:04:59.402
&gt;&gt; Maximiliano Firtman: 7 or 12.

75
00:04:59.402 --> 00:05:03.656
7, right?

76
00:05:03.656 --> 00:05:06.774
But actually, if it's JavaScript, it's 7,

77
00:05:06.774 --> 00:05:11.431
because JavaScript is not
a reactive programming language.

78
00:05:11.431 --> 00:05:16.644
But there are some languages
using reactive programming where

79
00:05:16.644 --> 00:05:21.654
the answer will be 12,
because what I have just said here,

80
00:05:21.654 --> 00:05:27.767
it's not a static, but it's reactive
programming, it's just a + 2.

81
00:05:27.767 --> 00:05:29.754
When you access b, it's a + 2.

82
00:05:29.754 --> 00:05:31.936
If a is 10 now, it's 12.

83
00:05:31.936 --> 00:05:34.943
I know that for some of you,
it doesn't make any sense, but

84
00:05:34.943 --> 00:05:37.058
it's just a different paradigm, okay?

85
00:05:37.058 --> 00:05:41.907
It's a completely different paradigm
of programming languages that gives me

86
00:05:41.907 --> 00:05:43.163
12 instead of 7.

87
00:05:43.163 --> 00:05:48.015
Well, you can implement some of these
ideas of reactive programming using

88
00:05:48.015 --> 00:05:49.624
the proxy, okay?

89
00:05:49.624 --> 00:05:53.730
Not exactly that syntax,
but the idea, okay?

90
00:05:57.084 --> 00:05:59.981
&gt;&gt; Maximiliano Firtman: Another use
case is adding a security layer on top

91
00:05:59.981 --> 00:06:03.806
of objects to check who is accessing,
how the data is changing.

92
00:06:03.806 --> 00:06:09.142
For example, if there is a cross-site
scripting problem going on,

93
00:06:09.142 --> 00:06:14.662
now in the near future, that browsers
will implement local AI models,

94
00:06:14.662 --> 00:06:18.086
LLM models that you can run locally.

95
00:06:18.086 --> 00:06:23.171
You can use this to actually pass
the data through LLM locally and

96
00:06:23.171 --> 00:06:28.727
see if the LLM is finding anything
weird or anything to worry about that

97
00:06:28.727 --> 00:06:33.738
change that might involve a security
risk or things like that.

98
00:06:33.738 --> 00:06:36.860
Also to logging all access
to important objects.

99
00:06:36.860 --> 00:06:38.882
This is useful for debugging.

100
00:06:38.882 --> 00:06:43.437
Every time you make a change, you log,
who changed the data, what's the previous

101
00:06:43.437 --> 00:06:48.553
value, what's the current value, what
time, what's the call stack, wherever?

102
00:06:48.553 --> 00:06:53.635
Okay, and you can end up with
a proxy that happens automatically,

103
00:06:53.635 --> 00:06:56.833
even without the user's intervention.

104
00:06:56.833 --> 00:07:00.226
That's part of the deal of a proxy,
that you talk to an object, or

105
00:07:00.226 --> 00:07:04.380
you think it's the object and you don't
know that it's going through a proxy.

106
00:07:04.380 --> 00:07:07.428
It's like someone in the middle ,okay?

107
00:07:07.428 --> 00:07:10.626
For more information
on the topic of proxy,

108
00:07:10.626 --> 00:07:14.428
check the Vanilla JS You Might Not Need
a Framework,

109
00:07:14.428 --> 00:07:19.702
a workshop where we cover also proxies
with more details in ECMAScript,

110
00:07:19.702 --> 00:07:23.263
and also how to use it for
reactive programming.

111
00:07:23.263 --> 00:07:25.588
&gt;&gt; Student: With
the promisified data pattern,

112
00:07:25.588 --> 00:07:30.013
we talked briefly about how there's
just such a marginal performance

113
00:07:30.013 --> 00:07:34.373
overhead that it usually doesn't
hurt to implement it everywhere.

114
00:07:34.373 --> 00:07:38.582
Is there something analogous for
the proxy pattern where like, yeah,

115
00:07:38.582 --> 00:07:43.052
it doesn't hurt, just use a proxy for
everything cuz you might need it later, or

116
00:07:43.052 --> 00:07:43.875
is it-
&gt;&gt; Maximiliano Firtman: Well,

117
00:07:43.875 --> 00:07:48.369
you do have a performance penalty because
you will have two objects now instead of

118
00:07:48.369 --> 00:07:52.414
one, and every call, every getter and
setter goes through something.

119
00:07:52.414 --> 00:07:58.674
Of course, if you're calling an LLM model
for every change, yeah, it will take time.

120
00:07:58.674 --> 00:08:02.042
Is it separate power that's going on?

121
00:08:02.042 --> 00:08:03.658
Of course, so you do have.

122
00:08:03.658 --> 00:08:08.395
So, yeah, you don't wanna implement
the design pattern on every variable,

123
00:08:08.395 --> 00:08:10.272
on every object that you have.

124
00:08:10.272 --> 00:08:15.455
So that's why we need to remember
to implement design patterns if

125
00:08:15.455 --> 00:08:21.862
it's solving a problem and if the context
matches with my current context.

126
00:08:21.862 --> 00:08:29.231
So you will apply a proxy only on some
special parts of your app that make sense.

127
00:08:29.231 --> 00:08:33.780
You don't wanna apply a proxy everywhere
because it doesn't make too much sense

128
00:08:33.780 --> 00:08:35.607
&gt;&gt; Student: That makes sense, thanks.

129
00:08:35.607 --> 00:08:41.616
&gt;&gt; Maximiliano Firtman: Okay, and
another one is called middleware.

130
00:08:42.806 --> 00:08:46.446
It's a standard design pattern that
probably you have seen before.

131
00:08:46.446 --> 00:08:50.466
Mostly if you are a Node.js developer and
you're using Express.js,

132
00:08:50.466 --> 00:08:52.811
there are a lot of middlewares there, but

133
00:08:52.811 --> 00:08:56.833
that's not the only place where this
design pattern was implemented.

134
00:08:56.833 --> 00:09:00.458
The problem to solve is handling
tasks that affect multiple parts of

135
00:09:00.458 --> 00:09:04.032
the application, logging,
security checks, error handling.

136
00:09:04.032 --> 00:09:08.167
Authentication is difficult, and
it's also difficult to remember, hey,

137
00:09:08.167 --> 00:09:11.091
remember that every time you
need to go to the network,

138
00:09:11.091 --> 00:09:13.393
you need to check if
we do have connection.

139
00:09:13.393 --> 00:09:17.593
You need to check if the token, the user
authentication token, is not expired.

140
00:09:17.593 --> 00:09:22.293
You need to check that the user
is not trying to send weird

141
00:09:22.293 --> 00:09:27.627
characters that can lead into
SQL injection or wherever.

142
00:09:27.627 --> 00:09:29.527
You need to check, you need to log.

143
00:09:29.527 --> 00:09:32.011
So you need to remember that
every time that you call an API,

144
00:09:32.011 --> 00:09:34.167
you need to remember all those tasks.

145
00:09:34.167 --> 00:09:38.938
So remembering those things and
reinforcing those things is complicated.

146
00:09:38.938 --> 00:09:43.811
So to solve the problem,
to avoid forgetting about all those rules,

147
00:09:43.811 --> 00:09:49.273
the solution is to insert layer of
processing between the initial request and

148
00:09:49.273 --> 00:09:50.800
the final response.

149
00:09:50.800 --> 00:09:52.458
So I wanna call an API.

150
00:09:53.468 --> 00:09:56.430
If you implement the middleware pattern,

151
00:09:56.430 --> 00:10:00.190
you just call the API processor,
nothing else.

152
00:10:00.190 --> 00:10:03.020
Someone has said
middlewares in the middle.

153
00:10:03.020 --> 00:10:07.991
Middlewares are objects in the middle
that each one is taking a request,

154
00:10:07.991 --> 00:10:13.500
doing stuff, and making a response with
the same type of the initial request.

155
00:10:13.500 --> 00:10:17.446
So it's like the request is processed,
that creates another request that is

156
00:10:17.446 --> 00:10:20.683
processed, creates another
request that is processed.

157
00:10:20.683 --> 00:10:23.635
Everyone in the middle is
maybe changing the request,

158
00:10:23.635 --> 00:10:26.343
upgrading, decorating the request,
and so on.

159
00:10:26.343 --> 00:10:28.202
That's kind of the idea of a middleware.

160
00:10:28.202 --> 00:10:35.953
Use cases, API access, database access
are the pretty common scenario here, okay?

161
00:10:37.023 --> 00:10:42.049
So those are, again, just some
design patterns for data management,

162
00:10:42.049 --> 00:10:45.840
not all of them,
because there are hundreds of them.

