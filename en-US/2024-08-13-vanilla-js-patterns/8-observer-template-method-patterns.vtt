WEBVTT

1
00:00:00.120 --> 00:00:02.914
&gt;&gt; Maximiliano Firtman: Now, those words
were just examples for a structural.

2
00:00:02.914 --> 00:00:06.743
Now, let's see some behavioral design
patterns before actually applying

3
00:00:06.743 --> 00:00:08.440
them, okay?

4
00:00:08.440 --> 00:00:10.472
So some behavioral design patterns.

5
00:00:10.472 --> 00:00:14.871
They deal with object interaction and
responsibility distribution.

6
00:00:14.871 --> 00:00:20.648
So, in this case,
it's about object cooperation, okay?

7
00:00:20.648 --> 00:00:25.672
Sometimes it's difficult to categorize
them because when you think about that,

8
00:00:25.672 --> 00:00:29.188
is that behavioral,
is that creational, structural?

9
00:00:29.188 --> 00:00:33.423
I think that creational is pretty clear.

10
00:00:33.423 --> 00:00:38.388
Between structure and behavioral, it's not
so clear which one applies, but anyway.

11
00:00:38.388 --> 00:00:44.156
Observer, and I'm 100% sure you
have already used this pattern.

12
00:00:45.376 --> 00:00:50.303
The problem is to allow an object
known as the subject to notify other

13
00:00:50.303 --> 00:00:54.019
objects known as the observers
about changes in its

14
00:00:54.019 --> 00:00:58.896
state without requiring
them to be tightly coupled.

15
00:00:58.896 --> 00:01:03.590
So solution,
the subject has a list of observers and

16
00:01:03.590 --> 00:01:06.800
notifies them of any state change.

17
00:01:08.230 --> 00:01:11.059
Why did I say that you
have already used this?

18
00:01:11.059 --> 00:01:14.809
Every time you have used onclick or
addEventListener,

19
00:01:14.809 --> 00:01:17.450
that's an observer implementation.

20
00:01:18.640 --> 00:01:23.604
So in this case, you wanna listen for
changes in that object,

21
00:01:23.604 --> 00:01:26.953
and that object doesn't know about you.

22
00:01:26.953 --> 00:01:28.660
It doesn't know who you are.

23
00:01:28.660 --> 00:01:34.748
You are just saying, hey, when you
have something to notify me, call me.

24
00:01:34.748 --> 00:01:37.363
When there is a change in your state,
call me.

25
00:01:37.363 --> 00:01:41.923
And the other part is just taking note of,
okay, I need to call you,

26
00:01:41.923 --> 00:01:46.414
I need to call you, I need to call you,
and you will call your code.

27
00:01:46.414 --> 00:01:50.104
Use cases, event handlers,
that's the most simple one.

28
00:01:50.104 --> 00:01:53.514
Real-time notifications and UI updates.

29
00:01:53.514 --> 00:01:54.485
Yeah?

30
00:01:54.485 --> 00:01:58.653
&gt;&gt; Speaker 2: How does the observer
pattern differ, if at all,

31
00:01:58.653 --> 00:02:00.743
from a pub/sub system?

32
00:02:00.743 --> 00:02:02.655
Or is a pub/sub system
just a version of it?

33
00:02:02.655 --> 00:02:05.895
&gt;&gt; Maximiliano Firtman: Publish/subscribe,
pub/sub,

34
00:02:05.895 --> 00:02:09.775
is just another name for observer.

35
00:02:09.775 --> 00:02:11.290
So it's actually the same design pattern.

36
00:02:11.290 --> 00:02:11.819
&gt;&gt; Speaker 2: Gotcha.

37
00:02:11.819 --> 00:02:13.233
&gt;&gt; Maximiliano Firtman: It has two names.

38
00:02:13.233 --> 00:02:17.642
So it's publisher/subscriber, or
observer, it's just the same name, okay?

39
00:02:17.642 --> 00:02:22.097
And we will apply an observer in
a couple of days minutes in our version.

40
00:02:23.177 --> 00:02:25.397
But typically, it looks like this.

41
00:02:25.397 --> 00:02:28.927
If you wanna create it in your code,
you have a class.

42
00:02:28.927 --> 00:02:31.121
The class has a list of observers.

43
00:02:31.121 --> 00:02:31.930
It can be an array.

44
00:02:31.930 --> 00:02:35.027
I'm using a set here that is
not accepting duplicates.

45
00:02:35.027 --> 00:02:35.979
That's the difference.

46
00:02:35.979 --> 00:02:38.652
And you have addObserver, removeObserver.

47
00:02:38.652 --> 00:02:43.454
It's like addEventListener,
removeEventListener from the DOM, okay?

48
00:02:43.454 --> 00:02:48.838
And then notifyObservers that it's just
looping through all the observers and

49
00:02:48.838 --> 00:02:51.336
just notify them, and that's all.

50
00:02:51.336 --> 00:02:57.059
And then subjects will just
add themselves as observers or

51
00:02:57.059 --> 00:03:00.106
add a function as an observer.

52
00:03:00.106 --> 00:03:01.452
Again, addEventListener.

53
00:03:01.452 --> 00:03:04.880
So if you have ever played
with addEventListener,

54
00:03:04.880 --> 00:03:09.355
that's actually the observer
implemented in the DOM API, okay?

55
00:03:09.355 --> 00:03:11.261
Makes sense?

56
00:03:11.261 --> 00:03:16.156
Template method, the idea is to define
the skeleton of an algorithm that

57
00:03:16.156 --> 00:03:19.134
will change on different implementation.

58
00:03:19.134 --> 00:03:24.219
And, I mean,
the definition is not so clear.

59
00:03:24.219 --> 00:03:29.035
But, actually,
if you have ever played with OOP and

60
00:03:29.035 --> 00:03:33.854
polymorphism, we are just
talking about that, but

61
00:03:33.854 --> 00:03:36.933
from a behavioral point of view.

62
00:03:36.933 --> 00:03:40.855
So the idea is that data processing,
so I have some data,

63
00:03:40.855 --> 00:03:45.619
I need to process the data, but
I don't know how, I don't care how.

64
00:03:45.619 --> 00:03:48.320
Each implementation
will take care of that.

65
00:03:48.320 --> 00:03:54.910
So the idea of abstract classes,
okay, is the way to go here.

66
00:03:54.910 --> 00:03:58.140
But we don't have abstract
classes in JavaScript.

67
00:03:58.140 --> 00:04:01.345
There is nothing similar
to an abstract class, so

68
00:04:01.345 --> 00:04:05.388
we have to use some imagination
to actually get there.

69
00:04:05.388 --> 00:04:09.717
Form validation is another use case for
this.

70
00:04:09.717 --> 00:04:10.809
It typically looks like this.

71
00:04:10.809 --> 00:04:13.477
Let's say we have a data processor,
and we know

72
00:04:13.477 --> 00:04:17.830
that the data processor should load data,
process the data, and save data.

73
00:04:17.830 --> 00:04:24.731
But at the class DataProcessor,
I don't add any code.

74
00:04:24.731 --> 00:04:28.840
So if I execute that to over
a DataProcessor, it's not gonna work.

75
00:04:28.840 --> 00:04:32.181
I will get an exception,
because loadData doesn't exist.

76
00:04:32.181 --> 00:04:33.310
It's not a function.

77
00:04:33.310 --> 00:04:38.023
But then, I have subclasses that
will implement those methods.

78
00:04:38.023 --> 00:04:43.831
So then I'm forced to use
one of the subclasses.

79
00:04:43.831 --> 00:04:48.160
And of course, we have several subclasses
with different implementations.

80
00:04:48.160 --> 00:04:52.644
This is just OOP, okay, in action,
nothing really important.

