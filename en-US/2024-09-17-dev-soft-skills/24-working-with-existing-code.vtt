WEBVTT

1
00:00:00.243 --> 00:00:05.601
&gt;&gt; Francesca Sadikin: In our exercise,
we had the easy example of working with

2
00:00:05.601 --> 00:00:11.196
existing code because
the requirements were given to us.

3
00:00:11.196 --> 00:00:12.764
It's much easier to refactor and

4
00:00:12.764 --> 00:00:16.189
do all these codes when we actually
know what that code is supposed to do.

5
00:00:16.189 --> 00:00:21.067
But in a real company, that's actually
the hard part [LAUGH] is like you

6
00:00:21.067 --> 00:00:25.295
come into the code and you're like,
what does this code do?

7
00:00:25.295 --> 00:00:27.054
What's going on?

8
00:00:27.054 --> 00:00:32.103
And so,
there are little techniques to help

9
00:00:32.103 --> 00:00:37.429
you ramp up on what that
code is supposed to do.

10
00:00:37.429 --> 00:00:41.662
As you saw, I use a debugger to,
like, resolve a problem.

11
00:00:41.662 --> 00:00:46.903
You can also use the debugger
to help you understand from your

12
00:00:46.903 --> 00:00:54.116
entry point what that little piece of code
does and its relationship to other code.

13
00:00:54.116 --> 00:00:56.036
As you saw writing test.

14
00:00:56.036 --> 00:00:59.969
So writing test against that system, like
giving it lots of different parameters

15
00:00:59.969 --> 00:01:03.449
trying to understand Understand what
it's doing is also very helpful.

16
00:01:03.449 --> 00:01:07.324
And then just a recap of Chester since
fence, which is a way of saying don't

17
00:01:07.324 --> 00:01:11.212
change code unless you really understand
what it's doing, [LAUGH] right?

18
00:01:11.212 --> 00:01:15.831
Don't just delete code unless you
a 100% sure you know what it's doing.

19
00:01:17.726 --> 00:01:22.203
&gt;&gt; Francesca Sadikin: Okay, clear
debugging process, whether you're fixing

20
00:01:22.203 --> 00:01:27.511
a code, a bug or you're just trying
to understand what's going on.

21
00:01:27.511 --> 00:01:32.898
It's important to have a clear
process to help you unblock yourself.

22
00:01:32.898 --> 00:01:37.168
If you don't have a process as
unlike when you get frustrated and

23
00:01:37.168 --> 00:01:41.924
you just start like, let me try a bunch
of different things, like I do.

24
00:01:41.924 --> 00:01:45.410
Let me show you something
that has been helpful for

25
00:01:45.410 --> 00:01:48.403
me to try to remember when I'm panicking.

26
00:01:48.403 --> 00:01:52.556
So, first,
you gotta have clear intentions, right?

27
00:01:52.556 --> 00:01:57.297
If you're in the mental state of extreme,
like frustration,

28
00:01:57.297 --> 00:02:00.525
and you don't even have a hypothesis yet.

29
00:02:00.525 --> 00:02:02.518
You're just trying a bunch of things.

30
00:02:02.518 --> 00:02:07.881
It's just time to take a break,
you won't be able

31
00:02:07.881 --> 00:02:12.872
to understand your code
in that mental state.

32
00:02:12.872 --> 00:02:16.589
I usually like to walk
through the code line by line

33
00:02:16.589 --> 00:02:21.200
to check every single assumption
that I making on every line.

34
00:02:21.200 --> 00:02:24.399
I'm like, okay, it says it's doing this,

35
00:02:24.399 --> 00:02:27.608
I expect it's going to
be here at this point.

36
00:02:27.608 --> 00:02:28.910
Using console logs.

37
00:02:28.910 --> 00:02:31.489
But if you're using
more than four to five,

38
00:02:31.489 --> 00:02:35.823
it's time to use the debugger again
to try to figure out what's going on.

39
00:02:35.823 --> 00:02:37.587
Number four is actually my biggest tip.

40
00:02:37.587 --> 00:02:40.813
This sounds really, really dumb,
but if you're facing problem, and

41
00:02:40.813 --> 00:02:43.412
you can't figure out where
the hell this is coming from.

42
00:02:43.412 --> 00:02:47.748
I just start commenting out code,
just I'm like, comment out code.

43
00:02:47.748 --> 00:02:48.882
Did the bug disappear?

44
00:02:48.882 --> 00:02:51.754
No.
Keep commenting out more, and more, and

45
00:02:51.754 --> 00:02:54.181
more code until the problem disappears.

46
00:02:54.181 --> 00:02:56.326
And I'm like, ha, there it is.

47
00:02:56.326 --> 00:02:59.459
And I start reintroducing
code slowly to try and

48
00:02:59.459 --> 00:03:02.913
figure out the general area
of where the problem is.

49
00:03:02.913 --> 00:03:07.373
And then I use the assumptions,
console logs, debuggers,

50
00:03:07.373 --> 00:03:12.106
then in that more specific area
to understand what's going on.

51
00:03:12.106 --> 00:03:15.029
Number 5 is to use
essentially a rubber ducky,

52
00:03:15.029 --> 00:03:18.911
whether you're talking to another person,
your pet, a toy.

53
00:03:18.911 --> 00:03:23.658
Just somehow the act of
explaining it out verbally helps

54
00:03:23.658 --> 00:03:27.597
you catch maybe assumptions
you are making and

55
00:03:27.597 --> 00:03:32.348
gives you little insights to
figure out what to do next.

56
00:03:32.348 --> 00:03:38.198
Ask for help, and if you don't have anyone
to help you, none of this is working.

57
00:03:38.198 --> 00:03:43.074
Time to take a mental break,
walk, naps, eat and try again.

58
00:03:46.404 --> 00:03:47.297
&gt;&gt; Francesca Sadikin: Okay, so

59
00:03:47.297 --> 00:03:52.218
that was the wrap up of our
super technical portion.

60
00:03:52.218 --> 00:03:55.956
I have these recommended resources.

61
00:03:55.956 --> 00:04:00.901
So as I mentioned before,
Clean Code is just a standard engineering

62
00:04:00.901 --> 00:04:04.645
handbook that most engineers
find really useful.

63
00:04:04.645 --> 00:04:08.283
It goes into Clean Code tactics in detail.

64
00:04:08.283 --> 00:04:14.855
Practical object oriented design and
agile primer using Ruby by Sandy Metz.

65
00:04:14.855 --> 00:04:21.208
So, if you are interested in
learning the solid principles.

66
00:04:21.208 --> 00:04:26.719
So this is another, like, Clean Code thing
where these principles I find actually

67
00:04:26.719 --> 00:04:32.011
helps you architect code like architect
systems in a clean and extendable way.

68
00:04:32.011 --> 00:04:36.640
I really like her book because
she explains it very, very well.

69
00:04:36.640 --> 00:04:40.849
It is in Ruby, but
Ruby is a very readable language, and

70
00:04:40.849 --> 00:04:46.044
I actually apply the same learnings
in every language that I work in,

71
00:04:46.044 --> 00:04:49.109
not just object-oriented languages.

