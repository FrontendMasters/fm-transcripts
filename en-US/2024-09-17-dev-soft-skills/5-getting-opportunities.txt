[00:00:00]
>> Francesca Sadikin: So we've covered how to prepare yourself to succeed as a software engineer. Now let's build on all that hard work by focusing on opportunities now. Like I mentioned in the beginning of this course, when people see this quote, luck is where opportunity meets preparation. Think people focus on the preparation part, right?

[00:00:20]
Thinking that opportunities are just things that happen and all of our hard work takes advantage of the opportunity. But I believe that opportunities like preparation should also be paid attention to. But first you might be wondering why are opportunities even important in summary, opportunities allow you to showcase your skills.

[00:00:46]
What you learn from these experiences contributes to your growth as an engineer. You can say it another way, you have to show don't tell an engineer might claim they have the skills of a higher level engineer. But people will not believe you unless they can see that you have experienced it in some way.

[00:01:07]
It's the proof through experience that truly convinces others of the abilities.
>> Francesca Sadikin: So we now understand why opportunities matter. What if I told you, you can actually increase your own opportunities. That would mean that between preparation and opportunities, you're creating your own luck, which means you can foster your own success.

[00:01:35]

>> Francesca Sadikin: Just a little side note, to be clear, you can completely grow your career without intentionally fostering opportunities. It is just going to be most likely a slower path. So intentionally fostering opportunities just helps you grow faster.
>> Francesca Sadikin: All right, so, how do you increase opportunities. This is a question prompt for the audience.

[00:02:08]

>> Francesca Sadikin: How do you increase opportunities? Go ahead.
>> Speaker 2: You can leverage on them, on other senior developers knowledge of collaboration. You leverage on the people you collaborate with their skills.
>> Francesca Sadikin: Yes, leverage their skills, okay. How do you how do you get more opportunities to come your way?

[00:02:30]

>> Speaker 3: Network.
>> Francesca Sadikin: Networking, yes okay.
>> Speaker 3: Deliver on time, I always say if somebody gives you a responsibility and you meet that responsibility time and time again, you're gonna build this incredible amount of trust.
>> Francesca Sadikin: Yes.
>> Speaker 3: And as you build that trust with whether it's through your existing job or previous jobs or side jobs or whatever it is.

[00:02:59]
If you become the person that's reliable and trustworthy, I feel like that carries out word. Because when somebody is, hey, do you know of a great X, whatever it is, in this case, developer, you're the name that's always brought to the table. Because you're the one that delivers and communicates well along the way.

[00:03:23]

>> Speaker 2: Yes, well, you can teach this course [LAUGH] cuz that is my answer.
>> Francesca Sadikin: Yes, so some people also said networking, but networking is a little too abstract. The real answer is what you just said right now. It's about relationships of trust with those around you. That is how you increase opportunities.

[00:03:44]
So given this answer, you might be wondering, why are we focusing on relationships in a software engineering course, right? And I used to think the same way, when I was younger, I just thought that I just needed to work really hard, deliver really good quality code. I don't have to care about networking, relationships, building good rapport with people.

[00:04:08]
And somehow I would still be able to grow as an engineer. But over time, I learned that opportunities don't just come from the quality of your technical skills, they come from the relationships you build. So let me explain through a story about John. John is an incredibly talented engineer who was known for his dedication and hard work.

[00:04:32]
He would always arrive early, leave late, and consistently deliver really good quality code. On the surface, John was the ideal engineer. But despite his skills and how hard he worked, he never seemed to get the big projects that lead to career growth, why? Because John didn't get along with his manager, he always wanted to be right.

[00:04:58]
He always insisted on doing things his way, even when the team had already made a different decision. So for example, during a project to build a calculator, the team agreed on one solution but he ignored it, completely implemented his own. Incidents like these, eventually broke down his relationships with his manager, who began to question John's ability to collaborate and follow directions.

[00:05:28]
And over time, if you started to see that, right? Cuz John started to find himself being assigned smaller and smaller projects being assigned away from the big projects. He was being sidelined, not because he wasn't talented, but because his manager just did not trust him. And it wasn't just the manager, the other teammates started to feel the same way.

[00:05:54]
John's behavior, though subtle, signaled to everybody. That he could not be relied on for the big collaborative projects that require trust and teamwork. It's important to note that John wasn't intentionally trying to be difficult, that his actions created an environment where people didn't wanna work with him. They felt that working with John would mean more problems and more conflict, which ultimately led to fewer and fewer opportunities for John.

[00:06:25]
John's story illustrates a crucial point. You can be an amazing coder, but if you don't build trust with the people around you. You won't be given the opportunities that lead to career growth. Just remember that as projects become larger and more complex, they require more collaboration because there's just so many more people that needs to be involved.

[00:06:47]
And if you're not someone who can be trusted to work well with others, you're gonna find yourself stuck on the sidelines, possibly facing career stagnation.
>> Francesca Sadikin: Yes.
>> Speaker 3: A few folks online chimed in and said, ask for opportunities.
>> Speaker 2: If you are at work, you can ask for tickets without waiting for them to be given to you.

[00:07:12]

>> Francesca Sadikin: Yes, that's another great way to also slowly expand your responsibilities. Yes, so you might be thinking, I'm not like John, I'm not aggressive or arrogant. But even small actions, what we might call microaggressions or trust busters can have a similar impact over time. Maybe you cut people off in meetings, or you keep mispronouncing someone's name, or you're quick to dismiss others' ideas.

[00:07:44]
These behaviors, even if unintentional, can erode trust over time and when trust starts to slip. So the opportunities that you see. So it's about fostering a culture where everybody wins, this means creating a safe environment where no one is thrown under the bus and everyone's brought to the finish line together.

[00:08:05]
By avoiding judging, blaming or shaming, you also contribute to this team dynamic that builds trust, and people can sense that, and they'll want to work with you so. That's the end of this first story, [LAUGH] what do you guys think? Do you relate or do you disagree? Yes.

[00:08:29]

>> Speaker 2: Yeah, if I can use mine as a scenario, I just finished with my supervisor. I'm leading a project and he's trying to tell me, if you have an idea as a project lead, try to keep it and let others throw their ideas in first, so that the part of the whole thing.

[00:08:50]
So I don't place my ideas first eventually, I might amend it or probably use my own idea, but I shouldn't always come with my idea first. I should let them feel part of the whole thing. So,
>> Francesca Sadikin: Yeah,
>> Speaker 2: I can [CROSSTALK]
>> Francesca Sadikin: Yes, you're creating space for others to join in, right?

[00:09:08]
Yes, so they feel comfortable. Okay, was this story obvious?
>> [LAUGH]
>> Speaker 3: A few comments from online, trust is as fragile as a plain sheet of paper. Once the paper is crumpled up, it can never be the same again. I use this analogy to reduce toxicity in the teams I work with.

[00:09:31]

>> Francesca Sadikin: Yes. Once you have that trust, it is very, once you lose it, it's harder to build it back. Yes.
>> Speaker 3: And then Zach says, 100% agree that you can be a great coder but a bad software engineer.
>> Francesca Sadikin: Yes, and it will limit your opportunities in your career eventually.

