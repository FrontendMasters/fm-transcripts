WEBVTT

1
00:00:00.093 --> 00:00:01.885
&gt;&gt; Francesca Sadikin: Just
a little bit of a recap,

2
00:00:01.885 --> 00:00:07.140
why do I think test driven development is
something that everyone should focus on.

3
00:00:07.140 --> 00:00:11.563
You saw changing code is just safer.

4
00:00:11.563 --> 00:00:13.771
You don't have to worry.

5
00:00:13.771 --> 00:00:17.731
As I was making mistakes like syntax
issues or logic issues, I just looked over

6
00:00:17.731 --> 00:00:21.276
to my test suite and immediately told me,
nope, that wasn't right.

7
00:00:21.276 --> 00:00:24.770
I'm like, okay, got it,
let me look, right?

8
00:00:24.770 --> 00:00:28.641
It leads to simpler solutions.

9
00:00:28.641 --> 00:00:32.996
You notice that I didn't
pre plan a ton of the code?

10
00:00:32.996 --> 00:00:38.490
I was just focusing on one little bit at
a time, and then once I saw an opportunity

11
00:00:38.490 --> 00:00:43.749
to refactor, cuz I saw like, duplication
happening then I made that move.

12
00:00:43.749 --> 00:00:47.633
This usually leads to simpler code.

13
00:00:47.633 --> 00:00:51.675
It's easier to solve because you're
breaking down a problem into

14
00:00:51.675 --> 00:00:56.376
smaller pieces, and then it's also
less bugs, which makes sense, right?

15
00:00:56.376 --> 00:01:01.380
Because you have an immediate signal
every time you introduce an issue,

16
00:01:01.380 --> 00:01:05.162
you only just wrote five to
ten pieces of lines of code.

17
00:01:05.162 --> 00:01:09.921
You can easily figure out where in that
five to ten lines of code you just

18
00:01:09.921 --> 00:01:11.301
added the problem.

19
00:01:14.168 --> 00:01:19.004
&gt;&gt; Francesca Sadikin: I do wanna say
that I think tests are powerful if

20
00:01:19.004 --> 00:01:20.745
you do it right.

21
00:01:20.745 --> 00:01:27.111
But, what you will see in the workplace,
in true engineering companies,

22
00:01:27.111 --> 00:01:32.164
is that everyone knows that
they're supposed to do it, but

23
00:01:32.164 --> 00:01:38.242
no one actually does it, or
they're not [LAUGH] enthusiastic about it.

24
00:01:38.242 --> 00:01:43.159
It's like kind of like this pain in the
butt that they have to just check off when

25
00:01:43.159 --> 00:01:44.435
they do their work.

26
00:01:44.435 --> 00:01:48.980
And I think that a lot of
these places are actually just

27
00:01:48.980 --> 00:01:53.828
doing [LAUGH] it wrong, and
that's why it's so painful.

28
00:01:53.828 --> 00:01:59.533
Some of the reasons are because the tests
were written as an afterthought, right?

29
00:01:59.533 --> 00:02:05.209
So if you write code, there's like
all this old code, they have no test,

30
00:02:05.209 --> 00:02:10.247
sometimes when you try to add
code afterwards, it's just very,

31
00:02:10.247 --> 00:02:15.951
very complicated because that code
wasn't written in a way to be tested.

32
00:02:15.951 --> 00:02:20.901
And so you have really complex
tests that are also very

33
00:02:20.901 --> 00:02:25.423
brittle trying to inject
itself into this code.

34
00:02:25.423 --> 00:02:28.438
I think that a lot of tests
are also testing the wrong thing.

35
00:02:28.438 --> 00:02:31.644
It's testing implementation details.

36
00:02:31.644 --> 00:02:35.771
So, this is kind of covered together
with the test coverage percentage.

37
00:02:35.771 --> 00:02:39.900
I think people get very caught up with,
hey, I wanna write tests.

38
00:02:39.900 --> 00:02:43.819
Let's make sure that we
have over 80% coverage, or

39
00:02:43.819 --> 00:02:48.163
it's about a number, but
you've gotta remember that tests

40
00:02:48.163 --> 00:02:52.860
are meant to serve as a signal
whether something is broken or not.

41
00:02:52.860 --> 00:02:56.416
And so if you get overly focused
on just writing tests for

42
00:02:56.416 --> 00:02:58.383
the sake of writing tests, and

43
00:02:58.383 --> 00:03:03.547
you're adding all this stuff without
really thinking is this actually useful?

44
00:03:03.547 --> 00:03:09.601
It is like a burden for other engineers
to maintain all of these tests, right?

45
00:03:09.601 --> 00:03:14.764
The worst ones are, for example,
you are testing implementation details,

46
00:03:14.764 --> 00:03:20.336
which means that if someone refactors that
code, all of these tests are breaking.

47
00:03:20.336 --> 00:03:23.365
But the functionality still works, right?

48
00:03:23.365 --> 00:03:27.193
Over time, engineers are going
to start ignoring those

49
00:03:27.193 --> 00:03:32.009
test signals because they're not
actually saying anything useful.

50
00:03:32.009 --> 00:03:38.596
&gt;&gt; Speaker 2: If you can get TDD
mandatory on a software development team,

51
00:03:38.596 --> 00:03:42.740
would you still need a manual QA team.

52
00:03:44.661 --> 00:03:46.285
&gt;&gt; Francesca Sadikin: I think so.

53
00:03:46.285 --> 00:03:50.525
I'm just thinking about, like,
how my company works right now.

54
00:03:50.525 --> 00:03:56.171
We have a lot of tests, but the QA
are also working with us as a partner

55
00:03:56.171 --> 00:04:01.540
to think about edge conditions
that we may not have considered.

56
00:04:01.540 --> 00:04:04.924
&gt;&gt; Speaker 2: Yeah, I answered that,
which is yes, of course, you need it,

57
00:04:04.924 --> 00:04:07.009
but it'll make their job much easier.

58
00:04:07.009 --> 00:04:08.071
&gt;&gt; Francesca Sadikin: Easier, yeah.

59
00:04:08.071 --> 00:04:12.030
&gt;&gt; Speaker 2: Constantly not having to
look for regressions as you're adding new

60
00:04:12.030 --> 00:04:15.369
features, because your team
has proper tests in place.

61
00:04:15.369 --> 00:04:18.038
&gt;&gt; Francesca Sadikin: Yes, and
I think the common mistake here is also

62
00:04:18.038 --> 00:04:20.707
thinking that if you have QA,
you don't have to

63
00:04:20.707 --> 00:04:25.133
think about tests as much cuz you're
gonna give that responsibility to them.

64
00:04:25.133 --> 00:04:26.039
I think that's a mistake.

65
00:04:26.039 --> 00:04:30.751
I think engineers should also think
about as many conditions as we can and

66
00:04:30.751 --> 00:04:33.541
then partner with the QA to identify more.

67
00:04:37.709 --> 00:04:42.519
&gt;&gt; Francesca Sadikin: So, tips for
learning Test-Driven-Development.

68
00:04:42.519 --> 00:04:45.497
It's harder than it seems, right?

69
00:04:45.497 --> 00:04:49.688
I remember the first few months trying
to learn test-driven- development.

70
00:04:49.688 --> 00:04:54.501
The hardest thing was breaking the habit
of trying to pre-plan your code.

71
00:04:54.501 --> 00:04:57.551
I think,
when a lot of us are learning how to code,

72
00:04:57.551 --> 00:05:02.142
someone somewhere has taught you to
think of all the edge conditions.

73
00:05:02.142 --> 00:05:05.513
Think about a set of code
that will solve all of it,

74
00:05:05.513 --> 00:05:09.137
pseudocode the whole thing,
write the whole thing.

75
00:05:09.137 --> 00:05:12.441
Test- driven- development doesn't do that.

76
00:05:12.441 --> 00:05:13.993
It is literally like,

77
00:05:13.993 --> 00:05:19.234
you take a single condition write about
a bit of code for that and you do that.

78
00:05:19.234 --> 00:05:22.386
There is no pre-planning Involved.

79
00:05:22.386 --> 00:05:27.676
And it's just going to take you
some time to practice test-driven

80
00:05:27.676 --> 00:05:33.059
development to the point that you
feel confident in that process and

81
00:05:33.059 --> 00:05:36.751
you can let go of your
urge to plan everything.

82
00:05:36.751 --> 00:05:43.191
Also, as the code gets more complex,
the test also gets more complex.

83
00:05:43.191 --> 00:05:46.701
You have codes that rely
on all these other systems.

84
00:05:46.701 --> 00:05:52.154
You need to be able to write test
suites that can insulate this code and

85
00:05:52.154 --> 00:05:58.374
not be affected by all of these external
things that are constantly changing.

86
00:05:58.374 --> 00:06:03.697
And so the testing approaches and
the techniques that

87
00:06:03.697 --> 00:06:09.977
you need to handle more complex code,
it's quite difficult.

88
00:06:09.977 --> 00:06:13.756
Test-driven development,
just like any skill, just takes practice.

89
00:06:13.756 --> 00:06:17.884
I really recommend that this is something
that you can start now with the code that

90
00:06:17.884 --> 00:06:19.410
you're writing currently.

91
00:06:19.410 --> 00:06:22.749
Try to start small, just like
start writing some unit tests for

92
00:06:22.749 --> 00:06:27.161
different functions, and over time, you'll
notice that you may be writing it for

93
00:06:27.161 --> 00:06:28.817
larger, and larger systems.

