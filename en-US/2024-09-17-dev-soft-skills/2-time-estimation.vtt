WEBVTT

1
00:00:03.329 --> 00:00:07.943
&gt;&gt; Francesca Sadikin: So, now we're
shifting into handling common project

2
00:00:07.943 --> 00:00:09.856
execution problems.

3
00:00:09.856 --> 00:00:12.695
So, let's look at this scenario.

4
00:00:12.695 --> 00:00:18.691
Near the deadline, I let my manager
know I am not going to finish the task,

5
00:00:18.691 --> 00:00:21.901
and it took another month to finish it.

6
00:00:21.901 --> 00:00:23.865
So what would you do in the scenario?

7
00:00:23.865 --> 00:00:25.562
What would you do differently?

8
00:00:25.562 --> 00:00:31.376
&gt;&gt; Speaker 2: You could ask for
any other help from the team.

9
00:00:31.376 --> 00:00:32.767
&gt;&gt; Francesca Sadikin: Yes.
&gt;&gt; Speaker 2: Anybody,

10
00:00:32.767 --> 00:00:36.271
any other domain experts in the company.

11
00:00:36.271 --> 00:00:37.478
&gt;&gt; Francesca Sadikin: Asking for
help, yep.

12
00:00:40.098 --> 00:00:43.034
&gt;&gt; Speaker 3: Yea, I just think it's
important to communicate any blockers with

13
00:00:43.034 --> 00:00:45.775
your team so that you can get
unblocked as quickly as possible?

14
00:00:45.775 --> 00:00:47.425
&gt;&gt; Francesca Sadikin: Yes,
communicate blockers.

15
00:00:47.425 --> 00:00:51.196
&gt;&gt; Speaker 4: Explain the complexities
of why it could take longer.

16
00:00:54.743 --> 00:00:59.857
&gt;&gt; Speaker 4: One person said this is
the part that scares me, giving timelines.

17
00:00:59.857 --> 00:01:03.390
&gt;&gt; Francesca Sadikin: Okay, yes.

18
00:01:03.390 --> 00:01:10.547
You guys are all correct, but I find that
when engineers are in this position,

19
00:01:10.547 --> 00:01:15.970
it's often, this is very common
because they didn't know

20
00:01:15.970 --> 00:01:21.732
they weren't going to finish it
until it was too late, right?

21
00:01:21.732 --> 00:01:27.511
And so there's actually several
pieces that leads into this problem.

22
00:01:27.511 --> 00:01:32.367
First is just that the belief that
the task that you're working on is a fixed

23
00:01:32.367 --> 00:01:32.995
entity.

24
00:01:32.995 --> 00:01:38.920
Like, you didn't realize that there is
flexibility sometimes in the deadlines,

25
00:01:38.920 --> 00:01:43.829
the scope, and the priorities,
which changes with new insights and

26
00:01:43.829 --> 00:01:45.198
new information.

27
00:01:45.198 --> 00:01:49.407
Second, like I mentioned,
estimation is a problem.

28
00:01:49.407 --> 00:01:54.081
Many engineers feel like they're on
track until it's too late to adjust and

29
00:01:54.081 --> 00:01:57.234
they're estimating
the complexities involved.

30
00:01:57.234 --> 00:01:59.832
And then, like others mentioned,
communication.

31
00:01:59.832 --> 00:02:01.639
Communication is very, very important.

32
00:02:01.639 --> 00:02:06.769
Keeping regular updates to stakeholders
informed helps you uncover

33
00:02:06.769 --> 00:02:12.792
potential issues early, allowing for
timely support and course corrections.

34
00:02:12.792 --> 00:02:18.940
And compounding all of this is
impostor syndrome which is experienced

35
00:02:18.940 --> 00:02:26.042
by many engineers which makes it harder
to communicate that you are struggling.

36
00:02:26.042 --> 00:02:31.842
So, how do we navigate all
of these issues effectively?

37
00:02:31.842 --> 00:02:36.728
So we're going to focus on
gathering more information,

38
00:02:36.728 --> 00:02:42.849
embracing over-communication,
and then also estimations skills.

39
00:02:42.849 --> 00:02:47.210
Okay, so estimation,
engineers have a higher chance of missing

40
00:02:47.210 --> 00:02:51.745
deadlines if they're still
developing their estimation skills.

41
00:02:51.745 --> 00:02:55.011
By the way, estimation is very hard.

42
00:02:55.011 --> 00:02:59.079
Lots of engineers,
super experienced engineers,

43
00:02:59.079 --> 00:03:03.525
get it wrong all the time, but
there are tactics to help.

44
00:03:03.525 --> 00:03:07.387
One of the ones that I really
like is to use a spike.

45
00:03:07.387 --> 00:03:12.045
So, let's say that you have this task.

46
00:03:12.045 --> 00:03:14.955
You have requirements 1, 2 and 3.

47
00:03:14.955 --> 00:03:17.622
There's a testing phase and a deployment.

48
00:03:19.843 --> 00:03:21.425
&gt;&gt; Francesca Sadikin: A lot of engineers,

49
00:03:21.425 --> 00:03:26.643
if they do a waterfall approach
to these tasks, it's very risky.

50
00:03:26.643 --> 00:03:31.933
So what this would look like is like, they
see it as like a checklist, they're like,

51
00:03:31.933 --> 00:03:37.377
okay, requirement 1, complete that, go
move on to requirement 2, complete that.

52
00:03:37.377 --> 00:03:42.755
Now, the problem is that if requirement
3 was actually really, really difficult.

53
00:03:42.755 --> 00:03:48.245
You would not have known until it was too
late that you didn't have enough time and

54
00:03:48.245 --> 00:03:50.596
you needed more support, right?

55
00:03:50.596 --> 00:03:52.907
It's like you didn't know.

56
00:03:52.907 --> 00:03:58.760
It's the unknown, unknowns,
you didn't know until it was too late.

57
00:03:58.760 --> 00:04:01.342
So, if you use a spike.

58
00:04:01.342 --> 00:04:06.109
So, a spike is essentially,
this is an agile term, I think, and

59
00:04:06.109 --> 00:04:10.204
there are other terms that
kind of paints this process.

60
00:04:10.204 --> 00:04:15.350
But you would kind of take maybe a few
hours, a day or two, depending on how

61
00:04:15.350 --> 00:04:20.668
complex this work is, and what you would
do is take every single piece of it.

62
00:04:20.668 --> 00:04:25.409
All three requirements,
the testing, the deployment,

63
00:04:25.409 --> 00:04:30.260
and in that timeframe,
you would go into each one upfront.

64
00:04:30.260 --> 00:04:33.693
That would look maybe like
starting to look into the code,

65
00:04:33.693 --> 00:04:38.178
starting to write a little bit of a code,
looking to see what would it take for

66
00:04:38.178 --> 00:04:39.390
you to do this work.

67
00:04:39.390 --> 00:04:44.777
And by doing this upfront, you are
starting to figure out very quickly like,

68
00:04:44.777 --> 00:04:47.601
is this task exactly what I was expecting?

69
00:04:47.601 --> 00:04:50.621
Or like, I don't actually
know what's going on here and

70
00:04:50.621 --> 00:04:51.911
I should spend more time.

71
00:04:51.911 --> 00:04:55.621
And so
this allows you to plan your work better.

72
00:04:55.621 --> 00:04:59.790
You can see this diagram here,
where, okay, requirement 1.

73
00:04:59.790 --> 00:05:01.282
I know how to do that.

74
00:05:01.282 --> 00:05:02.871
But requirements 2 and 3.

75
00:05:02.871 --> 00:05:05.587
Actually, this was actually a lot
more complicated than I thought.

76
00:05:05.587 --> 00:05:09.738
I need to make sure that I'm planning for
that work earlier, right?

77
00:05:09.738 --> 00:05:13.587
I'm starting to ask more
questions about it beforehand.

78
00:05:13.587 --> 00:05:18.010
Realizing that testing, it's gonna
be too hard to do it all at the end,

79
00:05:18.010 --> 00:05:22.214
we should really be doing it all,
all throughout this process, and

80
00:05:22.214 --> 00:05:24.082
then we end with deployment.

81
00:05:26.562 --> 00:05:31.181
&gt;&gt; Francesca Sadikin: So, this just allows
you to solve some of those unknowns

82
00:05:31.181 --> 00:05:35.422
earlier on and
allows you to plan your work better.

83
00:05:37.626 --> 00:05:40.294
&gt;&gt; Francesca Sadikin: The other
small tips that I have,

84
00:05:40.294 --> 00:05:43.543
is to practice breaking tasks down now.

85
00:05:43.543 --> 00:05:48.304
So especially if you haven't started
working in a corporate setting.

86
00:05:48.304 --> 00:05:51.815
When you are doing a task, guess how
long it was going to take you and

87
00:05:51.815 --> 00:05:54.218
then compare it to how
long it actually took.

88
00:05:54.218 --> 00:05:59.061
You're starting to develop an internal
sense for how long you actually

89
00:05:59.061 --> 00:06:03.350
take when you know what to do and
when you don't know what to do.

90
00:06:03.350 --> 00:06:08.230
Last, remember,
understand how long it takes to actually

91
00:06:08.230 --> 00:06:11.851
get to completion in your company process.

92
00:06:11.851 --> 00:06:14.931
Completion doesn't mean code complete.

93
00:06:14.931 --> 00:06:18.080
It has to go through all
of these other phases and

94
00:06:18.080 --> 00:06:22.114
you need to incorporate that
into your estimation, right?

95
00:06:22.114 --> 00:06:28.110
So, for example, does the PR review take,
like, a few days a week or two?

96
00:06:28.110 --> 00:06:33.228
Does getting to testing staging production
environments also take a few days?

97
00:06:33.228 --> 00:06:35.930
Because, like, I don't know,

98
00:06:35.930 --> 00:06:41.927
some different processes in different
companies are always different.

99
00:06:41.927 --> 00:06:45.418
And does deployment,
is it instantaneous, or

100
00:06:45.418 --> 00:06:48.484
does the company only deploy once a week?

101
00:06:48.484 --> 00:06:52.401
You want to understand all of
those additional time frames and

102
00:06:52.401 --> 00:06:57.536
make sure that when you're done, you've
took into consideration all of this.

103
00:06:57.536 --> 00:06:59.237
Over-communicate.

104
00:06:59.237 --> 00:07:02.806
So, as I mentioned before,

105
00:07:02.806 --> 00:07:08.163
communicating is super duper important to

106
00:07:08.163 --> 00:07:14.276
give you more flexibility
if there is a problem.

107
00:07:14.276 --> 00:07:16.146
Things you want to be communicating.

108
00:07:16.146 --> 00:07:18.131
What has been done?

109
00:07:18.131 --> 00:07:20.235
What is currently in progress?

110
00:07:20.235 --> 00:07:22.041
What are blockers?

111
00:07:22.041 --> 00:07:27.265
Even just like a hint of a blocker,
you want to communicate that and

112
00:07:27.265 --> 00:07:30.453
potential solutions for that blocker.

113
00:07:30.453 --> 00:07:37.459
You wanna talk about what's at
risk of not being delivered.

114
00:07:37.459 --> 00:07:42.351
You should be talking about all of this
to your manager, to teammates working

115
00:07:42.351 --> 00:07:46.884
on this task with you, and then any
stakeholders relying on this work.

116
00:07:46.884 --> 00:07:51.921
This last one is, if your manager and your
other teammates weren't communicating this

117
00:07:51.921 --> 00:07:56.630
out to the stakeholders, maybe you should
be responsible for doing that as well.

118
00:07:59.875 --> 00:08:03.278
&gt;&gt; Francesca Sadikin: Lastly,
gathering information.

119
00:08:03.278 --> 00:08:07.329
Gathering more information about
the task provides flexibility

120
00:08:07.329 --> 00:08:09.399
when obstacles are hit, right?

121
00:08:09.399 --> 00:08:13.945
Cuz you might find that
the requirements on a ticket,

122
00:08:13.945 --> 00:08:18.706
someone just wrote that, but
it can change sometimes.

123
00:08:18.706 --> 00:08:22.381
You wanna figure out what
exactly is this task.

124
00:08:22.381 --> 00:08:27.759
Most tickets are not very detailed, and
so it's up to you to actually understand

125
00:08:27.759 --> 00:08:33.315
what it's trying to ask for, what are the
edge conditions that you want to handle.

126
00:08:33.315 --> 00:08:40.212
What are the validation steps to determine
that this task is correct and done, right?

127
00:08:40.212 --> 00:08:42.485
Does that mean that
someone needs to check it.

128
00:08:42.485 --> 00:08:48.882
And when it's deployed in front of users
and confirm that, yes, that's working now.

129
00:08:48.882 --> 00:08:52.963
Who are all the stakeholders
to sign off on that work?

130
00:08:52.963 --> 00:08:55.237
Who is relying on this work?

131
00:08:55.237 --> 00:08:57.991
A lot of your work doesn't
happen in isolation.

132
00:08:57.991 --> 00:09:04.051
Usually, there is a pipeline and
other people are probably relying on this.

133
00:09:04.051 --> 00:09:07.569
Why does this work matter, right?

134
00:09:07.569 --> 00:09:12.287
What's the importance to your team,
to the people relying on it,

135
00:09:12.287 --> 00:09:16.348
to the business, and then,
when is it needed, really?

136
00:09:16.348 --> 00:09:20.275
So, like to give you an example
of how this plays out.

137
00:09:20.275 --> 00:09:22.202
We're gonna take this task again.

138
00:09:22.202 --> 00:09:27.048
We have requirements 1, 2, and 3,
we have a testing piece and a deployment.

139
00:09:27.048 --> 00:09:33.441
The initial deadline on this
ticket was a month, right?

140
00:09:33.441 --> 00:09:40.482
In your investigation, you find out that,
well, there is a team that needs it,

141
00:09:40.482 --> 00:09:46.607
but they only need requirement 2,
and they only need that in a month.

142
00:09:46.607 --> 00:09:51.199
So, keeping that in mind,
if you run into problems,

143
00:09:51.199 --> 00:09:56.210
you can use that information
to adjust the scope, right?

144
00:09:56.210 --> 00:09:59.990
So instead of trying to
deliver everything at once and

145
00:09:59.990 --> 00:10:03.015
missing like the whole thing altogether.

146
00:10:03.015 --> 00:10:06.553
You can talk to the stakeholders
to see like, hey,

147
00:10:06.553 --> 00:10:12.002
is it okay if I just deliver what you
asked for requirement 2 in that one month.

148
00:10:12.002 --> 00:10:14.495
And I can push off requirements 1 and

149
00:10:14.495 --> 00:10:18.770
3 to be delivered after because
it's not as critical for you.

150
00:10:18.770 --> 00:10:23.202
So, this is just like a little
example of what it looks like.

151
00:10:23.202 --> 00:10:27.249
Like the flexibility that you can have,
and the adjustments that can be made,

152
00:10:27.249 --> 00:10:30.702
if you just had more information
about what this task actually is.

153
00:10:33.285 --> 00:10:36.685
&gt;&gt; Francesca Sadikin: So,
if we revisit that old scenario,

154
00:10:36.685 --> 00:10:40.417
given all this new skill, and mindsets.

155
00:10:40.417 --> 00:10:45.632
We can change this situation and say I
proactively worked with my manager and

156
00:10:45.632 --> 00:10:51.095
stakeholders to arrive on a revised scope
that allowed me to complete on time and

157
00:10:51.095 --> 00:10:53.314
still deliver what was needed.

