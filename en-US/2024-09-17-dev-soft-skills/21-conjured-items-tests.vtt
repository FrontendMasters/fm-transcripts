WEBVTT

1
00:00:00.250 --> 00:00:05.100
&gt;&gt; Francesca Sadikin: So conjured items,
the thing we were supposed to do.

2
00:00:05.100 --> 00:00:07.902
Here we go,
we're going to start with the test.

3
00:00:10.856 --> 00:00:14.209
&gt;&gt; Francesca Sadikin: Let's see,
too many described blocks, right.

4
00:00:14.209 --> 00:00:17.530
There we go, so
I'm going to create a new describe block.

5
00:00:17.530 --> 00:00:19.865
This is called conjured items.

6
00:00:23.509 --> 00:00:26.811
&gt;&gt; Francesca Sadikin: And
let's read this again.

7
00:00:26.811 --> 00:00:32.851
So, conjured items degrade in quality
twice as fast as normal items.

8
00:00:34.191 --> 00:00:38.951
So, based off of this wording,
my interpretation is that it should

9
00:00:38.951 --> 00:00:43.627
behave like a regular regular item,
the only difference is that it

10
00:00:43.627 --> 00:00:48.965
degrades the quality twice as fast
versus by one, right, in this case.

11
00:00:48.965 --> 00:00:57.270
I'm going to say that it should degrade
quality twice as fast as normal items.

12
00:01:01.003 --> 00:01:04.712
&gt;&gt; Francesca Sadikin: So I'm gonna
create my new gildedRose shop, and

13
00:01:04.712 --> 00:01:09.062
inside of it I'm gonna create
multiple items this time.

14
00:01:09.062 --> 00:01:14.384
Because the immediate thing that I'm
thinking about in terms of edge conditions

15
00:01:14.384 --> 00:01:19.731
is, I need to handle casing, like I wanna
make sure this works, whether it's.

16
00:01:19.731 --> 00:01:23.878
Lowercase, uppercase, capitalized.

17
00:01:23.878 --> 00:01:29.106
So I'm gonna start off with conjured
cat with the selling of five and

18
00:01:29.106 --> 00:01:30.583
a quality of 10.

19
00:01:30.583 --> 00:01:33.623
Then add other items here,

20
00:01:33.623 --> 00:01:39.832
I'm gonna do capitalized
conjured cup selling 10.

21
00:01:39.832 --> 00:01:45.526
Quality 20, and
then a third one doing uppercase

22
00:01:45.526 --> 00:01:51.492
CONJURED hat with selling of 15,
quality of 30.

23
00:01:51.492 --> 00:01:57.572
So now I'm going to grab items
off of gildedRose.updateQuality.

24
00:01:57.572 --> 00:02:02.453
And now I can, let's check the sellIn,
just making sure that it really,

25
00:02:02.453 --> 00:02:05.704
we're going to be
decrementing it as expected.

26
00:02:05.704 --> 00:02:11.913
So the first item's
sellIn is going to be 4.

27
00:02:11.913 --> 00:02:18.514
We passed, yeah, because it's just
going through the default handler.

28
00:02:18.514 --> 00:02:23.956
So item (0).quality is
now going to be 8 and

29
00:02:23.956 --> 00:02:27.823
now it's failing, okay.

30
00:02:27.823 --> 00:02:32.953
So now this is where we should pause and
just make this pass first.

31
00:02:34.133 --> 00:02:39.063
So I'm gonna close this side window,
open this up back to the right.

32
00:02:40.475 --> 00:02:45.336
Take a look here,
to make conjured items past,

33
00:02:45.336 --> 00:02:49.195
I'm going to create a new handler.

34
00:02:49.195 --> 00:02:51.225
Right, we're gonna continue
this pattern here.

35
00:02:52.365 --> 00:02:55.765
Sorry, not handler,
I'm gonna call it conjured.

36
00:02:55.765 --> 00:02:59.977
It takes an item in the function and
so far,

37
00:02:59.977 --> 00:03:05.008
we've determined that
the items sellIn continues

38
00:03:05.008 --> 00:03:11.785
to decrement by 1 and
that the quality now decrements by 2.

39
00:03:11.785 --> 00:03:17.463
I click save, nothing happens because
we have to actually use this handler.

40
00:03:17.463 --> 00:03:24.708
So I can see that, the switch between
the handlers happen at this line.

41
00:03:24.708 --> 00:03:29.513
And I could keep adding to this
conditional right here, but

42
00:03:29.513 --> 00:03:33.318
it's starting to get a little overloaded.

43
00:03:33.318 --> 00:03:37.148
And so, I'm actually going to extract
this out into a new function.

44
00:03:37.148 --> 00:03:42.115
I'm gonna call this one,
getHandlerName, which takes an item.

45
00:03:43.585 --> 00:03:45.896
And so I'm gonna transfer this over,

46
00:03:45.896 --> 00:03:49.875
so the default case is that it
always returns default, right?

47
00:03:49.875 --> 00:03:52.585
Then here's the next one.

48
00:03:52.585 --> 00:03:59.883
We add if object has own item, handler,
item name, we return item.name.

49
00:04:02.552 --> 00:04:05.220
And then just to make sure
that everything's working,

50
00:04:05.220 --> 00:04:07.842
I'm just going to pass this in,
call this right here.

51
00:04:09.882 --> 00:04:13.252
Yeap, everything's still
passing except for our new one.

52
00:04:13.252 --> 00:04:18.502
So now let's actually write the new
logic to make it switch to conjured.

53
00:04:18.502 --> 00:04:26.213
So simple enough, we just check that
the name includes conjured, okay?

54
00:04:26.213 --> 00:04:28.013
And then we return conjured.

55
00:04:29.733 --> 00:04:34.207
Okay, so that test is passing, but

56
00:04:34.207 --> 00:04:38.383
we have a few more to take care of,

57
00:04:38.383 --> 00:04:42.112
let's check the next items,

58
00:04:42.112 --> 00:04:46.152
quality, so to be 18, okay.

59
00:04:47.172 --> 00:04:51.395
Now this is failing again, and
that is because, as we thought,

60
00:04:51.395 --> 00:04:54.202
we needed to handle the casing.

61
00:04:54.202 --> 00:05:00.063
So that's simple enough, the plan is
to convert this all to a lower case.

62
00:05:00.063 --> 00:05:02.143
Before we check that conjured is inside.

63
00:05:03.183 --> 00:05:07.713
So now that passes, and I believe that
that handles the next case as well.

64
00:05:09.663 --> 00:05:15.565
Quality to be 28, there we go.

65
00:05:15.565 --> 00:05:20.076
Okay, so we have a few more, though.

66
00:05:20.076 --> 00:05:24.831
The other behavior of a default
item is that it should

67
00:05:24.831 --> 00:05:27.756
degrade quality twice as fast.

68
00:05:28.936 --> 00:05:31.056
So once sellIn has passed.

69
00:05:31.056 --> 00:05:33.562
I'm going to create a new one that says,

70
00:05:33.562 --> 00:05:37.626
it should degrade quality twice
as fast when sellIn has passed.

71
00:05:37.626 --> 00:05:39.496
That's fine, I will keep that name.

72
00:05:39.496 --> 00:05:44.940
Should degrade quality twice
as fast once sellIn passed.

73
00:05:48.171 --> 00:05:51.228
&gt;&gt; Francesca Sadikin: So
gonna create my new gildedRose shop.

74
00:05:53.038 --> 00:05:57.108
Going to check that quality
once that's passed.

75
00:05:57.108 --> 00:06:00.842
Okay, so gonna give it conjured cat again.

76
00:06:00.842 --> 00:06:08.467
SellIn is 0, and now quality is 10.

77
00:06:08.467 --> 00:06:13.401
So if I grab items off of
gildedRose.updateQuality,

78
00:06:13.401 --> 00:06:18.762
I now expect that that first
item's quality is going to be,

79
00:06:18.762 --> 00:06:20.790
so doubling of what.

80
00:06:20.790 --> 00:06:25.920
The normal one was is like decreasing
it by 4, so I expect it to be 6.

81
00:06:28.140 --> 00:06:32.880
So this is failing because we actually
need to write the code to make this pass.

82
00:06:32.880 --> 00:06:38.430
So we come back up here to the handler.

83
00:06:38.430 --> 00:06:42.918
What I'm gonna do,
just wrap this another logic here.

84
00:06:42.918 --> 00:06:47.289
If item, sellIn is greater than 0,

85
00:06:47.289 --> 00:06:53.358
we decrement by 2,
otherwise we decrement by 4.

86
00:06:53.358 --> 00:07:01.109
Okay, so this is passing now we have yet
another one.

87
00:07:01.109 --> 00:07:04.699
In that we should never have
a negative quality value.

88
00:07:04.699 --> 00:07:12.285
So, should never have
a negative quality value.

89
00:07:15.380 --> 00:07:18.229
&gt;&gt; Francesca Sadikin: Well,
syntax, here we go.

90
00:07:18.229 --> 00:07:19.889
Here's my new gildedRose Shop.

91
00:07:22.373 --> 00:07:26.433
Single, let's put an item
here called conjure cat.

92
00:07:27.903 --> 00:07:35.023
We have a sellInof,
we can have any positive 1, so like a 2.

93
00:07:35.023 --> 00:07:40.119
And this time I wanna check that
like even if we subtract by 2 or

94
00:07:40.119 --> 00:07:43.552
4 in these cases It will never go past 0.

95
00:07:43.552 --> 00:07:48.022
So, I'm gonna give it 1 instead and

96
00:07:48.022 --> 00:07:51.627
I'm now going to check that,

97
00:07:51.627 --> 00:07:56.098
if we call updateQuality we spec that

98
00:07:56.098 --> 00:08:01.302
first items quality to be 0, right?

99
00:08:01.302 --> 00:08:04.500
Cuz this was going to
just subtract by two, but

100
00:08:04.500 --> 00:08:08.282
we wanted to make sure that
it's always gonna be zero.

101
00:08:10.252 --> 00:08:13.888
I think I have a syntax issue,
dildedRose yeah,

102
00:08:13.888 --> 00:08:17.162
a bunch of stuff outside
of the test block.

103
00:08:17.162 --> 00:08:19.142
There we go, here we go.

104
00:08:19.142 --> 00:08:20.966
Okay, yes.

105
00:08:22.087 --> 00:08:25.437
So, now we are receiving -1,
but we expected 0.

106
00:08:25.437 --> 00:08:27.857
So we can make that code work again.

107
00:08:27.857 --> 00:08:34.457
We can just say if item.quality is less
than 0, we set it back to 0, okay?

108
00:08:36.777 --> 00:08:41.447
So, we have our test passing and
before we wrap this up.

109
00:08:41.447 --> 00:08:45.987
I'm actually noticing one
more round of refactoring.

110
00:08:45.987 --> 00:08:51.557
I'm noticing that this and
this is very similar, right?

111
00:08:51.557 --> 00:08:54.897
It looks almost exactly the same.

112
00:08:54.897 --> 00:09:03.277
The only difference is that it
decrements by 1 and 2 versus 2 and 4.

113
00:09:03.277 --> 00:09:07.258
So I am actually going to do
another refactor to try and

114
00:09:07.258 --> 00:09:10.936
combine these two functions together.

115
00:09:10.936 --> 00:09:17.036
So what I would ideally like to do to
call here is, I wanna call ItemHandler.

116
00:09:17.036 --> 00:09:22.450
I want to call the default one and
give it the Value, right?

117
00:09:22.450 --> 00:09:27.904
So, in this case I'm like I want it to
start by 2, I'm going to click Save this

118
00:09:27.904 --> 00:09:33.276
is gonna break a bunch of stuff because
I didn't actually make this work yet,

119
00:09:33.276 --> 00:09:38.540
but yeah you can see the conjured
items it's not being handled.

120
00:09:38.540 --> 00:09:42.697
So, we need to adjust
the default function now.

121
00:09:42.697 --> 00:09:47.916
So I said I wanted to give it a value,
so I'm going to provide another

122
00:09:47.916 --> 00:09:52.603
argument called decrementValue
which I will default to 1.

123
00:09:52.603 --> 00:09:57.889
So that in all the other cases if no
one passes is anything it's going

124
00:09:57.889 --> 00:10:03.389
to work as normal when I use that here,
and then multiply it by 2 here.

125
00:10:04.919 --> 00:10:09.819
And so now we have a cleaned
up conjured handler and

126
00:10:09.819 --> 00:10:17.519
we're just going to reuse the default
handler's logic, okay, that is it.

127
00:10:17.519 --> 00:10:20.694
That is the exercise,
[LAUGH] we're done, we're finally done.

