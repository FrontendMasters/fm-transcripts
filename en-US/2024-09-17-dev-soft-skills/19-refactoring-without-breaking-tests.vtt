WEBVTT

1
00:00:00.176 --> 00:00:03.181
&gt;&gt; Francesca Sadikin: So
we have all of our tests.

2
00:00:03.181 --> 00:00:07.544
We're not going to touch
the new item first yet,

3
00:00:07.544 --> 00:00:10.962
because we need to refactor the code.

4
00:00:10.962 --> 00:00:13.654
So I'm gonna close this window.

5
00:00:13.654 --> 00:00:15.485
I'm going to move this one

6
00:00:15.485 --> 00:00:19.099
over to the right,
&gt;&gt; Francesca Sadikin: Just so

7
00:00:19.099 --> 00:00:22.795
that I'm always going to be
referencing this Test Suite as we go.

8
00:00:22.795 --> 00:00:26.588
So now,
let's actually look at the source code.

9
00:00:26.588 --> 00:00:33.012
So we have a item class, there is a shop
class in which there is a constructor.

10
00:00:33.012 --> 00:00:36.845
These are the items we
have been giving it, and

11
00:00:36.845 --> 00:00:41.970
then there is a single method
called updateQuality, right?

12
00:00:41.970 --> 00:00:45.939
So inside of this method,
I see that there is a single for

13
00:00:45.939 --> 00:00:51.512
loop that's iterating through all
the items, making some sort of changes and

14
00:00:51.512 --> 00:00:57.184
then it returns all the items, and
that's what we've been seeing, correct?

15
00:00:57.184 --> 00:01:02.251
Inside of this,
based off of the name of the item

16
00:01:02.251 --> 00:01:08.343
it is making changes to the quality and
the sellIn value.

17
00:01:08.343 --> 00:01:13.367
So looking at this mess,
I don't think I want

18
00:01:13.367 --> 00:01:20.654
to be implementing my new code into
the structure of what this is.

19
00:01:20.654 --> 00:01:24.281
It's just going to be too complicated,
and so

20
00:01:24.281 --> 00:01:30.513
I'm actually going to refactor this code
now to prepare it for the new feature.

21
00:01:30.513 --> 00:01:37.099
Some notes here, everybody's resulting
refactoring is going to look

22
00:01:37.099 --> 00:01:42.708
different cuz everyone has
a different style, let's see.

23
00:01:42.708 --> 00:01:47.384
We're always going to be referencing
the Test Suite every time we

24
00:01:47.384 --> 00:01:51.052
make a change to see what broke,
and what didn't.

25
00:01:51.052 --> 00:01:56.584
And the thing that I'm going
to use here is to use a seam.

26
00:01:56.584 --> 00:02:01.804
So this is a very fancy way of just
trying to say, we want to safely inject

27
00:02:01.804 --> 00:02:06.854
our new code without breaking a bunch
of other stuff at the same time.

28
00:02:06.854 --> 00:02:13.755
And so what that scene would look
like in this case is, let's see.

29
00:02:13.755 --> 00:02:20.353
So I see all of these conditions, I'm
going to write a new condition here and

30
00:02:20.353 --> 00:02:24.901
I'm going to say here, this.items(i).name.

31
00:02:24.901 --> 00:02:30.775
I'm going to handle a specialty item
first just to make it easier for myself.

32
00:02:30.775 --> 00:02:35.600
I'm gonna call it Aged Brie.

33
00:02:35.600 --> 00:02:40.301
So all of my new code is
going to be in this block and

34
00:02:40.301 --> 00:02:47.318
I'm going to create an else and
put all of the existing code inside of it.

35
00:02:47.318 --> 00:02:53.506
So what this does is that I now
expect if I click Save Aged Brie,

36
00:02:53.506 --> 00:02:58.273
so actually I'm just gonna click Save for
you.

37
00:02:58.273 --> 00:03:03.225
So what I'm seeing now is
that Aged Brie is failing,

38
00:03:03.225 --> 00:03:07.964
but all of the other
behaviors are still working.

39
00:03:07.964 --> 00:03:12.324
So this is what I mean by creating
a scene where we're going to just

40
00:03:12.324 --> 00:03:15.337
figure out a place to safely put our code,
but

41
00:03:15.337 --> 00:03:18.695
let everything fall back
to the existing system.

42
00:03:18.695 --> 00:03:22.340
So we're not gonna touch that, right?

43
00:03:22.340 --> 00:03:26.830
So in this case, we have Aged Brie,

44
00:03:26.830 --> 00:03:31.328
that code that we need to make pass.

45
00:03:31.328 --> 00:03:35.291
So when I refactor,
I try to do it in iterations.

46
00:03:35.291 --> 00:03:38.432
I try to have a specific thing
that I'm focusing on first.

47
00:03:38.432 --> 00:03:42.516
I'm not going to think about
the most perfect code and

48
00:03:42.516 --> 00:03:48.802
then try to create that from the very
beginning, so we'll do this in iterations.

49
00:03:48.802 --> 00:03:53.840
The very first one that I'm thinking
about is when I look at all of this code,

50
00:03:53.840 --> 00:03:59.454
I can see that relevant pieces of code for
particular items are everywhere, right?

51
00:03:59.454 --> 00:04:06.748
You can see something related to
Backstage passes in three places.

52
00:04:06.748 --> 00:04:10.992
And so the goal for
this one is that I'm going to just

53
00:04:10.992 --> 00:04:15.457
consolidate all of the code relevant for
every item.

54
00:04:15.457 --> 00:04:20.017
And I really don't even need to
[LAUGH] reference the existing code,

55
00:04:20.017 --> 00:04:24.345
I'm going to just write my new
code that makes these tests pass.

56
00:04:24.345 --> 00:04:29.750
So the very first test that
I'm looking at here is that it

57
00:04:29.750 --> 00:04:35.277
needs to decrement the sellIn value,
so let's do that.

58
00:04:35.277 --> 00:04:39.886
I'm gonna write this.items(i).sellIn,

59
00:04:39.886 --> 00:04:43.806
I'm going to decrement it by 1 inside.

60
00:04:43.806 --> 00:04:48.583
So we still have a failing test, but
the assertion line has moved, right?

61
00:04:48.583 --> 00:04:54.558
The sellIn is now passing, but
we need to make the quality

62
00:04:54.558 --> 00:04:59.297
also pass, so it's supposed to increment.

63
00:04:59.297 --> 00:05:02.715
So this.items(i).quality,

64
00:05:02.715 --> 00:05:07.198
I'm going to just decrement it by 1, okay?

65
00:05:07.198 --> 00:05:10.575
So that first Aged Brie test is passing,
but

66
00:05:10.575 --> 00:05:14.605
the one about never being
more than 50 is failing.

67
00:05:14.605 --> 00:05:21.161
So I'm just going to
write that this.items(i).

68
00:05:23.887 --> 00:05:27.938
&gt;&gt; Francesca Sadikin: If
the quality is less than 50,

69
00:05:27.938 --> 00:05:33.011
I increment, otherwise, I do nothing.

70
00:05:33.011 --> 00:05:37.086
And in all cases, I decrement the sellIn.

71
00:05:37.086 --> 00:05:40.711
So we have Aged Brie now.

72
00:05:40.711 --> 00:05:42.207
So let's move on.

73
00:05:42.207 --> 00:05:47.482
We now have to handle Sulfuras,
so we're gonna do the same thing.

74
00:05:47.482 --> 00:05:50.332
We are going to write,
actually, you know what?

75
00:05:50.332 --> 00:05:55.729
Before I move on, let me actually just
make a refactoring opportunity right here,

76
00:05:55.729 --> 00:06:00.505
cuz I can tell I'm going to be typing
this part of the code over, and over,

77
00:06:00.505 --> 00:06:03.228
and over again and I don't wanna do that.

78
00:06:03.228 --> 00:06:08.102
So let's actually save that out
into a new variable called item.

79
00:06:08.102 --> 00:06:14.462
So here this.item(i), and
what I'm doing is I copied item.

80
00:06:14.462 --> 00:06:20.091
I'm highlighting this.items(i) and
now I'm using command D.

81
00:06:20.091 --> 00:06:24.276
I'm on a Mac, so Command D and
that's Ctrl+D on Windows.

82
00:06:24.276 --> 00:06:28.250
And you can see that it is now
selecting the next match, and

83
00:06:28.250 --> 00:06:32.321
I can control how many matches
I want to do and I'm pasting.

84
00:06:32.321 --> 00:06:37.490
So that's just a really handy
refactoring tip in VS Code.

85
00:06:37.490 --> 00:06:42.375
Okay, so everything's still passing
even with this refactoring.

86
00:06:42.375 --> 00:06:46.367
So now, I'm gonna handle Sulfuras.

87
00:06:46.367 --> 00:06:49.923
So let's add Sulfuras right here.

88
00:06:53.990 --> 00:06:56.950
&gt;&gt; Francesca Sadikin: So
I'm gonna to create that block, and

89
00:06:56.950 --> 00:06:58.930
I'm going to click Save.

90
00:06:58.930 --> 00:07:04.801
Sulfuras passes, that's telling us that
we don't need to write any more code.

91
00:07:04.801 --> 00:07:09.754
And this is one of the really cool
things about test-driven development is

92
00:07:09.754 --> 00:07:12.426
that you sometimes write simpler code,

93
00:07:12.426 --> 00:07:16.680
because your test will tell you
when you need to write that code.

94
00:07:16.680 --> 00:07:22.916
And then this case, all we needed
was to do this and we're done.

95
00:07:22.916 --> 00:07:26.531
So now, we have the Backstage passes.

96
00:07:26.531 --> 00:07:34.198
So here, let's write else if
(item.name === Backstage passes.

97
00:07:34.198 --> 00:07:36.513
We've got the syntax, gonna click Save.

98
00:07:36.513 --> 00:07:41.800
I'm just making sure that, yeah,
my other stuff is passing.

99
00:07:41.800 --> 00:07:46.504
Now, a bunch in Backstage
passes is failing.

100
00:07:46.504 --> 00:07:49.492
So let's write our code.

101
00:07:49.492 --> 00:07:53.438
I'm going to just start from the top here,
okay?

102
00:07:53.438 --> 00:07:58.088
Here we go.

103
00:07:58.088 --> 00:08:02.768
Actually, the first line that's
failing is that sellIn is supposed to

104
00:08:02.768 --> 00:08:04.414
decrement as expected.

105
00:08:04.414 --> 00:08:11.778
So item.sellIn decrements by 1,
let's make that pass.

106
00:08:11.778 --> 00:08:14.285
Coming back up, now it's quality.

107
00:08:14.285 --> 00:08:18.688
Quality is supposed to increase,
so I'm just going to just

108
00:08:18.688 --> 00:08:23.267
write item.quality,
&gt;&gt; Francesca Sadikin: Okay,

109
00:08:23.267 --> 00:08:25.139
increases by 1.

110
00:08:28.056 --> 00:08:30.639
&gt;&gt; Francesca Sadikin: Okay, scrolling up.

111
00:08:30.639 --> 00:08:34.832
So that first one's passing,
we have another one.

112
00:08:34.832 --> 00:08:41.057
It should never increase more than 50.

113
00:08:41.057 --> 00:08:45.932
I can see because we wrote these tests
that this is going to keep happening over

114
00:08:45.932 --> 00:08:48.857
and over again,
that we need to do this check.

115
00:08:48.857 --> 00:08:53.830
And so what I'm going to do
is that up here is where I'm

116
00:08:53.830 --> 00:08:57.478
going to be manipulating quality, and

117
00:08:57.478 --> 00:09:03.558
I'm going to just check that if
item.quality is more than 50,

118
00:09:03.558 --> 00:09:07.337
I'm just gonna set it back to 50 here.

119
00:09:07.337 --> 00:09:09.567
So when I look at the Test Suites,

120
00:09:09.567 --> 00:09:13.562
all the ones related to never
more than 50 is now passing.

121
00:09:15.830 --> 00:09:17.533
&gt;&gt; Francesca Sadikin: So
we have another one.

122
00:09:17.533 --> 00:09:25.272
We should increase quality by 2 when
the sellIn is between 10 days and 6.

123
00:09:25.272 --> 00:09:27.259
So I'm gonna just wrap this.

124
00:09:27.259 --> 00:09:30.239
So again, with test-driven development and
refactoring here,

125
00:09:30.239 --> 00:09:33.122
we always just write the simplest
amount of code to make it pass.

126
00:09:33.122 --> 00:09:38.031
It might look super simple, but
we have a chance to adjust it and

127
00:09:38.031 --> 00:09:42.308
make it nicer in further
refactoring opportunities.

128
00:09:42.308 --> 00:09:46.669
So in this case,
just simple if conditions is fine.

129
00:09:46.669 --> 00:09:52.565
So if item.sellIn is more than 10,

130
00:09:52.565 --> 00:09:57.181
right, so 11 days or more.

131
00:09:57.181 --> 00:10:03.031
Actually, let's make that explicit,
so 11 days or more, I increase by 1.

132
00:10:03.031 --> 00:10:08.268
Else if item.sellIn is less than or

133
00:10:08.268 --> 00:10:15.433
equal to 10, item.quality increases by 2.

134
00:10:15.433 --> 00:10:19.100
Okay, so that one's covered, and

135
00:10:19.100 --> 00:10:23.876
then we have the one
about incrementing by 3.

136
00:10:23.876 --> 00:10:27.238
So I'll add another case,

137
00:10:27.238 --> 00:10:33.231
else if item.sellIn is less than or
equal to 5,

138
00:10:33.231 --> 00:10:38.055
item.quality is decrementing by 3,

139
00:10:38.055 --> 00:10:41.577
except it is still failing.

140
00:10:41.577 --> 00:10:46.380
[LAUGH] So it is still decrementing by 2,

141
00:10:46.380 --> 00:10:50.771
I mean, sorry, not decrementing.

142
00:10:50.771 --> 00:10:57.537
Incrementing, incrementing by 2, but
we are expecting it to increment by 3.

143
00:10:57.537 --> 00:11:01.989
So I'm gonna use this
opportunity to transition

144
00:11:01.989 --> 00:11:05.579
into a small overview on the debugger.

145
00:11:05.579 --> 00:11:11.543
So let's use the debugger to briefly
figure out why this problem is happening.

146
00:11:11.543 --> 00:11:16.639
So I'm gonna go back into
this particular test that's

147
00:11:16.639 --> 00:11:21.196
failing here, and
I'm gonna add Breakpoints.

148
00:11:21.196 --> 00:11:26.167
You can see I clicked it over here,
and this is telling

149
00:11:26.167 --> 00:11:31.813
the debugger where it should
stop when it runs the debugger.

150
00:11:31.813 --> 00:11:33.662
From here, let's actually run it.

151
00:11:33.662 --> 00:11:35.982
So I'm clicking the Debugger button.

152
00:11:35.982 --> 00:11:39.882
So I'm going to introduce
the debugger to you, because when I

153
00:11:39.882 --> 00:11:44.759
was learning how to code, I never learned
how to use the debugger correctly.

154
00:11:44.759 --> 00:11:49.293
And it was a huge regret of mine, cuz I
just used console.logs everywhere and

155
00:11:49.293 --> 00:11:51.612
I finally realized how powerful it is.

156
00:11:51.612 --> 00:11:56.582
[LAUGH] So just to make sure that
everyone does see what this is all about

157
00:11:56.582 --> 00:12:00.619
even briefly,
I'm going to introduce here right now.

158
00:12:00.619 --> 00:12:05.714
So the debugger window, again,
way more powerful to understand what's

159
00:12:05.714 --> 00:12:10.494
happening in your system,
much more powerful than console.logs.

160
00:12:10.494 --> 00:12:15.606
What you're seeing here right now,
it's pausing at the top of the file.

161
00:12:15.606 --> 00:12:16.928
In this variables window,

162
00:12:16.928 --> 00:12:20.497
you're going to see everything that's
in scope all the way up to Global.

163
00:12:20.497 --> 00:12:25.332
So, for example, if I click play,
it's gonna move to the next Breakpoint.

164
00:12:25.332 --> 00:12:30.866
Actually, in my test, you can see that
the Variables window has now updated.

165
00:12:30.866 --> 00:12:37.301
Now, there's not just the Global scope,
but there is all the other closures,

166
00:12:37.301 --> 00:12:41.542
including the one that's
in the test scope itself.

167
00:12:41.542 --> 00:12:47.107
Currently, everything is undefined and
that's just because we haven't

168
00:12:47.107 --> 00:12:52.596
actually moved execution yet so
that it hasn't been assigned anything.

169
00:12:52.596 --> 00:12:57.188
Other little things you'll notice
here is this Watch window, so

170
00:12:57.188 --> 00:12:59.366
you can add any variable here.

171
00:12:59.366 --> 00:13:04.846
It's just a way to pin something to
always watch it as things move around.

172
00:13:04.846 --> 00:13:10.379
Again, gildedRose has undefined,
cuz we haven't set anything.

173
00:13:10.379 --> 00:13:12.961
There is also a Call Stack window.

174
00:13:12.961 --> 00:13:16.188
So this shows you all the functions

175
00:13:16.188 --> 00:13:20.979
that are being called to
get to this current phase.

176
00:13:20.979 --> 00:13:27.873
So this is where we are right now, you
can actually click up the Call Stack and

177
00:13:27.873 --> 00:13:32.523
it will show you every
single line that was called.

178
00:13:32.523 --> 00:13:36.854
In this case, this is all just internal,
and we don't really need it for

179
00:13:36.854 --> 00:13:37.850
this exercise.

180
00:13:37.850 --> 00:13:40.276
I'm gonna close this Call Stack.

181
00:13:40.276 --> 00:13:44.524
And then we have our Breakpoints here,
just showing us all the current

182
00:13:44.524 --> 00:13:47.620
Breakpoints and
we can easily turn them on and off.

183
00:13:47.620 --> 00:13:52.153
The other little thing that I want you
to point out here is this little window,

184
00:13:52.153 --> 00:13:56.685
you can't really see it cuz it's blue
on blue, but these are the controls for

185
00:13:56.685 --> 00:13:57.611
the debugger.

186
00:13:57.611 --> 00:14:02.543
So you saw me click the Play button,
so that's just going to

187
00:14:02.543 --> 00:14:07.194
continue execution until
it sees another Breakpoint.

188
00:14:07.194 --> 00:14:12.343
We have the step over, so
this is just going to move line by line.

189
00:14:12.343 --> 00:14:17.209
And then if you wanted to go into
the internals of a particular function

190
00:14:17.209 --> 00:14:20.673
on that line,
we'll do the Step-in button, and

191
00:14:20.673 --> 00:14:24.066
then there's also a step-out
to come out of it.

192
00:14:24.066 --> 00:14:28.932
We can also click restart, so
that just restarts the entire debugger for

193
00:14:28.932 --> 00:14:30.863
these sets of Breakpoints.

194
00:14:30.863 --> 00:14:34.189
And when we're done, you click Stop.

195
00:14:34.189 --> 00:14:37.892
So for now, I'm just gonna show
you this step over function.

196
00:14:37.892 --> 00:14:44.408
So you can see I stopped here at
gildedRose, nothing is being shown here.

197
00:14:44.408 --> 00:14:49.386
But once I click step over,
we can see gildedRose immediately

198
00:14:49.386 --> 00:14:53.134
got updated with what
the gildedRose shop is.

199
00:14:53.134 --> 00:14:57.037
And I can also hover over it and
will show you here as well.

200
00:14:57.037 --> 00:15:02.313
So just so
much more information than a console.log.

201
00:15:02.313 --> 00:15:06.005
So in this case,
I'm on gildedRose, updateQuality,

202
00:15:06.005 --> 00:15:11.908
items hasn't actually finished executing,
but I wanna go into this function, right?

203
00:15:11.908 --> 00:15:14.257
So I'm gonna step into it.

204
00:15:14.257 --> 00:15:19.873
It brought me straight into the method,
and it's in this loop.

205
00:15:19.873 --> 00:15:25.228
So I'm just now going to click Step over
until I get to the point where I want.

206
00:15:25.228 --> 00:15:27.267
So it's moving through,

207
00:15:27.267 --> 00:15:32.003
and you can see all the variables
here being updated as we go.

208
00:15:32.003 --> 00:15:37.879
You see here, now it knows we're
working on this particular item.

209
00:15:37.879 --> 00:15:40.555
And then it's like, no,
not that condition.

210
00:15:40.555 --> 00:15:43.782
Yep, it's probably gonna be in
this condition and here we go.

211
00:15:43.782 --> 00:15:50.862
So we're inside this block now, so
we can see that sellIn was 5, right?

212
00:15:50.862 --> 00:15:56.029
So it's not gonna meet this one,
move over.

213
00:15:56.029 --> 00:16:02.473
I want it to be here, but when I go
through it this way, I can see that like,

214
00:16:02.473 --> 00:16:06.696
yeah, my item selling is 5,
it is less than 10.

215
00:16:06.696 --> 00:16:09.788
I'm in this conditional.

216
00:16:09.788 --> 00:16:14.502
This is why I'm not getting to
the increment by 3 block here.

217
00:16:14.502 --> 00:16:17.933
It's because I wrote my
conditional wrong here.

218
00:16:17.933 --> 00:16:22.103
So that was a little
intro to the debugger.

219
00:16:22.103 --> 00:16:26.996
I have figured out that this is my
line that is causing me problems.

220
00:16:26.996 --> 00:16:33.996
So I'm gonna exit out of the debugger,
close that window,

221
00:16:33.996 --> 00:16:39.044
bring back my Test Suite and
just fix this.

222
00:16:39.044 --> 00:16:42.681
So really, I want it to be,

223
00:16:42.681 --> 00:16:47.428
if it's more than 5, let's see,

224
00:16:47.428 --> 00:16:52.511
does that here, there, there we go.

225
00:16:52.511 --> 00:16:54.824
If it's more than 5, then it does that.

226
00:16:54.824 --> 00:17:01.640
Otherwise, if it's less than or
equal to 5, it increments by 3.

227
00:17:01.640 --> 00:17:04.453
Okay, so that fixed those tests.

228
00:17:04.453 --> 00:17:09.362
Now, we have the last one, should drop
quality to 0 when sellIn has passed.

229
00:17:09.362 --> 00:17:11.528
I'm just gonna add another else case here.

230
00:17:11.528 --> 00:17:15.752
I'm just gonna say item.quality is 0.

231
00:17:15.752 --> 00:17:20.914
Sorry, I'm going to change this so
that if it's greater than 0.

232
00:17:22.881 --> 00:17:23.584
&gt;&gt; Francesca Sadikin: There we go.

233
00:17:23.584 --> 00:17:27.235
So that I had another incorrect
conditional right there.

234
00:17:27.235 --> 00:17:32.541
So now, all of my tests are passing,
cool, but

235
00:17:32.541 --> 00:17:37.596
we have a whole other set
of code here to work.

236
00:17:37.596 --> 00:17:41.217
We have the default items
we still need to handle.

237
00:17:41.217 --> 00:17:45.786
So I want that code to
be in this else block.

238
00:17:45.786 --> 00:17:52.606
And so what I'm going to do is comment
everything out in here, and I click Save.

239
00:17:52.606 --> 00:17:58.426
Everything else is passing except now the
default items that we need to make pass.

240
00:17:58.426 --> 00:18:02.330
So let's just start.

241
00:18:02.330 --> 00:18:06.596
We need to have sellIn decrement by 1.

242
00:18:06.596 --> 00:18:13.231
So let's just do that,
sellIn decrements by 1, okay?

243
00:18:13.231 --> 00:18:19.375
The next one is that quality,
&gt;&gt; Francesca Sadikin: Should

244
00:18:19.375 --> 00:18:22.923
have a quality value
that also decreases by 1.

245
00:18:22.923 --> 00:18:26.837
So item.quality also decreases by 1, and

246
00:18:26.837 --> 00:18:33.834
then this one's should degrade quality
twice as fast when sellIn has passed.

247
00:18:33.834 --> 00:18:41.152
So I'll just say if item.sellIn
is greater than 0, we decrement.

248
00:18:41.152 --> 00:18:48.944
Otherwise, item.quality decrements by 2.

249
00:18:52.511 --> 00:18:55.094
&gt;&gt; Francesca Sadikin: And
then we just have the last one.

250
00:18:55.094 --> 00:18:59.152
It should never have
a negative quality value.

251
00:18:59.152 --> 00:19:05.783
So I'm just going to write a little
check here that just says,

252
00:19:05.783 --> 00:19:12.424
if item.quality is less than 0,
we set it back to 0, okay?

253
00:19:12.424 --> 00:19:18.452
So we have this all passing, I'm going
to just slightly close this over now.

254
00:19:18.452 --> 00:19:22.920
So because we have all of
the requirements given to us and

255
00:19:22.920 --> 00:19:27.483
we were 100% sure that
the requirements were there,

256
00:19:27.483 --> 00:19:32.156
we have written the test,
I'm going to delete this code.

257
00:19:32.156 --> 00:19:36.421
Please don't delete code in your future
companies just like this easily,

258
00:19:36.421 --> 00:19:39.883
because [LAUGH] you wanna be
100% sure you understood it.

259
00:19:39.883 --> 00:19:44.126
And other engineers confirmed that you
understood it before you just delete

260
00:19:44.126 --> 00:19:45.589
a bunch of code like that.

261
00:19:45.589 --> 00:19:50.563
So just because this is a very scoped
project, I felt comfortable doing that.

