WEBVTT

1
00:00:00.000 --> 00:00:03.361
&gt;&gt; Francesca Sadikin: So we're gonna
be moving into our coding exercise now.

2
00:00:03.361 --> 00:00:08.319
The goal of this project is that
we're going to learn to work

3
00:00:08.319 --> 00:00:13.276
in a legacy system and
how to make changes safely with test,

4
00:00:13.276 --> 00:00:19.539
creating seams, and I'm also gonna
cover a few refactoring techniques.

5
00:00:19.539 --> 00:00:23.049
Gilded Rose is a shop of magical items,
and

6
00:00:23.049 --> 00:00:27.632
it has asked us to add a new
feature to their project while

7
00:00:27.632 --> 00:00:32.332
making sure we don't break
existing functionalities.

8
00:00:32.332 --> 00:00:37.064
So my little prompt to you is
what is the plan of attack here?

9
00:00:37.064 --> 00:00:42.302
Knowing that there is an existing
source code that's working,

10
00:00:42.302 --> 00:00:46.670
there are no tests, and
the code itself is not great.

11
00:00:46.670 --> 00:00:50.978
So, how would you plan on
injecting our new code

12
00:00:50.978 --> 00:00:55.080
without breaking existing functionality?

13
00:00:59.196 --> 00:01:00.248
&gt;&gt; Francesca Sadikin: That's a prompt.

14
00:01:00.248 --> 00:01:04.055
&gt;&gt; Speaker 1: You can run the tests.

15
00:01:04.055 --> 00:01:05.250
&gt;&gt; Francesca Sadikin: What
if there are no tests?

16
00:01:05.250 --> 00:01:10.521
I know it seems a little obvious,
but right test okay?

17
00:01:10.521 --> 00:01:15.061
&gt;&gt; Speaker 2: You can also communicate and
do a manual test as well, like QA,

18
00:01:15.061 --> 00:01:19.270
number one, to see if the program
still runs the same way.

19
00:01:19.270 --> 00:01:23.729
&gt;&gt; Francesca Sadikin: Okay, so, yes so
manual testing would be really hard when

20
00:01:23.729 --> 00:01:28.643
you start refactoring the code,
because there you would have to

21
00:01:28.643 --> 00:01:32.567
just manually test so
many different conditions.

22
00:01:32.567 --> 00:01:38.819
So writing test is the great first step,
because then we have this like,

23
00:01:38.819 --> 00:01:42.714
immediate signal that whatever we're about

24
00:01:42.714 --> 00:01:47.339
to touch is going to still work or
it's going to fail.

25
00:01:47.339 --> 00:01:52.289
So the actual plan of attack
here is we're not going to

26
00:01:52.289 --> 00:01:56.147
just inject our new code into the system.

27
00:01:56.147 --> 00:02:01.100
We're going to write tests to ensure all
of the existing functionality, then we're

28
00:02:01.100 --> 00:02:06.148
gonna refactor the code, because I'll show
you, the code's really hard to work in.

29
00:02:06.148 --> 00:02:09.797
And then that's when we're
gonna actually implement our

30
00:02:09.797 --> 00:02:14.276
new functionality by writing the test
first, and then write the code.

31
00:02:14.276 --> 00:02:18.600
And in any moment during this,
if there is a refactoring opportunity,

32
00:02:18.600 --> 00:02:20.555
we're We're going to take it.

33
00:02:20.555 --> 00:02:25.324
So an introduction to this system you
don't have to read this too carefully

34
00:02:25.324 --> 00:02:28.881
because we're about to go over
it again in via code but,

35
00:02:28.881 --> 00:02:33.673
essentially they have a set of base
items that there are, conditions for.

36
00:02:33.673 --> 00:02:37.636
And there is also specialty
items that we need to cover.

