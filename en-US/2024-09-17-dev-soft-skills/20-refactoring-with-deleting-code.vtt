WEBVTT

1
00:00:00.962 --> 00:00:05.597
&gt;&gt; Francesca Sadikin: Okay, so we have
consolidated relevant pieces of code for

2
00:00:05.597 --> 00:00:10.232
every single item, but
before we go into conjured items,

3
00:00:10.232 --> 00:00:14.414
I think there's another
opportunity to refactor.

4
00:00:14.414 --> 00:00:18.632
Because I can see that,
if I were to add conjured items right now,

5
00:00:18.632 --> 00:00:22.947
I'm just gonna be adding to this if-else,
if-else, if block.

6
00:00:22.947 --> 00:00:24.218
And I don't really wanna do that.

7
00:00:24.218 --> 00:00:28.123
So, what I'm going to do instead,

8
00:00:28.123 --> 00:00:33.081
is I'm going to extract
these handlers out.

9
00:00:33.081 --> 00:00:35.548
So, I think what I'm going to do,

10
00:00:35.548 --> 00:00:41.006
is that I'm going to create a new
variable or constant called itemHandler.

11
00:00:41.006 --> 00:00:48.202
Inside of which is an object and I'm going
to use the name of the item as the key,

12
00:00:48.202 --> 00:00:55.417
and it's going to be a function that takes
in item and then does the logic on it.

13
00:00:55.417 --> 00:00:59.614
So I'm gonna actually
paste this logic in and

14
00:00:59.614 --> 00:01:03.269
now I'm going to call it, right here.

15
00:01:03.269 --> 00:01:09.979
So, itemHandler(itemName), and then it's
a function, so I'm gonna give it item.

16
00:01:09.979 --> 00:01:14.001
So I'm gonna fix save, reference
my test suite, tests are passing.

17
00:01:14.001 --> 00:01:14.770
Cool.

18
00:01:14.770 --> 00:01:17.246
Delete code.

19
00:01:17.246 --> 00:01:18.282
Yes.

20
00:01:18.282 --> 00:01:23.423
&gt;&gt; Speaker 2: Is there any rule thumb or
etiquette to deleting code or

21
00:01:23.423 --> 00:01:28.129
branches of code like that
in a real environment?

22
00:01:28.129 --> 00:01:31.568
&gt;&gt; Francesca Sadikin: Well, in a real
environment, you also have Git, so

23
00:01:31.568 --> 00:01:34.393
there is already version control for you.

24
00:01:34.393 --> 00:01:39.693
But when you're doing really large
refactorings, you do just wanna make

25
00:01:39.693 --> 00:01:44.907
sure you really understand the code
because existing code has layers and

26
00:01:44.907 --> 00:01:48.688
layers of bug fixes, and
it's not always obvious.

27
00:01:48.688 --> 00:01:53.128
So, yeah, like writing tests to
make sure you really understood it.

28
00:01:53.128 --> 00:01:57.268
Try to find an engineer who has worked
with it before to take a look at what

29
00:01:57.268 --> 00:01:58.443
you have captured.

30
00:01:58.443 --> 00:02:02.715
Also, I think ideally when you're
working in production code,

31
00:02:02.715 --> 00:02:07.773
you wouldn't introduce a huge refactor
all at once to production like that.

32
00:02:07.773 --> 00:02:11.560
You might be doing a small little change,
let it go into production,

33
00:02:11.560 --> 00:02:15.430
see what happens, looks good,
then bring in the next set of changes.

34
00:02:15.430 --> 00:02:21.408
Like incrementally, instead of doing a big
giant refactor and then, boom, production.

35
00:02:21.408 --> 00:02:24.489
So again,
we continue with this refactoring.

36
00:02:24.489 --> 00:02:30.069
So, we already started with
extracting the Aged Brie's

37
00:02:30.069 --> 00:02:34.264
handler out into this new data structure.

38
00:02:34.264 --> 00:02:36.952
Let's keep going with Sulfuras next.

39
00:02:36.952 --> 00:02:40.074
So, here is Sulfuras as the key.

40
00:02:40.074 --> 00:02:45.031
This time same deal and
creating a function with item and

41
00:02:45.031 --> 00:02:48.629
inside of it the function does nothing.

42
00:02:48.629 --> 00:02:54.103
A little JavaScript convention
here is to add a little underscore

43
00:02:54.103 --> 00:03:00.584
to let other developers know that this
is intentionally not going to be used.

44
00:03:00.584 --> 00:03:06.672
And so, I'm going to call that
line right here, plop it in.

45
00:03:06.672 --> 00:03:08.045
It's still passing.

46
00:03:08.045 --> 00:03:10.854
So, I know I'm copying and
pasting right now,

47
00:03:10.854 --> 00:03:15.852
but we're going to just continue, and
then we're gonna clean that up afterwards.

48
00:03:15.852 --> 00:03:18.070
So next we have backstage passes.

49
00:03:19.958 --> 00:03:23.233
&gt;&gt; Francesca Sadikin: Going
to add it here.

50
00:03:23.233 --> 00:03:25.819
Here's my new function.

51
00:03:25.819 --> 00:03:29.915
Gonna paste all of this logic out.

52
00:03:31.106 --> 00:03:34.681
&gt;&gt; Francesca Sadikin: And
then call this line instead.

53
00:03:37.979 --> 00:03:39.615
&gt;&gt; Francesca Sadikin: Okay,
that's working.

54
00:03:39.615 --> 00:03:45.266
I can do, remove this, and so
now we have the default handler.

55
00:03:45.266 --> 00:03:49.934
So what I'm gonna do is actually
just create a new key, and

56
00:03:49.934 --> 00:03:52.710
I'll just call this one default.

57
00:03:52.710 --> 00:03:57.678
Here's item,
&gt;&gt; Francesca Sadikin: Move this

58
00:03:57.678 --> 00:03:59.004
logic over.

59
00:04:02.022 --> 00:04:06.418
&gt;&gt; Francesca Sadikin: And now,
instead of calling item.name,

60
00:04:06.418 --> 00:04:10.332
I just need to change this to default.

61
00:04:10.332 --> 00:04:11.551
Let me see.

62
00:04:11.551 --> 00:04:14.886
And that passes, okay.

63
00:04:14.886 --> 00:04:18.175
So when I look at the final
version right now,

64
00:04:18.175 --> 00:04:21.648
I can see that here is the duplication,
right?

65
00:04:21.648 --> 00:04:26.037
We're actually really just calling
this line over and over again,

66
00:04:26.037 --> 00:04:27.808
if it's a specialty item.

67
00:04:27.808 --> 00:04:30.302
Otherwise, it calls default.

68
00:04:30.302 --> 00:04:34.460
So, what I'm going to do is
actually extract this out,

69
00:04:34.460 --> 00:04:39.070
because the only difference is
actually the name of the item.

70
00:04:39.070 --> 00:04:44.500
So I'm gonna call this a new
variable called handlerName.

71
00:04:44.500 --> 00:04:48.981
And inside of it,
I need a way to determine whether

72
00:04:48.981 --> 00:04:53.157
something is a specialty item or
not, right?

73
00:04:53.157 --> 00:04:59.957
So, we could, one of the ways
that someone can do this is.

74
00:04:59.957 --> 00:05:07.669
We can create another collection
called specialtyItemName.

75
00:05:07.669 --> 00:05:13.572
It could be an array
with strings like this.

76
00:05:15.218 --> 00:05:18.972
&gt;&gt; Francesca Sadikin: You could do this,
and then we can use this here.

77
00:05:22.834 --> 00:05:25.427
&gt;&gt; Francesca Sadikin: I just check
whether the item name is inside of it.

78
00:05:25.427 --> 00:05:29.702
Otherwise,
&gt;&gt; Francesca Sadikin: And if it is,

79
00:05:29.702 --> 00:05:37.899
I use the item name, otherwise I use the
string default and then I call it here.

80
00:05:37.899 --> 00:05:44.524
So, instead of item.name,
I press it's handlerName, let's see.

81
00:05:44.524 --> 00:05:49.375
So that refactoring works,
but I don't like this way I'm

82
00:05:49.375 --> 00:05:54.424
doing it because now I'm copy
pasting strings everywhere,

83
00:05:54.424 --> 00:05:59.374
like if add it here now I also
have to remember to add it here.

84
00:05:59.374 --> 00:06:02.945
It's very easy to make a mistake.

85
00:06:02.945 --> 00:06:07.792
So instead, another way that
I'm going to do it is actually,

86
00:06:07.792 --> 00:06:12.657
I think I'm going to just extract
the keys out of this object.

87
00:06:12.657 --> 00:06:15.227
That's another way to do it.

88
00:06:15.227 --> 00:06:18.069
So I'm going to just change that here.

89
00:06:18.069 --> 00:06:23.031
So, I could also use object that keys

90
00:06:23.031 --> 00:06:27.682
of item handler and then check it.

91
00:06:27.682 --> 00:06:32.275
But I'm going this,
what I don't like about this is now

92
00:06:32.275 --> 00:06:36.401
it's taking the keys,
turning it into an array.

93
00:06:36.401 --> 00:06:41.621
And then now it's like a linear search to
see if that item is going to be in this

94
00:06:41.621 --> 00:06:47.190
array, and then, over time, with more
items, this is going to get expensive.

95
00:06:47.190 --> 00:06:52.284
So, what I'm gonna do instead
is use another method called.

96
00:06:52.284 --> 00:06:58.546
I want to say it's hasOwn, and
it takes the actual object inside of it.

97
00:06:58.546 --> 00:07:02.850
And then the item name,
like the key that we're looking for.

98
00:07:02.850 --> 00:07:05.704
So let's see if this refactor works.

99
00:07:05.704 --> 00:07:07.631
Let's remove that.

100
00:07:07.631 --> 00:07:10.067
Okay, so that works.

101
00:07:10.067 --> 00:07:15.955
What I like about this is that it's
just checking whether that key exists

102
00:07:15.955 --> 00:07:22.533
in the object without doing some sort of
linear search through an array instead.

103
00:07:22.533 --> 00:07:28.058
So, I think where this is at is a good
spot to introduce the actual item

104
00:07:28.058 --> 00:07:34.181
that we were supposed to introduce this
whole time, [LAUGH] contract items.

105
00:07:34.181 --> 00:07:39.797
I like where I'm at right now
because as we introduce new items,

106
00:07:39.797 --> 00:07:43.645
now, I have a dedicated
spot to add them in.

107
00:07:43.645 --> 00:07:45.815
And then inside update quality,

108
00:07:45.815 --> 00:07:51.256
we really shouldn't have to manipulate
this area too much now, looking forward.

