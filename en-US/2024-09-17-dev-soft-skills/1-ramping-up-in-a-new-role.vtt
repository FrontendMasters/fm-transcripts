WEBVTT

1
00:00:00.000 --> 00:00:01.612
Let's start from the beginning.

2
00:00:01.612 --> 00:00:04.742
Making a good impression when
you start your new role.

3
00:00:04.742 --> 00:00:06.071
So a very common fear for

4
00:00:06.071 --> 00:00:10.190
engineers when starting a new job is
wanting to demonstrate their value as

5
00:00:10.190 --> 00:00:13.922
quickly as possible because they
don't wanna get fired, right?

6
00:00:13.922 --> 00:00:18.206
And for engineers, that's usually
ramping up in the code base quickly,

7
00:00:18.206 --> 00:00:20.431
starting to work on technical tasks.

8
00:00:20.431 --> 00:00:24.587
And writing code well, so let's talk
about how to do all of those well,

9
00:00:24.587 --> 00:00:26.892
starting with ramping up in a new role.

10
00:00:26.892 --> 00:00:31.949
Ask questions, I know this seems a little
obvious, but I've noticed that engineers,

11
00:00:31.949 --> 00:00:35.244
are sometimes afraid to ask
questions in the beginning.

12
00:00:35.244 --> 00:00:39.384
Because they don't wanna look like
they don't know what's going on or

13
00:00:39.384 --> 00:00:40.699
what they're doing.

14
00:00:40.699 --> 00:00:45.071
I argue the opposite in that,
the first few months is the best time,

15
00:00:45.071 --> 00:00:49.136
because people are expecting you
to ask a ton of questions, and

16
00:00:49.136 --> 00:00:51.763
they're gonna give you a lot of leeway.

17
00:00:51.763 --> 00:00:55.311
The opposite is that if
you don't ask questions,

18
00:00:55.311 --> 00:01:00.462
you still don't know what's going on
a few months later, when you start

19
00:01:00.462 --> 00:01:05.298
asking those types of questions,
then it starts to look not great.

20
00:01:05.298 --> 00:01:10.398
The other really big tip that I have
is to request pair programming or

21
00:01:10.398 --> 00:01:15.958
shadowing another engineer that has
at least been there for maybe a year.

22
00:01:15.958 --> 00:01:20.071
To pick up all of
the unwritten cultural and

23
00:01:20.071 --> 00:01:23.964
coding norms that's for that company.

24
00:01:23.964 --> 00:01:27.977
This is usually something that
managers don't offer you, but

25
00:01:27.977 --> 00:01:30.940
if you request it,
it's not a problem at all.

26
00:01:30.940 --> 00:01:35.871
And what it would look like is that
you're going to ask to follow along

27
00:01:35.871 --> 00:01:40.632
with that other engineer as they work
on their task for maybe a day or

28
00:01:40.632 --> 00:01:42.520
two, or even up to a week.

29
00:01:42.520 --> 00:01:47.977
And then you're gonna observe what
they're doing and ask a ton of questions,

30
00:01:47.977 --> 00:01:52.205
including, what are the good and
bad parts in the code base?

31
00:01:52.205 --> 00:01:57.176
This seems like such a silly question,
but when you're entering code bases,

32
00:01:57.176 --> 00:01:59.435
most of the time they're layers and

33
00:01:59.435 --> 00:02:03.445
layers of code throughout time
with many different patterns.

34
00:02:03.445 --> 00:02:08.203
And so if you were trying to figure it
out by yourself by reading the code,

35
00:02:08.203 --> 00:02:11.560
you're probably gonna get very,
very confused.

36
00:02:11.560 --> 00:02:16.537
And you're gonna waste time trying to
figure out what is the most current

37
00:02:16.537 --> 00:02:18.094
set of code patterns.

38
00:02:18.094 --> 00:02:23.552
You'll also want to watch how they handle
testing, so are they writing unit tests?

39
00:02:23.552 --> 00:02:26.011
Are they doing manual QA?

40
00:02:26.011 --> 00:02:31.131
What exactly are they doing
to ensure maintainability?

41
00:02:31.131 --> 00:02:32.667
What's the PR process like?

42
00:02:32.667 --> 00:02:37.064
So after you create a pull request,
how many reviewers are they adding?

43
00:02:37.064 --> 00:02:40.045
What kind of feedback are they
expecting to receive?

44
00:02:40.045 --> 00:02:42.824
And then how long
generally are they waiting?

45
00:02:42.824 --> 00:02:47.150
And is it okay for them to just
merge without an official approval?

46
00:02:47.150 --> 00:02:50.084
Other things are what's
the pipeline to deployment?

47
00:02:50.084 --> 00:02:55.425
So once your code is ready to merge,
how many stages is it going

48
00:02:55.425 --> 00:03:00.897
through before it's actually
live in front of I assume users.

49
00:03:00.897 --> 00:03:03.921
Does the engineer have to do
anything to shepherd it forward?

50
00:03:03.921 --> 00:03:08.006
Which documentation sources are reliable?

51
00:03:08.006 --> 00:03:11.116
A lot of documentation out
there in the companies,

52
00:03:11.116 --> 00:03:13.440
they're not usually kept up to date.

53
00:03:13.440 --> 00:03:17.956
And so it's easy for you to go down the
wrong rabbit hole trying to figure out if

54
00:03:17.956 --> 00:03:20.404
what you're reading is accurate or not.

55
00:03:20.404 --> 00:03:24.305
Having someone point that out to you
will help you move a lot faster.

56
00:03:24.305 --> 00:03:29.250
Ideally, they're also going to start
introducing you to who your partner

57
00:03:29.250 --> 00:03:32.006
teams are, who your customer teams are.

58
00:03:32.006 --> 00:03:36.955
What do each of them do, who are the
different points of contact in each of

59
00:03:36.955 --> 00:03:39.483
those teams, and when to go to them.

60
00:03:39.483 --> 00:03:40.589
And hopefully,

61
00:03:40.589 --> 00:03:45.645
if you have developed enough of a rapport
with this engineer, they're also

62
00:03:45.645 --> 00:03:50.400
gonna share some company specific
gotchas that you should know about.

63
00:03:50.400 --> 00:03:54.890
So all of this,
if you do it through this shadowing or

64
00:03:54.890 --> 00:04:01.844
peer programming experience, you can ramp
up much more quickly as an engineer.

65
00:04:01.844 --> 00:04:04.504
Because all of these pieces
are actually really important for

66
00:04:04.504 --> 00:04:06.047
you to start delivering your work.

