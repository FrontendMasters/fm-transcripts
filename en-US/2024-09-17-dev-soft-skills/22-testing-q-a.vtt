WEBVTT

1
00:00:00.170 --> 00:00:04.226
&gt;&gt; Participant: Is just the recommended
testing tool with most JavaScript and

2
00:00:04.226 --> 00:00:06.070
TypeScript projects?

3
00:00:06.070 --> 00:00:07.090
&gt;&gt; Francesca Sadikin: I think so.

4
00:00:07.090 --> 00:00:09.860
&gt;&gt; Participant: When you started
working on the main code file,

5
00:00:09.860 --> 00:00:14.712
you wrote if else statement placing the
previous implementation logic in that else

6
00:00:14.712 --> 00:00:17.500
block with the new
requirements in an if block.

7
00:00:17.500 --> 00:00:21.745
So I'm wondering if it's
good practice to do that,

8
00:00:21.745 --> 00:00:26.765
if the reason wasn't to ensure
the previous code still runs.

9
00:00:26.765 --> 00:00:32.317
My concern is if I take over
the project with new requirements,

10
00:00:32.317 --> 00:00:37.449
it will it be good to follow
the same approach putting all of

11
00:00:37.449 --> 00:00:42.825
the previous code in else block,
and rewind in the if block.

12
00:00:42.825 --> 00:00:47.920
&gt;&gt; Francesca Sadikin: I guess that was the
way to create a seam in this project and

13
00:00:47.920 --> 00:00:50.825
in this particular code.

14
00:00:50.825 --> 00:00:56.165
I think it depends on what existing
code is going to look like for you.

15
00:00:56.165 --> 00:01:00.951
But the goal is to still
somehow be able to write

16
00:01:00.951 --> 00:01:04.388
code to inject new bits safely and

17
00:01:04.388 --> 00:01:09.881
somehow let the existing
system be the fallback.

18
00:01:09.881 --> 00:01:13.626
So if that looks like an if
else block in your code or

19
00:01:13.626 --> 00:01:17.564
something else, however,
way it can be achieved.

20
00:01:23.726 --> 00:01:28.867
&gt;&gt; Participant: In this code base, there's
a lot of if blocks, is there a way to

21
00:01:28.867 --> 00:01:34.978
refactor it, or is it just kind of to
show the amount of cases with testing?

22
00:01:34.978 --> 00:01:39.743
Or what's the approach to
making this code base better.

23
00:01:39.743 --> 00:01:44.923
&gt;&gt; Francesca Sadikin: So
it's interesting you're asking that.

24
00:01:44.923 --> 00:01:47.547
I am just writing the simplest
amount of code and

25
00:01:47.547 --> 00:01:51.653
then just focusing on different
aspects in different refactors.

26
00:01:51.653 --> 00:01:58.542
Someone could continue going with this and
continue refactoring it even more.

27
00:01:58.542 --> 00:02:01.632
That just wasn't the priority
that I had here.

28
00:02:01.632 --> 00:02:05.942
So yeah, if someone wanted something
different, they're free to do it.

29
00:02:05.942 --> 00:02:10.801
The important parts that I'm
trying to show here is that with

30
00:02:10.801 --> 00:02:15.758
the test suite giving you
immediate signals whether they'll

31
00:02:15.758 --> 00:02:20.078
come the code you're adding is working or
not.

32
00:02:20.078 --> 00:02:27.782
We can do many rounds of refactoring
doing a little like goal each time.

33
00:02:27.782 --> 00:02:33.335
This is in contrast to maybe like
taking all of these requirements and

34
00:02:33.335 --> 00:02:36.601
coming up with some sort of new perfect.

35
00:02:37.802 --> 00:02:41.356
Code to completely solve
all the requirements and

36
00:02:41.356 --> 00:02:44.492
be the ideal code that you're looking for.

37
00:02:45.532 --> 00:02:50.352
I found that when you do it that way,
it leads to somewhat more

38
00:02:50.352 --> 00:02:55.912
complicated code, and
it probably takes you a lot more time.

39
00:02:55.912 --> 00:03:00.538
And doing it in small little refactorings
like this means that at any moment,

40
00:03:00.538 --> 00:03:04.893
if you had a huge deadline,
you could ship it cuz it's working, right?

41
00:03:04.893 --> 00:03:09.006
And then you can focus on doing more
iterations to improve it continuously

42
00:03:09.006 --> 00:03:10.663
afterwards.

43
00:03:10.663 --> 00:03:15.511
So you don't have as much of a time
constraint to make it the most

44
00:03:15.511 --> 00:03:19.358
perfect thing at the risk
of it like that working.

45
00:03:19.358 --> 00:03:21.633
&gt;&gt; Participant 2: I guess
do you have any tips for

46
00:03:21.633 --> 00:03:26.547
when you're at an organization and
you get assigned a ticket for

47
00:03:26.547 --> 00:03:30.369
a sprint and
you hop in to add this functionality or

48
00:03:30.369 --> 00:03:34.742
debug this issue and
you see an opportunity to refactor.

49
00:03:34.742 --> 00:03:40.454
Do you have any tips for
deciding when that's appropriate?

50
00:03:40.454 --> 00:03:45.751
Or when you might just have enough
time to add the functionality and

51
00:03:45.751 --> 00:03:51.520
maybe continue with a pattern that you
know is wrong versus deciding that

52
00:03:51.520 --> 00:03:56.832
this would be a good time to actually
spend more time with factors.

53
00:03:57.842 --> 00:04:02.225
&gt;&gt; Francesca Sadikin: So definitely will
depend on how much time constraints you're

54
00:04:02.225 --> 00:04:03.802
actually working in.

55
00:04:03.802 --> 00:04:09.849
But if you had a little bit of time
trying to somehow create a new

56
00:04:09.849 --> 00:04:15.567
pattern in this code,
you don't have to fix everything.

57
00:04:15.567 --> 00:04:18.504
But just creating a little
bit of the new code and

58
00:04:18.504 --> 00:04:23.204
then encouraging all the other engineers
to hey, when you add to this file,

59
00:04:23.204 --> 00:04:27.834
please work in this pattern now and
let's stop adding to the debt.

60
00:04:27.834 --> 00:04:32.733
That's probably most likely what you're
going to do, because most engineers

61
00:04:32.733 --> 00:04:37.354
don't have the amount of dedicated
time to completely rewrite it, yeah.

62
00:04:37.354 --> 00:04:41.486
&gt;&gt; Participant 2: So,
in that case, do you have tips for

63
00:04:41.486 --> 00:04:45.619
how you kinda leave that note there for

64
00:04:45.619 --> 00:04:49.665
the next engineer that comes along?

65
00:04:49.665 --> 00:04:52.115
If you're leaving it in
an inconsistent state.

66
00:04:52.115 --> 00:04:55.681
&gt;&gt; Francesca Sadikin: Yeah, it's
interesting cuz in our current code base

67
00:04:55.681 --> 00:04:59.958
we do this, we have a lot of
different states of code as well, and

68
00:04:59.958 --> 00:05:02.679
what we actually use is lint warnings.

69
00:05:02.679 --> 00:05:07.677
So we have our team writing custom
ESlint warnings that says everything in

70
00:05:07.677 --> 00:05:13.329
this folder, don't add to this,
we do not want to keep using this pattern.

71
00:05:13.329 --> 00:05:15.602
So when someone opens that file,

72
00:05:15.602 --> 00:05:21.542
it'll actually show in a red underline
at the top that says, that note, right?

73
00:05:21.542 --> 00:05:26.047
So, we find that those
types of lint warnings

74
00:05:26.047 --> 00:05:30.670
are actually more
effective than just putting

75
00:05:30.670 --> 00:05:36.140
comments because it's not
as easily visible, yeah.

76
00:05:36.140 --> 00:05:41.483
Yeah, okay, so some takeaways, right?

77
00:05:41.483 --> 00:05:47.530
Hopefully as you saw in this exercise
when working with an existing code,

78
00:05:47.530 --> 00:05:52.029
with existing code base,
if there is not a test suite.

79
00:05:52.029 --> 00:05:56.546
I really like adding a test
suite one because It helps you

80
00:05:56.546 --> 00:05:59.675
understand the system right?

81
00:05:59.675 --> 00:06:04.295
Two, it's that immediate signal that
tells you whether what you're doing is

82
00:06:04.295 --> 00:06:08.625
correct or failing a bunch of
things when you're refactoring it.

83
00:06:08.625 --> 00:06:14.765
And three, it acts as documentation for
future developers.

84
00:06:14.765 --> 00:06:19.405
So I mentioned before that I don't
recommend adding comments to code

85
00:06:19.405 --> 00:06:21.516
because it gets stale.

86
00:06:21.516 --> 00:06:28.029
Tests cannot get stale because they're
usually run with every PR and every merge.

87
00:06:28.029 --> 00:06:35.121
And so it actually has a higher chance
of being current with the code.

88
00:06:35.121 --> 00:06:38.220
And it's always describing what it does,
and

89
00:06:38.220 --> 00:06:44.130
other engineers can continuously add more
tasks when they uncover bugs and stuff.

90
00:06:44.130 --> 00:06:47.550
So it's just like a live
document of what this code is.

91
00:06:47.550 --> 00:06:52.025
I also covered just this
concept of how do we try out

92
00:06:52.025 --> 00:06:56.190
figure out a way to add
little bits of new code?

93
00:06:58.074 --> 00:07:02.713
Safely without breaking a bunch of things,
using seams and

94
00:07:02.713 --> 00:07:05.324
to refactor code in iterations.

95
00:07:05.324 --> 00:07:08.678
So that's a big one,
it's like don't try and

96
00:07:08.678 --> 00:07:14.164
go after the most perfect code to
handle all the cases all at once.

97
00:07:14.164 --> 00:07:18.282
That's just gonna take more time,
it's gonna get really messy and

98
00:07:18.282 --> 00:07:20.449
working in little,little loops,

99
00:07:20.449 --> 00:07:24.655
still make sure that everything is
working if you had to just ship it.

