WEBVTT

1
00:00:00.270 --> 00:00:02.370
&gt;&gt; Francesca Sadikin: So
now let's get started on our exercise.

2
00:00:03.820 --> 00:00:04.792
So as a recap,

3
00:00:04.792 --> 00:00:10.050
what we're going to be doing in this
exercise is to work an existing code.

4
00:00:10.050 --> 00:00:14.920
So this is going to be very similar to
what you might be doing in your companies.

5
00:00:14.920 --> 00:00:19.680
So just to introduce you to what I
have set up in my local environment,

6
00:00:19.680 --> 00:00:23.290
I have all of the shop
requirements here on the left,

7
00:00:23.290 --> 00:00:28.156
including the new one that we need
to implement about conjured items.

8
00:00:29.236 --> 00:00:34.996
In the test files, I have these
little buttons called run and debug.

9
00:00:34.996 --> 00:00:39.196
This is coming from just
runner vs code extension.

10
00:00:39.196 --> 00:00:44.206
Essentially, it's just Is an easy way for
me to enter a debug mode in these tests.

11
00:00:44.206 --> 00:00:47.218
You don't have to have this set up for
yourself.

12
00:00:47.218 --> 00:00:53.798
I will show you the debugger as
part of this exercise later on.

13
00:00:53.798 --> 00:00:56.648
And I also have my terminal down here.

14
00:00:56.648 --> 00:01:01.695
I am already in the js-jest directory so,
that means that we're

15
00:01:01.695 --> 00:01:06.377
working in JavaScript with
the jest testing framework, and

16
00:01:06.377 --> 00:01:12.653
I'm gonna run the test suite by
running NPM run test, colon: watch.

17
00:01:12.653 --> 00:01:18.153
This runs it in test watch mode,
so you can see it run here.

18
00:01:18.153 --> 00:01:21.193
And every time I make
a save in any of my files,

19
00:01:21.193 --> 00:01:23.756
you can see that it just reruns for me.

20
00:01:25.834 --> 00:01:30.409
&gt;&gt; Francesca Sadikin: Okay,
so let us start.

21
00:01:30.409 --> 00:01:35.035
If you guys are not familiar with
just to give you also another little

22
00:01:35.035 --> 00:01:38.714
overview of what we're looking at here.

23
00:01:38.714 --> 00:01:42.681
This is the test block itself, right?

24
00:01:42.681 --> 00:01:48.637
So it says, it starts with an it, the
first parameter is the name of the test,

25
00:01:48.637 --> 00:01:53.953
and then we have a callback in which
we set up our test and in this case,

26
00:01:53.953 --> 00:01:59.087
we are creating our new gildedrose
shop with a single item of foo and

27
00:01:59.087 --> 00:02:01.103
also if I hover over item,

28
00:02:01.103 --> 00:02:07.346
you can see that it's providing me
the names of the different arguments.

29
00:02:07.346 --> 00:02:12.016
So the second argument is selling and
the third is quality.

30
00:02:12.016 --> 00:02:19.626
I am calling update quality of the shop,
which returns the set of items.

31
00:02:19.626 --> 00:02:22.736
And then here is
the actual test assertion,

32
00:02:22.736 --> 00:02:28.282
where in this case I'm just grabbing
the first item in this items collection,

33
00:02:28.282 --> 00:02:31.412
checking that the name is currently fixme.

34
00:02:31.412 --> 00:02:35.837
So this first test is failing.

35
00:02:35.837 --> 00:02:38.157
And so let's actually make this pass,
right?

36
00:02:38.157 --> 00:02:42.863
So it's telling us that it expected fixme,
so that's what we wrote here,

37
00:02:42.863 --> 00:02:44.877
but it received foo.

38
00:02:44.877 --> 00:02:47.917
So to make this pass,
I'm just going to change this back to foo.

39
00:02:49.197 --> 00:02:50.987
And so this one now passes.

40
00:02:52.127 --> 00:02:57.617
So I know this is a test that they
just provided to help us get started.

41
00:02:57.617 --> 00:03:00.393
But I actually think this is
a useful test we can keep.

42
00:03:01.574 --> 00:03:03.993
We are just going to rename it,
because really,

43
00:03:03.993 --> 00:03:07.464
it's just checking that there
is a name property on the item.

44
00:03:07.464 --> 00:03:12.414
So I'm going to rename this as
should have a name value, all right.

45
00:03:15.314 --> 00:03:22.351
So I'm going to now go down this list
on the left and right new unit test.

46
00:03:22.351 --> 00:03:25.606
The next one is that all
items have a cell and value,

47
00:03:25.606 --> 00:03:30.231
which denotes the number of
days we have to sell the item.

48
00:03:30.231 --> 00:03:35.085
I'm going to combine that with this
requirement right here that says that

49
00:03:35.085 --> 00:03:38.764
at the end of the day,
the system lowers both the sell and

50
00:03:38.764 --> 00:03:42.110
end quality values for every item.

51
00:03:42.110 --> 00:03:46.827
So I'm going to write a new test block and
I'm going to call it,

52
00:03:46.827 --> 00:03:52.560
it should have a cell in value that
decreases at the end of the day.

53
00:03:52.560 --> 00:03:59.659
So it should have a cell in value
that decreases at the end of the day.

54
00:04:03.043 --> 00:04:05.073
&gt;&gt; Francesca Sadikin: Just
something to note here,

55
00:04:05.073 --> 00:04:09.139
you can see that I am starting
all of my names with it should.

56
00:04:09.139 --> 00:04:13.533
This is a little just naming convention
where we start with should and

57
00:04:13.533 --> 00:04:17.709
then the grammatically correct
sentence of what this test does.

58
00:04:18.869 --> 00:04:26.411
So Inside, I'm just going to create my new
gildedrose shop, which has a single item.

59
00:04:26.411 --> 00:04:30.374
It doesn't quite matter what
the name of this item is, so

60
00:04:30.374 --> 00:04:35.921
I'm just going to use foo, and I'll use
a selling of 10 and a quality of 20.

61
00:04:35.921 --> 00:04:43.729
I'm going to call gildedrose update
quality which returns the items,

62
00:04:43.729 --> 00:04:48.803
and now I expect that
the first item's selling

63
00:04:48.803 --> 00:04:54.542
is going to be 9,
cuz it's going to decrease by 1.

64
00:04:54.542 --> 00:04:58.964
Okay, so we have that test, and
then so we're gonna write our next one,

65
00:04:58.964 --> 00:05:03.994
very similar, except it's going to
be about the quality value instead.

66
00:05:03.994 --> 00:05:10.697
So it should have a quality value
that decreases at the end of the day.

67
00:05:14.516 --> 00:05:17.435
&gt;&gt; Francesca Sadikin: Going to
create my new gildedrose shop.

68
00:05:17.435 --> 00:05:24.856
Single item of food use the same selling,
same quality value.

69
00:05:24.856 --> 00:05:29.940
I'm gonna create my items from gildedrose,

70
00:05:29.940 --> 00:05:35.023
update quality, and
this time I am asserting

71
00:05:35.023 --> 00:05:40.529
that the first items
quality is going to be 19.

72
00:05:40.529 --> 00:05:45.499
Okay, so just a little forewarning, it can
get a little tedious to write all of these

73
00:05:45.499 --> 00:05:50.469
tests, but stay with me, because I'm gonna
show you how powerful this test suite is

74
00:05:50.469 --> 00:05:53.410
going to be once we enter
our refactoring phases.

75
00:05:54.470 --> 00:05:58.850
All right, we have two more for
default items.

76
00:05:58.850 --> 00:06:03.463
Once the sell by date has passed
quality degrades twice as fast.

77
00:06:03.463 --> 00:06:05.993
So I'm gonna convert that into the name.

78
00:06:05.993 --> 00:06:12.283
It should degrade quality twice
as fast when selling has passed.

79
00:06:12.283 --> 00:06:20.285
So it should degrade quality twice
as fast once selling has passed.

80
00:06:22.339 --> 00:06:26.452
&gt;&gt; Francesca Sadikin: So inside,
I'm creating my new gildedrose

81
00:06:26.452 --> 00:06:31.343
shop with the single item of foo,
except this time,

82
00:06:31.343 --> 00:06:36.455
I'm going to use a sell in of
0 to mark it as a sell by date

83
00:06:36.455 --> 00:06:41.345
has that has passed, and
then I'm gonna use quality

84
00:06:41.345 --> 00:06:46.373
of 20 going to check the items
from update quality.

85
00:06:46.373 --> 00:06:51.345
And this time,
I'm going to expect that the items,

86
00:06:51.345 --> 00:06:57.656
well let me check that the sell
in is continuing to decrement.

87
00:06:57.656 --> 00:07:01.125
So in this case, I expect -1.

88
00:07:01.125 --> 00:07:02.625
Yep, that's right.

89
00:07:02.625 --> 00:07:05.805
And then now I check that item's quality.

90
00:07:07.125 --> 00:07:11.206
So twice as fast means that
it's going to be 18, okay.

91
00:07:11.206 --> 00:07:16.087
The last one here for
regular items is that

92
00:07:16.087 --> 00:07:20.969
the quality of an item is never negative,

93
00:07:20.969 --> 00:07:25.862
so it should never have a negative value.

94
00:07:25.862 --> 00:07:34.310
That's what I'll call it should never
have a negative value, quality value.

95
00:07:37.364 --> 00:07:40.284
&gt;&gt; Francesca Sadikin: Here's my
little setup of the gildedrose shop.

96
00:07:42.341 --> 00:07:46.987
&gt;&gt; Francesca Sadikin: And this time
I will still use foo as the name,

97
00:07:46.987 --> 00:07:52.976
selling is 10, accept, and
then the quality is now 0,

98
00:07:52.976 --> 00:07:56.297
so that's what I'm checking.

99
00:07:56.297 --> 00:08:01.188
So const items =
gildedrose update quality.

100
00:08:03.997 --> 00:08:10.736
&gt;&gt; Francesca Sadikin: And so I expect
that the items quality is going to be 0,

101
00:08:10.736 --> 00:08:17.046
it's not going to continue decrementing,
okay.

102
00:08:17.046 --> 00:08:19.921
So I have the first set of tests and

103
00:08:19.921 --> 00:08:24.362
I can see that we have quite
a few specialty items.

104
00:08:24.362 --> 00:08:28.062
And what I want to do is start
grouping these tests together.

105
00:08:28.062 --> 00:08:33.732
So you notice these describe blocks,
all it's doing is just grouping the tests.

106
00:08:33.732 --> 00:08:34.872
That's all it is.

107
00:08:34.872 --> 00:08:40.511
And so I'm going to say that this
is the default item behavior suite,

108
00:08:40.511 --> 00:08:43.827
I'm going to move all of my tests so far.

109
00:08:46.410 --> 00:08:49.278
&gt;&gt; Francesca Sadikin: I clicked
Option up on a Mac, and

110
00:08:49.278 --> 00:08:52.791
that just moved all the lines up for me.

111
00:08:52.791 --> 00:08:55.398
And so now you can see that new grouping,

112
00:08:55.398 --> 00:08:58.555
all of these tests are under
this new title here.

113
00:08:58.555 --> 00:08:59.566
So that's all it's doing.

