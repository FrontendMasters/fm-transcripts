WEBVTT

1
00:00:00.130 --> 00:00:04.917
Okay, so it's time to stop talking and
seeing the slides,

2
00:00:04.917 --> 00:00:07.706
it's time to see some Swift code.

3
00:00:07.706 --> 00:00:10.712
So I'm getting out of the presentation.

4
00:00:10.712 --> 00:00:16.309
And if you downloaded the assets,
remember the assets are in

5
00:00:16.309 --> 00:00:21.480
the companion website,
in the introduction section.

6
00:00:21.480 --> 00:00:26.802
You have there the workshop assets,
remember, it's here, workshop assets.

7
00:00:26.802 --> 00:00:31.166
Inside that folder you are going to

8
00:00:31.166 --> 00:00:35.989
find a file with the name playground.

9
00:00:35.989 --> 00:00:40.627
Let me show you,
Swift101.playground, this one,

10
00:00:40.627 --> 00:00:43.629
Swift101.playground, okay?

11
00:00:43.629 --> 00:00:48.083
So if you have already installed Xcode,

12
00:00:48.083 --> 00:00:54.770
you can just double click that file and
it will open in Xcode.

13
00:00:54.770 --> 00:00:56.805
So what's a playground?

14
00:00:56.805 --> 00:01:01.554
A playground is some kind of
special project type available in

15
00:01:01.554 --> 00:01:05.625
Xcode that you can also
share with an iPad.

16
00:01:05.625 --> 00:01:09.440
There is an iPad application
known as Swift playgrounds.

17
00:01:09.440 --> 00:01:14.770
Originally a playground was
a way to play with Swift,

18
00:01:14.770 --> 00:01:19.410
without actually making a real app, okay?

19
00:01:19.410 --> 00:01:24.250
The platform actually evolved a lot
over the years, and now you can actually

20
00:01:24.250 --> 00:01:29.840
create games using playgrounds without
actually creating a real Xcode project.

21
00:01:29.840 --> 00:01:33.520
And you can also create
that directly on the iPad.

22
00:01:33.520 --> 00:01:35.020
And you can publish that in the App Store.

23
00:01:35.020 --> 00:01:39.933
You're not going to use the playground
more than to play here quickly with Swift

24
00:01:39.933 --> 00:01:40.821
code, okay?

25
00:01:40.821 --> 00:01:44.377
Just for playing with Swift code
without actually creating an iPhone

26
00:01:44.377 --> 00:01:45.990
application, okay?

27
00:01:45.990 --> 00:01:51.793
So we can first focused in the language,
directly.

28
00:01:51.793 --> 00:01:56.730
So you're going to see here, okay?

29
00:01:56.730 --> 00:02:01.207
At the left,
a couple of some kind of chapters.

30
00:02:01.207 --> 00:02:06.324
So the playground today supports,
it's like an interactive book, okay?

31
00:02:06.324 --> 00:02:10.417
So we can have chapters and pages,
it's actually pretty simple, anyway.

32
00:02:10.417 --> 00:02:13.467
So you can double click
on those chapters and

33
00:02:13.467 --> 00:02:18.245
you will see in the main editor,
the code that we have right now.

34
00:02:18.245 --> 00:02:21.965
So that's what I'm doing right now.

35
00:02:21.965 --> 00:02:27.740
So Swift code, as I mentioned before,
looks like any modern language.

36
00:02:28.850 --> 00:02:33.020
For example,
let's talk a little bit about expressions.

37
00:02:33.020 --> 00:02:36.764
So, what you can see here that we
can create variables, very simple.

38
00:02:36.764 --> 00:02:41.883
What I'm going to do here is,
you don't need to do this, okay?

39
00:02:41.883 --> 00:02:43.299
Just pay attention for a second.

40
00:02:43.299 --> 00:02:47.604
I'm going to create a new
playground page just to

41
00:02:47.604 --> 00:02:51.280
start from scratch, empty page, okay?

42
00:02:51.280 --> 00:02:52.712
I have an empty page.

43
00:02:52.712 --> 00:02:55.029
So how would you create the variable?

44
00:02:55.029 --> 00:03:00.580
var, see we don't do JavaScript or
let's say classic JavaScript, if you will.

45
00:03:00.580 --> 00:03:04.260
So var, my name is Maximiliano, okay?

46
00:03:06.250 --> 00:03:08.430
So what about semicolon?

47
00:03:08.430 --> 00:03:14.202
It's there, but typically we don't use
it unless we have two sentences or

48
00:03:14.202 --> 00:03:16.962
two instructions in the same line.

49
00:03:16.962 --> 00:03:19.091
That typically we don't have, okay?

50
00:03:19.091 --> 00:03:22.300
So we are not going to use semicolon.

51
00:03:22.300 --> 00:03:24.184
So the best practice is not to use it.

52
00:03:24.184 --> 00:03:26.470
It's there but we don't need it, okay?

53
00:03:26.470 --> 00:03:30.880
So if you wanna send something to
the console, we have the print function.

54
00:03:30.880 --> 00:03:33.950
So it's print and the name.

55
00:03:33.950 --> 00:03:38.040
So if you look here, where is the type?

56
00:03:38.040 --> 00:03:40.030
Hey, Max, you lied to us.

57
00:03:40.030 --> 00:03:46.520
Well, that's how implicit typing or
implicit data type works.

58
00:03:46.520 --> 00:03:49.051
Actually name has a type.

59
00:03:49.051 --> 00:03:55.247
So if you press the option key,
that's out on some keyboards.

60
00:03:55.247 --> 00:03:59.993
So the option key,
you can hover references, and

61
00:03:59.993 --> 00:04:03.498
the cursor becomes a question mark.

62
00:04:03.498 --> 00:04:09.131
So if you option click on any reference,
here you will see, for

63
00:04:09.131 --> 00:04:14.253
example, that the variable,
it's actually a String.

64
00:04:14.253 --> 00:04:17.813
So it has the data type, okay?

65
00:04:17.813 --> 00:04:20.940
Even if I didn't set the data type.

66
00:04:20.940 --> 00:04:24.164
And as you can see, I don't have
a function, I don't have a class,

67
00:04:24.164 --> 00:04:25.990
I'm just writing code.

68
00:04:25.990 --> 00:04:27.900
Swift let's you do that.

69
00:04:27.900 --> 00:04:29.900
Just writing code.

70
00:04:29.900 --> 00:04:32.720
So of course,
we can create functions and so on.

71
00:04:32.720 --> 00:04:36.800
But, by the way,
let's create a function quickly.

72
00:04:36.800 --> 00:04:41.458
So if you wanna create a function, it's
the func keyword, instead of function,

73
00:04:41.458 --> 00:04:46.510
func, then the name parentheses,
as in JavaScript or many other languages.

74
00:04:46.510 --> 00:04:50.047
Code block, so we're still using
curly braces for code blocks,

75
00:04:50.047 --> 00:04:52.440
and then the code name
is a global variable.

76
00:04:52.440 --> 00:04:55.128
So it seems like we can
actually use it here.

77
00:04:55.128 --> 00:04:59.994
And if you wanna call the function,
it's just greet parentheses.

78
00:04:59.994 --> 00:05:03.451
So actually it's familiar to all of you,
this code.

79
00:05:03.451 --> 00:05:05.587
It's not actually a big deal.

80
00:05:05.587 --> 00:05:10.361
So that's why they're going to really
fast forward to the differences,

81
00:05:10.361 --> 00:05:13.754
and not the part where you're
going to feel at home.

82
00:05:13.754 --> 00:05:16.618
So opening now basic expressions.

83
00:05:16.618 --> 00:05:22.005
So let's see just the difference, okay?

84
00:05:22.005 --> 00:05:26.900
First, everything that we declare
is actually accessible by

85
00:05:26.900 --> 00:05:30.202
other files in the same app or framework.

86
00:05:30.202 --> 00:05:31.742
We don't know what the framework is, yet.

87
00:05:31.742 --> 00:05:33.102
It's like a new term here.

88
00:05:33.102 --> 00:05:39.641
A framework is a library, a static library
code, like a DLL or Windows, okay?

89
00:05:39.641 --> 00:05:45.880
When you create just a file that contains
code that is not actually an app.

90
00:05:45.880 --> 00:05:49.744
So that means that everything
that we declare in a file,

91
00:05:49.744 --> 00:05:55.940
it's actually accessible by default
to other files in the project, okay?

92
00:05:55.940 --> 00:05:59.155
We will see later how we
can narrow the scope or

93
00:05:59.155 --> 00:06:02.039
the visibility of things that we write.

94
00:06:03.260 --> 00:06:07.530
Boolean conditions don't need parentheses.

95
00:06:07.530 --> 00:06:11.944
That looks weird, but
it's part of the this idea

96
00:06:11.944 --> 00:06:17.120
of reduce redundancy and
also reduce bureaucracy.

97
00:06:17.120 --> 00:06:20.980
So in most of the other
C based languages or

98
00:06:20.980 --> 00:06:26.680
when the syntax is C based,
we have parentheses here.

99
00:06:26.680 --> 00:06:27.735
Well, we don't need the parentheses.

100
00:06:27.735 --> 00:06:34.486
If we add the parentheses, nothing happens
because it's just the parentheses, but

101
00:06:34.486 --> 00:06:41.070
you need to get used to not use them, and
that makes your code easier to read, okay?

102
00:06:41.070 --> 00:06:45.074
I know it's weird,
you will see a couple of weird things, but

103
00:06:45.074 --> 00:06:47.847
believe me because I
was first a JavaScript

104
00:06:47.847 --> 00:06:52.560
developer before being a Swift developer,
you get used to that, okay?

105
00:06:52.560 --> 00:06:54.245
And then you like it.

106
00:06:54.245 --> 00:06:58.667
So the same happens here on the while, for
example, we don't need parentheses for

107
00:06:58.667 --> 00:07:00.008
the Boolean condition.

108
00:07:00.008 --> 00:07:04.389
By the way we don't have the ++ operator,
okay?

109
00:07:04.389 --> 00:07:08.100
It's not available, if you try to
do that you will get an error.

110
00:07:08.100 --> 00:07:12.175
And also you have help here.

111
00:07:12.175 --> 00:07:16.567
Did you mean +=1, okay?

112
00:07:16.567 --> 00:07:19.404
There is an explanation
why ++ is not here.

113
00:07:19.404 --> 00:07:22.333
It doesn't matter for now,
but it's an executive order.

114
00:07:22.333 --> 00:07:24.852
We don't have ++, yeah?

115
00:07:24.852 --> 00:07:30.896
&gt;&gt; Thanks, so on line 13,
what if I have &amp;&amp;'s and the OR's?

116
00:07:30.896 --> 00:07:33.744
&gt;&gt; [CROSSTALK]
&gt;&gt; If you have an &amp; you can actually do

117
00:07:33.744 --> 00:07:35.833
this without parentheses.

118
00:07:35.833 --> 00:07:40.752
If you need parentheses it's fine,
you can still, because sometimes you say,

119
00:07:40.752 --> 00:07:44.363
okay, or wherever well it may
be now we have some issues, so

120
00:07:44.363 --> 00:07:47.210
maybe we wanna use
parentheses at some point.

121
00:07:47.210 --> 00:07:53.638
It's okay but you don't need this global
parentheses to the whole condition.

122
00:07:53.638 --> 00:07:56.864
&gt;&gt; Thank you.
&gt;&gt; Yeah, so Boolean operators

123
00:07:56.864 --> 00:08:01.887
are the same, equal,
greater than, less than.

124
00:08:01.887 --> 00:08:03.645
So that's common.

125
00:08:03.645 --> 00:08:07.731
We're not going to spend
too much time with that.

126
00:08:07.731 --> 00:08:11.957
Name and style guidelines, you will also
feel at home if you're a web developer,

127
00:08:11.957 --> 00:08:15.081
a full stack developer because
this looks like JavaScript or

128
00:08:15.081 --> 00:08:16.940
the Java coding style guidelines.

129
00:08:16.940 --> 00:08:20.658
So variables, constants, and
function names use camelCase.

130
00:08:20.658 --> 00:08:25.979
So we start with lowercase and
then we go uppercase on next words.

131
00:08:25.979 --> 00:08:30.692
And data types, we don't know all
these data types what they mean.

132
00:08:30.692 --> 00:08:35.047
You can guess some of them,
but they use TitleCase.

133
00:08:35.047 --> 00:08:36.997
So we start with uppercase.

134
00:08:36.997 --> 00:08:39.937
So it's actually similar to Java or
JavaScript,

135
00:08:39.937 --> 00:08:42.739
this is how typically we
do this in JavaScript.

136
00:08:42.739 --> 00:08:48.547
Identifiers, it's similar to most
languages such as you cannot use spaces,

137
00:08:48.547 --> 00:08:50.836
but you can use emojis, okay?

138
00:08:50.836 --> 00:08:54.060
Or you can use special accents.

139
00:08:54.060 --> 00:08:57.820
Or for example, Japanese or
Chinese characters, okay?

140
00:08:59.200 --> 00:09:01.464
Yeah, I'm not sure if you wanna do that,

141
00:09:01.464 --> 00:09:04.730
even if you are a Java Japanese developer,
okay?

142
00:09:04.730 --> 00:09:08.484
In terms of sharing the code,
but it's possible and

143
00:09:08.484 --> 00:09:13.850
you can have a variable as you can
see here, that is just a cow, okay?

144
00:09:13.850 --> 00:09:18.018
And then this is actually,
I mean, it feels funny, but

145
00:09:18.018 --> 00:09:22.629
actually if you are a teaching
code to kids, you can then say,

146
00:09:22.629 --> 00:09:26.643
cow plus cow, or
something like that I have two cows.

147
00:09:26.643 --> 00:09:30.080
It works from that sort of point of view.

148
00:09:30.080 --> 00:09:33.500
Of course we are not going to use that,
okay?

149
00:09:33.500 --> 00:09:37.400
In a real iOS project, but
it's actually possible, okay?

150
00:09:37.400 --> 00:09:39.320
Have in mind that.

151
00:09:39.320 --> 00:09:42.800
So abstain using emojis,
because the emoji,

152
00:09:42.800 --> 00:09:48.688
another thing that has is that, for
example, if I have an error or something,

153
00:09:48.688 --> 00:09:55.130
let's say I create a debug variable,
I can attach to that variable an emoji.

154
00:09:55.130 --> 00:09:57.466
So for example a warning emoji.

155
00:09:57.466 --> 00:10:04.830
And whatever I'm doing here,
that emoji has color, okay?

156
00:10:04.830 --> 00:10:08.449
Which highlights our view and
we are looking at the code.

157
00:10:08.449 --> 00:10:13.518
That may mean I need to delete that
before submitting this to the App Store,

158
00:10:13.518 --> 00:10:16.021
before going in production, okay?

159
00:10:16.021 --> 00:10:18.910
So it might mean something
that I need to delete.

160
00:10:18.910 --> 00:10:22.360
So it's something that I've
seen like a pattern, okay?

161
00:10:22.360 --> 00:10:25.541
And talking about visibility,
scope, visibility,

162
00:10:25.541 --> 00:10:27.980
everything is public by default.

163
00:10:27.980 --> 00:10:30.150
So it's public to the whole project.

164
00:10:30.150 --> 00:10:37.470
We also have private that actually it
depends on where this variable is defined.

165
00:10:37.470 --> 00:10:39.350
It changes the scope.

166
00:10:39.350 --> 00:10:41.443
Because it can be
a variable inside a class,

167
00:10:41.443 --> 00:10:44.670
inside a structure that we
don't know what that is yet.

168
00:10:44.670 --> 00:10:48.750
And it's going to be private
to that particular data type.

169
00:10:48.750 --> 00:10:53.998
And also we have fileprivate,
which is kind of new to most of you.

170
00:10:53.998 --> 00:10:58.877
Fileprivate actually makes
that variable available to all

171
00:10:58.877 --> 00:11:03.861
the code in this file,
even if we have several declaration.

172
00:11:03.861 --> 00:11:08.531
For example, I can create two
classes in the same file in Swift,

173
00:11:08.531 --> 00:11:12.697
something that is not possible
on some other languages.

174
00:11:12.697 --> 00:11:17.570
Well actually I can create
a variable here, for example,

175
00:11:17.570 --> 00:11:20.563
I don't know, name = "I'm A".

176
00:11:20.563 --> 00:11:28.264
And then let's say that class B
has a function, let's say test.

177
00:11:28.264 --> 00:11:32.803
And that function will
create an object of class A.

178
00:11:32.803 --> 00:11:35.424
How would you create
a variable of class A?

179
00:11:35.424 --> 00:11:41.375
Well, my object equals to and
you're expecting new A, right?

180
00:11:41.375 --> 00:11:46.404
Well, good news or
bad news, I don't know yet.

181
00:11:46.404 --> 00:11:50.861
You pick the 1,
we don't have the new keyword.

182
00:11:50.861 --> 00:11:54.915
Is the same, we call the,
let's say for now, constructor, but

183
00:11:54.915 --> 00:11:56.553
without the new keyword.

184
00:11:56.553 --> 00:11:59.340
We just call the class name, okay?

185
00:11:59.340 --> 00:12:04.365
Let's call this ClassA and ClassB,
so we know what we're doing.

186
00:12:04.365 --> 00:12:06.370
There is no new keyword.

187
00:12:06.370 --> 00:12:09.117
So, of course, I can get the name.

188
00:12:09.117 --> 00:12:14.851
But if that name is private,
then because ClassB is a different class,

189
00:12:14.851 --> 00:12:17.700
we don't have the name, okay?

190
00:12:17.700 --> 00:12:18.340
You know the deal.

191
00:12:19.460 --> 00:12:24.744
But fileprivate will actually make
it private only to this file,

192
00:12:24.744 --> 00:12:26.291
not to other file.

193
00:12:26.291 --> 00:12:30.779
But because this ClassB is
in the same file, okay?

194
00:12:30.779 --> 00:12:35.055
I'm talking about the file system,
the file in the file system,

195
00:12:35.055 --> 00:12:36.550
actually I can use it.

196
00:12:36.550 --> 00:12:39.530
It's something new compared
with other languages, okay?

197
00:12:39.530 --> 00:12:45.458
But to be honest, more than defining
things as private when you want

198
00:12:45.458 --> 00:12:51.282
to encapsulate some data that you
want to access from the outside,

199
00:12:51.282 --> 00:12:55.661
we're not going to focus
too much on visibility.

200
00:12:55.661 --> 00:13:00.752
We don't typically see a lot of
Swift code defining public private,

201
00:13:00.752 --> 00:13:05.596
fileprivate, it's just the default,
most of the time, yeah?

202
00:13:05.596 --> 00:13:07.827
&gt;&gt; So
even if you did define it as private,

203
00:13:07.827 --> 00:13:11.420
isn't it still a good practice
to underscore that invisible?

204
00:13:11.420 --> 00:13:15.745
&gt;&gt; No, in Swift,
we don't underscore as a style guideline.

205
00:13:15.745 --> 00:13:17.404
Of course, if you want,
you can do that, okay?

206
00:13:17.404 --> 00:13:22.499
The underscore is a valid identifier for
your variables.

207
00:13:22.499 --> 00:13:27.240
But we don't use that guideline in Swift.

208
00:13:27.240 --> 00:13:28.959
You can go with Swift guidelines, and

209
00:13:28.959 --> 00:13:32.090
you will find the guideline from
different companies on how to name.

210
00:13:32.090 --> 00:13:35.179
Of course Apple has its
own style guideline, but

211
00:13:35.179 --> 00:13:37.447
other companies are also sharing.

212
00:13:37.447 --> 00:13:39.995
I think, Google has also one for Swift.

213
00:13:39.995 --> 00:13:45.702
So they are internal guidelines, they're
open source, or they're creating commons.

214
00:13:45.702 --> 00:13:49.920
So you can actually take those guidelines,
as well, if you want to,

215
00:13:49.920 --> 00:13:54.799
where we typically don't use the
underscore pattern for private properties,

216
00:13:54.799 --> 00:13:56.900
or variables, okay?

217
00:13:56.900 --> 00:14:00.990
So the thing is that because this
is a compile language, okay?

218
00:14:00.990 --> 00:14:03.578
The compiler will not compile our app,

219
00:14:03.578 --> 00:14:07.428
if you are accessing something
private from the outside.

220
00:14:07.428 --> 00:14:10.467
So I mean,
there is no need to learn other languages,

221
00:14:10.467 --> 00:14:14.667
because you can always actually access
private variables, if you want.

222
00:14:14.667 --> 00:14:17.209
The underscore is like a mark,
like a flag,

223
00:14:17.209 --> 00:14:21.833
saying from the outside if there is
an underscore you shouldn't be doing this.

224
00:14:21.833 --> 00:14:27.540
But, yeah, we don't use that
technique here in Swift, okay?

225
00:14:27.540 --> 00:14:30.358
So as you can see for now, okay?

226
00:14:30.358 --> 00:14:34.856
It looks familiar, it doesn't look
like a foreign language, okay?

227
00:14:34.856 --> 00:14:39.070
That you can get used quickly, but
of course, not everything is the same.

