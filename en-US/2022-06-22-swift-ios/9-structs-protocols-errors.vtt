WEBVTT

1
00:00:00.000 --> 00:00:02.209
Do you have any questions?

2
00:00:02.209 --> 00:00:03.960
At this point, yep?

3
00:00:03.960 --> 00:00:09.611
&gt;&gt; Yeah, so earlier you had,
didn't you have

4
00:00:09.611 --> 00:00:15.106
types that were you could have like-
&gt;&gt; Tuples?

5
00:00:15.106 --> 00:00:19.866
&gt;&gt; Yeah, tuples, so Is it better to

6
00:00:19.866 --> 00:00:24.460
have the structures or tuples?

7
00:00:24.460 --> 00:00:31.261
&gt;&gt; So let's say that the human
has a name and let's say an age.

8
00:00:31.261 --> 00:00:35.266
Now, you can see that they
will get an error in line 14,

9
00:00:35.266 --> 00:00:39.449
because the age is not optional
I need to add the age, okay?

10
00:00:39.449 --> 00:00:41.560
And let's say I'm 15, right?

11
00:00:41.560 --> 00:00:47.413
I look like 15, so
what's the difference between this and

12
00:00:47.413 --> 00:00:54.182
defining a type like, let's say I
have Anna instead of using a human,

13
00:00:54.182 --> 00:00:58.887
a structure,
I define an string integer tuple,

14
00:00:58.887 --> 00:01:05.010
that I can even set a name for
each segment of the tuple, right?

15
00:01:05.010 --> 00:01:11.200
So and then I say, Anna,
is 20, what's the difference?

16
00:01:11.200 --> 00:01:18.630
Well first, in this case,oh,
because it's an integer, no a string.

17
00:01:18.630 --> 00:01:24.861
So I cannot have functions in tuples,
so no methods.

18
00:01:24.861 --> 00:01:31.080
And also no protocol compliance
that we didn't see that yet.

19
00:01:31.080 --> 00:01:34.541
But those are the main differences, okay?

20
00:01:34.541 --> 00:01:40.780
So you use tuples for very simple data.

21
00:01:40.780 --> 00:01:46.851
Again, coordinates something that you
don't wanna mess with that just instead

22
00:01:46.851 --> 00:01:52.670
of having x and y, you create coordinate
with x and y inside and nothing else.

23
00:01:52.670 --> 00:01:58.987
But if you wanna add behavior, it's better
to create a structure, but in memory,

24
00:01:58.987 --> 00:02:05.050
there are kind of similar, in terms of
the memory used, it's kind of similar.

25
00:02:05.050 --> 00:02:09.455
&gt;&gt; Confused, because I thought he said
structures were of no methods, but

26
00:02:09.455 --> 00:02:10.690
they have methods.

27
00:02:10.690 --> 00:02:14.130
&gt;&gt; Yeah, structures, they can have
methods, they can have initializers.

28
00:02:14.130 --> 00:02:17.350
&gt;&gt; So with objects is it just reference,
no reference, that's the only difference?

29
00:02:17.350 --> 00:02:18.270
&gt;&gt; With classes.

30
00:02:18.270 --> 00:02:19.400
&gt;&gt; That's the only difference,
with classes?

31
00:02:19.400 --> 00:02:20.488
&gt;&gt; Yeah.

32
00:02:20.488 --> 00:02:21.123
&gt;&gt; Okay.

33
00:02:21.123 --> 00:02:24.850
&gt;&gt; And also, you don't have a super class.

34
00:02:24.850 --> 00:02:25.950
&gt;&gt; Okay, you can hear it.

35
00:02:25.950 --> 00:02:28.960
&gt;&gt; So you don't have the part of OOP.

36
00:02:28.960 --> 00:02:30.260
&gt;&gt; Okay, okay.

37
00:02:30.260 --> 00:02:36.266
&gt;&gt; So it's a kind of a half
baked class but more efficient.

38
00:02:36.266 --> 00:02:38.280
&gt;&gt; Okay, so it's created to
have more efficiency in it.

39
00:02:38.280 --> 00:02:42.433
&gt;&gt; Yeah, exactly, but
on a normal IOS application

40
00:02:42.433 --> 00:02:47.004
you prefer efficiency over
what OOP is offering you.

41
00:02:47.004 --> 00:02:51.261
And most of the time you have a lot of
situations that you're using classes when

42
00:02:51.261 --> 00:02:54.551
other languages because you
don't have our other option and

43
00:02:54.551 --> 00:02:56.380
maybe extracts are a better fit.

44
00:03:00.005 --> 00:03:00.813
Okay?

45
00:03:00.813 --> 00:03:04.014
&gt;&gt; So whenever you don't need to have
full objects then this is better.

46
00:03:04.014 --> 00:03:07.791
&gt;&gt; Yeah, in most cases you don't
need full option from classes.

47
00:03:07.791 --> 00:03:12.491
Be careful because sometimes we
call instances of abstract and

48
00:03:12.491 --> 00:03:14.270
instances of classes.

49
00:03:14.270 --> 00:03:18.288
The option term sometimes
can be applied to both.

50
00:03:18.288 --> 00:03:21.590
It's more typically two classes,
so you have an option of a class.

51
00:03:21.590 --> 00:03:26.142
But sometimes you will see people saying
you have an option to find a structure

52
00:03:26.142 --> 00:03:28.674
because it's also an instance in memory.

53
00:03:28.674 --> 00:03:29.725
We prefer instances.

54
00:03:29.725 --> 00:03:32.851
&gt;&gt; In Swift you cannot
initialize the structures.

55
00:03:32.851 --> 00:03:37.184
&gt;&gt; Yeah, I mean, you don't yeah I mean you
don't need to create an initializer but

56
00:03:37.184 --> 00:03:41.776
you can, so I can have here, So

57
00:03:41.776 --> 00:03:45.060
now in this case,
this is a default initializer.

58
00:03:45.060 --> 00:03:50.346
So without arguments,
now it's complaining here because if you

59
00:03:50.346 --> 00:03:55.740
set an initializer,
you're removing the default initializer.

60
00:03:55.740 --> 00:03:59.135
So now if you want to receive name and
age,

61
00:03:59.135 --> 00:04:05.252
you need to create another one manually
that receives the name and the age.

62
00:04:05.252 --> 00:04:08.681
If you don't set an initializer,
you have one by default.

63
00:04:08.681 --> 00:04:14.784
But if not you need to manually create it.

64
00:04:14.784 --> 00:04:15.897
&gt;&gt; Okay.
&gt;&gt; Okay?

65
00:04:18.178 --> 00:04:25.176
Well, on their match we have
already seen the quickly the gar,

66
00:04:25.176 --> 00:04:29.940
things that we're not going to use later.

67
00:04:29.940 --> 00:04:34.032
And actually something that
I can quickly show you,

68
00:04:34.032 --> 00:04:37.940
because most of you
are expecting this to happen.

69
00:04:37.940 --> 00:04:41.566
But I wanna tell you
that try catch here works

70
00:04:41.566 --> 00:04:45.683
completely different
from what you're used to.

71
00:04:45.683 --> 00:04:51.832
And most of the framework
is not using exceptions.

72
00:04:51.832 --> 00:04:55.240
There are libraries and parts of the
framework that may be using exceptions.

73
00:04:55.240 --> 00:04:59.867
So this is more from your own code, okay?

74
00:04:59.867 --> 00:05:04.932
So you cannot catch some exception
from the system because there

75
00:05:04.932 --> 00:05:10.110
are not exceptions,
they're using other ways to manage error.

76
00:05:10.110 --> 00:05:16.930
The exception system exists here If and
if not try catch it's do catch.

77
00:05:16.930 --> 00:05:21.784
And then there is a time
that you need to use

78
00:05:21.784 --> 00:05:26.510
as a prefix to the function that throws.

79
00:05:26.510 --> 00:05:31.990
So if you have a function
that throws it says

80
00:05:31.990 --> 00:05:37.480
here throws, you can throw an exception.

81
00:05:37.480 --> 00:05:43.579
How do you call that function that
throws with a try, prefix, okay?

82
00:05:43.579 --> 00:05:49.410
It's more similar to how a weight works
cane in other languages what also here.

83
00:05:49.410 --> 00:05:56.160
So use do these code and
some of this code will throw exceptions,

84
00:05:56.160 --> 00:06:00.792
some other code will not throw exceptions.

85
00:06:00.792 --> 00:06:06.956
But I wanna emphasize that you will see
later that we are not going to use this.

86
00:06:06.956 --> 00:06:13.558
And an standard iOS application that
talks to the UI will never use this.

87
00:06:13.558 --> 00:06:18.137
Because the framework in the basics
is not using exceptions,

88
00:06:18.137 --> 00:06:21.757
you can use exceptions in your own model,
okay?

89
00:06:21.757 --> 00:06:24.284
In your business logic if you want.

90
00:06:24.284 --> 00:06:29.102
And for that you have an exception
framework and you have, do try catch.

91
00:06:29.102 --> 00:06:34.071
But let's say for
now is part of advanced swift and

92
00:06:34.071 --> 00:06:41.543
not part of basic swift because you
don't need to use it by default, okay?

93
00:06:41.543 --> 00:06:46.095
So at this point,
I think that you're ready to

94
00:06:46.095 --> 00:06:50.668
start doing something
with what we've seen.

95
00:06:50.668 --> 00:06:55.332
And I know that there are more
to see about swift, but

96
00:06:55.332 --> 00:06:57.994
also we need to create an app.

97
00:06:57.994 --> 00:07:02.922
And you will see that every single
we've seen in swift it's enough

98
00:07:02.922 --> 00:07:05.926
to understand how to make an app, okay?

99
00:07:05.926 --> 00:07:12.740
And we're going to reemphasize these
concepts as long as we are coding our app.

