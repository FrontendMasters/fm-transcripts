WEBVTT

1
00:00:00.180 --> 00:00:03.876
Now talking about function, here comes
something that you're saying at this point

2
00:00:03.876 --> 00:00:06.370
you're saying, hey, that's simple, okay?

3
00:00:06.370 --> 00:00:07.427
That's straightforward.

4
00:00:07.427 --> 00:00:09.176
Well, wait a minute.

5
00:00:09.176 --> 00:00:11.112
So, a function is just a function.

6
00:00:11.112 --> 00:00:16.320
So that's simple, you define a function as
you're used to, just with a func keyword.

7
00:00:17.320 --> 00:00:20.599
Some important things about functions,
we have return types.

8
00:00:21.700 --> 00:00:25.993
So a return type is using what
is known as the thin arrow.

9
00:00:25.993 --> 00:00:29.650
So in JavaScript,
we use the fat arrow with equals.

10
00:00:29.650 --> 00:00:31.357
This is called the thin arrow.

11
00:00:31.357 --> 00:00:35.330
So it's just a dash,
okay, and greater than.

12
00:00:36.440 --> 00:00:39.755
And then the type, and
when you have the type,

13
00:00:39.755 --> 00:00:42.916
you must return a value of that type,
okay?

14
00:00:42.916 --> 00:00:46.122
So that's simple to get anyway.

15
00:00:46.122 --> 00:00:49.440
So, something interesting, let's say for

16
00:00:49.440 --> 00:00:54.080
now interesting,
is that you don't need the return keyword.

17
00:00:55.610 --> 00:00:58.076
So, in fact, that actually works.

18
00:00:58.076 --> 00:01:00.620
So even,
you can put this in just one line.

19
00:01:02.910 --> 00:01:08.394
And there is an implicit return
in that particular situation,

20
00:01:08.394 --> 00:01:11.450
that sometimes is useful, okay?

21
00:01:11.450 --> 00:01:13.952
But sometimes,
it's better to add a return keyword.

22
00:01:13.952 --> 00:01:18.025
It will add more, let's say,
clarity to the code.

23
00:01:18.025 --> 00:01:19.415
So it depends on the case, okay?

24
00:01:19.415 --> 00:01:21.994
But it's interesting.

25
00:01:21.994 --> 00:01:26.844
So I did mention that some
things will get weird.

26
00:01:26.844 --> 00:01:34.011
And I'm not sure if I will achieve
the goal to make you like this today,

27
00:01:34.011 --> 00:01:38.275
because it needs a couple of days, okay?

28
00:01:38.275 --> 00:01:40.325
But you will get there, okay?

29
00:01:40.325 --> 00:01:41.504
I promise you will get there.

30
00:01:41.504 --> 00:01:46.232
So I have a function here that
looks pretty simple, sum a and b.

31
00:01:46.232 --> 00:01:50.980
It receives two integers, it returns
an integer, so I have two arguments.

32
00:01:50.980 --> 00:01:52.860
Remember we use column for the data types.

33
00:01:54.320 --> 00:01:58.071
And then we have a return type,
that returns just a+b.

34
00:01:58.071 --> 00:02:03.733
Of course, I don't need the return,
I can just say a + b, okay?

35
00:02:03.733 --> 00:02:07.848
Some of you may be thinking about a lambda
expression but it's not like that,

36
00:02:07.848 --> 00:02:10.610
we will get into that idea in a minute.

37
00:02:10.610 --> 00:02:13.480
Okay, we just return a+b,
but how do you call this?

38
00:02:14.750 --> 00:02:20.151
So, you're expecting to call sum 10 and

39
00:02:20.151 --> 00:02:23.308
5 like on any language.

40
00:02:23.308 --> 00:02:27.897
But no,
it's complaining that I don't have or

41
00:02:27.897 --> 00:02:32.220
I'm missing argument labels, a and b.

42
00:02:32.220 --> 00:02:36.183
And if I click here on the error, so

43
00:02:36.183 --> 00:02:40.148
you just click in this error icon,

44
00:02:40.148 --> 00:02:46.049
it opens a little window
where we have a Fix button.

45
00:02:46.049 --> 00:02:50.142
So if I click Fix,
it will fix this for me.

46
00:02:50.142 --> 00:02:52.257
And this is how it looks like.

47
00:02:52.257 --> 00:02:54.172
So, sum a and b.

48
00:02:54.172 --> 00:02:59.559
So we actually need to pass,
should call the function

49
00:02:59.559 --> 00:03:04.360
using the argument names,
and that's weird.

50
00:03:05.720 --> 00:03:11.226
But it's part of a pattern,
okay, that can be customized.

51
00:03:11.226 --> 00:03:15.246
For example, the idea is that in Swift,

52
00:03:15.246 --> 00:03:19.751
we are going to change
how we call functions.

53
00:03:19.751 --> 00:03:23.379
Because what's the name
of the function actually,

54
00:03:23.379 --> 00:03:26.270
it's not actually sum, it's sum a, b.

55
00:03:27.820 --> 00:03:32.656
In fact, if you look at the colors,
you can see that S-U-M and

56
00:03:32.656 --> 00:03:35.315
a and b, they have the same color.

57
00:03:36.935 --> 00:03:38.365
Okay, can you see that?

58
00:03:38.365 --> 00:03:41.275
So I have the same color here and here.

59
00:03:42.365 --> 00:03:45.024
That means that's the function name.

60
00:03:45.024 --> 00:03:47.587
If we merge everything,
that's the function name.

61
00:03:47.587 --> 00:03:51.810
So why it's like this, so yeah.

62
00:03:51.810 --> 00:03:54.108
&gt;&gt; So does it mean that you
can create another function,

63
00:03:54.108 --> 00:03:55.496
sum with different arguments?

64
00:03:55.496 --> 00:03:57.021
&gt;&gt; Yeah, that's correct.

65
00:03:57.021 --> 00:04:02.174
So if I do this, sum a, b, and c,

66
00:04:02.174 --> 00:04:07.513
and we return, for example, a and

67
00:04:07.513 --> 00:04:12.688
b, we call the other one, okay?

68
00:04:12.688 --> 00:04:14.511
And then plus c.

69
00:04:14.511 --> 00:04:19.062
So, is this actually an overload,
a function overload?

70
00:04:19.062 --> 00:04:21.516
No, it's not a function overload,

71
00:04:21.516 --> 00:04:26.037
it's actually a function with
a different name, sum a, b, and c.

72
00:04:26.037 --> 00:04:29.809
It has the same prefix, if you want, okay?

73
00:04:29.809 --> 00:04:36.405
But we need to see these argument labels
are kind of merging with the prefix,

74
00:04:36.405 --> 00:04:42.089
with the function name, and
they create a larger function name.

75
00:04:42.089 --> 00:04:48.028
&gt;&gt; What if we did this and
made the c optional on this one?

76
00:04:48.028 --> 00:04:51.770
&gt;&gt; Okay, yeah, that's a good question.

77
00:04:51.770 --> 00:04:54.713
So, the question is what
happens if b is optional?

78
00:04:54.713 --> 00:04:58.238
&gt;&gt; No, but I wanna create those two
that you did, a, b and a, b, c.

79
00:04:58.238 --> 00:05:00.228
And the second one,
I'm gonna have optional c.

80
00:05:00.228 --> 00:05:01.786
It's gonna make a mess for my sum.

81
00:05:01.786 --> 00:05:02.512
&gt;&gt; Which one is optional?

82
00:05:02.512 --> 00:05:03.128
&gt;&gt; The c.

83
00:05:03.128 --> 00:05:05.634
&gt;&gt; The c, so optional means this?

84
00:05:05.634 --> 00:05:06.354
&gt;&gt; Yeah.

85
00:05:06.354 --> 00:05:08.116
&gt;&gt; So in this case, there is a problem.

86
00:05:08.116 --> 00:05:10.137
Let me explain why.

87
00:05:10.137 --> 00:05:11.751
Let's go back to this example.

88
00:05:11.751 --> 00:05:14.194
If I say that b is optional,

89
00:05:14.194 --> 00:05:19.631
here it's complaining because
maybe b is not there, okay?

90
00:05:19.631 --> 00:05:22.589
So, well, let's do this for now.

91
00:05:22.589 --> 00:05:24.391
It's wrong, but let's do it for now.

92
00:05:24.391 --> 00:05:28.132
That when I call in sum,
I can actually pass only a,

93
00:05:28.132 --> 00:05:31.790
I don't need to pass b,
because it's optional.

94
00:05:33.140 --> 00:05:37.986
I can also pass nil, an explicit nil,
and it will work, okay?

95
00:05:37.986 --> 00:05:43.760
But also, I don't need to set a value for
it, okay?

96
00:05:43.760 --> 00:05:47.334
So yeah,
then you have a problem if you do that.

97
00:05:47.334 --> 00:05:51.280
Okay, so I know that this is weird, okay?

98
00:05:52.700 --> 00:05:54.327
But believe me, I now like this.

99
00:05:54.327 --> 00:05:57.555
So it takes time, but
the whole idea is to,

100
00:05:57.555 --> 00:06:02.332
I mean, it's pretty common these
days to find code like this.

101
00:06:02.332 --> 00:06:06.867
So you have a print,
let's say you have a customer.

102
00:06:06.867 --> 00:06:12.368
So printCustomer, and
then you pass a string with a name,

103
00:06:12.368 --> 00:06:17.570
and then you have a couple
of variables like this.

104
00:06:17.570 --> 00:06:18.620
So you read that code.

105
00:06:20.090 --> 00:06:21.703
What's 2 and 3?

106
00:06:21.703 --> 00:06:25.328
x and y, and 12 font size?

107
00:06:25.328 --> 00:06:27.546
So I don't know.

108
00:06:27.546 --> 00:06:31.638
When you read code, okay,
you don't know about the arguments.

109
00:06:31.638 --> 00:06:38.764
So the whole idea here is that first,
I shouldn't call the printCustomer.

110
00:06:38.764 --> 00:06:43.870
I can probably say print and
then create customer.

111
00:06:43.870 --> 00:06:47.195
And then I can say with X and Y,

112
00:06:47.195 --> 00:06:53.380
you define how explicit you are,
fontSize, okay?

113
00:06:53.380 --> 00:06:57.963
The other two, I don't know what
that is but let's say headerSize,

114
00:06:57.963 --> 00:06:59.710
whatever, and visible.

115
00:07:01.370 --> 00:07:06.940
So, this is how Swift functions look like.

116
00:07:06.940 --> 00:07:09.580
And we write this in different ways.

117
00:07:09.580 --> 00:07:16.663
For example, we don't create a function
called add, let's say Product.

118
00:07:16.663 --> 00:07:20.540
We create the function and that receives
a product as an argument, okay?

119
00:07:20.540 --> 00:07:25.099
Let's say it's an integer, we create
a function called add, and the product is,

120
00:07:27.545 --> 00:07:31.370
Then the name of the argument,
the argument label that's actually a name.

121
00:07:31.370 --> 00:07:37.199
So when we call add,
it says add product, Like so.

122
00:07:39.379 --> 00:07:42.669
What if you say, well,
you know what, when I have sum,

123
00:07:42.669 --> 00:07:48.400
it's actually pretty simple, two integer,
so I don't wanna have i, a, and b.

124
00:07:48.400 --> 00:07:52.160
Well, if you want,
you can customize these labels.

125
00:07:52.160 --> 00:07:56.790
So you can keep a and
b as local variables, the arguments, but

126
00:07:56.790 --> 00:08:02.770
you can change the argument,
the visible argument label to the caller.

127
00:08:02.770 --> 00:08:06.816
So I can say an operand1, operand2.

128
00:08:06.816 --> 00:08:08.530
This is even worse now.

129
00:08:08.530 --> 00:08:13.443
But anyway, so when I'm calling sum here,
it's going to complain,

130
00:08:13.443 --> 00:08:16.538
that now, these are the incorrect labels.

131
00:08:16.538 --> 00:08:19.910
The labels are operand1, operand2.

132
00:08:19.910 --> 00:08:23.851
So I still call them a and
b internally, but

133
00:08:23.851 --> 00:08:31.540
then I change how I'm calling this from
the outside of the function, okay?

134
00:08:31.540 --> 00:08:37.000
And now you will like this,
you can use underscore.

135
00:08:37.000 --> 00:08:40.202
If you use underscore
as an argument label,

136
00:08:40.202 --> 00:08:43.411
it means you don't want an argument label.

137
00:08:43.411 --> 00:08:46.414
And now it looks like
a JavaScript function.

138
00:08:46.414 --> 00:08:53.290
So now he's going to complain, there
is a space, okay and mandatory space.

139
00:08:54.390 --> 00:08:59.745
So now it's saying no,
you don't need argument labels,

140
00:08:59.745 --> 00:09:02.597
it's just 10 and 5, okay?

141
00:09:02.597 --> 00:09:08.178
So you can still go back to the functions
as you're used to name them,

142
00:09:08.178 --> 00:09:14.480
but you need to explicitly define
an underscore as an argument label.

143
00:09:14.480 --> 00:09:19.286
And you can mix a match,
for example, in this case,

144
00:09:19.286 --> 00:09:24.102
a nice swift name for
this function will be sum with.

145
00:09:24.102 --> 00:09:29.568
So the first one is underscore,
and the second one is with.

146
00:09:29.568 --> 00:09:34.585
So now, when you read this,
it's sum 10 with 5.

147
00:09:38.068 --> 00:09:43.058
That's how we want to
name functions in Swift,

148
00:09:43.058 --> 00:09:46.190
so you can read it in English.

149
00:09:46.190 --> 00:09:47.338
&gt;&gt; Very expressive.

150
00:09:47.338 --> 00:09:48.419
&gt;&gt; Very expressive.

151
00:09:48.419 --> 00:09:51.357
The idea is to have clear code,

152
00:09:51.357 --> 00:09:56.566
simple to understand when
you look at the code, okay?

153
00:09:56.566 --> 00:09:58.074
Any question?

154
00:09:58.074 --> 00:09:59.295
Yeah.

155
00:09:59.295 --> 00:10:03.642
&gt;&gt; So, when you're writing
the function signature,

156
00:10:03.642 --> 00:10:08.102
are the parameters like on a keyword and
positional?

157
00:10:08.102 --> 00:10:10.611
Could I call sum putting the with first?

158
00:10:10.611 --> 00:10:11.401
&gt;&gt; That's a good question.

159
00:10:11.401 --> 00:10:14.597
So can I call sum and with first?

160
00:10:14.597 --> 00:10:17.169
No, unless you have optionals.

161
00:10:17.169 --> 00:10:21.727
You cannot change the order,
but you can omit one in

162
00:10:21.727 --> 00:10:26.800
case it's optional, but
you cannot change the order.

163
00:10:26.800 --> 00:10:29.823
So if you're setting two values,
you must use those values.

164
00:10:29.823 --> 00:10:33.848
Other languages such as Kotlin,
they let you do something similar to this.

165
00:10:33.848 --> 00:10:37.172
Kotlin is the one that we use for
Android today.

166
00:10:37.172 --> 00:10:41.242
And you can actually change the order
when you're calling the function, but

167
00:10:41.242 --> 00:10:42.890
not here in Swift.

168
00:10:42.890 --> 00:10:50.020
But you can omit some of the arguments
if they are optional, okay?

169
00:10:52.150 --> 00:10:57.510
&gt;&gt; Is there a way to run a formatter
on Save, something like Prettier?

170
00:10:57.510 --> 00:11:01.156
&gt;&gt; So, when you're calling,
I'm not sure if it's one we're calling.

171
00:11:01.156 --> 00:11:06.420
So typically, when you have a lot,
you go to a new line.

172
00:11:06.420 --> 00:11:08.750
In fact,
we're going to see that in Swift UI later.

173
00:11:08.750 --> 00:11:12.342
You go to a new line, okay, or also here,

174
00:11:12.342 --> 00:11:16.775
go to a new line, and
then you send more arguments.

175
00:11:16.775 --> 00:11:19.540
I guess that's the question about,
I'm sure.

176
00:11:19.540 --> 00:11:24.578
&gt;&gt; No, it's just like when you hit Save-
&gt;&gt; Okay, no.

177
00:11:24.578 --> 00:11:28.046
&gt;&gt; And everything auto formats,
or like Go has go format.

178
00:11:28.046 --> 00:11:32.271
&gt;&gt; No, you don't have an auto
formatter automatically in Swift.

179
00:11:32.271 --> 00:11:37.200
So what you have here is that if you,
I mean, I'm an old school developer,

180
00:11:37.200 --> 00:11:41.606
so I don't typically use, though,
I don't like them actually.

181
00:11:41.606 --> 00:11:45.267
Those tools that will re-indent everything
when I'm saving, I don't like them.

182
00:11:45.267 --> 00:11:49.924
But you have here is a shortcut that
you can use like a key shortcut.

183
00:11:49.924 --> 00:11:55.279
In the menu, if we go to Editor, okay,
you have here a section for a Structure.

184
00:11:55.279 --> 00:12:02.086
On your Structure, you have Re-Indent,
that is actually Ctrl+I, okay?

185
00:12:02.086 --> 00:12:06.364
So Ctrl+I, or
you have more options here, okay, but

186
00:12:06.364 --> 00:12:10.363
Ctrl+I will actually
re-indent the selection or

187
00:12:10.363 --> 00:12:14.927
everything according to
the rules that Xcode has, okay?

188
00:12:14.927 --> 00:12:19.220
So it depends on the case
how this is going to end up.

189
00:12:19.220 --> 00:12:21.981
&gt;&gt; I just looked in there,
it's like a Swift formatter but

190
00:12:21.981 --> 00:12:23.523
it's an open source project.

191
00:12:23.523 --> 00:12:27.373
&gt;&gt; Yeah, so Xcode supports plugins.

192
00:12:27.373 --> 00:12:31.820
Unfortunately, the community
is not as big as VS code.

193
00:12:31.820 --> 00:12:37.290
I mean, the amount of plugin is probably
1% more or less compared to VS code.

194
00:12:37.290 --> 00:12:41.152
So the amount of options that
you have is not the same, okay?

195
00:12:41.152 --> 00:12:44.994
So you will feel a little limited
in that sort of things, I mean.

196
00:12:44.994 --> 00:12:47.525
Can you use VS code to write Swift?

197
00:12:47.525 --> 00:12:53.218
Actually you can, but I mean, creating the
iOS application will actually be a little

198
00:12:53.218 --> 00:12:58.530
difficult because you don't have the
preview and tools that we will see later.

199
00:12:58.530 --> 00:13:01.558
But the VS code supports Swift,
so you can still

200
00:13:01.558 --> 00:13:06.490
write some code there if you want to,
and it's going to be synced with Xcode.

