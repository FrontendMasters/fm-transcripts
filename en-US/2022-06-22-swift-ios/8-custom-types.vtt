WEBVTT

1
00:00:00.937 --> 00:00:05.833
Okay, custom types,
now we're going to go faster in this part.

2
00:00:05.833 --> 00:00:09.850
And we're going to focus only on the parts
that we will actually spend time.

3
00:00:09.850 --> 00:00:12.288
So we have typealias.

4
00:00:12.288 --> 00:00:18.010
Typealias is a way to actually define
a different name for another type.

5
00:00:18.010 --> 00:00:24.331
That can add some semantics, for example,
coordinate, it's a tuple of integer,

6
00:00:24.331 --> 00:00:29.060
I can create a type alias of
a distance that is actually a float.

7
00:00:29.060 --> 00:00:34.304
And then we can express every time you
see a distance is in meters, or miles.

8
00:00:34.304 --> 00:00:38.361
So you set that and
then instead of just saying float,

9
00:00:38.361 --> 00:00:40.987
you're using distance as a type.

10
00:00:40.987 --> 00:00:42.578
You have an enums, okay?

11
00:00:42.578 --> 00:00:46.902
Like in other languages,
like it gets more complicated,

12
00:00:46.902 --> 00:00:52.477
enums can have a type can have a low
value, but we're not going to use this.

13
00:00:52.477 --> 00:00:55.794
So I'm just focusing on
the import around the basics.

14
00:00:55.794 --> 00:00:57.998
We can create classes.

15
00:00:57.998 --> 00:01:00.438
We can create the structures.

16
00:01:00.438 --> 00:01:02.325
What's a structure?

17
00:01:02.325 --> 00:01:08.094
The structure at first it looks
very similar to tuples, okay?

18
00:01:08.094 --> 00:01:11.426
With names with one difference.

19
00:01:11.426 --> 00:01:18.272
So we can actually quickly, Add methods.

20
00:01:18.272 --> 00:01:21.617
So in a structure I can have methods.

21
00:01:21.617 --> 00:01:26.280
I can have initializers,
those are kinds of constructors.

22
00:01:26.280 --> 00:01:28.767
And what's the difference with a class?

23
00:01:28.767 --> 00:01:33.654
We don't use inheritance, so
we cannot have a superclass

24
00:01:33.654 --> 00:01:37.556
with a struct,
it's just data with methods.

25
00:01:37.556 --> 00:01:44.708
And every object instance of a structure,
typically we call them instances.

26
00:01:44.708 --> 00:01:51.730
Every instance of a structure
is passed by value, by copy.

27
00:01:51.730 --> 00:01:56.325
Every instance of a class is
passed by reference, okay?

28
00:01:56.325 --> 00:02:02.078
We will see a couple of
differences later on that.

29
00:02:02.078 --> 00:02:05.725
And finally we have protocols,
the protocol,

30
00:02:05.725 --> 00:02:11.663
let me give you first a quick definition,
quick dirty and wrong definition.

31
00:02:11.663 --> 00:02:18.112
It's like an interface in Java, just for
you to get into some mental model there.

32
00:02:18.112 --> 00:02:23.428
An interface in Java or TypeScript or
C# or PHP, if you want.

33
00:02:23.428 --> 00:02:27.964
So an interface is a set of function
names that then you need to comply with,

34
00:02:27.964 --> 00:02:29.334
something like that.

35
00:02:29.334 --> 00:02:33.906
But it's wrong, as I mentioned before,
because here, the protocol is different.

36
00:02:33.906 --> 00:02:37.789
You can do that if you want, but also
there are a couple of more examples here.

37
00:02:37.789 --> 00:02:41.244
But a protocol can have
optional functions.

38
00:02:41.244 --> 00:02:45.385
So then you're not forced
to implement them.

39
00:02:45.385 --> 00:02:48.233
So you can, if you want,
but you're not forced to.

40
00:02:48.233 --> 00:02:53.672
And you can even create
the protocol without the function,

41
00:02:53.672 --> 00:02:55.644
that is just a flyer.

42
00:02:55.644 --> 00:03:00.707
It's a way to categorize objects.

43
00:03:00.707 --> 00:03:05.439
And you can apply protocols to enum,
to classes and structs,

44
00:03:05.439 --> 00:03:09.998
to every data type kind of,
every custom data type, okay?

45
00:03:14.345 --> 00:03:17.257
We will see all of this in action, okay?

46
00:03:17.257 --> 00:03:21.631
So if you wanna play with this,
class is actually pretty simple.

47
00:03:21.631 --> 00:03:28.646
You can create hands class human,
let's say that every human has a name.

48
00:03:28.646 --> 00:03:32.970
If you wanna set an initializer
basic constructor,

49
00:03:32.970 --> 00:03:40.198
it's called init Without the func keyword.

50
00:03:40.198 --> 00:03:46.179
If you wanna have methods, it just
the func keyword, like on other languages.

51
00:03:46.179 --> 00:03:50.454
If you want initializers with arguments,

52
00:03:50.454 --> 00:03:56.758
you just create an init with
arguments such as a need with name.

53
00:03:56.758 --> 00:04:01.757
And we typically use this with
because it's part of the name, okay?

54
00:04:01.757 --> 00:04:05.072
So then I can say name=withname, but

55
00:04:05.072 --> 00:04:10.675
you can say withname,
that's a weird name for a variable.

56
00:04:10.675 --> 00:04:15.574
So it's good from the outside, but
remember that you can separate

57
00:04:15.574 --> 00:04:20.401
the argument labels from the actual
variable names with a space.

58
00:04:20.401 --> 00:04:25.570
So I can call it name,
they have ambiguity.

59
00:04:25.570 --> 00:04:28.719
How do you solve the problem in Java or
JavaScript, here?

60
00:04:32.057 --> 00:04:34.194
Any language, anyone?

61
00:04:34.194 --> 00:04:39.454
This, well, here in Swift,
it's not this, it's self.

62
00:04:42.730 --> 00:04:44.280
You'll get used to that, okay?

63
00:04:44.280 --> 00:04:45.368
It's self.

64
00:04:45.368 --> 00:04:47.199
So self.name = name.

65
00:04:49.400 --> 00:04:56.046
Well, this is empty,
that's why it's complaining.

66
00:04:56.046 --> 00:04:59.459
That's how you quickly create a class.

67
00:04:59.459 --> 00:05:07.081
And then it's OOP, so I can create, that's
a human, so we can create a customer.

68
00:05:07.081 --> 00:05:11.666
And we can say that we are extending
from human with column.

69
00:05:11.666 --> 00:05:18.589
It is similar to C# or C++, we don't use
the extends keyword, we just use colon.

70
00:05:18.589 --> 00:05:23.377
But actually,
we are not going to write a lot of OOP

71
00:05:23.377 --> 00:05:26.690
code in our Swift UI application.

72
00:05:26.690 --> 00:05:30.710
A struct is just the same.

73
00:05:30.710 --> 00:05:33.565
So instead of class, I say struct.

74
00:05:34.746 --> 00:05:41.821
I cannot use, I don't use inheritance in
this case, so I just created a structure.

75
00:05:41.821 --> 00:05:45.306
I can have methods,
I can have initializers.

76
00:05:46.524 --> 00:05:49.546
The only difference that we have,
with struct,

77
00:05:49.546 --> 00:05:52.134
actually very interesting difference.

78
00:05:52.134 --> 00:05:56.841
Do you remember what happened with
classes if I set a variable with

79
00:05:56.841 --> 00:05:59.421
the property that is not optional?

80
00:06:02.126 --> 00:06:04.700
I have an error, let's do that.

81
00:06:04.700 --> 00:06:09.789
Saying hey, you must set a string or
create an initializer that

82
00:06:09.789 --> 00:06:15.078
sets that string because it's mandatory,
it's not optional.

83
00:06:15.078 --> 00:06:20.277
If it's not optional, I cannot create
objects of this class without a name.

84
00:06:20.277 --> 00:06:25.588
Well, on structures I don't
have that error because

85
00:06:25.588 --> 00:06:30.672
the structure creates
an automatic initializer.

86
00:06:30.672 --> 00:06:35.058
So I have an initializer with a name,
by default.

87
00:06:35.058 --> 00:06:40.317
So if I wanna create a human let's
say that I'm a human kind of.

88
00:06:43.887 --> 00:06:47.094
I don't need to create an explicit
initializer receiving the name,

89
00:06:47.094 --> 00:06:48.262
it's already built in.

90
00:06:51.243 --> 00:06:55.311
So every time you don't have OOP,

91
00:06:55.311 --> 00:07:00.642
you have just data and
a structure in memory,

92
00:07:00.642 --> 00:07:05.011
you just need to create a structure.

93
00:07:05.011 --> 00:07:08.391
If you're not using OOP or

94
00:07:08.391 --> 00:07:13.315
data sheets just create a structure.

95
00:07:13.315 --> 00:07:19.777
It's faster,
it uses less memory than classes, yep?

96
00:07:19.777 --> 00:07:20.960
&gt;&gt; [INAUDIBLE].

97
00:07:20.960 --> 00:07:26.054
&gt;&gt; When you pass a human of
if I receive a function that

98
00:07:26.054 --> 00:07:31.042
will print a human, so
I receive a human, okay?

99
00:07:31.042 --> 00:07:32.400
And I do something with that.

100
00:07:32.400 --> 00:07:38.191
So if I call print on a pass max as
an argument, it's creating a copy.

101
00:07:38.191 --> 00:07:43.015
If it's a class,
it's passing it by reference.

102
00:07:43.015 --> 00:07:44.803
In this case, it's creating a copy.

103
00:07:44.803 --> 00:07:49.566
And I know that sounds kind of scary,
it's like,

104
00:07:49.566 --> 00:07:54.241
I don't wanna make copies
of my objects all the time.

105
00:07:54.241 --> 00:07:58.919
But this also had to do with memory
management, and the stack memory,

106
00:07:58.919 --> 00:07:59.643
and so on.

107
00:07:59.643 --> 00:08:02.261
And this is actually more efficient.

108
00:08:02.261 --> 00:08:08.989
Structures, even if we are cloning this,
the data, it's just basic data.

109
00:08:08.989 --> 00:08:15.085
It's being done really fast and
optimized in Apple platforms, for example.

110
00:08:15.085 --> 00:08:20.310
So using a structure is much
faster than using classes.

