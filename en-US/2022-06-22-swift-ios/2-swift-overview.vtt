WEBVTT

1
00:00:00.348 --> 00:00:04.726
Let's start talking about the language,
Swift, okay?

2
00:00:04.726 --> 00:00:08.672
That's the icon, that's the logo,
the little orange bird.

3
00:00:08.672 --> 00:00:13.047
So Swift was created by
Apple a few years ago,

4
00:00:13.047 --> 00:00:16.745
it was actually a complete surprise.

5
00:00:16.745 --> 00:00:19.501
No one was actually waiting for that.

6
00:00:19.501 --> 00:00:22.001
At WWDC, the Apple annual event,

7
00:00:22.001 --> 00:00:26.064
they came with the idea that,
we have a new language.

8
00:00:26.064 --> 00:00:29.398
Because at that time Objective C,
by the way,

9
00:00:29.398 --> 00:00:32.655
Objective C was created in the 80s, okay?

10
00:00:32.655 --> 00:00:35.820
Was actually looking we're for
most developers, so

11
00:00:35.820 --> 00:00:38.224
that's why they created Swift, okay?

12
00:00:38.224 --> 00:00:41.302
So just make a new step.

13
00:00:41.302 --> 00:00:47.084
But it's not like any other Apple product
that they're used to, it's open-source.

14
00:00:47.084 --> 00:00:49.869
So it's actually an open source language.

15
00:00:49.869 --> 00:00:54.067
So Apple is actually the main
promoter of the language but

16
00:00:54.067 --> 00:00:59.491
there is a consortium that is actually
upgrading the language or evolving

17
00:00:59.491 --> 00:01:05.286
the language as other languages such as
the ACMA script and many other things.

18
00:01:05.286 --> 00:01:10.866
And there are other big companies behind
Swift not just Apple, for example IBM.

19
00:01:10.866 --> 00:01:15.990
IBM is also supporting Swift a lot and
actually you can bright

20
00:01:15.990 --> 00:01:21.920
backhand Swift code in the IBM Cloud and
also another cloud systems but

21
00:01:21.920 --> 00:01:27.267
because it's open source today
you have a compiler for Linux.

22
00:01:27.267 --> 00:01:32.250
So that means that you can actually
run Swift code on any server and

23
00:01:32.250 --> 00:01:35.523
that means you can do
back in Swift as well.

24
00:01:35.523 --> 00:01:38.192
It's on a statically typed language.

25
00:01:38.192 --> 00:01:42.605
So if you coming from JavaScript,
that sounds scary, the first time.

26
00:01:42.605 --> 00:01:47.510
That means that if you have
a variable that variable will need to

27
00:01:47.510 --> 00:01:49.092
have a type define.

28
00:01:49.092 --> 00:01:56.057
If it's an integer, it's an integer, you
cannot insert something else there, okay?

29
00:01:56.057 --> 00:01:59.610
However, it also has something
known as type inference and

30
00:01:59.610 --> 00:02:01.891
we will see this in a minute in action.

31
00:02:01.891 --> 00:02:05.510
Type inference means now happy face.

32
00:02:05.510 --> 00:02:10.438
So if you were with sad face because
it sounded statically typed language

33
00:02:10.438 --> 00:02:13.602
with type inference we
go back to a happy face.

34
00:02:13.602 --> 00:02:17.080
Means that most of
the time you don't need to

35
00:02:17.080 --> 00:02:21.311
actually explicitly say what
type do you want to use.

36
00:02:21.311 --> 00:02:24.351
It will look like JavaScript but

37
00:02:24.351 --> 00:02:30.442
have in mind behind the scenes
every variable has a type define.

38
00:02:30.442 --> 00:02:33.731
It's mult-platform as we mentioned before.

39
00:02:33.731 --> 00:02:38.744
Swift as a compiler for
Apple platforms, that's Intel based and

40
00:02:38.744 --> 00:02:42.582
also the Apple platform
like the new M-1 chips.

41
00:02:42.582 --> 00:02:48.077
But also the previous Apple platforms
that you have perhaps on an iPad,

42
00:02:48.077 --> 00:02:52.566
those are not Intel based well
actually the Swift compiler

43
00:02:52.566 --> 00:02:55.692
will compile code for those platforms.

44
00:02:55.692 --> 00:03:00.582
But also we have a compiler for
Linux as I mentioned before.

45
00:03:00.582 --> 00:03:03.128
So it's multi-platform.

46
00:03:03.128 --> 00:03:04.842
It's easy to learn.

47
00:03:04.842 --> 00:03:10.157
So, in the next probably hour,
you will get the full idea of Swift.

48
00:03:10.157 --> 00:03:16.379
We cannot go into covering 100% of
Swift with just an introduction,

49
00:03:16.379 --> 00:03:19.952
but you will feel at
home most of the time.

50
00:03:19.952 --> 00:03:25.043
So it's easy to learn in this,
let's say in this decade.

51
00:03:25.043 --> 00:03:28.164
So it's less ceremonial, okay?

52
00:03:28.164 --> 00:03:34.717
That means that there are a lot of
code that we write every day and

53
00:03:34.717 --> 00:03:40.406
Swift is trying all the time
to make that code shorter,

54
00:03:40.406 --> 00:03:46.236
with less code, less bureaucracy,
that kind of idea.

55
00:03:46.236 --> 00:03:50.646
Got some modern ideas implemented and
we're going to see that later.

56
00:03:50.646 --> 00:03:55.778
So I'm not sure if this but
a lot of languages, a lot of platforms

57
00:03:55.778 --> 00:04:02.736
are actually getting out of the official
classic OOP, Object Oriented Programming.

58
00:04:02.736 --> 00:04:06.337
Like everything must be
a class like in Java.

59
00:04:06.337 --> 00:04:08.786
So, we're getting out of that.

60
00:04:08.786 --> 00:04:12.510
So maybe we're going to
use OOP when we feel,

61
00:04:12.510 --> 00:04:16.727
okay we need that, but
also we have other options.

62
00:04:16.727 --> 00:04:19.831
And it includes no safety.

63
00:04:19.831 --> 00:04:24.493
And for some of you or most of you,
this is kind of new, okay?

64
00:04:24.493 --> 00:04:28.195
So we will have some
minutes talking about this.

65
00:04:28.195 --> 00:04:30.850
But actually, this is good news,

66
00:04:30.850 --> 00:04:36.539
because it's reducing the amount of
bags that our code will have, okay?

67
00:04:36.539 --> 00:04:40.243
The famous new pointer exception,
a new reference exception.

68
00:04:40.243 --> 00:04:43.318
I'm not saying it's not gonna happen here,
but

69
00:04:43.318 --> 00:04:46.772
it's going to be reduced a lot,
thanks to new safety.

70
00:04:46.772 --> 00:04:48.990
And it's multi-paradigm, okay?

71
00:04:48.990 --> 00:04:53.762
So if you wanna write an OOP,
you can do that.

72
00:04:53.762 --> 00:04:57.450
If you wanna do linear programming,
it's okay, you can do that.

73
00:04:57.450 --> 00:04:59.854
Event-based programming, you can do that.

74
00:04:59.854 --> 00:05:01.064
Functional programming.

75
00:05:01.064 --> 00:05:04.913
Protocol-based programming,
we're going to see what it is later.

76
00:05:04.913 --> 00:05:09.842
So it's multi-paradigm, you pick
the paradigm that you want to use.

77
00:05:09.842 --> 00:05:12.241
And of course you can mix and match.

78
00:05:12.241 --> 00:05:17.304
It's not just OOP or
prototype-based like JavaScript.

79
00:05:17.304 --> 00:05:22.523
You can pick the best for your project.

80
00:05:22.523 --> 00:05:29.722
So, before actually seeing some code,
today we have some language types.

81
00:05:29.722 --> 00:05:34.802
So for example,
in some languages developers write

82
00:05:34.802 --> 00:05:41.506
source code in interpreted languages and
then you ship source code.

83
00:05:41.506 --> 00:05:47.409
I mean, the most common example of these
kind of languages today is JavaScript.

84
00:05:47.409 --> 00:05:49.709
Okay, you ship source code.

85
00:05:49.709 --> 00:05:52.438
Even if you are transpiring that code or

86
00:05:52.438 --> 00:05:58.233
doing some magic with that code anyway
what you are shipping is JavaScript, okay?

87
00:05:58.233 --> 00:06:00.968
I'm taking web assembly
out of the equation.

88
00:06:00.968 --> 00:06:05.996
Another kind of language today is
intermediate languages, that when you

89
00:06:05.996 --> 00:06:11.445
need to compile your app and you're going
to ship something known as Bytecode.

90
00:06:11.445 --> 00:06:16.246
That is not actually the final machine
code that is going to be executed by

91
00:06:16.246 --> 00:06:20.035
the machine, we are writing code for
a built on machine.

92
00:06:20.035 --> 00:06:26.234
The most common one is the Java
built-on machine, also .NET.

93
00:06:26.234 --> 00:06:27.963
It's another example of JVM.

94
00:06:27.963 --> 00:06:32.727
We can also say that JavaScript if
you have just in time compilation

95
00:06:32.727 --> 00:06:36.572
can get there but
I'm not going to get so deep on that.

96
00:06:36.572 --> 00:06:42.306
And then we have compiled languages, where
we actually need to ship machine code.

97
00:06:42.306 --> 00:06:47.281
And if you're going to compile code for
Intel-based chips,

98
00:06:47.281 --> 00:06:51.498
Intel-based CPUs,
it works only on Intel, okay?

99
00:06:51.498 --> 00:06:54.099
Not on another platform.

100
00:06:54.099 --> 00:06:59.184
So actually this is where we
are right now with Swift.

101
00:06:59.184 --> 00:07:01.487
Swift is a compiled language.

102
00:07:01.487 --> 00:07:04.094
We are going to compile code, okay?

103
00:07:04.094 --> 00:07:08.688
I know that if you are a full stack
developer, if you are just doing web,

104
00:07:08.688 --> 00:07:13.917
that also sounds scary, it sounds like,
I don't know C or something like that.

105
00:07:13.917 --> 00:07:15.697
But it's also complicated.

106
00:07:15.697 --> 00:07:20.587
There are some differences when
we're doing these kinds of apps but

107
00:07:20.587 --> 00:07:22.659
it's not a big deal, okay?

108
00:07:22.659 --> 00:07:28.142
But Swift is actually a compiled language,
okay?

109
00:07:28.142 --> 00:07:33.317
And what we're gonna be building
are actually iPhone applications.

110
00:07:33.317 --> 00:07:37.275
So the result of our project
is gonna be an IPA file.

111
00:07:37.275 --> 00:07:42.606
It's an iPhone application, actually
even if it works on iPad, it's called

112
00:07:42.606 --> 00:07:48.606
an iPhone application because they created
this file format when the iPhone appeared.

113
00:07:48.606 --> 00:07:53.506
So, the IPA file is just a ZIP package,
so you can actually unzip it and

114
00:07:53.506 --> 00:07:56.263
see what's inside after you build it.

115
00:07:56.263 --> 00:08:00.221
So, it includes our compiled Swift code,
meta data,

116
00:08:00.221 --> 00:08:03.934
we're going to see what meta data is,
and assets.

117
00:08:03.934 --> 00:08:08.778
Images, icons, PDF,
whatever we're shipping with the ABI

118
00:08:08.778 --> 00:08:13.543
can also be HTML if you want,
you can actually ship a web app.

119
00:08:13.543 --> 00:08:18.291
In fact, if you have phone gap or hybrid
elements, this is how it works, okay?

120
00:08:18.291 --> 00:08:23.263
So you ship in the assets a web app,
HTML, CSS and JavaScript.

121
00:08:23.263 --> 00:08:25.805
So that's what we're going to build.

122
00:08:25.805 --> 00:08:29.807
And that iPhone application,
and this is important,

123
00:08:29.807 --> 00:08:34.426
is installable only officially
through the App Store, okay?

124
00:08:34.426 --> 00:08:39.730
So you cannot send the IPA file to
another person through email and

125
00:08:39.730 --> 00:08:43.298
ask them to install that
through USB cable or

126
00:08:43.298 --> 00:08:48.422
something like that, or
directly from the mail application.

127
00:08:48.422 --> 00:08:50.117
It doesn't work like that, okay?

128
00:08:50.117 --> 00:08:55.667
On Android, you can,
let's say decrease security and

129
00:08:55.667 --> 00:09:01.806
then you can install an IAPK that
is not coming from the store,

130
00:09:01.806 --> 00:09:07.142
but that's not gonna happen so
simply on iOS, okay?

131
00:09:07.142 --> 00:09:11.901
So you actually need to publish
that app to the App Store.

132
00:09:11.901 --> 00:09:14.173
Also you have enterprise distribution.

133
00:09:14.173 --> 00:09:17.290
So if you're making apps for
a corporation, for

134
00:09:17.290 --> 00:09:22.002
a company that has employees with
iPhones or iPads, well actually you can

135
00:09:22.002 --> 00:09:26.959
ship an internal app that is not actually
public so it's not in the App Store.

136
00:09:26.959 --> 00:09:31.237
And for us we can also install
our app in our iPhone or iPad.

137
00:09:31.237 --> 00:09:33.748
If you have an iPhone or an iPad,

138
00:09:33.748 --> 00:09:38.034
you will be able to install
your app from Xcode, okay?

139
00:09:38.034 --> 00:09:41.361
But only on your development computers or

140
00:09:41.361 --> 00:09:46.121
your developer devices,
that's kind of the idea, okay?

141
00:09:46.121 --> 00:09:51.746
That means that if you're going to
make a Swift application like the one

142
00:09:51.746 --> 00:09:58.028
that we're going to do today and you
wanna share that application with others,

143
00:09:58.028 --> 00:10:02.179
you actually need to
technically use the App Store.

144
00:10:02.179 --> 00:10:06.241
The App Store has something
known as TestFlight inside,

145
00:10:06.241 --> 00:10:11.579
TestFlight lets you create some alpha
testing and beta testing programs.

146
00:10:11.579 --> 00:10:17.373
So you can actually share your
app with other users without

147
00:10:17.373 --> 00:10:22.704
actually making the app public for
everyone, okay?

148
00:10:22.704 --> 00:10:26.273
But for that, you will need to pay for
an Apple Developer Account and

149
00:10:26.273 --> 00:10:27.345
follow some rules.

150
00:10:27.345 --> 00:10:31.171
To test on your own iPhone, your own app,
you don't need to pay anything

