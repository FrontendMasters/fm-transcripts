WEBVTT

1
00:00:00.140 --> 00:00:05.322
And here we can see that we do have
a property, a variable with the name body.

2
00:00:05.322 --> 00:00:08.936
But we have something weird
here saying some Scene.

3
00:00:08.936 --> 00:00:10.821
What's that some?

4
00:00:10.821 --> 00:00:16.599
Let me explain that quickly,
because we are going to see that a lot.

5
00:00:16.599 --> 00:00:20.737
Think about classes or any type,
it doesn't matter, any type.

6
00:00:20.737 --> 00:00:26.978
Let's think about classes, because most
of our mindsets are prepared for OOP.

7
00:00:26.978 --> 00:00:32.655
So if I create a class A and a class B,

8
00:00:32.655 --> 00:00:37.778
and then we create a base class.

9
00:00:39.573 --> 00:00:46.704
And then we say that A extends from Base,
B extends from Base, okay?

10
00:00:46.704 --> 00:00:50.520
So we have a super class and
two subclasses.

11
00:00:50.520 --> 00:00:52.493
And I have a function,
I'm going to delete this.

12
00:00:52.493 --> 00:00:55.652
So this is not part of the app,
it's just to understand the idea.

13
00:00:55.652 --> 00:01:00.592
So if I have a function that needs,
for example, or returns,

14
00:01:00.592 --> 00:01:07.161
it doesn't matter, like test, that returns
A, of course, I can just return A.

15
00:01:07.161 --> 00:01:10.091
But what if I wanna return A or B?

16
00:01:10.091 --> 00:01:15.773
Well, actually, you use,
as you're used to, Base, okay?

17
00:01:15.773 --> 00:01:20.804
That's okay, but what happens
if I receive here an argument?

18
00:01:20.804 --> 00:01:24.226
I don't know, it can be an integer.

19
00:01:24.226 --> 00:01:29.835
And based on that argument,

20
00:01:29.835 --> 00:01:33.113
we return A or B.

21
00:01:33.113 --> 00:01:38.374
Code blocks are mandatory in Swift,
even if you have only one sentence,

22
00:01:38.374 --> 00:01:41.143
you always need to open curly braces.

23
00:01:41.143 --> 00:01:46.694
So we return A or
B based on the index, so it works.

24
00:01:46.694 --> 00:01:48.962
What is some?

25
00:01:48.962 --> 00:01:53.332
Some, when you say I'm
returning some Base,

26
00:01:53.332 --> 00:01:57.593
it's actually asking you to always return,

27
00:01:57.593 --> 00:02:01.980
you can return A or B,
but always A or always B.

28
00:02:01.980 --> 00:02:08.481
So if you have an E for a conditional,
you must return the same kind of base.

29
00:02:08.481 --> 00:02:09.734
Does it make sense, kind of?

30
00:02:09.734 --> 00:02:12.767
So its weird because we don't have
this on other languages so easily.

31
00:02:12.767 --> 00:02:16.748
Typically you say,
I'm returning a base, it can be A or B.

32
00:02:16.748 --> 00:02:22.317
But in the same function, you can have
a conditional and return A, or return B.

33
00:02:22.317 --> 00:02:28.092
When we say some,
we are asking that that function

34
00:02:28.092 --> 00:02:34.292
cannot return one kind of base,
always A or always B.

35
00:02:34.292 --> 00:02:38.602
Pick one and return that one, okay?

36
00:02:38.602 --> 00:02:40.700
That's what some means.

37
00:02:40.700 --> 00:02:42.895
Any question?

38
00:02:42.895 --> 00:02:44.457
It's weird, okay?

39
00:02:44.457 --> 00:02:45.709
&gt;&gt; Or the main one, right?

40
00:02:45.709 --> 00:02:49.067
The root one,
you can just return the base base, right?

41
00:02:49.067 --> 00:02:50.822
&gt;&gt; You can return the base as well, yeah.

42
00:02:50.822 --> 00:02:52.079
But, always base.

43
00:02:52.079 --> 00:02:55.432
If you have a conditional,
every return should return a base.

44
00:02:55.432 --> 00:02:58.815
Okay, anyway, so we have a structure here.

45
00:02:58.815 --> 00:03:02.171
And here I'm returning some Scene.

46
00:03:02.171 --> 00:03:03.566
So what's a scene?

47
00:03:03.566 --> 00:03:04.539
What's an app?

48
00:03:04.539 --> 00:03:08.564
Well, you know what an app is,
that's simple.

49
00:03:08.564 --> 00:03:10.487
You recognize an app.

50
00:03:10.487 --> 00:03:15.065
And a scene is something
more invisible on iPhones.

51
00:03:15.065 --> 00:03:18.027
Actually, it's more useful on iPads.

52
00:03:18.027 --> 00:03:24.598
It's kind of a window, so think about
that, how many of you are iOS users?

53
00:03:24.598 --> 00:03:27.861
Mostly all of you.
So have you ever seen two apps running at

54
00:03:27.861 --> 00:03:30.189
the same time on your iPhone?

55
00:03:33.166 --> 00:03:35.206
&gt;&gt; You can toggle between them.

56
00:03:35.206 --> 00:03:38.752
&gt;&gt; At the same time on the screen.

57
00:03:38.752 --> 00:03:42.029
Can you share the screen with two apps?

58
00:03:42.029 --> 00:03:42.703
&gt;&gt; I don't think you can.

59
00:03:42.703 --> 00:03:44.453
&gt;&gt; No, you can't, that's correct.

60
00:03:44.453 --> 00:03:46.110
You cannot.

61
00:03:46.110 --> 00:03:49.655
So, on iPad, you can.

62
00:03:49.655 --> 00:03:52.271
On iPad you can use side view or
slide view.

63
00:03:52.271 --> 00:03:55.434
So on iPad you can share the screen,
but not on iPhone.

64
00:03:55.434 --> 00:04:00.310
So having more than one scene on iPad,
when you share the screen,

65
00:04:00.310 --> 00:04:04.490
you can have two windows of
the same app at the same time.

66
00:04:04.490 --> 00:04:07.297
Those are two scenes of the same app,
okay?

67
00:04:07.297 --> 00:04:12.958
Anyway, on iPhone, we are focusing on
iPhone here, typically you have one scene.

68
00:04:12.958 --> 00:04:16.328
There are some exceptions to that but
it's one app, one scene, okay?

69
00:04:16.328 --> 00:04:17.866
Just forget about that.

70
00:04:17.866 --> 00:04:22.418
And then it says I have a WindowGroup,
but we all know what that is, and

71
00:04:22.418 --> 00:04:24.050
there is a ContentView.

72
00:04:24.050 --> 00:04:29.160
And ContentView, it's actually
what we have in the other file.

73
00:04:29.160 --> 00:04:32.424
It's exactly the name of
the other file that we have.

74
00:04:32.424 --> 00:04:35.241
So if we go there,
we can see something different.

75
00:04:35.241 --> 00:04:39.905
When we open this, first,
a panel appears, this panel,

76
00:04:39.905 --> 00:04:43.725
by the way,
it's not the inspector's panel.

77
00:04:43.725 --> 00:04:47.967
It's like a sub panel within
the source code, okay?

78
00:04:47.967 --> 00:04:52.820
That says Automatic preview updating post,
here.

79
00:04:52.820 --> 00:04:55.309
Automatic preview updating post.

80
00:04:55.309 --> 00:04:59.387
And there is a Resume button, okay?

81
00:04:59.387 --> 00:05:02.806
Again, I'm in the ContentView.swift file.

82
00:05:02.806 --> 00:05:06.946
So if you click on Resume,

83
00:05:06.946 --> 00:05:14.298
it's going to render my
content on a preview.

84
00:05:18.630 --> 00:05:21.492
It's taking some time,
because it says here,

85
00:05:21.492 --> 00:05:24.366
it's running the app on
a simulator actually.

86
00:05:24.366 --> 00:05:27.624
But instead of jumping to the simulator,

87
00:05:27.624 --> 00:05:31.916
I can keep that simulator
view within Xcode directly.

88
00:05:31.916 --> 00:05:36.188
If it's too large,
we can use the pinch gesture,

89
00:05:36.188 --> 00:05:40.967
if you have a track pad like this,
or here at the bottom,

90
00:05:40.967 --> 00:05:44.958
you have sum zoom icons to zoom in and
zoom out.

91
00:05:44.958 --> 00:05:52.319
So actually we can see on the screen
what we have in the middle, okay?

92
00:05:52.319 --> 00:05:55.696
And what we do have,
it's something known as ContentView.

93
00:05:55.696 --> 00:05:57.604
That is another struct.

94
00:05:57.604 --> 00:06:02.634
Everything in SwiftUI is a struct, okay?

95
00:06:02.634 --> 00:06:04.407
That says that it's a view.

96
00:06:04.407 --> 00:06:05.597
What's view?

97
00:06:05.597 --> 00:06:06.893
It's a class, it's a superclass?

98
00:06:06.893 --> 00:06:10.181
No, it's a protocol.

99
00:06:10.181 --> 00:06:14.201
And similar to app,
the protocol is forcing me

100
00:06:14.201 --> 00:06:18.332
to have a body property,
that can be some View.

101
00:06:18.332 --> 00:06:20.074
Again, what's some?

102
00:06:20.074 --> 00:06:25.711
It means that I need to return a view and
always the same kind of view.

103
00:06:25.711 --> 00:06:31.902
If I have a conditional, if I'm returning
a text, it should always be text, okay?

104
00:06:31.902 --> 00:06:35.019
And here it says Hello world,
that we can change that.

105
00:06:35.019 --> 00:06:39.292
For example, I live in Argentina,
so I speak Spanish, so

106
00:06:39.292 --> 00:06:44.545
I can say Hola mundo, that's the same
thing in Espanyol, in Spanish.

107
00:06:44.545 --> 00:06:49.871
And you can see that it's actually
changing that live in the preview.

108
00:06:49.871 --> 00:06:55.166
While you're typing,
you don't need to rerun the app, okay?

109
00:06:55.166 --> 00:07:00.656
The preview has some kind of
a live reload system, okay?

110
00:07:00.656 --> 00:07:02.329
Does it make sense?

111
00:07:02.329 --> 00:07:06.014
And here we have something that says Text,
capital T.

112
00:07:06.014 --> 00:07:12.224
Because it has capital T in parentheses,
I know it's not a function.

113
00:07:12.224 --> 00:07:18.643
It's actually initializing an object or
an structure, okay?

114
00:07:18.643 --> 00:07:24.283
In this case, Text is a view,
and views are structures.

115
00:07:24.283 --> 00:07:26.247
Everything is a structure here.

116
00:07:26.247 --> 00:07:31.729
So a text is just that, a text, okay?

117
00:07:31.729 --> 00:07:36.259
So this is like, I don't know,
a paragraph in HTML,

118
00:07:36.259 --> 00:07:40.300
if you want, okay,
that has an string inside.

119
00:07:40.300 --> 00:07:44.999
So what if I want, by the way,
there is a .padding here, okay?

120
00:07:44.999 --> 00:07:48.923
Let me remove that for a minute
before understanding what that is.

121
00:07:48.923 --> 00:07:53.059
What if I wanna add a second text,
for example, in English?

122
00:07:53.059 --> 00:07:55.398
What if I try this and say Hello world?

123
00:07:57.933 --> 00:08:02.766
Every time you make a change,
sometimes if there is any errors, for

124
00:08:02.766 --> 00:08:04.920
example, here I have an error.

125
00:08:04.920 --> 00:08:10.790
Actually what happens is that the preview
stops and you need to refresh that.

126
00:08:10.790 --> 00:08:15.705
I'm not seeing the two
texts in the same place.

127
00:08:15.705 --> 00:08:21.817
I'm actually seeing two simulators,
which is unexpectable, right?

128
00:08:21.817 --> 00:08:29.716
Well, the thing is that the view of
the body must return only one view.

129
00:08:29.716 --> 00:08:33.863
Similar to JSX, for example,

130
00:08:33.863 --> 00:08:38.011
if you're doing React or XML,

131
00:08:38.011 --> 00:08:43.123
the root element is a single element.

132
00:08:43.123 --> 00:08:44.900
Does it make sense?
So we need to group this somehow.

133
00:08:47.841 --> 00:08:51.313
So the body should return only one view,
not two.

134
00:08:51.313 --> 00:08:54.974
And by the way, if these are returned,
it's not actually a return,

135
00:08:54.974 --> 00:08:56.944
but we will get into that in a minute.

136
00:08:56.944 --> 00:09:03.618
How can we put one element besides
the other, one element above the other?

137
00:09:03.618 --> 00:09:09.054
Well, we have other views that
will do that for us, layout views.

138
00:09:09.054 --> 00:09:13.452
And there is one known as VStack.

139
00:09:13.452 --> 00:09:15.849
Capital V, Vertical stack.

140
00:09:15.849 --> 00:09:20.554
Vertical stack will
actually receive a content.

141
00:09:20.554 --> 00:09:25.859
Before writing, when I'm typing,
pay attention for a second.

142
00:09:25.859 --> 00:09:31.203
Content, what's the type of the argument?

143
00:09:31.203 --> 00:09:33.907
What do you think about the type?

144
00:09:33.907 --> 00:09:34.805
&gt;&gt; It's view.

145
00:09:34.805 --> 00:09:36.669
&gt;&gt; It's a view, no.
That's the type,

146
00:09:36.669 --> 00:09:40.606
the type is actually the one
with the blue background.

147
00:09:40.606 --> 00:09:41.944
What do you think is that?

148
00:09:41.944 --> 00:09:43.022
&gt;&gt; It's a function.

149
00:09:43.022 --> 00:09:45.370
&gt;&gt; It's a closure.

150
00:09:45.370 --> 00:09:47.750
That is kind of a function.

151
00:09:47.750 --> 00:09:51.580
Because it's a closure,
I can just press Return.

152
00:09:53.481 --> 00:09:58.359
And because it's only argument,
it's using the same shortcut,

153
00:09:58.359 --> 00:10:01.419
or the same technique that we saw before.

154
00:10:01.419 --> 00:10:06.347
So we are removing the parentheses,
and then we have a codeblock.

155
00:10:06.347 --> 00:10:13.579
So if we now move the two text
elements within the VStack,

156
00:10:13.579 --> 00:10:19.154
finally we have both
text in the same place,

157
00:10:19.154 --> 00:10:22.631
we stack them vertically.

158
00:10:22.631 --> 00:10:28.768
And because there is a VStack, there
is an HStack as well, from horizontal.

159
00:10:28.768 --> 00:10:32.568
By the way,
is this the only way to work with this?

160
00:10:32.568 --> 00:10:38.320
I mean, if I wanna add another text,
do I need to always type text?

161
00:10:38.320 --> 00:10:40.822
What if I want a button,
how would that button work?

162
00:10:40.822 --> 00:10:45.775
Well, instead of writing SwiftUI code,
you can also use drag and

163
00:10:45.775 --> 00:10:47.949
drop and some visual tools.

164
00:10:47.949 --> 00:10:52.338
For example, here at the top,
there is a plus sign that we

165
00:10:52.338 --> 00:10:56.916
are going to use a couple of times,
okay, here are the top.

166
00:10:56.916 --> 00:11:01.272
That will let us add
elements from the gallery.

167
00:11:01.272 --> 00:11:05.749
So here we can add a lot of elements.

168
00:11:05.749 --> 00:11:11.257
The first one,
the one that is selected, is for views.

169
00:11:11.257 --> 00:11:14.116
So we can add views, that's views.

170
00:11:14.116 --> 00:11:17.851
We can add modifiers, and
we don't know what that is yet.

171
00:11:17.851 --> 00:11:23.085
We can add snippets of code,
media, images, and colors, okay?

172
00:11:23.085 --> 00:11:26.429
Well, in the first tab, we see a button.

173
00:11:26.429 --> 00:11:30.815
Also, we can start typing text or
HStack, and

174
00:11:30.815 --> 00:11:37.575
we're going to find all the views that
we can use in our user interface.

175
00:11:37.575 --> 00:11:42.222
So if you want a button, I can just drag

176
00:11:42.222 --> 00:11:47.315
this to the code or to the preview, okay?

177
00:11:50.038 --> 00:11:57.622
And it's actually inserting
that into the body.

178
00:11:57.622 --> 00:12:03.856
So we have here one single source of
truth for the UI, it's just a Swift file.

179
00:12:03.856 --> 00:12:06.255
We don't have any hidden XML,

180
00:12:06.255 --> 00:12:11.715
we don't have anything behind scenes
that is actually saving the UI.

181
00:12:11.715 --> 00:12:14.204
Everything is actually
changing the same thing.

182
00:12:14.204 --> 00:12:20.784
And by the way, now we have
an HStack with a VStack inside.

183
00:12:20.784 --> 00:12:22.839
And you can see there is a button there.

184
00:12:22.839 --> 00:12:25.590
Can I click the button?

185
00:12:25.590 --> 00:12:29.258
If you click elements on the preview,
by default,

186
00:12:29.258 --> 00:12:31.827
you are selecting them in the code.

187
00:12:31.827 --> 00:12:36.177
So by default these preview
is not interactive,

188
00:12:36.177 --> 00:12:42.128
unless you press that play little
button at the top of the preview.

189
00:12:42.128 --> 00:12:48.146
That will make now that part interactive,
so you can click in the button.

190
00:12:48.146 --> 00:12:52.682
Nothing happens yet, but it's clickable.

191
00:12:52.682 --> 00:12:56.802
I don't need to run this in the simulator.

192
00:12:56.802 --> 00:13:03.511
I have the simulator embedded
within the preview, okay?

193
00:13:03.511 --> 00:13:06.527
But if you want, you can go back and

194
00:13:06.527 --> 00:13:11.416
select Run from the icon, or
from the menu product Run.

195
00:13:11.416 --> 00:13:17.378
And that will stop the previews and
it will open the app in the simulator,

196
00:13:17.378 --> 00:13:21.699
in the real simulator,
in the separate simulator.

197
00:13:21.699 --> 00:13:25.044
And you can see the button works
because I can click on it.

198
00:13:27.656 --> 00:13:31.431
Okay, but again,
you don't need to do that.

199
00:13:31.431 --> 00:13:35.848
You can stay with the preview for
a lot of time.

200
00:13:35.848 --> 00:13:37.757
So what is a button?

201
00:13:37.757 --> 00:13:40.875
It's a view, it's an structure.

202
00:13:40.875 --> 00:13:41.867
So it has its own constructor.

203
00:13:41.867 --> 00:13:44.152
The problem is that it
has many constructors, so

204
00:13:44.152 --> 00:13:46.001
I don't know which one to use, right?

205
00:13:46.001 --> 00:13:53.044
And when you drag it, it will just
prepare it with the most usual things,

206
00:13:53.044 --> 00:13:59.286
like the name of the button,
such as, I don't know, Click Me.

207
00:13:59.286 --> 00:14:01.333
And here where it says Action,

208
00:14:01.333 --> 00:14:05.680
this is actually what do you wanna
do when you click on the button.

209
00:14:05.680 --> 00:14:09.974
For example, I can print,
hey, you clicked me.

210
00:14:09.974 --> 00:14:14.135
So Print goes to the console,
not to the screen.

211
00:14:14.135 --> 00:14:16.493
It's for debugging purposes.

212
00:14:16.493 --> 00:14:22.525
So if I run this on the real simulator,
if I click Click, you can see,

213
00:14:22.525 --> 00:14:29.817
hey, you clicked me here in this little
console preview that we have within Xcode.

214
00:14:29.817 --> 00:14:34.242
But the user will never see
something on the screen.

