WEBVTT

1
00:00:00.850 --> 00:00:03.476
Closures, what is a closure?

2
00:00:03.476 --> 00:00:07.586
What is typically known as a anonymous
function, a literal function, or

3
00:00:07.586 --> 00:00:09.920
a lambda expression in other languages.

4
00:00:09.920 --> 00:00:12.557
Is when you pass as
an argument a function or

5
00:00:12.557 --> 00:00:17.049
you create a variable with a function
inside, or you return a function.

6
00:00:17.049 --> 00:00:19.574
You have a function
returning another function.

7
00:00:19.574 --> 00:00:23.729
You can use these for
callbacks for event management for

8
00:00:23.729 --> 00:00:29.133
functional programming, like using map or
filter on other languages.

9
00:00:29.133 --> 00:00:32.042
In this case, it's called closures.

10
00:00:32.042 --> 00:00:34.931
So the type of the closure
looks like this.

11
00:00:34.931 --> 00:00:39.353
We use the thin arrow, so
when you see the thin arrow in a type,

12
00:00:39.353 --> 00:00:42.602
it means it's a closure, it's a function.

13
00:00:42.602 --> 00:00:48.444
In parentheses, the arguments, and
after the arrow, the return type.

14
00:00:48.444 --> 00:00:53.680
And we have a special type, the capital
V bold, saying that in this case,

15
00:00:53.680 --> 00:00:58.672
it's a function that receives no
arguments and returns no argument.

16
00:01:00.176 --> 00:01:05.958
Okay, and how you define the content
of the function, code block.

17
00:01:09.410 --> 00:01:10.961
So equals code block.

18
00:01:10.961 --> 00:01:16.014
So this is in JavaScript, creating
a function with a name closure like this,

19
00:01:16.014 --> 00:01:18.048
but this is a normal function.

20
00:01:18.048 --> 00:01:23.827
This is like creating something like
this in JavaScript This is JavaScript,

21
00:01:23.827 --> 00:01:24.932
okay, no twist.

22
00:01:24.932 --> 00:01:27.404
Just to give you a quick idea, okay?

23
00:01:27.404 --> 00:01:29.781
This is how you set up that thing.

24
00:01:29.781 --> 00:01:34.662
If you have arguments,
you use the argument for example,

25
00:01:34.662 --> 00:01:36.659
here I have an integer.

26
00:01:36.659 --> 00:01:38.390
How do you use the argument inside?

27
00:01:38.390 --> 00:01:43.249
You have two ways, you can use
the dollar sign, the dollar sign

28
00:01:43.249 --> 00:01:48.395
will give you a tupple, some kind
of a tupple of all the arguments.

29
00:01:48.395 --> 00:01:52.960
So if I have to on a string,
you have dollar zero,dollar one but

30
00:01:52.960 --> 00:01:58.236
most of the time you don't wanna mess
with this unless you have only one.

31
00:01:58.236 --> 00:02:00.440
Typically you wanna name them.

32
00:02:00.440 --> 00:02:03.706
Okay so for
example I have a function here,

33
00:02:03.706 --> 00:02:09.244
request data that receives a callback
as an argument and what's the type

34
00:02:09.244 --> 00:02:14.350
of the callback in receiving a string and
returns nothing, okay.

35
00:02:14.350 --> 00:02:19.462
So if you wanna name the arguments, okay?

36
00:02:19.462 --> 00:02:25.209
You name them, that's weird,
this part is weird within the block.

37
00:02:25.209 --> 00:02:30.239
So within the curly braces,
you put a name, for example,

38
00:02:30.239 --> 00:02:37.137
in this case, this is the item in, so
instead of dollar zero, you use item now.

39
00:02:40.000 --> 00:02:45.264
Okay, it's complaining because
it's an old error I think,

40
00:02:45.264 --> 00:02:51.382
because I added an argument, so now he
has two arguments, item and our name.

41
00:02:51.382 --> 00:02:56.421
And in, but this is weird because
the signature of the closure is

42
00:02:56.421 --> 00:03:02.877
inside the code block, which looks weird,
okay, it looks I know it looks weird.

43
00:03:02.877 --> 00:03:05.507
It's not outside, it's inside, okay, and

44
00:03:05.507 --> 00:03:09.023
these are the two names that you
will receive from the fabric.

45
00:03:09.023 --> 00:03:10.838
How do you call a closure
like any function?

46
00:03:15.671 --> 00:03:17.363
You just call it because it's a function.

47
00:03:17.363 --> 00:03:20.914
A closure is a function, okay.

48
00:03:20.914 --> 00:03:26.929
Here comes the interesting part and we
are going to use this a lot in Swift UI.

49
00:03:26.929 --> 00:03:31.116
That's why I'm taking some
minutes to talk about this.

50
00:03:31.116 --> 00:03:33.562
How do you call request data?

51
00:03:33.562 --> 00:03:40.347
Request data receives a callback,
callback, look at the the color.

52
00:03:40.347 --> 00:03:42.592
Okay, it's the same color
as the function name, so

53
00:03:42.592 --> 00:03:44.596
we actually need to
explicitly say callback.

54
00:03:44.596 --> 00:03:45.814
It's the argument label.

55
00:03:45.814 --> 00:03:49.652
If you don't want that you use underscore.

56
00:03:49.652 --> 00:03:53.894
And now you see the different color name,
a different color for

57
00:03:53.894 --> 00:03:58.791
the name because it's part of the name
it's not part of the name, okay?

58
00:03:58.791 --> 00:04:01.131
Does it make sense?

59
00:04:01.131 --> 00:04:05.452
So, here it's asking for a closure, so

60
00:04:05.452 --> 00:04:12.582
I'm going to use the code block and
it receives a string, to data.

61
00:04:12.582 --> 00:04:16.724
In, we'll use data in, okay, it's okay so

62
00:04:16.724 --> 00:04:21.520
this is like in JavaScript
doing something like this

63
00:04:21.520 --> 00:04:26.643
great function or
an arrow function if you want,okay.

64
00:04:26.643 --> 00:04:31.666
So I'm trying to give you an example
in JavaScript that most of

65
00:04:31.666 --> 00:04:37.090
you will we understand this is JavaScript,
okay, for that code.

66
00:04:37.090 --> 00:04:39.498
Does it make sense?

67
00:04:39.498 --> 00:04:43.997
Well, the next part will not make
sense the first time you'll see that

68
00:04:43.997 --> 00:04:48.737
instead of doing this, so this is
actually pretty common in JavaScript.

69
00:04:48.737 --> 00:04:52.664
And it's typically a problem in JavaScript
that you're closing code block,

70
00:04:52.664 --> 00:04:56.120
you're closing a curly brace and
also a parenthesis.

71
00:04:56.120 --> 00:04:59.253
And sometimes you get messed with this.

72
00:04:59.253 --> 00:05:03.460
Okay, the parentheses where
these parentheses come from.

73
00:05:03.460 --> 00:05:08.489
So well actually what you can
do when the last argument

74
00:05:08.489 --> 00:05:14.206
of a function is a closure,
we start with that sample first.

75
00:05:14.206 --> 00:05:17.577
You can get rid of the parentheses and

76
00:05:17.577 --> 00:05:21.928
end up the parentheses
before the code block and

77
00:05:21.928 --> 00:05:26.079
you can get rid of
the argument label as well.

78
00:05:26.079 --> 00:05:31.182
And if there are no more arguments,
you can even get rid of the parentheses.

79
00:05:31.182 --> 00:05:36.486
They say [SOUND] some of you
are doing this at this point.

80
00:05:36.486 --> 00:05:37.596
&gt;&gt; [LAU GH].

81
00:05:37.596 --> 00:05:42.082
&gt;&gt; For some reason, we think that if
we tilt the head, we will understand.

82
00:05:42.082 --> 00:05:46.392
So what's going on here,
in fact let me show you this,

83
00:05:46.392 --> 00:05:51.453
if I use the order competition so
I start typing and you see a press

84
00:05:51.453 --> 00:05:58.245
ENTER I'm not sure if you realize there is
something in blue black background there.

85
00:05:58.245 --> 00:06:03.468
That's actually placeholder,
if you press return here or

86
00:06:03.468 --> 00:06:07.546
the enter key,
something magic will happen.

87
00:06:07.546 --> 00:06:12.576
It will actually replace the call saying,
hey, we're in Swift here.

88
00:06:12.576 --> 00:06:15.858
So if you have an argument
that is a closure,

89
00:06:15.858 --> 00:06:19.692
we can move that argument
out of the function call.

90
00:06:19.692 --> 00:06:24.359
And then you just need to name In
the argument and pull the code inside.

91
00:06:24.359 --> 00:06:28.908
so again this is new for most of you
because when you look at this you

92
00:06:28.908 --> 00:06:33.734
don't see a function call,,
no parentheses, no function calls.

93
00:06:33.734 --> 00:06:37.967
Well, yeah we do have a function
call here,, this is and

94
00:06:37.967 --> 00:06:41.421
I know you're not
believing me at this point.

95
00:06:41.421 --> 00:06:46.531
This is to increase the clarity of our
code, to reduce the amount of parentheses

96
00:06:46.531 --> 00:06:51.203
and code blocks and problems that we
have balancing those parentheses.

97
00:06:51.203 --> 00:06:55.977
That's the idea, because it's
a common pattern to actually call

98
00:06:55.977 --> 00:06:58.713
a function that receives a function.

99
00:06:58.713 --> 00:07:02.461
So, instead of doing for
example if I have an array,

100
00:07:02.461 --> 00:07:06.397
I'm gonna map that array or
I wanna filter that array.

101
00:07:06.397 --> 00:07:09.983
In JavaScript, you say, okay,,
filter receive data and

102
00:07:09.983 --> 00:07:12.004
then you do something like this.

103
00:07:12.004 --> 00:07:18.085
So you end up with this curly
brace parenthesis problem.

104
00:07:18.085 --> 00:07:25.322
Well here, is a filter and then they dine.

105
00:07:25.322 --> 00:07:31.919
But I'm still executing a filter function
and I'm still passing an argument, okay?

106
00:07:31.919 --> 00:07:36.415
Hey, but it's complaining
because it needs a ball and

107
00:07:36.415 --> 00:07:39.651
it's gonna need to return something.

108
00:07:39.651 --> 00:07:44.945
This is a compiled language, so
I must comply with all the data types.

109
00:07:46.285 --> 00:07:47.077
Okay, does it make sense?

110
00:07:47.077 --> 00:07:49.240
&gt;&gt; Can you go over the in one more time,

111
00:07:49.240 --> 00:07:53.438
cuz I had a different interpretation
before coming into this class.

112
00:07:53.438 --> 00:07:55.392
But can you explain in again?

113
00:07:55.392 --> 00:07:58.100
&gt;&gt; Explain, this one, this part?

114
00:07:58.100 --> 00:08:05.681
&gt;&gt; The in So if you go up more probably
at the very basic level the like 12,

115
00:08:05.681 --> 00:08:10.632
I think that's when you
started introducing in.

116
00:08:10.632 --> 00:08:12.342
&gt;&gt; the in, okay, okay.

117
00:08:12.342 --> 00:08:13.671
So, yeah sure.

118
00:08:13.671 --> 00:08:17.026
So let me get rid of this for a minute.

119
00:08:17.026 --> 00:08:20.032
So when you have a closure, so

120
00:08:20.032 --> 00:08:25.083
I have a variable that is
going to be my function and

121
00:08:25.083 --> 00:08:30.978
I say that the type is a closure
that receives an integer and

122
00:08:30.978 --> 00:08:35.459
our integer like
a coordinate on a Boolean.

123
00:08:35.459 --> 00:08:41.317
Okay, so then how can I set the value for
that variable?

124
00:08:41.317 --> 00:08:44.530
It's a code block because
it's actually a function.

125
00:08:44.530 --> 00:08:50.632
And how can I set names for
these three arguments, well before,

126
00:08:50.632 --> 00:08:56.172
this, by the way,
I forgot the return type, sorry.

127
00:08:56.172 --> 00:09:02.029
So before executing some code,
I say I call x, y, I'm basically all in,

128
00:09:02.029 --> 00:09:08.456
on the code in, it's just a separator
between the name of your parameter names,

129
00:09:08.456 --> 00:09:13.866
the name of your variables,
your argument variables and the code.

130
00:09:17.762 --> 00:09:19.787
So in just, it's just that.

131
00:09:19.787 --> 00:09:21.178
Why it's in?

132
00:09:21.178 --> 00:09:25.624
I don't know but it's, okay,
you have this input and

133
00:09:25.624 --> 00:09:31.048
you have this code and in is what
separates both parts of your code.

134
00:09:31.048 --> 00:09:32.142
&gt;&gt; Okay, I mean,

135
00:09:32.142 --> 00:09:37.376
is it a better way to explain it as
you're just mapping your variables to.

136
00:09:37.376 --> 00:09:41.985
&gt;&gt; It's yeah, it's actually it's mapping
the arguments into local variable names.

137
00:09:44.350 --> 00:09:47.351
Yeah, we don't use the in other places,,
okay, it's just here.

138
00:09:47.351 --> 00:09:48.739
&gt;&gt; Thank you.

139
00:09:48.739 --> 00:09:51.106
&gt;&gt; You're welcome.

140
00:09:51.106 --> 00:09:55.553
Okay, we will use these a lot
during the rest of the day, okay.

141
00:09:55.553 --> 00:09:59.278
So no worries I will repeat
these shortcuts, okay,

142
00:09:59.278 --> 00:10:04.540
that removes parentheses from function
names and it seems kind of weird.

