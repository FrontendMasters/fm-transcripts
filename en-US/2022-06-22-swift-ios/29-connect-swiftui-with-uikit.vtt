WEBVTT

1
00:00:00.040 --> 00:00:03.951
If you have front masters there is
a good chance that you have a web app,

2
00:00:03.951 --> 00:00:05.091
you have a website.

3
00:00:05.091 --> 00:00:11.386
And you can integrate a website or
a web app easily with SwiftUI.

4
00:00:11.386 --> 00:00:17.820
So typically, on modern user
interface you use a WebView, okay.

5
00:00:17.820 --> 00:00:22.090
WebView is kind of a control
that renders a web inside.

6
00:00:22.090 --> 00:00:27.600
iOS includes a WebKit WebView that
is the same engine as Safari,

7
00:00:27.600 --> 00:00:31.900
but it's not integrated with SwiftUI.

8
00:00:31.900 --> 00:00:36.804
It's UIKitonly,
which it's a good opportunity before

9
00:00:36.804 --> 00:00:40.887
finishing the course to
show you how to do that,

10
00:00:40.887 --> 00:00:48.480
because it's possible to integrate in
the same page, SwiftUI and UIKit, okay?

11
00:00:48.480 --> 00:00:53.192
It's not a big problem, but
it's something that we can solve.

12
00:00:53.192 --> 00:00:57.529
So, in this case,
if you're following the course from

13
00:00:57.529 --> 00:01:02.623
the Companion website,
we are in the seven one using Wk WebView.

14
00:01:02.623 --> 00:01:05.799
So actually what we need to do,

15
00:01:05.799 --> 00:01:10.442
to is create an a structure
that complies with

16
00:01:10.442 --> 00:01:15.705
UI View representable,
okay, so let's do that.

17
00:01:15.705 --> 00:01:17.266
I'm going to create a structure.

18
00:01:17.266 --> 00:01:19.508
I will call this web view.

19
00:01:19.508 --> 00:01:22.445
It's a UI View representable so

20
00:01:22.445 --> 00:01:28.090
it's going to represent
a UIKit View in SwiftUI, okay?

21
00:01:28.090 --> 00:01:33.088
It's a UI View representable,
is a protocol, but compared with other

22
00:01:33.088 --> 00:01:38.850
protocols that we used before,
we are forced to add some methods, okay?

23
00:01:38.850 --> 00:01:40.650
So that's why it's complaining.

24
00:01:40.650 --> 00:01:42.589
We are forced to add some methods.

25
00:01:42.589 --> 00:01:45.898
The methods are not a big deal,

26
00:01:45.898 --> 00:01:50.231
are make UIBU, and update UIBU, okay?

27
00:01:50.231 --> 00:01:56.302
So I will just copy
the signatures not the content.

28
00:01:56.302 --> 00:01:59.160
We will see the content quickly.

29
00:01:59.160 --> 00:02:08.120
So actually, here we need to
return the UIKit class, okay.

30
00:02:08.120 --> 00:02:12.745
Again, we don't know UI kit, but
I'm just mentioning that there

31
00:02:12.745 --> 00:02:17.020
is a framework that you
need to import from WebKit.

32
00:02:17.020 --> 00:02:19.870
WebKit is the web rendering
engine behind Safari.

33
00:02:21.160 --> 00:02:26.044
And actually what we need to
create is the variable or

34
00:02:26.044 --> 00:02:30.410
a constant that will
represent the web view.

35
00:02:30.410 --> 00:02:33.300
It's called WK web view, okay?

36
00:02:33.300 --> 00:02:35.682
So we create WK web view,
and we return it.

37
00:02:38.835 --> 00:02:44.870
So actually, this is the UIKit view.

38
00:02:44.870 --> 00:02:50.860
Also UIKit the view in term, but it's
a class because your kids is OOP based.

39
00:02:51.890 --> 00:02:59.910
Anyway, this is how then from here, you
can insert in the body a web view, okay?

40
00:02:59.910 --> 00:03:02.022
So what's a web view?

41
00:03:02.022 --> 00:03:05.543
Something that I have just created.

42
00:03:05.543 --> 00:03:10.106
But instead of being a view,
it's like a proxy,

43
00:03:10.106 --> 00:03:15.330
it's a proxy to UIKit,
the other framework, okay?

44
00:03:15.330 --> 00:03:16.610
Makes sense?

45
00:03:16.610 --> 00:03:21.517
To update the UI View is going to execute
it every time that the system thinks that

46
00:03:21.517 --> 00:03:23.140
you need to update the UI.

47
00:03:24.360 --> 00:03:28.810
In this case, we can use it as
some kind of a load moment, okay?

48
00:03:28.810 --> 00:03:32.811
So if you see an example here,
it's a time where we load a URL.

49
00:03:35.399 --> 00:03:38.862
And the URL, it's a URLRequest, so

50
00:03:38.862 --> 00:03:44.510
we need to create a URLRequest
that receives a URL.

51
00:03:44.510 --> 00:03:48.200
And the URL can be created
within a string file.

52
00:03:48.200 --> 00:03:51.920
So you can see it's really long,
really great objects and object.

53
00:03:51.920 --> 00:03:53.531
This is not SwiftUI,

54
00:03:53.531 --> 00:03:58.370
you are getting a quick Snapshot
of how UIKit looks like, okay.

55
00:03:58.370 --> 00:04:00.750
So we need to create a request.

56
00:04:00.750 --> 00:04:06.350
So one by one,
a request that receives a URL.

57
00:04:06.350 --> 00:04:11.760
And also we need to create a URL
that receives a string finally.

58
00:04:13.120 --> 00:04:15.740
So probably we will prefer this version.

59
00:04:16.810 --> 00:04:22.474
So once the URL I have created all ready
created a very quick simple web app,=.

60
00:04:22.474 --> 00:04:23.550
Here's the URL.

61
00:04:25.220 --> 00:04:28.690
Anywhere up will work, okay, but
I wanna show you something special here.

62
00:04:28.690 --> 00:04:33.704
If you wanna have a title
well you can embed this

63
00:04:33.704 --> 00:04:38.340
into navigation view or anything,okay?

64
00:04:39.630 --> 00:04:44.376
Here it's complaining, let's see if you
can understand what's going on because

65
00:04:44.376 --> 00:04:47.172
this is the first time
we're dealing with this.

66
00:04:47.172 --> 00:04:52.570
Value of optional type URL, question mark
must be unwrapped to a value of type URL.

67
00:04:52.570 --> 00:04:54.770
Let's look at the type here.

68
00:04:54.770 --> 00:04:55.580
It's optional.

69
00:04:55.580 --> 00:04:58.390
So this is weird because we
haven't seen this before.

70
00:04:58.390 --> 00:05:01.242
This is not happening in SwiftUI.

71
00:05:01.242 --> 00:05:05.141
The URL constructor I can return nil.

72
00:05:05.141 --> 00:05:05.717
Why?

73
00:05:05.717 --> 00:05:09.960
Because maybe you're passing
on a wrong URL on invalid URL.

74
00:05:09.960 --> 00:05:14.460
So because I know its value I'm
going to use the exceptional

75
00:05:14.460 --> 00:05:19.050
exclamation mark that is
unwrapping the option and saying,

76
00:05:19.050 --> 00:05:24.003
now it's not there, no worries,
I know it's not there, okay.

77
00:05:24.003 --> 00:05:29.043
So I can preview it or
I can see it here in info if everything

78
00:05:29.043 --> 00:05:34.923
works we see a web ap,
this is actually HTML, CSS and JavaScript.

79
00:05:34.923 --> 00:05:38.703
Right now it's loaded on a web server, but

80
00:05:38.703 --> 00:05:43.013
it can also be an asset in
tact with my app, okay?

81
00:05:43.013 --> 00:05:44.798
So that's pretty simple.

82
00:05:44.798 --> 00:05:51.725
What's even better is that you
can bridge swift with JavaScript.

83
00:05:51.725 --> 00:05:55.440
So I just wanna show you
quickly how that works.

84
00:05:55.440 --> 00:06:00.200
So you can execute JavaScript, from Swift.

85
00:06:00.200 --> 00:06:02.730
And you can execute swift,
from JavaScript.

86
00:06:02.730 --> 00:06:07.151
Be careful because you might have
some crosses scripting problems,

87
00:06:07.151 --> 00:06:11.080
security issues,
if you let JavaScript to run any code.

88
00:06:11.080 --> 00:06:16.707
Anyway, it's secure because you
decide what JavaScript can execute.

89
00:06:16.707 --> 00:06:22.755
About any question on this, so
you can load any web app any website,

90
00:06:22.755 --> 00:06:27.120
full screen or just in one view,
it's up to you.

91
00:06:28.650 --> 00:06:33.040
&gt;&gt; Is this how those cross platform apps?

92
00:06:35.960 --> 00:06:40.740
They're basically wrapping a Javascript
app with something like this.

93
00:06:40.740 --> 00:06:46.920
&gt;&gt; This is how hybrid frameworks
such as PhoneGap Ionic work.

94
00:06:46.920 --> 00:06:50.994
Yeah, they're creating a fullscreen
WebView on the loading the content

95
00:06:50.994 --> 00:06:51.660
inside,.

96
00:06:51.660 --> 00:06:56.536
And then they bridge they have plugins
typically so they bridge JavaScript with

97
00:06:56.536 --> 00:07:02.100
native code and that's actually a plug in,
how can you make that connection.

98
00:07:02.100 --> 00:07:06.948
So in the code that you have here,
you all ready have that connection,

99
00:07:06.948 --> 00:07:10.600
but I don't wanna make it so complicated.

100
00:07:10.600 --> 00:07:14.992
So for example, the simplest way
that you have to execute code, For

101
00:07:14.992 --> 00:07:19.859
example, if I wanna create a function
here that will execute JavaScript.

102
00:07:22.823 --> 00:07:26.504
Is to take the web view, but
they don't have the web view here so

103
00:07:26.504 --> 00:07:29.490
I should create a local variable okay.

104
00:07:29.490 --> 00:07:32.449
Or send receive the web as an argument.

105
00:07:34.570 --> 00:07:35.430
Meant Wk WebView.

106
00:07:35.430 --> 00:07:36.480
That's the class name.

107
00:07:36.480 --> 00:07:37.040
It's a class.

108
00:07:38.230 --> 00:07:42.913
So I can take the WebView and
if you look execute, no, but

109
00:07:42.913 --> 00:07:45.460
we have evaluate JavaScript.

110
00:07:46.760 --> 00:07:49.820
We can pass here, like shell script code.

111
00:07:52.840 --> 00:07:57.562
And yeah, we need to create the string
that is Bby the JavaScript.

112
00:07:57.562 --> 00:08:03.103
But this is like opening the console in
the browser and executing JavaScript.

113
00:08:03.103 --> 00:08:06.527
There are better ways to do that,
but this is the simplest way, okay?

114
00:08:06.527 --> 00:08:11.374
And that's like the one direction.

115
00:08:11.374 --> 00:08:15.092
The other direction is even more tricky.

116
00:08:15.092 --> 00:08:19.915
Okay, I mean from
JavaScript To execute code.

117
00:08:19.915 --> 00:08:23.202
And for that,
let me show you the web app code.

118
00:08:26.007 --> 00:08:31.816
Just to show you what's going on here,
View Page Source.

119
00:08:31.816 --> 00:08:35.580
There is an app.js file.

120
00:08:35.580 --> 00:08:38.780
There is a form validation,
nothing really complicated.

121
00:08:38.780 --> 00:08:39.468
But I'm gonna show you this.

122
00:08:41.311 --> 00:08:48.870
This code actually, window.web key.message
handlers.lert dot blah, blah blah blah.

123
00:08:48.870 --> 00:08:53.738
So, when you create the bridge,it's
going to appear here in

124
00:08:53.738 --> 00:08:57.370
your child script, message handlers.

125
00:08:57.370 --> 00:08:59.547
And the alert name.

126
00:08:59.547 --> 00:09:05.555
It's actually the name that
you're going to set from swift,

127
00:09:05.555 --> 00:09:10.380
and then you send a message to swift,
okay.

128
00:09:10.380 --> 00:09:13.615
So to make it work quickly,

129
00:09:13.615 --> 00:09:19.248
we can take the example that we have,
where.

130
00:09:19.248 --> 00:09:20.073
Go.

131
00:09:20.073 --> 00:09:24.463
This one, we need to create this base.

132
00:09:24.463 --> 00:09:26.250
It looks weird.

133
00:09:26.250 --> 00:09:31.401
So that's why I don't wanna spend
too much time with this but

134
00:09:31.401 --> 00:09:36.451
in case you have this mean,
okay, you have the code there,

135
00:09:36.451 --> 00:09:41.410
so you create a class there,
that extends from NS object.

136
00:09:41.410 --> 00:09:45.544
It doesn't matter what that means,
but if you want a quick idea,

137
00:09:45.544 --> 00:09:47.430
this is an objective C class.

138
00:09:47.430 --> 00:09:50.012
So you're extending from
an objective C object.

139
00:09:50.012 --> 00:09:54.894
And you're implementing a protocol
called WK from WebKit a script

140
00:09:54.894 --> 00:09:58.214
message handler that
will handle a message.

141
00:09:58.214 --> 00:10:00.955
And in this case,
I'm printing the console,

142
00:10:00.955 --> 00:10:03.144
the body of message Session, okay?

143
00:10:03.144 --> 00:10:08.435
And finally,
what you need to do when you're creating

144
00:10:08.435 --> 00:10:13.275
the WebView is set up that
object as an interface.

145
00:10:13.275 --> 00:10:17.211
So remember,
we are creating a bridge from JavaScript,

146
00:10:17.211 --> 00:10:20.575
we can execute this code,
and this is just this.

147
00:10:20.575 --> 00:10:21.724
It's not a big deal.

148
00:10:28.882 --> 00:10:32.299
So instead of creating the WebU like this,

149
00:10:39.798 --> 00:10:43.059
Without any arguments
with the constructor,

150
00:10:43.059 --> 00:10:46.913
we need to pass a configuration
object as an argument.

151
00:10:46.913 --> 00:10:51.379
And the configuration
object will have a web

152
00:10:51.379 --> 00:10:56.093
interface dialog.Object with a name alert.

153
00:10:56.093 --> 00:11:02.584
That's how from JavaScript, you have this
message handler with the name alert.

154
00:11:02.584 --> 00:11:07.295
Is tricky, okay but just to give
you a quick example on how you can

155
00:11:07.295 --> 00:11:11.397
create a React application and
Angular application for

156
00:11:11.397 --> 00:11:15.772
one screen for the whole app and
connect that with Swift UI.

157
00:11:15.772 --> 00:11:19.720
So you can take advantage of both worlds
and create some kind of a hybrid.

