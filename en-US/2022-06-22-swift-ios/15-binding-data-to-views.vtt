WEBVTT

1
00:00:00.370 --> 00:00:04.930
By the way, we have a scroll here
because now we have some padding and

2
00:00:04.930 --> 00:00:08.770
margins, so I'm not seeing
the Hola Mundo or the Batum.

3
00:00:10.000 --> 00:00:13.902
Or maybe you say,
maybe because this is not interactive.

4
00:00:13.902 --> 00:00:18.530
So if I hit this little button there,
you can make it interactive.

5
00:00:18.530 --> 00:00:19.290
So I can scroll.

6
00:00:20.550 --> 00:00:24.142
Nope, by default we don't have a scroll.

7
00:00:24.142 --> 00:00:30.805
But I can replace this
HStack with a ScrollView.

8
00:00:30.805 --> 00:00:37.185
So we do have a view for
this, and now I get a scroll.

9
00:00:37.185 --> 00:00:39.376
But look how easy it is to just change,

10
00:00:39.376 --> 00:00:42.700
it's like changing the name
of a tag in HTML, right?

11
00:00:42.700 --> 00:00:46.720
Yeah, you need to know which name you
need to use, but we do have a ScrollView.

12
00:00:48.070 --> 00:00:50.930
But we need to actually call it manually.

13
00:00:50.930 --> 00:00:53.350
We need to add it manually, okay?

14
00:00:54.820 --> 00:00:55.570
Does it make sense?

15
00:00:56.640 --> 00:00:59.190
Again, this is just a dirty example.

16
00:00:59.190 --> 00:01:03.215
Now I'm going to delete that and
start creating our project.

17
00:01:03.215 --> 00:01:06.250
But we need to first see
it in action quickly.

18
00:01:08.210 --> 00:01:12.062
So what if I remove what we have,

19
00:01:12.062 --> 00:01:17.074
maybe I don't even need the ScrollView.

20
00:01:17.074 --> 00:01:21.460
So I will just stay with the VStack, okay?

21
00:01:21.460 --> 00:01:26.190
So VStack, remember, we don't see it but
there is an initializer there.

22
00:01:26.190 --> 00:01:29.926
If this is JavaScript that it's not,

23
00:01:29.926 --> 00:01:35.360
this will be something like new VStack,
okay?

24
00:01:35.360 --> 00:01:38.937
We are not seeing the new,
we are not seeing the parenthesis.

25
00:01:38.937 --> 00:01:42.190
But we have that there, okay?

26
00:01:42.190 --> 00:01:48.135
Within the VStack,
I'm going to create a text field,

27
00:01:48.135 --> 00:01:53.830
okay, that actually ask the user for
typing a text.

28
00:01:55.710 --> 00:01:58.247
It needs an argument.

29
00:01:59.737 --> 00:02:03.853
Okay, it's a string, for example,

30
00:02:03.853 --> 00:02:08.623
enter your name, and
a binding to a string.

31
00:02:08.623 --> 00:02:10.560
You say, hmm, what's that?

32
00:02:10.560 --> 00:02:13.310
And also we have angle brackets.

33
00:02:13.310 --> 00:02:17.475
Those are generics, in case you've
seen those in other platforms.

34
00:02:19.643 --> 00:02:21.520
So it's binding.

35
00:02:21.520 --> 00:02:25.230
So what I want is to render your name,

36
00:02:25.230 --> 00:02:30.220
I can say hello and
the name of the user, okay?

37
00:02:30.220 --> 00:02:31.640
So something really simple.

38
00:02:33.510 --> 00:02:38.188
So we can create more
variables in our views.

39
00:02:38.188 --> 00:02:42.035
So I can create the name of the user.

40
00:02:42.035 --> 00:02:45.806
Like a name, let's start with a name.

41
00:02:45.806 --> 00:02:48.833
So I'm creating a new
variable called name.

42
00:02:48.833 --> 00:02:57.850
And here in hello, I can use
the template to actually put the name.

43
00:02:57.850 --> 00:03:01.193
I can also use the plus sign
to concatenate the strings,

44
00:03:01.193 --> 00:03:03.480
but that looks better, more swifty.

45
00:03:05.610 --> 00:03:08.260
&gt;&gt; Did you say you can
concatenate something?

46
00:03:08.260 --> 00:03:09.070
&gt;&gt; Yeah, I can.

47
00:03:09.070 --> 00:03:10.824
So I can also concatenate here.

48
00:03:10.824 --> 00:03:11.480
&gt;&gt; I see, okay.

49
00:03:11.480 --> 00:03:12.433
&gt;&gt; Yeah, it works.

50
00:03:12.433 --> 00:03:16.120
It will work only if you're
concatenating strings.

51
00:03:17.290 --> 00:03:21.818
What I mean is that when you use
a template, you can also put here numbers

52
00:03:21.818 --> 00:03:26.140
and other things that will be
converted to strings automatically.

53
00:03:26.140 --> 00:03:31.280
But if you are concatenating, you will
need to convert the manually, okay?

54
00:03:31.280 --> 00:03:33.120
So what is that binding?

55
00:03:33.120 --> 00:03:39.870
I need to tell the TextField
that I wanna bind this here.

56
00:03:41.090 --> 00:03:43.737
So when the user is typing the name,

57
00:03:43.737 --> 00:03:48.600
I want the content of that TextField
to fill the variable, okay?

58
00:03:48.600 --> 00:03:53.588
To do that, we need to set that
this is not just a normal variable,

59
00:03:53.588 --> 00:03:56.694
this will change the state of this view.

60
00:03:56.694 --> 00:04:02.130
We are going see that lots of times
during the rest of the project.

61
00:04:02.130 --> 00:04:03.590
This is creating a variable.

62
00:04:04.740 --> 00:04:08.113
This is similar to a steak hook in React,
for

63
00:04:08.113 --> 00:04:11.315
those of you with experience with React.

64
00:04:11.315 --> 00:04:14.892
And here the binding is
done with the dollar sign.

65
00:04:14.892 --> 00:04:19.657
So I have just created this
variable with that modifier,

66
00:04:19.657 --> 00:04:27.650
it's an annotation at state, and then I'm
using the dollar sign prefix for binding.

67
00:04:27.650 --> 00:04:31.109
Now sometimes when you're
changing a lot of code,

68
00:04:31.109 --> 00:04:35.540
such as adding more variables to
your views, the preview stops.

69
00:04:35.540 --> 00:04:37.349
So you need to resume the preview.

70
00:04:40.455 --> 00:04:42.858
Wait for it, remember it need to compile.

71
00:04:45.254 --> 00:04:47.300
And sometimes you see an error like this.

72
00:04:47.300 --> 00:04:49.374
It says, cannot preview this file.

73
00:04:49.374 --> 00:04:52.310
And you can click on Diagnostics.

74
00:04:52.310 --> 00:04:57.420
And if you click Diagnostics,
you will see a message.

75
00:04:57.420 --> 00:05:02.303
So in this case, it's fairly complaining,

76
00:05:02.303 --> 00:05:06.420
remote human readable error, okay?

77
00:05:06.420 --> 00:05:10.470
So remote human are not you,
are the ones there, right?

78
00:05:10.470 --> 00:05:12.210
They are remote human, I guess.

79
00:05:12.210 --> 00:05:17.030
So actually what's going on is
that this is a preview crash.

80
00:05:18.160 --> 00:05:22.304
So most of the time,
you can just rebuild the app,

81
00:05:22.304 --> 00:05:26.220
close the tab, open the tab again, okay?

82
00:05:26.220 --> 00:05:28.912
Or sometimes even reload XCode.

83
00:05:28.912 --> 00:05:31.010
And this is actually true.

84
00:05:31.010 --> 00:05:35.945
As an iOS developer,
you sometimes need to reload XCode

85
00:05:35.945 --> 00:05:40.671
every once in a while,
every couple of times per day.

86
00:05:40.671 --> 00:05:46.160
It's common that it crashes.

87
00:05:46.160 --> 00:05:50.661
So you can even close XCode, open
the project again and see if that helps.

88
00:05:53.978 --> 00:06:00.810
So now I'm going to open ContentView
again, And try to resume.

89
00:06:00.810 --> 00:06:03.000
Also you can try, and
now you can see it's working.

90
00:06:03.000 --> 00:06:04.540
So the magic worked, [LAUGH].

91
00:06:04.540 --> 00:06:06.420
I didn't change anything else.

92
00:06:06.420 --> 00:06:10.188
It says hello unnamed, okay?

93
00:06:10.188 --> 00:06:15.150
So also you can see that it
says unnamed in the text field.

94
00:06:15.150 --> 00:06:17.847
So it's not empty the TextField,

95
00:06:17.847 --> 00:06:23.860
that's because it has a binding and
the variable says unnamed.

96
00:06:23.860 --> 00:06:31.760
If I say an empty string, I resume,
it says enter your name and hello no one.

97
00:06:31.760 --> 00:06:37.860
But if I enter interactive mode,
I should be able to type Max.

98
00:06:39.310 --> 00:06:44.650
And as I'm typing, you will see
that it's changing dynamically.

99
00:06:45.750 --> 00:06:48.612
Also I can run this in the real simulator.

100
00:06:48.612 --> 00:06:50.850
It's weird to say real simulator.

101
00:06:50.850 --> 00:06:54.060
And we can see this in action here.

102
00:06:54.060 --> 00:06:55.730
By the way,
where is the built to our keyboard?

103
00:06:57.460 --> 00:07:01.030
By default, when you open iOS
simulator for the first time,

104
00:07:01.030 --> 00:07:03.907
it's using your hardware keyboard,
your Mac.

105
00:07:03.907 --> 00:07:09.710
So it's emulating like you have like
a Bluetooth keyboard connector.

106
00:07:09.710 --> 00:07:14.912
But if you want, you can select
Command+K or go to the menu,

107
00:07:14.912 --> 00:07:20.931
the here, IO &gt; Keyboard, and
you can toggle the software keyboard.

108
00:07:20.931 --> 00:07:24.170
So you can actually see
the virtual keyboard anyway.

109
00:07:24.170 --> 00:07:27.680
So if I type my full name,
you can see the binding.

110
00:07:27.680 --> 00:07:32.762
So you can see that
the TextField has the binding

111
00:07:32.762 --> 00:07:36.710
to the text label, the static text.

112
00:07:36.710 --> 00:07:39.770
So if I'm changing,
one is changing the other one.

113
00:07:41.540 --> 00:07:47.124
And so there is a re-rendering process
happening behind the scenes automatically.

114
00:07:48.955 --> 00:07:53.800
Okay, do you have any question or
any problems at this point?

115
00:07:53.800 --> 00:07:54.610
How do you feel?

116
00:07:54.610 --> 00:07:57.140
Is it weird?

117
00:07:57.140 --> 00:08:03.966
What's the weirdness level at this point
from one to ten compared to what you know?

118
00:08:03.966 --> 00:08:05.613
&gt;&gt; Modifiers.

119
00:08:05.613 --> 00:08:08.424
&gt;&gt; Modifiers are the weird part.

120
00:08:08.424 --> 00:08:11.783
But you get used to love the idea.

121
00:08:11.783 --> 00:08:15.831
Mostly with this idea that you iterate
over that view, changing the view,

122
00:08:15.831 --> 00:08:19.107
creating a new one, creating a new one,
creating a new one,

123
00:08:19.107 --> 00:08:23.171
then you can apply the same modifier
again, because now it's different.

124
00:08:25.958 --> 00:08:29.550
That how we build these kind of things.

125
00:08:29.550 --> 00:08:32.967
And now let's say that we
wanna reuse this many times.

126
00:08:32.967 --> 00:08:36.850
I know it's not a big deal and
it's not part of our project anyway.

127
00:08:36.850 --> 00:08:41.553
You can take that VStack that
is like the container, and

128
00:08:41.553 --> 00:08:46.958
use Command+click and
I can select the one that will actually,

129
00:08:46.958 --> 00:08:51.385
well, Make Conditional,
we're going to do that.

130
00:08:53.546 --> 00:08:57.820
We can embed another thing inside and
it creates a container.

131
00:08:57.820 --> 00:09:01.700
So these are simple tools
that we have here, right?

132
00:09:01.700 --> 00:09:05.441
So you just Command+click, and

133
00:09:05.441 --> 00:09:10.120
you see all the options that you have.

134
00:09:10.120 --> 00:09:15.540
If we look at our code,
we have now a variable, okay?

135
00:09:15.540 --> 00:09:20.927
That is not just any variable name,
it's in a state variable, which means

136
00:09:20.927 --> 00:09:26.670
that changing that variable will trigger
a re-render of the body of this view.

137
00:09:27.670 --> 00:09:34.168
And also that variable is being used
twice within the template string and

138
00:09:34.168 --> 00:09:39.616
the text view, and
also as a property in the TextField view.

139
00:09:39.616 --> 00:09:45.240
But one has a dollar sign and
the other one has no dollar sign.

140
00:09:45.240 --> 00:09:46.580
Why is that?

141
00:09:46.580 --> 00:09:51.170
Because the text is just using
the value to render the value,

142
00:09:51.170 --> 00:09:53.602
it will never modify the value.

143
00:09:53.602 --> 00:09:58.440
On the other hand, the TextField
is actually modifying the value.

144
00:09:58.440 --> 00:10:04.227
So that's why it needs the dollar
sign that creates a double binding,

145
00:10:04.227 --> 00:10:06.830
a two-way binding.

146
00:10:06.830 --> 00:10:09.930
That's the idea, okay?

147
00:10:09.930 --> 00:10:15.094
So this was just to understand
quickly how this looks like,

148
00:10:15.094 --> 00:10:20.740
but the idea of reusability,
it's part of the framework.

149
00:10:20.740 --> 00:10:23.432
So what if we create another structure,
and

150
00:10:23.432 --> 00:10:27.540
I will talk about the previous
structure in a minute.

151
00:10:27.540 --> 00:10:31.030
So another structure and
I will call this Greeting.

152
00:10:32.870 --> 00:10:38.622
I will just copy the protocol that we
have there that is in a structure,

153
00:10:38.622 --> 00:10:41.742
conforming to the view protocol, and

154
00:10:41.742 --> 00:10:47.390
then it has a body of type some View,
with something inside.

155
00:10:47.390 --> 00:10:52.140
What if I just move this here and

156
00:10:52.140 --> 00:10:56.720
then I can create a Greeting?

157
00:10:56.720 --> 00:10:58.280
Now I have a view.

158
00:11:00.150 --> 00:11:03.580
It's giving me an error because
it has a parent with name,

159
00:11:03.580 --> 00:11:07.781
because I should move also the name
variable, the dependency, okay?

160
00:11:07.781 --> 00:11:09.013
So look at that.

161
00:11:09.013 --> 00:11:12.990
Now I have exactly the same thing,
if I resume,

162
00:11:12.990 --> 00:11:15.982
I have the same thing on the screen.

163
00:11:15.982 --> 00:11:23.497
But the thing is that if I Command+click
here, I can embed into a VStack.

164
00:11:23.497 --> 00:11:29.496
Remember a VStack will organize
layout elements one after the other.

165
00:11:29.496 --> 00:11:36.657
It's similar to a Flexbox, okay,
with a vertical axis in HTML,

166
00:11:36.657 --> 00:11:40.706
I can create more than one Greeting.

167
00:11:40.706 --> 00:11:43.800
Each Greeting having its own state.

168
00:11:45.310 --> 00:11:50.189
So now I have different names.

169
00:11:54.500 --> 00:11:59.230
Each instance of my view is reusable.

170
00:11:59.230 --> 00:12:00.375
Each one has its own state.

171
00:12:00.375 --> 00:12:03.010
They're not sharing the state.

172
00:12:03.010 --> 00:12:07.380
Each version of this Greeting is there.

173
00:12:07.380 --> 00:12:08.350
Does it make sense?

174
00:12:08.350 --> 00:12:12.250
So that's how we make views and
views that we can reuse.

