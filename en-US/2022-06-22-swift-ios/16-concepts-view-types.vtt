WEBVTT

1
00:00:00.000 --> 00:00:02.690
Again, this is not part of our project.

2
00:00:02.690 --> 00:00:05.120
Now we are going to start
working on our project.

3
00:00:05.120 --> 00:00:06.580
But before doing that,

4
00:00:06.580 --> 00:00:11.550
let's review a couple of concepts that
we have already seen regarding SwiftUI.

5
00:00:12.820 --> 00:00:13.933
So we have an app.

6
00:00:13.933 --> 00:00:17.150
We are creating one app
that's simple to understand.

7
00:00:18.170 --> 00:00:22.688
Every app can contain more than one scene,
but most of the time on iOS and

8
00:00:22.688 --> 00:00:25.490
iPhone at least,
we have one scene per app.

9
00:00:25.490 --> 00:00:27.269
There are a couple of exceptions but,

10
00:00:27.269 --> 00:00:31.170
we're not going to see any of those
exceptions, so one app, one scene.

11
00:00:31.170 --> 00:00:35.500
Typically we don't touch the app or
the scene a lot.

12
00:00:35.500 --> 00:00:36.520
And then we have views.

13
00:00:38.060 --> 00:00:44.067
View is a protocol that I can
conform to within a structure.

14
00:00:44.067 --> 00:00:49.815
So I can create my own view, that is just
a structure with a body property and

15
00:00:49.815 --> 00:00:53.750
the body property will
create other views inside.

16
00:00:56.100 --> 00:00:58.121
We have view modifiers.

17
00:00:58.121 --> 00:01:02.764
View modifiers are functions
that we apply to views so

18
00:01:02.764 --> 00:01:06.383
methods of views returning other views.

19
00:01:06.383 --> 00:01:10.460
Typically, they
are returning the same view.

20
00:01:10.460 --> 00:01:16.219
So if I apply a modifier to a button,
I also receive a button as a result, okay?

21
00:01:16.219 --> 00:01:18.478
There are some exceptions but
typically that's how it works.

22
00:01:18.478 --> 00:01:21.117
I modify a text, I receive another text.

23
00:01:21.117 --> 00:01:24.080
If I modify another text,
I receive another text, okay?

24
00:01:25.280 --> 00:01:27.304
Then we have dependencies.

25
00:01:27.304 --> 00:01:32.830
Dependencies are things that will
make that view to render differently.

26
00:01:34.120 --> 00:01:35.930
For example, it can be just a variable.

27
00:01:37.250 --> 00:01:40.869
We haven't seen this before,
but variables,

28
00:01:40.869 --> 00:01:44.669
if I create just a normal
variable is read-only,

29
00:01:44.669 --> 00:01:48.840
I cannot change the variable
of a property in SwiftUI.

30
00:01:49.850 --> 00:01:57.348
If I wanna change it, they must be state
variables with the at state, okay?

31
00:01:57.348 --> 00:02:01.799
So but if you change the state variable,
it will re-render.

32
00:02:01.799 --> 00:02:04.660
We have so also environment data.

33
00:02:04.660 --> 00:02:06.843
We haven't seen any example of this yet.

34
00:02:06.843 --> 00:02:13.548
But there are some data from the outside
that can also trigger re-rendering.

35
00:02:13.548 --> 00:02:20.290
And every unit that we use,
it's actually expressed in points.

36
00:02:20.290 --> 00:02:25.493
So if we are setting a padding,
the font size, position x and

37
00:02:25.493 --> 00:02:32.180
y, width and height, they're
expressed in a unit known as point.

38
00:02:32.180 --> 00:02:35.931
That is the same as px in CSS.

39
00:02:35.931 --> 00:02:39.750
Do you know what px in CSS means?

40
00:02:39.750 --> 00:02:43.437
I know it sounds like a simple question,
but it's not.

41
00:02:43.437 --> 00:02:44.185
&gt;&gt; Pixel.

42
00:02:44.185 --> 00:02:45.490
&gt;&gt; No.

43
00:02:45.490 --> 00:02:49.040
Or kind of,
it's not a physical pixel at least.

44
00:02:50.090 --> 00:02:53.080
It's called a CSS pixel that is virtual.

45
00:02:54.470 --> 00:02:57.389
So you have a device with high resolution,

46
00:02:57.389 --> 00:03:00.723
you're not going to see things smaller,
okay?

47
00:03:00.723 --> 00:03:05.586
So it's going to be multiplied by
a multiplier that is now that the device

48
00:03:05.586 --> 00:03:08.710
picks a radio and CSS, the resolution.

49
00:03:08.710 --> 00:03:13.391
So if you render one 100 pixels px in CSS,
it will look the same in

50
00:03:13.391 --> 00:03:18.925
inches on different iPhones or
centimeters in different iPhones.

51
00:03:18.925 --> 00:03:21.589
But they won't be the same in pixels,

52
00:03:21.589 --> 00:03:25.434
because we have iPhones
with more resolution, okay?

53
00:03:25.434 --> 00:03:31.880
So 100px can be 200 real pixels or
300 real pixels.

54
00:03:31.880 --> 00:03:34.721
Something similar happens here but
we call them points.

55
00:03:34.721 --> 00:03:36.450
Do we have any other unit?

56
00:03:36.450 --> 00:03:37.630
No.

57
00:03:37.630 --> 00:03:44.014
In fact we don't even express the unit,
we just use a number, padding 15.

58
00:03:44.014 --> 00:03:46.885
There are no units,
it's always points, okay?

59
00:03:47.995 --> 00:03:51.459
And we haven't seen this yet, but

60
00:03:51.459 --> 00:03:56.482
we can create PNGs,
we can use PNGs, PDF or SVGs.

61
00:03:56.482 --> 00:04:00.031
We're going to see how to
do that in a minute for

62
00:04:00.031 --> 00:04:03.127
rendering images on the screen, okay?

63
00:04:03.127 --> 00:04:04.400
Cool.

64
00:04:04.400 --> 00:04:10.620
Well, after this main concept we have some
of the most important built-in views.

65
00:04:10.620 --> 00:04:15.287
We have the text that will just render
text on the screen, the label, a label,

66
00:04:15.287 --> 00:04:18.611
render text plus an image,
like icon and text, icon and

67
00:04:18.611 --> 00:04:20.618
text, that's kind of the idea.

68
00:04:20.618 --> 00:04:24.817
The bottom HStack, VStask.

69
00:04:24.817 --> 00:04:30.379
HStack is horizontal, ZStack is vertical,
sorry, VStack is vertical,

70
00:04:30.379 --> 00:04:35.877
ZStack it's actually putting things
in layers, one on top of the other.

71
00:04:35.877 --> 00:04:40.120
It's how you put two views,
one on top of the other.

72
00:04:41.510 --> 00:04:47.410
LazyHStack and
LazyVStack are actually for scrolling.

73
00:04:47.410 --> 00:04:50.927
So, when you have a VStack of 100 views,

74
00:04:50.927 --> 00:04:56.071
they are going to be,
I'm talking about HStack or VStack here.

75
00:04:56.071 --> 00:05:00.144
If you have 100 sub views,
they will be rendered,

76
00:05:00.144 --> 00:05:03.370
even if they're not on the screen.

77
00:05:03.370 --> 00:05:05.478
When you use the lazy versions,

78
00:05:08.964 --> 00:05:12.907
They're going to be render as soon
as they appear on the screen.

79
00:05:12.907 --> 00:05:14.105
Does it make sense?

80
00:05:14.105 --> 00:05:17.853
It has to do with performance and
it happens automatically,

81
00:05:17.853 --> 00:05:22.546
I don't need to do anything special
&gt;&gt; Threshold you could sit on that to say,

82
00:05:22.546 --> 00:05:26.720
as you're scrolling up and,
&gt;&gt; You can customize with modifiers.

83
00:05:26.720 --> 00:05:31.185
The base tag I'm not sure how
deep you can get directly, but

84
00:05:31.185 --> 00:05:33.960
if not, you can create your own one.

85
00:05:35.450 --> 00:05:40.131
We have a spacer that is kind of weird
because it reminds me on how we were doing

86
00:05:40.131 --> 00:05:42.710
web design during the 90s.

87
00:05:42.710 --> 00:05:44.610
We will see that in a minute.

88
00:05:44.610 --> 00:05:49.490
At least that it's like VStack,
but it has interaction.

89
00:05:50.540 --> 00:05:54.950
So it creates interaction
over its children.

90
00:05:54.950 --> 00:05:56.780
We will see this later.

91
00:05:56.780 --> 00:06:01.489
For each, that repeats a view or
a set of views.

92
00:06:01.489 --> 00:06:06.425
NavigationView, we're going see this
in a minute, NavigationLink the same.

93
00:06:06.425 --> 00:06:08.649
TabView for working with tabs.

94
00:06:08.649 --> 00:06:12.453
TextField, this is the one
that we have just used.

95
00:06:12.453 --> 00:06:13.670
And toggle.

96
00:06:13.670 --> 00:06:20.306
Toggle is a switch for on, off,
it's like an equivalent to a checkmark.

97
00:06:20.306 --> 00:06:25.093
These are just some of the building
bills that we would probably

98
00:06:25.093 --> 00:06:27.452
use over the next hour, okay?

99
00:06:27.452 --> 00:06:32.300
Each of these elements,
they have their own modifiers, okay?

100
00:06:32.300 --> 00:06:38.190
Yeah, we can take a week talking about
all the modifiers that we can use for

101
00:06:38.190 --> 00:06:39.712
each view, okay?

102
00:06:39.712 --> 00:06:42.650
But of course we're going to use
a couple and the most important one

