WEBVTT

1
00:00:00.000 --> 00:00:05.557
So as we mentioned before, Swift is
anesthetically type language, okay?

2
00:00:05.557 --> 00:00:10.663
So variables as we saw before,
they're using the keyword var.

3
00:00:10.663 --> 00:00:14.573
Var, the name, and that's all.

4
00:00:14.573 --> 00:00:18.590
Constants are using the keyword let.

5
00:00:18.590 --> 00:00:22.587
And if you're a JavaScript developer,
be very careful.

6
00:00:22.587 --> 00:00:27.644
Because you know that in JavaScript at
least from ES6, or w ECMAScript 2015,

7
00:00:27.644 --> 00:00:31.345
let, it's actually defining
the variable in JavaScript.

8
00:00:31.345 --> 00:00:35.794
But here let is a constant that can
actually be used for a constant and

9
00:00:35.794 --> 00:00:37.990
also for an immutable variable.

10
00:00:37.990 --> 00:00:40.678
I don't know if you know the difference,
but

11
00:00:40.678 --> 00:00:44.358
actually a constant needs to be
defined at compiled time, and

12
00:00:44.358 --> 00:00:48.847
an immutable variable is something
that you can define in execution time.

13
00:00:48.847 --> 00:00:51.612
You can go to a database,
retrieve a value, and

14
00:00:51.612 --> 00:00:54.185
store that value in an immutable variable.

15
00:00:54.185 --> 00:00:56.585
After it's set you cannot change it.

16
00:00:56.585 --> 00:00:59.975
Well, let can be used for both, okay?

17
00:00:59.975 --> 00:01:03.137
And most of the time
we're going to use let.

18
00:01:03.137 --> 00:01:08.445
I can say that probably nine of ten
times we use let, not var, okay?

19
00:01:08.445 --> 00:01:14.021
Because typically we don't change
values of most of our variables.

20
00:01:14.021 --> 00:01:17.004
So we make them an immutable, okay?

21
00:01:17.004 --> 00:01:20.730
So it's just let instead of var,
just that, okay?

22
00:01:20.730 --> 00:01:25.426
Time types are defined
with colon after the name.

23
00:01:25.426 --> 00:01:28.556
So yeah, this is new.

24
00:01:28.556 --> 00:01:31.530
So if I have a name,
I say colon, a string,

25
00:01:31.530 --> 00:01:34.442
typically we use a space after the colon.

26
00:01:34.442 --> 00:01:39.649
Of course you can do however you want this
because spaces are not important in Swift.

27
00:01:39.649 --> 00:01:42.660
Means so like Python where space is so
important.

28
00:01:42.660 --> 00:01:47.350
Now, here you can have more or less
spaces, but typically we use this syntax.

29
00:01:47.350 --> 00:01:51.293
If you have experience with TypeScript,
it's kind of similar.

30
00:01:51.293 --> 00:01:53.242
The same as ActionScript.

31
00:01:53.242 --> 00:01:55.309
Remember that from the Flash error?

32
00:01:55.309 --> 00:01:58.365
It's actually using that syntax.

33
00:01:58.365 --> 00:02:05.949
Okay, so let name string means that I'm
going to have a constant of type string.

34
00:02:05.949 --> 00:02:10.580
But as we saw before, most of the time
we don't need just press a type, okay?

35
00:02:10.580 --> 00:02:15.693
Because that's how Swift infers the type.

36
00:02:15.693 --> 00:02:20.762
If I'm setting a value like this,
if I'm setting

37
00:02:20.762 --> 00:02:26.445
the value like this, okay,
it's inferring the type.

38
00:02:26.445 --> 00:02:30.595
How do you know the type
that is being inferred here?

39
00:02:30.595 --> 00:02:37.167
Option click, Option click over
the name give me the type.

40
00:02:37.167 --> 00:02:38.606
Here it says string, okay?

41
00:02:42.080 --> 00:02:45.014
That's how it's inferring that.

42
00:02:45.014 --> 00:02:47.031
But it's actually inferring the type.

43
00:02:47.031 --> 00:02:52.172
It's not like JavaScript where actually
then we can store something different.

44
00:02:52.172 --> 00:02:54.043
It's not gonna work here.

45
00:02:54.043 --> 00:02:57.431
If it's a string, it's a string.

46
00:02:57.431 --> 00:03:00.116
Actually there is a trick
as on a lot of languages.

47
00:03:00.116 --> 00:03:04.480
There is a type, and
because it's a type, it's title case.

48
00:03:04.480 --> 00:03:07.848
So we start with uppercase, quote, Any.

49
00:03:07.848 --> 00:03:10.577
Any means like a JavaScript variable.

50
00:03:10.577 --> 00:03:17.425
Any also exists in other languages,
such as even TypeScript, okay?

51
00:03:17.425 --> 00:03:19.541
So Any means, well, actually, well,

52
00:03:19.541 --> 00:03:22.542
here it's give me an error
because it's actually a let.

53
00:03:22.542 --> 00:03:26.385
So it's not a data type error,
it's saying to me, hey, it's a let, so

54
00:03:26.385 --> 00:03:28.098
you cannot reassign the value.

55
00:03:28.098 --> 00:03:31.802
But if we change to var I
can actually change that.

56
00:03:31.802 --> 00:03:38.795
The problem with Any is that then
the language doesn't know what it is.

57
00:03:38.795 --> 00:03:45.315
So if I wanna use that, I can even create
an array now, an empty array, okay?

58
00:03:45.315 --> 00:03:49.956
So that's how you create an empty array.

59
00:03:49.956 --> 00:03:53.654
So the problem is that when
I am trying to use it,

60
00:03:53.654 --> 00:03:57.636
I don't have properties,
I don't have methods.

61
00:03:57.636 --> 00:03:58.497
I need to cast.

62
00:03:58.497 --> 00:04:01.573
And we are getting into a dark place,
okay,

63
00:04:01.573 --> 00:04:05.575
because we don't wanna do
this unless we have to, okay?

64
00:04:05.575 --> 00:04:10.494
And there are some special situation
where we have to define any,

65
00:04:10.494 --> 00:04:12.648
but we don't wanna do this.

66
00:04:12.648 --> 00:04:15.794
Okay, so
we don't wanna use any as a data type.

67
00:04:15.794 --> 00:04:20.517
So as I mentioned before, types
are defined with colon after the name.

68
00:04:20.517 --> 00:04:22.285
So something like this.

69
00:04:22.285 --> 00:04:24.820
But sometimes we have a problem.

70
00:04:24.820 --> 00:04:27.470
Let's say that prices are always double.

71
00:04:27.470 --> 00:04:31.309
By the way double,
it's a double precision float, okay?

72
00:04:31.309 --> 00:04:33.786
So a decimal with more precision.

73
00:04:33.786 --> 00:04:38.220
So let's say that I have fair prices,
and I want all of them to be double.

74
00:04:38.220 --> 00:04:42.424
So price, it's actually double, okay?

75
00:04:42.424 --> 00:04:44.086
It says double.

76
00:04:44.086 --> 00:04:46.680
Other price, it's also a double.

77
00:04:46.680 --> 00:04:50.564
But a fair that I have here, I'm using,

78
00:04:50.564 --> 00:04:55.265
remember, Option click, says int, integer.

79
00:04:55.265 --> 00:04:58.591
Do you know why it says integer?

80
00:04:58.591 --> 00:05:00.090
Does anyone know why it says integer?

81
00:05:03.514 --> 00:05:05.585
&gt;&gt; The other two were maybe floats and

82
00:05:05.585 --> 00:05:09.809
it's considering an int as just
a different type of value [CROSSTALK].

83
00:05:09.809 --> 00:05:14.067
&gt;&gt; Yeah, the other two, well,
the first one didn't have a value, but

84
00:05:14.067 --> 00:05:15.836
we set explicitly the type.

85
00:05:15.836 --> 00:05:18.268
The second one has a .99.

86
00:05:18.268 --> 00:05:22.300
And yeah, that's a double by default,
it's a literal double.

87
00:05:22.300 --> 00:05:26.386
But now 23,
by default it's a literal string.

88
00:05:26.386 --> 00:05:28.426
I'm sorry, integer.

89
00:05:28.426 --> 00:05:31.806
So 23 is a literal integer.

90
00:05:31.806 --> 00:05:38.921
&gt;&gt; What will happen if you went next line
and changed the value to some float?

91
00:05:38.921 --> 00:05:41.509
&gt;&gt; Okay, so you wanna do now 23.99?

92
00:05:41.509 --> 00:05:43.091
&gt;&gt; Yeah.
&gt;&gt; It's not gonna work.

93
00:05:43.091 --> 00:05:45.850
I mean, if I save this,
it's going to compile.

94
00:05:45.850 --> 00:05:50.665
And it's saying, you cannot assign
a value of type double to a type int.

95
00:05:50.665 --> 00:05:56.190
Because the variable was defined as
integer, you cannot change the type later.

96
00:05:56.190 --> 00:05:58.170
So, then we need to change this.

97
00:05:58.170 --> 00:06:02.696
There are two ways to solve the problem,
.0.

98
00:06:02.696 --> 00:06:03.870
Yeah, that works.

99
00:06:03.870 --> 00:06:05.651
That becomes a double now.

100
00:06:05.651 --> 00:06:08.202
Or we can explicitly state the type.

101
00:06:08.202 --> 00:06:13.843
And they will say, okay, I know that
mean the literal now is an integer,

102
00:06:13.843 --> 00:06:17.371
but that integer can
also be used as a double.

103
00:06:17.371 --> 00:06:19.210
So it works, yeah?

104
00:06:19.210 --> 00:06:24.590
&gt;&gt; Can you show again how
you find the inferred type?

105
00:06:24.590 --> 00:06:26.650
&gt;&gt; Yeah, use the Option key.

106
00:06:26.650 --> 00:06:30.220
When you use the Option key,
let me zoom in a little bit.

107
00:06:30.220 --> 00:06:35.244
So you can see that the cursor becomes
a question mark with the Option key.

108
00:06:35.244 --> 00:06:37.220
You keep the Option key pressed.

109
00:06:37.220 --> 00:06:40.120
Then you hover and then you click
with the Option key pressed.

110
00:06:43.382 --> 00:06:46.644
And then you'll see a dialog
with the current information.

111
00:06:46.644 --> 00:06:49.258
You can see it says no overview available.

112
00:06:49.258 --> 00:06:53.782
If you're using the recent special
documentation comment system similar to

113
00:06:53.782 --> 00:06:57.819
Java doc and many others that you can set,
so then you can actually see

114
00:06:57.819 --> 00:07:02.565
summary information or help information
for the developer from that variable.

115
00:07:05.538 --> 00:07:07.569
Okay, makes sense?

116
00:07:07.569 --> 00:07:10.010
Cool, well, they are called data types.

117
00:07:10.010 --> 00:07:13.736
We have a string, capital S,
be careful with that.

118
00:07:13.736 --> 00:07:17.663
All the data types in Swift
starts with capital letters.

119
00:07:17.663 --> 00:07:25.955
Integers, we have also bit specific
numbers like int 32, int 8, like a byte.

120
00:07:25.955 --> 00:07:29.550
And also we have unsigned integers.

121
00:07:29.550 --> 00:07:32.060
They are only positive numbers.

122
00:07:32.060 --> 00:07:33.445
We have double.

123
00:07:33.445 --> 00:07:36.887
We also have a single precision float,
it's called float.

124
00:07:36.887 --> 00:07:41.004
We don't typically use it a lot
because the framework and

125
00:07:41.004 --> 00:07:45.479
everything inside will actually
use double most of the time.

126
00:07:45.479 --> 00:07:47.197
And finally we have Bool.

127
00:07:47.197 --> 00:07:50.821
Not Boolean, it's called Bool,
okay, that's the type.

128
00:07:50.821 --> 00:07:56.548
And we use the value of true and
false and values are in lowercase.

129
00:07:56.548 --> 00:07:59.307
For a strings, if you're creating
a strings we use double quotes.

130
00:07:59.307 --> 00:08:00.722
We cannot use single quotes.

131
00:08:00.722 --> 00:08:02.850
So if you're a single quote person,
I'm sorry.

132
00:08:02.850 --> 00:08:06.140
So it's double quotes for strings.

133
00:08:06.140 --> 00:08:09.820
And something interesting
is that within any string,

134
00:08:09.820 --> 00:08:14.220
you can have a template expressions
similar to other languages.

135
00:08:14.220 --> 00:08:19.000
I know if you're using JavaScript you
have dollar sign and like CodeBlock.

136
00:08:19.000 --> 00:08:22.789
Well, here is backslash parentheses.

137
00:08:22.789 --> 00:08:30.798
So within the string, backlash parentheses
will actually accept any expression, okay?

138
00:08:30.798 --> 00:08:32.336
So it can be a variable.

139
00:08:32.336 --> 00:08:35.923
And if it's a variable,
like for example a price,

140
00:08:35.923 --> 00:08:40.019
if it's a double it will convert
that value into a string.

141
00:08:40.019 --> 00:08:43.425
Either need to make
the conversion manually, okay?

142
00:08:43.425 --> 00:08:48.024
So it's gonna work automatically.

143
00:08:48.024 --> 00:08:52.978
To finish the basic data
types idea that we're going

144
00:08:52.978 --> 00:08:56.812
to use later in our app, we have tuples.

145
00:08:56.812 --> 00:08:59.909
So there is actually
an interesting data type.

146
00:08:59.909 --> 00:09:05.010
A tuple is defined with parentheses on
a comma separated list of other types.

147
00:09:05.010 --> 00:09:09.934
So, for example,
I create a variable named coordinate

148
00:09:09.934 --> 00:09:13.089
as a tuple of join integers, okay?

149
00:09:13.089 --> 00:09:18.670
And how do you access each value,
with .0 and .1, okay?

150
00:09:18.670 --> 00:09:20.893
I know that sounds weird.

151
00:09:20.893 --> 00:09:26.839
So this is not an array,
so we don't use an angle,

152
00:09:26.839 --> 00:09:30.389
something like this, okay?

153
00:09:30.389 --> 00:09:33.324
We don't wanna do this
because it's not an array.

154
00:09:33.324 --> 00:09:34.770
It's just .0 and .1.

155
00:09:34.770 --> 00:09:40.316
But be sure that you are looking at
the next sample that we have here.

156
00:09:40.316 --> 00:09:44.803
Of course you don't need
to use the same type.

157
00:09:44.803 --> 00:09:49.387
Any time will work, so I'd say that
the city is a string or an integer,

158
00:09:49.387 --> 00:09:51.819
like the city name and a population.

159
00:09:51.819 --> 00:09:55.142
And look at that underscore there.

160
00:09:55.142 --> 00:10:01.502
You can use the underscore in integers and
double literals for my separator.

161
00:10:01.502 --> 00:10:06.840
This is just for human visibility, okay,
to improve how we humans read numbers.

162
00:10:06.840 --> 00:10:09.541
That's all, okay?

163
00:10:09.541 --> 00:10:12.626
So it's actually the same if
you don't have that underscore.

164
00:10:12.626 --> 00:10:15.518
It doesn't make any difference, okay?

165
00:10:15.518 --> 00:10:21.413
When you're creating tuples, something
that you can do is also to pick a name for

166
00:10:21.413 --> 00:10:24.545
each section in each segment of the tuple.

167
00:10:24.545 --> 00:10:29.870
So here I have in a state with a name and
population, and is nice, okay?

168
00:10:29.870 --> 00:10:33.133
So it's a couple of three segments.

169
00:10:33.133 --> 00:10:35.224
This is not a class.

170
00:10:35.224 --> 00:10:36.464
This is not a structure.

171
00:10:36.464 --> 00:10:42.736
It's just having one variable name
with three variables inside, okay?

172
00:10:42.736 --> 00:10:46.932
But it doesn't contain any other thing
like when we have classes, okay?

173
00:10:46.932 --> 00:10:50.037
It's just a simple way to create, I mean,

174
00:10:50.037 --> 00:10:54.710
in JavaScript you create an object
typically to do this, okay?

175
00:10:54.710 --> 00:10:57.063
You use JSON to create an object quickly.

176
00:10:57.063 --> 00:10:59.954
But here we have tuples, sir?

177
00:10:59.954 --> 00:11:04.306
&gt;&gt; It's a class without the methods, it's
just like the data part of it, kind of?

178
00:11:04.306 --> 00:11:09.210
&gt;&gt; Kind of, why this is not actually
like a class without methods?

179
00:11:09.210 --> 00:11:13.588
Because what happens if I have
a function that receives in a state,

180
00:11:13.588 --> 00:11:15.551
like print the state, okay?

181
00:11:15.551 --> 00:11:19.524
Well, we haven't seen functions here yet,
but let's fast forward a little bit.

182
00:11:19.524 --> 00:11:24.783
We'll receive state, okay,
and type, what's the type?

183
00:11:24.783 --> 00:11:26.357
Well, actually the type is this.

184
00:11:26.357 --> 00:11:27.540
So this is the type.

185
00:11:27.540 --> 00:11:29.001
Okay, so I need to copy this.

186
00:11:29.001 --> 00:11:30.240
There are better ways to do this.

187
00:11:30.240 --> 00:11:34.019
But anyway, that's the type,
including the parentheses.

188
00:11:34.019 --> 00:11:36.711
Because the parentheses means tuple, okay?

189
00:11:36.711 --> 00:11:39.610
So that's the type.

190
00:11:39.610 --> 00:11:44.268
The thing is that when you're
sending the state as an argument, so

191
00:11:44.268 --> 00:11:48.940
I call print the state,
this code is not gonna work for now, okay?

192
00:11:48.940 --> 00:11:52.658
So just believe me, I will explain
why it's not gonna work in a minute.

193
00:11:52.658 --> 00:11:58.172
So I sent that state.

194
00:11:58.172 --> 00:12:02.738
So it's actually making a copy.

195
00:12:02.738 --> 00:12:09.525
So it's passing the tuple,
not by reference, but by value.

196
00:12:09.525 --> 00:12:13.255
So an object from a class,
it's passed by reference.

197
00:12:13.255 --> 00:12:16.397
These are just values.

198
00:12:16.397 --> 00:12:20.979
So which means that if you can
somehow change the name or

199
00:12:20.979 --> 00:12:25.962
the population within the function,
you're not changing

200
00:12:25.962 --> 00:12:30.360
the original variable because it's a copy,
okay?

201
00:12:30.360 --> 00:12:32.630
We will see these in action later.

202
00:12:32.630 --> 00:12:34.992
And why this is giving me an error?

203
00:12:34.992 --> 00:12:38.930
I can give you a hint, okay,
of why this is giving me an error.

204
00:12:38.930 --> 00:12:42.277
In fact, it says, missing argument label.

205
00:12:42.277 --> 00:12:47.202
And you're not going to
like this at first sight.

206
00:12:47.202 --> 00:12:51.138
So you're going to see these for the first
time, you will see, what's going on?

207
00:12:51.138 --> 00:12:57.099
It's asking me to insert a state
colon in the function call.

208
00:12:58.438 --> 00:13:01.533
State, it's actually
the name of my argument.

209
00:13:01.533 --> 00:13:05.790
I have some simple examples just
to actually explain this, okay?

210
00:13:05.790 --> 00:13:10.526
But just because I did this just
to finish, I mean, the answer,

211
00:13:10.526 --> 00:13:14.930
it's not the same as a class
because these are just values.

212
00:13:14.930 --> 00:13:18.785
And they are being copied every
time you are passing this or

213
00:13:18.785 --> 00:13:21.860
returning this from one
function to another.

