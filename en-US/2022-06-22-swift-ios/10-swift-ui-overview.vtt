WEBVTT

1
00:00:00.000 --> 00:00:05.638
Now that we've seen something about Swift,
let's talk a little bit about Swift UI,

2
00:00:05.638 --> 00:00:11.138
Swift UI first it uses the same icon with
a different color than swift the language.

3
00:00:11.138 --> 00:00:15.012
Unfortunately, I'm not sure if
it's the right name, right,

4
00:00:15.012 --> 00:00:19.693
I remember jQuery and jQuery Mobile that
they were also having the same name.

5
00:00:19.693 --> 00:00:24.156
But they were completely different things,
something similar happens here,

6
00:00:24.156 --> 00:00:27.098
Swift is a language, and
Swift UI is a UI framework.

7
00:00:27.098 --> 00:00:31.922
Yeah, with Swift, but it's a UI framework,
anyway, it's called Swift UI,

8
00:00:31.922 --> 00:00:34.524
and it's said declarative UI framework.

9
00:00:34.524 --> 00:00:39.653
So instead of using an XML or
instead of creating a button

10
00:00:39.653 --> 00:00:45.014
like new button and
setting the properties of the button.

11
00:00:45.014 --> 00:00:51.129
You're gonna use something, for now, let's
say it's similar, but it's not similar,

12
00:00:51.129 --> 00:00:56.308
something similar to HTML, okay, or
JSX in react, okay, like a template.

13
00:00:56.308 --> 00:01:01.671
It doesn't look like that, but it's
the clarity, so the concepts are there,

14
00:01:01.671 --> 00:01:05.690
they're going to declarative
create our user interface.

15
00:01:05.690 --> 00:01:10.713
It was launched a couple of years ago,
it's still kind of new, we can say that

16
00:01:10.713 --> 00:01:15.679
it's a starting right now to feel like,
okay, it's ready to create apps.

17
00:01:15.679 --> 00:01:19.422
I mean, the first year there were
a lot of companies say, hey,

18
00:01:19.422 --> 00:01:24.085
I don't think it's ready, okay, bugs,
some problems or limitations, but

19
00:01:24.085 --> 00:01:27.427
now it's start to feel that it's ready for
primetime.

20
00:01:27.427 --> 00:01:31.382
It has a focus on modern UI patterns,

21
00:01:31.382 --> 00:01:35.975
such as having a single source of truth,
so

22
00:01:35.975 --> 00:01:42.371
the data should live in one place and
only one place, okay?

23
00:01:42.371 --> 00:01:47.330
Reusable views, we're not going
to use a term component here, but

24
00:01:47.330 --> 00:01:50.993
every time we say views,
it's like a component.

25
00:01:50.993 --> 00:01:56.947
In React, Angular or other frameworks,
okay, a view it's something that we

26
00:01:56.947 --> 00:02:02.473
put on the screen, that can have
properties, state, and we can reuse.

27
00:02:02.473 --> 00:02:07.835
Okay, that's the idea, it's multiplatform,
so every view that you create, it's

28
00:02:07.835 --> 00:02:13.061
actually compatible with the watch, with
the iPad, with the iPhone and with a Mac.

29
00:02:13.061 --> 00:02:18.548
And with the Apple TV, of course you
have some specifics on the platform,

30
00:02:18.548 --> 00:02:21.569
but basics of two will work everywhere.

31
00:02:21.569 --> 00:02:26.528
And it has dependency rendering,
which means similar

32
00:02:26.528 --> 00:02:31.611
to how react works or
other declarative UI frameworks.

33
00:02:31.611 --> 00:02:36.238
We are going to define dependencies and
every time one of

34
00:02:36.238 --> 00:02:41.167
those dependencies is changing,
the view will re render.

35
00:02:41.167 --> 00:02:46.805
Okay, so it will automatically
re render based on dependencies,

36
00:02:46.805 --> 00:02:51.031
so I don't need to rely on
my own event binding, so

37
00:02:51.031 --> 00:02:55.580
it's not like on click,
I'm going to change a view.

38
00:02:55.580 --> 00:03:00.944
Now unclick I'm going to change
maybe the state, a dependency,

39
00:03:00.944 --> 00:03:05.528
a variable, and
automatically the view knows, that,

40
00:03:05.528 --> 00:03:11.011
that dependency changes and
it's going to re render the content.

41
00:03:11.011 --> 00:03:15.390
Okay, we're going to see
this in action anyway,

42
00:03:15.390 --> 00:03:21.356
it uses data binding for that, so
we connect the view with the data.

43
00:03:21.356 --> 00:03:25.997
And the view will automatically
sync with the data every time

44
00:03:25.997 --> 00:03:31.002
the data changes and vice versa,
we can have single way binding or

45
00:03:31.002 --> 00:03:35.834
double way binding,
similar to Angular or other frameworks.

46
00:03:35.834 --> 00:03:41.648
And the UI is expressed in Swift
structures, we don't use objects,

47
00:03:41.648 --> 00:03:47.681
we don't use classes, just structures and
this is high performance.

48
00:03:47.681 --> 00:03:52.242
Because the structure is just data,
and we can clone the data,

49
00:03:52.242 --> 00:03:55.784
we can create as much data
if we want just memory.

50
00:03:55.784 --> 00:04:00.951
Really high performance memory,
not objects with their own life cycles,

51
00:04:00.951 --> 00:04:04.723
no, no, just data, and
then when that data is ready,

52
00:04:04.723 --> 00:04:08.762
the framework will render
the abuse on the screen, okay?

53
00:04:08.762 --> 00:04:12.404
So we are going to be
heavily based in structures,

54
00:04:12.404 --> 00:04:15.626
that's the only thing that we will create.

55
00:04:15.626 --> 00:04:20.088
Yeah, then we have the model and
our business logic and

56
00:04:20.088 --> 00:04:24.744
maybe we can use classes on Opie there,
but for swift UI,

57
00:04:24.744 --> 00:04:27.657
everything is a structure, okay?

58
00:04:27.657 --> 00:04:31.943
And we also have a visual editor in Xcode,

59
00:04:31.943 --> 00:04:36.718
that we will see later,
so we can also see how my

60
00:04:36.718 --> 00:04:41.739
view looks like,
while I'm bright in the code,

61
00:04:41.739 --> 00:04:46.537
okay, makes sense,
do we have any question?

62
00:04:46.537 --> 00:04:50.881
&gt;&gt; Seems the industry is going towards
things like reactive programming,

63
00:04:50.881 --> 00:04:55.803
that's their answer or
&gt;&gt; Yeah, if you are a React developer,

64
00:04:55.803 --> 00:04:59.296
you will feel a lot of similarities,

65
00:04:59.296 --> 00:05:04.027
not in how it looks like
because it's not JSX, but

66
00:05:04.027 --> 00:05:08.097
the ideas and
how you think about your app.

67
00:05:08.097 --> 00:05:13.508
And how the app updates itself or
how the components now as views here,

68
00:05:13.508 --> 00:05:18.659
how they are being re rendered,
all the ideas are pretty similar.

69
00:05:18.659 --> 00:05:22.548
Okay, so with different syntax,
but the idea, the patterns,

70
00:05:22.548 --> 00:05:25.222
the architecture patterns are the same/.

