WEBVTT

1
00:00:00.761 --> 00:00:05.876
I'm going to jump into chapter four,
null safety.

2
00:00:05.876 --> 00:00:09.852
So let's try to analyze the idea first.

3
00:00:09.852 --> 00:00:13.921
So I'm going to add a couple of
lines here so you don't see that.

4
00:00:13.921 --> 00:00:18.920
So when you create the variable in Swift,
I am creating a variable.

5
00:00:18.920 --> 00:00:20.174
For example, let's do this.

6
00:00:20.174 --> 00:00:24.471
I'm going to create a class even
if we haven't seen classes yet.

7
00:00:24.471 --> 00:00:26.628
But we create the class Person.

8
00:00:26.628 --> 00:00:30.571
We use code block and
create the variable with a name, okay?

9
00:00:30.571 --> 00:00:34.267
And say the name is going to be a String.

10
00:00:34.267 --> 00:00:36.671
If I do this, it's giving me an error.

11
00:00:36.671 --> 00:00:40.847
It's saying, hey,
class person has no initializer.

12
00:00:40.847 --> 00:00:45.059
By the way, an initializer is
another name for a constructor.

13
00:00:45.059 --> 00:00:48.372
In Swift, we call constructors,
initializer.

14
00:00:48.372 --> 00:00:51.408
But why is it saying this?

15
00:00:51.408 --> 00:00:56.683
Because it says that the property
name has no initial value.

16
00:00:56.683 --> 00:01:01.380
So I actually need to receive
that value in the initializer or

17
00:01:01.380 --> 00:01:03.508
set it in the initializer.

18
00:01:03.508 --> 00:01:11.541
It's complaining because if I say that the
name is a string, I must have a string.

19
00:01:11.541 --> 00:01:17.212
It cannot be nil or null,
in Swift we use nil.

20
00:01:17.212 --> 00:01:20.834
So actually,
I cannot live without the value.

21
00:01:20.834 --> 00:01:22.421
It needs a value.

22
00:01:22.421 --> 00:01:30.181
But sometimes we have the situation where
semantically, that value is optional.

23
00:01:30.181 --> 00:01:35.167
In that case,
we said that with a question mark, okay?

24
00:01:35.167 --> 00:01:38.495
So at the end of the type,
we'll use a question mark.

25
00:01:38.495 --> 00:01:42.927
So it can be a string or nil.

26
00:01:42.927 --> 00:01:46.645
It's called nil, not null here, okay?

27
00:01:46.645 --> 00:01:49.620
So now by default, it's going to be nil.

28
00:01:49.620 --> 00:01:53.835
And if you want,
you can add value to it, okay?

29
00:01:53.835 --> 00:01:57.933
So on every type, I mean,
you can also have a double.

30
00:01:57.933 --> 00:02:02.974
For example, it can have a coordinate, and
say, okay, it's a double of two integers.

31
00:02:02.974 --> 00:02:07.262
And I can say, okay, it can also be null.

32
00:02:07.262 --> 00:02:12.621
It's optional, or
I can have even optionals on each type.

33
00:02:12.621 --> 00:02:18.733
For example, the first one is mandatory
and the second one is optional.

34
00:02:18.733 --> 00:02:24.140
So I can use these question
marks on every type, okay?

35
00:02:24.140 --> 00:02:28.518
Saying that the value for
the type is optional, okay?

36
00:02:28.518 --> 00:02:29.770
Does it make sense?

37
00:02:29.770 --> 00:02:31.640
For now it feels okay.

38
00:02:31.640 --> 00:02:34.410
It's not actually a big deal,
it sounds cool.

39
00:02:34.410 --> 00:02:37.803
But then we start with some problems.

40
00:02:37.803 --> 00:02:43.951
For example, if I have a name,
that it's going to be a string or

41
00:02:43.951 --> 00:02:48.136
nil, I cannot call a property or a method.

42
00:02:48.136 --> 00:02:52.017
For example, count is how you
count characters on a string.

43
00:02:52.017 --> 00:02:54.939
By the way, it's also how you
count items in a collection.

44
00:02:54.939 --> 00:02:58.255
It's dot count, not dot length.

45
00:02:58.255 --> 00:03:00.982
But it's saying, hey, no,

46
00:03:00.982 --> 00:03:06.110
I cannot give you the count,
the amount of characters,

47
00:03:06.110 --> 00:03:11.583
because maybe the name is nil,
okay, so we have a problem.

48
00:03:11.583 --> 00:03:12.810
Does it makes sense?

49
00:03:12.810 --> 00:03:16.764
There are two ways to solve the problem,
because it says, hey,

50
00:03:16.764 --> 00:03:20.000
maybe it's nil, so
maybe there are no characters.

51
00:03:20.000 --> 00:03:25.374
One solution is to use
an exclamation mark.

52
00:03:25.374 --> 00:03:32.221
The exclamation mark will treat
the optional as non-optional.

53
00:03:32.221 --> 00:03:37.028
Will actually say, okay,
there is a value there, so go and

54
00:03:37.028 --> 00:03:39.540
get the amount of characters.

55
00:03:39.540 --> 00:03:41.351
What happens if it's nil?

56
00:03:41.351 --> 00:03:46.554
Like in this case,
your app will crash because this

57
00:03:46.554 --> 00:03:52.010
is like in Java,
the null pointer exception, okay?

58
00:03:52.010 --> 00:03:57.725
The difference here is that this is not
an exception, we cannot trap it so easily.

59
00:03:57.725 --> 00:03:59.908
Actually, your app will crash.

60
00:03:59.908 --> 00:04:05.715
And if your app crashes on iOS at least,
it will actually be closed.

61
00:04:05.715 --> 00:04:10.833
Probably you've seen that as a user both
on Android or iOS, that you were using

62
00:04:10.833 --> 00:04:15.890
an app and then the app disappears
magically, but that's actually a crash.

63
00:04:15.890 --> 00:04:23.269
So we should use this exclamation
mark with a lot of care.

64
00:04:23.269 --> 00:04:30.006
Actually, it's kind of a bad practice
to use it like this unless you know for

65
00:04:30.006 --> 00:04:35.689
sure as a developer,
that if the execution gets into line 30,

66
00:04:35.689 --> 00:04:38.972
there is a value in that name, okay?

67
00:04:38.972 --> 00:04:43.496
Another option that we have
is to use another operator is

68
00:04:43.496 --> 00:04:45.720
called the safe operator.

69
00:04:45.720 --> 00:04:48.918
It's question mark dot.

70
00:04:48.918 --> 00:04:54.113
Question mark dot will actually treat

71
00:04:54.113 --> 00:04:58.662
that, Optional as optional.

72
00:04:58.662 --> 00:05:05.286
And this is like asking, okay,
if it's not nil, get the count,

73
00:05:05.286 --> 00:05:10.471
and if it's nil, return nil or
do nothing, okay?

74
00:05:10.471 --> 00:05:16.629
So for example, what happens if I
create a variable here, like this.

75
00:05:16.629 --> 00:05:20.837
I call the variable count,
and I'm saying its name.

76
00:05:20.837 --> 00:05:26.089
Remember, here I'm using
exclamation mark not question mark.

77
00:05:26.089 --> 00:05:32.639
So if I look at the type,
it's actually an integer, okay?

78
00:05:32.639 --> 00:05:35.292
It's an integer, for sure.

79
00:05:35.292 --> 00:05:42.555
But if I use now, question mark,
okay, instead of exclamation mark,

80
00:05:42.555 --> 00:05:46.682
if I see the type, look the difference.

81
00:05:48.362 --> 00:05:52.511
The type is integer optional.

82
00:05:52.511 --> 00:05:54.346
Why?

83
00:05:54.346 --> 00:05:58.148
Does anyone know why it has
a question mark, that type?

84
00:06:01.274 --> 00:06:04.384
Because it can be nil,
the name can be nil.

85
00:06:04.384 --> 00:06:06.878
If it's nil, there is no count.

86
00:06:06.878 --> 00:06:11.416
So if there is no count,
there is no integer.

87
00:06:11.416 --> 00:06:16.266
So the type that is automatically
inferred here, it's optionally integer.

88
00:06:18.658 --> 00:06:20.942
Okay, so
that's another option that you have.

89
00:06:20.942 --> 00:06:23.598
So I'm going to create
all the possible options.

90
00:06:23.598 --> 00:06:25.969
So this is called the safe operator.

91
00:06:27.970 --> 00:06:35.155
Then we have the explicit unwrap or
optional unwrap.

92
00:06:35.155 --> 00:06:42.252
There is a question mark,
like countForSure, like so.

93
00:06:42.252 --> 00:06:46.775
And also we have another operator
that is useful for default values.

94
00:06:46.775 --> 00:06:49.682
Okay, so I will say,

95
00:06:49.682 --> 00:06:55.509
countOrDefault is equal to name.count.

96
00:06:55.509 --> 00:06:59.693
It's some kinda fun or 0.

97
00:06:59.693 --> 00:07:03.206
It's double question mark, okay?

98
00:07:03.206 --> 00:07:09.609
But here he's saying, hey,
you need to do this So actually,

99
00:07:09.609 --> 00:07:15.336
this is actually verifying if
the previous expression is not nil.

100
00:07:15.336 --> 00:07:19.817
If it's not nil, it's going to
return that expression, if not,

101
00:07:19.817 --> 00:07:23.108
it's going to return to 0,
the default value.

102
00:07:25.531 --> 00:07:28.147
Okay, so
it's similar to the ternary operator.

103
00:07:28.147 --> 00:07:30.753
By the way, the ternary operator exist.

104
00:07:30.753 --> 00:07:33.471
So for example, countOrDefault2.

105
00:07:33.471 --> 00:07:38.722
I can say, if name?.count is not nil,

106
00:07:38.722 --> 00:07:43.673
then return name?.count if not 0.

107
00:07:43.673 --> 00:07:49.335
But you can see that this one is
actually much better, it's the same.

108
00:07:49.335 --> 00:07:52.134
It's actually doing the same, okay?

109
00:07:52.134 --> 00:07:55.350
By the way, this operator is also now
available in another languages including

110
00:07:55.350 --> 00:07:55.934
JavaScript.

111
00:07:58.656 --> 00:08:03.847
Okay, then the name of the operator
defers per language, but anyway.

112
00:08:03.847 --> 00:08:08.517
And the last thing that I wanna
show you about null safety,

113
00:08:08.517 --> 00:08:12.533
something that we will use
later is called if let.

114
00:08:12.533 --> 00:08:18.153
It's difficult to get the first time and
probably the next ten times as well.

115
00:08:18.153 --> 00:08:19.821
But then you will get it.

116
00:08:19.821 --> 00:08:22.750
So we can create variables,

117
00:08:22.750 --> 00:08:28.006
inside if expressions,
with length, if length.

118
00:08:28.006 --> 00:08:33.560
So, I can create the variable like this,

119
00:08:33.560 --> 00:08:39.762
if let, let's say nonOptionalName = name.

120
00:08:39.762 --> 00:08:42.426
So this is what will happen,

121
00:08:42.426 --> 00:08:47.647
if let will create a variable,
in this case a constant.

122
00:08:47.647 --> 00:08:51.964
An immutable variable
within the scope of the if.

123
00:08:51.964 --> 00:08:57.010
So the scope of this nonOptionalName
variable is just the if, okay?

124
00:08:57.010 --> 00:08:59.676
Not outside the if, so
it's not available outside.

125
00:08:59.676 --> 00:09:02.712
I don't have this nonOptionalName.

126
00:09:02.712 --> 00:09:04.579
It doesn't exist, okay?

127
00:09:04.579 --> 00:09:07.199
It only exists within the if.

128
00:09:07.199 --> 00:09:14.299
So if I put it here,
it's actually working now.

129
00:09:14.299 --> 00:09:19.134
And if I do .count, it works.

130
00:09:19.134 --> 00:09:21.270
So let's see what happens.

131
00:09:21.270 --> 00:09:26.048
The type of the name,
it's actually a String optional.

132
00:09:26.048 --> 00:09:29.655
The type of nonOptionalName,

133
00:09:29.655 --> 00:09:35.073
it's a string, it's not optional anymore.

134
00:09:35.073 --> 00:09:37.008
Okay, so what's going on?

135
00:09:37.008 --> 00:09:43.765
This if is creating about a new variable,
if the name is not nil.

136
00:09:43.765 --> 00:09:50.084
So that means that the else
means that there is no name.

137
00:09:52.388 --> 00:09:53.024
Give me a minute.

138
00:09:53.024 --> 00:09:57.471
I already said that this is weird, okay?

139
00:09:57.471 --> 00:10:03.373
So what is doing this is creating a new
variable is unwrapping the optional.

140
00:10:03.373 --> 00:10:08.638
And if it's nil, so if it was optional,
it goes to the else.

141
00:10:08.638 --> 00:10:11.745
Okay, it goes to a false condition.

142
00:10:11.745 --> 00:10:15.524
So within the if now,
we don't have optionals.

143
00:10:15.524 --> 00:10:17.956
We know that there is a value.

144
00:10:17.956 --> 00:10:21.038
And most of the time,
we don't change the name, we do this.

145
00:10:21.038 --> 00:10:25.040
That's the part where
it comes even weirder.

146
00:10:25.040 --> 00:10:30.215
So if let name = name
actually creates a new local

147
00:10:30.215 --> 00:10:37.297
variable to the if with the same name,
but now it's not optional.

148
00:10:37.297 --> 00:10:41.217
The deal here is that we
are removing the optional.

149
00:10:41.217 --> 00:10:41.780
Does it make sense?

150
00:10:41.780 --> 00:10:46.620
So now there are two variables with the
same name, but they have different scopes.

151
00:10:46.620 --> 00:10:51.322
We have one that the scope is the if and
the other one that is the scope.

152
00:10:51.322 --> 00:10:55.530
So the one that is the inner
scope is not optional.

153
00:10:55.530 --> 00:11:00.427
So then we don't need to mess
with the exclamation mark, okay,

154
00:11:00.427 --> 00:11:03.419
or question mark, or default values,

155
00:11:03.419 --> 00:11:08.510
it becomes clearer with less,
let's say, less symbols, yeah.

156
00:11:08.510 --> 00:11:15.084
&gt;&gt; So this feels like the colon
in JavaScript of if name, right?

157
00:11:15.084 --> 00:11:16.764
So does it exist?

158
00:11:16.764 --> 00:11:18.040
&gt;&gt; Yeah, with a difference.

159
00:11:18.040 --> 00:11:19.540
Yeah, it's something like that.

160
00:11:19.540 --> 00:11:24.875
Yeah, or if it's not undefined,
if you wanna be more specific,

161
00:11:24.875 --> 00:11:29.434
yeah, in JavaScript,
it will be something like this,

162
00:11:29.434 --> 00:11:33.832
yeah, sure, yeah
&gt;&gt; We can always check that

163
00:11:33.832 --> 00:11:36.824
name is an object or not.

164
00:11:36.824 --> 00:11:41.402
&gt;&gt; We don't know if it's in a string,
so actually it's not an object.

165
00:11:41.402 --> 00:11:47.895
So you can always do this name not nil,
but if you do this inside,

166
00:11:47.895 --> 00:11:52.964
you still need to mess
with the exclamation mark.

167
00:11:52.964 --> 00:11:59.696
So actually, these two codes are the same.

168
00:11:59.696 --> 00:12:04.157
So these two blocks,
these two ifs are doing the same thing.

169
00:12:04.157 --> 00:12:11.156
But the idea of using this if let is
to make the code less symbolic so

170
00:12:11.156 --> 00:12:18.564
we don't have any exclamation mark or
question mark with the if let.

171
00:12:18.564 --> 00:12:19.547
It's just that.

172
00:12:19.547 --> 00:12:21.750
You're not forced to use that, okay?

173
00:12:21.750 --> 00:12:27.974
It's just something that we have
as a tool to work with options.

174
00:12:27.974 --> 00:12:29.881
You need to get used to that, okay?

175
00:12:29.881 --> 00:12:33.157
So it takes some time to
get used to that if let,

176
00:12:33.157 --> 00:12:37.276
mostly when you're using
the same variable name, okay,

177
00:12:37.276 --> 00:12:42.509
which is kind of why are we doing this
when we are unwrapping the optional?

178
00:12:42.509 --> 00:12:48.509
And if there is no value, it goes
to the else, that's the idea, yeah.

179
00:12:48.509 --> 00:12:52.487
&gt;&gt; Jumping ahead of you, but
would you use guards as well?

180
00:12:52.487 --> 00:12:56.718
&gt;&gt; We have something known as guards, it's
available, I will show you that later.

181
00:12:56.718 --> 00:13:00.596
We're not going to use today any guard,
but just because you mentioned that,

182
00:13:00.596 --> 00:13:01.669
let me show you that.

183
00:13:01.669 --> 00:13:05.550
There is also another
expression known as guard.

184
00:13:05.550 --> 00:13:09.774
Guard is more suitable for
error management.

185
00:13:09.774 --> 00:13:13.288
So we'll check that the condition is met.

186
00:13:13.288 --> 00:13:18.202
For example, I know that,
let's make the guard here,

187
00:13:18.202 --> 00:13:21.245
that it's not nil or here anyway.

188
00:13:21.245 --> 00:13:24.776
When we know it's not nil because I
wanna get rid of the nil problem.

189
00:13:24.776 --> 00:13:33.185
So I can say that I need
the name to be greater than 3.

190
00:13:33.185 --> 00:13:39.062
What we are, it's like an if, okay,
but there are a lot of differences.

191
00:13:39.062 --> 00:13:42.720
First, we don't have a code block,

192
00:13:42.720 --> 00:13:46.851
there is no cold block for the true value.

193
00:13:46.851 --> 00:13:49.847
Actually, what we are saying
is we actually nil this.

194
00:13:49.847 --> 00:13:52.561
We nil the count of characters or

195
00:13:52.561 --> 00:13:57.598
the amount of characters of
this name to be greater than 3.

196
00:13:57.598 --> 00:13:59.077
We nil this.

197
00:13:59.077 --> 00:14:03.420
If that's not the case, we have the else.

198
00:14:03.420 --> 00:14:07.571
And on the else,
we must throw an exception or

199
00:14:07.571 --> 00:14:12.941
return because there is no way
to continue the execution.

200
00:14:12.941 --> 00:14:20.758
We can also do this, let count =
name.count or something like that.

201
00:14:20.758 --> 00:14:25.472
And this is more advanced and
advanced with topic to be honest, so

202
00:14:25.472 --> 00:14:28.314
it's part of answering the question.

203
00:14:28.314 --> 00:14:32.731
The only difference with the if
is that when you do if let,

204
00:14:32.731 --> 00:14:36.703
the variable,
the scope of the variable is the if.

205
00:14:36.703 --> 00:14:42.041
When you use guard, the variable,
the scope of the variable

206
00:14:42.041 --> 00:14:46.553
is actually in this case,
the outer scope, okay?

207
00:14:46.553 --> 00:14:51.347
So that's how guard works in Swift, okay?

208
00:14:51.347 --> 00:14:55.447
Anyway, we're going to see
later that with Swift UI and

209
00:14:55.447 --> 00:15:00.435
that's our guard today,
we don't have a lot of use cases for this.

210
00:15:00.435 --> 00:15:03.274
So we're not going to use guard later.

211
00:15:03.274 --> 00:15:09.656
But the guard must throw an exception or
they must return in the else.

212
00:15:09.656 --> 00:15:14.458
So it's more for
preconditions that must be defined.

213
00:15:14.458 --> 00:15:17.985
So these preconditions must
be true because if not,

214
00:15:17.985 --> 00:15:21.281
I'm not going to continue
executing this code.

215
00:15:21.281 --> 00:15:24.234
&gt;&gt; Okay, it's around error management.

216
00:15:24.234 --> 00:15:24.922
&gt;&gt; Thank you.

217
00:15:24.922 --> 00:15:27.315
&gt;&gt; Okay, you are welcome.

218
00:15:27.315 --> 00:15:30.017
Any other question, yeah?

219
00:15:30.017 --> 00:15:34.891
&gt;&gt; So when you're in the if let scope,
if you do a return, not necessarily in

220
00:15:34.891 --> 00:15:39.372
the guard, but if you do a return,
it's returning out of the let and

221
00:15:39.372 --> 00:15:44.155
also out of whatever it's-
&gt;&gt; Return always return in the function.

222
00:15:44.155 --> 00:15:45.894
So it works only if you have a function.

223
00:15:45.894 --> 00:15:48.185
So here if I use returns though, so

224
00:15:48.185 --> 00:15:52.771
maybe you're looking for
break more than return that is available.

225
00:15:52.771 --> 00:15:57.538
Okay, so if you wanna break
the current loop in a while,

226
00:15:57.538 --> 00:16:02.115
there are a couple of
situations where we have break.

227
00:16:02.115 --> 00:16:05.768
You have four through also,
there are some things.

228
00:16:05.768 --> 00:16:10.817
But typically, we are not going
to use it mostly in Swift UI,

229
00:16:10.817 --> 00:16:17.757
mostly in Swift UI because Swift UI, we're
going to see is more functional based.

230
00:16:17.757 --> 00:16:24.657
So it's using more functional priming
ideas where we don't use this, okay?

231
00:16:24.657 --> 00:16:28.388
But if you're doing more classic
UI kit development, yeah,

232
00:16:28.388 --> 00:16:30.910
maybe you have more of these situations.

