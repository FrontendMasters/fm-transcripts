WEBVTT

1
00:00:01.240 --> 00:00:05.420
Let's see,
if I run this on the real thing, okay,

2
00:00:05.420 --> 00:00:08.350
we have products, we have offers.

3
00:00:08.350 --> 00:00:10.822
We have the order that says it's empty,
okay?

4
00:00:10.822 --> 00:00:17.590
So this is kind of working so
far at this point, okay?

5
00:00:17.590 --> 00:00:26.690
Details is the one that is also showing
any dummy product and not the real ones.

6
00:00:26.690 --> 00:00:30.787
So the next step,
just to finish wiring this,

7
00:00:30.787 --> 00:00:35.633
all the missing points is
to download the JSON, okay?

8
00:00:35.633 --> 00:00:37.931
It will be interesting to do that.

9
00:00:37.931 --> 00:00:42.098
And for that,
the iOS provides a class, an API,

10
00:00:42.098 --> 00:00:46.910
to actually access a native
way to download files.

11
00:00:46.910 --> 00:00:51.980
But instead of using that native API,
we're going to use a framework.

12
00:00:53.310 --> 00:00:57.398
This is like the framework that every
Swift developer is using to use in

13
00:00:57.398 --> 00:00:58.980
the network.

14
00:00:58.980 --> 00:01:01.502
It's called Alamofire.

15
00:01:01.502 --> 00:01:05.188
And also it's a good opportunity
to use one dependency, so

16
00:01:05.188 --> 00:01:07.890
we can actually see how that works.

17
00:01:07.890 --> 00:01:12.485
So if you go to the companion
website using APIs and JSON,

18
00:01:12.485 --> 00:01:15.852
in the first example, you have the step.

19
00:01:15.852 --> 00:01:18.642
It's not a big deal, but
you have the link to Alamofire,

20
00:01:18.642 --> 00:01:22.206
the website in case you wanna get more
information about how that works.

21
00:01:22.206 --> 00:01:24.219
And also there is a URL.

22
00:01:24.219 --> 00:01:28.455
In fact, it's a Git file in GitHub.

23
00:01:28.455 --> 00:01:32.657
So github.com/Alamofire/alamofire.git.

24
00:01:32.657 --> 00:01:34.679
I will copy that to my clipboard.

25
00:01:35.740 --> 00:01:40.000
And to add a dependency,
an external dependency,

26
00:01:40.000 --> 00:01:42.873
I will go to the Project Explorer,

27
00:01:42.873 --> 00:01:48.034
right-click in my project, and
I will select Add Packages.

28
00:01:50.816 --> 00:01:56.177
Okay, so you right-click in the project,
Add Packages.

29
00:01:56.177 --> 00:02:02.201
And here, I can paste the URL.

30
00:02:02.201 --> 00:02:07.130
So every open source project for
Swift, every dependency,

31
00:02:07.130 --> 00:02:11.106
you will have the link to actually use it,
okay?

32
00:02:11.106 --> 00:02:17.260
So I'm pasting the GitHub URL of Alamofire
here, and I will pick Add Package.

33
00:02:18.400 --> 00:02:23.332
This is like NPM install, if you want,
okay, compared with JavaScript.

34
00:02:23.332 --> 00:02:29.320
So if I click Add Package, it's going to
fetch the last version of the library.

35
00:02:30.410 --> 00:02:35.530
Finally, we hit Add Package,
and we are done.

36
00:02:35.530 --> 00:02:37.017
Now we can use it, and

37
00:02:37.017 --> 00:02:42.080
the dependency appears here at
the bottom of the project, okay?

38
00:02:42.080 --> 00:02:43.700
You see, we have Alamofire.

39
00:02:43.700 --> 00:02:47.681
&gt;&gt; Is there any versioning on that?

40
00:02:47.681 --> 00:02:51.077
&gt;&gt; You know how in package.json,
it adds something that says,

41
00:02:51.077 --> 00:02:54.070
this is my dependency and my version.

42
00:02:54.070 --> 00:02:55.420
&gt;&gt; We have something similar here.

43
00:02:55.420 --> 00:02:58.909
So if you go to the dependencies
section or the package,

44
00:02:58.909 --> 00:03:00.850
when you add the package also.

45
00:03:00.850 --> 00:03:04.465
When you are answering the version number,
here,

46
00:03:04.465 --> 00:03:08.650
you can actually select
the version number.

47
00:03:08.650 --> 00:03:12.527
An exact version, by default,
is downloading the latest one.

48
00:03:12.527 --> 00:03:14.662
But yeah, you do have also.

49
00:03:14.662 --> 00:03:18.880
If you right-click on your project and
you click Show in Finder,

50
00:03:18.880 --> 00:03:21.115
you will see the real file system.

51
00:03:21.115 --> 00:03:23.762
And in the real file system, okay,

52
00:03:23.762 --> 00:03:29.500
you will find some configuration
files similar to package.json.

53
00:03:29.500 --> 00:03:36.170
I'm not saying that you wanna deal
with that or you wanna play with that.

54
00:03:36.170 --> 00:03:41.300
But also, if you click in the project and
you are in General,

55
00:03:41.300 --> 00:03:46.027
if you scroll down,
there is a section for frameworks,

56
00:03:46.027 --> 00:03:49.370
libraries, and embedded content.

57
00:03:49.370 --> 00:03:51.430
And here, we have Alamofire.

58
00:03:51.430 --> 00:03:56.712
So if I remove that,
you can still do that, okay?

59
00:03:56.712 --> 00:03:59.610
Alamofire, it's actually pretty simple.

60
00:03:59.610 --> 00:04:01.880
It works like the Fetch API in JavaScript.

61
00:04:01.880 --> 00:04:05.380
You just call a function,
and then you get the data.

62
00:04:05.380 --> 00:04:07.743
As simple as that in a callback.

63
00:04:07.743 --> 00:04:11.431
So it's actually pretty,
pretty simple to use, okay?

64
00:04:11.431 --> 00:04:16.364
So in our MenuManager,
actually we can add the code

65
00:04:16.364 --> 00:04:20.623
here to actually download the data, okay?

66
00:04:25.110 --> 00:04:28.282
Here if you go to the next section,
the code,

67
00:04:28.282 --> 00:04:32.300
you can see it's actually
simple to understand, okay?

68
00:04:33.990 --> 00:04:42.010
So I create a function,
That is calling AF, Alamofire.

69
00:04:43.220 --> 00:04:47.000
But in this case,
Alamofire is an external framework.

70
00:04:47.000 --> 00:04:55.224
So it's the first time we actually need to
import something, import Alamofire, okay?

71
00:04:55.224 --> 00:04:59.364
And Alamofire has a request function,

72
00:04:59.364 --> 00:05:03.140
similar to fetch or jQuery, Ajax.

73
00:05:03.140 --> 00:05:09.862
If you want, you pass the URL, and
then you need to specify here.

74
00:05:09.862 --> 00:05:12.432
The weird part here is this one.

75
00:05:12.432 --> 00:05:18.259
You need to specify what are you expecting
in terms of data type from the JSON.

76
00:05:18.259 --> 00:05:21.935
This is going to parse
the JSON automatically and

77
00:05:21.935 --> 00:05:25.420
it will map the JSON to my data model,
okay?

78
00:05:25.420 --> 00:05:28.150
Automatically, it will match that.

79
00:05:28.150 --> 00:05:33.135
So how do you pass a type as an argument?

80
00:05:33.135 --> 00:05:39.155
The type .self, so
array of category .self,

81
00:05:39.155 --> 00:05:43.821
it's saying, I'm expecting you to

82
00:05:43.821 --> 00:05:48.046
return the array of categories.

83
00:05:48.046 --> 00:05:51.174
&gt;&gt; It has to be matching exactly
everything, I mean, can you-

84
00:05:51.174 --> 00:05:56.080
&gt;&gt; No, you don't need a one-to-one match.

85
00:05:56.080 --> 00:05:58.077
&gt;&gt; Subset has to be-
&gt;&gt; It can be a subset.

86
00:05:58.077 --> 00:06:03.563
Also, for a more advanced situation,
you can map.

87
00:06:03.563 --> 00:06:06.937
Yeah, you can specify, okay,
on the JSON, this is the key name.

88
00:06:06.937 --> 00:06:09.760
On my structure,
this is the variable name.

89
00:06:09.760 --> 00:06:12.975
So yeah,
you can actually customize that, sure.

90
00:06:12.975 --> 00:06:16.350
So in this case, look at the code.

91
00:06:16.350 --> 00:06:21.167
So I have a function
refreshItemsFromNetwork that

92
00:06:21.167 --> 00:06:22.850
makes a request.

93
00:06:24.250 --> 00:06:27.850
And then it says array of categories.

94
00:06:27.850 --> 00:06:32.558
And then if it's there, because maybe
there is an error or, I don't know,

95
00:06:32.558 --> 00:06:35.660
something happens,
I'm saving that as my menu.

96
00:06:37.110 --> 00:06:41.720
And because it's published,
if everything works,

97
00:06:41.720 --> 00:06:48.210
it should automatically appear
with wherever binding you have.

98
00:06:48.210 --> 00:06:52.992
The only error that we have is that it's
complaining about something that says,

99
00:06:52.992 --> 00:06:55.541
category is not conforming to decodable.

100
00:06:57.978 --> 00:06:58.670
And what's that?

101
00:06:59.690 --> 00:07:05.316
If you want your data model to
automatically be able to be converted

102
00:07:05.316 --> 00:07:10.137
from and to JSON and
other formats, but let's say JSON,

103
00:07:10.137 --> 00:07:14.870
it must conform to a protocol
that is called decodable.

104
00:07:16.300 --> 00:07:19.230
With decodable, it can be decoded.

105
00:07:19.230 --> 00:07:22.492
You also have encodable, to encode.

106
00:07:22.492 --> 00:07:26.988
And if you want both at the same time,
you do have codable.

107
00:07:26.988 --> 00:07:34.790
That is a type alias, actually,
that applies both decodable and encodable.

108
00:07:34.790 --> 00:07:37.225
So it's an alias to the type, okay?

109
00:07:37.225 --> 00:07:39.663
But for now, we just need decodable.

110
00:07:39.663 --> 00:07:44.210
With that, for what we are doing here,
decodable is fine.

111
00:07:44.210 --> 00:07:47.984
And because category has
an array of product,

112
00:07:47.984 --> 00:07:51.580
product needs also to be decodable, okay?

113
00:07:51.580 --> 00:07:54.950
So we just need to add the protocol name,
that's all.

114
00:07:54.950 --> 00:08:00.028
We don't need to write any
code by default, okay?

115
00:08:00.028 --> 00:08:06.020
With that,
it means that it will just work.

116
00:08:06.020 --> 00:08:08.920
Let's see if it compiles, it compiles.

117
00:08:08.920 --> 00:08:10.882
By the way, how I'm compiling so quickly?

118
00:08:10.882 --> 00:08:14.248
Cmd+B, it's building the project.

119
00:08:14.248 --> 00:08:16.855
So I know if it's compiling or not.

120
00:08:16.855 --> 00:08:21.691
And something that I can do is when
I'm initializing the MenuManager,

121
00:08:21.691 --> 00:08:23.390
I can just call refresh.

122
00:08:23.390 --> 00:08:27.610
So when the app starts, we go to
the network and download the data.

123
00:08:28.820 --> 00:08:31.770
Again, this is going to the network,

124
00:08:31.770 --> 00:08:36.753
downloading the JSON file, and
automatically mapping the JSON

125
00:08:36.753 --> 00:08:41.102
that is coming from the network
to my data model, okay?

126
00:08:41.102 --> 00:08:42.120
Does it make sense?

127
00:08:43.910 --> 00:08:48.276
You see if it's working right now
before actually seeing it in action,

128
00:08:48.276 --> 00:08:51.784
we can print response.value and
see what we see, okay?

129
00:08:51.784 --> 00:08:55.553
So if I run this in the emulator, here,

130
00:08:55.553 --> 00:09:00.370
if you look at the console,
we have a JSON output.

131
00:09:01.370 --> 00:09:03.871
And if it's not easy to read here,

132
00:09:03.871 --> 00:09:08.110
we can always go to the output navigator,
it's this one.

133
00:09:08.110 --> 00:09:12.386
And this is the one that
we are looking for.

134
00:09:12.386 --> 00:09:18.395
And if we drive, you have here the JSON.

135
00:09:18.395 --> 00:09:22.572
So it's actually downloading the JSON
from, you see here, nonfat milk,

136
00:09:22.572 --> 00:09:24.113
blended with blah, blah.

137
00:09:24.113 --> 00:09:25.703
This is kinda the data, okay?

138
00:09:25.703 --> 00:09:27.353
This is actually the data.

139
00:09:27.353 --> 00:09:29.958
&gt;&gt; How did you get it to run?

140
00:09:29.958 --> 00:09:31.384
&gt;&gt; Here?

141
00:09:31.384 --> 00:09:35.970
&gt;&gt; refreshItemsFromNetwork,
you've got it to run somehow.

142
00:09:35.970 --> 00:09:37.727
&gt;&gt; Because it's an init.

143
00:09:37.727 --> 00:09:39.370
And you say, who is calling init?

144
00:09:39.370 --> 00:09:43.680
Well, init is a constructor, so
it's actually being called automatically.

145
00:09:43.680 --> 00:09:45.420
And who is creating the MenuManager?

146
00:09:46.580 --> 00:09:48.640
We did that at the app level.

147
00:09:48.640 --> 00:09:50.525
Not sure if you remember that.

148
00:09:50.525 --> 00:09:53.308
Here, we are creating the MenuManager.

149
00:09:53.308 --> 00:09:57.250
When we are creating the instance,
the initializer is being executed.

