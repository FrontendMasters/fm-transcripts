WEBVTT

1
00:00:00.060 --> 00:00:02.700
&gt;&gt; Mike North: What we're gonna
do next is deal with the idea

2
00:00:02.700 --> 00:00:05.240
of handling user interactions.

3
00:00:05.240 --> 00:00:09.680
So if you've used Ember before,
this is something called actions, and

4
00:00:09.680 --> 00:00:12.960
in Ember Octane,
they've been radically simplified.

5
00:00:12.960 --> 00:00:14.830
They're much easier to work with.

6
00:00:14.830 --> 00:00:19.020
We're gonna primarily be
working in the login form.

7
00:00:19.020 --> 00:00:24.460
And so what we wanna do is when
the user clicks the Sign In button,

8
00:00:24.460 --> 00:00:28.020
we wanna log the currently selected user,
right?

9
00:00:28.020 --> 00:00:35.180
Log back to the console, and then proceed
to the logged in page, right, slash teams.

10
00:00:35.180 --> 00:00:40.929
In order to do this, I'm going to
take our login HPS which currently,

11
00:00:40.929 --> 00:00:44.150
there's just a bunch of HTML in there.

12
00:00:44.150 --> 00:00:45.693
There are no components yet.

13
00:00:45.693 --> 00:00:47.576
And we're gonna take this, and

14
00:00:47.576 --> 00:00:52.620
sort of move it all into a dedicated
component where we can handle an action.

15
00:00:52.620 --> 00:00:55.097
Increasingly, the best practice is,

16
00:00:55.097 --> 00:00:59.609
you wanna handle all of your actions
in components whenever possible.

17
00:00:59.609 --> 00:01:04.649
It is like,
it's possible to handle them in other

18
00:01:04.649 --> 00:01:09.810
types of objects,
like routes or, controllers.

19
00:01:09.810 --> 00:01:14.593
But increasingly, this things are heavily
de-emphasized, and we just wanna keep as

20
00:01:14.593 --> 00:01:18.300
much of our complexity as
possible in the component layer.

21
00:01:18.300 --> 00:01:23.280
This is setting you up for
better performance and more manageability,

22
00:01:23.280 --> 00:01:26.450
more opportunities for lazy loading, etc.

23
00:01:26.450 --> 00:01:28.671
So let's begin by
generating this component.

24
00:01:31.534 --> 00:01:35.763
&gt;&gt; Mike North: Login form,
Ember generate component login form.

25
00:01:39.544 --> 00:01:45.044
&gt;&gt; Mike North: And just like earlier in
the day, we're gonna grab all these handle

26
00:01:45.044 --> 00:01:52.110
bars, find the template that corresponds
to this new component we've just created.

27
00:01:52.110 --> 00:01:55.440
Login form HBS and

28
00:01:55.440 --> 00:02:01.059
replace the contents of login form with
everything that used to be in login HBS.

29
00:02:02.390 --> 00:02:04.630
Then we'll go back to log in HBS and

30
00:02:04.630 --> 00:02:09.080
refer to our component,
&gt;&gt; Mike North: And

31
00:02:09.080 --> 00:02:11.193
we see exactly the same
thing on the screen,

32
00:02:11.193 --> 00:02:15.910
the only difference is we've just moved
all of that stuff into the component.

33
00:02:15.910 --> 00:02:20.340
Now this is the first time we've
used EmberG to generate a component.

34
00:02:20.340 --> 00:02:23.730
Earlier, we we're just
manually creating HBS files.

35
00:02:23.730 --> 00:02:29.270
What we get as a result of doing
that is a couple other files.

36
00:02:29.270 --> 00:02:34.530
And I can't find the output here,
there it is.

37
00:02:34.530 --> 00:02:39.230
So we can see number one,
we get the component itself.

38
00:02:39.230 --> 00:02:41.580
Sorry, that's a JavaScript module for
the component,

39
00:02:41.580 --> 00:02:43.635
this is the first time we've seen this.

40
00:02:43.635 --> 00:02:49.900
We get the handlebars file that we
just pasted a bunch of HTML into.

41
00:02:49.900 --> 00:02:52.760
And we got an integration test which works

42
00:02:52.760 --> 00:02:57.890
exactly the same way as our format
timestamp integration test.

43
00:02:57.890 --> 00:03:00.168
Set up a scenario with
a little handle bar snippet,

44
00:03:00.168 --> 00:03:03.680
assert on the HTML after
it's done laundering.

45
00:03:05.890 --> 00:03:12.720
So, what we wanna do is listen for when

46
00:03:13.930 --> 00:03:18.700
someone has logged in, people have ideas
for what we should listen to and where.

47
00:03:20.700 --> 00:03:23.751
Let me bring up the HTML
to make that kinda clear.

48
00:03:26.460 --> 00:03:30.492
&gt;&gt; Mike North: So, we've got a div up
here, another div looks like just for

49
00:03:30.492 --> 00:03:31.450
formatting.

50
00:03:31.450 --> 00:03:35.806
Here we have a form,
we've got a select and

51
00:03:35.806 --> 00:03:40.042
then an input with a submit at the bottom.

52
00:03:40.042 --> 00:03:43.590
Do we have more than one option or
just one option?

53
00:03:43.590 --> 00:03:46.195
What kind of DOM event
should we listen to?

54
00:03:46.195 --> 00:03:47.983
&gt;&gt; Speaker 2: Form on submit.

55
00:03:47.983 --> 00:03:49.310
&gt;&gt; Mike North: Form on submit.

56
00:03:49.310 --> 00:03:53.075
I like it.

57
00:03:53.075 --> 00:03:57.330
I like it because that handle's
clicking on the submit button.

58
00:03:57.330 --> 00:04:00.850
That might handle like,
if I am in an input.

59
00:04:00.850 --> 00:04:04.500
And I hit like command,
enter or something.

60
00:04:04.500 --> 00:04:07.940
It seems like it handles all of
the cases that might sort of

61
00:04:07.940 --> 00:04:10.650
merge into submitting a form.

62
00:04:10.650 --> 00:04:11.710
I like it.

63
00:04:11.710 --> 00:04:16.440
So, let's do that, and
I'm going to close login HBS.

64
00:04:19.270 --> 00:04:24.406
And get this components JavaScript module
that's an app components login-form.js.

65
00:04:24.406 --> 00:04:27.750
And I wanna just have these two
on the screen at the same time so

66
00:04:27.750 --> 00:04:30.370
that we can kinda work
with both of them here.

67
00:04:31.400 --> 00:04:36.268
So, what I wanna do is have a function
that is called when the forms

68
00:04:36.268 --> 00:04:38.047
submit event is fired.

69
00:04:41.382 --> 00:04:47.970
&gt;&gt; Mike North: OnLoginFormSubmit, and
this is gonna receive a DOM event.

70
00:04:47.970 --> 00:04:52.770
And we're not using TypeScript here but
we can get some nice

71
00:04:52.770 --> 00:04:57.190
autocomplete off awesomeness by
just commenting our code properly.

72
00:04:57.190 --> 00:05:03.460
So I can say that evt,
it is a event who's target, this

73
00:05:05.110 --> 00:05:10.350
is totally optional,
is a HTML FormElement.

74
00:05:12.020 --> 00:05:16.234
It's just to make it so
the autocomplete works very, very nicely.

75
00:05:18.671 --> 00:05:22.030
&gt;&gt; Mike North: And in here,
I’m just gonna put a debugger.

76
00:05:23.830 --> 00:05:26.140
So we can see what happens, right?

77
00:05:26.140 --> 00:05:27.521
So there, we’ve got our function.

78
00:05:27.521 --> 00:05:31.843
Now the way we hook this function up
to this particular DOM event is using

79
00:05:31.843 --> 00:05:34.500
something called a modifier.

80
00:05:34.500 --> 00:05:36.870
So we dealt with helpers before.

81
00:05:36.870 --> 00:05:41.780
You can recognize a modifier because
it’s always used in what we call

82
00:05:41.780 --> 00:05:44.290
HTML element space.

83
00:05:44.290 --> 00:05:49.510
And that means it’s kind of just
floating in a DOM tag like this, right?

84
00:05:49.510 --> 00:05:53.430
We’re not doing, on click equals this.

85
00:05:53.430 --> 00:05:59.400
It’s just sort of there,
side-by-side with the form tag name.

86
00:05:59.400 --> 00:06:02.470
You can put it anywhere in there and
some attributes before, and

87
00:06:02.470 --> 00:06:03.420
some attributes after.

88
00:06:03.420 --> 00:06:09.330
But that's how you can recognize that
this is a modifier and not a helper.

89
00:06:10.720 --> 00:06:15.160
They only are used in this particular
space and the other placement is invalid.

90
00:06:15.160 --> 00:06:17.320
And this modifier is called on.

91
00:06:21.245 --> 00:06:28.374
&gt;&gt; Mike North: So on we pass an event
to listen to, submit as Seth said,

92
00:06:28.374 --> 00:06:34.310
and then we're going to
pass it the function.

93
00:06:35.680 --> 00:06:40.300
Passing the function by value,
onLoginFormSubmit.

94
00:06:42.020 --> 00:06:44.656
Now whenever I use this dot.

95
00:06:44.656 --> 00:06:48.660
This dot onLoginFormSubmit,

96
00:06:48.660 --> 00:06:52.230
that is a sure indicator,
just from looking at the template.

97
00:06:52.230 --> 00:06:56.140
I can tell you that is referring
to something that is defined

98
00:06:56.140 --> 00:06:58.220
in the JavaScript module
of this component.

99
00:06:58.220 --> 00:07:02.970
It makes it really easy to
disambiguate between things like this

100
00:07:04.250 --> 00:07:07.700
that we were looking at earlier
when we used title and description,

101
00:07:07.700 --> 00:07:09.800
and the header of the channel, right?

102
00:07:09.800 --> 00:07:13.300
This, we know that the @ sign,
that's an indication

103
00:07:13.300 --> 00:07:16.700
it's coming from the outside and
being passed into the component.

104
00:07:16.700 --> 00:07:20.200
This is most certainly not being
passed into the component.

105
00:07:20.200 --> 00:07:26.000
It is definitely defined on
the component's JavaScript module itself.

106
00:07:26.000 --> 00:07:29.930
So this is one of the things
that has improved in templates.

107
00:07:29.930 --> 00:07:33.654
We can look at these things and
understand where the data is coming from.

108
00:07:36.037 --> 00:07:39.405
&gt;&gt; Speaker 3: Is there no more
implied this component templates?

109
00:07:39.405 --> 00:07:46.950
&gt;&gt; Mike North: So,
it will lead you into a troublesome place.

110
00:07:46.950 --> 00:07:50.400
And here's some examples of
where that will snag you.

111
00:07:50.400 --> 00:07:54.765
If you have a template only component,
there is no this, and so.

112
00:07:57.455 --> 00:08:01.076
&gt;&gt; Mike North: You can end up with some
kind of cryptic errors simply because

113
00:08:01.076 --> 00:08:04.351
you're trying to access
a property off of undefined.

114
00:08:04.351 --> 00:08:07.657
It doesn't really give you a good
place to track down where the things

115
00:08:07.657 --> 00:08:08.870
are coming from.

116
00:08:08.870 --> 00:08:13.180
So, what I recommend is using
that Ember template linter.

117
00:08:13.180 --> 00:08:19.530
So that implied this is
bend in glimmer components.

118
00:08:19.530 --> 00:08:21.678
Template only glimmer components and

119
00:08:21.678 --> 00:08:25.512
regular glimmer components with
a JavaScript module behind them.

120
00:08:25.512 --> 00:08:30.924
It is not removed or
deprecated because the older Ember

121
00:08:30.924 --> 00:08:37.049
component model which we're not
talking about at all today.

122
00:08:37.049 --> 00:08:39.946
That we still need to maintain, right?

123
00:08:39.946 --> 00:08:42.360
These are not breaking changes at all.

124
00:08:42.360 --> 00:08:47.860
But, in order to set yourself up for
an easy path forward,

125
00:08:47.860 --> 00:08:52.120
do not assume an implied this,
the best way to handle things.

126
00:08:53.250 --> 00:08:55.310
This comes in from the outside.

127
00:08:55.310 --> 00:08:58.720
This is provided by the component itself.

128
00:08:58.720 --> 00:09:01.990
And there are cases where you
will see neither of these two.

129
00:09:01.990 --> 00:09:06.740
And that usually means that there's
some kind of callback involved,

130
00:09:06.740 --> 00:09:11.010
where you're sort of
inside an inner scope.

131
00:09:11.010 --> 00:09:13.970
It's almost like a function
being passed a local argument.

132
00:09:13.970 --> 00:09:19.610
And only within a particular chunk of your
handlebars will you be able to do this.

133
00:09:19.610 --> 00:09:24.230
And those who have Ember experience
already, each is what I'm referring to.

134
00:09:24.230 --> 00:09:30.470
The looping construct in Ember templates,
which we will get to properly later on.

