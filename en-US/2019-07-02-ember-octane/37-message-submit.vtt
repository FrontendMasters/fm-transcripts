WEBVTT

1
00:00:00.060 --> 00:00:03.850
&gt;&gt; Mike North: So the disabled
state works well in our footer.

2
00:00:03.850 --> 00:00:05.790
Let's handle the click action.

3
00:00:05.790 --> 00:00:09.862
Unclick, send message.

4
00:00:12.502 --> 00:00:15.015
&gt;&gt; Mike North: And
we'll create our action.

5
00:00:21.543 --> 00:00:23.117
&gt;&gt; Mike North: Send message.

6
00:00:23.117 --> 00:00:26.444
And all we need to do here, so
this will receive an event, but

7
00:00:26.444 --> 00:00:28.223
we don't really care about it.

8
00:00:28.223 --> 00:00:31.990
We already have the body,
that's what we need.

9
00:00:31.990 --> 00:00:36.690
So, what we would want to do here
is connect with our earlier work.

10
00:00:36.690 --> 00:00:41.600
The stuff that we did in the real
container component, the chat container.

11
00:00:41.600 --> 00:00:45.370
And we can be passed an action as an arc.

12
00:00:45.370 --> 00:00:51.160
So we could do this,
arcs send chat message.

13
00:00:51.160 --> 00:00:54.340
I'm deliberately naming things
in a way that doesn't collide.

14
00:00:56.080 --> 00:01:00.986
So we've got send message
which is a local action and

15
00:01:00.986 --> 00:01:08.027
then we expect to be given a send chat
message, and we'll pass it the body.

16
00:01:08.027 --> 00:01:11.370
Let me make sure that I don't have
any errors here cuz I see blank.

17
00:01:12.380 --> 00:01:15.860
Let's see, on modifier
undefined is not a valid thing.

18
00:01:16.940 --> 00:01:19.060
Let's check the js file.

19
00:01:19.060 --> 00:01:21.289
I don't have a handleSubmit,
thank you very much.

20
00:01:27.343 --> 00:01:29.720
&gt;&gt; Mike North: Yep,
now that'll work, In fact,

21
00:01:29.720 --> 00:01:35.129
I don't want the sendMessage anymore,
handleSubmit is the better way to do it.

22
00:01:36.280 --> 00:01:38.070
Right we don't have to
worry about this button.

23
00:01:40.240 --> 00:01:44.560
We can just wire it up
to the exact same thing.

24
00:01:44.560 --> 00:01:45.250
Good catch.

25
00:01:45.250 --> 00:01:47.480
So regardless of whether
this button is clicked or

26
00:01:47.480 --> 00:01:52.240
whether this form is submitted they both
end up going to the exact same action.

27
00:01:52.240 --> 00:01:55.560
We could have also changed
this to a submit input.

28
00:01:55.560 --> 00:01:59.320
What kind of HTML do its thing
the way it works with forms.

29
00:01:59.320 --> 00:02:03.017
But obviously you can have an action
that's invoked two different ways.

30
00:02:07.954 --> 00:02:10.970
&gt;&gt; Mike North: And should be getting
to a pretty good state here.

31
00:02:10.970 --> 00:02:14.060
Let's see.
Let's reload, clear this out.

32
00:02:14.060 --> 00:02:18.430
We're seeing our chat messages again,
we have no errors, we are almost there.

33
00:02:18.430 --> 00:02:23.621
So the last thing we need
to do is take care of this

34
00:02:23.621 --> 00:02:29.770
args.submitMessage().

35
00:02:29.770 --> 00:02:33.060
We want to be giving a submit message,
this.body, and

36
00:02:33.060 --> 00:02:34.480
we want to pass it that string.

37
00:02:35.920 --> 00:02:40.690
So we got to just wire up the stuff
we did a couple minutes ago and

38
00:02:40.690 --> 00:02:42.300
the stuff we just did.

39
00:02:42.300 --> 00:02:47.470
We got to go to channel HBS, first

40
00:02:47.470 --> 00:02:51.360
we’re gonna go to our container component.

41
00:02:51.360 --> 00:02:54.400
We’ll start there and
thread it all the way through.

42
00:02:54.400 --> 00:02:57.020
So we've got createMessage.

43
00:02:57.020 --> 00:02:58.690
Great, it's an action.

44
00:02:58.690 --> 00:02:59.869
Let's go to the template.

45
00:03:06.820 --> 00:03:08.690
&gt;&gt; Mike North: There's my container.

46
00:03:08.690 --> 00:03:11.970
All right, so
we wanna yield this action out.

47
00:03:11.970 --> 00:03:16.200
We wanna make it available to
everything the container contains.

48
00:03:16.200 --> 00:03:19.090
And we can do that by
yielding another value out.

49
00:03:19.090 --> 00:03:23.920
Now I don't want to get to the point where
I'm yielding at way too many things.

50
00:03:23.920 --> 00:03:27.870
It would be nice if I could
build an object that I yield at.

51
00:03:27.870 --> 00:03:29.340
Turns out I can.

52
00:03:29.340 --> 00:03:33.000
Ember has a built in helper called hash.

53
00:03:33.000 --> 00:03:36.120
And this let's you
assemble key value pairs.

54
00:03:36.120 --> 00:03:41.350
So we could just say that's
the action I wanna invoke and

55
00:03:41.350 --> 00:03:45.060
we can say create message.

56
00:03:45.060 --> 00:03:47.280
It means invoke that function.

57
00:03:48.290 --> 00:03:53.800
On the other side of this, I can, sort of,
same place that we're consuming messages

58
00:03:53.800 --> 00:03:57.800
which is in channel.hbs.

59
00:03:57.800 --> 00:04:01.770
I could just say this is the channel API.

60
00:04:01.770 --> 00:04:06.993
It's almost like a mini STK for
operating this channel.

61
00:04:06.993 --> 00:04:12.556
And I could pass to the channel footer,

62
00:04:12.556 --> 00:04:19.309
send message, channelApi.CreateMessage.

63
00:04:21.893 --> 00:04:25.156
&gt;&gt; Mike North: So just to follow through,
where things are coming from and

64
00:04:25.156 --> 00:04:28.480
where they're going,
we've got our container.

65
00:04:28.480 --> 00:04:29.330
Here's the action.

66
00:04:30.390 --> 00:04:36.340
We are yielding the action out as
the second argument passed to yield.

67
00:04:37.770 --> 00:04:40.900
We're kind of lumping it all into
an object with a hash helper.

68
00:04:40.900 --> 00:04:46.556
And then in the channel HBS, which is
where we're kind of catching that,

69
00:04:46.556 --> 00:04:51.221
we're picking up,
here's the first argument past yield.

70
00:04:51.221 --> 00:04:53.278
Here's the second
argument passed to yield,

71
00:04:53.278 --> 00:04:55.396
this is the one we created
with the hash helper.

72
00:04:55.396 --> 00:04:59.094
And just like in JavaScript,
we can use .PropertyAccess,

73
00:04:59.094 --> 00:05:03.093
we can say off of this object,
give me this create message thing.

74
00:05:03.093 --> 00:05:06.969
And this is gonna come in handy cause
we’re gonna do delete message in a moment

75
00:05:06.969 --> 00:05:10.846
and I don’t want to just have to have like
7 arguments in a special order that I

76
00:05:10.846 --> 00:05:11.780
remember.

77
00:05:11.780 --> 00:05:15.180
I want to be able to refer to
things by name and not by position.

78
00:05:16.730 --> 00:05:21.380
And so now send message in the channel
footer, that's passed in as an arg.

79
00:05:21.380 --> 00:05:22.927
And if we go into the channel footer.

80
00:05:26.850 --> 00:05:28.740
&gt;&gt; Mike North: Send message.

81
00:05:28.740 --> 00:05:30.960
Sorry I keep flip flopping on this name,
but

82
00:05:30.960 --> 00:05:34.730
this is why it's good to sort of thread
things through and follow everything.

83
00:05:34.730 --> 00:05:38.436
So, I'm gonna post in the JavaScript
channel here and let's see if this works.

84
00:05:42.786 --> 00:05:47.277
&gt;&gt; Mike North: Clear and send.

85
00:05:47.277 --> 00:05:48.030
So, interesting.

86
00:05:48.030 --> 00:05:50.160
So I sent it twice.

87
00:05:50.160 --> 00:05:51.463
&gt;&gt; Speaker 2: Do you have it on submit?

88
00:05:51.463 --> 00:05:53.434
&gt;&gt; Speaker 3: [CROSSTALK]
A form submit handy?

89
00:05:53.434 --> 00:05:54.625
&gt;&gt; Mike North: Good call.

90
00:05:57.062 --> 00:05:59.940
&gt;&gt; Mike North: I didn't prevent defaults,
that's why we got the reload.

91
00:05:59.940 --> 00:06:01.320
All right, let's fix it.

92
00:06:01.320 --> 00:06:04.690
So channel-footer,
first we need to receive the event and

93
00:06:04.690 --> 00:06:07.110
then we need to do preventDefault.

94
00:06:08.170 --> 00:06:11.510
This will not be harmful if the button
is pressed and if it's a button event.

95
00:06:12.700 --> 00:06:16.459
And let's just remove that
handler from the button itself.

96
00:06:18.140 --> 00:06:18.728
That should work.

97
00:06:24.473 --> 00:06:25.587
&gt;&gt; Mike North: All right, let's try again.

98
00:06:30.295 --> 00:06:33.170
&gt;&gt; Mike North: So I'm gonna hit,
I'm gonna clear this out.

99
00:06:33.170 --> 00:06:33.740
Hit Enter.

100
00:06:35.330 --> 00:06:39.130
There's my post request,
we didn't expect anything to be changed.

101
00:06:39.130 --> 00:06:44.530
But now if I refresh I should see it in
the messages list at the bottom, and I do.

102
00:06:44.530 --> 00:06:46.900
So we did actually persist that data.

103
00:06:46.900 --> 00:06:49.840
I noticed that there's one improvement
we can make here real quick and

104
00:06:49.840 --> 00:06:53.340
that is after we send the message,
and let's make this async.

105
00:06:54.420 --> 00:06:58.370
So even though we've been passed
this action it's an async function.

106
00:06:59.380 --> 00:07:03.086
We can await it so
that as soon as this is done,

107
00:07:03.086 --> 00:07:06.217
we can clear out the text in the field.

108
00:07:06.217 --> 00:07:10.810
So we're not left with our
message still in this field.

109
00:07:10.810 --> 00:07:14.450
So you could say this.body
equals empty string.

