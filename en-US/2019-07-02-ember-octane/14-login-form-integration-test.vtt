WEBVTT

1
00:00:00.240 --> 00:00:06.260
&gt;&gt; Mike North: Last step here is a check
to make sure our tests are passing, and

2
00:00:06.260 --> 00:00:06.760
they are not.

3
00:00:08.210 --> 00:00:12.166
So let's check out what our integration
test looks like cuz that's the one that's

4
00:00:12.166 --> 00:00:14.327
failing, the login form integration test.

5
00:00:18.819 --> 00:00:20.890
&gt;&gt; Mike North: And
here is the meat of this test.

6
00:00:22.140 --> 00:00:29.060
It involves creating a login form
component, which looks fine to me, right?

7
00:00:29.060 --> 00:00:31.100
There are no arguments we pass into this,
yet.

8
00:00:32.740 --> 00:00:37.410
We then get the text content and
trim all leading and trailing whitespace.

9
00:00:37.410 --> 00:00:41.950
And that checks out, cuz we can see that
there's no white space at the beginning or

10
00:00:41.950 --> 00:00:46.000
end of this string, and
we expect it to be an empty string.

11
00:00:46.000 --> 00:00:53.100
Okay, well, that right there is not gonna
align with what the real situation is.

12
00:00:53.100 --> 00:00:57.760
We can also see that we have one tests
that checks the the login form component

13
00:00:57.760 --> 00:01:00.330
used as a self closing element and

14
00:01:00.330 --> 00:01:06.560
then one that passes something into
the element, this bought content.

15
00:01:06.560 --> 00:01:08.670
I will only say for now,

16
00:01:08.670 --> 00:01:14.060
this does not look like the way we
are using the component, in login hps.

17
00:01:15.060 --> 00:01:22.220
So for now we're just gonna say, this
does not align with what we need to test.

18
00:01:22.220 --> 00:01:24.390
But we'll look later at what
that means and how to use it.

19
00:01:26.320 --> 00:01:31.640
So I have a kinda well practiced regular
expression I use for situations like this.

20
00:01:34.320 --> 00:01:37.310
Don't need to necessarily copy it,

21
00:01:37.310 --> 00:01:41.250
but it lets me make a more
meaningful assert here.

22
00:01:41.250 --> 00:01:42.990
So I wanna trim the string.

23
00:01:42.990 --> 00:01:50.020
But then I want to replace any
new lines that are surrounded

24
00:01:50.020 --> 00:01:55.280
by any amount of white space, with a new
line that has no white space around it.

25
00:01:56.430 --> 00:01:58.910
So this is what that regex looks like.

26
00:01:58.910 --> 00:02:02.524
That's a space,
&gt;&gt; Mike North: And

27
00:02:02.524 --> 00:02:08.570
I want any amount of it, and
then I want one or more new lines.

28
00:02:09.590 --> 00:02:13.340
And then I want any amount of space
that might follow the new lines.

29
00:02:13.340 --> 00:02:17.230
So this would handle 17 tabs,
and then 6 new lines,

30
00:02:17.230 --> 00:02:22.010
and then 15 more tabs that would
all be regarded as one match.

31
00:02:24.000 --> 00:02:27.360
And then the last thing I'm
gonna add here is g, and

32
00:02:27.360 --> 00:02:32.280
that basically tells replace
that any of these that you

33
00:02:32.280 --> 00:02:36.130
find take care of them all,
don't just take care of the first one.

34
00:02:36.130 --> 00:02:40.250
And then I'm gonna replace those
with these simple new line.

35
00:02:40.250 --> 00:02:42.240
Here's how that looks.

36
00:02:42.240 --> 00:02:46.720
All right, so, this is already a lot
easier to assert against, right?

37
00:02:46.720 --> 00:02:49.260
We've just stripped out
all of the white space.

38
00:02:49.260 --> 00:02:55.210
Anytime there was some sort of new liney
white space thing, we normalized that.

39
00:02:55.210 --> 00:02:58.740
We can also split it by new line.

40
00:03:00.120 --> 00:03:02.380
And now we get a nice array.

41
00:03:02.380 --> 00:03:06.780
So I can assert against that array and
it makes my test a bit more readable.

42
00:03:06.780 --> 00:03:11.340
I do this because often I don't really
care about white space in HTML.

43
00:03:11.340 --> 00:03:14.830
It's not meaningful for most HTML.

44
00:03:14.830 --> 00:03:17.790
So I don't want that to
be included in my tests.

45
00:03:17.790 --> 00:03:22.840
And this means that whoever
reformats the HTML or

46
00:03:22.840 --> 00:03:27.960
add some stuff like it's adding a couple
new tabs is not gonna break this test

47
00:03:27.960 --> 00:03:29.830
which is exactly what I want.

48
00:03:29.830 --> 00:03:34.887
I'm being sure to use deep equal
because the shallow equal will

49
00:03:34.887 --> 00:03:40.430
just compare, it will compare whether

50
00:03:40.430 --> 00:03:45.510
like one array triple equals another
array with identical contents.

51
00:03:45.510 --> 00:03:47.250
And that doesn't work.

52
00:03:48.470 --> 00:03:54.050
So deep equal will actually iterate
through the contents and check

53
00:03:54.050 --> 00:03:58.580
the individual members and their order and
make sure that everything checks out.

54
00:03:58.580 --> 00:03:59.860
So there you go.

55
00:03:59.860 --> 00:04:03.510
That is a very basic integration test for
this.

56
00:04:03.510 --> 00:04:07.500
And we have reached the end of step seven.

