WEBVTT

1
00:00:00.000 --> 00:00:04.798
&gt;&gt; Mike North: Finally, let's turn
this app into a progressive web app.

2
00:00:04.798 --> 00:00:08.460
So this is going to involve
using a service worker.

3
00:00:08.460 --> 00:00:11.406
And a service worker, you can think of,

4
00:00:11.406 --> 00:00:17.054
as a second independent program that
you install into your user's browser.

5
00:00:17.054 --> 00:00:21.794
When I say install,
think like a mobile app.

6
00:00:21.794 --> 00:00:26.303
It sticks there, and
it'll live a long time.

7
00:00:26.303 --> 00:00:30.119
And one of the cool things about service
workers is they can run in the background.

8
00:00:30.119 --> 00:00:34.184
They can intercept requests
that your app makes, and

9
00:00:34.184 --> 00:00:36.813
potentially toss back some data.

10
00:00:36.813 --> 00:00:43.010
Or so they can give you a lot of options
when it comes to caching strategies.

11
00:00:43.010 --> 00:00:46.020
If you wanna learn more about
service workers, Steve Kenny and

12
00:00:46.020 --> 00:00:50.576
I taught progressive web app course,
that's available on Frontend Masters.

13
00:00:50.576 --> 00:00:55.600
And there's a new one coming out,
a full day on service workers,

14
00:00:55.600 --> 00:00:59.070
that by the time this video
is made should be available.

15
00:00:59.070 --> 00:01:00.771
Please send the raw video form.

16
00:01:00.771 --> 00:01:07.279
So keep in mind these are powerful tools,
but you can run into trouble sometimes.

17
00:01:07.279 --> 00:01:12.227
So you wanna think through it carefully or
use a battle-tested

18
00:01:12.227 --> 00:01:17.469
solution that a large opinionated
community has rallied around.

19
00:01:18.560 --> 00:01:20.840
And that is what we're going to do today.

20
00:01:20.840 --> 00:01:26.661
So step one is we're going to
install a couple Ember add-ons.

21
00:01:26.661 --> 00:01:32.608
First,
&gt;&gt; Mike North: ember-service-worker.

22
00:01:32.608 --> 00:01:37.992
And this is sort of a pluggable,
a core functionality for

23
00:01:37.992 --> 00:01:44.272
service workers, that creates
the right file and registers it and

24
00:01:44.272 --> 00:01:49.896
manages the service worker’s
life cycle appropriately.

25
00:01:49.896 --> 00:01:52.190
We’re gonna install some
plugins on top of this.

26
00:01:52.190 --> 00:01:58.210
So in order to cache the static assets
that are present as a result of Ember's

27
00:01:58.210 --> 00:02:04.600
build process, and by that I mean anything
that's in this dist folder, right?

28
00:02:04.600 --> 00:02:08.416
This is what you would deploy,
this is your build.

29
00:02:08.416 --> 00:02:15.860
We wanna install this plugin called
ember-service-worker-asset-cache, right?

30
00:02:15.860 --> 00:02:20.263
So it knows which files were built,
it knows how to download them,

31
00:02:20.263 --> 00:02:25.236
it knows that these files are meant to
go together to form one cohesive app.

32
00:02:25.236 --> 00:02:32.281
We're gonna install
ember-service-worker-cache-fallback,

33
00:02:35.839 --> 00:02:37.515
&gt;&gt; Mike North: To cache API,

34
00:02:37.515 --> 00:02:41.017
get requests as we make them.

35
00:02:41.017 --> 00:02:44.831
Now we have a preference for fresh data,
but if we lose our connection,

36
00:02:44.831 --> 00:02:48.595
we'll be able to pull stuff that
we've already seen from this cache.

37
00:02:48.595 --> 00:02:52.908
Finally, we're going to treat
index.html in a special way.

38
00:02:52.908 --> 00:02:57.001
Because as was pointed out
earlier by one of your questions,

39
00:02:57.001 --> 00:03:02.071
a single page app in index.html,
that requires some special treatment.

40
00:03:02.071 --> 00:03:07.284
Because no matter, you can make a request
in a variety of different paths,

41
00:03:07.284 --> 00:03:11.113
but they all have to kinda
boot your single page app up.

42
00:03:11.113 --> 00:03:15.546
And the path portion of the URL
is reserved for Ember's router.

43
00:03:15.546 --> 00:03:21.274
That is not a different HTML file,
that's just a piece of state really.

44
00:03:21.274 --> 00:03:29.514
So that's ember-service-
&gt;&gt; Mike North: worker- index.

45
00:03:29.514 --> 00:03:32.184
So we're gonna install
all of those things and

46
00:03:32.184 --> 00:03:35.892
then we're gonna make a tiny tiny
little bit of configuration.

47
00:03:35.892 --> 00:03:38.491
So you're gonna go to ember-cli-build,

48
00:03:38.491 --> 00:03:41.451
this is what defines your
app's asset pipeline.

49
00:03:41.451 --> 00:03:46.357
And the only clue we have to give this
collection of add ons is which URLs

50
00:03:46.357 --> 00:03:50.960
should it cache and
fall back to if we lose Internet.

51
00:03:50.960 --> 00:03:54.036
And those are gonna look like this.

52
00:03:54.036 --> 00:04:00.254
cache-fallback-
&gt;&gt; Mike North: And we'll say,

53
00:04:00.254 --> 00:04:06.656
patterns is anything that begins with API.

54
00:04:06.656 --> 00:04:11.903
I honestly don't know what syntax this is,
I just know that this is what we want.

55
00:04:14.361 --> 00:04:17.923
&gt;&gt; Mike North: So this looks like
some Regex engine of some sort.

56
00:04:20.539 --> 00:04:22.681
&gt;&gt; Mike North: Let's see what happens.

57
00:04:22.681 --> 00:04:27.932
And I'm going to first show you
Devtools and the service worker tabs,

58
00:04:27.932 --> 00:04:31.680
so we're going Application
&gt; Service Workers.

59
00:04:31.680 --> 00:04:34.170
Note that you don't see anything here,

60
00:04:34.170 --> 00:04:37.240
this is an indication that
no worker is installed yet.

61
00:04:39.180 --> 00:04:42.502
So I'm gonna serve my app,
it's gonna be served with fast boot.

62
00:04:45.643 --> 00:04:49.211
&gt;&gt; Mike North: And
we're gonna see as soon as the page loads,

63
00:04:49.211 --> 00:04:54.348
a worker gets installed, so
this is activated and it's running.

64
00:04:54.348 --> 00:04:59.580
We can even take a peek into this cache
storage, and see that the asset cache,

65
00:04:59.580 --> 00:05:04.832
it's holding all of the source maps,
all of the JavaScript, all of the CSS.

66
00:05:04.832 --> 00:05:10.779
So if I go and visit a couple of channels,
&gt;&gt; Mike North: So

67
00:05:10.779 --> 00:05:15.901
we'll visit Microsoft and
everything at LinkedIn,

68
00:05:15.901 --> 00:05:20.790
and then if I were to go to
this Service Worker tab and

69
00:05:20.790 --> 00:05:26.250
check Offline and
Refresh the page, it still works.

70
00:05:26.250 --> 00:05:30.050
Now, these images didn't get cached, why?

71
00:05:30.050 --> 00:05:35.030
Because they're not part of that URL
pattern where I said cache everything that

72
00:05:35.030 --> 00:05:36.340
begins with this URL.

73
00:05:36.340 --> 00:05:40.810
Now, Dilbert got cached here,
probably because of the normal

74
00:05:40.810 --> 00:05:45.710
HTTP caching that happens, that's sort
of underneath the service worker.

75
00:05:45.710 --> 00:05:50.920
You could decide, well, realistically, we
would host images in a predictable domain.

76
00:05:50.920 --> 00:05:53.640
But you could also decide
that it's not critical enough

77
00:05:53.640 --> 00:05:55.310
that you need to render those.

78
00:05:55.310 --> 00:05:58.110
Or you could have a fallback
image that you always use,

79
00:05:58.110 --> 00:06:03.530
like always sends the standard 404 image,
something like that.

80
00:06:03.530 --> 00:06:05.650
But we, because this is a single page app,

81
00:06:05.650 --> 00:06:09.440
we can change channels,
we can go to the Microsoft team.

82
00:06:09.440 --> 00:06:13.620
So this app, if we were on an airplane,
this would work.

83
00:06:13.620 --> 00:06:18.470
I could even, tempting fate here,
turn my WiFi off,

84
00:06:18.470 --> 00:06:21.240
and everything still works and
I can load the page.

85
00:06:22.640 --> 00:06:24.170
Pretty nice, right?

86
00:06:24.170 --> 00:06:29.387
That's really easy for what typically it
takes to set up a progressive web app.

87
00:06:29.387 --> 00:06:30.204
Yes sir.

88
00:06:30.204 --> 00:06:33.920
&gt;&gt; Speaker 2: Doesn't localhost
still work with WiFi off anyway?

89
00:06:33.920 --> 00:06:34.661
&gt;&gt; Mike North: Local host-
&gt;&gt; Speaker 2: So

90
00:06:34.661 --> 00:06:36.393
that's not as much of
a test as it looks like.

91
00:06:36.393 --> 00:06:37.217
&gt;&gt; Mike North: Yeah.

92
00:06:37.217 --> 00:06:38.321
Good point.

93
00:06:38.321 --> 00:06:40.320
&gt;&gt; Speaker 2: [LAUGH]
&gt;&gt; Mike North: Very good point.

94
00:06:40.320 --> 00:06:44.052
My API is localhost, but
offline I trust that,

95
00:06:44.052 --> 00:06:47.890
that is really not letting
us leave the browser.

