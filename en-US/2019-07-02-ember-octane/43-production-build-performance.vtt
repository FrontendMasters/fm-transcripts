WEBVTT

1
00:00:00.290 --> 00:00:04.450
&gt;&gt; Mike North: The last thing I want us to
do is make a production build of this app

2
00:00:04.450 --> 00:00:06.510
and run it through a performance audit.

3
00:00:06.510 --> 00:00:11.140
So we can see what we’ve built and
how it will perform

4
00:00:11.140 --> 00:00:14.800
in a resource constrained
environment like on a mobile device.

5
00:00:16.410 --> 00:00:21.762
The way you build a production flavor of
an Ember app which is all uglified and

6
00:00:21.762 --> 00:00:28.530
minified and all of the development's
specific code is stripped out.

7
00:00:28.530 --> 00:00:31.210
You just do ember build prod.

8
00:00:33.140 --> 00:00:36.630
This takes a little while cuz
there's a lot of work to be done and

9
00:00:36.630 --> 00:00:39.890
a lot of JavaScript to chew through.

10
00:00:39.890 --> 00:00:42.459
It should spit out all of our files.

11
00:00:43.490 --> 00:00:48.151
Then what we're gonna do is
use a production grade asset

12
00:00:48.151 --> 00:00:53.120
server that I have built in
the slash server folder for you.

13
00:00:53.120 --> 00:00:59.867
That this is the kinda thing that I would
be comfortable deploying to production,

14
00:00:59.867 --> 00:01:04.265
but it's not running Ember CLI,
it's just a Node and

15
00:01:04.265 --> 00:01:09.680
Express app that uses a fast boot
app server to spin up 8 workers.

16
00:01:09.680 --> 00:01:14.034
I think by default it’s one per core
on whatever machine you have so

17
00:01:14.034 --> 00:01:18.934
request comes in and it picks whichever
worker hasn’t been working much so

18
00:01:18.934 --> 00:01:21.090
let’s see how that works.

19
00:01:21.090 --> 00:01:22.576
NPM start.

20
00:01:25.824 --> 00:01:26.725
&gt;&gt; Mike North: So there we go.

21
00:01:26.725 --> 00:01:28.595
The reason you see so much logging here,

22
00:01:28.595 --> 00:01:30.900
it's like these are all
of the process IDs.

23
00:01:30.900 --> 00:01:35.470
These are 12 core machines,
thinks it's a 12 core machine.

24
00:01:35.470 --> 00:01:38.270
Now that our production
build has completed, or

25
00:01:38.270 --> 00:01:43.420
going to run lighthouse in a browser
to see how this performs in a resource

26
00:01:43.420 --> 00:01:48.806
constrained environment like on
a low to mid-tier mobile device.

27
00:01:48.806 --> 00:01:51.870
We wanna make sure that we use
an incognito tab to do this so

28
00:01:51.870 --> 00:01:55.470
that you can be sure that no Chrome
extensions interfere with the testing.

29
00:01:56.660 --> 00:01:58.840
So here's my incognito tab.

30
00:01:58.840 --> 00:02:00.580
I wanna paste in a URL.

31
00:02:02.330 --> 00:02:06.080
Obviously I'm not logged in because
this is an incognito tab, and

32
00:02:06.080 --> 00:02:10.660
I'm starting out with clean cookies,
so let's select an user,

33
00:02:10.660 --> 00:02:14.180
log in, and now we can go to audits,

34
00:02:15.630 --> 00:02:21.080
and we will throttle down to 3G.

35
00:02:21.080 --> 00:02:23.220
Leaves clear storage unchecked for

36
00:02:23.220 --> 00:02:28.110
return visit and
it's running through all of it's tests.

37
00:02:29.350 --> 00:02:33.620
So, the scores pretty well,
at 0.7 seconds.

38
00:02:35.080 --> 00:02:39.485
We can try clearing this out and
not throttling it.

39
00:02:49.559 --> 00:02:51.892
&gt;&gt; Mike North: And
we're at the point two second range.

40
00:02:51.892 --> 00:02:55.550
I showed 0.1 at the beginning and
I got a little unlucky this time.

41
00:02:55.550 --> 00:02:58.940
But this is really, really, really fast.

42
00:02:58.940 --> 00:03:02.350
Now of course we're running
everything on local host, and so

43
00:03:02.350 --> 00:03:07.750
real networking conditions will always
add to that, but they'll add to anything.

44
00:03:07.750 --> 00:03:10.600
Whatever apps you're building,

45
00:03:10.600 --> 00:03:15.990
you start at some number and then you
add networking and stuff on top of that.

46
00:03:15.990 --> 00:03:18.550
So we're starting at 0.2 seconds.

47
00:03:18.550 --> 00:03:22.590
And that’s got a lot of head room for
other things to be slow so

48
00:03:22.590 --> 00:03:26.780
if you throw this on a CDN,
it’s still gonna be blazing fast.

49
00:03:26.780 --> 00:03:33.106
If you have a slowish API behind it,
it’s still gonna be really fast so

50
00:03:33.106 --> 00:03:40.307
this is showing us that Ember Octane has
hit its goal by being high performance.

51
00:03:40.307 --> 00:03:43.210
And making it so that we can target
these resource constrained devices.

