WEBVTT

1
00:00:00.277 --> 00:00:04.413
&gt;&gt; Mike North: Now, let's make it so
that it updates live.

2
00:00:04.413 --> 00:00:08.864
What we're gonna have to do,
&gt;&gt; Mike North: Let me just take

3
00:00:08.864 --> 00:00:09.670
a little pause here.

4
00:00:14.389 --> 00:00:16.948
&gt;&gt; Mike North: That would be a good
time to break to the next segment.

5
00:00:21.616 --> 00:00:24.837
&gt;&gt; Mike North: The last little step of
this problem that we're gonna tackle is

6
00:00:24.837 --> 00:00:25.444
making it so

7
00:00:25.444 --> 00:00:29.597
that we don't have to reload the page to
see our new message that we just created.

8
00:00:29.597 --> 00:00:33.262
And we gonna do so by,
in addition to making that post request,

9
00:00:33.262 --> 00:00:35.766
let's just add it to that messages array.

10
00:00:37.899 --> 00:00:41.078
&gt;&gt; Mike North: So
that's in the chat-container,

11
00:00:41.078 --> 00:00:46.613
after the response comes back,
if the response is okay, well,

12
00:00:46.613 --> 00:00:52.778
let's just say if it's not okay will
throw an error saying couldn't.

13
00:00:55.684 --> 00:00:57.465
&gt;&gt; Mike North: Couldn't
save the chat message.

14
00:00:57.465 --> 00:01:02.729
So if we make it beyond that point,
we know the response returned

15
00:01:02.729 --> 00:01:08.194
a thumbs up to us, and we will get
the JSON that the server returns.

16
00:01:08.194 --> 00:01:11.707
This will have a chat message ID and
a timestamp.

17
00:01:11.707 --> 00:01:16.610
Those are server concerns,
they are responsible for doing that.

18
00:01:16.610 --> 00:01:22.638
So we could do message data

19
00:01:22.638 --> 00:01:28.393
await response.json.

20
00:01:28.393 --> 00:01:31.421
Let's put a debugger there and
see what we end up with.

21
00:01:34.639 --> 00:01:36.879
&gt;&gt; Mike North: Send.

22
00:01:36.879 --> 00:01:42.597
There's our message data, so great, we've
got a body at channel ID created at ID.

23
00:01:42.597 --> 00:01:45.573
So this is a lot of
what we need to render,

24
00:01:45.573 --> 00:01:48.997
unfortunately it doesn't include the user.

25
00:01:48.997 --> 00:01:52.996
And if you look at the way these
messages come over the network,

26
00:01:52.996 --> 00:01:54.818
if we just take a quick peek.

27
00:01:59.682 --> 00:02:02.054
&gt;&gt; Mike North: Let me pull this up,
there's messages.

28
00:02:02.054 --> 00:02:05.788
You'll see that we embed user record
in each of them, and this is so

29
00:02:05.788 --> 00:02:08.133
that they each have a nice icon and
a name.

30
00:02:08.133 --> 00:02:11.955
The idea is not really not enough for
us to render the name and

31
00:02:11.955 --> 00:02:14.033
this little picture over here.

32
00:02:14.033 --> 00:02:17.864
And that's fine,
we can just request the user ID here.

33
00:02:17.864 --> 00:02:20.539
Now, this is where in a more robust app,

34
00:02:20.539 --> 00:02:23.861
I would probably bake this
into the auth service.

35
00:02:23.861 --> 00:02:28.907
And I would say, when the application
loads or immediately after you login,

36
00:02:28.907 --> 00:02:32.088
I would go and
in addition to storing the user ID,

37
00:02:32.088 --> 00:02:35.676
I would fetch the user record itself and
hold it there.

38
00:02:35.676 --> 00:02:39.672
In this case, this is the only
place where we'll really need it,

39
00:02:39.672 --> 00:02:44.411
I mean aside from up here, which you could
update on your own time if you want.

40
00:02:44.411 --> 00:02:48.751
But we're just gonna fetch it
every time we create a message so

41
00:02:48.751 --> 00:02:52.603
that we can assemble the correct
data structure here.

42
00:02:52.603 --> 00:02:57.859
So we could say, user is, we'll do

43
00:02:57.859 --> 00:03:03.467
this all in one line, await, await,

44
00:03:03.467 --> 00:03:08.746
fetch API users, and then user ID.

45
00:03:11.858 --> 00:03:19.106
&gt;&gt; Mike North: And then once that returns,
&gt;&gt; Mike North: .json,

46
00:03:19.106 --> 00:03:22.444
there you go, a double await.

47
00:03:22.444 --> 00:03:26.141
But this’ll end up with
getting us our user record.

48
00:03:26.141 --> 00:03:31.716
And then we just want to save this
messages equals, cuz this is immutable,

49
00:03:31.716 --> 00:03:35.964
we are creating a new array,
we’re using assignments so

50
00:03:35.964 --> 00:03:39.963
that the track's property
is updated accordingly.

51
00:03:43.527 --> 00:03:48.080
&gt;&gt; Mike North: So it's a new array that
is the messages that are already there,

52
00:03:48.080 --> 00:03:50.451
combined with this new message.

53
00:03:50.451 --> 00:03:58.432
And we're gonna create a new object that
has everything on message data, and user.

54
00:03:58.432 --> 00:04:03.540
So we can use a spread operator
both with arrays and with objects.

55
00:04:03.540 --> 00:04:06.373
But this is when you’re dealing
with immutable data and

56
00:04:06.373 --> 00:04:10.226
you have to sort of create a new array
based on the contents of an old array, or

57
00:04:10.226 --> 00:04:12.415
create a new object
based on an old object.

58
00:04:12.415 --> 00:04:18.188
Being able to kind of unzip this
It's a really nice syntax to have,

59
00:04:18.188 --> 00:04:24.080
and it saves you a lot of object
assign and array constructor stuff.

60
00:04:24.080 --> 00:04:27.030
So let's see if this did the trick.

61
00:04:32.786 --> 00:04:37.023
&gt;&gt; Mike North: Looks like it, it worked.

62
00:04:37.023 --> 00:04:42.173
So, all we had to do create a new ray,
it's track property, things look good.

63
00:04:42.173 --> 00:04:43.995
Let me check the test real quick.

64
00:04:50.033 --> 00:04:51.994
&gt;&gt; Mike North: Channel footer, it's a new,

65
00:04:51.994 --> 00:04:55.697
remember we just created
the JavaScript module for this.

66
00:04:55.697 --> 00:05:00.559
We've done quite a bit of testing here,
I'm gonna just comment this one out,

67
00:05:00.559 --> 00:05:02.560
and we are otherwise good to go.

