WEBVTT

1
00:00:00.075 --> 00:00:03.680
&gt;&gt; Mike North: Next, we're going to
extend on this service we've just built.

2
00:00:03.680 --> 00:00:08.782
By making it so that only logged in
users make it into the teams page,

3
00:00:08.782 --> 00:00:12.910
and only logged out users can
make it to the login page.

4
00:00:12.910 --> 00:00:15.712
And we're gonna do this
using Ember's route and

5
00:00:15.712 --> 00:00:18.730
hooks that are available for
us to customize there.

6
00:00:20.160 --> 00:00:26.150
So let's look at the two routes
we created earlier in the course.

7
00:00:26.150 --> 00:00:28.530
One was called teams,
one was called login.

8
00:00:28.530 --> 00:00:32.358
And these are those jazz files
that are in the app/routes folder.

9
00:00:35.646 --> 00:00:37.060
&gt;&gt; Mike North: Here we go.

10
00:00:37.060 --> 00:00:42.460
There's nothing interesting here at
this point, and what we need to do

11
00:00:42.460 --> 00:00:50.030
is understand there is a cycle of
functions that these routes invoke,

12
00:00:50.030 --> 00:00:54.670
and these give us a convenient
customization points to use.

13
00:00:54.670 --> 00:01:00.780
One, which we're gonna use, I think it's
in the next step or the step after that.

14
00:01:00.780 --> 00:01:04.190
It's the model hook, and this is
typically what's used to fetch data.

15
00:01:06.910 --> 00:01:09.980
So whatever this hook returns,

16
00:01:09.980 --> 00:01:14.290
we're gonna be able to use in this
route template pretty easily.

17
00:01:14.290 --> 00:01:19.960
We want to validate whether the user's
authentication state is good or

18
00:01:19.960 --> 00:01:24.040
bad for a particular URL before
this model hook is called.

19
00:01:24.040 --> 00:01:27.734
So there's another hook and
it's called before model.

20
00:01:31.894 --> 00:01:36.154
&gt;&gt; Mike North: And this is a terrific
place to validate entry of

21
00:01:36.154 --> 00:01:38.077
a particular route.

22
00:01:38.077 --> 00:01:45.262
Because this is a hook, it's a method on
the base class where you are customizing,

23
00:01:45.262 --> 00:01:49.983
we wanna call it the super
method in order to ensure that

24
00:01:49.983 --> 00:01:54.215
it has a chance to do
everything that it might do.

25
00:01:54.215 --> 00:01:59.769
I don't want anyone to worry too much
about what the default behavior is,

26
00:01:59.769 --> 00:02:04.158
in this case it's not much,
but if you always call super,

27
00:02:04.158 --> 00:02:07.820
you're unlikely to have a bad time.

28
00:02:07.820 --> 00:02:12.460
If you try to prematurely optimize and
strip this out thinking that

29
00:02:12.460 --> 00:02:16.780
nothing's there, nothing's there, we could
introduce something in the future, and

30
00:02:16.780 --> 00:02:20.706
now you're missing it, and bad things
happen, and it could be confusing.

31
00:02:20.706 --> 00:02:25.900
I also wanna point out that before model,
model, and

32
00:02:25.900 --> 00:02:31.370
after model,
those route hooks are promise aware.

33
00:02:31.370 --> 00:02:36.100
What that means is as the route does its
thing and it starts loading data and

34
00:02:36.100 --> 00:02:41.270
doing everything that this route is
designed to do, in the event that

35
00:02:41.270 --> 00:02:45.370
these functions return promises it will
wait for those promises to resolve.

36
00:02:45.370 --> 00:02:51.750
Does this sound like any kind of now core
JavaScript language feature that exists?

37
00:02:51.750 --> 00:02:53.520
&gt;&gt; Speaker 2: The asynchronous functions.

38
00:02:53.520 --> 00:03:00.256
&gt;&gt; Mike North: Async functions, so we can
actually define this as async functions,

39
00:03:00.256 --> 00:03:06.088
and that lets us do something
like a wait super before model.

40
00:03:06.088 --> 00:03:10.920
And I'm getting, let's see, yes.

41
00:03:10.920 --> 00:03:15.445
So we have to pass arguments,
in this case there's transition,

42
00:03:15.445 --> 00:03:19.050
that's the only argument
that before model gets.

43
00:03:19.050 --> 00:03:26.120
And a transition, it's just an object that
let's you, you could abort a transition,

44
00:03:26.120 --> 00:03:29.610
we're not gonna worry too much about that,
but if you wanted a very rich login

45
00:03:29.610 --> 00:03:34.800
experience you could actually kick
a user out to the login page.

46
00:03:34.800 --> 00:03:38.740
And then once they successfully log in you
can send them back to the original URL

47
00:03:38.740 --> 00:03:40.780
they had tried to access.

48
00:03:40.780 --> 00:03:44.296
This would all be done via aborting
the transition and retrying.

49
00:03:44.296 --> 00:03:48.080
It's just a little atom of state

50
00:03:48.080 --> 00:03:53.210
that we use that represents
the attempt to get into this URL.

51
00:03:53.210 --> 00:03:56.210
We just need to pass it straight
through in this case here.

52
00:03:57.990 --> 00:04:04.003
So the next thing we wanna do
is we need authentication,

53
00:04:04.003 --> 00:04:06.410
we need to know about that.

54
00:04:06.410 --> 00:04:09.760
We need to know whether the current
user ID is there or not.

55
00:04:09.760 --> 00:04:12.000
And how would we accomplish this?

56
00:04:12.000 --> 00:04:12.660
Any ideas?

57
00:04:14.110 --> 00:04:15.290
&gt;&gt; Speaker 3: Service.
&gt;&gt; Mike North: Service,

58
00:04:15.290 --> 00:04:16.453
we gotta inject the service.

59
00:04:16.453 --> 00:04:21.185
So import ( inject as service )

60
00:04:21.185 --> 00:04:25.218
from Ember/service, and

61
00:04:25.218 --> 00:04:30.490
down here we'll say service auth.

62
00:04:32.995 --> 00:04:35.379
&gt;&gt; Mike North: Yeah, we can keep
that around, that's a nice import.

63
00:04:38.299 --> 00:04:45.198
&gt;&gt; Mike North: That will be a good
JS dot thing, type AuthService.

64
00:04:48.188 --> 00:04:54.784
&gt;&gt; Mike North: Now we just
simply need to say if this.auth,

65
00:04:57.809 --> 00:05:00.284
&gt;&gt; Mike North: currentUserId, and

66
00:05:00.284 --> 00:05:03.450
this is the team's route.

67
00:05:04.450 --> 00:05:08.980
So I actually want this function
to sort of almost be a no op

68
00:05:08.980 --> 00:05:11.800
if the current user ID is defined.

69
00:05:11.800 --> 00:05:19.258
So if it's undefined, if it's I'm
gonna say this TransitionTo login.

70
00:05:24.556 --> 00:05:30.167
&gt;&gt; Mike North: So this basically says do
the default stuff that Ember might do for

71
00:05:30.167 --> 00:05:32.110
before model.

72
00:05:32.110 --> 00:05:35.990
If the currentUserId is falsely,
kick them out to the login page.

73
00:05:35.990 --> 00:05:38.470
They'll never actually
make it to the chat UI.

74
00:05:38.470 --> 00:05:40.940
Let's experiment and see if this works.

75
00:05:42.840 --> 00:05:44.610
Okay, so I'm on the teams page.

76
00:05:44.610 --> 00:05:48.280
Logout is not wired up yet,
we'll do that in a moment.

77
00:05:48.280 --> 00:05:53.215
I can imitate logout by just
deleting this from my local storage.

78
00:05:53.215 --> 00:05:58.710
Guess I have to click the delete,
and now I wanna reload,

79
00:05:58.710 --> 00:06:05.024
despite being on /teams, and
I find myself on the log in screen.

80
00:06:05.024 --> 00:06:08.148
We've successfully kicked the user out,
and

81
00:06:08.148 --> 00:06:13.195
I'm gonna copy this because we're gonna
need basically the same thing for

82
00:06:13.195 --> 00:06:17.540
the login route, except we're
just gonna flip the condition.

83
00:06:19.580 --> 00:06:24.327
Let me grab the imports in a second,
but we just need to say look, if you

84
00:06:24.327 --> 00:06:29.819
are logged in you don't need the login
form, we'll send you straight to teams.

85
00:06:32.070 --> 00:06:33.556
&gt;&gt; Mike North: Let me
grab those imports real

86
00:06:33.556 --> 00:06:38.716
quick,
&gt;&gt; Mike North: And

87
00:06:38.716 --> 00:06:40.500
we should be good to go.

88
00:06:40.500 --> 00:06:43.680
So now let me try to log in,
which actually works, right?

89
00:06:43.680 --> 00:06:49.001
We're saving that, sign in, all right,
and now let me try to go back to log in.

90
00:06:52.172 --> 00:06:54.370
&gt;&gt; Mike North: Kicks me out to here.

91
00:06:54.370 --> 00:06:55.580
Let me try deleting this.

92
00:06:57.590 --> 00:07:00.940
Refresh, delete, and
we'll go back to login,

93
00:07:00.940 --> 00:07:04.220
and this should allow me to go through,
and it does.

94
00:07:05.600 --> 00:07:10.400
So there we go, this is using
a route hook to guard a route,

95
00:07:10.400 --> 00:07:14.770
to make it so that only under the right
conditions should a user get in.

