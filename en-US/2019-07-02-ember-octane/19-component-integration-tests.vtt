WEBVTT

1
00:00:00.380 --> 00:00:02.597
&gt;&gt; Mike: Let's check our tests
before we close out this section.

2
00:00:05.824 --> 00:00:07.524
&gt;&gt; Mike: I'm gonna hide the past tests.

3
00:00:07.524 --> 00:00:10.510
All right, let's see.

4
00:00:10.510 --> 00:00:12.860
Looks like a validation message.

5
00:00:12.860 --> 00:00:15.700
So we expected this
string here to show up.

6
00:00:15.700 --> 00:00:17.840
It was always on the screen.

7
00:00:17.840 --> 00:00:19.810
Now it's conditionally on the screen.

8
00:00:19.810 --> 00:00:24.320
I'm just gonna update my test for
now so that it passes by saying,

9
00:00:24.320 --> 00:00:26.500
initially rendered.

10
00:00:26.500 --> 00:00:28.030
You should not see that message.

11
00:00:28.030 --> 00:00:31.859
So we'll go to login-form-test and

12
00:00:31.859 --> 00:00:38.640
delete this last line here,
and everything should be good.

13
00:00:38.640 --> 00:00:40.405
Yep, there's my green bar up at the top.

14
00:00:40.405 --> 00:00:43.489
66 of 66 passed, we are good to go.

15
00:00:43.489 --> 00:00:45.121
So I'm gonna make a commit.

16
00:00:45.121 --> 00:00:49.033
And congratulations,
we have just completed step eight.

17
00:00:59.415 --> 00:01:03.190
&gt;&gt; Mike: Next thing we're gonna do is
write a more meaningful integration test.

18
00:01:04.440 --> 00:01:10.990
Imitating the process I went through
just now to validate that the login form

19
00:01:10.990 --> 00:01:16.250
works properly,
where we initially make sure

20
00:01:16.250 --> 00:01:21.130
the button's disabled, then pick a user,
then make sure the button is enabled.

21
00:01:21.130 --> 00:01:24.560
So we're gonna have to use
some of our test helpers here.

22
00:01:24.560 --> 00:01:26.339
I'm gonna leave this in place.

23
00:01:28.250 --> 00:01:32.800
We'll change the title of the test at
the end but I'll leave this as is.

24
00:01:32.800 --> 00:01:40.460
And what I'm gonna wanna do is,
effectively, input some data, right.

25
00:01:40.460 --> 00:01:44.165
If this were an input,
I would be filling in a value.

26
00:01:44.165 --> 00:01:46.001
And that is the test
helper we're going to use.

27
00:01:46.001 --> 00:01:47.494
It's called fillIn.

28
00:01:51.465 --> 00:01:56.076
&gt;&gt; Mike: I am then going to await fillIn,
and

29
00:01:56.076 --> 00:02:00.770
I'm gonna write a test selector.

30
00:02:00.770 --> 00:02:04.110
Let's see, it's probably gonna be
the only select component in there.

31
00:02:05.440 --> 00:02:08.950
So this is the equivalent of what you
would in a query selector, right?

32
00:02:08.950 --> 00:02:12.220
It could be a dot class or a hashtag ID.

33
00:02:12.220 --> 00:02:13.970
And then the value we're gonna fill in.

34
00:02:13.970 --> 00:02:18.260
And one, we've been checking, testing,
so it seems like we could use one or

35
00:02:18.260 --> 00:02:19.610
two here.

36
00:02:19.610 --> 00:02:23.555
And then, so up here I wanna

37
00:02:23.555 --> 00:02:28.548
assert,
&gt;&gt; Mike: Button is disabled,

38
00:02:28.548 --> 00:02:30.130
and down here it is enabled.

39
00:02:31.230 --> 00:02:34.750
So it seems like we need to
get a hold of this button, and

40
00:02:34.750 --> 00:02:37.030
the way we're gonna do that is find.

41
00:02:38.310 --> 00:02:43.110
This is like query selector, except that
it ensures that you don't accidentally

42
00:02:43.110 --> 00:02:47.960
pick up on parts of the test runner
UI itself, where there are inputs and

43
00:02:47.960 --> 00:02:50.010
there are dropdowns and things like that.

44
00:02:50.010 --> 00:02:52.950
So it's sort of a constrained
query selector.

45
00:02:52.950 --> 00:02:54.550
You can use it the same way.

46
00:02:54.550 --> 00:03:02.134
So up here I'll say,
let button = find('input[type="submit"]').

47
00:03:05.870 --> 00:03:08.230
And, let's see.

48
00:03:08.230 --> 00:03:10.927
We can then say,

49
00:03:10.927 --> 00:03:18.258
assert.equal(button.disabled); and

50
00:03:18.258 --> 00:03:23.268
we gotta give VS Code a clue that

51
00:03:23.268 --> 00:03:30.034
this value is of type HTML input element.

52
00:03:33.680 --> 00:03:36.458
&gt;&gt; Mike: So the way we're gonna do
that is this this comment here, and

53
00:03:36.458 --> 00:03:38.810
then we'll just sort of
wrap this in parentheses.

54
00:03:41.210 --> 00:03:44.620
And let's see, button,
did I do that right?

55
00:03:46.050 --> 00:03:46.910
Type equals submit.

56
00:03:49.210 --> 00:03:52.760
It disappeared my parentheses here, save.

57
00:03:54.250 --> 00:03:57.260
Interesting, Prettier is
wrestling against me.

58
00:03:57.260 --> 00:04:01.060
Sorry, my fault, type.

59
00:04:01.060 --> 00:04:05.064
So button.disabled should be true,
and then down here,

60
00:04:05.064 --> 00:04:07.605
button.disabled should be false.

61
00:04:13.917 --> 00:04:15.252
&gt;&gt; Mike: And let's check out our tests.

62
00:04:19.888 --> 00:04:20.985
&gt;&gt; Mike: Everything looks good.

63
00:04:20.985 --> 00:04:24.299
So this is a more meaningful
immigration test, and

64
00:04:24.299 --> 00:04:27.777
now we can assert that yes,
our derived state works.

65
00:04:29.517 --> 00:04:32.597
And we have just finished step nine.

