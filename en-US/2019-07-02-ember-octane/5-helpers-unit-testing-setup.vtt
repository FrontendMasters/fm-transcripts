WEBVTT

1
00:00:00.000 --> 00:00:04.929
&gt;&gt; Mike North: The next thing we're
gonna do is bring effectively a function

2
00:00:04.929 --> 00:00:06.644
into our templates.

3
00:00:06.644 --> 00:00:12.920
And the function we're interested in
right now is something to handle dates.

4
00:00:12.920 --> 00:00:16.088
So I wanna be able to provide
this function to date and

5
00:00:16.088 --> 00:00:20.848
I want it to be formatted the way I've
selected on the right side of the screen.

6
00:00:20.848 --> 00:00:22.898
In Ember, these are called Helpers.

7
00:00:22.898 --> 00:00:28.896
Helpers are these functions that
are usable from within our templates.

8
00:00:28.896 --> 00:00:33.312
In order to do this, and this is the way I
would do it where I'm building a real app.

9
00:00:33.312 --> 00:00:39.143
I first wanna get this functionality
the ability to format a date in this way.

10
00:00:39.143 --> 00:00:43.509
I wanna get that into my app
in a Vanilla JavaScript way.

11
00:00:43.509 --> 00:00:47.203
So we're gonna just create
a regular function that does this.

12
00:00:47.203 --> 00:00:50.430
And then we're gonna have
a thin Ember wrapper around it.

13
00:00:50.430 --> 00:00:52.235
Why do I decided to do it this way?

14
00:00:52.235 --> 00:00:58.344
Because if I ever need the same
utility in my JavaScript files,

15
00:00:58.344 --> 00:01:00.660
not just my templates.

16
00:01:00.660 --> 00:01:05.520
Now, I have a place where I can go and
grab that behavior in its simplest,

17
00:01:05.520 --> 00:01:06.970
most reusable form.

18
00:01:06.970 --> 00:01:10.169
It also makes it really easy to unit test.

19
00:01:10.169 --> 00:01:14.984
This is gonna be a pure function where the
return value is completely determined by

20
00:01:14.984 --> 00:01:17.304
what I give the function as arguments.

21
00:01:17.304 --> 00:01:22.609
So this is the ideal case for
unit testing.

22
00:01:22.609 --> 00:01:27.835
So what we're gonna do is we're
gonna use Ember CLI's code

23
00:01:27.835 --> 00:01:33.283
generation utilities to make
a file that Ember calls a a util.

24
00:01:33.283 --> 00:01:36.929
And this is just something that'll
end up in your utils folder.

25
00:01:36.929 --> 00:01:39.346
It's sort of free rein as to
what you wanna put there.

26
00:01:39.346 --> 00:01:44.291
But commonly this is where low level,
plain JavaScript code goes.

27
00:01:44.291 --> 00:01:47.843
So we're gonna run ember g or

28
00:01:47.843 --> 00:01:52.159
generate,
&gt;&gt; Mike North: Util date.

29
00:01:52.159 --> 00:01:59.415
So I'm gonna end up with a date.js
file in my app/utils folder.

30
00:01:59.415 --> 00:02:00.999
And this would be a great place for

31
00:02:00.999 --> 00:02:03.443
me to collect any functions
that pertain to dates.

32
00:02:05.611 --> 00:02:08.407
&gt;&gt; Mike North: Now,
since working with this date object and

33
00:02:08.407 --> 00:02:12.685
formatting it has nothing to do
with Ember, I've given this to you.

34
00:02:12.685 --> 00:02:17.613
So let's go back to our starter-files, and

35
00:02:17.613 --> 00:02:22.682
you'll see a date.js and a date-test.js.

36
00:02:22.682 --> 00:02:25.797
So take the contents
of those two files and

37
00:02:25.797 --> 00:02:29.895
put them in the two files that
Ember CLI created for us.

38
00:02:29.895 --> 00:02:37.747
You should see those in the output
of your Ember G Util date command.

39
00:02:37.747 --> 00:02:42.307
So I wanna grab date.js from
starter files, copy that.

40
00:02:42.307 --> 00:02:45.377
And go to my app/utils folder.

41
00:02:47.288 --> 00:02:48.642
&gt;&gt; Mike North: Paste that in.

42
00:02:50.393 --> 00:02:51.592
&gt;&gt; Mike North: And save.

43
00:02:51.592 --> 00:02:56.291
We see no update understandably, cuz
this is a function we haven't used yet.

44
00:02:56.291 --> 00:02:59.458
And then I'm gonna go back to
starter files, grab the tests.

45
00:02:59.458 --> 00:03:03.320
This is just a set of unit tests where
I'm trying various formats of date and

46
00:03:03.320 --> 00:03:06.217
making sure they're all
coming out in reasonable way.

47
00:03:06.217 --> 00:03:11.483
I'm gonna copy that and
then look at the Ember CLI

48
00:03:11.483 --> 00:03:17.559
output
&gt;&gt; Mike North: There it is,

49
00:03:17.559 --> 00:03:22.871
so it's tests, unit tests,
utils, and then date test.

50
00:03:22.871 --> 00:03:28.854
Someone replace the contents of
this file with my date tests.

51
00:03:28.854 --> 00:03:35.508
Now, Ember CLI has a test runner built in,
testing is included.

52
00:03:35.508 --> 00:03:39.984
By default you get two unit, but you can
swap that out if you prefer Mocha and

53
00:03:39.984 --> 00:03:42.490
swap that out with about a minute of work.

54
00:03:42.490 --> 00:03:48.069
You just remove the Ember QUnit package
and install Ember Mocha instead.

55
00:03:50.515 --> 00:03:55.265
&gt;&gt; Mike North: I kind of liked QUnit,
the biggest reason for

56
00:03:55.265 --> 00:04:01.640
that is Mocha's assertions
are driven by throwing errors.

57
00:04:01.640 --> 00:04:05.591
What this means is if you have six or
seven assertions in a test, and

58
00:04:05.591 --> 00:04:10.534
the first one fails, that'll terminate
your test early, and you don't get to see

59
00:04:10.534 --> 00:04:14.504
whether the rest of your assertions
in that test passed or failed.

60
00:04:14.504 --> 00:04:17.165
So it often means that you
have to make several passes.

61
00:04:17.165 --> 00:04:21.670
If many things are failing, you kinda
have to chip away and solve the first

62
00:04:21.670 --> 00:04:25.970
problem to reveal the second and
solve the second to reveal the third.

63
00:04:25.970 --> 00:04:30.438
QUnit doesn't behave this way, so
you get a complete run of your test suite,

64
00:04:30.438 --> 00:04:31.696
if that is possible.

65
00:04:31.696 --> 00:04:34.798
Obviously there are things you can do that
will make it impossible to finish your

66
00:04:34.798 --> 00:04:35.316
test suite.

67
00:04:35.316 --> 00:04:41.291
But you get more feedback and
you can fix things with fewer passes.

68
00:04:41.291 --> 00:04:47.263
So to view our tests,
we're gonna go to /tests,

69
00:04:47.263 --> 00:04:52.110
and we should see the QUnit test runner.

70
00:04:53.838 --> 00:04:55.678
&gt;&gt; Mike North: And there it is.

71
00:04:55.678 --> 00:04:58.186
So there's a lot of ESLint stuff here.

72
00:04:58.186 --> 00:05:01.593
This is linting presented to
you in the form of tests.

73
00:05:01.593 --> 00:05:05.919
I like to disable lintings, especially
when I'm doing something like this and

74
00:05:05.919 --> 00:05:07.868
I'm not so concerned about style.

75
00:05:07.868 --> 00:05:11.845
You can check this all of
those will disappear and

76
00:05:11.845 --> 00:05:15.151
we can see that everything looks green.

77
00:05:15.151 --> 00:05:20.824
If we open up this utility test,
these are the things that you pasted in.

78
00:05:20.824 --> 00:05:24.541
You can see that some of these have
nice labels, so we can get an idea for

79
00:05:24.541 --> 00:05:26.505
what we're actually testing here.

80
00:05:26.505 --> 00:05:28.650
And then these don't have labels so

81
00:05:28.650 --> 00:05:31.732
they're just saying here's
a generic thumbs up.

82
00:05:31.732 --> 00:05:35.815
We're gonna be returning
to this /test URL often.

83
00:05:37.916 --> 00:05:41.213
&gt;&gt; Mike North: In order to expose
this in our templates to make it so

84
00:05:41.213 --> 00:05:44.204
effectively we can use
this in our templates,

85
00:05:44.204 --> 00:05:47.902
we're going to need this helper
that I refer to earlier.

86
00:05:47.902 --> 00:05:54.091
And we'll reach again back to Ember CLI
in order to generate this helper.

87
00:05:54.091 --> 00:05:58.924
Ember generate helper

88
00:05:58.924 --> 00:06:07.762
format-timestamp
&gt;&gt; Mike North: And

89
00:06:07.762 --> 00:06:13.817
we'll see that two things were built for
us.

90
00:06:13.817 --> 00:06:17.927
Number one is this file in
the app/helper's folder.

91
00:06:17.927 --> 00:06:22.604
That is the helper and
along with it we get an integration test.

92
00:06:22.604 --> 00:06:27.129
So you'll see often when you
generate things using Ember CLI

93
00:06:27.129 --> 00:06:30.057
you'll get the thing you're after and

94
00:06:30.057 --> 00:06:34.681
a very basic passing test that
is ready for you to expand upon.

95
00:06:34.681 --> 00:06:36.717
So let's worry about the helper first.

96
00:06:38.271 --> 00:06:42.359
&gt;&gt; Mike North: I'm just gonna Cmd+click on
that or you can go and find the file and

97
00:06:42.359 --> 00:06:42.943
open it.

98
00:06:42.943 --> 00:06:49.969
And I'm gonna go back to the non-testing
part of our app, the real app here.

99
00:06:49.969 --> 00:06:56.346
And the way I wanna explore how this works
is I'm gonna put a debugger in here.

100
00:06:59.485 --> 00:07:04.775
&gt;&gt; Mike North: And then I'm gonna go to
application.hbs and I'm gonna use this

101
00:07:04.775 --> 00:07:10.654
helper, so that we can see how it
receives any data that we might pass it.

102
00:07:12.363 --> 00:07:17.580
&gt;&gt; Mike North: So I'll just put it
right below the channel header.

103
00:07:17.580 --> 00:07:22.668
And here's how it looks, it's a handlebars
expression, format-timestamp,

104
00:07:22.668 --> 00:07:27.623
and the VS code extension is helping
us again, affording those misspellings.

105
00:07:27.623 --> 00:07:30.189
And we're gonna pass it a date.

106
00:07:30.189 --> 00:07:33.999
This is me sort of stating
how I want to use this thing,

107
00:07:33.999 --> 00:07:38.162
and we'll flesh out how exactly
it will end up being used.

108
00:07:38.162 --> 00:07:44.962
So let's try 05-01-2019.

109
00:07:46.792 --> 00:07:52.185
&gt;&gt; Mike North: So right now what's
happening is we sort of see the same

110
00:07:52.185 --> 00:07:57.118
value we gave this helper
pass straight through.

111
00:07:57.118 --> 00:08:01.166
And if we go back to the helper,
it kinda makes sense.

112
00:08:04.789 --> 00:08:06.902
&gt;&gt; Mike North: Going back
to format time stamp.

113
00:08:06.902 --> 00:08:12.840
You can see that we get this argument
params and we return params.

114
00:08:12.840 --> 00:08:18.227
So I'm gonna pop open my dev tools, and
I wanna take a look at what is params?

115
00:08:18.227 --> 00:08:23.455
So I just refreshed and we stopped at
the debugger, and if I hover over params.

116
00:08:23.455 --> 00:08:27.083
So this is, as the tool tip indicates,
it's an array.

117
00:08:27.083 --> 00:08:30.367
And the first element of the array
is the string that I passed in.

118
00:08:30.367 --> 00:08:32.936
And this is how things work when you

119
00:08:32.936 --> 00:08:37.549
pass positional arguments to
a helper in the way that we have.

120
00:08:37.549 --> 00:08:40.859
So if we went to application.hbs and

121
00:08:40.859 --> 00:08:46.105
we passed another thing here like foo,
and then refresh.

122
00:08:47.157 --> 00:08:48.879
&gt;&gt; Mike North: Now, we can see that
our array contains two things.

123
00:08:48.879 --> 00:08:51.080
So they're in the same order,
left to right.

124
00:08:53.693 --> 00:08:58.015
&gt;&gt; Mike North: We could also
pass key value pairs like this,

125
00:08:58.015 --> 00:09:01.776
bar = "foo", something like that.

126
00:09:01.776 --> 00:09:05.718
It's the second argument
that a helper receives, or

127
00:09:05.718 --> 00:09:10.725
will see those key value pairs showing up,
and that is called hash.

128
00:09:10.725 --> 00:09:15.882
So if we uncomment that,
&gt;&gt; Mike North: And

129
00:09:15.882 --> 00:09:18.411
play through,
&gt;&gt; Mike North: And

130
00:09:18.411 --> 00:09:22.492
hover over hash,
&gt;&gt; Mike North: There we go,

131
00:09:22.492 --> 00:09:25.161
it's an object, bar = "foo".

132
00:09:25.161 --> 00:09:28.808
So you can mix and
match these as you see fit.

133
00:09:28.808 --> 00:09:31.355
In this case,
we don't really care about hash.

134
00:09:31.355 --> 00:09:36.756
We just care about passing
something dateIsh.

135
00:09:36.756 --> 00:09:39.451
Let me close some of us
to get out of the way.

136
00:09:39.451 --> 00:09:42.766
We just wanna pass
something dateIsh to this.

137
00:09:42.766 --> 00:09:46.255
And,
&gt;&gt; Mike North: Let our utility function

138
00:09:46.255 --> 00:09:46.906
handle it.

139
00:09:46.906 --> 00:09:50.190
So we don't need this,
&gt;&gt; Mike North: And

140
00:09:50.190 --> 00:09:54.828
we don't need our debugger anymore cuz
we kinda understand how this works.

141
00:09:54.828 --> 00:10:02.325
So the argument of importance
is the first thing in params.

142
00:10:03.691 --> 00:10:06.952
&gt;&gt; Mike North: And
I'm gonna just call it dateIsh.

143
00:10:06.952 --> 00:10:11.023
This is using the structuring to grab
the zero element out of the array.

144
00:10:11.023 --> 00:10:16.208
You could also have done
dateIsh = params 0, and

145
00:10:16.208 --> 00:10:21.397
then we want to pass it to
whatever is in date.js.

146
00:10:21.397 --> 00:10:24.592
And it looks like the name of
this function is dateToString.

147
00:10:31.566 --> 00:10:38.122
&gt;&gt; Mike North: So what you need to do,
and this is more VS code magic here.

148
00:10:38.122 --> 00:10:41.991
So VS code will automatically
import the module for me and

149
00:10:41.991 --> 00:10:46.585
it'll wire everything up correctly,
because I've exported this

150
00:10:46.585 --> 00:10:50.949
properly from the sample code
that I gave you the date.js code.

151
00:10:50.949 --> 00:10:55.725
But if you were to do this manually,
you would import dateToString.

152
00:10:55.725 --> 00:11:00.903
And now we can pass dateIsh
as the argument to that.

153
00:11:00.903 --> 00:11:05.074
And we're gonna return,
&gt;&gt; Mike North: And

154
00:11:05.074 --> 00:11:08.229
we should be in good shape once we resume.

155
00:11:12.338 --> 00:11:14.451
&gt;&gt; Mike North: And there we go,
so it's the same date.

156
00:11:14.451 --> 00:11:19.329
It's still May 1st, but
it has this format that kinda matches what

157
00:11:19.329 --> 00:11:22.593
we're seeing in the HTML
that we were given.

