WEBVTT

1
00:00:00.000 --> 00:00:08.088
&gt;&gt; Mike North: One thing that is a little
bit interesting here is we are using,

2
00:00:08.088 --> 00:00:12.209
as we run through our tests, and

3
00:00:12.209 --> 00:00:18.405
as we go through in
particular the log in test.

4
00:00:18.405 --> 00:00:22.668
Wrong log in test,
&gt;&gt; Mike North: Yeah,

5
00:00:22.668 --> 00:00:25.030
the logout test, let's look at this one.

6
00:00:25.030 --> 00:00:29.930
So if we go through this logout test which
we wrote earlier where we start on teams

7
00:00:29.930 --> 00:00:33.090
and we click on the logout button and

8
00:00:33.090 --> 00:00:39.100
we find ourselves at the log in screen,
presumably unauthenticated at that point.

9
00:00:39.100 --> 00:00:43.190
We're going to run into a problem
in the very near future and

10
00:00:43.190 --> 00:00:47.210
that problem has to do with the fact
that as we run through the tests,

11
00:00:47.210 --> 00:00:52.690
the tests are actually reading from and
writing to your local storage.

12
00:00:52.690 --> 00:00:57.220
It would be really annoying for
us if we started to build on this without

13
00:00:57.220 --> 00:01:02.380
addressing the problem there because
you could basically start logged in and

14
00:01:02.380 --> 00:01:06.190
then as soon as you run your test,
find yourself very quickly logged out.

15
00:01:06.190 --> 00:01:09.280
Because you've gone through this test and
it's clicked the log out button and

16
00:01:09.280 --> 00:01:12.030
that really writes to local storage.

17
00:01:12.030 --> 00:01:17.520
So what we need to do is create
a service that looks very similar

18
00:01:17.520 --> 00:01:22.960
to the off service and
to kinda stub that in during testing so

19
00:01:22.960 --> 00:01:26.250
that no interaction with
local storage is happening.

20
00:01:28.120 --> 00:01:30.343
And it's not too bad to do this.

21
00:01:30.343 --> 00:01:34.301
So I do anticipate we're gonna
need it in a couple of places so

22
00:01:34.301 --> 00:01:38.380
I'm gonna define this mock
service in another file.

23
00:01:38.380 --> 00:01:42.420
And then I'll show you how to install it
in a test like this to ensure that this

24
00:01:42.420 --> 00:01:45.360
isn't something that'll sting
us as we start moving forward.

25
00:01:46.520 --> 00:01:51.999
So in my test folder I'm
just gonna create a new

26
00:01:51.999 --> 00:01:57.338
folder that stubs and
I'm gonna create a file

27
00:01:57.338 --> 00:02:02.270
in there that's called auth-service.

28
00:02:05.679 --> 00:02:07.958
&gt;&gt; Mike North: In here I'm gonna
import the same service base class.

29
00:02:12.065 --> 00:02:13.071
&gt;&gt; Mike North: And,

30
00:02:17.172 --> 00:02:22.578
&gt;&gt; Mike North: We're gonna export class

31
00:02:24.298 --> 00:02:32.250
auth service, extends service.

32
00:02:32.250 --> 00:02:34.890
And we need login with user ID.

33
00:02:37.010 --> 00:02:40.260
I'm remembering what our
old service looked like.

34
00:02:40.260 --> 00:02:44.490
In fact, I'm gonna open it just to
make things as easy as possible so

35
00:02:44.490 --> 00:02:46.150
we can look at them side by side.

36
00:02:46.150 --> 00:02:51.780
So I need current user ID, I need that
to be a property I can at least access.

37
00:02:51.780 --> 00:02:56.500
So for now,
&gt;&gt; Mike North: We'll just make it

38
00:02:56.500 --> 00:02:59.712
a value-based property,
login with current user ID.

39
00:02:59.712 --> 00:03:08.064
We can just do something like this,
&gt;&gt; Mike North: Right?

40
00:03:08.064 --> 00:03:10.258
We're not writing to
local storage anymore,

41
00:03:10.258 --> 00:03:12.290
we're just holding this as a class field.

42
00:03:12.290 --> 00:03:16.120
It's very disposable,
not gonna effect anything else.

43
00:03:16.120 --> 00:03:19.220
And then we need the router so
I'll just grab this and

44
00:03:19.220 --> 00:03:21.750
we can inject the real router service.

45
00:03:21.750 --> 00:03:26.010
We are totally fine with a real
transition to another URL.

46
00:03:26.010 --> 00:03:28.930
It's the state that creates problems for
us.

47
00:03:28.930 --> 00:03:29.800
So I just copied and

48
00:03:29.800 --> 00:03:34.880
pasted this piece of code here where
we're injecting the router service.

49
00:03:34.880 --> 00:03:37.670
And I'm just gonna grab
the related imports necessary to

50
00:03:37.670 --> 00:03:41.670
support that piece of code and
paste them up here.

51
00:03:43.380 --> 00:03:49.420
And we have a very simple service here.

52
00:03:49.420 --> 00:03:51.270
You can imagine once
we get to logging out,

53
00:03:51.270 --> 00:03:54.900
it'd be very easy to clear
that current user ID, right?

54
00:03:54.900 --> 00:03:58.910
It's all very nice and
self-contained and disposable.

55
00:03:58.910 --> 00:04:03.980
So now that we have this,
we simply need to wire it up in our test.

56
00:04:03.980 --> 00:04:08.800
So that before each of our
tests starts running, we

57
00:04:09.850 --> 00:04:16.260
install this mock object as
the service you get when you want off.

58
00:04:16.260 --> 00:04:18.530
So you get this instead of the real one.

59
00:04:19.580 --> 00:04:21.900
Here's how we're going to do that.

60
00:04:21.900 --> 00:04:26.700
We're going to use Q units hook,
it's called before each.

61
00:04:28.010 --> 00:04:31.910
And I'm just gonna show you we have
before and after so that's like for

62
00:04:31.910 --> 00:04:34.550
your whole module of tests, right?

63
00:04:34.550 --> 00:04:39.410
So that before and after it would be for
everything contained within this module.

64
00:04:39.410 --> 00:04:41.770
Before each it's gonna be before and

65
00:04:41.770 --> 00:04:44.809
after each of these many tests
that you may have in there.

66
00:04:46.820 --> 00:04:50.930
And I want each test to get a clean
service so I don't have to worry about-

67
00:04:52.540 --> 00:04:58.330
A much more cumbersome approach could be,
read the current state of local storage.

68
00:04:58.330 --> 00:05:02.490
Now set it to null, now run through
the test, now restore that previous state.

69
00:05:02.490 --> 00:05:04.150
It sounds like a lot of shuffling.

70
00:05:04.150 --> 00:05:07.530
And if anything goes wrong and I never
reach that clean up phase at the end

71
00:05:07.530 --> 00:05:11.060
I can't rely on any subsequent
test results being valid.

72
00:05:11.060 --> 00:05:14.360
This much easier, it's nice and
self-contained and disposable.

73
00:05:14.360 --> 00:05:15.270
Before each and

74
00:05:15.270 --> 00:05:20.710
we're gonna pass in a function to
run that's sort of a per test setup.

75
00:05:21.800 --> 00:05:24.474
And we're gonna go this.owner,

76
00:05:24.474 --> 00:05:29.820
which is an object you can think of
this is like your application, right?

77
00:05:29.820 --> 00:05:33.290
So this that you customize the app
before you kick the test off.

78
00:05:34.360 --> 00:05:39.179
This owner register, and
we're gonna register a service

79
00:05:40.620 --> 00:05:46.100
and provide it with a constructor,
and there we go.

80
00:05:46.100 --> 00:05:47.220
That is all we need to do.

81
00:05:48.810 --> 00:05:52.865
This owner register, and
we're registering a service, and

82
00:05:52.865 --> 00:05:56.484
here is the class for
the service we wish to use.

83
00:05:56.484 --> 00:06:00.700
I'm gonna save this, and our tests run
successfully, and I wanna set a break

84
00:06:00.700 --> 00:06:07.460
point in here, so we can confirm that
we are in fact stopping at this.

85
00:06:07.460 --> 00:06:09.250
Looks like we may not be.

86
00:06:09.250 --> 00:06:11.630
Let's see, loginWithUserId.

87
00:06:15.064 --> 00:06:19.340
&gt;&gt; Speaker 2: You're on the log out test,
the log in test.

88
00:06:19.340 --> 00:06:22.950
You haven't used that
service to log out yet.

89
00:06:22.950 --> 00:06:27.710
&gt;&gt; Mike North: We should be using it to
log in though, let me just think here for

90
00:06:27.710 --> 00:06:31.600
a moment, okay.

91
00:06:31.600 --> 00:06:34.966
&gt;&gt; Speaker 2: We didn't write any
test actually log in, we just changed

92
00:06:34.966 --> 00:06:39.103
the value of the user we're going to
use and check [CROSSTALK] disabled.

93
00:06:39.103 --> 00:06:43.905
&gt;&gt; Mike North: Got it okay, okay so
it's gonna be hard to verify this for now.

94
00:06:43.905 --> 00:06:49.890
I do wanna kinda prove
to ourselves this works.

95
00:06:51.130 --> 00:06:52.780
Trying to think of a quick and
easy way to do it.

96
00:06:52.780 --> 00:06:53.600
&gt;&gt; Speaker 3: The button?

97
00:06:55.120 --> 00:06:56.470
&gt;&gt; Mike North: Yeah, I could.

98
00:06:58.200 --> 00:07:00.450
I'll use our pause test helper.

99
00:07:00.450 --> 00:07:04.169
So I can pause in
the middle of this test and

100
00:07:04.169 --> 00:07:09.283
I will there is nothing that calls,
yeah that will work.

101
00:07:09.283 --> 00:07:16.098
So pause test, all right so
here is our little mini app,

102
00:07:16.098 --> 00:07:21.049
I'm gonna log out,
&gt;&gt; Mike North: And,

103
00:07:22.662 --> 00:07:24.038
&gt;&gt; Mike North: Here we are at the login

104
00:07:24.038 --> 00:07:24.620
screen.

105
00:07:24.620 --> 00:07:28.950
I'm gonna select a user, sign in,
and we are at our break point and

106
00:07:28.950 --> 00:07:32.740
that break point is in
our mock auth service.

107
00:07:32.740 --> 00:07:39.140
So this is proof that our little bait and
switch thing was successful.

108
00:07:39.140 --> 00:07:44.280
So we've kinda stubbed out at a very
reasonable point this AuthService.

109
00:07:44.280 --> 00:07:49.200
And I'm, in general,
very against, stubbing in tests.

110
00:07:49.200 --> 00:07:54.830
I think that especially if you're
trying to stub the date constructor or

111
00:07:54.830 --> 00:07:58.550
require which people differ for
wacky reasons.

112
00:07:58.550 --> 00:08:01.140
This can be very difficult
code to maintain.

113
00:08:01.140 --> 00:08:05.250
But for a service where it has a very
well-defined boundary, and it's a nice

114
00:08:05.250 --> 00:08:11.410
encapsulated particular concern,
this is the the best approach to use.

115
00:08:12.790 --> 00:08:14.165
&gt;&gt; Speaker 4: I recently
did something like this for

116
00:08:14.165 --> 00:08:17.900
I had local storage as
a prime data storage.

117
00:08:17.900 --> 00:08:24.070
And, I just changed the key, I prepended
it with a testing at that variable.

118
00:08:24.070 --> 00:08:26.880
&gt;&gt; Mike North: But you're still
contaminating the real local storage.

119
00:08:26.880 --> 00:08:28.310
&gt;&gt; Speaker 4: I know.

120
00:08:28.310 --> 00:08:29.400
&gt;&gt; Mike North: Between tests,

121
00:08:29.400 --> 00:08:34.600
what assurance could you have that 100%
of your local storage was removed?

122
00:08:34.600 --> 00:08:36.268
&gt;&gt; Speaker 4: Do a-
&gt;&gt; Mike North: Iteration through

123
00:08:36.268 --> 00:08:38.550
[CROSSTALK]
&gt;&gt; Speaker 4: And clear local storage.

124
00:08:38.550 --> 00:08:42.780
&gt;&gt; Mike North: But now a developer
comes along that mistypes something.

125
00:08:42.780 --> 00:08:48.660
There is some human diligence required for
that to be a successful approach.

126
00:08:48.660 --> 00:08:53.812
Whereas if you had written an abstraction,
a local storage service with a read and

127
00:08:53.812 --> 00:08:59.038
a write method, and instead of actually
reading and writing to local storage you,

128
00:08:59.038 --> 00:09:03.240
that was like the single place your
access is local storage stuff.

129
00:09:03.240 --> 00:09:06.923
You could swap it out and
just hold some stuff in memory and

130
00:09:06.923 --> 00:09:09.780
validate that everything works properly.

131
00:09:09.780 --> 00:09:11.960
You access that memory really quickly.

132
00:09:11.960 --> 00:09:16.912
There's no chance even with a slip
in human diligence that that would

133
00:09:16.912 --> 00:09:21.869
cause problems.

134
00:09:21.869 --> 00:09:24.760
So before we take a quick
little break here,

135
00:09:24.760 --> 00:09:28.550
I do wanna point out that there's
another approach that kind of makes

136
00:09:28.550 --> 00:09:33.200
not a twist on this approach that
sometimes makes a lot of sense.

137
00:09:33.200 --> 00:09:38.740
We could have very well
subclassed the real service.

138
00:09:38.740 --> 00:09:42.260
So if I in my auth service I had
like read from local storage,

139
00:09:42.260 --> 00:09:45.130
write to local storage,
I had those methods.

140
00:09:45.130 --> 00:09:49.980
I could have subclassed the real auth
service, and only replaced those read and

141
00:09:49.980 --> 00:09:54.790
write methods, and that way,
if I added more stuff here that

142
00:09:54.790 --> 00:10:00.196
depends on local storage state,
I don't have to keep updating this mark.

143
00:10:00.196 --> 00:10:01.900
This is sorta the most basic way to do it,

144
00:10:01.900 --> 00:10:05.490
but that that is often a logical
extension of this technique.

