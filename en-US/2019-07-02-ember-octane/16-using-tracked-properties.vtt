WEBVTT

1
00:00:00.000 --> 00:00:02.266
&gt;&gt; Mike: Let's render that on the screen.

2
00:00:02.266 --> 00:00:06.261
So you might notice at the bottom
here we've got a validation message.

3
00:00:06.261 --> 00:00:08.549
So we're not gonna really use this for
validation,

4
00:00:08.549 --> 00:00:10.637
although we'll call it
a validation message.

5
00:00:10.637 --> 00:00:14.683
I'm just gonna tell the user which
user ID they're logging in as, and

6
00:00:14.683 --> 00:00:16.617
we would do it the following way.

7
00:00:18.267 --> 00:00:24.944
&gt;&gt; Mike: this.usderId,
only on the initial render

8
00:00:24.944 --> 00:00:30.470
are we seeing the correct result.

9
00:00:30.470 --> 00:00:37.030
So if I were to change this,
we'll see userId 1, we'll see userId 2.

10
00:00:37.030 --> 00:00:40.370
Let's see what happens here,
userId of null.

11
00:00:40.370 --> 00:00:46.040
So as long as I'm driving things from the
userId property, everything looks good.

12
00:00:46.040 --> 00:00:51.350
Unfortunately, it seems that when I
change things, we're out of luck.

13
00:00:51.350 --> 00:00:54.710
And this is because we have
one-way data binding by default.

14
00:00:56.200 --> 00:01:00.270
Previous versions of Ember heavily
emphasize two-way data binding,

15
00:01:00.270 --> 00:01:03.049
where we would have sort
of connected this userId

16
00:01:03.049 --> 00:01:05.848
property to the thing
that's manipulating it.

17
00:01:05.848 --> 00:01:09.156
And not only is it used to
initially set it up, but

18
00:01:09.156 --> 00:01:11.660
anytime you would alter the select,

19
00:01:11.660 --> 00:01:16.699
it would sort of push a change back out
to the property that it was bound to.

20
00:01:16.699 --> 00:01:21.427
This is not a path that leads
to well-performing apps, so

21
00:01:21.427 --> 00:01:24.328
we have one-way data binding now.

22
00:01:24.328 --> 00:01:28.346
And we have to be a little bit more
deliberate about opting in to keeping

23
00:01:28.346 --> 00:01:29.690
things in sync.

24
00:01:29.690 --> 00:01:33.834
And the way weâ€™re going to do this
is through listening to a DOM event,

25
00:01:33.834 --> 00:01:35.603
how did we do that with a form?

26
00:01:35.603 --> 00:01:39.278
We used a modifier,
anyone remember the name?

27
00:01:39.278 --> 00:01:40.442
&gt;&gt; Speaker 2: On.

28
00:01:40.442 --> 00:01:45.142
&gt;&gt; Mike: On modifier, thank you,
so we'll say on "change",

29
00:01:45.142 --> 00:01:49.348
that's a good DOM event to
listen to in this case.

30
00:01:49.348 --> 00:01:55.168
And I'm going to invoke a function,
onSelectChanged.

31
00:01:58.451 --> 00:02:04.968
&gt;&gt; Mike: So we get an error because
undefined is not a valid callback.

32
00:02:04.968 --> 00:02:08.927
That's giving us a clue that
onSelectChanged has not been defined

33
00:02:08.927 --> 00:02:09.779
yet, right?

34
00:02:09.779 --> 00:02:11.735
It needs this to be a function,
so let's make it one.

35
00:02:15.806 --> 00:02:19.242
&gt;&gt; Mike: We already learned our lesson
when it came to using action, so

36
00:02:19.242 --> 00:02:21.564
we'll just use that from the start here.

37
00:02:21.564 --> 00:02:27.531
onSelectChanged, and
this is going to receive a DOM event.

38
00:02:27.531 --> 00:02:32.300
Oops, sorry, I put this between the
comment and the code of the next one here.

39
00:02:36.126 --> 00:02:39.490
&gt;&gt; Mike: Yeah, sorry, I just inserted
that in the wrong place, but

40
00:02:39.490 --> 00:02:42.605
we're good to go now, and
this will receive an event.

41
00:02:42.605 --> 00:02:46.818
And for those of you who would
like some nice autocomplete stuff,

42
00:02:46.818 --> 00:02:48.971
you would say, this is an event.

43
00:02:48.971 --> 00:02:57.609
And also,
its target is an HTMLSelectElement.

44
00:03:02.513 --> 00:03:08.513
&gt;&gt; Mike: And now, aside from the fact
that we're not clearing our log every

45
00:03:08.513 --> 00:03:15.820
time we load up, we should see that things
are kinda looking a little bit better.

46
00:03:15.820 --> 00:03:20.620
Our on modifier's not throwing as we
first render this template, that's great.

47
00:03:20.620 --> 00:03:26.220
No errors on changing, we certainly
don't see the data being updated, right?

48
00:03:26.220 --> 00:03:31.732
We should see something down here,
like userId 1,

49
00:03:31.732 --> 00:03:36.385
userId 2, so we need to mutate this state.

50
00:03:36.385 --> 00:03:38.041
In older versions of Ember,

51
00:03:38.041 --> 00:03:41.422
you would have used what to
change the value of a property?

52
00:03:44.264 --> 00:03:45.657
&gt;&gt; Mike: Come on, some of you know this.

53
00:03:45.657 --> 00:03:46.269
&gt;&gt; Speaker 2: this.set?

54
00:03:46.269 --> 00:03:49.874
&gt;&gt; Mike: this.set, thank goodness
we don't have to use that here.

55
00:03:49.874 --> 00:03:54.285
All we have to do is vanilla JavaScript,

56
00:03:54.285 --> 00:04:00.010
this.userId =, and
it's gonna be the DOM event.

57
00:04:00.010 --> 00:04:07.300
Actually, its target, which is
a HTMLSelectElement, and that has a value.

58
00:04:07.300 --> 00:04:12.284
I love these JS dot comments,
I don't have to look up documentation,

59
00:04:12.284 --> 00:04:13.898
it's just all there.

60
00:04:13.898 --> 00:04:17.591
Awesome, and
let me just check what is happening here.

61
00:04:17.591 --> 00:04:20.738
So now I hope this works, but

62
00:04:20.738 --> 00:04:26.140
it's not going to, so we can change this.

63
00:04:26.140 --> 00:04:30.680
Okay, now we're getting a big error,
it's a very descriptive error.

64
00:04:30.680 --> 00:04:36.230
So we attempted to change userId to 1,

65
00:04:36.230 --> 00:04:42.310
but it's being tracked by a tracking
context, such as a template.

66
00:04:42.310 --> 00:04:47.410
So let me translate this a little bit,
we tried to set userId to something,

67
00:04:47.410 --> 00:04:49.950
but it's being used in a template.

68
00:04:49.950 --> 00:04:56.390
And we have not indicated that
this should be a tracked property.

69
00:04:56.390 --> 00:05:01.103
This is where we see
that we need to opt in to

70
00:05:01.103 --> 00:05:05.831
mutations in data causing HTML changes.

71
00:05:05.831 --> 00:05:09.445
That's an opt-in situation here,
it doesn't happen by default.

72
00:05:09.445 --> 00:05:13.412
So we tried to set userId to 1,
it's being used in a template, or

73
00:05:13.412 --> 00:05:17.326
a computed property, or observer,
but a template in our case.

74
00:05:17.326 --> 00:05:21.102
We're not gonna deal with those
other concepts at all today.

75
00:05:21.102 --> 00:05:25.232
In order to make sure that
everything updates properly,

76
00:05:25.232 --> 00:05:28.940
you should mark the property as tracked or
use set.

77
00:05:28.940 --> 00:05:32.646
But we're not gonna use set, we're going
to use tracked, it's another decorator.

78
00:05:32.646 --> 00:05:37.473
And this is all we need to do in order
to make sure that everything downstream,

79
00:05:37.473 --> 00:05:42.380
everything that depends on this.userId
will automatically update whenever

80
00:05:42.380 --> 00:05:43.512
userId changes.

81
00:05:46.730 --> 00:05:49.747
&gt;&gt; Mike: So tracked, and
we're gonna import this,

82
00:05:52.523 --> 00:05:54.511
&gt;&gt; Mike: From glimmer/tracking.

83
00:05:57.854 --> 00:06:02.628
&gt;&gt; Mike: Two Ms,
let's clear our console, reload, okay,

84
00:06:02.628 --> 00:06:06.763
no errors on load, and
let's select a user.

85
00:06:06.763 --> 00:06:11.228
Hey, there we go, logging in as userId 1,

86
00:06:11.228 --> 00:06:15.110
userId 2, back to null, back to 1.

87
00:06:15.110 --> 00:06:17.890
Now everything is kept in sync, so

88
00:06:17.890 --> 00:06:22.050
here are the moving parts just to recap,
we're listening for a DOM event.

89
00:06:23.290 --> 00:06:28.366
When that DOM event is fired,
we're just using vanilla

90
00:06:28.366 --> 00:06:32.910
JavaScript right here to
give userId a new value.

91
00:06:34.770 --> 00:06:40.250
And in order to make that work, all we
had to do was mark userId as tracked.

92
00:06:40.250 --> 00:06:42.820
Now, if we weren't using
userId in a template,

93
00:06:42.820 --> 00:06:45.360
we could have freely
manipulated this thing.

94
00:06:45.360 --> 00:06:48.880
It's the fact that it's being used
in a template that makes it so

95
00:06:48.880 --> 00:06:52.480
we have to track it if
we want to change it.

96
00:06:54.390 --> 00:06:59.758
But if it were just some private thing,
maybe like, anyone here use setTimeout?

97
00:06:59.758 --> 00:07:02.393
Use whatever returns, and
you have to clearTimeout,

98
00:07:02.393 --> 00:07:03.832
make sure that you cancel it.

99
00:07:03.832 --> 00:07:07.136
So that would be a thing you
would never ever render, but

100
00:07:07.136 --> 00:07:10.456
you'd want to keep track of it,
so not a tracked thing.

101
00:07:13.497 --> 00:07:14.427
&gt;&gt; Speaker 2: Mike?
&gt;&gt; Mike: Yes?

102
00:07:14.427 --> 00:07:18.363
&gt;&gt; Speaker 2: Still use the mute helper
as opposed to using a function for

103
00:07:18.363 --> 00:07:21.349
literally just changing a value like that?

104
00:07:21.349 --> 00:07:27.299
&gt;&gt; Mike: Good question, so
the mute helper, it appears to generate

105
00:07:27.299 --> 00:07:33.490
a function that will update
a particular value when invoked.

106
00:07:33.490 --> 00:07:37.752
The problem is we have a little
bit of a missing piece,

107
00:07:37.752 --> 00:07:41.273
and third-party libraries can make this.

108
00:07:41.273 --> 00:07:44.305
I'm not gonna say legacy, but

109
00:07:44.305 --> 00:07:49.669
the action helper that is not
part of Ember Octane is not

110
00:07:49.669 --> 00:07:55.278
really the path forward in
terms of handling DOM events.

111
00:07:55.278 --> 00:07:59.262
That had an ability to do this,
to take the event and

112
00:07:59.262 --> 00:08:02.134
to grab a property off of that event,

113
00:08:02.134 --> 00:08:06.952
to reach into the event's target,
and reach into its value,

114
00:08:06.952 --> 00:08:11.886
and get the new attribute or
the new property of the select tag.

115
00:08:11.886 --> 00:08:14.465
We don't have that with the on modifier,
so

116
00:08:14.465 --> 00:08:18.102
this is why I'm choosing to
bring this into JavaScript land.

117
00:08:18.102 --> 00:08:22.258
I don't have that way of saying,
yeah, update the value of userId, but

118
00:08:22.258 --> 00:08:26.040
I don't want to update its
value to the whole DOM event.

119
00:08:26.040 --> 00:08:30.130
I want a subpart of it, so
that is why I've made this choice.

120
00:08:30.130 --> 00:08:35.300
I'm gonna use this userId in
a different way, I'm gonna use it in

121
00:08:35.300 --> 00:08:40.665
order to determine whether the form
should be enabled or disabled.

122
00:08:40.665 --> 00:08:44.277
So in what situation should
we disable the form?

123
00:08:44.277 --> 00:08:46.004
If it's-
&gt;&gt; Speaker 3: Nothing selected.

124
00:08:46.004 --> 00:08:48.732
&gt;&gt; Mike: Nothing selected,
I'm gonna pick that one, so

125
00:08:48.732 --> 00:08:51.137
we need to create a piece
of derived state.

126
00:08:51.137 --> 00:08:55.006
And when I say this, I want you to think,
everyone's used a spreadsheet

127
00:08:55.006 --> 00:08:59.269
before probably, this is a spreadsheet
cell that contains a formula, right?

128
00:08:59.269 --> 00:09:03.450
It's something whose value depends
on other values, and in formulas and

129
00:09:03.450 --> 00:09:05.885
spreadsheets, you could have literals.

130
00:09:05.885 --> 00:09:09.052
You could say six plus
the value of this other cell,

131
00:09:09.052 --> 00:09:13.188
it doesn't have to exclusively
depend on only other properties.

132
00:09:13.188 --> 00:09:17.349
It can have some of its own, but
that's sort of what defines it, and

133
00:09:17.349 --> 00:09:19.766
here's how we do this in Ember Octane.

134
00:09:19.766 --> 00:09:24.336
We use a JavaScript getter,
this is something that's been around for

135
00:09:24.336 --> 00:09:25.502
a very long time.

136
00:09:25.502 --> 00:09:30.952
It was part of IE, sorry,
part of ECMAScript 5.1,

137
00:09:30.952 --> 00:09:37.354
I think, just like the IE9 and
10 variant, get isDisabled.

138
00:09:40.937 --> 00:09:44.970
&gt;&gt; Mike: And all we need to do here is,
so it's yelling at us,

139
00:09:44.970 --> 00:09:50.200
VS Code's yelling at us cuz we
have to return something here.

140
00:09:50.200 --> 00:09:54.760
So we're defining a property
whose value is determined by

141
00:09:54.760 --> 00:09:56.350
whatever this function returns.

142
00:09:56.350 --> 00:10:01.114
It's not a value-based property,
it's an accessor-based property,

143
00:10:01.114 --> 00:10:03.843
where the accessor describes this thing.

144
00:10:03.843 --> 00:10:09.458
It's a function that determines how
we access this property's value,

145
00:10:09.458 --> 00:10:12.781
and so
it should be true if userId is false.

146
00:10:15.987 --> 00:10:19.666
&gt;&gt; Mike: I think that is the right
way to express that, and we're done.

147
00:10:19.666 --> 00:10:24.070
This doesn't need to be tracked,
it's just ready to go.

