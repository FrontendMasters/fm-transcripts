WEBVTT

1
00:00:00.090 --> 00:00:06.290
&gt;&gt; Mike North: The next thing we're going
to do is add some state to our login form

2
00:00:06.290 --> 00:00:12.890
component, right, some state that
this component holds and manages.

3
00:00:12.890 --> 00:00:17.630
And what we're gonna do
with this is rather than,

4
00:00:17.630 --> 00:00:21.220
I'm just gonna up
the components JavaScript file,

5
00:00:21.220 --> 00:00:26.830
login form JS,
rather than when this submit event fires,

6
00:00:26.830 --> 00:00:31.444
doing some DOM querying and
plucking a value out of select.

7
00:00:31.444 --> 00:00:34.910
We wanna maintain a value
that's always up to date,

8
00:00:34.910 --> 00:00:40.450
that lets us get a hold of
the currently selected user's ID.

9
00:00:40.450 --> 00:00:40.995
Right, so

10
00:00:40.995 --> 00:00:46.640
if I were to go into the login screen,
&gt;&gt; Mike North: As I change from user to

11
00:00:46.640 --> 00:00:54.060
user, we wanna have some component state
that is kept up-to-date, UserId1, UserId2.

12
00:00:54.060 --> 00:00:58.900
And based on that, we wanna disable or
enable this Sign In button.

13
00:00:58.900 --> 00:01:04.150
You shouldn't be able to log in if
you have not yet selected a user, so

14
00:01:05.460 --> 00:01:08.030
let's get started with that.

15
00:01:08.030 --> 00:01:14.070
I'm in the login form component and
the first thing I wanna do is

16
00:01:14.070 --> 00:01:18.990
create a new property that will serve to
hold this currently selected user ID.

17
00:01:18.990 --> 00:01:26.280
And we'll do that the following way,
user ID, and we'll initialize it to null.

18
00:01:28.450 --> 00:01:33.200
By default you'd like load this component
up, no user should be selected.

19
00:01:33.200 --> 00:01:35.340
Makes sense, that is what we
would want in this situation.

20
00:01:36.380 --> 00:01:42.430
So what we can then do is go
to this component's template,

21
00:01:44.910 --> 00:01:49.720
and the way in HTML we indicate

22
00:01:51.220 --> 00:01:57.830
the selected option in this select tag,
is with the selected attribute.

23
00:01:58.910 --> 00:02:05.300
Now we've got Testy Testerson, so
we just need selected to show up on

24
00:02:05.300 --> 00:02:11.410
whoever's option matches user ID and
here's how we do that.

25
00:02:13.000 --> 00:02:15.595
So these two are gonna
actually treat the same.

26
00:02:15.595 --> 00:02:21.262
So we're gonna say selected is true when

27
00:02:21.262 --> 00:02:26.436
one equals this dot user ID, right?

28
00:02:26.436 --> 00:02:31.012
This thing that we have up here,
this is gonna be null at the beginning and

29
00:02:31.012 --> 00:02:32.977
then one and then two, right?

30
00:02:32.977 --> 00:02:35.318
So here's how we would do that.

31
00:02:35.318 --> 00:02:39.381
We would use a helper
called EQ which is equals.

32
00:02:42.360 --> 00:02:47.840
&gt;&gt; Mike North: And then we'll take their
respective values, and put them here.

33
00:02:48.990 --> 00:02:53.710
Now, we should be able to at this point,
I'm gonna leave this on the screen for

34
00:02:53.710 --> 00:02:55.160
you folks.

35
00:02:55.160 --> 00:02:57.010
That's what we just did right there.

36
00:02:57.010 --> 00:03:04.504
I'm just gonna demonstrate that this works
by initializing this to one, all right?

37
00:03:04.504 --> 00:03:08.470
All right, so no change but
that's what it was defaulting to before.

38
00:03:08.470 --> 00:03:14.770
If we initialized this to two,
sample mcdata on the right in our HTML.

39
00:03:14.770 --> 00:03:21.192
So we can see that now we can control
the initial selection state with user ID.

40
00:03:21.192 --> 00:03:24.502
We need this third one up here
which is gonna look like this.

41
00:03:24.502 --> 00:03:31.136
Selected = not this.userid,

42
00:03:31.136 --> 00:03:38.265
it's like a falsy check, right?

43
00:03:38.265 --> 00:03:43.084
If use ID is truthy,
&gt;&gt; Mike North: Then we certainly

44
00:03:43.084 --> 00:03:46.620
shouldn't have that,
this first item selected, right?

45
00:03:46.620 --> 00:03:52.110
This select a user should be what
we see if user ID is null or

46
00:03:52.110 --> 00:03:53.390
undefined, or something.

47
00:03:53.390 --> 00:03:55.310
So that is what this means here.

48
00:03:55.310 --> 00:03:59.239
It's the equivalent ofexclamation
mark this dot user ID.

49
00:04:00.330 --> 00:04:05.810
And if we initialize this to null,
ooh interesting.

50
00:04:05.810 --> 00:04:06.750
What is going on here?

51
00:04:10.720 --> 00:04:11.510
Maybe empty string?

52
00:04:13.990 --> 00:04:17.010
No, it's disabled, there we go,
that's probably it.

53
00:04:18.070 --> 00:04:19.140
Yup, there we go.

54
00:04:19.140 --> 00:04:22.443
So it had a disabled attribute,
little snag there.

55
00:04:24.967 --> 00:04:29.718
&gt;&gt; Mike North: And now we can see
depending on whether we initialize to

56
00:04:29.718 --> 00:04:34.671
null, or to one, or to two,
that this user ID property,

57
00:04:34.671 --> 00:04:39.420
it is used in the initial
rendering of this component in

58
00:04:39.420 --> 00:04:43.470
order to properly set
our initial state up.

59
00:04:43.470 --> 00:04:44.740
That's one thing we need here.

