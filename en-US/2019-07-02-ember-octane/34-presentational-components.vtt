WEBVTT

1
00:00:00.100 --> 00:00:02.070
&gt;&gt; Mike North: Now that we have messages,

2
00:00:02.070 --> 00:00:05.600
let's get them rendered on the screen,
right?

3
00:00:05.600 --> 00:00:10.405
I mean, for a while now since
the beginning of the course where we

4
00:00:10.405 --> 00:00:14.820
refactored messages into
a template only component,

5
00:00:14.820 --> 00:00:17.910
we've seen these same
three repeated messages.

6
00:00:17.910 --> 00:00:21.080
So let's see if we can
render something different.

7
00:00:21.080 --> 00:00:25.650
In order to do that, we have to find
a way for this component to sort of

8
00:00:25.650 --> 00:00:30.520
expose this messages' value
to its contents, right?

9
00:00:30.520 --> 00:00:35.620
It's a container component, it needs
to show messages to what it contains.

10
00:00:35.620 --> 00:00:39.990
And here's how we do that,
we use this yield helper.

11
00:00:39.990 --> 00:00:43.260
And you can think of this
as invoking a callback.

12
00:00:44.320 --> 00:00:48.430
Just like when we were using each,
or it's like array.for each and

13
00:00:48.430 --> 00:00:53.790
you pass it this function and within
the function it has access to an item.

14
00:00:53.790 --> 00:00:56.100
We can do the same thing here.

15
00:00:56.100 --> 00:01:01.935
So what I'm gonna do is yield and
pass this yield dislike,

16
00:01:01.935 --> 00:01:07.782
invoke the callback and
I'm going to pass it an argument.

17
00:01:11.360 --> 00:01:16.798
&gt;&gt; Mike North: What this let's us
do is if we go back to channel.hbs,

18
00:01:16.798 --> 00:01:23.089
we're gonna bring this down here so
we can see above and below.

19
00:01:25.022 --> 00:01:29.935
&gt;&gt; Mike North: Our chat container now can
use the same syntax we saw with each,

20
00:01:29.935 --> 00:01:33.190
which will look like this, as messages.

21
00:01:34.649 --> 00:01:40.794
&gt;&gt; Mike North: And now, we can
consume the messages value down here.

22
00:01:43.925 --> 00:01:46.440
&gt;&gt; Mike North: And let's just see
if they got logged to the console.

23
00:01:46.440 --> 00:01:48.220
So there's our empty array.

24
00:01:48.220 --> 00:01:51.870
So good sign, that's not null,
that's not undefined.

25
00:01:53.630 --> 00:01:58.269
And what I want us to do is
iterate over that empty array or

26
00:01:58.269 --> 00:02:02.037
iterate over the array,
whatever it may be,

27
00:02:05.471 --> 00:02:07.590
&gt;&gt; Mike North: Each messages as M.

28
00:02:07.590 --> 00:02:10.177
And we're gonna

29
00:02:10.177 --> 00:02:16.527
pass,
&gt;&gt; Mike North: We're

30
00:02:16.527 --> 00:02:21.400
gonna pass that message, the entire
object, to the message component.

31
00:02:23.390 --> 00:02:24.860
And all of our messages have disappeared.

32
00:02:24.860 --> 00:02:27.320
This makes sense,
we're iterating over an empty array,

33
00:02:27.320 --> 00:02:30.560
we don't expect any of these
components to show up.

34
00:02:30.560 --> 00:02:34.700
What's left is we have to go
back to our chat container, and

35
00:02:34.700 --> 00:02:36.850
think about this load messages function.

36
00:02:36.850 --> 00:02:40.377
We didn't do, we defined it,
pretty sure it's correct,

37
00:02:40.377 --> 00:02:42.428
but we haven't kicked it off yet.

38
00:02:42.428 --> 00:02:47.494
So we're gonna do something that is
a little different from what you're

39
00:02:47.494 --> 00:02:53.010
used to if you're, used Ember for a while,
we need a life cycle hook, right?

40
00:02:53.010 --> 00:02:55.540
So in React,
this would be component didn't mount.

41
00:02:55.540 --> 00:02:59.330
In older Ember,
this would be did insert element, right?

42
00:02:59.330 --> 00:03:03.910
Something that is triggered when the
components initially dropped into the DOM

43
00:03:03.910 --> 00:03:09.120
and this comes by way of modifiers.

44
00:03:09.120 --> 00:03:12.160
And what's cool about
this is we're no longer

45
00:03:12.160 --> 00:03:14.670
working with the lifecycle of a component.

46
00:03:14.670 --> 00:03:18.830
We are dealing with the lifecycle
of individual DOM elements,

47
00:03:18.830 --> 00:03:23.900
which means if you have a piece of DOM
that is it like inside an F, right?

48
00:03:23.900 --> 00:03:28.360
And you want whenever this is inserted,
it has to run this action, and

49
00:03:28.360 --> 00:03:32.040
you're toggling it, shown,
hidden, shown, hidden.

50
00:03:32.040 --> 00:03:37.210
Now, that hook is gonna be fired
every time it's reinserted, right?

51
00:03:37.210 --> 00:03:40.680
So this really all along has
been an element concern,

52
00:03:40.680 --> 00:03:43.090
not necessarily a component concern.

53
00:03:43.090 --> 00:03:47.413
So you can have different actions
that are firing at different times,

54
00:03:47.413 --> 00:03:51.870
each scope and pertaining to whatever
DOM element it's attached to.

55
00:03:51.870 --> 00:03:53.360
And here's how it looks.

56
00:03:53.360 --> 00:03:59.432
Did insert this.load,
think they called it load messages,

57
00:03:59.432 --> 00:04:02.710
yep, perfect, load messages.

58
00:04:04.320 --> 00:04:05.590
And there we go.

59
00:04:05.590 --> 00:04:08.290
Now, it's still the same message.

60
00:04:08.290 --> 00:04:10.330
It's shown twice here.

61
00:04:10.330 --> 00:04:13.088
It's shown twice here.

62
00:04:13.088 --> 00:04:16.533
Let me do a reload real quick,
three four times here so

63
00:04:16.533 --> 00:04:21.860
I'll buy that the array is of a different
size as we go through these things.

64
00:04:21.860 --> 00:04:25.410
Now, it's not perfect.

65
00:04:25.410 --> 00:04:28.050
Cannot read property ID of undefined.

66
00:04:29.540 --> 00:04:32.530
Seems like there's still
some work to do here.

67
00:04:36.039 --> 00:04:41.013
&gt;&gt; Mike North: We have to consider
the case of changing channels.

68
00:04:41.013 --> 00:04:43.906
And It's a little bit tricky here, but

69
00:04:43.906 --> 00:04:48.301
Ember is trying to change as
little of the HTML as possible.

70
00:04:48.301 --> 00:04:52.390
And what that means is, this component
on the right side of the screen,

71
00:04:52.390 --> 00:04:56.208
although we can kind of think of
it being torn down and rerendered,

72
00:04:56.208 --> 00:04:58.546
it's just actually changing its data.

73
00:04:58.546 --> 00:05:03.013
Because as we go from channel to
channel to channel within a team,

74
00:05:03.013 --> 00:05:05.711
we're not going to a different route.

75
00:05:05.711 --> 00:05:09.020
We're just changing the dynamic
segments in that route.

76
00:05:09.020 --> 00:05:12.120
We call this an in-place transition.

77
00:05:12.120 --> 00:05:17.162
So we need to kinda specify that
whenever a particular value updates,

78
00:05:17.162 --> 00:05:23.068
we should run load messages again, and
we can do that with another modifier here.

79
00:05:25.649 --> 00:05:29.570
&gt;&gt; Mike North: Did update,
call this load messages?

80
00:05:30.820 --> 00:05:33.640
And we're gonna pass it the channel.

81
00:05:33.640 --> 00:05:36.940
So whenever the channel changes,

82
00:05:36.940 --> 00:05:41.498
we're going to rerun
this load messages hook.

83
00:05:41.498 --> 00:05:47.159
And now we should see four messages here,

84
00:05:47.159 --> 00:05:52.510
two messages here four messages here.

85
00:05:52.510 --> 00:05:57.790
So I'll buy that and I can see the API
calls at the bottom, see that XHR?

86
00:05:57.790 --> 00:05:59.976
so looks like we're fetching data,

87
00:05:59.976 --> 00:06:05.440
were properly re-rendering creating our
new array each time this is happening.

88
00:06:05.440 --> 00:06:06.170
This looks good.

89
00:06:07.200 --> 00:06:09.300
I'd like to see the content
of these messages.

90
00:06:09.300 --> 00:06:14.650
Let's looks at the message HBS file and
start to take advantage of the fact that

91
00:06:14.650 --> 00:06:20.190
we are now passing a message
ARG to the component.

92
00:06:22.190 --> 00:06:30.784
So what we can do here is
use message.user.name.

93
00:06:30.784 --> 00:06:34.000
We can use our format timestamp function.

94
00:06:35.470 --> 00:06:37.310
Remember that helper we made.

95
00:06:37.310 --> 00:06:42.756
I think it's message.createdAt,
I'll do a quick save, okay.

96
00:06:42.756 --> 00:06:47.207
So now we're getting different names
here popping up, in different dates for

97
00:06:47.207 --> 00:06:49.440
that matter, different time stamps.

98
00:06:49.440 --> 00:06:53.850
This is real data from our back
end driving these components.

99
00:06:53.850 --> 00:06:58.720
Here's an avatar URL so
we can delete that and replace it with,

100
00:07:00.660 --> 00:07:04.680
I think it's message user icon URL.

101
00:07:06.920 --> 00:07:11.510
Awesome, and just scanning quickly for
other things, obviously,

102
00:07:11.510 --> 00:07:20.790
the body of the message, Message.body.

103
00:07:20.790 --> 00:07:22.650
Look, different messages now.

104
00:07:22.650 --> 00:07:29.196
We can change channels and see different
stuff, still got this error here.

105
00:07:29.196 --> 00:07:32.725
I'm gonna dig into that in just a moment.

106
00:07:32.725 --> 00:07:37.747
Yeah, why not dig into it now, so
cannot read property id of undefined.

107
00:07:37.747 --> 00:07:42.681
It's the before model hook in the team,
index route.

108
00:07:48.146 --> 00:07:52.520
&gt;&gt; Mike North: So there's no team,
that's interesting.

109
00:07:52.520 --> 00:07:53.750
You know what it is?

110
00:07:53.750 --> 00:07:58.815
I left in a little, remember our hackery
like we could pick the zeroes channel or

111
00:07:58.815 --> 00:08:00.111
the first channel.

112
00:08:00.111 --> 00:08:05.080
This should be channel 0 so I'm checking
for is the length greater than zero.

113
00:08:05.080 --> 00:08:08.020
And then here I was
assuming that it was 2.

114
00:08:08.020 --> 00:08:14.040
Silly mistake, it's what I get for
trying different iterations of things.

115
00:08:14.040 --> 00:08:16.365
So now it should be working smoothly.

116
00:08:16.365 --> 00:08:20.335
You can go to different,
smoothly minus a debugger,

117
00:08:20.335 --> 00:08:24.450
we should be able to
go to different teams.

118
00:08:24.450 --> 00:08:28.120
See lots of different messages,
different channels within those teams.

119
00:08:28.120 --> 00:08:29.955
Very data driven app now,

120
00:08:29.955 --> 00:08:33.440
it's making API calls,
lot of different stuff showing up now.

121
00:08:33.440 --> 00:08:35.230
Our URLs are working nicely.

122
00:08:35.230 --> 00:08:38.000
So this app is really
taking shape at this point.

123
00:08:40.140 --> 00:08:42.130
Go ahead.
&gt;&gt; Speaker 2: I'm making two calls to

124
00:08:42.130 --> 00:08:46.640
messages on page load, and
seemingly on switches as well.

125
00:08:46.640 --> 00:08:49.170
&gt;&gt; Mike North: Interesting,
let's see what's going on.

126
00:08:49.170 --> 00:08:50.706
You know what I could probably do?

127
00:08:52.436 --> 00:08:55.366
&gt;&gt; Mike North: Let's try
removing the did-insert.

128
00:08:57.170 --> 00:08:59.761
&gt;&gt; Mike North: Nope,
we need that initial thing to fire off.

129
00:09:04.305 --> 00:09:07.620
&gt;&gt; Mike North: So
what we would probably want to do, yeah I-

130
00:09:07.620 --> 00:09:09.147
&gt;&gt; Speaker 2: It's like I did receive

131
00:09:09.147 --> 00:09:10.170
errors.

132
00:09:10.170 --> 00:09:13.400
&gt;&gt; Mike North: So I see on the initial
load, I'm only making one call here.

133
00:09:15.030 --> 00:09:18.600
So let's clear that out and
change channels.

134
00:09:18.600 --> 00:09:22.180
I see I'm only making one call here,
changing channels.

135
00:09:23.860 --> 00:09:25.190
Let's try changing teams.

136
00:09:25.190 --> 00:09:26.291
I'm gonna clear this out.

137
00:09:29.384 --> 00:09:32.007
&gt;&gt; Mike North: All right,
I am not seeing duplicate calls made so

138
00:09:32.007 --> 00:09:34.889
I'm happy to take a look at
your code at the next break.

139
00:09:34.889 --> 00:09:36.280
&gt;&gt; Speaker 2: Okay.

140
00:09:36.280 --> 00:09:38.430
&gt;&gt; Mike North: But this looks right to me.

141
00:09:38.430 --> 00:09:42.250
So did-insert,
that's only on the first insert and

142
00:09:42.250 --> 00:09:48.190
did update is only on subsequent
updates not on the insert.

143
00:09:48.190 --> 00:09:51.550
So this should handle the first and
then second through nth,

144
00:09:51.550 --> 00:09:55.020
which is just what we want.

145
00:09:55.020 --> 00:10:00.750
The reason we have to
pass channel here is the,

146
00:10:00.750 --> 00:10:05.350
just has to do with giving it an extra
clue that whenever channel changes,

147
00:10:05.350 --> 00:10:09.420
we should consider that to
be an update as opposed to

148
00:10:09.420 --> 00:10:12.880
other things updating as did
update is designed to handle.

149
00:10:14.050 --> 00:10:16.141
So let's check the test real quick.

150
00:10:18.841 --> 00:10:21.791
&gt;&gt; Mike North: All right,
chat container test,

151
00:10:21.791 --> 00:10:25.560
we haven't looked at
cuz this is the first.

152
00:10:26.700 --> 00:10:30.130
This our container component unit here.

153
00:10:30.130 --> 00:10:32.460
Let's hide past tests.

154
00:10:32.460 --> 00:10:34.820
So that's the only one that's failing.

155
00:10:34.820 --> 00:10:41.160
And for time purposes as we have already
done quite a bit of test writing,

156
00:10:41.160 --> 00:10:46.700
I'm gonna skip writing this test with you.

157
00:10:46.700 --> 00:10:50.370
I do wanna make one point before
before we skip too hard here.

158
00:10:50.370 --> 00:10:54.090
The benefit of testing
a container component,

159
00:10:54.090 --> 00:10:59.113
the reason it becomes easier once
you take the presentation away

160
00:10:59.113 --> 00:11:03.963
is you could do channel equals
whatever and then as messages.

161
00:11:03.963 --> 00:11:08.905
And you could render this as just H1s or
an unordered list or whatever, or

162
00:11:08.905 --> 00:11:13.611
some very simple, easy to assert
against DOM structure that doesn't

163
00:11:13.611 --> 00:11:18.840
even closely resemble the way you
would use this container for real.

164
00:11:18.840 --> 00:11:22.820
Because this thing's job is
just to expose that data or

165
00:11:22.820 --> 00:11:25.980
to provide you with actions or whatnot.

166
00:11:25.980 --> 00:11:31.435
But you can find very nice
ways of making your life easy,

167
00:11:31.435 --> 00:11:36.490
just, for example, it might yield

168
00:11:36.490 --> 00:11:41.910
out six arrays, only one or two of which
are visible at any particular time.

169
00:11:41.910 --> 00:11:46.425
And instead of worrying about testing this
in all of the different states, you can

170
00:11:46.425 --> 00:11:50.890
just spit everything out and assert that
it's all there and do it all in one shot.

171
00:11:52.820 --> 00:11:55.160
So I'll just point that out.

172
00:11:55.160 --> 00:11:57.870
But I don't wanna spend too much more time

173
00:11:57.870 --> 00:12:00.510
since we've covered a lot
of testing ground so far.

174
00:12:00.510 --> 00:12:03.247
So all of the other tests are passing.

