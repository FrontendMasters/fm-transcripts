WEBVTT

1
00:00:00.340 --> 00:00:03.510
&gt;&gt; Mike North: Now that we have
data coming from the correct place,

2
00:00:03.510 --> 00:00:06.170
we can start to move away
from hardcoded data and

3
00:00:06.170 --> 00:00:11.940
using Fetch as a modern browser API that

4
00:00:11.940 --> 00:00:17.060
allows us to go and grab remote
resources and make use of them.

5
00:00:18.540 --> 00:00:22.820
For those of you who may not have used it,
it kinda behaves like Ajax.

6
00:00:22.820 --> 00:00:25.940
But it's more powerful in several ways.

7
00:00:25.940 --> 00:00:31.390
For example, you can grab a video
stream and start to buffer it.

8
00:00:31.390 --> 00:00:33.880
It's not limited to textual content.

9
00:00:33.880 --> 00:00:39.610
And it's not even limited to
one shot request and responses.

10
00:00:39.610 --> 00:00:42.070
You can stream data using Fetch.

11
00:00:42.070 --> 00:00:48.318
Now, we're gonna be using it in a way that
looks very similar to how you'd use Ajax,

12
00:00:48.318 --> 00:00:53.422
but if you're interested in learning more,
the PWA course I teach on

13
00:00:53.422 --> 00:00:59.237
Frontend Masters that Steve Kenny and
I did, that has a good section on Fetch.

14
00:00:59.237 --> 00:01:02.866
So let's start with,

15
00:01:02.866 --> 00:01:07.068
let's start by looking at

16
00:01:07.068 --> 00:01:12.060
a file called API_EXAMPLES.

17
00:01:12.060 --> 00:01:16.520
And if you're using VS Code,
this will be more than a text file.

18
00:01:18.470 --> 00:01:22.300
What you'll be able to do is click on,
sorry, if you're using VS Code and

19
00:01:22.300 --> 00:01:25.340
the extensions that were
part of this workspace and

20
00:01:25.340 --> 00:01:29.820
that were installed, and you clicked
install all, then you should see this.

21
00:01:29.820 --> 00:01:31.900
And you should be able
to click Send Request,

22
00:01:31.900 --> 00:01:35.100
and you'll get back a list of users.

23
00:01:35.100 --> 00:01:39.082
So if you've ever used postman, or
something like this, or curl from

24
00:01:39.082 --> 00:01:43.490
the command line to make a request and
print the response on the screen.

25
00:01:43.490 --> 00:01:47.180
This is kind of like that,
baked into your editor.

26
00:01:48.410 --> 00:01:50.900
So we could check out
the list of all teams.

27
00:01:52.820 --> 00:01:58.150
And there are all the headers that come
back, and here are all of the teams.

28
00:01:58.150 --> 00:02:00.850
Couple more than what we
had in our example data.

29
00:02:00.850 --> 00:02:03.650
So we're gonna use this as our reference,
and

30
00:02:03.650 --> 00:02:06.560
start making requests based on these URLs.

31
00:02:06.560 --> 00:02:11.640
And every URL you will need to
hit is in this API_EXAMPLES file,

32
00:02:11.640 --> 00:02:15.790
including down here we've got a POST and
a DELETE request.

33
00:02:15.790 --> 00:02:19.420
Keep in mind,
these will alter your DB.JSON file.

34
00:02:19.420 --> 00:02:23.680
But don't worry, if you screw that up,
you can always just revert the changes,

35
00:02:23.680 --> 00:02:26.510
stop your server, restart it,
and you'll be good to go.

36
00:02:27.720 --> 00:02:33.006
So let's think about /api/teams.

37
00:02:33.006 --> 00:02:35.730
Seems like we should use that
in the teams ref, right?

38
00:02:35.730 --> 00:02:37.410
That's the list of teams.

39
00:02:38.430 --> 00:02:42.885
First thing I'm gonna do is blow away
this thing we created in the last step,

40
00:02:42.885 --> 00:02:45.620
the sample array of teams.

41
00:02:45.620 --> 00:02:50.720
We're gonna replace this with a promise
that resolves to something very similar.

42
00:02:52.800 --> 00:02:56.160
Second thing I'm gonna do is import Fetch.

43
00:02:58.530 --> 00:03:01.870
And you may be wondering,
I just told you this is a browser API,

44
00:03:01.870 --> 00:03:03.660
and why would I be doing this?

45
00:03:03.660 --> 00:03:04.458
Two reasons.

46
00:03:04.458 --> 00:03:10.017
Number one, IE11, which unfortunately,
because it was the default

47
00:03:10.017 --> 00:03:14.754
browser that shipped with Windows 8,
it will be continued,

48
00:03:14.754 --> 00:03:20.425
supported browser until Windows
8 is sunset, and that's in 2022.

49
00:03:20.425 --> 00:03:25.120
So some of you may need to
worry about this for a while.

50
00:03:25.120 --> 00:03:31.420
The second reason is, later,
we're going to server render this app.

51
00:03:31.420 --> 00:03:36.085
We're gonna use Ember's
technology called FastBoot, and

52
00:03:36.085 --> 00:03:38.828
there is no Fetch API in Node.js but

53
00:03:38.828 --> 00:03:43.320
there's a package that's
already part of this project.

54
00:03:43.320 --> 00:03:44.988
It was there when you started it.

55
00:03:44.988 --> 00:03:49.655
It's called EmberFetch, and
this provides a single facade that works

56
00:03:49.655 --> 00:03:54.100
exactly the way that Fetch works
in a browser, in a modern browser.

57
00:03:54.100 --> 00:03:57.772
And when you're doing
server rendered stuff,

58
00:03:57.772 --> 00:04:03.080
it'll use Node's HTTP libraries
to do exactly the same thing.

59
00:04:03.080 --> 00:04:06.750
So that's two reasons, legacy browsers and

60
00:04:06.750 --> 00:04:11.090
isomorphic code,
which we'll talk about a little bit later.

61
00:04:12.450 --> 00:04:17.242
So we've got Fetch and now we can,
because we can either return an array or

62
00:04:17.242 --> 00:04:21.976
a promise that resolves to an array,
and we should get a similar result.

63
00:04:21.976 --> 00:04:23.559
We can just do this.

64
00:04:23.559 --> 00:04:31.710
const response = await
fetch('/api/teams');.

65
00:04:31.710 --> 00:04:35.622
Same origin request,
makes this easy, right?

66
00:04:35.622 --> 00:04:40.756
And then we have to, so this is sort of
a generic response, we need to decode

67
00:04:40.756 --> 00:04:47.170
the body of this response into JSON,
which is actually another async function.

68
00:04:47.170 --> 00:04:52.220
Return,
&gt;&gt; Mike North: Could do that.

69
00:04:54.140 --> 00:04:57.553
And because returning
a promise is fair game,

70
00:04:57.553 --> 00:05:01.148
we're gonna still have to
await it in this hook.

71
00:05:01.148 --> 00:05:02.515
So this will work.

