WEBVTT

1
00:00:00.230 --> 00:00:05.296
&gt;&gt; Mike North: Let's build one,
and we're gonna build one to kind

2
00:00:05.296 --> 00:00:10.240
of wrap around the chat
&gt;&gt; Mike North: The chat

3
00:00:10.240 --> 00:00:12.770
header messages and footers.

4
00:00:12.770 --> 00:00:16.340
So it's just gonna be this white area
on the right side of our screen.

5
00:00:16.340 --> 00:00:21.390
We're gonna wrap a container around
that to facilitate the components

6
00:00:21.390 --> 00:00:25.800
it contains being very simple and
not having a lot going on.

7
00:00:27.100 --> 00:00:28.850
Let's get started.

8
00:00:28.850 --> 00:00:30.512
Generating a new component.

9
00:00:34.081 --> 00:00:39.202
&gt;&gt; Mike North: Just requires
that we run ember g

10
00:00:39.202 --> 00:00:44.176
component chat-container.

11
00:00:44.176 --> 00:00:48.370
All right, so
we have as before our new component,

12
00:00:48.370 --> 00:00:53.440
our component's template and
integration test for that component.

13
00:00:53.440 --> 00:00:58.440
So let's go to this JavaScript
module here for the chat container.

14
00:01:01.091 --> 00:01:04.710
&gt;&gt; Mike North: I'm gonna show you
a technique that you can use if maybe

15
00:01:04.710 --> 00:01:07.950
some of your API calls
are a little bit slow.

16
00:01:07.950 --> 00:01:11.940
And you don't want your initial page
load to necessarily wait on them.

17
00:01:11.940 --> 00:01:16.031
So we're gonna make it so that when this
chat container is initially rendered,

18
00:01:16.031 --> 00:01:17.997
it'll be as if there are no messages.

19
00:01:17.997 --> 00:01:22.342
And as soon as this component's
dropped into the DOM,

20
00:01:22.342 --> 00:01:25.000
we'll kick off a A-SynC fetch.

21
00:01:25.000 --> 00:01:30.440
And when that comes back we'll fill our
empty array with some chat messages.

22
00:01:30.440 --> 00:01:34.020
This is a great way of making sure
that your page load time is fast.

23
00:01:34.020 --> 00:01:38.195
Cuz at the very least in our case,
if we just think the left side of our UI,

24
00:01:38.195 --> 00:01:42.850
if we could land that on the screen really
really quickly, it might buy us a little

25
00:01:42.850 --> 00:01:48.240
bit more patience from our user where
they'll wait for the messages to come in.

26
00:01:48.240 --> 00:01:52.860
So we're going to need, cuz we're to
render the messages on the screen,

27
00:01:53.980 --> 00:01:56.150
this sounds like a tracked property.

28
00:01:56.150 --> 00:01:58.064
It's an array we're
going to fill it later.

29
00:01:58.064 --> 00:02:01.800
We're going to need to watch
this thing it's rendered, right?

30
00:02:01.800 --> 00:02:06.590
So we'll import tracking, or tracked

31
00:02:06.590 --> 00:02:12.630
from tracking, and we'll say tracked,

32
00:02:13.850 --> 00:02:18.350
here's our messages array and
it begins empty.

33
00:02:20.700 --> 00:02:24.824
And it's only yelling at us cuz type
script is freaking out a little bit.

34
00:02:24.824 --> 00:02:32.330
I'm gonna just restart my type
script server and we're good to go.

35
00:02:32.330 --> 00:02:35.640
So the next thing we want
to do is make a function,

36
00:02:35.640 --> 00:02:41.500
which when invoked, will result in
the messages array being filled.

37
00:02:41.500 --> 00:02:46.318
And it’s gonna get invoked from
the template to spoil some

38
00:02:46.318 --> 00:02:48.193
of the surprise here.

39
00:02:48.193 --> 00:02:50.719
So we’ll need action, right?

40
00:02:50.719 --> 00:02:58.984
And we’re gonna make this an async
function called load messages,

41
00:02:58.984 --> 00:03:05.220
and we can grab some args
that we are gonna get past.

42
00:03:05.220 --> 00:03:10.170
So if we're given, just trying to think of
what data we need to fetch messages, so

43
00:03:10.170 --> 00:03:14.510
it's gonna be like team/team ID,
we need the channel ID.

44
00:03:15.740 --> 00:03:17.181
If I look at our data.

45
00:03:19.730 --> 00:03:20.830
&gt;&gt; Mike North: And look at a channel.

46
00:03:20.830 --> 00:03:23.100
Let's see if that'll do.

47
00:03:23.100 --> 00:03:27.100
We've got a team ID and we've got
a channel ID, so it seems that as long as

48
00:03:27.100 --> 00:03:30.842
we're given a channel,
that's complete information in order for

49
00:03:30.842 --> 00:03:34.610
us to build the URL properly and
fire this request off.

50
00:03:34.610 --> 00:03:42.260
So I expect we're gonna get an ARG channel
and we can put that in place right now.

51
00:03:42.260 --> 00:03:43.990
When you go to channel hbs.

52
00:03:45.290 --> 00:03:51.540
And I wanna,
&gt;&gt; Mike North: Wanna grab this.

53
00:03:51.540 --> 00:03:55.465
This is gonna be become part of
our component this main element.

54
00:03:58.891 --> 00:04:03.240
&gt;&gt; Mike North: And we're going to
up here say channel container.

55
00:04:03.240 --> 00:04:08.948
Chat container,
whatever you want to call it,

56
00:04:08.948 --> 00:04:11.951
and let's go down here.

57
00:04:11.951 --> 00:04:12.960
So it looks like that.

58
00:04:12.960 --> 00:04:17.630
We're going to pass it our channel
which is this dot model, right?

59
00:04:17.630 --> 00:04:20.840
We're already using the title
of the channel description.

60
00:04:20.840 --> 00:04:22.229
This kind of fits, right?

61
00:04:30.196 --> 00:04:33.160
&gt;&gt; Mike North: Looks good,
and I have that main thing.

62
00:04:33.160 --> 00:04:35.000
It's still on my clipboard.

63
00:04:35.000 --> 00:04:39.103
Otherwise, you could look at
your git dif and recover that.

64
00:04:39.103 --> 00:04:43.039
So let's go to our chat container hbs.

65
00:04:44.300 --> 00:04:51.070
And I'm just gonna put this,
oops wrong file, chat-container hbs.

66
00:04:51.070 --> 00:04:54.605
I'm just gonna put this here for
now to that main tag,

67
00:04:54.605 --> 00:04:57.550
we'll deal with that in a moment.

68
00:04:57.550 --> 00:05:01.500
But I'll just wanna save it for later,
it's gonna be part of this component.

69
00:05:01.500 --> 00:05:06.110
So given that now we're
receiving that channel,

70
00:05:07.330 --> 00:05:13.290
we know how to access an arch from
our template, we just use at channel.

71
00:05:13.290 --> 00:05:16.620
This is the first time that we
need to access it from within

72
00:05:16.620 --> 00:05:19.730
a piece of JavaScript code and
it's pretty simple.

73
00:05:19.730 --> 00:05:23.525
It's just this.args.channel or

74
00:05:23.525 --> 00:05:29.230
you could de-structure it,
&gt;&gt; Mike North: Like this.

75
00:05:31.414 --> 00:05:34.397
&gt;&gt; Mike North: If you need multiple arcs
this might be a more convenient form to

76
00:05:34.397 --> 00:05:38.420
use where all at once you can kind
of plug off exactly what you need.

77
00:05:38.420 --> 00:05:46.220
And in fact, we just need the channel ID
which is the property ID on the channel

78
00:05:46.220 --> 00:05:51.120
and we also need channel dot team ID so
we can destructure even further.

79
00:05:53.150 --> 00:05:58.112
We need ID and team ID.

80
00:06:03.638 --> 00:06:06.490
&gt;&gt; Mike North: And they're unused,
obviously, we'll fix that in a moment.

81
00:06:08.000 --> 00:06:10.489
So time to kick off our request.

82
00:06:12.034 --> 00:06:13.470
&gt;&gt; Mike North: There's our response.

83
00:06:13.470 --> 00:06:19.516
We're gonna import fetch from fetch,
&gt;&gt; Mike North: And

84
00:06:19.516 --> 00:06:27.720
we're gonna await fetch aPI teams.

85
00:06:27.720 --> 00:06:30.440
I want to just check our docs here.

86
00:06:30.440 --> 00:06:32.480
Pretty sure I remember it,
but I don't want to be sure.

87
00:06:32.480 --> 00:06:36.280
All right, get a team channel messages.

88
00:06:36.280 --> 00:06:37.600
That's the one we want.

89
00:06:37.600 --> 00:06:39.870
So it's API teams.

90
00:06:39.870 --> 00:06:41.270
Just copy all this.

91
00:06:41.270 --> 00:06:42.137
Sounds good to me.

92
00:06:44.310 --> 00:06:49.148
&gt;&gt; Mike North: So we'll put that
in here and we'll replace this

93
00:06:49.148 --> 00:06:53.869
with the teamId, and
this with the channelId.

94
00:06:58.765 --> 00:07:00.100
&gt;&gt; Mike North: Actually, it's just ID.

95
00:07:00.100 --> 00:07:01.769
That's how we destructured it over here.

96
00:07:03.280 --> 00:07:06.050
So there is our response coming back.

97
00:07:06.050 --> 00:07:09.835
I have a problem in my template so
I should go and fix that right away.

98
00:07:09.835 --> 00:07:14.900
Chat-container, it self closed for me.

99
00:07:14.900 --> 00:07:15.980
Thank you, helpful Edgar.

100
00:07:17.480 --> 00:07:18.250
I did not need that.

101
00:07:20.360 --> 00:07:24.238
Okay, so we're in a good state now.

102
00:07:24.238 --> 00:07:29.574
Ultimately we want the JSON that
this response comes back to us with,

103
00:07:29.574 --> 00:07:34.820
we want that to be part of,
that should be the new messages, right?

104
00:07:36.060 --> 00:07:39.438
There's something thats a little
strange that I'm going to do now.

105
00:07:39.438 --> 00:07:42.282
I look at it as a very
small price to pay for

106
00:07:42.282 --> 00:07:47.059
being able to write vanilla JavaScript,
but it's not necessarily

107
00:07:47.059 --> 00:07:52.160
exactly what you might think
you would do is this last step.

108
00:07:52.160 --> 00:07:57.557
So we're gonna say this messages

109
00:07:57.557 --> 00:08:01.412
equal this messages and

110
00:08:01.412 --> 00:08:07.325
then await
&gt;&gt; Mike North: Actually

111
00:08:07.325 --> 00:08:08.578
we don’t even need that.

112
00:08:08.578 --> 00:08:12.553
This is a complete solution,

113
00:08:12.553 --> 00:08:16.877
I’ll walk through in a second.

114
00:08:16.877 --> 00:08:21.910
Response, JSON, so
we need parentheses and another spread.

115
00:08:23.130 --> 00:08:27.010
So what does this mean,
why on Earth have I done this?

116
00:08:27.010 --> 00:08:31.680
Let me put this down a couple lines so
we can read it and talk about it easily.

117
00:08:31.680 --> 00:08:34.541
So come on Perrier.

118
00:08:38.349 --> 00:08:43.490
&gt;&gt; Mike North: All right, so
what we're saying here is number one,

119
00:08:43.490 --> 00:08:47.980
we are assigning a new
array to this messages.

120
00:08:47.980 --> 00:08:52.670
We're not pushing objects
into the existing array.

121
00:08:52.670 --> 00:08:57.700
This is necessary or
your tracked property will not keep up.

122
00:08:58.750 --> 00:09:02.110
So the arrays contents
are not being monitored.

123
00:09:02.110 --> 00:09:05.390
You need to replace your old
array with the new array.

124
00:09:05.390 --> 00:09:10.230
So I am taking any messages that might
already exist in there, right, say we're

125
00:09:10.230 --> 00:09:14.880
calling load messages like every minute or
something, to pull new data down.

126
00:09:14.880 --> 00:09:21.436
I don't wanna necessarily
lose the existing messages.

127
00:09:21.436 --> 00:09:23.506
And this will give us new data here.

128
00:09:23.506 --> 00:09:28.294
Now, If we were actually doing this and
doing incremental loads

129
00:09:28.294 --> 00:09:33.258
we'd have to worry about the message
may already be in memory, and

130
00:09:33.258 --> 00:09:38.965
it may also be coming across from the API
let's not worry about that for now.

131
00:09:38.965 --> 00:09:43.829
But this is kind of what
a robust solution might

132
00:09:43.829 --> 00:09:48.203
look like before the duping of some kind.

133
00:09:48.203 --> 00:09:50.784
We could get away for now with this.

134
00:09:54.795 --> 00:10:00.164
&gt;&gt; Mike North: But you would have
a totally different solution.

135
00:10:00.164 --> 00:10:02.688
If you wanted to periodically load more.

136
00:10:02.688 --> 00:10:04.696
We can leave it like this but but

137
00:10:04.696 --> 00:10:08.950
the point I wanna make is do
not do something like that.

138
00:10:08.950 --> 00:10:12.090
Don't push,
you need to make an assignment.

139
00:10:12.090 --> 00:10:16.590
And in fact, sometimes there
are situations where you wanna

140
00:10:16.590 --> 00:10:19.110
indicate that we have
made a property change.

141
00:10:20.440 --> 00:10:22.400
You may have to do something.

142
00:10:22.400 --> 00:10:26.060
In fact,
I think we should experiment here.

143
00:10:26.060 --> 00:10:27.478
You could do something like this.

144
00:10:27.478 --> 00:10:35.452
Push or wait
&gt;&gt; Mike North: But

145
00:10:35.452 --> 00:10:39.290
then you would absolutely
have to do a weird thing.

146
00:10:41.850 --> 00:10:46.790
Right, this ensures that the tracking
system sees a new assignment

147
00:10:46.790 --> 00:10:50.958
of some sort and can evaluate
whether something needs to change.

148
00:10:50.958 --> 00:10:54.550
Now I would sooner have

149
00:10:54.550 --> 00:10:57.640
the solution that I just had here
than what you see right now.

150
00:10:57.640 --> 00:10:59.750
This looks a little bonkers.

151
00:10:59.750 --> 00:11:03.890
And it may confuse your fellow
developers but in a very performance

152
00:11:03.890 --> 00:11:08.520
constrained situation you might want
to avoid the extra array allocation.

153
00:11:08.520 --> 00:11:09.130
Yes.

154
00:11:09.130 --> 00:11:11.809
&gt;&gt; Speaker 2: Also there's
a notified property change API for

155
00:11:11.809 --> 00:11:13.712
the old way of doing that, right?

156
00:11:13.712 --> 00:11:16.980
&gt;&gt; Mike North: Correct, and this is the
equivalent of notified property change.

157
00:11:16.980 --> 00:11:18.690
&gt;&gt; Speaker 2: So
you can't use the old one anymore?

158
00:11:18.690 --> 00:11:20.746
&gt;&gt; Mike North: It is
a totally different system.

159
00:11:20.746 --> 00:11:21.396
&gt;&gt; Speaker 2: Okay.

160
00:11:21.396 --> 00:11:23.867
&gt;&gt; Mike North: There are no
named properties any more.

161
00:11:23.867 --> 00:11:26.721
&gt;&gt; Speaker 2: That's what
they talk about with chains?

162
00:11:26.721 --> 00:11:31.204
&gt;&gt; Mike North: Property chains are part
of the old ember, like ember object and

163
00:11:31.204 --> 00:11:35.820
the stopped get, they start set and
this is a very new thing.

164
00:11:35.820 --> 00:11:37.890
So I'm gonna just back this out, so

165
00:11:37.890 --> 00:11:40.650
we're replacing the old
array with the new array.

166
00:11:40.650 --> 00:11:45.760
But just know that a common
snag that people hit is they,

167
00:11:46.910 --> 00:11:52.040
when dealing with tracked, mutable values,
they forget that you need to have some

168
00:11:52.040 --> 00:11:58.990
sort of assignment in order to tell
Glimmer, the view layer under Ember.

169
00:11:58.990 --> 00:12:03.880
Which is the thing that's determining
whether HTML needs to be updated.

170
00:12:03.880 --> 00:12:08.730
You need to,
an assignment is what it is listening for,

171
00:12:08.730 --> 00:12:10.770
not the mutation of the array.

172
00:12:10.770 --> 00:12:12.110
Or adding new things to the array.

173
00:12:13.160 --> 00:12:19.121
&gt;&gt; Speaker 3: So ember object computer had
the concept of that dot bracket watcher.

174
00:12:19.121 --> 00:12:21.490
Is there no concept like that in Octane?

175
00:12:25.130 --> 00:12:30.400
&gt;&gt; Mike North: We’re trying to
encourage immutable data treatment and

176
00:12:30.400 --> 00:12:35.790
that would involve creating
a new array and using that.

177
00:12:35.790 --> 00:12:40.792
Now when you deal with collections
in the 10,000s, then it becomes

178
00:12:40.792 --> 00:12:46.560
potentially worth trying other
approaches but that is an exception.

179
00:12:46.560 --> 00:12:49.040
And you would want to, before going there,

180
00:12:49.040 --> 00:12:54.910
you'd wanna prove that this is going to
be a measurable performance improvement,

181
00:12:54.910 --> 00:12:58.560
and it's not something you just wanna
do because one day it might matter.

