WEBVTT

1
00:00:00.120 --> 00:00:02.860
&gt;&gt; Mike North: So
the next thing I wanna do here is

2
00:00:02.860 --> 00:00:06.260
move this stuff out to another function.

3
00:00:06.260 --> 00:00:11.445
Just cuz I like my actions to be
kinda thinned and I want them,

4
00:00:11.445 --> 00:00:18.376
just like with the helper I wanna delegate
something vanilla as quickly as I can.

5
00:00:20.767 --> 00:00:26.060
&gt;&gt; Mike North: loginAsUserWithID,
something like that.

6
00:00:26.060 --> 00:00:30.480
And I'm gonna just take
in value as an argument.

7
00:00:30.480 --> 00:00:33.190
We'll leave that to
the console logging down here.

8
00:00:33.190 --> 00:00:34.613
We'll do what we have been doing.

9
00:00:34.613 --> 00:00:37.718
Let me stretch this out so people can see,

10
00:00:37.718 --> 00:00:45.138
and,
&gt;&gt; Mike North: I'll this, so effectively

11
00:00:45.138 --> 00:00:50.270
all I've done is I've taken the console
log, I've moved it into its own method.

12
00:00:50.270 --> 00:00:56.580
And down here instead of logging
directly I've delegated to this method.

13
00:00:57.710 --> 00:01:01.613
So let's try this and
see what happens, sign in.

14
00:01:01.613 --> 00:01:08.950
Okay, we get an error,
this.loginAsUserWithId is not a function.

15
00:01:10.330 --> 00:01:13.070
I'll do what I usually
do in this situation.

16
00:01:13.070 --> 00:01:15.160
Step into this, let's see what's going on.

17
00:01:16.240 --> 00:01:23.492
And what we'll find,
&gt;&gt; Mike North: Is if we look at our stack,

18
00:01:23.492 --> 00:01:27.900
there we go, welcome back, stack.

19
00:01:29.320 --> 00:01:33.580
Okay, anyone notice
a potential problem here,

20
00:01:33.580 --> 00:01:38.809
thinking about the fact that this
dot function name was undefined?

21
00:01:40.010 --> 00:01:40.950
What's getting in our way?

22
00:01:40.950 --> 00:01:42.230
&gt;&gt; Speaker 2: This is your form now.

23
00:01:42.230 --> 00:01:50.870
&gt;&gt; Mike North: This is my form, this is
my form, that's the way dom events work.

24
00:01:50.870 --> 00:01:54.580
Right, if you have no Ember,
hardly any Javascript,

25
00:01:54.580 --> 00:01:58.840
you just make an HTML file with
a form that says on submit equals and

26
00:01:58.840 --> 00:02:01.640
then some function,
this is what you're going to get.

27
00:02:02.820 --> 00:02:06.930
So what we need to do is make sure when
this function's called it's called in

28
00:02:06.930 --> 00:02:12.620
the context of our component instance,
that's the way it's most useful to us.

29
00:02:12.620 --> 00:02:17.450
That's the way we can make it so that
the components Java Script class is sorta

30
00:02:17.450 --> 00:02:23.360
an abstraction behind the HTML and
the handlebars that we've written.

31
00:02:23.360 --> 00:02:28.080
And the way we do this is
with our first decorator.

32
00:02:28.080 --> 00:02:32.410
So this is a new, hopefully new,

33
00:02:32.410 --> 00:02:36.370
in the future, JavaScript language syntax.

34
00:02:36.370 --> 00:02:40.860
It's currently still in
sorta the proposal phase

35
00:02:40.860 --> 00:02:44.460
cuz we're trying to get
the performance characteristics right,

36
00:02:44.460 --> 00:02:49.000
and make sure everyone's happy, browser,
vendors, and framework authors and things.

37
00:02:50.340 --> 00:02:51.420
Here's what it looks like.

38
00:02:52.590 --> 00:02:57.160
So we're gonna import action
from Ember object model and

39
00:02:57.160 --> 00:02:59.690
you can see we use this at sign here.

40
00:02:59.690 --> 00:03:04.270
Now, all decorators are our

41
00:03:05.350 --> 00:03:10.548
functions that have a particular kind
of signature, and it looks like this.

42
00:03:10.548 --> 00:03:16.870
myDecorator,
&gt;&gt; Mike North: obj,

43
00:03:16.870 --> 00:03:21.160
propName.

44
00:03:21.160 --> 00:03:24.280
So I have basically just
made a decorator here.

45
00:03:24.280 --> 00:03:29.700
And I can do myDecorator,
getting no errors.

46
00:03:29.700 --> 00:03:34.280
And so if we were to do that, or
find ourself in this debugger right inside

47
00:03:34.280 --> 00:03:39.140
myDecorator, the object is
the component subclass.

48
00:03:40.150 --> 00:03:45.220
And the propName is whatever we decorated,
that's it, that's all decorators are.

49
00:03:45.220 --> 00:03:49.720
That special syntax basically says
as we're setting this class up,

50
00:03:49.720 --> 00:03:52.410
it happens at class construction time.

51
00:03:52.410 --> 00:03:55.850
Gives us an opportunity to
do whatever is possible

52
00:03:55.850 --> 00:03:58.450
with these two pieces of information.

53
00:03:58.450 --> 00:04:02.350
And in this case, what action is doing,
part of what it's doing and the only part

54
00:04:02.350 --> 00:04:09.450
we care about for this course is binding
that method to the component instance,

55
00:04:09.450 --> 00:04:15.060
so that no matter how it's invoked,
this will always be the component.

56
00:04:16.310 --> 00:04:19.730
But I'm just trying to show
you kinda what a decorator is,

57
00:04:19.730 --> 00:04:22.650
just cuz not a lot of
people have seen this.

58
00:04:22.650 --> 00:04:26.230
Some frameworks like Angular
use this very heavily.

59
00:04:26.230 --> 00:04:29.620
We have decided that this
is a critical part of

60
00:04:29.620 --> 00:04:32.810
enabling native class usage with Ember.

61
00:04:32.810 --> 00:04:36.350
&gt;&gt; Speaker 2: Can you stack decorators
like that and order of invocation matters?

62
00:04:36.350 --> 00:04:37.450
&gt;&gt; Mike North: You can,
yes, top to bottom.

63
00:04:38.580 --> 00:04:40.604
It's basically just like this.

64
00:04:50.651 --> 00:04:53.916
&gt;&gt; Mike North: Think of it like that,
sorta inside out, right?

65
00:04:53.916 --> 00:04:57.330
So the lowest decorators and
vote, let me be clear.

66
00:04:57.330 --> 00:05:01.410
It's not it's not top to bottom,
it's bottom to top.

67
00:05:02.980 --> 00:05:07.830
Because they are functions and
it's basically a transform for this.

68
00:05:07.830 --> 00:05:11.230
Let me add the action decorator back in,
right?

69
00:05:11.230 --> 00:05:15.611
So this is the method and it's passed into
this, and we get to do whatever we need to

70
00:05:15.611 --> 00:05:18.740
do in there and then the result
of that is passed into this.

71
00:05:18.740 --> 00:05:23.855
We get to do that, so just think about
them in terms of functions, even though

72
00:05:23.855 --> 00:05:29.380
they have sort of a new syntax, but they
align with invocation order of functions.

73
00:05:30.470 --> 00:05:34.842
And the most likely outcome of the
proposed syntax will be if you wanted to

74
00:05:34.842 --> 00:05:36.320
export something.

75
00:05:36.320 --> 00:05:42.250
It would be the returned value of action,
whatever it does.

76
00:05:42.250 --> 00:05:45.050
You would export that, sorry, like this.

77
00:05:45.050 --> 00:05:49.160
Obviously you can't export a method,
but I just wanna come full circle and

78
00:05:49.160 --> 00:05:51.230
say it is as if they're functions.

79
00:05:51.230 --> 00:05:55.130
And they are functions, the only
thing that's different is the syntax.

80
00:05:56.180 --> 00:05:59.000
Lets you kinda be a little
be more declarative.

81
00:05:59.000 --> 00:06:01.100
So let me clean up here,

82
00:06:01.100 --> 00:06:05.885
and get back to normal,
&gt;&gt; Mike North: Valid syntax here,

83
00:06:05.885 --> 00:06:07.790
we don't need this anymore.

84
00:06:07.790 --> 00:06:10.860
That's my mini crash course on decorators.

85
00:06:10.860 --> 00:06:15.390
If we try this again,
select a user and hit sign in, now,

86
00:06:17.830 --> 00:06:22.756
well, I'll just let it play through,
clear the console, and

87
00:06:22.756 --> 00:06:27.220
the logging is successful, right?

88
00:06:27.220 --> 00:06:32.400
Now that is proof that this is now
correct and you could thread this action.

89
00:06:32.400 --> 00:06:36.200
Once something is decorated like this,
you can pass it into a component,

90
00:06:36.200 --> 00:06:42.120
which goes into a child component,
which is held until later and

91
00:06:42.120 --> 00:06:46.650
then plucked off and reused, and you're
guaranteed, there's no way to change it.

92
00:06:46.650 --> 00:06:51.050
It will always be invoked with
this being set up properly.

93
00:06:52.650 --> 00:06:54.940
And this is the way we
advise setting up actions.

94
00:06:54.940 --> 00:06:58.840
Decorate them at the definition site, and

95
00:06:58.840 --> 00:07:03.130
then use the function kinda
naturally in your templates.

96
00:07:03.130 --> 00:07:06.650
You can trust that
everything will be right.

97
00:07:06.650 --> 00:07:10.850
What's cool about this is there
are no more restrictions on

98
00:07:10.850 --> 00:07:13.040
where actions can necessarily live.

99
00:07:13.040 --> 00:07:17.600
Later we'll see we can even put an action
on a service because all it is,

100
00:07:17.600 --> 00:07:23.600
it's a function that's bound to the object
it lives on and we can sorta thread that

101
00:07:23.600 --> 00:07:28.928
through and put it where it needs
to go and everything's golden.

