WEBVTT

1
00:00:00.190 --> 00:00:03.400
&gt;&gt; Mike North: This is a pretty
silly kind of authentication

2
00:00:03.400 --> 00:00:05.390
that we're using right now.

3
00:00:05.390 --> 00:00:09.220
There is basically like you get to
select any user and you have this

4
00:00:09.220 --> 00:00:14.096
local user ID state and nothing is
done with it from that point on.

5
00:00:14.096 --> 00:00:18.060
So we're gonna create some
state that can be shared

6
00:00:18.060 --> 00:00:21.610
horizontally across different
concerns in our app.

7
00:00:21.610 --> 00:00:26.530
And we're going to do this by way
of something called a service.

8
00:00:26.530 --> 00:00:31.570
You can think of a service as an object or
a class

9
00:00:31.570 --> 00:00:38.070
where an instance of that class can
connect various unrelated things together.

10
00:00:38.070 --> 00:00:41.850
For example, the currently logged in user.

11
00:00:41.850 --> 00:00:47.550
We probably gonna have to use that
here on the side bar in order to

12
00:00:47.550 --> 00:00:49.115
display who's logged in.

13
00:00:49.115 --> 00:00:53.987
We probably wanna use it to make sure
that only logged in users can get to

14
00:00:53.987 --> 00:00:56.300
this UI that we're looking at and

15
00:00:56.300 --> 00:01:00.614
logged out users should be kinda
kicked out to the log in page.

16
00:01:00.614 --> 00:01:05.532
If we were making authenticated API calls,
which we are not, you'd probably have some

17
00:01:05.532 --> 00:01:09.336
tokens some access token
that's authentication related.

18
00:01:09.336 --> 00:01:15.130
So the alternative like to
using a service would be,

19
00:01:15.130 --> 00:01:20.430
it would involve a lot of threading things
through and passing a lot of orgs around

20
00:01:20.430 --> 00:01:23.330
to all of these different concerns
that need to know about it.

21
00:01:23.330 --> 00:01:27.500
And it would greatly
complicate our component tree.

22
00:01:28.570 --> 00:01:34.830
A service allows us to avoid that and
if you've worked with other frameworks

23
00:01:34.830 --> 00:01:41.511
this is analogous to the react context
API and to angular services, right?

24
00:01:41.511 --> 00:01:45.860
It's a way of sharing things
that does not involve passing it

25
00:01:45.860 --> 00:01:47.630
all the way through
the component tree explicitly.

26
00:01:48.970 --> 00:01:55.390
So we're going to begin by using
ember CLI to create a service.

27
00:01:55.390 --> 00:01:59.605
ember generate service, and
we're gonna call it auth.

28
00:02:02.719 --> 00:02:08.200
&gt;&gt; Mike North: And as you probably expect
by now, we got two files outta this.

29
00:02:08.200 --> 00:02:14.020
The service itself and
a passing unit test.

30
00:02:14.020 --> 00:02:15.248
So let's look at the service.

31
00:02:15.248 --> 00:02:18.570
It's an ESX class, these are very simple.

32
00:02:18.570 --> 00:02:24.786
All it does is it entrust that it is
a singleton scoped to the application.

33
00:02:24.786 --> 00:02:28.463
That doesn't- that means that like
in your acceptance testing things,

34
00:02:28.463 --> 00:02:31.660
you still will tear that
singleton down and recreate it.

35
00:02:31.660 --> 00:02:33.380
But while your app is running,

36
00:02:33.380 --> 00:02:37.496
you can be assured that this thing
will have very long life cycle, right.

37
00:02:37.496 --> 00:02:41.889
And you can store data here, and even as
the user navigates to different routes,

38
00:02:41.889 --> 00:02:46.620
and components are created and destroyed,
this thing will live a long time.

39
00:02:46.620 --> 00:02:52.470
But there's not much to it, you can kinda
think of it as a very generic object.

40
00:02:54.160 --> 00:02:58.518
So, what we want on this is to have

41
00:02:58.518 --> 00:03:05.370
a currentUserID and

42
00:03:05.370 --> 00:03:10.150
we can also have this
service handle the login and

43
00:03:10.150 --> 00:03:13.150
logout related transitions, right?

44
00:03:13.150 --> 00:03:18.350
The navigation things that happen and
what that lets us do is

45
00:03:18.350 --> 00:03:23.450
kind of encapsulate all of the author
related stuff into this one object, right?

46
00:03:23.450 --> 00:03:25.510
So it knows what it means to login and

47
00:03:25.510 --> 00:03:30.310
what it means to log out, what it means to
check whether users authenticated or not.

48
00:03:30.310 --> 00:03:33.830
And everyone else gets the benefit
of operating on a central

49
00:03:33.830 --> 00:03:35.500
definition of all those things.

50
00:03:35.500 --> 00:03:37.600
So let's get started.

51
00:03:37.600 --> 00:03:42.910
So we want a currentUserID and
I want this to survive a reload.

52
00:03:42.910 --> 00:03:45.020
So I'm gonna use local storage for this.

53
00:03:45.020 --> 00:03:48.340
I'm gonna have a property that is
based on the local storage value.

54
00:03:48.340 --> 00:03:53.234
And just for consistency's sake,
I'm gonna define a key up here.

55
00:03:59.273 --> 00:04:02.568
&gt;&gt; Mike North: Just so that when we
do reads and writes to local storage,

56
00:04:02.568 --> 00:04:06.150
I cannot make a typo and
read from one key and write to another.

57
00:04:07.330 --> 00:04:12.986
So get currentUserID and we're gonna have.

58
00:04:12.986 --> 00:04:19.709
Window.localStorage.getItem(AUTH_KEY),

59
00:04:22.342 --> 00:04:23.330
&gt;&gt; Mike North: And we have to return it.

60
00:04:25.560 --> 00:04:30.343
We can have a function here
called LoginwithUserId,

61
00:04:30.343 --> 00:04:35.124
which our log in form will
take advantage of user ID and

62
00:04:35.124 --> 00:04:39.372
what it's gonna do is window,
local storage,

63
00:04:39.372 --> 00:04:44.220
set item,
&gt;&gt; Mike North: userId.

64
00:04:44.220 --> 00:04:49.573
So effectively, like call in login with
userId, it will save it in local storage,

65
00:04:49.573 --> 00:04:54.319
getting the current userId will read
it from local storage, seems good.

66
00:04:54.319 --> 00:04:58.899
In addition to writing this thing
to local storage we want to

67
00:04:58.899 --> 00:05:01.500
trigger a change in URL, right.

68
00:05:01.500 --> 00:05:05.320
Logging in involves taking you
into the log in experience and

69
00:05:05.320 --> 00:05:10.465
that means using link to as far as
we know at this point, but there's

70
00:05:10.465 --> 00:05:15.015
another way we can programmatically do the
same thing that clicking on a link does.

71
00:05:15.015 --> 00:05:20.395
And that is through using the router
which also happens to be a service.

72
00:05:20.395 --> 00:05:24.405
So we get to consume a service now and
here's how that works.

73
00:05:24.405 --> 00:05:27.765
We're gonna import
a function called inject or

74
00:05:27.765 --> 00:05:31.383
we're gonna within this
file alias it at service.

75
00:05:38.236 --> 00:05:43.213
&gt;&gt; Mike North: So we have imported
this thing, if we can call service and

76
00:05:43.213 --> 00:05:46.751
here's how we get access to the router.

77
00:05:51.547 --> 00:05:55.680
&gt;&gt; Mike North: That's it, actually I'm
gonna keep, wow we'll do that in a second.

78
00:05:55.680 --> 00:05:58.550
So we have access to the router and

79
00:05:58.550 --> 00:06:03.410
we can just do this.router and
we have a hold of that.

80
00:06:03.410 --> 00:06:07.940
For autocomplete goodness,
I'm gonna import.

81
00:06:09.050 --> 00:06:10.410
Yeah, that'll do.

82
00:06:10.410 --> 00:06:12.470
Import the router symbol.

83
00:06:12.470 --> 00:06:16.612
Right, this is from your router JS file
and I'm just gonna use that in a comment.

84
00:06:23.230 --> 00:06:24.700
&gt;&gt; Mike North: Used as type here.

85
00:06:25.840 --> 00:06:30.605
My mistake, looks like I have
to import the base class.

86
00:06:33.351 --> 00:06:35.871
&gt;&gt; Mike North: Which makes sense
because there are no types for

87
00:06:35.871 --> 00:06:38.300
this code that we're writing here.

88
00:06:38.300 --> 00:06:42.041
So we've got router we're just
using it in the JS dot thing,

89
00:06:42.041 --> 00:06:47.070
JS.comment, but that let's us down
here do this router transition two

90
00:06:49.220 --> 00:06:52.060
and we can name the route we
wish to send the user to.

91
00:06:52.060 --> 00:06:56.444
So when they log in,
they should be sent to teams.

92
00:07:00.164 --> 00:07:03.097
&gt;&gt; Mike North: So they log in,
all we need is just pass the userId,

93
00:07:03.097 --> 00:07:07.690
it'll get saved and then the user is sent
off to the authenticated experience.

94
00:07:10.470 --> 00:07:11.900
That should be it.

95
00:07:11.900 --> 00:07:14.500
Now let's go hook it up to our login form.

96
00:07:15.520 --> 00:07:21.080
So go to login form JS, and
instead of calling this

97
00:07:21.080 --> 00:07:26.490
login with userId, you can actually
get rid of that down here.

98
00:07:27.750 --> 00:07:29.230
Well we need to inject the service, but

99
00:07:29.230 --> 00:07:34.180
down here's where we'll use that function,
log in with userId that we just made.

100
00:07:35.460 --> 00:07:41.665
So we'll import that,
inject, inject as service,

101
00:07:44.487 --> 00:07:47.133
&gt;&gt; Mike North: From ember service and

102
00:07:47.133 --> 00:07:52.284
then up here will say service auth, right,

103
00:07:52.284 --> 00:07:57.690
it is just the name of the service itself.

104
00:07:57.690 --> 00:07:59.532
We can use our JS dot thing again.

105
00:08:04.401 --> 00:08:09.680
&gt;&gt; Mike North: I’m just
trying to use autocomplete

106
00:08:09.680 --> 00:08:16.319
here to grab that import,
type authservice,

107
00:08:16.319 --> 00:08:21.257
so now we'll get auto complete for

108
00:08:21.257 --> 00:08:24.151
our local code, and

109
00:08:24.151 --> 00:08:29.100
this .auth.login with userId.

110
00:08:30.690 --> 00:08:31.655
Let's test it out.

111
00:08:38.089 --> 00:08:44.083
&gt;&gt; Mike North: So I'm just gonna check my
depth tools to make sure I have no local

112
00:08:44.083 --> 00:08:51.528
stored currently I don’t know if that
happened just now or in testing earlier.

113
00:08:51.528 --> 00:08:57.528
But it can reload and
we see there’s no local storage here,

114
00:08:57.528 --> 00:09:00.768
nothing so I’ll select a user,

115
00:09:00.768 --> 00:09:05.590
it says logging in with userId of two,
sign in.

116
00:09:05.590 --> 00:09:08.190
This is a debugger that we left here.

117
00:09:08.190 --> 00:09:09.234
We should probably remove that.

118
00:09:14.246 --> 00:09:15.799
&gt;&gt; Mike North: Let's look
at local storage again.

119
00:09:18.653 --> 00:09:22.321
&gt;&gt; Mike North: There it is, so
I've successfully saved the user ID and

120
00:09:22.321 --> 00:09:25.240
I did successfully end up on this URL.

121
00:09:25.240 --> 00:09:29.660
This is really nice cuz imagine if there
were a couple different ways to login like

122
00:09:29.660 --> 00:09:33.566
maybe when a new user is registered and
you get their information back.

123
00:09:33.566 --> 00:09:38.230
You can automatically treat
them login right after sign up.

124
00:09:38.230 --> 00:09:43.430
This gives you one central
place where anyone can

125
00:09:43.430 --> 00:09:46.440
take advantage of this stuff and
to demonstrate that.

126
00:09:49.140 --> 00:09:50.540
Well we won't worry about that yet.

127
00:09:50.540 --> 00:09:53.750
But I could show the userId
in a component as well.

128
00:09:53.750 --> 00:09:55.110
We will certainly get there.

129
00:09:56.280 --> 00:09:57.220
It's just not a value.

130
00:09:57.220 --> 00:09:59.110
A lot of value in doing
that at this moment.

131
00:10:01.770 --> 00:10:04.202
So let's check our tests.

132
00:10:09.609 --> 00:10:10.880
&gt;&gt; Mike North: Looks like.

133
00:10:13.687 --> 00:10:16.300
&gt;&gt; Mike North: Looks like
everything is okay at this point.

134
00:10:16.300 --> 00:10:17.390
So we are good to go.

135
00:10:17.390 --> 00:10:21.240
So just a recap,
we created a service called auth,

136
00:10:21.240 --> 00:10:24.890
it uses another service called router.

137
00:10:24.890 --> 00:10:29.690
The router's job is to handle transitions
to different URLs sort of like

138
00:10:29.690 --> 00:10:32.270
programmatic clicking on links.

139
00:10:32.270 --> 00:10:35.721
The auth service holds
the currently login users ID.

140
00:10:35.721 --> 00:10:39.696
It handles all the particulars of dealing
with local storage, no other part

141
00:10:39.696 --> 00:10:43.560
of the app needs to know that local
storage is what we happened to be using.

142
00:10:45.210 --> 00:10:50.080
So it's a nice encapsulation tool,
and a nice way of sharing things

143
00:10:50.080 --> 00:10:55.110
across many unrelated concerns otherwise
unrelated concerns in your app.

144
00:10:55.110 --> 00:10:58.400
All you need to remember
is inject it like that.

145
00:10:58.400 --> 00:11:01.116
So import this and use that, and

146
00:11:01.116 --> 00:11:06.380
this is just the name of the service,
the file name auth.js.

147
00:11:06.380 --> 00:11:10.445
So I will make a commit,
we have just completed step ten.

