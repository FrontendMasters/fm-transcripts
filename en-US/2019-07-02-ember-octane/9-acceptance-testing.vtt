WEBVTT

1
00:00:00.430 --> 00:00:03.770
&gt;&gt; Mike North: The next thing we're
gonna do is add an acceptance test.

2
00:00:03.770 --> 00:00:09.690
Acceptance tests are designed
to imitate user behavior.

3
00:00:09.690 --> 00:00:13.360
So we should be thinking in terms of what
would the user do in order to go through

4
00:00:13.360 --> 00:00:14.750
a particular workflow?

5
00:00:14.750 --> 00:00:20.300
You should be thinking in terms of type
in the following thing into this input.

6
00:00:20.300 --> 00:00:23.000
Click on that,
double click on this other thing.

7
00:00:23.000 --> 00:00:26.970
That's the level of granularity
you want in an acceptance test.

8
00:00:26.970 --> 00:00:30.140
If you find that you're trying
to reach into a component and

9
00:00:30.140 --> 00:00:34.010
observe some non rendered stage or
something like that.

10
00:00:34.010 --> 00:00:37.850
That is a sign that you may be going
outside of what an acceptance test is

11
00:00:37.850 --> 00:00:38.640
best at doing.

12
00:00:39.640 --> 00:00:42.580
I love the way Ember allows
us to write acceptance test,

13
00:00:42.580 --> 00:00:49.130
they're like human readable which is
wonderful cuz that's not often the case.

14
00:00:49.130 --> 00:00:55.550
Maybe I'm just scarred from some selenium
historical damage that has been done

15
00:00:55.550 --> 00:01:02.130
but it's rich really nice
point in Ember Octane.

16
00:01:02.130 --> 00:01:05.712
So, we can generate an acceptance
test with Ember CLI.

17
00:01:05.712 --> 00:01:09.535
Ember, generate, acceptance test, and

18
00:01:09.535 --> 00:01:13.474
we're gonna call this one log out, right?

19
00:01:19.214 --> 00:01:23.170
&gt;&gt; Mike North: And we can see that our
tests fail on the right, that's okay.

20
00:01:23.170 --> 00:01:26.690
We're gonna fix that in a moment and
get rid of this for now.

21
00:01:28.450 --> 00:01:33.010
So we're gonna go to tests,
acceptance and log out test.

22
00:01:34.540 --> 00:01:36.130
This is our starting point.

23
00:01:36.130 --> 00:01:40.790
And the starting point for an acceptance
test gonna take the name of the test and

24
00:01:41.790 --> 00:01:45.130
assumed that is a particular
URL that you wanna visit.

25
00:01:45.130 --> 00:01:47.810
We don't have a route called log out.

26
00:01:47.810 --> 00:01:50.930
But log out definitely describes
what I'm about to test.

27
00:01:50.930 --> 00:01:52.334
And that is the following.

28
00:01:52.334 --> 00:01:54.900
I wanna visit the teams page,

29
00:01:54.900 --> 00:01:59.400
I want to assert that we
successfully arrived at that URL.

30
00:01:59.400 --> 00:02:02.690
I wanna click on the log out button, and

31
00:02:02.690 --> 00:02:07.350
then I want to assert that we
have reached the log in screen.

32
00:02:07.350 --> 00:02:11.610
Even once we add some
authentication on top of this,

33
00:02:11.610 --> 00:02:14.770
that condition should still hold through.

34
00:02:14.770 --> 00:02:18.514
Go to teams, click log out, you should
find yourself at this screen, right?

35
00:02:18.514 --> 00:02:21.940
So eventhough we're gonna build on
top of this this is still a valuable

36
00:02:21.940 --> 00:02:22.450
test to have.

37
00:02:24.290 --> 00:02:26.330
I'm gonna change the name
of this task module.

38
00:02:26.330 --> 00:02:29.770
And that's just this string here, right?

39
00:02:29.770 --> 00:02:33.580
This string is coming from here so
I can just make this logging out.

40
00:02:36.550 --> 00:02:41.848
And we'll call this test,
which is this piece here,

41
00:02:41.848 --> 00:02:47.146
right, that's visiting/logout,
we can call this

42
00:02:47.146 --> 00:02:53.157
visiting teams,
&gt;&gt; Mike North: And clicking logout.

43
00:02:57.098 --> 00:03:00.560
&gt;&gt; Mike North: And now there we go,
acceptance, logging out,

44
00:03:00.560 --> 00:03:03.270
visiting teams and clicking log out.

45
00:03:03.270 --> 00:03:06.990
So if someone got in test
reports saying that this failed,

46
00:03:06.990 --> 00:03:10.340
we've now left a very good clue,
is to what this is all about.

47
00:03:12.090 --> 00:03:16.910
So the first step we gonna do here
is were gonna work with visit and

48
00:03:16.910 --> 00:03:19.850
visit is one of Embers test-helpers.

49
00:03:19.850 --> 00:03:23.270
So this module up here,
Ember test helpers,

50
00:03:23.270 --> 00:03:28.440
that is where you gonna find things like,
go to a URL by visiting.

51
00:03:28.440 --> 00:03:31.950
Get the current URL to assert
if you actually arrived there.

52
00:03:31.950 --> 00:03:37.644
There's a bunch of other stuff in there,
like fill in an input,

53
00:03:37.644 --> 00:03:43.456
find an element on the screen,
click or lose focus or gain focus.

54
00:03:43.456 --> 00:03:47.569
These are all things that kind of imitate
a user either typing something in or

55
00:03:47.569 --> 00:03:49.755
tabbing around and selecting various,

56
00:03:49.755 --> 00:03:52.722
like focusing on various
elements within the screen.

57
00:03:52.722 --> 00:03:58.830
So this is where you wanna reach for
these user interactions.

58
00:03:58.830 --> 00:04:04.060
And most of them are a sync
functions where you can await them.

59
00:04:04.060 --> 00:04:07.800
And the benefit of this is
if we have to fetch data

60
00:04:07.800 --> 00:04:11.290
as a result of going from
one route to another route.

61
00:04:11.290 --> 00:04:14.380
This will pause your test and wait for

62
00:04:14.380 --> 00:04:18.100
everything to settle before you
start to make your assertions.

63
00:04:18.100 --> 00:04:22.360
So it lets you pause at the right times
and then make whatever synchronous

64
00:04:22.360 --> 00:04:27.260
assertions you need to make in between
those potentially asynchronous steps.

65
00:04:27.260 --> 00:04:30.620
Like visit a URL, click on something,
fill in something, etc.

66
00:04:30.620 --> 00:04:34.760
So we'll begin by visiting teams.

67
00:04:34.760 --> 00:04:39.080
And I'll leave a comment here,
go to the /teams url.

68
00:04:41.060 --> 00:04:43.983
And we're gonna assert
that we've arrived there.

69
00:04:46.211 --> 00:04:48.130
&gt;&gt; Mike North: And
now the test starts passing.

70
00:04:48.130 --> 00:04:50.260
Let me zoom out.

71
00:04:50.260 --> 00:04:54.010
I'm gonna just filter for acceptance.

72
00:04:55.290 --> 00:04:58.760
And that way we don't have so
much noise going on in the right side.

73
00:04:58.760 --> 00:05:00.240
So we're going to /teams.

74
00:05:00.240 --> 00:05:03.100
We assert that we have,
in fact, arrived at /teams.

75
00:05:03.100 --> 00:05:08.170
So if there were some error thrown,
or we were kicked because we're

76
00:05:08.170 --> 00:05:14.420
not authenticated, this would've not held
true, the assertion would not have passed.

77
00:05:14.420 --> 00:05:17.820
We're going to click on
the appropriate DOM element, so

78
00:05:17.820 --> 00:05:21.870
I'm gonna open up a new tab and
go to /teams.

79
00:05:21.870 --> 00:05:25.769
I just wanna figure out for
that logout button,

80
00:05:25.769 --> 00:05:28.607
what is the selector I want to use?

81
00:05:32.528 --> 00:05:37.680
&gt;&gt; Mike North: It looks like we've got
teams-sidebar_logout button there.

82
00:05:37.680 --> 00:05:38.881
So I'm gonna grab that.

83
00:05:41.264 --> 00:05:44.741
&gt;&gt; Mike North: That seems like it's unique
enough that it should only apply to that

84
00:05:44.741 --> 00:05:47.700
button and
not accidentally to other things.

85
00:05:47.700 --> 00:05:49.760
So let's say await click.

86
00:05:49.760 --> 00:05:54.100
This is gonna auto import click
from Ember test helpers or should.

87
00:05:56.330 --> 00:06:00.380
Guess not, we can do it manually.

88
00:06:00.380 --> 00:06:02.380
Pass in the selector that we wanna click.

89
00:06:03.940 --> 00:06:09.141
And, then I'm going to

90
00:06:09.141 --> 00:06:17.480
assert that the current URL is login.

91
00:06:17.480 --> 00:06:22.110
And the test passes, so seems pretty easy.

92
00:06:22.110 --> 00:06:24.990
Seems like this is again very semantic.

93
00:06:24.990 --> 00:06:26.900
Each of these lines has a meaning, right?

94
00:06:30.060 --> 00:06:36.783
Click the logout button and
then asserting that URLs are as they are.

95
00:06:36.783 --> 00:06:39.240
I wanna show you kind of what's going on.

96
00:06:39.240 --> 00:06:42.620
We can put debuggers in
between these weights.

97
00:06:42.620 --> 00:06:46.340
There's a great way to shake
problems out of these tests.

98
00:06:46.340 --> 00:06:51.372
And I wanna focus on this iFrame
at the bottom of the screen.

99
00:06:54.212 --> 00:06:55.030
&gt;&gt; Mike North: Let's try again.

100
00:06:56.830 --> 00:06:57.647
Here's the iFrame.

101
00:07:00.612 --> 00:07:02.170
&gt;&gt; Mike North: Come on, zoom out.

102
00:07:03.390 --> 00:07:05.800
There we go.
So here here's our test runner UI and

103
00:07:05.800 --> 00:07:08.270
this is our actual app.

104
00:07:08.270 --> 00:07:10.850
It's formated oddly but who cares.

105
00:07:11.960 --> 00:07:15.380
But it's at this particular URL and

106
00:07:15.380 --> 00:07:19.680
it's rendered so
we can see it's running our app for real.

107
00:07:19.680 --> 00:07:22.330
The whole app in its entirety.

108
00:07:22.330 --> 00:07:25.053
And if I were then to
set another debugger.

109
00:07:29.029 --> 00:07:31.730
&gt;&gt; Mike North: Sorry this is
a very thin line to try to grab.

110
00:07:31.730 --> 00:07:35.590
Just set another break point here and
let's play forward.

111
00:07:35.590 --> 00:07:38.060
I can see that we're at
the log in screen now.

112
00:07:38.060 --> 00:07:43.960
So you can a sync in a way make it
very easy to stop at various points.

113
00:07:45.050 --> 00:07:49.590
We might have just started writing this
test and figure it out what's that button?

114
00:07:49.590 --> 00:07:52.540
What's the correct thing to find for
that button, right?

115
00:07:52.540 --> 00:07:54.430
What's the class I wanna click on.

116
00:07:54.430 --> 00:07:59.630
It would be very easy to just get
to a point, need more information,

117
00:07:59.630 --> 00:08:00.660
debugger, and

118
00:08:00.660 --> 00:08:04.280
you can just drill into this page, just
like you would drill into anything else.

119
00:08:05.780 --> 00:08:09.240
Acceptance tests are a little bit
slower than other types of tests.

120
00:08:09.240 --> 00:08:14.040
There's three orders of magnitude
slower than unit tests, so

121
00:08:14.040 --> 00:08:17.500
don't get all of your release
confidence with these.

122
00:08:17.500 --> 00:08:23.030
But these are excellent for protecting
critical workflows from regression.

123
00:08:23.030 --> 00:08:27.140
And for something like this,
I would not reach for anything else.

124
00:08:27.140 --> 00:08:31.310
This is the ideal kind of test for
a login or logout workflow and

125
00:08:31.310 --> 00:08:32.510
make sure everything's copacetic.

