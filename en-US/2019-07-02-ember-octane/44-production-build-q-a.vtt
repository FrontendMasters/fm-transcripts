WEBVTT

1
00:00:00.470 --> 00:00:01.100
&gt;&gt; Mike North: Yes sir.

2
00:00:01.100 --> 00:00:01.960
&gt;&gt; Speaker 2: Just was gonna ask,

3
00:00:01.960 --> 00:00:05.950
do you know about how much of that
performance is coming from Fastboot?

4
00:00:05.950 --> 00:00:10.130
Versus like, cuz I'm sure that's a big
improvement for that first pane.

5
00:00:10.130 --> 00:00:15.091
&gt;&gt; Mike North: Absolutely, so first of all
the absolutely the first meaningful pain,

6
00:00:15.091 --> 00:00:18.041
that is definitely coming from Fastboot.

7
00:00:18.041 --> 00:00:24.190
And if we were to look at performance time
line here, you can see that we're like,

8
00:00:25.370 --> 00:00:31.740
that first screenshot's coming in at,
yeah.

9
00:00:31.740 --> 00:00:35.080
Like if this is 500 milliseconds,
and this is 250,

10
00:00:35.080 --> 00:00:39.050
you can kinda see it start to render here.

11
00:00:39.050 --> 00:00:42.610
There, right there you can see that
this is the server rendering it.

12
00:00:42.610 --> 00:00:48.130
And then this is the client where all
of the images are finally landing.

13
00:00:48.130 --> 00:00:52.700
But we get a very, very,
very good head start from Fastboot.

14
00:00:52.700 --> 00:00:57.100
And part of the strategy here is making
it to server rendering is easy for

15
00:00:57.100 --> 00:00:58.820
anyone to set up.

16
00:00:58.820 --> 00:01:04.410
And that is not the case for
a lot of other technologies where you're

17
00:01:04.410 --> 00:01:07.560
assembling together sort
of your own framework.

18
00:01:07.560 --> 00:01:11.430
And you don't necessarily
have guarantees that

19
00:01:11.430 --> 00:01:14.740
all of those things will play
nice in a node environment.

20
00:01:14.740 --> 00:01:19.963
But the aim is, as long as you're not
using browser specific API's like

21
00:01:19.963 --> 00:01:25.713
local storage, you should be able to
install Fastboot and it should just work.

22
00:01:28.517 --> 00:01:30.010
&gt;&gt; Mike North: Other questions, yes?

23
00:01:30.010 --> 00:01:32.240
&gt;&gt; Speaker 3: Can you point us
to any additional insight or

24
00:01:32.240 --> 00:01:35.620
documentation on how you put
together that server script?

25
00:01:36.940 --> 00:01:38.550
&gt;&gt; Mike North: Good question there,

26
00:01:38.550 --> 00:01:44.311
cuz I just got official confirmation that
what I'm doing is not hokey in any way,

27
00:01:44.311 --> 00:01:49.075
and you should be able to depend on
this being a thing of the future.

28
00:01:49.075 --> 00:01:54.174
So the first thing is if you
happen to have a folder in

29
00:01:54.174 --> 00:02:01.645
your project called server, and
that happens to have an index.js file and

30
00:02:01.645 --> 00:02:08.896
you happen to be exporting an express
server of some kind from that file.

31
00:02:08.896 --> 00:02:11.629
That will be used as, or

32
00:02:11.629 --> 00:02:18.080
it'll be run as your
Ember CLI development server.

33
00:02:18.080 --> 00:02:21.060
So we run Ember Serve, and

34
00:02:21.060 --> 00:02:24.360
it's just sort of tacking on to
whatever I export from here.

35
00:02:25.430 --> 00:02:28.714
If you're hitting static assets,
that's what's gonna be used.

36
00:02:28.714 --> 00:02:32.700
Ember CLI just stacks
another Express middleware

37
00:02:32.700 --> 00:02:34.990
on top of whatever I've got here.

38
00:02:34.990 --> 00:02:40.400
So that's how I was able to sort of have
additional things in general running

39
00:02:40.400 --> 00:02:42.400
on top of Ember Serve.

40
00:02:42.400 --> 00:02:48.751
In terms of the development tool that
I'm using for the API for this workshop.

41
00:02:48.751 --> 00:02:52.783
&gt;&gt; Mike North: It's called JSON server,
and

42
00:02:52.783 --> 00:02:57.200
I absolutely love this thing.

43
00:02:57.200 --> 00:03:03.320
So the whole point of this is a fake rest
API with 0 coding in less than 30 seconds.

44
00:03:03.320 --> 00:03:09.460
This is where we're just porting it to
this db.json file and letting it rip.

45
00:03:09.460 --> 00:03:12.100
And that is the simplest
implementation here.

46
00:03:12.100 --> 00:03:15.050
Or you just,
you'd be able to just point it.

47
00:03:15.050 --> 00:03:17.520
Or you could,
you don't even have to write any code.

48
00:03:17.520 --> 00:03:20.020
You could just do something like that and
it works.

49
00:03:20.020 --> 00:03:22.420
Now I've had to massage it slightly so

50
00:03:22.420 --> 00:03:25.274
that we have some of
those nested resources.

51
00:03:25.274 --> 00:03:29.005
Like when you request a team,
you always get the list of channels and

52
00:03:29.005 --> 00:03:32.220
the records are embedded
right in that response.

53
00:03:32.220 --> 00:03:38.840
But in total,
it's like less than 60 lines of code.

54
00:03:38.840 --> 00:03:42.590
And most of that is just URL remapping,
and

55
00:03:42.590 --> 00:03:46.150
this is like the created at
field being added to a record.

56
00:03:46.150 --> 00:03:49.730
It has been a great tool to use.

57
00:03:49.730 --> 00:03:55.144
So, I am going to recommend it to
my colleague instructors as a good

58
00:03:55.144 --> 00:04:00.173
thing to consider as a way to
have a reproducible fullstack app

59
00:04:00.173 --> 00:04:05.228
where you donâ€™t have to depend
on some other server being up.

60
00:04:05.228 --> 00:04:07.550
Because things happen.

61
00:04:07.550 --> 00:04:09.640
Conference WiFi is a workshop killer.

62
00:04:11.260 --> 00:04:11.800
Yes
&gt;&gt; Speaker 4: So

63
00:04:11.800 --> 00:04:15.490
if I'm pointing in the production API
though, then I could probably delete a lot

64
00:04:15.490 --> 00:04:18.650
of the code in this file
&gt;&gt; Mike North: If you're pointing at

65
00:04:18.650 --> 00:04:22.110
a production API, but
you still want to have something else run

66
00:04:22.110 --> 00:04:24.648
with Ember Serve-
&gt;&gt; Speaker 4: Just to get Fastboot in

67
00:04:24.648 --> 00:04:26.468
production
&gt;&gt; Mike North: Sorry,

68
00:04:26.468 --> 00:04:30.990
Fastboot in production,
that is run a different way.

69
00:04:30.990 --> 00:04:36.310
That is ProdServer.js.

70
00:04:36.310 --> 00:04:37.755
There you go.

71
00:04:37.755 --> 00:04:39.540
&gt;&gt; Speaker 4: [CROSSTALK]
&gt;&gt; Mike North: Ember in production.

72
00:04:39.540 --> 00:04:40.910
ProdServver.js.

73
00:04:40.910 --> 00:04:42.920
So let me get rid of this sidebar.

74
00:04:44.120 --> 00:04:49.340
So we've got an express
server that is designed,

75
00:04:49.340 --> 00:04:52.138
that is part of Fastboot app server.

76
00:04:52.138 --> 00:04:59.510
I am providing that to
this setupApiServer.

77
00:04:59.510 --> 00:05:02.020
So even when we're running in prod mode,

78
00:05:02.020 --> 00:05:05.590
I'm still grabbing that JSON server
thing that I just talked to you about.

79
00:05:05.590 --> 00:05:07.720
So that's all this does.

80
00:05:07.720 --> 00:05:09.940
And then this is setting it up by saying,

81
00:05:09.940 --> 00:05:14.369
look to the dist folder,
use gzip compression, run on port 4000.

82
00:05:15.890 --> 00:05:17.050
And then start it up.

83
00:05:17.050 --> 00:05:18.030
But, this is it.

84
00:05:18.030 --> 00:05:18.700
It's all it takes.

85
00:05:19.940 --> 00:05:25.720
Not too much, and we maintain this
as the official Ember project.

86
00:05:25.720 --> 00:05:29.380
So, you can be sure that it will
always be up to date with Fastboot.

