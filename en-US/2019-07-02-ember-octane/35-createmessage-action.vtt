WEBVTT

1
00:00:00.060 --> 00:00:04.798
&gt;&gt; Mike North: The next two things we're
going to do are creating a chat message,

2
00:00:04.798 --> 00:00:09.889
like adding a new chat message to
a channel and deleting a chat message.

3
00:00:09.889 --> 00:00:14.569
So if you hover over these you can
see you got a little trash can,

4
00:00:14.569 --> 00:00:18.202
we're gonna turn that
into a delete operation.

5
00:00:18.202 --> 00:00:23.109
So, we're gonna begin by looking
at the API examples file just

6
00:00:23.109 --> 00:00:27.840
to see what it takes to create
a message and delete a message.

7
00:00:27.840 --> 00:00:30.430
That's gonna drive what
we have to do here.

8
00:00:31.700 --> 00:00:38.215
I can see that creating a message,
we can pass a user ID.

9
00:00:38.215 --> 00:00:43.261
I also happen to know if you pass
a whole user object there, if we had to.

10
00:00:43.261 --> 00:00:46.245
And deleting a message
is a delete request,

11
00:00:46.245 --> 00:00:50.044
treating messages as a top
level API resource, right?

12
00:00:50.044 --> 00:00:52.776
This is not nested thing anymore.

13
00:00:52.776 --> 00:00:57.560
So it's a delete call to messages,
slash, and then,

14
00:00:57.560 --> 00:01:01.620
a message ID,
which will be up here, like id.

15
00:01:01.620 --> 00:01:04.884
But obviously we don't pass
an ID to our back end,

16
00:01:04.884 --> 00:01:07.079
the back end creates that for us.

17
00:01:07.079 --> 00:01:13.334
Let's go, so I want our presentation

18
00:01:13.334 --> 00:01:20.374
components to remain presentation only.

19
00:01:20.374 --> 00:01:24.018
So this whole business of creating and
deleting chat messages,

20
00:01:24.018 --> 00:01:26.454
I want that to be handled
in the container.

21
00:01:26.454 --> 00:01:30.931
And I want the actions that relate
to those two operations to be

22
00:01:30.931 --> 00:01:35.680
threaded through and
wired up in the respective correct places.

23
00:01:35.680 --> 00:01:40.111
But those components should not know
much about what all is going on.

24
00:01:40.111 --> 00:01:44.050
They she just know how to use this
thing and not how they're defined.

25
00:01:44.050 --> 00:01:48.010
So we're gonna go to the chat container
and we're going to create a new action.

26
00:01:48.010 --> 00:01:52.488
And here we are,
we're gonna just call it createMessage.

27
00:01:55.935 --> 00:01:59.362
&gt;&gt; Mike North: And
we only need the body of the message.

28
00:01:59.362 --> 00:02:03.963
In order to make the API call properly,
we will need a user as well.

29
00:02:03.963 --> 00:02:09.270
However, we kinda can get
that by another means.

30
00:02:09.270 --> 00:02:11.420
We can use the auth service, right?

31
00:02:11.420 --> 00:02:16.090
That's sort of a global concern,
the currently logged in user.

32
00:02:16.090 --> 00:02:19.180
So we can just operate in
terms of the message body.

33
00:02:20.890 --> 00:02:25.280
We're going to grab the channel ID and
the team ID,

34
00:02:25.280 --> 00:02:32.100
just the same way we did up here, because
those are part of the payload here.

35
00:02:32.100 --> 00:02:34.464
Just looking at this there's our team ID,
our channel ID.

36
00:02:34.464 --> 00:02:39.950
So, we need both of those
to be in the fetch body.

37
00:02:39.950 --> 00:02:42.637
And let's go off to the races.

38
00:02:42.637 --> 00:02:45.257
So do we have fetch already imported?

39
00:02:45.257 --> 00:02:49.827
We do, so we can say, a response,

40
00:02:49.827 --> 00:02:55.356
await fetch and we'll grab the URL here.

41
00:02:55.356 --> 00:03:00.528
Well, that's simple enough, API messages.

42
00:03:00.528 --> 00:03:03.183
Now, we kinda make this an async function.

43
00:03:07.999 --> 00:03:11.490
&gt;&gt; Mike North: Now,
fetch by default will make a GET request.

44
00:03:11.490 --> 00:03:15.130
But this is not what we want
in order to create a message.

45
00:03:15.130 --> 00:03:20.770
We want a POST request, and we wanna pass
this header along for the ride as well.

46
00:03:20.770 --> 00:03:22.440
So I'm gonna copy that to my clipboard so

47
00:03:22.440 --> 00:03:26.790
we can use it appropriately
in the fetch options.

48
00:03:27.930 --> 00:03:33.380
So we'll say method is POST,

49
00:03:33.380 --> 00:03:36.653
headers is that.

50
00:03:39.604 --> 00:03:42.134
&gt;&gt; Mike North: So
that's part of what we need.

51
00:03:42.134 --> 00:03:43.300
We also need a body.

52
00:03:45.410 --> 00:03:51.640
And that's gonna be some JSON thing,
right?

53
00:03:51.640 --> 00:03:54.110
This is an object,
it's gonna be the payload.

54
00:03:54.110 --> 00:03:55.436
And if I look at my example,

55
00:03:55.436 --> 00:03:58.161
let's just start with the sample
payload we have here.

56
00:04:05.244 --> 00:04:06.332
&gt;&gt; Mike North: So there we go, so

57
00:04:06.332 --> 00:04:10.485
I would always post to a particular
team with a particular channel.

58
00:04:10.485 --> 00:04:13.657
We can remove this hard-coded stuff,
so teamId,

59
00:04:13.657 --> 00:04:16.510
we already have a variable up there.

60
00:04:16.510 --> 00:04:17.820
So we can just do that.

61
00:04:17.820 --> 00:04:24.940
Channel ID, make my life easy if I make
a little destructure alias up there.

62
00:04:24.940 --> 00:04:27.340
So now channelId looks good.

63
00:04:29.130 --> 00:04:32.130
userId, we gotta get off
of the auth service.

64
00:04:32.130 --> 00:04:35.284
And the body we're gonna be given.

65
00:04:35.284 --> 00:04:38.068
And that's already the correct name.

66
00:04:39.110 --> 00:04:44.377
&gt;&gt; Mike North: Wonderful, so
all I need is to have a userId variable

67
00:04:44.377 --> 00:04:49.200
up here that gets what
we're interested in.

68
00:04:49.200 --> 00:04:51.660
Do we already have
the auth service injected?

69
00:04:51.660 --> 00:04:53.100
We do not, so we'll need to do that.

70
00:04:55.450 --> 00:05:04.023
Import inject as service
from @ember/service and

71
00:05:04.023 --> 00:05:10.659
we can just do inject or @service auth.

72
00:05:10.659 --> 00:05:18.515
And I'll use this, right?

73
00:05:18.515 --> 00:05:20.674
That gives us that nice auto complete.

74
00:05:26.107 --> 00:05:30.615
&gt;&gt; Mike North: Build error,
I have an incomplete expression, so yes,

75
00:05:30.615 --> 00:05:33.140
very much a build error.

76
00:05:33.140 --> 00:05:37.687
So this.auth and currentUserId.

77
00:05:40.853 --> 00:05:45.138
&gt;&gt; Mike North: Okay, and
we have our response.

78
00:05:45.138 --> 00:05:48.321
So we can start here right now.

79
00:05:50.866 --> 00:05:53.434
&gt;&gt; Mike North: We're gonna
run into an issue, and

80
00:05:53.434 --> 00:05:57.296
I'll tell you what it is already so
we can look for it.

81
00:05:57.296 --> 00:06:06.240
The source of truth for our messages in
the channel is this array called messages.

82
00:06:06.240 --> 00:06:09.680
And even though we make this API call,

83
00:06:09.680 --> 00:06:13.570
we would have to do something specific
to add that to the messages array.

84
00:06:15.040 --> 00:06:19.380
And we're not doing that yet, but we'll be
able to test this out in a basic way by

85
00:06:19.380 --> 00:06:23.860
creating a message and then doing
a refresh, triggering a fresh load of any

86
00:06:23.860 --> 00:06:28.300
new stuff that happens to be there
in our little JSON database.

87
00:06:28.300 --> 00:06:30.570
So I think this is enough for
us to start wiring things up.

