WEBVTT

1
00:00:00.300 --> 00:00:03.850
&gt;&gt; Mike North: Currently I can see
I'm logged in, let me just refresh.

2
00:00:03.850 --> 00:00:08.220
Looks like that's firmly in local storage,
I should click log out.

3
00:00:10.250 --> 00:00:12.000
And it's gone from local storage.

4
00:00:12.000 --> 00:00:17.950
I am not logged in anymore and if I
try to hit the back button to go like,

5
00:00:17.950 --> 00:00:22.421
that was the team's page there or
if I try to go to like slash Teams.

6
00:00:23.900 --> 00:00:26.680
I just keep seeing this login screen,
right?

7
00:00:26.680 --> 00:00:31.260
And it's not like it's just rendering
the lot the login screen for that URL.

8
00:00:31.260 --> 00:00:34.160
I'm actually redirected.

9
00:00:34.160 --> 00:00:40.170
Log back in, sign in and now I can refresh
all I want and I remain logged in.

10
00:00:40.170 --> 00:00:41.800
And there's my local storage.

11
00:00:41.800 --> 00:00:45.880
So there you go, we've got some state
that's saved in local storage and

12
00:00:45.880 --> 00:00:47.520
we have guarded our routes.

13
00:00:47.520 --> 00:00:49.920
We've got login, logout.

14
00:00:49.920 --> 00:00:54.880
And it's pretty easy to see
how these actions with the on

15
00:00:54.880 --> 00:00:59.380
modifier can wire things up and there's
not a lot of ceremony involved with

16
00:00:59.380 --> 00:01:02.200
getting the right things,
triggering the right responses.

17
00:01:05.010 --> 00:01:07.948
Let's check our tests to make
sure they are still looking good.

18
00:01:11.949 --> 00:01:14.870
&gt;&gt; Mike North: I left
a paused test in there, oops.

19
00:01:16.050 --> 00:01:19.145
That's okay, that's how you know
that this is the real deal.

20
00:01:19.145 --> 00:01:23.141
We have await pause test.

21
00:01:23.141 --> 00:01:27.113
Okay, having removed that and
from our logout test,

22
00:01:27.113 --> 00:01:31.534
that erroneous line,
we can see that things are not happy.

23
00:01:31.534 --> 00:01:37.144
And forecasts are failing,
so the sidebar's failing.

24
00:01:37.144 --> 00:01:42.086
This to me as an ember aficionado,
I can tell you this looks a lot like

25
00:01:42.086 --> 00:01:46.946
we have our initially generated
test that ember gave us and

26
00:01:46.946 --> 00:01:51.770
we've put stuff in this component and
it's no longer empty.

27
00:01:51.770 --> 00:01:54.014
So that's not gonna be
an interesting one to fix.

28
00:01:54.014 --> 00:01:59.090
I'm gonna worry most about
this acceptance test so

29
00:01:59.090 --> 00:02:03.070
I can click rerun, now we're only
looking at this one test here.

30
00:02:03.070 --> 00:02:06.400
So let's look at the title
that we left ourselves.

31
00:02:06.400 --> 00:02:09.690
It is a test for
logging out visiting teams,

32
00:02:09.690 --> 00:02:14.390
clicking logout so
that should in fact log you out.

33
00:02:14.390 --> 00:02:17.680
And it looks like we expected

34
00:02:19.400 --> 00:02:24.870
to land on teams and instead we
found ourselves at the login page.

35
00:02:24.870 --> 00:02:29.135
To me, this looks like we've
been redirected, right?

36
00:02:29.135 --> 00:02:33.442
The test started, we were not
authenticated, we tried to go to teams and

37
00:02:33.442 --> 00:02:36.349
we could never reach there,
we were kicked out.

38
00:02:37.480 --> 00:02:42.180
So we can use our stub service for this,
thank goodness we put this in place.

39
00:02:42.180 --> 00:02:46.830
All we need to do is set ourselves up at
the beginning of this test with a user ID.

40
00:02:46.830 --> 00:02:51.010
Does everyone understand why it
has this failing now though?

41
00:02:51.010 --> 00:02:51.870
We've been kicked out.

42
00:02:51.870 --> 00:02:58.510
This feature we added has appropriately
said there is no current user for you.

43
00:02:58.510 --> 00:03:02.910
So here we go, this owner, look up.

44
00:03:02.910 --> 00:03:04.540
So we're grabbing the service.

45
00:03:08.130 --> 00:03:13.721
This is our instance of the service and
we can just say current user ID is 1.

46
00:03:16.558 --> 00:03:19.580
&gt;&gt; Mike North: And
now what's going on here?

47
00:03:21.240 --> 00:03:23.070
Undefined is not a valid call back.

48
00:03:24.630 --> 00:03:27.840
Okay, I can tell you what this is too.

49
00:03:27.840 --> 00:03:32.166
So what's changed about
our auth service recently?

50
00:03:32.166 --> 00:03:33.620
&gt;&gt; Student: We added a function, log out.

51
00:03:33.620 --> 00:03:35.530
&gt;&gt; Mike North: We added
this log out action, and

52
00:03:35.530 --> 00:03:38.570
our stub service has this or doesn't?

53
00:03:38.570 --> 00:03:42.220
Doesn't, so we've tried,
we've swapped out the service,

54
00:03:42.220 --> 00:03:44.030
we're using that in our tests.

55
00:03:44.030 --> 00:03:48.300
And it's saying okay,
on modifier when the logout buttons click,

56
00:03:48.300 --> 00:03:52.980
it's this dot off, dot log out,
and that's undefined.

57
00:03:52.980 --> 00:03:55.550
So the on modifier can't
even set itself up properly.

58
00:03:56.770 --> 00:03:57.805
Let's go take care of it.

59
00:04:03.143 --> 00:04:06.098
&gt;&gt; Mike North: So here,
someone help me out,

60
00:04:06.098 --> 00:04:11.108
how would I implement log
out with the stub service?

61
00:04:11.108 --> 00:04:12.529
&gt;&gt; Student: User ID to null.

62
00:04:12.529 --> 00:04:13.303
&gt;&gt; Mike North: Works for me.

63
00:04:18.276 --> 00:04:21.728
&gt;&gt; Mike North: And we're gonna use the
action decorator to make sure that it gets

64
00:04:21.728 --> 00:04:22.682
bound properly.

65
00:04:29.142 --> 00:04:33.083
&gt;&gt; Mike North: Now we're down to one,
what's going on?

66
00:04:33.083 --> 00:04:36.465
Visiting teams,
clicking logout, that failed.

67
00:04:36.465 --> 00:04:39.150
&gt;&gt; Student2: Do you want to
transition back to login?

68
00:04:39.150 --> 00:04:39.655
&gt;&gt; Mike North: Pardon?

69
00:04:39.655 --> 00:04:43.690
&gt;&gt; Student3: You were checking that it
went to the URL, but it got redirected?

70
00:04:43.690 --> 00:04:48.799
&gt;&gt; Mike North: Checking that it went
to the URL, but it got redirected.

71
00:04:48.799 --> 00:04:50.455
&gt;&gt; Student4: You failed later on the test.

72
00:04:50.455 --> 00:04:53.800
&gt;&gt; Mike North: Later on I expected login,
got it.

73
00:04:53.800 --> 00:04:55.830
And I should still be at teams.

74
00:04:57.320 --> 00:05:00.429
&gt;&gt; Student2: Because in your mark,
you didn't redirect.

75
00:05:00.429 --> 00:05:02.105
&gt;&gt; Mike North: Thank you, good catch.

76
00:05:02.105 --> 00:05:04.680
So we need to add that to log out.

77
00:05:04.680 --> 00:05:06.416
That's the best way to do this, right?

78
00:05:06.416 --> 00:05:08.226
Rather than insert it into the test.

79
00:05:16.803 --> 00:05:18.925
&gt;&gt; Mike North: Now we're good to go.

80
00:05:18.925 --> 00:05:22.145
&gt;&gt; Student3: Why didn't you
use the action decorator

81
00:05:22.145 --> 00:05:25.900
on the other method above on the user ID?

82
00:05:25.900 --> 00:05:26.710
&gt;&gt; Mike North: Good question.

83
00:05:26.710 --> 00:05:29.470
Why didn't I use an action decorator here.

84
00:05:29.470 --> 00:05:32.750
Under what circumstances should
I use an action decorator?

85
00:05:32.750 --> 00:05:33.890
&gt;&gt; Student3: Calling it from the template.

86
00:05:33.890 --> 00:05:34.970
&gt;&gt; Mike North: Yes, and

87
00:05:34.970 --> 00:05:38.710
it turns out this particular method
is never called from a template.

88
00:05:38.710 --> 00:05:44.150
It is called from log in forum here.

89
00:05:44.150 --> 00:05:47.070
&gt;&gt; Student4: Is there any harm from
adding the action decorator to that

90
00:05:47.070 --> 00:05:49.950
method in case you might call for
the template later on?

91
00:05:49.950 --> 00:05:55.780
&gt;&gt; Mike North: It's unnecessary and
I would say like,

92
00:05:55.780 --> 00:06:00.680
mild harm in that you're sending
a signal to your fellow developers that

93
00:06:00.680 --> 00:06:04.290
this is a template consumed function.

94
00:06:04.290 --> 00:06:08.330
Also if for some strange reason you

95
00:06:09.500 --> 00:06:15.806
depended on this being something
very specific that's not the class.

96
00:06:15.806 --> 00:06:20.820
It's like mega convoluted,
but I would just

97
00:06:20.820 --> 00:06:26.410
generally say it's not necessary and it
would kinda be in the same realm as like

98
00:06:26.410 --> 00:06:32.330
we don't wrap everything in promises just
in case they might one day be a sync.

99
00:06:32.330 --> 00:06:35.992
Same deal here,
you wanna use code with intent.

100
00:06:35.992 --> 00:06:40.712
I would definitely not put it on
absolutely everything cuz effectively what

101
00:06:40.712 --> 00:06:45.577
this is doing is, it's creating a bound
version of the method on each instants

102
00:06:45.577 --> 00:06:49.120
of the component or
on each instance of the service.

103
00:06:49.120 --> 00:06:53.970
So it marginally increases the cost,
the memory footprint of each instance.

104
00:06:53.970 --> 00:06:58.085
But that's the only way that we can
make sure that like these functions

105
00:06:58.085 --> 00:06:59.490
are properly handled.

