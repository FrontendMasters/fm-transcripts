WEBVTT

1
00:00:00.270 --> 00:00:03.220
&gt;&gt; Mike North: The last thing we need to
do around helpers is write a test for it.

2
00:00:03.220 --> 00:00:06.460
And we call this kind of
test an integration test,

3
00:00:06.460 --> 00:00:11.620
because we're testing the helper through
its contract with the outside world.

4
00:00:11.620 --> 00:00:16.680
We're using this helper in the same
way that other code that needs to

5
00:00:16.680 --> 00:00:19.240
leverage the helper would use it.

6
00:00:19.240 --> 00:00:23.250
We're not using it in the contrived way,
we're using it in the normal way.

7
00:00:23.250 --> 00:00:24.710
Passing the normal arguments,

8
00:00:24.710 --> 00:00:27.510
using it's public interface
with the rest of the world.

9
00:00:28.590 --> 00:00:31.770
So let's go and
look at our format time stamp test.

10
00:00:31.770 --> 00:00:37.890
And this is the path of that file,
so it's gonna be tests integration.

11
00:00:37.890 --> 00:00:39.920
And I'm getting a nice autocomplete here,
but

12
00:00:39.920 --> 00:00:43.970
it's integration/helpers
format times dev test.

13
00:00:45.340 --> 00:00:47.030
And this is how it looks.

14
00:00:48.430 --> 00:00:51.020
And I'm going to go to /tests.

15
00:00:52.690 --> 00:00:54.684
And our test is currently failing.

16
00:00:57.072 --> 00:01:00.226
&gt;&gt; Mike North: It's failing
because the starting point for

17
00:01:00.226 --> 00:01:06.210
this test just passes 1234 to our
function, and it expects 1234 to come out.

18
00:01:06.210 --> 00:01:09.180
And this was the state of
things when we began, but

19
00:01:09.180 --> 00:01:11.000
it's not how things work right now.

20
00:01:11.000 --> 00:01:16.040
Now if we look at these three lines,
this is the meaningful part of this test.

21
00:01:16.040 --> 00:01:19.960
Everything else is sort of
generic two-unit setup.

22
00:01:21.090 --> 00:01:24.300
What we're doing here is we're
creating a value that kind of lives

23
00:01:24.300 --> 00:01:25.690
outside the helper.

24
00:01:25.690 --> 00:01:30.900
And it is destined to be passed
into the helper as an argument.

25
00:01:30.900 --> 00:01:32.580
So we're setting input value.

26
00:01:32.580 --> 00:01:37.190
We're kind of creating input
value in the context around

27
00:01:37.190 --> 00:01:42.080
this snippet of handle bars
template that is part of our test.

28
00:01:42.080 --> 00:01:43.000
This is really cool.

29
00:01:43.000 --> 00:01:47.290
We get to use the same kind of mark up

30
00:01:47.290 --> 00:01:52.010
to define our test scenarios that we use
when we are actually using this thing.

31
00:01:53.170 --> 00:01:58.740
So let's change this and make it myDate,
and we're gonna make it like.

32
00:02:04.513 --> 00:02:06.040
&gt;&gt; Mike North: Make it
something like that.

33
00:02:07.550 --> 00:02:09.130
You can make this date whatever you want.

34
00:02:10.200 --> 00:02:14.200
Now we're getting a problem here where
it's failing in a different way, and

35
00:02:14.200 --> 00:02:17.350
that's because input value does not exist.

36
00:02:17.350 --> 00:02:21.380
So we're gonna say, okay,
I'm gonna pass you my date instead.

37
00:02:22.900 --> 00:02:27.160
So now we can see that
what was expected here.

38
00:02:27.160 --> 00:02:30.960
We expected 1234,
what we got instead was this string.

39
00:02:32.750 --> 00:02:34.970
And that is coming from
the final line here.

40
00:02:34.970 --> 00:02:37.120
This is the assertion in the test.

41
00:02:37.120 --> 00:02:42.670
It's grabbing an element that kind of
wraps our little snippet of handle bars.

42
00:02:42.670 --> 00:02:49.549
Getting its text content, trimming away
white space, and comparing that to 1234.

43
00:02:49.549 --> 00:02:52.650
So we wanna compare it to
the value we expect to get out.

44
00:02:54.450 --> 00:03:00.850
And now, it's disappeared cuz the test is
green, and we are green, and good to go.

45
00:03:01.860 --> 00:03:04.030
So, now we're done.

46
00:03:04.030 --> 00:03:05.890
We've written a helper.

47
00:03:05.890 --> 00:03:08.610
Well, we started with
a generic JavaScript function,

48
00:03:08.610 --> 00:03:12.130
we wrapped a very thin
layer of ember around that.

49
00:03:12.130 --> 00:03:13.610
It's it's two lines.

50
00:03:15.000 --> 00:03:16.840
And I recommend that you
write your apps this way.

51
00:03:16.840 --> 00:03:20.877
You should be writing regular
JavaScript apps that have a like M&amp;Ms,

52
00:03:20.877 --> 00:03:23.520
it has like a firm Ember shell around it.

53
00:03:24.530 --> 00:03:27.315
So it doesn't melt in your hand.

54
00:03:27.315 --> 00:03:32.980
[LAUGH] So, our testing burden
around this is very low.

55
00:03:32.980 --> 00:03:37.300
Like I'm actually happy with just
the one assertion being there

56
00:03:37.300 --> 00:03:42.040
because the rest of my testing is unit
tests for the underlying function.

57
00:03:42.040 --> 00:03:43.680
The integration test for the helper,

58
00:03:43.680 --> 00:03:46.790
it's just to make sure
that things are wired up.

59
00:03:46.790 --> 00:03:51.280
And if that one case works, that means
that we can unit test the rest of that,

60
00:03:51.280 --> 00:03:52.765
and we got that for free.

