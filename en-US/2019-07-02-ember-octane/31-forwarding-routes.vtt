WEBVTT

1
00:00:00.330 --> 00:00:05.180
&gt;&gt; Mike: The next thing we're gonna do,
is address these situations where we had

2
00:00:05.180 --> 00:00:10.050
incomplete URLs or
part of our chat UI was blank.

3
00:00:10.050 --> 00:00:12.930
Remember, if we didn’t
specify a particular team, or

4
00:00:12.930 --> 00:00:18.390
a channel within that team, we kind of
got half of our UI and then a blank area.

5
00:00:18.390 --> 00:00:22.530
So we're gonna solve this
with forwarding routes.

6
00:00:22.530 --> 00:00:27.900
These are similar to the way our login and
our teams before model hooks,

7
00:00:27.900 --> 00:00:31.330
where they'd kick the user out or
allow them to go through.

8
00:00:31.330 --> 00:00:34.220
We'll create some index routes,

9
00:00:34.220 --> 00:00:39.302
I call them index routes cuz
index JS will be their file name,

10
00:00:39.302 --> 00:00:44.603
just placed it in various spots
within our routing hierarchy.

11
00:00:44.603 --> 00:00:49.854
And they'll take care of handling
situations where you've kind of,

12
00:00:49.854 --> 00:00:54.304
with your URL you've addressed
a folder instead of a file,

13
00:00:54.304 --> 00:00:56.359
right, like teams slash.

14
00:00:57.480 --> 00:01:00.040
And there's a deeper level
of nesting we wanna handle.

15
00:01:01.190 --> 00:01:04.210
We can use Ember CLI to generate
these routes for us, and

16
00:01:04.210 --> 00:01:07.160
we're just gonna handle them one by one.

17
00:01:07.160 --> 00:01:12.313
And eventually, we'll be able to get back
to a situation where you could go /teams

18
00:01:12.313 --> 00:01:17.557
and you'll end up, say, picking the first
team and the first channel in that team.

19
00:01:17.557 --> 00:01:22.110
And ending up like no matter what
you omit, you kinda land somewhere.

20
00:01:23.480 --> 00:01:25.120
So let's get started.

21
00:01:27.450 --> 00:01:30.705
Ember generate, and I'll tell you now,

22
00:01:30.705 --> 00:01:34.712
you can just say ember g
instead of ember generate.

23
00:01:34.712 --> 00:01:39.914
And I use this enough that
I'm having to force myself to

24
00:01:39.914 --> 00:01:45.240
generate in this workshop
ember g route teams/index.

25
00:01:45.240 --> 00:01:48.793
Before I hit Enter,
you can hit enter right away,

26
00:01:48.793 --> 00:01:53.105
I just want to open this file up and
this may get reformatted,

27
00:01:53.105 --> 00:01:57.353
but let's just remember there is teams,
team, channel.

28
00:02:01.235 --> 00:02:04.600
&gt;&gt; Mike: And
nothing has changed in this file.

29
00:02:04.600 --> 00:02:10.010
Anytime you have a deeper level of
nesting in your routing hierarchy,

30
00:02:10.010 --> 00:02:16.210
right, like teams has children,
has sub routes inside of it.

31
00:02:16.210 --> 00:02:21.377
Anytime you have that, you kind of
get an implicit index route for free.

32
00:02:21.377 --> 00:02:26.608
And if you remember, when we were
visiting those incomplete your URLs,

33
00:02:26.608 --> 00:02:32.440
we were seeing blank stuff on the screen
but I didn't point out error messages.

34
00:02:32.440 --> 00:02:34.050
We didn't have error messages.

35
00:02:34.050 --> 00:02:36.910
Those are valid URLs for this application.

36
00:02:36.910 --> 00:02:38.040
We just hadn't handled them yet.

37
00:02:39.510 --> 00:02:45.760
So, just like when you
visit frontendmasters.com/,

38
00:02:45.760 --> 00:02:51.690
you implicitly are requesting index.html,

39
00:02:51.690 --> 00:02:56.990
here if you go teams/ or just teams,

40
00:02:56.990 --> 00:03:01.590
you are implicitly requesting teams/index,
right.

41
00:03:01.590 --> 00:03:07.130
That's why I call it like
a folder level route.

42
00:03:07.130 --> 00:03:11.990
So let's get started.

43
00:03:11.990 --> 00:03:14.010
And by the way,
now that we're using a real API,

44
00:03:14.010 --> 00:03:16.040
you'll start to see API calls down here.

45
00:03:16.040 --> 00:03:18.220
So that's completely normal.

46
00:03:18.220 --> 00:03:20.220
Just more feedback for us.

47
00:03:21.230 --> 00:03:28.290
So we've got teams, and
we're just gonna go /teams.

48
00:03:28.290 --> 00:03:31.890
Now, no error down here as promised.

49
00:03:31.890 --> 00:03:36.650
And I'm gonna go to teams/index.

50
00:03:36.650 --> 00:03:40.643
So it's app, routes, teams, index.

51
00:03:44.013 --> 00:03:49.083
&gt;&gt; Mike: And in here,
we want to in the event,

52
00:03:49.083 --> 00:03:53.300
we have more than zero teams.

53
00:03:53.300 --> 00:03:55.190
We have at least one team.

54
00:03:55.190 --> 00:03:58.110
I just wanna forward
the user to that team.

55
00:04:01.040 --> 00:04:06.547
So as before, we will use the before
model hook, which gets a transition.

56
00:04:10.137 --> 00:04:15.187
&gt;&gt; Mike: And just in case the parents'
implementation is something promisey,

57
00:04:15.187 --> 00:04:17.552
we could be extra diligent here.

58
00:04:24.885 --> 00:04:32.181
&gt;&gt; Mike: And now, we're going to
get our parent routes model, right.

59
00:04:32.181 --> 00:04:36.256
We're in teams/index so we can of course,
reach up to our parents,

60
00:04:36.256 --> 00:04:38.801
which is teams and grab that routes model.

61
00:04:41.889 --> 00:04:44.921
&gt;&gt; Mike: This model for teams.

62
00:04:48.749 --> 00:04:53.369
&gt;&gt; Mike: Now, in the event that
we have at least one team,

63
00:04:53.369 --> 00:04:57.549
we're gonna send the user to the 0th team.

64
00:05:02.295 --> 00:05:08.530
&gt;&gt; Mike: This, I think replaceWith
is probably appropriate here.

65
00:05:08.530 --> 00:05:15.210
Again, we're gonna just have to test it,
teams.team and we're gonna just

66
00:05:15.210 --> 00:05:20.330
link to where we have to pass things
to fill in those dynamic segments.

67
00:05:21.500 --> 00:05:29.742
Fill in the blanks in
our parametrized URL,

68
00:05:29.742 --> 00:05:33.538
teams[0].id.

69
00:05:33.538 --> 00:05:34.830
So there we go.

70
00:05:34.830 --> 00:05:41.700
If we try to go to /teams,
we end up with going to LinkedIn.

71
00:05:41.700 --> 00:05:47.100
If we wanted to pick
a different default to

72
00:05:47.100 --> 00:05:51.500
send users to,
we could send them to the last team.

73
00:05:53.410 --> 00:05:56.770
So this URL is for LinkedIn specifically.

74
00:05:56.770 --> 00:06:02.025
But if I go back to /teams,

75
00:06:02.025 --> 00:06:05.380
I didn't mean to open up a new tab but
there you go.

76
00:06:05.380 --> 00:06:07.980
We're at the last one JavaScript.

77
00:06:09.120 --> 00:06:10.240
So we'll keep it at the first one.

78
00:06:10.240 --> 00:06:14.550
But I just want you to understand
that we can make decisions about

79
00:06:14.550 --> 00:06:16.060
what our default is.

80
00:06:16.060 --> 00:06:19.330
Now, what about if there are no teams?

81
00:06:20.480 --> 00:06:22.260
We can show users something.

82
00:06:22.260 --> 00:06:23.856
We have a template and

83
00:06:23.856 --> 00:06:28.473
for now, just to handle this
case without altering too much.

84
00:06:28.473 --> 00:06:35.947
I'm gonna just remove this redirect,
&gt;&gt; Mike: So

85
00:06:35.947 --> 00:06:42.500
that we're always in this case
where teams.length is zero, right?

86
00:06:42.500 --> 00:06:47.894
If we did this,
we are kind of in the else case right now.

87
00:06:47.894 --> 00:06:51.590
I mean not really, but
we're handling that.

88
00:06:51.590 --> 00:06:59.899
So now we can go to our templates,
&gt;&gt; Mike: Teams/index.hbs and

89
00:06:59.899 --> 00:07:03.995
we'll put here, sorry, no teams found.

90
00:07:06.606 --> 00:07:08.980
&gt;&gt; Mike: And
there it's showing up on the screen.

91
00:07:08.980 --> 00:07:10.470
We could format that and make it pretty,

92
00:07:10.470 --> 00:07:14.840
but it's not really gonna help
us learn more about Ember.

93
00:07:14.840 --> 00:07:19.800
So, that's what's going to happen
if we don't catch a user and

94
00:07:19.800 --> 00:07:21.250
transition them somewhere else.

95
00:07:21.250 --> 00:07:25.244
They'll land here, in the event
that that team’s array is empty.

96
00:07:25.244 --> 00:07:30.991
So now, we can uncomment this,
&gt;&gt; Mike: And

97
00:07:30.991 --> 00:07:35.295
there you go, so they’ll never
end up with that index.hbs if we

98
00:07:35.295 --> 00:07:39.930
transition them somewhere else,
they’ll just never end up there.

99
00:07:39.930 --> 00:07:45.180
The existing attempt to land on that URL,
that gets aborted and

100
00:07:45.180 --> 00:07:50.260
then they're sent to another place,
sent to teams.team.

101
00:07:50.260 --> 00:07:52.855
Let's do the same thing,
one more layer down for channels.

102
00:07:52.855 --> 00:08:00.677
I'm gonna copy this cuz it's
gonna be very similar teams/team.

103
00:08:00.677 --> 00:08:07.780
Sorry, we got to generate that out,
teams/team/index.

104
00:08:07.780 --> 00:08:13.540
So ember g route teams/team/index,
this would be like if you did.

105
00:08:14.790 --> 00:08:18.167
You wanted to look at the LinkedIn team,
no channel specified.

106
00:08:20.443 --> 00:08:27.220
&gt;&gt; Mike: And let's look at that file
that was created, teams/team/index.js.

107
00:08:27.220 --> 00:08:30.524
Paste this in here, and

108
00:08:30.524 --> 00:08:35.646
we want to get the model for the team,

109
00:08:35.646 --> 00:08:40.448
and we'll rename this variable.

110
00:08:40.448 --> 00:08:42.354
In fact,
we don't really care about the team,

111
00:08:42.354 --> 00:08:44.125
we just care about this channels property.

112
00:08:46.564 --> 00:08:50.497
&gt;&gt; Mike: Right, remember how we enter
sidebar, we did @team.channels,

113
00:08:50.497 --> 00:08:52.520
we iterated over that.

114
00:08:52.520 --> 00:08:55.836
So if the channel's length is greater than

115
00:08:55.836 --> 00:09:01.226
zero,
&gt;&gt; Mike: We'll

116
00:09:01.226 --> 00:09:06.280
want to send the user to this route.

117
00:09:07.340 --> 00:09:11.150
Turns out we're actually going
to need the ID, my mistake here.

118
00:09:11.150 --> 00:09:12.210
We'll need the team's ID.

119
00:09:13.550 --> 00:09:16.800
And we'll pass that

120
00:09:16.800 --> 00:09:21.232
as the first part of the URL to fill in
cuz it's going to look kind of like this,

121
00:09:21.232 --> 00:09:26.264
teams/teamId/channelId.

122
00:09:27.650 --> 00:09:32.769
And so, channelId, that's gonna be
the first channel in the array and

123
00:09:32.769 --> 00:09:35.852
the teamId we're extracting out up here.

124
00:09:41.847 --> 00:09:43.140
&gt;&gt; Mike: And there we go.

125
00:09:43.140 --> 00:09:45.214
So I could do /teams and

126
00:09:45.214 --> 00:09:50.852
we'll end up in the first channel
of the first team, right?

127
00:09:50.852 --> 00:09:53.930
We could make it the second
channel of the first team

128
00:09:55.330 --> 00:09:59.580
just by tweaking it a little bit.

129
00:09:59.580 --> 00:10:02.558
Sorry, the second because
we count from zero.

130
00:10:02.558 --> 00:10:05.652
And there we go, so now we're in
job hunting instead of recruiting.

131
00:10:05.652 --> 00:10:09.667
What we've effectively done
now is we have made it so

132
00:10:09.667 --> 00:10:15.611
all of these sort of partial URLs,
they fall back onto a reasonable default.

133
00:10:17.885 --> 00:10:22.404
&gt;&gt; Mike: So we could alter,
I know at least one test is failing now.

134
00:10:22.404 --> 00:10:27.390
Remember our login tests where we
expect to be at a particular URL.

135
00:10:27.390 --> 00:10:31.098
Now with this forwarding that we've added,
we're gonna have to update that.

136
00:10:31.098 --> 00:10:34.103
But this is the way we
would want this app.

137
00:10:34.103 --> 00:10:35.385
If you're trying to sell this,

138
00:10:35.385 --> 00:10:37.620
you don't want to have a bunch
of URLs that don't work.

139
00:10:39.640 --> 00:10:40.922
So, let's take a look at the tests.

140
00:10:43.689 --> 00:10:46.659
&gt;&gt; Mike: Interesting, they pass.

141
00:10:49.901 --> 00:10:51.631
&gt;&gt; Mike: I’m a little puzzled
about why they passed.

142
00:10:55.641 --> 00:10:58.761
&gt;&gt; Mike: Let me try this logout test,

143
00:10:58.761 --> 00:11:04.357
I’m going to just try to
walk through it manually.

144
00:11:12.746 --> 00:11:15.189
&gt;&gt; Mike: You know what,
we only have our logout test.

145
00:11:19.065 --> 00:11:20.690
&gt;&gt; Mike: This makes sense, okay?

146
00:11:21.690 --> 00:11:25.125
Past Mike did present
Mike a little favor here,

147
00:11:25.125 --> 00:11:31.760
I forgot, cuz I improve this on the fly.

148
00:11:31.760 --> 00:11:36.980
I forgot that we instead of asserting
that attempting to visit this URL,

149
00:11:36.980 --> 00:11:39.460
we landed on exactly that URL.

150
00:11:39.460 --> 00:11:42.150
A lot of our acceptance
tests look like that, right?

151
00:11:42.150 --> 00:11:44.751
They look like

152
00:11:44.751 --> 00:11:53.643
assert.equals('/teams/linkedin').

153
00:12:00.322 --> 00:12:03.054
&gt;&gt; Mike: Sorry, current wrap, currentURL.

154
00:12:10.329 --> 00:12:13.940
&gt;&gt; Mike: So
this is one mechanism of assertion.

155
00:12:13.940 --> 00:12:18.570
And if we had done this,
the test would have failed, right?

156
00:12:18.570 --> 00:12:21.230
As a result of the forwarding
we just added.

157
00:12:21.230 --> 00:12:25.550
We send the user to
a particular channel but

158
00:12:25.550 --> 00:12:30.230
we made our assertion a little bit more
tolerant of other kinds of things and

159
00:12:30.230 --> 00:12:33.490
so yeah, it still starts with /teams.

160
00:12:33.490 --> 00:12:34.493
So we happen to be fine.

161
00:12:37.381 --> 00:12:40.540
&gt;&gt; Mike: So I'll get rid of this,
leave the test as is.

162
00:12:40.540 --> 00:12:42.660
&gt;&gt; Speaker 2: Is there any meaningful
difference between the paramsFor

163
00:12:42.660 --> 00:12:43.650
and modelFor?

164
00:12:43.650 --> 00:12:45.190
&gt;&gt; Mike: Good question.

165
00:12:45.190 --> 00:12:48.930
The difference between
them is the following.

166
00:12:48.930 --> 00:12:52.990
Well, the commonality between them
is you're specifying a route name.

167
00:12:52.990 --> 00:12:57.600
And you're from a child route
reaching up to a parent.

168
00:12:57.600 --> 00:13:03.030
The difference is, paramsFor will give
you whatever that parent route was passed

169
00:13:03.030 --> 00:13:04.610
as an argument to its model hook.

170
00:13:05.780 --> 00:13:10.550
ModelFor will give you whatever that
model hook returned or resolved to.

171
00:13:12.190 --> 00:13:16.110
So it's the difference between getting the
model versus getting the dynamic segments,

172
00:13:16.110 --> 00:13:18.020
but they're very closely related.

