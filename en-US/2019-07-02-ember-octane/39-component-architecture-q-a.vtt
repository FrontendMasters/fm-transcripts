WEBVTT

1
00:00:00.000 --> 00:00:03.216
&gt;&gt; Mike North: Did anybody have any
questions about we just did, yes.

2
00:00:03.216 --> 00:00:11.000
&gt;&gt; Speaker 2: So currying data into
those functions, those actions,

3
00:00:11.000 --> 00:00:15.720
you had an action you defined the parent,
you passed it into the child

4
00:00:15.720 --> 00:00:20.200
then you wrapped it in an action the child
had handled the dollar event itself.

5
00:00:20.200 --> 00:00:20.720
&gt;&gt; Mike North: Yeah.

6
00:00:20.720 --> 00:00:22.416
&gt;&gt; Speaker 2: You could
have just passed the-

7
00:00:22.416 --> 00:00:23.291
&gt;&gt; Mike North: Test that value.

8
00:00:23.291 --> 00:00:25.310
&gt;&gt; Speaker 2: Value into, yeah.

9
00:00:25.310 --> 00:00:25.810
&gt;&gt; Mike North: Absolutely.

10
00:00:25.810 --> 00:00:29.530
&gt;&gt; Speaker 2: And then handled the event,
the DOM stuff up its parent,

11
00:00:29.530 --> 00:00:31.220
is there a reason why
you wouldn't do that?

12
00:00:31.220 --> 00:00:36.400
&gt;&gt; Mike North: Absolutely,
and so you might

13
00:00:36.400 --> 00:00:40.670
read in some places that currying
is one argument at a time.

14
00:00:41.670 --> 00:00:45.833
And I think we're talking about partial
application here, is that fair?

15
00:00:45.833 --> 00:00:49.893
It's like passing one or
more arguments to a function and

16
00:00:49.893 --> 00:00:55.405
kinda creating a new function with less
arguments that we can invoke easily.

17
00:00:58.467 --> 00:00:59.763
&gt;&gt; Speaker 2: I'm not entirely
sure what you're asking.

18
00:00:59.763 --> 00:01:00.417
&gt;&gt; Mike North: Got it,

19
00:01:00.417 --> 00:01:05.860
you stop me if I start deviating
from what you have in mind here.

20
00:01:05.860 --> 00:01:10.440
So what Seth is getting at
is that there's another way,

21
00:01:10.440 --> 00:01:12.920
and let's focus on
the channel footer component.

22
00:01:14.210 --> 00:01:16.840
There is another way that
we get the template and

23
00:01:16.840 --> 00:01:21.520
the js module,
could have avoided this potentially.

24
00:01:21.520 --> 00:01:28.734
We could have avoided pulling
the value off of the event.

25
00:01:28.734 --> 00:01:30.450
Is that what you're getting at, or

26
00:01:30.450 --> 00:01:35.278
maybe you meant-
&gt;&gt; Speaker 2: I meant that and-

27
00:01:35.278 --> 00:01:36.028
&gt;&gt; Mike North: This here,

28
00:01:36.028 --> 00:01:38.359
where we're calling send message.

29
00:01:38.359 --> 00:01:38.956
&gt;&gt; Speaker 2: Yes.
&gt;&gt; Mike North: So

30
00:01:38.956 --> 00:01:41.152
let me show you what
this would look like and

31
00:01:41.152 --> 00:01:45.200
then show you where we would have
lost the opportunity to do something.

32
00:01:45.200 --> 00:01:50.190
So if I comment out handle submit,
and over here,

33
00:01:50.190 --> 00:01:52.660
we could do something like this.

34
00:01:52.660 --> 00:01:56.520
We could invoke handle submit,
but when we wanna pass it, body.

35
00:01:56.520 --> 00:02:01.513
We can use a Handlebars helper,
well, part of Ember and

36
00:02:01.513 --> 00:02:06.092
not part of Handlebars but
it’s called function.

37
00:02:06.092 --> 00:02:09.093
It’s basically invoke a function and

38
00:02:09.093 --> 00:02:14.260
we can pass it this dot body and
it would almost get us what we want.

39
00:02:16.360 --> 00:02:17.960
Let's see, sorry, it's not handle submit,

40
00:02:17.960 --> 00:02:23.223
it would be,
&gt;&gt; Mike North: Let me triple-check here,

41
00:02:23.223 --> 00:02:24.610
send message, right?

42
00:02:24.610 --> 00:02:26.883
Ultimately, we wanna call
the send message arg.

43
00:02:31.134 --> 00:02:32.554
&gt;&gt; Mike North: Okay,
test passing, good sign.

44
00:02:36.554 --> 00:02:39.010
&gt;&gt; Mike North: So
I could add something here.

45
00:02:40.880 --> 00:02:45.298
Looking for developer with twenty-two
years of type script experience.

46
00:02:48.951 --> 00:02:53.753
&gt;&gt; Mike North: And I could hit,
let me clear out, console and hit send.

47
00:02:57.979 --> 00:03:02.220
&gt;&gt; Mike North: So if I refresh this,
actually, it's still there.

48
00:03:02.220 --> 00:03:03.600
We got the refresh.

49
00:03:03.600 --> 00:03:06.035
We lost the opportunity
to call prevent default.

50
00:03:06.035 --> 00:03:10.242
&gt;&gt; Speaker 3: But
you can do that in the parent action by-

51
00:03:10.242 --> 00:03:11.910
&gt;&gt; Mike North: By receiving the event-

52
00:03:11.910 --> 00:03:12.419
&gt;&gt; Speaker 3: [CROSSTALK] is the

53
00:03:12.419 --> 00:03:13.040
second parameter.

54
00:03:13.040 --> 00:03:16.130
&gt;&gt; Mike North: By receiving
the event as the last perimeter.

55
00:03:16.130 --> 00:03:20.350
I could, but I would definitely
have lost the ability to

56
00:03:20.350 --> 00:03:25.280
zero out this dot body, right?

57
00:03:25.280 --> 00:03:30.630
So to your point,
sometimes you can get away with that.

58
00:03:30.630 --> 00:03:35.830
But in this case, we kinda had
a little last lingering thing that

59
00:03:35.830 --> 00:03:39.830
excluded that, that didn’t give us
an opportunity to insert our own logic.

60
00:03:39.830 --> 00:03:41.865
But very good to point that out,

61
00:03:41.865 --> 00:03:45.390
so and let me just finish
the thing you just proposed here.

62
00:03:45.390 --> 00:03:48.304
If we went to our channel container and

63
00:03:48.304 --> 00:03:52.593
our create message function
took an event arg, right?

64
00:03:52.593 --> 00:03:57.920
We actually get the DOM event as the last
argument to an action no matter what.

65
00:03:57.920 --> 00:04:01.409
We could have done something
like if the event is

66
00:04:01.409 --> 00:04:06.475
defined,
&gt;&gt; Mike North: Prevent

67
00:04:06.475 --> 00:04:08.720
default on the event.

68
00:04:08.720 --> 00:04:14.490
And that would let us do something
like this where it’ll clear out and

69
00:04:14.490 --> 00:04:18.840
we hit send and
it’s a live update for sure, right,

70
00:04:18.840 --> 00:04:22.110
it’s almost there but
how do I clear this out?

71
00:04:22.110 --> 00:04:25.410
Cuz control is now,
it’s all the way up at the container and

72
00:04:25.410 --> 00:04:29.550
my presentation component doesn't
really have what it needs.

73
00:04:29.550 --> 00:04:35.080
Now we could've made it so the container
actually owns that message body,

74
00:04:35.080 --> 00:04:37.060
and it passes it into the footer.

75
00:04:37.060 --> 00:04:39.560
And the footer kinda
binds all the way out.

76
00:04:39.560 --> 00:04:42.140
And that might've gotten
us to a point where

77
00:04:42.140 --> 00:04:45.840
we could've had the presentation
component do even less.

78
00:04:45.840 --> 00:04:48.652
But this is the kind of thing
you have to think about.

79
00:04:48.652 --> 00:04:52.220
And It's more about what needs to happen,
if it's just that

80
00:04:52.220 --> 00:04:55.780
the function needs to be invoked and
passed this argument, you're good.

81
00:04:55.780 --> 00:04:58.980
If it's a lot of state
management locally and

82
00:04:58.980 --> 00:05:05.200
remotely, you might have to rearrange
things so that you can get what you need.

83
00:05:05.200 --> 00:05:08.770
But it's very good to be
aware of that as an option so

84
00:05:08.770 --> 00:05:13.250
just to put that on the screen so
we don't overlook it.

85
00:05:14.320 --> 00:05:18.860
We're using the on helper,
we're listening for the submit event and

86
00:05:18.860 --> 00:05:23.868
this is what is being called,
it is invoking the send message function,

87
00:05:23.868 --> 00:05:27.680
passing it this.body.

88
00:05:27.680 --> 00:05:29.960
So we're getting the body
of the message and

89
00:05:29.960 --> 00:05:31.840
this does almost everything
we need it to do.

90
00:05:31.840 --> 00:05:37.610
The only thing that stops us is, this
doesn't automatically get cleared out.

91
00:05:37.610 --> 00:05:39.830
And how could it, right?

92
00:05:39.830 --> 00:05:42.260
Cuz by the time that fires, it's gone.

93
00:05:42.260 --> 00:05:44.400
We don't have a reference to that action.

94
00:05:44.400 --> 00:05:47.070
We couldn't even wait something
that's a sync with it.

95
00:05:47.070 --> 00:05:53.660
So if a local thing needs to be updated,
we might need to make it local.

96
00:05:53.660 --> 00:05:55.370
&gt;&gt; Speaker 4: Can you have
more than one handler?

97
00:05:55.370 --> 00:05:58.740
&gt;&gt; Mike North: That's exactly
what I was going to ask.

98
00:05:58.740 --> 00:06:00.360
&gt;&gt; Speaker 4: One to clear one and-
&gt;&gt; Mike North: No.

99
00:06:01.480 --> 00:06:08.405
Right, you could do something and I-
You're going to regret even saying that.

100
00:06:08.405 --> 00:06:10.738
&gt;&gt; Speaker 4: [LAUGH]
&gt;&gt; Mike North: Composible helper,

101
00:06:10.738 --> 00:06:13.610
it's library out there has
a function called Pipe.

102
00:06:14.720 --> 00:06:18.461
And it lets you kinda create
a pipeline functions,

103
00:06:18.461 --> 00:06:21.270
that doesn't belong in a template.

104
00:06:21.270 --> 00:06:24.730
Let me be really clear about that,
templates are declarative.

105
00:06:24.730 --> 00:06:28.300
When you're talking about a function
pipeline, that is imperative.

106
00:06:29.450 --> 00:06:31.060
There is nothing more
imperative than that.

107
00:06:31.060 --> 00:06:35.920
It is a procedural sequence
of instructions to invoke,

108
00:06:35.920 --> 00:06:39.400
not just I want things
to be in this state.

109
00:06:40.760 --> 00:06:42.610
That's all you want
your templates to look.

110
00:06:42.610 --> 00:06:46.560
So having a little action
handler that sorta delegates and

111
00:06:46.560 --> 00:06:49.310
then does the local work as well.

112
00:06:49.310 --> 00:06:53.550
A very common thing to do and also,
you're not gonna confuse anyone, right?

113
00:06:53.550 --> 00:06:54.770
Keep it simple.

114
00:06:54.770 --> 00:06:59.580
&gt;&gt; Speaker 5: So, this might be off topic
or too deep, but the function handler is

115
00:06:59.580 --> 00:07:03.370
not required, the function helper
is not required at this point?

116
00:07:03.370 --> 00:07:04.480
Will it be at some point?

117
00:07:04.480 --> 00:07:08.768
Cuz right now, I can just do it by
passing two parameters, one submit and

118
00:07:08.768 --> 00:07:12.100
send message this body, it works.

119
00:07:12.100 --> 00:07:14.100
&gt;&gt; Mike North: So
the function helper is not required.

120
00:07:14.100 --> 00:07:16.350
&gt;&gt; Speaker 5: Take away
the function helper.

121
00:07:16.350 --> 00:07:17.370
&gt;&gt; Mike North: Yep.
&gt;&gt; Speaker 5: And it still

122
00:07:17.370 --> 00:07:18.690
works in the same way.

123
00:07:19.710 --> 00:07:22.200
Is that going to change at some point?

124
00:07:22.200 --> 00:07:24.210
&gt;&gt; Mike North: Let's affirm
that you're correct here.

125
00:07:25.370 --> 00:07:29.716
I don't know for sure, but there it goes.

126
00:07:29.716 --> 00:07:34.590
Yeah, I don't know, to be honest.

127
00:07:34.590 --> 00:07:35.540
&gt;&gt; Speaker 5: Okay, action helper,

128
00:07:35.540 --> 00:07:37.250
you can pass the arguments as-
&gt;&gt; Mike North: Yep.

129
00:07:37.250 --> 00:07:38.160
&gt;&gt; Speaker 5: The next parameter.

130
00:07:38.160 --> 00:07:43.761
&gt;&gt; Mike North: So I do know that if we
were to have done something like this,

131
00:07:43.761 --> 00:07:49.910
which I don't recommend,
&gt;&gt; Mike North: And

132
00:07:49.910 --> 00:07:53.190
we could have partially applied this way.

133
00:07:53.190 --> 00:07:56.336
That's where the function
helper's the only option.

134
00:07:56.336 --> 00:07:58.230
Yeah, that's a good point.

135
00:07:58.230 --> 00:08:00.870
Either way seems to work.

136
00:08:00.870 --> 00:08:05.890
I would have to check the RFC to
understand exactly what's going on.

137
00:08:05.890 --> 00:08:08.900
I do know that there's really
no harm in doing this.

138
00:08:08.900 --> 00:08:13.530
And it's very explicit that send
messages being passed this argument and

139
00:08:14.650 --> 00:08:15.480
you're good to go.

140
00:08:15.480 --> 00:08:20.279
Especially if we wanted to do
something like I'm from the outside in

141
00:08:20.279 --> 00:08:28.420
channel HPS, we could partially
apply at this level, right?

142
00:08:28.420 --> 00:08:32.090
So by the time the component
receives send message,

143
00:08:32.090 --> 00:08:35.030
we've already baked in some arguments.

144
00:08:35.030 --> 00:08:38.650
It's the equivalent of
doing a function bind and

145
00:08:38.650 --> 00:08:43.670
then not worrying too much about this, but
passing other arguments along the way.

146
00:08:43.670 --> 00:08:45.490
And that's partial application there.

147
00:08:45.490 --> 00:08:48.040
That's where this shines really nicely.

148
00:08:50.490 --> 00:08:52.870
Yep, and no on modifier, for sure.

149
00:08:52.870 --> 00:08:53.420
All right.

150
00:08:53.420 --> 00:08:57.243
&gt;&gt; Speaker 6: So, just to clarify, the ROC
does say that that should not work, but

151
00:08:57.243 --> 00:08:58.890
the extra-
&gt;&gt; Mike North: On multiple arguments.

152
00:08:58.890 --> 00:09:02.196
&gt;&gt; Speaker 6: Yeah, the extra parameters
will be ignored in order to pass a value

153
00:09:02.196 --> 00:09:06.168
to the function, an extra value to
the function, you should use the function-

154
00:09:06.168 --> 00:09:07.140
&gt;&gt; Mike North: There we go.

155
00:09:07.140 --> 00:09:11.585
So it happens to work,
possibly by accident.

156
00:09:11.585 --> 00:09:13.270
&gt;&gt; Speaker 6: [LAUGH]
&gt;&gt; Mike North: But

157
00:09:13.270 --> 00:09:15.510
what you see on the screen here and

158
00:09:15.510 --> 00:09:20.600
what my initial answer to your question,
this is the recommended way of doing it.

159
00:09:20.600 --> 00:09:22.830
Thank you for backstopping with RFC.

