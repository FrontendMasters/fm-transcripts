WEBVTT

1
00:00:00.020 --> 00:00:03.310
&gt;&gt; Mike North: The last two things we're
going to work on today have to do with

2
00:00:03.310 --> 00:00:04.150
performance.

3
00:00:04.150 --> 00:00:09.590
I told you at the beginning of this class,
we're gonna make this app really,

4
00:00:09.590 --> 00:00:10.420
really fast.

5
00:00:10.420 --> 00:00:14.560
And we're gonna do this
with two improvements.

6
00:00:14.560 --> 00:00:19.140
Number one, we're going to apply Ember's
server side rendering technology.

7
00:00:20.910 --> 00:00:25.971
And that means that we're not going
to get what we currently have when

8
00:00:25.971 --> 00:00:31.337
we view source on this page,
&gt;&gt; Mike North: Which

9
00:00:31.337 --> 00:00:34.690
is an empty HTML document.

10
00:00:34.690 --> 00:00:39.260
I mean, it's not empty empty,
but certainly the body is empty.

11
00:00:39.260 --> 00:00:40.650
It just contains our script tag,

12
00:00:40.650 --> 00:00:44.850
so everything you are seeing on the screen
is due to that JavaScript running.

13
00:00:44.850 --> 00:00:49.724
So that means anything you are seeing
on the screen has to wait for

14
00:00:49.724 --> 00:00:53.615
the JavaScript to download,
be parsed, and run.

15
00:00:53.615 --> 00:00:56.438
And we're going to make
it to the starting point,

16
00:00:56.438 --> 00:01:00.390
HTML is a lot farther along with
stuff already there ready to go.

17
00:01:00.390 --> 00:01:02.550
So that's the first improvement
we're going to make.

18
00:01:02.550 --> 00:01:06.650
The second improvement is we're going to
turn this into a progressive web app.

19
00:01:06.650 --> 00:01:12.376
And this is going to cache the static
assets, cache the JavaScript and

20
00:01:12.376 --> 00:01:17.090
the CSS that build up this m wrap,
&gt;&gt; Mike North: That are this m wrap.

21
00:01:17.090 --> 00:01:20.640
And caching API calls
as they sail through so

22
00:01:20.640 --> 00:01:26.410
that if we ever lose connectivity we
can fall back onto old API responses.

23
00:01:26.410 --> 00:01:31.540
And we're gonna end up with a super
fast loading app that works offline.

24
00:01:31.540 --> 00:01:34.020
At least to see data
that you've already seen.

25
00:01:34.020 --> 00:01:35.910
And it's going to be surprisingly easy.

26
00:01:37.020 --> 00:01:43.080
So with that, [LAUGH]
let's look at server side rendering.

27
00:01:43.080 --> 00:01:49.050
When you're building an app and
you're intending to render it server side,

28
00:01:49.050 --> 00:01:53.560
you have to remember that there
are some parts of JavaScript, or

29
00:01:53.560 --> 00:01:57.490
what we think of JavaScript,
that only pertained to browsers and

30
00:01:57.490 --> 00:02:02.440
there's some things that
only pertain to Node.js.

31
00:02:02.440 --> 00:02:07.970
Example something that's browser
specific document like window.

32
00:02:07.970 --> 00:02:12.473
Those mean nothing in Node.js, there is
no window, there is no HTML document.

33
00:02:12.473 --> 00:02:17.910
In Node.js, you have something called
process, where you would see what's

34
00:02:17.910 --> 00:02:22.750
your current working directory, what were
arguments passed to your Node.js program.

35
00:02:22.750 --> 00:02:24.345
That means nothing to a browser.

36
00:02:24.345 --> 00:02:28.615
But there's a ton of stuff in the middle,
like promises and set time out, and

37
00:02:28.615 --> 00:02:31.259
all of the core JavaScript
language features.

38
00:02:31.259 --> 00:02:36.730
So if you can manage to stick to that,
you're gonna have a good time.

39
00:02:37.750 --> 00:02:43.230
If you start getting out into
lots of non-standard stuff,

40
00:02:43.230 --> 00:02:47.500
it's a lot more difficult to just sort of
flip a switch and allow your app to work.

41
00:02:47.500 --> 00:02:52.695
So we're gonna install the server
side rendering Ember add-on and

42
00:02:52.695 --> 00:02:56.805
we're gonna run into a problem and
quickly solve it.

43
00:02:56.805 --> 00:03:02.016
But just a heads up try to stick to
the stuff that works both in Node and

44
00:03:02.016 --> 00:03:03.120
in browsers.

45
00:03:04.380 --> 00:03:08.840
The way you enable server
rendering in an Ember app

46
00:03:08.840 --> 00:03:13.000
is installing an add on
called ember-cli-fastboot.

47
00:03:13.000 --> 00:03:17.390
And I'm gonna kill my existing Ember
server, because anytime you install a new

48
00:03:17.390 --> 00:03:21.160
add on, you need to kind of stop and
start back up again.

49
00:03:21.160 --> 00:03:23.800
Add ons can affect your build pipeline and

50
00:03:23.800 --> 00:03:27.660
there's no way to sorta hot
insert chunks of code into that.

51
00:03:32.388 --> 00:03:34.895
&gt;&gt; Mike North: Ember-cli-fastboot and
this is gonna make it so

52
00:03:34.895 --> 00:03:38.474
even when we run Ember serve,
you're gonna get a server rendered app or

53
00:03:38.474 --> 00:03:42.250
this source is gonna look a lot different
than what we've got on the right.

54
00:03:43.330 --> 00:03:44.659
But not at first because
there's a problem.

55
00:03:48.648 --> 00:03:50.597
&gt;&gt; Mike North: Should say
like running with fastboot.

56
00:03:59.812 --> 00:04:00.880
&gt;&gt; Mike North: Let's try it.

57
00:04:02.430 --> 00:04:07.420
Okay, so there's our error,
app is being served by fastboot.

58
00:04:07.420 --> 00:04:08.730
Does this look kinda familiar?

59
00:04:08.730 --> 00:04:13.549
This was the stuff we saw in the console
when our client side app starts up,

60
00:04:13.549 --> 00:04:15.436
right, the Ember version.

61
00:04:15.436 --> 00:04:19.988
So we need to do one thing,
and that's define the domains,

62
00:04:19.988 --> 00:04:24.500
the hosts where our app
is allowed to be served.

63
00:04:24.500 --> 00:04:28.950
We're gonna do that in config,
environment js.

64
00:04:28.950 --> 00:04:31.247
Right up here, we can say fastboot.

65
00:04:33.545 --> 00:04:38.973
&gt;&gt; Mike North: hostwhitelist,
&gt;&gt; Mike North: And we're gonna

66
00:04:38.973 --> 00:04:44.700
say anything that has local host in there.

67
00:04:46.730 --> 00:04:51.535
And you'd want to for a real app be
careful about this because I could create

68
00:04:51.535 --> 00:04:56.300
local host.front end masters.com
then anyone could create

69
00:04:56.300 --> 00:05:00.790
a domain that would work for
you or that would defeat this.

70
00:05:00.790 --> 00:05:04.239
It's a security measure.

71
00:05:04.239 --> 00:05:10.470
So we'll stop and restart and re-serve and
now it should give us another error that

72
00:05:10.470 --> 00:05:16.629
relates to us going outside the boundaries
of the kind of stuff we should be using.

73
00:05:16.629 --> 00:05:21.520
Ah-ha, I cannot read properly
get item of undefined.

74
00:05:22.940 --> 00:05:28.220
So, can anyone venture guess as to what,
where we've crossed the boundary?

75
00:05:28.220 --> 00:05:29.110
&gt;&gt; Speaker 2: Local storage.

76
00:05:29.110 --> 00:05:32.740
&gt;&gt; Mike North: Local storage,
that is a browser specific API.

77
00:05:32.740 --> 00:05:34.410
The whole point of local storage,

78
00:05:34.410 --> 00:05:38.820
the whole reason it was created
as a separate thing from cookies.

79
00:05:38.820 --> 00:05:43.819
Cookies of course are sent along with
every HTTP request that you make,

80
00:05:43.819 --> 00:05:45.330
by default they are.

81
00:05:45.330 --> 00:05:50.286
So the whole reason it was
created is that’s data that has

82
00:05:50.286 --> 00:05:52.564
confined to the browser.

83
00:05:52.564 --> 00:05:58.621
So what I’m gonna do to solve this is
I’m going to install another add on,

84
00:05:58.621 --> 00:06:04.310
it’s called ember-cookies, and
ember install, ember cookies.

85
00:06:04.310 --> 00:06:09.020
What this does is it
creates a single facade,

86
00:06:09.020 --> 00:06:12.510
that in a browser,
will read cookies off of the document.

87
00:06:12.510 --> 00:06:15.420
That's like where you're going
to find cookies in a browser.

88
00:06:15.420 --> 00:06:18.380
And when your server rendering,
it will read the cookies

89
00:06:18.380 --> 00:06:23.420
that came in with an incoming request
that is asking for an HTML response.

90
00:06:23.420 --> 00:06:25.400
So two very different places to look for

91
00:06:25.400 --> 00:06:29.810
cookies but this gives us a nice service
that switches from one to the other and

92
00:06:29.810 --> 00:06:33.340
from our app's standpoint,
we get to treat in one way.

93
00:06:35.920 --> 00:06:40.040
So I'm going to run ember s,
s is for serve and

94
00:06:40.040 --> 00:06:47.380
we just need to go to our off service and
move away from localStorage.

95
00:06:47.380 --> 00:06:54.967
So we'll inject cookies with
the ember-cookies service.

96
00:06:56.779 --> 00:07:00.169
&gt;&gt; Mike North: I like that it brought this
in, this is gonna work out well for me.

97
00:07:04.012 --> 00:07:05.056
&gt;&gt; Mike North: Type.

98
00:07:08.657 --> 00:07:12.320
&gt;&gt; Mike North: And we are going to
purge any reference to local storage.

99
00:07:12.320 --> 00:07:17.124
So the AUTH_KEY is still useful to us, but

100
00:07:17.124 --> 00:07:20.864
we can do this.cookies.read.

101
00:07:22.100 --> 00:07:23.297
That looks right.

102
00:07:23.297 --> 00:07:26.160
Read, sounds good.

103
00:07:26.160 --> 00:07:32.998
And then set item, so
we're gonna do this, cookies, right.

104
00:07:32.998 --> 00:07:39.640
Yep, takes very similar arguments,
so it's working out really easily.

105
00:07:39.640 --> 00:07:42.444
Removing an item.

106
00:07:42.444 --> 00:07:50.696
This cookies I’m just gonna write null,

107
00:07:50.696 --> 00:07:58.255
that’s effectively zeroing it out.

108
00:07:58.255 --> 00:08:01.950
Certainly if we read it again,
it'll be understood as falsies.

109
00:08:01.950 --> 00:08:05.000
We could even have set it to zero or
an empty string because

110
00:08:05.000 --> 00:08:09.440
our authentication checks are based
on a truthy-falsey condition.

111
00:08:09.440 --> 00:08:12.320
And now there's no more
local storage in here.

112
00:08:12.320 --> 00:08:14.990
So let's see what happens if we refresh.

113
00:08:14.990 --> 00:08:16.900
Ah-ha, there's our app.

114
00:08:16.900 --> 00:08:18.520
That's good, good sign.

115
00:08:20.310 --> 00:08:22.350
Let's look at the view sources tab here.

116
00:08:22.350 --> 00:08:25.390
So this is the before picture and
here's the after.

117
00:08:26.580 --> 00:08:31.372
That's our actual app rendered,
it's an ember app that's sort of ready and

118
00:08:31.372 --> 00:08:32.783
waiting in Node.js.

119
00:08:32.783 --> 00:08:35.413
And when an incoming request arrives,

120
00:08:35.413 --> 00:08:39.482
it will go through a router just
like it does in your browser.

121
00:08:39.482 --> 00:08:42.841
And once everything is settled,
all the promises of result,

122
00:08:42.841 --> 00:08:45.174
it will take all that HTML and
send it back.

123
00:08:45.174 --> 00:08:50.220
Then, when your client-side app boots up,
it will take over from there.

124
00:08:50.220 --> 00:08:54.380
So, even if people are taking
a while to download your JavaScript,

125
00:08:54.380 --> 00:08:58.670
they will see on the screen
the HTML with the real data,

126
00:08:58.670 --> 00:09:04.720
with CSS applied to it and they very
much feel like the app is loaded.

127
00:09:04.720 --> 00:09:05.380
Yes, sir.

128
00:09:05.380 --> 00:09:10.930
&gt;&gt; Speaker 3: If they follow a link to
a path rather than your sorta route for

129
00:09:10.930 --> 00:09:16.190
the first page load, will it still
affect that path's page load?

130
00:09:16.190 --> 00:09:20.890
&gt;&gt; Mike North: So the way you set up
a production fastboot server, that will

131
00:09:20.890 --> 00:09:26.420
involve listening for any path that
begins from wherever the app is mounted.

132
00:09:26.420 --> 00:09:31.450
So regardless of which URL you hit,
it's all going to the right place.

133
00:09:31.450 --> 00:09:36.322
And we just save the URL, or
the path portion of the URL whatever that

134
00:09:36.322 --> 00:09:41.299
was we give it to the client side
router and it'll take it from there.

135
00:09:41.299 --> 00:09:48.010
But it'll respond on any URL that
is a valid URL for this app.

136
00:09:49.290 --> 00:09:52.250
But you're smart to think about
index to that HTML special for

137
00:09:52.250 --> 00:09:57.650
a single page app because
the same content either way.

138
00:09:57.650 --> 00:09:59.270
Same content, no matter how you access it.

139
00:09:59.270 --> 00:09:59.990
Yes?

140
00:09:59.990 --> 00:10:03.380
&gt;&gt; Speaker 4: I was just gonna ask,
does this actually give you

141
00:10:03.380 --> 00:10:07.220
effectively the same output as if you ran
it locally and you are at some route.

142
00:10:07.220 --> 00:10:09.910
So, what about things
like your AUTH service,

143
00:10:09.910 --> 00:10:14.420
does the back end know if you're logged in
or out, in order to generate your code?

144
00:10:14.420 --> 00:10:17.160
&gt;&gt; Mike North: Good question, it does.

145
00:10:17.160 --> 00:10:21.400
And it does because we're using
cookies as our storage mechanism now.

146
00:10:21.400 --> 00:10:25.850
So my cookie is sent along
with that HTTP request.

147
00:10:25.850 --> 00:10:28.920
And I can show you what that looks like.

148
00:10:28.920 --> 00:10:36.955
So our document request,
&gt;&gt; Mike North: Well, I have a filter.

149
00:10:36.955 --> 00:10:41.610
There's our document request for
going to teams/LinkedIn/recruiting.

150
00:10:41.610 --> 00:10:43.790
If I look at that look at the headers.

151
00:10:45.330 --> 00:10:49.506
You can probably scroll down and
see something.

152
00:10:49.506 --> 00:10:52.740
So there's my cookie and
my user ID being sent along for the ride.

153
00:10:54.160 --> 00:10:58.299
&gt;&gt; Speaker 5: Looks very secure, no way
to possibly send the wrong ID there.

154
00:10:58.299 --> 00:10:59.848
&gt;&gt; Mike North: Well,
that's not real authentication.

155
00:10:59.848 --> 00:11:00.439
&gt;&gt; Speaker 5: No, I get it.

156
00:11:00.439 --> 00:11:03.883
&gt;&gt; Mike North: But typically this
would be a server generated token

157
00:11:03.883 --> 00:11:08.261
of some sort where it’s of no value
to anyone who would snoop on it,

158
00:11:08.261 --> 00:11:13.051
it would be like one way hashed
&gt;&gt; Mike North: Like

159
00:11:13.051 --> 00:11:15.730
a JSON web token would be
totally safe to put here.

160
00:11:15.730 --> 00:11:20.499
And if we're using HTTPS then no one's
gonna be able to read this anyway.

161
00:11:20.499 --> 00:11:23.240
All right, so we have server rendering.

162
00:11:23.240 --> 00:11:27.330
Last step is to make it a PWA.

163
00:11:27.330 --> 00:11:30.300
So I'm gonna commit this code and
we will do our last little step.

164
00:11:31.510 --> 00:11:33.490
And then take a look at
how fast this thing is.

