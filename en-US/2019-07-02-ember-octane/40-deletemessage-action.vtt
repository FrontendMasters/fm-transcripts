WEBVTT

1
00:00:00.120 --> 00:00:06.280
&gt;&gt; Mike: The last major change we're going
to make to this app is delete message.

2
00:00:06.280 --> 00:00:11.090
And we're gonna just follow a very similar
process that we use for create message.

3
00:00:11.090 --> 00:00:13.370
We're gonna begin at
the container component and

4
00:00:13.370 --> 00:00:17.300
then we're gonna thread that action
through to the delete button.

5
00:00:18.660 --> 00:00:25.690
So let's look at Chat container, we're
gonna create a new a sync action called

6
00:00:25.690 --> 00:00:32.750
delete message and
we're going to make a delete request.

7
00:00:32.750 --> 00:00:38.330
So I'm actually gonna copy this,
that looks like I might wanna use it, yep.

8
00:00:39.670 --> 00:00:45.244
We’re gonna take it a message ID,
whatever we wanna delete and

9
00:00:45.244 --> 00:00:48.411
we’re gonna build our URL like so.

10
00:00:51.731 --> 00:00:55.337
&gt;&gt; Mike: We’re gonna say
the method is delete,

11
00:00:55.337 --> 00:00:59.495
just trying to save as
much work as I can here.

12
00:00:59.495 --> 00:01:07.622
Method is delete, we're passing the same
content type as create a message and

13
00:01:07.622 --> 00:01:12.560
we can basically,
we can't quite stop there.

14
00:01:12.560 --> 00:01:15.665
We should probably look
through the list of messages,

15
00:01:15.665 --> 00:01:17.699
like we need to update our UI right.

16
00:01:17.699 --> 00:01:20.818
We should look through
the list of messages,

17
00:01:20.818 --> 00:01:24.757
find whichever one's ID matches
the ID we were given find

18
00:01:24.757 --> 00:01:30.020
that index then splice that array so
that it's not there anymore.

19
00:01:30.020 --> 00:01:30.710
So let's do that.

20
00:01:32.840 --> 00:01:40.374
So we could say message
IDs equals messages map,

21
00:01:40.374 --> 00:01:46.453
map them to their ID and find the index.

22
00:01:49.894 --> 00:01:54.655
&gt;&gt; Mike: Index to delete message IDs,

23
00:01:54.655 --> 00:01:58.660
index of the message ID.

24
00:02:01.010 --> 00:02:07.547
That's the index to delete and
now we can say new messages.

25
00:02:07.547 --> 00:02:13.555
Cuz if we’re gonna use splice
that mutates the array so

26
00:02:13.555 --> 00:02:17.864
I’ll do this, messages, splice, so

27
00:02:17.864 --> 00:02:24.403
this starts removing elements
that are particular index.

28
00:02:24.403 --> 00:02:27.270
So that's the index to delete.

29
00:02:27.270 --> 00:02:28.340
We wanna just delete one.

30
00:02:30.510 --> 00:02:34.763
And now we're gonna have to
do this tricky thing where

31
00:02:34.763 --> 00:02:38.919
we say this dot messages
equals this dot messages and

32
00:02:38.919 --> 00:02:44.710
we'll leave a comment here cuz this
looks funky necessary for tracked.

33
00:02:44.710 --> 00:02:48.230
This is how property tracking
is gonna pick up on this.

34
00:02:48.230 --> 00:02:52.380
&gt;&gt; Speaker 2: So you didn't have to
change the array to do assignment of it?

35
00:02:52.380 --> 00:02:54.110
&gt;&gt; Mike: To insert something?

36
00:02:54.110 --> 00:02:58.380
&gt;&gt; Speaker 2: To cause
the tracking to regenerate.

37
00:02:58.380 --> 00:03:01.740
You're not taking the values of it and
putting into a new array and splatting it,

38
00:03:01.740 --> 00:03:03.394
you're just assigning it?

39
00:03:03.394 --> 00:03:06.660
&gt;&gt; Mike: No, so

40
00:03:06.660 --> 00:03:11.890
the way I think about variables in
JavaScript, this makes sense to me.

41
00:03:11.890 --> 00:03:16.100
So, there's a variable,
a property on this class called messages.

42
00:03:16.100 --> 00:03:21.004
And its value happens to be an array,
which exists somewhere in memory.

43
00:03:21.004 --> 00:03:23.980
So, serve a local name
which points to this value.

44
00:03:23.980 --> 00:03:28.050
If you do an assignment and
give it that same array.

45
00:03:28.050 --> 00:03:32.580
There is no short circuiting that will
say, I'm already pointing to that thing.

46
00:03:32.580 --> 00:03:35.870
And I'm going to skip calling
the getter or the setter,

47
00:03:35.870 --> 00:03:39.530
or whatever needs to happen in order
to make that assignment happen.

48
00:03:39.530 --> 00:03:42.000
So it'll still go through the same path.

49
00:03:42.000 --> 00:03:47.400
The reason we're doing this is because
this is the mechanism by which we trigger

50
00:03:47.400 --> 00:03:52.700
a reevaluation of the world and
what needs to update in the dom.

51
00:03:52.700 --> 00:03:54.770
Does that make sense?

52
00:03:56.080 --> 00:03:59.940
The fact that it happens to be the same
array is not of consequence, all right?

53
00:04:01.610 --> 00:04:05.548
So, good,
I think we've got this set up pretty well.

54
00:04:05.548 --> 00:04:12.470
Let's,
&gt;&gt; Mike: Let's yield this new action app.

55
00:04:12.470 --> 00:04:13.980
There's deleteMessage.

56
00:04:13.980 --> 00:04:17.880
So let's go to our container and

57
00:04:17.880 --> 00:04:20.490
we're gonna have something
that looks basically the same.

58
00:04:21.500 --> 00:04:23.020
It's just gonna be delete message.

59
00:04:23.020 --> 00:04:27.230
And now this object that we've yielded
out starts to make a lot of sense.

60
00:04:27.230 --> 00:04:31.080
Imagine a situation where you have
20 different actions here, right.

61
00:04:31.080 --> 00:04:34.730
If you've used something
like Ember Power Select or

62
00:04:34.730 --> 00:04:39.540
these highly customized components
like Dave Pedro Components where

63
00:04:39.540 --> 00:04:44.180
you've got actions that fire when
people paginate through months.

64
00:04:44.180 --> 00:04:48.430
Or when people begin selection of a date
range and end selection of a date range is

65
00:04:48.430 --> 00:04:53.700
very flexible components often will
expose a huge variety of actions.

66
00:04:53.700 --> 00:04:56.810
So that you can respond to
those changes appropriately.

67
00:04:56.810 --> 00:05:00.390
And you'll just wrap over your own custom,
whatever it is.

68
00:05:00.390 --> 00:05:04.520
Maybe it's a airline flight finder or
something.

69
00:05:04.520 --> 00:05:06.000
The date picker doesn't know about that,

70
00:05:06.000 --> 00:05:09.590
but it needs to expose all
of these triggers for you.

71
00:05:09.590 --> 00:05:13.940
And yielding them all out as an object
lets you kinda pick up on them by name.

72
00:05:13.940 --> 00:05:18.809
It's a much more friendly API to
consume than a magic ordering of

73
00:05:19.940 --> 00:05:22.050
26 different things that you're yielding.

74
00:05:22.050 --> 00:05:27.610
So let's go to where this is gonna
pop out and that is in channel.hbs.

75
00:05:27.610 --> 00:05:32.640
It's going to come through
in this channel API.

76
00:05:32.640 --> 00:05:37.971
It turns out that we can use
your partial application here.

77
00:05:37.971 --> 00:05:42.440
It turns out that we can just pull
it right off this channel API.

78
00:05:42.440 --> 00:05:47.926
And we can say,
delete equals invoke the function.

79
00:05:47.926 --> 00:05:52.367
Channel API, delete message and

80
00:05:52.367 --> 00:05:57.130
we're gonna pass it to message ID.

81
00:05:58.410 --> 00:05:59.626
So there you go.

82
00:05:59.626 --> 00:06:03.490
Now although delete message
is an one argument function,

83
00:06:04.790 --> 00:06:06.900
right it needs a message ID to be passed.

84
00:06:06.900 --> 00:06:10.240
From the standpoint of
this component here,

85
00:06:10.240 --> 00:06:15.130
it thinks it can treat it as if
it's a zero argument function.

86
00:06:15.130 --> 00:06:19.270
And we're not gonna need to do
much at all to wire this thing up.

87
00:06:19.270 --> 00:06:21.390
So let's go into the template, the action.

88
00:06:23.050 --> 00:06:27.520
The org that I've passed in,
happens to be a function,

89
00:06:28.650 --> 00:06:31.653
but we treat it like any other org and
it's called the delete.

90
00:06:31.653 --> 00:06:35.420
So were gonna go to message and
then find that little trashcan.

91
00:06:35.420 --> 00:06:41.005
There it is and we'll say unclick, delete.

92
00:06:41.005 --> 00:06:43.848
That's it, it should work.

93
00:06:43.848 --> 00:06:49.770
Save and let's delete some
of this nonsense at the end.

94
00:06:52.500 --> 00:06:54.309
Nice, just works.

95
00:06:55.390 --> 00:06:59.780
That's an example of how
partial application,

96
00:06:59.780 --> 00:07:03.450
baking all of the arguments in,
outside of the component.

97
00:07:04.690 --> 00:07:07.900
This really made our job simpler when

98
00:07:07.900 --> 00:07:10.030
we're dealing with
the component on the inside.

99
00:07:10.030 --> 00:07:14.840
We just have to think about what's
the dumb element and which event and

100
00:07:14.840 --> 00:07:18.120
here's your function,
go and it just works.

101
00:07:19.770 --> 00:07:21.180
Let's check our tests real quick,

102
00:07:21.180 --> 00:07:23.190
I have no reason to believe
that they started to fail.

103
00:07:26.710 --> 00:07:27.680
Still looks good.

104
00:07:30.780 --> 00:07:34.899
So I'll commit this code and push it up.

