WEBVTT

1
00:00:00.080 --> 00:00:02.602
&gt;&gt; Mike North: We're going to
parameterize one of these components.

2
00:00:02.602 --> 00:00:06.902
We wanna be able to pass values in and
use that as part of building up the HTML.

3
00:00:06.902 --> 00:00:09.543
And we're gonna first
look at ChannelHeader,

4
00:00:09.543 --> 00:00:12.520
where we're gonna pass in a title and
a description.

5
00:00:12.520 --> 00:00:16.784
The way we do this in Ember Octane
is through named arguments,

6
00:00:16.784 --> 00:00:19.168
and here's what that looks like.

7
00:00:25.958 --> 00:00:30.351
&gt;&gt; Mike North: So we pick a name for
a property, title in this case, and

8
00:00:30.351 --> 00:00:34.640
we make sure that we prepend
it with the at symbol.

9
00:00:34.640 --> 00:00:38.690
And whenever you see this
at symbol in a template,

10
00:00:38.690 --> 00:00:42.690
this is an indication that this
is an immutable piece of data

11
00:00:42.690 --> 00:00:45.980
that is being passed into
a component from the outside.

12
00:00:45.980 --> 00:00:48.810
In this case,
we're seeing it from the outside,

13
00:00:48.810 --> 00:00:51.670
that we are passing the string
into the component.

14
00:00:51.670 --> 00:00:58.100
But we can refer to it as @title from
within this component just the same.

15
00:00:59.520 --> 00:01:04.262
So I have a fancy VS Code
extension here where I can Cmd +

16
00:01:04.262 --> 00:01:09.490
click on this component name and
jump into its template.

17
00:01:10.980 --> 00:01:12.966
But if you were using another editor,

18
00:01:12.966 --> 00:01:16.702
you could've just gone templates
&gt; components &gt; channel-header.

19
00:01:18.410 --> 00:01:23.310
That's always where you find components,
templates &gt; components, and

20
00:01:23.310 --> 00:01:25.260
then the name of the component.

21
00:01:25.260 --> 00:01:29.690
So now we're in the channel header, and
I can replace general with a handlebars

22
00:01:29.690 --> 00:01:33.080
expression, that's what these
double curly braces mean.

23
00:01:33.080 --> 00:01:39.224
If you've ever used, in JavaScript,
tagged template literals,

24
00:01:39.224 --> 00:01:44.074
the backtick strings where
you can mix regular data,

25
00:01:44.074 --> 00:01:47.871
static data, like hello and then world.

26
00:01:50.693 --> 00:01:54.990
&gt;&gt; Mike North: And sorry, I said backtick
strings, and that's what I meant.

27
00:01:54.990 --> 00:01:59.680
So you can think of handlebars
expressions similarly in that

28
00:01:59.680 --> 00:02:04.950
anything outside of the expressions is
static, in this case, the regular HTML.

29
00:02:04.950 --> 00:02:08.570
And anything inside that is
an expression that's evaluated.

30
00:02:08.570 --> 00:02:12.760
It could be just a value or
it could be a function that you invoke and

31
00:02:12.760 --> 00:02:13.950
that function returns a value.

32
00:02:15.350 --> 00:02:17.797
So in here, we can just say title, and

33
00:02:17.797 --> 00:02:21.481
we should see the title change
on the right, and it does.

34
00:02:21.481 --> 00:02:24.653
Let's do the same thing
with the description,

35
00:02:24.653 --> 00:02:26.803
and that's this bit down here.

36
00:02:26.803 --> 00:02:32.860
We can select that and replace it with
a handlebars expression, description.

37
00:02:32.860 --> 00:02:35.500
Now, there's nothing there,
just like in JavaScript,

38
00:02:35.500 --> 00:02:37.720
these values start out empty, right?

39
00:02:37.720 --> 00:02:42.691
It's not throwing an error at us, I mean,
I could demonstrate that it's not, but

40
00:02:42.691 --> 00:02:43.409
it's not.

41
00:02:43.409 --> 00:02:46.369
But it's just empty,
it's just not there, so

42
00:02:46.369 --> 00:02:50.591
we could go back to our application.hbs
and give it a description.

43
00:03:00.254 --> 00:03:03.540
&gt;&gt; Mike North: And there you go, so
we can see that both the title and

44
00:03:03.540 --> 00:03:07.503
the description,
their arguments passed into the function,

45
00:03:07.503 --> 00:03:09.913
passed into the component, rather.

46
00:03:09.913 --> 00:03:13.005
And we're using those as part
of building up the HTML.

47
00:03:13.005 --> 00:03:18.379
If you're coming from a React background,
this is equivalent to props.

48
00:03:22.326 --> 00:03:26.892
&gt;&gt; Mike North: And we haven't dealt with
mutating data yet, but it's worth noting

49
00:03:26.892 --> 00:03:31.548
that the component cannot change
these values, they are immutable.

50
00:03:31.548 --> 00:03:36.249
Their components should be given these
values, and they should be used and

51
00:03:36.249 --> 00:03:38.572
accessed but not changed in any way.

52
00:03:40.863 --> 00:03:42.883
&gt;&gt; Mike North: So we've just
parameterized our component, and

53
00:03:42.883 --> 00:03:44.091
this is the end of step three.

54
00:03:47.985 --> 00:03:49.847
&gt;&gt; Speaker 2: So you said in React,
they're called props,

55
00:03:49.847 --> 00:03:51.102
what are they called in Ember?

56
00:03:51.102 --> 00:03:53.204
&gt;&gt; Mike North: Arguments, args.

