WEBVTT

1
00:00:00.000 --> 00:00:04.829
So with that, I really wanna just
leave you with a final checklist,

2
00:00:04.829 --> 00:00:07.382
we're really are wrapping up now.

3
00:00:07.382 --> 00:00:11.900
So I wanna kind of run through some of the
key findings that we talked about today,

4
00:00:11.900 --> 00:00:14.569
the key things that I
would encourage you to do.

5
00:00:14.569 --> 00:00:20.512
And there were a variety
of different things.

6
00:00:20.512 --> 00:00:22.979
This whole idea of meshing design and

7
00:00:22.979 --> 00:00:27.765
developing them closely together
is quite an important one, really.

8
00:00:27.765 --> 00:00:32.701
Cuz it's kind of fundamental to your
success going forward to get that working

9
00:00:32.701 --> 00:00:35.113
relationship right between the two.

10
00:00:35.113 --> 00:00:39.854
That whole thing about never showing
the design to your client without

11
00:00:39.854 --> 00:00:44.202
first showing it to your developer,
really important as well.

12
00:00:44.202 --> 00:00:49.369
Again, it's about ensuring that the
designs you're producing are practical and

13
00:00:49.369 --> 00:00:53.586
appropriate within the constraints
that you're working within.

14
00:00:53.586 --> 00:00:54.718
I would recommend,

15
00:00:54.718 --> 00:00:58.921
basically creating a simple design
system for any design that you work on.

16
00:00:58.921 --> 00:01:03.538
Work with components within things
like Figma and stuff like that so

17
00:01:03.538 --> 00:01:07.993
that you make your own life easier
as you tweak, and improve, and

18
00:01:07.993 --> 00:01:12.213
change the design,
even if you get into feedback territory.

19
00:01:12.213 --> 00:01:17.369
So for example, when I produce a design
in Figma, because I'm using components.

20
00:01:17.369 --> 00:01:22.004
When I do some testing,
I've just done with usability testing and

21
00:01:22.004 --> 00:01:26.994
they turn around and say it performed
worse than the existing version.

22
00:01:26.994 --> 00:01:31.627
It's not the end of the world, because I
can implement their recommended changes

23
00:01:31.627 --> 00:01:34.380
really easily across
the whole of my prototype,

24
00:01:34.380 --> 00:01:36.817
because it's all built with components.

25
00:01:36.817 --> 00:01:41.635
That will be so much more difficult, I
had to go through every single screen and

26
00:01:41.635 --> 00:01:43.975
change it, it's just common sense.

27
00:01:43.975 --> 00:01:46.899
Yeah, and
if you're gonna get onto bigger sites and

28
00:01:46.899 --> 00:01:51.220
definitely build a more robust design
system, one that integrates with your

29
00:01:51.220 --> 00:01:54.764
code design system as well,
that's definitely worth doing.

30
00:01:54.764 --> 00:01:58.831
And then start talking about post-launch
optimization right at the very beginning

31
00:01:58.831 --> 00:01:59.639
of the project.

32
00:01:59.639 --> 00:02:02.081
Make sure it's built into your timelines,

33
00:02:02.081 --> 00:02:05.711
because it is the most valuable
stage from a design point of view.

34
00:02:05.711 --> 00:02:10.575
And then finally, work on that
site optimization through that

35
00:02:10.575 --> 00:02:14.166
ongoing cycle of
identifying problem pages.

36
00:02:14.166 --> 00:02:18.098
Identifying the problem on the page, form
a hypothesis about how you could fix it,

37
00:02:18.098 --> 00:02:20.193
and come up with some different solutions.

38
00:02:20.193 --> 00:02:24.220
Test those solutions, roll them out,
rinse and repeat, simple as that.

