WEBVTT

1
00:00:00.240 --> 00:00:04.255
So we did the products, we have pretty
much all the CRUD methods we need.

2
00:00:04.255 --> 00:00:08.330
We tested a few of them,
they seem to be working fine.

3
00:00:08.330 --> 00:00:11.551
What I want you to do is do
the same thing for the update.

4
00:00:11.551 --> 00:00:15.710
And then, if you can do that, try to
do the same thing for the update point,

5
00:00:15.710 --> 00:00:17.111
just go as far as you can.

6
00:00:17.111 --> 00:00:20.191
And then we'll come back,
we'll figure them out together.

7
00:00:20.191 --> 00:00:22.909
We'll probably move a lot faster on those,

8
00:00:22.909 --> 00:00:27.328
since it's mostly the same as these were,
just different resources.

9
00:00:27.328 --> 00:00:28.635
But I want you to try, and

10
00:00:28.635 --> 00:00:32.450
you can reference the ones we just did
here as an example of how to do them.

11
00:00:32.450 --> 00:00:37.082
Cuz like I said, it's mostly going
to be the same as far as the type

12
00:00:37.082 --> 00:00:40.298
of query you're doing
inside of the intent.

13
00:00:40.298 --> 00:00:42.874
It's just the different resources and

14
00:00:42.874 --> 00:00:46.237
different relationships
that you might run into.

15
00:00:46.237 --> 00:00:49.274
But for the most part, it's the same.

16
00:00:52.854 --> 00:00:56.775
Yeah, let's just add the rest,
where I left off was,

17
00:00:56.775 --> 00:01:02.844
I didn't add the rest of the product stuff
to the routes, so I'm just gonna do that.

18
00:01:02.844 --> 00:01:07.239
So I was gonna go to routes,
or router in my case here, for

19
00:01:07.239 --> 00:01:12.384
the get product by one ID,
since we do have a product in a database.

20
00:01:12.384 --> 00:01:16.623
I'm just gonna say getOneProduct,
like that, product in a database, so

21
00:01:16.623 --> 00:01:18.118
I can actually test this.

22
00:01:18.118 --> 00:01:21.054
I'm gonna go to my Prisma Studio,

23
00:01:21.054 --> 00:01:26.387
I'm gonna grab that ID here for
this product, gonna copy it.

24
00:01:26.387 --> 00:01:30.113
Gonna stop my server, start it again.

25
00:01:30.113 --> 00:01:36.425
Yeah, I got my server started here,
gonna go to Thunder Client.

26
00:01:36.425 --> 00:01:42.604
And I'm going to make a GET
request to api/product/ that id.

27
00:01:42.604 --> 00:01:47.526
And that should allow me to
get a product with that id.

28
00:01:47.526 --> 00:01:49.165
So let's see if this works.

29
00:01:49.165 --> 00:01:50.845
If not, we'll have to fix our stuff.

30
00:01:50.845 --> 00:01:54.099
So I don't need anything here in the body,
cuz we're doing a GET.

31
00:01:54.099 --> 00:01:57.280
I'm ignoring it anyway,
so it doesn't matter.

32
00:01:57.280 --> 00:02:00.567
And I should get back this
same product down here.

33
00:02:00.567 --> 00:02:03.349
And let me just make sure I got my off,
I do, we'll send this request, and I do.

34
00:02:03.349 --> 00:02:07.182
I get back the same product there,
so our getOneProduct works fine.

35
00:02:07.182 --> 00:02:11.708
And just to show you, if I change the 7,
if I just get rid of the 7, I guess, and

36
00:02:11.708 --> 00:02:13.683
send this, it gets back nothing.

37
00:02:13.683 --> 00:02:16.345
Cuz there's not a product with that id,
so.

38
00:02:19.335 --> 00:02:21.107
Okay, so get one works fine.

39
00:02:21.107 --> 00:02:24.224
And then we need to do one for, I think,

40
00:02:24.224 --> 00:02:29.150
delete might have been the last one for
this one, let's see.

41
00:02:30.560 --> 00:02:31.690
Yeah, it's delete.

42
00:02:31.690 --> 00:02:36.896
So we'll go here, and
we'll say deleteProduct.

43
00:02:36.896 --> 00:02:38.504
So now we have deleteProduct.

44
00:02:41.140 --> 00:02:43.220
Going to stop, start.

45
00:02:45.170 --> 00:02:48.790
Go back here, I'm gonna do a DELETE.

46
00:02:48.790 --> 00:02:54.161
And the URL is the same,
all we did was just change from,

47
00:02:54.161 --> 00:02:57.217
GET to DELETE, but the URL is the same.

48
00:02:57.217 --> 00:03:00.414
We're still doing api/product/ this id.

49
00:03:00.414 --> 00:03:04.160
So I wanna delete
the product with this id.

50
00:03:04.160 --> 00:03:09.379
So I'm gonna send that, and, voila,
we deleted the product with that id,

51
00:03:09.379 --> 00:03:12.574
and it's sent back
the thing that we deleted.

52
00:03:12.574 --> 00:03:16.723
And just to verify,
if I tried to get this again,

53
00:03:16.723 --> 00:03:22.239
it should not come back, and
it doesn't, cuz we deleted it.

54
00:03:22.239 --> 00:03:27.860
Right, okay, that seems to be good,
let's move on to the next ones.

55
00:03:27.860 --> 00:03:34.190
Thunder Client is messing me up so
bad, [LAUGH] I think it's another app.

56
00:03:34.190 --> 00:03:40.520
Okay, so let's do updates,
make a new file, update.ts, there we go.

57
00:03:42.010 --> 00:03:46.943
If you are lazy like me, you would just
copy this whole file from product.ts,

58
00:03:46.943 --> 00:03:51.455
put it in update.ts, and just change
the things you needed to change.

59
00:03:51.455 --> 00:03:54.460
I'm not gonna do that, cuz I don't
wanna confuse anyone in this course.

60
00:03:54.460 --> 00:03:56.280
So we'll just keep doing it from scratch.

61
00:03:56.280 --> 00:03:58.284
But in reality,
that's what I would have did, and

62
00:03:58.284 --> 00:03:59.691
now I just wanna change the things.

63
00:03:59.691 --> 00:04:02.559
But I'm just gonna keep it,
we're just gonna go through these, and

64
00:04:02.559 --> 00:04:04.760
you can ask questions along the way.

65
00:04:04.760 --> 00:04:07.674
So let's just write
the function names out.

66
00:04:07.674 --> 00:04:09.544
First, I'll say, what is this?

67
00:04:09.544 --> 00:04:15.332
Yeah, getOneUpdate equals that, okay.

68
00:04:15.332 --> 00:04:21.076
I'm just gonna copy that,
we got getOneUpdate,

69
00:04:21.076 --> 00:04:25.539
we got get, Updates.

70
00:04:25.539 --> 00:04:32.918
We have, createUpdate,

71
00:04:32.918 --> 00:04:39.300
we have updateUpdate,
[LAUGH] that's funny.

72
00:04:41.104 --> 00:04:42.906
And then we have deleteUpdate.

73
00:04:47.017 --> 00:04:48.659
Cool, all five of those.

74
00:04:53.034 --> 00:04:57.839
Import our prisma,
From db, and let's do it.

75
00:04:57.839 --> 00:05:06.416
So to getOneUpdate, we need to get
the update from prisma.update.findUnique.

76
00:05:06.416 --> 00:05:13.115
Well, findUnique won't work right
now until we make a new index.

77
00:05:13.115 --> 00:05:15.400
So I'll just say findFirst for now.

78
00:05:15.400 --> 00:05:21.273
So findFirst, where productId is going

79
00:05:21.273 --> 00:05:26.629
to equal to req.body.productId,

80
00:05:26.629 --> 00:05:33.380
which is what update
should have on the input.

81
00:05:33.380 --> 00:05:35.230
But if it doesn't, we need to add that.

82
00:05:35.230 --> 00:05:42.140
So if I go back to the update, if I wanna
do an update, Which one am I doing?

83
00:05:42.140 --> 00:05:43.100
Wait, hold on.

84
00:05:44.894 --> 00:05:45.790
This is just get one.

85
00:05:45.790 --> 00:05:49.690
I'm sorry, I don't need a productId,
that's for creating, we're good.

86
00:05:49.690 --> 00:05:54.720
Okay, so to getOneUpdate,
we just need the update's id.

87
00:05:54.720 --> 00:06:00.807
So id would be, and
I guess now we can do findUnique.

88
00:06:00.807 --> 00:06:02.991
So id would just be req.params.id.

89
00:06:08.417 --> 00:06:16.401
Then I'll just say res.json, data: update.

90
00:06:16.401 --> 00:06:19.691
And I don't know why I called it update,

91
00:06:19.691 --> 00:06:23.339
that's why I got confused
cuz of the word update.

92
00:06:23.339 --> 00:06:29.240
But it's an update,
[LAUGH] I thought I was doing an update.

93
00:06:29.240 --> 00:06:32.232
No, it's literally an update.

94
00:06:32.232 --> 00:06:37.557
Okay, that's why I got thrown off there,
naming is important.

95
00:06:37.557 --> 00:06:42.110
All right, so we got that,
and let's do getUpdates.

96
00:06:42.110 --> 00:06:46.645
So for getUpdates,

97
00:06:46.645 --> 00:06:50.646
we can say updates

98
00:06:50.646 --> 00:06:59.729
are await prisma.update.findMany,

99
00:07:04.796 --> 00:07:09.243
Where, let's see,
we wanna get all the updates for,

100
00:07:09.243 --> 00:07:14.852
this one's tough cuz it's like,
do you wanna get all the updates for

101
00:07:14.852 --> 00:07:21.920
the signed in user, which will be
spanned across many different products?

102
00:07:21.920 --> 00:07:25.650
Or do you wanna get all the updates for
a certain product?

103
00:07:25.650 --> 00:07:27.363
And if so, where did you send that?

104
00:07:27.363 --> 00:07:31.960
It's not on the query string,
it's not on the URL, is it on the body?

105
00:07:33.040 --> 00:07:37.357
So for now, this is what I said,
this is where res breaks down,

106
00:07:37.357 --> 00:07:40.783
cuz this probably wouldn't
make sense in our UI.

107
00:07:40.783 --> 00:07:45.036
I can't think of a place in that
app where I would wanna see all

108
00:07:45.036 --> 00:07:48.718
the updates spread across
all different products.

109
00:07:48.718 --> 00:07:51.773
I don't think we even have a screen for
that in that design.

110
00:07:51.773 --> 00:07:53.616
But maybe we'll just make it anyway,

111
00:07:53.616 --> 00:07:57.127
yeah, this is where sometimes you've
gotta go back and be like, yeah,

112
00:07:57.127 --> 00:08:01.140
we don't need that, this is a wasted
route, it's not serving a purpose.

113
00:08:01.140 --> 00:08:06.460
But for now, we'll just get all
the updates for the signed in user.

114
00:08:06.460 --> 00:08:09.695
But how will that look like,
because update, yes.

115
00:08:09.695 --> 00:08:12.030
&gt;&gt; But have you thought about
doing a composite route, so

116
00:08:12.030 --> 00:08:13.974
you have an update on
the context of product?

117
00:08:13.974 --> 00:08:19.350
You just kind of keep building on the URI,
it's a reason why we wouldn't do that?

118
00:08:19.350 --> 00:08:20.890
&gt;&gt; That's a great question.

119
00:08:20.890 --> 00:08:22.640
There's no reason why
you wouldn't do that.

120
00:08:22.640 --> 00:08:27.478
In fact, that's a very common pattern
I think people start to do when they

121
00:08:27.478 --> 00:08:29.361
start to deviate from REST.

122
00:08:29.361 --> 00:08:34.193
It's like, let's just allow you to add
different filters or whatever on the query

123
00:08:34.193 --> 00:08:38.003
string, where you could just add on and
select this and add that.

124
00:08:38.003 --> 00:08:40.604
Yeah, there's nothing wrong with that.

125
00:08:40.604 --> 00:08:43.162
It gets pretty advanced at that point.

126
00:08:43.162 --> 00:08:48.437
I mean, you're basically just creating
your own query language at that point,

127
00:08:48.437 --> 00:08:51.241
which is fine if everyone understands it.

128
00:08:51.241 --> 00:08:54.320
And I don't think there's
a problem with that.

129
00:08:54.320 --> 00:08:56.391
The reason I didn't wanna
do it in the course,

130
00:08:56.391 --> 00:08:59.062
cuz I think you then have to
teach someone a query language.

131
00:08:59.062 --> 00:09:03.259
But yeah, that's actually what you would
see in production is what you just

132
00:09:03.259 --> 00:09:05.826
described, nine out of
ten times it's that.

133
00:09:05.826 --> 00:09:11.359
It's like, we're just gonna compose this
URL, we're just gonna keep adding to it.

134
00:09:11.359 --> 00:09:16.258
And then eventually it might get too big,
and someone makes another route, or,

135
00:09:16.258 --> 00:09:20.860
yeah, something down that line,
but yeah, that's a great point.

136
00:09:20.860 --> 00:09:24.837
&gt;&gt; When I've encountered that in the past,
that's usually what I've done.

137
00:09:24.837 --> 00:09:28.091
But I agree that it's like if you
have too composed of a resource,

138
00:09:28.091 --> 00:09:29.992
it can get kinda confusing in the URI.

139
00:09:29.992 --> 00:09:32.485
So probably it works maybe two or
three max.

140
00:09:32.485 --> 00:09:37.178
&gt;&gt; Yeah, the way that I've seen
it is that eventually you gotta

141
00:09:37.178 --> 00:09:40.408
send up how many levels deep you wanna go.

142
00:09:40.408 --> 00:09:44.453
It's like, all right, we'll default
to two levels, anything past that,

143
00:09:44.453 --> 00:09:48.201
you gotta explicitly send up a number
of how many levels you wants to go.

144
00:09:48.201 --> 00:09:52.193
But then you gotta deal with cyclic
relationships, where it's like,

145
00:09:52.193 --> 00:09:55.665
a user might own a product, and
a product might own an update.

146
00:09:55.665 --> 00:09:59.593
But update might belong to a user,
and then you start going deep, but

147
00:09:59.593 --> 00:10:01.240
how do you know when to stop?

148
00:10:01.240 --> 00:10:04.410
And you gotta detect that cyclic nature.

149
00:10:04.410 --> 00:10:08.802
It gets tough with that, but
yeah, great point, exactly.

150
00:10:08.802 --> 00:10:14.449
That's one technique on how you can
break out of the simplicity of REST.

151
00:10:16.070 --> 00:10:19.260
But yeah, so let's say we wanna
get all the updates for a user.

152
00:10:19.260 --> 00:10:19.830
How do we do that?

153
00:10:19.830 --> 00:10:22.430
Because update knows nothing about a user.

154
00:10:22.430 --> 00:10:27.508
And a user knows nothing about an update.

155
00:10:27.508 --> 00:10:29.690
There's no update on the user.

156
00:10:29.690 --> 00:10:32.130
There is no user on an update.

157
00:10:32.130 --> 00:10:33.364
&gt;&gt; It's the product id?

158
00:10:33.364 --> 00:10:36.940
&gt;&gt; Okay, yeah, common ground.

159
00:10:36.940 --> 00:10:38.340
Common ground is a product.

160
00:10:38.340 --> 00:10:40.520
A product knows about an update.

161
00:10:40.520 --> 00:10:42.560
It also knows about a user.

162
00:10:42.560 --> 00:10:46.690
So maybe if we find all the products
that belong to a user, we can get all

163
00:10:46.690 --> 00:10:51.252
the updates for all those products, and
then we get all the updates, right?

164
00:10:51.252 --> 00:10:53.946
Cool, let's do that, or
you could come in here and

165
00:10:53.946 --> 00:10:57.530
make a whole new schema if you wanted
to [LAUGH], and go crazy with it.

166
00:10:57.530 --> 00:11:00.796
There's so many ways around this problem,
but yeah, yes.

167
00:11:00.796 --> 00:11:03.363
&gt;&gt; Would that be like
a many-to-many relationship, and

168
00:11:03.363 --> 00:11:05.130
you'd have that joining table?

169
00:11:05.130 --> 00:11:06.135
&gt;&gt; Yeah, technically, yeah.

170
00:11:06.135 --> 00:11:09.862
If this was SQL,
you'd be creating a join table of,

171
00:11:09.862 --> 00:11:13.880
this id of this update points
to this id of this user.

172
00:11:13.880 --> 00:11:18.436
And you'd just have a bunch of those, and
then all you have to do is just query that

173
00:11:18.436 --> 00:11:23.330
table of like, find all the update IDs
that have this user ID associated with it.

174
00:11:23.330 --> 00:11:27.831
And you could do that, in fact, there is
a way to do that here manually in Prisma,

175
00:11:27.831 --> 00:11:30.229
because they do it for you automatically.

176
00:11:30.229 --> 00:11:35.672
But you can manually make your own table,
doing it that way.

177
00:11:35.672 --> 00:11:37.230
Okay, but yeah, let's do it that way.

178
00:11:37.230 --> 00:11:40.944
So before we get updates,
we gotta get products.

179
00:11:40.944 --> 00:11:43.140
So we could say products are await.

180
00:11:44.355 --> 00:11:49.374
And we already did this in
the product stuff, right?

181
00:11:49.374 --> 00:11:53.490
We already did that over here where
we actually get all the products for

182
00:11:53.490 --> 00:11:54.127
the user.

183
00:11:54.127 --> 00:11:56.930
But it's not abstracted enough for
us to take it,

184
00:11:56.930 --> 00:11:59.800
cuz it's responding to requests and stuff.

185
00:11:59.800 --> 00:12:04.110
And then that's when you start getting,
well, how about we separate

186
00:12:04.110 --> 00:12:08.730
all this stuff out from the whole point
of responding and using all of this?

187
00:12:08.730 --> 00:12:12.189
And that's the epitome
of abstracted Express,

188
00:12:12.189 --> 00:12:17.505
if you ever reach a level where
you feel like that's necessary.

189
00:12:17.505 --> 00:12:20.818
Mostly if you're just a crazy test person
that just wants to test everything with

190
00:12:20.818 --> 00:12:23.955
dependency injection,
you would probably do something like that.

191
00:12:23.955 --> 00:12:26.477
But for the most part,
you don't need all that.

192
00:12:26.477 --> 00:12:31.706
Anyway, yeah, so products will

193
00:12:31.706 --> 00:12:37.882
just be prisma.product.findMany.

194
00:12:37.882 --> 00:12:42.191
So we wanna find all the products where

195
00:12:42.191 --> 00:12:47.317
belongsToId: req.user.id, like that.

196
00:12:47.317 --> 00:12:50.998
And then, we want to include,

197
00:12:53.229 --> 00:12:57.947
The updates, True.

198
00:12:57.947 --> 00:13:01.390
So there we go.

199
00:13:01.390 --> 00:13:05.140
We got the updates on those products,
so we got that.

200
00:13:06.330 --> 00:13:09.890
And then what we wanna do is
just only send back the updates.

201
00:13:09.890 --> 00:13:14.018
So what we can do is we can say,
I don't know what that is,

202
00:13:14.018 --> 00:13:19.270
we could say res.json(data), and
then we could say products.map.

203
00:13:21.190 --> 00:13:29.454
Grab the product, or,
let's just destructure right here.

204
00:13:29.454 --> 00:13:33.959
Get the updates,
I guess you gotta reduce this.

205
00:13:33.959 --> 00:13:36.069
Let's do some of that inline,

206
00:13:36.069 --> 00:13:41.720
I thought that's gonna be less
cleaner on one line, it's not [LAUGH].

207
00:13:41.720 --> 00:13:43.850
So let's get the updates up here.

208
00:13:43.850 --> 00:13:47.798
So updates would be products.,

209
00:13:47.798 --> 00:13:51.609
gotta be there's reduce then.

210
00:13:52.755 --> 00:13:56.310
And we can say, Let's do this.

211
00:13:56.310 --> 00:14:03.839
We'll get allUpdates here.

212
00:14:03.839 --> 00:14:06.301
We'll get product here.

213
00:14:07.548 --> 00:14:13.171
And we can just basically
take the product.updates and

214
00:14:13.171 --> 00:14:15.810
merge it into the new one.

215
00:14:15.810 --> 00:14:19.579
So we'll just say return a new
array of all the updates.

216
00:14:19.579 --> 00:14:24.518
And all the product.updates, like that.

217
00:14:27.320 --> 00:14:34.262
So this will give us the updates,
and then we get to say updates.

218
00:14:38.537 --> 00:14:40.034
There is better ways to do this.

219
00:14:40.034 --> 00:14:45.735
If you have to do this after
coming out of a database,

220
00:14:45.735 --> 00:14:49.149
you're doing it wrong.

221
00:14:49.149 --> 00:14:50.752
This is a telltale sign of,

222
00:14:50.752 --> 00:14:55.166
you don't have the appropriate schema
set up to get the data that you need.

223
00:14:55.166 --> 00:15:00.041
And this is the problem with things like
REST, it's like you're just trying to

224
00:15:00.041 --> 00:15:04.044
make it so generic that you end
up sacrificing optimal querying,

225
00:15:04.044 --> 00:15:07.730
because you need the routes
to be generic enough.

226
00:15:07.730 --> 00:15:11.147
But if you were doing something
a little more specific, not REST,

227
00:15:11.147 --> 00:15:15.480
then you could tailor this query and
the schema to reflect what you need.

228
00:15:15.480 --> 00:15:16.934
There's tradeoffs.

229
00:15:16.934 --> 00:15:20.528
Cuz this is fine, but I don't know,
if this was 10,000, and

230
00:15:20.528 --> 00:15:22.310
this was 20,000, right?

231
00:15:22.310 --> 00:15:27.344
And then, if you were just hitting
your server over and over again.

232
00:15:27.344 --> 00:15:31.450
Now you have 40,000 things
stored in memory per request.

233
00:15:31.450 --> 00:15:36.212
You just can't put that load on
your servers like that constantly.

234
00:15:36.212 --> 00:15:38.330
So you typically wanna avoid
putting things in memory.

235
00:15:38.330 --> 00:15:40.776
And you wanna find a way for
the database to do this for you.

236
00:15:40.776 --> 00:15:45.069
So how do I tell the database to do this
so it happens on the database side and

237
00:15:45.069 --> 00:15:46.330
not my side, right?

238
00:15:46.330 --> 00:15:49.777
So that's why I said, typically if
you have to do something like this,

239
00:15:49.777 --> 00:15:52.773
you probably wanna go back and
update your schemas and stuff.

240
00:15:52.773 --> 00:15:56.045
But I wanted you to see that, cuz I want
you to know that you're not gonna just

241
00:15:56.045 --> 00:15:59.181
write your schemas one time, come in,
write these queries and be done.

242
00:15:59.181 --> 00:16:03.940
You're gonna come and write these queries,
and you're like, I gotta go back.

243
00:16:03.940 --> 00:16:08.063
I gotta go back and change my schemas
because this isn't right, or, like, wow,

244
00:16:08.063 --> 00:16:08.977
I need a new index.

245
00:16:08.977 --> 00:16:10.470
I gotta go back and change my schemas.

246
00:16:11.530 --> 00:16:13.791
It's not so perfect every time.

