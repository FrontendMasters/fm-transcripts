WEBVTT

1
00:00:00.000 --> 00:00:04.963
The next thing we wanna do is
we're going to initialize Prisma.

2
00:00:04.963 --> 00:00:07.630
So I know we just installed Prisma, right?

3
00:00:07.630 --> 00:00:11.278
But we're gonna use npx to initialize it.

4
00:00:11.278 --> 00:00:14.302
Well, I am, you don't have to,
I'm gonna tell you why I'm doing it.

5
00:00:14.302 --> 00:00:15.104
So what is npx?

6
00:00:15.104 --> 00:00:19.286
npx is a tool that comes with npm,
and it basically allows you

7
00:00:19.286 --> 00:00:23.961
to use CLIs on your computer without
having to download them first.

8
00:00:23.961 --> 00:00:25.128
That's basically what it is.

9
00:00:25.128 --> 00:00:26.660
Prisma is a CLI.

10
00:00:26.660 --> 00:00:29.840
And we did install it, but
we did not install it globally.

11
00:00:29.840 --> 00:00:31.757
We installed it locally.

12
00:00:31.757 --> 00:00:36.223
So the weird thing about CLIs and Node
is if you don't install them globally,

13
00:00:36.223 --> 00:00:39.190
you can't refer to them in
the terminal like this.

14
00:00:39.190 --> 00:00:42.102
Because they don't exist globally,
you install them locally.

15
00:00:42.102 --> 00:00:47.285
So you would have to do something like
node_modules bin, or I don't know

16
00:00:47.285 --> 00:00:52.234
what that was, node_modules/.bin maybe,
there we go, prisma.

17
00:00:52.234 --> 00:00:55.170
And then you can refer to the local one.

18
00:00:55.170 --> 00:00:57.864
Who wants to type all that out?

19
00:00:57.864 --> 00:00:58.537
That's gross.

20
00:00:58.537 --> 00:00:59.570
I don't wanna do that.

21
00:00:59.570 --> 00:01:03.858
So I can either just install Prisma
globally, which is probably recommended,

22
00:01:03.858 --> 00:01:07.253
or I can choose npx, which will
just run it like it is globally.

23
00:01:07.253 --> 00:01:11.178
So I'm gonna say npx, Prisma.

24
00:01:13.578 --> 00:01:16.657
And the command that I wanna run is init.

25
00:01:16.657 --> 00:01:20.190
So, npx prisma init, hit Enter, and boom.

26
00:01:20.190 --> 00:01:23.292
Prisma did a few things here.

27
00:01:23.292 --> 00:01:27.904
I still think it's funny, there's
a database called cockroachdb, right?

28
00:01:27.904 --> 00:01:30.347
And people use it,
it's a good database, yes.

29
00:01:30.347 --> 00:01:34.296
&gt;&gt; Just a couple of people in
the chat were getting errors

30
00:01:34.296 --> 00:01:36.325
with the TS config.json.

31
00:01:36.325 --> 00:01:39.513
&gt;&gt; Yeah, I get the same linting
error as well, you can ignore it.

32
00:01:39.513 --> 00:01:43.851
It's just basically TypeScript saying,
hey, we don't know what files you want us

33
00:01:43.851 --> 00:01:47.041
to compile and we don't know what
files you want us to ignore.

34
00:01:47.041 --> 00:01:50.273
We don't have to tell it,
it's actually smart enough to know.

35
00:01:50.273 --> 00:01:53.316
So, and that's because we're
not actually gonna be building.

36
00:01:53.316 --> 00:01:59.703
If we were making a library that had
an output, then we would need this.

37
00:01:59.703 --> 00:02:03.943
But right now, we're just going to be
using ts-node, so it doesn't matter,

38
00:02:03.943 --> 00:02:04.712
we're fine.

39
00:02:04.712 --> 00:02:05.212
You can ignore it.

40
00:02:08.441 --> 00:02:10.128
Okay, so let's see what happened here.

41
00:02:10.128 --> 00:02:12.668
So if you ran prisma init,
npx prisma init,

42
00:02:12.668 --> 00:02:15.010
you should have this prisma folder now.

43
00:02:15.010 --> 00:02:18.670
First thing first,
highly recommend if you're on VS Code,

44
00:02:18.670 --> 00:02:22.205
installing the Prisma extension,
highly recommend it.

45
00:02:22.205 --> 00:02:25.037
It gives you the syntax highlighting, but

46
00:02:25.037 --> 00:02:29.454
it also does some really cool stuff for
you that's super helpful.

47
00:02:29.454 --> 00:02:32.218
So I'm gonna get the exact
name of that extension.

48
00:02:32.218 --> 00:02:35.197
But I think there's only one.

49
00:02:35.197 --> 00:02:36.914
It's literally called Prisma by Prisma.

50
00:02:36.914 --> 00:02:41.248
So, highly recommend installing that.

51
00:02:41.248 --> 00:02:44.932
Okay, I have another extension
recommendation that we'll get to later,

52
00:02:44.932 --> 00:02:46.050
that's pretty cool.

53
00:02:46.050 --> 00:02:47.721
But recommend installing that.

54
00:02:47.721 --> 00:02:51.780
And then looking at the prisma folder,
you should have one file on there,

55
00:02:51.780 --> 00:02:53.231
schema.prisma, okay?

56
00:02:53.231 --> 00:02:55.900
This is exactly what it sounds like.

57
00:02:55.900 --> 00:02:56.428
This is our schema.

58
00:02:56.428 --> 00:02:59.332
This is where we're gonna
write our database schema.

59
00:02:59.332 --> 00:03:00.633
So what's in here already?

60
00:03:00.633 --> 00:03:03.196
The first thing is this
generated client thing.

61
00:03:03.196 --> 00:03:07.983
Prisma has another package that we're
going to install, that's the ORM.

62
00:03:07.983 --> 00:03:12.085
So far, we've installed the CLI
that interacts with the database on

63
00:03:12.085 --> 00:03:13.721
an administrative level.

64
00:03:13.721 --> 00:03:19.357
But the SDK is a rational use in the code
to do the querying and the writing.

65
00:03:19.357 --> 00:03:22.889
And this is just saying,
what is the name of that?

66
00:03:22.889 --> 00:03:26.597
I guess there's some plans in the future
to allow you to use different types of

67
00:03:26.597 --> 00:03:27.522
clients, maybe.

68
00:03:27.522 --> 00:03:30.165
But there's only one Prisma
client that I know of, and

69
00:03:30.165 --> 00:03:32.927
it's called this, but hey,
that's why that's here.

70
00:03:32.927 --> 00:03:37.794
And then datasource db is because
Prisma can use any type of database,

71
00:03:37.794 --> 00:03:41.600
it can use Mongo, CockroachDB,
Postgres, SQLite.

72
00:03:41.600 --> 00:03:44.863
So this is saying by
default using Postgres and

73
00:03:44.863 --> 00:03:48.470
then the environment variable to that URL,
okay?

74
00:03:48.470 --> 00:03:52.215
So before we start writing our schema,
first, let's add our environment variable.

75
00:03:52.215 --> 00:03:55.602
You should also now have a .env
file in the root of your project,

76
00:03:55.602 --> 00:03:57.820
Prisma should have created that for you.

77
00:03:57.820 --> 00:04:02.502
So go there, and you should see
something called DATABASE_URL=.

78
00:04:02.502 --> 00:04:06.986
Okay, get rid of that value in
that string and paste yours.

79
00:04:06.986 --> 00:04:10.735
Mine is not cockroach, so
let me not paste that.

80
00:04:10.735 --> 00:04:14.900
So remember you wanna get
the External Database URL, and

81
00:04:14.900 --> 00:04:18.038
you wanna paste that in there, like that.

82
00:04:18.038 --> 00:04:20.313
But we're looking at my URL.

83
00:04:20.313 --> 00:04:21.633
Use your own URL.

84
00:04:21.633 --> 00:04:26.423
All right, so next thing we wanna
do is let's just convert these

85
00:04:26.423 --> 00:04:29.626
two files over to TypeScript right quick.

86
00:04:29.626 --> 00:04:33.106
So index.js is now index.ts, and

87
00:04:33.106 --> 00:04:37.404
server.js is now server.ts, like that.

88
00:04:37.404 --> 00:04:41.535
And I can use import now.

89
00:04:41.535 --> 00:04:45.739
So I'm gonna import express.

90
00:04:48.026 --> 00:04:49.599
So I can type from express.

91
00:04:49.599 --> 00:04:52.575
And I'll probably get an error
here because it's like,

92
00:04:52.575 --> 00:04:56.052
you don't have types for express,
I guess it figured it out.

93
00:04:56.052 --> 00:04:56.950
That's cool.

94
00:04:56.950 --> 00:05:03.310
And then no module.exports anymore,
just export default app, like that.

95
00:05:06.570 --> 00:05:08.351
It's changing the modules.

96
00:05:08.351 --> 00:05:11.600
And then for the index,
it means pretty much the same thing.

97
00:05:11.600 --> 00:05:14.348
Just import app from './server'.

98
00:05:14.348 --> 00:05:20.069
And that's it,
just those two changes in the modules.

99
00:05:20.069 --> 00:05:23.447
And it actually probably might even
work without those changes, but

100
00:05:23.447 --> 00:05:26.197
I don't wanna not have those
if I'm using TypeScript.

101
00:05:26.197 --> 00:05:29.879
So, Okay,

102
00:05:33.772 --> 00:05:36.274
Any questions on this?

103
00:05:38.883 --> 00:05:43.160
One last stop for our TypeScript
conversion is just, if you go to your

104
00:05:43.160 --> 00:05:48.049
package.json, go to the script section,
let's make a command called dev.

105
00:05:48.049 --> 00:05:51.517
And we're gonna use ts-node
to point to src/index.ts.

106
00:05:51.517 --> 00:05:57.071
That way, we can actually start
the server and do something.

107
00:05:57.071 --> 00:06:00.620
&gt;&gt; What enables us to use import in
place of require in this project?

108
00:06:00.620 --> 00:06:03.771
&gt;&gt; TypeScript,
TypeScript has support for that.

109
00:06:03.771 --> 00:06:08.194
It's going to transpile that
back down to require for us, or

110
00:06:08.194 --> 00:06:12.720
in the case of ts-node,
it'll jut do it on the fly in memory.

