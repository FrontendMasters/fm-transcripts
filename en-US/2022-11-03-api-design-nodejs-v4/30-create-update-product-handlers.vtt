WEBVTT

1
00:00:00.310 --> 00:00:01.714
So we got get one product.

2
00:00:01.714 --> 00:00:05.509
Let's keep moving, and then eventually you
will stop and add these to the routes and

3
00:00:05.509 --> 00:00:06.158
try them out.

4
00:00:06.158 --> 00:00:08.708
But let's just add some more,
in that way, you have some more examples.

5
00:00:08.708 --> 00:00:13.946
So let's do, we got get one product,
we got get many products,

6
00:00:13.946 --> 00:00:17.931
let's do create a product,
so createProduct.

7
00:00:22.459 --> 00:00:24.067
Same thing, request, response.

8
00:00:28.610 --> 00:00:31.540
And this one's pretty simple.

9
00:00:31.540 --> 00:00:39.757
So we can say product = await
prisma.products.create.

10
00:00:39.757 --> 00:00:44.250
Instead of having a where field,
cuz we're not searching for anything,

11
00:00:44.250 --> 00:00:48.539
we have to tell Prisma what data
we're giving it to create something.

12
00:00:48.539 --> 00:00:50.611
So let's call it data instead of where.

13
00:00:50.611 --> 00:00:57.213
And the data that we want to create,
if we go back and look at our routes for

14
00:00:57.213 --> 00:01:03.047
creating a product,
it's only gonna be a body, that's it.

15
00:01:03.047 --> 00:01:05.970
I'm sorry, a name on a body,
that's it, there's nothing else here.

16
00:01:05.970 --> 00:01:10.013
But a product also needs a belongsTo.

17
00:01:10.013 --> 00:01:12.074
We just don't get that from the user.

18
00:01:12.074 --> 00:01:13.347
That's gonna be on req.user.

19
00:01:13.347 --> 00:01:16.213
So we say data,

20
00:01:16.213 --> 00:01:21.285
name is req.body.name.

21
00:01:21.285 --> 00:01:25.535
And that's the brilliance of those inputs,
is that now,

22
00:01:25.535 --> 00:01:29.525
we know 100% sure that
req.body.name is there,

23
00:01:29.525 --> 00:01:33.532
because if it wasn't,
this handler would never run.

24
00:01:33.532 --> 00:01:37.872
Because our input validation
middleware would have saw that and

25
00:01:37.872 --> 00:01:41.015
sent back an error message
before we got here.

26
00:01:41.015 --> 00:01:46.360
So having that middleware allows your
handlers to just flow very easily,

27
00:01:46.360 --> 00:01:51.979
and you can just safely assume that all
the things are there, which is great.

28
00:01:51.979 --> 00:01:57.072
So you can see I'm still getting this
cuz it's like, hey, you have a name or

29
00:01:57.072 --> 00:02:01.548
whatever, but now you might need
something else, so we got name.

30
00:02:01.548 --> 00:02:05.033
Now, we need belongsTo.

31
00:02:05.033 --> 00:02:06.990
So there is a couple of
ways you can do this.

32
00:02:06.990 --> 00:02:10.632
So you can say belongsTo, and
then you can just put the ID yourself.

33
00:02:10.632 --> 00:02:15.762
So you can say req.user.id and that works.

34
00:02:15.762 --> 00:02:19.244
When it comes to relationships,
the other way you can do it is,

35
00:02:19.244 --> 00:02:21.953
ir I'm sorry,
that would have be belongsToId.

36
00:02:25.200 --> 00:02:25.964
There we go.

37
00:02:25.964 --> 00:02:30.863
The other way you can do it is if
you wanted to do belongsTo instead

38
00:02:30.863 --> 00:02:35.764
of belongsToId, and
you had the actual use,r which we don't,

39
00:02:35.764 --> 00:02:38.878
but if we did, you could say belongsTo.

40
00:02:38.878 --> 00:02:44.641
And then I believe you can do
something like associate or

41
00:02:44.641 --> 00:02:48.205
match, there's a key word here.

42
00:02:48.205 --> 00:02:50.466
Maybe it's not worth it.

43
00:02:50.466 --> 00:02:52.035
Yeah, just do belongsToId.

44
00:02:52.035 --> 00:02:56.553
That's the preferred way, but
there's another way to do it,

45
00:02:56.553 --> 00:02:58.438
just almost never had to.

46
00:02:58.438 --> 00:03:00.512
So there we go, we got that.

47
00:03:00.512 --> 00:03:02.118
We got the ID, we got the name.

48
00:03:02.118 --> 00:03:06.825
We should get a product back,
we're just gonna be naÃ¯ve here, and

49
00:03:06.825 --> 00:03:09.946
res,json.data with the product, okay?

50
00:03:09.946 --> 00:03:14.647
Keep it moving, we got the create,
we got the gets.

51
00:03:14.647 --> 00:03:19.002
Let's do the update and delete, and
then we'll try them out and see what's up.

52
00:03:19.002 --> 00:03:24.762
So create product,
let's just say updateProduct,

53
00:03:24.762 --> 00:03:28.223
like so, async (req, res).

54
00:03:31.299 --> 00:03:38.124
So to update, there's so many ways you can
do it in Prisma, but we can try this way.

55
00:03:38.124 --> 00:03:45.338
So I'll say, await prisma.product.,

56
00:03:45.338 --> 00:03:51.853
and if you just hit dot on that, you can
see all the different methods they have.

57
00:03:51.853 --> 00:03:57.012
For instance, fine first or throw, this
is really good, or find unique or throw.

58
00:03:57.012 --> 00:04:04.508
I really like this, because most of
the time, If you do a query to look for

59
00:04:04.508 --> 00:04:07.668
something and it doesn't exist,
the database won't throw an error.

60
00:04:07.668 --> 00:04:11.856
It'll just send you back empty result,
empty array, undefined.

61
00:04:11.856 --> 00:04:16.185
But maybe sometimes you want it to break,
I'm looking for a user who's signing in.

62
00:04:16.185 --> 00:04:18.317
If that user doesn't exist,
I want to throw an error.

63
00:04:18.317 --> 00:04:21.678
Otherwise you'd have to do an if statement
on the next line yourself, anyway,

64
00:04:21.678 --> 00:04:24.198
so this kinda saves you that,
which I think is really cool.

65
00:04:24.198 --> 00:04:25.640
But anyway, here we go.

66
00:04:25.640 --> 00:04:29.764
So we have update,
we have updateMany, we have upsert.

67
00:04:29.764 --> 00:04:32.163
I'm not sure if you
heard of upsert before.

68
00:04:32.163 --> 00:04:35.957
Upsert just means like,
I'm gonna give you some information,

69
00:04:35.957 --> 00:04:38.780
first try to find something
that matches this.

70
00:04:38.780 --> 00:04:41.700
If it doesn't,
then use this to create a new one.

71
00:04:41.700 --> 00:04:43.606
So it's just like create or update.

72
00:04:43.606 --> 00:04:46.702
We're gonna use update, okay?

73
00:04:46.702 --> 00:04:50.947
So this one is just for
updating one product.

74
00:04:50.947 --> 00:04:53.478
And you can see even Prisma
wrote the documentation for it,

75
00:04:53.478 --> 00:04:55.762
it literally says right there,
Update one Product.

76
00:04:55.762 --> 00:04:58.567
Pretty brilliant, we didn't write that.

77
00:04:58.567 --> 00:05:00.161
Okay, so update.

78
00:05:03.243 --> 00:05:04.950
There you go.

79
00:05:04.950 --> 00:05:09.881
And then because update is also a find and
a write at the same time,

80
00:05:09.881 --> 00:05:12.670
we have to use the where and the data.

81
00:05:12.670 --> 00:05:18.728
So first, we have to say where,
so it knows what to find, right?

82
00:05:18.728 --> 00:05:22.371
And then outside the where,
we have to tell it, when you find it,

83
00:05:22.371 --> 00:05:24.773
this is the data you
need to update it with.

84
00:05:24.773 --> 00:05:26.697
So we gotta use both.

85
00:05:26.697 --> 00:05:31.831
So for where, we'll say,

86
00:05:31.831 --> 00:05:39.205
where ID is gonna be rec.params.id.

87
00:05:39.205 --> 00:05:45.493
And then the data,
if we go look at our validator for

88
00:05:45.493 --> 00:05:54.246
the product update, It's just a name,
you can only update the name.

89
00:05:54.246 --> 00:05:58.383
So we'll just say name is

90
00:05:58.383 --> 00:06:05.458
req.body.name And then we get that.

91
00:06:05.458 --> 00:06:10.124
And then usually on update, it's kind
of you as an API person to send back

92
00:06:10.124 --> 00:06:13.354
the thing that you updated
with the updates on it.

93
00:06:13.354 --> 00:06:16.419
Otherwise the client is probably
just gonna make another request

94
00:06:16.419 --> 00:06:18.489
back to the server to
get the updated thing.

95
00:06:18.489 --> 00:06:22.846
So just be nice and send back
the updated thing, save them some time.

96
00:06:22.846 --> 00:06:24.815
So that's what we're gonna do.

97
00:06:32.431 --> 00:06:35.372
And I'm pretty sure that
returns the product, yeah.

98
00:06:35.372 --> 00:06:37.033
Now, if you do update mini,

99
00:06:37.033 --> 00:06:40.508
you will not get back an array
of all the things you updated.

100
00:06:40.508 --> 00:06:44.775
You'll get back an object describing
all the operations you did, and

101
00:06:44.775 --> 00:06:47.170
you have to make a query to get them all.

102
00:06:47.170 --> 00:06:50.271
But if you update one, you'll get
back the thing you updated, okay?

103
00:06:50.271 --> 00:06:55.621
And then last one is gonna be delete,
the simplest one.

104
00:06:55.621 --> 00:06:58.689
So deleteProduct,

105
00:07:03.089 --> 00:07:10.015
That will be (req, res),
Async, And then const deleted,

106
00:07:13.079 --> 00:07:19.492
Equals await prisma.product.delete.

107
00:07:19.492 --> 00:07:22.215
Delete kind of works
the same way as update,

108
00:07:22.215 --> 00:07:25.169
where you'll get back
the thing you delete it.

109
00:07:25.169 --> 00:07:26.240
But if you do delete mini,

110
00:07:26.240 --> 00:07:28.979
you'll just get back information
of how many things you deleted.

111
00:07:28.979 --> 00:07:31.050
So we're gonna delete where,

112
00:07:34.809 --> 00:07:39.795
id is req.params.id.

113
00:07:39.795 --> 00:07:45.454
I just remembered something, we just fell
into a security flaw on the last one,

114
00:07:45.454 --> 00:07:50.529
[LAUGH] because we're just trusting
that this is the ID that you wanted.

115
00:07:50.529 --> 00:07:55.827
Okay, well, I found your product ID,
now I'm about to delete it, right?

116
00:07:55.827 --> 00:07:57.927
How do I stop that, right?

117
00:07:57.927 --> 00:08:05.966
So you also have to do the combination
of belongsToId of req.user.id.

118
00:08:05.966 --> 00:08:11.994
BelongsToId is not assignable to type.

119
00:08:11.994 --> 00:08:18.928
Where, BelongToId,

120
00:08:18.928 --> 00:08:22.732
yep, it's definitely there.

121
00:08:27.488 --> 00:08:30.611
I don't know why TypeScript
doesn't like me doing that, but

122
00:08:30.611 --> 00:08:34.832
I'm gonna leave it anyway, cuz I'm
pretty sure it's there, so req.user.id.

123
00:08:34.832 --> 00:08:38.821
Because, yeah, without this,
what's gonna happen is, hey,

124
00:08:38.821 --> 00:08:42.601
I'll just delete whatever ID
you put here and it'll be gone.

125
00:08:42.601 --> 00:08:44.734
So you definitely don't want that.

126
00:08:44.734 --> 00:08:47.324
There we go.

127
00:08:47.324 --> 00:08:50.998
I don't know why that thing
doesn't like me having this here.

128
00:08:50.998 --> 00:08:56.344
Maybe it wants me to manually find
it myself and then delete it.

129
00:08:56.344 --> 00:09:02.876
But I'm not doing that product where,
yeah, it's going back to the index point.

130
00:09:02.876 --> 00:09:08.071
Delete is basically a find unique,
and we don't have an index for

131
00:09:08.071 --> 00:09:12.517
this combination, so
it's like, you can't do that.

132
00:09:12.517 --> 00:09:15.301
So this is why you would
have to index this.

133
00:09:15.301 --> 00:09:20.475
So we'd either have to go back and
index this, run another migration,

134
00:09:20.475 --> 00:09:26.446
regenerate the client, and/or have to
find it ourself first and then delete it.

135
00:09:26.446 --> 00:09:28.710
But just leave it like this.

136
00:09:28.710 --> 00:09:32.175
Yeah, your app's gonna be a wild,
wild west, so

137
00:09:32.175 --> 00:09:34.906
people just screwing with each other.

138
00:09:34.906 --> 00:09:38.856
So we can go back and add the index.

139
00:09:38.856 --> 00:09:41.207
So I'm just gonna leave this here for
now and then we'll add the index for it.

140
00:09:43.945 --> 00:09:45.788
Okay, so then we have to delete it.

141
00:09:45.788 --> 00:09:51.964
I'm just gonna say
res.json (data: deleted).

142
00:09:58.886 --> 00:10:01.262
And the same thing is true for
the updated,

143
00:10:01.262 --> 00:10:06.014
we would have to add the belongsTo here as
well, otherwise you could update anybody.

144
00:10:06.014 --> 00:10:09.987
And we're gonna get the same issue,
because this is not unique.

145
00:10:09.987 --> 00:10:11.477
We gotta update that index.

146
00:10:17.251 --> 00:10:20.575
Okay, so
I'm just gonna go do that right quick.

147
00:10:20.575 --> 00:10:27.262
For the index, I think instead of doing
that, I can say unique like that.

148
00:10:31.019 --> 00:10:35.012
So now, that's unique,
an Id and a belongsToId

149
00:10:40.381 --> 00:10:42.456
But we have to tell the database about it.

150
00:10:42.456 --> 00:10:46.474
So in order to do that,
I gotta go back into the terminal,

151
00:10:48.744 --> 00:10:52.752
And I have to, Run a migration.

152
00:10:52.752 --> 00:10:56.931
So I'd say mpx prisma migrate,

153
00:11:00.114 --> 00:11:03.538
dev, I'm not even gonna give it a name,
and so I'll just run it.

154
00:11:05.550 --> 00:11:11.247
It'll just come up with a name by itself,
So this happens a lot faster locally,

155
00:11:11.247 --> 00:11:14.013
but we have a host of dev,
so it's gonna take a minute.

156
00:11:14.013 --> 00:11:17.880
But yeah, every time you make a change,
especially indexes or anything unique, or

157
00:11:17.880 --> 00:11:20.176
anything like that,
you have to run a migration.

158
00:11:20.176 --> 00:11:23.895
Some changes, and you can see right here,
it's saying, a unique constraint,

159
00:11:23.895 --> 00:11:27.575
covering the columns (id.belongsToId)
on the table Product will be added.

160
00:11:27.575 --> 00:11:31.081
If there are existing duplicate values,
this will fail.

161
00:11:31.081 --> 00:11:35.571
So this just tells you the database just
assumed because I didn't put a unique

162
00:11:35.571 --> 00:11:40.613
index on it, that I could possibly have
duplicate values, even though we wouldn't,

163
00:11:40.613 --> 00:11:44.573
because all IDs are unique and
stuff, so that would have happened.

164
00:11:44.573 --> 00:11:49.745
But I'm gonna say yes, it's asking for
a name, I'm gonna it's on my right one.

165
00:11:49.745 --> 00:11:54.665
Once this is successful, it'll with
the client, and then a client should

166
00:11:54.665 --> 00:11:59.604
not scream at us with TypeScript anymore,
because those things should be unique.

167
00:12:02.546 --> 00:12:03.496
So let's see.

168
00:12:08.764 --> 00:12:11.778
And let me close it and come back, maybe.

169
00:12:11.778 --> 00:12:15.751
No, it's still screaming at us.

170
00:12:15.751 --> 00:12:20.538
Let's see, you have to write
it in this special indexy way.

171
00:12:20.538 --> 00:12:25.319
So this is a compound index or
a joint index.

172
00:12:25.319 --> 00:12:32.881
So it's basically saying, we have
a index between the Id and belongsToId.

173
00:12:32.881 --> 00:12:38.506
It's a joint index.

174
00:12:38.506 --> 00:12:42.179
Yeah, and in fact,
I think if you have that,

175
00:12:42.179 --> 00:12:46.434
you don't even need the ID field,
you can just say,

176
00:12:46.434 --> 00:12:51.878
id_belongsTo, and
I don't know if it's an array, let's see.

177
00:12:51.878 --> 00:12:54.602
I think it'd be req.params.id, and

178
00:12:54.602 --> 00:13:00.763
then req., user.id.

179
00:13:00.763 --> 00:13:02.303
No, it's not an array.

180
00:13:02.303 --> 00:13:04.829
Do you have to add them together?

181
00:13:04.829 --> 00:13:06.562
Let's look that up.

182
00:13:06.562 --> 00:13:08.852
There's got to be an object.

183
00:13:08.852 --> 00:13:14.439
So it'd be like, the Id is req.params.id,

184
00:13:14.439 --> 00:13:19.896
and then the belongsToId is rec.user.id.

185
00:13:19.896 --> 00:13:22.626
And now, we can search on that.

186
00:13:22.626 --> 00:13:27.067
So now, it's unique, so
we're searching on that index.

187
00:13:27.067 --> 00:13:31.907
And then you would do the same thing for
the one up here.

188
00:13:41.362 --> 00:13:43.651
Pretty advanced stuff that
they make easy for you, but

189
00:13:43.651 --> 00:13:45.304
sometimes the syntax isn't perfect.

