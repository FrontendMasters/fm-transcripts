WEBVTT

1
00:00:00.000 --> 00:00:04.756
Okay, cool, so now,
we should be able to try this, but

2
00:00:04.756 --> 00:00:10.142
we're gonna run into an issue,
so let's observe that issue.

3
00:00:10.142 --> 00:00:14.217
So I'm going to, actually I don't
remember I even started my services I did

4
00:00:14.217 --> 00:00:17.479
TypeScript, so, [LAUGH] I don't
know if this is gonna work.

5
00:00:17.479 --> 00:00:22.027
Let's do, what is yeah node,
I think I gave it a command and

6
00:00:22.027 --> 00:00:24.067
I dev, yeah, there it was.

7
00:00:24.067 --> 00:00:27.965
It was dev, so
let's do npm run dev, it works,

8
00:00:27.965 --> 00:00:34.075
you just gotta love it works, so we got
that, and then now, what I'm gonna do is,

9
00:00:34.075 --> 00:00:38.528
I'm going to introduce you to
a really cool VS Code plugin.

10
00:00:38.528 --> 00:00:42.585
So we don't need to use
the browser anyway,

11
00:00:42.585 --> 00:00:48.852
if you're using VS Code that is if
you're not, what are you using?

12
00:00:48.852 --> 00:00:52.325
And let me know why because maybe
it's better I don't know, but

13
00:00:52.325 --> 00:00:56.502
VS Code plug in is called thunder client,
how they were going to download it,

14
00:00:56.502 --> 00:00:59.676
in fact, encouraging you to
download it for this course.

15
00:00:59.676 --> 00:01:03.769
I will be using it exclusively
to test out our API calls,

16
00:01:03.769 --> 00:01:07.427
thunder client is just
like any other HTTP gooey,

17
00:01:07.427 --> 00:01:11.365
it's just a place where you
can go test out API calls.

18
00:01:11.365 --> 00:01:15.022
We can only go so far in the browser
because the browser only allows you to do,

19
00:01:15.022 --> 00:01:16.983
get requests when you hit enter the URL.

20
00:01:16.983 --> 00:01:20.829
What if you want to do a put or a delete,
or a post or a patch, you can't,

21
00:01:20.829 --> 00:01:22.897
you gotta write JavaScript for that.

22
00:01:22.897 --> 00:01:27.277
But who wants to write JavaScript for
that, we should be able to click on

23
00:01:27.277 --> 00:01:32.320
things, okay thunder client, lets us
click on things, so I'm gonna go in here.

24
00:01:32.320 --> 00:01:37.648
You can make a new request,
I'm gonna do a get request

25
00:01:37.648 --> 00:01:42.752
to my localhost,
my port/API/product, okay?

26
00:01:42.752 --> 00:01:47.532
I got some other stuff in here, don't
worry about this, we'll get to that later,

27
00:01:47.532 --> 00:01:51.153
I don't want anything in the body
because it's a get request,

28
00:01:51.153 --> 00:01:54.392
I'm not sending anything,
and I'm going to run this.

29
00:01:54.392 --> 00:01:59.152
But we're gonna run into a problem,
so make sure your server's on,

30
00:01:59.152 --> 00:02:04.403
that way I hit that, so right now,
you can see that it just says processing,

31
00:02:04.403 --> 00:02:06.889
processing, processing, okay?

32
00:02:06.889 --> 00:02:08.856
This should not happen, okay?

33
00:02:08.856 --> 00:02:12.616
It's not thunder client that's broken,
it's my API,

34
00:02:12.616 --> 00:02:15.279
my API is doing what's called hanging,

35
00:02:15.279 --> 00:02:20.699
it's the equivalent of you trying to call
someone, and they just don't pick up.

36
00:02:20.699 --> 00:02:25.174
Or no, actually, I think it's more like
they did pick up, but then they didn't say

37
00:02:25.174 --> 00:02:29.712
anything, [LAUGH] he's just like, you can
just hear them breathing on the phone, but

38
00:02:29.712 --> 00:02:31.687
they don't actually say anything.

39
00:02:31.687 --> 00:02:36.011
And then, eventually you get tired, and
you hang up, that's what's happening right

40
00:02:36.011 --> 00:02:38.991
now, so our server picked up,
it was like yo, I got you, and

41
00:02:38.991 --> 00:02:42.516
then it just continued to just mouth
breathe on the phone like forever.

42
00:02:42.516 --> 00:02:45.980
And then, you couldn't actually
understand what they were saying, so,

43
00:02:47.992 --> 00:02:52.693
We need to fix that, so what I'm
gonna do is just go into our code,

44
00:02:52.693 --> 00:02:56.373
okay, there we go,
I forgot this thing was there.

45
00:02:56.373 --> 00:03:01.371
And for the product one, I'm just gonna
just put something in here, I'm gonna

46
00:03:01.371 --> 00:03:06.535
say request response, and I'm just gonna
say res.json, put a message in here.

47
00:03:06.535 --> 00:03:09.571
Hello, like that,
you could send back whatever you want,

48
00:03:09.571 --> 00:03:13.033
I'm just gonna send back something
here for the get on the product,

49
00:03:13.033 --> 00:03:15.543
I'm gonna say back hello,
I'm gonna hit Save.

50
00:03:15.543 --> 00:03:21.455
This thing isn't auto restarting, so
I'm gonna stop it and restarted again,

51
00:03:21.455 --> 00:03:27.366
I'm gonna go back into thunder client,
and then now, go to issue the request,

52
00:03:27.366 --> 00:03:31.629
and then you could see
immediately I got something back.

53
00:03:31.629 --> 00:03:36.533
Status 200,19 bytes 15 milliseconds, so

54
00:03:36.533 --> 00:03:43.382
our API route is working,
we can go to /API/products, and it works.

55
00:03:43.382 --> 00:03:46.578
You try to go somewhere else, we try
to do a post here, this is gonna hang,

56
00:03:46.578 --> 00:03:48.090
we don't have anything, right?

57
00:03:48.090 --> 00:03:51.969
You try to do Delete, that's gonna hang,
we don't have anything, and

58
00:03:51.969 --> 00:03:55.799
we'll fix that, we'll get to that
in a minute, but we got the routes.

59
00:03:55.799 --> 00:03:57.856
Any questions on that?

60
00:03:57.856 --> 00:04:02.680
&gt;&gt; I mean, these are very generic
corporations, you declared,

61
00:04:02.680 --> 00:04:07.685
do we have any skip holding option
where we say this is a product and

62
00:04:07.685 --> 00:04:09.883
not generate all the ropes?

63
00:04:09.883 --> 00:04:12.408
&gt;&gt; Yeah, so
you talked about like rails or something?

64
00:04:12.408 --> 00:04:13.799
&gt;&gt; Yeah.
&gt;&gt; Really can kinda generate all

65
00:04:13.799 --> 00:04:14.315
this stuff?

66
00:04:14.315 --> 00:04:14.850
&gt;&gt; Okay.

67
00:04:14.850 --> 00:04:18.704
&gt;&gt; Yeah,
there's nothing built into node or

68
00:04:18.704 --> 00:04:23.952
express that allows you to
generate anything, however,

69
00:04:23.952 --> 00:04:29.428
I can remember was v2 or v3,
I did write it in that version.

70
00:04:29.428 --> 00:04:32.916
I think I did generate the routes
automatically based off like

71
00:04:32.916 --> 00:04:35.743
a configuration file, so
you can do it yourself.

72
00:04:35.743 --> 00:04:40.104
There's also CLI and tools that tried
to like simulate what rails did,

73
00:04:40.104 --> 00:04:44.680
there was one that was called sales
a long time ago, I think it's dead now,

74
00:04:44.680 --> 00:04:48.769
that was trying to be like rails for
express and it kind of did that.

75
00:04:48.769 --> 00:04:51.248
But there's also like really good,
like CLI and

76
00:04:51.248 --> 00:04:54.996
stuff that will just like to generate
it based off of like, a Mongo model or

77
00:04:54.996 --> 00:04:58.640
a Postgres model like, or
it'll literally connect to your database.

78
00:04:58.640 --> 00:05:02.387
And like, I see all the stuff on
your database, here are the routes,

79
00:05:02.387 --> 00:05:05.970
it'll do that, but there's nothing
baked into node that does that.

80
00:05:05.970 --> 00:05:09.538
And in fact, that's the thing with node,
it is like it actually doesn't have

81
00:05:09.538 --> 00:05:11.881
anything because it just
relies on the community.

82
00:05:11.881 --> 00:05:14.638
Which can be good or
bad if the community depends on how, well,

83
00:05:14.638 --> 00:05:15.738
the community behaves.

84
00:05:15.738 --> 00:05:21.089
&gt;&gt; Is the reason why we had to restart our
server because TypeScript has to compile?

85
00:05:21.089 --> 00:05:21.656
&gt;&gt; It's a good question.

86
00:05:21.656 --> 00:05:26.089
So the reason we have to restart our
server is because we're not watching for

87
00:05:26.089 --> 00:05:30.381
any changes, ts node or even node in
general, by default don't watch for

88
00:05:30.381 --> 00:05:31.021
changes.

89
00:05:31.021 --> 00:05:34.305
So you can hit save and
nothing's gonna happen,

90
00:05:34.305 --> 00:05:37.747
we're so used to like next js and
things like that,

91
00:05:37.747 --> 00:05:42.570
that like we expect that to happen,
but let me tell you it was 2000.

92
00:05:42.570 --> 00:05:47.417
I don't know, between 2013 to 2016,
15, you didn't get auto reload,

93
00:05:47.417 --> 00:05:50.897
like that was brand new,
like you just had to do it yourself,

94
00:05:50.897 --> 00:05:53.377
but there's definitely a tool we can use.

95
00:05:53.377 --> 00:05:56.438
I think node MON is probably the best
tool that allows you did like

96
00:05:56.438 --> 00:05:59.215
restart your server,
you can hook it up with TypeScript,

97
00:05:59.215 --> 00:06:01.382
I just didn't wanna get
caught up with that.

98
00:06:01.382 --> 00:06:05.368
So I decided to actually, I had it, but I
took it out I was like, nah, I think this

99
00:06:05.368 --> 00:06:09.008
is too much, but yeah, you just need
something that watches your files,

100
00:06:09.008 --> 00:06:11.322
and then triggers
a command when they change.

101
00:06:11.322 --> 00:06:13.300
So, good question.

102
00:06:13.300 --> 00:06:18.206
Okay, but yeah, so we have that our stuff
is hanging now cuz we don't have any

103
00:06:18.206 --> 00:06:22.758
handler, a server should never hang,
that is a very, very bad thing.

104
00:06:22.758 --> 00:06:27.307
Yeah, you just don't want that happening,
a server also cannot respond twice, so

105
00:06:27.307 --> 00:06:29.817
you cannot respond twice
to the same request.

106
00:06:29.817 --> 00:06:33.153
If you do, that will cause an error,
just like you cannot say bye,

107
00:06:33.153 --> 00:06:35.715
hang up and then pick up the phone and
say bye again,

108
00:06:35.715 --> 00:06:39.251
it doesn't work that way,
like once you say bye, it's done, okay?

109
00:06:39.251 --> 00:06:42.596
So remember those two things,
you can't respond twice, and

110
00:06:42.596 --> 00:06:46.857
you should always respond once,
otherwise, bad things will happen, okay?

111
00:06:46.857 --> 00:06:51.691
At least for HTTP, you start getting
into Web Sockets is different, but

112
00:06:51.691 --> 00:06:54.239
for this protocol, yes, all right?

113
00:06:54.239 --> 00:06:57.239
Now that we got all that hooked up,

114
00:06:57.239 --> 00:07:01.790
basically what we wanna do
is start getting ready for

115
00:07:01.790 --> 00:07:06.963
actually creating out with
the flow of hitting this route,

116
00:07:06.963 --> 00:07:09.869
triggering some route handler.

117
00:07:09.869 --> 00:07:13.130
And then, it targets to the database,
but before we do that,

118
00:07:13.130 --> 00:07:16.034
we got to understand a new
concept called middleware.

