WEBVTT

1
00:00:00.281 --> 00:00:03.856
Maybe we should write a real test from one
of the handlers to see what that looks

2
00:00:03.856 --> 00:00:06.392
like with Prisma, and
then we can try something else.

3
00:00:06.392 --> 00:00:08.787
So let's do that, so
I'm gonna go to handlers.

4
00:00:08.787 --> 00:00:14.855
Let us actually write a real test here
versus what's actually happening.

5
00:00:14.855 --> 00:00:19.399
So let's bring in that user,
so we can bring in * as user

6
00:00:19.399 --> 00:00:24.468
from, User, cool.

7
00:00:24.468 --> 00:00:31.643
And I wanna test on the user that we can
actually create a new user, let's do that.

8
00:00:31.643 --> 00:00:38.981
So I'll say it should create a new user,
okay?

9
00:00:38.981 --> 00:00:45.066
And I'll say async, so
I'll say user =, I can't say user.

10
00:00:45.066 --> 00:00:50.863
NewUser = await, user.create new user.

11
00:00:53.877 --> 00:00:59.263
And if you look at this, it expects
a request a response and next, okay?

12
00:00:59.263 --> 00:01:05.486
So you can like, basically, this function
doesn't know that it's in Express.

13
00:01:05.486 --> 00:01:08.038
It is saying it needs these three things.

14
00:01:08.038 --> 00:01:10.830
We're the one calling the function,
we can mark these three things out.

15
00:01:10.830 --> 00:01:12.722
We can make them be whatever we want.

16
00:01:12.722 --> 00:01:16.991
I am just looking at this code and
tell you that like, they want the request

17
00:01:16.991 --> 00:01:21.324
object and that request object needs to
have a body object that has a username and

18
00:01:21.324 --> 00:01:23.219
a body object that's a password.

19
00:01:23.219 --> 00:01:24.594
Okay, cool, I'll do that.

20
00:01:24.594 --> 00:01:27.551
And it also needs the response object,

21
00:01:27.551 --> 00:01:32.671
response to be an object with a JSON
function on it, so I can do that.

22
00:01:32.671 --> 00:01:34.558
You can mock these out yourself.

23
00:01:34.558 --> 00:01:37.120
You can download packages that
will mock them out for you.

24
00:01:37.120 --> 00:01:38.583
There's a lot of ways around it.

25
00:01:38.583 --> 00:01:40.902
I'm just gonna mock it out myself for
now, so

26
00:01:40.902 --> 00:01:43.050
we can actually just see the result of it.

27
00:01:43.050 --> 00:01:46.160
So let's do that.

28
00:01:46.160 --> 00:01:51.214
So I need to mock out requests and
I need a mock out response.

29
00:01:51.214 --> 00:01:52.284
So let's do that.

30
00:01:52.284 --> 00:01:56.074
So I'll say, Routes.

31
00:02:00.379 --> 00:02:04.688
And what's really cool, is that you can
actually use something called a spy.

32
00:02:04.688 --> 00:02:09.429
A spy is like a mocked piece of
functionality that will tell you when some

33
00:02:09.429 --> 00:02:12.122
other piece of code interacted with it.

34
00:02:12.122 --> 00:02:17.655
We probably won't need to do
that right now but we can do it.

35
00:02:17.655 --> 00:02:24.382
So a request is just an object has a body
property on it that has a username,

36
00:02:24.382 --> 00:02:31.525
hello and a password, Hi, okay?

37
00:02:31.525 --> 00:02:38.273
And then RES is also an object
that has a JSON function on it.

38
00:02:38.273 --> 00:02:40.928
And if we were gonna make a spy,
this would be the spy.

39
00:02:40.928 --> 00:02:45.540
This is what will be the spy because
we would we would wanna see that this

40
00:02:45.540 --> 00:02:48.917
was called and
that it was called with like a token.

41
00:02:48.917 --> 00:02:50.587
And we want to see that token, right?

42
00:02:50.587 --> 00:02:55.882
So we can make this a spy, we can also
just like get the token from here and

43
00:02:55.882 --> 00:02:58.812
then we can do an expect inside of here.

44
00:02:58.812 --> 00:03:06.425
We can say expect(token)toBeTruthy(),
we can do something like that.

45
00:03:06.425 --> 00:03:10.478
And then we can also say expect or

46
00:03:10.478 --> 00:03:15.743
assertion count or something like that.

47
00:03:15.743 --> 00:03:20.350
We can tell just how many expectations
should be called because if this doesn't

48
00:03:20.350 --> 00:03:25.109
get called, I mean, JSON was never called,
and that would be like a faulty test.

49
00:03:25.109 --> 00:03:30.947
So you would wanna tell just like I should
expect to see at least one expect call,

50
00:03:30.947 --> 00:03:33.426
if not more, that's good indeed.

51
00:03:33.426 --> 00:03:37.476
So we say createUser,
we'll say req, we'll say res, and

52
00:03:37.476 --> 00:03:40.800
these next I'm just gonna just do that for
next.

53
00:03:40.800 --> 00:03:42.176
So we can do that.

54
00:03:42.176 --> 00:03:46.872
This isn't going to be a new user because
it doesn't return anything, right?

55
00:03:46.872 --> 00:03:49.784
This is just a handler,
it doesn't actually return anything, so

56
00:03:49.784 --> 00:03:51.090
it's not gonna be a new user.

57
00:03:51.090 --> 00:03:54.832
So really the only way we can
verify that something got created.

58
00:03:54.832 --> 00:03:59.085
It was we had to do another query the
database after this ran to see there was

59
00:03:59.085 --> 00:04:04.472
a user with that, or we can just look at
the result of the token, one of the two.

60
00:04:04.472 --> 00:04:08.015
We're just gonna get the token for
now and just be naive about it,

61
00:04:08.015 --> 00:04:09.636
but let's see what happens.

62
00:04:09.636 --> 00:04:12.838
We'll do that and
then let's run the tests.

63
00:04:15.096 --> 00:04:20.399
And yep, obviously the integration test
failed cuz we broke that one, right?

64
00:04:20.399 --> 00:04:24.504
I just never fixed it, but
the unit tests we just wrote passed.

65
00:04:24.504 --> 00:04:30.841
So it's fine, it worked because it
actually did run this, which was expected.

66
00:04:33.480 --> 00:04:35.911
If I log this token,
you actually see it, right?

67
00:04:35.911 --> 00:04:39.742
Well, now it's gonna break because, and
I'll tell you why it's gonna break,

68
00:04:39.742 --> 00:04:42.739
actually anybody know why this is
gonna break if I write it again

69
00:04:48.700 --> 00:04:50.410
It's like, wait, it just work,
why would it break?

70
00:04:50.410 --> 00:04:52.981
All you do is log something.

71
00:04:52.981 --> 00:05:00.569
Yeah, it's definitely gonna break,
if I run this, it's not gonna pass.

72
00:05:03.558 --> 00:05:10.025
It's because I'm creating a user
with the same username again, right?

73
00:05:10.025 --> 00:05:14.447
In a test, you wanna make sure you delete
the database every test run, you wanna

74
00:05:14.447 --> 00:05:18.875
clean database, in fact you should be
using a different database for testing.

75
00:05:18.875 --> 00:05:22.686
You probably want a local database, you
should be using a host database to host,

76
00:05:22.686 --> 00:05:23.592
it's expensive.

77
00:05:23.592 --> 00:05:28.014
So you want a local database and
you make sure you clean the database,

78
00:05:28.014 --> 00:05:31.076
you delete everything
after every single run.

79
00:05:31.076 --> 00:05:35.961
And the way you can do that is
like before all, before each,

80
00:05:35.961 --> 00:05:40.360
after all, after each,
inside of those functions,

81
00:05:40.360 --> 00:05:44.882
you can say,
delete everything I just did in his test.

82
00:05:44.882 --> 00:05:47.806
So when the next test runs, it's good.

83
00:05:47.806 --> 00:05:48.756
That's one way to do it.

84
00:05:48.756 --> 00:05:53.312
You can also set a configuration file
ingest that runs before all your tests

85
00:05:53.312 --> 00:05:55.563
run, that just drops the database.

86
00:05:55.563 --> 00:05:57.803
But you never wanna have stateful tests,

87
00:05:57.803 --> 00:06:01.970
whereas like there's one test that runs
and adds something to the database.

88
00:06:01.970 --> 00:06:04.038
And then you have another
test that runs and

89
00:06:04.038 --> 00:06:06.226
it relies on the stuff
that this thing added.

90
00:06:06.226 --> 00:06:08.972
You will have the worst test ever.

91
00:06:08.972 --> 00:06:10.134
Don't do that,

92
00:06:10.134 --> 00:06:14.871
every test should be stateless and
non-reliant on any other test.

93
00:06:14.871 --> 00:06:16.554
But yeah, this is gonna fail, let see.

94
00:06:19.519 --> 00:06:25.014
No, I guess not, I guess it doesn't care,
it passed anyway somehow,

95
00:06:25.014 --> 00:06:31.328
that should not have passed because
there's already a user in there.

96
00:06:31.328 --> 00:06:32.385
It just passed again.

97
00:06:32.385 --> 00:06:34.534
I wonder if it, did it log a token?

98
00:06:37.255 --> 00:06:39.171
No, I didn't even log a token actually.

99
00:06:39.171 --> 00:06:42.402
I think this is just a false positive,
but yeah, and

100
00:06:42.402 --> 00:06:45.642
maybe our test was never
passing in the first place.

101
00:06:45.642 --> 00:06:49.931
And we just found out that it was just
a bad test because this actually never

102
00:06:49.931 --> 00:06:54.167
ran and no expectations actually
ran maybe that's what's happening.

103
00:06:54.167 --> 00:06:58.262
But yeah,
don't put stuff in the database and

104
00:06:58.262 --> 00:07:02.547
not delete it during a test
&gt;&gt; Is there a big difference having one

105
00:07:02.547 --> 00:07:05.183
test directory over
having tests everywhere?

106
00:07:05.183 --> 00:07:09.935
What are the pros and cons?

107
00:07:09.935 --> 00:07:11.420
&gt;&gt; You'll have smaller test files.

108
00:07:11.420 --> 00:07:15.923
Yeah, that's probably the biggest pros,

109
00:07:15.923 --> 00:07:20.983
smaller test files and,
Yeah, smaller test files and

110
00:07:20.983 --> 00:07:24.154
then you would probably be able to
configure different options for

111
00:07:24.154 --> 00:07:28.174
different tests if they were individually
group versus putting them all together,

112
00:07:28.174 --> 00:07:31.025
adding the options to all the tests,
so more flexibility.

113
00:07:31.025 --> 00:07:35.729
And in a bigger app, just anything that's
more abstract away is usually easier.

114
00:07:35.729 --> 00:07:40.637
So different teams can work on
different things without conflicts.

115
00:07:40.637 --> 00:07:43.572
The last thing you want is
a merge conflict on a test file.

116
00:07:43.572 --> 00:07:46.982
That's the worst worst conflict because
it's like you don't wanna touch it.

117
00:07:46.982 --> 00:07:50.573
Because you know all those tests were
passing like for a whole year straight.

118
00:07:50.573 --> 00:07:52.413
And now you got a merge conflict in there.

119
00:07:52.413 --> 00:07:55.182
And it's like I don't
wanna touch this file,

120
00:07:55.182 --> 00:07:59.371
somebody comes save me because if you
try to fix that merge conflict and

121
00:07:59.371 --> 00:08:02.500
you break a test,
good luck it's gonna be a bad day.

