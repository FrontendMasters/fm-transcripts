WEBVTT

1
00:00:00.150 --> 00:00:02.412
Okay, so finally,
we're gonna write some code.

2
00:00:02.412 --> 00:00:07.550
First thing we're gonna do is we're
gonna hop on the struggle bus,

3
00:00:07.550 --> 00:00:12.792
and we're gonna make a Vanilla API
without any framework in Node JS.

4
00:00:12.792 --> 00:00:17.695
So I'm gonna hop into my editor,
and we're gonna do just that.

5
00:00:17.695 --> 00:00:22.412
I'm going to just make a new project here.

6
00:00:22.412 --> 00:00:25.652
So please feel free to
follow along with me.

7
00:00:25.652 --> 00:00:30.034
This is pretty much the pace for
the rest of the course, but like I said,

8
00:00:30.034 --> 00:00:33.048
the site has the code that
I'll mostly be doing.

9
00:00:33.048 --> 00:00:36.925
I won't be looking at this as I go
through, so I might write it slightly

10
00:00:36.925 --> 00:00:41.554
differently than what is here, but you can
always catch up just by looking at this.

11
00:00:41.554 --> 00:00:43.217
So let's do that.

12
00:00:43.217 --> 00:00:45.517
So we're gonna make a new repill here.

13
00:00:45.517 --> 00:00:46.223
Let me make one.

14
00:00:46.223 --> 00:00:50.240
I'm gonna call it course or

15
00:00:50.240 --> 00:00:54.438
yep, I'll call it course.

16
00:00:54.438 --> 00:00:58.238
And then if you've never created
a new NPM project before,

17
00:00:58.238 --> 00:01:02.798
you could just do npm init,
I'm gonna do --yes to just get through all

18
00:01:02.798 --> 00:01:06.989
those prompts, and I'm just gonna
open this thing up in VS Code.

19
00:01:11.815 --> 00:01:17.783
Okay, and then I'm just gonna create a new
folder here called source to separate

20
00:01:17.783 --> 00:01:23.242
my source code out, and then I'm gonna
make a new file called index.js.

21
00:01:23.242 --> 00:01:25.502
So yeah, let's write some code here.

22
00:01:25.502 --> 00:01:28.656
So first thing first,
like I said, this is Vanilla API,

23
00:01:28.656 --> 00:01:32.286
we're not gonna install anything,
everything we get for free.

24
00:01:32.286 --> 00:01:38.586
So I'm going to require
something called HTTP from HTTP.

25
00:01:38.586 --> 00:01:43.069
This is a built-in module for
creating API's and

26
00:01:43.069 --> 00:01:47.028
interacting with things inside of Node JS.

27
00:01:47.028 --> 00:01:50.901
And let just go back to the notes here.

28
00:01:50.901 --> 00:01:54.783
And basically, like I said,
for the most part,

29
00:01:54.783 --> 00:01:59.519
you can do everything from just
this HTTP module, in fact,

30
00:01:59.519 --> 00:02:05.695
even express in any other server framework
builds on top of this HTTP module.

31
00:02:05.695 --> 00:02:09.488
So it's just an abstraction around it.

32
00:02:09.488 --> 00:02:14.091
Here in the code samples of using imports
and stuff, if you wanna use ES6, if you

33
00:02:14.091 --> 00:02:18.920
know how to do that, please go ahead, but
as I'm coding, I'm just doing require.

34
00:02:18.920 --> 00:02:22.239
We are gonna switch this over to
TypeScript at some point, don't worry,

35
00:02:22.239 --> 00:02:23.905
you don't need to know TypeScript.

36
00:02:23.905 --> 00:02:27.842
TypeScript is a really cool
language that has optional types.

37
00:02:27.842 --> 00:02:31.454
Emphasis on optional, we will not
be doing a bunch of type stuff, but

38
00:02:31.454 --> 00:02:35.067
we will be using TypeScript for
a really cool tool that we'll be using

39
00:02:35.067 --> 00:02:37.583
that benefits heavily
from using TypeScript.

40
00:02:37.583 --> 00:02:40.472
So we're gonna switch over to that,
and we will be able to do imports.

41
00:02:40.472 --> 00:02:42.302
But for now, you just do require.

42
00:02:42.302 --> 00:02:44.742
But yeah, let's go ahead and
make that server.

43
00:02:44.742 --> 00:02:48.042
So what we can do is I can go down here,

44
00:02:48.042 --> 00:02:52.633
I can say server =
http.createServer like this.

45
00:02:55.433 --> 00:03:00.360
And this going to receive a callback,
and I'm gonna make it asynchronous.

46
00:03:02.539 --> 00:03:07.079
And this callback is gonna be passed
a couple arguments, it's gonna be given,

47
00:03:07.079 --> 00:03:11.233
the first thing is typically we'll
call REQ or rec or short for request.

48
00:03:11.233 --> 00:03:13.714
This is the incoming request, right?

49
00:03:13.714 --> 00:03:17.125
So let's little talk about
a little bit how server works.

50
00:03:17.125 --> 00:03:22.549
A server is, it's a computer
that's connected to internet.

51
00:03:22.549 --> 00:03:29.202
And in this case, for HTTP, for this
protocol, you can request information or

52
00:03:29.202 --> 00:03:34.685
you can request to do something on
a server from any other client.

53
00:03:34.685 --> 00:03:38.804
And a client is anything else, it can be
another server, it can be a front end app,

54
00:03:38.804 --> 00:03:42.723
it can be a mobile app, it can be anything
that's connected to the internet.

55
00:03:42.723 --> 00:03:44.691
That's basically what a client is.

56
00:03:44.691 --> 00:03:48.471
So a client can make a request to
attempt to do something on a server, and

57
00:03:48.471 --> 00:03:51.684
then the server typically has
to respond to that client, and

58
00:03:51.684 --> 00:03:53.399
then the connection is closed.

59
00:03:53.399 --> 00:03:58.376
If the server doesn't respond,
the connection typically times out

60
00:03:58.376 --> 00:04:03.281
on whatever limit that the client
decided for that timeout period.

61
00:04:03.281 --> 00:04:05.998
So there's this whole mechanism
of sending a request, and

62
00:04:05.998 --> 00:04:08.019
then the server responding to the request.

63
00:04:08.019 --> 00:04:12.046
So here's the incoming request,
and then here's the response.

64
00:04:12.046 --> 00:04:15.213
We get this response object,
I'm gonna name it res for short.

65
00:04:15.213 --> 00:04:19.149
And this is typically the pattern you will
see in most Node frameworks is req, res.

66
00:04:19.149 --> 00:04:22.731
This is a very common thing if you've ever
used Next Js, you've seen this before.

67
00:04:22.731 --> 00:04:25.580
Well, Next JS is heavily
based off of Express,

68
00:04:25.580 --> 00:04:27.729
which is heavily based off on HTTP.

69
00:04:27.729 --> 00:04:30.395
So it all just kind of works together.

70
00:04:30.395 --> 00:04:31.990
So we have that.

71
00:04:31.990 --> 00:04:36.854
And we're gonna create some naive
implementation of a router.

72
00:04:36.854 --> 00:04:44.248
So we want to do something when someone
does a get request to a specific URL.

73
00:04:44.248 --> 00:04:47.207
So you may not know what
a get request is right now,

74
00:04:47.207 --> 00:04:52.156
you may not know how URLs work, we'll get
there, but for now, just follow along.

75
00:04:52.156 --> 00:04:55.780
So we're gonna check to see if
someone's doing a specific request.

76
00:04:55.780 --> 00:05:01.373
So we can say if req.method,
a method is, we'll get to it,

77
00:05:01.373 --> 00:05:07.427
but it's just a way to show intent
on what you wanna do on a server.

78
00:05:07.427 --> 00:05:11.786
So if someone is doing a method of get and

79
00:05:11.786 --> 00:05:17.335
req.url = '/' so
if they just did a get request

80
00:05:17.335 --> 00:05:22.225
to whatever address this server hosted on,

81
00:05:22.225 --> 00:05:26.737
then we want to respond with something.

82
00:05:26.737 --> 00:05:31.601
And you can pretty much do whatever
you want here, you can send back data,

83
00:05:31.601 --> 00:05:33.494
you can send back a message.

84
00:05:33.494 --> 00:05:39.270
What I'm gonna do is I'm gonna change
the status, so I can say, status code.

85
00:05:39.270 --> 00:05:41.773
We're gonna say 200,
we'll learn about that.

86
00:05:41.773 --> 00:05:48.730
And I'm just gonna say res.,
let's say send.

87
00:05:48.730 --> 00:05:49.259
Wait.

88
00:05:49.259 --> 00:05:54.478
Let's just say, and I was gonna
say end here, let's just end it.

89
00:05:54.478 --> 00:05:57.813
So we'll say end and that's it.

90
00:05:57.813 --> 00:06:02.236
This is bare bones,
super easy, its server doesn't

91
00:06:02.236 --> 00:06:06.966
really do anything,
you can do a get request to this URL.

92
00:06:06.966 --> 00:06:09.919
It'll get back to 200 if you do,
and then it'll close, and

93
00:06:09.919 --> 00:06:11.277
will close the connection.

94
00:06:11.277 --> 00:06:12.655
So that's the API.

95
00:06:12.655 --> 00:06:14.252
The next thing we have to do
is we have to start this.

96
00:06:14.252 --> 00:06:20.088
So we can go down here, and
we can say server.listen.

97
00:06:20.088 --> 00:06:23.767
And we have to put in some magical number
here, we'll talk about this number in

98
00:06:23.767 --> 00:06:27.360
a minute, but I'm just gonna put
a four-digit number, I'm gonna put 5.

99
00:06:27.360 --> 00:06:31.242
Well, I'm going to put 3001,
you can put the same if you want, and

100
00:06:31.242 --> 00:06:33.466
then I'm gonna put a call back after it.

101
00:06:33.466 --> 00:06:38.207
And then it's called back I'm
just gonna put a log that

102
00:06:38.207 --> 00:06:42.858
just says server on
localhost:3001 like that.

103
00:06:51.254 --> 00:06:56.101
Okay, any questions on this so far?

104
00:06:56.101 --> 00:07:00.949
And if you thought this was tedious,
and you don't wanna make API's and

105
00:07:00.949 --> 00:07:03.031
note now after me showing you.

106
00:07:03.031 --> 00:07:07.087
Yeah, that's the point,
no one should wanna make API's like this,

107
00:07:07.087 --> 00:07:09.030
that's why you use frameworks.

108
00:07:09.030 --> 00:07:13.492
And it gets way more tedious when [LAUGH]
you actually wanna do real things like

109
00:07:13.492 --> 00:07:18.245
posting, and updating, and creating,
and deleting, and input validation.

110
00:07:18.245 --> 00:07:20.848
You just gotta be creating
your own framework,

111
00:07:20.848 --> 00:07:25.027
I went down that path it's not fun,
you might as well just use something else

112
00:07:27.524 --> 00:07:31.459
Okay, so no questions on that,
let's try to start this thing.

113
00:07:31.459 --> 00:07:32.895
Yes?

114
00:07:32.895 --> 00:07:35.812
&gt;&gt; Why did you use async
in the createServer?

115
00:07:35.812 --> 00:07:39.557
&gt;&gt; Yeah, I use async in the createServer
because I was going to do something async

116
00:07:39.557 --> 00:07:41.844
and then halfway through it,
I decided not to.

117
00:07:41.844 --> 00:07:47.785
So yeah, I'm very random.

118
00:07:47.785 --> 00:07:51.063
I'm like Cody, so yeah, I was like,
I'm gonna I'm gonna send something back,

119
00:07:51.063 --> 00:07:53.357
async was like, wait, no,
that I don't wanna do that.

120
00:07:53.357 --> 00:07:56.862
That's just too much, I don't that's
just extra, it's getting in the way,

121
00:07:56.862 --> 00:08:00.646
so I don't actually be a async, it's not
hurting if it's there if I'm not using it.

122
00:08:00.646 --> 00:08:01.950
So it's totally fine.

123
00:08:01.950 --> 00:08:05.993
Le's try to start this API or
start the server.

124
00:08:05.993 --> 00:08:11.116
So you can go to your terminal,
assuming you have Node installed,

125
00:08:11.116 --> 00:08:16.800
for this course, it's probably best
to have at least Node Version 14.

126
00:08:16.800 --> 00:08:20.760
If you don't have at least Node Version
14, I recommend it, you could probably get

127
00:08:20.760 --> 00:08:24.678
away with 10, for the most part, I think,
you could probably get away with 10.

128
00:08:24.678 --> 00:08:28.651
But to be safe,
you wanna have at least Node Version 14.

129
00:08:28.651 --> 00:08:32.558
I recommend using NVM Node Version
Manager, I think there's another one

130
00:08:32.558 --> 00:08:36.653
called IN, never use that one, but
I've heard really good things about it to

131
00:08:36.653 --> 00:08:40.076
manage your node versions and
just switch to Node Version 14.

132
00:08:40.076 --> 00:08:42.433
It works on Windows or Mac.

133
00:08:42.433 --> 00:08:46.783
And if you don't know what version
you're on, you could decide which or

134
00:08:46.783 --> 00:08:50.291
you decide about node desktop version,
it'll tell you.

135
00:08:50.291 --> 00:08:53.097
I'm rocking 16.13.1.

136
00:08:56.427 --> 00:08:59.702
But yeah, if you have node,
you can just type out node,

137
00:08:59.702 --> 00:09:03.215
you can type source and
then the path of that file like this.

138
00:09:03.215 --> 00:09:05.081
And if you do it right,

139
00:09:05.081 --> 00:09:10.994
you're gonna see a log that says
server on HTTP localhost:3000.

140
00:09:10.994 --> 00:09:13.251
And if you've ever worked
at a terminal before,

141
00:09:13.251 --> 00:09:15.848
you're probably used to
running some type of command.

142
00:09:15.848 --> 00:09:20.681
And then the terminal running that
command and then the terminal closes and

143
00:09:20.681 --> 00:09:22.299
it goes back to a prompt.

144
00:09:22.299 --> 00:09:25.529
Well notice that my terminal
did not go back to a prompt,

145
00:09:25.529 --> 00:09:27.536
it's just sitting here, right?

146
00:09:27.536 --> 00:09:30.049
That's the difference
between the server and

147
00:09:30.049 --> 00:09:34.304
some scripts that you would write in Bash
or whatever your language of choice,

148
00:09:34.304 --> 00:09:37.665
a server is always on, and
we'll talk about that in a minute.

149
00:09:37.665 --> 00:09:41.805
Okay, so now that I have that, on Mac, I
know you can command click pretty much any

150
00:09:41.805 --> 00:09:44.152
URL and
the terminal to go to it in the browser.

151
00:09:44.152 --> 00:09:47.279
But if not, just copy this URL and

152
00:09:47.279 --> 00:09:52.103
go to it in the browser,
and mine just crapped out.

153
00:09:52.103 --> 00:09:54.090
Here we go.

154
00:09:54.090 --> 00:09:59.092
So you can see that I tried to do a GET
request to it and we know it's working

155
00:09:59.092 --> 00:10:04.105
because I got an error here,
res.statusCode200 is not a function.

156
00:10:04.105 --> 00:10:07.676
That wasn't me thinking that it's Express,
so we can't do that.

157
00:10:07.676 --> 00:10:12.900
I'm actually just going to delete that and
just do and I'm just gonna stop my server.

158
00:10:12.900 --> 00:10:16.337
It already stopped because it died,
I was gonna start it up again, and

159
00:10:16.337 --> 00:10:18.390
then I'm just gonna go back and refresh.

160
00:10:18.390 --> 00:10:21.052
I'm just gonna refresh and
you just gonna get a blank page here,

161
00:10:21.052 --> 00:10:22.245
you're gonna get nothing.

162
00:10:22.245 --> 00:10:26.799
And that's I know the server's
working because it didn't die.

163
00:10:26.799 --> 00:10:30.196
Now, what I can do to verify that is I can
actually either send something back or

164
00:10:30.196 --> 00:10:31.131
I just put a log here.

165
00:10:31.131 --> 00:10:34.426
I'm gonna put a log
here in the server that

166
00:10:34.426 --> 00:10:37.919
just says console.log hello from server.

167
00:10:40.034 --> 00:10:44.539
And unlike a frontend app, this log isn't
gonna show up in the browser's console,

168
00:10:44.539 --> 00:10:46.960
right, it's gonna show up in the terminal.

169
00:10:46.960 --> 00:10:50.461
So if I wanna see where this is logging
from, I would need to stop my server and

170
00:10:50.461 --> 00:10:51.244
start it again.

171
00:10:52.983 --> 00:10:56.040
Go back to the browser,
initiate that get request, so

172
00:10:56.040 --> 00:10:59.628
I'm gonna refresh my page that's
gonna initiate the request,

173
00:10:59.628 --> 00:11:03.165
go back to the terminal and
then I should see hello from server.

174
00:11:05.857 --> 00:11:10.902
So we created a server, we register
to get request to URL of just slash,

175
00:11:10.902 --> 00:11:15.961
we sent a log to the output of the
terminal and then we ended the request.

176
00:11:15.961 --> 00:11:19.480
And then we initiated that request
by going to the browser and

177
00:11:19.480 --> 00:11:23.482
typing into the server by hitting Enter,
which if you didn't know,

178
00:11:23.482 --> 00:11:26.932
actually does a get request when
you go to a URL in a browser.

179
00:11:26.932 --> 00:11:29.973
That get request then
triggered this handler,

180
00:11:29.973 --> 00:11:32.412
which then logged hello from server.

181
00:11:32.412 --> 00:11:34.542
And that's the basics of a server.

182
00:11:34.542 --> 00:11:39.794
Every API from here on out that you're
ever gonna work on is just this,

183
00:11:39.794 --> 00:11:43.103
but times ten, but it's the same concept.

184
00:11:43.103 --> 00:11:47.432
Incoming requests, you match it based
off some combination of something, and

185
00:11:47.432 --> 00:11:51.903
then you respond with whatever information
you feel like you wanna respond with.

186
00:11:51.903 --> 00:11:54.330
And how you do it is,
that's where the details are.

