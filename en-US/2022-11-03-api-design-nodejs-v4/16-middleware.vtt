WEBVTT

1
00:00:00.000 --> 00:00:02.817
Last we talked about the routes.

2
00:00:02.817 --> 00:00:06.421
We did a little bit with the handlers but
didn't really get into it but

3
00:00:06.421 --> 00:00:08.861
we got the routes down,
we got the sub router.

4
00:00:08.861 --> 00:00:11.854
And before we transition into actually
interact with the database and

5
00:00:11.854 --> 00:00:13.027
doing all that cool stuff.

6
00:00:13.027 --> 00:00:15.522
We're gonna learn about middleware.

7
00:00:15.522 --> 00:00:17.924
So, what is middleware?

8
00:00:17.924 --> 00:00:22.896
Middleware are basically a list of
functions that have the ability to

9
00:00:22.896 --> 00:00:27.195
run right before your handlers do,
that's basically it.

10
00:00:27.195 --> 00:00:31.220
They sit in the middle of
your route being called and

11
00:00:31.220 --> 00:00:35.632
the actual handler for
that route actually executing.

12
00:00:35.632 --> 00:00:39.175
They're just different things
that you can do before that,

13
00:00:39.175 --> 00:00:43.906
if you've ever done something on Redux,
you can add all those plugins to Redux.

14
00:00:43.906 --> 00:00:45.052
Those are middleware.

15
00:00:45.052 --> 00:00:49.983
It's things you can add to Redux
before you serialize it into state or

16
00:00:49.983 --> 00:00:51.864
not or whatever, right?

17
00:00:51.864 --> 00:00:52.981
It could be a dev tool.

18
00:00:52.981 --> 00:00:54.531
It can be a persistent state.

19
00:00:54.531 --> 00:00:56.681
It could be a thunk or
something like that.

20
00:00:56.681 --> 00:01:01.251
Another example of middleware,
in front end, will be,

21
00:01:01.251 --> 00:01:05.265
that's probably the only
example I can think of.

22
00:01:05.265 --> 00:01:08.521
It's mostly a back end thing or
network thing.

23
00:01:08.521 --> 00:01:12.008
But yeah,
it's got some pretty good use cases.

24
00:01:12.008 --> 00:01:15.974
So, some use cases are like,
maybe you wanna log the request.

25
00:01:15.974 --> 00:01:17.146
Yeah, that's perfect job for

26
00:01:17.146 --> 00:01:20.272
middleware, you wanna see in your terminal
every time someone hit your request.

27
00:01:20.272 --> 00:01:22.626
Yeah, that's very helpful for
developments.

28
00:01:22.626 --> 00:01:26.612
So you know when a request came in,
what the request was,

29
00:01:26.612 --> 00:01:30.199
how long it took,
maybe you want to handle errors.

30
00:01:30.199 --> 00:01:33.248
Which you have to, because remember,
one server serves all clients.

31
00:01:33.248 --> 00:01:36.846
So if your server crashes,
no one can use your app.

32
00:01:36.846 --> 00:01:40.692
Whereas on your client, if I was using
your app on my browser and it broke,

33
00:01:40.692 --> 00:01:43.373
it wouldn't break for
everyone else in the world.

34
00:01:43.373 --> 00:01:46.321
It would only break on my computer.

35
00:01:46.321 --> 00:01:48.677
But on the server if it broke,
it broke for everybody.

36
00:01:48.677 --> 00:01:51.798
So you want to handle the errors
because it's very important.

37
00:01:51.798 --> 00:01:53.659
So middleware can do that.

38
00:01:53.659 --> 00:01:58.594
Authentication, you wanna prevent
certain people from accessing certain

39
00:01:58.594 --> 00:02:02.534
routes unless they're authorized and
identified to do so.

40
00:02:02.534 --> 00:02:04.119
Middleware is perfect for that.

41
00:02:04.119 --> 00:02:06.090
And pretty much anything else.

42
00:02:06.090 --> 00:02:10.934
You can enhance or
augment the request object.

43
00:02:10.934 --> 00:02:13.351
You can add things to it, transform it.

44
00:02:13.351 --> 00:02:14.427
Do whatever you want.

45
00:02:14.427 --> 00:02:17.913
And you can just keep doing and
you can reuse that stuff.

46
00:02:17.913 --> 00:02:19.403
So what does middleware look like?

47
00:02:19.403 --> 00:02:23.274
It looks exactly like a handler,
where it has a request and

48
00:02:23.274 --> 00:02:26.837
a response, but
it has this other thing called next.

49
00:02:26.837 --> 00:02:28.844
The next function is exactly
what it sounds like.

50
00:02:28.844 --> 00:02:33.494
It tells express that,
I don't know what I typed there.

51
00:02:33.494 --> 00:02:38.080
It tells you express that, we're
basically done here in this middleware.

52
00:02:38.080 --> 00:02:42.758
We did everything that we wanted to do,
so go to the next thing in the stack

53
00:02:42.758 --> 00:02:47.609
which can be another middleware function
or the handler whatever is next.

54
00:02:47.609 --> 00:02:51.391
Each middleware doesn't know what comes
after it cuz you'll see how we can

55
00:02:51.391 --> 00:02:51.999
figure it.

56
00:02:51.999 --> 00:02:56.362
But this just means,
I did what I was supposed to do, I'm done,

57
00:02:56.362 --> 00:03:01.426
go to the next thing in the stack, which
can be a handler or another middleware.

58
00:03:01.426 --> 00:03:05.542
So it's the equivalent of
calling res inside of a handler.

59
00:03:05.542 --> 00:03:09.366
Whereas when I say res.json or
res.send inside of a handler,

60
00:03:09.366 --> 00:03:13.997
I'm done with this work calling next
is the middleware saying, I'm done.

61
00:03:13.997 --> 00:03:17.273
Middleware can also respond
to the request too.

62
00:03:17.273 --> 00:03:21.655
Middleware can say read res and
stop and never called next.

63
00:03:21.655 --> 00:03:26.274
For instance, a use case would
be I have a middleware that

64
00:03:26.274 --> 00:03:30.904
checks to see if an incoming
IP address is from Coca Cola.

65
00:03:30.904 --> 00:03:36.600
And if it is I'm going to, in the request
right now and send a message back and

66
00:03:36.600 --> 00:03:41.599
say, hey, we're Pepsi,
you're Coca Cola get off our website.

67
00:03:41.599 --> 00:03:46.703
You can do that inside of a middleware,
you can stop doing whatever you want.

68
00:03:46.703 --> 00:03:49.437
You can do the same thing a handler
can do, you can talk to the databases.

69
00:03:49.437 --> 00:03:51.444
You can literally do whatever you want and

70
00:03:51.444 --> 00:03:55.240
then you can also continue on to another
middleware that does something else.

71
00:03:55.240 --> 00:03:58.941
Or you put everything in one middleware,
which I don't recommend.

72
00:03:58.941 --> 00:04:02.469
So, all right, I'm making this sound
hard than actually is, let's do it.

73
00:04:02.469 --> 00:04:05.864
So, let's write some middleware.

74
00:04:05.864 --> 00:04:09.662
First we're gonna use some middleware
that we aren't gonna create because it's

75
00:04:09.662 --> 00:04:10.386
super useful.

76
00:04:10.386 --> 00:04:12.156
And then we're gonna
create some middleware.

77
00:04:12.156 --> 00:04:15.565
So some really useful middleware
that we're gonna use.

78
00:04:15.565 --> 00:04:17.251
One of them is called Morgan.

79
00:04:17.251 --> 00:04:23.598
So we're gonna npm install Morgan,
I am just gonna say save.

80
00:04:23.598 --> 00:04:27.362
Morgan is a middleware that logs requests,

81
00:04:27.362 --> 00:04:32.256
that's literally all it does,
and it's super useful.

82
00:04:32.256 --> 00:04:38.304
So we're gonna install Morgan and
then you're gonna go over to server.

83
00:04:38.304 --> 00:04:44.186
And then, above all your route
declarations you could say,

84
00:04:44.186 --> 00:04:48.682
well, first let's import Morgan, I guess,

85
00:04:48.682 --> 00:04:52.389
import morgan from morgan, like so.

86
00:04:52.389 --> 00:04:55.575
And then after we make an app,
we can say app.use.

87
00:04:55.575 --> 00:04:57.262
And remember, order matters.

88
00:04:57.262 --> 00:04:59.759
So we always put your
middleware at the top,

89
00:04:59.759 --> 00:05:04.364
before all your other routes if you want
the routes to come after the middleware.

90
00:05:04.364 --> 00:05:09.272
So middleware usually comes first,
so I'm gonna say app.use morgan and

91
00:05:09.272 --> 00:05:13.402
morgan takes in an option of what
level of logging do you want.

92
00:05:13.402 --> 00:05:17.791
You can do l tiny concise,
I like the dev formatting because it gives

93
00:05:17.791 --> 00:05:21.877
me everything I need as a developer for
logging some of the dev.

94
00:05:21.877 --> 00:05:23.009
And I'm gonna save that.

95
00:05:27.949 --> 00:05:33.294
Right, so, app.use doesn't always have to
take a mount path like we did down here.

96
00:05:33.294 --> 00:05:37.297
You can actually just not put a mount
path and it's global for the whole app.

97
00:05:37.297 --> 00:05:39.856
This means I'm using this middleware for
the entire app.

98
00:05:39.856 --> 00:05:44.672
That means every single request
that comes into this API has

99
00:05:44.672 --> 00:05:48.436
to go through whatever
morgan is doing first.

100
00:05:48.436 --> 00:05:51.370
And I can tell you it's doing
a console log, that's what it's doing.

101
00:05:51.370 --> 00:05:53.274
It's just logging and
then it's calling next.

102
00:05:53.274 --> 00:05:56.383
So then when it calls next,
where does it go?

103
00:05:56.383 --> 00:05:59.140
Well, it goes to the next
thing in a stack.

104
00:05:59.140 --> 00:06:04.301
So in the case of I did an API
call to slash next would be here,

105
00:06:04.301 --> 00:06:05.863
it would go here.

106
00:06:05.863 --> 00:06:09.274
But what if I did an API call
to slash API slash product?

107
00:06:09.274 --> 00:06:13.791
Well, next would be slash API slash
product and it'll run that handler.

108
00:06:13.791 --> 00:06:17.799
So next is always different
depending on what the request is.

109
00:06:17.799 --> 00:06:20.787
That's why this is middleware
doesn't know what next is.

110
00:06:20.787 --> 00:06:25.808
It just calls next and express handles
the routing of what to call next because

111
00:06:25.808 --> 00:06:30.686
again, everything is just basically
in an array underneath everything.

112
00:06:30.686 --> 00:06:36.753
Everything's order is kept in track,
so it knows what to call next.

113
00:06:36.753 --> 00:06:38.461
All right, let's run that and
see what I'm talking about.

114
00:06:38.461 --> 00:06:44.874
So going to stop my server,
start my server.

115
00:06:44.874 --> 00:06:51.790
I'm gonna go here and I'm gonna do
a get request to my API product.

116
00:06:51.790 --> 00:06:55.732
Still got message, hello here,
when I go back to the terminal,

117
00:06:55.732 --> 00:06:57.341
you see I got this log now.

118
00:06:57.341 --> 00:06:58.341
Morgan did that.

119
00:06:58.341 --> 00:07:01.009
It said, so
why did a get request to this URL?

120
00:07:01.009 --> 00:07:06.049
You sent back a 200 response and
it took 1.37 milliseconds.

121
00:07:06.049 --> 00:07:10.489
And I don't know if this is how many
bytes, how big the payload was?

122
00:07:10.489 --> 00:07:13.789
Yeah, that's the size
I sent back 19 bytes.

123
00:07:19.590 --> 00:07:24.382
So it's very useful, you would use
middleware, if you had a product that you

124
00:07:24.382 --> 00:07:28.381
bought, I mean, there's so
many logging products out there.

125
00:07:28.381 --> 00:07:29.628
I don't even wanna name one.

126
00:07:29.628 --> 00:07:32.426
But if you use any logging products,
a logger API,

127
00:07:32.426 --> 00:07:35.548
they would probably have an SDK
that has a middleware that

128
00:07:35.548 --> 00:07:38.819
sits on your express that sends
your logs to their servers.

129
00:07:38.819 --> 00:07:43.533
So, they can show you on a dashboard,
data dog or something like that.

130
00:07:43.533 --> 00:07:44.972
Right, like some logging thing.

131
00:07:44.972 --> 00:07:50.162
It's probably just a middleware or
if you've ever use centri,

132
00:07:50.162 --> 00:07:54.777
it's propably a middleware or
segments for analytics,

133
00:07:54.777 --> 00:08:00.176
probably a middleware because it
just look at any single request.

134
00:08:01.926 --> 00:08:03.909
Any questions on that?

135
00:08:03.909 --> 00:08:04.542
Yes.

136
00:08:04.542 --> 00:08:08.817
&gt;&gt; Do we have any options here like this
particular middleware will intercept only

137
00:08:08.817 --> 00:08:09.661
these routes?

138
00:08:09.661 --> 00:08:10.641
&gt;&gt; Yeah, that's a great question.

139
00:08:10.641 --> 00:08:11.618
So the question was,

140
00:08:11.618 --> 00:08:15.379
do we have the options to say only want
this middleware to intercept these routes?

141
00:08:15.379 --> 00:08:17.069
There's so many ways you can do that.

142
00:08:17.069 --> 00:08:21.233
You can do that on the code
level where inside you just set

143
00:08:21.233 --> 00:08:23.456
the middleware to be global.

144
00:08:23.456 --> 00:08:27.400
And then inside the middleware,
you specifically check against a list of

145
00:08:27.400 --> 00:08:31.101
routes that you specifically want
to do and only run your code there.

146
00:08:31.101 --> 00:08:33.153
That's one way.

147
00:08:33.153 --> 00:08:37.564
The other way is, you can do it
on a configuration level where

148
00:08:37.564 --> 00:08:42.507
you only add the middleware to
the routes that you want it to affect.

149
00:08:42.507 --> 00:08:46.007
So, for instance we added
the middleware globally here but

150
00:08:46.007 --> 00:08:50.355
there's nothing stopping me from
adding middleware here only for this.

151
00:08:50.355 --> 00:08:53.087
Or even further down I can
go into the router and

152
00:08:53.087 --> 00:08:56.461
only want to add middleware here,
for this one, right?

153
00:08:56.461 --> 00:09:00.865
So I can specifically add middleware
wherever I want, that way, or

154
00:09:00.865 --> 00:09:02.885
check myself inside the code.

