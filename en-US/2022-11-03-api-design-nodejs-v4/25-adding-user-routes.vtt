WEBVTT

1
00:00:00.000 --> 00:00:03.710
Now, we need to actually create
some routes and hook them up and

2
00:00:03.710 --> 00:00:04.762
see if they work.

3
00:00:04.762 --> 00:00:11.564
So let's head over to our,
Server, let's do this as server.

4
00:00:11.564 --> 00:00:16.308
So in server,
we'll just add this after our API.

5
00:00:16.308 --> 00:00:19.358
You can do before your API,
it actually doesn't matter,

6
00:00:19.358 --> 00:00:20.985
because they don't collide.

7
00:00:20.985 --> 00:00:22.878
You know what that means when
I say they don't collide?

8
00:00:22.878 --> 00:00:24.958
As in they don't have the same URL, so

9
00:00:24.958 --> 00:00:28.079
it's not like one's gonna run
instead of the other one.

10
00:00:28.079 --> 00:00:30.976
They're never going to
interact with each other.

11
00:00:30.976 --> 00:00:35.553
So it's totally fine, so
I'm gonna make one for /,

12
00:00:35.553 --> 00:00:39.030
what did I call it here, your user.

13
00:00:39.030 --> 00:00:42.654
So app dot post,
doesn't make a post request to user.

14
00:00:42.654 --> 00:00:47.088
So I'm creating a new user,
I'm gonna put createnew,

15
00:00:50.539 --> 00:00:54.711
NewUser like that, and

16
00:00:54.711 --> 00:01:00.975
if you do app.post to /signin/.

17
00:01:00.975 --> 00:01:05.607
I'm going to sign in like that.

18
00:01:05.607 --> 00:01:09.928
And you can see now, this is cool, because
this whole router over here has this

19
00:01:09.928 --> 00:01:13.665
protective middleware that prevents
you from accessing it without

20
00:01:13.665 --> 00:01:17.030
a JSON Web Token, but
it doesn't apply to these two things.

21
00:01:17.030 --> 00:01:20.403
It only applies to this stack,
this sub router,

22
00:01:20.403 --> 00:01:25.692
because that would suck to or you can't
sign in until you already signed in.

23
00:01:25.692 --> 00:01:29.153
Or sorry, you can't make a new account,
because you're not signed in,

24
00:01:29.153 --> 00:01:30.839
that wouldn't make any sense at all.

25
00:01:30.839 --> 00:01:33.045
Because if we put protect down here,
that's what will happen.

26
00:01:33.045 --> 00:01:36.339
It's like, no, sorry, 401,
you didn't send us a JSON Web Token.

27
00:01:36.339 --> 00:01:37.712
He's like, I never even signed up before.

28
00:01:37.712 --> 00:01:39.897
How would I have a JSON Web Token, right?

29
00:01:39.897 --> 00:01:41.604
That's literally what would happen.

30
00:01:41.604 --> 00:01:47.342
So let's see if we did this right or
broke something.

31
00:01:47.342 --> 00:01:51.483
Stop my server, start my server.

32
00:01:51.483 --> 00:01:53.597
Didn't break on bootup,
that's always a good sign.

33
00:01:56.591 --> 00:02:01.439
Then I'm going to go into Thunder Client,

34
00:02:01.439 --> 00:02:06.159
I'm going to make a post request to user.

35
00:02:06.159 --> 00:02:10.017
I'm gonna give it a name, username.

36
00:02:10.017 --> 00:02:15.803
I'll call the username scott,
and password is admin.

37
00:02:15.803 --> 00:02:18.787
No one's gonna guessed that one.

38
00:02:18.787 --> 00:02:20.503
And I'm going to make sure,

39
00:02:20.503 --> 00:02:25.162
let me get rid of this odd stuff in here
that I was playing around with earlier.

40
00:02:25.162 --> 00:02:28.389
I got some test stuff in there,
okay, I think we're good here.

41
00:02:28.389 --> 00:02:32.650
So usually, make sure if you're using
Thunder Client that you click on Body,

42
00:02:32.650 --> 00:02:35.183
you click on Json, and
then you add your Json.

43
00:02:35.183 --> 00:02:41.105
So we know we need a username,
because our request is looking for

44
00:02:41.105 --> 00:02:46.492
a wreck dot Body dot username
racked up body dot password.

45
00:02:46.492 --> 00:02:50.772
So I added a username and a password,
because that's what our API is asking for.

46
00:02:50.772 --> 00:02:53.783
Because that's the code
that we wrote in our API,

47
00:02:53.783 --> 00:02:58.240
we're assuming you're passing us
a username and a password on the body.

48
00:02:59.710 --> 00:03:04.654
Okay, I'm going to meet that assumption
and I'm going to try to send this and

49
00:03:04.654 --> 00:03:05.808
see what breaks.

50
00:03:05.808 --> 00:03:07.518
Okay, it didn't break, it worked, cool.

51
00:03:07.518 --> 00:03:14.712
So we got back a token, and this is what a
JSON Web Token looks like, that's a token.

52
00:03:14.712 --> 00:03:16.191
It's just weird string.

53
00:03:19.141 --> 00:03:21.971
This worked, we signed in.

54
00:03:21.971 --> 00:03:25.018
Another way to verify this,
I'm gonna show you something really cool.

55
00:03:25.018 --> 00:03:29.397
If you open up a new terminal tab, and

56
00:03:29.397 --> 00:03:34.625
you type out npx prisma studio, hit Enter,

57
00:03:34.625 --> 00:03:38.595
and it's gonna open up this app.

58
00:03:38.595 --> 00:03:42.655
This app is a visual way for
you to explore your database.

59
00:03:42.655 --> 00:03:48.832
So you can see here's all the models
that I have, and user has one in there.

60
00:03:48.832 --> 00:03:53.976
Look at that, so if I go click on it,
I can see that I have one user in here.

61
00:03:53.976 --> 00:03:57.970
And look, it's me, it's Scott and
there's my hash password.

62
00:03:57.970 --> 00:04:00.757
And I have no products and
that was created at this time.

63
00:04:00.757 --> 00:04:03.441
There's my ID, so this worked.

64
00:04:03.441 --> 00:04:06.473
I was able to sign in or sign up.

65
00:04:09.137 --> 00:04:13.223
Now, let us check that this
JSON Web Token can get

66
00:04:13.223 --> 00:04:17.217
past the protect middleware
on the API routes.

67
00:04:17.217 --> 00:04:18.447
Let's give it a try.

68
00:04:18.447 --> 00:04:23.199
So now, what I am gonna do is I
am gonna copy to JSON Web Token,

69
00:04:25.155 --> 00:04:30.789
Like so, just a part in the string,
it's multi line.

70
00:04:30.789 --> 00:04:33.933
I'm gonna make another
request to API product.

71
00:04:33.933 --> 00:04:37.036
Which by the way, if I tried to make this
request now, it's gonna break, right?

72
00:04:37.036 --> 00:04:40.714
Not valid token,
because I didn't sit at JSON Web Token.

73
00:04:40.714 --> 00:04:43.483
So what I'm gonna do now is
I'm gonna click on Off, and

74
00:04:43.483 --> 00:04:44.938
we have a Bearer Token here.

75
00:04:44.938 --> 00:04:47.435
I'm just gonna type in that.

76
00:04:47.435 --> 00:04:51.144
It's gonna drop in my JSON Web Token.

77
00:04:51.144 --> 00:04:53.459
I think Thunder Client by default,
if you click on bearer,

78
00:04:53.459 --> 00:04:55.372
automatically puts the word
bear in front of it.

79
00:04:55.372 --> 00:04:59.456
So you don't have to, but if you
click on Headers yourself and add it,

80
00:04:59.456 --> 00:05:02.793
you will probably have to add
the word bearer by default.

81
00:05:02.793 --> 00:05:04.156
I think it does this already.

82
00:05:04.156 --> 00:05:06.819
So now, we're try to make this
request with a JSON Web Token.

83
00:05:06.819 --> 00:05:11.351
And if we did it right,
it should allow me to get something back.

84
00:05:11.351 --> 00:05:13.158
So let's see, and it does.

85
00:05:13.158 --> 00:05:16.042
I get a 200.

86
00:05:16.042 --> 00:05:20.293
Message success, right, and just to
show you, if I just get rid of this K,

87
00:05:20.293 --> 00:05:21.724
it's not a valid token.

88
00:05:21.724 --> 00:05:27.429
It's gonna break, but at the K back,
wait, was it uppercase?

89
00:05:27.429 --> 00:05:29.022
I don't remember, it works.

90
00:05:29.022 --> 00:05:34.157
There it goes, Okay,

91
00:05:34.157 --> 00:05:38.094
so pretty secure API at this point.

92
00:05:38.094 --> 00:05:41.846
Okay, let's just check one more thing,
let's make sure we can sign in, okay?

93
00:05:41.846 --> 00:05:46.936
So I signed up with these credentials,
I'm just gonna copy them.

94
00:05:46.936 --> 00:05:51.006
And then am going to make a new request

95
00:05:51.006 --> 00:05:56.393
to http://localhost:3001/signin,

96
00:05:56.393 --> 00:06:01.264
click on Body, make sure JSON is selected.

97
00:06:01.264 --> 00:06:05.757
Paste in those same credentials I signed
up with, and I'm gonna send a request.

98
00:06:05.757 --> 00:06:12.579
And I get 404s, I think I misspelled
something on the server side.

99
00:06:12.579 --> 00:06:14.836
I'm pretty sure I did,
let's just check that out.

100
00:06:16.655 --> 00:06:22.566
Sign in, wait, I hadn't get didn't?

101
00:06:22.566 --> 00:06:24.722
I yeah I believe I had it at GET request.

102
00:06:27.465 --> 00:06:30.989
Yeah, it's a GET request, so
I need to change that to a post.

103
00:06:30.989 --> 00:06:34.572
So now, let's try to post that and,
voila, we get a JSON Web Token.

104
00:06:34.572 --> 00:06:38.639
So signin works, sign up works,
everything's good.

105
00:06:38.639 --> 00:06:42.224
And just to test one more thing,
username must be unique.

106
00:06:42.224 --> 00:06:48.471
So I should not be able to sign up,

107
00:06:50.243 --> 00:06:55.685
With the same pass, the same username.

108
00:06:55.685 --> 00:07:01.168
So I'm gonna say, post to user, and I'm
gonna try to sign up with the same thing.

109
00:07:01.168 --> 00:07:04.143
I should get an error here, so let's see.

110
00:07:04.143 --> 00:07:09.243
And I do, we don't handle errors
on the server, so it died,

111
00:07:09.243 --> 00:07:14.052
but that's what I expected to
happen if I go look at this.

112
00:07:14.052 --> 00:07:17.109
It'll probably say something like,
yeah, here we go,

113
00:07:17.109 --> 00:07:19.857
invalid prisma.user.create() invocation.

114
00:07:19.857 --> 00:07:23.886
It's basically saying,
where's the exact one?

115
00:07:23.886 --> 00:07:28.224
Yeah, unique constraint filled
on the fields username,

116
00:07:28.224 --> 00:07:31.244
aka someone already has that username.

117
00:07:31.244 --> 00:07:35.297
So sorry, right,
this is why we have to catch our errors.

118
00:07:35.297 --> 00:07:38.792
My host server just died, because
someone typed in someone's username,

119
00:07:38.792 --> 00:07:39.626
that would suck.

120
00:07:39.626 --> 00:07:43.074
So we wanna make sure we handle those
errors, and we'll do that next time.

121
00:07:43.074 --> 00:07:44.171
Any questions on this?

122
00:07:44.171 --> 00:07:45.243
Yes.

123
00:07:45.243 --> 00:07:49.418
&gt;&gt; How would you handle authenticating
different tiers of users?

124
00:07:49.418 --> 00:07:53.564
&gt;&gt; Authenticating different tiers
of users, it's a good question.

125
00:07:53.564 --> 00:08:00.021
So I guess it depends on
what that would look like.

126
00:08:00.021 --> 00:08:01.653
You can get really
sophisticated with that.

127
00:08:01.653 --> 00:08:07.127
I think one of you would have to create

128
00:08:07.127 --> 00:08:13.846
a system that knew what
data was on what tier?

129
00:08:13.846 --> 00:08:17.681
I'm guessing you don't want people
accessing certain things based off what

130
00:08:17.681 --> 00:08:18.979
certain tiers they have.

131
00:08:18.979 --> 00:08:22.385
So then the data needs to know
what tiers it's available to, so

132
00:08:22.385 --> 00:08:24.132
you'd have to figure that out.

133
00:08:24.132 --> 00:08:27.683
Maybe you just throw that in a database,
like, someone wants this,

134
00:08:27.683 --> 00:08:29.305
this is a tier three or whatever.

135
00:08:29.305 --> 00:08:30.540
So that's one thing, and

136
00:08:30.540 --> 00:08:33.416
then the second thing is it's
just a filter on a query right?

137
00:08:33.416 --> 00:08:36.243
You would just make sure you
would put their tier and

138
00:08:36.243 --> 00:08:40.592
their JSON Web Token along with their
email, or their username, or their ID.

139
00:08:40.592 --> 00:08:41.866
And then when you query the database.

140
00:08:41.866 --> 00:08:45.376
You just make sure you got
that tier filter on there.

141
00:08:45.376 --> 00:08:49.100
I'm looking for
this information that is tier one.

142
00:08:49.100 --> 00:08:52.224
Well, if that information isn't terrible,
and it's not gonna return anything,

143
00:08:52.224 --> 00:08:53.728
cuz in the database, it's tier three.

144
00:08:53.728 --> 00:08:55.388
So that's one way,

145
00:08:55.388 --> 00:09:00.376
you can also do a little more
manual per single row per query.

146
00:09:00.376 --> 00:09:04.024
And just do your if checks their,
query the database as normal, and

147
00:09:04.024 --> 00:09:05.631
then before you send it back.

148
00:09:05.631 --> 00:09:09.499
You can well, now let me check
the tiers and we have this.

149
00:09:09.499 --> 00:09:12.772
Configuration object over here that
tells me that these tiers only have

150
00:09:12.772 --> 00:09:16.163
access to this, so I can delete these
properties before I send them back.

151
00:09:16.163 --> 00:09:19.137
But that's wasteful,
cuz you had to quit the database for it.

152
00:09:19.137 --> 00:09:22.649
So I mean, there's an unlimited
amount of ways to do that,

153
00:09:22.649 --> 00:09:25.552
it's not as complicated as it sounds,
though.

154
00:09:25.552 --> 00:09:30.604
How does everybody feel about
authentication, routes, middleware,

155
00:09:30.604 --> 00:09:35.259
methods, headers, requests,
response, it's covered a lot.

156
00:09:35.259 --> 00:09:38.322
How's everyone feeling
about that right now?

157
00:09:38.322 --> 00:09:44.041
I wanna know, what was your expectation

158
00:09:44.041 --> 00:09:49.936
of learning node and API verses reality.

159
00:09:49.936 --> 00:09:55.245
&gt;&gt; I'll say, I'm glad that we're
dipping into TypeScript, because

160
00:09:55.245 --> 00:10:01.392
it always seems like the scary thing out
there and it really doesn't have to be.

161
00:10:01.392 --> 00:10:04.657
&gt;&gt; It doesn't have to be,
TypeScript is optional types.

162
00:10:04.657 --> 00:10:06.199
It's always optional types, right?

163
00:10:06.199 --> 00:10:09.877
You don't have these types,
I encourage you to use them, but

164
00:10:09.877 --> 00:10:12.869
progressively start as
you build out more stuff.

165
00:10:12.869 --> 00:10:15.533
Add a type here there, right,
just try to figure it out.

166
00:10:15.533 --> 00:10:19.075
Eventually, you'll just be
like a TypeScript got one day,

167
00:10:19.075 --> 00:10:22.141
especially if you use angular,
you have no choice.

168
00:10:22.141 --> 00:10:26.296
But yeah, it's not hard,
it just takes time.

169
00:10:26.296 --> 00:10:29.960
&gt;&gt; It seems like the IDs are getting good
at just knowing what type you're going

170
00:10:29.960 --> 00:10:30.596
for anyway.

171
00:10:30.596 --> 00:10:34.896
&gt;&gt; Yeah, the IDs are super smart,
they just know everything.

172
00:10:34.896 --> 00:10:38.031
I mean, yeah,
VS Code is just on another level.

173
00:10:38.031 --> 00:10:41.631
Go for them, but yeah, I mean, they're
owned by the same company now, right?

174
00:10:41.631 --> 00:10:47.877
TypeScript was created in Microsoft and
VS Code was created in Microsoft.

175
00:10:47.877 --> 00:10:51.273
So [LAUGH] yeah, they just get it now.

