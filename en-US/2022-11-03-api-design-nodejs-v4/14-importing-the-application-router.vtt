WEBVTT

1
00:00:00.130 --> 00:00:02.630
So we have our stuff here.

2
00:00:02.630 --> 00:00:05.190
The last thing we need to do is like,
yeah, cool.

3
00:00:05.190 --> 00:00:09.672
We made a router, but we have to attach
it back to the main app otherwise,

4
00:00:09.672 --> 00:00:13.735
it's just floating around,
it's not doing anything.

5
00:00:13.735 --> 00:00:17.158
So, maybe I said the app
is the actual API.

6
00:00:17.158 --> 00:00:18.458
This is just like a sub API.

7
00:00:18.458 --> 00:00:21.715
Well, you have to mount
it back to the app.

8
00:00:21.715 --> 00:00:23.555
So in order to do that,
let's export the router.

9
00:00:23.555 --> 00:00:28.163
So export default router like that and

10
00:00:28.163 --> 00:00:35.512
then you can go back to server and
you can import your router.

11
00:00:37.156 --> 00:00:44.490
Like so and you can get rid of this if you
want, you can go after it or whatever.

12
00:00:44.490 --> 00:00:47.400
The thing about creating routes
is that order does matter.

13
00:00:47.400 --> 00:00:50.795
If you make a route that's the same like,

14
00:00:50.795 --> 00:00:56.331
I'll make another one of these,
right, okay, copy just said no.

15
00:00:56.331 --> 00:01:01.580
I'll make another one of these with
the same method, path combination.

16
00:01:03.010 --> 00:01:04.726
Which one of these is going to fire?

17
00:01:07.644 --> 00:01:10.980
They're both targeting the same
method path combination.

18
00:01:10.980 --> 00:01:12.439
Like what would you expect?

19
00:01:14.630 --> 00:01:19.146
If you were the creators of Express,
what would you have built into Express to

20
00:01:19.146 --> 00:01:23.710
handle this situation where they're
both targeting the same thing.

21
00:01:23.710 --> 00:01:26.210
&gt;&gt; I would say whatever
is registered first.

22
00:01:26.210 --> 00:01:27.349
&gt;&gt; Yeah, exactly whatever it was first.

23
00:01:27.349 --> 00:01:29.510
So like, that's actually what's happening.

24
00:01:29.510 --> 00:01:34.480
So this one would actually execute first
and this one would never get executed.

25
00:01:34.480 --> 00:01:38.641
So the order in which you
register a listener matters, so

26
00:01:38.641 --> 00:01:43.420
top to bottom does matter when
it comes to defining routes.

27
00:01:43.420 --> 00:01:47.613
And you can think of it as like this
every time you do this you're actually

28
00:01:47.613 --> 00:01:51.876
registering like, hey, I want to be
notified via this function when this

29
00:01:51.876 --> 00:01:56.200
combination comes in and they put
that subscription inside of an array.

30
00:01:56.200 --> 00:01:58.980
So there's an array of event
handlers that get called.

31
00:01:58.980 --> 00:02:02.139
So it would make sense that this one will
be the first thing in the array, and

32
00:02:02.139 --> 00:02:04.163
this one would be the second
thing in the array.

33
00:02:04.163 --> 00:02:07.550
So because this one got found first,
this one never gets found.

34
00:02:09.230 --> 00:02:12.790
You can leave it that way,
that's pretty much what it is.

35
00:02:12.790 --> 00:02:19.588
Okay, anyway, I wanna leave that and now
what we wanna do is, we wanna say app.use.

36
00:02:19.588 --> 00:02:23.715
Let me talk about that,
use is not ASD method, but

37
00:02:23.715 --> 00:02:28.826
some of that build it to express and
use allows you to apply some

38
00:02:28.826 --> 00:02:33.938
type of global options,
some type of global configuration,

39
00:02:33.938 --> 00:02:38.493
either to the whole app or
to a certain path of your API.

40
00:02:38.493 --> 00:02:40.404
In our case,
we're gonna do a certain path.

41
00:02:40.404 --> 00:02:43.331
We're gonna say we wanna use or so for

42
00:02:43.331 --> 00:02:48.254
everything that has slash API in it,
we wanna use the router.

43
00:02:50.939 --> 00:02:53.030
So what is this actually saying?

44
00:02:53.030 --> 00:02:54.850
Okay, we're gonna walk through it.

45
00:02:56.130 --> 00:03:01.620
We know in our router we have let's
say we know we have a get request for

46
00:03:01.620 --> 00:03:03.660
get/product, right?

47
00:03:03.660 --> 00:03:07.662
So in our head we're like, cool, if we
wanna make a get request to slash product,

48
00:03:07.662 --> 00:03:11.780
assuming there was something here,
it would trigger this it would work.

49
00:03:11.780 --> 00:03:15.520
No not anymore because
router is mounted to /API.

50
00:03:15.520 --> 00:03:20.410
So the actual URL for
that would be /api/product.

51
00:03:20.410 --> 00:03:24.010
Because this is mounted before any
other routes that are registered here.

52
00:03:25.360 --> 00:03:30.060
So now this whole router doesn't
exist until you put /api in your URL.

53
00:03:30.060 --> 00:03:34.332
So you have to put go to your

54
00:03:34.332 --> 00:03:40.160
url.com/api/any one of these or

55
00:03:40.160 --> 00:03:42.888
these or these.

56
00:03:42.888 --> 00:03:45.830
But these don't know that
they belong to slash API.

57
00:03:45.830 --> 00:03:47.870
And that's what makes router cool.

58
00:03:47.870 --> 00:03:52.650
It's just a way for you to abstract and
move around different pieces of your API.

59
00:03:52.650 --> 00:03:56.281
Like components you can think of like
a router as like a component for

60
00:03:56.281 --> 00:03:58.650
routes basically they're just reusable.

