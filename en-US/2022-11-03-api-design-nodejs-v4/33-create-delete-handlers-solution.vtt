WEBVTT

1
00:00:00.530 --> 00:00:03.624
createUpdate, let's do that one, so

2
00:00:03.624 --> 00:00:07.390
to create an update,
what did we say we needed?

3
00:00:10.329 --> 00:00:14.628
We're gonna need a title and a body,
I think we got to have one more,

4
00:00:14.628 --> 00:00:22.665
you're also gonna need, The product ID.

5
00:00:29.253 --> 00:00:32.463
IsSemVer, they've got SemVer in there,
that's cool.

6
00:00:32.463 --> 00:00:37.470
So yeah, we need a productId, otherwise
how do we know where to add this?

7
00:00:37.470 --> 00:00:38.638
So we gotta have that.

8
00:00:41.072 --> 00:00:42.772
Okay, so first thing first,

9
00:00:42.772 --> 00:00:47.328
we need to check to make sure that the
product ID that you're sending up actually

10
00:00:47.328 --> 00:00:51.953
belongs to you, before we associate an
update to our product ID that you gave us.

11
00:00:51.953 --> 00:00:57.348
Otherwise, yeah, it's gonna be the wild,
wild west, so we'll just say product.

12
00:01:01.079 --> 00:01:03.399
And in fact, we can do all of that,

13
00:01:03.399 --> 00:01:08.120
I believe we can do all of that in
one query with a nested write, maybe.

14
00:01:09.314 --> 00:01:12.528
Maybe not, let's find out, so

15
00:01:12.528 --> 00:01:17.656
we'll say await prisma.product.findUnique.

16
00:01:17.656 --> 00:01:19.970
id: of

17
00:01:19.970 --> 00:01:29.970
req.body.productId.findUnique.

18
00:01:33.088 --> 00:01:34.201
Why are you tripping out?

19
00:01:39.255 --> 00:01:44.768
Let's see, .findUnique where,

20
00:01:44.768 --> 00:01:48.809
or the output where, id,

21
00:01:48.809 --> 00:01:54.703
there we go, okay, req.body.id.

22
00:01:56.829 --> 00:02:01.568
Okay, so we got the product,
if this doesn't come back, so we can say,

23
00:02:01.568 --> 00:02:03.692
if there is no product, right?

24
00:02:03.692 --> 00:02:05.761
That means this product
does not belong to you.

25
00:02:07.407 --> 00:02:08.829
And we're gonna handle errors later.

26
00:02:11.335 --> 00:02:12.457
Does not belong to user.

27
00:02:12.457 --> 00:02:17.584
So right now, we'll just send something

28
00:02:17.584 --> 00:02:21.392
back right now, it says like,

29
00:02:21.392 --> 00:02:26.381
no, you're not getting nothing back.

30
00:02:26.381 --> 00:02:29.784
But if you do have a product, cool,
you just send the right product ID.

31
00:02:29.784 --> 00:02:31.580
Okay, let's go ahead and
create an update now.

32
00:02:31.580 --> 00:02:35.813
So now we can say,

33
00:02:37.196 --> 00:02:44.502
prisma.update.create,

34
00:02:46.903 --> 00:02:53.586
data, and we know that the productId
is the one you sent us,

35
00:02:53.586 --> 00:02:58.407
or product.id, they're both the same.

36
00:02:58.407 --> 00:03:02.640
And the other stuff is going
to be all in req.body.

37
00:03:02.640 --> 00:03:05.001
Honestly, we can just probably just
spread over req.body at this point.

38
00:03:05.001 --> 00:03:11.350
Because we trust it, so
we could just say, Actually we need it,

39
00:03:11.350 --> 00:03:15.884
yeah, we can just spread over req.body,
I believe, so we could just req.body.

40
00:03:15.884 --> 00:03:20.573
Because req.body will just have title,
a body, and

41
00:03:20.573 --> 00:03:26.316
a productId, which are all the things
that we need for an update.

42
00:03:26.316 --> 00:03:31.242
A title, a body, and a productId.

43
00:03:31.242 --> 00:03:32.743
Everything else is optional or
defaulted, so

44
00:03:32.743 --> 00:03:34.130
we don't have to put anything else there.

45
00:03:34.130 --> 00:03:36.700
So we're actually good, so
we can just do req.body.

46
00:03:36.700 --> 00:03:39.395
And we can trust it because
the validators already looked at it.

47
00:03:39.395 --> 00:03:42.918
If we didn't have validators,
we probably would not wanna do that,

48
00:03:42.918 --> 00:03:46.700
just throw the body on there blindly,
cuz who knows what's on that body.

49
00:03:46.700 --> 00:03:50.761
But because it already got validated at
this point we should be able to trust it,

50
00:03:50.761 --> 00:03:52.043
and it should just work.

51
00:03:52.043 --> 00:03:54.701
So we got our update,

52
00:03:54.701 --> 00:04:00.323
now we can say res.json{data:update}.

53
00:04:08.525 --> 00:04:14.759
As you can see, these start to get more
complex when you throw in a relation.

54
00:04:14.759 --> 00:04:18.035
Relations are what makes
database queries complex.

55
00:04:18.035 --> 00:04:21.100
Without relations,
everything's just like one query.

56
00:04:21.100 --> 00:04:25.983
As soon as you add relations,
it's like, well, hold on,

57
00:04:25.983 --> 00:04:29.980
you have to do what's called a query plan.

58
00:04:29.980 --> 00:04:34.402
You literally have to do a query plan of
planning on how you're gonna navigate to

59
00:04:34.402 --> 00:04:35.850
this data.

60
00:04:35.850 --> 00:04:37.321
And what's the optimal query,

61
00:04:37.321 --> 00:04:39.890
which usually leads to
rewriting schemas and indexes.

62
00:04:39.890 --> 00:04:43.722
But yeah, it gets complicated
when you have tons of relations.

63
00:04:43.722 --> 00:04:47.484
That's why there's different types of
databases, like graph databases and

64
00:04:47.484 --> 00:04:49.993
things like that,
to help with problems like that.

65
00:04:49.993 --> 00:04:53.758
Do you have a social network that have
everyone has a relationship with everyone?

66
00:04:53.758 --> 00:04:56.389
Okay, maybe a relational database
is probably not the best,

67
00:04:56.389 --> 00:04:57.969
because imagine the query for that.

68
00:04:57.969 --> 00:05:00.614
Trying to find a friend of
a friend of a friend of a friend,

69
00:05:00.614 --> 00:05:01.997
that would be crazy, right?

70
00:05:01.997 --> 00:05:05.850
So something like a graph database
will probably be better, so

71
00:05:05.850 --> 00:05:07.385
there's pros and cons.

72
00:05:11.100 --> 00:05:15.474
Okay, let's update an update.

73
00:05:15.474 --> 00:05:24.877
So in order to do that,
we need, These are optional,

74
00:05:24.877 --> 00:05:30.355
pretty much, I guess this one's optional,
too, I guess we could say that.

75
00:05:32.200 --> 00:05:34.174
Optional as well.

76
00:05:34.174 --> 00:05:39.987
Pretty much all of these are optional,
and we don't really need any of it,

77
00:05:39.987 --> 00:05:43.604
but we do have this ID here,
so let's do that.

78
00:05:43.604 --> 00:05:49.855
But we need to make sure that
you as a user own that ID.

79
00:05:49.855 --> 00:05:57.390
You as a user has a product that you
own that has an update with that ID.

80
00:05:57.390 --> 00:06:03.043
So we have to find a product,
Who has that updated.

81
00:06:03.043 --> 00:06:05.908
And there's a lot of ways we can do that,
we can go from the product side, so

82
00:06:05.908 --> 00:06:06.602
let's try that.

83
00:06:06.602 --> 00:06:11.556
So we can say product = await

84
00:06:11.556 --> 00:06:17.756
prisma.products.findUnique.

85
00:06:17.756 --> 00:06:23.051
Or actually we wanna do findFirst,

86
00:06:23.051 --> 00:06:28.696
I guess, find the first product where

87
00:06:28.696 --> 00:06:34.000
it belongsToId = req.user.id.

88
00:06:34.000 --> 00:06:39.380
But then we also wanna look
inside of its updates,

89
00:06:40.731 --> 00:06:46.923
To see, What's the word?

90
00:06:46.923 --> 00:06:49.350
There's a word to look for the array here.

91
00:06:49.350 --> 00:06:50.577
We could say updates.

92
00:06:53.294 --> 00:06:57.551
And then in, like that,
then you can put an array here, I believe.

93
00:06:57.551 --> 00:07:01.769
But yeah,
I don't think this is gonna work,

94
00:07:01.769 --> 00:07:06.550
because it's not a scalar,
it wants the strings.

95
00:07:06.550 --> 00:07:09.170
Okay, we'll just do this in
JavaScript then, for now.

96
00:07:09.170 --> 00:07:12.279
So we'll just get the products
where you have this.

97
00:07:12.279 --> 00:07:18.327
So these will be, Let's just say findMany
now, and these will be products.

98
00:07:20.263 --> 00:07:23.681
And then we'll just say match.

99
00:07:26.332 --> 00:07:28.145
First let's get all the updates.

100
00:07:32.208 --> 00:07:35.476
And we can pretty much just copy what
we had up here to get all the updates,

101
00:07:35.476 --> 00:07:36.880
which is basically like this.

102
00:07:44.575 --> 00:07:51.483
I guess we gotta include updates.

103
00:07:51.483 --> 00:07:57.108
So we got the updates,
and then we can say,

104
00:07:57.108 --> 00:08:02.579
match would be updates.find an update,

105
00:08:02.579 --> 00:08:08.536
where update.id === req.params.id.

106
00:08:11.506 --> 00:08:15.681
So then you can say,
if there's a match in res.json.

107
00:08:17.825 --> 00:08:19.352
Or no, if there's a match,

108
00:08:19.352 --> 00:08:23.509
then we can actually do the update that
we were trying to do in the first place.

109
00:08:23.509 --> 00:08:25.741
So I was gonna say if not a match,
we'll handle this.

110
00:08:27.327 --> 00:08:31.447
And you just do something like res.json,

111
00:08:33.538 --> 00:08:37.649
message, nope, and just return here.

112
00:08:42.010 --> 00:08:47.596
But if there is a match,
now we can actually do the update,

113
00:08:47.596 --> 00:08:51.130
which will be updated [LAUGH] Update,

114
00:08:51.130 --> 00:08:55.813
which would be await prisma.update.update.

115
00:09:00.497 --> 00:09:07.313
Where id is req.params.id,

116
00:09:07.313 --> 00:09:12.561
and data is req.body.

117
00:09:16.330 --> 00:09:18.113
Yeah, that was a lot.

118
00:09:18.113 --> 00:09:23.458
Because, Yeah, you definitely
want the database doing this,

119
00:09:23.458 --> 00:09:25.603
and not having to do this in JavaScript.

120
00:09:25.603 --> 00:09:28.313
I don't want you guys sit here watching me
trying to figure out the optimal way to

121
00:09:28.313 --> 00:09:28.885
do it in Prisma.

122
00:09:28.885 --> 00:09:33.819
But I can promise you there's
a way to do it here in Prisma,

123
00:09:33.819 --> 00:09:36.655
the exact syntax is escaping me.

124
00:09:36.655 --> 00:09:42.831
Then we could just say res.json
({data: updatedUpdate}).

125
00:09:42.831 --> 00:09:44.381
And a delete and update.

126
00:09:44.381 --> 00:09:45.103
&gt;&gt; Question?

127
00:09:45.103 --> 00:09:46.069
&gt;&gt; Yes.
&gt;&gt; Here,

128
00:09:46.069 --> 00:09:50.735
we will end up fetching a lot of updates,
right?

129
00:09:50.735 --> 00:09:52.094
&gt;&gt; Will we end up fetching
a lot of updates?

130
00:09:52.094 --> 00:09:56.460
Yeah, you'll end up fetching every single,
well, so you'll get the updates here.

131
00:09:56.460 --> 00:09:58.229
You'll get every single,
I'm sorry, where am I at?

132
00:09:59.590 --> 00:10:02.123
Yeah, you'll end up getting
every single update for

133
00:10:02.123 --> 00:10:04.780
every single product that
belongs to this user, yeah.

134
00:10:06.810 --> 00:10:09.589
Right, yeah, it's not optimal,
you definitely want to filter,

135
00:10:09.589 --> 00:10:11.490
you wanna do that here.

136
00:10:11.490 --> 00:10:16.462
You wanna say only find the products
who has an update that is

137
00:10:16.462 --> 00:10:19.655
part of req.params.id right here.

138
00:10:19.655 --> 00:10:22.515
That's what we wanna do,
that's what I was looking for in Prisma.

139
00:10:22.515 --> 00:10:26.669
But the syntax on exactly how to
do it is us doing it in memory,

140
00:10:26.669 --> 00:10:30.584
which is usually never good,
but we'll keep it moving.

141
00:10:36.970 --> 00:10:38.304
Okay.

142
00:10:40.096 --> 00:10:46.224
DeleteUpdate, I mean, it's very much
the same, it's kinda like an update,

143
00:10:46.224 --> 00:10:51.804
you just need to make sure that they
own that update before you delete it,

144
00:10:51.804 --> 00:10:55.468
otherwise they're deleting something else.

145
00:10:55.468 --> 00:10:59.180
So the same problem we had
here we would need there.

146
00:10:59.180 --> 00:11:00.370
So I'm actually just gonna copy this.

147
00:11:02.450 --> 00:11:03.817
Pretty much the same thing.

148
00:11:06.655 --> 00:11:09.132
And just put it here.

149
00:11:09.132 --> 00:11:12.599
So we gotta find the products, find
the updates, if there's a match, cool,

150
00:11:12.599 --> 00:11:14.740
if there's not a match, great.

151
00:11:14.740 --> 00:11:21.006
And only then can we say deleted

152
00:11:21.006 --> 00:11:27.997
is await prisma.update.delete

153
00:11:27.997 --> 00:11:34.272
where id is req.params.id.

154
00:11:37.223 --> 00:11:45.003
And then you can res.json ({data,
deleted}).

155
00:11:49.850 --> 00:11:52.996
Okay, so a lot of stuff there.

156
00:11:52.996 --> 00:11:57.086
All right,
let's just add them to the routes.

157
00:11:57.086 --> 00:12:00.025
So we're gonna go to our router,
and we'll just add them.

158
00:12:00.025 --> 00:12:03.116
And we'll try to use them and
see what happens.

159
00:12:03.116 --> 00:12:07.800
So for update, this is getUpdates,

160
00:12:07.800 --> 00:12:12.643
for this one, this is getOneUpdate.

161
00:12:15.918 --> 00:12:21.885
This next one is updateUpdate,
that one's still so funny.

162
00:12:21.885 --> 00:12:27.320
This next one is createUpdate.

163
00:12:29.189 --> 00:12:34.360
And this last one is deleteUpdate.

164
00:12:34.360 --> 00:12:34.860
There we go.

