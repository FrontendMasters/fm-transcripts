WEBVTT

1
00:00:00.370 --> 00:00:01.590
So we got that.

2
00:00:01.590 --> 00:00:05.700
Now, we need to do the same thing for
sign in.

3
00:00:05.700 --> 00:00:07.130
So let's do the same thing for sign in.

4
00:00:08.160 --> 00:00:13.400
So export const sign in request response.

5
00:00:13.400 --> 00:00:15.400
Let's think through this.

6
00:00:15.400 --> 00:00:16.970
Create new user, make sense.

7
00:00:16.970 --> 00:00:20.095
We took the username and
the password you gave us.

8
00:00:20.095 --> 00:00:21.470
We hash that password.

9
00:00:22.770 --> 00:00:23.791
We've got to use it from the database.

10
00:00:23.791 --> 00:00:28.275
Assuming it works, created a token
from it and sent you back the token.

11
00:00:28.275 --> 00:00:29.388
I was signed in work.

12
00:00:35.081 --> 00:00:39.342
&gt;&gt; We have to get the token
from the request added?

13
00:00:39.342 --> 00:00:44.420
&gt;&gt; No, no token yet, sign in, just like
creating a user also issues a token.

14
00:00:44.420 --> 00:00:47.011
They're signing in because
they don't have a token.

15
00:00:47.011 --> 00:00:48.524
Yep, so no token yet.

16
00:00:48.524 --> 00:00:50.122
&gt;&gt; And just one question.

17
00:00:50.122 --> 00:00:53.507
In the token,
we are putting the user object and

18
00:00:53.507 --> 00:00:57.200
user object will have the password, right?

19
00:00:57.200 --> 00:01:01.587
&gt;&gt; It does but we specifically said in our
create that we're only putting the ID and

20
00:01:01.587 --> 00:01:02.370
the username.

21
00:01:04.330 --> 00:01:08.870
Yeah, we pass the whole user object but we
don't use all the properties on it, yeah.

22
00:01:08.870 --> 00:01:11.690
Good call, yeah, you don't wanna put
the password on a JSON web token.

23
00:01:11.690 --> 00:01:13.111
Yeah, that would be bad, yeah.

24
00:01:16.658 --> 00:01:18.377
I mean, let's just think about it.

25
00:01:18.377 --> 00:01:21.534
What does it mean to even sign in?

26
00:01:21.534 --> 00:01:24.143
&gt;&gt; That we need the username and password.

27
00:01:24.143 --> 00:01:26.361
&gt;&gt; We need the username and
password cuz, I mean,

28
00:01:26.361 --> 00:01:28.142
think about you're on a sign in form.

29
00:01:28.142 --> 00:01:31.130
Don't you type in your username or
email password?

30
00:01:31.130 --> 00:01:33.810
Okay, what do you think
is happening with that?

31
00:01:35.130 --> 00:01:36.457
How do they know?

32
00:01:36.457 --> 00:01:37.950
&gt;&gt; Checking something.

33
00:01:37.950 --> 00:01:38.919
&gt;&gt; Yeah, what is it checking?

34
00:01:38.919 --> 00:01:40.050
What do you think?

35
00:01:40.050 --> 00:01:43.125
What's being checked
&gt;&gt; If your name and

36
00:01:43.125 --> 00:01:45.210
the password exists somewhere.

37
00:01:45.210 --> 00:01:48.200
&gt;&gt; Okay, so there's a user with
this username in the database.

38
00:01:48.200 --> 00:01:49.360
Okay, cool, I found you.

39
00:01:49.360 --> 00:01:50.580
You're in the database.

40
00:01:50.580 --> 00:01:52.390
But how do I know you're you?

41
00:01:52.390 --> 00:01:53.780
Anybody couldn't do your username?

42
00:01:53.780 --> 00:01:55.790
How do I know you are you?

43
00:01:55.790 --> 00:01:58.758
&gt;&gt; Your password is unique to your name.

44
00:01:58.758 --> 00:02:02.110
&gt;&gt; Okay, so password,
let's talk about password.

45
00:02:02.110 --> 00:02:04.410
What am I looking at your password at?

46
00:02:04.410 --> 00:02:07.229
Look at this line right here, right?

47
00:02:07.229 --> 00:02:12.134
I'm gonna compare the password
you sent up when you signed in

48
00:02:12.134 --> 00:02:17.080
to the hashed password that
this user has in the database.

49
00:02:17.080 --> 00:02:23.330
And if they match,
you must be who you say you are, right?

50
00:02:23.330 --> 00:02:26.200
Cuz I already found you by username,
so you exist and

51
00:02:26.200 --> 00:02:29.930
your password matched what was in
the database if I hashed it again.

52
00:02:29.930 --> 00:02:33.441
So either you got this person's password
or you are who you say you are, so

53
00:02:33.441 --> 00:02:34.920
that's what we're gonna do.

54
00:02:36.460 --> 00:02:37.720
I love the way you think.

55
00:02:37.720 --> 00:02:39.990
So let's do that.

56
00:02:39.990 --> 00:02:41.620
So first, let's find the user.

57
00:02:41.620 --> 00:02:47.603
So user would be
await.prisma.user.findUnique and

58
00:02:47.603 --> 00:02:52.830
you put an object in there
with a where property.

59
00:02:54.360 --> 00:02:55.870
I need an async.

60
00:02:55.870 --> 00:03:02.908
So I'm saying
prisma.user.findUnique where, and

61
00:03:02.908 --> 00:03:07.957
I could say where username is gonna be,

62
00:03:07.957 --> 00:03:11.690
req.body.username.

63
00:03:11.690 --> 00:03:13.038
You gotta send me your
username if you wanna sign it.

64
00:03:15.116 --> 00:03:17.300
I'm not going to pass password here.

65
00:03:17.300 --> 00:03:20.466
The reason I'm not gonna pass password
here is because it would not find

66
00:03:20.466 --> 00:03:21.160
the password.

67
00:03:21.160 --> 00:03:26.038
Because the password that you're sending
up on sign in is a plain text password,

68
00:03:26.038 --> 00:03:29.713
but the password that's in
the database is a hash password.

69
00:03:29.713 --> 00:03:33.290
They would never match, so
I can't put password here.

70
00:03:33.290 --> 00:03:36.724
You might say, why won't you just
hash the plain text password and

71
00:03:36.724 --> 00:03:40.464
search the database for a combination
of a user that has this username and

72
00:03:40.464 --> 00:03:41.523
that has password?

73
00:03:41.523 --> 00:03:43.400
Yeah, I could do that.

74
00:03:43.400 --> 00:03:47.503
But then we'd have to go back to indexing
and we'll have to put an index on

75
00:03:47.503 --> 00:03:52.442
a password, which would probably be really
expensive in every way you could think of.

76
00:03:52.442 --> 00:03:56.050
So it's probably not the best
use case to index a password.

77
00:03:56.050 --> 00:03:59.543
Think something that changes frequently
and there's a better way to do it and

78
00:03:59.543 --> 00:04:01.491
that's why we made that helper function.

79
00:04:04.487 --> 00:04:09.175
So we're not gonna query for a combination
of a username and a password.

80
00:04:09.175 --> 00:04:11.880
Instead, we're just gonna see if there's
a user period with this username.

81
00:04:11.880 --> 00:04:13.255
We're not saying this you yet.

82
00:04:13.255 --> 00:04:15.550
We're just saying,
is there even a user with his username?

83
00:04:15.550 --> 00:04:16.894
That's first step.

84
00:04:16.894 --> 00:04:21.463
Second step is, okay, I'm gonna look
at that user's hashed password and

85
00:04:21.463 --> 00:04:25.174
see if it matches the password
that you pass me in plain text.

86
00:04:25.174 --> 00:04:28.994
If those things match, when they're both
hashed, you must be who you say you are.

87
00:04:28.994 --> 00:04:30.705
Cuz you have the right username and

88
00:04:30.705 --> 00:04:33.130
you have the password
that match that username.

89
00:04:34.130 --> 00:04:34.990
So that's what we're gonna do.

90
00:04:34.990 --> 00:04:39.852
So I'm gonna say const isValid.

91
00:04:39.852 --> 00:04:44.121
And I'm gonna say await comparePasswords.

92
00:04:44.121 --> 00:04:46.810
And the first password
is the plain text one.

93
00:04:46.810 --> 00:04:49.178
So I'll say req.body.password and

94
00:04:49.178 --> 00:04:52.808
the second one is the hash
which would be user.password.

95
00:05:06.291 --> 00:05:13.523
Okay, and I can say, if not is valid,
then you just knew someone's password and

96
00:05:13.523 --> 00:05:17.555
tried to sign in but
you didn't have the right.

97
00:05:17.555 --> 00:05:18.843
Someone's trying to hack your account.

98
00:05:18.843 --> 00:05:22.139
That's what's happening, or you just fat
fingered your password, one of the two.

99
00:05:23.710 --> 00:05:28.350
So if not is valid and
I can be, yeah, get out here.

100
00:05:28.350 --> 00:05:33.045
Res.json401, res.status401,

101
00:05:33.045 --> 00:05:39.963
which means not authorized and
I can send a message if I want to.

102
00:05:42.635 --> 00:05:45.560
Nope, and I'm gonna return,
cuz I don't want it to continue.

103
00:05:47.800 --> 00:05:49.660
But if it is valid, cool.

104
00:05:49.660 --> 00:05:51.730
You are who you say you are,
everything checks out.

105
00:05:51.730 --> 00:05:54.180
Let me go ahead and
create your token right quick.

106
00:05:54.180 --> 00:05:56.930
And send you that token back so
you get access to the rest of the API.

107
00:05:58.930 --> 00:05:59.659
&gt;&gt; Just one question.

108
00:05:59.659 --> 00:06:02.215
When we are doing the compare password,

109
00:06:02.215 --> 00:06:07.780
why we need to do async because it should
be in the memory later comparing or?

110
00:06:07.780 --> 00:06:10.879
&gt;&gt; Yeah, so that's a great question,
so why don't we do async?

111
00:06:10.879 --> 00:06:13.575
It basically comes down to
how bcrypt is designed.

112
00:06:13.575 --> 00:06:16.585
So bcrypt has three different
ways to do these methods.

113
00:06:16.585 --> 00:06:21.226
You could do them synchronously, but you
specifically have to say compare sync or

114
00:06:21.226 --> 00:06:23.525
hash sync, and then it synchronously.

115
00:06:24.565 --> 00:06:27.585
If you don't do that, you'll get the
asynchronous version which, by default,

116
00:06:27.585 --> 00:06:29.195
returns a promise.

117
00:06:29.195 --> 00:06:31.077
Both of these return a promise.

118
00:06:31.077 --> 00:06:35.327
Or you can just pass a call back
into it that old school that way but

119
00:06:35.327 --> 00:06:36.754
I'm not doing that.

120
00:06:36.754 --> 00:06:41.244
So I'm gonna use the async await cuz this
is a promise and this is a promise but,

121
00:06:41.244 --> 00:06:42.618
yeah, you're right.

122
00:06:42.618 --> 00:06:46.183
You can do it in memory if you pass sync,
yeah.

123
00:06:46.183 --> 00:06:51.299
&gt;&gt; And another question is in the Prisma,
while we are doing the where clause.

124
00:06:52.320 --> 00:06:54.315
&gt;&gt; Yes, the where clause here.

125
00:06:54.315 --> 00:06:57.321
&gt;&gt; Yeah, directly taking the value
from request body.username.

126
00:06:57.321 --> 00:07:02.595
Does it secure the,
I mean, taking the time.

127
00:07:02.595 --> 00:07:04.523
&gt;&gt; You know too much, so no,

128
00:07:04.523 --> 00:07:09.090
there is no input validation
happening right now on the body.

129
00:07:09.090 --> 00:07:11.770
That is something that we're
gonna talk about tomorrow.

130
00:07:11.770 --> 00:07:15.780
But yeah, right now, no,
we're trusting the user.

131
00:07:15.780 --> 00:07:20.340
&gt;&gt; Some of the ORM does the,
I mean, input.

132
00:07:20.340 --> 00:07:22.820
&gt;&gt; Yeah, some ORMs do input validation.

133
00:07:22.820 --> 00:07:26.340
I think there's some things
you can do in Prisma.

134
00:07:26.340 --> 00:07:30.382
To do that, I know a Mongo,
you can write middleware and

135
00:07:30.382 --> 00:07:33.650
Mongo schema to validate different things.

136
00:07:33.650 --> 00:07:35.721
I don't even do that stuff in SQL.

137
00:07:35.721 --> 00:07:38.748
There's some things but
I don't know whether Mechanism and

138
00:07:38.748 --> 00:07:40.479
Prisma that allows you to do that.

139
00:07:40.479 --> 00:07:45.718
But regardless, we would probably
validate inputs in a middleware anyway.

140
00:07:45.718 --> 00:07:48.487
We would just throw in
a middleware on the route

141
00:07:48.487 --> 00:07:53.910
somewhere that would validate those inputs
before they even got to the handler.

142
00:07:53.910 --> 00:07:58.750
Because my philosophy is, I want
the handlers to not even think about off.

143
00:07:58.750 --> 00:08:00.620
I don't want them thinking
about validations.

144
00:08:00.620 --> 00:08:02.710
I don't want them thinking about inputs.

145
00:08:02.710 --> 00:08:07.030
I just want them to, by time they execute,
they can assume everything is right.

146
00:08:07.030 --> 00:08:10.874
Because all the middleware before
them did all the other stuff, right?

147
00:08:10.874 --> 00:08:14.868
That way, you're not repeating the logic
in every single handler that you have.

148
00:08:14.868 --> 00:08:16.947
Check to see if the user's there.

149
00:08:16.947 --> 00:08:18.360
Check to see if the input's good.

150
00:08:18.360 --> 00:08:21.560
You're gonna do that copy and
paste over every single handler was used.

151
00:08:21.560 --> 00:08:24.856
Put that on one middleware,
then that's just the middleware's job, and

152
00:08:24.856 --> 00:08:26.260
the handler is protected.

153
00:08:26.260 --> 00:08:28.664
So you know when a handler was called.

154
00:08:28.664 --> 00:08:30.206
It was a correct API call and

155
00:08:30.206 --> 00:08:34.581
not you just separate your business
logic from the other logic, basically.

