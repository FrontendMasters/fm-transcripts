WEBVTT

1
00:00:00.120 --> 00:00:03.578
Now what we wanna do,
is we want to move on and

2
00:00:03.578 --> 00:00:07.230
we want to create some handlers for
our users.

3
00:00:07.230 --> 00:00:09.509
So the first thing we need
to do is create a folder for

4
00:00:09.509 --> 00:00:10.951
handlers inside of the source.

5
00:00:10.951 --> 00:00:12.949
And then we'll make one for user Ts and

6
00:00:12.949 --> 00:00:17.020
that's where we're gonna put our
handlers for our user, so let's do that.

7
00:00:19.410 --> 00:00:24.410
Source, new folder, handlers and

8
00:00:24.410 --> 00:00:28.249
inside of their user.ts.

9
00:00:34.024 --> 00:00:38.245
Now we're actually gonna
start using the Prisma SDK or

10
00:00:38.245 --> 00:00:42.840
M thing that we installed a while ago,
we're gonna use it.

11
00:00:44.070 --> 00:00:48.062
But before that I wanna make
another helper file, so

12
00:00:48.062 --> 00:00:53.790
we don't have to keep creating a new
Prisma client every time we wanna use.

13
00:00:53.790 --> 00:00:57.700
I'm just gonna make it once in one file
and import that file wherever we want.

14
00:00:57.700 --> 00:01:03.045
So I'm just gonna make a new file on
source I'm going to call it db.ts.

15
00:01:06.295 --> 00:01:07.420
And it's going to import.

16
00:01:12.014 --> 00:01:19.572
So import from
@prisma/client like that and

17
00:01:19.572 --> 00:01:27.740
I think we wanna import,
what is it Prisma?

18
00:01:27.740 --> 00:01:30.050
Maybe it's just client.

19
00:01:30.050 --> 00:01:31.189
Why am I why do I have a stringer?

20
00:01:31.189 --> 00:01:34.170
Maybe it's just clients.

21
00:01:34.170 --> 00:01:34.760
Actually, what is it?

22
00:01:34.760 --> 00:01:40.470
Let's see, it's like that I knew something
weird, okay all caps stuff always gets me.

23
00:01:40.470 --> 00:01:42.829
So we're gonna import it like this,

24
00:01:42.829 --> 00:01:47.016
we're just gonna D structure
PrismaClient capital P capital C,

25
00:01:47.016 --> 00:01:51.750
D structure or named import,
that's technically what that's called.

26
00:01:52.800 --> 00:01:57.051
And then I'm just gonna make
a new client const I'll just

27
00:01:57.051 --> 00:02:01.490
call it prisma = new PrismaClient
like that, no options.

28
00:02:02.680 --> 00:02:06.890
And I'll just say exports default prisma.

29
00:02:09.009 --> 00:02:13.776
I'm doing this in this file, so
I had to do this everywhere I need it,

30
00:02:13.776 --> 00:02:14.938
I had it at once.

31
00:02:14.938 --> 00:02:20.040
And you could put that db file wherever
you want I'm just putting on a source.

32
00:02:20.040 --> 00:02:21.301
I guess more appropriately,

33
00:02:21.301 --> 00:02:23.924
it would make sense to put it in
a modules folder of like DVS is so

34
00:02:23.924 --> 00:02:27.710
important that it should just be on
the root with the rest of the root stuff.

35
00:02:27.710 --> 00:02:31.883
Cuz it's just that important but you don't
have to you can put it wherever you want.

36
00:02:36.900 --> 00:02:42.837
Okay, now going back into users,

37
00:02:42.837 --> 00:02:49.404
I can import prisma from db like that.

38
00:02:49.404 --> 00:02:51.726
Okay, everybody follow me so far?

39
00:02:51.726 --> 00:02:55.981
And then now what I wanna do
is I wanna create a function

40
00:02:55.981 --> 00:03:00.142
that allows me to create a user,
and we'll also make

41
00:03:00.142 --> 00:03:05.730
a function that allows me to like sign in,
so let's do that.

42
00:03:05.730 --> 00:03:10.269
So to create a user,
this is going to be a handler for a route,

43
00:03:10.269 --> 00:03:12.230
handlers have a request.

44
00:03:12.230 --> 00:03:16.106
They have a response, so
I'm gonna say exports, oops.

45
00:03:19.253 --> 00:03:27.080
Const createNew User = a function that has
a request and a response as an object.

46
00:03:27.080 --> 00:03:28.669
Because all handlers do,

47
00:03:28.669 --> 00:03:32.560
this is gonna be async cuz we
have to do some database stuff.

48
00:03:32.560 --> 00:03:37.046
All database queries are always async
because talking to a disc is asynchronous,

49
00:03:37.046 --> 00:03:40.380
just like talking to
a network is asynchronous.

50
00:03:40.380 --> 00:03:43.660
The protocol in which a disc
operates on is asynchronous and

51
00:03:43.660 --> 00:03:45.442
most databases are server too.

52
00:03:45.442 --> 00:03:48.191
Which means not only
are you talking to a disk,

53
00:03:48.191 --> 00:03:52.290
you're talking to a network
that's talking to the disk.

54
00:03:52.290 --> 00:03:56.279
So you have service database, you're
talking to the network that's talking to

55
00:03:56.279 --> 00:03:58.340
the network that's talking to the disk.

56
00:03:58.340 --> 00:04:02.410
So all that's asynchronous, so
it's not like querying an array in memory.

57
00:04:04.430 --> 00:04:08.900
All right so let us create a new user,
so what does a user need to be created?

58
00:04:08.900 --> 00:04:14.892
Well we can do this so you can say const
user equals a weight, prisma dot and

59
00:04:14.892 --> 00:04:20.540
when you hit dot you can see that
it already knows about a user.

60
00:04:20.540 --> 00:04:24.451
Because this Prisma SDK is aware of all
the models that we already created, and

61
00:04:24.451 --> 00:04:26.950
we created one called user,
so it's aware of it.

62
00:04:26.950 --> 00:04:31.796
So, I can say user.create,
I can call that, I can get an object and

63
00:04:31.796 --> 00:04:35.204
I can give it a data
property which is an object.

64
00:04:35.204 --> 00:04:39.500
So, like that and then, you can see
this data properties lighting up.

65
00:04:39.500 --> 00:04:44.185
This is like a you need to pass
some stuff to create a user that

66
00:04:44.185 --> 00:04:47.950
you're not passing so
yeah this isn't right.

67
00:04:47.950 --> 00:04:50.962
So I know that a user has a username and

68
00:04:50.962 --> 00:04:54.860
you can see I start typing
it fills it out for me.

69
00:04:55.910 --> 00:04:57.992
It's like yeah,
you just have a username, cool.

70
00:05:00.232 --> 00:05:01.177
But where do I get this username from?

71
00:05:10.180 --> 00:05:14.071
Where
&gt;&gt; Whatever we have received the token DWT

72
00:05:14.071 --> 00:05:17.398
token claims
&gt;&gt; So for create new user,

73
00:05:17.398 --> 00:05:23.320
there is no token necessary cuz
this is gonna issue with the token.

74
00:05:24.590 --> 00:05:26.600
Yeah, but
where do I get the username from?

75
00:05:28.380 --> 00:05:32.600
&gt;&gt; Chats suggesting the request.object,

76
00:05:32.600 --> 00:05:36.225
request.body, request.user.

77
00:05:36.225 --> 00:05:41.698
&gt;&gt; Yes, request.body, so create new
user is going to be a post request and

78
00:05:41.698 --> 00:05:46.650
because we're creating something,
so it's a post.

79
00:05:46.650 --> 00:05:48.991
Most POST requests send
something to the server,

80
00:05:48.991 --> 00:05:52.650
typically that's attached to
something called the body.

81
00:05:52.650 --> 00:05:57.842
So as the author of the server,
we're saying you

82
00:05:57.842 --> 00:06:05.199
client must send us something called
username attached to the body.

83
00:06:05.199 --> 00:06:09.960
Otherwise this isn't gonna work and we're
saying that by writing the code for it

84
00:06:09.960 --> 00:06:14.808
we're assuming that so it's like username
is gonna be req dot body dot username

85
00:06:19.845 --> 00:06:23.265
Okay, what about the password,
where does that come from?

86
00:06:24.725 --> 00:06:25.869
It's not a trick question.

87
00:06:30.085 --> 00:06:31.945
&gt;&gt; Same place request
dot body dot password.

88
00:06:31.945 --> 00:06:35.802
&gt;&gt; Exactly,
request dot body dot password, yeah but

89
00:06:35.802 --> 00:06:40.385
wait we don't wanna store a plain text,
password, right?

90
00:06:40.385 --> 00:06:42.780
We almost fell into that trap
that's not what we wanna do.

91
00:06:42.780 --> 00:06:47.846
So what we wanna do instead is we wanna
use our hash password function that

92
00:06:47.846 --> 00:06:53.842
we had, so hash password takes in that but
it's asynchronous so I'm gonna await it.

93
00:06:53.842 --> 00:06:57.646
But you didn't know you can
await like that on the property?

94
00:06:57.646 --> 00:07:02.760
Yeah, you can that's pretty cool,
and you probably shouldn't,

95
00:07:02.760 --> 00:07:07.530
but we're gonna handle errors later,
so it doesn't matter.

96
00:07:07.530 --> 00:07:10.690
Okay, so now we have username,
we have our hashPassword.

97
00:07:10.690 --> 00:07:13.201
This satisfies all the requests
of creating a user,

98
00:07:13.201 --> 00:07:16.950
I know that because it's not complaining
at me, and I can just check myself.

99
00:07:16.950 --> 00:07:19.633
I know look at the schema and

100
00:07:19.633 --> 00:07:25.710
what are the required fields
here that don't have defaults?

101
00:07:26.740 --> 00:07:31.699
ID has a default is required,
created at has a default is required,

102
00:07:31.699 --> 00:07:37.016
username is required but doesn't have
a default, so I gotta pass that.

103
00:07:37.016 --> 00:07:40.127
Password is also required,
there's no question mark here, and

104
00:07:40.127 --> 00:07:42.569
it doesn't have a default,
so I have to pass that.

105
00:07:42.569 --> 00:07:46.212
Products, there's no question mark on it,
but it's an array type,

106
00:07:46.212 --> 00:07:50.220
so that means it's an empty array,
which is fine, it can be an empty array.

107
00:07:50.220 --> 00:07:55.009
So that means I have to pass in these
two so that's how I know I'm good.

108
00:07:55.009 --> 00:08:00.031
These get defaulted and this one is just
an empty array with nothing in it so

109
00:08:00.031 --> 00:08:03.921
that's how you know, so
cool we got that we got our user.

110
00:08:03.921 --> 00:08:08.773
Now we can create a token so
I can say token equals create,

111
00:08:10.320 --> 00:08:16.577
JWT and I could pass on our user and now
I could to say res.json, I'll say token,

112
00:08:16.577 --> 00:08:21.744
I'll just say token, there you go
you're gonna get back a token.

113
00:08:26.848 --> 00:08:30.967
And me doing this shortcut like this,
if you haven't seen this before,

114
00:08:30.967 --> 00:08:34.475
this is the equivalent
of the same token token.

115
00:08:34.475 --> 00:08:37.361
But that's so redundant,
I'm just gonna write it once.

