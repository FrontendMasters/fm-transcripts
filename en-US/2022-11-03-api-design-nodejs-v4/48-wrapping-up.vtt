WEBVTT

1
00:00:00.300 --> 00:00:04.941
Then really, what's left is,
just to tell you, congrats for

2
00:00:04.941 --> 00:00:07.226
sticking through the course.

3
00:00:07.226 --> 00:00:10.471
And asking really good questions.

4
00:00:10.471 --> 00:00:14.962
And challenging me to level up while I'm
teaching, which I feel like I did, so

5
00:00:14.962 --> 00:00:16.131
thank you for that.

6
00:00:16.131 --> 00:00:21.182
But also just to let you know
that this was just a foundational

7
00:00:21.182 --> 00:00:25.660
course of how to build an API
with Node and Express.

8
00:00:25.660 --> 00:00:28.860
And there's just still so much more for
all of us to learn, even me.

9
00:00:30.100 --> 00:00:32.800
People show me stuff or
I'll get on GitHub or Hacker News and

10
00:00:32.800 --> 00:00:34.373
I'll see something like, what?

11
00:00:34.373 --> 00:00:36.172
I didn't even know that was a thing.

12
00:00:36.172 --> 00:00:37.184
I didn't know that you can even do that.

13
00:00:37.184 --> 00:00:39.424
That's so amazing.

14
00:00:39.424 --> 00:00:40.909
So there's still so much to learn.

15
00:00:40.909 --> 00:00:44.579
But now that you have that foundation,
you have the context, which for

16
00:00:44.579 --> 00:00:46.121
me is super critical to have.

17
00:00:46.121 --> 00:00:48.451
Because if you have the context,
you can ask the questions,

18
00:00:48.451 --> 00:00:50.288
you know what to look for,
you know what to ask.

19
00:00:50.288 --> 00:00:55.396
So, what I would say is next time you
go reach for a backend as a service

20
00:00:55.396 --> 00:01:00.945
like Superbass or Firebase or any
backend service that you typically use,

21
00:01:00.945 --> 00:01:06.470
don't, challenge yourself and
build the API out yourself.

22
00:01:06.470 --> 00:01:07.960
Do that until you're so

23
00:01:07.960 --> 00:01:13.080
bored with building API's that you wanna
go back to using a service, right?

24
00:01:13.080 --> 00:01:15.049
Not because you don't know
how to build API, but

25
00:01:15.049 --> 00:01:18.329
because you just don't feel like doing
it because you've done it so many times.

26
00:01:18.329 --> 00:01:20.324
That's when you go back and
use those things, right?

27
00:01:20.324 --> 00:01:22.533
So I challenge you to do that.

28
00:01:22.533 --> 00:01:24.790
There's more to API's.

29
00:01:24.790 --> 00:01:29.254
We've just talked about things
like JSON and stuff like that, but

30
00:01:29.254 --> 00:01:33.559
API's can have image uploads,
they can have background jobs,

31
00:01:33.559 --> 00:01:36.285
they can do pretty crazy stuff, right?

32
00:01:36.285 --> 00:01:41.368
You can also use different
types of design patterns for

33
00:01:41.368 --> 00:01:46.575
API's like Graph QL, TRPC,
we talked about that one.

34
00:01:46.575 --> 00:01:50.135
So challenge yourself,
go try those different things.

35
00:01:50.135 --> 00:01:53.695
Maybe try Prisma will Mongo next time and
see what that looks like.

36
00:01:53.695 --> 00:01:56.764
Just go through the flow and
work through those problems.

37
00:01:56.764 --> 00:02:00.157
Something that I used to do is
I used to go on Dribbble, and

38
00:02:00.157 --> 00:02:04.712
I don't if you've ever been on Dribbble
before, let me show you Dribbble.

39
00:02:04.712 --> 00:02:06.117
So Dribbble with three B's.

40
00:02:06.117 --> 00:02:11.730
I just go and Dribbble and
I would type in, to do app.

41
00:02:15.036 --> 00:02:20.687
And I would just find to do apps
that were probably a little

42
00:02:20.687 --> 00:02:25.654
outside of my ability, and
I would try to make it.

43
00:02:25.654 --> 00:02:29.142
I would literally just, I would click on
this, all right, I'm gonna make this.

44
00:02:29.142 --> 00:02:30.909
And I would do all the front end work,

45
00:02:30.909 --> 00:02:33.593
and then I will do all the backend
work to make this work.

46
00:02:33.593 --> 00:02:36.746
And I would give myself a week or
two just to see how far I can get.

47
00:02:36.746 --> 00:02:38.841
I've probably done 20 of
these in my early days,

48
00:02:38.841 --> 00:02:42.170
just getting really good at making these
apps and building out the APIs for them.

49
00:02:42.170 --> 00:02:46.137
It's something that's never gonna scale
and need to support thousands of users,

50
00:02:46.137 --> 00:02:49.779
but you will go through enough of the
parts that you know enough of what to do.

51
00:02:49.779 --> 00:02:52.654
And it does show in interviews and
things like that.

52
00:02:52.654 --> 00:02:56.083
It gives you the experience,
so it was pretty fun too.

53
00:02:56.083 --> 00:02:57.614
So that's something that I would do.

54
00:02:57.614 --> 00:03:01.283
But yeah, for the most part,
you did it, you know Node,

55
00:03:01.283 --> 00:03:05.400
you know Express at this point,
you have enough context.

56
00:03:05.400 --> 00:03:08.636
So from here on out, you just gotta keep
building more and develop that experience,

57
00:03:08.636 --> 00:03:10.300
and then also teach other people.

58
00:03:10.300 --> 00:03:14.371
When you teach other people, that's when
you start to really solidify the things

59
00:03:14.371 --> 00:03:17.830
that were a little blurry before,
but now you're very sure.

60
00:03:17.830 --> 00:03:21.519
Because I can promise you that happened to
me over the last two days, I was, okay,

61
00:03:21.519 --> 00:03:22.491
now I get it, right?

62
00:03:22.491 --> 00:03:26.454
So trust me, that's definitely
what you wanna do and yeah,

63
00:03:26.454 --> 00:03:29.493
if there's any questions, now's the time.

64
00:03:30.960 --> 00:03:32.541
Yes.

65
00:03:32.541 --> 00:03:34.628
&gt;&gt; Just one general question.

66
00:03:34.628 --> 00:03:39.063
Are there any common design
architectures that are prevalent with

67
00:03:39.063 --> 00:03:44.510
building API's similar to a model
view controller architecture?

68
00:03:44.510 --> 00:03:47.180
&gt;&gt; Yeah, I mean,
a lot of that stuff is still around.

69
00:03:47.180 --> 00:03:50.569
I mean, I guess Express is its
own architecture in a way.

70
00:03:50.569 --> 00:03:53.774
If I had to name that it would be called,
I don't know,

71
00:03:53.774 --> 00:03:58.401
the Connect architecture I guess,
if I have to name expresses architecture.

72
00:03:58.401 --> 00:04:05.062
Yeah, I mean, so for instance,
Nest JS is a very popular,

73
00:04:05.062 --> 00:04:09.061
brand new, well not brand new, but

74
00:04:09.061 --> 00:04:14.552
relatively new server
framework that does MVC.

75
00:04:14.552 --> 00:04:16.634
It's type script, it's MVC.

76
00:04:16.634 --> 00:04:22.992
If you ever use Angular, it looks
exactly like Angular, but for a server.

77
00:04:22.992 --> 00:04:28.199
So I've actually never tried it
cuz I'm not into the whole MVC,

78
00:04:28.199 --> 00:04:30.520
it's just too heavy for me.

79
00:04:30.520 --> 00:04:33.820
But if you're into that,
if you come from a Java background or

80
00:04:33.820 --> 00:04:36.630
from Angular background,
you might like this.

81
00:04:36.630 --> 00:04:38.130
I mean, it's pretty cool.

82
00:04:38.130 --> 00:04:42.640
But for the most part,
what I've seen it's typically something

83
00:04:42.640 --> 00:04:46.662
hardcore MVC like this, or
it's just based off Express.

84
00:04:46.662 --> 00:04:51.919
It's just like a derivative of Express
at least in Node, from my experience.

85
00:04:51.919 --> 00:04:54.492
Okay well,
if you have any other questions,

86
00:04:54.492 --> 00:04:56.804
please feel free to hit me up on Twitter.

87
00:04:56.804 --> 00:04:59.392
I'm usually the most active on there.

88
00:04:59.392 --> 00:05:01.705
If you email me,
I'm sorry if I haven't gotten back to you.

89
00:05:01.705 --> 00:05:04.836
My email is drowning,
I don't know how I will get to it.

90
00:05:04.836 --> 00:05:09.431
But yeah, hit me up on Twitter, super
responsive on there, and yeah, thanks for

91
00:05:09.431 --> 00:05:10.573
taking the course.

92
00:05:10.573 --> 00:05:15.743
&gt;&gt; [APPLAUSE]

