WEBVTT

1
00:00:00.175 --> 00:00:00.814
Let's keep it going.

2
00:00:00.814 --> 00:00:07.331
Okay, so already kinda designed the schema
out, we talked about it a little bit,

3
00:00:07.331 --> 00:00:12.809
and there's a million ways we can go
with it, none of them are right or

4
00:00:12.809 --> 00:00:16.981
wrong, but
this is kinda the way that I designed it.

5
00:00:16.981 --> 00:00:22.410
But looking at the design, I feel like
there needs to be a product model,

6
00:00:22.410 --> 00:00:27.852
because I might have multiple products
that I wanna post updates about.

7
00:00:27.852 --> 00:00:31.246
So I think we need a product model, cuz
I'm a user, I'm working on this product,

8
00:00:31.246 --> 00:00:34.309
I'm working on that product,
they all have their own separate updates.

9
00:00:34.309 --> 00:00:37.335
So I feel like I need a product model to
keep track of those different products

10
00:00:37.335 --> 00:00:38.861
that I'm trying to show updates for.

11
00:00:38.861 --> 00:00:42.363
So that's what we're gonna do,
let's make our product model.

12
00:00:42.363 --> 00:00:46.912
So if we go back to our code here,

13
00:00:46.912 --> 00:00:52.142
I can say model Product, like this.

14
00:00:52.142 --> 00:00:54.650
And then product also has an ID, so

15
00:00:54.650 --> 00:00:58.811
I'm just gonna just steal from the user,
not a big deal.

16
00:00:58.811 --> 00:01:04.045
Same thing, it also has a createdAt,
I'm gonna take that too.

17
00:01:04.045 --> 00:01:08.447
And then products have a name,
which are gonna be String.

18
00:01:08.447 --> 00:01:14.145
If I wanna put a limit on the characters
of that, I can do something called db,

19
00:01:14.145 --> 00:01:18.459
If you ever use SQL,
you'll know what this is,VarChar.

20
00:01:18.459 --> 00:01:23.446
And I can say something like, I don't
know, whatever limit you want, 255,

21
00:01:23.446 --> 00:01:25.522
which is a very common number in SQL.

22
00:01:25.522 --> 00:01:30.685
It has to do with reaching the maximum
number of an eight bit piece of thing

23
00:01:30.685 --> 00:01:35.609
in memory for indexing, but
you put whatever you want if you want to.

24
00:01:35.609 --> 00:01:37.518
You don't actually have to put
anything if you don't want to.

25
00:01:37.518 --> 00:01:43.229
So I got the name, and
then I need a product to belong to a user.

26
00:01:43.229 --> 00:01:45.072
So I have to set up a relationship here.

27
00:01:45.072 --> 00:01:48.269
So the way that I'm gonna do that is,
one, thing about the relationship.

28
00:01:48.269 --> 00:01:51.034
Is it one-to-one,
one-to-many, many-to-many?

29
00:01:51.034 --> 00:01:53.152
Well, one user can have many products, but

30
00:01:53.152 --> 00:01:55.393
a product can't belong
to more than one user.

31
00:01:55.393 --> 00:01:58.453
So it's a one-to-many
relationship on the product side.

32
00:01:58.453 --> 00:02:01.242
So what I'm gonna say is, first,

33
00:02:01.242 --> 00:02:05.971
I need to define the field in
which the user is referenced.

34
00:02:05.971 --> 00:02:13.003
So I'll call this belongsToId.

35
00:02:13.003 --> 00:02:14.359
And it's gonna be type String.

36
00:02:14.359 --> 00:02:18.407
And the reason I see that is because
it's going to be the ID of the user and

37
00:02:18.407 --> 00:02:21.594
the user's ID is string, so
I think of it the same type.

38
00:02:21.594 --> 00:02:25.823
If the user's ID was number,
I would have to call this number, okay?

39
00:02:25.823 --> 00:02:30.812
And then to set the relationship up,
I'm gonna make another one called

40
00:02:30.812 --> 00:02:36.314
belongsTo ,not the ID part, and I can say
this is gonna be type User like that.

41
00:02:36.314 --> 00:02:38.742
So this is type User.

42
00:02:38.742 --> 00:02:41.952
And then for some attributes here,
I can say relation.

43
00:02:44.856 --> 00:02:50.336
And I can say fields, well, what fields in
this product schema holds the relation?

44
00:02:50.336 --> 00:02:52.112
It's the belongsToId.

45
00:02:54.531 --> 00:02:58.069
And then it's like, okay, cool, and

46
00:02:58.069 --> 00:03:03.550
then what fields on the user
does the belongToId reference?

47
00:03:03.550 --> 00:03:05.910
So I can say references.

48
00:03:05.910 --> 00:03:11.200
It references the ID field on the user.

49
00:03:11.200 --> 00:03:14.007
So just show you that again,
I can say belongs,

50
00:03:15.642 --> 00:03:19.974
To User type relation.

51
00:03:19.974 --> 00:03:25.098
I want the belongsToId to be the field on
a product that holds the relationship,

52
00:03:25.098 --> 00:03:27.940
and I want that to refer
to the ID on the user.

53
00:03:27.940 --> 00:03:31.375
And you'll see that still get this
squiggly, like something's still wrong.

54
00:03:31.375 --> 00:03:33.496
Yeah, we had to set the relationship
on the other side as well.

55
00:03:33.496 --> 00:03:38.490
So we could do that manually, or
if you just go to your terminal,

56
00:03:38.490 --> 00:03:44.601
you can just type out npx prisma format,
like this, and it'll fix it for you.

57
00:03:50.413 --> 00:03:55.739
And what that does is, wait,
I didn't save mine, that sucks.

58
00:03:55.739 --> 00:03:57.535
Let me override it right quick.

59
00:03:57.535 --> 00:03:59.888
Let me try that again.

60
00:03:59.888 --> 00:04:00.407
There we go.

61
00:04:00.407 --> 00:04:06.429
And what that does is you can see that
it added the product onto the user for

62
00:04:06.429 --> 00:04:11.585
us as a mini, cuz it's an array,
it's an array of products.

63
00:04:11.585 --> 00:04:15.500
I don't wanna call it product with a
capital P, so I'm just gonna say products.

64
00:04:15.500 --> 00:04:17.051
I'm gonna pluralize it,
so that's products.

65
00:04:17.051 --> 00:04:20.859
I can change the name of it there
on the left if I don't like it, but

66
00:04:20.859 --> 00:04:23.375
this still has to be
product with an array.

67
00:04:23.375 --> 00:04:29.823
&gt;&gt; Could you explain the difference
between ID and unique?

68
00:04:29.823 --> 00:04:33.991
&gt;&gt; Yes, so the difference between ID and

69
00:04:33.991 --> 00:04:38.556
unique is that you can have more than one.

70
00:04:38.556 --> 00:04:40.827
IDs are also unique.

71
00:04:40.827 --> 00:04:45.867
And you can have more than
one unique field on a model,

72
00:04:45.867 --> 00:04:49.342
but you can't have more than one ID.

73
00:04:49.342 --> 00:04:53.859
And IDs, you could think of it as
the primary, I guess you could think about

74
00:04:53.859 --> 00:04:58.248
it like, I don't know, there might
be a lot of unique things about you.

75
00:04:58.248 --> 00:05:02.809
But the thing that's guaranteed to always
be unique globally is gonna be your

76
00:05:02.809 --> 00:05:04.855
Social Security number, right?

77
00:05:04.855 --> 00:05:07.845
So ID is just basically saying,

78
00:05:07.845 --> 00:05:12.729
this is the primary unique thing for
this instance.

79
00:05:12.729 --> 00:05:17.494
And that's special because a database
is doing optimizations on how it stores

80
00:05:17.494 --> 00:05:22.185
indexes, and it's going to prioritize
things like IDs over other things for

81
00:05:22.185 --> 00:05:23.646
performance reasons.

82
00:05:23.646 --> 00:05:27.398
So it's just an indicator to let
the database know that I need you to

83
00:05:27.398 --> 00:05:29.879
prioritize this when it comes to querying.

84
00:05:29.879 --> 00:05:31.529
It's a performance thing.

85
00:05:31.529 --> 00:05:36.800
&gt;&gt; Are we able to make two references
to the same model from another one?

86
00:05:36.800 --> 00:05:38.312
&gt;&gt; Two references to the same model?

87
00:05:38.312 --> 00:05:41.468
Yeah, you could totally make two
references to the same model as long as

88
00:05:41.468 --> 00:05:43.797
the other reference exist
on the other side as well.

89
00:05:43.797 --> 00:05:44.965
So yeah, there's nothing stopping you.

90
00:05:44.965 --> 00:05:46.740
They just obviously
can't be named the same.

