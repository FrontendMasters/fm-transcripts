WEBVTT

1
00:00:00.320 --> 00:00:03.240
Like I said, this only works for
synchronous errors.

2
00:00:03.240 --> 00:00:05.900
What happens if we have
an asynchronous error?

3
00:00:07.220 --> 00:00:08.790
What does express catch that?

4
00:00:10.080 --> 00:00:10.860
I don't know.

5
00:00:10.860 --> 00:00:12.810
Let's figure it out.

6
00:00:12.810 --> 00:00:14.060
Let's make something asynchronous.

7
00:00:14.060 --> 00:00:19.780
So I'm going to do a, what's the quickest
asynchronous thing I can do?

8
00:00:19.780 --> 00:00:22.651
I guess I'll just do like a set timeout or
something, I guess.

9
00:00:22.651 --> 00:00:27.958
So I'll just say setTimeout for
like, one millisecond,

10
00:00:27.958 --> 00:00:31.650
and then I'll just say throw new error.

11
00:00:34.490 --> 00:00:36.737
So let's see what happens if
we if we try to run this.

12
00:00:36.737 --> 00:00:40.070
I don't actually know if it's gonna catch
that set timeout or not, let's see.

13
00:00:40.070 --> 00:00:46.580
Well, we definitely didn't get
back what we got last time.

14
00:00:46.580 --> 00:00:48.732
So that's for sure.

15
00:00:48.732 --> 00:00:50.580
Look, our server crashed.

16
00:00:50.580 --> 00:00:56.510
So Express doesn't know how to handle
asynchronous errors because it can't.

17
00:00:56.510 --> 00:00:58.810
That's just how JavaScript works.

18
00:00:58.810 --> 00:01:04.880
Asynchronous things are happening, like
in the future in a different call stack.

19
00:01:04.880 --> 00:01:09.640
Express has already bottomed out, that
execution call stack has already happened.

20
00:01:09.640 --> 00:01:12.180
And there were no errors in
that execution call stack.

21
00:01:12.180 --> 00:01:16.688
And then one millisecond later our set
timeout happened and an error was thrown.

22
00:01:16.688 --> 00:01:20.952
But by then, Express had that
stack had already vanished, so

23
00:01:20.952 --> 00:01:22.765
there was nothing there.

24
00:01:22.765 --> 00:01:25.607
In order to trigger your error handler for

25
00:01:25.607 --> 00:01:30.070
asynchronous stuff,
you have to handle it yourself.

26
00:01:30.070 --> 00:01:31.320
There's no way around it.

27
00:01:31.320 --> 00:01:34.683
You have to be diligent about like,
there's gonna be potential error here for

28
00:01:34.683 --> 00:01:36.620
this asynchronous code.

29
00:01:36.620 --> 00:01:40.100
And then you can tell Express
that an error happened.

30
00:01:40.100 --> 00:01:42.210
And then you can tap into your middleware.

31
00:01:42.210 --> 00:01:45.609
So let's try that,
what do I mean by telling Express?

32
00:01:45.609 --> 00:01:49.955
Well if I knew there was
gonna be an error here,

33
00:01:49.955 --> 00:01:57.096
what I can do instead of throwing it,
I could introduce next into a handler.

34
00:01:57.096 --> 00:01:59.977
I know before I said
handlers don't use next.

35
00:01:59.977 --> 00:02:03.730
I lied, they do,
only when they have to pass an error.

36
00:02:05.370 --> 00:02:09.668
That is it,
because before you had an error handler,

37
00:02:09.668 --> 00:02:15.770
nothing was next after a handler,
it was the final destination of a route.

38
00:02:15.770 --> 00:02:17.620
Nothing came after a handler.

39
00:02:17.620 --> 00:02:21.120
Well, error handlers come after
handlers now, so you can call next.

40
00:02:22.660 --> 00:02:27.713
And the trick is, if you pass anything
to next, it treats it like an error.

41
00:02:31.079 --> 00:02:33.835
Doesn't matter what you pass in there,
it's gonna be an error.

42
00:02:33.835 --> 00:02:35.555
So I'm going to put an error in there.

43
00:02:36.915 --> 00:02:41.745
Okay, now, this is going to tell
Express that I have an error which

44
00:02:41.745 --> 00:02:44.605
will then allow it to be accessed here.

45
00:02:45.835 --> 00:02:46.335
Okay, so let's try that.

46
00:02:51.865 --> 00:02:55.046
Aha, we're back in business, all right.

47
00:03:00.685 --> 00:03:03.580
So you just got to be a little more
diligent with asynchronous code.

48
00:03:05.740 --> 00:03:08.215
And as you know,
we have a ton of asynchronous code.

49
00:03:08.215 --> 00:03:12.618
[LAUGH] So imagine all the places in
which you have to think about an error

50
00:03:12.618 --> 00:03:15.246
happening, and then how to report that.

51
00:03:15.246 --> 00:03:17.059
It can get very tedious.

52
00:03:17.059 --> 00:03:20.827
So I guess we're calling
that error hello in that and

53
00:03:20.827 --> 00:03:25.709
then in our middle word there,
if we were to use a template literal,

54
00:03:25.709 --> 00:03:29.070
would we be able to show
that error in English?

55
00:03:29.070 --> 00:03:30.090
&gt;&gt; Yeah, you could do that.

56
00:03:30.090 --> 00:03:35.378
You could just be like had an error and

57
00:03:35.378 --> 00:03:39.480
you could say err.essage.

58
00:03:40.800 --> 00:03:44.003
Or error.to string they
both do the same but.

