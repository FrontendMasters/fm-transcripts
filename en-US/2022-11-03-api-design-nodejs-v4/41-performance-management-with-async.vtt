WEBVTT

1
00:00:00.000 --> 00:00:02.764
Let's keep it moving.

2
00:00:02.764 --> 00:00:05.274
Now what I want to talk about is
a little bit performance stuff.

3
00:00:05.274 --> 00:00:10.539
I want to talk about blocking code and
how dangerous this is in Express.

4
00:00:10.539 --> 00:00:16.070
So now that you all are pretty much good
at writing APIs and Express at this point.

5
00:00:16.070 --> 00:00:19.325
I'm gonna show you how to be great
at writing APIs and Express.

6
00:00:19.325 --> 00:00:22.323
And not have to make rookie mistakes.

7
00:00:22.323 --> 00:00:27.183
So, there's something called blocking code
and something called non blocking code.

8
00:00:27.183 --> 00:00:29.466
This actually has nothing
to do with Express but

9
00:00:29.466 --> 00:00:32.386
everything to do with JavaScript,
let's talk about that.

10
00:00:32.386 --> 00:00:38.457
So, I'm going to write my little
test file that always do.

11
00:00:38.457 --> 00:00:43.303
I'm gonna call this blocking.js,
this is just me

12
00:00:43.303 --> 00:00:48.605
scribbling on some code you
don't have to follow here.

13
00:00:48.605 --> 00:00:51.972
So let's talk about some blocking code,
what is blocking?

14
00:00:51.972 --> 00:00:56.594
Blocking code is like this,
this is blocking code.

15
00:01:00.580 --> 00:01:05.711
All right,
this code is blocking as JavaScript won't

16
00:01:05.711 --> 00:01:11.074
go to this next line until
this first line has completed.

17
00:01:11.074 --> 00:01:14.748
This is not an issue because creating
a variable is quick, it's easy.

18
00:01:14.748 --> 00:01:17.687
Java is not gonna struggle
with creating a variable.

19
00:01:17.687 --> 00:01:22.575
But if your blocking code was I
don't know, CPU intensive like some

20
00:01:22.575 --> 00:01:27.221
heavy math calculation like Fibonacci or
something like that.

21
00:01:27.221 --> 00:01:30.157
If Javas gonna have to wait on
that to go to the next line.

22
00:01:30.157 --> 00:01:34.998
Maybe it's also not a problem
because nothing else is waiting on.

23
00:01:34.998 --> 00:01:39.046
Nothing else is in line to be processed,
so maybe it's also not a big deal.

24
00:01:39.046 --> 00:01:42.632
But not take that concept and
apply it to a server, okay?

25
00:01:42.632 --> 00:01:45.810
You have some route that's
running a Fibonacci.

26
00:01:45.810 --> 00:01:49.787
That's gonna take, I don't know,
30 seconds plus on your MacBook.

27
00:01:49.787 --> 00:01:53.945
In the meantime,
you have 100 other requests coming in.

28
00:01:53.945 --> 00:01:57.404
How is JavaScript gonna process those
requests when it's too busy running your

29
00:01:57.404 --> 00:01:57.979
Fibonacci.

30
00:01:59.963 --> 00:02:01.628
Okay, now it's a problem.

31
00:02:01.628 --> 00:02:07.264
So blocking code can become
a problem in the context of having

32
00:02:07.264 --> 00:02:14.904
routes where you want to be able to handle
as many requests per second as possible.

33
00:02:14.904 --> 00:02:18.580
But now you can't because that
one request is taking too long.

34
00:02:18.580 --> 00:02:19.440
That's called blocking.

35
00:02:19.440 --> 00:02:22.175
So you don't wanna write blocking code.

36
00:02:22.175 --> 00:02:24.951
So, how do you write non blocking code?

37
00:02:24.951 --> 00:02:29.029
There's really only two ways in
JavaScript, or at least a node.

38
00:02:29.029 --> 00:02:32.004
One is to make it async, right?

39
00:02:32.004 --> 00:02:36.655
The way asynchronous code works, is that
it's scheduled to be done later, right?

40
00:02:36.655 --> 00:02:40.493
It's not gonna happen on the current
stack, it happens on a different stack.

41
00:02:40.493 --> 00:02:45.433
So if you could think about, well, what
if someone made a request to an API and

42
00:02:45.433 --> 00:02:46.965
that brand Fibonacci.

43
00:02:46.965 --> 00:02:51.537
But it ran an asynchronous version of
Fibonacci that is happening over here and

44
00:02:51.537 --> 00:02:53.488
is scheduled to complete later.

45
00:02:53.488 --> 00:02:58.603
Well, then JavaScript can continue
to ingest more requests and

46
00:02:58.603 --> 00:03:00.789
move forward with things.

47
00:03:00.789 --> 00:03:04.491
So you basically just wanna
make sure you're not doing CPU,

48
00:03:04.491 --> 00:03:06.677
intensive things synchronously.

49
00:03:06.677 --> 00:03:08.950
All right, and
we might be guilty of some of that.

50
00:03:08.950 --> 00:03:11.658
Let me see if we did anything synchronous.

51
00:03:11.658 --> 00:03:13.775
If we did, it would be the bcrypt stuff.

52
00:03:13.775 --> 00:03:15.424
Okay, now this is async.

53
00:03:15.424 --> 00:03:18.797
If we did the sync version of this,
this could be blocking.

54
00:03:18.797 --> 00:03:22.193
I mean, this also isn't gonna take long,
but it's still blocking.

55
00:03:22.193 --> 00:03:26.316
I don't know, maybe bcrypt decides it
wants, it takes ten seconds today.

56
00:03:26.316 --> 00:03:29.510
Within that ten seconds,
you had 20,000 requests come in.

57
00:03:29.510 --> 00:03:31.751
They're probably not gonna get processed.

58
00:03:31.751 --> 00:03:36.048
Or if so they'll get really processed very
slow, they won't just get blocked but

59
00:03:36.048 --> 00:03:38.242
they'll have to wait until this is done.

60
00:03:38.242 --> 00:03:41.827
Eventually you will run out of memory
where you can't hold on to all

61
00:03:41.827 --> 00:03:46.513
those be processing some requests will get
dropped if you're doing something crazy.

62
00:03:46.513 --> 00:03:50.252
So you wanna always use
the synchronous version of things.

63
00:03:50.252 --> 00:03:55.059
And I would say a common one that I see
people do all the time is file system

64
00:03:55.059 --> 00:03:55.631
stuff.

65
00:03:55.631 --> 00:04:00.290
They always do file, they wanna read the
file system, they do the file system sync.

66
00:04:00.290 --> 00:04:02.495
I have an example of it here.

67
00:04:02.495 --> 00:04:05.018
Do something like this right and
actually let's just run it,

68
00:04:05.018 --> 00:04:06.531
let me show what I'm talking about.

69
00:04:06.531 --> 00:04:13.724
So if I import file system,
I had to use require online.

70
00:04:13.724 --> 00:04:20.308
So, FS equals require a first.

71
00:04:20.308 --> 00:04:23.466
So if I import the file system's
gonna read the package.json,

72
00:04:25.437 --> 00:04:31.463
Which will be like process that.

73
00:04:31.463 --> 00:04:32.926
I gotta do a whole thing, I forgot.

74
00:04:32.926 --> 00:04:35.922
I haven't done this in so long.

75
00:04:35.922 --> 00:04:40.860
It'll be like path.join, process or

76
00:04:40.860 --> 00:04:46.552
it'll be their name, something like that.

77
00:04:46.552 --> 00:04:48.005
And then like, package.json.

78
00:04:51.145 --> 00:04:54.945
Okay, and then I can get the result.

79
00:04:54.945 --> 00:04:56.535
I think I haven't done that in so long.

80
00:04:56.535 --> 00:04:58.862
Let's find out.

81
00:04:58.862 --> 00:05:01.011
I'll call that blocking.

82
00:05:01.011 --> 00:05:06.699
Okay, so there we go, we got this
is a buffer version of the file but

83
00:05:06.699 --> 00:05:10.154
that's the file, system buffer firm or

84
00:05:10.154 --> 00:05:14.744
you can convert that to
a string if you want to, UTFA.

85
00:05:14.744 --> 00:05:16.085
There we go.

86
00:05:16.085 --> 00:05:19.032
So there's a package.json.

87
00:05:19.032 --> 00:05:23.223
That's blocking because check this out.

88
00:05:23.223 --> 00:05:28.140
This results didn't log or actually,
just doesn't make it more clear,

89
00:05:28.140 --> 00:05:30.059
I'll put another log here.

90
00:05:34.636 --> 00:05:35.979
Hi, if I put hi here.

91
00:05:39.014 --> 00:05:41.899
Actually this one, log first.

92
00:05:41.899 --> 00:05:42.985
I guess that's not blocking.

93
00:05:42.985 --> 00:05:48.237
[LAUGH] I don't know why they
didn't block, no way, I'm sorry.

94
00:05:48.237 --> 00:05:50.653
No, it did, I just had the result
come after, I'm stupid.

95
00:05:50.653 --> 00:05:51.879
No, it definitely did block.

96
00:05:51.879 --> 00:05:54.091
This is the result is logging after hi.

97
00:05:54.091 --> 00:05:58.571
So let me kind of switch that up there.

98
00:05:58.571 --> 00:06:03.579
But yeah,
that's blocking because this didn't

99
00:06:03.579 --> 00:06:08.472
actually log until this
was already processed.

100
00:06:08.472 --> 00:06:12.623
And we know it was already processed
because the result printed out and

101
00:06:12.623 --> 00:06:13.757
then high logged.

102
00:06:13.757 --> 00:06:19.275
Which means hi this log for hi wasn't able
to be processed until all this was done.

103
00:06:19.275 --> 00:06:20.850
And this was just a simple package.json.

104
00:06:20.850 --> 00:06:24.228
I don't know, imagine open up a CSV,
a gigabyte CSV.

105
00:06:24.228 --> 00:06:29.086
[LAUGH] And then tried to take in
more processes, it wouldn't work.

106
00:06:29.086 --> 00:06:31.630
Okay, so what you would wanna do,
is you would make this async.

107
00:06:31.630 --> 00:06:35.928
So I can say,
give me the promises version.

108
00:06:35.928 --> 00:06:38.634
And I want this to be, async.

109
00:06:38.634 --> 00:06:43.834
So I would say, read async,

110
00:06:43.834 --> 00:06:50.778
like this, I can go in here like that.

111
00:06:53.934 --> 00:06:57.334
And then I can say, read,
right, so now it's not blocking.

112
00:06:57.334 --> 00:07:04.026
So if I say, that it's a promise,
we didn't wait for it to come back.

113
00:07:04.026 --> 00:07:07.994
It just gave me back a promise that it
will come back, but in the meantime,

114
00:07:07.994 --> 00:07:09.348
it went on to hi, right?

115
00:07:09.348 --> 00:07:13.109
And then, whenever I want,
I can resolve that promise.

116
00:07:28.982 --> 00:07:31.287
I didn't return anything criminal.

117
00:07:42.835 --> 00:07:47.820
I don't know why they didn't
let me do the promise thing,

118
00:07:47.820 --> 00:07:54.040
maybe it's not [LAUGH] a promise thing,
let's see, okay, there we go.

119
00:07:54.040 --> 00:07:57.003
I just didn't like the way that
I did the non chanting syntax.

120
00:07:57.003 --> 00:08:01.984
So by using the promise version of it,
we can basically not

121
00:08:01.984 --> 00:08:06.978
have to wait until that's done and
we can just proceed on.

122
00:08:06.978 --> 00:08:10.137
So, basically using the async
stuff is the way you wanna go.

123
00:08:10.137 --> 00:08:14.292
You don't wanna be using synchronous
stuff inside a route handlers for

124
00:08:14.292 --> 00:08:15.684
CPU intensive things.

125
00:08:15.684 --> 00:08:19.792
That doesn't mean every line that you
write has to be inside of a promise.

126
00:08:19.792 --> 00:08:23.076
It's just like CPU intensive things,

127
00:08:23.076 --> 00:08:28.657
if you think of an algorithm that
is linear or quadratic in nature.

128
00:08:28.657 --> 00:08:32.770
Or I guess pretty much anything that's
probably gonna be slower than linear.

129
00:08:32.770 --> 00:08:41.099
And then it potentially has
ability to have a hi input.

130
00:08:41.099 --> 00:08:43.285
Yeah, you probably just
wanna be careful with that.

131
00:08:43.285 --> 00:08:47.123
This is not JavaScript, a cup of tea,
JavaScript is not a multi threaded, or

132
00:08:47.123 --> 00:08:49.190
node is in a multi threaded environment,

133
00:08:49.190 --> 00:08:52.221
a single threaded environment
only uses one of the threads.

134
00:08:52.221 --> 00:08:56.090
So your CPU by default,
you can tap into the other ones.

135
00:08:56.090 --> 00:08:57.688
But by default, no.

136
00:08:57.688 --> 00:08:58.628
So that's one way.

137
00:08:58.628 --> 00:09:00.845
The other way is to use a child process.

138
00:09:00.845 --> 00:09:05.228
So not sure if you ever heard of a child
process but a child process is basically,

139
00:09:05.228 --> 00:09:07.397
kinda like a web worker in the browser.

140
00:09:07.397 --> 00:09:09.121
It's actually literally the same thing.

141
00:09:09.121 --> 00:09:14.041
So you can spin up a different process
adjacent to this process in which your

142
00:09:14.041 --> 00:09:18.430
servers running in and you can tell
that process to go do this work.

143
00:09:18.430 --> 00:09:21.513
And that won't block the current process.

144
00:09:21.513 --> 00:09:25.754
But you only can do so many child process,
infinite amount of those.

145
00:09:25.754 --> 00:09:29.230
You can throw money at your server and
get more cores.

146
00:09:29.230 --> 00:09:31.312
But eventually you can't do all those,
right?

147
00:09:31.312 --> 00:09:35.318
So those are more for CPU intensive
things that you have control over and

148
00:09:35.318 --> 00:09:37.810
not something that
a user has control over.

149
00:09:37.810 --> 00:09:41.404
A user can use your API over and over and
over, really kicks off the child process.

150
00:09:41.404 --> 00:09:43.388
You probably don't hit
a limit really quick.

151
00:09:43.388 --> 00:09:46.072
But this is like, this is a cron
job that I run twice a day and

152
00:09:46.072 --> 00:09:47.507
I need to do it in the background.

153
00:09:47.507 --> 00:09:50.694
Yeah, that makes sense because that
most is gonna happen twice a day.

154
00:09:50.694 --> 00:09:52.394
So yeah, you could do that.

155
00:09:52.394 --> 00:09:56.116
But those are really the two ways
you wanna get past blocking code.

156
00:09:56.116 --> 00:09:59.921
So don't block code use promises.

157
00:09:59.921 --> 00:10:03.776
Next time one of your colleagues
submitted a pull request,

158
00:10:03.776 --> 00:10:06.022
tell them stop blocking the code.

