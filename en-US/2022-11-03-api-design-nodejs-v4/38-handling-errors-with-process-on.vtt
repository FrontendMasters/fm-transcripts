WEBVTT

1
00:00:00.570 --> 00:00:02.710
Okay, the last thing I want to show for
error handling.

2
00:00:04.030 --> 00:00:07.663
And I did put this on the slides because
actually it doesn't have anything to

3
00:00:07.663 --> 00:00:09.330
really do with API specifically.

4
00:00:10.560 --> 00:00:12.200
But has everything to do with node.

5
00:00:12.200 --> 00:00:14.107
So I want to talk about it, which is,

6
00:00:14.107 --> 00:00:16.825
we talked about handling
errors inside of express.

7
00:00:16.825 --> 00:00:21.010
What if you have an error outside of
Express but in node, not in handler.

8
00:00:21.010 --> 00:00:24.590
Well, it'll just break so you can try
catch it, if you just throw an error you

9
00:00:24.590 --> 00:00:27.526
saw it throw an error at the top of
that file I ran a file it broke.

10
00:00:27.526 --> 00:00:31.699
You can just try catch that but for an
asynchronous error that happens somewhere

11
00:00:31.699 --> 00:00:33.888
later in your app that's not an express.

12
00:00:33.888 --> 00:00:38.379
How do you handle that well,
you can get away with,

13
00:00:38.379 --> 00:00:41.834
you can use something called process.

14
00:00:41.834 --> 00:00:45.816
So it's a really good intuitive process
I'll make another file here called

15
00:00:45.816 --> 00:00:46.445
error Jas.

16
00:00:46.445 --> 00:00:51.493
I'm going to do a set timeout for like 300

17
00:00:51.493 --> 00:00:56.413
milliseconds and I went through an error.

18
00:01:01.934 --> 00:01:04.390
And I'm gonna say oops, okay?

19
00:01:04.390 --> 00:01:06.250
Throw that error and
I'm just gonna run this file.

20
00:01:06.250 --> 00:01:09.939
So let's see what happens.

21
00:01:09.939 --> 00:01:12.290
Node, error JS,
on three miliseconds and then boom.

22
00:01:12.290 --> 00:01:13.010
It says oops.

23
00:01:14.410 --> 00:01:17.616
Okay.

24
00:01:17.616 --> 00:01:19.853
We didn't handle the error
because a synchronous.

25
00:01:19.853 --> 00:01:21.448
But what you can do is you can tell,

26
00:01:21.448 --> 00:01:25.000
you can use this built in thing called
process that's built into node.

27
00:01:25.000 --> 00:01:29.556
And if you don't have any experience with
operating system level environmental

28
00:01:29.556 --> 00:01:31.500
languages like Node JS or Python.

29
00:01:31.500 --> 00:01:34.567
Anything that you can run
in the terminal basically,

30
00:01:34.567 --> 00:01:36.897
there's a thing called process right.

31
00:01:36.897 --> 00:01:41.213
Process is an object,
at least in JavaScript that

32
00:01:41.213 --> 00:01:46.261
represents this the current
process in which you're in.

33
00:01:46.261 --> 00:01:49.801
The file system, the current file,
all the variables,

34
00:01:49.801 --> 00:01:54.688
the secrets, every piece of metadata
associated with the process you are in.

35
00:01:54.688 --> 00:01:58.504
The hardware you're on,
the capabilities of that hardware,

36
00:01:58.504 --> 00:02:01.790
everything IP address, things like that.

37
00:02:01.790 --> 00:02:04.940
So the process object and
node has a bunch of stuff on it.

38
00:02:04.940 --> 00:02:08.040
I mean, if you just hit dot and
scroll through it.

39
00:02:09.400 --> 00:02:10.830
Yeah, I'm still scrolling.

40
00:02:10.830 --> 00:02:13.670
It's just like a infinite scroll.

41
00:02:13.670 --> 00:02:20.099
So, you can do process dot on or
on hand or

42
00:02:20.099 --> 00:02:26.721
process dot on then uncaught exception or

43
00:02:26.721 --> 00:02:30.520
unhandled rejection.

44
00:02:31.560 --> 00:02:34.777
So process that on is basically
an event handler so you can listen for

45
00:02:34.777 --> 00:02:36.410
certain things.

46
00:02:36.410 --> 00:02:42.660
Uncaught exception is like, there was an
error that was thrown that no one caught.

47
00:02:42.660 --> 00:02:46.997
I can handle it here.

48
00:02:46.997 --> 00:02:52.931
And then the same is true for
something asynchronous,

49
00:02:52.931 --> 00:02:56.673
I can say for uncaught rejection.

50
00:02:59.478 --> 00:03:01.874
Which is like an asynchronous
error is happening and

51
00:03:01.874 --> 00:03:03.620
I promise I can handle it here as well.

52
00:03:04.660 --> 00:03:09.550
So if something breaks,
sometimes you'll see an error.

53
00:03:09.550 --> 00:03:12.480
And note I'm like,
this errored it out unhandled rejection.

54
00:03:12.480 --> 00:03:13.380
I don't know what the error is.

55
00:03:13.380 --> 00:03:16.880
I just know that it did error because it's
asynchronous, I don't know what it is,

56
00:03:16.880 --> 00:03:18.290
but it broke.

57
00:03:18.290 --> 00:03:20.150
You would put this in your
app somewhere to catch it.

58
00:03:22.946 --> 00:03:25.588
Like at the top of your index file or
something like that,

59
00:03:25.588 --> 00:03:26.700
just to register this.

60
00:03:26.700 --> 00:03:29.160
And this has nothing to do with Express.

61
00:03:29.160 --> 00:03:31.490
This is just catching stuff and node.

