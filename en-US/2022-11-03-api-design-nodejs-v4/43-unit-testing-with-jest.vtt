WEBVTT

1
00:00:00.000 --> 00:00:01.990
Let's look at what a test is.

2
00:00:01.990 --> 00:00:04.362
So here's what it looks like.

3
00:00:04.362 --> 00:00:08.029
I'm actually just gonna walk through it
versus just trying to tell you what it is.

4
00:00:08.029 --> 00:00:11.355
So let's just make one.

5
00:00:11.355 --> 00:00:15.757
I'm going to go into our handlers.

6
00:00:15.757 --> 00:00:22.172
I'm gonna make a new folder, and
I'm gonna call it __tests__.

7
00:00:22.172 --> 00:00:23.683
Why did I call it that?

8
00:00:23.683 --> 00:00:27.070
That's one of the default folder
names that just it looks for, so

9
00:00:27.070 --> 00:00:28.000
I called it that.

10
00:00:28.000 --> 00:00:31.374
I think you can also just call it tests,
maybe even specs, so

11
00:00:31.374 --> 00:00:33.636
many different names that it looks for.

12
00:00:33.636 --> 00:00:36.571
I just don't remember which one you
have to tell it to versus which ones

13
00:00:36.571 --> 00:00:37.733
are the defaults anymore.

14
00:00:37.733 --> 00:00:40.454
I just know for sure that this is
a default one that it looks for, so

15
00:00:40.454 --> 00:00:41.407
I'm calling it that.

16
00:00:41.407 --> 00:00:45.544
You may also just wanna put all your tests
on the route somewhere and just have all

17
00:00:45.544 --> 00:00:49.522
your tests there versus having your
test live next to what you're testing.

18
00:00:49.522 --> 00:00:50.639
My mood changes a lot.

19
00:00:50.639 --> 00:00:54.307
Today, I feel like putting the test near
where the things that I'm testing, so

20
00:00:54.307 --> 00:00:56.403
I'll have to write long import statements.

21
00:00:56.403 --> 00:00:57.874
That's literally the only reason.

22
00:00:57.874 --> 00:01:00.287
[LAUGH] Otherwise,
I might put them all down here.

23
00:01:00.287 --> 00:01:04.256
I don't know, I just don't feel like
writing long dot, dot, slash, dot, dot,

24
00:01:04.256 --> 00:01:06.833
slash, dot, dot stuff today,
so I'm not doing it.

25
00:01:08.153 --> 00:01:11.324
Okay, so let's write a test for,
I don't know, users.

26
00:01:11.324 --> 00:01:11.935
Let's do that.

27
00:01:11.935 --> 00:01:17.623
So I'll say user.test.ts.

28
00:01:19.075 --> 00:01:20.603
Those icons are pretty dope.

29
00:01:20.603 --> 00:01:23.459
I like those icons.

30
00:01:23.459 --> 00:01:28.472
So in the flavor of,
did Mocha come before Jasmine?.

31
00:01:28.472 --> 00:01:30.344
It's been so long, I can't remember.

32
00:01:30.344 --> 00:01:32.808
I think Mocha came before for Jasmine.

33
00:01:32.808 --> 00:01:36.982
Maybe Jasmine before,
in the flavor of Mocha and Jasmine,

34
00:01:36.982 --> 00:01:41.234
Jest has adopted this really cool
syntax that we in the JavaScript

35
00:01:41.234 --> 00:01:44.739
community have come to love
when it comes to testing.

36
00:01:44.739 --> 00:01:46.476
And the way it looks is
something like this.

37
00:01:46.476 --> 00:01:50.476
So you can say describe, and
these will all be globals,

38
00:01:50.476 --> 00:01:56.283
because we're gonna be running the test
in the context of the jest environment.

39
00:01:56.283 --> 00:02:00.223
And that jest environment are going to
inject these functions that we're using

40
00:02:00.223 --> 00:02:00.822
globally.

41
00:02:00.822 --> 00:02:02.926
So don't have to import any of
this stuff that we're using.

42
00:02:02.926 --> 00:02:07.844
They're gonna be given to us at runtime,
they're gonna be injected into the code.

43
00:02:07.844 --> 00:02:11.576
So describe is just an organizational
function you can use to describe,

44
00:02:11.576 --> 00:02:14.941
I don't know, think of it like
the module that you're testing,

45
00:02:14.941 --> 00:02:16.919
maybe the file that you're testing.

46
00:02:16.919 --> 00:02:20.299
In this case,
we're testing the user handler, okay?

47
00:02:20.299 --> 00:02:25.484
So I'm gonna put that there, and
then I can give it a callback function.

48
00:02:25.484 --> 00:02:27.782
And then for each thing that I wanna test,

49
00:02:27.782 --> 00:02:31.536
I mean I can even add more describe
if I want to, but I don't have to.

50
00:02:31.536 --> 00:02:34.432
But for each thing that I wanna test,

51
00:02:34.432 --> 00:02:39.673
I can either do something called it,
not the clown, but the word.

52
00:02:39.673 --> 00:02:43.939
Or I can do something like test,
I'm just gonna say it.

53
00:02:43.939 --> 00:02:46.066
And the reason I say it
because it reads better.

54
00:02:46.066 --> 00:02:51.947
So usually, it goes something like this,
you can say,

55
00:02:51.947 --> 00:02:58.466
it( should do something when
something happens), right?

56
00:02:58.466 --> 00:03:00.970
You would put a description like that,
whatever it is,

57
00:03:00.970 --> 00:03:04.331
the thing that you're about the test
right now, the specific condition of

58
00:03:04.331 --> 00:03:07.231
what is it you're about to test,
that's what you would write.

59
00:03:07.231 --> 00:03:10.317
This doesn't functionally
change anything about the test.

60
00:03:10.317 --> 00:03:14.361
But when you visually see it in output,
you'll know what tests failed or

61
00:03:14.361 --> 00:03:18.158
what passed based off of these
descriptions and these blocks here.

62
00:03:18.158 --> 00:03:22.505
So try to actually put some
intention in those words.

63
00:03:22.505 --> 00:03:25.000
And you put a callback here.

64
00:03:25.000 --> 00:03:29.246
And then I can use this built-in
really cool function called expect.

65
00:03:29.246 --> 00:03:35.213
And I can write my assertions, I can say,

66
00:03:35.213 --> 00:03:38.889
I expect 1 to be 1, right?

67
00:03:38.889 --> 00:03:40.803
1 is 1, so this should pass.

68
00:03:40.803 --> 00:03:48.021
So now, To actually run this test,
we just need to tell just to do it.

69
00:03:48.021 --> 00:03:52.847
So I'm gonna go into, Package json.

70
00:03:52.847 --> 00:03:56.405
We got this test script here, I'm gonna
get rid of all of its contents, and

71
00:03:56.405 --> 00:03:57.435
I was gonna say jest.

72
00:04:05.318 --> 00:04:10.953
Okay, And

73
00:04:10.953 --> 00:04:17.203
then to run the test,
I can just say npm test.

74
00:04:17.203 --> 00:04:21.147
And just like that, jest went and
found the test because of the folder,

75
00:04:21.147 --> 00:04:22.605
that name that I created.

76
00:04:22.605 --> 00:04:25.432
You can see it's pointing
to the file here.

77
00:04:25.432 --> 00:04:28.139
User handler is what I put
in the describe block.

78
00:04:28.139 --> 00:04:30.965
So this is why I said it's just for
organizing.

79
00:04:30.965 --> 00:04:34.075
And then here is the actual
assertion that I ran.

80
00:04:34.075 --> 00:04:37.957
And the green check just means that it
passed, the word passed means I passed.

81
00:04:37.957 --> 00:04:40.700
And here are just more information
about all the tests I ran.

82
00:04:40.700 --> 00:04:42.890
I ran one test Suite.

83
00:04:42.890 --> 00:04:45.853
A suite is basically a describe block.

84
00:04:45.853 --> 00:04:50.794
And then each time there was
an it function, that's a test.

85
00:04:50.794 --> 00:04:54.177
So I ran one suite with one test,
and they all passed.

86
00:04:56.695 --> 00:05:01.396
Right, so an example of a failing
test would be something like, well,

87
00:05:01.396 --> 00:05:02.797
I expect that to be 2.

88
00:05:02.797 --> 00:05:07.504
Okay, well, that's not 2, that's 1 right?

89
00:05:07.504 --> 00:05:08.674
And it'll tell you,

90
00:05:08.674 --> 00:05:12.906
it'll say, user handler should do
something when something happens.

91
00:05:12.906 --> 00:05:16.939
We received this thing in red,
which was 1,

92
00:05:18.589 --> 00:05:21.771
But we expected it to be 2.

93
00:05:21.771 --> 00:05:26.379
So those things don't work,
1 is not 2, so it failed.

94
00:05:31.433 --> 00:05:33.521
Any questions on the unit test?

95
00:05:35.072 --> 00:05:39.282
&gt;&gt; So you just typed jest in the terminal?

96
00:05:39.282 --> 00:05:43.065
&gt;&gt; If you go to your terminal and type
in jest, you'll probably get an error,

97
00:05:43.065 --> 00:05:45.184
because-
&gt;&gt; So where did you do that?

98
00:05:45.184 --> 00:05:48.909
&gt;&gt; Yeah, good question, so actually,
this brings up a really good point.

99
00:05:48.909 --> 00:05:52.499
If you install a CLI
into your application,

100
00:05:52.499 --> 00:05:55.123
just like we did, just as a CLI.

101
00:05:55.123 --> 00:05:55.731
&gt;&gt; Okay.
&gt;&gt; But

102
00:05:55.731 --> 00:05:58.150
we installed it locally into our project.

103
00:05:58.150 --> 00:06:02.130
We didn't install it globally onto our
computer, so we can't actually just

104
00:06:02.130 --> 00:06:05.514
type in just like this,
because we didn't globally install it.

105
00:06:05.514 --> 00:06:09.933
We locally installed it, so we'd have to
do something like node_modules, right?

106
00:06:09.933 --> 00:06:12.680
We have to do that, I think I talked
about it earlier in the course.

107
00:06:12.680 --> 00:06:16.278
So if you wanna actually use it,
the package json is really smart.

108
00:06:16.278 --> 00:06:20.112
So I added it here in scripts test.

109
00:06:20.112 --> 00:06:23.288
And npm is actually
smart to know that like,

110
00:06:23.288 --> 00:06:27.006
if you have just installed
locally in here, which we do,

111
00:06:27.006 --> 00:06:31.744
it'll use the local one, but
if you don't, it'll use the global one.

112
00:06:31.744 --> 00:06:34.544
Whereas the terminal is not that smart,
your terminal is not gonna

113
00:06:34.544 --> 00:06:37.454
know that you have something called
jest installed in this project.

114
00:06:37.454 --> 00:06:40.356
It's actually looking on the root of
your computer for it, in the bin folder.

115
00:06:40.356 --> 00:06:44.298
So it won't work here,
unless you install it globally.

116
00:06:44.298 --> 00:06:48.318
So yeah, you can put it here and
then you can just say npm test.

117
00:06:52.741 --> 00:06:57.608
Fun fact, test and start are the only
commands in npm that you don't have to

118
00:06:57.608 --> 00:06:59.471
put the word run in front of.

119
00:07:01.479 --> 00:07:06.378
Every other command, you gotta put
npm run dev or npm run whatever, but

120
00:07:06.378 --> 00:07:10.391
not test and start,
you can just say npm test, npm start.

121
00:07:10.391 --> 00:07:12.890
I don't know, somebody made that up.

