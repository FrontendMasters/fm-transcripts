WEBVTT

1
00:00:00.100 --> 00:00:02.359
Earlier in the course was pretty cool.

2
00:00:02.359 --> 00:00:04.576
We walked through a bunch of stuff.

3
00:00:04.576 --> 00:00:08.554
One of the most exciting things I
think was interacting with Prisma.

4
00:00:08.554 --> 00:00:09.947
Which is a really powerful tool.

5
00:00:09.947 --> 00:00:13.563
And then even configuring
some of the authentication.

6
00:00:13.563 --> 00:00:17.832
Which is usually this mysterious thing
unless you've done it a few times.

7
00:00:17.832 --> 00:00:21.500
So I thought that was really cool,
even having done that many times.

8
00:00:21.500 --> 00:00:26.522
Every time I build authentication I'm
still just at all of the simplicity but

9
00:00:26.522 --> 00:00:29.314
also the effectiveness of how that works.

10
00:00:29.314 --> 00:00:30.580
It's really cool.

11
00:00:30.580 --> 00:00:35.716
And today we're just going to continue
on that, we're gonna keep going.

12
00:00:35.716 --> 00:00:37.029
We're gonna cool things.

13
00:00:37.029 --> 00:00:38.967
We're already in the rabbit hole.

14
00:00:38.967 --> 00:00:41.617
So let's keep digging.

15
00:00:41.617 --> 00:00:45.586
What we're gonna do next is we're going
to talk about the route handlers.

16
00:00:45.586 --> 00:00:50.735
So if you remember to go back to our
project right now, let me pull it up.

17
00:00:50.735 --> 00:00:52.764
Where am I at, here we go.

18
00:00:52.764 --> 00:00:56.154
We still don't have the route
handlers built out for

19
00:00:56.154 --> 00:00:58.552
the routes that we created, right?

20
00:00:58.552 --> 00:01:01.916
We have all these routes here for
product update,

21
00:01:01.916 --> 00:01:04.410
update point but no route handlers.

22
00:01:04.410 --> 00:01:06.322
We gonna fill that up and is a lot.

23
00:01:06.322 --> 00:01:07.929
So we will be doing that.

24
00:01:07.929 --> 00:01:09.765
I just wanna go over some tips and

25
00:01:09.765 --> 00:01:14.117
different things to think about as
we're building up this route handlers.

26
00:01:14.117 --> 00:01:18.806
Because we know how to create the database
a little bit because we did so

27
00:01:18.806 --> 00:01:20.722
in the users handlers here.

28
00:01:20.722 --> 00:01:22.825
So we'll talk about
that a little bit more.

29
00:01:22.825 --> 00:01:27.316
And then we will also talk about
how to deal with user input.

30
00:01:27.316 --> 00:01:30.025
Because when you are dealing
with user input and

31
00:01:30.025 --> 00:01:34.234
any application where there is
it's always gonna be dangerous.

32
00:01:34.234 --> 00:01:38.650
So let's talk about that.

33
00:01:38.650 --> 00:01:42.448
So we head over to the site
that we have been using.

34
00:01:42.448 --> 00:01:46.387
We have this one we are on eight,
route handlers.

35
00:01:46.387 --> 00:01:48.718
And we are gonna talk
about validating inputs.

36
00:01:48.718 --> 00:01:55.781
So basically,
TLDR never trusts the user, okay?

37
00:01:55.781 --> 00:01:57.967
You ever heard of SQL Injection?

38
00:01:57.967 --> 00:02:00.039
Okay, that's what happens
when you trust the user.

39
00:02:00.039 --> 00:02:05.025
It's part of building a CRUD application,
Create, Read,

40
00:02:05.025 --> 00:02:10.616
Update, Destroy is that you want
users to be able to create things.

41
00:02:10.616 --> 00:02:12.324
You want them to be able to update things.

42
00:02:12.324 --> 00:02:16.159
And the only way that they can do that is
if you allow them to give you the options

43
00:02:16.159 --> 00:02:18.822
on what they wanna create and
what they wanna update.

44
00:02:18.822 --> 00:02:21.516
So they have to provide
you some type of input.

45
00:02:21.516 --> 00:02:25.999
And that can be dangerous because
depending on how you develop your system.

46
00:02:25.999 --> 00:02:30.298
Typically if you develop it with
a lot of assumptions as you assumed

47
00:02:30.298 --> 00:02:32.157
everything would go right.

48
00:02:32.157 --> 00:02:36.441
Your app gonna break because it will go,
wrong cuz people it's not like the whole

49
00:02:36.441 --> 00:02:39.343
world was over your shoulder
watching you build this.

50
00:02:39.343 --> 00:02:41.656
To know exactly how you API works.

51
00:02:41.656 --> 00:02:45.257
Things are gonna go wrong even if you
build the kind that the user gonna

52
00:02:45.257 --> 00:02:46.136
interact with.

53
00:02:46.136 --> 00:02:49.924
And the client understand the use of the
rules of the API it will probably still

54
00:02:49.924 --> 00:02:50.456
go wrong.

55
00:02:50.456 --> 00:02:52.200
Because it just complicated.

56
00:02:52.200 --> 00:02:54.201
So at the end of the day,
you can't really trust the user.

57
00:02:54.201 --> 00:02:56.052
So just like on the front end,

58
00:02:56.052 --> 00:02:59.991
you might do some form validation
before a user submits a form.

59
00:02:59.991 --> 00:03:02.811
Okay, we do the same
thing on the back end for

60
00:03:02.811 --> 00:03:07.322
validating the input before we start
interacting with the database.

61
00:03:07.322 --> 00:03:15.345
Because if you, for instance let's say you
allowed someone to change their username.

62
00:03:15.345 --> 00:03:19.841
But you didn't validate whether or
not this is the right user.

63
00:03:19.841 --> 00:03:21.745
Okay, whose username are they changing?

64
00:03:21.745 --> 00:03:25.454
Anybody users, if I just have the ID
of a user cannot change their username?

65
00:03:25.454 --> 00:03:26.240
How does that work?

66
00:03:26.240 --> 00:03:27.881
So this is a lot of
stuff that goes into it.

67
00:03:27.881 --> 00:03:30.803
And you can't really trust the user So

68
00:03:30.803 --> 00:03:35.745
we're gonna make sure that we
don't by validating our inputs.

69
00:03:35.745 --> 00:03:41.244
No what HTTP methods are we gonna use that

70
00:03:41.244 --> 00:03:46.268
allow someone to send something up?

71
00:03:46.268 --> 00:03:48.651
So we know get as for getting stuff.

72
00:03:48.651 --> 00:03:50.011
&gt;&gt; Chat says post.

73
00:03:50.011 --> 00:03:53.417
&gt;&gt; Post for creating things, so
yeah user probably sent something out.

74
00:03:53.417 --> 00:03:56.673
So we want the user input
validation on post requests.

75
00:03:56.673 --> 00:04:00.360
What about any other methods in which
a user might send something up?

76
00:04:00.360 --> 00:04:02.240
&gt;&gt; A put.

77
00:04:02.240 --> 00:04:04.059
&gt;&gt; A put exactly where
they update something.

78
00:04:04.059 --> 00:04:08.729
So yeah we wanna validate the inputs
on all of the puts and the posts.

79
00:04:08.729 --> 00:04:10.566
So that's what we're gonna do.

80
00:04:10.566 --> 00:04:11.757
So what does that look like?

81
00:04:11.757 --> 00:04:12.858
There's a lot of ways.

82
00:04:12.858 --> 00:04:16.733
There's many,
many ways to validate inputs.

83
00:04:16.733 --> 00:04:20.274
You don't really need a library or
a framework or anything like that.

84
00:04:20.274 --> 00:04:22.915
I guess technically you
don't really need express.

85
00:04:22.915 --> 00:04:26.303
But that doesn't mean you shouldn't
use the [LAUGH] library or framework.

86
00:04:26.303 --> 00:04:30.105
Because you end up just building
your own system anyway.

87
00:04:30.105 --> 00:04:31.842
So I've used a lot of them in the past and

88
00:04:31.842 --> 00:04:34.854
the one that I've landed on was
this one called Express Validator.

89
00:04:34.854 --> 00:04:35.784
I think it's really cool.

90
00:04:35.784 --> 00:04:42.145
So, what we're gonna do is we're gonna
go through, find those puts those posts.

91
00:04:42.145 --> 00:04:48.008
And think about the different inputs that
we're going to need for those requests.

92
00:04:48.008 --> 00:04:50.412
And then we're going to
write validators for them.

93
00:04:50.412 --> 00:04:55.332
So that way by time the controllers
actually do their job they can safely

94
00:04:55.332 --> 00:04:57.879
assume that the inputs are correct.

95
00:04:57.879 --> 00:05:00.180
And they don't have to do
that checking themselves.

96
00:05:00.180 --> 00:05:01.084
Which is another way.

97
00:05:01.084 --> 00:05:02.600
That's probably another
way how you would do it.

98
00:05:02.600 --> 00:05:09.076
So, basically what I'm describing
is if I go to router and

99
00:05:09.076 --> 00:05:14.904
let's say for a post request for
a product, right?

100
00:05:14.904 --> 00:05:18.478
So we have a request,
we have a response, right?

101
00:05:18.478 --> 00:05:25.086
There's nothing wrong with coming in
here and saying, if not req.body.name.

102
00:05:25.086 --> 00:05:29.229
Cuz I know a product needs
a name to be created.

103
00:05:29.229 --> 00:05:30.434
Do something here.

104
00:05:30.434 --> 00:05:33.071
There's nothing wrong with that but

105
00:05:33.071 --> 00:05:37.163
imagine a product needed six fields for
it to be created.

106
00:05:37.163 --> 00:05:39.724
And then you had all
these other routes too.

107
00:05:39.724 --> 00:05:44.373
I mean, this just gets tedious and
you haven't even gotten to the part.

108
00:05:44.373 --> 00:05:48.806
To the actual job of the handler which is
like to actually create a post down here

109
00:05:48.806 --> 00:05:49.557
somewhere.

110
00:05:49.557 --> 00:05:51.601
That is all the handler
should be concerned with.

111
00:05:51.601 --> 00:05:55.987
Is creating that post or I am sorry
creating this product in that case.

112
00:05:55.987 --> 00:05:59.338
And not having to deal
with this type of logic.

113
00:05:59.338 --> 00:06:01.156
You want to separate that out.

114
00:06:01.156 --> 00:06:06.681
That way it can be tested, it can be
reused, it can be changed in one place.

115
00:06:06.681 --> 00:06:09.522
So but there's nothing wrong with this.

116
00:06:09.522 --> 00:06:16.340
It's just try to separate out different
pieces of logic as much as you can.

117
00:06:16.340 --> 00:06:19.700
It just scales better especially if you're
working on a team with many people.

118
00:06:19.700 --> 00:06:23.168
You can have someone working
on input validations and

119
00:06:23.168 --> 00:06:25.719
someone working on handlers, right?

120
00:06:25.719 --> 00:06:30.118
But if you just do it like this you're
gonna run into a lot of problems.

121
00:06:30.118 --> 00:06:36.362
So functionally just fine but
practically probably not ideal.

