WEBVTT

1
00:00:00.000 --> 00:00:04.119
Last we talked about doing
authentication things like

2
00:00:04.119 --> 00:00:07.879
middleware to protect
different API routes, and

3
00:00:07.879 --> 00:00:13.534
creating JSON web tokens that we can
issue to new users or returning users.

4
00:00:13.534 --> 00:00:17.211
Now we need to do the other side and
allow users to be created and

5
00:00:17.211 --> 00:00:20.976
allow users to come back and
actually receive a JSON Web Token.

6
00:00:20.976 --> 00:00:22.983
So that's what we're going to do.

7
00:00:22.983 --> 00:00:26.838
So we know from our schema that
a user needs a unique username and

8
00:00:26.838 --> 00:00:29.472
a password in order for
them to be created.

9
00:00:29.472 --> 00:00:34.577
So what we wanna do is create a handler
for the user, so they can do that.

10
00:00:34.577 --> 00:00:38.697
But before we can do that, we're
gonna need some helper functions that

11
00:00:38.697 --> 00:00:41.306
we're gonna use to hash a user's password,

12
00:00:41.306 --> 00:00:44.412
so we don't store them as
plain text in the database.

13
00:00:44.412 --> 00:00:49.829
Storing a user's password as plain text
in a database is no longer practice.

14
00:00:49.829 --> 00:00:52.211
Because if someone gets
access to your database,

15
00:00:52.211 --> 00:00:55.172
they get access to your users passwords,
you're just done.

16
00:00:55.172 --> 00:00:57.540
So you're better off not
knowing your users passwords.

17
00:00:57.540 --> 00:01:01.403
So we do that by hashing them,
so that's what we're gonna do.

18
00:01:01.403 --> 00:01:03.942
So what we're gonna do is
go back into auth, and

19
00:01:03.942 --> 00:01:06.104
we're gonna do some stuff with bcrypt.

20
00:01:06.104 --> 00:01:11.235
So, you can go to auth, I'm already here,

21
00:01:11.235 --> 00:01:14.440
and you can import, okay.

22
00:01:14.440 --> 00:01:20.663
You can import bcrypt from bcrypt,
like that.

23
00:01:24.438 --> 00:01:29.122
I'm gonna make a function called,
comparePasswords, like that.

24
00:01:31.704 --> 00:01:33.376
And it's gonna take two arguments.

25
00:01:33.376 --> 00:01:38.204
It's going to take the plain text password

26
00:01:38.204 --> 00:01:42.637
that someone is trying to sign in with.

27
00:01:42.637 --> 00:01:45.872
So we're gonna use comparePasswords
function when someone tries to sign in.

28
00:01:45.872 --> 00:01:50.455
So we're gonna take the password
they're sending us in plain text and

29
00:01:50.455 --> 00:01:55.426
compare it to the password that's hashed,
that's saved in the database,

30
00:01:55.426 --> 00:01:57.303
to see if they're the same.

31
00:01:57.303 --> 00:02:01.419
So we're gonna take the plaintext password
and we're gonna take the hashed password.

32
00:02:04.286 --> 00:02:05.369
Or hash.

33
00:02:07.215 --> 00:02:15.431
And then it's gonna return
bcrypt.compare Password,hash.

34
00:02:20.397 --> 00:02:24.831
This is gonna return a promise
that returns true or false,

35
00:02:24.831 --> 00:02:30.723
if password that they pass, it matches
this hash, that was also passed too.

36
00:02:34.920 --> 00:02:37.104
So that's for sign in.

37
00:02:37.104 --> 00:02:40.359
And then for
the initial hashing of your password,

38
00:02:40.359 --> 00:02:44.991
we can just call another function,
we'll call this one hashPassword.

39
00:02:44.991 --> 00:02:50.339
This one just takes in
a plain text password,

40
00:02:50.339 --> 00:02:58.385
and it's just going to return
bcrypt.hash password, like that.

41
00:03:02.865 --> 00:03:06.361
Need an h in hash.

42
00:03:06.361 --> 00:03:08.557
Yeah, that makes a big difference.

43
00:03:08.557 --> 00:03:12.256
[LAUGH] That'd be a whole
different function.

44
00:03:12.256 --> 00:03:15.217
Yeah, just make sure we export these
things, put export in front of them.

45
00:03:20.139 --> 00:03:21.211
Okay.

46
00:03:25.099 --> 00:03:31.453
Yeah, I guess, in order to be super safe,
we wanna add a salt, which is a number.

47
00:03:31.453 --> 00:03:33.393
How do I explain a salt?

48
00:03:33.393 --> 00:03:38.135
Salt is like second ingredient,
I think that's why they call it a salt.

49
00:03:38.135 --> 00:03:42.415
[LAUGH] So,
hashing is an algorithm that spits out,

50
00:03:42.415 --> 00:03:45.809
almost kind of like what we did for Json.

51
00:03:45.809 --> 00:03:52.602
We're talking a deterministic
value based off some input,

52
00:03:52.602 --> 00:03:57.529
and salt is just an extra
variable to give you

53
00:03:57.529 --> 00:04:01.670
a different variety of that output.

54
00:04:01.670 --> 00:04:04.982
So, it's basically just makes
the hash harder to guess,

55
00:04:04.982 --> 00:04:08.699
because people do brute force attacks,
where they just run every

56
00:04:08.699 --> 00:04:12.229
possible combination until they
can guess the hash, right?

57
00:04:12.229 --> 00:04:16.516
By adding a salt,
it just makes it exponentially harder for

58
00:04:16.516 --> 00:04:21.574
that person to do that, it went from,
maybe this was gonna take 100

59
00:04:21.574 --> 00:04:26.119
million requests to 100 million
times to the power of 10 or

60
00:04:26.119 --> 00:04:29.660
something like that,
that's what a salt does.

61
00:04:29.660 --> 00:04:33.284
It just makes it exponentially harder or
they can just take your salt too, but

62
00:04:33.284 --> 00:04:36.407
then you can generate the salt,
we're not gonna generate salts,

63
00:04:36.407 --> 00:04:39.061
we're just gonna just put a number here,
I'll put 5.

64
00:04:39.061 --> 00:04:40.220
So, you can put 5 [INAUDIBLE].

