WEBVTT

1
00:00:00.000 --> 00:00:04.806
So let's get to the fun part, finally
actually making the handlers where we

2
00:00:04.806 --> 00:00:08.050
actually do database queries and
stuff like that.

3
00:00:08.050 --> 00:00:10.844
Okay, let's go back to the course site.

4
00:00:14.197 --> 00:00:18.838
And basically, what we're gonna do
with the handlers is very similar to

5
00:00:18.838 --> 00:00:22.580
what we did with the user
handler that we created earlier.

6
00:00:22.580 --> 00:00:26.702
So we're gonna create a new file
inside the handlers folder for

7
00:00:26.702 --> 00:00:30.202
every single resource in
which we have handlers for,

8
00:00:30.202 --> 00:00:33.719
which for us,
there's only three more that we have.

9
00:00:33.719 --> 00:00:37.750
We have updates, products, and update
points, so we're gonna make a file for

10
00:00:37.750 --> 00:00:38.723
each one of those.

11
00:00:38.723 --> 00:00:41.746
And we have to make
an accompanying handler for

12
00:00:41.746 --> 00:00:44.699
each route that we already created, right?

13
00:00:44.699 --> 00:00:48.997
So, for instance, for product,
we need a handler for get product,

14
00:00:48.997 --> 00:00:53.832
get product by ID, put product by ID,
post product and delete product by ID.

15
00:00:53.832 --> 00:01:00.438
So that's five handlers for each one of
these, so it's 15 handlers we gotta make.

16
00:01:00.438 --> 00:01:05.378
The good news is, for the most part,
they're relatively the same.

17
00:01:05.378 --> 00:01:08.202
Kind of, but not really.

18
00:01:08.202 --> 00:01:09.217
They just have the same approach.

19
00:01:09.217 --> 00:01:12.425
It's just that the details
are gonna be slightly different,

20
00:01:12.425 --> 00:01:14.953
as you saw when we were
going through the inputs,

21
00:01:14.953 --> 00:01:18.980
like, maybe we shouldn't trust this,
or maybe we should verify this.

22
00:01:18.980 --> 00:01:24.004
So you're never really gonna get it right
the first time, especially when it comes

23
00:01:24.004 --> 00:01:28.690
to relational data and multi-tenancy
databases and who has access to what.

24
00:01:28.690 --> 00:01:32.218
But it's nice just to get the broad
strokes and just to get it out there, and

25
00:01:32.218 --> 00:01:34.739
then you can kind of see from
there what you need to do.

26
00:01:34.739 --> 00:01:39.544
Because even writing these queries,
this is going to affect like how you

27
00:01:39.544 --> 00:01:44.295
would have to go back and make
different indexes in a database, right?

28
00:01:44.295 --> 00:01:47.935
Because an index is just an optimization
around a query, but if you don't even know

29
00:01:47.935 --> 00:01:50.804
what queries you're gonna write,
how do you know what to index?

30
00:01:50.804 --> 00:01:55.608
So typically this changes a lot,
it just sends ripples throughout the whole

31
00:01:55.608 --> 00:01:58.620
app about things that you
might have to change.

32
00:01:58.620 --> 00:02:01.832
But like I said, we'll do the broad
strokes and we'll mostly get it there.

33
00:02:01.832 --> 00:02:04.523
And we can talk about any
compromises that we made or

34
00:02:04.523 --> 00:02:07.788
things we would have to do in
a fully production environment.

35
00:02:13.336 --> 00:02:15.311
Cool, okay.

36
00:02:15.311 --> 00:02:21.947
Well, let's do it, so what we're gonna
do is we'll start with some of them.

37
00:02:21.947 --> 00:02:26.126
We probably could do products,
maybe some of the updates together, and

38
00:02:26.126 --> 00:02:29.138
then I'll let you do the rest
of them on your own, and

39
00:02:29.138 --> 00:02:32.237
you'll have just a lot of
context to go off on, okay?

40
00:02:32.237 --> 00:02:34.315
So let's start with product.

41
00:02:36.260 --> 00:02:37.931
Go to handlers.

42
00:02:37.931 --> 00:02:40.938
Gonna make a new file here.

43
00:02:40.938 --> 00:02:45.471
And we'll call it product.ts, like that.

44
00:02:49.992 --> 00:02:50.593
And I'm just gonna export
some functions here.

45
00:02:50.593 --> 00:02:55.332
I'm gonna create one that says getProduct,
or

46
00:02:55.332 --> 00:03:00.426
I'll say, getProducts,
I should say, plural,

47
00:03:00.426 --> 00:03:05.888
and this will be the one for
a GET request to /product.

48
00:03:05.888 --> 00:03:09.410
This will get you all the products for
the signed-in user.

49
00:03:09.410 --> 00:03:12.970
Not every product on the app
because that wouldn't be good.

50
00:03:15.670 --> 00:03:17.464
It's a handler, so
it takes a request and a response.

51
00:03:20.756 --> 00:03:23.324
I'm going to import Prisma here,

52
00:03:25.697 --> 00:03:30.415
From my db file that I created.

53
00:03:34.930 --> 00:03:36.555
It's gonna be asynchronous.

54
00:03:36.555 --> 00:03:41.325
And now, I gotta think about what
query I need to make in order to

55
00:03:41.325 --> 00:03:43.943
get all the products for the user.

56
00:03:43.943 --> 00:03:44.949
So let's think about that.

57
00:03:44.949 --> 00:03:46.631
Let's look at the schema.

58
00:03:46.631 --> 00:03:49.771
If I have a user, if I have a user's ID,

59
00:03:49.771 --> 00:03:53.301
how can I get all the products for
that user?

60
00:03:53.301 --> 00:03:56.418
Well, I know a user has
products array on it,

61
00:03:56.418 --> 00:03:59.297
that seems like the easiest go-to move.

62
00:03:59.297 --> 00:04:04.376
It's already there, and I know product
has a belongsTo, which is a user.

63
00:04:04.376 --> 00:04:09.325
So I could say, give me all the products
where the belongsToId matches the user.

64
00:04:09.325 --> 00:04:13.715
There's two different ways you can do it,
I mean, that's just denormalization.

65
00:04:13.715 --> 00:04:15.463
It depends on how you want to do it.

66
00:04:15.463 --> 00:04:18.050
I don't think there's a right or
wrong at this point.

67
00:04:18.050 --> 00:04:22.028
I'm probably just gonna go with
the user since it's already there.

68
00:04:22.028 --> 00:04:27.964
So we're inside of a product's handler,
but we'll be querying the user table.

69
00:04:27.964 --> 00:04:31.668
So that might seem weird, but when it
comes to getting data from a database

70
00:04:31.668 --> 00:04:36.001
in a relational database, and sometimes
this is basically the denormalization is.

71
00:04:36.001 --> 00:04:40.664
Sometimes you have to go a different
path to get what you want versus going

72
00:04:40.664 --> 00:04:42.200
directly to the thing.

73
00:04:42.200 --> 00:04:46.284
Because it might not be optimized
in that way, which is, again,

74
00:04:46.284 --> 00:04:50.891
coming back to what I said about writing
these handlers sometimes affects

75
00:04:50.891 --> 00:04:55.597
how you index things in your database
because the queries can change that.

76
00:04:55.597 --> 00:04:57.112
So for now I'm just gonna go after users.

77
00:04:57.112 --> 00:05:00.726
You can go down to products if you want,
it doesn't matter how you want to do it.

78
00:05:00.726 --> 00:05:05.235
So I'm just gonna say const, I gotta get
the full user because the user that's

79
00:05:05.235 --> 00:05:07.781
attached to req.user is not the full user.

80
00:05:07.781 --> 00:05:11.598
That only has the user's ID and
the username, but it doesn't have all

81
00:05:11.598 --> 00:05:15.693
the other stuff on the user, so I actually
have to query for the user again.

82
00:05:17.143 --> 00:05:24.160
So I'll see await
prisma.user.findUnique ().

83
00:05:24.160 --> 00:05:28.597
And then, if you're doing a query in
Prisma, you have to use a where property.

84
00:05:28.597 --> 00:05:31.987
So where, and
then what fields you wanna filter on.

85
00:05:31.987 --> 00:05:36.546
So where ID is req.user.id.

86
00:05:41.659 --> 00:05:47.493
And then outside of the where,
I can say, include, like this,

87
00:05:47.493 --> 00:05:53.771
which is an object, and I can say,
include: { products : true }.

88
00:05:57.389 --> 00:06:02.824
And this will ensure that
the products are joined.

89
00:06:02.824 --> 00:06:05.611
In the case of SQL,
it's like it's joining the table,

90
00:06:05.611 --> 00:06:07.639
it's making sure the products come in.

91
00:06:07.639 --> 00:06:12.485
In the case of Mongo, this would be
called, I haven't used Mongo in a while,

92
00:06:12.485 --> 00:06:14.665
there's a word for this in Mongo.

93
00:06:18.036 --> 00:06:19.803
I can't, population.

94
00:06:19.803 --> 00:06:24.246
This would be a population in Mongo,
so it's the equivalent of that.

95
00:06:24.246 --> 00:06:30.070
It's just like pull it in and
ensure it's there, okay?

96
00:06:30.070 --> 00:06:31.219
So we have that.

97
00:06:31.219 --> 00:06:35.047
And then, now what we wanna do is,
and you can even go further.

98
00:06:35.047 --> 00:06:37.692
You can say, include the products.

99
00:06:37.692 --> 00:06:43.369
And then for the products include, what
field does a product have, a name, you

100
00:06:43.369 --> 00:06:48.906
can say include a name field on a product
if you want, or something like that.

101
00:06:48.906 --> 00:06:52.679
So it can get pretty deep, but
we're gonna get the whole product.

102
00:06:56.278 --> 00:07:02.467
Okay, so now I can say, res.json({data}).

103
00:07:02.467 --> 00:07:06.719
I always like to just send back
an object with the data property on it.

104
00:07:06.719 --> 00:07:10.746
Because if I wanna client side,
like for instance,

105
00:07:10.746 --> 00:07:13.765
I just send back the data without that,

106
00:07:13.765 --> 00:07:19.127
if I just say user.products here,
If I just sent that back and

107
00:07:19.127 --> 00:07:22.629
I never prefixed the data that's
coming back from the API,

108
00:07:22.629 --> 00:07:27.269
whenever the client gets this data,
it's always gonna be a different shape.

109
00:07:27.269 --> 00:07:30.649
In this case, it's an array, another
thing, it would be an object, right?

110
00:07:30.649 --> 00:07:35.514
So always just to, for me, always just
put an object with a data property,

111
00:07:35.514 --> 00:07:39.160
and then whatever data that's
coming back goes there.

112
00:07:39.160 --> 00:07:42.616
And it also allows you to do things,
like I can send back data,

113
00:07:42.616 --> 00:07:44.948
I can also send back
errors if I wanted to.

114
00:07:44.948 --> 00:07:46.997
I can also send back other things.

115
00:07:46.997 --> 00:07:49.926
I don't know what it is,
whatever you want to send back.

116
00:07:49.926 --> 00:07:52.190
So it's just saying
that's where the data is.

117
00:07:52.190 --> 00:07:56.710
And it's just a lot easier to check
on the front end when you know that

118
00:07:56.710 --> 00:08:00.610
the data is always on that
field versus this or that, yes?

119
00:08:00.610 --> 00:08:05.482
&gt;&gt; Shouldn't it be product in
the include instead of products?

120
00:08:05.482 --> 00:08:06.600
&gt;&gt; It depends on the schema.

121
00:08:06.600 --> 00:08:09.293
Let's see, your schema might be different.

122
00:08:09.293 --> 00:08:14.177
My schema is products, but if your
schema is singular, product, then yeah,

123
00:08:14.177 --> 00:08:16.994
it would be, but
this is dependent on yours.

124
00:08:16.994 --> 00:08:19.671
I pluralized mine because it's an array,
so

125
00:08:19.671 --> 00:08:22.145
it bothered me not to have it pluralized.

126
00:08:24.196 --> 00:08:26.201
That's the sweet thing about Prisma,
it'll tell you.

127
00:08:26.201 --> 00:08:31.399
So if I put product, it'll tell me that's
not right, because it's type checked.

128
00:08:31.399 --> 00:08:34.061
So if yours is telling you
that it should be product,

129
00:08:34.061 --> 00:08:37.943
that's probably because you have product
in your schema and not products.

130
00:08:37.943 --> 00:08:40.210
All right, so we got that.

131
00:08:40.210 --> 00:08:42.400
Let's make another one.

132
00:08:42.400 --> 00:08:45.383
So, that's to get all the products,

133
00:08:45.383 --> 00:08:50.055
now let's get one product,
and I'm gonna just comedies.

134
00:08:50.055 --> 00:08:53.752
I'm just gonna say, get all.

135
00:08:53.752 --> 00:08:57.496
The reason I'm putting comments here is so
when you go look at this,

136
00:08:57.496 --> 00:09:01.042
I'm gonna push this up, and
when you start working on your own,

137
00:09:01.042 --> 00:09:03.881
you'll know what theme to follow for
the purpose.

138
00:09:03.881 --> 00:09:05.598
Like, I need to do a get all, okay?

139
00:09:05.598 --> 00:09:08.451
It looks something like this,
or I need to do a get one,

140
00:09:08.451 --> 00:09:11.875
it looks something like this, so
that's what I wanna do, okay?

141
00:09:11.875 --> 00:09:17.183
So now for get one, we'll just say

142
00:09:17.183 --> 00:09:21.945
export const getOneProduct,

143
00:09:21.945 --> 00:09:25.800
that's gonna be async.

144
00:09:30.398 --> 00:09:31.249
(req, res).

145
00:09:34.795 --> 00:09:38.173
How can we get one product?

146
00:09:38.173 --> 00:09:39.540
First of all,
how do we know what product to get?

147
00:09:42.530 --> 00:09:46.514
Anybody wanna guess?

148
00:09:52.523 --> 00:09:53.220
&gt;&gt; With the ID?

149
00:09:53.220 --> 00:09:59.296
&gt;&gt; Yeah, with the ID,
the ID on the URL, the parameter here.

150
00:09:59.296 --> 00:10:04.757
We know what product to get is because
you should have given us an ID.

151
00:10:04.757 --> 00:10:08.717
And if you didn't give us an ID, this
route wouldn't have even been triggered

152
00:10:08.717 --> 00:10:11.720
and this function wouldn't be
running in the first place.

153
00:10:11.720 --> 00:10:17.370
So it can only run unless you do a get
request to /product/ anything after that,

154
00:10:17.370 --> 00:10:19.627
which we're assuming is an ID.

155
00:10:20.690 --> 00:10:22.809
So how do we access that?

156
00:10:22.809 --> 00:10:28.742
Well, we can get the ID
from the request object,

157
00:10:28.742 --> 00:10:32.806
so Id would be req.params.Id.

158
00:10:32.806 --> 00:10:37.674
Params is the query, or not the query
parameter, the route parameter, here,

159
00:10:37.674 --> 00:10:39.648
and parameter's just a colon.

160
00:10:41.744 --> 00:10:46.504
So that one middleware that we added in
the server, that's called urlencoded,

161
00:10:46.504 --> 00:10:48.262
it's doing that basically.

162
00:10:48.262 --> 00:10:53.180
So it's turning the parameters
to an object for us, and

163
00:10:53.180 --> 00:10:56.436
the query string and all that stuff.

164
00:10:58.861 --> 00:10:59.949
So we have our id.

165
00:10:59.949 --> 00:11:04.849
So now that we have our id,
we can query the product table,

166
00:11:04.849 --> 00:11:09.349
or the product collection,
if you're using Mongo,

167
00:11:09.349 --> 00:11:15.151
to find a product that belongs to
the signed-in user and has this id.

168
00:11:18.242 --> 00:11:21.574
Right, because I guess we could
just query for the id, but

169
00:11:21.574 --> 00:11:25.184
wouldn't that mean anybody could
just send any product id?.

170
00:11:25.184 --> 00:11:27.972
And we query for it and
send it back, right?

171
00:11:27.972 --> 00:11:33.790
So we have to make sure it's scoped to
the signed-in user and it's this d.

172
00:11:33.790 --> 00:11:39.897
And if you go look at our schema,
we don't have an index for

173
00:11:39.897 --> 00:11:46.379
that, we didn't tell our schema,
hey, you need to index for

174
00:11:46.379 --> 00:11:51.506
a product id and
a combination of a belongsToId.

175
00:11:51.506 --> 00:11:54.590
So this is why I said your queries usually
make you go back and change your indexes.

176
00:11:54.590 --> 00:12:00.063
So we would have to come here and
do something like index,

177
00:12:00.063 --> 00:12:04.633
like id and belongsToId for
this query to work.

178
00:12:04.633 --> 00:12:08.831
Well, it will still work without the
index, but if you want it to be optimized,

179
00:12:08.831 --> 00:12:09.908
you have to do that.

180
00:12:13.063 --> 00:12:14.482
But that's advanced database stuff,

181
00:12:14.482 --> 00:12:16.770
[LAUGH] you probably don't have
to concern yourself with that.

182
00:12:16.770 --> 00:12:19.645
I'm just trying to give you the pro-tips,
okay?

183
00:12:19.645 --> 00:12:23.642
Anyway, let's do the quarter, so

184
00:12:23.642 --> 00:12:29.651
we can say product = await
prisma.product.find.

185
00:12:33.356 --> 00:12:37.017
I guess we'd say find first.

186
00:12:37.017 --> 00:12:39.486
If we had the index,
I guess we could do findUnique,

187
00:12:39.486 --> 00:12:42.363
maybe we can still do findUnique,
let's see what happens.

188
00:12:42.363 --> 00:12:51.491
So we'll say findUnique where,
id is id, and belongs, yeah,

189
00:12:51.491 --> 00:12:56.936
it's not letting me do it, yeah, we gotta
do find first, that's what I thought.

190
00:12:56.936 --> 00:13:02.228
So fine first, id is Id and
then belongsToId is req.user.id,

191
00:13:02.228 --> 00:13:07.914
and we're gonna send it back,
res.json({data: product}).

192
00:13:07.914 --> 00:13:14.538
Right now, we've been naive intentionally
about whether or not a product is there,

193
00:13:14.538 --> 00:13:20.159
whether or not it errored out or not,
we're gonna handle errors later.

194
00:13:20.159 --> 00:13:23.754
But right now,
just assume that it always works.

195
00:13:23.754 --> 00:13:28.787
[LAUGH] There's never gonna be an error
and there's never gonna be a problem.

196
00:13:28.787 --> 00:13:32.765
So if you're wondering why
we're not checking this stuff,

197
00:13:32.765 --> 00:13:36.490
it's because we will, just not right now.

198
00:13:36.490 --> 00:13:37.957
Yes?

199
00:13:37.957 --> 00:13:42.689
&gt;&gt; What's the difference between
findFirst and findUnique?

200
00:13:44.238 --> 00:13:49.705
&gt;&gt; So findFirst, it's more like a, So

201
00:13:49.705 --> 00:13:53.504
you can't, maybe there's some
fields where you can't index.

202
00:13:53.504 --> 00:13:57.672
For instance, when you're doing
like faceting or filtering,

203
00:13:57.672 --> 00:14:02.468
like I need to find a combination of
certain things that aren't indexed.

204
00:14:02.468 --> 00:14:07.228
And there could be many,
maybe I have 100 products and

205
00:14:07.228 --> 00:14:09.915
10 of them have the same name.

206
00:14:09.915 --> 00:14:13.011
I wanna find the first one
that matches this name.

207
00:14:13.011 --> 00:14:17.454
Whereas findUnique is saying
there's only one product ever

208
00:14:17.454 --> 00:14:20.688
in the database that has this combination.

209
00:14:20.688 --> 00:14:26.507
And it basically just tells Prisma how
to write the query differently, right?

210
00:14:26.507 --> 00:14:30.961
How you query for multiple things that
could be the same versus how you query for

211
00:14:30.961 --> 00:14:34.761
something that's guaranteed to
be unique is gonna be different.

212
00:14:34.761 --> 00:14:37.817
Because databases treat unique
things differently than they treat

213
00:14:37.817 --> 00:14:38.843
non-unique things.

214
00:14:38.843 --> 00:14:41.934
So ultimately,
it's probably gonna come down to speed.

215
00:14:41.934 --> 00:14:44.419
But the way you should think about it is,

216
00:14:44.419 --> 00:14:49.030
because we don't have a unique index
on this, technically the database is

217
00:14:49.030 --> 00:14:53.661
convinced that there might be more
than one instance of this combination.

218
00:14:53.661 --> 00:14:56.031
So we're saying find the first one of it.

219
00:14:56.031 --> 00:14:59.158
But if we index these,
this would actually be unique and

220
00:14:59.158 --> 00:15:03.830
we could probably just do findUnique and
get that optimization from the database.

221
00:15:03.830 --> 00:15:08.651
Not having to scan the entire collection
or the entire table to find our thing.

222
00:15:08.651 --> 00:15:13.061
I guess the difference is like saying
findFirst is loop through an array and

223
00:15:13.061 --> 00:15:15.164
find the first thing that matches.

224
00:15:15.164 --> 00:15:18.404
Whereas findUnique is go to
this object to this key and

225
00:15:18.404 --> 00:15:21.790
grab me the thing at that key,
that's the difference.

