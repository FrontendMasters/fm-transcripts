WEBVTT

1
00:00:00.000 --> 00:00:02.505
Okay, so next we're just gonna start
thinking about the models, and

2
00:00:02.505 --> 00:00:04.930
then we're gonna start making
the models and creating the schema.

3
00:00:04.930 --> 00:00:06.200
So let's do that.

4
00:00:06.200 --> 00:00:09.699
Okay, so like I said, we're not building
a UI for this API in this course, but

5
00:00:09.699 --> 00:00:12.790
having a design I think is really
helpful for designing your models.

6
00:00:12.790 --> 00:00:17.458
Knowing what data needs to be the UI
gives you hints on what data needs to be

7
00:00:17.458 --> 00:00:18.613
recorded in a DB.

8
00:00:18.613 --> 00:00:20.446
So we'll be using this design here.

9
00:00:20.446 --> 00:00:25.345
So if you click this link, it will take
you to this It's a pretty cool app

10
00:00:25.345 --> 00:00:30.341
that's some really cool designer made for
Figma it's like a template.

11
00:00:30.341 --> 00:00:35.673
And it's a change log app, and we can look
at this I'm gonna click on Preview and

12
00:00:35.673 --> 00:00:38.710
here it is,
here's what the app looks like.

13
00:00:38.710 --> 00:00:39.415
It's a really nice app.

14
00:00:39.415 --> 00:00:42.164
So I should just do this for
the side project.

15
00:00:42.164 --> 00:00:44.878
And we're gonna make a schema for
this app.

16
00:00:44.878 --> 00:00:48.276
And we're gonna look at the design to
determine what are the models that we need

17
00:00:48.276 --> 00:00:50.401
to make and
this is actually what I do in reality.

18
00:00:50.401 --> 00:00:51.765
It's really hard for me,

19
00:00:51.765 --> 00:00:55.115
I know that's like basic stuff
that I have to make first schema.

20
00:00:55.115 --> 00:00:59.424
But if a designer already like designed
to thing, now I really know what to make

21
00:00:59.424 --> 00:01:03.950
because I'm basing my designed off of what
information I gotta put on the screen.

22
00:01:03.950 --> 00:01:07.797
So what we wanna do is we wanna look at
this and kinda get an idea of what models

23
00:01:07.797 --> 00:01:11.666
we need to make and different things
like that, and then we'll make them.

24
00:01:13.023 --> 00:01:14.033
Does that make sense?

25
00:01:16.350 --> 00:01:21.050
So just looking at this,
anybody wanna take a stab at.

26
00:01:21.050 --> 00:01:27.320
Some information we need to record in
a database based off what's on the screen?

27
00:01:27.320 --> 00:01:29.757
No wrong answers.

28
00:01:29.757 --> 00:01:31.617
&gt;&gt; You've a roadmap table.

29
00:01:31.617 --> 00:01:33.167
&gt;&gt; Roadmap, I like that.

30
00:01:33.167 --> 00:01:36.202
&gt;&gt; Projects, tasks.

31
00:01:36.202 --> 00:01:38.311
&gt;&gt; Projects, tasks.

32
00:01:39.470 --> 00:01:41.523
Yeah, those make sense.

33
00:01:41.523 --> 00:01:42.160
Yes.

34
00:01:42.160 --> 00:01:43.266
&gt;&gt; User.

35
00:01:43.266 --> 00:01:46.130
&gt;&gt; Yeah,
you can't do anything without a user.

36
00:01:46.130 --> 00:01:47.090
Got to have a user.

37
00:01:47.090 --> 00:01:49.401
Yep, anything else?

38
00:01:49.401 --> 00:01:50.750
&gt;&gt; Features.

39
00:01:50.750 --> 00:01:52.090
&gt;&gt; Features I like features?

40
00:01:52.090 --> 00:01:54.895
Yeah, that's probably the thing.

41
00:01:54.895 --> 00:01:56.810
Yeah, I mean, that's basically it.

42
00:01:56.810 --> 00:01:58.541
You're just taking note of this and

43
00:01:58.541 --> 00:02:02.590
seeing all the different fields that these
models would have and things like that.

44
00:02:02.590 --> 00:02:03.090
So.

45
00:02:04.252 --> 00:02:05.560
Let's get to it.

46
00:02:05.560 --> 00:02:09.900
So first, I'm just gonna introduce
you to like the Prisma syntax.

47
00:02:09.900 --> 00:02:14.517
So I'm just gonna go into the code,
and we're going to just write,

48
00:02:14.517 --> 00:02:16.710
let's just do the user schema.

49
00:02:16.710 --> 00:02:21.610
So the way this works inside of Prisma if
you've ever uses like graph SQL syntax is

50
00:02:21.610 --> 00:02:22.989
very similar to that.

51
00:02:22.989 --> 00:02:25.831
The team behind Prisma had a graph
SQL product before this, so

52
00:02:25.831 --> 00:02:27.260
they're heavy in a graph SQL.

53
00:02:27.260 --> 00:02:30.127
So this thing is heavily
influenced off graph SQLs,

54
00:02:30.127 --> 00:02:34.310
syntax, or whatever it's called,
which is heavily influenced off JSON.

55
00:02:34.310 --> 00:02:38.090
So if you know how to make JavaScript
objects, you'll know how to do this.

56
00:02:38.090 --> 00:02:44.827
So if I wanna make a user scheme,
I can say model user like that.

57
00:02:44.827 --> 00:02:46.380
And all users have a what?

58
00:02:49.119 --> 00:02:52.452
&gt;&gt; ID.
&gt;&gt; ID Yeah, All users have an ID, so

59
00:02:52.452 --> 00:02:53.640
I can say ID.

60
00:02:53.640 --> 00:02:57.200
I can make it an integer if I want to.

61
00:02:57.200 --> 00:02:58.550
But I like my IDs to be string.

62
00:02:58.550 --> 00:02:59.783
So I'm gonna say ID is a string.

63
00:02:59.783 --> 00:03:03.888
And then I'm gonna have to give this.

64
00:03:03.888 --> 00:03:10.445
I don't know what they call this in Prisma
but always think of directive [LAUGH].

65
00:03:10.445 --> 00:03:12.448
I think it's like an attribute, maybe.

66
00:03:12.448 --> 00:03:19.474
So I'm gonna say this is identifying
this field as the ID field.

67
00:03:23.460 --> 00:03:27.070
And then I can give it
a default like this.

68
00:03:27.070 --> 00:03:29.180
And I can say uuid.

69
00:03:29.180 --> 00:03:31.741
So it's basically gonna default to a uuid.

70
00:03:31.741 --> 00:03:33.701
If you don't know what a uuid is,

71
00:03:33.701 --> 00:03:38.610
it's basically just like a guaranteed
unique string that's in a certain format.

72
00:03:38.610 --> 00:03:42.680
So this is guaranteeing that all
users have a unique string as an ID.

73
00:03:42.680 --> 00:03:46.904
I can do integer and I can tell this thing
to auto increment to go up by one, but

74
00:03:46.904 --> 00:03:49.819
then you have user one,
two, three, four, five.

75
00:03:49.819 --> 00:03:53.600
I think you're just setting yourself
up for trouble later, in my opinion.

76
00:03:53.600 --> 00:03:55.880
So yeah, we have user ID.

77
00:03:55.880 --> 00:04:01.290
Is that users are gonna have usernames
in this app, so I can say username.

78
00:04:02.438 --> 00:04:06.219
And that needs to be unique,
so I can say unique.

79
00:04:10.090 --> 00:04:11.828
They also don't have a password.

80
00:04:14.050 --> 00:04:17.750
Which is a string, okay?

81
00:04:17.750 --> 00:04:21.158
And yeah, maybe even like a createdAt.

82
00:04:21.158 --> 00:04:27.185
So let's say createdAt, and
I think that's a date time,

83
00:04:27.185 --> 00:04:30.514
and we can say @default to now.

84
00:04:37.380 --> 00:04:37.880
Okay.

85
00:04:39.510 --> 00:04:40.975
So now that we have that.

86
00:04:43.296 --> 00:04:47.168
That's pretty much how
Prisma's schema syntax works,

87
00:04:47.168 --> 00:04:49.676
it's not more difficult than this.

88
00:04:49.676 --> 00:04:53.046
I mean, yeah, you gotta look up some
of the stuff to see what it is, but

89
00:04:53.046 --> 00:04:56.934
it's pretty intuitive, and it doesn't
really matter what database you choose

90
00:04:56.934 --> 00:05:00.510
it's 99% the same no matter the database
which I think is refreshing.

91
00:05:00.510 --> 00:05:02.030
So this is how we're
gonna make our schema.

92
00:05:02.030 --> 00:05:05.494
So cool we have our user,
any questions on this?

93
00:05:05.494 --> 00:05:06.585
On the Prisma, yes.

94
00:05:06.585 --> 00:05:10.490
&gt;&gt; You could define
relationship with other table.

95
00:05:10.490 --> 00:05:13.660
&gt;&gt; I knew someone who was working on
databases was gonna ask that question.

96
00:05:13.660 --> 00:05:17.261
So the question was, how do you define
relationships with other tables?

97
00:05:17.261 --> 00:05:20.434
We're gonna get there and
it's actually pretty cool.

98
00:05:20.434 --> 00:05:23.890
And this is why I recommend downloading
the extension cuz the extension will

99
00:05:23.890 --> 00:05:25.080
actually do that for you.

100
00:05:25.080 --> 00:05:28.783
It'll help you define those relationships
without you doing anything,

101
00:05:28.783 --> 00:05:29.924
which is really cool.

102
00:05:29.924 --> 00:05:32.610
&gt;&gt; Why did you use the UUID?

103
00:05:32.610 --> 00:05:40.560
&gt;&gt; I use the UUID because I
don't like numbers as IDs.

104
00:05:40.560 --> 00:05:45.395
And Postgres doesn't like Mongo,
or it has mechanism

105
00:05:45.395 --> 00:05:50.136
built-in other than
incrementing numbers for IDs.

106
00:05:50.136 --> 00:05:53.802
So you just have to set
your own IDs in a SQL based

107
00:05:53.802 --> 00:05:58.800
database whereas Mongo like just
we'll figure it out for you.

108
00:05:58.800 --> 00:06:03.456
So yeah, it was either numbers auto
incrementing or using a UUID, so

109
00:06:03.456 --> 00:06:08.031
I chose UUID that way I also don't
have to manage a system of coming up

110
00:06:08.031 --> 00:06:10.710
with globally unique strings myself.

