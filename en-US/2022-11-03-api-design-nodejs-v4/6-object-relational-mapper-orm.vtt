WEBVTT

1
00:00:00.081 --> 00:00:07.231
Okay, now, we're gonna start getting
into actually building out the API.

2
00:00:07.231 --> 00:00:10.970
Now that we have our server,
we're just gonna move fast and we're gonna

3
00:00:10.970 --> 00:00:15.081
hop right into modeling the data and
getting everything organized when it comes

4
00:00:15.081 --> 00:00:18.913
to making sure our API can actually
do things and it's protecting stuff.

5
00:00:18.913 --> 00:00:21.957
But before that,
we kinda gotta talk about what an ORM is.

6
00:00:21.957 --> 00:00:25.186
So I would say most of you
probably know what a database is.

7
00:00:25.186 --> 00:00:26.794
We are probably not database experts.

8
00:00:26.794 --> 00:00:29.810
But I think if you don't
know what a database is,

9
00:00:29.810 --> 00:00:33.870
it's basically just a mechanism for
you to store things on disk.

10
00:00:33.870 --> 00:00:39.715
You can think of a database as, yeah, it's
like you saving stuff to a hard drive or

11
00:00:39.715 --> 00:00:44.911
an SSD, whereas the code that you write
is saved in RAM and is temporary.

12
00:00:44.911 --> 00:00:49.051
So database is just an obstruction
around how you interact with an SSD or

13
00:00:49.051 --> 00:00:50.574
hard drive through code.

14
00:00:50.574 --> 00:00:53.863
That's basically what it is, and
there's so many of those databases.

15
00:00:53.863 --> 00:00:59.783
But how you interact with the database,
that's where things start to get funky.

16
00:00:59.783 --> 00:01:02.362
So in oder to do that,
we need something called an ORM.

17
00:01:02.362 --> 00:01:06.925
An ORM is basically,
the way that I think about it,

18
00:01:06.925 --> 00:01:10.654
it's basically an STK for the database.

19
00:01:10.654 --> 00:01:12.112
That's basically what it is.

20
00:01:12.112 --> 00:01:16.648
It's the library that you install
that allows you to interact with

21
00:01:16.648 --> 00:01:21.108
the database so you don't have to
do any lower level operations.

22
00:01:21.108 --> 00:01:26.685
For instance, if you were to use
a SQL database like SQL or SQLite,

23
00:01:26.685 --> 00:01:31.864
imagine trying to insert some
customers into that database,

24
00:01:31.864 --> 00:01:34.765
it will look something like this.

25
00:01:34.765 --> 00:01:37.524
This is the SQL query you
would have to write, right?

26
00:01:37.524 --> 00:01:39.074
It would literally look like this.

27
00:01:39.074 --> 00:01:42.446
So I don't know, if you're a SQL god and
usually doing SQL your whole life,

28
00:01:42.446 --> 00:01:43.671
this is probably nothing.

29
00:01:43.671 --> 00:01:47.747
But for the new generation of folks
that just haven't grown up on SQL, yeah,

30
00:01:47.747 --> 00:01:48.951
Brian Holt is the god.

31
00:01:48.951 --> 00:01:53.011
And this SQL course is pretty good
actually to get because I was one of those

32
00:01:53.011 --> 00:01:56.352
people that didn't learn SQL
when I was learning to code, so

33
00:01:56.352 --> 00:01:57.944
it's a really good course.

34
00:01:57.944 --> 00:02:01.599
And even with ORM,
you still sometimes have to write SQL,

35
00:02:01.599 --> 00:02:03.695
but imagine having to write SQL.

36
00:02:03.695 --> 00:02:08.130
[LAUGH] And
this is what it will look like, okay?

37
00:02:08.130 --> 00:02:10.137
This is cool, this is fine, right?

38
00:02:10.137 --> 00:02:15.239
Yeah, I didn't test that, I don't know,
but yeah, imagine writing this, okay?

39
00:02:15.239 --> 00:02:22.085
This is fine, when in ORM, which is
an SDK for interacting with database,

40
00:02:22.085 --> 00:02:28.618
you can turn this insert operation
into this, a function call, okay?

41
00:02:28.618 --> 00:02:32.842
That's what an ORM does,
it's an SDK for your database.

42
00:02:32.842 --> 00:02:34.261
So that's what we're gonna be using,

43
00:02:34.261 --> 00:02:36.335
we're gonna be using ORM to
interact with our database.

44
00:02:36.335 --> 00:02:40.736
We're also gonna be using that same
ORM to create schemas, create models,

45
00:02:40.736 --> 00:02:45.706
everything to do with the database, we'll
use this SDK, and that's called an ORM.

46
00:02:45.706 --> 00:02:48.780
ORM stands for object-relation mapper.

47
00:02:48.780 --> 00:02:53.860
And I think it's described that way
because it basically allows you to

48
00:02:53.860 --> 00:02:58.952
interact with the database based
off an object-oriented approach.

49
00:02:58.952 --> 00:03:03.351
So everything is an object, for instance,
this is a customer's object and

50
00:03:03.351 --> 00:03:05.220
I'm able to create a customer.

51
00:03:05.220 --> 00:03:08.735
So it's just a fancy way of saying
it's OOP for databases, and

52
00:03:08.735 --> 00:03:11.466
it's just called object-relational mapper.

53
00:03:11.466 --> 00:03:15.370
But I think honestly, we should just start
calling them database SDKs at this point

54
00:03:15.370 --> 00:03:17.177
cuz that's literally what they are.

55
00:03:17.177 --> 00:03:22.109
And we should just scrap the term ORM,
it's kind of moot at this point.

56
00:03:22.109 --> 00:03:25.321
Cool, any questions on that?

57
00:03:25.321 --> 00:03:26.768
Yes.

58
00:03:26.768 --> 00:03:32.067
&gt;&gt; You mentioned using PostgreSQL
instead of Mongo, is there any advantage

59
00:03:32.067 --> 00:03:36.865
to Mongo over Postgres,
especially since Postgres stores JSON?

60
00:03:36.865 --> 00:03:40.014
&gt;&gt; Is there any advantage
using Mongo over Postgres,

61
00:03:40.014 --> 00:03:42.585
especially since Postgres stores JSON?

62
00:03:42.585 --> 00:03:47.856
That advantage is gonna
come down to how efficient

63
00:03:47.856 --> 00:03:52.498
your multi $100 million business is and

64
00:03:52.498 --> 00:03:55.643
how often they need to scale.

65
00:03:55.643 --> 00:04:00.561
The difference between the two and what
needs to happen is so irrelevant early

66
00:04:00.561 --> 00:04:05.266
on that it probably just comes down to
what are you most comfortable with?

67
00:04:05.266 --> 00:04:06.610
What tools do you like the most?

68
00:04:06.610 --> 00:04:07.888
What level of support are you getting?

69
00:04:07.888 --> 00:04:11.660
Who's giving you a better
price versus what it can do,

70
00:04:11.660 --> 00:04:15.033
because Mongo is completely
acid at this point?

71
00:04:15.033 --> 00:04:17.478
They have transactions now,
whereas before, they didn't.

72
00:04:17.478 --> 00:04:21.151
So I might have said, Postgres has
transactions, but so does Mongo now.

73
00:04:21.151 --> 00:04:24.114
So actually, I mean, you could
pretty much do whatever you want.

74
00:04:24.114 --> 00:04:28.369
The reason I'm using and also the ORM that
we're gonna be using actually doesn't care

75
00:04:28.369 --> 00:04:32.520
what database you have, it actually works
the same no matter what database you use.

76
00:04:32.520 --> 00:04:36.745
So it really doesn't matter at that point,
and I really liked that.

77
00:04:36.745 --> 00:04:41.746
So there really isn't any advantage
other than what you're comfortable with.

78
00:04:41.746 --> 00:04:47.030
And if you do get to the point where it
does matter, again, different problems.

