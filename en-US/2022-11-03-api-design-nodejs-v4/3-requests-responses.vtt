WEBVTT

1
00:00:00.000 --> 00:00:02.128
Why does this approach break down?

2
00:00:02.128 --> 00:00:04.891
Why not just go further with this?

3
00:00:04.891 --> 00:00:06.874
You heard me talk about a little bit.

4
00:00:06.874 --> 00:00:11.548
But yeah, so this is cool when
you're building something trivial.

5
00:00:11.548 --> 00:00:15.786
And maybe it's even preferred, maybe if
you're just building something small,

6
00:00:15.786 --> 00:00:16.822
maybe this is cool.

7
00:00:16.822 --> 00:00:22.255
There are some environments where
you're limited on resources.

8
00:00:22.255 --> 00:00:25.743
If you've ever built
a serverless function on a CDN,

9
00:00:25.743 --> 00:00:29.861
your file can only be so big, so
maybe the leaner, the better.

10
00:00:29.861 --> 00:00:32.917
So maybe there are times
where this is fine.

11
00:00:32.917 --> 00:00:35.782
You don't mind doing the hard work
cuz installing something is just not

12
00:00:35.782 --> 00:00:36.506
worth your time.

13
00:00:36.506 --> 00:00:37.700
Okay, that's fine.

14
00:00:37.700 --> 00:00:41.092
But for the most, if you're gonna build
something that's gonna be used by someone,

15
00:00:41.092 --> 00:00:42.519
you probably don't wanna do this.

16
00:00:42.519 --> 00:00:45.467
If you are gonna build something
that's gonna be used by a team,

17
00:00:45.467 --> 00:00:47.226
you definitely don't wanna do this.

18
00:00:47.226 --> 00:00:49.846
Imagine working on a team with ten people

19
00:00:49.846 --> 00:00:54.247
with all different opinions on how
a server should handle routing.

20
00:00:54.247 --> 00:00:56.565
And because there isn't a framework,
you could do whatever you want.

21
00:00:56.565 --> 00:00:58.831
You're gonna have ten
different versions of routing.

22
00:00:58.831 --> 00:01:00.201
It's gonna be weird.

23
00:01:00.201 --> 00:01:02.237
And eventually,
you're gonna sit down like, all right,

24
00:01:02.237 --> 00:01:03.181
we need to figure this out.

25
00:01:03.181 --> 00:01:04.341
How are we gonna do routing?

26
00:01:04.341 --> 00:01:06.169
Okay, now, you're building a framework.

27
00:01:06.169 --> 00:01:11.474
So again, don't do the framework,
just use the ones that are out there.

28
00:01:11.474 --> 00:01:17.102
&gt;&gt; I don't know if you're gonna get into
this, but there's a couple of questions

29
00:01:17.102 --> 00:01:21.976
around the request and response object and
what you can do with them.

30
00:01:21.976 --> 00:01:24.900
How that gets passed to that callback.

31
00:01:24.900 --> 00:01:30.445
&gt;&gt; That's a great question, let's do my
favorite thing in the world, console.log.

32
00:01:30.445 --> 00:01:35.366
[LAUGH] Just to show you, cuz I honestly
can't tell you all the things you can do

33
00:01:35.366 --> 00:01:37.423
because there's just so many.

34
00:01:37.423 --> 00:01:40.863
So I'm just gonna log the request object,
and we'll log the response object, and

35
00:01:40.863 --> 00:01:42.106
then we'll take a look at it.

36
00:01:42.106 --> 00:01:44.630
And you can kinda get
an idea of what's there, and

37
00:01:44.630 --> 00:01:46.747
then I'll talk about how they get there.

38
00:01:46.747 --> 00:01:48.802
So let's do that.

39
00:01:48.802 --> 00:01:53.570
Okay, yeah, let me keep scrolling,

40
00:01:53.570 --> 00:01:59.679
here we go, not there yet,
it's almost there.

41
00:01:59.679 --> 00:02:00.712
Okay, there we go.

42
00:02:00.712 --> 00:02:05.979
Okay, yeah, so
when it comes to networking, there's so

43
00:02:05.979 --> 00:02:11.137
many [LAUGH] nuances and
things that go into it from headers

44
00:02:11.137 --> 00:02:16.195
to authorization to just,
I mean, it's just so much.

45
00:02:16.195 --> 00:02:21.077
And then you tie into all the stuff
that notice decorating this stuff with.

46
00:02:21.077 --> 00:02:24.595
So basically,
what can you do with an incoming request?

47
00:02:24.595 --> 00:02:26.666
The answer is pretty
much whatever you want.

48
00:02:26.666 --> 00:02:31.101
You have access to the IP address
that's making the request.

49
00:02:31.101 --> 00:02:36.589
You have access to how big the request is,
when it came, who is it?

50
00:02:36.589 --> 00:02:40.370
You could pretty much do whatever
it is you want with the requests,

51
00:02:40.370 --> 00:02:42.204
that doesn't mean you should.

52
00:02:42.204 --> 00:02:46.510
Response is typically only used for
responding to the request.

53
00:02:46.510 --> 00:02:50.567
So it's definitely more limited
than our incoming requests.

54
00:02:50.567 --> 00:02:54.366
Since request is meant to be read, you
can change the request, you can modify,

55
00:02:54.366 --> 00:02:57.388
you can do whatever you want
because it's only for the server.

56
00:02:57.388 --> 00:03:01.509
And in fact, there's billion
dollar companies whose jobs,

57
00:03:01.509 --> 00:03:05.086
whose products log requests and
they do stuff for it.

58
00:03:05.086 --> 00:03:09.176
If you ever use any logging platform
that monitors your APIs, yeah,

59
00:03:09.176 --> 00:03:13.620
they're just looking at your request,
and do an introspection on it, and

60
00:03:13.620 --> 00:03:17.664
surfacing interesting things for
you to look at on a chart, right?

61
00:03:17.664 --> 00:03:20.736
So you can do some pretty
cool stuff with a request.

62
00:03:20.736 --> 00:03:22.907
Response is just for sending things back.

63
00:03:22.907 --> 00:03:25.231
And then how do they get
passed to the callback?

64
00:03:25.231 --> 00:03:27.712
Well, that is the job of this HTTP module.

65
00:03:27.712 --> 00:03:30.799
When it creates a server,
it's basically saying,

66
00:03:30.799 --> 00:03:34.036
you can think of it as
an event-driven architecture.

67
00:03:34.036 --> 00:03:37.098
So when someone makes a request
to a server, that's an event.

68
00:03:37.098 --> 00:03:40.559
Just like if you were to make
a button.addEventListener, right,

69
00:03:40.559 --> 00:03:43.545
you would say I wanna add
an event listener on this button.

70
00:03:43.545 --> 00:03:46.645
And the event that I'm gonna register for
is called the click event.

71
00:03:46.645 --> 00:03:49.223
And when a click event happens,
run this callback.

72
00:03:49.223 --> 00:03:50.487
That's the same thing.

73
00:03:50.487 --> 00:03:53.263
The event in this case will
be an incoming request.

74
00:03:53.263 --> 00:03:56.959
And we want to run this callback
when the request comes in.

75
00:03:56.959 --> 00:04:01.940
And just like in an event in the front
end, where you would get the event object

76
00:04:01.940 --> 00:04:06.692
that you can use inside the callback,
we get a request, which is the thing

77
00:04:06.692 --> 00:04:11.011
that made the event, and
then we get this ability to respond to it.

78
00:04:11.011 --> 00:04:16.184
And we need this response because without
this, how would you respond back?

79
00:04:16.184 --> 00:04:18.529
Your server's gonna get
millions of request.

80
00:04:18.529 --> 00:04:21.038
How would you know which
request to respond to?

81
00:04:21.038 --> 00:04:25.338
This response objects is scoped
to the incoming request.

82
00:04:25.338 --> 00:04:30.086
So if this function runs a million
times per second, this response object

83
00:04:30.086 --> 00:04:34.999
is guaranteed to be scoped to this
instance of the request that's running.

84
00:04:34.999 --> 00:04:36.127
If that makes sense.

85
00:04:36.127 --> 00:04:40.478
&gt;&gt; Why didn't this request
show in XHR under DevTools?

86
00:04:40.478 --> 00:04:45.325
&gt;&gt; Yeah, this request didn't show in
XHR in DevTools because we didn't

87
00:04:45.325 --> 00:04:46.813
make an XHR request.

88
00:04:46.813 --> 00:04:50.848
So XHR request is explicit.

89
00:04:50.848 --> 00:04:55.300
I mean, you would literally
have to call XHR in JavaScript.

90
00:04:55.300 --> 00:04:57.818
Or maybe it shows and
fetch when you do JavaScript, but

91
00:04:57.818 --> 00:05:01.290
this isn't a website that we made,
in fact, this isn't a website at all.

92
00:05:01.290 --> 00:05:02.738
It's just nothing.

93
00:05:02.738 --> 00:05:06.072
It's just Chrome saying I have nothing
to show you because the server sent

94
00:05:06.072 --> 00:05:06.675
me nothing.

95
00:05:06.675 --> 00:05:08.307
So it's not an XHR request.

96
00:05:08.307 --> 00:05:11.742
No different if you went to any
other website, like github.com and

97
00:05:11.742 --> 00:05:14.164
hit Enter,
that's not an XHR request either.

98
00:05:14.164 --> 00:05:18.836
That's just the browser making a Git
request to try to load up some HTML

99
00:05:18.836 --> 00:05:19.717
on the page.

100
00:05:19.717 --> 00:05:21.714
We didn't send any HTML back.

101
00:05:21.714 --> 00:05:22.786
We sent nothing back.

102
00:05:22.786 --> 00:05:25.592
So the browser's like, well,
I don't have anything to show you, so

103
00:05:25.592 --> 00:05:27.459
you're just gonna look
at this white screen.

104
00:05:27.459 --> 00:05:31.141
We don't have any client side
JavaScript making an API call.

105
00:05:31.141 --> 00:05:33.274
So therefore, it's not an XHR request.

106
00:05:33.274 --> 00:05:38.574
But if you do go to the Network tab,
you will see that it was a request.

107
00:05:38.574 --> 00:05:41.026
It'll be the only one there, most likely.

108
00:05:41.026 --> 00:05:43.127
Let's refresh this.

109
00:05:43.127 --> 00:05:47.042
Right here, you can see right here
at localhost 200, type document.

110
00:05:47.042 --> 00:05:48.946
This is the request right here, but

111
00:05:48.946 --> 00:05:52.128
it's definitely not XHR cuz
there's no JavaScript here.

112
00:05:52.128 --> 00:05:52.674
We didn't call it.

