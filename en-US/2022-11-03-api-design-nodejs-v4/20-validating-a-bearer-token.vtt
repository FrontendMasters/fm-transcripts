WEBVTT

1
00:00:00.430 --> 00:00:01.510
Okay, so now I'm gonna trick it.

2
00:00:01.510 --> 00:00:03.078
Now I am gonna send something out.

3
00:00:03.078 --> 00:00:04.858
I was typing some characters.

4
00:00:04.858 --> 00:00:05.660
Now what?

5
00:00:05.660 --> 00:00:08.401
Well, this is gonna hang now cuz I'm
not calling next or anything, so

6
00:00:08.401 --> 00:00:09.477
it's just gonna sit here.

7
00:00:09.477 --> 00:00:10.470
But it didn't break.

8
00:00:10.470 --> 00:00:13.490
So our protect middleware
isn't good enough yet.

9
00:00:13.490 --> 00:00:16.381
I bypassed it by just typing
in some random strings.

10
00:00:16.381 --> 00:00:17.621
So we're not there yet.

11
00:00:17.621 --> 00:00:19.870
We check to see if it was there,
that's great.

12
00:00:19.870 --> 00:00:21.494
And now we gotta check
to see if it's real.

13
00:00:21.494 --> 00:00:23.239
And that will stop this from happening.

14
00:00:23.239 --> 00:00:24.030
So let's go do that.

15
00:00:24.030 --> 00:00:29.783
So now what we'll do, is we're gonna check
to see if this is actually real or not.

16
00:00:29.783 --> 00:00:33.538
So the way we'll do that is we'll
grab the token off the bearer and

17
00:00:33.538 --> 00:00:35.937
check to see if there's an actual token.

18
00:00:35.937 --> 00:00:38.037
And then I'll give you another check.

19
00:00:38.037 --> 00:00:42.690
So let's do just that.

20
00:00:42.690 --> 00:00:43.340
Let me go to off.

21
00:00:43.340 --> 00:00:45.530
Next check would be, let's just say const.

22
00:00:47.770 --> 00:00:52.733
I'm gonna destructure here, so
I'll put an empty array for

23
00:00:52.733 --> 00:00:57.512
now, and I'm gonna say
bearer.split on an empty space.

24
00:00:57.512 --> 00:01:00.604
The reason I'm splitting on empty space
because I'm saying you need to send

25
00:01:00.604 --> 00:01:01.920
me a token that looks like this.

26
00:01:01.920 --> 00:01:06.240
Let's just bearer, space and
then your token here.

27
00:01:06.240 --> 00:01:10.520
So I'm splitting on this empty space,
and split returns an array.

28
00:01:12.150 --> 00:01:14.931
And it should have the word
bearer in the first argument and

29
00:01:14.931 --> 00:01:18.813
the first index of the array, and then the
token in the second index of the array.

30
00:01:18.813 --> 00:01:20.150
That's what split's doing.

31
00:01:20.150 --> 00:01:22.390
So that's what I'm saying
is the API creator,

32
00:01:22.390 --> 00:01:24.020
that's what I want you to send me.

33
00:01:25.300 --> 00:01:27.700
So that means the first thing
here is the word bearer.

34
00:01:27.700 --> 00:01:30.060
I don't care about it, so
I'm gonna put a comma.

35
00:01:30.060 --> 00:01:32.601
But the second thing is a token,
I care about that, so I'm gonna say token.

36
00:01:35.278 --> 00:01:36.203
So now we have a token.

37
00:01:40.140 --> 00:01:44.750
Then I can say, if not token,
you already know what's about to happen.

38
00:01:44.750 --> 00:01:47.659
I'm about to give you the same
thing I gave buddy up here.

39
00:01:47.659 --> 00:01:51.787
It's a 401 unauthorized.

40
00:01:51.787 --> 00:01:55.935
Or I can say not valid token.

41
00:01:55.935 --> 00:01:57.209
Whatever I wanna put.

42
00:02:02.544 --> 00:02:08.200
Okay, so to test this, now let's restart
our server, go back to turn client.

43
00:02:08.200 --> 00:02:09.653
This was able to fool it last time.

44
00:02:09.653 --> 00:02:10.764
Let's see if it fools it this time.

45
00:02:15.783 --> 00:02:18.490
I think it still fooled it,
so we're not there yet.

46
00:02:18.490 --> 00:02:23.479
We still haven't built a sophisticated
enough protect to stop

47
00:02:23.479 --> 00:02:29.530
something as trivial as just typing
in something here and hitting Send.

48
00:02:29.530 --> 00:02:32.393
So not quite there yet,
it's still hanging.

49
00:02:32.393 --> 00:02:35.674
I'm guessing the split actually created,
well, yeah, if you split on empty space

50
00:02:35.674 --> 00:02:38.370
with nothing in it, it's still gonna
just give you back the string.

51
00:02:38.370 --> 00:02:40.554
So it's still gonna bypass it.

52
00:02:40.554 --> 00:02:41.610
The split is not good enough yet.

53
00:02:42.806 --> 00:02:48.293
So now what we wanna do is we wanna
like okay, cool, you got past here,

54
00:02:48.293 --> 00:02:53.597
you sent up a token, you actually
formatted it correctly somehow,

55
00:02:53.597 --> 00:02:56.870
but is it a real JWT
signed by this secret?

56
00:02:58.230 --> 00:02:59.339
That's the last check.

57
00:02:59.339 --> 00:03:02.120
So if you can get past that,
then you must be real,

58
00:03:02.120 --> 00:03:05.670
or you steal someone's JWT,
which means you're real.

59
00:03:05.670 --> 00:03:08.626
So let's do that.

60
00:03:08.626 --> 00:03:13.115
Let's go back to our code,
And we'll say, okay,

61
00:03:13.115 --> 00:03:18.800
cool, we're gonna try to cache
this because it could break.

62
00:03:18.800 --> 00:03:23.779
And if it breaks we don't want
the server to break because this

63
00:03:23.779 --> 00:03:27.820
method from JWT will break
if it doesn't verify.

64
00:03:27.820 --> 00:03:31.589
But we don't want someone sending
a wrong JSON web token breaking

65
00:03:31.589 --> 00:03:34.210
our server because the user messed up.

66
00:03:34.210 --> 00:03:37.888
We don't want the rest of our users
suffering because someone tried

67
00:03:37.888 --> 00:03:39.640
to authenticate incorrectly.

68
00:03:39.640 --> 00:03:43.890
Imagine someone's server crashing
because you forgot your password.

69
00:03:43.890 --> 00:03:45.039
That's the equivalent of this.

70
00:03:45.039 --> 00:03:46.378
I don't want that to happen.

71
00:03:46.378 --> 00:03:50.260
Someone forgot their password, and
that crashed a whole server for everybody.

72
00:03:50.260 --> 00:03:54.697
That would be terrible, so
that's what we're trying catching this.

73
00:03:54.697 --> 00:03:59.358
Okay, so now let's say

74
00:03:59.358 --> 00:04:04.958
const user = jwt.verify.

75
00:04:04.958 --> 00:04:11.369
So we wanna verify this
token with this secret,

76
00:04:11.369 --> 00:04:16.026
so process.env.JWT_SECRET.

77
00:04:16.026 --> 00:04:20.750
So we're gonna get this token,
and then if not user, right?

78
00:04:20.750 --> 00:04:23.760
Or there we go,
I'm just gonna assume that it is.

79
00:04:23.760 --> 00:04:26.660
So we got that, otherwise,
this would actually break.

80
00:04:26.660 --> 00:04:28.216
So now, we'll just say req.user.

81
00:04:28.216 --> 00:04:31.357
I've augmented the request object, = user.

82
00:04:31.357 --> 00:04:35.100
Which should be the object that
we signed all the way up here.

83
00:04:35.100 --> 00:04:36.981
So should be an object with the ID and

84
00:04:36.981 --> 00:04:39.876
a username cuz that's what
we signed in to existence.

85
00:04:42.544 --> 00:04:48.601
And then I can say next, I'm done,
not next tick, but next.

86
00:04:48.601 --> 00:04:52.230
And I guess I need to put next
here cuz it is a middleware.

87
00:04:56.463 --> 00:05:02.286
If any of that breaks, you know what
we're doing, we're coming over here.

88
00:05:02.286 --> 00:05:03.615
We're saying no.

89
00:05:03.615 --> 00:05:07.711
And I'm just gonna log the error just so
we can see it.

90
00:05:11.863 --> 00:05:15.610
So we're gonna try to verify this
token with this secret that we signed

91
00:05:15.610 --> 00:05:17.320
a token with.

92
00:05:17.320 --> 00:05:19.881
If it is a user, we'll attach it to
the request object we'll call the Next.

93
00:05:19.881 --> 00:05:22.311
So anything in the stack can now req.user,
and

94
00:05:22.311 --> 00:05:25.730
see the user who's currently
making the request.

95
00:05:25.730 --> 00:05:26.530
They can identify them.

96
00:05:26.530 --> 00:05:30.710
It will have an ID and a username on
it perfect for query to database.

97
00:05:30.710 --> 00:05:32.410
Otherwise, you know what's gonna happen.

98
00:05:32.410 --> 00:05:33.430
You're getting a 401.

99
00:05:33.430 --> 00:05:37.170
So let's give it a go.

100
00:05:37.170 --> 00:05:42.460
So I think these are still gonna hang,

101
00:05:42.460 --> 00:05:48.089
means I still don't have any handlers.

102
00:05:48.089 --> 00:05:51.560
But we do have a handler in, where is it?

103
00:05:51.560 --> 00:05:53.384
There we go, gets slash first.

104
00:05:53.384 --> 00:05:54.600
I gotta make sure I go there.

105
00:05:54.600 --> 00:05:57.160
Okay so, let's try this.

106
00:05:57.160 --> 00:05:59.493
Stop, start it again.

107
00:06:01.691 --> 00:06:06.500
And now if I try to do this and
I run this code, boom.

108
00:06:06.500 --> 00:06:10.950
Now spoofing, JWT that got past those
two steps are no longer going to

109
00:06:10.950 --> 00:06:14.760
get past that last step because
it's not a valid token.

110
00:06:14.760 --> 00:06:15.966
Not a valid token, right?

111
00:06:15.966 --> 00:06:18.820
And we can go look at the error that
the JWT logged, you can see right here.

112
00:06:18.820 --> 00:06:20.530
A JSON Web Token error.

113
00:06:20.530 --> 00:06:21.620
JWT malformed.

114
00:06:22.620 --> 00:06:24.910
This didn't break the server
though because I caught it.

115
00:06:24.910 --> 00:06:26.017
If I didn't catch this,

116
00:06:26.017 --> 00:06:29.360
if I did not wrap this in a try catch,
our server would be off right now.

117
00:06:29.360 --> 00:06:30.273
It's still on.

118
00:06:30.273 --> 00:06:31.420
It's still on right now.

119
00:06:31.420 --> 00:06:33.790
But if I didn't do the try catch,
it will be off.

120
00:06:33.790 --> 00:06:36.960
And everybody would be tweeting
us cuz our server died.

121
00:06:36.960 --> 00:06:40.098
In the middle of a ranked game or
something like that.

122
00:06:40.098 --> 00:06:42.444
Something weird.

123
00:06:42.444 --> 00:06:46.521
So any questions on that?

124
00:06:46.521 --> 00:06:47.200
That was a lot.

125
00:06:49.160 --> 00:06:50.170
Authentication is tough.

126
00:06:52.434 --> 00:06:54.907
And it gets tougher than this, [LAUGH].

127
00:06:54.907 --> 00:06:57.688
But for the most part,
it's mostly just this.

128
00:06:59.496 --> 00:07:00.756
Plus other stuff.

129
00:07:00.756 --> 00:07:01.990
Yes.

130
00:07:01.990 --> 00:07:05.320
&gt;&gt; Would API rate limiting be
also implemented in a middleware?

131
00:07:07.140 --> 00:07:07.989
&gt;&gt; Good question.

132
00:07:07.989 --> 00:07:13.311
So API rate limiting is a mechanism you
would use for an external facing API.

133
00:07:13.311 --> 00:07:15.873
So as in your product is an API.

134
00:07:15.873 --> 00:07:18.789
Again, I hate to use stripe again but
stripes product is an API,

135
00:07:18.789 --> 00:07:21.010
their product is documentation.

136
00:07:21.010 --> 00:07:25.912
So they would have something like
rate limiting because they don't

137
00:07:25.912 --> 00:07:28.408
want one person killing all this.

138
00:07:28.408 --> 00:07:31.133
Somebody could just write
a script on an infinite loop and

139
00:07:31.133 --> 00:07:34.900
deploy it to 30,000 IP addresses and
just try to bring down your server.

140
00:07:34.900 --> 00:07:36.740
They don't want that to happen.

141
00:07:36.740 --> 00:07:42.185
So they implement something called rate
limiting, which looks at an IP address and

142
00:07:42.185 --> 00:07:46.928
limits how many times an IP address can
make a request per second before it

143
00:07:46.928 --> 00:07:52.660
gets blocked for X amount of time
before they're allowed to do it again.

144
00:07:52.660 --> 00:07:58.188
Yes, you could do that in the middleware,
but for more performance,

145
00:07:58.188 --> 00:08:02.697
you don't want that request
even reaching your server.

146
00:08:02.697 --> 00:08:05.467
Because yes,
you stopped it from reaching the handlers,

147
00:08:05.467 --> 00:08:09.027
which talked to the database,
which are the biggest performance hit, but

148
00:08:09.027 --> 00:08:12.285
it's still on your server and
taking up resources there.

149
00:08:12.285 --> 00:08:14.599
So typically a rate limiting for

150
00:08:14.599 --> 00:08:19.515
a more sophisticated API would
probably be added before the API.

151
00:08:19.515 --> 00:08:21.741
So technically it is
kinda like middleware,

152
00:08:21.741 --> 00:08:24.793
but middleware on the network layer and
not on the code layer.

153
00:08:24.793 --> 00:08:29.288
And this would be like a proxy or
an API gateway or something like that.

154
00:08:29.288 --> 00:08:32.470
Which is another server that
sits in front of your server.

155
00:08:32.470 --> 00:08:36.410
And that server does things like
rate limiting and access control.

156
00:08:36.410 --> 00:08:40.684
So that way your server can safely make
the assumption that this request is safe

157
00:08:40.684 --> 00:08:41.600
and ready to go.

158
00:08:42.610 --> 00:08:44.650
And that's just a whole another thing.

159
00:08:44.650 --> 00:08:46.940
There's literally products
that are just that.

160
00:08:46.940 --> 00:08:49.446
Okay, everybody's an expert now?

161
00:08:51.359 --> 00:08:52.016
&gt;&gt; No.

162
00:08:52.016 --> 00:08:57.080
&gt;&gt; [LAUGH] All it's tough.

163
00:08:57.080 --> 00:09:00.260
Okay, well,
at least we're protecting our routes now.

164
00:09:00.260 --> 00:09:01.650
You can't access any of these routes.

165
00:09:01.650 --> 00:09:03.806
They're good the guards, its cool.

