WEBVTT

1
00:00:00.120 --> 00:00:04.300
So yeah, that's one middleware, we got
some other middleware that we wanna use.

2
00:00:04.300 --> 00:00:07.180
So we're gonna say app.use.

3
00:00:07.180 --> 00:00:11.443
And we're gonna say express.json,
like that.

4
00:00:11.443 --> 00:00:18.647
This one basically allows a client
to send us JSON, basically.

5
00:00:18.647 --> 00:00:23.376
Without this, you would have to manually
put together the bits yourself to

6
00:00:23.376 --> 00:00:27.291
make JSON work, and that would suck,
so this does it for you.

7
00:00:31.662 --> 00:00:35.452
And the last one is

8
00:00:35.452 --> 00:00:40.763
express.urlencoded.

9
00:00:40.763 --> 00:00:46.644
And I think there's, An option here,

10
00:00:46.644 --> 00:00:49.330
extended true or something like that.

11
00:00:49.330 --> 00:00:55.146
So urlencoded allows a client to
add things like a query string and

12
00:00:55.146 --> 00:01:00.690
parameters and it decodes and
encodes that properly.

13
00:01:00.690 --> 00:01:03.290
Whereas if you don't do that, it kind of
just treats everything like a string.

14
00:01:05.140 --> 00:01:07.836
So I don't know if you've ever
seen a query string, right?

15
00:01:07.836 --> 00:01:12.922
So in a query string in a URL,
you can have gogole.com,

16
00:01:12.922 --> 00:01:18.335
then the query string and
then it's like, a equals that and

17
00:01:18.335 --> 00:01:23.720
then comma,
thing equals some other thing, right?

18
00:01:23.720 --> 00:01:27.400
URL encoded will take all of this and
put it in an object for you.

19
00:01:28.470 --> 00:01:32.085
So you can just do like query.a,
query.thing,

20
00:01:32.085 --> 00:01:38.121
versus trying to get it yourself off the
string which is annoying, all right, so.

21
00:01:42.262 --> 00:01:44.850
Cool, so we'll get those.

22
00:01:44.850 --> 00:01:48.990
And then now we're gonna
make our own middleware.

23
00:01:48.990 --> 00:01:51.200
So let's just make one for fun.

24
00:01:51.200 --> 00:01:54.780
You can follow along and make one that I'm
making or you can just make your own and

25
00:01:54.780 --> 00:01:58.323
have it do anything you want, cuz we're
probably just gonna erase it anyway.

26
00:01:58.323 --> 00:02:01.550
It's not practical, but I want you to get
into the feeling of making something.

27
00:02:01.550 --> 00:02:03.384
So I'm gonna say app.use here, and

28
00:02:03.384 --> 00:02:06.710
I'm just gonna make my middleware
right inside of here like this.

29
00:02:06.710 --> 00:02:11.140
And I'm gonna say,
request response, next, okay?

30
00:02:12.490 --> 00:02:16.230
What I'm gonna do is I'm going
to augment the request object.

31
00:02:16.230 --> 00:02:21.562
So I'm gonna say, ooh, req.shhhh secret,

32
00:02:24.208 --> 00:02:27.812
Equals doggy, okay?

33
00:02:27.812 --> 00:02:32.448
So I'm adding something to the request
object, and then I'm saying,

34
00:02:32.448 --> 00:02:35.090
yeah, next, I'm going next, right?

35
00:02:36.560 --> 00:02:41.627
So any single request that's
registered after this

36
00:02:41.627 --> 00:02:48.549
middleware was registered will now
have access to req.shhhh secret.

37
00:02:48.549 --> 00:02:53.246
So I should be able to go into,
I'm gonna go all the way into my router.

38
00:02:53.246 --> 00:02:59.486
I'm gonna go into the slash
product one and instead of hello,

39
00:02:59.486 --> 00:03:04.900
I'm gonna send back req.shhhh secret,
like that.

40
00:03:04.900 --> 00:03:07.123
Cuz this should have access to it,

41
00:03:07.123 --> 00:03:12.040
because this came after me registering
my middleware, so I should have it.

42
00:03:13.560 --> 00:03:16.320
Let's see, so I'm gonna stop my server,
start it again.

43
00:03:17.930 --> 00:03:21.349
Go back here, run this code and
there you go, I get back doggy.

44
00:03:27.541 --> 00:03:31.080
My middleware augmented
the request object,

45
00:03:31.080 --> 00:03:34.172
it attached some new information to it.

46
00:03:34.172 --> 00:03:38.871
And because the handler that I was
logging that information was registered

47
00:03:38.871 --> 00:03:43.730
after the middleware, it benefited
from this middleware happening first.

48
00:03:43.730 --> 00:03:45.580
So if I were to put a log
in this middleware and

49
00:03:45.580 --> 00:03:46.830
then put a log in the handler,

50
00:03:46.830 --> 00:03:49.990
you would see that the middleware would
log first cuz it was written first.

51
00:03:51.530 --> 00:03:54.723
Or it was attached to the app first,
not written first, but yeah,

52
00:03:54.723 --> 00:03:55.987
it was registered first.

53
00:04:00.156 --> 00:04:02.420
So yeah, you can make your
middleware do whatever you want.

54
00:04:02.420 --> 00:04:06.470
And just to show an example
of how a middleware can stop

55
00:04:06.470 --> 00:04:10.520
the execution of something,
instead of doing that,

56
00:04:10.520 --> 00:04:15.370
I can just not say next and
I can just be like, you know what?

57
00:04:15.370 --> 00:04:17.710
No, I'm just gonna stop you right now.

58
00:04:17.710 --> 00:04:23.199
Status is 401 res.send nope,

59
00:04:23.199 --> 00:04:26.820
I can just do that.

60
00:04:26.820 --> 00:04:30.570
I don't even need this secret thing
anymore because it's not even useful.

61
00:04:30.570 --> 00:04:34.870
And now it doesn't matter what request I
make, it's always gonna 401 and say no,

62
00:04:34.870 --> 00:04:38.410
no matter what URL I put it in,
it's always gonna happen.

63
00:04:38.410 --> 00:04:42.603
So I can go here, and
it literally doesn't matter.

64
00:04:42.603 --> 00:04:46.890
I can run this and it's gonna say,
401 unauthorized nope.

65
00:04:46.890 --> 00:04:50.873
I believe, I can even put anything here
and it would say the same thing, right.

66
00:04:50.873 --> 00:04:55.164
It doesn't matter because
it's always doing it,

67
00:04:55.164 --> 00:04:59.567
I never call next,
I never move on to the next thing.

68
00:04:59.567 --> 00:05:04.204
And because this is registered before
any other route is registered,

69
00:05:04.204 --> 00:05:08.920
none of the routes even get considered
because I'm immediately ending

70
00:05:08.920 --> 00:05:12.865
the response or
the request right here in this middleware.

71
00:05:12.865 --> 00:05:17.811
And this middleware is
registered globally at the top.

72
00:05:17.811 --> 00:05:21.047
So it's pretty powerful stuff, you can do
some pretty powerful stuff in middleware.

73
00:05:21.047 --> 00:05:25.387
I obviously, don't wanna do that so
I'm gonna get rid of that, and

74
00:05:25.387 --> 00:05:29.816
I'm gonna get rid of that,
just go back to message yeah, question?

75
00:05:29.816 --> 00:05:35.094
&gt;&gt; What would happen if next was in

76
00:05:35.094 --> 00:05:42.411
app.get right before the console.log?

77
00:05:42.411 --> 00:05:47.869
&gt;&gt; If next was in app.get before
the console.log, if you put next here and

78
00:05:47.869 --> 00:05:54.150
you said next here, what's gonna happen
is there's nothing next for this to go.

79
00:05:54.150 --> 00:05:57.478
There's nowhere left because
now we took what was a handler,

80
00:05:57.478 --> 00:06:02.152
which you can think of a handler as like a
middleware, it's like the last middleware,

81
00:06:02.152 --> 00:06:04.280
it's like that's the end of the road.

82
00:06:04.280 --> 00:06:07.430
There's nothing after this,
it's like let's follow the stack.

83
00:06:07.430 --> 00:06:09.415
Someone makes a request,
this gets executed, this gets executed,

84
00:06:09.415 --> 00:06:10.040
this gets executed.

85
00:06:13.950 --> 00:06:15.708
Then it's like okay,
what route did you call?

86
00:06:15.708 --> 00:06:16.940
You did a get request to slash.

87
00:06:16.940 --> 00:06:21.210
Okay, cool, now I'm gonna execute this and
then you immediately call next.

88
00:06:21.210 --> 00:06:22.390
What's next?

89
00:06:22.390 --> 00:06:26.341
There's nothing else left,
we don't have any other middleware,

90
00:06:26.341 --> 00:06:30.875
we don't have any other route that
matches this, nothing would happen.

91
00:06:30.875 --> 00:06:34.515
You would actually get a hanging server
most likely or an error from Express.

92
00:06:34.515 --> 00:06:39.269
So yeah, by saying next you are telling
Express that this is a middleware,

93
00:06:39.269 --> 00:06:44.562
when in fact, this function thinks it's
a handler because of how it's behaving.

94
00:06:44.562 --> 00:06:47.980
So yeah, you probably wouldn't
get the result that you thought.

95
00:06:47.980 --> 00:06:51.225
Yeah, and then the other thing I want to
talk about with the middleware is that you

96
00:06:51.225 --> 00:06:54.907
can add as many middleware as you want,
you can just comma separate them.

97
00:06:54.907 --> 00:06:59.583
You can literally add as many as you want,
either by doing it this way or

98
00:06:59.583 --> 00:07:03.469
just dropping in a whole array
of middleware, all right,

99
00:07:03.469 --> 00:07:05.630
you can just drop a whole array.

100
00:07:05.630 --> 00:07:07.654
Either way, it works the same.

101
00:07:07.654 --> 00:07:10.826
The only other thing is that if you
need your middleware to take options,

102
00:07:10.826 --> 00:07:14.258
kind of like URL encoded right here takes
option and how Morgan takes options,

103
00:07:14.258 --> 00:07:17.546
you just make your middleware a function
that returns a function, right.

104
00:07:17.546 --> 00:07:24.526
So you would make custom logger is
a function that returns a function,

105
00:07:24.526 --> 00:07:30.086
right, and this function has rec,
response, next and

106
00:07:30.086 --> 00:07:35.431
then you can do your log,
I'm gonna cancel that log.

107
00:07:39.627 --> 00:07:45.064
Hello, from, and
then I can have an option you pass

108
00:07:45.064 --> 00:07:51.013
in here like message, and
I can say hello from message.

109
00:07:54.577 --> 00:07:55.820
And then I can call next.

110
00:07:55.820 --> 00:07:58.490
All right, so now I have a custom logger.

111
00:07:58.490 --> 00:08:01.536
And when I come down here I can
say app.use(custom logger),

112
00:08:01.536 --> 00:08:04.770
it's a function that returns
a function and it takes in a message.

113
00:08:04.770 --> 00:08:08.396
Or I can say hello from
custom logger like that,

114
00:08:08.396 --> 00:08:13.112
and that's how you have your
middleware take in an argument,

115
00:08:13.112 --> 00:08:19.112
you would just do that, it's just
a function that returns another function.

116
00:08:23.328 --> 00:08:25.600
&gt;&gt; Can we chain middleware
in a nested form?

117
00:08:27.700 --> 00:08:33.064
&gt;&gt; You can chain middleware if you
want to but the recommended approach

118
00:08:33.064 --> 00:08:38.993
is to compose middleware, either
manually putting just them in an array,

119
00:08:38.993 --> 00:08:45.130
or there's literally plugins called
compose middleware that I used to use.

120
00:08:45.130 --> 00:08:49.664
I haven't used them in a while,
[INAUDIBLE] compose.

121
00:08:51.260 --> 00:08:52.350
Compose middleware.

122
00:08:52.350 --> 00:08:56.808
Yeah, so you can compose them
kinda like this, which again,

123
00:08:56.808 --> 00:09:01.719
just puts them in an array anyway,
so you could just do it yourself.

124
00:09:11.014 --> 00:09:12.670
Cool, any other questions
about middleware?

125
00:09:15.120 --> 00:09:17.820
Okay, this is also where you
would do something like cors.

126
00:09:17.820 --> 00:09:21.268
So if you wanted to use cors,

127
00:09:21.268 --> 00:09:25.620
you can just npm install cors save.

128
00:09:25.620 --> 00:09:31.282
And then you can import cors from cors,

129
00:09:31.282 --> 00:09:35.057
and at the top of your app,

130
00:09:35.057 --> 00:09:40.380
you can say app.use(cors).

131
00:09:40.380 --> 00:09:41.571
So what is cors?

132
00:09:41.571 --> 00:09:48.050
Cross origin research sharing, basically,
it's a thing, browsers are super sketch.

133
00:09:48.050 --> 00:09:53.340
They're terrified that they should
allow you to talk to other resources.

134
00:09:53.340 --> 00:09:56.492
So cors is just a configuration
that you can put on your

135
00:09:56.492 --> 00:10:00.220
server that will tell a browser who or
what can access this API.

136
00:10:00.220 --> 00:10:03.813
And by default this means
everybody can access this API.

137
00:10:03.813 --> 00:10:09.175
Doesn't mean you're gonna get access,
you've still got to be authenticated but

138
00:10:09.175 --> 00:10:12.861
as far as you as a client,
you can be authenticated here.

139
00:10:12.861 --> 00:10:16.397
But you can block on IP levels and
some different requests,

140
00:10:16.397 --> 00:10:18.530
you can block on all types of stuff.

141
00:10:18.530 --> 00:10:22.500
This just means everything and everyone
can at least try to get access to this.

142
00:10:22.500 --> 00:10:24.500
So cors is a middleware.

143
00:10:24.500 --> 00:10:28.190
So when you think of how do I
change configuration to my server?

144
00:10:28.190 --> 00:10:28.710
It's middleware.

