WEBVTT

1
00:00:00.150 --> 00:00:04.075
So the next thing is basically, we wanna
start hooking things up to the routes and

2
00:00:04.075 --> 00:00:06.620
getting everything configured.

3
00:00:06.620 --> 00:00:09.140
I typically like to start with the route
and then work on the handlers.

4
00:00:09.140 --> 00:00:11.210
I think some people start with
the handlers and work back to the routes.

5
00:00:11.210 --> 00:00:12.695
I'm just gonna go through
the routes of the handlers,

6
00:00:12.695 --> 00:00:14.170
it's a lot easier for me to think.

7
00:00:14.170 --> 00:00:16.953
So let's start thinking about the routes.

8
00:00:16.953 --> 00:00:21.100
Who here has ever heard of the word like,
or the term CRUD, C-R-U-D?

9
00:00:24.198 --> 00:00:25.350
Yeah, you've heard, what's CRUD?

10
00:00:27.830 --> 00:00:32.739
&gt;&gt; It's an acronym that I actually
find to be confusing because I think

11
00:00:32.739 --> 00:00:37.473
it makes more sense just call it
what it is but what create update or

12
00:00:37.473 --> 00:00:40.960
create read update
&gt;&gt; And delete.

13
00:00:40.960 --> 00:00:43.937
&gt;&gt; Yeah, it stands for create,
read, update, and delete.

14
00:00:43.937 --> 00:00:46.857
And that's basically if
you think about any app

15
00:00:46.857 --> 00:00:50.151
you've ever used in your
life other than some weird.

16
00:00:50.151 --> 00:00:54.555
For most part, most apps are just,
you're either creating something,

17
00:00:54.555 --> 00:01:01.060
you're reading something, you're updating
something, or you're deleting somehing.

18
00:01:01.060 --> 00:01:05.890
Pretty much every software you've ever
interacted with does those four things,

19
00:01:05.890 --> 00:01:08.067
some do them all, some only do some.

20
00:01:08.067 --> 00:01:12.344
But, that's basically what an API is for
is to enable,

21
00:01:12.344 --> 00:01:15.075
some type of UI to be able to do CRUD.

22
00:01:15.075 --> 00:01:17.810
So, we're gonna write the routes, for

23
00:01:17.810 --> 00:01:21.841
our CRUD against the different
resources that we created.

24
00:01:21.841 --> 00:01:25.338
The resources in this case are the things
like the models that we made,

25
00:01:25.338 --> 00:01:28.551
the products, the updates,
the users, those are resources.

26
00:01:28.551 --> 00:01:31.070
And we wanna be able to do
CRUD operations on them.

27
00:01:31.070 --> 00:01:33.132
So we wanna create products.

28
00:01:33.132 --> 00:01:34.169
We wanna update products.

29
00:01:34.169 --> 00:01:35.450
We wanna read products.

30
00:01:35.450 --> 00:01:36.816
We wanna delete products.

31
00:01:36.816 --> 00:01:38.736
We wanna create updates.

32
00:01:38.736 --> 00:01:40.114
We wanna update updates.

33
00:01:40.114 --> 00:01:41.270
We wanna read updates.

34
00:01:41.270 --> 00:01:43.051
We wanna delete updates, right?

35
00:01:43.051 --> 00:01:46.054
So we wanna do CRUD on
the resources that we create it.

36
00:01:46.054 --> 00:01:49.585
And for each one of those operations,
we need a different route.

37
00:01:49.585 --> 00:01:53.061
So we need a different method,
path combination for

38
00:01:53.061 --> 00:01:57.730
each one of those CRUD operations for
every single resource, right.

39
00:01:57.730 --> 00:02:00.032
So an example of that would be,

40
00:02:00.032 --> 00:02:05.350
if I wanted to get one product by
a given ID, I would have a get request.

41
00:02:05.350 --> 00:02:09.664
For whatever my URL is slash product
slash the ID of that product, or

42
00:02:09.664 --> 00:02:15.540
if I wanted to get all products, it would
just be a GET request to slash product.

43
00:02:15.540 --> 00:02:19.874
Or maybe I wanna create a product,
it would be a post request to product.

44
00:02:19.874 --> 00:02:23.989
Or if I wanna update a product, it'd
be a PUT request for product/ID, right.

45
00:02:23.989 --> 00:02:27.560
If I wanna delete one, it would be
a DELETE request to product ID.

46
00:02:27.560 --> 00:02:32.309
And I would do the same thing for all
other resources I would expose on my API.

47
00:02:32.309 --> 00:02:34.924
And that's all the CRUD operations.

48
00:02:34.924 --> 00:02:35.559
Any questions on that?

49
00:02:39.892 --> 00:02:42.570
This is following something called REST.

50
00:02:42.570 --> 00:02:44.541
I talked about REST before.

51
00:02:44.541 --> 00:02:45.824
That's what REST is.

52
00:02:45.824 --> 00:02:46.373
REST is,

53
00:02:46.373 --> 00:02:50.708
you have these resources, you gotta be
able to operate on them using CRUD.

54
00:02:50.708 --> 00:02:56.420
We say if you use this method like get,
post, put, delete with this way of making

55
00:02:56.420 --> 00:03:01.982
URLs the name of the resource slash some
ID if you have to find the specific one.

56
00:03:01.982 --> 00:03:04.399
Then everyone should
know how to use your API.

57
00:03:04.399 --> 00:03:09.330
It never works out that way because
relationships just kills this.

58
00:03:09.330 --> 00:03:13.524
As soon as you have one resource that
needs another resource like we do in our

59
00:03:13.524 --> 00:03:18.449
app, then it's, well, if someone asks for
a product, but a product has updates too,

60
00:03:18.449 --> 00:03:20.800
we send the updates back to.

61
00:03:20.800 --> 00:03:24.100
Well, yeah, then it's, well,
let them ask for it on a query string.

62
00:03:24.100 --> 00:03:26.786
And then you're just creating your
own query language at that point.

63
00:03:26.786 --> 00:03:34.430
So it was, REST works up until 2005 and
then it doesn't work anymore.

64
00:03:34.430 --> 00:03:39.670
So, but we're still gonna use it because
mostly everything is based of REST anyway.

65
00:03:39.670 --> 00:03:42.210
So, it's nice to know it.

66
00:03:42.210 --> 00:03:43.910
Okay, so let's create some routes.

67
00:03:43.910 --> 00:03:47.554
First thing we're gonna do, is we're
gonna create a new file router.ts, right.

68
00:03:47.554 --> 00:03:49.060
Beside a source, so, let's do that.

69
00:03:49.060 --> 00:03:52.009
And then what we're gonna do,
is we're gonna create a new router,

70
00:03:52.009 --> 00:03:53.106
we'll talk about that.

71
00:03:53.106 --> 00:03:57.554
And we're pretty much, if you see I have
all the routes here for all the CRUD

72
00:03:57.554 --> 00:04:02.300
operations that we're gonna do for
all of our resources, so, let's do that.

73
00:04:02.300 --> 00:04:08.540
So, I'm gonna go in here,
I'm going to say router.ts like that,

74
00:04:08.540 --> 00:04:12.159
I'm gonna import express from express

75
00:04:18.372 --> 00:04:22.957
I can actually just do,
I'm just gonna do a named import for

76
00:04:22.957 --> 00:04:25.719
Router, but a capital R like that.

77
00:04:25.719 --> 00:04:27.205
And I was gonna say const.

78
00:04:27.205 --> 00:04:31.380
Let's just say router,
lowercase = Router, uppercase, like that.

79
00:04:32.760 --> 00:04:36.355
So espresso was made a while ago when
people were just still trying to figure

80
00:04:36.355 --> 00:04:38.740
out how they wanted to make libraries.

81
00:04:38.740 --> 00:04:42.262
So this might seem kinda weird to have
something with a capital letter in it and

82
00:04:42.262 --> 00:04:44.680
then also not see the word
new in front of it.

83
00:04:44.680 --> 00:04:47.232
It's not a constructor function
it's just a regular function, but

84
00:04:47.232 --> 00:04:48.646
they decided to make it capitalized.

85
00:04:48.646 --> 00:04:50.295
People were weird back then.

86
00:04:50.295 --> 00:04:52.425
They didn't know what they were doing.

87
00:04:52.425 --> 00:04:56.016
But ,yeah, so
we're gonna make a new router, okay.

88
00:04:57.859 --> 00:05:03.620
A router in express is this, so
up until now we've used app, right.

89
00:05:03.620 --> 00:05:06.010
So, where were we?

90
00:05:06.010 --> 00:05:08.160
We did like app.get, okay.

91
00:05:08.160 --> 00:05:10.894
The difference between app and
a router is one thing.

92
00:05:10.894 --> 00:05:14.795
The app is the entire API.

93
00:05:14.795 --> 00:05:18.571
A router is just like a sub part of it.

94
00:05:18.571 --> 00:05:23.984
So you can have different branches in your
API that have their own configuration,

95
00:05:23.984 --> 00:05:28.544
their own options, their own stack
that merges with the global one.

96
00:05:28.544 --> 00:05:33.410
So the app will always be the global one,
but the routers can be sub routers,

97
00:05:33.410 --> 00:05:36.312
sub apps that have their
own configuration.

98
00:05:36.312 --> 00:05:40.602
So we're gonna make an app or we're gonna
make a router here called router and

99
00:05:40.602 --> 00:05:42.059
that's gonna be our API.

100
00:05:42.059 --> 00:05:44.678
And the reason we're doing that
is we're gonna have one or

101
00:05:44.678 --> 00:05:47.463
two routes that don't share
the same configuration is this.

102
00:05:47.463 --> 00:05:51.130
For instance, everything that's gonna be
here is probably gonna be authenticated.

103
00:05:51.130 --> 00:05:53.530
You're gonna need to pass
me a token to use it.

104
00:05:53.530 --> 00:05:55.570
We're going to lock these routes down.

105
00:05:55.570 --> 00:05:59.031
But, we still need to allow users
to be able to sign up and sign in.

106
00:05:59.031 --> 00:06:03.070
Imagine an app saying you can't sign
up unless you're already signed in.

107
00:06:03.070 --> 00:06:05.320
That wouldn't make any sense.

108
00:06:05.320 --> 00:06:07.705
But that what would happen if
we added those routes here, so

109
00:06:07.705 --> 00:06:11.251
we're gonna make a separate sub router for
everything that needs to be authenticated.

110
00:06:11.251 --> 00:06:15.190
And it will have something else for things
that don't need to be authenticated.

111
00:06:15.190 --> 00:06:18.323
That way we don't have to do if
statements in our code somewhere like,

112
00:06:18.323 --> 00:06:21.089
if it's this route, don't check for
auth, that will be gross.

113
00:06:21.089 --> 00:06:22.434
So we need to separate them out.

114
00:06:25.118 --> 00:06:27.992
Okay, so
let's make the stuff our resources.

115
00:06:27.992 --> 00:06:31.895
So I'm gonna say router and
let's start talking about CRUD.

116
00:06:31.895 --> 00:06:35.610
So I'm gonna say get,
request for /product.

117
00:06:35.610 --> 00:06:38.430
So this means I wanna get all
the products, so I'm just gonna do that.

118
00:06:39.510 --> 00:06:42.491
And I'm not gonna put
anything in these handlers,

119
00:06:42.491 --> 00:06:45.274
we're gonna come back
to these handlers soon.

120
00:06:45.274 --> 00:06:46.115
Wanna copy that?

121
00:06:46.115 --> 00:06:49.235
So that's for the get all the products.

122
00:06:49.235 --> 00:06:53.576
Now I wanna be able to get one product so
I can say id and

123
00:06:53.576 --> 00:06:58.740
express when you do something
like this like :id.

124
00:06:58.740 --> 00:07:01.740
First, I can put colon whatever
the hell I want it doesn't matter.

125
00:07:01.740 --> 00:07:04.753
This just means that this is a variable.

126
00:07:04.753 --> 00:07:09.416
This means that, I don't know what
the value of this is gonna be and

127
00:07:09.416 --> 00:07:12.332
it doesn't matter I'm making a route for

128
00:07:12.332 --> 00:07:16.682
a get request/product / anything
else that comes after it.

129
00:07:16.682 --> 00:07:19.409
I don't care what it is,
I'm calling it id, so

130
00:07:19.409 --> 00:07:23.843
when I reference it later in my code I
know that it's called id, and I'll show

131
00:07:23.843 --> 00:07:28.470
you where we're gonna reference it, but
you can call this whatever you want.

132
00:07:28.470 --> 00:07:31.815
It's just saying like,
this is what's called a route parameter.

133
00:07:31.815 --> 00:07:33.532
It's a parameter, it's dynamic.

134
00:07:33.532 --> 00:07:35.001
We don't know what it's gonna.

135
00:07:35.001 --> 00:07:37.429
We just wanna catch everything
that looks like this.

136
00:07:37.429 --> 00:07:39.408
It's a URL that has
something after product.

137
00:07:41.570 --> 00:07:42.761
So we got that.

138
00:07:42.761 --> 00:07:48.967
Now we wanna be able to
update a product by given id.

139
00:07:48.967 --> 00:07:53.335
We can't update a product unless we know
what products update so we need an id.

140
00:07:53.335 --> 00:07:56.361
We also want to be able
to create a product,

141
00:07:56.361 --> 00:08:01.658
you don't need an id to create a product
because you don't have the id yet,

142
00:08:01.658 --> 00:08:05.124
you're creating it so
that doesn't need an id.

143
00:08:05.124 --> 00:08:08.317
You just post to products to create
an id or to create a product.

144
00:08:10.773 --> 00:08:14.222
And then lastly, we can delete
a products and we will need an id for

145
00:08:14.222 --> 00:08:18.635
that because how do you know what products
to delete if you don't have the id for it?

146
00:08:25.335 --> 00:08:28.080
All right, so
those are all the products stuff.

147
00:08:33.581 --> 00:08:35.709
And then it's mostly the same for
everything else, right.

148
00:08:35.709 --> 00:08:38.456
So I can just copy all these.

149
00:08:38.456 --> 00:08:39.850
And let's do the one for updates.

150
00:08:42.515 --> 00:08:47.677
Paste that down here and I'm just gonna
change all this to update, like that.

151
00:08:52.157 --> 00:08:55.286
I say mostly the same
because it is until it isn't.

152
00:08:55.286 --> 00:08:57.971
We'll probably have to go back and
like, that doesn't make sense.

153
00:08:57.971 --> 00:09:01.727
We don't want people to, I don't know,
delete updates for some reason.

154
00:09:01.727 --> 00:09:05.899
I don't know, some things won't make
sense depending on whatever experience

155
00:09:05.899 --> 00:09:07.810
you're trying to enable.

156
00:09:07.810 --> 00:09:14.658
And then for the last one, we have
the Update Points, Update Points I guess.

157
00:09:14.658 --> 00:09:18.750
And same thing,
now replace all the products with

158
00:09:18.750 --> 00:09:23.140
updatepoints all lowercase intentionally.

159
00:09:23.140 --> 00:09:27.638
I typically don't like camel case in URLs
because I think it's just so annoying to

160
00:09:27.638 --> 00:09:32.130
write that in the URL in my opinion, so
obviously it's keep them all lowercase.

161
00:09:32.130 --> 00:09:36.074
I also don't do underscores in my URL
because I also think it's annoying

162
00:09:36.074 --> 00:09:36.663
to write.

163
00:09:36.663 --> 00:09:38.079
So I'll just keep them all lowercase.

164
00:09:40.606 --> 00:09:42.169
I don't mind writing and administering.

165
00:09:42.169 --> 00:09:43.467
I just hate writing them in the URL.

166
00:09:46.711 --> 00:09:51.301
To me it seems junky,
I'll use someone's URL for the API and

167
00:09:51.301 --> 00:09:55.261
there's a lowercase in it or
a camel case I'm like,

168
00:09:55.261 --> 00:09:59.313
I don't wanna use it now,
I don't know it's kinda.

169
00:09:59.313 --> 00:10:02.039
&gt;&gt; When would you use patch versus put?

170
00:10:02.039 --> 00:10:02.867
&gt;&gt; Yeah, that's a great question.

171
00:10:02.867 --> 00:10:04.436
When would we use patch versus put?

172
00:10:04.436 --> 00:10:09.338
So technically, well first of all,
you can just use Git for anything,

173
00:10:09.338 --> 00:10:12.180
you don't have to use any of this stuff.

174
00:10:12.180 --> 00:10:15.090
This is just what's recommended
if you following REST.

175
00:10:15.090 --> 00:10:20.930
But technically, if you're following REST,
put and patch the difference is put,

176
00:10:20.930 --> 00:10:25.135
for instance, if I was going to
make a put request to update.

177
00:10:25.135 --> 00:10:29.418
Whatever I sent up on that request,
whatever data I sent up would replace

178
00:10:29.418 --> 00:10:32.716
the entire update in a database
with whatever I sent up,

179
00:10:32.716 --> 00:10:34.765
it will get completely replaced.

180
00:10:34.765 --> 00:10:36.958
The only thing that will stay
the same would be the id.

181
00:10:36.958 --> 00:10:38.349
Everything else will get replaced.

182
00:10:38.349 --> 00:10:43.985
Patch doesn't do that, it will just only
update the properties that you sent up and

183
00:10:43.985 --> 00:10:48.187
keep everything else the same,
so that's the differences.

184
00:10:48.187 --> 00:10:53.177
Put completely replaces patches, but

185
00:10:53.177 --> 00:10:58.628
I just use almost never replace anything.

186
00:10:58.628 --> 00:11:00.626
So I'll just use put as patch and

187
00:11:00.626 --> 00:11:04.994
I just don't use patch because I
don't wanna replace all that stuff.

188
00:11:04.994 --> 00:11:09.243
I didn't have the clients and
all that stuff up I don't know and

189
00:11:09.243 --> 00:11:12.786
then validate all that stuff
I don't wanna do that.

190
00:11:12.786 --> 00:11:14.788
So, I actually just don't use patch,

191
00:11:14.788 --> 00:11:17.348
I just put as patch I just
never replace anything.

192
00:11:17.348 --> 00:11:19.840
&gt;&gt; Would you recommend gRPC over REST?

193
00:11:21.050 --> 00:11:23.669
&gt;&gt; Actually do like
gRPC it's pretty clean.

194
00:11:23.669 --> 00:11:30.697
I would recommend using gRPC if your
API was serving the purposes this one.

195
00:11:30.697 --> 00:11:36.400
As in, it's only gonna be used internally,
for a client that you also work on.

196
00:11:36.400 --> 00:11:39.744
So if it's, we're making an API for
this front end app that we're making.

197
00:11:39.744 --> 00:11:41.865
We're making an API for
this mobile app that we're making.

198
00:11:41.865 --> 00:11:43.592
Yeah, gRPC all the way.

199
00:11:43.592 --> 00:11:46.067
I don't think I would use REST for
that, it doesn't make sense.

200
00:11:46.067 --> 00:11:49.849
I don't need it to be broken up per
resource like this because what happens

201
00:11:49.849 --> 00:11:52.843
is, if you do it the way that
we're doing it out with REST.

202
00:11:52.843 --> 00:11:56.568
And then you go build out your
dashboard that's using this,

203
00:11:56.568 --> 00:12:01.463
there's gonna be a page on it that needs
updates, it also needs update points,

204
00:12:01.463 --> 00:12:04.407
it also needs products and
it also needs users.

205
00:12:04.407 --> 00:12:09.341
And because the way that we designed this,
there'll be five different API calls,

206
00:12:09.341 --> 00:12:09.843
right.

207
00:12:09.843 --> 00:12:14.378
Whereas gRPC would be, no I'm just gonna
just call this one function that gets

208
00:12:14.378 --> 00:12:17.243
every single thing in the exact
way that I need it for

209
00:12:17.243 --> 00:12:20.062
this page,
because it's never going to change.

210
00:12:20.062 --> 00:12:23.381
Because it's for the app and
if it does change, I can change it,

211
00:12:23.381 --> 00:12:25.425
because I also build the front of that.

212
00:12:25.425 --> 00:12:28.708
So, I think gRPC is great for
that, but it's not great for

213
00:12:28.708 --> 00:12:33.009
this is an external API that developers
are gonna consume inside their app.

214
00:12:33.009 --> 00:12:36.737
Okay, yeah, maybe gRPC is not it for
them because it's too specialized,

215
00:12:36.737 --> 00:12:39.949
you don't know what their use
cases are for consuming your API.

216
00:12:39.949 --> 00:12:44.412
So you have to be generic like this
with REST and if you're gonna monetize

217
00:12:44.412 --> 00:12:49.670
your API kinda benefits you to make
them make more API calls, I guess.

218
00:12:49.670 --> 00:12:50.924
Yeah, good question.

219
00:12:50.924 --> 00:12:51.524
Yeah, [INAUDIBLE].

220
00:12:51.524 --> 00:12:55.209
&gt;&gt; Well, I've heard of tRPC, is that
just the type-safe version of gRPC?

221
00:12:55.209 --> 00:12:57.721
&gt;&gt; Yeah, tRPC is something new.

222
00:12:57.721 --> 00:12:59.521
It's yeah,
it's just like the TypeScript version.

223
00:12:59.521 --> 00:13:03.880
It kind of basically does what Prisma
does with the generation of the client

224
00:13:03.880 --> 00:13:06.439
except for it doesn't need to generate it,

225
00:13:06.439 --> 00:13:10.055
it just does it automatically
using the power of TypeScript.

226
00:13:10.055 --> 00:13:15.123
So there's no step in between of a command
you have to run to get the type checking,

227
00:13:15.123 --> 00:13:19.464
it just works out of the box and
you can get the same thing with GraphQL.

228
00:13:19.464 --> 00:13:24.104
But you have to run a command, you have to
take my GraphQL schema and output these

229
00:13:24.104 --> 00:13:28.902
TypeScript types that I can import into my
react app and get those type check data.

230
00:13:28.902 --> 00:13:30.852
TRPC is like we just do that for

231
00:13:30.852 --> 00:13:36.089
you without having to type anything
through the magical powers of TypeScript.

232
00:13:36.089 --> 00:13:37.660
It's actually be on me.

233
00:13:37.660 --> 00:13:41.919
I don't know how they do that in
TypeScript, so, but it is pretty powerful.

234
00:13:41.919 --> 00:13:45.871
I've tried it before,
I think they had to sacrifice a lot of

235
00:13:45.871 --> 00:13:49.044
developer experience in
order to enable that.

236
00:13:49.044 --> 00:13:50.979
So I like that it works magically, but

237
00:13:50.979 --> 00:13:53.467
I don't like using it
it's not pleasant to use.

238
00:13:53.467 --> 00:13:57.954
Is like using RxJS it's like I like it,
it's cool but

239
00:13:57.954 --> 00:14:01.555
it's so hard to use, why would I use this?

240
00:14:01.555 --> 00:14:04.420
So, yeah, but maybe it'll come along.

