WEBVTT

1
00:00:00.000 --> 00:00:06.774
Awesome, okay, so
we just did a lot on that HelloWorld API.

2
00:00:06.774 --> 00:00:09.133
And there's probably some things if
you've never built an API before,

3
00:00:09.133 --> 00:00:09.913
they were like, what.

4
00:00:09.913 --> 00:00:11.450
I don't know how a lot
of this stuff works.

5
00:00:11.450 --> 00:00:14.392
So, I was trying to be
vague as much as I can, so

6
00:00:14.392 --> 00:00:18.700
I can actually get to this point on
this page and not have to be moved.

7
00:00:18.700 --> 00:00:19.990
But, let's talk about a little bit.

8
00:00:19.990 --> 00:00:26.655
So, every API ever shares a common makeup.

9
00:00:26.655 --> 00:00:28.400
It really doesn't matter what
the language or the environment is.

10
00:00:28.400 --> 00:00:33.188
So if you've ever built anything
else with like Laravel or Django or

11
00:00:33.188 --> 00:00:35.793
Rails, it really doesn't matter.

12
00:00:35.793 --> 00:00:39.230
They all have the same little
parts that that make them up.

13
00:00:39.230 --> 00:00:40.460
So I wanna talk about those parts.

14
00:00:40.460 --> 00:00:46.337
The first one is the server, okay, so we
just made a server that had an API, okay.

15
00:00:46.337 --> 00:00:50.582
The API is the code that runs on
the server, they're two different things.

16
00:00:50.582 --> 00:00:54.567
But people use them synonymously,
when you hear people say API or

17
00:00:54.567 --> 00:00:59.727
people say server they're talking about
the same thing, they're one in the same.

18
00:00:59.727 --> 00:01:01.360
But technically they're
two different things.

19
00:01:01.360 --> 00:01:05.240
You can have a server
that doesn't have an API.

20
00:01:05.240 --> 00:01:06.938
And I guess technically,

21
00:01:06.938 --> 00:01:11.269
you could have an API that doesn't
have a server [LAUGH] now you can.

22
00:01:11.269 --> 00:01:13.650
But, they are definitely
two different things.

23
00:01:13.650 --> 00:01:17.690
A server is basically an app that
has no visual representation and

24
00:01:17.690 --> 00:01:19.459
is always running, right.

25
00:01:19.459 --> 00:01:23.695
So you might be using an app in
the browser that has some type of UI but

26
00:01:23.695 --> 00:01:27.099
a server is also an app,
it just doesn't have a visual

27
00:01:27.099 --> 00:01:31.280
thing the way you look at a service
through the logs of a terminal.

28
00:01:31.280 --> 00:01:33.797
That's the server's visual output, right.

29
00:01:33.797 --> 00:01:38.742
It's usually connected to a network and
shared amongst many different clients, so

30
00:01:38.742 --> 00:01:43.890
other UIs, web apps, mobile apps,
other services, or the servers.

31
00:01:43.890 --> 00:01:48.860
Servers usually sit in front of a database
and facilitates access to that database.

32
00:01:48.860 --> 00:01:55.258
That's the main use case I would say for
most servers, it's literally a gatekeeper.

33
00:01:55.258 --> 00:01:58.710
It's like the people that sit,
a bouncer at a club and

34
00:01:58.710 --> 00:02:02.641
the club the database basically,
that's what a server is.

35
00:02:02.641 --> 00:02:06.514
And that bouncer has its own
rules on what he wants to do and

36
00:02:06.514 --> 00:02:12.018
they never get off they just work there
24/7, they just never have time off.

37
00:02:12.018 --> 00:02:16.229
That's basically the server is.

38
00:02:16.229 --> 00:02:18.555
And basically in order to do that,

39
00:02:18.555 --> 00:02:23.540
there's some little networking things
that are involved with servers.

40
00:02:23.540 --> 00:02:27.520
So, one thing is that servers
must operate on a port.

41
00:02:27.520 --> 00:02:30.850
So if I go back to the code that we just
wrote, this number here, that's a port.

42
00:02:32.000 --> 00:02:33.653
This is a port on your computer.

43
00:02:33.653 --> 00:02:39.876
And you can think of a port almost like a
port in a ship dock, it's kinda the same.

44
00:02:39.876 --> 00:02:42.929
It basically, is just like some number,
typically four digits,

45
00:02:42.929 --> 00:02:44.079
sometimes five digits.

46
00:02:44.079 --> 00:02:49.200
But it's like a virtual place on
your computer's operating system,

47
00:02:49.200 --> 00:02:52.337
where network connections start and end.

48
00:02:52.337 --> 00:02:55.873
So, you cannot interface with
anything on a network without

49
00:02:55.873 --> 00:02:57.990
it being attached to a port.

50
00:02:57.990 --> 00:03:02.269
Just like you can't interface with
your boat unless you pull into a port,

51
00:03:02.269 --> 00:03:05.995
no one's gonna come unload stuff
unless you pull into the port,

52
00:03:05.995 --> 00:03:08.847
that's the way that you
connect to the network.

53
00:03:08.847 --> 00:03:10.652
So you need a port and
it has to be unique.

54
00:03:10.652 --> 00:03:13.590
You can't have more than
one thing on the same port.

55
00:03:13.590 --> 00:03:15.731
In fact,
you'll get an error if you try to do that.

56
00:03:15.731 --> 00:03:20.231
If I tried to start another server right
now, on 3001 while another one's running,

57
00:03:20.231 --> 00:03:24.382
it will say no, that ports being used
right now someone's already parked there.

58
00:03:24.382 --> 00:03:28.780
So you can't, pick another number, okay.

59
00:03:28.780 --> 00:03:31.870
And then you have something
like an IP address.

60
00:03:31.870 --> 00:03:36.222
So an IP address is that unique location
of where the server is located on

61
00:03:36.222 --> 00:03:37.100
the network.

62
00:03:37.100 --> 00:03:39.180
You can think of it as
the address to your home.

63
00:03:39.180 --> 00:03:41.286
It's unique,
that's how the Mill and UPS and

64
00:03:41.286 --> 00:03:44.311
FedEx that's how they find you
because you have a unique address.

65
00:03:44.311 --> 00:03:47.458
If your address wasn't unique, and
someone else had the same address as you,

66
00:03:47.458 --> 00:03:49.186
how do they know which
one to deliver it to?

67
00:03:49.186 --> 00:03:50.620
That will be weird, right.

68
00:03:50.620 --> 00:03:53.984
So an IP address is unique on
the network that it's on and

69
00:03:53.984 --> 00:03:57.002
the internet is the biggest
network in the world.

70
00:03:57.002 --> 00:04:01.410
So, every IP address on
the internet has to be unique.

71
00:04:01.410 --> 00:04:05.495
On locally right now,
it only has to be unique for

72
00:04:05.495 --> 00:04:10.150
your computer so
it's less sensitive there.

73
00:04:10.150 --> 00:04:15.205
But basically an IP address just helps
traffic go to and from a specific device

74
00:04:15.205 --> 00:04:20.880
whereas a port allows targeting of
specific services or apps on that device.

75
00:04:20.880 --> 00:04:23.419
So, if I wanna locate a computer,

76
00:04:23.419 --> 00:04:28.550
like google.com, this would be
an alias for their IP address.

77
00:04:28.550 --> 00:04:32.930
This will take me to their server.

78
00:04:32.930 --> 00:04:36.262
And what you don't know is that there
actually is a port here called 80,

79
00:04:36.262 --> 00:04:40.500
is that most browsers just take that
away cuz it's always 80, but it's there.

80
00:04:40.500 --> 00:04:45.427
And 80 is the port on Google server that's
gonna show me the HTML page that shows

81
00:04:45.427 --> 00:04:47.030
me the Google search box.

82
00:04:47.030 --> 00:04:48.543
That's what they decided to put there.

83
00:04:48.543 --> 00:04:51.330
So when I go there,
I'm connecting to that service.

84
00:04:51.330 --> 00:04:55.470
But locally, they might have other ports
that have other services that they use,

85
00:04:55.470 --> 00:04:57.390
whether we have access to them or not.

86
00:04:57.390 --> 00:05:01.808
So yeah, that's ports, that's IP
addresses and it looks like this.

87
00:05:01.808 --> 00:05:04.550
So, you can see here this
will be an IP address.

88
00:05:04.550 --> 00:05:06.973
This is actually the IP address for
a localhost,

89
00:05:06.973 --> 00:05:09.762
which is the server running
on your computer right now.

90
00:05:09.762 --> 00:05:15.730
Everyone has a server on their computers
called localhost and that's the Alias.

91
00:05:15.730 --> 00:05:18.236
But the official IP address
forward is this and

92
00:05:18.236 --> 00:05:20.620
then everything after
the code is the port.

93
00:05:20.620 --> 00:05:23.627
&gt;&gt; Just wanted to confirm,
I think localhost is usually 127.

94
00:05:23.627 --> 00:05:24.332
&gt;&gt; Is it 127, what did I put?

95
00:05:24.332 --> 00:05:25.400
&gt;&gt; You got 121.

96
00:05:25.400 --> 00:05:28.544
&gt;&gt; Yeah, it is 127, you're right, damn.

97
00:05:28.544 --> 00:05:30.723
All right, and then, a route.

98
00:05:30.723 --> 00:05:31.455
Let's talk about routes.

99
00:05:31.455 --> 00:05:35.930
So, a route is a unique combination
of a URL path and an HTTP method.

100
00:05:35.930 --> 00:05:39.795
So routes are used to
locate certain resources or

101
00:05:39.795 --> 00:05:42.631
trigger certain actions on an API.

102
00:05:42.631 --> 00:05:46.833
And basically, you can think of them as,
if you're on the front end and

103
00:05:46.833 --> 00:05:50.488
click is the name of an event,
a route is the name of the event.

104
00:05:50.488 --> 00:05:54.680
And it's a combination of
the path you wanna go to plus

105
00:05:54.680 --> 00:05:58.605
the HTTP method that you're trying to do,
okay.

106
00:05:58.605 --> 00:06:03.526
So, an examples of methods are the least
the most common ones that are built into

107
00:06:03.526 --> 00:06:08.078
HTTP are GET, so we did GET that's
the one that we check for in our server,

108
00:06:08.078 --> 00:06:09.782
we check for a get request.

109
00:06:09.782 --> 00:06:14.608
Typically it's used to show intent of,
I wanna get information from API.

110
00:06:14.608 --> 00:06:20.060
Then there's POST, POST is typically used
to mutate or create information on API.

111
00:06:20.060 --> 00:06:22.267
Usually there's some data
being sent along with it.

112
00:06:22.267 --> 00:06:25.726
Then there's PUT,
PUT is usually used to be for

113
00:06:25.726 --> 00:06:28.760
replacing existing information on API.

114
00:06:28.760 --> 00:06:31.220
It also has data typically
sent along with it.

115
00:06:31.220 --> 00:06:35.780
PATCH is like PUT but
it doesn't replace it, it just updates it.

116
00:06:35.780 --> 00:06:37.710
So, it doesn't actually
swap something out.

117
00:06:37.710 --> 00:06:42.392
It just changes something a little but it
also usually has data sent along with it.

118
00:06:42.392 --> 00:06:44.102
And then DELETE is exactly
what it sounds like.

119
00:06:44.102 --> 00:06:48.007
It's typically used for deleting things
off of an API, some information.

120
00:06:48.007 --> 00:06:50.578
And then you have this
other one called OPTIONS.

121
00:06:50.578 --> 00:06:55.056
This one is used by something called CORS,
we'll talk about CORS, but it's basically

122
00:06:55.056 --> 00:06:58.824
browsers are like super sketchy about
allowing you to talk to other APIs.

123
00:06:58.824 --> 00:07:02.562
So they implemented this security check
to make sure you have permission to talk

124
00:07:02.562 --> 00:07:03.133
to the API.

125
00:07:03.133 --> 00:07:08.108
That security check is called CORS and
the way they do that is by

126
00:07:08.108 --> 00:07:13.466
sending up some HB medical options
basically it's like, hey Mr.

127
00:07:13.466 --> 00:07:18.741
API, what are your options for
this client trying to talk to you?

128
00:07:18.741 --> 00:07:19.380
And that's what that is.

129
00:07:19.380 --> 00:07:22.612
So, those are the most
common HTTP methods.

130
00:07:22.612 --> 00:07:25.150
There's more, but
I doubt you'll ever use them.

131
00:07:25.150 --> 00:07:29.780
You're probably only ever use these and
you probably won't even use OPTIONS.

132
00:07:29.780 --> 00:07:35.110
You're probably only ever use, GraphQL
you're only ever to use this or this.

133
00:07:35.110 --> 00:07:36.308
You wanna use anything else.

134
00:07:36.308 --> 00:07:37.942
It depends on what you're doing.

135
00:07:37.942 --> 00:07:43.001
But for the most part,
this is what HTTP is made of.

136
00:07:43.001 --> 00:07:44.524
And here's an example what
a route will look like.

137
00:07:44.524 --> 00:07:50.519
So a route, I said,
it's a combination of a method and a path.

138
00:07:50.519 --> 00:07:58.075
So in this case, this is a GET request
to whatever your URL is/api/user/1.

139
00:07:58.075 --> 00:08:03.377
Another example would be POST
to whatever your URL is/ food.

140
00:08:04.524 --> 00:08:08.779
And that is the unique combination
that triggers an event.

141
00:08:08.779 --> 00:08:15.005
So really an API is about registering
all of these unique URL combinations and

142
00:08:15.005 --> 00:08:18.858
then creating functions
that respond to them.

143
00:08:18.858 --> 00:08:21.919
It's literally an event based application.

144
00:08:27.146 --> 00:08:31.415
And the tough part about this is that,
engineers just do whatever they want.

145
00:08:31.415 --> 00:08:35.422
Even though we talked about
these methods in these routes.

146
00:08:35.422 --> 00:08:40.260
Yeah, that's true for pretty much every
single server and server technology.

147
00:08:40.260 --> 00:08:43.069
But that doesn't mean
engineers wanna do it,

148
00:08:43.069 --> 00:08:46.679
some people just don't even
respect they gets to the POST.

149
00:08:46.679 --> 00:08:50.097
They might treat a POST like a GET,
they might treat a DELETE like a POST.

150
00:08:50.097 --> 00:08:52.090
There's nothing stopping
you from doing it.

151
00:08:52.090 --> 00:08:52.900
You can do whatever you want.

152
00:08:52.900 --> 00:08:59.370
It's your code, that's why we have come up
with different design patterns for API.

153
00:08:59.370 --> 00:09:04.101
So we can all agree that hey,
if you adopt this design pattern,

154
00:09:04.101 --> 00:09:07.597
I should expect your API
to work a certain way.

155
00:09:07.597 --> 00:09:09.418
And the most popular one is called REST.

156
00:09:09.418 --> 00:09:12.410
And we're gonna be
talking about REST here.

157
00:09:12.410 --> 00:09:16.742
There's others like gRPC, GraphQL, and
Protobuf, that do different things,

158
00:09:16.742 --> 00:09:20.090
but we'll be talking
about REST in this one.

159
00:09:20.090 --> 00:09:24.479
And how loose it is
because it is very loose.

160
00:09:24.479 --> 00:09:27.009
I don't think anyone does REST
the way that you're supposed to do it.

161
00:09:27.009 --> 00:09:27.681
I don't think he can.

162
00:09:27.681 --> 00:09:30.960
I don't think it's possible,
in my opinion.

163
00:09:30.960 --> 00:09:32.770
But, we're gonna try it.

164
00:09:32.770 --> 00:09:34.130
Last one here is route handlers.

165
00:09:34.130 --> 00:09:35.860
So, what is a route handler?

166
00:09:35.860 --> 00:09:38.980
A route handler is this,
this callback right here.

167
00:09:38.980 --> 00:09:40.200
That's a route handler.

168
00:09:40.200 --> 00:09:44.278
It's just a function that responds
to an event just like a handler for

169
00:09:44.278 --> 00:09:46.930
a click event or a hover event.

170
00:09:46.930 --> 00:09:48.700
That's basically what it is.

171
00:09:48.700 --> 00:09:50.248
Typically what you do in a route handlers,

172
00:09:50.248 --> 00:09:52.660
this is where you would
talk to the database.

173
00:09:52.660 --> 00:09:54.530
This is where all the magic happens.

174
00:09:54.530 --> 00:09:58.106
This is the thing you're trying
to protect is the route handler.

175
00:09:58.106 --> 00:09:59.850
So, that's why you have
a server in the first place.

176
00:09:59.850 --> 00:10:03.923
Cause if you think about how a client
works, when we all go to the same website,

177
00:10:03.923 --> 00:10:06.160
we all get our own
version of that website.

178
00:10:07.200 --> 00:10:10.546
But, when each version of that
website talks to the server,

179
00:10:10.546 --> 00:10:13.290
we're all talking to the same server.

180
00:10:13.290 --> 00:10:14.793
There's only one server for

181
00:10:14.793 --> 00:10:18.150
all of the copies of the website
that we're looking at.

182
00:10:18.150 --> 00:10:23.322
So the server needs to be able to respond
to all of us and that's how it does it by

183
00:10:23.322 --> 00:10:29.280
having a route handler responding to
each and one of our individual requests.

184
00:10:29.280 --> 00:10:32.631
And I think that's the different approach
coming from front end is that you gotta

185
00:10:32.631 --> 00:10:35.835
realize you're not building an app for
one user, you're building an app for

186
00:10:35.835 --> 00:10:36.690
every user.

187
00:10:36.690 --> 00:10:39.088
Every user ever is gonna
use this at the same time.

188
00:10:39.088 --> 00:10:42.739
And it has to respond to that and
it's a different concern.

