WEBVTT

1
00:00:00.000 --> 00:00:03.284
Let's just add one or
a few of these and see what happens.

2
00:00:03.284 --> 00:00:06.422
So I'm gonna go back to the router,
go to the product.

3
00:00:06.422 --> 00:00:10.617
We don't have any products, so even if
I get these, nothing's gonna come back.

4
00:00:10.617 --> 00:00:15.016
But let's just do it anyway,
just to make sure it actually triggers it.

5
00:00:15.016 --> 00:00:22.332
So get rid of that in line one, and I'm
just gonna say, getOneProduct like that.

6
00:00:22.332 --> 00:00:25.476
That's it, so I have getOneProduct.

7
00:00:25.476 --> 00:00:28.109
I'm going to start and stop my server.

8
00:00:32.116 --> 00:00:37.622
Gonna go back to Thunder Client, hopefully
I still have my API keys in there.

9
00:00:37.622 --> 00:00:38.649
Let's see, I do.

10
00:00:38.649 --> 00:00:46.885
And then I'm gonna try to get one product
with an ID that I know doesn't exist.

11
00:00:46.885 --> 00:00:51.686
Change this to GET, also I'm gonna
get all products, I believe,

12
00:00:51.686 --> 00:00:56.502
that's the one we just added
the handler two, all products.

13
00:00:56.502 --> 00:01:02.767
Why did I put getOne,
it should we getMany, getProducts,

14
00:01:02.767 --> 00:01:07.092
or there we go, getProducts.

15
00:01:07.092 --> 00:01:10.628
So getProducts and I get one.

16
00:01:10.628 --> 00:01:13.847
Restart my server,
then I can go back here,

17
00:01:13.847 --> 00:01:18.290
try to get all the products,
make sure my API key is in there.

18
00:01:18.290 --> 00:01:23.410
Try to run this, and
you can see nothing failed.

19
00:01:23.410 --> 00:01:32.037
We satisfied the authentication
by making sure there was API key.

20
00:01:32.037 --> 00:01:37.230
We satisfied any input, which for a GET
request, there was none, so that was good.

21
00:01:37.230 --> 00:01:41.892
And then the handler,
indeed ,tried to query the database.

22
00:01:41.892 --> 00:01:46.810
It just got back into your
array because we don't have any

23
00:01:46.810 --> 00:01:49.889
products in the database, right?

24
00:01:49.889 --> 00:01:52.351
And again, we can check that,

25
00:01:52.351 --> 00:01:56.631
we can see what's in the database
if we just type out,

26
00:01:57.678 --> 00:02:02.648
npx prisma studio,
you can see what's in the database.

27
00:02:02.648 --> 00:02:07.177
So right now,
I can see that I have two users.

28
00:02:07.177 --> 00:02:10.633
I have zero products, so that's why
I got back empty array for products,

29
00:02:10.633 --> 00:02:11.653
there are none here.

30
00:02:11.653 --> 00:02:13.721
I can go in here and I can make one.

31
00:02:13.721 --> 00:02:17.250
If I make a product,
I can fill this stuff out and

32
00:02:17.250 --> 00:02:22.468
it'll show me a product, but
I'm not doing it here, that's gross.

33
00:02:26.201 --> 00:02:28.781
Cool, let's add another one.

34
00:02:30.686 --> 00:02:35.064
I always think this Thunder Client is
another app, so I tab away from it.

35
00:02:35.064 --> 00:02:38.285
[LAUGH] But it's in VS code and
it's messing me up.

36
00:02:38.285 --> 00:02:40.090
I need to put it in another window or
something.

37
00:02:40.090 --> 00:02:48.511
Okay, let's do,
Let's go back to the router, okay.

38
00:02:48.511 --> 00:02:53.563
So let's actually create one then, since
I could do the get one and update and

39
00:02:53.563 --> 00:02:58.553
nothing's actually gonna happen,
cuz none exists, but we can do create.

40
00:02:58.553 --> 00:03:00.310
So let's add that.

41
00:03:00.310 --> 00:03:07.823
Let's get rid of this generic one here,
and we'll say create,

42
00:03:07.823 --> 00:03:12.880
Product, there we go, createProduct.

43
00:03:12.880 --> 00:03:15.948
So let's look at this chain right here.

44
00:03:15.948 --> 00:03:20.820
So on a post/product, check to see
that they actually posted a body

45
00:03:20.820 --> 00:03:24.666
object with the name field
on it that's a string, and

46
00:03:24.666 --> 00:03:30.240
then check to make sure that that's true,
and then run the handler, right?

47
00:03:30.240 --> 00:03:34.957
And don't forget that
there's an authentication

48
00:03:34.957 --> 00:03:40.450
middleware running in front of
all of these on server here.

49
00:03:40.450 --> 00:03:44.040
So all that's happening before
it gets to the handler.

50
00:03:44.040 --> 00:03:46.322
And when it finally gets to the handler,
we can just focus on the business logic.

51
00:03:48.715 --> 00:03:53.006
Okay, let's try that.

52
00:03:57.183 --> 00:04:02.494
I'm gonna run that, and
I'm gonna go to Thunder Client here.

53
00:04:02.494 --> 00:04:06.851
I'm just gonna say POST to API product,
I have my bearer.

54
00:04:06.851 --> 00:04:13.050
So if I try to post right now with nothing
in the body, let's just see what happens.

55
00:04:13.050 --> 00:04:16.352
Obviously, we can't,
that fails the validation of the input,

56
00:04:16.352 --> 00:04:18.163
just checking to see if that works.

57
00:04:18.163 --> 00:04:21.360
But now, we can say,
yeah, I do want a name.

58
00:04:21.360 --> 00:04:28.763
And my product's gonna be called,
Note Stuff app.

59
00:04:28.763 --> 00:04:32.350
So I can send that up.

60
00:04:32.350 --> 00:04:33.870
And voila, I get back a product.

61
00:04:33.870 --> 00:04:35.581
I created a product in the database.

62
00:04:35.581 --> 00:04:38.854
I put everything on the data field,
so it looks nice.

63
00:04:38.854 --> 00:04:42.949
And you can see, here's the product
ID that it was created at.

64
00:04:42.949 --> 00:04:47.962
Here's the name of it, and
here's who it belongs to, right?

65
00:04:47.962 --> 00:04:53.397
And if you wanted to visualize that,
again, you can do the npx Prisma Dtudio.

66
00:04:53.397 --> 00:04:56.990
And you can go back here, and you'll
see there's a product and a database.

