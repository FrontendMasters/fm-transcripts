WEBVTT

1
00:00:00.230 --> 00:00:04.376
Okay, so what we're gonna do is something
I was really considering teaching.

2
00:00:04.376 --> 00:00:06.651
Cuz I'm like,
it's not really necessary, but

3
00:00:06.651 --> 00:00:10.441
I think it's such a great foundation to
understand this and to be able to do this.

4
00:00:10.441 --> 00:00:16.178
It's creating a configuration for
your API that's flexible.

5
00:00:16.178 --> 00:00:21.319
And it allows you to change things
on the fly with minimum effort.

6
00:00:21.319 --> 00:00:24.877
So we can create a configuration that's
based off an environment, and it changes.

7
00:00:24.877 --> 00:00:27.898
So when we go deploy to
different environments,

8
00:00:27.898 --> 00:00:32.551
we don't have to change much, and
our API becomes environment-driven.

9
00:00:32.551 --> 00:00:36.908
So it can adapt and change based off
some variables, versus us like, wait,

10
00:00:36.908 --> 00:00:39.678
I gotta make a PR to change
this to work for staging.

11
00:00:39.678 --> 00:00:43.967
It's like, we don't have to, just change
out this environment variable and

12
00:00:43.967 --> 00:00:44.962
then we're good.

13
00:00:44.962 --> 00:00:45.921
So that's what I wanna do.

14
00:00:45.921 --> 00:00:49.630
So please follow along,
I have the code right here.

15
00:00:49.630 --> 00:00:53.113
This one actually won't
be too much to follow,

16
00:00:53.113 --> 00:00:57.480
as this is kinda short, but
it's actually very powerful.

17
00:00:57.480 --> 00:00:59.082
So let's just hop right into this one.

18
00:01:02.234 --> 00:01:05.811
So what we're gonna do is we're gonna
create what I call a global config.

19
00:01:05.811 --> 00:01:10.164
So if you go into source,
I'm gonna create a new folder here,

20
00:01:10.164 --> 00:01:12.105
I'm gonna call it config.

21
00:01:16.825 --> 00:01:21.449
Inside a config,
I'm just gonna make an index.ts.

22
00:01:21.449 --> 00:01:25.948
And then for every single environment
that I think I'm gonna run my code in,

23
00:01:25.948 --> 00:01:28.138
I'm gonna make another file for it.

24
00:01:28.138 --> 00:01:32.578
So I'm gonna make local.ts,

25
00:01:32.578 --> 00:01:36.676
I'm gonna make a prod.ts,

26
00:01:36.676 --> 00:01:40.277
and maybe testing.ts.

27
00:01:40.277 --> 00:01:42.059
I could probably even do
staging if I wanted to.

28
00:01:45.200 --> 00:01:49.800
So these are just the different
modes that I want my app to run in.

29
00:01:49.800 --> 00:01:53.489
They might have different options,
like for instance, maybe locally,

30
00:01:53.489 --> 00:01:57.680
I wanna make sure analytics are turned
off, so I'm not tracking myself.

31
00:01:57.680 --> 00:02:01.518
But in production,
I want analytics turned on, okay?

32
00:02:01.518 --> 00:02:04.910
How would you do that
in your app right now?

33
00:02:04.910 --> 00:02:11.964
Knowing our Express app, if we had
a middleware, let's go to our routes.

34
00:02:14.176 --> 00:02:20.615
Let's say I had a middleware here that
did something like this, it said track.

35
00:02:20.615 --> 00:02:23.442
Inside that middleware it
reported to segment.io or

36
00:02:23.442 --> 00:02:26.110
something to track analytics.

37
00:02:26.110 --> 00:02:30.117
How would I turn this off from
tracking if I'm running locally,

38
00:02:30.117 --> 00:02:33.985
versus in production,
without actually deleting the code?

39
00:02:38.931 --> 00:02:40.480
Right, okay,
that's what we're trying to figure out,

40
00:02:40.480 --> 00:02:41.580
that's what we're about to create.

41
00:02:41.580 --> 00:02:45.045
We wanna dynamically be able to do that
without having to change our code.

42
00:02:45.045 --> 00:02:46.467
And this is actually a common one,

43
00:02:46.467 --> 00:02:50.160
you really don't wanna be tracking
yourself locally in a production.

44
00:02:50.160 --> 00:02:53.234
So inside of the index.ts,

45
00:02:53.234 --> 00:02:57.852
what we're gonna do is a few things first.

46
00:02:57.852 --> 00:03:01.128
By default,
NODE_ENV is not set by default,

47
00:03:01.128 --> 00:03:04.210
unless you just already set it yourself.

48
00:03:04.210 --> 00:03:05.247
So we wanna do that,

49
00:03:05.247 --> 00:03:09.104
but we also need to install this
package right here called lodash.merge.

50
00:03:09.104 --> 00:03:12.203
If you never used lodash before,
it's pretty cool.

51
00:03:12.203 --> 00:03:15.407
It's a package that has a bunch of utility
functions on it that people don't really

52
00:03:15.407 --> 00:03:18.180
need anymore,
because it's built into JavaScript.

53
00:03:18.180 --> 00:03:20.401
But before it was built into JavaScript,
this stuff was really cool.

54
00:03:20.401 --> 00:03:23.568
And this one actually isn't
built into JavaScript, merge.

55
00:03:23.568 --> 00:03:28.171
So we'll npm install loadash.merge,
make sure you save that.

56
00:03:28.171 --> 00:03:33.938
Okay, and then what we wanna
do is on this next line is,

57
00:03:37.777 --> 00:03:44.780
We want to go ahead and
set up a default for our NODE_ENV.

58
00:03:44.780 --> 00:03:47.466
So what I'm doing is I'm saying, hey,

59
00:03:47.466 --> 00:03:52.853
process NODE_ENV equals whatever process
NODE_ENV was, if it was anything.

60
00:03:52.853 --> 00:03:54.750
Or it's gonna default to development.

61
00:03:56.040 --> 00:03:59.775
So I'm just trying to make sure I don't
overwrite it if it already existed, but

62
00:03:59.775 --> 00:04:03.028
if it didn't, please set it to
development, so I'm gonna do that.

63
00:04:06.666 --> 00:04:07.618
Okay.

64
00:04:09.963 --> 00:04:14.698
And then what I like to do,
I actually like to treat environments and

65
00:04:14.698 --> 00:04:16.203
stages separately.

66
00:04:16.203 --> 00:04:21.150
And it kinda goes back to what I said
earlier, where it's like maybe you want

67
00:04:21.150 --> 00:04:25.574
to run an environment version of
your app locally on your computer.

68
00:04:25.574 --> 00:04:28.761
So in that example,
the stage would be local,

69
00:04:28.761 --> 00:04:31.468
the environment would be production.

70
00:04:31.468 --> 00:04:34.410
So I actually like to create
something different called stage.

71
00:04:34.410 --> 00:04:36.521
So I'm gonna say something
called stage here.

72
00:04:36.521 --> 00:04:40.120
And well, how do I do that here?

73
00:04:40.120 --> 00:04:45.300
Yeah, so stage is gonna be whatever
process.env.STAGE is, if you set one.

74
00:04:45.300 --> 00:04:51.418
If you didn't set it,
then it's just gonna be local, okay?

75
00:04:51.418 --> 00:04:56.140
And then now we're gonna create a dynamic
config based off the environment.

76
00:04:56.140 --> 00:05:00.806
So now it's gonna say, let envConfig,

77
00:05:00.806 --> 00:05:03.969
pretty much, be nothing.

78
00:05:03.969 --> 00:05:08.972
And then I'm just gonna
say if stage equals,

79
00:05:08.972 --> 00:05:12.006
let's say, production.

80
00:05:12.006 --> 00:05:14.424
So if we literally are in
production environment,

81
00:05:14.424 --> 00:05:17.130
this is running on our hosting provider.

82
00:05:17.130 --> 00:05:21.353
Then what I wanna do is I wanna require,
I wanna say envConfig,

83
00:05:21.353 --> 00:05:28.412
if I can spell config, Equals,
I wanna use require here,

84
00:05:28.412 --> 00:05:32.893
it's gonna require the,
I need to get the production config.

85
00:05:35.313 --> 00:05:39.318
And because we're using require and
the production file is probably gonna use

86
00:05:39.318 --> 00:05:41.818
export, we actually have
to do .default here.

87
00:05:41.818 --> 00:05:46.126
And this is for interop between
ES6 modules and non-ES6 modules,

88
00:05:46.126 --> 00:05:47.772
we have to do a .default.

89
00:05:49.714 --> 00:05:54.080
Okay, else if, stage equals,

90
00:05:54.080 --> 00:05:58.939
I don't know, staging, I guess.

91
00:06:00.809 --> 00:06:07.363
Or I'll say testing,
we don't have staging, let's say testing,

92
00:06:07.363 --> 00:06:13.725
then envConfig = require,
testing, so our default.

93
00:06:13.725 --> 00:06:17.866
else envConfig = the ones from require,

94
00:06:17.866 --> 00:06:22.491
the local one,
it's gonna default to local.

95
00:06:31.371 --> 00:06:36.393
And then we're just gonna
export default merge our

96
00:06:36.393 --> 00:06:42.251
default config on top of, or
underneath, our envConfig.

97
00:06:44.082 --> 00:06:46.976
So our default config is gonna have
all the different variables that we

98
00:06:46.976 --> 00:06:47.850
need in our app.

99
00:06:47.850 --> 00:06:51.383
For instance, I know that stage
is gonna be whatever stage is.

100
00:06:51.383 --> 00:06:58.214
I know that environment, env, is always
gonna be whatever process.env.NODE_ENV is.

101
00:07:01.410 --> 00:07:03.210
And then I can do things like well,
what's the port?

102
00:07:03.210 --> 00:07:08.005
Well, by default we'll
say the port is 3001.

103
00:07:08.005 --> 00:07:11.028
I can also do my secrets here, so
I might make something called secrets,

104
00:07:11.028 --> 00:07:11.880
that's an object.

105
00:07:11.880 --> 00:07:19.014
And I could say secrets.jwt is
always gonna be process.env.,

106
00:07:22.266 --> 00:07:25.980
JWT_SECRET, all right?

107
00:07:25.980 --> 00:07:33.465
I can do that, I can say dbUrl
is always gonna be database URL.

108
00:07:36.010 --> 00:07:38.060
All right, I can do that,
that's the default.

109
00:07:38.060 --> 00:07:41.035
But because it's being merged
underneath this env config,

110
00:07:41.035 --> 00:07:44.253
I can override it depending on
what environment I'm in, right?

111
00:07:44.253 --> 00:07:47.146
So right now I'm saying
the default port is 3001.

112
00:07:47.146 --> 00:07:49.826
And that's great, but
I would never do that in production.

113
00:07:49.826 --> 00:07:53.293
You can't set a port when you go to
production, the port is given to you.

114
00:07:53.293 --> 00:07:55.020
So this would break in production.

115
00:07:55.020 --> 00:07:59.787
So what I would do is like for
prod, yeah, I'm gonna say export,

116
00:08:02.590 --> 00:08:05.188
default an object.

117
00:08:05.188 --> 00:08:11.011
For prod, the port is actually,
process.env.PORT,

118
00:08:11.011 --> 00:08:15.809
because you have to do that for
production, it won't work.

119
00:08:17.317 --> 00:08:21.434
So when the environment
variable is in production, and

120
00:08:21.434 --> 00:08:27.640
this gets imported into here and merged on
top of it, it will overwrite this port.

121
00:08:27.640 --> 00:08:31.979
So port will be processed,
that env.PORT now, and not 3001.

122
00:08:31.979 --> 00:08:36.026
So this is how you can
dynamically change your app.

123
00:08:36.026 --> 00:08:39.649
And then all you have to do is make
sure that you use this configuration

124
00:08:39.649 --> 00:08:42.593
object everywhere in your
app that needs these values.

125
00:08:42.593 --> 00:08:45.081
And you're guaranteed
to have a dynamic app.

126
00:08:47.725 --> 00:08:49.320
So let me show you what I'm talking about.

127
00:08:49.320 --> 00:08:57.855
So I'm gonna say prod has
a env.PORT like that,

128
00:08:57.855 --> 00:09:03.899
I'm gonna say local is 3001.

129
00:09:03.899 --> 00:09:06.756
Actually, I'm just gonna change prod to
like 5000 so you can actually see it, so

130
00:09:06.756 --> 00:09:07.640
I'm gonna say 5000.

131
00:09:07.640 --> 00:09:09.406
So let's do that, let's say 5000.

132
00:09:09.406 --> 00:09:14.548
So prod is 5000, local is 3001, okay?

133
00:09:14.548 --> 00:09:16.845
I'm gonna go to our index.

134
00:09:16.845 --> 00:09:21.647
I'm gonna import that config,
import config from config.

135
00:09:21.647 --> 00:09:26.090
I'm gonna get rid of 3001,
then I will say config.port.

136
00:09:34.576 --> 00:09:38.553
So that's, Okay, so

137
00:09:38.553 --> 00:09:42.775
we got config.port, so
now I'm gonna start this.

138
00:09:42.775 --> 00:09:46.614
We default to development environments,
when I start it,

139
00:09:46.614 --> 00:09:51.547
it should be on 3001, because that's
what local defaults to, right?

140
00:09:51.547 --> 00:09:57.429
But if I start this with
NODE_ENV set to production,

141
00:09:57.429 --> 00:10:01.491
so if I say NODE_ENV=production.

142
00:10:04.355 --> 00:10:07.571
Actually, I think it's still gonna be
messed up, because I'm doing stage, right?

143
00:10:07.571 --> 00:10:08.489
Let's see.

144
00:10:13.309 --> 00:10:16.410
Yeah, I gotta change the stage.

145
00:10:16.410 --> 00:10:20.880
So if I say this is stage,
then what I will say is,

146
00:10:20.880 --> 00:10:27.780
change this to, STAGE = production,
I can run that.

147
00:10:28.940 --> 00:10:33.227
And then yeah, it tried to run it on 5000,
we already have something on 5000, so

148
00:10:33.227 --> 00:10:34.041
I got the error.

149
00:10:34.041 --> 00:10:37.925
But it didn't try to run it on 3001,
it tried to run on 5000.

150
00:10:37.925 --> 00:10:42.401
It switched the config to
the production one, which is 5000.

151
00:10:42.401 --> 00:10:47.076
So if I change that,
I don't know what's on 5000 right now,

152
00:10:47.076 --> 00:10:48.951
I'm scared to look at it.

153
00:10:48.951 --> 00:10:53.252
[LAUGH] But let's run it on 5002,
and you can see it runs here.

154
00:10:53.252 --> 00:10:55.516
&gt;&gt; Probably your GitHub bot?

155
00:10:55.516 --> 00:10:59.608
&gt;&gt; Yes, probably some bot I
deployed like a month ago, and

156
00:10:59.608 --> 00:11:04.498
it's like running rampant on my
memory right now, I don't know.

157
00:11:04.498 --> 00:11:07.253
But yeah, so
you can dynamically change the config.

158
00:11:07.253 --> 00:11:10.586
And it's very powerful when you start
moving this app around in many different

159
00:11:10.586 --> 00:11:11.301
environments.

160
00:11:11.301 --> 00:11:13.389
And all we had to do was just
change an environment variable.

161
00:11:13.389 --> 00:11:16.690
We didn't change any code,
we just changed environment variable.

162
00:11:16.690 --> 00:11:19.018
We talked about the config.

163
00:11:19.018 --> 00:11:22.096
And if you look at the example
that I have here on the site,

164
00:11:22.096 --> 00:11:24.801
I have a little more examples
of things you can do.

165
00:11:24.801 --> 00:11:27.547
For instance, doing things like logging.

166
00:11:27.547 --> 00:11:30.081
Sometimes you wanna see
different levels of logging,

167
00:11:30.081 --> 00:11:32.127
depending on what environment you're in.

168
00:11:32.127 --> 00:11:35.164
You wanna see more verbose
in development mode.

169
00:11:35.164 --> 00:11:39.008
But maybe you don't want as verbose in
production mode clogging up your logs when

170
00:11:39.008 --> 00:11:41.000
you're trying to find a critical error.

171
00:11:41.000 --> 00:11:43.938
You wanna see something
a little more discrete.

172
00:11:43.938 --> 00:11:46.962
You can change that one environment
variable, or maybe for that one time,

173
00:11:46.962 --> 00:11:48.790
you do want something
a little more verbose.

174
00:11:48.790 --> 00:11:52.334
You can just go into the environment
variable, change the config, and

175
00:11:52.334 --> 00:11:54.353
then now logging is at different level.

176
00:11:54.353 --> 00:11:59.260
So it's extremely powerful, I highly
recommend making sure that your API is

177
00:11:59.260 --> 00:12:04.319
driven by some type of configuration
that's bound to environment variables,

178
00:12:04.319 --> 00:12:05.838
so it remains dynamic.

179
00:12:05.838 --> 00:12:09.654
Because I promise you, just like earlier,
where I was going through in the end that,

180
00:12:09.654 --> 00:12:12.463
I was trying to get that API call
to work and it kept failing, and

181
00:12:12.463 --> 00:12:14.549
it kept failing, and
it kept failing, okay?

182
00:12:14.549 --> 00:12:18.135
Imagine that, but every time it fails,
you gotta make another pull request for

183
00:12:18.135 --> 00:12:18.788
it to deploy.

184
00:12:18.788 --> 00:12:21.611
And then wait for it to deploy,
just to find out it doesn't work, and

185
00:12:21.611 --> 00:12:22.837
then doing it again, right?

186
00:12:22.837 --> 00:12:25.478
So if you can put as much
as you can to be dynamic,

187
00:12:25.478 --> 00:12:28.724
all you have to do is just
change an environment variable.

188
00:12:28.724 --> 00:12:33.015
And it's not gonna solve all your
problems, but it can solve a lot of them.

