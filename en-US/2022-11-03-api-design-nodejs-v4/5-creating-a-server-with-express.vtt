WEBVTT

1
00:00:00.370 --> 00:00:04.557
One thing I wanted to talk about
before that is just a little preamble

2
00:00:04.557 --> 00:00:07.875
on what Express JS is,
just to give you some context.

3
00:00:07.875 --> 00:00:12.071
So it's basically just a really cool
framework that the Node community has

4
00:00:12.071 --> 00:00:16.650
adopted as it's go to, it's definitely
by far the most popular one.

5
00:00:16.650 --> 00:00:20.125
It was built on something called
Connect that's no longer alive.

6
00:00:20.125 --> 00:00:24.159
But at the time, it basically came out
around the time that Node.js did, so

7
00:00:24.159 --> 00:00:28.170
it was just the de facto framework for
building API's with Node.

8
00:00:28.170 --> 00:00:32.328
It's synonymous with things
like Django for Python, or

9
00:00:32.328 --> 00:00:36.407
Sinatra for Ruby, or Spring for
Java, or Djinn for Go.

10
00:00:36.407 --> 00:00:37.530
It's literally the same thing.

11
00:00:37.530 --> 00:00:39.281
I mean,
they all do something very differently but

12
00:00:39.281 --> 00:00:41.050
that's basically what it is.

13
00:00:41.050 --> 00:00:42.723
And like I said earlier,

14
00:00:42.723 --> 00:00:47.820
there are other frameworks out there
they are faster, newer, better, but

15
00:00:47.820 --> 00:00:53.330
at the end of the day everyone respects
Express, it's not going anywhere.

16
00:00:53.330 --> 00:00:56.923
Typically everything's built
off it anyway and, yeah,

17
00:00:56.923 --> 00:00:59.500
you really can't go wrong with Express.

18
00:00:59.500 --> 00:01:03.284
If you're at the point where Express is
just the difference between your company

19
00:01:03.284 --> 00:01:06.770
making a million more a month and
not, then you got different problems.

20
00:01:06.770 --> 00:01:10.160
So, but for
most people this isn't the problem.

21
00:01:10.160 --> 00:01:11.370
So we'll be using Express.

22
00:01:11.370 --> 00:01:13.253
And again,
it's also the one that I know the most.

23
00:01:13.253 --> 00:01:16.994
So I wanna make sure you get
some deep knowledge out of this.

24
00:01:16.994 --> 00:01:18.303
Okay, let's do it.

25
00:01:18.303 --> 00:01:23.606
Let's install Express and
let's make a server.

26
00:01:23.606 --> 00:01:27.535
So what I'm gonna do is
go over to our app here.

27
00:01:27.535 --> 00:01:29.689
Well, I'm gonna go to our terminal,
I'm going to install Express.

28
00:01:29.689 --> 00:01:34.931
So I can say npm i express, --save

29
00:01:41.244 --> 00:01:44.790
Okay, that's gonna install Express.

30
00:01:44.790 --> 00:01:47.764
We'll have more dependencies we have to
install but we'll do them as we need them,

31
00:01:47.764 --> 00:01:49.320
instead of doing them all at once.

32
00:01:49.320 --> 00:01:51.030
So we have Express installed.

33
00:01:51.030 --> 00:01:54.008
I'm gonna go back to our code here, and

34
00:01:54.008 --> 00:01:58.810
I'm just gonna start organizing
some things a little better.

35
00:01:58.810 --> 00:02:03.610
So I'm gonna make a new file here,
I'm gonna call this file server js.

36
00:02:06.190 --> 00:02:09.930
And inside of server js is where I'm
actually gonna do the Express stuff.

37
00:02:09.930 --> 00:02:16.568
So I'm gonna say,
const express = require express.

38
00:02:18.463 --> 00:02:19.336
I'll bring that in.

39
00:02:21.470 --> 00:02:27.440
And then I need to actually make the API.

40
00:02:27.440 --> 00:02:31.248
And the way you can do that is,
typically what people do is they'll

41
00:02:31.248 --> 00:02:35.672
say something like, app = express,
like this, and this will make the API.

42
00:02:35.672 --> 00:02:40.591
It doesn't do anything yet, but just like
I told you before, a server is synonymous

43
00:02:40.591 --> 00:02:44.635
with an API and an API is just an app
that doesn't have a visual thing.

44
00:02:44.635 --> 00:02:46.147
So here's our app, here's our API.

45
00:02:48.267 --> 00:02:51.661
And then to kind of make it
the same with what we did here,

46
00:02:51.661 --> 00:02:56.850
where we can respond to a GET request to
slash, we're gonna do the same thing.

47
00:02:56.850 --> 00:02:58.577
So start up our server.

48
00:02:58.577 --> 00:03:04.379
The way this works with Express is
I can say, app dot, and then verb,

49
00:03:04.379 --> 00:03:10.630
the method that I want to respond
to in lowercase on this case get.

50
00:03:10.630 --> 00:03:15.065
So I wanna respond to a get
request with the route of slash.

51
00:03:19.750 --> 00:03:21.951
And when that happens,
I wanna run this function.

52
00:03:21.951 --> 00:03:26.782
And this function takes the same
arguments, a request and

53
00:03:26.782 --> 00:03:29.944
a response, same thing like before.

54
00:03:34.140 --> 00:03:37.715
I can log in here, hello from express.

55
00:03:38.915 --> 00:03:42.840
And the sweet thing about this is that
Express actually adds some pretty cool

56
00:03:42.840 --> 00:03:45.540
utility methods and
things on the request object and

57
00:03:45.540 --> 00:03:48.985
a response object that makes it easy for
us to do stuff.

58
00:03:48.985 --> 00:03:56.150
So here I can actually say res.status(200)
and then I can say res.send.

59
00:03:56.150 --> 00:04:00.754
Actually I can say res.json, so
I can send back some JSON and

60
00:04:00.754 --> 00:04:05.010
I'll put an object here
that has message: 'hello'.

61
00:04:05.010 --> 00:04:06.143
So I can do that.

62
00:04:11.207 --> 00:04:15.309
So status codes are basically
three digit numbers

63
00:04:15.309 --> 00:04:18.541
that are exactly what they sound like.

64
00:04:18.541 --> 00:04:20.261
Depending on what the number,

65
00:04:20.261 --> 00:04:23.380
it lets clients know what
the status of the request was.

66
00:04:24.740 --> 00:04:29.310
Typically anything between 200 and
300 is a successful status.

67
00:04:29.310 --> 00:04:35.066
400s are typically reserved for user
error based statuses like wrong password,

68
00:04:35.066 --> 00:04:38.180
wrong email, you messed up, user.

69
00:04:38.180 --> 00:04:40.685
And then 500 status codes
are typically reserved for

70
00:04:40.685 --> 00:04:45.770
server based errors as in like, our server
messed up, you're gonna get some 500 code.

71
00:04:45.770 --> 00:04:49.180
So that's how status codes work.

72
00:04:49.180 --> 00:04:52.840
Again, you don't have to use them,
some people don't.

73
00:04:52.840 --> 00:04:56.691
Some designs like Graph QL don't
even care about status codes, so

74
00:04:56.691 --> 00:05:01.460
it really just depends on how you're
consuming it and who your users are.

75
00:05:01.460 --> 00:05:03.727
But for HTTP, that's how it was designed.

76
00:05:03.727 --> 00:05:08.573
And most clients typically do different
things based off the status codes,

77
00:05:08.573 --> 00:05:13.568
like Google Chrome will spit an error out
in the console if the status code was in

78
00:05:13.568 --> 00:05:14.419
the 405.

79
00:05:14.419 --> 00:05:18.601
But if you sent back an error that had
a status code of 200, Google wouldn't know

80
00:05:18.601 --> 00:05:22.690
that that was an error cuz it didn't know
because it's the status code wasn't.

81
00:05:22.690 --> 00:05:26.108
So sometimes you still wanna respect
the rules of the internet even though they

82
00:05:26.108 --> 00:05:29.332
seem outdated, because there's so
many things relying on those rules.

83
00:05:32.903 --> 00:05:34.230
Okay, so we got that.

84
00:05:34.230 --> 00:05:39.214
The next thing I'm gonna do is I'm
gonna export, or not export but

85
00:05:39.214 --> 00:05:43.977
module.exports, The app like that.

86
00:05:43.977 --> 00:05:46.119
So let's export it on out.

87
00:05:47.960 --> 00:05:51.273
Now I'm gonna go into our index, and I'm
just gonna just wipe this whole thing out,

88
00:05:51.273 --> 00:05:52.620
I don't want it anymore.

89
00:05:52.620 --> 00:05:53.120
We're done.

90
00:05:53.120 --> 00:05:53.907
We're never going back to that.

91
00:05:55.393 --> 00:06:01.521
And I'm just gonna bring in our app,
Like that.

92
00:06:01.521 --> 00:06:03.355
So we have our app.

93
00:06:03.355 --> 00:06:07.090
And I'm just gonna say, app.listen, I'm
gonna give it the same port that I have.

94
00:06:07.090 --> 00:06:09.199
Mine was 3001,
yours could have been different.

95
00:06:09.199 --> 00:06:12.356
It could be whatever number that's not
currently being used on your computer.

96
00:06:12.356 --> 00:06:16.228
And I'm gonna do the same thing,
I'm just gonna log hello.

97
00:06:27.369 --> 00:06:32.660
So now let's start our server,
and let's try to get a message.

98
00:06:32.660 --> 00:06:33.303
So let's see what happens.

99
00:06:33.303 --> 00:06:34.965
So I'm gonna go to our terminal.

100
00:06:34.965 --> 00:06:40.350
I'm gonna say node src/ index,
just like we did before.

101
00:06:41.580 --> 00:06:42.394
We're gonna run that.

102
00:06:42.394 --> 00:06:47.888
And I should get my log hello on
local host 3001, which is my port.

103
00:06:47.888 --> 00:06:53.585
I'm gonna go to that in the browser, and
I get back a message, hello, in JSON.

104
00:06:53.585 --> 00:06:58.238
So yours might not look like this,
I have a Chrome extension called

105
00:06:58.238 --> 00:07:01.740
JSON Viewer that allows my
JSON to look like this.

106
00:07:01.740 --> 00:07:05.619
If you don't have that Chrome extension,
it'll look really bad.

107
00:07:05.619 --> 00:07:07.786
[LAUGH] But,
it's okay if it looks bad, but

108
00:07:07.786 --> 00:07:10.510
it's just still say whatever
message you send back.

109
00:07:12.630 --> 00:07:16.035
If you don't have this message,
if whatever reason,

110
00:07:16.035 --> 00:07:20.994
then what you wanna do is, obviously check
your code, but what you wanna do is go

111
00:07:20.994 --> 00:07:25.360
look at the terminal and
see if there's any errors there.

112
00:07:25.360 --> 00:07:28.556
See if there was something that you may or
may not have done, and

113
00:07:28.556 --> 00:07:30.744
that's where the arrows are gonna print.

114
00:07:30.744 --> 00:07:32.280
They're gonna print the terminal here for
your server.

115
00:07:32.280 --> 00:07:34.903
They're not gonna print in
a console in Google Chrome.

116
00:07:37.010 --> 00:07:40.697
Yeah, I mean, some of the things
that were abstracted away was,

117
00:07:40.697 --> 00:07:45.122
I think the most important thing was
the logic of writing that if statement of,

118
00:07:45.122 --> 00:07:48.362
well, if it's this, and
it's this URL, then do this.

119
00:07:48.362 --> 00:07:53.912
That's just done for us automatically
very expressively and declaratively,

120
00:07:53.912 --> 00:08:00.389
versus having 1,000 if statements creating
your own router, which will be terrible.

121
00:08:00.389 --> 00:08:03.465
So, in the example that
I have here though,

122
00:08:03.465 --> 00:08:09.298
I'm actually sending back an HTML file,
if you're feeling fancy you can do that.

123
00:08:09.298 --> 00:08:10.980
But you can send back whatever you want.

124
00:08:10.980 --> 00:08:14.958
I sent back JSON in the live
coding example that I just did.

125
00:08:14.958 --> 00:08:19.620
I can send back text, I can send back
an image, a server can send back, I mean,

126
00:08:19.620 --> 00:08:23.859
think of anything you've ever seen on
a website before or a mobile app or

127
00:08:23.859 --> 00:08:27.350
a video game, a server can send that back.

128
00:08:27.350 --> 00:08:32.624
So there's no limit to,
if it's a file, it can be sent.

129
00:08:32.624 --> 00:08:34.664
If it's data, it can be sent.

130
00:08:34.664 --> 00:08:35.884
There's no limit to it.

131
00:08:35.884 --> 00:08:38.244
It just depends on what the client
does with that information.

132
00:08:39.704 --> 00:08:41.884
So, yeah,
you can pretty much do whatever you want.

