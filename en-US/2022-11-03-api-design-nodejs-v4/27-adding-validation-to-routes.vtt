WEBVTT

1
00:00:00.027 --> 00:00:00.670
Let's get started then.

2
00:00:00.670 --> 00:00:05.516
So what we need to do is we need
to install express-validator.

3
00:00:05.516 --> 00:00:06.404
So let's do that.

4
00:00:10.480 --> 00:00:13.094
There we go.

5
00:00:13.094 --> 00:00:18.596
And luckily for us, we already
learned what middleware was and is.

6
00:00:18.596 --> 00:00:20.792
Because express-validator,

7
00:00:20.792 --> 00:00:26.250
one of the ways that you can use it to
have input validations is with middleware.

8
00:00:26.250 --> 00:00:30.803
So as a quick refresher,
middleware are basically just functions,

9
00:00:30.803 --> 00:00:35.603
kind of like handlers really,
that just run before a handler would run.

10
00:00:35.603 --> 00:00:39.605
And they have the ability to have
control flow on what middleware is, and

11
00:00:39.605 --> 00:00:43.427
whenever they're done, so
they can pass it to the next middleware.

12
00:00:43.427 --> 00:00:46.958
They have that ability, but they have
the same power that a handler does.

13
00:00:46.958 --> 00:00:48.772
They can respond.

14
00:00:48.772 --> 00:00:49.799
They can log.

15
00:00:49.799 --> 00:00:52.445
They can enhance the request object.

16
00:00:52.445 --> 00:00:54.678
They could do all
different types of things.

17
00:00:54.678 --> 00:00:59.962
So we're gonna use middleware
as validators for the posts and

18
00:00:59.962 --> 00:01:04.441
the puts for
all the routes that we already created.

19
00:01:04.441 --> 00:01:07.307
So, let's do that.

20
00:01:07.307 --> 00:01:10.164
So let's walk through this list here.

21
00:01:10.164 --> 00:01:13.219
First one that I see is
we have a put request for

22
00:01:13.219 --> 00:01:16.608
a product with an ID of
whatever the ID is gonna be.

23
00:01:16.608 --> 00:01:19.679
So we wanna make sure
we validate the input.

24
00:01:19.679 --> 00:01:24.633
So first thing first is we need to figure
out what are we gonna allow a user

25
00:01:24.633 --> 00:01:26.872
to update on a product, right?

26
00:01:26.872 --> 00:01:31.343
So if we go look at the schema,
we've got a product.

27
00:01:31.343 --> 00:01:35.071
What would we allow a user
to update a product?

28
00:01:35.071 --> 00:01:39.414
And what would we not allow
a user to update on the product?

29
00:01:39.414 --> 00:01:44.136
&gt;&gt; You can just name and belongsToUser.

30
00:01:44.136 --> 00:01:45.865
I mean, what user it belongs to.

31
00:01:45.865 --> 00:01:50.190
&gt;&gt; Yeah, definitely name, we want them
to be able to update the name and

32
00:01:50.190 --> 00:01:51.395
things like that.

33
00:01:51.395 --> 00:01:56.247
belongsTo, yeah, if we had a feature
where we let you transfer the product

34
00:01:56.247 --> 00:02:00.727
to another user, then yeah,
then we would allow you to update that.

35
00:02:00.727 --> 00:02:03.231
Otherwise, that would just get
set when you created the product.

36
00:02:03.231 --> 00:02:04.909
So yeah, it really depends
on what features we have.

37
00:02:04.909 --> 00:02:06.985
But I would say, at minimum,

38
00:02:06.985 --> 00:02:12.061
name is definitely something we want
to allow a user to be able to update.

39
00:02:12.061 --> 00:02:16.888
So our update route is checking for
validation on that,

40
00:02:16.888 --> 00:02:21.828
and it's gonna be up to us whether or
not we require that.

41
00:02:21.828 --> 00:02:26.183
Because is it the fact that you
have to pass us every single

42
00:02:26.183 --> 00:02:30.829
possible combination of updates or
it has to be one of these?

43
00:02:30.829 --> 00:02:32.287
So we have to figure out what that is.

44
00:02:32.287 --> 00:02:37.109
See how product only has one field
that we can update for name,

45
00:02:37.109 --> 00:02:41.295
then that's the only one
that we're gonna require.

46
00:02:41.295 --> 00:02:45.635
We won't do this because we're not
gonna have a feature that allows you to

47
00:02:45.635 --> 00:02:46.691
change it at all.

48
00:02:46.691 --> 00:02:49.501
We gotta do some other stuff on
the schema to get that to work.

49
00:02:49.501 --> 00:02:50.791
So lets do that.

50
00:02:50.791 --> 00:02:54.849
So the way this works is we look
at the stuff that I have here.

51
00:02:54.849 --> 00:02:57.649
Let me pull this up.

52
00:02:57.649 --> 00:03:03.644
We can just import from express-validator.

53
00:03:03.644 --> 00:03:05.508
So I'm just gonna input
right here in the router.

54
00:03:10.761 --> 00:03:13.590
And we can go down to our put.

55
00:03:13.590 --> 00:03:18.434
And because when someone does a put
request, a post request, a patch,

56
00:03:18.434 --> 00:03:23.200
or something like that,
they're probably gonna be setting up json,

57
00:03:23.200 --> 00:03:25.895
which is gonna be attached to the body.

58
00:03:25.895 --> 00:03:30.280
We're gonna use this body import from
express-validator like this as middleware.

59
00:03:30.280 --> 00:03:35.035
So we can say body, that's a function,
and then we can say

60
00:03:35.035 --> 00:03:40.196
the name of the field on the body
object that we want to enforce.

61
00:03:40.196 --> 00:03:46.749
So what this is saying is req.body,
which is an object,

62
00:03:46.749 --> 00:03:51.128
should have a field on it called name.

63
00:03:51.128 --> 00:03:53.402
That's what this is saying, right?

64
00:03:53.402 --> 00:03:58.615
req.body, which is an object,
should have a field on it called name.

65
00:03:58.615 --> 00:04:01.872
And if it doesn't, we'll know.

66
00:04:04.408 --> 00:04:07.135
Does that makes sense, right?

67
00:04:07.135 --> 00:04:11.504
Okay, we can test this out real quick.

68
00:04:11.504 --> 00:04:17.115
We'll just make a little quick handler
here say req, res, just like that.

69
00:04:17.115 --> 00:04:20.307
And then really cool option is that

70
00:04:20.307 --> 00:04:25.049
we get to control when we
wanna do that validation.

71
00:04:25.049 --> 00:04:30.471
So the middleware itself won't
actually respond with any errors or

72
00:04:30.471 --> 00:04:32.191
anything like that.

73
00:04:32.191 --> 00:04:36.962
Because express-validator wants us as the
creators to have control of how we wanna

74
00:04:36.962 --> 00:04:40.108
send those errors back,
which I think is really cool.

75
00:04:40.108 --> 00:04:42.668
So we can say,
let's get those validations, right?

76
00:04:42.668 --> 00:04:45.203
So we can say, or let's say, errors.

77
00:04:45.203 --> 00:04:47.686
We can say errors = validationResult, and

78
00:04:47.686 --> 00:04:50.715
you can just pass the whole
request object like that.

79
00:04:54.060 --> 00:04:58.748
So the validation was the result
given the request object is

80
00:04:58.748 --> 00:05:03.729
just going to try to validate
based off of whatever we put here.

81
00:05:03.729 --> 00:05:08.198
So the way this works if you think
about how you know middleware works,

82
00:05:08.198 --> 00:05:12.672
what's probably happening here is
that this middleware is attaching

83
00:05:12.672 --> 00:05:14.964
something to this request object.

84
00:05:14.964 --> 00:05:19.892
That validationResult then looks at to
determine what validations it needs

85
00:05:19.892 --> 00:05:21.356
to check for, right?

86
00:05:21.356 --> 00:05:24.664
It could be an array of like here
are the validations, you gotta check for

87
00:05:24.664 --> 00:05:26.415
a body.name, and it looks for that.

88
00:05:26.415 --> 00:05:29.811
So that's what this middleware is doing,
it's enhancing the request object.

89
00:05:29.811 --> 00:05:33.451
And then what we can do is we can
check to see if there's errors or not.

90
00:05:33.451 --> 00:05:36.709
If there are errors,
then we can send those back,

91
00:05:36.709 --> 00:05:40.834
and if not, we can continue doing
what we were gonna do anyway.

92
00:05:40.834 --> 00:05:43.053
So let's do that.

93
00:05:43.053 --> 00:05:50.261
We can say if not errors.isEmpty.

94
00:05:50.261 --> 00:05:56.241
So there aren't any errors,
as in if it's not empty,

95
00:05:56.241 --> 00:05:59.497
that means there are errors.

96
00:05:59.497 --> 00:06:02.511
Then we wanna do is we wanna
send back an error message.

97
00:06:02.511 --> 00:06:05.458
So I just send back a 400 here.

98
00:06:05.458 --> 00:06:07.909
400 status code just means bad requests,

99
00:06:07.909 --> 00:06:11.014
which typically means you
didn't send the right thing.

100
00:06:11.014 --> 00:06:13.421
That's typically what
the 400 status code means.

101
00:06:13.421 --> 00:06:16.273
Like, yeah, it's your fault,
you didn't send the thing.

102
00:06:19.741 --> 00:06:25.440
And then I'm just gonna send back

103
00:06:25.440 --> 00:06:31.750
some json with an errors field on it,

104
00:06:31.750 --> 00:06:39.500
that will convert all
the errors to an array.

105
00:06:41.951 --> 00:06:46.791
Okay, so let's try to trigger this.

106
00:06:46.791 --> 00:06:48.424
Let's see what happens.

107
00:06:48.424 --> 00:06:51.380
But remember we have authentication now,
so it's not gonna be so

108
00:06:51.380 --> 00:06:52.305
easy just to hit it.

109
00:06:52.305 --> 00:06:54.102
So we gotta sign in, sign up.

110
00:06:54.102 --> 00:06:56.691
We gotta do all that stuff,
just to try it.

111
00:06:56.691 --> 00:06:59.262
So let's do it.

112
00:06:59.262 --> 00:07:01.195
I'm gonna start my server.

113
00:07:03.809 --> 00:07:07.565
Okay, And

114
00:07:07.565 --> 00:07:12.743
then I don't think I reset my database so

115
00:07:12.743 --> 00:07:17.319
I think I still have all that stuff.

116
00:07:17.319 --> 00:07:18.820
Let's see.

117
00:07:18.820 --> 00:07:19.504
It's gone now.

118
00:07:19.504 --> 00:07:21.399
I've gotta do it again.

119
00:07:21.399 --> 00:07:25.187
Let me sign in.

120
00:07:25.187 --> 00:07:26.379
So I'm gonna sign in.

121
00:07:26.379 --> 00:07:29.703
If you didn't reset your database,
you can go to Thunder Client and

122
00:07:29.703 --> 00:07:33.393
you can sign in with the same thing, and
you should just be able to get a JWT.

123
00:07:33.393 --> 00:07:35.391
So I'm gonna do that.

124
00:07:35.391 --> 00:07:39.503
I just can't remember if I
reset my database or not.

125
00:07:39.503 --> 00:07:41.245
I did, awesome.

126
00:07:41.245 --> 00:07:47.718
Cool, so our JWT here, And

127
00:07:47.718 --> 00:07:52.721
then now I'm going to make
a new request for a put.

128
00:07:52.721 --> 00:07:56.380
So I'm gonna say,

129
00:07:56.380 --> 00:08:05.301
http://localhost:3001 in my case,

130
00:08:05.301 --> 00:08:09.647
/api/product, and

131
00:08:09.647 --> 00:08:14.457
I had to put some ID here.

132
00:08:14.457 --> 00:08:17.173
It's actually not gonna get to
this point where the ID matters.

133
00:08:17.173 --> 00:08:18.350
We'll get to that when
we get to the handlers.

134
00:08:18.350 --> 00:08:21.662
But if I don't put this ID here,

135
00:08:21.662 --> 00:08:27.318
it's gonna try to do a PUT
request to /api/product.

136
00:08:27.318 --> 00:08:29.632
And I don't think we have that route,
right?

137
00:08:29.632 --> 00:08:34.695
We don't have a route for
put to /api/product.

138
00:08:34.695 --> 00:08:39.343
It's /api/product/:id.

139
00:08:39.343 --> 00:08:44.700
So we will get a 404 uf I didn't put ID
there, because there's no route for that.

140
00:08:44.700 --> 00:08:45.591
Does that make sense?

141
00:08:45.591 --> 00:08:47.078
We only have a route for

142
00:08:47.078 --> 00:08:51.240
a GET request to /product without
a PUT request to /product.

143
00:08:51.240 --> 00:08:52.885
So we will get a 404.

144
00:08:52.885 --> 00:08:57.296
So to trigger this route,
I must put something after product.

145
00:08:57.296 --> 00:08:59.034
In this case, it's called id.

146
00:08:59.034 --> 00:09:03.503
I just typed in something random,
because we haven't gotten to the point

147
00:09:03.503 --> 00:09:06.398
down here where we're
actually using that ID.

148
00:09:06.398 --> 00:09:09.687
So it doesn't matter.

149
00:09:09.687 --> 00:09:13.246
But when we write the handlers,
we will be using that ID.

150
00:09:15.599 --> 00:09:18.862
Okay, so let's try that.

151
00:09:18.862 --> 00:09:23.308
I'm gonna go to Auth,
gonna click on Bearer,

152
00:09:23.308 --> 00:09:27.995
go and paste in that token,
get rid of my string.

153
00:09:27.995 --> 00:09:31.915
And let's run that.

154
00:09:31.915 --> 00:09:33.616
I didn't actually do the thing
that I said I was gonna do.

155
00:09:33.616 --> 00:09:34.789
There we go.

156
00:09:34.789 --> 00:09:37.396
Run that and let's see what happens.

157
00:09:37.396 --> 00:09:40.971
So right now,
it looks like it's just hanging,

158
00:09:40.971 --> 00:09:44.559
which means it's not
responding to something.

159
00:09:44.559 --> 00:09:46.103
So let's see what's going on here.

160
00:09:48.160 --> 00:09:51.361
API products, wait.

161
00:09:51.361 --> 00:09:52.599
Let's look at the body.

162
00:09:52.599 --> 00:09:57.477
Okay, there we go.
So let's go in here and

163
00:09:57.477 --> 00:10:02.313
add a log to our routes.

164
00:10:02.313 --> 00:10:03.469
Here we go.

165
00:10:03.469 --> 00:10:04.798
Let's add a log in here and

166
00:10:04.798 --> 00:10:08.623
see what the errors are doing cuz I
would imagine this would not be hanging.

167
00:10:08.623 --> 00:10:10.438
And instead we should see error.

168
00:10:10.438 --> 00:10:17.709
So maybe something isn't right, let's see.

169
00:10:17.709 --> 00:10:21.031
So run this again.

170
00:10:21.031 --> 00:10:23.860
See what happens, go check out the log.

171
00:10:23.860 --> 00:10:26.394
Wait, it's there.

172
00:10:26.394 --> 00:10:28.027
It's just no errors.

173
00:10:28.027 --> 00:10:32.684
Okay, so
it looks like everything here is mostly

174
00:10:32.684 --> 00:10:36.896
good except now with express-validator.

175
00:10:36.896 --> 00:10:41.513
You have to be explicit with the actual
validation that you want when using

176
00:10:41.513 --> 00:10:42.637
the middleware.

177
00:10:42.637 --> 00:10:48.337
So in the case of body name, this no
longer is actually gonna trigger an error.

178
00:10:48.337 --> 00:10:51.676
Because there is no actual
strict enforcement on it, so

179
00:10:51.676 --> 00:10:56.520
now you have to be explicit and say
something like, this should be a string.

180
00:10:56.520 --> 00:11:01.178
So now if I say body must have
a property on it called name,

181
00:11:01.178 --> 00:11:05.752
which is type string,
this will now trigger the error.

182
00:11:05.752 --> 00:11:11.743
Okay, so if we go run this back in
the Thunder Client, and I run it, you can

183
00:11:11.743 --> 00:11:17.854
see that now we get back that object
with the array of errors in the message.

184
00:11:17.854 --> 00:11:22.796
So invalid value, looking for
a parameter called name on the body.

185
00:11:22.796 --> 00:11:26.148
So you can take this and
format it however you want.

186
00:11:26.148 --> 00:11:26.756
It's up to you.

187
00:11:26.756 --> 00:11:30.749
It really just depends on what
you gonna do with those errors.

188
00:11:30.749 --> 00:11:34.072
If this is an API for the front-end,
and the front-end is just gonna consume

189
00:11:34.072 --> 00:11:36.646
the errors and put them on the screen,
this is really cool.

190
00:11:36.646 --> 00:11:39.249
But sometimes the front-end
is more sophisticated and

191
00:11:39.249 --> 00:11:40.530
wants to do its own errors.

192
00:11:40.530 --> 00:11:41.388
But either way,

193
00:11:41.388 --> 00:11:45.261
I think it's nice just to be able to
send back all the errors that happened.

194
00:11:45.261 --> 00:11:50.632
And then the front-end can format
that whatever way that they want,

195
00:11:50.632 --> 00:11:53.606
just like they do with any other data.

196
00:11:53.606 --> 00:11:59.147
Okay, any questions on
express-validator and

197
00:11:59.147 --> 00:12:04.686
how to use it to validate or
invalidate inputs for

198
00:12:04.686 --> 00:12:08.077
requests like posts and put?

199
00:12:08.077 --> 00:12:08.701
Yep.

200
00:12:08.701 --> 00:12:11.143
&gt;&gt; This is the code we're going
to write in every handler.

201
00:12:11.143 --> 00:12:17.147
I mean, we can abstract out this in-
&gt;&gt; You're thinking so

202
00:12:17.147 --> 00:12:19.584
ahead, and I love it.

203
00:12:19.584 --> 00:12:24.921
Yeah, I think ideally you would
take all the input validators and

204
00:12:24.921 --> 00:12:27.359
put them in their own module.

205
00:12:27.359 --> 00:12:29.471
And then that way, it's just like,
here's the input validators.

206
00:12:29.471 --> 00:12:31.584
That way you can reuse
them if you wanted to,

207
00:12:31.584 --> 00:12:33.766
cuz some of them might have the same,
right?

208
00:12:33.766 --> 00:12:34.645
And you had to write them twice.

209
00:12:34.645 --> 00:12:38.357
So yeah, you probably would just abstract
these out, put them in the file,

210
00:12:38.357 --> 00:12:40.221
bring them in whenever you need them.

211
00:12:40.221 --> 00:12:44.291
Maybe even combine a bunch of them
because it's just middleware, right?

212
00:12:44.291 --> 00:12:45.947
So you can put this in an array.

213
00:12:48.339 --> 00:12:50.085
And you can have as many
of these as you want, and

214
00:12:50.085 --> 00:12:51.842
you can store that in
some variable somewhere.

215
00:12:51.842 --> 00:12:56.359
And you can call this new user
input validator or whatever.

216
00:12:56.359 --> 00:12:58.709
And every time a new user is created,
you can use that.

217
00:12:58.709 --> 00:13:02.337
So yeah, there's no one way to do it, and

218
00:13:02.337 --> 00:13:06.919
there's a lot of different
ways to abstract it out.

219
00:13:06.919 --> 00:13:09.311
But yeah, to keep it simple,

220
00:13:09.311 --> 00:13:14.386
I'll probably just be writing
them inline here on the routes,

221
00:13:14.386 --> 00:13:20.339
that way we're not adding any more
overhead of organizing all the stuff.

222
00:13:20.339 --> 00:13:21.565
Yes.

223
00:13:21.565 --> 00:13:27.596
&gt;&gt; Is the errors.array on line 19
coming from express-validator?

224
00:13:27.596 --> 00:13:33.782
&gt;&gt; Yeah, so this errors string is an
object, it has a bunch of functions on it.

225
00:13:33.782 --> 00:13:38.274
And it has an array method
on it that just converts in

226
00:13:38.274 --> 00:13:42.986
formats all the errors to an array for
you to consume.

227
00:13:42.986 --> 00:13:49.831
Yeah, this is not some built-in
native thing in JavaScript.

228
00:13:49.831 --> 00:13:51.450
It's from the validation result.

