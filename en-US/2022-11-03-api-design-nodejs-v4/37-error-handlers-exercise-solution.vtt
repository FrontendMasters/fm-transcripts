WEBVTT

1
00:00:00.000 --> 00:00:06.233
Okay, so,
What we're gonna do next is basically,

2
00:00:09.174 --> 00:00:12.181
We're going to have to go in and

3
00:00:12.181 --> 00:00:16.818
override the default
Express error handling.

4
00:00:16.818 --> 00:00:21.613
And we need to go in and augment
all of the handles that we wrote so

5
00:00:21.613 --> 00:00:24.246
far that do asynchronous things.

6
00:00:24.246 --> 00:00:27.124
I'm talking about the sign in,
the sign up, the product,

7
00:00:27.124 --> 00:00:29.726
all the stuff we just did,
all the stuff that you did.

8
00:00:29.726 --> 00:00:32.298
And we're gonna have to handle
those asynchronous errors, so

9
00:00:32.298 --> 00:00:34.690
that they can bubble up
to our error handling.

10
00:00:34.690 --> 00:00:39.627
Otherwise our service is going to crash
every time someone does something silly,

11
00:00:39.627 --> 00:00:40.349
all right?

12
00:00:40.349 --> 00:00:43.213
Or every time a timeout happens,
or anything.

13
00:00:43.213 --> 00:00:47.794
So that's what we'll do,
you can start on that now if you want to.

14
00:00:47.794 --> 00:00:50.556
When we come back, we'll do it together.

15
00:00:53.750 --> 00:00:58.222
I hope everyone had some time to
handle your errors, [LAUGH] and

16
00:00:58.222 --> 00:01:00.550
if not, we'll do it together.

17
00:01:00.550 --> 00:01:02.655
So let's hop right into it.

18
00:01:05.161 --> 00:01:09.805
First thing is, I want to create
the error handler that's gonna

19
00:01:09.805 --> 00:01:13.504
handle the errors to do something,
I don't know,

20
00:01:13.504 --> 00:01:18.167
little more customized then just
sending out an error message.

21
00:01:18.167 --> 00:01:21.517
So, what I wanna do for
my error handler is,

22
00:01:21.517 --> 00:01:25.048
I want to send back
a different status code, or

23
00:01:25.048 --> 00:01:29.954
different message,
depending on what type the error might be.

24
00:01:29.954 --> 00:01:33.093
And I can change the error type, it's
just an object, I can do whatever I want.

25
00:01:33.093 --> 00:01:35.344
So what I'm gonna do is,
I'm gonna just have, I don't know,

26
00:01:35.344 --> 00:01:36.579
three different types of errors.

27
00:01:36.579 --> 00:01:44.515
So I can say if err.type === 'auth',

28
00:01:44.515 --> 00:01:48.923
I can say res.json, or

29
00:01:48.923 --> 00:01:55.544
I can say res.status(401).

30
00:01:55.544 --> 00:01:59.510
And I don't actually have to do another
res.json, I can actually chain this.

31
00:01:59.510 --> 00:02:04.114
I just don't like doing it, but
you can just do json like this, it chains.

32
00:02:04.114 --> 00:02:09.979
And I can just send back a message
saying unauthorized, if I want to.

33
00:02:09.979 --> 00:02:15.623
So if error.type is auth, it's that,

34
00:02:15.623 --> 00:02:23.541
else if err.type is, input.

35
00:02:26.150 --> 00:02:29.978
So if you send back some wrong input or
something like that,

36
00:02:29.978 --> 00:02:33.665
I can say res.status is 400,
which is a bad request.

37
00:02:33.665 --> 00:02:39.235
I can send back a message json,

38
00:02:39.235 --> 00:02:46.097
and I could say like, invalid input.

39
00:02:46.097 --> 00:02:51.232
And I can say else just default to,
it's basically our fault, that's a 500.

40
00:02:51.232 --> 00:02:58.658
I'm gonna say
res.status(500).json(message:

41
00:02:58.658 --> 00:03:02.375
'oops, that's on us').

42
00:03:02.375 --> 00:03:04.393
And now I need to handle some errors.

43
00:03:04.393 --> 00:03:05.977
So let's do that.

44
00:03:05.977 --> 00:03:08.915
I'm just gonna go into the user one,
we did that one.

45
00:03:10.236 --> 00:03:16.284
And how do you catch
an asynchronous error?

46
00:03:16.284 --> 00:03:18.479
&gt;&gt; In the catch?

47
00:03:18.479 --> 00:03:19.361
&gt;&gt; In the catch?
&gt;&gt; In the try-catch?

48
00:03:19.361 --> 00:03:23.095
&gt;&gt; A try-catch, yeah,
you can try-catch it.

49
00:03:23.095 --> 00:03:26.303
Try-catch something asynchronous.

50
00:03:28.734 --> 00:03:31.626
But here's where it starts to get tricky
when you start try-catching everything.

51
00:03:36.609 --> 00:03:44.013
One is scoping, so variables created in a
try are not accessible outside of the try.

52
00:03:44.013 --> 00:03:47.573
So then you gotta start
hoisting your variables,

53
00:03:47.573 --> 00:03:52.247
and or just doing every single
thing in the try-catch like that.

54
00:03:53.578 --> 00:03:55.000
That's one option.

55
00:03:55.000 --> 00:03:59.720
The problem with that is if
you have two asynchronous

56
00:03:59.720 --> 00:04:04.556
things happening aside,
there's one try-catch.

57
00:04:04.556 --> 00:04:06.858
And then let's say the catch triggers,

58
00:04:06.858 --> 00:04:09.506
how do you know which one
of those errored out?

59
00:04:09.506 --> 00:04:12.909
So you need two separate try-catches
to handle two separate errors.

60
00:04:12.909 --> 00:04:17.001
So you can determine which error type
was what so you can respond differently.

61
00:04:17.001 --> 00:04:22.232
So it just basically just gets really
bloated with try-catches everywhere

62
00:04:22.232 --> 00:04:26.899
when you wanna do something like
handling errors asynchronously.

63
00:04:26.899 --> 00:04:31.372
There is a way around this, there's a
little function, maybe I'll show it later.

64
00:04:31.372 --> 00:04:33.299
I don't wanna show it now, but

65
00:04:33.299 --> 00:04:37.461
you can get around using try-catch
everywhere with async await.

66
00:04:37.461 --> 00:04:39.957
You can use destructuring, actually,
and do some pretty cool stuff.

67
00:04:39.957 --> 00:04:43.387
But for
now we're just gonna try-catch everything.

68
00:04:43.387 --> 00:04:46.448
Just put everything in here,
unless it's more than one,

69
00:04:46.448 --> 00:04:49.146
and then we can talk about
what that will look like.

70
00:04:49.146 --> 00:04:53.667
So if there is an error,
then I'm just calling next.

71
00:04:55.872 --> 00:04:59.990
I'm gonna say next error, but before
I call it, I'm gonna say error.type.

72
00:04:59.990 --> 00:05:02.171
I could just add a type here.

73
00:05:02.171 --> 00:05:06.991
And if this broke, if create user broke,
assuming the database

74
00:05:06.991 --> 00:05:13.130
connection didn't mess up or whatever,
I'm just gonna blame the user.

75
00:05:13.130 --> 00:05:15.724
And I'm gonna say it was a bad input,

76
00:05:15.724 --> 00:05:21.900
you sent up a username that was already
taken, so that's what I'm guessing.

77
00:05:21.900 --> 00:05:26.642
But in reality, you would probably
want to inspect this error right

78
00:05:26.642 --> 00:05:30.816
here to see that it was indeed
that error from the database.

79
00:05:30.816 --> 00:05:36.206
Because Prisma will throw an error that
has an error code and an error message.

80
00:05:36.206 --> 00:05:39.775
You can look at that to determine if
it was indeed someone using the same

81
00:05:39.775 --> 00:05:40.390
username.

82
00:05:40.390 --> 00:05:43.234
Or was it because the connection
to the database failed, and

83
00:05:43.234 --> 00:05:46.325
it's actually it should be a 500,
and not the user's fault.

84
00:05:46.325 --> 00:05:48.368
You can get very specific with it.

85
00:05:48.368 --> 00:05:53.034
If your product is an API, you probably
are very cautious about those errors.

86
00:05:53.034 --> 00:05:54.711
If your product isn't an API,

87
00:05:54.711 --> 00:05:58.983
it's probably not that big of a deal that
you know exactly what error did what.

88
00:05:58.983 --> 00:06:01.753
Because it's your API for your product,
you just need to make sure your

89
00:06:01.753 --> 00:06:04.398
server doesn't crash, and
you can investigate the errors later.

90
00:06:04.398 --> 00:06:08.025
Just put just enough information that you
need, and you don't need all the detail.

91
00:06:08.025 --> 00:06:11.167
But for an API that's a product, yeah,

92
00:06:11.167 --> 00:06:15.245
you would wanna make sure
you have the exact errors.

93
00:06:15.245 --> 00:06:18.576
A link to the documentation that talks
about this error status and what it does,

94
00:06:18.576 --> 00:06:19.528
and things like that.

95
00:06:19.528 --> 00:06:21.518
GitHub and
Stripe does a really good job on that.

96
00:06:23.263 --> 00:06:24.444
Error handling is a big deal.

97
00:06:24.444 --> 00:06:29.693
There's people dedicated on a team
whose job is just to do error handling.

98
00:06:29.693 --> 00:06:31.269
It's that big of a deal.

99
00:06:34.323 --> 00:06:36.421
Okay, so let's check this out.

100
00:06:36.421 --> 00:06:43.236
So I say I'm gonna create a new user, type
input if it's broken, so let's try that.

101
00:06:43.236 --> 00:06:47.843
So one, that means we gotta get
past the input validation that's

102
00:06:47.843 --> 00:06:52.554
already put in place, or
did we even add input validation to user?

103
00:06:52.554 --> 00:06:57.020
I don't think we did, which is fine.

104
00:06:57.020 --> 00:06:59.276
Where's that at?

105
00:06:59.276 --> 00:07:01.398
That's in index, no, that's in server.

106
00:07:01.398 --> 00:07:03.660
There we go, yeah,
we don't have input validation.

107
00:07:03.660 --> 00:07:05.890
But even if we did,
I can still get past it.

108
00:07:05.890 --> 00:07:07.739
I can still have a username,
I can still have a password.

109
00:07:07.739 --> 00:07:11.662
And this could still fail because
the username was already taken, right?

110
00:07:11.662 --> 00:07:14.387
Because the input validation isn't gonna
check the database to see if there's

111
00:07:14.387 --> 00:07:15.903
a user with that username
already in there.

112
00:07:15.903 --> 00:07:17.175
I guess you could have it do that,
but why?

113
00:07:17.175 --> 00:07:19.383
When a database is gonna do it for
you automatically,

114
00:07:19.383 --> 00:07:21.454
because of the unique
constraint on your schema?

115
00:07:21.454 --> 00:07:24.016
There's no point of querying
a database ahead of time.

116
00:07:24.016 --> 00:07:27.002
What's the point of having
a unique constraint?

117
00:07:27.002 --> 00:07:31.133
So let's try to create two users with
the same thing and see what happens.

118
00:07:36.245 --> 00:07:38.262
Okay, so if I say,

119
00:07:41.174 --> 00:07:46.329
POST to user with a body of,

120
00:07:48.858 --> 00:07:54.102
"username": "rick",

121
00:07:54.102 --> 00:07:59.784
"password": "cheese".

122
00:07:59.784 --> 00:08:05.554
So if I do that, I get a new user,
cool, that should work.

123
00:08:05.554 --> 00:08:10.018
If I do it again, aha,
I get our 400 bad request,

124
00:08:10.018 --> 00:08:13.889
"message": "invalid input", right?

125
00:08:13.889 --> 00:08:18.644
And that's exactly what I
had in our error handler,

126
00:08:18.644 --> 00:08:23.646
if we go back and look at that, Here, so

127
00:08:23.646 --> 00:08:29.569
it was, it triggered this,
error type of input,

128
00:08:29.569 --> 00:08:33.243
400, 'invalid input'.

129
00:08:33.243 --> 00:08:34.130
And that's because that's what I did here.

130
00:08:34.130 --> 00:08:38.900
I said, if this throws an error,
it's type is input, and

131
00:08:38.900 --> 00:08:41.874
call next, so that's what happened.

132
00:08:41.874 --> 00:08:47.167
So our error handler works,
our little errors type system works,

133
00:08:47.167 --> 00:08:50.015
doesn't get more sophisticated.

134
00:08:50.015 --> 00:08:55.982
There's nothing stopping you
from creating CustomErrors,

135
00:08:58.459 --> 00:09:01.992
That extends the error class, right?

136
00:09:01.992 --> 00:09:04.419
You could do that, and
then you can check for

137
00:09:04.419 --> 00:09:07.114
those custom errors inside
your error handler.

138
00:09:07.114 --> 00:09:10.332
In fact, there's packages that
already have some of these.

139
00:09:10.332 --> 00:09:14.080
If you ever used GraphQL, Apollo's
built in with a lot of this stuff.

140
00:09:15.350 --> 00:09:18.347
That's just the next level,
but maybe it's worth it.

141
00:09:22.228 --> 00:09:24.340
Okay, let's do one more.

142
00:09:24.340 --> 00:09:26.758
Let's go to a little more advanced one.

143
00:09:26.758 --> 00:09:32.933
How about one for
product, so, For product,

144
00:09:39.568 --> 00:09:43.438
Yeah, so
let's find one that has input validations.

145
00:09:43.438 --> 00:09:46.845
Okay, so for updateProduct, or
actually, let's do createProduct.

146
00:09:46.845 --> 00:09:52.086
So for createProduct, this will never
run unless the input validation passes.

147
00:09:52.086 --> 00:09:57.676
So, in what scenario would this

148
00:09:57.676 --> 00:10:03.272
database query cause an error?

149
00:10:06.846 --> 00:10:11.234
If this database query did throw an error,
why would it?

150
00:10:11.234 --> 00:10:14.763
&gt;&gt; If we increase the name length?

151
00:10:14.763 --> 00:10:18.305
&gt;&gt; If we increase the name length, yeah,
did we actually add that constraint?

152
00:10:18.305 --> 00:10:20.364
I don't remember, yeah,
I think you might be right.

153
00:10:20.364 --> 00:10:22.718
I actually was not thinking of that,
that's really good.

154
00:10:22.718 --> 00:10:28.419
[LAUGH] Yeah, you're right,
if it's more than 255, yeah.

155
00:10:28.419 --> 00:10:31.718
So yeah,
I guess it could still fill input,

156
00:10:31.718 --> 00:10:36.633
because we're not checking for
255 on our input middleware.

157
00:10:36.633 --> 00:10:41.309
Although we could, we could go to
Express validator, like max length 255.

158
00:10:41.309 --> 00:10:47.366
And then, if that was the case, then why
would this fail, if we did have that?

159
00:10:47.366 --> 00:10:50.000
Assuming we had that, why would this fail?

160
00:10:50.000 --> 00:10:51.810
&gt;&gt; If it doesn't belong to the user?

161
00:10:53.700 --> 00:10:55.970
&gt;&gt; If it doesn't belong to the user,
exactly.

162
00:10:55.970 --> 00:11:00.710
If it doesn't belong to the user,
it should fail, that's exactly right.

163
00:11:00.710 --> 00:11:04.170
And the other one is,
which is true for any database query.

164
00:11:06.440 --> 00:11:10.765
Is that the database just might have
messed up, might have lost the connection.

165
00:11:10.765 --> 00:11:15.130
Something happens, somebody pulled
the plug, talking over HTTP or

166
00:11:15.130 --> 00:11:19.053
any protocol over the Internet
is always going to be finicky.

167
00:11:19.053 --> 00:11:23.741
So it's not always gonna be talk
to database, everything came back.

168
00:11:23.741 --> 00:11:26.172
You might just have a connection problem,
which is a server problem.

169
00:11:26.172 --> 00:11:31.470
So it could be that too, so
we wanna handle those, so let's do that.

170
00:11:31.470 --> 00:11:32.640
So we'll go back into product.

171
00:11:33.710 --> 00:11:35.700
And let's do just that.

172
00:11:35.700 --> 00:11:38.459
So right now, well,
I guess for createProduct,

173
00:11:38.459 --> 00:11:43.710
it doesn't matter if it doesn't belong
to the user, because you're creating it.

174
00:11:43.710 --> 00:11:45.240
So yeah, I guess maybe not for that.

175
00:11:45.240 --> 00:11:50.181
On read, if I was getting a product, then
yeah, it would throw an error, but for

176
00:11:50.181 --> 00:11:53.934
create, Yeah,
cuz I'm only putting in the req.user.

177
00:11:53.934 --> 00:11:55.302
So yeah, that should be an error.

178
00:11:55.302 --> 00:12:00.778
The only really error here for this one
would be if the database messed up.

179
00:12:00.778 --> 00:12:07.307
So in this case, there is no scenario in
which the user could have messed this up,

180
00:12:07.307 --> 00:12:12.507
assuming we had the 255 limit
check on the input middleware.

181
00:12:12.507 --> 00:12:15.908
So in that case, I would do a try-catch,

182
00:12:15.908 --> 00:12:20.200
and this would just be
a 500 because we messed up.

183
00:12:20.200 --> 00:12:22.427
If this thing broke,
it's probably because we messed up,

184
00:12:22.427 --> 00:12:24.037
cuz how else would you
have messed this up?

185
00:12:25.476 --> 00:12:26.375
So I'll just do that.

186
00:12:29.289 --> 00:12:38.462
Try, catch, And then, because by default,

187
00:12:38.462 --> 00:12:43.401
all errors default to 500, I don't have to
give it a type, so, I can just say next.

188
00:12:44.641 --> 00:12:47.528
I don't know why it keeps doing that,
next tick, and

189
00:12:47.528 --> 00:12:49.400
then we just need to bring in next.

190
00:12:51.583 --> 00:12:54.625
And really that's just
how you have to play it.

191
00:12:54.625 --> 00:13:02.209
You have to go scenario by scenario and
think about why might this throw an error.

192
00:13:02.209 --> 00:13:08.271
And try to catch that error,
figure out what that error type would be.

193
00:13:08.271 --> 00:13:11.125
And then report it, collect it,
log it appropriately.

194
00:13:11.125 --> 00:13:15.786
So it could be very tedious, and
creating an error system is tough.

195
00:13:15.786 --> 00:13:19.149
It's usually a lot easier to do
before you start writing the code.

196
00:13:19.149 --> 00:13:22.740
After you write the code, and you gotta go
back and augment it with an error handling

197
00:13:22.740 --> 00:13:24.857
solution, in my opinion,
it's a lot tougher.

198
00:13:24.857 --> 00:13:29.934
But it is case by case basis, and this
isn't even including transactions, right?

199
00:13:29.934 --> 00:13:33.667
A transaction is like,
let's say inside of createProduct,

200
00:13:33.667 --> 00:13:36.607
not only do we create
a product in a database, but

201
00:13:36.607 --> 00:13:41.160
we go talk to this other API like Stripe,
and we create something there.

202
00:13:41.160 --> 00:13:44.545
And then we update something else in
the database when Stripe comes back,

203
00:13:44.545 --> 00:13:46.940
we do all these multiple operations.

204
00:13:46.940 --> 00:13:51.786
But let's say halfway through one
of the five operations we do,

205
00:13:51.786 --> 00:13:55.000
number four failed, right?

206
00:13:55.000 --> 00:13:59.190
We probably wanna roll back and
undo all the other things that we did.

207
00:13:59.190 --> 00:14:03.592
So the database isn't in a wonky state
of halfway did some of this stuff but

208
00:14:03.592 --> 00:14:05.020
didn't do this stuff.

209
00:14:05.020 --> 00:14:08.210
Cuz you probably don't have the ability
to resume where you left off.

210
00:14:08.210 --> 00:14:10.014
So you need a transaction
to roll that back.

211
00:14:10.014 --> 00:14:12.412
When you start doing transactions,

212
00:14:12.412 --> 00:14:15.743
you absolutely need to
know which error happened.

213
00:14:15.743 --> 00:14:19.727
Because some errors are gonna require
you to roll back and some won't.

214
00:14:19.727 --> 00:14:24.370
So it's imperative to know what threw and
why it threw.

215
00:14:24.370 --> 00:14:26.887
So thinking about that is
a really good exercise.

216
00:14:33.086 --> 00:14:37.203
Okay, so
I've tried to create a product, yeah,

217
00:14:37.203 --> 00:14:41.430
we get a 500, so
let's try to create a product.

218
00:14:41.430 --> 00:14:46.177
Go here, we're gonna POST to API,

219
00:14:46.177 --> 00:14:49.194
product, put a name,

220
00:14:58.487 --> 00:15:01.176
Of whatever,
it's probably not gonna break.

221
00:15:01.176 --> 00:15:04.332
Because the database, well,
it might break for some other reason.

222
00:15:04.332 --> 00:15:09.970
But it shouldn't break because
the database is fine, it's not broken.

223
00:15:09.970 --> 00:15:14.002
I said the only scenario in which this
might break will be because of database

224
00:15:14.002 --> 00:15:15.010
didn't connect.

225
00:15:15.010 --> 00:15:18.302
But we do have that character limit, so
I guess we could test that just to see.

226
00:15:18.302 --> 00:15:22.444
So I'm gonna just run into
that limit right quick.

227
00:15:24.770 --> 00:15:27.684
I think that's 255, that has to be 255.

228
00:15:27.684 --> 00:15:29.884
I can't tell, let's see.

229
00:15:29.884 --> 00:15:31.320
Yeah, okay, there we go.

230
00:15:31.320 --> 00:15:32.990
So we hit the limit.

231
00:15:32.990 --> 00:15:37.267
And right now this threw
the error on create, but

232
00:15:37.267 --> 00:15:40.299
our database actually shut down.

233
00:15:40.299 --> 00:15:42.056
I mean, I'm sorry,
our server actually shut down.

234
00:15:42.056 --> 00:15:46.249
So it looks like,
let's see why that might have been.

235
00:15:46.249 --> 00:15:50.476
That should have been caught, Here, so

236
00:15:50.476 --> 00:15:54.593
let's see, product, try, product,

237
00:15:59.811 --> 00:16:02.193
Why would this not have been caught?

238
00:16:02.193 --> 00:16:07.500
The only reason I could
think this wasn't caught

239
00:16:07.500 --> 00:16:12.817
is because this handler
belongs to a subrouter.

240
00:16:12.817 --> 00:16:16.830
And our error handler is
on the main router stack.

241
00:16:16.830 --> 00:16:20.460
And that might be a reason,
we can try, let's see what happens.

242
00:16:20.460 --> 00:16:22.455
So let's go to router.

243
00:16:22.455 --> 00:16:24.955
And let's add an error
handler here on the router.

244
00:16:24.955 --> 00:16:28.867
So we'll say router.user,
I'm going to add an error handler here.

245
00:16:28.867 --> 00:16:32.262
And let's see what happens.

246
00:16:32.262 --> 00:16:36.326
That's my hypothesis, I guess.

247
00:16:39.216 --> 00:16:40.221
Let's see what happens.

248
00:16:44.041 --> 00:16:47.531
And res.json,

249
00:16:50.295 --> 00:16:55.584
'in router handler',
let's see, run that again.

250
00:17:00.211 --> 00:17:02.620
Run that again.

251
00:17:02.620 --> 00:17:04.830
Yeah, that's exactly right.

252
00:17:04.830 --> 00:17:07.263
So because the handlers for

253
00:17:07.263 --> 00:17:12.446
all the resources that aren't
user are in the subrouter,

254
00:17:12.446 --> 00:17:19.241
their errors aren't gonna bubble up
to the main router's error handling.

255
00:17:19.241 --> 00:17:23.643
So if you have a subrouter,
you also have to add an erro handler for

256
00:17:23.643 --> 00:17:27.016
that router at the bottom
of those routes as well.

257
00:17:33.093 --> 00:17:34.413
I forgot about that little gotcha.

258
00:17:37.418 --> 00:17:40.900
Cool, any other questions
on error handling?

259
00:17:40.900 --> 00:17:44.392
Most of the stuff is mostly just the same.

260
00:17:44.392 --> 00:17:48.819
Obviously, the only thing that's probably
slightly different would be the,

261
00:17:49.878 --> 00:17:53.006
Updates where there might
be more than one query.

262
00:17:53.006 --> 00:17:57.380
So you have to do multiple try-catches,
but still the same.

263
00:17:57.380 --> 00:18:01.380
You just gotta think about why would this
break, and what type of error would it be?

264
00:18:01.380 --> 00:18:04.090
Would it be caused by
a user doing something?

265
00:18:04.090 --> 00:18:09.064
Hopefully our input validators eliminated
most of what a user could do to

266
00:18:09.064 --> 00:18:12.813
cause our stuff to break as
far as values are existing or

267
00:18:12.813 --> 00:18:15.190
not existing and types of values.

268
00:18:16.190 --> 00:18:18.254
Or is it outside of our control,

269
00:18:18.254 --> 00:18:21.853
there's some logic in here
that hits a third party API.

270
00:18:21.853 --> 00:18:24.658
We're talking to the Pokemon API and
that broke, and

271
00:18:24.658 --> 00:18:27.664
that's why our thing broke,
or is it a technical issue?

272
00:18:27.664 --> 00:18:31.140
The database connection stream broke,
or we dropped the connection, right?

273
00:18:31.140 --> 00:18:36.580
You gotta think about what and
why would something break?

274
00:18:36.580 --> 00:18:41.512
And then plan for that, try-catch that,
inspect the error, see what it is,

275
00:18:41.512 --> 00:18:43.773
and then handle it appropriately.

