WEBVTT

1
00:00:00.360 --> 00:00:02.250
We're gonna write some tests.

2
00:00:02.250 --> 00:00:04.860
The thing that everyone loves
doing is writing tests.

3
00:00:06.770 --> 00:00:08.583
I promise you it's
actually really cool and

4
00:00:08.583 --> 00:00:10.447
easy with Express
especially the tools now.

5
00:00:10.447 --> 00:00:14.649
So some of the tools that we're gonna be
using to write some tests include Jest,

6
00:00:14.649 --> 00:00:15.724
ever heard of Jest?

7
00:00:15.724 --> 00:00:18.744
It's basically a ripoff of Mocha and
Jasmine but

8
00:00:18.744 --> 00:00:20.815
does a really good job honestly.

9
00:00:20.815 --> 00:00:24.260
And Supertest, we'll be using that too.

10
00:00:24.260 --> 00:00:27.228
We'll talk about those two different
things and why we're gonna use them.

11
00:00:27.228 --> 00:00:31.824
In the meantime let's install some things,
let's grab this and install, and

12
00:00:31.824 --> 00:00:34.166
I'll talk about what these things are.

13
00:00:35.890 --> 00:00:40.738
So Supertest is a tool that's
gonna allow us to do what's

14
00:00:40.738 --> 00:00:43.370
called integration testing.

15
00:00:43.370 --> 00:00:45.140
I'll talk about what that is.

16
00:00:45.140 --> 00:00:47.235
And then we just download
the TypeScript types for it.

17
00:00:47.235 --> 00:00:50.966
Jest is a testing framework just
like Express is a server framework,

18
00:00:50.966 --> 00:00:54.953
just like React is a client framework,
and allow us to write some tests and

19
00:00:54.953 --> 00:00:56.068
the types for that.

20
00:00:56.068 --> 00:00:58.972
And then ts-jest allows
us to write our Jest and

21
00:00:58.972 --> 00:01:05.060
TypeScript Okay, so
we got all those things.

22
00:01:05.060 --> 00:01:10.226
The next thing we wanna do is we
want to run npx ts-jest config:init.

23
00:01:10.226 --> 00:01:15.045
What this is gonna do is create
a configuration file on our project for

24
00:01:15.045 --> 00:01:15.552
Jest.

25
00:01:18.538 --> 00:01:19.300
We don't even have to touch it.

26
00:01:19.300 --> 00:01:20.290
We just need it there.

27
00:01:20.290 --> 00:01:21.156
You can leave it alone.

28
00:01:24.236 --> 00:01:26.960
Okay, so different types of tests.

29
00:01:26.960 --> 00:01:29.160
We have a unit test.

30
00:01:29.160 --> 00:01:30.570
Anybody here wanna describe unit test?

31
00:01:30.570 --> 00:01:32.250
Don't look at my stuff.

32
00:01:32.250 --> 00:01:36.776
Just talk about it,
don't look at my definition.

33
00:01:36.776 --> 00:01:41.327
I know people here have
written unit tests.

34
00:01:41.327 --> 00:01:42.840
I know you've written unit tests.

35
00:01:44.340 --> 00:01:45.321
What's a unit test?

36
00:01:45.321 --> 00:01:48.100
&gt;&gt; I mean, in the unit test
we're just testing the unit

37
00:01:48.100 --> 00:01:49.870
of whatever you're writing.

38
00:01:49.870 --> 00:01:54.282
Suppose, if you are contacting to
the database you are not testing the code

39
00:01:54.282 --> 00:01:59.183
which getting the data from database, or
testing the code only, what you are doing

40
00:01:59.183 --> 00:02:03.757
after getting the record from database and
then you're running some logic.

41
00:02:03.757 --> 00:02:07.505
So, writing tests for your unit of code.

42
00:02:07.505 --> 00:02:10.960
&gt;&gt; Yeah, well said I don't think I
could have said it better myself.

43
00:02:10.960 --> 00:02:14.986
Pretty much exactly what
you said it's just testing

44
00:02:14.986 --> 00:02:20.000
the individual logic bits
isolated from everything else.

45
00:02:20.000 --> 00:02:23.252
Not in like conjunction and
how they all work together, but

46
00:02:23.252 --> 00:02:25.080
how does this one function work?

47
00:02:25.080 --> 00:02:26.660
Let me test that.

48
00:02:26.660 --> 00:02:27.880
You know like, and nothing else.

49
00:02:27.880 --> 00:02:30.029
And even then within that
function it's like, well,

50
00:02:30.029 --> 00:02:32.317
I just wanna test that one
branch within that function, or

51
00:02:32.317 --> 00:02:34.530
I wanna test what happens if
I do just this one argument.

52
00:02:34.530 --> 00:02:39.838
Like it's just testing individual things
in isolation versus testing systems and

53
00:02:39.838 --> 00:02:44.692
abstractions because then you started
getting into integration testing,

54
00:02:44.692 --> 00:02:47.969
end to end testing all
different types of testing.

55
00:02:47.969 --> 00:02:51.526
So that's what unit test is.

56
00:02:51.526 --> 00:02:53.851
So let's look at an example of what,

57
00:02:53.851 --> 00:02:57.610
in order to write unit tests
you need to have testable code.

58
00:02:57.610 --> 00:03:01.460
So when you're writing your code you have
to be thinking about can I even test this?

59
00:03:01.460 --> 00:03:03.510
Is this testable?

60
00:03:03.510 --> 00:03:06.106
And that's something that you
should always be asking yourself.

61
00:03:06.106 --> 00:03:10.067
One of the things I look at a lot when I'm
like reviewing people people's code is how

62
00:03:10.067 --> 00:03:11.376
are you going to test this?

63
00:03:11.376 --> 00:03:14.480
This is brilliant, like I don't know
how you did this, this is amazing,

64
00:03:14.480 --> 00:03:15.847
but how are you gonna test this?

65
00:03:15.847 --> 00:03:18.276
How do we keep it brilliant,
how do we keep it amazing?

66
00:03:18.276 --> 00:03:22.330
Because it is actually untestable as
you put the whole app in one function.

67
00:03:22.330 --> 00:03:25.490
So [LAUGH] I don't know what
we're supposed to do here, okay?

68
00:03:25.490 --> 00:03:29.400
So let's look at an example
of not testable code.

69
00:03:29.400 --> 00:03:32.030
So we wanna write a test for
this action function.

70
00:03:32.030 --> 00:03:33.873
We can, but even with only three or

71
00:03:33.873 --> 00:03:36.873
four lines of code this is
actually really hard to test.

72
00:03:36.873 --> 00:03:38.168
I'll tell you why.

73
00:03:38.168 --> 00:03:43.210
One, it's not exported so I don't know how
we'll even get a reference to it somehow.

74
00:03:44.420 --> 00:03:48.860
Two, it's literally creating a closure
with this variable outside of here.

75
00:03:48.860 --> 00:03:56.430
So we're not actually exporting this
function, so we can't really test it.

76
00:03:56.430 --> 00:03:59.513
The second thing is it's creating
a closure by reaching out and

77
00:03:59.513 --> 00:04:01.670
grabbing this variable in another scope.

78
00:04:01.670 --> 00:04:05.286
So if we wanted to export this
function into another file, well it

79
00:04:05.286 --> 00:04:10.130
has this extra dependency that we have no
access to, that's a closure over here.

80
00:04:10.130 --> 00:04:12.490
Good luck mocking that out,
good luck changing that.

81
00:04:12.490 --> 00:04:14.270
You're just making it really hard.

82
00:04:14.270 --> 00:04:15.860
So that's not really testable.

83
00:04:15.860 --> 00:04:16.710
But it looks so innocent.

84
00:04:16.710 --> 00:04:19.900
It looks like we mean it was really quick
little function, why is this not testable?

85
00:04:19.900 --> 00:04:21.810
Well, the testable version
will look something like this.

86
00:04:21.810 --> 00:04:24.425
It's exported, so
we can import it by itself.

87
00:04:24.425 --> 00:04:27.940
And instead of reaching out and
grabbing something or creating a closure,

88
00:04:27.940 --> 00:04:30.410
it declares it as an argument and
it can be parsed in.

89
00:04:30.410 --> 00:04:34.681
This is great because in our tests we can
pass in different values here to see what

90
00:04:34.681 --> 00:04:39.078
the result would be, which is amazing that
way we can test the behavior, we can try

91
00:04:39.078 --> 00:04:43.254
to break the function, we can see what
happens under different conditions.

92
00:04:43.254 --> 00:04:44.337
We can never do that here.

93
00:04:44.337 --> 00:04:48.671
How would you change the value
of value inside your tests?

94
00:04:48.671 --> 00:04:50.210
I don't know how,
I don't know how you would do it.

95
00:04:50.210 --> 00:04:53.771
It's actually impossible [LAUGH]
without some type of hack.

96
00:04:53.771 --> 00:04:57.350
So you would have to write the test
in the same file as its function.

97
00:04:57.350 --> 00:04:58.930
I would imagine it'd be really weird.

98
00:04:58.930 --> 00:05:00.360
I don't know how you do it.

99
00:05:00.360 --> 00:05:02.090
But here it's not a problem.

100
00:05:02.090 --> 00:05:05.979
Okay, this function is not bound to the
file that it's in whereas this function

101
00:05:05.979 --> 00:05:07.730
is pretty much bound to this value.

102
00:05:07.730 --> 00:05:09.930
It cannot move without
functioning differently

