WEBVTT

1
00:00:00.000 --> 00:00:06.018
Okay, so what we'll do is, I wanna
give you some time to go through and

2
00:00:06.018 --> 00:00:10.710
follow the exact steps that I just did,
which was one,

3
00:00:10.710 --> 00:00:15.202
identify where an input
validation needs to exist.

4
00:00:15.202 --> 00:00:18.897
So we're talking a put,
we're talking a post.

5
00:00:18.897 --> 00:00:25.386
Two, identify what the resource is,
so a product or an update.

6
00:00:28.338 --> 00:00:32.641
The reason you've got to do that is
because you have to go to the schema to

7
00:00:32.641 --> 00:00:38.504
understand what it is on that resource,
That you need to create or

8
00:00:38.504 --> 00:00:42.735
that you can use to update, so
you know what validations to make, right?

9
00:00:42.735 --> 00:00:47.727
And then lastly,
create an input validator or

10
00:00:47.727 --> 00:00:51.958
many input validators for that route.

11
00:00:51.958 --> 00:00:56.370
So remember, this is middleware, so
I can add as many of them as I want,

12
00:00:56.370 --> 00:00:59.251
it doesn't matter,
I just gotta add a comma.

13
00:00:59.251 --> 00:01:01.969
So you can add as many
of those as you want, or

14
00:01:01.969 --> 00:01:05.069
you can put them in an array,
it doesn't matter.

15
00:01:05.069 --> 00:01:09.782
It doesn't have to be one,
as long as they come after the route and

16
00:01:09.782 --> 00:01:19.052
before the handler Let's just go ahead and
validate these routes.

17
00:01:19.052 --> 00:01:24.529
So first thing I'm gonna do is,
I noticed that this piece

18
00:01:24.529 --> 00:01:29.549
of code here,
where we get the validation results,

19
00:01:29.549 --> 00:01:33.330
we check to see if the errors are there.

20
00:01:33.330 --> 00:01:36.628
And if they are,
we send back a 400 with errors,

21
00:01:36.628 --> 00:01:39.867
that's gonna be the same,
no matter what route.

22
00:01:39.867 --> 00:01:43.944
I mean, there's nothing specific to
product in this piece of code anywhere.

23
00:01:43.944 --> 00:01:47.394
It's just gonna be the same
no matter where you do this.

24
00:01:47.394 --> 00:01:51.983
So I'm actually gonna turn this into
a middleware that we can use after our

25
00:01:51.983 --> 00:01:56.510
validation middleware, so
I don't have to rewrite every single time.

26
00:01:56.510 --> 00:02:00.059
So I'm gonna go into over here,
I'm gonna go into our modules,

27
00:02:00.059 --> 00:02:02.710
I'm gonna make a new
file called middlewares.

28
00:02:05.498 --> 00:02:10.376
Or middleware, I guess,
I don't know if that's plural, whatever.

29
00:02:10.376 --> 00:02:16.006
And I'm gonna export, A new function here.

30
00:02:16.006 --> 00:02:21.569
I'm gonna call it handleInputErrors,

31
00:02:21.569 --> 00:02:26.321
I guess, or something like that.

32
00:02:27.612 --> 00:02:32.434
And it's gonnaa be middleware.

33
00:02:32.434 --> 00:02:39.766
Right, and all its gotta do is this,
it's gonna copy this code here,

34
00:02:39.766 --> 00:02:44.877
bring it over, Import(Validation Result).

35
00:02:49.523 --> 00:02:52.371
And if that's not the case,

36
00:02:52.371 --> 00:02:57.365
then it'll just call next
to go on to the handler.

37
00:03:05.500 --> 00:03:10.888
So now ,all I have to do is just add
this handleInputErrors middleware after

38
00:03:10.888 --> 00:03:16.290
any of the input in middleware that I'm
going to write for any of the routes.

39
00:03:16.290 --> 00:03:18.949
Again, this is just one
of the a million ways.

40
00:03:18.949 --> 00:03:21.740
We're gonna talk about
error handling later,

41
00:03:21.740 --> 00:03:24.257
that's probably gonna contradict this.

42
00:03:24.257 --> 00:03:27.319
There's just so many different
ways on how to handle things and

43
00:03:27.319 --> 00:03:28.780
they're all very flexible.

44
00:03:28.780 --> 00:03:33.462
So this is just how I see it,
because I would hate to have to copy and

45
00:03:33.462 --> 00:03:38.401
paste this so many times, and
then go back and like, actually,

46
00:03:38.401 --> 00:03:41.485
I wanna send back a 402 for some reason.

47
00:03:41.485 --> 00:03:44.235
And then I gotta go change 402 everywhere,

48
00:03:44.235 --> 00:03:46.784
it would just suck to do that over and
over.

49
00:03:46.784 --> 00:03:50.151
So I'm just gonna put it
in its own little thing.

50
00:03:50.151 --> 00:03:53.919
All right, so
now I'm gonna go back to the router,

51
00:03:53.919 --> 00:03:56.558
and I can get rid of this thing here.

52
00:03:59.443 --> 00:04:06.667
And instead, I can say, handleErrorInputs

53
00:04:06.667 --> 00:04:11.471
like that, and
it should do the same thing.

54
00:04:11.471 --> 00:04:14.636
So I'm gonna give that a try,
just to make sure that that works, and

55
00:04:14.636 --> 00:04:15.874
then we'll continue on.

56
00:04:15.874 --> 00:04:17.104
So I'm gonna start my server.

57
00:04:18.990 --> 00:04:25.293
Go back to Thunder Client,
Try to do this again,

58
00:04:25.293 --> 00:04:29.898
and yeah, it still works,
everything still works the same.

59
00:04:29.898 --> 00:04:33.191
So this is a great use case of middleware,

60
00:04:33.191 --> 00:04:37.718
of just sitting before a handler,
trying to protect it.

61
00:04:37.718 --> 00:04:42.866
Because the thing I'm always optimizing
for, the thing I'm always thinking about,

62
00:04:42.866 --> 00:04:46.743
is how do I ensure that the handler
is only doing business logic and

63
00:04:46.743 --> 00:04:47.676
nothing else?

64
00:04:47.676 --> 00:04:52.898
I just don't want it to do anything else,
because once you actually start

65
00:04:52.898 --> 00:04:57.715
writing big handlers, like,
this thing has to create a user.

66
00:04:57.715 --> 00:05:01.505
And then it has to create a customer
on stripe, and then it has to subscribe

67
00:05:01.505 --> 00:05:04.767
them to a subscription, and
then it has to send off analytics.

68
00:05:04.767 --> 00:05:09.590
That handler is gonna get so beefy, the
last thing that I wanna do is like, and

69
00:05:09.590 --> 00:05:13.673
you also gotta check for inputs,
and you also have to do a log, and

70
00:05:13.673 --> 00:05:16.366
you also have to do, it just gets tedious.

71
00:05:16.366 --> 00:05:20.771
And then, if you wanna change
how you report to analytics, but

72
00:05:20.771 --> 00:05:26.946
you wrote it in 30 different handlers, we
have to change it in 30 different places.

73
00:05:26.946 --> 00:05:28.515
Whereas if you wrote it in one middleware,

74
00:05:28.515 --> 00:05:30.310
you only got to change it
in that one middleware.

75
00:05:30.310 --> 00:05:33.243
Okay, so the next one would be a post for
a product.

76
00:05:33.243 --> 00:05:35.773
So what do you need to create a product?

77
00:05:35.773 --> 00:05:41.546
I don't know, let's see.

78
00:05:41.546 --> 00:05:47.340
I think we need a name, and
we need a belongs to ID.

79
00:05:47.340 --> 00:05:50.718
Okay, now, let me ask you this,

80
00:05:50.718 --> 00:05:55.185
should the user send up
the user ID along with

81
00:05:55.185 --> 00:06:00.165
a name that we will
associate this product with?

82
00:06:00.165 --> 00:06:05.257
Should we trust the ID
that the user sends up as

83
00:06:05.257 --> 00:06:11.292
the ID that we associate
this product with, why not?

84
00:06:11.292 --> 00:06:12.910
&gt;&gt; Because they can send anything,
they can send my ID.

85
00:06:12.910 --> 00:06:15.189
&gt;&gt; Right, they can send anyone's ID.

86
00:06:15.189 --> 00:06:15.891
&gt;&gt; Never trust the user.

87
00:06:15.891 --> 00:06:21.309
&gt;&gt; Right, not so, right,
we don't want them to send us an ID.

88
00:06:21.309 --> 00:06:25.251
The ID that we're gonna assign to this
product is the ID of the signed in user,

89
00:06:25.251 --> 00:06:29.011
which is, remember, we already have,
this is the power of middleware,

90
00:06:29.011 --> 00:06:31.763
we already have a middleware
that does that, right?

91
00:06:31.763 --> 00:06:36.991
If we go to auth,
that's what this protect middleware does,

92
00:06:36.991 --> 00:06:41.920
It figures out who is the user
that's making the request,

93
00:06:41.920 --> 00:06:45.857
right, and
it attaches it here to req.user.

94
00:06:45.857 --> 00:06:51.047
So if we needed to know what ID to
add to the product, it would be on

95
00:06:51.047 --> 00:06:57.030
req.user.id and not req.body.id,
because we can't trust that ID.

96
00:06:57.030 --> 00:07:01.388
That can be any ID, and
if we just assign that to the product,

97
00:07:01.388 --> 00:07:05.244
some user is now creating products for
another user.

98
00:07:05.244 --> 00:07:08.791
I don't know why they would do that,
but that's what would happen.

99
00:07:08.791 --> 00:07:13.000
Because we have a multitenant database,
we have to be very careful about whose

100
00:07:13.000 --> 00:07:17.488
information we're touching and ensuring
that it's scoped to the signed in user.

101
00:07:17.488 --> 00:07:22.730
So when it comes to user information,
only ever trust this user.

102
00:07:22.730 --> 00:07:27.237
Don't trust the user that
information that they're sending up,

103
00:07:27.237 --> 00:07:29.014
cuz you just don't know.

104
00:07:29.014 --> 00:07:33.976
Yeah, so that was a tricky one, but
it comes with lots of mistakes.

105
00:07:33.976 --> 00:07:39.550
[LAUGH] I remember I made this product one
time that did not do things like that.

106
00:07:39.550 --> 00:07:43.037
And people were just changing each other's
stuff all the time, and I was like,

107
00:07:43.037 --> 00:07:46.022
I have no idea what's going on,
cuz I just didn't do those checks.

108
00:07:46.022 --> 00:07:48.300
And yeah, it was very, very wild.

109
00:07:48.300 --> 00:07:53.623
Okay, so for that, just means we won't
be doing a check for belongs to, that's

110
00:07:53.623 --> 00:07:58.970
not something we wanna check for, because
we don't want you seeing that at all.

111
00:07:58.970 --> 00:08:01.827
In fact, we could probably do a check
that says, if you do send it,

112
00:08:01.827 --> 00:08:04.684
throw an error, but we're not
gonna check for that, so instead,

113
00:08:04.684 --> 00:08:06.846
we're just really just
gonna use the same thing.

114
00:08:06.846 --> 00:08:11.160
There's a name and
handleInputErrors, so we'll do that.

115
00:08:17.490 --> 00:08:19.667
And then we'll keep moving for updates.

116
00:08:19.667 --> 00:08:26.744
So for update, we gotta put, update's a
little more sophisticated than a product,

117
00:08:26.744 --> 00:08:32.133
cuz it has a title, a body, Status,

118
00:08:32.133 --> 00:08:37.592
well, status is default, so
I guess that's not required at least.

119
00:08:37.592 --> 00:08:42.790
And then version and asset are also not
required, and then it has a product ID.

120
00:08:42.790 --> 00:08:47.262
Now, should we trust the product
ID that a user would send up to

121
00:08:47.262 --> 00:08:49.412
associate with this update?

122
00:08:56.500 --> 00:09:01.797
That's a trick questions, seeing how I
just talked about how not to trust users.

123
00:09:01.797 --> 00:09:05.354
&gt;&gt; We can, but we need to check whether
this product belongs to that user or not.

124
00:09:05.354 --> 00:09:09.564
&gt;&gt; Exactly, yes,
we can trust it only if we verify that

125
00:09:09.564 --> 00:09:14.349
the product ID that they sent
up actually belongs to the user

126
00:09:14.349 --> 00:09:19.060
that is making the request,
and then we can associate it.

127
00:09:19.060 --> 00:09:22.124
Because we actually don't have
any other place to get the ID, so

128
00:09:22.124 --> 00:09:23.610
you would have to give it to us.

129
00:09:23.610 --> 00:09:26.253
We don't know what product
you wanna assign this to.

130
00:09:26.253 --> 00:09:30.215
So yeah, we can, but
then we also have to verify.

131
00:09:30.215 --> 00:09:32.895
So it's just those little
things that have to happen.

132
00:09:32.895 --> 00:09:36.421
And this is why I try to keep
the handlers very light,

133
00:09:36.421 --> 00:09:39.961
because you have to do all
this stuff inside of them.

134
00:09:39.961 --> 00:09:42.052
And the last thing you wanna do is,

135
00:09:42.052 --> 00:09:45.021
I'm also checking to see
if they sent me a field.

136
00:09:45.021 --> 00:09:52.834
So yeah, I see you've been in
the trenches before [LAUGH].

137
00:09:52.834 --> 00:09:54.298
&gt;&gt; I already burned my fingers.

138
00:09:54.298 --> 00:09:55.825
&gt;&gt; Right, so for put.

139
00:09:58.750 --> 00:10:01.649
On update, we want, yeah, so

140
00:10:01.649 --> 00:10:07.109
all the things you can update
on an update would be a title,

141
00:10:07.109 --> 00:10:11.024
a body, a status, a version, an asset.

142
00:10:11.024 --> 00:10:15.054
Probably not gonna let you update
the product, because an update

143
00:10:15.054 --> 00:10:19.679
belongs to a product, why would it
belong to another product eventually?

144
00:10:19.679 --> 00:10:21.025
That's kinda weird.

145
00:10:21.025 --> 00:10:24.900
I can't even think of a UI that would say,
change, no, that wouldn't even make sense.

146
00:10:24.900 --> 00:10:27.083
So we won't add that to update.

147
00:10:27.083 --> 00:10:30.678
So let's go back to our route here,
and let's do that.

148
00:10:30.678 --> 00:10:32.960
So I'm gonna say body,

149
00:10:36.637 --> 00:10:41.602
Title, sorry, did I get rid of that?

150
00:10:41.602 --> 00:10:43.571
There we go.

151
00:10:43.571 --> 00:10:50.909
Body, title, we have, I think there's
an exist, yeah, so you could do exist.

152
00:10:50.909 --> 00:10:56.305
But I think we want these to be optional,

153
00:10:56.305 --> 00:10:59.173
so body isOptional.

154
00:10:59.173 --> 00:11:04.505
I think there's optional by default.

155
00:11:04.505 --> 00:11:07.926
No, there it is, optional, there we go.

156
00:11:07.926 --> 00:11:11.400
Okay, so we got that,
and then we have body,

157
00:11:16.534 --> 00:11:21.099
Body, I was like, I know it's called
something, and then that's also optional.

158
00:11:23.622 --> 00:11:28.908
And then we have, Body.

159
00:11:31.406 --> 00:11:33.537
What was the other one?

160
00:11:33.537 --> 00:11:36.455
Status, version, and asset.

161
00:11:41.861 --> 00:11:42.361
Status,

162
00:11:50.837 --> 00:11:57.355
Version, And asset.

163
00:11:59.811 --> 00:12:03.173
Well, I guess asset would be different,
because this will be an image upload and

164
00:12:03.173 --> 00:12:06.534
you wouldn't know the URL for it, so
maybe not, that's something different,

165
00:12:06.534 --> 00:12:08.532
it's like, you're gonna upload something.

166
00:12:08.532 --> 00:12:13.142
Okay, this thing is super long,

167
00:12:13.142 --> 00:12:19.079
let me just bring this
on to the next slide.

168
00:12:21.666 --> 00:12:25.270
Okay, and that's still, there we go.

169
00:12:27.489 --> 00:12:30.144
So as you see, this is just getting long.

170
00:12:30.144 --> 00:12:32.795
This is why, as we said earlier, you
probably wanna put this in another file or

171
00:12:32.795 --> 00:12:33.569
something like that.

172
00:12:33.569 --> 00:12:35.087
So it's not just for

173
00:12:35.087 --> 00:12:39.828
the same thing of maintaining
your handlers and keeping them.

174
00:12:39.828 --> 00:12:43.490
You probably want your routes
to just to do route stuff and

175
00:12:43.490 --> 00:12:47.318
not have all this fluffy
middleware stuff hanging around.

176
00:12:47.318 --> 00:12:48.706
So maybe you would put this
somewhere else in input.

177
00:12:48.706 --> 00:12:53.298
It's separate inputs file and
you just import them in,

178
00:12:53.298 --> 00:12:55.650
had to do that before, yes.

179
00:12:55.650 --> 00:12:59.871
&gt;&gt; With status, don't we have to
validate to make sure it's one of

180
00:12:59.871 --> 00:13:03.790
the options provided, or
do we let [INAUDIBLE] handle that?

181
00:13:03.790 --> 00:13:06.553
&gt;&gt; That was literally just about to
ask that question, great question.

182
00:13:06.553 --> 00:13:12.659
I was gonna ask if anyone handled that
with status being an enum or not.

183
00:13:12.659 --> 00:13:17.219
Anyone figured out how to only
choose one of the different

184
00:13:17.219 --> 00:13:21.399
types of statuses that's possible for
the update,

185
00:13:21.399 --> 00:13:26.910
which in this case will be IN_PROGRESS,
SHIPPED, or DEPRECATED?

186
00:13:28.232 --> 00:13:30.170
No, no one tried it.

187
00:13:30.170 --> 00:13:35.248
Well, I do believe that there is a .one,

188
00:13:35.248 --> 00:13:38.448
it's oneOf, I believe.

189
00:13:42.787 --> 00:13:46.874
Pretty sure, there's, let's see,
pretty sure there's a .one,

190
00:13:50.017 --> 00:13:54.203
Or, I'm sorry, I think it's you
gotta do oneOf first, there we go.

191
00:13:54.203 --> 00:13:59.531
So oneOf, and then you can say body.

192
00:14:04.724 --> 00:14:06.660
Let me see, what's the names of them?

193
00:14:06.660 --> 00:14:08.429
There we go, IN_PROGRESS, SHIPPED.

194
00:14:15.832 --> 00:14:22.577
PROGRESS, you gotta put an array,
I'm sorry, there we go.

195
00:14:22.577 --> 00:14:29.471
So (IN_PROGRESS), body, (SHIPPED) and

196
00:14:29.471 --> 00:14:35.194
then body, what was the last one,
DEPRECATED, yeah.

197
00:14:37.723 --> 00:14:41.355
So yeah, that's how you would say that,
so it would just be one of these.

198
00:14:41.355 --> 00:14:44.080
&gt;&gt; This'll think optional's a method call?

199
00:14:44.080 --> 00:14:46.106
&gt;&gt; Is it?

200
00:14:46.106 --> 00:14:48.343
Yeah, I guess that makes sense,
is you could do chaining.

201
00:14:51.901 --> 00:14:58.043
&gt;&gt; One last note, version,
line 31, missing the S.

202
00:14:58.043 --> 00:15:00.402
&gt;&gt; For the oneOfs,
do we still have to refer to the status?

203
00:15:00.402 --> 00:15:05.095
&gt;&gt; Yeah, so I think the way
that it works is you can say,

204
00:15:05.095 --> 00:15:10.560
status first like this, and
then comma oneOf, there we go.

205
00:15:10.560 --> 00:15:14.373
As you can see, this can get pretty crazy.

206
00:15:14.373 --> 00:15:18.899
The more complicated these get,
the more you can just, they have like a,

207
00:15:18.899 --> 00:15:22.038
we can just write a schema,
and you can just check it

208
00:15:22.038 --> 00:15:26.420
against an entire schema if it starts
to get too complicated like this.

209
00:15:26.420 --> 00:15:30.579
So that's another way to do it as well,
thought about doing it that way, but for

210
00:15:30.579 --> 00:15:32.455
the most part, it's an overkill.

211
00:15:45.833 --> 00:15:47.170
Okay, and then for post, it's pretty
much the same thing, except for

212
00:15:47.170 --> 00:15:48.062
some of these things just aren't optional,
so

213
00:15:48.062 --> 00:15:48.910
I'm just gonna just copy this whole thing.

214
00:15:50.017 --> 00:15:57.168
And, Can you go to the next line?

215
00:15:57.168 --> 00:16:02.299
Yeah, it's almost the same thing,
except for, yeah, the title is definitely

216
00:16:02.299 --> 00:16:06.685
not optional, you have to give us a title,
which is gonna be exists.

217
00:16:06.685 --> 00:16:10.015
And you have to give us
a body which exists.

218
00:16:10.015 --> 00:16:15.832
You can say isString too if
you wanna go all in on it.

219
00:16:18.215 --> 00:16:20.526
There's really no limit to it.

220
00:16:20.526 --> 00:16:24.612
For the status,
you don't have to give us that,

221
00:16:24.612 --> 00:16:28.510
because we do a default one,
so that's fine.

222
00:16:28.510 --> 00:16:34.761
The version is also default, so
I think that's fine as well,

223
00:16:34.761 --> 00:16:39.549
and, What's that?

224
00:16:39.549 --> 00:16:41.388
Okay, I will look into that.

225
00:16:41.388 --> 00:16:43.228
Yeah, I think we're fine with
just these two here on that.

226
00:16:49.041 --> 00:16:51.116
And then for our updatepoint,
I figured those.

227
00:16:53.712 --> 00:16:56.565
We just need a name and a description,

228
00:17:02.149 --> 00:17:04.165
For the update, so let's do that.

229
00:17:04.165 --> 00:17:08.474
So for put on an update,

230
00:17:08.474 --> 00:17:13.217
we could just say, body,

231
00:17:14.288 --> 00:17:19.708
Name, we do our optional, isString if
you really wanna get all that in there,

232
00:17:23.299 --> 00:17:27.511
And then body., I'm sorry, description,

233
00:17:33.219 --> 00:17:40.471
Dot optional().isString.

234
00:17:40.471 --> 00:17:42.983
And let me break these
down on multiple lines

235
00:17:52.150 --> 00:17:57.174
Okay, and then lastly, for creating

236
00:17:57.174 --> 00:18:02.496
an updatepoint, We'll just do this.

237
00:18:04.414 --> 00:18:11.276
Pretty much mostly the same,
the only difference is,

238
00:18:11.276 --> 00:18:16.495
you would have to send up the update ID,
so

239
00:18:16.495 --> 00:18:22.480
body (updateId).exists().isString.

240
00:18:25.690 --> 00:18:27.865
And these are not optional anymore.

241
00:18:35.159 --> 00:18:35.925
There we go.

242
00:18:35.925 --> 00:18:39.697
I actually think there's
a better way to do oneOf, and

243
00:18:39.697 --> 00:18:43.047
I wanna look it up cuz it bother me
&gt;&gt; Chat,

244
00:18:43.047 --> 00:18:46.355
reporting a couple of errors with oneOf.

245
00:18:46.355 --> 00:18:46.856
&gt;&gt; Yeah.

246
00:18:46.856 --> 00:18:52.548
&gt;&gt; And if you check the documentation
on it, there's a check method.

247
00:18:52.548 --> 00:18:53.610
&gt;&gt; I guess you don't
even really need oneOf,

248
00:18:53.610 --> 00:18:54.621
that's what I was trying to figure out.

249
00:18:54.621 --> 00:18:58.857
I think you could just do,

250
00:18:58.857 --> 00:19:03.100
body(status).isIn.

251
00:19:05.230 --> 00:19:08.401
And then you can do that.

252
00:19:08.401 --> 00:19:11.088
So it's gotta be one of these,
I misspelt status.

253
00:19:16.395 --> 00:19:17.228
Like this.

254
00:19:21.036 --> 00:19:25.865
So you say IN_PROGRESS, SHIPPED,

255
00:19:27.711 --> 00:19:30.083
DEPRECATED.

256
00:19:30.083 --> 00:19:33.059
I guess it's how I've always done it.

257
00:19:33.059 --> 00:19:36.650
The oneOf thing, pretty cool,
but never really used that one.

