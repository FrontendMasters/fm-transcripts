WEBVTT

1
00:00:00.640 --> 00:00:05.720
So let's visualize this
distribution of the numbers.

2
00:00:05.720 --> 00:00:07.590
So a couple of things.

3
00:00:07.590 --> 00:00:09.935
First, we need to import matplotlib.

4
00:00:09.935 --> 00:00:16.110
So, import matplotlib as mpl.

5
00:00:16.110 --> 00:00:21.750
Or if you not specify as,
if I just do import matplotlib like this,

6
00:00:21.750 --> 00:00:26.083
it means that to run any
function from matplotlib,

7
00:00:26.083 --> 00:00:28.927
I need to type matplotlib first.

8
00:00:32.068 --> 00:00:34.600
And then the corresponding commands.

9
00:00:34.600 --> 00:00:39.112
I'm actually not gonna be
using matplotlib directly, but

10
00:00:39.112 --> 00:00:45.337
I will be using pyplot, submodule under
matplotlib, which gives, once again,

11
00:00:45.337 --> 00:00:50.730
kinda higher level API for
utilizing matplotlib functionality.

12
00:00:50.730 --> 00:00:54.617
So import pyplot as mpl.

13
00:00:54.617 --> 00:01:00.100
You commonly will see this alias used for
pyplot.

14
00:01:00.100 --> 00:01:04.399
And with this command,
what I can do, I can just use mpl.

15
00:01:04.399 --> 00:01:08.017
Let's use histogram, so

16
00:01:08.017 --> 00:01:12.300
histogram X, and mpl.show.

17
00:01:12.300 --> 00:01:14.590
I think the last command can be skipped.

18
00:01:16.260 --> 00:01:18.301
What's happening?

19
00:01:18.301 --> 00:01:21.948
I know, sorry, I need to convert my X,

20
00:01:21.948 --> 00:01:26.495
because right now,
X is in tensor form, right?

21
00:01:26.495 --> 00:01:31.883
So it's the representation
TensorFlow is using.

22
00:01:31.883 --> 00:01:38.050
I want to just simply
transfer it to regular array.

23
00:01:38.050 --> 00:01:42.506
And by just calling numpy methods on my X,
I will do exactly that.

24
00:01:46.298 --> 00:01:49.699
And what has happened?

25
00:01:49.699 --> 00:01:51.808
Object has no attribute numpy.

26
00:01:55.909 --> 00:01:56.499
Interesting.

27
00:01:56.499 --> 00:02:02.547
&gt;&gt; [INAUDIBLE]
&gt;&gt; Yes, thank you, sir.

28
00:02:02.547 --> 00:02:07.630
[LAUGH] That is exactly
what's happening here.

29
00:02:07.630 --> 00:02:13.260
So I was just bringing, because I
haven't finished my code writing yet.

30
00:02:13.260 --> 00:02:19.909
All right, so, numpy, yeah,
it's pretty noisy data.

31
00:02:19.909 --> 00:02:24.879
I think if I just create more, actually,

32
00:02:24.879 --> 00:02:28.560
we should put it like this.

33
00:02:28.560 --> 00:02:35.150
If we just, let's say,
generate 10,000 points, right?

34
00:02:35.150 --> 00:02:39.040
So every time I modify something,
I need to execute this cell.

35
00:02:39.040 --> 00:02:46.370
And yeah, you can see what uniform
distribution actually doing, right?

36
00:02:46.370 --> 00:02:51.082
It's basically giving you
random numbers between 0 and 1.

37
00:02:51.082 --> 00:02:56.780
And just because I've asked
to generate 10,000 of them.

38
00:02:56.780 --> 00:03:00.330
Now we can see that distribution is,
more or less, kinda equal.

39
00:03:00.330 --> 00:03:05.624
So that's what uniform
distribution actually doing.

40
00:03:05.624 --> 00:03:09.150
All right, so
let's return back to our 100 numbers.

41
00:03:09.150 --> 00:03:16.530
With 100 numbers is just we have,
so to speak, noisy data.

42
00:03:16.530 --> 00:03:21.177
What I'm trying to do

43
00:03:21.177 --> 00:03:26.087
next is add the noise.

44
00:03:26.087 --> 00:03:33.297
So with the noise,
let's say we can use tf.random as well.

45
00:03:33.297 --> 00:03:37.165
But let's use slightly
different distributions.

46
00:03:37.165 --> 00:03:41.523
So normal distribution will
give you instead of kind of

47
00:03:41.523 --> 00:03:46.630
uniform distribution,
it will just be a bell curve, right?

48
00:03:46.630 --> 00:03:54.013
And with normal distribution,
I need to specify, once again, shape.

49
00:03:54.013 --> 00:03:59.092
And it will be similar
to our X input data.

50
00:03:59.092 --> 00:04:06.079
So we're gonna just say n, comma,
and do we need anything else?

51
00:04:06.079 --> 00:04:08.240
We can specify standard deviation.

52
00:04:08.240 --> 00:04:12.467
By the way,
if you have any kinda questions,

53
00:04:12.467 --> 00:04:16.927
what additional parameters
can be specified?

54
00:04:16.927 --> 00:04:19.967
You can always go to empty space and
press Tab.

55
00:04:19.967 --> 00:04:25.220
It will show you the list of
additional parameters you can specify.

56
00:04:25.220 --> 00:04:30.029
So mean, by default, it is equal to 0,
so we could have skipped it.

57
00:04:30.029 --> 00:04:34.339
And standard deviation, sorry,

58
00:04:34.339 --> 00:04:40.882
it basically tells you the distribution,
how far.

59
00:04:40.882 --> 00:04:48.070
It's basically the width of
the half height of the bell curve.

60
00:04:48.070 --> 00:04:53.953
So for standard deviation,
let's specify something small,

61
00:04:53.953 --> 00:04:56.739
an example is like 0.01.

62
00:04:56.739 --> 00:05:01.800
All right, and now,
the most interesting part.

63
00:05:01.800 --> 00:05:06.465
So in my function, Y, I want just to

64
00:05:06.465 --> 00:05:11.597
take all of those input variables, and

65
00:05:11.597 --> 00:05:18.921
multiply them by corresponding weight,
and add bias.

66
00:05:18.921 --> 00:05:23.277
And the top of that,

67
00:05:23.277 --> 00:05:27.632
I want to add noise,

68
00:05:27.632 --> 00:05:31.482
and return X, Y.

69
00:05:31.482 --> 00:05:36.433
So let's just do that.

70
00:05:38.452 --> 00:05:39.854
Can be executed.

71
00:05:42.127 --> 00:05:43.671
We can print it out.

72
00:05:43.671 --> 00:05:48.036
But the thing is,
let's plot this function.

73
00:05:48.036 --> 00:05:51.230
Let's plot all those Xs and Ys.

74
00:05:51.230 --> 00:05:56.033
So we already have a plt,
pie plot available to us,

75
00:05:56.033 --> 00:05:58.843
so we can just say plt.plot.

76
00:06:04.255 --> 00:06:08.924
Mpl, sorry it's not plt, it's mpl.plot.

77
00:06:10.607 --> 00:06:15.040
And we can say plot my X's and Y's.

78
00:06:15.040 --> 00:06:18.352
But also, plot, thereâ€™s a neat trick.

79
00:06:18.352 --> 00:06:23.124
You can specify color by just using,
for instance, r for

80
00:06:23.124 --> 00:06:26.120
red, g for green, b for blue.

81
00:06:26.120 --> 00:06:28.940
And then also,
what kind of markers do you wanna use?

82
00:06:28.940 --> 00:06:34.510
For instance, I want just to plot circles,
we can specify capital O.

83
00:06:34.510 --> 00:06:40.542
And if I run this command, yes, and
I totally forgot that I wanted numpy.

84
00:06:43.633 --> 00:06:45.251
You know what?

85
00:06:45.251 --> 00:06:49.071
Actually, I will do it for,

86
00:06:51.541 --> 00:06:54.551
All X's and Y's by just returning.

87
00:06:57.603 --> 00:07:00.912
Yeah, Like this.

88
00:07:05.338 --> 00:07:08.580
We're running this function.

89
00:07:08.580 --> 00:07:11.698
So now, we have new function, right?

90
00:07:11.698 --> 00:07:19.476
We can now avoid typing numpy everywhere,
and it should work.

91
00:07:19.476 --> 00:07:20.255
No it's not.

92
00:07:20.255 --> 00:07:21.799
[LAUGH] Let's see.

93
00:07:21.799 --> 00:07:23.989
&gt;&gt; Lowercase o.

94
00:07:23.989 --> 00:07:28.430
&gt;&gt; Probably lowercase o, thank you.

95
00:07:28.430 --> 00:07:32.000
Yes, all right, so that's how our data is.

96
00:07:34.660 --> 00:07:39.087
Yes, okay, so lowercase o, that's the big
circle, and I think for small one,

97
00:07:39.087 --> 00:07:40.550
I can just use dots.

98
00:07:40.550 --> 00:07:42.950
Is this true?

99
00:07:42.950 --> 00:07:43.680
Yes, that is true.

100
00:07:44.710 --> 00:07:48.120
Okay, so that's our input data.

101
00:07:50.530 --> 00:07:55.420
What I'm trying to do is somehow, so

102
00:07:55.420 --> 00:08:00.265
let's say I don't know my w and
b at this point, right?

103
00:08:00.265 --> 00:08:04.555
It's only somehow used inside my function.

104
00:08:04.555 --> 00:08:09.759
But I want to learn those w's and b's to,

105
00:08:09.759 --> 00:08:15.215
well, fit this kind of
distribution of my data.

106
00:08:15.215 --> 00:08:21.290
So if we do something like this,
mpl.plot, and

107
00:08:21.290 --> 00:08:28.230
for instance,
let's say our X will be between 0 and 1.

108
00:08:28.230 --> 00:08:33.464
And for our Y, I will just say there's

109
00:08:33.464 --> 00:08:39.400
gonna be 2 points also, but I want my 0.

110
00:08:39.400 --> 00:08:44.110
I'm explicitly saying multiply by w+b.

111
00:08:45.420 --> 00:08:49.687
And then 1 multiplied by w+b, and

112
00:08:49.687 --> 00:08:55.124
let's say I want to have
a green dashed line.

113
00:08:55.124 --> 00:08:58.990
No, this should be good.

114
00:08:58.990 --> 00:09:03.903
And then I can just specify that w,

115
00:09:03.903 --> 00:09:09.333
I've used w=0,1 and b=0.5.

116
00:09:09.333 --> 00:09:13.790
So that's gonna be my ideal values.

117
00:09:13.790 --> 00:09:18.184
If I just plot this, Can't

118
00:09:18.184 --> 00:09:22.709
assign to, Literal, that is interesting.

119
00:09:29.693 --> 00:09:30.824
Mm-hm, okay.

