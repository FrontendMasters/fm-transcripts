WEBVTT

1
00:00:00.120 --> 00:00:02.531
We'll be talking about next
is the computer vision.

2
00:00:02.531 --> 00:00:04.501
So let's create new notebook.

3
00:00:04.501 --> 00:00:09.208
Because I want just to show
you a couple of datasets

4
00:00:09.208 --> 00:00:14.042
you can start using to play
around with the images.

5
00:00:14.042 --> 00:00:18.122
For instance, once again,
let's import TensorFlow.

6
00:00:21.740 --> 00:00:25.432
We also kinda import Keras directly.

7
00:00:25.432 --> 00:00:31.681
So let's say from tensorflow import keras.

8
00:00:34.914 --> 00:00:38.994
All right, just to make sure,
we can print out a TensorFlow version.

9
00:00:40.835 --> 00:00:44.167
I think Keras should also
have the same format,

10
00:00:44.167 --> 00:00:46.763
new version of the Keras, at least.

11
00:00:46.763 --> 00:00:52.262
So, keras__version__ should give you,

12
00:00:52.262 --> 00:00:55.250
yes, 2.2.4-tf.

13
00:00:55.250 --> 00:01:00.350
Meaning that Keras, this version
of Keras is using TensorFlow, or

14
00:01:00.350 --> 00:01:02.850
actually part of TensorFlow,
to be precise.

15
00:01:02.850 --> 00:01:10.227
And what is interesting in Keras, There
is additional functionality available.

16
00:01:10.227 --> 00:01:15.840
And the one I'm looking for
is keras.datasets.

17
00:01:15.840 --> 00:01:20.465
So keras.datasets, if you press Enter and

18
00:01:20.465 --> 00:01:25.090
just press top afterwards,
it will show you

19
00:01:25.090 --> 00:01:31.215
the available datasets already embedded or
available for

20
00:01:31.215 --> 00:01:36.720
you right now as part of
the Keras framework itself.

21
00:01:36.720 --> 00:01:41.400
So boston_housing, I believe it's data

22
00:01:41.400 --> 00:01:46.470
from 1970 about prices of houses in Boston

23
00:01:46.470 --> 00:01:51.805
depending on multiple
different input values.

24
00:01:51.805 --> 00:01:58.028
For instance, the data points use
the age of the person living there,

25
00:01:58.028 --> 00:02:05.160
how many rooms, how much floor,
how far away it is from the downtown.

26
00:02:05.160 --> 00:02:10.030
Criminal activities in the region,
kinda a lot

27
00:02:10.030 --> 00:02:14.760
of different information which affects
the prices, so you can play with it.

28
00:02:14.760 --> 00:02:18.530
For instance, if you want to try
different regression algorithms.

29
00:02:18.530 --> 00:02:25.288
cifar10 and cifar100, it's images,
but pretty small images.

30
00:02:25.288 --> 00:02:27.849
I don't remember the exact resolution.

31
00:02:27.849 --> 00:02:31.639
I think it's 20, maybe similar to mnist.

32
00:02:31.639 --> 00:02:35.280
That's the one I want to use.

33
00:02:35.280 --> 00:02:39.280
It's 28 by 28 small images

34
00:02:39.280 --> 00:02:42.490
with 10 different classes or
100 different classes.

35
00:02:42.490 --> 00:02:46.680
fashion_mnist or mnist,
that's the one I want to use.

36
00:02:46.680 --> 00:02:49.348
mnist is your handwritten digits, and

37
00:02:49.348 --> 00:02:54.460
fashion_mnist is just ten different
types of clothing and shoes.

38
00:02:54.460 --> 00:02:59.800
So to basically visualize
what we have here,

39
00:02:59.800 --> 00:03:04.680
we can simply say load_data, right?

40
00:03:04.680 --> 00:03:07.992
And if you kinda curious what
this function will return,

41
00:03:07.992 --> 00:03:11.376
that's the only function
available in the mnist module.

42
00:03:11.376 --> 00:03:18.860
You can just run this command and it will
tell you that it will load the mnist data.

43
00:03:18.860 --> 00:03:25.627
So it will return back x_train,
y_train and x_test, y_test.

44
00:03:25.627 --> 00:03:29.549
Okay, so let's just copy those and

45
00:03:29.549 --> 00:03:34.524
say these values should be created, right?

46
00:03:34.524 --> 00:03:40.103
And after we call this function,
ta-dah, okay.

47
00:03:40.103 --> 00:03:46.812
So now in my x_train,
I will have something, as well as y_train.

48
00:03:46.812 --> 00:03:52.660
So let's go back and actually
discuss what exactly we have here.

49
00:03:52.660 --> 00:03:59.850
Remember that the whole machine learning
process can be split into two parts.

50
00:03:59.850 --> 00:04:03.060
First, we're doing the training
of the model itself, right?

51
00:04:03.060 --> 00:04:08.160
And for training parts, we can use
x_training, that's the input data,

52
00:04:08.160 --> 00:04:12.970
and y_training,
that's the labels we should get.

53
00:04:12.970 --> 00:04:15.420
So remember we need to provide input and
output for

54
00:04:15.420 --> 00:04:18.486
model to modify their weights, right?

55
00:04:18.486 --> 00:04:23.899
And x_test and y_test,
it's another set of similar inputs and

56
00:04:23.899 --> 00:04:28.490
outputs, but
the one our model haven't seen yet.

57
00:04:28.490 --> 00:04:31.663
And those can be used to
just test your model,

58
00:04:31.663 --> 00:04:36.353
to see what's the accuracy of
the predictions you're gonna get.

59
00:04:36.353 --> 00:04:37.922
So let's actually visualize it.

60
00:04:37.922 --> 00:04:40.270
So what's what is train?

61
00:04:40.270 --> 00:04:43.671
If I just simply print out x_train,

62
00:04:43.671 --> 00:04:49.290
you will see that it looks like arrays,
tons of arrays.

63
00:04:49.290 --> 00:04:54.428
So what if I just grab train 0,
kinda the first array?

64
00:04:54.428 --> 00:04:59.919
Okay, a lot of zeros, and
some other numbers, all right.

65
00:05:02.768 --> 00:05:08.380
That's pretty awesome, although it
doesn't really clear how it looked like.

66
00:05:08.380 --> 00:05:14.663
I think if I zoom out just for
a second, it will be slightly better.

67
00:05:14.663 --> 00:05:17.789
No, we still cannot see it easily.

68
00:05:17.789 --> 00:05:19.749
I know one trick.

69
00:05:19.749 --> 00:05:24.679
What I can do, I can,

70
00:05:24.679 --> 00:05:30.120
yes, import numpy as np.

71
00:05:30.120 --> 00:05:35.378
And in numpy,
there is very good command called

72
00:05:35.378 --> 00:05:40.390
set_printoptions, yes, printoptions.

73
00:05:40.390 --> 00:05:44.195
And to this command,
you can provide the linewidth.

74
00:05:44.195 --> 00:05:47.560
So let's return quickly back to the zoom.

75
00:05:47.560 --> 00:05:52.682
So what we did, we just import numpy
as np and setting up the printoptions.

76
00:05:52.682 --> 00:05:55.762
Because I want full line to be printed, so

77
00:05:55.762 --> 00:06:00.438
I can put it to something really large,
right, I don't care.

78
00:06:00.438 --> 00:06:04.007
All right, so now if I zoom out,

79
00:06:07.641 --> 00:06:15.210
You can actually see that it
looks like number 5, right?

80
00:06:15.210 --> 00:06:18.444
So it's just the values of the intensity.

81
00:06:18.444 --> 00:06:22.668
So 0 is our background, and

82
00:06:22.668 --> 00:06:26.892
those numbers between 0 and

83
00:06:26.892 --> 00:06:32.380
255 is just the intensity of ink.

84
00:06:32.380 --> 00:06:35.800
So instead of just printing
out those numbers,

85
00:06:35.800 --> 00:06:38.410
I can even visualize them,
it's gonna be easier.

86
00:06:39.720 --> 00:06:42.677
All right, back to 200%.

87
00:06:42.677 --> 00:06:49.538
What I can do,
I can use matplotlib inline,

88
00:06:49.538 --> 00:06:55.300
import matplotlib.pyplot as plt.

89
00:06:55.300 --> 00:06:59.934
I'm just using this library for
visualization.

90
00:06:59.934 --> 00:07:04.285
And I can, for instance, plt.imshow.

91
00:07:04.285 --> 00:07:09.035
imshow function is just showing images.

92
00:07:09.035 --> 00:07:14.178
And I can say I want to
visualize x_train[0].

93
00:07:14.178 --> 00:07:17.530
Let's see if it works.

94
00:07:17.530 --> 00:07:22.529
Yeah, it does, so basically in x_train[0],

95
00:07:22.529 --> 00:07:25.913
so x_train is the list of images.

96
00:07:25.913 --> 00:07:29.902
And for instance, in second image,

97
00:07:29.902 --> 00:07:34.340
if we execute it, is our 0, right?

98
00:07:34.340 --> 00:07:38.052
And at the same time, if we print our ys,

99
00:07:38.052 --> 00:07:42.653
so y_train, for instance,
that was number 5.

100
00:07:42.653 --> 00:07:46.973
So it actually shows us
what the number we should

101
00:07:46.973 --> 00:07:51.320
recognize by looking at this image, right?

102
00:07:51.320 --> 00:07:56.764
And in index number 1,
we should see 0, which is true.

103
00:07:56.764 --> 00:08:02.460
So thatâ€™s gonna be the data we will
be using to train our model, right?

104
00:08:02.460 --> 00:08:05.519
But the thing is when we print it out,

105
00:08:05.519 --> 00:08:10.567
the numbers were between 0 and
255, right, integers.

106
00:08:13.475 --> 00:08:17.732
Our machine learning models,
they usually work not with integers, but

107
00:08:17.732 --> 00:08:20.050
with floating point numbers, right?

108
00:08:20.050 --> 00:08:22.310
So what we will need to do, we need to,

109
00:08:22.310 --> 00:08:25.720
first of all, convert all of
those inputs to floating points.

110
00:08:26.740 --> 00:08:29.520
And probably, we want to rescale it.

111
00:08:29.520 --> 00:08:34.708
It is recommended in
a stabilization of your model for

112
00:08:34.708 --> 00:08:38.167
data and signal to be normalized and

113
00:08:38.167 --> 00:08:42.910
ideally kinda shrink to,
well, as close to 0.

114
00:08:42.910 --> 00:08:47.151
So what we can do here,
we can simply convert.

115
00:08:47.151 --> 00:08:51.675
So just all our x_trains,

116
00:08:51.675 --> 00:08:56.395
we can say we want all those to

117
00:08:56.395 --> 00:09:00.928
be divided by 255.0.

118
00:09:00.928 --> 00:09:05.177
So what this operation will do,
it will take all

119
00:09:05.177 --> 00:09:10.187
individual pixels as numbers,
divide them by 255.

120
00:09:10.187 --> 00:09:16.598
Which will automatically cast them
into floating point numbers and

121
00:09:16.598 --> 00:09:20.655
write them back to the original location.

122
00:09:21.865 --> 00:09:28.312
So for instance, if I just do that and
do the same thing with, not ys, x_test.

123
00:09:33.737 --> 00:09:34.949
And execute this.

124
00:09:34.949 --> 00:09:40.926
Now, for instance,
if I just print x_train[0],

125
00:09:44.347 --> 00:09:49.835
We'll see that all my numbers,
which were distributed between 0 and

126
00:09:49.835 --> 00:09:54.313
255, now shrink down to
the values between 0 and 1.

127
00:09:54.313 --> 00:09:56.800
That's what I want, all right.

