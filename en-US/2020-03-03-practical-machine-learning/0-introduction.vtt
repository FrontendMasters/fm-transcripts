WEBVTT

1
00:00:00.070 --> 00:00:01.380
Let me introduce myself.

2
00:00:01.380 --> 00:00:03.280
My name is Vadim Karpusenko.

3
00:00:03.280 --> 00:00:04.970
I work at Microsoft.

4
00:00:04.970 --> 00:00:09.810
Yeah, I know [LAUGH] as Cloud Developer
Advocate, and I'm specializing in

5
00:00:09.810 --> 00:00:13.300
Azure Machine Learning, Deep Learning,
Artificial Intelligence, and

6
00:00:13.300 --> 00:00:15.900
High Performance Computing as
well as Quantum Computing.

7
00:00:15.900 --> 00:00:21.720
So all of that is kinda part of my job or
responsibilities.

8
00:00:21.720 --> 00:00:28.591
Before working at Microsoft as
Developer Relations, Advocate,

9
00:00:28.591 --> 00:00:33.679
I was a technical evangelist at Intel and
basically was teaching high performance

10
00:00:33.679 --> 00:00:38.585
computing, parallel programming,
code optimization, all of that.

11
00:00:38.585 --> 00:00:42.223
And my background, it's actually physics.

12
00:00:42.223 --> 00:00:45.305
[LAUGH] So that's why the quantum
computing is coming from.

13
00:00:45.305 --> 00:00:50.345
I was doing molecular dynamic simulations,
optimized it for

14
00:00:50.345 --> 00:00:56.120
large clusters and just basically was
playing around with huge molecules.

15
00:00:56.120 --> 00:01:01.725
But realize that our code is not
super optimized for parallelism and

16
00:01:01.725 --> 00:01:07.950
kinda switch to figuring out how
to optimize it more, well, better.

17
00:01:07.950 --> 00:01:12.340
And that basically lead the transition,
my transition from

18
00:01:12.340 --> 00:01:15.280
physics to high performance computing and
now machine learning.

19
00:01:15.280 --> 00:01:20.170
And the thing is it's interesting
that in physics, a lot of

20
00:01:20.170 --> 00:01:24.450
problems now we're trying to approach it
from a machine learning perspective and

21
00:01:24.450 --> 00:01:29.040
gonna figure out the way how we can apply
machine learning to physics problems.

22
00:01:29.040 --> 00:01:34.710
So even just, what,
about a month ago, I was in Italy.

23
00:01:34.710 --> 00:01:38.310
We had an open hack with CERN researchers.

24
00:01:38.310 --> 00:01:42.970
Basically figuring out the way how you can
predict the decay of particular particles,

25
00:01:42.970 --> 00:01:45.355
right, and
recognize one event from another and

26
00:01:45.355 --> 00:01:48.990
kinda come up with a classifier,
which can do it for you automatically.

27
00:01:48.990 --> 00:01:52.320
Because right now, in physics,
it's actually problem and

28
00:01:52.320 --> 00:01:54.600
takes a lot of compute resources, right?

29
00:01:54.600 --> 00:01:59.170
But with machine learning, you can
switch to something maybe which have

30
00:01:59.170 --> 00:02:03.420
bigger footprint, memory footprint, but
at the same time using less compute.

31
00:02:03.420 --> 00:02:08.662
Wow, fun stuff, fun stuff, so anyway,
at the same time, although I'm

32
00:02:08.662 --> 00:02:14.360
having kinda this solid mathematics
background, this course,

33
00:02:14.360 --> 00:02:20.770
I will try to base myself down and
not to go too deep into maths.

34
00:02:20.770 --> 00:02:26.670
And at least, that's my promise but
I might get deviate a little bit deeper so

35
00:02:26.670 --> 00:02:31.200
please stop me and basically say yeah,
you're going too deep.

36
00:02:31.200 --> 00:02:37.260
I will try to basically
give the principle,

37
00:02:37.260 --> 00:02:44.770
explain the concepts without
deviating too deep into mathematics.

38
00:02:44.770 --> 00:02:49.430
And I think it's still gonna be pretty
useful because we'll show a lot of demos,

39
00:02:49.430 --> 00:02:50.380
practical demos.

40
00:02:50.380 --> 00:02:56.408
So by the way,
if you go to the top Vadikus/practicalDL,

41
00:02:56.408 --> 00:03:03.690
that's the URL for the course, right here,
github.com/Vadikus/practicalDL.

42
00:03:03.690 --> 00:03:10.580
So the plan is to use Jupyter Notebooks,
so Python is prerequisite for this course.

43
00:03:10.580 --> 00:03:16.966
I will be using Python mostly but if you
are more familiar with the JavaScript,

44
00:03:16.966 --> 00:03:22.212
you can still use JavaScript
with Keras and TensorFlow 2.0.

45
00:03:22.212 --> 00:03:27.480
But you will have to go,
it's on github, let me just find it.

46
00:03:29.170 --> 00:03:33.478
github, TensorFlow js examples, so

47
00:03:33.478 --> 00:03:41.063
on their TensorFlow,
There is a tfjs-example and

48
00:03:41.063 --> 00:03:47.407
there are tons of examples which well,
gonna be used in class as well but

49
00:03:47.407 --> 00:03:52.397
I will show how to do everything
in Python for instance.

50
00:03:52.397 --> 00:03:57.490
mnist datasets,
that's the handwritten digits.

51
00:03:57.490 --> 00:04:03.670
And we should come up with a model
which can recognize those digits.

52
00:04:03.670 --> 00:04:07.240
But well, I will be talking
about this during the class.

53
00:04:07.240 --> 00:04:11.280
So all of those examples, if you,
as I said more familiar with JavaScript,

54
00:04:11.280 --> 00:04:14.190
you can just grab files from here and

55
00:04:14.190 --> 00:04:17.650
still play with the models we will
be discussing during the class.

56
00:04:17.650 --> 00:04:23.467
A little bit about my setup,
so I like to draw [LAUGH] and

57
00:04:23.467 --> 00:04:27.355
as you will see, I will be using my,

58
00:04:29.819 --> 00:04:33.677
Surface, one second,
let me just log in quickly.

59
00:04:33.677 --> 00:04:38.840
All right, right here so if I

60
00:04:38.840 --> 00:04:45.010
just write something like this,
you should see it on your screen as well.

61
00:04:45.010 --> 00:04:50.750
I basically, yeah,
will allow me to draw any diagrams and

62
00:04:50.750 --> 00:04:53.440
explain what I'm talking about,
all of that.

63
00:04:53.440 --> 00:04:56.900
So that's gonna be one part of our setup.

64
00:04:58.130 --> 00:05:05.740
Also for the code itself,
I will be using Jupyter notebooks.

65
00:05:05.740 --> 00:05:08.740
So if you just cloned the repository,

66
00:05:08.740 --> 00:05:14.250
you will see all of those ipynb files.

67
00:05:14.250 --> 00:05:17.294
That's your interactive
Python notebook files.

68
00:05:17.294 --> 00:05:22.780
And to start Jupyter notebook, first of
all, of course, you need to install it.

69
00:05:22.780 --> 00:05:28.115
To install a Jupyter notebook, if you just
look at the README file on the GitHub if

70
00:05:28.115 --> 00:05:33.267
you click on installation instructions, it
should redirect you to jupyter home page.

71
00:05:33.267 --> 00:05:35.972
And if you just follow those instructions,

72
00:05:35.972 --> 00:05:39.900
you can install it directly with pip,
pip install.

73
00:05:39.900 --> 00:05:44.674
Jupyter does the commands or
pip3 if you're using Python 3.

74
00:05:44.674 --> 00:05:48.860
Well, usually pip should
be resulting into pip3.

75
00:05:48.860 --> 00:05:53.380
But if you're not familiar with
the package management in Python,

76
00:05:54.510 --> 00:05:58.400
I heavily recommend to install Anaconda.

77
00:05:58.400 --> 00:06:01.020
So conda will basically
preserve the state and

78
00:06:01.020 --> 00:06:05.230
will not mess with other Python
libraries in your system.

79
00:06:05.230 --> 00:06:09.500
And no matter if you own Linux on Mac or
Windows,

80
00:06:09.500 --> 00:06:13.890
it will try to create this isolated
environment for all the Python packages.

81
00:06:13.890 --> 00:06:17.240
And then inside this environment,
you can install Jupyter.

82
00:06:17.240 --> 00:06:19.196
I already have everything installed.

83
00:06:19.196 --> 00:06:23.992
So right now if I just type
jupyter notebook and dot,

84
00:06:23.992 --> 00:06:27.698
it will start jupyter server in my folder

85
00:06:27.698 --> 00:06:32.500
where I have basically
a GitHub repository cloned.

