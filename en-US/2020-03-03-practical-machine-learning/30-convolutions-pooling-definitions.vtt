WEBVTT

1
00:00:00.000 --> 00:00:05.572
In this notebook, MNIST and
ConvNet, ConvNet stands for

2
00:00:05.572 --> 00:00:12.182
Convolution Neural Network, and
that's different type of layer.

3
00:00:12.182 --> 00:00:19.132
So for instance in this example I'm using
instead of just adding to the model,

4
00:00:19.132 --> 00:00:25.345
another way to initialize your model
is to provide the list of layers,

5
00:00:25.345 --> 00:00:29.690
when you simply creating your model,
right|?

6
00:00:29.690 --> 00:00:33.546
So on the sequential you
will initialize it with and

7
00:00:33.546 --> 00:00:38.306
also I'm specifying explicitly
tf.keras.layers.Conv.

8
00:00:38.306 --> 00:00:41.788
Conv2D actually pretty tricky one,

9
00:00:41.788 --> 00:00:46.138
what it's doing the way
how you initialize it,

10
00:00:46.138 --> 00:00:52.338
you need to specify how many filters
convolutions you want to have,

11
00:00:52.338 --> 00:00:57.913
and the size of the filter and
what should be the input shape.

12
00:00:57.913 --> 00:01:03.448
In our case, we don't need to flatten
our images we'll be using 28 by 28.

13
00:01:03.448 --> 00:01:04.482
But on top of that,

14
00:01:04.482 --> 00:01:08.113
we will be providing several images
simultaneously as the input.

15
00:01:08.113 --> 00:01:11.485
So it's called mini batching.

16
00:01:11.485 --> 00:01:16.256
And probably before I go really,
really deep I need to

17
00:01:16.256 --> 00:01:21.250
explain what convolution is,
and what max pooling is.

18
00:01:21.250 --> 00:01:27.008
All right, so let's switch to drawing
board again and talk about two things.

19
00:01:27.008 --> 00:01:34.249
Convolutions and
Max Pooling or just Pooling.

20
00:01:34.249 --> 00:01:42.165
So those two layers or operations
are used in image processing a lot.

21
00:01:42.165 --> 00:01:47.413
And Alex net, the topology the model,
which was image

22
00:01:47.413 --> 00:01:52.904
net competition in 2012
introduced those big time.

23
00:01:52.904 --> 00:01:59.563
So pretty much all of the layers they
had was those convolutions and poolings.

24
00:01:59.563 --> 00:02:01.572
So what is convolution?

25
00:02:01.572 --> 00:02:04.553
Let's say we have image,

26
00:02:04.553 --> 00:02:09.708
our handwritten digits 28 by 28 pixels.

27
00:02:09.708 --> 00:02:16.748
And in convolution you can specify
a filter, for instance, 3 by 3, right?

28
00:02:16.748 --> 00:02:22.243
That's the one I will be using in
my notebook, here we go, right?

29
00:02:22.243 --> 00:02:24.595
So when I'm saying 3 by 3,

30
00:02:24.595 --> 00:02:30.384
it's basically telling me what size
of the filters I should be using.

31
00:02:30.384 --> 00:02:34.777
But I need to explain the operation
itself, what convolution is doing.

32
00:02:34.777 --> 00:02:39.912
So it just taking first 3 by 3
pixels from your image, right?

33
00:02:39.912 --> 00:02:46.843
And the result of the operation of
applying convolution in homedics.

34
00:02:46.843 --> 00:02:52.370
Convolution is just taking
the intensity of the first pixel and

35
00:02:52.370 --> 00:02:56.236
multiplied by the intensity of our filter.

36
00:02:56.236 --> 00:03:00.963
Then taking the second multiplying
by the second pixel and

37
00:03:00.963 --> 00:03:06.763
adding the results to the multiplications
we got from the first pixel.

38
00:03:06.763 --> 00:03:11.247
So basically if you think about it for
every pixel in the image,

39
00:03:11.247 --> 00:03:15.310
we're taking the corresponding
pixel from our filter,

40
00:03:15.310 --> 00:03:19.891
multiplying them to each other and
adding the result together.

41
00:03:19.891 --> 00:03:24.288
So what that means if you have for
instance and

42
00:03:24.288 --> 00:03:27.991
this image I'm just putting it here,

43
00:03:27.991 --> 00:03:32.517
if you have large number here, kinda 255,

44
00:03:34.270 --> 00:03:39.914
And you have pretty large
number in your filter.

45
00:03:39.914 --> 00:03:44.759
This particular pixel will be
significantly amplified, right?

46
00:03:44.759 --> 00:03:49.999
And if your filter is equal to 0,
It will kill it down.

47
00:03:49.999 --> 00:03:53.393
So it's still the same kinda weights,
right?

48
00:03:53.393 --> 00:03:58.443
But what is interesting here
when you add this summation,

49
00:03:58.443 --> 00:04:05.571
if for instance, you have pretty high
intensity pixels here and let's say here.

50
00:04:05.571 --> 00:04:11.614
And you have exactly the same high
intensity in the same cells of your

51
00:04:11.614 --> 00:04:17.140
filter, the operation of
convolution will be pretty large.

52
00:04:19.501 --> 00:04:24.193
So it means that your filters can look for

53
00:04:24.193 --> 00:04:30.131
some very specific feature
on the original image.

54
00:04:30.131 --> 00:04:36.018
So when you did this operation, you
are simply switching to the next pair or

55
00:04:36.018 --> 00:04:43.034
next 3 by 3 pixels, and you just propagate
this window, all lower the original image.

56
00:04:43.034 --> 00:04:50.290
And at the ends, for instance, if you had,
let's say handwritten digit 4, right?

57
00:04:50.290 --> 00:04:56.330
And your pixel,
your filter looked like this.

58
00:04:58.322 --> 00:05:03.821
So it was only pretty much looking for
parts of the images where

59
00:05:03.821 --> 00:05:09.970
we had vertical lines activated or
if we for instance puts like this.

60
00:05:09.970 --> 00:05:15.083
So operation of the convolution
will have pretty high intensity

61
00:05:15.083 --> 00:05:20.393
in those regions, where we had,
actually let me write like this.

62
00:05:20.393 --> 00:05:22.887
It will have pretty high intensity here.

63
00:05:22.887 --> 00:05:26.791
Pretty much everywhere where
we had vertical lines.

64
00:05:26.791 --> 00:05:32.589
And will be not that large
in our horizontal lines.

65
00:05:32.589 --> 00:05:36.251
It will simply remember that
all this multiplications and

66
00:05:36.251 --> 00:05:38.792
additions will give you less numbers for

67
00:05:38.792 --> 00:05:43.362
horizontal lines just because your
filter is not aligned with this one.

68
00:05:43.362 --> 00:05:48.257
So convolution operation,
simply doing a couple of things.

69
00:05:48.257 --> 00:05:51.635
So you can think about fully
connected neural network.

70
00:05:51.635 --> 00:05:56.378
All the pixels from the original
image were connected with

71
00:05:56.378 --> 00:05:59.292
all the neurons in your next layer.

72
00:05:59.292 --> 00:06:03.021
With a convolution,
you only connecting first three,

73
00:06:03.021 --> 00:06:05.491
well actually nine pixels, right?

74
00:06:05.491 --> 00:06:09.620
To your convolution neural neurons.

75
00:06:12.578 --> 00:06:16.669
So it means that instead of having
fully connected neural network,

76
00:06:16.669 --> 00:06:20.054
you will now have partially
connected neural network.

77
00:06:20.054 --> 00:06:24.126
But also this convolution operation,
it's got the physical meaning.

78
00:06:24.126 --> 00:06:29.296
We're looking for
some features on the original image.

79
00:06:29.296 --> 00:06:34.630
And second operation pooling,
is also pretty interesting.

80
00:06:34.630 --> 00:06:38.934
Max pooling is the operation
where we're just taking

81
00:06:38.934 --> 00:06:42.185
let's say 2 by 2 vision of the image and

82
00:06:42.185 --> 00:06:47.743
we have different intensities here,
I don't know, some numbers.

83
00:06:47.743 --> 00:06:51.341
We will just simply
grab the largest value.

84
00:06:52.933 --> 00:06:55.997
And that's gonna be
the output of our operation.

85
00:06:55.997 --> 00:07:00.153
So we will get rid of all other pixels,
all other three pixels.

86
00:07:00.153 --> 00:07:05.314
So if you had, let's say,
the original 28 by 28 pixels,

87
00:07:05.314 --> 00:07:09.286
by applying a pooling
operation you will reduce

88
00:07:09.286 --> 00:07:14.765
the dimensionality of your image
from 28 to only 14, right?

89
00:07:14.765 --> 00:07:18.851
Because you're getting rid of
all of those additional pixels.

90
00:07:18.851 --> 00:07:25.778
So but the most intensive
ones will still propagate.

91
00:07:25.778 --> 00:07:31.220
So in image processing, it makes
a lot of sense and it is very useful.

