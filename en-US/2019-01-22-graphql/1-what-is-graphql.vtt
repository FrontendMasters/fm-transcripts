WEBVTT

1
00:00:00.040 --> 00:00:01.900
&gt;&gt; Scott Moss: So what is GraphQL?

2
00:00:01.900 --> 00:00:03.241
Raise your hand if you
used GraphQL before.

3
00:00:05.828 --> 00:00:09.798
&gt;&gt; Scott Moss: One person, okay, when you
say you used it, Mark, did you use it as

4
00:00:09.798 --> 00:00:14.580
a consumer querying a GraphQL API or
did you use it building a GraphQL API?

5
00:00:14.580 --> 00:00:15.590
&gt;&gt; Speaker 2: Building GraphQL API.

6
00:00:15.590 --> 00:00:17.270
&gt;&gt; Scott Moss: Okay, so
you have some experience.

7
00:00:17.270 --> 00:00:21.953
Anybody else have experience
querying a GraphQL API server?

8
00:00:21.953 --> 00:00:22.511
It's gonna be fun, okay.

9
00:00:22.511 --> 00:00:24.572
A lot of learns today, a lot of learns.

10
00:00:24.572 --> 00:00:27.796
All right, so GraphQL is basically,

11
00:00:27.796 --> 00:00:33.350
it's a strongly typed query language and
runtime for your data.

12
00:00:34.600 --> 00:00:39.490
It's kind of this new, not only is it like
a new technology, it's sitting in a new

13
00:00:39.490 --> 00:00:46.270
place where it's like, you think of
like REST as like a way to build an API.

14
00:00:46.270 --> 00:00:52.720
In fact, it is your API, GraphQL sits
in front of your API and your request.

15
00:00:52.720 --> 00:00:55.489
So you can still have an API
underneath GraphQL as well, so

16
00:00:55.489 --> 00:00:59.406
it's like a different place in the stack
of how you retrieve data from the server.

17
00:00:59.406 --> 00:01:01.790
And as we go along the course,
you'll see what I'm talking about.

18
00:01:04.045 --> 00:01:06.980
&gt;&gt; Scott Moss: So it's open source and
it's created by Facebook.

19
00:01:06.980 --> 00:01:11.967
And when I say it, GraphQL itself,

20
00:01:11.967 --> 00:01:14.635
it's just a spec.

21
00:01:14.635 --> 00:01:16.100
GraphQL is actually just a spec.

22
00:01:16.100 --> 00:01:17.790
When I say it, I'm talking about the spec.

23
00:01:17.790 --> 00:01:21.698
So Facebook created the spec for GraphQL
and what it can, and what it should, and

24
00:01:21.698 --> 00:01:22.628
what it won't do.

25
00:01:22.628 --> 00:01:25.760
And then there's different
implementations and different languages.

26
00:01:25.760 --> 00:01:29.200
Facebook created GraphQL JS which
is a JavaScript implementation of

27
00:01:29.200 --> 00:01:30.550
the GraphQL spec.

28
00:01:30.550 --> 00:01:36.500
But there's other implementations out
there in Ruby and Java and Go and Scala.

29
00:01:36.500 --> 00:01:37.069
And just so

30
00:01:37.069 --> 00:01:41.757
many implementations of GraphQL, they all
implement the spec that Facebook created.

31
00:01:41.757 --> 00:01:46.520
And that spec is constantly growing, and
those tools are constantly being updated.

32
00:01:46.520 --> 00:01:49.490
So, yeah, Facebook created that spec.

33
00:01:49.490 --> 00:01:50.420
They used it internally for

34
00:01:50.420 --> 00:01:55.415
a couple years, and
then they decided to open source it.

35
00:01:55.415 --> 00:01:56.026
&gt;&gt; Scott Moss: Basically,

36
00:01:56.026 --> 00:02:00.420
GraphQL gives clients the power to
describe exactly the data that they want.

37
00:02:00.420 --> 00:02:05.140
So basically, if I'm an application or

38
00:02:05.140 --> 00:02:09.830
if I'm a developer and
I want to grab a user, but

39
00:02:09.830 --> 00:02:14.430
I only wanna get the first name and the
last name, how would I do that with REST?

40
00:02:14.430 --> 00:02:16.770
If I'm saying give me the user, but
only the first name and last name, well,

41
00:02:16.770 --> 00:02:19.050
with REST, technically, you can't do that.

42
00:02:19.050 --> 00:02:23.456
So what you would have to do in your
API is you would have to accept query

43
00:02:23.456 --> 00:02:24.840
parameters.

44
00:02:24.840 --> 00:02:27.820
So somebody could attach on a query
string at the end of it and

45
00:02:27.820 --> 00:02:30.340
say first name true or
last name true or whatever.

46
00:02:30.340 --> 00:02:33.100
And then you would have to do that, but
then you open yourself up to all different

47
00:02:33.100 --> 00:02:35.130
types of vulnerabilities and
stuff like that.

48
00:02:35.130 --> 00:02:39.260
So you have to go beyond REST to do that,
and you have to manly do that for every

49
00:02:39.260 --> 00:02:45.510
single field in your database, whereas
GraphQL automatically does that for you.

50
00:02:45.510 --> 00:02:48.940
And the client only gets back what
they want, nothing more, nothing less.

51
00:02:51.204 --> 00:02:53.758
&gt;&gt; Scott Moss: It's strongly typed,
so the way I like to think of it,

52
00:02:53.758 --> 00:02:55.970
is it's like typescript for your API.

53
00:02:55.970 --> 00:02:59.940
So imagine if you can write TypeScript
types and interfaces and stuff like that,

54
00:02:59.940 --> 00:03:01.160
for your API.

55
00:03:01.160 --> 00:03:02.973
That's what GraphQL is like.

56
00:03:02.973 --> 00:03:04.260
It's the same thing.

57
00:03:04.260 --> 00:03:06.490
If any of those type validations fail,

58
00:03:06.490 --> 00:03:09.360
your API request fails,
so it's pretty cool.

59
00:03:12.095 --> 00:03:15.150
&gt;&gt; Scott Moss: It enables excellent
developer tooling and experiences.

60
00:03:15.150 --> 00:03:16.550
Because it is strongly typed,

61
00:03:16.550 --> 00:03:19.240
like TypeScript,
you get some really good dev tools.

62
00:03:19.240 --> 00:03:20.859
Some autocomplete features,

63
00:03:20.859 --> 00:03:23.918
a whole bunch of smart tooling
where you can mock data out.

64
00:03:23.918 --> 00:03:24.828
As you will see,

65
00:03:24.828 --> 00:03:28.740
we'll use this tool that allows us
to interact with our graphical API.

66
00:03:28.740 --> 00:03:32.722
And we can get automatic documentation for
it, all types of certain things,

67
00:03:32.722 --> 00:03:34.814
because everything is strongly typed.

68
00:03:34.814 --> 00:03:37.755
It's a finite API that you're creating so

69
00:03:37.755 --> 00:03:41.780
that you can kind of
understand what's happening.

70
00:03:41.780 --> 00:03:44.320
So yeah, the tooling for
GraphQL is legit, and it keeps growing.

71
00:03:44.320 --> 00:03:47.637
There's literally a new
GraphQL thing everyday.

72
00:03:47.637 --> 00:03:51.560
I mean, there's literally companies
built around just GraphQL.

73
00:03:51.560 --> 00:03:55.104
So yeah, tooling is great, and
it's always getting better.

74
00:03:57.719 --> 00:03:58.538
&gt;&gt; Scott Moss: And like I said,

75
00:03:58.538 --> 00:04:02.370
it can sit in front of any existing API
because it's just a query language.

76
00:04:02.370 --> 00:04:04.650
It's not actually the API itself.

77
00:04:04.650 --> 00:04:07.110
It's just how you query an API.

78
00:04:07.110 --> 00:04:10.240
So there's nothing stopping you from
putting GraphQL in front of a REST API,

79
00:04:10.240 --> 00:04:15.830
in front of another GraphQL API,
in front of anything that you want.

80
00:04:15.830 --> 00:04:16.860
It just sits in front of it.

81
00:04:16.860 --> 00:04:20.382
It's just a query language to describe
how you interact with that API.

82
00:04:20.382 --> 00:04:22.783
And if that doesn't make sense,
as we start building it,

83
00:04:22.783 --> 00:04:24.360
you'll see what I'm talking about.

84
00:04:25.800 --> 00:04:26.660
Any questions so far?

85
00:04:28.450 --> 00:04:30.830
&gt;&gt; Speaker 2: Just it can go both ways?

86
00:04:30.830 --> 00:04:34.690
So you can query and
you can save data, the same?

87
00:04:34.690 --> 00:04:36.450
&gt;&gt; Scott Moss: Yes, so
you can read and you can write.

88
00:04:36.450 --> 00:04:40.136
&gt;&gt; Speaker 2: Okay, okay, okay,
I'm thinking this could be more structure

89
00:04:40.136 --> 00:04:43.909
behind it and you can actually
make delegate it to maybe.

90
00:04:43.909 --> 00:04:44.787
&gt;&gt; Scott Moss: Yeah.
&gt;&gt; Speaker 2: Okay.

91
00:04:44.787 --> 00:04:46.940
&gt;&gt; Scott Moss: Yep, you could definitely
do that and we'll talk about it.

92
00:04:46.940 --> 00:04:47.990
So the word query,

93
00:04:47.990 --> 00:04:51.730
I'm gonna say the word query a lot today
and it's gonna mean different things.

94
00:04:51.730 --> 00:04:55.367
So I'm gonna try to elaborate when I say
the word query of which type of query I'm

95
00:04:55.367 --> 00:04:56.139
talking about.

96
00:04:58.854 --> 00:05:01.050
&gt;&gt; Scott Moss: Yeah, and like I said,
the ecosystem is fantastic.

97
00:05:01.050 --> 00:05:06.250
There's literally a tool or a package for
everything you need to do in GraphQL,

98
00:05:06.250 --> 00:05:09.010
especially in languages
like JavaScript and Scala.

99
00:05:09.010 --> 00:05:11.600
Scala's got some really good tooling for
GraphQL, too.

100
00:05:11.600 --> 00:05:16.170
But JavaScript, yeah, I mean,
anything you want to do, like you can do.

101
00:05:16.170 --> 00:05:20.280
Like I said, I've seen packages
where people create CSS in GraphQL.

102
00:05:20.280 --> 00:05:23.260
They create forms in GraphQL.

103
00:05:23.260 --> 00:05:26.096
They create REST APIs from GraphQL.

104
00:05:26.096 --> 00:05:28.946
It's ridiculous, there's so
many things you can do in GraphQL, and

105
00:05:28.946 --> 00:05:29.830
it's just growing.

