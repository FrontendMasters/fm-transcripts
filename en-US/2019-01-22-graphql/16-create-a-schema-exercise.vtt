WEBVTT

1
00:00:00.030 --> 00:00:04.260
&gt;&gt; Scott Moss: So with what I just
gave you, and then if you want,

2
00:00:04.260 --> 00:00:05.980
definitely have that cheat sheet open.

3
00:00:05.980 --> 00:00:10.080
What you're gonna do
now is you're gonna be

4
00:00:10.080 --> 00:00:14.520
creating a GraphQL Schema based on the
mongoose models that we already created.

5
00:00:14.520 --> 00:00:18.520
So if you checkout to the lesson-2 branch,
basically what you're gonna do is

6
00:00:18.520 --> 00:00:21.280
you're gonna create a type for
the product resource.

7
00:00:21.280 --> 00:00:24.359
So if we go to our schema,
make sure you check out lesson two.

8
00:00:24.359 --> 00:00:27.619
If you go look at, make sure I checkout.

9
00:00:35.212 --> 00:00:38.564
&gt;&gt; Scott Moss: If you go look
at Source &gt; Types &gt; Product,

10
00:00:38.564 --> 00:00:41.564
there's a product.gql file in here.

11
00:00:41.564 --> 00:00:43.100
This is where you're
gonna be doing your work.

12
00:00:43.100 --> 00:00:45.227
gql is short for GraphQL.

13
00:00:45.227 --> 00:00:47.830
You can also do .graphql if you want.

14
00:00:47.830 --> 00:00:49.788
I just did the shorthand, .gql.

15
00:00:49.788 --> 00:00:52.086
So you'll see some stuff
in here called enums.

16
00:00:52.086 --> 00:00:54.436
If you've never heard of enums,
if you look at that cheat sheet,

17
00:00:54.436 --> 00:00:55.350
it'll talk about them.

18
00:00:55.350 --> 00:00:58.200
But basically they're just
like any other language.

19
00:00:58.200 --> 00:01:01.170
They're just hard coded
values that cannot change.

20
00:01:01.170 --> 00:01:02.790
They're enums.

21
00:01:02.790 --> 00:01:04.300
These strings cannot change.

22
00:01:04.300 --> 00:01:06.970
And you can use them in
places where strings will be.

23
00:01:06.970 --> 00:01:08.720
They're just hard coded strings.

24
00:01:08.720 --> 00:01:10.130
So these are here for you.

25
00:01:10.130 --> 00:01:11.911
But there's gonna be some
tests that you need to run.

26
00:01:11.911 --> 00:01:17.851
So if you run npm run test -schema or

27
00:01:17.851 --> 00:01:23.492
yarn test -schema,
&gt;&gt; Scott Moss: It's

28
00:01:23.492 --> 00:01:26.121
gonna try to execute some tests here and
they're all gonna fail.

29
00:01:26.121 --> 00:01:28.745
You'll get eight failed tests.

30
00:01:28.745 --> 00:01:32.050
And it's gonna be looking for some types.

31
00:01:32.050 --> 00:01:35.440
So you can see right here it's looking for
a product type.

32
00:01:35.440 --> 00:01:39.203
It's looking for a new product
input with the correct fields,

33
00:01:39.203 --> 00:01:42.966
an update product input,
a product query, a products query,

34
00:01:42.966 --> 00:01:48.170
a new product mutation, an update product
mutation, and a remove product mutation.

35
00:01:48.170 --> 00:01:51.257
It's looking for all of those and
it's testing the fields on them, too, so

36
00:01:51.257 --> 00:01:53.630
it'll tell you what fields you're missing.

37
00:01:53.630 --> 00:01:56.280
So it's gonna be your job to come in here
and write that inside the GraphQL file.

38
00:01:56.280 --> 00:02:00.590
Writing stuff inside a GraphQL file is
no different from what I just did in

39
00:02:00.590 --> 00:02:01.400
the string.

40
00:02:01.400 --> 00:02:04.880
It's just in a GraphQL file and you just
get really nice syntax highlighting.

41
00:02:04.880 --> 00:02:10.210
So you can still come in here and write
a type, and it's exactly the same thing.

42
00:02:10.210 --> 00:02:11.220
You don't have to export anything.

43
00:02:11.220 --> 00:02:12.160
You don't have to import anything.

44
00:02:12.160 --> 00:02:15.150
You've just got to write your stuff and
then the test will run.

45
00:02:15.150 --> 00:02:19.060
So once you get all that to run and
pass, you should be good to go.

46
00:02:19.060 --> 00:02:21.610
But also, if you get stuck,
like I said, there's that cheat sheet.

47
00:02:21.610 --> 00:02:24.900
But you can also just look at what
I have in the coupon and the user.

48
00:02:24.900 --> 00:02:29.234
So as I go look at coupon.gql,
you can see how I'm doing inputs in here,

49
00:02:29.234 --> 00:02:33.798
how I'm doing types in here, how I'm
doing queries in here, and so forth.

50
00:02:36.166 --> 00:02:40.228
&gt;&gt; Scott Moss: The only other thing that
you're gonna have to do is when you make

51
00:02:40.228 --> 00:02:45.137
your queries and mutations, just prefix
them with the extend keyword here.

52
00:02:45.137 --> 00:02:46.438
You can only have one type.

53
00:02:46.438 --> 00:02:50.080
We already have a type called Query and
Mutation in the root schema.

54
00:02:50.080 --> 00:02:54.260
If you try to make it again, like this,
it'll say type Query is already created.

55
00:02:54.260 --> 00:02:57.070
So this is saying I want to extend
the type Query that's already there.

56
00:02:57.070 --> 00:02:58.270
So you have to do that.

57
00:02:58.270 --> 00:03:00.760
That allows us to spread our
schemas across different files.

58
00:03:00.760 --> 00:03:04.132
If you don't do that, it will try to
recreate the query type and it will break.

59
00:03:04.132 --> 00:03:06.170
So this allows us to extend
the type that's already there.

60
00:03:07.250 --> 00:03:08.540
Apollo allows us to do this.

61
00:03:08.540 --> 00:03:10.200
A lot of other servers
don't allow you to do this.

62
00:03:13.040 --> 00:03:16.380
So remember, get those tests to pass.

63
00:03:16.380 --> 00:03:18.945
When you write your queries and
mutations, prefix them with extend.

64
00:03:18.945 --> 00:03:22.174
And you're just going to be writing some
types and some input types, some queries,

65
00:03:22.174 --> 00:03:23.002
and some mutations.

