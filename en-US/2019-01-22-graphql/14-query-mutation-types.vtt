WEBVTT

1
00:00:00.173 --> 00:00:03.210
&gt;&gt; Scott Moss: So we talked about types,
scholars, and object types.

2
00:00:03.210 --> 00:00:04.719
Now we're going to talk about query and

3
00:00:04.719 --> 00:00:06.645
mutation types because
those are also types too.

4
00:00:06.645 --> 00:00:09.583
All right, if we go back and
look at the code we have here,

5
00:00:09.583 --> 00:00:12.790
I had to put the word type in front
of query because it is a type.

6
00:00:14.480 --> 00:00:16.799
So we need to talk about those.

7
00:00:16.799 --> 00:00:21.179
Basically, this is how you do CRUD on
your GraphQL API, you make queries and

8
00:00:21.179 --> 00:00:24.180
mutations, it's that simple, basically.

9
00:00:24.180 --> 00:00:24.884
All right, so

10
00:00:24.884 --> 00:00:28.659
query type describes the different
queries your API is capable of, right?

11
00:00:28.659 --> 00:00:32.170
So if you go back to the code that
we have here, I have a type query.

12
00:00:32.170 --> 00:00:35.552
And now I'm describing the different
queries that my API can do,

13
00:00:35.552 --> 00:00:37.901
I can do a myCat query,
I can do a hello query.

14
00:00:37.901 --> 00:00:43.690
Queries is like, ways to read data, so
like getOne, getMany, those are queries.

15
00:00:43.690 --> 00:00:47.224
So, whatever I want to be able to do,
publicly on my API,

16
00:00:47.224 --> 00:00:48.931
I need to define as a query.

17
00:00:48.931 --> 00:00:52.002
If I want to be able to get one cat,
I should get one cat here,

18
00:00:52.002 --> 00:00:54.034
and put its return type as a cat.

19
00:00:54.034 --> 00:00:57.808
If I want to get many cats,
I'll do something like cats, and

20
00:00:57.808 --> 00:01:00.993
I'll say you get back an array of cats,
all right?

21
00:01:00.993 --> 00:01:05.138
If it's not on the query,
you can't perform it, so

22
00:01:05.138 --> 00:01:10.710
it doesn't matter if you have a type
up here for something, type Car.

23
00:01:13.570 --> 00:01:17.450
If it's not being referenced by a type
that's eventually on a query, or

24
00:01:17.450 --> 00:01:20.325
if it's not on a query itself,
it's inaccessible.

25
00:01:20.325 --> 00:01:23.160
It has to be, at some point,
referenced by a query.

26
00:01:23.160 --> 00:01:25.933
Whether through the tree,
because it's referenced by a cat and

27
00:01:25.933 --> 00:01:28.509
a cat that's on the query, or
if it's on the query itself.

28
00:01:28.509 --> 00:01:29.749
It has to be there eventually,

29
00:01:29.749 --> 00:01:33.720
otherwise you might as well just delete it
from the schema, it's not even being used.

30
00:01:33.720 --> 00:01:37.427
So you have to add it to your query
eventually to be able to retrieve it.

31
00:01:40.177 --> 00:01:44.677
&gt;&gt; Scott Moss: A query operation is
just a name with the possible arguments

32
00:01:44.677 --> 00:01:47.383
that eventually returns the type.

33
00:01:47.383 --> 00:01:51.799
So basically what that is,
is if we go back to our playground.

34
00:01:54.582 --> 00:02:00.310
&gt;&gt; Scott Moss: So when you run a query
like myCat, this is a query operation.

35
00:02:00.310 --> 00:02:04.317
The operation's name is called myCat,
that's the name of the query, right?

36
00:02:04.317 --> 00:02:07.503
And we know that because,
that's what we have in our schema,

37
00:02:07.503 --> 00:02:09.190
that is the name of it.

38
00:02:09.190 --> 00:02:13.383
So these fields are the names of
the queries that we will be executing, so

39
00:02:13.383 --> 00:02:14.570
they have to match.

40
00:02:14.570 --> 00:02:18.807
So, it's literally whatever this name is,
that's what you would put in the incoming

41
00:02:18.807 --> 00:02:20.964
request so
that the names match up exactly.

42
00:02:20.964 --> 00:02:23.979
And again, their job is just to return
some type of field, or I'm sorry,

43
00:02:23.979 --> 00:02:24.770
some type of type.

44
00:02:29.138 --> 00:02:30.941
&gt;&gt; Scott Moss: A mutation is
the exact same thing, but

45
00:02:30.941 --> 00:02:34.010
with the intent of mutating
the database versus just reading.

46
00:02:34.010 --> 00:02:38.532
So, if queries are for getOne and
getMany, mutations is for update,

47
00:02:38.532 --> 00:02:39.996
create, and delete.

48
00:02:39.996 --> 00:02:43.200
That's for mutating, so
that's what you do for mutation.

49
00:02:43.200 --> 00:02:45.792
It's the exact same thing,
like I said, the only difference is,

50
00:02:45.792 --> 00:02:47.521
it's going to be mutating in the database.

51
00:02:47.521 --> 00:02:48.702
And most of the time mutations,

52
00:02:48.702 --> 00:02:50.990
because you're trying to change
something on the database.

53
00:02:50.990 --> 00:02:53.317
They're probably going to take arguments,
most of the time they'll take arguments.

54
00:02:53.317 --> 00:02:56.142
Sometimes you'll have mutations
that's just like, delete everything,

55
00:02:56.142 --> 00:02:58.386
you don't need an argument,
yeah, you might have those.

56
00:02:58.386 --> 00:03:01.555
Most of the time, it's like,
delete this one thing by this ID,

57
00:03:01.555 --> 00:03:05.503
update this one thing by this ID or create
this new thing with this payload here.

58
00:03:05.503 --> 00:03:08.677
So you'll have arguments for
mutations most likely,

59
00:03:08.677 --> 00:03:12.760
especially if you're just doing like
CRUD stuff on your GraphQL API.

60
00:03:12.760 --> 00:03:17.220
And a mutation just looks very much like a
query, you come here, you make a mutation.

61
00:03:19.542 --> 00:03:22.759
&gt;&gt; Scott Moss: Call it type Mutation, and
you start defining the different mutations

62
00:03:22.759 --> 00:03:24.914
that you can do the same
way you did to the query.

63
00:03:24.914 --> 00:03:28.273
So if I had a mutation called newCat,
I could say,

64
00:03:28.273 --> 00:03:32.520
I've got a mutation called newCat and
it returns a newCat like this.

65
00:03:34.479 --> 00:03:38.809
&gt;&gt; Scott Moss: You could say that, and
then if you wanted to pass the arguments

66
00:03:38.809 --> 00:03:43.150
to it, you would have to say,
call it whatever you want input.

67
00:03:43.150 --> 00:03:46.292
And then you've got to give it
a special type called an input that

68
00:03:46.292 --> 00:03:48.428
we're going to talk about in a minute.

69
00:03:48.428 --> 00:03:51.810
Yeah, so another way of thinking of them
is just like, thinking this is like,

70
00:03:51.810 --> 00:03:53.800
they're basically your routes.

71
00:03:53.800 --> 00:03:56.427
All right, if you had a REST API, and
you had all these different routes, and

72
00:03:56.427 --> 00:03:58.100
verb combinations,
that's what you could do.

73
00:03:58.100 --> 00:04:02.162
The queries and mutations are your routes,
they're what your API can do, so

74
00:04:02.162 --> 00:04:03.550
think about it like that.

75
00:04:03.550 --> 00:04:04.702
If you're like, what,
what the hell is a curating mutating?

76
00:04:04.702 --> 00:04:06.970
They're basically your
routes that people can use.

