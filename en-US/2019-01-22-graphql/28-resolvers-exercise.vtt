WEBVTT

1
00:00:00.091 --> 00:00:01.999
&gt;&gt; Scott Moss: Let's hop
into the exercise then,

2
00:00:01.999 --> 00:00:06.579
cuz this one's probably gonna be the most
challenging one cuz resolvers is not easy,

3
00:00:06.579 --> 00:00:08.750
but I made it really simple for you all.

4
00:00:08.750 --> 00:00:12.097
So what we're gonna do is, in this
exercise, you'll be creating resolvers for

5
00:00:12.097 --> 00:00:14.079
the Queries and
Mutations on the product type.

6
00:00:14.079 --> 00:00:17.003
In the last exercise, you created the
Queries and the Mutations in the schema,

7
00:00:17.003 --> 00:00:19.153
now you're actually gonna
write the resolvers for them.

8
00:00:19.153 --> 00:00:24.130
And you're gonna use the Mongoose models
to perform CRUD in those resolvers.

9
00:00:24.130 --> 00:00:27.598
So if you've taken the REST course, it's
basically some of the same CRUD operations

10
00:00:27.598 --> 00:00:29.872
that we did in the REST course
with the Mongoose models.

11
00:00:29.872 --> 00:00:34.462
But they're actually just gonna be a lot
simpler in this course because GraphQL

12
00:00:34.462 --> 00:00:35.566
makes it simpler.

13
00:00:35.566 --> 00:00:38.346
As in you don't have to deal with a lot
of the stuff you had to do with the REST,

14
00:00:38.346 --> 00:00:39.749
like parameters and stuff like that.

15
00:00:40.890 --> 00:00:44.300
So first thing is check out
the lesson-3 branch, and

16
00:00:44.300 --> 00:00:46.618
then you're gonna create resolvers for
the product queries.

17
00:00:46.618 --> 00:00:47.904
So let me just check out and
show you what I'm talking about.

18
00:00:55.830 --> 00:01:00.945
&gt;&gt; Scott Moss: So if we head over to,
&gt;&gt; Scott Moss: Let's bring this up,

19
00:01:00.945 --> 00:01:05.360
let's look at the product
GraphQL side by side.

20
00:01:05.360 --> 00:01:09.860
If we scroll down to the queries, we got
two queries here, we have products and

21
00:01:09.860 --> 00:01:12.230
we have product, okay?

22
00:01:12.230 --> 00:01:16.720
So you're gonna make the resolvers for
both of these.

23
00:01:16.720 --> 00:01:21.371
So if you head over to product.resolvers,
that means, because it's this

24
00:01:21.371 --> 00:01:26.107
query.products and query.product,
you have to make them inside of here.

25
00:01:26.107 --> 00:01:31.032
You can also just create them outside
of here and then just add them here,

26
00:01:31.032 --> 00:01:33.150
it's however you wanna do it.

27
00:01:33.150 --> 00:01:36.054
But eventually you have to go inside
this query object with the same names.

28
00:01:36.054 --> 00:01:40.300
The keys in this query object have to
be the same name as the keys here.

29
00:01:40.300 --> 00:01:41.042
And that's how they match, right?

30
00:01:41.042 --> 00:01:44.384
So you gotta have queries, you gotta
have the resolvers for those queries.

31
00:01:44.384 --> 00:01:46.644
Now, remember, so if you look at them,

32
00:01:46.644 --> 00:01:50.632
products is expecting an array of
products, product is taking an ID and

33
00:01:50.632 --> 00:01:54.295
turning one product, and
you have a product model up here up top.

34
00:01:56.180 --> 00:02:00.287
You don't really need to understand how
that model works, what fields are in it

35
00:02:00.287 --> 00:02:04.601
because you don't need to, you just need
to find one or find meaning, that's it.

36
00:02:04.601 --> 00:02:08.750
You don't really need to know what the
fields do, that subtracts away from you.

37
00:02:08.750 --> 00:02:10.575
So that's one thing you gotta do.

38
00:02:10.575 --> 00:02:13.344
And then you gotta create the resolvers
for the product mutations.

39
00:02:13.344 --> 00:02:16.010
So if you look at these mutations,
we have a new product.

40
00:02:16.010 --> 00:02:17.950
So you need to be able
to create a products.

41
00:02:17.950 --> 00:02:20.820
And you can see,
it takes an argument called input.

42
00:02:20.820 --> 00:02:24.482
So that means, in its resolver,
you'll have a second argument called ergs.

43
00:02:24.482 --> 00:02:26.590
On that args object, there'll be an input.

44
00:02:26.590 --> 00:02:28.603
That input is gonna be a new
product they wanna create, right?

45
00:02:28.603 --> 00:02:31.403
Cuz if you go look at the new input type,
it looks like this.

46
00:02:31.403 --> 00:02:33.730
So you got an object that looks like this.

47
00:02:34.890 --> 00:02:38.770
We'll have at least these four properties
and optionally these five properties.

48
00:02:38.770 --> 00:02:41.330
So you'll just take that,
you'll use Mongoose, and you'll just say,

49
00:02:41.330 --> 00:02:46.110
make a new product given args.input,
and you'll return a Product, that's it.

50
00:02:47.840 --> 00:02:52.538
UpdateProduct take an ID, and then
the update that they wanna update to, and

51
00:02:52.538 --> 00:02:55.810
it uses Mongoose to mongoose.findById and
update.

52
00:02:55.810 --> 00:02:59.210
Product.findById and update, update,
and it returns that new product.

53
00:02:59.210 --> 00:03:02.024
And the remove product
does the same thing,

54
00:03:02.024 --> 00:03:06.906
give it an ID, product.findById, and
it remove and return that product.

55
00:03:06.906 --> 00:03:10.526
So you're going to be
writing those five resolvers.

56
00:03:10.526 --> 00:03:14.214
The one thing to note, if you didn't
notice when I was writing my resolvers,

57
00:03:14.214 --> 00:03:17.770
there is no request and response,
so you can just return the value.

58
00:03:17.770 --> 00:03:21.295
You don't have to respond back
with the status and then .send or

59
00:03:21.295 --> 00:03:24.175
.jsend, like you would in Express,
to send back.

60
00:03:24.175 --> 00:03:28.230
And in resolvers,
you just return the value, that's it.

61
00:03:28.230 --> 00:03:30.905
You don't have to respond back,
GraphQL does the responding for you,

62
00:03:30.905 --> 00:03:32.670
you just resolve the data.

63
00:03:32.670 --> 00:03:33.304
So that's what you're gonna do.

64
00:03:33.304 --> 00:03:36.270
So if I were to walk through one of these
very quick, I'm just gonna show you.

65
00:03:37.500 --> 00:03:40.950
So if I were gonna make a query for
products, I like to make them out here.

66
00:03:40.950 --> 00:03:45.853
So I'll say products,
&gt;&gt; Scott Moss: There's

67
00:03:45.853 --> 00:03:48.880
no first argument cuz there's nothing set.

68
00:03:48.880 --> 00:03:51.703
Products doesn't take any argument, so
I don't really care about them, and

69
00:03:51.703 --> 00:03:53.047
I don't really care about context.

70
00:03:53.047 --> 00:03:56.410
Actually, I don't care about any of these
arguments, so I'm just gonna skip them.

71
00:03:56.410 --> 00:04:00.880
And what I need to do now is just return,
oops, get that arrow function going,

72
00:04:00.880 --> 00:04:03.130
I just need to return a list of products.

73
00:04:03.130 --> 00:04:10.053
Well, I'll just say return
Product.find({}).exec(), that's it.

74
00:04:10.053 --> 00:04:16.179
And then now I'll add it to,
&gt;&gt; Scott Moss: Products.

75
00:04:17.200 --> 00:04:22.330
Boom, that resolver's done,
&gt;&gt; Scott Moss: That's it.

76
00:04:22.330 --> 00:04:23.445
Like I said, it's much simpler than REST.

77
00:04:23.445 --> 00:04:24.173
All you can see,

78
00:04:24.173 --> 00:04:27.144
cuz the only thing this thing is
concerned about is resolving data.

79
00:04:27.144 --> 00:04:29.930
It's not concerned about status codes and
error messages,

80
00:04:29.930 --> 00:04:31.300
it's just resolve the data.

81
00:04:32.470 --> 00:04:33.800
And you know what data to resolve.

82
00:04:33.800 --> 00:04:36.735
If you get lost, like, I don't know
what I'm supposed to return, go back and

83
00:04:36.735 --> 00:04:39.409
look at your schema,
it's an array of products, okay, cool.

84
00:04:39.409 --> 00:04:41.428
What am I supposed to return here?

85
00:04:41.428 --> 00:04:42.664
It returns a product, got it.

86
00:04:42.664 --> 00:04:45.318
So you know exactly what to do by
looking at the types that you define.

87
00:04:48.426 --> 00:04:49.950
&gt;&gt; Scott Moss: And
don't forget to add them below.

88
00:04:52.100 --> 00:04:56.866
And as far as your tests go,
the command you wanna run is

89
00:04:56.866 --> 00:05:01.021
gonna be npm run, or yarn, test-resolvers.

90
00:05:06.674 --> 00:05:08.438
&gt;&gt; Scott Moss: So you go ahead and
you test these resolvers.

91
00:05:08.438 --> 00:05:11.060
You can see that the one that I
wrote already passed the test.

92
00:05:13.591 --> 00:05:17.649
&gt;&gt; Scott Moss: There is one more test
in here that you're gonna have to do,

93
00:05:17.649 --> 00:05:22.517
and it's, and we talked about it,
it's resolving other fields, for

94
00:05:22.517 --> 00:05:24.316
instance like a product.

95
00:05:24.316 --> 00:05:28.480
You're gonna have to write a resolver for
the created by field on a product,

96
00:05:28.480 --> 00:05:31.993
which basically takes a product,
gets to created by field, and

97
00:05:31.993 --> 00:05:34.430
then finds a user by the ID and
returns it.

98
00:05:34.430 --> 00:05:35.750
So we're gonna have to do that.

99
00:05:35.750 --> 00:05:38.830
And remember, if you wanna resolve a field
for a type, you put it on the type.

100
00:05:40.180 --> 00:05:42.167
So you would put that here,
you would be created by here.

101
00:05:43.900 --> 00:05:47.130
&gt;&gt; Scott Moss: Don't worry about resolve
type, we'll talk about that later.

102
00:05:47.130 --> 00:05:48.740
But you would put created by here.

103
00:05:48.740 --> 00:05:50.166
So if you wanna resolve
the created by field,

104
00:05:53.160 --> 00:05:54.899
&gt;&gt; Scott Moss: For this product,

105
00:05:54.899 --> 00:05:56.749
you'd put it here.

106
00:05:56.749 --> 00:05:58.943
Remember, when you're on an s or resolver,

107
00:05:58.943 --> 00:06:01.880
that first argument is gonna
be what was resolved before.

108
00:06:01.880 --> 00:06:05.700
So in this case, what was resolved
before the created by field?

109
00:06:05.700 --> 00:06:08.685
Well, the entire product was resolved
before the created by field.

110
00:06:08.685 --> 00:06:12.798
Because it could come from products or it
could come from product, but either way,

111
00:06:12.798 --> 00:06:14.109
it's gonna be a product.

112
00:06:15.310 --> 00:06:17.730
It's gonna be one of that, so
that first argument's gonna be that.

113
00:06:17.730 --> 00:06:22.080
So you might need that to get the
.createdByID and look up the user for it.

114
00:06:22.080 --> 00:06:24.879
So, and
you already have the user up here as well.

115
00:06:24.879 --> 00:06:28.090
So it can get pretty complicated,
but I have faith.

