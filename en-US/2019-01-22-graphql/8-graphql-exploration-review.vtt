WEBVTT

1
00:00:00.170 --> 00:00:01.270
&gt;&gt; Scott Moss: Awesome.
So, yeah,

2
00:00:01.270 --> 00:00:03.630
let's continue with this example.

3
00:00:03.630 --> 00:00:07.320
So let's say I come here and I'm gonna
make, I'm not gonna make a type, actually.

4
00:00:07.320 --> 00:00:09.090
I'm just gonna make another query.

5
00:00:09.090 --> 00:00:12.550
And I was gonna call this one hello.

6
00:00:12.550 --> 00:00:15.300
And I'm just gonna say it's
return type is a string.

7
00:00:17.030 --> 00:00:21.260
I don't have to give it a type that I
created, I can just give it any type.

8
00:00:21.260 --> 00:00:23.600
In this case,
I'm gonna give it a string type.

9
00:00:23.600 --> 00:00:24.390
I'm gonna hit Save.

10
00:00:26.382 --> 00:00:29.270
&gt;&gt; Scott Moss: Let this thing recompile.

11
00:00:29.270 --> 00:00:30.840
Go back.

12
00:00:30.840 --> 00:00:34.590
And if you've noticed, if you use this,
the GraphQL Playground,

13
00:00:34.590 --> 00:00:36.980
you'll have to refresh this
to get the latest schema.

14
00:00:36.980 --> 00:00:41.950
I think there used to be an option here
to refresh the schema every single time.

15
00:00:41.950 --> 00:00:44.740
But you might have to refresh this
every time your server refreshes to get

16
00:00:44.740 --> 00:00:46.080
the latest one.

17
00:00:46.080 --> 00:00:47.690
So now, we got myCat.

18
00:00:47.690 --> 00:00:50.050
So what I'm gonna do now is,

19
00:00:50.050 --> 00:00:54.100
without showing off too much what
GraphQL can do, I'm just gonna do hello.

20
00:00:54.100 --> 00:00:57.700
And because hello is not an object type,
I don't have to put object things here and

21
00:00:57.700 --> 00:00:58.850
try to get fields.

22
00:00:58.850 --> 00:01:02.548
In fact, it'll break if I try to do that
because hello is just a string type.

23
00:01:02.548 --> 00:01:04.120
So all I have to do is that.

24
00:01:04.120 --> 00:01:10.463
And I get back null because I
didn't write a resolver for it.

25
00:01:10.463 --> 00:01:14.610
&gt;&gt; Scott Moss: So as you all were
walking through that exercise,

26
00:01:14.610 --> 00:01:21.239
did anybody observe anything, learn
anything, or just got really confused?

27
00:01:22.490 --> 00:01:24.080
Looks like everybody was able to do it.

28
00:01:24.080 --> 00:01:25.130
So I'm guessing you all are learning.

29
00:01:25.130 --> 00:01:27.370
I saw people who were trying
to enhance it with stuff.

30
00:01:27.370 --> 00:01:28.240
Yeah, Kevin.

31
00:01:28.240 --> 00:01:33.880
&gt;&gt; Speaker 2: One question, I guess, I had
is do you have to define what the type is?

32
00:01:33.880 --> 00:01:36.244
So does it have to be string?

33
00:01:36.244 --> 00:01:41.260
Do you have to spell that out
while you're typing it out?

34
00:01:41.260 --> 00:01:43.240
&gt;&gt; Scott Moss: You mean as in for

35
00:01:43.240 --> 00:01:45.880
the name field, putting String here,
do I have to put the String here?

36
00:01:45.880 --> 00:01:46.680
&gt;&gt; Speaker 2: Correct, yeah.

37
00:01:46.680 --> 00:01:48.807
&gt;&gt; Scott Moss: Yeah, on your schema,
you have to put that there.

38
00:01:48.807 --> 00:01:50.490
&gt;&gt; Speaker 2: Okay.
&gt;&gt; Scott Moss: Every field eventually

39
00:01:50.490 --> 00:01:54.390
resolves down to a scholar, and
we'll talk about scholars next.

40
00:01:54.390 --> 00:01:57.950
We'll get into that, but yeah,
you absolutely have to put that.

41
00:01:59.350 --> 00:02:00.370
Not on the query, though.

42
00:02:00.370 --> 00:02:02.200
On the query side, it's the opposite.

43
00:02:02.200 --> 00:02:04.559
You don't put the types, you just ask for
the fields and then they come back.

44
00:02:05.570 --> 00:02:06.779
For the schema side, yes.

45
00:02:07.909 --> 00:02:09.211
&gt;&gt; Scott Moss: Anything else,
any other questions?

46
00:02:13.808 --> 00:02:15.460
&gt;&gt; Scott Moss: Nope, all right.

47
00:02:15.460 --> 00:02:17.000
That was just an exploratory exercise.

48
00:02:17.000 --> 00:02:17.616
I'm sorry, Dave.

49
00:02:17.616 --> 00:02:21.900
&gt;&gt; Speaker 2: So what would your
resolver look like for hello?

50
00:02:21.900 --> 00:02:22.960
&gt;&gt; Scott Moss: Good question, yeah.

51
00:02:22.960 --> 00:02:25.140
&gt;&gt; Speaker 2: Just return a string?

52
00:02:25.140 --> 00:02:29.706
&gt;&gt; Scott Moss: Yeah, so for hello, I come
down here to Query, I write hello, and

53
00:02:29.706 --> 00:02:31.675
I'll just return a string.

54
00:02:31.675 --> 00:02:34.263
I'll just say hello, just like that.

55
00:02:34.263 --> 00:02:37.690
And as long as it's a string,
it'll be a fine.

56
00:02:37.690 --> 00:02:41.891
So if I go back, refresh this hello,

57
00:02:41.891 --> 00:02:45.420
you can see I get back, hello.

