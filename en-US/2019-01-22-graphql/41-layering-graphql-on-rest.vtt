WEBVTT

1
00:00:00.240 --> 00:00:05.099
&gt;&gt; Speaker 2: I have a question
on talking to a REST API.

2
00:00:05.099 --> 00:00:05.870
&gt;&gt; Scott Moss: Yep.

3
00:00:05.870 --> 00:00:09.108
&gt;&gt; Speaker 2: From GraphQL and
there's tools for that or?

4
00:00:09.108 --> 00:00:12.712
&gt;&gt; Scott Moss: Yeah, so are you saying
you have a REST API server and you have

5
00:00:12.712 --> 00:00:17.386
a GraphQL server and you want the GraphQL
server to talk to the REST API server?

6
00:00:17.386 --> 00:00:18.230
&gt;&gt; Speaker 2: Right.

7
00:00:18.230 --> 00:00:23.453
&gt;&gt; Scott Moss: Yeah, so if you don't wanna
manually do it as in, in my resolvers I'm

8
00:00:23.453 --> 00:00:28.867
setting all this stuff up,
basically what you wanna do is, let's see.

9
00:00:28.867 --> 00:00:35.458
REST to, let's see if the,
no, you wanna wrap it, nope.

10
00:00:35.458 --> 00:00:42.056
I'm looking for a specific one,
I don't know if this is it.

11
00:00:42.056 --> 00:00:45.005
Maybe Apollo's the one that doesn't know.

12
00:00:45.005 --> 00:00:46.520
I think Apollo doesn't know.

13
00:00:50.341 --> 00:00:53.576
&gt;&gt; Scott Moss: Schema-First.

14
00:00:53.576 --> 00:00:55.160
Yeah, I think Apollo doesn't know.

15
00:00:55.160 --> 00:00:56.421
So, yeah, that's right.

16
00:00:56.421 --> 00:00:59.297
So what you can do with
Apollo is basically,

17
00:00:59.297 --> 00:01:04.630
you can define different data resources
for your GraphQL API to contact.

18
00:01:04.630 --> 00:01:06.176
And one of those data
resources can be a REST API.

19
00:01:06.176 --> 00:01:09.010
It doesn't have to be a database,
it can be a REST API.

20
00:01:09.010 --> 00:01:13.564
And then that way you're basically just
gonna be writing different resolvers

21
00:01:13.564 --> 00:01:16.256
that talk to different
parts of your REST API.

22
00:01:16.256 --> 00:01:18.848
Like this resolver talks
to this part of API,

23
00:01:18.848 --> 00:01:21.773
this resolver talks to this
part of the API and so forth.

24
00:01:21.773 --> 00:01:24.511
All this stuff is very new and
experimental, so

25
00:01:24.511 --> 00:01:26.503
I can't comment on how good it is.

26
00:01:26.503 --> 00:01:29.310
There's also another one,
this isn't the one I was looking for.

27
00:01:29.310 --> 00:01:31.864
There's another one that I
can't think of right now,

28
00:01:31.864 --> 00:01:34.875
maybe it died because this one
put it out of business, but yeah.

29
00:01:34.875 --> 00:01:41.750
There's wrappers that do it, in my
opinion, I myself would do it manually.

30
00:01:42.870 --> 00:01:44.502
Because it's strict and it's legible.

31
00:01:44.502 --> 00:01:50.300
If you do it automatically, I don't know,
I feel like you give up control.

32
00:01:50.300 --> 00:01:51.200
With something so

33
00:01:51.200 --> 00:01:54.627
strict as GraphQL giving up control
is not a good idea in my opinion.

34
00:01:54.627 --> 00:02:02.460
But feel free to check this out which is
called layer GraphQL with Apollo MVRP.

35
00:02:03.590 --> 00:02:06.341
No, that's just an example of API,
but yeah, Layer GraphQL.

36
00:02:06.341 --> 00:02:09.812
So check that out, and
see how they did it, but

37
00:02:09.812 --> 00:02:14.180
they're using something
called RESTDataSource.

38
00:02:14.180 --> 00:02:16.882
This is very new.
I've never even seen this before, but

39
00:02:16.882 --> 00:02:21.456
I'm guessing, yeah, this allows you to
define a RESTDataSource that creates

40
00:02:21.456 --> 00:02:26.320
resolvers that interact with your REST
API, that delegate to your GraphQL schema.

41
00:02:26.320 --> 00:02:30.609
So at the end of the day, it looks like
they're just creating your GraphQL schema

42
00:02:30.609 --> 00:02:33.783
on the fly using schema stitching
to wrap your GraphQL API.

43
00:02:33.783 --> 00:02:36.130
So, that sounds like
a pretty good way to do it.

44
00:02:36.130 --> 00:02:37.014
I think I would've done it that way.

45
00:02:37.014 --> 00:02:39.810
But I still would do it manually myself.

