WEBVTT

1
00:00:00.230 --> 00:00:04.110
&gt;&gt; Scott Moss: Guess the only last thing I
wanna show you, context is not that nice.

2
00:00:04.110 --> 00:00:06.540
I mean it's just an objects,
whatever objects you pass to it.

3
00:00:06.540 --> 00:00:09.525
But I did tell you about info, so
I'm just gonna log that for you so

4
00:00:09.525 --> 00:00:11.495
you can actually see what that looks like.

5
00:00:11.495 --> 00:00:15.228
So you know what the info object looks
like when I say like it's an ast,

6
00:00:15.228 --> 00:00:19.598
what does that actually mean if you've
never really done any lower language level

7
00:00:19.598 --> 00:00:21.980
stuff, that might sound weird.

8
00:00:21.980 --> 00:00:24.217
So we'll log that and this is it.

9
00:00:24.217 --> 00:00:26.060
This is the ast of the operation.

10
00:00:27.210 --> 00:00:29.816
&gt;&gt; Scott Moss: So basically,
takes the query that I sent up and

11
00:00:29.816 --> 00:00:31.250
it turns it into this.

12
00:00:31.250 --> 00:00:35.220
This thing with the field nodes on it,
and arguments, and the return type,

13
00:00:35.220 --> 00:00:39.910
and the entire GraphQL schema,
like literally everything

14
00:00:39.910 --> 00:00:44.730
that you need to figure out what
was sent and how it was validated.

15
00:00:44.730 --> 00:00:47.330
So this is like, if we go to this one,
really crazy tooling.

16
00:00:47.330 --> 00:00:49.910
It tells you the location in the schema
where this thing was defined,

17
00:00:49.910 --> 00:00:55.140
what type it was using, what's expected,
any directives, all types of stuff.

18
00:00:56.640 --> 00:00:59.250
So it's the ast, so again,
this is really good for tooling.

19
00:00:59.250 --> 00:01:03.220
The only time I've ever had to use
this was optimizing database calls,

20
00:01:03.220 --> 00:01:07.900
where I only wanted to create a database
for the exact fields that they asked for,

21
00:01:07.900 --> 00:01:09.370
and nothing else.

22
00:01:09.370 --> 00:01:11.782
That was it.
So only query a cat with the name and age,

23
00:01:11.782 --> 00:01:14.778
cuz that's the only thing they asked for,
and nothing else.

24
00:01:14.778 --> 00:01:17.226
And that way, I didn't have to get
everything from the database, and

25
00:01:17.226 --> 00:01:18.533
only send back the name and the cat.

26
00:01:18.533 --> 00:01:26.400
&gt;&gt; Speaker 2: I was hoping it
would automatically do that.

27
00:01:26.400 --> 00:01:28.256
&gt;&gt; Scott Moss: Yeah, so
that's a good question.

28
00:01:28.256 --> 00:01:32.162
It does, so for instance if I send back.

29
00:01:32.162 --> 00:01:36.850
&gt;&gt; Scott Moss: Actually,
let's check it out.

30
00:01:36.850 --> 00:01:39.190
So let's say I don't ask for an age here.

31
00:01:39.190 --> 00:01:39.900
Let's get rid of this.

32
00:01:41.020 --> 00:01:42.175
If I don't ask for an age here.

33
00:01:47.009 --> 00:01:51.145
&gt;&gt; Scott Moss: But this resolver has sent
back an object with an age property on it.

34
00:01:51.145 --> 00:01:54.065
It just won't include it.

35
00:01:54.065 --> 00:01:56.005
But that's free, cuz it's in memory.

36
00:01:56.005 --> 00:01:58.815
But if you query the database on age
property, the damage is already done.

37
00:01:58.815 --> 00:02:00.695
You already queried the database for
the age property,

38
00:02:00.695 --> 00:02:03.865
even though GraphQL won't include
it because the query didn't ask for

39
00:02:03.865 --> 00:02:06.115
it, you still already
queried the database for it.

40
00:02:06.115 --> 00:02:08.890
So that's where the is gonna be,
is querying the database for

41
00:02:08.890 --> 00:02:10.365
fields you don't need.

42
00:02:10.365 --> 00:02:14.720
So yeah, you can send back
whatever object you want, but

43
00:02:14.720 --> 00:02:18.900
it's only gonna match the names
based on the query that was sent.

44
00:02:18.900 --> 00:02:21.930
Those names have to match up to the fields
in the object that you send back.

45
00:02:21.930 --> 00:02:26.260
If those names don't match up, then it's
gotta say that, that's just not real,

46
00:02:26.260 --> 00:02:28.360
that's not a real type,
that's not a real field on this type,

47
00:02:28.360 --> 00:02:29.590
that's not a real thing.

48
00:02:29.590 --> 00:02:31.665
The only other way it'll
resolve it is if you do this,

49
00:02:31.665 --> 00:02:33.663
if you write the resolvers for
the names yourself.

50
00:02:40.336 --> 00:02:41.830
&gt;&gt; Scott Moss: So yeah,
resolvers is a doozy.

51
00:02:41.830 --> 00:02:45.260
It took me a while to actually
truly understand how to use it.

52
00:02:45.260 --> 00:02:46.860
I mean, I think to this day,
I'm still learning.

53
00:02:46.860 --> 00:02:49.786
Like there's just so
much stuff you can do with them,

54
00:02:49.786 --> 00:02:52.740
it's a lot of stuff you can do with them.

55
00:02:52.740 --> 00:02:54.140
But, yeah these are the basics.

56
00:02:54.140 --> 00:02:58.830
This is the basis of understanding
resolvers and how they work.

