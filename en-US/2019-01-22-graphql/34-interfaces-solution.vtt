WEBVTT

1
00:00:00.241 --> 00:00:04.092
&gt;&gt; Scott Moss: Hopefully everybody had
enough time to make the conversion over

2
00:00:04.092 --> 00:00:06.740
from a product type to
a product interface.

3
00:00:06.740 --> 00:00:10.566
And then create the three new types
that implement that interface.

4
00:00:10.566 --> 00:00:15.201
And then finally, build out that resolve
type function that resolves the types,

5
00:00:15.201 --> 00:00:18.572
so I'm just going to hop right in and
start working on that.

6
00:00:18.572 --> 00:00:22.480
So let's head over to our Product.GraphQL.

7
00:00:22.480 --> 00:00:26.467
And the first thing we want to do is
change the name of Product from type to

8
00:00:26.467 --> 00:00:28.268
actually just be an interface.

9
00:00:28.268 --> 00:00:31.250
So that's the first thing I'm going to do,
just going to make that an interface.

10
00:00:31.250 --> 00:00:33.908
And then I'm going to go ahead and
create some new types.

11
00:00:33.908 --> 00:00:38.046
So I'm going to make a type for
GamingPC, like this, and

12
00:00:38.046 --> 00:00:44.873
it's going to implement-
&gt;&gt; Scott Moss: A Product,

13
00:00:44.873 --> 00:00:47.507
which is an interface now, and

14
00:00:47.507 --> 00:00:52.487
it's going to have all the same
things minus some things.

15
00:00:52.487 --> 00:00:56.750
So GamingPC has all this stuff,
except a GamingPC doesn't have a range,

16
00:00:56.750 --> 00:01:00.075
because it's not a drone,
it doesn't have a BikeType.

17
00:01:00.075 --> 00:01:04.771
But a GamingPC does have liquidCooled,
and if it is a GamingPC, it must be root,

18
00:01:04.771 --> 00:01:08.170
not null, it must be required,
so I'm going to put that.

19
00:01:10.665 --> 00:01:14.068
&gt;&gt; Scott Moss: And so if you see this,
this actually won't work.

20
00:01:14.068 --> 00:01:16.911
Because now the product has fills
that the GamingPC doesn't and

21
00:01:16.911 --> 00:01:18.446
you have to implement all of them.

22
00:01:18.446 --> 00:01:21.216
So what that means is,
this BikeType, this range and

23
00:01:21.216 --> 00:01:24.497
this liquidCooled is no longer
going to live on the interface.

24
00:01:24.497 --> 00:01:26.764
And so those are going to be
the three different fields, right?

25
00:01:26.764 --> 00:01:28.749
So we can just comment those out for
now and

26
00:01:28.749 --> 00:01:30.918
then we'll add them down
to the other types.

27
00:01:30.918 --> 00:01:36.256
So now this will satisfy
the implementation of product because

28
00:01:36.256 --> 00:01:40.905
it has a name, name, price,
price, image, image.

29
00:01:40.905 --> 00:01:45.141
Type is type, createdBy is createdBy,
and description is description, and

30
00:01:45.141 --> 00:01:48.045
then its only unique thing,
which is liquidCooled.

31
00:01:48.045 --> 00:01:53.459
So that will satisfy that,
so if we run some test here,

32
00:01:53.459 --> 00:01:56.886
let's see, test-interfaces.

33
00:02:05.065 --> 00:02:06.254
&gt;&gt; Scott Moss: See what happens.

34
00:02:10.968 --> 00:02:15.707
&gt;&gt; Scott Moss: Okay, so I've got to finish
doing all of this before this is going to

35
00:02:15.707 --> 00:02:18.547
work, so we'll just keep moving on it.

36
00:02:18.547 --> 00:02:22.466
And so
the GamingPC implements the product,

37
00:02:22.466 --> 00:02:26.809
and then we will say type,
what's the other one?

38
00:02:26.809 --> 00:02:28.156
&gt;&gt; Student: Drone.
&gt;&gt; Scott Moss: Drone, there we go,

39
00:02:28.156 --> 00:02:30.178
Drone implements the Product as well.

40
00:02:34.271 --> 00:02:39.377
&gt;&gt; Scott Moss: Boom, and then from there,
very much the same thing,

41
00:02:39.377 --> 00:02:44.607
we'll go ahead and copy this,
there we go, copy that.

42
00:02:44.607 --> 00:02:50.490
And we'll say that Drone also has
a range which is a type of String.

43
00:02:52.889 --> 00:02:55.150
&gt;&gt; Scott Moss: Which is required, okay?

44
00:02:55.150 --> 00:02:57.970
And then we'll say type.

45
00:02:57.970 --> 00:02:59.522
&gt;&gt; Student: Bike.

46
00:02:59.522 --> 00:03:03.870
&gt;&gt; Scott Moss: All right,
there we go, I'm drawing a blank,

47
00:03:03.870 --> 00:03:08.451
implements, Product,
it's got those fields.

48
00:03:08.451 --> 00:03:13.410
And then it has a bikeType, which is
an enom of BikeType, and is required.

49
00:03:14.920 --> 00:03:19.000
So we've got those, so the next thing we
do is, let's look at these tests here,

50
00:03:19.000 --> 00:03:19.852
get rid of this.

51
00:03:26.116 --> 00:03:30.827
&gt;&gt; Scott Moss: spec for
lesson-4, there we go, so,

52
00:03:30.827 --> 00:03:36.379
it needed an interface called Product,
cool.

53
00:03:36.379 --> 00:03:40.910
And then we need a GamingPC
that implements the Product.

54
00:03:40.910 --> 00:03:43.710
And need that to be a Boolean for
liquidCooled,

55
00:03:43.710 --> 00:03:46.170
a BikeType that implements the Product.

56
00:03:46.170 --> 00:03:49.400
And it needs a field that has bikeType,
that's required.

57
00:03:49.400 --> 00:03:53.901
And then we need a Drone
that implements Product, and

58
00:03:53.901 --> 00:03:58.410
it needs to have a field
called range that is a String.

59
00:03:58.410 --> 00:04:02.442
So go ahead and save all that and
just run the test,

60
00:04:02.442 --> 00:04:06.571
see what we get,
did anybody get all these to pass?

61
00:04:06.571 --> 00:04:10.803
Nice, cool,
looks like mine are still failing, so

62
00:04:10.803 --> 00:04:15.624
let's see why,
cannot read property types of undefined.

63
00:04:15.624 --> 00:04:21.339
Let's see, GraphQL Unexpected Name,

64
00:04:21.339 --> 00:04:27.557
GamingPC, Gaming, I must have had a typo,

65
00:04:27.557 --> 00:04:32.947
so it looks like it needs to be called-

66
00:04:39.406 --> 00:04:40.352
&gt;&gt; Scott Moss: Gaming,,

67
00:04:40.352 --> 00:04:41.705
I got this thing up top,

68
00:04:41.705 --> 00:04:45.645
at the top of my file that I left
in here that's breaking everything.

69
00:04:45.645 --> 00:04:47.939
There we go, let's get rid of that,
run the test again.

70
00:04:53.018 --> 00:04:56.188
&gt;&gt; Scott Moss: Cool, so all those pass,
as far as the schema stuff goes,

71
00:04:56.188 --> 00:05:00.292
the only test that's still failing is
the resolver that we have to create.

72
00:05:00.292 --> 00:05:03.150
So resolves the product interface.

73
00:05:03.150 --> 00:05:06.544
So in order to do that,
we need to go create a resolver

74
00:05:06.544 --> 00:05:09.876
that resolves the type for
the interface product.

75
00:05:09.876 --> 00:05:14.544
So it needs to resolve to either
a GamingPC, a Drone or a Bike, so

76
00:05:14.544 --> 00:05:18.704
we'll do just that and
we'll head over to the resolver.

77
00:05:18.704 --> 00:05:22.851
We'll scroll down to where we're
going to write a resolver for

78
00:05:22.851 --> 00:05:26.078
product interface, and
resolve the type here.

79
00:05:26.078 --> 00:05:28.960
We're going to get a product
as the first argument,

80
00:05:28.960 --> 00:05:33.229
because when someone's querying for
a product, that product is resolved.

81
00:05:33.229 --> 00:05:37.246
And then it's passed onto this resolver,
so we know that that's a product.

82
00:05:37.246 --> 00:05:41.103
And if it's a product,
if we look at the product.model,

83
00:05:41.103 --> 00:05:46.910
there's a type property on there that is
an enum of gaming pc, bike, or drone.

84
00:05:46.910 --> 00:05:49.287
So we can look at that type property and
it's required, so we know it's there.

85
00:05:49.287 --> 00:05:53.327
So, we can look at that property to see,
depending on this property,

86
00:05:53.327 --> 00:05:55.455
we know what GraphQL type to return.

87
00:05:55.455 --> 00:06:00.077
So, if it's a Gaming_PC,
we'll return GamingPC, if it's a bike,

88
00:06:00.077 --> 00:06:05.150
we'll return a Bike, if it's a drone,
we'll return a Drone.

89
00:06:05.150 --> 00:06:08.190
So let's do that, so get rid of this,

90
00:06:08.190 --> 00:06:12.373
go down to the resolvers and
we'll just say return.

91
00:06:12.373 --> 00:06:16.051
And we've got this match up here
that I said that I have for you all,

92
00:06:16.051 --> 00:06:19.022
the productsTypeMatcher
that does all that for you.

93
00:06:19.022 --> 00:06:23.472
eSo, productsTypeMatcher, so
we'll return productsTypeMatcher, and

94
00:06:23.472 --> 00:06:30.041
we'll take in the-
&gt;&gt; Scott Moss: product.type,

95
00:06:30.041 --> 00:06:31.819
and that's it.

96
00:06:34.900 --> 00:06:39.264
&gt;&gt; Scott Moss: So what this is
doing is given a product.type,

97
00:06:39.264 --> 00:06:42.326
which is going to be one of these.

98
00:06:42.326 --> 00:06:48.630
Go ahead and return the matching type,
GamingPC or Drone or Bike.

99
00:06:51.128 --> 00:06:56.588
&gt;&gt; Scott Moss: All right, so given one
of the enums return the type name,

100
00:06:56.588 --> 00:06:59.940
and that's it so if we run the test.

101
00:07:10.357 --> 00:07:12.458
&gt;&gt; Scott Moss: And you can see,
that satisfies the test and it passes.

