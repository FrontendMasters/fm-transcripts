WEBVTT

1
00:00:00.150 --> 00:00:01.138
Any other questions?

2
00:00:01.138 --> 00:00:03.642
&gt;&gt; How do you handle caching?

3
00:00:03.642 --> 00:00:07.370
&gt;&gt; All right, how do you handle caching?

4
00:00:07.370 --> 00:00:10.039
Okay, there's a lot of different ways,
when you talk about caching,

5
00:00:10.039 --> 00:00:11.918
there's a lot of different
meanings of caching.

6
00:00:11.918 --> 00:00:13.518
So let's start in the resolvers.

7
00:00:13.518 --> 00:00:16.690
So one way you can cache is cache
the response from the database,

8
00:00:16.690 --> 00:00:20.470
the query that you did, and that way,
there's something that's called-

9
00:00:22.878 --> 00:00:24.997
DataLoader.

10
00:00:24.997 --> 00:00:30.210
So DataLoader is also created by
Facebook and it works for GraphQL and

11
00:00:30.210 --> 00:00:35.970
it's basically an in-memory store for
your request.

12
00:00:35.970 --> 00:00:40.200
So it's basically a cache
that it's only per request.

13
00:00:40.200 --> 00:00:42.524
So every time a request is made to your
server, this cache gets created and

14
00:00:42.524 --> 00:00:43.320
then it gets destroyed.

15
00:00:43.320 --> 00:00:45.160
So it's not going to cause memory leaks.

16
00:00:45.160 --> 00:00:48.833
But basically, this DataLoader is
something you would use to cache

17
00:00:48.833 --> 00:00:51.227
the revolvers inside your GraphQL server.

18
00:00:52.660 --> 00:00:56.990
There's plugins to allow this
to hook into Redis or MIM SQL or

19
00:00:56.990 --> 00:00:58.140
other things that you are using.

20
00:00:58.140 --> 00:01:00.580
So you could check that out, but

21
00:01:00.580 --> 00:01:05.760
DataLoader is one that you can use to
cache the results of a database query.

22
00:01:05.760 --> 00:01:09.146
You can also use traditional Redis if
you want to cache those, even Mongo,

23
00:01:09.146 --> 00:01:11.960
if you index things right,
everything is in memory.

24
00:01:11.960 --> 00:01:15.166
So that's just caching resolvers,
and that one's pretty simple,

25
00:01:15.166 --> 00:01:17.270
then you move on to the next layer.

26
00:01:17.270 --> 00:01:18.367
It's like, okay,

27
00:01:18.367 --> 00:01:22.058
how do I cache at the network layer
where I want to cache the results?

28
00:01:22.058 --> 00:01:27.035
Well, there's a couple ways you can do
that, it depends on your infrastructure.

29
00:01:27.035 --> 00:01:30.449
Because by default, if you use GraphQL,
it's going to do a post request, and

30
00:01:30.449 --> 00:01:32.410
then the query's in the body.

31
00:01:32.410 --> 00:01:35.360
Most traditional caching strategies

32
00:01:35.360 --> 00:01:38.720
cache on some URL-verb
combination with some headers.

33
00:01:38.720 --> 00:01:40.430
And then that's how
they know how to cache.

34
00:01:40.430 --> 00:01:43.270
Well, if the URL is always the same and
it's opposed by that, how do you do that?

35
00:01:43.270 --> 00:01:45.140
So that's where it depends
on your infrastructure.

36
00:01:45.140 --> 00:01:48.420
If you have an infrastructure where you're
creating your own CDN, in today's world,

37
00:01:48.420 --> 00:01:49.300
which is pretty easy.

38
00:01:49.300 --> 00:01:53.837
If we're using AWS Lambda@Edge,
if we're using Cloud for our workers.

39
00:01:53.837 --> 00:01:57.270
If we're using something like fast.io or
fly.io, and

40
00:01:57.270 --> 00:02:00.365
you can create your own
CDN with JavaScript.

41
00:02:00.365 --> 00:02:03.885
Then you can just create a digest yourself
from the postbody, which is a unique URL,

42
00:02:03.885 --> 00:02:05.415
then you can cache on that key.

43
00:02:05.415 --> 00:02:08.917
So you can cache on your own key that
you created from the digest there and

44
00:02:08.917 --> 00:02:11.007
you can cache on the network level.

45
00:02:11.007 --> 00:02:13.937
The problem with that is,
as soon as somebody changes one field,

46
00:02:13.937 --> 00:02:15.487
that whole cache is invalidated.

47
00:02:15.487 --> 00:02:18.957
So the cache hit ratio might not be
that high depending on what your

48
00:02:18.957 --> 00:02:19.557
API's used for.

49
00:02:19.557 --> 00:02:21.557
If it's an internal API,
for your dashboard,

50
00:02:21.557 --> 00:02:24.133
you're probably not changing requests
all the time, so that's fine.

51
00:02:24.133 --> 00:02:27.287
But if it's a developer API, and
requests are coming in all the time.

52
00:02:27.287 --> 00:02:29.037
Then the cache hit ratio is
probably going to be low, and

53
00:02:29.037 --> 00:02:30.320
it's like, what's the point?

54
00:02:30.320 --> 00:02:35.210
The next step up from that is, using some
of the built-in tools that Apollo has.

55
00:02:35.210 --> 00:02:40.865
And they have something called,
man, their website, sheesh.

56
00:02:43.149 --> 00:02:49.472
Okay, well I'm just going to type this in,
Apollo Engine, there we go, cool.

57
00:02:49.472 --> 00:02:51.710
So they have something, well I guess
it's called the Apollo Platform now, but

58
00:02:51.710 --> 00:02:52.910
it used to be called Apollo Engine.

59
00:02:52.910 --> 00:02:55.260
It looks like the engine
is just one part of it.

60
00:02:55.260 --> 00:03:00.470
But basically what this thing
allows you to do is to cache,

61
00:03:00.470 --> 00:03:06.350
you can set cache control on a certain
level as far as like fields and types.

62
00:03:06.350 --> 00:03:10.105
And then you proxy all of
the requests through their network.

63
00:03:10.105 --> 00:03:13.240
Or you host it on your
own infrastructure and

64
00:03:13.240 --> 00:03:15.980
they give you a sweet dashboard to
see what that caching looks like.

65
00:03:15.980 --> 00:03:20.280
And they take care of the caching for
you, so that's one way you can do it.

66
00:03:20.280 --> 00:03:24.350
I've never used Apollo Engine,
they have an open source component.

67
00:03:24.350 --> 00:03:28.970
I've never opted in to use it, so
I can't speak if it's good or not.

68
00:03:28.970 --> 00:03:33.410
As far as Graph QL goes,
these guys are pretty much experts so

69
00:03:33.410 --> 00:03:36.990
I trust their product and
yeah, this is like a step up.

70
00:03:36.990 --> 00:03:38.810
But if you have control over your own CDN,

71
00:03:38.810 --> 00:03:42.310
there's nothing stopping you from just
caching it yourself in the network layer.

72
00:03:42.310 --> 00:03:45.240
By creating a custom digest,
that's basically what we do.

73
00:03:45.240 --> 00:03:49.820
We write our own CDN in JavaScript and
we just cache it based on the postbody and

74
00:03:49.820 --> 00:03:51.386
we kind of go from there.

75
00:03:51.386 --> 00:03:55.679
So it's not too difficult and then if you
add caching on the resolvers side, I mean,

76
00:03:55.679 --> 00:03:58.350
you're always going to
be in memory anyway.

77
00:03:58.350 --> 00:04:01.840
So you can keep things pretty fast,
so that's caching.

78
00:04:01.840 --> 00:04:06.132
The other thing is just optimizing for
performance, optimizing for

79
00:04:06.132 --> 00:04:09.610
performance is basically
not doing things like this.

80
00:04:09.610 --> 00:04:13.540
So we have this createdBy that
like hits the database again, but

81
00:04:13.540 --> 00:04:17.700
that was after it already hit
this database for this product.

82
00:04:17.700 --> 00:04:19.954
So that keeps going and
hitting the database all the time,

83
00:04:19.954 --> 00:04:21.798
even if that's cached, that's ridiculous.

84
00:04:21.798 --> 00:04:25.626
So eventually what you do is you just
resolve everything in a top level

85
00:04:25.626 --> 00:04:26.790
resolver.

86
00:04:26.790 --> 00:04:29.700
So instead of passing everything
down like this, you can look

87
00:04:29.700 --> 00:04:32.560
at the info object inside of one of
these top level queries of mutation.

88
00:04:32.560 --> 00:04:33.972
To see exactly what they want and

89
00:04:33.972 --> 00:04:36.585
then do the entire database query
right there in that one resolver.

90
00:04:36.585 --> 00:04:38.970
And that way you don't have to
go down to the other ones and

91
00:04:38.970 --> 00:04:41.160
then that's the way you do that.

92
00:04:41.160 --> 00:04:43.890
So that was little more tougher because
you obviously have to look at the info

93
00:04:43.890 --> 00:04:46.350
object and
determine what fields are being what.

94
00:04:46.350 --> 00:04:50.140
And you have to develop a database
query that satisfies that, but

95
00:04:50.140 --> 00:04:54.080
that's a preferred method because
that's less work on your database.

96
00:04:54.080 --> 00:04:58.754
So I highly recommend doing that, yeah.

97
00:04:58.754 --> 00:05:01.990
&gt;&gt; So along the lines of REST.

98
00:05:01.990 --> 00:05:07.250
And REST with e-tags,
where you have preps tagged,

99
00:05:07.250 --> 00:05:10.970
cache, version cache, and
then versions in your database.

100
00:05:10.970 --> 00:05:13.910
Do you have a way of
doing that in GraphQL?

101
00:05:13.910 --> 00:05:15.700
&gt;&gt; Yeah,
that's what this Apollo Engine is for,

102
00:05:15.700 --> 00:05:18.320
I was trying to find a good example of it,
but all right.

103
00:05:18.320 --> 00:05:21.200
&gt;&gt; So you just put the version
in the model then?

104
00:05:21.200 --> 00:05:25.710
&gt;&gt; Right, they have, I don't know their
exact syntax, I've never used it.

105
00:05:25.710 --> 00:05:30.320
But they have something like this, where,
actually no, I'm just going to show it,

106
00:05:30.320 --> 00:05:32.430
I don't want to show
something that is not right.

107
00:05:32.430 --> 00:05:39.508
Apollo cache server, okay, bring it back
to Apollo Engine, okay, let's see here.

108
00:05:42.623 --> 00:05:46.210
Cache hints, here we go,
cacheControl, that's what it is.

109
00:05:46.210 --> 00:05:50.659
So you can do stuff like this on
the schema level using Apollo Engine.

110
00:05:50.659 --> 00:05:55.178
Where you can define whether it's
on a type, whether it's on a field,

111
00:05:55.178 --> 00:05:59.380
you can define the max age and
scope and stuff like that.

112
00:05:59.380 --> 00:06:02.150
And that's how you determine, and then
what they do is they used to, like I said,

113
00:06:02.150 --> 00:06:03.760
you send your stuff to their proxy.

114
00:06:03.760 --> 00:06:04.970
And they will help take care of it,

115
00:06:04.970 --> 00:06:06.960
there's nothing stopping you
from doing this yourself.

116
00:06:06.960 --> 00:06:09.035
This syntax right here,
like the cacheControl directive,

117
00:06:09.035 --> 00:06:11.403
these are just directives,
you can use them, they are open source.

118
00:06:11.403 --> 00:06:15.464
You can make them yourself, but you just
have to have the infrastructure that looks

119
00:06:15.464 --> 00:06:17.940
at this and
knows what to do with it, so yeah.

120
00:06:17.940 --> 00:06:19.150
Is it given to you for free?

121
00:06:19.150 --> 00:06:20.310
No, can you make it?

122
00:06:20.310 --> 00:06:20.810
Yes.

