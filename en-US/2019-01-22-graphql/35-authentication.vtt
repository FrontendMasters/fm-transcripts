WEBVTT

1
00:00:00.520 --> 00:00:03.130
&gt;&gt; Scott Moss: So
the next lesson I want to talk about

2
00:00:03.130 --> 00:00:04.900
is going to be our last exercise here.

3
00:00:04.900 --> 00:00:06.330
It's going to be authentication.

4
00:00:06.330 --> 00:00:07.010
This one is really cool.

5
00:00:07.010 --> 00:00:09.000
I really like authentication
in GraphQL because it's like,

6
00:00:10.150 --> 00:00:11.610
you can literally do whatever you want.

7
00:00:11.610 --> 00:00:13.320
It's ridiculous, I love it.

8
00:00:13.320 --> 00:00:16.809
There are many ways to auth, so many ways.

9
00:00:18.718 --> 00:00:20.520
&gt;&gt; Scott Moss: There is not a wrong way.

10
00:00:20.520 --> 00:00:23.070
So, basically, here are some of
the ways that you can log or

11
00:00:23.070 --> 00:00:25.550
some of the ways that you can
authenticate with GraphQL.

12
00:00:25.550 --> 00:00:30.140
One is you can lockdown the entire
API by checking the authentication

13
00:00:30.140 --> 00:00:34.130
outside of GraphQL or
when creating a context object.

14
00:00:34.130 --> 00:00:35.650
What does that mean?

15
00:00:35.650 --> 00:00:39.490
Well, basically outside of GraphQL.

16
00:00:39.490 --> 00:00:42.190
Okay, so
let me show you an example of that.

17
00:00:42.190 --> 00:00:46.984
So right now, the only application we
have on our server is an ApolloServer,

18
00:00:46.984 --> 00:00:51.189
but let's say that we had an express
application that had some other

19
00:00:51.189 --> 00:00:52.098
routes on it.

20
00:00:52.098 --> 00:00:56.320
And then for slash GraphQL we
mounted an ApolloServer there.

21
00:00:56.320 --> 00:01:00.300
That means we could just authenticate
before the ApolloServer even executes,

22
00:01:00.300 --> 00:01:02.320
on some middleware before that, and

23
00:01:02.320 --> 00:01:05.140
that way we're authenticating
before GraphQL even boots up.

24
00:01:05.140 --> 00:01:09.490
Before the request even gets to GraphQL,
we authenticate.

25
00:01:09.490 --> 00:01:11.300
So that's authenticating
outside of GraphQL.

26
00:01:11.300 --> 00:01:14.860
So you will lock down the entire
GraphQL path for authentication.

27
00:01:14.860 --> 00:01:15.530
And that's fine.

28
00:01:15.530 --> 00:01:18.890
If every single GraphQL request
that you're ever going to require

29
00:01:18.890 --> 00:01:21.290
needs authentication,
you could totally do that.

30
00:01:21.290 --> 00:01:25.960
The other way you can do that if you don't
have an express server and in our case

31
00:01:25.960 --> 00:01:29.890
it's just a server, Apollo, then you
can do that here in the context object.

32
00:01:29.890 --> 00:01:33.130
So in this context object you
can do asynchronous things, and

33
00:01:33.130 --> 00:01:34.380
you get the request object.

34
00:01:34.380 --> 00:01:37.030
This is the same request
object you get in express.

35
00:01:37.030 --> 00:01:38.010
You have access to that.

36
00:01:38.010 --> 00:01:41.210
So there are going to be headers,
authorization stuff, tokens,

37
00:01:41.210 --> 00:01:44.330
query strings, everything you need from
a request to see if they're authenticated.

38
00:01:44.330 --> 00:01:46.470
You can do authentication in here.

39
00:01:46.470 --> 00:01:49.840
And if you don't like what you see, you
can throw an error, and then no query or

40
00:01:49.840 --> 00:01:51.290
whatever execute.

41
00:01:51.290 --> 00:01:55.326
So you can do that here and you get the
same benefit of kinda doing it outside of

42
00:01:55.326 --> 00:01:58.482
GraphQL before any query,
before any resolver executes,

43
00:01:58.482 --> 00:02:02.350
you authenticate here, and
that's kind of what we're gonna do today.

44
00:02:03.840 --> 00:02:04.735
So that's one way.

45
00:02:08.256 --> 00:02:11.134
&gt;&gt; Scott Moss: You can also handle
the auth and the resolvers.

46
00:02:11.134 --> 00:02:14.916
You've just got to make sure that you
pass on to the context what you need so

47
00:02:14.916 --> 00:02:17.730
that the resolvers can
handle that authentication.

48
00:02:17.730 --> 00:02:20.410
For instance, if you're going to
handle auth and the resolvers and

49
00:02:20.410 --> 00:02:24.750
you know you need the header information,
then inside of this context object you

50
00:02:24.750 --> 00:02:27.550
might want to pass on
the request.headers authorization, or

51
00:02:27.550 --> 00:02:30.020
whatever you need to
authenticate to the resolvers.

52
00:02:30.020 --> 00:02:32.040
And then inside of your resolvers,

53
00:02:32.040 --> 00:02:35.680
every resolver that needs authentication
you would have to do it here.

54
00:02:35.680 --> 00:02:36.536
You would check here.

55
00:02:36.536 --> 00:02:41.140
If whatever, do this.

56
00:02:41.140 --> 00:02:42.100
So you can do that as well.

57
00:02:42.100 --> 00:02:43.410
We're gonna do a combination of both.

58
00:02:43.410 --> 00:02:44.820
We're gonna do something in the context.

59
00:02:44.820 --> 00:02:46.180
We're also gonna do
something in the resolvers.

60
00:02:47.990 --> 00:02:48.957
So, that's another way.

61
00:02:50.677 --> 00:02:54.362
&gt;&gt; Scott Moss: A third way which is really
fire or really hot, it's a new hipster

62
00:02:54.362 --> 00:02:59.290
thing, is to use custom directives
in your schema definition language.

63
00:02:59.290 --> 00:03:05.670
Well, we didn't talk about directives, but
directives are basically an enhancement.

64
00:03:05.670 --> 00:03:10.040
It's a way to send
metadata with your schema.

65
00:03:10.040 --> 00:03:13.560
So right now, we have these schemas that
define shape and structure and validation,

66
00:03:13.560 --> 00:03:14.452
and stuff like that.

67
00:03:14.452 --> 00:03:18.420
But if send some extra information
along with this field.

68
00:03:18.420 --> 00:03:21.400
Like for instance, I wanna add
something else to let the server or

69
00:03:21.400 --> 00:03:25.080
to let GraphQL know there's something
special about this name field,

70
00:03:25.080 --> 00:03:28.210
I wanna do something here, so
you can use what's called a direction.

71
00:03:28.210 --> 00:03:32.958
So I can say you have to make this but you
can use an auth directive assessment like

72
00:03:32.958 --> 00:03:38.450
auth and then you can say role has
to be admin or something like that.

73
00:03:38.450 --> 00:03:41.961
And then you have to go
implement this custom directive.

74
00:03:41.961 --> 00:03:43.650
Creating custom directives
is really advance.

75
00:03:43.650 --> 00:03:46.350
We are not going to talk about
creating custom directives.

76
00:03:46.350 --> 00:03:50.550
If anybody wants to know how to do them, I
can show you the path to that after we get

77
00:03:50.550 --> 00:03:52.590
done with everything, but
yeah you can do this.

78
00:03:52.590 --> 00:03:57.410
This allows you to lock down specific
fields that need authentication.

79
00:03:57.410 --> 00:03:59.550
Like, yeah you can get all this and
this and this, but

80
00:03:59.550 --> 00:04:02.910
you've got to be admin to get this field,
or you've got to be

81
00:04:02.910 --> 00:04:06.540
a member to get this field, or
you have to be whatever to get this field.

82
00:04:06.540 --> 00:04:09.310
So it locks fields down
which is really cool.

83
00:04:09.310 --> 00:04:11.860
You could do the same thing with
the previous approach where

84
00:04:11.860 --> 00:04:13.810
we were authenticating in resolvers.

85
00:04:13.810 --> 00:04:15.810
You can also lock down fields
this way as well, right?

86
00:04:15.810 --> 00:04:19.030
You just make a resolver for that field,
and then you check authentication inside

87
00:04:19.030 --> 00:04:21.500
of that field, and
you can lock down that field as well.

88
00:04:21.500 --> 00:04:24.920
So it's the same way, it's just this is
defined in the resolvers, the other way,

89
00:04:24.920 --> 00:04:27.070
it's defined on the schema,
but it does the same thing.

90
00:04:28.070 --> 00:04:32.130
You can also use resolver middleware,
and the reason I put it

91
00:04:32.130 --> 00:04:35.940
in some frameworks because not every
framework supports resolver middleware.

92
00:04:35.940 --> 00:04:36.800
It's relatively new.

93
00:04:36.800 --> 00:04:39.730
I think it's really cool, but
it's exactly what it sounds like.

94
00:04:39.730 --> 00:04:42.380
You can have a function that
runs before resolver and

95
00:04:42.380 --> 00:04:45.910
you have a function that runs after the
resolver, and that can be authentication.

96
00:04:45.910 --> 00:04:51.553
Only framework I know that supports
that right now Is GraphQL Yoga,

97
00:04:51.553 --> 00:04:54.030
yeah, that's a framework.

98
00:04:55.100 --> 00:04:58.130
GraphQL Yoga, which is basically like
the same thing as Apollo Server,

99
00:04:58.130 --> 00:05:01.780
it's just by another company called
Prisma, they support Middleware.

100
00:05:01.780 --> 00:05:06.420
So, if you wanna use Middleware for
authentication,

101
00:05:06.420 --> 00:05:07.590
you could use that as well.

102
00:05:07.590 --> 00:05:09.020
So those are some of the different ways,

103
00:05:09.020 --> 00:05:12.930
I can think of, doing authentication,
and there might even be more than that.

104
00:05:12.930 --> 00:05:15.510
But, as far as I know, those are some
of the ways you can do them.

105
00:05:15.510 --> 00:05:17.700
And they all have different tradeoffs,
like I told you.

106
00:05:17.700 --> 00:05:21.190
Doing it outside of GraphQL means
you lock down the whole API and

107
00:05:21.190 --> 00:05:22.620
everybody has to be authenticated.

108
00:05:22.620 --> 00:05:24.725
Which means you can never do sign up and

109
00:05:24.725 --> 00:05:27.710
sign-in through GraphQL because you
have to be authenticated to use,

110
00:05:27.710 --> 00:05:30.230
GraphQL and if you're signing up,
you're not authenticated.

111
00:05:31.310 --> 00:05:34.390
Handling the auth and the resolvers
gives you superior control but

112
00:05:34.390 --> 00:05:37.366
it can be very tedious if you have
a lot of resolvers to lock down.

113
00:05:37.366 --> 00:05:41.820
So, it's like I got to write this
logic everywhere and it builds up.

114
00:05:41.820 --> 00:05:44.841
If your logic is asynchronous you
have all these nested resolvers,

115
00:05:44.841 --> 00:05:47.180
you're checking the same
logic every single time.

116
00:05:47.180 --> 00:05:50.550
So it can build up,
it just adds more delay.

117
00:05:50.550 --> 00:05:53.950
Custom directives I would say is
probably one of the cleanest ways,

118
00:05:53.950 --> 00:05:55.900
you just have to keep
building custom directives so

119
00:05:55.900 --> 00:05:59.810
you just got to look into that
which is not the simplest task.

120
00:06:01.106 --> 00:06:03.270
Using Resolver middleware,
that's actually pretty easy but

121
00:06:03.270 --> 00:06:06.562
again it only works in certain frameworks,
I don't think Apollo Server supports it.

122
00:06:06.562 --> 00:06:09.033
But GraphQL Yoga does, so check that out.

123
00:06:09.033 --> 00:06:13.090
So yeah, those are some of the ways
that you can authenticate.

124
00:06:13.090 --> 00:06:16.075
Now what you do to choose
authenticate is up to you.

125
00:06:16.075 --> 00:06:17.910
You wanna use JSON web tokens,
that's fine.

126
00:06:17.910 --> 00:06:20.650
In this example,
because we're a public facing API for

127
00:06:20.650 --> 00:06:23.860
this e-commerce app,
we're gonna use API keys to authenticate.

128
00:06:23.860 --> 00:06:26.380
We won't have JSON web
tokens just an API key, and

129
00:06:26.380 --> 00:06:30.790
we're gonna use that to authenticate, and
then also to identify who the user is, and

130
00:06:30.790 --> 00:06:34.990
then also authorize if they're able to
do something depending on their role.

131
00:06:36.400 --> 00:06:39.370
So we're gonna do all three,
authorization, authentication and

132
00:06:39.370 --> 00:06:41.120
identification with API keys.

133
00:06:41.120 --> 00:06:42.480
And you're gonna implement that.

