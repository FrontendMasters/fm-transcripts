WEBVTT

1
00:00:00.260 --> 00:00:01.435
&gt;&gt; Scott Moss: On the REST course,

2
00:00:01.435 --> 00:00:05.181
we use something called insomnia
to interact with our REST API.

3
00:00:05.181 --> 00:00:07.210
That also supports GraphQL,
and it's really good.

4
00:00:07.210 --> 00:00:09.473
But there's a better
tool that I like to use.

5
00:00:09.473 --> 00:00:11.960
It's called GraphQL Playground.

6
00:00:11.960 --> 00:00:14.356
And luckily for us,
Apollo Server has it built in for us.

7
00:00:14.356 --> 00:00:17.459
All we have to do is just go to our
browser and type in this URL, and

8
00:00:17.459 --> 00:00:20.410
it'll open up a nice Playground
with documentation for us.

9
00:00:20.410 --> 00:00:21.672
So I'm going ahead and do that.

10
00:00:21.672 --> 00:00:26.490
And you can see here this
application just loaded up for us.

11
00:00:26.490 --> 00:00:28.650
So Apollo Server created this for us.

12
00:00:28.650 --> 00:00:29.728
I didn't make this.

13
00:00:29.728 --> 00:00:32.452
It's called GraphQL playground,
it's really cool.

14
00:00:32.452 --> 00:00:35.667
There's other tools like it,
call like graphical and stuff like that.

15
00:00:35.667 --> 00:00:39.020
But it loaded it up,
it has our URL here for our API.

16
00:00:39.020 --> 00:00:43.130
And let's just check out a couple
things here, let me bump this file so

17
00:00:43.130 --> 00:00:45.089
we can check it out a little more.

18
00:00:45.089 --> 00:00:48.460
If I click on this schema tab here,
here's my schema.

19
00:00:48.460 --> 00:00:51.602
There's a query called myCat.

20
00:00:51.602 --> 00:00:58.020
And if I look at it, it resolves to
a type called Cat, whose name is string.

21
00:00:58.020 --> 00:01:01.015
This is the only thing I can do in this
API, is I can do a query for myCat.

22
00:01:01.015 --> 00:01:03.809
That's it, I can't do anything
else because that's all I defined.

23
00:01:04.900 --> 00:01:07.839
So now what I do is I can is I can
issue a query to try to get a cat.

24
00:01:07.839 --> 00:01:11.000
So over here in the left,
I'm gonna go ahead and write a query.

25
00:01:11.000 --> 00:01:13.375
And this is what clients will
do to interact with your API,

26
00:01:13.375 --> 00:01:15.365
they're going to write queries and
mutations.

27
00:01:15.365 --> 00:01:20.325
So you have the server side of GraphQL
which is where you create schemas and

28
00:01:20.325 --> 00:01:21.360
resolvers.

29
00:01:21.360 --> 00:01:26.634
But then you have the client side
GraphQL where you issue queries.

30
00:01:26.634 --> 00:01:29.410
So over here, I'm gonna go
ahead write a query for my cat.

31
00:01:30.440 --> 00:01:32.498
I'm just gonna use the shorthand method so

32
00:01:32.498 --> 00:01:34.967
I can just open up these
object brackets like this.

33
00:01:34.967 --> 00:01:39.418
I can type in myCat and you can see
it's already autocompleting for

34
00:01:39.418 --> 00:01:40.848
me and you could see,

35
00:01:40.848 --> 00:01:45.900
I get an error that says myCat of type
cat must have a semi colon or subfield.

36
00:01:45.900 --> 00:01:48.994
The reason it is saying that is
because the cat type is an object and

37
00:01:48.994 --> 00:01:52.553
you have to ask for some fields otherwise
it doesn't know what to give you.

38
00:01:52.553 --> 00:01:54.909
And there's only one field on cat and
it's called name.

39
00:01:54.909 --> 00:01:58.175
So it's freaking out because
this returns an object so

40
00:01:58.175 --> 00:01:59.950
what fields do you want on it.

41
00:01:59.950 --> 00:02:03.030
Okay, cool, I want to get the name field.

42
00:02:03.030 --> 00:02:04.795
You can see it's auto completing for
me right now.

43
00:02:04.795 --> 00:02:08.534
So we'll go ahead and get the name
field here, and I'll go ahead and

44
00:02:08.534 --> 00:02:09.524
hit run and boom.

45
00:02:09.524 --> 00:02:15.430
I get back this response that says
data followed by myCat and then name.

46
00:02:15.430 --> 00:02:16.812
So a couple things to look at here.

47
00:02:16.812 --> 00:02:20.400
Data, GraphQL always returns
a data property, if there's data.

48
00:02:20.400 --> 00:02:24.018
If there's an error,
it'll return an error property, but for

49
00:02:24.018 --> 00:02:26.303
data it always returns a data property.

50
00:02:26.303 --> 00:02:30.123
And then the next property's gonna be
whatever the name of the query that you

51
00:02:30.123 --> 00:02:34.013
sent, in this case it's called myCat,
so that's why this is called myCat.

52
00:02:34.013 --> 00:02:36.429
And then it's gonna return
the fields that you asked for.

53
00:02:36.429 --> 00:02:40.940
In this case, I asked for the name field,
so it returned the name field, Garfield.

54
00:02:40.940 --> 00:02:42.627
But where did it get that from?

55
00:02:42.627 --> 00:02:47.850
Well, If we go back to our example,
it got that from our resolver.

56
00:02:47.850 --> 00:02:49.473
I said,
whenever someone does the myCat query,

57
00:02:49.473 --> 00:02:50.789
always return a name called Garfield.

58
00:02:52.550 --> 00:02:53.720
&gt;&gt; Scott Moss: So
that's where that came from.

59
00:02:53.720 --> 00:02:58.910
So this resolver executed
because I asked for this query.

60
00:02:58.910 --> 00:03:00.045
And I asked for this query here.

