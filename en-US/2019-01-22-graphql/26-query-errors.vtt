WEBVTT

1
00:00:00.120 --> 00:00:05.120
&gt;&gt; Scott Moss: The other thing I wanna
show is I talked about throwing error,

2
00:00:05.120 --> 00:00:06.200
so let's say I throw an error in here.

3
00:00:09.796 --> 00:00:14.686
&gt;&gt; Scott Moss: Throw new Error, oop.

4
00:00:14.686 --> 00:00:21.050
So if I say that,
&gt;&gt; Scott Moss: Let this refresh, run this.

5
00:00:22.110 --> 00:00:24.320
You can see that instead of
getting back a data property,

6
00:00:24.320 --> 00:00:25.590
I get back an error property.

7
00:00:25.590 --> 00:00:26.910
The data property is null.

8
00:00:26.910 --> 00:00:28.590
So it gets nulled out completely.

9
00:00:29.600 --> 00:00:33.120
Then you get back an errors property with
an array of the errors that were thrown.

10
00:00:34.330 --> 00:00:36.010
So you can see I got
the error message I had,

11
00:00:36.010 --> 00:00:39.450
it puts the location where it was,
what path it was on.

12
00:00:39.450 --> 00:00:43.090
So in this case, I tried to execute
the cat query so that's where it happened.

13
00:00:43.090 --> 00:00:47.030
And then this is Apollo doing some
of its stuff, where it tries to

14
00:00:47.030 --> 00:00:49.410
give you a nice error code so
you can figure out what's happening.

15
00:00:49.410 --> 00:00:53.820
And then maybe some not so public stuff
you wanna show, like the stack trace.

16
00:00:53.820 --> 00:00:57.190
So you could wrap all of this and get rid
of it if you like by formatting the error,

17
00:00:57.190 --> 00:00:58.820
but this is what happens.

18
00:00:58.820 --> 00:01:02.275
But if you were to look at the status code
of this in like a browser or whatever,

19
00:01:02.275 --> 00:01:03.296
it's still a 200.

20
00:01:04.817 --> 00:01:06.550
&gt;&gt; Scott Moss: You always
gonna get back in 200.

21
00:01:06.550 --> 00:01:10.830
Unless your server, if your server craps
out then that's not Express, I'm sorry,

22
00:01:10.830 --> 00:01:12.260
that's not Apollo, that's not GraphQL,

23
00:01:12.260 --> 00:01:15.410
that's just your server,
that's outside of GraphQL.

24
00:01:15.410 --> 00:01:18.040
But inside of GraphQL,
it's always gonna be a 200,

25
00:01:18.040 --> 00:01:20.170
it's always gonna select these errors.

26
00:01:20.170 --> 00:01:23.160
Sometimes you might have a state
when you get back data and

27
00:01:23.160 --> 00:01:24.520
you get back errors at the same time.

28
00:01:25.840 --> 00:01:30.104
That can possibly happen when you
start doing this nested data.

29
00:01:30.104 --> 00:01:32.170
And somewhere down here
there might be an error but

30
00:01:32.170 --> 00:01:34.070
everything else resolved up here.

31
00:01:34.070 --> 00:01:36.290
So there's special cases
where that would happen,

32
00:01:38.110 --> 00:01:41.230
where you might have some data that
came back in some of that error.

33
00:01:41.230 --> 00:01:44.505
But that's only because you might have
designed your scheme in a way where it's

34
00:01:44.505 --> 00:01:46.020
non-restrictive.

35
00:01:46.020 --> 00:01:49.040
To allow some data to come and
some data not to come, and

36
00:01:49.040 --> 00:01:50.340
because of that you ran into that problem.

37
00:01:50.340 --> 00:01:53.460
So that's why it's important to figure
out if you need to put non nolar or

38
00:01:53.460 --> 00:01:54.700
not non nolar on your data.

