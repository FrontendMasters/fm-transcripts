WEBVTT

1
00:00:00.330 --> 00:00:03.020
&gt;&gt; Scott Moss: Yes.
&gt;&gt; Student: Where does this GQL

2
00:00:03.020 --> 00:00:04.330
file get used?

3
00:00:05.740 --> 00:00:06.240
&gt;&gt; Scott Moss: Good question.

4
00:00:06.240 --> 00:00:09.110
So other than the test
where I'm testing it,

5
00:00:09.110 --> 00:00:11.710
actually I'll just walk you through
how I'm using it in the test and

6
00:00:11.710 --> 00:00:13.720
I'll walk you through how it's
being used in the server.

7
00:00:13.720 --> 00:00:17.580
Okay, so
in the test the way it's being used is

8
00:00:17.580 --> 00:00:22.580
that I'm actually using that, when we
started this, I walked you through this

9
00:00:22.580 --> 00:00:26.990
loadTypeSchema function in utils that
takes a string and it loads up a schema.

10
00:00:26.990 --> 00:00:30.530
So it's loading it up,
which just returns a string.

11
00:00:30.530 --> 00:00:32.790
So I take that string, and
I take all the other schemas, and

12
00:00:32.790 --> 00:00:35.960
I merge them together just
to create one big string.

13
00:00:35.960 --> 00:00:40.560
And then I use this also in
the talk that I gave I said

14
00:00:40.560 --> 00:00:43.960
you can convert schema definition
language to many different things.

15
00:00:43.960 --> 00:00:47.150
AST's, objects, so
that's basically what I'm doing.

16
00:00:47.150 --> 00:00:49.670
I'm taking that schema string
that I merged together and

17
00:00:49.670 --> 00:00:51.300
I'm creating an object out of it.

18
00:00:51.300 --> 00:00:53.280
And it gives me back the schema object.

19
00:00:53.280 --> 00:00:56.700
And the schema object allows me
to like Loop over the types and

20
00:00:56.700 --> 00:00:58.730
see their names and
their fields and their properties.

21
00:00:58.730 --> 00:01:00.000
So that's why I'm checking the test.

22
00:01:00.000 --> 00:01:04.531
I'm literally converting that string into
an object that I can loop over and test.

23
00:01:04.531 --> 00:01:06.110
So that's what's happening in the test.

24
00:01:06.110 --> 00:01:09.850
In the server,
how that's being used is you go to server

25
00:01:09.850 --> 00:01:13.740
js you can see that I'm
using load schema again.

26
00:01:13.740 --> 00:01:19.520
And I'm going to load up all of the types
called product, coupon, and user here.

27
00:01:19.520 --> 00:01:22.360
So I'm gonna load them up here,
which creates just one big string of

28
00:01:22.360 --> 00:01:26.740
all those schemas, and
then I pass them on to Apollo Server here.

29
00:01:26.740 --> 00:01:27.830
So that's where they're being used.

30
00:01:28.920 --> 00:01:32.358
Good question, any other questions?

31
00:01:36.822 --> 00:01:37.992
&gt;&gt; Scott Moss: No, yes.

32
00:01:37.992 --> 00:01:41.807
&gt;&gt; Student2: So
in rest you have for updates and

33
00:01:41.807 --> 00:01:46.420
creates, you can return no contents.

34
00:01:46.420 --> 00:01:46.940
&gt;&gt; Scott Moss: Yeah.

35
00:01:46.940 --> 00:01:49.110
&gt;&gt; Student2: Here you're
requiring returning.

36
00:01:49.110 --> 00:01:50.051
&gt;&gt; Scott Moss: Yeah.
&gt;&gt; Student2: Can you change

37
00:01:50.051 --> 00:01:50.724
that to-
&gt;&gt; Scott Moss: Yep,

38
00:01:50.724 --> 00:01:51.540
you could do whatever you want.

39
00:01:51.540 --> 00:01:54.242
&gt;&gt; Student2: Is there a reason
why you're returning it?

40
00:01:54.242 --> 00:01:58.430
At least, is there a reason why
you're requiring that you return it?

41
00:01:58.430 --> 00:01:59.250
&gt;&gt; Scott Moss: No, there's no reason.

42
00:01:59.250 --> 00:02:02.660
Because it's really gonna be depending
on who is consuming it, right.

43
00:02:02.660 --> 00:02:08.170
I would say because this API's meant to
be a public API used by other developers,

44
00:02:08.170 --> 00:02:10.390
I'm just gonna give them back as
much information as they want.

45
00:02:10.390 --> 00:02:13.200
Well let's say this is an internal
API where your front end

46
00:02:13.200 --> 00:02:15.070
doesn't really need anything
after you delete something.

47
00:02:15.070 --> 00:02:18.370
Then you don't need to return anything and
you don't need to make it required.

48
00:02:18.370 --> 00:02:22.070
The reason I make it
required is because if

49
00:02:22.070 --> 00:02:26.570
in my resolver I do a remove product and
nothing comes back from the database

50
00:02:26.570 --> 00:02:29.770
this means this ID you gave
me didn't find something.

51
00:02:29.770 --> 00:02:32.170
So if I make it required,
I know you found something and

52
00:02:32.170 --> 00:02:34.820
you removed it, whereas if it
wasn't required, that means you

53
00:02:34.820 --> 00:02:38.540
possible could not have found something,
and you're not giving anything back.

54
00:02:38.540 --> 00:02:41.470
So I don't know if you didn't give me
anything back because you don't have to or

55
00:02:41.470 --> 00:02:44.190
you didn't give me anything back
because I didn't get to read it.

56
00:02:44.190 --> 00:02:45.190
So I don't know what the case is.

57
00:02:45.190 --> 00:02:47.260
So that's why I made it required.

58
00:02:47.260 --> 00:02:50.730
That why I know you deleted it but if your
front end or your client doesn't need

59
00:02:50.730 --> 00:02:54.830
a response back from a update or remove
then you don't have to put anything here.

60
00:02:54.830 --> 00:02:57.691
There is actually a lot of articles
written about what do we do on GraphQL

61
00:02:57.691 --> 00:03:00.791
imitations, do we send stuff back or
not and the answer is just like wow, what

62
00:03:00.791 --> 00:03:03.915
are you doing on the front end, it really
depends on what you are doing there.

63
00:03:03.915 --> 00:03:05.729
&gt;&gt; Student2: You could send back email,
maybe.

64
00:03:06.850 --> 00:03:10.992
&gt;&gt; Scott Moss: Yeah, it really depends on
like so Apollo has a front end client that

65
00:03:10.992 --> 00:03:15.356
also keeps track of this data based
on the operations that you perform,

66
00:03:15.356 --> 00:03:16.973
the queries you perform.

67
00:03:16.973 --> 00:03:19.601
And it requires these objects to
come back so it can update them on

68
00:03:19.601 --> 00:03:22.569
the memory on the front, so that's
another reason why I sent them back,

69
00:03:22.569 --> 00:03:25.920
because i'm not suppose to use
Apollo on the front of them.

70
00:03:25.920 --> 00:03:26.750
&gt;&gt; Student2: And then these IDs.

71
00:03:26.750 --> 00:03:28.780
So the client would have to know the IDs.

72
00:03:28.780 --> 00:03:30.110
How are they getting those IDs?

73
00:03:30.110 --> 00:03:31.010
&gt;&gt; Scott Moss: And
that's what he was saying.

74
00:03:31.010 --> 00:03:36.196
So he was like, in the real world,
you have to add a ID type here like this.

75
00:03:36.196 --> 00:03:37.470
And I was like yeah, you do.

76
00:03:37.470 --> 00:03:39.550
Cuz otherwise how would you get an ID?

77
00:03:39.550 --> 00:03:40.830
So you have to add an ID type here.

78
00:03:40.830 --> 00:03:44.038
And these IDs will be the same IDs
that come from your mongoose model.

79
00:03:45.070 --> 00:03:45.570
Yep.

80
00:03:46.660 --> 00:03:47.740
&gt;&gt; Student3: And
also you were talking about,

81
00:03:47.740 --> 00:03:52.060
everything comes as a data but
you can send back status.

82
00:03:52.060 --> 00:03:54.490
I'm sure the status is also
could be coming back right?

83
00:03:55.610 --> 00:03:58.624
&gt;&gt; Scott Moss: The status is
always gonna be 200 from GraphQL.

84
00:03:58.624 --> 00:04:01.820
&gt;&gt; Student3: Okay there's no status
that like other things that you can send

85
00:04:01.820 --> 00:04:03.090
beside data, bug?

86
00:04:04.300 --> 00:04:07.380
&gt;&gt; Scott Moss: GraphQL, you're gonna find
as soon as if there's an error in your

87
00:04:07.380 --> 00:04:09.480
resolver or
if there's an error in your schema,

88
00:04:09.480 --> 00:04:13.400
it'll just send back, instead of
that details and like that errors.

89
00:04:13.400 --> 00:04:16.080
Gonna be in an array of all the errors
that happen whether they were validation

90
00:04:16.080 --> 00:04:17.980
errors or errors in your resolver.

91
00:04:17.980 --> 00:04:19.020
They'll send all those back too.

92
00:04:19.020 --> 00:04:20.630
&gt;&gt; Student: I've seen that already.

93
00:04:20.630 --> 00:04:21.787
&gt;&gt; Scott Moss: Yeah,
you probably seen it already.

94
00:04:21.787 --> 00:04:22.640
&gt;&gt; Student: [LAUGH]
&gt;&gt; Scott Moss: Yeah, so if you made

95
00:04:22.640 --> 00:04:24.186
a schema that wasn't correct,
you'll see that.

96
00:04:24.186 --> 00:04:27.060
And then Apollo allows
you to tie into that and

97
00:04:27.060 --> 00:04:28.820
format those errors to
be whatever you want.

98
00:04:28.820 --> 00:04:32.390
So you can say, all right, don't send
back stack traces to the front end.

99
00:04:32.390 --> 00:04:34.770
Let me format it or
let me put a different message here or

100
00:04:34.770 --> 00:04:36.950
stuff like that so
you can format those errors.

101
00:04:36.950 --> 00:04:42.630
Okay, what is a good way to decide on when
to use the non null operator like string

102
00:04:42.630 --> 00:04:47.060
Non null is just a matter of if you can
guarantee that you return that field.

103
00:04:47.060 --> 00:04:49.480
I say a good time to do that is one,

104
00:04:49.480 --> 00:04:51.150
if your database is saying
it's gonna be there.

105
00:04:51.150 --> 00:04:54.560
So for instance,
our database says on the product schema

106
00:04:54.560 --> 00:04:57.980
that a name is definitely required and
it has to be there.

107
00:04:57.980 --> 00:04:59.740
So because the database
says it has to be there,

108
00:04:59.740 --> 00:05:01.500
I could be sure that it
should always be there.

109
00:05:01.500 --> 00:05:04.580
So my GraphQL schema's also gonna
say that it should be there.

110
00:05:04.580 --> 00:05:06.510
So that's why I'm gonna do that.

111
00:05:06.510 --> 00:05:07.770
The other time is like yeah,

112
00:05:07.770 --> 00:05:11.350
pretty much if you can guarantee that it's
gonna be there and it should be there.

113
00:05:11.350 --> 00:05:12.610
Then yes, you should put a bang.

114
00:05:12.610 --> 00:05:17.170
If you can't guarantee that it's gonna
be there for instance like description.

115
00:05:17.170 --> 00:05:20.530
Description is not required, you may be or
maybe not add a description for

116
00:05:20.530 --> 00:05:21.280
this product.

117
00:05:21.280 --> 00:05:24.750
Well in that case I won't put a bang
there because It won't be there.

118
00:05:24.750 --> 00:05:29.200
Unless inside the graph cure resolver I
decide to add a default description for

119
00:05:29.200 --> 00:05:30.860
every single one that doesn't have one.

120
00:05:30.860 --> 00:05:33.550
Then I would make it required
because I default to it anyway.

121
00:05:33.550 --> 00:05:35.750
So I can virtualize that myself.

122
00:05:35.750 --> 00:05:38.690
So you can see a lot of
similarities between

123
00:05:38.690 --> 00:05:42.270
validating on the database level versus
validating on the GraphQL level.

124
00:05:42.270 --> 00:05:46.560
But you could piggyback off of what your
database is doing by default with GraphQL,

125
00:05:46.560 --> 00:05:49.970
and if not you can add validations
later inside your resolvers.

