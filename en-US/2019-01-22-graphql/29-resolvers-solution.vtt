WEBVTT

1
00:00:00.370 --> 00:00:02.480
&gt;&gt; Scott Moss: All right, so welcome back.

2
00:00:02.480 --> 00:00:06.270
Hopefully, everybody had enough time
to get all those excess to turn to

3
00:00:06.270 --> 00:00:07.240
green checks.

4
00:00:07.240 --> 00:00:08.632
Let's just walk through some
of these solution here.

5
00:00:08.632 --> 00:00:11.740
So I already have in my
solutions the products queries.

6
00:00:11.740 --> 00:00:15.628
So I'm gonna go ahead and finish
the product query and get that going.

7
00:00:15.628 --> 00:00:20.749
So I'll say, const product = I
know it's gonna take an arg for

8
00:00:20.749 --> 00:00:24.920
and ID cuz that's how you get one,
as I takes an ID.

9
00:00:24.920 --> 00:00:29.604
So I'll just return
Product.findByid(args.id).

10
00:00:29.604 --> 00:00:37.924
And the reason I know there's a args.id
there without having to look at the test,

11
00:00:37.924 --> 00:00:43.450
is because that's what
the query says right here.

12
00:00:43.450 --> 00:00:45.110
It's got to be an ID.

13
00:00:45.110 --> 00:00:48.590
And if that ID was not passed,
this resolver would not even run,

14
00:00:48.590 --> 00:00:51.660
it would error out because
this ID is required.

15
00:00:51.660 --> 00:00:55.500
Now if I got rid of that and
ID was not required, then that ID may or

16
00:00:55.500 --> 00:00:57.080
may not be there.

17
00:00:57.080 --> 00:01:00.990
But because this is required,
if that ID is not passed in the query,

18
00:01:00.990 --> 00:01:02.780
then the resolvers won't even execute.

19
00:01:02.780 --> 00:01:05.660
So the resolvers are guaranteed to
have that argument, every single time.

20
00:01:06.790 --> 00:01:08.150
So that's why I know it's there.

21
00:01:08.150 --> 00:01:09.610
I'm fairly confident.

22
00:01:09.610 --> 00:01:14.140
So args.id and then we'll just

23
00:01:14.140 --> 00:01:18.993
do .lean .exec
&gt;&gt; Scott Moss: .lean

24
00:01:18.993 --> 00:01:21.940
just converts it to JSON and
not a Mongoose document.

25
00:01:23.951 --> 00:01:25.890
&gt;&gt; Scott Moss: You don't have to do this,
but yeah.

26
00:01:27.370 --> 00:01:32.990
So we got products, we'll add product down
here to our query because it is a Query.

27
00:01:32.990 --> 00:01:36.360
And we know that because it's a Query
here, and it's the same name,

28
00:01:36.360 --> 00:01:41.010
product product, same name,
so we'll run that test.

29
00:01:50.696 --> 00:01:53.210
&gt;&gt; Scott Moss: Cool,
looks like that one passes.

30
00:01:53.210 --> 00:01:59.776
So now we have a new product mutation,
so I'll say newProduct,

31
00:01:59.776 --> 00:02:05.503
giving it the same name as I
see down here, newProduct.

32
00:02:05.503 --> 00:02:09.318
And I know cuz I'm creating something,
there definitely has to be args there, so

33
00:02:09.318 --> 00:02:12.290
I'm gonna go ahead and accept those args.

34
00:02:12.290 --> 00:02:17.848
And if I just go look at
the product model right quick,

35
00:02:17.848 --> 00:02:22.330
so these args should be
passed up with our input.

36
00:02:22.330 --> 00:02:25.310
So if we go look at NewProductInput,

37
00:02:25.310 --> 00:02:28.360
the resolver should concern
themselves with what's happening.

38
00:02:28.360 --> 00:02:31.400
But just for you as a sanity check,
you can see that we got name,

39
00:02:31.400 --> 00:02:33.260
we got price, we got image.

40
00:02:35.150 --> 00:02:38.000
We got type, we got description,
which is optional,

41
00:02:38.000 --> 00:02:42.870
we got liquidCooled, which is optional,
bikeType, which is optional.

42
00:02:42.870 --> 00:02:45.660
We got all that stuff, but
then there's just createdBy, and

43
00:02:45.660 --> 00:02:47.650
createdBy is not on the NewProductInput.

44
00:02:47.650 --> 00:02:49.150
So I'll show you how you
can get around that for

45
00:02:49.150 --> 00:02:52.490
now until we get to authentication.

46
00:02:52.490 --> 00:02:56.110
So for a newProduct,
we're gonna go ahead and

47
00:02:56.110 --> 00:03:01.824
we're gonna say return Product.create.

48
00:03:03.810 --> 00:03:05.543
And we're gonna go ahead and pass in.

49
00:03:05.543 --> 00:03:08.853
We are gonna spread an object,
and we're gonna say args.input.

50
00:03:08.853 --> 00:03:11.886
And I know it is input because
if I go look at newProduct,

51
00:03:11.886 --> 00:03:14.460
it's a variable called input.

52
00:03:14.460 --> 00:03:17.540
And its value is gonna be this
NewProductInput which is required.

53
00:03:17.540 --> 00:03:21.440
And if I go look at NewProductInput,
it's an object type with these fields.

54
00:03:21.440 --> 00:03:24.480
So I know this is an object, and
I know it's there cuz it's required.

55
00:03:24.480 --> 00:03:28.200
So then I know it's called input, so
GraphQL query, save the day again.

56
00:03:28.200 --> 00:03:29.380
I know exactly what's happening.

57
00:03:29.380 --> 00:03:30.930
I know exactly what's coming.

58
00:03:30.930 --> 00:03:31.960
And then for the createdBy,

59
00:03:31.960 --> 00:03:35.270
because you can't create a product
without createdBy because it's required.

60
00:03:35.270 --> 00:03:39.100
If you were to look at the context object,

61
00:03:39.100 --> 00:03:41.320
I'm passing in a user in
the context object in the test.

62
00:03:41.320 --> 00:03:43.140
You can use that if you want to.

63
00:03:43.140 --> 00:03:46.400
You could also just make a fake id
right click and satisfy the test.

64
00:03:46.400 --> 00:03:47.080
It's totally up to you.

65
00:03:47.080 --> 00:03:53.650
I am just going to go ahead and
use the context object here,

66
00:03:53.650 --> 00:03:59.562
and I am gonna say
createdBy: = CTX.user._id.

67
00:03:59.562 --> 00:04:03.700
Which if I go look at the test here,
product resolvers,

68
00:04:03.700 --> 00:04:09.740
or,
&gt;&gt; Scott Moss: Inside of newProduct,

69
00:04:09.740 --> 00:04:14.088
I can see that, yeah,
there's a user._id and

70
00:04:14.088 --> 00:04:18.341
its values a ObjectId,
so I'm using that one.

71
00:04:18.341 --> 00:04:21.500
And we'll get more into that
one against authentication.

72
00:04:21.500 --> 00:04:22.550
But again, if you didn't look at that,

73
00:04:22.550 --> 00:04:25.360
then you could have just
mocked it out with ObjectId.

74
00:04:25.360 --> 00:04:28.778
If you got really frustrated, you could
have just went into the model and

75
00:04:28.778 --> 00:04:31.990
took off required true on creative i and
it still would have worked.

76
00:04:31.990 --> 00:04:34.262
So it's up to you.

77
00:04:34.262 --> 00:04:37.170
So you got newProduct, the last thing we
need to do is register it as a mutation.

78
00:04:37.170 --> 00:04:38.224
So we'll say newProduct.

79
00:04:38.224 --> 00:04:46.095
Boom, got that,
make sure the names match, newProduct.

80
00:04:48.199 --> 00:04:51.070
&gt;&gt; Scott Moss: newProduct,
looks good, so we'll run a test.

81
00:05:01.464 --> 00:05:02.940
&gt;&gt; Scott Moss: Cool, so that passes.

82
00:05:02.940 --> 00:05:04.230
So now we'll do update product.

83
00:05:08.170 --> 00:05:11.490
&gt;&gt; Scott Moss: And
I know updates definitely gonna take args,

84
00:05:11.490 --> 00:05:13.460
cuz what are you updating?

85
00:05:13.460 --> 00:05:17.140
So I'm definitely gonna accept those args,
and

86
00:05:18.180 --> 00:05:20.780
if I go look at update, it takes two args.

87
00:05:20.780 --> 00:05:23.610
So it takes an ID,
which is a required ID type and

88
00:05:23.610 --> 00:05:27.070
an input, which is a required
UpdateProductInput type.

89
00:05:27.070 --> 00:05:30.480
Okay, cool, then I'll just use those two
arguments, and that's exactly what I need.

90
00:05:30.480 --> 00:05:32.250
I need an ID to find the thing
that I wanna update,

91
00:05:32.250 --> 00:05:35.370
and then I have the input,
which is the actual update itself.

92
00:05:35.370 --> 00:05:43.989
Perfect, that's all I need,
return Product.findByIdAndUpdate.

93
00:05:46.090 --> 00:05:48.760
And I'll pass in args.id as the ID,
first argument.

94
00:05:48.760 --> 00:05:52.210
The second argument is
args.input as the update.

95
00:05:52.210 --> 00:05:56.145
And then the third argument,
I'm just gonna pass in the option for

96
00:05:56.145 --> 00:05:59.900
new: true, which if you don't know
what that means, that basically means

97
00:06:00.920 --> 00:06:05.290
I want the return value of this query to
be the product after I update it, and

98
00:06:05.290 --> 00:06:07.850
not the product before I update it,
which is the default.

99
00:06:07.850 --> 00:06:10.140
So I definitely want
the post update product.

100
00:06:10.140 --> 00:06:13.100
So I'll just lean this,
which turns it into JSON, and

101
00:06:13.100 --> 00:06:16.630
then execute this, which means I'm
done and return a real promise.

102
00:06:19.150 --> 00:06:23.960
And then we'll add
updateProduct to a mutation.

103
00:06:27.830 --> 00:06:28.712
And run the test.

104
00:06:36.259 --> 00:06:39.820
&gt;&gt; Scott Moss: So
that passed the UpdateProductTest.

105
00:06:39.820 --> 00:06:42.152
So the next thing we have
is the remove product test.

106
00:06:42.152 --> 00:06:48.620
So we'll come here and
say const removeProduct.

107
00:06:48.620 --> 00:06:50.580
And I know for
sure by looking at my query,

108
00:06:50.580 --> 00:06:52.910
that it takes an ID to remove a product.

109
00:06:52.910 --> 00:06:59.919
So I'll say args and I'll just return

110
00:06:59.919 --> 00:07:09.919
Product.findByIdAndRemove(args.id.lean().-
exec

111
00:07:11.316 --> 00:07:15.050
and that's it.

112
00:07:15.050 --> 00:07:15.930
Now I've removed my product.

113
00:07:17.860 --> 00:07:20.710
So then I'll go ahead and
add that to the mutation.

114
00:07:23.020 --> 00:07:25.659
Bam, rerun the tests.

115
00:07:32.828 --> 00:07:36.135
&gt;&gt; Scott Moss: And the last one that we
have to do is product created by gets

116
00:07:36.135 --> 00:07:36.920
resolves.

117
00:07:36.920 --> 00:07:41.680
Okay, so we want to resolve
the createdBy field on a product.

118
00:07:41.680 --> 00:07:45.760
So if we look at product, it has
a createdBy field And it's typed as user.

119
00:07:45.760 --> 00:07:47.540
So that means it's an object type.

120
00:07:47.540 --> 00:07:52.469
We have to resolve that type because
by default in the database, it's an ID.

121
00:07:52.469 --> 00:07:55.110
We wanna turn that ID into a user object.

122
00:07:55.110 --> 00:07:59.740
So basically, if you go look at
the product model, you can see that

123
00:07:59.740 --> 00:08:04.690
the createdBy is a ObjectId
type that's referencing a user.

124
00:08:04.690 --> 00:08:07.104
So we need to create for
the user based on this ID.

125
00:08:07.104 --> 00:08:10.764
And traditionally, what you would do
is you would just use use Mongoose's

126
00:08:10.764 --> 00:08:13.395
population, which is
basically like a joint table.

127
00:08:13.395 --> 00:08:16.223
It's like, given this ID,
let me find the user.

128
00:08:16.223 --> 00:08:19.819
But the reason why it's hard to do
that here in GraphQL because where

129
00:08:19.819 --> 00:08:21.510
do you do that?

130
00:08:21.510 --> 00:08:23.860
You don't know if they're even asking for
these.

131
00:08:23.860 --> 00:08:27.221
The only way you would be able to know to
do that is if you look at the info object.

132
00:08:27.221 --> 00:08:30.699
So if you look at the info object on
Product, if you look at the info object

133
00:08:30.699 --> 00:08:33.621
on products, then you can see
that they ask for a createdBy.

134
00:08:33.621 --> 00:08:35.358
And then you can say, okay, go ahead and

135
00:08:35.358 --> 00:08:37.850
populate that createdBy
field to be a user.

136
00:08:37.850 --> 00:08:40.355
But looking at the info
objects is really tough, so

137
00:08:40.355 --> 00:08:44.080
you're better off just letting GraphQL do
its job and just write a resolver for it.

138
00:08:44.080 --> 00:08:45.330
That's all you gotta do.

139
00:08:45.330 --> 00:08:47.280
So in this case we'll say,
okay, it's cool.

140
00:08:47.280 --> 00:08:49.690
So in this case to resolve
the createdBy field,

141
00:08:49.690 --> 00:08:53.865
we'll come down to the Product resolver
cuz it's gonna be Product.createdBy.

142
00:08:53.865 --> 00:08:58.560
We'll write a resolver for
the createdBy field, like this.

143
00:09:00.860 --> 00:09:07.780
And because this resolver is gonna be ran
after the product resolver is executed,

144
00:09:07.780 --> 00:09:12.120
that means it's first argument is gonna
be whatever the query before it returned.

145
00:09:12.120 --> 00:09:14.620
So in this case if we
go look at our queries,

146
00:09:18.330 --> 00:09:22.770
every single mutation in Query
always returns a product.

147
00:09:22.770 --> 00:09:25.720
There's a product here, there's
a product here, there's a product here,

148
00:09:25.720 --> 00:09:27.760
there's a product here, and
there's a product here.

149
00:09:27.760 --> 00:09:31.696
So that means, every single possible
value before createdBy there's always

150
00:09:31.696 --> 00:09:33.090
gonna be a product.

151
00:09:33.090 --> 00:09:33.800
It's always gonna be this.

152
00:09:33.800 --> 00:09:36.420
So it means the first argument's
always gonna be your product that

153
00:09:36.420 --> 00:09:37.020
came out a Mongo.

154
00:09:39.850 --> 00:09:42.160
Cuz this createdBy belongs
to the product type.

155
00:09:42.160 --> 00:09:46.880
So the object that was resolved before
it is always gonna be a product.

156
00:09:46.880 --> 00:09:50.530
It belongs to the product field or
the product type.

157
00:09:50.530 --> 00:09:52.990
And every single one of these
resolves a product type.

158
00:09:54.700 --> 00:09:57.640
So this is pretty much guaranteed,
this is always gonna be a product object.

159
00:09:57.640 --> 00:10:00.970
This is always gonna be something that's
returned from here, something that's

160
00:10:00.970 --> 00:10:03.930
returned from here, something
that's returned from here or here.

161
00:10:03.930 --> 00:10:05.305
It's always a product.

162
00:10:05.305 --> 00:10:12.245
So knowing that, that it's always
a product, I can go ahead and just return

163
00:10:12.245 --> 00:10:18.116
User.findById(product.createdby).lean().e-
xec.

164
00:10:18.116 --> 00:10:23.257
And that will find a user by

165
00:10:23.257 --> 00:10:29.580
the products createdBy field.

