WEBVTT

1
00:00:00.210 --> 00:00:05.172
&gt;&gt; Scott Moss: Hopefully everybody have
enough time to lock down those resolvers

2
00:00:05.172 --> 00:00:07.304
using our authentication.

3
00:00:07.304 --> 00:00:09.625
So let's just go ahead and
get started with that.

4
00:00:09.625 --> 00:00:13.720
So, first thing you wanna do
is head over to Server and

5
00:00:13.720 --> 00:00:18.461
we want to use the authenticate
function from the utils auth.

6
00:00:18.461 --> 00:00:24.655
Pass a request and hopefully get
a user back, so what am gonna do is,

7
00:00:24.655 --> 00:00:30.091
I'm gonna say,
const user = authenticate method here and

8
00:00:30.091 --> 00:00:35.001
I'm gonna pass the entire
request object like this.

9
00:00:35.001 --> 00:00:36.582
Let me go ahead and import that.

10
00:00:42.746 --> 00:00:48.434
&gt;&gt; Scott Moss: From util/auth
as the authenticate method.

11
00:00:48.434 --> 00:00:50.652
There we go.

12
00:00:50.652 --> 00:00:53.470
So once we got that,
we can go back down here.

13
00:00:53.470 --> 00:00:54.560
Authenticate is async,

14
00:00:54.560 --> 00:00:58.620
so we'll put an await here and
we'll make this context async, like that.

15
00:00:59.620 --> 00:01:04.390
And then we'll just replace the null
with whatever authenticate returns.

16
00:01:04.390 --> 00:01:05.840
So there we go.

17
00:01:05.840 --> 00:01:10.770
Now, we're authenticating the user
based on the request which,

18
00:01:10.770 --> 00:01:14.020
if you look at the authenticated method,
it's just looking for an API key.

19
00:01:14.020 --> 00:01:18.050
If it does find an API key, it finds
the user associated with that API key.

20
00:01:18.050 --> 00:01:21.170
Since it is a public API
we're using API keys.

21
00:01:21.170 --> 00:01:26.050
So we have that, the next thing is to
go ahead and lock down our resolvers.

22
00:01:26.050 --> 00:01:30.950
So the test and the task we're asking
that you lock down the queries,

23
00:01:30.950 --> 00:01:33.410
so in this case product and products, so

24
00:01:33.410 --> 00:01:38.830
that they do not allow requests
that come in that don't have users.

25
00:01:38.830 --> 00:01:42.750
So basically because we created
that context object that has a user

26
00:01:42.750 --> 00:01:45.660
property on it we could check
the context object here.

27
00:01:45.660 --> 00:01:50.430
So if not context dot user, and
that's because the authenticate

28
00:01:50.430 --> 00:01:54.430
function will just return undefined or
null if it didn't find a user,

29
00:01:54.430 --> 00:01:59.050
we can safely check, we safely know
there is no user in the context object.

30
00:01:59.050 --> 00:02:00.910
Then you're not authenticated.

31
00:02:00.910 --> 00:02:05.140
So then we'll just throw a new
authentication error like that.

32
00:02:07.030 --> 00:02:09.868
And the products query is
very much the same thing so

33
00:02:09.868 --> 00:02:13.170
we can just paste that there and
then we'll run some tests.

34
00:02:24.305 --> 00:02:28.442
&gt;&gt; Scott Moss: So if we look at our test
here, looks like we got the product and

35
00:02:28.442 --> 00:02:31.170
the products query working fine.

36
00:02:31.170 --> 00:02:34.504
The next thing we have to update
the mutations to not only look for

37
00:02:34.504 --> 00:02:38.920
the user not being there but also making
sure that the user has the right role.

38
00:02:38.920 --> 00:02:42.240
So we're authenticating and
we're authorizing at the same time.

39
00:02:42.240 --> 00:02:44.992
So what we can do is go to
the user products here.

40
00:02:44.992 --> 00:02:51.329
You see there's a note here says,
use fake id here to create the ObjectId.

41
00:02:51.329 --> 00:02:56.008
And that's just because that was
there before we had to authenticate.

42
00:02:56.008 --> 00:02:57.837
But when you authenticate you're
going to have to change this because

43
00:02:57.837 --> 00:02:58.620
there's a test for it.

44
00:02:58.620 --> 00:02:59.580
So if you didn't run into that,

45
00:02:59.580 --> 00:03:01.100
if you didn't get to that test yet
then you'll see.

46
00:03:02.260 --> 00:03:05.700
So for the new product basically
what we want to do is,

47
00:03:05.700 --> 00:03:08.249
actually I'll just leave that fake one
there for now until we fix that test.

48
00:03:10.060 --> 00:03:13.020
We wanna go ahead and
check for not a user, right?

49
00:03:13.020 --> 00:03:18.260
But we also wanna make sure or
if the user is there,

50
00:03:20.690 --> 00:03:24.600
what the role, and there's a .role for
a couple of reasons.

51
00:03:24.600 --> 00:03:27.950
If you go, one, if you look at the user

52
00:03:29.100 --> 00:03:34.240
Model there is a .role here
which is a type of string.

53
00:03:34.240 --> 00:03:37.780
And it's a enum of either a member or
an admin.

54
00:03:37.780 --> 00:03:41.030
So it can be a member or
an admin and it's required.

55
00:03:41.030 --> 00:03:41.830
So we know that's there.

56
00:03:42.990 --> 00:03:49.122
So if the ctx role.user does not
equal the admin role which you can

57
00:03:49.122 --> 00:03:55.607
get from up top right here,
it's already imported for you, roles.

58
00:03:55.607 --> 00:03:58.650
Which is like a constant
object that has it.

59
00:03:58.650 --> 00:04:02.733
So if it's not roles dot admin,
then we also want to throw an error.

60
00:04:02.733 --> 00:04:06.510
&gt;&gt; Speaker 2: [INAUDIBLE]
&gt;&gt; Scott Moss: Yeah, sorry, yeah.

61
00:04:06.510 --> 00:04:07.010
There we go.

62
00:04:08.700 --> 00:04:12.290
So ctx.user.role does
not equal roles.admin.

63
00:04:12.290 --> 00:04:14.490
So we do the same thing for
all the mutations that we have.

64
00:04:15.530 --> 00:04:19.560
And we'll go down to updateProduct,
we'll put that there.

65
00:04:19.560 --> 00:04:22.730
And we'll go down to removeProduct and
we'll put that there.

66
00:04:22.730 --> 00:04:23.230
We'll run the tests.

67
00:04:30.457 --> 00:04:35.746
&gt;&gt; Scott Moss: Cool, so looks like, let me
see, that's the file, I'm having a Mongo

68
00:04:35.746 --> 00:04:41.068
error here with the typology being
this short so I'm gonna run it again.

69
00:04:47.280 --> 00:04:49.810
&gt;&gt; Scott Moss: Okay,
Mongo is just freaking out here.

70
00:04:49.810 --> 00:04:53.190
So I will fix the last one and see if
that corrects the Mongo issue I'm having.

71
00:04:53.190 --> 00:04:58.000
I saw some other people having this
issue with Mongo but basically Mongo is

72
00:04:58.000 --> 00:05:03.100
being disconnected while it's doing an
operation so it's like a race condition.

73
00:05:03.100 --> 00:05:04.530
So we'll fix the last test,

74
00:05:04.530 --> 00:05:09.720
which was newProduct users,
the auth user for createdBy.

75
00:05:09.720 --> 00:05:10.400
So I'll do that.

76
00:05:12.460 --> 00:05:16.040
So newProduct uses the auth user for
the createdBy,

77
00:05:16.040 --> 00:05:17.230
right now we're using this fake one.

78
00:05:17.230 --> 00:05:23.230
So we'll replace that with a real
one from the authenticated user,

79
00:05:23.230 --> 00:05:26.185
which will be ctx.user._ID.

80
00:05:26.185 --> 00:05:33.290
So we'll replace that,
run the test and boom.

81
00:05:33.290 --> 00:05:36.820
That fixed all the tests so
everything's working now.

82
00:05:36.820 --> 00:05:38.160
Who got all the tests to pass?

83
00:05:39.460 --> 00:05:40.480
Nice, we got a couple.

84
00:05:40.480 --> 00:05:41.520
Who was really close?

85
00:05:42.780 --> 00:05:44.740
Really close?
All right, that's what I'm talking about.

86
00:05:44.740 --> 00:05:48.010
I think it's pretty cool to have
flexible authentication using GraphQL.

87
00:05:48.010 --> 00:05:51.410
I mean, you could authenticate only
field level which is kinda ridiculous.

88
00:05:51.410 --> 00:05:52.630
I really like that.

89
00:05:52.630 --> 00:05:55.572
And you can abstract away so
many different things, different roles.

90
00:05:55.572 --> 00:05:59.047
If you're like a B to B multi tenant app,
this is amazing because you can have so

91
00:05:59.047 --> 00:06:02.105
many restrictions and different
roles on different pieces of data,

92
00:06:02.105 --> 00:06:03.600
it's kinda crazy.

93
00:06:03.600 --> 00:06:04.253
So I really like it.

94
00:06:04.253 --> 00:06:09.838
Anything else?

95
00:06:09.838 --> 00:06:12.631
&gt;&gt; Speaker 2: Can you go back
to the server.js just once?

96
00:06:12.631 --> 00:06:13.860
&gt;&gt; Scott Moss: I sure can.

97
00:06:13.860 --> 00:06:16.800
Server JS right here.

98
00:06:16.800 --> 00:06:19.350
So this authenticate
function is asynchronous.

99
00:06:19.350 --> 00:06:22.570
It takes a request object which is
is given to us by the context object

100
00:06:22.570 --> 00:06:23.750
from Apollo Server.

101
00:06:23.750 --> 00:06:25.844
And then we pass our request object.

102
00:06:25.844 --> 00:06:30.560
Its asynchronous, so basically what
authenticate does is it looks for

103
00:06:30.560 --> 00:06:33.240
an authorization header for an API key.

104
00:06:33.240 --> 00:06:35.533
If there is no API key it
just returns undefined.

105
00:06:35.533 --> 00:06:38.243
If there is an API key, it looks for
a user with that key and then

106
00:06:38.243 --> 00:06:41.910
returns whatever the data base returns,
which will be either a user or undefined.

107
00:06:41.910 --> 00:06:45.190
So that means user will always
be a user or undefined,

108
00:06:45.190 --> 00:06:47.270
and then we just pass that along.

109
00:06:47.270 --> 00:06:50.330
So whatever object we return here,
that's what's gonna be the context for

110
00:06:50.330 --> 00:06:51.330
all of our resolvers.

111
00:06:51.330 --> 00:06:52.287
So if I put something else here.

112
00:06:55.352 --> 00:06:58.510
&gt;&gt; Scott Moss: That's
gonna be on context.data.

113
00:06:58.510 --> 00:07:01.215
So this object is whatever,
it's what the context is gonna be, and

114
00:07:01.215 --> 00:07:02.646
that's why it's called context.

