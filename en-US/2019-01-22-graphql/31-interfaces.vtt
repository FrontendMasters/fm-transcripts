WEBVTT

1
00:00:00.150 --> 00:00:03.840
&gt;&gt; Scott Moss: We'll go over to our next
lesson which is gonna be Interfaces,

2
00:00:03.840 --> 00:00:05.280
Unions, and Fragments.

3
00:00:05.280 --> 00:00:06.870
This one is really cool,
I really like this one.

4
00:00:08.660 --> 00:00:14.650
Yeah, so interfaces, basically, they
are inheritable types for your schema.

5
00:00:14.650 --> 00:00:16.660
So far, we've made types,
we made a product type.

6
00:00:16.660 --> 00:00:18.120
There were some other types in there.

7
00:00:18.120 --> 00:00:20.020
But what if you have types
that are very similar,

8
00:00:20.020 --> 00:00:24.940
they have very similar fields but
some are slightly different?

9
00:00:24.940 --> 00:00:25.690
That's an interface.

10
00:00:25.690 --> 00:00:28.339
If you ever use typescript or
any type check language,

11
00:00:28.339 --> 00:00:30.016
they have a constant interfaces.

12
00:00:30.016 --> 00:00:32.995
This is the exact same thing but
for GraphQL.

13
00:00:32.995 --> 00:00:37.190
So we can create interfaces for
our similar types.

14
00:00:37.190 --> 00:00:40.630
So some types are very similar with
the exception of a few fields.

15
00:00:40.630 --> 00:00:43.250
You can use the interface
as a base type and

16
00:00:43.250 --> 00:00:47.640
have other types implement that interface
just like a language type system.

17
00:00:47.640 --> 00:00:50.070
So what am I actually talking about?

18
00:00:50.070 --> 00:00:53.190
Let's head over to our schema here,
let me get rid of this stuff.

19
00:00:53.190 --> 00:00:56.390
Basically, what I'm saying is you have
the ability to do something like this.

20
00:00:56.390 --> 00:01:00.210
You could say, instead of using the word
type, which we have been using, and

21
00:01:00.210 --> 00:01:03.499
the word input, which we have been using,
you can use the word interface.

22
00:01:05.650 --> 00:01:06.570
And then you can give it a name.

23
00:01:06.570 --> 00:01:12.530
So I can call this interface a animal,
and I can give it fields.

24
00:01:12.530 --> 00:01:17.846
I can say animal has a species,
which is like a string.

25
00:01:17.846 --> 00:01:23.427
And then like a location,
which is a string, right?

26
00:01:23.427 --> 00:01:26.370
And they're both required, or not null.

27
00:01:26.370 --> 00:01:27.280
So I have interface.

28
00:01:27.280 --> 00:01:29.930
Now, interface is exactly like a type.

29
00:01:29.930 --> 00:01:32.150
It can be used in the same
place as types can be used.

30
00:01:32.150 --> 00:01:36.980
It's literally used as type with
the extra ability of the fact that

31
00:01:36.980 --> 00:01:39.610
it can be implemented in other types.

32
00:01:39.610 --> 00:01:45.176
So now that I have an animal and
I want to make a tiger type, I can say,

33
00:01:45.176 --> 00:01:52.469
type Tiger is going to implement
&gt;&gt; Scott Moss: The animal interface,

34
00:01:52.469 --> 00:01:53.170
like this.

35
00:01:54.480 --> 00:01:59.500
And then, I have to give it the exact same
fields with the exact same validations

36
00:01:59.500 --> 00:02:00.370
that the interface did.

37
00:02:00.370 --> 00:02:02.990
I wish they would do this for us,
but you have to put them here again,

38
00:02:02.990 --> 00:02:04.690
you have to duplicate them.

39
00:02:04.690 --> 00:02:08.190
I know, it's like, why won't you just let,
if I'm implementing the animal,

40
00:02:08.190 --> 00:02:09.850
then of course I want those.

41
00:02:09.850 --> 00:02:12.650
But no, you still have to put them again,
it's very explicit.

42
00:02:12.650 --> 00:02:15.780
And then now, you can add all the other
stuff, like how many stripes do you have?

43
00:02:17.060 --> 00:02:20.111
And then that's the difference, is that
it had stripes, and the animal didn't.

44
00:02:20.111 --> 00:02:26.640
So unlike type systems,

45
00:02:26.640 --> 00:02:30.370
where it saves you time to do this, and
that's why you would do an interface,

46
00:02:30.370 --> 00:02:33.110
this doesn't save you time because you
still have to copy all the fields over.

47
00:02:33.110 --> 00:02:34.850
So why would you do this?

48
00:02:34.850 --> 00:02:40.310
Well, this is basically great when you

49
00:02:41.500 --> 00:02:47.720
have a request where you want,
let me think of a good example.

50
00:02:47.720 --> 00:02:51.950
So for in this case with a animal, if we
have a request where we wanna get all

51
00:02:51.950 --> 00:02:54.300
the animals for the zoo, and
we wanna do it in one query,

52
00:02:54.300 --> 00:02:57.910
like just give me all the animals,
this is where we would make an interface.

53
00:02:57.910 --> 00:03:02.531
Cuz I don't wanna make a query for
a tiger and a giraffe and a lion.

54
00:03:02.531 --> 00:03:04.270
I just want give me all the animals, but

55
00:03:04.270 --> 00:03:06.770
they all have slightly
different properties on them.

56
00:03:06.770 --> 00:03:08.390
So this is why you would make this.

57
00:03:08.390 --> 00:03:11.760
But the only problem is

58
00:03:12.870 --> 00:03:16.780
if you're asking for all animals and
it's sending you back animals, but

59
00:03:16.780 --> 00:03:23.260
then in that query you ask for stripes,
but it a lion doesn't have stripes,

60
00:03:23.260 --> 00:03:25.020
it doesn't have the property stripes,
then GraphicQL will break.

61
00:03:25.020 --> 00:03:28.160
So they have to create another way for
you to get around that, and

62
00:03:28.160 --> 00:03:29.840
that's were fragments come in.

63
00:03:29.840 --> 00:03:33.490
So you didn't have to use the fragments
in your request query to conditionally

64
00:03:33.490 --> 00:03:36.490
ask for the type of the specific fields.

65
00:03:36.490 --> 00:03:41.560
So in this case, what I'm talking about,
let's just go to,

66
00:03:41.560 --> 00:03:42.990
I'll do a live example here.

67
00:03:42.990 --> 00:03:44.660
Let's go back to server.

68
00:03:44.660 --> 00:03:46.040
It's been working out pretty good for us.

69
00:03:47.210 --> 00:03:49.500
I'll get rid of this, get rid of this.

70
00:03:51.050 --> 00:03:55.186
So in this case, let's do that type
animal again, or interface animal.

71
00:03:58.032 --> 00:04:02.680
&gt;&gt; Scott Moss: Interface animal,
species, as a string.

72
00:04:02.680 --> 00:04:09.053
And then I'll make it type
Tiger that implements

73
00:04:12.911 --> 00:04:16.116
&gt;&gt; Scott Moss: An animal.

74
00:04:16.116 --> 00:04:18.750
And then it has to have the species
there exactly the same.

75
00:04:18.750 --> 00:04:21.335
I'll actually make that like that.

76
00:04:23.821 --> 00:04:24.670
&gt;&gt; Scott Moss: So we got that.

77
00:04:24.670 --> 00:04:28.876
And then it just has stripes,
stripeCount or whatever.

78
00:04:28.876 --> 00:04:30.200
That's gonna be a Int.

79
00:04:31.360 --> 00:04:32.300
Cool, so we got that.

80
00:04:32.300 --> 00:04:39.310
And then I'm gonna say type
Lion implements animal.

81
00:04:41.757 --> 00:04:45.934
&gt;&gt; Scott Moss: And it too has to
have a species exactly the same.

82
00:04:45.934 --> 00:04:50.472
And then I will say mainColor.

83
00:04:56.164 --> 00:05:02.672
&gt;&gt; Scott Moss: Cool, so if I do that,
I have some resolvers here.

84
00:05:02.672 --> 00:05:03.673
Let's make a query.

85
00:05:06.319 --> 00:05:11.117
&gt;&gt; Scott Moss: Type query,
and I will say animals.

86
00:05:11.117 --> 00:05:15.610
And so, I'll get back in array of animals,
like that.

87
00:05:15.610 --> 00:05:17.040
There we go.

88
00:05:17.040 --> 00:05:20.255
Get rid of that mutation, and then we'll
just go ahead and make the query here.

89
00:05:22.990 --> 00:05:24.142
&gt;&gt; Scott Moss: For animals.

90
00:05:25.735 --> 00:05:28.670
&gt;&gt; Scott Moss: There we go, and we're
just gonna return an array of animals.

91
00:05:30.290 --> 00:05:34.130
So if I return an array of animals here
which have just an object with a species

92
00:05:34.130 --> 00:05:39.440
on it, so I'll do that, species, tiger.

93
00:05:41.120 --> 00:05:46.450
And then, we'll make another one for
species lion, okay?

94
00:05:46.450 --> 00:05:47.180
So we'll start there.

95
00:05:49.344 --> 00:05:50.668
&gt;&gt; Scott Moss: So let's start the server.

96
00:06:04.391 --> 00:06:05.530
&gt;&gt; Scott Moss: Got it, comma.

97
00:06:06.690 --> 00:06:08.258
There we go.
I forgot that comma.

98
00:06:14.152 --> 00:06:15.584
&gt;&gt; Scott Moss: What we got here?

99
00:06:15.584 --> 00:06:17.322
Did I fat finger something?

100
00:06:17.322 --> 00:06:17.952
Yeah, animal.

101
00:06:17.952 --> 00:06:20.069
There we go.

102
00:06:20.069 --> 00:06:21.404
See, it's very strict.

103
00:06:24.102 --> 00:06:26.267
&gt;&gt; Scott Moss: Okay, so
now that that's running, and

104
00:06:26.267 --> 00:06:28.120
you can see we get this error here.

105
00:06:28.120 --> 00:06:29.730
It's not a error,
it's more like a warning.

106
00:06:29.730 --> 00:06:32.180
And this is what we're gonna talk about,
how to fix this later,

107
00:06:32.180 --> 00:06:34.100
but don't worry about that right now.

108
00:06:34.100 --> 00:06:39.230
So if I head back over to our thing here,
let's look at my schema.

109
00:06:39.230 --> 00:06:40.350
I got animals here.

110
00:06:40.350 --> 00:06:42.720
So what I'll do is I'll say, cool.

111
00:06:42.720 --> 00:06:45.770
Give me animals and then give me species.

112
00:06:45.770 --> 00:06:48.800
So I'll run that, and
then boom, I get an error here.

113
00:06:48.800 --> 00:06:52.666
Abstract type animal must resolve
to an object type at a run time for

114
00:06:52.666 --> 00:06:55.647
field query dot animals
with value species tiger.

115
00:06:55.647 --> 00:06:56.740
Receive undefined.

116
00:06:56.740 --> 00:07:00.470
Basically, what that's saying is
because if we look at our query

117
00:07:02.590 --> 00:07:06.570
here for animals,
it's returning an animal interface.

118
00:07:06.570 --> 00:07:08.630
That's what GraphicQL just said, an error.

119
00:07:08.630 --> 00:07:10.310
So that's an abstract type.

120
00:07:10.310 --> 00:07:14.330
So it is a type, but it's an abstract,
you can't really query on it.

121
00:07:14.330 --> 00:07:16.490
This needs to resolve to
a full type eventually.

122
00:07:16.490 --> 00:07:19.410
We need to know what type of
animal you're asking for.

123
00:07:19.410 --> 00:07:21.329
So in order to do that,

124
00:07:21.329 --> 00:07:25.810
you have to add a resolve
&gt;&gt; Scott Moss: Type.

125
00:07:25.810 --> 00:07:28.120
And that's what was in
that product thing before.

126
00:07:28.120 --> 00:07:31.880
So underscore underscore resolve Type
on the type that you need to resolve.

127
00:07:31.880 --> 00:07:36.150
So in this case,
we'd say on the animal type or

128
00:07:36.150 --> 00:07:39.796
animal interface, we need to
underscore underscore resolve the type.

129
00:07:40.810 --> 00:07:42.770
That's gonna receive the animal
as the first argument.

130
00:07:42.770 --> 00:07:44.960
And then given that,

131
00:07:44.960 --> 00:07:49.770
you need to return the string of the name
of the type that's being asked for.

132
00:07:49.770 --> 00:07:52.020
So is it a tiger or is it a lion?

133
00:07:52.020 --> 00:07:54.140
So given an animal,

134
00:07:54.140 --> 00:07:58.430
which is an animal with a species on it,
how do you know what type is it?

135
00:07:58.430 --> 00:08:03.810
Well, if you look at the data, I'm just
putting the type here, so Tiger and Lion.

136
00:08:03.810 --> 00:08:05.420
So all I gotta do is just
return the species name.

137
00:08:05.420 --> 00:08:09.100
So I'll just say return
animal dot species, and

138
00:08:09.100 --> 00:08:10.680
that's gonna tell me what type it is.

139
00:08:10.680 --> 00:08:13.380
It's either gonna be a Tiger or a Lion.

140
00:08:13.380 --> 00:08:16.730
And Tiger with a capital T and
Lion with a capital L

141
00:08:16.730 --> 00:08:20.176
matches the exact same names as Tiger
with a capital T in the type and

142
00:08:20.176 --> 00:08:25.260
Lion with a capital L
in the types up here.

143
00:08:25.260 --> 00:08:29.400
So what you have to return in the resolved
type is the name of the GraphicQL type

144
00:08:29.400 --> 00:08:31.720
that this interface is
supposed to be resolving to.

145
00:08:31.720 --> 00:08:34.395
And that's how it knows
which one to resolve to,

146
00:08:34.395 --> 00:08:37.090
cuz you have to create this resolve type.

147
00:08:37.090 --> 00:08:38.191
You're literally resolving the type.

148
00:08:40.968 --> 00:08:43.883
&gt;&gt; Scott Moss: So I'll put something
like gorilla here, and then there's no

149
00:08:43.883 --> 00:08:47.690
gorilla here, it's gonna be like what's
that, that's not a real type, okay?

150
00:08:48.860 --> 00:08:53.368
So now that we have that,
if we go back and we try to do this again,

151
00:08:53.368 --> 00:08:57.056
you can see I get back species Tiger,
species Lion.

152
00:08:57.056 --> 00:08:58.369
So that solved one problem.

153
00:08:58.369 --> 00:09:03.760
But I wanna get the stripes of the tiger.

154
00:09:03.760 --> 00:09:05.558
But you see as I type in
stripes it's not showing up.

155
00:09:05.558 --> 00:09:06.550
It's like that's not even real.

156
00:09:06.550 --> 00:09:13.320
But I know tigers have stripes
according to my schema, stripe count.

157
00:09:13.320 --> 00:09:15.040
So how do I get that?

158
00:09:15.040 --> 00:09:16.310
That's where fragments come in.

159
00:09:16.310 --> 00:09:21.189
So we can do these what's called inline
fragment in your query where it's dot

160
00:09:21.189 --> 00:09:22.777
dot dot, and you use on.

161
00:09:24.044 --> 00:09:25.210
&gt;&gt; Scott Moss: And
then you put the name of the type.

162
00:09:25.210 --> 00:09:26.770
In this case on a lion.

163
00:09:26.770 --> 00:09:34.184
So when this is a lion,
give me the main color.

164
00:09:37.934 --> 00:09:41.570
&gt;&gt; Scott Moss: On a tiger,
give me the stripe count.

165
00:09:43.100 --> 00:09:46.268
I know main is not spelled that way,
but whatever.

166
00:09:48.131 --> 00:09:49.091
&gt;&gt; Scott Moss: Yeah.

167
00:09:49.091 --> 00:09:52.990
[LAUGH] So if we run that it's
not notable because I didn't

168
00:09:52.990 --> 00:09:57.636
return anything obviously in my resolver,
so it's freaking out.

169
00:09:57.636 --> 00:09:59.377
So I gotta add this stuff here, right?

170
00:09:59.377 --> 00:10:03.930
Like stripeCount: 2, and

171
00:10:03.930 --> 00:10:09.057
then mainColor: 'yellow'.

172
00:10:09.057 --> 00:10:12.297
Save that, let that rebuild.

173
00:10:14.478 --> 00:10:18.304
&gt;&gt; Scott Moss: And if we go back,
run that, and then boom, there we go.

174
00:10:18.304 --> 00:10:21.280
You can see, it comes back as just
those objects with a species and

175
00:10:21.280 --> 00:10:23.980
then the different fields that they have.

176
00:10:23.980 --> 00:10:26.620
So as someone querying your API,
it's their job to do this.

177
00:10:26.620 --> 00:10:27.990
It's not your job on a server to do this.

178
00:10:27.990 --> 00:10:30.120
You don't have to worry about this.

179
00:10:30.120 --> 00:10:34.120
You just need to worry
about resolving the type.

180
00:10:34.120 --> 00:10:34.918
That's it.

181
00:10:36.787 --> 00:10:38.937
&gt;&gt; Scott Moss: And
that's how interfaces work.

182
00:10:38.937 --> 00:10:41.110
So they're really cool.

183
00:10:41.110 --> 00:10:42.710
Allow you to do stuff like this.

