WEBVTT

1
00:00:00.540 --> 00:00:04.037
&gt;&gt; Speaker 1: All right, so for
this performance and page jank one,

2
00:00:04.037 --> 00:00:08.154
it's pretty easy to kind of identify
just by looking at the app.

3
00:00:08.154 --> 00:00:10.649
You make a bunch of these,
they start moving really slowly.

4
00:00:10.649 --> 00:00:14.319
Whereas when you start off,
they are nice and smooth.

5
00:00:14.319 --> 00:00:18.470
So it's pretty easy to tell, I mean,
we're doing a lot of work here, right?

6
00:00:18.470 --> 00:00:19.423
We have all these different things.

7
00:00:19.423 --> 00:00:23.107
We add 50, then we have 60 different
things we're trying to animate and

8
00:00:23.107 --> 00:00:23.732
all that.

9
00:00:23.732 --> 00:00:28.386
But I think what's interesting is to take
a deeper dive through the performance

10
00:00:28.386 --> 00:00:32.345
panel and just seeing,
what's going on what is really expensive?

11
00:00:32.345 --> 00:00:35.490
What could be done to improve
in those kind of things.

12
00:00:35.490 --> 00:00:37.465
So yeah, one thing we can do,

13
00:00:37.465 --> 00:00:41.590
we can make a bunch of Ms.,
we can go to the performance.

14
00:00:41.590 --> 00:00:44.076
Do a little recording,
maybe just a second, and then stop it.

15
00:00:44.076 --> 00:00:47.560
And yeah, so
we can kind of see like hear, basically,

16
00:00:47.560 --> 00:00:50.420
the CPU is kind of maxed
out the whole time.

17
00:00:50.420 --> 00:00:53.340
What interesting is, it's doing kind
of a big combination of stuff, right?

18
00:00:53.340 --> 00:00:56.100
It's doing a lot of JavaScript,
a lot of rendering and

19
00:00:56.100 --> 00:01:00.000
a lot of painting, whereas sometimes you
see it's just a lot of JavaScript code or

20
00:01:00.000 --> 00:01:02.770
in the one where we were
demoing all those green boxes.

21
00:01:02.770 --> 00:01:04.580
It didn't even have to render anything,

22
00:01:04.580 --> 00:01:07.590
it was just repainting as
you were scrolling, right?

23
00:01:07.590 --> 00:01:12.016
So this one's doing a lot of work on both
ends, and just to illustrate an example,

24
00:01:12.016 --> 00:01:15.431
if the speed were to get really bad and
you were to run a profile.

25
00:01:15.431 --> 00:01:18.370
So I'll just kind of re-record one.

26
00:01:18.370 --> 00:01:21.742
You would actually start getting
all of these big red things, right?

27
00:01:21.742 --> 00:01:24.709
And these red things are up
here in the timeline, but

28
00:01:24.709 --> 00:01:27.830
they're also on specific
request animation frames.

29
00:01:27.830 --> 00:01:31.611
And these are Chrome, dev tool way of
telling you like for sure, page jank.

30
00:01:31.611 --> 00:01:34.904
We're dropping frames,
there's too much work to be done.

31
00:01:34.904 --> 00:01:37.739
So when it gets really terrible,
you'll be able to see them in red.

32
00:01:37.739 --> 00:01:41.292
But even otherwise, I mean,
if you can see them on the site,

33
00:01:41.292 --> 00:01:42.973
that's a really good sign.

34
00:01:42.973 --> 00:01:47.008
So kind of like looking in again with
the green and the purple, the painting and

35
00:01:47.008 --> 00:01:47.873
the rendering.

36
00:01:47.873 --> 00:01:52.165
We don't have control over how
Google Chrome paints or renders, but

37
00:01:52.165 --> 00:01:56.460
we do have control over what it
renders and when with our JavaScript.

38
00:01:56.460 --> 00:02:00.319
So at the end of the day, we never really
dive too deep into the composites.

39
00:02:00.319 --> 00:02:02.770
We dive into the code that
right before them, right?

40
00:02:02.770 --> 00:02:05.970
So it's like well, we had to do all this
work and something in here happened.

41
00:02:05.970 --> 00:02:10.177
So you can pretty quickly, and
I think this is something to keep in mind.

42
00:02:10.177 --> 00:02:12.130
These are pretty overwhelming pages.

43
00:02:12.130 --> 00:02:15.495
But if you were to see this site for
the very first time and somebody's like,

44
00:02:15.495 --> 00:02:16.768
this is super slow, right?

45
00:02:16.768 --> 00:02:18.807
And you're like yeah, it is really slow.

46
00:02:18.807 --> 00:02:23.450
Within a few seconds, you can at least pin
it down to a specific function, right?

47
00:02:23.450 --> 00:02:25.038
You have like add JavaScript.

48
00:02:25.038 --> 00:02:26.935
We can see, this is really slow.

49
00:02:26.935 --> 00:02:28.700
It's these composites.

50
00:02:28.700 --> 00:02:29.874
Here's the yellow before it.

51
00:02:29.874 --> 00:02:32.774
We find the last wired one
like we've been doing and

52
00:02:32.774 --> 00:02:35.650
we click on here,
at least we're in the zone.

53
00:02:35.650 --> 00:02:36.510
I feel like that's a big win, right?

54
00:02:36.510 --> 00:02:39.100
We know what part of the code
base is causing that problem.

55
00:02:39.100 --> 00:02:41.250
We can start diving in from there.

56
00:02:41.250 --> 00:02:43.810
On top of that, so
it's like this move function.

57
00:02:43.810 --> 00:02:44.584
So on top of that,

58
00:02:44.584 --> 00:02:47.696
you get this really nice timing stuff
that we had talked about earlier.

59
00:02:47.696 --> 00:02:51.020
So whenever Chrome does a performance
audit, you get all these timing things.

60
00:02:51.020 --> 00:02:54.024
So we can see pretty much right away,
by far and

61
00:02:54.024 --> 00:02:58.360
away what the most expensive thing is,
right, which is this check here.

62
00:02:58.360 --> 00:03:01.868
It's like this if the current
logo is offset top is ==0.

63
00:03:01.868 --> 00:03:06.618
And what's kinda going on here is like
what we talked about back in the layout

64
00:03:06.618 --> 00:03:10.517
threshing, right, where it's like
this move function get called a lot.

65
00:03:10.517 --> 00:03:13.467
Every time that all these
things need to move, but

66
00:03:13.467 --> 00:03:16.712
what we're doing here that's
problematic is that we are.

67
00:03:16.712 --> 00:03:20.901
Every time it gets called,
we go through all these different things,

68
00:03:20.901 --> 00:03:23.741
and the first thing we do
is we start setting, or

69
00:03:23.741 --> 00:03:28.220
we start reading and then immediately
writing to this offsetTop, right?

70
00:03:28.220 --> 00:03:32.007
So it's like when you're doing that,
you're thrashing the layout.

71
00:03:32.007 --> 00:03:35.050
Additionally, we can see that
just as these things get big.

72
00:03:35.050 --> 00:03:37.570
There's a part of this that's
just it's a lot of work, right?

73
00:03:37.570 --> 00:03:41.198
As you have a big list of things that are
animating that you're trying to measure,

74
00:03:41.198 --> 00:03:44.721
there's an unavoidable reality to just
there's a lot that you're trying to do,

75
00:03:44.721 --> 00:03:47.058
can you animate less of them or
something like that.

76
00:03:47.058 --> 00:03:51.377
But the thing that we're really seeing is
this layout thrashing is happening, right?

77
00:03:51.377 --> 00:03:54.277
So what happens is we
read the layout here,

78
00:03:54.277 --> 00:03:57.527
so we're getting all these things from it,
then here and

79
00:03:57.527 --> 00:04:02.300
this happens every single time for
every icon, we set a style attribute.

80
00:04:02.300 --> 00:04:04.260
When we set that style attribute,

81
00:04:04.260 --> 00:04:07.240
it throws out all those
cached values on offset top.

82
00:04:07.240 --> 00:04:09.140
I can't know what those are anymore,
right?

83
00:04:09.140 --> 00:04:12.352
So if you have something absolute 00 and

84
00:04:12.352 --> 00:04:15.486
you grab offsetTop,
it's gonna be 0, right?

85
00:04:15.486 --> 00:04:16.966
And then you say, well, style top ten.

86
00:04:16.966 --> 00:04:21.013
It's gonna throw out all the caches it
has, cuz now the thing is moved, and

87
00:04:21.013 --> 00:04:23.727
it needs to know where it
ended up in the dom again.

88
00:04:23.727 --> 00:04:28.335
So even just as an ordering thing, if we
could just do all of our writes before or

89
00:04:28.335 --> 00:04:32.381
after we do all of our reads, it would
just be a lot more efficient, right?

90
00:04:32.381 --> 00:04:35.576
Because what's happening here
is we do a read, we do a write,

91
00:04:35.576 --> 00:04:37.155
then we do more reads.

92
00:04:37.155 --> 00:04:40.830
Cuz then here, again, we need to
see if it's equal to this or this.

93
00:04:40.830 --> 00:04:45.130
So as one improvement, I mean, again,
this is just a tremendous amount of work.

94
00:04:45.130 --> 00:04:49.658
As one improvement, we could do here,

95
00:04:49.658 --> 00:04:56.241
is we could just basically instead of,
let me see here.

96
00:04:56.241 --> 00:04:57.570
Sorry, just getting my bearings.

97
00:04:57.570 --> 00:05:00.697
So we've got the offset top here and
then we kinda write it again here, and

98
00:05:00.697 --> 00:05:01.869
then we read it again here.

99
00:05:01.869 --> 00:05:04.392
So I was kinda playing
around with the solution and

100
00:05:04.392 --> 00:05:08.623
let me just pop this.
&gt;&gt; Speaker 1: I had kinda done this little

101
00:05:08.623 --> 00:05:09.379
bit of a thing here.

102
00:05:09.379 --> 00:05:13.902
So what we did is same loop, but
what we do first we grab the position and

103
00:05:13.902 --> 00:05:16.630
we sort in a separate variable, right?

104
00:05:16.630 --> 00:05:18.837
And so we grab that variable and
then we just use that variable.

105
00:05:18.837 --> 00:05:20.875
We never hit that dom element again.

106
00:05:20.875 --> 00:05:22.983
We just use that variable from now on.

107
00:05:22.983 --> 00:05:26.711
So even if we need to set the top to
something else like we set it here.

108
00:05:26.711 --> 00:05:28.230
Sorry, we set it here.

109
00:05:28.230 --> 00:05:31.327
We never go back to the dom again for it.

110
00:05:31.327 --> 00:05:33.560
We're just okay with the position
that we grabbed out.

111
00:05:33.560 --> 00:05:36.020
So this is really similar of a problem.

112
00:05:36.020 --> 00:05:39.172
I don't know if you've ever
done caching selectors before.

113
00:05:39.172 --> 00:05:43.966
So if you're in jQuery or something like
that and you have an unscroll handler, and

114
00:05:43.966 --> 00:05:45.869
it needs to grab a dom element and

115
00:05:45.869 --> 00:05:50.330
put some data in it like how far you're
scrolled, or something like that.

116
00:05:50.330 --> 00:05:53.766
The way you might do it is an event
unscroll and in that unscroll event,

117
00:05:53.766 --> 00:05:55.759
you grab the dom element and write to it.

118
00:05:55.759 --> 00:05:59.569
What that means is every time scroll
fires, you're hitting the dom again.

119
00:05:59.569 --> 00:06:01.851
You're grabbing it again and
it's totally unnecessary, right?

120
00:06:01.851 --> 00:06:04.433
So what you would do is you would
take that get element by ID or

121
00:06:04.433 --> 00:06:07.237
the jQuery selector, and
you move it out of the onScroll event.

122
00:06:07.237 --> 00:06:08.971
You kind of move it into
a global negative space, right?

123
00:06:08.971 --> 00:06:12.340
So you're like just grab it the one time,
then the scroll can just keep hitting it.

124
00:06:12.340 --> 00:06:15.967
It's the same thing in here is if you're
gonna be writing and reading, and

125
00:06:15.967 --> 00:06:17.877
writing, and reading back and forth.

126
00:06:17.877 --> 00:06:21.403
All I've done here is I have abstracted
the very first read into a variable and

127
00:06:21.403 --> 00:06:23.530
then we keep doing
everything else as normal.

128
00:06:23.530 --> 00:06:25.540
We never go back to the dom again, right?

129
00:06:25.540 --> 00:06:29.783
So after we do this style top, you'll
notice we never hit currentLogo.offset

130
00:06:29.783 --> 00:06:32.330
height or top or
anything like that ever again.

131
00:06:32.330 --> 00:06:35.447
So we can do little things like that and
then that makes, again,

132
00:06:35.447 --> 00:06:37.080
this isn't a perfect solution.

133
00:06:37.080 --> 00:06:38.881
But there's still a ton
of work going on here and

134
00:06:38.881 --> 00:06:41.052
my page is kinda died while I
was working on it happening.

135
00:06:41.052 --> 00:06:44.985
There's still a ton of work going on here,
but you can see big performance wins.

136
00:06:44.985 --> 00:06:47.588
S you can even see the shape
of everything change.

137
00:06:47.588 --> 00:06:49.364
So over here in the performance tab,

138
00:06:49.364 --> 00:06:52.530
we're seeing almost all of
this kinda like green here.

139
00:06:52.530 --> 00:06:57.461
And these jank areas, whereas if we kinda
run it here, we can see that everything is

140
00:06:57.461 --> 00:07:00.882
a lot more in the animation frame,
right, nice and spaced out.

141
00:07:00.882 --> 00:07:02.780
And you can see there's a nice,

142
00:07:02.780 --> 00:07:06.800
clear area for the CPU gets that
little break after each time.

143
00:07:06.800 --> 00:07:07.824
So the move is still expensive.

144
00:07:07.824 --> 00:07:10.766
These are all definitely
coming from the move call.

145
00:07:10.766 --> 00:07:13.875
The move gets called way too often still,
and it uses a lot of the CPU, but

146
00:07:13.875 --> 00:07:15.906
we're not really hitting that same amount.

147
00:07:15.906 --> 00:07:19.449
And really,
the cause here was this layout thrashing.

148
00:07:19.449 --> 00:07:21.584
It was just the read,
the write, the read again.

149
00:07:21.584 --> 00:07:23.923
Subtract it to a variable and
we're good to go.

150
00:07:23.923 --> 00:07:27.326
Honestly, there's a lot that we can
still improve about this like from

151
00:07:27.326 --> 00:07:28.972
an architecual standpoint.

152
00:07:28.972 --> 00:07:32.772
Keeping the way that we're doing the whole
architecture of the code is probably not

153
00:07:32.772 --> 00:07:36.478
great, iterating through everything and
reading values and things like that.

154
00:07:36.478 --> 00:07:38.332
We can move all of that to a variable,
right?

155
00:07:38.332 --> 00:07:41.506
We couldjust programmatically know where
everything's position should be and

156
00:07:41.506 --> 00:07:42.960
then never read from the dom again.

157
00:07:42.960 --> 00:07:44.730
That would be a cool way of doing it.

158
00:07:44.730 --> 00:07:47.018
It's like a lot of these
visualization libraries do, right?

159
00:07:47.018 --> 00:07:49.464
They just try to stay away from
the dom as much as possible,

160
00:07:49.464 --> 00:07:50.726
keep things in CPU memory.

161
00:07:50.726 --> 00:07:54.084
But as just an example of like,
you can see a slow website.

162
00:07:54.084 --> 00:07:57.045
You can instantly find the function
that's causing it, and

163
00:07:57.045 --> 00:08:00.258
you can even find what line within
the function is really slow.

164
00:08:00.258 --> 00:08:02.834
It's a pretty good jumping
off point from there.

