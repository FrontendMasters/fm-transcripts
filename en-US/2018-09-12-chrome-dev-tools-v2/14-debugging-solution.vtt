WEBVTT

1
00:00:00.040 --> 00:00:03.745
&gt;&gt; Jon Kuperman: So let's take
a look at that debugging exercise.

2
00:00:03.745 --> 00:00:07.655
So yeah, the basic idea here is
there's something going wrong,

3
00:00:07.655 --> 00:00:09.370
kind of a typical vague bug.

4
00:00:09.370 --> 00:00:11.807
So if you hit this button
that's supposed to fetch stuff,

5
00:00:11.807 --> 00:00:14.050
you will see that nothing happens.

6
00:00:14.050 --> 00:00:18.496
So my first step is usually to check the
console before I really do anything else.

7
00:00:18.496 --> 00:00:21.935
Cuz the console is where all your
JavaScript errors are gonna get thrown.

8
00:00:21.935 --> 00:00:26.065
So we kind of look in here and we see this
Uncaught (in promise) TypeError: Cannot

9
00:00:26.065 --> 00:00:28.196
read property 'forEach' of undefined.

10
00:00:28.196 --> 00:00:32.200
We see what file it's in and we see what
function it's being called inside of.

11
00:00:32.200 --> 00:00:36.104
So kind of the next thing I would do
is just click through to the file here.

12
00:00:36.104 --> 00:00:38.733
And then you get this kinda
great contextual helper.

13
00:00:38.733 --> 00:00:40.897
So this saves from its last run,

14
00:00:40.897 --> 00:00:44.593
kinda underlines in the red
squiggly the line for you.

15
00:00:44.593 --> 00:00:46.330
[COUGH] It kinda shows
you what's going on here.

16
00:00:46.330 --> 00:00:48.530
So this here is a little bit vague though,
right?

17
00:00:48.530 --> 00:00:51.220
It's like can't read
'forEach' of undefined.

18
00:00:51.220 --> 00:00:53.796
So what is undefined then,
it's images, right?

19
00:00:53.796 --> 00:00:55.401
And images comes from in here.

20
00:00:55.401 --> 00:00:58.877
So for example, if I set a breakpoint on
images there’s a lot of different ways

21
00:00:58.877 --> 00:01:00.999
we could go about getting
to the bottom of this.

22
00:01:00.999 --> 00:01:04.780
But when I click again,
I can see that we’re here in the error and

23
00:01:04.780 --> 00:01:10.180
I can see this little context hint here
that images comes through undefined.

24
00:01:10.180 --> 00:01:13.680
So just to kind of help myself out,
I'll add a watch over here,

25
00:01:13.680 --> 00:01:15.140
so I'll add a watch for images.

26
00:01:16.870 --> 00:01:18.275
And we can see here, it's undefined.

27
00:01:18.275 --> 00:01:20.617
And then I'm gonna look at the call
stacks, so what's happening here?

28
00:01:20.617 --> 00:01:25.600
So it starts off with this fetchImages
call, right, this function here.

29
00:01:25.600 --> 00:01:27.460
And then it hits this then block.

30
00:01:27.460 --> 00:01:31.364
And the then block calls
processImages with this data.

31
00:01:31.364 --> 00:01:32.747
So it looks pretty good to me.

32
00:01:32.747 --> 00:01:36.791
I do see that this is undefined, but
let's kinda look inside this data here.

33
00:01:36.791 --> 00:01:39.765
So I'll add another watch over here for
the data.

34
00:01:39.765 --> 00:01:43.256
And what I can see is what I'm expecting,
right, is an object,

35
00:01:43.256 --> 00:01:44.818
to some kind of JSON object.

36
00:01:44.818 --> 00:01:49.191
What I'm getting is an actual web
response, right, like an HTTP response,

37
00:01:49.191 --> 00:01:50.622
which is not what I want.

38
00:01:50.622 --> 00:01:54.233
So there's a bunch of different
ways we could kind of look this up,

39
00:01:54.233 --> 00:01:58.761
like response object, convert response
object into JSON or something like that.

40
00:01:58.761 --> 00:02:03.538
The thing, if you look up anything related
to MDN's articles on the fetch API or

41
00:02:03.538 --> 00:02:04.833
anything like that.

42
00:02:04.833 --> 00:02:06.769
If you get back a response blob,

43
00:02:06.769 --> 00:02:11.021
you'll have to call a .JSON on it in
order to get it into a JSON format.

44
00:02:11.021 --> 00:02:15.146
And so one thing that we can go ahead and
do is if I go back to my code over here,

45
00:02:15.146 --> 00:02:16.667
this is the same file here.

46
00:02:16.667 --> 00:02:21.023
I know that the first thing that
you have to do when you hit a web

47
00:02:21.023 --> 00:02:25.808
response like this is you can pass
a then and you get this response,

48
00:02:25.808 --> 00:02:29.480
and we'll call it response.json on that.

49
00:02:29.480 --> 00:02:32.640
So we hit the API,
we convert it into JSON when it's ready,

50
00:02:32.640 --> 00:02:33.970
then we try to do something on it.

51
00:02:33.970 --> 00:02:37.160
So if I go back here,
I kinda play through the debugger and

52
00:02:37.160 --> 00:02:40.829
I hit the button again,
we'll see kinda the same thing going on.

53
00:02:40.829 --> 00:02:42.361
Images is undefined.

54
00:02:42.361 --> 00:02:46.761
And if I go back to here, though, I can
see that instead of data being a readable

55
00:02:46.761 --> 00:02:50.651
stream, data is an object,
which is what I'm looking for, right?

56
00:02:50.651 --> 00:02:55.150
So if I were to inspect data,
I see here it's this object.

57
00:02:55.150 --> 00:02:58.869
So then the question becomes,
why is it down here,

58
00:02:58.869 --> 00:03:02.078
why is images being
passed in as undefined?

59
00:03:02.078 --> 00:03:04.580
And this is just it happens
to be kind of a typo, right?

60
00:03:04.580 --> 00:03:09.110
So if we look in here, we can see that
data has a key of images and we're passing

61
00:03:09.110 --> 00:03:14.016
in to processImages is data.ImageList,
so that's undefined, that's wrong.

62
00:03:14.016 --> 00:03:18.911
So we can kinda go back to the code
again and we can do data.images instead.

63
00:03:18.911 --> 00:03:23.071
Another thing we could be doing here,
right, is we could be work spacing and

64
00:03:23.071 --> 00:03:24.574
then editing the sources.

65
00:03:24.574 --> 00:03:27.796
And desyncing them from
the dev tools either way.

66
00:03:27.796 --> 00:03:31.156
So I'll play it through again and
then I'll hit fetch again.

67
00:03:31.156 --> 00:03:35.465
And so now we're in here, we see these
images, we've got the four images.

68
00:03:35.465 --> 00:03:36.710
That all looks good.

69
00:03:36.710 --> 00:03:39.430
So I'm gonna king of remove this
breakpoint and play it through.

70
00:03:39.430 --> 00:03:40.640
I still don't see anything.

71
00:03:40.640 --> 00:03:43.130
So I go to the console and
there's no errors here.

72
00:03:43.130 --> 00:03:45.154
So this is where it gets
a little bit trickier, right?

73
00:03:45.154 --> 00:03:46.983
When you have an error, it's nice,

74
00:03:46.983 --> 00:03:50.890
it's like a guiding force to help
you figure out what's going wrong.

75
00:03:50.890 --> 00:03:52.080
But you don't have an error here.

76
00:03:52.080 --> 00:03:53.860
So kind of start stepping through here.

77
00:03:53.860 --> 00:03:55.651
So we create this list.

78
00:03:55.651 --> 00:03:57.810
I wanna make sure that's
getting created right.

79
00:03:57.810 --> 00:04:01.728
Make all these like items, I might put
some, we do some inner text up here,

80
00:04:01.728 --> 00:04:03.236
I might check those things.

81
00:04:03.236 --> 00:04:07.206
Just kinda going through and selecting
anything that I'm really interested in,

82
00:04:07.206 --> 00:04:08.248
places I wanna stop.

83
00:04:08.248 --> 00:04:14.323
So I hit fetch again, and I can see that
this create element appears to be working,

84
00:04:14.323 --> 00:04:16.271
there's no errors here.

85
00:04:16.271 --> 00:04:19.481
So I'll go ahead and step through and
I'm gonna hit play so

86
00:04:19.481 --> 00:04:23.094
instead of stepping through each
line I go to my next breakpoint.

87
00:04:23.094 --> 00:04:24.363
So I go to my next breakpoint.

88
00:04:24.363 --> 00:04:26.248
I'm kind of seeing if
these things are right.

89
00:04:26.248 --> 00:04:30.163
So I'm going back to my watch and
maybe looking at what element it's set to.

90
00:04:30.163 --> 00:04:34.437
It's an object, it does have a name and
photographer, so those things look right.

91
00:04:34.437 --> 00:04:37.244
Setting the image source, again,
all this stuff looks right.

92
00:04:37.244 --> 00:04:39.924
Nothing's undefined or anything like that.

93
00:04:39.924 --> 00:04:42.718
So for those that did the exercise,
you might notice, though,

94
00:04:42.718 --> 00:04:45.371
that we're just not appending
anything to the DOM, right?

95
00:04:45.371 --> 00:04:48.446
So if we play through and
we get all the way down to this list, and

96
00:04:48.446 --> 00:04:50.435
then I go ahead and
I look at what list is.

97
00:04:50.435 --> 00:04:52.389
We can see that list is a ul and

98
00:04:52.389 --> 00:04:56.595
it's got these children.
&gt;&gt; Jon Kuperman: [SOUND]

99
00:04:56.595 --> 00:04:58.372
It's cuz it happened.

100
00:04:58.372 --> 00:05:00.146
This is another trick with the debugger.

101
00:05:00.146 --> 00:05:02.113
When you stop a breakpoint on a line,

102
00:05:02.113 --> 00:05:05.100
it's before that line is
finished executing, right?

103
00:05:05.100 --> 00:05:06.062
It's not afterwards.

104
00:05:06.062 --> 00:05:10.963
So if you have const(foo) equals foo, and
then you put a breakpoint on that line.

105
00:05:10.963 --> 00:05:12.466
And then you try to watch for foo,

106
00:05:12.466 --> 00:05:15.704
you'll notice that it's undefined
cuz it hasn't been declared yet.

107
00:05:15.704 --> 00:05:20.134
Now this is kinda where the debugger
line can come in really handy, right?

108
00:05:20.134 --> 00:05:22.914
Because what you could do instead
of adding this breakpoint,

109
00:05:22.914 --> 00:05:29.451
I could remove these.
&gt;&gt; Jon Kuperman: Kinda refresh the page,

110
00:05:29.451 --> 00:05:30.478
I could go back here.

111
00:05:30.478 --> 00:05:33.341
And I could be like, well, I want to
see when it's all said and done, right,

112
00:05:33.341 --> 00:05:34.460
when all of this is finished.

113
00:05:34.460 --> 00:05:36.140
So I can add a debugger line here.

114
00:05:36.140 --> 00:05:40.920
And then I can just refresh the page and
hit the fetch button and it'll stop here.

115
00:05:40.920 --> 00:05:46.172
So now if I go to my list I can
see that I have these children.

116
00:05:46.172 --> 00:05:47.452
They're these cards or whatever.

117
00:05:47.452 --> 00:05:49.200
So everything's looking really good there.

118
00:05:49.200 --> 00:05:53.448
So kind of the last thing that we forgot
to do here is just when it's all finished,

119
00:05:53.448 --> 00:05:57.550
append the finished product to the DOM,
right?

120
00:05:57.550 --> 00:05:59.600
So for each one we make a little thing.

121
00:05:59.600 --> 00:06:03.690
So I'll just go here and just something
like document.body.appendChild.

122
00:06:03.690 --> 00:06:07.150
Again, the DOM API's are really
not what's important here.

123
00:06:07.150 --> 00:06:10.657
It's just important to be able to
see is it defined, what am I doing,

124
00:06:10.657 --> 00:06:11.510
why is it wrong?

125
00:06:11.510 --> 00:06:17.072
So kind of the gist of this code is we
do the fetch call, turn it into JSON.

126
00:06:17.072 --> 00:06:20.487
Then we take the data and
we call a function on its images,

127
00:06:20.487 --> 00:06:21.920
which we know is a list.

128
00:06:23.070 --> 00:06:26.002
Then we create a ul object or element.

129
00:06:26.002 --> 00:06:29.819
We forEach through those images and
we just start creating these DOM nodes.

130
00:06:29.819 --> 00:06:34.452
So we create list items and h2s and
spans, some new images, all that stuff.

131
00:06:34.452 --> 00:06:38.711
Add some classes, innerText, and
then we start kind of building it again.

132
00:06:38.711 --> 00:06:41.778
So a lot of people probably
use UI frameworks to do this.

133
00:06:41.778 --> 00:06:44.934
So it's not super vital that you know
how to do it with vanilla JavaScript.

134
00:06:44.934 --> 00:06:47.700
If you're using react or
something like that.

135
00:06:47.700 --> 00:06:51.861
But JavaScript does have APIs for creating
elements, attaching them to each other,

136
00:06:51.861 --> 00:06:53.450
all that kind of stuff.

137
00:06:53.450 --> 00:06:57.439
So if I go ahead and refresh the page
now and do the fetch Star Wars thing,

138
00:06:57.439 --> 00:07:01.445
we'll see that we are getting data,
all this stuff is coming through.

139
00:07:01.445 --> 00:07:02.980
We're still seeing a problem here.

140
00:07:04.580 --> 00:07:10.510
So if we go into that undefined, just hit
a breakpoint on something, hit fetch.

141
00:07:10.510 --> 00:07:13.550
Do another watch, this time we'll
do it on an element, right?

142
00:07:13.550 --> 00:07:15.516
We'll see that element has,
what does it have?

143
00:07:15.516 --> 00:07:17.306
Oops, it has two properties.

144
00:07:17.306 --> 00:07:18.925
It has name and photographer.

145
00:07:18.925 --> 00:07:21.850
And we're trying to call element title,
which Chrome tells us is undefined.

146
00:07:21.850 --> 00:07:25.820
So we'll have to go through here and
change that to name.

147
00:07:26.870 --> 00:07:30.198
So let's remove that breakpoint,
play it through again.

148
00:07:30.198 --> 00:07:31.050
Kind of getting these.

149
00:07:31.050 --> 00:07:33.978
I think the last thing I did
wrong is I switched these, right?

150
00:07:33.978 --> 00:07:35.930
This is the title and this is the author.

151
00:07:35.930 --> 00:07:37.200
So if we wanted to we could do that.

152
00:07:37.200 --> 00:07:40.250
So I think it's the title
should be element.name and

153
00:07:40.250 --> 00:07:42.566
the author should be element.author.

154
00:07:42.566 --> 00:07:46.210
Cool, and now we can go ahead and
hit that and we got everything.

155
00:07:46.210 --> 00:07:49.105
No, we don't, what did I do wrong?

156
00:07:49.105 --> 00:07:54.255
Still got author.
&gt;&gt; Jon Kuperman: You're so good.

157
00:07:54.255 --> 00:07:58.616
That was a test.
&gt;&gt; Jon Kuperman: Thank you.

158
00:07:58.616 --> 00:08:02.040
There we go, so now we've got images
coming through, no more errors and

159
00:08:02.040 --> 00:08:02.840
all that stuff.

160
00:08:02.840 --> 00:08:06.220
So kind of the big point of this is just
starting to add those breakpoints and

161
00:08:06.220 --> 00:08:08.940
see that you get information from
a bunch of different places.

162
00:08:08.940 --> 00:08:11.630
Like you can add a watch for
it, or you can hover over it,

163
00:08:11.630 --> 00:08:13.510
it gives you that inline context.

164
00:08:13.510 --> 00:08:16.380
Start seeing,
checking your assumptions, basically.

165
00:08:16.380 --> 00:08:18.280
Seeing what's working,
what's not working, that kind of thing.

