WEBVTT

1
00:00:00.004 --> 00:00:02.080
&gt;&gt; Jon Kuperman: So
I already have my thing running,

2
00:00:02.080 --> 00:00:05.889
if you wanted to follow along you
would just kill your MPM start and

3
00:00:05.889 --> 00:00:09.024
you would run node
--inspect server/index.js.

4
00:00:09.024 --> 00:00:14.299
Got that going, gotta come back here,
open up the dev tools and I'm gonna mount

5
00:00:14.299 --> 00:00:19.652
these back to the bottom, open up the node
dev tools which is whole another tab and

6
00:00:19.652 --> 00:00:24.633
then I would want to hit start and
then refresh the page, and then hit stop.

7
00:00:24.633 --> 00:00:29.137
So a thing to always keep in mind when
you're doing these profiles for CPU stuff,

8
00:00:29.137 --> 00:00:32.533
like why something took so long,
is the shorter the better.

9
00:00:32.533 --> 00:00:36.631
If you do a ten second one a few things,
you're gonna get a bunch of noise in

10
00:00:36.631 --> 00:00:41.257
there, but also it's gonna be hard to see
anything because if the page took a second

11
00:00:41.257 --> 00:00:44.847
to load and you do a two second recording,
that load will be big.

12
00:00:44.847 --> 00:00:45.918
You can see mine, right?

13
00:00:45.918 --> 00:00:47.327
It's big and easy to see.

14
00:00:47.327 --> 00:00:49.788
If you do a really long recording
it's gonna be hard to zoom in and

15
00:00:49.788 --> 00:00:51.668
figure out where it is
that you're looking for.

16
00:00:51.668 --> 00:00:54.669
So when you're doing the CP recording,
you want to start it,

17
00:00:54.669 --> 00:00:57.339
do the thing as quickly as possible,
and then stop it.

18
00:00:57.339 --> 00:00:59.887
So you're only capturing
what you're interested in.

19
00:00:59.887 --> 00:01:00.794
Cool.

20
00:01:00.794 --> 00:01:02.292
So we can kind of zoom in over here.

21
00:01:02.292 --> 00:01:05.958
We kinda see this pattern
here of the CPU profile.

22
00:01:05.958 --> 00:01:08.886
It's doing it's thing, doing it's thing
and it's some really big stuff and

23
00:01:08.886 --> 00:01:09.605
then it finishes.

24
00:01:09.605 --> 00:01:12.547
So it kind of scrolling down into here,
again,

25
00:01:12.547 --> 00:01:16.758
I just kind of wanna see what it is
that's taking a really long time.

26
00:01:16.758 --> 00:01:20.773
And so kind of thing that I would look for
here is I'm seeing that,

27
00:01:20.773 --> 00:01:22.910
let's zoom out a little bit.

28
00:01:22.910 --> 00:01:27.675
I'm seeing that everything kind of starts
going here and then these are two,

29
00:01:27.675 --> 00:01:30.030
you can see here there's a division.

30
00:01:30.030 --> 00:01:34.170
There's two different parents, right,
that trigger one right after another.

31
00:01:34.170 --> 00:01:36.670
This one's a lot smaller, so
I'm gonna forget about it.

32
00:01:36.670 --> 00:01:38.540
This one's the biggest thing we have,
right?

33
00:01:38.540 --> 00:01:41.000
It's total time is almost half a second.

34
00:01:41.000 --> 00:01:44.216
So why is it that this synonymous
function takes so long?

35
00:01:44.216 --> 00:01:48.134
So oops, go back to the profile, so we're
kinda tracing through, remember we don't

36
00:01:48.134 --> 00:01:51.518
care about every single function cuz
a lot of these their self time is zero,

37
00:01:51.518 --> 00:01:54.009
it's just their children
that are taking a long time.

38
00:01:54.009 --> 00:01:58.223
So again we'll go down to the last big
one, right, the last long one that we see.

39
00:01:58.223 --> 00:02:01.615
We see this anonymous function with
a self time, so we click on that and

40
00:02:01.615 --> 00:02:04.388
it takes us right into our app,
right into our node code.

41
00:02:04.388 --> 00:02:08.038
So if you were to open my Mastering
Chrome DevTools in your editor and

42
00:02:08.038 --> 00:02:11.980
go to the nodeserver.index.js,
you'll see this exact file.

43
00:02:11.980 --> 00:02:13.530
And so it takes us right there right away.

44
00:02:13.530 --> 00:02:16.070
If we look back at the profile,
we can get a little more information.

45
00:02:16.070 --> 00:02:18.980
So this is the long one,
and what's it doing?

46
00:02:18.980 --> 00:02:22.780
It's calling fs.readFileSync a lot,
that's what's taking so long.

47
00:02:22.780 --> 00:02:25.310
So we kinda go back over
into the Sources tab,

48
00:02:25.310 --> 00:02:28.410
and we can see it's kind of doing
this silly contrived thing.

49
00:02:28.410 --> 00:02:32.860
It's doing a loop and it's doing these
readFileSyncs on a really long text file.

50
00:02:32.860 --> 00:02:35.900
Again, your app is gonna be a little
bit more in depth to read and

51
00:02:35.900 --> 00:02:36.750
see what's going on.

52
00:02:36.750 --> 00:02:41.593
But we have a pretty easy way from a total
backend node app that were unfamiliar with

53
00:02:41.593 --> 00:02:45.255
to targeting the function that's
taking a really long time.

54
00:02:45.255 --> 00:02:48.369
So we could do something,
there's tons of ways we could do this.

55
00:02:48.369 --> 00:02:50.819
This thing, since we're reading
the same file each time,

56
00:02:50.819 --> 00:02:51.949
we could cache it out here.

57
00:02:51.949 --> 00:02:55.123
We could also make it asynchonous
instead of a synchronous read.

58
00:02:55.123 --> 00:02:57.234
That's kind of getting into
the Node.js world a little bit.

59
00:02:57.234 --> 00:02:59.746
But just so you know,
if you're running any Node app,

60
00:02:59.746 --> 00:03:02.324
you can get right to the function
that's your slowest.

61
00:03:02.324 --> 00:03:08.100
Any questions on the Node debugging?
&gt;&gt; Speaker 2: [INAUDIBLE]

62
00:03:08.100 --> 00:03:09.240
&gt;&gt; Jon Kuperman: Yeah, this is what's so

63
00:03:09.240 --> 00:03:10.530
cool about it, yeah,

64
00:03:10.530 --> 00:03:14.360
absolutely, any of these nodes SLI
apps you can just pipe through.

65
00:03:14.360 --> 00:03:16.920
So normally you would run
no demand index subject so

66
00:03:16.920 --> 00:03:22.070
you can run node--inspect and
then run no demanjs.

67
00:03:22.070 --> 00:03:23.630
JFs, so you could do stuff like that.

68
00:03:24.630 --> 00:03:25.150
And then yeah.

69
00:03:25.150 --> 00:03:25.740
It's really cool.

70
00:03:25.740 --> 00:03:29.470
There's a few, I've seen some really cool
articles before where people profile node

71
00:03:29.470 --> 00:03:32.150
command line apps this way and
it's really cool.

72
00:03:32.150 --> 00:03:35.063
You can see what Web next is doing or
what Gulp's doing, or mode.

73
00:03:35.063 --> 00:03:36.149
It's really neat.
&gt;&gt; Speaker 2: Yeah,

74
00:03:36.149 --> 00:03:37.263
in the web pack course.

75
00:03:37.263 --> 00:03:39.681
It was Shawn Lark and he does that.
&gt;&gt; Jon Kuperman: That's awesome.

76
00:03:39.681 --> 00:03:40.661
&gt;&gt; Speaker 2: And mine was [INAUDIBLE]

77
00:03:40.661 --> 00:03:41.749
&gt;&gt; Jon Kuperman: Yeah, it's so cool.

78
00:03:41.749 --> 00:03:42.493
&gt;&gt; Speaker 2: He'll walk through and step

79
00:03:42.493 --> 00:03:44.018
through your entire [INAUDIBLE] process.
&gt;&gt; Jon Kuperman: Right,

80
00:03:44.018 --> 00:03:46.368
what you normally see is a black box,
right?

81
00:03:46.368 --> 00:03:48.339
What you normally see is,
it feels like a binary.

82
00:03:48.339 --> 00:03:49.653
&gt;&gt; Speaker 2: I ran this command, and

83
00:03:49.653 --> 00:03:52.529
then it kicks off 800 plugins.
&gt;&gt; Jon Kuperman: Absolutely, but

84
00:03:52.529 --> 00:03:54.261
you can start really seeing it.

85
00:03:54.261 --> 00:03:56.143
And then, you can go right to
your source code that way.

86
00:03:56.143 --> 00:03:59.356
So it's really cool,
only applicable if you do NodeJS.

87
00:03:59.356 --> 00:04:02.349
If you've got Ruby stuff,
you'll have to find your own profiler for

88
00:04:02.349 --> 00:04:03.132
the other world.

89
00:04:03.132 --> 00:04:05.247
But if you do Node,
you can use Dev Tools like that.

90
00:04:05.247 --> 00:04:06.084
It's just pretty cool.

