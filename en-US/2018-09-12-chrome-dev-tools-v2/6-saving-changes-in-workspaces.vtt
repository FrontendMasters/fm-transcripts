WEBVTT

1
00:00:00.000 --> 00:00:01.717
&gt;&gt; Jon Kuperman: Cool and
then we can save changes to disk.

2
00:00:01.717 --> 00:00:06.825
So this one is like it's probably
the biggest example in the editing and

3
00:00:06.825 --> 00:00:10.329
it has come a really,
really, really long way.

4
00:00:10.329 --> 00:00:13.170
Having said that, it still isn't
gonna be perfect for your workflow.

5
00:00:13.170 --> 00:00:16.837
But this is where we get into this concept
of like using the dev tools as your

6
00:00:16.837 --> 00:00:17.377
main IDE.

7
00:00:17.377 --> 00:00:19.952
So not having an editor open
just using the dev tools.

8
00:00:19.952 --> 00:00:22.842
So what we can do is we
can go into the sources.

9
00:00:22.842 --> 00:00:24.933
I'm gonna close all of
these other tabs here.

10
00:00:24.933 --> 00:00:28.205
Actually, another kind of handy
thing if I have stuff open.

11
00:00:28.205 --> 00:00:31.976
This happens to me a lot where I'll
have like a million things open here.

12
00:00:31.976 --> 00:00:34.086
So just like in editor,
you can right-click and

13
00:00:34.086 --> 00:00:37.441
you can do things like close, close
others, close to the right or close all.

14
00:00:37.441 --> 00:00:41.083
So I'm going to close all these tabs and
let me make this a little bit bigger here.

15
00:00:41.083 --> 00:00:44.443
So what's going on here is we
can see that for this page.

16
00:00:44.443 --> 00:00:46.129
We're getting all these files.

17
00:00:46.129 --> 00:00:49.315
Here's a CSS file,
the JavaScript file, all those things.

18
00:00:49.315 --> 00:00:50.845
I'm gonna make this a little bit bigger.

19
00:00:50.845 --> 00:00:54.230
I'm gonna go to this file
system tab over here.

20
00:00:54.230 --> 00:00:58.779
And so under file system, we've got
this concept of add folder to workspace.

21
00:00:58.779 --> 00:01:04.902
So before we do it, the kinda concept here
is that Chrome is getting all these files

22
00:01:04.902 --> 00:01:10.702
from your local host and then you can
give Chrome a folder of your actual code.

23
00:01:10.702 --> 00:01:13.399
And Chrome will start really
trying to intelligently make

24
00:01:13.399 --> 00:01:14.949
mappings between those things.

25
00:01:14.949 --> 00:01:17.939
So it'll be like okay,
a style that's CSS comes down and

26
00:01:17.939 --> 00:01:21.463
the folder you gave me also has a style
that's CSS and they're the same.

27
00:01:21.463 --> 00:01:25.197
So now, I'm gonna map them together and it
will map as many files as it can together.

28
00:01:25.197 --> 00:01:29.368
And once mapped any changes that we're
gonna make actually persist to disk as

29
00:01:29.368 --> 00:01:31.880
though they were written
in your text editor.

30
00:01:31.880 --> 00:01:36.170
So that's the kind of high level view,
let's like walk through it together.

31
00:01:36.170 --> 00:01:42.783
Let me open my finder, so
I've got this work space filled out.

32
00:01:42.783 --> 00:01:46.814
So here is just where and we'll get into
this and I'll help anybody get setup.

33
00:01:46.814 --> 00:01:50.581
This is the sample app that we're working
on, Mastering Chrome deaf tools and

34
00:01:50.581 --> 00:01:53.161
I've just get cloned it
that's how I have it on this.

35
00:01:53.161 --> 00:01:56.543
I get cloned it into this folder, so
I've got this is where I'm serving from.

36
00:01:56.543 --> 00:02:00.403
If I go to my terminal you can see,
I'm in that mastering-chrome-devtools.

37
00:02:00.403 --> 00:02:02.920
That's where I run npm
start to get the app.

38
00:02:02.920 --> 00:02:04.408
Is everybody good on that so far?

39
00:02:04.408 --> 00:02:06.842
So I have this like running npm start.

40
00:02:06.842 --> 00:02:08.603
It opens this local host thing.

41
00:02:08.603 --> 00:02:10.557
That's kind of what's serving the content.

42
00:02:10.557 --> 00:02:16.419
And so what I do is I go add folder to
workspace and then I'll go in my finder,

43
00:02:16.419 --> 00:02:22.579
and I will find that Mastering Chrome
DevTools, and I'll click Select on it.

44
00:02:22.579 --> 00:02:24.989
So basically, what I'm saying
here is I'm adding this folder.

45
00:02:24.989 --> 00:02:26.480
This always bites me.

46
00:02:26.480 --> 00:02:29.627
If you're not seeing it right away and
this will happen when you do the exercise,

47
00:02:29.627 --> 00:02:31.168
it's because of this little warning.

48
00:02:31.168 --> 00:02:32.850
I don't, maybe that's easy to see for
some people.

49
00:02:32.850 --> 00:02:35.444
I always forget about its existence and
it's saying.

50
00:02:35.444 --> 00:02:37.496
So basically, this is getting sensitive.

51
00:02:37.496 --> 00:02:39.946
So now this is like I'm adding something,

52
00:02:39.946 --> 00:02:43.840
which is in turn giving Chrome
the rights to write to my file system.

53
00:02:43.840 --> 00:02:45.604
And that's what we wanna do, but

54
00:02:45.604 --> 00:02:49.517
Chrome its required that every time
you acknowledge that security risk.

55
00:02:49.517 --> 00:02:51.193
So I'm gonna go ahead and say, allow.

56
00:02:51.193 --> 00:02:53.415
And now we can see, so
we still have the page.

57
00:02:53.415 --> 00:02:55.982
This is the stuff that is
actually coming from the server.

58
00:02:55.982 --> 00:03:00.269
But now in the file system, we can see,
I just uploaded my whole folder here.

59
00:03:00.269 --> 00:03:03.444
So you can see all the same stuff
that you'll see when you get crown

60
00:03:03.444 --> 00:03:04.380
the project down.

61
00:03:04.380 --> 00:03:08.735
What's really unique is you'll start
noticing these green dots on a lot of

62
00:03:08.735 --> 00:03:09.572
these files.

63
00:03:09.572 --> 00:03:10.996
You'll see a green dot here.

64
00:03:10.996 --> 00:03:13.399
And if I go back to the elements tab,

65
00:03:13.399 --> 00:03:17.018
I'll start seeing green dot
next to all these rules.

66
00:03:17.018 --> 00:03:20.381
And so the green dot means it's
sinking that it is mapped.

67
00:03:20.381 --> 00:03:24.090
And so that means that anything
that I change in here will persist,

68
00:03:24.090 --> 00:03:25.359
will be written down.

69
00:03:25.359 --> 00:03:27.715
So let me just show you an example
to kind of visualize it.

70
00:03:27.715 --> 00:03:33.446
So I'll scroll back to the very top and
I'll select my my nav.

71
00:03:33.446 --> 00:03:34.545
So I've got my nav here.

72
00:03:34.545 --> 00:03:37.904
I've got my nav here and it's blue.

73
00:03:37.904 --> 00:03:41.660
And if I open my Visual Studio Code and
I go to my style.css,

74
00:03:41.660 --> 00:03:43.849
this is just local on my computer.

75
00:03:45.350 --> 00:03:46.903
I can see I've got my nav here and
it's blue.

76
00:03:46.903 --> 00:03:47.432
So that makes sense.

77
00:03:47.432 --> 00:03:51.278
That's the CSS that I've written and then
this is where it's being authored here.

78
00:03:51.278 --> 00:03:54.988
But now that it's mapped,
if I go ahead and I change this to red and

79
00:03:54.988 --> 00:03:58.294
I hit enter on it,
we actually go back to the file system and

80
00:03:58.294 --> 00:04:00.204
we see it's been changed to red.

81
00:04:00.204 --> 00:04:04.007
So this is exactly doing,
going to kind of make it this way, so

82
00:04:04.007 --> 00:04:10.283
we can do like
&gt;&gt; Jon Kuperman: Get in there.

83
00:04:10.283 --> 00:04:12.418
Do pink and it changes to pink.

84
00:04:12.418 --> 00:04:15.883
So this is now, we're in this mode where
we're authoring all of our code and

85
00:04:15.883 --> 00:04:17.523
it's actually persisting there.

86
00:04:17.523 --> 00:04:18.704
And if we look in git,

87
00:04:18.704 --> 00:04:22.068
we'll see that there's a real
file system in change there.

88
00:04:22.068 --> 00:04:25.680
So kind of come back here,
this is where the caveat start.

89
00:04:25.680 --> 00:04:28.859
So it can do all the CSS stuff.

90
00:04:28.859 --> 00:04:33.511
You would notice that if you did something
like change the nav to be a div or

91
00:04:33.511 --> 00:04:35.730
something like that, div class.

92
00:04:35.730 --> 00:04:37.558
And then I refresh it, it's not.

93
00:04:37.558 --> 00:04:44.557
Whoa, sorry, still have a break point.
&gt;&gt; Jon Kuperman: If I refresh it,

94
00:04:44.557 --> 00:04:46.082
it hasn't persisted to a div.

95
00:04:46.082 --> 00:04:47.083
And the reason here,

96
00:04:47.083 --> 00:04:50.035
it's pretty straightforward
when you really think about it.

97
00:04:50.035 --> 00:04:53.474
When we look at the site,
we'll see I'm not actually serving HTML.

98
00:04:53.474 --> 00:04:56.561
I have a node app that's serving
a template language like Mustache or

99
00:04:56.561 --> 00:04:57.579
something like that.

100
00:04:57.579 --> 00:05:00.917
But the big part is that remember
when we at the beginning of this,

101
00:05:00.917 --> 00:05:03.416
we learned the difference between HTML and
DOM.

102
00:05:03.416 --> 00:05:04.841
HTML is kinda what we author.

103
00:05:04.841 --> 00:05:07.440
DOM is what Chrome turns it into.

104
00:05:07.440 --> 00:05:09.960
So over here, we're editing DOM.

105
00:05:09.960 --> 00:05:11.517
This isn't anything that's been authored.

106
00:05:11.517 --> 00:05:13.127
This is what Chrome's kinda done with it.

107
00:05:13.127 --> 00:05:17.822
So to kinda keep the easy rule of thumb
is anything you edit in the styles tab

108
00:05:17.822 --> 00:05:20.487
instantly persist to disk, no problem.

109
00:05:20.487 --> 00:05:24.810
Anything you edit in the elements on
the left side will not persist to disk.

110
00:05:24.810 --> 00:05:27.857
If you want to,
you can go back into sources and

111
00:05:27.857 --> 00:05:32.171
you can open any file you can open
in sources including your HTML.

112
00:05:32.171 --> 00:05:33.649
Those will persist to disk just fine.

113
00:05:33.649 --> 00:05:38.456
But they kinda caveat is like if you make
a change in here like changing an element,

114
00:05:38.456 --> 00:05:39.849
changing a class name,

115
00:05:39.849 --> 00:05:43.094
those changes don't save.
&gt;&gt; Speaker 2: There's a question obviously

116
00:05:43.094 --> 00:05:44.572
about the SAS-
&gt;&gt; Jon Kuperman: Yeah, this is great.

117
00:05:44.572 --> 00:05:45.859
&gt;&gt; Speaker 2: [INAUDIBLE] build processes.

118
00:05:45.859 --> 00:05:46.732
&gt;&gt; Jon Kuperman: Yeah, this is great.

119
00:05:46.732 --> 00:05:48.941
So now, we get into these build processes.

120
00:05:48.941 --> 00:05:53.664
So the reality is how many of us
just sit and write just HTML, and

121
00:05:53.664 --> 00:05:55.368
CSS, and send it out.

122
00:05:55.368 --> 00:05:56.664
That's not how things work.

123
00:05:56.664 --> 00:06:00.253
So we all have these build tools like
maybe using webpack, maybe using Gulp.

124
00:06:00.253 --> 00:06:03.282
And you have maybe a CSS
preprocessor like Sass or LESS or

125
00:06:03.282 --> 00:06:07.151
you have templating languages like
Mustache like we have all these kind

126
00:06:07.151 --> 00:06:09.550
of abstractions that we use day-to-day.

127
00:06:09.550 --> 00:06:11.744
So when I gave this
course a few years ago,

128
00:06:11.744 --> 00:06:15.786
the answer was pretty much a resounding
no, it won't work with that stuff.

129
00:06:15.786 --> 00:06:16.895
But it's come a really long way.

130
00:06:16.895 --> 00:06:22.838
So yeah, if you are using Sass, if you're
using SCSS, it will work just great.

131
00:06:22.838 --> 00:06:25.045
Chrome has built-in support for that, so

132
00:06:25.045 --> 00:06:27.937
you'll just drag in your
project with your Sass files.

133
00:06:27.937 --> 00:06:30.107
Chrome totally understands and
can make those transitions.

134
00:06:30.107 --> 00:06:34.869
So any color your change will be
written to the corresponding Sass file.

135
00:06:34.869 --> 00:06:36.412
As you get into other things,

136
00:06:36.412 --> 00:06:40.923
more complex build tools like I mentioned
earlier create, react app where you've got

137
00:06:40.923 --> 00:06:44.777
react which isn't really all that
well-supported in Chrome DevTools.

138
00:06:44.777 --> 00:06:46.779
You've got Webpack
building all this stuff.

139
00:06:46.779 --> 00:06:48.257
Things get really complicated.

140
00:06:48.257 --> 00:06:51.265
You'll find less and
less stuff working there.

141
00:06:51.265 --> 00:06:54.112
The way to test is just to
drag the workspace in and

142
00:06:54.112 --> 00:06:56.895
see what files it's able to figure out and
map.

143
00:06:56.895 --> 00:06:59.647
So assess support is definitely there.

144
00:06:59.647 --> 00:07:02.083
Mustache support is coming.

145
00:07:02.083 --> 00:07:05.860
Webpack full ecosystem support
is probably a way off.

146
00:07:05.860 --> 00:07:09.516
I would say, it wasn't coming,
except they've just been making these huge

147
00:07:09.516 --> 00:07:11.767
strides lately with
supporting build tools and

148
00:07:11.767 --> 00:07:15.646
then another cool thing to keep in mind is
most of these tools rebuild on file system

149
00:07:15.646 --> 00:07:17.692
change like that you go
in to what them all.

150
00:07:17.692 --> 00:07:19.727
That'll all still work perfectly right,

151
00:07:19.727 --> 00:07:23.636
because any change that you make to your
Sass file will reflect on the file system.

152
00:07:23.636 --> 00:07:27.223
It'll kick off your build again,
so that workflow will work well.

153
00:07:27.223 --> 00:07:31.100
I think the way to think about it is
your styling, this is really great for.

154
00:07:31.100 --> 00:07:34.760
If you're using Sass or
you're using CSS or anything like that,

155
00:07:34.760 --> 00:07:38.483
you can drag those files in and
you can start making changes here and

156
00:07:38.483 --> 00:07:42.497
they'll persist seamlessly when you
get in to your authoring of HTML.

157
00:07:42.497 --> 00:07:45.237
So if you're using React or
View or Angular,

158
00:07:45.237 --> 00:07:49.429
I would guess it's not going to work
all that well for changing HTML.

159
00:07:49.429 --> 00:07:51.533
But it works really well for your CSS.

160
00:07:51.533 --> 00:07:55.117
And also now that things are mapped, it'll
work very well for your JavaScript too.

161
00:07:55.117 --> 00:07:57.309
So you can see the JavaScript
has a green dot.

162
00:07:57.309 --> 00:08:00.881
Any change I make in the sources
will be persisted to disk, as well.

163
00:08:00.881 --> 00:08:01.692
&gt;&gt; Speaker 2: Before you move on to

164
00:08:01.692 --> 00:08:03.140
another panel-
&gt;&gt; Jon Kuperman: Yeah, of course.

165
00:08:03.140 --> 00:08:04.912
&gt;&gt; Speaker 2: The one next to the file

166
00:08:04.912 --> 00:08:09.039
system and that would be persist changes.
&gt;&gt; Jon Kuperman: Yeah, so we've got-

167
00:08:09.039 --> 00:08:09.888
&gt;&gt; Speaker 2: Overrides, overrides.

168
00:08:09.888 --> 00:08:10.989
&gt;&gt; Jon Kuperman: Yep, yeah.

169
00:08:10.989 --> 00:08:14.277
So yeah,
I will go into that in a little bit.

170
00:08:14.277 --> 00:08:16.405
It's pretty cool.

171
00:08:16.405 --> 00:08:17.217
Let me go into that.

172
00:08:17.217 --> 00:08:19.236
I have some things around it
in the debugging section.

173
00:08:19.236 --> 00:08:22.355
But yeah, so with the content scripts and
with your overrides,

174
00:08:22.355 --> 00:08:25.491
you can apply really kind of like
a script monkey back in the day.

175
00:08:25.491 --> 00:08:28.166
You can apply permanent
overrides to different things.

176
00:08:28.166 --> 00:08:31.413
You can apply it out like a global or
like a very narrow scale.

177
00:08:31.413 --> 00:08:37.264
Yeah.
&gt;&gt; Jon Kuperman: Yeah,

178
00:08:37.264 --> 00:08:38.801
so Samara has a great question.

179
00:08:38.801 --> 00:08:41.980
So with the nav element,
why couldn't I persist then?

180
00:08:41.980 --> 00:08:46.224
And so this will be a little bit of a
dive, but I just wanna take a look at it.

181
00:08:46.224 --> 00:08:52.305
So if i look in my layout, so
I use this pug templating language.

182
00:08:52.305 --> 00:08:55.892
I make an element and I give it a class,
so it's like nav.nav.

183
00:08:55.892 --> 00:09:00.907
And then express, my node server runs and
it takes that pug element and

184
00:09:00.907 --> 00:09:04.481
it turns it in runtime into HTML and
sends it down.

185
00:09:04.481 --> 00:09:07.705
And then the browser takes that HTML and
it turns it into this DOM thing,

186
00:09:07.705 --> 00:09:08.847
which I'm seeing here.

187
00:09:08.847 --> 00:09:13.509
And so this is isn't my HTML and
like a good example would be this.

188
00:09:13.509 --> 00:09:16.687
If you've made like a React app or
a view app or whatever,

189
00:09:16.687 --> 00:09:20.542
usually if it's client side rendered,
you only serve with one div.

190
00:09:20.542 --> 00:09:24.090
You'd be like div ID equals root and
that's like what you send down,

191
00:09:24.090 --> 00:09:27.393
that's the HTML you write and
then React kinda mounts on that and

192
00:09:27.393 --> 00:09:29.369
starts making its own dynamic stuff.

193
00:09:29.369 --> 00:09:32.034
So as I would try to
edit an element in here,

194
00:09:32.034 --> 00:09:36.847
Chrome has no way of knowing where that
came from right like Chrome has no way of

195
00:09:36.847 --> 00:09:41.883
knowing that node turned the pub file into
HTML or Chrome has no way of knowing like

196
00:09:41.883 --> 00:09:46.876
which React component is responsible for
creating and mounting that element.

197
00:09:46.876 --> 00:09:50.966
So that kind of thing to think about
is that if you wanna change those kind

198
00:09:50.966 --> 00:09:53.908
of HTML files or
anything like that, you can do so.

199
00:09:53.908 --> 00:09:56.427
But you'd have to go through
the sources this tab open it up and

200
00:09:56.427 --> 00:09:58.181
make changes like an editor, basically.

201
00:09:58.181 --> 00:10:00.841
So basically, these changes don't persist.

202
00:10:00.841 --> 00:10:05.260
The ones on the left hand side, because
they are like these constantly updating,

203
00:10:05.260 --> 00:10:06.488
dynamic, DOM model.

204
00:10:06.488 --> 00:10:08.568
I hope that clears it up a little bit.

205
00:10:08.568 --> 00:10:13.161
The kind of short and sweet to it is the
left size won't persist, the right side

206
00:10:13.161 --> 00:10:15.803
will persist and sources will persist.
&gt;&gt; Speaker 2: This

207
00:10:15.803 --> 00:10:19.402
is very similar to the situation
when you have the CSS that's been

208
00:10:19.402 --> 00:10:21.159
transpiled from Sass.
&gt;&gt; Jon Kuperman: Yeah,

209
00:10:21.159 --> 00:10:24.634
the big thing is that
Chrome DevTools has Sass support.

210
00:10:24.634 --> 00:10:26.945
So it's just understands Sass.

211
00:10:26.945 --> 00:10:31.368
It doesn't understand and
I guess with my particular app,

212
00:10:31.368 --> 00:10:35.087
it has no way of understanding
server side stuff.

213
00:10:35.087 --> 00:10:36.423
So it couldn't understand note,

214
00:10:36.423 --> 00:10:39.053
because it doesn't even know that
note is what's surrounding it.

215
00:10:39.053 --> 00:10:42.190
It just hits an endpoint and
gets back at HTML.

216
00:10:42.190 --> 00:10:45.651
It has no idea where that HTML,
how it's generated.

217
00:10:45.651 --> 00:10:47.089
No, so it used to be.

218
00:10:47.089 --> 00:10:50.936
So the way that the workspaces used to
work was you would drag the folder in,

219
00:10:50.936 --> 00:10:52.172
nothing would happen.

220
00:10:52.172 --> 00:10:54.653
And then as you would open files,
maybe it would suggest.

221
00:10:54.653 --> 00:10:57.196
It would be like I think this is this or
I think.

222
00:10:57.196 --> 00:10:58.561
And you'd be like yeah, totally.

223
00:10:58.561 --> 00:11:00.471
Nowadays, it's like really intelligent.

224
00:11:00.471 --> 00:11:01.633
You just drag the folder in.

225
00:11:01.633 --> 00:11:03.377
Everything that can go
green goes green and

226
00:11:03.377 --> 00:11:07.952
you're good to go.
&gt;&gt; Jon Kuperman: Can

227
00:11:07.952 --> 00:11:10.708
you do the elements tab and
the sources tab at the same time?

228
00:11:10.708 --> 00:11:12.042
No, you cannot.

229
00:11:12.042 --> 00:11:16.345
The only dual tabs that you can do are you
can open the console drawer over any

230
00:11:16.345 --> 00:11:17.041
other tab.

