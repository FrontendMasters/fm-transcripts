WEBVTT

1
00:00:00.822 --> 00:00:03.437
&gt;&gt; Jon Kuperman: All right, for this
one we have kinda two options here for

2
00:00:03.437 --> 00:00:05.930
how to figure out if there's
a memory leak on a page.

3
00:00:05.930 --> 00:00:08.753
We can use the Task Manager
that I showed earlier, or

4
00:00:08.753 --> 00:00:12.102
we can use the performance panel and
the memory section of it.

5
00:00:12.102 --> 00:00:13.949
They're really both just
as good as each other.

6
00:00:13.949 --> 00:00:16.720
I'm gonna use the Task Manager, I think
I find it a little bit easier to read.

7
00:00:17.900 --> 00:00:22.445
So I'm gonna ahead and
open up this Task Manager here.

8
00:00:22.445 --> 00:00:25.343
And make sure you have the JavaScript
memory turned on, and so

9
00:00:25.343 --> 00:00:28.909
we can kinda see over here as JavaScript
memory goes, you wanna top down, so

10
00:00:28.909 --> 00:00:31.722
we're seeing which tabs have
the most JavaScript memory.

11
00:00:31.722 --> 00:00:36.044
So yeah, so we're kind of gonna go to the
first one here, and go back over here and

12
00:00:36.044 --> 00:00:38.220
see how the JavaScript memory is doing.

13
00:00:38.220 --> 00:00:43.030
Looks like we're at 12,000 and
it's staying pretty stable.

14
00:00:43.030 --> 00:00:47.045
So then we'll go to the second page and
pack over the JavaScript memory, and

15
00:00:47.045 --> 00:00:51.470
it goes up to 14, but then it just
stables back out and stays still.

16
00:00:51.470 --> 00:00:54.462
So I'm gonna go to the third one here, and

17
00:00:54.462 --> 00:00:59.431
looks like this one goes up to 12,000,
and now 15,017.

18
00:00:59.431 --> 00:01:02.150
So it's long and we stay here, so
this is a really good candidate,

19
00:01:02.150 --> 00:01:03.477
it's just shot to the top here.

20
00:01:03.477 --> 00:01:05.139
So this one definitely has a memory leak.

21
00:01:05.139 --> 00:01:09.864
If we wanted to just check to be thorough,
this fourth one,

22
00:01:09.864 --> 00:01:16.303
we can go through this one as well, and
just see that it is staying really stable.

23
00:01:16.303 --> 00:01:20.537
So this one looks like it loads
about 18,000, and then just stays.

24
00:01:20.537 --> 00:01:24.005
So given that, it's the third one,
we'll go back through here.

25
00:01:24.005 --> 00:01:25.580
We can open up the DevTools.

26
00:01:25.580 --> 00:01:29.033
If we wanted to, we can do a performance
thing, see that there's a memory leak, but

27
00:01:29.033 --> 00:01:32.770
since we're pretty confident at this
point, I'll just take a heap snapshot.

28
00:01:32.770 --> 00:01:34.811
So I go ahead and record that.

29
00:01:34.811 --> 00:01:36.221
And as this finishes up,

30
00:01:36.221 --> 00:01:40.010
we just kinda wanna see what
has the biggest shallow size.

31
00:01:40.010 --> 00:01:43.341
So again, the biggest shallow size we see
that we're getting all these strings,

32
00:01:43.341 --> 00:01:45.659
these strings are getting
populated from somewhere, so

33
00:01:45.659 --> 00:01:47.030
you can kinda drill down into it.

34
00:01:47.030 --> 00:01:51.426
You can click on one of them, you can
see that they are coming from here,

35
00:01:51.426 --> 00:01:55.628
inside an array, inside the window object,
inside the document.

36
00:01:55.628 --> 00:01:59.295
And anyway, you can see they're coming
from inside this init function.

37
00:01:59.295 --> 00:02:01.954
So if we were to go back
over into our code base and

38
00:02:01.954 --> 00:02:05.943
take a look at the file here, we can
see that we have this init function,

39
00:02:05.943 --> 00:02:09.680
it's calling grow,
just pushing a bunch of stuff in there.

40
00:02:09.680 --> 00:02:13.494
Again, the thing that's a little bit
unfortunate about the memory leak process

41
00:02:13.494 --> 00:02:17.307
is that don't get that same one-to-one
mapping that you get in the profile, so

42
00:02:17.307 --> 00:02:19.963
you can't say like,
where is this string coming from?

43
00:02:19.963 --> 00:02:21.180
What line of code is it?

44
00:02:21.180 --> 00:02:22.894
Cuz it's not really
looking at it that way.

45
00:02:22.894 --> 00:02:26.580
It's really looking at it over time,
how much memory is being used and

46
00:02:26.580 --> 00:02:27.610
what's going in it.

47
00:02:27.610 --> 00:02:30.780
It doesn't keep references to what
triggered it or what caused it.

48
00:02:30.780 --> 00:02:34.412
Whereas the JavaScript CPU,
there's a one-to-one relationship, right?

49
00:02:34.412 --> 00:02:38.302
It's your code that's triggering stuff,
so it's pretty easy to go back and forth.

50
00:02:38.302 --> 00:02:41.178
But you can get a lot of context
clues here, like what type it is,

51
00:02:41.178 --> 00:02:44.286
what it's being stuck inside of,
like an array, things like that.

52
00:02:44.286 --> 00:02:47.493
And you can kinda use that to try
to identify where it's coming from.

53
00:02:47.493 --> 00:02:49.750
If you do ever see that
DOM nodes are the problem,

54
00:02:49.750 --> 00:02:51.414
those ones are a little bit easier.

55
00:02:51.414 --> 00:02:54.079
You can click on any DOM
node in this list here, and

56
00:02:54.079 --> 00:02:58.490
then you can do that dollar sign zero
trick that we learned back from over here.

57
00:02:58.490 --> 00:03:02.362
And it'll bring the DOM node that
you've clicked on into the memory,

58
00:03:02.362 --> 00:03:03.910
into the console.

59
00:03:03.910 --> 00:03:05.890
But if you're dealing with primitives,
like strings,

60
00:03:05.890 --> 00:03:08.652
or arrays, or something like that,
you're gonna have to just take the hints,

61
00:03:08.652 --> 00:03:11.319
and then start looking through your
code and see what might be causing them.

