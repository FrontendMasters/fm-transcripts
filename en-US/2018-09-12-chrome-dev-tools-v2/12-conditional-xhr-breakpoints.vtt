WEBVTT

1
00:00:00.070 --> 00:00:01.850
&gt;&gt; Speaker 1: Another great thing,
conditional breakpoints.

2
00:00:01.850 --> 00:00:05.030
This is another one that I added cuz

3
00:00:05.030 --> 00:00:07.510
I've seen people really
struggle with this before.

4
00:00:07.510 --> 00:00:12.206
As you abstract your code and you make
reusable functions, a lot of times you'll

5
00:00:12.206 --> 00:00:16.558
be getting, as a hypothetical,
you have an Ajax call that's failing, or

6
00:00:16.558 --> 00:00:19.615
something like that, or
it's got some undefined.

7
00:00:19.615 --> 00:00:22.830
You're trying to see, like users.name, and
it's like, users doesn't have a name, or

8
00:00:22.830 --> 00:00:25.360
something like that,
where you're seeing this error.

9
00:00:25.360 --> 00:00:28.640
So you're like, I wanna put a breakpoint
right where I call users.name

10
00:00:28.640 --> 00:00:30.530
to see what users does have, right?

11
00:00:30.530 --> 00:00:33.370
But maybe that function
isn't just called once.

12
00:00:33.370 --> 00:00:36.660
Maybe you call it a thousand
times in your application.

13
00:00:36.660 --> 00:00:38.220
Let's say it's an Ajax wrapper, right?

14
00:00:38.220 --> 00:00:42.144
So you have this little helper function
that does all of your Ajax calls.

15
00:00:42.144 --> 00:00:45.059
And you only want it to stop when
you're doing the user Ajax call, right?

16
00:00:45.059 --> 00:00:47.414
So you can think of
concepts where you're like,

17
00:00:47.414 --> 00:00:49.775
I only want you to stop
when a condition is met.

18
00:00:49.775 --> 00:00:52.832
They have this really cool thing
called conditional breakpoints.

19
00:00:52.832 --> 00:00:56.740
So you can right-click on a line number,
and you can add a conditional breakpoint.

20
00:00:56.740 --> 00:00:58.850
And now you can,
if really well written, it says,

21
00:00:58.850 --> 00:01:01.820
the breakpoint on Line 2 will only
stop if this expression is true.

22
00:01:01.820 --> 00:01:05.890
So we could do something like foo === foo,
right?

23
00:01:05.890 --> 00:01:08.000
And now we have a yellow breakpoint here.

24
00:01:08.000 --> 00:01:12.090
So if we refresh, we know foo = foo,
so it'll stop there like normal.

25
00:01:12.090 --> 00:01:16.477
But if we go back to our code and change
this to bar, so we're calling it with bar

26
00:01:16.477 --> 00:01:20.750
now, and then refresh, you'll see
that it's not stopping here anymore.

27
00:01:20.750 --> 00:01:21.920
It just reloads the whole page.

28
00:01:23.450 --> 00:01:25.489
So those are mostly useful in situations.

29
00:01:25.489 --> 00:01:27.253
You definitely will run into this.

30
00:01:27.253 --> 00:01:30.420
You'll put a breakpoint on a line,
and then you'll refresh the page, and

31
00:01:30.420 --> 00:01:31.537
it's like no, not that.

32
00:01:31.537 --> 00:01:34.071
You're hitting play, play, play, and
it just keeps calling the same line.

33
00:01:34.071 --> 00:01:37.003
And you're like, I only want you
to stop when a condition is met.

34
00:01:37.003 --> 00:01:38.880
Conditional breakpoints are great for
that.

35
00:01:38.880 --> 00:01:42.445
In a similar vein,
we have XHR breakpoints.

36
00:01:42.445 --> 00:01:46.441
So this is another really cool one,
where you're not sure where.

37
00:01:46.441 --> 00:01:49.326
Again, this goes back
into the DOM breakpoints.

38
00:01:49.326 --> 00:01:51.744
So you're not sure where the code is,
right, but

39
00:01:51.744 --> 00:01:53.594
you know what is going wrong, right?

40
00:01:53.594 --> 00:01:56.219
So if you have an infinite scrolling
website that pulls for updates and

41
00:01:56.219 --> 00:01:59.199
you know there's something wrong with
that update pull, but you don't really

42
00:01:59.199 --> 00:02:02.460
know where that lives, right, cuz you're
new to the code base or whatever.

43
00:02:02.460 --> 00:02:05.050
You can go down here into
these XHR breakpoints and

44
00:02:05.050 --> 00:02:09.150
then you can quite simply say,
whenever we do a request for

45
00:02:09.150 --> 00:02:14.240
a URL, stop if the URL contains a string.

46
00:02:14.240 --> 00:02:19.610
So I've got one here that's calling this
api a point over and over and over again.

47
00:02:19.610 --> 00:02:23.970
So if I were to put, okay,
stop if you do something that calls api,

48
00:02:23.970 --> 00:02:25.680
we can see that it stops right here.

49
00:02:27.100 --> 00:02:30.581
And then we can see that we've got,
sorry, my thought is a little split.

50
00:02:30.581 --> 00:02:34.612
So we did stop when you see
a fetch happen for the word api.

51
00:02:34.612 --> 00:02:35.610
It hit it right away.

52
00:02:35.610 --> 00:02:36.530
We stopped, right?

53
00:02:36.530 --> 00:02:40.060
But we'll see over here in the call stack,
there's VM and stuff, right?

54
00:02:40.060 --> 00:02:40.833
This isn't our file.

55
00:02:40.833 --> 00:02:42.524
This isn't what we wanna be debugging,
right?

56
00:02:42.524 --> 00:02:46.463
This is like some, I don't know,
some Chrome code, or something like that.

57
00:02:46.463 --> 00:02:49.072
The fetch implementation
is probably what it is.

58
00:02:49.072 --> 00:02:52.121
But we can look in the call stack and what
we wanna do is find your files, right?

59
00:02:52.121 --> 00:02:53.674
You wanna find the stuff
that you're working on.

60
00:02:53.674 --> 00:02:55.130
So we can see our file here.

61
00:02:55.130 --> 00:02:57.456
So we can step through
the call stack like this and

62
00:02:57.456 --> 00:02:59.520
we can find the exact line of code.

63
00:02:59.520 --> 00:03:01.940
This example is really contrived cuz
we only have one JavaScript file.

64
00:03:01.940 --> 00:03:03.500
But you can imagine a really big app,

65
00:03:03.500 --> 00:03:07.520
where you're like, I have no idea where
the update settings call happens.

66
00:03:07.520 --> 00:03:09.302
I'm sure it has the word
settings in it somewhere.

67
00:03:09.302 --> 00:03:12.162
So you can set this conditional
breakpoint, and magically,

68
00:03:12.162 --> 00:03:15.070
it'll show you what line of
code is responsible for that.

69
00:03:15.070 --> 00:03:19.060
Unlike the step through debugger,
the call stack is time travelling.

70
00:03:19.060 --> 00:03:21.260
So you can go down into here and
you can see,

71
00:03:21.260 --> 00:03:24.620
and then you can go back up into here,
and you can go back down into here.

72
00:03:24.620 --> 00:03:27.200
So you can step back or
forth through the whole call stack.

73
00:03:27.200 --> 00:03:28.466
It persists all of that.

74
00:03:28.466 --> 00:03:32.060
And while you're in the call stack,
you can use watch, right?

75
00:03:32.060 --> 00:03:35.323
So if we had a local variable in here,
we could add a watch for it, and

76
00:03:35.323 --> 00:03:39.184
it wouldn't exist outside, but it would
exist inside, that kind of concept.

77
00:03:39.184 --> 00:03:40.701
So you can start combining these things.

78
00:03:40.701 --> 00:03:42.700
You set an XHR breakpoint.

79
00:03:42.700 --> 00:03:43.750
It gets you in there.

80
00:03:43.750 --> 00:03:45.150
You can see the whole call stack.

81
00:03:45.150 --> 00:03:47.460
Start stepping through the call stack,
watching variables.

82
00:03:47.460 --> 00:03:50.800
You can really see what's
going on with your code.

83
00:03:50.800 --> 00:03:52.670
I don't like being prescriptive.

84
00:03:52.670 --> 00:03:54.970
A lot of people are like,
you should never use console log.

85
00:03:54.970 --> 00:03:56.010
You should use debuggers.

86
00:03:56.010 --> 00:03:57.717
I still think console
logging is an awesome way

87
00:03:57.717 --> 00:03:59.083
of debugging your JavaScript code.

88
00:03:59.083 --> 00:04:01.920
That's the cool thing about websites,
just refresh and it's there.

89
00:04:01.920 --> 00:04:04.490
But when you're starting to get really
frustrated and you've got a bunch of

90
00:04:04.490 --> 00:04:06.940
different console logs and
they're firing all over the place and

91
00:04:06.940 --> 00:04:08.880
things like that,
the step through debugger,

92
00:04:08.880 --> 00:04:12.750
it's just such a great tool that seriously
take a minute and fully understand

93
00:04:12.750 --> 00:04:16.033
how your code's working, what it has
access to, all those kinda things.

