WEBVTT

1
00:00:00.000 --> 00:00:02.626
&gt;&gt; Jon Kuperman: All right,
so this page needs an audit.

2
00:00:02.626 --> 00:00:03.715
It really does.

3
00:00:03.715 --> 00:00:08.664
You can just tell by refreshing it
that some things are terribly awry.

4
00:00:08.664 --> 00:00:11.340
So for this one, we have two options.

5
00:00:11.340 --> 00:00:16.685
We could use, since I put the site
up in masteringdevtools.com,

6
00:00:16.685 --> 00:00:20.312
we could use one of
those external services,

7
00:00:20.312 --> 00:00:23.498
like sonar wall or,
&gt;&gt; Jon Kuperman: WebHS, but

8
00:00:23.498 --> 00:00:26.449
since this is local,
I'm just gonna use my house tools.

9
00:00:26.449 --> 00:00:28.656
They also happen to be my favorite.

10
00:00:28.656 --> 00:00:33.102
So yeah, probably just do a performance
audit to start off and do Run audit.

11
00:00:33.102 --> 00:00:35.545
It does the refresh for
me in the background,

12
00:00:35.545 --> 00:00:38.390
and then it starts compiling
all that information.

13
00:00:39.890 --> 00:00:45.096
Again, I think this is just a really great
place to start because people are like,

14
00:00:45.096 --> 00:00:50.001
we see a lot, especially online,
about these small optimizations of things

15
00:00:50.001 --> 00:00:54.226
you can do with JavaScript to be
a little bit more scope hoisting and

16
00:00:54.226 --> 00:00:55.837
all the stuff like that.

17
00:00:55.837 --> 00:00:58.831
And those are really great, but
I think those should only be done after

18
00:00:58.831 --> 00:01:01.740
you've done your initial sweep,
and how are your images looking?

19
00:01:01.740 --> 00:01:03.710
How big are your CSS and
JavaScript bundles?

20
00:01:03.710 --> 00:01:05.950
You know, these very basic things.

21
00:01:05.950 --> 00:01:09.340
So I really like the audit as
a first place to start before you

22
00:01:09.340 --> 00:01:12.175
go down the rabbit hole of these
micro-optimizations or looking for

23
00:01:12.175 --> 00:01:12.815
memory leaks.

24
00:01:12.815 --> 00:01:15.075
First, just be like, how big is the site?

25
00:01:15.075 --> 00:01:19.308
Is there anything that I could do in
an hour that's gonna make a massive

26
00:01:19.308 --> 00:01:20.975
improvement on load time?

27
00:01:20.975 --> 00:01:25.026
So when this is loading, it has all these
cool little pieces of information, again,

28
00:01:25.026 --> 00:01:28.853
some of those stuff, like Google's been
collecting a lot of data on mobile use,

29
00:01:28.853 --> 00:01:31.917
on Internet speed,
on the percent of the world that's online.

30
00:01:31.917 --> 00:01:33.307
And the more you read about that,

31
00:01:33.307 --> 00:01:37.310
the more it's like, okay, well,
how does my site look on a 2G connection?

32
00:01:37.310 --> 00:01:39.397
Wow, 30 seconds to load.

33
00:01:39.397 --> 00:01:43.037
It's these kinda things, where if you're
building something, especially if you're

34
00:01:43.037 --> 00:01:47.110
in social network or you're building a
very public app that you want the world to

35
00:01:47.110 --> 00:01:51.520
use and it's that slow, that's gonna be
a really big barrier to entry for people.

36
00:01:52.750 --> 00:01:54.001
Cool, so it's loaded.

37
00:01:54.001 --> 00:01:55.280
I've got 71 out of 100.

38
00:01:55.280 --> 00:01:56.860
That's passing, right?

39
00:01:56.860 --> 00:02:00.650
I think I'm proud of that, great.

40
00:02:00.650 --> 00:02:06.370
So yeah, first meaningful paint at 270 ms,
that really isn't that bad.

41
00:02:06.370 --> 00:02:10.560
The problem, if we look at the screenshot
here, is that none of the images

42
00:02:10.560 --> 00:02:13.614
are there, and the images are pretty
vital to this experience, right?

43
00:02:13.614 --> 00:02:16.480
They also move things around,
move the page around.

44
00:02:16.480 --> 00:02:23.467
So the first interactive is
also really not bad, 520 ms.

45
00:02:23.467 --> 00:02:26.807
So what we've seen with the screenshots,
right,

46
00:02:26.807 --> 00:02:30.310
is that there's nothing along here,
and then boom!

47
00:02:30.310 --> 00:02:33.250
The HTML and CSS, they load
really quickly, and that's great.

48
00:02:33.250 --> 00:02:36.990
And for a split second there, you're able
to click around, do something like that.

49
00:02:36.990 --> 00:02:38.636
And then we start getting
into trouble here.

50
00:02:38.636 --> 00:02:40.802
We start loading these big images in.

51
00:02:40.802 --> 00:02:44.680
They're not coming in asynchronously,
and it just blocks up the thread again.

52
00:02:44.680 --> 00:02:47.743
So you get a little moment where you
can be interactive, and then for

53
00:02:47.743 --> 00:02:50.781
the rest of the whole time with the audit,
it was not interactive.

54
00:02:50.781 --> 00:02:53.003
It even says,
your page took too long to load.

55
00:02:53.003 --> 00:02:57.423
So that'd be a big thing is making sure
that the site stays interactive at this

56
00:02:57.423 --> 00:03:00.305
point, and
we do that a couple of different ways.

57
00:03:00.305 --> 00:03:02.913
Offscreen images, I really like this.

58
00:03:02.913 --> 00:03:04.656
So it's just like you have these images.

59
00:03:04.656 --> 00:03:07.460
The user can't even see
everything you're loading.

60
00:03:07.460 --> 00:03:09.810
You're literally making them wait for
stuff they can't even see.

61
00:03:09.810 --> 00:03:12.340
It might be a little misleading,
cuz probably,

62
00:03:12.340 --> 00:03:14.169
what we should do is just
size down these images.

63
00:03:16.150 --> 00:03:17.614
They're not fully offscreen.

64
00:03:17.614 --> 00:03:20.490
They're just partially offscreen,
but it's good information.

65
00:03:20.490 --> 00:03:22.840
Properly sizing images.

66
00:03:22.840 --> 00:03:25.240
So again,
these percentages are huge, right?

67
00:03:25.240 --> 00:03:30.232
You could size these to be the space
they're actually taking up,

68
00:03:30.232 --> 00:03:34.328
and you would save 50,
60, almost 70% here.

69
00:03:34.328 --> 00:03:36.845
Has enormous network payloads.

70
00:03:36.845 --> 00:03:38.343
The total was 9 megabytes.

71
00:03:38.343 --> 00:03:41.027
That's totally, totally unacceptable.

72
00:03:41.027 --> 00:03:45.574
It's huge, I think people
are always throwing numbers away.

73
00:03:45.574 --> 00:03:48.893
But I've heard, I think,
people from the Chrome team talking about.

74
00:03:48.893 --> 00:03:52.929
I might get this wrong, but
I think it's around 250 KB or

75
00:03:52.929 --> 00:03:56.176
something like that for
your critical render.

76
00:03:56.176 --> 00:03:59.175
And that will be after GZIP so
you have more room to work with.

77
00:03:59.175 --> 00:04:02.458
But anyway, we should try to get it
a lot smaller, like Mark was talking

78
00:04:02.458 --> 00:04:05.719
about before with frontendmasters.com,
where they inline stuff.

79
00:04:05.719 --> 00:04:08.840
They have this really critical bundle,
send that down to page loads.

80
00:04:08.840 --> 00:04:11.200
And then they start doing their work,
right, cuz at that point,

81
00:04:11.200 --> 00:04:11.920
the user is happy.

82
00:04:11.920 --> 00:04:13.580
They can see stuff, they can read stuff.

83
00:04:13.580 --> 00:04:17.240
Now you can load in those images and
polish up the experience.

84
00:04:17.240 --> 00:04:18.582
So yeah, these images are huge.

85
00:04:18.582 --> 00:04:20.260
They took a super long
time to come through.

86
00:04:21.740 --> 00:04:23.150
And I think if we go back over,

87
00:04:23.150 --> 00:04:25.620
there's some other tools that
can help with this audit.

88
00:04:25.620 --> 00:04:29.435
So if we go to the Elements panel and
we look inside of these images,

89
00:04:29.435 --> 00:04:30.877
you get this cool thing.

90
00:04:30.877 --> 00:04:34.930
So it shows you how big the image is
currently on the screen right now.

91
00:04:34.930 --> 00:04:38.315
And it shows you how big the image
is that you're sending down.

92
00:04:38.315 --> 00:04:43.310
So our max screen width is 1280 pixels,
but we're sending down a 4700 pixel image,

93
00:04:43.310 --> 00:04:44.601
right, so it's huge.

94
00:04:44.601 --> 00:04:47.379
So the things that we'd
wanna do here to fix this.

95
00:04:47.379 --> 00:04:49.971
We'd wanna, first of all,
take all those images and

96
00:04:49.971 --> 00:04:52.090
size them down to be the correct size.

97
00:04:52.090 --> 00:04:55.790
Then we'd wanna run them through some
kinda image optimization, which is gonna,

98
00:04:55.790 --> 00:04:58.330
whenever you make images and
whenever you edit them with programs,

99
00:04:58.330 --> 00:05:01.310
they leave behind all this meta
information, like its name,

100
00:05:01.310 --> 00:05:05.950
its size, last modified date, all this
stuff that you use in your file system.

101
00:05:05.950 --> 00:05:09.390
But the web doesn't need that, so you can
strip all that out and get big savings.

102
00:05:09.390 --> 00:05:12.780
The next thing we'd wanna do is go to
our server and GZIP everything, right?

103
00:05:12.780 --> 00:05:14.760
You'd wanna compress
everything that you have.

104
00:05:14.760 --> 00:05:17.989
There's some really cool websites out
there that can help you see how many of

105
00:05:17.989 --> 00:05:19.509
your things are being compressed.

106
00:05:19.509 --> 00:05:20.820
They really should all be.

107
00:05:20.820 --> 00:05:24.162
It's usually pretty easy to
enable compression on your site.

108
00:05:24.162 --> 00:05:28.225
So if you're using something like PHP and
you have an Apache config, there's just

109
00:05:28.225 --> 00:05:32.450
a GZIP Apache plugin that you can install
and just be like, GZIP all the things.

110
00:05:32.450 --> 00:05:36.026
If you're using Node,
whatever framework you're using,

111
00:05:36.026 --> 00:05:38.960
there's definitely
a compression plugin for.

112
00:05:38.960 --> 00:05:41.066
So if you need express,
there's one that's called compress.

113
00:05:41.066 --> 00:05:43.744
And you just do app.compress and
it just compresses everything.

114
00:05:43.744 --> 00:05:45.630
So for those unfamiliar,

115
00:05:45.630 --> 00:05:50.180
GZIP is a compression format
that the browers can decompress.

116
00:05:50.180 --> 00:05:53.872
And so that means that it's just a way
that you can make files smaller on

117
00:05:53.872 --> 00:05:54.624
the server and

118
00:05:54.624 --> 00:05:58.710
the browser knows how to make them back
into regular file when they come down.

119
00:05:58.710 --> 00:06:00.714
So you get these huge savings for free.

120
00:06:00.714 --> 00:06:02.068
There's a bunch of really
cool proposals now.

121
00:06:02.068 --> 00:06:04.864
There's more compression
formats that we can use.

122
00:06:04.864 --> 00:06:08.345
So some people may have heard of Brotli,
or there's one new one.

123
00:06:08.345 --> 00:06:11.010
I think it came up in the DevTools Audit.

124
00:06:11.010 --> 00:06:14.460
I can't remember what the other one is
called, but there's a few different ones.

125
00:06:14.460 --> 00:06:15.670
Those are all great.

126
00:06:15.670 --> 00:06:18.630
Whatever your server can support
would be totally awesome.

127
00:06:18.630 --> 00:06:20.747
I think the newer ones
are a little bit better, but

128
00:06:20.747 --> 00:06:23.634
doing it is just such an order of
magnitude better than not doing it.

129
00:06:23.634 --> 00:06:27.209
So finding some way to compress all your
stuff on your server should be a pretty

130
00:06:27.209 --> 00:06:28.190
huge win.

131
00:06:28.190 --> 00:06:29.690
Other than that,

132
00:06:29.690 --> 00:06:32.380
we can see we're sending down
libraries that we're not really using.

133
00:06:33.460 --> 00:06:40.216
So if we go and do a best practices audit

134
00:06:40.216 --> 00:06:50.163
here,
&gt;&gt; Jon Kuperman: We can get

135
00:06:50.163 --> 00:06:52.296
a bunch of other information about, like
things that we could just be doing better.

136
00:06:52.296 --> 00:06:54.486
But I would say, typically,

137
00:06:54.486 --> 00:06:59.300
the biggest thing that you're
gonna see is stuff is too big.

138
00:06:59.300 --> 00:07:00.672
And so if your images are too big,

139
00:07:00.672 --> 00:07:02.938
there's a lot that you can
do that's really helpful.

140
00:07:02.938 --> 00:07:04.994
If your JavaScript is too big,
it gets a little harder, but

141
00:07:04.994 --> 00:07:07.272
the thing that you'd wanna do is
split out your modules, right?

142
00:07:07.272 --> 00:07:09.437
You wanna have your critical
rendering stuff and

143
00:07:09.437 --> 00:07:11.740
then lazily asynchronously load the rest.

144
00:07:11.740 --> 00:07:14.860
Same with CSS, if you can split it out and
load the rest.

145
00:07:16.330 --> 00:07:17.237
And then on top of all that,

146
00:07:17.237 --> 00:07:19.570
you should also just make sure that
you're compressing everything.

147
00:07:19.570 --> 00:07:22.530
So really, the name of the game with a lot
of that load performance stuff is just

148
00:07:22.530 --> 00:07:26.840
getting as little as you need to send and
compressing it as much as possible.

149
00:07:26.840 --> 00:07:29.679
Yeah, I like this statistic.

150
00:07:29.679 --> 00:07:32.983
75% of global users around 3G or
worse connections is when you

151
00:07:32.983 --> 00:07:37.126
start thinking about how slow that really
is, or if it takes five seconds to load on

152
00:07:37.126 --> 00:07:41.140
this great connection,
it's gonna take a lot longer to load.

153
00:07:41.140 --> 00:07:45.000
So again, you could use HTTP/2 if your
server, your CDN supports it, again,

154
00:07:45.000 --> 00:07:48.170
with these vulnerabilities that
we can remove, things like that.

155
00:07:48.170 --> 00:07:49.510
Those are all wins there.

156
00:07:49.510 --> 00:07:51.590
Again, not chasing for the perfect 100,

157
00:07:51.590 --> 00:07:54.390
but just seeing how much stuff we could
probably knock out in a day, right?

158
00:07:54.390 --> 00:07:58.350
We can add compression, shrink the images,
remove their metadata, and

159
00:07:58.350 --> 00:07:59.490
remove unnecessary scripts.

160
00:07:59.490 --> 00:08:02.360
We can probably do that in an afternoon
and get huge wins out of that.

161
00:08:03.520 --> 00:08:05.205
Any questions on the auditing tools?

162
00:08:08.696 --> 00:08:09.574
&gt;&gt; Jon Kuperman: Somebody put it in chat.

163
00:08:09.574 --> 00:08:11.820
Zopfli, that's exactly
what I was thinking of.

164
00:08:11.820 --> 00:08:12.882
That's the new compression.

165
00:08:12.882 --> 00:08:17.720
So there's GZIP, and then Brotli, and then
Zopfli, I don't know how to pronounce it.

166
00:08:17.720 --> 00:08:18.890
But they're all great.

167
00:08:18.890 --> 00:08:20.854
It's just up to what your server supports.

168
00:08:20.854 --> 00:08:25.305
Cool, so yeah, the most common stuff that
we see when we do these audits is combine

169
00:08:25.305 --> 00:08:28.349
your scripts together,
your CSS and your JavaScript.

170
00:08:28.349 --> 00:08:30.887
Enable compression, compress your images.

171
00:08:30.887 --> 00:08:32.600
Browser caching is another one.

172
00:08:32.600 --> 00:08:34.800
Just make sure that if you're
doing fetch request for

173
00:08:34.800 --> 00:08:37.460
things that you have a cache,
say, in cache settings, so

174
00:08:37.460 --> 00:08:41.170
that if you have to fetch again,
it'll just read from disk.

175
00:08:42.310 --> 00:08:43.974
Make sure your CSS goes
in the document head.

176
00:08:43.974 --> 00:08:48.822
And then a lot of things, like when we
use these JavaScript or CSS libraries,

177
00:08:48.822 --> 00:08:51.890
they're often a lot more
than we actually need.

178
00:08:51.890 --> 00:08:54.050
So a lot of people
are including all of Bootstrap,

179
00:08:54.050 --> 00:08:56.640
and they're only using the navigation and
the grid.

180
00:08:57.870 --> 00:09:01.060
So finding some kind of build system
that can do dead code elimination.

181
00:09:01.060 --> 00:09:04.460
There's a bunch of really great courses
on Frontend Masters around Webpack.

182
00:09:04.460 --> 00:09:07.730
Webpack's a really powerful bundling
tool that can really help you,

183
00:09:07.730 --> 00:09:09.210
like dead code eliminate,

184
00:09:09.210 --> 00:09:12.720
split your modules out, really help you
get your website going really quickly.

185
00:09:12.720 --> 00:09:14.320
I highly recommend those courses.

