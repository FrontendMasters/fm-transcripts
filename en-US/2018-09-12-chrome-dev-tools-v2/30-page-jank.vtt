WEBVTT

1
00:00:00.040 --> 00:00:01.516
&gt;&gt; Jon Kuperman: So
the next thing, profiling.

2
00:00:01.516 --> 00:00:03.560
So we're kinda getting into
the last two chapters,

3
00:00:03.560 --> 00:00:05.600
which are CPU profiling and memory.

4
00:00:06.720 --> 00:00:10.645
So for profiling, there's this really
great article on real time JavaScript

5
00:00:10.645 --> 00:00:15.080
cost by Addy Osmani,
who works for Google, and

6
00:00:15.080 --> 00:00:18.060
he has this drawing that he put in
his blog post that I really like.

7
00:00:18.060 --> 00:00:21.730
Cuz I think it gives some deeper
understanding in what's going on here.

8
00:00:21.730 --> 00:00:23.900
So it's basically,
it's like how do browsers work.

9
00:00:23.900 --> 00:00:26.590
And so VA, for those that don't know
that's the rendering engine and

10
00:00:26.590 --> 00:00:29.160
in Chrome, so every browser
has its own rendering engine,

11
00:00:29.160 --> 00:00:30.900
and that makes all the heavy lifting,
right?

12
00:00:30.900 --> 00:00:33.330
It takes your text,
your JavaScript text, and

13
00:00:33.330 --> 00:00:36.000
it figures out how to put things
on a screen, and move them around.

14
00:00:36.000 --> 00:00:39.847
It does all this optimizations,
it's like this full like compiler, and

15
00:00:39.847 --> 00:00:41.720
so, this is a really cute drawing.

16
00:00:41.720 --> 00:00:43.669
So it's like take your JS,
so whatever you write.

17
00:00:43.669 --> 00:00:47.215
And they parse it, and
they turn it into an abstract syntax tree,

18
00:00:47.215 --> 00:00:48.642
which is a compiler term.

19
00:00:48.642 --> 00:00:50.713
I don't know if anybody's ever
messed around with Babbel before.

20
00:00:50.713 --> 00:00:52.742
They also use abstract syntax trees.

21
00:00:52.742 --> 00:00:55.282
It's basically into this tree
that you can kinda walk.

22
00:00:55.282 --> 00:01:00.481
It's very similar to how the elements
panel turns HDML into a DOM tree.

23
00:01:00.481 --> 00:01:02.552
So it's like kind of this text to tree.

24
00:01:02.552 --> 00:01:04.972
It kind of explodes
this interactive thing.

25
00:01:04.972 --> 00:01:06.600
So it turn it into an AST.

26
00:01:06.600 --> 00:01:11.414
They optimize it with these multi level,
really complicated compilers that have

27
00:01:11.414 --> 00:01:16.530
a quick optimize, and a slow optimize,
they all do the speculative optimization.

28
00:01:16.530 --> 00:01:20.670
The generate byte code, and
that byte code is what actually needs for

29
00:01:20.670 --> 00:01:22.780
a processor for your CPU to run.

30
00:01:22.780 --> 00:01:26.015
So it's kind of this like process is
happening, but it means something,

31
00:01:26.015 --> 00:01:30.420
cuz I think that, as we study performance,
we talk a lot about size, like file size,

32
00:01:30.420 --> 00:01:33.120
like how big is your JavaScript file,
and that's really important.

33
00:01:33.120 --> 00:01:36.350
But we really need to keep in mind that
no matter what you're sending over,

34
00:01:36.350 --> 00:01:37.290
it has to be parsed.

35
00:01:37.290 --> 00:01:39.220
And parse time is a real cost, as well.

36
00:01:39.220 --> 00:01:42.870
So this parse time is after the file
comes down, how long does it take for

37
00:01:42.870 --> 00:01:45.340
this little happy process to happen,
right?

38
00:01:45.340 --> 00:01:47.140
And a lot of things can affect this.

39
00:01:47.140 --> 00:01:49.940
So one thing is, we can g-zip,
and we can minify,

40
00:01:49.940 --> 00:01:51.940
and it makes our file size smaller,
that's a great win.

41
00:01:51.940 --> 00:01:55.090
But at the end of the day,
it's just white space,

42
00:01:55.090 --> 00:01:58.090
we're removing,
it's gonna be parsed the same way.

43
00:01:58.090 --> 00:02:02.025
And so, if we have a meg of JavaScript
that we've managed to get down into

44
00:02:02.025 --> 00:02:04.815
100 kilobytes of this really,
really compressed thing.

45
00:02:04.815 --> 00:02:07.595
It's still gonna be a meg,
not the size, but

46
00:02:07.595 --> 00:02:09.855
that's how much code is
still gonna be parsed.

47
00:02:09.855 --> 00:02:13.971
So parse time becomes a real issue,
especially on devices with lower NCPUs.

48
00:02:13.971 --> 00:02:17.545
So we're were talking about mobile phones,
older computers,

49
00:02:17.545 --> 00:02:22.111
a lot of things like that where maybe the
delivery, you've fixed the speed of that

50
00:02:22.111 --> 00:02:26.704
delivery, but people are still as waiting
forever for that parse time to finish.

51
00:02:26.704 --> 00:02:29.549
Page Jank, is another thing that
we're gonna be looking at a lot.

52
00:02:29.549 --> 00:02:33.395
So for those unfamiliar with Page Jank,
it's like whenever you see any jumping or

53
00:02:33.395 --> 00:02:36.979
jittering on your screen when things
are supposed to be a smooth animation.

54
00:02:38.370 --> 00:02:40.680
And so,
the kind of idea with Page Jank here.

55
00:02:40.680 --> 00:02:42.710
This gets a little bit math heavy,
even for

56
00:02:42.710 --> 00:02:46.780
me, but it's not so
bad [LAUGH], so basically,

57
00:02:46.780 --> 00:02:49.770
I think a lot of people have heard this
phrase of like 60 frames per second.

58
00:02:49.770 --> 00:02:51.910
Like smooth as 60 frames per second,
or whatever.

59
00:02:51.910 --> 00:02:54.260
If you haven't heard it,
it's just in blog post sometimes,

60
00:02:54.260 --> 00:02:58.470
that'll be like, you should be chasing 60
frames per second for smooth scrolling.

61
00:02:58.470 --> 00:02:59.822
And what does that really mean?

62
00:02:59.822 --> 00:03:04.366
So the idea is that most of our screens,
unless you have a high-end gaming monitor,

63
00:03:04.366 --> 00:03:05.710
or something like that,

64
00:03:05.710 --> 00:03:09.260
are 60 Hertz, which means they
refresh 60 times in a second.

65
00:03:09.260 --> 00:03:11.124
So if you take one second of time,

66
00:03:11.124 --> 00:03:14.532
your screen is refreshing
itself 60 times in that second.

67
00:03:14.532 --> 00:03:17.516
And, so, when you think about that
from a browser's point of view,

68
00:03:17.516 --> 00:03:19.785
the screen is just constantly probing for
updates.

69
00:03:19.785 --> 00:03:20.940
It's like, hey, did anything move?

70
00:03:20.940 --> 00:03:22.190
Can I show them something's moved?

71
00:03:22.190 --> 00:03:23.153
What happened?

72
00:03:23.153 --> 00:03:26.959
So the browser, every time that call
happens, those 60 times in a second,

73
00:03:26.959 --> 00:03:29.960
the browser has to have a frame
to send to the screen, right?

74
00:03:29.960 --> 00:03:31.060
Okay, here's what it looks like now.

75
00:03:31.060 --> 00:03:32.070
Here's what it looks like now.

76
00:03:32.070 --> 00:03:35.000
And that is just always happening,
as you're browsing the web.

77
00:03:35.000 --> 00:03:38.700
And so, it wants to put up one new
picture for each of those refreshes.

78
00:03:38.700 --> 00:03:42.290
So if you take the 60
frames in one second,

79
00:03:42.290 --> 00:03:46.170
and you divide one second by 60,
you get 16.66 milliseconds.

80
00:03:47.380 --> 00:03:50.980
And so, every 16.66 milliseconds,

81
00:03:50.980 --> 00:03:53.240
the browser tosses another
frame to the screen.

82
00:03:53.240 --> 00:03:54.140
It's like hey, here you go.

83
00:03:54.140 --> 00:03:56.040
Stuff update, here you go, here you go.

84
00:03:57.190 --> 00:03:59.680
In reality, you don't have all
that time to yourself, right,

85
00:03:59.680 --> 00:04:02.350
to do heavy JavaScript work,
because the browser just has stuff,

86
00:04:02.350 --> 00:04:04.720
it always has to just
general housekeeping stuff.

87
00:04:04.720 --> 00:04:08.850
So really, every one of your frames needs
to complete in about 10 milliseconds.

88
00:04:08.850 --> 00:04:13.380
And we're not gonna dive into, we don't
get fine tune control over our frames, but

89
00:04:13.380 --> 00:04:15.290
what I wanted to explain,
is when you do so

90
00:04:15.290 --> 00:04:18.560
much stuff, like you're trying to animate,
or you're reading, and

91
00:04:18.560 --> 00:04:22.540
you're writing all this stuff, you can
cause the browser to skip frames, right?

92
00:04:22.540 --> 00:04:25.320
Where basically the browser is so
busy doing your work, that is doesn't have

93
00:04:25.320 --> 00:04:29.640
a frame to give to the screen, so it skips
a frame, and so what looks like very, very

94
00:04:29.640 --> 00:04:34.620
smooth at 60 frames per second, can start
looking like this when frames are missing.

95
00:04:34.620 --> 00:04:36.560
It's kinda like jittering
around the screen.

96
00:04:36.560 --> 00:04:38.900
So you'll see this a lot
on big sites some times,

97
00:04:38.900 --> 00:04:40.630
as you're scrolling through a big sight.

98
00:04:40.630 --> 00:04:43.770
And the scroll kind of jitters, or
maybe you're playing like a game, and

99
00:04:43.770 --> 00:04:45.700
the animation jitters for a second.

100
00:04:45.700 --> 00:04:46.610
These things happen.

101
00:04:46.610 --> 00:04:49.890
This is because frames are dropping,
dropped, cuz there's too much going on.

102
00:04:49.890 --> 00:04:53.580
Again, we don't have 10 milliseconds,
how much can I do?

103
00:04:53.580 --> 00:04:54.510
And it's not like that.

104
00:04:54.510 --> 00:04:56.550
But it is to know why am I getting that?

105
00:04:56.550 --> 00:04:59.080
I'm giving it too much work at a time.

106
00:04:59.080 --> 00:05:03.520
Another thing that contributes to page
jank, is what's called layout thrashing.

107
00:05:03.520 --> 00:05:06.100
And so, if you kind of think
about it we really do two

108
00:05:06.100 --> 00:05:07.350
things when we interact with the dom.

109
00:05:07.350 --> 00:05:09.960
We read values from it,
what's the screen height,

110
00:05:09.960 --> 00:05:11.270
what's the width, what's the color.

111
00:05:11.270 --> 00:05:16.520
And we write values to it, inner text,
inner HTML, class list, all these things.

112
00:05:16.520 --> 00:05:18.980
And so, basically,
when you read something from the dom,

113
00:05:18.980 --> 00:05:22.680
like I read element one client height,
and I read that in.

114
00:05:22.680 --> 00:05:23.580
Chrome can catch that.

115
00:05:23.580 --> 00:05:25.910
It's like, hey, if you ever need
element one client height again,

116
00:05:25.910 --> 00:05:27.800
I know exactly what it is, don't worry.

117
00:05:27.800 --> 00:05:29.930
But then, if you change anything about it,

118
00:05:29.930 --> 00:05:33.900
like we changed that style height to
something else, it disposes of that cache.

119
00:05:33.900 --> 00:05:36.100
It's like,
I don't know what it is anymore.

120
00:05:36.100 --> 00:05:38.890
So then if you [INAUDIBLE] reading it
again, it triggers another layout.

121
00:05:38.890 --> 00:05:39.800
It has to read that again.

122
00:05:39.800 --> 00:05:40.750
It's not cached.

123
00:05:40.750 --> 00:05:45.207
And so, this is unfortunately
the reality of what our apps do.

124
00:05:45.207 --> 00:05:48.514
We have all these different stuff,
all this code all over the place,

125
00:05:48.514 --> 00:05:52.224
all vying for things, trying to do
an animation, trying to have a listener,

126
00:05:52.224 --> 00:05:55.362
trying to do scroll events,
all this stuff, and you get this kind

127
00:05:55.362 --> 00:05:59.210
of layout thrashing a lot where
you're reading and writing from the.

128
00:05:59.210 --> 00:06:03.430
So what would be ideal, is if we
could batch these things together, so

129
00:06:03.430 --> 00:06:07.580
we could be like, hey, everybody on our
whole team, and our whole million line of

130
00:06:07.580 --> 00:06:10.670
code app, get all your reads together,
and we'll do them all here.

131
00:06:10.670 --> 00:06:12.720
And then get all your writes together,
and we'll do them all here.

132
00:06:12.720 --> 00:06:13.590
And then, we'll do all our reads.

133
00:06:13.590 --> 00:06:14.850
But that's like totally not realistic.

134
00:06:14.850 --> 00:06:16.320
Right?
That's not the way programming works.

135
00:06:16.320 --> 00:06:18.630
We're never gonna be able to do that.

136
00:06:18.630 --> 00:06:21.020
And so,
there's this really cool tool called, and

137
00:06:21.020 --> 00:06:24.860
it's built into the browsers called,
request Animation Frame, or RAF.

138
00:06:24.860 --> 00:06:28.670
And request Animation Frame is sort of
like this asynchronous way of being like,

139
00:06:28.670 --> 00:06:30.620
when you're about to
render the next frame,

140
00:06:30.620 --> 00:06:33.160
I have some stuff I wanna do
before you do that, right?

141
00:06:33.160 --> 00:06:36.573
So instead of like, kind of, when you
think about our single threaded JavaScript

142
00:06:36.573 --> 00:06:40.035
world, it's like everything you do is like
an action, it's like I need this now,

143
00:06:40.035 --> 00:06:42.605
I need the height,
now I need to set the height., now I need,

144
00:06:42.605 --> 00:06:45.592
you're just kind of like this very
demanding of the computer, right?

145
00:06:45.592 --> 00:06:48.631
You're like, I need all of this, and
I need all that happened instantly, and

146
00:06:48.631 --> 00:06:51.077
it does its best, but
maybe it does it inefficiently.

147
00:06:51.077 --> 00:06:54.635
With request Animation Frame, it's really
cool, because you can just be like, hey,

148
00:06:54.635 --> 00:06:57.655
it's not urgent, I mean, it's still
gonna happen within 10 milliseconds, so

149
00:06:57.655 --> 00:07:01.195
this is faster than we can perceive, but
you're saying, I don't need it right now.

150
00:07:01.195 --> 00:07:02.825
I just need it before you
do another re-render.

151
00:07:02.825 --> 00:07:03.765
I wanna change some stuff.

152
00:07:03.765 --> 00:07:04.905
It's really cool.

153
00:07:04.905 --> 00:07:07.915
So on top of that, kinda primitive,
there's some libraries.

154
00:07:07.915 --> 00:07:11.060
These are still low-level libraries,
but there's a library called, FastDom.

155
00:07:11.060 --> 00:07:15.010
And Fast Time just provides you with
a read call back, and a write call back.

156
00:07:15.010 --> 00:07:18.680
So you pass your read call back in, you do
your read stuff, and your write call back,

157
00:07:18.680 --> 00:07:19.460
and you do your write stuff.

158
00:07:19.460 --> 00:07:21.270
Again, we probably won't
be using Fast Time, but

159
00:07:21.270 --> 00:07:24.990
it's important to know when you're using
it, you iLibrary like Angular, React, or

160
00:07:24.990 --> 00:07:27.040
View, what they are doing under the hood,

161
00:07:27.040 --> 00:07:29.680
is they're making heavy use
of request animation frame.

162
00:07:29.680 --> 00:07:32.838
So in React, you say,
on click change the class,

163
00:07:32.838 --> 00:07:37.817
deep down what it's doing is like hey,
they collect, whenever you get time.

164
00:07:37.817 --> 00:07:39.672
There's really trying to
smooth things out for you, so

165
00:07:39.672 --> 00:07:41.170
your experience is a lot better.

166
00:07:41.170 --> 00:07:45.140
This is where some people make these
contentious claims that a view library is

167
00:07:45.140 --> 00:07:46.320
faster than vanilla code.

168
00:07:46.320 --> 00:07:47.630
Which it couldn't be, right?

169
00:07:47.630 --> 00:07:50.080
Cuz it just is vanilla code,
that's what a view library is.

170
00:07:50.080 --> 00:07:52.710
But I think what they mean is they
set up these nice bumpers for you.

171
00:07:52.710 --> 00:07:55.680
So when you're programming within React,

172
00:07:55.680 --> 00:07:58.650
it's gonna be a little bit smoother than
if you don't know what you're doing, and

173
00:07:58.650 --> 00:08:01.940
your programming in Vanilla,
cuz you could do that layout thrashing.

174
00:08:01.940 --> 00:08:06.810
This is like a cool kind of thing, so when
we talk about layouts, and repaints, and

175
00:08:06.810 --> 00:08:10.720
all that stuff,
there's this site here koalastothemax.com.

176
00:08:10.720 --> 00:08:14.660
And every time you hover over it,
it kinda splits these images, right?

177
00:08:14.660 --> 00:08:16.790
And it splits them again,
and splits them again.

178
00:08:16.790 --> 00:08:18.160
So if we start over at the beginning,

179
00:08:18.160 --> 00:08:20.590
where we have this one image,
there's a cool tool we can use.

180
00:08:20.590 --> 00:08:23.610
So we open up Dev tools, and
dock these back to the bottom.

181
00:08:24.690 --> 00:08:26.513
And then,
I'm gonna open this up a little bit.

182
00:08:26.513 --> 00:08:28.390
And I am gonna hit escape for
that console drawer.

183
00:08:28.390 --> 00:08:32.250
I'm gonna click on this three here,
and I'm gonna go to Rendering.

184
00:08:32.250 --> 00:08:34.680
And then,
I'm gonna turn on paint flashing.

185
00:08:34.680 --> 00:08:38.560
And what paint flashing does, is it
shows you with this really cool green,

186
00:08:38.560 --> 00:08:42.860
whenever anything is being repainted, and
it shows you what all is being repainted.

187
00:08:42.860 --> 00:08:46.962
So you can see on a screen re-size,
the whole screen gets repainted, and

188
00:08:46.962 --> 00:08:50.350
it's because this image needs to grow,
it flexes.

189
00:08:51.796 --> 00:08:54.330
What you wanna see when you're
doing heavy animations,

190
00:08:54.330 --> 00:08:57.570
is only the stuff that's
moving is getting repainted.

191
00:08:57.570 --> 00:09:01.070
So we click on this, and we're seeing
that it's doing a very good job.

192
00:09:01.070 --> 00:09:05.650
It's all it's covering in green is what's
actually being animated, and moved around.

193
00:09:05.650 --> 00:09:08.550
What you'll see on a lot of websites,
especially, ones that feel slow,

194
00:09:08.550 --> 00:09:12.400
is even though you're only animating
over here, everything's being repainted.

195
00:09:12.400 --> 00:09:15.460
And what you wanna look for there,
is these calls to reads and

196
00:09:15.460 --> 00:09:16.615
writes of moments.

197
00:09:16.615 --> 00:09:21.165
Lke are you grabbing document dot body dot
height every single time you do one of

198
00:09:21.165 --> 00:09:23.285
this things,
maybe you don't need to be doing that.

199
00:09:23.285 --> 00:09:26.865
Or you're reading, and then immediately
writing to the dom again, so

200
00:09:26.865 --> 00:09:28.145
you're invalidating that layout.

201
00:09:29.245 --> 00:09:33.104
Side tip, if you keep hovering on this
things for like a super long time,

202
00:09:33.104 --> 00:09:41.724
a kowala appears, which is pretty cool
&gt;&gt; Jon Kuperman: I think that's its face.

203
00:09:44.727 --> 00:09:50.257
&gt;&gt; [INAUDIBLE]

204
00:09:50.257 --> 00:09:52.268
&gt;&gt; Jon Kuperman: Okay, it's worth it.

