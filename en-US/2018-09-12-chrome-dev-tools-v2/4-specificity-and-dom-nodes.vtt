WEBVTT

1
00:00:00.000 --> 00:00:02.098
&gt;&gt; Jon Kuperman: You can
display the computed styles.

2
00:00:02.098 --> 00:00:06.518
So this one's really good as we're kind
of getting back towards the specificity

3
00:00:06.518 --> 00:00:07.171
question.

4
00:00:07.171 --> 00:00:10.225
So one thing that's important is like,
sometimes you'll go and

5
00:00:10.225 --> 00:00:12.065
you'll see the styles for something.

6
00:00:12.065 --> 00:00:15.265
Like if we go to maybe to the body or
something like that, and

7
00:00:15.265 --> 00:00:18.530
we'll see that the body has
a few different body selectors.

8
00:00:18.530 --> 00:00:19.560
This is really common, right?

9
00:00:19.560 --> 00:00:23.280
Like you have your browser
provides a style sheet, right?

10
00:00:23.280 --> 00:00:24.930
Like this user agent style sheet.

11
00:00:24.930 --> 00:00:28.030
And then maybe use a CSS reset,
like normalize or something like that.

12
00:00:28.030 --> 00:00:30.450
And that has a body selector in it,
and it adds something.

13
00:00:30.450 --> 00:00:32.980
And then maybe you use Bootstrap and
so you grab Bootstrap and

14
00:00:32.980 --> 00:00:34.170
that adds a body selector.

15
00:00:34.170 --> 00:00:37.940
And then maybe you have your main
style.css, and that adds another one.

16
00:00:37.940 --> 00:00:39.870
And then later on you do something else.

17
00:00:39.870 --> 00:00:43.060
So you can kinda have all
these conflicting things.

18
00:00:43.060 --> 00:00:43.610
Right?

19
00:00:43.610 --> 00:00:46.870
And so one thing that's really helpful,
cuz I get a lot of tickets when I do

20
00:00:46.870 --> 00:00:50.170
UI work that's like,
the border is gray on this.

21
00:00:50.170 --> 00:00:51.250
It's supposed to be blue.

22
00:00:51.250 --> 00:00:51.860
Right?

23
00:00:51.860 --> 00:00:54.150
And then I see the thing,
it's totally gray.

24
00:00:54.150 --> 00:00:55.090
It should be blue.

25
00:00:55.090 --> 00:00:57.990
And I open it up and I see a thousand
selectors with a really big app.

26
00:00:57.990 --> 00:00:59.220
Right, you'll see a ton of them.

27
00:00:59.220 --> 00:01:00.090
So you can click.

28
00:01:00.090 --> 00:01:02.920
Instead of the Styles tab,
you can click on the Computed Styles.

29
00:01:02.920 --> 00:01:06.473
And the computed styles is great because
it's like, okay, ignore all that noise.

30
00:01:06.473 --> 00:01:09.605
When everything's said and done, when
the browser has run all of its what should

31
00:01:09.605 --> 00:01:12.326
trump what and what should be
officially in there in the information,

32
00:01:12.326 --> 00:01:13.589
this is what you're left with.

33
00:01:13.589 --> 00:01:18.161
And so you get this really concise
list of what margin is there?

34
00:01:18.161 --> 00:01:19.184
There's zero margin.

35
00:01:19.184 --> 00:01:20.282
What display is there?

36
00:01:20.282 --> 00:01:20.830
It's block.

37
00:01:20.830 --> 00:01:24.287
You don't have to look through all
the styles to get that information.

38
00:01:24.287 --> 00:01:28.422
And then if you're wondering where
something comes from you can just go ahead

39
00:01:28.422 --> 00:01:29.769
and click on this arrow.

40
00:01:29.769 --> 00:01:32.062
And it'll take you back
into the styles tab.

41
00:01:32.062 --> 00:01:33.296
And it'll highlight the thing
that's winning right then.

42
00:01:33.296 --> 00:01:37.075
So this is a lot more helpful
on big apps where you'll have

43
00:01:37.075 --> 00:01:41.959
like potentially hundreds of specificity
clashes that the browser has to

44
00:01:41.959 --> 00:01:45.929
resolve.
&gt;&gt; Jon Kuperman: You can find event

45
00:01:45.929 --> 00:01:46.510
lists in this.

46
00:01:46.510 --> 00:01:48.160
This is another one that's really handy.

47
00:01:48.160 --> 00:01:51.070
It sort of has deminishing returns on
a really big app because you'll end

48
00:01:51.070 --> 00:01:52.340
up with so many event listeners.

49
00:01:52.340 --> 00:01:56.380
But, you can click on this Event Listeners
tab, and it will show you all of the event

50
00:01:56.380 --> 00:02:00.500
listeners on that document and you can go
right to the code that's triggering them.

51
00:02:00.500 --> 00:02:02.880
If you have like slow
scroll performance and

52
00:02:02.880 --> 00:02:05.390
you want to see,
what am I doing on scroll?

53
00:02:05.390 --> 00:02:08.400
Rather than looking through all the code,
you can go to the event listeners.

54
00:02:08.400 --> 00:02:12.180
You can go to the scroll event and you can
see how many you have and where they are.

55
00:02:12.180 --> 00:02:13.630
So I can see I only have one.

56
00:02:13.630 --> 00:02:16.480
It's on the window element and
it's right here in this code.

57
00:02:16.480 --> 00:02:19.890
So if I click this it will take me to
the sources tab which is over here,

58
00:02:19.890 --> 00:02:21.020
the sources panel, and

59
00:02:21.020 --> 00:02:24.910
it'll show me this window at
EventListener scroll, do nothing.

60
00:02:24.910 --> 00:02:29.130
But it's just a concept right, you can
see that where things are coming from.

61
00:02:29.130 --> 00:02:33.060
This is handy with any kind of
event like ClickEvent, ResizeEvent,

62
00:02:33.060 --> 00:02:35.690
scroll, if you know kind
of where the bug is.

63
00:02:35.690 --> 00:02:38.730
I think this is like a trend we'll see a
lot in dev tools as they're really helpful

64
00:02:38.730 --> 00:02:42.340
for If you don't know the code really
well, but you know the problem or

65
00:02:42.340 --> 00:02:43.520
you know what you are trying to fix,

66
00:02:43.520 --> 00:02:46.900
there is a lot of cool tools that will
help you easily navigate the code base.

67
00:02:52.100 --> 00:02:53.030
Change color formats.

68
00:02:53.030 --> 00:02:54.220
This is another nice one.

69
00:02:54.220 --> 00:02:56.290
If we click on the nav element,

70
00:02:56.290 --> 00:03:00.930
click on styles, we can see the color
format for this is hex, right?

71
00:03:00.930 --> 00:03:02.720
It is a six digit hex code.

72
00:03:02.720 --> 00:03:07.540
A lot of times design guidelines or
whatever will require that all of your

73
00:03:07.540 --> 00:03:12.860
stuff be done in different color formats
like HSL or RGB or anything like that.

74
00:03:12.860 --> 00:03:15.351
This kind of cool thing you can
do is you can hold shift and

75
00:03:15.351 --> 00:03:17.418
you can click on one of these,
any color box and

76
00:03:17.418 --> 00:03:20.194
you can cycle through all
the different color options right?

77
00:03:20.194 --> 00:03:25.298
So, shift one takes me to RGB Shift again
takes me to hsl and then back to hex.

78
00:03:25.298 --> 00:03:28.562
So this is true for any color format,
or however you author it,

79
00:03:28.562 --> 00:03:31.589
you can hit Shift and
you can change it, view it in any way.

80
00:03:31.589 --> 00:03:32.686
So, I can just copy this.

81
00:03:32.686 --> 00:03:33.888
I like to work in hex.

82
00:03:33.888 --> 00:03:35.099
I know a lot of them.

83
00:03:35.099 --> 00:03:37.627
So, I'll write it in hex,
get the color I want,

84
00:03:37.627 --> 00:03:41.049
change it to RGB, then I'll copy it and
move it in to my codebase.

85
00:03:43.360 --> 00:03:44.540
Dragon drop dominos.

86
00:03:44.540 --> 00:03:47.940
I don't know how useful this one is but
it's pretty cool.

87
00:03:47.940 --> 00:03:50.670
So you can if we have
like two items like so

88
00:03:50.670 --> 00:03:53.990
we have let's go back up
to the navigation maybe.

89
00:03:53.990 --> 00:03:57.680
Nav, scroll into view and
then we'll see we have these lessons and

90
00:03:57.680 --> 00:04:00.580
we have exercises right so
we've got this unordered list.

91
00:04:00.580 --> 00:04:02.260
We've got these list items in it.

92
00:04:02.260 --> 00:04:04.860
This one is lessons,
this one is exercises.

93
00:04:04.860 --> 00:04:08.600
At any time you can take and
you can hold and click any DOM element,

94
00:04:08.600 --> 00:04:10.960
like this li here, and
you can move it around.

95
00:04:10.960 --> 00:04:12.470
You can kind of see, hopefully,

96
00:04:12.470 --> 00:04:16.480
this little blue bar shows where it's
going to be dropped, like an Excel sheet.

97
00:04:16.480 --> 00:04:19.090
And, so, you can move things around and
now it's exercises-lesson.

98
00:04:19.090 --> 00:04:20.980
So, you can move different
DOM elements around.

99
00:04:20.980 --> 00:04:23.950
You can also, if they're nested,
you can drag them out of your nest.

100
00:04:23.950 --> 00:04:25.980
So, if it's got a div with a span in it,

101
00:04:25.980 --> 00:04:28.248
you can drag that span on top
of the div and bring it out.

102
00:04:28.248 --> 00:04:34.958
Visualize CSS

103
00:04:34.958 --> 00:04:42.240
specificity.

104
00:04:42.240 --> 00:04:45.640
So I'm not sure how many people
are familiar with specificity.

105
00:04:45.640 --> 00:04:47.350
I wasn't for a really long time, but.

106
00:04:47.350 --> 00:04:50.140
I'll just cover it just for
people that aren't familar with it.

107
00:04:50.140 --> 00:04:53.810
So the basic concept, this is what I was
just kind of harping on which is that

108
00:04:53.810 --> 00:04:57.220
like one example is like you
have two different classes.

109
00:04:57.220 --> 00:04:58.720
Both apply to the same element.

110
00:04:58.720 --> 00:05:01.560
So you have like div, class foo, and bar.

111
00:05:01.560 --> 00:05:03.760
And your like well foo should be red.

112
00:05:03.760 --> 00:05:04.620
Bar should be blue.

113
00:05:04.620 --> 00:05:06.950
Whats the browser
supposed to do with that.

114
00:05:06.950 --> 00:05:11.770
Another example is that you have
more specific or less specific.

115
00:05:11.770 --> 00:05:13.200
Ways of grabbing elements, right?

116
00:05:13.200 --> 00:05:16.190
So in CSS you can do something
like anchor tag, like a.

117
00:05:16.190 --> 00:05:18.480
You can be like all anchor
tags should be blue.

118
00:05:18.480 --> 00:05:20.380
And then you can have
an anchor with a class, and

119
00:05:20.380 --> 00:05:22.390
you should be like well this
one should be green, right?

120
00:05:22.390 --> 00:05:23.730
That's pretty common to do.

121
00:05:23.730 --> 00:05:26.010
And we know, or a lot of people know,

122
00:05:26.010 --> 00:05:30.170
that if you add that class it'll
trump the anchor tag selector.

123
00:05:30.170 --> 00:05:33.960
And the reason why is the browser
has these specified rules of

124
00:05:33.960 --> 00:05:35.100
what they call specificity.

125
00:05:35.100 --> 00:05:39.940
The least specific that you can be
is just a general element selector.

126
00:05:39.940 --> 00:05:44.860
So you can do all anchors should be blue
or all list items should be margin 10 or

127
00:05:44.860 --> 00:05:45.850
something like that.

128
00:05:45.850 --> 00:05:49.210
You can get a little bit more
specific by nesting those, right.

129
00:05:49.210 --> 00:05:52.500
So you can be like all list items
inside of an unordered list and

130
00:05:52.500 --> 00:05:54.690
we can see some css that
looks like this right.

131
00:05:54.690 --> 00:05:59.870
So these are not all allies these are only
allies that are nested inside this class.

132
00:05:59.870 --> 00:06:03.020
And then as you get more specific you
can add a class name to something.

133
00:06:03.020 --> 00:06:05.820
As you get more then that you can
get nested class names right so

134
00:06:05.820 --> 00:06:09.080
you can be like only the class of
bar when its in the class of foo.

135
00:06:09.080 --> 00:06:10.940
You go all the way, then you can have IDs.

136
00:06:10.940 --> 00:06:13.470
So IDs trump classes,
classes trump elements.

137
00:06:13.470 --> 00:06:17.240
And then you go all the way
into having inline CSS.

138
00:06:17.240 --> 00:06:21.160
So you can actually apply a style
tag to your list element.

139
00:06:21.160 --> 00:06:22.720
LI style equals color blue.

140
00:06:22.720 --> 00:06:24.840
And that's the most specific you can get.

141
00:06:24.840 --> 00:06:29.630
And so it goes from elements nested
to classes to IDs to inline styles.

142
00:06:29.630 --> 00:06:30.510
The one thing that kind of

143
00:06:30.510 --> 00:06:33.450
can throw a wrench in that
a little bit is the important tag.

144
00:06:33.450 --> 00:06:36.980
and, so, I think in a lot of big apps
we try to avoid the important tag

145
00:06:36.980 --> 00:06:37.860
because of this.

146
00:06:37.860 --> 00:06:42.430
A, it can cause some issues with
specificity and B, because it's usually

147
00:06:42.430 --> 00:06:46.010
a good sign to take a step back and
kind of refactor your class structure.

148
00:06:46.010 --> 00:06:49.430
But the important tag can bump
it up a level of specificity.

149
00:06:49.430 --> 00:06:52.430
And especially when you have
two of the same specificity.

150
00:06:52.430 --> 00:06:56.930
So, in the example where you have just two
classes That are arguing with each other.

151
00:06:56.930 --> 00:07:01.040
The way that it will normally do it is
the one that gets parsed second will win.

152
00:07:01.040 --> 00:07:03.630
But if you add an important tag to
one of them then that's the one that

153
00:07:03.630 --> 00:07:04.990
will always win.

154
00:07:04.990 --> 00:07:08.173
Yeah, Mike.
&gt;&gt; Speaker 2: There's a very in-depth look

155
00:07:08.173 --> 00:07:11.170
at CSS [CROSSTALK].
&gt;&gt; Jon Kuperman: Yes, I love this.

156
00:07:11.170 --> 00:07:13.100
Is Estelle still in the chat?

157
00:07:13.100 --> 00:07:13.999
That's awesome, yes.
&gt;&gt; Speaker 2: Yeah,

158
00:07:13.999 --> 00:07:16.821
Estelle's This CSS in-depth course, and

159
00:07:16.821 --> 00:07:20.265
she has Specifishity.
&gt;&gt; Jon Kuperman: Sorry, Estella,

160
00:07:20.265 --> 00:07:25.189
if I spell this wrong.
&gt;&gt; Jon Kuperman: Yes, this is brilliant.

161
00:07:25.189 --> 00:07:28.285
So Estella, does she have classes here?

162
00:07:28.285 --> 00:07:30.789
Yes.
Yeah, she has classes here.

163
00:07:30.789 --> 00:07:32.793
She's awesome.

164
00:07:32.793 --> 00:07:35.269
I've seen her at a bunch of converences.

165
00:07:35.269 --> 00:07:37.240
She's a CSS guru.

166
00:07:37.240 --> 00:07:39.150
Yes, this is really really cute.

167
00:07:39.150 --> 00:07:42.130
I'm gonna steal this with
attribution if that's okay with you.

168
00:07:42.130 --> 00:07:42.980
This is awesome.

169
00:07:42.980 --> 00:07:46.820
So, yes, so this starts all the way
with this general wildcard selector.

170
00:07:46.820 --> 00:07:49.740
So you could say all text should be blue,
elements,

171
00:07:49.740 --> 00:07:53.920
nested elements, really nested elements,
classes, the same kind of thing.

172
00:07:53.920 --> 00:07:55.460
This is awesome.

173
00:07:55.460 --> 00:07:56.660
Yeah, so it's in the chat.

174
00:07:56.660 --> 00:07:59.230
Thank you very much for sharing that.

175
00:07:59.230 --> 00:08:03.820
And so what's cool on the dev tool
side is that you can use that to

176
00:08:03.820 --> 00:08:05.320
kind of visualize things.

177
00:08:05.320 --> 00:08:09.410
So if I go ahead and
I hover on this visualize CSS specificity,

178
00:08:09.410 --> 00:08:14.820
I can see that there's multiple things
that are trying to apply color to it.

179
00:08:14.820 --> 00:08:17.370
And they're being crossed out because
they're getting trumped there.

180
00:08:17.370 --> 00:08:19.190
So I have a class on it, right?

181
00:08:19.190 --> 00:08:20.880
Some class called a red.

182
00:08:20.880 --> 00:08:23.160
And then I have this nested one, right?

183
00:08:23.160 --> 00:08:25.830
So an element inside a class trumps it.

184
00:08:25.830 --> 00:08:27.480
So this one is color black.

185
00:08:27.480 --> 00:08:29.900
And then I have an ID on it,
this one is color purple.

186
00:08:29.900 --> 00:08:31.620
So you can see that the id wins.

187
00:08:31.620 --> 00:08:35.270
If you just care about what won, we can
go to computed, and we can look at color.

188
00:08:35.270 --> 00:08:38.130
But if you kind of want to visualize why,
you can look this way and

189
00:08:38.130 --> 00:08:41.630
you can see that the ones that lose
the specificity battle get crossed out.

190
00:08:44.280 --> 00:08:48.080
You can pretty print source code, so
this one is hopping ahead a little bit.

191
00:08:48.080 --> 00:08:52.190
If I go to the sources tab I think
actually all of mine might be already,

192
00:08:52.190 --> 00:08:54.248
here we go, and
we've got this [INAUDIBLE].

193
00:08:54.248 --> 00:08:56.430
This is really common when
you serve production code.

194
00:08:56.430 --> 00:08:58.670
It's common that you kind of minify it.

195
00:08:58.670 --> 00:09:00.920
So you take out all
the white space possible, so

196
00:09:00.920 --> 00:09:02.690
you serve les bytes over the network.

197
00:09:02.690 --> 00:09:06.490
So it'll be pretty common when debugging
production apps that you'll inspect,

198
00:09:06.490 --> 00:09:09.910
you'll go to a source page and
it will just be like this thing of text,

199
00:09:09.910 --> 00:09:11.370
like if you download J queary.

200
00:09:11.370 --> 00:09:13.110
It's just this condensed bundle.

201
00:09:13.110 --> 00:09:15.240
So there's this pretty print
button that's always here.

202
00:09:15.240 --> 00:09:19.220
So you can click it and
it'll pretty print as best it can for you.

203
00:09:19.220 --> 00:09:20.410
One caveat is.

204
00:09:20.410 --> 00:09:23.370
A lot of the times are build pipelines
when they're doing this kind

205
00:09:23.370 --> 00:09:26.560
of compression,
they also do what's called uglification.

206
00:09:26.560 --> 00:09:30.220
And so uglification is again trying
to save bytes so it'll go through and

207
00:09:30.220 --> 00:09:34.270
it'll like replace variables with single
letter or number variable names, right.

208
00:09:34.270 --> 00:09:36.390
And so everything will get really tiny.

209
00:09:36.390 --> 00:09:39.245
So the pretty print will help
visually expand that, but

210
00:09:39.245 --> 00:09:42.830
it's still best not to debug on production
code if you can help it cuz you're still

211
00:09:42.830 --> 00:09:44.700
gonna be Having a hard time understanding.

212
00:09:44.700 --> 00:09:47.013
Like what is C.B mean,
those kind of things.

