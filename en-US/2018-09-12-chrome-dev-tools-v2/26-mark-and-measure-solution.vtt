WEBVTT

1
00:00:00.000 --> 00:00:02.341
&gt;&gt; Speaker 1: So
let's go through this exercise together.

2
00:00:02.341 --> 00:00:05.730
So the first thing I'm gonna do is
I'm just gonna close the dev tool so

3
00:00:05.730 --> 00:00:09.765
everybody can kind of, or I guess I'll
minimize them over on the console here, so

4
00:00:09.765 --> 00:00:11.949
everybody can kind of see what's going on.

5
00:00:11.949 --> 00:00:13.580
I'll go back into my editor.

6
00:00:13.580 --> 00:00:15.046
I'm gonna close these two tabs,

7
00:00:15.046 --> 00:00:17.890
and I'm gonna open up that mark and
measure it out JS.

8
00:00:17.890 --> 00:00:19.350
So we got it here, right.

9
00:00:19.350 --> 00:00:21.950
So we can kinda do this thing that
we've been talking about, right.

10
00:00:21.950 --> 00:00:25.125
We can be like Const
start = new Date getTime.

11
00:00:25.125 --> 00:00:26.510
Is that the right API?

12
00:00:26.510 --> 00:00:27.894
I feel like I'm blank now.

13
00:00:27.894 --> 00:00:32.460
Yeah, I don't know why
it didn't autocomplete.

14
00:00:32.460 --> 00:00:36.570
And then when we're done here doing
all this forEaching we can do

15
00:00:36.570 --> 00:00:40.020
we can do const end = new Date.getTime.

16
00:00:40.020 --> 00:00:44.830
And then we can do const
time = end- start.

17
00:00:44.830 --> 00:00:46.659
And then we can do console.log(time).

18
00:00:46.659 --> 00:00:48.459
Is that kinda making sense or

19
00:00:48.459 --> 00:00:52.550
we're just kinda doing this stuff
that we said we were gonna do?

20
00:00:52.550 --> 00:00:54.780
So we go back here and we hit a Refresh.

21
00:00:54.780 --> 00:00:57.970
I knew, I see, I did this,
this is why it wasn't auto completing.

22
00:00:59.470 --> 00:01:02.200
&gt;&gt; Speaker 2: Use date now, it's a-
&gt;&gt; Speaker 1: Yeah totally,

23
00:01:02.200 --> 00:01:04.700
I just forgot date's a constructor so
it needs these here.

24
00:01:04.700 --> 00:01:08.040
So we'll go new date then
call a getTime on it.

25
00:01:08.040 --> 00:01:09.120
So here we go.

26
00:01:09.120 --> 00:01:10.580
We refresh the page and seven.

27
00:01:10.580 --> 00:01:12.570
So it took seven milliseconds,
five that time.

28
00:01:12.570 --> 00:01:13.650
So it's a little different each time.

29
00:01:13.650 --> 00:01:16.490
This is another cool is when
you're doing it one time through

30
00:01:16.490 --> 00:01:18.230
Lighthouse you see that one run.

31
00:01:18.230 --> 00:01:20.961
But things can be a little bit
nondeterministic, so we start gathering

32
00:01:20.961 --> 00:01:24.160
all this data of all the runs you
can get a really good average.

33
00:01:24.160 --> 00:01:25.610
So there we go, so we got five.

34
00:01:25.610 --> 00:01:32.940
So the other way that we could do it,
right, is the way that Iâ€™ve outlined here.

35
00:01:32.940 --> 00:01:34.770
So we can do performance mark, right.

36
00:01:34.770 --> 00:01:39.537
So we can do instead of this thing
we can do performance.mark start.

37
00:01:39.537 --> 00:01:43.086
Then here we do performance.mark end.

38
00:01:43.086 --> 00:01:50.091
And then here we do
performance.measure and

39
00:01:50.091 --> 00:01:57.290
we give it any name we want,
fetching Images.

40
00:01:57.290 --> 00:02:00.621
And then we just pass in which things
that we wanna measure between, so

41
00:02:00.621 --> 00:02:01.360
start and end.

42
00:02:01.360 --> 00:02:03.030
And again,
those can be named anything, right.

43
00:02:03.030 --> 00:02:05.320
It could be between fu and bar,
whatever you wanna call it,

44
00:02:05.320 --> 00:02:08.770
as long as whatever you define it as
are the things that you check it for.

45
00:02:08.770 --> 00:02:16.620
And then we could do performance
console or const measurements, right.

46
00:02:16.620 --> 00:02:20.468
And then the way you do that is
performance.getEntriesByType, and

47
00:02:20.468 --> 00:02:23.060
then we can pass in measure.

48
00:02:23.060 --> 00:02:26.659
So this will get all measures,
which we only have one, and

49
00:02:26.659 --> 00:02:29.459
then we can just console.log measurement.

50
00:02:29.459 --> 00:02:36.132
That's not what I meant, console.log,
&gt;&gt; Speaker 1: Cool,

51
00:02:36.132 --> 00:02:38.610
so we'll go back here and
we'll just refresh it.

52
00:02:38.610 --> 00:02:42.360
And we see we've got this thing, and
we kind of get the same information,

53
00:02:42.360 --> 00:02:43.700
how long it took.

54
00:02:43.700 --> 00:02:46.610
But like I was saying,
we get a bunch of cool information like

55
00:02:46.610 --> 00:02:49.680
what was the start time, what was
the name, all this different stuff here.

56
00:02:49.680 --> 00:02:52.210
The other really cool thing about
doing it this way, well one,

57
00:02:52.210 --> 00:02:55.276
you don't have all of these variables
kind of all over the place, right.

58
00:02:55.276 --> 00:02:58.560
To do it with the date times need to
be declaring all these variables or

59
00:02:58.560 --> 00:03:00.670
this way you are just
using a built in API.

60
00:03:00.670 --> 00:03:02.660
Number two,
when you go over you do the performance,

61
00:03:02.660 --> 00:03:05.422
and we'll just do a refresh
with the performance here.

62
00:03:05.422 --> 00:03:11.950
Let me drag this out here, and I'm just
gonna pop it out so you can all see.

63
00:03:13.040 --> 00:03:16.310
So you go here and you see this new
thing here, right, this user timing.

64
00:03:16.310 --> 00:03:18.330
So we zoom in on user timing and

65
00:03:18.330 --> 00:03:24.010
we get this really nice UI where it's
6.2 milliseconds fetching images.

66
00:03:24.010 --> 00:03:25.920
And you can start putting these
all over your app, right.

67
00:03:25.920 --> 00:03:30.470
So eventually you can just start
doing these performance profiles and

68
00:03:30.470 --> 00:03:34.030
then you'll see like, there's this
really big one for send reply, or

69
00:03:34.030 --> 00:03:35.912
there's a really small one for
this kind of thing.

70
00:03:35.912 --> 00:03:37.968
And you can kind of
click into it that way.

71
00:03:37.968 --> 00:03:42.223
So yeah, so you get these kind of great
label, it plays really nice with the rest

72
00:03:42.223 --> 00:03:46.180
of the dev tools, and you can see how
long things are taking for the users.

73
00:03:46.180 --> 00:03:49.857
Cool, any other things on user testing,
user performance testing?

74
00:03:49.857 --> 00:03:51.695
&gt;&gt; Speaker 2: What do you
do to get the entry logged,

75
00:03:51.695 --> 00:03:54.133
the performance entry
logged in your console?

76
00:03:54.133 --> 00:03:56.995
&gt;&gt; Speaker 1: I just did, so
you can do a getEntriesByType, and so

77
00:03:56.995 --> 00:03:58.563
I get all the measurements.

78
00:03:58.563 --> 00:04:02.590
So if I had other ones anywhere else,
you could show all of them.

79
00:04:02.590 --> 00:04:06.490
Otherwise you could just save this and
console log that too.

