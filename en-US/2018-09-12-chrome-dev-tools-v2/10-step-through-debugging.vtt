WEBVTT

1
00:00:01.919 --> 00:00:04.873
&gt;&gt; Jon Kuperman: So now that is done, the
rest of the exercises should be a lot more

2
00:00:04.873 --> 00:00:07.140
fun cuz we won't have to
install anything else.

3
00:00:07.140 --> 00:00:10.830
So the next section that we're
gonna be moving into is Debugging.

4
00:00:10.830 --> 00:00:15.032
So we kind of walked through how we
would go about authoring new code or

5
00:00:15.032 --> 00:00:17.718
changing existing code from the DevTools.

6
00:00:17.718 --> 00:00:22.045
And now, we're gonna kinda pivot a bit and
talk about an app that we finished, but

7
00:00:22.045 --> 00:00:25.120
there's a problem with that and
we really wanna figure out

8
00:00:25.120 --> 00:00:29.050
why some errors are occurring or
why some bug is happening.

9
00:00:29.050 --> 00:00:35.850
And so for this one if we pop back over to
the DevTools and go to this debugging tab.

10
00:00:35.850 --> 00:00:39.248
So the DevTools provide the step
through debugger, which,

11
00:00:39.248 --> 00:00:43.778
if you're coming from other programming
languages, like back end languages,

12
00:00:43.778 --> 00:00:46.191
might be a really familiar concept to you.

13
00:00:46.191 --> 00:00:50.414
But if you're new to development or
if you've only been doing web development,

14
00:00:50.414 --> 00:00:52.351
it might be a less familiar concept.

15
00:00:52.351 --> 00:00:55.317
So if I go ahead and
open up the DevTools again, and

16
00:00:55.317 --> 00:00:58.614
let me close all of these.
&gt;&gt; Jon Kuperman: And

17
00:00:58.614 --> 00:01:01.386
then I'm gonna open a new file.

18
00:01:01.386 --> 00:01:04.716
Remember, I said I was gonna sprinkle
some tips and tricks in here.

19
00:01:04.716 --> 00:01:10.920
One cool thing is if you hit
Cmd+Shift+P or Ctrl+Shift+P on Windows.

20
00:01:10.920 --> 00:01:14.168
You get these like auto complete where
you can do anything that you can do with

21
00:01:14.168 --> 00:01:15.350
the mouse in the DevTools.

22
00:01:15.350 --> 00:01:18.771
So I can hop over to the Elements
panel and it moves me,

23
00:01:18.771 --> 00:01:21.298
Cmd+Shift+P, hop over to Sources.

24
00:01:21.298 --> 00:01:25.410
And it moves me Cmd+Shift+P, there's
tons of cool stuff you can do here.

25
00:01:25.410 --> 00:01:29.930
So yeah, I use that pretty often so
I don't have to hop back over to my mouse.

26
00:01:29.930 --> 00:01:33.524
So yeah, so I'll open my sources, and
then instead of that Cmd+Shift+P,

27
00:01:33.524 --> 00:01:36.310
which is how to hop around within sources,
you can Cmd+P.

28
00:01:36.310 --> 00:01:40.250
And that's gonna be like if you use
sublime Cmd+T as your fuzzy search through

29
00:01:40.250 --> 00:01:43.591
your file system or a lot of other
editors, it'll be like Cmd+P or

30
00:01:43.591 --> 00:01:45.410
maybe Cmd+Shift+P, whatever.

31
00:01:45.410 --> 00:01:46.530
So this is gonna be your fuzzy search.

32
00:01:46.530 --> 00:01:51.050
So it's gonna search through all of
the files that it has access to.

33
00:01:51.050 --> 00:01:54.978
And one way that we might wanna simplify
this now that we're not doing work spaces

34
00:01:54.978 --> 00:01:58.443
anymore is to go ahead from file system
and just remove this work space so

35
00:01:58.443 --> 00:02:01.825
there's less kinda clutter,
there's less stuff to get in the way.

36
00:02:01.825 --> 00:02:02.818
So if I hit Cmd+P,

37
00:02:02.818 --> 00:02:06.742
I can kinda see like all the files that
are coming down on this page, right?

38
00:02:06.742 --> 00:02:09.674
So I can see my debugging, some css files,

39
00:02:09.674 --> 00:02:13.025
this Chrome extension
which I meant to turn off.

40
00:02:13.025 --> 00:02:15.954
JQuery, Lodash,
all these things are coming down.

41
00:02:15.954 --> 00:02:21.485
And so if I go ahead and
I open the debugging file which is here.

42
00:02:21.485 --> 00:02:24.410
Lesson-debugging.js.

43
00:02:24.410 --> 00:02:27.661
We can kinda see some
straightforward JavaScript code.

44
00:02:27.661 --> 00:02:32.090
So again, the goal here,
there's nothing tricky here.

45
00:02:32.090 --> 00:02:34.520
There's nothing about scope or
variable names, anything like that.

46
00:02:34.520 --> 00:02:36.554
I just kinda wanted to
show how stuff works.

47
00:02:36.554 --> 00:02:43.770
So we've got function one,
console logs, it calls two and three.

48
00:02:43.770 --> 00:02:46.852
Function two console logs, function
three console logs, and calls four.

49
00:02:46.852 --> 00:02:49.780
Just kind of some straight forward
a few functions calling each other.

50
00:02:49.780 --> 00:02:53.128
You can imagine your production code is
gonna be a lot more complicated but for

51
00:02:53.128 --> 00:02:54.790
the example I think this will be good.

52
00:02:54.790 --> 00:02:58.194
Another thing that I wanted to point out,
we'll cover in a minute,

53
00:02:58.194 --> 00:03:00.594
this concept of setting breakpoints,
right?

54
00:03:00.594 --> 00:03:04.876
And so setting a breakpoint is to say, as
soon as the parser hits this line of code,

55
00:03:04.876 --> 00:03:08.870
pause and show me what's going on,
what the state of the world is out there.

56
00:03:08.870 --> 00:03:12.020
But there's another cool way you can
do it, which is this debugger keyword.

57
00:03:12.020 --> 00:03:15.197
And so you can put the debugger
keyword in your actual code and

58
00:03:15.197 --> 00:03:19.590
then refresh the page with the DevTools
open, and it'll have a breakpoint there.

59
00:03:19.590 --> 00:03:22.068
The danger here is you can ship
this to production, right?

60
00:03:22.068 --> 00:03:22.680
And then,

61
00:03:22.680 --> 00:03:27.036
anybody with DevTools open is gonna get
this breakpoint every time they go.

62
00:03:27.036 --> 00:03:29.116
So if you're gonna start using debugger,

63
00:03:29.116 --> 00:03:33.275
you probably want a lint rule to make sure
you don't push the debugger to production,

64
00:03:33.275 --> 00:03:36.706
same with probably console logs,
or alerts, or anything like that.

65
00:03:36.706 --> 00:03:41.158
So if we go in my editor.
&gt;&gt; Jon Kuperman: And lesson-debugging.

66
00:03:41.158 --> 00:03:43.124
We can see I have this
debugger word in here.

67
00:03:43.124 --> 00:03:47.388
So before I've done anything with
the DevTools, just by virtue of having

68
00:03:47.388 --> 00:03:52.362
them open, if I refresh the page, we're
gonna get this paused in debugger, right?

69
00:03:52.362 --> 00:03:54.744
That's because I have the DevTools open,
and

70
00:03:54.744 --> 00:03:57.380
I hit a website that has
the debugger keyword in it.

71
00:03:57.380 --> 00:03:58.766
So it stops me here.

72
00:03:58.766 --> 00:04:01.899
So a few things like to do the editing
section we use the left tab a lot, right?

73
00:04:01.899 --> 00:04:04.971
That's how we added workspaces or
checked out files.

74
00:04:04.971 --> 00:04:08.621
For the debugging section I'm gonna kinda
minimize them and then move it over to

75
00:04:08.621 --> 00:04:11.740
the side a little bit, because we're
not gonna be using it as much.

76
00:04:11.740 --> 00:04:14.544
We are gonna be using this
right tab a lot more.

77
00:04:14.544 --> 00:04:19.120
So you'll notice a few things happen when
a breakpoint is triggered, and just for

78
00:04:19.120 --> 00:04:23.427
an example say this debugger is the exact
equivalent, if I go back to my code,

79
00:04:23.427 --> 00:04:25.574
remove the debugger line and save it.

80
00:04:25.574 --> 00:04:30.218
And then I can click on any line number,
and any line number that is actionable

81
00:04:30.218 --> 00:04:35.240
will give me this little blue thing,
that means there is a breakpoint there.

82
00:04:35.240 --> 00:04:38.013
So now there is a breakpoint here when
you refresh it stops here as well.

83
00:04:38.013 --> 00:04:41.779
So you've kind of got two different
approaches for how to get a breakpoint.

84
00:04:41.779 --> 00:04:44.721
You can do it in the code or the word
debugger or if you know where the code is

85
00:04:44.721 --> 00:04:47.924
in sources you can click on that line
number and it will pause execution there.

86
00:04:47.924 --> 00:04:50.884
So when that happens you can
get this little message here.

87
00:04:50.884 --> 00:04:52.020
Pause it on breakpoint and

88
00:04:52.020 --> 00:04:54.660
you get a couple of different
things over on this right side.

89
00:04:54.660 --> 00:04:58.543
In the middle here, we can see exactly
what we'd expect, we see our source code,

90
00:04:58.543 --> 00:05:02.000
and the line that's highlighted blue
is the line that we're paused on.

91
00:05:02.000 --> 00:05:04.777
So if you had multiple debuggers it'll
always highlight blue the one that it's

92
00:05:04.777 --> 00:05:05.570
actively stopped on.

93
00:05:05.570 --> 00:05:09.730
I'm gonna expand this little
right side here a little bit.

94
00:05:09.730 --> 00:05:12.060
So we've got some options
that we're gonna cover.

95
00:05:12.060 --> 00:05:16.530
At the very top here we have
our kind of navigation options.

96
00:05:16.530 --> 00:05:18.145
We'll cover these in a minute but

97
00:05:18.145 --> 00:05:20.750
the basic idea is once stopped
you have some choices.

98
00:05:20.750 --> 00:05:26.180
You can step over, step into,
step out of or see the next one.

99
00:05:26.180 --> 00:05:29.246
And we'll cover what each of those mean
by the kinda concept is where it stop to

100
00:05:29.246 --> 00:05:31.620
a certain line of code and
it's like whoa, did you want it?

101
00:05:31.620 --> 00:05:34.568
And maybe it calls a function, it's like,
do you wanna go into that function or

102
00:05:34.568 --> 00:05:36.950
do you wanna go to the next line
of code or do you wanna, you know.

103
00:05:36.950 --> 00:05:38.224
And then when you go into
the function it's like okay,

104
00:05:38.224 --> 00:05:39.090
I'm done here, I wanna go back out.

105
00:05:39.090 --> 00:05:41.730
You can kind of move around like this.

106
00:05:41.730 --> 00:05:44.242
The big thing to keep in mind is
you can't go backwards, right?

107
00:05:44.242 --> 00:05:48.533
It's not a time travelling debugger, like
if you use something like Redux DevTools,

108
00:05:48.533 --> 00:05:50.430
that's a time travelling debugger.

109
00:05:50.430 --> 00:05:53.840
So you can replay actions or you can
undo actions, this isn't like that,

110
00:05:53.840 --> 00:05:56.053
this is just unidirectional
as it's parsing.

111
00:05:56.053 --> 00:05:59.184
So if you step into a function and
then step back out of it,

112
00:05:59.184 --> 00:06:02.732
you don't go back to where you were,
you go to the next line now.

113
00:06:02.732 --> 00:06:06.600
But, either way, you've got something
paused and you can kinda play around.

114
00:06:06.600 --> 00:06:09.400
So we'll cover this
in-depth in a second here.

115
00:06:09.400 --> 00:06:11.503
We got a few things here.

116
00:06:11.503 --> 00:06:16.250
So if I minimize all these, we've got
a lot of different things going on.

117
00:06:16.250 --> 00:06:18.280
So watch is really useful.

118
00:06:18.280 --> 00:06:22.214
Let me delete these, what watch lets you
do is it lets you put in any expression,

119
00:06:22.214 --> 00:06:26.240
so it could be a variable, it could be
multiple variables, anything like that.

120
00:06:27.420 --> 00:06:30.712
And what it'll do like if I go add and
I add one here,

121
00:06:30.712 --> 00:06:36.014
it'll tell you if that variable is defined
in the current scope what it's set to.

122
00:06:36.014 --> 00:06:38.800
So we can see one is defined,
it's a function.

123
00:06:38.800 --> 00:06:41.940
If I click on it it shows me
the arguments the caller the length.

124
00:06:41.940 --> 00:06:45.237
So this is a really useful like
if you're doing an API call and

125
00:06:45.237 --> 00:06:48.341
there's an error and
you're not sure what the error is,

126
00:06:48.341 --> 00:06:51.330
you can put a debug statement
in the success function.

127
00:06:51.330 --> 00:06:54.231
And then you can click Watch,
add input your data name,

128
00:06:54.231 --> 00:06:55.968
whatever variable your name it.

129
00:06:55.968 --> 00:06:59.058
And now you can start really clicking
through with no worry about time,

130
00:06:59.058 --> 00:07:01.400
things or frozen you can click through.

131
00:07:01.400 --> 00:07:02.510
So that's the Watch is good for.

132
00:07:02.510 --> 00:07:05.532
It's also cool,
because anything that you add the Watch,

133
00:07:05.532 --> 00:07:07.540
it'll keep trying to evaluate.

134
00:07:07.540 --> 00:07:11.083
So if I were, example,
to declare a variable in a function and

135
00:07:11.083 --> 00:07:14.914
put a breakpoint there and
put a watch on it, we're good, right?

136
00:07:14.914 --> 00:07:16.140
We're gonna see the variable.

137
00:07:16.140 --> 00:07:17.786
And then let's say, I go step over and

138
00:07:17.786 --> 00:07:20.880
then move into another function where
that variable no longer exists.

139
00:07:20.880 --> 00:07:25.260
The Watch will update in real time and
say okay, well, now it's undefined.

140
00:07:25.260 --> 00:07:27.056
And if you go back and say okay,
now it's the variable.

141
00:07:27.056 --> 00:07:31.350
And so it kinda tells you what's available
at that time, which is really handy.

142
00:07:31.350 --> 00:07:34.339
The Call Stack It's really simply
like how did we get here, right?

143
00:07:34.339 --> 00:07:38.438
So it's like whenever you put a debugger,
it's like how did we get here?

144
00:07:38.438 --> 00:07:41.512
So the Call Stack get really big in
production apps as you can imagine.

145
00:07:41.512 --> 00:07:45.691
But the kind of important thing is if
you're seeing a line of code like an error

146
00:07:45.691 --> 00:07:48.329
condition is getting hit and
you're like well,

147
00:07:48.329 --> 00:07:50.540
why is the error condition getting hit?

148
00:07:50.540 --> 00:07:51.922
You'll see this big call stack here.

149
00:07:51.922 --> 00:07:56.390
So I can see here one got called,
it's like well why did one get called?

150
00:07:56.390 --> 00:07:57.692
It's like,
because of this anonymous function.

151
00:07:57.692 --> 00:08:02.280
So I can actually see the call sign
where the function was invoked, right?

152
00:08:02.280 --> 00:08:05.676
With a bigger app, or whatever, if you're
in the error condition see what, if,

153
00:08:05.676 --> 00:08:08.498
check for the error condition,
you can step back as far as you want.

154
00:08:08.498 --> 00:08:12.507
You'll normally see at the very bottom
of a call stack you'll see a global

155
00:08:12.507 --> 00:08:14.420
function call, like this.

156
00:08:14.420 --> 00:08:17.325
Maybe you'll see an event happen,
like a browser event, like a click.

157
00:08:17.325 --> 00:08:20.060
How did we get into this area,
it's like well, somebody clicked.

158
00:08:20.060 --> 00:08:22.770
Or you'll see like an async, like
a fetch call happen, those kinda things.

159
00:08:22.770 --> 00:08:25.071
So it starts at the very beginning, and

160
00:08:25.071 --> 00:08:28.930
it'll take you all the way through
until that exact line of code.

161
00:08:28.930 --> 00:08:31.391
Scope is pretty handy,
I usually just use watch.

162
00:08:31.391 --> 00:08:34.776
But you can see,
I don't know if anybody is ever been like,

163
00:08:34.776 --> 00:08:39.810
you're trying to do like this.foo, and
it's like, foo is undefined, or whatever.

164
00:08:39.810 --> 00:08:40.550
And you're like, what?

165
00:08:40.550 --> 00:08:42.270
Why don't I have access to it?

166
00:08:42.270 --> 00:08:43.487
So you can go into the scope and

167
00:08:43.487 --> 00:08:46.530
you can see exactly what you have access
to at that moment in time, right?

168
00:08:46.530 --> 00:08:50.421
You can see, in the global scope, here
are the things that we have access to.

169
00:08:50.421 --> 00:08:53.660
A lot of these are just DOM API's,
browser defaults.

170
00:08:53.660 --> 00:08:55.040
These are just what you have
access to in JavaScript, right?

171
00:08:55.040 --> 00:08:57.383
And so
you've got a lot of stuff like that.

172
00:08:57.383 --> 00:09:01.093
As you get a more complex app,
you'll see your function scope too, right?

173
00:09:01.093 --> 00:09:03.520
So you can say,
what does this function have access to?

174
00:09:03.520 --> 00:09:07.383
And you'll be like, it has foo and
it has var, those kinda things.

175
00:09:07.383 --> 00:09:08.749
There's a lot of noise in here.

176
00:09:08.749 --> 00:09:12.616
So typically that's why I prefer to
just add what I want via watch, right?

177
00:09:12.616 --> 00:09:15.515
So a watch for this.foo,
and if it's undefined,

178
00:09:15.515 --> 00:09:19.640
then I'll change my watch to just be
this and I'll see what's on there.

179
00:09:19.640 --> 00:09:21.970
The next one is just breakpoints.

180
00:09:21.970 --> 00:09:24.769
So this is just, as you start debugging
this way, you might add more and

181
00:09:24.769 --> 00:09:25.570
more breakpoints.

182
00:09:25.570 --> 00:09:30.060
It's like okay, I want one here, and I
want one here, and I like my one up here.

183
00:09:30.060 --> 00:09:31.057
So you'll add more and more.

184
00:09:31.057 --> 00:09:34.240
You can delete them by
right clicking on one.

185
00:09:34.240 --> 00:09:36.790
And again you can remove all, or
deactivate them, or whatever.

186
00:09:36.790 --> 00:09:40.389
You can also just uncheck them, which
keeps them stored, kind a like cached, but

187
00:09:40.389 --> 00:09:41.860
they won't trigger any longer.

188
00:09:41.860 --> 00:09:45.372
So you can see when I uncheck this one,
it goes from a dark blue to a light blue,

189
00:09:45.372 --> 00:09:46.850
light blue means deactivated.

190
00:09:48.180 --> 00:09:50.121
So yes, you've got kind of all these
breakpoints all over the place.

191
00:09:50.121 --> 00:09:53.341
The bottom four, we're gonna
get into later this lesson, but

192
00:09:53.341 --> 00:09:57.300
later, but I just kinda wanted to like
walk through what's going on up here.

193
00:09:57.300 --> 00:10:00.866
So I would really say if you're
trying to explore, that's awesome,

194
00:10:00.866 --> 00:10:02.630
you should look through all of it.

195
00:10:02.630 --> 00:10:06.116
If you're really just trying to kinda
simplify things for yourself, you don't

196
00:10:06.116 --> 00:10:09.150
really need to look at the Breakpoints
tab, cuz you can see them here.

197
00:10:09.150 --> 00:10:12.262
You should have your Watch open all the
time so you can change what you're looking

198
00:10:12.262 --> 00:10:14.639
for, and you should have your
Call Stack open all the time, so

199
00:10:14.639 --> 00:10:15.810
you can see how you got there.

200
00:10:15.810 --> 00:10:20.440
Those are the two that I use the most
probably why they're at the top.

201
00:10:20.440 --> 00:10:23.166
Okay, so going back to this kind of
concept of, is that kind of good for

202
00:10:23.166 --> 00:10:23.689
everybody?

203
00:10:23.689 --> 00:10:27.920
Just like what these panels kinda
contain and why they might be useful.

204
00:10:27.920 --> 00:10:30.200
Okay, let me know at anytime
if you have questions.

205
00:10:30.200 --> 00:10:32.001
I know there's a lot getting covered.

206
00:10:32.001 --> 00:10:36.410
So if we go all the way back to this
concept where I just have one breakpoint

207
00:10:36.410 --> 00:10:39.390
at this one console log,
that's all I've got.

208
00:10:40.590 --> 00:10:45.170
So as we start kinda wanting to navigate
around you've got these five buttons here.

209
00:10:45.170 --> 00:10:48.420
So one of them is resume script execution.

210
00:10:48.420 --> 00:10:51.750
And what this one is gonna do is be like
I don't need this breakpoint right now.

211
00:10:51.750 --> 00:10:56.484
Please continue going until either you hit
another breakpoint or the page just loads.

212
00:10:56.484 --> 00:10:58.651
So since I only have the one breakpoint,

213
00:10:58.651 --> 00:11:02.689
if I were to hit resume script execution
it'll just load the page, right?

214
00:11:02.689 --> 00:11:03.944
So hit that, it just loads the page.

215
00:11:03.944 --> 00:11:05.757
There's no more stuff to stop.

216
00:11:05.757 --> 00:11:09.117
If I had two breakpoints, like one here
and one here, and I refreshed the page and

217
00:11:09.117 --> 00:11:10.213
I get stopped on this one.

218
00:11:10.213 --> 00:11:13.486
And I'm like,
I don't really care about that right now.

219
00:11:13.486 --> 00:11:15.819
And I hit Resume,
it'll just play to the next breakpoint.

220
00:11:15.819 --> 00:11:18.676
So resume is like cool,
I'm done with this breakpoint,

221
00:11:18.676 --> 00:11:21.970
please move on until either you finish or
you hit the next one.

222
00:11:21.970 --> 00:11:23.727
So I'll remove the breakpoint and
I'll kind of refresh the page.

223
00:11:23.727 --> 00:11:29.140
So the next thing that you can do is that
you can step over the next function call.

224
00:11:29.140 --> 00:11:31.700
So if you're at, let this one doesn't make
a lot of sense till we hit this next one.

225
00:11:31.700 --> 00:11:34.879
So I'll hit step over and
boom it moves me down to line two.

226
00:11:34.879 --> 00:11:38.908
So notice, things are changing a little
bit here where we didn't manually add

227
00:11:38.908 --> 00:11:42.326
a breakpoint to line two,
we only added it to this console log, and

228
00:11:42.326 --> 00:11:45.581
then we're now we are like
stepping through the code, right?

229
00:11:45.581 --> 00:11:47.350
That's why I stepped through debugger.

230
00:11:47.350 --> 00:11:51.250
So we've stepped into line two, and
now we got some choices, right?

231
00:11:51.250 --> 00:11:54.489
We can say like, I don't care about two,
show me the next line of code.

232
00:11:54.489 --> 00:11:58.777
Or we can say I do care about two, go
into that function, I wanna drill in and

233
00:11:58.777 --> 00:12:00.083
see what's going on.

234
00:12:00.083 --> 00:12:04.249
We don't really have the option to step
out of the function because that'll just

235
00:12:04.249 --> 00:12:05.850
go back to the global, right?

236
00:12:05.850 --> 00:12:08.956
That'll just take us back out and
we'll be done.

237
00:12:08.956 --> 00:12:13.003
So if we wanted to step in to two, we can
click step into next function call and

238
00:12:13.003 --> 00:12:17.182
we'll see that the now the break point
gets moved into this function two here,

239
00:12:17.182 --> 00:12:19.050
console.log from function two.

240
00:12:19.050 --> 00:12:23.780
So now again kinda the options are we
can keep going, scripts done, right?

241
00:12:23.780 --> 00:12:25.170
There's no more breakpoints.

242
00:12:25.170 --> 00:12:28.352
We can not really step into
anything because there's no

243
00:12:28.352 --> 00:12:31.003
more functions that we're calling, right?

244
00:12:31.003 --> 00:12:34.982
We can step back out and here's where I
find like a lot of confusion I think to

245
00:12:34.982 --> 00:12:38.328
a lot of people, they would think,
well, I was on line three,

246
00:12:38.328 --> 00:12:42.590
I stepped in to line eight, now, I'd like
to step back out to line three again.

247
00:12:42.590 --> 00:12:43.700
But that's not exactly how it works.

248
00:12:43.700 --> 00:12:47.787
So if we step out, we'll notice it's
completed with this line three and

249
00:12:47.787 --> 00:12:50.075
has moved onto the next line basically.

250
00:12:50.075 --> 00:12:52.035
And the reason again,
it's not time traveling, right?

251
00:12:52.035 --> 00:12:55.355
In order to step into the function,
it actually plays that bit of code.

252
00:12:55.355 --> 00:12:57.804
So when you step back out,
it won't take you back in time.

253
00:12:57.804 --> 00:13:00.360
It'll just take you to what
would of been next otherwise.

254
00:13:00.360 --> 00:13:04.565
So if that's confusing,
if it helps to think about it.

255
00:13:04.565 --> 00:13:08.010
So if we start over again by
refreshing and we hit Step Over.

256
00:13:08.010 --> 00:13:12.052
So we're here now, at this point,
it would be equivalent to step over to and

257
00:13:12.052 --> 00:13:15.418
to step in to and out of,
those are equivalent things, right?

258
00:13:15.418 --> 00:13:18.994
Stepping over a function is the equivalent
of stepping into it and back out.

259
00:13:18.994 --> 00:13:22.327
I hope that's gonna high,
think about it if that helps.

260
00:13:22.327 --> 00:13:25.151
So let's step over into three,
get the same kind of option.

261
00:13:25.151 --> 00:13:29.759
Step into three, and where here, will
step on to the next one which is four,

262
00:13:29.759 --> 00:13:32.140
we'll step into four, which is here.

263
00:13:32.140 --> 00:13:35.530
This one really just kinda comes with the
time, as you're kind of clicking around.

264
00:13:35.530 --> 00:13:38.977
The cool thing is it's a website,
if you go too far, just refresh, okay?

265
00:13:38.977 --> 00:13:42.805
[LAUGH] And then you start back at the top
again, no problems, pretty easy there.

266
00:13:42.805 --> 00:13:45.510
But I think we have an exercise
on this coming up, and

267
00:13:45.510 --> 00:13:49.754
I think it just helps to even just do this
on your own sites, like add a breakpoint,

268
00:13:49.754 --> 00:13:52.848
start stepping through until
it gets really comfortable.

269
00:13:52.848 --> 00:13:55.230
Is everybody good so far?

270
00:13:55.230 --> 00:13:57.045
Yeah, a question.
&gt;&gt; Speaker 2: Who did that new

271
00:13:57.045 --> 00:13:59.090
step?
&gt;&gt; Jon Kuperman: What was that?

272
00:13:59.090 --> 00:14:01.330
I'm sorry.
&gt;&gt; Speaker 2: Is that a new option for

273
00:14:01.330 --> 00:14:04.860
just plain step after step out?
&gt;&gt; Jon Kuperman: Yeah, so

274
00:14:04.860 --> 00:14:06.120
this is a new option.

275
00:14:06.120 --> 00:14:10.940
So instead of stepping,
it's a little bit weird, right?

276
00:14:10.940 --> 00:14:12.583
Because they do basically
the equivalent thing.

277
00:14:12.583 --> 00:14:16.160
It is a new option,
it's just a single step.

278
00:14:16.160 --> 00:14:20.697
So what it means is step is either
over if it's not a function, or

279
00:14:20.697 --> 00:14:22.470
into if it is a function.

280
00:14:22.470 --> 00:14:25.430
So do the next thing is what step means,
right?

281
00:14:25.430 --> 00:14:28.770
So when we're here and
then we're like, okay, we hit step,

282
00:14:28.770 --> 00:14:32.073
it's gonna be like,
is that a function that I can call?

283
00:14:32.073 --> 00:14:34.679
No, then I'll just step over, right?

284
00:14:34.679 --> 00:14:39.021
But now we're here, and we hit step, it's
like, is it a function that I can call?

285
00:14:39.021 --> 00:14:40.307
Yes, so it will step in.

286
00:14:40.307 --> 00:14:41.773
Does that make sense?

287
00:14:41.773 --> 00:14:44.500
It's kinda like just do whatever is next,

288
00:14:44.500 --> 00:14:47.921
as opposed to you dictating
whether you go in or over.

289
00:14:47.921 --> 00:14:51.910
And it kind of shows that like going
in is not always an option, right?

290
00:14:51.910 --> 00:14:55.821
So for here, I went on console.log, and
we say step in, it's not gonna do that,

291
00:14:55.821 --> 00:14:57.395
it's gonna be the equivalent.

292
00:14:57.395 --> 00:15:00.123
That's a little bit tricky, it'd be
probably better if the buttons were

293
00:15:00.123 --> 00:15:02.027
disabled, is what it probably should be,
right?

294
00:15:02.027 --> 00:15:05.310
Because you can't step into
something that's not a function.

295
00:15:07.100 --> 00:15:11.812
They kind of all have their place, I think
it's better in more complicated code where

296
00:15:11.812 --> 00:15:16.001
like calling things that are variables and
you're like just do the next step

297
00:15:16.001 --> 00:15:16.732
basically.

298
00:15:16.732 --> 00:15:17.671
&gt;&gt; Speaker 2: Thank you.
&gt;&gt; Jon Kuperman: Yeah?

299
00:15:17.671 --> 00:15:19.076
&gt;&gt; Speaker 2: We were asking about

300
00:15:19.076 --> 00:15:20.398
those two arrows on

301
00:15:20.398 --> 00:15:22.522
the right of the right point?
&gt;&gt; Jon Kuperman: The two.

302
00:15:22.522 --> 00:15:23.637
&gt;&gt; Speaker 2: So line number two,

303
00:15:23.637 --> 00:15:26.856
you've got a breakpoint on the left,
and then there's.

304
00:15:26.856 --> 00:15:27.709
&gt;&gt; Jon Kuperman: Yep, yeah, so

305
00:15:27.709 --> 00:15:28.901
this is really cool.

306
00:15:28.901 --> 00:15:30.757
We're gonna get into
this a cool amount later.

307
00:15:30.757 --> 00:15:33.689
But DevTools starts adding all of,
this like a lot of it's new, and

308
00:15:33.689 --> 00:15:34.727
it's really helpful.

309
00:15:34.727 --> 00:15:39.506
So what we'll start noticing, especially
when you start debugging complicated

310
00:15:39.506 --> 00:15:43.869
applications, is as you set these
breakpoints, instead of making you add

311
00:15:43.869 --> 00:15:47.262
watches for everything,
it tries to be really helpful and

312
00:15:47.262 --> 00:15:51.397
just inline a bunch of
contextual information for you.

313
00:15:51.397 --> 00:15:54.126
So I think I'm, let me try this,
I think this might be a cool example.

314
00:15:54.126 --> 00:15:58.710
So instead of just calling one,
I call one and pass in the word foo.

315
00:15:58.710 --> 00:16:01.529
And then over here I take the word foo and

316
00:16:01.529 --> 00:16:05.817
then maybe I console.log(foo),
something like that.

317
00:16:05.817 --> 00:16:07.680
So we kinda refresh here.

318
00:16:07.680 --> 00:16:10.150
We can see that it inlines
this information for me.

319
00:16:10.150 --> 00:16:14.300
So it's like showing me inline
what got passed into the function.

320
00:16:14.300 --> 00:16:15.749
So I don't have to manually add watches.

321
00:16:15.749 --> 00:16:18.353
Similarly, it'll add these little arrows,

322
00:16:18.353 --> 00:16:22.767
anywhere where it has dropdown
information, more contextual information.

323
00:16:22.767 --> 00:16:23.983
So it has two different things.

324
00:16:23.983 --> 00:16:28.410
It has contextual information on the
console object, so I can hover over that

325
00:16:28.410 --> 00:16:32.373
and it'll show me what I can call
on console, which is really great.

326
00:16:32.373 --> 00:16:34.617
And it also has information
on this log function.

327
00:16:34.617 --> 00:16:36.092
And so I can hover over that and

328
00:16:36.092 --> 00:16:39.815
see that log is a function that doesn't
take any parameters, mandatory.

