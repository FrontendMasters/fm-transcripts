WEBVTT

1
00:00:03.142 --> 00:00:06.230
&gt;&gt; Jon Kuperman: So the next
section is performance monitoring.

2
00:00:06.230 --> 00:00:11.133
Kind of idea here we've talked about
a little bit about this difference between

3
00:00:11.133 --> 00:00:12.532
you testing your app.

4
00:00:12.532 --> 00:00:16.923
So you've got like a local build on a fast
laptop, good Wi-Fi, versus your user,

5
00:00:16.923 --> 00:00:19.387
who could be anywhere on
any type of hardware.

6
00:00:19.387 --> 00:00:22.060
And so there's kind of these two
schools of monitoring right.

7
00:00:22.060 --> 00:00:24.000
So if you ever set up,

8
00:00:24.000 --> 00:00:27.310
if you do a Lighthouse audit of your
own site, that is monitoring, right?

9
00:00:27.310 --> 00:00:28.330
You're getting all this feedback.

10
00:00:28.330 --> 00:00:29.970
How long did the page take to load?

11
00:00:29.970 --> 00:00:33.990
How big are the, you know all this stuff,
but it's in your use case, right?

12
00:00:33.990 --> 00:00:37.340
It's specific to you, and there are tools
within the dev tools where you can

13
00:00:37.340 --> 00:00:40.360
simulate the network slow down,
or simulate being offline.

14
00:00:40.360 --> 00:00:41.860
So you can kind of get there.

15
00:00:41.860 --> 00:00:45.154
But there's this other concept
of user monitoring where you

16
00:00:45.154 --> 00:00:47.230
actually send code into production.

17
00:00:47.230 --> 00:00:50.620
And your users download it, and
it can measure things and time things.

18
00:00:50.620 --> 00:00:53.520
And as it goes, it'll start feeding
that information back to you.

19
00:00:53.520 --> 00:00:55.000
So a lot of big companies do this.

20
00:00:56.410 --> 00:00:59.430
Where they'll basically
just send code to the user.

21
00:00:59.430 --> 00:01:02.240
And then as the user's browsing the site,
kind of under the scenes,

22
00:01:02.240 --> 00:01:05.900
it starts doing stuff, like how long
did it take when you clicked Reply for

23
00:01:05.900 --> 00:01:07.000
the reply box to show up?

24
00:01:07.000 --> 00:01:08.500
They'll measure that kinda stuff.

25
00:01:08.500 --> 00:01:11.550
And then you can get this aggregate
of real information, right?

26
00:01:11.550 --> 00:01:17.060
So the way that we used to do that was,
sorry, I'm a little out of order here.

27
00:01:17.060 --> 00:01:19.238
We have this cool thing
called the Performance API.

28
00:01:19.238 --> 00:01:21.550
Before we had this performance API,

29
00:01:21.550 --> 00:01:23.654
the way that we used to
do it was with date time.

30
00:01:23.654 --> 00:01:25.651
I don't know if anybody
ever did stuff like that.

31
00:01:25.651 --> 00:01:28.550
So you would be like
start equals a new day.

32
00:01:28.550 --> 00:01:30.960
And then you do some code,
like a for loop or whatever.

33
00:01:30.960 --> 00:01:33.794
Open the reply box, and
you'd be like n equals another new day.

34
00:01:33.794 --> 00:01:37.090
And then you'd be like the time it took
is just the n minus the start, right?

35
00:01:37.090 --> 00:01:39.100
Cuz you'd get two dates
like down to the second,

36
00:01:39.100 --> 00:01:40.520
and then you see how long they took.

37
00:01:40.520 --> 00:01:43.849
And then you'd send that off,
it took 13 seconds or whatever.

38
00:01:43.849 --> 00:01:46.720
But we actually have some really cool
tools with this Performance API.

39
00:01:46.720 --> 00:01:51.246
So the Performance API lives here
under the MDN Mozilla developer

40
00:01:51.246 --> 00:01:53.310
network under performance.

41
00:01:53.310 --> 00:01:57.586
And the API that we're interested
in is mark and measure.

42
00:01:57.586 --> 00:01:59.760
And so it's a very similar idea, right?

43
00:01:59.760 --> 00:02:00.940
It's just a little bit more precise.

44
00:02:00.940 --> 00:02:02.960
So instead of doing these date times,

45
00:02:02.960 --> 00:02:05.980
you can do marks anywhere,
as many as you want.

46
00:02:05.980 --> 00:02:07.607
So I named mine start and end.

47
00:02:07.607 --> 00:02:09.130
And then you can do measure.

48
00:02:09.130 --> 00:02:11.760
And what a measure is,
is that kind of subtraction thing.

49
00:02:11.760 --> 00:02:13.800
So you make a new measure element.

50
00:02:13.800 --> 00:02:16.440
It gives it a name, and
then it gives it what you're measuring,

51
00:02:16.440 --> 00:02:17.750
as many as you want.

52
00:02:17.750 --> 00:02:18.852
So is this kinda making sense?

53
00:02:18.852 --> 00:02:22.668
So we make a new mark, do something,
make another new mark, and

54
00:02:22.668 --> 00:02:25.931
then we measure those marks,
is basically what we do.

55
00:02:25.931 --> 00:02:28.969
And there's some funny libraries out here
that wrap it with different cool names.

56
00:02:28.969 --> 00:02:31.549
I think there's one that's like
Marky-Mark or something like that.

57
00:02:31.549 --> 00:02:33.274
But there's really,
really cool stuff you can do.

58
00:02:33.274 --> 00:02:36.843
So yeah, so the concept here is that you
would, anything that you wanna time, and

59
00:02:36.843 --> 00:02:39.377
you really wanna know how long
it takes your users to do it,

60
00:02:39.377 --> 00:02:41.021
you could just write code like this.

61
00:02:41.021 --> 00:02:43.030
This is totally safe
to ship to production.

62
00:02:43.030 --> 00:02:45.870
The only thing that that you would need to
add is something at the end that does like

63
00:02:45.870 --> 00:02:47.580
a post request or something, right?

64
00:02:47.580 --> 00:02:50.783
So you'd like have some service that you
build, and you would just send that data.

65
00:02:50.783 --> 00:02:53.834
You would send like a user ID,
and what action they took and

66
00:02:53.834 --> 00:02:55.370
how long they took it.

67
00:02:55.370 --> 00:02:58.720
And I think if you go to a lot of popular
apps, and you open the network tab,

68
00:02:58.720 --> 00:03:02.720
and you filter by xhr, you'll start
seeing these requests happening a lot.

69
00:03:02.720 --> 00:03:04.450
You can kinda dive into them,
and you can see,

70
00:03:04.450 --> 00:03:08.450
they're measuring how long it took
from when I clicked to when it opened.

71
00:03:08.450 --> 00:03:10.910
Or how long it took from when
I hit Send to when it posted,

72
00:03:10.910 --> 00:03:12.580
all these different
things that you measure.

73
00:03:12.580 --> 00:03:15.980
It can give you a lot more in
depth information about how

74
00:03:15.980 --> 00:03:17.630
your users are doing things.

75
00:03:17.630 --> 00:03:21.680
So the Performance API is here,
another really cool thing about it,

76
00:03:21.680 --> 00:03:26.720
which we'll see in the exercises, when you
use the Performance API over the date.

77
00:03:26.720 --> 00:03:28.240
And you go to the Profiler screen,

78
00:03:28.240 --> 00:03:30.510
which is where we've been doing
all the performance stuff.

79
00:03:30.510 --> 00:03:33.310
You'll actually see a new section just for
your performance marks.

80
00:03:33.310 --> 00:03:35.620
So it actually gives you all that
information, a really nice UI,

81
00:03:35.620 --> 00:03:37.470
which is another big advantage over it.

