WEBVTT

1
00:00:03.287 --> 00:00:05.239
&gt;&gt; Jon Kuperman: Memory leaks.

2
00:00:05.239 --> 00:00:08.051
And so memory is kind of a tricky thing.

3
00:00:08.051 --> 00:00:10.410
In some programming languages,
you have to be very explicit about memory.

4
00:00:12.680 --> 00:00:16.279
I'm not sure if any of you have ever
used a language before where you have to

5
00:00:16.279 --> 00:00:20.016
actually declare, I'm making an array,
and it's gonna be four by seven.

6
00:00:20.016 --> 00:00:23.466
I'm gonna put this in it, and maybe you're
gonna have to clean up the memory when

7
00:00:23.466 --> 00:00:25.922
you're done with allocating and
deallocating things.

8
00:00:25.922 --> 00:00:28.532
But scripting languages aren't like that,
right?

9
00:00:28.532 --> 00:00:30.069
You're just like, I need an array.

10
00:00:30.069 --> 00:00:31.691
I don't know how big it's gonna be yet,

11
00:00:31.691 --> 00:00:34.380
and you're just kinda write the code
that you want, and it works.

12
00:00:34.380 --> 00:00:35.256
It's really nice.

13
00:00:35.256 --> 00:00:39.546
And so the basic way that memory is
kinda working is you allocate it, so

14
00:00:39.546 --> 00:00:44.218
you declare variables, and you put
stuff in them, and anything like that.

15
00:00:44.218 --> 00:00:46.318
You use it and then you release it, right?

16
00:00:46.318 --> 00:00:48.400
And that's kind of the way
that things should work.

17
00:00:48.400 --> 00:00:51.330
So what we call a memory leak in
JavaScript is when something can't be

18
00:00:51.330 --> 00:00:53.500
released, when that third
thing can't happen.

19
00:00:54.550 --> 00:00:58.090
And so what you'll see is that,
what you really should see is that,

20
00:00:58.090 --> 00:01:01.790
and we'll get into the graphs, is that
you use whatever memory you need to use,

21
00:01:01.790 --> 00:01:03.060
cuz that's what you're doing.

22
00:01:03.060 --> 00:01:05.990
And then, when you're done with it, you
should see it all go back down to zero.

23
00:01:05.990 --> 00:01:06.821
It should be clear, right?

24
00:01:06.821 --> 00:01:09.226
You make all the arrays, you do all
the stuff, then you pop up the domain, and

25
00:01:09.226 --> 00:01:11.206
you should delete all those things,
and you're back to zero.

26
00:01:11.206 --> 00:01:15.226
So the healthy memory graph will kind of
look like this, rising and falling wave,

27
00:01:15.226 --> 00:01:18.430
or even sometimes it'll go up and
it'll hit, cuz you need to keep

28
00:01:18.430 --> 00:01:22.075
all that stuff in memory, if you're
doing graphs and stuff like that.

29
00:01:22.075 --> 00:01:25.555
And then it'll just stay really flat, so
it's like you use whatever you use, and

30
00:01:25.555 --> 00:01:26.445
then it stays.

31
00:01:26.445 --> 00:01:29.725
What we don't wanna see is
what we call the jigsaw.

32
00:01:29.725 --> 00:01:32.110
Sorry, I'll do it,
trying to do it at your angle.

33
00:01:32.110 --> 00:01:34.881
But you don't wanna see it just
growing and growing and growing and

34
00:01:34.881 --> 00:01:35.884
never going back down.

35
00:01:35.884 --> 00:01:38.984
That's what we're always looking for
is just memory that just keeps growing,

36
00:01:38.984 --> 00:01:41.539
especially when you're not doing
anything on the application.

37
00:01:41.539 --> 00:01:45.950
So there's a few things that cause
memory leaks that are really high level.

38
00:01:45.950 --> 00:01:49.080
Unfortunately, they are harder to spot

39
00:01:49.080 --> 00:01:51.950
in big code bases cuz
it's just not as obvious.

40
00:01:51.950 --> 00:01:56.370
But a few things, so
one example would be an accidental global.

41
00:01:56.370 --> 00:02:00.566
So if you've taken any of Kyle Simpson's
courses on JavaScript, if you do something

42
00:02:00.566 --> 00:02:04.372
like this, you have a function you forget
to put a var or a const declaration.

43
00:02:04.372 --> 00:02:08.313
And you're not in the strict mode, it will
start looking up the scope chain to see if

44
00:02:08.313 --> 00:02:11.714
that function has been declared like,
what are you trying to say here?

45
00:02:11.714 --> 00:02:14.879
And if it gets all the way to the global
to the window object that doesn't have

46
00:02:14.879 --> 00:02:17.970
one, it tries to be helpful, and
it just creates one for you.

47
00:02:17.970 --> 00:02:20.810
So then even after this function has
done called, and you think it would be

48
00:02:20.810 --> 00:02:25.050
able to garbage collect or to clean up the
variable inside of it, it's not able to.

49
00:02:25.050 --> 00:02:27.780
Because now, that variable lives
on the global window object.

50
00:02:27.780 --> 00:02:31.700
So if instead of a string that had
a huge array of 10 million items in it,

51
00:02:31.700 --> 00:02:33.220
that's there forever now.

52
00:02:33.220 --> 00:02:34.817
That's probably not what you want.

53
00:02:34.817 --> 00:02:37.952
Another one are any kind of
forgotten intervals and timers.

54
00:02:37.952 --> 00:02:40.450
So the setInterval and
the setTimeout APIs,

55
00:02:40.450 --> 00:02:43.814
they both return a token that
you can call cancel on, right?

56
00:02:43.814 --> 00:02:48.281
So instead of doing this, setInterval, you
probably wanna do something like const,

57
00:02:48.281 --> 00:02:50.069
my interval equals setInterval.

58
00:02:50.069 --> 00:02:53.191
And whenever you hit your finish
condition, you end it, right?

59
00:02:53.191 --> 00:02:59.192
You remove that setInterval, cuz this is
just gonna keep going forever, basically.

60
00:02:59.192 --> 00:03:00.190
The DOM and not the DOM.

61
00:03:00.190 --> 00:03:03.318
See this went a lot, it looks
different in different frameworks.

62
00:03:03.318 --> 00:03:07.550
So basically, here, we make a variable
called button, and we hit the DOM,

63
00:03:07.550 --> 00:03:10.282
we grab this button ID,
and we stick it in there.

64
00:03:10.282 --> 00:03:13.210
And then later, we go ahead and
we remove that child.

65
00:03:13.210 --> 00:03:16.474
So if you think about a graph of data or
something like that,

66
00:03:16.474 --> 00:03:20.610
where as you're scrolling,
you're adding and removing nodes, right?

67
00:03:20.610 --> 00:03:22.884
You hit the infinite scroll, and
you add ten more rows of data, and

68
00:03:22.884 --> 00:03:23.904
you add ten more rows of data.

69
00:03:23.904 --> 00:03:26.235
Ideally, you should also be
deleting form the top, so

70
00:03:26.235 --> 00:03:27.812
you don't have this monstrous app.

71
00:03:27.812 --> 00:03:32.843
But if you do something like this, we are
removing the button from the DOM, right?

72
00:03:32.843 --> 00:03:33.874
Where it would [INAUDIBLE] out the DOM.

73
00:03:33.874 --> 00:03:37.633
But we haven't removed our handler to
that global button variable, right?

74
00:03:37.633 --> 00:03:41.572
So that button variable still has this
accessed instance that we grabbed there.

75
00:03:41.572 --> 00:03:42.177
Does that make sense?

76
00:03:42.177 --> 00:03:46.016
So we kinda clone something, and then you
delete the thing that we cloned from,

77
00:03:46.016 --> 00:03:47.637
but you don't delete the clone.

78
00:03:47.637 --> 00:03:49.323
Those can build up over time.

79
00:03:49.323 --> 00:03:52.545
A lot of these you see when you're
building more lower leveled tools,

80
00:03:52.545 --> 00:03:56.493
like if your building a virtual scroller,
building a framework, things like that.

81
00:03:56.493 --> 00:03:58.921
These kind of memory leaks can
be really devastating then.

82
00:03:58.921 --> 00:04:01.262
Whereas if you leave a DOM
reference in your code,

83
00:04:01.262 --> 00:04:04.518
you're not going to notice that
probably in your application code.

