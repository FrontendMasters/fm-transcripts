WEBVTT

1
00:00:03.527 --> 00:00:05.070
&gt;&gt; Jon Kuperman: Next thing, really cool.

2
00:00:05.070 --> 00:00:09.210
So I mentioned earlier that now
Node seamlessly integrates with

3
00:00:09.210 --> 00:00:10.360
Chrome dev tools.

4
00:00:10.360 --> 00:00:11.860
So this is pretty recent.

5
00:00:11.860 --> 00:00:15.120
There's been third party projects for
a long time that do it, but

6
00:00:15.120 --> 00:00:17.720
it's now natively established.

7
00:00:19.090 --> 00:00:22.453
And so, if we kind of go over to here and
we, basically,

8
00:00:22.453 --> 00:00:26.838
the idea is you go into your terminal
wherever you are running node from.

9
00:00:26.838 --> 00:00:29.090
Like here I've been running
mastering dev tools.

10
00:00:29.090 --> 00:00:32.780
So normally I'm running npm start and
that's how I'm starting my server.

11
00:00:32.780 --> 00:00:38.427
If we look in the code at what npm start
does, it just runs node server/index.js.

12
00:00:38.427 --> 00:00:41.031
That's all,
it's really just an alias for that.

13
00:00:41.031 --> 00:00:45.908
So if I did node server/index.js,
it would do the exact same thing.

14
00:00:45.908 --> 00:00:49.725
What you can do now is you can do
node with a --inspect flag, and

15
00:00:49.725 --> 00:00:51.934
then you can do server/index.js.

16
00:00:51.934 --> 00:00:53.860
And so what that's gonna do for

17
00:00:53.860 --> 00:00:57.130
you is it's gonna start
this over just like normal.

18
00:00:57.130 --> 00:00:59.850
So if I go and I refresh here,
I still have my server going.

19
00:00:59.850 --> 00:01:03.300
But now when I open the dev tools,
I see this new icon here.

20
00:01:03.300 --> 00:01:05.250
It's the Node.js logo up in the top left.

21
00:01:06.450 --> 00:01:10.520
And so if I open the dedicated dev tools
for Node here, it opens them up and

22
00:01:10.520 --> 00:01:12.510
we can see I've got a bunch of
different options over here.

23
00:01:12.510 --> 00:01:14.070
So we can do memory stuff.

24
00:01:14.070 --> 00:01:15.660
We can look at sources.

25
00:01:15.660 --> 00:01:17.140
We can look at console.

26
00:01:17.140 --> 00:01:20.870
We can make sure our connection is still
working and then we can do a profile.

27
00:01:20.870 --> 00:01:23.930
so one concept that you can do to
just kind of see how your Node

28
00:01:23.930 --> 00:01:28.390
app is working is you can start a profile.

29
00:01:28.390 --> 00:01:31.450
And you can go to your page,
and just refresh the page, and

30
00:01:31.450 --> 00:01:34.160
you can go back to the profile,
and just hit Stop.

31
00:01:34.160 --> 00:01:37.030
And so what this is going to do is this
is going to show you, as that refresh

32
00:01:37.030 --> 00:01:39.920
happens, remember this isn't looking
at your front end assets anymore.

33
00:01:39.920 --> 00:01:43.490
So you're not gonna see the network calls,
you're not gonna see your CSS, your jobs,

34
00:01:43.490 --> 00:01:44.250
none of that stuff.

35
00:01:44.250 --> 00:01:47.460
What you're gonna see is what
the actual back-end application does.

36
00:01:47.460 --> 00:01:48.390
And so what it does is,

37
00:01:48.390 --> 00:01:51.880
it generates, let me just zoom back out,
it generates this flame chart.

38
00:01:51.880 --> 00:01:53.410
And these are a little
bit tough to navigate.

39
00:01:53.410 --> 00:01:58.240
The kind of concept is that as you scroll,
it'll zoom in on a certain area.

40
00:01:58.240 --> 00:02:00.040
The x-axis is time.

41
00:02:00.040 --> 00:02:02.080
And so
you'll kinda scroll in on an area and

42
00:02:02.080 --> 00:02:05.950
then you'll start seeing all these
different color boxes with code in them.

43
00:02:05.950 --> 00:02:08.940
So you'll kinda keep scrolling
in on that area and here we go.

44
00:02:08.940 --> 00:02:12.167
And this is basically like
an x-axis is time and

45
00:02:12.167 --> 00:02:14.510
then the y-axis is the call stack.

46
00:02:14.510 --> 00:02:16.480
So it's like,
get started with an anonymous functon,

47
00:02:16.480 --> 00:02:19.750
call another one, calls this next
function, calls this, calls that.

48
00:02:19.750 --> 00:02:21.370
Cutting back to our debugging example.

49
00:02:21.370 --> 00:02:23.300
One called two called three called four.

50
00:02:23.300 --> 00:02:25.260
You would see those top to bottom.

51
00:02:25.260 --> 00:02:27.370
So a long call stack is
nothing to worry about,

52
00:02:27.370 --> 00:02:29.060
just a bunch of functions
calling each other.

53
00:02:29.060 --> 00:02:31.600
But a wide call stack is
something to worry about.

54
00:02:31.600 --> 00:02:33.100
Why did it take as long as it took?

55
00:02:33.100 --> 00:02:34.630
So we can see at the top.

56
00:02:34.630 --> 00:02:38.080
That the self time, the total time,
rather, was 36 milliseconds.

57
00:02:38.080 --> 00:02:40.350
That is super fast,
nothing to worry about there.

58
00:02:40.350 --> 00:02:44.168
But, if we see one that's longer,
like a second or something like that,

59
00:02:44.168 --> 00:02:47.170
we wanna drill into what
it is that took so long.

60
00:02:47.170 --> 00:02:51.500
One thing you might notice is you try to
scroll down here and just keep zooming.

61
00:02:51.500 --> 00:02:52.800
So if you wanna scroll up and down,

62
00:02:52.800 --> 00:02:56.020
what you'll need to do is hold the Shift
button and you'll scroll down.

63
00:02:56.020 --> 00:02:58.390
And that you can see all these
things call each other and

64
00:02:58.390 --> 00:03:00.760
they kind of split off in
a different call stacks.

65
00:03:00.760 --> 00:03:04.020
The kind of quick view of
how to use this thing,

66
00:03:04.020 --> 00:03:08.380
how I use it anyway is, you wanna so
the wide ones are long.

67
00:03:08.380 --> 00:03:11.530
But every function is gonna be as
long as all of it's children right?

68
00:03:11.530 --> 00:03:14.190
So if you have like a function
that does almost nothing, but

69
00:03:14.190 --> 00:03:17.430
it calls another function and that
function has to wait for five seconds.

70
00:03:17.430 --> 00:03:20.340
Both of them will be seen as five seconds,
cuz it took five seconds for

71
00:03:20.340 --> 00:03:21.270
them to complete.

72
00:03:21.270 --> 00:03:24.130
So what you wanna keep in mind
is you wanna find the last long

73
00:03:24.130 --> 00:03:25.650
one cuz you're going down, all right.

74
00:03:25.650 --> 00:03:28.640
So you don't care about the pairing,
you wanna see what the last thing was that

75
00:03:28.640 --> 00:03:31.880
took us super long time, but it had
children that didn't take a long time.

76
00:03:31.880 --> 00:03:33.500
Does that kind of make sense
as a way to think about it?

77
00:03:33.500 --> 00:03:34.850
So what I'm looking at here,

78
00:03:34.850 --> 00:03:39.040
is like the thing that took the longest
by itself is this compiled body.

79
00:03:39.040 --> 00:03:39.840
That's what took the longest,

80
00:03:39.840 --> 00:03:42.490
cuz it's the last one before
they break into smaller ones.

81
00:03:42.490 --> 00:03:45.950
I can see that load string and
generate code took a pretty long time, but

82
00:03:45.950 --> 00:03:47.860
my slowest function is compiled body.

83
00:03:47.860 --> 00:03:50.140
That's the one that took the longest time.

84
00:03:50.140 --> 00:03:51.163
So you can kinda click through.

85
00:03:51.163 --> 00:03:54.281
You can start seeing it'll take
you to the actual node code now,

86
00:03:54.281 --> 00:03:56.958
cuz now you're able to
actually access all that node.

87
00:03:56.958 --> 00:03:59.966
And yeah,
you can see all the code that's running.

88
00:03:59.966 --> 00:04:00.916
So this works for a web server.

89
00:04:00.916 --> 00:04:02.831
This works for command line application.

90
00:04:02.831 --> 00:04:06.265
This works for if you like webpack and
you wanna see how it performs,

91
00:04:06.265 --> 00:04:09.942
you could just run node dash session
inspect next time you run web pack and

92
00:04:09.942 --> 00:04:11.770
see all the cool stuff it does.

93
00:04:11.770 --> 00:04:13.000
Same thing with any of your node apps.

94
00:04:13.000 --> 00:04:14.606
So it's really cool.

95
00:04:14.606 --> 00:04:16.758
Any questions on how to
kind of get that going, so

96
00:04:16.758 --> 00:04:20.030
it's with the dash dash inspect flag,
and then it gets you a new dev tool.

97
00:04:21.100 --> 00:04:21.600
Cool.

