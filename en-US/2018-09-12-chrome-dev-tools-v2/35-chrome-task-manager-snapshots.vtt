WEBVTT

1
00:00:00.000 --> 00:00:02.050
&gt;&gt; Jon Kuperman: Kind of back
over here on the lessons page,

2
00:00:02.050 --> 00:00:04.320
we've got this memory leak section.

3
00:00:04.320 --> 00:00:07.340
So what we wanna do is this is a page
that I made that has a memory leak on it.

4
00:00:07.340 --> 00:00:11.300
And we wanna see what tools that
we have for catching memory leaks.

5
00:00:11.300 --> 00:00:15.360
So the first one, [LAUGH] is the only
thing that I show that's actually not part

6
00:00:15.360 --> 00:00:18.180
of the developer tools, but
it is part of Chrome which is really cool.

7
00:00:18.180 --> 00:00:21.510
So if you go to these three
dots up in Chrome, and

8
00:00:21.510 --> 00:00:25.290
you go down to More Tools &gt; Task Manager.

9
00:00:25.290 --> 00:00:27.160
I'm not sure how many of you knew, but

10
00:00:27.160 --> 00:00:31.590
Chrome has a task manager where it keeps
track of each tab and its performance.

11
00:00:31.590 --> 00:00:34.490
And then by default,
JavaScript memory won't be on there.

12
00:00:34.490 --> 00:00:37.990
So you'll want to right-click up at
these headers and add JavaScript memory.

13
00:00:37.990 --> 00:00:38.830
And then it should show up.

14
00:00:40.120 --> 00:00:44.540
And then you'll wanna select this
top-down view of JavaScript memory.

15
00:00:44.540 --> 00:00:46.480
And so what we can kind see here,
I know it's small.

16
00:00:46.480 --> 00:00:50.770
Unfortunately, I can't zoom in, but as we
see, we've got three tabs open, right?

17
00:00:52.210 --> 00:00:54.700
Really, I think two of
them are from my slides.

18
00:00:54.700 --> 00:00:58.350
And the two of them from my slides with
those Ss on them are stable, right?

19
00:00:58.350 --> 00:01:01.452
They're not moving cuz they use
the memory they needed to use and

20
00:01:01.452 --> 00:01:02.608
now they're using it.

21
00:01:02.608 --> 00:01:06.422
But mine is mastering from DevTools is
just going up and up and up and up.

22
00:01:06.422 --> 00:01:07.955
So that's one easy way to see.

23
00:01:07.955 --> 00:01:11.484
If your site's just sitting here and
your JavaScript memory usage is going up,

24
00:01:11.484 --> 00:01:14.131
that's a really good way of
knowing you have a memory leak.

25
00:01:14.131 --> 00:01:16.891
A way of visualizing it is
if you open up DevTools,

26
00:01:16.891 --> 00:01:19.537
you can go ahead and
pin this back to the bottom.

27
00:01:19.537 --> 00:01:21.807
And then you go to the Performance tab.

28
00:01:21.807 --> 00:01:24.201
Again, performance and
memory kind of have a lot in common.

29
00:01:24.201 --> 00:01:27.230
The performance tab is the best one for
spotting a memory leak.

30
00:01:27.230 --> 00:01:28.580
The memory tab is the best one for

31
00:01:28.580 --> 00:01:30.685
figuring out what it is
that's what's going on.

32
00:01:30.685 --> 00:01:34.798
So with the Performance tab,
we'll check this memory checkbox here.

33
00:01:34.798 --> 00:01:37.736
And remember in the last section
I said when you're doing

34
00:01:37.736 --> 00:01:41.359
performance recordings for CPU,
you make them as short as possible.

35
00:01:41.359 --> 00:01:44.540
When you're doing performance recordings
from memory, you wanna do them longer,

36
00:01:44.540 --> 00:01:45.722
cuz you wanna see it over time.

37
00:01:45.722 --> 00:01:47.108
You're not looking at the CPU.

38
00:01:47.108 --> 00:01:48.020
So I'll hit it.

39
00:01:48.020 --> 00:01:49.901
I'll let it run for
usually a couple of seconds.

40
00:01:49.901 --> 00:01:52.793
It doesn't need to run for
a significant amount of time, but

41
00:01:52.793 --> 00:01:56.096
you do wanna see is this building
over time as opposed to a one second.

42
00:01:56.096 --> 00:01:57.883
It might not see anything.

43
00:01:57.883 --> 00:01:59.304
So go ahead and stop that.

44
00:01:59.304 --> 00:02:01.525
I'm gonna move down the summary view.

45
00:02:01.525 --> 00:02:05.662
What I'm gonna do is at this time is
I'm gonna move up the memory view

46
00:02:05.662 --> 00:02:06.992
&gt;&gt; Jon Kuperman: I'll try to move these

47
00:02:06.992 --> 00:02:11.907
tools.
&gt;&gt; Jon Kuperman: And

48
00:02:11.907 --> 00:02:16.600
here we go, this is the jigsaw pattern
that we don't wanna see, right?

49
00:02:16.600 --> 00:02:19.392
And so what we can see is what
you normally want to see and

50
00:02:19.392 --> 00:02:23.038
actually I think there's some good
examples, yeah, so this yellow,

51
00:02:23.038 --> 00:02:25.126
this event listener is a great example.

52
00:02:25.126 --> 00:02:28.418
So the page starts, and
they start reasonably high,

53
00:02:28.418 --> 00:02:31.110
a decent amount of memory being used.

54
00:02:31.110 --> 00:02:34.340
And then they finish and
a garbage collection happens here.

55
00:02:34.340 --> 00:02:36.220
We'll get into garbage
collection in a second.

56
00:02:36.220 --> 00:02:37.590
And then they're done, right?

57
00:02:37.590 --> 00:02:39.840
Then yellow is back to this, just one.

58
00:02:39.840 --> 00:02:43.266
Whereas the blue, you see it kind
of starts off its thing here.

59
00:02:43.266 --> 00:02:46.840
And it does clean and then it just starts
growing and growing and growing and

60
00:02:46.840 --> 00:02:48.520
growing and we're not doing anything.

61
00:02:48.520 --> 00:02:51.670
This might be normal if it was
calculating something, but for

62
00:02:51.670 --> 00:02:54.980
a page just to be sitting here, we
shouldn't be seeing these jigsaws, right?

63
00:02:54.980 --> 00:02:59.050
And so this is always the shape that
you want to watch for is this up and

64
00:02:59.050 --> 00:03:00.270
up and up jigsaw.

65
00:03:00.270 --> 00:03:03.378
A cool thing about this is that it
tells you specifically what type of

66
00:03:03.378 --> 00:03:04.038
memory it is.

67
00:03:04.038 --> 00:03:08.626
So it breaks it into JavaScript memory,
document memory nodes, like elements and

68
00:03:08.626 --> 00:03:09.684
event listeners.

69
00:03:09.684 --> 00:03:11.709
And it kind of breaks
into those categories so

70
00:03:11.709 --> 00:03:14.064
at least you have some clue
of where to start with it.

71
00:03:14.064 --> 00:03:17.419
So then the next thing you want to do,
confirming you have a memory leak,

72
00:03:17.419 --> 00:03:20.279
which you do via the task manager and
via the Performance tab,

73
00:03:20.279 --> 00:03:22.160
is you wanna go into the memory section.

74
00:03:22.160 --> 00:03:25.826
And basically they have these kind
of three tools for analyzing memory,

75
00:03:25.826 --> 00:03:29.145
cuz now we're getting into,
well, what's using that memory?

76
00:03:29.145 --> 00:03:30.641
What's going on here?

77
00:03:30.641 --> 00:03:34.999
The first one is a heap snapshot, so
it just grabs the whole memory heap,

78
00:03:34.999 --> 00:03:38.586
everything that's being used,
and it'll show it to you.

79
00:03:38.586 --> 00:03:42.357
[SOUND] Paused because of
potential out of memory crash.

80
00:03:42.357 --> 00:03:46.294
My fault,
&gt;&gt; Jon Kuperman: Too much memory.

81
00:03:46.294 --> 00:03:47.299
Okay, cool.

82
00:03:47.299 --> 00:03:49.162
So the first one is it
takes a heap snapshot, and

83
00:03:49.162 --> 00:03:52.333
these are really cool because they'll
show you everything that's being used,

84
00:03:52.333 --> 00:03:54.121
so you can see what's
using the most memory.

85
00:03:54.121 --> 00:03:57.011
But what's also really neat about
them is you can take multiple and

86
00:03:57.011 --> 00:03:58.259
compare them to each other.

87
00:03:58.259 --> 00:04:01.490
So you can take one,
give it a few seconds, take another one,

88
00:04:01.490 --> 00:04:05.050
compare them to each other,
see what's changed.

89
00:04:05.050 --> 00:04:07.320
Beyond that,
you can do these kind of allocations.

90
00:04:07.320 --> 00:04:10.400
And so these are really cool,
these kind of allocations over time.

91
00:04:10.400 --> 00:04:13.660
It's basically the same as taking
a bunch of heap snapshots, but

92
00:04:13.660 --> 00:04:16.440
you can start seeing,
is the memory going up and up and up?

93
00:04:16.440 --> 00:04:18.278
Or is it going up and down,
these different things.

94
00:04:18.278 --> 00:04:21.324
So an allocation will take
a long amount of time, and

95
00:04:21.324 --> 00:04:25.425
then it'll just grab a few heaps as
you go through there, basically.

96
00:04:25.425 --> 00:04:28.698
And so then this one is like
on allocation sampling.

97
00:04:28.698 --> 00:04:31.818
So basically it's like,
takes it over a long period of time,

98
00:04:31.818 --> 00:04:34.281
it'll take a bunch of
different samples there.

99
00:04:34.281 --> 00:04:38.276
So this kind of breaks into
a little bit of a hard to tell.

100
00:04:38.276 --> 00:04:42.036
Do you have a memory leak that's very
obvious, like the one on the demo page

101
00:04:42.036 --> 00:04:45.100
that I have where in six seconds
you see it just growing?

102
00:04:45.100 --> 00:04:48.000
Or do you have one that you suspect over
a long period of time as you're using

103
00:04:48.000 --> 00:04:50.210
the app, in which case you
can start the sampling and

104
00:04:50.210 --> 00:04:51.340
you go back to using your apps.

105
00:04:51.340 --> 00:04:54.210
So I've had apps before that people
use throughout their whole day.

106
00:04:54.210 --> 00:04:58.580
Creatives will use to draw and
save files, or whatever.

107
00:04:58.580 --> 00:05:01.900
It seems after about an hour of use,
the site gets really slow.

108
00:05:01.900 --> 00:05:03.070
That's harder to debug, right?

109
00:05:03.070 --> 00:05:05.920
So we can do one of these samplings and
we can just go back to using the site.

110
00:05:05.920 --> 00:05:08.540
As it gets slow we can end it, and
then we can see what's going on.

111
00:05:08.540 --> 00:05:11.612
But for today's stuff we can just get
away with just some heap snapshots, or

112
00:05:11.612 --> 00:05:13.520
we can do the allocation time line.

113
00:05:13.520 --> 00:05:14.570
So let me show what those look like.

114
00:05:14.570 --> 00:05:17.662
So from the lessons page
I'll go to memory leaks, and

115
00:05:17.662 --> 00:05:22.280
then I'm going to click Heap snapshot
here and then I'll take a heap snapshot.

116
00:05:23.340 --> 00:05:27.300
And so what this does is it shows me
everything that's taking up memory.

117
00:05:27.300 --> 00:05:30.770
Before we get too much further I wanna get
into the concept of garbage collection,

118
00:05:30.770 --> 00:05:32.100
something I've mentioned a few times.

119
00:05:32.100 --> 00:05:36.163
So with scripting languages where
you're not manually allocating and

120
00:05:36.163 --> 00:05:40.030
deallocating memory,
there's this kind of garbage collection.

121
00:05:40.030 --> 00:05:42.984
And the basic idea,
it's called the mark and sweep technique.

122
00:05:42.984 --> 00:05:47.360
So the idea is it looks at everything
that you have and it's like,

123
00:05:47.360 --> 00:05:49.120
are you still using this?

124
00:05:49.120 --> 00:05:50.940
That's basically the very simple idea.

125
00:05:50.940 --> 00:05:54.140
It goes from thing to thing and it's like
are you using this, cool, I'll keep it,

126
00:05:54.140 --> 00:05:55.385
no I'm gonna get rid of it then.

127
00:05:55.385 --> 00:05:58.120
And so it's this process that's
constantly happening, right?

128
00:05:58.120 --> 00:06:03.075
And so it's like, yeah, if you make
an array and you do console.log it and

129
00:06:03.075 --> 00:06:06.302
then nothing else in that
function completes and

130
00:06:06.302 --> 00:06:10.248
nothing else has any pointers added or
anything like that.

131
00:06:10.248 --> 00:06:11.950
It's like, cool, nobody's pointing at you.

132
00:06:11.950 --> 00:06:14.500
So this is where you get in if you've
heard anything like looking at JavaScript

133
00:06:14.500 --> 00:06:15.310
closures before.

134
00:06:15.310 --> 00:06:19.230
They're interesting because when
you have a closure in JavaScript,

135
00:06:19.230 --> 00:06:22.430
it retains this reference
to its outer scope, right?

136
00:06:22.430 --> 00:06:24.040
So you have a function
that returns a function,

137
00:06:24.040 --> 00:06:26.900
and that inner function has this closure.

138
00:06:26.900 --> 00:06:30.370
So that means as long as that
inner function is around, you

139
00:06:30.370 --> 00:06:34.090
can't get rid of the outer function cuz at
any time it might call in to that, right?

140
00:06:34.090 --> 00:06:37.130
And so you kinda get these concepts where
it's like, these are kinda pointers.

141
00:06:37.130 --> 00:06:40.190
Is there anything that's still
around that's pointing at it?

142
00:06:40.190 --> 00:06:42.440
If there is, then we can't get rid of it.

143
00:06:42.440 --> 00:06:44.820
If there's not,
then we can totally get rid of it.

144
00:06:44.820 --> 00:06:48.530
And so you'll see this, if you created
an element, it'll put it in memory.

145
00:06:48.530 --> 00:06:51.190
And then you get rid of that element
on the next garbage collection,

146
00:06:51.190 --> 00:06:52.170
it'll be cool.

147
00:06:52.170 --> 00:06:53.180
Nobody uses you anymore.

148
00:06:53.180 --> 00:06:54.250
You've been removed.

149
00:06:54.250 --> 00:06:55.100
We can get rid of you.

150
00:06:55.100 --> 00:06:59.990
So it keeps this, when coding correctly,
it keeps this pretty

151
00:06:59.990 --> 00:07:04.380
stable area where you can just
constantly be kind of cleaning up.

152
00:07:04.380 --> 00:07:07.120
A neat thing on the performance if you
want to check garbage collections,

153
00:07:07.120 --> 00:07:09.210
they actually have this little can here.

154
00:07:09.210 --> 00:07:10.960
So you can start a performance timeline.

155
00:07:10.960 --> 00:07:13.070
You can manually force
a garbage collection,

156
00:07:13.070 --> 00:07:14.760
and then you can end
the performance timeline and

157
00:07:14.760 --> 00:07:17.510
see if everything gets cleaned up,
because it probably should.

158
00:07:17.510 --> 00:07:22.163
But over here in memory, what you see
is you see this concept of shallow and

159
00:07:22.163 --> 00:07:23.751
retained size, right?

160
00:07:23.751 --> 00:07:26.310
And this gets exactly into
the garbage collection concept.

161
00:07:26.310 --> 00:07:28.820
So shallow is how big are you?

162
00:07:28.820 --> 00:07:32.540
If you're an array with 50 items in it,
that is your size.

163
00:07:32.540 --> 00:07:34.350
That's your shallow size, right.

164
00:07:34.350 --> 00:07:35.780
If you're a variable,

165
00:07:35.780 --> 00:07:40.920
that points to another array
that has a million items in it.

166
00:07:40.920 --> 00:07:43.160
As a variable, you're pretty small.

167
00:07:43.160 --> 00:07:47.150
But the thing that you point to and what
retained size means is if I could get rid

168
00:07:47.150 --> 00:07:50.460
of you, that would let me get rid of
all these other things, too, right?

169
00:07:50.460 --> 00:07:54.430
So think about it, if you're the last
pointer, add something huge.

170
00:07:54.430 --> 00:07:57.660
Then your shallow size is gonna be really
small, but your retained size, meaning

171
00:07:57.660 --> 00:08:01.630
the size that we could free up if we were
able to get rid of you, is pretty large.

172
00:08:01.630 --> 00:08:02.870
So you'll kinda see this concept.

173
00:08:02.870 --> 00:08:07.010
So what we wanna know is not
necessarily about retained size.

174
00:08:07.010 --> 00:08:09.753
We wanna know what in and
of itself is the biggest, right?

175
00:08:09.753 --> 00:08:12.790
And so we can organize by shallow size.

176
00:08:12.790 --> 00:08:16.540
So we can see the biggest things
on this page are strings.

177
00:08:16.540 --> 00:08:17.580
They're huge.

178
00:08:17.580 --> 00:08:18.932
And if we drill into them,

179
00:08:18.932 --> 00:08:22.257
we can start seeing all of these
big strings that I've created.

180
00:08:22.257 --> 00:08:24.308
[LAUGH] That is a problem,
here with the memory leak.

181
00:08:24.308 --> 00:08:26.740
And so this kind of gives
you a pretty great idea.

182
00:08:26.740 --> 00:08:28.740
If it doesn't give you
a really clear idea,

183
00:08:28.740 --> 00:08:31.780
what I mentioned you can do before
is you can take multiple snapshots.

184
00:08:31.780 --> 00:08:34.380
So we've got our one here from
when the page has just started.

185
00:08:34.380 --> 00:08:37.840
I'll go back to profiles and
I'll just take another snapshot.

186
00:08:37.840 --> 00:08:39.450
So now we've got two snapshots.

187
00:08:39.450 --> 00:08:43.280
And instead of the summary view up here,
I'll do a comparison view.

188
00:08:43.280 --> 00:08:47.420
So now we're comparing this
snapshot two to snapshot one.

189
00:08:47.420 --> 00:08:50.971
And so what I wanna see is between the two
because both happened after the page was

190
00:08:50.971 --> 00:08:52.190
finished loading.

191
00:08:52.190 --> 00:08:56.286
What's new, and so we can go here and
we can see that, again, no surprise,

192
00:08:56.286 --> 00:08:57.120
just strings.

193
00:08:57.120 --> 00:09:00.638
But if you were unclear about what was
taking up memory, you can take two

194
00:09:00.638 --> 00:09:04.110
snapshots at different times and compare
them to each other, what has changed.

195
00:09:04.110 --> 00:09:06.860
And so you can see these strings
have changed, these are the strings.

196
00:09:06.860 --> 00:09:08.360
All these strings have been added.

197
00:09:08.360 --> 00:09:12.890
None of them have been deleted, so
there's a delta of +2,427 strings and

198
00:09:12.890 --> 00:09:14.690
they take up a lot of room.

199
00:09:14.690 --> 00:09:19.047
So you can drill down to these strings and
you can see all sorts of cool stuff.

200
00:09:19.047 --> 00:09:21.780
You can see where they are.

201
00:09:21.780 --> 00:09:25.580
They live inside of these arrays, and you
can see that they're in the window object.

202
00:09:25.580 --> 00:09:27.920
You can find all this really
cool information about them.

203
00:09:27.920 --> 00:09:29.890
So you can kinda start narrowing down on,

204
00:09:29.890 --> 00:09:33.600
okay, I know I have a memory leak
from the jigsaw and the task manager.

205
00:09:33.600 --> 00:09:37.650
I know it's string-based because the
strings are the thing that are so big, and

206
00:09:37.650 --> 00:09:39.380
I can get some information.

207
00:09:39.380 --> 00:09:43.768
Some code is making these arrays
full of these big strings here.

208
00:09:43.768 --> 00:09:47.271
And you can kind of start narrowing down
what part of your code base might be doing

209
00:09:47.271 --> 00:09:48.275
that, based on that.

210
00:09:48.275 --> 00:09:51.639
There's not often a great
way of jumping to sources,

211
00:09:51.639 --> 00:09:53.820
like we've seen in other panels.

212
00:09:53.820 --> 00:09:57.470
And you know the performance panel,
it knows what line of code is responsible.

213
00:09:57.470 --> 00:09:59.450
So you can very easily hop there.

214
00:09:59.450 --> 00:10:03.650
And the memory panel is not keeping
track of what code created that thing.

215
00:10:03.650 --> 00:10:05.449
So it gets a little bit harder.

216
00:10:05.449 --> 00:10:10.830
But it can give you a lot of really
good insight on what the problem is.

217
00:10:10.830 --> 00:10:13.870
Is there a memory leak, what's causing it,
what type of information is there?

