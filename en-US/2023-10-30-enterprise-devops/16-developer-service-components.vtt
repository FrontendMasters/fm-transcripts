WEBVTT

1
00:00:00.510 --> 00:00:04.920
Okay, so that is the ECI or that is
the Terraform cloud components, right?

2
00:00:04.920 --> 00:00:09.136
And as I said before, these are reusable,
if it's provider, Amazon cluster,

3
00:00:09.136 --> 00:00:11.990
Google cluster, whatever,
that's up to you.

4
00:00:11.990 --> 00:00:15.510
But the main point is to think
of these as logical components.

5
00:00:15.510 --> 00:00:17.960
So that's the first thing
we're gonna be building.

6
00:00:17.960 --> 00:00:20.860
The second thing we're gonna be
building is the service part.

7
00:00:20.860 --> 00:00:22.135
This is the developer side.

8
00:00:22.135 --> 00:00:24.448
So this side, right?

9
00:00:24.448 --> 00:00:26.961
This was the infrastructure side, right?

10
00:00:26.961 --> 00:00:32.810
The first team or
set of section we were trying to solve.

11
00:00:32.810 --> 00:00:34.836
The next one is for developers.

12
00:00:37.486 --> 00:00:41.816
Now you'll see that there's
components here that we create, and

13
00:00:41.816 --> 00:00:47.010
then there's components that developers
touch that we've created for them.

14
00:00:48.350 --> 00:00:52.513
Now, if I'm a developer, on the left,
you'll see that if I go up,

15
00:00:52.513 --> 00:00:55.600
I directly go into service management,
right?

16
00:00:55.600 --> 00:00:57.790
Terraform TFE, right?

17
00:00:58.980 --> 00:01:01.800
There's a reason for that,
and I'll explain it further.

18
00:01:01.800 --> 00:01:04.830
This is kinda showing a little
bit of spoilers as well.

19
00:01:04.830 --> 00:01:08.406
Which is we can actually make it so
that Terraform TFE can even manage these

20
00:01:08.406 --> 00:01:11.520
configurations, but
I'll show you guys that later.

21
00:01:11.520 --> 00:01:15.334
The TLDR is that once we
get to GitHub workspace,

22
00:01:15.334 --> 00:01:19.160
what do we get out of
the GitHub workspace?

23
00:01:19.160 --> 00:01:21.048
Our repository, right?

24
00:01:21.048 --> 00:01:23.940
What does that give the developer
the ability to make code?

25
00:01:23.940 --> 00:01:24.850
We just solved the problem.

26
00:01:26.040 --> 00:01:28.180
Awesome.
Let's solve another problem.

27
00:01:28.180 --> 00:01:30.666
Well, the developer can make code now but

28
00:01:30.666 --> 00:01:35.225
they don't know how to test their
changes cool BAM GitHub actions, right?

29
00:01:35.225 --> 00:01:37.804
Now we have the ability
to have CI run tests,

30
00:01:37.804 --> 00:01:40.893
make sure everything's running fine cool,
okay?

31
00:01:40.893 --> 00:01:42.234
Now we wanted to play.

32
00:01:42.234 --> 00:01:47.670
Guess what, we can actually use GitHub
actions for this and a separate workflow.

33
00:01:47.670 --> 00:01:52.137
And so in this case, we'll also use
GitHub actions to go out to ECS and

34
00:01:52.137 --> 00:01:53.780
deploy our image.

35
00:01:53.780 --> 00:01:59.020
However, we wanna empower the developers
with more than just deploying images.

36
00:01:59.020 --> 00:02:04.363
We also wanna empower the developers
to be able to update their values for

37
00:02:04.363 --> 00:02:06.370
their service, right?

38
00:02:06.370 --> 00:02:11.139
And so in this design, what we actually
do is we include the configuration,

39
00:02:11.139 --> 00:02:15.100
non secrets, of course,
in the repository with the service.

40
00:02:16.230 --> 00:02:19.158
Can anyone guess why we might do that?

41
00:02:19.158 --> 00:02:21.090
&gt;&gt; You don't wanna commit secrets.

42
00:02:21.090 --> 00:02:22.304
&gt;&gt; Well, that part, yeah.

43
00:02:22.304 --> 00:02:27.773
But why would we have the actual
non-secret configuration in the repo?

44
00:02:30.340 --> 00:02:33.609
&gt;&gt; That's for
the CICD pipeline to function properly?

45
00:02:33.609 --> 00:02:34.949
&gt;&gt; Kind of, part of that, yeah.

46
00:02:34.949 --> 00:02:37.653
&gt;&gt; We want the developer
to have access to?

47
00:02:37.653 --> 00:02:38.620
&gt;&gt; Yes.

48
00:02:38.620 --> 00:02:42.908
We want the developers to manage their
deployments of their configurations not

49
00:02:42.908 --> 00:02:43.616
us, right?

50
00:02:43.616 --> 00:02:47.676
So this could also be another service
that pulls those secrets in that

51
00:02:47.676 --> 00:02:51.160
the developers go and
manage right like vault, right?

52
00:02:51.160 --> 00:02:54.847
But the main point here is that we're
giving the developers the ability to

53
00:02:54.847 --> 00:02:58.870
configure and change the configurations
of their services, right?

54
00:02:58.870 --> 00:03:01.967
We're not taking care of that and
we're building that into the system so

55
00:03:01.967 --> 00:03:03.450
that they can do that themselves.

56
00:03:04.840 --> 00:03:08.902
Remember, we said that the product
service workspace is what deploys our

57
00:03:08.902 --> 00:03:11.540
infrastructure to Amazon Cloud, right?

58
00:03:11.540 --> 00:03:14.440
So you could see how all of these
components really start to work together.

59
00:03:14.440 --> 00:03:17.805
We've got the Terraform
product service repository, so

60
00:03:17.805 --> 00:03:21.924
that if I was an infrastructure,
I could come here, make changes, and

61
00:03:21.924 --> 00:03:25.790
update every service that's been deployed,
right?

62
00:03:25.790 --> 00:03:26.840
Same thing with GitHub.

63
00:03:26.840 --> 00:03:30.945
If I wanted to update my specific
repository, I could go to my workspace and

64
00:03:30.945 --> 00:03:31.609
update it.

65
00:03:32.780 --> 00:03:36.917
Every part in this stack is automated.

66
00:03:36.917 --> 00:03:43.105
And it's thought out to be such so
that we save time, right?

67
00:03:43.105 --> 00:03:45.380
Save time.

68
00:03:45.380 --> 00:03:48.140
Do not do the same thing twice.

69
00:03:48.140 --> 00:03:51.540
It's like a motto I try and live by.

70
00:03:51.540 --> 00:03:54.980
There's no need for
you to do the same thing twice.

71
00:03:54.980 --> 00:03:56.050
So just automate it.

72
00:03:56.050 --> 00:03:59.984
And so again, you'll see that
with Terraform product service,

73
00:03:59.984 --> 00:04:01.780
we have a repo for it, right?

74
00:04:01.780 --> 00:04:05.390
For Terraform product service,
we have a repo for it, right?

75
00:04:05.390 --> 00:04:07.720
For product service,
we have a repo for it.

76
00:04:07.720 --> 00:04:12.750
That GitOps model of the source
of truth is the repository.

77
00:04:12.750 --> 00:04:16.820
And it also makes it so that then
the developers use these as interfaces,

78
00:04:16.820 --> 00:04:17.498
all right?

79
00:04:17.498 --> 00:04:22.138
Developer wants to make changes,
they go to the repo, right?

80
00:04:22.138 --> 00:04:23.765
Things like that.

81
00:04:23.765 --> 00:04:25.133
Any questions?

82
00:04:25.133 --> 00:04:27.654
&gt;&gt; Not a specific question but

83
00:04:27.654 --> 00:04:32.586
there's a little debate in
the chat about the need for

84
00:04:32.586 --> 00:04:38.412
this level of complexity managing
this many different Nepos.

85
00:04:38.412 --> 00:04:42.200
Can you speak to the scenarios-
&gt;&gt; Yeah.

86
00:04:42.200 --> 00:04:45.447
So I get this a lot.

87
00:04:45.447 --> 00:04:48.070
Why do you need the complexity?

88
00:04:48.070 --> 00:04:50.626
Let me preface this by saying this is for

89
00:04:50.626 --> 00:04:53.818
teams normally of at least
more than one person.

90
00:04:53.818 --> 00:04:58.238
[LAUGH] If you
are an individual by yourself,

91
00:04:58.238 --> 00:05:06.010
you do not have the responsibility
to Rrespond to anyone but yourself.

92
00:05:06.010 --> 00:05:10.080
So in that case, if you wanna have
lower levels of abstraction and

93
00:05:10.080 --> 00:05:12.750
things like that, you totally can't.

94
00:05:12.750 --> 00:05:16.672
What I'm showing you is a circumstance
where every one of these project repos is

95
00:05:16.672 --> 00:05:17.970
actually owned by a team.

96
00:05:19.480 --> 00:05:24.720
The DevOps teams owns all
the infrastructure repos.

97
00:05:24.720 --> 00:05:27.510
Not everyone touches those repos, right?

98
00:05:28.820 --> 00:05:33.348
The developers touch the product,
service repos, right?

99
00:05:33.348 --> 00:05:36.070
We, I don't even really touch those.

100
00:05:36.070 --> 00:05:39.910
Those layers of abstraction
help those separations.

101
00:05:39.910 --> 00:05:42.518
But if you don't have that
much separation, then yes,

102
00:05:42.518 --> 00:05:44.470
it might make sense for
you to not do that.

103
00:05:45.720 --> 00:05:49.298
My only caveat, and
to the person in chat who said that,

104
00:05:49.298 --> 00:05:53.380
I want you to listen to me very carefully,
okay?

105
00:05:53.380 --> 00:05:58.570
You still need to make sure that you
are in charge of your life cycles.

106
00:05:58.570 --> 00:06:02.503
If you merge your network components
with your cluster components,

107
00:06:02.503 --> 00:06:05.300
then both are gonna get
updated at the same time.

108
00:06:06.900 --> 00:06:08.590
You might not want that.

109
00:06:08.590 --> 00:06:10.647
You might not wanna make
a network change and

110
00:06:10.647 --> 00:06:14.740
be terrified that you're accidentally
gonna touch a cluster or something.

111
00:06:14.740 --> 00:06:17.170
So that's my only discussion or

112
00:06:17.170 --> 00:06:22.030
my only retort to that really
is abstract with purpose, right?

113
00:06:22.030 --> 00:06:25.660
If you don't need it,
then it's not necessarily required.

114
00:06:25.660 --> 00:06:28.530
But There's reasons why we separate these.

115
00:06:28.530 --> 00:06:33.575
Like I said, if I wanna go to the network
repository and just update every network

116
00:06:33.575 --> 00:06:38.638
and not be worried about touching
clusters, that abstraction is good, right?

117
00:06:38.638 --> 00:06:42.983
It gives me the ability to
modify 50 networks at once and

118
00:06:42.983 --> 00:06:48.245
never once in my mind have to think
about any other resource, right?

119
00:06:48.245 --> 00:06:50.714
And so
when we talk about production changes,

120
00:06:50.714 --> 00:06:55.020
when we talk about really critical mission
critical changes, this is helpful,

121
00:06:55.020 --> 00:06:57.590
that abstraction is super helpful.

122
00:06:57.590 --> 00:06:59.482
Reality of it is if you
join stuff together,

123
00:06:59.482 --> 00:07:02.230
it just gives more possibility for
more things to break [LAUGH].

124
00:07:02.230 --> 00:07:03.900
And that's just automation.

125
00:07:03.900 --> 00:07:04.400
Yeah.

126
00:07:07.644 --> 00:07:08.725
Yes.

127
00:07:08.725 --> 00:07:12.222
There any kind of sandbox environment
where we can safely simulate

128
00:07:12.222 --> 00:07:16.740
creating resources without actually
creating them for educational purposes or.

129
00:07:16.740 --> 00:07:18.280
&gt;&gt; That's a good question.

130
00:07:18.280 --> 00:07:20.010
&gt;&gt; Zombie AWS services.

131
00:07:20.010 --> 00:07:25.095
&gt;&gt; Yeah, so there is something out there
called LocalStack and I didn't include it.

132
00:07:25.095 --> 00:07:30.044
But this is actually a really great
tool that we do use it hippo as well.

133
00:07:30.044 --> 00:07:34.966
Now, it doesn't do everything to be
fair cuz you can't do everything.

134
00:07:34.966 --> 00:07:39.637
You can't recreate the lambda
infrastructure on your computer that

135
00:07:39.637 --> 00:07:42.384
would be very difficult or S3, right?

136
00:07:42.384 --> 00:07:46.837
And so local stack Kind of tries to meet
you in the middle where it does that

137
00:07:46.837 --> 00:07:49.545
like mocking idea that I mentioned before.

138
00:07:49.545 --> 00:07:54.260
Where local stack will give you access
to the API's and other things like that.

139
00:07:54.260 --> 00:07:58.281
And then it will simulate that
you're creating these resources so

140
00:07:58.281 --> 00:08:01.380
that you can run automation against it and
test it.

141
00:08:01.380 --> 00:08:06.036
t's really under the hood just mocked
API's from Amazon but it does let it so

142
00:08:06.036 --> 00:08:07.282
that you could run.

143
00:08:07.282 --> 00:08:12.256
Like for example going back to end to end
testing this is how you could potentially

144
00:08:12.256 --> 00:08:14.610
do end to end testing with TerraForm.

145
00:08:16.750 --> 00:08:18.032
Does that make sense?

146
00:08:18.032 --> 00:08:23.258
Because you can use LocalStack to
emulate it being your cloud and

147
00:08:23.258 --> 00:08:27.340
then run Terraform against local stack,
right?

148
00:08:27.340 --> 00:08:30.658
In CI, to make sure that,
it won't be perfect, of course,

149
00:08:30.658 --> 00:08:33.275
because it's not
the actual infrastructure.

150
00:08:33.275 --> 00:08:38.525
But it will at least make it so that you
can you can actually run it against.

151
00:08:38.525 --> 00:08:40.960
Temporary accounts so to speak.

152
00:08:40.960 --> 00:08:43.278
Yeah.

153
00:08:43.278 --> 00:08:44.440
So yeah, this is a good solution.

154
00:08:44.440 --> 00:08:48.045
I didn't include it because it used
to be completely open source and

155
00:08:48.045 --> 00:08:51.320
then they realized that they
could make money off of it.

156
00:08:51.320 --> 00:08:53.938
[LAUGH] So
they've got like pricing models.

157
00:08:53.938 --> 00:08:59.399
To give you an example, the free one
basically gives you the very simple APIs,

158
00:08:59.399 --> 00:09:04.520
like the stuff you would use a lot,
S3, EC2, stuff like that.

159
00:09:04.520 --> 00:09:08.440
These ones are for lambdas.

160
00:09:08.440 --> 00:09:11.750
You can see all the stuff in here.

161
00:09:11.750 --> 00:09:12.950
They can do a lot.

162
00:09:12.950 --> 00:09:17.390
Certificate Manager, Amplify, API Gateway.

163
00:09:17.390 --> 00:09:20.650
It can emulate a lot of
what you create in Amazon.

164
00:09:20.650 --> 00:09:21.920
Yeah.

165
00:09:21.920 --> 00:09:24.530
But it's a paid for product now.

166
00:09:24.530 --> 00:09:26.290
The workshop materials.

167
00:09:26.290 --> 00:09:30.984
So this is at the end of the slides.

168
00:09:30.984 --> 00:09:35.763
So if you wanna grab the links there you
can, but these repos here are all public

169
00:09:35.763 --> 00:09:39.458
and they are all the repositories
that we will be creating and

170
00:09:39.458 --> 00:09:43.826
we're gonna start working on and
it basically goes from top to bottom.

171
00:09:43.826 --> 00:09:47.452
We're gonna start with Terraform cloud,
automating Terraform cloud,

172
00:09:47.452 --> 00:09:50.620
we're then gonna work on GitHub,
creating our repositories.

173
00:09:50.620 --> 00:09:52.770
That's the next problem we have to solve.

174
00:09:52.770 --> 00:09:55.250
Then after that, we're gonna create
our first Amazon network, right?

175
00:09:55.250 --> 00:09:56.938
We're gonna create a repo for
that network.

176
00:09:56.938 --> 00:09:59.895
Yeah.
&gt;&gt; Are these links gonna represent the end

177
00:09:59.895 --> 00:10:01.936
product at the end of the list?

178
00:10:01.936 --> 00:10:03.010
&gt;&gt; Yeah, they do.

179
00:10:03.010 --> 00:10:04.350
Yeah, they represent the end products.

180
00:10:04.350 --> 00:10:06.187
But there are branches in them,

181
00:10:06.187 --> 00:10:10.210
to where you can see the different
progress that we made through them.

182
00:10:10.210 --> 00:10:13.076
So just click on the branches
in the repos, and

183
00:10:13.076 --> 00:10:17.571
then you'll see specific sections
that we're gonna be going through.

184
00:10:17.571 --> 00:10:23.088
The latest is the absolute end product,
but there are branches in there to kind of

185
00:10:23.088 --> 00:10:28.622
help you see how we change stuff and I'll
give you an idea of how all this evolved.

