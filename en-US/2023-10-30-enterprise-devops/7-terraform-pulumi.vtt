WEBVTT

1
00:00:00.330 --> 00:00:04.010
Automation tools, yay, next one.

2
00:00:04.010 --> 00:00:07.839
And I actually felt that this gift
was a pretty good representation of

3
00:00:07.839 --> 00:00:08.969
automation tools.

4
00:00:08.969 --> 00:00:12.648
Because I think that this is what people
kind of see quite often is they see these

5
00:00:12.648 --> 00:00:16.157
two paths in front of them were like,
well, if I use this it'll be sunny and

6
00:00:16.157 --> 00:00:17.584
everything will be perfect.

7
00:00:17.584 --> 00:00:19.255
But if I go the, it's,

8
00:00:19.255 --> 00:00:23.610
this in my mind is truly how it
feels to pick automation tools.

9
00:00:23.610 --> 00:00:26.370
So we're going to talk about some of

10
00:00:26.370 --> 00:00:30.430
the industry standards
first of automation tools.

11
00:00:30.430 --> 00:00:33.100
I'm not going to go super deep into
them on a technical perspective.

12
00:00:33.100 --> 00:00:34.638
I'm just going to show you them and

13
00:00:34.638 --> 00:00:37.450
kind of give you an example
of how to pick between them.

14
00:00:37.450 --> 00:00:39.460
So the first one is Terraform.

15
00:00:39.460 --> 00:00:42.610
The star by the way means that we're
going to be using it in this course.

16
00:00:42.610 --> 00:00:45.110
So we will be using
TerraForm in this course.

17
00:00:45.110 --> 00:00:48.170
Pulumi also exists.

18
00:00:48.170 --> 00:00:50.490
Terraform is widely used.

19
00:00:50.490 --> 00:00:53.640
It's been around for
a long time, basically 10 years.

20
00:00:53.640 --> 00:00:56.520
And it's just it's it's
pretty much standard.

21
00:00:56.520 --> 00:00:57.840
Everybody uses it.

22
00:00:57.840 --> 00:01:00.870
Pulumi however, is growing.

23
00:01:00.870 --> 00:01:03.649
The DevOps for
Developers course that we did before,

24
00:01:03.649 --> 00:01:05.970
that actually does cover Pulumi.

25
00:01:05.970 --> 00:01:09.578
And if you have heard of some
recent changes with Terraform,

26
00:01:09.578 --> 00:01:14.460
Pulumi and even other things are becoming
a bit more popular now because of those,

27
00:01:14.460 --> 00:01:16.670
which we'll talk about in a minute.

28
00:01:16.670 --> 00:01:22.229
But honestly, these two right here, in my
personal opinion, can take you to scale.

29
00:01:22.229 --> 00:01:25.584
They can take you to where you need,
it's just figuring out how to get there

30
00:01:25.584 --> 00:01:27.780
with you know the implementation
that you need.

31
00:01:27.780 --> 00:01:32.443
OpenTofu, okay,
I didn't want to add this but

32
00:01:32.443 --> 00:01:36.989
I felt like I had to
because there's some stuff

33
00:01:36.989 --> 00:01:41.554
that happened a few weeks
ago with Terraform.

34
00:01:41.554 --> 00:01:48.114
And it may it was enough to disrupt
the section of DevOps that we all work in,

35
00:01:48.114 --> 00:01:54.790
so Terraform decided to change their
licensing on the Terraform CLI.

36
00:01:54.790 --> 00:01:59.910
They basically said you know what, we kind
of want to make money off of Terraform.

37
00:01:59.910 --> 00:02:04.116
So we're gonna move to BSL license,
which is essentially a business license,

38
00:02:04.116 --> 00:02:08.507
meaning that you can't use it and resell
it unless, well, you just, you can't,

39
00:02:08.507 --> 00:02:11.100
[LAUGH] they don't let
you do that anymore.

40
00:02:11.100 --> 00:02:15.615
So what happened was the moment
they changed their licensing,

41
00:02:15.615 --> 00:02:20.043
a ton of companies went into
the Terraform repo, cloned it and

42
00:02:20.043 --> 00:02:24.320
took all of the data before the licensing,
[LAUGH] all of it.

43
00:02:24.320 --> 00:02:29.120
And then that through that was
eventually this thing called OpenTofu.

44
00:02:29.120 --> 00:02:34.288
Now, it was originally called OpenTf,
but the main point of it was

45
00:02:34.288 --> 00:02:39.920
to get the knowledge and the basically
everything that TerraForm did and

46
00:02:39.920 --> 00:02:44.256
try and keep that as open
source as possible, right, so

47
00:02:44.256 --> 00:02:48.500
OpenTofu is basically
just tariff Terraform.

48
00:02:48.500 --> 00:02:50.000
It still works like Terraform.

49
00:02:50.000 --> 00:02:53.671
As a matter of fact,
if you add a Terraform module to OpenTofu,

50
00:02:53.671 --> 00:02:55.620
it still says Terraform.

51
00:02:55.620 --> 00:02:58.033
None of the logic has changed.

52
00:02:58.033 --> 00:03:00.758
It's meant to be a drop-in replacement.

53
00:03:00.758 --> 00:03:05.620
Now, does that mean that
you should worry about it?

54
00:03:05.620 --> 00:03:07.090
No, and here's why.

55
00:03:08.800 --> 00:03:11.130
For starters,
it's not an industry standard.

56
00:03:11.130 --> 00:03:13.410
It just got created two weeks ago.

57
00:03:13.410 --> 00:03:17.530
Sure, it's Terraform, but
it's a brand new repository.

58
00:03:17.530 --> 00:03:21.850
We have no idea the direction
it's gonna go in, and maybe.

59
00:03:21.850 --> 00:03:27.161
The caveat or the thing that I put here
is that OpenTofu really only helps at

60
00:03:27.161 --> 00:03:33.416
the moment, right now, during, recording
this, with licensing with developers or

61
00:03:33.416 --> 00:03:38.650
providers who want to resell
Terraform-like solutions, right?

62
00:03:38.650 --> 00:03:42.190
So if you're a developer who's like,
man, I want to take Terraform,

63
00:03:42.190 --> 00:03:44.968
build a platform with it that
people can run Terraform.

64
00:03:44.968 --> 00:03:48.179
You can't do that anymore with Terraform.

65
00:03:48.179 --> 00:03:50.028
It's against their policy.
It's against their license.

66
00:03:50.028 --> 00:03:51.610
And you'll get in trouble for it.

67
00:03:51.610 --> 00:03:55.100
But if you use OpenTofu, you can do that.

68
00:03:55.100 --> 00:03:56.140
So what does this mean?

69
00:03:57.140 --> 00:04:01.020
Well, this could change how things work.

70
00:04:01.020 --> 00:04:05.372
Right now we use TerraForm and these other
tools as like local CLI tools that we run

71
00:04:05.372 --> 00:04:09.750
against the cloud automation to create and
provision these systems.

72
00:04:09.750 --> 00:04:15.630
But and again, this is just my own,
putting on my wizard hat for a second.

73
00:04:15.630 --> 00:04:19.158
There's part of me that thinks that
they're going to try integrating

74
00:04:19.158 --> 00:04:20.533
these things directly, so

75
00:04:20.533 --> 00:04:25.010
that I could just copy and paste a piece
of TerraForm code and it just creates it.

76
00:04:25.010 --> 00:04:28.120
Right, no need for CLI,
no need for any of that.

77
00:04:28.120 --> 00:04:31.782
So I do personally think that that's
where a lot of the innovation for

78
00:04:31.782 --> 00:04:33.172
OpenTofu will exist now,

79
00:04:33.172 --> 00:04:38.250
which just means still, it's not something
that's really important at the moment.

80
00:04:38.250 --> 00:04:41.734
It's just something to make
sure you guys are aware of and

81
00:04:41.734 --> 00:04:46.830
really just to kind of avoid, you don't
really need to mess with it now, at least.

82
00:04:48.520 --> 00:04:50.510
So let's talk about Terraform, right?

83
00:04:50.510 --> 00:04:51.330
What is Terraform?

84
00:04:51.330 --> 00:04:53.789
If you've never used Terraform before,

85
00:04:53.789 --> 00:04:57.520
it's a declarative way of
configuring your infrastructure.

86
00:04:57.520 --> 00:05:01.434
Does anyone know the difference between
declarative and imperative, by any chance?

87
00:05:03.706 --> 00:05:04.870
Chat, maybe yeah.

88
00:05:07.430 --> 00:05:11.034
&gt;&gt; Declarative is when you have like
a surface level API where you can kind of

89
00:05:11.034 --> 00:05:11.990
build on top of it.

90
00:05:11.990 --> 00:05:14.611
Whereas imperative is
the actual kind of step by

91
00:05:14.611 --> 00:05:15.176
step
&gt;&gt; Yeah.

92
00:05:15.176 --> 00:05:17.190
&gt;&gt; Implementation of that API.

93
00:05:17.190 --> 00:05:18.670
&gt;&gt; Yeah, exactly, yeah.

94
00:05:18.670 --> 00:05:23.584
So you the biggest thing to take away
from Terraform is it's just focused on

95
00:05:23.584 --> 00:05:25.620
configuring things, right?

96
00:05:25.620 --> 00:05:29.966
There's no heavy use of like logic,
that you'll use some but

97
00:05:29.966 --> 00:05:34.960
really it's about copying and
pasting things and configuring them.

98
00:05:34.960 --> 00:05:36.140
That's it, right?

99
00:05:36.140 --> 00:05:40.200
So Terraform has a very low entry point
for starting, really anybody can get

100
00:05:40.200 --> 00:05:44.389
started with Terraform as long as you're
comfortable with using a CLI tool and

101
00:05:44.389 --> 00:05:47.560
reading docs,
you'll be good with Terraform.

102
00:05:47.560 --> 00:05:52.120
And another part of Terraform is has it
has massive developer support, right?

103
00:05:52.120 --> 00:05:55.410
It's been around for,
again, a long time now.

104
00:05:55.410 --> 00:05:57.750
We've built and iterated on top of it, and

105
00:05:57.750 --> 00:06:00.350
multiple cloud providers
are supported by it.

106
00:06:00.350 --> 00:06:03.810
So you can provision on Amazon,
Google Azure.

107
00:06:03.810 --> 00:06:07.022
It's just again,
it's the industry lead right now for

108
00:06:07.022 --> 00:06:09.970
a reason, and
it's because of its adoptability.

109
00:06:11.580 --> 00:06:16.200
So this is an, this is an example of
what Terraform Code looks like, right?

110
00:06:16.200 --> 00:06:19.620
And when we break it down, it's,
actually very, very simple.

111
00:06:19.620 --> 00:06:23.104
So the first component
we have is the resource.

112
00:06:23.104 --> 00:06:25.230
So that is just what's
called a meta argument.

113
00:06:25.230 --> 00:06:29.320
It just means you're telling
TerraForm I'm creating a resource, right?

114
00:06:29.320 --> 00:06:33.390
The next thing is is the actual
resource you're creating, right?

115
00:06:33.390 --> 00:06:36.871
So when you think about being
a developer and you want to like create

116
00:06:36.871 --> 00:06:40.630
infrastructure, this doesn't include,
how do I set stuff up?

117
00:06:40.630 --> 00:06:45.320
It's just like that's all you,
literally that's all you need.

118
00:06:45.320 --> 00:06:48.180
To create AVPC in Amazon.

119
00:06:48.180 --> 00:06:49.900
Then you give it a name, right?

120
00:06:49.900 --> 00:06:50.840
Your resource name.

121
00:06:50.840 --> 00:06:54.390
Now, does that mean that that's the name
of the thing that's actually created?

122
00:06:54.390 --> 00:07:00.420
No, that's just the Terraform state name
so that it knows how to save that data.

123
00:07:00.420 --> 00:07:03.099
And then we have our curly brackets.

124
00:07:03.099 --> 00:07:06.939
And basically within those curly
brackets is your actual configuration.

125
00:07:06.939 --> 00:07:11.788
So, to create a resource,
all you need are three separate strings,

126
00:07:11.788 --> 00:07:14.240
and then a brackets, right?

127
00:07:14.240 --> 00:07:18.004
Everything inside of those brackets at
that point are going to be unique to that

128
00:07:18.004 --> 00:07:19.670
resource, and things like that.

129
00:07:19.670 --> 00:07:25.116
So in this case, we're building an AWS
VPC, it's on a cider block of 10 00 16,

130
00:07:25.116 --> 00:07:29.220
it set to default and
we're giving it some tags as well, right?

131
00:07:29.220 --> 00:07:33.607
So it's 1, 2, 3, 4, 5,
6, 7 lines of code, and

132
00:07:33.607 --> 00:07:38.100
you have a complete virtual
VPC created for you, at least.

133
00:07:38.100 --> 00:07:39.940
Now, is it, exactly what you want?

134
00:07:39.940 --> 00:07:41.770
No, but you can go in and add changes.

135
00:07:43.390 --> 00:07:45.540
So let's talk about Pulumi now, right?

136
00:07:45.540 --> 00:07:48.020
We talked about Terraform a bit.

137
00:07:48.020 --> 00:07:49.660
What are the differences between the two?

138
00:07:49.660 --> 00:07:53.200
Well, like I mentioned earlier,
Terraform is declarative.

139
00:07:53.200 --> 00:07:54.760
Pulumi is really imperative.

140
00:07:54.760 --> 00:07:58.729
And I actually, [LAUGH] I sat down and
I really tried to think about this really

141
00:07:58.729 --> 00:08:02.000
hard cuz I think people
might argue with me on this.

142
00:08:02.000 --> 00:08:07.845
However, Pulumi focuses on using
programming languages that are imperative.

143
00:08:07.845 --> 00:08:13.040
[LAUGH] So no JSS, Python, Go, .Net, Java.

144
00:08:13.040 --> 00:08:17.796
Basically, all of those besides
YAML are imperative languages that

145
00:08:17.796 --> 00:08:20.831
are designed to take things through steps.

146
00:08:20.831 --> 00:08:24.732
Now, I just told you that
Terraform is declarative, so

147
00:08:24.732 --> 00:08:29.223
this might already make you see
the difference between the two.

148
00:08:29.223 --> 00:08:32.438
Where this is much more like
a normal programming approach,

149
00:08:32.438 --> 00:08:36.230
where you have to add this, then you
add this, and you write more code.

150
00:08:36.230 --> 00:08:40.630
You're basically building the process
out imperatively in the logic because

151
00:08:40.630 --> 00:08:42.710
of how the language works.

152
00:08:42.710 --> 00:08:45.119
Whereas Terraform,
I can have this resource over here,

153
00:08:45.119 --> 00:08:48.490
this resource over here, this resource
over here it, and it doesn't matter.

154
00:08:48.490 --> 00:08:52.265
It will just,
[SOUND] move it all together for me.

155
00:08:52.265 --> 00:08:56.654
With Pulumi because it's imperative
you're using a language.

156
00:08:56.654 --> 00:09:01.075
So you're not using just pure
configuration language in that case,

157
00:09:01.075 --> 00:09:05.643
which is HCL but in this case,
it gives you the ability to use like node,

158
00:09:05.643 --> 00:09:08.332
Python, go.net, Java and again YAML.

159
00:09:08.332 --> 00:09:10.310
So what does this mean like why?

160
00:09:10.310 --> 00:09:12.010
He's like, okay, that's great.

161
00:09:12.010 --> 00:09:13.630
But like, whatever.

162
00:09:13.630 --> 00:09:15.240
I don't care about the language I use.

163
00:09:15.240 --> 00:09:17.260
Well, you might, you might.

164
00:09:17.260 --> 00:09:21.510
A good example of this is like,
security, right?

165
00:09:21.510 --> 00:09:24.272
Maybe TerraForm needs a way of access,
or I'm sorry,

166
00:09:24.272 --> 00:09:28.270
maybe your automation needs a way
of accessing a very unique service.

167
00:09:28.270 --> 00:09:32.010
Right, and
It's just hard to do in Terraform.

168
00:09:32.010 --> 00:09:34.540
How do I make a request?

169
00:09:34.540 --> 00:09:37.940
And this is something you'd think
a language would be easier to do, right.

170
00:09:39.140 --> 00:09:41.948
And this is where Pulumi can really shine,

171
00:09:41.948 --> 00:09:46.090
is basically doing all the things
that Terraform can't do.

172
00:09:46.090 --> 00:09:49.550
The HCL language that
Terraform uses is good.

173
00:09:49.550 --> 00:09:55.412
It's very good, but when you talk about
what's actually general purpose language,

174
00:09:55.412 --> 00:09:59.200
there's just things you
can't compare it to, right?

175
00:09:59.200 --> 00:10:03.250
With a general purpose language, you can
do like heavy modularization, right?

176
00:10:03.250 --> 00:10:07.959
You can create your own repos of
like templates, or libraries and

177
00:10:07.959 --> 00:10:11.050
then those create your resources for you.

178
00:10:11.050 --> 00:10:14.685
And you can do stuff like that
in Terraform with modules, but

179
00:10:14.685 --> 00:10:17.763
my main point here is that
you're doing it in code.

180
00:10:17.763 --> 00:10:22.406
So all of the flexibility that you would
have with a normal programming language,

181
00:10:22.406 --> 00:10:24.299
you'll have with this, right.

182
00:10:24.299 --> 00:10:27.510
And that also makes it so
that it's more flexible as well.

183
00:10:27.510 --> 00:10:31.410
So in the future, when you have to maybe
add something that's really niche or

184
00:10:31.410 --> 00:10:33.880
really particular, that's actually easier.

185
00:10:33.880 --> 00:10:36.610
You don't have to go,
how do I make this work with Terraform?

186
00:10:36.610 --> 00:10:39.220
You just go, okay, well,
how do I program it, right.

187
00:10:40.400 --> 00:10:41.870
This is an example of Pulumi.

188
00:10:43.500 --> 00:10:48.438
So you're going to notice automatically
that we already have things that we didn't

189
00:10:48.438 --> 00:10:50.090
have before.

190
00:10:50.090 --> 00:10:54.678
The first one is that we're actually
importing the libraries that Pulumi needs

191
00:10:54.678 --> 00:10:59.630
to use because Pulumi, right now at least,
we're using Node .js with this.

192
00:10:59.630 --> 00:11:05.225
Because it's a language, I couldn't just
go in to go and start writing automation.

193
00:11:05.225 --> 00:11:11.226
Because go is just a programming language
it's not an automation language, so what

194
00:11:11.226 --> 00:11:16.818
we have to do and this is why I say you
have to really consider this part, right.

195
00:11:16.818 --> 00:11:22.462
In this scenario before you can automate,
you have to set up the repo, you have to

196
00:11:22.462 --> 00:11:28.060
go in, you have to set up your packages,
you have to set up your package.json.

197
00:11:28.060 --> 00:11:31.477
There's work that has to be done
here before you can actually

198
00:11:31.477 --> 00:11:33.940
start moving forward, right.

199
00:11:33.940 --> 00:11:39.980
Whereas when we go back,
it's just go, right.

200
00:11:39.980 --> 00:11:44.059
So this is a big difference between Paluma
and TerraForm that I really want to shine

201
00:11:44.059 --> 00:11:47.740
here, is it's not that they
both can't do the same thing.

202
00:11:47.740 --> 00:11:51.990
But with this,
it's strictly designed to just go.

203
00:11:51.990 --> 00:11:55.647
Whereas in this scenario,
it's strictly designed to say,

204
00:11:55.647 --> 00:11:58.320
tell me how you want it pretty much.

205
00:11:58.320 --> 00:12:01.301
And in this scenario what we do is
we import Pulumi, we import AWS,

206
00:12:01.301 --> 00:12:05.620
if there was Google, we'd import Google,
right, we'd import other things.

207
00:12:05.620 --> 00:12:07.130
And then we'd start
creating our resources.

208
00:12:07.130 --> 00:12:08.960
Now again, they look similar.

209
00:12:08.960 --> 00:12:12.602
If you look at like the variables
right cider block instance tenancy,

210
00:12:12.602 --> 00:12:14.276
cider block instance tenancy.

211
00:12:14.276 --> 00:12:17.579
Can anyone tell me why
those are same still?

212
00:12:17.579 --> 00:12:20.844
&gt;&gt; Cuz the API's underneath
are pretty much the same?

213
00:12:20.844 --> 00:12:23.768
&gt;&gt; Exactly, yeah, the API's for
the cloud provider are the same.

214
00:12:23.768 --> 00:12:28.452
And this is another thing that you can
note and take away which is, whether you

215
00:12:28.452 --> 00:12:33.446
go to Pulumi, whether you go to Terraform,
sometimes they're interoperable.

216
00:12:33.446 --> 00:12:37.803
Because they're all using the same cloud
providers at the end of the day, so

217
00:12:37.803 --> 00:12:42.569
it's not as scary sometimes to say, well,
let's move from Pulumi to Terraform or

218
00:12:42.569 --> 00:12:43.540
back and forth.

219
00:12:43.540 --> 00:12:46.473
Because you can lean on
that most of the time.

220
00:12:46.473 --> 00:12:50.798
But again, the big takeaway here is
that you're using logic to build your

221
00:12:50.798 --> 00:12:53.678
code meaning that this
is much more imperative.

222
00:12:53.678 --> 00:12:55.780
So, which one should I use?

223
00:12:55.780 --> 00:12:57.640
Which one should I use?

224
00:12:57.640 --> 00:13:02.150
Which is the question I get all the time?

225
00:13:02.150 --> 00:13:08.350
Well, how to choose, in my opinion,
comes down to three main things.

226
00:13:08.350 --> 00:13:11.603
Promise me you will stay true
to these three things, okay?

227
00:13:11.603 --> 00:13:17.210
[LAUGH] The first one is focus on
the problem you're trying to solve.

228
00:13:17.210 --> 00:13:20.935
So many times in the DevOps world, there's
a new piece of tech that comes out,

229
00:13:20.935 --> 00:13:24.640
there's a new way of automating something,
there's a new fancy.

230
00:13:24.640 --> 00:13:30.432
In a lot of ways, all of us nerds
are just like moths to a fly zapper,

231
00:13:30.432 --> 00:13:34.020
[LAUGH] like, we just see light and we go.

232
00:13:34.020 --> 00:13:38.004
And so don't do that, don't do that here.

233
00:13:38.004 --> 00:13:39.740
Use that, do that in your free time.

234
00:13:39.740 --> 00:13:41.680
Right, but don't do that here.

235
00:13:41.680 --> 00:13:45.139
Right focus on the problems
you're actually trying to,

236
00:13:45.139 --> 00:13:48.540
like if you can make VPCs and
TerraForm, stop.

237
00:13:48.540 --> 00:13:51.870
[LAUGH] You're done,
you don't need to go any further, right?

238
00:13:51.870 --> 00:13:55.917
But if you have a need for the language,
like you want to work in Python or

239
00:13:55.917 --> 00:14:00.250
JavaScript or whatever, then Pulumi
might be a good bet for you, right?

240
00:14:00.250 --> 00:14:03.020
Focus on how efficient you want to be.

241
00:14:03.020 --> 00:14:04.809
Anyone from the Pulumi company?

242
00:14:06.720 --> 00:14:12.900
However, I do think that once you start
using code, it becomes harder, yeah.

243
00:14:13.950 --> 00:14:16.880
&gt;&gt; Why not use the AWS CLI directly?

244
00:14:16.880 --> 00:14:18.780
&gt;&gt; It is a good question,
which is like, why not?

245
00:14:18.780 --> 00:14:22.510
Like, the CLI, the Amazon CLI
does provide really cool stuff.

246
00:14:22.510 --> 00:14:25.719
Like, for example, if you want to
create a whole Kubernetes cluster,

247
00:14:25.719 --> 00:14:28.970
they have one command for
it, why not do that, right?

248
00:14:28.970 --> 00:14:31.300
I go back to the get ops answer answer.

249
00:14:31.300 --> 00:14:33.420
How, I'd go back to what AI said.

250
00:14:33.420 --> 00:14:33.950
How are you?

251
00:14:33.950 --> 00:14:35.160
How are you gonna do it again?

252
00:14:35.160 --> 00:14:40.330
How do you, how are you going to know
how you did it last time, right?

253
00:14:40.330 --> 00:14:42.600
That's where automation comes in, right?

254
00:14:42.600 --> 00:14:45.270
You take get ops,
you plug it into automation.

255
00:14:45.270 --> 00:14:46.662
And now you have a source of truth,

256
00:14:46.662 --> 00:14:49.120
as well as a way to deploy that
source of truth, constantly.

257
00:14:49.120 --> 00:14:50.127
You know what I mean?

258
00:14:50.127 --> 00:14:52.959
If you're doing it manually,
this is you down here, and

259
00:14:52.959 --> 00:14:55.439
you're taking it all the way
over here each time.

260
00:14:55.439 --> 00:14:56.020
You know what I mean?

261
00:14:56.020 --> 00:15:02.295
So not only is it, do you want to save
money, but do you want to save time?

262
00:15:02.295 --> 00:15:04.241
Like, do you want to have
to do that every time?

263
00:15:04.241 --> 00:15:07.624
Or something or have something do it for
you automated, yeah.

264
00:15:07.624 --> 00:15:10.710
&gt;&gt; My mental model for
the difference between Terraform and

265
00:15:10.710 --> 00:15:14.257
Pulumi is that Pulumi can be as
arbitrarily specific as you want.

266
00:15:14.257 --> 00:15:15.787
&gt;&gt; Yes, yes, yeah.

267
00:15:15.787 --> 00:15:21.001
&gt;&gt; And the Amazon, the AWS CLI tool
is like as unspecific as you want,

268
00:15:21.001 --> 00:15:23.808
just get the effect, some effect.

269
00:15:23.808 --> 00:15:24.776
&gt;&gt; Pretty much, yeah.

270
00:15:24.776 --> 00:15:27.699
I mean, so I think maybe a way I can add
to that is, when you do it via the CLI,

271
00:15:27.699 --> 00:15:29.612
you also have no idea when
it's going to change.

272
00:15:29.612 --> 00:15:31.993
You have no idea if they're
going to change arguments.

273
00:15:31.993 --> 00:15:33.856
You have no idea if they're
going to change how they do it.

274
00:15:33.856 --> 00:15:35.382
You have no idea if they're
going to change arguments.

275
00:15:35.382 --> 00:15:38.107
You have no idea if they're going
to change how they do it, right?

276
00:15:38.107 --> 00:15:40.240
So I would say like ad hoc stuff,

277
00:15:40.240 --> 00:15:44.671
stuff that you really just need to
kind of do once, CLI is perfect.

278
00:15:44.671 --> 00:15:48.969
But if it is a repeated process,
that should go through some type

279
00:15:48.969 --> 00:15:53.201
of automation because then we can
track it and stuff like that.

280
00:15:53.201 --> 00:15:57.401
Beware, like I said,
do not focus on what is best or

281
00:15:57.401 --> 00:16:01.813
most popular,
really unless you want to waste time.

282
00:16:01.813 --> 00:16:07.452
You'll waste a lot of time, and
you'll normally bounce around a lot.

283
00:16:07.452 --> 00:16:09.177
So I did write some cases for
us to try and

284
00:16:09.177 --> 00:16:11.021
when is the best time
to use the right one.

285
00:16:11.021 --> 00:16:16.661
Any one from this is just
my own personal feelings,

286
00:16:16.661 --> 00:16:21.264
we do have people from
both of that [LAUGH].

287
00:16:21.264 --> 00:16:25.140
For me, Terraform was about the desire
to use declarative configuration for

288
00:16:25.140 --> 00:16:26.080
starters.

289
00:16:26.080 --> 00:16:29.150
That's the massive separation
between Pulumi and Terraform.

290
00:16:29.150 --> 00:16:34.147
And if you just don't really care about
writing it in a language that you want,

291
00:16:34.147 --> 00:16:37.930
I don't really think there's
any value to doing it.

292
00:16:37.930 --> 00:16:40.650
The desire to use a single language for
all configurations.

293
00:16:40.650 --> 00:16:41.930
That's another big one.

294
00:16:41.930 --> 00:16:45.563
Pulumi is really meant to be like,
if you want to use Go with TypeScript and

295
00:16:45.563 --> 00:16:46.740
da-da-da.

296
00:16:46.740 --> 00:16:50.656
If you really aren't going to use more
than one language TerraForm just might be

297
00:16:50.656 --> 00:16:51.820
a good fit for you.

298
00:16:51.820 --> 00:16:56.020
Yeah, it's taking the problem and
making it much simpler, right?

299
00:16:56.020 --> 00:16:59.190
And then desire to use a single tool for
all configurations.

300
00:16:59.190 --> 00:17:00.621
That's kind of the same thing,

301
00:17:00.621 --> 00:17:03.757
is TerraForm can take care of
provisioning this and take care of that.

302
00:17:03.757 --> 00:17:06.838
It's kind of like an all
in one solution and

303
00:17:06.838 --> 00:17:10.186
that's why It's become so popular, right?

304
00:17:10.186 --> 00:17:14.942
So the TLDR use cases is basically when
you got the need for speed, when you

305
00:17:14.942 --> 00:17:19.928
want to move fast, if you want to keep
moving TerraForm can help you do that and

306
00:17:19.928 --> 00:17:23.100
listen like I've ran Pulumi for
a long time.

307
00:17:23.100 --> 00:17:26.166
I really, really, really love it
because of the flexibility and

308
00:17:26.166 --> 00:17:29.080
the ability to write in your own
language and stuff like that.

309
00:17:30.130 --> 00:17:35.103
I cannot argue with the fact that
Terraform, I'm still faster in every time.

310
00:17:35.103 --> 00:17:40.317
And again, when we go through Terraform
later on, you'll see how quickly

311
00:17:40.317 --> 00:17:45.365
we can really do this without having
to have a barrier of like language and

312
00:17:45.365 --> 00:17:49.196
compiler and transpiler or
things like that, right?

313
00:17:49.196 --> 00:17:51.787
For Pulumi, right,
if you want to be imperative,

314
00:17:51.787 --> 00:17:55.586
if you actually have an infrastructure
where you're kind of like, okay,

315
00:17:55.586 --> 00:17:59.352
I want to do something, and then I want
to stop, I want to do other things.

316
00:17:59.352 --> 00:18:01.324
Pulumi will be more flexible with that,

317
00:18:01.324 --> 00:18:04.282
because then you can lean on
the language to, throw errors or

318
00:18:04.282 --> 00:18:08.390
other things like that when you want to,
you can't really do that with Terraform.

319
00:18:08.390 --> 00:18:13.250
So Pulumi is really powerful with being
able to use the imperative configuration

320
00:18:13.250 --> 00:18:14.540
language, I guess.

321
00:18:15.930 --> 00:18:18.560
Again, the desire to
use multiple languages.

322
00:18:18.560 --> 00:18:20.840
I really think this is a bigger one.

323
00:18:20.840 --> 00:18:23.990
I think that if you do want
to use multiple languages,

324
00:18:23.990 --> 00:18:27.250
Pulumi is probably gonna
be the best angle to go.

325
00:18:27.250 --> 00:18:30.150
Because then,
going back to that team approach.

326
00:18:30.150 --> 00:18:33.022
You can have some people writing Pulumi
over on this team, you can have some

327
00:18:33.022 --> 00:18:36.380
people write Pulumi over on this team and
you don't have to tell both teams.

328
00:18:36.380 --> 00:18:39.140
You got to write it in this language.

329
00:18:39.140 --> 00:18:41.870
So that's really nice and
the desire to use multiple tools.

330
00:18:41.870 --> 00:18:45.670
So you might be like, well, wouldn't
you just be using Pulumi in this case?

331
00:18:45.670 --> 00:18:49.415
What I mean by this is that because
it's the language that's there.

332
00:18:49.415 --> 00:18:54.783
You can also use anything else that works
with that language, right, so if you have

333
00:18:54.783 --> 00:19:00.393
clients, right, where they connect to like
other API providers and stuff like that.

334
00:19:00.393 --> 00:19:03.165
You just can't do that
easily with TerraForm but

335
00:19:03.165 --> 00:19:07.029
because it's a language you can do
that really easily with Pulumi.

336
00:19:07.029 --> 00:19:11.310
And yeah Pulumi is covered in depth
in the DevOps for developers course.

337
00:19:11.310 --> 00:19:16.000
So I would recommend watching that course
if you're more interested in Pulumi, too.

338
00:19:16.000 --> 00:19:19.630
And yeah, so the TLDR for
Pulumi perfection.

339
00:19:19.630 --> 00:19:21.320
I genuinely think that's what it is.

340
00:19:21.320 --> 00:19:26.348
I think if you're just trying to go for
the absolute perfect, ideal,

341
00:19:26.348 --> 00:19:30.782
like everything you want across
the board you made yourself,

342
00:19:30.782 --> 00:19:34.040
then I think Pulumi
really is a great choice.

343
00:19:34.040 --> 00:19:36.950
Terraform is about saving time, right?

344
00:19:36.950 --> 00:19:41.600
Pulumi, I think, is really about, like he
says, perfection, exactly what you want,

345
00:19:41.600 --> 00:19:44.020
the specific needs or
scaling requirements.

