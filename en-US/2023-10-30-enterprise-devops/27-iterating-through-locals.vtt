WEBVTT

1
00:00:00.240 --> 00:00:05.352
Now, do we have to have
those description and

2
00:00:05.352 --> 00:00:09.530
project ID in the main.tf anymore?

3
00:00:09.530 --> 00:00:11.090
&gt;&gt; We're gonna get to that in a second,
yeah.

4
00:00:11.090 --> 00:00:12.220
We're gonna get to that in a second.

5
00:00:12.220 --> 00:00:15.581
Because the first thing we need to do is
we need to set up our locals to know which

6
00:00:15.581 --> 00:00:18.240
values we care about and
which ones we don't.

7
00:00:18.240 --> 00:00:22.214
I always try and start with that
then going to the first part and

8
00:00:22.214 --> 00:00:25.050
then being like, boy, what do we rip up?

9
00:00:25.050 --> 00:00:28.480
Because there is a couple of caveats
here that we haven't talked about yet.

10
00:00:28.480 --> 00:00:34.100
The first one is, do you guys think that,
are these actually connected yet?

11
00:00:34.100 --> 00:00:36.240
No, yeah, they're not.

12
00:00:36.240 --> 00:00:39.020
We just made some variables and
put them over here, right?

13
00:00:39.020 --> 00:00:40.655
So what we wanna do is,

14
00:00:40.655 --> 00:00:45.400
we wanna actually make our modules
use these variables, right?

15
00:00:45.400 --> 00:00:47.860
So I'm gonna swap this really quickly.

16
00:00:47.860 --> 00:00:53.630
The first thing we want to use is actually
a concept in Terraform called for each.

17
00:00:53.630 --> 00:00:56.410
Now for each, maybe you can guess it.

18
00:00:56.410 --> 00:00:57.850
Can anyone tell me what for each might do?

19
00:00:58.940 --> 00:01:00.430
&gt;&gt; Iterates over locals.

20
00:01:00.430 --> 00:01:01.510
&gt;&gt; Exactly, yeah.

21
00:01:01.510 --> 00:01:06.207
And so you can see here in my example
for_each local_project, right,

22
00:01:06.207 --> 00:01:08.070
we're now iterating.

23
00:01:08.070 --> 00:01:13.660
We are now using a for loop,
essentially, on this module, right?

24
00:01:13.660 --> 00:01:15.440
That's the first thing we wanna do.

25
00:01:15.440 --> 00:01:20.230
&gt;&gt; Is local, is that a magic variable,
or how does it know what local is?

26
00:01:20.230 --> 00:01:24.690
&gt;&gt; So yeah, it's this, again,
they're called meta-arguments.

27
00:01:24.690 --> 00:01:27.325
And it's this argument right here,

28
00:01:27.325 --> 00:01:33.200
this locals is a specific in the same
way that we have module and module here.

29
00:01:33.200 --> 00:01:36.508
We can also have locals, so I could
have more than one locals if I wanted,

30
00:01:36.508 --> 00:01:40.080
like I could have 10 of them 20 of
them it doesn't matter the code.

31
00:01:40.080 --> 00:01:45.272
The TerraForm will then merge all the
locals together so that you can use them.

32
00:01:45.272 --> 00:01:49.170
But it's singular on
the left because syntax.

33
00:01:49.170 --> 00:01:49.810
&gt;&gt; Wait, sorry.

34
00:01:49.810 --> 00:01:52.368
What do you mean?
&gt;&gt; Singular, it's local.projects.

35
00:01:52.368 --> 00:01:54.660
&gt;&gt; That's because that's
the actual value I'm using.

36
00:01:54.660 --> 00:01:57.870
I'm actually using the locals.project.

37
00:01:57.870 --> 00:02:00.020
So you see locals here.

38
00:02:00.020 --> 00:02:04.550
And then the dot would be
the child you want to select.

39
00:02:04.550 --> 00:02:06.570
In that case, then it would be project.

40
00:02:06.570 --> 00:02:09.591
So, like,
&gt;&gt; So, let's take a list on the locals is

41
00:02:09.591 --> 00:02:14.450
the list, and local is the,
&gt;&gt; So, locals is more of, like, the map.

42
00:02:14.450 --> 00:02:17.450
And then we have lists inside of that map.

43
00:02:17.450 --> 00:02:22.800
Yeah, so locals is like how TerraForm
allows us to create variables.

44
00:02:22.800 --> 00:02:26.030
And then we create our own
variables inside of those locals.

45
00:02:27.230 --> 00:02:28.230
And we use those.

46
00:02:28.230 --> 00:02:32.460
There's no other way like you
can either do it as var right or

47
00:02:32.460 --> 00:02:34.160
you can do it as locals.

48
00:02:34.160 --> 00:02:38.303
Can anyone tell me potentially what might
be the difference between var and locals?

49
00:02:39.353 --> 00:02:44.390
&gt;&gt; You usually use vars
when you need user input.

50
00:02:44.390 --> 00:02:45.160
&gt;&gt; Exactly.

51
00:02:45.160 --> 00:02:48.800
Yeah.
Whereas locals, it's local.

52
00:02:48.800 --> 00:02:50.590
[LAUGH] Yeah, it's just local, right?

53
00:02:50.590 --> 00:02:55.228
And so this is where we start leaning
on the declarative configuration

54
00:02:55.228 --> 00:02:59.785
where I say like, well,
this isn't something I actually wanna make

55
00:02:59.785 --> 00:03:04.580
configurable as a variable pass
to the whole automation repo.

56
00:03:04.580 --> 00:03:07.310
This is a part of the automation repo.

57
00:03:07.310 --> 00:03:10.404
If I wanna make another workspace,
I should be able to go into this repo,

58
00:03:10.404 --> 00:03:13.470
as we said yesterday, and
just make a new workspace, right?

59
00:03:13.470 --> 00:03:18.052
So that's the real goal of using
locals versus var, is var helps it so

60
00:03:18.052 --> 00:03:22.002
that if you're reusing the whole
project somewhere else,

61
00:03:22.002 --> 00:03:26.120
then you could change variables
from that perspective.

62
00:03:26.120 --> 00:03:29.195
But if inside of that project you have,
again, variables and

63
00:03:29.195 --> 00:03:33.080
things like that you don't wanna change,
then you can use locals.

64
00:03:33.080 --> 00:03:36.999
&gt;&gt; I think the slight hiccup
was just that like locals

65
00:03:36.999 --> 00:03:40.140
in the local.tf file is a plural word.

66
00:03:40.140 --> 00:03:43.510
And on the left, we're using
the singular and it's like kind of.

67
00:03:43.510 --> 00:03:49.097
&gt;&gt; Its tying what's actually telling

68
00:03:49.097 --> 00:03:54.705
this that locals is the local.

69
00:03:54.705 --> 00:03:55.860
&gt;&gt; I see.

70
00:03:55.860 --> 00:03:59.600
So Terraform follows
basically folder structure.

71
00:03:59.600 --> 00:04:02.420
So anything in this folder that's
named TF is gonna get joined together.

72
00:04:02.420 --> 00:04:05.505
Does that make sense?

73
00:04:05.505 --> 00:04:06.310
&gt;&gt; Yeah.

74
00:04:06.310 --> 00:04:07.460
&gt;&gt; There's no imports.

75
00:04:07.460 --> 00:04:11.260
There is imports, but
those are three modules.

76
00:04:11.260 --> 00:04:14.050
&gt;&gt; And it's just a convention
of TerraForm that exactly

77
00:04:14.050 --> 00:04:16.220
when you say the word
local it will look for

78
00:04:16.220 --> 00:04:20.131
everything that has been concatenated
together from the locals key word.

79
00:04:20.131 --> 00:04:21.929
&gt;&gt; Exactly yeah.

80
00:04:21.929 --> 00:04:22.896
&gt;&gt; So magic.

81
00:04:22.896 --> 00:04:27.970
&gt;&gt; [LAUGH] sure it's a bit of magic
yeah but it's really the scope is within

82
00:04:27.970 --> 00:04:32.528
the directory that you're in, so
any TF file in that directory

83
00:04:32.528 --> 00:04:37.361
Terraform is just gonna go .tf,
.tf, .tf, .tf okay, cool.

84
00:04:37.361 --> 00:04:38.340
Here you go.

85
00:04:38.340 --> 00:04:41.897
Right and if you got five locals
definitions inside of that,

86
00:04:41.897 --> 00:04:45.889
hey go like it just, it's gonna
squish them and then give it to you.

87
00:04:45.889 --> 00:04:53.710
But if I'm iterating with this my values
aren't actually being injected, are they?

88
00:04:53.710 --> 00:04:59.510
If I iterate over this, I'm just gonna get
one project with the exact same thing.

89
00:04:59.510 --> 00:05:01.020
Now again, it's one project, but

90
00:05:01.020 --> 00:05:03.900
if I add more, it's going to get
more projects with the same stuff.

91
00:05:03.900 --> 00:05:06.240
So what I wanna do is I
actually want to delete this.

92
00:05:07.550 --> 00:05:09.210
Again, co-pilot thank you.

93
00:05:09.210 --> 00:05:12.413
It's gonna actually populate what I need,

94
00:05:12.413 --> 00:05:17.364
and because we're using a four each,
we can then use an more magic.

95
00:05:17.364 --> 00:05:21.048
[LAUGH] We can use a another
keyword called Each,

96
00:05:21.048 --> 00:05:25.467
which will make it so
that Anything in the four that we're

97
00:05:25.467 --> 00:05:30.330
currently iterating over we
can access that value for it.

98
00:05:30.330 --> 00:05:36.321
So in this case we say
each.value.description right and

99
00:05:36.321 --> 00:05:39.630
then here we actually say each.

100
00:05:40.850 --> 00:05:48.160
Nope, each.key,
right because it's key value, right?

101
00:05:48.160 --> 00:05:50.300
Outside of that, that's pretty much it.

102
00:05:50.300 --> 00:05:54.416
We've now wired up our project so
that it's interatible and

103
00:05:54.416 --> 00:05:56.360
that it has dynamic values.

104
00:05:56.360 --> 00:05:59.010
So then we do the exact same
thing to the work space.

105
00:05:59.010 --> 00:06:03.382
So we're gonna do for_each =,
thank you, copilot.

106
00:06:05.690 --> 00:06:09.400
All right and then again, I'm sure you
guys know what we're gonna do next.

107
00:06:09.400 --> 00:06:11.221
Can you let copilot write code for us?

108
00:06:11.221 --> 00:06:17.790
[LAUGH] Each.key, right?

109
00:06:17.790 --> 00:06:22.230
Now I'm not gonna,
actually let's do this as well, right

110
00:06:24.580 --> 00:06:28.470
Now it's actually wanted to do something
different but we're gonna do this instead.

111
00:06:28.470 --> 00:06:30.390
Here we go, okay.

112
00:06:32.386 --> 00:06:36.043
Yeah, each.value.project_id, cool.

113
00:06:36.043 --> 00:06:39.230
OK, so do you guys think we're good here?

114
00:06:39.230 --> 00:06:40.560
Or do you think we might?

115
00:06:40.560 --> 00:06:42.853
And again, if you don't get it,
it's totally OK,

116
00:06:42.853 --> 00:06:45.790
because you'd have to know Terraform
to kind of understand this.

117
00:06:45.790 --> 00:06:48.630
But there is actually a problem
in my code right now.

118
00:06:48.630 --> 00:06:53.610
There's something in here that's not
fully ready for these four loops yet.

119
00:06:53.610 --> 00:06:56.750
&gt;&gt; It doesn't know which project
belongs to which workspace.

120
00:06:56.750 --> 00:06:59.170
&gt;&gt; You've clearly used Terraform before,
yeah.

121
00:06:59.170 --> 00:07:04.707
So the problem here is is that
we have module.project ID right,

122
00:07:04.707 --> 00:07:09.422
but what do you think terraform
is gonna do with this for

123
00:07:09.422 --> 00:07:12.514
loop when we have it named project?

124
00:07:15.558 --> 00:07:19.860
What TerraForm actually ends up
doing is something kind of cool.

125
00:07:19.860 --> 00:07:25.325
Project goes from this to this.

126
00:07:30.608 --> 00:07:35.415
The reason why we can do this
is because we're leaning on that

127
00:07:35.415 --> 00:07:38.160
key value approach, right.

128
00:07:38.160 --> 00:07:46.200
We know that the name of the project
we're gonna create is ECI Project.

129
00:07:46.200 --> 00:07:48.520
Now a little bit more magic here.

130
00:07:48.520 --> 00:07:53.982
If we go back to our main,
whenever you iterate over a module or

131
00:07:53.982 --> 00:07:59.270
any type of resource,
it keeps the main base name.

132
00:07:59.270 --> 00:08:03.124
Right it'll keep the main base name,
but it's got to have uniqueness for

133
00:08:03.124 --> 00:08:04.860
any of the other values.

134
00:08:04.860 --> 00:08:08.688
So, again, it leans on that map key
value approach and then it says,

135
00:08:08.688 --> 00:08:12.912
all right, well, I'll tell you what,
in this case, we'll just nest it so

136
00:08:12.912 --> 00:08:15.360
that you can target
which project you want.

137
00:08:15.360 --> 00:08:20.260
And because we have this naming
convention in place that we know,

138
00:08:20.260 --> 00:08:25.248
that the key is gonna be the resource
name, then we can dynamically

139
00:08:25.248 --> 00:08:30.238
tell TerraForm, hey,
when you load in the fem-eci-project and

140
00:08:30.238 --> 00:08:34.370
you have that populated,
give me that ID, right?

141
00:08:34.370 --> 00:08:37.394
This is why in the future
when we have more projects,

142
00:08:37.394 --> 00:08:40.763
we can actually assign them
to different workspaces, and

143
00:08:40.763 --> 00:08:45.390
we don't have to be worried about
dependencies or anything like that, right?

144
00:08:46.610 --> 00:08:48.820
So this is the last little bit.

145
00:08:48.820 --> 00:08:50.432
And again, if we open up both sides,

146
00:08:50.432 --> 00:08:52.885
just make sure you've got
your code looking like that.

147
00:08:54.393 --> 00:08:58.460
&gt;&gt; So if you were to add
a second project in Workspace,

148
00:08:58.460 --> 00:09:04.170
you would change both fem-eci project
up there and in the workspace?

149
00:09:04.170 --> 00:09:05.220
&gt;&gt; Exactly, yeah.

150
00:09:05.220 --> 00:09:08.030
So let me give a little
bit of a further example.

151
00:09:08.030 --> 00:09:13.100
So say if I wanted another project,
I'd go like this,

152
00:09:13.100 --> 00:09:16.973
right, and say this is example, right?

153
00:09:16.973 --> 00:09:20.364
And say if I wanted another workspace,
Geez.

154
00:09:20.364 --> 00:09:24.130
I'm fat fingering here.

155
00:09:24.130 --> 00:09:28.260
I'd grab this, paste this in, right?

156
00:09:28.260 --> 00:09:33.820
And then call this example right now.

157
00:09:33.820 --> 00:09:35.461
Right now, if I just do that,

158
00:09:35.461 --> 00:09:39.530
both workspaces are gonna go
into the same project, right.

159
00:09:39.530 --> 00:09:42.386
But if I go here and I say example,

160
00:09:42.386 --> 00:09:47.700
now that project will go into
the example workspace, right?

161
00:09:47.700 --> 00:09:51.838
This is the configuration domain that
we're trying to create for ourselves.

162
00:09:51.838 --> 00:09:53.760
Yes.

163
00:09:53.760 --> 00:09:57.309
&gt;&gt; I was thinking, so
if we had three projects and

164
00:09:57.309 --> 00:10:02.230
two workspaces it wouldn't It
would only make two workspaces.

165
00:10:02.230 --> 00:10:04.900
It wouldn't make two workspaces for
each project.

166
00:10:04.900 --> 00:10:09.730
&gt;&gt; No, it wouldn't do that unless
you then went into here, right?

167
00:10:09.730 --> 00:10:11.520
Because here's where we're iterating,
right?

168
00:10:11.520 --> 00:10:14.270
And you can't actually do four and
fours, right?

169
00:10:14.270 --> 00:10:16.434
And we're gonna do that later
towards the end of the class.

170
00:10:16.434 --> 00:10:19.077
But yeah,
you can't actually do four and fours.

171
00:10:19.077 --> 00:10:22.880
So 5,000 foot it real quick.

172
00:10:22.880 --> 00:10:26.033
If you had an array of environments,
an array of services,

173
00:10:26.033 --> 00:10:29.376
then you could technically deploy
all of your services to all of

174
00:10:29.376 --> 00:10:32.810
your environments by just
iterating over those two arrays.

175
00:10:32.810 --> 00:10:35.810
And again, that is a bit of a spoiler for
something we're gonna do later.

