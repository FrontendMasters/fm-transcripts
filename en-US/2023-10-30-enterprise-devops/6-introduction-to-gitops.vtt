WEBVTT

1
00:00:00.000 --> 00:00:03.098
All right, so Introduction to GitOps,
what is GitOps even mean?

2
00:00:03.098 --> 00:00:08.023
Before I even go into it,
can anyone maybe guess what GitOps means?

3
00:00:08.023 --> 00:00:11.666
&gt;&gt; Automation of operations
through version control.

4
00:00:11.666 --> 00:00:14.127
&gt;&gt; Automation of operations
through version control.

5
00:00:14.127 --> 00:00:15.963
Yeah, it sounds like you
might have known it was.

6
00:00:15.963 --> 00:00:22.534
[LAUGH] Vietnam kidding,
yeah, that's pretty accurate.

7
00:00:22.534 --> 00:00:26.853
Again we asked another quote from AI and
it said, if you don't know what you did

8
00:00:26.853 --> 00:00:30.199
you can't do it again,
that's its description of GitOps.

9
00:00:30.199 --> 00:00:34.863
It's actually a pretty good description
[LAUGH], and I really liked it so

10
00:00:34.863 --> 00:00:35.867
I just kept it.

11
00:00:35.867 --> 00:00:39.478
But what is GitOps again
as defined by AI better?

12
00:00:39.478 --> 00:00:44.045
GitOps is a paradigm or a set of practices
that emphasizes using Git as a single

13
00:00:44.045 --> 00:00:48.348
source of truth for the declarative
infrastructure and applications.

14
00:00:48.348 --> 00:00:51.571
All right, so as I mentioned down at
the bottom, pretty much GitOps is

15
00:00:51.571 --> 00:00:54.976
a way to manage infrastructure and
applications using Git, that's it.

16
00:00:54.976 --> 00:00:59.010
So if you've ever used Git before,
GitOps is commit, push,

17
00:00:59.010 --> 00:01:00.804
all that kind of fun stuff.

18
00:01:00.804 --> 00:01:02.644
So what can GitOps provide?

19
00:01:02.644 --> 00:01:06.624
So I'm not using GitOps right now,
why should I care, right?

20
00:01:06.624 --> 00:01:10.050
Well, starters it gives you
infrastructure as code.

21
00:01:10.050 --> 00:01:14.502
Does anyone here not use
infrastructures code right now their

22
00:01:14.502 --> 00:01:18.018
companies like clicking
moving things around?

23
00:01:18.018 --> 00:01:20.759
Okay, yeah, okay, no worries, no worries.

24
00:01:20.759 --> 00:01:24.687
So I think with that kinda situation,

25
00:01:24.687 --> 00:01:29.239
the biggest challenge is culture, right?

26
00:01:29.239 --> 00:01:35.128
How do we move to this when we're so
used to this, right?

27
00:01:35.128 --> 00:01:40.115
That is something I think is important
to break, because when you have

28
00:01:40.115 --> 00:01:45.878
infrastructure as code It works the same
way like your applications do, right?

29
00:01:45.878 --> 00:01:51.603
You have a trackable history, you have the
ability of approving and denying things

30
00:01:51.603 --> 00:01:57.168
basically just stepping into the IaC
infrastructures code world, immediately

31
00:01:57.168 --> 00:02:02.101
standardizes how you do everything
else to the way you do that, right?

32
00:02:02.101 --> 00:02:03.780
So you get automated deployments.

33
00:02:03.780 --> 00:02:05.128
Why do you get automated deployments?

34
00:02:05.128 --> 00:02:08.240
Because we already do automated
deployments with services, right?

35
00:02:08.240 --> 00:02:13.490
So it's the same principle, it's just
running in a different pipeline, right?

36
00:02:13.490 --> 00:02:15.548
Reproducibility and rollbacks.

37
00:02:15.548 --> 00:02:16.940
So I'm sure quite often or

38
00:02:16.940 --> 00:02:21.309
sometimes you've even dealt with this
where you've had to roll something back,

39
00:02:21.309 --> 00:02:24.683
and then you've been, boy [LAUGH],
how do I do this, right?

40
00:02:24.683 --> 00:02:31.155
Well, with Git, you can literally just
say, here's the commit, go back to that.

41
00:02:31.155 --> 00:02:32.933
And that can be really helpful.

42
00:02:32.933 --> 00:02:37.978
How do you make it so
that people care about that?

43
00:02:37.978 --> 00:02:39.279
Because that's the important part.

44
00:02:39.279 --> 00:02:42.304
If we're not using it,
how do you make people care about that?

45
00:02:42.304 --> 00:02:45.757
Exemplify the problems that
they've dealt with and

46
00:02:45.757 --> 00:02:48.041
show them how GitOps can solve it.

47
00:02:48.041 --> 00:02:51.849
&gt;&gt; Do it by hand a few times
&gt;&gt; Sure, yeah POC it if you need to, but

48
00:02:51.849 --> 00:02:56.371
the main point is is like you might
have to do some convincing, but

49
00:02:56.371 --> 00:03:01.488
if you can show people how it solves
the problems it gives that more value.

50
00:03:01.488 --> 00:03:04.237
And then yeah enhance
collaboration as well, right,

51
00:03:04.237 --> 00:03:08.181
when you're clicking around in a console
and things like that it's just you,

52
00:03:08.181 --> 00:03:11.367
you know what I mean,
unless somebody's sitting next to you.

53
00:03:11.367 --> 00:03:15.079
It's not I can pull a co-worker over and
be,

54
00:03:15.079 --> 00:03:19.197
can you review my clicked
changes that I just did?

55
00:03:19.197 --> 00:03:23.016
But in a GitOps approach,
you can actually say, here's the PR,

56
00:03:23.016 --> 00:03:28.093
here's the changes, please review them,
please tell me what you think, excuse me.

57
00:03:28.093 --> 00:03:35.016
And a lot of software engineering is just
about good collaboration, that's it.

58
00:03:35.016 --> 00:03:37.582
Just really good collaboration and
working together.

59
00:03:37.582 --> 00:03:43.502
So if you do not know what infrastructure
as code is or IaC, infrastructure and

60
00:03:43.502 --> 00:03:47.987
application configurations
are stored in a repository and

61
00:03:47.987 --> 00:03:51.755
versioned for complete history,
this allows for

62
00:03:51.755 --> 00:03:56.170
changes to be tracked and
reviewed, as I just mentioned.

63
00:03:56.170 --> 00:04:01.004
Those two words, tracking and reviewing,

64
00:04:01.004 --> 00:04:07.024
are crucial to scaling any
enterprise organization.

65
00:04:07.024 --> 00:04:11.985
If you cannot track and review every
change you make, then I guarantee you

66
00:04:11.985 --> 00:04:16.798
there are changes being made underneath
you that you do not know about.

67
00:04:16.798 --> 00:04:21.185
And they could also do what
is the most worrying part,

68
00:04:21.185 --> 00:04:27.829
exploits vulnerabilities, things
forgotten, right, all that kinda stuff.

69
00:04:27.829 --> 00:04:33.639
So trackability and reviewing is crucial
when you are talking 100, 50 people,

70
00:04:33.639 --> 00:04:39.220
whatever, making changes, passing those
changes along, and stuff like that.

71
00:04:39.220 --> 00:04:41.247
So automated deployments with GitOps,

72
00:04:41.247 --> 00:04:45.070
this is very similar to how automated
deployments work with your services.

73
00:04:45.070 --> 00:04:48.928
This is one of the reasons why it makes
it so nice because you already know if

74
00:04:48.928 --> 00:04:52.166
you've already solved the problem
of a pipeline and GitHub or

75
00:04:52.166 --> 00:04:56.540
Git, whatever, it's just the same thing,
you're just using a different tool.

76
00:04:56.540 --> 00:04:59.370
They're potentially different
credentials and stuff like that.

77
00:04:59.370 --> 00:05:05.130
But it ensures that the live
environment matches the repo state.

78
00:05:05.130 --> 00:05:08.450
Now there's a term for this and
it's called reconciliation.

79
00:05:08.450 --> 00:05:13.494
The concept is that when you make
a change, the service at some point,

80
00:05:13.494 --> 00:05:16.930
so it should somehow
reconcile itself to that.

81
00:05:16.930 --> 00:05:18.272
And do you do that?

82
00:05:18.272 --> 00:05:20.998
No, it's automatic, right?

83
00:05:20.998 --> 00:05:27.925
All you do is, again, you hit the boat,
let it float out into the ocean, right?

84
00:05:27.925 --> 00:05:32.222
So deploying quickly and
reliably is crucial to scaling.

85
00:05:32.222 --> 00:05:37.136
If you have an hour deployment times,
you're not gonna be able to scale well,

86
00:05:37.136 --> 00:05:40.722
you're just not,
what happens when you need to revert?

87
00:05:40.722 --> 00:05:43.280
Does that mean that your revert
takes an hour as well, right?

88
00:05:43.280 --> 00:05:48.599
These are the kind of things that
GitOps can help with moving faster.

89
00:05:48.599 --> 00:05:52.548
With reproducibility and rollbacks,
since all the changes are tracked in Git,

90
00:05:52.548 --> 00:05:54.590
it's easy to roll back and roll forward.

91
00:05:54.590 --> 00:05:56.821
You can even do tagging,
where you can say,

92
00:05:56.821 --> 00:06:00.516
our infrastructure was tagged at this,
V1, this is what it is, okay?

93
00:06:00.516 --> 00:06:04.685
Now if you choose here, okay,
we patched it so forth and so on.

94
00:06:04.685 --> 00:06:08.837
And because of this, you can revert and
recreate things really quickly.

95
00:06:08.837 --> 00:06:13.639
And this is another crucial thing to
trying to scale is if you can't save,

96
00:06:13.639 --> 00:06:18.145
save an outage happens or a cluster
goes down or something like that.

97
00:06:18.145 --> 00:06:22.305
And if you can't get that back in
a reasonable amount of time you are,

98
00:06:22.305 --> 00:06:25.408
forced to make an announcement and
a maintenance.

99
00:06:25.408 --> 00:06:28.997
You have to tell your audience at that
point, because here's what happens,

100
00:06:28.997 --> 00:06:32.414
if you don't, and all of your services
go down and you do not update them,

101
00:06:32.414 --> 00:06:35.920
everybody's gonna do the same thing
that you do with every other company.

102
00:06:35.920 --> 00:06:38.610
This company sucks they don't
tell us anything, forget that.

103
00:06:38.610 --> 00:06:43.628
That's the other part of the
responsibility, is if you don't have good

104
00:06:43.628 --> 00:06:49.141
revert and rollback, you're gonna have
to set those expectations properly,

105
00:06:49.141 --> 00:06:52.947
otherwise, it could hurt you
in other places as well.

106
00:06:52.947 --> 00:06:57.711
Then yeah, the enhanced collaboration
part, especially if you're on a small team

107
00:06:57.711 --> 00:07:02.022
of five people, it's really hard to
collaborate, and I get that, right?

108
00:07:02.022 --> 00:07:04.561
If you are a one-man owner, I get that.

109
00:07:04.561 --> 00:07:08.664
And you might be like, Well, hey,
why should I go through all this PR review

110
00:07:08.664 --> 00:07:12.834
process and stuff like that if I'm just
one person because you're a person,

111
00:07:12.834 --> 00:07:15.163
[LAUGH] that's why because you're human.

112
00:07:15.163 --> 00:07:19.977
And you will probably make a mistake at
some point that if you do not review your

113
00:07:19.977 --> 00:07:22.954
own changes you will probably miss and
forget.

114
00:07:22.954 --> 00:07:27.957
So whether the collaboration is for
you and other people, or just you and

115
00:07:27.957 --> 00:07:32.632
you [LAUGH], it does help for
changes to be made basically by anyone in

116
00:07:32.632 --> 00:07:38.556
the organization with proper permissions
and being able to properly validate that.

117
00:07:38.556 --> 00:07:41.518
I can go into any repo I want and
make a change, but

118
00:07:41.518 --> 00:07:46.070
it won't get merged until an approver
on that repo goes in and says, okay,

119
00:07:46.070 --> 00:07:49.494
cool, lemme approve your PR and
then it can get merged.

120
00:07:49.494 --> 00:07:53.413
So empowering individuals to
contribute is crucial to scaling,

121
00:07:53.413 --> 00:07:56.061
especially in the circumstances of fires.

122
00:07:56.061 --> 00:07:59.102
If somebody can hop on,
even if a developer can hop in and

123
00:07:59.102 --> 00:08:03.207
make a quick change, it's very helpful
when you've got your hands tied.

124
00:08:03.207 --> 00:08:04.047
Yeah, go ahead.

125
00:08:04.047 --> 00:08:07.097
&gt;&gt; So enhance collaboration is
not just like interpersonal, but

126
00:08:07.097 --> 00:08:09.350
also intertemporal with future and
past you.

127
00:08:09.350 --> 00:08:13.168
&gt;&gt; Absolutely, yeah,
I mean it' sounds weird to say but

128
00:08:13.168 --> 00:08:17.656
you're just building guard so
you don't hurt yourself later.

129
00:08:17.656 --> 00:08:22.276
And going back to that earlier one
where I said I block main on my own

130
00:08:22.276 --> 00:08:23.962
branches that's why.

131
00:08:23.962 --> 00:08:28.314
Is because I could merge something
without thinking about it go to bed wake

132
00:08:28.314 --> 00:08:32.190
up the next day and
then everything's down and I'm like gosh.

133
00:08:32.190 --> 00:08:38.298
So yes it's more work but
is it really besides sleep that you want,

134
00:08:38.298 --> 00:08:42.020
[LAUGH], so that's the other part of it.

135
00:08:42.020 --> 00:08:46.063
So, the TLDR for GitOps is essentially
with GitOps, if you wanna know the current

136
00:08:46.063 --> 00:08:49.355
state of your system or how it looks,
you just look in the Git repo.

137
00:08:49.355 --> 00:08:53.204
And the TLDR of the TLDR of that [LAUGH]
is if you wanna change the system,

138
00:08:53.204 --> 00:08:54.390
you change the repo.

139
00:08:54.390 --> 00:08:56.446
That's it, that is GitOps.

140
00:08:56.446 --> 00:08:59.790
If you wanna change the system,
you change the repo.

141
00:08:59.790 --> 00:09:01.682
Really nothing else outside of that.

