WEBVTT

1
00:00:00.000 --> 00:00:02.640
So this is my beautiful wireframe.

2
00:00:04.400 --> 00:00:10.434
It looks daunting, but I promise you
it is not, it's just very modularized.

3
00:00:10.434 --> 00:00:14.355
And it helped to understand
the flow of automation and

4
00:00:14.355 --> 00:00:20.470
essentially from top down the dependencies
that are required to get to the bottom.

5
00:00:22.000 --> 00:00:26.931
So we've talked about
automation providers,

6
00:00:26.931 --> 00:00:31.128
we've talked about automation tools.

7
00:00:31.128 --> 00:00:36.474
We've talked about repository,
source code providers and

8
00:00:36.474 --> 00:00:40.994
networks, and
we've talked about a lot, right?

9
00:00:40.994 --> 00:00:43.590
How do you merge all that together?

10
00:00:43.590 --> 00:00:49.110
How do you blend all of that together
into a way that it makes sense,

11
00:00:49.110 --> 00:00:51.870
that it feels easy to manage, and

12
00:00:51.870 --> 00:00:56.424
it's something that you can
scale on as well, right?

13
00:00:56.424 --> 00:01:02.310
And so what we're trying to do is we're
trying to take the LEGOs approach.

14
00:01:02.310 --> 00:01:08.305
We're trying to say, okay, well, what are
the components that I need that change or

15
00:01:08.305 --> 00:01:12.491
affect the different parts
of my infrastructure, right?

16
00:01:12.491 --> 00:01:17.700
If I have networks, I need to
figure out how to create networks.

17
00:01:17.700 --> 00:01:21.491
If I have clusters, I need to figure
out how to create clusters, right,

18
00:01:21.491 --> 00:01:22.498
things like that.

19
00:01:22.498 --> 00:01:27.284
And so where we start first is all
the way at the top, Terraform Cloud.

20
00:01:27.284 --> 00:01:29.815
And again,
this is why we wanna make accounts for

21
00:01:29.815 --> 00:01:33.410
Terraform Cloud because this is
where we're actually gonna begin.

22
00:01:33.410 --> 00:01:38.480
And the reason for that is because this is
where all of our state's gonna go, right?

23
00:01:38.480 --> 00:01:43.351
So going back to the whole Pulumi and
other things like that.

24
00:01:43.351 --> 00:01:47.942
There's a reason why Terraform Cloud,
again, is so nice, and

25
00:01:47.942 --> 00:01:50.246
it's out of the box solutions.

26
00:01:50.246 --> 00:01:54.870
I don't have to set up Terraform Cloud,
really, I can just start working with it.

27
00:01:54.870 --> 00:01:58.323
And so in this case,
that's where we start, right?

28
00:01:58.323 --> 00:02:02.950
The next thing that we do is we solve the
next problem we talked about, permissions.

29
00:02:02.950 --> 00:02:05.037
Permissions in access control, right?

30
00:02:05.037 --> 00:02:07.458
So we don't immediately start saying,
okay,

31
00:02:07.458 --> 00:02:10.470
let's create all of our resources and
automation.

32
00:02:10.470 --> 00:02:12.833
We say, okay, we have two teams.

33
00:02:12.833 --> 00:02:15.826
We have our DevOps team,
this is the isolation and

34
00:02:15.826 --> 00:02:18.689
the scope of which that they maintain,
right?

35
00:02:18.689 --> 00:02:20.220
And then here's the product team.

36
00:02:20.220 --> 00:02:26.214
And I hope you see what I meant by what
you give developers access to [LAUGH] and

37
00:02:26.214 --> 00:02:30.000
what you give DevOps access to, right?

38
00:02:30.000 --> 00:02:34.979
And you can even see, DevOps even still
touches things that developers do.

39
00:02:34.979 --> 00:02:40.166
But developers in the product teams
have access to manage their services,

40
00:02:40.166 --> 00:02:42.153
we manage everything else.

41
00:02:42.153 --> 00:02:44.450
And so our teams are really important,
right?

42
00:02:44.450 --> 00:02:47.071
That's the next thing that we provision.

43
00:02:47.071 --> 00:02:53.600
Then in the third layer, we have what are
called our automation repositories, right?

44
00:02:53.600 --> 00:02:57.438
And so these are the repositories
that we will be building.

45
00:02:57.438 --> 00:03:01.630
There's one, two, three, four, five,
I think there's one more, six in total.

46
00:03:01.630 --> 00:03:06.874
But the five infrastructure components
that we're gonna be building are, one,

47
00:03:06.874 --> 00:03:12.051
at least should be very straightforward,
and two, reusable across any cloud.

48
00:03:12.051 --> 00:03:15.363
Okay, so I'm not saying that
the code inside is reusable,

49
00:03:15.363 --> 00:03:19.749
I'm saying that the modularity and
the way that we build these components is.

50
00:03:19.749 --> 00:03:22.952
Meaning that a provider
network should mean that you

51
00:03:22.952 --> 00:03:25.661
should have a AWS network automation repo.

52
00:03:25.661 --> 00:03:31.210
You should have a GCP repo for automation,
right, for network, so forth and so on.

53
00:03:31.210 --> 00:03:36.168
And so with that mentality, the first
thing we do is we actually create one for

54
00:03:36.168 --> 00:03:39.922
tfe, which is Terraform Enterprise or
Terraform Cloud.

55
00:03:39.922 --> 00:03:43.260
Now, why do we do that and
why don't we go to source code?

56
00:03:43.260 --> 00:03:46.436
Can anyone guess why we
might make a repository for

57
00:03:46.436 --> 00:03:49.014
Terraform Cloud's automation first?

58
00:03:53.210 --> 00:03:57.327
So the main reason is so that we don't
have to redo it later, [LAUGH] right?

59
00:03:57.327 --> 00:04:01.025
If you start provisioning everything
with automation in the beginning,

60
00:04:01.025 --> 00:04:03.062
then everything is automated, right?

61
00:04:03.062 --> 00:04:07.931
And so before we even go into Terraform
Cloud and start creating teams manually,

62
00:04:07.931 --> 00:04:13.310
which is something you might think to do,
we ask ourselves the question.

63
00:04:13.310 --> 00:04:16.648
Can we automate this process actually,
too?

64
00:04:16.648 --> 00:04:21.568
Could I actually make teams in
Terraform and have it manage that way?

65
00:04:21.568 --> 00:04:24.800
And so that's what we do,
we create our first repository,

66
00:04:24.800 --> 00:04:27.139
which is our terraform-tfe repository.

67
00:04:27.139 --> 00:04:31.897
And the whole sole purpose of this repo is
to just go back up to Terraform Cloud and

68
00:04:31.897 --> 00:04:34.394
provision all the things for us, right?

69
00:04:34.394 --> 00:04:39.234
So what we actually do is we create
a Terraform Cloud account, right?

70
00:04:39.234 --> 00:04:43.047
And then we set up our first
workspace to make it so

71
00:04:43.047 --> 00:04:46.861
that it can essentially manage itself,
right?

72
00:04:46.861 --> 00:04:51.505
And then what we do is instead of
coming here to make our changes,

73
00:04:51.505 --> 00:04:54.440
right, GitOps, we come here, right?

74
00:04:54.440 --> 00:04:57.721
So if I wanna add a new
team to Terraform Cloud,

75
00:04:57.721 --> 00:05:00.340
what would I do in a GitOps approach?

76
00:05:00.340 --> 00:05:02.414
&gt;&gt; Just add them to the base repo.

77
00:05:02.414 --> 00:05:06.164
&gt;&gt; Yep, and then do what?

78
00:05:06.164 --> 00:05:07.467
&gt;&gt; Provision access, I guess.

79
00:05:07.467 --> 00:05:09.795
&gt;&gt; Yeah, merge and then let it run, yeah.

80
00:05:09.795 --> 00:05:13.060
So the idea is that if I went here,
I don't know who did it,

81
00:05:13.060 --> 00:05:16.939
I don't know when they added the team,
I don't know how they did it.

82
00:05:16.939 --> 00:05:17.715
You know what I mean?

83
00:05:17.715 --> 00:05:20.548
There's no real auditable track here.

84
00:05:20.548 --> 00:05:24.395
But if we create our Terraform Cloud
account and then we just say, okay,

85
00:05:24.395 --> 00:05:28.639
everything's automated, we lean into
that source of truth right at the gate.

86
00:05:28.639 --> 00:05:33.375
And we say not only is all of our other
stuff managed through automation, but

87
00:05:33.375 --> 00:05:38.040
also our Terraform Cloud automation
is actually in the same boat, right?

88
00:05:38.040 --> 00:05:39.885
So that's where we start.

89
00:05:39.885 --> 00:05:45.132
Once we have automation for this,
we can create teams in Terraform Cloud,

90
00:05:45.132 --> 00:05:50.060
and we can create the next thing,
which is called workspaces, okay?

91
00:05:50.060 --> 00:05:54.160
So workspaces are essentially
your automation pipelines for

92
00:05:54.160 --> 00:05:58.353
the specific component that
you're trying to build, right?

93
00:05:58.353 --> 00:06:02.083
So if I was to say,
I want my automation for

94
00:06:02.083 --> 00:06:06.668
Terraform Cloud to be
managed by this repository,

95
00:06:06.668 --> 00:06:13.510
then I probably need a workspace for
that repository to be tracked, right?

96
00:06:13.510 --> 00:06:18.353
And that's the real takeaway here,
is each one of these tracks,

97
00:06:18.353 --> 00:06:22.240
as you see down below,
its own repo as well, right?

98
00:06:22.240 --> 00:06:27.091
And then that's the lowest part of it,
which is once we set up

99
00:06:27.091 --> 00:06:32.037
our workspaces, we tell our
workspaces to go out to GitHub and

100
00:06:32.037 --> 00:06:36.337
manage and
sync them from the repo that we're using.

101
00:06:36.337 --> 00:06:39.570
So I'm gonna ask some questions here.

102
00:06:39.570 --> 00:06:42.516
Actually, let me get through this
first and then I'll ask my questions.

103
00:06:42.516 --> 00:06:47.357
So again, I've got my Terraform
automation now, right?

104
00:06:47.357 --> 00:06:50.481
So my next question actually would be,

105
00:06:50.481 --> 00:06:54.559
where would I go if I wanted
to make a new workspace?

106
00:06:56.367 --> 00:06:59.151
Would I go here?

107
00:06:59.151 --> 00:07:00.471
Go here?

108
00:07:00.471 --> 00:07:03.280
Yes, yeah, I would go here, right?

109
00:07:03.280 --> 00:07:07.241
Because again, although this is
what we set up, Terraform Cloud,

110
00:07:07.241 --> 00:07:11.629
this is now the source of truth,
meaning technically we actually go here.

111
00:07:11.629 --> 00:07:15.800
We go down to the repo,
we follow our normal GitHub's procedures.

112
00:07:15.800 --> 00:07:18.934
And then once we merge,
it goes back up, and then it runs and

113
00:07:18.934 --> 00:07:22.716
runs against Terraform Cloud like this,
and that's the actual flow.

114
00:07:22.716 --> 00:07:26.457
So we make our changes here, goes back up,
and then this workspace goes out to

115
00:07:26.457 --> 00:07:29.580
Terraform Cloud, creates the DevOps team,
the product team.

116
00:07:29.580 --> 00:07:34.157
And then because we have
this cycle now right here,

117
00:07:34.157 --> 00:07:37.677
right, we can now build other things.

118
00:07:37.677 --> 00:07:43.193
So then we create our GitHub workspace,
we create our provider network workspace,

119
00:07:43.193 --> 00:07:48.820
our provider cluster workspace,
and our product service workspace.

120
00:07:48.820 --> 00:07:53.599
So my next question is,
where would I want to

121
00:07:53.599 --> 00:07:57.746
go if I wanted to update GitHub repos?

122
00:07:57.746 --> 00:08:01.209
I wanna add a new GitHub repo,
where would I go?

123
00:08:01.209 --> 00:08:02.607
&gt;&gt; Same place.

124
00:08:02.607 --> 00:08:04.419
&gt;&gt; Same place, here?

125
00:08:06.127 --> 00:08:08.644
Here, no.

126
00:08:08.644 --> 00:08:16.430
So technically, the only thing that this
manages is Terraform Cloud resources.

127
00:08:16.430 --> 00:08:20.147
This is where we start separating
the automation from each other.

128
00:08:20.147 --> 00:08:25.590
And so what we say is we say, here
everything is managed by Terraform Cloud,

129
00:08:25.590 --> 00:08:29.540
and here everything is managed for GitHub.

130
00:08:29.540 --> 00:08:34.171
Now, if you have a scenario where
you wanna create a workspace

131
00:08:34.171 --> 00:08:38.459
that tracks a repo,
do you have to make one change or two?

132
00:08:38.459 --> 00:08:39.338
What do you think?

133
00:08:41.390 --> 00:08:44.992
So I wanna create a workspace and
a repo with automation,

134
00:08:44.992 --> 00:08:47.777
where do you guys think
I would go to do that?

135
00:08:47.777 --> 00:08:51.953
We said that we create
workspaces in which repo?

136
00:08:51.953 --> 00:08:55.025
&gt;&gt; In the first one, so
you have to make it in two places.

137
00:08:55.025 --> 00:08:58.500
&gt;&gt; Exactly, yes,
you would have to make it in two places.

138
00:08:58.500 --> 00:09:02.943
You would first make it in terraform-tfe
to create the workspace and automation,

139
00:09:02.943 --> 00:09:04.475
get that approved, right?

140
00:09:04.475 --> 00:09:07.130
That goes out, creates your workspace.

141
00:09:07.130 --> 00:09:10.826
And then you go to GitHub and then you
create your repository to then get tracked

142
00:09:10.826 --> 00:09:13.355
for that workspace, or
you could do it any other way.

143
00:09:13.355 --> 00:09:15.286
You could create the repository first and

144
00:09:15.286 --> 00:09:18.530
then have the workspace track the repo,
right?

145
00:09:18.530 --> 00:09:21.404
This is a decision.

146
00:09:21.404 --> 00:09:25.284
The reason why I make this
decision is because I don't want

147
00:09:25.284 --> 00:09:29.970
automation to dynamically create and
delete my repositories for me.

148
00:09:31.130 --> 00:09:33.391
Can anyone guess why
that might be terrifying?

149
00:09:33.391 --> 00:09:39.175
[LAUGH] Basically, you just make
sure you don't lose any code.

150
00:09:39.175 --> 00:09:44.909
[LAUGH] If you bind your
repositories to other state,

151
00:09:44.909 --> 00:09:51.930
they're gonna go and
disappear essentially with that state.

152
00:09:51.930 --> 00:09:56.417
And so if somebody accidentally upstate
something somewhere else without

153
00:09:56.417 --> 00:10:01.343
realizing downstream, that's gonna
delete a repo, that's a bit terrifying.

154
00:10:01.343 --> 00:10:06.503
And so at Hippo, we choosingly
separate those processes just so

155
00:10:06.503 --> 00:10:09.760
that APIs cannot delete repositories.

156
00:10:09.760 --> 00:10:13.186
They can be archived, but
they cannot be deleted.

157
00:10:13.186 --> 00:10:14.727
And so yeah, in this case,

158
00:10:14.727 --> 00:10:19.085
what you would do is you would go to
terraform-tfe to create your workspace,

159
00:10:19.085 --> 00:10:22.790
and then you go to terraform-github
to create your repository.

160
00:10:24.720 --> 00:10:27.723
So we talked a bit about
multi-cloud as well, right?

161
00:10:27.723 --> 00:10:32.994
And the next two repos really
are about that concept of, okay,

162
00:10:32.994 --> 00:10:39.474
so we have a repo that focuses on a single
problem, which is Terraform Cloud.

163
00:10:39.474 --> 00:10:43.674
And we have another repo that focuses on
a single problem, which is GitHub, right?

164
00:10:43.674 --> 00:10:49.547
Well, now we need to focus on a specific
problem for a specific provider, right?

165
00:10:49.547 --> 00:10:52.392
But we don't wanna make it so
we can just work with that provider,

166
00:10:52.392 --> 00:10:55.961
we wanna make it so that if we want other
providers in the future, stuff like that,

167
00:10:55.961 --> 00:10:57.440
we wanna have that flexibility.

168
00:10:57.440 --> 00:10:58.583
So what do we do?

169
00:10:58.583 --> 00:10:59.783
Do we go into our repo and

170
00:10:59.783 --> 00:11:04.150
make a whole bunch of code and then
make a whole bunch of other code later?

171
00:11:04.150 --> 00:11:09.046
No, what we can do is we can use
Terraform's concept of modules,

172
00:11:09.046 --> 00:11:12.794
right, and
actually reuse those as workspaces.

173
00:11:12.794 --> 00:11:17.313
And so the idea is that what
you do is you create a network

174
00:11:17.313 --> 00:11:20.766
module that's just for Amazon, right?

175
00:11:20.766 --> 00:11:24.750
And then you create a workspace
with parameters for that network.

176
00:11:24.750 --> 00:11:27.982
Now, the idea is that this network,
it doesn't have a name,

177
00:11:27.982 --> 00:11:31.462
anything that's unique to that network,
it should not be there,

178
00:11:31.462 --> 00:11:33.716
those should be the configuration parts.

179
00:11:33.716 --> 00:11:37.155
And then when we use that
module with Terraform Cloud,

180
00:11:37.155 --> 00:11:42.630
we can tell it, hey, Terraform Cloud,
pass these values down to the module.

181
00:11:42.630 --> 00:11:47.876
And so what this effectively now
makes it is that in this scenario,

182
00:11:47.876 --> 00:11:51.259
going back to the whole repo and
two steps.

183
00:11:51.259 --> 00:11:52.793
This actually makes it so

184
00:11:52.793 --> 00:11:56.599
you only have to make one change
to create multiple networks.

185
00:11:57.870 --> 00:12:00.008
Does that make sense?

186
00:12:00.008 --> 00:12:05.580
Because the idea is you make it once, and
then you just reuse this repo over and

187
00:12:05.580 --> 00:12:09.716
over and over again for
all of your AWS networks, right?

188
00:12:09.716 --> 00:12:11.720
Now, here's the fun part.

189
00:12:11.720 --> 00:12:15.678
Say I wanna add something to all of
my networks, is that hard or easy?

190
00:12:19.009 --> 00:12:20.285
What do you guys think?

191
00:12:20.285 --> 00:12:23.229
Say I wanna add a tag to all
of my networks in Amazon,

192
00:12:23.229 --> 00:12:27.090
do you guys think that
would be difficult or easy?

193
00:12:27.090 --> 00:12:29.735
&gt;&gt; Easy.
&gt;&gt; Easy, why?

194
00:12:29.735 --> 00:12:31.569
&gt;&gt; It's-
&gt;&gt; Yep.

195
00:12:31.569 --> 00:12:32.757
&gt;&gt; One module.

196
00:12:32.757 --> 00:12:37.184
&gt;&gt; Exactly, yeah, that's the cool part
about this approach, is if you create five

197
00:12:37.184 --> 00:12:41.990
workspaces with five different networks,
they all track the same repository.

198
00:12:41.990 --> 00:12:46.281
So if you make a change to that one repo,
it will propagate and

199
00:12:46.281 --> 00:12:51.007
trigger pipelines for all of
the workspaces that track that repo.

200
00:12:51.007 --> 00:12:55.164
So this is the next part of why
this modularity is so nice.

201
00:12:55.164 --> 00:12:59.202
Because what you can then do is you
can say, okay, well, let's make it so

202
00:12:59.202 --> 00:13:02.150
everything in preproduction autoapplies,
right?

203
00:13:02.150 --> 00:13:04.218
So we can keep making changes,
keep testing things, and

204
00:13:04.218 --> 00:13:05.391
we don't have to touch things.

205
00:13:05.391 --> 00:13:09.543
But in prod, we will make sure
that those manual applies so

206
00:13:09.543 --> 00:13:14.305
that they go out in their own release
cycle with their own changes.

207
00:13:14.305 --> 00:13:15.832
And we can handle that better,

208
00:13:15.832 --> 00:13:18.790
making it easier to make
those changes to production.

209
00:13:18.790 --> 00:13:23.019
That concept right there is how
you build cloud infrastructure.

210
00:13:23.019 --> 00:13:27.746
That is really the sole part of making
it so that you can be multi-cloud,

211
00:13:27.746 --> 00:13:32.490
right, and making it so that you can
create resources very, very fast.

212
00:13:32.490 --> 00:13:36.392
And again,
you'll see how we do that here shortly.

213
00:13:36.392 --> 00:13:42.117
But then because we have this concept now,
we can apply it to other things.

214
00:13:42.117 --> 00:13:46.671
So we have a network now, so say I have
an Amazon network that I created, cool,

215
00:13:46.671 --> 00:13:48.742
now I wanna make an Amazon cluster.

216
00:13:48.742 --> 00:13:51.667
Well, would I add it to
the Amazon network repository?

217
00:13:51.667 --> 00:13:55.410
No, because I wanna make more than one
cluster potentially in the future.

218
00:13:55.410 --> 00:13:58.809
I wanna have a prod cluster, I wanna have
a dev cluster, right, things like that.

219
00:13:58.809 --> 00:14:03.549
So if it's reused more than once,
it should be a module, right?

220
00:14:03.549 --> 00:14:08.060
And if it's only used once,
it can just be a source repository.

221
00:14:08.060 --> 00:14:11.297
But you'll see how I'm
using both concepts here,

222
00:14:11.297 --> 00:14:14.996
where I'm saying these two,
they only manage one thing.

223
00:14:14.996 --> 00:14:19.990
So we don't need modularity or any crazy
thing there, they can just be that.

224
00:14:19.990 --> 00:14:24.218
But these ones, we need to make sure
can have names passed to them so

225
00:14:24.218 --> 00:14:28.236
that when we create a network,
it has a specific network name.

226
00:14:28.236 --> 00:14:32.228
When it's a cluster, we can tell which
environment that cluster's for, right,

227
00:14:32.228 --> 00:14:34.130
things like that.

228
00:14:34.130 --> 00:14:38.966
However, and again, because it's all
in one repo, when we wanna create

229
00:14:38.966 --> 00:14:43.266
a new cluster, we don't actually
have to go to this repo to do it.

230
00:14:43.266 --> 00:14:46.821
We now can lean on the power
of Terraform Cloud and

231
00:14:46.821 --> 00:14:50.301
just create a workspace
that tracks that repo.

232
00:14:50.301 --> 00:14:54.059
And the only difference between those
two workspaces are the parameters that

233
00:14:54.059 --> 00:14:57.430
are passed to the module underneath it,
that's it.

234
00:14:57.430 --> 00:15:02.386
So in five minutes, I can create a network
with over a thousand resources in

235
00:15:02.386 --> 00:15:07.122
it just because I'm reusing a module
that I've already made, right?

236
00:15:07.122 --> 00:15:11.809
Now, the last one, the product service
one, this one is a little interesting

237
00:15:11.809 --> 00:15:16.151
because this one actually kind of
merges both of them together, right?

238
00:15:16.151 --> 00:15:19.347
We said, okay,
we've got workspaces for one to one,

239
00:15:19.347 --> 00:15:25.150
we've got workspaces for one to many, but
what about workspaces for many to many?

240
00:15:25.150 --> 00:15:28.994
What about we have a scenario where I have
many services that have to go to many

241
00:15:28.994 --> 00:15:29.969
cloud providers?

242
00:15:29.969 --> 00:15:33.160
What do I do in that scenario, right?

243
00:15:33.160 --> 00:15:38.346
Well, and I will say this, it's a bit up
to you, there's two different approaches,

244
00:15:38.346 --> 00:15:41.775
you can take this, but
this is the one I'm taking for us.

245
00:15:41.775 --> 00:15:43.557
Which is in the last repo,

246
00:15:43.557 --> 00:15:49.320
we're actually creating a repo that will
handle service creation on any provider.

247
00:15:50.620 --> 00:15:56.845
And inside of that repo, we're going to
create reusable modules for each provider.

248
00:15:56.845 --> 00:16:00.818
Now, in this scenario,
the module isn't here, right,

249
00:16:00.818 --> 00:16:04.670
the module is actually in the repository.

250
00:16:04.670 --> 00:16:07.425
However, that's not the problem
we're trying to solve,

251
00:16:07.425 --> 00:16:10.961
we're just trying to deploy our services
not to a specific cloud provider.

252
00:16:10.961 --> 00:16:14.530
And this is where I say you can
kinda diverge here if you want.

253
00:16:14.530 --> 00:16:19.957
You could also say, AWS-product service.

254
00:16:19.957 --> 00:16:21.623
Can anyone tell me what that would mean?

255
00:16:24.068 --> 00:16:28.330
&gt;&gt; Product is an app, functionality,
whatever within the company.

256
00:16:28.330 --> 00:16:29.846
&gt;&gt; But it's on?

257
00:16:29.846 --> 00:16:30.972
&gt;&gt; It's in Terraform.

258
00:16:30.972 --> 00:16:32.494
&gt;&gt; No, it's on?

259
00:16:32.494 --> 00:16:34.336
&gt;&gt; You mean that the clopper
lighter that you choose?

260
00:16:34.336 --> 00:16:36.510
&gt;&gt; Yes, it's on Amazon, yeah.

261
00:16:36.510 --> 00:16:39.102
And so
what I can do is then I can say, okay,

262
00:16:39.102 --> 00:16:42.990
well, Amazon, Terraform product
service has a, I'm sorry,

263
00:16:42.990 --> 00:16:47.461
there's a module inside of the product
service repo for Amazon, right?

264
00:16:47.461 --> 00:16:52.140
And then there's also a module for
Google, right?

265
00:16:52.140 --> 00:16:56.758
And what we do is then we can say,
well, I have an array of services,

266
00:16:56.758 --> 00:17:00.015
all of these services use
all of these modules.

267
00:17:00.015 --> 00:17:04.093
And again, that might not
make a lot of sense yet, but

268
00:17:04.093 --> 00:17:08.809
the TLDR is that we're creating
modules in the repo instead of

269
00:17:08.809 --> 00:17:12.830
using a module directly
to reproduce things.

270
00:17:12.830 --> 00:17:17.512
And the main point is so that if we have
a bunch of services we wanna update all at

271
00:17:17.512 --> 00:17:21.276
once, this avoids us having to
create a bunch of workspaces.

272
00:17:21.276 --> 00:17:26.529
Cuz that's another alternative is you
can just create a project per service,

273
00:17:26.529 --> 00:17:31.240
or yeah, per service, but
then it's also per environment, right?

274
00:17:31.240 --> 00:17:35.061
Whereas we only really care about
environments more than services and

275
00:17:35.061 --> 00:17:35.973
environments.

276
00:17:35.973 --> 00:17:39.822
And so in this case, the single
repo solves the problem of saying,

277
00:17:39.822 --> 00:17:42.799
these are all the product services in dev,
right?

278
00:17:42.799 --> 00:17:46.595
These are all the product
services in staging, right?

279
00:17:46.595 --> 00:17:50.030
And then this is all their
automation inside of it.

280
00:17:50.030 --> 00:17:54.790
Questions, does anyone have any questions
on what you see in front of you?

281
00:17:54.790 --> 00:18:00.659
So the main takeaway here is that these
are components, they're reusable.

282
00:18:00.659 --> 00:18:05.544
And as long as we follow this methodology
of saying what problem are we trying to

283
00:18:05.544 --> 00:18:10.810
solve, then we can create components in
a way that they solve our problems, right?

284
00:18:10.810 --> 00:18:15.599
We said we needed networks,
there's our network module, right?

285
00:18:15.599 --> 00:18:18.040
We recreate networks with that module.

286
00:18:18.040 --> 00:18:21.102
We need clusters,
there's our cluster module.

287
00:18:21.102 --> 00:18:23.814
We recreate clusters with that module.

288
00:18:23.814 --> 00:18:27.974
We need services, cool, let's put all
the service automation in one repo,

289
00:18:27.974 --> 00:18:29.710
deploy that to an environment.

290
00:18:30.810 --> 00:18:31.381
What does that mean?

291
00:18:31.381 --> 00:18:36.505
That means that you can take one repo
of automation and deploy your entire

292
00:18:36.505 --> 00:18:41.213
service layer just based off of
the variables you give it, right?

293
00:18:41.213 --> 00:18:46.828
So this means that, again, when I'm ready
to deploy product service to staging,

294
00:18:46.828 --> 00:18:49.654
I just tell the workspace it's staging.

295
00:18:49.654 --> 00:18:52.223
That's it, that's all I need to do.

