WEBVTT

1
00:00:00.000 --> 00:00:03.424
Does anyone have any
questions about Terraform or

2
00:00:03.424 --> 00:00:05.797
Pulumi before I go forward, yes?

3
00:00:05.797 --> 00:00:08.858
&gt;&gt; Is there any kind of
testing framework for Pulumi?

4
00:00:08.858 --> 00:00:12.258
&gt;&gt; Good question, whichever one you want.

5
00:00:12.258 --> 00:00:16.731
[LAUGH] The reality of it is,
is because it's the language you're

6
00:00:16.731 --> 00:00:20.975
working on top of,
it can use those same test suites, right?

7
00:00:20.975 --> 00:00:26.108
So if you wanted to, you could say, all
right, well, you could actually do just

8
00:00:26.108 --> 00:00:31.182
testing with Pulumi if you really wanted
to, because it's just unit testing.

9
00:00:31.182 --> 00:00:33.619
You don't actually have to
create those resources.

10
00:00:33.619 --> 00:00:34.771
But you could say,

11
00:00:34.771 --> 00:00:39.307
okay, I have a module that handles all
of my, a common one is that I do a lot,

12
00:00:39.307 --> 00:00:43.920
which is called conventions, which is
just a file of all of my conventions.

13
00:00:43.920 --> 00:00:47.853
How I separate things,
how I uppercase and lowercase things.

14
00:00:47.853 --> 00:00:52.755
And then I have functions that
I just reuse in all of my code.

15
00:00:52.755 --> 00:00:56.167
Can I do that in Terraform?

16
00:00:56.167 --> 00:00:58.843
Not really,
that's a little bit more challenging.

17
00:00:58.843 --> 00:01:01.980
So when we go back to testing and
all that stuff, same thing applies.

18
00:01:01.980 --> 00:01:06.187
So it depends on the language,
but yeah, you totally can, yeah.

19
00:01:06.187 --> 00:01:09.560
&gt;&gt; Are there any workflow differences
between Terraform and Pulumi?

20
00:01:09.560 --> 00:01:15.039
&gt;&gt; The biggest workflow difference is
gonna be based off of the language.

21
00:01:15.039 --> 00:01:18.279
For example,
if you build Pulumi automation in Go,

22
00:01:18.279 --> 00:01:21.010
you actually have to
build that to a binary.

23
00:01:21.010 --> 00:01:25.296
It can't just read the Go code
like it can with TypeScript and

24
00:01:25.296 --> 00:01:29.260
things like that, and
that's because of how it works.

25
00:01:29.260 --> 00:01:32.763
When you do it with Pulumi,
you build it down to a binary, and

26
00:01:32.763 --> 00:01:37.400
then the CLI tool actually talks to that
binary, which is pretty interesting.

27
00:01:37.400 --> 00:01:43.427
Whereas with Terraform, it's still
the same process of install your packages,

28
00:01:43.427 --> 00:01:45.360
you still have to do that.

29
00:01:45.360 --> 00:01:49.490
But there's no package, again,
there's no package.json.

30
00:01:49.490 --> 00:01:54.051
There's no having to set up any
of that stuff really at all

31
00:01:54.051 --> 00:01:56.816
specific to the language, yeah.

32
00:01:56.816 --> 00:02:00.019
&gt;&gt; Do syntaxes change for Terraform and

33
00:02:00.019 --> 00:02:05.504
Pulumi based on the underlying
APIs from the cloud providers?

34
00:02:05.504 --> 00:02:07.792
&gt;&gt; Terraform, no, not really.

35
00:02:07.792 --> 00:02:10.949
Terraform is really good
at not changing stuff.

36
00:02:10.949 --> 00:02:14.174
They know that we
are a configuration-based system,

37
00:02:14.174 --> 00:02:17.622
if we change those configurations,
everything breaks.

38
00:02:17.622 --> 00:02:22.631
[LAUGH] And so Terraform does actually
do a really great job at this.

39
00:02:22.631 --> 00:02:27.761
With Pulumi, you're gonna always
have a bit more work to do,

40
00:02:27.761 --> 00:02:33.400
depending on the language and
the specific circumstance you pick.

41
00:02:33.400 --> 00:02:37.398
&gt;&gt; Is this scenario of potentially
migrating from one approach to the other,

42
00:02:37.398 --> 00:02:39.556
like going from Pulumi to Terraform, or

43
00:02:39.556 --> 00:02:42.100
relevant factor in choosing
one to start with?

44
00:02:42.100 --> 00:02:45.090
&gt;&gt; You should try and
avoid it, you really should.

45
00:02:45.090 --> 00:02:49.180
The reason for that is, is because
both of them maintain state, right?

46
00:02:49.180 --> 00:02:52.770
In the moment you provision something,
it's there, right?

47
00:02:52.770 --> 00:02:56.677
And now, Terraform or
Pulumi are tracking that state.

48
00:02:56.677 --> 00:03:01.456
So for us right now at Hippo,
we have probably like 30,

49
00:03:01.456 --> 00:03:06.350
40 Terraform Repos, and
they all have their own state.

50
00:03:06.350 --> 00:03:11.223
So if I wanted to move our
networks to Pulumi, for example,

51
00:03:11.223 --> 00:03:15.413
I would have to write
the automation identically so

52
00:03:15.413 --> 00:03:21.170
that when I apply it over in Pulumi,
it doesn't change for starters.

53
00:03:21.170 --> 00:03:25.731
And then the second thing I have
to do is I actually have to import

54
00:03:25.731 --> 00:03:30.220
those resources into my state,
because they exist, right?

55
00:03:30.220 --> 00:03:34.166
Otherwise, if I tell Pulumi to run it,
it's gonna try and create something that

56
00:03:34.166 --> 00:03:37.430
it doesn't know about, but
Terraform already created, right?

57
00:03:37.430 --> 00:03:43.554
So that's the caveat to moving from
one automation tool to another,

58
00:03:43.554 --> 00:03:50.110
is if you have existing state,
it can be very, very challenging, yeah.

59
00:03:50.110 --> 00:03:54.563
&gt;&gt; How sustainable is it having
infrastructure written in several

60
00:03:54.563 --> 00:03:57.449
different languages when using Pulumi,

61
00:03:57.449 --> 00:04:01.579
and when do you have a policy
around choosing one language?

62
00:04:01.579 --> 00:04:03.467
&gt;&gt; Yeah, you probably would.

63
00:04:03.467 --> 00:04:08.961
At Hippo,
our languages that I was like, guys,

64
00:04:08.961 --> 00:04:14.456
we got to pick, are Node.js,
Python, and Go.

65
00:04:14.456 --> 00:04:17.823
We have no interest in Rust, sorry.

66
00:04:17.823 --> 00:04:23.181
[LAUGH] We have no interest in Rust, and
we have no interest in Java, any of those

67
00:04:23.181 --> 00:04:28.319
other languages, because we've been
building on top of them for so long.

68
00:04:28.319 --> 00:04:32.901
So I think it does make sense to kinda
go to your team and be like, hey,

69
00:04:32.901 --> 00:04:37.170
yeah, feel free to use languages,
but maybe don't get crazy.

70
00:04:37.170 --> 00:04:43.539
[LAUGH] We have no infrastructure for,
again, maybe a specific language.

71
00:04:43.539 --> 00:04:47.726
Then that becomes what we
call at my work a snowflake,

72
00:04:47.726 --> 00:04:52.937
which is a unique experience that
then has to be managed on its own,

73
00:04:52.937 --> 00:04:55.837
does anyone know what that becomes?

74
00:04:55.837 --> 00:04:56.912
&gt;&gt; Tech debt [LAUGH].

75
00:04:56.912 --> 00:04:58.494
&gt;&gt; Yes, but it's also another word?

76
00:04:58.494 --> 00:04:59.194
&gt;&gt; Loser?

77
00:04:59.194 --> 00:05:01.769
&gt;&gt; Something knowledge.

78
00:05:01.769 --> 00:05:02.421
&gt;&gt; [INAUDIBLE] knowledge?

79
00:05:02.421 --> 00:05:03.402
&gt;&gt; Tribal knowledge?

80
00:05:03.402 --> 00:05:04.667
&gt;&gt; Tribal knowledge, yeah, close.

81
00:05:04.667 --> 00:05:07.113
But yeah, tribal knowledge,
where it becomes like,

82
00:05:07.113 --> 00:05:09.943
if you want the guy who did it,
you gotta find the guy who did it.

83
00:05:09.943 --> 00:05:11.676
[LAUGH] You know what I mean?

84
00:05:11.676 --> 00:05:16.667
So I do think being aware of those
decisions will make sure that you

85
00:05:16.667 --> 00:05:21.593
can interrupt between multiple
languages really well, yeah.

86
00:05:21.593 --> 00:05:25.818
&gt;&gt; There's a good comment in
chat around using the AWS CLI.

87
00:05:25.818 --> 00:05:26.379
&gt;&gt; Yeah.

88
00:05:26.379 --> 00:05:29.229
&gt;&gt; They're just saying that
you could technically use

89
00:05:29.229 --> 00:05:33.319
AWS CLI to create your resources, but
that's time consuming and manual.

90
00:05:33.319 --> 00:05:37.309
If you scale, you'll wanna automate your
infrastructure to not repeat the same

91
00:05:37.309 --> 00:05:38.726
things over and over again.

92
00:05:38.726 --> 00:05:42.804
&gt;&gt; Exactly, yeah, exactly,
yeah, I mean, my job or

93
00:05:42.804 --> 00:05:49.234
DevOps' job is really just doing what
you're doing manually and automating it.

94
00:05:49.234 --> 00:05:53.553
And that can be as simple as clicking
a button to solving the problem.

95
00:05:53.553 --> 00:05:58.096
And if you look at it that way,
then yes, they're absolutely right, and

96
00:05:58.096 --> 00:05:59.283
I agree with them.

97
00:05:59.283 --> 00:06:02.880
If you really wanted to, if you wanted
to go really, really crazy with it,

98
00:06:02.880 --> 00:06:06.424
you'd basically be recreating Terraform,
[LAUGH] if you think about it,

99
00:06:06.424 --> 00:06:08.725
right, because that's what Terraform does.

100
00:06:08.725 --> 00:06:11.687
Underneath the hood, it contacts
the APIs and it does all that for you.

101
00:06:11.687 --> 00:06:14.253
But if you wanted to,
sure, you could write a for

102
00:06:14.253 --> 00:06:18.319
loop that runs this AWS CLI command over,
and over, and over, and over, and

103
00:06:18.319 --> 00:06:22.097
over, and over, but I don't know
how well that'll work, so, yeah.

104
00:06:22.097 --> 00:06:26.323
&gt;&gt; Just on the topic of state management,
I feel like every time I've worked with

105
00:06:26.323 --> 00:06:29.030
Terraform, that's been
the biggest struggle?

106
00:06:29.030 --> 00:06:30.564
&gt;&gt; Yes, it is.

107
00:06:30.564 --> 00:06:32.991
&gt;&gt; Is this any easier than Pulumi?

108
00:06:32.991 --> 00:06:37.391
&gt;&gt; No, [LAUGH] no,
that's the burden of state.

109
00:06:37.391 --> 00:06:42.000
It's not easier in a React application
that uses state management.

110
00:06:42.000 --> 00:06:48.805
Unfortunately, state
management is really annoying.

111
00:06:48.805 --> 00:06:52.014
And I will talk about it later with
things like Kubernetes, right,

112
00:06:52.014 --> 00:06:55.743
cuz Kubernetes has its own state, but
then you've also got Terraform state.

113
00:06:55.743 --> 00:06:57.189
How do you make those two work?

114
00:06:57.189 --> 00:07:04.207
Always try and
have one source of truth, one, right?

115
00:07:04.207 --> 00:07:07.417
That will probably help you a lot
with that kinda stuff, yeah.

