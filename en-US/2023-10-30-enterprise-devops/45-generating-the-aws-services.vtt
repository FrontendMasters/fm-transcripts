WEBVTT

1
00:00:00.090 --> 00:00:01.180
So let's do this.

2
00:00:01.180 --> 00:00:04.503
Let's do AWS cluster, and I'm gonna
provision my AWS cluster as well, so

3
00:00:04.503 --> 00:00:05.684
I'm gonna say, New run.

4
00:00:05.684 --> 00:00:09.843
Now, you'll notice one thing that's
actually pretty cool about this is I can

5
00:00:09.843 --> 00:00:12.124
actually also show data sources, right?

6
00:00:12.124 --> 00:00:14.710
So I can see what data
sources were looked up.

7
00:00:14.710 --> 00:00:18.878
And then I can also see, cool,
well the VPC was in fact found.

8
00:00:18.878 --> 00:00:23.535
So this would not have worked if
we hadn't applied network yet,

9
00:00:23.535 --> 00:00:28.207
because that VPC name isn't there for
us to look up in this repo.

10
00:00:28.207 --> 00:00:32.060
That's how the Legos stack
on top of each other, right?

11
00:00:32.060 --> 00:00:36.891
So now I'm gonna hit Confirm and
Apply, and I'm gonna let it apply.

12
00:00:36.891 --> 00:00:40.488
Now, really quickly, while this is
happening, let's go to Amazon, right?

13
00:00:40.488 --> 00:00:42.634
We just provisioned
a bunch of infrastructure,

14
00:00:42.634 --> 00:00:44.004
let's see what it looks like.

15
00:00:44.004 --> 00:00:47.413
So I'm gonna go here,
I'm gonna log in with my account.

16
00:00:47.413 --> 00:00:48.759
And let's go see.

17
00:00:48.759 --> 00:00:52.243
While this is provisioning, right,
we can see it's provisioning stuff.

18
00:00:52.243 --> 00:00:53.705
Let's go see what it's made.

19
00:00:55.920 --> 00:01:00.212
Cool, and again,
I know it's failing purposely.

20
00:01:00.212 --> 00:01:02.896
So don't worry, I have a plan.

21
00:01:02.896 --> 00:01:05.488
So while that's failing,
just let it keep going, it's okay.

22
00:01:05.488 --> 00:01:09.031
If something fails, it's fine,
just let it keep going, right?

23
00:01:09.031 --> 00:01:11.652
Let's go to VPC.

24
00:01:15.955 --> 00:01:17.375
Okay, your VPCs.

25
00:01:22.063 --> 00:01:23.873
I'm in Northern California,

26
00:01:23.873 --> 00:01:27.712
we should probably switch to
the right region before I freak out.

27
00:01:27.712 --> 00:01:29.840
[LAUGH] And then look at that.

28
00:01:29.840 --> 00:01:33.131
There's our VPC, fem-eci.

29
00:01:33.131 --> 00:01:35.866
And here's what's really cool,
look at this, everything's already there.

30
00:01:35.866 --> 00:01:37.357
The CIDR's set up.

31
00:01:37.357 --> 00:01:39.052
The ACL is the main route table.

32
00:01:39.052 --> 00:01:44.830
I can even go to the resource map and
see how the routing works.

33
00:01:44.830 --> 00:01:46.753
Okay, public goes out here.

34
00:01:46.753 --> 00:01:48.221
ElastiCache goes out here.

35
00:01:48.221 --> 00:01:50.167
Intra is in this one, right?

36
00:01:50.167 --> 00:01:54.664
These are the route tables and
these are the network connections, right?

37
00:01:54.664 --> 00:01:58.753
So you can really kinda start to get
an idea of how this infrastructure is

38
00:01:58.753 --> 00:01:59.378
created.

39
00:01:59.378 --> 00:02:03.523
So let's go back to our
automation really quickly.

40
00:02:03.523 --> 00:02:04.834
So it's at Create Failed.

41
00:02:04.834 --> 00:02:07.565
Hm, it's interesting,
I wonder why that happened, right?

42
00:02:07.565 --> 00:02:11.611
That's a little bit peculiar.

43
00:02:11.611 --> 00:02:17.678
Sometimes with Amazon,
it's easier to create them manually.

44
00:02:17.678 --> 00:02:19.934
And you might be like, whoa, what?

45
00:02:19.934 --> 00:02:22.313
Why are you saying this for?

46
00:02:22.313 --> 00:02:26.276
It's the only time I genuinely think
this is easier to be done manually.

47
00:02:26.276 --> 00:02:32.725
So, whenever you work with ECS clusters,
you need a key pair.

48
00:02:32.725 --> 00:02:38.062
You need some type of key to give
the instances that are gonna be created so

49
00:02:38.062 --> 00:02:40.614
that you can access them, right?

50
00:02:40.614 --> 00:02:45.512
Now you have two choices here, you can
either take an existing key pair and

51
00:02:45.512 --> 00:02:50.491
import it into your automation and
then have it apply that for you, right?

52
00:02:50.491 --> 00:02:55.736
Or you can do another thing, which is
you can actually just use the key pair

53
00:02:55.736 --> 00:03:00.909
infrastructure in Amazon and
download a freshly generated one for you.

54
00:03:00.909 --> 00:03:02.753
And that's what I prefer to do.

55
00:03:02.753 --> 00:03:07.667
So if you run into this error,
which you will, bam,

56
00:03:07.667 --> 00:03:11.364
look at that, key pair does not exist.

57
00:03:11.364 --> 00:03:12.570
Fair enough.

58
00:03:12.570 --> 00:03:17.200
So, this cluster couldn't create because
the instances it wants to have can't

59
00:03:17.200 --> 00:03:20.956
create or can't use a key so
that you can connect to them, right?

60
00:03:20.956 --> 00:03:22.856
We need an SSH key of some sort.

61
00:03:22.856 --> 00:03:25.345
I don't wanna use mine, right?

62
00:03:25.345 --> 00:03:27.559
Because what happens
when I leave the company?

63
00:03:27.559 --> 00:03:29.047
[LAUGH] Right?

64
00:03:29.047 --> 00:03:31.407
So what we're gonna do is
we're gonna make it so

65
00:03:31.407 --> 00:03:33.712
that the company keeps
that responsibility.

66
00:03:33.712 --> 00:03:39.890
I'm gonna go to EC2, And
I'm gonna go to Key Pairs.

67
00:03:39.890 --> 00:03:43.743
And you'll actually see that I've got
a couple, I've got one right there even

68
00:03:43.743 --> 00:03:48.077
already, but that's not the one I need, so
I'm just gonna delete that really quickly.

69
00:03:48.077 --> 00:03:50.413
And I'm gonna create a new one,
Create key pair.

70
00:03:50.413 --> 00:03:55.090
And I'm gonna paste in
the value it expects, right?

71
00:03:55.090 --> 00:03:59.998
eci-ereinert-prod-cluster-ecs, and
then I'm gonna hit, Create key pair.

72
00:03:59.998 --> 00:04:04.150
When you do that, did you notice that
it also downloaded something for me?

73
00:04:04.150 --> 00:04:06.290
That's why it's nice to do this approach.

74
00:04:06.290 --> 00:04:10.842
Because now your key pair is stored
in Amazon, it's secure in there,

75
00:04:10.842 --> 00:04:14.098
you can start using it wherever you want,
right?

76
00:04:14.098 --> 00:04:18.261
And you have it now downloaded available
to you, that you can store the private key

77
00:04:18.261 --> 00:04:21.291
somewhere if you wanna connect
to your instances, right?

78
00:04:21.291 --> 00:04:27.497
So now that we have that, we can
actually go back to our run and rerun.

79
00:04:27.497 --> 00:04:31.419
&gt;&gt; I think you mentioned it, but Terraform
could have generated that as well,

80
00:04:31.419 --> 00:04:31.981
correct?

81
00:04:31.981 --> 00:04:36.763
&gt;&gt; It can, but
the problem is it won't give you the key.

82
00:04:36.763 --> 00:04:38.055
I don't know why, but

83
00:04:38.055 --> 00:04:42.680
the resource doesn't actually give you
the key when you create it in Terraform.

84
00:04:42.680 --> 00:04:47.383
So the best way in my personal opinion
is to just go in, create it manually.

85
00:04:47.383 --> 00:04:52.356
Download the key, store it somewhere safe,
and then just utilize that.

86
00:04:52.356 --> 00:04:55.575
And so you can see here that
now this all got created.

87
00:04:55.575 --> 00:04:59.548
And I don't know why, but
my UI is not fully updating.

88
00:04:59.548 --> 00:05:00.261
It didn't get created.

89
00:05:00.261 --> 00:05:01.774
Sorry, gotta confirm it.

90
00:05:01.774 --> 00:05:03.486
This time it should get created.

91
00:05:03.486 --> 00:05:09.417
So while that's working, we can go
back to Amazon, and we can go to ECS.

92
00:05:12.270 --> 00:05:16.705
And look at that,
I have a fem-eciep-ereinhardt=prod and

93
00:05:16.705 --> 00:05:20.723
my other one,
which is my alt4llc-bulbasaur-dev.

94
00:05:20.723 --> 00:05:23.643
Now you might be wondering why
do you have Bulbasaur here?

95
00:05:23.643 --> 00:05:28.751
[LAUGH] It's because I version
my infrastructure in Pokemon.

96
00:05:28.751 --> 00:05:32.002
Version one is Bulbasaur, version two,
version three, version four, so on.

97
00:05:32.002 --> 00:05:37.080
So it's just a nerdy way that I name
all of my versions of my environments.

98
00:05:37.080 --> 00:05:42.087
That's another layer that you guys might
want to take a look at in the future,

99
00:05:42.087 --> 00:05:44.564
which is active and passive, right?

100
00:05:44.564 --> 00:05:48.953
I have an active cluster and a passive
cluster that are both for dev, right?

101
00:05:48.953 --> 00:05:52.073
How do I switch between active and
passive even though it's in dev?

102
00:05:52.073 --> 00:05:54.025
That's another layer to it.

103
00:05:54.025 --> 00:05:58.002
Look at that, class, [LAUGH] we have
four greens across the board here.

104
00:05:58.002 --> 00:06:03.877
And that's because now we have Terraform
tfe completely synced and automated.

105
00:06:03.877 --> 00:06:08.397
Terraform eci-github,
completely synced and automated.

106
00:06:08.397 --> 00:06:12.172
Terraform aws-network got
its own network created for

107
00:06:12.172 --> 00:06:16.835
it with its own parameters, right,
but it is in fact aws-network.

108
00:06:16.835 --> 00:06:19.773
And then eci-cluster got created, right?

109
00:06:19.773 --> 00:06:22.411
And it was attached to
the repository that we need.

110
00:06:22.411 --> 00:06:27.083
So in about an hour, we created
all of the workspaces we needed,

111
00:06:27.083 --> 00:06:29.517
all the repositories we needed.

112
00:06:29.517 --> 00:06:34.468
And not only that, we created a whole
network on Amazon as well as a cluster for

113
00:06:34.468 --> 00:06:35.850
all of our services.

