WEBVTT

1
00:00:00.150 --> 00:00:03.690
So we asked AI one more time,
what is continuous integration?

2
00:00:03.690 --> 00:00:06.714
Continuous integration is the practice
of automating the integration of

3
00:00:06.714 --> 00:00:10.100
code changes from multiple
contributors into a single project.

4
00:00:10.100 --> 00:00:11.030
Pretty much,

5
00:00:11.030 --> 00:00:15.840
the TLDR is that CI is a way to validate
changes using automation, right?

6
00:00:15.840 --> 00:00:18.110
So it's just about
validating your changes.

7
00:00:19.340 --> 00:00:21.560
What is continuous delivery?

8
00:00:21.560 --> 00:00:24.460
Continuous delivery is
an approach to software

9
00:00:24.460 --> 00:00:28.599
engineering based on producing
software in short cycles, right?

10
00:00:28.599 --> 00:00:33.503
So one is about validation, and the other
one is about producing, actually,

11
00:00:33.503 --> 00:00:38.420
full cycle getting it out as quickly as
possible, the way to deploy your code.

12
00:00:40.010 --> 00:00:41.950
Are CI and CD the same thing?

13
00:00:43.670 --> 00:00:46.690
&gt;&gt; CD without CI is a really bad idea.

14
00:00:46.690 --> 00:00:50.140
&gt;&gt; Yeah, for starters [LAUGH],
yeah, that's great feedback, yeah.

15
00:00:50.140 --> 00:00:54.750
But should you mix your CI and
CD together?

16
00:00:54.750 --> 00:00:58.026
Does it make sense to just
do it all in one place?

17
00:00:58.026 --> 00:00:58.690
What do you guys think?

18
00:01:00.520 --> 00:01:03.235
&gt;&gt; One should stop the other if it fails.

19
00:01:03.235 --> 00:01:08.162
&gt;&gt; Yes, yeah, so
they're not the same thing,

20
00:01:08.162 --> 00:01:12.580
[LAUGH] but they are often used together.

21
00:01:12.580 --> 00:01:16.266
I get this all the time where people
say like, yeah, I've got CI/CD.

22
00:01:16.266 --> 00:01:18.249
And I'll be like, well,
cool, what do you do?

23
00:01:18.249 --> 00:01:19.954
And they're like, yeah,
we use GitHub Actions.

24
00:01:19.954 --> 00:01:23.310
[LAUGH] I'm like, okay, what do you do?

25
00:01:23.310 --> 00:01:25.242
[LAUGH] And they're like,
yeah, we use GitHub Actions.

26
00:01:25.242 --> 00:01:29.193
I'm like, that's not CD,
that's just a pipeline.

27
00:01:29.193 --> 00:01:32.412
CI and CD are not the same thing.

28
00:01:32.412 --> 00:01:37.724
And there are a lot of providers
out there who will try and

29
00:01:37.724 --> 00:01:41.730
sell you on CI as CD, CircleCI, right?

30
00:01:41.730 --> 00:01:44.348
It's not CircleCD, right?

31
00:01:44.348 --> 00:01:48.370
But you can technically use CircleCI,
right?

32
00:01:48.370 --> 00:01:52.070
As a way to deploy things,
if you want, right?

33
00:01:52.070 --> 00:01:54.808
But it's not that they
have them built into it,

34
00:01:54.808 --> 00:01:58.710
it's that you have something
that can just run, right?

35
00:01:58.710 --> 00:02:03.160
You do the rest, so it's not so
much that CI and CD are the same thing.

36
00:02:03.160 --> 00:02:08.906
But sometimes the underlying components
you use to run them can be the same thing,

37
00:02:08.906 --> 00:02:09.497
right?

38
00:02:09.497 --> 00:02:11.910
But they are not the same thing at all.

39
00:02:13.990 --> 00:02:18.797
So again, the TLDR is,
is that CI validates code changes.

40
00:02:18.797 --> 00:02:21.601
Can anyone tell me when CI should run,
any guesses?

41
00:02:21.601 --> 00:02:23.580
When should I see CI running?

42
00:02:24.730 --> 00:02:25.850
&gt;&gt; Code committed.

43
00:02:25.850 --> 00:02:27.444
&gt;&gt; Code committed, yep.

44
00:02:27.444 --> 00:02:30.160
Any other chances where CI might run?

45
00:02:30.160 --> 00:02:32.610
&gt;&gt; It's really fast whenever it's saved.

46
00:02:32.610 --> 00:02:34.050
&gt;&gt; Sure, what was that?

47
00:02:34.050 --> 00:02:35.230
&gt;&gt; Configuration changes.

48
00:02:35.230 --> 00:02:37.360
&gt;&gt; Configuration changes, yeah.

49
00:02:37.360 --> 00:02:42.290
Again, because we have GitOps, right?

50
00:02:42.290 --> 00:02:49.120
We can have CI for not only our code,
but also our pipelines and our changes.

51
00:02:49.120 --> 00:02:50.260
What does that mean?

52
00:02:50.260 --> 00:02:53.821
That means I can make changes
in an automation branch and

53
00:02:53.821 --> 00:02:57.018
not break stuff, but
know when I'm gonna [LAUGH].

54
00:02:57.018 --> 00:02:59.189
And that's really powerful, right?

55
00:02:59.189 --> 00:03:02.177
So, CI can empower CD, right,

56
00:03:02.177 --> 00:03:07.730
by validating CD beforehand,
and then CD is the next step.

57
00:03:07.730 --> 00:03:09.820
So it's more of like a handoff.

58
00:03:09.820 --> 00:03:13.689
CI does everything it needs to,
right, and then once it's done,

59
00:03:13.689 --> 00:03:14.943
it hands it off to CD.

60
00:03:14.943 --> 00:03:19.881
And that's exactly what we do, and the
handoff for us at Hippo is a Docker image,

61
00:03:19.881 --> 00:03:20.398
right?

62
00:03:20.398 --> 00:03:25.068
So what we do is we build a Docker
image in CI, and that's where it stops,

63
00:03:25.068 --> 00:03:26.960
we don't have CI then.

64
00:03:26.960 --> 00:03:31.325
And again, this is what commonly
happens is people will go, build, push,

65
00:03:31.325 --> 00:03:32.990
deploy, right?

66
00:03:32.990 --> 00:03:36.791
Don't do that, do build,
validate all that stuff.

67
00:03:36.791 --> 00:03:41.644
But then have maybe another repo that
you can have a web hook call to that

68
00:03:41.644 --> 00:03:44.170
will run a deployment for you.

69
00:03:44.170 --> 00:03:47.950
And then that repo has a standardized
way of deploying things.

70
00:03:47.950 --> 00:03:50.060
And that's exactly what we do at Hippo.

71
00:03:50.060 --> 00:03:53.023
We have what's called Hippo Deploy,

72
00:03:53.023 --> 00:03:58.680
which is a repo that just has actions
that we can call from other repos in.

73
00:03:59.830 --> 00:04:02.502
And so
that repo is all about deploying stuff,

74
00:04:02.502 --> 00:04:06.760
whereas all the other repos about
integration and testing things.

75
00:04:06.760 --> 00:04:09.380
So there is that handoff there, and
that handoff is very important.

76
00:04:11.270 --> 00:04:13.742
So let's talk about some cloud
providers for CI and CD.

77
00:04:13.742 --> 00:04:16.805
We've got GitHub Actions,
which we will be using.

78
00:04:16.805 --> 00:04:21.260
We've got GitLab CI/CD, we've got
AWS CodePipeline, Azure Pipelines.

79
00:04:21.260 --> 00:04:26.088
And the reality of it is, there's a bunch
of stuff out there, there's tons of stuff.

80
00:04:26.088 --> 00:04:30.218
And honestly,
I don't even have a real preference here.

81
00:04:30.218 --> 00:04:34.901
I've used CircleCI, actually, for
the majority of my time at Hippo.

82
00:04:34.901 --> 00:04:41.077
I have since really not grown to enjoy
their services as much anymore [LAUGH].

83
00:04:41.077 --> 00:04:44.780
And so I'm starting to now look
at things like GitHub Actions.

84
00:04:44.780 --> 00:04:50.830
I've used GitHub or GitLab as well,
they are all good solutions.

85
00:04:50.830 --> 00:04:53.060
Just find the one that picks best or
works best for you.

86
00:04:53.060 --> 00:04:56.104
I would recommend GitHub Actions
if you're on GitHub.

87
00:04:56.104 --> 00:04:58.610
It's integrated right into the platform,
everything's right there.

88
00:04:58.610 --> 00:05:03.191
It makes it really easy to view
changes and stuff like that, right?

89
00:05:03.191 --> 00:05:05.585
Same with GitLab,
if you're already on GitLab,

90
00:05:05.585 --> 00:05:08.470
might as well just use GitLab CI/CD,
right?

91
00:05:08.470 --> 00:05:12.200
CircleCI, those are more like
completely separate entities.

92
00:05:12.200 --> 00:05:16.932
You plug them into your code,
and then it runs against them.

93
00:05:16.932 --> 00:05:20.870
[LAUGH] So there's also open
source solutions out there.

94
00:05:20.870 --> 00:05:24.524
This is my personal opinion,
so do not get mad at me,

95
00:05:24.524 --> 00:05:28.273
but I do not think Jenkins
needs to be around anymore.

96
00:05:28.273 --> 00:05:31.609
So I don't recommend [LAUGH] Jenkins.

97
00:05:31.609 --> 00:05:35.122
You can use it, and
you are welcome to if you would like.

98
00:05:35.122 --> 00:05:38.485
But I've used it so much in the past,

99
00:05:38.485 --> 00:05:42.944
I really do not think
it's a productive system.

100
00:05:42.944 --> 00:05:45.981
Drone is another open source one.

101
00:05:45.981 --> 00:05:49.903
Drone was unfortunately, well,
not unfortunately for them,

102
00:05:49.903 --> 00:05:53.970
they got bought out, however,
it also got heavily licensed.

103
00:05:53.970 --> 00:05:56.952
So you can run your own Drone
clusters locally and stuff like that.

104
00:05:56.952 --> 00:06:00.764
But if you wanna do web hooks and
status checks and stuff,

105
00:06:00.764 --> 00:06:05.870
which are common on other platforms,
you have to pay a license for that.

106
00:06:05.870 --> 00:06:11.036
So Drone is limited, there's other things
like Concourse and other things like that.

107
00:06:11.036 --> 00:06:15.530
Basically, as we go down the list,
the user experience,

108
00:06:15.530 --> 00:06:20.685
developer experience, and
it's features become less, right?

109
00:06:20.685 --> 00:06:23.460
And I would say that's even more so
for here as well.

110
00:06:23.460 --> 00:06:29.601
As we start going down,
we start feeling that same thing.

111
00:06:29.601 --> 00:06:31.582
There is one other thing I wanted to note,

112
00:06:31.582 --> 00:06:34.825
because these are things that I'm
actually getting into more now.

113
00:06:34.825 --> 00:06:39.249
Because I'm running Kubernetes a lot
more now and things like that,

114
00:06:39.249 --> 00:06:42.660
which is Argo Workflows, GoCD, and Tekton.

115
00:06:42.660 --> 00:06:49.256
Now, if you've ever heard of Argo CD,
then you might know Argo Workflows.

116
00:06:49.256 --> 00:06:52.220
And you might also be like,
well, what's the difference?

117
00:06:52.220 --> 00:06:55.330
One's got CD in it and
one's got workflows in it.

118
00:06:55.330 --> 00:07:00.930
As I said before, you separate what you're
trying to do delivery-wise versus CI.

119
00:07:00.930 --> 00:07:06.710
CD is just about delivery, Argo Workflows
is basically the CI solution for that.

120
00:07:06.710 --> 00:07:11.028
And so you can run it in Kubernetes
natively, it's set up, really easy to use,

121
00:07:11.028 --> 00:07:12.520
and it's a good solution.

122
00:07:12.520 --> 00:07:14.921
Same thing with GoCD and Tekton.

123
00:07:14.921 --> 00:07:17.822
Kubernetes, what's nice
about Kubernetes is,

124
00:07:17.822 --> 00:07:22.032
is because of the way it's built,
you can kind of get these like, whoa,

125
00:07:22.032 --> 00:07:26.753
massive turnkey solutions that you would
expect from a provider in Kubernetes.

126
00:07:26.753 --> 00:07:31.602
And so that's why I put these here as
well, as is I do think that if you're

127
00:07:31.602 --> 00:07:35.992
on Kubernetes, these might be
very interesting for you as well.

128
00:07:35.992 --> 00:07:37.510
What about manual scripts?

129
00:07:38.740 --> 00:07:45.270
No, [LAUGH] just no, don't do it,
it's not recommended.

130
00:07:45.270 --> 00:07:50.750
Yes, it's an option, but really only if
you have specific requirements for it.

131
00:07:50.750 --> 00:07:54.433
We are at the point now where
we have nice things, and

132
00:07:54.433 --> 00:07:57.887
we can continue to have
nice things if we want to.

133
00:07:57.887 --> 00:07:59.190
As a matter of fact,

134
00:07:59.190 --> 00:08:04.114
it's why we can't have nice things
[LAUGH] is because of the manual scripts.

135
00:08:04.114 --> 00:08:08.595
You can't scale them,
you have to run them over and over,

136
00:08:08.595 --> 00:08:11.074
they're not really reliable.

137
00:08:11.074 --> 00:08:16.430
It makes it more challenging
to be reproducible.

