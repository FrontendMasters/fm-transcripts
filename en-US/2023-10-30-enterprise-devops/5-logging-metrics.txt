[00:00:00]
>> I do wanna say that I apologize that I did not learn the I before E except after C thing. So if you saw the word experience spelt wrong, I just can't spell, so sorry about that. But I did get a few people [LAUGH] messaging me about that.

[00:00:12]
So one other thing, I went ahead and made the presentation repo public. So if you guys do wanna actually get access to the presentation, at least now, start going through any of the previous slides and stuff like that, feel free to.
>> Is logging part of DevOps compared to developers?

[00:00:33]

>> Yeah, logging is a really, really touchy subject, [LAUGH] honestly. You want to make it so that your devs can find the logs, right? What you don't want is developers coming into your chat and being like, it's broken, but I don't know how, right? If that happens, then that's something where you fail to being sure that they can access logs or stuff like that.

[00:01:00]
Yeah, oftentimes, again, going back to the whole, no, I pushed something, something's broken, I don't know what's going on. Do you know what the first question I ask is?
>> What error messages are you getting?
>> Yeah, have you checked the logs? [LAUGH] If you don't check the logs, I can check them for you, but somebody's got to.

[00:01:20]
And so I think that's the important part of it, is just making sure that you have that there. And that you have a good practice in place to where people, people shouldn't expect you to do that. Anyone can look up [LAUGH] a log. So empowering them, yeah, the infrastructure under it, yes, but anything above it, no, yeah.

[00:01:46]
Yeah, go ahead.
>> Same logic, I guess, should be applied to metrics, traces, if you have all of the observability, I guess, or implemented for them?
>> Yeah, I mean, so metrics and tracing are also not, honestly, a lot of them aren't really used, like APMs and stuff like that.

[00:02:05]
If you do get access to an APM, the best thing I can say with that is really try and only have the metrics you care about in there because it can become ridiculous. [LAUGH] And so have a real purpose to using it. And then also, yeah, isolate it so that metrics aren't just in one huge dashboard.

[00:02:31]
Cuz I think that's something that'll happen a lot, too, is people implement JetMetrics. But then they don't think about like, okay, now we need metrics per service and its own UI that I can send a developer to test and stuff. Grafana, good example of that, nobody likes using Grafana, although it's fantastic, [LAUGH] you know what I mean?

[00:02:51]
No devs wanna use Grafana. And I'll be honest, we have a Grafana in every environment. Do you know how many times I get questions about Grafana daily? It's just nobody uses it, so experience is important, yeah.
>> So to summarize, logging is more observability. You can facilitate observability through DevOps principles, but to say that it's DevOps' responsibility, it's kind of not.

[00:03:19]

>> 100%, yeah, your job is just to give them the tools to be successful, yeah, not to make them successful, [LAUGH] yeah.
>> I guess cuz there's application logging at one level, and that's definitely a developer own, cuz that's what they're writing and building in. But then when you have those meta services that are consuming all those different application logs, I'm hearing you say it's kind of a hybrid responsibility.

[00:03:47]

>> Okay, so now what you're actually walking into is not really exactly what I do, but it is something that DevOps is kinda becoming more, which is Platform Ops. It's the concept of what you just said. Well, we have services that are owned by developers, who owns the gateways and everything in the middle.

[00:04:11]
Who owns the libraries that everyone uses, right, stuff like that. That's really where Platform Ops comes in, platform is really just what it's called. But the idea behind it is that they focus on more of the logical parts of the infrastructure, right? I'm just building bricks, so to speak, I'm not sitting down and actually working in JavaScript, Go, right, other languages and trying to solve problems like that.

[00:04:43]
And so platform can help with that, because platform can then take on that responsibility. It takes that responsibility off the DevOps team, and it still lets the DevOps team focus on what they're trying to focus on. If you blur that line, then DevOps becomes more involved in other things.

[00:05:01]
It's really important to keep that separation, because the reality of it is, DevOps is just a really limited resource. You are a limited resource that's being shared across the whole company. So that's probably the best way to look at it, yeah. Okay, so there's one other thing that happens quite a bit, which is if I'm in DevOps, do I need to know everything?

[00:05:30]
No, you don't, you do not, no. I will be honest with you, I don't even fully know all of our features [LAUGH] in our company that I work at. I don't, I don't have to, though. So no, it's not, but what I focus on is very much the only thing I focus on, yeah.

