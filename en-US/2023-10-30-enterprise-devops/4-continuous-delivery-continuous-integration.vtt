WEBVTT

1
00:00:00.420 --> 00:00:06.956
And yeah, even going back to the service
management and that question, right?

2
00:00:06.956 --> 00:00:12.660
Okay, so something happens,
we configured something wrong.

3
00:00:12.660 --> 00:00:13.730
Whose responsibility is that?

4
00:00:14.790 --> 00:00:16.280
Who would you say?

5
00:00:16.280 --> 00:00:20.320
Somebody deployed a bad config.

6
00:00:20.320 --> 00:00:22.132
Is that my job, DevOps?

7
00:00:22.132 --> 00:00:25.908
Is that the developer's job, yep?

8
00:00:25.908 --> 00:00:29.614
&gt;&gt; So it's the configuration for
the software, the product.

9
00:00:29.614 --> 00:00:30.840
&gt;&gt; The environment, yeah.

10
00:00:30.840 --> 00:00:37.260
Like my prod secrets, right, values,
that broke, whose responsibility is that?

11
00:00:37.260 --> 00:00:37.838
Who do you think?

12
00:00:37.838 --> 00:00:39.687
&gt;&gt; It's on infrastructure.

13
00:00:39.687 --> 00:00:40.730
&gt;&gt; Really?

14
00:00:40.730 --> 00:00:41.520
&gt;&gt; I think so, yeah.

15
00:00:41.520 --> 00:00:44.330
Because I don't know.

16
00:00:44.330 --> 00:00:48.796
I mean, the way that I see it is that
you're trying to set up processes that

17
00:00:48.796 --> 00:00:53.735
are actually safely, to use the word,
container, actually, cordoning off.

18
00:00:53.735 --> 00:00:56.466
&gt;&gt; Yep.
&gt;&gt; So that sort of thing doesn't hit prod

19
00:00:56.466 --> 00:00:58.960
without someone seeing it.

20
00:00:58.960 --> 00:01:00.303
&gt;&gt; Yeah, you're right.

21
00:01:00.303 --> 00:01:01.532
&gt;&gt; [INAUDIBLE] Handling it.

22
00:01:01.532 --> 00:01:03.542
&gt;&gt; So you're right,
however, you're also wrong.

23
00:01:03.542 --> 00:01:09.211
[LAUGH] So
we went through this at Hippo, actually.

24
00:01:09.211 --> 00:01:14.060
It was a very interesting conversation
because that's how it was before for us.

25
00:01:14.060 --> 00:01:17.467
Every time an outage would happen,
every time something would break,

26
00:01:17.467 --> 00:01:21.329
DevOps channel, DevOps channel just
became support ops for the whole company,

27
00:01:21.329 --> 00:01:22.470
basically.

28
00:01:22.470 --> 00:01:23.823
And we started recognizing that.

29
00:01:23.823 --> 00:01:29.820
We're like, dude, before you merge the PR,
check your spelling.

30
00:01:29.820 --> 00:01:33.230
Okay, just do that and it'll be great.

31
00:01:33.230 --> 00:01:37.497
And what a lot of people don't realize is
that's the most common scenario of a lot

32
00:01:37.497 --> 00:01:39.870
of these configuration problems.

33
00:01:39.870 --> 00:01:42.990
Copy pasted it wrong,
or something like that.

34
00:01:42.990 --> 00:01:45.520
Now, is it worth?

35
00:01:45.520 --> 00:01:48.928
And again,
this is gonna sound really weird, but

36
00:01:48.928 --> 00:01:53.570
is it worth me as a DevOps engineer
to take my time to try and fix that?

37
00:01:53.570 --> 00:01:56.982
We've already, like you said,
we've already got the practices in place.

38
00:01:56.982 --> 00:01:59.430
We've already got the container there,
right?

39
00:01:59.430 --> 00:02:04.088
So if somebody comes to me with
a broken environment and says, hey,

40
00:02:04.088 --> 00:02:07.290
then realistically, there's two options.

41
00:02:07.290 --> 00:02:10.145
Yes, I can take their hand and
help them go through it, and

42
00:02:10.145 --> 00:02:11.950
I don't mind doing that.

43
00:02:11.950 --> 00:02:16.886
But if I have to do it five times for
every, once a week, then that's Dev hours,

44
00:02:16.886 --> 00:02:18.630
that's money.

45
00:02:18.630 --> 00:02:26.640
So what we realized was, like you
mentioned, really tight scopes, right?

46
00:02:26.640 --> 00:02:29.456
But make it so
that they can do these things, right?

47
00:02:29.456 --> 00:02:34.273
So our developers at Hippo actually have
control over their own configurations.

48
00:02:34.273 --> 00:02:37.780
And we told them, we said,
listen, you're in power of this.

49
00:02:37.780 --> 00:02:40.230
You break it, you fix it.

50
00:02:40.230 --> 00:02:42.346
That's not us.

51
00:02:42.346 --> 00:02:44.610
We will make sure that
the infrastructure is running.

52
00:02:44.610 --> 00:02:46.440
We'll make sure that the uptime is there.

53
00:02:46.440 --> 00:02:50.430
And we'll make sure that there's nothing
underneath you that could fail, right?

54
00:02:50.430 --> 00:02:56.110
But, you are the one in charge
of your service, not me.

55
00:02:56.110 --> 00:03:00.302
I am in charge of making sure that your
service runs in the sense of it can deploy

56
00:03:00.302 --> 00:03:01.540
and things like that.

57
00:03:01.540 --> 00:03:03.850
It's kind of like a boat.

58
00:03:03.850 --> 00:03:07.013
The moment that boat is
ready to go out to sea,

59
00:03:07.013 --> 00:03:12.109
I stop doing what you would expect
once the bottle hits the ship, right?

60
00:03:12.109 --> 00:03:16.094
At that moment, you're out to sea,
and I'm here to help you.

61
00:03:16.094 --> 00:03:17.700
I'm coast guard, right?

62
00:03:17.700 --> 00:03:19.830
But you're the one on
the boat with your service.

63
00:03:19.830 --> 00:03:24.605
And so developers being empowered
to manage their own services not

64
00:03:24.605 --> 00:03:26.062
only enables that.

65
00:03:26.062 --> 00:03:29.476
But it also makes it so
that if you have organizational teams,

66
00:03:29.476 --> 00:03:31.520
like team leads and stuff like that.

67
00:03:31.520 --> 00:03:34.068
Then that means that
those product owners now

68
00:03:34.068 --> 00:03:36.626
bring that ownership into the team, right?

69
00:03:36.626 --> 00:03:40.528
So product owners don't just think about,
well, let's get our features out, but

70
00:03:40.528 --> 00:03:43.370
now they're also thinking,
well, when are we gonna deploy?

71
00:03:47.040 --> 00:03:50.697
So the next thing is gonna be
continuous integration, right?

72
00:03:50.697 --> 00:03:54.530
Developers really care about
how things are built, right?

73
00:03:54.530 --> 00:03:57.270
And so this is gonna be like,
how do we build artifacts?

74
00:03:57.270 --> 00:03:59.300
Are we building docker images?

75
00:03:59.300 --> 00:04:00.740
Are we building binaries?

76
00:04:00.740 --> 00:04:02.720
What are we building, right?

77
00:04:02.720 --> 00:04:06.409
Testing changes,
making sure that if I make a change, and

78
00:04:06.409 --> 00:04:08.990
this, man, this is a big one.

79
00:04:08.990 --> 00:04:10.650
This is a really big one.

80
00:04:10.650 --> 00:04:16.545
Because we've noticed, even at Hippo,
that developers are really like,

81
00:04:16.545 --> 00:04:21.996
they'll pick one approach and
then they'll just use that approach.

82
00:04:21.996 --> 00:04:25.978
And a good example of that is is
that we did create pipelines for

83
00:04:25.978 --> 00:04:31.490
our developers at Hippo, but
what we realized was that's all they use.

84
00:04:31.490 --> 00:04:32.440
We're like, what?

85
00:04:32.440 --> 00:04:34.860
We're like, are you testing locally?

86
00:04:34.860 --> 00:04:36.140
They're like, no, lemme just push it.

87
00:04:36.140 --> 00:04:37.560
I'm like, are you serious?

88
00:04:37.560 --> 00:04:38.160
They're like, yeah.

89
00:04:38.160 --> 00:04:41.834
But then we realized it's because
the infrastructure got so

90
00:04:41.834 --> 00:04:45.517
distributed that that was the only
way that they could test.

91
00:04:45.517 --> 00:04:48.080
And we're like, okay.

92
00:04:48.080 --> 00:04:53.135
So then we started looking at it, and
there was two options, one, local.

93
00:04:53.135 --> 00:04:55.040
[LAUGH] Let's do local.

94
00:04:55.040 --> 00:04:56.090
We didn't wanna do that.

95
00:04:56.090 --> 00:04:58.043
We have 60 to 150 services,

96
00:04:58.043 --> 00:05:02.380
depending on what part of the stack
that you're talking about.

97
00:05:02.380 --> 00:05:05.800
So local for us is just impossible, right?

98
00:05:05.800 --> 00:05:06.840
So what did we do?

99
00:05:06.840 --> 00:05:10.030
We decided to improve our pipelines,
make them faster.

100
00:05:10.030 --> 00:05:17.533
Make them run quicker and less cost heavy.

101
00:05:17.533 --> 00:05:21.737
And what we essentially did was, is we
started leaning on things like caching,

102
00:05:21.737 --> 00:05:24.388
making sure that branches
have their own caches.

103
00:05:24.388 --> 00:05:27.476
Really trying to make it so
what the developer's expectation,

104
00:05:27.476 --> 00:05:28.791
if they're gonna do that,

105
00:05:28.791 --> 00:05:32.758
let's make sure that they're not just
burning money in the Cloud, [LAUGH] right?

106
00:05:32.758 --> 00:05:34.940
And that was a big part of that.

107
00:05:34.940 --> 00:05:36.310
So testing is really important.

108
00:05:36.310 --> 00:05:38.890
Are you gonna test
locally before you push?

109
00:05:38.890 --> 00:05:41.230
Are you gonna test in the Cloud, right?

110
00:05:41.230 --> 00:05:43.801
And what are the developer's
expectations with that?

111
00:05:43.801 --> 00:05:47.519
If you're testing locally and
in the Cloud, whose time are you wasting?

112
00:05:47.519 --> 00:05:52.430
[LAUGH] Or if you have specific things
that you have local, but then you only do

113
00:05:52.430 --> 00:05:57.790
specific things in the Cloud, then that
might be a better approach to it too.

114
00:05:57.790 --> 00:06:04.660
Code coverage, this one is unfortunately
not used as often as I wish it was.

115
00:06:04.660 --> 00:06:08.609
If you don't know what code coverage is,
it's basically the concept of

116
00:06:08.609 --> 00:06:11.600
making sure you have a test for
every line of your code.

117
00:06:13.020 --> 00:06:14.660
Most companies don't do this.

118
00:06:16.020 --> 00:06:16.845
Call a spade a spade.

119
00:06:16.845 --> 00:06:18.860
[LAUGH] Most companies don't.

120
00:06:18.860 --> 00:06:21.740
They don't find value in it, right?

121
00:06:21.740 --> 00:06:24.840
Why do tests and
coverage when I can just do tests?

122
00:06:24.840 --> 00:06:29.060
However, what we have seen at Hippo
is that when you have code coverage,

123
00:06:29.060 --> 00:06:32.840
it gives ownership to the developer for
those things.

124
00:06:32.840 --> 00:06:37.182
And we're basically saying, hey, not only
are you just making sure your tests run,

125
00:06:37.182 --> 00:06:40.400
but you're also monitoring
the quality of your code, right?

126
00:06:40.400 --> 00:06:42.946
And so because of that, once again,

127
00:06:42.946 --> 00:06:47.311
you're giving them the ownership
of their problems, right?

128
00:06:47.311 --> 00:06:49.100
You're not saying, well, code broke.

129
00:06:49.100 --> 00:06:50.240
I don't know what it is.

130
00:06:50.240 --> 00:06:51.490
It's like, well, no, here are your tests.

131
00:06:51.490 --> 00:06:52.870
Here's your code coverage.

132
00:06:52.870 --> 00:06:54.270
You can find it, right?

133
00:06:54.270 --> 00:06:55.883
And then code quality.

134
00:06:55.883 --> 00:07:00.833
Now, code quality,
DevOps really can only speak, I would say,

135
00:07:00.833 --> 00:07:06.512
about half on this conversation because
the other half is the developers.

136
00:07:06.512 --> 00:07:11.035
The developers are the ones who are going
to take their opinionations of how do we

137
00:07:11.035 --> 00:07:12.397
want to write the code?

138
00:07:12.397 --> 00:07:13.446
What is it gonna look like?

139
00:07:13.446 --> 00:07:14.731
Are we gonna use formatters?

140
00:07:14.731 --> 00:07:16.260
Are we gonna use linters, whatever.

141
00:07:16.260 --> 00:07:19.090
Those things we don't,
DevOps doesn't really care about.

142
00:07:19.090 --> 00:07:22.400
If you wanna lint, sure, we can we can
add lint to the pipeline, whatever.

143
00:07:23.520 --> 00:07:25.719
But that's where we come in, right,

144
00:07:25.719 --> 00:07:29.237
is when that's where we work
together with the developers.

145
00:07:29.237 --> 00:07:33.480
And we say, okay, you want linting,
how do we do it, right?

146
00:07:33.480 --> 00:07:36.876
So developers must have dependable and
reliable pipelines for

147
00:07:36.876 --> 00:07:38.870
everything they need, basically.

148
00:07:41.580 --> 00:07:43.400
Yeah, and
then finally continuous delivery.

149
00:07:44.430 --> 00:07:49.084
So going back to the example that I said
before of, hey, an outage happens or

150
00:07:49.084 --> 00:07:53.510
something breaks,
whose responsibility is it for, or is it?

151
00:07:53.510 --> 00:07:57.240
I think it's the developer's,
as we said before.

152
00:07:57.240 --> 00:07:58.310
So how do we do that?

153
00:07:58.310 --> 00:08:01.230
Well, we empower them to
deploy their own services.

154
00:08:01.230 --> 00:08:05.930
And I'm gonna give you guys a quick story
after this in a second related to this.

155
00:08:05.930 --> 00:08:10.880
And again, a big part of this is how
do I deploy the Docker image, right?

156
00:08:10.880 --> 00:08:11.990
How do I get that?

157
00:08:11.990 --> 00:08:13.064
And then again,

158
00:08:13.064 --> 00:08:17.830
how do I get that from staging to
production to dev, to whatever, right?

159
00:08:17.830 --> 00:08:19.440
So here's my story.

160
00:08:19.440 --> 00:08:24.018
When I first got to Hippo,
I found that every two weeks,

161
00:08:24.018 --> 00:08:29.768
the entire team or the entire company,
which is about 100 people,

162
00:08:29.768 --> 00:08:34.651
would all join together on
a Wednesday night, about 5 PM.

163
00:08:34.651 --> 00:08:38.294
Get on a phone call, or
get on a Zoom call, six other people, and

164
00:08:38.294 --> 00:08:42.499
we'd go through the whole production
of deploying all 150 services.

165
00:08:44.140 --> 00:08:45.750
Yeah, it sucked.

166
00:08:45.750 --> 00:08:47.680
It was not fun at all.

167
00:08:47.680 --> 00:08:52.271
And I did that for probably about six
to nine months before everyone on

168
00:08:52.271 --> 00:08:55.610
the team was like,
my Wednesday nights are done.

169
00:08:55.610 --> 00:08:59.300
I can't do anything, you know?

170
00:08:59.300 --> 00:09:02.660
And so, two things about this.

171
00:09:02.660 --> 00:09:07.658
One, it was a culture shift for
us to think that developers

172
00:09:07.658 --> 00:09:11.640
could deploy things, hands down, right?

173
00:09:11.640 --> 00:09:13.968
Because from a business level,

174
00:09:13.968 --> 00:09:19.020
the reason why we did that was to
make sure nothing broke, right?

175
00:09:19.020 --> 00:09:21.894
But what that really meant is we had
no confidence in our developers for

176
00:09:21.894 --> 00:09:22.755
deploying things.

177
00:09:22.755 --> 00:09:24.710
[LAUGH] That's what that really meant.

178
00:09:28.360 --> 00:09:31.000
This was every two weeks, right?

179
00:09:31.000 --> 00:09:32.270
So what did we do?

180
00:09:32.270 --> 00:09:33.118
We sat down and

181
00:09:33.118 --> 00:09:38.470
we figured out how we could empower
developers to deploy their own services.

182
00:09:38.470 --> 00:09:44.210
Today, we had one service that
could deploy once every two weeks.

183
00:09:44.210 --> 00:09:47.253
Now, it gets deployed four times a day.

184
00:09:49.542 --> 00:09:53.101
Think about how fast you can
reiterate if you just simply say,

185
00:09:53.101 --> 00:09:55.550
I'm not gonna be a part of this.

186
00:09:55.550 --> 00:09:58.520
You guys do what you need to do, right?

187
00:09:58.520 --> 00:09:59.870
And so that's what we did.

188
00:09:59.870 --> 00:10:04.584
We basically realized that as long as
we have built a system in place that

189
00:10:04.584 --> 00:10:09.400
allows a developer to be like,
send it to prod, and it goes, right?

190
00:10:09.400 --> 00:10:11.810
That they take ownership of that.

191
00:10:11.810 --> 00:10:16.815
And don't get me wrong, there are times,
we had a circumstance a few weeks ago,

192
00:10:16.815 --> 00:10:21.452
even, where a developer pushed something
to prod, but it was broken, and

193
00:10:21.452 --> 00:10:22.990
we didn't know.

194
00:10:22.990 --> 00:10:27.542
But it wasn't a broken to where it wasn't
running, it was an internal logic error or

195
00:10:27.542 --> 00:10:28.770
something like that.

196
00:10:30.060 --> 00:10:32.580
However, they didn't check the service.

197
00:10:32.580 --> 00:10:34.273
They just deployed it to prod and

198
00:10:34.273 --> 00:10:36.976
then went home expecting
that it was gonna be fine.

199
00:10:36.976 --> 00:10:40.464
The next morning, there's like
tons of alerts and ta-da-da-da.

200
00:10:40.464 --> 00:10:42.610
And sure enough, we find out that yeah,
they deployed it.

201
00:10:42.610 --> 00:10:44.570
They didn't think about it.

202
00:10:44.570 --> 00:10:46.310
Who's responsible for that one?

203
00:10:47.760 --> 00:10:50.410
&gt;&gt; The developer didn't
run any tests then.

204
00:10:50.410 --> 00:10:53.030
&gt;&gt; Yep, exactly, yeah.

205
00:10:53.030 --> 00:10:54.890
You as an organization
have to be ready for that.

206
00:10:56.220 --> 00:10:59.150
Because if not,
then it's always gonna be on you.

207
00:10:59.150 --> 00:11:01.810
It's always gonna be like,
well, DevOps does it.

208
00:11:01.810 --> 00:11:04.000
No, [LAUGH] we don't have to.

209
00:11:05.325 --> 00:11:06.745
And we changed that.

210
00:11:06.745 --> 00:11:09.990
And so yeah, now we,
across our 150 services,

211
00:11:09.990 --> 00:11:12.535
we deploy them multiple times a day.

212
00:11:12.535 --> 00:11:13.827
We have channels for them so

213
00:11:13.827 --> 00:11:17.885
that each team has their own channel
they can do their deployments through.

214
00:11:17.885 --> 00:11:21.516
And we took that weight
off of us as a team, and

215
00:11:21.516 --> 00:11:26.705
we pushed it on to the teams
that own their actual products.

216
00:11:26.705 --> 00:11:31.729
Right, so again, it becomes this
separation of, if you've ever seen

217
00:11:31.729 --> 00:11:37.450
Ghostbusters, we're kinda like the
gatekeepers, [LAUGH] you know what I mean?

218
00:11:37.450 --> 00:11:42.750
We only unlock the door, you're the one
who has to walk through, right?

219
00:11:42.750 --> 00:11:44.589
And that empowerment's really important.

220
00:11:46.840 --> 00:11:49.360
So did you say developers
maintain their own deployments?

221
00:11:49.360 --> 00:11:50.013
Yes, I did.
And

222
00:11:50.013 --> 00:11:52.880
I do think it's something that
you guys should try and do.

223
00:11:52.880 --> 00:11:54.930
I think if anything,
start thinking about it.

224
00:11:54.930 --> 00:11:58.590
If you're not doing that already,
it's not like you couldn't.

225
00:11:59.610 --> 00:12:02.570
It's just that you really need to
think about what are the pain points?

226
00:12:02.570 --> 00:12:03.320
How do they do it?

227
00:12:03.320 --> 00:12:08.117
How are they gonna potentially hurt
themselves, [LAUGH] if they do?

228
00:12:08.117 --> 00:12:12.384
But they're brilliant,
talented people just like we are and

229
00:12:12.384 --> 00:12:16.742
they're hired to do engineering too so
they should be able to.

230
00:12:19.236 --> 00:12:24.372
So why is developer empowerment important,
especially for us?

231
00:12:24.372 --> 00:12:27.940
It saves us time [LAUGH] honestly.

232
00:12:27.940 --> 00:12:29.730
Like, there's two sides of it.

233
00:12:29.730 --> 00:12:32.260
One, looking at faster development cycles.

234
00:12:32.260 --> 00:12:35.439
Like I said before, we went from deploying
a service once every two weeks to

235
00:12:35.439 --> 00:12:36.760
deploying it four times a day.

236
00:12:36.760 --> 00:12:42.900
And this is our biggest, most important,
and most touched service.

237
00:12:42.900 --> 00:12:45.340
And it gets deployed constantly now.

238
00:12:45.340 --> 00:12:47.910
So we see that loop, right?

239
00:12:47.910 --> 00:12:50.397
The faster feedback loop with that.

240
00:12:50.397 --> 00:12:51.960
Faster time to market.

241
00:12:53.490 --> 00:12:57.128
Maybe you're in a scenario where your
company needs to put something out, but

242
00:12:57.128 --> 00:13:00.970
you're blocked because you don't deploy
except for on a specific time period.

243
00:13:00.970 --> 00:13:03.776
Well, then marketing has to think about,
all right,

244
00:13:03.776 --> 00:13:06.460
well we gotta do it this day and
we gotta plan around.

245
00:13:06.460 --> 00:13:08.991
Like, it just, it becomes a burden and

246
00:13:08.991 --> 00:13:13.390
a lot of people don't really
realize that it does, right?

247
00:13:13.390 --> 00:13:15.750
And then yeah,
faster time to value through that.

248
00:13:15.750 --> 00:13:17.750
Because you can get to where
you're trying to quicker.

249
00:13:17.750 --> 00:13:21.230
You get that value faster, you learn
quicker and then you can iterate it.

250
00:13:21.230 --> 00:13:25.958
So yeah, DevOps must empower
developers to be successful.

251
00:13:25.958 --> 00:13:31.691
If we don't, the process doesn't
work the way that we wish it would.

