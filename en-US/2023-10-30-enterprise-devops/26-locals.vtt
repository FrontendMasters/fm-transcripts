WEBVTT

1
00:00:00.000 --> 00:00:03.462
So now that we've done that,
the next thing we wanna do is,

2
00:00:03.462 --> 00:00:07.847
we wanna explore something called
using dynamic configurations, okay?

3
00:00:07.847 --> 00:00:10.491
Now what exactly does that mean?

4
00:00:10.491 --> 00:00:14.620
Well, let's look at our
code really quickly here.

5
00:00:14.620 --> 00:00:19.211
So if you notice, my code has module
project and module workspace.

6
00:00:19.211 --> 00:00:22.478
Can anyone tell me what I would have to do
if I wanted to create another workspace?

7
00:00:22.478 --> 00:00:23.432
What do you guys think I'd have to?

8
00:00:23.432 --> 00:00:26.751
What would be the most straightforward
way of creating another workspace?

9
00:00:26.751 --> 00:00:27.977
Can anyone tell me?

10
00:00:29.905 --> 00:00:32.023
&gt;&gt; Copy-paste.

11
00:00:32.023 --> 00:00:32.676
&gt;&gt; Edit.

12
00:00:32.676 --> 00:00:35.186
&gt;&gt; Yeah, copy-paste, yeah, exactly.

13
00:00:35.186 --> 00:00:36.860
And so, I go like this.

14
00:00:36.860 --> 00:00:39.928
This is the most common way of doing it,
right here.

15
00:00:39.928 --> 00:00:41.299
And then what else would I have to do?

16
00:00:41.299 --> 00:00:42.774
Copy-paste might not be enough.

17
00:00:42.774 --> 00:00:44.599
I said that there was one other caveat,
right?

18
00:00:44.599 --> 00:00:45.371
&gt;&gt; You have to edit it?

19
00:00:45.371 --> 00:00:46.555
&gt;&gt; Yep, and what do I have to edit?

20
00:00:46.555 --> 00:00:48.715
&gt;&gt; Probably the description and name.

21
00:00:48.715 --> 00:00:53.632
&gt;&gt; But what is identical here
that might be a conflict?

22
00:00:53.632 --> 00:00:54.809
&gt;&gt; Product ID?

23
00:00:54.809 --> 00:01:00.638
&gt;&gt; Close, but it's a little bit more
literal, look on lines 11 and 21.

24
00:01:00.638 --> 00:01:03.294
&gt;&gt; You cannot have the same
module with the same name.

25
00:01:03.294 --> 00:01:05.034
&gt;&gt; Exactly, and what would that do?

26
00:01:05.034 --> 00:01:08.545
What would happen if I had the same
module with the same name twice?

27
00:01:08.545 --> 00:01:09.339
What do you guys think would happen?

28
00:01:09.339 --> 00:01:10.228
Do you think it would work?

29
00:01:10.228 --> 00:01:12.330
&gt;&gt; It would override the first
one with the second one?

30
00:01:12.330 --> 00:01:13.100
&gt;&gt; It'd conflict.

31
00:01:13.100 --> 00:01:13.835
It could actually fail.

32
00:01:13.835 --> 00:01:17.339
Terraform would say, hey,
you've got two things with the same name.

33
00:01:17.339 --> 00:01:19.339
So if I do Terraform.

34
00:01:19.339 --> 00:01:22.757
Now just to note, you don't have to do
validate with doppler, because validate

35
00:01:22.757 --> 00:01:25.790
doesn't actually communicate with
anything, but then there you go.

36
00:01:25.790 --> 00:01:28.351
Sure enough it says, hey,
you've got duplicate module here.

37
00:01:28.351 --> 00:01:29.730
Can't do it, right?

38
00:01:29.730 --> 00:01:34.552
So what we wanna do is,
if this is the approach we wanna take,

39
00:01:34.552 --> 00:01:40.435
we need to start doing things like,
okay, let's make this one example.

40
00:01:40.435 --> 00:01:44.559
A, right, and then that kind
of becomes the process, right?

41
00:01:44.559 --> 00:01:45.530
But it's very tedious.

42
00:01:45.530 --> 00:01:50.177
What happens if you wanna update
all of these names, right?

43
00:01:50.177 --> 00:01:53.878
Then you have to go through one by
one by one by one by one to do that.

44
00:01:53.878 --> 00:01:57.938
It's very cumbersome and
honestly just annoying to do.

45
00:01:57.938 --> 00:02:00.036
So there is another approach to this.

46
00:02:00.036 --> 00:02:03.335
And I at least like to call it
dynamic configurations, right?

47
00:02:03.335 --> 00:02:06.871
The idea is,
is that we do have HCL, right?

48
00:02:06.871 --> 00:02:11.965
We do have a [LAUGH] pseudo-programming
language available to us, right?

49
00:02:11.965 --> 00:02:15.474
It is really what's called
a domain-specific language,

50
00:02:15.474 --> 00:02:19.121
which is the idea of a language
that's not a general purpose,

51
00:02:19.121 --> 00:02:21.800
you can't create APIs and
services with it.

52
00:02:21.800 --> 00:02:24.640
But it's a language used to build things,
right?

53
00:02:24.640 --> 00:02:26.940
And so we can lean on that code or

54
00:02:26.940 --> 00:02:32.166
that language to be able to make this
a bit more dynamic and easy for us.

55
00:02:32.166 --> 00:02:36.890
So what we wanna do is, is we're
gonna introduce a new concept called,

56
00:02:36.890 --> 00:02:37.925
oops, sorry.

57
00:02:37.925 --> 00:02:40.455
We're gonna introduce a new
concept called locals.

58
00:02:40.455 --> 00:02:47.555
And we're gonna create a file, [LAUGH]
[INAUDIBLE], called locals.tf, right?

59
00:02:47.555 --> 00:02:52.454
So again, we're gonna create
a file called locals.tf, right?

60
00:02:52.454 --> 00:02:56.541
Then what we're gonna do is,
is we're going to open that file.

61
00:02:56.541 --> 00:03:01.795
Now, locals, or what I'm showing you
right now, is a concept in Terraform

62
00:03:01.795 --> 00:03:06.492
that allows you to essentially
create variables locally, right?

63
00:03:06.492 --> 00:03:10.883
Now Terraform has a configuration
approach to how it defines things.

64
00:03:10.883 --> 00:03:15.079
So you're always gonna have
a meta-argument, and then some brackets,

65
00:03:15.079 --> 00:03:18.133
and then some attributes
in those brackets, right?

66
00:03:18.133 --> 00:03:22.447
Whether it be a local, whether it be a
resource, whether it be a module, whether

67
00:03:22.447 --> 00:03:26.901
it be whatever, this syntax is pretty much
always what you're gonna end up doing.

68
00:03:26.901 --> 00:03:29.760
So let's think about configuration here.

69
00:03:29.760 --> 00:03:31.076
What do we need to configure?

70
00:03:31.076 --> 00:03:36.716
From a resource perspective,
if I pull this up from left to right,

71
00:03:36.716 --> 00:03:40.157
what resources do we need to configure?

72
00:03:40.157 --> 00:03:46.062
And I'll give you a hint, their names
are on line one and line nine [LAUGH].

73
00:03:46.062 --> 00:03:50.337
What resources you guys think we need
to configure here, if we try and

74
00:03:50.337 --> 00:03:52.046
look at it from that angle?

75
00:03:54.902 --> 00:03:59.097
It's actually very simple,
it's project and workspace.

76
00:03:59.097 --> 00:04:01.941
We need to configure projects and
workspaces, right?

77
00:04:01.941 --> 00:04:07.815
So the idea is, is that we're looking
at these modules now as reusable for

78
00:04:07.815 --> 00:04:14.860
loops, almost, that we can create multiple
projects with and multiple modules with.

79
00:04:14.860 --> 00:04:16.468
So how can we achieve that?

80
00:04:16.468 --> 00:04:19.423
Well, let's go ahead and
go into locals, right?

81
00:04:19.423 --> 00:04:24.814
And what I'm gonna do is,
I'm just gonna simply create a new set,

82
00:04:24.814 --> 00:04:29.836
I think is what it's called attribute set,
called project.

83
00:04:29.836 --> 00:04:34.860
That is now going to be where I'm
gonna put all of my projects, right?

84
00:04:34.860 --> 00:04:36.305
Then I also have a workspace.

85
00:04:36.305 --> 00:04:38.690
So now I'm gonna do workspace.

86
00:04:38.690 --> 00:04:41.544
Do the same thing, right?

87
00:04:41.544 --> 00:04:45.000
Now when I said before that
we are literally trying

88
00:04:45.000 --> 00:04:49.781
to configure workspaces and projects,
this is what I mean, right?

89
00:04:49.781 --> 00:04:54.390
We look over here and we say, well,
this resource is meant to be a project.

90
00:04:54.390 --> 00:04:58.420
This resource is meant to be a workspace,
but I'm gonna have tons of them, right?

91
00:04:58.420 --> 00:05:03.094
So maybe if there's a way to where
I can only have to touch this once,

92
00:05:03.094 --> 00:05:07.945
right, but then really do all of my
defining and variables over here.

93
00:05:07.945 --> 00:05:10.150
If you've ever used
a programming language before,

94
00:05:10.150 --> 00:05:11.768
this is actually very common, right?

95
00:05:11.768 --> 00:05:14.319
You just make a variable or
map or something like that, and

96
00:05:14.319 --> 00:05:15.790
you use it throughout your code.

97
00:05:15.790 --> 00:05:17.773
That's what we're doing,
that's all we're doing.

98
00:05:17.773 --> 00:05:22.943
We're just making the unique part of
the code and we're separating it so

99
00:05:22.943 --> 00:05:27.265
that we can easily configure it
later through the logic, and

100
00:05:27.265 --> 00:05:32.286
we don't have to be worried about
actual modules and stuff like that.

101
00:05:32.286 --> 00:05:35.052
So we have a project, right?

102
00:05:35.052 --> 00:05:39.547
Let me actually close this really quickly,
reopen it, just so that my syntax,

103
00:05:39.547 --> 00:05:40.297
there we go.

104
00:05:40.297 --> 00:05:41.843
So we have a project, right?

105
00:05:41.843 --> 00:05:42.663
We have a project.

106
00:05:42.663 --> 00:05:47.436
And you'll notice that when
you start using Terraform,

107
00:05:47.436 --> 00:05:52.315
if we go back to our main,
it's mostly key value, right?

108
00:05:52.315 --> 00:05:55.210
So it's like you got a key, and
then you have a value for that.

109
00:05:55.210 --> 00:05:58.730
It's mostly maps is really what
I'm trying to get at here.

110
00:05:58.730 --> 00:06:02.730
And so if I wanted to, I could take
two different approaches to this.

111
00:06:02.730 --> 00:06:06.928
I could say, okay, well,
what I wanna do is,

112
00:06:06.928 --> 00:06:11.343
I wanna say,
instead of using the name project,

113
00:06:11.343 --> 00:06:17.500
I actually wanna use the name fem-eci-,
what is it, workspace.

114
00:06:17.500 --> 00:06:18.549
Yeah, workspace.

115
00:06:18.549 --> 00:06:21.596
Or no, sorry, project, right?

116
00:06:24.584 --> 00:06:27.829
And then I'm going to,
one more time, do equals.

117
00:06:27.829 --> 00:06:33.494
And then create an attribute set for
it, right?

118
00:06:33.494 --> 00:06:38.122
So now you can kind of start to get
an idea of how we're constructing this

119
00:06:38.122 --> 00:06:43.925
configuration, or what we're now gonna
call our DSL, or domain-specific language.

120
00:06:43.925 --> 00:06:47.975
So we're kind of building
our own domain language or

121
00:06:47.975 --> 00:06:53.600
domain configuration on top of their
language to make our lives easier.

122
00:06:53.600 --> 00:06:56.598
So what exactly, if I have a project,

123
00:06:56.598 --> 00:07:01.021
what values do you guys think
I would have to put in here?

124
00:07:01.021 --> 00:07:05.365
What values from project do
you think I would have to put

125
00:07:05.365 --> 00:07:07.829
in here that are needed for it?

126
00:07:07.829 --> 00:07:09.210
&gt;&gt; Name and description.

127
00:07:09.210 --> 00:07:10.730
&gt;&gt; Name and description.

128
00:07:10.730 --> 00:07:12.799
Why not the organization name?

129
00:07:12.799 --> 00:07:15.460
&gt;&gt; That comes from a different variable.

130
00:07:15.460 --> 00:07:19.405
&gt;&gt; Right, it does, but there's another
reason why we don't wanna do that yet.

131
00:07:19.405 --> 00:07:21.830
What would you think that reason might be?

132
00:07:21.830 --> 00:07:25.931
Why would we not want to make
organization name dynamic?

133
00:07:25.931 --> 00:07:28.350
&gt;&gt; Okay, you don't want that to change,
right, you want them all.

134
00:07:28.350 --> 00:07:30.021
&gt;&gt; Exactly, you don't want it to change.

135
00:07:30.021 --> 00:07:35.150
I don't wanna have to,
think about liter, [LAUGH] it's amazing.

136
00:07:35.150 --> 00:07:40.087
One of our community members from Stream
loves to call DevOps the janitors [LAUGH]

137
00:07:40.087 --> 00:07:41.200
of engineering.

138
00:07:41.200 --> 00:07:42.701
It's kind of true.

139
00:07:42.701 --> 00:07:45.899
[LAUGH] You have to think about
what you're gonna be sweeping and

140
00:07:45.899 --> 00:07:47.657
how much of it you wanna sweep man.

141
00:07:47.657 --> 00:07:52.269
And a lot of it is about thinking about,
how much am I actually

142
00:07:52.269 --> 00:07:57.260
trying to put on myself versus how
much can I make easily dynamic?

143
00:07:57.260 --> 00:07:58.629
So in this case,
&gt;&gt; So

144
00:07:58.629 --> 00:08:01.230
you're not gonna grab it
from variables anymore then?

145
00:08:01.230 --> 00:08:04.171
&gt;&gt; No, we are, but
we're just gonna leave that there, right?

146
00:08:04.171 --> 00:08:08.340
Because in a normal programming paradigm,
for example, right,

147
00:08:08.340 --> 00:08:13.180
if we did a iteration of a project so
that we're creating multiple projects,

148
00:08:13.180 --> 00:08:16.755
we don't want the organization
name to ever change, but

149
00:08:16.755 --> 00:08:20.193
we want the description in
the name to change, right?

150
00:08:20.193 --> 00:08:22.414
So we do want those be configurable.

151
00:08:22.414 --> 00:08:25.744
Those become a part of our
domain configuration, but

152
00:08:25.744 --> 00:08:28.264
anything that has to be static can stay.

153
00:08:28.264 --> 00:08:29.173
So what does that mean?

154
00:08:29.173 --> 00:08:34.954
Well, it means that now anybody
can come into my automation.

155
00:08:34.954 --> 00:08:37.669
If I was to say, hey, I need a new
project, could somebody make that for

156
00:08:37.669 --> 00:08:38.450
me really quickly?

157
00:08:38.450 --> 00:08:42.946
It's no longer even,
what module, how do I?

158
00:08:42.946 --> 00:08:46.553
It's literally just coming in here and
configuring it very simply.

159
00:08:46.553 --> 00:08:53.087
So in this case, what we'll do is,
is we'll do description, oops.

160
00:08:53.087 --> 00:08:54.476
&gt;&gt; Extreme description.

161
00:08:54.476 --> 00:08:58.697
&gt;&gt; Yeah, but
we're not gonna do name actually.

162
00:08:58.697 --> 00:09:01.192
Why might we not do name?

163
00:09:01.192 --> 00:09:04.858
&gt;&gt; Is that implied with line three?

164
00:09:04.858 --> 00:09:05.807
&gt;&gt; You mean line four.

165
00:09:05.807 --> 00:09:07.212
&gt;&gt; Yeah.
&gt;&gt; Yes, it is.

166
00:09:07.212 --> 00:09:09.167
So it's key value.

167
00:09:09.167 --> 00:09:13.822
So you could save yourself even
more time by just leaning on

168
00:09:13.822 --> 00:09:16.015
the logic of maps, right?

169
00:09:16.015 --> 00:09:22.205
So now I only need one value
to configure my projects.

170
00:09:22.205 --> 00:09:23.475
That's it, right?

171
00:09:23.475 --> 00:09:31.050
If I want another project, That's it.

172
00:09:31.050 --> 00:09:33.450
&gt;&gt; We need one key value.

173
00:09:33.450 --> 00:09:35.096
&gt;&gt; What do you mean?

174
00:09:35.096 --> 00:09:36.858
&gt;&gt; Wait, no, okay, you're right.

175
00:09:36.858 --> 00:09:37.379
&gt;&gt; Yeah.

176
00:09:37.379 --> 00:09:38.595
&gt;&gt; They can have redundant descriptions.

177
00:09:38.595 --> 00:09:40.862
&gt;&gt; Yeah, the same description but-
&gt;&gt; That's fine, yeah,

178
00:09:40.862 --> 00:09:44.547
the only thing that needs to be unique
is the name, basically, just so

179
00:09:44.547 --> 00:09:46.615
that they don't conflict each other.

180
00:09:46.615 --> 00:09:49.280
So we're gonna do this, right?

181
00:09:49.280 --> 00:09:51.790
Now that's our project.

182
00:09:51.790 --> 00:09:54.557
So what would be the key for
my workspace then?

183
00:09:54.557 --> 00:09:55.351
Can anyone tell me?

184
00:09:55.351 --> 00:09:56.961
Come on, copilot, don't ruin it.

185
00:09:56.961 --> 00:09:58.120
Can anyone tell me?

186
00:09:58.120 --> 00:10:00.740
[LAUGH] Can anyone tell me what the name?

187
00:10:00.740 --> 00:10:03.267
Copilot, all right,
it did it for me, all right.

188
00:10:03.267 --> 00:10:06.296
So anyways,
the power of AI showed it for me.

189
00:10:06.296 --> 00:10:11.254
But we're gonna give it the same key as
the name of the actual thing we're trying

190
00:10:11.254 --> 00:10:12.517
to create, right?

191
00:10:12.517 --> 00:10:16.097
This is how we start to make resources
individual and unique, and for

192
00:10:16.097 --> 00:10:17.900
the specific things that we want.

193
00:10:17.900 --> 00:10:23.167
And because copilot, the AI,
[LAUGH] was recognizing the patterns that

194
00:10:23.167 --> 00:10:28.369
I'm creating, it was able to easily
take care of the rest of it for me.

195
00:10:28.369 --> 00:10:35.040
Now it didn't do, well, it did, but
this is kind of up to you, okay?

196
00:10:35.040 --> 00:10:42.620
What might be one value we might actually
want to add to this that's not there?

197
00:10:45.483 --> 00:10:46.847
&gt;&gt; Project ID.

198
00:10:46.847 --> 00:10:49.260
&gt;&gt; Project, yeah, project, exactly.

199
00:10:49.260 --> 00:10:53.550
You might not want every workspace to
go to the same project, [LAUGH] right?

200
00:10:53.550 --> 00:10:57.521
Otherwise, that might not help
you with organization whatsoever.

201
00:10:57.521 --> 00:11:00.531
So again, AI only go so far.

202
00:11:00.531 --> 00:11:04.091
[LAUGH] We do want to include
project as well with this.

203
00:11:04.091 --> 00:11:07.125
And so, yeah, there you go,
sure enough it can now see.

204
00:11:07.125 --> 00:11:11.804
But I want to note another thing,
which is,

205
00:11:11.804 --> 00:11:18.129
I'm using strings as description and
execution mode, but

206
00:11:18.129 --> 00:11:23.329
I'm using module.project.id as my project.

207
00:11:23.329 --> 00:11:25.653
Why am I doing that?

208
00:11:25.653 --> 00:11:26.896
Can anyone tell me?

209
00:11:26.896 --> 00:11:30.029
Why would I not just,
I don't know, try and

210
00:11:30.029 --> 00:11:32.920
put a string there as well or something?

211
00:11:36.522 --> 00:11:41.480
So the dependency trees that we
talked about before are just

212
00:11:41.480 --> 00:11:45.061
natively supported in the code anywhere.

213
00:11:45.061 --> 00:11:49.844
So if I set a value to something, and
it's a resource that's going to be

214
00:11:49.844 --> 00:11:53.991
populated later,
it doesn't matter where it is in the code,

215
00:11:53.991 --> 00:11:58.724
it will always make sure to calculate
that dependency tree properly.

216
00:11:58.724 --> 00:12:03.620
This is something to think
about when you're talking

217
00:12:03.620 --> 00:12:07.225
about creating dynamicness, right?

218
00:12:07.225 --> 00:12:08.753
Is you need to think about,

219
00:12:08.753 --> 00:12:12.207
okay, sure, I can use nothing but
strings here, but I need to

220
00:12:12.207 --> 00:12:16.410
make sure that I actually have that
dependency tree being set up properly.

221
00:12:16.410 --> 00:12:19.972
And so you might miss it if you don't
actually have it in the right spot.

222
00:12:19.972 --> 00:12:24.963
And we do want it here because there might
be multiple projects that we create first,

223
00:12:24.963 --> 00:12:25.466
right?

224
00:12:25.466 --> 00:12:29.487
And so the first thing that's gonna happen
is because there's nothing in project that

225
00:12:29.487 --> 00:12:30.212
it depends on.

226
00:12:30.212 --> 00:12:32.870
It'll create the projects first, right?

227
00:12:32.870 --> 00:12:37.391
But then it'll also create the workspaces
after that because we have the project ID

228
00:12:37.391 --> 00:12:38.367
being injected.

229
00:12:38.367 --> 00:12:44.158
Now again, it's using code, so it will
take care of all the rest of it for us.

230
00:12:44.158 --> 00:12:47.939
&gt;&gt; So where is that project
ID coming from though?

231
00:12:47.939 --> 00:12:51.240
&gt;&gt; It's coming from the module right here.

232
00:12:51.240 --> 00:12:56.820
So when this is created,
module.project becomes module.project.

233
00:12:56.820 --> 00:12:58.185
&gt;&gt; But where's the ID though?

234
00:12:58.185 --> 00:13:01.529
&gt;&gt; Yes.
&gt;&gt; The ID is in what's called an exported

235
00:13:01.529 --> 00:13:03.320
value, or an output.

236
00:13:03.320 --> 00:13:06.487
So if we go back to
the Terraform workspace,

237
00:13:06.487 --> 00:13:09.662
right, this is a module that we're using.

238
00:13:09.662 --> 00:13:11.973
You're gonna notice that
there's two concepts here.

239
00:13:11.973 --> 00:13:14.923
There's inputs,
which is the values you give it,

240
00:13:14.923 --> 00:13:17.329
but then there's also outputs, right?

241
00:13:17.329 --> 00:13:20.028
Output variables
are the variables that you can

242
00:13:20.028 --> 00:13:22.940
then use later in other
parts of your code, right?

243
00:13:22.940 --> 00:13:26.670
So I'm gonna create a workspace, but
I need to know maybe the idea of

244
00:13:26.670 --> 00:13:30.604
the workspace or things like that,
then it would have an output for it.

245
00:13:30.604 --> 00:13:35.362
So for example,
let's go to project, right?

246
00:13:35.362 --> 00:13:38.370
Output, look at that ID, right?

247
00:13:38.370 --> 00:13:41.818
Because I still need to get that ID for
things I'm gonna use later.

248
00:13:41.818 --> 00:13:44.730
&gt;&gt; So
it's essentially it's being generated.

249
00:13:44.730 --> 00:13:45.907
&gt;&gt; Yeah.

250
00:13:45.907 --> 00:13:51.098
&gt;&gt; You're generating it with the, okay, so
it's some just random string or something?

251
00:13:51.098 --> 00:13:51.888
&gt;&gt; Yeah, exactly.

252
00:13:51.888 --> 00:13:53.863
It's whatever the provider uses, yeah.

253
00:13:53.863 --> 00:13:58.130
So this is the Terraform cloud
ID of the project, yeah.

254
00:13:58.130 --> 00:14:01.575
&gt;&gt; But this particular workspace
that we're defining in locals.

255
00:14:01.575 --> 00:14:06.653
My mental model so far has been that
main.tf is where our class definitions

256
00:14:06.653 --> 00:14:11.981
are, and locals.tf is where our particular
instances of those classes are.

257
00:14:11.981 --> 00:14:13.665
&gt;&gt; It'd be more like variables.

258
00:14:13.665 --> 00:14:21.290
Locals.tf is really just variables that
get passed to your classes, right?

259
00:14:21.290 --> 00:14:25.339
And those are then being
brought in as arguments, right?

260
00:14:25.339 --> 00:14:28.706
And then when you create a class,
you then can export attributes, right?

261
00:14:28.706 --> 00:14:34.669
Same thing, a resource can export outputs
that then you can reuse elsewhere, right?

262
00:14:34.669 --> 00:14:39.300
So for example, if we're using the class
dynamic, instantiate your class, and

263
00:14:39.300 --> 00:14:42.400
then you say, okay,
I need to make sure I export an ID.

264
00:14:42.400 --> 00:14:44.665
Well, then you say, this.id equals blah.

265
00:14:44.665 --> 00:14:47.586
Now it can be used elsewhere
in your application code.

266
00:14:47.586 --> 00:14:50.360
That's the same kind of approach we're
trying to do here with our automation.

