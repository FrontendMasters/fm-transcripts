WEBVTT

1
00:00:00.290 --> 00:00:04.853
Yeah, so you say a manual script, you mean
like, a script that has manual prompts in

2
00:00:04.853 --> 00:00:08.385
it or a script that you-
&gt;&gt; No, I mean, you run it manually, yeah,

3
00:00:08.385 --> 00:00:12.529
yeah, without using CI/CD, the only
other option you really have is just,

4
00:00:12.529 --> 00:00:14.397
[LAUGH] doing it yourself, right?

5
00:00:14.397 --> 00:00:18.551
Or taking scripts and you mentioned
as well, running it in a pipeline or

6
00:00:18.551 --> 00:00:19.877
something like that.

7
00:00:19.877 --> 00:00:23.539
Running scripts in
a pipeline isn't as bad, but

8
00:00:23.539 --> 00:00:26.945
I would also say lean
on the CI/CD provider.

9
00:00:26.945 --> 00:00:32.660
If they have tools that make it easier
to like run a container, do that.

10
00:00:32.660 --> 00:00:38.090
Don't run docker containers and
stuff if they can do it easier for you.

11
00:00:38.090 --> 00:00:43.073
And GitLab and CircleCI even have that,
where they have this concept of services.

12
00:00:43.073 --> 00:00:48.238
Here's a common example,
I wanna test my code against my database.

13
00:00:48.238 --> 00:00:50.942
How do I do that, right, in a CI pipeline?

14
00:00:50.942 --> 00:00:55.183
Well, there's two options, one, you mock
every request, which is really the better

15
00:00:55.183 --> 00:00:59.390
way of doing it, so that there's no
database required in the pipeline.

16
00:00:59.390 --> 00:01:04.570
Or your CI actually, while it runs tests,
creates that service or

17
00:01:04.570 --> 00:01:08.638
creates that database for
you, run some tests, and

18
00:01:08.638 --> 00:01:12.630
then gets rid of it,
some CI platforms can do that.

19
00:01:12.630 --> 00:01:17.054
And so if that's something that you need,
would you rather write that manually, and

20
00:01:17.054 --> 00:01:20.380
then have to figure out how to
maintain those commands, right?

21
00:01:20.380 --> 00:01:22.990
What happens if the cloud provider
changes how you run it, right?

22
00:01:22.990 --> 00:01:28.012
That's where it become, basically,
as much as you can avoid going into Bash.

23
00:01:28.012 --> 00:01:31.620
[LAUGH] Unless, you really
unless you really need to, yeah.

24
00:01:31.620 --> 00:01:35.858
&gt;&gt; So is a script that's like
run periodically on a cron job,

25
00:01:35.858 --> 00:01:38.547
only a step above manual scripting?

26
00:01:38.547 --> 00:01:42.010
&gt;&gt; Yes, yeah,
it's not what would be the difference.

27
00:01:43.060 --> 00:01:46.269
It's just not you doing
it every six hours,

28
00:01:46.269 --> 00:01:48.880
[LAUGH] it's kind of the same there.

29
00:01:48.880 --> 00:01:55.017
Now, if that's all you need,
that might be valuable, okay, cool.

30
00:01:55.017 --> 00:01:59.173
Do we have any questions about CI and
CD in chat or anywhere else?

31
00:02:01.909 --> 00:02:03.230
Yeah.

32
00:02:03.230 --> 00:02:09.090
&gt;&gt; Would you consider git hooks
pre-commit, pre-push as part of the CI?

33
00:02:09.090 --> 00:02:11.154
&gt;&gt; No, I wouldn't, cuz they're not,

34
00:02:11.154 --> 00:02:14.610
[LAUGH] they're run on
your computer locally.

35
00:02:14.610 --> 00:02:16.100
Do I think that they're helpful?

36
00:02:17.440 --> 00:02:21.436
No, not really,
nobody knows how to set them up right.

37
00:02:21.436 --> 00:02:24.641
Has anyone here used
git hooks efficiently?

38
00:02:24.641 --> 00:02:28.695
You have almost, you're the only
person in the room, [LAUGH].

39
00:02:28.695 --> 00:02:31.354
&gt;&gt; What do you use it for?

40
00:02:31.354 --> 00:02:32.569
&gt;&gt; Yeah, like what do you use it for?

41
00:02:32.569 --> 00:02:33.475
&gt;&gt; Basically,

42
00:02:33.475 --> 00:02:38.600
check the code before it actually
even gets pushed into the into git.

43
00:02:38.600 --> 00:02:39.830
&gt;&gt; What do you check?

44
00:02:39.830 --> 00:02:43.167
&gt;&gt; Basically,
linters upgrade versions, change logs,

45
00:02:43.167 --> 00:02:48.137
it adds a bunch of information about the
changes, make sure that it's compliant,

46
00:02:48.137 --> 00:02:49.910
it's basically linting.

47
00:02:49.910 --> 00:02:51.414
&gt;&gt; Yeah, okay, so it's like pre-commit.

48
00:02:51.414 --> 00:02:57.983
[INAUDIBLE]
&gt;&gt; Gotcha, so, My problem with

49
00:02:57.983 --> 00:03:03.570
git hooks and stuff like that in general
is nobody knows how to set them up.

50
00:03:03.570 --> 00:03:09.660
Sometimes they'll use node packages
to automatically add the hooks.

51
00:03:09.660 --> 00:03:11.745
Regardless, you have to figure out,

52
00:03:11.745 --> 00:03:15.864
it sounds like you guys probably have
a specific way to how you set up hooks.

53
00:03:15.864 --> 00:03:19.193
&gt;&gt; Yeah.
&gt;&gt; Yeah, if you do that and you can make

54
00:03:19.193 --> 00:03:25.590
it, so that they are not bypassable,
then maybe, it might be worth it.

55
00:03:25.590 --> 00:03:30.630
But in a scenario where, like,
are git hooks valuable if

56
00:03:30.630 --> 00:03:36.207
a person can commit without it running,
would be my question.

57
00:03:36.207 --> 00:03:39.070
What are they gonna do in that case?

58
00:03:39.070 --> 00:03:42.490
If I can commit, but they never run, and

59
00:03:42.490 --> 00:03:48.100
we've just found that pipelines
guarantee they always run.

60
00:03:48.100 --> 00:03:52.233
And so, [LAUGH] it's kind of like
a why can't we have nice things,

61
00:03:52.233 --> 00:03:55.270
[LAUGH] scenario and
it's just unfortunate.

62
00:03:55.270 --> 00:03:59.307
Git hooks are really powerful,
they're really nice, they are really nice,

63
00:03:59.307 --> 00:04:02.660
but they don't always run,
they might not be set up properly.

64
00:04:02.660 --> 00:04:06.163
Depending on the implementation, the
developer might not know how to run them.

65
00:04:06.163 --> 00:04:09.570
So they're just not as dependable
maybe would be the right word.

66
00:04:09.570 --> 00:04:11.840
You can use them, but
use them wisely, yeah, yeah.

67
00:04:15.510 --> 00:04:18.247
&gt;&gt; Can you explain that scenario again,
like,

68
00:04:18.247 --> 00:04:23.001
the ideal scenario of me wanting to test
my latest code against a database, and

69
00:04:23.001 --> 00:04:27.404
you said the ideal scenario is-
&gt;&gt; The ideal scenario is to mock those

70
00:04:27.404 --> 00:04:32.220
calls, so say I wanna test a database
call for like a query, right?

71
00:04:33.570 --> 00:04:37.283
If you didn't mock it, again, you have to
go through the process of figuring out how

72
00:04:37.283 --> 00:04:40.550
to get that database in the pipeline
when it's running, right?

73
00:04:40.550 --> 00:04:44.733
But if you mock it, what it means is is
that when your logic goes to make that

74
00:04:44.733 --> 00:04:47.509
request, it doesn't
actually make a request.

75
00:04:47.509 --> 00:04:53.400
You just have a piece of what we call
mock data that you expect it to return.

76
00:04:53.400 --> 00:04:58.109
And so what'll happen is, it's kind of
writing a script that only calls itself,

77
00:04:58.109 --> 00:05:01.675
versus writing a script that
actually has to call something.

78
00:05:01.675 --> 00:05:06.796
And so, for example, one of the words
that they have is called fixtures,

79
00:05:06.796 --> 00:05:11.749
which is just the idea of like,
this little piece of data is gonna be used

80
00:05:11.749 --> 00:05:16.155
in this test, and it will be used
as a response for this result.

81
00:05:16.155 --> 00:05:19.489
And then that mock makes it, so
you don't have to run databases, and

82
00:05:19.489 --> 00:05:22.530
I really strongly recommend that approach.

83
00:05:22.530 --> 00:05:26.536
Hippo doesn't do that, and
I can tell you right now,

84
00:05:26.536 --> 00:05:30.464
we probably spend half of
our CI money on databases.

85
00:05:30.464 --> 00:05:34.567
Just because every pipeline needs one,
and every developer got so

86
00:05:34.567 --> 00:05:39.490
comfortable with it that to the point now
where I'm like, can you just mock it?

87
00:05:39.490 --> 00:05:43.431
And they're like, it's not mocked
everywhere else, and I'm like,

88
00:05:43.431 --> 00:05:44.293
[SOUND] dang it.

89
00:05:44.293 --> 00:05:48.944
[LAUGH] It's a tough situation
that you can't get stuck in, but

90
00:05:48.944 --> 00:05:51.650
like mocking is the best way to go.

91
00:05:51.650 --> 00:05:54.400
&gt;&gt; You mean like at a unit test level?

92
00:05:54.400 --> 00:05:57.714
&gt;&gt; Well, it's not even, yeah, yeah, but

93
00:05:57.714 --> 00:06:02.910
like end-to-end testing,
isn't in the same pipeline.

94
00:06:02.910 --> 00:06:06.264
Yeah, end-to-end testing should be
ran elsewhere, I mean, on a cron or

95
00:06:06.264 --> 00:06:09.560
something like that, I guess,
does that answer your question?

96
00:06:09.560 --> 00:06:10.530
Okay, cool, yeah.

97
00:06:12.610 --> 00:06:18.605
&gt;&gt; Yeah, people are saying they use
pre-commit hooks for linting and

98
00:06:18.605 --> 00:06:24.090
running tests, and
then also it gets a faster feedback loop.

99
00:06:24.090 --> 00:06:28.732
So the code doesn't need to leave
the developers environment to check

100
00:06:28.732 --> 00:06:33.388
those tests, but it doesn't replace
the need for a CI/CD pipeline.

101
00:06:33.388 --> 00:06:36.333
&gt;&gt; Exactly, yeah, and
that's the challenge is like,

102
00:06:36.333 --> 00:06:41.112
if you're still gonna make the pipeline,
what is running in pre-commits that isn't

103
00:06:41.112 --> 00:06:44.950
running in the pipeline, right,
and where's that validation?

104
00:06:44.950 --> 00:06:48.565
With you guys, I'm sure you said,
there's actual commits happening,

105
00:06:48.565 --> 00:06:50.670
files are getting updated.

106
00:06:50.670 --> 00:06:52.580
You don't wanna actually push that,

107
00:06:52.580 --> 00:06:54.975
because it's manipulating
the code locally.

108
00:06:54.975 --> 00:06:59.206
But if it's just like running tests and
stuff like that, that can always be

109
00:06:59.206 --> 00:07:03.586
ran in the cloud, and guaranteed to be
ran every time you push it, so, yeah.

110
00:07:03.586 --> 00:07:09.668
&gt;&gt; Why would you not run Cypress
end-to-end tests in the CI?

111
00:07:18.251 --> 00:07:23.425
&gt;&gt; So the easiest way to put it is,
you have to think about what

112
00:07:23.425 --> 00:07:28.389
your goals are with testing,
and what are you testing,

113
00:07:28.389 --> 00:07:32.734
how often are you testing,
why are you testing?

114
00:07:32.734 --> 00:07:37.995
I do think that there is over testing,
where you test tons of tons of things,

115
00:07:37.995 --> 00:07:43.600
where it's like you don't really test
one edge case or two edge cases.

116
00:07:43.600 --> 00:07:48.220
If you have a scenario where you
wanna do actual end-to-end testing,

117
00:07:48.220 --> 00:07:53.381
then maybe at least it should be its own
pipeline that runs separately, right?

118
00:07:53.381 --> 00:07:57.931
Because when you think about what
end-to-end testing requires versus just

119
00:07:57.931 --> 00:08:02.180
running unit tests requires,
it's massively different.

120
00:08:02.180 --> 00:08:05.416
So then we say, okay, now,
I wanna workflow that does both,

121
00:08:05.416 --> 00:08:06.860
[LAUGH] you know what I mean?

122
00:08:06.860 --> 00:08:11.827
And that becomes really challenging,
I actually did implement it,

123
00:08:11.827 --> 00:08:16.280
so that our workflows at Hippo
run Cypress end-to-end, and

124
00:08:16.280 --> 00:08:19.293
they can run it in the pipelines per push.

125
00:08:19.293 --> 00:08:20.323
Do you know what that did?

126
00:08:20.323 --> 00:08:25.515
It added 20 minutes to every PR.

127
00:08:27.517 --> 00:08:28.125
Why?

128
00:08:28.125 --> 00:08:31.875
Because that's how long it takes
to run the end-to-end tests.

129
00:08:31.875 --> 00:08:35.312
So that's what we ended up doing was this,

130
00:08:35.312 --> 00:08:40.370
we ended up creating
end-to-end test repositories.

131
00:08:40.370 --> 00:08:44.222
So those run on their own, those have
the end-to-end tests in it for Cypress.

132
00:08:44.222 --> 00:08:46.965
The Cypress code doesn't
exist with the service,

133
00:08:46.965 --> 00:08:49.718
it exists over here in
the end-to-end test repo.

134
00:08:49.718 --> 00:08:53.197
And then that runs against the service
whenever we wanna update or

135
00:08:53.197 --> 00:08:55.840
change the tests, see what I'm saying?

136
00:08:55.840 --> 00:08:59.847
And so then we can have it, so what we
recently did is we actually made it,

137
00:08:59.847 --> 00:09:02.110
because they're over here.

138
00:09:02.110 --> 00:09:05.764
We can run end-to-end tests before
deployments, because we can trigger

139
00:09:05.764 --> 00:09:09.810
the end-to-end tests, and if they're
successful, then go, okay, cool.

140
00:09:09.810 --> 00:09:14.280
But if they're joined together,
you're just messing with a can of worms.

141
00:09:14.280 --> 00:09:15.904
So I would at least just say,

142
00:09:15.904 --> 00:09:19.164
separate them if you can to
make your life easier, yeah.

143
00:09:19.164 --> 00:09:24.139
&gt;&gt; Just somebody commented that they're
gonna move from Azure to GitHub,

144
00:09:24.139 --> 00:09:28.620
because it seems like GitHub is
investing a lot in this area.

145
00:09:28.620 --> 00:09:33.260
&gt;&gt; Yes, yeah, they are, GitHub actions is
really nice and it's getting a lot better.

