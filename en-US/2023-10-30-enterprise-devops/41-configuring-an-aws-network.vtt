WEBVTT

1
00:00:00.090 --> 00:00:05.440
So again, we have two new repos,
one for network and one for cluster.

2
00:00:05.440 --> 00:00:10.572
I'm gonna preface really quickly with
what we're about to do with saying, I do

3
00:00:10.572 --> 00:00:15.952
not expect you guys at all to understand
that interest cities of an Amazon network.

4
00:00:15.952 --> 00:00:20.864
So we're going to basically just make
a network that I kind of already

5
00:00:20.864 --> 00:00:22.398
configured for you.

6
00:00:22.398 --> 00:00:24.020
I'm not gonna go deep into what it is,

7
00:00:24.020 --> 00:00:27.160
I'll let you guys look at
the resources later to understand it.

8
00:00:27.160 --> 00:00:30.867
But basically just know
that we are going to create

9
00:00:30.867 --> 00:00:35.290
a pretty standardized enterprise
Amazon network, okay?

10
00:00:36.640 --> 00:00:40.484
So now that we have that-
&gt;&gt; By the way, I'll just

11
00:00:40.484 --> 00:00:44.322
mention we have a course on Frontend
Masters, AWS for front-end engineers.

12
00:00:44.322 --> 00:00:45.300
&gt;&gt; Perfect.
&gt;&gt; There's a lot of-

13
00:00:45.300 --> 00:00:46.244
&gt;&gt; Be sure to check out

14
00:00:46.244 --> 00:00:48.318
the course on AWS front-end engineers.

15
00:00:48.318 --> 00:00:50.708
It's a good one, it'll help you out.

16
00:00:50.708 --> 00:00:53.310
I didn't know that,
that was there, that's awesome.

17
00:00:53.310 --> 00:00:54.241
Okay, cool.

18
00:00:54.241 --> 00:00:56.411
So what we wanna do now really,

19
00:00:56.411 --> 00:01:01.512
is we wanna clone those repos because
we wanna start making automation.

20
00:01:01.512 --> 00:01:07.735
So I'm gonna say, gh pr or
gh clone, or, repo clone.

21
00:01:07.735 --> 00:01:15.611
And for me, mine are gonna be AWS network,
And AWS cluster.

22
00:01:19.835 --> 00:01:23.600
So now I have four automation repos,
right?

23
00:01:23.600 --> 00:01:25.204
Cool, okay.

24
00:01:25.204 --> 00:01:29.205
So let's go into network, okay?

25
00:01:29.205 --> 00:01:34.165
Now, I highly, highly, highly recommend
every single one of you going to

26
00:01:34.165 --> 00:01:38.277
the network repo, so
let's go to the network repo together.

27
00:01:42.541 --> 00:01:43.745
AWS network.

28
00:01:45.650 --> 00:01:49.063
And I'm gonna click on
the branch setup AWS automation.

29
00:01:49.063 --> 00:01:51.521
And you'll notice that this is
the only branch in this repo.

30
00:01:51.521 --> 00:01:53.821
This is because we only need
to set up the network once,

31
00:01:53.821 --> 00:01:54.979
[LAUGH] you know what I mean?

32
00:01:54.979 --> 00:01:57.304
And we're just gonna keep
making networks this way.

33
00:01:57.304 --> 00:02:01.840
Make a file for each of these locally,
just do that for me.

34
00:02:01.840 --> 00:02:07.208
So, go to the locals file,
copy that new file,

35
00:02:07.208 --> 00:02:10.310
locals.tf, paste it in.

36
00:02:10.310 --> 00:02:13.375
I'll explain it all in a second, but
let's just get all the code in here so

37
00:02:13.375 --> 00:02:14.174
that we save time.

38
00:02:14.174 --> 00:02:15.780
So we're gonna go to main.

39
00:02:15.780 --> 00:02:22.069
I'm gonna click the copy button
right here, name file main.tf.

40
00:02:22.069 --> 00:02:26.283
Paste it, close it, right?

41
00:02:26.283 --> 00:02:27.391
Go to the next one.

42
00:02:27.391 --> 00:02:32.038
Security group, copy it,

43
00:02:32.038 --> 00:02:37.498
name file security_group.tf

44
00:02:40.531 --> 00:02:42.426
Paste it in, right?

45
00:02:44.655 --> 00:02:47.058
Variables, copy it.

46
00:02:51.993 --> 00:02:55.307
Paste it in, okay?

47
00:02:55.307 --> 00:03:01.050
So we should have four files, locals,
main, security group, and variables, okay?

48
00:03:01.050 --> 00:03:05.951
Now, while you guys do that, I'm going
to explain what you're looking at.

49
00:03:05.951 --> 00:03:09.413
So we always want configuration.

50
00:03:09.413 --> 00:03:10.800
Always, always.

51
00:03:10.800 --> 00:03:14.378
Even if it may seem that there's
nothing that you can configure,

52
00:03:14.378 --> 00:03:18.230
try and at least identify something
that might make your life easier.

53
00:03:19.440 --> 00:03:24.299
One of the most challenging parts of
creating infrastructure and networking

54
00:03:24.299 --> 00:03:29.420
in specific is understanding how to
separate IP addresses and IP spacing.

55
00:03:29.420 --> 00:03:32.910
This is one of the reasons
why I'm doing this for you.

56
00:03:32.910 --> 00:03:37.819
What I have done is I have essentially
created an enterprise network in Amazon

57
00:03:37.819 --> 00:03:38.422
for you,

58
00:03:38.422 --> 00:03:44.040
which includes a database network with
a specific amount of IP address space.

59
00:03:44.040 --> 00:03:48.952
It includes an elastic cash network
with a subset of address space.

60
00:03:48.952 --> 00:03:53.640
It has an intra network or an intra
subnet, sorry, these are all subnets.

61
00:03:53.640 --> 00:03:58.450
Intra subnet with an address space,
private and public.

62
00:03:58.450 --> 00:04:02.824
So what a lot of this does is it
leans on the idea that you might need

63
00:04:02.824 --> 00:04:07.202
databases in the future,
you might need caching in the future.

64
00:04:07.202 --> 00:04:10.284
You might need completely
isolated resources in the future,

65
00:04:10.284 --> 00:04:12.832
you might need a private
network in the future, and

66
00:04:12.832 --> 00:04:15.514
you might need a public
network in the future, okay?

67
00:04:15.514 --> 00:04:20.163
We're not gonna use all of these
subnets but they're there for

68
00:04:20.163 --> 00:04:24.209
you to experiment with and,
take a look at as you want.

69
00:04:24.209 --> 00:04:28.023
The next file is our main.tf,
this thing's huge.

70
00:04:28.023 --> 00:04:32.997
[LAUGH] Well, it's actually not huge but
it's got a decent amount of stuff in here.

71
00:04:32.997 --> 00:04:38.732
If you are curious as to how I
am able to calculate via bits,

72
00:04:38.732 --> 00:04:43.546
[LAUGH] the address spaces of subnets,
I'm not.

73
00:04:43.546 --> 00:04:46.562
I'm using a very nice
module to do that for

74
00:04:46.562 --> 00:04:49.674
me which is the subnets hashicorp module.

75
00:04:49.674 --> 00:04:53.104
Now you might be like, well does that
mean that it's gonna create the subnets?

76
00:04:53.104 --> 00:04:53.954
Actually no.

77
00:04:53.954 --> 00:04:58.278
[LAUGH] It's a module literally just
there for computation, that's it.

78
00:04:58.278 --> 00:05:00.277
And you can do that with Terraform.

79
00:05:00.277 --> 00:05:04.643
If you wanted to, you could have a
repository that just does computations for

80
00:05:04.643 --> 00:05:07.865
you, and then you can reuse
that module in other places so

81
00:05:07.865 --> 00:05:10.370
that it will do those computations for
you.

82
00:05:10.370 --> 00:05:14.196
In this case, what we're really
doing is we're essentially saying,

83
00:05:14.196 --> 00:05:18.868
okay, I wanna use the module subnets, I'm
gonna give it a base cidr_block, right?

84
00:05:18.868 --> 00:05:24.392
And then every network, I'm gonna do
a little bit of four for four here,

85
00:05:24.392 --> 00:05:29.750
and it's going go through my
configuration in local subnets and azs.

86
00:05:29.750 --> 00:05:35.076
Now, why do I have subnets local,
but I have azs in vars?

87
00:05:35.076 --> 00:05:38.154
Can anyone guess why I might have
my availability zone in vars but

88
00:05:38.154 --> 00:05:39.185
my subnets locally?

89
00:05:42.426 --> 00:05:45.452
&gt;&gt; Because your availability changes
more often than your subnets?

90
00:05:45.452 --> 00:05:46.894
&gt;&gt; Exactly, yeah.

91
00:05:46.894 --> 00:05:52.143
So the idea is that whenever you create
an availability zone going forward,

92
00:05:52.143 --> 00:05:55.259
it's gonna take an exact
copy of the subnet or

93
00:05:55.259 --> 00:06:00.443
all the subnets in these availability
zones and put it in this one, right?

94
00:06:00.443 --> 00:06:03.793
So then you'll have elastic cache in a and
b, but

95
00:06:03.793 --> 00:06:08.478
then later on maybe you go, man,
I really wish we had c as well.

96
00:06:08.478 --> 00:06:12.889
Well, do you want to go in and
update all of that automation?

97
00:06:12.889 --> 00:06:17.945
No, what we can do, and we can go to our
next file, is in our variables file,

98
00:06:17.945 --> 00:06:22.929
we can make it so that we can really
manipulate our networks when we want to.

99
00:06:22.929 --> 00:06:29.215
So say if in the future I wanna go from
1AZ to 4, it's one code change, right?

100
00:06:29.215 --> 00:06:33.136
Now you'll notice I don't have
defaults here, there's a reason for

101
00:06:33.136 --> 00:06:35.669
that and
I'm gonna show it to you in a second.

102
00:06:35.669 --> 00:06:39.859
But don't put the defaults in,
do not put anything in here, right?

103
00:06:39.859 --> 00:06:45.651
We're simply telling Terraform we
want these externally configurable.

104
00:06:45.651 --> 00:06:49.048
Anything else in the main is really
just all related to the network

105
00:06:49.048 --> 00:06:52.895
creation itself, you can look at that
logic and get an idea of how I did it.

106
00:06:52.895 --> 00:06:57.304
But just to note,
as you used my modules, right?

107
00:06:57.304 --> 00:07:02.636
There are also as I mentioned before
official Amazon modules that can help.

108
00:07:02.636 --> 00:07:08.491
My modules are wrapped modules that do
not have existing code, essentially.

109
00:07:08.491 --> 00:07:10.099
So I don't recommend going out and

110
00:07:10.099 --> 00:07:12.327
creating automation
modules you don't need.

111
00:07:12.327 --> 00:07:15.980
You know there's 1,000s of developers in
the world who are willing to help and

112
00:07:15.980 --> 00:07:19.339
there's great repositories out there
that can help you get there quicker.

113
00:07:19.339 --> 00:07:23.850
And honestly, I do think the module for
vpc is really good.

114
00:07:23.850 --> 00:07:28.276
As you see, it's got the things we care
about zass, cidr, or database subnets.

115
00:07:28.276 --> 00:07:33.047
It's just calculating these for
me to make it a little easier.

116
00:07:33.047 --> 00:07:36.676
Cool, okay, so we've got our main.tf,
our security group.

117
00:07:36.676 --> 00:07:40.022
If you've ever used Amazon before,
this is all security group stuff,

118
00:07:40.022 --> 00:07:41.650
I basically wired this up for you.

119
00:07:41.650 --> 00:07:45.430
So that if you do wanna play around and
provision a database on a specific subnet,

120
00:07:45.430 --> 00:07:47.054
you can still access it and stuff.

121
00:07:47.054 --> 00:07:49.330
So take a look at that later,
you're more than welcome to.

122
00:07:49.330 --> 00:07:53.730
And again,
the last one is variables, okay?

123
00:07:53.730 --> 00:07:57.776
Now one of the things we're gonna
wanna do is we're gonna wanna to init.

124
00:07:57.776 --> 00:08:00.629
So we're gonna do terraform init.

125
00:08:00.629 --> 00:08:05.172
Now again, you don't need Doppler
here because there's no back end and

126
00:08:05.172 --> 00:08:08.300
this is actually going to
be a reusable module, so

127
00:08:08.300 --> 00:08:11.890
we're never gonna connect
this directly to Terraform.

128
00:08:11.890 --> 00:08:15.584
This is not a one to one repo,
I'll explain why in a second, so

129
00:08:15.584 --> 00:08:16.873
let's keep moving.

130
00:08:16.873 --> 00:08:20.676
But do an init for me and
then do a validate.

131
00:08:20.676 --> 00:08:24.039
If you init and validate fine,
you should be good to go.

132
00:08:29.181 --> 00:08:31.971
I'll give you guys a second to catch
up on that cuz we're actually moving

133
00:08:31.971 --> 00:08:32.711
pretty quick now.

134
00:08:32.711 --> 00:08:37.594
&gt;&gt; So not changing to a different
branch wouldn't have been a problem?

135
00:08:37.594 --> 00:08:41.594
&gt;&gt; It would not be a problem, no, we're
gonna change your branch in a second,

136
00:08:41.594 --> 00:08:42.353
yeah, yeah.

137
00:08:42.353 --> 00:08:43.448
&gt;&gt; I'm noticing now that you're still in

138
00:08:43.448 --> 00:08:44.091
main-
&gt;&gt; Mean, yeah.

139
00:08:44.091 --> 00:08:45.357
&gt;&gt; As well, so I did not mess up.

140
00:08:45.357 --> 00:08:46.519
&gt;&gt; Good catch, good catch.

141
00:08:46.519 --> 00:08:49.445
That's good,
you're getting the rhythm now.

142
00:08:49.445 --> 00:08:50.680
And that's important.

143
00:08:50.680 --> 00:08:51.881
That's important.

144
00:08:51.881 --> 00:08:57.902
So, as mentioned, we are still on main,
if you notice, in my repo, right?

145
00:08:57.902 --> 00:09:00.349
So I do wanna quickly check out a branch.

146
00:09:00.349 --> 00:09:03.657
And in this case, we'll say
add-resources or something like that,

147
00:09:03.657 --> 00:09:05.349
the name doesn't matter, right?

148
00:09:05.349 --> 00:09:08.017
But we are just gonna create
a nice little branch.

149
00:09:08.017 --> 00:09:10.540
And then I'm gonna do git status,

150
00:09:10.540 --> 00:09:15.155
git add, locals, main,
security_group, and variables.

151
00:09:15.155 --> 00:09:18.412
Again, we don't ever really
need to add the terraform.lock,

152
00:09:18.412 --> 00:09:20.115
it's up to you if you wanna do it.

153
00:09:20.115 --> 00:09:25.009
I'm gonna hit enter, git status, and

154
00:09:25.009 --> 00:09:31.991
then git commit- m,
feat: added network resources.

155
00:09:31.991 --> 00:09:35.160
Great, I'm gonna push it up.

156
00:09:41.665 --> 00:09:45.904
Wait, no,
this was just add-resources, sorry.

157
00:09:51.006 --> 00:09:55.368
Okay, so
now we're gonna create a PR, right?

158
00:09:55.368 --> 00:09:57.952
We're gonna follow the same process
we did with the other repos.

159
00:10:01.340 --> 00:10:05.105
So again, I did ghpr create,
gave it a title,

160
00:10:05.105 --> 00:10:08.398
which it might auto-populate for you.

161
00:10:08.398 --> 00:10:11.217
If it does, then that's awesome.

162
00:10:11.217 --> 00:10:13.211
Or, again, you can go to GitHub itself.

163
00:10:16.710 --> 00:10:18.888
And then I'm gonna go to the PR.

164
00:10:18.888 --> 00:10:23.329
So now I'm in my PR, and at this point
really you should give this to someone

165
00:10:23.329 --> 00:10:27.579
else there's so much stuff in here
you don't wanna do this on your own.

166
00:10:27.579 --> 00:10:30.764
So I'd recommend going to a teammate,
saying, hey, can I get an approval?

167
00:10:30.764 --> 00:10:34.125
I just made an entire network,
can you please look at it and

168
00:10:34.125 --> 00:10:35.643
let me know it looks good?

169
00:10:35.643 --> 00:10:39.400
So then somebody approves it, check,
check, check, all looks good.

170
00:10:39.400 --> 00:10:40.310
Great, okay, cool.

171
00:10:40.310 --> 00:10:41.374
Let's go ahead and merge it in.

172
00:10:41.374 --> 00:10:43.757
So we'll go here, and
we'll go Squash and Merge.

173
00:10:46.544 --> 00:10:48.234
Yeah, did you have a question?

174
00:10:48.234 --> 00:10:49.241
Okay, no.

175
00:10:49.241 --> 00:10:50.116
&gt;&gt; I had to say squash.

176
00:10:50.116 --> 00:10:52.407
&gt;&gt; Got you, yeah.

177
00:10:52.407 --> 00:10:54.021
Squash, cool.

178
00:10:54.021 --> 00:10:56.792
So what did we just do?

179
00:10:56.792 --> 00:10:59.354
Well, we know we want an Amazon network,

180
00:10:59.354 --> 00:11:02.662
but we actually know we want
a lot of Amazon networks.

181
00:11:02.662 --> 00:11:06.045
So why didn't we go to workspaces and
[SOUND]?

182
00:11:06.045 --> 00:11:11.410
Well, because this is kind of
like a many-to-many scenario.

183
00:11:11.410 --> 00:11:15.185
Where we know that we wanna
create a lot of networks, right?

184
00:11:15.185 --> 00:11:19.457
So let's get the automation in place to
where we can make this network as dynamic

185
00:11:19.457 --> 00:11:20.558
as we want, right?

186
00:11:20.558 --> 00:11:25.550
AZs, all the other things that we added,
right, CIDR, all of that.

187
00:11:25.550 --> 00:11:28.850
And then we're gonna do the exact
same thing for the cluster.

188
00:11:28.850 --> 00:11:32.735
So we're basically setting
up these resources before

189
00:11:32.735 --> 00:11:35.952
we connect them to Terraform Cloud, right?

190
00:11:35.952 --> 00:11:40.268
So realistically, if you wanted, you could
do like a local plan and apply with your

191
00:11:40.268 --> 00:11:44.292
AWS credentials, and you could actually
create a network locally, right?

192
00:11:44.292 --> 00:11:45.301
But we don't wanna do that.

193
00:11:45.301 --> 00:11:50.754
We don't wanna create it locally, however
GitOps is our source of truth, right?

194
00:11:50.754 --> 00:11:55.348
So if GitOps is our source of truth then
the repo has got to be there first before

195
00:11:55.348 --> 00:11:58.260
we tell the workspaces
to start synchronizing.

