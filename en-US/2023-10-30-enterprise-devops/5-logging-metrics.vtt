WEBVTT

1
00:00:00.000 --> 00:00:04.880
I do wanna say that I apologize that I did
not learn the I before E except after C

2
00:00:04.880 --> 00:00:05.420
thing.

3
00:00:05.420 --> 00:00:09.061
So if you saw the word experience
spelt wrong, I just can't spell, so

4
00:00:09.061 --> 00:00:10.060
sorry about that.

5
00:00:10.060 --> 00:00:12.850
But I did get a few people
[LAUGH] messaging me about that.

6
00:00:12.850 --> 00:00:19.357
So one other thing, I went ahead and
made the presentation repo public.

7
00:00:19.357 --> 00:00:23.451
So if you guys do wanna actually get
access to the presentation, at least now,

8
00:00:23.451 --> 00:00:27.749
start going through any of the previous
slides and stuff like that, feel free to.

9
00:00:27.749 --> 00:00:33.513
&gt;&gt; Is logging part of DevOps
compared to developers?

10
00:00:33.513 --> 00:00:40.110
&gt;&gt; Yeah, logging is a really,
really touchy subject, [LAUGH] honestly.

11
00:00:40.110 --> 00:00:45.290
You want to make it so
that your devs can find the logs, right?

12
00:00:45.290 --> 00:00:49.108
What you don't want is developers
coming into your chat and being like,

13
00:00:49.108 --> 00:00:51.560
it's broken, but I don't know how, right?

14
00:00:51.560 --> 00:00:56.178
If that happens,
then that's something where you fail to

15
00:00:56.178 --> 00:01:00.622
being sure that they can access logs or
stuff like that.

16
00:01:00.622 --> 00:01:04.111
Yeah, oftentimes, again, going back
to the whole, no, I pushed something,

17
00:01:04.111 --> 00:01:06.400
something's broken,
I don't know what's going on.

18
00:01:06.400 --> 00:01:09.389
Do you know what the first
question I ask is?

19
00:01:09.389 --> 00:01:10.855
&gt;&gt; What error messages are you getting?

20
00:01:10.855 --> 00:01:12.330
&gt;&gt; Yeah, have you checked the logs?

21
00:01:12.330 --> 00:01:15.733
[LAUGH] If you don't check the logs,

22
00:01:15.733 --> 00:01:20.508
I can check them for you,
but somebody's got to.

23
00:01:20.508 --> 00:01:23.452
And so
I think that's the important part of it,

24
00:01:23.452 --> 00:01:26.258
is just making sure that
you have that there.

25
00:01:26.258 --> 00:01:29.863
And that you have a good practice
in place to where people,

26
00:01:29.863 --> 00:01:32.450
people shouldn't expect you to do that.

27
00:01:32.450 --> 00:01:36.380
Anyone can look up [LAUGH] a log.

28
00:01:36.380 --> 00:01:41.333
So empowering them, yeah,
the infrastructure under it,

29
00:01:41.333 --> 00:01:44.811
yes, but anything above it, no, yeah.

30
00:01:46.918 --> 00:01:47.594
Yeah, go ahead.

31
00:01:47.594 --> 00:01:51.434
&gt;&gt; Same logic, I guess,
should be applied to metrics, traces,

32
00:01:51.434 --> 00:01:55.939
if you have all of the observability,
I guess, or implemented for them?

33
00:01:55.939 --> 00:02:00.487
&gt;&gt; Yeah, I mean, so metrics and
tracing are also not, honestly,

34
00:02:00.487 --> 00:02:05.135
a lot of them aren't really used,
like APMs and stuff like that.

35
00:02:05.135 --> 00:02:10.931
If you do get access to an APM, the best
thing I can say with that is really try

36
00:02:10.931 --> 00:02:17.388
and only have the metrics you care about
in there because it can become ridiculous.

37
00:02:17.388 --> 00:02:21.939
[LAUGH] And so have a real

38
00:02:21.939 --> 00:02:26.257
purpose to using it.

39
00:02:26.257 --> 00:02:31.075
And then also, yeah, isolate it so that
metrics aren't just in one huge dashboard.

40
00:02:31.075 --> 00:02:33.496
Cuz I think that's something
that'll happen a lot, too,

41
00:02:33.496 --> 00:02:34.910
is people implement JetMetrics.

42
00:02:34.910 --> 00:02:41.047
But then they don't think about like,
okay, now we need metrics per service and

43
00:02:41.047 --> 00:02:45.214
its own UI that I can send
a developer to test and stuff.

44
00:02:45.214 --> 00:02:48.700
Grafana, good example of that,
nobody likes using Grafana,

45
00:02:48.700 --> 00:02:51.801
although it's fantastic,
[LAUGH] you know what I mean?

46
00:02:51.801 --> 00:02:54.664
No devs wanna use Grafana.

47
00:02:54.664 --> 00:02:59.038
And I'll be honest,
we have a Grafana in every environment.

48
00:02:59.038 --> 00:03:03.593
Do you know how many times I get
questions about Grafana daily?

49
00:03:03.593 --> 00:03:07.750
It's just nobody uses it, so
experience is important, yeah.

50
00:03:07.750 --> 00:03:11.608
&gt;&gt; So to summarize,
logging is more observability.

51
00:03:11.608 --> 00:03:15.504
You can facilitate observability
through DevOps principles, but

52
00:03:15.504 --> 00:03:19.202
to say that it's DevOps' responsibility,
it's kind of not.

53
00:03:19.202 --> 00:03:25.313
&gt;&gt; 100%, yeah, your job is just to
give them the tools to be successful,

54
00:03:25.313 --> 00:03:29.390
yeah, not to make them successful,
[LAUGH] yeah.

55
00:03:29.390 --> 00:03:32.848
&gt;&gt; I guess cuz there's application
logging at one level, and that's

56
00:03:32.848 --> 00:03:37.049
definitely a developer own, cuz that's
what they're writing and building in.

57
00:03:37.049 --> 00:03:42.054
But then when you have those meta services
that are consuming all those different

58
00:03:42.054 --> 00:03:47.070
application logs, I'm hearing you say
it's kind of a hybrid responsibility.

59
00:03:47.070 --> 00:03:52.557
&gt;&gt; Okay, so now what you're actually
walking into is not really exactly

60
00:03:52.557 --> 00:03:57.766
what I do, but it is something that
DevOps is kinda becoming more,

61
00:03:57.766 --> 00:03:59.640
which is Platform Ops.

62
00:03:59.640 --> 00:04:02.690
It's the concept of what you just said.

63
00:04:02.690 --> 00:04:07.152
Well, we have services that
are owned by developers,

64
00:04:07.152 --> 00:04:11.420
who owns the gateways and
everything in the middle.

65
00:04:11.420 --> 00:04:16.120
Who owns the libraries that everyone uses,
right, stuff like that.

66
00:04:16.120 --> 00:04:23.690
That's really where Platform Ops comes in,
platform is really just what it's called.

67
00:04:23.690 --> 00:04:28.535
But the idea behind it is that
they focus on more of the logical

68
00:04:28.535 --> 00:04:31.675
parts of the infrastructure, right?

69
00:04:31.675 --> 00:04:36.227
I'm just building bricks, so
to speak, I'm not sitting down and

70
00:04:36.227 --> 00:04:40.863
actually working in JavaScript,
Go, right, other languages and

71
00:04:40.863 --> 00:04:43.410
trying to solve problems like that.

72
00:04:43.410 --> 00:04:46.274
And so platform can help with that,

73
00:04:46.274 --> 00:04:50.859
because platform can then
take on that responsibility.

74
00:04:50.859 --> 00:04:53.252
It takes that responsibility
off the DevOps team, and

75
00:04:53.252 --> 00:04:56.380
it still lets the DevOps team focus
on what they're trying to focus on.

76
00:04:56.380 --> 00:05:01.770
If you blur that line, then DevOps
becomes more involved in other things.

77
00:05:01.770 --> 00:05:05.108
It's really important to
keep that separation,

78
00:05:05.108 --> 00:05:09.960
because the reality of it is,
DevOps is just a really limited resource.

79
00:05:09.960 --> 00:05:13.070
You are a limited resource that's
being shared across the whole company.

80
00:05:13.070 --> 00:05:18.195
So that's probably the best
way to look at it, yeah.

81
00:05:18.195 --> 00:05:24.366
Okay, so there's one other
thing that happens quite a bit,

82
00:05:24.366 --> 00:05:30.179
which is if I'm in DevOps,
do I need to know everything?

83
00:05:30.179 --> 00:05:34.330
No, you don't, you do not, no.

84
00:05:34.330 --> 00:05:39.013
I will be honest with you, I don't even
fully know all of our features [LAUGH] in

85
00:05:39.013 --> 00:05:40.682
our company that I work at.

86
00:05:40.682 --> 00:05:47.190
I don't, I don't have to, though.

87
00:05:47.190 --> 00:05:53.540
So no, it's not, but what I focus on is
very much the only thing I focus on, yeah.

