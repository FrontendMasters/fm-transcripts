WEBVTT

1
00:00:00.090 --> 00:00:03.522
The next thing I wanna do is I wanna
talk about GitHub really quickly,

2
00:00:03.522 --> 00:00:06.280
because this is the next
thing that we need to set up.

3
00:00:06.280 --> 00:00:12.411
So in GitHub, this is your main
GitHub login page panel thing, right?

4
00:00:12.411 --> 00:00:16.445
If you haven't already, which I wouldn't
be surprised if you already have,

5
00:00:16.445 --> 00:00:20.232
the first thing you really do when you
get started on GitHub is you add an SSH

6
00:00:20.232 --> 00:00:20.984
key, right?

7
00:00:20.984 --> 00:00:24.397
You need to create an SSH key so that
you can start pushing code to GitHub and

8
00:00:24.397 --> 00:00:25.288
things like that.

9
00:00:25.288 --> 00:00:28.502
And so in this case, what we wanna
do after we set up Doppler is

10
00:00:28.502 --> 00:00:31.161
we wanna make sure that we
can push code to GitHub.

11
00:00:31.161 --> 00:00:35.917
And so what we're gonna do is we're
gonna go to our profile in GitHub,

12
00:00:35.917 --> 00:00:37.378
go down to Settings.

13
00:00:39.653 --> 00:00:44.366
Right, and then once you click on
Settings, go to SSH and GPG keys.

14
00:00:44.366 --> 00:00:49.617
Now, notice I have a lot of SSH keys
cuz I use a lot of different systems.

15
00:00:49.617 --> 00:00:51.166
But realistically,

16
00:00:51.166 --> 00:00:55.903
what you wanna do is you wanna
create an SSH key for your computer.

17
00:00:55.903 --> 00:01:02.480
I do have a document here that can help us
with this, and we can kinda go through it.

18
00:01:02.480 --> 00:01:05.894
So if you wanna generate an SSH key,
whether on Mac, Windows, or

19
00:01:05.894 --> 00:01:08.080
Linux, it's pretty straightforward.

20
00:01:08.080 --> 00:01:11.360
You're just gonna use
the ssh-keygen command.

21
00:01:11.360 --> 00:01:13.659
Does anyone here not have a key,
by the way?

22
00:01:13.659 --> 00:01:14.216
You don't have a key?

23
00:01:14.216 --> 00:01:14.985
Yeah, it's fine, no worries, no worries.

24
00:01:14.985 --> 00:01:18.700
&gt;&gt; I use GitLab, so this is-
&gt;&gt; Okay, yeah, no worries, no worries.

25
00:01:18.700 --> 00:01:20.910
That makes sense.

26
00:01:20.910 --> 00:01:22.811
But you have ssh-keygen and
all that stuff?

27
00:01:22.811 --> 00:01:24.125
Okay, cool, cool, cool, cool, cool.

28
00:01:24.125 --> 00:01:27.729
Yeah, so in this case,
you'll want to generate your key first.

29
00:01:27.729 --> 00:01:34.549
So one note about ed25519 versus RSA,

30
00:01:34.549 --> 00:01:41.380
it's not fully supported yet everywhere.

31
00:01:41.380 --> 00:01:46.923
Amazon, for example,
still uses RSA encryptions and ciphers.

32
00:01:46.923 --> 00:01:50.892
So just be aware of that if you
wanna use this key anywhere

33
00:01:50.892 --> 00:01:55.621
else that you might wanna actually
do the RSA because, as it says,

34
00:01:55.621 --> 00:01:59.440
a legacy system that might
not support that key yet.

35
00:01:59.440 --> 00:02:02.938
With GitHub and everything we're doing,
it's totally fine, so

36
00:02:02.938 --> 00:02:04.441
it doesn't really matter.

37
00:02:04.441 --> 00:02:07.158
So yeah, you're gonna want to
paste this command in, and

38
00:02:07.158 --> 00:02:08.881
then you're going to want to run it.

39
00:02:08.881 --> 00:02:12.614
And so you can see it generates your key.

40
00:02:12.614 --> 00:02:15.219
It might ask you some questions,
like where to save the key file.

41
00:02:15.219 --> 00:02:18.539
You can save it to the default location.

42
00:02:18.539 --> 00:02:22.841
But at the end of the day,
you should be able to have that created.

43
00:02:22.841 --> 00:02:27.397
And it might be in Users, like it says,
Users/YOU/.ssh and stuff like that.

44
00:02:30.012 --> 00:02:34.009
Okay, we don't have to worry about
adding an SSH key to our agent cuz

45
00:02:34.009 --> 00:02:35.564
we're not gonna do that.

46
00:02:35.564 --> 00:02:38.373
I don't need the security key.

47
00:02:39.715 --> 00:02:42.269
Okay, well, I guess it doesn't really
actually show you how to add it.

48
00:02:42.269 --> 00:02:44.886
So, yeah, here it is,
Add a new SSH key, there we go.

49
00:02:44.886 --> 00:02:49.825
So after you've created your SSH key,
the next thing

50
00:02:49.825 --> 00:02:54.892
you wanna do is you wanna
copy the public file, right?

51
00:02:54.892 --> 00:03:00.085
The public file, not the private file,
the .pub file is the key that actually

52
00:03:00.085 --> 00:03:05.446
tells GitHub, hey, this is the key I want
to let access into my account, right?

53
00:03:05.446 --> 00:03:09.194
This is something every
developer should have.

54
00:03:09.194 --> 00:03:11.603
Every developer should have an SSH key.

55
00:03:11.603 --> 00:03:13.987
They should be able to
manage this SSH key.

56
00:03:13.987 --> 00:03:17.904
And it's their responsibility
to do all of that, essentially.

57
00:03:17.904 --> 00:03:21.192
They dox their SSH key,
it's on them [LAUGH] but

58
00:03:21.192 --> 00:03:23.732
it is something to just be aware of.

59
00:03:23.732 --> 00:03:26.574
Keep it backed up, keep it safe.

60
00:03:26.574 --> 00:03:29.426
I've definitely been in circumstances
where I've had SSH keys, and

61
00:03:29.426 --> 00:03:31.078
then I've accidentally deleted them.

62
00:03:31.078 --> 00:03:32.379
I've never been able to use them again.

63
00:03:32.379 --> 00:03:37.723
I lost access to servers just because
I didn't keep a good copy of it.

64
00:03:37.723 --> 00:03:42.223
So just make sure to keep it backed up and
safe.

65
00:03:42.223 --> 00:03:47.583
Once you've got the pub file,
all you need to do is go back

66
00:03:47.583 --> 00:03:53.166
to this page here and
then click New SSH key, give it a name,

67
00:03:53.166 --> 00:03:58.770
myexamplekey, and
then paste in your actual key.

68
00:03:58.770 --> 00:04:03.586
Once you do that, make sure the key
type is on Authentication, and

69
00:04:03.586 --> 00:04:05.310
then click Add SSH key.

70
00:04:05.310 --> 00:04:10.204
And then once you've done that, you
should now have an SSH key on GitHub and

71
00:04:10.204 --> 00:04:12.370
ready for you to push.

72
00:04:12.370 --> 00:04:18.015
The next thing we wanna do is we
actually wanna create a token for

73
00:04:18.015 --> 00:04:20.380
GitHub as well, right?

74
00:04:20.380 --> 00:04:24.670
We have SSH for cloning repositories and
things like that.

75
00:04:24.670 --> 00:04:28.258
But Terraform actually uses the API,
right,

76
00:04:28.258 --> 00:04:32.590
to create repositories and
all that kinda stuff.

77
00:04:32.590 --> 00:04:37.178
And so in this scenario, what we actually
wanna do is we wanna create what's called

78
00:04:37.178 --> 00:04:39.481
a fine-grained personal access token.

79
00:04:39.481 --> 00:04:44.114
And the way that you do that is you click,
where is it?

80
00:04:44.114 --> 00:04:49.496
It's on the left-hand side, scroll down,
Developer settings, there it is.

81
00:04:49.496 --> 00:04:53.125
So if I click on Developer
settings &gt; Personal access tokens,

82
00:04:53.125 --> 00:04:58.544
you'll see that there's two options here,
Fine-grained tokens and Tokens (classic).

83
00:04:58.544 --> 00:05:00.693
You might be used to these tokens here.

84
00:05:00.693 --> 00:05:02.875
As a matter of fact,
you'll see I have one here.

85
00:05:02.875 --> 00:05:07.101
However, I do recommend you using
fine-grained tokens going forward.

86
00:05:07.101 --> 00:05:08.042
The reason for

87
00:05:08.042 --> 00:05:13.143
that is because fine-grained tokens
are scoped to specific accounts versus

88
00:05:13.143 --> 00:05:18.879
a personal token gives you access to every
account that you're connected to, right?

89
00:05:18.879 --> 00:05:23.901
So that's another reason why
they went with this approach was

90
00:05:23.901 --> 00:05:31.060
because you'll see here, I have fem-eci,
which is my little profile picture there.

91
00:05:31.060 --> 00:05:32.747
But then I also have a terraform-github,
which is this one right here, right?

92
00:05:32.747 --> 00:05:35.086
The TLDR is that we wanna
generate a new token.

93
00:05:35.086 --> 00:05:37.504
So I'm gonna click on Generate new token.

94
00:05:37.504 --> 00:05:43.759
You might have to pass a passkey.

95
00:05:43.759 --> 00:05:45.100
Shoot, okay, hang on [LAUGH] security.

96
00:05:45.100 --> 00:05:48.499
So once you get to the new fine-grained
personal access token section,

97
00:05:48.499 --> 00:05:49.790
you can then give it a name.

98
00:05:49.790 --> 00:05:50.793
So we'll give it a name.

99
00:05:50.793 --> 00:05:58.602
In this case, what we're gonna call it
is we're gonna call it fem-eci, github.

100
00:06:00.602 --> 00:06:03.920
Right, we're gonna give it
a expiration of 90 days.

101
00:06:03.920 --> 00:06:08.110
Now, I recommend,
always give tokens expirations.

102
00:06:09.510 --> 00:06:11.449
Mostly because when
people leave companies,

103
00:06:11.449 --> 00:06:12.947
they didn't realize they made it.

104
00:06:12.947 --> 00:06:16.279
[LAUGH] And
that's when you can get security exploits,

105
00:06:16.279 --> 00:06:19.840
people getting into your systems,
all that kinda stuff.

106
00:06:19.840 --> 00:06:24.400
So I know it sucks, I know it's annoying,
just let it fail, it's fine.

107
00:06:24.400 --> 00:06:27.412
You'll know when the token
isn't there anymore.

108
00:06:27.412 --> 00:06:32.309
And at that point, 90 days from now,
it's a problem to solve 90 days from now.

109
00:06:32.309 --> 00:06:37.252
[LAUGH] That's probably the easiest way
to put it, it's a 90-day later problem.

110
00:06:37.252 --> 00:06:42.222
But really, in my mind, I would rather
do this than be terrified that a key is

111
00:06:42.222 --> 00:06:45.190
gonna get exploited or
something like that.

112
00:06:45.190 --> 00:06:49.070
The next thing that we wanna do is we
wanna select the resource owner, right?

113
00:06:49.070 --> 00:06:50.930
And so you'll see here,
I have three resource owners.

114
00:06:50.930 --> 00:06:56.782
I have my personal one, Hippo, and
then the company that I own, ALT-F4-LLC.

115
00:06:56.782 --> 00:07:00.009
For now, we're just gonna use
our personal accounts, right?

116
00:07:00.009 --> 00:07:01.980
So we're just gonna click on personal.

117
00:07:01.980 --> 00:07:05.797
There's one caveat to this
in what we're doing, okay?

118
00:07:05.797 --> 00:07:09.882
And that is is that you can't
do teams with personal accounts.

119
00:07:09.882 --> 00:07:13.670
So the one thing we will not have
teams in for this is GitHub, and

120
00:07:13.670 --> 00:07:17.330
it's just a pure limitation,
unfortunately, of GitHub.

121
00:07:17.330 --> 00:07:19.571
If we wanted to have teams,
I would have to pay for

122
00:07:19.571 --> 00:07:21.441
every single one of your licenses here.

123
00:07:21.441 --> 00:07:24.404
[LAUGH] So
we just couldn't do that with this.

124
00:07:24.404 --> 00:07:28.861
So if it was a company, you would put
teams into your GitHub automation, and

125
00:07:28.861 --> 00:07:32.987
then you'd create your teams through
that and give access and stuff.

126
00:07:32.987 --> 00:07:34.526
Because we're not doing that,

127
00:07:34.526 --> 00:07:37.215
we're just gonna do it all
on our own personal account.

128
00:07:37.215 --> 00:07:40.894
The next thing we're gonna do is we're
gonna click All repositories from

129
00:07:40.894 --> 00:07:44.293
the list, just because we wanna
give access to everything for now.

130
00:07:44.293 --> 00:07:48.566
And then we're gonna go to
Repository permissions.

131
00:07:48.566 --> 00:07:52.299
So I would not recommend going here and
just allow, allow, allow, allow, allow,

132
00:07:52.299 --> 00:07:53.785
allow, allow, allow, allow.

133
00:07:53.785 --> 00:07:55.430
That probably isn't a good idea.

134
00:07:55.430 --> 00:07:57.750
However, there are a couple of
things that we really do need.

135
00:07:57.750 --> 00:08:01.820
And the first and most important one
is really just administration, right?

136
00:08:01.820 --> 00:08:07.635
We wanna be able to let Terraform create
repos, manage repos, all that kinda stuff.

137
00:08:07.635 --> 00:08:11.815
And you will notice that repository
creation and deletion is in here.

138
00:08:11.815 --> 00:08:14.005
So this is a caveat to the new tokens.

139
00:08:14.005 --> 00:08:16.805
And I actually didn't even
realize that until just now.

140
00:08:16.805 --> 00:08:19.673
So if you wanna make sure
that you do not delete,

141
00:08:19.673 --> 00:08:24.425
you might wanna use the old personal
tokens because that's a specific scope.

142
00:08:26.410 --> 00:08:30.330
Okay, so that's really the only
permission we need in a repository.

143
00:08:30.330 --> 00:08:34.652
Everything else is just other things
that we're not really gonna deal with

144
00:08:34.652 --> 00:08:35.346
right now.

145
00:08:35.346 --> 00:08:38.717
The next thing we wanna do is we
wanna go to Account permissions.

146
00:08:38.717 --> 00:08:43.020
Wait, no, I'm sorry, we don't need account
permissions cuz this isn't a organization.

147
00:08:43.020 --> 00:08:46.563
So yeah, it's literally just that one
because we just wanna make sure that

148
00:08:46.563 --> 00:08:49.843
Terraform can manage all of our
repositories and everything for us.

149
00:08:49.843 --> 00:08:53.773
Now, I'm not actually going to click
Generate token because it will then show

150
00:08:53.773 --> 00:08:55.610
my token on screen for you guys.

151
00:08:55.610 --> 00:08:58.839
But if you click that, you will then be
able to go to, actually, you know what,

152
00:08:58.839 --> 00:09:00.057
screw it, let's just do it.

153
00:09:00.057 --> 00:09:02.254
There you go, so there's my token.

154
00:09:02.254 --> 00:09:06.676
And so you can see here,
this is it, and now it's gone.

155
00:09:06.676 --> 00:09:09.240
But that token is then what you want.

156
00:09:09.240 --> 00:09:13.540
Now, what you're gonna do is that
you're gonna copy that token and

157
00:09:13.540 --> 00:09:15.960
you're gonna go to Doppler, right?

158
00:09:15.960 --> 00:09:20.474
Because then what we wanna do
is we wanna go to Doppler and

159
00:09:20.474 --> 00:09:25.961
we wanna create a new environment
variable called GITHUB_TOKEN.

160
00:09:25.961 --> 00:09:26.980
&gt;&gt; Where is that?

161
00:09:26.980 --> 00:09:32.190
&gt;&gt; So this would be in your
project in Doppler, I added this.

162
00:09:32.190 --> 00:09:35.770
I'm sorry,
let me go to a fresh one, sorry.

163
00:09:35.770 --> 00:09:38.991
So if I go back to my example-project,
right, dev,

164
00:09:38.991 --> 00:09:41.820
you'll see that we have nothing, right?

165
00:09:41.820 --> 00:09:46.224
So if I click Add First Secret,
then I get the ability to add a new name,

166
00:09:46.224 --> 00:09:47.960
as well as a value.

167
00:09:47.960 --> 00:09:52.550
And so in this case, we do GITHUB_TOKEN,
and then we paste in our token.

168
00:09:52.550 --> 00:09:58.170
So yeah, so if you go to Save,
here I'll just do 1234567, sure.

169
00:09:58.170 --> 00:10:02.886
So if you go to Save, you might notice
that Doppler goes, hey, hey, whoa,

170
00:10:02.886 --> 00:10:07.625
hold up, hold up, hold up, this secret
isn't in any other environments.

171
00:10:07.625 --> 00:10:10.430
Do you want that, right?

172
00:10:10.430 --> 00:10:13.007
And what it can say is,
well, it can say, hey,

173
00:10:13.007 --> 00:10:16.360
if you want me to update all your
environments with this secret

174
00:10:16.360 --> 00:10:19.010
simultaneously, I can do that for
you, right?

175
00:10:19.010 --> 00:10:22.629
And so if I click on Production and
I hit Save, and

176
00:10:22.629 --> 00:10:27.590
then I go back and I go to prod,
you'll see my secret's now there.

177
00:10:27.590 --> 00:10:31.354
So it's a nice way if you have
secrets that do cross multiple ems or

178
00:10:31.354 --> 00:10:33.485
things like that to kinda update it.

179
00:10:33.485 --> 00:10:36.800
I don't really use it that often,
to be honest.

180
00:10:38.190 --> 00:10:41.800
So use it when you need it, I guess.

181
00:10:41.800 --> 00:10:44.513
But realistically, you'll just save for

182
00:10:44.513 --> 00:10:47.686
the environment that you're working in,
yeah.

183
00:10:50.619 --> 00:10:54.540
&gt;&gt; So you'd ideally change,
if you could do initial one in dev, and

184
00:10:54.540 --> 00:10:57.853
then go into prod and stay and change the-
&gt;&gt; Exactly, yeah,

185
00:10:57.853 --> 00:11:00.380
and that's what you would for
multiple environments.

186
00:11:00.380 --> 00:11:03.710
Yeah, you'd go into prod, and
then you'd say, this is 456789, right?

187
00:11:03.710 --> 00:11:05.889
And then you'd save that.

188
00:11:05.889 --> 00:11:10.410
And if it says the same thing, you just
don't check the other environment, right?

189
00:11:10.410 --> 00:11:14.091
Now, the reason for that is because
there's another feature that Doppler has

190
00:11:14.091 --> 00:11:18.230
that I haven't gone over, and I'm probably
not going to cuz it's a little confusing.

191
00:11:18.230 --> 00:11:24.310
But they also give you the ability to
create configurations for branches, right?

192
00:11:24.310 --> 00:11:28.330
So say you're in dev, but you're testing
a specific branch in dev, right?

193
00:11:28.330 --> 00:11:34.405
So what I can do is I can create a branch
config off of dev called example, right?

194
00:11:34.405 --> 00:11:38.470
And then I can tell my
environment to use this config.

195
00:11:40.090 --> 00:11:42.769
So I can use the already existing ones,
but

196
00:11:42.769 --> 00:11:47.323
then I can override specific ones that
I want for what I'm working with.

197
00:11:47.323 --> 00:11:49.648
Yeah, it's really nice.

198
00:11:49.648 --> 00:11:53.050
And again, if you go in here and then
you say, the next thing we need to add,

199
00:11:53.050 --> 00:11:56.473
which I would recommend doing,
is we need to add our GitHub owner, right?

200
00:11:56.473 --> 00:12:01.473
This is what we actually wanna tell our
automation who owns these repositories.

201
00:12:01.473 --> 00:12:06.569
And so in this case, you're just gonna
put in your GitHub username, right?

202
00:12:06.569 --> 00:12:11.169
And so now if I hit Save and I hit
Development, you'll notice that it says,

203
00:12:11.169 --> 00:12:14.757
will smartly update the secrets
in all branched configs.

204
00:12:14.757 --> 00:12:19.749
So because this is dev and I'm updating
the root of dev, it can say, well,

205
00:12:19.749 --> 00:12:23.874
hey, I'm gonna update everything
else that's under dev for

206
00:12:23.874 --> 00:12:27.065
you because you're
touching the root config.

207
00:12:27.065 --> 00:12:31.580
So now if I hit Save and then I go back
to here, you'll see that not only do I

208
00:12:31.580 --> 00:12:35.518
have GITHUB_TOKEN, but
I also have GITHUB_OWNER, right?

209
00:12:35.518 --> 00:12:40.251
So this is how branches are how you kinda
branch off of an environment to make

210
00:12:40.251 --> 00:12:45.752
changes, and configs are how you create
whole different environments, basically.

