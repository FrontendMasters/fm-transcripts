WEBVTT

1
00:00:00.310 --> 00:00:03.282
So, when we talk really quickly
about what we've done so far,

2
00:00:03.282 --> 00:00:06.596
we've done Terraform Cloud Automation,
Dynamic Configurations,

3
00:00:06.596 --> 00:00:10.471
VCS Tracking, Source Control Automation,
Cloud Infrastructure Automation,

4
00:00:10.471 --> 00:00:14.738
Service Infrastructure Automation, Service
Repository Automation, and now we want to

5
00:00:14.738 --> 00:00:18.810
see if we can actually deploy this service
really quickly and check if it's working.

6
00:00:18.810 --> 00:00:20.729
So, I'm going to close
a whole bunch of stuff here.

7
00:00:22.000 --> 00:00:27.640
Just to give myself some,
some space, right?

8
00:00:27.640 --> 00:00:31.915
And I'm gonna go to
console that aws.com and

9
00:00:31.915 --> 00:00:35.410
I'm going to go to my cluster right?

10
00:00:37.190 --> 00:00:38.720
And look at this.

11
00:00:38.720 --> 00:00:41.860
I have a task running but
it's actually not working all right,

12
00:00:41.860 --> 00:00:44.690
it's a it's a failed
deployment at the moment.

13
00:00:44.690 --> 00:00:48.550
And the main reason for
that is is because, can anyone guess?

14
00:00:50.790 --> 00:00:52.990
We created the service
before we push the image.

15
00:00:55.680 --> 00:00:58.290
Right another chicken
before the egg scenario.

16
00:00:58.290 --> 00:01:00.320
Now at hippo, we let it fail.

17
00:01:01.860 --> 00:01:05.200
We let it fail, and you might say,
well, why do you do that?

18
00:01:05.200 --> 00:01:06.016
Why do you let it fail?

19
00:01:06.016 --> 00:01:07.270
That seems like a bad idea.

20
00:01:08.650 --> 00:01:11.000
We let it fail even in prod.

21
00:01:11.000 --> 00:01:13.360
I may even sound like a worst idea.

22
00:01:13.360 --> 00:01:14.620
Why do you do that?

23
00:01:14.620 --> 00:01:17.752
Well, we do it because realistically,
if it's not working in product,

24
00:01:17.752 --> 00:01:18.995
it kind of doesn't matter.

25
00:01:18.995 --> 00:01:20.720
[LAUGH] It's just a dead service.

26
00:01:20.720 --> 00:01:21.290
You know what I mean?

27
00:01:21.290 --> 00:01:25.380
It's not really taking resources for
us or anything crazy like that.

28
00:01:25.380 --> 00:01:28.887
So, realistically, it can be dead,
like, it's fine but

29
00:01:28.887 --> 00:01:33.307
the moment somebody does what I'm
doing right now, which is, all right,

30
00:01:33.307 --> 00:01:37.376
I'm a developer, cool, all right,
let me create my pull request,

31
00:01:37.376 --> 00:01:42.240
right, awesome, cool, I got all my code,
I know my pipeline's in here.

32
00:01:42.240 --> 00:01:43.130
Cool.

33
00:01:43.130 --> 00:01:45.920
Again, we know that
the registry name is right.

34
00:01:45.920 --> 00:01:48.770
We know that the repository
let's check the repo cool.

35
00:01:48.770 --> 00:01:50.840
Let's go check that really quick.

36
00:01:50.840 --> 00:01:51.400
ECR.

37
00:01:52.630 --> 00:01:54.500
This time if I go in.

38
00:01:54.500 --> 00:01:55.890
Sure enough, there it is.

39
00:01:55.890 --> 00:01:58.210
But if I click here, no images, right?

40
00:01:58.210 --> 00:01:59.369
Nothing.
So it's just,

41
00:01:59.369 --> 00:02:01.860
it's just in a failed loop essentially.

42
00:02:01.860 --> 00:02:08.610
So what we do is we go back here
take a look at anything else and

43
00:02:08.610 --> 00:02:12.390
this also needs access keys.

44
00:02:12.390 --> 00:02:13.400
Interesting.

45
00:02:13.400 --> 00:02:18.313
So not only do we need access keys for
Terraform to create resources but

46
00:02:18.313 --> 00:02:22.725
we're also gonna need access keys
on Google to then make it so

47
00:02:22.725 --> 00:02:27.750
am sorry on GitHub so that GitHub
can then deploy your service, right?

48
00:02:27.750 --> 00:02:31.521
So to do that,
you're gonna go to settings,

49
00:02:31.521 --> 00:02:36.800
you're gonna go to secrets and
variables, and then actions.

50
00:02:38.550 --> 00:02:42.378
This gives you the ability to add
environment secrets, repository secrets,

51
00:02:42.378 --> 00:02:44.120
variables, all that other stuff.

52
00:02:44.120 --> 00:02:45.310
And this is what we wanna do.

53
00:02:45.310 --> 00:02:50.860
We wanna add some new repo I'm sorry,
we wanna add a new repository secret.

54
00:02:50.860 --> 00:02:52.426
So we're gonna click on that and

55
00:02:52.426 --> 00:02:55.330
then we're gonna do exactly
what we did in the other place.

56
00:02:55.330 --> 00:02:58.190
We're gonna say AWS access key id.

57
00:02:58.190 --> 00:03:01.690
And again,
let me do this off screen real quick.

58
00:03:01.690 --> 00:03:04.140
So I'm just gonna add that and
hit add secret again.

59
00:03:04.140 --> 00:03:07.510
I know you can't see that, but
now if I bring this over here.

60
00:03:07.510 --> 00:03:12.720
You can see that my access
key has been added, right?

61
00:03:12.720 --> 00:03:15.870
And do the same thing again for
my repository secret for my other two.

62
00:03:15.870 --> 00:03:17.610
So I'm gonna hit New Repository Secret.

63
00:03:17.610 --> 00:03:20.440
I'm gonna do the same thing for
the default region,

64
00:03:20.440 --> 00:03:22.250
as well as the secret access key.

65
00:03:22.250 --> 00:03:26.710
So AWS, I know you can't see it, but
default region, US West 2, right, cuz we

66
00:03:26.710 --> 00:03:30.859
need to make sure that we're pointed
to the same region as our other stuff.

67
00:03:32.450 --> 00:03:39.134
And then new repository secret,
AWS secret access key.

68
00:03:39.134 --> 00:03:40.577
Cool.

69
00:03:40.577 --> 00:03:45.927
Grab that, And close that.

70
00:03:45.927 --> 00:03:46.476
Cool.

71
00:03:46.476 --> 00:03:48.100
Go here.

72
00:03:48.100 --> 00:03:51.020
Add it and commit it, all right?

73
00:03:51.020 --> 00:03:55.010
So now I have my three environment
variables that my pipeline needs.

74
00:03:55.010 --> 00:03:58.388
Access key ID default region and
secret access key so

75
00:03:58.388 --> 00:04:01.916
now what I'm going to do is
I'm going to merge my code so

76
00:04:01.916 --> 00:04:06.700
the repo is fully set up now I'm
just gonna squash and merge.

77
00:04:06.700 --> 00:04:09.140
Now, you'll notice that it
doesn't run on this branch.

78
00:04:09.140 --> 00:04:13.150
That's because at the moment,
this isn't meant to run on this branch.

79
00:04:13.150 --> 00:04:14.700
We're not worrying about that right now.

80
00:04:14.700 --> 00:04:16.660
If you wanna add tests to it.

81
00:04:16.660 --> 00:04:21.227
You've got the the template right there
we're just running it on main for now but

82
00:04:21.227 --> 00:04:25.929
what I'm gonna do is I'm gonna go and all
right let's see what's happening look at

83
00:04:25.929 --> 00:04:28.549
this we have two separate
things happening and

84
00:04:28.549 --> 00:04:32.930
whoa what already finished update-ssm and
build-push-docker.

85
00:04:32.930 --> 00:04:36.567
So we have two separate jobs that have two
separate things that they're trying to

86
00:04:36.567 --> 00:04:39.600
solve here, and
I want to be very clear with that, right?

87
00:04:39.600 --> 00:04:41.872
We don't necessarily want to, but

88
00:04:41.872 --> 00:04:45.440
you might want to bind the config
update after the push.

89
00:04:45.440 --> 00:04:46.450
That's up to you.

90
00:04:46.450 --> 00:04:47.750
If you do, you can.

91
00:04:47.750 --> 00:04:49.841
But this is a good example of,

92
00:04:49.841 --> 00:04:55.367
like pushing to one location versus
updating something in another location,

93
00:04:55.367 --> 00:05:01.780
and you can have multiple repositories or
multiple workflows to handle that, right?

94
00:05:01.780 --> 00:05:07.330
Now, if you'll notice after we built, look
at that, something else popped up here.

95
00:05:07.330 --> 00:05:11.368
So what we decided to do in this
repo was to say, well SSM or

96
00:05:11.368 --> 00:05:15.280
the secrets,
those can be updated whenever we want.

97
00:05:15.280 --> 00:05:17.301
But we wanna make sure that the build and

98
00:05:17.301 --> 00:05:19.942
the restart doesn't happen until after,
right?

99
00:05:23.724 --> 00:05:29.569
So this I wonder if something was missed,

100
00:05:29.569 --> 00:05:32.746
so this might be a bug.

101
00:05:32.746 --> 00:05:34.520
I'm not really super worried about it.

102
00:05:34.520 --> 00:05:37.227
So what I'm going to do instead is,
is if this fails,

103
00:05:37.227 --> 00:05:39.770
which is fine cuz we pushed our image.

104
00:05:39.770 --> 00:05:43.870
Let's go to ECR really quickly,
or ECS, I should say.

105
00:05:43.870 --> 00:05:46.890
And look at that.

106
00:05:48.330 --> 00:05:50.890
I didn't even have to do anything.

107
00:05:50.890 --> 00:05:56.373
And because we pushed the image to ECR,
and because ECS is trying to constantly

108
00:05:56.373 --> 00:06:02.020
restart it, once the image got pushed and
it was able to notice that that image got

109
00:06:02.020 --> 00:06:07.575
pushed once it restarted it pulled
in the image and it started running.

110
00:06:07.575 --> 00:06:08.825
So what does that mean?

111
00:06:08.825 --> 00:06:11.424
Well, that means technically
I should be able to try and

112
00:06:11.424 --> 00:06:13.595
see if I can navigate to this now.

113
00:06:13.595 --> 00:06:17.955
So I go to ECE to load balancers.

114
00:06:17.955 --> 00:06:21.531
And in here I should have
a load balancer for my cluster.

115
00:06:21.531 --> 00:06:26.377
And I have a few of them already but
I could see here this is my most

116
00:06:26.377 --> 00:06:31.240
latest one and if I click here I
can see my DNS name at the bottom.

117
00:06:31.240 --> 00:06:35.768
I'm gonna copy this DNS name and
I'm gonna do a curl now you'll notice I've

118
00:06:35.768 --> 00:06:40.509
already put this curl in here but
what I'm essentially doing is, I'm saying,

119
00:06:40.509 --> 00:06:43.550
hey, I wanna make a request
to this load balancer,

120
00:06:43.550 --> 00:06:47.000
but I don't have this domain
necessarily routable yet.

121
00:06:47.000 --> 00:06:51.327
So, let's just pretend like this is
the host that we're going through, and

122
00:06:51.327 --> 00:06:52.830
let's make a request.

123
00:06:52.830 --> 00:06:55.950
And you'll notice that says,
hey, message not found.

124
00:06:55.950 --> 00:06:59.390
Now that's a little interesting, so
let's take a look and see what's going on.

125
00:06:59.390 --> 00:07:06.105
So I'll go to target groups go down here
targets cool my targets there all right so

126
00:07:06.105 --> 00:07:12.353
then let's go back to load balancers and
let's go to listeners and rules.

127
00:07:12.353 --> 00:07:18.687
We've got two rules I didn't
name my domain right because

128
00:07:18.687 --> 00:07:24.516
I said service prod here but
the actual is ECIE riner.

129
00:07:24.516 --> 00:07:29.400
So let me go like this, right, because
I'm really just locating my cluster.

130
00:07:30.470 --> 00:07:33.200
Hey, there we go.

131
00:07:33.200 --> 00:07:35.630
So now what did we just do?

132
00:07:36.930 --> 00:07:37.880
Right?

133
00:07:37.880 --> 00:07:39.760
Let's talk about it one more time.

134
00:07:39.760 --> 00:07:44.280
We, set up Terraform Cloud Automation,
Dynamic Configurations, VCS Tracking,

135
00:07:44.280 --> 00:07:47.846
Source Control Automation,
Cloud Infrastructure Automation,

136
00:07:47.846 --> 00:07:51.795
Service Infrastructure Automation,
Service Repository Automation,

137
00:07:51.795 --> 00:07:54.723
which now enables developers to go in,
push changes,

138
00:07:54.723 --> 00:07:58.000
immediately goes to production
once it's merged, right?

139
00:07:59.280 --> 00:08:03.180
And it's also navigatable and
routable now.

140
00:08:03.180 --> 00:08:06.620
So when you do this, you should be
able to achieve the same thing.

141
00:08:06.620 --> 00:08:13.240
Now I wanna note that the hostname and my
name here is just for this course, right?

142
00:08:13.240 --> 00:08:16.350
Realistically, it would be like
a service or something like that.

143
00:08:16.350 --> 00:08:18.650
But again, as I said before,
we wanted to try and

144
00:08:18.650 --> 00:08:21.040
make sure that you all
could do this as well.

145
00:08:21.040 --> 00:08:25.259
And so this just makes sure that
the domain, if we used a real live domain,

146
00:08:25.259 --> 00:08:27.690
we wouldn't have conflicts, right?

147
00:08:27.690 --> 00:08:30.840
So that's just one thing to note
why this looks the way it does.

148
00:08:30.840 --> 00:08:32.753
How you set up the domains and
all of that,

149
00:08:32.753 --> 00:08:35.010
it's in the infrastructure automation.

150
00:08:35.010 --> 00:08:39.330
So choose it as you as you please.

151
00:08:39.330 --> 00:08:39.860
Okay, cool.

152
00:08:39.860 --> 00:08:44.120
So if we do a git status really quickly,
we are in our TerraForm TFe.

153
00:08:44.120 --> 00:08:49.670
We'll say git checkout main,
Paul main at this point, guys.

154
00:08:50.830 --> 00:08:55.922
We've basically built all of the main
infrastructure deployed the service and

155
00:08:55.922 --> 00:09:00.786
accomplished the main goal of what we
wanted, which is to create enterprise

156
00:09:00.786 --> 00:09:04.820
cloud infrastructure and
have deployed services through it.

157
00:09:04.820 --> 00:09:06.700
Okay, so that's amazing.

158
00:09:06.700 --> 00:09:11.434
We achieved a lot and if you really think
about what we've done in probably just

159
00:09:11.434 --> 00:09:15.680
today alone, you would imagine might
take you weeks depending on it.

160
00:09:15.680 --> 00:09:17.890
So this is really the power of automation.

