WEBVTT

1
00:00:00.220 --> 00:00:04.240
&gt;&gt; Nina: One of the other types of refs
that we can have is a lightweight tag.

2
00:00:04.240 --> 00:00:07.576
Those are just a simple
pointer to a commit.

3
00:00:07.576 --> 00:00:10.570
They get created when you
create a tag with no arguments.

4
00:00:11.710 --> 00:00:13.500
It just captures the value in HEAD.

5
00:00:15.070 --> 00:00:21.330
So I'm on my tech post branch,
now I check out master.

6
00:00:21.330 --> 00:00:24.010
That means that HEAD moved
back to the initial commit,

7
00:00:24.010 --> 00:00:26.570
the commit that master is pointing to.

8
00:00:26.570 --> 00:00:31.485
When I create that tag, my first commit,
it just points to the value

9
00:00:31.485 --> 00:00:36.024
in HEAD.
&gt;&gt; Nina: In this case,

10
00:00:36.024 --> 00:00:39.620
the particular commit that
HEAD is pointing to, so cd0.

11
00:00:42.510 --> 00:00:45.070
There's one other type of
tag that we can create,

12
00:00:45.070 --> 00:00:47.790
and that's called an annotated tag.

13
00:00:51.060 --> 00:00:53.310
They're created with git tag -a.

14
00:00:53.310 --> 00:00:59.210
So just like lightweight tags,
they also point to a commit.

15
00:00:59.210 --> 00:01:04.400
But they also store additional
information, like the author,

16
00:01:04.400 --> 00:01:07.056
the message and the date.

17
00:01:07.056 --> 00:01:14.631
So to create an annotated
tag you do tag -a.

18
00:01:14.631 --> 00:01:16.666
I put version 1.0.

19
00:01:18.090 --> 00:01:22.674
You can pass in -m, just like a commit,
to specify a message.

20
00:01:22.674 --> 00:01:25.140
So my message is Version 1.0 of my blog.

21
00:01:26.200 --> 00:01:30.470
Now, I list my tags by running git tag.

22
00:01:32.100 --> 00:01:35.850
That shows me all the tags that
are currently in my repository.

23
00:01:35.850 --> 00:01:37.773
So we have my first commit,

24
00:01:37.773 --> 00:01:41.882
which is the lightweight tag
that we created previously.

25
00:01:41.882 --> 00:01:45.930
And we also have version 1.0, which is
the annotated tag that we just created.

26
00:01:47.670 --> 00:01:51.770
To look at the annotated tag and
get all that useful information out,

27
00:01:51.770 --> 00:01:57.010
the author, the message, and the date,
we do git show and the tag name.

28
00:01:57.010 --> 00:02:02.850
Git show version 1.0 will give us
all the information about that tag.

29
00:02:02.850 --> 00:02:06.780
In practice,
lightweight tags are not used very much.

30
00:02:06.780 --> 00:02:11.170
Maybe you can use them to leave tags for
yourself.

31
00:02:11.170 --> 00:02:18.110
But generally, you won't really
see them being used in practice.

32
00:02:18.110 --> 00:02:20.460
Annotated tags are much more useful.

33
00:02:22.630 --> 00:02:26.170
To work with tags,
there's just a few simple commits.

34
00:02:26.170 --> 00:02:29.980
We git tag to show all the tags
in the repo to list them.

35
00:02:31.630 --> 00:02:36.630
If we wanna list all the tags but
also what commit they're

36
00:02:36.630 --> 00:02:40.598
pointing to, we do git show-ref --tags.

37
00:02:40.598 --> 00:02:42.390
That's a pretty useful command.

38
00:02:44.990 --> 00:02:51.072
If we wanna list all the tags that
are pointing at a specific commit,

39
00:02:51.072 --> 00:02:54.073
there is a --points-at flag.

40
00:02:54.073 --> 00:02:56.936
So git tag --points-at &lt;&lt;commit&gt; and

41
00:02:56.936 --> 00:03:00.970
it will show you all the tags
pointing at a particular commit.

42
00:03:02.340 --> 00:03:06.690
If we want to look at
the tag; git show &lt;tag-name&gt;.

43
00:03:14.756 --> 00:03:16.767
&gt;&gt; Nina: When talking about tags and

44
00:03:16.767 --> 00:03:21.403
branches, there's two important
pieces of information that

45
00:03:21.403 --> 00:03:24.560
separate what a tag is and
what a branch is.

46
00:03:25.804 --> 00:03:30.340
A branch, when you're on a branch,
the current pointer,

47
00:03:30.340 --> 00:03:34.820
the branch pointer, it moves with
every new commit to the repository.

48
00:03:34.820 --> 00:03:41.180
So you use branches when your branch will
change, when new commits will be added.

49
00:03:42.210 --> 00:03:45.607
Tags are a pointer to a commit.

50
00:03:45.607 --> 00:03:47.780
It's a snapshot.

51
00:03:47.780 --> 00:03:49.790
Tags aren't meant to change.

52
00:03:49.790 --> 00:03:53.850
You tag version one of your release,
then version two.

53
00:03:53.850 --> 00:03:55.860
You don't move a tag to another commit.

