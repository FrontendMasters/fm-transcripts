WEBVTT

1
00:00:00.160 --> 00:00:01.500
&gt;&gt; Nina Zakharenko: What is rebase anyway?

2
00:00:01.500 --> 00:00:04.000
So let's imagine that our
tech posts branch and

3
00:00:04.000 --> 00:00:05.600
our master branch have diverged.

4
00:00:05.600 --> 00:00:08.610
And we don't wanna have a messy
merge commit in our history.

5
00:00:09.800 --> 00:00:13.170
But what we can do is we can pull
the latest changes from master.

6
00:00:14.370 --> 00:00:18.130
And instead of having our
commits be mixed in somewhere

7
00:00:19.970 --> 00:00:23.470
sandwiched between commits from master,
what we wanna do is we want to apply

8
00:00:23.470 --> 00:00:27.300
all of our commits cleanly
on top of the master branch.

9
00:00:28.430 --> 00:00:31.980
And we can do that by changing
the parent commit of our commits.

10
00:00:33.060 --> 00:00:39.210
So what rebase means is give a commit
a new parent, i.e., a new base commit.

11
00:00:40.860 --> 00:00:45.850
So the first thing that rebase
does is it rewinds HEAD.

12
00:00:45.850 --> 00:00:49.348
So in this case,
I've checked out tech_posts.

13
00:00:49.348 --> 00:00:54.514
If I want to rebase for
master, master has one new

14
00:00:54.514 --> 00:01:00.953
commit since I've made my branch.
&gt;&gt; Nina Zakharenko: First Git

15
00:01:00.953 --> 00:01:05.590
is going to rewind HEAD back to master.

16
00:01:10.420 --> 00:01:13.984
It's going to end up replaying
my commits on top of HEAD.

17
00:01:13.984 --> 00:01:20.680
So now giving commit 4080.

18
00:01:20.680 --> 00:01:24.462
That was our original commit
on our branch, it's now gone.

19
00:01:24.462 --> 00:01:31.897
And we've created a new commit, a copy
of that commit on the tech_posts branch.

20
00:01:31.897 --> 00:01:37.235
And now that tech_posts branch is up to
date with the latest commit from master.

21
00:01:37.235 --> 00:01:40.733
This makes resolving merge
conflicts much easier,

22
00:01:40.733 --> 00:01:46.647
you can rebase pretty frequently.
&gt;&gt; Nina Zakharenko: And

23
00:01:46.647 --> 00:01:48.330
not so scary at all.

24
00:01:48.330 --> 00:01:50.256
It makes history a lot neater and cleaner,

25
00:01:50.256 --> 00:01:55.079
too.
&gt;&gt; Speaker 2: So

26
00:01:55.079 --> 00:01:56.945
I missed about the merge conflict.

27
00:01:56.945 --> 00:02:00.592
So if 2b25b38 has changes

28
00:02:00.592 --> 00:02:04.989
in the same files as 4080a?
&gt;&gt; Nina Zakharenko: Then,

29
00:02:04.989 --> 00:02:07.210
you'll have a conflict.

30
00:02:07.210 --> 00:02:09.320
Then, you'll have to fix it.

31
00:02:09.320 --> 00:02:10.753
But if there's no conflicts,

32
00:02:10.753 --> 00:02:18.433
it'll just cleanly apply.
&gt;&gt; Nina Zakharenko: So

33
00:02:18.433 --> 00:02:20.890
merge versus rebase.

34
00:02:20.890 --> 00:02:25.800
If we're on the tech_posts branch,
if we rebased from master,

35
00:02:25.800 --> 00:02:30.400
our copy, the commit that was our
commit in the tech_posts branch

36
00:02:30.400 --> 00:02:33.980
will now be a new commit
pointing to the latest master.

37
00:02:36.150 --> 00:02:40.340
Or if we merged from master,
we would actually have a merge commit.

38
00:02:42.310 --> 00:02:46.680
So a brand new commit would
be cluttering up history.

39
00:02:46.680 --> 00:02:55.220
But if you're contributing to open source,
that's not really ideal.

40
00:02:55.220 --> 00:02:58.250
Mostly, we wanna keep our history neat and
clean.

41
00:02:58.250 --> 00:03:00.820
And it prevents a bunch of merge
commits from cluttering it

42
00:03:00.820 --> 00:03:01.630
up.
&gt;&gt; Speaker 2: So

43
00:03:01.630 --> 00:03:04.500
it's a little bit like a fast forward?
&gt;&gt; Nina Zakharenko: Yeah, a little bit.

44
00:03:06.360 --> 00:03:11.587
It's kind of pretending as
if we could fast forward

45
00:03:11.587 --> 00:03:17.834
by changing our parent.
&gt;&gt; Nina Zakharenko: The power

46
00:03:17.834 --> 00:03:22.430
of rebase really comes from interactive
rebasing, and thatâ€™s replaying commits.

47
00:03:24.200 --> 00:03:27.500
When those commits are replayed,
we can edit them, we can remove them,

48
00:03:27.500 --> 00:03:28.482
we can combine them,

49
00:03:28.482 --> 00:03:33.370
reorder them, insert them before
they're replayed back on top of HEAD.

50
00:03:33.370 --> 00:03:38.340
So we can fix them, change them,
edit the messages, do whatever we want.

51
00:03:40.850 --> 00:03:44.160
Interactive rebase is done with a -i flag.

52
00:03:44.160 --> 00:03:48.523
It's gonna open in an editor with a list
of to dos in the format of commands,

53
00:03:48.523 --> 00:03:50.414
then commit, then commit msg.

54
00:03:50.414 --> 00:03:54.760
Git is going to pick those commits
in the order that you specified.

55
00:03:54.760 --> 00:03:58.920
Or it might stop to take an action
when something like an editing or

56
00:03:58.920 --> 00:04:00.110
a conflict occurs.

57
00:04:01.530 --> 00:04:05.094
You interactive rebase with a shortcut,
git rebase-i,

58
00:04:05.094 --> 00:04:08.110
the commit that you
wanna start fixing from.

59
00:04:08.110 --> 00:04:12.841
But then you should specify its parent.
&gt;&gt; Nina Zakharenko: All right, when this

60
00:04:12.841 --> 00:04:16.515
list of to-dos opens, make sure you don't
change any of the messages in the list.

61
00:04:16.515 --> 00:04:17.887
Git only ignores them.

62
00:04:17.887 --> 00:04:19.297
Git ignores them.

63
00:04:19.297 --> 00:04:22.350
It only looks at the [INAUDIBLE]
that are present.

64
00:04:22.350 --> 00:04:26.600
So some of our rebase options, and this
will come up when you do an interactive

65
00:04:26.600 --> 00:04:32.200
rebase in your editor, but in plain text,
pick will keep this commit.

66
00:04:32.200 --> 00:04:36.650
Reword will keep the commit,
it's just going to change the message.

67
00:04:36.650 --> 00:04:41.200
Edit will keep the commit but
stop to edit more than the message.

68
00:04:41.200 --> 00:04:45.420
And squash is going to combine
this commit with the previous one.

69
00:04:45.420 --> 00:04:47.440
It'll also stop to edit the message.

70
00:04:48.660 --> 00:04:54.130
Fixup combine the commit with the previous
one, but keep the previous commit message.

71
00:04:55.290 --> 00:04:57.920
And exec, which is really cool,

72
00:04:57.920 --> 00:05:02.210
it lets you run a command on this
line after picking a previous commit.

73
00:05:02.210 --> 00:05:03.560
So if you're rebasing and

74
00:05:03.560 --> 00:05:06.400
you wanna run a test in the middle,
you can do that with exec.

75
00:05:07.930 --> 00:05:10.320
Lastly, drop will remove the commit.

76
00:05:10.320 --> 00:05:12.890
But the same thing will happen
if you just remove that line,

77
00:05:12.890 --> 00:05:14.940
the commit will just be killed.

78
00:05:14.940 --> 00:05:16.780
So here's an example rebase.

79
00:05:19.850 --> 00:05:23.840
I'm doing a git rebase -i from
this commit in the parent.

80
00:05:23.840 --> 00:05:29.290
I'm saying reword where I add
the posts/django-framework,

81
00:05:29.290 --> 00:05:33.702
and squash the commit where I said,
oops, I forgot to add an index entry.

82
00:05:35.680 --> 00:05:40.170
When I git log oneline, I have now

83
00:05:40.170 --> 00:05:44.770
added a blog post explaining the pros and
cons of Django.

84
00:05:44.770 --> 00:05:48.290
That's the new commit message
that I've done with the rebase.

85
00:05:48.290 --> 00:05:49.944
And now those two commits
are smushed into one.

86
00:05:53.618 --> 00:05:54.652
&gt;&gt; Nina Zakharenko: And when I do this,

87
00:05:54.652 --> 00:05:55.824
my editor will open.

88
00:05:55.824 --> 00:06:01.261
It's gonna open twice, once to reword,
that is change the commit message,

89
00:06:01.261 --> 00:06:04.455
and then again to squash, combine commits.

90
00:06:04.455 --> 00:06:07.327
We can also use rebase to split commits.

91
00:06:07.327 --> 00:06:11.608
That is when we edit a commit, we can
also split it up into multiple commits.

92
00:06:11.608 --> 00:06:14.758
Let's say your commit was too big,
had to much information in it.

93
00:06:14.758 --> 00:06:19.579
You wanna make sure that your
commit is only representing kind

94
00:06:19.579 --> 00:06:22.320
of one logical group of changes.

95
00:06:22.320 --> 00:06:26.001
You can split it up with rebase.

96
00:06:26.001 --> 00:06:28.445
I'm going to skip explaining this.

97
00:06:28.445 --> 00:06:31.050
But if you have a copy of the slides and

98
00:06:31.050 --> 00:06:35.431
you wanna go back to this after class,
it's on slide 150.

