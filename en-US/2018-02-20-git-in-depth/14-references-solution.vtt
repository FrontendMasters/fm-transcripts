WEBVTT

1
00:00:00.390 --> 00:00:03.650
&gt;&gt; Nina Zakharenko: Let's go ahead and
review the solutions.

2
00:00:03.650 --> 00:00:07.620
So, here I am in the advanced
git exercises branch.

3
00:00:07.620 --> 00:00:12.640
And I am going to check out exercise 3.

4
00:00:12.640 --> 00:00:18.770
The first thing I want to do is,
figure out where my head variable is.

5
00:00:21.510 --> 00:00:25.920
Let's check it out by finding
out the value of git slash head.

6
00:00:27.730 --> 00:00:30.560
And we can verify this
by running git branch.

7
00:00:33.050 --> 00:00:37.440
Now let's figure out what our
references are pointing to.

8
00:00:37.440 --> 00:00:45.010
We can do that with the plumbing command,
git show-ref.

9
00:00:45.010 --> 00:00:49.830
And we pass in the --heads
[INAUDIBLE] Cool.

10
00:00:49.830 --> 00:00:52.890
So I have a few more
exercises than you guys.

11
00:00:55.100 --> 00:00:58.970
If I filter this out to just exercise 3,

12
00:00:58.970 --> 00:01:03.800
we'll see that that is the Last
commit in this branch.

13
00:01:09.580 --> 00:01:12.550
&gt;&gt; Nina Zakharenko: And if we wanted to,

14
00:01:12.550 --> 00:01:17.770
we could use git cat
file-p to verify this.

15
00:01:17.770 --> 00:01:22.200
So let's say I wanted to look at
the reference for my master branch.

16
00:01:23.930 --> 00:01:26.010
It's this one right here.

17
00:01:26.010 --> 00:01:30.460
So I can copy this reference, and

18
00:01:30.460 --> 00:01:36.600
then do a git cat-file -p.
&gt;&gt; Nina Zakharenko: And

19
00:01:36.600 --> 00:01:41.140
that'll show us the last master commit.

20
00:01:41.140 --> 00:01:43.630
Mine might be a little
bit different than yours.

21
00:01:43.630 --> 00:01:46.020
Cuz I've been working on these exercises.

22
00:01:46.020 --> 00:01:53.462
But yours should be the initial commit.
&gt;&gt; Nina Zakharenko: Now,

23
00:01:53.462 --> 00:01:59.070
our exercise 3 branch is pointing
to a newer commit from exercise2

24
00:02:00.590 --> 00:02:06.199
We can verify that,
&gt;&gt; Nina Zakharenko: By taking a look

25
00:02:06.199 --> 00:02:13.795
at this commit using git cat-file -p.
&gt;&gt; Nina Zakharenko: And

26
00:02:13.795 --> 00:02:19.910
this is the commit from exercise two.
&gt;&gt; Nina Zakharenko: Now

27
00:02:19.910 --> 00:02:24.940
let's make a tag and we want to confirm
that it points to the correct commit.

28
00:02:29.180 --> 00:02:30.920
We can name this tag whatever we want.

29
00:02:39.090 --> 00:02:45.440
Now, I can do get tag to
show which tags I have.

30
00:02:45.440 --> 00:02:50.850
That should show my /git/commit and

31
00:02:50.850 --> 00:02:54.360
let's make sure that the tag is
pointing to the right place.

32
00:02:57.360 --> 00:03:01.696
If I use the plumbing
command git show-ref,

33
00:03:01.696 --> 00:03:09.630
I can pass in the --tags flag instead
of --heads like we did earlier.

34
00:03:09.630 --> 00:03:13.740
That'll show that my git tag is
pointing to the current commit

35
00:03:13.740 --> 00:03:18.560
on the exercise3 branch.
&gt;&gt; Nina Zakharenko: We can

36
00:03:18.560 --> 00:03:23.390
also verify that, to look that up.
&gt;&gt; Nina Zakharenko: With

37
00:03:23.390 --> 00:03:27.740
git tag dash dash points-at.

38
00:03:27.740 --> 00:03:32.470
And checking out this commit, cool.

39
00:03:32.470 --> 00:03:37.250
Those are all the tags that point
at this commit right there.

40
00:03:38.470 --> 00:03:41.589
Now let's get a shot at
trying out annotated tags.

41
00:03:43.360 --> 00:03:48.820
Remember that annotated tags serve
the same function as a regular tag.

42
00:03:48.820 --> 00:03:51.330
But they contain some extra metadata,
right?

43
00:03:51.330 --> 00:03:54.760
The author, the date,
and an optional message.

44
00:03:54.760 --> 00:04:02.790
So, to create an annotated
tag we use the- a flag.

45
00:04:04.050 --> 00:04:07.830
And I'll say my-annotated-tag and

46
00:04:07.830 --> 00:04:17.520
I'm gonna pass in a message.
&gt;&gt; Nina Zakharenko: And

47
00:04:17.520 --> 00:04:19.310
I messed up my quotes.

48
00:04:19.310 --> 00:04:24.260
Let me try that one more time.
&gt;&gt; Nina Zakharenko: Great,

49
00:04:25.490 --> 00:04:31.940
now when I list my tags with git-tag,
we'll see that I have a new one.

50
00:04:31.940 --> 00:04:33.990
I can take to look at it with git show.

51
00:04:41.730 --> 00:04:42.460
&gt;&gt; Nina Zakharenko: And that shows

52
00:04:42.460 --> 00:04:47.490
the commit that it's pointing to.
&gt;&gt; Nina Zakharenko: Now let's check out

53
00:04:47.490 --> 00:04:48.450
detached head.

54
00:04:50.050 --> 00:04:54.050
Now that you know what it really means,
hopefully the terminology isn't so

55
00:04:54.050 --> 00:05:00.400
scary anymore.
&gt;&gt; Nina Zakharenko: Someone should

56
00:05:00.400 --> 00:05:05.820
go as a detached get detached head for
a Halloween custom this Halloween.

57
00:05:05.820 --> 00:05:07.580
October 31st is coming up.

58
00:05:07.580 --> 00:05:11.790
[LAUGH] I think you guys
could scare some programmers.

59
00:05:11.790 --> 00:05:17.130
[LAUGH]
So

60
00:05:17.130 --> 00:05:20.720
let's use get checkout to checkout to
figure out the latest commit directly.

61
00:05:21.840 --> 00:05:26.440
And we can figure out what
that is by looking at the log.

62
00:05:31.450 --> 00:05:36.360
And I use the dash dash, no pager here
just so that prints out in my terminal

63
00:05:36.360 --> 00:05:42.852
instead of opening on the screen.
&gt;&gt; Nina Zakharenko: Cool.

64
00:05:42.852 --> 00:05:45.580
So this here is my latest commit.
&gt;&gt; Nina Zakharenko: I

65
00:05:47.690 --> 00:05:52.860
am going to check it out.
&gt;&gt; Nina Zakharenko: No

66
00:05:52.860 --> 00:05:54.380
detached head state.

67
00:05:54.380 --> 00:05:55.680
Look around make changes.

68
00:05:55.680 --> 00:05:58.040
I don't know who wrote this message but

69
00:05:58.040 --> 00:06:03.232
it's really not [LAUGH]
helpful.

70
00:06:03.232 --> 00:06:08.100
Great so if we take a look at our

71
00:06:08.100 --> 00:06:12.460
head now we'll see that it
is pointing at that commit.

72
00:06:14.160 --> 00:06:16.030
Now if we create a dangling commit

73
00:06:25.060 --> 00:06:29.820
&gt;&gt; Nina Zakharenko: And we add it.
&gt;&gt; Nina Zakharenko: So

74
00:06:29.820 --> 00:06:31.110
that's in our staging area.

75
00:06:31.110 --> 00:06:36.490
If we do a status, git will tell us
that we're in a detached head state.

76
00:06:39.360 --> 00:06:41.182
And let's commit it.

77
00:06:48.001 --> 00:06:50.940
&gt;&gt; Nina Zakharenko: Great, now if we,

78
00:06:53.740 --> 00:07:00.330
look at out log
&gt;&gt; Nina Zakharenko: We will see our latest

79
00:07:00.330 --> 00:07:05.740
commit, an example of a dangling commit.
&gt;&gt; Nina Zakharenko: And

80
00:07:05.740 --> 00:07:15.030
if we check our HEAD again,
&gt;&gt; Nina Zakharenko: Can

81
00:07:15.030 --> 00:07:17.630
anyone tell me what HEAD
will be pointing at now?

82
00:07:18.710 --> 00:07:19.750
Which commit?

83
00:07:19.750 --> 00:07:20.580
The first one?

84
00:07:20.580 --> 00:07:25.573
The second one?
&gt;&gt; Nina Zakharenko: I pick you.

85
00:07:25.573 --> 00:07:27.210
&gt;&gt; Speaker 2: E348EBC?

86
00:07:27.210 --> 00:07:27.840
&gt;&gt; Nina Zakharenko: Not quite.

87
00:07:27.840 --> 00:07:28.628
&gt;&gt; Speaker 2: I don't know that

88
00:07:28.628 --> 00:07:29.215
at all then.

89
00:07:29.215 --> 00:07:30.890
[LAUGH]
&gt;&gt; Nina Zakharenko: What's the latest

90
00:07:30.890 --> 00:07:33.270
commit we made?
&gt;&gt; Speaker 3: The dangling ten.

91
00:07:33.270 --> 00:07:34.240
&gt;&gt; Nina Zakharenko: Yes, so

92
00:07:34.240 --> 00:07:39.630
now if we look at head, it's gonna be
pointing at the last commit we made,

93
00:07:39.630 --> 00:07:44.590
the dangling git commit, great.
&gt;&gt; Nina Zakharenko: So

94
00:07:46.160 --> 00:07:53.800
if we wanted to keep this commit,
we could check out a branch.

95
00:07:53.800 --> 00:07:56.830
But right now,
we're just gonna throw it out.

96
00:07:56.830 --> 00:08:03.190
So if we git checkout exercise 3, and
I will show you the log one more time.

97
00:08:05.880 --> 00:08:11.410
So we made this commit while
we were on a detached head.

98
00:08:11.410 --> 00:08:12.880
I I check out exercise three.

99
00:08:12.880 --> 00:08:18.790
It is going to give me a warning telling
me that I am leaving one commit behind.

100
00:08:20.230 --> 00:08:22.470
It's not connected to any of my branches.

101
00:08:22.470 --> 00:08:24.680
It doesn't have any references.

102
00:08:24.680 --> 00:08:28.800
And if I don't do anything about this
eventually this commit is going to be

103
00:08:28.800 --> 00:08:33.700
garbage collected.
&gt;&gt; Nina Zakharenko: And it also gives

104
00:08:33.700 --> 00:08:38.490
you a helpful tip that if you want to
keep it you can create a new branch.

105
00:08:38.490 --> 00:08:43.012
You can say git branch branch name,
and keep that

106
00:08:43.012 --> 00:08:50.470
commit.
&gt;&gt; Nina Zakharenko: Anyone

107
00:08:50.470 --> 00:08:53.470
have questions about references?

108
00:08:53.470 --> 00:08:56.160
Heads, detached heads, how are you

109
00:08:56.160 --> 00:09:01.770
feeling?
&gt;&gt; Nina Zakharenko: Seeing

110
00:09:01.770 --> 00:09:02.810
a lot of lost faces.

