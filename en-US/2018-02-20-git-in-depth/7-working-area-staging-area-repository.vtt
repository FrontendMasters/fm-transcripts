WEBVTT

1
00:00:00.240 --> 00:00:04.740
&gt;&gt; Nina: Let's talk about the three
areas in Git where code lives.

2
00:00:04.740 --> 00:00:08.930
The first is the working area,
sometimes also called the working tree.

3
00:00:10.280 --> 00:00:15.868
The second is the staging area, you
might also see this called the cache or

4
00:00:15.868 --> 00:00:19.035
the index and the last is the repository.

5
00:00:21.523 --> 00:00:24.553
&gt;&gt; Nina: The working area, in brief,

6
00:00:24.553 --> 00:00:29.167
is the files that are not
in the staging area.

7
00:00:29.167 --> 00:00:30.540
They're not handled by Git.

8
00:00:30.540 --> 00:00:33.380
They're kind of just in
your local directory.

9
00:00:33.380 --> 00:00:35.659
They can also be called untracked files.

10
00:00:37.240 --> 00:00:42.110
The working area is like your scratch
space, it's where you can add new content,

11
00:00:42.110 --> 00:00:46.970
you can modify delete content,
if the content that you modify or

12
00:00:46.970 --> 00:00:50.890
delete is in your repository you don't
have to worry about losing your work.

13
00:00:53.080 --> 00:00:58.020
The staging area, that's what files are
going to be a part of your next commit.

14
00:00:59.200 --> 00:01:05.138
It's how Git knows what is going to
change between the current commit and

15
00:01:05.138 --> 00:01:06.314
the next one.

16
00:01:06.314 --> 00:01:13.790
We're gonna deep-dive into
the staging area in the next section.

17
00:01:13.790 --> 00:01:18.790
Briefly, the repository, that's
the files that Git actually knows about.

18
00:01:18.790 --> 00:01:21.867
The repository contains
all of your commits.

19
00:01:21.867 --> 00:01:27.612
And the commit is a snapshot
of what your working and

20
00:01:27.612 --> 00:01:33.100
staging area look like at
the time of the commit.

21
00:01:35.730 --> 00:01:37.990
It's in your .git directory.

22
00:01:37.990 --> 00:01:41.560
And that's all of the files
in your repository,

23
00:01:41.560 --> 00:01:45.340
they're stored away safely, you can
continue to make changes as you work and

24
00:01:45.340 --> 00:01:47.900
you can always check out
a fresh copy if you need one.

25
00:01:50.160 --> 00:01:53.333
Let's take a closer look
at the staging area.

26
00:01:57.724 --> 00:02:00.360
&gt;&gt; Nina: So very, very important,
the staging area.

27
00:02:00.360 --> 00:02:04.569
That's how Git knows what's gonna
change between your current commit and

28
00:02:04.569 --> 00:02:05.648
your next commit.

29
00:02:10.298 --> 00:02:14.918
&gt;&gt; Nina: A clean staging area,
people think it's empty,

30
00:02:14.918 --> 00:02:18.006
but that's not really the case.

31
00:02:18.006 --> 00:02:19.880
A clean staging area isn't empty.

32
00:02:21.080 --> 00:02:24.620
Actually, what's going on is
the baseline staging area

33
00:02:24.620 --> 00:02:27.100
is a copy of your latest commit.

34
00:02:27.100 --> 00:02:32.100
So it contains a list of files
that were in your last commit,

35
00:02:32.100 --> 00:02:39.330
as well as the SHA1 hash of those files
as they were in their last commit.

36
00:02:42.700 --> 00:02:45.750
The way that Git stores this information,

37
00:02:45.750 --> 00:02:50.224
the index is actually a binary
file in the .git directory.

38
00:02:51.500 --> 00:02:56.040
Don't try to open it you'll just,
get a bunch of yucky data.

39
00:02:56.040 --> 00:02:59.110
But I'll show you how to peek
in that in just a few minutes.

40
00:03:01.430 --> 00:03:04.768
We're gonna do that using
another plumbing command.

41
00:03:07.955 --> 00:03:12.927
&gt;&gt; Nina: When you add, remove,
rename files to the staging area,

42
00:03:12.927 --> 00:03:18.305
Git knows because the SHA1 of
the changed file is now different

43
00:03:18.305 --> 00:03:22.890
from the SHA1 of the file
that was in the repository.

44
00:03:27.271 --> 00:03:32.824
&gt;&gt; Nina: In order to look at our index,
We use the plumbing

45
00:03:32.824 --> 00:03:37.574
command git ls-files with the -s flag.

46
00:03:41.079 --> 00:03:45.965
&gt;&gt; Nina: So
the first few numbers are the mode,

47
00:03:45.965 --> 00:03:52.226
then the SHA matching
the SHA in the repository,

48
00:03:52.226 --> 00:03:55.752
followed by the file name.

49
00:04:00.715 --> 00:04:03.093
&gt;&gt; Nina: To move files in and
out of the staging area,

50
00:04:03.093 --> 00:04:08.210
you should all be pretty familiar with
these commands if you've been using Git.

51
00:04:08.210 --> 00:04:13.020
If you want to add a file to
the next commit, git add, file name.

52
00:04:13.020 --> 00:04:16.350
If you want to delete a file
in the next commit, git rm.

53
00:04:17.600 --> 00:04:22.270
A lot of people, in their workflows,

54
00:04:22.270 --> 00:04:25.530
tend to remove the file from
their working area, and

55
00:04:25.530 --> 00:04:29.300
then they have to stage it in a separate
step, and it's kind of annoying.

56
00:04:29.300 --> 00:04:32.690
So you can just tell Git to
remove the file directly, and

57
00:04:32.690 --> 00:04:34.860
it'll do that in one step, git rm.

58
00:04:36.000 --> 00:04:40.854
If you wanna rename a file, that's
going to be part of your next commit,

59
00:04:40.854 --> 00:04:44.134
you can just use the git mv command,
mv for move.

60
00:04:48.089 --> 00:04:53.520
&gt;&gt; Nina: Now git add-p, have any
of you in class used this command?

61
00:04:54.640 --> 00:04:55.140
No?

62
00:04:56.910 --> 00:05:00.890
It's really just one of my
absolute favorite tools.

63
00:05:00.890 --> 00:05:07.831
It allows you to stage your
commit in chunks interactively.

64
00:05:07.831 --> 00:05:10.602
It's especially useful if
you've done too much work for

65
00:05:10.602 --> 00:05:13.380
one commit, you wanna break it up,
you don't know how.

66
00:05:16.540 --> 00:05:20.070
Sometimes people wonder why Git
needs a staging area at all.

67
00:05:20.070 --> 00:05:23.800
Wouldn't it be simply if you could just
commit everything in your working area

68
00:05:23.800 --> 00:05:24.450
in one go?

69
00:05:26.080 --> 00:05:31.818
And you can, but it's not a recommended
workflow, that's git commit -a.

70
00:05:31.818 --> 00:05:35.010
But git add -p

71
00:05:35.010 --> 00:05:38.690
is kind of a shining highlight of
how useful the staging area can be.

72
00:05:38.690 --> 00:05:42.100
You can have a bunch of changes in your
working directory and then pick and

73
00:05:42.100 --> 00:05:45.400
choose which of those changes
should be in the next commit.

74
00:05:48.750 --> 00:05:54.247
So here is an example of git
add-p I kinda have ...diff

75
00:05:54.247 --> 00:06:00.316
displayed it'll show you the diff
between your staging area,

76
00:06:00.316 --> 00:06:05.380
and your commit, your repository version.

77
00:06:05.380 --> 00:06:08.140
So even if you use this tool a lot,

78
00:06:08.140 --> 00:06:11.920
you don't have to remember
any of these commands.

79
00:06:11.920 --> 00:06:15.560
It will ask you,
do you want to stage this hunk?

80
00:06:15.560 --> 00:06:17.120
Y, N, Q, A, D.

81
00:06:17.120 --> 00:06:19.900
What does all of that even mean?

82
00:06:19.900 --> 00:06:23.370
The only command you need to
remember is the question mark.

83
00:06:23.370 --> 00:06:25.190
When you hit question mark at this stage,

84
00:06:25.190 --> 00:06:28.490
it'll print a complete
description of all the commands.

85
00:06:29.670 --> 00:06:34.550
If you wanna exit a partial staging,
you can just press Q.

86
00:06:36.460 --> 00:06:39.960
A friend of mine loves using this feature

87
00:06:39.960 --> 00:06:44.110
when he's staging work
while he's debugging.

88
00:06:44.110 --> 00:06:50.230
So he'll use git add-p to add

89
00:06:50.230 --> 00:06:55.350
the changes but skip over the debugging
statements while he's committing.

90
00:06:55.350 --> 00:07:00.257
And he'll just leave those
in place as he works.

91
00:07:00.257 --> 00:07:03.390
So git add-p, question mark.

92
00:07:03.390 --> 00:07:05.624
That's the two commands
you need to remember.

93
00:07:08.912 --> 00:07:11.761
&gt;&gt; Nina: When you unstage
files from the staging area,

94
00:07:11.761 --> 00:07:14.400
remember you're not removing the files.

95
00:07:14.400 --> 00:07:16.520
The staging area isn't empty.

96
00:07:16.520 --> 00:07:20.346
What you're doing is you're just replacing
them with a copy that's currently in

97
00:07:20.346 --> 00:07:21.075
a repository.

98
00:07:25.468 --> 00:07:29.787
&gt;&gt; Nina: So
a little bit of how content moves in Git.

99
00:07:29.787 --> 00:07:33.283
We can use that git connect-a to move
straight from the working area to

100
00:07:33.283 --> 00:07:34.180
the repository.

101
00:07:35.200 --> 00:07:38.630
We add files from the working
area to the staging area,

102
00:07:38.630 --> 00:07:42.740
we commit from the staging
area to the repository.

103
00:07:42.740 --> 00:07:50.897
And we check out from from the repository
to the staging area and the working area.

