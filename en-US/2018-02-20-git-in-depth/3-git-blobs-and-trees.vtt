WEBVTT

1
00:00:00.300 --> 00:00:03.810
&gt;&gt; Nina Zakharenko: The way that git
stores things as in git objects, and

2
00:00:03.810 --> 00:00:07.170
their basic one is called a blob.

3
00:00:08.900 --> 00:00:11.330
So git stores compressed data in a blob,

4
00:00:11.330 --> 00:00:14.570
along with some metadata about
that blob in the header.

5
00:00:17.500 --> 00:00:24.760
It stores the word blob thing, this is
a blob, and then the size of the content.

6
00:00:24.760 --> 00:00:29.089
Followed by a /0 delimiter, and

7
00:00:29.089 --> 00:00:34.313
that's the null string terminator in C,

8
00:00:34.313 --> 00:00:37.607
and finally the content.

9
00:00:41.306 --> 00:00:45.926
&gt;&gt; Nina Zakharenko: The way that git
does this under the hood is with

10
00:00:45.926 --> 00:00:51.060
a plumbing command called
Git Dash Hash-Object.

11
00:00:51.060 --> 00:00:55.480
So if we ask the Git for
the SHA1 of this string,

12
00:00:55.480 --> 00:00:58.690
Hello comma World exclamation point.

13
00:00:59.920 --> 00:01:04.420
We can do that by echoing this string
that just prints it out in our terminal,

14
00:01:04.420 --> 00:01:07.600
use the pipe to pipe it into this command.

15
00:01:07.600 --> 00:01:12.120
And then we use the --stdin
flag to say get this

16
00:01:12.120 --> 00:01:16.860
input from the terminal,
from standard input.

17
00:01:16.860 --> 00:01:23.874
Otherwise, it expects a file and
we get this long string,

18
00:01:23.874 --> 00:01:28.660
Aab686
&gt;&gt; Nina Zakharenko: Now,

19
00:01:28.660 --> 00:01:34.370
let's generate the SHA1 of the contents
with the metadata as it's stored in Git.

20
00:01:34.370 --> 00:01:40.250
There are many tools available for
many systems to generate the SHA1 hash.

21
00:01:40.250 --> 00:01:44.250
On my Mac, I use openssl sha1.

22
00:01:45.920 --> 00:01:51.120
So now when I generate
the hash of that content blob,

23
00:01:52.120 --> 00:01:58.760
the size, the terminator, and Hello,
World, I get the same number.

24
00:01:58.760 --> 00:02:00.350
It's a match.

25
00:02:00.350 --> 00:02:05.660
If you run the hash method
on the same content twice,

26
00:02:05.660 --> 00:02:07.039
you'll always get the same result.

27
00:02:08.740 --> 00:02:14.820
And that's really one of the core
fundamental features of git.

28
00:02:14.820 --> 00:02:18.330
Because of this,
blobs are generally unique in git.

29
00:02:20.240 --> 00:02:22.108
And the likelihood of a collision,

30
00:02:22.108 --> 00:02:26.539
meaning that two pieces of content
generate the same are infinitely small.

31
00:02:29.489 --> 00:02:32.450
&gt;&gt; Nina Zakharenko: Now where
does GIT store these objects?

32
00:02:35.050 --> 00:02:38.390
It stores them in the dot GIT directory.

33
00:02:38.390 --> 00:02:44.500
So when you run GIT Init in a directory,

34
00:02:44.500 --> 00:02:47.570
GIT will tell you that it
initialized an empty GIT repository,

35
00:02:47.570 --> 00:02:51.098
it will give you the path,
and the docket directory.

36
00:02:51.098 --> 00:02:56.790
So that .git directory contains all
of the data about our repository.

37
00:02:56.790 --> 00:03:02.330
If we delete the .git directory, we blow
our repository away, but not our files.

38
00:03:04.320 --> 00:03:06.980
Now, where are the blobs stored?

39
00:03:10.520 --> 00:03:15.140
I'm gonna run the command
that I did previously to

40
00:03:15.140 --> 00:03:20.020
ask git hash-object, except for
this time, I'm going to be passing in

41
00:03:21.100 --> 00:03:25.170
the w flog before the --stdin flog.

42
00:03:26.950 --> 00:03:31.340
And, that's asking git to go ahead and
write that blob.

43
00:03:36.080 --> 00:03:41.410
For the purpose of this demo, I'm just
going to delete the .git/hooks directory,

44
00:03:41.410 --> 00:03:44.090
so that you see a little
bit of a cleaner output.

45
00:03:44.090 --> 00:03:45.420
We don't need that for now.

46
00:03:45.420 --> 00:03:50.360
Now, when I use the tree command
to look in my .git directory.

47
00:03:51.430 --> 00:03:54.650
I'll see that I have
a directory called Objects.

48
00:03:54.650 --> 00:04:03.010
It has a subdirectory that starts with 8A
and then a file that starts with B6A6.

49
00:04:03.010 --> 00:04:08.140
So our blob is stored in
that objects directory.

50
00:04:08.140 --> 00:04:13.201
The directory starts with the first
two characters of the hash and

51
00:04:13.201 --> 00:04:18.824
then the file is the rest of the
characters but, we need something else.

52
00:04:25.543 --> 00:04:29.190
&gt;&gt; Nina Zakharenko: That
blob is missing information.

53
00:04:29.190 --> 00:04:33.870
It's missing some critical things,
if we're working with files,

54
00:04:33.870 --> 00:04:37.780
not just from input from the terminal.

55
00:04:37.780 --> 00:04:41.970
We don't have filenames, and
we don't have directory structures either.

56
00:04:46.420 --> 00:04:50.380
So If we save a file as a blob,

57
00:04:50.380 --> 00:04:54.000
how do we know what that file was called
and what directory it was stored in?

58
00:04:58.930 --> 00:05:02.310
Git stores this information
in something called a tree.

59
00:05:04.420 --> 00:05:08.891
So the tree,
&gt;&gt; Nina Zakharenko: It

60
00:05:08.891 --> 00:05:11.470
contains a few things.

61
00:05:11.470 --> 00:05:14.450
It contains pointers,
using SHA1, to blobs.

62
00:05:15.920 --> 00:05:21.900
And it also contains pointers
to other trees, and why is that?

63
00:05:21.900 --> 00:05:24.627
It's because subdirectories can be nested,
right?

64
00:05:28.508 --> 00:05:30.370
&gt;&gt; Nina Zakharenko: The tree
also has some metadata.

65
00:05:32.330 --> 00:05:33.770
It stores the type of pointer.

66
00:05:35.170 --> 00:05:36.300
For blob it was blob.

67
00:05:37.740 --> 00:05:40.400
For a blob it's blob,
for a tree it's tree.

68
00:05:40.400 --> 00:05:44.950
It stores a file name or the directory
name of the thing that it is pointing to

69
00:05:44.950 --> 00:05:51.110
and it also stores a mode that is
the file executable is the symbolic link.

70
00:05:52.930 --> 00:05:55.600
Things that are important when
you pull down the repo again.

71
00:05:56.660 --> 00:06:01.450
For example if you are storing a script
and that script is executable,

72
00:06:01.450 --> 00:06:05.590
the next person who goes and pulls down
your repo will have an executable script.

73
00:06:05.590 --> 00:06:08.714
They don't have to change permissions or
do anything special.

74
00:06:13.420 --> 00:06:16.950
&gt;&gt; Nina Zakharenko: So
here we have our tree.

75
00:06:16.950 --> 00:06:20.210
In the previous example,
I calculated the size.

76
00:06:20.210 --> 00:06:22.180
It was just the amount of characters.

77
00:06:22.180 --> 00:06:25.990
In this example, I have a placeholder.

78
00:06:25.990 --> 00:06:30.640
We have that \0 terminator and,

79
00:06:30.640 --> 00:06:35.400
we have a blob that points to hello.txt.

80
00:06:35.400 --> 00:06:38.496
I have this kind of simple
directory structure.

81
00:06:38.496 --> 00:06:42.020
I have hello.txt,
a folder called copies, and

82
00:06:42.020 --> 00:06:47.260
in that copies folder I have
a file called hello-copy.txt.

83
00:06:47.260 --> 00:06:50.942
So the blob points to hello.txt and

84
00:06:50.942 --> 00:06:55.245
the tree points to the copies directory.

85
00:07:01.991 --> 00:07:07.105
&gt;&gt; Nina Zakharenko: So, just a note
that the copies directory here,

86
00:07:07.105 --> 00:07:09.140
it has a file in it.

87
00:07:09.140 --> 00:07:12.430
All right, show of hands, has anyone
tried to add an empty directory to git?

88
00:07:14.110 --> 00:07:15.340
Yeah, it doesn't work, right?

89
00:07:15.340 --> 00:07:20.460
You can't, so
git doesn't store empty directories.

90
00:07:20.460 --> 00:07:24.600
The issue isn't with empty trees,
those work just fine.

91
00:07:24.600 --> 00:07:27.640
It's a limitation in the staging area.

92
00:07:27.640 --> 00:07:31.760
Which we're gonna talk
about in the next section.

93
00:07:33.010 --> 00:07:37.549
So the staging area, that one only keeps
track of files and not directories, so

94
00:07:37.549 --> 00:07:39.671
we can't store empty directories.

95
00:07:45.630 --> 00:07:47.680
&gt;&gt; Nina Zakharenko: So, trees.

96
00:07:47.680 --> 00:07:50.410
They point to other trees and blobs.

97
00:07:50.410 --> 00:07:52.466
They're a directed graph.

98
00:07:54.808 --> 00:07:59.194
&gt;&gt; Nina Zakharenko: And because of the
feature of the Sha1, where if you run that

99
00:07:59.194 --> 00:08:05.170
algorithm on a piece of content,
it always returns the shame sha1.

100
00:08:05.170 --> 00:08:09.050
In git,
identical content is only stored once.

101
00:08:09.050 --> 00:08:13.380
So we have our directory structure
from the previous example.

102
00:08:13.380 --> 00:08:14.240
We have a tree here.

103
00:08:15.350 --> 00:08:20.410
The first blob points to hello.txt.

104
00:08:20.410 --> 00:08:25.400
We have another tree, in this tree
where does that tree point to?

105
00:08:25.400 --> 00:08:26.930
Which directory?

106
00:08:26.930 --> 00:08:27.670
Can anyone tell me.

107
00:08:29.520 --> 00:08:30.220
&gt;&gt; Speaker 2: Copies?

108
00:08:30.220 --> 00:08:33.660
&gt;&gt; Nina Zakharenko: That's right,
it points to copies and

109
00:08:33.660 --> 00:08:39.330
in copies I have hello-copy.txt,
an it's an exact copy of my hello file.

110
00:08:40.750 --> 00:08:46.710
So, that tree points to
another tree ,where,

111
00:08:46.710 --> 00:08:51.040
and that one has a blog that
points to hello-copy.txt.

112
00:08:51.040 --> 00:08:55.290
Now that blob points to the same place.

113
00:08:55.290 --> 00:08:57.836
We can see that the sha1s here match.

114
00:09:01.291 --> 00:09:03.692
&gt;&gt; Nina Zakharenko: And
this is really, really important,

115
00:09:03.692 --> 00:09:06.450
one of the most critical ideas about git.

116
00:09:06.450 --> 00:09:09.320
This is how git saves tons of space

117
00:09:09.320 --> 00:09:11.870
on your hard drive when
storing full repositories.

118
00:09:16.570 --> 00:09:20.710
It's one of the critical features that
has driven a lot of design decisions.

119
00:09:22.040 --> 00:09:26.520
So as we commit, if that blob or the tree,

120
00:09:26.520 --> 00:09:31.370
if it hasn't changed if it stays the same,
we're just gonna point to the same copy.

121
00:09:33.420 --> 00:09:37.410
That's why checking out
branches in git is super fast.

122
00:09:37.410 --> 00:09:38.410
Mark?

123
00:09:38.410 --> 00:09:42.720
&gt;&gt; Speaker 2: There's some confusion
around the difference between the blob

124
00:09:42.720 --> 00:09:44.720
the and the SHA-1 hash.

125
00:09:44.720 --> 00:09:46.910
Like what is the difference?

126
00:09:46.910 --> 00:09:51.952
&gt;&gt; Nina Zakharenko: So the SHA-1 hash is,
that number, in this example for

127
00:09:51.952 --> 00:09:56.690
hello.txt, the SHA-1
hash starts with AAB68.

128
00:09:58.270 --> 00:10:03.130
When you run hash object
on a piece of content,

129
00:10:03.130 --> 00:10:07.570
that's the number that you'll get,
it's the key for that piece of content.

130
00:10:09.150 --> 00:10:11.650
&gt;&gt; Speaker 2: And
the blob is the pointer to the hash?

131
00:10:11.650 --> 00:10:13.420
Or what are you saying
when you say the blob?

132
00:10:14.480 --> 00:10:17.606
&gt;&gt; Nina Zakharenko: The blob is,
it stores that key, so

133
00:10:17.606 --> 00:10:23.561
that's how it knows which piece
of content it's associated with.

134
00:10:25.656 --> 00:10:27.220
&gt;&gt; Speaker 2: So
that's like the data structure?

135
00:10:28.630 --> 00:10:30.910
&gt;&gt; Nina Zakharenko: Yeah
can I go back a few slides?

136
00:10:30.910 --> 00:10:31.410
&gt;&gt; Speaker 2: Yeah, sure.

137
00:10:32.500 --> 00:10:36.790
&gt;&gt; Nina Zakharenko: So
I'm gonna go back to this slide.

138
00:10:36.790 --> 00:10:40.416
So if you all have a terminal open,
let's try this out.

139
00:10:45.372 --> 00:10:47.429
&gt;&gt; Nina Zakharenko: Type echo space,
and then,

140
00:10:47.429 --> 00:10:52.160
make sure you get the punctuation and
the capitalization right.

141
00:10:56.726 --> 00:11:00.659
&gt;&gt; Nina Zakharenko: If you run this on
your terminal and you copy it exactly,

142
00:11:00.659 --> 00:11:02.930
you should get the same number.

143
00:11:04.010 --> 00:11:05.658
Did everyone get the same result?

144
00:11:05.658 --> 00:11:10.090
Awesome, all right.

145
00:11:10.090 --> 00:11:16.730
So that number is what
happens when git runs

146
00:11:16.730 --> 00:11:22.160
that content through a cryptographic
function that generates the hash.

147
00:11:24.590 --> 00:11:30.080
Did that answer the question, Mark?

148
00:11:31.850 --> 00:11:35.160
&gt;&gt; Speaker 2: I will not know because
there's like a delay in the stream.

149
00:11:35.160 --> 00:11:37.100
&gt;&gt; Nina Zakharenko: Got it, okay.

150
00:11:37.100 --> 00:11:39.950
&gt;&gt; Speaker 2: But yeah,
I mean like the question is like,

151
00:11:39.950 --> 00:11:44.480
when you refer to a blob,
that's something other than this number.

152
00:11:44.480 --> 00:11:47.900
The blog's essentially is
a pointer to this number.

153
00:11:47.900 --> 00:11:48.740
&gt;&gt; Nina Zakharenko: Right.

154
00:11:48.740 --> 00:11:49.490
&gt;&gt; Speaker 2: Okay.

155
00:11:49.490 --> 00:11:52.070
&gt;&gt; Nina Zakharenko: And
we'll get into that in a few slides.

156
00:11:52.070 --> 00:11:52.570
&gt;&gt; Speaker 2: Okay.

157
00:11:53.740 --> 00:11:58.110
&gt;&gt; Nina Zakharenko: So
we were here talking about how identical

158
00:11:58.110 --> 00:11:59.930
content is only stored once.

159
00:12:01.850 --> 00:12:06.230
And how this allows git to
be incredibly efficient.

160
00:12:06.230 --> 00:12:09.290
It looks like no one in
this room has worked with

161
00:12:09.290 --> 00:12:11.030
an older version control system.

162
00:12:11.030 --> 00:12:12.600
I know Mark said he has.

163
00:12:13.860 --> 00:12:16.230
You have, you have, ok.

164
00:12:16.230 --> 00:12:20.840
Back in the day before git when
you wanted to change branches,

165
00:12:20.840 --> 00:12:23.390
do you remember what that was like,
it would just take forever.

166
00:12:23.390 --> 00:12:28.210
It would go and fetch all
the copies down from the server and

167
00:12:28.210 --> 00:12:33.560
it wasn't instantaneous, so
this is really pretty cool.

168
00:12:33.560 --> 00:12:36.090
So git has some other optimizations too.

169
00:12:39.307 --> 00:12:42.730
&gt;&gt; Nina Zakharenko: It's kind
of because of the way we work.

170
00:12:42.730 --> 00:12:46.330
So as our files change,
they stay mostly similar.

171
00:12:47.400 --> 00:12:51.140
We might add a method here or
there or change a comment line.

172
00:12:52.770 --> 00:12:55.460
And the way that git deals with that, so

173
00:12:55.460 --> 00:12:58.840
we already talked about how
git objects are compressed.

174
00:12:58.840 --> 00:13:03.040
Git is going to optimize for
files staying mostly similar by

175
00:13:03.040 --> 00:13:06.530
compressing these files
together into a Packfile.

176
00:13:06.530 --> 00:13:10.760
The Packfile stores the object and
it stores something called a delta.

177
00:13:12.090 --> 00:13:16.956
And that delta is the difference between
one version of the file and the next.

178
00:13:16.956 --> 00:13:22.540
Pack files are generated

179
00:13:22.540 --> 00:13:26.558
when generally you have too many
objects during garbage control.

180
00:13:26.558 --> 00:13:30.540
Sorry, garbage collection.

181
00:13:30.540 --> 00:13:35.950
It runs garbage collection under the hood,
generally every few weeks or

182
00:13:35.950 --> 00:13:37.120
unless you ask it to.

183
00:13:38.680 --> 00:13:41.930
These packfiles are also generated
when you push to a remote.

184
00:13:41.930 --> 00:13:49.030
Deep-diving into this section of internals
is outside of the scope of this class.

185
00:13:49.030 --> 00:13:52.900
But now you can kind of understand what's
going on under the hood when you see that

186
00:13:52.900 --> 00:13:55.480
compressing deltas message
during to get push.

187
00:13:55.480 --> 00:13:56.720
You guys have all seen that.

188
00:13:59.460 --> 00:14:04.080
So you can easily poke around the .git
folder with newly created repository, but

189
00:14:04.080 --> 00:14:08.380
once your repository gets too
big you do a lot of work in it.

190
00:14:08.380 --> 00:14:11.920
Possibly after a push, those objects
are gonna start getting to compressed and

191
00:14:11.920 --> 00:14:13.680
you won't just be able to peek at them.

