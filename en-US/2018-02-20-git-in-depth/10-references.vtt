WEBVTT

1
00:00:00.250 --> 00:00:02.800
&gt;&gt; Nina Zakharenko: References
are pointers to commits.

2
00:00:02.800 --> 00:00:07.860
We already learned that there
are three types of Git references.

3
00:00:07.860 --> 00:00:13.160
Tags, annotated tags, branches, and HEAD.

4
00:00:13.160 --> 00:00:20.080
So now let's talk about,
let's get a little bit philosophical.

5
00:00:20.080 --> 00:00:21.090
What is a branch?

6
00:00:21.090 --> 00:00:27.260
So a branch, it's just a pointer
to a particular commit.

7
00:00:28.940 --> 00:00:32.810
The pointer to the current
branch is going to change.

8
00:00:32.810 --> 00:00:35.740
I'm sorry,
the pointer of the current branch

9
00:00:35.740 --> 00:00:37.820
is going to change as
new commits are made.

10
00:00:41.600 --> 00:00:43.110
What is HEAD?

11
00:00:43.110 --> 00:00:46.584
HEAD is how Git knows what
branch you're currently on.

12
00:00:46.584 --> 00:00:51.033
But most importantly,
HEAD is how Git knows

13
00:00:51.033 --> 00:00:55.370
what the parent of
the next commit will be.

14
00:00:56.820 --> 00:01:01.400
It's kind of effectively a sim link to
the branch that you're currently working

15
00:01:01.400 --> 00:01:06.950
on.
&gt;&gt; Nina Zakharenko: It's a pointer.

16
00:01:06.950 --> 00:01:08.830
It points to the name
of the current branch.

17
00:01:10.400 --> 00:01:13.420
But there's one more
thing that can happen.

18
00:01:15.590 --> 00:01:20.390
It can point to a commit too and
that will get us into a detached HEAD

19
00:01:20.390 --> 00:01:24.678
state.
&gt;&gt; Nina Zakharenko: It also moves when

20
00:01:24.678 --> 00:01:28.985
you either make a commit to
the currently active branch, or

21
00:01:28.985 --> 00:01:38.727
when you check out a new branch.
&gt;&gt; Nina Zakharenko: Now,

22
00:01:38.727 --> 00:01:45.475
in the first exercise,
when I check out my master branch,

23
00:01:45.475 --> 00:01:51.708
we looked at the value of
.git/HEAD under the hood.

24
00:01:51.708 --> 00:01:55.443
So, when I'm on the master branch,

25
00:01:55.443 --> 00:02:00.032
the HEAD will point to refs/head/master.

26
00:02:00.032 --> 00:02:05.599
When I check out a feature branch,
when I look at the value of HEAD again,

27
00:02:05.599 --> 00:02:14.208
now it's pointing to refs/heads/feature.
&gt;&gt; Nina Zakharenko: So

28
00:02:14.208 --> 00:02:19.431
for the slides, I have a little
sample repo, just a simple blog.

29
00:02:19.431 --> 00:02:25.780
Index.txt contains links to the entries
as well as our post titles.

30
00:02:25.780 --> 00:02:28.820
And the post directory
contains our blob entries.

31
00:02:30.400 --> 00:02:31.360
Simple, simple.

32
00:02:31.360 --> 00:02:33.440
Nothing complicated here.

33
00:02:33.440 --> 00:02:39.493
I made the directory posts and
made a welcome.txt post,

34
00:02:39.493 --> 00:02:48.210
and I have an index.txt that says that the
title of that post is welcome to my blog.

35
00:02:49.980 --> 00:02:54.000
So the current state of my repo,
if I get in it and I add

36
00:02:55.670 --> 00:02:59.800
that those two files in that one
directory, I have an initial commit.

37
00:03:01.200 --> 00:03:07.149
In this case, cd0b.
&gt;&gt; Nina Zakharenko: Now

38
00:03:07.149 --> 00:03:14.170
when I check out a new branch,
I was on the master branch.

39
00:03:14.170 --> 00:03:17.240
When I check out that new branch,
it's gonna point to master.

40
00:03:18.920 --> 00:03:22.219
It's going to point to the same
commit that master was pointing at.

41
00:03:24.330 --> 00:03:29.460
And HEAD is now going
to point at tech posts.

42
00:03:35.990 --> 00:03:37.370
So my current repo state.

43
00:03:39.070 --> 00:03:45.690
Let's say I add a new post about
Python and I make a commit.

44
00:03:47.440 --> 00:03:53.346
That commit 2b0 has a parent commit, cd0b.

45
00:03:53.346 --> 00:03:59.460
Now tech_posts branch has moved, right?

46
00:03:59.460 --> 00:04:02.750
Master is still on that
initial commit branch.

47
00:04:02.750 --> 00:04:07.695
And because we're on the tech_post branch,

48
00:04:07.695 --> 00:04:13.550
HEAD has moved along it.
&gt;&gt; Nina Zakharenko: Does that make sense?

49
00:04:13.550 --> 00:04:15.480
Does anyone have questions about this?

50
00:04:17.880 --> 00:04:21.776
You guys all look like you're
deep in thought which is great.

51
00:04:21.776 --> 00:04:27.500
Cuz this is really important concept to
understand when we are working with Git,

52
00:04:27.500 --> 00:04:29.320
but it's also pretty simple.

