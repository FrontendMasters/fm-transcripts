WEBVTT

1
00:00:00.140 --> 00:00:01.290
&gt;&gt; Nina Zakharenko: To examine history,

2
00:00:01.290 --> 00:00:05.810
we can use git log, its the basic command
that shows the history of your repository.

3
00:00:05.810 --> 00:00:08.460
The vanilla getlog isn't very helpful,

4
00:00:08.460 --> 00:00:10.910
I don't know how many of
you use it by default.

5
00:00:10.910 --> 00:00:15.610
But, there's a lot of really
cool features and flags,

6
00:00:15.610 --> 00:00:19.916
that help us navigate our
repository a lot easier.

7
00:00:19.916 --> 00:00:24.677
For example, we can pass in --since, and

8
00:00:24.677 --> 00:00:31.769
pass on arguments like,
since yesterday, since two weeks ago.

9
00:00:31.769 --> 00:00:38.190
I tend to use this most frequently, but
git also has flags for before and after.

10
00:00:38.190 --> 00:00:43.690
For example, when I'm working, I can say,
what work did I do in the past day?

11
00:00:43.690 --> 00:00:47.970
Or we noticed a bug in
production 20 minutes ago,

12
00:00:47.970 --> 00:00:51.990
what commits went in since 20 minutes ago?

13
00:00:54.590 --> 00:00:59.000
We can also use the follow flag, that
lets us log files that have been moved or

14
00:00:59.000 --> 00:01:00.320
renamed.

15
00:01:00.320 --> 00:01:01.910
If you move or

16
00:01:01.910 --> 00:01:06.710
rename a file git is great about knowing
that that file has the same content.

17
00:01:08.550 --> 00:01:11.600
But when you rename files it can
be easy to lose track of them,

18
00:01:11.600 --> 00:01:14.350
especially when they get
moved around frequently.

19
00:01:14.350 --> 00:01:19.330
If you try to do a basic git
blame on the newly renamed file,

20
00:01:19.330 --> 00:01:23.970
it's not gonna show you the full story
of how that code might've changed.

21
00:01:23.970 --> 00:01:30.600
So, using git log with follow, it allows
you to specify that file name, and

22
00:01:30.600 --> 00:01:36.400
it's gonna track it as that file changes
or moves inside different directories.

23
00:01:36.400 --> 00:01:41.128
If we use the --name-status flag, it's
also gonna show you the name of the file,

24
00:01:41.128 --> 00:01:49.453
what that was when the changed happened.
&gt;&gt; Nina Zakharenko: Git log --grep,

25
00:01:49.453 --> 00:01:53.620
lets us search for commit messages
that match a regular expression.

26
00:01:53.620 --> 00:01:58.917
This can be used with, it can be mixed and
matched with lots of other git flags.

27
00:01:58.917 --> 00:02:04.089
In this example, I'm grepping for
the term mail, the author is Nina.

28
00:02:04.089 --> 00:02:07.612
Mail like email, the author is is Nina and

29
00:02:07.612 --> 00:02:12.559
since of two weeks.
&gt;&gt; Nina Zakharenko: We

30
00:02:12.559 --> 00:02:15.285
can also use diff-filter.

31
00:02:16.720 --> 00:02:21.307
This allows us to selectively include or
exclude files that have been added,

32
00:02:21.307 --> 00:02:22.656
deleted, modified.

33
00:02:22.656 --> 00:02:31.431
There are quite a few diff-filters.
&gt;&gt; Nina Zakharenko: In

34
00:02:31.431 --> 00:02:38.179
this case I'm parsing in R for renamed.
&gt;&gt; Nina Zakharenko: Another

35
00:02:38.179 --> 00:02:40.545
useful example is, I'm looking for

36
00:02:40.545 --> 00:02:45.440
a file, it's been renamed in a previous
commit, how would I find it again?

37
00:02:45.440 --> 00:02:48.037
I would use the diff-filter
with the m flag for

38
00:02:48.037 --> 00:02:53.683
modifying.
&gt;&gt; Nina Zakharenko: Now,

39
00:02:53.683 --> 00:02:58.448
this is something that I see
confuse people all the time,

40
00:02:58.448 --> 00:03:00.739
over and over again, hat.

41
00:03:00.739 --> 00:03:04.288
How many of you know about and
use the hat or

42
00:03:04.288 --> 00:03:09.174
the tilde?
&gt;&gt; Nina Zakharenko: But you've seen it on

43
00:03:09.174 --> 00:03:13.960
stack overflow and exercises, and
you're like what does this mean?

44
00:03:16.870 --> 00:03:18.674
It's a way of referencing commits.

45
00:03:18.674 --> 00:03:21.491
So the hat with no arguments,

46
00:03:21.491 --> 00:03:26.673
is the same as the hat with
the number 1 is an argument,

47
00:03:26.673 --> 00:03:32.549
which means the first parent commit,
n it nth parent commit.

48
00:03:32.549 --> 00:03:38.364
So, in modern workforce,
in most merges we only have two parents,

49
00:03:38.364 --> 00:03:41.842
but git allows lots and lots of parents.

50
00:03:41.842 --> 00:03:45.720
So this is how you would choose
which parent to refer to.

51
00:03:47.370 --> 00:03:49.512
The tilde is how many commits back to go,

52
00:03:49.512 --> 00:03:54.951
only following the first parent.
&gt;&gt; Nina Zakharenko: And

53
00:03:54.951 --> 00:04:00.067
the hat and the tilde can be combined,
and I'm gonna show you

54
00:04:00.067 --> 00:04:05.805
an example.
&gt;&gt; Nina Zakharenko: We're

55
00:04:05.805 --> 00:04:09.990
gonna go through some
exercises based on this graph.

56
00:04:11.550 --> 00:04:14.510
So, A is the very latest commit.

57
00:04:15.690 --> 00:04:19.700
D, E, and F are the oldest
commits in this repository.

58
00:04:21.810 --> 00:04:25.559
And commit nodes B and
C are parents of commit A.

59
00:04:25.559 --> 00:04:30.314
That means that A is
a merge commit of B and C.

60
00:04:30.314 --> 00:04:38.544
Let's do some exercises.
&gt;&gt; Nina Zakharenko: How

61
00:04:38.544 --> 00:04:42.025
would we reference A, or A, or hat 0?

62
00:04:42.025 --> 00:04:46.922
Pretty easy.
&gt;&gt; Nina Zakharenko: How would

63
00:04:46.922 --> 00:04:48.720
we reference B?

64
00:04:50.790 --> 00:04:53.430
We can do it with A hat no arguments,
right?

65
00:04:53.430 --> 00:04:55.590
Because that's the default.

66
00:04:57.620 --> 00:05:00.370
Or we can say A tilde 1,

67
00:05:00.370 --> 00:05:05.780
give me your first commit only
following the first parent.

68
00:05:05.780 --> 00:05:11.196
When you do a git merge,
git keeps track of which parent was first,

69
00:05:11.196 --> 00:05:13.370
which parent was second.

70
00:05:13.370 --> 00:05:15.400
Those don't change, they're static values.

71
00:05:17.120 --> 00:05:23.830
How would we reference C?
&gt;&gt; Nina Zakharenko: With A hat 2, right?

72
00:05:23.830 --> 00:05:26.390
We're asking for the second parent of C.

73
00:05:27.900 --> 00:05:30.680
B is the first parent,
C is the second parent.

74
00:05:32.730 --> 00:05:37.350
If we wanted to navigate to commit F using

75
00:05:38.460 --> 00:05:42.000
this format,
we would need to do it through C,

76
00:05:43.290 --> 00:05:48.960
because none of these,
I'm sorry B also goes to F.

77
00:05:48.960 --> 00:05:53.870
But if we wanted to take a shortcut,
we would have to go through commit C.

78
00:05:55.640 --> 00:05:57.160
Now, one more example, D.

79
00:05:58.360 --> 00:06:05.470
We can say A hat hat,
meaning the first parent, first parent.

80
00:06:05.470 --> 00:06:09.980
We can do that with arguments,
or we can say A tilde 2.

81
00:06:09.980 --> 00:06:13.370
So, follow two commits
back on the first parent.

82
00:06:13.370 --> 00:06:19.160
I recommend checking out this
graph again after today.

83
00:06:19.160 --> 00:06:22.290
I promise it will make sense if
you stare at it long enough.

84
00:06:23.760 --> 00:06:26.457
And these, the hat, and the tilde,

85
00:06:26.457 --> 00:06:30.470
I probably use the tilde more
frequently than the hat.

86
00:06:30.470 --> 00:06:35.008
They're very useful if you want to, say,

87
00:06:35.008 --> 00:06:41.323
I need to revert, but
I need to revert to three commits ago.

88
00:06:41.323 --> 00:06:45.988
Instead of going, and
finding that commit number, and

89
00:06:45.988 --> 00:06:50.850
copying it and pasting it,
you can easily say tilde 3 to go

90
00:06:50.850 --> 00:06:53.442
three commits back.
&gt;&gt; Audience member: Is the tilde

91
00:06:53.442 --> 00:06:56.366
designed to be used always with a number,
or

92
00:06:56.366 --> 00:06:59.419
can you do it without parsing anything?
&gt;&gt; Nina Zakharenko: If you

93
00:06:59.419 --> 00:07:02.372
don't pass a number, it uses 1 by default.
&gt;&gt; Audience member: Okay.

