WEBVTT

1
00:00:00.070 --> 00:00:02.390
&gt;&gt; Nina Zakharenko: Let's
go through the solution.

2
00:00:02.390 --> 00:00:06.700
So in this case I'm going
to make a new directory

3
00:00:10.340 --> 00:00:13.300
and navigate to it.

4
00:00:15.920 --> 00:00:19.690
Now if I run git status here,

5
00:00:19.690 --> 00:00:24.880
we'll see that this directory doesn't
have a git repository associated with it.

6
00:00:27.840 --> 00:00:32.060
So I type git in it,

7
00:00:32.060 --> 00:00:36.070
that initialized the empty git
repository in that directory.

8
00:00:37.970 --> 00:00:43.130
Now, let's play around and
see what's in that .git directory.

9
00:00:43.130 --> 00:00:49.464
So the first thing I'm gonna do is,
&gt;&gt; Nina Zakharenko: Echo,

10
00:00:52.225 --> 00:00:54.580
&gt;&gt; Nina Zakharenko: Hello, World.

11
00:00:54.580 --> 00:00:57.060
I'm sorry, have a syntax error here.

12
00:00:57.060 --> 00:01:00.980
Gonna echo Hello,
World into a file called hello.txt.

13
00:01:03.733 --> 00:01:09.296
&gt;&gt; Nina Zakharenko: Now I'm going to add
that file, and I'm going to make a commit.

14
00:01:15.949 --> 00:01:20.348
&gt;&gt; Nina Zakharenko: We'll see here
that Git has told me that it's created

15
00:01:20.348 --> 00:01:23.160
a commit at this hash.

16
00:01:23.160 --> 00:01:27.390
Now, this hash will be different for
each of you.

17
00:01:27.390 --> 00:01:32.004
That's because all
the contents of the file

18
00:01:32.004 --> 00:01:37.373
are,
&gt;&gt; Nina Zakharenko: The same.

19
00:01:37.373 --> 00:01:41.020
The Commit information is different,

20
00:01:41.020 --> 00:01:44.030
meaning the author, and the date,
and so on and so forth.

21
00:01:44.030 --> 00:01:46.817
So you'll all have a different hash for
the commit.

22
00:01:50.624 --> 00:01:52.590
&gt;&gt; Nina Zakharenko: Now, in my examples,

23
00:01:52.590 --> 00:01:58.540
I was using tree to look inside
the .git/objects folder.

24
00:01:58.540 --> 00:02:00.270
But if you don't have tree,

25
00:02:00.270 --> 00:02:05.340
if you have trouble setting it up,
you can just use ls to list files.

26
00:02:06.460 --> 00:02:12.730
So for example I can ls
the .git/objects directory and

27
00:02:12.730 --> 00:02:17.670
it'll show me these two digit prefixes.

28
00:02:19.440 --> 00:02:24.665
Now the reason we have these is
because huge Git repositories

29
00:02:24.665 --> 00:02:29.486
get hundreds of thousands of commits,
objects, etc.

30
00:02:29.486 --> 00:02:32.873
So Git does a little
bit of optimization and

31
00:02:32.873 --> 00:02:37.493
it prefixes the first two
characters to make a directory.

32
00:02:37.493 --> 00:02:42.413
And then any of the files that start
with those two characters will be

33
00:02:42.413 --> 00:02:45.790
in that subdirectory but
missing the prefix.

34
00:02:47.400 --> 00:02:54.010
So the hash is hexadecimal, meaning
that in a very full Git repository,

35
00:02:54.010 --> 00:02:57.970
we might have a maximum of 256 subfolders.

36
00:03:00.640 --> 00:03:03.650
But I'm gonna use a tree,
because I have it set up.

37
00:03:05.910 --> 00:03:11.310
And I'm gonna tree my
.git/objects directory.

38
00:03:13.160 --> 00:03:18.168
We'll see that we have three new objects.

39
00:03:18.168 --> 00:03:23.142
The SHA-1 for
your commit might be different than mine.

40
00:03:23.142 --> 00:03:24.073
The SHA-1 for

41
00:03:24.073 --> 00:03:28.640
your blob will be the same as long as
I typed the same thing as you did.

42
00:03:28.640 --> 00:03:33.520
And the tree will be the same if
your file has the same file name and

43
00:03:33.520 --> 00:03:36.729
the same contents as my file,
but the commit will be different.

44
00:03:38.720 --> 00:03:43.470
So let's check out these files
using command git cat file.

45
00:03:46.090 --> 00:03:50.480
If I use the -t argument,
that'll tell me the type.

46
00:03:50.480 --> 00:03:54.670
So the first thing I wanna do
is check the first object.

47
00:03:54.670 --> 00:03:59.050
And the way that I do that is by
typing in the prefix, in this case,

48
00:03:59.050 --> 00:04:04.100
8a, followed by a few
characters of the hash.

49
00:04:05.940 --> 00:04:10.200
The reason we don't have to type
in this whole 40 digit hash

50
00:04:10.200 --> 00:04:15.150
every time we're working with Git is
that unless your repository is huge,

51
00:04:15.150 --> 00:04:22.000
chances are your commits should be
addressable by about five characters.

52
00:04:22.000 --> 00:04:27.940
Because that's enough differentiation
to figure out which commit is unique.

53
00:04:27.940 --> 00:04:31.149
If you work on a huge repository and
try to use too few characters and

54
00:04:31.149 --> 00:04:33.976
there are conflicts,
Git will complain and let you know.

55
00:04:33.976 --> 00:04:38.460
But chances are none of you
are working on the Linux kernel.

56
00:04:38.460 --> 00:04:41.070
So, you probably won't
run into that problem.

57
00:04:42.600 --> 00:04:47.060
So, I'm gonna git cat-file -t,
the first file.

58
00:04:47.060 --> 00:04:49.310
And I'll see that it's a blob.

59
00:04:49.310 --> 00:04:53.480
If I git cat-file -p it.

60
00:04:54.880 --> 00:04:56.370
What will I see?

61
00:04:56.370 --> 00:04:58.550
Can anyone in the room tell me?

62
00:04:58.550 --> 00:04:59.689
What should I see?

63
00:04:59.689 --> 00:05:01.461
&gt;&gt; Speaker 2: Hello, world.

64
00:05:01.461 --> 00:05:03.160
&gt;&gt; Nina Zakharenko: Hello, world, right.

65
00:05:03.160 --> 00:05:07.540
So, hello world is
the contents of that blob.

66
00:05:07.540 --> 00:05:12.670
And the contents of the file hello.txt.

67
00:05:12.670 --> 00:05:15.540
Notice here we don't have hello.txt,

68
00:05:15.540 --> 00:05:19.760
we don't know what file name
this content is associated with.

69
00:05:19.760 --> 00:05:23.580
In order to get that information,
we're gonna need to look in the tree.

70
00:05:23.580 --> 00:05:27.680
So let's do git file -t and

71
00:05:27.680 --> 00:05:31.788
check out what the, oops.

72
00:05:35.803 --> 00:05:38.490
&gt;&gt; Nina Zakharenko: Let's check
out the type of the next object.

73
00:05:38.490 --> 00:05:41.170
In this case, it's commit.

74
00:05:41.170 --> 00:05:43.250
I wanna look at the tree first.

75
00:05:44.250 --> 00:05:49.170
So if I git cat-file -t
the last object here,

76
00:05:49.170 --> 00:05:52.170
by process of elimination,
that should be the tree,

77
00:05:52.170 --> 00:05:56.970
cuz our simple repository has one blob,
one tree and one commit.

78
00:05:59.360 --> 00:06:04.580
And if I git cat-file -p,

79
00:06:04.580 --> 00:06:12.730
starting with the prefix bc, what critical
information will be in this tree?

80
00:06:15.790 --> 00:06:22.049
It's going to be the file name,
oops, I am sorry, making typos.

81
00:06:23.520 --> 00:06:25.372
All around.

82
00:06:25.372 --> 00:06:27.901
Let's clear that and try that again.

83
00:06:32.361 --> 00:06:34.680
&gt;&gt; Nina Zakharenko: So,
that's our tree object.

84
00:06:34.680 --> 00:06:38.030
it has the file mode, all right.

85
00:06:38.030 --> 00:06:42.410
It has blob,
meaning it's pointing to a blob.

86
00:06:42.410 --> 00:06:45.190
It has that SHA of that blob.

87
00:06:49.780 --> 00:06:57.540
So, this SHA here matches this here.

88
00:06:57.540 --> 00:07:03.040
And it has that crucial information,
the filename hello.txt.

89
00:07:03.040 --> 00:07:05.740
Now, let's take a look at our commit.

90
00:07:08.150 --> 00:07:15.170
And that is this last object here.

91
00:07:15.170 --> 00:07:18.450
If I git cat-file -t,
that shows me that it's the commit.

92
00:07:20.150 --> 00:07:24.660
Now, if I gtt -file,
or git cat-file -p it.

93
00:07:24.660 --> 00:07:27.414
It'll show me the information
stored in that commit.

94
00:07:27.414 --> 00:07:31.080
So it points to the tree
that commit points to.

95
00:07:31.080 --> 00:07:36.760
You'll see that this SHA
here matches this SHA here.

96
00:07:36.760 --> 00:07:43.210
The author and the committer and the
commit message along with the timestamp.

97
00:07:45.020 --> 00:07:48.860
Something crucial to note here, this is
our initial commit, so there is no parent.

98
00:07:48.860 --> 00:07:52.820
But every other commit that you make in
this repository is also going to point

99
00:07:52.820 --> 00:07:53.590
to a parent commit.

100
00:07:55.580 --> 00:07:57.470
Now, let's take a quick look at the refs.

101
00:08:00.530 --> 00:08:07.700
Right now we're on our master branch,
it has one commit.

102
00:08:10.720 --> 00:08:17.390
So if I cat the value in HEAD, we'll see
that it's pointing to the master branch.

103
00:08:18.780 --> 00:08:28.260
If I cat the value in
.git/refs/heads/master.

104
00:08:28.260 --> 00:08:33.410
We'll see that it's pointing to
our first commit right here.

105
00:08:37.000 --> 00:08:39.740
Note that because head points to master,

106
00:08:41.060 --> 00:08:45.130
head also points to
this commit right here.

107
00:08:47.470 --> 00:08:52.010
So when you're referring
to head in this scenario,

108
00:08:52.010 --> 00:08:55.150
it will also point to this commit.

109
00:08:59.030 --> 00:09:00.880
And we can verify this.

110
00:09:03.830 --> 00:09:06.665
I'm gonna run this flag no-pager just so

111
00:09:06.665 --> 00:09:12.101
that my log displays in the same screen
instead of opening with the page or less.

112
00:09:20.251 --> 00:09:21.099
&gt;&gt; Nina Zakharenko: Oops.

113
00:09:24.596 --> 00:09:25.445
&gt;&gt; Nina Zakharenko: So sorry.

114
00:09:25.445 --> 00:09:29.375
--no-pager goes before.

115
00:09:29.375 --> 00:09:30.705
There we go.

116
00:09:30.705 --> 00:09:34.545
So if I look at my log we'll
see our initial commit.

117
00:09:34.545 --> 00:09:38.438
And if I look at the master reference,

118
00:09:38.438 --> 00:09:44.050
we'll see that this commit
matches this commit.

119
00:09:44.050 --> 00:09:46.166
These SHAs are the same.

120
00:09:51.650 --> 00:09:59.085
&gt;&gt; Nina Zakharenko: Now,
&gt;&gt; Nina Zakharenko: If

121
00:09:59.085 --> 00:10:03.881
we look at our .git/refs directory
we will see that our master

122
00:10:03.881 --> 00:10:06.240
branch is stored under heads.

123
00:10:08.890 --> 00:10:11.060
Now if we create a new branch.

124
00:10:13.903 --> 00:10:18.754
&gt;&gt; Nina Zakharenko: All right, using the
git branch commands, not git checkout -b,

125
00:10:18.754 --> 00:10:23.350
means that we'll create a new
branch without switching to it.

126
00:10:24.630 --> 00:10:29.640
So when I run this command,
I'm still on the master branch.

127
00:10:30.900 --> 00:10:35.110
And to confirm that I can run git status.

128
00:10:35.110 --> 00:10:40.202
But now when I use tree to
look in my .git/refs directory

129
00:10:40.202 --> 00:10:46.584
I'll see that I have a new value
under heads, and that's a new branch.

