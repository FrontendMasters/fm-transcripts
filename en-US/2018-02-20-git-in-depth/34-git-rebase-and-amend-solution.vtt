WEBVTT

1
00:00:00.170 --> 00:00:02.850
&gt;&gt; Nina Zakharenko: Let's go ahead and
walk through the solution.

2
00:00:02.850 --> 00:00:07.463
So the first thing we'll need
to do is checkout exercise7.

3
00:00:09.940 --> 00:00:11.324
&gt;&gt; Nina Zakharenko: And

4
00:00:15.690 --> 00:00:16.917
&gt;&gt; Nina Zakharenko: I am going to make

5
00:00:16.917 --> 00:00:21.587
a new commit.
&gt;&gt; Nina Zakharenko: I'm going to

6
00:00:25.763 --> 00:00:27.798
&gt;&gt; Nina Zakharenko: Make a new file called

7
00:00:27.798 --> 00:00:32.804
my_name.txt for example.
&gt;&gt; Nina Zakharenko: Actually

8
00:00:32.804 --> 00:00:37.996
let me follow through with the
&gt;&gt; Nina Zakharenko: With

9
00:00:37.996 --> 00:00:40.766
the examples that you use,

10
00:00:40.766 --> 00:00:46.136
so
&gt;&gt; Nina Zakharenko: We

11
00:00:46.136 --> 00:00:50.885
have our first file and a second file.

12
00:00:58.432 --> 00:01:02.466
&gt;&gt; Nina Zakharenko: And I'm gonna add git

13
00:01:02.466 --> 00:01:07.397
add first.txt and commit

14
00:01:07.397 --> 00:01:12.296
it.
&gt;&gt; Nina Zakharenko: But

15
00:01:12.296 --> 00:01:17.170
when I do a git status, oops,
I forgot to add the second file to our

16
00:01:17.170 --> 00:01:21.530
commit.
&gt;&gt; Nina Zakharenko: This is fine.

17
00:01:21.530 --> 00:01:25.170
As long as we haven't pushed our commit
to a remote repository that we're sharing

18
00:01:25.170 --> 00:01:30.210
with other people, we can just amend
the last commit to include the other file.

19
00:01:30.210 --> 00:01:35.290
To do that, we would need to add
that file to a staging area and

20
00:01:35.290 --> 00:01:39.790
git commit --amend,
this is gonna open an editor.

21
00:01:39.790 --> 00:01:43.029
It'll let you change the commit
message if you wanted to, but

22
00:01:43.029 --> 00:01:48.260
I'm gonna leave it as is.
&gt;&gt; Nina Zakharenko: And

23
00:01:48.260 --> 00:01:51.743
now, we'll see that our commit,

24
00:01:51.743 --> 00:01:57.510
committed two new files has
both of the files that we meant

25
00:01:57.510 --> 00:02:04.792
to commit.
&gt;&gt; Nina Zakharenko: So

26
00:02:04.792 --> 00:02:07.570
let's get things ready for
a very simple rebase.

27
00:02:08.610 --> 00:02:14.022
I'm going to checkout master.
&gt;&gt; Nina Zakharenko: And

28
00:02:14.022 --> 00:02:17.109
I'm gonna checkout a new exercise

29
00:02:17.109 --> 00:02:24.574
branch.
&gt;&gt; Nina Zakharenko: This

30
00:02:24.574 --> 00:02:26.020
one already exists.

31
00:02:27.180 --> 00:02:32.900
I am going to delete it,
excuse me, with git branch -D.

32
00:02:32.900 --> 00:02:37.655
And I will make a new
branch called exercise7-2.

33
00:02:40.048 --> 00:02:43.270
&gt;&gt; Nina Zakharenko: Great, now if we look

34
00:02:43.270 --> 00:02:50.655
in our log,
&gt;&gt; Nina Zakharenko: We'll see one or

35
00:02:50.655 --> 00:02:57.609
two simple commits.
&gt;&gt; Nina Zakharenko: Here,

36
00:02:57.609 --> 00:02:59.910
Master has changed.

37
00:02:59.910 --> 00:03:05.840
We have our initial commit.
&gt;&gt; Nina Zakharenko: Master,

38
00:03:05.840 --> 00:03:10.130
let's pretend that master is going to
keep changing as I work on this branch.

39
00:03:10.130 --> 00:03:15.315
So I'm gonna checkout master again and
I'm going to add some

40
00:03:15.315 --> 00:03:24.512
changes to our hello.txt.
&gt;&gt; Nina Zakharenko: When I

41
00:03:24.512 --> 00:03:28.056
do double arrows here, it means I'm
appending to this file instead of

42
00:03:28.056 --> 00:03:31.780
overriding it.
&gt;&gt; Nina Zakharenko: So

43
00:03:31.780 --> 00:03:34.600
if I look at it now,
it says we have some changes.

44
00:03:34.600 --> 00:03:35.950
It's continuing to change.

45
00:03:35.950 --> 00:03:39.023
We're gonna add this file and commit it.

46
00:03:47.075 --> 00:03:52.453
&gt;&gt; Nina Zakharenko: When we go back
to our feature branch, in this case,

47
00:03:52.453 --> 00:03:57.040
exercise7-2.
&gt;&gt; Nina Zakharenko: We're

48
00:03:57.040 --> 00:04:00.050
going to git rebase master.

49
00:04:00.050 --> 00:04:04.104
What that means is it's
gonna rewind my work.

50
00:04:04.104 --> 00:04:08.080
It's gonna grab the work from master,
that commit, and pull it in.

51
00:04:08.080 --> 00:04:11.869
And then it's gonna take mine commit,
the new commit that I made and

52
00:04:11.869 --> 00:04:15.780
apply that change on top.
&gt;&gt; Nina Zakharenko: So

53
00:04:15.780 --> 00:04:23.172
if I look at my log now,
I'll see I have this commit here,

54
00:04:23.172 --> 00:04:27.490
Master has continued to change.

55
00:04:28.540 --> 00:04:35.810
If I git rebase from master,
&gt;&gt; Nina Zakharenko: And look at

56
00:04:35.810 --> 00:04:41.470
my log again, we'll see that I have this
new commit, Master has changed again.

57
00:05:06.923 --> 00:05:07.983
&gt;&gt; Nina Zakharenko: So if I had,

58
00:05:07.983 --> 00:05:10.850
let me show this one more time.

59
00:05:10.850 --> 00:05:12.859
If I make a new commit here,

60
00:05:21.431 --> 00:05:24.689
&gt;&gt; Nina Zakharenko: And in my exercise7-2

61
00:05:24.689 --> 00:05:30.845
branch and I add it.
&gt;&gt; Nina Zakharenko: And I commit it.

62
00:05:37.522 --> 00:05:39.467
&gt;&gt; Nina Zakharenko: If I look at my log,

63
00:05:39.467 --> 00:05:44.943
I will see,
&gt;&gt; Nina Zakharenko: Adding

64
00:05:44.943 --> 00:05:49.901
hi.txt up here.
&gt;&gt; Nina Zakharenko: If I go

65
00:05:49.901 --> 00:05:53.264
back to master, make a new commit.

66
00:06:08.341 --> 00:06:10.850
&gt;&gt; Nina Zakharenko: If I checkout

67
00:06:10.850 --> 00:06:14.729
my feature branch,

68
00:06:18.155 --> 00:06:20.568
&gt;&gt; Nina Zakharenko: Exercise7-2, and

69
00:06:20.568 --> 00:06:25.521
I look at the log,
if I git rebase from master,

70
00:06:25.521 --> 00:06:29.458
and I look at the log, we'll see that

71
00:06:29.458 --> 00:06:35.000
the change from master
has now been pulled in.

72
00:06:35.000 --> 00:06:40.200
And that latest change on my branch,
adding hi.txt has been applied on top.

73
00:06:41.340 --> 00:06:46.060
Cool, I like to do this pretty
frequently when I'm working on

74
00:06:46.060 --> 00:06:48.670
a branch that's likely to have conflicts.

75
00:06:48.670 --> 00:06:53.170
For master often and
fix those conflicts one at a time.

76
00:06:53.170 --> 00:06:58.416
So that I'm not stuck with the crazy
merge commit when I'm ready to merge

77
00:06:58.416 --> 00:07:03.514
my feature back into master.
&gt;&gt; Nina Zakharenko: We're

78
00:07:03.514 --> 00:07:08.445
gonna do a very simple interactive rebase.
&gt;&gt; Nina Zakharenko: We're

79
00:07:08.445 --> 00:07:11.490
going to add one more
commit in our feature

80
00:07:11.490 --> 00:07:19.921
branch.
&gt;&gt; Nina Zakharenko: And

81
00:07:19.921 --> 00:07:29.148
I'm gonna add that and commit it.
&gt;&gt; Nina Zakharenko: And

82
00:07:29.148 --> 00:07:34.100
now we'll see that,
if I look at git log, with git log -n 3,

83
00:07:34.100 --> 00:07:38.400
that's gonna let's look at
the last three commits.

84
00:07:39.820 --> 00:07:44.410
We'll see that we have two commits
on top of master, adding hi, and

85
00:07:44.410 --> 00:07:45.320
adding a new feature.

86
00:07:47.740 --> 00:07:52.230
If we want to squash these commits
together and change their commit message,

87
00:07:52.230 --> 00:07:55.090
we can do that with an interactive rebase.

88
00:07:55.090 --> 00:08:01.696
So remember, I wanna start my
interactive rebase from this commit.

89
00:08:01.696 --> 00:08:03.690
And I can do that in a few ways.

90
00:08:06.600 --> 00:08:10.860
I can say HEAD tilde 2
to go two commits back.

91
00:08:12.170 --> 00:08:16.831
I can reference the parent of this
commit or I can reference this actual

92
00:08:16.831 --> 00:08:21.976
commit.
&gt;&gt; Nina Zakharenko: I'm going to

93
00:08:21.976 --> 00:08:27.130
use HEAD-2 to reference two commits back.

94
00:08:28.720 --> 00:08:31.340
Now when I do this,
an editor's going to open.

95
00:08:33.110 --> 00:08:36.312
And we're gonna see the following,
it's big, it's scary.

96
00:08:36.312 --> 00:08:39.370
There's lots of words but
now you all know what they mean.

97
00:08:39.370 --> 00:08:41.900
So you shouldn't be too intimidated,
right?

98
00:08:43.850 --> 00:08:47.490
When you rebase these things
list in top down order.

99
00:08:47.490 --> 00:08:51.260
So kind of different than what
you're used to seeing in git log.

100
00:08:51.260 --> 00:08:55.783
It's important to remember.

101
00:08:55.783 --> 00:08:57.500
And now it's default to pick,

102
00:08:57.500 --> 00:09:02.397
meaning just keep this commit as is.
&gt;&gt; Nina Zakharenko: What we're

103
00:09:02.397 --> 00:09:04.390
gonna do is change them.

104
00:09:04.390 --> 00:09:08.347
So I'm gonna say reward this commit,
meaning,

105
00:09:08.347 --> 00:09:12.882
edit the commit message and
squash this commit back into

106
00:09:12.882 --> 00:09:17.591
the previous one.
&gt;&gt; Nina Zakharenko: Now when I save this,

107
00:09:17.591 --> 00:09:19.997
my editor is going to
open up two more times.

108
00:09:30.054 --> 00:09:31.464
&gt;&gt; Nina Zakharenko: So, it automatically

109
00:09:31.464 --> 00:09:37.172
opened again, right?
&gt;&gt; Nina Zakharenko: And,

110
00:09:37.172 --> 00:09:39.805
I'm gonna change the commit message.

111
00:09:39.805 --> 00:09:47.117
I'm gonna say Added two new features here.
&gt;&gt; Nina Zakharenko: Cool,

112
00:09:47.117 --> 00:09:52.402
now, when I say this, my editor
is going to open up automatically

113
00:09:52.402 --> 00:09:56.550
again to act on the next
action in that to-do list.

114
00:09:57.550 --> 00:09:59.600
And there's a lot of
helpful information here.

115
00:09:59.600 --> 00:10:02.190
It's saying this is
a combination of 2 commits.

116
00:10:02.190 --> 00:10:06.960
This is the first commit message, so
that's the one that I had edited.

117
00:10:06.960 --> 00:10:10.190
And this is the commit message number 2.

118
00:10:10.190 --> 00:10:12.690
We don't care about this commit message.

119
00:10:12.690 --> 00:10:15.370
We just wanna combine this
commit with the previous one.

120
00:10:15.370 --> 00:10:16.430
So I'm gonna comment it out.

121
00:10:19.960 --> 00:10:24.359
Now when I save it.

122
00:10:33.162 --> 00:10:37.874
&gt;&gt; Nina Zakharenko: We'll see
that I successfully rebased, and

123
00:10:37.874 --> 00:10:42.670
if I look at my log
&gt;&gt; Nina Zakharenko: We'll see

124
00:10:42.670 --> 00:10:46.730
that adding hi is gone and
the other commit is gone.

125
00:10:46.730 --> 00:10:50.310
And they've both been combined into this
one commit for adding two new features.

126
00:10:52.620 --> 00:10:55.630
And that's the end of exercise7.

127
00:10:55.630 --> 00:10:59.210
Hopefully, rebase is a lot less scary now.

128
00:10:59.210 --> 00:11:02.170
It's not a dirty word,
it's incredibly useful.

129
00:11:03.730 --> 00:11:09.336
These are all the time, almost everyday, I
commit early and often on my local branch.

130
00:11:09.336 --> 00:11:13.140
I'm always making updates,
always backing up my work.

131
00:11:13.140 --> 00:11:16.323
And when I need to share it
with coworkers, I rebase it.

