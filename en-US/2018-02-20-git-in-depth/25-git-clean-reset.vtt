WEBVTT

1
00:00:00.060 --> 00:00:01.030
&gt;&gt; Nina Zakharenko: Git Clean.

2
00:00:01.030 --> 00:00:04.497
Someone was asking earlier,
I had a student question,

3
00:00:04.497 --> 00:00:06.571
how do I clean up my working area?

4
00:00:08.305 --> 00:00:10.350
&gt;&gt; Nina Zakharenko: Git Clean
does that for you.

5
00:00:10.350 --> 00:00:13.180
It clears your working area
by deleting untracked files.

6
00:00:14.570 --> 00:00:17.150
Again, this operation can't be undone.

7
00:00:17.150 --> 00:00:19.520
But this operation is
a little bit friendlier.

8
00:00:19.520 --> 00:00:23.900
If I run Git Clean with no arguments,
it gives me a warning.

9
00:00:23.900 --> 00:00:28.652
I can use the --dry-run flag, and
that will list what's going to be deleted.

10
00:00:28.652 --> 00:00:33.590
And then I can do the -f flag
to actually do the deletion.

11
00:00:33.590 --> 00:00:37.733
I can also specify -d to clean
both files and directories.

12
00:00:42.611 --> 00:00:46.316
&gt;&gt; Nina Zakharenko: So Git Clean
--dry-run, it's telling me that it would

13
00:00:46.316 --> 00:00:51.470
remove a -note.txt, that's a file on
my working area that's not committed.

14
00:00:52.740 --> 00:00:59.000
If I actually wanna do it, I do,
git clean -d and --dry-run.

15
00:00:59.000 --> 00:01:03.820
That would show me, I'm sorry,
if I don't pass the -f flag,

16
00:01:03.820 --> 00:01:07.210
it would show me what files and
directories it would delete.

17
00:01:08.450 --> 00:01:10.650
So I have this scratch directory here.

18
00:01:10.650 --> 00:01:16.009
Now, I actually run it with git
clean -d -f, and it goes ahead and

19
00:01:16.009 --> 00:01:20.441
deletes those two files,
the file and the directory.

20
00:01:20.441 --> 00:01:24.951
And we'll see now that, if I run and
get status, my working area is clean.

21
00:01:28.574 --> 00:01:29.590
&gt;&gt; Nina Zakharenko: Git reset.

22
00:01:29.590 --> 00:01:30.980
This is a big one.

23
00:01:30.980 --> 00:01:35.880
I find that people tend to Google,
how do I undo the last command,

24
00:01:35.880 --> 00:01:38.480
and just copy and
paste the answer from stack overflow.

25
00:01:38.480 --> 00:01:42.440
But understanding reset will
really supercharge your workflow.

26
00:01:43.540 --> 00:01:47.790
But you have to know that it's another one
of those commands that performs different

27
00:01:47.790 --> 00:01:53.080
actions, depending on if it's run
with a path or without a path.

28
00:01:53.080 --> 00:01:56.720
Depending on the arguments,
the actions are different.

29
00:01:56.720 --> 00:02:00.619
But by default,
git performs a git reset --mixed.

30
00:02:03.150 --> 00:02:06.138
&gt;&gt; Nina Zakharenko: Understanding
reset is really important,

31
00:02:06.138 --> 00:02:09.400
because all it takes is
one git reset --hard.

32
00:02:09.400 --> 00:02:12.150
You weren't sure what you were running,
and all of a sudden,

33
00:02:12.150 --> 00:02:15.150
you overwrote your changes.

34
00:02:15.150 --> 00:02:18.818
You had some unsaved changes, and
now you wanna swear off git forever.

35
00:02:21.023 --> 00:02:25.410
&gt;&gt; Nina Zakharenko: But we’re gonna
really understand what git reset does.

36
00:02:25.410 --> 00:02:29.551
And once you figure that out, you’re
never gonna be afraid to use it again.

37
00:02:33.491 --> 00:02:37.709
&gt;&gt; Nina Zakharenko: A big difference
between git reset and git checkout is,

38
00:02:37.709 --> 00:02:43.298
git checkout will move the head,
&gt;&gt; Nina Zakharenko: But

39
00:02:43.298 --> 00:02:45.500
the branch stays where it was.

40
00:02:45.500 --> 00:02:49.080
Git reset moves the head and

41
00:02:49.080 --> 00:02:54.750
it'll move the branch reference,
meaning your branch is now modified.

42
00:02:54.750 --> 00:02:57.289
Whatever it was pointing to
before is going to be different.

43
00:02:59.210 --> 00:03:03.569
Now for commits,
git reset moves the head pointer, and

44
00:03:03.569 --> 00:03:06.270
it will optionally modify files.

45
00:03:07.645 --> 00:03:12.262
&gt;&gt; Nina Zakharenko: But if you pass a file
path, it's not going to move the head

46
00:03:12.262 --> 00:03:16.139
pointer, it's just going
to modify the files.

47
00:03:17.570 --> 00:03:25.237
This is a lot to take in, and I'm seeing
some blank stares, but I have diagrams.

48
00:03:25.237 --> 00:03:30.010
Diagrams that very clearly represent
what's going on when we do a git reset.

49
00:03:32.190 --> 00:03:34.220
So there are three options for reset.

50
00:03:34.220 --> 00:03:37.020
Soft, mixed,
which is the default, and hard.

51
00:03:38.030 --> 00:03:41.900
Soft tends not to be
used very frequently but

52
00:03:41.900 --> 00:03:44.200
this is just the first step of git reset.

53
00:03:44.200 --> 00:03:49.820
Git reset --soft, and here I'm specifying
HEAD~, which means the previous commit.

54
00:03:51.120 --> 00:03:52.930
All it does is move the head pointer.

55
00:03:54.380 --> 00:03:55.362
That's it.

56
00:03:55.362 --> 00:03:57.156
Now our head just points
to the previous commit.

57
00:04:00.991 --> 00:04:04.200
&gt;&gt; Nina Zakharenko: And
that's our result, now-

58
00:04:04.200 --> 00:04:05.990
&gt;&gt; Speaker 2: So is A still there,

59
00:04:05.990 --> 00:04:07.760
in case you wanna go back to it?

60
00:04:07.760 --> 00:04:11.854
&gt;&gt; Nina Zakharenko: It's still there,
but you can consider it dangling,

61
00:04:11.854 --> 00:04:15.503
you can consider it possibly
a dangling commit at

62
00:04:15.503 --> 00:04:18.110
this point, because-
&gt;&gt; Speaker 2: So you'd have to move your

63
00:04:18.110 --> 00:04:21.320
head back there, in order for it to still-
&gt;&gt; Nina Zakharenko: Right.

64
00:04:21.320 --> 00:04:22.590
&gt;&gt; Speaker 2: Okay.
&gt;&gt; Nina Zakharenko: Or make a branch off

65
00:04:22.590 --> 00:04:25.200
it, or recover it some other way.

66
00:04:25.200 --> 00:04:32.130
If you make commits after you do
a git reset soft, that A is gone.

67
00:04:32.130 --> 00:04:33.719
No more references to it, but.

68
00:04:37.711 --> 00:04:41.970
&gt;&gt; Nina Zakharenko: The next step,
git reset --mixed, the default.

69
00:04:41.970 --> 00:04:46.916
What it does, it moves the head,
&gt;&gt; Nina Zakharenko: And

70
00:04:46.916 --> 00:04:51.700
then, it copies the file from
the commit that head is pointing to.

71
00:04:51.700 --> 00:04:54.805
In this case, it's B, to the staging area.

72
00:04:56.780 --> 00:04:57.978
&gt;&gt; Nina Zakharenko: Mixed is the default,

73
00:04:57.978 --> 00:05:00.571
you can also consider it
the unstaged commands.

74
00:05:03.119 --> 00:05:06.741
&gt;&gt; Nina Zakharenko: So after a git
reset mixed, it looks like this.

75
00:05:08.487 --> 00:05:13.022
&gt;&gt; Nina Zakharenko: Now, git reset hard,
it does the same steps from soft and

76
00:05:13.022 --> 00:05:17.090
from mixed, but now it adds another one.

77
00:05:17.090 --> 00:05:19.070
It does all three operations.

78
00:05:19.070 --> 00:05:20.978
First, it moves head.

79
00:05:20.978 --> 00:05:25.380
Next, it copies the file from
commit B to our staging area.

80
00:05:26.460 --> 00:05:29.410
Lastly, it also copies
it to the working area.

81
00:05:31.000 --> 00:05:33.160
This is a destructive operation.

82
00:05:33.160 --> 00:05:37.110
If your file in the working area had
any changes, you just lost them.

83
00:05:37.110 --> 00:05:40.749
This operation can't be undone,
so proceed with caution.

84
00:05:45.013 --> 00:05:49.738
&gt;&gt; Nina Zakharenko: And
this is the result of our git reset hard.

85
00:05:53.277 --> 00:05:55.390
&gt;&gt; Nina Zakharenko: So
a little bit of a cheat sheet here.

86
00:05:57.330 --> 00:06:04.520
If we git reset to a commit, we move
the head and the current branch for soft.

87
00:06:04.520 --> 00:06:08.000
For mixed, we do that as well
as reset the staging area.

88
00:06:08.000 --> 00:06:13.090
For hard, we do both of those steps but in
addition, we also reset the working area.

89
00:06:15.420 --> 00:06:19.240
Now, someone asked a question,
what happens to commit B?

90
00:06:20.660 --> 00:06:25.140
Well git commit, git reset,
excuse me, can change history.

91
00:06:26.660 --> 00:06:28.713
So our head was pointing at B.

92
00:06:33.035 --> 00:06:35.460
&gt;&gt; Nina Zakharenko: Commit B
had A as a parent.

93
00:06:35.460 --> 00:06:38.940
Now, we reset soft, so we move the head.

94
00:06:40.580 --> 00:06:43.450
And sorry,
that head should be pointing at A.

95
00:06:43.450 --> 00:06:47.280
My slides got a little messed up,
but you guys get the gist.

96
00:06:47.280 --> 00:06:49.560
Head is pointing at A now.

97
00:06:49.560 --> 00:06:51.016
Now we make a new commit.

98
00:06:54.458 --> 00:06:57.290
&gt;&gt; Nina Zakharenko: The new commit
is pointing to A as a parent.

99
00:06:57.290 --> 00:06:59.430
B has no references.

100
00:06:59.430 --> 00:07:02.853
And head has moved back up to
that new commit that we made.

101
00:07:03.986 --> 00:07:08.888
&gt;&gt; Nina Zakharenko: A stern warning,
which you'll hear me say multiple times,

102
00:07:08.888 --> 00:07:14.380
never, ever push change history
to a shared or public repository.

103
00:07:15.560 --> 00:07:17.425
You can really mess up
other people's work.

104
00:07:20.417 --> 00:07:24.919
&gt;&gt; Speaker 2: So what if something's
been pushed, say, you pushed it and

105
00:07:24.919 --> 00:07:29.280
you're like,
no that's not supposed to be there.

106
00:07:29.280 --> 00:07:30.760
&gt;&gt; Nina Zakharenko: Yeah.
&gt;&gt; Speaker 2: Can you get it out once it's

107
00:07:30.760 --> 00:07:31.920
been pushed?

108
00:07:31.920 --> 00:07:36.070
&gt;&gt; Nina Zakharenko: If I've pushed it
to someplace like my public GitHub or

109
00:07:36.070 --> 00:07:41.330
remote repository where other people
are working from, don't change it.

110
00:07:41.330 --> 00:07:44.653
You can change it locally, and
I'll show you another strategy in just

111
00:07:44.653 --> 00:07:47.201
a few minutes for
how to recover from that situation.

112
00:07:49.550 --> 00:07:54.410
&gt;&gt; Nina Zakharenko: Finally,
git reset file.

113
00:07:54.410 --> 00:07:56.770
What that does,
doesn't move the head pointer but

114
00:07:56.770 --> 00:07:59.020
it does the same thing as a mixed reset.

115
00:07:59.020 --> 00:08:02.140
So it just copies that file
from the staging area,

116
00:08:03.460 --> 00:08:05.040
from the commit to the staging area.

117
00:08:07.630 --> 00:08:10.480
If we do it from a commit, same thing.

118
00:08:10.480 --> 00:08:14.970
I can say git reset, commit C,
put that file in my staging area.

119
00:08:16.880 --> 00:08:21.770
So a little cheat sheet, if you git reset
for a file, all it does is step two.

120
00:08:21.770 --> 00:08:23.650
It resets the staging area.

121
00:08:23.650 --> 00:08:28.440
You can't specify git reset
commit in a file with any flags.

122
00:08:28.440 --> 00:08:31.760
It doesn't work with soft or
hard, only mixed.

123
00:08:33.390 --> 00:08:37.010
If you wanna undo a git reset,
this is a great strategy.

124
00:08:37.010 --> 00:08:41.831
There is a reference called original head,

125
00:08:41.831 --> 00:08:44.990
or also called ORIG_HEAD.

126
00:08:44.990 --> 00:08:49.550
When you do an operation, like a reset or
a merge, it saves where HEAD

127
00:08:49.550 --> 00:08:55.340
was before you did that operation.

128
00:08:55.340 --> 00:08:57.925
So if you wanna go back
to the way things were,

129
00:08:57.925 --> 00:09:01.345
you can git reset to ORIG_HEAD,
&gt;&gt; Nina Zakharenko: And

130
00:09:01.345 --> 00:09:03.030
that'll get you right back
to where you started.

