WEBVTT

1
00:00:00.240 --> 00:00:02.570
&gt;&gt; Nina Zakharenko: Next we're
gonna talk about commits.

2
00:00:02.570 --> 00:00:07.280
Commits are just like the other types
of get objects that we talked about.

3
00:00:08.670 --> 00:00:12.910
A commit points to a tree, and
it contains some other metadata.

4
00:00:12.910 --> 00:00:16.300
It contains the author and the committer,

5
00:00:16.300 --> 00:00:21.240
who might be different people although
we generally don't use get that way.

6
00:00:21.240 --> 00:00:27.310
A date when the commit was created,
a message, and a parent commit,

7
00:00:27.310 --> 00:00:31.890
we can have one or more, we might have
more parents in the case of a merge.

8
00:00:33.380 --> 00:00:37.490
And the SHA1 of the commit is
the hash of all of this information.

9
00:00:38.880 --> 00:00:42.365
So a commit looks something like this.

10
00:00:42.365 --> 00:00:49.810
Has that commit, identifier, the size,
which tree it's pointing to.

11
00:00:49.810 --> 00:00:51.610
So that's kind of the root directory.

12
00:00:54.460 --> 00:00:59.099
Which parent it's pointing to,
the author and the message.

13
00:01:01.160 --> 00:01:04.110
So, commits point to parent commits.

14
00:01:05.660 --> 00:01:12.030
In this example the lower commit is
that green circle that starts with fa.

15
00:01:12.030 --> 00:01:15.230
That's the very first
commit in our repository.

16
00:01:15.230 --> 00:01:17.410
The initial commit doesn't have a parent.

17
00:01:17.410 --> 00:01:19.120
It's first.

18
00:01:19.120 --> 00:01:23.750
The second commit,
the green circle above that,

19
00:01:23.750 --> 00:01:25.902
points to the first commit as its parent.

20
00:01:26.950 --> 00:01:27.470
So, graph.

21
00:01:29.370 --> 00:01:32.883
So, these commits point to trees,
just one tree,

22
00:01:32.883 --> 00:01:37.459
and that tree points to other trees and
other commits, and so on and

23
00:01:37.459 --> 00:01:41.174
so forth.
&gt;&gt; Nina Zakharenko: So

24
00:01:41.174 --> 00:01:44.120
that's our parent commit and
this is a tree.

25
00:01:45.850 --> 00:01:49.580
Now, the tree is a snapshot
of the repository.

26
00:01:51.040 --> 00:01:57.181
Of what the repository staging area
looked like at the time of the commit.

27
00:01:57.181 --> 00:02:02.589
It points to those files and folders.
&gt;&gt; Nina Zakharenko: So

28
00:02:02.589 --> 00:02:07.050
a commit is a code snapshot, what the
project looked like at that point in time.

29
00:02:07.050 --> 00:02:11.267
And it's a combination of the changes from
the staging area on the previous commit.

30
00:02:14.601 --> 00:02:16.485
&gt;&gt; Nina Zakharenko: When we make a commit,

31
00:02:16.485 --> 00:02:21.344
the first status line that we'll
see tells us what the hash

32
00:02:21.344 --> 00:02:25.870
of that commit is.
&gt;&gt; Nina Zakharenko: You guys have all

33
00:02:25.870 --> 00:02:30.431
seen this message before.
&gt;&gt; Nina Zakharenko: If we look in

34
00:02:30.431 --> 00:02:32.586
.git/objects.

35
00:02:32.586 --> 00:02:38.180
All right, let's see the hash
here was adf, starts with adf.

36
00:02:38.180 --> 00:02:43.876
If we look in .git/objects, we'll see now
that there is a subdirectory called ad,

37
00:02:43.876 --> 00:02:48.134
with a new file on it.
&gt;&gt; Nina Zakharenko: Now

38
00:02:48.134 --> 00:02:52.990
what happens if we try to look at one of
these git objects with cat for example.

39
00:02:54.160 --> 00:02:57.303
You're gonna get a whole
lot of nothing and

40
00:02:57.303 --> 00:03:02.810
that's because these binary objects,
they are compressed.

41
00:03:02.810 --> 00:03:07.750
So if you wanted to look at them,

42
00:03:07.750 --> 00:03:14.240
were going to use another plumbing
command and git called git cat-file.

43
00:03:14.240 --> 00:03:18.021
This one has two useful
flags that you can use.

44
00:03:18.021 --> 00:03:19.895
I'm sorry.

45
00:03:19.895 --> 00:03:21.710
-t will print the type.

46
00:03:22.790 --> 00:03:26.629
So here if I git cat-file -t, that commit,

47
00:03:26.629 --> 00:03:32.400
the commit that we made earlier,
we'll see that the type is a blob.

48
00:03:33.680 --> 00:03:39.370
If we wanna print the contents of
the object, we use the -p flag.

49
00:03:42.110 --> 00:03:46.838
So, we cat the file that's or
the content that's

50
00:03:46.838 --> 00:03:51.454
pointed out by that shot
starting with 980 and

51
00:03:51.454 --> 00:03:55.056
we get back the data that we put in hello

52
00:03:55.056 --> 00:04:00.109
word.
&gt;&gt; Nina Zakharenko: Let's try

53
00:04:00.109 --> 00:04:04.387
this again with some of the other objects
that were created in that .git directory.

54
00:04:06.080 --> 00:04:08.650
So here I'd pick another commit.

55
00:04:09.700 --> 00:04:11.180
That one's a tree.

56
00:04:11.180 --> 00:04:16.784
I'm sorry, I'd pick another sha
to pass in to git cat-file -t.

57
00:04:16.784 --> 00:04:19.420
This time I get a tree.

58
00:04:19.420 --> 00:04:25.080
If I print the contents of that I get,
that first number is the mode,

59
00:04:25.080 --> 00:04:28.150
so that says if it's executable,
for example.

60
00:04:29.310 --> 00:04:34.640
The next is the blob that's
stored in that tree, and

61
00:04:34.640 --> 00:04:39.882
that points to hello.txt.
&gt;&gt; Nina Zakharenko: And

62
00:04:39.882 --> 00:04:43.370
the next time we try to do this,
we get back our commit.

63
00:04:43.370 --> 00:04:48.110
So if we look at this commit,
we have the tree that it's pointing at,

64
00:04:48.110 --> 00:04:49.740
the author, which is me.

65
00:04:49.740 --> 00:04:51.910
The committer, also me.

66
00:04:51.910 --> 00:04:53.620
And a message, the initial commit.

67
00:04:54.720 --> 00:04:58.620
So these commits are just objects
that you can poke around and look at.

68
00:04:58.620 --> 00:05:02.530
There's nothing particularly
scary about them.

69
00:05:04.690 --> 00:05:09.664
But the most important lesson
that you can learn from

70
00:05:09.664 --> 00:05:14.196
this section is that we
can't change commits.

71
00:05:14.196 --> 00:05:17.186
We can't change them,
we can't change them with re-base,

72
00:05:17.186 --> 00:05:19.150
we can't edit them, we can't go back.

73
00:05:20.810 --> 00:05:21.890
And change the author.

74
00:05:23.090 --> 00:05:27.180
We can't edit that specific
commit because if you change

75
00:05:27.180 --> 00:05:30.590
any of the data about the commit,
the commit is gonna have a new SHA1.

76
00:05:31.790 --> 00:05:35.630
So even if you copy everything else,
you're gonna have a new date

77
00:05:35.630 --> 00:05:39.590
when that commit was created, meaning
that commit will have a different SHA1.

78
00:05:40.880 --> 00:05:48.537
Even if it has the same contents.
&gt;&gt; Nina Zakharenko: So,

79
00:05:48.537 --> 00:05:54.670
you can't change the file,
the date, commit message.

80
00:05:54.670 --> 00:05:58.780
Any of that other data in git without
changing the IDs of everything after it.

81
00:06:00.260 --> 00:06:02.380
And that's a great security feature,

82
00:06:02.380 --> 00:06:05.160
it means that if you have a commit ID,
you can really be

83
00:06:05.160 --> 00:06:09.830
assured that not only is your project
exactly the same as when it was committed.

84
00:06:09.830 --> 00:06:13.760
But that nothing in its
history has changed, right?

85
00:06:13.760 --> 00:06:18.364
No one can go, no malicious actor can go
and forge with something and your commit

86
00:06:18.364 --> 00:06:24.736
history without it being very obvious.
&gt;&gt; Nina Zakharenko: Another

87
00:06:24.736 --> 00:06:28.420
really great thing is that
prevents against corruption.

88
00:06:29.620 --> 00:06:31.790
So, if something has
gone wrong with the disk,

89
00:06:31.790 --> 00:06:35.550
it will tell you that the content and
the SHA don't match.

90
00:06:38.060 --> 00:06:40.216
Now, a quick note about references.

91
00:06:40.216 --> 00:06:43.380
References are just pointers to commits.

92
00:06:43.380 --> 00:06:44.670
We have a few types of them.

93
00:06:44.670 --> 00:06:47.070
We're gonna talk more about them later.

94
00:06:47.070 --> 00:06:51.640
But we can have tags, branches, or head.

95
00:06:53.330 --> 00:06:55.600
So head is a special type of pointer and
get.

96
00:06:56.620 --> 00:06:58.450
It points to the current commit.

97
00:06:59.930 --> 00:07:04.740
When you check out a branch,
HEAD also points to the current Branch.

98
00:07:04.740 --> 00:07:07.290
So, it's just the very
last commit that you made.

99
00:07:09.320 --> 00:07:14.050
Now, why is changing branches
in Git lightning fast?

100
00:07:14.050 --> 00:07:16.100
It's not pulling down new data.

101
00:07:16.100 --> 00:07:23.359
All it's doing is just changing a pointer.
&gt;&gt; Nina Zakharenko: If

102
00:07:23.359 --> 00:07:30.038
we look at the references under the hood,
if I look in my .git directory,

103
00:07:30.038 --> 00:07:36.690
there are two important places
where those references are stored.

104
00:07:36.690 --> 00:07:41.953
The first is a file called all

105
00:07:41.953 --> 00:07:46.997
upper case HEAD in .git and

106
00:07:46.997 --> 00:07:51.394
the next is refs heads.

107
00:07:51.394 --> 00:07:55.079
That directory refs/heads is
where all your branches live.

108
00:07:58.420 --> 00:08:01.360
Now, if I look at my
history I have one commit.

109
00:08:01.360 --> 00:08:02.540
Here, the initial commit.

110
00:08:03.820 --> 00:08:08.150
It starts with a hash adf0.

111
00:08:08.150 --> 00:08:13.851
If I cat the docket
/refs/heads/master file,

112
00:08:13.851 --> 00:08:20.760
I'm gonna get back the SHA
of that initial commitment.

113
00:08:20.760 --> 00:08:22.190
So, it's just a pointer.

114
00:08:23.880 --> 00:08:26.340
It's one of those handy features so

115
00:08:26.340 --> 00:08:29.230
you don't have to remember
these big long jobs, right.

116
00:08:29.230 --> 00:08:37.544
It makes git human-readable.
&gt;&gt; Nina Zakharenko: Now

117
00:08:37.544 --> 00:08:43.960
if we check out the contents of .git/HEAD,
we'll see that at this point in time,

118
00:08:43.960 --> 00:08:48.830
HEAD, our current branch pointer
is also pointing to master.

119
00:08:50.030 --> 00:08:53.040
And master's pointing to
the initial commit, so

120
00:08:53.040 --> 00:08:56.110
HEAD is also pointing
to that initial commit.

121
00:08:59.120 --> 00:09:04.614
And there are some cases where HEAD can
point to a commit instead of a branch, and

122
00:09:04.614 --> 00:09:12.089
we'll talk about that a little bit later.
&gt;&gt; Nina Zakharenko: So

123
00:09:12.089 --> 00:09:16.690
here we can see that HEAD is
a pointer to the current branch.

124
00:09:19.330 --> 00:09:21.770
Yes?
&gt;&gt; Student: Can you have two HEADs?

125
00:09:21.770 --> 00:09:23.810
&gt;&gt; Nina Zakharenko: No, just one.

126
00:09:23.810 --> 00:09:26.499
Git only has one HEAD at
a given point in time.

127
00:09:27.710 --> 00:09:34.100
And if you're ever wondering what it is,
you can run that command cat.git/HEAD and

128
00:09:34.100 --> 00:09:38.620
it'll tell you what HEAD is pointing at.
&gt;&gt; Student: So I think in Mercurial,

129
00:09:38.620 --> 00:09:42.140
I think you can have two HEADs.
&gt;&gt; Nina Zakharenko: Mercurial is

130
00:09:42.140 --> 00:09:43.150
a different beast.

131
00:09:45.360 --> 00:09:50.590
Before we move on to the exercise,
does anyone else

132
00:09:50.590 --> 00:09:55.120
have anything to ask about
what's in the .git directory?

133
00:09:57.970 --> 00:10:05.409
So we talked about three types of objects,
the blob, the tree and the commit.

134
00:10:05.409 --> 00:10:08.040
We talked about where
references are stored.

135
00:10:08.040 --> 00:10:10.730
And we talked about how to
see what HEAD points to.

