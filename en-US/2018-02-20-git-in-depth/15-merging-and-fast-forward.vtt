WEBVTT

1
00:00:00.190 --> 00:00:05.280
&gt;&gt; Nina Zakharenko: Under the hood,
merge commits are just commits.

2
00:00:05.280 --> 00:00:10.640
But they happen to be commits
that have more than one parent.

3
00:00:10.640 --> 00:00:16.290
I think in most modern Git workflows, most
merge commits probably have two parents.

4
00:00:16.290 --> 00:00:19.360
But it's entirely possible to have three,

5
00:00:19.360 --> 00:00:22.820
four, as many parents as you want
getting merged into one commit.

6
00:00:24.850 --> 00:00:29.450
It maintains all those same commits
that you had created on a future branch.

7
00:00:30.620 --> 00:00:36.570
And the merge commit is just a marker of
when a new feature was merged into master.

8
00:00:38.280 --> 00:00:43.336
So, if we see our commit here,
we'll see that

9
00:00:43.336 --> 00:00:50.272
it has two parents.
&gt;&gt; Nina Zakharenko: Now,

10
00:00:50.272 --> 00:00:57.350
something that I get a lot of questions
about in Git is what is fast forwarding?

11
00:00:57.350 --> 00:00:59.830
What's a fast forward?

12
00:00:59.830 --> 00:01:02.580
Every once in awhile,
you check out master.

13
00:01:02.580 --> 00:01:04.620
You merge in your feature branch.

14
00:01:04.620 --> 00:01:08.630
And if there haven't been any
additional changes to master.

15
00:01:08.630 --> 00:01:12.160
Git will show you this message
saying that it has fast forwarded.

16
00:01:14.950 --> 00:01:18.960
This happens when there's
a clear path from

17
00:01:18.960 --> 00:01:23.880
the tip of the current branch
to the tip of the target branch.

18
00:01:23.880 --> 00:01:29.650
So in this diagram here,
after we branched off feature,

19
00:01:29.650 --> 00:01:31.940
there were no more new commits to master.

20
00:01:33.880 --> 00:01:42.889
During a fast forward commit, we add the
new commits on top of the master branch.

21
00:01:44.050 --> 00:01:46.740
And then we just move the master pointer.

22
00:01:46.740 --> 00:01:49.650
In this case,
we didn't have to make a merge commit.

23
00:01:49.650 --> 00:01:52.980
Git knew how to move that
pointer automatically.

24
00:01:55.060 --> 00:01:59.500
A problem is that during these
fast forward commits, if

25
00:02:00.670 --> 00:02:06.770
we can possibly lose track of a feature
that was merged back into master.

26
00:02:06.770 --> 00:02:11.060
Because when you're working on a feature
and you merge it back into master.

27
00:02:11.060 --> 00:02:14.250
You really wanna have a clear delineator

28
00:02:14.250 --> 00:02:17.210
of this was the work that
was done in this branch.

29
00:02:18.920 --> 00:02:22.680
Otherwise, we might have trouble
finding out what feature caused the bug

30
00:02:22.680 --> 00:02:24.270
because these commits are just linear.

31
00:02:25.870 --> 00:02:30.458
And we will be able to identify which
commits had belonged to the feature,

32
00:02:30.458 --> 00:02:39.858
if there's no emerge commit.
&gt;&gt; Nina Zakharenko: In

33
00:02:39.858 --> 00:02:44.170
order to avoid this,
if your workflow needs it.

34
00:02:44.170 --> 00:02:49.450
You can specify -- no-ff
when doing a merge.

35
00:02:49.450 --> 00:02:56.950
This is telling Git that even it can do
a fast forward merge, that it shouldn't.

36
00:02:56.950 --> 00:03:02.850
We want to retain the history
of that merge commit and

37
00:03:02.850 --> 00:03:07.160
what this is going to do is force that
merge commit when one isn't necessary.

38
00:03:07.160 --> 00:03:10.060
So in this case, I'm checking out master,

39
00:03:10.060 --> 00:03:15.250
I'm merging in my new feature
with the No Fast Forward flag.

40
00:03:16.900 --> 00:03:22.250
And what's that done is created a merge
commit and moved the master branch.

