WEBVTT

1
00:00:00.070 --> 00:00:01.920
&gt;&gt; Nina Zakharenko: Let's
move on to the next section.

2
00:00:01.920 --> 00:00:04.440
We're gonna talk about history index.

3
00:00:04.440 --> 00:00:09.240
We have all seen a commit message
that looks something like that.

4
00:00:09.240 --> 00:00:11.910
I love xkcds, so you guys get more comics.

5
00:00:11.910 --> 00:00:15.900
[LAUGH] Your commit messages
might start out strong.

6
00:00:15.900 --> 00:00:21.020
And eventually, they just end up
saying things like more code, or

7
00:00:21.020 --> 00:00:25.980
here, have code.
&gt;&gt; Nina Zakharenko: This isn't great,

8
00:00:25.980 --> 00:00:30.886
and we've all tried to debug something and
we come across a commit message,

9
00:00:30.886 --> 00:00:34.506
and all it says is fix bug,
and you're like, what bug?

10
00:00:34.506 --> 00:00:40.006
I'm trying to track it down, I'm trying
to troubleshoot whoever committed

11
00:00:40.006 --> 00:00:45.930
this code change, has just completely
screwed me over, at this point.

12
00:00:45.930 --> 00:00:49.761
It makes us want to just curse
the person who did that,

13
00:00:49.761 --> 00:00:53.944
maybe stick some voodoo pins at them,
plot your revenge.

14
00:00:53.944 --> 00:00:58.117
All it would take is a few
extra descriptive words, and

15
00:00:58.117 --> 00:01:00.939
it could have saved us hours of work.

16
00:01:00.939 --> 00:01:03.646
And the effect of bad commit messages,

17
00:01:03.646 --> 00:01:07.840
really ended up compounding
over the lifetime of a project.

18
00:01:09.160 --> 00:01:12.580
I like to think of it,
kind of as the broken windows theory.

19
00:01:12.580 --> 00:01:16.568
If you commit with bad commit messages,
then other developers will think that's

20
00:01:16.568 --> 00:01:21.099
okay.
&gt;&gt; Nina Zakharenko: Good commits

21
00:01:21.099 --> 00:01:23.200
are really, really important.

22
00:01:23.200 --> 00:01:25.520
They preserve the history of a code base.

23
00:01:25.520 --> 00:01:28.640
They can help you with debugging,
troubleshooting,

24
00:01:28.640 --> 00:01:31.950
if you need to create release notes,
if you wanna know what

25
00:01:31.950 --> 00:01:36.460
went into version 2.0 of your project,
you can pull up your commits and

26
00:01:36.460 --> 00:01:39.450
answer that question easily,
if your commit messages are good.

27
00:01:40.640 --> 00:01:42.200
It helps with code reviews.

28
00:01:42.200 --> 00:01:47.290
If I'm code reviewing large poll request,
I'll actually go through and

29
00:01:47.290 --> 00:01:51.080
look at the diffs of each individual
commit, so that I can see how the code had

30
00:01:51.080 --> 00:01:55.440
changed over time, instead of
looking at one giant poll request.

31
00:01:55.440 --> 00:02:00.490
It helps with rolling back, if you have
a fire in production, and you need

32
00:02:00.490 --> 00:02:05.290
to roll back, while your commit messages
will tell you where you need to be.

33
00:02:05.290 --> 00:02:11.050
They also help with associating code
with an external ticket tracker,

34
00:02:11.050 --> 00:02:12.300
or a GitHub issue.

35
00:02:14.500 --> 00:02:20.005
We, unfortunately use GEO at work,
so I usually put the GEO ticket

36
00:02:20.005 --> 00:02:26.834
number in my commit message.
&gt;&gt; Nina Zakharenko: If you use GitHub,

37
00:02:26.834 --> 00:02:31.266
I'm gonna show you guys how to link to
issues within your commensurator in

38
00:02:31.266 --> 00:02:35.570
the course, and they're actually be
a nice clickable link in GitHub.

39
00:02:38.390 --> 00:02:41.280
So an anatomy of a good commit message.

40
00:02:42.550 --> 00:02:47.080
Unfortunately, I see a lot of people
commit with git commit-m all the time.

41
00:02:47.080 --> 00:02:51.260
And that's fine if your commits are brief,
if your codes not doing a lot.

42
00:02:52.460 --> 00:02:57.030
But sometimes your commit encapsulates a
really complicated idea, and in that case,

43
00:02:57.030 --> 00:02:59.850
the one line commit message
is really not enough.

44
00:02:59.850 --> 00:03:03.598
What you wanna do is add a descriptive
body to your commit message after

45
00:03:03.598 --> 00:03:08.309
a new line.
&gt;&gt; Nina Zakharenko: Git is going to

46
00:03:08.309 --> 00:03:13.810
truncate that message,
I think it's 69 characters by default.

47
00:03:13.810 --> 00:03:17.338
If you try to look at the commits
on GitHub, it'll be dot,

48
00:03:17.338 --> 00:03:19.580
dot, dot, after 69 characters.

49
00:03:19.580 --> 00:03:21.128
It's better to just keep them short, so

50
00:03:21.128 --> 00:03:26.429
that people aren't kept guessing.
&gt;&gt; Nina Zakharenko: And

51
00:03:26.429 --> 00:03:30.879
if you're commit message is
already longer than 69 characters,

52
00:03:30.879 --> 00:03:35.260
it probably deserves a commit
message description at this point.

53
00:03:38.250 --> 00:03:42.810
For that one line description, the commit
message should be in the future tense,

54
00:03:42.810 --> 00:03:45.010
meaning fix, instead of fixed.

55
00:03:47.160 --> 00:03:49.940
This short subject, the blank line.

56
00:03:49.940 --> 00:03:51.880
And lastly, a description.

57
00:03:51.880 --> 00:03:54.390
The description should be context.

58
00:03:54.390 --> 00:03:56.380
Don't explain how you did something.

59
00:03:56.380 --> 00:03:58.980
Don't say you moved file A to B.

60
00:03:58.980 --> 00:04:02.010
We can figure that out
by looking at commit.

61
00:04:02.010 --> 00:04:05.740
The interesting information here,
is how you did something.

62
00:04:05.740 --> 00:04:08.160
The code will describe what you did.

63
00:04:08.160 --> 00:04:10.500
You should describe how you did it,

64
00:04:10.500 --> 00:04:15.150
describe the current behavior, give
a short summary of why the fix is needed.

65
00:04:15.150 --> 00:04:17.080
Mention any side effects of your code.

66
00:04:19.450 --> 00:04:23.098
And this description should be
broken into 72 character lines for

67
00:04:23.098 --> 00:04:27.305
best formatting.
&gt;&gt; Nina Zakharenko: Good commits

68
00:04:27.305 --> 00:04:28.040
are important.

69
00:04:29.040 --> 00:04:31.690
They have good commit messages.

70
00:04:31.690 --> 00:04:34.960
They should generally
encapsulate one logical idea.

71
00:04:34.960 --> 00:04:38.507
They shouldn't introduce any breaking
changes, so when you commit,

72
00:04:38.507 --> 00:04:43.047
your test should pass.
&gt;&gt; Nina Zakharenko: It

73
00:04:43.047 --> 00:04:45.200
shouldn't leave your
code in a broken state.

