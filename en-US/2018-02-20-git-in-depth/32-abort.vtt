WEBVTT

1
00:00:00.170 --> 00:00:02.530
&gt;&gt; Nina Zakharenko: Remember
there's a safety option.

2
00:00:02.530 --> 00:00:07.470
If you're doing a rebase, and before it's
done, if things are really going wrong you

3
00:00:07.470 --> 00:00:11.340
can always use git rebase --abort.

4
00:00:11.340 --> 00:00:13.660
Pulls the ripcord, cancels it,
and you're good to go.

5
00:00:15.030 --> 00:00:19.100
Here is a pro tip that for some reason
I don't see a lot of people using,

6
00:00:19.100 --> 00:00:21.156
but it's a great idea.

7
00:00:21.156 --> 00:00:25.130
If you're gonna rebase, fixup, squash,
reorder, if you're gonna be messing with

8
00:00:25.130 --> 00:00:30.580
your commit history, just make a copy of
your current branch before you do it.

9
00:00:30.580 --> 00:00:34.120
Git branch makes a new branch
without switching to it.

10
00:00:34.120 --> 00:00:36.320
Now, you can rebase to
do whatever you want.

11
00:00:36.320 --> 00:00:41.190
If you mess up, you can always reset
back to that backup branch, otherwise,

12
00:00:41.190 --> 00:00:43.330
just delete it.

13
00:00:43.330 --> 00:00:47.600
Rebase doesn't have to be scary, this is a
really great way of playing around with it

14
00:00:47.600 --> 00:00:50.000
without making your changes final or
permanent.

15
00:00:52.100 --> 00:00:56.430
So rebase, incredibly,
incredibly powerful, you can slice and

16
00:00:56.430 --> 00:00:59.120
dice your git history however you want to.

17
00:00:59.120 --> 00:01:01.277
It's easy to fix previous
mistakes in code,

18
00:01:01.277 --> 00:01:03.449
you can keep your git history neat and
clean.

19
00:01:06.610 --> 00:01:10.990
&gt;&gt; Nina Zakharenko: This is particularly
important with a mantra of committing

20
00:01:10.990 --> 00:01:12.880
early and often.

21
00:01:12.880 --> 00:01:16.550
So you should try to commit as much as
possible while you're doing your work

22
00:01:16.550 --> 00:01:20.510
because at any point you might lose
changes, you might forget something.

23
00:01:20.510 --> 00:01:23.930
You might have to walk away, you come
back, and you're like, where was I,

24
00:01:23.930 --> 00:01:25.460
what was I doing?

25
00:01:25.460 --> 00:01:29.970
Commit early and often, and
locally rebase to your heart's content.

26
00:01:29.970 --> 00:01:33.280
Once you're ready to share your
changes with your co workers,

27
00:01:33.280 --> 00:01:35.950
they don't need to know you
made five commits in an hour.

28
00:01:35.950 --> 00:01:42.034
You can just present them with the pretty
neat, clean history, and that's it.

29
00:01:45.226 --> 00:01:50.122
&gt;&gt; Nina Zakharenko: So
make sure you follow this mantra and

30
00:01:50.122 --> 00:01:53.950
one thing you shouldn't do.

31
00:01:53.950 --> 00:01:56.780
I've seen a lot of developers
do this is they use rebase to

32
00:01:56.780 --> 00:01:59.970
squash all their commits into one commit,
don't do that.

33
00:01:59.970 --> 00:02:04.040
That's really awful, makes it hard
to debug when a bug was introduced.

34
00:02:04.040 --> 00:02:07.400
It makes it hard to code review,
so avoid that temptation

35
00:02:07.400 --> 00:02:10.140
of I'm done with a feature,
let me squash these into one commit.

36
00:02:11.750 --> 00:02:15.230
And again, a warning, never,
ever rewrite public history.

37
00:02:15.230 --> 00:02:19.920
Rebase commits are copies, if other people
are working in that same repository,

38
00:02:19.920 --> 00:02:21.600
they'd be working on different commits.

39
00:02:21.600 --> 00:02:24.730
And you can cause some damage,
massive merge conflicts,

40
00:02:24.730 --> 00:02:27.080
you can cause people to
really lose their work.

41
00:02:29.461 --> 00:02:34.070
&gt;&gt; Nina Zakharenko: So if you rewrite
public history, monsters will eat you.

42
00:02:34.070 --> 00:02:36.970
Not really, but
developers will be angry with you.

43
00:02:38.410 --> 00:02:41.640
So now that you can see that
rebasing can get messy, but

44
00:02:41.640 --> 00:02:45.470
if you understand the basic concepts
of how git works under the hood,

45
00:02:45.470 --> 00:02:48.350
it makes the concept of
rebasing a lot simpler.

