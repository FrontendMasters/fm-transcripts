WEBVTT

1
00:00:00.030 --> 00:00:03.318
&gt;&gt; Nina Zakharenko: Git Show, let's
just look at commits and their contents.

2
00:00:03.318 --> 00:00:08.257
If we want to show what files are changed
in the commit, we can use the stat flag.

3
00:00:08.257 --> 00:00:12.054
It's also helpful to look at
files from another commit.

4
00:00:12.054 --> 00:00:17.012
It we wanted to just briefly look
at a file from another commit,

5
00:00:17.012 --> 00:00:20.765
you can say get show commit and
then colon file.

6
00:00:20.765 --> 00:00:26.463
A surprising amount of developers
that have been using Git for

7
00:00:26.463 --> 00:00:30.967
a while don't know about
the Git Show commands.

8
00:00:30.967 --> 00:00:33.517
They know that for a shared repository,

9
00:00:33.517 --> 00:00:36.217
they can go on GitHub
to look at the commit.

10
00:00:36.217 --> 00:00:38.606
But it's really easy to do it
from the command line too.

11
00:00:38.606 --> 00:00:41.315
You don't have to open a browser and
click around.

12
00:00:41.315 --> 00:00:43.114
It's just all there.

13
00:00:43.114 --> 00:00:44.576
Git Show works on any reference.

14
00:00:49.377 --> 00:00:52.520
&gt;&gt; Nina Zakharenko: And it can also show
the contents of any commit that's been

15
00:00:52.520 --> 00:00:53.168
orphaned.

16
00:00:53.168 --> 00:00:57.988
For example, if we lost a commit after
a rebase, or in a detached head state,

17
00:00:57.988 --> 00:01:01.342
we can still look at it as
long as it's in our history.

18
00:01:05.982 --> 00:01:10.155
&gt;&gt; Nina Zakharenko: Diff is a common tool
that we use as developers when working

19
00:01:10.155 --> 00:01:10.756
on git.

20
00:01:10.756 --> 00:01:15.268
It shows you changes between commits and
between the staging area and

21
00:01:15.268 --> 00:01:16.447
the repository.

22
00:01:16.447 --> 00:01:19.164
It can show you what's
in the working area.

23
00:01:19.164 --> 00:01:22.424
For unstaged changes you
would just do a git diff.

24
00:01:22.424 --> 00:01:27.633
Stage changes, get diff dash dash staged.

25
00:01:27.633 --> 00:01:32.288
A good way to think about it is unstaged
changes are what could be in the next

26
00:01:32.288 --> 00:01:36.211
commit and staged changes are what
will be in the next commit.

27
00:01:43.652 --> 00:01:47.217
&gt;&gt; Nina Zakharenko: You can also
pass file arguments to diff

28
00:01:47.217 --> 00:01:52.195
to narrow down which file you
wanna look at the diff of.

29
00:01:52.195 --> 00:01:55.740
I saw a great explanation of
diffing using Venn diagrams.

30
00:01:55.740 --> 00:01:59.252
And I wanted to share that with you.

31
00:01:59.252 --> 00:02:04.127
Note that the default syntax of diff
is the same as the two dot notation.

32
00:02:04.127 --> 00:02:08.950
You might have seen the two dot notation
on stack overflow or somewhere else.

33
00:02:08.950 --> 00:02:13.988
But it just means the same thing.

34
00:02:13.988 --> 00:02:19.215
Using a diff is going to
show you between A and B,

35
00:02:19.215 --> 00:02:26.296
is gonna show you of the changes
on branch B, but not on branch A.

36
00:02:26.296 --> 00:02:30.887
So this comment git diff A B will
show you only the blue changes.

37
00:02:35.587 --> 00:02:39.392
&gt;&gt; Nina Zakharenko: It is also
possible to so called diff branches.

38
00:02:39.392 --> 00:02:43.188
We can ask,
what branches are merged with master?

39
00:02:43.188 --> 00:02:45.919
Maybe they can be cleaned up.

40
00:02:45.919 --> 00:02:49.259
We can do that with a merged flag and
we can also ask,

41
00:02:49.259 --> 00:02:52.928
which branches haven't been
merged with a master yet.

42
00:02:52.928 --> 00:02:55.270
Maybe I was working on a feature and
I forgot about it.

43
00:02:56.690 --> 00:03:00.510
I can use this to take a look and
see which of my branches are unmerged.

