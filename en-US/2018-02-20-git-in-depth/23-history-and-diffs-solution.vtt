WEBVTT

1
00:00:00.070 --> 00:00:03.760
&gt;&gt; Nina Zakharenko: Let's go through
exercise five History &amp; Diffs.

2
00:00:03.760 --> 00:00:08.076
First thing we're going to do is
check out the exercise five branch.

3
00:00:18.870 --> 00:00:23.958
&gt;&gt; Nina Zakharenko: The -f flag for
check out will force the checkout,

4
00:00:23.958 --> 00:00:27.680
it'll overwrite any changes.

5
00:00:27.680 --> 00:00:30.636
I recommend not using this
in your day-to-day work,

6
00:00:30.636 --> 00:00:32.444
you'll end up having a bad time.

7
00:00:32.444 --> 00:00:37.506
But I'm just using it to check
out this example exercise branch,

8
00:00:37.506 --> 00:00:40.462
because I had some uncommitted work.

9
00:00:44.195 --> 00:00:46.962
&gt;&gt; Nina Zakharenko: Now
that I am on exercise five,

10
00:00:49.716 --> 00:00:52.454
&gt;&gt; Nina Zakharenko: We're gonna practice

11
00:00:52.454 --> 00:00:54.660
a good commit.

12
00:00:54.660 --> 00:00:58.390
I don't think I have to walk
you guys through that, so

13
00:00:58.390 --> 00:01:02.918
I'm just going to comment at the file.

14
00:01:02.918 --> 00:01:07.527
Here, say,

15
00:01:12.014 --> 00:01:15.171
&gt;&gt; Nina Zakharenko: We're going to change

16
00:01:15.171 --> 00:01:17.666
our hello.txt.

17
00:01:20.837 --> 00:01:24.552
&gt;&gt; Nina Zakharenko: And
we're gonna make it say,

18
00:01:24.552 --> 00:01:26.239
&gt;&gt; Nina Zakharenko: (greeting) (noun).

19
00:01:36.423 --> 00:01:40.840
&gt;&gt; Nina Zakharenko: Great,
now my hello.txt looks like that.

20
00:01:40.840 --> 00:01:41.910
And we're gonna rename it.

21
00:01:46.402 --> 00:01:51.787
&gt;&gt; Nina Zakharenko: And then,
we're going to commit that change.

22
00:01:51.787 --> 00:01:56.762
For brevity, I'm not going to show you
what a good commit message looks like but

23
00:01:56.762 --> 00:02:00.786
hopefully, you all got to practice
this during your exercise.

24
00:02:10.897 --> 00:02:13.380
&gt;&gt; Nina Zakharenko: Cool., so
now we have a good commit.

25
00:02:13.380 --> 00:02:16.080
Let's check out our commit with log.

26
00:02:20.354 --> 00:02:24.460
&gt;&gt; Nina Zakharenko: So this should show us
what commits were made since yesterday.

27
00:02:25.850 --> 00:02:26.350
Just this one.

28
00:02:29.318 --> 00:02:33.270
&gt;&gt; Nina Zakharenko: Now,
most importantly, let's try to track

29
00:02:33.270 --> 00:02:37.846
the hello.template file
as its changed names, and

30
00:02:37.846 --> 00:02:43.573
we're going to do that with name
status and the --follow flag.

31
00:02:43.573 --> 00:02:52.192
--follow lets you follow a file as
its changed names moved around, etc.

32
00:02:58.389 --> 00:03:03.245
&gt;&gt; Nina Zakharenko: Now, we'll see here
that this is where it was renamed, and

33
00:03:03.245 --> 00:03:07.338
some other commits where
that foul was modified.

34
00:03:07.338 --> 00:03:10.700
In the initial commit, we'll see A.

35
00:03:10.700 --> 00:03:12.468
A means, that's when it was added.

36
00:03:17.813 --> 00:03:20.599
&gt;&gt; Nina Zakharenko: Now,
let's use git grep, git log grep.

37
00:03:24.096 --> 00:03:27.915
&gt;&gt; Nina Zakharenko: And
let's search for the term,

38
00:03:27.915 --> 00:03:32.450
i18n, and author is going to be me.

39
00:03:33.480 --> 00:03:39.263
And the since is two weeks ago, oops.

40
00:03:45.703 --> 00:03:48.519
&gt;&gt; Nina Zakharenko: Great,
that went and found that commit.

41
00:03:51.720 --> 00:03:56.477
&gt;&gt; Nina Zakharenko: Without the log grep
for example, it would have pulled up all

42
00:03:56.477 --> 00:04:02.648
the commits, since they were all made by
me in the course of the past two weeks.

43
00:04:02.648 --> 00:04:10.749
Let's use diff filter to find
where the file was renamed.

44
00:04:15.360 --> 00:04:16.348
&gt;&gt; Nina Zakharenko: And there we go.

45
00:04:19.869 --> 00:04:22.949
&gt;&gt; Nina Zakharenko: We can also
use diff filter to specify and

46
00:04:22.949 --> 00:04:27.306
find out when were the files modified,
that's using M.

47
00:04:33.058 --> 00:04:35.695
&gt;&gt; Nina Zakharenko: These are all
the commits where that file was modified.

48
00:04:45.353 --> 00:04:48.200
&gt;&gt; Nina Zakharenko: Now that we found our

49
00:04:48.200 --> 00:04:53.019
commit,
&gt;&gt; Nina Zakharenko: I

50
00:04:53.019 --> 00:04:57.427
want to check this commit out,
using git show.

51
00:04:59.464 --> 00:05:02.822
&gt;&gt; Nina Zakharenko: So I copy and
paste that hash, and here it is.

52
00:05:02.822 --> 00:05:05.647
It shows all the changes.

53
00:05:10.908 --> 00:05:14.940
&gt;&gt; Nina Zakharenko: Now, how do we find
out, how do we sort of diff branches,

54
00:05:14.940 --> 00:05:20.750
how do we find out which branches were
merged into master and which ones weren't?

55
00:05:20.750 --> 00:05:27.722
We can do that with git branch --merged,
which ones were merged into master.

56
00:05:27.722 --> 00:05:32.497
Those two,
which ones were not merged into master?

57
00:05:32.497 --> 00:05:33.961
We can use no merged.

58
00:05:38.816 --> 00:05:42.880
&gt;&gt; Nina Zakharenko: Great,
that's the end of exercise five.

