WEBVTT

1
00:00:00.270 --> 00:00:03.830
&gt;&gt; Nina Zakharenko: Let's go
through how we can fix mistakes.

2
00:00:03.830 --> 00:00:07.686
So I'm going to check out
the exercise6 branch.

3
00:00:11.441 --> 00:00:15.108
&gt;&gt; Nina Zakharenko: And
I'm going to make some bad changes,

4
00:00:21.382 --> 00:00:24.092
&gt;&gt; Nina Zakharenko: To my hello.template

5
00:00:24.092 --> 00:00:24.950
file.

6
00:00:26.660 --> 00:00:30.880
If I look at hello.template,
we'll see I have some bad data in there.

7
00:00:30.880 --> 00:00:35.150
Well, no worries,
I can just check out this copy.

8
00:00:35.150 --> 00:00:36.660
It's not committed yet.

9
00:00:36.660 --> 00:00:42.164
So I can just overwrite
the working area with

10
00:00:42.164 --> 00:00:47.089
the last good copy in the staging area.

11
00:00:49.403 --> 00:00:53.434
&gt;&gt; Nina Zakharenko: And I do that
will git checkout --hello.template.

12
00:00:55.041 --> 00:00:57.575
&gt;&gt; Nina Zakharenko: Now
if I look at that file,

13
00:00:57.575 --> 00:01:02.077
we'll see that it's back to normal, great.

14
00:01:02.077 --> 00:01:06.660
If we want to check out a file
from a specific point in time,

15
00:01:06.660 --> 00:01:12.461
if we wanted it to know what hello looked
like before we made it a template,

16
00:01:12.461 --> 00:01:16.972
back when it was good old hello.txt,
we can use git log.

17
00:01:16.972 --> 00:01:19.372
We use -- name status, and

18
00:01:19.372 --> 00:01:24.779
that -- follow that we learned
about in the previous section.

19
00:01:27.311 --> 00:01:31.875
&gt;&gt; Nina Zakharenko: And I'm going to
simplify my log output oneline and

20
00:01:31.875 --> 00:01:34.760
pass in the name of the file.

21
00:01:34.760 --> 00:01:38.877
Great, we saw when it was added and
when it was deleted.

22
00:01:41.351 --> 00:01:45.254
&gt;&gt; Nina Zakharenko: And
when it was renamed.

23
00:01:46.884 --> 00:01:49.442
&gt;&gt; Nina Zakharenko: So
we're going to copy this shaw.

24
00:01:50.942 --> 00:01:55.032
&gt;&gt; Nina Zakharenko: So
we're going to copy this shaw, and.

25
00:02:00.532 --> 00:02:03.260
&gt;&gt; Nina Zakharenko: We want
the commit before this one.

26
00:02:03.260 --> 00:02:08.910
So we can either say, this commit with
a hat or we can just copy this commit.

27
00:02:10.110 --> 00:02:15.433
But if we want to get back that file,
&gt;&gt; Nina Zakharenko: We

28
00:02:15.433 --> 00:02:17.510
would do a git checkout.

29
00:02:17.510 --> 00:02:21.430
I'm gonna specify the commit
before it got deleted.

30
00:02:21.430 --> 00:02:24.580
Because it's not present
in that deleted commit.

31
00:02:24.580 --> 00:02:26.362
And I'm gonna check out hello.txt.

32
00:02:30.581 --> 00:02:32.100
&gt;&gt; Nina Zakharenko: Look, it's back.

33
00:02:35.351 --> 00:02:37.900
&gt;&gt; Nina Zakharenko: And
it's in the staging area.

34
00:02:37.900 --> 00:02:42.855
At this point,
we don't really wanna keep it there.

35
00:02:42.855 --> 00:02:44.492
So I'm just gonna run a reset.

36
00:02:47.951 --> 00:02:52.157
&gt;&gt; Nina Zakharenko: Can someone tell me
what HEAD is pointing to at this point?

37
00:02:52.157 --> 00:02:55.247
The last commit we made, right?

38
00:02:55.247 --> 00:03:00.880
So I'm gonna reset hello.txt
back to that commit.

39
00:03:00.880 --> 00:03:04.460
And it doesn't exist in that commit.

40
00:03:04.460 --> 00:03:09.856
So now it's becoming untracked file,
removed from the staging area.

41
00:03:12.147 --> 00:03:16.032
&gt;&gt; Nina Zakharenko: What if
I remove my hello.template?

42
00:03:18.106 --> 00:03:21.441
&gt;&gt; Nina Zakharenko: If I run a git status,
we'll see that it's now deleted.

43
00:03:21.441 --> 00:03:23.834
Well, let's make a commit.

44
00:03:34.030 --> 00:03:37.186
&gt;&gt; Nina Zakharenko: If later on we decide
that we actually that file was really

45
00:03:37.186 --> 00:03:41.540
important, and we need it back, I'm gonna
show you how you can track it down.

46
00:03:41.540 --> 00:03:43.869
Track down to where you deleted it,
and bring it back.

47
00:03:45.170 --> 00:03:49.650
For this, we're gonna use that
handy diff-filter from earlier.

48
00:03:49.650 --> 00:03:51.885
And I'm gonna to pass in D for deleted.

49
00:03:55.221 --> 00:03:58.481
&gt;&gt; Nina Zakharenko: And
the name of my file.

50
00:03:58.481 --> 00:04:02.068
And we'll see here that autocomplete
doesn't work because this file doesn't

51
00:04:02.068 --> 00:04:02.825
exist anymore.

52
00:04:07.436 --> 00:04:08.496
&gt;&gt; Nina Zakharenko: Oops.

53
00:04:11.571 --> 00:04:14.310
&gt;&gt; Nina Zakharenko: This is the kind
of error that you might see if you

54
00:04:14.310 --> 00:04:16.980
forget those two double dashes.

55
00:04:16.980 --> 00:04:23.120
So I didn't specify that this was
the start of our named arguments.

56
00:04:23.120 --> 00:04:27.930
So this ambiguous argument error is the
kind of error you might see if you forget

57
00:04:27.930 --> 00:04:33.040
the So I'm gonna add that
-- to my hello.template.

58
00:04:33.040 --> 00:04:37.555
And now we're gonna see where
we can track it down and

59
00:04:37.555 --> 00:04:40.743
see what commit it was deleted from.

60
00:04:45.702 --> 00:04:50.167
&gt;&gt; Nina Zakharenko: And
that would be this commit.

61
00:04:50.167 --> 00:04:55.090
Oops, I'm gonna use --no-pager here.

62
00:04:55.090 --> 00:04:57.120
So that we can see
the output in my terminal.

63
00:04:58.210 --> 00:05:03.270
Great, so this is the commit
where we deleted hello.template.

64
00:05:03.270 --> 00:05:08.140
We can check it back out
&gt;&gt; Nina Zakharenko: By specifying

65
00:05:08.140 --> 00:05:10.340
the commit before, right?

66
00:05:10.340 --> 00:05:14.073
Doesn't exist in that commit.

67
00:05:14.073 --> 00:05:15.595
And now it's back.

68
00:05:15.595 --> 00:05:17.850
It's in our staging area.

69
00:05:21.180 --> 00:05:26.100
Gonna skip the solution for
where we clear our repo.

70
00:05:28.190 --> 00:05:31.242
I'm sorry,
clear our working area with g-t clean.

71
00:05:31.242 --> 00:05:34.840
I'm just going to manually
delete this file so

72
00:05:34.840 --> 00:05:37.709
that my staging area is clean again.

73
00:05:37.709 --> 00:05:39.680
And I'm gonna talk about git reset.

74
00:05:41.550 --> 00:05:47.160
So at this point, I never committed my
hello.template file after I deleted it.

75
00:05:47.160 --> 00:05:48.320
It's staged for commit.

76
00:05:49.560 --> 00:05:51.730
You can use git reset to unstage it.

77
00:05:53.340 --> 00:05:57.384
By default, if you don't specify
an argument here, it just assumes HEAD.

78
00:06:03.593 --> 00:06:06.072
&gt;&gt; Nina Zakharenko: Great, so
now it's an untracked file.

79
00:06:06.072 --> 00:06:08.160
And that's because it was
deleted in that last commit.

80
00:06:09.980 --> 00:06:17.000
If we use git reset on a file,
on a file, instead of a commit,

81
00:06:17.000 --> 00:06:21.210
it works in mixed mode, so that means
it's gonna copy it to the staging area.

82
00:06:21.210 --> 00:06:24.014
But it's also gonna keep your
copy in the working area.

83
00:06:30.045 --> 00:06:35.462
&gt;&gt; Nina Zakharenko: It's also possible
to check out files from specific

84
00:06:35.462 --> 00:06:41.985
versions using git recent, but
I'm going to move past that and

85
00:06:41.985 --> 00:06:45.950
talk to you about git reset --hard.

86
00:06:45.950 --> 00:06:50.880
So if you really messed up,
you don't know how you got here and

87
00:06:50.880 --> 00:06:56.090
you just want your repository to look
exactly like it did the last commit,

88
00:06:56.090 --> 00:06:59.320
you can use git reset --hard.

89
00:06:59.320 --> 00:07:03.190
It's gonna blow away our untracked files,
anything in the staging area.

90
00:07:04.840 --> 00:07:07.726
So if I do that and

91
00:07:07.726 --> 00:07:12.470
I look at git status again,

92
00:07:12.470 --> 00:07:19.855
if I had
&gt;&gt; Nina Zakharenko: Mid changes,

93
00:07:19.855 --> 00:07:20.611
I'm sorry,

94
00:07:20.611 --> 00:07:25.294
hello.template is still here because
it's not present in the current commit.

95
00:07:27.293 --> 00:07:30.029
&gt;&gt; Nina Zakharenko: All right,
if it was, it would be gone.

96
00:07:34.070 --> 00:07:39.480
&gt;&gt; Nina Zakharenko: Remember that we can
undo a git reset by using original HEAD.

97
00:07:40.670 --> 00:07:44.546
So if I look at my history.

98
00:07:46.021 --> 00:07:51.488
&gt;&gt; Nina Zakharenko: And
I see that I want to reset a repo

99
00:07:51.488 --> 00:07:57.836
back to where we
&gt;&gt; Nina Zakharenko: We

100
00:07:57.836 --> 00:07:59.650
placed our greeting tokens.

101
00:08:04.230 --> 00:08:06.220
&gt;&gt; Nina Zakharenko: Say, I want to.

102
00:08:09.648 --> 00:08:10.330
&gt;&gt; Nina Zakharenko: I'm sorry.

103
00:08:13.993 --> 00:08:16.560
&gt;&gt; Nina Zakharenko: I want to
look at the two previous commits.

104
00:08:16.560 --> 00:08:23.127
And I'm gonna do that with the -n2,
or -n 2, not -2.

105
00:08:26.721 --> 00:08:30.957
&gt;&gt; Nina Zakharenko: So,
if I wanted to, if I did a git reset,

106
00:08:30.957 --> 00:08:38.185
let's say to here,
&gt;&gt; Nina Zakharenko: And

107
00:08:38.185 --> 00:08:41.671
now my HEAD pointer is pointing,

108
00:08:41.671 --> 00:08:47.900
it's exercise6 which is now
pointing at this commit.

109
00:08:47.900 --> 00:08:52.751
If I wanted to undo that,
I could do git reset ORIG_HEAD,

110
00:08:52.751 --> 00:08:56.316
and it'll get me back
to where I need to be.

111
00:09:02.270 --> 00:09:06.174
&gt;&gt; Nina Zakharenko: If we wanted to
undo deleting hello.template, but

112
00:09:06.174 --> 00:09:11.333
we didn't wanna alter history with
a reset, we can use a git revert.

113
00:09:14.012 --> 00:09:18.620
&gt;&gt; Nina Zakharenko: So
if I look at my log and find the commit

114
00:09:18.620 --> 00:09:23.517
where we deleted the hello.template,

115
00:09:23.517 --> 00:09:26.980
I wanna be able to revert it.

116
00:09:28.440 --> 00:09:32.690
I had some technical difficulties
with exercise6 earlier.

117
00:09:32.690 --> 00:09:39.590
And I wanted to make sure that everyone
had a good idea of how revert worked.

118
00:09:39.590 --> 00:09:42.140
So I'm gonna show that
to you one more time.

119
00:09:43.250 --> 00:09:45.455
I'm currently on branch exercise6.

120
00:09:48.751 --> 00:09:53.194
&gt;&gt; Nina Zakharenko: And
if I look at my log, I'll see that I have

121
00:09:53.194 --> 00:09:58.267
a commit here where I
deleted hello.template.

122
00:09:58.267 --> 00:10:04.940
And if I look, it's gone, and
I wanna revert that commit.

123
00:10:04.940 --> 00:10:10.320
Let's say that I've already pushed it,
I don't wanna rewrite history.

124
00:10:10.320 --> 00:10:14.920
I wanna get back hello.template but
I wanna make a new revert commit.

125
00:10:16.260 --> 00:10:20.790
In order to do that, I would need to

126
00:10:20.790 --> 00:10:25.720
specify the commit where
I deleted hello.template.

127
00:10:25.720 --> 00:10:28.640
And that's going to open an editor.

128
00:10:28.640 --> 00:10:33.080
And the editor will say revert and
the commit name.

129
00:10:33.080 --> 00:10:35.335
It'll specify which commit it's reverting.

130
00:10:37.001 --> 00:10:38.755
&gt;&gt; Nina Zakharenko: And
notice here at the bottom,

131
00:10:38.755 --> 00:10:42.180
it'll also show what changes
are going to be committed.

132
00:10:42.180 --> 00:10:44.590
It's a new file, hello.template.

133
00:10:44.590 --> 00:10:47.610
It's the opposite of the commit
where we deleted the file.

134
00:10:49.110 --> 00:10:53.015
So now if I save this and exit,

135
00:10:53.015 --> 00:10:58.330
we'll see that one commit was created,

136
00:10:58.330 --> 00:11:03.664
the revert of delete hello.template.

137
00:11:05.713 --> 00:11:08.770
&gt;&gt; Nina Zakharenko: And if I see,
it's back here in my working area.

138
00:11:10.460 --> 00:11:12.590
And that's everything about reverts.

139
00:11:14.040 --> 00:11:20.627
If I look at the log again,
&gt;&gt; Nina Zakharenko: We'll

140
00:11:20.627 --> 00:11:23.120
see that that revert commit is there.

141
00:11:23.120 --> 00:11:24.480
It's a new commit.

142
00:11:24.480 --> 00:11:28.090
This commit where I deleted
hello.template is the same.

143
00:11:28.090 --> 00:11:28.840
It hasn't changed.

144
00:11:28.840 --> 00:11:32.344
So I can safely push this
without rewriting history.

145
00:11:33.387 --> 00:11:35.180
&gt;&gt; Nina Zakharenko: And
that's it for exercise6.

