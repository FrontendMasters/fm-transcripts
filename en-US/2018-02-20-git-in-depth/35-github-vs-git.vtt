WEBVTT

1
00:00:00.280 --> 00:00:04.230
&gt;&gt; Nina Zakharenko: We're going to talk
about forks and remote repositories.

2
00:00:04.230 --> 00:00:09.174
Distributed version control,
before Git, older systems,

3
00:00:09.174 --> 00:00:13.926
SVN, CVS had one central repository,
one master server,

4
00:00:13.926 --> 00:00:17.347
everyone would push to it and
pull from it,

5
00:00:17.347 --> 00:00:21.980
it doesn't work that way.
&gt;&gt; Nina Zakharenko: And it's

6
00:00:21.980 --> 00:00:26.120
important to talk about those, because
we've been talking a lot about the tool.

7
00:00:26.120 --> 00:00:29.930
But we haven't really talked
about what Git enables us to do.

8
00:00:31.060 --> 00:00:34.921
By doing away with that central
repository, for example,

9
00:00:34.921 --> 00:00:39.165
if you were working on SVN, and
the central repository was down,

10
00:00:39.165 --> 00:00:44.047
you couldn't push changes you couldn't
check out code, you were stuck.

11
00:00:44.047 --> 00:00:48.742
Git doesn't work that way.
&gt;&gt; Nina Zakharenko: And

12
00:00:48.742 --> 00:00:53.680
that's mostly because of
the efficiencies of how Git stores data.

13
00:00:53.680 --> 00:00:56.730
Because of that,
because of the compression and

14
00:00:56.730 --> 00:01:01.860
these really interesting algorithms, we're
able to store the whole Git repository

15
00:01:01.860 --> 00:01:04.880
with all of its history
on our local machines.

16
00:01:04.880 --> 00:01:09.180
We don't need the local network to
be able to work on our repository.

17
00:01:09.180 --> 00:01:12.500
Unless you're code base
is just absolutely huge,

18
00:01:12.500 --> 00:01:15.800
it's really easy to check out branches,
pull down new changes.

19
00:01:18.030 --> 00:01:21.910
There is an interesting news
story lately about Microsoft.

20
00:01:21.910 --> 00:01:26.660
So Microsoft Windows was on one Git
repository, but because that code base was

21
00:01:26.660 --> 00:01:31.830
so old and so
huge they started running into problems.

22
00:01:31.830 --> 00:01:36.822
So unless you're planning on writing
the next Windows, the way Git works now is

23
00:01:36.822 --> 00:01:40.577
probably just fine.
&gt;&gt; Nina Zakharenko: So

24
00:01:40.577 --> 00:01:42.661
on the left is the centralized model and

25
00:01:42.661 --> 00:01:47.941
on the right is the distributed model.
&gt;&gt; Nina Zakharenko: Now,

26
00:01:47.941 --> 00:01:49.850
GitHub versus Git.

27
00:01:49.850 --> 00:01:52.920
A lot of people seem to get
confused about the terminology.

28
00:01:52.920 --> 00:01:54.800
So far, we've been talking about Git.

29
00:01:54.800 --> 00:01:59.103
That is the tool, the workflow,
that you can use on your local machine.

30
00:01:59.103 --> 00:02:01.248
Git allows more than that.

31
00:02:01.248 --> 00:02:09.440
And GitHub is, it's really the key
to collaboration amongst developers.

32
00:02:11.810 --> 00:02:14.620
You can collaborate with others,
you can share your changes,

33
00:02:14.620 --> 00:02:17.380
you can pull down changes
from other contributors.

34
00:02:17.380 --> 00:02:19.524
GitHub is a tool that's
built on top of Git.

35
00:02:19.524 --> 00:02:22.570
It has an easy-to-use interface.

36
00:02:22.570 --> 00:02:25.650
You can host your code for free,
you can share it with others.

37
00:02:25.650 --> 00:02:28.720
It has a really nice interface for
collaboration.

38
00:02:28.720 --> 00:02:32.310
And it's really the key driver
of open source development,

39
00:02:32.310 --> 00:02:34.620
since it came out in 2008.

40
00:02:34.620 --> 00:02:37.770
GitHub completely changed the picture.

41
00:02:39.480 --> 00:02:44.180
So features like repository hosting,
browsing code, issues, pull requests and

42
00:02:44.180 --> 00:02:48.800
forks, those are all GitHub features,
not Git.

43
00:02:48.800 --> 00:02:50.630
It's important to make that distinction.

