WEBVTT

1
00:00:00.220 --> 00:00:04.250
&gt;&gt; Nina Zakharenko: The next two sections
are some of the most important ones.

2
00:00:04.250 --> 00:00:06.941
They're going to help you
in your work day to day.

3
00:00:10.242 --> 00:00:11.772
&gt;&gt; Nina Zakharenko: The very first one,

4
00:00:11.772 --> 00:00:16.890
question everyone wants to
know is how do I fix mistakes?

5
00:00:16.890 --> 00:00:24.143
There's a few tools that we use,
checkout, reset, revert.

6
00:00:24.143 --> 00:00:30.980
They're kind of confusing and some of them
work similarly, in slightly subtle ways.

7
00:00:30.980 --> 00:00:33.310
They take flags or commits.

8
00:00:35.810 --> 00:00:40.417
After this section you're not gonna
have a hard time figuring out

9
00:00:40.417 --> 00:00:43.610
which command do you need for
what scenario.

10
00:00:43.610 --> 00:00:47.486
Because fundamentally in order to
understand how to fix mistakes,

11
00:00:47.486 --> 00:00:49.663
means having a really clear picture.

12
00:00:49.663 --> 00:00:54.722
A clear idea of how those three
areas where code lives work.

13
00:00:54.722 --> 00:00:58.018
The working area, the staging area,

14
00:00:58.018 --> 00:01:02.868
the repository, and
how we can move data between them.

15
00:01:02.868 --> 00:01:07.855
The very first way that most people
learn how to fix their mistakes is with

16
00:01:07.855 --> 00:01:08.935
git checkout.

17
00:01:08.935 --> 00:01:15.137
It allows you to restore working
tree files or switch branches.

18
00:01:15.137 --> 00:01:17.670
And the action that is taken
depends on the parameters.

19
00:01:21.410 --> 00:01:26.440
Checkout can move that head pointer and
update the staging area and

20
00:01:26.440 --> 00:01:27.790
the working directory.

21
00:01:27.790 --> 00:01:30.886
If you're checking out a file,

22
00:01:30.886 --> 00:01:36.744
it can perform the same actions
without moving the pointer.

23
00:01:36.744 --> 00:01:41.552
A key thing to remember here is remember
how earlier in the course we talked about

24
00:01:41.552 --> 00:01:43.719
how the staging area isn't empty?

25
00:01:43.719 --> 00:01:45.865
It's a copy of the current commit.

26
00:01:45.865 --> 00:01:51.156
It has all the files that are in
our current commit and their SHA.

27
00:01:51.156 --> 00:01:56.327
This is a important concept to
remember when using git checkout.

28
00:01:56.327 --> 00:02:00.235
So when we git checkout a branch,
here are the steps that happen.

29
00:02:00.235 --> 00:02:03.021
The first thing we do is change
HEAD to point to that new branch.

30
00:02:06.170 --> 00:02:11.520
&gt;&gt; Nina Zakharenko: We were on master, now
HEAD is moving to our tech post branch.

31
00:02:11.520 --> 00:02:15.230
The second thing we do is copy
the commit snapshot to the staging area.

32
00:02:16.240 --> 00:02:19.666
Remember, the staging area
can also be called the index.

33
00:02:19.666 --> 00:02:27.045
So if you're reading documentation later,
that's a good thing to keep in mind.

34
00:02:27.045 --> 00:02:30.650
So we copy it from the repository
to the staging area.

35
00:02:30.650 --> 00:02:34.930
The last thing we do is we update
the working area with the branch contents.

36
00:02:34.930 --> 00:02:39.250
Any changes to files in
your working area are kept.

37
00:02:39.250 --> 00:02:42.495
Remember how I try to check out
a different branch and git warned me?

38
00:02:42.495 --> 00:02:45.110
It said that my files
would be overwritten.

39
00:02:46.560 --> 00:02:50.330
Changes in the staging area are also
capped unless they conflict with

40
00:02:50.330 --> 00:02:53.440
any changes in a branch
you're about to check out.

41
00:02:53.440 --> 00:02:56.440
Checking out a branch is
generally a pretty safe operation.

42
00:02:56.440 --> 00:03:00.402
Nothing bad's gonna happen, git's gonna
warn you if you're gonna lose data.

43
00:03:02.940 --> 00:03:06.077
&gt;&gt; Nina Zakharenko: Now, what happens
when you get checkout -- a file?

44
00:03:08.047 --> 00:03:10.935
&gt;&gt; Nina Zakharenko: What it does is
replaces the working area copy with

45
00:03:10.935 --> 00:03:14.170
the version from your
current staging area.

46
00:03:14.170 --> 00:03:19.653
Git recommends this command to run

47
00:03:19.653 --> 00:03:24.574
when you want to remove a file.

48
00:03:24.574 --> 00:03:29.362
Replace the file contents in your working
area with the clean file contents from

49
00:03:29.362 --> 00:03:30.440
the repository.

50
00:03:33.120 --> 00:03:34.158
So in this case,

51
00:03:34.158 --> 00:03:38.767
it's going to copy the content from
the staging area to the working area.

52
00:03:38.767 --> 00:03:41.311
One thing to note,
this is really important,

53
00:03:41.311 --> 00:03:44.391
is this command will completely
overwrite your files.

54
00:03:44.391 --> 00:03:47.090
It's gonna overwrite your files
in the working directory.

55
00:03:47.090 --> 00:03:50.886
If you have any changes to them, and
you run this command, that's it.

56
00:03:50.886 --> 00:03:55.648
They're gone, they're blown away and
there is no way of getting them back.

57
00:03:55.648 --> 00:04:01.178
I'm always kind of surprised that git
suggests this action in the messaging,

58
00:04:01.178 --> 00:04:04.041
because it's a disruptive operation.

59
00:04:04.041 --> 00:04:11.343
And if you don't know what you're doing,
you can really mess up your work.

60
00:04:11.343 --> 00:04:14.980
When git checkout overwrites
files from the staging area,

61
00:04:14.980 --> 00:04:19.635
it's gonna overwrite the working area
file with the staging area version,

62
00:04:19.635 --> 00:04:21.469
the one from the last commit.

63
00:04:21.469 --> 00:04:24.884
So very, very careful.

64
00:04:24.884 --> 00:04:28.159
One thing I wanted to
talk to you about is,

65
00:04:28.159 --> 00:04:33.036
a lot of people get confused
about what those two dashes mean.

66
00:04:33.036 --> 00:04:38.098
When I say get -- checkout,
this signifies the end of

67
00:04:38.098 --> 00:04:43.836
a command operation and
the start of positional parameters.

68
00:04:43.836 --> 00:04:49.249
So if I had the same, if I had a branch
and a file with the same name,

69
00:04:49.249 --> 00:04:52.906
git checkout could possibly be ambiguous.

70
00:04:52.906 --> 00:04:57.358
So with the -- we're specifying that the
next argument is a file in this case and

71
00:04:57.358 --> 00:04:58.150
not a branch.

72
00:05:00.520 --> 00:05:02.950
Now what happens in this third scenario?

73
00:05:02.950 --> 00:05:07.614
You git checkout, you specify a commit,
and then -- a file.

74
00:05:07.614 --> 00:05:11.248
It updates the staging
area to match the commit.

75
00:05:11.248 --> 00:05:17.056
And then it updates the working
area to match the staging area.

76
00:05:17.056 --> 00:05:19.018
Again, this operation overwrites,

77
00:05:19.018 --> 00:05:22.216
it will overwrite files in your
staging area that are staged.

78
00:05:22.216 --> 00:05:25.391
It'll overwrite files in
your working directory.

79
00:05:25.391 --> 00:05:29.838
When you're running git checkout and
you have unsafe changes,

80
00:05:29.838 --> 00:05:33.390
it's time to stop, pause,
stash, commit them.

81
00:05:33.390 --> 00:05:38.258
Do whatever you need to do to get your
code in a safe place because that command

82
00:05:38.258 --> 00:05:39.715
is very destructive.

83
00:05:39.715 --> 00:05:42.999
When we checkout from a specific commit,
again,

84
00:05:42.999 --> 00:05:46.840
this copy is to both the working area and
the staging area.

85
00:05:48.340 --> 00:05:52.296
Using this process we can
restore a deleted file.

86
00:05:52.296 --> 00:05:56.385
If we git checkout we find the commit
where we deleted that file, and

87
00:05:56.385 --> 00:05:59.140
we specify hat to point
to its parent commit.

88
00:05:59.140 --> 00:06:03.012
We can pretty easily checkout that
deleted file and get it back.

89
00:06:06.102 --> 00:06:07.720
&gt;&gt; Nina Zakharenko: Again, big warning.

90
00:06:07.720 --> 00:06:10.177
Putting a big warning
on all of these slides.

