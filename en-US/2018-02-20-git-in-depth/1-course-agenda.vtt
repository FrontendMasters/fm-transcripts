WEBVTT

1
00:00:00.480 --> 00:00:02.950
&gt;&gt; Nina Zakharenko: Just
a little bit about Git.

2
00:00:02.950 --> 00:00:05.826
I'm sure some of you [LAUGH]
have felt this way before.

3
00:00:05.826 --> 00:00:12.100
This is a classic XKCD comic.
&gt;&gt; Nina Zakharenko: So how do we use it?

4
00:00:12.100 --> 00:00:16.069
No idea, just memorize the Shell commands,
type them, sync up.

5
00:00:16.069 --> 00:00:19.862
Something goes wrong, just blow up
the project, delete it, copy it,

6
00:00:19.862 --> 00:00:22.120
download a fresh copy.

7
00:00:22.120 --> 00:00:24.622
Have you felt like this?

8
00:00:24.622 --> 00:00:26.026
Yeah, lots of emphatic

9
00:00:26.026 --> 00:00:27.527
nodding in the room.
&gt;&gt; Speaker 2: I did

10
00:00:27.527 --> 00:00:28.810
that yesterday.
&gt;&gt; Nina Zakharenko: You did that

11
00:00:28.810 --> 00:00:30.032
yesterday?
&gt;&gt; Speaker 2: [LAUGH] Yeah.

12
00:00:30.032 --> 00:00:30.702
&gt;&gt; Nina Zakharenko: Are you excited to

13
00:00:30.702 --> 00:00:32.884
never have to do that again?
&gt;&gt; Speaker 2: I am.

14
00:00:32.884 --> 00:00:33.389
&gt;&gt; Nina Zakharenko: Good,

15
00:00:33.389 --> 00:00:35.413
you're in the right place.

16
00:00:35.413 --> 00:00:37.460
[LAUGH] I have also been here.

17
00:00:38.470 --> 00:00:42.660
It's a sad place, and so
you think, I'm gonna help myself.

18
00:00:42.660 --> 00:00:49.910
I'm going to open a manual page, and then
let me read about the internals of Git.

19
00:00:51.350 --> 00:00:57.150
Well, it might look something like this,
git-acquire-pack Manual Page.

20
00:00:57.150 --> 00:01:02.070
Acquire the non-remoted applied
packs to some blamed unstaged logs.

21
00:01:02.070 --> 00:01:04.950
And you're like, what does this even mean?

22
00:01:04.950 --> 00:01:06.800
So, this is a joke website.

23
00:01:07.840 --> 00:01:12.610
It is a git-man-page-generator.

24
00:01:12.610 --> 00:01:14.430
It does a pretty good job.

25
00:01:14.430 --> 00:01:19.600
They had to put a big warning at
the top to tell people that hey,

26
00:01:19.600 --> 00:01:25.310
this is not an actual git-man-page,
[LAUGH] but it's pretty good.

27
00:01:25.310 --> 00:01:26.472
If you have some free time,

28
00:01:26.472 --> 00:01:30.942
I recommend clicking around.
&gt;&gt; Nina Zakharenko: So,

29
00:01:30.942 --> 00:01:35.803
the goal of this class is to talk
to you about the porcelain of Git

30
00:01:35.803 --> 00:01:38.020
versus the plumbing of Git.

31
00:01:39.410 --> 00:01:41.780
So, the porcelain is the interface.

32
00:01:41.780 --> 00:01:46.360
It's the commands that you type into
the terminal to interface with Git.

33
00:01:46.360 --> 00:01:52.480
Git branch, Git add, Git commit.

34
00:01:52.480 --> 00:01:56.250
The plumbing is how Git
works under the hood.

35
00:01:56.250 --> 00:02:02.550
So I assume you have a familiarity
with those basic porcelain commands.

36
00:02:02.550 --> 00:02:07.160
But I want you to be able to leave
the workshop and immediately

37
00:02:07.160 --> 00:02:12.260
implement some of the ideas that
we've gone through in your workflow.

38
00:02:12.260 --> 00:02:16.170
So by understanding what's
going on under the hood,

39
00:02:16.170 --> 00:02:20.910
you're gonna have a much easier time
troubleshooting, debugging problems and

40
00:02:20.910 --> 00:02:23.590
just conceptualizing
what's going on in Git.

41
00:02:25.790 --> 00:02:31.440
Towards the end of the class,
I wanna show you some tools that I use

42
00:02:31.440 --> 00:02:34.890
in my daily work, and it's gonna
supercharge your daily work flow.

43
00:02:37.660 --> 00:02:40.702
It's really easy to talk
about the theoretical.

44
00:02:40.702 --> 00:02:45.240
I mean, you can spend weeks, even months,
trying to learning about Git.

45
00:02:45.240 --> 00:02:47.620
Learning about all the different nooks and
crannies.

46
00:02:48.850 --> 00:02:52.220
People use Git in different
ways with different goals.

47
00:02:52.220 --> 00:02:55.696
So my goal is to give you enough
of a foundation of the plumbing so

48
00:02:55.696 --> 00:02:59.829
that you can understand, have an easier
time deep diving into the tools and

49
00:02:59.829 --> 00:03:03.784
features that you personally find
useful for your personal work flow.

50
00:03:07.162 --> 00:03:08.916
&gt;&gt; Nina Zakharenko: So class overview,

51
00:03:08.916 --> 00:03:15.010
we're going to be doing exercises
at the end of almost every chapter.

52
00:03:16.420 --> 00:03:21.960
The exercises are gonna contain any of
the relevant commands that you might need.

53
00:03:21.960 --> 00:03:24.830
So don't worry about trying
to write things down while

54
00:03:24.830 --> 00:03:26.080
we're looking at the slides.

55
00:03:26.080 --> 00:03:28.680
You have a copy of
the slides on your computer.

56
00:03:28.680 --> 00:03:29.835
They're on the Git.

57
00:03:29.835 --> 00:03:33.010
That repository is not going away.

58
00:03:33.010 --> 00:03:36.850
So try to kind of focus on the content
instead of writing things down.

59
00:03:36.850 --> 00:03:38.130
It's all available for you.

60
00:03:40.630 --> 00:03:43.725
Some of the example code
is gonna be in Python.

61
00:03:43.725 --> 00:03:47.061
So if you don't know Python,
don't worry about.

62
00:03:47.061 --> 00:03:50.260
We're really focusing on Git,
and not the programming language.

63
00:03:50.260 --> 00:03:52.340
And I can walk you through
what the code is doing.

64
00:03:54.330 --> 00:03:57.330
In Part 1, we're gonna go through,
what is Git?

65
00:03:58.360 --> 00:04:01.000
How does it work under the hood?

66
00:04:01.000 --> 00:04:04.410
Next, we're gonna dive into the working
area, the staging area, and

67
00:04:04.410 --> 00:04:09.230
the repository, the three main
areas where Git stores your code.

68
00:04:09.230 --> 00:04:12.020
We're gonna do a deep dive
into the staging area.

69
00:04:12.020 --> 00:04:15.191
We're gonna talk about references,
commits, branches, and

70
00:04:15.191 --> 00:04:20.026
stashing.
&gt;&gt; Nina Zakharenko: Then merging and

71
00:04:20.026 --> 00:04:23.347
rebasing, history and diffs,

72
00:04:23.347 --> 00:04:28.333
fixing mistakes, rebase,
&gt;&gt; Nina Zakharenko: The command

73
00:04:28.333 --> 00:04:33.139
that everyone's afraid of,
forks and remote repositories.

74
00:04:35.160 --> 00:04:39.470
And in the final part of the class
we're gonna talk about the danger zone.

75
00:04:39.470 --> 00:04:45.387
So how you can really mess things up and
some strategies for recovering.

76
00:04:45.387 --> 00:04:48.240
We're gonna talk about
some advanced Git tools.

77
00:04:48.240 --> 00:04:52.260
We're gonna talk about how to
customize your Git configuration.

78
00:04:52.260 --> 00:04:57.730
How to set up global ignore files,
Git Hooks, Git Templates.

79
00:04:57.730 --> 00:05:03.710
And in the last two sections,
we're gonna focus on GitHub, so the social

80
00:05:03.710 --> 00:05:10.310
version of Git, how to integrate with
GitHub and continuous integration tools.

81
00:05:10.310 --> 00:05:13.111
And in the final chapter
we're going to work with

82
00:05:13.111 --> 00:05:19.083
the GitHub API.
&gt;&gt; Nina Zakharenko: First, I really

83
00:05:19.083 --> 00:05:25.730
want to drill in why it's important that
we use the command line for this class.

84
00:05:25.730 --> 00:05:30.671
Because there are lots and lots of
graphical Git tools out there that show

85
00:05:30.671 --> 00:05:34.723
you pretty visuals and
they let you double-click to edit.

86
00:05:34.723 --> 00:05:38.322
And drag things around and
drag and drop commits and

87
00:05:38.322 --> 00:05:40.615
do all sorts of other wizardry.

88
00:05:40.615 --> 00:05:45.357
And so now the people in the room
are sitting here looking at me like great,

89
00:05:45.357 --> 00:05:46.593
why am I even here?

90
00:05:46.593 --> 00:05:49.132
[LAUGH] I should just go
download one of these tools and

91
00:05:49.132 --> 00:05:50.699
all my problems will be solved.

92
00:05:51.920 --> 00:05:54.857
Well, that's not the case,
bad news [LAUGH].

93
00:05:54.857 --> 00:05:57.929
If you start out using Git with
one of these graphical tools,

94
00:05:57.929 --> 00:06:02.650
you're really never going to fully
understand what's going on under the hood.

95
00:06:02.650 --> 00:06:06.740
And you'll just be left in the dust
when it comes to fixing mistakes.

96
00:06:06.740 --> 00:06:12.140
To truly get Git, you have to use
the tools as they were designed.

97
00:06:12.140 --> 00:06:15.610
And to do that you need to
use Git on the command line.

98
00:06:15.610 --> 00:06:20.484
I like to think of some of
the graphical Git GUI tools as putting

99
00:06:20.484 --> 00:06:23.028
lipstick on a pig, still a pig.

