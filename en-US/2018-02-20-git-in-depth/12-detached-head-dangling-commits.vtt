WEBVTT

1
00:00:00.250 --> 00:00:04.210
&gt;&gt; Nina Zakharenko: Now, this is a scary
message that some of you might have seen.

2
00:00:04.210 --> 00:00:08.220
Because show of hands, who's been
in a HEAD-LESS/DETACHED HEAD state.

3
00:00:09.370 --> 00:00:13.430
Yeah, it's scary, you're like
my HEAD is DETACHED, am I dying?

4
00:00:13.430 --> 00:00:16.660
Is my gear repository going to blow up.

5
00:00:16.660 --> 00:00:17.810
What is going on here?

6
00:00:18.820 --> 00:00:24.450
So you'll see a DETACHED HEAD state
when you check out a specific commit,

7
00:00:24.450 --> 00:00:26.860
or a tag instead of a branch.

8
00:00:28.730 --> 00:00:32.050
Git moves the HEAD pointer to
the commit that you specified.

9
00:00:34.050 --> 00:00:35.980
When you check out a different branch or

10
00:00:35.980 --> 00:00:38.880
a commit, the value of HEAD's
gonna change too, right?

11
00:00:38.880 --> 00:00:40.670
It's going to change to the next SHA.

12
00:00:41.840 --> 00:00:45.530
If you make any commits
in a DETACHED HEAD state,

13
00:00:45.530 --> 00:00:47.700
they don't have any references to them.

14
00:00:47.700 --> 00:00:51.230
Git doesn't know how to point to them.

15
00:00:54.540 --> 00:00:56.380
Let me explain this with a diagram.

16
00:00:58.340 --> 00:01:03.612
I have a, I checked out a commit.
&gt;&gt; Nina Zakharenko: Git

17
00:01:03.612 --> 00:01:06.020
tells me that I'm in
a DETACHED HEAD state.

18
00:01:07.140 --> 00:01:11.960
Can look around, make changes,
I can commit them.

19
00:01:11.960 --> 00:01:17.090
If I don't do anything with the commits
that I made in a DETACHED HEAD state,

20
00:01:17.090 --> 00:01:20.450
you can consider them lost.

21
00:01:20.450 --> 00:01:25.670
There are ways of getting them back and
we'll talk about git disaster recovery

22
00:01:25.670 --> 00:01:32.500
in the afternoon, but
if you don't do anything with them, poof.

23
00:01:34.060 --> 00:01:39.164
So, now I made a new commit,
I added a second post.

24
00:01:46.196 --> 00:01:46.742
&gt;&gt; Nina Zakharenko: And so

25
00:01:46.742 --> 00:01:52.098
I have a new commit, it's 1f6 and
HEAD has moved to point

26
00:01:52.098 --> 00:01:57.196
at that commit.
&gt;&gt; Nina Zakharenko: What

27
00:01:57.196 --> 00:02:00.370
do we wanna do if we
want to save our work?

28
00:02:01.420 --> 00:02:04.760
If we did work in a DETACHED HEAD,
there's a few things we can do.

29
00:02:06.020 --> 00:02:09.620
We can create a new branch
that points to the last commit

30
00:02:09.620 --> 00:02:12.010
we made in a DETACHED HEAD.

31
00:02:12.010 --> 00:02:18.180
Now that commit has a permanent
reference of the new-branch-name.

32
00:02:19.890 --> 00:02:21.870
And, why just the last commit?

33
00:02:21.870 --> 00:02:25.270
Let's say you made multiple
commits in a DETACHED HEAD state.

34
00:02:26.320 --> 00:02:30.990
Well, the very last commit knows
about all of its parents, right.

35
00:02:32.480 --> 00:02:36.260
So we don't have to go through and try to
save each of those commits individually.

36
00:02:36.260 --> 00:02:41.488
If we got the last one, we're in business.
&gt;&gt; Nina Zakharenko: Now

37
00:02:41.488 --> 00:02:44.430
you made some commits,
you don't care about them.

38
00:02:45.790 --> 00:02:47.390
You can discard your work.

39
00:02:47.390 --> 00:02:51.430
If you don't point a new
branch to those commits,

40
00:02:52.900 --> 00:02:55.980
they're not gonna be
referenced in git anymore.

41
00:02:55.980 --> 00:02:58.400
Sometimes this is called
a DANGLING COMMIT.

42
00:02:59.850 --> 00:03:02.670
Eventually they're gonna
be garbage collected.

43
00:03:02.670 --> 00:03:03.960
This is pretty cool.

44
00:03:05.250 --> 00:03:07.060
Git does it's own garbage collecting.

45
00:03:09.200 --> 00:03:14.770
It runs every few weeks,
if you want to you can run it manually.

46
00:03:14.770 --> 00:03:19.575
It'll go through and clean up any of those
DANGLING COMMITS that you can't reference

47
00:03:19.575 --> 00:03:26.588
anymore.
&gt;&gt; Nina Zakharenko: So,

48
00:03:26.588 --> 00:03:30.548
if you lost those commits,
there's still a way

49
00:03:30.548 --> 00:03:35.580
to get them back if garbage
collection hasn't run yet.

50
00:03:35.580 --> 00:03:38.404
And that's with the ref log which
we're gonna cover a little bit later.

51
00:03:40.471 --> 00:03:41.598
&gt;&gt; Nina Zakharenko: So in this case,

52
00:03:41.598 --> 00:03:46.520
1f6 is a dangling commit, and
will be slated for garbage collection.

