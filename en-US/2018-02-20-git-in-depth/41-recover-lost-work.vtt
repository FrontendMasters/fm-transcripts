WEBVTT

1
00:00:00.240 --> 00:00:03.030
&gt;&gt; Nina Zakharenko: How can we
possibly recover last work?

2
00:00:03.030 --> 00:00:07.550
Well, remember about original HEAD,
that I had mentioned before.

3
00:00:07.550 --> 00:00:12.490
That's the commit that HEAD was pointing
to before we did a reset or a merge.

4
00:00:12.490 --> 00:00:15.893
If things really get screwed up,
it might be time to check for

5
00:00:15.893 --> 00:00:17.509
copies of your repository.

6
00:00:17.509 --> 00:00:19.942
Maybe, if you look on GitHub,

7
00:00:19.942 --> 00:00:24.351
maybe one of your coworkers
has a copy that you can grab.

8
00:00:24.351 --> 00:00:28.340
How would we use original
head to undo a merge?

9
00:00:28.340 --> 00:00:34.340
In this case we could
do get result//merge,

10
00:00:34.340 --> 00:00:39.600
using the merge flag is
going uncommitted charges.

11
00:00:39.600 --> 00:00:44.820
So, if you added some things using
that flag won't blow them away.

12
00:00:46.630 --> 00:00:52.825
So by resetting, we're just
moving HEAD back, and that's it.

13
00:00:56.106 --> 00:00:58.778
&gt;&gt; Nina Zakharenko: If you end up with
one of these dangling commits, and

14
00:00:58.778 --> 00:01:00.280
you need to get them back.

15
00:01:00.280 --> 00:01:04.920
By default, you keep commits around for
maybe two or three weeks.

16
00:01:04.920 --> 00:01:08.440
If you need to go back in time and
find a commit that's no longer referenced,

17
00:01:08.440 --> 00:01:10.530
you can take a look in the rough log.

18
00:01:10.530 --> 00:01:13.285
The syntax of rough log
is a little different, so

19
00:01:13.285 --> 00:01:19.910
HEAD@{2} means the value of
head as it was two moves ago.

20
00:01:19.910 --> 00:01:24.242
If you're looking for
a dangling commit, you mess up a rebiz,

21
00:01:24.242 --> 00:01:28.903
you committed some changes on
a detached head using git reflog is how

22
00:01:28.903 --> 00:01:31.141
you're going to get them back.

