WEBVTT

1
00:00:00.120 --> 00:00:04.140
&gt;&gt; Nina Zakharenko: Going back to
amending, so as we saw earlier, using

2
00:00:04.140 --> 00:00:08.700
amend we can only kind of make changes
to the previous commit that we made.

3
00:00:08.700 --> 00:00:13.288
But this is a great shortcut I use
all the time that lets me amend any

4
00:00:13.288 --> 00:00:15.549
arbitrary commit using fixup.

5
00:00:17.604 --> 00:00:22.536
&gt;&gt; Nina Zakharenko: I tell git that the
current commit I want to make is a --fixup

6
00:00:22.536 --> 00:00:24.384
of a certain &lt;SHA&gt;.

7
00:00:24.384 --> 00:00:27.802
it's gonna create a new commit and
mark it as a fixup.

8
00:00:27.802 --> 00:00:33.465
And I can git rebase -i
with a --autosquash.

9
00:00:33.465 --> 00:00:37.924
That tells git that if it sees
a commit marked with a fixup,

10
00:00:37.924 --> 00:00:41.932
to just squash it automatically
with the right one.

11
00:00:41.932 --> 00:00:47.695
And when I git rebase -i,
I wanna make sure that I'm specifying

12
00:00:47.695 --> 00:00:53.474
the parent of the &lt;SHA&gt; I fixed up,
otherwise it won't work.

13
00:00:53.474 --> 00:00:56.050
And git's gonna just generate
the right things for you.

14
00:00:56.050 --> 00:00:57.056
You can save and quit.

15
00:00:57.056 --> 00:00:59.580
You can use this to edit
any commit in your history.

16
00:01:02.803 --> 00:01:06.130
&gt;&gt; Nina Zakharenko: So
here I wanna edit the middle commit.

17
00:01:07.180 --> 00:01:11.496
If I do commit --fixup,
we'll see here on my git one line,

18
00:01:11.496 --> 00:01:16.079
that the message,
that git created automatically is fixup!.

19
00:01:16.079 --> 00:01:19.348
That's an internal marker to git.

20
00:01:19.348 --> 00:01:21.489
That this commit is a fix up or

21
00:01:21.489 --> 00:01:26.139
an edit to this one down here
that has the same commit message.

22
00:01:29.330 --> 00:01:34.436
&gt;&gt; Nina Zakharenko: Now I could autosquash
using the ref of the parent commit and

23
00:01:34.436 --> 00:01:37.816
that's what my rebase will look like.

24
00:01:40.267 --> 00:01:43.797
&gt;&gt; Nina Zakharenko: So git's going to
automatically reorder the commits and

25
00:01:43.797 --> 00:01:46.525
it'll mark the commit with a fixup action.

26
00:01:46.525 --> 00:01:49.883
And there we go.

27
00:01:49.883 --> 00:01:54.443
Once I look at my log,
we'll see that the Add

28
00:01:54.443 --> 00:01:59.266
a blog post about Python
now has a new &lt;SHA&gt;.

29
00:01:59.266 --> 00:02:00.249
It's been modified.

30
00:02:03.566 --> 00:02:06.687
&gt;&gt; Nina Zakharenko: So a much
quicker way of, you don't have to do

31
00:02:06.687 --> 00:02:10.972
an interactive rebase,
if you just wanna modify one commit.

32
00:02:12.990 --> 00:02:19.078
&gt;&gt; Nina Zakharenko: I'm gonna
skip explaining rebase --exec.

33
00:02:19.078 --> 00:02:22.059
You can go back to the slide
if you need to, but

34
00:02:22.059 --> 00:02:26.782
it's a way to specify to get to run
a command after every rebase action.

35
00:02:26.782 --> 00:02:32.478
So as it's replaying commits, you can say
git, run this test after every commit.

36
00:02:32.478 --> 00:02:34.532
I want to make sure that my tests pass and

37
00:02:34.532 --> 00:02:37.100
that I'm not checking in
any breaking commits.

