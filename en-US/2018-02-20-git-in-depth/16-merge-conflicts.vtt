WEBVTT

1
00:00:00.210 --> 00:00:01.830
&gt;&gt; Nina Zakharenko: Merge conflicts.

2
00:00:01.830 --> 00:00:05.930
These happen when we try to merge but
our files have diverged,

3
00:00:05.930 --> 00:00:08.320
the changes are not compatible.

4
00:00:08.320 --> 00:00:11.170
Git's going to stop until
the conflicts are resolved.

5
00:00:13.101 --> 00:00:14.327
&gt;&gt; Nina Zakharenko: During the merge,

6
00:00:14.327 --> 00:00:18.694
git is going to try to merge in your
changes on the branch with various

7
00:00:18.694 --> 00:00:22.392
strategies.
&gt;&gt; Nina Zakharenko: And

8
00:00:22.392 --> 00:00:26.775
when that contact can't be automatically

9
00:00:26.775 --> 00:00:31.530
merged then you'll get
a conflict like this.

10
00:00:31.530 --> 00:00:36.085
You'll probably see this message lots of
times if you work on a branch that has

11
00:00:36.085 --> 00:00:39.870
lots of contributors or
lots of people making changes to the same

12
00:00:39.870 --> 00:00:43.790
files.
&gt;&gt; Nina Zakharenko: Now,

13
00:00:43.790 --> 00:00:46.390
git's gonna create a new file.

14
00:00:46.390 --> 00:00:51.082
It's gonna contain those conflicts,
and you can make edits,

15
00:00:51.082 --> 00:00:55.080
have the solution, and
then commit, and continue.

16
00:00:55.080 --> 00:00:59.970
Later in the course, we're going to cover
what is gonna happen when your merges

17
00:00:59.970 --> 00:01:03.490
go horribly, horribly wrong,
and how to fix that.

18
00:01:03.490 --> 00:01:07.100
But for now,
I wanted to show you a really cool tool.

19
00:01:08.120 --> 00:01:11.230
Git Rerere, which stands for

20
00:01:11.230 --> 00:01:16.670
Reuse Recorded Resolution is a really,
really helpful tool.

21
00:01:16.670 --> 00:01:23.430
What it does is when it's turned on, git's
gonna save how you resolved a conflict.

22
00:01:23.430 --> 00:01:26.850
And next conflict, it's just
gonna reuse that same resolution.

23
00:01:28.090 --> 00:01:31.620
It's really useful for
things like a long lived feature branch,

24
00:01:31.620 --> 00:01:35.370
like a refactor, or when you're rebasing.

25
00:01:35.370 --> 00:01:38.720
Has anyone tried a rebase, and
then every time you rebase,

26
00:01:38.720 --> 00:01:41.560
just merge conflicts keep
coming up over and over again?

27
00:01:42.830 --> 00:01:44.510
Yeah, big nod.

28
00:01:44.510 --> 00:01:45.700
So this is gonna save you.

29
00:01:46.920 --> 00:01:52.380
And it saved me recently when I
was working on a massive refactor.

30
00:01:52.380 --> 00:01:56.460
I work at Venmo and
even though it's a hot, cool new tool,

31
00:01:56.460 --> 00:02:00.790
the reality is the code base
is about eight years old now.

32
00:02:00.790 --> 00:02:04.490
So I was working on a big
refactor of our email system,

33
00:02:04.490 --> 00:02:09.310
and that email system is
used all over the code base.

34
00:02:09.310 --> 00:02:11.930
The refactor took a really long time.

35
00:02:11.930 --> 00:02:15.790
It was one of the earliest features,
it just was everywhere.

36
00:02:15.790 --> 00:02:17.410
And the problem was that

37
00:02:19.250 --> 00:02:23.130
new features that were being added
were also calling the email code.

38
00:02:23.130 --> 00:02:28.830
So as I was working, new conflicts would
be introduced every day or every few days.

39
00:02:28.830 --> 00:02:31.640
And I'd have to resolve those
merge conflicts every time I

40
00:02:31.640 --> 00:02:32.850
tried to pull down master.

41
00:02:34.050 --> 00:02:36.190
Using git rerere,

42
00:02:36.190 --> 00:02:41.400
I didn't have to make the same resolutions
in the same files over and over again.

43
00:02:41.400 --> 00:02:44.853
It was one and done, and
it saved me hours of work.

44
00:02:44.853 --> 00:02:50.640
So if you find yourself in this situation,
git rerere is truly awesome.

45
00:02:50.640 --> 00:02:52.340
Now, how do we use it?

46
00:02:54.400 --> 00:02:55.840
First, we have to turn it on.

47
00:02:57.100 --> 00:03:01.960
We have two options for turning it on.

48
00:03:01.960 --> 00:03:06.374
We can use git config and
then rerere.enabled, and

49
00:03:06.374 --> 00:03:09.430
you'll wanna pass in true or one.

50
00:03:09.430 --> 00:03:13.940
That will turn on git rerere
in just your current project.

51
00:03:13.940 --> 00:03:16.610
If you wanna turn it on for all projects,

52
00:03:16.610 --> 00:03:22.360
you're gonna want to use the --global
flag when calling git config.

53
00:03:25.760 --> 00:03:27.460
Now, let's see how it works.

54
00:03:27.460 --> 00:03:34.515
I've turned on rerere in my git config,

55
00:03:34.515 --> 00:03:40.748
and now I try to merge in my feature.

56
00:03:40.748 --> 00:03:48.680
I have a conflict, and I've solved
the conflict, and then added the file.

57
00:03:50.900 --> 00:03:54.100
Now, I've done my commit,
resolved the conflict.

58
00:03:54.100 --> 00:03:59.311
Git will tell you when you commit

59
00:03:59.311 --> 00:04:05.101
that it's recorded resolution for

60
00:04:05.101 --> 00:04:07.820
that conflict.

61
00:04:07.820 --> 00:04:11.200
So next time that same conflict comes up,
it'll be matched.

62
00:04:16.870 --> 00:04:19.160
So my feature wasn't ready.

63
00:04:19.160 --> 00:04:20.950
I undid the merge.

64
00:04:20.950 --> 00:04:26.460
When I try to merge again,
&gt;&gt; Nina Zakharenko: We'll

65
00:04:26.460 --> 00:04:31.588
see that,
&gt;&gt; Nina Zakharenko: Git

66
00:04:31.588 --> 00:04:36.710
has added the recorded resolution
back to our staging area.

67
00:04:36.710 --> 00:04:38.980
So it won't commit it for
you automatically.

68
00:04:38.980 --> 00:04:43.309
It'll stop and let you take a peek and
make sure that everything's

69
00:04:43.309 --> 00:04:47.847
correct.
&gt;&gt; Nina Zakharenko: But

70
00:04:47.847 --> 00:04:53.148
we'll see that in our message that
the resolution was applied automatically.

