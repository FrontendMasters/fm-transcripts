WEBVTT

1
00:00:00.080 --> 00:00:01.330
&gt;&gt; Nina Zakharenko: What is a remote?

2
00:00:01.330 --> 00:00:03.650
I've mentioned this word
a few times during class.

3
00:00:03.650 --> 00:00:06.310
A remote is a git repository
that is stored somewhere else.

4
00:00:06.310 --> 00:00:11.640
Could be on the web, on github, maybe
your company has a private git server.

5
00:00:11.640 --> 00:00:15.930
Origin is the default name that git gives
to this server that you cloned from.

6
00:00:15.930 --> 00:00:19.920
I'm sure you've seen origin lots of
times and had no idea what it meant.

7
00:00:19.920 --> 00:00:20.770
So there you go.

8
00:00:22.020 --> 00:00:23.981
When you clone a repository from a URL,

9
00:00:23.981 --> 00:00:28.270
you're gonna fetch that whole repository
and make a local copy in your .git folder.

10
00:00:29.840 --> 00:00:32.970
For these repositories you might
have different privileges.

11
00:00:32.970 --> 00:00:37.740
For example, you can read,
write from your own repository, but

12
00:00:37.740 --> 00:00:43.221
you can't just write to someone
else's repository without permission.

13
00:00:43.221 --> 00:00:49.570
So, someone else's repository as
a remote is probably rude only for you.

14
00:00:51.160 --> 00:00:54.481
Now, when we clone a repository,

15
00:00:54.481 --> 00:00:59.404
let's say we have
Lisa's GitHub in her computer,

16
00:00:59.404 --> 00:01:04.225
we make a copy called
a clone on the local machine.

17
00:01:04.225 --> 00:01:09.680
And origin is the default name that git
gives to the server that you cloned from.

18
00:01:09.680 --> 00:01:17.890
By default, any operations push pull fetch
they should they all work on origin.

19
00:01:19.420 --> 00:01:23.290
Unless you have your setup
configured differently.

20
00:01:23.290 --> 00:01:28.050
If we wanna see what remotes we have set
up it's easy you just do git remote-v.

21
00:01:28.050 --> 00:01:34.190
That will show you in most repositories
that you just freshly cloned off the web.

22
00:01:34.190 --> 00:01:36.440
You should just have an origin.

23
00:01:36.440 --> 00:01:38.991
In this case it's pointing
to Lisa's version of

24
00:01:38.991 --> 00:01:41.691
project A.
&gt;&gt; Nina Zakharenko: What if you clone

25
00:01:41.691 --> 00:01:43.460
someone else's repository?

26
00:01:43.460 --> 00:01:48.221
You guys all cloned my exercises,
advance git exercises repository,

27
00:01:48.221 --> 00:01:52.790
right?
&gt;&gt; Nina Zakharenko: What does that mean?

28
00:01:52.790 --> 00:01:59.290
Let's say Dan has a GitHub,
and he's hosting this project.

29
00:01:59.290 --> 00:02:04.110
If Lisa clones it down to her local
computer, she can pull down changes but

30
00:02:04.110 --> 00:02:04.990
she can't push them.

31
00:02:04.990 --> 00:02:06.780
She doesn't have permission to do so.

32
00:02:06.780 --> 00:02:07.754
She doesn't own the code.

