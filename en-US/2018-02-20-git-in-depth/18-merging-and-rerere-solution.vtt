WEBVTT

1
00:00:00.110 --> 00:00:05.430
&gt;&gt; Nina Zakharenko: Let's go through
exercise4 about Merging and ReReRe.

2
00:00:05.430 --> 00:00:10.970
At this point you should have the advanced
git exercises repository cloned locally.

3
00:00:10.970 --> 00:00:19.508
Now let's check out the exercise4 branch.
&gt;&gt; Nina Zakharenko: The first

4
00:00:19.508 --> 00:00:21.852
thing we wanna demonstrate
is a fast forward commit.

5
00:00:26.843 --> 00:00:28.980
&gt;&gt; Nina Zakharenko: If we take a look at

6
00:00:28.980 --> 00:00:35.698
our log, we'll see that
we're on the initial commit.

7
00:00:35.698 --> 00:00:40.629
We have exercise3, our feature branch and

8
00:00:40.629 --> 00:00:44.234
we have a new commit in that one.

9
00:00:44.234 --> 00:00:50.232
So if we try to merge it into exercise4,
let's try to do that with a regular

10
00:00:50.232 --> 00:00:57.961
merge.
&gt;&gt; Nina Zakharenko: And

11
00:00:57.961 --> 00:01:01.140
we'll see here that Git
did a fast-forward commit.

12
00:01:03.220 --> 00:01:05.763
If we look at our history again,

13
00:01:05.763 --> 00:01:12.254
we'll see that,
&gt;&gt; Nina Zakharenko: We'll see

14
00:01:12.254 --> 00:01:18.640
that the branch pointer has been updated.
&gt;&gt; Nina Zakharenko: But

15
00:01:18.640 --> 00:01:26.103
there's nothing saying that this commit
was associated with a different exercise.

16
00:01:26.103 --> 00:01:28.151
In this case exercise3.

17
00:01:28.151 --> 00:01:31.120
And we're gonna want a little
bit more information.

18
00:01:33.750 --> 00:01:38.591
Remember that fast forward
commits happen when the branches,

19
00:01:38.591 --> 00:01:43.570
the base branch, the one, that you branch
from, doesn't have any additional commits.

20
00:01:43.570 --> 00:01:46.080
It hasn't changed since
you branched from it.

21
00:01:46.080 --> 00:01:47.350
And that history is linear.

22
00:01:48.790 --> 00:01:52.654
Let's try a non-fast forward
commit to show the difference.

23
00:02:02.650 --> 00:02:03.794
&gt;&gt; Nina Zakharenko: I'm going to

24
00:02:03.794 --> 00:02:06.602
reset to the previous head, and

25
00:02:06.602 --> 00:02:12.330
we're gonna go through git reset
in detail in a few in a few hours.

26
00:02:12.330 --> 00:02:16.280
I'm sorry, in a few sections,
not in a few hours.

27
00:02:16.280 --> 00:02:18.950
I'm not trapping you guys here forever,
I promise.

28
00:02:19.990 --> 00:02:25.020
What we did here is reset to
the commit before our merge.

29
00:02:26.790 --> 00:02:29.230
Now let's try to open, I'm sorry,

30
00:02:29.230 --> 00:02:35.410
let's try to merge the commit
with the no fast forward flag.

31
00:02:35.410 --> 00:02:38.270
So before we git merge exercise3,

32
00:02:38.270 --> 00:02:41.350
and now we're gonna try it
with the no fast forward flag.

33
00:02:41.350 --> 00:02:44.840
This is gonna open
an editor in your terminal.

34
00:02:44.840 --> 00:02:48.520
If you're having problems with your
editor, go back to the beginning.

35
00:02:49.780 --> 00:02:53.140
You'll see a section for prerequisites.

36
00:02:53.140 --> 00:02:55.250
It's very important to set up your editor.

37
00:02:55.250 --> 00:02:57.540
It will make working
with Git a lot easier.

38
00:03:00.490 --> 00:03:05.410
This is the editor that I use, Emacs.

39
00:03:05.410 --> 00:03:13.171
And it opened commit saying, this is the
merge of branch exercise3 into exercise4.

40
00:03:20.580 --> 00:03:26.010
And we'll see that the merge was
made by the recursive strategy

41
00:03:26.010 --> 00:03:29.180
instead of the fast forward commit.

42
00:03:33.110 --> 00:03:35.920
I'm sorry,
instead of the fast forward merge.

43
00:03:35.920 --> 00:03:40.880
And now when I look at my log again,
I'll see this new merge commit here.

44
00:03:48.720 --> 00:03:56.200
And I can make that even clearer
by using the --graph flag for log.

45
00:03:58.070 --> 00:04:04.050
We'll see here this was the commit
made on a different branch,

46
00:04:04.050 --> 00:04:08.200
and here it is being merged back.
&gt;&gt; Speaker 2: What's

47
00:04:08.200 --> 00:04:10.650
the extent of the auto fast forwarding?

48
00:04:10.650 --> 00:04:15.370
Like, if you have a base and you branch
it, make a commit and branch that, and

49
00:04:15.370 --> 00:04:20.310
make another commit, so you're kind
of say a branch away from base.

50
00:04:20.310 --> 00:04:22.260
And nothing's been done.

51
00:04:22.260 --> 00:04:26.890
So if you were to merge that into base,
would it

52
00:04:26.890 --> 00:04:30.820
automatically fast forward kinda across?
&gt;&gt; Nina Zakharenko: If you were to merge

53
00:04:30.820 --> 00:04:33.090
the very last branch.
&gt;&gt; Speaker 2: Right.

54
00:04:34.100 --> 00:04:35.020
&gt;&gt; Nina Zakharenko: You'll have to verify

55
00:04:35.020 --> 00:04:37.410
this, I've never done that.

56
00:04:37.410 --> 00:04:38.790
But it should just work.

57
00:04:38.790 --> 00:04:43.580
Yeah, Git should know about the history
from that very first branch.

58
00:04:47.000 --> 00:04:50.310
So this is an example of
a no fast forward commit.

59
00:04:50.310 --> 00:04:51.810
Now let's set up for a conflict.

60
00:04:54.230 --> 00:04:56.075
We're gonna check out another branch.

61
00:04:56.075 --> 00:05:05.230
Whoops, we're on exercise4.

62
00:05:05.230 --> 00:05:09.960
We're going to Git check out
a new branch called mundo.

63
00:05:09.960 --> 00:05:13.560
For those who don't know,
mundo is world in Spanish.

64
00:05:13.560 --> 00:05:15.890
So we're gonna try a different
version of our Hello world.

65
00:05:17.100 --> 00:05:22.578
So we're going to edit our text file and

66
00:05:22.578 --> 00:05:27.558
I'll just use echo for this example

67
00:05:27.558 --> 00:05:36.268
here.
&gt;&gt; Nina Zakharenko: So

68
00:05:36.268 --> 00:05:42.984
now if we look at our hello.txt,
we'll see it says Hello Mundo!

69
00:05:42.984 --> 00:05:47.540
If we do our git status,
we'll see that hello was modified.

70
00:05:48.990 --> 00:05:50.835
And let's add it and do a commit.

71
00:06:03.603 --> 00:06:06.390
&gt;&gt; Nina Zakharenko: So
back on our exercise4 branch.

72
00:06:06.390 --> 00:06:07.870
The one we were working on before.

73
00:06:09.300 --> 00:06:12.060
And quick shortcut.

74
00:06:12.060 --> 00:06:16.110
For those of you who switch branches lots,
if you wanna switch to the previous

75
00:06:16.110 --> 00:06:21.572
branch that you were just on, you can
do that with the dash as a shortcut.

76
00:06:21.572 --> 00:06:23.695
Since exercise4 was
the branch I was just on,

77
00:06:23.695 --> 00:06:28.598
I'm gonna check it out.
&gt;&gt; Nina Zakharenko: And

78
00:06:28.598 --> 00:06:31.290
I'm gonna edit my hello.txt again.

79
00:06:34.850 --> 00:06:36.530
So now it's gonna say, Hello World.

80
00:06:39.210 --> 00:06:48.366
And I'm gonna commit that.
&gt;&gt; Nina Zakharenko: Actually,

81
00:06:48.366 --> 00:06:56.175
I want it to say, Hola World.
&gt;&gt; Nina Zakharenko: And

82
00:06:56.175 --> 00:07:04.785
I'm gonna commit that
&gt;&gt; Nina Zakharenko: Great,

83
00:07:04.785 --> 00:07:09.060
so let's check out how git rerere
can help us with merge conflicts.

84
00:07:10.710 --> 00:07:14.430
We're going to turn it on.

85
00:07:14.430 --> 00:07:18.690
In this case it's git
config rerere.enabled true.

86
00:07:22.840 --> 00:07:24.830
If I want to turn it on for all projects,

87
00:07:24.830 --> 00:07:27.392
remember that I can pass
in the global flag here.

88
00:07:27.392 --> 00:07:33.280
I'm gonna try mundo and
I'm gonna get a merge conflict.

89
00:07:36.260 --> 00:07:37.750
But let's notice this line.

90
00:07:37.750 --> 00:07:42.040
It says recorded preimage for hello.txt.

91
00:07:42.040 --> 00:07:46.634
We can do git rerere diff
to see what's going on.

92
00:07:46.634 --> 00:07:49.390
And that shows us our merge conflict.

93
00:07:49.390 --> 00:07:54.030
In one version we have Hello Mundo,
in the other version, we have Hello World.

94
00:07:55.340 --> 00:07:57.872
And this shows us what
the current state is of

95
00:07:57.872 --> 00:08:02.394
the resolution
&gt;&gt; Nina Zakharenko: Let's

96
00:08:02.394 --> 00:08:03.911
resolve that conflict.

97
00:08:16.995 --> 00:08:19.895
&gt;&gt; Nina Zakharenko: I wanna change it so

98
00:08:19.895 --> 00:08:24.070
that it says, Hola Mundo.

99
00:08:31.063 --> 00:08:31.706
&gt;&gt; Nina Zakharenko: Great, so

100
00:08:31.706 --> 00:08:35.140
now if I look at my text file,
it has the right thing in it.

101
00:08:36.720 --> 00:08:42.087
If I do git rerere diff
&gt;&gt; Nina Zakharenko: It'll

102
00:08:42.087 --> 00:08:46.396
show me,
&gt;&gt; Nina Zakharenko: What the recorded

103
00:08:46.396 --> 00:08:48.580
resolution would be right
here at the bottom.

104
00:08:49.800 --> 00:08:53.762
Now let's git add that,
&gt;&gt; Nina Zakharenko: And commit it.

105
00:09:04.804 --> 00:09:05.605
&gt;&gt; Nina Zakharenko: Cool, and

106
00:09:05.605 --> 00:09:11.950
now we'll see this message right here,
Recorded resolution for 'hello.txt'.

107
00:09:11.950 --> 00:09:15.900
Let's back up and merge again and
we'll see what ReReRe does for us.

108
00:09:17.070 --> 00:09:21.419
We're going to git reset
back to the previous commit.

109
00:09:21.419 --> 00:09:28.010
And we're gonna try to
merge in window again.

110
00:09:29.940 --> 00:09:32.383
We'll see that there is a conflict.

111
00:09:32.383 --> 00:09:39.900
But here Git's telling us it used ReReRe
to resolve, using a previous resolution.

112
00:09:40.900 --> 00:09:46.020
If we look at the git status,

113
00:09:46.020 --> 00:09:51.300
we'll see that hello.txt is modified.

114
00:09:51.300 --> 00:09:53.640
But if we look at the file,

115
00:09:53.640 --> 00:09:57.170
we'll see that it used our
previously recorded resolution.

116
00:09:58.560 --> 00:10:01.895
All we need to do is stage hello.txt and
commit it again.

117
00:10:01.895 --> 00:10:07.244
So ReReRe is powerful.

118
00:10:07.244 --> 00:10:11.841
It doesn't do anything for you,
you still get to review the purposed,

119
00:10:11.841 --> 00:10:16.515
the recorded resolution before you
commit it but it will save you tons and

120
00:10:16.515 --> 00:10:19.750
tons of time,
one of my absolute favorite tools.

