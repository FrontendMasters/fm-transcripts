WEBVTT

1
00:00:00.190 --> 00:00:02.840
&gt;&gt; Nina Zakharenko: Here we
have the most common workflow.

2
00:00:02.840 --> 00:00:04.320
Triangular workflow.

3
00:00:04.320 --> 00:00:06.930
Common when you are contributing
to open source projects.

4
00:00:06.930 --> 00:00:11.103
You fetch from upstream to keep
your local repo up to date.

5
00:00:11.103 --> 00:00:15.242
You push changes to your fork,
aka the origin, and

6
00:00:15.242 --> 00:00:20.153
then you put post changes to
the upstream repository via pull

7
00:00:20.153 --> 00:00:25.818
request.
&gt;&gt; Nina Zakharenko: Does

8
00:00:25.818 --> 00:00:30.070
anyone have any questions
about the triangular workflow.

9
00:00:30.070 --> 00:00:31.530
Does this makes sense?

10
00:00:31.530 --> 00:00:36.284
This is crucial to understanding
how the usual GitHub

11
00:00:36.284 --> 00:00:41.545
workflow works.
&gt;&gt; Nina Zakharenko: What's

12
00:00:41.545 --> 00:00:42.770
a tracking branch?

13
00:00:42.770 --> 00:00:46.620
Sometimes you'll see this
word when you're using Git.

14
00:00:46.620 --> 00:00:49.370
To track a branch,
you wanna tie it to an upstream branch.

15
00:00:50.500 --> 00:00:54.000
As a bonus, you can push and
pull with no arguments.

16
00:00:54.000 --> 00:00:58.960
If you wanna check out a remote branch
with tracking you can use git checkout -t.

17
00:00:58.960 --> 00:01:03.630
You specify which remote
you want to track from, and

18
00:01:03.630 --> 00:01:07.960
which branch you're looking to check out.

19
00:01:07.960 --> 00:01:13.900
If you're pushing a branch to remote for
the first time, you can git push -u.

20
00:01:13.900 --> 00:01:18.053
And that's going to set up tracking and
push that branch back up to

21
00:01:18.053 --> 00:01:23.473
the remote.
&gt;&gt; Nina Zakharenko: By default,

22
00:01:23.473 --> 00:01:27.221
Git doesn't really show you any
interesting information about what

23
00:01:27.221 --> 00:01:29.299
upstream branches we're tracking.

24
00:01:29.299 --> 00:01:34.258
So a command that I find very,
very useful is git branch -vv.

25
00:01:34.258 --> 00:01:38.501
When you run it,
it will show you which upstream or

26
00:01:38.501 --> 00:01:43.160
remote branch you're tracking
on your local branch.

27
00:01:44.160 --> 00:01:46.450
Very useful information.

28
00:01:46.450 --> 00:01:50.150
Another thing is, it will show you how
many commits you are ahead, or behind.

29
00:01:51.870 --> 00:01:57.949
In this case I made a fork a long time
ago, I never fetched from upstream,

30
00:01:57.949 --> 00:02:01.935
and so
my fork is 124 commits behind master,

31
00:02:01.935 --> 00:02:08.186
very sad.
&gt;&gt; Nina Zakharenko: If I want to

32
00:02:08.186 --> 00:02:15.430
get information from the server, without
merging or pulling, I can use git fetch.

33
00:02:15.430 --> 00:02:19.710
It's important for keeping your local
repository up to date with a remote, and

34
00:02:19.710 --> 00:02:22.340
it pulls down all the changes
that happen on the server.

35
00:02:22.340 --> 00:02:25.860
But it's not going to change your
local repository, so don't worry.

36
00:02:29.050 --> 00:02:34.360
If I pull, it's gonna do fetch and
then a merge.

37
00:02:34.360 --> 00:02:39.500
So git pull under the hood is just
doing a fetch first and then a merge.

38
00:02:39.500 --> 00:02:42.970
It's gonna pull down all those changes
from the remote repository to your local

39
00:02:42.970 --> 00:02:46.030
repository, merge them
with the local branch.

40
00:02:46.030 --> 00:02:49.500
If any changes happen upstream,
Git will create a merge commit.

41
00:02:49.500 --> 00:02:51.900
Otherwise, it's just
going to fast forward.

42
00:02:51.900 --> 00:02:56.310
When I push, I'm sending my changes
up to the remote repository.

43
00:02:56.310 --> 00:03:00.430
Git will only let me push if it's
not going to cause a conflict.

44
00:03:00.430 --> 00:03:04.670
So, if any changes happen
to the remote repository, I

45
00:03:06.190 --> 00:03:10.790
will have to pull first, update my local
copy and then I'll be able to push.

46
00:03:13.770 --> 00:03:16.490
Git pull --rebase is very helpful.

47
00:03:16.490 --> 00:03:18.484
It's a git pull with a rebase built in.

48
00:03:18.484 --> 00:03:19.510
It's gonna fetch,

49
00:03:19.510 --> 00:03:23.140
update your local branch to copy
the upstream branch that you specified.

50
00:03:23.140 --> 00:03:27.310
And it's gonna replay any commits
that you made by a rebase.

51
00:03:27.310 --> 00:03:30.622
When you open a pull request using
the strategy, there aren't gonna be any

52
00:03:30.622 --> 00:03:34.276
unsightly merge commits.
&gt;&gt; Nina Zakharenko: So

53
00:03:34.276 --> 00:03:38.410
a quick example,
a Git Pull versus a Git Pull Rebase.

54
00:03:38.410 --> 00:03:44.059
If we have this sort of setup here,
we made a feature branch.

55
00:03:46.230 --> 00:03:49.980
And we branched off from one commit
behind where master is at now.

56
00:03:51.030 --> 00:03:53.844
If we just git pull, origin master,

57
00:03:53.844 --> 00:03:59.440
we're gonna have a merged commit,
that extra purple merge commit.

58
00:03:59.440 --> 00:04:06.030
If we wanna keep our history cleaner,
we can do git pull origin/master --rebase.

59
00:04:06.030 --> 00:04:10.424
And now that new commit on master, is
sandwiched between the changes we had on

60
00:04:10.424 --> 00:04:17.472
master and our feature branch.
&gt;&gt; Nina Zakharenko: Don't use git

61
00:04:17.472 --> 00:04:23.930
pull --rebase on a branch that has local
merge commits, it doesn't work very well.

62
00:04:23.930 --> 00:04:28.470
It works best in this kind of setup

63
00:04:28.470 --> 00:04:31.830
where you are just kind of branching
off master or working on a feature.

64
00:04:34.260 --> 00:04:38.350
I use this all the time and
just apply my commits neatly on top.

65
00:04:38.350 --> 00:04:39.690
Quick note about tags.

66
00:04:39.690 --> 00:04:43.370
Git doesn't automatically push
local tags to a remote repository.

67
00:04:43.370 --> 00:04:45.670
You have to manually merge them.

68
00:04:45.670 --> 00:04:52.590
Either by saying git push with
a tagname or git push --tags.

69
00:04:52.590 --> 00:04:56.830
Some guidelines on contributing to open
source projects with pull request.

70
00:04:56.830 --> 00:05:01.020
Before opening a pull request,
keep your commit history clean and neat.

71
00:05:01.020 --> 00:05:03.130
You should rebase if you need to.

72
00:05:03.130 --> 00:05:05.450
Run any tests that the project might have.

73
00:05:05.450 --> 00:05:06.849
Pull in upstream changes.

74
00:05:07.910 --> 00:05:11.730
In this case, preferably via
rebase to avoid any merge commits.

75
00:05:11.730 --> 00:05:16.900
Check for a file called contributing.md or
.txt in the project route.

76
00:05:16.900 --> 00:05:19.930
That's going to be the guidelines for
how to contribute to this project.

77
00:05:21.200 --> 00:05:23.230
After you open a pull request,

78
00:05:23.230 --> 00:05:27.080
explain your changes very thoroughly
in the pull request body.

79
00:05:27.080 --> 00:05:31.310
You should link to any open issues,
any bugs that you might be fixing.

80
00:05:31.310 --> 00:05:32.567
And check back frequently for

81
00:05:32.567 --> 00:05:36.594
comments from the maintainers.
&gt;&gt; Nina Zakharenko: Advice,

82
00:05:36.594 --> 00:05:41.520
I always encourage developers to work
on their own forks of a repository.

83
00:05:42.640 --> 00:05:45.480
Even if you have push access to,

84
00:05:46.540 --> 00:05:50.710
let's say you have a work project and
you have push access to it.

85
00:05:50.710 --> 00:05:53.820
Instead of pushing directly to it,
just make a fork if you can.

86
00:05:53.820 --> 00:05:57.110
You're a lot less likely to
make mistakes if you're not

87
00:05:57.110 --> 00:05:59.620
pushing changes to the source of truth.

88
00:05:59.620 --> 00:06:02.800
You can always rebase and
force push freely to your own origin,

89
00:06:02.800 --> 00:06:05.380
your own fork,
as long as no one else is cloning your

90
00:06:05.380 --> 00:06:08.106
branch.
&gt;&gt; Nina Zakharenko: Now,

91
00:06:08.106 --> 00:06:11.172
rule of thumb when you're proposing or
pushing,

92
00:06:11.172 --> 00:06:14.970
merging changes back to remote,
try to rebase your commits.

93
00:06:17.480 --> 00:06:21.020
Merge those feature branches
back to the origin.

94
00:06:21.020 --> 00:06:24.040
So, your local history has been rebased,
but

95
00:06:24.040 --> 00:06:26.460
there's a clear merge commit in master.

96
00:06:28.460 --> 00:06:30.730
These were the features
that I was working on.

97
00:06:32.120 --> 00:06:40.240
When a pull request is accepted, the owner
of the repository has a few options.

98
00:06:40.240 --> 00:06:44.660
You can squash, you can merge, rebase.

99
00:06:44.660 --> 00:06:48.160
And if you squash or rebase,
you'll lose the context.

100
00:06:48.160 --> 00:06:49.750
It's harder to debug.

101
00:06:49.750 --> 00:06:53.807
I much prefer to merge when
accepting a pull request.

