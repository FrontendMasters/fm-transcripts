WEBVTT

1
00:00:00.140 --> 00:00:05.800
&gt;&gt; Nina: There's one more place where it
git stores code, that's through git stash.

2
00:00:05.800 --> 00:00:09.880
The git stash is a way to
save uncommitted work.

3
00:00:11.080 --> 00:00:15.900
The stash is pretty safe from
most disruptive git operations,

4
00:00:15.900 --> 00:00:18.760
and it's handy for so many things.

5
00:00:18.760 --> 00:00:22.669
For example, switching between branches
while you're in the middle of work.

6
00:00:24.180 --> 00:00:28.085
If you're using operations
that can delete or

7
00:00:28.085 --> 00:00:32.790
overwrite your changes like git reset or
git checkout,

8
00:00:32.790 --> 00:00:37.215
that might also be a good
time to stage your changes.

9
00:00:37.215 --> 00:00:43.300
And I'm gonna talk about further
destructive operations later in the class.

10
00:00:43.300 --> 00:00:46.760
So, we'll really deep
dive into that section.

11
00:00:48.480 --> 00:00:52.200
Now, git stash, basic usage.

12
00:00:52.200 --> 00:00:56.600
I'm sure that you're
familiar with the first two,

13
00:00:56.600 --> 00:01:00.549
git stash, stash and git stash list,
show what's in your stash.

14
00:01:01.590 --> 00:01:07.940
Now, when you git stash list,
you will see a bunch of

15
00:01:07.940 --> 00:01:14.406
references that kind of look like this,
stash@{0}.

16
00:01:14.406 --> 00:01:19.530
You can actually refer
to that as a reference.

17
00:01:19.530 --> 00:01:23.038
So, if I wanted to show
the contents of my stash,

18
00:01:23.038 --> 00:01:26.389
I could do git stash
show with that reference.

19
00:01:26.389 --> 00:01:30.789
If I wanted to apply my last stash,
git stash apply,

20
00:01:30.789 --> 00:01:35.789
but I can also apply any stash,
not just the last one by using

21
00:01:35.789 --> 00:01:40.588
that reference.
&gt;&gt; Nina: It's

22
00:01:40.588 --> 00:01:44.200
really useful when you are working with
a stash older than just the last one.

23
00:01:47.100 --> 00:01:52.630
Now, this is a feature
that is really great.

24
00:01:53.770 --> 00:02:00.137
By default, git only stashes changes and
files that are already tracked.

25
00:02:00.137 --> 00:02:06.104
That means that files that are either in
the repository or in the staging area.

26
00:02:06.104 --> 00:02:10.845
I kind of find this really inconvenient
cuz I may have made some new files,

27
00:02:10.845 --> 00:02:13.291
I don't want to get add them just yet,

28
00:02:13.291 --> 00:02:16.076
I need to switch to a new
branch to a bug fix.

29
00:02:16.076 --> 00:02:22.440
So I git stash, and the new file that
I created is still in my working area,

30
00:02:22.440 --> 00:02:24.240
it's not associated with the stash.

31
00:02:24.240 --> 00:02:27.070
I come back to my work,
I might have moved it.

32
00:02:27.070 --> 00:02:31.960
I might have accidentally committed
that file to my critical bug fix,

33
00:02:31.960 --> 00:02:34.410
my working area is dirty.

34
00:02:34.410 --> 00:02:36.220
So, I find that really inconvenient.

35
00:02:37.780 --> 00:02:42.400
You can include untracked
files with stashed content,

36
00:02:42.400 --> 00:02:47.310
by using the --include-untracked flag.

37
00:02:47.310 --> 00:02:51.080
So, git stash --include-untracked.

38
00:02:51.080 --> 00:02:55.350
The next command used with caution,
it'll stash all your files,

39
00:02:55.350 --> 00:02:57.890
even files present in your git ignore.

40
00:02:57.890 --> 00:03:03.850
So, if you're ignoring large binary
files or something like that,

41
00:03:03.850 --> 00:03:06.849
git stash --all will grab them all.
&gt;&gt; Speaker 2: So

42
00:03:06.849 --> 00:03:11.325
then say you applied a stash
that had untracked files in it.

43
00:03:11.325 --> 00:03:12.955
Once you applied it,
are they still untracked,

44
00:03:12.955 --> 00:03:13.683
they're just back?

45
00:03:13.683 --> 00:03:14.595
&gt;&gt; Nina: Yes.
&gt;&gt; Speaker 2: Okay.

46
00:03:14.595 --> 00:03:15.660
&gt;&gt; Nina: They're still untracked.

47
00:03:19.270 --> 00:03:24.031
Yeah, this is one of my most useful,
most used commands, and

48
00:03:24.031 --> 00:03:28.243
for some reason I find that
not a lot of people know about

49
00:03:28.243 --> 00:03:34.563
it.
&gt;&gt; Nina: Now,

50
00:03:34.563 --> 00:03:36.989
some more advanced stashing operations.

51
00:03:38.050 --> 00:03:41.670
You can name your stash for
easy references,

52
00:03:41.670 --> 00:03:45.980
if you just get stash it usually,
all right,

53
00:03:45.980 --> 00:03:50.490
just takes the I think
the message of the last commit.

54
00:03:50.490 --> 00:03:54.862
It's not relevant it's not useful
when you go back to apply your stash

55
00:03:54.862 --> 00:03:56.874
you're like what is this even?

56
00:03:56.874 --> 00:04:00.851
So, you can name your stashes for

57
00:04:00.851 --> 00:04:06.683
easy reference with git stash save and
the name.

58
00:04:06.683 --> 00:04:12.572
You can also start a new
branch from a stash

59
00:04:12.572 --> 00:04:20.555
by saying git stash branch
&gt;&gt; Nina: And,

60
00:04:23.057 --> 00:04:24.469
&gt;&gt; Nina: Sorry, that should be,

61
00:04:27.133 --> 00:04:29.309
&gt;&gt; Nina: Optional branch name,

62
00:04:29.309 --> 00:04:32.799
not optional stash name, I believe.

63
00:04:32.799 --> 00:04:38.619
I'll have to double-check that.
&gt;&gt; Nina: I'll

64
00:04:38.619 --> 00:04:40.350
get back to that in a few minutes.

65
00:04:41.590 --> 00:04:44.010
Another really useful
thing that we can do,

66
00:04:45.210 --> 00:04:48.690
is grabbing a single file from the stash.

67
00:04:48.690 --> 00:04:50.690
Maybe you're working on something,

68
00:04:50.690 --> 00:04:55.230
you wanna check it out, you don't
wanna apply the whole stash again.

69
00:04:56.500 --> 00:05:00.790
You can do with git checkout
stash name -- filename.

70
00:05:02.860 --> 00:05:08.210
But note, if that you have changes to
that same file in your working area or

71
00:05:08.210 --> 00:05:10.090
your staging area,

72
00:05:10.090 --> 00:05:15.680
running this command will overwrite
it from the copy that's in the stash.

73
00:05:15.680 --> 00:05:22.107
So, use with caution.
&gt;&gt; Nina: A little

74
00:05:22.107 --> 00:05:23.990
bit more about advanced stashing.

75
00:05:25.080 --> 00:05:27.970
I find it really useful
to clean the stash.

76
00:05:27.970 --> 00:05:32.580
Sometimes when I'm working
on a long running project,

77
00:05:32.580 --> 00:05:35.434
my stash is like 40 things long.

78
00:05:35.434 --> 00:05:37.100
Contains things from months ago.

79
00:05:37.100 --> 00:05:39.475
I'm like, what is this stuff?

80
00:05:39.475 --> 00:05:40.913
I don't need it.

81
00:05:40.913 --> 00:05:47.281
Some things that we can do to keep our
stash cleaner, we can use git stash pop.

82
00:05:47.281 --> 00:05:51.041
And that's gonna remove the last stash and
apply those changes,

83
00:05:51.041 --> 00:05:53.770
unless there's a merge conflict.

84
00:05:53.770 --> 00:05:56.518
If a merge conflict
occurs when unstashing,

85
00:05:56.518 --> 00:06:01.449
git is gonna keep that stash.
&gt;&gt; Nina: We

86
00:06:01.449 --> 00:06:04.940
can also git stash drop
to remove the last stash.

87
00:06:04.940 --> 00:06:06.590
So if we git stash apply,

88
00:06:06.590 --> 00:06:09.750
everything looks good,
we can follow up with a git stash drop.

89
00:06:11.140 --> 00:06:17.800
We can also parse a stash reference to get
stash drop, or we can remove all stashes

90
00:06:17.800 --> 00:06:22.360
with get stash clear, if we know we don't
need them and we're not gonna use them.

91
00:06:26.280 --> 00:06:31.786
If we want to look in our stash,
we can do that with two operations.

92
00:06:31.786 --> 00:06:35.727
Git show,

93
00:06:35.727 --> 00:06:41.090
given a stash reference,
will show the files

94
00:06:41.090 --> 00:06:45.720
that were in the stash, and you can get
that reference with git stash list.

95
00:06:52.120 --> 00:06:57.076
So, I'll keep those pretty brief
considering that most of you are already

96
00:06:57.076 --> 00:06:59.290
pretty familiar with stashing.

97
00:06:59.290 --> 00:07:05.129
The two advanced tips that I use most in
my daily work flow is like I said before,

98
00:07:05.129 --> 00:07:08.595
keeping my untracked
files along with stash.

99
00:07:08.595 --> 00:07:12.936
I don't have to mix my work
in progress changes with my

100
00:07:12.936 --> 00:07:15.641
staging changes when stashing.

101
00:07:15.641 --> 00:07:19.594
I also tend to use naming my stashes.

102
00:07:19.594 --> 00:07:22.436
Helps me keep track what I was working on,

103
00:07:22.436 --> 00:07:27.567
what I was doing when I get back to that
stash, it provides a lot of context.

104
00:07:27.567 --> 00:07:34.059
There is one more type of stashing that
occasionally use it's kind of advanced so

105
00:07:34.059 --> 00:07:39.497
it's not the side but I will mention it,
just like you can git add -p

106
00:07:39.497 --> 00:07:44.572
to add parts of files to your stage,
you can also get stash-p.

107
00:07:44.572 --> 00:07:47.392
And that will let you selectively stash

108
00:07:47.392 --> 00:07:53.649
changes.
&gt;&gt; Speaker 2: I

109
00:07:53.649 --> 00:07:58.132
noticed in your stash list on another
slide that you had some of the names of

110
00:07:58.132 --> 00:08:01.639
the branches they came from in there.
&gt;&gt; Nina: Yes.

111
00:08:01.639 --> 00:08:02.821
&gt;&gt; Speaker 2: Do you find it hard with

112
00:08:02.821 --> 00:08:04.446
stashes to keep track of that?

113
00:08:04.446 --> 00:08:08.155
Cuz you don't know which
branch it came from right?

114
00:08:08.155 --> 00:08:10.386
Unless you write it in
the name of the stash?

115
00:08:10.386 --> 00:08:11.826
&gt;&gt; Nina: It should say.

116
00:08:11.826 --> 00:08:12.931
&gt;&gt; Speaker 2: It puts it in there?

117
00:08:12.931 --> 00:08:14.000
&gt;&gt; Nina: I'm pretty sure, yeah.

