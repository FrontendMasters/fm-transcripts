WEBVTT

1
00:00:00.190 --> 00:00:03.504
&gt;&gt; Sarah Drasner: Performance,
not all things are created equal.

2
00:00:03.504 --> 00:00:07.033
You shouldn't be animating with margin,
left, top,

3
00:00:07.033 --> 00:00:11.330
things like that because they
cause repaints in the browser.

4
00:00:11.330 --> 00:00:15.750
Transforms are really what you
should be using to animate and

5
00:00:15.750 --> 00:00:21.402
change positions for SVG, but not just
SVG, everything, divs, everything.

6
00:00:22.490 --> 00:00:25.490
You should also try to hardware
accelerate where possible.

7
00:00:25.490 --> 00:00:28.868
So here is a way to hardware
accelerate elements.

8
00:00:28.868 --> 00:00:33.273
You can do what we call the null
transform hack, null z transform hack.

9
00:00:33.273 --> 00:00:39.482
So transform: translateZ 0; back-face
visibility: hidden Perspective 1000px.

10
00:00:39.482 --> 00:00:42.364
That will hardware accelerate
that element in the browser.

11
00:00:42.364 --> 00:00:46.370
If you wanna read more about those you
can check out these two resources.

12
00:00:46.370 --> 00:00:48.820
I wrote one of them and
Paul Louis wrote the other.

13
00:00:49.920 --> 00:00:53.330
So if we move one thing
with transforms and

14
00:00:53.330 --> 00:00:56.490
one thing without,
if we look at this in the browser,

15
00:00:57.660 --> 00:01:02.960
first you can kind of see one of them
jittering across and one of them not.

16
00:01:02.960 --> 00:01:08.080
And if we go over here and
we go More Tools, and

17
00:01:08.080 --> 00:01:14.010
we go Rendering, we bring this up and
we say Paint Flashing.

18
00:01:14.010 --> 00:01:17.860
You can notice that one of them
has a little green rectangle and

19
00:01:17.860 --> 00:01:19.130
the other one doesn't.

20
00:01:19.130 --> 00:01:22.360
This one is not hardware accelerated,
and this one is.

21
00:01:22.360 --> 00:01:24.870
So anything that's not
hardware accelerated, it,

22
00:01:24.870 --> 00:01:28.400
once you to turn on that paint flashing,
will start alerting you.

23
00:01:30.420 --> 00:01:34.470
Chrome does not properly hardware
accelerate a lot of SVG Dom nodes, so

24
00:01:34.470 --> 00:01:38.140
don't be too scared if you see that.

25
00:01:38.140 --> 00:01:42.140
It is hardware accelerated in Firefox,
though, so you shouldn't pull

26
00:01:42.140 --> 00:01:46.060
those things off, and again I'm trying
get them to hardware accelerate that.

27
00:01:46.060 --> 00:01:48.410
So maybe some day,
you'll write this pen, and

28
00:01:48.410 --> 00:01:50.160
all of a sudden it will
be hardware accelerated.

29
00:01:50.160 --> 00:01:52.700
So keep doing those things.

30
00:01:52.700 --> 00:01:56.760
But also the nice thing about
GreenSock is they already

31
00:01:56.760 --> 00:01:59.330
have that hardware acceleration for
you under the hood.

32
00:01:59.330 --> 00:02:01.985
They're gonna assume if
you're using GreenSock,

33
00:02:01.985 --> 00:02:03.680
you probably want all that stuff.

34
00:02:03.680 --> 00:02:10.368
And you can unset that with a flag, but
I've never really needed to unset that.

35
00:02:10.368 --> 00:02:12.875
If you wanna read more
about all of these things,

36
00:02:12.875 --> 00:02:17.410
there's also a case study about Netflix,
and the source is Wealthfront.

37
00:02:17.410 --> 00:02:20.500
And these are kind of CSS properties, and

38
00:02:20.500 --> 00:02:25.250
the things that it causes,
these are CSS triggers.

39
00:02:25.250 --> 00:02:31.000
You can see, opacity and transform does
not cause layout and paint retriggers.

40
00:02:31.000 --> 00:02:34.320
If you're kind of bummed out, cuz that
seems like not a lot of properties to

41
00:02:34.320 --> 00:02:36.870
animate, transforms are really powerful.

42
00:02:36.870 --> 00:02:39.110
There's tons of stuff in transforms.

43
00:02:39.110 --> 00:02:42.250
You can move things, you can skew things,
you can scale things.

44
00:02:42.250 --> 00:02:43.990
All of the pens that you see today,

45
00:02:43.990 --> 00:02:48.080
all of these crazy things that we're
gonna do, are all done with transforms.

46
00:02:48.080 --> 00:02:50.120
So it doesn't really limit you that much.

47
00:02:51.940 --> 00:02:56.507
Okay, so work flow, why would I
use GreenSock just for workflow?

48
00:02:56.507 --> 00:03:00.339
Well, let's say you have a few
different key frame animations and

49
00:03:00.339 --> 00:03:02.878
you have things at different percentages.

50
00:03:02.878 --> 00:03:06.980
And let's say there's a burst
at 60% of one animation and

51
00:03:06.980 --> 00:03:11.620
then 60% of another animation,
two different elements.

52
00:03:11.620 --> 00:03:16.716
Well, what if the timing of something
that came way, way before it changes?

53
00:03:16.716 --> 00:03:21.676
You could adjust the percentages and
recalculate both of those,

54
00:03:21.676 --> 00:03:25.025
or you can try to keep
them both in lockstep.

55
00:03:25.025 --> 00:03:27.316
But eventually what's gonna happen is,

56
00:03:27.316 --> 00:03:31.516
you're gonna have to rewrite all of
the animation code that came before it.

57
00:03:31.516 --> 00:03:35.957
Because the only way to chain CSS
animation is by making the greater and

58
00:03:35.957 --> 00:03:37.840
greater delay.

59
00:03:37.840 --> 00:03:39.940
And it's not that legible.

60
00:03:39.940 --> 00:03:42.960
It's not that legible to make
all of those key frames.

61
00:03:42.960 --> 00:03:46.460
They're applied in a different area
than you're applying the animation.

62
00:03:46.460 --> 00:03:50.910
So sometimes in your code, you'll find
if you do like a really crazy animation,

63
00:03:50.910 --> 00:03:53.100
they're kind of floating
away from each other.

64
00:03:53.100 --> 00:03:55.248
It's like where did that key frame go?

65
00:03:55.248 --> 00:03:56.712
Is it down here?

66
00:03:56.712 --> 00:03:59.086
So you're kind of like
thinking about it and

67
00:03:59.086 --> 00:04:03.193
then applying it in two different places,
so as it gets more complicated and

68
00:04:03.193 --> 00:04:06.354
your code gets longer,
it gets a little bit more stringy.

69
00:04:09.261 --> 00:04:11.906
&gt;&gt; Sarah Drasner: There’s also
a stacking order for CSS transforms so

70
00:04:11.906 --> 00:04:14.560
lets say you want a bunch of
things to happen at once.

71
00:04:14.560 --> 00:04:17.430
You wanna scale something,
you wanna rotate something.

72
00:04:19.290 --> 00:04:23.550
There’s basically one thing
that will happen at a time.

73
00:04:23.550 --> 00:04:26.730
Unless, there's like two
ways of solving this.

74
00:04:26.730 --> 00:04:30.570
One is to wrap subsequent divs or
groups around the thing, and

75
00:04:30.570 --> 00:04:34.920
animate those all separately,
which is a lot of mark up and gunk.

76
00:04:34.920 --> 00:04:39.773
Or you can find the intermediary
values of each piece in

77
00:04:39.773 --> 00:04:43.791
the middle of the other
pieces to apply them.

78
00:04:43.791 --> 00:04:46.619
Yeah, that's the work
the computer should be doing.

79
00:04:46.619 --> 00:04:49.534
That's not stuff that you wanna be doing.

80
00:04:49.534 --> 00:04:51.740
Whereas GreenSock, it doesn't matter.

81
00:04:51.740 --> 00:04:54.660
You can just apply them,
GreenSock will figure out the matrix

82
00:04:54.660 --> 00:04:58.320
transform under the hood and
just do it for you.

83
00:04:58.320 --> 00:05:00.110
So that can be really nice.

84
00:05:00.110 --> 00:05:02.420
So there's really great features,
simple syntax.

85
00:05:02.420 --> 00:05:04.541
I should mention I'm not paid by them or
something.

86
00:05:04.541 --> 00:05:07.890
I don't work for them,
I'm not like selling you their product.

87
00:05:07.890 --> 00:05:11.853
I just am an animator who found
a tool that they really like.

88
00:05:11.853 --> 00:05:14.210
I should just say that out of the gate.

89
00:05:14.210 --> 00:05:17.551
You can use whatever tool you want,
I just really like this tool a lot and

90
00:05:17.551 --> 00:05:18.730
it has a lot of features.

91
00:05:19.750 --> 00:05:22.920
Simply syntax, Timelines,
Nested Timelines,

92
00:05:22.920 --> 00:05:26.850
Draggable, DrawSVG, Stagger, MorphSVG.

93
00:05:26.850 --> 00:05:30.020
So I mentioned that you can
do a lot with transforms.

94
00:05:30.020 --> 00:05:33.530
This whole pen is just a bunch
of transforms over and

95
00:05:33.530 --> 00:05:38.990
over again applied to different elements.

96
00:05:38.990 --> 00:05:44.610
And I'm using a timeline, so if I wanna
change one thing, it doesn't affect

97
00:05:44.610 --> 00:05:48.540
everything else, it just gets ordered
in time and that's totally fine.

98
00:05:48.540 --> 00:05:53.202
And I can reuse pieces of
the animation as well, cool.

99
00:05:55.719 --> 00:05:57.781
&gt;&gt; Sarah Drasner: It solves some
cross browser inconsistencies.

100
00:05:57.781 --> 00:06:00.379
Some of you probably already
found some of these.

101
00:06:00.379 --> 00:06:01.721
You did, I think.

102
00:06:01.721 --> 00:06:06.157
[LAUGH] Some of the transform origin
issues that you'll encounter get kind of

103
00:06:06.157 --> 00:06:06.998
squirrelly.

104
00:06:06.998 --> 00:06:10.350
Old IE does not support
CSS transforms at all.

105
00:06:10.350 --> 00:06:14.570
Edge does, and later browsers,
Microsoft browsers.

106
00:06:14.570 --> 00:06:18.830
Safari zoomed, this got solved and
then like unsolved and

107
00:06:18.830 --> 00:06:21.280
I think it's solved again,
sometimes it comes back.

108
00:06:23.130 --> 00:06:24.530
None of these are an issue.

109
00:06:24.530 --> 00:06:29.800
You can get these kind of transforms and
rotations working with GreenSock

110
00:06:29.800 --> 00:06:34.920
back to old IE9, so
even old IE will work with GreenSock.

111
00:06:34.920 --> 00:06:36.350
And this is my favorite one.

112
00:06:36.350 --> 00:06:40.890
Actually Mark back in the day showed a pen
that showed the problem with stacking

113
00:06:40.890 --> 00:06:42.180
different transforms.

114
00:06:42.180 --> 00:06:43.359
So this is what GreenSock does.

115
00:06:44.780 --> 00:06:47.420
I should mention that
CodePen's having this issue,

116
00:06:47.420 --> 00:06:51.060
where inside an embed,
the transform is getting weird.

117
00:06:52.460 --> 00:06:58.450
So transform left top,
the red is what the spec thinks it wants.

118
00:06:58.450 --> 00:07:02.868
So real spec behavior,
the spec that they wrote,

119
00:07:02.868 --> 00:07:08.349
everybody was like, yes,
this sounds good, is the red one.

120
00:07:08.349 --> 00:07:10.718
What, like what?

121
00:07:10.718 --> 00:07:13.227
[LAUGH] That is not great.

122
00:07:13.227 --> 00:07:20.839
But the green one, the way that GreenSock
compensates, and it's like, you know what?

123
00:07:20.839 --> 00:07:25.270
I assume what you mean is
that you want this to happen.

124
00:07:25.270 --> 00:07:30.870
So stuff like this, if it's not working
correctly, can really ruin your time.

125
00:07:30.870 --> 00:07:34.405
I was mentioning to someone if
I'm not able to use GreenSock and

126
00:07:34.405 --> 00:07:37.005
I have to use CSS animations for
a really long,

127
00:07:37.005 --> 00:07:40.024
complicated client project
I will bill extra hours.

128
00:07:40.024 --> 00:07:45.354
I'll say, it's gonna take me X amount
longer because I have to compensate for

129
00:07:45.354 --> 00:07:47.875
all these strange idiosyncrasies.

