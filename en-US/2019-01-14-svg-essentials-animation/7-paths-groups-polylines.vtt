WEBVTT

1
00:00:00.040 --> 00:00:02.862
&gt;&gt; Sarah Drasner: So if I wanted
to take these paths and groups,

2
00:00:02.862 --> 00:00:04.881
lets explore this for a second.

3
00:00:04.881 --> 00:00:08.932
So you might have seen a lot of
path data when you export SVG.

4
00:00:08.932 --> 00:00:10.761
You just saw some a second ago.

5
00:00:10.761 --> 00:00:14.020
And that especially is probably
like what is going on here?

6
00:00:14.020 --> 00:00:17.270
But don't worry that has a rhyme and
reason to it as well.

7
00:00:17.270 --> 00:00:20.985
So if we have this svg,
we have this thing called a g.

8
00:00:20.985 --> 00:00:22.471
And a g is a little bit like a div.

9
00:00:22.471 --> 00:00:23.904
It's just a group.

10
00:00:23.904 --> 00:00:26.170
And it's a way of grouping
multiple objects.

11
00:00:26.170 --> 00:00:30.992
And that's really great for svg because,
lets say you have a whole scene and

12
00:00:30.992 --> 00:00:34.830
you have a car, and that car has
tons of paths in it and stuff,

13
00:00:34.830 --> 00:00:37.566
you wrap the whole car in a g,
in the group.

14
00:00:37.566 --> 00:00:40.725
And then you can move the whole car
without having to move each path

15
00:00:40.725 --> 00:00:41.940
individually, right?

16
00:00:41.940 --> 00:00:45.995
So g is a really important
thing to keep in mind.

17
00:00:45.995 --> 00:00:50.868
And when we talk about optimization, we're
gonna to talk about not removing gs maybe.

18
00:00:50.868 --> 00:00:55.217
Because you don't necessarily want
all of those groups to be gone.

19
00:00:55.217 --> 00:00:56.328
So we have two paths here.

20
00:00:56.328 --> 00:01:00.821
One of them is open and
one of them is closed.

21
00:01:00.821 --> 00:01:03.005
If we go to the end of these paths,

22
00:01:03.005 --> 00:01:07.456
you'll notice that one of them does
not have a z and one of them does.

23
00:01:07.456 --> 00:01:10.950
That z, that's the thing that closes it.

24
00:01:10.950 --> 00:01:12.850
So if you're drawing something and

25
00:01:12.850 --> 00:01:17.340
you want it to find, if you're like,
again, this is the penultimate one,

26
00:01:17.340 --> 00:01:20.780
I want it to go connect back to
where it came from, you can put a z.

27
00:01:20.780 --> 00:01:24.497
Or likewise, if you're looking through
a bunch of paths, and you're like,

28
00:01:24.497 --> 00:01:27.667
wait, I'm not sure which one this is,
that z is a good indicator.

29
00:01:27.667 --> 00:01:30.417
Okay, that one's close so
that must be that path.

30
00:01:30.417 --> 00:01:38.070
So these paths all start with d for
drawing and also start with m for move to.

31
00:01:38.070 --> 00:01:40.217
So it always starts with m for move to.

32
00:01:40.217 --> 00:01:43.200
If you have a path that all of
a sudden breaks really fast,

33
00:01:43.200 --> 00:01:45.950
it's probably cuz you
accidentally deleted the m.

34
00:01:45.950 --> 00:01:49.557
It will not work without the m.

35
00:01:49.557 --> 00:01:50.651
So we have this group.

36
00:01:50.651 --> 00:01:54.192
The nice thing about groups is
they kinda work like divs also.

37
00:01:54.192 --> 00:01:58.031
If you donâ€™t have anything
specified on the paths itself,

38
00:01:58.031 --> 00:02:02.113
you can apply fill and
stroke to all of the paths by using group.

39
00:02:02.113 --> 00:02:04.782
So you can remove redundancy by saying,
okay,

40
00:02:04.782 --> 00:02:08.840
everything inside of here is gonna
have fill, none, stroke, black.

41
00:02:08.840 --> 00:02:11.874
I'm gonna apply it to the group and
all the paths will take it..

42
00:02:11.874 --> 00:02:17.401
I can also, likewise, just like CSS and
those kind of elements, specify that

43
00:02:17.401 --> 00:02:22.980
one path has a stroke of teal and that
one will override basically that group.

44
00:02:22.980 --> 00:02:26.600
The group will be applied to all of
the things inside of it except for

45
00:02:26.600 --> 00:02:29.790
the one path that was like,
no, I'm very specific.

46
00:02:29.790 --> 00:02:33.214
So we can add classes,
move multiple things at once.

47
00:02:33.214 --> 00:02:35.337
Groups are awesome.

48
00:02:35.337 --> 00:02:37.825
Polyline, polyline looks
just like polygon.

49
00:02:37.825 --> 00:02:39.115
It's the same.

50
00:02:39.115 --> 00:02:44.074
In polygon we had points, and
they were like xy, xy, xy.

51
00:02:44.074 --> 00:02:46.022
Polyline does the same thing.

52
00:02:46.022 --> 00:02:50.227
The only difference here is
that this is literally the end.

53
00:02:50.227 --> 00:02:53.248
But also if you're doing
data visualization, and

54
00:02:53.248 --> 00:02:57.543
even if you don't wanna use D3,
you're just doing some data binding.

55
00:02:57.543 --> 00:03:02.454
So sometimes I'll make just a chart in Vue
without loading D3 cuz sometimes it can

56
00:03:02.454 --> 00:03:04.080
be kinda heavy.

57
00:03:04.080 --> 00:03:08.821
I can really quickly create
a a polyline by just binding

58
00:03:08.821 --> 00:03:11.610
these attributes xy, xy, xy.

59
00:03:11.610 --> 00:03:15.660
You have a polyline that shows
all of the data that you need.

60
00:03:15.660 --> 00:03:21.530
And since it's SVG, I can make it super
big, thousands and thousands of units or

61
00:03:21.530 --> 00:03:27.130
whatever, and then just scrunch it
to whatever I need it to be, yeah.

62
00:03:27.130 --> 00:03:30.910
Cool, so we mentioned that we have
all of these different paths.

63
00:03:30.910 --> 00:03:34.240
There's this really cool
demo that explores paths.

64
00:03:34.240 --> 00:03:38.937
You can kind of move things around, and
you could see the path data changing.

65
00:03:38.937 --> 00:03:42.608
But there's an even better demo, but
I would still really like this demo.

66
00:03:42.608 --> 00:03:46.140
And it makes noises so that's cool.

67
00:03:46.140 --> 00:03:49.369
Yeah, go back here.

68
00:03:52.201 --> 00:03:53.180
&gt;&gt; Sarah Drasner: So
let's look at path data.

69
00:03:53.180 --> 00:03:58.511
So mentioned before that we start with m,
move to, start of the path, new path.

70
00:03:58.511 --> 00:04:02.353
L is line to, so
that's pretty straightforward, right?

71
00:04:02.353 --> 00:04:06.410
Move to is gonna start
the first two things.

72
00:04:06.410 --> 00:04:09.067
So it'll be like zero, zero,

73
00:04:09.067 --> 00:04:14.711
m would start right at the corner and
then line to somewhere else.

74
00:04:14.711 --> 00:04:16.684
So two coordinates there.

75
00:04:16.684 --> 00:04:20.090
H will remove one of those things, right?

76
00:04:20.090 --> 00:04:22.440
We don't need if it's redundant.

77
00:04:22.440 --> 00:04:24.381
If it's across the x-axis,

78
00:04:24.381 --> 00:04:29.435
I don't have to specify where it is on
the x-axis for the second coordinate.

79
00:04:29.435 --> 00:04:31.590
I just have to do one of them.

80
00:04:31.590 --> 00:04:32.920
V is the same kinda thing.

81
00:04:32.920 --> 00:04:35.563
If it's a vertical line down and
I use a V,

82
00:04:35.563 --> 00:04:39.131
I only have to specify one
coordinate instead of x and y.

83
00:04:39.131 --> 00:04:41.390
I'm only saying where the x would be.

84
00:04:42.540 --> 00:04:48.030
You might also notice that we have these
capital letters and lowercase letters.

85
00:04:48.030 --> 00:04:49.915
So this is a really cool thing.

86
00:04:49.915 --> 00:04:54.061
It's the difference between absolute and
relative positioning.

87
00:04:54.061 --> 00:04:57.878
So let's say you're drawing path points.

88
00:04:57.878 --> 00:05:04.834
And you wanna say from here I want
you to go 30 units to the right.

89
00:05:04.834 --> 00:05:08.290
Then you can do a lowercase
because it's relative to here.

90
00:05:08.290 --> 00:05:11.533
You can say,
I want you to move from here 30 over.

91
00:05:11.533 --> 00:05:15.594
No matter where it is on the canvas,
30 over, yeah?

92
00:05:15.594 --> 00:05:21.073
But if I say absolute, no matter what,
I want you to be at 360,

93
00:05:21.073 --> 00:05:24.375
450, that's a uppercase letter.

94
00:05:24.375 --> 00:05:29.720
So that will be, and I use different
ones depending on what I'm doing.

95
00:05:29.720 --> 00:05:33.377
Cuz sometimes, if I'm gonna make
generative path data that goes

96
00:05:33.377 --> 00:05:37.376
all the way down the page, I might
wanna use the lowercase one, right?

97
00:05:37.376 --> 00:05:41.480
Because wherever you're starting from,
go a little bit down.

98
00:05:41.480 --> 00:05:46.361
But if I'm creating something where
something needs to be exactly in that

99
00:05:46.361 --> 00:05:51.161
one spot, this is a car where
the rear-view mirror has to be right here,

100
00:05:51.161 --> 00:05:53.381
I might use a absolute position.

101
00:05:53.381 --> 00:05:54.395
So I use an upper case.

102
00:05:56.714 --> 00:05:58.330
&gt;&gt; Sarah Drasner: There's curve command.

103
00:05:58.330 --> 00:05:59.647
I think curve commands are so great.

104
00:05:59.647 --> 00:06:04.478
You basically tell the computer,
here's a bunch of x, y coordinates, and

105
00:06:04.478 --> 00:06:06.075
it knows to draw a curve.

106
00:06:06.075 --> 00:06:07.627
How cool is that?

107
00:06:07.627 --> 00:06:09.438
That's so awesome.

108
00:06:09.438 --> 00:06:12.112
You can also do so
many cool things with it.

109
00:06:12.112 --> 00:06:14.193
So you can have slinkies.

110
00:06:14.193 --> 00:06:15.259
We're gonna do that.

111
00:06:15.259 --> 00:06:19.466
You can have like pools, and
water, and fluid dynamics.

112
00:06:19.466 --> 00:06:24.780
And we're gonna move around some
champagne later, all sorts of cool stuff.

113
00:06:25.820 --> 00:06:29.009
So probably the most common that
you're gonna see everywhere is the C,

114
00:06:29.009 --> 00:06:30.188
that's cubic-bezier.

115
00:06:30.188 --> 00:06:31.427
So it starts here.

116
00:06:31.427 --> 00:06:35.002
It goes to the first control point, then
it goes to the next control point, and

117
00:06:35.002 --> 00:06:36.440
the next control point.

118
00:06:36.440 --> 00:06:41.543
If it sounds familiar,
cuz you've been doing animation before,

119
00:06:41.543 --> 00:06:45.015
cubic-bezier in CSS uses the same concept.

120
00:06:45.015 --> 00:06:48.025
It basically gives you a bunch
of control handles and

121
00:06:48.025 --> 00:06:51.183
that's what you're using
to define the easing path.

122
00:06:51.183 --> 00:06:54.810
So in S,
it's basically the same thing as a C.

123
00:06:54.810 --> 00:06:56.820
These guys are friends.

124
00:06:56.820 --> 00:07:00.060
[LAUGH] It's the same thing,
it just reflects.

125
00:07:00.060 --> 00:07:04.616
So rather than having to say here, and
then here, and then here, and then here,

126
00:07:04.616 --> 00:07:09.810
and there, it just takes this first one,
and you don't have to specify that again.

127
00:07:09.810 --> 00:07:12.452
And it reflects it on the other side.

128
00:07:12.452 --> 00:07:16.485
So that's nice if you're gonna
make a wave kind of thing.

129
00:07:16.485 --> 00:07:17.660
Q is my favorite.

130
00:07:17.660 --> 00:07:20.100
You should have a favorite curve
command by the end of the class.

131
00:07:20.100 --> 00:07:21.090
I'm gonna ask you.

132
00:07:21.090 --> 00:07:26.470
It's a quadratic bezier, so
basically they share one point.

133
00:07:26.470 --> 00:07:29.393
And I like it because you
can kinda push it and

134
00:07:29.393 --> 00:07:33.750
pull it around, and
you're only thinking about that one point.

135
00:07:33.750 --> 00:07:35.490
You're not thinking about both.

136
00:07:35.490 --> 00:07:37.097
It's kind of easy to reason about.

137
00:07:37.097 --> 00:07:41.159
You're saying like, start here,
here's my control point.

138
00:07:41.159 --> 00:07:44.492
End here and
then I know to just move this thing.

139
00:07:44.492 --> 00:07:46.980
And I'm moving it around the screen, and

140
00:07:46.980 --> 00:07:51.040
then all of a sudden an arm is
flopping there or something like that.

141
00:07:51.040 --> 00:07:54.218
T and Q are friends,
just like C and S are friends.

142
00:07:54.218 --> 00:08:00.281
So the T just reflects whatever
you've got going on in that Q.

143
00:08:00.281 --> 00:08:01.826
A is an elliptical arc.

144
00:08:01.826 --> 00:08:05.486
And it has a million parameters and
it's really complicated.

145
00:08:05.486 --> 00:08:08.900
And I can kind of explain it to you,
but you probably won't remember.

146
00:08:08.900 --> 00:08:14.200
Well, what we basically do is we draw
a circle and then we draw another circle.

147
00:08:14.200 --> 00:08:17.262
And then we have a Boolean flag for
which circle we're talking about and

148
00:08:17.262 --> 00:08:18.395
then one circle cuts out.

149
00:08:18.395 --> 00:08:22.695
The other circles circle, and
then we have another Boolean flag for

150
00:08:22.695 --> 00:08:25.649
whichever circle is
cutting out that circle.

151
00:08:25.649 --> 00:08:26.584
Does that sound complicated?

152
00:08:26.584 --> 00:08:27.663
It's a little complicated.

153
00:08:27.663 --> 00:08:31.888
It's great, it's not used that often.

154
00:08:31.888 --> 00:08:35.450
So I'm not gonna go into incredible
amount of detail about it.

155
00:08:35.450 --> 00:08:39.130
If you wanna check out more
information on it, SVG Essentials by

156
00:08:39.130 --> 00:08:43.370
Amelia Bellamy-Royds has a really
great explanation of all this stuff.

157
00:08:43.370 --> 00:08:45.363
And you can also find MDN documentation.

158
00:08:45.363 --> 00:08:48.041
If you wanna dig in,
I'll work with you on it.

159
00:08:48.041 --> 00:08:52.521
But it's got a long explanation and

160
00:08:52.521 --> 00:08:56.230
not usually that useful.

161
00:08:56.230 --> 00:08:58.487
This pen is so awesome.

162
00:08:58.487 --> 00:09:02.608
It's also all built in React,
like an old version of React.

163
00:09:02.608 --> 00:09:06.454
But still, if you wanna understand path
values by playing around with them,

164
00:09:06.454 --> 00:09:07.589
this thing is so good.

165
00:09:07.589 --> 00:09:11.071
It's just great.

166
00:09:11.071 --> 00:09:15.674
Also it's very flat, so you might not
notice that you have to scroll, but

167
00:09:15.674 --> 00:09:16.390
you do.

168
00:09:16.390 --> 00:09:19.152
So I can basically, let's reset the path.

169
00:09:19.152 --> 00:09:21.786
If I wanna understand
how these things work,

170
00:09:21.786 --> 00:09:24.650
you can see how that
point x position starts.

171
00:09:24.650 --> 00:09:28.126
So you start m, 100, and 300.

172
00:09:28.126 --> 00:09:30.401
Let me see if I can make the text bigger.

173
00:09:30.401 --> 00:09:34.338
No, okay, well, whatever.

174
00:09:34.338 --> 00:09:40.418
So you can see m, 100, 300 and
then I'm moving things around.

175
00:09:40.418 --> 00:09:42.220
It's updating as I'm moving.

176
00:09:42.220 --> 00:09:45.023
And then y position, same thing.

177
00:09:45.023 --> 00:09:48.834
And then I could basically say,
all right, Ctrl+click and

178
00:09:48.834 --> 00:09:52.510
create another point and
then all of these things come up.

179
00:09:52.510 --> 00:09:58.700
So this is like the point x position for
L, and then I can make a Q.

180
00:09:58.700 --> 00:10:01.010
Remember, we were talking
about my friend the Q.

181
00:10:01.010 --> 00:10:05.777
So I go x and y.

182
00:10:05.777 --> 00:10:10.494
Look, you're making it bounce
just by changing that number.

183
00:10:10.494 --> 00:10:11.270
It's this number here, see?

184
00:10:13.050 --> 00:10:15.557
Neat, so if you wanna learn paths,

185
00:10:15.557 --> 00:10:20.670
I think that this is probably the easiest
way to wrap your head around it.

186
00:10:20.670 --> 00:10:23.851
You can also just play with code and
do it that way, but

187
00:10:23.851 --> 00:10:26.960
this is kind of like a visual
indicator and a really,

188
00:10:26.960 --> 00:10:30.374
really great pen to check out
if you're first learning.

