WEBVTT

1
00:00:03.445 --> 00:00:05.570
&gt;&gt; Sarah Drasner: Working With an SVG for
Animation.

2
00:00:05.570 --> 00:00:07.810
This is kinda like what you're here for,
right?

3
00:00:07.810 --> 00:00:10.040
[LAUGH] I should dive right in.

4
00:00:10.040 --> 00:00:14.050
All right, before, [LAUGH] even though
I said it was working with an SVG for

5
00:00:14.050 --> 00:00:16.810
animation, we're not gonna animate yet
because we're gonna talk about how to

6
00:00:16.810 --> 00:00:21.820
optimize and how to build the SVG so
that it's appropriate for animation.

7
00:00:23.290 --> 00:00:26.160
If you have something with
a lot of path points,

8
00:00:26.160 --> 00:00:28.960
this is how an SVG can actually get bulky.

9
00:00:28.960 --> 00:00:31.850
This is how it can become
not very performing.

10
00:00:31.850 --> 00:00:35.750
Usually, SVG's are pretty
performing cuz they're small and

11
00:00:35.750 --> 00:00:38.650
they're lightweight and
there's like not that many path points.

12
00:00:38.650 --> 00:00:43.620
You don't need that much to actually fill
up circles and squares and polygons.

13
00:00:43.620 --> 00:00:46.110
You saw how quickly we drew that star.

14
00:00:46.110 --> 00:00:48.200
But if you have something like a pattern,

15
00:00:48.200 --> 00:00:51.100
you can see how that would quickly
start to bulk up path points.

16
00:00:51.100 --> 00:00:53.125
You'd just have a million path points.

17
00:00:53.125 --> 00:00:55.665
So if you have something
like a pattern that

18
00:00:55.665 --> 00:00:58.630
doesn't really need to
have all the rough edges,

19
00:00:58.630 --> 00:01:02.740
like visually it just doesn't make
a big difference for the viewer.

20
00:01:02.740 --> 00:01:07.960
You can really take down a lot
of that data that you're

21
00:01:07.960 --> 00:01:12.840
trying to express by using
object path simplify.

22
00:01:12.840 --> 00:01:17.150
Basically, you're simplifying these paths
down to smaller amounts of path points so

23
00:01:17.150 --> 00:01:20.050
you can see how the original was 1445,

24
00:01:20.050 --> 00:01:23.972
current 888 and
there's probably no visual difference.

25
00:01:23.972 --> 00:01:29.179
Unless someone is looking at them
with a microscope which they are not

26
00:01:29.179 --> 00:01:34.860
going to do and the change in kilobytes
size is huge, it's just gigantic.

27
00:01:34.860 --> 00:01:38.550
Another thing you can do
is sometimes people draw.

28
00:01:38.550 --> 00:01:42.980
What you'll see is if you buy an SVG,
or a designer worked with an SVG, or

29
00:01:42.980 --> 00:01:47.370
they got it off of iStockPhoto or
ShutterStock, it has a curve, but

30
00:01:47.370 --> 00:01:49.770
there's a million path points
to make up that curve.

31
00:01:49.770 --> 00:01:53.720
So you could actually just redraw
that curve and save a lot and

32
00:01:53.720 --> 00:01:57.960
this is kind of getting into really
nitty-gritty details, but I worked for

33
00:01:57.960 --> 00:02:01.380
a site once where they had a lot of SVGs.

34
00:02:01.380 --> 00:02:05.930
We worked with a company that
made kind of microsite for us.

35
00:02:05.930 --> 00:02:08.960
And they made a lot and
a lot of SVGs on that site.

36
00:02:08.960 --> 00:02:12.660
And I brought down the load
time from 12 seconds

37
00:02:12.660 --> 00:02:16.990
to 2 seconds by doing things like this and
optimizing the SVGs appropriately.

38
00:02:16.990 --> 00:02:22.290
So it can actually really pay off
to do some of these minute tasks.

39
00:02:22.290 --> 00:02:24.490
If you don't feel like
you're good at drawing,

40
00:02:24.490 --> 00:02:29.030
what you can do is you can draw like
really basic shapes like a circle and

41
00:02:29.030 --> 00:02:31.490
here's is a polygon and
like keep on building them.

42
00:02:31.490 --> 00:02:35.500
And then grab, there's like a pathfinder
thing, I'll show you in just a second

43
00:02:35.500 --> 00:02:38.360
in Illustrator and
just join all the paths together.

44
00:02:38.360 --> 00:02:41.784
Then you can kinda [SOUND]
knock them into place and

45
00:02:41.784 --> 00:02:46.042
then you don't have to be so
good at doing all of those pen tool

46
00:02:46.042 --> 00:02:49.989
things if you're not super
familiar with the pen tool.

47
00:02:49.989 --> 00:02:53.254
Another thing is if you
have a drop shadow,

48
00:02:53.254 --> 00:02:56.530
a lot of times a drop
shadow will cost a lot.

49
00:02:56.530 --> 00:03:00.780
It's usually just this giant
PNG that's loaded into the SVG.

50
00:03:00.780 --> 00:03:03.539
You'll have a really simple SVG and
then all of

51
00:03:03.539 --> 00:03:08.300
a sudden it's like 300 kilobytes and
you're like, what's going on here?

52
00:03:08.300 --> 00:03:12.247
And it's because they're making
this drop shadow out of a PNG and

53
00:03:12.247 --> 00:03:14.340
sticking it inside of the canvas.

54
00:03:14.340 --> 00:03:19.857
You can also use an SVG filter for
this so you can remove that drop shadow,

55
00:03:19.857 --> 00:03:24.470
go into SVG filters in Illustrator and
say AI_Shadow_1 or

56
00:03:24.470 --> 00:03:28.820
2 and then just recreate
the shadow using an SVG filter.

57
00:03:28.820 --> 00:03:32.620
That's like 1 kilobyte instead of 500 or
something like that.

58
00:03:32.620 --> 00:03:39.210
So that's another really quick way to
make a lot of savings inside of an SVG.

59
00:03:39.210 --> 00:03:43.720
So if you have a pattern like this,
sometimes these patterns, so

60
00:03:43.720 --> 00:03:47.164
this pattern, if you look at it,
all of the yellow

61
00:03:47.164 --> 00:03:51.690
behind it is all tiny little shapes
which is such a waste, right?

62
00:03:51.690 --> 00:03:55.123
You'd think visually that's is just
like a thing behind the thing but

63
00:03:55.123 --> 00:03:58.370
instead they're drawing all
those little path points.

64
00:03:58.370 --> 00:04:04.040
So what you can do is you can grab the
yellow and say select, same, fill color.

65
00:04:04.040 --> 00:04:05.478
So you just select one of them.

66
00:04:05.478 --> 00:04:08.815
Select same, fill color,
delete all of them at once and

67
00:04:08.815 --> 00:04:12.620
draw a big rectangle with
the same color behind it.

68
00:04:12.620 --> 00:04:17.070
And then that saves you [LAUGH] lots and
lots of path points.

69
00:04:17.070 --> 00:04:21.140
So that's also another really
quick thing that costs

70
00:04:21.140 --> 00:04:25.100
almost nothing once you change it over but
cost you lot before.

71
00:04:26.950 --> 00:04:31.030
So let's actually look at some of
the optimization techniques that

72
00:04:31.030 --> 00:04:32.400
are available to you.

73
00:04:32.400 --> 00:04:37.720
So here's an example of some output if you
output from Illustrator improperly and

74
00:04:37.720 --> 00:04:39.530
I'll show you improperly, improperly.

75
00:04:39.530 --> 00:04:43.290
That's before optimization and
that's the same output.

76
00:04:43.290 --> 00:04:46.550
These do the same thing and
that's a tiny one.

77
00:04:46.550 --> 00:04:51.512
You can imagine if the thing is really
big, how much changing the way you're

78
00:04:51.512 --> 00:04:57.420
optimizing can actually make this file
size three times as big or a lot smaller.

79
00:04:57.420 --> 00:05:00.260
So here's bunch of different
ways that we can optimize.

80
00:05:00.260 --> 00:05:03.280
There's SVGOMG which is
built by Jake Archibald.

81
00:05:03.280 --> 00:05:05.810
It actually, because it's built by
Jake Archibald it uses Service Worker.

82
00:05:05.810 --> 00:05:08.454
So if you go to it once,
go to it once now, and

83
00:05:08.454 --> 00:05:10.966
then you can use it on the plane and
stuff.

84
00:05:10.966 --> 00:05:13.572
And I was once at a cabin
with some friends and

85
00:05:13.572 --> 00:05:16.400
I had to get some work done and
I was like, no!

86
00:05:16.400 --> 00:05:19.760
I need internet connection and
I was like, no I don't!

87
00:05:19.760 --> 00:05:21.250
Thank you, Jake!

88
00:05:21.250 --> 00:05:22.600
I sent him a message.

89
00:05:23.630 --> 00:05:25.060
So that's really great.

90
00:05:25.060 --> 00:05:27.270
This is what that looks like,
we're gonna use it in just a second.

91
00:05:28.590 --> 00:05:33.800
Peter Collingridge's SVG Editor is
like a really really old rail to have.

92
00:05:33.800 --> 00:05:36.610
I still kind of like it
cuz it's got this edit

93
00:05:36.610 --> 00:05:41.350
experimental tab that's been
experimental for five, six years now.

94
00:05:41.350 --> 00:05:47.210
And you can play with SVG tabs before
you while you're optimizing it.

95
00:05:47.210 --> 00:05:52.980
SVGO is awesome and
it's a terminal-based SVG optimizer.

96
00:05:52.980 --> 00:05:57.145
But I would really suggest that if
you use it you pair it with SVGO-GUI.

97
00:05:58.225 --> 00:06:00.905
This can be really nice though,
just automate that task for

98
00:06:00.905 --> 00:06:05.065
you but without the GUI you don't really
know what the optimization is doing.

99
00:06:05.065 --> 00:06:09.655
And the way that you optimize an SVG
can actually affect its visual output,

100
00:06:09.655 --> 00:06:13.765
so if you kind of trust yourself
enough maybe you can use SVGO.

101
00:06:13.765 --> 00:06:16.433
But there are times where just like
strips out things that you need and

102
00:06:16.433 --> 00:06:17.905
then it doesn't look exactly right.

