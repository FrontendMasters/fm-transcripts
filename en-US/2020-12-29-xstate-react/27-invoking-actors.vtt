WEBVTT

1
00:00:00.250 --> 00:00:03.180
You'll notice that we do
have this pending thing, and

2
00:00:03.180 --> 00:00:05.560
then eventually it goes to active.

3
00:00:05.560 --> 00:00:09.410
Now, right now that pending,
it's not really doing anything.

4
00:00:09.410 --> 00:00:13.690
It's just waiting for
another events to happen.

5
00:00:13.690 --> 00:00:18.838
Now it could be waiting forever and
there's really no indication

6
00:00:18.838 --> 00:00:25.530
of what exactly is happening for
that success events to finally be there.

7
00:00:25.530 --> 00:00:26.598
In this case,

8
00:00:26.598 --> 00:00:32.610
we just have a timeout that it's going
to send success after two seconds.

9
00:00:32.610 --> 00:00:34.416
But we do have a split in logic.

10
00:00:34.416 --> 00:00:38.540
So we have the logic
inside the alarmMachine.

11
00:00:38.540 --> 00:00:42.720
And we have the logic that's
inside this useEffect.

12
00:00:44.400 --> 00:00:46.191
So how can we actually combine the two?

13
00:00:46.191 --> 00:00:51.661
Because XState could also handle
effects as well in the form of actions,

14
00:00:51.661 --> 00:00:54.810
invoking actors, and spawning actors.

15
00:00:56.210 --> 00:01:00.850
So let's go ahead and convert this so
that XState itself handles it.

16
00:01:00.850 --> 00:01:02.999
Now, of course, you could use after, but

17
00:01:02.999 --> 00:01:06.605
we're going to make a fake promise
in order to simulate this behavior.

18
00:01:08.654 --> 00:01:11.110
So let's go ahead and create that promise.

19
00:01:11.110 --> 00:01:17.481
So let's say that we're just
trying to save the alarm.

20
00:01:17.481 --> 00:01:23.011
And this is going to be in async function

21
00:01:23.011 --> 00:01:28.550
that basically returns a new promise.

22
00:01:29.630 --> 00:01:34.200
And that promise is going to resolve
after, let's say two seconds.

23
00:01:34.200 --> 00:01:40.640
So setTimeout, resolve,
and give it two seconds.

24
00:01:43.463 --> 00:01:47.973
And so now this saveAlarm is a promise
where we could have used it in this

25
00:01:47.973 --> 00:01:52.949
useEffect, but we want to move all of
this logic to inside the alarmMachine.

26
00:01:54.720 --> 00:02:00.390
And just like the logic we have here,
we have if status is equal to pending,

27
00:02:00.390 --> 00:02:05.050
which means we want this to
run in the pending state.

28
00:02:05.050 --> 00:02:10.670
So let's go ahead, you know what, we're
just going to remove this real quick.

29
00:02:12.390 --> 00:02:16.250
And in the pending state,
we're going to invoke that promise.

30
00:02:16.250 --> 00:02:23.036
So invoke, the source of this
invocation is going to be that promise.

31
00:02:23.036 --> 00:02:27.031
So we could just give it that.

32
00:02:27.031 --> 00:02:30.260
Well, so this, where's our promise?

33
00:02:30.260 --> 00:02:34.250
All right, this saveAlarm is
going to create that promise.

34
00:02:34.250 --> 00:02:38.990
The source for an invoke is a function
that takes the context in event and

35
00:02:38.990 --> 00:02:41.834
it returns something that can be invoked.

36
00:02:41.834 --> 00:02:48.046
In XState, that could either be
returning a promise, an observable,

37
00:02:48.046 --> 00:02:53.119
a callback, which we'll get into,
or another machine,

38
00:02:53.119 --> 00:02:58.520
which is something that we're
going to see on the final task.

39
00:02:59.580 --> 00:03:06.347
So in this case, we are just going
to create that saveAlarm promise,

40
00:03:06.347 --> 00:03:11.376
which it's a function that
returns that promise.

41
00:03:11.376 --> 00:03:17.286
And onDone, notice the onDone
over here goes inside the invoke.

42
00:03:17.286 --> 00:03:20.528
onDone, we go to the active state.

43
00:03:20.528 --> 00:03:24.010
So now we don't have that success event.

44
00:03:24.010 --> 00:03:25.518
Instead, this is sort of built-in.

45
00:03:25.518 --> 00:03:29.340
So we are listening for
that promise to be done.

46
00:03:30.780 --> 00:03:32.590
And so now let's see if that works.

47
00:03:33.700 --> 00:03:38.434
So if we reload, after two seconds,
it goes to active.

48
00:03:38.434 --> 00:03:44.820
Now because promises can fail and
doing things async can fail,

49
00:03:44.820 --> 00:03:49.700
too, we also want to
handle errors as well.

50
00:03:49.700 --> 00:03:53.927
Now all of these that start with
on such as onDone, onError, and

51
00:03:53.927 --> 00:03:57.230
this on itself,
these are gonna be transitions.

52
00:03:57.230 --> 00:04:02.654
So this is the same as target active,
which means you could add conditions,

53
00:04:02.654 --> 00:04:06.129
you could add actions,
you could do whatever you

54
00:04:06.129 --> 00:04:11.230
would do in a normal transition
inside of onDone and/or onError.

55
00:04:11.230 --> 00:04:15.620
So onError, let's go to rejected.

56
00:04:16.750 --> 00:04:21.377
Now, of course, we wanna simulate
an error, so let's reject this.

57
00:04:24.872 --> 00:04:29.337
And so it's gonna be pending,
but it goes to rejected,

58
00:04:29.337 --> 00:04:33.450
which is exactly what we want to happen.

59
00:04:33.450 --> 00:04:38.032
Now promises, of course,
can return data as well,

60
00:04:38.032 --> 00:04:42.524
and so
we could just resolve this with just 100.

61
00:04:42.524 --> 00:04:49.520
And so we could say that we want to go
to the active state on the condition,

62
00:04:49.520 --> 00:04:55.570
and, of course,
conditions get context and event.

63
00:04:55.570 --> 00:05:01.520
The event over here is going to be a
special type of event called a done event.

64
00:05:01.520 --> 00:05:04.401
And that done event is going to have data.

65
00:05:04.401 --> 00:05:08.400
So we could say return event.data,

66
00:05:08.400 --> 00:05:15.754
let's just say if it's greater than 99,
which it is going to be.

67
00:05:15.754 --> 00:05:20.090
Otherwise, go to target rejected.

68
00:05:20.090 --> 00:05:24.558
So if the promise fails or
if the event.data is not greater than 99,

69
00:05:24.558 --> 00:05:26.550
it's gonna go to reject it.

70
00:05:26.550 --> 00:05:29.569
So after two seconds, goes active.

71
00:05:29.569 --> 00:05:31.117
Let's make this 999.

72
00:05:34.632 --> 00:05:37.620
Now it's gonna go to rejected.

73
00:05:39.510 --> 00:05:43.600
Now you can invoke more
things than just the promise.

74
00:05:43.600 --> 00:05:46.536
So instead of the saveAlarm promise,

75
00:05:46.536 --> 00:05:51.491
let's actually manually make
an alarm over here, or, sorry,

76
00:05:51.491 --> 00:05:57.270
a timeout, which alarms are sort
of timeouts if you think about it.

77
00:05:57.270 --> 00:06:03.030
So you could return a function
that takes two arguments.

78
00:06:03.030 --> 00:06:08.530
The first I'd like to call sendback,
and the second one is called receive.

79
00:06:09.560 --> 00:06:12.114
Now from here, let's just setTimeout.

80
00:06:12.114 --> 00:06:17.255
[COUGH] We could send back
pretty much any event.

81
00:06:17.255 --> 00:06:23.750
So we could send back, let's give
it that type success event again.

82
00:06:25.580 --> 00:06:28.755
And so
we're gonna do that after two seconds.

83
00:06:28.755 --> 00:06:33.807
And so now we don't need this onDone
because since it's a callback,

84
00:06:33.807 --> 00:06:37.303
there's no way to know
when a callback is done.

85
00:06:37.303 --> 00:06:41.688
A callback could just send events
back to the parent machine

86
00:06:41.688 --> 00:06:43.976
basically whenever it wants.

87
00:06:43.976 --> 00:06:46.740
So we'll add the success back in here.

88
00:06:46.740 --> 00:06:48.870
And now let's make sure that it works.

89
00:06:48.870 --> 00:06:54.040
So we click this, after two seconds,
it goes to active.

90
00:06:54.040 --> 00:07:00.110
Now, a callback function
can also receive events.

91
00:07:00.110 --> 00:07:05.672
So receive is a function that
takes the event that's received,

92
00:07:05.672 --> 00:07:09.080
and then it could do something with it.

93
00:07:09.080 --> 00:07:15.260
So let's console.log that event
just to show you what that is.

94
00:07:15.260 --> 00:07:21.122
And so if I toggle, let's do two things.

95
00:07:21.122 --> 00:07:24.911
Let's make the target inactive and

96
00:07:24.911 --> 00:07:30.690
let's also, Send an event.

97
00:07:30.690 --> 00:07:35.010
So this is going to be imported
from XState, not this one.

98
00:07:35.010 --> 00:07:39.430
It's going to be imported from XState,
and this is also an action creator.

99
00:07:41.800 --> 00:07:46.932
This returns a special
send object that can

100
00:07:46.932 --> 00:07:54.356
send an event directly to a spawned
actor or an invoked actor.

101
00:07:54.356 --> 00:07:58.451
So we're going to, in this case,

102
00:07:58.451 --> 00:08:04.230
send type GOODBYE, just as an example.

103
00:08:04.230 --> 00:08:07.726
And we're going to specify
that this is going to go to,

104
00:08:07.726 --> 00:08:09.936
let's give this an id of timeout.

105
00:08:09.936 --> 00:08:14.002
We're gonna say that this
goes to that timeout actor.

106
00:08:14.002 --> 00:08:18.699
So we're giving it an id so that we could
refer to it anywhere in the machine.

107
00:08:20.627 --> 00:08:25.960
So let's say that we click here,
and then we click again.

108
00:08:25.960 --> 00:08:33.000
Then we get unable to send event
to child timeout from the machine.

109
00:08:33.000 --> 00:08:36.961
So the reason that this is
happening is because, and

110
00:08:36.961 --> 00:08:42.724
this is another important lesson,
a callback, or sorry, not a callback,

111
00:08:42.724 --> 00:08:47.693
but any invocation is only active
within the state that it's in.

112
00:08:47.693 --> 00:08:51.528
So let's take off this target and
try this again.

113
00:08:54.857 --> 00:08:59.721
So if we click, you see that we
received that type GOODBYE over there.

114
00:09:02.637 --> 00:09:08.941
So yeah, that's how a callback
could both send and receive events.

115
00:09:08.941 --> 00:09:15.532
And also you could, T,
timeout = setTimeout.

116
00:09:15.532 --> 00:09:20.233
Just like useEffect,
you could return a function that

117
00:09:20.233 --> 00:09:24.230
cleans up whatever you
have in that callback.

118
00:09:24.230 --> 00:09:28.910
So callbacks are very, very versatile
when it comes to invoking stuff.

119
00:09:28.910 --> 00:09:33.123
And so you could return, let's say,

120
00:09:33.123 --> 00:09:40.250
clearTimeout that timeout,
and then it'll be canceled.

121
00:09:40.250 --> 00:09:45.639
So we're not going to get that success
event if we get out of that state.

122
00:09:45.639 --> 00:09:48.789
So I'm going to do this.

123
00:09:50.370 --> 00:09:53.720
And I'm gonna console.log cleaning up.

124
00:09:55.980 --> 00:09:58.264
And so
now we'll see that when we click this, and

125
00:09:58.264 --> 00:10:01.886
then we click again to get out of that
state, we get that cleaning up message,

126
00:10:01.886 --> 00:10:03.864
and so we know that cleanup is happening.

127
00:10:06.854 --> 00:10:11.255
So yeah, to learn more about this,
in the XState docs,

128
00:10:11.255 --> 00:10:14.824
this is in the guides for
invoking services.

129
00:10:14.824 --> 00:10:18.825
And it talks about how to do
them with promises, callbacks,

130
00:10:18.825 --> 00:10:20.870
observables, and machines.

