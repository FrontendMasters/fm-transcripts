WEBVTT

1
00:00:00.290 --> 00:00:03.863
I want to address a common
question that comes into play

2
00:00:03.863 --> 00:00:08.450
when you're working with state
machines and XState in React.

3
00:00:08.450 --> 00:00:13.755
And one of the main questions that
comes up is, how do machines with

4
00:00:13.755 --> 00:00:19.530
useds machine or whatever,
how do they work with other libraries?

5
00:00:19.530 --> 00:00:24.870
And so obviously, we can't make an adapter
for every single popular library.

6
00:00:24.870 --> 00:00:32.230
So instead of doing that,
we essentially communicate via events.

7
00:00:32.230 --> 00:00:37.970
And so that's what XState and just
the general concept of state machines and

8
00:00:37.970 --> 00:00:44.350
state charts really provides as a benefit,
is that everything is one of two things.

9
00:00:44.350 --> 00:00:48.295
It's either a state or
it's an events that you send to a machine,

10
00:00:48.295 --> 00:00:53.750
which could in turn change the states or
execute actions or anything like that.

11
00:00:53.750 --> 00:00:58.920
So in the complete app, you might have
noticed something in here called clock.

12
00:00:58.920 --> 00:01:02.388
Now this clock is meant to be
sort of a time zone clock so

13
00:01:02.388 --> 00:01:05.830
you could see what time it
is in other time zones.

14
00:01:05.830 --> 00:01:11.940
But let's say that I want to
asynchronously fetch a list of time zones.

15
00:01:11.940 --> 00:01:15.570
And I found this excellent world
time API that allows me to do that.

16
00:01:15.570 --> 00:01:19.440
It returns me an array
of time zones in JSON.

17
00:01:19.440 --> 00:01:24.674
And I could use those time zones
directly to change the time and

18
00:01:24.674 --> 00:01:29.420
just get whatever time
it is in that time zone.

19
00:01:29.420 --> 00:01:33.724
So I'm using useQuery,
which if you're not familiar,

20
00:01:33.724 --> 00:01:37.680
React's query is an excellent library.

21
00:01:37.680 --> 00:01:39.610
It's basically a caching solution.

22
00:01:39.610 --> 00:01:43.690
It advertises hooks for fetching,
but it does a lot more than that.

23
00:01:43.690 --> 00:01:47.090
It does have some advanced caching logic,
so

24
00:01:47.090 --> 00:01:53.230
that you don't have to make repeated API
calls and all sorts of other things.

25
00:01:53.230 --> 00:01:55.555
Now, there's no adapter for

26
00:01:55.555 --> 00:02:01.240
using React query with XState's React,
but that's not the point.

27
00:02:01.240 --> 00:02:04.098
The point is any change that happens or

28
00:02:04.098 --> 00:02:08.130
anything you want to
communicate is done via events.

29
00:02:09.450 --> 00:02:11.206
And same thing with side effects,

30
00:02:11.206 --> 00:02:15.519
if you want any side effect to happen with
a certain library, you do that in actions.

31
00:02:15.519 --> 00:02:18.452
And so you could do what
we did in previous lessons,

32
00:02:18.452 --> 00:02:23.520
which is parameterize those actions and
execute them by calling the library.

33
00:02:23.520 --> 00:02:28.286
So in this example, I'm fetching
the time zones from the world time API.

34
00:02:28.286 --> 00:02:31.074
And I need to notify my
foreignClockMachine,

35
00:02:31.074 --> 00:02:33.500
which I'll show you over here.

36
00:02:33.500 --> 00:02:37.402
I have time zones in context
which right now is null but

37
00:02:37.402 --> 00:02:43.100
I need to inform my foreignClockMachine
that I received some time zones.

38
00:02:43.100 --> 00:02:46.380
And so we could do that via an event.

39
00:02:46.380 --> 00:02:50.475
So notice, this machine knows
nothing about React's query.

40
00:02:50.475 --> 00:02:53.510
It only knows of events that it receives.

41
00:02:53.510 --> 00:02:57.288
So if we get that TIMEZONES.LOADED,

42
00:02:57.288 --> 00:03:03.670
we could assign time zones to that
data that comes in that event.

43
00:03:05.340 --> 00:03:08.729
And so
you could see it happens really fast, but

44
00:03:08.729 --> 00:03:13.510
the time zones are loaded and
they populate this select drop down.

45
00:03:13.510 --> 00:03:19.640
And then we could select one and then it
shows the correct time zone over there.

46
00:03:19.640 --> 00:03:21.361
So what's great about this is,

47
00:03:21.361 --> 00:03:24.742
if you decide to use something
different than React's query or

48
00:03:24.742 --> 00:03:28.441
you want to tweak anything with
React's query or any other library,

49
00:03:28.441 --> 00:03:33.380
if you're using an Apollo client, then
it could basically behave the same way.

50
00:03:33.380 --> 00:03:37.600
So your component is essentially
communicating with the machine by

51
00:03:37.600 --> 00:03:39.580
events and events only.

52
00:03:39.580 --> 00:03:44.224
And I personally think that really
simplifies just how the logic

53
00:03:44.224 --> 00:03:46.990
works in your application.

54
00:03:46.990 --> 00:03:53.650
So yeah, that's how you could use
XState React with basically any library.

55
00:03:55.120 --> 00:03:56.692
Any questions on that?

56
00:03:56.692 --> 00:04:01.909
&gt;&gt; If that applies to server side as well
for node, cuz, I mean, I don't know, I

57
00:04:01.909 --> 00:04:07.617
imagine there's probably a use case on the
server side for this stuff, too, maybe.

58
00:04:07.617 --> 00:04:09.590
I don't no, but.

59
00:04:09.590 --> 00:04:13.560
&gt;&gt; Okay, so that's a really good question.

60
00:04:13.560 --> 00:04:19.740
The question was about whether this same
idea works on the node side as well.

61
00:04:19.740 --> 00:04:22.491
So I can tell you from personal
experience that it definitely does.

62
00:04:22.491 --> 00:04:26.254
And that's definitely
a really good use case for

63
00:04:26.254 --> 00:04:30.661
basically how do you communicate
with other libraries,

64
00:04:30.661 --> 00:04:34.908
whether it's on the server side or
on the client side?

65
00:04:34.908 --> 00:04:38.726
One exercise that you could
do is actually try to

66
00:04:38.726 --> 00:04:42.743
communicate with WebSockets
on the server side.

67
00:04:42.743 --> 00:04:45.250
This is something that I had to do myself.

68
00:04:45.250 --> 00:04:52.010
And the WebSockets API has a bunch of just
places where you could add callbacks.

69
00:04:52.010 --> 00:04:56.750
And so those callbacks are places where
you could send in events to a machine.

70
00:04:56.750 --> 00:05:04.420
And so the machine's actions can also
do things to that WebSocket as well.

71
00:05:04.420 --> 00:05:08.100
So definitely a use case and
I have done that in the past.

