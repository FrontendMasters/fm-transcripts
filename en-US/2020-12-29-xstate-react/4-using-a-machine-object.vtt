WEBVTT

1
00:00:00.550 --> 00:00:05.153
Now I know that this switch statement
could be a little bit unruly and

2
00:00:05.153 --> 00:00:07.350
sort of just a lot of typing.

3
00:00:07.350 --> 00:00:10.770
So that's why I like using
a machine object instead.

4
00:00:10.770 --> 00:00:14.221
And this is the same technique that
if you saw the first workshop,

5
00:00:14.221 --> 00:00:16.500
this is going to be
exactly the same thing.

6
00:00:16.500 --> 00:00:23.380
So if we say const machine =,
actually we'll put this on the outside.

7
00:00:23.380 --> 00:00:28.204
So let's have oops,
const alarmMachine, and

8
00:00:28.204 --> 00:00:32.190
this is just going to be a plain object.

9
00:00:32.190 --> 00:00:36.280
We're not using X State yet, but this is
going to look very similar to X State.

10
00:00:36.280 --> 00:00:43.360
Let's put in initial property of
inactive and let's have some states.

11
00:00:43.360 --> 00:00:47.896
So we're gonna have inactive,

12
00:00:47.896 --> 00:00:51.270
pending, and active.

13
00:00:51.270 --> 00:00:53.919
And then in each one of these states,

14
00:00:53.919 --> 00:00:59.058
we could sort of just define what
should happen when in events arrives.

15
00:00:59.058 --> 00:01:04.323
So we have toggle, and
we're going to say on toggle,

16
00:01:04.323 --> 00:01:07.365
we're going to go to pending.

17
00:01:07.365 --> 00:01:10.319
On success, we're going to go to active.

18
00:01:10.319 --> 00:01:14.500
And on active,
when we toggle we go back to inactive.

19
00:01:14.500 --> 00:01:21.130
And we also wants to add toggle
that goes back to inactive.

20
00:01:21.130 --> 00:01:22.950
So we have our full machine here.

21
00:01:22.950 --> 00:01:26.770
And honestly, this looks a lot cleaner
than having the switch statement.

22
00:01:26.770 --> 00:01:28.940
And again, this isn't some sort of API.

23
00:01:28.940 --> 00:01:31.400
It's just a plain JavaScript object.

24
00:01:31.400 --> 00:01:35.450
You could represent this as JSON, parse
it, all sorts of cool things with it.

25
00:01:36.520 --> 00:01:41.890
And so this could actually replace
our alarmReducer right over here.

26
00:01:41.890 --> 00:01:44.320
So I'm going to just comment this out.

27
00:01:44.320 --> 00:01:49.420
I'm going to say nextState
= the current state of

28
00:01:49.420 --> 00:01:54.407
the machine, so machine.states[states].

29
00:01:54.407 --> 00:01:58.217
And then we're going to,
what did I call this,

30
00:01:58.217 --> 00:02:02.804
alarmMachine, so
alarmMachine.states[states].

31
00:02:02.804 --> 00:02:08.890
And then we're going to do .on and
get the event.type.

32
00:02:08.890 --> 00:02:11.979
Now, if a success event happens
in one of these states,

33
00:02:11.979 --> 00:02:14.640
obviously that's going to be undefined.

34
00:02:14.640 --> 00:02:17.510
So we want to default
to the current state.

35
00:02:18.560 --> 00:02:21.460
And then we just return the nextState.

36
00:02:22.890 --> 00:02:27.029
So as you can see a dramatic
reduction in code over here,

37
00:02:27.029 --> 00:02:30.037
there's really almost nothing to see.

38
00:02:30.037 --> 00:02:34.781
And that's just because we're just
going through that object and

39
00:02:34.781 --> 00:02:40.750
determining what the next state should be
given the events and the current state.

40
00:02:40.750 --> 00:02:43.749
So let's go ahead and
see if that works and

41
00:02:43.749 --> 00:02:49.400
we have successfully replaced our
reducer or our switch statement.

42
00:02:49.400 --> 00:02:53.811
So let's see, we click here after
two seconds goes to active,

43
00:02:53.811 --> 00:02:56.400
after two seconds it goes to active.

44
00:02:56.400 --> 00:03:00.310
Let's try canceling, cancel, okay?

45
00:03:00.310 --> 00:03:02.720
So our logic works here.

46
00:03:02.720 --> 00:03:07.300
And yeah, we have a machine.

47
00:03:09.050 --> 00:03:13.791
So that was basically just
how to convert your logic

48
00:03:13.791 --> 00:03:18.130
into essentially what is a state machine.

49
00:03:18.130 --> 00:03:22.730
And you saw that there's many
ways of creating a state machine.

50
00:03:22.730 --> 00:03:26.280
If you prefer switch statements,
you can use those in alarm reducer.

51
00:03:26.280 --> 00:03:30.360
If you prefer objects like I do, then
you could do the same thing over here.

52
00:03:30.360 --> 00:03:32.680
It's actually a lot cleaner.

53
00:03:32.680 --> 00:03:37.965
And what's cool about this too is that
you could copy and paste this and

54
00:03:37.965 --> 00:03:42.993
use it in the visualization
tools such as xstate.js.org/vis.

55
00:03:42.993 --> 00:03:46.380
Spoiler alert, this is the old visualizer.

56
00:03:46.380 --> 00:03:48.417
There is a new one that I'll show you.

57
00:03:48.417 --> 00:03:53.611
And inside machine you could copy and
paste that exact same machine code,

58
00:03:53.611 --> 00:03:59.620
click Update, and you're able to visualize
what the machine will look like.

59
00:03:59.620 --> 00:04:04.544
Now remember, we're not using X State yet,
but we're using that exact same

60
00:04:04.544 --> 00:04:09.561
object structure, which is going to be
what X State actually uses for its API.

61
00:04:09.561 --> 00:04:12.501
And then you could go through
each of the events and

62
00:04:12.501 --> 00:04:17.190
understand the complete flow of
how your components should work.

63
00:04:17.190 --> 00:04:21.338
So that's what I love about
state machines is it's

64
00:04:21.338 --> 00:04:25.130
a primarily visual way of modeling logic.

65
00:04:25.130 --> 00:04:27.070
I'm a very visual person.

66
00:04:27.070 --> 00:04:29.420
I know a lot of you might be as well.

67
00:04:29.420 --> 00:04:32.310
So that's what I really
like about state machines.

