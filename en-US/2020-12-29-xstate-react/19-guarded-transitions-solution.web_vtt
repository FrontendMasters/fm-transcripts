WEBVTT

1
00:00:00.690 --> 00:00:05.370
All right, so
let's fix our timer logic over here.

2
00:00:05.370 --> 00:00:10.500
We want to prevent it from
basically going into overtime.

3
00:00:10.500 --> 00:00:16.435
And we want it to go to an expired state
when you know when we exceed the time so

4
00:00:16.435 --> 00:00:18.900
let's make an expired state.

5
00:00:20.930 --> 00:00:25.680
And we also want these expired states to
go to the idle state on the reset event.

6
00:00:27.610 --> 00:00:30.315
So by adding those few lines of code,

7
00:00:30.315 --> 00:00:34.690
that same reset button is going
to change that state for us.

8
00:00:34.690 --> 00:00:37.260
So that all works fine.

9
00:00:37.260 --> 00:00:42.747
Now this tick transition is
a bit problematic because that's

10
00:00:42.747 --> 00:00:48.650
what's causing our machine to or
our timer to overflow.

11
00:00:48.650 --> 00:00:53.010
So we wanna make this into
a conditional or guarded transition.

12
00:00:53.010 --> 00:00:55.650
And that's by adding the cond.

13
00:00:55.650 --> 00:00:59.886
So basically,
we want to test that if we add

14
00:00:59.886 --> 00:01:04.476
context dot elapsed in
context dot interval,

15
00:01:04.476 --> 00:01:09.010
is that greater than the total duration.

16
00:01:09.010 --> 00:01:12.180
If it's not,
then we could keep incrementing.

17
00:01:12.180 --> 00:01:13.910
That elapsed time.

18
00:01:13.910 --> 00:01:18.785
So we'll take the context and
we're going to

19
00:01:18.785 --> 00:01:24.320
return context.elapsed + context.interval.

20
00:01:24.320 --> 00:01:29.829
We wanted to make sure that
that's &lt;= context.duration.

21
00:01:32.391 --> 00:01:36.935
Now, if that's not the case, and

22
00:01:36.935 --> 00:01:42.423
that we're gonna exceed that duration,

23
00:01:42.423 --> 00:01:46.672
then we go to the expired state.

24
00:01:46.672 --> 00:01:52.010
So by adding that logic,
hopefully this should take us to expired.

25
00:01:52.010 --> 00:01:55.520
Three, two, one, zero.

26
00:01:55.520 --> 00:01:57.470
Let's refresh.

27
00:01:57.470 --> 00:02:02.566
Five, four, three, two, one,
zero and it goes to expired, and

28
00:02:02.566 --> 00:02:09.200
there's There's already an animation
added for you to show what happens there.

29
00:02:09.200 --> 00:02:13.090
Now, let's also test the reset button and
it goes right back to five.

30
00:02:14.930 --> 00:02:19.340
So were there any questions
about that exercise?

31
00:02:19.340 --> 00:02:22.750
David, what would be a good way
to have it shows zero at the end?

32
00:02:22.750 --> 00:02:27.377
Like one way i thought of was to set the
actual elapsed time to the duration, but

33
00:02:27.377 --> 00:02:31.000
I don't know if that would be
a good way to do it or what?

34
00:02:31.000 --> 00:02:37.788
&gt;&gt; So the question was about how do
we actually make it show zero?And so,

35
00:02:37.788 --> 00:02:42.621
this this is actually
an interesting question cuz

36
00:02:42.621 --> 00:02:48.370
we're basically trying to,
calculate and stop.

37
00:02:48.370 --> 00:02:52.570
If the interval goes over,
which could be a decimal like point one.

38
00:02:52.570 --> 00:02:57.400
In this case,
we wanna prevent it from going, past zero.

39
00:02:57.400 --> 00:03:01.022
So basically we wanna show zero
&gt;&gt; On the expired states,

40
00:03:01.022 --> 00:03:05.927
in the complete exercise, you'll see that
it actually goes past zero because we do

41
00:03:05.927 --> 00:03:08.500
want to show those negative numbers.

42
00:03:08.500 --> 00:03:13.396
But if we do want to show
zero on the expired state,

43
00:03:13.396 --> 00:03:17.489
we could let's go to the timer over here.

44
00:03:19.520 --> 00:03:26.290
And we could display a different
text based on the states.

45
00:03:26.290 --> 00:03:32.500
So, over here, we're calculating
the ceiling of duration minus elapsed.

46
00:03:32.500 --> 00:03:35.963
And now you could do a little bit of
math there to figure out is it really

47
00:03:35.963 --> 00:03:37.170
close to zero?

48
00:03:37.170 --> 00:03:38.780
If so then make it 0.

49
00:03:38.780 --> 00:03:41.910
Or you could be a little
bit more explicit.

50
00:03:41.910 --> 00:03:48.184
So you could say State DOT
value is expired.0,

51
00:03:48.184 --> 00:03:52.622
otherwise that so now when you when

52
00:03:52.622 --> 00:03:57.534
this goes down to 0 It will show zero.

53
00:03:57.534 --> 00:04:02.099
And you could also,
have a message that says done so

54
00:04:02.099 --> 00:04:06.248
that might be something
you wanna customize.

55
00:04:06.248 --> 00:04:11.610
And so that's why you might
not wanna do all that math.

56
00:04:11.610 --> 00:04:15.260
And just do something else
haven't seen done or something.

57
00:04:15.260 --> 00:04:19.194
&gt;&gt; And that case, you wouldn't recommend
doing anything on the machine,

58
00:04:19.194 --> 00:04:22.160
forcing the lapse to be exactly
equal to the duration or

59
00:04:22.160 --> 00:04:26.210
something like maybe when you enter
the expired state, for example.

60
00:04:26.210 --> 00:04:32.790
&gt;&gt; So the question was, well, we don't
wanna add basically that view logic.

61
00:04:32.790 --> 00:04:37.240
To the machine where we're forcing it
to be zero or something like that.

62
00:04:37.240 --> 00:04:42.880
And I would say, yeah, definitely
don't add that logic to the machine.

63
00:04:42.880 --> 00:04:47.609
In general don't add logic that
could be that could be inferred

64
00:04:47.609 --> 00:04:51.750
from machine itself or
derived from its context.

65
00:04:51.750 --> 00:04:56.160
For example,
the time remaining is over here,

66
00:04:56.160 --> 00:05:04.100
Math.ceil(duration-elapsed),
context.duration, context.elapsed.

67
00:05:04.100 --> 00:05:07.760
So it doesn't really make sense to
have that in the context as well.

68
00:05:09.360 --> 00:05:13.760
I mean, obviously you could if you wanted
to, but that just adds a little bit of

69
00:05:13.760 --> 00:05:16.910
extra complexity that really
only belongs in the view.

70
00:05:16.910 --> 00:05:21.750
&gt;&gt; I missed the point about in
the tic state, it's in an array.

71
00:05:21.750 --> 00:05:26.283
Is it in an array just cause
we have a conditional with a,

72
00:05:26.283 --> 00:05:29.880
sorry, a guard with an alternate target?

73
00:05:29.880 --> 00:05:32.130
Is that why it's in an array?

74
00:05:32.130 --> 00:05:35.670
Format, so the question is why?

75
00:05:35.670 --> 00:05:41.509
Why is this in array and
presumably why are the other transitions

76
00:05:41.509 --> 00:05:46.480
not in an array,
putting them in an array will work.

77
00:05:46.480 --> 00:05:50.839
So you can actually have
multiple transitions for

78
00:05:50.839 --> 00:05:55.836
an event and the sex and
male spec specifies this as well.

79
00:05:55.836 --> 00:06:00.974
So org.tr.scxml.

80
00:06:00.974 --> 00:06:05.330
In fact, this is getting
a little bit into the spec.

81
00:06:05.330 --> 00:06:08.660
But in the States,
you could have a trends.

82
00:06:08.660 --> 00:06:12.640
You could have basically
multiple transitions.

83
00:06:12.640 --> 00:06:15.780
And so those transitions
could have the same events.

84
00:06:15.780 --> 00:06:20.568
Now the way that the spec defines
to choose the transition is by

85
00:06:20.568 --> 00:06:22.170
document order.

86
00:06:22.170 --> 00:06:23.046
In other words,

87
00:06:23.046 --> 00:06:27.730
the first one that it sees is the first
one that it's going to try to take.

88
00:06:27.730 --> 00:06:32.169
And obviously the condition is there so
that if the condition doesn't pass,

89
00:06:32.169 --> 00:06:36.520
that transition won't be taken,
and it'll move to the next one.

90
00:06:36.520 --> 00:06:42.770
So, XC does have a lot of conveniences for
you this array is optional.

91
00:06:42.770 --> 00:06:45.768
And just having an object
here is optional,

92
00:06:45.768 --> 00:06:48.765
even though you can make target paused and
so

93
00:06:48.765 --> 00:06:54.290
if you have only one you don't need that
array, but you could definitely add it.

94
00:06:54.290 --> 00:06:54.920
If you wanna

