WEBVTT

1
00:00:00.158 --> 00:00:05.887
I wanna talk about how you could share
machines between different components.

2
00:00:05.887 --> 00:00:11.937
And there's really in reacts there's two
ways to do this, in XD just using XD

3
00:00:11.937 --> 00:00:17.353
in a general way there is one way
which is interpreting that machine.

4
00:00:17.353 --> 00:00:22.240
And basically subscribing to that
interpreted machine from anywhere,

5
00:00:22.240 --> 00:00:26.897
and we could essentially do the same
thing with the use service hook.

6
00:00:26.897 --> 00:00:31.875
So let's say that we have,
actually let's take a look at

7
00:00:31.875 --> 00:00:35.828
a real example over here
in the complete app.

8
00:00:35.828 --> 00:00:41.095
We have a clock,
just go back to complete we have

9
00:00:41.095 --> 00:00:46.772
a clock over here that
basically gives us the time.

10
00:00:46.772 --> 00:00:51.115
And let's select the time zone
like somewhere in Africa, so

11
00:00:51.115 --> 00:00:53.595
this is showing the correct time.

12
00:00:53.595 --> 00:00:56.650
And so we have this clock component and

13
00:00:56.650 --> 00:01:00.284
also we have this foreign
clock components.

14
00:01:00.284 --> 00:01:05.867
What we want to do though,
is we want to synchronize this with this.

15
00:01:05.867 --> 00:01:10.878
So basically we want to listen for
changes on this machine and

16
00:01:10.878 --> 00:01:14.915
have it be reflected in
that machine over there.

17
00:01:14.915 --> 00:01:20.011
Now if you're coming from Redux or
you're using just React with,

18
00:01:20.011 --> 00:01:24.289
use reducer,
this might seem like a familiar problem.

19
00:01:24.289 --> 00:01:29.335
You have some global data which you
want to somehow use everywhere.

20
00:01:29.335 --> 00:01:35.086
And so that goes both ways, both being
able to update that data from somewhere.

21
00:01:35.086 --> 00:01:37.456
Or sending events from anywhere, and

22
00:01:37.456 --> 00:01:40.500
also being able to read
that data from anywhere.

23
00:01:40.500 --> 00:01:44.939
So the way we could do that
in react is via context,

24
00:01:44.939 --> 00:01:48.323
over here I have local time context and

25
00:01:48.323 --> 00:01:52.780
I'm using creates context
from react to do that.

26
00:01:52.780 --> 00:01:58.839
Keep in mind, by the way React context
is different than XState contexts.

27
00:01:58.839 --> 00:02:05.240
Those two terms are basically very
general terms, so just keep that in mind.

28
00:02:05.240 --> 00:02:10.164
So this local context,
we could provide the service and

29
00:02:10.164 --> 00:02:14.668
so what that's going to do
is it's going to provide

30
00:02:14.668 --> 00:02:18.247
something that could be subscribed to.

31
00:02:18.247 --> 00:02:23.954
What's great about this is that this
service, which is the third value

32
00:02:23.954 --> 00:02:29.863
returned from the tuple of use machine,
that service will never change.

33
00:02:29.863 --> 00:02:33.349
It's going to interpret this
clock machine create a service,

34
00:02:33.349 --> 00:02:35.529
and since that service never changes.

35
00:02:35.529 --> 00:02:40.253
We're not gonna get any unnecessary
renders because it's basically a live

36
00:02:40.253 --> 00:02:45.360
object that we could subscribe to, send
events to, without fear of it changing.

37
00:02:45.360 --> 00:02:50.273
Now in our foreign clock
component we could consume

38
00:02:50.273 --> 00:02:54.510
that service by using
the use context hook.

39
00:02:54.510 --> 00:02:59.760
So we use that local time context and
we're going to grab that service.

40
00:02:59.760 --> 00:03:02.256
Now there is a machine provided by or

41
00:03:02.256 --> 00:03:05.844
sorry hook provided by
XState called use service.

42
00:03:05.844 --> 00:03:10.736
It's similar to use machine in
that you get both the States and

43
00:03:10.736 --> 00:03:13.664
we'll call this local time, send.

44
00:03:13.664 --> 00:03:18.830
You get both of those same arguments
that you would get from use machine.

45
00:03:18.830 --> 00:03:25.421
You pass in the service to use service and
basically, you could read the state.

46
00:03:25.421 --> 00:03:28.885
And send in events just like
you could do with a local

47
00:03:28.885 --> 00:03:31.152
machine inside of a use machine.

48
00:03:31.152 --> 00:03:35.202
So we're gonna basically
listen to updates here and

49
00:03:35.202 --> 00:03:40.091
just like the lessons on using
third-party libraries doing.

50
00:03:40.091 --> 00:03:46.914
We are going to be listening for changes
every time this local time states changes.

51
00:03:46.914 --> 00:03:51.528
So whenever it changes we're just going
to send the time to our local machine

52
00:03:51.528 --> 00:03:52.257
over here.

53
00:03:52.257 --> 00:03:55.781
Which is this foreign clock machine and

54
00:03:55.781 --> 00:04:00.920
use that to keep it up to date
with the current local time.

55
00:04:05.141 --> 00:04:10.775
And so now if we go back here,
we select the time zone,

56
00:04:10.775 --> 00:04:14.920
so I'll refresh select the time zone.

57
00:04:14.920 --> 00:04:19.197
Now both of those are gonna
be kept in sync because we're

58
00:04:19.197 --> 00:04:24.210
communicating via components or
sorry, via contexts in react.

59
00:04:24.210 --> 00:04:29.071
So that our components can listen to those
changes and basically use them anywhere.

60
00:04:29.071 --> 00:04:34.019
Now keep in mind that
a service does not necessarily

61
00:04:34.019 --> 00:04:38.401
need to be defined within
a react component.

62
00:04:38.401 --> 00:04:41.527
So you might not even need
to use context to do this,

63
00:04:41.527 --> 00:04:43.795
again this depends on your use case.

64
00:04:43.795 --> 00:04:49.500
Using context is sort of the blessed
way to do it by react, but basically,

65
00:04:49.500 --> 00:04:55.033
if that service comes from somewhere,
you could use it in use service.

66
00:04:55.033 --> 00:04:57.158
Any questions about that?

67
00:04:57.158 --> 00:05:01.839
&gt;&gt; Yeah, so my to understand them
that you could, for example,

68
00:05:01.839 --> 00:05:06.082
just create a machine and
start the service and export.

69
00:05:06.082 --> 00:05:10.476
&gt;&gt; So basically you could
create a service from anywhere,

70
00:05:10.476 --> 00:05:16.656
have it exported as a module and then
import that in basically any components.

71
00:05:16.656 --> 00:05:21.008
Yes, you could technically do that,
I'm not sure how well that's going to

72
00:05:21.008 --> 00:05:25.431
work with things like fast refresh and
concurrent mode and things like that.

73
00:05:25.431 --> 00:05:31.075
But that does work,
it definitely does work,

74
00:05:31.075 --> 00:05:35.695
or at least over here it works, so
&gt;&gt; I can tell

75
00:05:35.695 --> 00:05:39.279
you from experience it does not
work well with fast refresh.

76
00:05:39.279 --> 00:05:40.913
&gt;&gt; With fast refresh?

77
00:05:40.913 --> 00:05:43.197
&gt;&gt; Yeah, react hot loading stuff,

78
00:05:43.197 --> 00:05:46.876
right obviously because
it's not any side of react.

79
00:05:46.876 --> 00:05:51.755
&gt;&gt; Yeah, so be careful of that with fast
refresh if you're using fast refresh,

80
00:05:51.755 --> 00:05:53.568
especially in next JS apps.

81
00:05:53.568 --> 00:05:59.079
You might see some issues and honestly,
that's because react wants control

82
00:05:59.079 --> 00:06:04.262
the state as much as possible but
XState also wants to control the state.

83
00:06:04.262 --> 00:06:08.871
So we are working on making it more
compatible with fast refresh, but

84
00:06:08.871 --> 00:06:11.422
that's not an easy problem to solve.

85
00:06:11.422 --> 00:06:12.896
So [LAUGH] yeah and

86
00:06:12.896 --> 00:06:19.016
that's why I've been doing hard
refreshes pretty often over here.

87
00:06:19.016 --> 00:06:24.056
&gt;&gt; I was gonna ask to I mean so do you
have the service, you could just interact

88
00:06:24.056 --> 00:06:29.284
with that service directly instead of
running it through the hook, right?

89
00:06:29.284 --> 00:06:33.411
&gt;&gt; Yeah, so the question was, can you just
interact with a service directly if you

90
00:06:33.411 --> 00:06:36.073
have a reference to it
instead of through the hook?

91
00:06:36.073 --> 00:06:42.103
Yes, you could absolutely do that,
again for purposes of just being compliant

92
00:06:42.103 --> 00:06:47.236
in the future with fast refresh
concurrent mode, stuff like that.

93
00:06:47.236 --> 00:06:50.026
You would probably still
want to use that hook,

94
00:06:50.026 --> 00:06:55.068
especially because the hook does more than
just provide a reference to that service.

95
00:06:55.068 --> 00:07:00.062
It also manages subscriptions
being able to seamlessly

96
00:07:00.062 --> 00:07:05.067
unsubscribe and
re subscribe if a new service comes in.

97
00:07:05.067 --> 00:07:06.156
So yeah.

