WEBVTT

1
00:00:00.148 --> 00:00:03.568
So for this final part,
I wanna talk to you about,

2
00:00:03.568 --> 00:00:06.183
actually testing your application.

3
00:00:06.183 --> 00:00:11.199
Now interestingly enough when
testing an application that

4
00:00:11.199 --> 00:00:16.825
might have these complex flows
where you can add, delete a timer.

5
00:00:16.825 --> 00:00:21.555
Go back and forth between clock and
timer, all of these different things.

6
00:00:21.555 --> 00:00:26.415
You could test it in a model based
testing way using x date without

7
00:00:26.415 --> 00:00:29.397
your application having to use x date.

8
00:00:29.397 --> 00:00:34.652
So if we created this entire
application with basically whatever

9
00:00:34.652 --> 00:00:39.333
we want to use, whether it's redox,
WebEx, recoil, or

10
00:00:39.333 --> 00:00:44.220
any of these other,
reacts libraries for managing States.

11
00:00:44.220 --> 00:00:49.044
It doesn't really matter we could
create model based tests for them.

12
00:00:49.044 --> 00:00:54.743
So let me just go over what
a model-based test is.

13
00:00:54.743 --> 00:01:00.596
In essence we have if you're familiar
with the given when then style of

14
00:01:00.596 --> 00:01:05.865
testing you have given,
which is when the app is in this state.

15
00:01:05.865 --> 00:01:11.361
And then you have the one part where
it's like when this event happens

16
00:01:11.361 --> 00:01:17.923
in that state, then you're asserting that
the app should be in this other state.

17
00:01:17.923 --> 00:01:22.537
So if you squint that sort of looks
like part of a state machine.

18
00:01:22.537 --> 00:01:27.949
And indeed you could describe the behavior
of your application as a state machine.

19
00:01:27.949 --> 00:01:30.930
So there isn't going to be an exercise for
this,

20
00:01:30.930 --> 00:01:34.216
it's just something that
he wants to explain to you.

21
00:01:34.216 --> 00:01:40.241
If we go to App.test.j s.

22
00:01:40.241 --> 00:01:42.230
We're we have another machine over here.

23
00:01:42.230 --> 00:01:45.350
This is called the testTimerAppMachine.

24
00:01:45.350 --> 00:01:51.315
And looking at the flow of this machine,
we had our initial state of new timer.

25
00:01:51.315 --> 00:01:57.332
And this is not going to be the same
machine that we use for the application.

26
00:01:57.332 --> 00:02:01.282
And the reason for this is because
we want to create a machine

27
00:02:01.282 --> 00:02:04.133
that describes the user's point of view.

28
00:02:04.133 --> 00:02:09.607
And so you can imagine like going
to a restaurant and ordering food.

29
00:02:09.607 --> 00:02:13.267
From your perspective,
you tell the waiter what you want.

30
00:02:13.267 --> 00:02:18.757
And you see them go away and then maybe
20 minutes later you have your food.

31
00:02:18.757 --> 00:02:22.751
So you might think okay,
those are the states you're ordering,

32
00:02:22.751 --> 00:02:26.175
you're waiting and
then you're eating three states.

33
00:02:26.175 --> 00:02:27.229
But in reality,

34
00:02:27.229 --> 00:02:31.987
the implementation details of that
might be something a lot more complex.

35
00:02:31.987 --> 00:02:34.822
The waiter has to go give
the order to the kitchen.

36
00:02:34.822 --> 00:02:39.776
The kitchen has to make the order, and
then the waiter has to serve other tables.

37
00:02:39.776 --> 00:02:44.210
A lot of things are happening
in between that waiting and

38
00:02:44.210 --> 00:02:48.753
eating state, and
that might not be visible to the user.

39
00:02:48.753 --> 00:02:53.959
So, yeah, we should be testing
from the perspective of of user.

40
00:02:53.959 --> 00:02:55.775
And so that's what we're doing here.

41
00:02:55.775 --> 00:03:00.649
If we look at the testTimerAppMachine
again in App.test.j s.

42
00:03:00.649 --> 00:03:04.205
We have an initial state of new timer for
instance.

43
00:03:04.205 --> 00:03:07.727
So if I reload this and go to complete,

44
00:03:07.727 --> 00:03:13.129
that's what I see as a user
right now this new timer state.

45
00:03:13.129 --> 00:03:17.461
And so I'm from here,
I could do two things.

46
00:03:17.461 --> 00:03:19.672
I could change the value,

47
00:03:19.672 --> 00:03:24.806
which is just entering a number here,
and then I could play.

48
00:03:24.806 --> 00:03:30.649
Now as a user, I know that I could
only play, if I've changed something,

49
00:03:30.649 --> 00:03:34.624
so I add a guarded transition
over here that says.

50
00:03:34.624 --> 00:03:40.854
If the value is greater than zero,
only then can I go to the timer state and

51
00:03:40.854 --> 00:03:45.157
then in the timer state I
could do a couple things.

52
00:03:45.157 --> 00:03:50.847
I could delete this timer, or
I could add a new timer and

53
00:03:50.847 --> 00:03:56.304
adding a timer takes me back
to this newTimer state.

54
00:03:56.304 --> 00:03:58.718
So there's this a library?

55
00:03:58.718 --> 00:04:03.915
Called x data test which allows
you to create a testing model.

56
00:04:03.915 --> 00:04:08.751
Currently, it's called create model
where you pass in that machine,

57
00:04:08.751 --> 00:04:12.227
and you specify what each
one of those events mean.

58
00:04:12.227 --> 00:04:18.408
In this case, we're using react testing
library, which is an excellent library

59
00:04:18.408 --> 00:04:23.616
in my opinion, better than enzyme for
testing react applications.

60
00:04:23.616 --> 00:04:25.749
And so with react testing library,

61
00:04:25.749 --> 00:04:30.025
I highly recommend you read the
documentation and look up how it works.

62
00:04:30.025 --> 00:04:37.308
Because there's a lot of libraries
under the testing library umbrella for

63
00:04:37.308 --> 00:04:41.825
view, or for spelt, or
even for just Raw DOM.

64
00:04:41.825 --> 00:04:47.237
And so, for example,
to execute the change event.

65
00:04:47.237 --> 00:04:52.177
We're telling this testing
model that executing it means

66
00:04:52.177 --> 00:04:56.724
we're finding this input
that has a duration title.

67
00:04:56.724 --> 00:04:58.691
And if you could see here, but

68
00:04:58.691 --> 00:05:03.348
if you hover over this,you'll see
the duration title show up there.

69
00:05:03.348 --> 00:05:09.224
And then we add 1,2,4 to the input.

70
00:05:09.224 --> 00:05:14.268
This is just a random number
that I decided to put there.

71
00:05:14.268 --> 00:05:18.082
And similarly the play event means
we're finding the add button.

72
00:05:18.082 --> 00:05:23.547
By getting this starts whatever timer
button and then we're clicking it.

73
00:05:23.547 --> 00:05:27.712
Delete means similarly we're
getting the delete button and

74
00:05:27.712 --> 00:05:32.622
clicking it and add we're getting
the Add button and we're adding it.

75
00:05:32.622 --> 00:05:35.613
Now you'll notice here we
describe the state machine.

76
00:05:35.613 --> 00:05:41.336
And we described each of
the events over here.

77
00:05:41.336 --> 00:05:44.384
So where are the actual tests?

78
00:05:44.384 --> 00:05:49.953
Well, this model has this get
simple path plans that describe all

79
00:05:49.953 --> 00:05:55.026
of the paths from the initial
states to every other states.

80
00:05:55.026 --> 00:05:56.951
And it generates that for you.

81
00:05:56.951 --> 00:06:02.483
And that's the basic idea
behind model based testing.

82
00:06:02.483 --> 00:06:06.602
So if we look back at
our machine over here.

83
00:06:06.602 --> 00:06:12.590
We could see that from the idle states,
there's a few paths that we could take.

84
00:06:12.590 --> 00:06:16.735
We could go from idle to
running on the toggle event.

85
00:06:16.735 --> 00:06:21.484
We could also go from idle
to running to paused or

86
00:06:21.484 --> 00:06:27.433
we could go from idle to running
to paused to running again.

87
00:06:27.433 --> 00:06:30.984
Or we could go from idle to running to
pause and then all the way to idle.

88
00:06:30.984 --> 00:06:37.999
So there's many ways to you to go
about this machine or to traverse it.

89
00:06:37.999 --> 00:06:44.080
A simple path is a path
that doesn't repeat states.

90
00:06:44.080 --> 00:06:46.067
So it's not the shortest path.

91
00:06:46.067 --> 00:06:49.291
But it is a path where, for example,

92
00:06:49.291 --> 00:06:53.764
we go from A to B to C to D, but
never A to B to C to B to D.

93
00:06:53.764 --> 00:06:58.201
Because we are not repeating
that these states.

94
00:06:58.201 --> 00:07:04.237
So with react, sorry with XD tests,
you get those plans and

95
00:07:04.237 --> 00:07:09.932
each plan has a description
which is generated for you.

96
00:07:09.932 --> 00:07:13.928
And each testing plan has a path
which is generated for you.

97
00:07:13.928 --> 00:07:17.505
And that path is basically
going from one state and

98
00:07:17.505 --> 00:07:21.181
traversing these transitions
to another states.

99
00:07:21.181 --> 00:07:27.116
And, in each of the tests,
we rendered the timer app and

100
00:07:27.116 --> 00:07:31.170
then we test that rendered timer app.

101
00:07:31.170 --> 00:07:33.927
There's a few articles on this by the way,

102
00:07:33.927 --> 00:07:36.767
I'm just giving you
a brief overview of it.

103
00:07:36.767 --> 00:07:41.040
The way that we test each state
is in the meta, test property.

104
00:07:41.040 --> 00:07:45.779
We could say when we're in the state,
for example,

105
00:07:45.779 --> 00:07:51.380
when we're in the new timer state,
we should see a newTimer or

106
00:07:51.380 --> 00:07:55.169
something with data test id =new timer.

107
00:07:55.169 --> 00:08:01.844
And this is going to throw an error by the
way, if it doesn't find that test id so.

108
00:08:04.077 --> 00:08:09.022
So let's actually run these tests and
show you what the output is.

109
00:08:09.022 --> 00:08:17.058
So if I run yarn test, It's going to be
calculating all of those simple paths.

110
00:08:17.058 --> 00:08:21.920
And it's going to show a failure,
cannot find module complete timerApp,

111
00:08:21.920 --> 00:08:24.090
that's completely unrelated.

112
00:08:24.090 --> 00:08:28.605
So Let's just see what that's called.

113
00:08:28.605 --> 00:08:31.807
It's called something else,

114
00:08:31.807 --> 00:08:36.615
it's called EPP, so
we get EPP oops from app.

115
00:08:38.121 --> 00:08:44.902
Okay, so you could see here that the be
tested didn't find that timerApp.

116
00:08:44.902 --> 00:08:49.054
So we're going to this
is why testing is good.

117
00:08:49.054 --> 00:08:52.109
The errors are expected.

118
00:08:52.109 --> 00:08:54.359
All right.

119
00:08:54.359 --> 00:09:00.335
So when the test runs, it's going to
generate in this case five simple paths.

120
00:09:00.335 --> 00:09:06.810
So for instance, it says it reaches
state machines, new timers, no timers.

121
00:09:06.810 --> 00:09:11.359
So it's saying that it reached that child,
no timer state,

122
00:09:11.359 --> 00:09:14.497
which is actually a really trivial test.

123
00:09:14.497 --> 00:09:16.321
That's basically testing.

124
00:09:16.321 --> 00:09:18.959
Does it end up or when you load the app?

125
00:09:18.959 --> 00:09:20.214
Is it on this screen?

126
00:09:20.214 --> 00:09:22.320
Is it on this no timer screen?

127
00:09:22.320 --> 00:09:24.297
And then there's this one.

128
00:09:24.297 --> 00:09:29.755
We're testing it reaches date no timers,
with 124.

129
00:09:29.755 --> 00:09:33.344
So basically it's saying
when we type in a value,

130
00:09:33.344 --> 00:09:38.131
in this case 124, it should still
be on this no timers state, so

131
00:09:38.131 --> 00:09:42.070
nothing should change which
Is exactly what happens.

132
00:09:42.070 --> 00:09:48.282
And then we have reached a state timer,
which is saying that.

133
00:09:48.282 --> 00:09:52.737
When we click Change, or
sorry when we do the change event,

134
00:09:52.737 --> 00:09:58.991
which is typing 124 in here, and we click
play, we should be in the timer state.

135
00:09:58.991 --> 00:10:02.984
So that's one of the paths
that's generated.

136
00:10:02.984 --> 00:10:08.797
And then there's reaches state
new timer after deleted.

137
00:10:08.797 --> 00:10:12.985
And so that's if we click or
if we change it, we play it,

138
00:10:12.985 --> 00:10:16.211
and then we delete it while it's running.

139
00:10:16.211 --> 00:10:18.830
It should be in this new timer state.

140
00:10:18.830 --> 00:10:24.135
Now, the reason that we have
nested states over here is that.

141
00:10:24.135 --> 00:10:29.602
If we,
let's say that we just go to new timer and

142
00:10:29.602 --> 00:10:33.718
we don't have this after deleted.

143
00:10:33.718 --> 00:10:37.280
So, go ahead and save that.

144
00:10:37.280 --> 00:10:40.307
You're gonna notice that
it generates less tests and

145
00:10:40.307 --> 00:10:42.734
it doesn't even test that delete events.

146
00:10:42.734 --> 00:10:47.437
And that's because the model
based tests are seeing that,

147
00:10:47.437 --> 00:10:50.634
we already been to the new timer state and

148
00:10:50.634 --> 00:10:55.071
I already asserted it so
I don't want to visit it again.

149
00:10:55.071 --> 00:10:59.697
So we could tell it that this
is actually a different state.

150
00:10:59.697 --> 00:11:04.791
This is the new timer state
after a timer has been deleted.

151
00:11:04.791 --> 00:11:09.367
So we're sort of giving it some nuance and

152
00:11:09.367 --> 00:11:15.914
saying it shouldn't be the same
new timer states and so on.

153
00:11:15.914 --> 00:11:20.418
So yeah, that's essentially
how model based testing works.

154
00:11:20.418 --> 00:11:26.901
The more tests you add,
the more paths it could possibly generate.

155
00:11:26.901 --> 00:11:30.865
There have been people who have
generated maybe hundreds or

156
00:11:30.865 --> 00:11:32.935
thousands of tests from this.

157
00:11:32.935 --> 00:11:38.621
But the idea is that your tests are auto
generated instead of manually specified.

158
00:11:38.621 --> 00:11:43.576
And if any behavior In your app changes,
you change the machine, and

159
00:11:43.576 --> 00:11:45.550
the tests all get updated.

160
00:11:45.550 --> 00:11:48.670
So that's what model
based testing is about.

