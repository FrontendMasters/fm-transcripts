WEBVTT

1
00:00:00.180 --> 00:00:05.910
Let's go over parameterizing actions
to to complete this exercise.

2
00:00:05.910 --> 00:00:12.608
What I wanna do first is I want to
actually make this tick events work.

3
00:00:12.608 --> 00:00:17.662
So this is just basic React material,
but we are going to

4
00:00:17.662 --> 00:00:23.220
be going over using an effect
to send an event to a machine.

5
00:00:23.220 --> 00:00:26.134
So if we have useEffect over here,

6
00:00:26.134 --> 00:00:31.550
we want to basically send
a tick event on every interval.

7
00:00:31.550 --> 00:00:35.720
So let's just leave this here for now.

8
00:00:35.720 --> 00:00:38.166
So we have a setInterval.

9
00:00:39.960 --> 00:00:42.695
And on every interval in this case,

10
00:00:42.695 --> 00:00:47.352
it's going to be 1 second times
whatever that interval is.

11
00:00:47.352 --> 00:00:50.452
So if the interval is 0.1 which it is,

12
00:00:50.452 --> 00:00:55.575
that's going to be 100 milliseconds or
one 10th of a second.

13
00:00:55.575 --> 00:01:02.489
So we're going to send a tick event
every single time that happens.

14
00:01:02.489 --> 00:01:07.046
Of course, we want to take care
to clean up the intervals,

15
00:01:07.046 --> 00:01:09.844
so const interval = setInterval.

16
00:01:09.844 --> 00:01:13.050
And oops, we'll just call this I, and

17
00:01:13.050 --> 00:01:17.430
then we return a function
that clears that interval.

18
00:01:18.470 --> 00:01:20.080
And so this is our cleanup function.

19
00:01:22.040 --> 00:01:25.200
So this is going to send
a tick to that machine.

20
00:01:25.200 --> 00:01:32.045
And that tick should be handled
by incrementing the elapsed time.

21
00:01:32.045 --> 00:01:39.320
So we'll say on TICK, we don't change
the state, we still want it to be running.

22
00:01:39.320 --> 00:01:45.010
So again, we're not adding a target,
we're just going to add an assign action.

23
00:01:45.010 --> 00:01:48.588
And we're going to be changing
the elapsed property.

24
00:01:48.588 --> 00:01:55.138
And we have a function that takes
both the context and the events.

25
00:01:55.138 --> 00:01:59.622
And so
we are going to be returning the context

26
00:01:59.622 --> 00:02:04.000
that elapsed plus the context.interval.

27
00:02:04.000 --> 00:02:07.939
Remember, all we're sending is the tick
events, that event has no payload,

28
00:02:07.939 --> 00:02:10.100
so we don't even really need it over here.

29
00:02:11.170 --> 00:02:12.490
Let's see if that works.

30
00:02:12.490 --> 00:02:16.153
So if we go back here, reload and play,

31
00:02:16.153 --> 00:02:21.110
you're gonna see that
the time is going down.

32
00:02:21.110 --> 00:02:26.106
Now, the way I coded it is,
even though it's going down only by one

33
00:02:26.106 --> 00:02:30.212
second because we're doing
a math.floor function,

34
00:02:30.212 --> 00:02:36.490
you can see over here that it is actually
updating here every tenth of a second.

35
00:02:36.490 --> 00:02:38.770
So we know that that logic works.

36
00:02:38.770 --> 00:02:44.370
If we press play, it'll do that,
and we could reset it.

37
00:02:44.370 --> 00:02:49.080
So the other part of this is
parameterizing these assign actions.

38
00:02:49.080 --> 00:02:55.000
So again, this just makes it more
clear to understand what's going on.

39
00:02:55.000 --> 00:02:58.850
So we could say constant reset
equals that assign action.

40
00:02:58.850 --> 00:03:01.290
And then we could do reset over here.

41
00:03:01.290 --> 00:03:06.415
We could move this to tick.

42
00:03:09.435 --> 00:03:12.368
So actions: tick, and

43
00:03:12.368 --> 00:03:17.214
we could also move this to add minutes.

44
00:03:19.113 --> 00:03:24.479
And then that's just addMinute.

45
00:03:27.370 --> 00:03:31.770
And as you could see,
everything remains exactly the same.

46
00:03:33.580 --> 00:03:35.130
But we have our actions parameterized.

47
00:03:35.130 --> 00:03:40.380
So that gives us a lot more flexibility in
what we decide to do with those actions.

48
00:03:41.380 --> 00:03:49.450
What is the difference between defining
them here and defining them in actions?

49
00:03:49.450 --> 00:03:53.557
In reality,
there is little difference, but

50
00:03:53.557 --> 00:03:59.363
when we parametrize them, so
let's call this reset as a string.

51
00:03:59.363 --> 00:04:01.735
And we put reset over here.

52
00:04:04.265 --> 00:04:10.495
Now, this actually becomes, sorry,
we have to add actions, reset, reset.

53
00:04:10.495 --> 00:04:15.382
Now this becomes available
as an action that you

54
00:04:15.382 --> 00:04:20.389
could use to change over here,
so you could say,

55
00:04:20.389 --> 00:04:25.050
actions reset, and then do something else.

56
00:04:27.200 --> 00:04:33.836
So by default, if this is a function,
then that function has a function name.

57
00:04:33.836 --> 00:04:39.261
So if reset was a function,
then it will automatically take that for

58
00:04:39.261 --> 00:04:43.440
you and
you could also parameterize it as well.

59
00:04:43.440 --> 00:04:44.782
Again, it's better to be explicit.

60
00:04:44.782 --> 00:04:48.160
So you could just have those over there.

61
00:04:48.160 --> 00:04:54.036
So in short, if you intend to
be flexible with those actions,

62
00:04:54.036 --> 00:04:58.782
then I do recommend putting
them in that actions so

63
00:04:58.782 --> 00:05:01.841
that they could be read up here.

64
00:05:01.841 --> 00:05:03.695
So you're absolutely correct.

65
00:05:03.695 --> 00:05:08.239
This, all of these could be,
parameterized right over here.

66
00:05:10.040 --> 00:05:11.816
And this one as well.

67
00:05:13.805 --> 00:05:18.670
And you're going to see that
this works exactly the same.

68
00:05:20.777 --> 00:05:26.280
So we have the tick working,
have everything else working, yeah.

69
00:05:28.510 --> 00:05:30.740
But in general, it's good practice.

70
00:05:30.740 --> 00:05:34.440
Move them to the top over
here to make it more clear.

71
00:05:34.440 --> 00:05:40.194
And then to make it more flexible,
move them to the second argument

72
00:05:40.194 --> 00:05:45.910
which takes those actions and
allows you to change them.

73
00:05:45.910 --> 00:05:47.430
Any other questions?

74
00:05:47.430 --> 00:05:49.622
&gt;&gt; I haven't done a lot with testing, but

75
00:05:49.622 --> 00:05:52.545
I was under the impression
that having the options,

76
00:05:52.545 --> 00:05:56.814
having parameterize like that using
options is very helpful with testing.

77
00:05:56.814 --> 00:06:01.570
&gt;&gt; All right, so the question was about
testing and using parameterized actions.

78
00:06:01.570 --> 00:06:06.681
Yes, testing is where it's definitely
going to be the most useful and

79
00:06:06.681 --> 00:06:10.850
that's because sometimes
actions can do side effects.

80
00:06:10.850 --> 00:06:14.219
And in fact,
that's exactly what actions are for, and

81
00:06:14.219 --> 00:06:16.950
sometimes we don't
exactly want to do that.

82
00:06:18.090 --> 00:06:22.561
So we're going to be seeing
that in future lessons when we

83
00:06:22.561 --> 00:06:27.790
actually remove this use effect and
have an actual tick there.

84
00:06:27.790 --> 00:06:32.494
But yeah,
we could definitely just specify,

85
00:06:32.494 --> 00:06:36.190
what we want to do there instead.

86
00:06:36.190 --> 00:06:41.320
Right now, the actions that we have
are just built in xstate actions.

87
00:06:41.320 --> 00:06:45.171
But actions could of course be
functions that are firing forgets.

88
00:06:45.171 --> 00:06:50.148
They don't do anything with
the current state of the machine.

89
00:06:50.148 --> 00:06:54.948
They do their own thing and
machine doesn't care about them.

90
00:06:54.948 --> 00:06:59.789
So yeah, definitely in a testing
scenario you do you want to parameterize

91
00:06:59.789 --> 00:07:02.677
your actions so that, for example in here,

92
00:07:02.677 --> 00:07:07.984
you could either make your actions do no
ops, which means, not doing anything,

93
00:07:07.984 --> 00:07:12.770
or you could make them do something
controlled in the test environment.

94
00:07:12.770 --> 00:07:14.980
So yeah, that's a very good point.

95
00:07:14.980 --> 00:07:18.370
&gt;&gt; All actions are run asynchronously,
right?

96
00:07:19.580 --> 00:07:26.980
&gt;&gt; So the question was about the order
of actions being run in general.

97
00:07:26.980 --> 00:07:32.110
Here's what happens,
when useMachine takes a machine.

98
00:07:32.110 --> 00:07:36.410
It creates a service, and
that service is an interpreted machine.

99
00:07:36.410 --> 00:07:39.830
I go more in detail about
that in the first workshop.

100
00:07:39.830 --> 00:07:43.178
But that service it receives an event, and

101
00:07:43.178 --> 00:07:47.060
then it's going to do
these two things in order.

102
00:07:47.060 --> 00:07:51.163
First, it's going to calculate
what the next state should be and

103
00:07:51.163 --> 00:07:52.960
that's synchronous.

104
00:07:52.960 --> 00:07:57.602
So for example, if we are in the idle
state, and we do the toggle events,

105
00:07:57.602 --> 00:08:00.490
it's gonna go to the running state.

106
00:08:00.490 --> 00:08:05.485
And that running state is going to
have state.actions which represent

107
00:08:05.485 --> 00:08:08.330
which actions should be executed.

108
00:08:08.330 --> 00:08:15.320
Those actions are executed immediately
after the state's transitions.

109
00:08:15.320 --> 00:08:18.771
So they're not quote
unquote asynchronous but

110
00:08:18.771 --> 00:08:24.470
you should consider them as basically
all occurring at the same time.

111
00:08:24.470 --> 00:08:28.991
In general with state machines,
asynchrony is not really a thing

112
00:08:28.991 --> 00:08:34.300
because the idea of waiting or
waiting something is itself a state.

113
00:08:34.300 --> 00:08:38.821
So you could just describe all of
those things as separate states.

114
00:08:38.821 --> 00:08:41.897
But yeah, in general,
just think of actions as fire and

115
00:08:41.897 --> 00:08:45.114
forget as you don't know when
they're going to execute.

116
00:08:45.114 --> 00:08:48.175
But in general, they execute
right after the state transition.

117
00:08:48.175 --> 00:08:52.840
So it is sort of synchronous,
but don't rely on that.

118
00:08:52.840 --> 00:08:57.320
And the reason you shouldn't rely on that
is because actions are firing forgets.

119
00:08:57.320 --> 00:08:59.200
And this is on the forgets part.

