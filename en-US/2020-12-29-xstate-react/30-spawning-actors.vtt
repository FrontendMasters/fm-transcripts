WEBVTT

1
00:00:00.040 --> 00:00:05.390
All right, so now let's talk about
spawning actors and to do this, we

2
00:00:05.390 --> 00:00:11.210
are going to go to our original scratchpad
and take a look at our alarm again.

3
00:00:13.100 --> 00:00:16.764
Oops So,

4
00:00:16.764 --> 00:00:21.243
one thing that comes up is how exactly do

5
00:00:21.243 --> 00:00:25.875
you isolate behavior, in a component.

6
00:00:28.060 --> 00:00:33.950
And one of the ways that you could do that
is by using what's called an actor model.

7
00:00:33.950 --> 00:00:37.390
And x state exhibits the actor
model in its design.

8
00:00:37.390 --> 00:00:42.250
So it exhibits both state machines,
state charts, and the actor model too.

9
00:00:42.250 --> 00:00:44.381
So to describe what the actor model is,

10
00:00:44.381 --> 00:00:47.330
I'm just going to draw
a diagram over here.

11
00:00:47.330 --> 00:00:51.940
An actor is a thing.

12
00:00:51.940 --> 00:00:55.670
Like an entity, and so
we could call this an actor.

13
00:00:55.670 --> 00:00:58.712
I know that might not
sound very helpful but

14
00:00:58.712 --> 00:01:03.107
an actor is something that basically
follows a set of rules and

15
00:01:03.107 --> 00:01:08.445
with those Those simple set of rules,
you could design entire systems.

16
00:01:08.445 --> 00:01:10.798
If you're used to back in programming,

17
00:01:10.798 --> 00:01:15.045
then microservices very much
exhibit this type of architecture.

18
00:01:15.045 --> 00:01:20.464
But an actor is something where
You can send it in advance,

19
00:01:20.464 --> 00:01:24.120
so I'm just going to put advance here.

20
00:01:26.290 --> 00:01:33.140
An actor is also something that can
send in advance to another actor.

21
00:01:34.980 --> 00:01:41.019
So if I copy paste this, And

22
00:01:41.019 --> 00:01:47.580
of course an actor can send an event
back to that actor if it knows about it.

23
00:01:47.580 --> 00:01:52.970
The key word here being that the actor has
to know About the other actor as well.

24
00:01:52.970 --> 00:01:57.580
For example, if you want to call
someone you need to know their number.

25
00:01:57.580 --> 00:02:00.640
If you want to send them an email,
you need to know their email address.

26
00:02:00.640 --> 00:02:02.400
You can't really just guess it.

27
00:02:02.400 --> 00:02:06.350
You have to physically have it in
order to communicate with them.

28
00:02:06.350 --> 00:02:11.730
An actor can also spawn child actors.

29
00:02:11.730 --> 00:02:15.640
And it could spawn basically
a dynamic amounts of them.

30
00:02:17.510 --> 00:02:21.467
And when it spawns it, it already
has a reference to that actor so

31
00:02:21.467 --> 00:02:24.430
it could send messages to that actor.

32
00:02:24.430 --> 00:02:30.030
And that actor can also send messages
back to the parents actor as well.

33
00:02:30.030 --> 00:02:33.135
And so, if you're coming from Redux or

34
00:02:33.135 --> 00:02:39.063
if you want to look at things in term
Reacts, a local state versus context,

35
00:02:39.063 --> 00:02:44.540
then you could envision these actors
as being local private states.

36
00:02:44.540 --> 00:02:49.310
So as individual stores that could
communicate with other stores.

37
00:02:49.310 --> 00:02:53.310
Instead of they're just being one
global state or one global store.

38
00:02:53.310 --> 00:02:57.854
You have these individual stores
where the, the both the behavior and

39
00:02:57.854 --> 00:03:02.490
the state inside each one of these
actors is completely private.

40
00:03:02.490 --> 00:03:04.131
So the only way for

41
00:03:04.131 --> 00:03:10.920
an actor to read something from
another actor is it has to ask it.

42
00:03:10.920 --> 00:03:14.040
And then the actor has to
send it back via an event.

43
00:03:15.290 --> 00:03:17.020
The asking is optional.

44
00:03:17.020 --> 00:03:18.495
The actor could just you know,

45
00:03:18.495 --> 00:03:21.650
send it back and
if this seems a little bit strange to you.

46
00:03:21.650 --> 00:03:26.430
One really good analogy
is making a web request.

47
00:03:26.430 --> 00:03:29.301
When you request something to a server,

48
00:03:29.301 --> 00:03:35.230
you are sending a request that might have
headers might have query parameters.

49
00:03:35.230 --> 00:03:40.850
Basically that's an event to the server
and the server responds to the client.

50
00:03:40.850 --> 00:03:46.186
With in-events of its own, you know,
so you a client's can't, for example,

51
00:03:46.186 --> 00:03:51.363
directly read a database, it has to ask
the server, hey, what are all of the,

52
00:03:51.363 --> 00:03:56.148
you know all the things all the rows
from this database based on my query,

53
00:03:56.148 --> 00:04:00.450
and the server could choose
whether to respond or not.

54
00:04:00.450 --> 00:04:01.950
So that's the actor model.

55
00:04:01.950 --> 00:04:03.140
In a nutshell.

56
00:04:03.140 --> 00:04:07.810
And I highly suggest reading
an article called actor

57
00:04:07.810 --> 00:04:12.904
model in ten minutes,
which describes the actor model,

58
00:04:12.904 --> 00:04:18.860
a little bit more in depth but
is still pretty clear to understand.

59
00:04:20.960 --> 00:04:25.628
So, just as an example,
let's take this alarm machine,

60
00:04:25.628 --> 00:04:32.290
We have this behavior which can be
isolated, but this is an individual alarm.

61
00:04:32.290 --> 00:04:35.820
If we have more than one alarm,
let's, let's do the obvious thing.

62
00:04:35.820 --> 00:04:38.150
First.
Let's separate this into its own

63
00:04:38.150 --> 00:04:39.470
component.

64
00:04:39.470 --> 00:04:47.380
So I'm going to have const alarm equals
and then we're going to be returning this.

65
00:04:47.380 --> 00:04:50.910
But we also want the,
all of these values here too.

66
00:04:54.190 --> 00:04:58.790
So we have the alarm machine, and
then we could have the alarm over here.

67
00:05:00.490 --> 00:05:03.219
And now we could have multiple alarms.

68
00:05:05.200 --> 00:05:06.040
And of course,

69
00:05:06.040 --> 00:05:09.990
each one of these components is going
to have its own isolated behavior.

70
00:05:09.990 --> 00:05:15.590
So if you squint a little bit, this sort
of feels like the actor model already

71
00:05:15.590 --> 00:05:20.578
accepts, this really has no way of
communicating to its parents and

72
00:05:20.578 --> 00:05:24.370
it's sort of an abstract ad hoc structure.

73
00:05:24.370 --> 00:05:28.660
So let's make a const alarms machine.

74
00:05:28.660 --> 00:05:30.540
And this is going to
be creating a machine.

75
00:05:31.680 --> 00:05:36.579
And so, in our context, which you'll
remember is the extended state or

76
00:05:36.579 --> 00:05:39.660
the potentially dynamic states.

77
00:05:39.660 --> 00:05:44.090
We want to represent each
one of our alarm actors.

78
00:05:44.090 --> 00:05:47.073
Inside here, so, we're gonna say,

79
00:05:47.073 --> 00:05:52.270
alarms and we'll just have
that be an empty rate for now.

80
00:05:52.270 --> 00:05:56.196
We could have an initial state of active,
doesn't really matter.

81
00:05:56.196 --> 00:06:03.130
States active and then On.

82
00:06:05.370 --> 00:06:07.630
We're gonna have an event
called add alarm.

83
00:06:07.630 --> 00:06:11.612
And over here, this is where
we're going to, what's called,

84
00:06:11.612 --> 00:06:13.670
spawn, a new alarm actor.

85
00:06:13.670 --> 00:06:17.610
And added to this context over here.

86
00:06:17.610 --> 00:06:21.400
So, we're going to do this in actions,
assign.

87
00:06:22.750 --> 00:06:25.180
And we're going to be assigning to alarms.

88
00:06:25.180 --> 00:06:27.860
So Context.

89
00:06:27.860 --> 00:06:30.450
Remember, you get both context and events.

90
00:06:30.450 --> 00:06:36.340
But in this case, just for this example,
we're going to be using context.

91
00:06:36.340 --> 00:06:39.860
So our spawned alarm,
which I'm just going to call alarm.

92
00:06:41.190 --> 00:06:44.270
There's a function that's exported
from x state called spawn.

93
00:06:47.442 --> 00:06:51.867
And so inside of that function,
let's see where we are, right over here.

94
00:06:51.867 --> 00:06:54.995
Right over here,

95
00:06:54.995 --> 00:07:01.520
we could spawn an alarm machine.

96
00:07:01.520 --> 00:07:07.580
So, basically this is saying we
are spawning an actor which is like this,

97
00:07:07.580 --> 00:07:13.350
this entity this special object with
the behaviour of alarm machine,

98
00:07:13.350 --> 00:07:18.272
and then we could return context
alarms can cat that alarm.

99
00:07:20.772 --> 00:07:24.820
So let's take a look at what
is actually returned here.

100
00:07:24.820 --> 00:07:30.524
Const send equals use machine and
we're going to use that alarms machine.

101
00:07:32.206 --> 00:07:35.911
[COUGH] We're also gonna log the state.

102
00:07:40.481 --> 00:07:46.077
Okay, so we have a few things here,
we also, let's go ahead and

103
00:07:46.077 --> 00:07:51.420
add a button, so
that we could actually add, an alarm.

104
00:07:51.420 --> 00:07:58.470
So, Okay.

105
00:08:01.790 --> 00:08:06.668
Cool, so when we click Add alarm and
we look in the state,

106
00:08:06.668 --> 00:08:11.520
we'll see that the context
now has one new alarm.

107
00:08:11.520 --> 00:08:14.984
Now this alarm is going to be an object
right now it's an interpreter but

108
00:08:14.984 --> 00:08:16.668
don't worry about that too much.

109
00:08:16.668 --> 00:08:21.448
Just realize that this is an actor
that has a send method and

110
00:08:21.448 --> 00:08:24.120
we could send events to it.

111
00:08:24.120 --> 00:08:29.858
So it follows the actor model and
because this is an interpreted machine.

112
00:08:29.858 --> 00:08:35.610
We could use service and
use the alarm directly in use service.

113
00:08:35.610 --> 00:08:40.875
So let's expand this alarm here and

114
00:08:40.875 --> 00:08:45.670
make it take an alarm prop.

115
00:08:45.670 --> 00:08:49.379
So instead of use machine,
we want to use service and

116
00:08:49.379 --> 00:08:52.210
we're gonna pass in that alarm.

117
00:08:52.210 --> 00:08:58.641
I like prefixing my my services
with Ref or actors in general.

118
00:08:58.641 --> 00:09:03.918
Because in general,
it's a it's a reference to an actor,

119
00:09:03.918 --> 00:09:06.390
so it's an actor ref.

120
00:09:06.390 --> 00:09:11.325
All right, so over here we have alarm,
alarm ref equals,

121
00:09:11.325 --> 00:09:15.580
and of course we need to
get those from the states.

122
00:09:15.580 --> 00:09:21.925
So, we're going to do
state.context.alarms.map.

123
00:09:21.925 --> 00:09:23.031
Where am I?

124
00:09:23.031 --> 00:09:31.742
And we are going to return alarm where
the alarm breath, is that alarm?

125
00:09:31.742 --> 00:09:36.149
And we have to give it a key as well
because that's what we are expects.

126
00:09:36.149 --> 00:09:41.370
So okay, so right now there are no alarms.

127
00:09:42.420 --> 00:09:45.220
But if I click here,
now we have a new alarm.

128
00:09:45.220 --> 00:09:48.039
If I click here, more alarms, and

129
00:09:48.039 --> 00:09:52.716
each one of these again has
its own individual behavior.

130
00:09:54.818 --> 00:10:00.640
So this might look sort of
like we're doing a lot here.

131
00:10:00.640 --> 00:10:04.435
Were spawning actors and mapping
through them and getting the reference.

132
00:10:04.435 --> 00:10:08.330
And using use service to reference
each one of these alarms.

133
00:10:09.620 --> 00:10:13.246
But one of the key things
here is each one of these

134
00:10:13.246 --> 00:10:17.610
alarms can actually communicate
back with the parents.

135
00:10:19.190 --> 00:10:23.150
So what the parent could do is also,

136
00:10:23.150 --> 00:10:28.045
send an event to all of
those alarms as well.

137
00:10:28.045 --> 00:10:36.520
So let's just demonstrate sending
an event from the child to the parent.

138
00:10:36.520 --> 00:10:43.596
So, the alarm, let's say that we
have pending and active and okay.

139
00:10:43.596 --> 00:10:50.178
So once we get to the active states so
on entry.

140
00:10:50.178 --> 00:10:57.020
We're going to send parent and
I'm just going to send it an active event.

141
00:10:57.020 --> 00:11:00.786
And so this is basically the child
telling the parent, hey, guess what,

142
00:11:00.786 --> 00:11:02.400
I'm active now.

143
00:11:02.400 --> 00:11:05.596
Now, of course the parent doesn't
really handle that event.

144
00:11:05.596 --> 00:11:09.784
So we'll just do it here, active,

145
00:11:11.362 --> 00:11:14.500
Actions and
let's just do a plain action over here.

146
00:11:14.500 --> 00:11:19.555
So context event, we are going to

147
00:11:19.555 --> 00:11:24.614
cancel that log received event.

148
00:11:28.018 --> 00:11:29.780
All right, so let's test this out.

149
00:11:29.780 --> 00:11:36.978
Let's create a couple alarms and when we
click one It's going to tell the parents,

150
00:11:36.978 --> 00:11:41.530
hey, I'm active and the parents, right now
it doesn't do anything with that event.

151
00:11:41.530 --> 00:11:46.515
It just receives that event and, yeah, so

152
00:11:46.515 --> 00:11:51.480
that is spawning actors in a nutshell.

153
00:11:51.480 --> 00:11:56.583
You could also spawn just like in
invocations, you could spawn promises,

154
00:11:56.583 --> 00:12:00.670
you could spawn observables
you could spawn call backs.

155
00:12:00.670 --> 00:12:03.030
And of course you could
spawn machines as well.

156
00:12:04.060 --> 00:12:07.954
&gt;&gt; And David,
as you start to nest these machines and

157
00:12:07.954 --> 00:12:11.021
you get to more than a couple of layers.

158
00:12:11.021 --> 00:12:15.993
Then if you wanted if you needed one
of the kind of descendant machines

159
00:12:15.993 --> 00:12:17.975
to talk to like a top level.

160
00:12:17.975 --> 00:12:22.137
You just have to do send parents and
parent all the way up or

161
00:12:22.137 --> 00:12:26.492
if there's some other mechanism for
the broadcasting or?

162
00:12:26.492 --> 00:12:31.787
&gt;&gt; All right, so the question was,
if you needed some deep

163
00:12:31.787 --> 00:12:37.655
down like descendants child to
talk to some higher ancestor.

164
00:12:37.655 --> 00:12:45.078
Basically let's actually go to
the drawing board Strikescale.com.

165
00:12:45.078 --> 00:12:49.045
So let's say that we have a system
of actors, which is what.

166
00:12:49.045 --> 00:12:52.511
Well what is called when you have so
many actors will make

167
00:12:52.511 --> 00:12:56.950
three levels over here suddenly copy and
paste this and put that there.

168
00:12:58.380 --> 00:13:03.557
And let's say that we want this
actor to somehow communicate,

169
00:13:03.557 --> 00:13:07.180
let's see, let's make this even deeper.

170
00:13:07.180 --> 00:13:11.336
So, we have this actor over here and

171
00:13:11.336 --> 00:13:15.501
this actor is basically the roots.

172
00:13:15.501 --> 00:13:20.870
Which communicates with this actor and
also communicates with this actor.

173
00:13:22.420 --> 00:13:27.089
Alright, so I guess what you're trying
to say is what if this actor all

174
00:13:27.089 --> 00:13:31.950
the way down here wants to somehow
communicate with this one.

175
00:13:31.950 --> 00:13:40.210
So I'm going to, I'll make this just so
that you could see.

176
00:13:40.210 --> 00:13:43.750
So we want to somehow
communicate with that actor.

177
00:13:43.750 --> 00:13:46.770
Naturally actors
are a hierarchical structure.

178
00:13:46.770 --> 00:13:54.964
So doing something like this doesn't
really happen nor should it happen.

179
00:13:54.964 --> 00:13:59.020
Because you don't want this
spaghetti architecture where any

180
00:13:59.020 --> 00:14:04.390
arbitrary actor could communicate
with any other arbitrary actor.

181
00:14:04.390 --> 00:14:06.395
This is a modeling problem and

182
00:14:06.395 --> 00:14:10.572
there's a few solutions depending
on your use case for this.

183
00:14:10.572 --> 00:14:13.937
One of those is using
what's called an event bus.

184
00:14:13.937 --> 00:14:18.612
Now you can simulate an events
bus by just having an actor that

185
00:14:18.612 --> 00:14:20.560
acts like as a router.

186
00:14:20.560 --> 00:14:24.615
It basically receives a message
from an actor that says, hey,

187
00:14:24.615 --> 00:14:26.920
I wanna send this to this actor.

188
00:14:26.920 --> 00:14:32.405
Or I want to post this on this topic,
if you're coming from sort of a Kafka or

189
00:14:32.405 --> 00:14:37.600
event grid background, and
other actors could listen to it too.

190
00:14:37.600 --> 00:14:38.483
But in general,

191
00:14:38.483 --> 00:14:42.880
an actor can only communicate with
other actors it has reference to.

192
00:14:42.880 --> 00:14:48.406
However, in the actor model,
you could send so,

193
00:14:48.406 --> 00:14:52.493
actually, let's make this green.

194
00:14:52.493 --> 00:15:00.070
You could definitely send a reference
to an actor through an actor.

195
00:15:00.070 --> 00:15:04.637
So let's say that that
this is our special actor

196
00:15:04.637 --> 00:15:09.460
that we want the other
actor to notify as well.

197
00:15:09.460 --> 00:15:15.090
So we have this in Well,
we'll call this a reference to that actor.

198
00:15:15.090 --> 00:15:19.192
Basically, when this actor creates
this actor, it could say, by the way,

199
00:15:19.192 --> 00:15:22.530
here's a here's an actor
you should know about.

200
00:15:22.530 --> 00:15:28.660
And so we could give that reference
to that actor to this actor as well.

201
00:15:28.660 --> 00:15:32.103
And so that actor,
since it has a reference to that,

202
00:15:32.103 --> 00:15:34.777
it could send an event to that directly.

203
00:15:34.777 --> 00:15:41.112
And yeah, so you could do that you could
also do in the event Bus sort of way.

204
00:15:41.112 --> 00:15:44.231
Where this basically is the Event Bus and

205
00:15:44.231 --> 00:15:50.340
this might send it to somewhere else
depending on what it has reference to.

206
00:15:50.340 --> 00:15:55.220
It's sort of an advanced
modeling concepts.

207
00:15:55.220 --> 00:15:58.330
Just being able to cross those
hierarchical boundaries and

208
00:15:58.330 --> 00:16:04.160
it doesn't really It doesn't really
manifest itself too often in normal apps,

209
00:16:04.160 --> 00:16:08.270
in really complex apps it
could definitely do that.

210
00:16:08.270 --> 00:16:09.933
So in the documentation,

211
00:16:09.933 --> 00:16:14.240
I'll definitely add how you
could simulate in the Event Bus.

212
00:16:14.240 --> 00:16:19.130
You could also go to
spectrum.chat/statecharts.

213
00:16:19.130 --> 00:16:23.869
And there actually is a topic
about using things such as

214
00:16:23.869 --> 00:16:26.420
an Event Bus within X state.

215
00:16:26.420 --> 00:16:32.222
So, Yeah, should be here somewhere but,

216
00:16:33.623 --> 00:16:37.201
Yeah, that's definitely a big topic and
I could spend a couple of

217
00:16:37.201 --> 00:16:41.470
hours talking about just that, but
it depends on how you model your system.

218
00:16:41.470 --> 00:16:45.641
And the beauty about this,
is that the answer for

219
00:16:45.641 --> 00:16:50.219
this would be the exact same answer for,
let's say,

220
00:16:50.219 --> 00:16:56.100
how you would do it in sort of
a micro service environment.

221
00:16:56.100 --> 00:16:58.774
It's an architecture question basically,

222
00:16:58.774 --> 00:17:04.310
so, Any other questions?

223
00:17:06.290 --> 00:17:08.810
&gt;&gt; Yeah, this is kind of an aside.

224
00:17:08.810 --> 00:17:12.136
Do you have any materials or references or

225
00:17:12.136 --> 00:17:16.697
things like that that you think
are particularly good for

226
00:17:16.697 --> 00:17:22.790
getting better at doing this kind of
modeling or this kind of architecture?

227
00:17:24.370 --> 00:17:29.635
&gt;&gt; So the question was,
what reference material is there for

228
00:17:29.635 --> 00:17:36.196
just learning how to architect actor
model based applications better.

229
00:17:36.196 --> 00:17:40.680
And honestly,
there's a lot of books on it.

230
00:17:40.680 --> 00:17:45.989
One of my favorite ones
that I read was something

231
00:17:45.989 --> 00:17:50.637
applied reactive modeling with Akka, or

232
00:17:50.637 --> 00:17:56.094
something like that,
reactive modeling Akka.

233
00:17:56.094 --> 00:18:01.772
Akka, by the way, is a very popular actor

234
00:18:01.772 --> 00:18:07.138
model of framework for Java and Scala.

235
00:18:07.138 --> 00:18:11.142
So obviously not for
Java scripts, they have a .net

236
00:18:11.142 --> 00:18:16.406
version Whatever the book is called.

237
00:18:16.406 --> 00:18:22.058
But yeah, honestly, I would highly
recommend reading books on Akka

238
00:18:22.058 --> 00:18:27.515
just because even if you don't do
Akka there is a lot of patterns and

239
00:18:27.515 --> 00:18:33.960
best practices like this book shows you
for doing the actor model in practice.

240
00:18:33.960 --> 00:18:36.620
And the more you learn
about the actor model,

241
00:18:36.620 --> 00:18:41.450
the more you see just how many places it
actually applies to in the front end.

242
00:18:41.450 --> 00:18:46.600
And I think I would say most of actor
model usage is in the back end.

243
00:18:46.600 --> 00:18:52.460
So, yeah, it's definitely a useful way
of thinking for the front end as well.

244
00:18:52.460 --> 00:18:54.726
So any of the Akka books really.

245
00:18:57.861 --> 00:19:01.360
&gt;&gt; Are there any open source or other
larger scale projects that you can point

246
00:19:01.360 --> 00:19:04.646
to that we could look at for
a reference on best practices and things?

247
00:19:04.646 --> 00:19:06.953
Cuz most of all the exercises and

248
00:19:06.953 --> 00:19:11.579
tutorials are kind of these
smallish kind of like toy projects.

249
00:19:11.579 --> 00:19:12.500
And so, yeah, that's my question.

250
00:19:14.200 --> 00:19:17.954
&gt;&gt; Yeah, so the question was
about are there any exercises or

251
00:19:17.954 --> 00:19:21.487
examples you could look for
in terms of architecture?

252
00:19:21.487 --> 00:19:26.782
And so again what I really
like looking at is just if you

253
00:19:26.782 --> 00:19:32.680
search like Akka patterns then
there's a lot of examples.

254
00:19:32.680 --> 00:19:37.251
And also a few books like good actor
design, applied Akka patterns.

255
00:19:37.251 --> 00:19:43.411
And also, let's do akka examples.

256
00:19:43.411 --> 00:19:47.360
I think there's actually
a repo with a lot of example

257
00:19:47.360 --> 00:19:49.890
projects that you could look at.

258
00:19:49.890 --> 00:19:52.900
Now, Akka model is a bit
of a learning curve.

259
00:19:52.900 --> 00:19:55.711
Definitely not as much as state charts.

260
00:19:55.711 --> 00:19:59.973
But you could generally
get the gist of what's

261
00:19:59.973 --> 00:20:04.125
happening even if you don't understand, or

262
00:20:04.125 --> 00:20:09.601
you're not familiar too much
with the language involved.

263
00:20:09.601 --> 00:20:12.354
Just by looking at what is being spawned,

264
00:20:12.354 --> 00:20:17.160
what events are being sent to other
events, and things like that.

265
00:20:17.160 --> 00:20:21.913
Another good way to practice,
personally, instead of just reading or

266
00:20:21.913 --> 00:20:27.990
looking at examples, is by practicing
what's called making sequence diagrams.

267
00:20:27.990 --> 00:20:32.511
So, [COUGH] if you're not familiar with
sequence diagrams, sequence diagrams

268
00:20:32.511 --> 00:20:37.470
are a way of representing how different
actors communicate with each other.

269
00:20:37.470 --> 00:20:42.486
So for example over here,
this is not a very good sequence diagram,

270
00:20:42.486 --> 00:20:44.866
I'll show you something else.

271
00:20:48.292 --> 00:20:51.100
Here we go, here's a sequence diagram.

272
00:20:51.100 --> 00:20:56.576
So you can see over here that we have
these actors at the top such as Game Deck,

273
00:20:56.576 --> 00:21:01.850
Player 1, Player 2, and
they're sending events to each other.

274
00:21:01.850 --> 00:21:09.610
So learning how a sequence diagram works,
and just the notation for it.

275
00:21:09.610 --> 00:21:14.396
That's going to make you a lot better at
designing actor model based applications

276
00:21:14.396 --> 00:21:15.570
as well.

277
00:21:15.570 --> 00:21:17.420
Just practicing by doing that.

278
00:21:17.420 --> 00:21:20.408
So you don't even need to
do the actor model, or

279
00:21:20.408 --> 00:21:22.589
code the actor model in your code.

280
00:21:22.589 --> 00:21:24.685
It's just a very good practice for

281
00:21:24.685 --> 00:21:28.910
when you're talking about
business logic just draw it out.

282
00:21:28.910 --> 00:21:31.720
And draw it out with your
state machines as well.

283
00:21:31.720 --> 00:21:34.413
So, that's another point too,

284
00:21:34.413 --> 00:21:39.420
a state machine describes
the behavior of one actor.

285
00:21:39.420 --> 00:21:46.018
An actor model system describes the
behavior of how actors talk to each other.

286
00:21:46.018 --> 00:21:48.894
So that's the difference right there.

