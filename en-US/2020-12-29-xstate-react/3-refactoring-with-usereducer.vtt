WEBVTT

1
00:00:00.380 --> 00:00:05.046
Okay, so how do we translate this to an
actual state machine that we could use in

2
00:00:05.046 --> 00:00:06.190
our application?

3
00:00:07.890 --> 00:00:13.450
Well, before we get into x state, and
this is something I recommend in general.

4
00:00:13.450 --> 00:00:18.970
It's good practice to try to
refactor to use reducer instead.

5
00:00:20.030 --> 00:00:23.140
So Just going over how use reducer works.

6
00:00:23.140 --> 00:00:27.990
A user reducer is going to take two
arguments, a reducer and an initial state.

7
00:00:27.990 --> 00:00:30.920
So let's define both of those right now.

8
00:00:30.920 --> 00:00:34.010
Our initial state is going to be pending.

9
00:00:35.660 --> 00:00:37.800
And then we're gonna call
this an alarm reducer.

10
00:00:39.450 --> 00:00:44.033
And this alarm reducer is going to take
two arguments, which is the States and

11
00:00:44.033 --> 00:00:45.668
the events that occurred.

12
00:00:45.668 --> 00:00:50.830
Now in the react docs you'll notice that
the second argument is called the action.

13
00:00:50.830 --> 00:00:54.140
But I am calling it the events
because it is a more accurate term.

14
00:00:54.140 --> 00:00:56.923
Action is sort of a holdover
from the Redux days and

15
00:00:56.923 --> 00:00:59.290
since Redux is immensely popular.

16
00:00:59.290 --> 00:01:02.020
That's why you see action everywhere but

17
00:01:02.020 --> 00:01:05.580
actions means something
else in state machines.

18
00:01:05.580 --> 00:01:08.220
So we are going to be
using the term events.

19
00:01:09.480 --> 00:01:13.770
So this alarm reducer, it starts in
the initial state, which is pending.

20
00:01:13.770 --> 00:01:20.620
Then we're gonna switch on what happens
when we're in a state and an event occurs.

21
00:01:20.620 --> 00:01:25.078
Now if you're used to Redux or
something similar, such as NGRX,

22
00:01:25.078 --> 00:01:28.807
you will intuitively do this
with a switch statement,

23
00:01:28.807 --> 00:01:32.500
but it's a switch statement on the event.

24
00:01:32.500 --> 00:01:35.300
This time we gonna be doing
things a little bit differently.

25
00:01:35.300 --> 00:01:41.950
We gonna be switching on the actual finite
states, so we gonna switch on state.

26
00:01:41.950 --> 00:01:45.490
And we have three, yeah,
three possibilities.

27
00:01:45.490 --> 00:01:46.260
We have pending.

28
00:01:47.460 --> 00:01:54.600
We have active and
of course we have inactive.

29
00:01:54.600 --> 00:01:59.544
And we have a default, which default
should never happen but, you know,

30
00:01:59.544 --> 00:02:02.110
just to be safe will return the state.

31
00:02:03.410 --> 00:02:08.350
Okay, so now that we're in the inactive
state, that is when we decide

32
00:02:08.350 --> 00:02:13.370
what should happen when we're in
that state in an event occurs.

33
00:02:13.370 --> 00:02:14.270
So.

34
00:02:16.510 --> 00:02:18.240
Let's just do an if statement.

35
00:02:18.240 --> 00:02:21.500
If event type is.

36
00:02:23.490 --> 00:02:27.726
We haven't defined it yet, but
if that event type is toggle,

37
00:02:27.726 --> 00:02:31.559
then we gonna to return the next
state which is pending.

38
00:02:31.559 --> 00:02:37.340
Now in the pending states, we gonna do,
we also have to return the state.

39
00:02:37.340 --> 00:02:45.120
Otherwise if the event type is success,
Then we go to the active states.

40
00:02:45.120 --> 00:02:46.410
Now in the active state.

41
00:02:47.560 --> 00:02:53.860
If the event is toggle, then we
return to oops to be inactive state.

42
00:02:55.480 --> 00:03:00.100
Now we could use both that reducer and
the initial state so

43
00:03:00.100 --> 00:03:05.297
I'm gonna put the alarm reducer
over here in the initial state,

44
00:03:05.297 --> 00:03:08.030
and this gives us our status.

45
00:03:08.030 --> 00:03:11.520
And instead of set status,
react calls this dispatch.

46
00:03:11.520 --> 00:03:13.830
So we're going to use dispatch for now.

47
00:03:13.830 --> 00:03:18.200
Now you're going to notice that things
are going to be a lot less imperative.

48
00:03:18.200 --> 00:03:22.292
And that's because instead of directly
setting the state We're gonna be

49
00:03:22.292 --> 00:03:24.770
dispatching events instead.

50
00:03:24.770 --> 00:03:33.040
So this timeout, we are gonna dispatch
success, sorry, type success.

51
00:03:33.040 --> 00:03:35.380
And that's gonna be after two seconds.

52
00:03:35.380 --> 00:03:37.400
Let's take a look.

53
00:03:37.400 --> 00:03:38.087
All right.

54
00:03:38.087 --> 00:03:42.990
This is gonna be a lot simpler too,
instead of doing all of this logic for

55
00:03:42.990 --> 00:03:46.996
whether the status is active,
or inactive, or pending,

56
00:03:46.996 --> 00:03:53.400
we want to dispatch Type toggle.

57
00:03:53.400 --> 00:03:55.765
And then we could get
rid of all this code.

58
00:03:55.765 --> 00:03:57.909
So while we did add a few lines of code,

59
00:03:57.909 --> 00:04:02.510
we removed a lot of the logic that
was scattered around the component.

60
00:04:02.510 --> 00:04:06.271
And so this is extremely helpful to
understanding the full logic of our

61
00:04:06.271 --> 00:04:07.480
component.

62
00:04:07.480 --> 00:04:11.570
So let's make sure now
that this actually works.

63
00:04:11.570 --> 00:04:16.230
So we gonna be going back to our app and
gonna click.

64
00:04:18.000 --> 00:04:20.650
And, so I guessed it did work,
I was just impatient.

65
00:04:22.420 --> 00:04:25.630
All right, so it does work.

66
00:04:25.630 --> 00:04:28.610
So check the opacity as
the status is pending.

67
00:04:30.050 --> 00:04:36.766
Okay, so
if the event type is toggled goes to here,

68
00:04:36.766 --> 00:04:42.090
return, forgot to add my returns here.

69
00:04:43.850 --> 00:04:45.870
Don't forget to do that.

70
00:04:45.870 --> 00:04:50.739
All right, so now when we restart,
we'll see that after two seconds,

71
00:04:50.739 --> 00:04:52.680
it does go, back.

72
00:04:52.680 --> 00:04:55.010
Let's see it's not toggling back.

73
00:04:55.010 --> 00:04:56.460
So let's check that real quick.

74
00:04:56.460 --> 00:04:58.880
All right, so on dispatch.

75
00:05:00.744 --> 00:05:02.980
Cuz I have it lowercase that.

76
00:05:02.980 --> 00:05:04.900
That would make sense.

77
00:05:04.900 --> 00:05:05.400
Okay.

78
00:05:06.530 --> 00:05:10.140
Third time's a charm,
click after two seconds it goes there.

79
00:05:10.140 --> 00:05:11.600
Click again.

80
00:05:11.600 --> 00:05:17.670
Two seconds goes there, click again.

81
00:05:17.670 --> 00:05:19.900
And yeah, it works.

82
00:05:21.050 --> 00:05:23.979
So you might be asking
yourself at this moment,

83
00:05:23.979 --> 00:05:28.446
why do I I wanna go through all of that
trouble of writing an entire reducer

84
00:05:28.446 --> 00:05:31.655
when all I could do is
juggle a few set states.

85
00:05:31.655 --> 00:05:36.487
Well, the reason like we started to see
is that when you start to add logic,

86
00:05:36.487 --> 00:05:42.635
your components become more complex if you
have what's called decentralized logic.

87
00:05:42.635 --> 00:05:46.480
Right now we're centralizing all of
our logic inside this alarm reducer.

88
00:05:46.480 --> 00:05:51.279
So things become a lot simpler to
understand since we could see at a glance

89
00:05:51.279 --> 00:05:57.300
what the status of the component are gonna
be, which is inactive, pending or active.

90
00:05:57.300 --> 00:06:01.940
And we could also see what can happen
in each state, so inactive we can

91
00:06:01.940 --> 00:06:06.880
only accept the toggle events in
pending we can only accept success.

92
00:06:06.880 --> 00:06:10.360
And same for
active we can only accept toggle.

93
00:06:10.360 --> 00:06:14.030
We know exactly which
state it's gonna go to.

94
00:06:14.030 --> 00:06:19.238
So this alone is really helpful because
that reducer is the centralized place

95
00:06:19.238 --> 00:06:25.200
where you could just see all the logic you
could share it between other components.

96
00:06:25.200 --> 00:06:28.160
All of this becomes, you know,
a lot more organized.

97
00:06:28.160 --> 00:06:30.340
Instead of Spread out.

98
00:06:30.340 --> 00:06:31.950
But there's also one more thing.

99
00:06:31.950 --> 00:06:37.560
Let's say that a toggle event happens
while we're in the pending state.

100
00:06:37.560 --> 00:06:41.915
So essentially, you try to toggle
the alarm on and while it's trying to save

101
00:06:41.915 --> 00:06:45.400
you say, you know what,
I actually don't want that alarm.

102
00:06:45.400 --> 00:06:46.420
I don't want to wake up that early.

103
00:06:46.420 --> 00:06:47.490
So you press it again.

104
00:06:48.540 --> 00:06:51.750
Well, we could just add another,
if statement here.

105
00:06:51.750 --> 00:06:55.225
If event type is toggle,

106
00:06:55.225 --> 00:07:01.358
then we're gonna return pending or sorry.

107
00:07:01.358 --> 00:07:05.030
Not pending, inactive.

108
00:07:05.030 --> 00:07:08.742
Now you probably thought that that that
cancellation logic was gonna be a lot

109
00:07:08.742 --> 00:07:09.670
harder than that.

110
00:07:09.670 --> 00:07:14.479
But honestly, that's all you need,
cuz instead of directly setting the state

111
00:07:14.479 --> 00:07:17.540
over here we're dispatching
a type success.

112
00:07:17.540 --> 00:07:22.510
And remember, in the inactive state,
we're not handling that success event.

113
00:07:22.510 --> 00:07:25.650
So we know that nothing
is gonna happen there.

114
00:07:25.650 --> 00:07:28.635
So let's try out that logic and reload.

115
00:07:28.635 --> 00:07:32.925
Click this goes to click it.

116
00:07:32.925 --> 00:07:35.095
After two seconds it goes to active.

117
00:07:35.095 --> 00:07:35.815
Go back.

118
00:07:35.815 --> 00:07:40.645
So now if I click it, and
I click it again, it goes back to pending.

119
00:07:40.645 --> 00:07:45.151
We know that the timer has been cancelled,
but even if it hasn't been canceled,

120
00:07:45.151 --> 00:07:47.585
it's gonna send that success event.

121
00:07:47.585 --> 00:07:52.249
But that success events, we're gonna
say hey, In the inactive state,

122
00:07:52.249 --> 00:07:57.650
we're not expecting a success event so
we're just not gonna deal with it.

123
00:07:57.650 --> 00:08:02.050
And so, you know, this is a really
great way to organize your logic

