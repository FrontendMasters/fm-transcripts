WEBVTT

1
00:00:00.773 --> 00:00:04.350
So let's refactor this a bit more,
and actually create a state machine.

2
00:00:04.350 --> 00:00:11.056
One of my favorite tools for
doing this is actually called excalidraw.

3
00:00:11.056 --> 00:00:15.361
And excalidraw is great,
because I'm gonna put this on night mode,

4
00:00:15.361 --> 00:00:19.163
because you could easily draw
these shapes and everything.

5
00:00:19.163 --> 00:00:25.260
So I could have a little rectangle here,
and basically create a state.

6
00:00:25.260 --> 00:00:28.800
So let's talk about our alarm
component for a minute.

7
00:00:28.800 --> 00:00:31.480
At first,
it's in the inactive states, right?

8
00:00:33.490 --> 00:00:37.470
Now, it could also be
in the pending states.

9
00:00:37.470 --> 00:00:43.681
And that's when we're waiting for
it to save or do whatever it needs to do.

10
00:00:43.681 --> 00:00:48.510
And finally, after pending,
it could go to the active states.

11
00:00:48.510 --> 00:00:51.319
Now looking at this,
you might think, okay,

12
00:00:51.319 --> 00:00:56.300
we described all the states that our
component can be in, are we done?

13
00:00:56.300 --> 00:01:01.978
Not exactly, because we want to not only
specify the states in our application,

14
00:01:01.978 --> 00:01:05.060
but also how those states can change.

15
00:01:05.060 --> 00:01:09.651
Basically how we can transition
from one state to another state.

16
00:01:09.651 --> 00:01:15.041
So we know that from inactive, we could
go directly from inactive to pending.

17
00:01:15.041 --> 00:01:20.276
And we could also go
from pending to active.

18
00:01:20.276 --> 00:01:26.918
And we could go from active to inactive.

19
00:01:26.918 --> 00:01:32.220
So notice there's no arrow going
directly from inactive to active.

20
00:01:32.220 --> 00:01:34.893
And so
we need to not only define the logic for

21
00:01:34.893 --> 00:01:39.806
what each of these three states should do,
but we should also define the logic for

22
00:01:39.806 --> 00:01:43.020
how those states can
move between each other.

23
00:01:43.020 --> 00:01:46.747
Now, I'm also going to note
this circle and arrow,

24
00:01:46.747 --> 00:01:49.650
to show that this is the initial state.

25
00:01:49.650 --> 00:01:54.128
So at first it's inactive,
it goes to pending, goes to active, and

26
00:01:54.128 --> 00:01:55.840
then it goes to inactive.

27
00:01:57.020 --> 00:01:59.160
But there's one more thing.

28
00:01:59.160 --> 00:02:02.950
How exactly does it go from
inactive to pending to active?

29
00:02:02.950 --> 00:02:07.255
We saw in our original
components that we were

30
00:02:07.255 --> 00:02:11.230
setting each one of the states directly.

31
00:02:11.230 --> 00:02:13.537
So we would set status to active here,

32
00:02:13.537 --> 00:02:17.720
set status to inactive here,
set status to pending here.

33
00:02:17.720 --> 00:02:21.963
Now while this does technically work,
it doesn't give us a clear picture of

34
00:02:21.963 --> 00:02:26.689
the logic of our components, basically
what's happening in each of these arrows.

35
00:02:26.689 --> 00:02:30.387
So to fix that, we need to define events.

36
00:02:30.387 --> 00:02:35.681
We basically need to define what should
the next state be when something happens.

37
00:02:35.681 --> 00:02:39.904
So I'm going to say over
here inactive depending

38
00:02:39.904 --> 00:02:44.651
should happen when we have
some sort of toggle events.

39
00:02:44.651 --> 00:02:50.946
And then pending to active should happen
after some sort of success events.

40
00:02:50.946 --> 00:02:57.134
Basically if it's saved,
if we successfully set the alarm,

41
00:02:57.134 --> 00:03:02.969
and only then,
can we transition from pending to active.

42
00:03:02.969 --> 00:03:07.620
And again, if we toggle,
we should go from active to inactive.

43
00:03:07.620 --> 00:03:10.190
Now what we just made is
called a state machine.

44
00:03:10.190 --> 00:03:14.438
And this state machine, like you
might have seen in the first course,

45
00:03:14.438 --> 00:03:16.140
is made up of a few parts.

46
00:03:16.140 --> 00:03:20.856
We have our finite states, which are the
states that define basically the only

47
00:03:20.856 --> 00:03:24.100
possible states that
this component can be in.

48
00:03:24.100 --> 00:03:28.880
And we have each one of our events,
which is either toggle or success.

49
00:03:28.880 --> 00:03:33.701
And we have transitions that say,
when we're in the current states, and

50
00:03:33.701 --> 00:03:37.770
an event happens,
now we should be in this next state.

51
00:03:37.770 --> 00:03:42.778
And so you could show this to anyone,
even someone who's non-technical.

52
00:03:42.778 --> 00:03:46.757
And they're basically going to
understand the general flow,

53
00:03:46.757 --> 00:03:51.560
whether it's a user flow or a logical
flow of any one of the components of your

54
00:03:51.560 --> 00:03:54.576
system just by looking
at something like this.

