WEBVTT

1
00:00:00.220 --> 00:00:04.890
All right, cool, so
let's start with Exercise 5 now.

2
00:00:04.890 --> 00:00:08.853
Now we're going to be using
eventless transitions to refactor or

3
00:00:08.853 --> 00:00:11.860
simplify the guard logic a little bit.

4
00:00:11.860 --> 00:00:14.475
We're gonna be doing two things.

5
00:00:14.475 --> 00:00:18.585
First, we're going to add an eventless
transition in the running state,

6
00:00:18.585 --> 00:00:22.056
that would transition to expired
as soon as the timer expires.

7
00:00:22.056 --> 00:00:25.260
So if you look at the current
machine over here,

8
00:00:29.060 --> 00:00:33.510
Right now, that tick,
it's going to keep ticking and

9
00:00:33.510 --> 00:00:39.020
we're going to have the same
problem as the previous exercise.

10
00:00:39.020 --> 00:00:39.841
So instead,

11
00:00:39.841 --> 00:00:44.780
what we want to do is we want to add an
eventless transition that always checks.

12
00:00:46.410 --> 00:00:52.070
It's basically going to ask hey,
did the elapsed time exceed the duration?

13
00:00:52.070 --> 00:00:54.859
And so we're no longer gonna
have a guard on this tick,

14
00:00:54.859 --> 00:00:58.329
instead we're going to have a guard
on that eventless transition.

15
00:00:59.770 --> 00:01:01.289
So if so, go to the expired state.

16
00:01:01.289 --> 00:01:05.532
If not, then basically don't do anything.

17
00:01:08.273 --> 00:01:13.449
And also yeah, we're going to be removing
that guard from the tick transition and

18
00:01:13.449 --> 00:01:17.513
so you'll see how basically
that's going to simplify things.

19
00:01:17.513 --> 00:01:20.838
Any questions about this
exercise before we get started?

20
00:01:23.441 --> 00:01:28.485
&gt;&gt; David, can you explain when
the always actions get fired?

21
00:01:28.485 --> 00:01:33.938
Is it whenever there's a new event or
is it when context changes?

22
00:01:33.938 --> 00:01:36.834
Or when do those always
actions actually get fired?

23
00:01:36.834 --> 00:01:38.688
What's the mechanism?

24
00:01:38.688 --> 00:01:39.350
&gt;&gt; That's a good question.

25
00:01:39.350 --> 00:01:45.378
So the question was about when do
eventless transitions basically get fired?

26
00:01:45.378 --> 00:01:48.380
If you go to the SEXML algorithm,

27
00:01:48.380 --> 00:01:53.753
it could be a little bit hairy so
we're not going to do that.

28
00:01:53.753 --> 00:01:58.281
Instead I'll outline
the logic actually over here.

29
00:01:58.281 --> 00:02:01.580
I'll be using Excalidraw for this.

30
00:02:01.580 --> 00:02:06.698
So let's say that we're in some sort of,

31
00:02:06.698 --> 00:02:10.074
what do we call that state?

32
00:02:10.074 --> 00:02:12.083
The running state, okay?

33
00:02:12.083 --> 00:02:19.620
So we're in the running states and
then a tick event happens.

34
00:02:21.350 --> 00:02:24.708
What's going to happen is
once that event happens,

35
00:02:24.708 --> 00:02:27.469
we're going to calculate the next state.

36
00:02:27.469 --> 00:02:29.549
In this case, it's still running.

37
00:02:31.464 --> 00:02:35.044
But immediately after that,

38
00:02:35.044 --> 00:02:41.066
we are going to check
the eventless transitions.

39
00:02:43.333 --> 00:02:46.807
If there are no eventless transitions
to take, then we're done,

40
00:02:46.807 --> 00:02:48.880
we're on the running states.

41
00:02:48.880 --> 00:02:54.145
So otherwise, if there isn't
eventless transition to be taken,

42
00:02:54.145 --> 00:02:56.025
then we evaluate that so

43
00:02:56.025 --> 00:03:01.740
it might go from running immediately
to expired for instance.

44
00:03:01.740 --> 00:03:04.638
So in other words,
the state is calculated and

45
00:03:04.638 --> 00:03:09.484
right after the state is calculated,
you check the eventless transitions.

46
00:03:09.484 --> 00:03:13.927
&gt;&gt; So what do you mean by right
after state being calculated is all

47
00:03:13.927 --> 00:03:17.870
actions are done,
only after actions are completed?

48
00:03:17.870 --> 00:03:22.567
&gt;&gt; The question was about just
clarification around what

49
00:03:22.567 --> 00:03:24.310
happens over here.

50
00:03:25.670 --> 00:03:29.819
So when the state is calculated,
you get a state object,

51
00:03:29.819 --> 00:03:34.530
you get the context,
the value actions that might happen.

52
00:03:34.530 --> 00:03:38.388
And then the eventless
transitions are checked and so

53
00:03:38.388 --> 00:03:42.020
you could think of it
sort of as a while loop.

54
00:03:42.020 --> 00:03:46.356
So it's saying while there
are still eventless transitions,

55
00:03:46.356 --> 00:03:49.070
basically keep trying to transition.

56
00:03:50.390 --> 00:03:52.521
So all of this happens
synchronously by the way.

57
00:03:52.521 --> 00:03:57.030
Does that answer your question?

58
00:03:57.030 --> 00:04:02.020
&gt;&gt; Actually, I was wondering,
I was thinking eventless transitions shall

59
00:04:02.020 --> 00:04:06.140
be used before the other
actions are performed.

60
00:04:06.140 --> 00:04:10.312
&gt;&gt; The question was about you want
an eventless transition to occur before

61
00:04:10.312 --> 00:04:12.210
actions are performed?

62
00:04:12.210 --> 00:04:12.969
&gt;&gt; Right.

63
00:04:12.969 --> 00:04:16.643
&gt;&gt; Okay, so that's a modeling problem.

64
00:04:16.643 --> 00:04:20.864
Basically, you want to model a state
in which a eventless transition

65
00:04:20.864 --> 00:04:24.157
is taken in a state in which
the actions are executed.

66
00:04:24.157 --> 00:04:29.111
So instead of trying to juggle around
the order, guess like, is this gonna

67
00:04:29.111 --> 00:04:34.710
happen before this, it's usually better
to split it up into different states.

68
00:04:34.710 --> 00:04:39.794
So that you could say, execute these
actions after taking this eventless

69
00:04:39.794 --> 00:04:44.640
transition because those actions
might be on the entry of that state.

