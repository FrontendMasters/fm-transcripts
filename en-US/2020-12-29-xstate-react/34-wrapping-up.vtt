WEBVTT

1
00:00:01.120 --> 00:00:04.900
All right, well,
i'Il open it up to questions.

2
00:00:04.900 --> 00:00:09.173
Now if you have any questions about just

3
00:00:09.173 --> 00:00:14.363
anything that we talked
about in the workshop.

4
00:00:14.363 --> 00:00:21.588
I do wanna show you one thing though,
if we go to code sandbox.io.

5
00:00:21.588 --> 00:00:27.380
And I'm gonna let's explore
search sandboxes and

6
00:00:27.380 --> 00:00:32.900
the type x state view even
though this is a a reacts

7
00:00:32.900 --> 00:00:38.018
workshop i wanna show
you that the reason that

8
00:00:38.018 --> 00:00:43.808
we centralize and
we put all of our machine logic and

9
00:00:43.808 --> 00:00:48.830
application logic within one machine.

10
00:00:48.830 --> 00:00:53.782
The reason that we do that in next
state is cuz our logic becomes

11
00:00:53.782 --> 00:00:59.700
something that is completely
agnostic to basically any framework.

12
00:00:59.700 --> 00:01:05.054
So we could essentially copy and
paste that exact same timer machine,

13
00:01:05.054 --> 00:01:10.550
put it in a view app and
have the timer work the exact same way.

14
00:01:10.550 --> 00:01:14.662
So this is something that's really useful,
especially if you're not

15
00:01:14.662 --> 00:01:18.970
committed to a framework or
you wanna share this between frameworks.

16
00:01:18.970 --> 00:01:24.350
Or maybe you wanna share the exact same
logic between react and react native.

17
00:01:24.350 --> 00:01:28.876
Or in the future if you want that same
logic to be on the both the front end and

18
00:01:28.876 --> 00:01:31.872
back end or
in a different language altogether,

19
00:01:31.872 --> 00:01:34.930
like there's a lot of possibilities here.

20
00:01:34.930 --> 00:01:39.958
And so that's why i really enjoy
working with state machines and

21
00:01:39.958 --> 00:01:45.420
state charts as a declarative
way of specifying your logic.

22
00:01:45.420 --> 00:01:48.890
Cuz, you could create the exact
same logic in a view app.

23
00:01:49.890 --> 00:01:53.070
So yeah.

24
00:01:55.750 --> 00:01:56.334
All right.
So,

25
00:01:56.334 --> 00:02:01.277
i guess i'll open it up to any questions
about basically anything that we talked

26
00:02:01.277 --> 00:02:02.840
about in this workshop.

27
00:02:05.000 --> 00:02:10.664
You were saying how,
the machine is language agnostic,

28
00:02:10.664 --> 00:02:14.330
even application agnostic it.

29
00:02:14.330 --> 00:02:20.008
So it's just super portable lwe're
Robson loading is a j s object here.

30
00:02:20.008 --> 00:02:24.927
But someone was mentioning
before about serializing it

31
00:02:24.927 --> 00:02:29.841
potentially or code gen tools to,
as part of a build step

32
00:02:29.841 --> 00:02:34.983
have it included in the back end to or
wherever you need it.

33
00:02:34.983 --> 00:02:39.908
Yeah so the question was
about just the usefulness and

34
00:02:39.908 --> 00:02:46.150
basically the possibilities of
having this declarative format for

35
00:02:46.150 --> 00:02:51.403
a machine and using it pretty
much anywhere and i actually

36
00:02:51.403 --> 00:02:58.627
really wanna show you this thing that
has absolutely nothing to do with react,

37
00:02:58.627 --> 00:03:03.390
or even JavaScript at all,
but is really cool.

38
00:03:03.390 --> 00:03:08.170
So someone shrivel up.

39
00:03:08.170 --> 00:03:13.250
He made a code generator
that generates c++ code.

40
00:03:13.250 --> 00:03:15.430
From an X state machine.

41
00:03:15.430 --> 00:03:20.482
So basically you can take these X state
machines and run them within a C++

42
00:03:20.482 --> 00:03:25.550
application, which is something that
i haven't even dreamed of doing.

43
00:03:25.550 --> 00:03:30.560
And yeah, so that's definitely
a possibility right there.

44
00:03:30.560 --> 00:03:33.550
Just to show you how far you
can really go with this.

45
00:03:35.530 --> 00:03:40.740
I had a question actually about the clock,
the foreign clock.

46
00:03:40.740 --> 00:03:46.410
And so, yeah, so you are fetching
some data, from this world time API.

47
00:03:46.410 --> 00:03:51.260
And you chose to use the react
query library for that, but.

48
00:03:52.590 --> 00:03:57.527
Would you in general or why wouldn't you
why wouldn't you do that query as part of

49
00:03:57.527 --> 00:04:00.793
the machine so,
lwhat you're doing is getting it and

50
00:04:00.793 --> 00:04:05.530
then you having to do an effect and
inject it and all this kinda stuff, right?

51
00:04:05.530 --> 00:04:10.625
But wouldn't you in
general maybe prefer to

52
00:04:10.625 --> 00:04:16.280
add that as an invoked
step within your machine.

53
00:04:17.850 --> 00:04:19.900
&gt;&gt; So, yeah, that's a great question.

54
00:04:19.900 --> 00:04:25.269
The question was about the use of reacts
query over here to fetch data and

55
00:04:25.269 --> 00:04:29.220
to do that separately
from the actual machine.

56
00:04:29.220 --> 00:04:32.880
And so
the answer to that is sorta two fold.

57
00:04:32.880 --> 00:04:37.730
First of all, i did it to demonstrate
how you would use a third party library.

58
00:04:37.730 --> 00:04:40.660
A third party reacts library with that.

59
00:04:40.660 --> 00:04:45.286
But also reacts query
currently doesn't expose

60
00:04:45.286 --> 00:04:50.010
a way to do all of the caching
magic that it does.

61
00:04:50.010 --> 00:04:52.838
So reacts query is
a really great library for

62
00:04:52.838 --> 00:04:57.930
actually managing the caching of your
resources so you don't over fetch.

63
00:04:57.930 --> 00:05:02.491
So if i'm doing something,
i go to another component or

64
00:05:02.491 --> 00:05:08.950
components unmounted, and i remounted
it's gonna call that query again.

65
00:05:08.950 --> 00:05:10.514
But the query is gonna say,

66
00:05:10.514 --> 00:05:13.840
i already cached this exact
same thing that you want.

67
00:05:13.840 --> 00:05:15.250
So here you go.

68
00:05:15.250 --> 00:05:18.730
And obviously,
xe doesn't have that caching magic.

69
00:05:18.730 --> 00:05:23.838
But reacts query internally has this
cache that's really smart about,

70
00:05:23.838 --> 00:05:28.330
when to evict things from the cache or
when to hold things.

71
00:05:28.330 --> 00:05:32.392
And because it doesn't expose it as a,

72
00:05:32.392 --> 00:05:36.453
as a framework agnostic, tool or API,

73
00:05:36.453 --> 00:05:42.250
we're sort of stuck with
using the hooks for that.

74
00:05:42.250 --> 00:05:46.853
And Apollo clients sorta has the same
problem except that with Apollo clients,

75
00:05:46.853 --> 00:05:49.000
i really actually like that.

76
00:05:49.000 --> 00:05:51.520
It does expose the actual clients for you.

77
00:05:51.520 --> 00:05:54.159
So if you don't wanna usethe hooks,

78
00:05:54.159 --> 00:05:58.170
you could use that clients
object itself and be able to.

79
00:05:59.350 --> 00:06:01.109
Put that in an invocation or

80
00:06:01.109 --> 00:06:04.860
even as a side effects like you
using actions the next day.

81
00:06:06.040 --> 00:06:09.169
&gt;&gt; Right?.
Yeah, so okay, so i understand that in

82
00:06:09.169 --> 00:06:14.460
fact we use react query a little bit,
as well for those same caching reasons.

83
00:06:15.700 --> 00:06:20.692
More what i was getting at was just
there's no real reason other than maybe

84
00:06:20.692 --> 00:06:25.685
i want that extra caching function or
whatever, to just put my fetches and

85
00:06:25.685 --> 00:06:27.150
stuff as as invoked.

86
00:06:28.600 --> 00:06:33.240
Effects within the machine that's fine,
right there's.

87
00:06:33.240 --> 00:06:36.895
People do that that's a cool thing to do
that there's no real reason other than,

88
00:06:36.895 --> 00:06:39.685
i'm getting this extra function
out of some other library.

89
00:06:39.685 --> 00:06:40.940
&gt;&gt; Right.

90
00:06:40.940 --> 00:06:43.916
Yeah.
So again, the question was about using,

91
00:06:43.916 --> 00:06:48.778
react query versus doing everything in
the machine if you wanna do everything

92
00:06:48.778 --> 00:06:50.760
within the machine.

93
00:06:50.760 --> 00:06:55.126
&gt;&gt; That's definitely allowed and
once reacts query hopefully in

94
00:06:55.126 --> 00:06:59.489
the future once they have that,
their caching technology able

95
00:06:59.489 --> 00:07:04.310
to be just imported without needing
to go through a react hook.

96
00:07:04.310 --> 00:07:05.760
Then i will definitely.

97
00:07:06.950 --> 00:07:08.966
Or someone can definitely
make a library or

98
00:07:08.966 --> 00:07:11.210
you don't even really need a library for
that.

99
00:07:11.210 --> 00:07:14.014
You could invoke that yourself and

100
00:07:14.014 --> 00:07:20.230
use the cast directly through
either actions or, invocations.

101
00:07:20.230 --> 00:07:24.896
&gt;&gt; Yeah, i was gonna say somebody needs
to make basically an xstate backed

102
00:07:24.896 --> 00:07:28.330
version of react query and react router.

103
00:07:28.330 --> 00:07:30.645
&gt;&gt; I wanna i definitely want to.

104
00:07:30.645 --> 00:07:33.071
&gt;&gt; [LAUGH]
&gt;&gt; Every time i think about exit i'm man,

105
00:07:33.071 --> 00:07:35.863
somebody needs to make
a rap router available.

106
00:07:35.863 --> 00:07:40.079
&gt;&gt; [LAUGH] Yeah, well what's funny is,

107
00:07:40.079 --> 00:07:45.655
Amber a long time ago,
someone actually made a,

108
00:07:45.655 --> 00:07:49.990
Ember router using state charts.

109
00:07:49.990 --> 00:07:52.440
Look at the year 2012 in 2012.

110
00:07:52.440 --> 00:07:54.720
I was struggling with j query.

111
00:07:54.720 --> 00:07:59.580
I wasn't doing anything related to
state charts or state machines,

112
00:07:59.580 --> 00:08:02.230
but Ember very, early on.

113
00:08:02.230 --> 00:08:04.440
They were actually using
statecharts all over the place.

114
00:08:04.440 --> 00:08:07.700
So again, this is not new technology.

115
00:08:07.700 --> 00:08:14.149
And funny enough, Ember was the first one
to do it or at least in the front end.

116
00:08:14.149 --> 00:08:19.099
My last question, so
one of the biggiest difficulties

117
00:08:19.099 --> 00:08:23.303
I've had is dealing with
the types with this.

118
00:08:23.303 --> 00:08:28.667
Going through GitHub issues and stuff
on XState, I know that you're aware of

119
00:08:28.667 --> 00:08:34.280
some of the pain points with pipes and
some of the problems that are there.

120
00:08:34.280 --> 00:08:39.160
In fact, I ran into most of those
problems trying to create a react

121
00:08:39.160 --> 00:08:44.398
query lite basically that was XState
back [LAUGH] because I wanted it but

122
00:08:44.398 --> 00:08:47.410
I didn't wanted to use XState.

123
00:08:47.410 --> 00:08:50.060
Anyway, the types ended up just
being an absolute nightmare.

124
00:08:50.060 --> 00:08:52.805
I literally just dropped
it because of that.

125
00:08:52.805 --> 00:08:56.904
But I'm just wondering what
are your plans to improve

126
00:08:56.904 --> 00:09:00.012
the TypeScript experience for XState?

127
00:09:00.012 --> 00:09:05.005
Cuz I see that as being the biggest
blocker in terms of adoption at my

128
00:09:05.005 --> 00:09:06.620
company for XState.

129
00:09:08.240 --> 00:09:12.244
&gt;&gt; Right, so the question was
basically the future of XState and

130
00:09:12.244 --> 00:09:17.326
typing with TypeScript, which you know
definitely is a common pain points and

131
00:09:17.326 --> 00:09:19.100
that's for a few reasons.

132
00:09:19.100 --> 00:09:24.245
That's mainly because the things
that XState is trying to

133
00:09:24.245 --> 00:09:29.289
do is sort of outside the realm
of what TypeScript can do.

134
00:09:29.289 --> 00:09:35.572
But basically in version 5 we are going
to be improving the typing a lot,

135
00:09:35.572 --> 00:09:41.655
and we are gonna be doing it by
basically simplifying parts of the API.

136
00:09:41.655 --> 00:09:44.870
And also just trying to infer a lot more.

137
00:09:44.870 --> 00:09:50.005
In fact, every single time that there's
a minor release or a major release of

138
00:09:50.005 --> 00:09:55.140
TypeScript, we immediately say,
that solves a good chunk of our problems.

139
00:09:55.140 --> 00:10:00.117
And so we're gonna see more and
more of that, especially with TypeScript,

140
00:10:00.117 --> 00:10:03.310
you could now type template literals.

141
00:10:03.310 --> 00:10:06.791
And so
that's going to be very helpful just for

142
00:10:06.791 --> 00:10:10.454
being able to autocomplete
different states and

143
00:10:10.454 --> 00:10:15.292
just targeting states,
especially the dot separated states.

144
00:10:15.292 --> 00:10:18.863
Now it's very possible
to strongly type that.

145
00:10:18.863 --> 00:10:21.853
Additionally, as was mentioned earlier,

146
00:10:21.853 --> 00:10:27.480
there is a project called XState codegen,
which is really, really useful.

147
00:10:27.480 --> 00:10:31.215
It basically generates the types for
you the same way that Prisma,

148
00:10:31.215 --> 00:10:35.660
if you're familiar with Prisma,
would generate those types, too.

149
00:10:35.660 --> 00:10:40.455
And so it advertises that it gives
you 100% TypeScript coverage of

150
00:10:40.455 --> 00:10:43.000
XState in TypeScript.

151
00:10:43.000 --> 00:10:45.904
So definitely recommend
taking a look at that,

152
00:10:45.904 --> 00:10:50.478
because it's going to generate a lot
of the types that you would either have

153
00:10:50.478 --> 00:10:53.816
to manually type or
that you would have a struggle, and

154
00:10:53.816 --> 00:10:59.090
maybe look at the source code of XState
to figure out how those should be typed.

155
00:10:59.090 --> 00:11:03.552
So again, version five, there is
gonna be a lot of simplification and

156
00:11:03.552 --> 00:11:05.214
a lot of clean up of types,

157
00:11:05.214 --> 00:11:10.640
as well as using a lot of new TypeScript
features in order to get those typings in.

158
00:11:10.640 --> 00:11:14.240
And we're also experimenting
a lot with inference.

159
00:11:14.240 --> 00:11:19.411
So basically making it so
that you don't have to pass context and

160
00:11:19.411 --> 00:11:24.690
events inside the type arguments or
the generic parameters.

161
00:11:24.690 --> 00:11:29.780
Instead, those are inferred from
what you put inside the object.

162
00:11:29.780 --> 00:11:35.390
And so yeah,
we definitely have a lot of plans there.

163
00:11:35.390 --> 00:11:38.742
So yeah,
definitely check out XState codegen.

164
00:11:38.742 --> 00:11:43.410
I think, for current XState projects,
this is probably the most helpful thing.

165
00:11:43.410 --> 00:11:44.509
And in version five,

166
00:11:44.509 --> 00:11:48.610
I'm also gonna be adding a lot more
documentation on TypeScript usage as well.

167
00:11:51.140 --> 00:11:53.000
&gt;&gt; There's a couple of questions in chat.

168
00:11:54.130 --> 00:12:00.830
Is there a way to generate code from
a GUI when you're creating the charts?

169
00:12:00.830 --> 00:12:02.825
Okay, so the question was,

170
00:12:02.825 --> 00:12:07.910
is there a way to generate code from
some sort of program user interface?

171
00:12:08.970 --> 00:12:10.478
There will be, there definitely will be.

172
00:12:10.478 --> 00:12:14.948
It's something that I'm working on right
now, which is basically a drag and

173
00:12:14.948 --> 00:12:18.481
drop editor where you could
create states and transitions.

174
00:12:18.481 --> 00:12:24.424
And basically create the entire
state chart, export that as JSON,

175
00:12:24.424 --> 00:12:29.650
and yeah,
just have that auto generated for you.

176
00:12:29.650 --> 00:12:31.566
&gt;&gt; Is there any way we get a preview?

177
00:12:31.566 --> 00:12:34.048
&gt;&gt; There is not [LAUGH].

178
00:12:34.048 --> 00:12:38.244
But I will say that the project updates

179
00:12:38.244 --> 00:12:42.965
are going to be on statecharts.io, and so

180
00:12:42.965 --> 00:12:49.670
it's basically going to be what
you see with the inspector.

181
00:12:49.670 --> 00:12:54.788
And so this inspector, it already works

182
00:12:54.788 --> 00:13:00.815
with many things if you
allow pop ups over here.

183
00:13:00.815 --> 00:13:03.595
Inspector is pretty much one way.

184
00:13:03.595 --> 00:13:08.541
So it takes your machines defined here,
and it generates it visually for

185
00:13:08.541 --> 00:13:10.055
you over here.

186
00:13:10.055 --> 00:13:13.752
So just imagine in the future
that this will be something where

187
00:13:13.752 --> 00:13:17.035
you could add states,
you could change transitions.

188
00:13:17.035 --> 00:13:21.641
You could modify properties
on the right hand side, and

189
00:13:21.641 --> 00:13:26.900
those are going to be reflected
back in here via a JSON file.

190
00:13:26.900 --> 00:13:29.940
And you could pass that JSON
file into your machine.

191
00:13:29.940 --> 00:13:35.915
And then you could, of course, add the
implementation details such as actions,

192
00:13:35.915 --> 00:13:38.520
guards, services and all of that.

193
00:13:40.660 --> 00:13:45.200
So, hopefully I will have
a preview by the end of the year.

194
00:13:45.200 --> 00:13:48.590
No promises though [LAUGH], but yeah.

195
00:13:51.910 --> 00:13:55.830
&gt;&gt; What are some types of things that
you shouldn't do inside state machines?

196
00:13:57.520 --> 00:13:59.248
&gt;&gt; Okay, so the question was,

197
00:13:59.248 --> 00:14:03.590
what types of things should you
not do inside of a state machine?

198
00:14:03.590 --> 00:14:09.550
And the simple mathematical answer
to that is be non-deterministic.

199
00:14:09.550 --> 00:14:12.579
Which sounds like a mouthful, but

200
00:14:12.579 --> 00:14:17.281
what that basically means
is that in a state machine,

201
00:14:17.281 --> 00:14:22.623
every single transition should
predictably go somewhere.

202
00:14:22.623 --> 00:14:27.948
So there's no such thing
as saying on Toggle,

203
00:14:27.948 --> 00:14:34.786
and doing Math.random is less than 0.5,
go to active.

204
00:14:34.786 --> 00:14:40.020
Otherwise go to inactive,
something like that.

205
00:14:40.020 --> 00:14:43.350
That's just not a thing and
it's not something that you should do.

206
00:14:43.350 --> 00:14:47.182
Obviously that's a really silly example,
but

207
00:14:47.182 --> 00:14:53.350
there is a reason why this machine is
created in such a declarative way.

208
00:14:53.350 --> 00:14:57.775
And it's because when you have functions,
functions are really versatile,

209
00:14:57.775 --> 00:15:00.370
you could do anything in a function.

210
00:15:00.370 --> 00:15:03.333
However, that's also a problem, too,

211
00:15:03.333 --> 00:15:07.143
because one of the best parts
about not only XState but

212
00:15:07.143 --> 00:15:12.300
state machines and state charts is
that everything is predictable.

213
00:15:12.300 --> 00:15:16.017
You could predict the future, not even
just what happened in the past, but

214
00:15:16.017 --> 00:15:16.910
what can happen.

215
00:15:16.910 --> 00:15:22.241
And that's just not cool from a, I could
time travel in the future type of thing.

216
00:15:22.241 --> 00:15:26.132
But also when you're explaining
the logic of your application,

217
00:15:26.132 --> 00:15:30.021
you want to be able to tell people,
whether they're technical or

218
00:15:30.021 --> 00:15:33.790
not in this screen,
here's all of the things that can happen.

219
00:15:33.790 --> 00:15:36.260
And here are the things that can't happen.

220
00:15:36.260 --> 00:15:41.250
And when this thing happens, this is
what the next state is going to be.

221
00:15:41.250 --> 00:15:46.740
So if you're working on either a plain
react application with Redux or

222
00:15:46.740 --> 00:15:51.765
use Reducer, just something like that,
there's really no way

223
00:15:51.765 --> 00:15:58.111
to predict what can happen next without
having to, I say there's almost no way.

224
00:15:58.111 --> 00:16:01.682
I mean, obviously, you could Take
the function as a string and

225
00:16:01.682 --> 00:16:05.475
break down the AST and do some
static analysis or whatever on that.

226
00:16:05.475 --> 00:16:11.444
Or you could just use a JSON object and
be able to walk through the object and

227
00:16:11.444 --> 00:16:15.871
be able to predict,
what can happen at any given time,

228
00:16:15.871 --> 00:16:20.130
what are all the possible
states in my application?

229
00:16:20.130 --> 00:16:23.766
Yeah, just making that predictable
is the number one rule in

230
00:16:23.766 --> 00:16:26.847
using state machines and
state charts in general.

231
00:16:26.847 --> 00:16:30.898
So, in that state specifically,
it follows that rule.

232
00:16:30.898 --> 00:16:35.443
Don't mutate anything
outside of an action or yeah,

233
00:16:35.443 --> 00:16:42.414
basically don't do any side effects
outside of actions, assign should be pure.

234
00:16:42.414 --> 00:16:46.864
I mean, it will work,
like we previously talked about,

235
00:16:46.864 --> 00:16:52.350
it will work if you mutate it, but
again, try to avoid that if you can.

236
00:16:52.350 --> 00:16:58.050
And yeah, so basically the structure
provides that pit of success for you.

237
00:17:00.638 --> 00:17:04.864
&gt;&gt; Had a question about bundle size,
I was checking out bundle phobia.

238
00:17:04.864 --> 00:17:08.384
I know, x state for react is pretty tiny.

239
00:17:08.384 --> 00:17:11.438
It's like 1.4 kilobytes and the XState.

240
00:17:11.438 --> 00:17:15.981
I mean, it's not massive,
but it's like 16.4 and

241
00:17:15.981 --> 00:17:23.048
I know where I work they're like we don't
have a lot of dependent third-party stuff.

242
00:17:23.048 --> 00:17:25.563
But this really interests me and

243
00:17:25.563 --> 00:17:29.569
just wondering if there is
any work on bundle size or

244
00:17:29.569 --> 00:17:35.085
it's not really on the radar right now,
or is it really not a big deal?

245
00:17:35.085 --> 00:17:41.269
&gt;&gt; I wanna show you a tweet about that,
I guess I can't find it.

246
00:17:41.269 --> 00:17:46.178
But [COUGH] anyway there was
there was someone who actually

247
00:17:46.178 --> 00:17:51.188
used XState in a major project and
was able to delete like,

248
00:17:51.188 --> 00:17:54.766
I think around 8,000 lines of code,

249
00:17:54.766 --> 00:17:59.080
just by using XState to
replace a lot of the logic.

250
00:17:59.080 --> 00:18:04.139
So it's important to note that XState
is not just a state management library,

251
00:18:04.139 --> 00:18:09.120
it's more of a state orchestration library
that has a lot of things built in,

252
00:18:09.120 --> 00:18:12.358
which is what does contribute
to its bundle size.

253
00:18:12.358 --> 00:18:18.089
And XState version five we are working on
ways to make it a lot smaller, especially

254
00:18:18.089 --> 00:18:22.904
by making it more modular and making it so
that you only need to pick and

255
00:18:22.904 --> 00:18:28.073
choose what you need and not everything
is exported in one giant spindle.

256
00:18:28.073 --> 00:18:32.042
And in fact, you could use XState
that way as well even today.

257
00:18:32.042 --> 00:18:36.542
You do have to go through
the awkward import for example,

258
00:18:36.542 --> 00:18:42.566
create machine from xstate slash lib
slash machine or something like that.

259
00:18:42.566 --> 00:18:47.633
But yeah, what I believe that
the the amounts that XState gives

260
00:18:47.633 --> 00:18:53.177
to you in terms of features and
what you're able to do with the logic,

261
00:18:53.177 --> 00:18:58.839
it eliminates a lot of code,
especially in my anecdotal experience.

262
00:18:58.839 --> 00:19:02.954
But yeah, we are working on
shrinking the bundle size.

263
00:19:02.954 --> 00:19:07.711
And if you only need state machines and
you don't need the nesting or the history

264
00:19:07.711 --> 00:19:12.126
or parallel states or things like that,
then XState FSM is what you want.

265
00:19:12.126 --> 00:19:17.570
It's only around one kilobyte,
so it's extremely minimal,

266
00:19:17.570 --> 00:19:21.687
but it has the same
structure as XState itself.

267
00:19:21.687 --> 00:19:24.845
&gt;&gt; Okay cool, cool, that's very helpful.

268
00:19:24.845 --> 00:19:25.484
Thank you.

269
00:19:25.484 --> 00:19:30.294
&gt;&gt; Yeah, all right, well,
if there are no other questions,

270
00:19:30.294 --> 00:19:33.277
then I want to thank you all so much for

271
00:19:33.277 --> 00:19:38.106
spending an entire day with me
working on XState and react.

272
00:19:38.106 --> 00:19:42.339
And just, exploring from
the very basics to just some

273
00:19:42.339 --> 00:19:46.951
advanced techniques like invoking and
spawning actors,

274
00:19:46.951 --> 00:19:51.206
what you could do with XState
in react applications.

275
00:19:51.206 --> 00:19:53.498
So I really hope you
enjoyed this workshop.

276
00:19:53.498 --> 00:19:54.562
Thank you.

277
00:19:54.562 --> 00:19:57.720
&gt;&gt; Thanks so much, David, it was awesome.

278
00:19:57.720 --> 00:20:01.507
&gt;&gt; Thank you.

