WEBVTT

1
00:00:00.040 --> 00:00:03.170
Alright, so
let's talk about invoking actors.

2
00:00:03.170 --> 00:00:07.755
In exercise seven,
we don't have this timer working or

3
00:00:07.755 --> 00:00:13.620
actually it is working, probably
because I have the solution up here.

4
00:00:16.110 --> 00:00:16.970
Just fix that.

5
00:00:18.500 --> 00:00:19.000
Okay.

6
00:00:21.490 --> 00:00:26.080
So in exercise seven Obviously our timer
doesn't work because we removed that use

7
00:00:26.080 --> 00:00:26.620
effect.

8
00:00:26.620 --> 00:00:30.760
And instead, we want to use that
in the actual machine itself.

9
00:00:30.760 --> 00:00:34.740
So here's how we would
go about doing that.

10
00:00:34.740 --> 00:00:38.417
Just like you saw in the lesson,
we're going to invoke a callback.

11
00:00:40.939 --> 00:00:43.260
So it's gonna be a source, and

12
00:00:43.260 --> 00:00:48.349
the source of this invoke Is we're
going to be creating a callback so

13
00:00:48.349 --> 00:00:53.370
that we can take the context and
the events that caused the invoke.

14
00:00:53.370 --> 00:00:55.580
But we don't need that in this case.

15
00:00:55.580 --> 00:00:58.290
So we're just going to
be using the context.

16
00:00:58.290 --> 00:01:01.450
And we're going to be
returning a function.

17
00:01:01.450 --> 00:01:03.290
So there's two ways you could do this.

18
00:01:03.290 --> 00:01:09.103
You could either return the function here,
which is that Send back and,

19
00:01:09.103 --> 00:01:13.980
and the receive which we're not
going to be using over here.

20
00:01:15.310 --> 00:01:20.940
Or you can make this a little bit more
concise and just have context sent back.

21
00:01:22.120 --> 00:01:24.010
And then here is where
we create the interval.

22
00:01:25.300 --> 00:01:29.728
So we say const interval equals or
I'm just going to call this I.

23
00:01:29.728 --> 00:01:31.491
Equals setInterval.

24
00:01:34.298 --> 00:01:41.825
And on the every interval,
we're going to send back a tick event.

25
00:01:41.825 --> 00:01:48.071
And so
that tick event is going to happen every,

26
00:01:48.071 --> 00:01:53.858
Well second times context, dot interval.

27
00:01:53.858 --> 00:01:58.429
Now, important note over here,
this context represents

28
00:01:58.429 --> 00:02:03.440
the context at the time that
this invoked actor was created.

29
00:02:03.440 --> 00:02:07.036
So it's not going to
be in Updated context,

30
00:02:07.036 --> 00:02:10.900
you only get the context once basically.

31
00:02:10.900 --> 00:02:12.748
And if the context changes,

32
00:02:12.748 --> 00:02:17.600
then you need to communicate that
to the actor within the vents.

33
00:02:17.600 --> 00:02:21.900
So don't forget to return a function
that cleans up that interval.

34
00:02:21.900 --> 00:02:26.126
So we're going to clear interval I But

35
00:02:26.126 --> 00:02:30.440
yeah, that should do the trick.

36
00:02:30.440 --> 00:02:35.640
So when we click, we see that we have
our interval working just the same.

37
00:02:35.640 --> 00:02:40.600
Now the good thing about this is
that console dot log cleaning up

38
00:02:40.600 --> 00:02:42.350
is that we could.

39
00:02:42.350 --> 00:02:46.340
Only have this interval run
when it's in this state.

40
00:02:46.340 --> 00:02:51.257
This is non state specific thing
this in original state charts

41
00:02:51.257 --> 00:02:54.290
is you could consider it inactivity.

42
00:02:54.290 --> 00:02:59.060
It's basically That happens during
the states or throughout the state.

43
00:02:59.060 --> 00:03:01.262
So as long as you're
in the running states,

44
00:03:01.262 --> 00:03:03.930
this invocation is still
going to be running.

45
00:03:03.930 --> 00:03:07.590
Once you exit it,
this is going to be cleaned up.

46
00:03:09.270 --> 00:03:15.670
So, we click here because
it paused may be reset.

47
00:03:16.710 --> 00:03:21.213
So here we go paused, you can see
that the timer is being cleaned up so

48
00:03:21.213 --> 00:03:23.350
it's no longer sending ticks.

49
00:03:24.510 --> 00:03:26.950
It see cleaning up right over here.

50
00:03:26.950 --> 00:03:30.320
And of course if we reset,
it's going to be cleaned up again.

51
00:03:33.010 --> 00:03:38.300
So it's creating a new timer every
single time we enter the running state.

52
00:03:38.300 --> 00:03:42.331
And that's so that we don't get
any wasted calls or, you know,

53
00:03:42.331 --> 00:03:46.750
wasted code basically running when
it's not supposed to be running.

54
00:03:48.120 --> 00:03:50.250
So were there any questions
about that exercise.

55
00:03:51.700 --> 00:03:55.394
I just like how it gets rid of
the use context because like our,

56
00:03:55.394 --> 00:03:58.110
our component is getting tinier and
tinier.

57
00:03:58.110 --> 00:04:02.284
It's like pretty much JSX with like one or
two hooks now, so it's,

58
00:04:02.284 --> 00:04:03.760
it's kind of elegant.

59
00:04:03.760 --> 00:04:07.680
&gt;&gt; Yeah, yeah, because state machines and
state charts can handle so

60
00:04:07.680 --> 00:04:10.790
much you end up not needing
things such as use effect.

61
00:04:12.040 --> 00:04:13.780
And other things like that.

62
00:04:13.780 --> 00:04:14.280
So.

