WEBVTT

1
00:00:01.100 --> 00:00:07.355
All right, so let's go over how we
could show both finite state and

2
00:00:07.355 --> 00:00:13.330
coil unquote, infinite state or
extended data as well.

3
00:00:13.330 --> 00:00:15.933
Let's say in this alarm machine,

4
00:00:15.933 --> 00:00:21.530
we want to keep track of how many
times we clicked the toggle button.

5
00:00:21.530 --> 00:00:26.820
To go from pending, sorry,
from inactive to pending.

6
00:00:28.090 --> 00:00:31.130
So let's just keep accounts there.

7
00:00:31.130 --> 00:00:34.262
We're going to be using the context
property on create machines

8
00:00:34.262 --> 00:00:36.490
to keep track of this extended States.

9
00:00:36.490 --> 00:00:40.030
So we'll have count and started at zero.

10
00:00:40.030 --> 00:00:45.610
Now this context is available on
the state dot context property.

11
00:00:45.610 --> 00:00:52.386
So we could say const count
equals state context dot counts.

12
00:00:52.386 --> 00:00:54.629
Could actually make this shorter and

13
00:00:54.629 --> 00:00:59.720
just use ESX restructuring to grab
that counts from state context.

14
00:00:59.720 --> 00:01:01.390
And so now let's put that in here.

15
00:01:05.390 --> 00:01:09.559
And so we could see that
extended state value, which,

16
00:01:09.559 --> 00:01:14.556
again, is data that doesn't
necessarily fit in finite states.

17
00:01:14.556 --> 00:01:16.420
It could potentially be infinite.

18
00:01:16.420 --> 00:01:18.669
If you click this button
an infinite amount of times.

19
00:01:19.770 --> 00:01:22.720
That is expressed through state context.

20
00:01:22.720 --> 00:01:27.840
Now in order to change this context,
we could use an action.

21
00:01:27.840 --> 00:01:31.530
And x state has a built in assign action.

22
00:01:31.530 --> 00:01:35.940
And it's important to note that
the assign action is a pure function.

23
00:01:35.940 --> 00:01:37.640
All it does is return an object.

24
00:01:37.640 --> 00:01:43.315
So if we do console dot
log A sign counts 100.

25
00:01:44.664 --> 00:01:49.006
We're going to get an object that has an
assignment's property of counts a hundred.

26
00:01:49.006 --> 00:01:53.009
And it's not actually going to
magically do any assignments itself.

27
00:01:54.070 --> 00:01:57.904
The way we actually had that action,

28
00:01:57.904 --> 00:02:02.960
change the context is
by doing it in actions.

29
00:02:02.960 --> 00:02:06.961
So, for example,
in this toggle transition,

30
00:02:06.961 --> 00:02:10.720
you could specify that one of the actions.

31
00:02:10.720 --> 00:02:14.650
Should be assigning the counts to 100.

32
00:02:14.650 --> 00:02:18.010
So, see what happens there.

33
00:02:18.010 --> 00:02:21.590
If we click here, it will change to 100.

34
00:02:21.590 --> 00:02:26.037
Now obviously, we don't want it to
change to a static value in this case,

35
00:02:26.037 --> 00:02:29.620
we want to keep track based
on the previous count.

36
00:02:29.620 --> 00:02:33.580
How many times that
button has been clicked.

37
00:02:33.580 --> 00:02:38.576
And so we can do that by passing in
a function that takes two arguments,

38
00:02:38.576 --> 00:02:40.910
the context hence the events.

39
00:02:40.910 --> 00:02:44.320
Which is the events object that
caused this transition to happen.

40
00:02:44.320 --> 00:02:47.049
So we could say that this count should

41
00:02:47.049 --> 00:02:51.550
be the context that counts which
is the previous count + 1.

42
00:02:52.960 --> 00:02:57.750
So now, every time we click this
pending button, so click here.

43
00:03:00.100 --> 00:03:04.427
And then, so every time it's white,
and we click it.

44
00:03:04.427 --> 00:03:06.992
This counts will increments and

45
00:03:06.992 --> 00:03:13.080
that's how we could represent extended
states within our state machines.

