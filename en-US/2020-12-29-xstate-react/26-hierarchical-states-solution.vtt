WEBVTT

1
00:00:00.050 --> 00:00:04.410
From my playing around with it here,
it seems like you cannot

2
00:00:04.410 --> 00:00:09.550
transition to a parent state from
within a nested hierarchical state.

3
00:00:09.550 --> 00:00:10.370
Does that sound right?

4
00:00:12.000 --> 00:00:16.100
&gt;&gt; So the question was about
transitioning basically to any state,

5
00:00:16.100 --> 00:00:20.360
whether it's a parent or
another state from each child state.

6
00:00:20.360 --> 00:00:24.500
And the way you want to
do that is by using ids.

7
00:00:24.500 --> 00:00:29.435
So for instance,
if I wanted to somehow transition from

8
00:00:29.435 --> 00:00:34.055
a child state,
we'll take a look at this final one,

9
00:00:34.055 --> 00:00:38.465
transition from this normal
state on reset go to,

10
00:00:38.465 --> 00:00:44.145
I don't know, just paused or
something, it doesn't matter.

11
00:00:45.780 --> 00:00:49.624
What you would do is you would specify

12
00:00:49.624 --> 00:00:54.462
this date target via that hash,
so #paused.

13
00:00:54.462 --> 00:00:59.161
And then you would give
this an id of paused,

14
00:00:59.161 --> 00:01:03.150
so that's how you would do that.

15
00:01:03.150 --> 00:01:06.760
The reason it is awkward is because
it's supposed to be awkward.

16
00:01:08.450 --> 00:01:13.381
Ideally, you should have your logic and
your transitions so

17
00:01:13.381 --> 00:01:19.673
that you basically stay in that parents
dates and you don't try to escape it.

18
00:01:19.673 --> 00:01:25.320
You could think of it like
a parent-child relationship.

19
00:01:25.320 --> 00:01:27.627
A child should never tell
an adult what to do, but

20
00:01:27.627 --> 00:01:29.610
then adults can tell children what to do.

21
00:01:29.610 --> 00:01:34.500
I don't know if that's a good analogy, but
hopefully that resonates with some people.

22
00:01:35.580 --> 00:01:40.500
All right, so let's quickly go
over this exercise real quick.

23
00:01:40.500 --> 00:01:45.693
The goal was to separate running
into nested or hierarchical states,

24
00:01:45.693 --> 00:01:49.224
we wanted two states both normal and
overtime.

25
00:01:49.224 --> 00:01:52.960
And so let's go ahead and add that here.

26
00:01:52.960 --> 00:01:58.156
So we have an initial state of normal, and

27
00:01:58.156 --> 00:02:05.584
then we have two child states
which is normal and overtime.

28
00:02:09.200 --> 00:02:11.766
So we added the initial state.

29
00:02:11.766 --> 00:02:14.599
It's going to start in that normal state.

30
00:02:14.599 --> 00:02:18.204
And so ticking,
no matter which child state it is in,

31
00:02:18.204 --> 00:02:22.138
that ticking behavior is still
going to do the same thing.

32
00:02:22.138 --> 00:02:27.215
It's still going to increments the context
of the lapse by that interval and

33
00:02:27.215 --> 00:02:30.660
that's exactly what we wanted to happen.

34
00:02:30.660 --> 00:02:37.070
We also want toggle pause to
only happen in the normal state.

35
00:02:37.070 --> 00:02:41.885
And adding a minute to only happen
in the normal state as well,

36
00:02:41.885 --> 00:02:43.930
according to the read me.

37
00:02:45.230 --> 00:02:48.410
So let's just try this out now.

38
00:02:50.050 --> 00:02:55.160
So if we go to exercise 6, we'll see
that we're in the running.normal state.

39
00:02:56.370 --> 00:03:01.605
And once we go overtime,
aha, so it's not going

40
00:03:01.605 --> 00:03:07.226
overtime because we haven't
added that transition

41
00:03:07.226 --> 00:03:11.950
that we always go to
the overtime states when

42
00:03:11.950 --> 00:03:17.210
the elapsed time exceeds
the total duration.

43
00:03:17.210 --> 00:03:21.472
So we could say always go, oops,

44
00:03:21.472 --> 00:03:27.565
always go to the overtime
state on the condition

45
00:03:27.565 --> 00:03:32.288
that context.elapsed is greater or

46
00:03:32.288 --> 00:03:36.270
equal to context.duration.

47
00:03:37.270 --> 00:03:38.230
So now let's try that out.

48
00:03:40.150 --> 00:03:45.312
We're in the normal state and so
once that condition hits true,

49
00:03:45.312 --> 00:03:48.097
now we're in the overtime state.

50
00:03:48.097 --> 00:03:51.134
And it's going to keep decrementing or

51
00:03:51.134 --> 00:03:56.563
incrementing that overall time,
which shows that negative number,

52
00:03:56.563 --> 00:04:02.095
showing how far past the total duration
it is, and then we could reset.

53
00:04:02.095 --> 00:04:07.220
Now also we do need to add
a few forbidden transitions.

54
00:04:07.220 --> 00:04:13.580
For example, we don't want reset
to do anything in running.normal.

55
00:04:13.580 --> 00:04:18.230
So this sort of goes to the original
question of how can we target

56
00:04:18.230 --> 00:04:19.468
parent states.

57
00:04:19.468 --> 00:04:22.254
You don't always need to do that.

58
00:04:22.254 --> 00:04:27.575
Instead you could take a defensive
approach and say, for example,

59
00:04:27.575 --> 00:04:32.721
on reset, undefined, so
that creates a forbidden transition.

60
00:04:32.721 --> 00:04:39.000
So that even if we're in that running
state, the reset button isn't even there,

61
00:04:39.000 --> 00:04:43.279
but it's not going to do
anything if it is clicked, so.

62
00:04:43.279 --> 00:04:46.841
Also, you see that little bug there.

63
00:04:46.841 --> 00:04:52.960
We're pausing it even though
we're in the overtime state.

64
00:04:52.960 --> 00:04:58.970
So in the overtime state we
could say on PAUSED undefined.

65
00:04:58.970 --> 00:05:03.870
And so now, sorry on TOGGLE undefined.

66
00:05:03.870 --> 00:05:10.829
So basically the only thing you could do
in the overtime state is reset the timer.

67
00:05:10.829 --> 00:05:14.738
And so when it goes here,
you can't pause it,

68
00:05:14.738 --> 00:05:19.570
you can only reset it and
that's what that button is for.

69
00:05:22.070 --> 00:05:27.073
So are there any questions about
nested hierarchical states and

70
00:05:27.073 --> 00:05:29.391
that exercise, in general?

71
00:05:29.391 --> 00:05:33.865
&gt;&gt; Could you just clarify,
again, for me a little bit so

72
00:05:33.865 --> 00:05:39.434
about what you were saying earlier
about parents not taking orders

73
00:05:39.434 --> 00:05:44.515
from their children,
which makes sense in real life [LAUGH]?

74
00:05:44.515 --> 00:05:49.330
But so were you basically saying that you
shouldn't define transitions from child

75
00:05:49.330 --> 00:05:50.647
states, basically?

76
00:05:50.647 --> 00:05:56.460
And that those transitions should
always be controlled by the parents?

77
00:05:56.460 --> 00:05:59.540
Could you just kind of expound or
clarify on that a little bit?

78
00:06:01.040 --> 00:06:06.425
&gt;&gt; So the question was about just
whether children should defy

79
00:06:06.425 --> 00:06:11.880
their parents and
transition directly to other states.

80
00:06:11.880 --> 00:06:18.969
Again, the way to do that is,
you would have something like some event,

81
00:06:18.969 --> 00:06:25.726
and then you would go to a specific state,
like paused for instance.

82
00:06:25.726 --> 00:06:32.260
And then you would also give
this date an id of paused.

83
00:06:32.260 --> 00:06:36.880
While you can certainly do that,
and there's actually nothing really

84
00:06:36.880 --> 00:06:41.500
wrong with it, that becomes more of
a modeling problem where you want to

85
00:06:41.500 --> 00:06:46.070
basically see what patterns you
could use to your advantage.

86
00:06:46.070 --> 00:06:50.207
So think about the logic
in terms of business logic,

87
00:06:50.207 --> 00:06:55.020
just human terms like what
should happen in each states.

88
00:06:55.020 --> 00:06:59.445
Obviously, if you're in a specific
sub states and an event happens,

89
00:06:59.445 --> 00:07:04.171
it's definitely well within the design
in the way that state charts work,

90
00:07:04.171 --> 00:07:08.239
that you could have any sub states
go to any other parent states.

91
00:07:08.239 --> 00:07:12.913
So honestly, that's really a matter
of opinion whether you want to

92
00:07:12.913 --> 00:07:16.950
directly transition to other states or
not.

93
00:07:16.950 --> 00:07:21.374
There's also other advanced techniques
such as defining final states, and

94
00:07:21.374 --> 00:07:23.971
actually, I could show
you that real quick.

95
00:07:23.971 --> 00:07:27.702
So let's say that we
have this overtime state,

96
00:07:27.702 --> 00:07:30.790
this is actually a pretty good lesson.

97
00:07:30.790 --> 00:07:34.249
So if we're in this overtime state,

98
00:07:34.249 --> 00:07:39.381
let's say that we want to
define some logic that says,

99
00:07:39.381 --> 00:07:45.540
after two seconds, we essentially
want to go to the reset state.

100
00:07:45.540 --> 00:07:50.920
So basically when we reset,
we go back to idle, right?

101
00:07:50.920 --> 00:07:52.664
We could do this.

102
00:07:52.664 --> 00:07:59.082
We could specify the state via id or
the target state,

103
00:07:59.082 --> 00:08:03.690
and give this an id of idle as well.

104
00:08:03.690 --> 00:08:09.649
By the way, by default the id of
each state is a combination of,

105
00:08:09.649 --> 00:08:12.011
let's call this timer,

106
00:08:12.011 --> 00:08:17.979
is the combination of the machine's id and
the id of the state.

107
00:08:17.979 --> 00:08:22.944
So this would be timer.idle, this might be

108
00:08:22.944 --> 00:08:27.783
timer.running.normal, so etc, etc.

109
00:08:27.783 --> 00:08:30.819
But anyway, we could do this.

110
00:08:30.819 --> 00:08:36.252
We could say, After five seconds, and

111
00:08:36.252 --> 00:08:43.200
then it automatically goes,
or sorry, let's reload that.

112
00:08:43.200 --> 00:08:48.247
It should automatically go to the idle
state after a couple of seconds,

113
00:08:48.247 --> 00:08:51.920
so one, two, and
then it goes back to idle.

114
00:08:51.920 --> 00:08:59.417
Now there we're doing a direct transition
from overtime, that child state,

115
00:08:59.417 --> 00:09:04.790
over to idle, but
there is a better way of doing this.

116
00:09:04.790 --> 00:09:09.603
We could define a final state,
so let's call this timeOver.

117
00:09:09.603 --> 00:09:13.901
Naming things is hard,
thankfully with state

118
00:09:13.901 --> 00:09:18.089
machines you could just
name them whatever,

119
00:09:18.089 --> 00:09:23.090
as long as it it makes
sense in a logical context.

120
00:09:23.090 --> 00:09:29.248
So now after 2000 seconds,
we could go to that timeOver state and

121
00:09:29.248 --> 00:09:33.720
then we could say that this
state is a final state.

122
00:09:35.610 --> 00:09:39.095
Now this isn't gonna do
anything on its own, but

123
00:09:39.095 --> 00:09:44.450
on the parent state, we could say onDone,
actually not over there.

124
00:09:44.450 --> 00:09:48.278
We could say onDone,
which basically means,

125
00:09:48.278 --> 00:09:53.676
if this parent state has reached
a final state of its children, so

126
00:09:53.676 --> 00:09:59.510
if one of its children is in a final
state, then we want to go to idle.

127
00:09:59.510 --> 00:10:03.994
Now notice I'm not using the hash here,
because this running state is

128
00:10:03.994 --> 00:10:08.254
a sibling of this idle state, so
we don't even need this anymore.

129
00:10:08.254 --> 00:10:12.340
And now we could,
let me reload running.normal,

130
00:10:12.340 --> 00:10:16.640
after five seconds,
it's gonna go to overTime.

131
00:10:16.640 --> 00:10:20.028
And then after a couple of seconds,
it's gonna go to idle.

132
00:10:20.028 --> 00:10:23.664
So what's happening there is it's
going to that final state and

133
00:10:23.664 --> 00:10:26.910
where's that final state,
this timeOver state.

134
00:10:26.910 --> 00:10:31.250
And because it is in that final state,
this onDone transition gets called.

135
00:10:31.250 --> 00:10:34.850
So it basically immediately
happens that way.

136
00:10:36.710 --> 00:10:39.860
So that's one of the ways
that you can model it.

137
00:10:39.860 --> 00:10:42.139
And it actually might be more clear.

138
00:10:42.139 --> 00:10:46.519
Depending on the business logic and
application logic,

139
00:10:46.519 --> 00:10:52.357
it might be more clear to just have
that explicit timeOver state and saying,

140
00:10:52.357 --> 00:10:58.580
when my child states are done, so when it
reaches a final state, go to this date.

141
00:10:58.580 --> 00:10:59.370
But again, it's up to you,
modeling is an art.

142
00:10:59.370 --> 00:11:05.460
It's not a hard science, so yeah.

