WEBVTT

1
00:00:00.650 --> 00:00:04.626
Okay, so
let's talk about hierarchical states now.

2
00:00:04.626 --> 00:00:11.007
In the first workshop we demonstrated
some uses for hierarchical states and

3
00:00:11.007 --> 00:00:16.110
we could definitely use those
in our timer app as well.

4
00:00:16.110 --> 00:00:21.775
Just looking at this, we have three
states we have idle, running and

5
00:00:21.775 --> 00:00:27.430
paused and those are the current
states of our timer so far.

6
00:00:27.430 --> 00:00:34.525
However, we might want to change things
such as having an overtime state so,

7
00:00:34.525 --> 00:00:38.467
if we go back to the complete application.

8
00:00:38.467 --> 00:00:41.250
Let's make this three seconds.

9
00:00:42.410 --> 00:00:47.114
We want our components to basically
have the same behavior in which

10
00:00:47.114 --> 00:00:51.902
it's still accepting tic events and
it's still counting down when

11
00:00:51.902 --> 00:00:56.864
we're in overtime just because
that's how the Android timer works.

12
00:00:56.864 --> 00:00:58.386
In order to do that,

13
00:00:58.386 --> 00:01:04.117
we need to exhibit this over time state
as being a child of the running state as

14
00:01:04.117 --> 00:01:09.162
well because we're sharing
behaviour between those two states.

15
00:01:09.162 --> 00:01:12.936
So over here in running,

16
00:01:12.936 --> 00:01:17.626
just gonna, it's attached.

17
00:01:17.626 --> 00:01:23.548
I'm going to make just
an overall running state and

18
00:01:23.548 --> 00:01:29.056
we could have two,
two child states over here,

19
00:01:29.056 --> 00:01:36.124
we'll call this normal And

20
00:01:36.124 --> 00:01:43.320
we could also have This one
which is called overtime.

21
00:01:43.320 --> 00:01:48.600
And so of course we go from
normal to overtime when we would

22
00:01:48.600 --> 00:01:56.490
normally go to the expired state, and
so we could start on the normal state.

23
00:01:56.490 --> 00:02:02.065
So what this means, this diagram right
here what it means is that basically

24
00:02:02.065 --> 00:02:07.197
when we're in the running states or
when we enter the running state,

25
00:02:07.197 --> 00:02:13.260
we also enter the normal state,
which is the child of that running states.

26
00:02:13.260 --> 00:02:17.191
And we're in both of these
states at the same time, but

27
00:02:17.191 --> 00:02:21.560
these could be thought of as
basically two separate states.

28
00:02:21.560 --> 00:02:27.830
This is running dot normal, and
this is running dot over time.

29
00:02:27.830 --> 00:02:31.930
And then we could transition and
do all that.

30
00:02:31.930 --> 00:02:38.698
So let me show you an example
in the scratch up real quick.

31
00:02:38.698 --> 00:02:43.006
We have our same alarm machine so

32
00:02:43.006 --> 00:02:46.523
Let's just go over here.

33
00:02:49.232 --> 00:02:54.330
And let's say that we want to express

34
00:02:54.330 --> 00:02:59.264
this active state as both being like

35
00:02:59.264 --> 00:03:04.210
a normal and a different state.

36
00:03:04.210 --> 00:03:08.879
The way that we would do these nested
states is, since all of these are objects,

37
00:03:08.879 --> 00:03:12.240
we could basically compose
the same type of object.

38
00:03:12.240 --> 00:03:16.480
So we could have initial,

39
00:03:16.480 --> 00:03:21.491
normal, and then we could have

40
00:03:21.491 --> 00:03:27.081
states over here such as normal and

41
00:03:27.081 --> 00:03:32.880
we might go into a different state.

42
00:03:32.880 --> 00:03:37.532
It looks good state so
like after five seconds it'll go to or

43
00:03:37.532 --> 00:03:41.640
after half a second it goes
to this looks good state.

44
00:03:42.840 --> 00:03:47.715
So what's happening here is our
alarm is going to work the same

45
00:03:47.715 --> 00:03:50.901
way once it goes to the active state, but

46
00:03:50.901 --> 00:03:56.140
it's not actually going to be in
just the active state anymore.

47
00:03:56.140 --> 00:03:58.125
It's gonna be in this active and

48
00:03:58.125 --> 00:04:03.310
then active normal you just saw there
real quick and then active, looks good.

49
00:04:03.310 --> 00:04:08.066
So you could think about using this
in sort of an animation where once

50
00:04:08.066 --> 00:04:12.488
you activate it after a second,
it turns green or it fades out or

51
00:04:12.488 --> 00:04:15.300
fades in or something like that.

52
00:04:15.300 --> 00:04:20.456
You see how it goes from active dot
normal to active that looks good so

53
00:04:20.456 --> 00:04:23.712
this means that it's
in both the active and

54
00:04:23.712 --> 00:04:27.529
the active dot looks good
states at the same time.

55
00:04:29.230 --> 00:04:32.468
That's what hierarchical states are and

56
00:04:32.468 --> 00:04:38.750
we go more in depth in this in the first
front end masters state workshop.

57
00:04:38.750 --> 00:04:42.946
Are there any questions about hierarchical
states before we go to the exercise?

58
00:04:42.946 --> 00:04:47.176
&gt;&gt; I guess you could break it up so
you could import that state that's in

59
00:04:47.176 --> 00:04:52.077
the hierarchy, just so you don't end up
with like some massive state like just

60
00:04:52.077 --> 00:04:55.740
in terms of being able to absorb
it a little more bite size.

61
00:04:57.370 --> 00:05:03.078
&gt;&gt; The question was about just being
able to, if you do have hierarchical

62
00:05:03.078 --> 00:05:07.722
states it making sense to just
have this entire thing be,

63
00:05:07.722 --> 00:05:13.250
imported from somewhere else,
you could definitely do that.

64
00:05:13.250 --> 00:05:17.977
But honestly, once it gets to the point
of your machine getting too big,

65
00:05:17.977 --> 00:05:22.629
then it might make sense to separate
it into smaller machines instead of

66
00:05:22.629 --> 00:05:26.490
just trying to create a very
huge hierarchy of states.

67
00:05:26.490 --> 00:05:30.040
So we'll talk about that
in the final lesson.

68
00:05:32.070 --> 00:05:33.750
But you could definitely do that.

69
00:05:33.750 --> 00:05:36.150
It's just a JavaScript object
at the end of the day.

