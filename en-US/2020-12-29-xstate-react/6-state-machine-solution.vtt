WEBVTT

1
00:00:00.420 --> 00:00:05.539
In this exercise, we are supposed
to create the state machine to make

2
00:00:05.539 --> 00:00:10.393
the basic functionality of this
timer work with the play button,

3
00:00:10.393 --> 00:00:15.350
the reset button and
clicking the actual timer itself.

4
00:00:15.350 --> 00:00:17.627
And so we have three states.

5
00:00:17.627 --> 00:00:20.200
We have idle, running and paused.

6
00:00:20.200 --> 00:00:23.207
And so if we change this,

7
00:00:23.207 --> 00:00:28.363
ideally we have idle, running, paused,

8
00:00:28.363 --> 00:00:33.850
and this should also be a toggle as well.

9
00:00:33.850 --> 00:00:40.506
And so you could see that we're
changing this up a little bit,

10
00:00:40.506 --> 00:00:45.378
but the state machine
sort of looks the same.

11
00:00:45.378 --> 00:00:50.940
And from paused, if we reset,
we should go back to idle.

12
00:00:50.940 --> 00:00:54.439
So overall, this is what our
state machine should look like.

13
00:00:55.820 --> 00:01:01.002
Okay, so going back here, there's
a couple things that we need to do.

14
00:01:01.002 --> 00:01:03.430
Let's go to the exercise.

15
00:01:03.430 --> 00:01:07.050
First of all,
this is going to be a reducer instead.

16
00:01:07.050 --> 00:01:12.300
So just for now, let's do const,
state, dispatch.

17
00:01:12.300 --> 00:01:14.890
And that's going to use reducer.

18
00:01:14.890 --> 00:01:19.941
And now we'll just have a dummy reducer

19
00:01:19.941 --> 00:01:25.145
right now in an initial state of whenever

20
00:01:25.145 --> 00:01:29.748
that initial state should be idle.

21
00:01:29.748 --> 00:01:34.810
Okay, so some errors state, return state.

22
00:01:34.810 --> 00:01:36.240
Well, we'll fill this in in a minute.

23
00:01:37.680 --> 00:01:40.933
Okay, so we have our machine in idle and
by the way,

24
00:01:40.933 --> 00:01:44.060
we're displaying that state right up here.

25
00:01:44.060 --> 00:01:52.670
So, you could see the data state = state.

26
00:01:52.670 --> 00:01:54.137
That's the magic,

27
00:01:54.137 --> 00:01:59.238
data attribute that's actually
putting that state right over here.

28
00:01:59.238 --> 00:02:00.810
And that's just a clue for

29
00:02:00.810 --> 00:02:04.540
just making sure that your
machine is in the right state.

30
00:02:04.540 --> 00:02:06.670
Obviously, you could use console.log or

31
00:02:06.670 --> 00:02:09.250
whatever you want to
make sure that as well.

32
00:02:09.250 --> 00:02:12.200
I like having things up here visually.

33
00:02:13.300 --> 00:02:16.202
Okay, so now let's get into our reducer.

34
00:02:16.202 --> 00:02:21.191
Because this reducer is going to be just
like the previous reducer that we meet in

35
00:02:21.191 --> 00:02:25.956
the scratchpad, where we want to actually
control a state machine that goes

36
00:02:25.956 --> 00:02:28.480
between each of those states.

37
00:02:28.480 --> 00:02:32.563
So again, we have idle,
running and paused, and

38
00:02:32.563 --> 00:02:36.300
those are gonna be our three states.

39
00:02:36.300 --> 00:02:37.830
I'd like starting with the states first.

40
00:02:37.830 --> 00:02:43.000
So while our initial one
is going to be idle, and

41
00:02:43.000 --> 00:02:48.580
we have states which is idle,
running and paused.

42
00:02:48.580 --> 00:02:53.075
Now I like doing this because it
gives me a nice overview of what

43
00:02:53.075 --> 00:02:56.371
are the possible states
of my timer can be in.

44
00:02:56.371 --> 00:03:00.240
And then I could start filling in
the details for each one of those.

45
00:03:00.240 --> 00:03:02.990
So, again I'm gonna do on and

46
00:03:02.990 --> 00:03:08.810
when we toggle from idle,
we go to the running state.

47
00:03:08.810 --> 00:03:13.080
When we toggle from running,
we go to the pause state.

48
00:03:13.080 --> 00:03:17.790
And when we toggle from pause,
we go back to the running state.

49
00:03:17.790 --> 00:03:22.040
So it just goes back and
forth between all of those.

50
00:03:22.040 --> 00:03:23.588
So we have our machine.

51
00:03:23.588 --> 00:03:25.610
I'm just going to shrink this for
a minute so

52
00:03:25.610 --> 00:03:28.150
that you can see the full
machine over here.

53
00:03:28.150 --> 00:03:33.615
And now we actually have to create this
reducer here, which I call timer machine.

54
00:03:33.615 --> 00:03:39.260
And that's going to be the same
thing that we did in our scratchpad.

55
00:03:39.260 --> 00:03:42.471
So if we go to scratch index.js,

56
00:03:42.471 --> 00:03:47.530
this exact same logic to
going to apply for this too.

57
00:03:49.190 --> 00:03:56.050
And so instead of alarm machine, this is
going to be timermachineconfig.states.

58
00:03:56.050 --> 00:04:00.173
So we're looking for each state,
and then we're looking for

59
00:04:00.173 --> 00:04:04.151
the event that was sent
to that timer machine.

60
00:04:04.151 --> 00:04:06.270
But now we actually have
to send the events.

61
00:04:06.270 --> 00:04:10.270
So let's look at our, for
example the click handler for here.

62
00:04:11.370 --> 00:04:16.190
This is the elapsed,
which is going to be this time over here.

63
00:04:16.190 --> 00:04:18.170
Let's start with the play button actually.

64
00:04:18.170 --> 00:04:24.059
So, if we go to over here,
this is first starting

65
00:04:24.059 --> 00:04:29.385
the timer and
this we dispatch type toggle.

66
00:04:29.385 --> 00:04:34.099
And we're going to be doing the same for
over here, the pause.

67
00:04:35.570 --> 00:04:37.740
And so
now let's just make sure that that works.

68
00:04:37.740 --> 00:04:40.380
So you see idle right now, you click play.

69
00:04:41.760 --> 00:04:46.160
And nothing happens because we're
still using our dummy reducer.

70
00:04:46.160 --> 00:04:50.670
So [LAUGH] we need to actually
use the timer machine instead.

71
00:04:50.670 --> 00:04:53.160
And that's going to import
that from timer machine.

72
00:04:54.270 --> 00:04:58.408
And we could also get the initial
state over here if you wanted to,

73
00:04:58.408 --> 00:05:01.970
you could say timermachineconfig.initial.

74
00:05:01.970 --> 00:05:05.280
And that's also imported
from the timer machine.

75
00:05:05.280 --> 00:05:06.460
Now things should work.

76
00:05:06.460 --> 00:05:08.790
So, I'll show you that again.

77
00:05:08.790 --> 00:05:10.080
We're in the idle state.

78
00:05:10.080 --> 00:05:11.570
You click play.

79
00:05:11.570 --> 00:05:13.450
It's in the running state.

80
00:05:13.450 --> 00:05:16.710
You click play again,
it's in the paused state.

81
00:05:16.710 --> 00:05:20.125
So this starts flashing, and
then you can toggle back and

82
00:05:20.125 --> 00:05:22.910
forth between running and paused.

83
00:05:22.910 --> 00:05:29.010
Now obviously we don't want this button
to show if we're in the play state.

84
00:05:29.010 --> 00:05:34.264
So we could hide that by doing,

85
00:05:34.264 --> 00:05:39.718
we only want to show this by, and

86
00:05:39.718 --> 00:05:46.791
if it's not, yes, states not equal to,

87
00:05:46.791 --> 00:05:51.035
if it is the pause state,

88
00:05:51.035 --> 00:05:54.690
I believe and buy in.

89
00:05:55.960 --> 00:05:58.560
And so
we could add the same logic over here.

90
00:05:58.560 --> 00:06:01.557
If state is not equal to paused,

91
00:06:01.557 --> 00:06:08.030
then we want to show this by now
I believe that logic is correct.

92
00:06:08.030 --> 00:06:09.600
Let's just make sure.

93
00:06:09.600 --> 00:06:14.045
So play, paused, so

94
00:06:14.045 --> 00:06:18.692
this is if state is paused or

95
00:06:18.692 --> 00:06:23.137
state is idle, because we

96
00:06:23.137 --> 00:06:28.200
want to be able to start that.

97
00:06:29.580 --> 00:06:34.060
All right, I should remind directions
more carefully, but we have play.

98
00:06:34.060 --> 00:06:35.150
It's in the running state.

99
00:06:35.150 --> 00:06:36.070
You click pause.

100
00:06:36.070 --> 00:06:39.433
It's in the pause state, and
that completely disappears.

101
00:06:39.433 --> 00:06:45.730
So, that's weird.

102
00:06:45.730 --> 00:06:48.480
Okay, don't forget about your parentheses.

103
00:06:48.480 --> 00:06:53.804
So we want to put our conditional
in those parentheses,

104
00:06:53.804 --> 00:06:59.040
and only then show the play,
paused, play, paused.

105
00:06:59.040 --> 00:07:00.300
Now let's do the reset.

106
00:07:00.300 --> 00:07:01.670
We're gonna be doing the same thing.

107
00:07:01.670 --> 00:07:07.210
We're going to dispatch type RESET.

108
00:07:07.210 --> 00:07:11.700
And that of course should
take us to our idle state.

109
00:07:11.700 --> 00:07:17.227
So if we're playing, and
then we pause it and then we click reset.

110
00:07:17.227 --> 00:07:20.714
On the reset, we dispatch a type of reset,
but as you could see,

111
00:07:20.714 --> 00:07:22.790
nothing is happening at that moment.

112
00:07:22.790 --> 00:07:24.800
So we have to reset.

113
00:07:24.800 --> 00:07:29.010
And on the pause state, and
that should take us back to idle.

114
00:07:30.750 --> 00:07:33.720
So we click that, or sorry, we play.

115
00:07:33.720 --> 00:07:35.270
We're in the running state.

116
00:07:35.270 --> 00:07:38.454
We click paused, and when we click Reset,

117
00:07:38.454 --> 00:07:44.290
it takes us back to the idle state,
which is the beginning state.

118
00:07:44.290 --> 00:07:48.982
And so that's the general idea
of using a machine in your react

119
00:07:48.982 --> 00:07:52.570
components in order to control the logic.

120
00:07:52.570 --> 00:07:57.030
If we look at the final code here,
basically looks exactly the same.

121
00:07:57.030 --> 00:08:00.371
And if we look at
the final code over here,

122
00:08:00.371 --> 00:08:04.390
you'll see that we have
our click handlers here.

123
00:08:04.390 --> 00:08:07.920
So we have toggle for elapsed.

124
00:08:07.920 --> 00:08:13.008
And, we're sending the reset
events on the reset button,

125
00:08:13.008 --> 00:08:17.900
and we have the toggle on
the other places as well.

126
00:08:17.900 --> 00:08:21.621
And so also one more notes.

127
00:08:21.621 --> 00:08:26.286
Right now we're controlling
the visibility of our buttons based

128
00:08:26.286 --> 00:08:28.350
on which state it's in.

129
00:08:28.350 --> 00:08:32.612
This is great because it's a lot more
clear than having a bunch of Booleans and

130
00:08:32.612 --> 00:08:35.000
having to wrestle around with those.

131
00:08:35.000 --> 00:08:39.270
You have a clear idea of when
exactly those buttons should show.

132
00:08:39.270 --> 00:08:43.590
Instead of doing this 20 questions
approach where you're saying, is it this?

133
00:08:43.590 --> 00:08:44.520
Is it active?

134
00:08:44.520 --> 00:08:45.380
Is it paused?

135
00:08:45.380 --> 00:08:46.430
Is it running?

136
00:08:46.430 --> 00:08:50.322
You could say,
when the state is in the running mode or

137
00:08:50.322 --> 00:08:55.680
the running states,
only then should you show this button.

138
00:08:55.680 --> 00:09:00.498
And also because the logic
lives in the machine itself,

139
00:09:00.498 --> 00:09:06.852
if you accidentally forget to add this and
you might have the button show,

140
00:09:06.852 --> 00:09:11.520
then the logic is still
going to work the same.

141
00:09:11.520 --> 00:09:15.818
In that events that shouldn't be accepted
in a certain state will just be completely

142
00:09:15.818 --> 00:09:19.110
ignored, which is exactly
what you want to happen.

143
00:09:19.110 --> 00:09:24.530
So yeah, so are there any questions
about this exercise so far?

144
00:09:24.530 --> 00:09:27.823
&gt;&gt; I just found I had my
stuff in0 the wrong state and

145
00:09:27.823 --> 00:09:31.770
it's like react,
react only displays based on the data.

146
00:09:31.770 --> 00:09:34.847
So I thought I had something wrong.

147
00:09:34.847 --> 00:09:37.560
And I thought it was working and
it wasn't refreshing or something.

148
00:09:37.560 --> 00:09:40.520
And then I realized I didn't
have the right state set.

149
00:09:40.520 --> 00:09:45.024
So it was it was just kind of validation
of how I react and state machines that

150
00:09:45.024 --> 00:09:50.340
gets to work in terms of it's not in
this state, so nothing's happening, sir.

151
00:09:50.340 --> 00:09:50.925
&gt;&gt; Yeah, and

152
00:09:50.925 --> 00:09:55.350
that's what I like about state machines
too is that it's all centralized here.

153
00:09:55.350 --> 00:10:00.327
So if you have an error in your logic or
something's not working correctly,

154
00:10:00.327 --> 00:10:04.397
then chances are,
you could just fix it within this machine.

155
00:10:04.397 --> 00:10:10.494
Because your user interface just becomes
a thing that could display the state,

156
00:10:10.494 --> 00:10:11.865
and send events.

157
00:10:11.865 --> 00:10:15.524
And when you reduce the user
interface to just those two things,

158
00:10:15.524 --> 00:10:17.890
a lot of things become a lot simpler.

159
00:10:17.890 --> 00:10:18.955
So, yeah.

