WEBVTT

1
00:00:00.000 --> 00:00:04.470
&gt;&gt; So the next lesson is going
to be on guarded transitions.

2
00:00:04.470 --> 00:00:09.062
Guarded transitions are basically
a way of saying you cannot

3
00:00:09.062 --> 00:00:12.221
transition if this condition is not met.

4
00:00:12.221 --> 00:00:14.793
So it is essentially a guard for
your transition.

5
00:00:14.793 --> 00:00:19.016
So let's say that over here,
our alarm example.

6
00:00:19.016 --> 00:00:21.887
We don't want this candle to exceed five.

7
00:00:21.887 --> 00:00:24.737
So we don't want the user to
keep pressing on and off.

8
00:00:24.737 --> 00:00:27.963
Obviously, this is a contrived example,
but

9
00:00:27.963 --> 00:00:32.279
this just goes to demonstrate
how guarded transitions work.

10
00:00:32.279 --> 00:00:36.500
So let's go to the scratch index.

11
00:00:40.042 --> 00:00:45.294
All right, so currently,
we did before we're incrementing

12
00:00:45.294 --> 00:00:49.940
the counts every single time
we toggle from pending and

13
00:00:49.940 --> 00:00:53.880
let's say we don't want
this to go past five.

14
00:00:53.880 --> 00:00:58.023
We could do what's called
making a guarded transition.

15
00:00:58.023 --> 00:01:03.298
So we're essentially saying
this toggle transitions

16
00:01:03.298 --> 00:01:08.465
shouldn't happen if the count
is greater than five.

17
00:01:08.465 --> 00:01:13.127
So the way we do that is by
adding a condition over here.

18
00:01:13.127 --> 00:01:18.055
So it's cond or
C-O-N-D over here and this has been

19
00:01:18.055 --> 00:01:23.872
the source of a lot of confusion,
by the way, in version five.

20
00:01:23.872 --> 00:01:26.157
This is gonna be renamed to guard in.

21
00:01:26.157 --> 00:01:29.497
There will be a deprecation
warning in the future.

22
00:01:29.497 --> 00:01:32.096
But for now, it's called cond.

23
00:01:32.096 --> 00:01:37.422
And so this cond takes exactly
the same two arguments

24
00:01:37.422 --> 00:01:42.152
as our actions do,
which is context in event.

25
00:01:42.152 --> 00:01:47.276
And so we could say only
allowed this transition to

26
00:01:47.276 --> 00:01:52.770
happen if context.count is less than or
equal to 5.

27
00:01:53.850 --> 00:01:56.865
So, gotta return that.

28
00:01:56.865 --> 00:02:01.483
So basically, if the count is 5,
it's going to yeah, so

29
00:02:01.483 --> 00:02:07.163
we should do less than five just so
that we don't allow it to get past 5.

30
00:02:07.163 --> 00:02:08.242
So let's try this.

31
00:02:08.242 --> 00:02:15.397
Click here, 1, 2, 3, 4, 5.

32
00:02:15.397 --> 00:02:17.664
Keeps going let's reload that.

33
00:02:17.664 --> 00:02:24.637
Okay, so after reloading 1, 2, 3, 4, 5.

34
00:02:24.637 --> 00:02:29.902
You see that it no longer goes past 5 and
that's because that transition it's

35
00:02:29.902 --> 00:02:35.508
like that transition doesn't even exist
anymore, because of this conditional.

36
00:02:35.508 --> 00:02:40.763
And so this is what's called
a guarded transition.

37
00:02:40.763 --> 00:02:45.692
Now if we wanted to go to another
state just as a follow through,

38
00:02:45.692 --> 00:02:48.022
then we could do that as well.

39
00:02:48.022 --> 00:02:52.246
And to demonstrate that,
I'm gonna go ahead and

40
00:02:52.246 --> 00:02:55.445
actually put the state here as well.

41
00:02:55.445 --> 00:02:58.975
So also showing you another trick.

42
00:02:58.975 --> 00:03:02.403
The state value can be
represented as strings.

43
00:03:02.403 --> 00:03:05.773
And because you could have
nested in parallel states too,

44
00:03:05.773 --> 00:03:09.299
it's an array of strings and
we'll talk about that in a bit.

45
00:03:09.299 --> 00:03:12.263
But I'm just gonna put state.toStrings,

46
00:03:12.263 --> 00:03:16.438
which is an array of strings and
we'll join that with a space.

47
00:03:16.438 --> 00:03:22.240
So the reason for doing this is because
I want to see what the current state is.

48
00:03:25.714 --> 00:03:31.086
And then let's say that I want to add
another state which is I don't know,

49
00:03:31.086 --> 00:03:31.962
rejected.

50
00:03:33.973 --> 00:03:39.828
And let's say that when I toggle,
if this transition isn't taken.

51
00:03:39.828 --> 00:03:42.851
So it's always gonna check
this first transition.

52
00:03:42.851 --> 00:03:47.846
I'm gonna add a second transition
here that says, go to reject it.

53
00:03:47.846 --> 00:03:55.032
So in other words, this is saying,
when toggle happens, go to pending and

54
00:03:55.032 --> 00:04:00.406
do the increment action only
if this condition is true.

55
00:04:00.406 --> 00:04:03.248
So only if context.count is less than 5.

56
00:04:03.248 --> 00:04:06.812
Otherwise, go to the rejected state.

57
00:04:06.812 --> 00:04:09.129
So now, let's see what happens.

58
00:04:09.129 --> 00:04:13.423
Click, OK, four, five.

59
00:04:13.423 --> 00:04:15.589
And the when we try to click again,

60
00:04:15.589 --> 00:04:19.122
it's gonna go to rejected in
which nothing can happen.

61
00:04:21.630 --> 00:04:24.196
So that's the guarded transition.

62
00:04:24.196 --> 00:04:26.099
Are there any questions on that?

63
00:04:26.099 --> 00:04:28.496
&gt;&gt; Is it wise to have your
business logic there?

64
00:04:28.496 --> 00:04:34.234
Like I'm picturing like a wiziwig where
you're moving in like an address and

65
00:04:34.234 --> 00:04:39.724
then you can't go further, because
it's an invalid address like is it?

66
00:04:39.724 --> 00:04:44.344
&gt;&gt; I guess my question is more
like how much do we bloat

67
00:04:44.344 --> 00:04:49.084
the state machine versus
just doing it elsewhere?

68
00:04:49.084 --> 00:04:50.121
&gt;&gt; That's a good question.

69
00:04:50.121 --> 00:04:54.702
So the question was about how
much business logic should we put

70
00:04:54.702 --> 00:04:57.266
inside the actual state machine?

71
00:04:57.266 --> 00:05:01.631
And so the answer is pretty much the same
answer as one of the previous lessons,

72
00:05:01.631 --> 00:05:03.564
which was about parameterizing.

73
00:05:03.564 --> 00:05:07.375
What we could do is we could
take this condition and

74
00:05:07.375 --> 00:05:11.836
we could just make an abstract
form of the business logic.

75
00:05:11.836 --> 00:05:15.885
Let's say we have
a condition called too much.

76
00:05:15.885 --> 00:05:21.115
And so I could say const too
much equals that saying guard.

77
00:05:21.115 --> 00:05:27.274
So basically, the context counts is
less than 5, then we have too much.

78
00:05:27.274 --> 00:05:31.963
Now we do have to specify that in
the second argument over here,

79
00:05:31.963 --> 00:05:35.688
which is an object that
takes all of these things.

80
00:05:35.688 --> 00:05:38.185
And so over here, that's called guards.

81
00:05:38.185 --> 00:05:40.821
This is also another reason
why in version five,

82
00:05:40.821 --> 00:05:44.247
it's gonna be changed to guard
instead of cond, C-O-N-D.

83
00:05:44.247 --> 00:05:47.417
And so we could say too much is well,

84
00:05:47.417 --> 00:05:52.404
it's the same thing as that tooMuch,
guard over here.

85
00:05:52.404 --> 00:05:57.024
So now when we reload, we're gonna
see that we have the exact same

86
00:05:57.024 --> 00:06:01.235
logic it goes to rejected and
you could configure that too.

87
00:06:01.235 --> 00:06:05.829
So you could make that per component or
per whatever uses that machine.

88
00:06:05.829 --> 00:06:10.616
So to answer your question, yes,
you should not put too much business

89
00:06:10.616 --> 00:06:15.568
logic in the state machine,
especially if it's something that needs to

90
00:06:15.568 --> 00:06:19.567
change over time or
change based on the situation rather.

91
00:06:19.567 --> 00:06:24.366
&gt;&gt; Just a side note on that, isn't the
recommendation basically that your machine

92
00:06:24.366 --> 00:06:28.330
like definition is completely
serializable basically, right?

93
00:06:28.330 --> 00:06:33.841
In which case, you would basically
always want to parameterize your various

94
00:06:33.841 --> 00:06:39.196
actions and conditions and stuff like
that down into the second argument.

95
00:06:39.196 --> 00:06:43.770
&gt;&gt; Okay, so the question was should
like is the ultimate goal to

96
00:06:43.770 --> 00:06:48.627
make your machine completely
serializable as a best practice?

97
00:06:48.627 --> 00:06:51.138
I would say yes, definitely.

98
00:06:51.138 --> 00:06:55.724
And the reason why is because number one,
it's good for being able to,

99
00:06:55.724 --> 00:07:00.311
even if you're not visualizing your
machine just taking a look at it and

100
00:07:00.311 --> 00:07:05.128
being able to understand it in terms of
business logic instead of in terms of

101
00:07:05.128 --> 00:07:07.591
the actual implementation details.

102
00:07:07.591 --> 00:07:12.957
For example, I could read this like
a sentence, go to the pending target.

103
00:07:12.957 --> 00:07:18.158
And do the increment action if there is a,

104
00:07:18.158 --> 00:07:25.596
I guess I should call this not too much,
[LAUGH] not too much.

105
00:07:25.596 --> 00:07:29.465
If the user didn't click this
button toMuch, basically.

106
00:07:29.465 --> 00:07:32.704
And so that becomes really understandable.

107
00:07:32.704 --> 00:07:39.336
Another reason too is because in
the future not only visualization tools,

108
00:07:39.336 --> 00:07:44.178
but tools such as XD Python
which was mentioned earlier

109
00:07:44.178 --> 00:07:48.716
ad also being able to convert to and
from STX and ML.

110
00:07:48.716 --> 00:07:54.719
They're going to rely on just trying to
not have as many implementation details as

111
00:07:54.719 --> 00:08:01.251
possible, so that your machines could be
sharable, reusable in different languages.

112
00:08:01.251 --> 00:08:05.543
So yeah, I definitely think it's
important to at first when you're

113
00:08:05.543 --> 00:08:09.544
prototyping your machine and
just making sure the logic works.

114
00:08:09.544 --> 00:08:16.312
It's absolutely fine to do things in line
and it's fine to keep it that way too.

115
00:08:16.312 --> 00:08:21.286
But if you do want to make it more
concise and more understandable and

116
00:08:21.286 --> 00:08:26.438
usable in other contexts, then yeah,
it's definitely a worthwhile

117
00:08:26.438 --> 00:08:31.872
goal to serialize your entire machine or
make it entirely serializable.

118
00:08:31.872 --> 00:08:34.580
&gt;&gt; Rather have a follow up.

119
00:08:34.580 --> 00:08:39.701
So like one of my first cracks at
a more complex machine with ex state

120
00:08:39.701 --> 00:08:44.925
was a kind of a complicated
authentication system on our platform.

121
00:08:44.925 --> 00:08:49.252
And I found that a lot of states and
lots of actions,

122
00:08:49.252 --> 00:08:53.178
and can conditions, and
various things, and

123
00:08:53.178 --> 00:08:57.821
my deficit machine definition
just being really big.

124
00:08:57.821 --> 00:09:04.716
And I started to have like PTSD from
like Webpack config a little bit.

125
00:09:04.716 --> 00:09:07.191
And I'm like man,
maybe I need to break this out and

126
00:09:07.191 --> 00:09:10.141
do some better like object composition and
stuff like that.

127
00:09:10.141 --> 00:09:13.785
Do you kind of like recommend that
when these machines get too big or

128
00:09:13.785 --> 00:09:18.017
I've just saying I've kind of struggled
to find the balance of like where do I

129
00:09:18.017 --> 00:09:20.058
start making this more digestible?

130
00:09:20.058 --> 00:09:25.246
Once a machine definition gets pretty big,
hundreds of lines, basically.

131
00:09:25.246 --> 00:09:27.683
&gt;&gt; Yeah, so the question was about,

132
00:09:27.683 --> 00:09:31.473
basically what do you do when
your machine is too big?

133
00:09:31.473 --> 00:09:36.148
Are there any patterns for making it more
concise or just organizing it better?

134
00:09:36.148 --> 00:09:38.531
And [COUGH] the short
answer is yes there is and

135
00:09:38.531 --> 00:09:42.349
that's something that we're going
to get into in the later lessons.

136
00:09:42.349 --> 00:09:45.983
But essentially if you have
a machine that's too big,

137
00:09:45.983 --> 00:09:50.802
you want to start applying separation
of concerns are actually just like

138
00:09:50.802 --> 00:09:53.655
a segregated responsibility principle.

139
00:09:53.655 --> 00:09:56.296
One of those principles
if not both of them, but

140
00:09:56.296 --> 00:09:58.485
basically take a look at your machine.

141
00:09:58.485 --> 00:10:02.357
Look what logic can be
separated into its own entity.

142
00:10:02.357 --> 00:10:05.609
And instead of having that
all in one big machine,

143
00:10:05.609 --> 00:10:09.178
you could have a machine
that invokes other machines.

144
00:10:09.178 --> 00:10:12.426
Basically, makes other
machines responsible for

145
00:10:12.426 --> 00:10:16.664
doing those tests in communicating
back with the parent machine.

146
00:10:16.664 --> 00:10:20.132
And so that will be the contents
of the last exercise.

147
00:10:20.132 --> 00:10:22.470
So we'll talk about that
definitely at the end of the day.

