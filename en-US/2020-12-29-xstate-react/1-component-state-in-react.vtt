WEBVTT

1
00:00:00.540 --> 00:00:05.250
Let's talk,
firstly about software modeling.

2
00:00:05.250 --> 00:00:10.029
Software modeling is an old concept,
and thinking about software

3
00:00:10.029 --> 00:00:15.166
modeling can conjure thoughts of UML,
if you're familiar with that.

4
00:00:15.166 --> 00:00:19.820
But we're going to be looking
at it in an abstract way.

5
00:00:19.820 --> 00:00:24.422
Basically, when we talk about
software modeling or state modeling,

6
00:00:24.422 --> 00:00:30.160
we're talking about defining how an app
is supposed to behave at any given time.

7
00:00:30.160 --> 00:00:34.868
Now, what I mean by behave is,
when an app is in a certain state,

8
00:00:34.868 --> 00:00:39.740
there should be certain events
that can happen in that app.

9
00:00:39.740 --> 00:00:43.290
For example,
if you're on the checkout page,

10
00:00:43.290 --> 00:00:48.614
the user should be able to fill out
an address field and a billing field,

11
00:00:48.614 --> 00:00:54.710
and maybe click next, or maybe go back
a step, or just do any of those things.

12
00:00:54.710 --> 00:00:59.450
Now obviously, there's things that
a user should not be able to do too.

13
00:00:59.450 --> 00:01:02.536
For example,
if you're on that same checkout field,

14
00:01:02.536 --> 00:01:05.151
the user should not be able to,
for instance,

15
00:01:05.151 --> 00:01:10.370
submit a payment without entering credit
card details, or something like that.

16
00:01:10.370 --> 00:01:15.132
So the way we do this currently, or
at least in most modern web projects,

17
00:01:15.132 --> 00:01:17.450
is we just start with code.

18
00:01:17.450 --> 00:01:23.480
And let's go ahead and go into our scratch
pad and see how that sort of looks.

19
00:01:23.480 --> 00:01:27.526
By the way, the scratch pad,
you can find at scratch/index.js, and

20
00:01:27.526 --> 00:01:30.639
then you could play around
with this however you want.

21
00:01:30.639 --> 00:01:35.564
In this scratch app,
we have just a sample alarm, and

22
00:01:35.564 --> 00:01:41.010
I will just go to the root
directory to show you that.

23
00:01:41.010 --> 00:01:45.012
And it shows the current time and
a toggle that doesn't work.

24
00:01:45.012 --> 00:01:47.100
Right now, it has data-active.

25
00:01:47.100 --> 00:01:53.310
If I take that off,
you'll see that now it's not active.

26
00:01:54.350 --> 00:01:58.812
So let's say that a simple task was,
we want to toggle this from off to on.

27
00:01:58.812 --> 00:02:05.347
The typical way that a lot of React
developers would tackle this problem is,

28
00:02:05.347 --> 00:02:09.341
they'd say, okay,
we need a piece of state.

29
00:02:09.341 --> 00:02:15.362
So we would say const [isActive,
setIsActive] and

30
00:02:15.362 --> 00:02:19.520
then we would use the useState hook.

31
00:02:19.520 --> 00:02:26.640
And so we'll start with false, and then
we put that in this data-active property.

32
00:02:26.640 --> 00:02:31.214
By the way,
this is a property that the CSS

33
00:02:31.214 --> 00:02:35.680
file that I have over here recognizes.

34
00:02:35.680 --> 00:02:40.650
So we could use those data attributes
to change whether it's active or not.

35
00:02:40.650 --> 00:02:43.320
If it's not active,
it's gonna be white and to the left.

36
00:02:43.320 --> 00:02:47.220
If it is active,
it's going to be blue and to the right.

37
00:02:47.220 --> 00:02:53.075
So we could say data-active is isActive or
undefined.

38
00:02:53.075 --> 00:02:56.276
Now, just a note about data attributes.

39
00:02:56.276 --> 00:03:01.072
Putting undefined is actually important,
because if you forget to do that,

40
00:03:01.072 --> 00:03:05.350
this will take that false value and
translate it to the string false,

41
00:03:05.350 --> 00:03:06.810
which we don't want.

42
00:03:06.810 --> 00:03:11.640
We want this data attribute
to just go away completely.

43
00:03:11.640 --> 00:03:15.111
And so we see it works here.

44
00:03:15.111 --> 00:03:20.265
If we change this to true,
it will toggle on.

45
00:03:20.265 --> 00:03:24.971
Now, let's say that we want
the behavior that clicking this alarm

46
00:03:24.971 --> 00:03:27.250
should change it from off to on.

47
00:03:27.250 --> 00:03:30.691
So we could say onClick=,

48
00:03:34.121 --> 00:03:40.063
And we could set isActive to the opposite
of whether it's active or not.

49
00:03:40.063 --> 00:03:45.269
Again, this isn't the way that that
you're going to see in this workshop.

50
00:03:45.269 --> 00:03:49.190
But it's the way that a lot of
React developers would start.

51
00:03:49.190 --> 00:03:52.139
So you can see that this does work,

52
00:03:52.139 --> 00:03:56.720
it does go between not being active and
being active.

53
00:03:56.720 --> 00:04:01.093
But let's take a step back here,
because we're representing

54
00:04:01.093 --> 00:04:05.646
the state of this alarm toggle
as a boolean value, essentially.

55
00:04:05.646 --> 00:04:08.081
We have either it's true or it's false.

56
00:04:08.081 --> 00:04:14.885
So we have true or false for isActive.

57
00:04:14.885 --> 00:04:18.889
But here's the thing,
boolean values are great for

58
00:04:18.889 --> 00:04:23.258
if you have something that
is either truthy or false-y.

59
00:04:23.258 --> 00:04:27.406
And I do recommend that you use them
if that's all that your app needs.

60
00:04:27.406 --> 00:04:30.098
However, what if we have another state?

61
00:04:30.098 --> 00:04:33.339
Like for example,
what if we're setting this alarm, and

62
00:04:33.339 --> 00:04:35.334
we want to persist it to a database?

63
00:04:35.334 --> 00:04:37.041
Or just save it in the cloud, so

64
00:04:37.041 --> 00:04:41.445
that it's available on all of your Android
devices, so that all of the alarms go

65
00:04:41.445 --> 00:04:44.558
off at once to make sure you
really get up in the morning?

66
00:04:44.558 --> 00:04:50.654
Then we need some sort of
other state where it's saving,

67
00:04:50.654 --> 00:04:56.117
and we can't represent that in a boolean,
right?

68
00:04:56.117 --> 00:05:00.967
So yeah, so
how do we how do we reconcile that?

69
00:05:00.967 --> 00:05:05.280
Well, we could use what's
called enumerated values.

70
00:05:05.280 --> 00:05:09.240
So instead of true and false,
which limits us to two,

71
00:05:09.240 --> 00:05:13.210
we want to be able to
potentially add more states.

72
00:05:13.210 --> 00:05:15.370
So let's just try that.

73
00:05:15.370 --> 00:05:19.066
Instead of having a boolean of isActive or
setIsActive,

74
00:05:19.066 --> 00:05:24.769
I'm going to change it to alarmStatus, or
actually, let's make it status for short.

75
00:05:24.769 --> 00:05:29.381
And then we have setStatus,
and we're going to use states.

76
00:05:29.381 --> 00:05:33.010
Let's talk about what
the statuses could be,

77
00:05:33.010 --> 00:05:38.595
it could be either inactive, pending,
which means we're waiting for

78
00:05:38.595 --> 00:05:43.081
it to save, and
we'll fake that in a minute, or active.

79
00:05:43.081 --> 00:05:47.643
So we're gonna just set
this to inactive for now.

80
00:05:47.643 --> 00:05:53.440
And so now,
our logic is gonna change a little bit.

81
00:05:53.440 --> 00:05:56.760
But you're gonna see it's about
to become a lot more explicit.

82
00:05:56.760 --> 00:06:03.704
So data-active is going to be,
if the status is active or undefined.

83
00:06:03.704 --> 00:06:08.321
And onClick, we're just gonna
set isActive to pending, or

84
00:06:08.321 --> 00:06:10.774
sorry, setStatus to pending.

85
00:06:10.774 --> 00:06:13.934
We're going to useEffect, and

86
00:06:13.934 --> 00:06:20.030
we're going to change the status after,
say, two seconds.

87
00:06:20.030 --> 00:06:23.991
So we're going to, or

88
00:06:23.991 --> 00:06:31.289
if status is pending, then setTimeout.

89
00:06:32.860 --> 00:06:36.819
And we are going to setStatus to active,
and

90
00:06:36.819 --> 00:06:40.677
we're going to do that after two seconds.

91
00:06:42.610 --> 00:06:45.760
So let's go ahead and do that.

92
00:06:45.760 --> 00:06:51.940
And so we could do something like,
let's just do here for now, opacity,

93
00:06:51.940 --> 00:06:57.338
we're going to say status is pending,
0.5, otherwise 1.

94
00:06:57.338 --> 00:07:00.498
So it's going to fade
out when it's pending,

95
00:07:00.498 --> 00:07:03.181
otherwise it's going to show it full.

96
00:07:03.181 --> 00:07:07.942
So when we click this, you're going
to see, it sort of fades out, and

97
00:07:07.942 --> 00:07:10.956
then after two seconds, it goes to active.

98
00:07:10.956 --> 00:07:17.590
Now when we click again, it should go off,
but it sort of just keeps going on.

99
00:07:17.590 --> 00:07:22.560
And so this is where things get confusing,
because even though this is a better way

100
00:07:22.560 --> 00:07:27.880
of modeling our states, we no longer have
these confusing true, false, saving.

101
00:07:27.880 --> 00:07:33.229
We now have this enumerated,
it's either inactive, pending, or active.

102
00:07:34.970 --> 00:07:38.620
We have that, but
we're still setting it directly.

103
00:07:38.620 --> 00:07:42.590
And so that's why when we click,
we're setting status to pending.

104
00:07:42.590 --> 00:07:47.751
But now we have to add a check here where,
if status is active,

105
00:07:47.751 --> 00:07:53.230
we actually want to set
the status directly to inactive.

106
00:07:53.230 --> 00:07:56.318
Else, setStatus('pending').

107
00:07:56.318 --> 00:07:59.547
Okay, so let's try that again.

108
00:07:59.547 --> 00:08:02.919
We click here, it's pending,
it goes to active.

109
00:08:02.919 --> 00:08:06.893
And then when we click again,
it goes to inactive.

110
00:08:06.893 --> 00:08:11.152
And then we could repeat
the process again, so,

111
00:08:13.439 --> 00:08:18.619
All right, so we have our three statuses,
inactive, pending, and active.

112
00:08:18.619 --> 00:08:22.919
And already, this is a good first
step to just being really clear and

113
00:08:22.919 --> 00:08:28.059
deliberate with what states our app, or
in this case, our components can be in.

114
00:08:28.059 --> 00:08:30.860
But there's still one problem with this.

115
00:08:30.860 --> 00:08:32.453
Look at these if statements.

116
00:08:32.453 --> 00:08:36.032
We have, if status is pending,
only then do we set this timeout.

117
00:08:36.032 --> 00:08:38.451
And then you also have to
think about cancellation.

118
00:08:38.451 --> 00:08:45.283
So we didn't do that in here, but we could
do that with const timeout = setTimeout.

119
00:08:45.283 --> 00:08:49.972
And then in React's useEffect,
you return a cleanup function

120
00:08:49.972 --> 00:08:54.140
which clears that timeout,
and then that should work.

121
00:08:54.140 --> 00:08:56.979
But we also have some logic over here,

122
00:08:56.979 --> 00:09:01.156
where onClick,
clicking it could do one of two things.

123
00:09:01.156 --> 00:09:05.128
It could either set the status to
inactive, or it could set it to pending.

124
00:09:05.128 --> 00:09:08.902
So basically, if another
developer comes on the project and

125
00:09:08.902 --> 00:09:12.084
is trying to figure out,
how does this alarm work,

126
00:09:12.084 --> 00:09:15.760
then they're going to have
to look in multiple places.

127
00:09:15.760 --> 00:09:17.807
First, they're going to have
to look at this useEffect.

128
00:09:17.807 --> 00:09:22.008
They're going to have to look at this and
figure out, okay.

129
00:09:22.008 --> 00:09:26.507
I guess because of this comment here,
we have inactive, pending, or active.

130
00:09:26.507 --> 00:09:30.791
But if this was gone, now we have all
these different places where we have to

131
00:09:30.791 --> 00:09:33.928
look in order to see what
the possible states could be.

132
00:09:33.928 --> 00:09:38.788
And so that is the main question
that I want you all to ask yourself

133
00:09:38.788 --> 00:09:41.398
when you're creating your apps,

134
00:09:41.398 --> 00:09:46.904
is what are the possible states that
this app or this component can be in?

135
00:09:46.904 --> 00:09:51.519
In this case, we have to look here,
here, here, and even down here, okay,

136
00:09:51.519 --> 00:09:54.167
it could be inactive, it could be pending.

137
00:09:54.167 --> 00:09:57.025
Basically, we're looking for
all these setStatus calls.

138
00:09:57.025 --> 00:09:59.079
And clicking does not do the same thing.

139
00:09:59.079 --> 00:10:03.588
So think about a real world device,
one where you would press a button

140
00:10:03.588 --> 00:10:06.786
to toggle something on or
toggle something off.

141
00:10:06.786 --> 00:10:11.461
Do you think that there's logic
inside of that button itself?

142
00:10:11.461 --> 00:10:14.166
There actually isn't.

143
00:10:14.166 --> 00:10:19.262
So a button in a real world device,
like an electronic device,

144
00:10:19.262 --> 00:10:24.455
or even a physical device like a phone,
you have a button here for

145
00:10:24.455 --> 00:10:27.934
volume, for power, those send a signal.

146
00:10:27.934 --> 00:10:32.632
And so that's the only thing that
the button should be concerned with,

147
00:10:32.632 --> 00:10:37.408
is sending a signal to somewhere central
that then decides what to do with

148
00:10:37.408 --> 00:10:38.758
that information.

149
00:10:38.758 --> 00:10:43.110
Given the current state and
the signal that it sends,

150
00:10:43.110 --> 00:10:45.527
or you could call it an event,

151
00:10:45.527 --> 00:10:50.860
it's going to change the state
of whatever we're dealing with.

