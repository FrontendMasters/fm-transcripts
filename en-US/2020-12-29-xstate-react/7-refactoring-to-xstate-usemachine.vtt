WEBVTT

1
00:00:00.680 --> 00:00:01.345
All right, so

2
00:00:01.345 --> 00:00:04.880
let's take a look at actually
adding XStates to our application.

3
00:00:04.880 --> 00:00:07.590
We're gonna be going
back to the scratchpad.

4
00:00:07.590 --> 00:00:11.657
So, I am going to reset this and

5
00:00:11.657 --> 00:00:16.201
we are going to go back to scratch.

6
00:00:16.201 --> 00:00:17.467
All right.

7
00:00:17.467 --> 00:00:21.665
I said before, this alarm machine

8
00:00:21.665 --> 00:00:26.586
is just a plain JavaScript objects, but

9
00:00:26.586 --> 00:00:33.770
it's actually the same
interface that XState expects.

10
00:00:33.770 --> 00:00:36.660
And so hopefully,
you're familiar with XState.

11
00:00:36.660 --> 00:00:42.062
But if you're not, XState is basically
a state machine state chat library,

12
00:00:42.062 --> 00:00:46.467
that allows you to define these
state machines in this object,

13
00:00:46.467 --> 00:00:49.990
the same one that we've created before.

14
00:00:49.990 --> 00:00:55.077
Put it in create machine and then you
have a machine that you could either use

15
00:00:55.077 --> 00:01:00.325
directly via the machine transition
function, or you could interpret it and

16
00:01:00.325 --> 00:01:04.805
have it be a live running instance
that keeps its own states.

17
00:01:04.805 --> 00:01:11.225
So, we're gonna be using XState now, and
also we're going to be using XState react.

18
00:01:11.225 --> 00:01:15.585
So if you go to the packages and
the documentation, and click XState react,

19
00:01:15.585 --> 00:01:18.590
this is the package
we're going to be using.

20
00:01:18.590 --> 00:01:23.499
And if you're familiar with useReducer,
which hopefully after the first exercise,

21
00:01:23.499 --> 00:01:27.210
you are, then XState react is going
to feel very familiar to you.

22
00:01:28.980 --> 00:01:31.770
So, let's go home.

23
00:01:31.770 --> 00:01:36.496
And what I want to do is,
I want to just do the tiniest amount of

24
00:01:36.496 --> 00:01:41.990
refactoring to make this work with
XStates, instead of use reducer.

25
00:01:43.010 --> 00:01:45.350
So here's what we're going to do.

26
00:01:46.550 --> 00:01:50.450
This can be converted
to a machine in XState,

27
00:01:50.450 --> 00:01:54.360
by passing that object
into create machine.

28
00:01:55.730 --> 00:01:58.460
And so
this is exactly what XStates expects.

29
00:01:58.460 --> 00:02:03.720
We have initial States and
all of these events in the on object.

30
00:02:05.310 --> 00:02:08.120
This machine,
of course has a transition function.

31
00:02:08.120 --> 00:02:16.336
Let's actually console.log this.

32
00:02:16.336 --> 00:02:18.475
So, console.log.

33
00:02:18.475 --> 00:02:24.090
We call this alarmmachine.transition.

34
00:02:25.340 --> 00:02:27.120
Alright, so alarmmachine.transition.

35
00:02:27.120 --> 00:02:29.240
This is going to take two arguments.

36
00:02:29.240 --> 00:02:33.290
The first argument is going
to be the current state.

37
00:02:33.290 --> 00:02:36.880
So let's say that we're in
the pending state and the events.

38
00:02:36.880 --> 00:02:40.710
You could represent in events
as a string or as an object.

39
00:02:40.710 --> 00:02:49.296
Just for now,
I'm going to represent it as an object.

40
00:02:49.296 --> 00:02:54.277
So when we do that, you're going
to see that this will be Break,

41
00:02:54.277 --> 00:03:00.050
but I want to just show you what
the console.og of this machine is.

42
00:03:00.050 --> 00:03:01.330
All right.
I guess it won't break it.

43
00:03:01.330 --> 00:03:02.610
Just won't show the right thing.

44
00:03:03.790 --> 00:03:04.290
All right.

45
00:03:05.470 --> 00:03:07.020
So we get a state object.

46
00:03:07.020 --> 00:03:09.930
And this state object
includes a lot of things,

47
00:03:09.930 --> 00:03:13.210
including the events that
we that we sent over.

48
00:03:13.210 --> 00:03:15.473
But it also includes the value.

49
00:03:15.473 --> 00:03:19.780
This value is going to be that
finite state representation.

50
00:03:19.780 --> 00:03:23.890
So, this is going to probably be the most
important property of the states,

51
00:03:23.890 --> 00:03:26.190
that you should be concerned with.

52
00:03:26.190 --> 00:03:28.370
And also the context.

53
00:03:28.370 --> 00:03:32.432
We'll talk about context a little
bit later, but that's for

54
00:03:32.432 --> 00:03:38.530
holding any infinite or extended data that
you also want to represent in your state.

55
00:03:38.530 --> 00:03:43.140
So taking a look at value,
that's exactly what we want.

56
00:03:43.140 --> 00:03:47.872
So if we go back to our alarm reducer,
we could say that our next

57
00:03:47.872 --> 00:03:52.640
state is going to be,
the alarmmachine.transition.

58
00:03:52.640 --> 00:03:59.270
The state and the events and
then we could return next dates.

59
00:03:59.270 --> 00:04:02.810
The initial state is
actually that state object.

60
00:04:02.810 --> 00:04:06.990
So it's no longer just this state value,
but

61
00:04:06.990 --> 00:04:12.830
it's going to be
the alarmmachine.initial states.

62
00:04:12.830 --> 00:04:16.850
And so that's a property that gives
you that initial state object.

63
00:04:16.850 --> 00:04:20.779
So we could say the status is
going to be that state.value.

64
00:04:20.779 --> 00:04:23.310
Which again, this is the finite state.

65
00:04:23.310 --> 00:04:28.770
So it could be pending,
or it could be active,

66
00:04:28.770 --> 00:04:32.130
or it could be inactive etc.

67
00:04:34.620 --> 00:04:38.170
Everything basically
stays the same over here.

68
00:04:38.170 --> 00:04:41.854
And so as you notice,
we're not using XState react yet, instead,

69
00:04:41.854 --> 00:04:47.140
we're using XState, to take that machine
and just simplify things for us a bit.

70
00:04:47.140 --> 00:04:48.912
So, let's test this out.

71
00:04:48.912 --> 00:04:54.440
When we click, should go after two
seconds to success and it goes back.

72
00:04:54.440 --> 00:04:56.840
So our logic still works exactly the same.

73
00:04:56.840 --> 00:05:00.920
I would barely call this boilerplate.

74
00:05:00.920 --> 00:05:05.353
It's not really too much boilerplate,
but if you want to use XState in

75
00:05:05.353 --> 00:05:10.400
this pure way, you're absolutely
welcome to with XState reacts though.

76
00:05:10.400 --> 00:05:12.626
We have a hook called useMachine.

77
00:05:12.626 --> 00:05:17.520
And useMachine makes things a lot
simpler with working with machines.

78
00:05:17.520 --> 00:05:22.126
So instead of use reducer,
we could use machine.

79
00:05:22.126 --> 00:05:27.857
And we're gonna replace the reducer
with the actual machine,

80
00:05:27.857 --> 00:05:30.570
which is this alarm machine.

81
00:05:30.570 --> 00:05:32.689
So alarm machine.

82
00:05:33.730 --> 00:05:37.718
And so, you get basically
the same tuple over here.

83
00:05:37.718 --> 00:05:41.002
You have the states and you have dispatch.

84
00:05:41.002 --> 00:05:44.600
In reacts, this is actually called send.

85
00:05:44.600 --> 00:05:50.130
So, that should be a nice differentiator
between Use reducer and use machine.

86
00:05:50.130 --> 00:05:53.443
So when you see send,
it's likely a next state thing.

87
00:05:53.443 --> 00:05:56.882
If you see this batch it's either redox or
use reducer.

88
00:05:56.882 --> 00:05:59.570
Plus send is actually
a lot easier to type.

89
00:05:59.570 --> 00:06:00.710
So I like using send.

90
00:06:00.710 --> 00:06:01.521
All right.

91
00:06:01.521 --> 00:06:05.400
So now let's test if
this logic still works.

92
00:06:05.400 --> 00:06:09.280
We have usedMachine,
alarm machine, state and sense.

93
00:06:09.280 --> 00:06:12.260
So everything else should
be pretty much the same.

94
00:06:12.260 --> 00:06:15.143
And we could also get rid of
this alarm reducer over here,

95
00:06:15.143 --> 00:06:16.535
since we no longer need it.

96
00:06:19.262 --> 00:06:21.730
And moment of truth.

97
00:06:23.180 --> 00:06:24.030
There we go.

98
00:06:24.030 --> 00:06:24.624
Okay.
So

99
00:06:24.624 --> 00:06:29.550
our alarm logic still works
exactly the same way.

100
00:06:30.690 --> 00:06:33.695
And so hopefully,
you could see that usemachine.

101
00:06:33.695 --> 00:06:40.600
Feels exactly like use reducer and
you could use it in the same way.

102
00:06:40.600 --> 00:06:43.330
There are some nice conveniences too.

103
00:06:43.330 --> 00:06:46.795
For example,
if you are sending in events object and

104
00:06:46.795 --> 00:06:50.960
it only has a type,
you could send just the type as well.

105
00:06:50.960 --> 00:06:55.605
Normally it's best practice to send
the full object if you do want to add some

106
00:06:55.605 --> 00:06:59.130
sort of payload later, but
this is perfectly fine.

107
00:06:59.130 --> 00:07:04.220
In fact, we're doing that here as well.

108
00:07:06.230 --> 00:07:12.385
That's still going to
work exactly the same.

109
00:07:12.385 --> 00:07:16.306
So we click here, goes there.

110
00:07:16.306 --> 00:07:18.187
Yeah.

111
00:07:18.187 --> 00:07:21.600
This use effect has a missing dependency.

112
00:07:21.600 --> 00:07:26.263
The ES Lynch rule,
will Tell you that it's missing send.

113
00:07:26.263 --> 00:07:32.940
Send is stable, but if you do want to be
safe, you could also add it there too.

114
00:07:32.940 --> 00:07:35.190
But normally you don't need to do that.

115
00:07:35.190 --> 00:07:40.724
And as we're going to
learn in future exercises,

116
00:07:40.724 --> 00:07:46.540
use effects are actually
handled in XState itself.

117
00:07:46.540 --> 00:07:49.060
And so we're going to see how that works.

