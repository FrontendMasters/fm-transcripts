WEBVTT

1
00:00:00.520 --> 00:00:04.860
Okay, so let's talk about
how we could spawn actors.

2
00:00:04.860 --> 00:00:09.948
And remember spawning is very useful for
if you have a dynamic

3
00:00:09.948 --> 00:00:15.350
number of actors, which might
not be within the current state.

4
00:00:15.350 --> 00:00:20.517
So basically these actors,
once they're spawns, they're alive until

5
00:00:20.517 --> 00:00:26.160
they are explicitly stopped or the machine
that they were created in stops.

6
00:00:26.160 --> 00:00:30.864
And so in this case,
because we're dynamically creating

7
00:00:30.864 --> 00:00:35.000
these timers at any time
we want them to be dynamic.

8
00:00:35.000 --> 00:00:37.490
So spawning actually makes a lot of sense.

9
00:00:37.490 --> 00:00:41.210
So we're going to spawn
a new timer machine here.

10
00:00:41.210 --> 00:00:45.392
And so
we could say const timer equals spawn and

11
00:00:45.392 --> 00:00:52.390
we're gonna create a timer machine and
that's gonna take a duration.

12
00:00:52.390 --> 00:00:59.520
So, on the add action,
we see that this is the wrong exercise.

13
00:00:59.520 --> 00:01:00.060
Okay.

14
00:01:00.060 --> 00:01:05.602
So, we see that there, that we are going

15
00:01:05.602 --> 00:01:11.560
to send an add event with a duration.

16
00:01:11.560 --> 00:01:13.700
And that duration is gonna
be a custom duration.

17
00:01:13.700 --> 00:01:15.160
So that comes from events.

18
00:01:15.160 --> 00:01:19.590
So we'll put events dot
duration over here.

19
00:01:19.590 --> 00:01:22.430
And this is gonna be our
newly spawned timer.

20
00:01:22.430 --> 00:01:28.209
So we're going to return The timers

21
00:01:28.209 --> 00:01:33.980
is gonna be the context dot timers with
that timer concatenated on the end.

22
00:01:33.980 --> 00:01:36.350
So concat timer.

23
00:01:36.350 --> 00:01:41.691
And I use concat because it basically
makes an immutable updates and

24
00:01:41.691 --> 00:01:46.939
creates a new array with that added
timer and so the current timer,

25
00:01:46.939 --> 00:01:51.717
we have to think a little bit
about this one because the length

26
00:01:51.717 --> 00:01:57.000
of the context dot timers is how
many timers there already are.

27
00:01:57.000 --> 00:02:02.910
And when we add the timer,
that's going to be added to the end.

28
00:02:02.910 --> 00:02:05.780
So, since we're adding that to the end,

29
00:02:05.780 --> 00:02:09.660
we could just say context
dot timers dot length.

30
00:02:09.660 --> 00:02:13.006
In other words,
if there's already three timers,

31
00:02:13.006 --> 00:02:17.370
then the length is three, but
the index of the last one is two.

32
00:02:17.370 --> 00:02:22.043
So if we add that timer now that timer
is going to be in the third index,

33
00:02:22.043 --> 00:02:26.410
even though the length is four,
so hopefully that makes sense.

34
00:02:28.050 --> 00:02:34.838
So now once we do that, let's uncomment
this so that we get to the timer and

35
00:02:34.838 --> 00:02:41.519
hopefully we will see that the timer
is added successfully which it is and

36
00:02:41.519 --> 00:02:45.899
we could dynamically add
a number of timers to or

37
00:02:45.899 --> 00:02:51.839
we could cancel and go back to
the timer's that we already have.

38
00:02:53.020 --> 00:02:55.610
Delete.
[COUGH] And there we go.

39
00:02:57.240 --> 00:02:59.807
So were there any questions
about this exercise?

40
00:03:04.076 --> 00:03:08.763
&gt;&gt; All right, so quick one that
the state is immutable like when we have

41
00:03:08.763 --> 00:03:14.795
the different states we're in but for
the context it can be it's mutable, right?

42
00:03:14.795 --> 00:03:20.594
Like the I know you're returning it in
like a Redux like fashion where you're,

43
00:03:20.594 --> 00:03:24.939
getting a new array but
it is a mutable portion of the state.

44
00:03:27.010 --> 00:03:29.360
So that's a really good question.

45
00:03:29.360 --> 00:03:36.160
The question was about can basically can
context be mutated inside of this assign?

46
00:03:36.160 --> 00:03:39.760
And the short answer is no,
or at least you shouldn't.

47
00:03:39.760 --> 00:03:44.408
And that's because when
you have a state and

48
00:03:44.408 --> 00:03:49.182
we'll go ahead and
console log dot state, so

49
00:03:49.182 --> 00:03:56.480
console dot log state just show you
right over here, nor that error.

50
00:03:58.110 --> 00:04:02.897
All right, so when we have this,
we have a state object and

51
00:04:02.897 --> 00:04:09.920
that state object is going to also have
a previous state which is in history.

52
00:04:09.920 --> 00:04:14.677
And so history is going to contain
the very last states before this new state

53
00:04:14.677 --> 00:04:15.820
happened.

54
00:04:15.820 --> 00:04:20.970
And that might have been context that
is different than the current states.

55
00:04:20.970 --> 00:04:25.287
If we mutate context, then that mutates
the same context object both for

56
00:04:25.287 --> 00:04:27.920
that previous state and the current state.

57
00:04:27.920 --> 00:04:32.863
So it might make it really difficult to
do things such as compare what changed

58
00:04:32.863 --> 00:04:33.910
in context.

59
00:04:33.910 --> 00:04:38.260
So in general,
you don't want to mutate context directly.

60
00:04:38.260 --> 00:04:41.670
You want to return
an immutable copy of context.

61
00:04:43.140 --> 00:04:46.200
Xstate does help you out here though.

62
00:04:46.200 --> 00:04:48.322
When you have an assign action,

63
00:04:48.322 --> 00:04:53.900
you could tell it which property of the
context object that you want to assign.

64
00:04:53.900 --> 00:04:59.602
And this lets you avoid doing things
like spreading the current context and

65
00:04:59.602 --> 00:05:03.950
only updating that property
that you want to update.

66
00:05:03.950 --> 00:05:07.480
So it makes it a little
bit easier to do that.

67
00:05:07.480 --> 00:05:12.181
Now there are libraries such
as Immer which makes it

68
00:05:12.181 --> 00:05:16.989
a lot easier to update
contexts in an immutable way,

69
00:05:16.989 --> 00:05:21.143
even though it really
looks like mutation and

70
00:05:21.143 --> 00:05:27.540
there is actually a library ot
a package called Xstate Immer.

71
00:05:27.540 --> 00:05:31.410
And this allows you to grab that assign.

72
00:05:31.410 --> 00:05:36.631
And since it's basically using
immer in the background,

73
00:05:36.631 --> 00:05:41.620
you could update the context
as if it were mutable.

74
00:05:41.620 --> 00:05:43.317
So over here, for example,

75
00:05:43.317 --> 00:05:48.320
I'm updating context dot count by doing
plus plus which is a mutable action.

76
00:05:48.320 --> 00:05:51.878
But because we're using
assigned from Xstate immer,

77
00:05:51.878 --> 00:05:54.920
it's actually an immutable update.

78
00:05:54.920 --> 00:05:58.180
So you're still safe with that one.

79
00:05:58.180 --> 00:06:04.567
But yeah, in general, try to,
it should really be a rule be pure and

80
00:06:04.567 --> 00:06:11.530
have your assign function be pure so
that it doesn't do any side effects.

81
00:06:13.450 --> 00:06:17.448
Except spawning,
that could cause the side effects but

82
00:06:17.448 --> 00:06:23.490
that's sort of built into Xstate, so
don't have to worry about that too much.

83
00:06:23.490 --> 00:06:26.380
But yeah,
try not to mutate context itself.

84
00:06:27.850 --> 00:06:33.992
You will notice that it will work and
it will continue to work in version 5,

85
00:06:33.992 --> 00:06:38.572
if you accidentally do it but
there might be some bugs and

86
00:06:38.572 --> 00:06:43.545
glitches if you decide to do
that because Xstate assumes that

87
00:06:43.545 --> 00:06:49.400
context is immutable or
rather it should be immutably updated.

88
00:06:49.400 --> 00:06:50.989
So hopefully that answers your question.

89
00:06:52.460 --> 00:06:56.380
Yeah, and typically do the way
you're saying keep things pure.

90
00:06:56.380 --> 00:07:00.314
I was just tinkering with it and
I saw that you could see that set.

91
00:07:00.314 --> 00:07:01.560
&gt;&gt; Yeah.

92
00:07:01.560 --> 00:07:04.492
Yeah.
So again, you can mutate context and

93
00:07:04.492 --> 00:07:06.920
it technically will work.

94
00:07:06.920 --> 00:07:11.115
I'm not gonna encourage it,
but it will work.

95
00:07:11.115 --> 00:07:14.420
&gt;&gt; Okay, I
&gt;&gt; Yeah, there's something interesting

96
00:07:14.420 --> 00:07:19.930
with the actor model because actors
have their own local private state.

97
00:07:19.930 --> 00:07:24.704
What you can also do there is it doesn't
matter if that local private state is

98
00:07:24.704 --> 00:07:25.760
mutated or not.

99
00:07:25.760 --> 00:07:29.832
I'm talking about the actor model in
general, but you could totally mutate and

100
00:07:29.832 --> 00:07:32.750
do whatever you want to
that local private state.

101
00:07:32.750 --> 00:07:36.980
It's just that that state
should be immutably shared.

102
00:07:36.980 --> 00:07:41.022
Meaning if you have an object in there and
you mutated somehow,

103
00:07:41.022 --> 00:07:45.142
and you want to share that object
with another actor immutably,

104
00:07:45.142 --> 00:07:50.240
then you need to create a copy of
that mutated object and send it over.

105
00:07:50.240 --> 00:07:52.774
So, locally you can mutate it, but

106
00:07:52.774 --> 00:07:56.440
anything external make
sure it's immutable.

107
00:07:56.440 --> 00:08:01.247
And that's why a good rule of thumb is
just make sure everything's immutable so

108
00:08:01.247 --> 00:08:05.912
you don't have to figure out what's
allowed, what's able to be mutated and

109
00:08:05.912 --> 00:08:07.450
what's not.

110
00:08:07.450 --> 00:08:08.290
So, yeah.

111
00:08:09.390 --> 00:08:13.663
&gt;&gt; I guess this is like a small follow
up but, I saw the project's written

112
00:08:13.663 --> 00:08:17.690
in TypeScript, I haven't dived
into the source code too much.

113
00:08:17.690 --> 00:08:21.096
But I imagine the signature
of where you have context and

114
00:08:21.096 --> 00:08:24.574
event there, you could just
mark context as read only and

115
00:08:24.574 --> 00:08:29.590
then, at least in TypeScript lan it
would say hey, you can't change that.

116
00:08:29.590 --> 00:08:34.840
And then you're kinda forced
to return a new context.

117
00:08:34.840 --> 00:08:37.646
&gt;&gt; Right.
So the question was about in TypeScript,

118
00:08:37.646 --> 00:08:40.160
how our context and events typed.

119
00:08:40.160 --> 00:08:45.770
Context is not typed as
read only over here.

120
00:08:45.770 --> 00:08:51.134
That's something that I should
probably change just to help with

121
00:08:51.134 --> 00:08:58.320
anyone using TypeScript just so that
they don't accidentally mutate context.

122
00:08:58.320 --> 00:09:02.120
But yeah, it should be assumed
that everything here is read only.

123
00:09:02.120 --> 00:09:03.912
&gt;&gt; Okay, thanks.

124
00:09:03.912 --> 00:09:06.676
&gt;&gt; Any other questions?

125
00:09:06.676 --> 00:09:08.346
&gt;&gt; Yeah.
&gt;&gt; You mentioned immer and

126
00:09:08.346 --> 00:09:11.970
I played around with that and
got it working pretty easily.

127
00:09:11.970 --> 00:09:17.044
And it's definitely cool to see it in
a syntax that's a little more familiar but

128
00:09:17.044 --> 00:09:20.148
the more I used it,
when debugging for example,

129
00:09:20.148 --> 00:09:25.526
you don't have direct access to contacts
and events and I don't know, it all seemed

130
00:09:25.526 --> 00:09:30.860
like maybe it's a little inconsistent
with other projects that aren't doing it.

131
00:09:30.860 --> 00:09:35.690
So I just kind of felt like maybe the one
of the upsides of using it didn't

132
00:09:35.690 --> 00:09:37.550
outweigh some of the more.

133
00:09:37.550 --> 00:09:38.696
Do you use it a lot?

134
00:09:38.696 --> 00:09:43.197
Did you find that it with the debugging
that you can't actually directly

135
00:09:43.197 --> 00:09:48.066
inspect context, if you're like for
debugger in the middle of a function that

136
00:09:48.066 --> 00:09:50.668
using the immer sign
&gt;&gt; So

137
00:09:50.668 --> 00:09:55.475
the question was about Xstate immer and
being able to debug it and and

138
00:09:55.475 --> 00:10:00.636
inspect it and all that, and
whether there were any problems with that.

139
00:10:00.636 --> 00:10:05.792
With immer in general, the way that
immer works just real quick is

140
00:10:05.792 --> 00:10:11.980
that it creates a proxy from the object
that you wants to quote unquote mutate,

141
00:10:11.980 --> 00:10:17.136
and that proxy is not really a good
representation of the object,

142
00:10:17.136 --> 00:10:21.075
obviously, because there's
a lot of getters and

143
00:10:21.075 --> 00:10:25.330
setters on there that
are pretty opaque externally.

144
00:10:25.330 --> 00:10:31.066
So, what you could do is you could
use the original function and

145
00:10:31.066 --> 00:10:33.770
console dot log that.

146
00:10:33.770 --> 00:10:37.990
So in immer, there's this extracting
the original state from a draft.

147
00:10:37.990 --> 00:10:42.344
And you basically have this
original function that you pass in

148
00:10:42.344 --> 00:10:46.830
the object where you want
the original form of that object.

149
00:10:46.830 --> 00:10:49.541
And so you could console dot log that, and

150
00:10:49.541 --> 00:10:53.040
that's going to be the same
as the original context.

