WEBVTT

1
00:00:00.760 --> 00:00:05.355
All right, so let's get on to
the exercise that we did previously,

2
00:00:05.355 --> 00:00:10.444
we had a few things to do because we
needed to keep track of a bunch of things.

3
00:00:10.444 --> 00:00:14.631
Namely, we need to keep track of
the duration, the elapsed time and

4
00:00:14.631 --> 00:00:15.592
the interval.

5
00:00:15.592 --> 00:00:17.454
So let's start with that.

6
00:00:17.454 --> 00:00:23.196
If we go to the timer machine, we're going
to be adding our initial context here,

7
00:00:23.196 --> 00:00:27.288
which is the duration,
we'll just set it to 60 for now.

8
00:00:27.288 --> 00:00:31.550
Elapsed which is 0 because
the timer hasn't been running yet.

9
00:00:31.550 --> 00:00:36.130
And the interval, which is 0.1 or

10
00:00:36.130 --> 00:00:39.241
one-tenth of a second.

11
00:00:39.241 --> 00:00:42.584
Now we're going to be
using state.context like

12
00:00:42.584 --> 00:00:46.994
you saw in the scratchpad example
to display that elapsed time.

13
00:00:46.994 --> 00:00:53.399
So if we go to timer,
we want to show that time in elapsed.

14
00:00:53.399 --> 00:00:58.995
So if we go to elapsed over here,
we already have that duration in elapsed

15
00:00:58.995 --> 00:01:04.342
being pulled in from here, but
this needs to be the state.context.

16
00:01:04.342 --> 00:01:06.887
This is where we're going to
be grabbing those values.

17
00:01:06.887 --> 00:01:12.703
So if we console.log state.context.

18
00:01:12.703 --> 00:01:18.008
You'll be able to see in Exercise 02,
you'll be able to see what

19
00:01:18.008 --> 00:01:23.056
each of those values are,
which is the values that we set it to.

20
00:01:23.056 --> 00:01:26.607
So remember,
there's two properties that are important,

21
00:01:26.607 --> 00:01:28.772
state.value and state.context.

22
00:01:28.772 --> 00:01:31.314
State.value shows you the finite state.

23
00:01:31.314 --> 00:01:36.861
State.context shows you
the extended states.

24
00:01:36.861 --> 00:01:40.984
All right, so now we have to make
this ADD_MINUTE button work.

25
00:01:40.984 --> 00:01:46.842
And so this ADD_MINUTE of course is
going to be adding one minute or

26
00:01:46.842 --> 00:01:49.567
60 seconds to the duration.

27
00:01:49.567 --> 00:01:55.630
So let's go to that add button or
that plus one button and

28
00:01:55.630 --> 00:02:01.314
we're going to be sending
that ADD_MINUTE event.

29
00:02:01.314 --> 00:02:03.245
Now let's go to our timer machine and

30
00:02:03.245 --> 00:02:05.994
make sure that that event
actually adds one minute.

31
00:02:05.994 --> 00:02:07.528
So when it's running,

32
00:02:07.528 --> 00:02:12.372
on ADD_MINUTE we want to increment
the context duration by 60 seconds.

33
00:02:12.372 --> 00:02:17.425
So just like we saw in
the scratchpad example,

34
00:02:17.425 --> 00:02:22.098
we could make an ADD_MINUTE transition.

35
00:02:22.098 --> 00:02:25.614
And it's not gonna have a target.

36
00:02:25.614 --> 00:02:27.676
The target's going to be undefined and

37
00:02:27.676 --> 00:02:30.932
the reason is because we still
want to be in the running state.

38
00:02:30.932 --> 00:02:35.355
We don't wanna pause it or restart it or
anything different when we add a minute.

39
00:02:35.355 --> 00:02:40.165
We want it to be doing the exact same
thing that it's currently doing but

40
00:02:40.165 --> 00:02:43.946
we also want to increment
the duration at the same time.

41
00:02:43.946 --> 00:02:46.094
So we're gonna say actions.

42
00:02:46.094 --> 00:02:51.478
And we're going to assign the duration to,

43
00:02:51.478 --> 00:02:56.134
we pull in the context and this is going

44
00:02:56.134 --> 00:03:00.805
to be the context.duration + 60.

45
00:03:00.805 --> 00:03:02.313
So let's see if that works.

46
00:03:02.313 --> 00:03:06.677
If we go back here and we click + 1,
we're not in the running state so

47
00:03:06.677 --> 00:03:09.031
that shouldn't be doing anything.

48
00:03:09.031 --> 00:03:12.191
But once we're in the running state and
we click that,

49
00:03:12.191 --> 00:03:14.260
it should be updating the context.

50
00:03:14.260 --> 00:03:16.549
So let's reload.

51
00:03:16.549 --> 00:03:18.747
So click +1.

52
00:03:18.747 --> 00:03:22.909
Now you see it goes to 120 and
we could keep making this go up.

53
00:03:22.909 --> 00:03:25.077
And so
this is what I mean by infinite states.

54
00:03:25.077 --> 00:03:29.812
There's infinite ways of
representing integers or

55
00:03:29.812 --> 00:03:33.476
numbers or any extended data like that.

56
00:03:33.476 --> 00:03:36.860
Now, if we want to reset it,

57
00:03:36.860 --> 00:03:42.783
we want to basically just
set elapsed back to 0 and

58
00:03:42.783 --> 00:03:46.177
do a couple of other things.

59
00:03:46.177 --> 00:03:49.226
So when we're in the running state,
we have ADD_MINUTE.

60
00:03:49.226 --> 00:03:54.685
And when we're in the idle state,
we reset the duration

61
00:03:54.685 --> 00:03:59.810
in the lapsed values back
to their original values.

62
00:03:59.810 --> 00:04:04.577
So we could do that right over here.

63
00:04:07.254 --> 00:04:12.122
So on entry, which is this entry property,

64
00:04:12.122 --> 00:04:17.778
we are going to assign
[COUGH] duration back to 60,

65
00:04:17.778 --> 00:04:20.418
and elapsed back to 0.

66
00:04:20.418 --> 00:04:26.659
In this case, elapsed isn't changing
because there's nothing that changes that.

67
00:04:26.659 --> 00:04:29.185
We're gonna see that in a future lesson.

68
00:04:29.185 --> 00:04:33.422
But essentially,
we're saying every single time,

69
00:04:33.422 --> 00:04:37.753
no matter what transition
causes us to go back to idle,

70
00:04:37.753 --> 00:04:43.889
whenever we reach this idle state we want
to set the duration in elapsed back.

71
00:04:43.889 --> 00:04:45.878
All right, so doing this again.

72
00:04:45.878 --> 00:04:48.785
If we click play, add minute.

73
00:04:48.785 --> 00:04:55.019
If we pause and we click Reset,
it goes back to 60.

74
00:04:55.019 --> 00:04:57.849
Now as always,

75
00:04:57.849 --> 00:05:03.299
you could go to the workshop.

76
00:05:03.299 --> 00:05:09.461
And you could see the final version
by going to timer.final and

77
00:05:09.461 --> 00:05:14.473
see that everything is
working the exact same way.

78
00:05:14.473 --> 00:05:17.713
So we could add a minute and
modify that context.

79
00:05:17.713 --> 00:05:21.264
We could reset it back to 60 and

80
00:05:21.264 --> 00:05:25.481
that's how everything should work.

81
00:05:25.481 --> 00:05:28.245
Were there any questions on that exercise?

82
00:05:28.245 --> 00:05:31.464
&gt;&gt; Just about the target being undefined?

83
00:05:31.464 --> 00:05:33.691
Do you have to explicitly set that or

84
00:05:33.691 --> 00:05:38.085
were you just demonstrating to show
that you don't need to change it?

85
00:05:38.085 --> 00:05:41.200
&gt;&gt; So the question was about
the target being undefined.

86
00:05:41.200 --> 00:05:46.161
When you don't want to transition
away from that state, by default,

87
00:05:46.161 --> 00:05:48.778
the target is going to be undefined.

88
00:05:48.778 --> 00:05:50.939
So you could just remove that there.

89
00:05:50.939 --> 00:05:55.507
And essentially this becomes
a transition where the only thing that's

90
00:05:55.507 --> 00:05:58.941
happening is you have these
actions being executed.

91
00:05:58.941 --> 00:06:01.850
But yeah, by default,
the target is undefined and so

92
00:06:01.850 --> 00:06:04.380
you don't need to
explicitly put that there.

