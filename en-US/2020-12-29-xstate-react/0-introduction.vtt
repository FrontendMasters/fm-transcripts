WEBVTT

1
00:00:00.000 --> 00:00:05.096
My name is David Khourshid, and I'm really
excited to be giving this workshop state

2
00:00:05.096 --> 00:00:11.440
modelling with XState in React, basically
using XState in real-world applications.

3
00:00:11.440 --> 00:00:13.516
This is the second XState course.

4
00:00:13.516 --> 00:00:16.810
I highly recommend you watch
the first one as well, but

5
00:00:16.810 --> 00:00:21.191
we're gonna be covering some stuff
from the first one in the second one.

6
00:00:21.191 --> 00:00:26.312
The main purpose of this workshop is we're
going to be investigating how we could

7
00:00:26.312 --> 00:00:31.585
use XState and just generally the idea of
software modeling with state machines and

8
00:00:31.585 --> 00:00:33.864
state charts in real-world apps.

9
00:00:33.864 --> 00:00:38.596
And we're gonna be doing that
by working on a real-world app,

10
00:00:38.596 --> 00:00:42.630
which should be available
at this GitHub repo.

11
00:00:42.630 --> 00:00:47.246
It's at github.com/davidkpiano/frontend
masters react workshop,

12
00:00:47.246 --> 00:00:51.060
well, frontend-masters-react-workshop.

13
00:00:51.060 --> 00:00:55.389
This is essentially
a Create React App app.

14
00:00:55.389 --> 00:00:57.758
It's using the newest version
of Create Ract App, so

15
00:00:57.758 --> 00:00:59.820
you don't have to worry about that.

16
00:00:59.820 --> 00:01:05.650
And the installation process should be
the exact same as Create React App itself.

17
00:01:05.650 --> 00:01:10.522
You would run either npm install or
yarn install if you're using Yarn, and

18
00:01:10.522 --> 00:01:13.780
then you run yarn start to
actually start the app.

19
00:01:15.840 --> 00:01:19.956
At any time, if you have questions,
feel free to chime in in the chat.

20
00:01:19.956 --> 00:01:22.800
This workshop is for
you and it's about you.

21
00:01:22.800 --> 00:01:28.072
So I want to help you out with
any of your real-world React or

22
00:01:28.072 --> 00:01:31.874
whatever else you're using with XState.

23
00:01:31.874 --> 00:01:34.654
Or even if you're not using XState yet and

24
00:01:34.654 --> 00:01:40.180
you want to just see the advantages of
using state machines and state charts.

25
00:01:40.180 --> 00:01:45.426
And it's just this strict declarative
modeling in your frontend apps,

26
00:01:45.426 --> 00:01:51.280
please feel free to ask any questions and
I'll be more than happy to answer them.

27
00:01:52.670 --> 00:01:57.453
So also a note, this is using
the latest version of XState,

28
00:01:57.453 --> 00:02:00.624
which is XState 4.14, I believe.

29
00:02:00.624 --> 00:02:04.616
In fact, I just released
a minor version yesterday, but

30
00:02:04.616 --> 00:02:08.540
don't worry,
everything is basically the same.

31
00:02:08.540 --> 00:02:13.788
And speaking of the same, by the end
of the year, this year being 2020,

32
00:02:13.788 --> 00:02:20.240
the fifth version of XState will hopefully
be at least in beta or release candidate.

33
00:02:20.240 --> 00:02:25.150
I want to let you know that everything you
learn in this course will be applicable to

34
00:02:25.150 --> 00:02:26.370
XState version 5.

35
00:02:26.370 --> 00:02:31.333
The main API is not changing,
at least not much.

36
00:02:31.333 --> 00:02:35.480
Version 4 code will largely
be compatible with version 5.

37
00:02:35.480 --> 00:02:40.139
The biggest changes are going to
be just around, well, actually,

38
00:02:40.139 --> 00:02:42.520
they're not really big changes.

39
00:02:42.520 --> 00:02:46.103
It's just more about
simplification of the API and

40
00:02:46.103 --> 00:02:50.445
also how things work to make
XState more SCXML-compatible.

41
00:02:50.445 --> 00:02:56.071
If you're not familiar with what SCXML is,
you go to w3.org/,

42
00:02:56.071 --> 00:03:00.592
well, actually let me just
search it cuz I don't have

43
00:03:00.592 --> 00:03:05.640
the exact URL memorized,
but w3.org/TR/scxml.

44
00:03:05.640 --> 00:03:10.390
And it stands for state chart XML.

45
00:03:10.390 --> 00:03:14.935
And this is basically the giant
spec that XState follows.

46
00:03:14.935 --> 00:03:19.600
This is a specification which
is a W3C recommendation.

47
00:03:19.600 --> 00:03:22.870
So it's pretty much as
official as it gets.

48
00:03:22.870 --> 00:03:28.650
And it's just this way of defining
state machines and state charts in XML.

49
00:03:28.650 --> 00:03:34.203
Obviously, XState doesn't use XML, but
it follows this spec pretty closely.

50
00:03:34.203 --> 00:03:39.545
SCXML is, of course,
based on state charts by David Harrel,

51
00:03:39.545 --> 00:03:42.750
which was created in 1989.

52
00:03:42.750 --> 00:03:48.200
So all of these ideas are basically
more than 30 years old.

53
00:03:48.200 --> 00:03:52.138
So if you want to dive deep
into how XState works,

54
00:03:52.138 --> 00:03:55.090
I do recommend reading the spec.

55
00:03:55.090 --> 00:03:57.150
It is a very long spec.

56
00:03:57.150 --> 00:04:01.569
But basically, if you have the free time,
you're going to notice a lot

57
00:04:01.569 --> 00:04:05.843
of similarities between what the spec
says and the API of XState, and

58
00:04:05.843 --> 00:04:09.550
that's because XState
does follow the spec.

59
00:04:09.550 --> 00:04:13.082
In other words,
XState tries to stick to old and

60
00:04:13.082 --> 00:04:19.017
established ideas such as state machine,
state charts, and this SCXML spec.

61
00:04:19.017 --> 00:04:21.042
And it doesn't try to invent anything new.

62
00:04:21.042 --> 00:04:27.359
And you're gonna see that as a pretty
prominent theme throughout today.

63
00:04:27.359 --> 00:04:30.580
Nothing we're doing is new at all.

64
00:04:30.580 --> 00:04:34.617
And that's one of the beauties about
using state machines and state charts for

65
00:04:34.617 --> 00:04:35.730
software modeling.

66
00:04:37.220 --> 00:04:40.370
Okay, so
let's dive right into the code base.

67
00:04:40.370 --> 00:04:47.263
Hopefully, you clones the repository,
which you could do so here in GitHub.

68
00:04:47.263 --> 00:04:53.280
You click Code, clone this gitclone.url
and save it to your local system.

69
00:04:54.460 --> 00:04:58.420
And so let's take a look at the code.

70
00:04:58.420 --> 00:05:04.076
The way that this is broken up is once
you run yarn install and yarn start or

71
00:05:04.076 --> 00:05:09.850
npm install and npm start, just gonna
do yarn start over here to show you.

72
00:05:09.850 --> 00:05:16.000
This is going to run a local server
that hosts this app on localhost 3000.

73
00:05:16.000 --> 00:05:21.564
And so this is what you should
see when the app loads.

74
00:05:21.564 --> 00:05:24.882
You're gonna see Frontend Masters React
and XState Workshop,

75
00:05:24.882 --> 00:05:27.420
as well as a bunch of exercises over here.

76
00:05:27.420 --> 00:05:32.254
Now, this main screen is also one
that you could use as a scratchpad.

77
00:05:32.254 --> 00:05:36.692
And you'll notice that we have some code
over here that we're going to be playing

78
00:05:36.692 --> 00:05:40.282
around with during each of the lessons
just to demonstrate each of

79
00:05:40.282 --> 00:05:41.790
the concepts here.

80
00:05:41.790 --> 00:05:48.260
Nothing works here yet, but we'll change
that as we go through each of the lessons.

81
00:05:48.260 --> 00:05:52.181
To do an exercise,
you just click on the exercise link and

82
00:05:52.181 --> 00:05:55.870
you'll see it changes the link
up here in the URL too.

83
00:05:55.870 --> 00:06:00.431
So this is Exercise
00-Creating a state machine.

84
00:06:00.431 --> 00:06:05.730
And so the goals in the exercise are going
to be outlined on the left-hand side.

85
00:06:05.730 --> 00:06:10.809
Now if you want to see the final version
or basically the answer sheet for

86
00:06:10.809 --> 00:06:16.730
each of the exercises, those are located
in the files that have .final.js.

87
00:06:16.730 --> 00:06:19.287
So in this case, for exercise 00,

88
00:06:19.287 --> 00:06:24.640
you'll see Timer.final.js and
timerMachine.final.js.

89
00:06:24.640 --> 00:06:27.223
Since this is a learning experience,

90
00:06:27.223 --> 00:06:31.834
I don't really expect you to struggle
too hard with the exercises.

91
00:06:31.834 --> 00:06:37.104
If you get stuck, please take
a look at the .final.js files and

92
00:06:37.104 --> 00:06:40.422
see if your way of thinking was correct or

93
00:06:40.422 --> 00:06:44.310
maybe you had to change
a couple of things.

94
00:06:44.310 --> 00:06:48.253
In order to see this final machine,

95
00:06:48.253 --> 00:06:52.854
what you could do is in the workshop file,

96
00:06:52.854 --> 00:07:00.370
change the imported timer
from /Timer to /Timer.final.

97
00:07:00.370 --> 00:07:06.292
And what you'll see is, for
example, exercise 00 solution.

98
00:07:06.292 --> 00:07:10.469
And you'll see how things are basically
supposed to look when you're done with

99
00:07:10.469 --> 00:07:11.290
the exercise.

100
00:07:13.120 --> 00:07:15.431
So that's how the exercises
are going to work.

101
00:07:15.431 --> 00:07:18.058
Throughout this course of the workshop,

102
00:07:18.058 --> 00:07:23.120
we're basically working our way
towards building a complete timer app.

103
00:07:23.120 --> 00:07:28.163
And so you could see that
when you go to /complete,

104
00:07:28.163 --> 00:07:32.660
this is what we're ultimately building.

105
00:07:32.660 --> 00:07:35.794
It's a timer app,
which if you have an Android device,

106
00:07:35.794 --> 00:07:40.410
this is going to be pretty, pretty similar
to the timer app in the Android device.

107
00:07:40.410 --> 00:07:43.550
You could enter a time here, press Enter.

108
00:07:43.550 --> 00:07:48.700
This is a timer that you could pause and
play and add a minute to.

109
00:07:48.700 --> 00:07:53.522
And you're also going to be able
to add multiple timers as well and

110
00:07:53.522 --> 00:07:56.510
see all of them running at the same time.

111
00:07:57.910 --> 00:07:59.890
So that's the goal of the workshop.

112
00:07:59.890 --> 00:08:05.616
And yeah, we're gonna be talking
about basically how to use XState and

113
00:08:05.616 --> 00:08:10.578
React and state machines and
state charts to build this app and

114
00:08:10.578 --> 00:08:14.600
learn how to use state
machines in the real world.

