WEBVTT

1
00:00:00.420 --> 00:00:02.800
This should hopefully have
been an easy exercise.

2
00:00:02.800 --> 00:00:06.520
By the way, if you haven't finished
the exercises by the time period,

3
00:00:06.520 --> 00:00:08.490
don't worry about it.

4
00:00:08.490 --> 00:00:10.580
Just look at the final code.

5
00:00:10.580 --> 00:00:13.450
And yeah, just watch.

6
00:00:13.450 --> 00:00:18.497
So, what we wanna do is we wanna
copy the timer machine that

7
00:00:18.497 --> 00:00:24.610
we created an exercise zero and
let's just copy that over.

8
00:00:24.610 --> 00:00:29.420
Here because that's going to be the same
timer machine that we're going to use.

9
00:00:29.420 --> 00:00:35.620
And so now in the timer, we're gonna be
changing this from use reducer before.

10
00:00:35.620 --> 00:00:40.690
Now this is going to use machine use
the use machine hook from x state react.

11
00:00:40.690 --> 00:00:47.078
So we're gonna say const state sent,
Equals use machine and

12
00:00:47.078 --> 00:00:51.461
we are going to grab
that timer machine and

13
00:00:51.461 --> 00:00:56.260
that's all we should need over here.

14
00:00:56.260 --> 00:00:58.860
I changed States to state dot value for
you.

15
00:00:58.860 --> 00:01:00.600
That should be a hint that.

16
00:01:00.600 --> 00:01:04.909
Now that finite state value
exists on the state.value

17
00:01:04.909 --> 00:01:08.010
property instead of the state itself.

18
00:01:09.650 --> 00:01:14.829
So, over here, we had to change
this to if state.value equals

19
00:01:14.829 --> 00:01:21.350
paused Then we wanna show the reset
button, is data value equals running.

20
00:01:21.350 --> 00:01:26.102
We wanna show the pause timer and
same thing over here we want to,

21
00:01:26.102 --> 00:01:29.280
check if the state value is paused or
idle.

22
00:01:30.890 --> 00:01:33.520
Then we showed the play button.

23
00:01:33.520 --> 00:01:38.027
Now this would be a good points to go and
check your logic just to see,

24
00:01:38.027 --> 00:01:39.860
if we missed anything.

25
00:01:39.860 --> 00:01:41.360
Of course, we haven't.

26
00:01:41.360 --> 00:01:44.950
Error over here cannot read
property with config undefined.

27
00:01:47.620 --> 00:01:49.330
I'm probably using a wrong import.

28
00:01:49.330 --> 00:01:50.970
So let's take a look over here.

29
00:01:52.270 --> 00:01:55.840
Cuz I'm not actually using the machine.

30
00:01:55.840 --> 00:02:02.440
So we wanna create this, sorry, we wants
to actually create a, X state machine.

31
00:02:02.440 --> 00:02:06.008
So we are gonna say const create, sorry.

32
00:02:06.008 --> 00:02:14.210
Import create machine from X date re or
X date.

33
00:02:15.980 --> 00:02:22.410
And so this is going to go and
create machine just like this.

34
00:02:23.440 --> 00:02:28.920
And that's actually going
to be our timer machine.

35
00:02:28.920 --> 00:02:31.559
So trying this again, if we go back,

36
00:02:31.559 --> 00:02:36.090
now you'll see that everything
is still looking the same.

37
00:02:36.090 --> 00:02:40.980
Obviously we need to add those bits of
functionality to each of our buttons.

38
00:02:40.980 --> 00:02:45.130
So let's go ahead and
do that in the timer.

39
00:02:45.130 --> 00:02:50.690
So on click, we're going to send toggle.

40
00:02:50.690 --> 00:02:54.486
Again, you could send strings,
or you could send an object so

41
00:02:54.486 --> 00:02:56.385
you could have type toggle on.

42
00:02:56.385 --> 00:02:59.802
Either one of those works,
if you have a simple event,

43
00:02:59.802 --> 00:03:02.995
which is an events that only has a type.

44
00:03:02.995 --> 00:03:09.946
And so, we're going to send reset,
or I guess should be reset.

45
00:03:09.946 --> 00:03:15.100
Over here, send toggle.

46
00:03:15.100 --> 00:03:17.040
Same thing over here.

47
00:03:17.040 --> 00:03:18.140
Send toggle.

48
00:03:20.050 --> 00:03:24.839
So now this is going to work the exact
same way that your previous non ex

49
00:03:24.839 --> 00:03:27.720
state state machine Worked before.

50
00:03:27.720 --> 00:03:32.470
And so you can see it goes to running, we
could pause it between running and paused.

51
00:03:32.470 --> 00:03:35.590
And when we click Reset,
it goes back to idle and

52
00:03:35.590 --> 00:03:39.340
the button is going to
work the exact same way.

53
00:03:39.340 --> 00:03:44.220
And so it really simplifies
how things work together.

54
00:03:44.220 --> 00:03:49.615
So I'm just gonna, Okay,

55
00:03:49.615 --> 00:03:54.766
so one really neat thing about
axstate react is that before

56
00:03:54.766 --> 00:04:00.338
we were modeling our application,
using basically pencil and

57
00:04:00.338 --> 00:04:03.912
paper or a whiteboard app such as Excel,

58
00:04:03.912 --> 00:04:09.587
draw Using that to map directly to
the logic in our application so

59
00:04:09.587 --> 00:04:16.070
that our state machine config looks
basically like what we drew up.

60
00:04:16.070 --> 00:04:20.624
In the future there will be creation tools
that allow you to essentially do the same

61
00:04:20.624 --> 00:04:23.660
thing as excal Draw and
have that be running code.

62
00:04:23.660 --> 00:04:28.629
But sometimes we want to visually see
that the logic In our time machine is

63
00:04:28.629 --> 00:04:30.940
correct as we run the app.

64
00:04:30.940 --> 00:04:36.520
And so we could do that using
inspect tool called X Date Inspect.

65
00:04:36.520 --> 00:04:38.670
So I'll just quickly
show you how this works.

66
00:04:38.670 --> 00:04:44.606
You don't need to use this for
every exercise, but this is just a,

67
00:04:44.606 --> 00:04:51.284
a nice tool that you could use to help
you if we import Inspect from Inspect,

68
00:04:51.284 --> 00:04:57.432
and we inspect I'm going to set
iframe to false there's an option for

69
00:04:57.432 --> 00:05:03.550
inspecting within an iframe or
inspecting in a separate window.

70
00:05:03.550 --> 00:05:07.125
So I'm just gonna have it be
a separate window, you're going

71
00:05:07.125 --> 00:05:11.890
to notice something different and
that's that this We do have to install it.

72
00:05:11.890 --> 00:05:17.090
So, yarn add xstate/inspect.

73
00:05:17.090 --> 00:05:19.020
So we'll go ahead and add that real quick.

74
00:05:23.810 --> 00:05:25.560
All right, this should go.

75
00:05:27.140 --> 00:05:31.172
Let's now resolve x students

76
00:05:31.172 --> 00:05:35.925
&gt;&gt; You're missing a x in the import.

77
00:05:36.997 --> 00:05:38.435
&gt;&gt; Well.

78
00:05:38.435 --> 00:05:42.434
I have to talk to the person who owns
the stattal organization, because,

79
00:05:42.434 --> 00:05:44.035
I would like that.

80
00:05:44.035 --> 00:05:45.397
Xstate is fine though.

81
00:05:45.397 --> 00:05:45.989
[LAUGH].

82
00:05:45.989 --> 00:05:46.845
All right.

83
00:05:46.845 --> 00:05:50.555
Now, you might notice that
popups do get blocked, so

84
00:05:50.555 --> 00:05:53.936
just make sure to unblock popups for
Local host or

85
00:05:53.936 --> 00:05:59.360
also code sandbox if you're using
the inspect tool within code sandbox.

86
00:05:59.360 --> 00:06:01.710
And now it says waiting for connection.

87
00:06:01.710 --> 00:06:04.833
So what this is going
to do is it's going to

88
00:06:04.833 --> 00:06:08.780
visualize your machine if
dev tools are set to true.

89
00:06:08.780 --> 00:06:10.970
So if you have dev tools true.

90
00:06:12.750 --> 00:06:16.610
And we reload this.

91
00:06:16.610 --> 00:06:20.620
What's interesting is that
playing around with this,

92
00:06:20.620 --> 00:06:24.300
actually it actually changes
the state over here.

93
00:06:24.300 --> 00:06:26.616
So let me.
Let me put this side by side, so

94
00:06:26.616 --> 00:06:30.188
you should see that when I
manipulate the machine here,

95
00:06:30.188 --> 00:06:32.850
it actually manipulates it here as well.

96
00:06:32.850 --> 00:06:36.798
So if I click toggle again,
you could see it going to the state and

97
00:06:36.798 --> 00:06:40.470
then it shows you what events
are possible from that state.

98
00:06:40.470 --> 00:06:44.880
So we could reset it and
it goes back to idle click toggle.

99
00:06:44.880 --> 00:06:45.930
Running.

100
00:06:45.930 --> 00:06:49.410
And you can also see the events
in real time over here.

101
00:06:49.410 --> 00:06:53.845
And in the sequence diagram over here, the
sequence diagram won't be useful unless

102
00:06:53.845 --> 00:06:57.320
you have multiple machines that
are talking to each other.

103
00:06:57.320 --> 00:07:02.232
But the events panel is useful because
it shows you each one of the events that

104
00:07:02.232 --> 00:07:04.330
are sent to the machine.

105
00:07:04.330 --> 00:07:07.380
So that's how you could
use the inspect tool to.

106
00:07:07.380 --> 00:07:09.720
Visualize your machine in real time.

107
00:07:10.730 --> 00:07:12.760
So useful tool.

108
00:07:12.760 --> 00:07:14.690
I hope you play around with it.

109
00:07:14.690 --> 00:07:18.720
By the end of the year there's gonna
be some awesome updates to that.

110
00:07:18.720 --> 00:07:24.792
So, yeah, but for
now we are just going to turn it off Yeah,

111
00:07:24.792 --> 00:07:28.930
it's just nice tool that you could use.

