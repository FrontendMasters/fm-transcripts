WEBVTT

1
00:00:00.950 --> 00:00:05.680
All right, so
let's get on to parameterization.

2
00:00:05.680 --> 00:00:11.387
This is a feature of XState that makes it,
it's just basically a refactoring feature.

3
00:00:11.387 --> 00:00:16.246
But it also makes it easier to visualize
how different parts of your machine

4
00:00:16.246 --> 00:00:20.502
are working and just showing what
they're supposed to be doing.

5
00:00:20.502 --> 00:00:23.455
If we go back to the scratch.index file.

6
00:00:23.455 --> 00:00:28.306
Index.js file, we could take this and

7
00:00:28.306 --> 00:00:31.950
we could parameterize it.

8
00:00:31.950 --> 00:00:33.950
Basically we're just refactoring it.

9
00:00:33.950 --> 00:00:37.250
So, over here,
we want to increment the count.

10
00:00:37.250 --> 00:00:42.670
So we could do something like,
call this const increment count.

11
00:00:42.670 --> 00:00:49.640
And, put that over there, and
then have this just be increment counts.

12
00:00:49.640 --> 00:00:51.870
This is just standard
JavaScript refactoring.

13
00:00:51.870 --> 00:00:54.910
So this is going to work
the exact same way.

14
00:00:54.910 --> 00:00:59.790
If we go home, we see that it's
still increments exactly the same.

15
00:00:59.790 --> 00:01:04.196
But what we could also do is,
we could take this,

16
00:01:04.196 --> 00:01:09.998
make this a string, and
as the second arguments to our machine,

17
00:01:09.998 --> 00:01:14.832
we could say for example,
actions Increment count,

18
00:01:14.832 --> 00:01:20.974
we could have that be that same action,
that same implementation.

19
00:01:20.974 --> 00:01:23.939
In this case,
it's the same as increments counts.

20
00:01:26.593 --> 00:01:28.630
And everything's going to work the same.

21
00:01:28.630 --> 00:01:33.280
So you might be asking yourself,
why exactly do I want to do that?

22
00:01:33.280 --> 00:01:36.500
&gt;&gt; Why do I want to do that
small amounts of refactoring,

23
00:01:36.500 --> 00:01:38.656
if it's going to do the same thing?

24
00:01:38.656 --> 00:01:43.788
And the reason is because with
XState react, and XState in general,

25
00:01:43.788 --> 00:01:48.046
you have the flexibility to
change what side effects do.

26
00:01:48.046 --> 00:01:53.135
Sort of like you would mock in unit
tests you could change the behavior

27
00:01:53.135 --> 00:01:57.850
of what the side effects are doing
in a given implementation.

28
00:01:57.850 --> 00:02:03.650
So for example, let's say that we
want to increments by 100 instead.

29
00:02:03.650 --> 00:02:07.219
So in use machine in the second arguments,

30
00:02:07.219 --> 00:02:12.586
we could specify increments
counts to be something different.

31
00:02:12.586 --> 00:02:18.066
So we could say assign and
we could add 100, instead of one.

32
00:02:18.066 --> 00:02:24.050
And so now this is going to be specific
to the machine being used over here.

33
00:02:24.050 --> 00:02:29.359
So, if we go here and reload and
click here, now we're going to see that

34
00:02:29.359 --> 00:02:34.920
our increment counts does something
different in this component.

35
00:02:34.920 --> 00:02:38.194
And so this is really essential
to having these machines.

36
00:02:38.194 --> 00:02:43.619
That are reusable that you could use in
different components and that do different

37
00:02:43.619 --> 00:02:48.740
things depending on which component
they're in or which behavior you want.

38
00:02:48.740 --> 00:02:53.747
And you could also do things like
just have this be I don't know,

39
00:02:53.747 --> 00:02:58.665
an empty function that doesn't
do anything and you could leave

40
00:02:58.665 --> 00:03:04.020
the implementation details up
to the consumer of this machine.

41
00:03:04.020 --> 00:03:06.166
So if I forget to add that,

42
00:03:06.166 --> 00:03:12.130
XState react is going to warn you
that that action wasn't implemented.

43
00:03:12.130 --> 00:03:14.540
I probably have warnings hidden.

44
00:03:14.540 --> 00:03:17.770
So, you won't see that over here.

45
00:03:17.770 --> 00:03:20.020
But if I click over here.

46
00:03:22.020 --> 00:03:25.293
But yeah, you will get a warning
if you have warnings showing

47
00:03:25.293 --> 00:03:28.270
over here that that action
wasn't implemented.

48
00:03:28.270 --> 00:03:32.880
And so it's up to you to just go ahead and
implement that.

49
00:03:32.880 --> 00:03:35.220
So we could just change
this to increment count.

50
00:03:37.160 --> 00:03:38.900
Are there any questions on that?.

51
00:03:38.900 --> 00:03:43.860
So, the question was, what can be
the thing that's passed into actions?

52
00:03:43.860 --> 00:03:47.430
Can it be an external module or
something like that?

53
00:03:47.430 --> 00:03:49.530
Yes, essentially it could be anything.

54
00:03:49.530 --> 00:03:54.761
So, an action is something that,
if it's not a built-in XState action,

55
00:03:54.761 --> 00:03:59.492
it could be a function that takes
the current context and event, and

56
00:03:59.492 --> 00:04:02.670
basically does whatever you want here.

57
00:04:02.670 --> 00:04:05.333
So if I alert increments,

58
00:04:05.333 --> 00:04:10.510
then I click here it's
going to say increments.

59
00:04:10.510 --> 00:04:12.837
Now that function can be anything.

60
00:04:12.837 --> 00:04:16.558
It could come from a module,
it could definitely be an external module,

61
00:04:16.558 --> 00:04:18.450
it could call a third party library.

62
00:04:18.450 --> 00:04:21.300
And that's why actions are really,
really useful.

63
00:04:21.300 --> 00:04:24.960
And parameterizing actions are useful too.

64
00:04:24.960 --> 00:04:29.580
Let's say that you want to do logging or
telemetry or something.

65
00:04:31.240 --> 00:04:34.090
Is our actions a good place to do that?

66
00:04:34.090 --> 00:04:35.860
It depends, but mostly yes.

67
00:04:35.860 --> 00:04:39.520
So, let's say that we do have,

68
00:04:39.520 --> 00:04:44.510
let's just have a telemetry over here.

69
00:04:44.510 --> 00:04:47.060
And right now it does nothing.

70
00:04:47.060 --> 00:04:49.950
But we want to add telemetry over here.

71
00:04:49.950 --> 00:04:55.600
And we could console.log,
let's say, logging telemetry.

72
00:04:55.600 --> 00:05:00.130
And maybe pass it the events as well.

73
00:05:00.130 --> 00:05:05.130
And so we could define in specific states
where we want that telemetry to be.

74
00:05:05.130 --> 00:05:08.380
So let's say we want telemetry here.

75
00:05:08.380 --> 00:05:13.361
And we also want telemetry,
whenever we enter pending,

76
00:05:13.361 --> 00:05:17.180
we could have it entry telemetry.

77
00:05:17.180 --> 00:05:21.980
And so now we're going to see that
we do get that telemetry over here.

78
00:05:21.980 --> 00:05:24.840
And obviously it's just
logging to the console.

79
00:05:24.840 --> 00:05:26.410
You can make it do whatever you want.

80
00:05:27.520 --> 00:05:32.330
But sometimes, let's say that you want
to have it happen on every state.

81
00:05:33.380 --> 00:05:38.740
So, there's a couple of ways to do that
in react, you could just use effect.

82
00:05:38.740 --> 00:05:44.128
And so whenever the state changes,
that's when you want to,

83
00:05:44.128 --> 00:05:50.160
you could console.log the state,
and just do all of that.

84
00:05:50.160 --> 00:05:55.694
Now, when you're using XState
in the context other than react,

85
00:05:55.694 --> 00:06:00.323
you have what's called a service,
and in XState react

86
00:06:00.323 --> 00:06:05.810
that's returned as the third
part of your tuple over here.

87
00:06:05.810 --> 00:06:07.910
A service is a machine that's running.

88
00:06:07.910 --> 00:06:13.440
It's that interpreted service or
sorry, the interpreted machine.

89
00:06:13.440 --> 00:06:17.121
And so you could do service.subscribe.

90
00:06:17.121 --> 00:06:21.990
And you could do whatever you want
over here so you could log telemetry.

91
00:06:21.990 --> 00:06:25.967
In this subscribe function
you do get the state,

92
00:06:25.967 --> 00:06:30.914
and remember the state includes
everything, the context,

93
00:06:30.914 --> 00:06:36.249
the event, any actions, and
if you want to clean up this effect,

94
00:06:36.249 --> 00:06:42.570
so you have const subscription,
you could return sub.unsubscribe.

95
00:06:42.570 --> 00:06:45.470
And so that's how you could
do that cleanup over there.

96
00:06:45.470 --> 00:06:50.259
In general use effect is useful when
you want to do something every single

97
00:06:50.259 --> 00:06:52.160
time the state changes.

98
00:06:52.160 --> 00:06:57.590
But otherwise if you want to be more
granular, then yes, use actions instead.

