WEBVTT

1
00:00:00.500 --> 00:00:06.940
All right, so
let's get started with the final exercise.

2
00:00:06.940 --> 00:00:12.513
So if you go to Exercise 8, you're
going to be seeing a lot more things.

3
00:00:12.513 --> 00:00:16.919
You're gonna see that clock that
we showed there and that timer,

4
00:00:16.919 --> 00:00:18.930
basically the complete app.

5
00:00:18.930 --> 00:00:26.340
But what we want to do is we want to
spawn a new timer on the add action.

6
00:00:26.340 --> 00:00:29.701
So we have this form over here
where you could enter, for

7
00:00:29.701 --> 00:00:32.288
example, number of seconds such as 31.

8
00:00:32.288 --> 00:00:37.361
And pressing play should
create a new actor and

9
00:00:37.361 --> 00:00:40.490
show that timer over there.

10
00:00:42.030 --> 00:00:45.458
Again, if you want to review what
this is supposed to look like,

11
00:00:45.458 --> 00:00:47.240
you could go to the complete app.

12
00:00:48.620 --> 00:00:53.269
Press play, we could add a timer,
make this 11 seconds, and

13
00:00:53.269 --> 00:00:57.670
we can also switch back and
forth between these two timers.

14
00:00:59.190 --> 00:01:01.743
And so these timers each
have their own behavior, and

15
00:01:01.743 --> 00:01:03.340
they don't affect one another.

16
00:01:03.340 --> 00:01:06.870
So their state is local and private.

17
00:01:06.870 --> 00:01:11.660
And so we could also delete these,
and then that takes us back here.

18
00:01:11.660 --> 00:01:15.585
So yeah, play around with the complete
app to see how this is supposed to work.

19
00:01:15.585 --> 00:01:19.626
But we're going to be
invoking that timer machine.

20
00:01:19.626 --> 00:01:23.705
So just to show you where things are,

21
00:01:23.705 --> 00:01:29.110
if we go to the README
[COUGH] in timerAppMachine.

22
00:01:30.930 --> 00:01:35.407
Over here is where you're going to be
spawning a new timer machine by using

23
00:01:35.407 --> 00:01:38.380
the createTimerMachine function.

24
00:01:38.380 --> 00:01:43.415
By the way, this is a typical
pattern that I'd like to use,

25
00:01:43.415 --> 00:01:49.460
where if I need a machine whose
behavior is only determined at runtime,

26
00:01:49.460 --> 00:01:53.692
such as creating a timer
with a dynamic duration,

27
00:01:53.692 --> 00:01:58.450
then I create a function
that creates a machine.

28
00:01:58.450 --> 00:02:02.962
And that's simpler than
having to just specify

29
00:02:02.962 --> 00:02:07.590
machines with context or things like that.

30
00:02:07.590 --> 00:02:09.982
So that's a pattern I like doing.

31
00:02:09.982 --> 00:02:14.115
You could do it a different way, but it's
basically going to take that duration and

32
00:02:14.115 --> 00:02:16.360
put it right here in the context.

33
00:02:16.360 --> 00:02:21.562
So yeah, spawn a new timer machine here,
and then we're going

34
00:02:21.562 --> 00:02:27.440
to update context.timers to
contain that appended spawn timer.

35
00:02:27.440 --> 00:02:31.769
And also we're going to change
context.currentTimer to reflect

36
00:02:31.769 --> 00:02:33.940
the index of that spawned timer.

