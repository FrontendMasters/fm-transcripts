WEBVTT

1
00:00:00.450 --> 00:00:01.600
All right, I wanna move on.

2
00:00:01.600 --> 00:00:02.809
Is that okay with everybody?

3
00:00:02.809 --> 00:00:05.924
If you haven't finished,
just go to the course website and

4
00:00:05.924 --> 00:00:08.804
you should be able to get
the complete code right here.

5
00:00:08.804 --> 00:00:11.026
Look at that, it's right there.

6
00:00:11.026 --> 00:00:13.100
And look at this,
I did this the kinda dumb way right here.

7
00:00:13.100 --> 00:00:14.231
How cute is that?

8
00:00:14.231 --> 00:00:18.110
Okay, so there we go, fantastic.

9
00:00:18.110 --> 00:00:18.930
We now have it.

10
00:00:20.420 --> 00:00:26.717
So when you do IntoIterator,
it consumes the thing you give it.

11
00:00:26.717 --> 00:00:32.656
I know that's a weird word, but remember
when you passed your item to a function,

12
00:00:32.656 --> 00:00:34.995
the function became the owner.

13
00:00:36.375 --> 00:00:41.385
So let's go back to here and
let's take our rect right now.

14
00:00:41.385 --> 00:00:44.979
I'd like this now, I can go,
for point in rect.

15
00:00:44.979 --> 00:00:47.141
Look at that, we can now for

16
00:00:47.141 --> 00:00:52.055
loop over our rectangle because
we created this into iter.

17
00:00:52.055 --> 00:00:58.051
It's able to understand our into iter and
iterate over it, but what happens?

18
00:00:58.051 --> 00:01:04.490
If I go like this, println and pass in
my rect, what's the error we're getting?

19
00:01:04.490 --> 00:01:07.794
We've seen this error before, haven't we?

20
00:01:07.794 --> 00:01:13.869
Borrow of moved value,
who owns the rectangle?

21
00:01:13.869 --> 00:01:15.320
&gt;&gt; The iterator?

22
00:01:15.320 --> 00:01:16.180
&gt;&gt; Yeah, the for loop.

23
00:01:16.180 --> 00:01:18.520
The for loop was handed the rectangle.

24
00:01:18.520 --> 00:01:20.330
So now you don't own the rectangle.

25
00:01:20.330 --> 00:01:24.140
You can really see this very
obviously doing it with a vector.

26
00:01:25.290 --> 00:01:26.420
I'll do it really quickly.

27
00:01:26.420 --> 00:01:29.892
If I go let vec = vec![1, 2,

28
00:01:29.892 --> 00:01:34.730
3], I can create the exact
same thing here.

29
00:01:36.120 --> 00:01:40.392
Do that, I can print out the vec.

30
00:01:40.392 --> 00:01:46.708
Do one of those and I can go for value in
vec, and now we'll have the same problem.

31
00:01:46.708 --> 00:01:52.622
But if I go like this,
we no longer have the problem, why?

32
00:01:52.622 --> 00:01:54.600
What have I told you
about these references?

33
00:01:54.600 --> 00:01:56.242
It's not just a reference.

34
00:01:56.242 --> 00:02:01.808
A reference in of itself is almost
like a type, right, sort of.

35
00:02:01.808 --> 00:02:03.970
Well, let's jump back to our rectangle.

36
00:02:03.970 --> 00:02:05.984
Let's just take this entire block.

37
00:02:05.984 --> 00:02:07.721
I'm gonna copy the whole thing.

38
00:02:07.721 --> 00:02:13.840
I'm gonna paste it and I'm gonna implement
iterator for a reference to rectangle,

39
00:02:13.840 --> 00:02:18.076
not the rectangle itself, but
a reference to rectangle.

40
00:02:22.335 --> 00:02:25.225
So let's just see if that works
because if this is a type,

41
00:02:25.225 --> 00:02:28.310
then we can kind of implement it for
that version of the type.

42
00:02:29.400 --> 00:02:31.670
So I'm gonna go back to main.

43
00:02:31.670 --> 00:02:35.420
So for those that don't see,
I just put a little ampersand right here.

44
00:02:35.420 --> 00:02:39.823
So we implemented IntoIterator for
a reference to a rectangle,

45
00:02:39.823 --> 00:02:41.952
which means I can delete this.

46
00:02:41.952 --> 00:02:44.380
And right now we have this problem.

47
00:02:44.380 --> 00:02:49.368
Now when I do that, problem's gone
because the reference to a rectangle

48
00:02:49.368 --> 00:02:52.394
gets the method IntoIterator called on it,

49
00:02:52.394 --> 00:02:58.940
which means we're consuming a reference,
we're not consuming the rectangle.

50
00:02:58.940 --> 00:02:59.525
Does that make sense?

51
00:03:04.477 --> 00:03:07.850
I wonder if this is, don't worry about it.

52
00:03:07.850 --> 00:03:10.920
All right, so there we go,
pretty fantastic?

53
00:03:10.920 --> 00:03:13.730
So if you didn't hear the question, can
we do that without copying and pasting?

54
00:03:13.730 --> 00:03:15.170
Well, we can take it in multiple steps.

55
00:03:15.170 --> 00:03:18.980
So right now,
we're almost achieving maximal wrong.

56
00:03:18.980 --> 00:03:22.773
Like I said,
we're gonna first fail to succeed.

57
00:03:22.773 --> 00:03:26.023
So I'm just gonna keep on going down
this path in the worst possible way,

58
00:03:26.023 --> 00:03:28.015
cuz what are we gonna
have to do with circle?

59
00:03:28.015 --> 00:03:29.906
We have to do circle iter.

60
00:03:29.906 --> 00:03:31.500
And we're gonna have to have
the iterator for that one.

61
00:03:31.500 --> 00:03:33.884
Then we're gonna have to have
the iterator for the reference to circle.

62
00:03:33.884 --> 00:03:35.040
It's gonna be a lot of things, right?

63
00:03:36.110 --> 00:03:38.130
All right, so let's go back here.

64
00:03:39.330 --> 00:03:40.940
Simple fix, right?

65
00:03:40.940 --> 00:03:42.972
Just copy and paste it.

66
00:03:42.972 --> 00:03:44.620
I hate duplicating code.

67
00:03:44.620 --> 00:03:49.410
I know the Martin Fowler rule of thumb
is three duplications mean refactor.

68
00:03:49.410 --> 00:03:52.685
But for me, with this type
of blatant copy and pasting,

69
00:03:52.685 --> 00:03:55.062
I do a two duplication let's refactor.

70
00:03:55.062 --> 00:03:57.878
So the first thing we do
is do it via a constructor.

71
00:03:57.878 --> 00:04:01.909
So what I mean by that is
a pretty typical way to do this,

72
00:04:01.909 --> 00:04:07.445
you don't have to copy me on this one,
is that I can do something like this.

73
00:04:07.445 --> 00:04:13.259
Implement RectIter,
I can add a function to RectIter called,

74
00:04:13.259 --> 00:04:18.322
let's just say pub new, or
it doesn't need to be pub.

75
00:04:18.322 --> 00:04:19.700
It can just be function new.

76
00:04:19.700 --> 00:04:20.769
So it's only within our file.

77
00:04:20.769 --> 00:04:23.007
Only we can construct an iterator.

78
00:04:23.007 --> 00:04:27.590
And this thing could say,
take a reference to rectangle.

79
00:04:27.590 --> 00:04:31.700
If it has a reference to rectangle,
it's gonna return out an iter.

80
00:04:31.700 --> 00:04:33.857
Now, you can call this
function whatever you want.

81
00:04:33.857 --> 00:04:39.164
There's not a rule that new
means it has to be the RectIter.

82
00:04:39.164 --> 00:04:44.110
And also if you want,
you can also use self if you'd like to.

83
00:04:44.110 --> 00:04:44.630
So there we go.

84
00:04:44.630 --> 00:04:50.369
And of course, oopsies,
don't call it a rectangle, it's a rect.

85
00:04:50.369 --> 00:04:50.920
So there we go.

86
00:04:50.920 --> 00:04:52.690
So our problem is we
need to just build this.

87
00:04:52.690 --> 00:04:56.100
So I can take this code
right here [SOUND] and

88
00:04:56.100 --> 00:04:59.808
I could jump up here,
and I could paste it in.

89
00:04:59.808 --> 00:05:02.590
So now look, we have this,
but we have one problem.

90
00:05:02.590 --> 00:05:04.560
Obviously, self doesn't exist anymore.

91
00:05:04.560 --> 00:05:06.470
We need to refer to the rectangle.

92
00:05:06.470 --> 00:05:09.593
So I'll just highlight these,
do a little tiny, teeny,

93
00:05:09.593 --> 00:05:12.210
tiny little regex replace here.

94
00:05:12.210 --> 00:05:13.410
And there we go.

95
00:05:13.410 --> 00:05:17.505
We now have rect being used,
but not consuming it,

96
00:05:17.505 --> 00:05:20.274
only consuming a reference to it.

97
00:05:20.274 --> 00:05:24.680
And there we go, fantastic, right, right?

98
00:05:24.680 --> 00:05:27.420
Okay, so that means we should
be able to go down here.

99
00:05:27.420 --> 00:05:30.700
And we should be able to say this, okay,

100
00:05:30.700 --> 00:05:34.660
return RectIter new reference to self,
right?

101
00:05:36.420 --> 00:05:38.450
Because this one right
here is a consuming one.

102
00:05:38.450 --> 00:05:41.060
Right now, we're actually consuming rect.

103
00:05:41.060 --> 00:05:42.780
So this will still cause it to consume.

104
00:05:44.230 --> 00:05:47.932
This one is a reference to rect, so
we should be able to just go like that,

105
00:05:47.932 --> 00:05:49.690
if you highlight over it.

106
00:05:49.690 --> 00:05:51.860
So reference to rect, there we go.

107
00:05:51.860 --> 00:05:54.200
So we've kinda created less duplication,
right?

108
00:05:54.200 --> 00:05:55.500
That feels pretty good, right?

109
00:05:56.630 --> 00:05:57.697
Yeah, I mean, it's better.

110
00:05:57.697 --> 00:05:59.080
I'm feeling happier about that.

111
00:05:59.080 --> 00:06:01.295
There's still a lot of
duplication going on here.

112
00:06:01.295 --> 00:06:06.815
One other thing we can do
is instead of doing that,

113
00:06:06.815 --> 00:06:13.780
we can go like this,
implement from rectangle for RectIter.

114
00:06:13.780 --> 00:06:15.660
So this is another trait.

115
00:06:15.660 --> 00:06:17.340
This is called the from trait.

116
00:06:17.340 --> 00:06:23.975
So this will allow you to effectively
transfer types or change types.

117
00:06:23.975 --> 00:06:24.579
So I'm gonna go like this.

118
00:06:24.579 --> 00:06:26.785
I'm gonna implement the missing members.

119
00:06:26.785 --> 00:06:27.916
It's gonna have a value.

120
00:06:27.916 --> 00:06:30.945
And I'm just gonna take out that and
just move it up here.

121
00:06:32.095 --> 00:06:37.843
And of course,
rect becomes value, there we go.

122
00:06:37.843 --> 00:06:39.662
And I can delete this.

123
00:06:39.662 --> 00:06:42.177
We no longer have the constructor,
so I now have this right here.

124
00:06:42.177 --> 00:06:43.052
It's called a from.

125
00:06:43.052 --> 00:06:47.636
And this is a pretty cool trait because
it allows you to do something like this,

126
00:06:47.636 --> 00:06:49.239
where I can go self.into.

127
00:06:49.239 --> 00:06:53.745
And the thing that's really cool about
that is that the compiler infers what type

128
00:06:53.745 --> 00:06:54.812
should it go into.

129
00:06:54.812 --> 00:06:58.234
Just like parse, remember how parse,
I had to say a type somewhere,

130
00:06:58.234 --> 00:07:01.170
and it could just define
what parse method to call?

131
00:07:01.170 --> 00:07:05.770
This is doing the exact same thing,
except for it's doing it with into.

132
00:07:05.770 --> 00:07:10.580
It can tell right here that I'm gonna need
to be able to be this associated type

133
00:07:10.580 --> 00:07:13.772
into iter,
which is actually gonna be a RectIter.

134
00:07:13.772 --> 00:07:17.804
And so when I call into, it goes, okay,
RectIter has to implement the from

135
00:07:17.804 --> 00:07:21.261
reference rectangle, and
it will just automatically happen.

136
00:07:21.261 --> 00:07:22.982
So that means I can just go up here.

137
00:07:22.982 --> 00:07:28.020
I can delete that and
do one of these and that and go into.

138
00:07:28.020 --> 00:07:28.850
There we go.

139
00:07:28.850 --> 00:07:30.726
So now I'm just using
a bit more inference,

140
00:07:30.726 --> 00:07:32.720
using a bit more standard way to do this.

141
00:07:32.720 --> 00:07:34.390
You can kind of choose whatever
way you want to do it.

142
00:07:34.390 --> 00:07:36.475
I don't think one way is
more right than the other.

143
00:07:36.475 --> 00:07:41.320
But I think into is super cool to use
because it allows you to have more

144
00:07:41.320 --> 00:07:43.190
tying into the standard.

145
00:07:43.190 --> 00:07:47.600
I feel really good tying into the standard
library at all times because now I

146
00:07:47.600 --> 00:07:51.675
just have a more uniform way to be
able to go from one shape to another.

147
00:07:51.675 --> 00:07:55.885
It also means that if we are in
actual library code, right,

148
00:07:55.885 --> 00:08:01.555
I could do iter = self.into, and
I don't even know what type this is.

149
00:08:01.555 --> 00:08:02.825
I could do RectIter, right?

150
00:08:02.825 --> 00:08:05.637
And it would just be able
to do the right thing.

151
00:08:05.637 --> 00:08:08.143
Hey, what are you doing here?

152
00:08:08.143 --> 00:08:13.250
Oopsies, it hasn't
implemented on the reference.

153
00:08:13.250 --> 00:08:13.810
There we go.

154
00:08:13.810 --> 00:08:14.730
So it can do that.

155
00:08:14.730 --> 00:08:16.353
It can just do the right thing.

156
00:08:16.353 --> 00:08:19.310
And then you can also do a consuming
into in which it will do,

157
00:08:19.310 --> 00:08:21.158
it will actually consume the value.

158
00:08:21.158 --> 00:08:24.585
So if you actually wanted to transfer
it from a rectangle into a RectIter,

159
00:08:24.585 --> 00:08:28.195
you could have it implemented on
the actual item itself, pretty cool stuff.

