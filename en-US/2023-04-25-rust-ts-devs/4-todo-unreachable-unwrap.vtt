WEBVTT

1
00:00:00.000 --> 00:00:01.977
Unwraps, todos, and unreachables.

2
00:00:01.977 --> 00:00:04.361
Here's things that just
don't exist in TypeScript.

3
00:00:04.361 --> 00:00:06.137
And so todo, this one's pretty cool.

4
00:00:06.137 --> 00:00:06.965
Let me show you something.

5
00:00:06.965 --> 00:00:07.486
So I'm gonna go in here.

6
00:00:07.486 --> 00:00:11.116
I'm gonna make a dir
called rust-typeScript.

7
00:00:11.116 --> 00:00:13.587
Wait a second, what just happened here?

8
00:00:13.587 --> 00:00:14.129
It already exists.

9
00:00:14.129 --> 00:00:16.797
Well, then here, I'm gonna rm -rf.

10
00:00:16.797 --> 00:00:21.312
One time I deleted my home directory
on Stream, in front of lots of people.

11
00:00:21.312 --> 00:00:22.873
mkdir, there we go.

12
00:00:22.873 --> 00:00:24.679
It was very bad, rust-typeScript.

13
00:00:24.679 --> 00:00:26.396
So brand new project right here.

14
00:00:26.396 --> 00:00:28.486
Don't worry, we'll go over these
steps here in just one second.

15
00:00:28.486 --> 00:00:30.271
Cargo init, awesome.

16
00:00:30.271 --> 00:00:33.680
Open this up, go here, beautiful.

17
00:00:33.680 --> 00:00:35.555
And now I have this little main function.

18
00:00:36.824 --> 00:00:39.616
There we go, and now let's go in here.

19
00:00:39.616 --> 00:00:41.958
And I'm gonna show you a little
something called a to-do.

20
00:00:41.958 --> 00:00:47.605
So let's create a function, and I'm going
to go like this, a non-complete function.

21
00:00:47.605 --> 00:00:50.925
And let's just take in say,
x, which is a usize.

22
00:00:50.925 --> 00:00:56.333
So an unsized integer,
the size of my system architecture.

23
00:00:56.333 --> 00:00:58.665
And I wanna return a boolean.

24
00:00:58.665 --> 00:01:01.419
So it's gonna tell me right away,
hey, you got this error.

25
00:01:01.419 --> 00:01:03.681
Look at that,
you need to return something.

26
00:01:03.681 --> 00:01:06.381
If I go over here and
pop up the message, expected bool,

27
00:01:06.381 --> 00:01:08.229
found what is referred to as the unit.

28
00:01:08.229 --> 00:01:09.767
Or in other words, nothing.

29
00:01:09.767 --> 00:01:11.513
You're not returning anything right now.

30
00:01:11.513 --> 00:01:15.153
So if I go like this, if x is,
how about, I have co-pilot on,

31
00:01:15.153 --> 00:01:17.436
I've been trying it for six months here.

32
00:01:17.436 --> 00:01:18.120
There we go.

33
00:01:18.120 --> 00:01:22.645
If x is less than 10, then return true.

34
00:01:22.645 --> 00:01:25.664
But man, there's more code I have to do.

35
00:01:25.664 --> 00:01:26.891
I'm not done with the function yet.

36
00:01:26.891 --> 00:01:29.394
It's still erroring on me, but
I just kind of want to test this.

37
00:01:29.394 --> 00:01:35.751
I can throw in a little todo and
say, hey, me, finish this later.

38
00:01:35.751 --> 00:01:38.334
There we go.
And so now any code below that,

39
00:01:38.334 --> 00:01:42.225
if you run this, will just explode and
stop the program.

40
00:01:42.225 --> 00:01:45.876
But you have like a todo, an active todo,
something you can fix later on.

41
00:01:45.876 --> 00:01:48.263
You may not want to
complete the function yet.

42
00:01:48.263 --> 00:01:51.161
This is just one of those convenient
things about Rust that they

43
00:01:51.161 --> 00:01:53.575
have throughout it,
where you can kind of iterate.

44
00:01:53.575 --> 00:01:56.495
And so often I find that when
I'm building, say, a server,

45
00:01:56.495 --> 00:01:59.382
and there's a specific error
case that's hard to handle.

46
00:01:59.382 --> 00:02:02.315
I'll just throw it todo there, so
that when I'm doing my testing,

47
00:02:02.315 --> 00:02:03.709
eventually my server blows up.

48
00:02:03.709 --> 00:02:05.967
And I'm, okay, yeah,
I should probably start handling this now.

49
00:02:05.967 --> 00:02:07.738
And now's the time to start doing this.

50
00:02:07.738 --> 00:02:12.136
And so
it makes it kinda nice to do basic dev.

51
00:02:12.136 --> 00:02:13.336
So there you go.

52
00:02:13.336 --> 00:02:20.016
There's also unreachable, meaning say we
have a condition which is like only evens.

53
00:02:20.016 --> 00:02:22.335
You should only ever pass me an even.

54
00:02:22.335 --> 00:02:27.892
Well, if x modulo 2 equals 1,
this is not an even, right?

55
00:02:27.892 --> 00:02:30.243
So I could do something like unreachable.

56
00:02:30.243 --> 00:02:33.023
And this just says,
this is like a runtime assert.

57
00:02:33.023 --> 00:02:35.724
I say this should never happen, right?

58
00:02:35.724 --> 00:02:37.610
You can give your own little message here.

59
00:02:38.939 --> 00:02:43.926
And now if this happens, your program will
crash with an unreachable, saying hey,

60
00:02:43.926 --> 00:02:48.437
you've somehow violated what you've
set up as allowable in your program.

61
00:02:48.437 --> 00:02:49.605
You should probably fix this.

62
00:02:49.605 --> 00:02:52.586
This can also be very, very nice,
especially when you have these weird

63
00:02:52.586 --> 00:02:54.870
cases where you feel like
this should never happen, or

64
00:02:54.870 --> 00:02:58.070
you're programming something in which
you know better than the compiler.

65
00:02:58.070 --> 00:03:01.772
And it's like anything from here on
just should never, ever, happen.

66
00:03:01.772 --> 00:03:04.251
Boom, unreachable, and
it gives you like a nice error.

67
00:03:04.251 --> 00:03:07.668
And then you know that somehow your
belief in your own ability and

68
00:03:07.668 --> 00:03:09.132
logic actually is flawed.

69
00:03:09.132 --> 00:03:11.984
And it did, you've reached an unreachable.

70
00:03:13.065 --> 00:03:13.991
And we can also run this here.

71
00:03:13.991 --> 00:03:17.537
I can just do a little quick cargo
run,and you'll see that it says nothing.

72
00:03:17.537 --> 00:03:18.893
I only have dead code.

73
00:03:18.893 --> 00:03:21.211
And so if I go only evens and
pass in three,

74
00:03:21.211 --> 00:03:23.741
you want to guess what's
gonna happen here?

75
00:03:23.741 --> 00:03:29.113
Well, of course, it says, hey,
panicked, entered unreachable code.

76
00:03:29.113 --> 00:03:32.870
Just let me know,
we did something terribly wrong.

77
00:03:32.870 --> 00:03:34.450
And then there's also unwrap.

78
00:03:34.450 --> 00:03:38.939
Unwrap is something pretty unique,
because it doesn't really have any sort of

79
00:03:38.939 --> 00:03:42.430
relation to TypeScript that you
can even really bring about.

80
00:03:42.430 --> 00:03:44.474
Effectively, what an unwrap is,

81
00:03:44.474 --> 00:03:48.424
is it allows you to grab out the inner
value of an option or a result.

82
00:03:48.424 --> 00:03:51.311
Now again, those are words you're
probably not very familiar with.

83
00:03:51.311 --> 00:03:54.533
Options, null, and undefined,
result is an error.

84
00:03:54.533 --> 00:03:56.631
So you can imagine,
I'll just create one right now.

85
00:03:56.631 --> 00:03:57.660
I'll show you kinda how it looks.

86
00:03:57.660 --> 00:04:00.247
I can go, let foo = Some(5).

87
00:04:00.247 --> 00:04:03.875
So if you look at its type,
it's an option of i32.

88
00:04:03.875 --> 00:04:06.626
This thing could be undefined,
we don't know.

89
00:04:06.626 --> 00:04:10.132
So if I were to go foo.unwrap,
let bar equals this,

90
00:04:10.132 --> 00:04:13.337
we could technically shadow
it if we want it to.

91
00:04:13.337 --> 00:04:17.491
Bar is just the i32,
it's the thing inside the option.

92
00:04:17.491 --> 00:04:21.710
Unwraps are dangerous because what
happens when this thing is None?

93
00:04:21.710 --> 00:04:25.809
Well, you can still do unwrap
,obviously needs type annotations,

94
00:04:25.809 --> 00:04:28.079
because nothing has told me the type.

95
00:04:28.079 --> 00:04:30.932
Now it knows the type because None
doesn't have a type associated with it.

96
00:04:30.932 --> 00:04:33.192
So this is an option of i32.

97
00:04:33.192 --> 00:04:35.329
And technically, we now know it's None.

98
00:04:35.329 --> 00:04:38.246
And bar is an i32,
cuz we called unwrap on it.

99
00:04:38.246 --> 00:04:42.573
But since we didn't realize it was a None,
when we run the program it says hey,

100
00:04:42.573 --> 00:04:44.420
you just unwrapped a None value.

101
00:04:44.420 --> 00:04:45.584
You can't do that, right?

102
00:04:45.584 --> 00:04:47.392
That is an error, there's nothing there.

103
00:04:47.392 --> 00:04:51.655
You just did undefined dot something,
it's the equivalent of that.

104
00:04:51.655 --> 00:04:56.198
And so that's kind of,
it will handle options really fun.

105
00:04:56.198 --> 00:04:58.872
It's just know that unwraps are there,
they lift values out, and

106
00:04:58.872 --> 00:05:00.889
they'll explode your
program if you're wrong.

107
00:05:00.889 --> 00:05:03.826
So don't actually use them, but
they're great when you're first learning.

108
00:05:05.505 --> 00:05:06.737
There you go,
you can do the same thing with error.

109
00:05:06.737 --> 00:05:11.166
So if I defined an error, and
then tried to unwrap an error, boom.

110
00:05:11.166 --> 00:05:12.846
Boom goes the dynamite,
your program's dead.

