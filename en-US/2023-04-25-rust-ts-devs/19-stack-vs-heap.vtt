WEBVTT

1
00:00:00.140 --> 00:00:05.168
Hopefully you see kind of some of
the selling point of rust coming up here.

2
00:00:05.168 --> 00:00:07.420
That's why I think a lot
of people love it is,

3
00:00:07.420 --> 00:00:10.521
this is one of the foundational pieces for
why people love it.

4
00:00:10.521 --> 00:00:13.211
There is something else that is coming,
which is the borrow checker.

5
00:00:13.211 --> 00:00:17.243
This is the reason why Rust gets most of
its actually bad rap from, my personal

6
00:00:17.243 --> 00:00:21.414
belief is that it's the combination of
not knowing what an iterator an enum is.

7
00:00:21.414 --> 00:00:24.146
Mixed in with trying to figure out
the borrow checker at the same time, and

8
00:00:24.146 --> 00:00:26.717
people are just like, what,
I don't even know what's happening.

9
00:00:26.717 --> 00:00:29.666
There's like this pattern matching going
on, I have no idea what's happening.

10
00:00:29.666 --> 00:00:34.055
So that's why I wanted to build that
foundation first, so when I say result, or

11
00:00:34.055 --> 00:00:38.376
I say option, I say enum, you kinda have
a clearer picture in your head, and so

12
00:00:38.376 --> 00:00:41.285
then the borrow checking
part becomes pretty easy.

13
00:00:41.285 --> 00:00:43.834
It'll also make iterators
a bit more sensible.

14
00:00:43.834 --> 00:00:48.595
So first, I'm gonna have to teach
you some rust fundamentals that

15
00:00:48.595 --> 00:00:52.344
there's just really not
a typescript side by side.

16
00:00:52.344 --> 00:00:54.599
And so we just kind of have to do this.

17
00:00:54.599 --> 00:00:59.492
So we're gonna have to talk a little
bit about the stack versus the heap.

18
00:00:59.492 --> 00:01:03.273
So I'm gonna create a kind
of a small little example.

19
00:01:03.273 --> 00:01:04.992
So let's jump back here.

20
00:01:04.992 --> 00:01:07.696
And let's go to our Rust, 1, and
I'm gonna create a function.

21
00:01:07.696 --> 00:01:09.776
And we've probably all
seen this at some point.

22
00:01:09.776 --> 00:01:14.629
I'm just gonna call it foo, and inside
of here, I'm just gonna call it foo.

23
00:01:14.629 --> 00:01:16.789
It's gonna warn me about it, but whatever.

24
00:01:16.789 --> 00:01:19.636
And right here, I'm gonna call foo.

25
00:01:19.636 --> 00:01:22.260
Now, what's gonna happen
when I run this program?

26
00:01:24.759 --> 00:01:26.956
&gt;&gt; Choke.

27
00:01:26.956 --> 00:01:28.914
&gt;&gt; Something's bad's gonna happen as well,
what's gonna happen?

28
00:01:28.914 --> 00:01:34.582
In fact, what's gonna happen is what
is referred to as a stack overflow.

29
00:01:34.582 --> 00:01:36.874
And there's a reason why this
is called a stack overflow.

30
00:01:36.874 --> 00:01:41.345
And I'm gonna give you a somewhat
lying version of what's happening.

31
00:01:41.345 --> 00:01:45.493
This is not perfectly technically
accurate but it's accurate enough.

32
00:01:45.493 --> 00:01:50.064
So whenever you call a function,
something has to be loaded into memory.

33
00:01:50.064 --> 00:01:54.518
So if you think about it, you have a
pointer somewhere in your program walking

34
00:01:54.518 --> 00:01:59.384
through your code, it's going line by line
executing every last instruction, but

35
00:01:59.384 --> 00:02:02.001
at some point we need to
jump into a function.

36
00:02:02.001 --> 00:02:03.963
And so you have two memory regions.

37
00:02:03.963 --> 00:02:05.985
Effectively you have a stack.

38
00:02:05.985 --> 00:02:08.340
I'm drawing it upside down, Intel way.

39
00:02:08.340 --> 00:02:10.806
And then you have a place called the heap.

40
00:02:10.806 --> 00:02:13.611
You can think of the heap as
just like a giant memory place.

41
00:02:13.611 --> 00:02:17.476
You can think of the stack as like
a smaller memory place, but super fast.

42
00:02:17.476 --> 00:02:20.226
And so what happens is,
you have something called a stack pointer.

43
00:02:20.226 --> 00:02:21.449
It's pointed somewhere.

44
00:02:21.449 --> 00:02:26.247
And when we call a function, well,
we probably need to know like,

45
00:02:26.247 --> 00:02:28.569
say what the return address is.

46
00:02:28.569 --> 00:02:31.690
Where do we go back after
we finished your function?

47
00:02:31.690 --> 00:02:34.350
Cuz your function can't be called
anywhere within the program.

48
00:02:34.350 --> 00:02:36.972
So this happens,
this happens in JavaScript,

49
00:02:36.972 --> 00:02:40.853
you just don't experience it because
you that's not how we do stuff.

50
00:02:40.853 --> 00:02:42.566
There's also parameters, right?

51
00:02:42.566 --> 00:02:45.997
Every function has some list of
parameters that you pass into it.

52
00:02:45.997 --> 00:02:48.496
So it now has to have these parameters.

53
00:02:48.496 --> 00:02:49.884
It has to be able to access them.

54
00:02:49.884 --> 00:02:54.218
They may be references, they may be
the literal values, what are they?

55
00:02:54.218 --> 00:02:56.864
And then you're gonna have some
sort of return value at the end.

56
00:02:56.864 --> 00:02:58.411
This is why we have options.

57
00:02:58.411 --> 00:03:02.777
I need to know what am I returning, what
is the shape of the thing I'm returning?

58
00:03:02.777 --> 00:03:06.577
And so that's kind of what happened so
when we called foo over and over again,

59
00:03:06.577 --> 00:03:10.025
we call a foo, we had to have a good
return address, we had to load up any

60
00:03:10.025 --> 00:03:13.669
parameters with a load of any return
value, and then we called foo again.

61
00:03:13.669 --> 00:03:17.903
Well, we better have a return address,
then we better and then we have this and

62
00:03:17.903 --> 00:03:21.123
then it just went on ad infinitum
until we ran out of memory.

63
00:03:21.123 --> 00:03:25.125
We ran out of memory, Stack Overflow,
kaboom, we can no longer operate.

64
00:03:25.125 --> 00:03:29.102
So hopefully that makes general sense of
what's happening when you do function

65
00:03:29.102 --> 00:03:32.439
calls, and so this happens in
every language, it's fantastic.

66
00:03:32.439 --> 00:03:35.448
So now that we kinda covered that,
so you can see how a stack or

67
00:03:35.448 --> 00:03:38.826
a stack overflow happens,
let's talk about a struct for a second.

68
00:03:38.826 --> 00:03:44.201
So I'm gonna go in here, I'm gonna
create struct, let's call it, let's get

69
00:03:44.201 --> 00:03:49.679
away from that, I'll call it MyStruct,
and it has an age of usize, so 8 bytes.

70
00:03:49.679 --> 00:03:54.812
So when I create,
I let foo equals MyStruct,

71
00:03:54.812 --> 00:03:59.685
and I say age is 0, what's going on here?

72
00:03:59.685 --> 00:04:02.491
Well, what's happening deep
down inside of here is,

73
00:04:02.491 --> 00:04:04.814
let's say our stack pointer's right here.

74
00:04:04.814 --> 00:04:08.902
Well, we're gonna need to create a little
bit of memory right here for MyStruct.

75
00:04:08.902 --> 00:04:10.841
MyStruct contains what?

76
00:04:10.841 --> 00:04:12.296
A single age usize, so

77
00:04:12.296 --> 00:04:16.280
you can imagine that there's
a pointer some address in here,

78
00:04:16.280 --> 00:04:22.044
whatever it's gonna be 69 4 20, whatever
the address is inside of here fantastic.

79
00:04:22.044 --> 00:04:25.353
And we're gonna have to put MyStruct
in here which is gonna be 8 bytes,

80
00:04:25.353 --> 00:04:27.393
it's gonna have the 8 bytes for the usize,

81
00:04:27.393 --> 00:04:31.000
and probably nothing else because
there's nothing else we have specified.

82
00:04:31.000 --> 00:04:34.062
It's very easy to do that on the stack,
right,

83
00:04:34.062 --> 00:04:37.050
cuz all you do is you take
your stack pointer and

84
00:04:37.050 --> 00:04:41.511
you add 8, and boom you just got
yourself 8 bytes of memory region.

85
00:04:41.511 --> 00:04:44.346
And now you can just store
your stack right there so

86
00:04:44.346 --> 00:04:48.532
if you need to refer to your stack,
it's right, or my foo, or MyStruct,

87
00:04:48.532 --> 00:04:52.938
it can just jump right there, it's
super fast, very easy to do, all right?

88
00:04:52.938 --> 00:04:54.952
But now,
what happen if I do something like this?

89
00:04:54.952 --> 00:04:57.550
What happen if age is a vector of usize?

90
00:04:57.550 --> 00:05:00.756
Again, I say this a bunch,
vectors can grow, so

91
00:05:00.756 --> 00:05:03.429
they can't just be stored on the stack.

92
00:05:03.429 --> 00:05:05.230
So you'll see something like this, right?

93
00:05:05.230 --> 00:05:07.109
We'll just go like that.

94
00:05:07.109 --> 00:05:09.908
Hopefully this makes sense,
we'll jump over here so

95
00:05:09.908 --> 00:05:13.896
instead of being 8 bytes with just an age,
we need to store something else.

96
00:05:13.896 --> 00:05:16.230
So I'm just gonna just
back up a little bit.

97
00:05:16.230 --> 00:05:19.172
You could imagine that it
could store a pointer,

98
00:05:19.172 --> 00:05:21.836
which points somewhere over into the heap.

99
00:05:21.836 --> 00:05:23.754
This is my place I can grow my memory.

100
00:05:23.754 --> 00:05:27.269
This is the place I can
store all my usizes at.

101
00:05:27.269 --> 00:05:30.318
Then, it's gonna store a length, so

102
00:05:30.318 --> 00:05:35.668
that way I know how many items I have,
then it can store a capacity.

103
00:05:35.668 --> 00:05:38.036
So that way it knows
when it needs to resize.

104
00:05:38.036 --> 00:05:39.516
So if I keep on adding items,

105
00:05:39.516 --> 00:05:43.425
at some point it's gonna run out of
memory that it has allocated over here.

106
00:05:43.425 --> 00:05:47.062
I think normally it starts off with like
5 as the default one when you create

107
00:05:47.062 --> 00:05:49.154
an empty warning, it has some low amount.

108
00:05:49.154 --> 00:05:51.420
And then it has to grow as you add more.

109
00:05:51.420 --> 00:05:54.556
And so as we add more and
more of these little 8 byte units,

110
00:05:54.556 --> 00:05:56.424
eventually we may have to resize.

111
00:05:56.424 --> 00:05:59.217
And so that means, we now have,
there's something going on here,

112
00:05:59.217 --> 00:06:01.430
I'm trying to make it very
clear what's happening.

113
00:06:01.430 --> 00:06:06.722
So that means, we have a MyStruct,
which takes up this amount of room, and

114
00:06:06.722 --> 00:06:11.767
MyStruct has a vector, which is this
part right here, and points off.

115
00:06:11.767 --> 00:06:16.636
So if we had another property, say a usize
itself, we'd have the usize right here,

116
00:06:16.636 --> 00:06:19.873
little 8, little bytes,
it'll just be on the stack.

117
00:06:19.873 --> 00:06:22.641
So if we refer to that one,
it will just be on the stack, but

118
00:06:22.641 --> 00:06:26.484
if we refer to something the vector,
we'd have to go to our property, we'd have

119
00:06:26.484 --> 00:06:30.118
to go to our struct offset into the
pointer, the pointer had to be followed.

120
00:06:30.118 --> 00:06:33.420
We'd have to then offset until
whatever this is, and boom,

121
00:06:33.420 --> 00:06:35.962
we have ourselves that
item out of the vector.

122
00:06:35.962 --> 00:06:41.360
So it's kind of good to have this notion
but there's a there's a reason why I'm

123
00:06:41.360 --> 00:06:47.256
saying all these things which is, notice
what's happening in this thing right here.

124
00:06:47.256 --> 00:06:51.604
For every single thing
that's stored on the heap,

125
00:06:51.604 --> 00:06:56.356
there was something on the stack,
so it's kinda good to

126
00:06:56.356 --> 00:07:01.020
know something from the stack
is pointing to the heap.

127
00:07:01.020 --> 00:07:04.619
And so this is kind of how
the magic of rust happens,

128
00:07:04.619 --> 00:07:09.140
is that as we clean up memory on
the stack, anything that has heap

129
00:07:09.140 --> 00:07:13.613
related memory can also be cleaned
up at the same time for free.

130
00:07:13.613 --> 00:07:17.038
This is why we have so
many rules around the borrow checker.

131
00:07:17.038 --> 00:07:20.944
Because if you just had references
everywhere and things were happening,

132
00:07:20.944 --> 00:07:24.540
you wouldn't know if something was
still pointing to a memory region

133
00:07:24.540 --> 00:07:25.905
that could be cleaned up.

134
00:07:25.905 --> 00:07:30.471
So that is why I've kind of explained it,
that there's all safe programs and then

135
00:07:30.471 --> 00:07:35.122
there's programs that rust can identify
as safe programs, and this is part of it.

136
00:07:35.122 --> 00:07:38.963
So this is one of the key takeaways is to
remember that everything is allocated both

137
00:07:38.963 --> 00:07:42.370
on, or anything that's allocated just
on the stack can be on the stack.

138
00:07:42.370 --> 00:07:46.164
Anything that's allocated on the heap
has something else on the stack.

139
00:07:46.164 --> 00:07:48.374
And so
what is the lifecycle of these items?

140
00:07:48.374 --> 00:07:49.704
How long do they live?

141
00:07:49.704 --> 00:07:54.303
Well, probably the simplest way to think
about it is that if you know any C or

142
00:07:54.303 --> 00:07:57.807
anything like that,
is that when the function returns,

143
00:07:57.807 --> 00:08:01.384
that stack pointer goes all
the way back to the beginning.

144
00:08:01.384 --> 00:08:03.507
So everything after the stack pointer,

145
00:08:03.507 --> 00:08:07.879
even though it may have stuff still in
memory, is just it's not considered valid,

146
00:08:07.879 --> 00:08:11.572
it's out because the next time we
call a function we may overwrite it.

147
00:08:11.572 --> 00:08:15.261
And so therefore, boom, it's gone so
you can't refer to it anymore.

148
00:08:15.261 --> 00:08:18.494
So that if you've ever used C and
you tried to return a pointer to like

149
00:08:18.494 --> 00:08:22.299
something you created within that
function, it usually warns you saying hey,

150
00:08:22.299 --> 00:08:25.080
by the way, you're returning
a pointer onto the stack and

151
00:08:25.080 --> 00:08:26.929
this thing's gonna be gone shortly.

152
00:08:26.929 --> 00:08:28.912
It's probably a bad plan.

153
00:08:28.912 --> 00:08:30.748
All right, we have a question over here.

154
00:08:30.748 --> 00:08:35.588
&gt;&gt; Why can't objects on heap point to
other objects on heap without having

155
00:08:35.588 --> 00:08:37.693
any stack item pointing to it?

156
00:08:37.693 --> 00:08:40.008
&gt;&gt; I mean, technically it still does.

157
00:08:40.008 --> 00:08:42.390
What I mean by that is,
what he's saying is,

158
00:08:42.390 --> 00:08:44.541
can you just have a veck avec have usize?

159
00:08:44.541 --> 00:08:45.906
You certainly can.

160
00:08:45.906 --> 00:08:47.245
You absolutely can.

161
00:08:47.245 --> 00:08:48.796
We're just still playing
the exact same thing.

162
00:08:48.796 --> 00:08:50.147
So let's just do it again.

163
00:08:50.147 --> 00:08:54.398
That means you'd have this vector, what's
in each one of these lines in this vector,

164
00:08:54.398 --> 00:08:56.145
a pointer, a length, a capacity,

165
00:08:56.145 --> 00:08:58.906
and that's pointing to another
place within the heap.

166
00:08:58.906 --> 00:09:00.968
This is pointing to another
place within the heap.

167
00:09:00.968 --> 00:09:03.693
This is pointing to another
place within the heap.

168
00:09:03.693 --> 00:09:06.799
It's still, if you trace it all back,
it's still right here.

169
00:09:06.799 --> 00:09:10.263
Something is still on
the stack at some point.

170
00:09:10.263 --> 00:09:12.876
And so someone owns the value.

171
00:09:12.876 --> 00:09:16.560
Someone has it so this is where
the ownership model comes in.

172
00:09:16.560 --> 00:09:22.285
One place owns the value, and other
places have references to those values.

173
00:09:22.285 --> 00:09:23.432
And so in this case,

174
00:09:23.432 --> 00:09:27.280
our little struct that's on the stack
is the owner of those values.

175
00:09:27.280 --> 00:09:30.202
No matter how many layers
deep you have vectors,

176
00:09:30.202 --> 00:09:34.273
there still can always be drawn
back to one place having ownership.

177
00:09:34.273 --> 00:09:38.262
And so this is kind of like just a, it's
a unique concept, you probably haven't

178
00:09:38.262 --> 00:09:42.090
thought a lot about when you're
programming in loosey-goosey languages.

179
00:09:42.090 --> 00:09:44.131
Is there any other questions about this?

180
00:09:44.131 --> 00:09:47.427
Now I'm obviously, I'm not a master,
I haven't written much for compilers and

181
00:09:47.427 --> 00:09:48.921
done that I did it way back in the day.

182
00:09:48.921 --> 00:09:51.856
So even my knowledge is
limited in this area, but

183
00:09:51.856 --> 00:09:54.301
this is just like the general paradigm.

184
00:09:54.301 --> 00:09:56.475
If you can have it in your head,
it'll make things easy.

185
00:09:56.475 --> 00:09:59.305
And you can also understand
why the heap is slow,

186
00:09:59.305 --> 00:10:01.453
cuz where do you allocate memory at?

187
00:10:01.453 --> 00:10:05.692
Well, you gonna ask the operating system,
the operating system's gonna hand you back

188
00:10:05.692 --> 00:10:08.277
like 4K worth of memory or
whatever the page size is.

189
00:10:08.277 --> 00:10:09.442
Then you're gonna have to,

190
00:10:09.442 --> 00:10:12.169
the underlying allocator's gonna
have to divvy out that memory.

191
00:10:12.169 --> 00:10:14.593
Well, how does it know
what to reclaim back?

192
00:10:14.593 --> 00:10:19.312
A lot of math is involved, where
the stacks just like at 8, at 8 remove 16,

193
00:10:19.312 --> 00:10:19.823
right?

194
00:10:19.823 --> 00:10:20.992
It's like super fast.

195
00:10:20.992 --> 00:10:22.735
It's just simple addition and subtraction.

196
00:10:22.735 --> 00:10:24.438
That's why you get all the speed.

197
00:10:24.438 --> 00:10:27.393
This is where a lot of
the speed comes from,

198
00:10:27.393 --> 00:10:30.523
is keeping things on the stack,
super fast.

199
00:10:30.523 --> 00:10:34.804
&gt;&gt; When you move a value to a function,
does the value move inside the stack too?

200
00:10:34.804 --> 00:10:37.005
&gt;&gt; So that's what I don't know,
I don't know that answer but

201
00:10:37.005 --> 00:10:40.265
it's something I've been actually curious
about, I'm sure if you watch John

202
00:10:40.265 --> 00:10:42.928
on YouTube, I mean, I guarantee he
could probably give you an answer.

203
00:10:42.928 --> 00:10:47.688
But what they're saying is say you have
a stack pointer that's pointing here, and

204
00:10:47.688 --> 00:10:48.981
you create MyStruct.

205
00:10:48.981 --> 00:10:53.039
So it takes up some amount of memory,
whatever that is, then you call a function

206
00:10:53.039 --> 00:10:56.492
in which you pass in that struct,
you don't pass a reference to it,

207
00:10:56.492 --> 00:11:00.886
you don't pass a mutable reference to it,
you actually give the function the value.

208
00:11:00.886 --> 00:11:02.105
This is called moving.

209
00:11:02.105 --> 00:11:04.147
And we're gonna we're
about to go over this.

210
00:11:04.147 --> 00:11:05.505
Who, where does that go?

211
00:11:05.505 --> 00:11:07.432
Does that go into the parameter section?

212
00:11:07.432 --> 00:11:08.848
I actually don't know.

213
00:11:08.848 --> 00:11:11.922
Does this, do we mem copy it over to here?

214
00:11:11.922 --> 00:11:13.550
That I don't know exactly what happens.

215
00:11:13.550 --> 00:11:17.731
My assumption is that we do mem copy it,
because when we return from the function,

216
00:11:17.731 --> 00:11:20.776
this could technically still
be valid memory or whatever.

217
00:11:20.776 --> 00:11:22.825
Maybe it stays, I don't know.

218
00:11:22.825 --> 00:11:25.965
I can't tell you the specifics
of how it works under the hood.

219
00:11:25.965 --> 00:11:29.655
&gt;&gt; If a vec is not mutable and
contains a stack variable,

220
00:11:29.655 --> 00:11:32.038
is it still allocated on the heap?

221
00:11:32.038 --> 00:11:37.494
&gt;&gt; So a vector cannot contain the stack
variable, when you put something into

222
00:11:37.494 --> 00:11:42.959
a vector, it's allocated on the heap,
it's not allocated on the stack.

223
00:11:42.959 --> 00:11:47.705
Now this may be a bit confusing cuz
you can technically create a vector of

224
00:11:47.705 --> 00:11:50.328
references to something on the stack.

225
00:11:50.328 --> 00:11:55.318
The thing is is that a reference is just
a system wide number that's all it is, so

226
00:11:55.318 --> 00:12:00.158
64 bit, it's just a 64 bit number that
represents some place in memory so

227
00:12:00.158 --> 00:12:02.040
those are stored on the heap.

228
00:12:02.040 --> 00:12:05.975
They're just followed through back to
wherever, so you could imagine you

229
00:12:05.975 --> 00:12:09.860
could create something like that where
you actually had MyStruck usize.

230
00:12:09.860 --> 00:12:14.867
And you have a let item = MyStruct,

231
00:12:17.368 --> 00:12:22.567
Let items = a vec of MyStruct,
a reference.

232
00:12:22.567 --> 00:12:24.186
So it's only references that I'm storing.

233
00:12:24.186 --> 00:12:27.836
So those references will be stored on
the heap, but the structs won't be.

234
00:12:27.836 --> 00:12:30.352
So I could have back item.

235
00:12:33.755 --> 00:12:37.240
So there you go, I am storing things but
it's the references that live so

236
00:12:37.240 --> 00:12:40.327
now we're getting into what is
called lifetimes, that means,

237
00:12:40.327 --> 00:12:44.101
there's a bunch of rules when you start
getting into this world because at this

238
00:12:44.101 --> 00:12:46.808
world you're trying to have
like maximum efficiency.

239
00:12:46.808 --> 00:12:49.899
You're trying to keep as many
things as you can on the stack,

240
00:12:49.899 --> 00:12:54.277
but still, it can be a little bit, that's
where the trickiest part of Rust comes in.

241
00:12:54.277 --> 00:12:58.152
And during all my application
development that rarely happens,

242
00:12:58.152 --> 00:13:02.660
it's usually like library or more
fundamental stuff that you start getting

243
00:13:02.660 --> 00:13:04.994
into these more trickier situations.

244
00:13:04.994 --> 00:13:09.306
&gt;&gt; If a vector contains
a reference to stack variable,

245
00:13:09.306 --> 00:13:12.940
then which stack variable owns the vector?

246
00:13:12.940 --> 00:13:16.009
&gt;&gt; Well, so you might be thinking
of it a little bit wrong.

247
00:13:16.009 --> 00:13:17.983
So this item right here,

248
00:13:17.983 --> 00:13:22.877
this item owns a vector that
contains a series of references.

249
00:13:22.877 --> 00:13:26.972
It owns the reference which
is 64 bit number in my case.

250
00:13:28.991 --> 00:13:32.399
This thing owns the struct.

251
00:13:32.399 --> 00:13:36.918
So you can see this, I will literally go
over a way in which this airs very soon,

252
00:13:36.918 --> 00:13:40.548
but the simplest way to show it and
I'll just show it right now,

253
00:13:40.548 --> 00:13:41.803
is I can go like this.

254
00:13:41.803 --> 00:13:42.884
We're gonna go like that.

255
00:13:42.884 --> 00:13:43.993
So there we go.

256
00:13:43.993 --> 00:13:46.209
And I'm gonna do this, paste this in here.

257
00:13:46.209 --> 00:13:47.390
So this is a scope.

258
00:13:47.390 --> 00:13:49.075
So that means once we leave this,

259
00:13:49.075 --> 00:13:51.855
every variable created inside
there will be dropped.

260
00:13:51.855 --> 00:13:54.769
And I'm like this, items.push(item).

261
00:13:54.769 --> 00:13:59.130
So notice that we added
a reference right here.

262
00:13:59.130 --> 00:14:05.619
Everything is fine until outside of that,
we try to go, we do the that guy,

263
00:14:05.619 --> 00:14:10.469
whatever that thing's called,
and we try to print it.

264
00:14:10.469 --> 00:14:13.533
And, my goodness, here,
I'm gonna go like this.

265
00:14:13.533 --> 00:14:16.380
What a, just a letdown ending.

266
00:14:16.380 --> 00:14:19.338
I'm gonna derive debug, that just says,
hey, you can be pretty printed.

267
00:14:19.338 --> 00:14:20.971
So look what happens here.

268
00:14:20.971 --> 00:14:26.532
Rust has identified that this thing
does not live as long as that thing,

269
00:14:26.532 --> 00:14:31.257
it makes sense because this thing
lives all the way to here but

270
00:14:31.257 --> 00:14:34.518
what it holds on to only lives right here.

271
00:14:34.518 --> 00:14:37.285
And so let's say whoa, whoa,
whoa, whoa, you can't do that.

272
00:14:37.285 --> 00:14:42.103
But that's why also if I just simply
will say, take out this line,

273
00:14:42.103 --> 00:14:44.441
it's like, hey, it's good.

274
00:14:44.441 --> 00:14:48.136
Because right now,
item's lifetime last till right here.

275
00:14:48.136 --> 00:14:50.895
The things it's holding
onto last till right here.

276
00:14:50.895 --> 00:14:51.768
So it's the same thing.

277
00:14:51.768 --> 00:14:53.131
And we're kind of jumping
ahead a little bit.

278
00:14:53.131 --> 00:14:57.186
So I'm just gonna keep on going.

279
00:14:57.186 --> 00:14:58.130
It's kind of exciting.

280
00:14:58.130 --> 00:14:59.269
So it's time to do the borrow checker.

281
00:14:59.269 --> 00:15:01.462
We've kind of gone over
a lot of this stuff.

282
00:15:01.462 --> 00:15:06.285
You've heard me talk about value
references and mutable references and

283
00:15:06.285 --> 00:15:07.319
this last one.

284
00:15:07.319 --> 00:15:11.278
This is the value, item owns the value,

285
00:15:11.278 --> 00:15:15.828
the vector is the value,
items owns a vector.

286
00:15:15.828 --> 00:15:18.877
Items is getting pushed in a reference.

287
00:15:18.877 --> 00:15:23.260
Okay, so you kind of have to have these
like little things inside of your head

288
00:15:23.260 --> 00:15:26.476
setup, which is the value,
a reference to the value and

289
00:15:26.476 --> 00:15:29.715
a mutable reference to the value,
the right to mutate.

290
00:15:29.715 --> 00:15:33.442
So it's sometimes a little bit confusing,
but let's kind of, let's start seeing it.

291
00:15:33.442 --> 00:15:35.578
I think this will
hopefully help you a lot.

