WEBVTT

1
00:00:00.600 --> 00:00:02.597
You probably shouldn't actually
be impressed at this point,

2
00:00:02.597 --> 00:00:04.150
because we haven't done
anything awesome yet.

3
00:00:05.420 --> 00:00:07.960
Enums just haven't gotten fantastic yet.

4
00:00:07.960 --> 00:00:12.710
So this next example is
gonna get pretty exciting.

5
00:00:12.710 --> 00:00:14.360
Sorry, I've already gone over this point.

6
00:00:14.360 --> 00:00:16.840
This is me just saying, hey,
you could do the same thing in TypeScript.

7
00:00:16.840 --> 00:00:18.740
So I haven't really done
anything impressive.

8
00:00:18.740 --> 00:00:20.080
It just looks a little different.

9
00:00:20.080 --> 00:00:21.892
All right, so
you might get pretty offended here,

10
00:00:21.892 --> 00:00:23.970
because I'm gonna say something
mean about TypeScript.

11
00:00:23.970 --> 00:00:27.990
So I want everyone to breathe it out,
it's gonna happen.

12
00:00:27.990 --> 00:00:31.980
So what I want you to do is I want you
to create a custom type called Custom.

13
00:00:31.980 --> 00:00:34.930
So it's just gonna have two fields age,
that's a number so

14
00:00:34.930 --> 00:00:39.440
you guys can get started now, just to
kind of read this out and a name string.

15
00:00:39.440 --> 00:00:44.047
I want you to create a union type
of number, string, and custom and

16
00:00:44.047 --> 00:00:46.920
it's going to be called Item.

17
00:00:46.920 --> 00:00:50.914
Then I want you to create a method called
append that takes in a list of items and

18
00:00:50.914 --> 00:00:52.770
pushes, Hello Frontend Masters.

19
00:00:54.140 --> 00:00:57.647
Then I want you to create a list of Items
doesn't matter if it's empty or not, and

20
00:00:57.647 --> 00:00:59.380
then pass it to append.

21
00:00:59.380 --> 00:01:01.370
So I'll do that as you do that.

22
00:01:01.370 --> 00:01:03.630
So let's go back over to
our nice TypeScript file.

23
00:01:03.630 --> 00:01:04.690
I'm just going to delete everything.

24
00:01:04.690 --> 00:01:08.290
And so the first thing is let's
create our custom type, right?

25
00:01:08.290 --> 00:01:14.460
It should have an age, number,
and name string, fantastic.

26
00:01:14.460 --> 00:01:16.460
Okay, so we have our custom type.

27
00:01:16.460 --> 00:01:18.630
Now let's create our union type.

28
00:01:18.630 --> 00:01:24.920
So let's go down here and go type Item
equals number or string or custom.

29
00:01:24.920 --> 00:01:26.870
I worked once not too long ago at Netflix.

30
00:01:26.870 --> 00:01:31.293
I actually had a Mongo database that I had
to grab some real-time events out of and

31
00:01:31.293 --> 00:01:35.600
it had 150 different type events and
not a single discriminator on it.

32
00:01:35.600 --> 00:01:40.575
So I had, this was just a real part of my
life for union types in which I had to

33
00:01:40.575 --> 00:01:45.520
suss out property names to try to
type narrow into actual events.

34
00:01:45.520 --> 00:01:47.420
It was really painful.

35
00:01:47.420 --> 00:01:49.420
If I only had Rust,
I had to use TypeScript.

36
00:01:49.420 --> 00:01:51.985
I could have just used enums
to solve all my problems, but

37
00:01:51.985 --> 00:01:54.285
I just went through
the emotional ringer there.

38
00:01:54.285 --> 00:01:57.394
All right, so now let's create
a function called append, and

39
00:01:57.394 --> 00:01:59.795
it's going to take in a list of items.

40
00:01:59.795 --> 00:02:06.965
And it's going to mutate that
items with push.hello fem.

41
00:02:06.965 --> 00:02:12.190
Awesome, so now let's create a list
of items and let's pass it to append.

42
00:02:12.190 --> 00:02:14.205
So I'm gonna go cost items.

43
00:02:14.205 --> 00:02:18.044
I'm gonna just define it right here so
TypeScript knows and

44
00:02:18.044 --> 00:02:19.897
I'm gonna go append items.

45
00:02:19.897 --> 00:02:21.166
Everything's fine, right?

46
00:02:21.166 --> 00:02:29.474
We should be able to do this because
items are number or string or custom.

47
00:02:29.474 --> 00:02:32.267
So I'll even do a little
console.log (items) here.

48
00:02:32.267 --> 00:02:34.320
Yank that, put it right here.

49
00:02:34.320 --> 00:02:37.900
So we kind of have this little
double thing going on right here.

50
00:02:37.900 --> 00:02:40.380
And I can go over to npx ts-node.

51
00:02:40.380 --> 00:02:46.410
And when I execute it, you can see it went
from no items to having an item in it.

52
00:02:46.410 --> 00:02:49.980
Okay, pretty neat.

53
00:02:49.980 --> 00:02:52.304
Yeah, union types.

54
00:02:52.304 --> 00:02:55.670
All right, one more task.

55
00:02:55.670 --> 00:02:58.900
I want you to create a list of numbers and
I want you to try to pass it to append.

56
00:03:00.760 --> 00:03:07.643
So, const numbers is
gonna be a number array.

57
00:03:07.643 --> 00:03:09.386
And I'm gonna call append.

58
00:03:14.411 --> 00:03:16.930
Where's your god now, TypeScript?

59
00:03:16.930 --> 00:03:21.505
Why am I allowed to pass in an array of
numbers into something that clearly takes

60
00:03:21.505 --> 00:03:25.340
an array of items and
I'm pushing a string into it?

61
00:03:25.340 --> 00:03:26.608
Where's my complaints?

62
00:03:30.169 --> 00:03:33.010
I could take items right here.

63
00:03:35.986 --> 00:03:37.270
I could print out all of that.

64
00:03:37.270 --> 00:03:38.200
And look at that.

65
00:03:38.200 --> 00:03:40.600
My list of numbers has a string in it.

66
00:03:42.140 --> 00:03:43.890
What the heck?

67
00:03:43.890 --> 00:03:46.640
Isn't that emotionally
bruising just a little bit?

68
00:03:46.640 --> 00:03:49.051
Come on, okay, I care about it.

69
00:03:49.051 --> 00:03:51.830
But apparently no one else cares about it.

70
00:03:51.830 --> 00:03:52.730
Okay, so I hate that.

71
00:03:54.190 --> 00:03:57.087
Let's see how Rust handles it.

72
00:03:57.087 --> 00:03:59.470
Okay, we're going to do
the exact same thing.

73
00:03:59.470 --> 00:04:03.810
Let's create a struct called custom.

74
00:04:03.810 --> 00:04:05.520
Let's create a union type called Item.

75
00:04:06.520 --> 00:04:09.800
Let's create an append method
that takes in a list of Items.

76
00:04:09.800 --> 00:04:12.260
Let's add the string Hello Fem to it.

77
00:04:13.580 --> 00:04:16.156
And then in our main function,
let's create that list of Items and

78
00:04:16.156 --> 00:04:17.210
pass it to append.

79
00:04:17.210 --> 00:04:19.360
Okay, so we'll do it one at a time here.

80
00:04:19.360 --> 00:04:21.360
So I'm just gonna delete
everything inside of here.

81
00:04:21.360 --> 00:04:23.623
Create a new main function.

82
00:04:23.623 --> 00:04:24.740
All right, beautiful.

83
00:04:24.740 --> 00:04:27.350
So first, let's create our struct custom.

84
00:04:27.350 --> 00:04:31.680
Struct custom,
it's gonna have an age, usize.

85
00:04:31.680 --> 00:04:34.380
It would make no sense to have
a negative number for age.

86
00:04:34.380 --> 00:04:36.180
You can't live in the future like that.

87
00:04:36.180 --> 00:04:39.620
And then let's do name,
just capital S string.

88
00:04:39.620 --> 00:04:40.590
That makes sense, right?

89
00:04:40.590 --> 00:04:46.260
Okay, now we need to do the item,
a union type, right?

90
00:04:46.260 --> 00:04:47.930
Well, now we're gonna
use something beautiful.

91
00:04:47.930 --> 00:04:51.140
We're gonna use an enum to do this, what?

92
00:04:51.140 --> 00:04:54.870
All right, so we're gonna call it Item,
man, I'm just so excited.

93
00:04:54.870 --> 00:04:56.580
All right, I hope everyone's ready.

94
00:04:56.580 --> 00:04:58.585
So let's first start with the number case.

95
00:04:58.585 --> 00:04:59.595
So I'm gonna call it number.

96
00:04:59.595 --> 00:05:02.735
I'm gonna do a stubborn, do one of these.

97
00:05:02.735 --> 00:05:03.795
I know, what is that, a function?

98
00:05:03.795 --> 00:05:05.265
And I'm gonna say, usize.

99
00:05:07.055 --> 00:05:10.865
Okay, I'm gonna do it again and
I'm gonna do String.

100
00:05:10.865 --> 00:05:13.251
And inside of here, I'm gonna do String.

101
00:05:16.584 --> 00:05:21.231
And then I'm gonna go MyCustom,
inside of here I'm gonna have custom,

102
00:05:21.231 --> 00:05:23.984
the data type we just defined right there.

103
00:05:26.431 --> 00:05:29.896
Look at those guys, right there.

104
00:05:29.896 --> 00:05:34.350
Okay, so can anyone guess
what's happening right here?

105
00:05:37.632 --> 00:05:40.160
Our enums can have subtypes.

106
00:05:42.260 --> 00:05:45.430
And now it slowly should start expanding
your brain making you think, holy cow,

107
00:05:45.430 --> 00:05:46.550
what's happening?

108
00:05:46.550 --> 00:05:50.885
We've just added type discrimination in
a way in which there is no way to have

109
00:05:50.885 --> 00:05:53.210
a type discriminator.

110
00:05:53.210 --> 00:05:57.799
So this would be something that's
equivalent to wrapping every single one of

111
00:05:57.799 --> 00:06:02.176
these items in type number,
value number, type string, value string,

112
00:06:02.176 --> 00:06:05.050
type custom, value custom in TypeScript.

113
00:06:05.050 --> 00:06:10.580
And then doing a type discriminator on
it to see if it's actually that type.

114
00:06:10.580 --> 00:06:13.940
Then you'd have to do run time guards
of if type is equal to number,

115
00:06:13.940 --> 00:06:15.510
I know my value is now a number.

116
00:06:16.740 --> 00:06:19.367
And so we're doing that, but
we're doing this at a language level,

117
00:06:19.367 --> 00:06:20.510
which is pretty fantastic.

118
00:06:20.510 --> 00:06:23.571
Underneath the hood,
an enum is just a union type, and

119
00:06:23.571 --> 00:06:25.420
c is how you can think of it.

120
00:06:25.420 --> 00:06:29.836
So number is type zero and
it has a usize for its data value.

121
00:06:29.836 --> 00:06:33.838
The next one is type string or
one type string and

122
00:06:33.838 --> 00:06:37.655
then it has the string data structure for
it.

123
00:06:37.655 --> 00:06:42.560
The third one which is probably value two
has the custom data structure for it.

124
00:06:42.560 --> 00:06:45.836
And so an enum should be the size of
whatever your largest data type is

125
00:06:45.836 --> 00:06:46.930
underneath the hood.

126
00:06:46.930 --> 00:06:48.712
You don't really need to
know about the memory part,

127
00:06:48.712 --> 00:06:50.500
but that's what's happening
underneath the hood.

128
00:06:50.500 --> 00:06:54.510
And so it's doing all that magic for
you, if you've ever worked with C stuff.

129
00:06:54.510 --> 00:06:56.580
All right, so
let's create that append function.

130
00:06:56.580 --> 00:06:59.612
So append is gonna need to take in items,

131
00:06:59.612 --> 00:07:05.430
which is gona be a mutable reference to
a Vec of Item, right, a list of items.

132
00:07:05.430 --> 00:07:07.200
We need them mutated.

133
00:07:07.200 --> 00:07:10.260
So we have to have a mutable reference,
it's very important.

134
00:07:11.350 --> 00:07:13.720
And I'm gonna keep on
saying mutable like that.

135
00:07:13.720 --> 00:07:14.436
Makes it more fun.

136
00:07:14.436 --> 00:07:17.870
All right, so items.push.

137
00:07:17.870 --> 00:07:21.320
Now notice I cannot go like this,
Hello Frontend Masters.

138
00:07:21.320 --> 00:07:22.130
Look what it says.

139
00:07:22.130 --> 00:07:25.037
It says, whoa, whoa, whoa, whoa,
whoa, whoa, whoa, whoa, whoa.

140
00:07:25.037 --> 00:07:29.040
You can't just hand me
a reference to a stir.

141
00:07:29.040 --> 00:07:31.380
You have to hand me an item, okay?

142
00:07:31.380 --> 00:07:34.214
So I'm gonna have to go like this and

143
00:07:34.214 --> 00:07:39.892
I'm gonna have to go Item::String and
then I can pass in, hello Fem.

144
00:07:39.892 --> 00:07:40.847
Now of course,

145
00:07:40.847 --> 00:07:46.340
it's gonna do one more complaint because
you're passing in a stir, not a string.

146
00:07:46.340 --> 00:07:47.520
I didn't want to do lifetimes.

147
00:07:47.520 --> 00:07:49.080
So this is me avoiding lifetimes.

148
00:07:49.080 --> 00:07:51.401
So at the end of your
string you can call into.

149
00:07:51.401 --> 00:07:53.475
We'll actually get into into here shortly.

150
00:07:53.475 --> 00:07:55.309
Into is just a trait that says, hey,

151
00:07:55.309 --> 00:07:58.330
I want you to convert this
thing into the right type.

152
00:07:58.330 --> 00:07:59.860
And don't worry, you know the type.

153
00:07:59.860 --> 00:08:01.470
It knows it's supposed to be a string.

154
00:08:01.470 --> 00:08:03.713
It's a stir, a stir can become a string or

155
00:08:03.713 --> 00:08:07.444
you could call something like
to_string on it and a create a string.

156
00:08:07.444 --> 00:08:10.484
Because remember a string is
something that exists on the heap so

157
00:08:10.484 --> 00:08:12.354
we need our own version, our own copy.

158
00:08:12.354 --> 00:08:16.448
So when I call to_string it creates
its own copy of hello, Fem.

159
00:08:16.448 --> 00:08:21.286
So that means if I go like this
let items which is gonna be

160
00:08:21.286 --> 00:08:25.191
a Vec of item equals veck bang,
there we go.

161
00:08:25.191 --> 00:08:29.660
I can now call append with
a mutable reference to items.

162
00:08:29.660 --> 00:08:31.508
Of course, it's going to complain,

163
00:08:31.508 --> 00:08:35.160
I can't borrow items as mutable
cuz you never said it was mutable.

164
00:08:35.160 --> 00:08:36.280
So let's jump up here.

165
00:08:36.280 --> 00:08:37.970
I've now stated it's mutable.

166
00:08:37.970 --> 00:08:40.870
We can now pass it to append, it works.

167
00:08:40.870 --> 00:08:46.700
Now one thing I can't just go off and
do is I can't just go off and

168
00:08:46.700 --> 00:08:51.222
say have a Vec of usize and
call append, why not?

169
00:08:51.222 --> 00:08:55.160
I literally cannot express the same
thing that TypeScript can.

170
00:08:56.330 --> 00:09:01.010
The reason being is that a discriminated
union has been built for me.

171
00:09:01.010 --> 00:09:04.700
Whereas in TypeScript land, it's just
like it could be one of these types.

172
00:09:04.700 --> 00:09:08.781
So we can't have the same level as
expression, but this level of expression

173
00:09:08.781 --> 00:09:12.830
allows for lists to be different types,
but all in one list together.

174
00:09:12.830 --> 00:09:13.790
And then gives you this safety.

175
00:09:13.790 --> 00:09:17.450
You could just literally never run into
a situation where you don't have items

176
00:09:17.450 --> 00:09:18.640
inside of a list.

177
00:09:18.640 --> 00:09:22.738
Whereas in this other one, you could have
numbers that accidentally have strings or

178
00:09:22.738 --> 00:09:26.330
items or whatever because of how
TypeScript works versus how Rust works.

179
00:09:26.330 --> 00:09:28.625
Pretty cool, right?

180
00:09:28.625 --> 00:09:30.627
Okay, so
now we're starting to get pretty cool.

181
00:09:30.627 --> 00:09:34.470
Come on, tell me this is where it's
starting to get pretty cool, right?

182
00:09:34.470 --> 00:09:37.890
Well, this means you don't have to do any
more of this type of x equals number.

183
00:09:37.890 --> 00:09:41.450
You don't have to do a property check
to try to type narrow yourself down.

184
00:09:41.450 --> 00:09:43.180
You have match statements.

185
00:09:43.180 --> 00:09:46.038
You have pattern matching to match
yourself into what you want it to be.

186
00:09:46.038 --> 00:09:48.960
Pretty nice, okay.

187
00:09:48.960 --> 00:09:50.860
So there's no more magic type checking.

188
00:09:50.860 --> 00:09:52.160
I like that a whole bunch.

189
00:09:52.160 --> 00:09:53.480
Again, I already mentioned this.

190
00:09:53.480 --> 00:09:57.430
We technically could have got around this
in TypeScript land by creating a wrapper

191
00:09:57.430 --> 00:10:01.600
type, a box value, to be able to
discriminate against the three.

192
00:10:01.600 --> 00:10:04.270
And so let's talk a little bit
more about pattern matching.

193
00:10:04.270 --> 00:10:07.976
I just want to make sure I have
this all in here because I don't

194
00:10:07.976 --> 00:10:11.780
remember how much exactly I covered it but
right here.

195
00:10:11.780 --> 00:10:16.006
So if I create an item number with
the value 5 in it, I can match on foo and

196
00:10:16.006 --> 00:10:20.161
handle each one of the different cases,
pulling out the inner value or

197
00:10:20.161 --> 00:10:21.420
the inner type.

198
00:10:21.420 --> 00:10:22.840
So this is a usize.

199
00:10:22.840 --> 00:10:24.110
This is a string.

200
00:10:24.110 --> 00:10:25.840
This is a custom.

201
00:10:25.840 --> 00:10:28.550
Because I've pattern matched I'm
grabbing out the inner value.

202
00:10:28.550 --> 00:10:30.606
You can think of it like a lift operator.

203
00:10:30.606 --> 00:10:34.390
I'm lifting out the value or the sub type.

204
00:10:34.390 --> 00:10:37.870
With match you can just have
only the one you care about,

205
00:10:37.870 --> 00:10:40.030
and then ignore everything else.

206
00:10:41.380 --> 00:10:45.590
Underscore just means every
other possible pattern, do this.

207
00:10:45.590 --> 00:10:46.820
It's kind of like a default case.

208
00:10:47.940 --> 00:10:51.110
You can also do pattern matching
in the pattern matching.

209
00:10:51.110 --> 00:10:53.050
Yo dawg,
I heard you like pattern matching.

210
00:10:53.050 --> 00:10:55.890
So I can do, hey,
I'm gonna pattern match a custom.

211
00:10:55.890 --> 00:10:59.841
And then that inner type, I'm gonna
pattern match the struct Custom and

212
00:10:59.841 --> 00:11:01.470
only grab the age out.

213
00:11:01.470 --> 00:11:03.679
So now I have reference to just age.

214
00:11:03.679 --> 00:11:04.890
It's pretty cool.

215
00:11:04.890 --> 00:11:09.161
So you can just keep on pattern matching
as much as you need to do and then you get

216
00:11:09.161 --> 00:11:14.300
the most optimal highly compiler optimized
code out that just refers to age.

217
00:11:14.300 --> 00:11:16.168
That's pretty good.
You don't have to do all that checking

218
00:11:16.168 --> 00:11:18.897
in if statements, which is a runtime
costs, or as this thing's probably

219
00:11:18.897 --> 00:11:21.200
just some sweet offset that's
happening inside of a struct.

220
00:11:22.520 --> 00:11:25.551
Lastly, you can do this kind of
thing where you do an if statement,

221
00:11:25.551 --> 00:11:27.077
even inside your pattern match.

222
00:11:27.077 --> 00:11:31.595
So I can pattern match custom if the
customer's name is Ricky, I can go hey,

223
00:11:31.595 --> 00:11:34.913
Ricky, or
if the customer's age is greater than 33,

224
00:11:34.913 --> 00:11:37.615
I can tell right away
you like Nintendo 64.

225
00:11:37.615 --> 00:11:40.790
But if your age is less than 30,
you probably love Xbox.

226
00:11:40.790 --> 00:11:44.908
And so I can do these kind of like if
statements on addition to the match

227
00:11:44.908 --> 00:11:45.690
statement.

228
00:11:45.690 --> 00:11:49.950
And then in the end, it's gonna tell
me I haven't covered every case yet.

229
00:11:49.950 --> 00:11:52.750
So I have to provide a default case.

230
00:11:52.750 --> 00:11:55.105
So it's pretty cool what you can
do with pattern matching and

231
00:11:55.105 --> 00:11:56.640
then even what you can combine with it.

232
00:11:56.640 --> 00:11:58.460
It allows for pretty cool stuff.

233
00:11:58.460 --> 00:12:00.793
One really cool one is
if you have a vector and

234
00:12:00.793 --> 00:12:04.260
you want to be able to grab the first and
last element out of it, but

235
00:12:04.260 --> 00:12:08.280
it may be empty, it may have one item,
it may have more than one item.

236
00:12:08.280 --> 00:12:12.099
You can actually pattern match first and
last, and so only first and

237
00:12:12.099 --> 00:12:13.370
last that exist.

238
00:12:13.370 --> 00:12:16.170
You can grab those two out and the rest
cases you don't wanna handle anything.

239
00:12:16.170 --> 00:12:18.200
There's like a lot of super cool.

240
00:12:18.200 --> 00:12:21.489
There's so many ways you can solve
problems with pattern matching.

241
00:12:21.489 --> 00:12:22.961
I feel emotional about.

242
00:12:22.961 --> 00:12:24.330
I don't even know all the things.

243
00:12:24.330 --> 00:12:25.430
All right, do we have any questions?

244
00:12:27.190 --> 00:12:28.040
Speak up.

245
00:12:28.040 --> 00:12:29.650
&gt;&gt; Yeah, one quick question.

246
00:12:29.650 --> 00:12:33.794
If you scroll up the pattern matching,
does it always have to be an expression

247
00:12:33.794 --> 00:12:38.080
kind of written out or could you do
like call function to match the pattern?

248
00:12:38.080 --> 00:12:39.510
&gt;&gt; No, it has to be an expression
that's written out.

249
00:12:39.510 --> 00:12:42.490
It has to be, it's a static thing
because it's compiled at this point.

250
00:12:42.490 --> 00:12:47.480
So again, if you don't know anything about
what's happening underneath the hood or

251
00:12:47.480 --> 00:12:52.400
you haven't used C style unions, when we
create our little item, what's actually

252
00:12:52.400 --> 00:12:57.043
happening in memory is that there's
the first part is the type discriminator,

253
00:12:57.043 --> 00:12:59.260
the second part is the data.

254
00:12:59.260 --> 00:13:02.740
And so 0 usize, I always put a z there.

255
00:13:02.740 --> 00:13:07.421
1 is a string, which is a pointer,

256
00:13:09.732 --> 00:13:14.440
Length, capacity and then that thing,
this pointer goes off onto the heap.

257
00:13:14.440 --> 00:13:17.020
And then two, you're gonna have custom.

258
00:13:17.020 --> 00:13:21.112
Which is gonna be age, which is a usize
and then it's gonna have the name,

259
00:13:21.112 --> 00:13:25.600
which is gonna be the same thing pointer
length capacity also off on here.

260
00:13:25.600 --> 00:13:29.136
And so when you do pattern matching,

261
00:13:29.136 --> 00:13:35.068
your item custom line is pretty
much the same thing as saying,

262
00:13:35.068 --> 00:13:39.590
hey, when it's 2, go into this branch.

263
00:13:39.590 --> 00:13:40.340
So it's able to do that.

264
00:13:40.340 --> 00:13:43.440
So that's why you can't do a function,
because it can't compile that thing in.

265
00:13:43.440 --> 00:13:44.780
It can't, it's dynamic.

266
00:13:44.780 --> 00:13:47.708
And so you see the same thing with
switch statements, if I'm not mistaken,

267
00:13:47.708 --> 00:13:49.582
you can't have,
at least in a lot of languages,

268
00:13:49.582 --> 00:13:51.945
you can't have a dynamic item
within the switch statement.

269
00:13:51.945 --> 00:13:55.110
Because the switch statement is
meant to do a table offset into it.

270
00:13:55.110 --> 00:13:58.609
So it's supposed to be faster than an if
statement, a bunch of else ifs because it

271
00:13:58.609 --> 00:14:01.800
can just do a table offset,
that's why it's supposed to happen.

272
00:14:01.800 --> 00:14:04.309
Now whether or not that actually
happens like in the JavaScript land,

273
00:14:04.309 --> 00:14:05.040
I just have no idea.

