WEBVTT

1
00:00:00.180 --> 00:00:02.633
All right, so
let's do another small exercise.

2
00:00:02.633 --> 00:00:06.859
This is gonna take all of our knowledge
now, iterators, options, results, and

3
00:00:06.859 --> 00:00:08.031
we're gonna do this.

4
00:00:08.031 --> 00:00:13.511
So the first thing we're gonna do is
we're gonna actually create a TypeScript

5
00:00:13.511 --> 00:00:18.841
program that reads the first argument
passed into it, reads that as a file.

6
00:00:18.841 --> 00:00:21.250
It's gonna print out
each line in that file.

7
00:00:22.880 --> 00:00:23.626
Sounds good?

8
00:00:23.626 --> 00:00:27.978
All right, should be pretty easy, and
this is the file I want you to create,

9
00:00:27.978 --> 00:00:30.224
this right here, 1, 5, 9, 33.

10
00:00:30.224 --> 00:00:31.184
You can call it numbers,

11
00:00:31.184 --> 00:00:33.994
you can call whatever you want,
I'll probably just call mine numbers.

12
00:00:33.994 --> 00:00:37.403
So I'm just gonna copy and
paste this, 1, 5, 9, 33.

13
00:00:37.403 --> 00:00:41.345
I'm gonna create that,
numbers, paste it in,

14
00:00:41.345 --> 00:00:44.920
no extra new line, boom, looks so good.

15
00:00:44.920 --> 00:00:46.050
All right, so let's go back here,

16
00:00:46.050 --> 00:00:48.230
let's see the instructions
that I have set forth.

17
00:00:48.230 --> 00:00:50.705
So read the first argument
passed into the program.

18
00:00:50.705 --> 00:00:55.252
For those that don't know how to do that,
that's process.agrv, position [2],

19
00:00:55.252 --> 00:00:57.930
first argument into the program.

20
00:00:57.930 --> 00:01:01.329
Next, that first argument,
by the way, should be the name and

21
00:01:01.329 --> 00:01:03.074
path to the file we want to read.

22
00:01:03.074 --> 00:01:05.397
Then we're gonna read the file and
print out each line.

23
00:01:05.397 --> 00:01:07.161
And we're gonna do it line by line.

24
00:01:12.005 --> 00:01:16.610
So first, we gotta import fs from "fs",
stands for file system.

25
00:01:18.420 --> 00:01:20.896
Next, we're gonna wanna
get that file name, right?

26
00:01:20.896 --> 00:01:24.728
So process, my goodness, process.argv[2].

27
00:01:24.728 --> 00:01:30.058
It's argv[2] because it's node,
file, argument.

28
00:01:30.058 --> 00:01:32.850
Whereas with Rust,
it's executable argument.

29
00:01:32.850 --> 00:01:33.886
So you don't get the second one,

30
00:01:33.886 --> 00:01:35.810
you get the first one,
a little bit different, but anyways.

31
00:01:35.810 --> 00:01:37.078
So we got the file name.

32
00:01:37.078 --> 00:01:42.554
Next, let's go fs.readFileSync,
and pass in fileName and

33
00:01:42.554 --> 00:01:48.260
then do what we do best, which,
of course, is toString, bam.

34
00:01:48.260 --> 00:01:51.727
split new line, forEach,

35
00:01:51.727 --> 00:01:56.860
console.log(line), look at that.

36
00:01:58.060 --> 00:02:02.226
Whoopsie daisies,
we gotta probably make this, look at that.

37
00:02:02.226 --> 00:02:03.960
Cuz we have our TypeScript, so great.

38
00:02:03.960 --> 00:02:07.054
So this is one thing we did enable
all those extra options within our

39
00:02:07.054 --> 00:02:09.374
TypeScript TsConfig, so
if you didn't do that,

40
00:02:09.374 --> 00:02:11.630
you wouldn't get this error right now.

41
00:02:11.630 --> 00:02:15.097
But since I enabled even
undefined checks on array checks,

42
00:02:15.097 --> 00:02:17.883
we get this beautiful
little thing right here.

43
00:02:17.883 --> 00:02:19.735
So that's fantastic, right?

44
00:02:19.735 --> 00:02:24.458
So we can do something like,
if not (!fileName).

45
00:02:24.458 --> 00:02:28.110
Actually, hold on,
it kinda ruins the magic.

46
00:02:28.110 --> 00:02:32.950
Hold on, I'm gonna go back down here.

47
00:02:32.950 --> 00:02:35.615
I had a whole great point here,
so I'm just gonna go like this.

48
00:02:35.615 --> 00:02:38.348
Just put that back to here,
isn't that how most people do anyways?

49
00:02:38.348 --> 00:02:39.954
There we go,
look at how beautiful that is.

50
00:02:39.954 --> 00:02:42.975
There's no errors,
we're using TypeScript, all right, okay.

51
00:02:42.975 --> 00:02:46.462
Do not pay attention to the man
behind the mirror right now.

52
00:02:46.462 --> 00:02:51.872
So I'm gonna go like this, npx ts-node,
let's call it numbers, right?

53
00:02:51.872 --> 00:02:57.243
And, But

54
00:02:58.333 --> 00:03:03.889
whoopsies, we wanna go src/index.ts and
then pass in numbers.

55
00:03:03.889 --> 00:03:07.947
There we go, we got 1, 5, 9, and 33.

56
00:03:07.947 --> 00:03:10.120
Okay, fantastic.

57
00:03:10.120 --> 00:03:12.520
So hopefully,
everyone arrived to the same conclusion.

58
00:03:13.950 --> 00:03:16.726
And so let's do the exact same thing,
but this time,

59
00:03:16.726 --> 00:03:20.180
or before we do that, we already
kinda talked about this earlier,

60
00:03:20.180 --> 00:03:23.170
look at what I could
pass into the program.

61
00:03:23.170 --> 00:03:26.845
Did everybody properly handle
the error for readFileSync?

62
00:03:26.845 --> 00:03:27.960
I mean, I didn't.

63
00:03:29.230 --> 00:03:32.280
If we didn't have that one option on
that told us it could be undefined and

64
00:03:32.280 --> 00:03:34.630
we happen to have the most
strict TypeScript settings,

65
00:03:34.630 --> 00:03:36.786
did you handle the fact
that it could be undefined?

66
00:03:36.786 --> 00:03:39.523
I could just pass in nothing, right?

67
00:03:39.523 --> 00:03:43.641
That's a problem, it's kind of
a big problem here, which is that,

68
00:03:43.641 --> 00:03:48.800
we never got alerted to any of the things
we are doing wrong with TypeScript.

69
00:03:48.800 --> 00:03:53.215
So let's do the exact same thing in Rust,
except this time,

70
00:03:53.215 --> 00:03:58.237
this is just how you read the first
argument passed into the program,

71
00:03:58.237 --> 00:04:01.630
and this is how you read
a file just to a string.

72
00:04:01.630 --> 00:04:04.195
We're not gonna do anything efficient,
we don't care about efficiency right now,

73
00:04:04.195 --> 00:04:05.540
we're just doing it the easy way.

74
00:04:05.540 --> 00:04:08.675
So I'll program this with you,
we'll slow it down a little bit.

75
00:04:08.675 --> 00:04:12.920
All right, so let's remove that,
and so we can go like this.

76
00:04:12.920 --> 00:04:17.930
Let arg = std::env::args().

77
00:04:17.930 --> 00:04:21.893
Now, args, if you look at it,
it's actually just an iterator,

78
00:04:21.893 --> 00:04:25.690
you get to iterate over all
the arguments passed into it.

79
00:04:25.690 --> 00:04:31.550
So I can call something called nth, which
takes the nth item into the iterator.

80
00:04:31.550 --> 00:04:34.057
So this one just happens to be
giving me the first item or

81
00:04:34.057 --> 00:04:36.196
technically the second
item in the iterator.

82
00:04:36.196 --> 00:04:39.470
And let's see what the type is.

83
00:04:39.470 --> 00:04:43.920
So if we go over here and hover over arg,
does everyone have this, Option&lt;String&gt;?

84
00:04:43.920 --> 00:04:46.108
So right away,
it's forcing you to handle this,

85
00:04:46.108 --> 00:04:49.610
because Rust already knows that you may
not have two arguments being passed in.

86
00:04:49.610 --> 00:04:51.880
You may only have one,
the name of the program.

87
00:04:51.880 --> 00:04:54.340
So therefore,
we can use something called expect.

88
00:04:55.390 --> 00:04:58.152
So I'll go here and I'll go like this,

89
00:04:58.152 --> 00:05:02.024
expect("the file name to be passed in"),
right?

90
00:05:02.024 --> 00:05:07.213
Because our program should crash with
a reasonable message if it exists.

91
00:05:07.213 --> 00:05:10.931
So now, our arg is the right type,
and we have a nice crash message, so

92
00:05:10.931 --> 00:05:12.142
that's pretty cool.

93
00:05:12.142 --> 00:05:14.610
All right, I'm liking it right now.

94
00:05:14.610 --> 00:05:20.916
So let's do file now,
std::fs::read_to_string.

95
00:05:20.916 --> 00:05:22.451
And now, we can just pass in our arg.

96
00:05:22.451 --> 00:05:25.382
Really, we should probably
call that file_name,

97
00:05:25.382 --> 00:05:28.856
maybe a little bit more descriptive here,
don't you agree?

98
00:05:28.856 --> 00:05:30.759
And so now we can read it to string.

99
00:05:30.759 --> 00:05:33.395
All right, so what's the type on file?

100
00:05:33.395 --> 00:05:34.229
Can anyone guess?

101
00:05:34.229 --> 00:05:35.261
Does anyone know?

102
00:05:35.261 --> 00:05:37.151
Is anyone keeping up with me?

103
00:05:37.151 --> 00:05:38.981
&gt;&gt; Vector of strings?

104
00:05:38.981 --> 00:05:40.995
&gt;&gt; It's result of string?

105
00:05:40.995 --> 00:05:45.270
&gt;&gt; Boom, result of string,
because we're reading it just to a string.

106
00:05:45.270 --> 00:05:47.006
Remember, a vector and the string,

107
00:05:47.006 --> 00:05:50.145
they're kind of like the same type
when you really think about it.

108
00:05:50.145 --> 00:05:52.470
You have to really think about it for
a little bit.

109
00:05:52.470 --> 00:05:55.428
Both are dynamically grown things
that live on the heap, and

110
00:05:55.428 --> 00:05:57.400
which you can grow and add more stuff to.

111
00:05:57.400 --> 00:06:02.940
It's just a string, has UTF-8 slots
put in, whereas a vector is any type.

112
00:06:02.940 --> 00:06:05.770
So they're almost like the same thing
when you really think about it.

113
00:06:05.770 --> 00:06:08.066
You can actually convert
somewhat between them.

114
00:06:08.066 --> 00:06:10.680
We have this nice result string, so
we need to do something with this.

115
00:06:10.680 --> 00:06:11.692
Well, the reality is,

116
00:06:11.692 --> 00:06:14.890
if there's an error, we should probably
just crash the program, right?

117
00:06:14.890 --> 00:06:19.123
So expect ("unable to read
the file to string").

118
00:06:19.123 --> 00:06:19.870
Look at that.

119
00:06:19.870 --> 00:06:26.963
Oh-oh, my keyboard just died on one side,
went too fast, got a flat tire.

120
00:06:29.275 --> 00:06:31.280
All right, look at that.

121
00:06:31.280 --> 00:06:36.684
Who here builds simple programs and
actually handles all your errors?

122
00:06:36.684 --> 00:06:38.541
I expect no hands up.

123
00:06:38.541 --> 00:06:39.873
We all know we take shortcuts.

124
00:06:39.873 --> 00:06:41.200
Well, guess what?
You actually literally

125
00:06:41.200 --> 00:06:43.250
can't take a shortcut in Rust,
you can't do that.

126
00:06:43.250 --> 00:06:47.300
We've just handled all of the possible
error conditions that can go wrong in our

127
00:06:47.300 --> 00:06:49.307
program already, it's pretty cool.

128
00:06:49.307 --> 00:06:53.828
Hopefully you start to see the value
of the basic proposition of Rust.

129
00:06:53.828 --> 00:06:59.650
So now, we can just do
file.lines() for_each(|line|.

130
00:06:59.650 --> 00:07:05.381
We've done this a bunch of times at this
point, println!("{}, |line|)), all right?

131
00:07:05.381 --> 00:07:09.790
Look at that, I have just printed
out every single line right there.

132
00:07:09.790 --> 00:07:14.260
Pretty straightforward, so again,
lines is an iterator, it's not greedy.

133
00:07:14.260 --> 00:07:17.180
It's a pull-based, so I have to
pull out each line one at a time.

134
00:07:17.180 --> 00:07:19.557
And then for_each gets called
each time a line comes out.

135
00:07:19.557 --> 00:07:23.005
All right, so let's go back here and
let's just go cargo run.

136
00:07:23.005 --> 00:07:25.560
Of course,
cargo run is how you run a Rust program.

137
00:07:25.560 --> 00:07:29.280
And so when we run it,
look at that, we got a panic.

138
00:07:29.280 --> 00:07:30.682
And what's our panic say?

139
00:07:30.682 --> 00:07:34.340
Well, we can see right here,
the file name to be passed in.

140
00:07:34.340 --> 00:07:36.661
I didn't give a very good error,
but nonetheless,

141
00:07:36.661 --> 00:07:40.170
we kinda know what went wrong here,
I forgot to pass in the file name.

142
00:07:40.170 --> 00:07:43.456
So with cargo,
you have to do a little dash dash, and

143
00:07:43.456 --> 00:07:46.462
then pass in your file name,
I'll go numbers.

144
00:07:46.462 --> 00:07:50.562
The dash dash you've seen in other
programs, usually that just means pass

145
00:07:50.562 --> 00:07:54.660
these arguments into the program
that cargo is going to run.

146
00:07:54.660 --> 00:07:58.943
So there we go, 1, 5, 9, 33.

147
00:07:58.943 --> 00:08:03.293
Well, fantastic, so
if I put in a fake file, no such file or

148
00:08:03.293 --> 00:08:06.519
directory, unable to read string to file.

149
00:08:06.519 --> 00:08:10.407
So we not only see the underlying error,
which is unable to find the file,

150
00:08:10.407 --> 00:08:14.189
we see our nice pretty string error,
unable to read the file to string.

151
00:08:14.189 --> 00:08:18.208
All right, fantastic, we have all the
right stuff, we could fix this problem,

152
00:08:18.208 --> 00:08:19.460
we know what went wrong.

153
00:08:20.930 --> 00:08:21.853
So there we go.

154
00:08:21.853 --> 00:08:26.806
So discussion, real talk, what makes
Rust better or worse in this situation?

155
00:08:26.806 --> 00:08:29.230
What do you like or not like about it?

156
00:08:31.220 --> 00:08:32.967
Don't make me call on someone.

157
00:08:36.039 --> 00:08:40.080
&gt;&gt; I like that you discover errors
during development rather than runtime.

158
00:08:40.080 --> 00:08:43.202
&gt;&gt; Correct, so if you couldn't hear,
I don't know how the microphone situation

159
00:08:43.202 --> 00:08:46.100
is, you discover errors during
development as opposed during runtime.

160
00:08:46.100 --> 00:08:50.151
I think that is my biggest favorite
takeaway, which is you just always know

161
00:08:50.151 --> 00:08:54.690
that it's way easier to handle something
at compile time than production.

162
00:08:54.690 --> 00:08:57.319
It's way easier to handle
something at compile time than CI.

163
00:08:57.319 --> 00:09:00.059
It's way easier to handle it at pre-push.

164
00:09:00.059 --> 00:09:02.248
Each one, it just gets easier and
easier and easier, and

165
00:09:02.248 --> 00:09:03.900
I actually just scrolled all the way down.

166
00:09:05.400 --> 00:09:07.566
And so, let's see, where is discussion?

167
00:09:07.566 --> 00:09:08.950
There we go.

168
00:09:10.900 --> 00:09:12.678
I think that's the first one,
okay, there we go.

169
00:09:12.678 --> 00:09:14.650
So yeah, that's kind of what I like.

170
00:09:14.650 --> 00:09:17.940
What I like about TypeScript is
that I can just move super fast.

171
00:09:19.190 --> 00:09:23.880
But if something goes wrong,
the slowdown is significantly more.

172
00:09:23.880 --> 00:09:26.235
You have to kinda figure
out what is going wrong,

173
00:09:26.235 --> 00:09:28.310
whereas you're just gonna see it sooner.

174
00:09:28.310 --> 00:09:32.119
So you may slow down a little bit in
the beginning for a speed up in the end,

175
00:09:32.119 --> 00:09:35.640
versus a speed up in the beginning for
a slowdown in the end.

176
00:09:35.640 --> 00:09:37.663
So it's kind of where do
you wanna spend your slow?

177
00:09:37.663 --> 00:09:39.758
That's kind of how I tend
to think about things,,

178
00:09:39.758 --> 00:09:42.828
is that most programing languages,
most activities we do can be all done in

179
00:09:42.828 --> 00:09:46.580
about the same amount of time, it's just
where do you wanna spend the headache?

180
00:09:46.580 --> 00:09:50.911
For me, I'd rather spend it
pre-compile versus broad.

181
00:09:50.911 --> 00:09:54.719
Personal opinion, maybe I'm being a little
bit dramatic here, a little dramatic, but

182
00:09:54.719 --> 00:09:55.960
you get the idea.

183
00:09:55.960 --> 00:09:57.720
So let's add one more requirement.

184
00:09:57.720 --> 00:10:03.200
Let's only print out lines that are
numbers and lines that are not numbers.

185
00:10:03.200 --> 00:10:06.180
Let's print out line, not a number.

186
00:10:06.180 --> 00:10:09.330
So first, let's do it in TypeScript,
this should be pretty straightforward.

187
00:10:09.330 --> 00:10:10.409
I'm curious how people do it,

188
00:10:10.409 --> 00:10:13.320
cuz there's a couple of
different ways you can do this.

189
00:10:13.320 --> 00:10:17.515
So personally, how I would do it is I just
handle it within the forEach statement

190
00:10:17.515 --> 00:10:21.520
itself instead of doing a filter or
a map, because it's just, I mean,

191
00:10:21.520 --> 00:10:24.030
just adds more complexity in general.

192
00:10:24.030 --> 00:10:27.260
So I'll do something
along the lines of this.

193
00:10:27.260 --> 00:10:28.866
Let's see, we'll go like this.

194
00:10:28.866 --> 00:10:34.977
Let print = parseInt(line)

195
00:10:34.977 --> 00:10:38.739
if print isNaN,.

196
00:10:38.739 --> 00:10:40.490
Did you remember to do a NaN?

197
00:10:41.850 --> 00:10:43.645
Who remembered to do the NaN?

198
00:10:43.645 --> 00:10:48.355
If it is NaN, I want you to console.log,
or I guess we don't have to do that,

199
00:10:48.355 --> 00:10:50.463
we can just go const, there we go.

200
00:10:50.463 --> 00:10:51.707
We're gonna console.log.

201
00:10:51.707 --> 00:10:53.002
What did I say to log?

202
00:10:53.002 --> 00:10:54.326
Line not a number.

203
00:10:54.326 --> 00:10:57.894
Line not a number, right,
maybe I didn't even say that.

204
00:10:57.894 --> 00:11:02.983
else, whoopsie-daisies, we'll do print.

205
00:11:02.983 --> 00:11:05.208
There we go.

206
00:11:05.208 --> 00:11:08.057
Just kinda handle it there, I don't
really see a point of doing a map or

207
00:11:08.057 --> 00:11:09.280
anything like that.

208
00:11:09.280 --> 00:11:12.250
No need to read through an array
just to read through an array again.

209
00:11:12.250 --> 00:11:13.672
So good enough right here.

210
00:11:13.672 --> 00:11:16.780
And so when I execute it,
what happens when I execute this?

211
00:11:16.780 --> 00:11:20.565
Could anyone guess what
I'm gonna print out?

212
00:11:20.565 --> 00:11:24.810
Remember, the file is a list of numbers.

213
00:11:24.810 --> 00:11:26.551
&gt;&gt; Yeah, we shouldn't get the same stuff.

214
00:11:26.551 --> 00:11:30.983
&gt;&gt; Yeah, you're wrong, so
the fun part is that what's node for

215
00:11:30.983 --> 00:11:36.014
whatever reason, cuz how split works,
the last remaining new line,

216
00:11:36.014 --> 00:11:41.580
which is at the end of every single file,
actually gets its own empty string.

217
00:11:41.580 --> 00:11:43.801
So you may not realize
that was gonna happen,

218
00:11:43.801 --> 00:11:47.990
a lot of people kinda get caught off guard
with that last little one right there.

219
00:11:47.990 --> 00:11:51.340
It's kinda funny how it happens, but hey,
most people didn't see that one coming.

220
00:11:51.340 --> 00:11:52.553
All right, I didn't see it coming,

221
00:11:52.553 --> 00:11:54.955
it actually took me a while to figure
out what the heck was going on there.

222
00:11:54.955 --> 00:11:59.781
So if we do the exact same thing
with Rust, we can do this, but

223
00:11:59.781 --> 00:12:02.820
here, I think I put a nice little hey.

224
00:12:03.840 --> 00:12:06.959
So here's a little piece
of Rust knowledge,

225
00:12:06.959 --> 00:12:10.087
every string has a method
called parse on it.

226
00:12:10.087 --> 00:12:14.456
What parse calls depends on the type
it's being assigned to, and

227
00:12:14.456 --> 00:12:19.301
there's a trait you can implement or
an interface you can implement that

228
00:12:19.301 --> 00:12:24.630
allows you to override this method for
your type on a string, super cool.

229
00:12:24.630 --> 00:12:28.720
But that means we have to
have it specified somewhere.

230
00:12:28.720 --> 00:12:33.572
So either the variable needs to say,
hey, I'm a usize,

231
00:12:33.572 --> 00:12:37.312
parse, or
it needs to be specified here, or

232
00:12:37.312 --> 00:12:41.573
it needs to be specified
in the return statement.

233
00:12:41.573 --> 00:12:45.387
We need somewhere to tell us
what type are we parsing to,

234
00:12:45.387 --> 00:12:51.520
cuz then the compiler can figure out what
code to execute for us to do the parsing.

235
00:12:51.520 --> 00:12:52.726
Pretty straightforward, pretty nice.

236
00:12:52.726 --> 00:12:55.435
And one really nice part
is that every single type,

237
00:12:55.435 --> 00:12:57.640
there's only one parse method, parse.

238
00:12:57.640 --> 00:12:58.851
I don't have to know about parseInt.

239
00:12:58.851 --> 00:13:00.206
I don't have to know about parseFloat.

240
00:13:00.206 --> 00:13:02.528
I don't have to create
my own custom parse for

241
00:13:02.528 --> 00:13:04.738
every single string potential out there.

242
00:13:04.738 --> 00:13:07.217
It's just, there's a singular method.

243
00:13:07.217 --> 00:13:08.570
So let's do that now.

244
00:13:08.570 --> 00:13:12.472
So I'm gonna go like this,
I'm gonna go, let's see,

245
00:13:12.472 --> 00:13:17.885
we'll call it print again, = line.parse,
and I'm gonna call it a usize.

246
00:13:17.885 --> 00:13:20.770
All right, so what's going on here,
what's wrong here?

247
00:13:20.770 --> 00:13:25.290
Oh-oh, If you try to parse something,
it returns a result.

248
00:13:26.520 --> 00:13:30.110
Something goes wrong, right,
because if you try to parse an int,

249
00:13:30.110 --> 00:13:32.260
it may not be successful.

250
00:13:32.260 --> 00:13:36.203
And so instead of just letting NaN happen
by accident, it tells you upfront,

251
00:13:36.203 --> 00:13:38.582
this thing might not happen,
there is no NaN.

252
00:13:38.582 --> 00:13:41.675
So let's do a little pattern match,
how does that sound?

253
00:13:41.675 --> 00:13:47.008
So I can go, if let Some(value) =
line.parse, and I'll have to define

254
00:13:47.008 --> 00:13:52.528
this somewhere, so I'll use what is
referred to as the turbofish operator.

255
00:13:52.528 --> 00:13:56.369
There we go, we have this,
and what do we got here?

256
00:13:56.369 --> 00:13:59.848
Oop, that's a value,
that's an option, I have to do Ok.

257
00:13:59.848 --> 00:14:02.182
Ok is for errors, sum is for options.

258
00:14:02.182 --> 00:14:03.110
So there we go.

259
00:14:03.110 --> 00:14:10.106
I have just lifted out that value, I have
this, and now I can println the value,

260
00:14:10.106 --> 00:14:14.806
else, whoopsy-daisy,
I can bring this in and say,

261
00:14:14.806 --> 00:14:20.041
("Not a number", or
I think it is "Line not a number".

262
00:14:20.041 --> 00:14:24.150
And of course, it's a macro, there we go.

263
00:14:24.150 --> 00:14:27.599
Look at that, gave us something,
we handled the error up front,

264
00:14:27.599 --> 00:14:30.375
we did the right thing,
we had to do the right thing.

265
00:14:30.375 --> 00:14:34.119
We didn't have a choice, there's no
accidental forgetting about numbers

266
00:14:34.119 --> 00:14:37.020
becoming that favorite type of number,
undefined.

267
00:14:37.020 --> 00:14:41.920
And if I cargo run,
You get all the right things.

268
00:14:41.920 --> 00:14:44.674
You also don't get that last new line,
the empty string thing,

269
00:14:44.674 --> 00:14:46.140
cuz it just doesn't happen.

270
00:14:46.140 --> 00:14:49.720
But nonetheless, we got numbers,
we got numbers, we only printed numbers.

271
00:14:49.720 --> 00:14:53.521
If I were to go in here and jump into
numbers and just put in here foo and

272
00:14:53.521 --> 00:14:58.280
rerun it, we'll see that right in
the middle, everything happened, awesome.

273
00:14:58.280 --> 00:15:01.710
And the best part is we're still
just using iterators and enums.

274
00:15:01.710 --> 00:15:03.656
We haven't even actually
changed our types yet,

275
00:15:03.656 --> 00:15:05.970
we're still just using all the same thing.

276
00:15:05.970 --> 00:15:08.698
And so it just makes it a little
bit easier to always have the same

277
00:15:08.698 --> 00:15:09.376
mental model.

278
00:15:09.376 --> 00:15:12.493
You can use the same match statements,
you can use the same if statements,

279
00:15:12.493 --> 00:15:15.512
you can use the same pattern matching
techniques that you like the best,

280
00:15:15.512 --> 00:15:16.820
they're all just right here.

281
00:15:18.110 --> 00:15:20.597
All right, so
here's my basic case for Rust.

282
00:15:20.597 --> 00:15:22.847
In the simplest sense,
you always know where errors happen,

283
00:15:22.847 --> 00:15:26.170
you always know when undefined happens,
there is just no getting around that.

284
00:15:26.170 --> 00:15:28.961
Rust saves you from errors,
Rust saves you from options, but

285
00:15:28.961 --> 00:15:32.210
the one thing Rust doesn't save you
from is being a bad programmer.

286
00:15:32.210 --> 00:15:33.660
I'm sorry, we're all bad programmers.

287
00:15:33.660 --> 00:15:35.102
You can still leak memory in Rust,

288
00:15:35.102 --> 00:15:37.399
just put stuff into a map
until your program explodes.

289
00:15:37.399 --> 00:15:41.536
It's not hard to actually do the wrong
thing, that's just bad logic.

290
00:15:41.536 --> 00:15:45.250
But at least, we can be saved from things
that we should never have to be worried

291
00:15:45.250 --> 00:15:46.277
about to begin with.

