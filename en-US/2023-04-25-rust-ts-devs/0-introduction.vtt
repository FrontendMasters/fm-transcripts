WEBVTT

1
00:00:00.110 --> 00:00:01.300
Today, we're gonna be learning about Rust.

2
00:00:01.300 --> 00:00:03.400
I hope everyone's really excited about it.

3
00:00:03.400 --> 00:00:07.891
I've specifically tried to make
this the easiest transition

4
00:00:07.891 --> 00:00:10.120
from TypeScript to Rust.

5
00:00:10.120 --> 00:00:13.573
So a lot of these examples will be
using TypeScript as a foundation, so

6
00:00:13.573 --> 00:00:17.770
that way you can relate what you already
know to something you don't know.

7
00:00:17.770 --> 00:00:19.210
And here's the things we're
gonna be talking about.

8
00:00:19.210 --> 00:00:22.950
I know some of you will be disappointed by
the list, because no, there's no async,

9
00:00:22.950 --> 00:00:24.920
no, there's no lifetimes.

10
00:00:24.920 --> 00:00:27.815
Those are very hard to kinda fit
into such a short period of time, so

11
00:00:27.815 --> 00:00:30.100
we're just gonna try to
really get the foundation.

12
00:00:30.100 --> 00:00:33.911
The words that are confusing the first
time you hear them will be less confusing

13
00:00:33.911 --> 00:00:34.850
by the end.

14
00:00:34.850 --> 00:00:37.690
And by the end,
you should hopefully have the skills to

15
00:00:37.690 --> 00:00:42.540
google your way through a mid-sized
CLI application, something like that.

16
00:00:42.540 --> 00:00:48.380
Some assumptions I'm gonna make, I hope
that you don't take this offensively.

17
00:00:48.380 --> 00:00:49.390
You're a bad programmer.

18
00:00:49.390 --> 00:00:50.740
Don't worry, I'm a bad programmer.

19
00:00:50.740 --> 00:00:55.100
John Carmack, good programmer, also can
choke you out with Brazilian Jiu-Jitsu.

20
00:00:55.100 --> 00:00:57.204
I assume you can do TypeScript.

21
00:00:57.204 --> 00:01:00.300
Everyone in here I've already talked to,
they can do TypeScript.

22
00:01:00.300 --> 00:01:03.180
I'm looking for
someone that understands this right here.

23
00:01:03.180 --> 00:01:05.548
This is about the level
that I would expect,

24
00:01:05.548 --> 00:01:09.220
is that this shouldn't be very hard for
you to understand.

25
00:01:09.220 --> 00:01:13.378
This is just simply a promise that has
been exploded, grabbed all the parts and

26
00:01:13.378 --> 00:01:15.040
I'm returning it.

27
00:01:15.040 --> 00:01:18.178
And if you can understand how
this generic plays into this,

28
00:01:18.178 --> 00:01:20.010
we're looking pretty good then.

29
00:01:20.010 --> 00:01:22.680
Then you're at about
the right TypeScript level.

30
00:01:22.680 --> 00:01:27.330
We're gonna get just slightly more
complicated than that with Rust.

31
00:01:27.330 --> 00:01:30.460
All right, everyone feels good?

32
00:01:30.460 --> 00:01:35.272
Is this confusing to anybody,
other than why would you do that?

33
00:01:35.272 --> 00:01:38.502
Actually, I do this for an interview
question all the time, it's fantastic.

34
00:01:38.502 --> 00:01:40.130
All right, so why Rust?

35
00:01:40.130 --> 00:01:43.471
Well, there's a bunch of reasons,
but two are very important to me.

36
00:01:43.471 --> 00:01:44.890
Number one, ergonomics.

37
00:01:44.890 --> 00:01:45.970
Everyone loves that word.

38
00:01:45.970 --> 00:01:49.050
It's like the Steve Ballmer
chant of our generation.

39
00:01:49.050 --> 00:01:53.190
He wouldn't yell developers UDL, developer
ergonomics over and over again now.

40
00:01:53.190 --> 00:01:56.265
And so this may seem kind of
counterintuitive cuz everything you've

41
00:01:56.265 --> 00:01:59.100
heard about Rust is it's super,
super hard.

42
00:01:59.100 --> 00:02:00.109
Well, actually,

43
00:02:00.109 --> 00:02:04.397
it's one of those things that if you can
remember your first time programming and

44
00:02:04.397 --> 00:02:08.810
learning how to program, how
a function works was super, super hard.

45
00:02:08.810 --> 00:02:12.370
How classes work, it was super,
super hard, method, super, super hard.

46
00:02:12.370 --> 00:02:16.060
Maybe a for loop was kind of easier,
you can kinda logically walk through it.

47
00:02:16.060 --> 00:02:20.930
But anytime you have to learn something
kind of novel, it's always super hard, and

48
00:02:20.930 --> 00:02:24.498
Rust just has more novel things
in comparison to say something

49
00:02:24.498 --> 00:02:25.610
like TypeScript.

50
00:02:25.610 --> 00:02:29.860
TypeScript is a fairly easy language, so
you don't have too many hurdles to jump.

51
00:02:29.860 --> 00:02:34.504
Whereas Rust has more things to jump, but
once you've done it, there's things that

52
00:02:34.504 --> 00:02:39.210
are very easy about Rust that are just
extremely difficult in TypeScript to do.

53
00:02:39.210 --> 00:02:40.450
And so it's more expressive.

54
00:02:40.450 --> 00:02:43.550
It allows a different way
to look at the world.

55
00:02:43.550 --> 00:02:45.822
And that's really good to
kind of have in your head.

56
00:02:45.822 --> 00:02:50.939
And some really specific things is
specifying read-only versus mutation.

57
00:02:50.939 --> 00:02:54.430
JavaScript, or TypeScript specifically,
you say read-only.

58
00:02:54.430 --> 00:02:56.514
And read-only doesn't always
work if you don't know.

59
00:02:56.514 --> 00:03:00.255
If you have read-only properties and
you pass it to a function that will mutate

60
00:03:00.255 --> 00:03:04.563
those properties, TypeScript just says,
hey, that's okay cuz read-only properties

61
00:03:04.563 --> 00:03:08.328
don't exist, whereas with Rust, you
have to specify when you can mutate it.

62
00:03:08.328 --> 00:03:12.409
It's kind of a fundamental design decision
that's a little bit different which allows

63
00:03:12.409 --> 00:03:15.289
you to always think ahead where
you want to change something.

64
00:03:15.289 --> 00:03:18.536
That just means you're gonna be thinking
more and more about your program,

65
00:03:18.536 --> 00:03:20.590
you're making less and less mistakes.

66
00:03:20.590 --> 00:03:24.380
A good classic example is array.reverse,
it returns an array.

67
00:03:24.380 --> 00:03:28.620
So your initial thought is that it just
returned you a new array that's reversed.

68
00:03:28.620 --> 00:03:31.538
Well, joke's on you, it's just
returning you your own array, and

69
00:03:31.538 --> 00:03:35.114
it's reversed it in place, and you didn't
know until you've experienced calling

70
00:03:35.114 --> 00:03:37.640
that function, and
it's been reversed on you.

71
00:03:37.640 --> 00:03:41.846
Undefined and null versus option,
options, at first,

72
00:03:41.846 --> 00:03:46.550
are kind of annoying to work with,
why would you want options?

73
00:03:46.550 --> 00:03:50.036
Undefined, null, pretty easy,
but after some time,

74
00:03:50.036 --> 00:03:54.198
you realize how good an option is,
and how annoying undefined is.

75
00:03:54.198 --> 00:03:58.076
Lastly, I think this is the biggest one
for me in the ergonomic department,

76
00:03:58.076 --> 00:04:00.450
errors as values versus
errors being thrown.

77
00:04:00.450 --> 00:04:02.242
So JavaScript, you throw errors.

78
00:04:02.242 --> 00:04:06.628
But what's worse about JavaScript is that
you don't even know what functions throw

79
00:04:06.628 --> 00:04:07.130
errors.

80
00:04:07.130 --> 00:04:10.123
You know that 0.1% of always
failing code in production and

81
00:04:10.123 --> 00:04:11.655
no one knows why it's failing?

82
00:04:11.655 --> 00:04:14.705
Well, you can't know because no one
tells you where things can break.

83
00:04:14.705 --> 00:04:18.218
You just have to discover it
with passion and late nights,

84
00:04:18.218 --> 00:04:20.375
that is how you do with JavaScript.

85
00:04:20.375 --> 00:04:23.258
Whereas Rust,
it's gonna tell you before you program,

86
00:04:23.258 --> 00:04:26.994
this function has a possibility of
erroring, you need to think about it.

87
00:04:26.994 --> 00:04:33.881
But it doesn't have the whole if or equals
nil problem of go, does not equal nil.

88
00:04:33.881 --> 00:04:36.897
And then second one, skill gap, yes,
skill gap, what do I mean by this?

89
00:04:36.897 --> 00:04:38.500
Typescript is really, really simple.

90
00:04:38.500 --> 00:04:42.146
If you are already familiar with
programming, say you have learned Python,

91
00:04:42.146 --> 00:04:46.015
you've learned some other language, you
could learn pretty much enough to build

92
00:04:46.015 --> 00:04:49.120
anything of your same skill level
in TypeScript in an afternoon.

93
00:04:49.120 --> 00:04:51.025
It's not a complicated language.

94
00:04:51.025 --> 00:04:52.557
It may feel complicated.

95
00:04:52.557 --> 00:04:56.167
Long as you're not doing the complex
XState library stuff and

96
00:04:56.167 --> 00:05:00.760
you're just doing just application
programming, it's a simple language.

97
00:05:00.760 --> 00:05:04.104
There's not a lot to it, and so your
expressiveness is limited by what you know

98
00:05:04.104 --> 00:05:06.444
about it, and
there's just not a lot to know about it.

99
00:05:06.444 --> 00:05:09.246
Whereas Rust, there's a lot of
deep topics, things I still don't,

100
00:05:09.246 --> 00:05:11.440
I don't know how to do
procedural macros yet.

101
00:05:11.440 --> 00:05:14.606
There's a lot to the language
that is just immensely deep and

102
00:05:14.606 --> 00:05:16.855
you can do just the coolest
things with it.

103
00:05:16.855 --> 00:05:18.860
So for me, I really like that.

104
00:05:18.860 --> 00:05:21.298
I like something in which I
can invest more time into and

105
00:05:21.298 --> 00:05:22.950
learn new techniques to do things.

106
00:05:22.950 --> 00:05:26.281
I'm not just simply, well,
this is what I use, so

107
00:05:26.281 --> 00:05:28.928
now I gotta go find out ways to do things.

108
00:05:28.928 --> 00:05:29.580
And some things in
TypeScript are just hard.

109
00:05:29.580 --> 00:05:32.720
A good example would be untagged unions,
if you don't know what that means.

110
00:05:32.720 --> 00:05:34.402
So a string or a number,

111
00:05:34.402 --> 00:05:38.364
you have to do runtime type
guards to find out what it is.

112
00:05:38.364 --> 00:05:41.337
And that can be very frustrating if
you've ever ran into that kinda stuff,

113
00:05:41.337 --> 00:05:42.765
especially if it's really large.

114
00:05:42.765 --> 00:05:45.200
So my goals today are this.

115
00:05:45.200 --> 00:05:47.954
I wanna make sure that at the end of this,
you can just build or

116
00:05:47.954 --> 00:05:50.289
google your way to be able
to build an application.

117
00:05:50.289 --> 00:05:54.247
I think that's really important, because
I can't make you good at Rust in one day,

118
00:05:54.247 --> 00:05:56.494
it's a harder language
to get initially over.

119
00:05:56.494 --> 00:06:00.014
But I can at least define the words so
that when you see them again,

120
00:06:00.014 --> 00:06:03.485
you have a good idea what they mean and
it won't be so confusing.

121
00:06:03.485 --> 00:06:07.183
Cuz the first time I heard option,
the first time I used an option,

122
00:06:07.183 --> 00:06:08.900
the first time I used a result,

123
00:06:08.900 --> 00:06:13.346
or the way enums work in Rust, it was very
hard or complicated or unusual for me.

124
00:06:13.346 --> 00:06:17.372
And so it just takes a little bit longer
to kind of wiggle those things out.

125
00:06:17.372 --> 00:06:18.968
Here's all the things we won't cover.

126
00:06:18.968 --> 00:06:21.528
I'm not gonna cover
creating your own errors.

127
00:06:21.528 --> 00:06:24.966
Those small portion where we're actually
defining errors in our application,

128
00:06:24.966 --> 00:06:26.794
we're gonna use a library called anyhow.

129
00:06:26.794 --> 00:06:30.640
It just makes it super easy for
application code to create errors.

130
00:06:30.640 --> 00:06:34.901
We won't be doing any Wasm/UI stuff,
no async stuff, no smart pointers and

131
00:06:34.901 --> 00:06:36.420
interior mutability.

132
00:06:36.420 --> 00:06:39.702
I know,, $10 implementations,
but for you, it's like a $1 API.

133
00:06:39.702 --> 00:06:42.520
Very, very simple to use them, but
they are very actually complicated.

134
00:06:42.520 --> 00:06:47.105
No lifetimes, again lifetimes, they're
very hard to get to the point to show you

135
00:06:47.105 --> 00:06:50.090
something where you can
use them in a real sense.

136
00:06:50.090 --> 00:06:51.629
It's easy to show you a toy example.

137
00:06:51.629 --> 00:06:56.119
I could right now just show you a struct
that has a reference and has a lifetime,

138
00:06:56.119 --> 00:07:00.693
and yay, but it won't hit home unless if
we can get something that's worth it.

139
00:07:00.693 --> 00:07:04.475
So I couldn't come up with something
that is easy enough to get to, and so

140
00:07:04.475 --> 00:07:05.860
we just didn't do it.

141
00:07:05.860 --> 00:07:08.960
Macros, both procedural macros or
declarative macros,

142
00:07:08.960 --> 00:07:11.489
these are super awesome,
but at the same time,

143
00:07:11.489 --> 00:07:15.020
they're just too complicated to
try to fit into this time slot.

144
00:07:15.020 --> 00:07:17.250
So here's a cool example of one right now.

145
00:07:17.250 --> 00:07:19.950
Anything that has a bang in it,
that's a macro.

146
00:07:19.950 --> 00:07:22.826
So view bang, this is real code right now.

147
00:07:22.826 --> 00:07:27.220
Leptos has this, a couple other libraries
that work on the front-end have this,

148
00:07:27.220 --> 00:07:30.033
where you can write
effectively JSX inside of Rust.

149
00:07:30.033 --> 00:07:34.043
But here's the cool part, there's no
transpiler, there's no any of that,

150
00:07:34.043 --> 00:07:37.163
it just works, works with your LSP,
everything's great.

151
00:07:37.163 --> 00:07:41.425
That's because in Rust, macros are a first
class citizen, you use tokens and stuff.

152
00:07:41.425 --> 00:07:44.198
Not like the C ones,
if you're used to C, C is like,

153
00:07:44.198 --> 00:07:46.922
I'm just gonna effectively
do text replacement.

154
00:07:46.922 --> 00:07:51.338
Whereas this one is, I'm gonna do token
expression and manipulate them and

155
00:07:51.338 --> 00:07:52.857
build you out actual AST.

156
00:07:52.857 --> 00:07:54.180
And so it's super, super cool.

157
00:07:55.200 --> 00:07:58.940
Not a lot of fun and
I'm very, very bad at them.

158
00:07:58.940 --> 00:07:59.990
I didn't make that.

159
00:07:59.990 --> 00:08:00.650
Who am I?

160
00:08:00.650 --> 00:08:06.080
I am CEO, CEO, CEO, and CEO and
Chairmen of the board of TheStartup.

161
00:08:06.080 --> 00:08:09.410
Here's some pictures of my Twitch and
YouTube.

162
00:08:09.410 --> 00:08:12.361
I do a lot of that content, I think
that's probably what I'm best known for.

163
00:08:12.361 --> 00:08:16.875
I also work at Netflix, but I feel like
that's just not as cool as my YouTube or

164
00:08:16.875 --> 00:08:17.435
Twitch.

165
00:08:17.435 --> 00:08:18.327
And there you go.

