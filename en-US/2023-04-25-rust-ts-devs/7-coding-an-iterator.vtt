WEBVTT

1
00:00:00.160 --> 00:00:01.500
So we're gonna start coding now.

2
00:00:01.500 --> 00:00:03.130
This talking business, it's boring.

3
00:00:03.130 --> 00:00:05.360
We've been going at it for an hour.

4
00:00:05.360 --> 00:00:09.170
I personally think it's easier to learn
with your hands than with your eyes.

5
00:00:09.170 --> 00:00:11.740
And so
let's start learning with those hands.

6
00:00:11.740 --> 00:00:14.520
To begin with, there's two things
you need to understand with Rust.

7
00:00:14.520 --> 00:00:17.600
Two kind of fundamental things,
Iterators and Enums.

8
00:00:17.600 --> 00:00:19.080
I feel like this is a good place to start.

9
00:00:19.080 --> 00:00:20.933
A lot of people start
at the borrow checker,

10
00:00:20.933 --> 00:00:24.700
but then you have to have all these words
you've never heard before tossed at you.

11
00:00:24.700 --> 00:00:27.647
And they just feel confusing,
because you're probably thinking, well,

12
00:00:27.647 --> 00:00:29.360
I use iterators all
the time in TypeScript.

13
00:00:29.360 --> 00:00:30.410
What do you mean?

14
00:00:30.410 --> 00:00:32.530
And enums are horrible in TypeScript.

15
00:00:32.530 --> 00:00:33.600
Don't you know?

16
00:00:33.600 --> 00:00:37.083
Well, you're right if
you're in TypeScript land.

17
00:00:37.083 --> 00:00:41.720
You're wrong if you're in Rust land,
it's different.

18
00:00:41.720 --> 00:00:42.940
It's much, much different.

19
00:00:42.940 --> 00:00:45.540
And you don't use that many
iterators in TypeScript.

20
00:00:45.540 --> 00:00:48.950
Often, you iterate you
don't use iterators.

21
00:00:48.950 --> 00:00:51.240
There's a little bit
of a difference there.

22
00:00:51.240 --> 00:00:53.164
All right, so let's start with iterators.

23
00:00:53.164 --> 00:00:56.100
I think they probably have
the best analogy to TypeScript and

24
00:00:56.100 --> 00:00:57.837
I think we can all understand this.

25
00:00:57.837 --> 00:01:02.520
So first let me give you just a quick
little brief introduction just so

26
00:01:02.520 --> 00:01:04.789
you can kind of see what happens.

27
00:01:04.789 --> 00:01:07.542
So often if you have
something like a vector,

28
00:01:07.542 --> 00:01:10.880
remember that's just a list,
and it's 1, 2, 3.

29
00:01:10.880 --> 00:01:17.070
An iterator is a separate data structure
that can walk through that data structure.

30
00:01:17.070 --> 00:01:20.641
So it doesn't really matter what
the collection is, if there is an order,

31
00:01:20.641 --> 00:01:22.240
an iterator can walk through it.

32
00:01:22.240 --> 00:01:24.577
So you can imagine a graph if you're
familiar with their data structures

33
00:01:24.577 --> 00:01:25.620
and algorithms.

34
00:01:25.620 --> 00:01:29.880
A graph, a breadth-first search could also
be an iterator that just walks through it.

35
00:01:29.880 --> 00:01:32.980
So every time you call next,
you get the next step in the graph.

36
00:01:32.980 --> 00:01:37.114
So an iterator here, you could imagine,
would have some sort of pointer back to

37
00:01:37.114 --> 00:01:41.130
this thing, and it would probably
have something like an index.

38
00:01:41.130 --> 00:01:43.220
Like, where am I at at this point?

39
00:01:43.220 --> 00:01:48.970
And then you, having a reference to this
iterator, can call something like .next.

40
00:01:48.970 --> 00:01:51.520
And this will just give
me the next value out.

41
00:01:51.520 --> 00:01:52.890
That's really what an iterator is.

42
00:01:52.890 --> 00:01:55.710
I think in JavaScript if I'm not mistaken,
I could be wrong.

43
00:01:55.710 --> 00:02:01.020
There is like a hasValue or
there's a done somewhere.

44
00:02:01.020 --> 00:02:02.360
It has to tell you when it's done.

45
00:02:02.360 --> 00:02:05.730
It's a little bit different in Rust,
it goes a little bit differently,

46
00:02:05.730 --> 00:02:09.560
they just have next and you know when it's
done by the way it is just like an Aspen.

47
00:02:09.560 --> 00:02:11.345
You know what it is by the way it is.

48
00:02:11.345 --> 00:02:12.680
Trust me, it'll make sense.

49
00:02:12.680 --> 00:02:15.390
It's a good joke, but
I realize it's not that funny right now.

50
00:02:15.390 --> 00:02:15.970
Makes me feel bad.

51
00:02:15.970 --> 00:02:19.742
All right, so
I think the easiest transition for

52
00:02:19.742 --> 00:02:23.380
iterators is to use .map on an array.

53
00:02:23.380 --> 00:02:28.260
So people probably typically think
of .map on an array as an iterator.

54
00:02:28.260 --> 00:02:32.370
It's not, it iterates and
produces a new array, but it's similar.

55
00:02:32.370 --> 00:02:33.740
But it's completely
different at the same time.

56
00:02:33.740 --> 00:02:35.960
So let's start doing something with that.

57
00:02:35.960 --> 00:02:38.090
So let's do a quick example in TypeScript.

58
00:02:38.090 --> 00:02:40.450
I want you guys right now to
write a little quick script.

59
00:02:40.450 --> 00:02:46.377
If I were you, I would just simply inside
the source folder, have like index.ts and

60
00:02:46.377 --> 00:02:51.069
then you'll have your index.ts and
you'll have your main.rs.

61
00:02:51.069 --> 00:02:53.879
Main.rs is analogous to index.ts.

62
00:02:53.879 --> 00:02:55.737
Pretty much the same thing.

63
00:02:55.737 --> 00:02:59.611
All right, and then let me just
erase these things, there we go.

64
00:02:59.611 --> 00:03:03.707
And so
I want you to create a list with 1, 2, 3,

65
00:03:03.707 --> 00:03:07.623
do a map that adds 1 and
then print out the list.

66
00:03:11.872 --> 00:03:16.360
I hope everyone had the chance to
create this beautiful piece of code.

67
00:03:16.360 --> 00:03:17.950
Let me just create it for
you really, really quickly.

68
00:03:17.950 --> 00:03:18.890
I'm gonna jump in here.

69
00:03:18.890 --> 00:03:20.400
We're in index.ts.

70
00:03:20.400 --> 00:03:22.820
I'm gonna go const.

71
00:03:22.820 --> 00:03:26.886
We'll just call it foo equals 1, 2, 3.

72
00:03:26.886 --> 00:03:34.340
And then I'll go .map x, x plus one,
and then do a console.log(foo).

73
00:03:34.340 --> 00:03:35.650
There we go.

74
00:03:35.650 --> 00:03:38.740
I assume people probably wrote
very similar code at this point.

75
00:03:38.740 --> 00:03:41.130
Maybe you put it somewhere else.

76
00:03:41.130 --> 00:03:42.800
Let's make sure that I'm on the same list.

77
00:03:42.800 --> 00:03:44.040
Look at that.

78
00:03:44.040 --> 00:03:45.900
And then to make sure you can run it.

79
00:03:45.900 --> 00:03:47.960
Run it once because it'll be good
if you can always run everything.

80
00:03:47.960 --> 00:03:54.500
So I'll go npx ts-node source/index,
there you go, look at that.

81
00:03:54.500 --> 00:03:56.280
It takes a second 2, 3, 4.

82
00:03:56.280 --> 00:03:57.320
I am great success.

83
00:03:57.320 --> 00:03:58.280
Did you guys great success?

84
00:03:58.280 --> 00:04:00.387
Did you get 2, 3, 4?

85
00:04:00.387 --> 00:04:04.634
If you didn't get 2, 3, 4,
well, you got to get 2, 3, 4.

86
00:04:04.634 --> 00:04:07.890
All right, so
we're gonna do the exact same thing.

87
00:04:07.890 --> 00:04:09.410
But we're gonna do it in Rust.

88
00:04:09.410 --> 00:04:13.019
Now, you guys probably forgot
a lot of the syntax, but remember,

89
00:04:13.019 --> 00:04:14.510
this is how closures look.

90
00:04:16.650 --> 00:04:18.260
They look just like that.

91
00:04:18.260 --> 00:04:23.760
And remember you define a vector
by doing this vec bang brackets.

92
00:04:23.760 --> 00:04:25.590
I want you to try to write it.

93
00:04:25.590 --> 00:04:28.346
I know you haven't
written any Rust at all,

94
00:04:28.346 --> 00:04:31.840
go to the main function in source/main.rs.

95
00:04:31.840 --> 00:04:36.763
And start off define a vector, you're
gonna need to call .iter which I put

96
00:04:36.763 --> 00:04:40.590
right here that creates
it into a nice iterator.

97
00:04:40.590 --> 00:04:42.381
And then you're gonna map it.

98
00:04:42.381 --> 00:04:45.935
But then you're gonna probably
run into a problem, which is,

99
00:04:45.935 --> 00:04:49.164
how the heck do you get it into
something that I can print?

100
00:04:49.164 --> 00:04:53.727
So there'll be a .collect method,
just see how far you can get.

101
00:04:53.727 --> 00:04:54.560
I'll give you a moment.

102
00:04:54.560 --> 00:04:56.089
Fail, it's okay to fail.

103
00:04:56.089 --> 00:04:59.784
The point is, is that you're typing it,
you're feeling it, you're doing it.

104
00:04:59.784 --> 00:05:03.456
Because after a little bit it's
gonna become second nature and

105
00:05:03.456 --> 00:05:06.098
then all other problems
are easier to solve.

106
00:05:06.098 --> 00:05:11.663
I know it's always weird doing different
syntax feels hard feels disgusting.

107
00:05:11.663 --> 00:05:16.586
And then lastly, if you do get all the way
through, you can do a println bang and

108
00:05:16.586 --> 00:05:20.101
do what is referred to as a debug print or
a pretty print.

109
00:05:20.101 --> 00:05:22.781
So if you get all the way through, wow.

110
00:05:27.375 --> 00:05:29.075
All right, I'm gonna start now.

111
00:05:29.075 --> 00:05:31.405
I feel like I've given you enough time.

112
00:05:31.405 --> 00:05:34.325
All right,
let me just erase my old code there.

113
00:05:34.325 --> 00:05:35.195
All right, so here we are.

114
00:05:35.195 --> 00:05:39.310
We are in the main function,
and I'm gonna go like this.

115
00:05:39.310 --> 00:05:43.090
Let foo equals,
do I still have Copilot on?

116
00:05:43.090 --> 00:05:44.010
There we go.

117
00:05:44.010 --> 00:05:47.620
Vec bang 1, 2, 3.

118
00:05:47.620 --> 00:05:51.740
All right, so now we gotta convert
this into an iterator, .iter.

119
00:05:51.740 --> 00:05:55.338
You can kind of see this you have a couple
different options here into iterator,

120
00:05:55.338 --> 00:05:57.443
iterator mute and iter,
we'll just do iter.

121
00:05:57.443 --> 00:06:02.248
Then we're gonna map it, .map and
we have to do the closure.

122
00:06:02.248 --> 00:06:10.010
Remember, closure uses the bars so
I can go bar x bar, x + 1, right?

123
00:06:10.010 --> 00:06:14.020
That looks pretty much the same
thing as TypeScript, right?

124
00:06:14.020 --> 00:06:18.160
Like if we jump back here, it's pretty
much the same code right there, right?

125
00:06:18.160 --> 00:06:23.025
Okay, so now at this point,
we have a problem.

126
00:06:23.025 --> 00:06:29.375
Because remember this right here, an
iterator is not the vector itself, right?

127
00:06:29.375 --> 00:06:34.035
It is some sort of additional structure
that can iterate over a collection.

128
00:06:34.035 --> 00:06:37.265
So right now,
what you have is an iterator.

129
00:06:37.265 --> 00:06:38.792
So if I highlighted over it,

130
00:06:38.792 --> 00:06:42.570
it would be a map that has
a generic type iter that has i32.

131
00:06:42.570 --> 00:06:45.663
It is a map that's producing an i32.

132
00:06:45.663 --> 00:06:49.580
So we now have to convert
this into something again.

133
00:06:49.580 --> 00:06:51.810
So what I am gonna do is we're
gonna do this, .collect.

134
00:06:51.810 --> 00:06:56.920
We're gonna collect our
iterator into a vector.

135
00:06:56.920 --> 00:07:00.820
But if we just do this, it's gonna tell
us, hey, type annotations are needed.

136
00:07:00.820 --> 00:07:02.542
What do you want to collect it as?

137
00:07:02.542 --> 00:07:06.915
I don't know what you want to, because
me personally, I know what I want, but

138
00:07:06.915 --> 00:07:08.980
it doesn't know what you want.

139
00:07:08.980 --> 00:07:11.420
So let's go all the way up to foo.

140
00:07:11.420 --> 00:07:13.059
And let's define its type.

141
00:07:13.059 --> 00:07:17.733
Just like TypeScript, you go colon, and
let's just say this Vec underscore,

142
00:07:17.733 --> 00:07:20.310
that just means, hey, infer the type.

143
00:07:20.310 --> 00:07:21.610
You know what the type is.

144
00:07:21.610 --> 00:07:22.970
I'm just going to say vec.

145
00:07:22.970 --> 00:07:24.730
So there you go.

146
00:07:24.730 --> 00:07:27.973
So it knows now,
collect now knows you want a vector, so

147
00:07:27.973 --> 00:07:33.220
it's gonna collect it into a vector for
you of the type whatever map does.

148
00:07:33.220 --> 00:07:35.110
There you go, that's pretty convenient.

149
00:07:35.110 --> 00:07:36.550
And then now we're going to print it.

150
00:07:36.550 --> 00:07:39.800
So println bang, remember print's
a macro so you gotta do this.

151
00:07:39.800 --> 00:07:41.460
And then we're going to
do the pretty print.

152
00:07:42.680 --> 00:07:45.790
So that of course looks
like a guy smoking a pipe.

153
00:07:45.790 --> 00:07:48.873
I'm not really sure how to
describe this operator,

154
00:07:48.873 --> 00:07:52.340
that's kind of what I got to as a,
I don't know.

155
00:07:52.340 --> 00:07:54.290
If someone has a good name for
it, please let me know.

156
00:07:54.290 --> 00:07:56.320
And then just pass in foo.

157
00:07:56.320 --> 00:07:57.220
There you go.

158
00:07:57.220 --> 00:07:59.150
So we've created a list.

159
00:08:00.150 --> 00:08:03.060
We converted it into
an iterator in some sense.

160
00:08:04.490 --> 00:08:10.451
We have mapped over its values and
reconverted it back into a list.

161
00:08:10.451 --> 00:08:14.850
I know you're thinking, wow,
this is so many steps already.

162
00:08:14.850 --> 00:08:17.360
You're lying to me when you said
Rust was better than TypeScript.

163
00:08:17.360 --> 00:08:19.180
Just hold on, we'll get to the cool stuff.

164
00:08:19.180 --> 00:08:20.479
Right now we're doing the simple stuff.

165
00:08:21.710 --> 00:08:26.429
All right, and if you want to run it,
you're gonna wanna go to your terminal and

166
00:08:26.429 --> 00:08:27.280
do cargo run.

167
00:08:27.280 --> 00:08:29.640
I'm gonna give you one more second
to kind of type through this.

168
00:08:29.640 --> 00:08:31.460
It's very important to type it.

169
00:08:31.460 --> 00:08:34.090
&gt;&gt; Could you explain what
you mean by closure in Rust?

170
00:08:34.090 --> 00:08:38.340
I think it might be a little bit
different from the JavaScript TypeScript.

171
00:08:38.340 --> 00:08:41.110
&gt;&gt; Yeah, so
I'm just using the general term closure.

172
00:08:41.110 --> 00:08:46.681
Technically, in the TypeScript world, when
you say closure, it actually means, it's

173
00:08:46.681 --> 00:08:52.270
actually like a grab bag of things that
you've closed over up your scope chain.

174
00:08:52.270 --> 00:08:55.433
And so when you do a function every
function actually has an associated

175
00:08:55.433 --> 00:08:56.245
closure with it.

176
00:08:56.245 --> 00:08:58.987
That's why when you have a function
that returns a function,

177
00:08:58.987 --> 00:09:02.205
any variables that you define bitwixt
the definition of the function and

178
00:09:02.205 --> 00:09:05.820
the return statement are closed over
inside the function that you return.

179
00:09:05.820 --> 00:09:07.530
And you can refer to them and add to them.

180
00:09:07.530 --> 00:09:08.569
So that's a closure.

181
00:09:08.569 --> 00:09:10.884
We use the term closure for
this right here,

182
00:09:10.884 --> 00:09:14.000
which you can also think of
it like a lambda function.

183
00:09:14.000 --> 00:09:17.568
So when you do the little parentheses
dash arrow the arrow functions you're

184
00:09:17.568 --> 00:09:19.250
actually doing a lambda function.

185
00:09:19.250 --> 00:09:23.125
In TypeScript, a lambda function is
not directly equivalent to a function.

186
00:09:23.125 --> 00:09:26.465
In TypeScript, a lambda function
has a lexical binding to this.

187
00:09:26.465 --> 00:09:29.675
Meaning if you're on a class it
automatically binds to this as opposed to

188
00:09:29.675 --> 00:09:32.575
binding to the global,
I believe is what a function does.

189
00:09:32.575 --> 00:09:34.495
And so
there's a little bit of implications.

190
00:09:34.495 --> 00:09:37.995
They're not one-to-one, so when someone
creates top-level lambda functions,

191
00:09:37.995 --> 00:09:40.740
it emotionally hurts me
because you're using it wrong.

192
00:09:40.740 --> 00:09:44.947
But that's because I'm way too specific
and you don't need to be that specific.

193
00:09:44.947 --> 00:09:47.246
&gt;&gt; Could you go over why
we need collect again?

194
00:09:47.246 --> 00:09:48.964
What does that iterator return?

195
00:09:48.964 --> 00:09:52.710
&gt;&gt; So
when we look at this thing right here,

196
00:09:52.710 --> 00:09:57.677
we create a vector then we
covert it into an iterator.

197
00:09:57.677 --> 00:10:01.744
So when I called.iter, we're getting
an iterator out referring to the vector.

198
00:10:01.744 --> 00:10:05.080
This iterator has a pointer to
the vector plus probably index 0.

199
00:10:05.080 --> 00:10:06.690
This is just me guessing.

200
00:10:06.690 --> 00:10:09.208
It might be something different,
but I'm just guessing.

201
00:10:09.208 --> 00:10:14.570
When we call .map, it's gonna receive
the iterator and it's gonna go next and

202
00:10:14.570 --> 00:10:19.870
the value that comes out of that iterator,
it's going to pass to our closure.

203
00:10:20.940 --> 00:10:22.169
And then that will be returned.

204
00:10:23.200 --> 00:10:26.583
So every time you call next, it gets
the value from the parent iterator,

205
00:10:26.583 --> 00:10:29.480
goes through our mapping,
and then it's returned.

206
00:10:29.480 --> 00:10:31.640
Well the problem is that's not a vector.

207
00:10:31.640 --> 00:10:32.720
That's not a list.

208
00:10:32.720 --> 00:10:33.610
It's an iterator.

209
00:10:33.610 --> 00:10:35.300
It's just this right here.

210
00:10:35.300 --> 00:10:39.720
We need to convert it back into
something we can use, such as a vector.

211
00:10:39.720 --> 00:10:40.986
So a collect function,

212
00:10:40.986 --> 00:10:45.370
we will actually write out effectively
what collect does here in just one moment.

213
00:10:45.370 --> 00:10:49.758
It will become much more clear
what collect is doing, but for

214
00:10:49.758 --> 00:10:55.195
now you use collect to go from an iterator
back into some sort of structure.

215
00:10:55.195 --> 00:10:59.292
I believe they call it a catamorphic
operation but we're not gonna use those

216
00:10:59.292 --> 00:11:03.400
terms around here because that just feel
like you get beat up if you say that.

