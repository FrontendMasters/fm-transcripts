WEBVTT

1
00:00:00.260 --> 00:00:03.940
So numbers, why are they complex in Rust?

2
00:00:03.940 --> 00:00:06.693
If you're only ever used to,
say, Python or TypeScript,

3
00:00:06.693 --> 00:00:10.240
it makes no sense why numbers
are anything other than numbers, right?

4
00:00:10.240 --> 00:00:12.670
This is probably something you're very,
very used to.

5
00:00:12.670 --> 00:00:16.830
4, we would call that
an integer in Rust world.

6
00:00:16.830 --> 00:00:18.230
You just call that a number, right?

7
00:00:18.230 --> 00:00:19.270
Well, technically it's a SME.

8
00:00:19.270 --> 00:00:21.940
If you're not familiar with the SME,
it's an optimization on a heat pointer.

9
00:00:21.940 --> 00:00:28.029
Anyways, if you do this, 4 divided by 3,
you'd expect 1.3 forever, right?

10
00:00:28.029 --> 00:00:29.822
I would not expect that personally, but

11
00:00:29.822 --> 00:00:33.510
that's the expectation of anyone
who's been in TypeScript or Python.

12
00:00:33.510 --> 00:00:35.560
You'd also expect this.

13
00:00:35.560 --> 00:00:37.500
I don't know if that's that's okay or not.

14
00:00:37.500 --> 00:00:39.550
See, personally,
I think that could be dangerous.

15
00:00:39.550 --> 00:00:44.600
But for you, you look at that and you're
like, why would 4 times -1 not be -4?

16
00:00:44.600 --> 00:00:49.452
Well, let me tell you, is that in a Rust
world or a more static type language,

17
00:00:49.452 --> 00:00:54.420
you have to define what your integer
is and how it interacts with the world.

18
00:00:54.420 --> 00:00:58.940
How binary is encoded determines what is
actually happening underneath the hood.

19
00:00:58.940 --> 00:01:02.735
That's why you'll see effectively
something like i and some number.

20
00:01:02.735 --> 00:01:06.845
This means an integer that can be
positive or negative, a signed int.

21
00:01:06.845 --> 00:01:09.539
You've probably heard this phrase
at some point in your lifetime.

22
00:01:09.539 --> 00:01:12.170
And then you can have u and some number.

23
00:01:12.170 --> 00:01:13.280
That's an unsigned int.

24
00:01:13.280 --> 00:01:15.410
It can only be positive numbers.

25
00:01:15.410 --> 00:01:18.405
Typically people use unsigned ints for,
say, flags.

26
00:01:18.405 --> 00:01:23.214
The ability to say, hey, okay, each one of
these binary locations have some sort of

27
00:01:23.214 --> 00:01:26.426
meaning, or you use it for
accessing, say, an array.

28
00:01:26.426 --> 00:01:28.935
Because in an array,
you never would have a negative index.

29
00:01:28.935 --> 00:01:30.920
That would just make no sense.

30
00:01:30.920 --> 00:01:32.990
No frankincense, as one person told me.

31
00:01:32.990 --> 00:01:34.390
And then, of course, a float.

32
00:01:34.390 --> 00:01:38.860
That's if you want to have
a decimal precision to your binary.

33
00:01:38.860 --> 00:01:42.477
There's a really great, fantastic
video on fast inverse square root,

34
00:01:42.477 --> 00:01:45.390
where they talk all about floats and
how they work.

35
00:01:45.390 --> 00:01:46.738
All that fun stuff, it's a great video.

36
00:01:46.738 --> 00:01:49.052
You will also see something like usize and
isize.

37
00:01:49.052 --> 00:01:52.580
That just simply means that the number
is the width of your architecture.

38
00:01:52.580 --> 00:01:57.520
So I have a 64bit system, so
usize is a 64bit unsigned number,

39
00:01:57.520 --> 00:02:00.090
isize is a 64bit signed number.

40
00:02:01.380 --> 00:02:01.880
There you go.

41
00:02:01.880 --> 00:02:04.809
So if I did 4 divided by 3,
I'd expect the answer 1,

42
00:02:04.809 --> 00:02:07.530
because we're only dealing
with whole numbers.

43
00:02:07.530 --> 00:02:09.460
So how many times can 3 go into 4?

44
00:02:09.460 --> 00:02:10.872
1 time.

45
00:02:10.872 --> 00:02:12.520
This is not allowed.

46
00:02:12.520 --> 00:02:15.235
You cannot mix two different types.

47
00:02:15.235 --> 00:02:19.160
4.0 divided by 3 is a float
divided by an integer.

48
00:02:19.160 --> 00:02:24.640
So you either need to cast your float to
an integer, or your integer to a float.

49
00:02:24.640 --> 00:02:27.530
They have to be of the same data type.

50
00:02:27.530 --> 00:02:30.390
This may not be allowed if
it's an unsigned number.

51
00:02:30.390 --> 00:02:34.230
If you have an unsigned number and
you try to multiply it by -1, well,

52
00:02:34.230 --> 00:02:35.320
you can't do that.

53
00:02:35.320 --> 00:02:38.210
It's an unsigned number, well,
what are you doing with the sign in there?

54
00:02:39.960 --> 00:02:41.690
So there you go,
this would be the error you'd get.

55
00:02:41.690 --> 00:02:44.639
You'd actually get an error in
Rust saying you can't do that.

56
00:02:44.639 --> 00:02:47.915
All right, so if you've ever
worked with any static language,

57
00:02:47.915 --> 00:02:51.432
if you've ever done Go, Java,
C, C++, any of those languages,

58
00:02:51.432 --> 00:02:54.260
this probably seems
pretty straightforward.

59
00:02:54.260 --> 00:02:57.260
If you've never done it,
it probably feels a little overwhelming.

60
00:02:57.260 --> 00:03:00.970
I'm sorry, it's just one of the hard
parts of working with a language.

61
00:03:00.970 --> 00:03:05.000
And the other big thing that you're gonna
hear me say a lot is String and stir.

62
00:03:05.000 --> 00:03:08.370
Now, again why are there so many types?

63
00:03:08.370 --> 00:03:12.978
It makes sense once you understand it,
which is that

64
00:03:12.978 --> 00:03:18.019
a String is a piece of data in
which is allocated on a heap.

65
00:03:18.019 --> 00:03:21.915
Heap and stack, this might be also a
foreign concept to people who are used to,

66
00:03:21.915 --> 00:03:25.240
say, Python or JavaScript,
we'll talk more about that.

67
00:03:25.240 --> 00:03:26.640
A string can be mutable.

68
00:03:26.640 --> 00:03:28.700
You can add stuff to it.

69
00:03:28.700 --> 00:03:32.717
You can't directly mutate the bits
underneath, but you can add,

70
00:03:32.717 --> 00:03:36.060
you can compose them,
you can concatenate them.

71
00:03:36.060 --> 00:03:39.300
Whereas a stir, you cannot do that.

72
00:03:39.300 --> 00:03:42.730
And that is because a stir is
like a view into the String.

73
00:03:42.730 --> 00:03:47.123
So if you did some String in JavaScript
and did substring 0 to 5, really,

74
00:03:47.123 --> 00:03:50.749
in the Rust world,
you'd be creating a view into the String,

75
00:03:50.749 --> 00:03:54.880
the capital S String,
you're creating a stir, a view into it.

76
00:03:54.880 --> 00:03:57.033
You can't change it, but
you can pass it around so

77
00:03:57.033 --> 00:03:59.120
people can have views into the String.

78
00:03:59.120 --> 00:04:01.800
You can think about this from
a performance standpoint.

79
00:04:01.800 --> 00:04:05.288
If you have a really big String, and
you take a really big subsection,

80
00:04:05.288 --> 00:04:07.196
you don't have to copy all that data.

81
00:04:07.196 --> 00:04:10.652
Instead, you can just have a pointer and
the length, and

82
00:04:10.652 --> 00:04:12.316
now you have the same data.

83
00:04:12.316 --> 00:04:16.069
And you can hand it around all you want,
and no one has to make these huge copies.

84
00:04:16.069 --> 00:04:19.260
Or in JavaScript land, when you do
substring, do you get a new string, or

85
00:04:19.260 --> 00:04:20.720
do you get a reference?

86
00:04:20.720 --> 00:04:22.920
I honestly have no idea which one you get.

87
00:04:22.920 --> 00:04:27.326
I'm sure there's rules that change it,
depending on how big the String is.

88
00:04:27.326 --> 00:04:28.704
Is the bigger String dropped?

89
00:04:28.704 --> 00:04:29.834
When is it dropped?

90
00:04:29.834 --> 00:04:31.663
There's probably a bazillion and
a half rules.

91
00:04:31.663 --> 00:04:34.101
Even if it is dropped, but
you still have a reference,

92
00:04:34.101 --> 00:04:36.120
it probably maybe makes
a copy at that point.

93
00:04:36.120 --> 00:04:37.300
I have no idea, right?

94
00:04:37.300 --> 00:04:41.110
It's very, very complicated because you
don't have control over how memory works.

95
00:04:41.110 --> 00:04:44.231
You'll also see something
like this every now and then,

96
00:04:44.231 --> 00:04:48.950
which this just simply means,
I am a reference to a list of something.

97
00:04:48.950 --> 00:04:50.920
And so
the something would be defined in here.

98
00:04:50.920 --> 00:04:55.460
So this would be a,
I'm a reference to a list of u8s.

99
00:04:55.460 --> 00:04:56.990
Or that's really just what a String is.

100
00:04:56.990 --> 00:05:02.940
It's just a series of 8-byte or
8-bit little data pieces there.

101
00:05:02.940 --> 00:05:06.810
So when I say the word String,
I mean capital S String.

102
00:05:06.810 --> 00:05:11.340
When I say the word stir,
I mean a reference to a String.

103
00:05:11.340 --> 00:05:13.250
We can do a little quick whiteboarding.

104
00:05:13.250 --> 00:05:15.580
I think that would probably be
a little bit nice just to make sure.

105
00:05:15.580 --> 00:05:18.340
So if you have something like this,
so I'm just gonna do this for String.

106
00:05:18.340 --> 00:05:21.840
So this is a capital S String, even though
this is not how you define it in Rust.

107
00:05:21.840 --> 00:05:27.300
So if I did hello world, yes,
I do have beautiful handwriting.

108
00:05:27.300 --> 00:05:28.838
Thank you very much for noticing.

109
00:05:28.838 --> 00:05:36.039
And if I did something like this,
y=x[0,.5].

110
00:05:36.039 --> 00:05:39.592
Visually, what that's actually
gonna do is x is gonna be this.

111
00:05:39.592 --> 00:05:46.063
x is gonna have a pointer to somewhere on
the heap that has the memory, hello world.

112
00:05:46.063 --> 00:05:48.480
It's gonna have a length
associated with it.

113
00:05:48.480 --> 00:05:52.300
How much data that it's currently using,
and a capacity.

114
00:05:52.300 --> 00:05:55.923
The capacity is how much more data can be
added before it needs to reallocate itself

115
00:05:55.923 --> 00:05:56.720
somewhere else.

116
00:05:56.720 --> 00:05:59.785
Because remember, when you're managing
memory, it's not like you can just grow

117
00:05:59.785 --> 00:06:02.230
infinitely, cuz you may grow
into the next variable.

118
00:06:02.230 --> 00:06:04.761
Everything's stored
somewhere on your computer,

119
00:06:04.761 --> 00:06:07.400
you just don't often think about that.

120
00:06:07.400 --> 00:06:10.480
This makes a lot of sense if you
ever programmed in the C world.

121
00:06:10.480 --> 00:06:14.110
You kind of malloc a certain amount of
memory, you can malloc more than you need.

122
00:06:14.110 --> 00:06:16.135
And you can kinda grow
within those bounds, but

123
00:06:16.135 --> 00:06:18.880
then you have to re-malloc once
you have exceeded your bounds.

124
00:06:18.880 --> 00:06:21.076
You need the computer to tell
you where you can store it,

125
00:06:21.076 --> 00:06:23.070
cuz maybe you can just grow your region.

126
00:06:23.070 --> 00:06:25.440
Maybe you can't cuz
there's something nearby.

127
00:06:25.440 --> 00:06:28.872
And then a stir of this one,
it's really just referencing hello, right?

128
00:06:28.872 --> 00:06:30.870
That's all it's referencing is hello.

129
00:06:30.870 --> 00:06:34.639
Therefore, all it really needs
is a pointer and a length.

130
00:06:34.639 --> 00:06:35.890
There's no capacity, right?

131
00:06:35.890 --> 00:06:37.253
It doesn't need to grow.

132
00:06:37.253 --> 00:06:38.976
It doesn't need anything about it.

133
00:06:38.976 --> 00:06:42.670
And we'll talk more about stack and
heap and how that is, but

134
00:06:42.670 --> 00:06:46.744
this thing is pointing effectively
to the same place as my String.

135
00:06:46.744 --> 00:06:48.220
We do have a question over there.

136
00:06:48.220 --> 00:06:52.666
&gt;&gt; Is stir and u8 equal [u8]?

137
00:06:52.666 --> 00:06:54.980
&gt;&gt; No, they're not equal.

138
00:06:54.980 --> 00:06:59.102
So the question is,
is reference String right here, or

139
00:06:59.102 --> 00:07:03.430
stir reference,
are the same thing as this, a slice?

140
00:07:03.430 --> 00:07:08.340
No, they're technically not,
because a stir implies utf-8 encoding.

141
00:07:08.340 --> 00:07:13.486
Not all 8bit arrays are like,
they're not equivalent to a String,

142
00:07:13.486 --> 00:07:17.270
cuz String has some encoding requirements.

143
00:07:17.270 --> 00:07:21.159
So long as the encoding
requirements are met, then yes,

144
00:07:21.159 --> 00:07:26.330
a view into an into a little u8
array is the same thing as a stir.

145
00:07:26.330 --> 00:07:28.217
It may not be the same
thing as a stir in Rust,

146
00:07:28.217 --> 00:07:31.340
because you haven't defined the types,
you can convert between them.

147
00:07:31.340 --> 00:07:34.790
I think there's either a library or
a standard method to convert between them.

148
00:07:34.790 --> 00:07:37.470
But they are or are not the same thing.

149
00:07:37.470 --> 00:07:40.165
There's a risk involved in converting.

150
00:07:40.165 --> 00:07:44.381
&gt;&gt; If the String changes,
will stir change as well?

151
00:07:44.381 --> 00:07:46.931
&gt;&gt; So if the String changes,
will stir change as well?

152
00:07:46.931 --> 00:07:49.740
So a thing about a String
is it's not like C.

153
00:07:49.740 --> 00:07:52.720
So you can't just point it to offset 3 and
just start changing it.

154
00:07:53.780 --> 00:07:58.050
You cannot do that, and so
that it's just not an allowable item.

155
00:07:58.050 --> 00:08:01.700
And also there's this whole borrow checker
thing, which we haven't talked about.

156
00:08:01.700 --> 00:08:06.086
So I'll tell you this much, you can't have
your String, and a pointer to your String,

157
00:08:06.086 --> 00:08:08.800
and change your String,
that's just not allowed.

158
00:08:08.800 --> 00:08:11.270
That's just not a thing
you can do in Rust.

159
00:08:11.270 --> 00:08:11.880
We'll go over that.

160
00:08:11.880 --> 00:08:14.010
So that situation just can't exist.

161
00:08:14.010 --> 00:08:14.930
Some basics on Rust.

162
00:08:14.930 --> 00:08:19.040
I do wanna do a little bit more on Rust,
just so you have some ideas here.

163
00:08:19.040 --> 00:08:22.562
When you're starting out Rust, so
when you leave this class, and you go and

164
00:08:22.562 --> 00:08:26.305
you try to build your own CLI application,
and you find yourself using unwraps or

165
00:08:26.305 --> 00:08:30.434
clones, it's okay, when you're starting
off, it's okay to do things the wrong way,

166
00:08:30.434 --> 00:08:34.900
cuz you're just learning how to use the
language, you're getting familiar with it.

167
00:08:34.900 --> 00:08:38.839
But just know that unwraps and clones
typically mean you're doing something

168
00:08:38.839 --> 00:08:42.180
that's either dangerous or
just not very good for performance.

169
00:08:42.180 --> 00:08:44.740
You should ask yourself,
why am I doing this?

170
00:08:44.740 --> 00:08:47.220
There probably is a better way to do it.

171
00:08:47.220 --> 00:08:50.549
But maybe at your skill level you can't
quite overcome that, and that's okay.

172
00:08:50.549 --> 00:08:53.877
When I first started off using Rust for
advent of code, it was just clones and

173
00:08:53.877 --> 00:08:56.750
unwraps everywhere because I
had no idea what I was doing.

174
00:08:56.750 --> 00:09:00.346
And then over the time of working with it,
I became better and better, and

175
00:09:00.346 --> 00:09:01.750
I can use them less and less.

176
00:09:02.810 --> 00:09:07.726
And so I'm not a very strict individual,
I think that learning is most fun when you

177
00:09:07.726 --> 00:09:11.660
learn as fast as possible using
your hands and not your eyes.

178
00:09:11.660 --> 00:09:14.186
So that's why I think unwraps and
all this are fine in the beginning.

