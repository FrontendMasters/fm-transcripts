WEBVTT

1
00:00:00.380 --> 00:00:04.602
Because points is a function we
have defined that needs to exist.

2
00:00:04.602 --> 00:00:05.957
And contains_points or

3
00:00:05.957 --> 00:00:10.590
contains_point is a function that we
have defined that needs to exist.

4
00:00:10.590 --> 00:00:17.746
Long as T implements both of those,
We will be able to do this algorithm.

5
00:00:17.746 --> 00:00:19.968
Does that make sense?

6
00:00:19.968 --> 00:00:24.638
Okay, so let's take that and
let's go back to our rectangle and

7
00:00:24.638 --> 00:00:29.322
get rid of rect data,
it just doesn't need to be there anymore.

8
00:00:29.322 --> 00:00:33.139
Let's implement points for rectangle,
let's implement contains for rectangle.

9
00:00:33.139 --> 00:00:38.391
Let's implement points for circle, let's
implement contains for circle, all right?

10
00:00:38.391 --> 00:00:39.505
So we'll do that now.

11
00:00:39.505 --> 00:00:42.573
So let's first go to rectangle.

12
00:00:42.573 --> 00:00:47.035
And first off,
do we need these collidables anymore?

13
00:00:47.035 --> 00:00:49.755
No, cuz we have a generic
implementation for them.

14
00:00:49.755 --> 00:00:53.642
So Collidable Rect for Rect,
Collidable Circle for Rect,

15
00:00:53.642 --> 00:00:55.830
get them out of here, all right?

16
00:00:55.830 --> 00:00:57.990
Now, let's implement points for rectangle.

17
00:00:57.990 --> 00:01:04.901
So I can take our rectangle implementation
and say, impl Points for Rect.

18
00:01:04.901 --> 00:01:07.753
And then make sure we just import it in.

19
00:01:07.753 --> 00:01:11.629
Okay, hold on, hold, hold, hold, all
right, we don't do those things on there.

20
00:01:14.767 --> 00:01:17.478
Whoopsies, not Points, that's Contains.

21
00:01:17.478 --> 00:01:18.818
My bad on that one, there we go.

22
00:01:18.818 --> 00:01:22.777
Do Contains, And so

23
00:01:22.777 --> 00:01:27.440
now, we need the impl Points for Rect.

24
00:01:27.440 --> 00:01:28.463
There we go.
So we have contains,

25
00:01:28.463 --> 00:01:29.680
we already had contains, right?

26
00:01:29.680 --> 00:01:33.114
That was a part for our implementation
on rectangles, so we already had that.

27
00:01:33.114 --> 00:01:35.130
So now all we have to
do is implement points.

28
00:01:35.130 --> 00:01:37.603
We technically already
have points implemented.

29
00:01:37.603 --> 00:01:40.446
If you scroll down yonder, where are you?

30
00:01:40.446 --> 00:01:43.652
We already have it right here,
there's our vector.

31
00:01:43.652 --> 00:01:45.128
Do you see that little vector right here?

32
00:01:45.128 --> 00:01:46.842
So I'm gonna grab this little vector.

33
00:01:46.842 --> 00:01:49.436
I'm gonna delete that little vector
because we don't need anything to do with

34
00:01:49.436 --> 00:01:50.350
RectIter anymore.

35
00:01:50.350 --> 00:01:55.520
I'm gonna walk up two points, and
I'm going to just replace that.

36
00:01:57.530 --> 00:01:59.309
I'm gonna return that.

37
00:01:59.309 --> 00:02:04.106
I'm gonna replace value with self.

38
00:02:04.106 --> 00:02:10.110
And of course, I'm gonna call into,
because remember,

39
00:02:10.110 --> 00:02:16.239
we implemented vector of point
float into point iterator,

40
00:02:16.239 --> 00:02:21.524
so we should be able to
just do this automagically.

41
00:02:21.524 --> 00:02:25.064
I know that was a lot of things
that just went on there,

42
00:02:25.064 --> 00:02:28.067
goes a little fantastically
fast right now.

43
00:02:28.067 --> 00:02:30.340
&gt;&gt; Should it be runnable by this point?

44
00:02:30.340 --> 00:02:32.610
&gt;&gt; No, we should not be
running anything right now.

45
00:02:32.610 --> 00:02:34.640
&gt;&gt; So how do we know if we have problems?

46
00:02:34.640 --> 00:02:39.430
&gt;&gt; Well, first,
let's finish doing some cleaning up.

47
00:02:39.430 --> 00:02:43.090
One thing we can get rid of,
do we need area defined for rectangle?

48
00:02:43.090 --> 00:02:44.480
Sure, Default?

49
00:02:44.480 --> 00:02:45.997
Sure, Display?

50
00:02:45.997 --> 00:02:48.591
Sure, do we need RectIter at all?

51
00:02:48.591 --> 00:02:51.096
Nope, do we need Iterator for Rect?

52
00:02:51.096 --> 00:02:55.116
Nope, do we need From Rect for Iter?

53
00:02:55.116 --> 00:02:58.685
Nope, do we need IntoIterator for
Rectangle?

54
00:02:58.685 --> 00:03:02.535
Nope, do we need IntoIterator for
rectangle reference?

55
00:03:02.535 --> 00:03:04.604
Nope, we don't need any of that.

56
00:03:04.604 --> 00:03:09.123
Now, we have a pretty small function,
and we've only implemented

57
00:03:09.123 --> 00:03:13.719
these two extremely basic behaviors,
one to give us a set of points,

58
00:03:13.719 --> 00:03:17.623
one to tell you if a point's contained,
so pretty basic.

59
00:03:17.623 --> 00:03:20.883
Let's do the same thing,
but let's do it for circle.

60
00:03:24.384 --> 00:03:27.601
If you're getting a little stuck,
remember you can jump on the website and

61
00:03:27.601 --> 00:03:30.574
try to look at the code and
try to see what you're doing differently.

62
00:03:30.574 --> 00:03:34.090
So let's go to circle,
do we need Collide Circle to Circle?

63
00:03:35.300 --> 00:03:38.040
No, do we need Collide Rect to Circle?

64
00:03:38.040 --> 00:03:39.900
No, do we need area?

65
00:03:39.900 --> 00:03:41.250
We can keep that.

66
00:03:41.250 --> 00:03:43.970
All right, so we have implement
Circle that contains point.

67
00:03:43.970 --> 00:03:47.570
Well, guess what?
Implement Contains for Circle.

68
00:03:47.570 --> 00:03:50.583
We don't need pub, of course,
because you just don't need pub.

69
00:03:50.583 --> 00:03:54.110
There we go, we've already implemented
Contains for Circle, awesome.

70
00:03:54.110 --> 00:03:59.280
Now, all we need to do is implement
Point or Points for Circle.

71
00:03:59.280 --> 00:04:04.242
So impl Points for Circle, and then,

72
00:04:04.242 --> 00:04:07.140
of course, do that.

73
00:04:07.140 --> 00:04:10.020
Now, all we have to do is go through
here and just do the exact same thing.

74
00:04:10.020 --> 00:04:14.674
So I'll just go like this,
return vec![(self.x,

75
00:04:14.674 --> 00:04:20.918
self.y)].into, because we had that
nice little convenient method.

76
00:04:20.918 --> 00:04:22.738
Look at that, there we go, we've done it.

77
00:04:22.738 --> 00:04:27.090
And now, look, also we can get rid of,
do you see this rectangle up here?

78
00:04:27.090 --> 00:04:30.790
We don't need to have that silly
circular reference anymore.

79
00:04:30.790 --> 00:04:33.354
We don't need rectangle anymore,
whoopsies, and

80
00:04:33.354 --> 00:04:36.010
we also don't need Collidable anymore.

81
00:04:36.010 --> 00:04:40.650
We only need Contains Point or
Contains and Points, and that is it.

82
00:04:42.060 --> 00:04:43.780
We've done these things,
we've implemented them all.

83
00:04:45.530 --> 00:04:50.470
And so now, theoretically, we should be
able to go back to our main file, and

84
00:04:50.470 --> 00:04:52.070
it should just all work.

85
00:04:54.290 --> 00:04:55.510
But something's gone wrong here.

86
00:04:57.670 --> 00:04:59.229
Why, why is that wrong?

87
00:05:01.921 --> 00:05:04.931
&gt;&gt; Cuz we assume the same type for
the comparator.

88
00:05:04.931 --> 00:05:06.940
&gt;&gt; So good at this, my goodness.

89
00:05:06.940 --> 00:05:08.990
So yeah, we have assumed the same type.

90
00:05:08.990 --> 00:05:10.210
Let's jump over to collision.

91
00:05:11.530 --> 00:05:14.767
Let's re-look at our blanket
implementation for a second.

92
00:05:14.767 --> 00:05:16.088
Look at what we have here.

93
00:05:16.088 --> 00:05:20.920
We have Collidable with a single generic.

94
00:05:20.920 --> 00:05:23.430
So I could just rename this generic for
a quick second.

95
00:05:23.430 --> 00:05:26.640
Let's rename it Rect,
does that make the problem more obvious?

96
00:05:28.000 --> 00:05:30.507
Cuz now we only have Rect for Rect.

97
00:05:30.507 --> 00:05:35.330
Or if I rename it to Circle,
we only have Circle for Circle.

98
00:05:35.330 --> 00:05:37.468
It should be very obvious by renaming it,

99
00:05:37.468 --> 00:05:40.610
we don't have the combination in there,
do we?

100
00:05:40.610 --> 00:05:44.728
So let me go like this, oopsies,
yeah, let me rename it back to T.

101
00:05:44.728 --> 00:05:46.920
And I'm gonna add one more in there, V.

102
00:05:48.330 --> 00:05:53.740
And so let's say Collidable &lt;T&gt; for V.

103
00:05:55.907 --> 00:05:58.600
But we gotta do something here, right?

104
00:05:59.980 --> 00:06:05.760
T is the other, V is the self.

105
00:06:07.050 --> 00:06:11.900
V needs to be able to check for
point containing,

106
00:06:11.900 --> 00:06:15.460
T needs to be able to give us points.

107
00:06:15.460 --> 00:06:22.862
So that means I can do this, T gives
me the points, V implements Contains.

108
00:06:25.374 --> 00:06:29.058
Okay, is anyone pretty excited about that?

109
00:06:29.058 --> 00:06:34.080
Is that pretty cool that we just did
some generic programming here that will

110
00:06:34.080 --> 00:06:38.790
apply that to every single type that
implements Contains and Points?

111
00:06:39.950 --> 00:06:43.720
That means when we go back here,
look what works.

112
00:06:43.720 --> 00:06:46.381
We didn't have to do this
cross-section of every last thing.

113
00:06:46.381 --> 00:06:51.122
Instead, we just need to define the basic
trait behavior and then compose it and

114
00:06:51.122 --> 00:06:54.965
implement it for everything that
implements those two traits.

115
00:06:54.965 --> 00:06:56.346
Is that pretty neato?

116
00:06:56.346 --> 00:06:58.480
I think that's pretty neato.

117
00:06:58.480 --> 00:07:00.540
I just wanna try to figure out
how to use this all the time.

118
00:07:00.540 --> 00:07:02.690
I feel like I'm the hammer in
search of a nail right now.

119
00:07:02.690 --> 00:07:04.958
Now that I know this is
even physically possible,

120
00:07:04.958 --> 00:07:09.300
I'm just like, how am I gonna blank and
implement myself out of this situation?

121
00:07:09.300 --> 00:07:13.856
I just think this is so neato that
we can actually do these large-scale

122
00:07:13.856 --> 00:07:17.420
implementations that work
on the struct themselves.

123
00:07:17.420 --> 00:07:20.711
Now, you can kind of implement
the same thing in TypeScript,

124
00:07:20.711 --> 00:07:23.939
you just have a function that
takes in the two interfaces, so

125
00:07:23.939 --> 00:07:26.423
you always at the lining
up the correct thing.

126
00:07:26.423 --> 00:07:29.320
Whereas this one, you actually have
the types hanging off themselves.

127
00:07:29.320 --> 00:07:33.251
And that means you can do these pretty
cool interactions that are just

128
00:07:33.251 --> 00:07:35.980
not necessarily possible
in other languages.

129
00:07:35.980 --> 00:07:40.902
For me, this is the end game, I think
this is pretty a darn cool programming.

130
00:07:40.902 --> 00:07:43.457
It still gets even cooler than this,
but we'll keep it here.

