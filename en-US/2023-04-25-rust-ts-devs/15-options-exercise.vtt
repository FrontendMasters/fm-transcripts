WEBVTT

1
00:00:00.040 --> 00:00:00.900
So let's get going.

2
00:00:00.900 --> 00:00:05.860
Let's actually go on to our little
exercise to really set in the value that

3
00:00:05.860 --> 00:00:08.260
Rust is trying to bring to you.

4
00:00:08.260 --> 00:00:09.660
And so today we're gonna
do a small little program.

5
00:00:09.660 --> 00:00:10.990
We're gonna call it practice.

6
00:00:10.990 --> 00:00:12.020
That's the function we're gonna do.

7
00:00:12.020 --> 00:00:16.480
And it's gonna take in numbers
that is a vec of usize.

8
00:00:16.480 --> 00:00:21.252
So a list of unsigned system architecture
with numbers and an index, usize, and

9
00:00:21.252 --> 00:00:23.860
you're gonna return one of the following.

10
00:00:23.860 --> 00:00:27.425
So it's an iteration on the previous
thing we just got done writing,

11
00:00:27.425 --> 00:00:31.510
if the value exists in the numbers,
return it and multiply it by 5.

12
00:00:31.510 --> 00:00:34.870
If there is no value,
return the index and multiply by 5.

13
00:00:34.870 --> 00:00:39.120
So we're gonna take a vector,
we're gonna pass in an index,

14
00:00:39.120 --> 00:00:43.616
then we're gonna grab that value
out of the vector at that index,

15
00:00:43.616 --> 00:00:46.910
multiply it by 5, or
multiply the index by 5.

16
00:00:46.910 --> 00:00:49.110
So, I will kinda help you.

17
00:00:49.110 --> 00:00:51.450
It says first do it in TypeScript,
so let's do it in TypeScript first,

18
00:00:51.450 --> 00:00:52.860
because that's where we're gonna do it.

19
00:00:52.860 --> 00:00:54.330
It's better to do it in TypeScript.

20
00:00:58.502 --> 00:01:01.428
So let's jump over here,
let's go to TypeScript, and

21
00:01:01.428 --> 00:01:05.410
we can just update practice to be
something that looks like this.

22
00:01:05.410 --> 00:01:09.010
It's gonna be a numbers array, right?

23
00:01:09.010 --> 00:01:11.491
Cuz we don't have vectors, we have that,
so I'm gonna call it nums,

24
00:01:11.491 --> 00:01:13.010
it just feels better that way.

25
00:01:13.010 --> 00:01:15.990
And we're gonna return out a number,
fantastic.

26
00:01:15.990 --> 00:01:16.737
And then also,

27
00:01:16.737 --> 00:01:21.280
we need to be able to take in the index
in which we're gonna be indexing at.

28
00:01:21.280 --> 00:01:23.700
So how do we do this in TypeScript land?

29
00:01:23.700 --> 00:01:25.180
Well, we'd have to be
a little bit careful.

30
00:01:25.180 --> 00:01:28.760
We're gonna have to do something,
maybe it looks something like this.

31
00:01:28.760 --> 00:01:33.792
We're gonna have to go
return (nums [index] ??

32
00:01:33.792 --> 00:01:39.741
index)5 right, does that look about right?

33
00:01:41.251 --> 00:01:42.358
Seems about correct.

34
00:01:42.358 --> 00:01:46.296
And so, there we go, we have successfully
done it in TypeScript, fantastic.

35
00:01:46.296 --> 00:01:49.685
We all know TypeScript, so
this is very familiar and wonderful and

36
00:01:49.685 --> 00:01:51.390
just feel good about yourself.

37
00:01:51.390 --> 00:01:54.910
I don't think this is how I did it in
the preview, which hurts my emotions.

38
00:01:54.910 --> 00:01:57.319
So if I go down here, what did I do it as?

39
00:01:57.319 --> 00:01:58.470
Yeah, I did something like this.

40
00:01:58.470 --> 00:01:59.310
You don't wanna do that.

41
00:01:59.310 --> 00:02:01.799
You could also do it like this,
or the way I just did it,

42
00:02:01.799 --> 00:02:03.940
which probably seems a little bit nicer.

43
00:02:03.940 --> 00:02:04.670
So there you go.

44
00:02:04.670 --> 00:02:05.500
We did the same thing.

45
00:02:05.500 --> 00:02:07.916
So if I pass in this,
I should get four times five,

46
00:02:07.916 --> 00:02:10.640
I should get 20 out if
we were to execute this.

47
00:02:10.640 --> 00:02:13.730
So pretty straightforward code,
nothing fantastic going on.

48
00:02:13.730 --> 00:02:15.080
Let's do the same thing, but in Rust.

49
00:02:15.080 --> 00:02:18.818
So let's take our vector knowledge,
let's take our option knowledge and

50
00:02:18.818 --> 00:02:20.018
let's make it happen.

51
00:02:24.129 --> 00:02:27.350
So jump back here,
jump over to your Rust file.

52
00:02:27.350 --> 00:02:31.780
Instead of being an option of usize,
let's have it as a Vec of usize.

53
00:02:31.780 --> 00:02:36.720
Instead of returning an option of
usize let's just have it as usize.

54
00:02:36.720 --> 00:02:37.250
So there we go.

55
00:02:37.250 --> 00:02:40.010
And then lastly,
we need to take in an index.

56
00:02:40.010 --> 00:02:43.750
So make sure your index is,
of course, a usize.

57
00:02:43.750 --> 00:02:44.652
There we go.
So now we just

58
00:02:44.652 --> 00:02:46.510
gotta return this thing out.

59
00:02:46.510 --> 00:02:47.290
So what can we do?

60
00:02:47.290 --> 00:02:51.418
Well, we can return num.get(index).

61
00:02:51.418 --> 00:02:54.050
Now remember, what does get return as?

62
00:02:54.050 --> 00:02:55.970
Can someone say the type out loud?

63
00:02:55.970 --> 00:02:56.710
&gt;&gt; Option?

64
00:02:56.710 --> 00:02:57.630
&gt;&gt; Option of?

65
00:02:59.920 --> 00:03:03.480
&gt;&gt; The thing [LAUGH] that's underlying it.

66
00:03:03.480 --> 00:03:07.502
&gt;&gt; Yes, the type that's in the vector,
option T.

67
00:03:07.502 --> 00:03:10.092
Option, the type in the vector,
option of usize.

68
00:03:10.092 --> 00:03:12.924
You can see that right here,
it tells you all about it.

69
00:03:12.924 --> 00:03:15.660
That definition looks extremely
complicated, but don't worry,

70
00:03:15.660 --> 00:03:16.861
that's what's happening.

71
00:03:16.861 --> 00:03:20.778
So that means we can now unwrap it or
we can use our previous stuff.

72
00:03:20.778 --> 00:03:24.452
Now notice, we're combining our operations
here, we're going into a vector.

73
00:03:24.452 --> 00:03:27.552
We're using those options, and
we're doing the right things here.

74
00:03:27.552 --> 00:03:30.257
So now I can unwrap or index.

75
00:03:30.257 --> 00:03:33.890
But what's going on here?

76
00:03:33.890 --> 00:03:38.030
We got to do this really quickly,
times 5, and we have this problem here.

77
00:03:38.030 --> 00:03:42.835
So if you wrote the same code I did,
which is vector dot get index, unwrap or

78
00:03:42.835 --> 00:03:44.754
index, what does this mean?

79
00:03:44.754 --> 00:03:48.529
Expected reference to usize found usize.

80
00:03:48.529 --> 00:03:50.451
Let's walk through this problem,
what could that mean?

81
00:03:53.548 --> 00:03:55.520
What does get return?

82
00:03:55.520 --> 00:03:56.883
Let's look at it.

83
00:03:56.883 --> 00:03:58.899
Gosh, I can't even see my mouse.

84
00:03:58.899 --> 00:04:00.920
4K, caught in 4K here.

85
00:04:00.920 --> 00:04:01.700
Notice what it says.

86
00:04:01.700 --> 00:04:06.340
It's an option of
reference to what's inside.

87
00:04:06.340 --> 00:04:11.050
It's not the item itself, it's
a reference to what's inside the vector.

88
00:04:11.050 --> 00:04:17.110
That means if we were to do something
like this, let num = num get index off.

89
00:04:17.110 --> 00:04:19.010
We can't use that,
we'll just call unwrap for now.

90
00:04:19.010 --> 00:04:20.810
Look at what we get.

91
00:04:20.810 --> 00:04:23.453
We get a reference to the thing
that's in the vector,

92
00:04:23.453 --> 00:04:26.450
not the thing that's in the vector,
a reference to it.

93
00:04:26.450 --> 00:04:27.620
So that's very, very important.

94
00:04:27.620 --> 00:04:29.907
Which means unwrap or has to do what?

95
00:04:29.907 --> 00:04:33.510
It has to match the type
that's coming out.

96
00:04:33.510 --> 00:04:34.700
So the or has to be the same.

97
00:04:34.700 --> 00:04:38.122
So we can just go like this,
reference to index.

98
00:04:38.122 --> 00:04:40.300
Boom, it's the same type now.

99
00:04:40.300 --> 00:04:43.590
We were trying to unwrap or
with a different type.

100
00:04:43.590 --> 00:04:45.910
We have to make it the same type.

101
00:04:45.910 --> 00:04:47.390
Kind of a fun little experiment there.

102
00:04:47.390 --> 00:04:49.990
You kinda can see a little bit
more about how these things work.

103
00:04:49.990 --> 00:04:51.320
You gotta think in types.

104
00:04:51.320 --> 00:04:55.422
Thinking in types really helps you kind
of have a good mental pathway when you're

105
00:04:55.422 --> 00:04:56.520
building a program.

106
00:04:57.590 --> 00:05:00.072
So a little bit different
maybe than you're used to,

107
00:05:00.072 --> 00:05:02.930
especially if you're only
doing TypeScript ever.

108
00:05:02.930 --> 00:05:05.870
An ampersand sign should only
ever be used in IF conditions.

109
00:05:05.870 --> 00:05:07.870
This is ridiculous that you're
using it somewhere else.

110
00:05:07.870 --> 00:05:12.069
Well, technically, a Boolean expression
would be a better way to say that, but

111
00:05:12.069 --> 00:05:13.010
you get the idea.

112
00:05:13.010 --> 00:05:15.700
All right, we did the Rust version.

113
00:05:15.700 --> 00:05:16.780
Does that all make sense?

114
00:05:16.780 --> 00:05:19.060
Do you feel a little
bit better about that?

115
00:05:19.060 --> 00:05:22.270
Yes, we're trying to keep the types
the same when you unwrap.

116
00:05:22.270 --> 00:05:25.920
All right, so we already, yeah.

117
00:05:25.920 --> 00:05:29.372
So anyways, this is Rust's take on the
billion dollar mistake that is known as

118
00:05:29.372 --> 00:05:30.276
null or undefined.

119
00:05:30.276 --> 00:05:33.284
Null really is the billion-dollar mistake,
that's what they call it.

120
00:05:33.284 --> 00:05:37.409
I would argue that undefined's potentially
even more than a billion-dollar mistake,

121
00:05:37.409 --> 00:05:39.173
undefined has been just a nightmare.

122
00:05:39.173 --> 00:05:42.680
I think one of the hardest parts about
undefined is if you ask any person,

123
00:05:42.680 --> 00:05:45.556
say, what's the difference
between null and undefined,

124
00:05:45.556 --> 00:05:47.410
you get kind of a variety of answers.

125
00:05:47.410 --> 00:05:52.289
The main answer you're gonna get is
null is undefined on purpose and

126
00:05:52.289 --> 00:05:57.180
undefined is undefined on accident or
purpose sometimes, right?

127
00:05:57.180 --> 00:06:01.948
Because why would you have that little
question mark operator on a struct if

128
00:06:01.948 --> 00:06:03.165
it's on purpose?

129
00:06:03.165 --> 00:06:06.320
If it's on purpose,
then say it's on purpose, it's null.

130
00:06:06.320 --> 00:06:08.140
So we don't use it consistently.

131
00:06:08.140 --> 00:06:09.670
It has weird meanings.

132
00:06:09.670 --> 00:06:11.010
It's like a holdback from Java.

133
00:06:11.010 --> 00:06:14.739
I don't know what happened, right,
because if you don't know, Brendan Gregg,

134
00:06:14.739 --> 00:06:18.201
he did actually have to bring it over
because of demands with Java to bring over

135
00:06:18.201 --> 00:06:20.940
null into JavaScript,
blah, blah, blah, blah.

136
00:06:20.940 --> 00:06:21.640
Who knows?

137
00:06:21.640 --> 00:06:24.660
It had to do something with integration.

138
00:06:24.660 --> 00:06:27.745
I forget the exact reason,
but, anyways, here we are,

139
00:06:27.745 --> 00:06:31.930
we now have a completely different
take on the null undefined problem.

140
00:06:31.930 --> 00:06:34.970
And I would argue that this just
leads to easier programming.

141
00:06:34.970 --> 00:06:38.070
You always know when
something might not be there.

142
00:06:38.070 --> 00:06:40.130
And right now you're probably
thinking in your head.

143
00:06:40.130 --> 00:06:41.781
Well, it's not that big of a deal.

144
00:06:41.781 --> 00:06:44.560
We generally know, just wait.

