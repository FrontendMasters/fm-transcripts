WEBVTT

1
00:00:00.250 --> 00:00:02.410
The question is to throw or not to throw.

2
00:00:02.410 --> 00:00:06.700
Can anyone name a very common
function in JavaScript that throws?

3
00:00:06.700 --> 00:00:07.235
Right now, go.

4
00:00:10.923 --> 00:00:13.640
Come on, json.parse.

5
00:00:13.640 --> 00:00:16.110
Don't you know that it throws?

6
00:00:16.110 --> 00:00:18.155
Yeah, that's actually really dangerous,

7
00:00:18.155 --> 00:00:21.489
a lot of people forget to wrap their
json.parse with the try catch because

8
00:00:21.489 --> 00:00:24.790
sometimes you don't get JSON and
your whole server dies.

9
00:00:24.790 --> 00:00:25.750
Your dead, right?

10
00:00:25.750 --> 00:00:26.520
So you don't want that.

11
00:00:26.520 --> 00:00:30.436
So, that's a big thing about JavaScript,
is when I ask that question, no one could

12
00:00:30.436 --> 00:00:33.929
really give me an answer because you
just don't think about it that often.

13
00:00:33.929 --> 00:00:37.020
We already read file today,
reading file control errors.

14
00:00:37.020 --> 00:00:40.340
Just sometimes you just don't process it,
it's not there.

15
00:00:40.340 --> 00:00:44.032
Rust on the other hand,
if there is a possibility of an error,

16
00:00:44.032 --> 00:00:45.520
you must specify it.

17
00:00:45.520 --> 00:00:48.160
It cannot operate any other way,
that's the way it is.

18
00:00:48.160 --> 00:00:49.005
And here's the best part.

19
00:00:49.005 --> 00:00:54.590
Is that errors, they're enums,
exact same thing.

20
00:00:54.590 --> 00:00:57.000
Again, we're just going over
more enums at this point.

21
00:00:57.000 --> 00:00:59.490
And also it defeats this
problem right here.

22
00:00:59.490 --> 00:01:01.414
So if you're a Go programmer at all,

23
00:01:01.414 --> 00:01:04.710
this is the one thing that is just
a little bothersome about Go.

24
00:01:05.920 --> 00:01:08.120
That, well there's a few things,
but this is one of them.

25
00:01:08.120 --> 00:01:11.710
You no longer have this meme, the meme is
gone, you don't have to worry about it.

26
00:01:11.710 --> 00:01:13.680
And so here's the definition of result.

27
00:01:13.680 --> 00:01:14.950
Does this make sense everybody?

28
00:01:14.950 --> 00:01:16.000
I think this should make sense.

29
00:01:16.000 --> 00:01:19.020
You have two generics, you have your
value type and your error type.

30
00:01:19.020 --> 00:01:23.999
And your two enum values,
which is an Ok of value type,

31
00:01:23.999 --> 00:01:27.490
or Err with subtype error type.

32
00:01:27.490 --> 00:01:28.903
Makes a lot of sense.

33
00:01:28.903 --> 00:01:32.887
And also Ok slash Err
are first class citizens,

34
00:01:32.887 --> 00:01:38.177
meaning I can jump in here and
go, let foo = Ok (5), right?

35
00:01:38.177 --> 00:01:42.770
And if you look at this, it's gonna say,
hey, this thing's a result and unknown.

36
00:01:42.770 --> 00:01:45.822
So you have to be a little bit more
verbose on your typing because it

37
00:01:45.822 --> 00:01:47.440
needs to know both type of errors.

38
00:01:47.440 --> 00:01:50.760
Right now I'm just doing this right here,
it just makes it so dang easy.

39
00:01:50.760 --> 00:01:52.300
So let's kind of go
over that a little bit.

40
00:01:52.300 --> 00:01:55.578
I'm just gonna kind of give you a quick
swift one because you've already seen

41
00:01:55.578 --> 00:01:56.600
these, right?

42
00:01:56.600 --> 00:02:00.240
So, this should be completely
understandable at this point.

43
00:02:00.240 --> 00:02:04.330
If let pattern match the Ok,
get the inner value out of this.

44
00:02:04.330 --> 00:02:07.382
This function may throw an error, so
if this function returns an error,

45
00:02:07.382 --> 00:02:08.410
we just ignore it.

46
00:02:08.410 --> 00:02:12.030
It did not meet our pattern matching,
we just move on.

47
00:02:12.030 --> 00:02:15.817
You can do a match statement, meaning that
we have a branch that handles the value,

48
00:02:15.817 --> 00:02:17.830
we have a branch that handles the error.

49
00:02:17.830 --> 00:02:20.070
Again, just pattern
matching on the enum types.

50
00:02:20.070 --> 00:02:23.380
This value being the V,
this value being the E.

51
00:02:24.480 --> 00:02:26.962
So, again,
you can also just completely ignore it.

52
00:02:26.962 --> 00:02:29.288
In Rust if you call a function
that could error and

53
00:02:29.288 --> 00:02:32.910
you don't do anything with that error,
it's gonna give you a warning.

54
00:02:32.910 --> 00:02:35.986
It's gonna say, hey, by the way,
you're returning a result type, but

55
00:02:35.986 --> 00:02:38.810
you're not doing anything with it,
could be important.

56
00:02:38.810 --> 00:02:42.374
So, just assigning it to underscore says,
I don't care.

57
00:02:42.374 --> 00:02:47.436
I'm always a little hesitant doing this
specifically in async programming cuz

58
00:02:47.436 --> 00:02:52.737
when it comes to async, you return futures
and futures come with the same warning.

59
00:02:52.737 --> 00:02:56.763
Warn on unused, you can actually define
any structure warn on unused and

60
00:02:56.763 --> 00:02:58.284
it will warn you your code.

61
00:02:58.284 --> 00:03:02.172
And if you assign it to underscore and
then it becomes async,

62
00:03:02.172 --> 00:03:07.446
you won't use the async future and futures
have to be awaited for them to execute.

63
00:03:07.446 --> 00:03:10.040
And they'll be,
why is my code not executing?

64
00:03:10.040 --> 00:03:10.820
You assign it to underscore.

65
00:03:10.820 --> 00:03:12.600
So always be careful about the underscore.

66
00:03:12.600 --> 00:03:15.570
You can always yellow
your error with unwrap.

67
00:03:15.570 --> 00:03:18.820
You can respectfully
yellow it with expect.

68
00:03:18.820 --> 00:03:21.654
So expect just says, hey, this thing
should not error, but if it does,

69
00:03:21.654 --> 00:03:24.850
here's the message, crash my program,
this should not happen.

70
00:03:24.850 --> 00:03:31.900
You can do default unwrap or, so
just like options, it also has unwrap or.

71
00:03:31.900 --> 00:03:36.170
It has unwrap, it has unwrap or
with a function, it has a bunch of stuff.

72
00:03:36.170 --> 00:03:40.090
You can even convert a result
into an option by calling Ok.

73
00:03:40.090 --> 00:03:43.930
This will take the Ok value and
turn it into some value.

74
00:03:43.930 --> 00:03:46.170
It'll take the Err and
just turn it into nothing.

75
00:03:46.170 --> 00:03:50.840
We only care about positive values,
we don't care about any errors.

76
00:03:50.840 --> 00:03:53.360
So you can kind of convert
between them very easily.

77
00:03:53.360 --> 00:03:55.033
You can also map them, so

78
00:03:55.033 --> 00:03:59.590
if you want to map over
the underlying value type, we can map.

79
00:03:59.590 --> 00:04:00.885
We can even do and thens.

80
00:04:00.885 --> 00:04:04.032
So and then, so if we wanna do
a function that could error, and

81
00:04:04.032 --> 00:04:08.087
then a function that could error, and
then a function that could error, the and

82
00:04:08.087 --> 00:04:10.467
thens only get executed
per successful step.

83
00:04:10.467 --> 00:04:13.717
So we could have this nice kind of way
to chain a bunch of erring operations

84
00:04:13.717 --> 00:04:14.900
together.

85
00:04:14.900 --> 00:04:18.170
You can also do
the question mark operator.

86
00:04:18.170 --> 00:04:21.875
So, if your function returns a result
that has the same error type,

87
00:04:21.875 --> 00:04:25.190
just like with option,
you can just question mark and boom,

88
00:04:25.190 --> 00:04:28.170
you get the inner value
out of the okay side.

89
00:04:28.170 --> 00:04:30.470
But if it's an error, we return the error.

90
00:04:30.470 --> 00:04:32.471
So it's kind of this really nice syntax,

91
00:04:32.471 --> 00:04:35.570
is effectively if error does not
equal nil return return error.

92
00:04:35.570 --> 00:04:37.520
It's like Go but
in a shortcuted version of it.

93
00:04:38.820 --> 00:04:41.620
And of course,
there's two crates that are super useful.

94
00:04:41.620 --> 00:04:45.021
So if you ever decide to start using Rust
and you start developing your own library,

95
00:04:45.021 --> 00:04:45.954
check out this error.

96
00:04:45.954 --> 00:04:49.966
It's just a really nice way to be
able to have the error interface, but

97
00:04:49.966 --> 00:04:51.666
you could kind of define it and

98
00:04:51.666 --> 00:04:55.556
have your exact errors you wanna do
with nice text to it and all that.

99
00:04:55.556 --> 00:04:58.599
Or anyhow which is just
completely willy Nelly,

100
00:04:58.599 --> 00:05:03.440
it's crazy how easy it is to use and
you use this an application code largely.

101
00:05:03.440 --> 00:05:06.936
That's kind of how you think about, so you
wouldn't wanna use anyhow in a library,

102
00:05:06.936 --> 00:05:08.822
you'd want to use anyhow
on an application.

103
00:05:08.822 --> 00:05:10.810
That's generally what I've heard.

104
00:05:10.810 --> 00:05:13.490
Things may have changed,
maybe new opinions have emerged, but

105
00:05:13.490 --> 00:05:14.988
that's been my general take on it.

