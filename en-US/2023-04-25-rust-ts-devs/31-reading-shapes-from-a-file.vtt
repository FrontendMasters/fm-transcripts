WEBVTT

1
00:00:00.190 --> 00:00:02.900
&gt;&gt; ThePrimeagen: What if we wanted
to read our shapes from a file?

2
00:00:02.900 --> 00:00:05.968
And so I think this is kind of
an important experience here, cuz this is

3
00:00:05.968 --> 00:00:09.690
gonna really put all the things together
that we've done, every last item.

4
00:00:09.690 --> 00:00:14.270
So we need to implement a trait
called FromStr that allows us to

5
00:00:14.270 --> 00:00:17.060
convert a stir into the type we want.

6
00:00:17.060 --> 00:00:19.180
Remember our little
parse method right here?

7
00:00:19.180 --> 00:00:22.900
We saw that earlier converting
a String into a usize.

8
00:00:22.900 --> 00:00:24.898
All right, well,
we can actually implement that.

9
00:00:24.898 --> 00:00:29.056
And so before we do that for both Circle
and Rust, I'm gonna add a library,

10
00:00:29.056 --> 00:00:32.840
we haven't added any library,
using cargo add anyhow.

11
00:00:32.840 --> 00:00:37.490
Anyhow allows you to effectively
just have super easy error handling.

12
00:00:38.960 --> 00:00:42.953
Again, I kinda described the difference
earlier, cargo add anyhow.

13
00:00:42.953 --> 00:00:45.920
There we go,
we now have anyhow, fantastic.

14
00:00:45.920 --> 00:00:49.829
So let's use Anyhow and FromStr to
implement a Circle and Rectangle parse.

15
00:00:49.829 --> 00:00:55.465
So what I'll do is, let's just say that
for a Rectangle it's just four integers,

16
00:00:55.465 --> 00:00:58.779
or four usizes, and
that will be our Rectangle.

17
00:00:58.779 --> 00:01:04.580
For Circle it will just be four, I guess
we can do f64, it's all the same, right?

18
00:01:04.580 --> 00:01:05.690
It doesn't really matter.

19
00:01:05.690 --> 00:01:07.836
So let's go to our shapes.

20
00:01:07.836 --> 00:01:11.057
And I'm gonna go down here on our
Rectangle all the way down to the bottom.

21
00:01:11.057 --> 00:01:15.120
I'm gonna go like this,
impl FromStr four Rect.

22
00:01:16.590 --> 00:01:18.847
And now by doing that,
it's gonna give us something nice.

23
00:01:18.847 --> 00:01:23.548
It's gonna give us an associated
type error and FromStr stir.

24
00:01:23.548 --> 00:01:29.718
So I'm gonna go like this,
the Err = anyhow: :Error.

25
00:01:29.718 --> 00:01:33.754
Yay, now if you remember earlier
our question mark operator,

26
00:01:33.754 --> 00:01:37.714
by having a function that returns
an error or a result object,

27
00:01:37.714 --> 00:01:43.290
we can use the question mark to just
unwrap things really, really easily.

28
00:01:43.290 --> 00:01:44.580
So this is what I'm gonna do.

29
00:01:44.580 --> 00:01:48.230
I have a reference to string and
I need to return out a Rectangle.

30
00:01:48.230 --> 00:01:50.944
So I'm gonna go return Rect,
and let's see,

31
00:01:50.944 --> 00:01:54.920
how do we want,
I still have Copilot here, disable that.

32
00:01:54.920 --> 00:01:56.420
So let's do this.

33
00:01:56.420 --> 00:02:00.159
Let's go, let parts = s.split,

34
00:02:00.159 --> 00:02:04.860
on whatever we call this, a whitespace.

35
00:02:04.860 --> 00:02:08.531
And I'm just gonna
collect it into a vector.

36
00:02:11.324 --> 00:02:13.219
&gt;&gt; ThePrimeagen: There we go,
I collected it into a nice little vector.

37
00:02:13.219 --> 00:02:17.019
We have a vector of str so I just kinda
got all the blue parts out of it.

38
00:02:17.019 --> 00:02:22.516
If parts.length does not equal 4,

39
00:02:22.516 --> 00:02:28.206
I'm gonna return an error of anyhow.

40
00:02:28.206 --> 00:02:34.348
Anyhow, we can just say whatever we want,
bad or rectangle.

41
00:02:34.348 --> 00:02:37.720
&gt;&gt; ThePrimeagen: Bad rectangle,
does that sound good?

42
00:02:38.770 --> 00:02:44.530
Bad rectangle, yeah, not the best error,
we could have done better, from str.

43
00:02:44.530 --> 00:02:45.500
There we go, look at that.

44
00:02:45.500 --> 00:02:47.320
Still not that great, but it worked out.

45
00:02:48.670 --> 00:02:50.881
Then inside of here we know
that there's four parts.

46
00:02:50.881 --> 00:02:55.471
So just kinda being lazy about it,
I'm just gonna go like this,

47
00:02:55.471 --> 00:02:59.480
parts[0].parse and
then question mark operator.

48
00:02:59.480 --> 00:03:01.120
Cuz remember, it's gonna return a result.

49
00:03:01.120 --> 00:03:03.127
Since we're in a function,
that is a result,

50
00:03:03.127 --> 00:03:05.860
it's just gonna pass everything
right back out, fantastic.

51
00:03:05.860 --> 00:03:10.794
And then we're gonna do
the same thing again, y, 1,

52
00:03:10.794 --> 00:03:14.850
width, 2, height, 3 and there we go.

53
00:03:14.850 --> 00:03:18.000
And now we have everything except for
it's expecting a result.

54
00:03:18.000 --> 00:03:19.400
We just have a rectangle.

55
00:03:19.400 --> 00:03:22.480
How do we make a rectangle into
a result of rectangle, anybody?

56
00:03:22.480 --> 00:03:23.780
&gt;&gt; Speaker 2: Tuple?

57
00:03:23.780 --> 00:03:28.110
&gt;&gt; ThePrimeagen: Not tuple, Ok, right?

58
00:03:29.140 --> 00:03:31.150
It's the value part of a result.

59
00:03:31.150 --> 00:03:35.671
So now it's a result of value rectangle,
all right?

60
00:03:35.671 --> 00:03:39.420
So there we go, we've just parsed
out a string for our rectangle.

61
00:03:39.420 --> 00:03:40.665
Pretty fantastic, right?

62
00:03:40.665 --> 00:03:43.439
So I'm gonna honestly just
highlight this whole thing,

63
00:03:43.439 --> 00:03:45.065
I'm gonna yank the whole thing.

64
00:03:45.065 --> 00:03:50.118
And we're gonna go over to circle,
go to the bottom, paste it in,

65
00:03:50.118 --> 00:03:55.190
replace Rect with Circle,
implement or import in FromStr.

66
00:03:55.190 --> 00:03:59.353
And so now we have to do the same thing
except for it's no longer a rectangle,

67
00:03:59.353 --> 00:04:00.470
it's now a circle.

68
00:04:00.470 --> 00:04:05.291
So let's make that to 3,
bad circle from string.

69
00:04:05.291 --> 00:04:08.711
Implement Circle, take away this last one.

70
00:04:08.711 --> 00:04:11.961
Radius, look at that, done.

71
00:04:11.961 --> 00:04:14.840
We're just cruising right now, aren't we?

72
00:04:14.840 --> 00:04:15.730
All right, so there we go.

73
00:04:15.730 --> 00:04:17.151
We have our circle from a string.

74
00:04:17.151 --> 00:04:18.731
We have our rectangle from a string.

75
00:04:18.731 --> 00:04:21.511
Okay, this is pretty exciting.

76
00:04:21.511 --> 00:04:23.471
This is pretty exciting.

77
00:04:23.471 --> 00:04:26.671
So now, okay, here's all this, there's
all that you can grab from the website.

78
00:04:26.671 --> 00:04:27.915
So let's create a file.

79
00:04:27.915 --> 00:04:31.458
I'm gonna highlight this little
guy right here, highlight [SOUND].

80
00:04:31.458 --> 00:04:34.236
And I'm gonna create a file and
I'm just gonna call it shapes.

81
00:04:34.236 --> 00:04:37.995
Shapes, paste it in,
no new lines, there we go.

82
00:04:37.995 --> 00:04:41.645
Rectangle, circle, circle, rectangle,
and I just realized this file is wrong.

83
00:04:43.415 --> 00:04:44.908
Circle should only have 3 points.

84
00:04:44.908 --> 00:04:48.321
That was a poorly formed circle,
we would have probably got an error.

85
00:04:48.321 --> 00:04:51.131
It makes me sad we almost messed that up.

86
00:04:51.131 --> 00:04:52.373
All right, so there we go.

87
00:04:52.373 --> 00:04:55.969
We have our nice little file
right here called shapes,

88
00:04:55.969 --> 00:04:58.090
and I want you to read this file.

89
00:04:58.090 --> 00:04:59.700
Well, I want me really to do this.

90
00:04:59.700 --> 00:05:00.463
I'm gonna read this file.

91
00:05:00.463 --> 00:05:04.066
I'm gonna create an enum to
store both Circle and Rectangle.

92
00:05:04.066 --> 00:05:08.535
And I'm gonna read each line,
I'm gonna use split_once, and

93
00:05:08.535 --> 00:05:12.364
I'm gonna find any adjacent collisions,
all right?

94
00:05:12.364 --> 00:05:15.253
So we're gonna get a list of objects in or
shapes in, and

95
00:05:15.253 --> 00:05:18.470
I'm gonna find any of them that
are adjacent and colliding.

96
00:05:18.470 --> 00:05:19.242
So, what is adjacent?

97
00:05:19.242 --> 00:05:24.476
If they're one line away from each other,
kinda fun, right?

98
00:05:24.476 --> 00:05:28.182
That's kinda fun little challenge right
here, a little to launch right at the end.

99
00:05:28.182 --> 00:05:29.822
So let's start with reading a file.

100
00:05:29.822 --> 00:05:32.819
That shouldn't be too hard to do,
we've done it before,

101
00:05:32.819 --> 00:05:34.360
I believe in everybody here.

102
00:05:34.360 --> 00:05:38.536
If you don't believe in yourself,
well, I'm sorry.

103
00:05:38.536 --> 00:05:42.722
All right, so
let's do a result of the unit.

104
00:05:42.722 --> 00:05:44.202
Remember the unit?

105
00:05:44.202 --> 00:05:49.302
And I'm gonna go use Anyhow,
oopsies, anyhow: :result.

106
00:05:49.302 --> 00:05:52.389
So this is just the fun thing that I don't
even have to specify an error if that's

107
00:05:52.389 --> 00:05:53.600
what makes anyhow so dang fun.

108
00:05:53.600 --> 00:05:57.142
I delete all this and
I'm gonna go return, Ok unit.

109
00:05:57.142 --> 00:05:58.122
So there we go.

110
00:05:58.122 --> 00:06:01.402
Now I can just use the question
mark operator really easily and

111
00:06:01.402 --> 00:06:03.623
just start unwrapping the things I want.

112
00:06:03.623 --> 00:06:08.560
Cuz if our program fails in any way,
the whole program is gonna crash.

113
00:06:08.560 --> 00:06:12.060
I don't care at this point
because it's a toy program.

114
00:06:12.060 --> 00:06:12.770
We can let it crash.

115
00:06:12.770 --> 00:06:15.997
All right, so first, let's read the file.

116
00:06:15.997 --> 00:06:23.457
So let file = std::fs::read_to_string,
and it's shapes, if you remember that.

117
00:06:23.457 --> 00:06:25.475
And then I can just do
the little question mark.

118
00:06:25.475 --> 00:06:27.717
Look at that, now we just have a string.

119
00:06:27.717 --> 00:06:31.835
If it was an error, the error is returned,
if it's a value, we get the value.

120
00:06:31.835 --> 00:06:36.815
Yay, question mark, no, if error equals
nil, there we go, or does not equal nil.

121
00:06:36.815 --> 00:06:41.726
So now that we have the file,
I wanna go through the file and

122
00:06:41.726 --> 00:06:44.441
convert each line into a shape.

123
00:06:44.441 --> 00:06:46.830
But what's the problem?

124
00:06:46.830 --> 00:06:50.790
Well, if we look at our shapes file,
it's rect circle.

125
00:06:50.790 --> 00:06:54.100
It doesn't quite line up with how
we parse from a string, right?

126
00:06:54.100 --> 00:06:58.204
Cuz the rectangle parse from
a string requires four things, and

127
00:06:58.204 --> 00:07:00.040
they're all numbers.

128
00:07:00.040 --> 00:07:02.984
Whereas this one, well,
there's additional information.

129
00:07:02.984 --> 00:07:05.204
So we almost need something
to kinda wrap this.

130
00:07:05.204 --> 00:07:08.712
So I'm gonna go like this, enum Shape,

131
00:07:08.712 --> 00:07:12.752
it's gonna be a Circle
with a subtype Circle.

132
00:07:12.752 --> 00:07:16.332
Or it's gonna be a Rect
with a Rect subtype.

133
00:07:16.332 --> 00:07:18.452
Look at that, okay.

134
00:07:18.452 --> 00:07:21.253
So now we can kinda do this
heterogeneous list to do that.

135
00:07:21.253 --> 00:07:26.447
And so that means we can do
something like implement FromStr for

136
00:07:26.447 --> 00:07:31.258
Shape, and now we can actually
implement FromStr for it.

137
00:07:31.258 --> 00:07:33.830
Which means we can do something like this.

138
00:07:33.830 --> 00:07:39.250
I can go let type, we can't call it type.

139
00:07:39.250 --> 00:07:44.975
We'll call it (shape,
data) = s.split_once.

140
00:07:47.265 --> 00:07:51.279
&gt;&gt; ThePrimeagen: And
split_once returns us out, what is it?

141
00:07:51.279 --> 00:07:53.836
An option, all right.

142
00:07:53.836 --> 00:07:59.564
And we'll go like this, split_once("
").unwrap_or( Let's return out,

143
00:07:59.564 --> 00:08:03.550
how about an empty string,
and an empty string.

144
00:08:03.550 --> 00:08:04.510
There we go.

145
00:08:04.510 --> 00:08:06.010
That's good enough to me.

146
00:08:06.010 --> 00:08:10.390
That's all we need to do because,
if we didn't get data, that's fine.

147
00:08:10.390 --> 00:08:12.270
We will just error it
out in our processing.

148
00:08:12.270 --> 00:08:15.370
So that means shape is a string,
data is a string.

149
00:08:15.370 --> 00:08:16.753
We handled the option,

150
00:08:16.753 --> 00:08:21.640
because you may not be able to split
the thing once if there's no white space.

151
00:08:21.640 --> 00:08:22.840
That's why it's an option.

152
00:08:22.840 --> 00:08:24.066
I think that makes a lot of sense.

153
00:08:24.066 --> 00:08:27.710
Yeah, Yeah, all right.

154
00:08:27.710 --> 00:08:29.290
I'm gonna do the best thing ever.

155
00:08:29.290 --> 00:08:31.770
I'm gonna do a little
quick match statement.

156
00:08:31.770 --> 00:08:32.950
Now here's the problem.

157
00:08:32.950 --> 00:08:37.541
Match statement now is getting passed in
a stir, which means we need to cover every

158
00:08:37.541 --> 00:08:41.480
single possible string ever
created in this match statement.

159
00:08:41.480 --> 00:08:43.260
So let's start with the easy ones.

160
00:08:43.260 --> 00:08:43.928
How about rect?

161
00:08:43.928 --> 00:08:45.530
Is that what our file is by the way?

162
00:08:46.590 --> 00:08:47.900
Yep, correct and circling.

163
00:08:47.900 --> 00:08:53.661
So, if shape is recked, well,
let's return an Ok because remember,

164
00:08:53.661 --> 00:08:59.990
we're we're dealing with a result,
so we need to keep it as a result.

165
00:08:59.990 --> 00:09:04.240
So an ok, shape, rect.

166
00:09:04.240 --> 00:09:06.520
And now we have access to the data.

167
00:09:06.520 --> 00:09:11.956
So we can go data.parse.

168
00:09:11.956 --> 00:09:14.546
Now what does data dot parse gonna return?

169
00:09:14.546 --> 00:09:16.446
Well it's going to
return the correct type,

170
00:09:16.446 --> 00:09:18.496
because we're telling
it by how we're coding.

171
00:09:18.496 --> 00:09:21.039
It knows that it needs to
return a rectangle, but

172
00:09:21.039 --> 00:09:23.219
it's going to be returning a rectangle.

173
00:09:23.219 --> 00:09:25.430
We're gonna be turning
a result of rectangle.

174
00:09:25.430 --> 00:09:29.520
So, throwing a little question
mark right there, bam, bam, bam.

175
00:09:29.520 --> 00:09:31.911
And we are looking good to go.

176
00:09:31.911 --> 00:09:34.180
Now we got to do it again for circle.

177
00:09:34.180 --> 00:09:38.402
If the thing is a circle,
then let's just do a circle.

178
00:09:38.402 --> 00:09:40.390
And again, we're good to go.

179
00:09:40.390 --> 00:09:41.950
We have a right here.

180
00:09:41.950 --> 00:09:46.680
Lastly, let's match every other
possible string handed to us.

181
00:09:46.680 --> 00:09:53.403
And let's return an err of anyhow,

182
00:09:53.403 --> 00:09:57.450
anyhow, bad shape.

183
00:09:57.450 --> 00:10:00.351
There we go, we could technically
like format the string,

184
00:10:00.351 --> 00:10:03.350
such that we could actually
include what you provide us.

185
00:10:03.350 --> 00:10:06.871
We could really do something
a little bit better here.

186
00:10:06.871 --> 00:10:12.700
Well, let's go up here, and
what is our error type?

187
00:10:12.700 --> 00:10:16.070
Well, it's an anyhow err.

188
00:10:16.070 --> 00:10:17.000
All right, fantastic.

189
00:10:17.000 --> 00:10:17.870
Look at that.

190
00:10:17.870 --> 00:10:22.679
So now we can actually parse out
all the shapes possible with this

191
00:10:22.679 --> 00:10:27.667
cool little trait implementation
on an enum that every single type

192
00:10:27.667 --> 00:10:30.910
inside of it also has an enum from string.

193
00:10:30.910 --> 00:10:32.800
So it just, it just works.

194
00:10:32.800 --> 00:10:34.394
Yay, right?

195
00:10:34.394 --> 00:10:35.090
Is that a yay?

196
00:10:35.090 --> 00:10:35.880
That's a yay for me.

197
00:10:35.880 --> 00:10:40.080
Okay, so let's see,
what are we gonna do next?

198
00:10:40.080 --> 00:10:45.980
Next, we have to be able to make
these shapes collide, right?

199
00:10:45.980 --> 00:10:48.923
Because that's another part of us,
so we need to check for

200
00:10:48.923 --> 00:10:51.094
adjacent collisions, how can we do that?

201
00:10:53.447 --> 00:10:55.048
&gt;&gt; ThePrimeagen: What does our
blanket implementation need?

202
00:10:55.048 --> 00:10:58.392
Points, contains, so,

203
00:10:58.392 --> 00:11:03.410
let's implement points, for shape.

204
00:11:05.430 --> 00:11:08.540
Well, it's really not that hard, because
there's only two possible shapes, right?

205
00:11:09.760 --> 00:11:12.722
So let's match self.

206
00:11:15.016 --> 00:11:19.319
&gt;&gt; ThePrimeagen: If it's a circle,
circle dot points.

207
00:11:21.171 --> 00:11:25.748
&gt;&gt; ThePrimeagen: If it's a rectangle,
it says r dot points,

208
00:11:25.748 --> 00:11:29.600
and let's return each one of these.

209
00:11:29.600 --> 00:11:32.060
I know or I can just hear the rest
stations getting so angry.

210
00:11:33.476 --> 00:11:35.002
Don't you do that, there we go.

211
00:11:35.002 --> 00:11:37.030
Look at that,
it's pretty straightforward, right?

212
00:11:37.030 --> 00:11:39.290
I bet you there's a way we
could actually make it.

213
00:11:39.290 --> 00:11:43.104
I think there's probably a way we could do
some sort of sweet blanket implementation

214
00:11:43.104 --> 00:11:46.560
that makes this possible, without
having to manually write all these out.

215
00:11:46.560 --> 00:11:48.880
I'd probably have to think about it and
play around with it.

216
00:11:48.880 --> 00:11:52.500
I bet you there's a way we could just
make this automatically happen for us.

217
00:11:52.500 --> 00:11:53.893
I just don't know how to do that.

218
00:11:53.893 --> 00:11:56.960
Not yet, all right.

219
00:11:56.960 --> 00:12:02.040
Points contains, we'll do the same thing,
contains for shape.

220
00:12:02.040 --> 00:12:06.430
Well, again, all we need to do here is,
let's see what is contains here.

221
00:12:06.430 --> 00:12:07.270
Get out, get out of here.

222
00:12:08.450 --> 00:12:10.720
Contains requires us to do this.

223
00:12:10.720 --> 00:12:14.322
So now all I have to do is I'm gonna
just jump up here, grab that one,

224
00:12:14.322 --> 00:12:16.680
jump back down here, paste it in.

225
00:12:16.680 --> 00:12:21.982
And just simply jump over here, and
contains, points, point, there we go.

226
00:12:21.982 --> 00:12:27.830
C contains point, point, there we go.

227
00:12:27.830 --> 00:12:29.638
We've now implemented points and

228
00:12:29.638 --> 00:12:33.569
contains, which means what happens
with their blanket implementation?

229
00:12:35.790 --> 00:12:39.240
Well that means we can compare
a circle against a shape.

230
00:12:39.240 --> 00:12:40.700
We can pair a shape against a shape.

231
00:12:40.700 --> 00:12:42.910
We can pair a rect against a shape.

232
00:12:42.910 --> 00:12:46.635
We can do any cross section because we
have defined our blanket implementation

233
00:12:46.635 --> 00:12:47.350
that way.

234
00:12:47.350 --> 00:12:50.676
So this should just auto-magically work.

235
00:12:50.676 --> 00:12:54.098
Which is kind of neat,
I think it's kind of neat.

236
00:12:54.098 --> 00:12:56.431
I think it's kind of neat.

237
00:12:59.023 --> 00:13:00.960
&gt;&gt; ThePrimeagen: All right,
well that was kind of fun for me to say.

238
00:13:00.960 --> 00:13:03.956
Anyways, so now that we have a string and
we have the file,

239
00:13:03.956 --> 00:13:05.680
let's split it by line, right?

240
00:13:06.930 --> 00:13:10.538
All right, so each line,
now what we need to do is for

241
00:13:10.538 --> 00:13:13.820
each line we need to turn it into a shape.

242
00:13:13.820 --> 00:13:19.110
Something like this,
filter map, and x dot parse.

243
00:13:19.110 --> 00:13:20.220
And let's give it a shape.

244
00:13:21.410 --> 00:13:24.474
So that way it knows to use shape and
then go, okay.

245
00:13:24.474 --> 00:13:29.130
If it errs we're just gonna ignore
the err and just keep on trucking along.

246
00:13:29.130 --> 00:13:32.223
So we're just gonna only
successfully parse,

247
00:13:32.223 --> 00:13:35.169
we're gonna only parse successful shapes.

248
00:13:35.169 --> 00:13:36.984
There we go, that seems about right.

249
00:13:36.984 --> 00:13:39.680
So now we're like mostly through this.

250
00:13:39.680 --> 00:13:43.145
We have our lines, we have our filters, so

251
00:13:43.145 --> 00:13:47.130
how are we going to do
the adjacent collisions?

252
00:13:47.130 --> 00:13:52.075
Well, first let's collect, and
we'll collect it into a vec.

253
00:13:54.415 --> 00:13:57.706
Remember, we can do that and
so look this, let shapes.

254
00:13:57.706 --> 00:14:00.351
So remember that underscore
is able to go okay, well,

255
00:14:00.351 --> 00:14:01.965
I'll just use shape right here.

256
00:14:01.965 --> 00:14:04.633
I already kind of know what's
going on since I can kind of guess

257
00:14:04.633 --> 00:14:05.925
what's happening.

258
00:14:05.925 --> 00:14:07.505
Here you go, here's your proper thing.

259
00:14:07.505 --> 00:14:12.490
So it's just avoiding me having to write,
the type multiple times.

260
00:14:12.490 --> 00:14:14.272
There we go, so now we have our shapes.

261
00:14:14.272 --> 00:14:16.670
So now let's do our adjacent collisions.

262
00:14:16.670 --> 00:14:19.790
All right, so
this is where the fun is gonna happen.

263
00:14:19.790 --> 00:14:25.885
Let's go like this, shapes dot,
let's see, shapes, iter.

264
00:14:25.885 --> 00:14:26.775
Now we create an iterator.

265
00:14:26.775 --> 00:14:30.015
Remember, this iterator doesn't consume,
it just refers to.

266
00:14:31.465 --> 00:14:35.316
So underneath the hood, I don't know
what the exact implementation does, but

267
00:14:35.316 --> 00:14:39.240
it just takes a reference to vector and
turns that into an iterator effectively.

268
00:14:39.240 --> 00:14:40.448
You could imagine that's what it does.

269
00:14:40.448 --> 00:14:43.810
It already has a vector or a from, or

270
00:14:43.810 --> 00:14:48.590
in pull into iterator for
reference of vector.

271
00:14:48.590 --> 00:14:50.440
So probably that's my
guess of what it does.

272
00:14:50.440 --> 00:14:51.960
What it exactly does, I don't know.

273
00:14:51.960 --> 00:14:53.440
So there we go, we have shapes iter.

274
00:14:53.440 --> 00:14:54.900
Now let's do this one, are you ready?

275
00:14:54.900 --> 00:14:57.440
We're going to skip one, who here?

276
00:14:57.440 --> 00:14:58.840
Yeah, this is feeling good, right?

277
00:14:58.840 --> 00:15:04.774
So we don't do the first one, then let's
zip it with another shapes dot iter.

278
00:15:04.774 --> 00:15:07.492
Yeah, we're getting wild tonight, okay?

279
00:15:07.492 --> 00:15:09.190
And let's do this one.

280
00:15:09.190 --> 00:15:13.570
Let's take shapes dot length minus 1.

281
00:15:13.570 --> 00:15:17.140
So now we have two
iterators zipped together.

282
00:15:18.520 --> 00:15:22.378
One going from 1 up until the last one,
or 1 going from skipping

283
00:15:22.378 --> 00:15:27.100
one all the way to the end, the other
one going from 0, skipping the last one.

284
00:15:27.100 --> 00:15:30.510
So they're offset, so that we can do
all of our adjacent collision testing.

285
00:15:32.080 --> 00:15:38.865
Fun, all right, so now,
let's jump in here and go filter,

286
00:15:38.865 --> 00:15:44.065
which is going to be a b,
and go a b, collide b.

287
00:15:44.065 --> 00:15:45.574
Well, we just kind of did it.

288
00:15:45.574 --> 00:15:48.298
Just kind of went and so
now we have this thing.

289
00:15:48.298 --> 00:15:51.517
But look at what happens here,
it says hey,

290
00:15:51.517 --> 00:15:55.006
We don't have points for
a reference to shape.

291
00:15:55.006 --> 00:15:56.840
The trade points is implemented for shape.

292
00:15:56.840 --> 00:15:59.769
So I mean technically we could
potentially just go like that.

293
00:15:59.769 --> 00:16:02.360
Just throw these things on
here if we really wanted to.

294
00:16:02.360 --> 00:16:03.617
And we'll just get that.

295
00:16:03.617 --> 00:16:06.615
So implement it for the reference,
not for the actual item.

296
00:16:06.615 --> 00:16:09.520
And there we go,
we have this unused filter now.

297
00:16:09.520 --> 00:16:14.284
And if we really wanna we can just simply
collect it into a vector of some sort.

298
00:16:14.284 --> 00:16:16.870
7UP, let shapes equals this.

299
00:16:16.870 --> 00:16:19.840
We'll just redo this or actually,
we can call this collisions.

300
00:16:19.840 --> 00:16:20.340
There we go.

301
00:16:22.998 --> 00:16:23.907
No.

302
00:16:23.907 --> 00:16:25.810
Yay.
But we need type annotations.

303
00:16:25.810 --> 00:16:27.300
It doesn't know what it is.

304
00:16:27.300 --> 00:16:29.104
So wherever you wanna put
the type annotations,

305
00:16:29.104 --> 00:16:30.736
if you wanna use the TurboFish operator..

306
00:16:30.736 --> 00:16:33.490
Go for it and there we go.

307
00:16:33.490 --> 00:16:38.097
This will just have enough information
to know, because right now it knows that

308
00:16:38.097 --> 00:16:41.481
at this level right here,
it is getting a tuple of shapes.

309
00:16:41.481 --> 00:16:44.870
So now I'm just collecting them all,
or a tuple of reference shapes.

310
00:16:44.870 --> 00:16:48.519
So if we look right here,
we'll see tuple of reference shapes.

311
00:16:48.519 --> 00:16:49.060
Fantastic.

312
00:16:50.760 --> 00:16:54.215
And now we can print LN.

313
00:16:54.215 --> 00:16:56.570
Let's see, what is it?

314
00:16:56.570 --> 00:16:58.948
Shapes?

315
00:16:58.948 --> 00:17:00.869
Shapes doesn't implement the debug trait.

316
00:17:00.869 --> 00:17:04.691
So instead of just doing that,
let's just, can we jump up here and

317
00:17:04.691 --> 00:17:06.344
just implement debug on it?

318
00:17:06.344 --> 00:17:08.960
I'm getting kinda lazy here and
we're kinda running out of time.

319
00:17:08.960 --> 00:17:11.839
I don't think that's gonna work out
because these ones don't implement

320
00:17:11.839 --> 00:17:12.543
the debug trait.

321
00:17:12.543 --> 00:17:15.110
So I'll just jump in here and
implement the debug trait.

322
00:17:15.110 --> 00:17:17.477
I know we did that whole displaying.

323
00:17:17.477 --> 00:17:18.470
No let's not do that.

324
00:17:18.470 --> 00:17:19.159
It's not worth it.

325
00:17:19.159 --> 00:17:20.380
Hashtag, it's not worth it.

326
00:17:22.590 --> 00:17:24.414
Jump back.

327
00:17:24.414 --> 00:17:26.510
Let's not fall victim to laziness.

328
00:17:26.510 --> 00:17:27.988
All right, here we go.

329
00:17:27.988 --> 00:17:32.227
We'll just have to do Impl Display for

330
00:17:32.227 --> 00:17:36.870
shape and let's just what do we wanna do?

331
00:17:38.860 --> 00:17:41.517
Take that guy and
just do the exact same statement.

332
00:17:41.517 --> 00:17:44.310
Take a match statement, paste it in here.

333
00:17:44.310 --> 00:17:49.624
If it's a circle,
then we can just simply do let's see,

334
00:17:49.624 --> 00:17:54.629
what do we wanna do we wanna
do right bang for matter c.

335
00:17:58.976 --> 00:18:00.734
&gt;&gt; ThePrimeagen: Did I not
implement display for circle?

336
00:18:00.734 --> 00:18:02.663
Dang it!
We didn't even do implement display

337
00:18:02.663 --> 00:18:03.197
for circle.

338
00:18:03.197 --> 00:18:05.620
We fell apart here, right at the end.

339
00:18:05.620 --> 00:18:06.963
All right,
we're gonna keep on going though.

340
00:18:06.963 --> 00:18:08.280
We're gonna keep on going.

341
00:18:08.280 --> 00:18:09.112
We got this.

342
00:18:09.112 --> 00:18:11.300
Never let them take you down.

343
00:18:11.300 --> 00:18:12.727
All right, jump over in here.

344
00:18:12.727 --> 00:18:13.830
Jump to the circle.

345
00:18:13.830 --> 00:18:16.790
If meant display for circle.

346
00:18:16.790 --> 00:18:23.380
All right take it in here
return right bang F circle.

347
00:18:23.380 --> 00:18:26.519
And we're gonna have our two points
right here that's where we are with

348
00:18:26.519 --> 00:18:27.415
the radius of that.

349
00:18:27.415 --> 00:18:33.810
So we can go self.x, self.y,
self.radius, and boom.

350
00:18:33.810 --> 00:18:34.669
Now we have this.

351
00:18:34.669 --> 00:18:35.530
This has it.

352
00:18:35.530 --> 00:18:37.021
Hey area, we have it.

353
00:18:37.021 --> 00:18:39.610
An unused import,
get out of here unused import.

354
00:18:39.610 --> 00:18:41.916
And so
now we have all of it all the way down.

355
00:18:41.916 --> 00:18:42.825
And look at this.

356
00:18:42.825 --> 00:18:47.540
We have shapes, which means we can now,
instead of collecting,

357
00:18:47.540 --> 00:18:51.340
we could just for
each is kinda nice, right?

358
00:18:51.340 --> 00:18:52.748
I kinda like for each.

359
00:18:52.748 --> 00:18:55.068
I was just gonna print
them all out anyways.

360
00:18:55.068 --> 00:18:56.743
So we can go like this.

361
00:18:56.743 --> 00:19:04.245
So, print ln A, or collides with that.

362
00:19:06.338 --> 00:19:08.451
&gt;&gt; ThePrimeagen: Look at
that big beuty right there.

363
00:19:08.451 --> 00:19:11.805
And in the end, this is all we have.

364
00:19:11.805 --> 00:19:13.314
That's a lot of stuff that just went on.

365
00:19:13.314 --> 00:19:16.983
And now we can use some pretty cool little
iterator combinations to end the day

366
00:19:16.983 --> 00:19:19.985
finding all the collisions in
the list adjacent to each other.

367
00:19:21.065 --> 00:19:21.864
No one's excited.

368
00:19:21.864 --> 00:19:23.265
I'm excited.

369
00:19:23.265 --> 00:19:25.865
So let's go cargo run.

370
00:19:25.865 --> 00:19:29.410
And look at that we got
absolutely nothing happening.

371
00:19:29.410 --> 00:19:30.570
Why don't we get anything happening?

372
00:19:30.570 --> 00:19:32.340
Did we break something right here?

373
00:19:32.340 --> 00:19:35.896
We might have actually broke something,
so let's go print ln shapes.

374
00:19:35.896 --> 00:19:36.540
Let's find out.

375
00:19:36.540 --> 00:19:38.067
Let's just throw in here.

376
00:19:38.067 --> 00:19:40.980
Man, I'm no longer awesome.

377
00:19:40.980 --> 00:19:42.442
I thought I was awesome.

378
00:19:42.442 --> 00:19:44.020
I thought I was a brilliant person.

379
00:19:44.020 --> 00:19:45.270
There we go.

380
00:19:45.270 --> 00:19:46.386
Do we not have?

381
00:19:46.386 --> 00:19:54.003
I bet if we go look at our shapes
quick little perusing of those shapes.

382
00:19:54.003 --> 00:19:56.168
I don't think any of them
collide with each other.

383
00:19:56.168 --> 00:20:00.010
Yeah, I don't think so.

384
00:20:00.010 --> 00:20:02.276
So let's go like that.

385
00:20:05.069 --> 00:20:06.034
&gt;&gt; ThePrimeagen: Because
that cloud was something?

386
00:20:06.034 --> 00:20:09.029
That should collide with something.

387
00:20:09.029 --> 00:20:10.350
&gt;&gt; Speaker 3: But it doesn't collide.

388
00:20:10.350 --> 00:20:15.878
So three collides with two with the first
one, but it never gets compared to that.

389
00:20:15.878 --> 00:20:17.038
&gt;&gt; ThePrimeagen: You're right.
Yeah, good call.

390
00:20:17.038 --> 00:20:20.303
My own devices just got me.

391
00:20:20.303 --> 00:20:21.320
So we'll put this at 18.

392
00:20:21.320 --> 00:20:24.760
There we go.

393
00:20:24.760 --> 00:20:25.882
Got them.

394
00:20:25.882 --> 00:20:28.444
There we go.
So we now collided circle with circle and

395
00:20:28.444 --> 00:20:29.843
rectangle with circle.

396
00:20:29.843 --> 00:20:30.820
Look at that.

397
00:20:30.820 --> 00:20:32.650
How could that even be?

398
00:20:32.650 --> 00:20:36.040
What are the chances that
I got had by my own data?

399
00:20:36.040 --> 00:20:38.099
Ugh, it feels so bad.

