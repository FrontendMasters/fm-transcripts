WEBVTT

1
00:00:00.120 --> 00:00:02.074
So now let's create a rectangle.

2
00:00:02.074 --> 00:00:03.150
Let's make sure everything's working.

3
00:00:03.150 --> 00:00:07.457
So if we go to our main file, we've
created a rectangle, this is fantastic.

4
00:00:07.457 --> 00:00:11.496
Now, there's something that happens a lot
with Rust, is that there's some set of

5
00:00:11.496 --> 00:00:15.660
data structures that require you to
implement what is called a default.

6
00:00:15.660 --> 00:00:19.326
Meaning that if you want to be a part of
the data structure, it needs to be able to

7
00:00:19.326 --> 00:00:22.401
just create your struct without
knowing how it's implemented.

8
00:00:22.401 --> 00:00:24.280
It just needs to be able to do that.

9
00:00:24.280 --> 00:00:25.307
And so we're gonna help it.

10
00:00:25.307 --> 00:00:27.370
And plus,
this is kind of annoying to write, right?

11
00:00:27.370 --> 00:00:30.012
I don't wanna have to write
all that out if I just want,

12
00:00:30.012 --> 00:00:32.030
just a rectangle to test really quickly.

13
00:00:32.030 --> 00:00:33.488
I don't want it to write all that out.

14
00:00:33.488 --> 00:00:38.444
So we're gonna implement our first
foreign trait, meaning we own the type,

15
00:00:38.444 --> 00:00:42.490
but we're gonna implement
someone else's trait.

16
00:00:42.490 --> 00:00:45.410
So let's go over to our rectangle file.

17
00:00:51.316 --> 00:00:57.754
Awesome, okay, so we're our rectangle
file, and I'm gonna go like this,

18
00:00:57.754 --> 00:01:02.226
impl Default for,
I have copilot back on, for Rect.

19
00:01:02.226 --> 00:01:05.240
Of course, use your load code actions.

20
00:01:05.240 --> 00:01:09.029
And what this will do is it will allow
me to be able to just call default and

21
00:01:09.029 --> 00:01:11.170
produce a default rectangle.

22
00:01:11.170 --> 00:01:13.836
So if you look at this,
what is Self referred to?

23
00:01:13.836 --> 00:01:17.980
Self is kinda like a special word that
refers to its implementation type.

24
00:01:17.980 --> 00:01:20.577
For this one, we're not really
saving anything, it's just Rect.

25
00:01:20.577 --> 00:01:22.858
You could technically just say Rect, but

26
00:01:22.858 --> 00:01:27.421
something that's cool about Self is if you
have a bunch of generics or lifetimes and

27
00:01:27.421 --> 00:01:30.790
kinda stuff on it,
you don't have to define all of that.

28
00:01:30.790 --> 00:01:32.452
Self just means everything.

29
00:01:32.452 --> 00:01:35.726
So if we got into something
pretty complicated typed,

30
00:01:35.726 --> 00:01:37.873
it would just do it very easy for us.

31
00:01:37.873 --> 00:01:39.815
So we go like this, return Rect, and

32
00:01:39.815 --> 00:01:43.827
I'm just gonna jump over to my main
file really quickly, yank that out, and

33
00:01:43.827 --> 00:01:47.230
paste this back in cuz I don't
wanna have to type it twice.

34
00:01:47.230 --> 00:01:54.425
There we go, we've implemented default,
0, 0, width 10, height 10.

35
00:01:54.425 --> 00:01:57.125
Kind of cool, right?

36
00:01:57.125 --> 00:01:59.530
Maybe, I don't know,
let's find out what it did.

37
00:01:59.530 --> 00:02:03.657
So once you get done doing that,
go back to your main file,

38
00:02:03.657 --> 00:02:06.200
delete all this definition stuff.

39
00:02:06.200 --> 00:02:11.400
[SOUND] And go colon colon, remember
colon colon accesses the namespace.

40
00:02:11.400 --> 00:02:13.825
If you look at the trait
definition one more time,

41
00:02:13.825 --> 00:02:16.381
you'll notice that there's
no reference to Self.

42
00:02:16.381 --> 00:02:19.235
This is a static method, if you will,
kind of like in TypeScript.

43
00:02:19.235 --> 00:02:20.855
TypeScript, you do it on the class.

44
00:02:20.855 --> 00:02:24.660
This is kinda like accessing the class,
not the instance.

45
00:02:24.660 --> 00:02:27.276
So I'm saying, hey, Rect default.

46
00:02:27.276 --> 00:02:32.868
This will produce me out a rectangle
that was defined in that default method.

47
00:02:32.868 --> 00:02:34.714
And so
that's what we're doing right there.

48
00:02:34.714 --> 00:02:37.149
Okay, cool,
we now have a nice little default thing.

49
00:02:37.149 --> 00:02:39.732
We've just implemented really
our first foreign trait.

50
00:02:39.732 --> 00:02:42.264
Okay, kinda cool, kinda cool, right?

51
00:02:42.264 --> 00:02:45.730
Let's get better and faster.

52
00:02:45.730 --> 00:02:49.221
All right, so
the points are in the rectangle,

53
00:02:49.221 --> 00:02:53.247
that was a Zoolander joke,
and I just read it out loud.

54
00:02:53.247 --> 00:02:57.101
I'm not supposed to read out titles, but I
want to be able to print out the rectangle

55
00:02:57.101 --> 00:02:59.540
now, but
I don't wanna debug print it out, right?

56
00:02:59.540 --> 00:03:03.602
I don't wanna have that big pretty print,
I want to be able to print it like this.

57
00:03:03.602 --> 00:03:06.620
Just print it like I'm printing a number.

58
00:03:06.620 --> 00:03:07.768
Well, we can do that.

59
00:03:07.768 --> 00:03:11.190
We can do that via the display trait.

60
00:03:11.190 --> 00:03:14.768
Again, another thing that
is just kind of Rust.

61
00:03:14.768 --> 00:03:18.500
We're now starting to integrate
with the standard library.

62
00:03:18.500 --> 00:03:21.866
I want to be able to use the standard
stuff to be able to interact.

63
00:03:21.866 --> 00:03:25.441
So we're gonna go over here,
we're gonna go to our rectangle, and

64
00:03:25.441 --> 00:03:27.270
let's implement another trait.

65
00:03:28.520 --> 00:03:31.180
So I'm gonna do this, impl Display.

66
00:03:31.180 --> 00:03:35.414
If you have your LSP working,
you want to use standard format display.

67
00:03:35.414 --> 00:03:38.309
Don't use standard path display,
they're different.

68
00:03:38.309 --> 00:03:40.140
One's an interface,
the other one's a struct.

69
00:03:40.140 --> 00:03:43.787
So there we go, impl Display for Rect.

70
00:03:43.787 --> 00:03:46.982
Now, this one's a bit weird.

71
00:03:46.982 --> 00:03:50.303
Look at the size that method
it just looks disgusting.

72
00:03:50.303 --> 00:03:53.198
It takes in a read only reference to self.

73
00:03:53.198 --> 00:03:57.968
It takes in f, which is a mutable
reference to a Formatter, and

74
00:03:57.968 --> 00:04:01.301
it returns out a Result,
which is an error.

75
00:04:01.301 --> 00:04:02.501
That's a lot of stuff.

76
00:04:02.501 --> 00:04:05.864
So hopefully, you have your code
actions working, cuz if you don't,

77
00:04:05.864 --> 00:04:07.386
this would be very hard to type.

78
00:04:07.386 --> 00:04:08.725
I see a lot of typing going on,

79
00:04:08.725 --> 00:04:11.473
which makes me think you don't
have your code action setup.

80
00:04:11.473 --> 00:04:12.407
Are you using sublime?

81
00:04:12.407 --> 00:04:13.588
&gt;&gt; I am.

82
00:04:13.588 --> 00:04:16.579
&gt;&gt; Okay, I know you are, I saw that.

83
00:04:16.579 --> 00:04:21.343
All right, look at,
just doing editor shaming, I'm so sorry.

84
00:04:21.343 --> 00:04:24.527
All right, so now that we have that,
I'm gonna go like this,

85
00:04:24.527 --> 00:04:25.887
I'm going to say return.

86
00:04:25.887 --> 00:04:27.710
I mean,
lot of times people don't use return.

87
00:04:27.710 --> 00:04:31.276
This is one of those times where I can
kinda see why implicit returns feel good,

88
00:04:31.276 --> 00:04:32.261
but I just refuse it.

89
00:04:32.261 --> 00:04:33.760
All right, I'm gonna go write.

90
00:04:33.760 --> 00:04:37.550
write is a lot like print, except for
it takes in a formatter as opposed to

91
00:04:37.550 --> 00:04:41.270
just dumping it out on the standard in or
the standard out.

92
00:04:41.270 --> 00:04:44.636
So I'm gonna go write,
here's my formatter,

93
00:04:44.636 --> 00:04:48.518
and then I'm gonna go, okay,
I want to go Rectangle.

94
00:04:48.518 --> 00:04:50.910
And you can just do however you
want to display your rectangle.

95
00:04:50.910 --> 00:04:52.472
Me personally, I'm gonna do this.

96
00:04:52.472 --> 00:04:55.379
I'm gonna do the x, y right there, and

97
00:04:55.379 --> 00:04:58.648
then I want the height by width,
like that.

98
00:04:58.648 --> 00:05:00.730
Yeah, that feels good, I like that.

99
00:05:00.730 --> 00:05:03.060
For me, that's how I'd want
my rectangle to be displayed.

100
00:05:04.200 --> 00:05:06.273
That's how I want my cucumbers pickled.

101
00:05:06.273 --> 00:05:11.276
So I'm gonna go self.x,
self.y, self.width,

102
00:05:11.276 --> 00:05:16.290
self.height, and
then maybe format a little bit.

103
00:05:17.534 --> 00:05:20.850
I forgot a self in there, there we go.

104
00:05:20.850 --> 00:05:24.187
And so just like print-ln,
it's using the same things,

105
00:05:24.187 --> 00:05:26.308
but now I've implemented for Rect.

106
00:05:26.308 --> 00:05:28.040
And so now my rectangle,

107
00:05:28.040 --> 00:05:33.387
I should be able to just print it
out with two little squirlies.

108
00:05:33.387 --> 00:05:36.770
I call them squirlies,
I don't know what you guys call them.

109
00:05:36.770 --> 00:05:38.005
I saw you loud [INAUDIBLE].

110
00:05:38.005 --> 00:05:40.910
We've [LAUGH] hurt my feelings over here.

111
00:05:40.910 --> 00:05:42.239
&gt;&gt; No, I do too.

112
00:05:42.239 --> 00:05:43.710
&gt;&gt; It's the best way to refer to the mess.

113
00:05:43.710 --> 00:05:47.698
If you didn't get it displayed,
you can always just derive debug and

114
00:05:47.698 --> 00:05:48.949
pretty print it out.

115
00:05:48.949 --> 00:05:54.245
But I just want to show you that you
can start doing a lot of interacting

116
00:05:54.245 --> 00:06:00.470
with the standard library from Rust by
implementing traits on your structs.

117
00:06:00.470 --> 00:06:04.649
So let's go back to main,
and I can just do this now.

118
00:06:06.896 --> 00:06:10.186
Now, I can jump here, and
cargo run, and look at that,

119
00:06:10.186 --> 00:06:12.219
rectangle at origin 10 by 10.

120
00:06:12.219 --> 00:06:14.180
I made that statement,
that's my statement.

121
00:06:14.180 --> 00:06:16.622
And so it's pretty cool, right?

122
00:06:16.622 --> 00:06:18.968
Which also gave us another method,

123
00:06:18.968 --> 00:06:24.532
because we implemented display underneath
the hood, it now also gives us to_str.

124
00:06:24.532 --> 00:06:28.921
It's pretty cool, we're gonna
learn how that happened here very,

125
00:06:28.921 --> 00:06:31.351
very soon, but that's pretty cool.

126
00:06:31.351 --> 00:06:32.920
That's super duper.

127
00:06:32.920 --> 00:06:35.183
We can now stringify our rectangle.

128
00:06:35.183 --> 00:06:40.050
If you have a reference to the website,
by the way, you can just cut and paste it.

129
00:06:40.050 --> 00:06:42.855
If you can't keep up or
you get a little out of sync,

130
00:06:42.855 --> 00:06:45.550
you can always grab it
from this course website.

131
00:06:45.550 --> 00:06:47.856
All right, so
can we do this in TypeScript?

132
00:06:47.856 --> 00:06:50.872
So this is the one thing I said I was
gonna do in TypeScript just to show you

133
00:06:50.872 --> 00:06:52.290
it's possible.

134
00:06:52.290 --> 00:06:53.900
So I'm gonna go like this,
I'm gonna jump in here.

135
00:06:53.900 --> 00:06:59.364
Even though I didn't move all the files
around and do all the right enterprise

136
00:06:59.364 --> 00:07:04.424
JavaScript going on here,
I'm gonna go like this, toString return.

137
00:07:04.424 --> 00:07:09.648
I want to just yank that one and
paste this one in here and return this.

138
00:07:09.648 --> 00:07:11.780
And so you can imagine, let's see,
how do we do this here?

139
00:07:11.780 --> 00:07:14.664
We wanna go, yeah, that, yeah.

140
00:07:14.664 --> 00:07:15.970
And is it $1?

141
00:07:15.970 --> 00:07:22.108
It's $1, this.x, this.y,

142
00:07:22.108 --> 00:07:28.466
this.width, and this.height.

143
00:07:28.466 --> 00:07:33.670
So in JavaScript, I can effectively
accomplish the same thing by doing that.

144
00:07:33.670 --> 00:07:37.874
If I go console.log,

145
00:07:37.874 --> 00:07:44.966
new Rectangle 0, 0, 10, 10.

146
00:07:44.966 --> 00:07:50.750
Yeah, yeah, I do that and
I go npx, and I run it.

147
00:07:50.750 --> 00:07:53.236
You'll notice that I'll
get the same result.

148
00:07:53.236 --> 00:07:56.177
So that's kinda something that's
kinda cool about JavaScript.

149
00:07:56.177 --> 00:07:59.360
It does allow you to hook into some
level of them in a pretty standard way.

150
00:07:59.360 --> 00:08:01.786
So you just have to implement
the toString method.

