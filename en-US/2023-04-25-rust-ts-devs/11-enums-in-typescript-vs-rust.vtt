WEBVTT

1
00:00:00.000 --> 00:00:02.848
So enums, my goodness,
everyone here hates enums, right?

2
00:00:02.848 --> 00:00:05.257
Everyone here's a good
TypeScript developer.

3
00:00:05.257 --> 00:00:08.366
We all say it together,
I hate enums, fantastic.

4
00:00:08.366 --> 00:00:11.358
Everyone said it, you couldn't hear
it out there on frontendmasters.com.

5
00:00:11.358 --> 00:00:16.999
So even Matt Pocock, the TypeScript wizard
himself, says they're considered harmful.

6
00:00:16.999 --> 00:00:17.608
So there you go.

7
00:00:17.608 --> 00:00:19.014
So why are we learning enums?

8
00:00:19.014 --> 00:00:22.682
Well, Rust enums are just
not like TypeScript enums.

9
00:00:22.682 --> 00:00:25.209
They have the same word, but
they're just nothing the same.

10
00:00:25.209 --> 00:00:27.761
I would argue that they're
the greatest thing to ever exist.

11
00:00:27.761 --> 00:00:31.812
They actually, if Go had it,
Go might be the best language ever.

12
00:00:31.812 --> 00:00:35.350
Just because this is the one thing
that makes me just insane about Go,

13
00:00:35.350 --> 00:00:37.915
is that you'll always do
these interface lists.

14
00:00:37.915 --> 00:00:41.431
And you're trying to operate over,
you just want the type and

15
00:00:41.431 --> 00:00:45.838
then you have to do all this type checking
and runtime and it just feels awful.

16
00:00:45.838 --> 00:00:47.807
Whereas with Rust, the types and

17
00:00:47.807 --> 00:00:51.332
the heterogeneous style of it
works fantastic with enums.

18
00:00:51.332 --> 00:00:53.105
You'll see really soon here.

19
00:00:53.105 --> 00:00:57.848
Well, I'm gonna probably just due to time,
I'm gonna walk through and type it,

20
00:00:57.848 --> 00:00:59.517
try to follow along as we go.

21
00:00:59.517 --> 00:01:02.948
But we're gonna create an enum color with
red, blue, green, in Typescript, and

22
00:01:02.948 --> 00:01:03.941
then you can start now.

23
00:01:03.941 --> 00:01:08.022
And then we're gonna create
a singular method, printColor,

24
00:01:08.022 --> 00:01:12.573
which is gonna print out red for
red, green for green, blue for blue.

25
00:01:17.507 --> 00:01:20.435
Which means you can also erase all
the previous stuff we've done.

26
00:01:20.435 --> 00:01:21.752
So I'll do it while you guys do it.

27
00:01:21.752 --> 00:01:27.765
So enum Color, Red, Green, my goodness,

28
00:01:27.765 --> 00:01:34.235
Green, and Blue, all right,
that's the colors.

29
00:01:34.235 --> 00:01:40.990
Then we're gonna go, fn printColor,
it's gonna take in a color.

30
00:01:40.990 --> 00:01:44.060
Wrong fn, function, there we go.

31
00:01:44.060 --> 00:01:48.346
And now, we're gonna just simply do,
I'll do a switch statement.

32
00:01:48.346 --> 00:01:54.919
And I'm gonna go case Color.Green,
console,

33
00:01:54.919 --> 00:01:59.617
my goodness, console.log green.

34
00:01:59.617 --> 00:02:00.703
I forgot you have to add breaks.

35
00:02:00.703 --> 00:02:04.019
I always forget you have to
add breaks in this language?

36
00:02:04.019 --> 00:02:05.906
There we go, and break.

37
00:02:07.343 --> 00:02:11.191
I always find that every time
I use a switch statement,

38
00:02:11.191 --> 00:02:13.543
I feel like I've made a mistake.

39
00:02:15.448 --> 00:02:18.297
All right, and if I'm not mistaken,

40
00:02:18.297 --> 00:02:23.386
I think this was the order I had it
in to make it perfect, there we go.

41
00:02:23.386 --> 00:02:25.928
I'm gonna say it's right here,
I'm gonna definitely say it's right there.

42
00:02:25.928 --> 00:02:28.928
Okay, I want it to be the same as
the code I put on the other screen,

43
00:02:28.928 --> 00:02:30.197
it's a challenge of mine.

44
00:02:30.197 --> 00:02:33.779
So I can go down here and I call,
printColor and I can pass in,

45
00:02:33.779 --> 00:02:37.309
say, Color.Red, and
it should just print out red for me.

46
00:02:37.309 --> 00:02:39.576
So if I were to go over here,
run TypeScript,

47
00:02:39.576 --> 00:02:41.317
if I've done it correctly, red.

48
00:02:41.317 --> 00:02:44.342
Wow, I'm a TypeScript developer.

49
00:02:44.342 --> 00:02:45.421
Look at that, we've done it.

50
00:02:45.421 --> 00:02:47.101
How fantastic is that, right?

51
00:02:47.101 --> 00:02:49.262
Are you guys getting excited?

52
00:02:49.262 --> 00:02:53.337
I hope everybody's just so pumped up
about enums, cuz it's just so great.

53
00:02:53.337 --> 00:02:58.233
All right, if we go here,
red, green, blue, dang it.

54
00:02:58.233 --> 00:02:59.669
Okay, green was second.

55
00:02:59.669 --> 00:03:02.910
Okay, so I didn't quite nail
the example code, but you get the idea.

56
00:03:02.910 --> 00:03:04.657
Pretty straightforward, right?

57
00:03:04.657 --> 00:03:07.504
I think everyone in here probably
doesn't struggle with that.

58
00:03:07.504 --> 00:03:09.337
So let's do the exact same thing in Rust.

59
00:03:09.337 --> 00:03:11.989
The enum syntax is identical.

60
00:03:11.989 --> 00:03:14.269
So right now, you could open up Rust and
start writing an enum.

61
00:03:14.269 --> 00:03:15.004
You should do that.

62
00:03:15.004 --> 00:03:18.406
And then we're gonna create
a function called print_color,

63
00:03:18.406 --> 00:03:20.536
which is gonna do the exact same thing.

64
00:03:20.536 --> 00:03:23.839
But instead of using a switch statement,
we're gonna use a match statement,

65
00:03:23.839 --> 00:03:27.056
because there is no switch statement
in Rust, they have a match statement.

66
00:03:27.056 --> 00:03:29.950
So I'll give you a small
momentary head start.

67
00:03:29.950 --> 00:03:33.368
Really, it's good for you to start typing,
do it, it'll make you learn.

68
00:03:33.368 --> 00:03:36.046
All right,
I'm gonna start programming it now.

69
00:03:36.046 --> 00:03:39.821
I just wanted to give you a moment so
that way, you can kind of experience it.

70
00:03:39.821 --> 00:03:42.365
If you delete your main function,
it'll get really angry about it.

71
00:03:42.365 --> 00:03:44.813
All right, so I'm gonna go, enum Color.

72
00:03:44.813 --> 00:03:49.743
In fact, it's so same, I'm just gonna jump
up here, grab that one and just paste in.

73
00:03:49.743 --> 00:03:53.294
Boom, look at that,
it's the exact same code, it's identical.

74
00:03:53.294 --> 00:03:57.143
And so now, let's go function print_color,
cuz remember,

75
00:03:57.143 --> 00:03:59.691
they love their snake cases around here.

76
00:03:59.691 --> 00:04:01.885
We're gonna have a color: Color.

77
00:04:01.885 --> 00:04:04.443
Pretty much identical at this point,
right?

78
00:04:04.443 --> 00:04:07.446
And I'm gonna do a match statement and
pass in color.

79
00:04:07.446 --> 00:04:12.264
Now, if you have your LSP foo ready and
you're feeling pretty froggy with it,

80
00:04:12.264 --> 00:04:16.218
you can call code actions and,
boom, it'll fill it in for you.

81
00:04:16.218 --> 00:04:18.719
The Rust Analyzer is fantastic at that.

82
00:04:18.719 --> 00:04:20.068
Notice, it does a bunch of todos?

83
00:04:20.068 --> 00:04:22.826
We talked about todos, that's pretty cool.

84
00:04:22.826 --> 00:04:23.694
So there we go.

85
00:04:23.694 --> 00:04:27.281
So red, I'm gonna println!("red").

86
00:04:27.281 --> 00:04:31.884
And let's go right here, and

87
00:04:31.884 --> 00:04:36.865
now let's do a green, no.

88
00:04:41.724 --> 00:04:44.107
There we go, exact same thing, right?

89
00:04:44.107 --> 00:04:45.932
I mean, this is truly the exact same code,

90
00:04:45.932 --> 00:04:48.879
maybe a little bit more condensed
just because switch statements and

91
00:04:48.879 --> 00:04:51.288
match statements,
they're not quite the same thing.

92
00:04:51.288 --> 00:04:54.828
I wouldn't fault that
inside of TypeScript.

93
00:04:54.828 --> 00:05:00.671
I'm gonna call print_color
with Color.Green, fantastic.

94
00:05:00.671 --> 00:05:04.129
Color::Green, sorry,
when you're using an enum,

95
00:05:04.129 --> 00:05:07.964
you're got to use colon, colon,
that's how you access it.

96
00:05:07.964 --> 00:05:08.689
So there we go.

97
00:05:08.689 --> 00:05:12.108
I'm parsing in green,
it should print out green.

98
00:05:12.108 --> 00:05:15.694
So if I jump over here and go,
cargo run, no, cargo road.

99
00:05:15.694 --> 00:05:17.818
So there we go, green, that's a good joke.

100
00:05:17.818 --> 00:05:20.004
Trust me, it's a great joke.

101
00:05:20.004 --> 00:05:24.770
Look at that, exact same code,
I typed it all out.

102
00:05:24.770 --> 00:05:26.015
First try, all right, awesome.

103
00:05:26.015 --> 00:05:31.070
So right now, you're probably thinking,
enums aren't that cool, right?

104
00:05:31.070 --> 00:05:33.782
That's not that cool, and
you're not giving me anything right now.

105
00:05:33.782 --> 00:05:37.458
Kind of boring, and
you're absolutely right.

106
00:05:37.458 --> 00:05:38.215
Let's try something.

107
00:05:38.215 --> 00:05:41.083
Let's go to our TypeScript file, and
I want you to add the color yellow and

108
00:05:41.083 --> 00:05:41.970
tell me what happens.

109
00:05:41.970 --> 00:05:44.693
Well, I'll just tell you what
happens since I'm already over here.

110
00:05:44.693 --> 00:05:48.040
I'm gonna add yellow, what happens?

111
00:05:50.039 --> 00:05:52.146
Nothing, right?

112
00:05:52.146 --> 00:05:54.174
Everything's fine, your program is great.

113
00:05:56.361 --> 00:05:58.076
What about yellow down here?

114
00:05:58.076 --> 00:06:00.446
What's our beautiful
program gonna print out?

115
00:06:00.446 --> 00:06:05.395
Nothing, man, your program didn't even
tell you that the world's changed, right,

116
00:06:05.395 --> 00:06:06.101
that sucks.

117
00:06:06.101 --> 00:06:10.485
Let's go over to Rust and go, Yellow.

118
00:06:10.485 --> 00:06:13.608
What happened here?

119
00:06:13.608 --> 00:06:15.496
You can't compile your program,

120
00:06:15.496 --> 00:06:19.215
you haven't considered all cases
inside of your match statement.

121
00:06:19.215 --> 00:06:20.603
All right, so that's a good thing, right?

122
00:06:20.603 --> 00:06:23.482
That is something that just
kind of increases a little bit,

123
00:06:23.482 --> 00:06:26.774
our developer awareness of what's
happening within our program.

124
00:06:26.774 --> 00:06:31.551
So I can go down to the match,
I can fill in that last one,

125
00:06:31.551 --> 00:06:35.736
yank that, and paste that,
and boom, yellow.

126
00:06:35.736 --> 00:06:41.816
And now, when we go down here and
we pass in yellow, well, guess what?

127
00:06:41.816 --> 00:06:43.868
Yellow, look how successful that is.

128
00:06:43.868 --> 00:06:45.499
That was really nice, right?

129
00:06:45.499 --> 00:06:50.474
That allowed us to be able to
handle a case in which has changed.

130
00:06:50.474 --> 00:06:54.870
Our world has changed, Rust does not let
you proceed until you fix the error.

131
00:06:54.870 --> 00:06:56.864
Okay, so that's a bonus, I'd say.

132
00:06:56.864 --> 00:06:58.047
That's at least pretty good.

133
00:06:58.047 --> 00:07:01.209
Here's the complete code,
nothing changes over here.

134
00:07:01.209 --> 00:07:03.846
Boom, let's upgrade Rust, sorry,
I jumped ahead a little bit.

135
00:07:03.846 --> 00:07:06.983
So you probably still think enum suck,
honestly, you're probably right.

136
00:07:06.983 --> 00:07:09.784
If that's all that enums were,
you're absolutely right.

137
00:07:09.784 --> 00:07:11.704
They'd still kinda suck, right,
and why would you use them?

138
00:07:11.704 --> 00:07:14.743
There's no real value, but we're gonna
start taking them to the next level.

139
00:07:14.743 --> 00:07:17.326
And you're also probably thinking,
you know that match statement,

140
00:07:17.326 --> 00:07:18.604
that's really what did the work.

141
00:07:18.604 --> 00:07:21.266
Not the enum, the match statement did it.

142
00:07:21.266 --> 00:07:22.566
So enums still suck.

143
00:07:22.566 --> 00:07:25.179
Okay, okay, hold on,
let me show you something.

144
00:07:25.179 --> 00:07:27.436
So let's create a couple methods.

145
00:07:27.436 --> 00:07:30.858
Let's do, is_green and is_green_parts.

146
00:07:30.858 --> 00:07:35.457
If you pass in green,
it will turn true for is_green.

147
00:07:35.457 --> 00:07:41.311
If you pass in blue or yellow,
it will turn true for is_green_parts.

148
00:07:41.311 --> 00:07:43.723
So I'm using the subtractive
system of coloring.

149
00:07:43.723 --> 00:07:46.308
This is not the additive one,
this is not CSS, okay?

150
00:07:48.439 --> 00:07:50.667
So I'm gonna just do this only in Rust.

151
00:07:50.667 --> 00:07:53.054
So we're gonna go up here
above our print_color.

152
00:07:53.054 --> 00:07:57.601
Now, remember, on structs,
how we can impl for a struct?

153
00:07:57.601 --> 00:07:58.399
Well, guess what?

154
00:07:58.399 --> 00:08:01.092
You can impl for an enum as well.

155
00:08:01.092 --> 00:08:04.792
Fantastic, okay, so
let's go function is_green, and

156
00:08:04.792 --> 00:08:09.857
it's gonna take it a reference to myself,
and I'm gonna return out a boolean.

157
00:08:09.857 --> 00:08:11.691
Remember, I talked about this.

158
00:08:11.691 --> 00:08:16.961
&amp;self just means that when you're
calling this, it's a read-only function.

159
00:08:16.961 --> 00:08:19.556
I only need to read data and that is it.

160
00:08:19.556 --> 00:08:21.450
I don't actually do a lot there.

161
00:08:21.450 --> 00:08:25.169
And so now, we can have a pretty
straightforward situation.

162
00:08:25.169 --> 00:08:29.826
I can go like this,
if let Color::Green=self,

163
00:08:29.826 --> 00:08:33.847
remember, we're just pattern matching.

164
00:08:33.847 --> 00:08:39.177
If this is true, well, then we can
return true, else we can return false.

165
00:08:39.177 --> 00:08:41.152
Look at that, that's pretty nice.

166
00:08:41.152 --> 00:08:43.665
We pattern matched our way into this.

167
00:08:43.665 --> 00:08:44.572
So we can do this again.

168
00:08:44.572 --> 00:08:48.962
We can go, function is_green_parts,
taking a read-only reference to self,

169
00:08:48.962 --> 00:08:51.518
cuz again,
we don't need to mutate anything.

170
00:08:51.518 --> 00:08:56.628
We just simply need to look at its data,
and we want to return out a boolean.

171
00:08:56.628 --> 00:09:01.258
So hopefully, everyone's kinda keeping up,
typing along.

172
00:09:01.258 --> 00:09:03.416
So let's do something
a little bit different here.

173
00:09:03.416 --> 00:09:06.126
Let's do a match statement with self.

174
00:09:06.126 --> 00:09:09.624
Again, if you have your code action set up
on VSCode, I think if you right-click it,

175
00:09:09.624 --> 00:09:12.899
there's a Code Actions button and you
should be able to do the exact same thing.

176
00:09:12.899 --> 00:09:16.117
I don't know the button you press,
but it's similar.

177
00:09:16.117 --> 00:09:20.164
So for red, let's return false.

178
00:09:20.164 --> 00:09:23.278
For green, I'm just gonna do this for
all those really quickly.

179
00:09:23.278 --> 00:09:24.712
For green, we return false.

180
00:09:24.712 --> 00:09:26.820
For blue, let's return true.

181
00:09:26.820 --> 00:09:29.516
And for yellow, let's return true.

182
00:09:29.516 --> 00:09:33.131
There we go, our is_green_parts now works.

183
00:09:33.131 --> 00:09:37.722
is_green_works, and there are methods
that are hanging off an enum,

184
00:09:37.722 --> 00:09:42.474
which means we can probably do something
pretty fantastic coming up here.

185
00:09:42.474 --> 00:09:44.610
I'm gonna give you one
moment to kinda catch up.

186
00:09:46.450 --> 00:09:50.697
I know, you're all impressed
with my Vim skills, I get it.

187
00:09:50.697 --> 00:09:53.135
I am gonna make that joke 17 more times,

188
00:09:53.135 --> 00:09:56.277
because you get to,
because it's just part of life.

189
00:09:56.277 --> 00:09:59.946
And you know what's a really cool thing,
is that when you learn cool technology

190
00:09:59.946 --> 00:10:02.318
like Vim or Rust,
you gotta tell people you use it.

191
00:10:02.318 --> 00:10:04.640
So you gotta say,
I program in Rust, by the way.

192
00:10:04.640 --> 00:10:06.672
And so that's called a by the way point.

193
00:10:06.672 --> 00:10:10.369
And the more by the way points you have
as a developer, the cooler you are.

194
00:10:10.369 --> 00:10:15.735
So Rust, Arch Linux, Vim, Dvorak.

195
00:10:15.735 --> 00:10:17.678
I use Dvorak and I use Vim and
I program in Rust.

196
00:10:17.678 --> 00:10:23.665
I don't use Arch Linux, I have kids,
I don't have time to customize Linux.

197
00:10:23.665 --> 00:10:26.326
I'm part of a group known as
Father's Against Arch Linux,

198
00:10:26.326 --> 00:10:27.667
it's just what it is, okay?

199
00:10:27.667 --> 00:10:30.373
And so now we can come down here and
I can do something like this.

200
00:10:30.373 --> 00:10:34.620
I can create Color::Green,
let's just assign that to foo.

201
00:10:34.620 --> 00:10:37.013
I know I always use foo,
some people say don't use foo.

202
00:10:37.013 --> 00:10:38.193
Foo is just a placeholder for me.

203
00:10:38.193 --> 00:10:43.326
It's a meaningless variable,
and I can go foo.is_green.

204
00:10:43.326 --> 00:10:47.043
Look at that, we have is_green and
is_green_parts on the enum itself,

205
00:10:47.043 --> 00:10:48.169
that's pretty cool.

206
00:10:48.169 --> 00:10:49.284
That means we can do things.

207
00:10:49.284 --> 00:10:52.594
That's definitely at least a plus one,
right?

208
00:10:52.594 --> 00:10:54.150
Can we agree that's a plus one?

209
00:10:54.150 --> 00:10:56.756
It makes it so
that you have methods dangling off.

210
00:10:56.756 --> 00:10:59.458
Now, in TypeScript,
you could totally do this.

211
00:10:59.458 --> 00:11:02.992
You would just have a module called
colors, and you'd define your enum,

212
00:11:02.992 --> 00:11:03.569
export it.

213
00:11:03.569 --> 00:11:07.349
And then you define a function
called is_green, export that,

214
00:11:07.349 --> 00:11:11.064
which just takes in a color and
tells you if it is or is not green.

215
00:11:11.064 --> 00:11:16.041
The problem with that generally is that
now you have to go through a module to

216
00:11:16.041 --> 00:11:20.154
know what's available,
whereas this is on the enum itself.

217
00:11:20.154 --> 00:11:22.760
I'd say it's more ergonomic, right?

218
00:11:22.760 --> 00:11:23.929
It's a little bit more convenient.

219
00:11:23.929 --> 00:11:27.496
You don't have to go modules spelunking
to find out what you can actually do.

220
00:11:27.496 --> 00:11:29.467
You don't have to go up to
an import statement and

221
00:11:29.467 --> 00:11:31.302
make the import statement list everything.

222
00:11:31.302 --> 00:11:32.907
You can just simply check on the color.

