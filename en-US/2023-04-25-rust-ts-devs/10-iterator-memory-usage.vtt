WEBVTT

1
00:00:00.100 --> 00:00:01.311
So let's do one more thing.

2
00:00:01.311 --> 00:00:03.247
I need you to do this in order, okay?

3
00:00:03.247 --> 00:00:08.295
I want you to skip every other line, then
I want you to skip the first two lines,

4
00:00:08.295 --> 00:00:10.755
and then I want you to print two lines.

5
00:00:10.755 --> 00:00:11.639
So you have to do that in order.

6
00:00:11.639 --> 00:00:14.394
So I'm gonna walk you through it,

7
00:00:14.394 --> 00:00:19.054
we'll do it together just
because time is of the essence.

8
00:00:19.054 --> 00:00:26.368
Okay, so right here, let's skip two lines
and then we need to take two lines.

9
00:00:26.368 --> 00:00:31.102
So I'm gonna just do another filter and
I am going to do an x,

10
00:00:31.102 --> 00:00:35.292
and I'm gonna do an i, and
I'm gonna say, while i.

11
00:00:35.292 --> 00:00:42.053
Let's say i have to be greater than 1,
right, because 0, 1, skip the first two.

12
00:00:42.053 --> 00:00:47.053
And i have to be a less than, so
we need the next two coming out of this,

13
00:00:47.053 --> 00:00:51.294
which is gonna be 2 and 3, and
so i have to be less than 4.

14
00:00:51.294 --> 00:00:52.038
Does that make sense?

15
00:00:52.038 --> 00:00:55.600
We're just really just doing
a simple little, wait, what?

16
00:00:55.600 --> 00:00:56.142
There we go.

17
00:00:56.142 --> 00:00:59.333
We're just doing a simple
little skip here.

18
00:00:59.333 --> 00:01:04.466
Grab the first two or skip the first two,
skip everything above 4.

19
00:01:04.466 --> 00:01:05.621
Does that make sense?

20
00:01:05.621 --> 00:01:08.010
Or skip everything above and equal to 4.

21
00:01:08.010 --> 00:01:08.549
There we go.

22
00:01:08.549 --> 00:01:09.450
We could have used some equal

23
00:01:09.450 --> 00:01:11.031
to that might have made it
a little bit more clear.

24
00:01:11.031 --> 00:01:11.597
But there we go.

25
00:01:11.597 --> 00:01:12.818
This seems pretty good.

26
00:01:12.818 --> 00:01:18.610
And so now when I run it, I should
only see 2 and r if I'm not mistaken.

27
00:01:18.610 --> 00:01:22.150
That is cargo 2r.

28
00:01:22.150 --> 00:01:28.028
So we've correctly filtered,
skip the first two, print the next two.

29
00:01:28.028 --> 00:01:30.041
And so we've done that with
two filter statements.

30
00:01:30.041 --> 00:01:35.473
So let's do the same thing,
but let's do that in Rust.

31
00:01:35.473 --> 00:01:38.917
And if I'm not mistaken,
I didn't get the exact

32
00:01:38.917 --> 00:01:43.537
same code cuz I think I knew I used
a little equal then right there.

33
00:01:43.537 --> 00:01:47.039
All right, so let's do the exact same
thing in Rust except for we have a bunch

34
00:01:47.039 --> 00:01:50.501
more combinators, so we could probably
do this a bit more intelligently.

35
00:01:50.501 --> 00:01:51.890
So let's jump over here.

36
00:01:51.890 --> 00:01:57.626
So after our filter,
I can just say skip(2).

37
00:01:57.626 --> 00:01:59.651
Awesome.

38
00:01:59.651 --> 00:02:02.715
Then take(2).

39
00:02:02.715 --> 00:02:03.451
There we go.

40
00:02:03.451 --> 00:02:05.640
Skip the next two, take the next two.

41
00:02:05.640 --> 00:02:09.992
Notice we're not doing some crazy index
kind of guessing here that's going on,

42
00:02:09.992 --> 00:02:11.721
it's just skip two, take two.

43
00:02:11.721 --> 00:02:13.188
Fantastic.

44
00:02:13.188 --> 00:02:16.363
And so now if I were to run it,
we get the exact same results.

45
00:02:16.363 --> 00:02:18.037
Again, geniuses, all of us.

46
00:02:18.037 --> 00:02:19.971
This feels fantastic, yeah.

47
00:02:19.971 --> 00:02:21.661
&gt;&gt; Performance question.

48
00:02:21.661 --> 00:02:26.578
The TypeScript one used filter, presumably
we had to go over the whole list.

49
00:02:26.578 --> 00:02:28.897
&gt;&gt; We're gonna get to this,
you're hitting on a very good point.

50
00:02:28.897 --> 00:02:32.143
So if you didn't hear,
asked a performance question,

51
00:02:32.143 --> 00:02:36.642
is there a performance implication with
skip and take versus doing a filter?

52
00:02:36.642 --> 00:02:39.756
Yes, the next section.

53
00:02:39.756 --> 00:02:41.914
So let's break down what happened here.

54
00:02:41.914 --> 00:02:45.490
So this is really what we just got
done doing in TypeScript, right?

55
00:02:45.490 --> 00:02:48.989
We split, we filter, we filter, we print.

56
00:02:48.989 --> 00:02:50.959
There's not really
an easier way to do this.

57
00:02:50.959 --> 00:02:54.760
I guess, we could have tried to figure
out a way to mash it into here,

58
00:02:54.760 --> 00:02:59.628
but then we'd have to say, if i equals 02,
if i equals 4 and 6, also return false,

59
00:02:59.628 --> 00:03:02.194
but 8 and 10 don't return false, right?

60
00:03:02.194 --> 00:03:03.631
It'd become a very complicated statement.

61
00:03:03.631 --> 00:03:07.363
I feel like this is just easier to read, I
think we all agree with that, just nicer.

62
00:03:07.363 --> 00:03:10.735
All right, so
split takes your entire string,

63
00:03:10.735 --> 00:03:14.793
reads it character by character
until it hits a new line.

64
00:03:14.793 --> 00:03:17.599
When it hits a new line,
boom, you have a string.

65
00:03:17.599 --> 00:03:20.675
Then it keeps on going, hits a new line,
boom, you have a string.

66
00:03:20.675 --> 00:03:24.031
Adds these one at a time into a list.

67
00:03:24.031 --> 00:03:25.118
Are those new strings?

68
00:03:25.118 --> 00:03:27.273
Are they references to
the original string?

69
00:03:27.273 --> 00:03:29.980
I have no idea, but
they exist inside of a list.

70
00:03:29.980 --> 00:03:35.331
Filter goes through that entire list one
at a time, calling your filter function.

71
00:03:35.331 --> 00:03:39.951
Anything that returns true,
it will put into a new array.

72
00:03:39.951 --> 00:03:41.364
This is very important.

73
00:03:41.364 --> 00:03:45.920
Your next filter, we'll do that again,
it'll go through the entire list,

74
00:03:45.920 --> 00:03:49.019
anything that is true,
it will put into a new array.

75
00:03:49.019 --> 00:03:51.771
And then finally, you do a for
each over it and just iterates, and

76
00:03:51.771 --> 00:03:53.388
hey, I approve this, great method.

77
00:03:53.388 --> 00:03:55.434
Okay, for each, great method.

78
00:03:55.434 --> 00:03:56.725
So let's kind of think about it.

79
00:03:56.725 --> 00:04:01.950
If you were to write the code yourself,
you'd write a function called filter_1,

80
00:04:01.950 --> 00:04:04.755
you'd write a function called filter_2.

81
00:04:04.755 --> 00:04:06.958
You would then read through a file,

82
00:04:06.958 --> 00:04:11.082
letting it going through every
character and creating the array.

83
00:04:11.082 --> 00:04:15.331
You'll create a new array b, go through,
put in only the true values.

84
00:04:15.331 --> 00:04:18.880
You create a new array c,
go through, put in the values.

85
00:04:18.880 --> 00:04:22.422
You would then go through c and
print out every result.

86
00:04:22.422 --> 00:04:24.026
So that's really what our code was doing.

87
00:04:24.026 --> 00:04:26.461
We just made it much more condensed and
easier to read, but

88
00:04:26.461 --> 00:04:27.710
that's what's happening.

89
00:04:27.710 --> 00:04:31.822
Now v8 may do some sweet optimization,
I can't tell you what v8's gonna do, but

90
00:04:31.822 --> 00:04:33.191
it's gonna do something.

91
00:04:33.191 --> 00:04:36.697
Now let's do the exact
same example here in Rust.

92
00:04:36.697 --> 00:04:38.896
All right, so this looks pretty good.

93
00:04:38.896 --> 00:04:42.274
So what it's gonna probably break down
into is gonna look something like this.

94
00:04:42.274 --> 00:04:46.425
We have a start, we have a taken,
we have a skipped, we have a lines found.

95
00:04:46.425 --> 00:04:50.539
I am then gonna do
a lines.enumerate().chars().

96
00:04:50.539 --> 00:04:56.084
So in other words, I'm gonna look at every
single index on every single character.

97
00:04:56.084 --> 00:04:57.952
All right, so here we go.

98
00:04:57.952 --> 00:05:02.496
Until the character is a new line, we're
just gonna keep on going on this loop.

99
00:05:02.496 --> 00:05:06.634
Once we find it as a new line, I'll
create a reference to the original string

100
00:05:06.634 --> 00:05:10.595
from start to that index and adjust
my starts to the next starting point.

101
00:05:10.595 --> 00:05:12.406
Pretty straightforward.

102
00:05:12.406 --> 00:05:14.500
I have now found a line, hurray.

103
00:05:14.500 --> 00:05:18.628
If lines found is not %2, we just go
back up to the top, keep looking for

104
00:05:18.628 --> 00:05:19.924
a newline character.

105
00:05:19.924 --> 00:05:22.894
Notice we're not going
through the entire string,

106
00:05:22.894 --> 00:05:25.200
we're only going through line by line.

107
00:05:25.200 --> 00:05:32.097
Rust is a pull operation, JavaScript is a
push operation, it pushes you the values.

108
00:05:32.097 --> 00:05:36.075
Rust, you have to pull out the values,
which means that it's very lazy,

109
00:05:36.075 --> 00:05:37.628
it executes it one at a time.

110
00:05:37.628 --> 00:05:39.435
So, that means skip is
the exact same thing.

111
00:05:39.435 --> 00:05:44.023
Until skip has been done twice, we're just
gonna keep on continuing, then we'll call

112
00:05:44.023 --> 00:05:47.878
take or then we'll increment taken,
we'll print it out in our for each.

113
00:05:47.878 --> 00:05:52.366
And then if taken is equal to 2, we
break and we do not continue to process.

114
00:05:52.366 --> 00:05:57.098
So you can imagine if this file was 10,000
lines long, we'd process 8 lines in Rust,

115
00:05:57.098 --> 00:06:02.573
we would process 10,000 lines, 10,000
lines, 5,000 lines, 2 lines in JavaScript.

116
00:06:02.573 --> 00:06:06.721
Very, very different, though
the code looks effectively the same.

117
00:06:06.721 --> 00:06:12.957
So, this is some of the benefits of having
an iterator versus having a .map method.

118
00:06:12.957 --> 00:06:14.835
They're very, very different and

119
00:06:14.835 --> 00:06:19.089
you have to have that in your head that an
iterator is a separate structure in which

120
00:06:19.089 --> 00:06:22.733
either refers to or owns a value and
walks through the values lazily.

121
00:06:22.733 --> 00:06:27.256
When you call next, it gives you the next
value, it does not process anything,

122
00:06:27.256 --> 00:06:29.565
it just does that one atomic operation.

123
00:06:29.565 --> 00:06:30.818
All right, there we go.

124
00:06:30.818 --> 00:06:35.328
So you'll hear this phrase all the time,
zero cost abstractions.

125
00:06:35.328 --> 00:06:36.741
People love this phrase.

126
00:06:36.741 --> 00:06:41.434
This is why when you learn Rust, you can
go on Twitter and say, I've learned Rust.

127
00:06:41.434 --> 00:06:44.382
And you get to tell everyone you've
learned Rust and you know Rust, because

128
00:06:44.382 --> 00:06:47.492
that's what you get to do, it is one of
the benefits, zero cost abstractions.

129
00:06:47.492 --> 00:06:51.213
We had an abstraction, which is all
these iterators, but ultimately,

130
00:06:51.213 --> 00:06:55.432
they compiled down into just like a simple
loop in code in the actual machine code.

131
00:06:55.432 --> 00:06:59.559
You can go to godbold.org and
look at it, it is literally just a loop.

132
00:06:59.559 --> 00:07:03.149
And so it gets rid of all that
abstraction for you, it's beautiful.

133
00:07:03.149 --> 00:07:06.116
So do we have any questions?

134
00:07:06.116 --> 00:07:08.574
&gt;&gt; Would you explain the pulling and
pushing again?

135
00:07:08.574 --> 00:07:10.107
&gt;&gt; Yeah, yeah, yeah!

136
00:07:10.107 --> 00:07:14.630
So if you think about it,
when you do any array.map,

137
00:07:14.630 --> 00:07:20.876
you don't have to collect this,
it does the collection for you, right?

138
00:07:20.876 --> 00:07:22.796
It puts it into a new array.

139
00:07:22.796 --> 00:07:25.964
So when you call map,
it goes over the entire list,

140
00:07:25.964 --> 00:07:29.878
pushes it all into array, and
then hands you the final result.

141
00:07:29.878 --> 00:07:32.706
If you were to do this in Rust,
it does nothing.

142
00:07:32.706 --> 00:07:36.583
You didn't do anything, it just created
a couple data structures and that's it.

143
00:07:36.583 --> 00:07:38.863
Because you haven't called next,

144
00:07:38.863 --> 00:07:42.977
you haven't pulled out painstakingly
each value one at a time.

145
00:07:42.977 --> 00:07:46.540
So that's the difference,
is that TypeScript immediately or

146
00:07:46.540 --> 00:07:47.892
greedily executes it.

147
00:07:47.892 --> 00:07:51.892
It pushes everything through,
whereas Rust, you pull them through.

148
00:07:51.892 --> 00:07:56.005
Which means each iterator will call next
on each parent iterator one at a time

149
00:07:56.005 --> 00:07:57.557
until you get to the source.

150
00:07:57.557 --> 00:08:01.610
And then that value flows through the
iterator until it successfully happens.

151
00:08:01.610 --> 00:08:04.176
&gt;&gt; This reminds me a lot of C-Sharp and
Link,

152
00:08:04.176 --> 00:08:07.398
I don't know if you have
much familiarity with that.

153
00:08:07.398 --> 00:08:11.600
But they have this notion
of deferred execution, so

154
00:08:11.600 --> 00:08:15.799
you can build up a pretty
complex set of processes and

155
00:08:15.799 --> 00:08:19.821
it doesn't execute until
you actually iterate.

156
00:08:19.821 --> 00:08:21.163
&gt;&gt; Yep.
&gt;&gt; Is that -.

157
00:08:21.163 --> 00:08:24.131
&gt;&gt; Yeah, link, I believe underneath
the hood creates an iterator or

158
00:08:24.131 --> 00:08:25.672
they might create an observable.

159
00:08:25.672 --> 00:08:27.642
I'm not really sure exactly what it is,
but

160
00:08:27.642 --> 00:08:30.104
those are kind of two very
similar concepts, I guess.

161
00:08:30.104 --> 00:08:34.670
And if you've ever used iEX,
which is like the sister to RxJS,

162
00:08:34.670 --> 00:08:39.337
it operates over arrays and
you can create the exact same thing.

163
00:08:39.337 --> 00:08:43.766
You create all these iterators to pull
values through as opposed to immediately

164
00:08:43.766 --> 00:08:44.765
executing them.

165
00:08:44.765 --> 00:08:48.173
So it's like a very similar concept.

166
00:08:48.173 --> 00:08:54.033
&gt;&gt; People are saying also RxJS and
nothing happens until you subscribe or -.

167
00:08:54.033 --> 00:08:55.218
Exact same concept.

168
00:08:55.218 --> 00:08:56.521
&gt;&gt; For Java streams.

169
00:08:56.521 --> 00:09:00.861
&gt;&gt; Yeah, so it's a lot, anything that
requires these kind of pull operations,

170
00:09:00.861 --> 00:09:04.498
everything JavaScript does
generally is like a push operation.

171
00:09:04.498 --> 00:09:07.978
When you create a promise,
it immediately starts executing.

172
00:09:07.978 --> 00:09:11.912
In Rust if you ever get to async
programming, when you create a promise or

173
00:09:11.912 --> 00:09:14.955
a future, it doesn't execute
it until you call a wait.

174
00:09:14.955 --> 00:09:19.475
You are responsible for pulling out the
value, it's just a different paradigm, but

175
00:09:19.475 --> 00:09:22.001
it leads to different
implications in the end.

176
00:09:22.001 --> 00:09:26.744
And I think for this, it's very hopefully
this was extremely clear why this is so

177
00:09:26.744 --> 00:09:31.280
dang good, because you can really control
exactly how it operates whereas in

178
00:09:31.280 --> 00:09:33.395
JavaScript, you have no control.

179
00:09:33.395 --> 00:09:35.662
You are kind of at the mercy of
whatever the standard does, and

180
00:09:35.662 --> 00:09:36.497
that's what it does.

181
00:09:36.497 --> 00:09:38.591
And so
it's just it's a little bit different.

182
00:09:38.591 --> 00:09:42.026
And control comes with more boilerplate,
but control also comes with

183
00:09:42.026 --> 00:09:45.296
really great performance and
sometimes even better ergonomics.

184
00:09:45.296 --> 00:09:49.015
And I'd argue that Rust can often
feel better than TypeScript.

