WEBVTT

1
00:00:00.140 --> 00:00:01.573
There's a lot of really
convenient methods.

2
00:00:01.573 --> 00:00:04.440
So I wanna do a small exercise
here starting with TypeScript.

3
00:00:04.440 --> 00:00:05.788
So you can erase everything.

4
00:00:05.788 --> 00:00:10.295
I want you to create a function
that takes in a number or

5
00:00:10.295 --> 00:00:13.108
undefined and returns a number.

6
00:00:13.108 --> 00:00:15.630
You can call the function
whatever you want.

7
00:00:15.630 --> 00:00:18.680
If the value is undefined,
I want you to return 0.

8
00:00:20.550 --> 00:00:24.492
But if it's a value or if it's a number,
I want you to multiply by 5.

9
00:00:26.967 --> 00:00:30.203
The signature cannot use the question
mark operator, no question marks for you.

10
00:00:30.203 --> 00:00:36.300
You either have to pass in undefined or
a number.

11
00:00:36.300 --> 00:00:40.556
So I will also write it up myself,
erase everything, and I'll go function.

12
00:00:40.556 --> 00:00:42.460
I will just call it practice, why not?

13
00:00:43.600 --> 00:00:48.558
It's gonna have a value that's a number or
undefined.

14
00:00:48.558 --> 00:00:50.490
And we're gonna return out a number.

15
00:00:52.060 --> 00:00:56.066
Now, of course, if you're pretty
familiar with some of the new syntax,

16
00:00:56.066 --> 00:01:00.344
the new goodness on TypeScript,
you can return, what's it called, value.

17
00:01:03.282 --> 00:01:07.639
Let's see, you can do value or
0 multiply by 5.

18
00:01:07.639 --> 00:01:08.334
So that makes sense.

19
00:01:08.334 --> 00:01:13.380
So if value is not undefined,
it will be a value, else, it will be 0.

20
00:01:13.380 --> 00:01:15.490
Multiply 0 by 5, it's still 0.

21
00:01:15.490 --> 00:01:18.130
We have fulfilled our beautiful interface.

22
00:01:18.130 --> 00:01:19.690
Look at that,
we have some nice code for it.

23
00:01:20.780 --> 00:01:25.353
I assume everyone else got probably
arrived to a very similar conclusion,

24
00:01:25.353 --> 00:01:26.460
hopefully.

25
00:01:26.460 --> 00:01:29.546
All right, so let's do the same thing,
but let's do it in Rust.

26
00:01:29.546 --> 00:01:32.070
And I'll give you a little bit more
time to kinda try this on your own.

27
00:01:32.070 --> 00:01:36.070
I'm gonna kinda fly a little bit faster
with the TypeScript stuff cuz I'm just

28
00:01:36.070 --> 00:01:38.447
gonna assume everybody
pretty much knows it.

29
00:01:38.447 --> 00:01:40.221
Let's do the exact same thing.

30
00:01:40.221 --> 00:01:42.412
A signature that takes in a number or

31
00:01:42.412 --> 00:01:45.486
undefined, so
that means option bracket usize.

32
00:01:45.486 --> 00:01:49.762
So it's gonna look something like
I'll kind of help you out here.

33
00:01:49.762 --> 00:01:52.570
Let me just do that.

34
00:01:52.570 --> 00:01:57.633
So let's go function, we'll call it
multiply this time, is gonna take

35
00:01:57.633 --> 00:02:02.616
in a number that is an option, say,
usize and returns back out a usize.

36
00:02:02.616 --> 00:02:07.167
So when I first started out doing Rust,
I probably would do something like this.

37
00:02:07.167 --> 00:02:11.561
If number is some because it has a value,

38
00:02:11.561 --> 00:02:16.992
I'm gonna return num.unwrap
multiplied by 5,

39
00:02:16.992 --> 00:02:19.720
else, I will return 0.

40
00:02:19.720 --> 00:02:22.284
This was probably what I
would write at first, right,

41
00:02:22.284 --> 00:02:25.200
cuz I just didn't know how to
use any of the constructs.

42
00:02:25.200 --> 00:02:28.682
Then you get a little bit better,
a little bit smarter, and

43
00:02:28.682 --> 00:02:32.250
you'll probably do something
like if let Some(x) = num.

44
00:02:33.410 --> 00:02:37.300
And so now I can go x times 5 and
do this, better, right?

45
00:02:37.300 --> 00:02:38.513
I'm using pattern matching.

46
00:02:38.513 --> 00:02:42.030
I'm solving my problems,
but they're still better.

47
00:02:42.030 --> 00:02:45.850
Now remember,
you can implement methods on enums.

48
00:02:45.850 --> 00:02:48.764
So let's go here and
go num.unwrap, but look at that,

49
00:02:48.764 --> 00:02:52.300
look at all the other ones
that are going on there, too.

50
00:02:52.300 --> 00:02:57.160
unwrap_or, so I can say,
hey, unwrap_or(0) times 5.

51
00:02:58.750 --> 00:03:00.935
Give me that inner value or
a default value.

52
00:03:00.935 --> 00:03:03.170
The default value has
to be of the same type.

53
00:03:04.320 --> 00:03:05.037
So that's pretty cool.

54
00:03:05.037 --> 00:03:07.060
That's very readable to me.

55
00:03:07.060 --> 00:03:10.610
I would argue that that is much more
readable than something like that.

56
00:03:10.610 --> 00:03:14.450
Less symbols, more words, for me,
always a good move, I like that.

57
00:03:15.630 --> 00:03:19.946
Decide how you will, but, I mean, for me,
there's not a big enough difference to

58
00:03:19.946 --> 00:03:24.110
make one feel less comfortable than
the other, but pretty cool, right?

59
00:03:24.110 --> 00:03:26.580
We've actually really reduced it down and

60
00:03:26.580 --> 00:03:29.810
it almost is the same amount
of code that TypeScript is.

61
00:03:30.870 --> 00:03:34.830
All right, so here we go,
I'm gonna skip over that part.

62
00:03:34.830 --> 00:03:36.251
Yeah, it's much nicer, it's beautiful.

63
00:03:36.251 --> 00:03:37.570
So let's change up one thing.

64
00:03:37.570 --> 00:03:43.341
So instead of returning 0 if undefined is
provided, I want you to return undefined.

65
00:03:43.341 --> 00:03:45.960
I know it's gonna change
things up a little bit.

66
00:03:45.960 --> 00:03:47.626
So that means we're gonna
go back to this one,

67
00:03:47.626 --> 00:03:49.006
and we have to do something like this.

68
00:03:49.006 --> 00:03:54.642
If value equals undefined,
return undefined,

69
00:03:54.642 --> 00:03:59.184
else, return value times 5, right?

70
00:03:59.184 --> 00:04:00.124
And now I have to change our signature.

71
00:04:00.124 --> 00:04:04.561
So now we have undefined all
over the place, or it's a value.

72
00:04:04.561 --> 00:04:08.087
It's a little bit more complicated
once we start mixing in this idea of

73
00:04:08.087 --> 00:04:09.654
chaining through undefines.

74
00:04:09.654 --> 00:04:13.330
We kind of hit this kind of unique place,
right?

75
00:04:13.330 --> 00:04:15.763
So let's do the same thing, but in Rust.

76
00:04:15.763 --> 00:04:18.778
Again, we'd probably do things
a little bit different.

77
00:04:18.778 --> 00:04:22.046
I probably would've done
the whole if let Some business,

78
00:04:22.046 --> 00:04:24.322
and then return none, or we can do this.

79
00:04:24.322 --> 00:04:25.566
Now, this is where it gets pretty good.

80
00:04:25.566 --> 00:04:27.102
We can call map.

81
00:04:27.102 --> 00:04:31.320
Map allows you to have access to the inner
value if there is an inner value.

82
00:04:31.320 --> 00:04:33.608
If there's not, it just remains none.

83
00:04:33.608 --> 00:04:37.189
So if you pass to me none,
I don't do anything.

84
00:04:37.189 --> 00:04:42.475
But if you pass me something,
I can say, hey, x times 5, there we go.

85
00:04:42.475 --> 00:04:45.481
And then, of course,
we have to change this from that to that.

86
00:04:45.481 --> 00:04:48.790
So now we've remained inside of an option.

87
00:04:48.790 --> 00:04:51.410
We started as an option,
we're ending as an option.

88
00:04:51.410 --> 00:04:52.898
We're chaining things together.

89
00:04:52.898 --> 00:04:57.130
We're doing some pretty cool operations
that just aren't really possible in

90
00:04:57.130 --> 00:04:59.140
the TypeScript realm.

91
00:04:59.140 --> 00:05:02.480
But are you ready for yet
another super cool thing we can do?

92
00:05:02.480 --> 00:05:07.272
If you have a function that returns an
error or an option that is the same type

93
00:05:07.272 --> 00:05:11.399
you're working with,
you can use the question mark operator.

94
00:05:11.399 --> 00:05:16.250
So I'm gonna go like this,
let number equals number question mark.

95
00:05:17.330 --> 00:05:21.740
What that does is it converts
it from an option to your usize.

96
00:05:21.740 --> 00:05:26.127
What it does underneath the hood
is it does something like this,

97
00:05:26.127 --> 00:05:28.903
match number, Some(x), give x out.

98
00:05:28.903 --> 00:05:31.380
If it's none, return none.

99
00:05:31.380 --> 00:05:34.634
It'll do something like that.

100
00:05:34.634 --> 00:05:36.490
That's what the question
mark operator does.

101
00:05:36.490 --> 00:05:40.615
Effectively, if you're familiar with Go,
if err does not equal nil,

102
00:05:40.615 --> 00:05:45.290
that's what the question mark does is it
does that entire if err does not equal nil

103
00:05:45.290 --> 00:05:48.560
thing all in a single symbol,
which is just beautiful.

104
00:05:48.560 --> 00:05:51.910
So I can literally just go let num = num?.

105
00:05:51.910 --> 00:05:54.200
Boom, now we have that, that's fantastic.

106
00:05:54.200 --> 00:05:55.227
We unwrapped its value.

107
00:05:55.227 --> 00:05:56.733
It's just usize now.

108
00:05:56.733 --> 00:05:59.972
And so now I can return Some
option num times 5, cuz remember,

109
00:05:59.972 --> 00:06:04.192
we're returning an option so we have to
recreate it into an option, which means we

110
00:06:04.192 --> 00:06:08.210
could just technically put the question
mark there, unwraps it does that.

111
00:06:08.210 --> 00:06:08.931
Look how small it is.

112
00:06:08.931 --> 00:06:09.719
That's pretty nice.

113
00:06:09.719 --> 00:06:10.710
That makes a lot of sense.

114
00:06:11.910 --> 00:06:14.147
So we look at our two solutions.

115
00:06:14.147 --> 00:06:15.693
Let's take a little look.

116
00:06:15.693 --> 00:06:17.300
I mean, how does that feel?

117
00:06:17.300 --> 00:06:18.430
Feels pretty cool, right?

118
00:06:18.430 --> 00:06:21.201
So when you're working with undefines,

119
00:06:21.201 --> 00:06:24.612
Rust really try to make it
actually be pretty nice.

120
00:06:24.612 --> 00:06:27.140
You don't have to do
all these wild things.

121
00:06:27.140 --> 00:06:31.221
Instead, you have these really nice
methods kind of interchanging them or

122
00:06:31.221 --> 00:06:34.570
returning them,
which just makes life a lot easier.

123
00:06:34.570 --> 00:06:38.230
And so in the places that matter,
Rust tends to get it right.

124
00:06:38.230 --> 00:06:40.320
In other places, I find it difficult.

125
00:06:40.320 --> 00:06:44.457
But even though it's great,
I already went through all this,

126
00:06:44.457 --> 00:06:47.670
it can still be a little
bit annoying sometimes.

127
00:06:47.670 --> 00:06:50.860
So I'm not gonna just toot the horn and
say it's all fantastic.

128
00:06:50.860 --> 00:06:53.271
Sometimes enums and all this,
they can get a bit verbose.

129
00:06:53.271 --> 00:06:57.256
And then now you're finding you're having
these annoying pattern matching statements

130
00:06:57.256 --> 00:07:00.780
or things around that you could have
written a lot easier in TypeScript.

131
00:07:00.780 --> 00:07:02.940
But for the most part,
it kinda keeps me on rails, and

132
00:07:02.940 --> 00:07:05.940
that's what I really like about it
is I have to handle situations.

133
00:07:05.940 --> 00:07:07.781
I have to be specific with my actions.

134
00:07:07.781 --> 00:07:11.350
There is no accidental unknown situation
that I might have programmed in,

135
00:07:11.350 --> 00:07:13.118
cuz it forces you to do things right.

