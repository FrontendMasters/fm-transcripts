WEBVTT

1
00:00:00.000 --> 00:00:02.686
So we're just gonna jump right in and
start going over the basics.

2
00:00:02.686 --> 00:00:06.751
There's no code in this section, but I
just wanted to kinda show you some things

3
00:00:06.751 --> 00:00:10.223
so that as we start doing it,
you can try to recall from your memory.

4
00:00:10.223 --> 00:00:13.936
The more you recall from your memory, the
better you're going to be, the more it's

5
00:00:13.936 --> 00:00:17.459
gonna set deep within your head, and
then you can just start doing it yourself.

6
00:00:17.459 --> 00:00:19.553
For me,
I had to type something out like four or

7
00:00:19.553 --> 00:00:21.238
five times before it really sticks.

8
00:00:21.238 --> 00:00:23.071
And so hopefully just try to follow along.

9
00:00:23.071 --> 00:00:27.736
I've made tons of little exercises so
you can type the function out ten times.

10
00:00:27.736 --> 00:00:31.390
So by the end,
you just can do it without thinking.

11
00:00:31.390 --> 00:00:33.261
All right, so again,
there'll be no programming.

12
00:00:33.261 --> 00:00:37.103
So I just wanted to go over a couple
differences in Rust versus TypeScript.

13
00:00:37.103 --> 00:00:41.198
So first off variables in TypeScript, here
you go, this should all look familiar.

14
00:00:41.198 --> 00:00:42.900
const foo, sort of a constant.

15
00:00:42.900 --> 00:00:45.303
let foo,
this is a variable you can change.

16
00:00:45.303 --> 00:00:46.789
const foo, as a const.

17
00:00:46.789 --> 00:00:50.260
This is a great C joke.

18
00:00:50.260 --> 00:00:51.033
Here's Rust.

19
00:00:51.033 --> 00:00:52.336
Rust looks pretty similar.

20
00:00:52.336 --> 00:00:53.227
This is a constant.

21
00:00:53.227 --> 00:00:54.515
It's always a constant.

22
00:00:54.515 --> 00:00:56.746
There's no changing it no matter
what its data structure is.

23
00:00:56.746 --> 00:00:59.629
When you say let foo,
you cannot change foo.

24
00:00:59.629 --> 00:01:01.206
let mut foo, you can change.

25
00:01:01.206 --> 00:01:03.119
You can change its value, all that.

26
00:01:03.119 --> 00:01:04.271
So there's only two types.

27
00:01:04.271 --> 00:01:08.391
There's not this third,
weird version that partially applies.

28
00:01:08.391 --> 00:01:09.068
All right,

29
00:01:09.068 --> 00:01:13.545
another thing that's unique about Rust
with variables is we have shadowing.

30
00:01:13.545 --> 00:01:15.453
So this would be illegal in TypeScript.

31
00:01:15.453 --> 00:01:18.407
This is completely legal in Rust.

32
00:01:18.407 --> 00:01:20.044
This is really, really handy.

33
00:01:20.044 --> 00:01:23.083
As you can see right here,
you can get a file, you can read a file,

34
00:01:23.083 --> 00:01:24.370
you can tokenize the file.

35
00:01:24.370 --> 00:01:26.105
So you can just have like file,
file contents.

36
00:01:26.105 --> 00:01:29.357
Or you can do something where sometimes
you want to use the same name to describe

37
00:01:29.357 --> 00:01:30.587
this thing as it changes, and

38
00:01:30.587 --> 00:01:33.266
you can't do it in TypeScript
because you're changing types.

39
00:01:33.266 --> 00:01:35.029
But in Rust, shadowing is perfectly fine,

40
00:01:35.029 --> 00:01:37.135
as long as you use the let
keyword right beforehand.

41
00:01:37.135 --> 00:01:40.046
So foo right here is,
say, some sort of vector.

42
00:01:40.046 --> 00:01:42.745
foo right here is whatever
the method returns.

43
00:01:42.745 --> 00:01:44.390
Super cool, very, very handy.

44
00:01:44.390 --> 00:01:46.721
At first, I hated it cuz I thought,
who would do this?

45
00:01:46.721 --> 00:01:47.654
This is bad programming.

46
00:01:47.654 --> 00:01:48.800
Why would you ever wanna do this?

47
00:01:48.800 --> 00:01:50.859
Why would we be changing types on a name?

48
00:01:50.859 --> 00:01:53.098
Now I can't help but
to use it all the time.

49
00:01:53.098 --> 00:01:54.648
I don't know what happens.

50
00:01:54.648 --> 00:01:56.285
Life changes how you use it.

51
00:01:56.285 --> 00:01:59.348
If conditions,
looks pretty straightforward, right?

52
00:01:59.348 --> 00:02:00.208
They're the same thing.

53
00:02:00.208 --> 00:02:01.228
Drop the parentheses.

54
00:02:01.228 --> 00:02:04.698
If you add the parentheses,
Rust is just gonna warn you, say,

55
00:02:04.698 --> 00:02:06.149
hey, you can't do that.

56
00:02:06.149 --> 00:02:09.454
Or it's gonna say you can do that, but
you shouldn't do that stylistically.

57
00:02:09.454 --> 00:02:11.339
You don't need to do that,
then we're done.

58
00:02:11.339 --> 00:02:12.777
So pretty straightforward.

59
00:02:12.777 --> 00:02:14.648
Loops, almost the same.

60
00:02:14.648 --> 00:02:17.153
So here's a basic for loop.

61
00:02:17.153 --> 00:02:19.012
In Rust you use a range.

62
00:02:19.012 --> 00:02:23.350
So for i in 0 up to but
not including 10, or for

63
00:02:23.350 --> 00:02:27.161
i starting at 0 up to and including 10.

64
00:02:27.161 --> 00:02:32.135
So you got inclusive exclusive ranges,
you can also assign ranges to variables,

65
00:02:32.135 --> 00:02:33.227
you can use them.

66
00:02:33.227 --> 00:02:34.910
They're actually just like
a fundamental concept.

67
00:02:34.910 --> 00:02:35.795
Pretty fun.

68
00:02:35.795 --> 00:02:39.544
While loops, again, pretty much
the same between the two languages.

69
00:02:39.544 --> 00:02:40.581
You already know them.

70
00:02:40.581 --> 00:02:41.667
Just don't use the parentheses.

71
00:02:41.667 --> 00:02:43.810
You do, you'll get warned.

72
00:02:43.810 --> 00:02:48.971
Forever loops, you either have for
colon colon or semi colon semi colon that.

73
00:02:48.971 --> 00:02:51.728
Or while true, in Rust you just have loop.

74
00:02:51.728 --> 00:02:55.735
So pretty akin to something
like Go that had for.

75
00:02:55.735 --> 00:02:59.588
Collections, when you're
iterating over a collection,

76
00:02:59.588 --> 00:03:04.220
here's your classic for of loop for
any object right here for entries.

77
00:03:04.220 --> 00:03:07.670
You have it for an array or
you can go over indices.

78
00:03:07.670 --> 00:03:08.616
These all look familiar.

79
00:03:08.616 --> 00:03:13.170
I assume everyone here is familiar enough
with JavaScript to feel okay about that.

80
00:03:13.170 --> 00:03:15.036
You also have these things that exist.

81
00:03:15.036 --> 00:03:18.366
People kind of associate them
with this whole looping thing.

82
00:03:18.366 --> 00:03:20.872
You have array.map,
which does clone your array.

83
00:03:20.872 --> 00:03:22.942
You have array.filter,
which does clone your array.

84
00:03:22.942 --> 00:03:25.701
You have array.forEach,
which iterates over your collection.

85
00:03:25.701 --> 00:03:27.894
array#reduce, always a bad decision.

86
00:03:27.894 --> 00:03:30.716
And map.forEach,
the weirdest interface in the universe.

87
00:03:30.716 --> 00:03:33.149
Value slash key is just
the strangest way to do it.

88
00:03:33.149 --> 00:03:34.738
But that's how arrays do it.

89
00:03:34.738 --> 00:03:35.969
I know, it's a map, though.

90
00:03:35.969 --> 00:03:36.950
It's a different data structure.

91
00:03:36.950 --> 00:03:38.740
Why do you got to do that, TC 39?

92
00:03:38.740 --> 00:03:39.665
You're killing me.

93
00:03:39.665 --> 00:03:42.408
All right, Rust,
it's a little bit different.

94
00:03:42.408 --> 00:03:45.664
You just go for
x in some array or in something,

95
00:03:45.664 --> 00:03:49.350
you don't have to have this
little ampersand here.

96
00:03:49.350 --> 00:03:51.320
We will talk about that later.

97
00:03:51.320 --> 00:03:52.986
And you can do things like this.

98
00:03:52.986 --> 00:03:57.189
That's just a vector akin to a list,
and I can map over something, or

99
00:03:57.189 --> 00:03:59.743
filter over something, or do anything.

100
00:03:59.743 --> 00:04:03.801
And then at the end, I can just tell it
what data structure to become at the end.

101
00:04:03.801 --> 00:04:07.060
And so in this case, I'm telling
it to become a vector, or a list,

102
00:04:07.060 --> 00:04:08.707
of the same type that's up here.

103
00:04:08.707 --> 00:04:11.509
So probably i32, I think,
is the default one.

104
00:04:11.509 --> 00:04:12.659
I don't remember what it is.

105
00:04:12.659 --> 00:04:18.761
Functions, again, pretty much the same,
as you can see right here, function, fn.

106
00:04:18.761 --> 00:04:20.656
We just call them functions.

107
00:04:20.656 --> 00:04:24.070
Parameters, again,
pretty much the same thing.

108
00:04:24.070 --> 00:04:28.276
Arg colon type, arg colon type.

109
00:04:28.276 --> 00:04:30.113
Everyone that's familiar with TypeScript,

110
00:04:30.113 --> 00:04:32.426
you already pretty much know
a huge amount of Rust syntax.

111
00:04:32.426 --> 00:04:36.617
There's only a few things that get
a little bit complicated with the syntax.

112
00:04:36.617 --> 00:04:41.090
Returns, this is like,
depending on how you view the world,

113
00:04:41.090 --> 00:04:43.594
this might be a little bit harder.

114
00:04:43.594 --> 00:04:49.077
So a very popular notion, especially among
them Twitter elite, TypeScript devs,

115
00:04:49.077 --> 00:04:53.722
is don't do return values or
don't do return types on your functions.

116
00:04:53.722 --> 00:04:54.790
You have to do that in Rust.

117
00:04:54.790 --> 00:04:56.453
You got to tell it what
you're gonna return.

118
00:04:56.453 --> 00:04:59.164
There's no implicit return types.

119
00:04:59.164 --> 00:05:01.438
You're just gonna have
to hashtag deal with it.

120
00:05:01.438 --> 00:05:03.588
And so this is legal in TypeScript.

121
00:05:03.588 --> 00:05:05.291
You just couldn't do that in Rust.

122
00:05:05.291 --> 00:05:07.512
You have to tell it,
I'm gonna return a usize.

123
00:05:07.512 --> 00:05:10.197
We'll go over the different
types of ints and

124
00:05:10.197 --> 00:05:13.661
all that just because,
if you've only done TypeScript,

125
00:05:13.661 --> 00:05:17.986
the word number has so many meanings,
whereas in Rust, it's reduced.

126
00:05:17.986 --> 00:05:19.273
All right, closures.

127
00:05:19.273 --> 00:05:21.119
These are all pretty straightforward,
right?

128
00:05:21.119 --> 00:05:24.357
You can define a closure with
a parameter and then return it, or

129
00:05:24.357 --> 00:05:26.937
you can do kind of more this,
like, auto return.

130
00:05:26.937 --> 00:05:29.226
If it's a single statement,
you don't have to do anything.

131
00:05:29.226 --> 00:05:30.129
Rust is identical.

132
00:05:30.129 --> 00:05:33.502
The only difference is that we use
a bar instead of a parenthesis.

133
00:05:33.502 --> 00:05:35.632
It emotionally hurts me that we use a bar.

134
00:05:35.632 --> 00:05:39.497
But it does make sense when you know about
the unit cuz then you couldn't do an empty

135
00:05:39.497 --> 00:05:40.907
closure and it all breaks up.

136
00:05:40.907 --> 00:05:42.136
I believe that's the reasoning.

137
00:05:42.136 --> 00:05:42.990
I haven't read that.

138
00:05:42.990 --> 00:05:48.837
That's just my own personal, self defense
mechanism for why we had to use bars.

139
00:05:48.837 --> 00:05:49.624
But there you go.

140
00:05:49.624 --> 00:05:50.881
Pretty much identical, right?

141
00:05:50.881 --> 00:05:53.165
Nothing seems too hard here.

142
00:05:53.165 --> 00:05:58.103
Classes and methods, again,
TypeScript, you do class, properties,

143
00:05:58.103 --> 00:06:02.094
constructor, methods,
static, private, protected.

144
00:06:02.094 --> 00:06:04.901
You kinda have all these different
variations in which you can work

145
00:06:04.901 --> 00:06:05.459
on classes.

146
00:06:05.459 --> 00:06:08.454
I know some of you right now,
you see the word class.

147
00:06:08.454 --> 00:06:10.144
Man, you're like getting hot and

148
00:06:10.144 --> 00:06:13.883
bothered because we're functional
programmers only in TypeScript land.

149
00:06:13.883 --> 00:06:14.466
I get it.

150
00:06:14.466 --> 00:06:15.152
I'm sorry.

151
00:06:15.152 --> 00:06:16.694
This is traumatic for some of you.

152
00:06:16.694 --> 00:06:18.811
Now Rust does it a little bit different.

153
00:06:18.811 --> 00:06:21.883
I want you to really look at this just for
a moment,

154
00:06:21.883 --> 00:06:26.710
is that you define a struct which is a
series of properties or pub properties for

155
00:06:26.710 --> 00:06:30.832
things people can access on the outside,
so this will be private.

156
00:06:30.832 --> 00:06:35.021
This is public, there's no protected,
there's no package level scoping,

157
00:06:35.021 --> 00:06:38.389
it's just pub private, and
then you have an implementation.

158
00:06:38.389 --> 00:06:41.346
And so then I say, hey,
the implementation for foo,

159
00:06:41.346 --> 00:06:44.522
which that was the name of my struct,
here is a function.

160
00:06:44.522 --> 00:06:46.310
This would be a static function.

161
00:06:46.310 --> 00:06:49.039
This would be a public static
function that anyone can use.

162
00:06:49.039 --> 00:06:52.983
This would be a function that refers
to itself or an instance method or

163
00:06:52.983 --> 00:06:54.482
a method as we'd call it.

164
00:06:54.482 --> 00:06:57.335
This would be a method that
could change values on itself.

165
00:06:57.335 --> 00:07:01.305
You kinda have to define each type of
function cuz each one has different

166
00:07:01.305 --> 00:07:05.882
implications, and that will become evident
when we talk about the Baro checker.

167
00:07:05.882 --> 00:07:08.129
You can also make them public, so

168
00:07:08.129 --> 00:07:13.444
this is a method in which takes not a
reference to yourself but the self itself.

169
00:07:13.444 --> 00:07:14.718
That may be a little bit confusing,

170
00:07:14.718 --> 00:07:17.453
what the heck's the difference between
a reference to yourself and a self?

171
00:07:17.453 --> 00:07:20.382
We'll get there, but
each one's a little different.

172
00:07:20.382 --> 00:07:22.440
So what stuck out to you,

173
00:07:22.440 --> 00:07:27.648
the difference between class
definition and how Rust does it?

174
00:07:27.648 --> 00:07:28.923
Just one thing.

175
00:07:28.923 --> 00:07:32.647
&gt;&gt; The data and the behavior
are defined in separate blocks,

176
00:07:32.647 --> 00:07:34.927
very explicitly separate blocks?

177
00:07:34.927 --> 00:07:39.609
&gt;&gt; Yes, so if you couldn't hear that, data
and behavior are defined in two blocks.

178
00:07:39.609 --> 00:07:43.267
This may seem kind of like
a trivial point, but trust me,

179
00:07:43.267 --> 00:07:46.331
this is like the coolest
thing in the universe.

180
00:07:46.331 --> 00:07:48.436
This will blow your mind
by the end of the day.

181
00:07:48.436 --> 00:07:49.912
This is like the greatest thing ever.

182
00:07:49.912 --> 00:07:53.571
This allows for composing behavior,
not upfront definition of behavior,

183
00:07:53.571 --> 00:07:57.015
because that's one thing that classes
are really frustrating about.

184
00:07:57.015 --> 00:07:59.090
And that's why you have abstract classes.

185
00:07:59.090 --> 00:08:00.765
This is why you have hierarchies,

186
00:08:00.765 --> 00:08:03.903
because you can't wrap on additional
behavior in any easy way.

187
00:08:03.903 --> 00:08:06.390
You have to IOC it,
you have to do something else,

188
00:08:06.390 --> 00:08:07.930
you have to create a new class,

189
00:08:07.930 --> 00:08:11.741
you have to compose it in a more difficult
way than you can, say, with Rust.

190
00:08:11.741 --> 00:08:13.810
So very exciting, trust me.

191
00:08:13.810 --> 00:08:15.240
Oop, we got a question.

192
00:08:15.240 --> 00:08:17.750
&gt;&gt; So struct is like interface, and

193
00:08:17.750 --> 00:08:21.792
impl is like a class that
implements that interface?

194
00:08:21.792 --> 00:08:23.894
&gt;&gt; No, so struct is not an interface.

195
00:08:23.894 --> 00:08:26.951
Struct is a concrete set of properties.

196
00:08:26.951 --> 00:08:31.779
And one thing you have to break, and we'll
kind of talk about this here shortly,

197
00:08:31.779 --> 00:08:34.341
is that memory plays
a huge role into this.

198
00:08:34.341 --> 00:08:37.296
When you're in JavaScript,
you just create things.

199
00:08:37.296 --> 00:08:39.264
You don't think about how
they're laid out in memory.

200
00:08:39.264 --> 00:08:41.284
You don't think about
what it's actually doing.

201
00:08:41.284 --> 00:08:45.769
In Rust, you have to define the blueprint
of exactly how this thing is gonna be

202
00:08:45.769 --> 00:08:46.394
laid out.

203
00:08:46.394 --> 00:08:47.704
And then Rust lays it out in memory.

204
00:08:47.704 --> 00:08:51.195
So this actually has a defined size to it.

205
00:08:51.195 --> 00:08:53.762
There is a certain amount of bytes
that are associated with it.

206
00:08:53.762 --> 00:08:58.346
And so, this is the concrete item,
you can instantiate a foo.

207
00:08:58.346 --> 00:09:03.537
This is just the implementation,
it creates functions that will hang off

208
00:09:03.537 --> 00:09:08.742
your struct, so that way you can go
struct dot whatever, or foo dot this.

209
00:09:08.742 --> 00:09:15.171
And you can call an instance method, or
foo colon colon to call a static method.

210
00:09:15.171 --> 00:09:16.905
All right, interfaces.

211
00:09:16.905 --> 00:09:20.491
Interfaces are really where the super
secret sauce of Rust takes off.

212
00:09:20.491 --> 00:09:22.226
Not so great in TypeScript.

213
00:09:22.226 --> 00:09:23.393
You have two different
things in TypeScript.

214
00:09:23.393 --> 00:09:25.176
You have type and you have interfaces.

215
00:09:25.176 --> 00:09:29.495
Interfaces, particularly, I'm not very
fond of in TypeScript for two reasons.

216
00:09:29.495 --> 00:09:30.964
One, you can have properties on interface.

217
00:09:30.964 --> 00:09:32.617
I just think that's not a good move.

218
00:09:32.617 --> 00:09:33.767
They like that move.

219
00:09:33.767 --> 00:09:36.717
And second, you can do this
whole interface merging thing.

220
00:09:36.717 --> 00:09:40.924
So if I define foo here, and
then I redefine foo here.

221
00:09:40.924 --> 00:09:43.489
Foo is the amalgamation
of both interfaces.

222
00:09:43.489 --> 00:09:47.855
So you'll actually have properties,
method, and, hey, another method required

223
00:09:47.855 --> 00:09:51.018
to be a foo, which both has some
cool things you can do with it.

224
00:09:51.018 --> 00:09:53.878
Meaning that if you're trying
to integrate with a library but

225
00:09:53.878 --> 00:09:57.238
extended to have your own behavior,
you can add methods to interfaces.

226
00:09:57.238 --> 00:10:00.465
But at the same time,
you run into these bugs where you're like,

227
00:10:00.465 --> 00:10:01.588
why is this like this?

228
00:10:01.588 --> 00:10:02.603
I'm looking at the definition.

229
00:10:02.603 --> 00:10:04.280
Why do I need this extra method on here?

230
00:10:04.280 --> 00:10:07.248
It's because someone else has
defined it and you don't realize,

231
00:10:07.248 --> 00:10:08.956
you've just been interface merged.

232
00:10:08.956 --> 00:10:13.239
It's unique, it's cool,
but it is what it is.

233
00:10:13.239 --> 00:10:16.209
Whereas Rust it's a little different.

234
00:10:16.209 --> 00:10:21.103
Trait is effectively an interface, and
you can define the same things, but

235
00:10:21.103 --> 00:10:22.946
no properties are allowed.

236
00:10:22.946 --> 00:10:25.380
And how you implement a trait
is you do the same thing.

237
00:10:25.380 --> 00:10:30.458
The implementation of foo for, or
the implementation of trait foo for

238
00:10:30.458 --> 00:10:35.550
my struct, struct would be just like
a struct, it can also be an enum.

239
00:10:35.550 --> 00:10:37.515
So that's the syntax for it.

240
00:10:37.515 --> 00:10:40.310
And then you put in the methods
that have been defined here, and

241
00:10:40.310 --> 00:10:42.438
only the methods that
have been defined there.

242
00:10:42.438 --> 00:10:43.981
Yeah, Mark.

243
00:10:43.981 --> 00:10:48.722
&gt;&gt; Could you elaborate on why defining
properties on an interface is bad and

244
00:10:48.722 --> 00:10:50.365
why you want to avoid it?

245
00:10:50.365 --> 00:10:53.696
&gt;&gt; In general, I always feel like prop,
this is just a personal belief.

246
00:10:53.696 --> 00:10:58.128
Okay, we're getting into the personal
realm, I will accept that as being true,

247
00:10:58.128 --> 00:11:00.903
is that properties
are an implementation detail.

248
00:11:00.903 --> 00:11:02.419
They are something that
I'm gonna manipulate.

249
00:11:02.419 --> 00:11:03.649
They're my state bag.

250
00:11:03.649 --> 00:11:08.267
This is how I interact with my system,
my closed system.

251
00:11:08.267 --> 00:11:11.353
And so, I've just never been
fond properties on interfaces,

252
00:11:11.353 --> 00:11:15.369
a lot of languages never allow you to do
that, Java, plenty of other ones, Rust,

253
00:11:15.369 --> 00:11:15.968
whatever.

254
00:11:15.968 --> 00:11:19.035
And so, it's a unique take
to allow properties on it,

255
00:11:19.035 --> 00:11:21.447
I'm not sure why they made that decision.

256
00:11:21.447 --> 00:11:23.860
I bet you there's a great reason for it.

257
00:11:23.860 --> 00:11:26.971
It just feels funny to me to
have properties on an interface,

258
00:11:26.971 --> 00:11:31.607
because interfaces aren't supposed to have
any implementation requirements other than

259
00:11:31.607 --> 00:11:33.688
what methods you're supposed to have.

260
00:11:33.688 --> 00:11:37.704
This one's both having your data shape and
what methods you should have,

261
00:11:37.704 --> 00:11:39.795
which is kind of unique in some sense.

262
00:11:42.102 --> 00:11:44.979
Anyway, because who cares
how you define length.

263
00:11:44.979 --> 00:11:47.449
If it's a function,
you can define it however you want.

264
00:11:47.449 --> 00:11:49.167
It could be amalgamation of
three different properties.

265
00:11:49.167 --> 00:11:51.854
But by enforcing a property specifically,

266
00:11:51.854 --> 00:11:55.201
now you have a different way
you have to tackle things.

267
00:11:55.201 --> 00:11:57.577
It is making an implementation detail for
you.

268
00:11:57.577 --> 00:11:58.140
There you go.

269
00:11:58.140 --> 00:11:59.674
All right, one more question.

270
00:11:59.674 --> 00:12:02.006
&gt;&gt; Do you still need a struct?

271
00:12:02.006 --> 00:12:03.781
&gt;&gt; For a trait?

272
00:12:03.781 --> 00:12:06.671
If you're asking do you
still need a struct, yes.

273
00:12:06.671 --> 00:12:11.285
Structs and traits are two
unrelated things in some sense.

274
00:12:11.285 --> 00:12:15.892
A struct is your property layout,
exactly what's gonna be on the item.

275
00:12:15.892 --> 00:12:19.909
A trait is an implementation
of a method on that struct.

276
00:12:19.909 --> 00:12:22.188
It's how you can interact with the struct.

277
00:12:22.188 --> 00:12:24.658
It interface onto it.

278
00:12:24.658 --> 00:12:25.462
Yeah.

279
00:12:25.462 --> 00:12:29.168
&gt;&gt; Can you use a struct without
having an implementation?

280
00:12:29.168 --> 00:12:31.087
&gt;&gt; Can you use a struct without
having an implementation?

281
00:12:31.087 --> 00:12:33.698
Absolutely, it's just
a series of properties.

282
00:12:33.698 --> 00:12:39.651
If you've ever used C, it's effectively
the same thing as a C struct.

283
00:12:39.651 --> 00:12:42.169
It may be packed in binary,
slightly different.

284
00:12:42.169 --> 00:12:45.744
I believe you can even make it
packed in binary the same way, but

285
00:12:45.744 --> 00:12:48.394
it has its own packing and
it does what it does.

286
00:12:48.394 --> 00:12:49.553
It's just a series of properties.

287
00:12:49.553 --> 00:12:50.509
That's all it is.

288
00:12:50.509 --> 00:12:52.387
So you define your data shape,

289
00:12:52.387 --> 00:12:56.152
then you define how that data
shape interacts with the world.

290
00:12:56.152 --> 00:12:58.821
So, it's different,
it allows for composing.

