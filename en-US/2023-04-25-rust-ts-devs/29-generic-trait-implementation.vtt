WEBVTT

1
00:00:00.250 --> 00:00:01.120
Are you ready for this?

2
00:00:01.120 --> 00:00:02.430
I'm ready, I'm excited.

3
00:00:02.430 --> 00:00:05.500
So what we're gonna do is we're gonna
create something called a pointIter.

4
00:00:05.500 --> 00:00:07.140
It'll be the same as our rectIter.

5
00:00:07.140 --> 00:00:09.880
It'll take a vector (f64, f64).

6
00:00:09.880 --> 00:00:12.624
Again, sorry, for
the performance, I know [SOUND].

7
00:00:12.624 --> 00:00:16.050
Anyways, and then we're also gonna
have an index that's gonna be zero.

8
00:00:16.050 --> 00:00:17.607
So identical to rectIter.

9
00:00:17.607 --> 00:00:20.360
The next thing, so
let's just do that first right away.

10
00:00:20.360 --> 00:00:27.240
So let's go over to our nice collision
file and let's create a pointIter.

11
00:00:27.240 --> 00:00:29.970
So, struct pointIter.

12
00:00:31.250 --> 00:00:36.492
It's gonna have points, which of course,
is gonna be a vector(f64, f64).

13
00:00:38.198 --> 00:00:41.750
And we're gonna have an index of you size.

14
00:00:41.750 --> 00:00:45.240
Okay, this looks just like our
rectangle iterator, right?

15
00:00:45.240 --> 00:00:47.550
Identical, in fact, awesome.

16
00:00:47.550 --> 00:00:51.010
And I'm gonna write this, pub, awesome.

17
00:00:51.010 --> 00:00:54.190
And what I wanna do is, I wanna jump over
to my rectangle, and I'm just gonna steal

18
00:00:54.190 --> 00:00:56.512
the iterator definition,
cuz I don't need to do it twice.

19
00:00:56.512 --> 00:00:58.170
Does that make sense?

20
00:00:58.170 --> 00:01:02.674
So jump over to your rectangle,
find rectIter and

21
00:01:02.674 --> 00:01:07.618
find the iterator implementation and
just take that.

22
00:01:07.618 --> 00:01:10.613
Jump back over to collisions and just,

23
00:01:10.613 --> 00:01:16.076
I'm just gonna literally go from
rectIter to pointIter, there we go.

24
00:01:16.076 --> 00:01:19.753
All right, the next thing we're gonna
do is, we need to implement, okay,

25
00:01:19.753 --> 00:01:20.679
we've done that.

26
00:01:22.580 --> 00:01:23.790
We've done that, fantastic.

27
00:01:23.790 --> 00:01:28.089
Let's create a convenient method to take
a Vec f64 and convert it into a pointIter.

28
00:01:28.089 --> 00:01:31.000
All right, so
let's do that little convenient method.

29
00:01:31.000 --> 00:01:35.110
Does anyone remember what the convenient
method would be to be able to take

30
00:01:35.110 --> 00:01:37.780
a vector point to convert
it into another type?

31
00:01:37.780 --> 00:01:39.372
Does anyone remember what it was called?

32
00:01:39.372 --> 00:01:40.620
&gt;&gt; Into?

33
00:01:40.620 --> 00:01:43.503
&gt;&gt; Into is the method name.

34
00:01:43.503 --> 00:01:48.784
Impl From &lt;Vac &lt; (f64,

35
00:01:48.784 --> 00:01:54.072
f64)&gt; for a pointIter.

36
00:01:54.072 --> 00:01:56.390
Look at that, there we go.

37
00:01:56.390 --> 00:01:58.990
So we'll just have one of these,
make it convenient, right?

38
00:01:58.990 --> 00:02:03.670
So we're actually gonna consume a vector,
the vector will become ours and

39
00:02:03.670 --> 00:02:05.759
now I can just return pointIter.

40
00:02:05.759 --> 00:02:09.100
I'm gonna rename this
from value to points.

41
00:02:09.100 --> 00:02:14.950
Call this thing points,
and then index is 0, nice.

42
00:02:14.950 --> 00:02:18.945
So long as you give me a vector of points,
we'll create a pointIter.

43
00:02:18.945 --> 00:02:21.420
I know you can just create
an iterator out of a vector,

44
00:02:21.420 --> 00:02:22.965
it's not the point here, okay?

45
00:02:22.965 --> 00:02:27.295
I'm trying to walk us through creating
something a little bit more complex,

46
00:02:27.295 --> 00:02:30.838
even though it's probably a bit
duplicative, duplicative?

47
00:02:30.838 --> 00:02:32.605
What's the right term there?

48
00:02:34.195 --> 00:02:34.917
&gt;&gt; Sounds good to me.

49
00:02:34.917 --> 00:02:36.009
&gt;&gt; Duplicative?

50
00:02:36.009 --> 00:02:41.476
Sounds like I'm smart [LAUGH] but,
man, am I not [LAUGH], there we go,

51
00:02:41.476 --> 00:02:47.819
we got a nice little convenience method,
okay, feeling pretty good about it.

52
00:02:47.819 --> 00:02:52.960
Remember, it's just from T for
another item, right?

53
00:02:52.960 --> 00:02:55.950
So it's just two generics here, right?

54
00:02:55.950 --> 00:02:57.640
This is a generic, this is a generic.

55
00:02:57.640 --> 00:03:00.311
You can kinda implement it in
any cross section you want,

56
00:03:00.311 --> 00:03:02.100
as long as you own one of the generics.

57
00:03:03.540 --> 00:03:04.960
We own pointIter, so it's okay.

58
00:03:04.960 --> 00:03:06.220
So we couldn't do it.

59
00:03:06.220 --> 00:03:10.870
I believe we couldn't do this because
we don't own any of the things.

60
00:03:13.540 --> 00:03:17.720
Since we don't own it, you can't implement
a foreign trait on a foreign type.

61
00:03:17.720 --> 00:03:19.239
I think there's one rule
around it with generics.

62
00:03:19.239 --> 00:03:21.420
I forget the exact wording of it all.

63
00:03:21.420 --> 00:03:22.550
But there you go.

64
00:03:22.550 --> 00:03:26.070
All right, so we've already
implemented iterator for pointIter.

65
00:03:26.070 --> 00:03:30.306
Now let's create a point
trait that has one method,

66
00:03:30.306 --> 00:03:34.038
points and it returns a point iterator.

67
00:03:34.038 --> 00:03:37.216
Well, all right, let's do that.

68
00:03:37.216 --> 00:03:41.931
So trait Points,
we are making a pub trait,

69
00:03:41.931 --> 00:03:46.305
don't forget to make a pub trait,
holy cow.

70
00:03:46.305 --> 00:03:53.740
And let's have a function Points
which returns a pointIter, okay?

71
00:03:53.740 --> 00:03:54.660
We're cooking, aren't we?

72
00:03:54.660 --> 00:03:56.542
Do you feel the cooking
happen now all of a sudden?

73
00:03:59.542 --> 00:04:01.898
All right, let's create one more trait.

74
00:04:01.898 --> 00:04:05.040
We're gonna call it Contains.

75
00:04:05.040 --> 00:04:09.870
And that trait has one method,
contains_point that returns a bool.

76
00:04:09.870 --> 00:04:13.160
All right, so
let's do another pub trait Contains.

77
00:04:15.170 --> 00:04:18.480
And this thing has
contains_point which is a bool.

78
00:04:18.480 --> 00:04:22.700
All right, there we go,
feeling pretty good?

79
00:04:27.610 --> 00:04:28.829
I think so, I think so.

80
00:04:28.829 --> 00:04:30.200
All right, so what's the next thing?

81
00:04:32.560 --> 00:04:35.320
I just wanna make sure that I have,
okay, good.

82
00:04:35.320 --> 00:04:38.080
All right, so why did we do this?

83
00:04:39.230 --> 00:04:41.970
There's a reason why we did this and
it's very important.

84
00:04:41.970 --> 00:04:45.260
We're gonna do something called
a blanket implementation.

85
00:04:45.260 --> 00:04:46.550
Aah, it's gonna get cozy in here.

86
00:04:46.550 --> 00:04:48.170
Okay, here we go.

87
00:04:48.170 --> 00:04:51.780
So, let's think about what's going
on in our collidable over here.

88
00:04:51.780 --> 00:04:55.001
Our collidable is some T and

89
00:04:55.001 --> 00:04:59.630
it returns Boolean if they intersect.

90
00:05:00.650 --> 00:05:04.540
So what if we do something a bit clever?

91
00:05:04.540 --> 00:05:05.450
Let's go like this.

92
00:05:05.450 --> 00:05:09.396
Let's implement generic T.

93
00:05:09.396 --> 00:05:11.230
So we're starting off with the generic.

94
00:05:11.230 --> 00:05:12.722
I know this can get a little rowdy, okay?

95
00:05:12.722 --> 00:05:17.650
Implement collidable for that T.

96
00:05:18.870 --> 00:05:20.470
This word is gonna get a little,
are you ready?

97
00:05:22.110 --> 00:05:23.142
Which we implemented for?

98
00:05:24.822 --> 00:05:29.463
&gt;&gt; [INAUDIBLE]
&gt;&gt; T, let's go with T, did you just say T,

99
00:05:29.463 --> 00:05:30.890
did I hear that?

100
00:05:30.890 --> 00:05:32.665
Let's go, you got this.

101
00:05:32.665 --> 00:05:38.320
So we're gonna implement,
so collidable &lt;T&gt; for T.

102
00:05:38.320 --> 00:05:40.880
Now you're like, okay,
how does this work cuz it's generic?

103
00:05:40.880 --> 00:05:44.770
We don't have any details on this generic,
how are you doing that?

104
00:05:44.770 --> 00:05:50.560
Well, we need to constrain the T,

105
00:05:50.560 --> 00:05:56.362
where T is Points and it Contains.

106
00:05:58.512 --> 00:06:03.028
So that means, for
any T that implements both Points and

107
00:06:03.028 --> 00:06:07.270
Contains, we will implement collidable for
them.

108
00:06:08.490 --> 00:06:13.310
So, I know this kind of wow, we're
getting kinda into a wild area right now.

109
00:06:13.310 --> 00:06:14.250
I get it, okay?

110
00:06:14.250 --> 00:06:17.512
So that means, if we look at ourselves,
what type is ourself?

111
00:06:17.512 --> 00:06:18.751
It's a reference of T.

112
00:06:18.751 --> 00:06:20.615
What type is other?

113
00:06:20.615 --> 00:06:27.420
It's a reference of T or
a Points and Contains.

114
00:06:27.420 --> 00:06:31.827
That means we have two
methods available on self and

115
00:06:31.827 --> 00:06:35.217
other, which is Points and Contains.

116
00:06:35.217 --> 00:06:38.760
So I'm like this, for
Point in other.points().

117
00:06:40.700 --> 00:06:46.163
If self.contains_point (point) {return

118
00:06:46.163 --> 00:06:51.980
true} else {return false}, all right?

119
00:06:51.980 --> 00:06:56.808
Hey, well, wah wah wah wah wah wah wah
wah wah wah wah, okay, hold on, hold on,

120
00:06:56.808 --> 00:06:58.996
what's going on here?

121
00:06:58.996 --> 00:07:02.255
My goodness, you're right, I'm so stupid,

122
00:07:02.255 --> 00:07:06.418
I forgot to do this whole self thing,
it says it right there.

123
00:07:06.418 --> 00:07:10.906
[SOUND] I didn't even define my stuff
right, all right, and then, of course,

124
00:07:10.906 --> 00:07:12.470
we need contains_point.

125
00:07:12.470 --> 00:07:18.263
[SOUND] Feel so dumb now, of course.

126
00:07:18.263 --> 00:07:22.440
I didn't have it existing on the instance.

127
00:07:22.440 --> 00:07:25.359
I had it existing on the class conundrum.

128
00:07:25.359 --> 00:07:26.830
I just didn't even see that thing

