WEBVTT

1
00:00:00.000 --> 00:00:01.544
I'm gonna use terms like dropped.

2
00:00:01.544 --> 00:00:03.120
Dropped means releasing memory.

3
00:00:03.120 --> 00:00:06.745
So at the end of those little
squirrely brace scope that I created,

4
00:00:06.745 --> 00:00:08.698
the stuff inside of it was dropped.

5
00:00:08.698 --> 00:00:11.224
It was no longer considered valid.

6
00:00:11.224 --> 00:00:13.680
So there's three rules you
really have to be mindful of.

7
00:00:13.680 --> 00:00:17.835
And these are the primary rules you'll
run into mostly, at least in my opinion,

8
00:00:17.835 --> 00:00:21.396
in application development,
which is there can be one value owner.

9
00:00:21.396 --> 00:00:27.380
There can be unlimited immutable borrows,
references, with no mutable borrows.

10
00:00:27.380 --> 00:00:32.040
There can be only one mutable
borrow with no immutable borrows.

11
00:00:32.040 --> 00:00:36.924
Meaning you are allowed to hold on to
the value, you are allowed to reference

12
00:00:36.924 --> 00:00:41.500
the value or you're allowed to
immutably reference the value.

13
00:00:41.500 --> 00:00:43.757
You cannot have both reading and
writing and

14
00:00:43.757 --> 00:00:47.972
reading going on at the same time because
now you're gonna get into a weird state.

15
00:00:47.972 --> 00:00:50.612
Things can happen that you
may not want them to happen.

16
00:00:50.612 --> 00:00:53.767
And so we want it to be very careful.

17
00:00:53.767 --> 00:00:56.935
So one thing you can think about
is that if you have any moves,

18
00:00:56.935 --> 00:00:59.671
if something gets moved
while you have a reference,

19
00:00:59.671 --> 00:01:03.250
you would be referring to
memory that's no longer valid.

20
00:01:03.250 --> 00:01:05.494
So we have to be very careful
about how that happened.

21
00:01:05.494 --> 00:01:08.718
So Rust just has these rules
to prevent you from doing it.

22
00:01:08.718 --> 00:01:11.712
And as I discussed,
there's all the valid safe programs and

23
00:01:11.712 --> 00:01:13.543
there's the ones that Rust allows.

24
00:01:13.543 --> 00:01:16.343
So you may see that this
is safe Rust says, hey,

25
00:01:16.343 --> 00:01:19.651
I can't let you do that because
I can't know that safe.

26
00:01:19.651 --> 00:01:21.363
So it's a little different.

27
00:01:21.363 --> 00:01:23.093
All right, there's also a lifetime rule.

28
00:01:23.093 --> 00:01:25.489
A reference cannot outlive its value.

29
00:01:25.489 --> 00:01:27.377
In other words,
we saw that one right here.

30
00:01:27.377 --> 00:01:28.439
So this is a lifetime one.

31
00:01:30.394 --> 00:01:32.530
The thing we're holding on to or

32
00:01:32.530 --> 00:01:37.526
the vector is referring to things longer
than the things inside of it live.

33
00:01:37.526 --> 00:01:39.380
It's just too long.

34
00:01:39.380 --> 00:01:42.099
I find that this one I
don't run into too often.

35
00:01:42.099 --> 00:01:48.227
Again, I do mostly like little
applications with it, a lot of CLI tools.

36
00:01:48.227 --> 00:01:50.336
I don't run into it too often.

37
00:01:50.336 --> 00:01:53.812
So stated differently one var owns
the data, one var can change the data,

38
00:01:53.812 --> 00:01:57.417
many vars can look at the data,
you cannot look and change simultaneously.

39
00:01:57.417 --> 00:02:01.486
You cannot refer to something that has
been dropped kind of like the English

40
00:02:01.486 --> 00:02:02.335
version of it.

41
00:02:02.335 --> 00:02:06.510
All right, so let's do a little bit of
let's do some like little tests here to

42
00:02:06.510 --> 00:02:07.680
kind of play with it.

43
00:02:07.680 --> 00:02:11.002
So the first thing we're gonna do is we're
going to create a struct called item that

44
00:02:11.002 --> 00:02:12.577
derives the bug I just showed you that.

45
00:02:12.577 --> 00:02:15.585
I'll do it again with one property count,
that's the usize.

46
00:02:15.585 --> 00:02:17.650
So I'm gonna go up here.

47
00:02:17.650 --> 00:02:19.356
Follow along, if you can.

48
00:02:19.356 --> 00:02:25.040
We're gonna create struct called item with
a property called count that is a usize.

49
00:02:25.040 --> 00:02:27.651
And it's gonna implement this
thing called derive debug.

50
00:02:27.651 --> 00:02:30.828
This may be strange terms to you, you
probably have never seen that you're like,

51
00:02:30.828 --> 00:02:31.623
what the heck is it?

52
00:02:31.623 --> 00:02:33.890
It just allows you to pretty print it.

53
00:02:33.890 --> 00:02:38.687
It's a macro that will change your struct
and do something at compile time to allow

54
00:02:38.687 --> 00:02:42.799
rust to crawl its structure and
maybe it stores some additional data.

55
00:02:42.799 --> 00:02:44.417
I don't exactly know what it does.

56
00:02:44.417 --> 00:02:47.331
I've never actually looked
at what it expands to but

57
00:02:47.331 --> 00:02:49.890
I'm sure it makes perfect sense.

58
00:02:49.890 --> 00:02:50.390
So there we go.

59
00:02:51.390 --> 00:02:52.730
Should be pretty easy to type.

60
00:02:52.730 --> 00:02:53.960
We got this all down.

61
00:02:53.960 --> 00:02:55.580
So now let's do the next part.

62
00:02:55.580 --> 00:03:01.590
Create a function called add_one that
takes in the item and adds one to it.

63
00:03:01.590 --> 00:03:02.981
All right, should be pretty easy.

64
00:03:02.981 --> 00:03:07.880
So function add_one,
we have the item that is the item.

65
00:03:07.880 --> 00:03:10.750
It's gonna need to be mutable because
obviously we're gonna be adding one to it.

66
00:03:10.750 --> 00:03:14.849
So, all right item.count+=1.

67
00:03:14.849 --> 00:03:20.976
There is no ++ I wish there was ++,
Idabel I love ++ but you have 2+=1.

68
00:03:20.976 --> 00:03:23.357
It's the finer things in life
that make you annoyed and

69
00:03:23.357 --> 00:03:25.751
this is one of them let's go
back to our requirements.

70
00:03:25.751 --> 00:03:28.607
In the main function create
an item of type item and

71
00:03:28.607 --> 00:03:30.730
print it out with debug print.

72
00:03:30.730 --> 00:03:32.080
Okay, we can do that.

73
00:03:32.080 --> 00:03:38.312
So let Item= Item.count+=1.

74
00:03:38.312 --> 00:03:39.120
Fantastic, right?

75
00:03:39.120 --> 00:03:43.230
And so now we should be able to print
it out with the pretty debug printing.

76
00:03:43.230 --> 00:03:49.960
So println and do that fun, whatever
that thing is called and there you go.

77
00:03:49.960 --> 00:03:52.090
This should print out our item.

78
00:03:52.090 --> 00:03:53.321
Beautiful.

79
00:03:55.036 --> 00:03:56.350
Let's go back.

80
00:03:56.350 --> 00:03:58.050
Let's pass the item to add_one.

81
00:03:58.050 --> 00:04:01.460
So we mutated and
then let's print it out again, okay?

82
00:04:01.460 --> 00:04:04.388
Should be pretty easy add_one(item) and

83
00:04:04.388 --> 00:04:07.640
then we'll do the whole
printing one more time.

84
00:04:08.810 --> 00:04:12.304
And if you've done it all correctly,
you should have this incorrect program.

85
00:04:14.118 --> 00:04:18.990
So, does anyone know why it errors?

86
00:04:20.030 --> 00:04:24.960
Take a moment and type,
I'll give you a second, look at it.

87
00:04:24.960 --> 00:04:29.143
Would you look at it, experience it, and
just try to think, why is this erroring?

88
00:04:31.761 --> 00:04:33.550
Because as a person who uses TypeScript,

89
00:04:33.550 --> 00:04:35.602
this probably is pretty
frustrating looking.

90
00:04:35.602 --> 00:04:36.639
Like, why would this?

91
00:04:36.639 --> 00:04:38.218
This is just stupid.

92
00:04:38.218 --> 00:04:40.060
All right,
I'm gonna tell you what happened.

93
00:04:40.060 --> 00:04:42.203
Are you guys ready for what happened here?

94
00:04:42.203 --> 00:04:45.130
So first, let's look at the errors.

95
00:04:45.130 --> 00:04:50.470
So you get a warning right here that says,
value moved here.

96
00:04:51.720 --> 00:04:54.070
The actual error is over here.

97
00:04:54.070 --> 00:04:57.519
This says, borrow of moved value item.

98
00:05:00.946 --> 00:05:03.858
Well, let me ask you a question.

99
00:05:03.858 --> 00:05:07.757
I think I actually even have
it all printed out right here.

100
00:05:07.757 --> 00:05:10.161
There we go.

101
00:05:10.161 --> 00:05:12.300
Who owns item?

102
00:05:12.300 --> 00:05:13.450
Let's jump back in here.

103
00:05:13.450 --> 00:05:13.950
Who owns item?

104
00:05:15.900 --> 00:05:17.030
That line owns item, right?

105
00:05:18.830 --> 00:05:21.583
Who owns item at this point?

106
00:05:21.583 --> 00:05:23.026
&gt;&gt; The function add_one.

107
00:05:23.026 --> 00:05:25.337
&gt;&gt; The function owns
the item at that point,

108
00:05:25.337 --> 00:05:27.725
you have moved that value to the function.

109
00:05:27.725 --> 00:05:32.463
You did not give it a reference,
you gave it the value itself.

110
00:05:32.463 --> 00:05:36.480
And you can tell by the definition,
it consumes the value.

111
00:05:36.480 --> 00:05:38.930
So we will use this word consume a bunch.

112
00:05:38.930 --> 00:05:41.171
That means item has been consumed and

113
00:05:41.171 --> 00:05:45.490
look you can even see the,
look how good the errors are on this.

114
00:05:45.490 --> 00:05:47.937
It even says consider
changing this parameter and

115
00:05:47.937 --> 00:05:50.390
function to a borrow instead
of owning the value.

116
00:05:51.550 --> 00:05:56.026
It even tells you right there,
that's what the problem is.

117
00:05:56.026 --> 00:05:59.680
You're owning the value,
you're not borrowing the value.

118
00:05:59.680 --> 00:06:07.720
So if we take this, change the definition
to say that, we'll now get this error.

119
00:06:07.720 --> 00:06:12.189
So we've made it one step further notice
our borrow error has gone away because now

120
00:06:12.189 --> 00:06:14.532
we're passing in a reference to the item.

121
00:06:14.532 --> 00:06:17.162
It consumes a reference.

122
00:06:17.162 --> 00:06:19.818
The owner of the references now add_one,

123
00:06:19.818 --> 00:06:23.740
you got to think of a reference
almost like a value in of itself.

124
00:06:26.150 --> 00:06:27.710
Same kind of concept.

125
00:06:27.710 --> 00:06:29.150
But now look at this one.

126
00:06:29.150 --> 00:06:29.890
What's the problem here?

127
00:06:31.420 --> 00:06:32.069
Should be pretty straightforward.

128
00:06:32.069 --> 00:06:33.800
Come on I can feel you guys got it.

129
00:06:33.800 --> 00:06:35.560
Come on, here we go.

130
00:06:35.560 --> 00:06:36.530
&gt;&gt; It's not mutable.

131
00:06:36.530 --> 00:06:39.210
&gt;&gt; It's not mutable my
goodness just geniuses.

132
00:06:39.210 --> 00:06:40.650
So there we go mute.

133
00:06:40.650 --> 00:06:41.705
So now we have that.

134
00:06:41.705 --> 00:06:43.719
My goodness, now we have another error,
what happened here?

135
00:06:44.990 --> 00:06:46.460
I think we can all guess
what the error is.

136
00:06:46.460 --> 00:06:47.955
Can anyone tell me what the error is?

137
00:06:50.348 --> 00:06:55.270
&gt;&gt; When you defined item line two of main,
it wasn't mutable.

138
00:06:56.550 --> 00:06:59.520
&gt;&gt; Correct, but that's not the issue here.

139
00:06:59.520 --> 00:07:03.083
Here, just looking at that,
it says mutable reference, but

140
00:07:03.083 --> 00:07:05.390
found Immutable reference.

141
00:07:05.390 --> 00:07:07.400
So we gotta change this
one to mutable as well.

142
00:07:08.430 --> 00:07:10.718
Awesome.
Now it'll error one more time and

143
00:07:10.718 --> 00:07:13.250
look at where the highlight error is.

144
00:07:13.250 --> 00:07:16.750
The highlight error tells you
what you should be changing.

145
00:07:16.750 --> 00:07:18.730
Consider changing this to be mutable.

146
00:07:18.730 --> 00:07:20.390
It tells you where the problem is.

147
00:07:20.390 --> 00:07:21.994
You're walking the errors and

148
00:07:21.994 --> 00:07:27.190
the errors literally hold your hand from
problem to solution all the way through.

149
00:07:27.190 --> 00:07:27.920
So it's pretty cool.

150
00:07:27.920 --> 00:07:29.387
It's a pretty dang good compiler.

151
00:07:29.387 --> 00:07:33.170
I don't know if you've ever worked in C++,
but that's a terrible compiler.

152
00:07:33.170 --> 00:07:34.457
Whereas this one, this is pretty good.

153
00:07:34.457 --> 00:07:37.830
This gives you pretty nice
answers all the way through.

154
00:07:37.830 --> 00:07:41.432
Now, of course, there's some
colloquialisms you have to know.

155
00:07:41.432 --> 00:07:44.474
Once you start getting familiar
with spotting them, it becomes

156
00:07:44.474 --> 00:07:49.370
excessively easy, but you just have to
have this mentality of who owns the value?

157
00:07:49.370 --> 00:07:51.460
How long does my value live for?

158
00:07:51.460 --> 00:07:56.499
Long as you can ask, or long as you can
answer those questions, Rust becomes easy.

159
00:07:56.499 --> 00:08:00.281
If you cannot answer those questions,
Rust is excessively difficult.

160
00:08:00.281 --> 00:08:04.289
So this is where it gets a lot of its
bad name from, is this right here.

161
00:08:04.289 --> 00:08:08.189
All right, so, let's do this again.

162
00:08:08.189 --> 00:08:09.850
Let's break another rule?

163
00:08:09.850 --> 00:08:13.399
Yeah by the way, I forgot to ask you,
what was the rule we are breaking?

164
00:08:16.504 --> 00:08:17.980
&gt;&gt; Only one value owner.

165
00:08:17.980 --> 00:08:19.410
&gt;&gt; Only one value owner.

166
00:08:19.410 --> 00:08:21.030
We tried to have two value onwers.

167
00:08:21.030 --> 00:08:23.787
We had our original definition,
plus the moment passed into the function,

168
00:08:23.787 --> 00:08:26.660
then we try to use our original
definition again, can't do that.

169
00:08:26.660 --> 00:08:28.620
There can only be one Lord of the Ring,
remember that.

170
00:08:30.080 --> 00:08:31.190
Was a really great reference.

171
00:08:31.190 --> 00:08:32.840
I feel like there's something
really funny there.

172
00:08:32.840 --> 00:08:36.037
I just gonna figure out how to make Frodo
into a reference because he's not owner of

173
00:08:36.037 --> 00:08:37.580
the ring, he's just holding on to it.

174
00:08:37.580 --> 00:08:38.631
There's something really good about that.

