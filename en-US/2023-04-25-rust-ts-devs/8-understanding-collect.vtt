WEBVTT

1
00:00:00.037 --> 00:00:04.587
All right, so here we go hopefully
your code looks something like this.

2
00:00:04.587 --> 00:00:07.053
Yeah, everyone followed along,
did everyone follow along successfully?

3
00:00:07.053 --> 00:00:11.171
Yeah, can I see some yeses, okay,
I see some heads going up and down.

4
00:00:11.171 --> 00:00:15.009
Okay, so what is collect, this is probably
a lot different than what you're used to.

5
00:00:15.009 --> 00:00:17.940
Of course we need to convert
back into a structure.

6
00:00:17.940 --> 00:00:20.610
So, we're gonna do this
manually right now,

7
00:00:20.610 --> 00:00:24.380
I'm gonna show you how to manually
do a collect, so what it does.

8
00:00:24.380 --> 00:00:28.690
So let's go like this, the first thing I'm
gonna do is I'm gonna drop this collect.

9
00:00:28.690 --> 00:00:32.540
All right, and
then I'm just gonna do this, all right.

10
00:00:32.540 --> 00:00:37.977
Then I'm gonna also drop this type
definition, because it's gonna be wrong.

11
00:00:37.977 --> 00:00:40.507
Right away I've ran into some
sort of weird error, and

12
00:00:40.507 --> 00:00:44.520
if you're following along you probably
ran into the same error as well.

13
00:00:44.520 --> 00:00:48.537
This is the borrow checker,
rearing its ugly head coming up.

14
00:00:48.537 --> 00:00:52.200
And this will make a lot of sense, we're
actually gonna go over this exact problem

15
00:00:52.200 --> 00:00:55.028
here in a little bit, but
this is fantastic that we ran into it.

16
00:00:55.028 --> 00:00:57.309
So I want to take foo, and

17
00:00:57.309 --> 00:01:03.079
I now want to convert it from
an iterator back into a new vector.

18
00:01:03.079 --> 00:01:08.746
So let's go like this, new vector
equals vec bang and I'll do that.

19
00:01:08.746 --> 00:01:13.049
Now of course we need to make things
mutable, so I'm gonna go mute on this and

20
00:01:13.049 --> 00:01:16.093
I'm gonna go up to our iterator and
also type in mute.

21
00:01:16.093 --> 00:01:20.351
Because to be able to call next on
an iterator, you need to be able to mutate

22
00:01:20.351 --> 00:01:24.340
its underlying contents,
how I had that index in the drawing.

23
00:01:24.340 --> 00:01:27.612
Something needs to be able to
update itself, so I'm saying hey,

24
00:01:27.612 --> 00:01:29.166
you are allowed to be updated.

25
00:01:29.166 --> 00:01:33.284
So now I'm gonna go like this,
I'm gonna go while let some, so

26
00:01:33.284 --> 00:01:35.380
here's pattern matching.

27
00:01:35.380 --> 00:01:38.108
We're encountering
an undefined potentially, so

28
00:01:38.108 --> 00:01:40.158
don't worry we'll go over this more.

29
00:01:40.158 --> 00:01:44.285
But I'm gonna go like this,
x equals foo.next,

30
00:01:44.285 --> 00:01:49.130
remember next calls the next
value out of an iterator.

31
00:01:49.130 --> 00:01:52.034
At some point the iterator
will stop producing values,

32
00:01:52.034 --> 00:01:54.763
hence the reason why it
could be an undefined value.

33
00:01:54.763 --> 00:01:58.803
So if I hover over the documentation,
it says it advances the iterator and

34
00:01:58.803 --> 00:02:01.682
returns the next value,
that makes sense, right?

35
00:02:01.682 --> 00:02:08.173
So that's why it's gonna be an option, of
item as opposed to just the item itself.

36
00:02:08.173 --> 00:02:10.457
All right, so now that we've done that,

37
00:02:10.457 --> 00:02:14.310
we have a wild statement that will
run until an undefined is returned,

38
00:02:14.310 --> 00:02:18.121
it's just gonna keep on running
cuz we're pattern matching it out.

39
00:02:18.121 --> 00:02:21.234
It won't be able to pattern match and
none, so therefore,

40
00:02:21.234 --> 00:02:23.491
it will stop being inside that while loop.

41
00:02:23.491 --> 00:02:28.478
So here I can go new vector.push x,

42
00:02:28.478 --> 00:02:33.806
I'm now pushing x into my new vector.

43
00:02:33.806 --> 00:02:38.740
And then down at the print statement,
I can go new vector.

44
00:02:38.740 --> 00:02:43.068
We still have this one problem and
this of course is a Baro checker problem,

45
00:02:43.068 --> 00:02:47.413
I'm gonna give you a brief little
description of what's happening here.

46
00:02:47.413 --> 00:02:50.105
But I want someone to just try to guess,

47
00:02:50.105 --> 00:02:55.667
with the best of your ability based on
this error message, what went wrong here?

48
00:02:55.667 --> 00:02:58.023
It's good just to exercise these muscles.

49
00:02:58.023 --> 00:03:00.794
Well, let me tell you this.

50
00:03:00.794 --> 00:03:05.727
This iterator refers to the vector, right.

51
00:03:05.727 --> 00:03:09.830
It's not the vector itself,
it refers to the vector.

52
00:03:09.830 --> 00:03:17.360
Which means how long does this value live,
who owns this value, nobody does.

53
00:03:17.360 --> 00:03:20.360
It was created temporarily,
we create a reference to it.

54
00:03:21.650 --> 00:03:25.550
And then it went away, and so
now we just have a reference to nothing.

55
00:03:25.550 --> 00:03:31.546
So in the Rust land, you'd have to go
like this, let data = this and data.

56
00:03:31.546 --> 00:03:35.912
So now we have something in which we
said it's gonna live long enough, so

57
00:03:35.912 --> 00:03:39.620
that we can now refer to it for
the rest of our function.

58
00:03:39.620 --> 00:03:42.770
This is a very kind of rusty concept but
I wanted to get it in your head a little

59
00:03:42.770 --> 00:03:45.031
early so that you can kind
of see some of these things.

60
00:03:45.031 --> 00:03:49.174
Because it makes you think of your program
a little bit differently, you start

61
00:03:49.174 --> 00:03:53.467
thinking about how long do my variables
live, because that's very important.

62
00:03:53.467 --> 00:03:58.087
Because if I'm referring to things, and
they stop living, well, what happens,

63
00:03:58.087 --> 00:04:00.600
that memory could be completely different.

64
00:04:00.600 --> 00:04:02.170
You could be referring
to something different.

65
00:04:02.170 --> 00:04:05.837
This week we have these things, this idea
of C-dangling pointers where you're like,

66
00:04:05.837 --> 00:04:09.400
off referring to who knows what and
stuff explodes and it's very terrible.

67
00:04:09.400 --> 00:04:12.584
This is one of those reasons why
it could be terrible, all right.

68
00:04:12.584 --> 00:04:16.969
So I'm gonna move on,
does everyone kinda see how collect works.

69
00:04:16.969 --> 00:04:21.734
So in the sense that you create a vector,
we go through the iterator one at a time,

70
00:04:21.734 --> 00:04:24.730
and we push the map
values into a new vector.

71
00:04:24.730 --> 00:04:28.846
And then that is what collects does,
it's just doing this for us.

72
00:04:28.846 --> 00:04:32.969
It's just not magic anymore,
it's actually pretty simple.

73
00:04:32.969 --> 00:04:35.065
You could do this in TypeScript
pretty easily, all right.

74
00:04:35.065 --> 00:04:36.187
I Yes?

75
00:04:36.187 --> 00:04:39.240
&gt;&gt; So
data now lives on while main is alive.

76
00:04:39.240 --> 00:04:42.594
&gt;&gt; Yes, data now lives for
the duration of main, if you will.

77
00:04:42.594 --> 00:04:47.391
Hopefully that kinda demystifies some
level of what collect does, so instead of

78
00:04:47.391 --> 00:04:52.338
calling collect, we just manually took out
one value at a time out of our iterator.

79
00:04:52.338 --> 00:04:57.172
Put it into a collection and then at
the end we've just performed a collect.

80
00:04:57.172 --> 00:05:01.441
The thing is is most things in programming
aren't magical, if you take a moment

81
00:05:01.441 --> 00:05:05.281
to think about it, you could probably
create most of it pretty easily.

82
00:05:05.281 --> 00:05:07.918
It's just a lot of these convenient
functions, all right, so

83
00:05:07.918 --> 00:05:11.480
you wanna see something pretty dang cool
about collect, that's a little unusual?

84
00:05:12.770 --> 00:05:16.119
Well, have you ever been into a situation,
where you wanna join a bunch of strings?

85
00:05:16.119 --> 00:05:18.420
Well, in JavaScript you just do.join,
right?

86
00:05:18.420 --> 00:05:21.971
Well, we can do the same
thing here with collect.

87
00:05:21.971 --> 00:05:26.488
I called collect, but
I called collect, I'm not in prison.

88
00:05:26.488 --> 00:05:29.266
I'm calling the function collect and

89
00:05:29.266 --> 00:05:34.040
notice that the string is my type,
that was smart enough.

90
00:05:34.040 --> 00:05:37.107
To call the underlying function collect,

91
00:05:37.107 --> 00:05:42.058
on a string to gather all of these
into a string as opposed to a vector.

92
00:05:42.058 --> 00:05:47.372
By simply stating its type
collect behaved differently.

93
00:05:47.372 --> 00:05:49.433
Again, I could do with a hash set,

94
00:05:49.433 --> 00:05:52.570
have you ever had to convert
an array into a hash set?

95
00:05:52.570 --> 00:05:56.548
We'll look at this, you could have
a vector ,turn it into an iterator and

96
00:05:56.548 --> 00:05:57.262
collect it.

97
00:05:57.262 --> 00:06:01.953
And because the type is hash set,
collect is smart enough to then run

98
00:06:01.953 --> 00:06:05.262
the hash set code as
opposed to the vector code.

99
00:06:05.262 --> 00:06:10.136
It's now a hash set, you can do
it with the map long as you have

100
00:06:10.136 --> 00:06:13.970
a tuple coming out of your map or
out of this map.

101
00:06:13.970 --> 00:06:15.445
You can collect it into a hash map.

102
00:06:15.445 --> 00:06:18.185
A hash map is the equivalent
of a map in TypeScript,

103
00:06:18.185 --> 00:06:20.302
they're effectively the same thing.

104
00:06:20.302 --> 00:06:21.520
So look at that,

105
00:06:21.520 --> 00:06:27.527
I am now having a delicious map by using
collect like that's pretty cool, right?

106
00:06:27.527 --> 00:06:30.040
Right, yes thank you, okay.

107
00:06:30.040 --> 00:06:31.560
I wanna see people get excited, okay?

108
00:06:31.560 --> 00:06:32.654
For me, this is really exciting.

109
00:06:32.654 --> 00:06:35.994
By the way this is just an example of
destructuring going on right here,

110
00:06:35.994 --> 00:06:37.300
pretty fantastic.

111
00:06:37.300 --> 00:06:39.469
So what's happening right here for
those that don't know,

112
00:06:39.469 --> 00:06:41.522
we have a vector of string or
string references, right?

113
00:06:41.522 --> 00:06:44.532
The string references
are referring to strings,

114
00:06:44.532 --> 00:06:46.687
that are literally in our program.

115
00:06:46.687 --> 00:06:51.862
So when our program compiles, quote this
quote lives somewhere within the memory

116
00:06:51.862 --> 00:06:56.597
of the binary, so this is called a static
string reference or a static str.

117
00:06:56.597 --> 00:06:59.202
But don't worry about it,
we just say this, there you go.

118
00:06:59.202 --> 00:07:02.366
And then into iterator, so
instead of referring to the vector,

119
00:07:02.366 --> 00:07:05.482
it actually takes the vector and
converts it into an iterator.

120
00:07:05.482 --> 00:07:09.707
So this is how we'd get around that
previous borrow checker problem as well,

121
00:07:09.707 --> 00:07:13.816
if we could convert our data into
an iterator as opposed to referring to it.

122
00:07:13.816 --> 00:07:18.676
I know a little confusing, a numerate
in JavaScript when you do a dot map

123
00:07:18.676 --> 00:07:21.516
your second argument is what index it is.

124
00:07:21.516 --> 00:07:26.348
In rust that doesn't exist because you
didn't tell it, so enumerate makes it so

125
00:07:26.348 --> 00:07:30.339
that the first argument is index,
and the second one is the value.

126
00:07:30.339 --> 00:07:33.910
Kind of cool and so I can say,
hey I actually do want indexes.

127
00:07:33.910 --> 00:07:39.295
So I said, you're an iterator, you're
an iterator vector, give me indexes,

128
00:07:39.295 --> 00:07:43.822
and I'm gonna change you from index
item to item index in the tuple.

129
00:07:43.822 --> 00:07:48.129
Because I want to go from string to
number, not from number to string,

130
00:07:48.129 --> 00:07:49.891
and then I can call collect.

131
00:07:49.891 --> 00:07:53.269
And now we have a HashMap,
look at that it's fantastic.

132
00:07:53.269 --> 00:07:55.830
There's also some,
we're gonna play a little quick game here,

133
00:07:55.830 --> 00:07:58.263
we're gonna see how much you
guys are understanding, okay.

134
00:07:58.263 --> 00:08:03.827
We're gonna do something cool, so
what's this, what is the value of value?

135
00:08:03.827 --> 00:08:05.517
&gt;&gt; 6.

136
00:08:05.517 --> 00:08:08.176
&gt;&gt; Yes, it's a perfect number,
by the way isn't that kinda cool?

137
00:08:08.176 --> 00:08:11.763
One plus two plus three is also
its components and blah, blah, and

138
00:08:11.763 --> 00:08:12.720
adds to itself.

139
00:08:12.720 --> 00:08:15.076
Anyways, so there you go fantastic.

140
00:08:15.076 --> 00:08:18.826
You can take an iterator and instead of
calling collect, you can actually perform

141
00:08:18.826 --> 00:08:22.324
this operation, such as sum, it converted
the entire vector into a value.

142
00:08:22.324 --> 00:08:26.967
What about this one,
what is the value of how many times?

143
00:08:26.967 --> 00:08:29.413
&gt;&gt; Three, wait no, one.

144
00:08:29.413 --> 00:08:32.420
&gt;&gt; Yes, it's one,
we just called count on it.

145
00:08:32.420 --> 00:08:34.619
So we converted it from an iterator, and

146
00:08:34.619 --> 00:08:38.450
just counted how many times it could
call next, and then return that.

147
00:08:38.450 --> 00:08:41.606
So just like collect,
count is almost no different.

148
00:08:42.988 --> 00:08:44.327
All right, what will this print?

149
00:08:44.327 --> 00:08:48.417
Now, this is a lot of craziness going on
here, so you're just gonna have to try and

150
00:08:48.417 --> 00:08:52.118
struggle your way through this, but
what do you think it's gonna print?

151
00:08:54.816 --> 00:08:57.726
&gt;&gt; 9?

152
00:08:57.726 --> 00:08:58.828
&gt;&gt; 5 and 9?

153
00:08:58.828 --> 00:08:59.692
&gt;&gt; 5, 9?

154
00:08:59.692 --> 00:09:02.435
&gt;&gt; Or skipping 2?

155
00:09:02.435 --> 00:09:04.420
&gt;&gt; 5, 9 was the correct answer.

156
00:09:04.420 --> 00:09:06.996
It's gonna skip 1, it's gonna skip 2,

157
00:09:06.996 --> 00:09:11.019
it's gonna take while x is greater than 4,
which is 5, then 9.

158
00:09:11.019 --> 00:09:15.810
Then the next 4 is not greater than 4,
therefore it stops, and

159
00:09:15.810 --> 00:09:18.398
for each will print out each line.

160
00:09:18.398 --> 00:09:19.119
Pretty cool,

161
00:09:19.119 --> 00:09:23.205
right there's a lot of little combinators
you can do with your iterator so long as

162
00:09:23.205 --> 00:09:27.373
you kind of live in this world where
you're making sure you're using iterators.

163
00:09:27.373 --> 00:09:31.004
All of a sudden you have a huge expressive
set of how to work with your iterators.

164
00:09:31.004 --> 00:09:36.421
It's pretty neat though, all right,
last time, what about this one.

165
00:09:36.421 --> 00:09:41.177
What are we gonna get here, for
those that don't know, x modulo 2,

166
00:09:41.177 --> 00:09:42.903
checking for evenness.

167
00:09:47.189 --> 00:09:53.316
&gt;&gt; Either 1 and 3, or 2, or either 1 or 2.

168
00:09:53.316 --> 00:09:57.063
&gt;&gt; It is 1, because remember,
we don't go over indices,

169
00:09:57.063 --> 00:10:00.160
we're going over the values themselves.

170
00:10:00.160 --> 00:10:04.600
So 1 is not even, 2 is even,

171
00:10:04.600 --> 00:10:07.804
3 is not even count.

172
00:10:07.804 --> 00:10:10.420
&gt;&gt; I wasn't sure what the asterisks
might have like, selected for

173
00:10:10.420 --> 00:10:13.626
things that were false or selected for
things that were true, I wasn't sure.

174
00:10:13.626 --> 00:10:16.713
&gt;&gt; So
the asterisk itself is this right here,

175
00:10:16.713 --> 00:10:20.240
is referring to the contents
inside the vector.

176
00:10:20.240 --> 00:10:27.659
That means x is not gonna be an integer,
it's gonna be a reference to an integer.

177
00:10:27.659 --> 00:10:30.203
And since it's also using filter,
filter doesn't consume, so

178
00:10:30.203 --> 00:10:32.158
it's actually a double
reference to an integer.

179
00:10:32.158 --> 00:10:35.443
So by throwing this out here,
since copies implemented blah, blah,

180
00:10:35.443 --> 00:10:38.798
you now have an integer it's beautiful and
now you can compare it to 2.

181
00:10:38.798 --> 00:10:43.185
I know it's a super long winded
way to say it, don't worry.

182
00:10:43.185 --> 00:10:48.164
It becomes very obvious how and
when to do this, the more you use it.

183
00:10:48.164 --> 00:10:53.187
And often, this is just syntax,
I rarely ever do this it's just for this.

184
00:10:53.187 --> 00:10:56.830
This happened so it's a very specific
thing I'm just having to do it.

185
00:10:56.830 --> 00:11:01.828
All right, so you can also create
iterators from other collections,

186
00:11:01.828 --> 00:11:04.718
so I can have a HashMap and call for each.

187
00:11:04.718 --> 00:11:08.710
Now notice that this for each has a much
better definition than my right key than

188
00:11:08.710 --> 00:11:11.918
value it doesn't have to feel great,
anyways so there you go so

189
00:11:11.918 --> 00:11:13.081
I can just say hey map.

190
00:11:13.081 --> 00:11:16.085
Give me a reference iterator, and
I can go over every single value.

191
00:11:16.085 --> 00:11:20.315
Which means I can also skip,
I can take while, I can do skip while,

192
00:11:20.315 --> 00:11:22.898
I can do all the different combinators.

193
00:11:22.898 --> 00:11:25.530
And if you're feeling extra spicy
you can even write your own, and

194
00:11:25.530 --> 00:11:27.830
it'll integrate right into this.

195
00:11:27.830 --> 00:11:30.019
You can also do iterators from hash sets.

196
00:11:30.019 --> 00:11:33.716
And in fact, you can even create your
own iterators if you ever wanted to.

197
00:11:33.716 --> 00:11:38.737
So if you have your struct called to do,
you could actually do a for loop that

198
00:11:38.737 --> 00:11:44.337
would go over each one of them, because
you allowed it to be iterable effectively.

199
00:11:44.337 --> 00:11:46.960
You created an iterator for
it in some implementation, and

200
00:11:46.960 --> 00:11:49.959
we're gonna actually do this so
that's like the end goal of today.

201
00:11:49.959 --> 00:11:54.312
Is to get to the point where we can create
our own iterators, all right yes Mark.

202
00:11:54.312 --> 00:12:00.455
&gt;&gt; Would the borrow checker error on some
of these should we use into inter instead.

203
00:12:00.455 --> 00:12:02.399
&gt;&gt; Well since they're all sing,

204
00:12:02.399 --> 00:12:06.885
so remember that earlier Baro checker
error we had, since these are all

205
00:12:06.885 --> 00:12:11.699
individual you will notice that I don't
hold on to any value it won't drop.

206
00:12:11.699 --> 00:12:15.067
So the duration of this will last for
the duration of all the statements, so

207
00:12:15.067 --> 00:12:18.180
therefore we won't have
any Baro checker problem.

208
00:12:18.180 --> 00:12:21.487
Baro checker only happens,
you could use Intuitor, right?

209
00:12:21.487 --> 00:12:23.043
Intuitor would probably be better,

210
00:12:23.043 --> 00:12:25.960
we'll give a little bit better
explanation of that in a little bit.

211
00:12:25.960 --> 00:12:32.271
Intuitorator returns the iterator as the
item and it now owns the underlying data.

212
00:12:32.271 --> 00:12:35.784
Whereas, Iter doesn't own the underlying
data, it only refers to it so

213
00:12:35.784 --> 00:12:36.945
you don't consume it.

214
00:12:36.945 --> 00:12:38.824
And that becomes much more meaningful,

215
00:12:38.824 --> 00:12:41.588
once you understand value in
the Baro checker cuz you don't

216
00:12:41.588 --> 00:12:44.971
sometimes want to consume your array
every time you create an iterator.

217
00:12:44.971 --> 00:12:48.755
You wanna be able to go through it and
then still have it at the end.

218
00:12:48.755 --> 00:12:50.445
And so, it'll make more sense.

