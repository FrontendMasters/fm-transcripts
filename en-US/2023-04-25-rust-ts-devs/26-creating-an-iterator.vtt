WEBVTT

1
00:00:00.320 --> 00:00:02.224
All right, so
we're gonna take it to the next level.

2
00:00:02.224 --> 00:00:05.510
We're gonna make some things that
are a bit useless at this point, okay?

3
00:00:05.510 --> 00:00:07.329
But they show us how to use Rust.

4
00:00:07.329 --> 00:00:10.522
But even more, they show us how to do
the greatest thing in the universe, or

5
00:00:10.522 --> 00:00:12.030
one of my favorite things.

6
00:00:12.030 --> 00:00:13.899
It's like one step below metaprogramming.

7
00:00:13.899 --> 00:00:15.439
It's pretty exciting.

8
00:00:15.439 --> 00:00:19.319
So we're gonna start by
creating an iterator ourselves.

9
00:00:19.319 --> 00:00:22.321
So remember, iterator is not
just something we interact with,

10
00:00:22.321 --> 00:00:24.510
it's something we can create ourselves.

11
00:00:24.510 --> 00:00:26.450
We're going to implement an iterator.

12
00:00:26.450 --> 00:00:29.339
Now if you forgot,
let's jump back over here.

13
00:00:29.339 --> 00:00:32.770
If you remember,
an iterator is not the object.

14
00:00:32.770 --> 00:00:35.920
So if we wanted to make an iterator for
the rectangle,

15
00:00:35.920 --> 00:00:38.470
our rectangle is not an iterator.

16
00:00:38.470 --> 00:00:42.407
We'd have to create something like a rect
itor that would become the iterator that

17
00:00:42.407 --> 00:00:44.610
could iterate over our rectangle.

18
00:00:44.610 --> 00:00:48.180
So you could imagine,
we could create something like this,

19
00:00:48.180 --> 00:00:51.761
that takes in a rectangle and
gives us each one of the points.

20
00:00:51.761 --> 00:00:55.880
So that means we're gonna need some sort
of iterator, let's just call it rectiter,

21
00:00:59.822 --> 00:01:03.080
To make this easy, by the way,
I'm not gonna have any lifetimes.

22
00:01:03.080 --> 00:01:06.092
So if we were to make this nicer,
we would just refer to our rectangle.

23
00:01:06.092 --> 00:01:06.708
But instead,

24
00:01:06.708 --> 00:01:10.106
we're just gonna have a list of points
that we're gonna walk through, okay?

25
00:01:10.106 --> 00:01:12.748
I didn't wanna get into
the whole lifetime deal.

26
00:01:12.748 --> 00:01:15.037
So, we're gonna do this.

27
00:01:15.037 --> 00:01:20.028
We'll have two properties on it,
one will be points,

28
00:01:20.028 --> 00:01:26.120
which will be a vector of float 64 and
the other one will be index.

29
00:01:27.390 --> 00:01:29.600
And every time next is called,

30
00:01:29.600 --> 00:01:33.690
I'm gonna get the current point
that we have on our list.

31
00:01:33.690 --> 00:01:39.221
I'm going to increment our index, and
then I'm gonna return the current point.

32
00:01:39.221 --> 00:01:43.438
So that way,
it laserly works through our rectangle.

33
00:01:43.438 --> 00:01:45.378
So, let's just do that now.

34
00:01:45.378 --> 00:01:48.118
This is kind off exciting,
I hope you guys are feeling excited.

35
00:01:48.118 --> 00:01:48.958
I'm feeling excited.

36
00:01:48.958 --> 00:01:54.636
So, let's go to [LAUGH] our rectangle
file, and let's create a new structure.

37
00:01:54.636 --> 00:01:57.418
So I'm gonna go to the bottom, and
I'm gonna create it down here.

38
00:01:57.418 --> 00:02:02.215
So I'm gonna go like this,
struct RectIter, all right.

39
00:02:02.215 --> 00:02:07.256
And inside of our struct, remember,
we're gonna want that points item,

40
00:02:07.256 --> 00:02:12.957
so I'm gonna go points, which is gonna
be a vector of a tuple that's F64, F64.

41
00:02:12.957 --> 00:02:17.311
So a little tuple never hurt anybody.

42
00:02:17.311 --> 00:02:20.503
And so let's do an index at 0.

43
00:02:20.503 --> 00:02:21.123
And so, there we go.

44
00:02:21.123 --> 00:02:25.620
Oop, not 0, sorry,
let's go usize, there we go.

45
00:02:25.620 --> 00:02:27.572
That makes sense, right?

46
00:02:27.572 --> 00:02:30.202
So we're gonna have a list of points,
we're gonna walk through them.

47
00:02:30.202 --> 00:02:32.933
Again, we could have taken
a reference to the rectangle.

48
00:02:32.933 --> 00:02:34.671
We'd start doing lifetimes.

49
00:02:34.671 --> 00:02:35.894
I'd explain these lifetimes.

50
00:02:35.894 --> 00:02:36.894
You'd look at me confused.

51
00:02:36.894 --> 00:02:39.294
And then I think it just wouldn't be a w.

52
00:02:39.294 --> 00:02:41.094
So, we're not gonna do it that way.

53
00:02:41.094 --> 00:02:42.434
Plus we're gonna delete this here shortly.

54
00:02:42.434 --> 00:02:44.474
So, we have our rectiter.

55
00:02:44.474 --> 00:02:47.054
But how do we make it iterate?

56
00:02:47.054 --> 00:02:51.214
Well, it's always a trait, right?

57
00:02:51.214 --> 00:02:55.894
Impl Iterator for RectIter.

58
00:02:58.274 --> 00:03:01.142
Now, you're gonna see something
that's a little bit different here.

59
00:03:01.142 --> 00:03:03.412
This is called an associated type.

60
00:03:03.412 --> 00:03:05.124
This is us telling Rust,

61
00:03:05.124 --> 00:03:09.454
this is what's gonna come out
of our method every single time.

62
00:03:09.454 --> 00:03:12.694
So they're called an associated type.

63
00:03:12.694 --> 00:03:18.088
So I'm gonna say, okay,
my associated type is gonna be float64,

64
00:03:18.088 --> 00:03:20.790
or a tuple of float64s, right?

65
00:03:21.810 --> 00:03:22.770
That's this thing right here.

66
00:03:23.930 --> 00:03:29.314
So, now that you have the associated type,
we need to implement the next method.

67
00:03:29.314 --> 00:03:32.594
And the next method,
remember what we have to do.

68
00:03:32.594 --> 00:03:38.334
Get our current point,
Increment our index.

69
00:03:38.334 --> 00:03:39.634
All right, here we go.

70
00:03:39.634 --> 00:03:41.034
Are you ready for this beautiful thing?

71
00:03:41.034 --> 00:03:43.135
So now, we need to do this.

72
00:03:43.135 --> 00:03:48.181
So first, our point is going
to be an item inside of,

73
00:03:48.181 --> 00:03:50.835
well, inside of our list.

74
00:03:50.835 --> 00:03:55.915
So we can go like this,
self., let's see, points.

75
00:03:55.915 --> 00:03:58.040
Now, here's where it
gets kind of interesting.

76
00:03:58.040 --> 00:04:02.030
So let's kinda break one of our rules,
or maybe we can do it really nice.

77
00:04:02.030 --> 00:04:03.035
Let's find out which one we can do.

78
00:04:03.035 --> 00:04:06.435
So I can do get at self.index.

79
00:04:06.435 --> 00:04:08.530
But let's look at that for a second.

80
00:04:08.530 --> 00:04:09.575
What do we get out of here?

81
00:04:09.575 --> 00:04:11.855
We get a reference to the point.

82
00:04:11.855 --> 00:04:17.130
Cuz remember, when you do a get, you don't
get the item, you get a reference to it.

83
00:04:17.130 --> 00:04:20.050
Now I think we could use this method
called drain to just pull out

84
00:04:20.050 --> 00:04:21.935
the items one at a time out of our vector.

85
00:04:21.935 --> 00:04:24.655
But we're not gonna do that, instead we're
gonna do it a little bit differently.

86
00:04:24.655 --> 00:04:25.335
We'll go like this.

87
00:04:28.813 --> 00:04:34.603
If self.length, well, my computer
is chugging along all of a sudden.

88
00:04:34.603 --> 00:04:39.320
If, not self.length,
if points.length this is less than,

89
00:04:39.320 --> 00:04:41.725
oopsies, what am I doing here?

90
00:04:41.725 --> 00:04:49.223
If self.index &lt; points.length, we can
return the correct thing or to invert it.

91
00:04:49.223 --> 00:04:52.176
This is just really stupid logic
right here, so just deal with it.

92
00:04:52.176 --> 00:04:54.694
There's probably some nicer methods here.

93
00:04:54.694 --> 00:04:58.636
If it's greater than that,
we can just return None, right?

94
00:04:58.636 --> 00:05:00.416
There's nothing to happen here.

95
00:05:00.416 --> 00:05:01.914
This is just what it is.

96
00:05:01.914 --> 00:05:03.055
We're done with our iterator.

97
00:05:03.055 --> 00:05:06.612
So once you return None,
your iterator stops iterating,

98
00:05:06.612 --> 00:05:09.887
that is the signal to
the outside world you're done.

99
00:05:09.887 --> 00:05:11.761
I believe with Python,

100
00:05:11.761 --> 00:05:16.456
you raise an exception to say
that you're done iterating.

101
00:05:16.456 --> 00:05:19.697
It's a stop iter, I forget what it is.

102
00:05:19.697 --> 00:05:20.611
Anyways, look at this,

103
00:05:20.611 --> 00:05:23.015
we can now just use our nice little
bracket notation if we want to.

104
00:05:23.015 --> 00:05:26.913
And look at what we get out here,
we get this beautiful little item.

105
00:05:26.913 --> 00:05:28.761
Look how nice that is, all right?

106
00:05:28.761 --> 00:05:32.035
And now we take ourselves index += 1, and

107
00:05:32.035 --> 00:05:35.849
we can return out point or
technically some point.

108
00:05:35.849 --> 00:05:39.404
Cuz we have to return out an option
of the thing, cuz remember,

109
00:05:39.404 --> 00:05:41.429
it could be None cuz None is the end.

110
00:05:44.831 --> 00:05:47.769
So I'm trying to write this
as simple as possible.

111
00:05:47.769 --> 00:05:51.809
And just like the most, I guess,
you could say in the most TypeScripty way.

112
00:05:51.809 --> 00:05:56.369
We could have mapped it,
made it wonderful.

113
00:05:56.369 --> 00:05:57.709
All right, that was fun.

114
00:05:59.749 --> 00:06:06.026
&gt;&gt; Why is index mutable, I mean,
it feels like for some reason,

115
00:06:06.026 --> 00:06:12.806
I'm tripping myself up that self.idx += 1,
there we go.

116
00:06:12.806 --> 00:06:13.886
&gt;&gt; Okay, a new cases.

117
00:06:13.886 --> 00:06:18.148
So the reason why it's mutable is that the
only way to iterate through something is

118
00:06:18.148 --> 00:06:20.702
that the underlying
iterator has to be mutable.

119
00:06:20.702 --> 00:06:23.322
Cuz you have to be able to change
its state until you're at the end.

120
00:06:23.322 --> 00:06:25.962
And once you're at the end, you call it.

121
00:06:25.962 --> 00:06:28.591
So I think we could do
this a little bit better.

122
00:06:28.591 --> 00:06:30.210
Let me give this a quick little try here.

123
00:06:30.210 --> 00:06:35.650
I don't know why my brain's blanking so
much, but we could do this.

124
00:06:35.650 --> 00:06:39.480
We could go let idx = self.idx.

125
00:06:39.480 --> 00:06:42.858
We could do self.idx += 1, and

126
00:06:42.858 --> 00:06:48.102
then we could return
self.points.get(index),

127
00:06:48.102 --> 00:06:52.770
and then maybe toss on
a little bit of a map here.

128
00:06:54.380 --> 00:06:56.720
And because remember,
look at what we're having right here.

129
00:06:56.720 --> 00:06:59.350
We're having a, what's the type here?

130
00:06:59.350 --> 00:07:00.510
Does anyone know what the type is?

131
00:07:00.510 --> 00:07:02.440
It's a reference to the thing.

132
00:07:02.440 --> 00:07:05.803
So since we should be able to just
do that, if I'm not mistaken, so

133
00:07:05.803 --> 00:07:08.690
what this will do is
this will dereference it.

134
00:07:08.690 --> 00:07:12.169
All numbers implement copy,
meaning that when you take,

135
00:07:12.169 --> 00:07:15.860
you can just automatically
copy out something.

136
00:07:15.860 --> 00:07:17.881
And so
this will automatically copy it for you.

137
00:07:17.881 --> 00:07:23.119
When I dereference it instead of becoming
the owner of the item, it copies it out.

138
00:07:25.259 --> 00:07:27.110
So kinda cool, little start,

139
00:07:27.110 --> 00:07:31.470
it doesn't work with things that
haven't implemented the copy trait.

140
00:07:32.700 --> 00:07:35.611
So we can even make our own
version of copy to where,

141
00:07:35.611 --> 00:07:39.334
when you pass it into a function,
you can pass it in as the value and

142
00:07:39.334 --> 00:07:43.420
underneath the hood,
it'll copy it instead of moving it.

143
00:07:43.420 --> 00:07:45.261
So this is instead of moving,
it's copying.

144
00:07:45.261 --> 00:07:46.521
Does that make sense?

145
00:07:46.521 --> 00:07:50.973
Sort of It's a weird semantic, right?

146
00:07:50.973 --> 00:07:52.350
And well, what are you doing here?

147
00:07:53.520 --> 00:07:54.680
All right, fantastic.

148
00:07:54.680 --> 00:07:56.731
We've now implemented
this delicious iterator.

149
00:07:56.731 --> 00:07:58.891
We should be able to
now do some iterating.

150
00:07:58.891 --> 00:08:00.231
But how do we do that?

151
00:08:00.231 --> 00:08:01.811
We've created the iterator.

152
00:08:01.811 --> 00:08:05.991
We've made it do the iterating.

153
00:08:05.991 --> 00:08:07.533
But how do we get it?

154
00:08:07.533 --> 00:08:11.554
Cuz I don't want them to have to like,
hand initialize it, right,

155
00:08:11.554 --> 00:08:13.116
I'd be kind of annoying.

156
00:08:13.116 --> 00:08:15.096
So, let's go over here.

157
00:08:15.096 --> 00:08:16.216
I'm gonna make this thing pub.

158
00:08:16.216 --> 00:08:18.915
I believe you have to make it public
because we're gonna now leak it out

159
00:08:18.915 --> 00:08:20.030
to the world.

160
00:08:20.030 --> 00:08:25.354
I'm gonna implement into iterator,
for Rectangle,

161
00:08:25.354 --> 00:08:30.240
wait, Rect, that's what we called it.

162
00:08:30.240 --> 00:08:34.380
So now, we're gonna be able
to convert our rectangle into

163
00:08:34.380 --> 00:08:36.500
an iterator with this trait.

164
00:08:37.560 --> 00:08:38.880
So, let's go like this.

165
00:08:38.880 --> 00:08:40.690
Let's implement the missing members.

166
00:08:40.690 --> 00:08:42.861
Now look at this,
now we have two associated types.

167
00:08:42.861 --> 00:08:47.470
I know, it's kind of getting
kind of crazy here, right?

168
00:08:47.470 --> 00:08:49.320
So our item that we're gonna be returning,

169
00:08:49.320 --> 00:08:52.822
what's the item that we're returning
from our iterator, does anyone remember?

170
00:08:52.822 --> 00:08:54.422
&gt;&gt; Our points?

171
00:08:54.422 --> 00:08:57.182
&gt;&gt; Yeah, a point, a tuple,
tuple of float 64.

172
00:08:57.182 --> 00:09:02.022
So float 64, float 64,
and then our iterator.

173
00:09:02.022 --> 00:09:02.862
What is our iterator?

174
00:09:05.742 --> 00:09:06.522
&gt;&gt; Rectiter.

175
00:09:06.522 --> 00:09:10.143
&gt;&gt; Rectiter, there we go, nice, Rectiter.

176
00:09:10.143 --> 00:09:13.923
So now we just have to
implement the thing right here.

177
00:09:13.923 --> 00:09:19.164
So, let's return a Rectiter.

178
00:09:19.164 --> 00:09:25.504
And now, all we need is we need the
points, well, that should be pretty easy.

179
00:09:25.504 --> 00:09:31.926
I can just go a vector and
do self.x self.y,

180
00:09:31.926 --> 00:09:37.334
and then do self.x + width a copy that

181
00:09:37.334 --> 00:09:42.404
a couple times, and then do self.y

182
00:09:42.404 --> 00:09:47.649
+ self.height, and then do that.

183
00:09:47.649 --> 00:09:48.889
There we go, look at that.

184
00:09:48.889 --> 00:09:52.470
So that right there would
be the four points, right,

185
00:09:52.470 --> 00:09:57.420
xx, x + width, x + height, and
then x + width, y + height, right?

186
00:09:57.420 --> 00:09:58.255
Have all the four points.

187
00:09:58.255 --> 00:10:03.035
And then our index,
we're gonna want it to be 0.

188
00:10:03.035 --> 00:10:06.035
And then, of course,
I forgot the word self right there.

189
00:10:08.895 --> 00:10:12.835
And why are you, of course,
I forgot to make them tuples.

190
00:10:12.835 --> 00:10:16.795
So let's go pop up up,
kinda make them tuples.

191
00:10:20.668 --> 00:10:26.955
No, all of a sudden my foo is
falling out of place here.

192
00:10:26.955 --> 00:10:30.235
There we go, perfect.

193
00:10:32.795 --> 00:10:37.135
So, made them tuples, I forgot to wrap
them in those nice little parentheses.

194
00:10:39.395 --> 00:10:40.995
Classic parentheses problems.

