WEBVTT

1
00:00:00.200 --> 00:00:03.637
On a scale of one to dumb
how does it make you feel?

2
00:00:03.637 --> 00:00:08.057
&gt;&gt; I was confused about this example
with respect to the previous

3
00:00:08.057 --> 00:00:13.050
examples of Rust being smart and
knowing how long a thing lives.

4
00:00:13.050 --> 00:00:16.910
&gt;&gt; So Rust, well I'd say it's
better to do it this way.

5
00:00:16.910 --> 00:00:21.900
There's the possibility of a safe
program versus what Rust can identify

6
00:00:21.900 --> 00:00:23.710
as a safe program.

7
00:00:23.710 --> 00:00:26.571
Since it cannot guarantee that whatever,

8
00:00:26.571 --> 00:00:33.090
if let's pretend that this vector is freed
right after this statement right here.

9
00:00:33.090 --> 00:00:36.980
Then we can't guarantee that that place
in memory on the heap will exist.

10
00:00:36.980 --> 00:00:38.960
So we cannot have references to it.

11
00:00:38.960 --> 00:00:41.460
So our little reference iterator fails.

12
00:00:43.880 --> 00:00:45.800
Let's just pretend it
does live the whole time.

13
00:00:47.260 --> 00:00:49.220
That means Rust is doing
things on your behalf.

14
00:00:49.220 --> 00:00:51.340
Rust doesn't do things on your behalf.

15
00:00:51.340 --> 00:00:54.390
You tell it how long it lives.

16
00:00:54.390 --> 00:00:57.740
So I'm telling it how long it
should live for this statement.

17
00:00:57.740 --> 00:01:02.440
So Rust just does exactly what
you ask it to do at all points.

18
00:01:02.440 --> 00:01:04.800
&gt;&gt; So do you release data then?

19
00:01:04.800 --> 00:01:07.070
&gt;&gt; So normally you don't release data.

20
00:01:07.070 --> 00:01:08.510
You let Rust do it.

21
00:01:08.510 --> 00:01:10.170
Rust does it with the drop commit.

22
00:01:10.170 --> 00:01:12.755
You can technically, so
if you get into async programming,

23
00:01:12.755 --> 00:01:14.750
you'll eventually create a semaphore.

24
00:01:14.750 --> 00:01:15.690
Hey, what's a semaphore?

25
00:01:15.690 --> 00:01:19.670
A semaphore is just like a mutex
with many roads if you will.

26
00:01:19.670 --> 00:01:21.990
And so you actually can on a permit.

27
00:01:21.990 --> 00:01:25.245
You can say, hey, I'm done using this
semaphore and you can call it drop.

28
00:01:25.245 --> 00:01:28.220
Drop is a function,
which does some freeing of values.

29
00:01:28.220 --> 00:01:31.769
You can even implement your own version
of drop if you want to be able to do

30
00:01:31.769 --> 00:01:35.110
different types of dropping or
freeing of memory.

31
00:01:35.110 --> 00:01:38.203
That's, you're getting pretty
fancy pants at that point, but

32
00:01:38.203 --> 00:01:40.000
you can get into it right there.

33
00:01:40.000 --> 00:01:42.690
So in general,
I don't ever mess with that stuff.

34
00:01:42.690 --> 00:01:46.820
I mean, I'm not even sure the use case of
it other than this one semaphore situation

35
00:01:46.820 --> 00:01:49.100
we're actually manually called drop.

36
00:01:49.100 --> 00:01:52.425
&gt;&gt; But most of the time drop is
the one thing that rust does for us.

37
00:01:52.425 --> 00:01:54.124
&gt;&gt; It;s the thing that Rust does for

38
00:01:54.124 --> 00:01:56.620
us now remember it all
goes back to what's that?

39
00:01:56.620 --> 00:01:58.570
Let's see, let me.

40
00:01:58.570 --> 00:02:02.295
Remember this thing that
I was talking about.

41
00:02:02.295 --> 00:02:03.970
How every single thing, whoopsie-daisies.

42
00:02:03.970 --> 00:02:09.850
Every single thing that exists on
the heap has a reference to the stack.

43
00:02:09.850 --> 00:02:13.005
So when the stack item,
the vector, the number,

44
00:02:13.005 --> 00:02:17.780
the pointer, the length, and
the capacity item goes out of scope.

45
00:02:17.780 --> 00:02:20.320
It uses that to drop everything.

46
00:02:20.320 --> 00:02:24.714
And so that's why I talked about that is
because if you think about it that way,

47
00:02:24.714 --> 00:02:27.200
once it's done on the stack, you lose it.

48
00:02:27.200 --> 00:02:30.632
And so in this case, it allocates it and

49
00:02:30.632 --> 00:02:35.318
drops it to look as it does
its operations, drops it.

50
00:02:35.318 --> 00:02:38.562
&gt;&gt; Is the reason that with our first and

51
00:02:38.562 --> 00:02:43.322
second example that holds
out a bit longer is because

52
00:02:43.322 --> 00:02:48.940
those were atomic items
that had like fixed length.

53
00:02:48.940 --> 00:02:51.970
&gt;&gt; The reason why they held out longer
is cause I did something like this.

54
00:02:51.970 --> 00:02:54.655
I did a catamorphic operation, right.

55
00:02:54.655 --> 00:02:57.880
[LAUGH] And so in other words what
I'm doing is I'm doing a collect.

56
00:02:57.880 --> 00:03:02.652
I'm taking it from referring to something
inside of a vector to creating it into its

57
00:03:02.652 --> 00:03:03.750
own memory.

58
00:03:03.750 --> 00:03:10.450
So you can imagine I could do a sum here
and now you don't need that anymore.

59
00:03:10.450 --> 00:03:13.300
You can just do that.
So it's asking me what kind of sum are we?

60
00:03:13.300 --> 00:03:14.950
Are we an i32?
Sure we're an i32.

61
00:03:14.950 --> 00:03:17.930
I need to tell it what
type of number it is.

62
00:03:17.930 --> 00:03:20.800
We could say it's whatever number
you want, but there you go.

63
00:03:20.800 --> 00:03:24.188
We've told it and so
now it created a temporary vector,

64
00:03:24.188 --> 00:03:28.658
created references to that vector
mapped over each item referring inside

65
00:03:28.658 --> 00:03:30.980
the vector, and then sum them all up.

66
00:03:30.980 --> 00:03:33.530
And so at some point,
we've created new pieces of data.

67
00:03:33.530 --> 00:03:36.610
And this new pieces of
the data is now right here.

68
00:03:36.610 --> 00:03:40.390
&gt;&gt; Okay, so the first mute is
a collect that stops after index zero.

69
00:03:41.540 --> 00:03:42.560
&gt;&gt; Say that again?

70
00:03:42.560 --> 00:03:46.032
&gt;&gt; So
when we did with like our items list,

71
00:03:46.032 --> 00:03:51.820
first mute was like a collect
that stopped after index zero.

72
00:03:51.820 --> 00:03:53.140
It's like it did the first index.

73
00:03:53.140 --> 00:03:54.500
And it stopped.

74
00:03:54.500 --> 00:03:58.308
&gt;&gt; Which one are we
talking about right here?

75
00:03:58.308 --> 00:04:02.534
Are we talking about just so
I understand just

76
00:04:02.534 --> 00:04:07.103
because I mean is it the one
where I called first?

77
00:04:07.103 --> 00:04:08.608
&gt;&gt; Yeah.
&gt;&gt; Here.

78
00:04:15.674 --> 00:04:16.970
&gt;&gt; Yeah, this guy.

79
00:04:16.970 --> 00:04:18.940
&gt;&gt; Get rid of 0, or sorry.

80
00:04:18.940 --> 00:04:20.010
&gt;&gt; Yeah, I'm just gonna get rid of that.

81
00:04:20.010 --> 00:04:20.780
There we go.

82
00:04:20.780 --> 00:04:22.450
&gt;&gt; So yeah, mine too.

83
00:04:22.450 --> 00:04:29.310
So, get mute zero is a collect
call that stops after index 0.

84
00:04:29.310 --> 00:04:33.640
&gt;&gt; No, what it is, is just literally
referencing that individual item.

85
00:04:33.640 --> 00:04:36.343
So notice this thing holds onto
the vector that vector lives for

86
00:04:36.343 --> 00:04:38.220
the entirety of this function.

87
00:04:38.220 --> 00:04:41.989
So, these references are allowed to
live for the duration of this function.

88
00:04:43.670 --> 00:04:44.590
That's why it works.

89
00:04:44.590 --> 00:04:50.603
So you couldn't do something like this,
Right here.

90
00:04:52.511 --> 00:04:57.326
Right, you're gonna have some issues
right here because now you're gonna have,

91
00:04:57.326 --> 00:05:01.055
let's see, or should have issues
right here, println items.

92
00:05:04.425 --> 00:05:05.940
There we go.

93
00:05:05.940 --> 00:05:10.041
We created the temporary vector for
a second and then grabbed the first item

94
00:05:10.041 --> 00:05:14.091
out of it but then the vector's gone
because no one holds onto the vector.

95
00:05:15.584 --> 00:05:21.100
So Rust just forces you to have your
values last for the right duration.

96
00:05:21.100 --> 00:05:22.250
And then they can be removed.

97
00:05:24.050 --> 00:05:25.030
Does that make sense?

98
00:05:26.690 --> 00:05:30.634
I mean, get mute zero is effectively
the same thing as this, except for

99
00:05:30.634 --> 00:05:35.410
what comes out of it is not an immutable
reference, but a mutable reference.

100
00:05:35.410 --> 00:05:35.990
And it's safe.

101
00:05:35.990 --> 00:05:37.620
It doesn't blow up if
you access out of bounds

