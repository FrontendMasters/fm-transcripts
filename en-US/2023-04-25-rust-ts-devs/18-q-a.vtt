WEBVTT

1
00:00:00.370 --> 00:00:02.070
Why have result and option?

2
00:00:02.070 --> 00:00:03.398
Why can't we just have one?

3
00:00:03.398 --> 00:00:05.470
Well, let's think about
the definition really quickly.

4
00:00:05.470 --> 00:00:12.100
An option has a value associated with it,
right?

5
00:00:12.100 --> 00:00:15.786
It has a sum that has type V,
whatever your type is, and it has none,

6
00:00:15.786 --> 00:00:17.230
there's nothing there.

7
00:00:17.230 --> 00:00:18.390
Technically, it's specified this way.

8
00:00:18.390 --> 00:00:20.080
There's a reason optimization.

9
00:00:20.080 --> 00:00:23.610
I forget what it's even called, but
either way, this is what it looks like.

10
00:00:23.610 --> 00:00:25.630
But where's the result enum?

11
00:00:25.630 --> 00:00:29.620
It has two types associated,
the value and the error.

12
00:00:29.620 --> 00:00:33.486
So that means you'd always have an error
of error none type if there was nothing

13
00:00:33.486 --> 00:00:36.740
there, there's just a lot
more you'd have to specify.

14
00:00:36.740 --> 00:00:39.170
I'm sure there's even more
reasons that I don't even know.

15
00:00:39.170 --> 00:00:41.800
But to me, it just seems like
it would be a lot of extra steps

16
00:00:41.800 --> 00:00:43.270
to understand the difference.

17
00:00:44.780 --> 00:00:47.919
So that's kind of effectively
the two different types right here,

18
00:00:47.919 --> 00:00:50.410
it's just they don't
technically have an overlap.

19
00:00:50.410 --> 00:00:53.830
They only have an overlap
on the positive side.

20
00:00:53.830 --> 00:00:55.200
The negative side, one is nothing.

21
00:00:55.200 --> 00:00:57.430
The other one is
a completely different type.

22
00:00:57.430 --> 00:01:00.080
And so
that is why we have two different types.

23
00:01:00.080 --> 00:01:05.000
I mean, in some sense, it would be pretty
convenient to be able to have one type.

24
00:01:05.000 --> 00:01:07.800
I'm sure there's some things
that would make it nice.

25
00:01:07.800 --> 00:01:10.260
But for me, I like this.

26
00:01:10.260 --> 00:01:12.070
It separates out the behaviors in my head.

27
00:01:12.070 --> 00:01:14.622
Because ultimately, errors can
happen where undefined aren't, and

28
00:01:14.622 --> 00:01:16.250
undefined can happen where errors aren't.

29
00:01:16.250 --> 00:01:18.830
All right, we got one more question?

30
00:01:18.830 --> 00:01:23.222
&gt;&gt; Can we use enums as a result types?

31
00:01:23.222 --> 00:01:25.030
&gt;&gt; You want an enum inside of a result?

32
00:01:25.030 --> 00:01:27.801
Yeah, so
the thing is that completely composable.

33
00:01:27.801 --> 00:01:32.491
So if I had an enum color right, we have
that from earlier, and I have yellow and

34
00:01:32.491 --> 00:01:34.693
whatever, I can also come in here and

35
00:01:34.693 --> 00:01:39.410
I can define a result type with a color
subtype, so you can have a color in here.

36
00:01:39.410 --> 00:01:40.640
Remember, it's just a generic.

37
00:01:40.640 --> 00:01:44.683
So that means I could have a vector
of color as what comes out,

38
00:01:44.683 --> 00:01:49.466
it's just the error simply wraps
whether it's positive or negative.

39
00:01:49.466 --> 00:01:51.804
The inner type is the inner
type you specify, so

40
00:01:51.804 --> 00:01:53.770
that inner type can be whatever.

41
00:01:53.770 --> 00:01:57.900
You can have a result of option,
right, why can't you have that?

42
00:01:57.900 --> 00:01:58.960
Of course, you can have that.

43
00:01:58.960 --> 00:02:02.514
I could have a result of option of enum if
I wanted to, meaning the thing could error

44
00:02:02.514 --> 00:02:05.890
and the thing, if it doesn't error,
could return nothing.

45
00:02:05.890 --> 00:02:08.080
So it kinda tells you what's going on.

46
00:02:08.080 --> 00:02:12.695
So you can walk through what the service
does by simply looking at its type.

47
00:02:15.004 --> 00:02:17.140
Pretty neat, makes you feel pretty good?

48
00:02:17.140 --> 00:02:18.280
Makes me feel pretty good.

49
00:02:18.280 --> 00:02:21.430
I like it, I like it,
makes me feel so safe.

50
00:02:21.430 --> 00:02:22.980
All right, we got one more.

51
00:02:22.980 --> 00:02:24.350
Let's do one more.

52
00:02:24.350 --> 00:02:26.820
&gt;&gt; Could you use filter here
instead of the if statement?

53
00:02:27.870 --> 00:02:32.090
&gt;&gt; Well, the problem is, as I said,
you have to print out line not a number.

54
00:02:32.090 --> 00:02:34.020
Filter will simply remove that item.

55
00:02:34.020 --> 00:02:37.265
So yeah, if you didn't wanna do that,
so here's a cool thing you could do,

56
00:02:37.265 --> 00:02:38.760
I'll just do it really quickly.

57
00:02:38.760 --> 00:02:41.941
For whoever said that,
I'll get rid of all of this, and

58
00:02:41.941 --> 00:02:44.570
I'll just simply print right here.

59
00:02:44.570 --> 00:02:48.710
So there is this concept called
a filter map, filter map.

60
00:02:48.710 --> 00:02:51.847
What it does is it takes in an option or

61
00:02:51.847 --> 00:02:57.020
it takes in the value, and
you produce out an option.

62
00:02:57.020 --> 00:03:00.000
&gt;&gt; So what that means is that
I would have the following.

63
00:03:00.000 --> 00:03:03.034
I would have, here's a line, and

64
00:03:03.034 --> 00:03:08.130
I can go line.parse, and
I'll tell it to use size.

65
00:03:08.130 --> 00:03:12.510
Now, right now, this gets out,
remember, this gets out a result.

66
00:03:12.510 --> 00:03:18.068
You can convert a result to an option
where the error is turns into none,

67
00:03:18.068 --> 00:03:20.815
and the value turns into sum.

68
00:03:20.815 --> 00:03:24.125
So I could just go, okay?

69
00:03:24.125 --> 00:03:26.642
And what this is gonna, I forgot
to actually call it as a function.

70
00:03:26.642 --> 00:03:30.714
What this will do is it will actually,
for every positively parsed item,

71
00:03:30.714 --> 00:03:32.761
it will map that and send it through.

72
00:03:32.761 --> 00:03:36.002
For every failed parse,
it will just simply be filtered out and

73
00:03:36.002 --> 00:03:36.992
ignored forever.

74
00:03:36.992 --> 00:03:41.059
And so now, we just go line and
remember, if you remember our numbers.

75
00:03:41.059 --> 00:03:45.550
We have foo right in the middle, and
so when we execute this, foo's gone.

76
00:03:45.550 --> 00:03:46.260
Where did foo go?

77
00:03:46.260 --> 00:03:49.660
Well, it didn't parse correctly, and so it
got turned into none, none got filtered.

78
00:03:49.660 --> 00:03:52.638
Boom, we're great to go.

79
00:03:52.638 --> 00:03:55.470
All right, there you go,
so you could do that.

80
00:03:55.470 --> 00:04:00.044
So again, combinators are pretty cool,
allow for some pretty snazzy behavior.

