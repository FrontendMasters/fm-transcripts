WEBVTT

1
00:00:00.470 --> 00:00:03.322
So we're gonna start doing a little
bit of learning off the rip.

2
00:00:03.322 --> 00:00:07.672
We're gonna start talking about a vector
just because a vector is the most

3
00:00:07.672 --> 00:00:11.193
analogous data structure we
possibly have to TypeScript.

4
00:00:11.193 --> 00:00:15.442
So in TypeScript land,
a list is defined with two brackets.

5
00:00:15.442 --> 00:00:22.659
And in the Rust land, effectively the same
list is defined as a macro vec brackets.

6
00:00:22.659 --> 00:00:26.008
So these two are functionally equivalent.

7
00:00:26.008 --> 00:00:29.864
By all sense, they're
a non-mutable array that contain or

8
00:00:29.864 --> 00:00:34.264
technically a non-mutable list
containing 1, 2, 3, 4, 5.

9
00:00:34.264 --> 00:00:37.729
I'll be probably using the word array or
list interchangeably, but

10
00:00:37.729 --> 00:00:41.312
technically, an array is something
that can be allocated on the heap,

11
00:00:41.312 --> 00:00:44.440
it has this static structure type,
bla, bla, bla, right?

12
00:00:44.440 --> 00:00:45.968
A list is something that can grow.

13
00:00:45.968 --> 00:00:49.569
Sorry, it's just I feel
obligatory to mention that.

14
00:00:49.569 --> 00:00:52.151
Nonetheless, here you go.

15
00:00:52.151 --> 00:00:55.276
Two equivalent items,
it looks pretty similar, right?

16
00:00:55.276 --> 00:00:58.833
All right, so mutation you have all the
same things, again right now we're just

17
00:00:58.833 --> 00:01:02.144
going lightly over it, we're gonna
start coding here in just one second.

18
00:01:02.144 --> 00:01:06.609
But mutations, if I go const a,
I do this, I can just push in 6.

19
00:01:06.609 --> 00:01:09.857
I know I just made a const,
yet I can mutate it, right?

20
00:01:09.857 --> 00:01:14.085
In Rust land, you can't do that, I can't
just say let a equals this and push in 6.

21
00:01:14.085 --> 00:01:15.653
It'll say, hey, that's not mutable.

22
00:01:15.653 --> 00:01:19.473
I need to make sure I do let mut a,
then I can call push.

23
00:01:19.473 --> 00:01:22.161
It's pretty much the exact
same thing as TypeScript.

24
00:01:22.161 --> 00:01:24.931
This is valid Rust,
there's nothing invalid about it.

25
00:01:24.931 --> 00:01:30.959
Exact same thing with pop, I can do pop
as long as I have mutate on, I can pop.

26
00:01:30.959 --> 00:01:35.093
Pretty much the same piece of code other
than this whole vec thing right here.

27
00:01:35.093 --> 00:01:38.607
Accessing data in TypeScript land,
you do this.

28
00:01:38.607 --> 00:01:41.134
Now, there's something very
interesting about this.

29
00:01:41.134 --> 00:01:43.141
What is the return type of item?

30
00:01:43.141 --> 00:01:44.912
Can anyone tell me what
the return type of item is?

31
00:01:44.912 --> 00:01:48.713
Or sorry, not the return type,
the type of item.

32
00:01:48.713 --> 00:01:50.995
&gt;&gt; Probably the default integer.

33
00:01:50.995 --> 00:01:56.241
&gt;&gt; Yeah, it'd be a number, but it's not
just a number, it's more than that,

34
00:01:56.241 --> 00:02:00.131
it should be more than that,
it's number or undefined.

35
00:02:00.131 --> 00:02:04.229
In this situation, because we're super
smart humans, we can see right here,

36
00:02:04.229 --> 00:02:05.463
we're safe to do that.

37
00:02:05.463 --> 00:02:09.137
But in the reality is when
ever you access an array,

38
00:02:09.137 --> 00:02:12.050
the thing in there might not be in there.

39
00:02:12.050 --> 00:02:14.722
That's just how it works
in JavaScript land.

40
00:02:14.722 --> 00:02:19.784
And so that's why you'll see things
like array.shift will have undefined or

41
00:02:19.784 --> 00:02:21.938
T, Same thing with array.pop.

42
00:02:21.938 --> 00:02:26.460
It's undefined or T,
because it can't tell you that something's

43
00:02:26.460 --> 00:02:29.486
in there by simple
observation of just code.

44
00:02:29.486 --> 00:02:32.637
If I were to only give you
this piece of code right here,

45
00:02:32.637 --> 00:02:37.039
you could not tell me exactly what that
type was, you'd say T or undefined.

46
00:02:37.039 --> 00:02:38.343
I don't know.

47
00:02:38.343 --> 00:02:41.456
All right, so in Rust land,
we have kind of a couple ways to do it.

48
00:02:41.456 --> 00:02:45.902
We have the old definition right here,
we could directly access its elements.

49
00:02:45.902 --> 00:02:48.747
This does work,
you now get a reference to T.

50
00:02:48.747 --> 00:02:52.016
But if you go outside the bounds,
you explode.

51
00:02:52.016 --> 00:02:55.753
Or you can do it the more kind of
what I'd consider like the safe way,

52
00:02:55.753 --> 00:02:58.390
you can do.get,
which returns an option of T.

53
00:02:58.390 --> 00:03:03.771
Option, of course, is Rust's kind
of version of null/undefined.

54
00:03:03.771 --> 00:03:08.729
It will give you something out that you
now have, but it just may be nothing.

55
00:03:08.729 --> 00:03:10.416
So you have to deal with that up front.

56
00:03:10.416 --> 00:03:14.201
You always have to take this idea
that something may not be there every

57
00:03:14.201 --> 00:03:14.991
single time.

58
00:03:14.991 --> 00:03:18.466
So I always suggest using.get, unless
if you have good reason to use this.

59
00:03:18.466 --> 00:03:21.436
Again, there's the smart programmer
version, which is I created this array

60
00:03:21.436 --> 00:03:23.784
with three items in it, and
I'm gonna access the middle one.

61
00:03:23.784 --> 00:03:26.758
Do you really need to do it the other way?

62
00:03:26.758 --> 00:03:29.267
Probably not, but you get the idea.

63
00:03:29.267 --> 00:03:31.687
Gentle reminder, you're gonna forget
everything I've already said.

64
00:03:31.687 --> 00:03:32.877
This is kind of boring, right?

65
00:03:32.877 --> 00:03:34.989
We're not typing,
we're only using your eyes.

66
00:03:34.989 --> 00:03:37.499
I like to type, don't worry,
we're gonna do that very, very soon.

67
00:03:37.499 --> 00:03:40.405
I just have a couple more items I
wanted to make sure I kind of get over.

68
00:03:40.405 --> 00:03:45.251
Again, here's another not necessary
thing that exists in TypeScript,

69
00:03:45.251 --> 00:03:47.683
but kind of exists, we have a tuple.

70
00:03:47.683 --> 00:03:50.858
A tuple is of type parenthesis I32,

71
00:03:50.858 --> 00:03:55.534
which is a signed 32-bit number,
capital S string.

72
00:03:55.534 --> 00:03:57.372
And notice this is how I defined it.

73
00:03:57.372 --> 00:03:59.374
It's just two things next to each other.

74
00:03:59.374 --> 00:04:03.778
If you were to really think about it in
memory, I believe that thing would take up

75
00:04:03.778 --> 00:04:08.544
32 bytes, or that would take up not 32
bytes, 28 bytes, probably 32 bytes.

76
00:04:08.544 --> 00:04:12.556
I have no idea how many bytes it probably
will take up, but this thing is 4 bytes,

77
00:04:12.556 --> 00:04:15.393
and this thing has a pointer,
a length, and a capacity.

78
00:04:15.393 --> 00:04:18.534
And so of course, the data hello
does not exist on the stack,

79
00:04:18.534 --> 00:04:19.959
it exists somewhere else.

80
00:04:19.959 --> 00:04:21.886
Just kind of something to always
think about for a moment.

81
00:04:21.886 --> 00:04:25.158
I'm gonna say this a bunch of times even
though we're not really gonna get into it,

82
00:04:25.158 --> 00:04:26.303
I just wanted to mention it.

83
00:04:26.303 --> 00:04:28.973
So the nearest equivalent
is this right here.

84
00:04:28.973 --> 00:04:32.035
You have a list of two items, 5 and hello.

85
00:04:32.035 --> 00:04:35.248
So they're kind of the same, but
they're not really the same,

86
00:04:35.248 --> 00:04:36.746
you can't push onto a tuple.

87
00:04:36.746 --> 00:04:38.599
A tuple is a fixed structure.

88
00:04:38.599 --> 00:04:42.254
This is obviously an unfixed structure,
you can do some things with it.

89
00:04:42.254 --> 00:04:46.684
You can cast it as const, but
still it's a little different.

90
00:04:46.684 --> 00:04:51.849
Second, you can also do a pattern matching
or just like destructuring for tuples.

91
00:04:51.849 --> 00:04:55.813
So if I have a right here and
it is 5 and string,

92
00:04:55.813 --> 00:05:01.529
I can also assign a like this,
notice how pattern matching works.

93
00:05:01.529 --> 00:05:05.336
I literally type out its structure,
which is in a tuple,

94
00:05:05.336 --> 00:05:10.192
it's two parentheses, and then I
give variable names for the insides.

95
00:05:10.192 --> 00:05:14.885
So those insides have been pulled out and
now handed to me, and

96
00:05:14.885 --> 00:05:21.037
I now have access to my number and
my string as opposed to tuple.0, tuple.1.

97
00:05:21.037 --> 00:05:22.923
Pattern matching even works on functions.

98
00:05:22.923 --> 00:05:26.742
So if I were to define a like this,
I could actually define a function

99
00:05:26.742 --> 00:05:30.566
that's pre-destructured as opposed
to doing it within the code.

100
00:05:30.566 --> 00:05:34.806
So I have my number, my string, and then I
say it's type, which is an i32 and string.

101
00:05:34.806 --> 00:05:38.950
So that means I have now access to
the insides even though I've just

102
00:05:38.950 --> 00:05:40.218
passed a like that.

103
00:05:40.218 --> 00:05:43.861
Structs, again this is kind of we're
getting into this territory where there's

104
00:05:43.861 --> 00:05:44.926
not a direct one on one.

105
00:05:44.926 --> 00:05:47.865
Struct, you can define any
which way you would like to.

106
00:05:47.865 --> 00:05:49.725
There you go.
I have any property you want on here,

107
00:05:49.725 --> 00:05:50.636
you can define them.

108
00:05:50.636 --> 00:05:53.639
Structs can refer to other structs,
it's fine.

109
00:05:53.639 --> 00:05:56.946
Referring to yourself in a structure
is not allowed unless you wrap it in

110
00:05:56.946 --> 00:05:57.506
an option.

111
00:05:57.506 --> 00:06:00.236
It would make sense if
you think about memory,

112
00:06:00.236 --> 00:06:03.889
how would you lay out a struct
that refers to itself in memory?

113
00:06:03.889 --> 00:06:08.182
Well, you'd have a struct that's say 8
bytes long and then a reference to itself.

114
00:06:08.182 --> 00:06:11.301
Well, that's 8 bytes long, but
then that references itself again.

115
00:06:11.301 --> 00:06:15.799
Well, that's 8 byte long and you'd keep
on going, ad infinite until you explode.

116
00:06:15.799 --> 00:06:19.234
So you have to have some rules around it.

117
00:06:19.234 --> 00:06:21.463
You can also destructure with structs.

118
00:06:21.463 --> 00:06:24.019
Here's a function that
takes in a MyStruct,

119
00:06:24.019 --> 00:06:26.045
you can tell by the type right here.

120
00:06:26.045 --> 00:06:30.076
And as you can see, I can say, hey,
MyStruct, and I want property y and z, and

121
00:06:30.076 --> 00:06:31.009
forget the rest.

122
00:06:31.009 --> 00:06:32.625
So now I can just do y and z.

123
00:06:32.625 --> 00:06:36.014
So pattern matching even works
at a struct level, which is,

124
00:06:36.014 --> 00:06:40.144
there's some really cool problems
you can solve with pattern matching.

125
00:06:40.144 --> 00:06:41.578
That is pretty magical,

126
00:06:41.578 --> 00:06:45.551
but we'll get there, there's one
that just recently blew my mind.

127
00:06:45.551 --> 00:06:48.321
So I can just do this and
I can destruct like that.

128
00:06:48.321 --> 00:06:52.497
I just want x out of it,
I just want x and or y and z out of it,

129
00:06:52.497 --> 00:06:55.909
I want all three out of it,
I wanna do an if let.

130
00:06:55.909 --> 00:06:59.809
An if let allows you to pattern
match even on an if statement, so

131
00:06:59.809 --> 00:07:03.057
x only becomes visible
inside of this if statement.

132
00:07:03.057 --> 00:07:03.939
So pretty cool.

133
00:07:03.939 --> 00:07:05.355
So you can do these kind
of nice little ways.

134
00:07:05.355 --> 00:07:10.140
It works really, really well once we
start getting into options or errors,

135
00:07:10.140 --> 00:07:13.075
is we can kind of pattern
match on the if level.

136
00:07:13.075 --> 00:07:14.960
Super fantastic.

137
00:07:14.960 --> 00:07:17.185
Pattern matching is
just out of this world.

138
00:07:17.185 --> 00:07:20.470
I always feel like I wish I
had more ways to use it, and

139
00:07:20.470 --> 00:07:23.253
I always feel like I'm
not using it enough.

140
00:07:23.253 --> 00:07:26.613
&gt;&gt; Does Rust detect these types then?

141
00:07:26.613 --> 00:07:27.909
&gt;&gt; What do you mean detect?

142
00:07:27.909 --> 00:07:29.382
&gt;&gt; Infer?

143
00:07:29.382 --> 00:07:29.987
&gt;&gt; Does Rust infer?

144
00:07:29.987 --> 00:07:34.610
So yes, this is using inference right now,
so if I were to take this exact code,

145
00:07:34.610 --> 00:07:37.924
drop this in my editor and
say, hey, what's your type?

146
00:07:37.924 --> 00:07:45.182
It would probably say something like
squirrely brace integer comma string.

147
00:07:45.182 --> 00:07:49.514
That is because it hasn't quite concretely
defined what type of integer this is,

148
00:07:49.514 --> 00:07:51.789
cuz it doesn't know how I'm using it yet.

149
00:07:51.789 --> 00:07:55.060
So if I pass it into a function
that requires an i32 in string,

150
00:07:55.060 --> 00:07:58.146
it would then go, okay,
I can walk that chain backwards and

151
00:07:58.146 --> 00:08:02.348
see that you've created something without
telling me what type of integer is but

152
00:08:02.348 --> 00:08:04.740
you use it in i32 sense, that's an i32.

153
00:08:04.740 --> 00:08:08.412
So it has really strong inference,
very, very strong, much,

154
00:08:08.412 --> 00:08:11.414
much stronger than TypeScript,
it's quite wild.

155
00:08:11.414 --> 00:08:13.682
&gt;&gt; How different are structs from objects?

156
00:08:13.682 --> 00:08:18.127
&gt;&gt; Structs and objects, it's about how
they're laid out in memory that probably

157
00:08:18.127 --> 00:08:19.928
makes the biggest difference.

158
00:08:19.928 --> 00:08:22.261
And then number two is
the ability to mutate.

159
00:08:22.261 --> 00:08:27.179
So if you have an object in JavaScript,
nothing prevents you from adding.fu.

160
00:08:27.179 --> 00:08:30.442
Nothing prevents you from jumping
on the prototype and start smashing

161
00:08:30.442 --> 00:08:33.937
global state on the prototype and
just throwing your own methods, right?

162
00:08:33.937 --> 00:08:36.990
JavaScript's a very loosey-goosey language
and it allows you to do things to

163
00:08:36.990 --> 00:08:39.498
instruct, you can even delete
properties on a struct, right?

164
00:08:39.498 --> 00:08:43.011
Delete fu.bar will delete bar off of fu.

165
00:08:43.011 --> 00:08:46.685
And so in Rust land,
a struct is a blueprint.

166
00:08:46.685 --> 00:08:50.940
You cannot deviate from the blueprint,
you can't just be adding properties or

167
00:08:50.940 --> 00:08:52.796
removing properties at runtime.

168
00:08:52.796 --> 00:08:56.124
And that, of course,
is due to how memory's laid out.

169
00:08:56.124 --> 00:09:00.806
&gt;&gt; Does the compiler give you any
information about .get versus

170
00:09:00.806 --> 00:09:04.147
the brackets of like,
which to use or what?

171
00:09:04.147 --> 00:09:08.763
&gt;&gt; The compiler will always tell you
what's going on, meaning that you

172
00:09:08.763 --> 00:09:13.549
can go over and highlight on your
variable and it'll tell you the type.

173
00:09:13.549 --> 00:09:17.638
There's some things that are up to you to
know how to use it, so if you're directly

174
00:09:17.638 --> 00:09:21.455
accessing something, you take the risk
of directly accessing something.

175
00:09:21.455 --> 00:09:24.053
If you just wanna be safe,
always use the safer methods.

176
00:09:24.053 --> 00:09:25.331
That's why they're there.

177
00:09:25.331 --> 00:09:27.825
That's also it's very nice that
they have these unsafe methods,

178
00:09:27.825 --> 00:09:30.777
because sometimes you just know better
than the compiler, and that's okay.

179
00:09:30.777 --> 00:09:35.261
No need to go through all the hoops
if you're doing something precisely.

180
00:09:35.261 --> 00:09:38.820
But often, I find that I rarely use
any form of indexing like that,

181
00:09:38.820 --> 00:09:42.698
because either I'm doing a for loop or
some sort of iteration over it, or

182
00:09:42.698 --> 00:09:45.520
I don't even access
the elements directly myself.

183
00:09:45.520 --> 00:09:47.568
I'm doing some sort of dot map on it, and

184
00:09:47.568 --> 00:09:50.415
now I have access to each
individual element as it goes.

185
00:09:50.415 --> 00:09:52.913
And so
you don't often do that type of coding or

186
00:09:52.913 --> 00:09:55.100
at least I find that I don't often do it.

