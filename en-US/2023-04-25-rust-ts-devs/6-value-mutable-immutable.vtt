WEBVTT

1
00:00:00.660 --> 00:00:05.132
I did wanna say a little something about
value, mutable reference, mutable borrow,

2
00:00:05.132 --> 00:00:07.690
immutable reference, immutable borrow.

3
00:00:07.690 --> 00:00:10.850
These are things that JS
devs don't think about.

4
00:00:10.850 --> 00:00:14.270
So I just want to give just a small one.

5
00:00:14.270 --> 00:00:16.930
So when you hear me say the word value,
you know what I mean?

6
00:00:16.930 --> 00:00:21.014
If you hear me say the word immutable
borrow or immutable reference, or

7
00:00:21.014 --> 00:00:23.872
really when I just say reference,
I mean this, or

8
00:00:23.872 --> 00:00:27.590
if you hear me say mutable reference,
they have meaning.

9
00:00:27.590 --> 00:00:29.040
And so I'm just gonna jump over here.

10
00:00:29.040 --> 00:00:31.140
And we're gonna create a new one of these,
and I'll zoom it in.

11
00:00:32.250 --> 00:00:35.809
And so when I do something like x=5,

12
00:00:35.809 --> 00:00:40.630
this thing right here,
this is a value, right?

13
00:00:40.630 --> 00:00:42.910
That is something that is sitting there.

14
00:00:42.910 --> 00:00:43.920
It's in memory.

15
00:00:43.920 --> 00:00:45.450
It is the thing.

16
00:00:45.450 --> 00:00:49.020
The owner of said value is x.

17
00:00:49.020 --> 00:00:52.850
Now in Rust land,
you can refer to a value.

18
00:00:52.850 --> 00:00:57.347
So I can do something
like y= a reference to x.

19
00:00:57.347 --> 00:01:00.096
That means y refers to x.

20
00:01:00.096 --> 00:01:04.490
Whatever value x is, if you were to
print out y, it'd be the same thing.

21
00:01:04.490 --> 00:01:06.780
This is a read-only reference.

22
00:01:06.780 --> 00:01:08.890
It means I can only look at the data.

23
00:01:08.890 --> 00:01:09.992
This is very, very important.

24
00:01:09.992 --> 00:01:14.839
If I were to do something like this,
mutable reference to x,

25
00:01:14.839 --> 00:01:21.123
it means not only can I look at the data,
I myself am allowed to change the data.

26
00:01:21.123 --> 00:01:23.000
This is very important distinction.

27
00:01:23.000 --> 00:01:26.256
This is not really done in any other
language where you have references that

28
00:01:26.256 --> 00:01:28.880
are either read-only or
read-and-write-only.

29
00:01:28.880 --> 00:01:30.885
This is what gives Rust
a lot of its power and

30
00:01:30.885 --> 00:01:32.910
safety, is this distinction right here.

31
00:01:34.140 --> 00:01:38.800
And so for you to be able to do this, your
original variable also has to be mutable.

32
00:01:38.800 --> 00:01:41.458
You have to declare that
what I am gonna mutate,

33
00:01:41.458 --> 00:01:44.080
it may be able to be mutated by reference.

34
00:01:44.080 --> 00:01:48.610
And so you'll see probably once or
twice today some sort of

35
00:01:48.610 --> 00:01:53.914
function on implementation that
looks like function do_this.

36
00:01:53.914 --> 00:01:55.590
By the way, Rust loves underscores.

37
00:01:55.590 --> 00:01:57.465
It complains that you if
you don't use snake case,

38
00:01:57.465 --> 00:01:59.300
one of the worst decisions ever created.

39
00:01:59.300 --> 00:02:02.540
But now I love snake case,
and now I hate camel case.

40
00:02:02.540 --> 00:02:04.710
Camel case,
the worst decision ever created.

41
00:02:04.710 --> 00:02:08.868
And so you will see this often where
you'll see something like either reference

42
00:02:08.868 --> 00:02:10.990
self, oopsies, there's an l in self.

43
00:02:10.990 --> 00:02:14.400
And this just simply means it's
a function that refers to self.

44
00:02:14.400 --> 00:02:15.900
It is not self.

45
00:02:15.900 --> 00:02:19.470
It does not contain the value, but
it contains a reference to the value.

46
00:02:19.470 --> 00:02:21.625
This will become more clear,
as I say this,

47
00:02:21.625 --> 00:02:24.320
you'll also see something
that looks like mute self.

48
00:02:25.470 --> 00:02:28.098
This means that this function takes in,

49
00:02:28.098 --> 00:02:33.150
you can only call this function on
an object that is defined as mutable.

50
00:02:33.150 --> 00:02:35.200
This is very important kinda distinction.

51
00:02:35.200 --> 00:02:38.405
And so that way you kinda separate out
functions that mutate versus functions

52
00:02:38.405 --> 00:02:39.325
that don't mutate.

53
00:02:39.325 --> 00:02:42.312
So you know that old
array.reverse problem?

54
00:02:42.312 --> 00:02:44.365
If you didn't define it as mutable,

55
00:02:44.365 --> 00:02:47.426
you wouldn't be able to
call array.reverse in Rust.

56
00:02:47.426 --> 00:02:50.031
Because it would say,
sorry, this thing mutates,

57
00:02:50.031 --> 00:02:52.175
you have to let me know
that I can mutate it.

58
00:02:52.175 --> 00:02:57.531
So it adds a unique flavor of security or
safety that just isn't present.

59
00:02:57.531 --> 00:02:58.665
All right, so there you go.

60
00:02:58.665 --> 00:03:00.285
That's just a little brief one.

61
00:03:00.285 --> 00:03:01.565
I just wanna make sure
that you understand.

62
00:03:01.565 --> 00:03:03.980
So reference means read-only.

63
00:03:03.980 --> 00:03:06.850
Mutable reference means write and
read reference.

64
00:03:06.850 --> 00:03:08.810
And value means the thing itself.

65
00:03:09.890 --> 00:03:13.442
&gt;&gt; So if y was defined as
a mutable reference to x,

66
00:03:13.442 --> 00:03:19.420
what circumstances would we wanna
send y instead of just sending x?

67
00:03:19.420 --> 00:03:22.340
&gt;&gt; So that kinda gets into something
called the borrow checker.

68
00:03:22.340 --> 00:03:22.919
&gt;&gt; Okay.
&gt;&gt; So

69
00:03:22.919 --> 00:03:26.960
in Rust, I'll just kinda give you
a quick one so you can hear these rules.

70
00:03:26.960 --> 00:03:30.337
In Rust, when you program,
there can be only one value owner,

71
00:03:30.337 --> 00:03:32.940
only one Lord of the Ring, if you will.

72
00:03:32.940 --> 00:03:36.452
You can have as many as you
want read-only references,

73
00:03:36.452 --> 00:03:40.160
if there's no write-and-read
references out.

74
00:03:40.160 --> 00:03:44.283
You can only have one write reference and
no read references.

75
00:03:44.283 --> 00:03:47.698
So there's a few rules to
how you can use a variable.

76
00:03:47.698 --> 00:03:51.370
And by having these rules,
there's this chart that exists somewhere.

77
00:03:51.370 --> 00:03:53.520
I saw it on some YouTube video and
it was really, really clever.

78
00:03:53.520 --> 00:03:56.810
I can't remember what it was or else I'd
definitely give you a shout out right now.

79
00:03:56.810 --> 00:04:01.680
But there's this notion that there
exists a set of all safe programs.

80
00:04:03.110 --> 00:04:08.461
But you could never write a compiler to
be able to detect every form of safety.

81
00:04:08.461 --> 00:04:12.856
So by limiting what you allow,
you have a subset.

82
00:04:12.856 --> 00:04:17.900
And the subset is guaranteed to be safe,
but it can't detect all safeties.

83
00:04:17.900 --> 00:04:22.902
Just like that whole array, where you
have some contents and then I say,

84
00:04:22.902 --> 00:04:27.252
foo[2], I can't really tell
you that's safe or not safe.

85
00:04:27.252 --> 00:04:31.918
I don't know at compile time,
it would only be known at run time.

86
00:04:31.918 --> 00:04:36.270
And so that's why you have this idea
of safe, unsafe, what is allowed.

87
00:04:36.270 --> 00:04:39.925
We'll go over it, but I just wanted to
make sure you understand value, reference,

88
00:04:39.925 --> 00:04:41.270
mutable reference.

89
00:04:41.270 --> 00:04:45.420
Or the more technical term,
immutable borrow, mutable borrow.

90
00:04:45.420 --> 00:04:47.549
You'll see that term a lot
in the compiler errors.

91
00:04:49.020 --> 00:04:53.870
All right, one more thing the unit you saw
me kind of reference this once or twice.

92
00:04:53.870 --> 00:04:56.358
The thing about Rust is that
everything is an expression,

93
00:04:56.358 --> 00:05:00.320
which means you can actually omit return
statements if you don't have a semicolon.

94
00:05:00.320 --> 00:05:03.240
I personally hate that, you'll never
see me not have a return statement.

95
00:05:03.240 --> 00:05:04.400
I like the word return.

96
00:05:04.400 --> 00:05:07.410
I like to use my semicolons,
it's just who I am.

97
00:05:07.410 --> 00:05:11.070
So this right here, this if true,
actually returns a value.

98
00:05:11.070 --> 00:05:14.750
I could do, let foo, if true, print this.

99
00:05:14.750 --> 00:05:17.590
The value is literally nothing.

100
00:05:17.590 --> 00:05:18.660
It's that there is nothing.

101
00:05:18.660 --> 00:05:20.150
So it's called the unit.

102
00:05:20.150 --> 00:05:24.564
This is also why I believe you can't,
they didn't have closures like that

103
00:05:24.564 --> 00:05:28.350
cuz an empty argument closure
would look just like a unit.

104
00:05:28.350 --> 00:05:31.371
How do you parse that out as a compiler,
or you technically could never parse that

105
00:05:31.371 --> 00:05:33.680
out, it'd be an ambiguous tree,
it would explode?

106
00:05:33.680 --> 00:05:37.228
And so you'll see me often
do something like this,

107
00:05:37.228 --> 00:05:42.520
where inside of a function say,
this won't make any sense right now.

108
00:05:42.520 --> 00:05:46.120
But I'll have something that looks
like this as my return value.

109
00:05:46.120 --> 00:05:47.900
This says, hey,
this thing could be an error.

110
00:05:47.900 --> 00:05:50.730
And at the bottom of my function,
you'll see me do something like this.

111
00:05:50.730 --> 00:05:53.200
It means I'm returning
the unit of nothing.

112
00:05:53.200 --> 00:05:55.140
It doesn't exist, but, hey, we're okay.

113
00:05:55.140 --> 00:05:58.251
Everything went okay in this function,
but we used the nothing unit,

114
00:05:58.251 --> 00:05:59.420
just to let you know.

115
00:05:59.420 --> 00:06:00.210
Because there's no value.

116
00:06:00.210 --> 00:06:02.640
Cuz sometimes you have functions
that have side effects, but

117
00:06:02.640 --> 00:06:05.560
they don't actually do anything for
you, or return anything.

118
00:06:05.560 --> 00:06:09.120
So just so you know,
if you see this, that's a unit.

119
00:06:09.120 --> 00:06:10.180
It's the nothing.

120
00:06:10.180 --> 00:06:14.394
It's not like undefined cuz
you can't put methods on it,

121
00:06:14.394 --> 00:06:17.068
you can't do some things like that.

