WEBVTT

1
00:00:00.130 --> 00:00:04.638
So we're gonna actually talk about
options now, because options are enums.

2
00:00:04.638 --> 00:00:08.774
But they're the answer to null and
undefined at the exact same time,

3
00:00:08.774 --> 00:00:12.001
which means you can just
create your own option type.

4
00:00:12.001 --> 00:00:16.636
And you can have your own way you want
to handle none versus something there

5
00:00:16.636 --> 00:00:17.300
in Rust.

6
00:00:17.300 --> 00:00:19.550
It's pretty neat, but
let's go over a quick challenge.

7
00:00:20.780 --> 00:00:22.749
Is this last line valid?

8
00:00:22.749 --> 00:00:23.980
Why or why not?

9
00:00:25.650 --> 00:00:28.513
Yeah, no one can really answer that
question effectively cuz it's a crazy

10
00:00:28.513 --> 00:00:30.110
question, isn't it?

11
00:00:30.110 --> 00:00:31.922
So answer, of course,

12
00:00:31.922 --> 00:00:36.740
is that depends on what you have
enabled inside your TSConfig.

13
00:00:36.740 --> 00:00:40.560
If you have exact optional properties,
that means this is illegal.

14
00:00:40.560 --> 00:00:45.340
Because technically, if you called
object.keys, you'd actually have a bar.

15
00:00:45.340 --> 00:00:49.540
But you've said either there's nothing or
it's a string.

16
00:00:49.540 --> 00:00:53.220
You didn't say it's undefined and
string, you said it's nothing or string.

17
00:00:53.220 --> 00:00:56.310
So, again, TypeScript,
a lot of loosey goosey behavior.

18
00:00:56.310 --> 00:01:00.095
Sometimes it's wonky or
weird to kind of reason about things.

19
00:01:00.095 --> 00:01:02.860
Just kind of like little fun fact in here.

20
00:01:02.860 --> 00:01:04.723
So Rust obviously handles them different.

21
00:01:04.723 --> 00:01:09.340
Here is my TypeScript, or
here's my Rust definition of an Option.

22
00:01:09.340 --> 00:01:12.708
Notice it's generic, that means it
can take any type you want it to be.

23
00:01:12.708 --> 00:01:15.650
And it's gonna be None,
meaning there's nothing there.

24
00:01:15.650 --> 00:01:20.580
Or it's gonna be Some with value T,
or type T underneath.

25
00:01:20.580 --> 00:01:24.144
So just like how we did custom,
usize, and string,

26
00:01:24.144 --> 00:01:29.006
Option does no type, or
whatever type you define, they're generic.

27
00:01:29.006 --> 00:01:33.743
So that's why when I do Some five,
underneath the hood,

28
00:01:33.743 --> 00:01:36.620
it's Option of type usize.

29
00:01:36.620 --> 00:01:39.223
But when I noticed when I did None,
it said, hey, you need to type,

30
00:01:39.223 --> 00:01:40.891
annotate me cuz I have
no idea what you are.

31
00:01:40.891 --> 00:01:43.950
I can redo that really quickly.

32
00:01:43.950 --> 00:01:48.860
So if I go let foo = Some(5),
I'm just creating an enum of Option.

33
00:01:48.860 --> 00:01:51.000
That is in i32.

34
00:01:51.000 --> 00:01:55.704
But if I go let foo = None,
it's gonna go, I don't know what you are.

35
00:01:55.704 --> 00:01:57.150
What are you?

36
00:01:57.150 --> 00:01:59.570
Cuz you haven't defined your generic yet.

37
00:01:59.570 --> 00:02:01.378
So pretty neat.
That's where you're gonna have to do

38
00:02:01.378 --> 00:02:04.480
something like,
maybe I'm an Option or String.

39
00:02:04.480 --> 00:02:07.140
Why not, I can be whatever I want to be.

40
00:02:07.140 --> 00:02:09.010
I just might not be there.

41
00:02:09.010 --> 00:02:11.220
So that's what Option means,
so you have None and Some.

42
00:02:11.220 --> 00:02:14.812
And obviously, as you can see, when I
did green stuff, or when I did Item,

43
00:02:14.812 --> 00:02:17.848
you'll notice that I had to do
these little colons right here.

44
00:02:17.848 --> 00:02:22.400
Rust just provides it so that you can
just call Some, instead of Option::Some.

45
00:02:22.400 --> 00:02:23.430
It's the same thing.

46
00:02:23.430 --> 00:02:24.734
That's what's actually happening
underneath the hood right now.

47
00:02:24.734 --> 00:02:27.591
You're just calling Some,
or you're calling None.

48
00:02:27.591 --> 00:02:31.480
All right, so Options,
they're very, very important.

49
00:02:31.480 --> 00:02:33.890
But why?
Why do we need Options in Rust?

50
00:02:33.890 --> 00:02:36.220
Well, it always comes down to memory.

51
00:02:36.220 --> 00:02:39.405
So when JavaScript land,
when you are returning a value,

52
00:02:39.405 --> 00:02:43.640
it actually creates a box value that
is controlled by the garbage collector.

53
00:02:44.670 --> 00:02:48.455
There's also sneeze, which are handled
slightly differently, but nonetheless,

54
00:02:48.455 --> 00:02:51.430
there's something that has
to hold on to your value.

55
00:02:51.430 --> 00:02:55.430
And so it's boxed, meaning we don't know
what it is, but it's a box with a type

56
00:02:55.430 --> 00:03:00.350
discriminator that's pointing somewhere
else to the actual value that you have.

57
00:03:00.350 --> 00:03:02.880
So Rust does the same thing.

58
00:03:02.880 --> 00:03:04.680
It just does it with Option.

59
00:03:04.680 --> 00:03:08.280
You have a box that boxes Option,
and it has one or two values.

60
00:03:08.280 --> 00:03:11.806
And so going back here,
you can imagine we would drop this and

61
00:03:11.806 --> 00:03:15.690
we'd have this being the None case,
and this being the Some case.

62
00:03:17.230 --> 00:03:19.590
And so that is what's
happening underneath the hood.

63
00:03:19.590 --> 00:03:24.210
So when Rust returns an Option,
underneath the hood, on the stack,

64
00:03:24.210 --> 00:03:26.650
it can create that memory.

65
00:03:26.650 --> 00:03:28.620
And so that way, we don't have
any sort of weird things happen.

66
00:03:28.620 --> 00:03:31.118
We'll go over a little bit more
of what happens on the stack, but

67
00:03:31.118 --> 00:03:32.560
that's why it has to exist.

68
00:03:32.560 --> 00:03:35.659
There's no such thing as nothing
in a strict type language,

69
00:03:35.659 --> 00:03:39.870
because it has to create the exact memory
size that it needs to put something in it.

70
00:03:39.870 --> 00:03:42.171
And if it just sometimes is there,
sometimes not,

71
00:03:42.171 --> 00:03:43.840
well, it just would never work out.

72
00:03:43.840 --> 00:03:46.240
It'd be too crazy inside your system.

73
00:03:46.240 --> 00:03:47.560
Things would just be going nuts.

74
00:03:47.560 --> 00:03:49.699
Since they are enums,
you can use if/match statements.

75
00:03:49.699 --> 00:03:53.060
You can do all the same
tricks we've already learned.

76
00:03:53.060 --> 00:03:55.410
If let some x equals the option.

77
00:03:55.410 --> 00:04:01.213
So I can jump back here and
go, if Some(x) = foo.

78
00:04:01.213 --> 00:04:04.370
Now remember, the last time I just
defined foo, it's an option String.

79
00:04:04.370 --> 00:04:08.090
So if you look at this, oops, if let,
you'll notice it's type String.

80
00:04:08.090 --> 00:04:09.650
I just lifted out the value.

81
00:04:09.650 --> 00:04:12.251
Identical stuff, you've already used
these, you've already seen them,

82
00:04:12.251 --> 00:04:12.821
this is an enum.

