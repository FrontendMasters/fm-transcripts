WEBVTT

1
00:00:00.070 --> 00:00:02.010
Let's do this one more time.

2
00:00:02.010 --> 00:00:07.848
Let's create a function called print_all
that takes an immutable borrow or

3
00:00:07.848 --> 00:00:12.266
a reference to items and
prints out each item one at a time.

4
00:00:12.266 --> 00:00:13.630
Okay, we could do that.

5
00:00:13.630 --> 00:00:15.190
So I bet you can guess what that means.

6
00:00:15.190 --> 00:00:19.880
So print_all items, what is it?

7
00:00:19.880 --> 00:00:24.585
Well, it's a reference
to a vector of item.

8
00:00:24.585 --> 00:00:26.620
And we're gonna print
them out one at a time.

9
00:00:26.620 --> 00:00:27.785
So we can do this pretty easily.

10
00:00:27.785 --> 00:00:32.990
Let's go like this, for
item in items, println, and

11
00:00:32.990 --> 00:00:39.570
then do that nice little,
someone tell me the name of this operator.

12
00:00:41.140 --> 00:00:43.030
There we go, look at that.

13
00:00:43.030 --> 00:00:44.332
Okay, we wrote the function.

14
00:00:44.332 --> 00:00:45.960
Does that make a lot of sense here?

15
00:00:46.980 --> 00:00:48.650
Yeah, feeling good, isn't it?

16
00:00:49.810 --> 00:00:52.700
Yeah, okay,
I'm gonna give everyone a second.

17
00:00:52.700 --> 00:00:54.790
So let's go back to our instructions now.

18
00:00:55.790 --> 00:00:59.140
Next, we're gonna create
a vector of items called items.

19
00:00:59.140 --> 00:01:02.207
And we're gonna grab a mutable
reference to item 0.

20
00:01:02.207 --> 00:01:05.360
So we're gonna call the function get_mut.

21
00:01:05.360 --> 00:01:07.350
So let me show you how that looks.

22
00:01:07.350 --> 00:01:10.570
So instead of having this right here,
I'm gonna go like this.

23
00:01:11.900 --> 00:01:15.210
Let's take this and go vec bang and
just have a single item in there.

24
00:01:15.210 --> 00:01:17.770
Does that make sense?

25
00:01:17.770 --> 00:01:18.270
There we go.

26
00:01:18.270 --> 00:01:21.868
I've just changed our one
item into a vector of items.

27
00:01:25.196 --> 00:01:31.780
All right, now, let's grab a mutable
reference to the first item.

28
00:01:31.780 --> 00:01:36.198
So I'll go like this, let mute, let's see,
we'll go like this, let first =,

29
00:01:36.198 --> 00:01:39.225
I believe it has a convenience function,
first_mut.

30
00:01:39.225 --> 00:01:41.579
There we go, look at that.

31
00:01:41.579 --> 00:01:42.680
Look at what we have.

32
00:01:42.680 --> 00:01:44.610
We have an option of mutable item.

33
00:01:44.610 --> 00:01:45.680
Of course, we have an option, right?

34
00:01:45.680 --> 00:01:46.360
That makes sense.

35
00:01:46.360 --> 00:01:48.761
There may not be a first item,
but if there is,

36
00:01:48.761 --> 00:01:50.790
here's a mutable reference to it.

37
00:01:50.790 --> 00:01:54.016
Okay, fantastic, this is looking good.

38
00:01:54.016 --> 00:01:57.244
I've already deviated from the code
that I wrote, I can already tell, but

39
00:01:57.244 --> 00:01:58.430
it feels good using this.

40
00:01:58.430 --> 00:02:01.160
All right, so I wanna print item 0.

41
00:02:01.160 --> 00:02:02.250
All right, let's do that.

42
00:02:02.250 --> 00:02:06.870
So I'm just gonna hop up here, grab that,
hop back down here, paste that in,

43
00:02:06.870 --> 00:02:09.536
go here, go here, go here, and first.

44
00:02:09.536 --> 00:02:12.170
Feels good, gotta be as fast as
possible when you're programming.

45
00:02:12.170 --> 00:02:13.170
So there we go.

46
00:02:13.170 --> 00:02:15.620
We're now gonna print out the first item.

47
00:02:15.620 --> 00:02:16.380
It'll be an option.

48
00:02:16.380 --> 00:02:21.230
So either we're gonna see none or we're
gonna see some mutable reference to item.

49
00:02:22.740 --> 00:02:24.380
We actually know what we're gonna see,
right?

50
00:02:24.380 --> 00:02:26.880
We kinda know what we're gonna see here,
right?

51
00:02:26.880 --> 00:02:31.340
We're gonna see one item cuz
there's only one item in there.

52
00:02:31.340 --> 00:02:33.693
All right, so now let's call print_all.

53
00:02:33.693 --> 00:02:36.820
What do you think is gonna
happen when we call print_all?

54
00:02:40.280 --> 00:02:45.640
Anyone wanna exercise, Their ability?

55
00:02:45.640 --> 00:02:52.913
&gt;&gt; Well, they're not write references,
so we're not messed up there.

56
00:02:56.160 --> 00:02:58.490
&gt;&gt; So what type of reference is this?

57
00:02:58.490 --> 00:02:59.953
&gt;&gt; It's a mutable reference.

58
00:02:59.953 --> 00:03:00.480
&gt;&gt; What?

59
00:03:00.480 --> 00:03:05.530
&gt;&gt; We can't have read references and
one mutable reference.

60
00:03:05.530 --> 00:03:08.351
&gt;&gt; Yes, we're having a read-write,
right, right?

61
00:03:11.714 --> 00:03:16.708
Wrong, why is that wrong?

62
00:03:16.708 --> 00:03:22.667
Well, Rust is exemptionally smart,
cuz we didn't follow our instruction list.

63
00:03:22.667 --> 00:03:24.599
How long does first live for?

64
00:03:24.599 --> 00:03:29.225
Rust is so good at identifying things that
it knows that the flow stops here, and

65
00:03:29.225 --> 00:03:30.550
now it only goes here.

66
00:03:30.550 --> 00:03:34.852
So we actually only have a mutable
reference out, and we never use it again,

67
00:03:34.852 --> 00:03:36.275
so its flow stops there.

68
00:03:36.275 --> 00:03:38.510
And then we have a immutable reference.

69
00:03:38.510 --> 00:03:41.945
So if we wanted to really see it explode,
put one on the other side, and

70
00:03:41.945 --> 00:03:43.090
what do we see?

71
00:03:43.090 --> 00:03:49.687
Cannot borrow an item as immutable
while you have a mutable reference out.

72
00:03:49.687 --> 00:03:51.580
It's saying, no way, cannot do that.

73
00:03:51.580 --> 00:03:55.440
And part of the reason for that is that we
could change things about the underlying

74
00:03:55.440 --> 00:03:58.300
structure in which our pointer
could be totally jacked up.

75
00:03:59.370 --> 00:04:03.002
And so you can imagine that you could have
a reference to a vector that's mutable.

76
00:04:03.002 --> 00:04:06.999
And then you could have a reference
inside that vector that's immutable,

77
00:04:06.999 --> 00:04:08.720
referring to the last element.

78
00:04:08.720 --> 00:04:11.667
Then our mutable one,
we empty everything out.

79
00:04:11.667 --> 00:04:15.148
Then our reference would still be on
something that doesn't even exist anymore,

80
00:04:15.148 --> 00:04:17.030
but we still have a reference to it.

81
00:04:17.030 --> 00:04:19.709
So this is part of the reason
why there's this rule.

82
00:04:19.709 --> 00:04:22.203
You cannot have an intermixing
of reference types,

83
00:04:22.203 --> 00:04:25.240
cannot exist because you will
hurt yourself eventually.

84
00:04:25.240 --> 00:04:26.650
It's very easy to do this in JavaScript.

85
00:04:26.650 --> 00:04:30.163
You can imagine you can just take the last
item out of a list, hold on to it,

86
00:04:30.163 --> 00:04:32.157
and then just set your
list to a new array.

87
00:04:32.157 --> 00:04:34.950
You could perfectly hold on to
that last item all you want.

88
00:04:34.950 --> 00:04:36.375
Maybe you're accidentally
creating a memory leak.

89
00:04:36.375 --> 00:04:37.560
Who knows what's happening?

90
00:04:37.560 --> 00:04:39.570
You're just holding on to it,
it's perfectly fine.

91
00:04:39.570 --> 00:04:42.050
So this is Rust trying to
reduce what you can do.

92
00:04:43.210 --> 00:04:46.949
And so, of course, what rule did we break?

93
00:04:49.630 --> 00:04:50.970
Does anyone know?

94
00:04:50.970 --> 00:04:53.194
All right, let me find the rules.

95
00:04:53.194 --> 00:04:56.675
I've already stated it, but
which one, what number?

96
00:04:56.675 --> 00:04:59.666
&gt;&gt; We broke rule number 3?

97
00:04:59.666 --> 00:05:03.536
&gt;&gt; Yes, we did break rule number 3,
or technically, rule number 2,

98
00:05:03.536 --> 00:05:05.360
depending on how you look at it.

99
00:05:08.373 --> 00:05:09.037
All right.

100
00:05:11.056 --> 00:05:12.680
So here's the next one.

101
00:05:12.680 --> 00:05:14.920
The next one is gonna
be kind of a fun one.

102
00:05:14.920 --> 00:05:15.712
It's pretty straightforward.

103
00:05:17.835 --> 00:05:20.551
Which is we're gonna get
a mutable reference at item 0,

104
00:05:20.551 --> 00:05:22.880
we're gonna get a mutable
reference at item 1.

105
00:05:24.650 --> 00:05:26.550
So here, we'll do that.

106
00:05:26.550 --> 00:05:30.681
We'll erase that and
we'll go like this, get_mut(0).

107
00:05:33.674 --> 00:05:35.019
And so now we have these two.

108
00:05:37.083 --> 00:05:39.800
So we have two mutable references out.

109
00:05:39.800 --> 00:05:41.840
Is that what's happening right now?

110
00:05:41.840 --> 00:05:46.075
So if I go println, That and

111
00:05:46.075 --> 00:05:52.012
do first,
What rule are we breaking right here?

112
00:05:52.012 --> 00:05:54.072
&gt;&gt; More than one mutable reference?

113
00:05:54.072 --> 00:05:55.697
&gt;&gt; More than one mutable reference.

114
00:05:55.697 --> 00:05:58.351
The easiest way to think about why that's
not allowed is always just think of

115
00:05:58.351 --> 00:05:59.330
a collection.

116
00:05:59.330 --> 00:06:02.220
Just pretend you have an array or
a vector.

117
00:06:02.220 --> 00:06:05.996
You can change it or another one could
be referring to something within it and

118
00:06:05.996 --> 00:06:09.680
totally lose it and try to mutate
something that doesn't exist.

119
00:06:09.680 --> 00:06:12.342
So you can always just only have one out.

120
00:06:12.342 --> 00:06:14.690
Look at that, so I've accidentally broke
it, but now I'm gonna ask you a question.

121
00:06:14.690 --> 00:06:16.170
So I'm gonna do this.

122
00:06:16.170 --> 00:06:17.790
I'm not gonna hit Save.

123
00:06:18.870 --> 00:06:21.044
Does this break or is this valid?

124
00:06:21.044 --> 00:06:25.307
&gt;&gt; It'll be valid, but there'll be a none.

125
00:06:25.307 --> 00:06:28.640
&gt;&gt; Or even if there was, the thing is
Rust can't tell if there's a none or not.

126
00:06:29.920 --> 00:06:31.382
Why is that valid?

127
00:06:31.382 --> 00:06:34.842
&gt;&gt; First flow ends?

128
00:06:34.842 --> 00:06:37.770
&gt;&gt; Remember the flow that I
was talking about earlier?

129
00:06:37.770 --> 00:06:42.840
Rust is able to identify the lifetime
of this truly is just this line.

130
00:06:42.840 --> 00:06:46.410
Thus, the next one right here mutates for
the rest of the time.

131
00:06:46.410 --> 00:06:50.030
So it has these little immutable flows
going on or mutable flows going on.

132
00:06:50.030 --> 00:06:55.920
So it can go, okay, you can mutate all
you want right here, and that's fine.

133
00:06:55.920 --> 00:07:01.140
It's the moment you overlap
them that it blows up.

134
00:07:01.140 --> 00:07:03.190
It's once they overlap, they explode.

135
00:07:03.190 --> 00:07:05.856
Until they overlap, you're perfectly fine.

136
00:07:05.856 --> 00:07:07.060
So kinda cool, right?

137
00:07:07.060 --> 00:07:10.249
That kinda makes it a pretty neat
way to play around with this.

138
00:07:10.249 --> 00:07:13.020
And so that's just something
to keep in your mind.

139
00:07:13.020 --> 00:07:16.996
The biggest thing, though, that you're
gonna probably run into is always gonna be

140
00:07:16.996 --> 00:07:18.490
a value versus a reference.

141
00:07:18.490 --> 00:07:21.443
When you first start out,
you try to pass things by value, right?

142
00:07:21.443 --> 00:07:23.156
You're gonna move it into a function.

143
00:07:23.156 --> 00:07:27.549
Just like when we first did that add_one
right here, this one right here,

144
00:07:27.549 --> 00:07:29.460
we had it defined like this.

145
00:07:29.460 --> 00:07:32.242
That's just your biggest mistake and
you run into this and

146
00:07:32.242 --> 00:07:34.370
it feels super confusing.

147
00:07:34.370 --> 00:07:35.640
Why is my stuff missing?

148
00:07:35.640 --> 00:07:36.207
I don't get it.

149
00:07:36.207 --> 00:07:37.420
It's because of that.

150
00:07:37.420 --> 00:07:39.409
It's because you're not
used to using references.

151
00:07:39.409 --> 00:07:41.665
You're used to referencing
being automatically done for

152
00:07:41.665 --> 00:07:42.820
you in a different language.

153
00:07:42.820 --> 00:07:44.799
So TypeScript, you pass in an object.

154
00:07:44.799 --> 00:07:47.879
It doesn't copy the object,
it doesn't move the object,

155
00:07:47.879 --> 00:07:50.725
it just creates a reference for
you and passes that in.

156
00:07:50.725 --> 00:07:57.030
So maybe Rust is just a little less
magical, but that's what makes it so good.

157
00:07:57.030 --> 00:08:01.267
All right, so the question was not all
free calls happen at the end of the scope,

158
00:08:01.267 --> 00:08:03.110
it happens where we stop using it.

159
00:08:03.110 --> 00:08:04.770
I don't know where the free calls happen.

160
00:08:04.770 --> 00:08:07.157
I would just never assume
you know where they happen,

161
00:08:07.157 --> 00:08:09.960
unless if you know what Rust
does underneath the hood.

162
00:08:09.960 --> 00:08:14.297
But Rust can validate that you don't break
rules by looking at the flow of them,

163
00:08:14.297 --> 00:08:15.150
that's it.

164
00:08:15.150 --> 00:08:18.940
So I can't infer that that means a free
call literally happens right after first

165
00:08:18.940 --> 00:08:20.650
was being done and used right here.

166
00:08:20.650 --> 00:08:24.310
I cannot say that there's a free call for
first right here.

167
00:08:24.310 --> 00:08:27.555
It just has identified it's
not breaking any rules here.

168
00:08:27.555 --> 00:08:28.752
So there's a difference there.

169
00:08:31.548 --> 00:08:35.370
All right, so when we first got
started out, we had this little thing.

170
00:08:35.370 --> 00:08:39.660
You may or may not remember it, all right?

171
00:08:40.770 --> 00:08:42.460
This is gonna be so great.

172
00:08:42.460 --> 00:08:44.900
So when we first started out, we had this.

173
00:08:44.900 --> 00:08:47.160
What is happening here?

174
00:08:47.160 --> 00:08:48.460
Why is this breaking?

175
00:08:49.620 --> 00:08:53.810
Can we make it nice and beautiful for you?

176
00:08:53.810 --> 00:08:57.030
We have all this newfound
borrow checker knowledge.

177
00:08:57.030 --> 00:09:00.415
What is breaking here?

178
00:09:00.415 --> 00:09:07.310
Let me give you a little bit of a hint,
iter, it takes a reference to self.

179
00:09:09.460 --> 00:09:13.510
And it returns out a reference to
the items that it's going over.

180
00:09:17.436 --> 00:09:19.120
Well, let's look at the errors.

181
00:09:19.120 --> 00:09:21.010
Okay, let's start way down here.

182
00:09:21.010 --> 00:09:23.117
Borrow later used here, okay?

183
00:09:23.117 --> 00:09:25.550
So that's probably not it.

184
00:09:25.550 --> 00:09:26.390
What's this one?

185
00:09:26.390 --> 00:09:30.320
Temporary value is freed at
the end of this statement.

186
00:09:30.320 --> 00:09:32.318
What is the temporary value?

187
00:09:32.318 --> 00:09:34.650
&gt;&gt; The reference to the vector?

188
00:09:34.650 --> 00:09:37.275
&gt;&gt; No, we hold on to that one.

189
00:09:37.275 --> 00:09:38.525
&gt;&gt; Value of the vector?

190
00:09:38.525 --> 00:09:41.720
&gt;&gt; The vector,
the vector is the temporary value.

191
00:09:41.720 --> 00:09:45.740
This only exists for the statement cuz
no one's actually holding on to it.

192
00:09:45.740 --> 00:09:52.040
That is why I went like this earlier and
did that, and now we can go data.

193
00:09:52.040 --> 00:09:54.650
Now, data lives for the entire thing.

194
00:09:54.650 --> 00:09:57.692
It didn't just live for
that one little statement, it's living for

195
00:09:57.692 --> 00:09:58.590
the full function.

196
00:10:00.030 --> 00:10:02.370
So we get to define how long do you live?

197
00:10:03.940 --> 00:10:05.170
So hopefully that makes sense.

198
00:10:05.170 --> 00:10:08.687
It's kinda confusing, but
in some sense, it makes a lot of sense,

199
00:10:08.687 --> 00:10:10.241
because no one holds on to it.

200
00:10:10.241 --> 00:10:11.451
Of course, it's gone.

201
00:10:11.451 --> 00:10:14.783
The only thing we're building is
references to something that nobody

202
00:10:14.783 --> 00:10:15.407
holds on to.

