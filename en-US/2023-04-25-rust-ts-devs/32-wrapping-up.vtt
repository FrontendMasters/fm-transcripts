WEBVTT

1
00:00:00.320 --> 00:00:01.775
There's a lot more to learn.

2
00:00:01.775 --> 00:00:03.768
And we learned a lot of things, okay?

3
00:00:03.768 --> 00:00:06.327
We learned about just
like your basic enums.

4
00:00:06.327 --> 00:00:08.863
You at least know what enums are.

5
00:00:08.863 --> 00:00:10.145
You kind of know how they're defined.

6
00:00:10.145 --> 00:00:14.033
You can now know they have subtypes, they
can be generic, they can implement traits,

7
00:00:14.033 --> 00:00:16.869
they can implement their own methods and
their own behaviors.

8
00:00:16.869 --> 00:00:19.059
You have a vague idea of what
the borrow checker does.

9
00:00:19.059 --> 00:00:23.020
You know about value, versus reference,
versus mutable reference.

10
00:00:23.020 --> 00:00:26.545
You know about how options try
to solve the undefined problem.

11
00:00:26.545 --> 00:00:30.625
You know how about results try to resolve
the old throw problem that we have,

12
00:00:30.625 --> 00:00:34.223
Because you don't even know what
functions throw in JavaScript.

13
00:00:34.223 --> 00:00:35.946
You saw the basics of Rust, and

14
00:00:35.946 --> 00:00:39.075
hopefully that makes you
excited about learning more.

15
00:00:39.075 --> 00:00:41.803
The problem about trying to learn
something like Rust is, like I said,

16
00:00:41.803 --> 00:00:42.994
there's a big skill gap to it.

17
00:00:42.994 --> 00:00:46.864
In other words, you can just keep
on learning for quite some time.

18
00:00:46.864 --> 00:00:50.163
There's a lot of room to just keep
getting better at the language.

19
00:00:50.163 --> 00:00:55.125
It's like C++, just without all the C++,
[SOUND] right?

20
00:00:55.125 --> 00:00:57.715
You don't even have to deal
with the C++ part of it,

21
00:00:57.715 --> 00:00:59.624
but it has that level of deepness to it.

22
00:00:59.624 --> 00:01:01.816
So there is something
just really personally,

23
00:01:01.816 --> 00:01:05.287
I think magical about a language where
you can keep on getting better at it.

24
00:01:05.287 --> 00:01:07.883
Whereas TypeScript,
if you've been programming it long enough,

25
00:01:07.883 --> 00:01:10.715
you don't necessarily feel like
you're getting better at TypeScript.

26
00:01:10.715 --> 00:01:13.734
You just feel like you're getting better
at trying to align things to work

27
00:01:13.734 --> 00:01:14.327
well enough.

28
00:01:14.327 --> 00:01:14.971
And for me,

29
00:01:14.971 --> 00:01:19.302
it's like I I don't even have new tools
I can learn to get dramatically better.

30
00:01:19.302 --> 00:01:22.499
I just feel like I'm kind of only,
okay, I generally know what I'm doing.

31
00:01:22.499 --> 00:01:24.798
It just doesn't feel as enriching for me.

32
00:01:24.798 --> 00:01:26.671
So that's something I've just
really liked about Rust.

33
00:01:26.671 --> 00:01:29.233
So hopefully this kind of
builds the curiosity for

34
00:01:29.233 --> 00:01:31.738
you all that you want to
learn a bit more about it.

35
00:01:31.738 --> 00:01:34.430
We didn't even cover really errors,
how to create errors, the error trait.

36
00:01:34.430 --> 00:01:35.950
We didn't cover WASM and UIs.

37
00:01:35.950 --> 00:01:39.775
We didn't cover async, smart pointers,
interior mutability, lifetimes, macros,

38
00:01:39.775 --> 00:01:41.617
both proc macros and declarative macros.

39
00:01:41.617 --> 00:01:44.535
They're truly amazing,
I can't even believe they exist.

40
00:01:44.535 --> 00:01:47.176
It's just really hard to fit all
the things you could possibly fit into

41
00:01:47.176 --> 00:01:47.724
this course.

42
00:01:47.724 --> 00:01:51.796
And so this was just me trying to
give you at least traits and enums,

43
00:01:51.796 --> 00:01:56.178
so that you have a super strong
foundation to be able to move from there.

44
00:01:56.178 --> 00:01:56.717
For me,

45
00:01:56.717 --> 00:02:01.507
those were the strangest differences
coming from TypeScript into this.

46
00:02:01.507 --> 00:02:03.746
Because they were just unusual for me.

47
00:02:03.746 --> 00:02:05.329
And so hopefully that excites you,

48
00:02:05.329 --> 00:02:08.511
hopefully it makes you really excited
about learning more about this.

49
00:02:08.511 --> 00:02:10.198
I think it's tons of fun to do it.

50
00:02:10.198 --> 00:02:12.136
I just love the skill gap of all of it.

51
00:02:12.136 --> 00:02:15.298
Some good resources I
think is the Rust book.

52
00:02:15.298 --> 00:02:17.692
You can just look it up,
The Rust Book, it's fantastic.

53
00:02:17.692 --> 00:02:21.725
It goes over everything fairly in depth,
and at the same time it's really simple.

54
00:02:21.725 --> 00:02:25.835
There's also some variations of
The Rust Book, like Too Many Damn Lists,

55
00:02:25.835 --> 00:02:28.195
the Async Rust Book, The Cargo Rust Book.

56
00:02:28.195 --> 00:02:31.900
And you can kind of go over each one of
the topics, and learn about how the build

57
00:02:31.900 --> 00:02:35.111
tool works, how async works, and
just how Rust works in general.

58
00:02:35.111 --> 00:02:36.942
And then there's also Jonhoo's YouTube.

59
00:02:36.942 --> 00:02:41.217
If you haven't watched Jonhoo,
he's like a super smart Rust guy.

60
00:02:41.217 --> 00:02:42.317
Okay, so when I told you,

61
00:02:42.317 --> 00:02:45.186
remember when I said how do you
measure yourself with the language?

62
00:02:45.186 --> 00:02:47.742
One being, you can kind of write it.

63
00:02:47.742 --> 00:02:49.711
Two, you're writing libraries for it.

64
00:02:49.711 --> 00:02:53.303
Three, you could give back to the
language, like you know it really, well.

65
00:02:53.303 --> 00:02:56.958
Jonhoo's on the three side of Rust,
so he really, really, does know it.

66
00:02:56.958 --> 00:02:58.936
Also, fasterthanli.me's blog.

67
00:02:58.936 --> 00:03:02.110
He's very very good,
he writes some super cool stuff.

68
00:03:02.110 --> 00:03:05.719
He has this really cool way in which
he solves advent of code problems.

69
00:03:05.719 --> 00:03:10.627
And he did some super cool default trait
implementations along with changing how,

70
00:03:10.627 --> 00:03:12.882
say, the range works from 0 to 10.

71
00:03:12.882 --> 00:03:15.633
He actually changed how the methods
would work on it, and made it so

72
00:03:15.633 --> 00:03:17.119
it solves problems, really cool.

73
00:03:17.119 --> 00:03:21.463
So cool stuff you can go read on,
and how you can do stuff.

74
00:03:21.463 --> 00:03:23.931
Things you, if you want to build,
if you want to try it out.

75
00:03:23.931 --> 00:03:26.274
CLI applications are always a great start.

76
00:03:26.274 --> 00:03:28.168
Pick something that you like.

77
00:03:28.168 --> 00:03:32.286
Try doing LS, try doing anything,
any basic command line utility,

78
00:03:32.286 --> 00:03:34.496
just learn how to use and write rust.

79
00:03:34.496 --> 00:03:38.226
I think WebSocket servers are great
to just learn about async Rust.

80
00:03:38.226 --> 00:03:41.369
See if you can just do a little chat
program with WebSocket servers.

81
00:03:41.369 --> 00:03:43.587
Normally this is where I'd scream Tokyo,
I'm not going to do it.

82
00:03:43.587 --> 00:03:46.411
If you want to learn about WASM,
Leptos is an awesome framework.

83
00:03:46.411 --> 00:03:49.215
It's just like solid.js.

84
00:03:49.215 --> 00:03:50.633
It feels just like it, except for

85
00:03:50.633 --> 00:03:53.939
it implements a couple of things that
make it super simple to use within Rust.

86
00:03:53.939 --> 00:03:57.373
It implements the clone trait, or
both the clone and copy trait,

87
00:03:57.373 --> 00:03:59.933
which means that you can
just pass it around, and

88
00:03:59.933 --> 00:04:04.264
it'll automatically clone just the
outside, whereas you keep the same signal.

89
00:04:04.264 --> 00:04:07.018
So you can just spread one signal
throughout your whole application without

90
00:04:07.018 --> 00:04:08.621
worrying who's borrowing it and all that.

91
00:04:08.621 --> 00:04:11.845
It just makes UI really,
really simple to do, good times.

92
00:04:11.845 --> 00:04:15.387
And so my hope for you is that you
don't leave with everything, but

93
00:04:15.387 --> 00:04:18.183
you leave enough to Google
your way out of a problem.

94
00:04:18.183 --> 00:04:19.972
I hope you enjoyed this.

95
00:04:19.972 --> 00:04:24.172
I tried to get as much as I possibly
could in such a small period of time.

96
00:04:24.172 --> 00:04:27.477
That's all I can really give you
in one day, I hope you enjoyed it.

97
00:04:27.477 --> 00:04:29.865
That's really it, Thank you.

98
00:04:29.865 --> 00:04:31.749
&gt;&gt; [APPLAUSE]
&gt;&gt; Thank you, Twitch.

99
00:04:31.749 --> 00:04:35.046
&gt;&gt; [APPLAUSE]
&gt;&gt; This is the first time I got a clap at

100
00:04:35.046 --> 00:04:36.000
Front End Masters.

