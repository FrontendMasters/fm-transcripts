WEBVTT

1
00:00:00.330 --> 00:00:01.470
All right, so a little quick checkpoint.

2
00:00:01.470 --> 00:00:04.850
We've talked about iterators, enums,
options, results and the borrow checker.

3
00:00:04.850 --> 00:00:09.940
We've kinda completed the very
kind of like the basics of rust.

4
00:00:09.940 --> 00:00:11.060
How's everyone feeling about it?

5
00:00:11.060 --> 00:00:14.832
You generally have the idea in the sense
that if I asked you to write a program,

6
00:00:14.832 --> 00:00:18.374
a small CLI program, you could probably
accomplish that by googling and

7
00:00:18.374 --> 00:00:19.840
getting your way through it.

8
00:00:19.840 --> 00:00:23.958
You have all the words in
your head at least, right?

9
00:00:23.958 --> 00:00:27.516
You may struggle but you have ideas now,
and that's what's important.

10
00:00:27.516 --> 00:00:31.507
That's the goal of this course is to get
you so that you can struggle not just get

11
00:00:31.507 --> 00:00:35.501
you so you're just straight destroyed
because when you first try rust you just

12
00:00:35.501 --> 00:00:38.129
get destroyed the first
time through it's awful.

13
00:00:38.129 --> 00:00:43.660
I did it for advent of code and
it was just, the Buzz Lightyear one.

14
00:00:43.660 --> 00:00:45.968
I'd be like unwraps everywhere, right?

15
00:00:45.968 --> 00:00:47.470
It was just awful.

16
00:00:48.610 --> 00:00:51.400
All right, so
traits we're gonna get into the last,

17
00:00:51.400 --> 00:00:54.320
like what I consider the last
big concept of rust.

18
00:00:54.320 --> 00:00:57.864
The rest are gonna be the smaller and
smaller, less complicated topics

19
00:00:57.864 --> 00:01:01.361
are slightly less complicated topics
are still fairly complicated.

20
00:01:01.361 --> 00:01:04.101
But I don't feel like they're
as big other than macros,

21
00:01:04.101 --> 00:01:08.580
macros are terrifyingly large anyways,
so traits they're like interfaces.

22
00:01:08.580 --> 00:01:12.481
You can define most of rusts
behaviors such as addition,

23
00:01:12.481 --> 00:01:17.170
a quality checks,
hashing parsing strings being displayed.

24
00:01:17.170 --> 00:01:19.450
All of this is gonna be via traits.

25
00:01:19.450 --> 00:01:24.274
Traits are like interfaces, but what you
can do with them is much different than

26
00:01:24.274 --> 00:01:27.160
what you can do with
interfaces in TypeScript.

27
00:01:28.350 --> 00:01:31.080
What traits can be done cannot
be done directly in JavaScript.

28
00:01:31.080 --> 00:01:34.015
You do not have the language
capability to do that but

29
00:01:34.015 --> 00:01:36.630
you can do it differently
that might work out.

30
00:01:37.700 --> 00:01:44.387
And so you could do it,
it's just different.

31
00:01:44.387 --> 00:01:48.130
So first let's just jump off with
some very simple trait stuff.

32
00:01:48.130 --> 00:01:52.789
So what we're going to do is first in
TypeScript we're gonna create a rectangle

33
00:01:52.789 --> 00:01:54.814
with a width, height, x, and y.

34
00:01:54.814 --> 00:01:56.440
And then we're gonna create a circle
with a height, height, x, and y.

35
00:01:56.440 --> 00:01:57.653
With a radius X and Y,

36
00:01:57.653 --> 00:02:02.790
I would create them as classes because
we're gonna add a couple methods to them.

37
00:02:02.790 --> 00:02:06.100
So I know some of you hate classes,
but just do that.

38
00:02:06.100 --> 00:02:07.610
So pretty straightforward.

39
00:02:07.610 --> 00:02:09.572
I'm gonna do it with you.

40
00:02:09.572 --> 00:02:12.260
So let's go class rectangle.

41
00:02:13.270 --> 00:02:17.962
It's gonna have a constructor and

42
00:02:17.962 --> 00:02:22.815
we're gonna have like a public wait

43
00:02:22.815 --> 00:02:28.173
public X number of Y, width, height.

44
00:02:28.173 --> 00:02:30.320
Look at that, rectangle, right?

45
00:02:30.320 --> 00:02:30.910
There we go.

46
00:02:30.910 --> 00:02:33.541
We have them right there, fantastic.

47
00:02:33.541 --> 00:02:36.930
Could have made it private,
whatever I don't, it is what it is.

48
00:02:36.930 --> 00:02:38.440
Let's do the same thing with circle.

49
00:02:39.560 --> 00:02:40.850
Let's do a circle.

50
00:02:40.850 --> 00:02:45.030
The only difference is, is that
a circle has a radius, there we go.

51
00:02:45.030 --> 00:02:47.590
So if you don't feel like, by the way,
I can see a lot of people aren't typing.

52
00:02:47.590 --> 00:02:49.350
They look like they're focusing in hard.

53
00:02:49.350 --> 00:02:53.532
If you don't wanna to do the TypeScript
part, at least try somewhat to do the Rust

54
00:02:53.532 --> 00:02:56.990
part, even though it's gonna
be maybe a little painful.

55
00:02:56.990 --> 00:03:01.100
But I feel like it'd be really good,
it'd be good for your soul so there we go.

56
00:03:01.100 --> 00:03:05.575
Does that make sense everyone knows
kind of what's happening here nothing

57
00:03:05.575 --> 00:03:07.146
confusing going on good.

58
00:03:07.146 --> 00:03:12.308
All right, let's go down here there
we go wow I produced the same code,

59
00:03:12.308 --> 00:03:14.241
it's like I had this plan.

60
00:03:14.241 --> 00:03:19.300
All right, we could use types here but
let's just face it.

61
00:03:19.300 --> 00:03:21.677
If you use just like a type and
try to use a raw object,

62
00:03:21.677 --> 00:03:24.450
you're just being like a functional
try hard at that point.

63
00:03:24.450 --> 00:03:27.460
Trying to attach methods to objects
like performance is terrible.

64
00:03:27.460 --> 00:03:30.420
Don't do that, just use classes
if you're gonna do, go this way.

65
00:03:30.420 --> 00:03:36.320
So let's create an interface called
area that has a singular method area.

66
00:03:36.320 --> 00:03:39.260
All right, let's go up to the top,

67
00:03:39.260 --> 00:03:44.755
go inter base area has a one function
area that returns and number.

68
00:03:44.755 --> 00:03:47.898
So that looks good, yeah, there we go.

69
00:03:47.898 --> 00:03:51.365
That's pretty, it's pretty good.

70
00:03:51.365 --> 00:03:52.970
There's that New York accent.

71
00:03:52.970 --> 00:03:54.220
I've never even been to New York.

72
00:03:54.220 --> 00:03:55.370
I don't even know where it's coming from.

73
00:03:56.660 --> 00:03:57.495
Just get so excited.

74
00:03:57.495 --> 00:04:00.278
All right, let's go back down.

75
00:04:00.278 --> 00:04:03.440
We got to add area to both circle and
rectangle.

76
00:04:03.440 --> 00:04:07.692
So some of the fun parts about
JavaScript or TypeScript really,

77
00:04:07.692 --> 00:04:09.750
is you can go implements area.

78
00:04:09.750 --> 00:04:13.480
And then it'll give you an error,
you can use code actions.

79
00:04:13.480 --> 00:04:14.850
You can implement it.

80
00:04:14.850 --> 00:04:15.720
You can jump down.

81
00:04:15.720 --> 00:04:16.271
You can do that.

82
00:04:16.271 --> 00:04:19.660
You can hit here and go return this
dot width times this dot height.

83
00:04:19.660 --> 00:04:21.330
Boom all right, fantastic.

84
00:04:21.330 --> 00:04:22.540
You've just done it.

85
00:04:22.540 --> 00:04:27.678
Or since TypeScript just
does structural typing we

86
00:04:27.678 --> 00:04:32.935
can just copy this method,
scroll on down here, and

87
00:04:32.935 --> 00:04:38.802
hit him with that old radius
times radius times math.py.

88
00:04:38.802 --> 00:04:39.910
All right, there we go.

89
00:04:42.130 --> 00:04:45.790
Circle still implements the area
interface, you just didn't specify it.

90
00:04:45.790 --> 00:04:49.720
So, something kind of unique about
TypeScript is that it's structural typing.

91
00:04:49.720 --> 00:04:55.152
Long as the structure of the thing
you use matches the interface,

92
00:04:55.152 --> 00:04:57.340
you're that interface.

93
00:04:57.340 --> 00:05:02.070
If it walks like a duck and it quacks like
an area, you got yourself a rectangle.

94
00:05:02.070 --> 00:05:04.027
Everyone knows that.

95
00:05:04.027 --> 00:05:06.608
All right, so pretty similar code.

96
00:05:06.608 --> 00:05:10.240
I assume I don't have to explain
any of that code, right.

97
00:05:12.910 --> 00:05:16.754
All right, so, what do you define every
interface you state the method or

98
00:05:16.754 --> 00:05:19.130
property that requires, right?

99
00:05:19.130 --> 00:05:23.411
When you implement an interface,
it must be done on the object at

100
00:05:23.411 --> 00:05:27.100
definition time is a very
important concept.

101
00:05:27.100 --> 00:05:30.214
At definition, you declare what I can do.

102
00:05:30.214 --> 00:05:36.979
All right, so I just want to state that,
so look at that I declare rectangle,

103
00:05:36.979 --> 00:05:41.368
I also declare that I'm area interface and
here.

104
00:05:41.368 --> 00:05:44.318
Okay, so let's do the exact same thing.

105
00:05:44.318 --> 00:05:45.310
Let's do it in Rust.

106
00:05:45.310 --> 00:05:47.380
So I'm gonna use float 64s.

107
00:05:47.380 --> 00:05:49.530
So x will be defined as a float 64.

108
00:05:49.530 --> 00:05:51.650
So let's jump back into Rust.

109
00:05:51.650 --> 00:05:52.890
Let's praise the language.

110
00:05:52.890 --> 00:05:55.060
Struct Rect, I'm gonna call it Rect.

111
00:05:55.060 --> 00:05:59.467
The whole time I call it recting, I'm just
going to call it rect because it's just so

112
00:05:59.467 --> 00:06:01.033
many extra letters to write.

113
00:06:01.033 --> 00:06:06.474
So here we go.
F64, y64, width 64,

114
00:06:06.474 --> 00:06:13.240
height 64, I'm gonna copy that out,

115
00:06:13.240 --> 00:06:18.821
do a circle, and, radius 64.

116
00:06:18.821 --> 00:06:22.110
And of course you have to have a main
function, or else Rust will actually cry.

117
00:06:22.110 --> 00:06:23.580
And then there we go.

118
00:06:23.580 --> 00:06:25.620
Rust is no longer crying, we're all happy.

119
00:06:25.620 --> 00:06:26.630
This makes sense, right?

120
00:06:26.630 --> 00:06:31.084
We've seen this enough times
today that this is not too wild.

121
00:06:31.084 --> 00:06:35.800
So let's implement the area trait.

122
00:06:36.870 --> 00:06:39.350
Okay, I know it's a trait so
this is unique.

123
00:06:39.350 --> 00:06:42.806
Remember a trait if you can recall
from the very beginning is kind

124
00:06:42.806 --> 00:06:44.860
of like implementing the interface.

125
00:06:44.860 --> 00:06:47.050
I'm just gonna say the word trait area.

126
00:06:48.900 --> 00:06:54.400
Function area, return out and
F64 but remember,

127
00:06:54.400 --> 00:07:01.150
we need to tell area how it refers
to the rectangle or circle.

128
00:07:01.150 --> 00:07:06.680
So I'm gonna say, hey, I need a read only
reference to myself, that's all I need.

129
00:07:06.680 --> 00:07:10.730
I need a read-only reference to myself
because I don't need to mutate anything.

130
00:07:10.730 --> 00:07:12.347
I just need to be able
to read the data and

131
00:07:12.347 --> 00:07:14.120
I should be able to calculate the area.

132
00:07:14.120 --> 00:07:14.679
Does that make sense?

133
00:07:17.921 --> 00:07:19.605
Okay, everyone's getting pretty pumped up.

134
00:07:19.605 --> 00:07:20.716
I'm getting pretty pumped up.

135
00:07:22.863 --> 00:07:29.540
All right, now let's implement,
the area trait.

136
00:07:30.730 --> 00:07:33.540
Okay, so, if you remember,
we go like this.

137
00:07:34.930 --> 00:07:38.939
Implement Area for Rect.

138
00:07:41.079 --> 00:07:42.310
It's pretty straightforward, right?

139
00:07:42.310 --> 00:07:43.860
You kinda read it out in English.

140
00:07:43.860 --> 00:07:45.610
It's almost like it's COBOL.

141
00:07:45.610 --> 00:07:46.920
It's so readable here.

142
00:07:46.920 --> 00:07:50.080
So I'm gonna use code actions and
I'm gonna implement this.

143
00:07:50.080 --> 00:07:51.330
So there we go.

144
00:07:51.330 --> 00:07:57.460
We have function area takes in a reference
to self and produces a float64.

145
00:07:57.460 --> 00:08:03.820
Since it's for a rect, that means self
has all the properties of the rectangle.

146
00:08:03.820 --> 00:08:07.640
So if I go self.,
you can see height, width, x, y.

147
00:08:07.640 --> 00:08:14.140
So I'm gonna go like this
return width times self.height.

148
00:08:14.140 --> 00:08:15.100
There we go.

149
00:08:15.100 --> 00:08:16.150
We nailed it.

150
00:08:16.150 --> 00:08:18.440
All right, first try.

151
00:08:18.440 --> 00:08:23.760
So I highly recommend executing
a little YAP, I call it YAP.

152
00:08:23.760 --> 00:08:25.761
Yank that paragraph and
then you can just paste it.

153
00:08:25.761 --> 00:08:28.151
Wait, if you're not using
Vim you can't do that.

154
00:08:28.151 --> 00:08:29.100
I use Vim by the way.

155
00:08:29.100 --> 00:08:33.300
All right, so
now we need to implement it for circle.

156
00:08:33.300 --> 00:08:36.810
So, implement area for circle.

157
00:08:37.900 --> 00:08:40.750
All right, so now it's gonna
complain well hey wait a second.

158
00:08:40.750 --> 00:08:45.480
Area or circle doesn't have width or
height well let's change that so we gotta

159
00:08:45.480 --> 00:08:50.222
go radius times self.radius because
remember pi r squared times pi, right?

160
00:08:50.222 --> 00:08:52.725
Now this is an interesting one, ellipses.

161
00:08:52.725 --> 00:08:56.326
Hey now, this is kind of an interesting
one you have to import pi,

162
00:08:56.326 --> 00:08:59.670
pi doesn't exist, but
look at what you can import.

163
00:08:59.670 --> 00:09:03.740
You can import it for
a float 32 or a float 64.

164
00:09:03.740 --> 00:09:04.610
Yeah, no.

165
00:09:04.610 --> 00:09:07.694
Yeah, so make sure you implement it for
or import it for

166
00:09:07.694 --> 00:09:12.741
a float 64 because if you don't well, you
can't multiply a float 32 by a float 64.

167
00:09:12.741 --> 00:09:13.970
They're different types.

168
00:09:13.970 --> 00:09:16.950
Remember that, there we go.

169
00:09:16.950 --> 00:09:21.730
So now we've implemented area for
both circle and rectangle.

170
00:09:21.730 --> 00:09:26.235
So let's go down into our main
function and let's create a rectangle.

171
00:09:26.235 --> 00:09:32.318
Let rect=Rect and go x is 0.0, y is 0.0,

172
00:09:32.318 --> 00:09:37.641
width is 10.0, height is 10.0,

173
00:09:37.641 --> 00:09:42.215
and don't forget your semicolon.

174
00:09:45.718 --> 00:09:49.150
All right, so let's do the same thing but
let's do it for circle.

175
00:09:49.150 --> 00:09:54.414
So I'm gonna create a circ=Circle and

176
00:09:54.414 --> 00:09:59.366
replace this last one with a radius.

177
00:09:59.366 --> 00:10:01.420
Trust me, this is gonna get so
exciting, okay?

178
00:10:01.420 --> 00:10:03.617
I want you to follow along
because this is so exciting.

179
00:10:07.922 --> 00:10:09.453
All right, here we go.

180
00:10:09.453 --> 00:10:12.328
So we're gonna do a little println!

181
00:10:12.328 --> 00:10:17.279
And let's do this, and go circ.area.

182
00:10:17.279 --> 00:10:19.330
All right, it worked out.

183
00:10:19.330 --> 00:10:22.370
Let's do a rect.area.

184
00:10:22.370 --> 00:10:23.830
Look at that, we called area.

185
00:10:23.830 --> 00:10:25.610
Pretty cool, right?

186
00:10:25.610 --> 00:10:28.310
Very basic trait stuff.

187
00:10:28.310 --> 00:10:32.422
Nothing fancy here,
I don't think anyone is impressed, right?

188
00:10:32.422 --> 00:10:35.280
See, that's not that was like
a Yao Ming face right there.

189
00:10:36.280 --> 00:10:37.720
&gt;&gt; There's a bunch of claps.

190
00:10:37.720 --> 00:10:39.390
&gt;&gt; A lot of claps, I know, very excited.

191
00:10:40.510 --> 00:10:41.560
Not cool at all.

192
00:10:41.560 --> 00:10:44.150
I do agree it's actually
not all that cool.

193
00:10:44.150 --> 00:10:47.190
There we go, if I run it,
look at what I get.

194
00:10:47.190 --> 00:10:51.527
Fantastic, that makes about,
that's approximately correct.

195
00:10:51.527 --> 00:10:55.802
Radius 10, 10 times 100 times 3.14,
boom, we got that correct.

196
00:10:55.802 --> 00:10:59.040
3.14 versus 100, fantastic,
we have done it.

197
00:10:59.040 --> 00:11:01.370
Thank you for all the claps,
many appreciations.

198
00:11:01.370 --> 00:11:07.430
All right, so now, you're not
impressed and I do not blame you.

199
00:11:07.430 --> 00:11:11.600
It's time to be more impressive,
all right?

200
00:11:11.600 --> 00:11:15.400
So let's use this area trait interface,
but let's make a very small change.

201
00:11:15.400 --> 00:11:22.610
Let's move our rect and circle definition
to a new file called shapes.rs.

202
00:11:22.610 --> 00:11:24.914
So let's go in here.

203
00:11:24.914 --> 00:11:28.690
Do you see that actually do :w in
the terminal happens all the time,

204
00:11:28.690 --> 00:11:31.351
victim of using Vim,
suffering from success.

205
00:11:31.351 --> 00:11:36.895
All right, so
let's create a file called shapes.rs.

206
00:11:36.895 --> 00:11:41.566
And then let's go back
to our main file and

207
00:11:41.566 --> 00:11:46.369
just take out these two
items right here and

208
00:11:46.369 --> 00:11:50.786
let's move it to our shapes.rs file.

209
00:11:50.786 --> 00:11:54.980
So however you want to do that you can do
that we need to make a small change to

210
00:11:54.980 --> 00:11:58.185
the structures to make it worked out for
us.

211
00:11:58.185 --> 00:11:59.645
Let me show you the small change.

212
00:11:59.645 --> 00:12:05.058
Just write the word pub everywhere,
everything let's make everything public.

213
00:12:07.247 --> 00:12:07.915
Look at that.

214
00:12:07.915 --> 00:12:09.455
Okay, I just made everything public.

215
00:12:09.455 --> 00:12:11.265
We then make it all public.

216
00:12:11.265 --> 00:12:13.965
Now you'll notice at the very
top of the file it says file

217
00:12:13.965 --> 00:12:15.930
not included in module three.

218
00:12:15.930 --> 00:12:19.627
This is just an error that happens
because we haven't told Rust we wanna use

219
00:12:19.627 --> 00:12:20.220
this file.

220
00:12:21.370 --> 00:12:26.170
So let's go back to our main file and

221
00:12:26.170 --> 00:12:30.445
tell it we wanna use this file.

222
00:12:30.445 --> 00:12:35.155
This is part of our definition so when you
build the program please build this also.

223
00:12:35.155 --> 00:12:40.645
So I'm gonna jump back to that main file
and I'm gonna go like this, mod shapes.

224
00:12:41.885 --> 00:12:42.385
There we go.

225
00:12:42.385 --> 00:12:45.835
I just said hey, make sure you use that.

226
00:12:45.835 --> 00:12:47.125
But look at what's happening right here.

227
00:12:47.125 --> 00:12:49.340
We have this weird error going on.

228
00:12:49.340 --> 00:12:51.260
Cannot find rect in the scope.

229
00:12:51.260 --> 00:12:52.490
Well, this makes sense, right?

230
00:12:52.490 --> 00:12:57.090
If you've ever used JavaScript, you know
you have to like import the thing in.

231
00:12:57.090 --> 00:12:58.080
Exact same concept.

232
00:12:58.080 --> 00:13:02.420
I'm just gonna use, whoopsies, some of
those sweet auto, those code actions.

233
00:13:02.420 --> 00:13:04.040
Import it in, look at that.

234
00:13:04.040 --> 00:13:06.090
Now it says use shape rect.

235
00:13:06.090 --> 00:13:08.580
So right,
this one says include it in the build.

236
00:13:08.580 --> 00:13:10.880
This one says we're gonna use this one.

237
00:13:10.880 --> 00:13:15.620
So use shapes rect, there we go, we'll
do the same thing down here on circle.

238
00:13:15.620 --> 00:13:18.858
Import that one in,
I'm gonna hit Save and look at that,

239
00:13:18.858 --> 00:13:21.023
everything is fine we're building.

240
00:13:21.023 --> 00:13:23.256
&gt;&gt; This is just like the beginning.

241
00:13:23.256 --> 00:13:24.881
It's just like the takeoff ramp.

