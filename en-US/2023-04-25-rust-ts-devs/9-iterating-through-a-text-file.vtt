WEBVTT

1
00:00:00.250 --> 00:00:03.191
So kind of an iterator way of
thinking is that you have a type,

2
00:00:03.191 --> 00:00:05.169
you convert your type into an iterator.

3
00:00:05.169 --> 00:00:09.149
And then at the end of your iteration,
you convert it back into a type.

4
00:00:09.149 --> 00:00:11.920
It's kind of an important way of thinking,
because in JavaScript,

5
00:00:11.920 --> 00:00:13.120
you don't really do that.

6
00:00:13.120 --> 00:00:17.250
When you do array.map, you don't think
about what's actually happening.

7
00:00:17.250 --> 00:00:18.760
It's kinda doing this
all underneath the hood.

8
00:00:18.760 --> 00:00:24.134
Really what's happening in JavaScript is,
it iterates over the collection,

9
00:00:24.134 --> 00:00:28.316
calls your function and
does the collect all in the same call.

10
00:00:28.316 --> 00:00:31.710
We could write map pretty easily,
it wouldn't be very hard to write map.

11
00:00:31.710 --> 00:00:32.510
You can see how that works.

12
00:00:32.510 --> 00:00:36.357
So, really, this is just more fine grained
control of when these things happen,

13
00:00:36.357 --> 00:00:37.840
that's all it is.

14
00:00:37.840 --> 00:00:40.350
Now we're gonna do a simple exercise.

15
00:00:40.350 --> 00:00:43.219
Let's create a file called
lines in our project, and

16
00:00:43.219 --> 00:00:45.480
I want you to grab these ones right here.

17
00:00:45.480 --> 00:00:47.250
Okay, I'm gonna copy this.

18
00:00:47.250 --> 00:00:51.741
It's Hello, front end masters,
how 123 are you?

19
00:00:53.844 --> 00:00:56.460
We're gonna use this kind
of throughout our time.

20
00:00:56.460 --> 00:00:57.650
I'll have it highlighted for a second.

21
00:00:57.650 --> 00:00:59.451
I'll let you guys type it in.

22
00:01:02.704 --> 00:01:05.933
Remember, the act of typing and
doing is really good for you.

23
00:01:05.933 --> 00:01:09.608
If you have the website, it'll be
a lot easier cuz you can just copy and

24
00:01:09.608 --> 00:01:10.994
paste it really quickly.

25
00:01:10.994 --> 00:01:12.920
All right, I'm gonna jump over and
put it in right now.

26
00:01:12.920 --> 00:01:14.510
So I'm gonna go in here.

27
00:01:14.510 --> 00:01:18.410
And in the top level, I'm gonna create
lines and I'm just gonna paste it in,

28
00:01:18.410 --> 00:01:19.400
there we go.

29
00:01:19.400 --> 00:01:21.274
Hello fem how are you?

30
00:01:21.274 --> 00:01:22.500
With 123 in the middle.

31
00:01:22.500 --> 00:01:25.956
So what I want you to do is,
I want you to read this file lines, and

32
00:01:25.956 --> 00:01:29.930
I want you to print out each line
individually, starting in TypeScript.

33
00:01:31.660 --> 00:01:34.215
I think you all probably
can do that mildly easy.

34
00:01:34.215 --> 00:01:36.280
If you're familiar enough with Node,
it's pretty straightforward.

35
00:01:36.280 --> 00:01:40.949
If you're not, you're gonna need to import
fs and read file sync probably easily,

36
00:01:40.949 --> 00:01:42.078
easy enough to use.

37
00:01:45.225 --> 00:01:49.062
So I assume everyone had enough time to
do this TypeScript, so let's go in here.

38
00:01:49.062 --> 00:01:51.639
I'm gonna jump in here, and
I'm gonna jump over to my TypeScript file.

39
00:01:51.639 --> 00:01:54.363
I'm gonna read in the file and
I'm gonna do exactly what I said,

40
00:01:54.363 --> 00:01:55.930
I'm gonna print out each line.

41
00:01:55.930 --> 00:01:57.165
So I'm gonna do something like this.

42
00:01:57.165 --> 00:02:03.800
Import, my goodness, import fs from "fs".

43
00:02:03.800 --> 00:02:09.970
Const data = fs.readFile,
we'll just use Sync, there we go.

44
00:02:09.970 --> 00:02:11.400
And I'll say ("lines").

45
00:02:12.600 --> 00:02:18.119
And let's call toSTring and
split on the new line.

46
00:02:19.799 --> 00:02:21.862
There's actually a reason
why I'm doing this.

47
00:02:21.862 --> 00:02:22.624
Yeah, I forget.

48
00:02:22.624 --> 00:02:26.260
TypeScript, let's say, when you have
the dot on that side, there we go.

49
00:02:26.260 --> 00:02:27.910
So, there we go, we've created our data.

50
00:02:27.910 --> 00:02:29.690
That's every single line in our file.

51
00:02:29.690 --> 00:02:36.379
And then I can just go,
let's see, .forEach, that way.

52
00:02:36.379 --> 00:02:40.569
And of course, that will take in a line
and then I can console.log (line).

53
00:02:41.726 --> 00:02:44.900
There we go, and
we don't need that, beautiful.

54
00:02:44.900 --> 00:02:48.930
So we read our file, we create it
into a string cuz it's a buffer.

55
00:02:48.930 --> 00:02:51.460
If you don't know,
Node writes it out as a buffer.

56
00:02:51.460 --> 00:02:54.080
We create it into a string or
splitting into a new line.

57
00:02:54.080 --> 00:02:56.410
And then we're forEach
over every single line.

58
00:02:56.410 --> 00:02:57.780
That makes sense, right?

59
00:02:57.780 --> 00:03:02.380
So I'm gonna go over here and
I'm gonna jump in here and go npx ts-node.

60
00:03:02.380 --> 00:03:05.510
Just make sure I actually did it and
we should see.

61
00:03:05.510 --> 00:03:09.440
Hello fem how 123 are you, awesome.

62
00:03:09.440 --> 00:03:09.960
So there we go.

63
00:03:09.960 --> 00:03:12.050
We've now written this in TypeScript.

64
00:03:12.050 --> 00:03:15.340
Hopefully, everyone got this,
it's pretty straightforward.

65
00:03:15.340 --> 00:03:16.620
Nothing too tricky going on here.

66
00:03:16.620 --> 00:03:18.392
I think everyone could probably,
in their head,

67
00:03:18.392 --> 00:03:20.280
think about how all these functions work.

68
00:03:20.280 --> 00:03:23.101
Maybe other than two string on a buffer,
that's something.

69
00:03:23.101 --> 00:03:26.214
Something magical is happening
underneath the hood in v8 langth,

70
00:03:26.214 --> 00:03:30.153
creating references and boxed values and
garbage collection and all that fun stuff.

71
00:03:30.153 --> 00:03:31.700
But you pretty much get it.

72
00:03:31.700 --> 00:03:34.490
So we're gonna do the same thing
except this time, look at that,

73
00:03:34.490 --> 00:03:37.149
I even wrote almost the identical
same code except for file C.

74
00:03:37.149 --> 00:03:40.070
I did that, dang ding it, all right?

75
00:03:40.070 --> 00:03:43.575
So let's do the exact same thing in Rust.

76
00:03:46.116 --> 00:03:47.760
Should be pretty easy, right?

77
00:03:47.760 --> 00:03:49.785
All right, so
I'm gonna walk you through this.

78
00:03:49.785 --> 00:03:52.079
We're gonna do it together
one step at a time.

79
00:03:52.079 --> 00:03:56.590
Cuz it's gonna introduce a couple
values that were not used to say.

80
00:03:56.590 --> 00:03:58.282
So let's go over to our Rust file.

81
00:03:58.282 --> 00:04:01.124
You can delete the contents,
everything in there, dcl fast,

82
00:04:01.124 --> 00:04:03.600
I deleted that, then by the way,
if you didn't know.

83
00:04:03.600 --> 00:04:05.830
So let's first get our file.

84
00:04:05.830 --> 00:04:13.140
So I'm gonna like this, let file = std::,
that's the standard library, fs.

85
00:04:13.140 --> 00:04:14.910
It's named the same as Node.

86
00:04:14.910 --> 00:04:17.590
And then, ::read_to_string.

87
00:04:17.590 --> 00:04:21.690
And let's pass in lines,
exact same named file, there we go.

88
00:04:21.690 --> 00:04:24.510
Now, unfortunately,
we haven't quite covered it yet.

89
00:04:24.510 --> 00:04:27.210
This is a result of string error.

90
00:04:27.210 --> 00:04:28.380
Why is it a result?

91
00:04:28.380 --> 00:04:30.541
Why could this error?

92
00:04:30.541 --> 00:04:32.303
&gt;&gt; File might not exist?

93
00:04:32.303 --> 00:04:33.416
&gt;&gt; Boom, file might not exist.

94
00:04:33.416 --> 00:04:35.390
There could be an error
with the operating system.

95
00:04:35.390 --> 00:04:37.330
Something just has.

96
00:04:37.330 --> 00:04:39.897
Shit happens in your code,
that's what happens, okay?

97
00:04:39.897 --> 00:04:43.920
Life's, it's never 100% guaranteed
even if we have the file.

98
00:04:43.920 --> 00:04:46.686
So I'm gonna go this,
unwrap, sorry, for cursing,

99
00:04:46.686 --> 00:04:48.440
it just felt the right word for it.

100
00:04:48.440 --> 00:04:48.940
So there we go.

101
00:04:48.940 --> 00:04:50.570
I'm just gonna call then wrap.

102
00:04:50.570 --> 00:04:54.289
Our program will explode if it doesn't
exist, but hey, this is a toy program,

103
00:04:54.289 --> 00:04:55.690
unwrap's fine, remember?

104
00:04:55.690 --> 00:04:57.830
All right, so there we go,
we have the string.

105
00:04:57.830 --> 00:05:03.380
So now we can go like this, file.lines().

106
00:05:03.380 --> 00:05:05.367
So that's effectively the same thing as,

107
00:05:05.367 --> 00:05:09.075
a split a little different in how it
operates, but it's almost the same thing.

108
00:05:09.075 --> 00:05:13.275
It creates an iterator for us,
and now I can do .for_each.

109
00:05:13.275 --> 00:05:17.235
So this will allow me to go over every
single line and I can print it out.

110
00:05:17.235 --> 00:05:22.510
Now again, we use our closure syntax,
which is gonna be, bar our variable

111
00:05:22.510 --> 00:05:27.472
name bar, and I can go println,
two little squirrely braces, line.

112
00:05:28.902 --> 00:05:29.782
And there we go.

113
00:05:29.782 --> 00:05:36.692
We've now gone over our file,
split it into lines and for each turn.

114
00:05:36.692 --> 00:05:40.192
Now these are exceptionally
different how they behave but

115
00:05:40.192 --> 00:05:42.340
the end result is the same.

116
00:05:42.340 --> 00:05:44.520
And we're gonna go over why they're so
different here in a moment.

117
00:05:44.520 --> 00:05:48.070
And hopefully, I can show you
why iterators are so magical.

118
00:05:48.070 --> 00:05:49.770
Cuz they are really, really cool.

119
00:05:49.770 --> 00:05:54.740
They just, it's hard to explain.

120
00:05:54.740 --> 00:05:57.730
Again, remember, the goal of this course
is to be as practical as possible.

121
00:05:57.730 --> 00:06:00.725
So we're really just trying
to get you guys to use Rust,

122
00:06:00.725 --> 00:06:03.850
not to learn everything
possible about Rust.

123
00:06:03.850 --> 00:06:04.480
All right, so there we go.

124
00:06:04.480 --> 00:06:07.390
So if I go cargo run,
I should see the same thing.

125
00:06:07.390 --> 00:06:10.230
Hello fem how 123 are you, fantastic.

126
00:06:11.870 --> 00:06:15.224
All right, let's go back here and
so complete code.

127
00:06:15.224 --> 00:06:17.200
My goodness, identical.

128
00:06:17.200 --> 00:06:19.580
So, now let's do this.

129
00:06:19.580 --> 00:06:23.620
Every other line, I want you guys to
implement every other line in TypeScript.

130
00:06:23.620 --> 00:06:24.852
That's what I want you to print.

131
00:06:29.444 --> 00:06:33.029
So here, I'm gonna do it,
I'm gonna jump over to TypeScript and

132
00:06:33.029 --> 00:06:34.995
I'm gonna add in a filter, right?

133
00:06:34.995 --> 00:06:36.805
Cuz that's effectively
how you would do it.

134
00:06:36.805 --> 00:06:40.029
I'd have to take x and
I wanna filter not on x, not on the line,

135
00:06:40.029 --> 00:06:42.965
I'll just call that an underscore,
but on the index.

136
00:06:42.965 --> 00:06:44.653
I wanna take every other line.

137
00:06:44.653 --> 00:06:48.025
So we're gonna take the index and
I'm gonna go i modulo 2 = 0,

138
00:06:48.025 --> 00:06:51.680
three equals cuz that's the language
we use, and there we go.

139
00:06:51.680 --> 00:06:54.260
We're now printing every other line.

140
00:06:54.260 --> 00:06:57.490
Hopefully, everyone kinda got that,
first try, straightforward.

141
00:06:57.490 --> 00:06:59.035
And now we'll do that old npx,

142
00:06:59.035 --> 00:07:02.210
run it, and you'll see that
I printed every other line.

143
00:07:02.210 --> 00:07:05.900
Hello how 2 are, awesome.

144
00:07:05.900 --> 00:07:07.770
So let's do the exact same thing in Rust.

145
00:07:07.770 --> 00:07:10.250
So let's,
let me proceed this thing right here.

146
00:07:10.250 --> 00:07:13.355
So there you go, complete code,
identical again, I'm a genius.

147
00:07:13.355 --> 00:07:15.954
All right,
we'll do the exact same thing in Rust, but

148
00:07:15.954 --> 00:07:18.740
we need to use enumerate
cuz we need the indices.

149
00:07:18.740 --> 00:07:20.840
And then we can use filter.

150
00:07:20.840 --> 00:07:21.810
So let's do that now.

151
00:07:21.810 --> 00:07:24.400
I'll walk you through it at the same time.

152
00:07:24.400 --> 00:07:26.910
So, remember, lines is an iterator.

153
00:07:26.910 --> 00:07:31.177
If you were to look at this, it would tell
you about how you now have an iterator,

154
00:07:31.177 --> 00:07:32.440
fantastic.

155
00:07:32.440 --> 00:07:34.790
So I'm gonna do this, .enumerate.

156
00:07:34.790 --> 00:07:37.850
This will now give me every single index.

157
00:07:37.850 --> 00:07:40.740
Okay, then I'm gonna do a filter.

158
00:07:40.740 --> 00:07:43.800
And let's go,
we're gonna pattern match this out.

159
00:07:43.800 --> 00:07:47.670
So I'm gonna say, hey, I know this is
a tuple coming in cuz I'm using enumerate.

160
00:07:47.670 --> 00:07:50.085
So index is the first value.

161
00:07:50.085 --> 00:07:53.295
And then we don't care about the line
cuz the line doesn't matter what's

162
00:07:53.295 --> 00:07:54.060
on the line.

163
00:07:54.060 --> 00:07:55.780
So we're just gonna put
underscore right here.

164
00:07:55.780 --> 00:07:58.704
If you don't put underscore, Rust will
warn you that you have an unused variable.

165
00:07:58.704 --> 00:08:03.677
So underscores denote to it that anything
that starts with an underscore means that

166
00:08:03.677 --> 00:08:06.000
it's okay not to be used.

167
00:08:06.000 --> 00:08:08.420
So we'll just put an underscore
right there, another bar.

168
00:08:08.420 --> 00:08:10.480
And you can check its
types if you want to.

169
00:08:10.480 --> 00:08:14.620
Hover over index, you'll see it's
a reference to usize, which is, of course,

170
00:08:14.620 --> 00:08:15.460
the enumerate.

171
00:08:15.460 --> 00:08:18.080
And if you'll hover over this one,
it's a reference to string.

172
00:08:18.080 --> 00:08:19.920
Okay, that makes sense.

173
00:08:19.920 --> 00:08:20.930
Or it's a str.

174
00:08:20.930 --> 00:08:22.754
Technically, it's not a reference
to a string, it's a str,

175
00:08:22.754 --> 00:08:23.690
they're slightly different.

176
00:08:23.690 --> 00:08:25.910
There's a good reason why, blah,
blah, blah, we'll get there.

177
00:08:25.910 --> 00:08:30.425
All right, if idx modulo 2 = 0,
we're good, we're gonna print this out.

178
00:08:30.425 --> 00:08:33.690
Uh-oh, we have an error,
let's look at the error.

179
00:08:33.690 --> 00:08:35.973
The errors are really good in Rust.

180
00:08:35.973 --> 00:08:41.314
Look what it says, a tuple of usize &amp;str
doesn't implement the display trait,

181
00:08:41.314 --> 00:08:44.700
therefore, we can't display it this way.

182
00:08:44.700 --> 00:08:48.840
So you can try pretty printing it
with the man having a pipe symbol.

183
00:08:48.840 --> 00:08:52.480
I don't, I still don't have a good
name for it, or we need to convert it.

184
00:08:52.480 --> 00:08:57.253
So what I'm gonna do is, I'm gonna like
this, I could do .1 for the line cuz,

185
00:08:57.253 --> 00:09:00.341
remember, the index is first and
then the string.

186
00:09:00.341 --> 00:09:03.402
Or I could pattern match it out and
go, well,

187
00:09:03.402 --> 00:09:06.957
I don't care about the index,
I just want the line.

188
00:09:06.957 --> 00:09:10.327
And there we go,
I am now printing out every other line.

189
00:09:10.327 --> 00:09:16.697
Cuz remember, enumerate creates a tuple,
index, your original type.

190
00:09:16.697 --> 00:09:20.487
So if we go into here and
we run cargo, same output.

191
00:09:20.487 --> 00:09:22.096
We're geniuses, all of us.

