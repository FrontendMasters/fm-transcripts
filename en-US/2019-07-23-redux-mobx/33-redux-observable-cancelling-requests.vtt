WEBVTT

1
00:00:07.532 --> 00:00:11.069
&gt;&gt; Steve Kinney: So I added some
purposefully entropy into the API,

2
00:00:11.069 --> 00:00:13.051
you can kind of see it there.

3
00:00:13.051 --> 00:00:17.503
You saw a flash of other characters for
the L when I had already typed the U.

4
00:00:17.503 --> 00:00:22.253
And basically all I did on the server
side was I said, before you respond,

5
00:00:22.253 --> 00:00:26.864
set a timeout between somewhere
between one and zero seconds, right?

6
00:00:26.864 --> 00:00:30.620
So like the APIs intentionally flaky,
right?

7
00:00:30.620 --> 00:00:34.578
You're response will come back either
a second for now or ten seconds from now.

8
00:00:34.578 --> 00:00:38.508
So it's hard to, because it's
randomness and stuff like that,

9
00:00:38.508 --> 00:00:40.303
it's hard to see all the way.

10
00:00:40.303 --> 00:00:42.097
But we saw it as a flash there.

11
00:00:42.097 --> 00:00:43.425
Yeah, you saw it again.

12
00:00:43.425 --> 00:00:44.600
You saw all of them.

13
00:00:44.600 --> 00:00:50.022
Then you saw a bunch of them again,
and it's really, really kind of wonky.

14
00:00:50.022 --> 00:00:52.955
Yeah, this is simulating
a bad network condition.

15
00:00:52.955 --> 00:00:55.796
But this could happen on
your very well meaning APIs.

16
00:00:55.796 --> 00:00:58.276
You do not control your client devices.

17
00:00:58.276 --> 00:01:04.164
So what if we wanted to do this,
where we could cancel we

18
00:01:04.164 --> 00:01:09.552
could cancel a,
like handling any of this stuff.

19
00:01:09.552 --> 00:01:14.020
Don't transform it, because all of
the fetch characters will fire but

20
00:01:14.020 --> 00:01:18.860
the epic is in control of whether or
not you take that fetch character action,

21
00:01:18.860 --> 00:01:21.854
and morph it into a fetch
character fulfilled.

22
00:01:21.854 --> 00:01:25.000
And so you can be like,
hey, stream, hey RXJS.

23
00:01:25.000 --> 00:01:29.121
Listen, if this other thing happens,
just never map it.

24
00:01:29.121 --> 00:01:31.066
Which means Redux will never get it,

25
00:01:31.066 --> 00:01:35.101
which means you can effectively cancel
API requests, which is super cool.

26
00:01:35.101 --> 00:01:39.940
It does have a little bit more complexity
to it, but I think it's manageable.

27
00:01:43.288 --> 00:01:46.716
&gt;&gt; Steve Kinney: Right, and this is
why we chose to go this route, right?

28
00:01:46.716 --> 00:01:48.954
Does it make onboarding a little longer?

29
00:01:48.954 --> 00:01:51.531
Yeah, it does.
Do I think it adds stability of we're not

30
00:01:51.531 --> 00:01:55.039
trying to figure out all these
edge cases ourselves, absolutely.

31
00:01:55.039 --> 00:02:01.528
So we've got this map, we can also
pipe it through another one, right?

32
00:02:01.528 --> 00:02:05.698
Which is gonna be called,
takeUntil, right?

33
00:02:05.698 --> 00:02:07.942
So keep taking these actions, right,

34
00:02:07.942 --> 00:02:11.412
keep basically allowing things
to come through the stream.

35
00:02:11.412 --> 00:02:17.245
Keep reading from the stream
until something happens, right?

36
00:02:17.245 --> 00:02:21.351
So we can say takeUntil and
we'll takeUntil,

37
00:02:21.351 --> 00:02:25.782
hook into that stream again
of all of the actions.

38
00:02:25.782 --> 00:02:30.140
So we're going to,
every time a fetch characters comes in,

39
00:02:30.140 --> 00:02:35.016
we're going to take those,
we're going to find the AJAX request.

40
00:02:35.016 --> 00:02:39.195
And we're going to wait for the AJAX
request to come back until something

41
00:02:39.195 --> 00:02:41.398
happens where that should cancel it.

42
00:02:41.398 --> 00:02:45.926
So, on a FETCH_CHARACTERS,
here's what we're going to do.

43
00:02:45.926 --> 00:02:51.083
Start the stream, read them, fire the AJAX
request, but if another FETCH_CHARACTERS

44
00:02:51.083 --> 00:02:55.291
comes through before the first one
is fulfilled, cancel the first one.

45
00:02:55.291 --> 00:02:59.552
Cancel that one,
the new one is the one we want.

46
00:02:59.552 --> 00:03:03.968
The most recent thing in that input
field is what we want to have, right?

47
00:03:03.968 --> 00:03:06.325
So we'll kind of pipe through
all the actions again.

48
00:03:06.325 --> 00:03:08.966
And this is where that merge map helps,
right?

49
00:03:08.966 --> 00:03:11.049
This will all become one flat stream.

50
00:03:11.049 --> 00:03:16.436
So I'm just gonna do that tap that you
saw before, I'm gonna move it down here.

51
00:03:18.145 --> 00:03:19.062
&gt;&gt; Steve Kinney: Nope.

52
00:03:24.469 --> 00:03:25.773
&gt;&gt; Steve Kinney: So
we'll be able to see it.

53
00:03:29.954 --> 00:03:33.574
&gt;&gt; Steve Kinney: And then we'll say,

54
00:03:33.574 --> 00:03:38.610
of type FETCH_CHARACTERS.

55
00:03:38.610 --> 00:03:41.317
And put a comma at the end there.

56
00:03:41.317 --> 00:03:43.482
All right,
looks a little bit intimidating,

57
00:03:43.482 --> 00:03:46.214
but I think if we read through
one more time, it will help.

58
00:03:46.214 --> 00:03:50.620
Anytime, and
actually comes in fetch characters,

59
00:03:50.620 --> 00:03:57.542
those that were console logging, take
that individual action and get some JSON.

60
00:03:57.542 --> 00:04:02.749
When the JSON comes back, take that
response and fire off, morph into our new,

61
00:04:02.749 --> 00:04:06.883
hey, we got the characters,
right, and Redux will get that.

62
00:04:06.883 --> 00:04:13.967
And this stream of the AJAX,
any event that comes in, eat them, right?

63
00:04:13.967 --> 00:04:16.200
Because we're hoping to
hear back from the API,

64
00:04:16.200 --> 00:04:18.874
unless another one of
FETCH_CHARACTERS comes through.

65
00:04:18.874 --> 00:04:24.459
Then stop this kind of middle
internal stream, right?

66
00:04:24.459 --> 00:04:28.816
So like even if the API request comes
back, you're like, yeah, we're done.

67
00:04:28.816 --> 00:04:29.742
We closed the door.

68
00:04:29.742 --> 00:04:30.782
Last call is over.

69
00:04:30.782 --> 00:04:33.368
A new autocomplete has come in.

70
00:04:33.368 --> 00:04:37.937
We're not dealing with this current stream
anymore, but thank you for your interest.

71
00:04:37.937 --> 00:04:39.467
So let's try it out.

72
00:04:45.713 --> 00:04:48.642
&gt;&gt; Steve Kinney: Right, and so you can
see that we're not getting that kind of

73
00:04:48.642 --> 00:04:50.891
intermediary, we're only getting one set.

74
00:04:50.891 --> 00:04:55.238
It's still slightly delayed cuz
of that purposeful entropy,

75
00:04:55.238 --> 00:04:57.214
the ten second ones are bad.

76
00:04:57.214 --> 00:05:00.036
Right, but you're not getting
those flashes of other content.

77
00:05:00.036 --> 00:05:04.662
Because if more characters were typed, we
are cancelling all of the other listeners

78
00:05:04.662 --> 00:05:07.019
for the previous characters, all right?

79
00:05:07.019 --> 00:05:10.955
So some really powerful stuff that
you can do with redux-observable.

80
00:05:10.955 --> 00:05:16.387
The cost of course is,
you're not getting through this

81
00:05:16.387 --> 00:05:21.365
without reading some
documentation [LAUGH] right?

82
00:05:21.365 --> 00:05:25.981
And like this is all RXJS,
the redux-observable part is simply

83
00:05:25.981 --> 00:05:30.349
the epic and the idea that
you're running that middleware.

84
00:05:30.349 --> 00:05:34.476
And it's taking all those actions and
passing it into an RXJS stream.

85
00:05:34.476 --> 00:05:37.831
So it definitely,
if you see value in this,

86
00:05:37.831 --> 00:05:43.475
if you see value again there are,
hundreds of might be an overstatement.

87
00:05:43.475 --> 00:05:46.983
But let's just assume if you
ever use like low dash or

88
00:05:46.983 --> 00:05:51.688
underscore there are about as many
helper functions in RXJS to do stuff

89
00:05:51.688 --> 00:05:56.013
with async as there are with
local low dash underscore, right?

90
00:05:56.013 --> 00:05:59.687
And so a lot of this is if you feel
like you're going to need to do

91
00:05:59.687 --> 00:06:03.661
complicated stuff, and the bar for
complicated Is not very high.

92
00:06:03.661 --> 00:06:09.993
Cancelling the autocomplete, it's not an
insane request, right to get from product.

93
00:06:09.993 --> 00:06:13.346
But it is absolutely that trade off.

94
00:06:13.346 --> 00:06:16.872
So Redux itself doesn't
deal with async at all,

95
00:06:16.872 --> 00:06:20.485
but a middleware can handle that for
you, right?

96
00:06:20.485 --> 00:06:23.430
And theoretically, there's like
a Redux promise library as well.

97
00:06:23.430 --> 00:06:29.057
You could hypothetically write your
own middleware that does this, right?

98
00:06:29.057 --> 00:06:32.024
We saw that you can get the state,
you can pass along in the next action,

99
00:06:32.024 --> 00:06:33.621
you can fire off additional actions.

100
00:06:33.621 --> 00:06:35.460
A lot of this is really cool.

101
00:06:35.460 --> 00:06:38.058
We have chosen redux-observable.

102
00:06:38.058 --> 00:06:43.177
There was a little bit of complaining
at first, right, cuz, yeah.

103
00:06:43.177 --> 00:06:47.693
It was like, this is complicated, but
I think at this point, we're all on board,

104
00:06:47.693 --> 00:06:48.608
we're into it.

105
00:06:48.608 --> 00:06:55.045
And we're happy with our decision,
even one year into this code base.

106
00:06:55.045 --> 00:07:00.786
So I highly recommend it,
but let's not sugarcoat it.

107
00:07:00.786 --> 00:07:03.044
I think once you wrap your head around it,
it makes sense but

108
00:07:03.044 --> 00:07:05.722
like don't feel like you have to use
it for a very simple application.

109
00:07:05.722 --> 00:07:09.903
Awesome, so-
&gt;&gt; Speaker 2: What are some of the main

110
00:07:09.903 --> 00:07:14.169
RXGS functions that you found
to be valuable at this point?

111
00:07:14.169 --> 00:07:15.937
&gt;&gt; Steve Kinney: Yeah,
so for us a lot of it.

112
00:07:15.937 --> 00:07:19.496
The reason I chose this example of a
cancellation is like that is the main one

113
00:07:19.496 --> 00:07:21.318
for us and a little bit of debouncing.

114
00:07:21.318 --> 00:07:26.301
Right, maybe I don't wanna,
let them type a little bit, [LAUGH] right?

115
00:07:26.301 --> 00:07:30.750
Let them type a little bit before I fire
off the search request, debouncing so

116
00:07:30.750 --> 00:07:32.537
I'm not slamming the server.

117
00:07:32.537 --> 00:07:37.570
And the ability to cancel,
right, one that is in flight.

118
00:07:37.570 --> 00:07:38.769
Those are kinda the main ones.

119
00:07:38.769 --> 00:07:42.185
I'm gonna be really honest,
we use those into great effect but

120
00:07:42.185 --> 00:07:44.898
we do not do incredibly
complicated stuff right?

121
00:07:44.898 --> 00:07:47.197
We needed those features
we knew we need we.

122
00:07:47.197 --> 00:07:52.201
The nice part about rebuilding the core
part of a product is you kind of

123
00:07:52.201 --> 00:07:57.395
already know the problems that you're
going to have to solve, right?

124
00:07:57.395 --> 00:08:02.717
So we knew that we're gonna be drop downs,
so we were gonna have to pull up.

125
00:08:02.717 --> 00:08:06.508
So when you go to send an email, you can
have many lists of contacts or segments.

126
00:08:06.508 --> 00:08:11.839
But the average user has maybe
like what five, ten, okay?

127
00:08:11.839 --> 00:08:15.789
I'm not gonna drop any names, right, but

128
00:08:15.789 --> 00:08:22.507
we have some very large clients who
have hundreds of thousands of lists.

129
00:08:22.507 --> 00:08:26.628
And so that drop down would become
untenable [LAUGH] right, and

130
00:08:26.628 --> 00:08:29.489
they're absolutely gonna be searching.

131
00:08:29.489 --> 00:08:32.449
So we already have an existing
customer base, and

132
00:08:32.449 --> 00:08:37.030
having some at scale we knew some of the
problems that we were gonna have to deal

133
00:08:37.030 --> 00:08:39.575
with which is why we
walked down this road.

134
00:08:39.575 --> 00:08:42.777
But I would say we're still
using just some very basic ones.

135
00:08:42.777 --> 00:08:47.042
RXJS is not meant necessarily only for
AJAX either, it can be doing all sorts of,

136
00:08:47.042 --> 00:08:51.075
you can listen to mouse cursor events,
you can build a game with it, right?

137
00:08:51.075 --> 00:08:54.699
And there is usually some kind of
reactive programming library for

138
00:08:54.699 --> 00:08:57.491
every programming language,
like Swift has one.

139
00:08:57.491 --> 00:09:00.929
I kinda said at the beginning
of this course,

140
00:09:00.929 --> 00:09:06.178
we're talking about giving libraries but
some of this is approaches

141
00:09:06.178 --> 00:09:11.258
to programming that is totally
separate from React or from Redux.

142
00:09:11.258 --> 00:09:14.069
And so,
reactive programming is a thing, right?

143
00:09:14.069 --> 00:09:16.796
It's used, there's a Java library for it.

144
00:09:16.796 --> 00:09:21.822
And so, if you find yourself needing
to deal with a stream of events,

145
00:09:21.822 --> 00:09:24.431
then I think you can find use for it.

146
00:09:24.431 --> 00:09:31.194
But if you squint at this one long enough,
it begins to make sense, right?

147
00:09:31.194 --> 00:09:33.175
And I might abstract it.

148
00:09:33.175 --> 00:09:37.589
I might say you could create a function
that is the action that comes in

149
00:09:37.589 --> 00:09:41.621
an endpoint and the action that
should come out the other end and

150
00:09:41.621 --> 00:09:43.694
use that function everywhere.

151
00:09:43.694 --> 00:09:49.395
I'm a big fan of making helper functions
like to the point of ridiculousness right?

152
00:09:49.395 --> 00:09:52.342
Cuz every function that you
make that's a helper function,

153
00:09:52.342 --> 00:09:54.025
you have to give it a name, right?

154
00:09:54.025 --> 00:09:59.915
And you're kind of like, I am not of
the man, your code be self documenting.

155
00:09:59.915 --> 00:10:03.542
That's great if you can do it but
it's obviously a little bit easier

156
00:10:03.542 --> 00:10:08.136
said than done, a good comment sometimes
is appreciated or documentation, right?

157
00:10:08.136 --> 00:10:11.687
But if you pull it on the helper
functions, I think it's super helpful.

158
00:10:11.687 --> 00:10:16.119
So we're gonna actually kind of
look at a totally different way of

159
00:10:16.119 --> 00:10:20.965
managing state in React application and
look at a library called mobx.

