WEBVTT

1
00:00:00.430 --> 00:00:02.450
&gt;&gt; Steve Kinney: We've got
the action creator in place.

2
00:00:02.450 --> 00:00:05.690
We do need to, right now we're
just console logging it and

3
00:00:05.690 --> 00:00:06.989
we can give that a shot.

4
00:00:06.989 --> 00:00:09.231
Let's see if it knows node-sass
decided to play along.

5
00:00:13.451 --> 00:00:13.951
&gt;&gt; Steve Kinney: Cool.

6
00:00:16.615 --> 00:00:18.922
&gt;&gt; Steve Kinney: So
right now this is console logging.

7
00:00:18.922 --> 00:00:22.911
All right, we did all the waiting for
the promise to resolve and

8
00:00:22.911 --> 00:00:25.707
then we solved that with
just a console log.

9
00:00:25.707 --> 00:00:27.562
But you can see we got the tweets.

10
00:00:27.562 --> 00:00:31.332
So now we just need to
dispatch the actual action.

11
00:00:31.332 --> 00:00:34.501
And when that happens,
then we'll be able to update the page.

12
00:00:41.027 --> 00:00:45.582
&gt;&gt; Steve Kinney: So we'll go to Actions,
and we'll say hey, you know what?

13
00:00:45.582 --> 00:00:46.816
We've got this dispatch.

14
00:00:48.716 --> 00:00:50.699
&gt;&gt; Steve Kinney: What we can do is
we'll make another action creator.

15
00:00:50.699 --> 00:00:54.628
We'll say, actually,
let's go to the top real quick.

16
00:00:58.239 --> 00:01:01.723
&gt;&gt; Steve Kinney: ADD_TWEETS,
or UPDATE_TWEETS, or

17
00:01:01.723 --> 00:01:04.366
whatever you want to call it.

18
00:01:04.366 --> 00:01:08.146
We'll add those tweets,
we'll make another action creator,

19
00:01:08.146 --> 00:01:11.030
which is the regular one
we expect out of Redux.

20
00:01:11.030 --> 00:01:15.479
So we'll say, addTweets,
that's going to be tweets.

21
00:01:17.220 --> 00:01:23.920
And it will just return a new object
that will be the type: ADD_TWEETS,

22
00:01:23.920 --> 00:01:27.540
and the payload will be the tweets.

23
00:01:27.540 --> 00:01:28.900
It's like a payload of tweets.

24
00:01:30.010 --> 00:01:33.330
Man, 20-20 hindsight,
that should have been a meme generator.

25
00:01:33.330 --> 00:01:34.700
And this should have
fetched a bunch of memes.

26
00:01:34.700 --> 00:01:37.410
There should've been a payload of memes,
cuz who doesn't want a payload of memes?

27
00:01:37.410 --> 00:01:40.665
All right, so instead of counsel logging,
we're just gonna dispatch and

28
00:01:40.665 --> 00:01:43.454
this is exactly how we would
have done it in a math props or

29
00:01:43.454 --> 00:01:46.190
anything along those lines,
it's no different.

30
00:01:46.190 --> 00:01:50.230
Cuz like I said, we and
WIN stuff are made by the same people.

31
00:01:52.160 --> 00:01:57.460
We'll add the tweets with
the response dot tweets.

32
00:01:57.460 --> 00:01:59.830
There's some other things in there,
I think I included the search term and

33
00:01:59.830 --> 00:02:01.740
the API and a few other things.

34
00:02:01.740 --> 00:02:08.520
So the map dispatched to props is gonna
trigger that fetch tweets action creator,

35
00:02:08.520 --> 00:02:11.720
which is actually gonna dispatch
a function that is gonna go ahead and

36
00:02:11.720 --> 00:02:14.480
basically wait for the promise to resolve.

37
00:02:14.480 --> 00:02:17.640
And when all that is done, then we'll
dispatch the one that Redux can actually

38
00:02:17.640 --> 00:02:21.690
handle, just a regular old object
that we would have had, right.

39
00:02:21.690 --> 00:02:23.700
So it's basically an intermediary step.

40
00:02:23.700 --> 00:02:26.360
Hey, go do this quote unquote side effect.

41
00:02:26.360 --> 00:02:29.840
Get me the API results and
then we'll take it for a spin.

42
00:02:29.840 --> 00:02:32.550
The problem we have is that none
of this exists in the reducer.

43
00:02:32.550 --> 00:02:35.511
All right, we just [LAUGH],
cool, an action up and neat,

44
00:02:35.511 --> 00:02:38.809
here's the thing tweets again,
we'll just say action type.

45
00:02:44.158 --> 00:02:45.571
&gt;&gt; Steve Kinney: Tweets are auto import,

46
00:02:45.571 --> 00:02:49.007
which is my literal favorite
feature in Visual Studio Code.

47
00:02:49.007 --> 00:02:55.026
And then we'll just return
the action.payload.tweets,

48
00:02:55.026 --> 00:02:57.862
a payload of tweets, cool.

49
00:03:01.792 --> 00:03:04.690
&gt;&gt; Steve Kinney: Fetch them,
there they are, right?

50
00:03:04.690 --> 00:03:06.930
We hid the API, we updated redux.

51
00:03:06.930 --> 00:03:10.390
Everything was great and wonderful.

52
00:03:13.490 --> 00:03:15.820
Cool, and that's effectively it.

53
00:03:15.820 --> 00:03:19.360
Now there are things that we could do.

54
00:03:19.360 --> 00:03:21.080
You, and
I'm not gonna take this all the way,

55
00:03:21.080 --> 00:03:24.420
I'm just gonna kinda
show you a little bit.

56
00:03:24.420 --> 00:03:28.860
The kind of interesting thing and
in the first version of the fire base and

57
00:03:28.860 --> 00:03:33.930
reactor cores, we actually used redux
thunk and hooked into Firebase,

58
00:03:33.930 --> 00:03:38.020
which will kind of send you like websocket
notifications of the data changes.

59
00:03:38.020 --> 00:03:40.950
The really cool thing that I have
noticed you can do with Redux thunk,

60
00:03:40.950 --> 00:03:44.700
and it's probably only
somewhat recommended,

61
00:03:44.700 --> 00:03:48.330
is you can dispatch multiple actions,
right.

62
00:03:48.330 --> 00:03:52.810
So we can, for instance,
we can create a new

63
00:03:52.810 --> 00:03:58.434
action that sets the status to loading,
right?

64
00:03:58.434 --> 00:04:01.690
And then, there's nothing stopping
us from dispatching that.

65
00:04:01.690 --> 00:04:03.960
You can call dispatch as
many times as you want.

66
00:04:07.018 --> 00:04:11.655
&gt;&gt; Steve Kinney: So there, we'll dispatch
this set status to loading, right.

67
00:04:11.655 --> 00:04:14.472
And then we might have another
one upon dispatching a tweet,

68
00:04:14.472 --> 00:04:15.670
so we might take it down.

69
00:04:15.670 --> 00:04:19.340
We could catch the promise and
dispatch another error.

70
00:04:19.340 --> 00:04:22.800
The problem here is that you're kind of on
the hook for doing all of these, right?

71
00:04:22.800 --> 00:04:28.340
You can dispatch multiple times and
your redux store can like, all right?

72
00:04:28.340 --> 00:04:33.330
We fire the loading event as soon as
we get ready to make the AJAX call,

73
00:04:33.330 --> 00:04:36.390
that updates the UI in some way,
shape, or form.

74
00:04:36.390 --> 00:04:39.740
Maybe it disables the button from
the user clicking it again, right?

75
00:04:39.740 --> 00:04:41.870
There's all sorts of stuff
you can do here, and

76
00:04:41.870 --> 00:04:44.560
then we hear back, we can dispatch
the fact that we got the tweets.

77
00:04:44.560 --> 00:04:49.350
If the promise fails, right, we can catch
that and we can go ahead and say, okay,

78
00:04:49.350 --> 00:04:51.730
it didn't work, and set an error status.

79
00:04:51.730 --> 00:04:56.280
You can dispatch multiple times in here,
and kind of begin to figure some of this

80
00:04:56.280 --> 00:05:01.090
out yourself,
which is a pretty cool way of doing it.

81
00:05:01.090 --> 00:05:04.684
I'll leave that kind of as an exercise for
the reader.

82
00:05:04.684 --> 00:05:09.709
Now, I kind of hinted that
this is not a silver bullet,

83
00:05:09.709 --> 00:05:13.110
there are some issues here, right?

84
00:05:13.110 --> 00:05:14.880
You are on the hook for doing everything.

85
00:05:17.070 --> 00:05:23.530
One of the fun parts about working at a
company that's major product is its API is

86
00:05:23.530 --> 00:05:28.670
that sometimes, we have APIs that weren't
necessarily intended for frontends, right?

87
00:05:28.670 --> 00:05:33.060
And so to get all of the data
that I need to display UI,

88
00:05:33.060 --> 00:05:39.670
I have to get stuff from three or
four different APIs, all right.

89
00:05:39.670 --> 00:05:42.070
We saw stuff with with canceling,
so on and so forth.

90
00:05:42.070 --> 00:05:45.098
There's a lot of stuff that you're
kind of on the hook to do yourself,

91
00:05:45.098 --> 00:05:50.550
at which point,
it is definitely worth thinking about.

92
00:05:50.550 --> 00:05:53.330
There are some other
drawbacks here as well.

93
00:05:55.484 --> 00:06:00.050
For example, what are you gonna do
if you need to test this, right?

94
00:06:01.930 --> 00:06:03.780
You can't separate.

95
00:06:03.780 --> 00:06:07.330
You're dispatching this
function that you can't cancel.

96
00:06:07.330 --> 00:06:10.840
And you're gonna have to do something
like this if you wanna test it,

97
00:06:10.840 --> 00:06:14.896
which is you're gonna have to use a fetch
mocking library that's gonna mock out

98
00:06:14.896 --> 00:06:16.730
the fetch API to give you some data.

99
00:06:16.730 --> 00:06:24.883
Because you can't separate the dispatching
of that function from the execution of it.

100
00:06:24.883 --> 00:06:29.153
So you have a button that has an action
creator that maybe wants to do a thing,

101
00:06:29.153 --> 00:06:32.160
it's kind of harder to test, right?

102
00:06:32.160 --> 00:06:35.460
There are a bunch of
libraries that kind of

103
00:06:35.460 --> 00:06:40.620
separate out all of your async
stuff from the rest of Redux.

104
00:06:40.620 --> 00:06:43.940
Now Redux still has a lot going for
it in so far that it's simple.

105
00:06:43.940 --> 00:06:47.390
But that simplicity puts you on the hook,
like as I've said.

106
00:06:47.390 --> 00:06:51.550
So there's a few libraries that we can use
to kind of make this a little bit easier.

107
00:06:54.640 --> 00:06:59.142
And last time we went to
the advanced state management

108
00:06:59.142 --> 00:07:02.952
version of this course, we used Red-Saga.

109
00:07:02.952 --> 00:07:05.350
And Redux-Saga is great.

110
00:07:05.350 --> 00:07:09.390
This time around, we're gonna talk
a little bit about Redux-Observable.

111
00:07:09.390 --> 00:07:14.950
They are basically two versions
of the same idea, right?

112
00:07:14.950 --> 00:07:18.430
So we have that kind of reference material
if you're really interested in Redux-Saga.

113
00:07:18.430 --> 00:07:21.990
The reason I chose to do Redux-Observable
for this version of the course

114
00:07:21.990 --> 00:07:24.769
is predominantly because
it's the one that we use.

115
00:07:25.840 --> 00:07:32.778
All right, I thought, better off speaking
to some of the intricacies of that one.

116
00:07:32.778 --> 00:07:36.179
At the time, we were still, last time
we did this, we were still kind of

117
00:07:36.179 --> 00:07:39.491
evaluating, we were using Redux-Saga for
some smaller projects.

118
00:07:39.491 --> 00:07:42.697
But the large application we use,
uses Redux observable

