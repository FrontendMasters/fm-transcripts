WEBVTT

1
00:00:00.160 --> 00:00:01.600
&gt;&gt; Steve Kinney: So there's one of them.

2
00:00:01.600 --> 00:00:05.757
We've got 20% of Redux we
understand already, killing it.

3
00:00:05.757 --> 00:00:06.314
Neat.
So

4
00:00:06.314 --> 00:00:12.150
anyone wanna venture a wild
guess at what createStore does?

5
00:00:14.920 --> 00:00:16.991
&gt;&gt; Steve Kinney: It's one of those
things with a correct answer,

6
00:00:16.991 --> 00:00:18.209
it's just using the words.

7
00:00:19.280 --> 00:00:20.960
It creates a store, great.

8
00:00:20.960 --> 00:00:23.038
And so, then what is a store?

9
00:00:23.038 --> 00:00:27.448
A store is effectively
our ability to manage

10
00:00:27.448 --> 00:00:31.750
the state of our application, right?

11
00:00:31.750 --> 00:00:33.500
It's the current state of the world and

12
00:00:33.500 --> 00:00:36.550
the ability to dispatch
actions to change that state.

13
00:00:38.340 --> 00:00:39.630
Things will go poorly.

14
00:00:39.630 --> 00:00:42.580
You're like cool, I'm just gonna call
create store, it's gonna go great, right?

15
00:00:43.750 --> 00:00:45.439
It will not, it will blow up.

16
00:00:45.439 --> 00:00:47.960
And we'll talk about why in a second.

17
00:00:49.500 --> 00:00:52.744
Go ahead and run it,
just to see the error, right?

18
00:00:52.744 --> 00:00:53.512
This is a helpful error.

19
00:00:53.512 --> 00:00:56.830
Expected the reducer to be a function,
right?

20
00:00:56.830 --> 00:00:59.750
And so it takes one argument,
which is a function.

21
00:00:59.750 --> 00:01:02.850
And that's that reducer function we
saw on the diagram earlier, right?

22
00:01:02.850 --> 00:01:05.883
And so if I just give it a function,
it'll technically be happy with that.

23
00:01:10.490 --> 00:01:12.440
&gt;&gt; Steve Kinney: I've got to clear that.

24
00:01:12.440 --> 00:01:14.990
Cool.
It doesn't blow up anymore.

25
00:01:14.990 --> 00:01:16.670
So this is our reducer function.

26
00:01:16.670 --> 00:01:18.767
A reducer function is supposed
to take two arguments.

27
00:01:18.767 --> 00:01:23.136
The current state of the world and
the thing that happened.

28
00:01:23.136 --> 00:01:27.120
And it should spit out
a new state of the world.

29
00:01:27.120 --> 00:01:29.790
So let's go ahead and
let's make a reducer.

30
00:01:32.690 --> 00:01:36.030
Let's get the first argument state and
the second one, which is some action.

31
00:01:38.800 --> 00:01:42.860
All right, and then we'll start by
just returning the state back out.

32
00:01:42.860 --> 00:01:45.540
So this point like any action
that comes through, totally fine.

33
00:01:46.800 --> 00:01:51.690
We'll just leave the state of
the world unchanged, which is cool.

34
00:01:51.690 --> 00:01:55.991
And so here we'll say const

35
00:01:55.991 --> 00:02:00.480
store equals createStore.

36
00:02:03.120 --> 00:02:05.330
&gt;&gt; Steve Kinney: And
give it that reducer function.

37
00:02:05.330 --> 00:02:08.330
And now hopefully nothing blows up, sweet.

38
00:02:08.330 --> 00:02:11.057
Right so now we have a store, right?

39
00:02:11.057 --> 00:02:15.536
&gt;&gt; Steve Kinney: Let's see
what that's got on it.

40
00:02:15.536 --> 00:02:17.855
That was bad.

41
00:02:22.360 --> 00:02:26.080
&gt;&gt; Steve Kinney: Cool, so we'll say,
what are the keys on this?

42
00:02:29.140 --> 00:02:30.280
&gt;&gt; Steve Kinney: So this has got a few.

43
00:02:30.280 --> 00:02:36.620
It's got dispatch, subscribe,
getState, and replaceReducer.

44
00:02:36.620 --> 00:02:41.270
All right, like, let's, replaceReducer,
pretty straightforward.

45
00:02:41.270 --> 00:02:44.510
You give it a new function,
it replaces the reducer.

46
00:02:44.510 --> 00:02:46.960
Super useful for code splitting, right?

47
00:02:46.960 --> 00:02:51.421
You can basically, as a user navigates to
a new part of the app, you can then load

48
00:02:51.421 --> 00:02:56.600
another, maybe reducer that has that extra
piece to it and replace the one in there.

49
00:02:56.600 --> 00:02:58.230
But we'll keep that one separate.

50
00:02:58.230 --> 00:03:00.050
That one's pretty self-explanatory.

51
00:03:00.050 --> 00:03:01.020
There's dispatch.

52
00:03:01.020 --> 00:03:04.880
Remember, we said we dispatch
actions to change the state.

53
00:03:04.880 --> 00:03:07.720
That's gonna be really important.

54
00:03:07.720 --> 00:03:13.170
Get state, another one of those that
basically does what it says on the tin.

55
00:03:13.170 --> 00:03:14.480
Right?
It will get you

56
00:03:14.480 --> 00:03:16.250
the current state of the world.

57
00:03:16.250 --> 00:03:20.860
And then also this subscribe basically

58
00:03:21.860 --> 00:03:26.430
fires an event every time the state
of the world changes, right?

59
00:03:26.430 --> 00:03:27.330
Why is this useful?

60
00:03:27.330 --> 00:03:31.350
Imagine you're building a client
side app in React, right.

61
00:03:31.350 --> 00:03:34.760
And you want to,
every time the store changes,

62
00:03:34.760 --> 00:03:39.020
update the UI of your React application,
right.

63
00:03:39.020 --> 00:03:41.525
Subscribe seems like
a great way to do that.

64
00:03:41.525 --> 00:03:45.042
Now there's a library called React-Redux
which basically handles all of

65
00:03:45.042 --> 00:03:45.720
this for you.

66
00:03:45.720 --> 00:03:49.834
But to show you that none of
this is like sorcery, right,

67
00:03:49.834 --> 00:03:53.880
it's all just basic, pure,
regular old JavaScript.

68
00:03:53.880 --> 00:03:58.880
You could probably rewrite your own
implementation of Redux in an afternoon.

69
00:03:58.880 --> 00:04:02.080
You shouldn't,
because there is one, right,

70
00:04:02.080 --> 00:04:07.754
that has been battle tested and had bug
fixes and edge cases, but you could.

71
00:04:07.754 --> 00:04:10.778
All right, so let's go ahead and
we'll give it kind of,

72
00:04:10.778 --> 00:04:16.510
we'll give it our initial state of the
world, just like an empty object, right?

73
00:04:16.510 --> 00:04:20.170
And so we'll have that as
a default property in there.

74
00:04:20.170 --> 00:04:24.440
And so what we'll go ahead and do is
we'll actually make that store again.

75
00:04:28.020 --> 00:04:30.080
&gt;&gt; Steve Kinney: Give
us a little space here.

76
00:04:30.080 --> 00:04:31.190
createStore.

77
00:04:37.290 --> 00:04:38.390
&gt;&gt; Steve Kinney: And
we'll give it that reducer.

78
00:04:42.042 --> 00:04:43.860
&gt;&gt; Steve Kinney: And we'll say.

79
00:04:49.910 --> 00:04:53.110
&gt;&gt; Steve Kinney: Give it
a default value of 1, right.

80
00:04:53.110 --> 00:04:56.113
And what happens if we do?

81
00:04:56.113 --> 00:04:59.246
We'll run this code, clear it out.

82
00:04:59.246 --> 00:05:02.358
And we'll say store.getState.

83
00:05:02.358 --> 00:05:09.040
You get an object with that value out,
right, great.

84
00:05:09.040 --> 00:05:13.972
This would theoretically be the props that
we pass into all the components in a React

85
00:05:13.972 --> 00:05:16.400
application and React does its thing.

86
00:05:16.400 --> 00:05:18.780
There'll be no like setting state or
anything like that.

87
00:05:18.780 --> 00:05:21.060
All of the state is held in Redux,
pass it through.

