WEBVTT

1
00:00:01.650 --> 00:00:06.174
&gt;&gt; Steve Kinney: Hello, so
we're gonna talk about Redux MobX.

2
00:00:06.174 --> 00:00:07.730
And it's gonna be great.

3
00:00:07.730 --> 00:00:11.820
Both of these are libraries
that help us manage state

4
00:00:11.820 --> 00:00:14.900
in sophisticated react applications.

5
00:00:14.900 --> 00:00:18.210
Like we act as a bunch of really
great ways to manage state but

6
00:00:18.210 --> 00:00:21.290
these are like kinda
alternate solutions and yeah,

7
00:00:21.290 --> 00:00:24.740
there are additional libraries above and
beyond plain old react but

8
00:00:24.740 --> 00:00:29.740
I would argue that they bring some
of their own benefit to the table.

9
00:00:29.740 --> 00:00:34.152
So throughout this course, we'll be
able to kind of see how they're used.

10
00:00:34.152 --> 00:00:38.930
See haw to kinda extend them and kind of
like evaluate the merits and tradeoffs and

11
00:00:38.930 --> 00:00:39.849
I think we'll be really cool.

12
00:00:40.890 --> 00:00:46.764
My name is Steve and I am a Senior
Principal Engineer at Twilio SendGrid,

13
00:00:46.764 --> 00:00:48.510
which is a mouthful.

14
00:00:48.510 --> 00:00:54.030
And I work primarily on our drag and
drop email editor.

15
00:00:54.030 --> 00:00:55.470
I'll show you in a second.

16
00:00:55.470 --> 00:01:00.959
We're gonna talk a little bit
about managing state today,

17
00:01:00.959 --> 00:01:05.241
which for me,
it's definitely the trickiest

18
00:01:05.241 --> 00:01:10.199
part of any kind of large
client-side application.

19
00:01:10.199 --> 00:01:13.829
I think, at certain times the jQuery
would get made fun of turning

20
00:01:13.829 --> 00:01:16.740
into spaghetti code, and
stuff along those lines.

21
00:01:16.740 --> 00:01:19.234
It's usually cuz you're storing
all your states in the dump and

22
00:01:19.234 --> 00:01:21.463
keeping your head around that
became really difficult.

23
00:01:21.463 --> 00:01:25.783
And so, it argued that what makes
a code base unmaintainable and

24
00:01:25.783 --> 00:01:30.590
hard to iterate on is when you
get state management wrong.

25
00:01:30.590 --> 00:01:35.010
And so I think that there's great value
in to thinking through these things,

26
00:01:35.010 --> 00:01:37.400
we'll talk a little bit more about that.

27
00:01:37.400 --> 00:01:40.743
We're gonna start at the very basics and
work our way up,

28
00:01:40.743 --> 00:01:43.050
and I feel really strongly about this.

29
00:01:44.390 --> 00:01:48.860
Prior to working at Twilio SendGrid, I
was Director of the front end engineering

30
00:01:48.860 --> 00:01:51.210
program at the Turing School
of Software and Design.

31
00:01:51.210 --> 00:01:53.090
And we started the front end program.

32
00:01:53.090 --> 00:01:55.570
Originally it was a rails
development training program.

33
00:01:55.570 --> 00:01:59.320
And then we also built
their front end program.

34
00:01:59.320 --> 00:02:04.570
And I got to teach a lot of React and
then Redux.

35
00:02:04.570 --> 00:02:07.824
And I made a lot of
mistakes teaching Redux.

36
00:02:07.824 --> 00:02:11.380
And I think they're really
common mistakes, which is one,

37
00:02:11.380 --> 00:02:14.250
trying to teach Redux and
React at the same time.

38
00:02:14.250 --> 00:02:16.579
Cuz not only does Redux
have a lot of concepts,

39
00:02:16.579 --> 00:02:19.250
Redux is actually incredibly simple.

40
00:02:19.250 --> 00:02:20.160
Go like, yeah, cool.

41
00:02:21.330 --> 00:02:25.390
I promise you, like under the hood
is actually incredibly simple and

42
00:02:25.390 --> 00:02:29.740
the React Redux library also simple but
when you try to learn the both like

43
00:02:29.740 --> 00:02:34.100
simultaneously along with like Just
all the other learning curve of React.

44
00:02:34.100 --> 00:02:36.640
It just becomes a little bit too much and
frustrating.

45
00:02:36.640 --> 00:02:42.016
So what we'll do is we'll look at
Redux completely agnostic of React.

46
00:02:42.016 --> 00:02:44.207
Redux and React are a common pairing but

47
00:02:44.207 --> 00:02:47.490
there's no particular
reason why they have to be.

48
00:02:47.490 --> 00:02:51.910
You can use Redux in an Ember and
Angular app if you want to.

49
00:02:51.910 --> 00:02:55.808
So we look at the library like
completely separate from react,

50
00:02:55.808 --> 00:02:58.389
then we will actually hook it up to react.

51
00:02:58.389 --> 00:03:03.177
And we'll talk about how the way
you structure your state manages,

52
00:03:03.177 --> 00:03:07.630
matters probably,
arguably more than whatever library is.

53
00:03:07.630 --> 00:03:11.560
And for a lot of this, like when we talk
about the normalizing estate, like how to

54
00:03:11.560 --> 00:03:15.530
normalize your status structure, the data
structure, even if you decide, hey, I'm

55
00:03:15.530 --> 00:03:21.420
not gonna use Redux, I'm just gonna use
pure React, a lot of that still applies.

56
00:03:21.420 --> 00:03:24.190
A lot of this is just how,
it's a strategy for

57
00:03:24.190 --> 00:03:26.710
structuring a state in a client's
application that again,

58
00:03:26.710 --> 00:03:31.980
is effectively library or framework
agnostic and a good idea most of the time.

59
00:03:31.980 --> 00:03:36.750
And then we'll talk a little bit
about how the way we manage state

60
00:03:36.750 --> 00:03:40.890
can negatively impact your performance and
how to go about fixing that.

61
00:03:42.490 --> 00:03:45.680
We'll talk a little bit about middleware
kind of in the beginning when we're

62
00:03:45.680 --> 00:03:47.852
exploring Redux, and
we'll use some middleware.

63
00:03:47.852 --> 00:03:50.081
We'll try it 1,2,3 Redux dunk,

64
00:03:50.081 --> 00:03:54.060
Redux itself doesn't have any way
of managing asynchronous code.

65
00:03:55.450 --> 00:03:56.680
So we have to use middleware for that.

66
00:03:56.680 --> 00:03:59.321
So we use once Redux thunk.

67
00:03:59.321 --> 00:04:04.179
We will kind of crack open
the doors of Redux observable or

68
00:04:04.179 --> 00:04:07.520
Redux observable is Redux bindings for

69
00:04:07.520 --> 00:04:11.680
RXJS which is like a topic in and
of itself.

70
00:04:11.680 --> 00:04:16.547
So we'll kind of like learn just
enough RXJS to be dangerous.

71
00:04:16.547 --> 00:04:20.111
But that is definitely like
an avenue of further exploration.

72
00:04:20.111 --> 00:04:23.768
And then we're actually gonna look at
a completely different library called MobX

73
00:04:23.768 --> 00:04:26.427
which takes some of these
reactive programming concepts.

74
00:04:26.427 --> 00:04:30.561
And then strangely like reactive
programing with a lot to think about like

75
00:04:30.561 --> 00:04:34.628
functional programing kinda ties it
in to a very like more traditional,

76
00:04:34.628 --> 00:04:38.162
like object oriented way of
thinking about our state and like,

77
00:04:38.162 --> 00:04:40.780
is incredibly like powerful and
convenient.

78
00:04:40.780 --> 00:04:44.010
I think a really cool way to like think
about state differently than what

79
00:04:44.010 --> 00:04:46.130
we normally think about
in the react paradigm.

80
00:04:47.640 --> 00:04:49.820
So I guess that like.

81
00:04:49.820 --> 00:04:55.087
One of the reasons I think this
managing state is really important

82
00:04:55.087 --> 00:05:01.530
is because doing a massive refactor of
this later on is like fraught with peril.

83
00:05:01.530 --> 00:05:04.390
The bugs that you could
introduce like it's

84
00:05:04.390 --> 00:05:05.930
a fundamental shift in your application.

85
00:05:05.930 --> 00:05:11.860
So thinking about it and making some
really great like decisions around it,

86
00:05:11.860 --> 00:05:14.410
like benefit you like long term for
the maintainability of your app for

87
00:05:14.410 --> 00:05:16.770
the performance of your app,
everything along those lines.

88
00:05:16.770 --> 00:05:20.205
And like, effectively if your
code is maintainable and

89
00:05:20.205 --> 00:05:24.221
it's easy to shoot new features,
that tends to make you happy and

90
00:05:24.221 --> 00:05:29.211
if [LAUGH] every ticket you come across on
like the good old JIRA board is terrible.

91
00:05:29.211 --> 00:05:31.980
It starts to like weigh on your like soul.

92
00:05:31.980 --> 00:05:34.830
So having good state management,
you just get code out the door quickly

93
00:05:36.550 --> 00:05:39.560
inspires joy, which means you
don't have to throw it out.

94
00:05:40.820 --> 00:05:41.340
Cool.

95
00:05:41.340 --> 00:05:46.200
So like I said, we dealt with this
a little bit where we're still kind

96
00:05:46.200 --> 00:05:51.370
of in production right now, but
soon to be deprecated in about a month,

97
00:05:51.370 --> 00:05:58.340
version of our application was kind of,
I mean this as nicely as possible.

98
00:05:58.340 --> 00:06:01.700
It was for the kinda small team that
started out on it in the beginning,

99
00:06:01.700 --> 00:06:05.640
their very first react application, and

100
00:06:05.640 --> 00:06:10.430
as it was explained to me when I started,
we use the flux pattern but

101
00:06:10.430 --> 00:06:12.880
not really cuz we didn't really
understand the flux pattern.

102
00:06:12.880 --> 00:06:14.150
So it's flux like.

103
00:06:15.560 --> 00:06:18.950
And we had some major architecture
shifts on the back end,

104
00:06:18.950 --> 00:06:22.620
which meant that we had to like completely
overhaul the front end application.

105
00:06:22.620 --> 00:06:26.514
But it was also at the point where
shipping relatively easy things,

106
00:06:26.514 --> 00:06:28.836
you'd touch one part of the code base and

107
00:06:28.836 --> 00:06:31.582
something would pop out
weird on the other end.

108
00:06:31.582 --> 00:06:35.080
And it was getting really hard to
confidently ship new features.

109
00:06:36.670 --> 00:06:40.310
So along with a larger kind of change
in how we were approaching stuff,

110
00:06:40.310 --> 00:06:45.580
we kinda took the time to think really
deeply about the state of our application.

111
00:06:45.580 --> 00:06:51.740
Like, this sounds very,
like big tech company-ish.

112
00:06:51.740 --> 00:06:54.270
But we had meetings about how
we're gonna structure our state.

113
00:06:55.570 --> 00:06:57.994
And like, I don't regret
a single one of those meetings.

114
00:06:57.994 --> 00:07:02.156
I think right now, I think one of things
I'm really proud of is that a brand new

115
00:07:02.156 --> 00:07:04.974
kind of junior developer on
our team can ship code and

116
00:07:04.974 --> 00:07:06.914
be productive in their first week.

117
00:07:06.914 --> 00:07:11.690
And can get up to speed even though we do
use some like Redux is pretty standard.

118
00:07:11.690 --> 00:07:15.190
Redux observable a little
bit more like wild.

119
00:07:15.190 --> 00:07:18.577
But we can get people to
productive very quickly, and

120
00:07:18.577 --> 00:07:23.633
we're constantly ahead o schedule which
is typically not a thing in software.

121
00:07:23.633 --> 00:07:27.776
And so it's really interesting for
me to see how some poor decisions that we

122
00:07:27.776 --> 00:07:32.315
made the first time around flowed us down
like we were walking through molasses and

123
00:07:32.315 --> 00:07:37.690
good decisions the second time around made
us over incredibly productive and fast.

124
00:07:37.690 --> 00:07:41.420
So we'll kinda talk about some of
those approaches in this course.

125
00:07:41.420 --> 00:07:46.227
We're not gonna cover too much of React
itself but it is impossible to talk about

126
00:07:46.227 --> 00:07:50.389
state management libraries that
plug into React without touching,

127
00:07:50.389 --> 00:07:52.339
there's some amount of react.

128
00:07:52.339 --> 00:07:54.023
And there are things we'll talk about,
like,

129
00:07:54.023 --> 00:07:55.380
does everything need to go and Redux?

130
00:07:55.380 --> 00:07:56.850
Does everything need to go on MobX?

131
00:07:56.850 --> 00:07:58.180
My argument is no.

132
00:07:58.180 --> 00:08:01.170
So we'll kind of like explore
those boundaries a little bit.

133
00:08:01.170 --> 00:08:02.860
We'll talk about Redux.

134
00:08:02.860 --> 00:08:06.090
And we'll look at, Redux is really great.

135
00:08:06.090 --> 00:08:08.710
I like greatly enjoy it for
managing state.

136
00:08:08.710 --> 00:08:12.610
But one thing that Redux is not bring to
the table at all is any ability to make

137
00:08:12.610 --> 00:08:17.190
API calls or any kind of like
side effects, which is a thing.

138
00:08:17.190 --> 00:08:20.130
So we're gonna need to use some kinda
middleware in order to do that.

139
00:08:20.130 --> 00:08:21.860
Redux thunk does not have a logo.

140
00:08:21.860 --> 00:08:24.793
So I've just made them one.

141
00:08:24.793 --> 00:08:26.080
You're welcome, everyone.

142
00:08:27.750 --> 00:08:29.910
Then there is Redux observable.

143
00:08:31.120 --> 00:08:32.539
It's three ducks.

144
00:08:34.360 --> 00:08:40.170
Yeah, the one on the website
spins which is also really cool.

145
00:08:40.170 --> 00:08:42.790
And finally, we will look at my books.

146
00:08:42.790 --> 00:08:46.180
So we're gonna build a few different
applications to kind of get our hands

147
00:08:46.180 --> 00:08:49.420
dirty and kind of actually be
able to exploit these libraries.

148
00:08:49.420 --> 00:08:52.722
One is just like the kinda basic counter.

149
00:08:52.722 --> 00:08:56.180
I think it's really good for like,
seeing some of the concepts in isolation.

150
00:08:56.180 --> 00:08:59.520
We'll build a conbon board,
which has got enough complexity.

151
00:08:59.520 --> 00:09:02.650
We'll hopefully see Redux
shine a little bit.

152
00:09:02.650 --> 00:09:06.494
And I'll give us enough cases where like,
we do do needless rerenders and

153
00:09:06.494 --> 00:09:08.859
need to fix them and
stuff along those lines.

154
00:09:08.859 --> 00:09:13.549
And then we'll have a kind of simple
app which is effectively like if you

155
00:09:13.549 --> 00:09:18.085
tilt your head, it's a Kanban board
kinda now vertical instead that

156
00:09:18.085 --> 00:09:22.410
we'll use with MobX and
then we'll do some asynchronous calls.

157
00:09:22.410 --> 00:09:24.840
We will implement an auto-complete.

158
00:09:24.840 --> 00:09:27.510
First, we're doing Redux thunk and
that eventually in Redux observable,

159
00:09:27.510 --> 00:09:29.610
which will bring us some
really cool things,

160
00:09:29.610 --> 00:09:33.250
like the ability to cancel an AJAX
request, like, okay, cool.

161
00:09:33.250 --> 00:09:34.850
They typed another character.

162
00:09:34.850 --> 00:09:37.457
I don't care about the network request for

163
00:09:37.457 --> 00:09:40.583
the first thing I only care
about the second thing.

164
00:09:40.583 --> 00:09:43.844
In the server itself, we'll add some
entropy in there, which is like,

165
00:09:43.844 --> 00:09:47.910
I'll randomly delay stuff so it gets all
weird and funky, and we'll see how like.

166
00:09:47.910 --> 00:09:49.530
Redux observable kinda cleans that up.

167
00:09:49.530 --> 00:09:54.465
And then we'll also like bring
in some like live tweets using

168
00:09:54.465 --> 00:09:56.988
Duncan observable, as well.

169
00:09:56.988 --> 00:10:01.679
What I wanna point out is that, yeah,
we're talking about a bunch of libraries

170
00:10:01.679 --> 00:10:04.970
in this course, but
it's not all about the libraries,

171
00:10:04.970 --> 00:10:08.612
because a lot of these concepts
like normalizing your state,

172
00:10:08.612 --> 00:10:12.816
immediately changing objects is
effectively like library agnostic,

173
00:10:12.816 --> 00:10:17.676
a new library could come out tomorrow and
a lot of these concepts will still apply.

174
00:10:17.676 --> 00:10:19.055
And so they'll come and go.

175
00:10:19.055 --> 00:10:22.000
I think at this point,
we are in somewhat of a steady state.

176
00:10:22.000 --> 00:10:27.470
We did the first version of this
course a year and a half ago,

177
00:10:27.470 --> 00:10:33.000
and most of the libraries are still
around and still popular.

178
00:10:33.000 --> 00:10:36.440
We use Redux, we use MobX,
so on and so forth, and

179
00:10:36.440 --> 00:10:40.360
like in the JavaScript world is nice
to see stuff stabilize a little bit and

180
00:10:40.360 --> 00:10:44.150
not have to like completely like,
all right, no more Marionette.

181
00:10:44.150 --> 00:10:46.000
We're switching to Angular one.

182
00:10:46.000 --> 00:10:47.700
All right, angular two is different.

183
00:10:47.700 --> 00:10:51.097
[LAUGH] All right, now, like,
we don't have to do that as much anymore,

184
00:10:51.097 --> 00:10:51.889
which is great.

185
00:10:52.940 --> 00:10:56.860
So these patterns and
approaches stick around.

186
00:10:56.860 --> 00:11:01.129
So my suspicion is a lot of these
libraries will still stick around for

187
00:11:01.129 --> 00:11:04.072
the long term but
I think that these patterns and

188
00:11:04.072 --> 00:11:08.610
approaches, for a lot of them,
are stolen from the 70s and 80s.

189
00:11:08.610 --> 00:11:12.110
[LAUGH] Which I think is really cool.

190
00:11:12.110 --> 00:11:16.060
And like new things will come along but,
yeah, my suspicion is that

191
00:11:16.060 --> 00:11:18.980
when we kinda figure out some of these
things will work out really well.

192
00:11:18.980 --> 00:11:21.856
So my goal is to help you
think about these patterns.

193
00:11:21.856 --> 00:11:23.900
And we'll do it in the context
of these libraries.

