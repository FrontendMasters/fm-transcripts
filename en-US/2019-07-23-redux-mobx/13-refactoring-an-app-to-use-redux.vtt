WEBVTT

1
00:00:00.120 --> 00:00:03.510
&gt;&gt; Steve Kinney: That was effectively,
at this point,

2
00:00:03.510 --> 00:00:08.800
we've learned really all
the methods of Redux, right?

3
00:00:08.800 --> 00:00:14.683
We've learned effectively the kind
of surface level depth of React and

4
00:00:14.683 --> 00:00:16.064
Redux, right?

5
00:00:16.064 --> 00:00:18.547
We've seen the provider,
we've seen Connect, right?

6
00:00:18.547 --> 00:00:22.605
We've seen we can have a nicer syntax for
mapDispatchToProps.

7
00:00:22.605 --> 00:00:27.519
If you don't need to pass any state,
let's say hypothetically, we had a new

8
00:00:27.519 --> 00:00:32.470
list input field where they're only
typing in the name of the new list.

9
00:00:32.470 --> 00:00:34.740
And then we're like,
dispatching that action to state.

10
00:00:34.740 --> 00:00:38.480
You can leave this as null for
the first argument.

11
00:00:38.480 --> 00:00:40.500
And only pass dispatch.

12
00:00:40.500 --> 00:00:42.300
If there's no actions
that need to happen and

13
00:00:42.300 --> 00:00:46.420
you only wanna display stuff, you can
just omit this one completely, right?

14
00:00:46.420 --> 00:00:48.090
Cuz like, to get to the second argument,

15
00:00:48.090 --> 00:00:50.070
you gotta pass null in
as the first argument.

16
00:00:50.070 --> 00:00:52.450
If you don't need to map
any DispatchToProps,

17
00:00:52.450 --> 00:00:54.990
you can omit it completely right?

18
00:00:54.990 --> 00:00:57.624
So we've got the kind of
surface level API for both.

19
00:00:57.624 --> 00:01:03.340
We're gonna spend a quick aside,
talking a little bit about when to and

20
00:01:03.340 --> 00:01:07.940
not to use Redux kind of
hold on to your state.

21
00:01:07.940 --> 00:01:11.250
And then we're gonna talk a little
bit about normalizing data, right?

22
00:01:11.250 --> 00:01:15.602
Which will solve some of the problems
that we had in the prequel to this course

23
00:01:15.602 --> 00:01:17.642
where we were trying to sit there and

24
00:01:17.642 --> 00:01:22.337
do a lot of destructuring objects to try
to replace them with immutable versions.

25
00:01:22.337 --> 00:01:25.081
And we're actually gonna write some
helpers to make that a little bit

26
00:01:25.081 --> 00:01:25.704
easier today.

27
00:01:25.704 --> 00:01:30.090
But first we'll talk a little bit
about when to and not to use it.

28
00:01:30.090 --> 00:01:32.331
So, Redux seems pretty great, so

29
00:01:32.331 --> 00:01:36.815
I've hopefully sold you on the idea
of passing in an entire object and

30
00:01:36.815 --> 00:01:41.245
getting a deterministic state
of your application, it's great.

31
00:01:41.245 --> 00:01:45.896
But a lot of times, we have to think about
the model state, the actual data in our

32
00:01:45.896 --> 00:01:50.080
application, and some input field
that we can afford to lose, right?

33
00:01:50.080 --> 00:01:52.200
Does that need to go through
the whole Redux flow,

34
00:01:52.200 --> 00:01:53.910
is a really good question, right?

35
00:01:53.910 --> 00:01:58.713
And there is an interesting blog
post from a few years ago by

36
00:01:58.713 --> 00:02:04.112
a gentleman named Dan Abramov,
called You Might Not Need Redux.

37
00:02:04.112 --> 00:02:08.443
You may remember him as coauthor of Redux.

38
00:02:08.443 --> 00:02:13.660
[LAUGH] Right, and thinking about like,
Redux adds some structure.

39
00:02:13.660 --> 00:02:18.280
Like I said, I'm a big fan, but it also
adds a certain layer of indirection and

40
00:02:18.280 --> 00:02:19.050
stuff along those lines.

41
00:02:19.050 --> 00:02:22.820
So here we could have something,
this is an input field for

42
00:02:22.820 --> 00:02:25.590
creating a new item,
which is your list, right?

43
00:02:25.590 --> 00:02:29.461
We can kinda keep it all in one component,
it's relatively simple.

44
00:02:29.461 --> 00:02:36.134
If we're kind of doing Redux right, and
kind of breaking stuff out into the files.

45
00:02:36.134 --> 00:02:39.619
It is likely now gonna be four
files to have like the input

46
00:02:39.619 --> 00:02:41.187
field on a new to do list.

47
00:02:41.187 --> 00:02:46.666
Now, in a small application,
I don't think that makes a lot of sense.

48
00:02:46.666 --> 00:02:48.010
But in a larger application,

49
00:02:48.010 --> 00:02:51.306
having a structure being able to break
stuff up might make a lot of sense.

50
00:02:51.306 --> 00:02:55.075
Especially when multiple components,
like the advantage of having,

51
00:02:55.075 --> 00:02:57.411
I can just keep it all
in that one component.

52
00:02:57.411 --> 00:03:00.562
You lose that advantage as
soon as you need that state or

53
00:03:00.562 --> 00:03:03.380
those actions in multiple components,
right?

54
00:03:03.380 --> 00:03:05.930
You end up having to either pass them
to the tree or along those lines.

55
00:03:05.930 --> 00:03:08.710
This point you can wrap any component
that needs a given piece of state for

56
00:03:08.710 --> 00:03:11.620
that Redux tree or a given action.

57
00:03:11.620 --> 00:03:13.750
You wrap that component in it.

58
00:03:13.750 --> 00:03:16.582
It can then modify the state that's
entirely separate from your component

59
00:03:16.582 --> 00:03:17.110
hierarchy.

60
00:03:17.110 --> 00:03:21.670
So, this.setState and
the useState React hook are simpler.

61
00:03:21.670 --> 00:03:22.220
And maybe for

62
00:03:22.220 --> 00:03:26.460
stuff that isn't needed by other
components, still the right choice, right?

63
00:03:26.460 --> 00:03:29.740
You don't have to go whole hog one or
the other.

64
00:03:29.740 --> 00:03:33.213
You can choose to like mix and
match where it's appropriate.

65
00:03:33.213 --> 00:03:37.855
At one point in our code base,
we were using regular,

66
00:03:37.855 --> 00:03:42.305
old React state, Redux,
as well as MobX, right?

67
00:03:42.305 --> 00:03:45.460
And I kind of like mixing and matching
all of them where appropriate, and

68
00:03:45.460 --> 00:03:48.270
those are all like things that
you can kind of combine together.

69
00:03:50.044 --> 00:03:54.360
All right, so we'll talk a little bit
about normalizing our data, right?

70
00:03:54.360 --> 00:03:55.506
And in the previous course,

71
00:03:55.506 --> 00:03:58.000
we struggled with it cuz our
data was not normalized, right?

72
00:03:58.000 --> 00:03:59.751
And what does it mean to normalize it?

73
00:03:59.751 --> 00:04:04.558
Basically trying to make sure that
we kind of separate everything out.

74
00:04:04.558 --> 00:04:08.588
And that we're able to like modify
just one thing without having like,

75
00:04:08.588 --> 00:04:12.012
if you like, a card is a child of
a list in a con bond board where

76
00:04:12.012 --> 00:04:14.200
it was what we're gonna work on.

77
00:04:14.200 --> 00:04:15.850
Then you have to like modify the list and

78
00:04:15.850 --> 00:04:18.430
replace the list if you're just
changing the name of a card.

79
00:04:19.840 --> 00:04:23.070
And you also don't want to be able,
you don't wanna like,

80
00:04:23.070 --> 00:04:28.820
think too much about
having to like find stuff.

81
00:04:28.820 --> 00:04:31.190
And so the kind of general
principles that we had before.

82
00:04:31.190 --> 00:04:32.630
And you don't want duplicated data.

83
00:04:32.630 --> 00:04:37.220
The general principles that we had before
are kind of prefer objects over arrays.

84
00:04:37.220 --> 00:04:39.480
And we'll actually have
a few arrays in here.

85
00:04:39.480 --> 00:04:42.520
But an object is way easier to access

86
00:04:42.520 --> 00:04:46.300
than if you need to get a given
particular item out of an array.

87
00:04:46.300 --> 00:04:49.303
You're effectively gonna have to iterate
to the entire array to find it, right?

88
00:04:49.303 --> 00:04:51.140
Are you the one with
the idea I'm looking for?

89
00:04:51.140 --> 00:04:54.380
Are you the one with the idea I'm
looking for, so on and so forth.

90
00:04:54.380 --> 00:04:59.170
If you use an object, you're able to say
hey, I need the one of this key, right?

91
00:04:59.170 --> 00:05:01.770
Where the key of the object is the IDs.

92
00:05:01.770 --> 00:05:05.860
And the values of the objects,
you can go find it like effectively like,

93
00:05:05.860 --> 00:05:09.060
no matter how big it grows,
you can find it immediately, right?

94
00:05:09.060 --> 00:05:11.359
I like to joke that for any kind of like,

95
00:05:11.359 --> 00:05:15.065
programming question at any of
the really big tech companies.

96
00:05:15.065 --> 00:05:17.177
They give you the code challenge and
interviews,

97
00:05:17.177 --> 00:05:20.160
the answers always like implemented
as a hash map or an object.

98
00:05:20.160 --> 00:05:22.960
That is always the answer,
every single time.

99
00:05:22.960 --> 00:05:23.820
So as a freebie for you.

100
00:05:23.820 --> 00:05:27.350
But it also makes sense cuz it's easy
to find a given object out of there.

101
00:05:27.350 --> 00:05:30.383
Do you need to remove it,
just remove that key from the object.

102
00:05:30.383 --> 00:05:33.100
You'd have to go and like filter
through everything, so on and so forth.

