WEBVTT

1
00:00:00.160 --> 00:00:07.235
&gt;&gt; Steve Kinney: So,
we've got now this bindActionCreators.

2
00:00:07.235 --> 00:00:11.133
BindActionCreators is an interesting one.

3
00:00:11.133 --> 00:00:17.924
It just basically helps you do
stuff a little bit more easily.

4
00:00:17.924 --> 00:00:23.436
And so you've probably heard the word
bind before in a function.prototype.bind.

5
00:00:23.436 --> 00:00:27.294
When we're binding, especially like in
a react application, where you're like I

6
00:00:27.294 --> 00:00:31.220
don't want to lose context of this so
you can return a new function.

7
00:00:31.220 --> 00:00:32.975
BindActionCreators, you'll notice that,

8
00:00:32.975 --> 00:00:35.070
we'll actually make
an action creator first.

9
00:00:37.620 --> 00:00:44.400
So we'll say for instance,
&gt;&gt; Steve Kinney: An addAction.

10
00:00:44.400 --> 00:00:50.160
Like we saw, we were just passing just
pure JavaScript objects in there and

11
00:00:50.160 --> 00:00:50.670
everything word.

12
00:00:50.670 --> 00:00:59.404
I told you earlier that
&gt;&gt; Steve Kinney: I

13
00:00:59.404 --> 00:01:03.450
told you earlier that effectively like
action traders are totally optional.

14
00:01:03.450 --> 00:01:05.160
I do recommend them using,

15
00:01:05.160 --> 00:01:09.470
recommend you using them which is,
let's say we wanted to add something

16
00:01:09.470 --> 00:01:13.580
multiple times that someone was hitting
the calculator buttons in our application.

17
00:01:13.580 --> 00:01:16.150
We would have to type this out every time.

18
00:01:17.500 --> 00:01:19.260
And I mean,
you've been watching me live code.

19
00:01:19.260 --> 00:01:20.480
I've clearly made typos.

20
00:01:20.480 --> 00:01:26.825
Doing this is tedious,
especially as this payload part grows.

21
00:01:26.825 --> 00:01:30.662
So we'll actually,
really this is even more complicated.

22
00:01:30.662 --> 00:01:33.000
Complicated is a strong word.

23
00:01:33.000 --> 00:01:33.840
It's a lot of typing.

24
00:01:36.050 --> 00:01:39.160
Do I want to do this every
time I wanna add a number?

25
00:01:39.160 --> 00:01:39.660
No.

26
00:01:41.050 --> 00:01:49.407
What I might do is,
&gt;&gt; Steve Kinney: createAddAction,

27
00:01:49.407 --> 00:01:53.260
I'm using those words to signify
that as an action creator.

28
00:01:53.260 --> 00:01:54.380
There's no actual rules.

29
00:01:54.380 --> 00:01:57.120
I probably won't use this in
like a larger application.

30
00:01:57.120 --> 00:02:01.190
But right now as we're getting
these concepts down, I can do that.

31
00:02:01.190 --> 00:02:06.631
And I can basically give it an amount,
&gt;&gt; Steve Kinney: And

32
00:02:06.631 --> 00:02:10.840
I can say, effectively take this.

33
00:02:19.053 --> 00:02:22.400
&gt;&gt; Steve Kinney: Put that amount there or
do the EX6 shorthand.

34
00:02:24.180 --> 00:02:28.900
Now, again, pure JavaScript function.

35
00:02:28.900 --> 00:02:34.750
Nothing special, all that it does
is it returns that object for us.

36
00:02:35.950 --> 00:02:39.651
There I've got some
indentation extra price there.

37
00:02:41.132 --> 00:02:42.810
&gt;&gt; Steve Kinney: There we go, all right.

38
00:02:42.810 --> 00:02:51.980
So now I can just say, createAddAction(4),
and I'm going to get the same object out.

39
00:02:51.980 --> 00:02:57.184
It's just basically
a shorthand to do this.

40
00:02:57.184 --> 00:03:01.903
Now, what you might find
is now having to say like.

41
00:03:06.185 --> 00:03:08.160
&gt;&gt; Steve Kinney: You
build your application.

42
00:03:08.160 --> 00:03:10.360
Writing to store.dispatch is hard.

43
00:03:10.360 --> 00:03:14.380
You're like hey I'm not making
these actions for funzies, right?

44
00:03:14.380 --> 00:03:17.410
Other than my unit tests if
I'm calling this function,

45
00:03:17.410 --> 00:03:18.748
I wanted to change the store.

46
00:03:18.748 --> 00:03:21.744
So what bindActionCreators does for

47
00:03:21.744 --> 00:03:27.120
you basically, it's again,
not actually redux related.

48
00:03:27.120 --> 00:03:30.847
It's an ability to kind of go in and

49
00:03:30.847 --> 00:03:36.740
effectively create a new
version of the function.

50
00:03:36.740 --> 00:03:42.841
So we'll say like, we'll call it like,
&gt;&gt; Steve Kinney: DispatchAdd and

51
00:03:42.841 --> 00:03:48.832
all we have to do at this point
is we'll say, bindActionCreator.

52
00:03:56.646 --> 00:04:02.102
&gt;&gt; Steve Kinney: Now, that's gonna return
a new version of this value comes in,

53
00:04:02.102 --> 00:04:04.952
object comes out that does this.

54
00:04:04.952 --> 00:04:08.284
So effectively

55
00:04:16.550 --> 00:04:20.500
&gt;&gt; Steve Kinney: These
two are exactly the same.

56
00:04:20.500 --> 00:04:24.890
It is just a helper function that allows
me to create a new version that now

57
00:04:24.890 --> 00:04:30.351
whenever I call dispatch.Add or
handled dispatch, they will both create

58
00:04:30.351 --> 00:04:36.290
the action, that object, and
dispatch it to the store.

59
00:04:36.290 --> 00:04:40.716
So now I just called this function, action
gets dispatched, the action goes in there

60
00:04:40.716 --> 00:04:44.420
with the current state of the world,
a new state of the world comes out.

61
00:04:46.070 --> 00:04:47.720
And we get everything in there.

62
00:04:48.830 --> 00:04:51.745
&gt;&gt; Student: Can you show me where
the first thing you're passing to

63
00:04:51.745 --> 00:04:54.000
bindActionCreators add,
where that's coming from?

64
00:04:55.870 --> 00:04:57.380
&gt;&gt; Steve Kinney: This should
be this createAddAction.

65
00:04:58.410 --> 00:05:00.710
&gt;&gt; Student: Okay?

66
00:05:00.710 --> 00:05:03.983
&gt;&gt; Steve Kinney: So it's this function,
take this function, call it and

67
00:05:03.983 --> 00:05:06.330
dispatch the result out.

68
00:05:06.330 --> 00:05:09.560
Will come through and it's basically
just hooking all this stuff up and

69
00:05:09.560 --> 00:05:11.030
plumbing it together.

70
00:05:11.030 --> 00:05:12.340
So really like,

71
00:05:12.340 --> 00:05:16.200
composes helper function by the action
creator is a helper function.

72
00:05:16.200 --> 00:05:23.530
And it's just yeah, combined reducers
it's just a helper function.

73
00:05:23.530 --> 00:05:26.800
You could write each of these
in JavaScript real fast.

74
00:05:26.800 --> 00:05:29.620
They are yeah and
obviously you can see that like.

75
00:05:29.620 --> 00:05:33.540
The one that we got out of Redux
has got a lot of error checking and

76
00:05:33.540 --> 00:05:35.590
stuff along those lines, totally useful.

77
00:05:35.590 --> 00:05:39.080
Don't write your own, use the ones
that come with the library, but

78
00:05:39.080 --> 00:05:43.280
they are effectively just
regular old JavaScript helpers.

79
00:05:43.280 --> 00:05:45.780
And the store is simply an event emitter.

80
00:05:45.780 --> 00:05:50.470
It's the ability to get the current state
out of there to dispatch an action,

81
00:05:50.470 --> 00:05:51.740
to subscribe to events.

82
00:05:52.890 --> 00:05:58.190
All kind of very standard stuff that
we can do, which is super cool.

83
00:05:58.190 --> 00:06:04.352
So we've got one more and,
&gt;&gt; Steve Kinney: In React Redux,

84
00:06:04.352 --> 00:06:07.986
there's also a pluralized version of

85
00:06:07.986 --> 00:06:12.890
bindActionCreator called
bindActionCreators.

86
00:06:12.890 --> 00:06:16.700
Which takes a bunch of these actions,
like an object of them, and

87
00:06:16.700 --> 00:06:18.674
binds them all with the same dispatch.

88
00:06:18.674 --> 00:06:24.970
Yeah and honestly, if you really
wanted to, like I'm not using that.

89
00:06:24.970 --> 00:06:25.880
You could write your own.

90
00:06:27.380 --> 00:06:31.470
You do something like bindActionCreators.

91
00:06:33.900 --> 00:06:37.940
Give me a set of actions, like an object
of actions and what the dispatch is.

92
00:06:37.940 --> 00:06:41.220
In this case it's our store.dispatch.

93
00:06:41.220 --> 00:06:44.440
And you can basically go over
all the keys of that object.

94
00:06:47.990 --> 00:06:51.750
This will get back yeah,
it was add, subtract,

95
00:06:51.750 --> 00:06:55.360
multiply, and
they each had a function as a value.

96
00:06:55.360 --> 00:06:56.800
This would work for all of them.

97
00:06:56.800 --> 00:07:02.044
Go through each of them and
return me back a new object.

98
00:07:06.139 --> 00:07:08.120
&gt;&gt; Steve Kinney: Reduce,
we'll start with reduce.

99
00:07:08.120 --> 00:07:09.970
Basically reduce allows you
to start with an object and

100
00:07:09.970 --> 00:07:12.040
add to it as you iterate over an array.

101
00:07:12.040 --> 00:07:13.680
So, we'll start with a empty object.

102
00:07:15.080 --> 00:07:17.530
We'll take that object every
time as we go through each one.

103
00:07:17.530 --> 00:07:21.119
So let's say it's add,
multiply, subtract and divide.

104
00:07:21.119 --> 00:07:23.840
We'll start with the add,
multiply, and so on and so forth.

105
00:07:23.840 --> 00:07:26.565
We'll add to it so
we'll say call the key and an object.

106
00:07:26.565 --> 00:07:33.996
[SOUND] And boundActions

107
00:07:33.996 --> 00:07:38.826
[key] bind it

108
00:07:38.826 --> 00:07:43.287
to dispatch.

109
00:07:43.287 --> 00:07:47.140
Effectively we've now created that
react Redux one when we see it as well.

110
00:07:47.140 --> 00:07:51.230
Again, a lot of this is just it seems like
when we see it like with map dispatched

111
00:07:51.230 --> 00:07:54.830
props and map state to prop like very
complicated when we see and react.

112
00:07:54.830 --> 00:07:58.306
It is effectively, with a lot of
error checking and some guard routes,

113
00:07:58.306 --> 00:08:04.070
a Javascript function that mutates an
object, and fires events as we go along.

