WEBVTT

1
00:00:02.367 --> 00:00:05.430
&gt;&gt; Steve Kinney: We've done most
of the hard Redux and React parts.

2
00:00:05.430 --> 00:00:12.006
We've learned about map state across map
dispatch to props, so on and so forth.

3
00:00:12.006 --> 00:00:15.712
At this point, most of the hard parts
of application are either writing

4
00:00:15.712 --> 00:00:19.700
React components which are kinda
outside the scope of this course.

5
00:00:19.700 --> 00:00:23.830
Or it's all about manipulating
that JavaScript object which

6
00:00:23.830 --> 00:00:27.020
we wrote some helpers for, it's just
going through and using them, right,

7
00:00:27.020 --> 00:00:31.430
removing one is taking out the entities
object and off of the ideas array.

8
00:00:31.430 --> 00:00:34.870
Right, moving one is a combination
of removing it from the old list and

9
00:00:34.870 --> 00:00:36.230
adding it to the new one.

10
00:00:36.230 --> 00:00:38.720
Adding users in list is exactly the same.

11
00:00:38.720 --> 00:00:41.110
There's not a lot of value
in watching me do that,

12
00:00:41.110 --> 00:00:44.980
not everything is glamorous in JavaScript,
a lot of things are.

13
00:00:44.980 --> 00:00:48.120
But I'm not putting sparkles behind
mouse cursors or anything like that.

14
00:00:48.120 --> 00:00:49.790
So it's totally fine.

15
00:00:49.790 --> 00:00:52.970
But here we have the application
where we've got most of those kind of

16
00:00:52.970 --> 00:00:54.450
tedious parts done.

17
00:00:54.450 --> 00:00:58.142
We even have the ability to
move cards between lists.

18
00:00:58.142 --> 00:01:01.857
Which is kind of interesting,
we look over in the code.

19
00:01:04.982 --> 00:01:09.244
&gt;&gt; Steve Kinney: We can see
that we wanna have all of

20
00:01:09.244 --> 00:01:14.581
the different lists so we can move it too.

21
00:01:14.581 --> 00:01:18.659
And we use object of values because
remember we have those keys and

22
00:01:18.659 --> 00:01:19.630
those values.

23
00:01:19.630 --> 00:01:22.220
So if I wanted an array of lists,
I can use object of values,

24
00:01:22.220 --> 00:01:23.760
now I get an array back again.

25
00:01:23.760 --> 00:01:25.300
Which is super cool.

26
00:01:25.300 --> 00:01:31.250
But we tend to end up doing
that a decent amount.

27
00:01:31.250 --> 00:01:35.870
Each card really just needs the same
array, why am I calculating it?

28
00:01:35.870 --> 00:01:39.380
Move card to list, is a child of card.

29
00:01:40.810 --> 00:01:44.080
Which means that it's
this drop down over here.

30
00:01:45.830 --> 00:01:50.090
And I don't need to generate that
array over and over and over again.

31
00:01:51.200 --> 00:01:55.972
But if I go and we'll just say
something like, we'll turn this into

32
00:01:55.972 --> 00:02:02.320
a,
&gt;&gt; Steve Kinney: GetLists,

33
00:02:02.320 --> 00:02:06.741
just so we can log it separate from
the ability to, this generation of

34
00:02:06.741 --> 00:02:11.410
the array of list that we're gonna
pass to every single card component.

35
00:02:11.410 --> 00:02:18.128
We'll say,
&gt;&gt; Steve Kinney: Call it getLists.

36
00:02:19.249 --> 00:02:19.999
&gt;&gt; Steve Kinney: We did.

37
00:02:19.999 --> 00:02:22.951
And we'll say, intake state, and
it's just going to return this.

38
00:02:26.795 --> 00:02:29.457
&gt;&gt; Steve Kinney: And we'll return this but

39
00:02:29.457 --> 00:02:34.782
what I wanna do real quick
is I want to console.log.

40
00:02:38.650 --> 00:02:42.788
&gt;&gt; Steve Kinney: Generating
an array of the list.

41
00:02:45.463 --> 00:02:47.681
&gt;&gt; Steve Kinney: And
we'll just use this over here.

42
00:02:47.681 --> 00:02:50.774
And the point is, we're going to
see this run a few too many times.

43
00:03:00.437 --> 00:03:03.924
&gt;&gt; Steve Kinney: So, it ran four times.

44
00:03:03.924 --> 00:03:07.510
I'll give you a hint on how
many cards are on the page.

45
00:03:08.530 --> 00:03:10.602
Anyone want to venture a guess, four.

46
00:03:10.602 --> 00:03:15.342
Yeah [LAUGH].

47
00:03:15.342 --> 00:03:19.040
Look at that, we did it five times and
we added a card.

48
00:03:19.040 --> 00:03:21.210
This is the same array of lists.

49
00:03:21.210 --> 00:03:23.740
Why am I doing this as many times?

50
00:03:23.740 --> 00:03:28.279
My golden rule of performance is not
doing stuff is faster than doing stuff.

51
00:03:29.500 --> 00:03:33.670
And so over time,
performance is always one of those things,

52
00:03:33.670 --> 00:03:36.950
as you're doing that individual ticket,
you're like, it doesn't matter,

53
00:03:36.950 --> 00:03:41.190
it's fine, and 1000 it doesn't matters?

54
00:03:41.190 --> 00:03:45.760
Gets to the point where all of a sudden,
you can't use your own app.

55
00:03:45.760 --> 00:03:48.020
It becomes really painful.

56
00:03:48.020 --> 00:03:50.200
So it'd be great if we didn't do this.

57
00:03:51.420 --> 00:03:54.310
React has some built in things to do,
it has the react dot memo,

58
00:03:54.310 --> 00:03:56.660
which is if I get the same props,
it'd do the same thing.

59
00:03:56.660 --> 00:04:00.034
Those are still techniques that
you should totally look at.

60
00:04:00.034 --> 00:04:02.520
But we're mostly concerned
with just the Redux part.

61
00:04:02.520 --> 00:04:04.834
We haven't gotten to
the React component yet.

62
00:04:04.834 --> 00:04:09.705
So any should component update or react
dot memo or any cool fun stuff that we do

63
00:04:09.705 --> 00:04:14.695
there, it doesn't even matter,
we are getting the props ready to hand to

64
00:04:14.695 --> 00:04:19.205
the React component and
we're already doing stuff too many times.

65
00:04:19.205 --> 00:04:24.895
So we'll talk a little bit about a library
called reselect, and reselect, it's one

66
00:04:24.895 --> 00:04:30.903
of those things where it's also kind of
interesting that it is kind of agnostic.

67
00:04:30.903 --> 00:04:36.001
It's commonly used with Redux, but

68
00:04:36.001 --> 00:04:41.930
as you'll see, it is the theme of the day.

69
00:04:41.930 --> 00:04:44.253
It's just JavaScript,

70
00:04:44.253 --> 00:04:50.123
which is like the most understated
thing in the world but yeah.

71
00:04:50.123 --> 00:04:53.941
So what we're gonna do is what reselect
does is it gives you an ability to pass

72
00:04:53.941 --> 00:04:57.520
some functions to your kind
of more expensive function.

73
00:04:57.520 --> 00:05:00.240
And these are usually cheap like, hey,

74
00:05:00.240 --> 00:05:06.700
if this is the same as the last time
I saw this, give me the cached value.

75
00:05:06.700 --> 00:05:11.477
If you get State dot list dot entries,
and you're on the second card, and

76
00:05:11.477 --> 00:05:14.150
you've already done this.

77
00:05:14.150 --> 00:05:15.570
Don't make a new array.

78
00:05:17.220 --> 00:05:20.209
Just use the one that you made last time.

79
00:05:20.209 --> 00:05:23.706
So what we'll do is we'll
do a quick refactor here.

80
00:05:25.349 --> 00:05:30.889
&gt;&gt; Steve Kinney: We'll import
createSelector from reselect.

81
00:05:34.137 --> 00:05:38.060
&gt;&gt; Steve Kinney: I just wanna make sure.

82
00:05:38.060 --> 00:05:40.022
Just check real quick to make
sure everything still works.

83
00:05:40.022 --> 00:05:43.390
Cool, CreateSelector's defined but
never used.

84
00:05:43.390 --> 00:05:48.107
I didn't get the autocomplete there so
I got a little worried for a second.

85
00:05:48.107 --> 00:05:51.747
&gt;&gt; Steve Kinney: And so now, it's got
a little bit of a syntax that might stress

86
00:05:51.747 --> 00:05:54.911
you out at first, but
I promise you it's not too bad.

87
00:05:54.911 --> 00:05:58.033
What we're going to do is,
we're going to break

88
00:05:58.033 --> 00:06:02.920
out the creating the object values from
actually getting it from the state.

89
00:06:02.920 --> 00:06:07.859
Because what we want to see is if
this is the same as we saw last time,

90
00:06:07.859 --> 00:06:11.047
don't, if the list entries are the same.

91
00:06:11.047 --> 00:06:13.354
You could just say,
if the state is the same, but

92
00:06:13.354 --> 00:06:16.070
we wanna kind of just worry
about the parts we care about.

93
00:06:16.070 --> 00:06:24.225
So I'm gonna make a new function called,
&gt;&gt; Steve Kinney: GetListEntities.

94
00:06:24.225 --> 00:06:28.187
And that'll take the state and it's
just gonna pull out the list on today's,

95
00:06:28.187 --> 00:06:29.459
just get us that object.

96
00:06:35.005 --> 00:06:38.390
&gt;&gt; Steve Kinney: Cool,
and we'll have that.

97
00:06:38.390 --> 00:06:42.052
And now what we can do is we can create a
selector which is effectively creating it

98
00:06:42.052 --> 00:06:43.320
like memorized function.

99
00:06:43.320 --> 00:06:45.529
So we'll write it here and
we'll pay some stuff in a second.

100
00:06:47.796 --> 00:06:51.340
&gt;&gt; Steve Kinney: CreateSelector
takes a set of arguments.

101
00:06:51.340 --> 00:06:55.610
It takes a bunch of functions that it's
gonna run first to figure out if it needs

102
00:06:55.610 --> 00:06:57.850
to run the final one.

103
00:06:57.850 --> 00:06:59.863
You can pass them in in order.

104
00:06:59.863 --> 00:07:05.237
But typically I will use the kind
of preferred syntax of an array,

105
00:07:05.237 --> 00:07:10.234
an array of functions and
we'll use this getListEntities.

106
00:07:13.514 --> 00:07:17.040
&gt;&gt; Steve Kinney: So it's gonna call
this getListEntities and whatever comes

107
00:07:17.040 --> 00:07:21.126
out of that is going to be the first
argument that goes to this getList.

108
00:07:21.126 --> 00:07:28.843
So, this will end up just being,
&gt;&gt; Steve Kinney: In

109
00:07:28.843 --> 00:07:32.127
caught list if you want,
it's probably better.

110
00:07:32.127 --> 00:07:36.784
The fact that we stored it entities as a-
&gt;&gt; Steve Kinney: So

111
00:07:36.784 --> 00:07:39.135
this will go ahead and do this first part.

112
00:07:39.135 --> 00:07:41.727
If this ends up being
the same as it did last time,

113
00:07:41.727 --> 00:07:45.921
it's not going to run this final function,
where we do the object dot values.

114
00:07:45.921 --> 00:07:48.340
We don't have a lot of lists.

115
00:07:48.340 --> 00:07:49.710
So this isn't super expensive, but

116
00:07:49.710 --> 00:07:54.890
there are parts in your application where
you might have a much larger data set and

117
00:07:54.890 --> 00:07:59.298
even doing an object dot values,
that many times, it's gonna add up.

118
00:07:59.298 --> 00:08:05.961
So here, we'll pass in this function next,
kind of get rid of it right there.

119
00:08:05.961 --> 00:08:08.566
So go ahead, run this one first.

120
00:08:08.566 --> 00:08:12.503
If you got the same result as last time,
just use the result and

121
00:08:12.503 --> 00:08:13.884
don't use it again.

122
00:08:13.884 --> 00:08:14.863
So then we'll replace this one.

123
00:08:19.487 --> 00:08:21.603
&gt;&gt; Steve Kinney: Let's go ahead.

124
00:08:21.603 --> 00:08:25.063
Hey, you know what's not in front
of this getting an array of lists?

125
00:08:27.574 --> 00:08:29.011
&gt;&gt; Steve Kinney: A four.

126
00:08:29.011 --> 00:08:32.374
A four isn't [LAUGH], all right?

127
00:08:34.904 --> 00:08:37.174
&gt;&gt; Steve Kinney: We did it once.

128
00:08:37.174 --> 00:08:39.120
We didn't do it four times.

129
00:08:39.120 --> 00:08:42.490
And so, it's basically, it's memorization.

130
00:08:42.490 --> 00:08:44.950
It's cache and a bunch of stuff like that.

131
00:08:44.950 --> 00:08:48.700
It kinda makes it easier
to do some of these things.

