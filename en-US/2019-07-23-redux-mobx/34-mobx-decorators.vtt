WEBVTT

1
00:00:03.220 --> 00:00:05.017
&gt;&gt; Steve Kinney: We talk about MobX.

2
00:00:05.017 --> 00:00:08.830
MobX is really cool.

3
00:00:08.830 --> 00:00:13.674
It is one of those things where we need
to get some terms kinda under our belts,

4
00:00:13.674 --> 00:00:18.335
just so that when we're talking
about it all kind of makes sense.

5
00:00:18.335 --> 00:00:22.763
So just talking about this
idea of computer properties,

6
00:00:22.763 --> 00:00:26.927
I first heard about computed
properties from Ember.

7
00:00:26.927 --> 00:00:28.293
Actually if you think about it,

8
00:00:28.293 --> 00:00:30.525
like Ruby kinda just does it
out of the box like Ruby.

9
00:00:30.525 --> 00:00:35.960
If you say dot like some instance
variable, it's really a method, and

10
00:00:35.960 --> 00:00:42.590
the equals is also a method, and
it's not dissimilar from that.

11
00:00:42.590 --> 00:00:46.060
So here,
we've just got a regular JavaScript class.

12
00:00:47.160 --> 00:00:50.430
And one of the things that,
kinda thinking in a React document,

13
00:00:50.430 --> 00:00:56.330
that we always wanna do, is we wanna like
be able to derive state when possible.

14
00:00:56.330 --> 00:01:01.635
We don't wanna necessarily like have to
make every time the first name changes or

15
00:01:01.635 --> 00:01:02.961
last name changes,

16
00:01:02.961 --> 00:01:07.342
set a new full name one to be the first
name of space in the last name.

17
00:01:07.342 --> 00:01:11.010
And so in JavaScript with our properties,
like this stuff, first name,

18
00:01:11.010 --> 00:01:14.440
you can do this,
whatever the new person is, first name.

19
00:01:14.440 --> 00:01:16.220
And the last name,
you get the last name, but

20
00:01:16.220 --> 00:01:20.160
if you wanted to compute a full name,
this is obviously super naive.

21
00:01:22.030 --> 00:01:25.983
Well, the way you call that
is a little bit different.

22
00:01:25.983 --> 00:01:29.070
If you called the first name,
you're gonna get it.

23
00:01:29.070 --> 00:01:31.180
The last name, you're gonna get it.

24
00:01:31.180 --> 00:01:35.040
But if you just say dot full name,
you're gonna get the function reference.

25
00:01:35.040 --> 00:01:39.030
And it's actually, one of the things that
makes JavaScript super powerful is that we

26
00:01:39.030 --> 00:01:42.230
have first class functions that you
can pass around and do stuff with.

27
00:01:42.230 --> 00:01:43.940
But it's also like a little bit squirrely,

28
00:01:43.940 --> 00:01:46.740
we have to do something like that
if we will have the full name.

29
00:01:46.740 --> 00:01:48.930
And that's like not super great.

30
00:01:51.100 --> 00:01:53.024
Now, with just ES6, and

31
00:01:53.024 --> 00:01:58.013
there's a syntax to do this is ES5
that we'll look at a little bit.

32
00:01:58.013 --> 00:02:02.711
But [LAUGH] we're far
enough past 2015 now.

33
00:02:02.711 --> 00:02:07.844
You can put this get keyword in front
of it and it's still a function but

34
00:02:07.844 --> 00:02:11.503
now you get the same syntax
the whole way through.

35
00:02:11.503 --> 00:02:13.330
And this is like much better.

36
00:02:13.330 --> 00:02:17.507
As I said, this seems like some new magic.

37
00:02:17.507 --> 00:02:21.436
I don't see it used as much as it
probably can and should be used.

38
00:02:21.436 --> 00:02:25.830
A lot of the backbone code I wrote
in 2013 could have very much helped.

39
00:02:25.830 --> 00:02:27.370
Could have benefitted from this,

40
00:02:27.370 --> 00:02:30.240
cuz it was very much,
you'd have to do that method call.

41
00:02:30.240 --> 00:02:33.010
So this is what it looked like in ES5.

42
00:02:35.060 --> 00:02:38.250
It's great, that's wonderful syntax.

43
00:02:38.250 --> 00:02:42.260
But it helps with what's kind of called
the universal access principle, which is

44
00:02:42.260 --> 00:02:46.530
I don't have to think about which ones
are methods and which ones are properties.

45
00:02:46.530 --> 00:02:50.030
Using the get keyword makes it a little
bit easier to have computed and

46
00:02:50.030 --> 00:02:51.360
derived state.

47
00:02:51.360 --> 00:02:56.880
Now, the kind of out-of-the box ES5 or

48
00:02:56.880 --> 00:03:01.020
ES6 implementation, like we're still
gonna call that function every time.

49
00:03:02.180 --> 00:03:06.278
And yeah, we're just putting a space in
between first and last name, no big deal.

50
00:03:06.278 --> 00:03:09.205
But if you're doing
something kind of expensive,

51
00:03:09.205 --> 00:03:11.390
that could be somewhat problematic.

52
00:03:12.970 --> 00:03:16.310
So we'll actually mob x will solve
some of that problem for us.

53
00:03:16.310 --> 00:03:19.740
There is one other like fancy new
JavaScript feature that we need to like

54
00:03:19.740 --> 00:03:24.830
wrap our heads around in order to
like see like MobX like really shine.

55
00:03:24.830 --> 00:03:27.190
And that is this concept of decorators.

56
00:03:27.190 --> 00:03:29.720
Decorators exist in a bunch
of other languages.

57
00:03:31.030 --> 00:03:34.547
They are somewhat supported in JavaScript,

58
00:03:34.547 --> 00:03:39.913
they're not like the that get key
word is totally valid JavaScript if

59
00:03:39.913 --> 00:03:45.297
you dealt with the console of
decorators are still a proposal phase.

60
00:03:45.297 --> 00:03:48.490
And so they're a little bit
controversial us all the time.

61
00:03:48.490 --> 00:03:52.700
But we'll look at how to use my backs
with decorators and without decorators.

62
00:03:52.700 --> 00:03:57.840
Decorators are basically a syntactic
sugar for higher order functions.

63
00:03:57.840 --> 00:04:02.657
Higher order functions is again a function
that wraps another function with extra

64
00:04:02.657 --> 00:04:03.646
capabilities.

65
00:04:03.646 --> 00:04:07.443
Anything you can do in the decorator,
you can do with a regular function,

66
00:04:07.443 --> 00:04:10.506
we use higher order components
in the basic React course and

67
00:04:10.506 --> 00:04:14.040
we use a higher-order component
every time we use connect.

68
00:04:14.040 --> 00:04:17.940
That was a function that took
map state to props [INAUDIBLE],

69
00:04:17.940 --> 00:04:21.925
eventually it took a component and
wrapped it all together.

70
00:04:21.925 --> 00:04:23.590
So decorators is just syntactic sugar.

71
00:04:25.500 --> 00:04:26.000
Cool.

72
00:04:28.570 --> 00:04:31.210
So this is actually for the getter.

73
00:04:33.370 --> 00:04:37.970
This is how the decorator syntax,
if you wanna make your own decorator.

74
00:04:39.440 --> 00:04:42.510
Whatever the decorator name is,
the target, the key, and the description.

75
00:04:44.080 --> 00:04:49.060
And you could say, okay,
if I wanna make it writeable

76
00:04:51.260 --> 00:04:57.730
or readonly, I can set writable to false
and then return a new version of it.

77
00:04:57.730 --> 00:04:59.050
So now I can do this declarator,

78
00:04:59.050 --> 00:05:02.920
which is this at symbol,
which will take that get fullName method.

79
00:05:05.570 --> 00:05:08.970
And it will return a new
version of that method

80
00:05:08.970 --> 00:05:10.699
that has been modified to be read only.

81
00:05:11.700 --> 00:05:16.020
Now you could also just wrap the kinda
invocation around the return.

82
00:05:16.020 --> 00:05:21.143
And return a new function,
so on and so forth.

83
00:05:21.143 --> 00:05:22.397
We've written a few.

84
00:05:22.397 --> 00:05:29.792
Like we wrote one back in 2017, and I
hated the name of it, but we went with it.

85
00:05:29.792 --> 00:05:34.776
@bindThis, and what that did was
it took whatever method in their

86
00:05:34.776 --> 00:05:39.493
reaction component and
did that this, whatever equals this,

87
00:05:39.493 --> 00:05:42.968
that whatever that bind
this automatically.

88
00:05:42.968 --> 00:05:47.866
And so we use that one all over the place
back before class property shipped

89
00:05:47.866 --> 00:05:52.843
to mega so we weren't writing, it was
less arduous to write that than it was

90
00:05:52.843 --> 00:05:56.490
to have to go ahead and
like do that by hand all the time.

91
00:05:56.490 --> 00:06:01.356
There's a library called core-decorators,
which will do a lot of these things,

92
00:06:01.356 --> 00:06:04.566
like someone just went ahead and
wrote a bunch of them.

93
00:06:04.566 --> 00:06:08.929
I believe it might have been Jay Phelps,
who also wrote Redux-Observable,

94
00:06:08.929 --> 00:06:10.416
that wrote this library.

95
00:06:10.416 --> 00:06:14.891
And so, autobind is effectively
our bind this decorator,

96
00:06:14.891 --> 00:06:18.022
that will do the same
thing as I just said,

97
00:06:18.022 --> 00:06:22.870
deprecate will just console warn,
this method is deprecated.

98
00:06:22.870 --> 00:06:26.424
And so instead like wrapping it all in
the console when you can just like,

99
00:06:26.424 --> 00:06:30.460
say @deprecated next to the method, and
like you'll get that console warning.

100
00:06:31.650 --> 00:06:36.839
Readonly memoize is effectively at
the debounce, so on and so forth.

101
00:06:36.839 --> 00:06:43.440
There's also lodash decorators which take
some of the common lodash ones and do it.

102
00:06:43.440 --> 00:06:48.700
The big or a big problem with decorators
is that they are not exactly real.

103
00:06:50.350 --> 00:06:53.540
And this will come,
they're still in the proposal phase and

104
00:06:53.540 --> 00:06:55.910
not officially in the language.

105
00:06:55.910 --> 00:06:59.400
But with like the advent of Babel,
it's like a big shift

106
00:06:59.400 --> 00:07:03.850
before will be like some new thing with
shipping the DOM API or in JavaScript, but

107
00:07:03.850 --> 00:07:08.462
you can't use it because of
Internet Explorer 6, [LAUGH] right?

108
00:07:09.950 --> 00:07:15.725
And so you have to use like effectively
like ES3 even when he has five was out.

109
00:07:15.725 --> 00:07:20.765
And now with Babel, we start using
syntax like way before it even ships.

110
00:07:20.765 --> 00:07:24.405
And there's some like scariness of like,
maybe the syntax doesn't end up actually

111
00:07:24.405 --> 00:07:27.105
ending up like that and you have
a slightly like squarely a version,

112
00:07:28.295 --> 00:07:32.500
where this becomes slightly problematic
for using something like create React app.

113
00:07:32.500 --> 00:07:35.534
Like they have decorators like turned off.

114
00:07:35.534 --> 00:07:39.148
Let's rephrase that,
they don't have decorators turned off,

115
00:07:39.148 --> 00:07:42.629
they don't have them turned on,
[LAUGH] so you have to object and

116
00:07:42.629 --> 00:07:45.077
adjust the Babel configuration yourself.

117
00:07:45.077 --> 00:07:50.186
If you're using decorators,
you are assuming a non-zero

118
00:07:50.186 --> 00:07:55.500
risk that the version of decorators
that eventually ends up in

119
00:07:55.500 --> 00:08:00.814
the language is different from
the version of decorators that

120
00:08:00.814 --> 00:08:06.890
you were using when you got ahead of
the curve and started to use Babel.

121
00:08:06.890 --> 00:08:11.810
That's fine, we're gonna look at MobX
effectively with decorators and without.

122
00:08:11.810 --> 00:08:14.370
I really like the decorators.

123
00:08:14.370 --> 00:08:16.672
I like decorator syntax in general.

124
00:08:16.672 --> 00:08:19.470
And I also like like it with MobX.

125
00:08:19.470 --> 00:08:20.820
We'll see it both ways.

126
00:08:20.820 --> 00:08:24.120
But when we get like really
like knee deep into the code,

127
00:08:24.120 --> 00:08:26.050
I'll probably just be using decorators.

128
00:08:26.050 --> 00:08:30.610
All right, so we know about getters and
setters, the set keyword,

129
00:08:30.610 --> 00:08:35.070
we don't actually see there is cuz we're
actually gonna use it is the ability to

130
00:08:35.070 --> 00:08:39.160
say dot full name equals, and
actually have a function that does stuff,

131
00:08:39.160 --> 00:08:42.820
that maybe splits it on a space and
sets the first name and the last name.

132
00:08:42.820 --> 00:08:46.193
It's the exact opposite of the get.

133
00:08:46.193 --> 00:08:47.650
And decorators, super cool.

134
00:08:47.650 --> 00:08:51.567
Those are JavaScript things that aren't
necessarily related to MobX, but

135
00:08:51.567 --> 00:08:55.127
they're useful for us cuz we're
gonna see them as we work with MobX.

136
00:08:55.127 --> 00:09:00.920
All right, so Redux is great.

137
00:09:00.920 --> 00:09:01.560
I use Redux.

138
00:09:01.560 --> 00:09:04.157
I like Redux, it's wonderful.

139
00:09:04.157 --> 00:09:09.224
But even stuff we had to do with
the immutably changing nested property,

140
00:09:09.224 --> 00:09:12.393
wasn't my favorite thing
in the world to do.

141
00:09:12.393 --> 00:09:18.179
[LAUGH] I did it with a smile on my face,
but I did not enjoy it.

142
00:09:18.179 --> 00:09:22.871
There's a part of me that kinda misses
like the object oriented programming

143
00:09:22.871 --> 00:09:27.853
model of like calling methods and like,
okay, what if, like list had an array of

144
00:09:27.853 --> 00:09:32.398
cards and the idea of moving a card was
simply popping it out of one array and

145
00:09:32.398 --> 00:09:37.090
pushing it on to the other one like you
would do with regular old JavaScript,

146
00:09:37.090 --> 00:09:40.610
JavaScript in general and
JavaScript objects.

147
00:09:40.610 --> 00:09:44.540
Like where if you didn't have to,
like have a framework checking for

148
00:09:44.540 --> 00:09:48.902
different amounts of is this
object preferentially different.

149
00:09:48.902 --> 00:09:51.283
You were just like writing
regular ES classes,

150
00:09:51.283 --> 00:09:53.730
you could do a lot of what
we're gonna do in MobX.

151
00:09:53.730 --> 00:10:00.288
It's just because the obstruction that is
helping make our UIs fast by like virtual

152
00:10:00.288 --> 00:10:05.583
dipping, and figuring what's changed,
that's really hard for them.

153
00:10:05.583 --> 00:10:09.988
So MobX basically Kind of one of the
themes of this course is, like, sometimes

154
00:10:09.988 --> 00:10:14.750
if you have a really great abstraction,
you can hide nasty complexity.

155
00:10:14.750 --> 00:10:16.900
And so MobX does exactly that.

156
00:10:16.900 --> 00:10:18.880
It uses some of the Reactive programming,
but

157
00:10:18.880 --> 00:10:22.570
it hides it from you like we saw it
up close and personal with RxJS.

158
00:10:22.570 --> 00:10:26.470
MobX, that's where the X comes from.

159
00:10:26.470 --> 00:10:28.690
And the OB is observable.

160
00:10:29.700 --> 00:10:32.270
And so they are kind of
related abstracts all of that.

161
00:10:32.270 --> 00:10:35.480
It makes it very easy but
it's doing a lot of those same concepts.

162
00:10:36.710 --> 00:10:41.430
So you use your very simple and
normal ones.

163
00:10:41.430 --> 00:10:44.127
And basically as stuff changes,
it will say, hey,

164
00:10:44.127 --> 00:10:45.980
I know that this property changed.

165
00:10:45.980 --> 00:10:49.090
Cuz it's using these getters and
setters and stuff under the hood.

166
00:10:49.090 --> 00:10:51.940
You just use it like
a normal JavaScript object.

167
00:10:51.940 --> 00:10:56.150
But I know that you need to
trigger some kinda event and

168
00:10:56.150 --> 00:10:59.840
lead something now, and one of
the things you can do is let React now.

169
00:10:59.840 --> 00:11:02.190
Yeah, they push something on to an array.

170
00:11:02.190 --> 00:11:04.810
But I know that this is a brand new array,
and

171
00:11:04.810 --> 00:11:08.540
you need to rerender which is pretty,
pretty great.

