WEBVTT

1
00:00:00.180 --> 00:00:01.250
&gt;&gt; Steve Kinney: Buybacks, super cool.

2
00:00:01.250 --> 00:00:04.680
We play with a little
bit outside of the DOM.

3
00:00:04.680 --> 00:00:06.310
Let's talk about it in React.

4
00:00:07.360 --> 00:00:08.830
Right, so,

5
00:00:08.830 --> 00:00:14.290
you'll notice that I had to decorate
this class component with observer.

6
00:00:15.520 --> 00:00:19.780
Before when we were looking at ModX,
we had things that were observable.

7
00:00:19.780 --> 00:00:27.460
[LAUGH] Right, and then we can
decorate a React class with observer.

8
00:00:27.460 --> 00:00:31.950
And then any time one of
the observable objects

9
00:00:31.950 --> 00:00:36.390
changes inside that class it
will trigger React to rerender.

10
00:00:36.390 --> 00:00:38.870
Now, I wanna repeat something
that I said a few seconds ago,

11
00:00:38.870 --> 00:00:43.320
which is that our computer
properties don't change or

12
00:00:43.320 --> 00:00:46.910
re-trigger unless something
that relies on changes.

13
00:00:46.910 --> 00:00:50.360
Which is why you can tend to
avoid should component update.

14
00:00:50.360 --> 00:00:55.840
Because if an observable, because it's
only the properties you're looking at too.

15
00:00:55.840 --> 00:01:00.410
If an observable has triggered a change,
something's changed.

16
00:01:00.410 --> 00:01:02.250
The component should update.

17
00:01:02.250 --> 00:01:04.169
Right, and so you can do that.

18
00:01:04.169 --> 00:01:07.321
If you, again,
don't want to use the decorators or

19
00:01:07.321 --> 00:01:12.697
you're using a state-less functional
component, which can't support decorators,

20
00:01:12.697 --> 00:01:15.656
you can just use it like a function and
pass it in.

21
00:01:15.656 --> 00:01:18.123
Like the same way you'd use react.memo.

22
00:01:18.123 --> 00:01:21.776
That's why react.memo
effectively exists as well.

23
00:01:21.776 --> 00:01:24.540
It's the same basic idea.

24
00:01:24.540 --> 00:01:28.737
Cool, you could also do it
with a container component,

25
00:01:28.737 --> 00:01:32.770
where you could do an autorun
when anything happens.

26
00:01:32.770 --> 00:01:34.420
Like you don't need to.

27
00:01:34.420 --> 00:01:37.588
But you can use some of those
other derivation [INAUDIBLE].

28
00:01:37.588 --> 00:01:38.971
Effectively, what MobX-React.

29
00:01:39.980 --> 00:01:43.580
A thing that I just want to put
on the table, it's react-redux.

30
00:01:43.580 --> 00:01:49.100
That's the connector and it's mobX-react
that's the connector the other way.

31
00:01:49.100 --> 00:01:51.500
So if you see me typing it wrong,
catch me.

32
00:01:51.500 --> 00:01:55.615
And It gives you an ability to,
very similar,

33
00:01:55.615 --> 00:02:00.695
normally in Redux React, we have one
store that we'll pass into a provider.

34
00:02:00.695 --> 00:02:03.755
We can theoretically pass in multiple
stores into the provider that

35
00:02:03.755 --> 00:02:06.015
are available throughout the application.

36
00:02:06.015 --> 00:02:10.890
And the other thing that we're
gonna need to look at is in React,

37
00:02:10.890 --> 00:02:15.410
we used the connect function and the map
state to props and the map dispatch to

38
00:02:15.410 --> 00:02:22.880
props in order to kind of figure out,
to create our higher order component.

39
00:02:22.880 --> 00:02:27.440
In mobx it's another decorator,
which is very elegant in my opinion.

40
00:02:27.440 --> 00:02:32.650
You just annotate it
with like at inject and

41
00:02:32.650 --> 00:02:37.160
then the story you want to inject into it
and then it's available in there as well.

42
00:02:37.160 --> 00:02:43.190
If you're using a functional component,
you don't have the ability to do that,

43
00:02:43.190 --> 00:02:48.720
to inject a store like that, so
you could use the functional version.

44
00:02:48.720 --> 00:02:53.640
Right, inject store is a function waiting
for the one that you're trying to observe.

45
00:02:53.640 --> 00:02:57.420
So this will then pop in
the item store as a prop, right?

46
00:02:57.420 --> 00:02:59.150
And then we still have the observer there.

47
00:02:59.150 --> 00:03:04.460
So we're injecting our MobX
object as a property into,

48
00:03:04.460 --> 00:03:07.020
and the provider lets us not
have to do prop-drilling, right?

49
00:03:07.020 --> 00:03:12.210
It allows us to just do this effectively
anywhere in our component hierarchy.

50
00:03:12.210 --> 00:03:16.900
But then the component itself still
needs to observe in this case.

51
00:03:17.950 --> 00:03:21.670
Cool, so let's just look at
a basic example for the counter.

52
00:03:21.670 --> 00:03:23.910
We'll look at it both
without decorators and with.

53
00:03:27.770 --> 00:03:30.370
&gt;&gt; Steve Kinney: This is
kind of one we saw before.

54
00:03:30.370 --> 00:03:35.370
I have the ability to like listen for
it here, but you can see that

55
00:03:35.370 --> 00:03:41.090
we're decorating the account object and
I'm passing it in, right?

56
00:03:41.090 --> 00:03:44.810
If you don't need the ability to
have those cross cutting concerns

57
00:03:44.810 --> 00:03:47.500
in a component hierarchy, if you
don't need the provider to like, hey,

58
00:03:47.500 --> 00:03:49.680
I need to give this to
a great grandchild component.

59
00:03:49.680 --> 00:03:53.960
As long as the component
itself is wrapped in observer,

60
00:03:53.960 --> 00:03:57.870
it will look at the props that
come in notice which objects and

61
00:03:57.870 --> 00:04:03.560
properties are observable and trigger
the rerender whenever those things change.

62
00:04:03.560 --> 00:04:07.790
You don't have to do anything,
like this is a functional component.

63
00:04:07.790 --> 00:04:14.700
And countdown increment is
just a property on that class.

64
00:04:15.730 --> 00:04:18.430
Right, it's almost like a lot of the stuff
that we've seen we can just kind of like

65
00:04:18.430 --> 00:04:21.663
make believe, it's almost like
how you wish this stuff worked.

66
00:04:21.663 --> 00:04:26.560
So count.increment,

67
00:04:26.560 --> 00:04:29.520
we're just calling that on
the instance of account.

68
00:04:30.980 --> 00:04:36.570
And we are, the observable value
is the actual count itself, right?

69
00:04:36.570 --> 00:04:38.950
So I can even fire up the console here and

70
00:04:38.950 --> 00:04:43.950
I put the count on the window,
so I could do stuff with it.

71
00:04:45.030 --> 00:04:49.480
So, for instance,
count there and it looks and

72
00:04:49.480 --> 00:04:52.491
feels like a plain old JavaScript object,
right?

73
00:04:52.491 --> 00:04:56.520
What if I say count.value equals like 500?

74
00:04:56.520 --> 00:05:00.829
The React object just changes.

75
00:05:02.100 --> 00:05:04.754
I'm basically mutating
a JavaScript object.

76
00:05:04.754 --> 00:05:08.730
And mobx is doing a whole
bunch of sorcery.

77
00:05:08.730 --> 00:05:11.450
And you can kind of see some of it,

78
00:05:11.450 --> 00:05:14.440
like the observer is going ahead and
effectively

79
00:05:14.440 --> 00:05:18.920
using the high order component pattern
to wrap it in a state container, right?

80
00:05:18.920 --> 00:05:21.135
We've seen a bunch of
these stuff at this point.

81
00:05:21.135 --> 00:05:24.960
Like [LAUGH] we've half pulled back
the curtain in the Wizard of Oz here,

82
00:05:24.960 --> 00:05:25.690
all right?

83
00:05:25.690 --> 00:05:30.670
And we're able to have a lot of
these in place which is I think,

84
00:05:30.670 --> 00:05:31.610
really, really cool.

85
00:05:34.380 --> 00:05:36.292
Yeah, you can just basically
mutate your objects and

86
00:05:36.292 --> 00:05:38.780
treat it like you're not
dealing with any of this.

87
00:05:38.780 --> 00:05:39.970
Which is really neat.

