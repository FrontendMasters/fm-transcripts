WEBVTT

1
00:00:00.000 --> 00:00:01.380
&gt;&gt; Steve Kinney: What we'll do is,

2
00:00:01.380 --> 00:00:05.300
we'll actually kinda implement
a version of an application.

3
00:00:05.300 --> 00:00:08.870
We saw this application before, when I was
kinda going over the things that we're

4
00:00:08.870 --> 00:00:15.250
gonna do today, it's not a to do list,
it's my packing list.

5
00:00:15.250 --> 00:00:19.415
And, you know what, I will defend
myself in making a to do list,

6
00:00:19.415 --> 00:00:23.596
because I use this app,
[LAUGH] I have it stored in local storage.

7
00:00:23.596 --> 00:00:28.765
And every time I come out here, I make
sure that I bring my toothbrush and.

8
00:00:28.765 --> 00:00:32.874
If you turn your head is a coding board
like we made before, but just two lists,

9
00:00:32.874 --> 00:00:36.861
and things move back and forth between
the two of them, and after I get home,

10
00:00:36.861 --> 00:00:39.120
I hit the mark, all is unpacked.

11
00:00:39.120 --> 00:00:40.670
And they all go back to unpacked, and

12
00:00:40.670 --> 00:00:43.360
when it's time to leave again,
I try not to forget my deodorant.

13
00:00:46.090 --> 00:00:50.480
So we'll kinda begin to implement this.

14
00:00:50.480 --> 00:00:53.828
We're going to get a feel for
what it's like to work with MobX and

15
00:00:53.828 --> 00:00:55.560
our React application.

16
00:00:55.560 --> 00:00:57.370
We are gonna use a version
with decorators, so

17
00:00:57.370 --> 00:01:01.670
I had to use a version of
Create React App that was ejected.

18
00:01:01.670 --> 00:01:04.770
If you're in control of your
own Babel configuration,

19
00:01:04.770 --> 00:01:08.500
you can bring in the proposal for
decorators.

20
00:01:08.500 --> 00:01:11.880
Now, we've talked about the risks here,
right?

21
00:01:11.880 --> 00:01:17.376
When decorators,
if decorators finally ship in ECMAScript.

22
00:01:17.376 --> 00:01:22.148
It could be the case that,
they are slightly semantically different,

23
00:01:22.148 --> 00:01:25.340
and you're gonna have
to do some refactoring.

24
00:01:26.430 --> 00:01:30.650
In my experience, in the last few years
since they've still been in proposal

25
00:01:30.650 --> 00:01:34.920
status, they haven't changed that much,
but forewarned is forearmed.

26
00:01:34.920 --> 00:01:36.174
The idea of functions and

27
00:01:36.174 --> 00:01:40.110
higher order functions in JavaScript
is never gonna really change.

28
00:01:40.110 --> 00:01:40.970
Let's take a look at this app.

29
00:01:42.000 --> 00:01:45.090
Right now, it's fine,
it doesn't do anything.

30
00:01:45.090 --> 00:01:49.090
Eventually we'll have this ability
to inject our MobX store, and

31
00:01:49.090 --> 00:01:51.010
these are all the components in here.

32
00:01:51.010 --> 00:01:55.250
I think the new input field,
theoretically, I think has the ability to

33
00:01:55.250 --> 00:02:00.400
just hold some temporary state eventually,
but pretty straightforward.

34
00:02:01.820 --> 00:02:06.640
We're gonna have this ItemModel and
an ItemStore.

35
00:02:06.640 --> 00:02:10.637
So effectively this is very

36
00:02:10.637 --> 00:02:15.502
similar to the plural of items and

37
00:02:15.502 --> 00:02:19.860
the singular of a given item.

38
00:02:19.860 --> 00:02:23.646
So let's go ahead and let's,
we'll need that ItemModel eventually, but

39
00:02:23.646 --> 00:02:26.540
let's start fleshing out the store.

40
00:02:26.540 --> 00:02:32.312
So it's a regular JavaScript class,
it's not really even extending anything.

41
00:02:32.312 --> 00:02:33.190
So what are the things?

42
00:02:33.190 --> 00:02:38.000
We know that it will
have an observable list

43
00:02:38.000 --> 00:02:42.060
of items that will start out as an array,
that seems good.

44
00:02:43.230 --> 00:02:49.140
We know that it will have, in order to
be able to filter it, there's a filter

45
00:02:49.140 --> 00:02:53.720
field on the packed items and the unpacked
items, so we can set that up as well.

46
00:02:55.360 --> 00:02:57.559
Observable and we'll say that.

47
00:03:00.030 --> 00:03:05.039
&gt;&gt; Steve Kinney: UnpackedItemsFilter
is an empty string.

48
00:03:07.280 --> 00:03:10.595
&gt;&gt; Steve Kinney: And we'll do that for
the packed items as well.

49
00:03:10.595 --> 00:03:13.728
Cuz what we'll do is,
basically generate new arrays based on

50
00:03:13.728 --> 00:03:17.765
the content of that filter, where it
literally filters through all the items,

51
00:03:17.765 --> 00:03:20.086
and see if the name
matches what's in there.

52
00:03:20.086 --> 00:03:21.850
So we'll kinda get filtering for free,

53
00:03:21.850 --> 00:03:24.990
in exactly the way that we would just
do it in a regular JavaScript object.

54
00:03:26.420 --> 00:03:29.970
So then, we've gotta figure out
what our packed items are and

55
00:03:29.970 --> 00:03:32.160
our unpacked items are.

56
00:03:32.160 --> 00:03:36.440
And we only wanna regenerate this
list when that array changes at all.

57
00:03:36.440 --> 00:03:40.920
So I can actually say,
we make a computer property,

58
00:03:40.920 --> 00:03:45.080
and we'll say, get packedItems.

59
00:03:46.560 --> 00:03:49.790
And if this feels like just
regular JavaScript, that's good.

60
00:03:49.790 --> 00:03:52.830
This .items,
not just a state nothing, right?

61
00:03:52.830 --> 00:03:57.265
This is .item's a filter,
the item, and look and

62
00:03:57.265 --> 00:04:01.897
see if it's packed
&gt;&gt; Steve Kinney: Cool, all right, so

63
00:04:01.897 --> 00:04:03.280
what are unpacked items?

64
00:04:03.280 --> 00:04:06.630
Well, they're kind of
the opposite of that.

65
00:04:06.630 --> 00:04:10.040
But what I'm gonna do is,
I could filter for not being packed, but

66
00:04:10.040 --> 00:04:15.470
I can also create an API that kinda
makes me happy and inspires joy.

67
00:04:16.500 --> 00:04:18.350
I can say, unpacked, right?

68
00:04:18.350 --> 00:04:22.416
Because that can be a computed property on
the item, we just have priorities packed,

69
00:04:22.416 --> 00:04:22.986
unpacked.

70
00:04:22.986 --> 00:04:27.568
We did this, in the kinda prequel
course where we had the valid, invalid,

71
00:04:27.568 --> 00:04:29.180
we had to getters to this.

72
00:04:30.910 --> 00:04:35.956
So, we can create code that's incredibly
readable, and if we wanna see which

73
00:04:35.956 --> 00:04:41.720
ones are filtered, a computer a property
can rely on another computed property.

74
00:04:41.720 --> 00:04:44.897
So we can say, computed, and

75
00:04:44.897 --> 00:04:49.486
we'll say, get filteredUnpackedList.

76
00:04:49.486 --> 00:04:53.447
Let's do this in the right order,

77
00:04:53.447 --> 00:05:00.005
filteredPackedList, and
that is simply gonna return,

78
00:05:00.005 --> 00:05:03.703
this.packedItems.filter.

79
00:05:07.938 --> 00:05:12.898
&gt;&gt; Steve Kinney: And
that'll be, if the item's value

80
00:05:12.898 --> 00:05:18.340
includes this.unpackedItemsFilter.

81
00:05:18.340 --> 00:05:23.597
So basically, we're kind of building
computer properties on top of each other.

82
00:05:23.597 --> 00:05:27.006
So we have a list of items, we have the
ability to get which ones are packed and

83
00:05:27.006 --> 00:05:30.971
which ones are unpacked, we have a string
for what value we're searching for, right?

84
00:05:30.971 --> 00:05:35.269
And we can begin to build these, so
that outside of our JavaScript object, and

85
00:05:35.269 --> 00:05:37.290
this is also super easy to unit test,

86
00:05:37.290 --> 00:05:41.739
you put some objects in there with some
properties, you can write the unit test.

87
00:05:41.739 --> 00:05:45.365
And all of our, or you'll all be like,
how can we derive from that?

88
00:05:45.365 --> 00:05:47.160
So we do the same thing with unpacked.

89
00:05:47.160 --> 00:05:53.000
So filtered.UnPackedList,
unpacked, this is packed.

90
00:05:54.610 --> 00:05:56.588
Cool, good thing I didn't
type that separately,

91
00:05:56.588 --> 00:05:58.060
cuz I wouldn't have caught that one.

92
00:05:59.410 --> 00:06:03.500
Cool, so we have all of that in place,
we'll probably,

93
00:06:03.500 --> 00:06:05.729
let's just create a few more.

94
00:06:05.729 --> 00:06:11.748
And you're gonna see me do something
here that I haven't talked about yet,

95
00:06:11.748 --> 00:06:14.203
which is this action.bound.

96
00:06:14.203 --> 00:06:17.083
And this is effectively,
we saw there was an auto bind or

97
00:06:17.083 --> 00:06:21.066
a bind this that I joked about before,
this will effectively give us that, so

98
00:06:21.066 --> 00:06:24.222
when we use it in our React
application it knows what this is.

99
00:06:24.222 --> 00:06:27.580
This is the same thing, it's doing
this.whatever equals this whatever,

100
00:06:27.580 --> 00:06:30.472
buying this, we're using arrow functions,
so on and so forth.

101
00:06:32.066 --> 00:06:36.347
&gt;&gt; Steve Kinney: So
we can do a few of these,

102
00:06:36.347 --> 00:06:42.393
let's do updatePackedItemsFilter

103
00:06:49.011 --> 00:06:50.933
&gt;&gt; Steve Kinney: And
all that is gonna do is, say.

104
00:06:54.261 --> 00:06:57.128
&gt;&gt; Steve Kinney: This.packedItemsFilter
equals whatever the new value is.

105
00:07:03.217 --> 00:07:04.880
&gt;&gt; Steve Kinney: This for
unpacked as well.

106
00:07:10.285 --> 00:07:15.219
&gt;&gt; Steve Kinney: Cool, and then,
it'd be awesome if we could make a simple

107
00:07:15.219 --> 00:07:19.260
helper for adding and
removing items, right?

108
00:07:21.030 --> 00:07:23.010
So we could say, action.

109
00:07:23.010 --> 00:07:29.620
We're gonna need to do
the item itself action.bound.

110
00:07:29.620 --> 00:07:34.013
Let's just start with adding items, let's
not worry about removing items just yet,

111
00:07:34.013 --> 00:07:36.430
cuz it's, spoiler alert, roughly the same.

112
00:07:36.430 --> 00:07:39.900
Add items, whatever that item is.

113
00:07:40.940 --> 00:07:45.552
And what I'm gonna do is, I'm gonna
leave this out cuz I don't actually have

114
00:07:45.552 --> 00:07:51.570
that yet,
the ability to create a new item.

115
00:07:51.570 --> 00:07:53.642
So we'll just leave that as
a kind of placeholder for now.

116
00:07:53.642 --> 00:07:58.723
All right, so this is the way of
collecting them, it's gonna have

117
00:07:58.723 --> 00:08:05.009
an array of items, it can filter them,
it can sort them into packed and unpacked.

118
00:08:05.009 --> 00:08:08.844
Again, other than a healthy
dose of decorators everywhere,

119
00:08:08.844 --> 00:08:13.910
you'll notice that it's effectively
like a regular JavaScript class.

120
00:08:13.910 --> 00:08:17.145
The decorators are the important part,
I don't wanna undersell it.

