WEBVTT

1
00:00:00.005 --> 00:00:04.154
&gt;&gt; Steve Kinney: So we can go ahead and
we can say that we also need to have this

2
00:00:04.154 --> 00:00:09.349
idea of a new item, that we need to
create, so actually add one in there.

3
00:00:09.349 --> 00:00:12.035
So we'll go ahead and say that as well.

4
00:00:12.035 --> 00:00:14.017
So we'll go in here, we'll do this
one a little bit differently.

5
00:00:16.711 --> 00:00:18.353
&gt;&gt; Steve Kinney: You'll see
that this one is a class, and

6
00:00:18.353 --> 00:00:20.105
I kinda left this one
like that on purpose.

7
00:00:22.158 --> 00:00:27.513
&gt;&gt; Steve Kinney: So we can say, inject,
and bring that from MobX, and now,

8
00:00:27.513 --> 00:00:33.852
here we can see it a little bit
differently with the decorator syntax.

9
00:00:33.852 --> 00:00:37.174
Where we can inject that, now that's
a prop that is available in here.

10
00:00:47.665 --> 00:00:49.082
&gt;&gt; Steve Kinney: Set it to the value.

11
00:00:51.361 --> 00:00:54.985
&gt;&gt; Steve Kinney: The reason I named the
name of the item, is cuz I'm very lazy,

12
00:00:54.985 --> 00:00:57.160
I named it value, so I could do this.

13
00:01:03.426 --> 00:01:04.361
&gt;&gt; Steve Kinney: Value in that case,

14
00:01:04.361 --> 00:01:06.847
cuz that's just gonna be
a ephemeral state, right?

15
00:01:06.847 --> 00:01:10.544
As we said before,
if the global state does not need a thing,

16
00:01:10.544 --> 00:01:13.228
you don't need to start every input field,

17
00:01:13.228 --> 00:01:17.660
these simple applications may have one,
two, three input fields.

18
00:01:17.660 --> 00:01:23.070
I think a lot about kind of, the code
editor and the design editor that we have,

19
00:01:23.070 --> 00:01:27.010
there are a lot of input fields, not all
of them matter to the global states.

20
00:01:27.010 --> 00:01:29.230
Some of them are temporary
things that we're gonna save.

21
00:01:29.230 --> 00:01:33.110
So you can still use regular
react state in your component.

22
00:01:33.110 --> 00:01:36.720
And honestly, when it's only
kept in that state, you should.

23
00:01:38.650 --> 00:01:43.391
So here we'll say, we got that onSubmit.

24
00:01:43.391 --> 00:01:45.649
Actually, we're just gonna do it in here.

25
00:01:49.165 --> 00:01:51.597
&gt;&gt; Steve Kinney: We'll grab that value and
we'll say.

26
00:01:56.683 --> 00:02:03.039
&gt;&gt; Steve Kinney: ItemList = this.props.

27
00:02:03.039 --> 00:02:10.740
And all we'll say is, itemList.addItem,

28
00:02:10.740 --> 00:02:14.799
does anyone remember?

29
00:02:14.799 --> 00:02:21.011
To check,
the perils of live coding, right?

30
00:02:21.011 --> 00:02:22.120
Let's see, individual item.

31
00:02:24.150 --> 00:02:25.300
Items.

32
00:02:25.300 --> 00:02:28.970
Let's fix a mistake I don't like that
we made, we're only adding one item.

33
00:02:30.240 --> 00:02:34.430
Cool, so we'll go in here and we'll
add an item, honestly with that value.

34
00:02:36.290 --> 00:02:39.100
We're just saying, hey, itemList,
I'm gonna call one of your methods,

35
00:02:39.100 --> 00:02:42.190
can you figure out how
to do this with React?

36
00:02:42.190 --> 00:02:45.000
Let's go ahead, we did a lot of codes,
let's take it for a spin and

37
00:02:45.000 --> 00:02:45.937
see where I messed up.

38
00:02:48.511 --> 00:02:50.743
&gt;&gt; Steve Kinney: Boom, there's a little,

39
00:02:50.743 --> 00:02:54.340
I have a little dumb
error that I have to fix.

40
00:02:54.340 --> 00:03:00.931
So you can see that,
all I did was mutate effectively,

41
00:03:00.931 --> 00:03:08.390
I pushed an item onto the array,
and everything was changed.

42
00:03:08.390 --> 00:03:12.294
I'll see what that is in a second.

43
00:03:12.294 --> 00:03:15.322
But basically, yeah,
I just push the thing onto an array,

44
00:03:15.322 --> 00:03:16.850
my entire React app changed.

45
00:03:17.960 --> 00:03:22.690
I didn't have to do anything, my entire
React, other than this input field here,

46
00:03:22.690 --> 00:03:25.934
that is just a temporary,
ephemeral new item thing, and

47
00:03:25.934 --> 00:03:28.051
I should clear that out afterwards.

48
00:03:35.461 --> 00:03:38.324
&gt;&gt; Steve Kinney: I just mutate the state,
and my entire application reflects it.

49
00:03:38.324 --> 00:03:40.285
I'm not, there's no reducers, I mean,

50
00:03:40.285 --> 00:03:44.160
there's things that are denoted as an
action, but they were just methods, right?

51
00:03:44.160 --> 00:03:47.500
The action.bound was
just binding it to this.

52
00:03:47.500 --> 00:03:48.530
I'm just taking my thing,

53
00:03:48.530 --> 00:03:51.660
it's basically the dream that we've,
kinda been waiting for.

54
00:03:51.660 --> 00:03:54.890
Which I know that one of the questions
at the end of this section is, so

55
00:03:54.890 --> 00:03:57.930
why don't you use use MobX all the time?

56
00:03:57.930 --> 00:04:02.625
We use it for the smaller pieces of it,
I'll talk a little bit about why some of

57
00:04:02.625 --> 00:04:05.313
the tradeoffs that you
need to think about.

58
00:04:05.313 --> 00:04:09.979
So I'm a really big fan of it, but
there are, obviously with anything,

59
00:04:09.979 --> 00:04:12.210
things that you need to consider.

60
00:04:12.210 --> 00:04:13.790
So did I bring my iPhone?

61
00:04:13.790 --> 00:04:14.422
There it is.

62
00:04:14.422 --> 00:04:21.440
That's in item Item.js:6, all right, we'll
do with that, I think it's part of the ID.

63
00:04:21.440 --> 00:04:26.630
And what if we wanted to toggle one?

64
00:04:26.630 --> 00:04:30.115
So let's go into the actual item here.

65
00:04:30.115 --> 00:04:34.591
And we'll say that,
unchanged for this checkbox.

66
00:04:37.090 --> 00:04:38.656
&gt;&gt; Steve Kinney: I'm gonna
console.log the items, so

67
00:04:38.656 --> 00:04:40.179
I can deal with that error while at it.

68
00:04:43.440 --> 00:04:47.478
We'll console.log it,
and we'll say, hey item,

69
00:04:47.478 --> 00:04:52.070
when someone clicks the unchanged,
why don't you toggle?

70
00:04:53.920 --> 00:04:55.342
Toggle, right?

71
00:04:55.342 --> 00:04:58.638
We already implemented that,
that flips packed to unpacked,

72
00:04:58.638 --> 00:05:02.379
that's all handled in our state,
we're just saying, hey, toggle.

73
00:05:10.834 --> 00:05:13.794
&gt;&gt; Steve Kinney: Boom,
all right, let's deal with that,

74
00:05:13.794 --> 00:05:16.684
cannot read property call of undefined.

75
00:05:16.684 --> 00:05:18.397
We did console.log it.

76
00:05:22.080 --> 00:05:23.040
&gt;&gt; Steve Kinney: I know what it is.

77
00:05:23.040 --> 00:05:26.640
That is literally probably referencing it,
so

78
00:05:26.640 --> 00:05:30.967
let's take a look, and
I'll deal with it momentarily.

79
00:05:30.967 --> 00:05:36.650
Our ID, I figured out what the issue
was with that input field,

80
00:05:36.650 --> 00:05:42.564
in the actual ItemModel,
I just need to actually call unique ID.

81
00:05:42.564 --> 00:05:45.105
Set step one, we'll deal with
the second issue in a second.

82
00:05:47.530 --> 00:05:50.803
&gt;&gt; Steve Kinney: All right, still blowing
up, but now my ID is at least correct.

83
00:05:50.803 --> 00:05:56.190
You can see that it references the item
store, which is great as well.

84
00:05:56.190 --> 00:06:00.060
So it's definitely unchanged,
let's take a look.

85
00:06:00.060 --> 00:06:07.650
So the issue that we had is, toggle is
not a getter, it's a function, right?

86
00:06:07.650 --> 00:06:12.550
And so, computer properties would use get,
the actual actions we don't.

87
00:06:12.550 --> 00:06:16.946
We didn't do it on remove,
I think we were just, talking and typing,

88
00:06:16.946 --> 00:06:19.193
sometimes we make some boo-boos.

89
00:06:19.193 --> 00:06:22.408
So I'm just gonna go and, one of
the other things I investigated was,

90
00:06:22.408 --> 00:06:24.760
does it need to be an anonymous function?

91
00:06:24.760 --> 00:06:28.909
It does not, so
now we should be able to add it.

92
00:06:32.332 --> 00:06:33.162
&gt;&gt; Steve Kinney: And we got,

93
00:06:33.162 --> 00:06:37.408
from just defining regular
objects with regular methods and

94
00:06:37.408 --> 00:06:42.660
just changing properties, we got
an awful lot of functionality for free.

95
00:06:42.660 --> 00:06:47.126
If we wanted to implement
mark all as unpacked,

96
00:06:47.126 --> 00:06:52.262
you could do that on the item list,
just literally a for

97
00:06:52.262 --> 00:06:58.218
loop when you just set all of
their packs to false, that's it.

98
00:06:58.218 --> 00:07:03.700
[LAUGH] If you wanted to rename one,
just change the value on it.

99
00:07:04.950 --> 00:07:10.130
We saw that we can wire up these
input fields when they change

100
00:07:10.130 --> 00:07:14.550
to just changing the packed filter and
the unpacked filter.

101
00:07:14.550 --> 00:07:19.300
And we have computed arrays that would
then be able to filter out that array.

102
00:07:20.370 --> 00:07:24.944
At this point, it is simply calling the
rest of the methods that we implemented

103
00:07:24.944 --> 00:07:28.498
from React, which I'll kinda
leave as an exercise for you.

104
00:07:28.498 --> 00:07:33.128
But all of the state managing is handled
really cleanly, I think, in our actual

105
00:07:33.128 --> 00:07:37.500
individual item as well as this kind of
item store or item list that we have.

106
00:07:37.500 --> 00:07:41.720
That kind of manages the ability of adding
one to the list, how it filters and so

107
00:07:41.720 --> 00:07:42.650
on and so forth.

