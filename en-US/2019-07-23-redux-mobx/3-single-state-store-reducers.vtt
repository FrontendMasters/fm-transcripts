WEBVTT

1
00:00:00.140 --> 00:00:02.680
&gt;&gt; Steve Kinney: Terminology out of
the way, we're good to go on that front.

2
00:00:02.680 --> 00:00:07.980
We're gonna talk a little bit about
Redux outside of React, right?

3
00:00:07.980 --> 00:00:12.840
We'll understand exactly how
Redux works all the way through.

4
00:00:12.840 --> 00:00:18.075
And then we will then worry
about bringing it into React.

5
00:00:18.075 --> 00:00:22.100
So what is Redux, like I said,
we'll talk about outside of React.

6
00:00:22.100 --> 00:00:27.794
It's basically, you take the entire
state of your application,

7
00:00:27.794 --> 00:00:31.630
and store in one big
old JavaScript object.

8
00:00:31.630 --> 00:00:35.710
If that sounds insane to you,
it's actually, Redux gives you a bunch

9
00:00:35.710 --> 00:00:40.490
of helpers to make this manageable and
brings a sane approach to it.

10
00:00:40.490 --> 00:00:43.970
One of the reasons why this is really cool
to have it in one plain old JavaScript

11
00:00:43.970 --> 00:00:48.190
object is, theoretically,
you could build a tooling to, and

12
00:00:48.190 --> 00:00:52.570
we actually use this a lot in our testing
with Cypress and stuff along those lines.

13
00:00:52.570 --> 00:00:56.750
You can basically take an entire state of
the application, take that one object.

14
00:00:56.750 --> 00:01:00.840
Serialize it using JSON stringify,
and then

15
00:01:00.840 --> 00:01:05.950
rehydrate the entire state of your app to
get exactly that state back again, right?

16
00:01:05.950 --> 00:01:07.980
It's totally separate from your UI, so

17
00:01:07.980 --> 00:01:11.310
you're not managing any state in
React except maybe input fields or

18
00:01:11.310 --> 00:01:15.790
stuff along those lines, ephemeral
state that doesn't really matter.

19
00:01:15.790 --> 00:01:19.161
And we're working right now in building
some of the tooling to basically

20
00:01:19.161 --> 00:01:22.918
allow support to try to get one of those
JSON data structures from our customers if

21
00:01:22.918 --> 00:01:24.257
they're having a problem.

22
00:01:24.257 --> 00:01:28.311
Where basically now, instead of when
we get a customer-found defect, and

23
00:01:28.311 --> 00:01:31.430
we're trying to recreate the bug,
can't do it, right.

24
00:01:31.430 --> 00:01:35.174
We could actually literally take
the situation that they were in, and

25
00:01:35.174 --> 00:01:39.244
recreate it in our browsers, and
hopefully be able to work with it, right?

26
00:01:39.244 --> 00:01:41.958
So for a testing reason,
for a debugging reason,

27
00:01:41.958 --> 00:01:44.360
this is actually a really
kind of cool idea.

28
00:01:44.360 --> 00:01:48.330
And it also makes it very maintainable
because modifying an object, sure,

29
00:01:48.330 --> 00:01:51.670
immutably, right, which makes it
a little bit tricky in JavaScript.

30
00:01:51.670 --> 00:01:54.990
And that being the sole source of
truth for your state is really cool.

31
00:01:56.700 --> 00:02:01.183
The thing is, you don't just start
adjusting that tree in Redux, right,

32
00:02:01.183 --> 00:02:02.831
in MOBX, you can, right?

33
00:02:02.831 --> 00:02:07.130
The way that you change the tree is
that you dispatch actions, right?

34
00:02:08.370 --> 00:02:12.400
What is an action, an action is basically
saying something happened, right?

35
00:02:12.400 --> 00:02:16.820
They clicked that button,
they adjusted that value,

36
00:02:16.820 --> 00:02:22.690
we heard back from the API, something
along those, a thing has happened, right?

37
00:02:22.690 --> 00:02:26.050
And we can kinda look at
the current state of the world, and

38
00:02:26.050 --> 00:02:29.910
the thing that happened, and figure out
what the new state of the world is, right?

39
00:02:29.910 --> 00:02:32.112
So we dispatch some actions and
they go out.

40
00:02:32.112 --> 00:02:36.593
This is cool to talk about,
let's look at some very

41
00:02:36.593 --> 00:02:40.876
scientific illustrations,
that was sarcasm.

42
00:02:40.876 --> 00:02:46.131
The kind of main thing in Redux,
this is why I bought an iPad Pro.

43
00:02:46.131 --> 00:02:51.048
And the main thing in Redux is that you
have this thing called a reducer function,

44
00:02:51.048 --> 00:02:55.060
right, and you're like,
this sounds complicated.

45
00:02:55.060 --> 00:03:00.430
A reducer function is shockingly simple
when we look at it in isolation.

46
00:03:00.430 --> 00:03:04.479
It's a pure function, right,
like we talked about earlier, and

47
00:03:04.479 --> 00:03:06.515
it takes exactly two arguments.

48
00:03:06.515 --> 00:03:11.092
It takes the current state of the world,
right, it takes, again,

49
00:03:11.092 --> 00:03:13.031
that giant object, right?

50
00:03:13.031 --> 00:03:17.299
Or we'll see that there's a trick for
breaking it into smaller reducers and

51
00:03:17.299 --> 00:03:19.443
smaller pieces of that giant object.

52
00:03:19.443 --> 00:03:23.680
But it takes that giant object which
is the entire state of your UI.

53
00:03:23.680 --> 00:03:28.069
And it takes, and something comes out
the other end, which is the new state.

54
00:03:28.069 --> 00:03:31.672
Now, if nothing happened, you're gonna
get the same state of your object.

55
00:03:31.672 --> 00:03:35.548
But it takes the entire state of your UI,
some action,

56
00:03:35.548 --> 00:03:38.720
something that has happened, right?

57
00:03:38.720 --> 00:03:41.303
And it goes, well,
here's the state of the world,

58
00:03:41.303 --> 00:03:43.727
here's some information
about what happened.

59
00:03:43.727 --> 00:03:48.137
And basically, you write the logic on what
the new state of the world is, right?

60
00:03:48.137 --> 00:03:52.150
Once we have that in place, right,
our React app can listen for

61
00:03:52.150 --> 00:03:57.200
that new state of the world,
which is effectively a bunch of props.

62
00:03:57.200 --> 00:04:02.850
Do all of its React virtual
DOM black magic that it does,

63
00:04:02.850 --> 00:04:05.507
right, and spit a new UI.

64
00:04:05.507 --> 00:04:09.717
At that point, we know that in React,
we can do an on-click event, or something,

65
00:04:09.717 --> 00:04:11.057
other events can happen.

66
00:04:11.057 --> 00:04:16.689
Things happen which create an action
which go back into the reducer function

67
00:04:16.689 --> 00:04:22.235
with the current state of the world,
and the whole cycle repeats, right?

68
00:04:22.235 --> 00:04:25.866
As a user modifies the application, we
say everything that he does is an action.

69
00:04:25.866 --> 00:04:29.022
We take whatever the last state of the
world was, whatever that new action is.

70
00:04:29.022 --> 00:04:32.834
We spit out a new state of the world,
that re-renders our React app,

71
00:04:32.834 --> 00:04:35.878
which adjusts the DOM,
everything goes really well.

72
00:04:35.878 --> 00:04:39.199
We're effectively separating all
of our state management outside of

73
00:04:39.199 --> 00:04:43.251
the React application, and just treating
it as a giant JavaScript object that we're

74
00:04:43.251 --> 00:04:44.620
using with pure functions.

75
00:04:44.620 --> 00:04:48.920
There's one more concept that
is totally optional, and

76
00:04:48.920 --> 00:04:50.950
it's this idea of action creators.

77
00:04:50.950 --> 00:04:55.540
An action could just be a string or
a number, right?

78
00:04:55.540 --> 00:04:59.020
Likely, your application's complicated
enough that that's not feasible, right?

79
00:04:59.020 --> 00:05:03.628
You wanna have some metadata like, what
kind of action, what was the value, right,

80
00:05:03.628 --> 00:05:06.772
what got back from the API,
something along those lines.

81
00:05:06.772 --> 00:05:08.262
You could theoretically,

82
00:05:08.262 --> 00:05:12.610
that action is just an object, and you
could type all those objects out by hand.

83
00:05:12.610 --> 00:05:17.410
It will totally work, you can skip
the whole action creator part if

84
00:05:17.410 --> 00:05:22.052
you really want to,
it's totally theoretically kind of fine.

85
00:05:22.052 --> 00:05:24.396
What the action creator functions do,

86
00:05:24.396 --> 00:05:29.093
you're making functions that will spit
out the action object consistently.

87
00:05:29.093 --> 00:05:34.281
So that you didn't make a typo, and now
you're throwing console logs everywhere,

88
00:05:34.281 --> 00:05:37.803
trying to guess,
[LAUGH] why didn't it trigger, right?

89
00:05:37.803 --> 00:05:41.073
Cuz you mistyped the action type,
or you mistyped the word type,

90
00:05:41.073 --> 00:05:42.630
something along those lines.

91
00:05:42.630 --> 00:05:47.282
So basically, you didn't flub,
the functions help you, right?

92
00:05:47.282 --> 00:05:51.035
If you flub the name of a function,
right, your application will break,

93
00:05:51.035 --> 00:05:52.377
which is good sometimes.

94
00:05:52.377 --> 00:05:56.842
Sometimes it's bad, but sometimes a big
red pile of errors in the console that

95
00:05:56.842 --> 00:06:01.730
tell you exactly where things went wrong
is like a glass of water, right, like.

