WEBVTT

1
00:00:00.340 --> 00:00:02.390
&gt;&gt; Steve Kinney: Right, so
what are the properties here?

2
00:00:02.390 --> 00:00:10.833
Kind of a little bit of a hack is to say
everything that we're gonna need up top.

3
00:00:13.074 --> 00:00:17.730
&gt;&gt; Steve Kinney: And so I'm actually gonna
keep a reference to the store, right?

4
00:00:17.730 --> 00:00:21.200
So I can say hey, item,
right what item list are you on?

5
00:00:21.200 --> 00:00:25.030
If I need to do the reference back up,
cuz it's all, instead of having these data

6
00:00:25.030 --> 00:00:29.300
structures that we have to navigate,
this can just point to the other object.

7
00:00:29.300 --> 00:00:34.400
So I can say itemStore,
go through the items, find an item, and

8
00:00:34.400 --> 00:00:37.840
take that individual item, say hey,
point back up to your item list.

9
00:00:37.840 --> 00:00:42.620
And it's just somewhat object
oriented programming at this point.

10
00:00:42.620 --> 00:00:45.600
And things can just point to each other,
which is pretty cool.

11
00:00:46.820 --> 00:00:55.177
And so we'll have an observable,
&gt;&gt; Steve Kinney: Value.

12
00:00:55.177 --> 00:00:59.495
That maybe by default is,
I don't know an empty string just in case.

13
00:01:01.511 --> 00:01:08.330
&gt;&gt; Steve Kinney: And
an observable whether or not it's packed.

14
00:01:08.330 --> 00:01:12.620
And let's say that's if you just added it
to the list, I'm all about the person who

15
00:01:12.620 --> 00:01:16.000
adds a thing that you already did to your
to do list to feel important for the day.

16
00:01:16.000 --> 00:01:18.320
But let's assume that if you're
adding it to your packing list,

17
00:01:18.320 --> 00:01:21.770
maybe you haven't packed it yet,
cuz why else did you do this?

18
00:01:21.770 --> 00:01:24.500
Cool, and we can give it a constructor,

19
00:01:24.500 --> 00:01:27.010
cuz we're gonna wanna set
some of this up at the time.

20
00:01:27.010 --> 00:01:33.490
And we'll say, whatever the value is,
I have lodash's unique ID in here.

21
00:01:33.490 --> 00:01:36.898
So we'll say, sure,
we can just effectively do that up here.

22
00:01:42.257 --> 00:01:46.507
&gt;&gt; Steve Kinney: Right, so take the value,
packed is gonna default to false,

23
00:01:46.507 --> 00:01:47.990
this should be fine.

24
00:01:47.990 --> 00:01:51.820
So when they create it, we'll allow
them to also set the value there,

25
00:01:51.820 --> 00:01:56.255
we'll say this.value equals value.

26
00:01:56.255 --> 00:01:58.620
All right, so
what are the computer properties here?

27
00:01:58.620 --> 00:02:02.630
Well, we know that we use
this unpacked before, right?

28
00:02:02.630 --> 00:02:04.760
So we need to just basically,
and we can compute the whether or

29
00:02:04.760 --> 00:02:08.800
not it's unpacked by whether or
not it's packed.

30
00:02:08.800 --> 00:02:14.157
Right so we can say computed unpacked

31
00:02:16.425 --> 00:02:20.253
&gt;&gt; Steve Kinney: We'll just return not,

32
00:02:20.253 --> 00:02:25.620
the opposite of this.packed.

33
00:02:25.620 --> 00:02:27.870
And we can also give it a nice method for
toggling.

34
00:02:27.870 --> 00:02:32.148
So we'll say action.bound, cuz that's
easier than figuring out whether it's

35
00:02:32.148 --> 00:02:34.770
packed and switching it to the opposite.

36
00:02:34.770 --> 00:02:38.955
We'll just abstract that away and
we'll say the toggle is,

37
00:02:47.170 --> 00:02:48.291
&gt;&gt; Steve Kinney: Flip it to the opposite

38
00:02:48.291 --> 00:02:49.295
of whatever it was.

39
00:02:49.295 --> 00:02:51.475
All right, so
if it's packed it will become unpacked

40
00:02:58.512 --> 00:02:59.333
&gt;&gt; Steve Kinney: Cool, and

41
00:02:59.333 --> 00:03:02.080
we could do another one for remove.

42
00:03:02.080 --> 00:03:04.208
Cuz remove is a little bit tricky.

43
00:03:04.208 --> 00:03:07.890
We need to, when we say, hey,
item, I need to remove you.

44
00:03:07.890 --> 00:03:11.030
It's actually,
what does the item itself do?

45
00:03:11.030 --> 00:03:12.170
It's like, I don't know.

46
00:03:12.170 --> 00:03:16.720
Basically it has to tell the item
list that it needs to be removed.

47
00:03:16.720 --> 00:03:18.840
Right, so we can actually,
we can implement this one.

48
00:03:18.840 --> 00:03:21.100
We might not wire it up all the way.

49
00:03:21.100 --> 00:03:23.224
But we can say action.bound,

50
00:03:23.224 --> 00:03:27.155
I think it very nicely shows
why I like [INAUDIBLE] so much.

51
00:03:29.341 --> 00:03:36.690
&gt;&gt; Steve Kinney: So
go back up to the actual store.

52
00:03:36.690 --> 00:03:39.380
Or list in this case, either one,
I think I've called it a store.

53
00:03:39.380 --> 00:03:42.886
Yeah, we'll call it a list.

54
00:03:44.805 --> 00:03:48.482
&gt;&gt; Steve Kinney: Cool, and
we'll change this construct a little bit.

55
00:03:53.222 --> 00:04:00.750
&gt;&gt; Steve Kinney: We'll pass a reference to
the list when we create the object, right.

56
00:04:00.750 --> 00:04:03.690
So we'll create the object,
we'll say hey, this is what the item is.

57
00:04:03.690 --> 00:04:07.215
Also, here's a pointer back
up to the list itself,

58
00:04:07.215 --> 00:04:08.530
of when you need to remove yourself.

59
00:04:10.220 --> 00:04:14.842
So we'll say this.list.removeItem,

60
00:04:14.842 --> 00:04:19.202
and we'll just say, this
&gt;&gt; Speaker 2: Hey Steve.

61
00:04:19.202 --> 00:04:21.185
&gt;&gt; Steve Kinney: Yeah.
&gt;&gt; Speaker 2: So I feel like I'm getting

62
00:04:21.185 --> 00:04:25.700
some of the observables, but
I'm not getting the action.bound one.

63
00:04:25.700 --> 00:04:26.723
Can you explain that?

64
00:04:26.723 --> 00:04:29.436
&gt;&gt; Steve Kinney: Yeah, so that's
effectively when we use it in our react

65
00:04:29.436 --> 00:04:32.320
application, how we lose track
of this on the event loop.

66
00:04:32.320 --> 00:04:33.030
Right?

67
00:04:33.030 --> 00:04:38.581
And so normally, you'd have to bind it,
this.change equals this.chang.bindThis.

68
00:04:38.581 --> 00:04:43.347
So it's effectively, this decorator is
automatically doing that binding to

69
00:04:43.347 --> 00:04:48.270
the current object so that we don't have
to do it in our React application at all.

