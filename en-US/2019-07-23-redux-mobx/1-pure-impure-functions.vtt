WEBVTT

1
00:00:00.000 --> 00:00:02.002
&gt;&gt; Steve Kinney: We're gonna talk
a little bit about some terminology,

2
00:00:02.002 --> 00:00:03.628
just to make sure we're
all on the same page.

3
00:00:03.628 --> 00:00:06.468
Cuz if we get really deep into this and
I'm talking about pure and

4
00:00:06.468 --> 00:00:09.219
impure functions, you're like,
I don't know about this.

5
00:00:09.219 --> 00:00:13.491
Or what does it mean to not
mutate state in a language where

6
00:00:13.491 --> 00:00:18.121
all of your basic data structures
are mutable, [LAUGH] right?

7
00:00:18.121 --> 00:00:20.231
And how do we do that, right?

8
00:00:20.231 --> 00:00:23.593
Cuz otherwise,
to have some common language and

9
00:00:23.593 --> 00:00:27.703
some common terminology will
probably go a long way for us.

10
00:00:27.703 --> 00:00:31.061
So we'll talk first about pure and
impure functions.

11
00:00:31.061 --> 00:00:33.966
A pure function,
I am a liberal arts major, but

12
00:00:33.966 --> 00:00:38.850
what I'm told is a pure function is the
functions you see in math class, right?

13
00:00:38.850 --> 00:00:43.836
Where things go in and
things come out, right?

14
00:00:43.836 --> 00:00:49.240
And if the same two arguments go in,
the same result comes out.

15
00:00:49.240 --> 00:00:54.257
Impure functions can mutate things, or
change stuff, or have other side effects.

16
00:00:54.257 --> 00:00:57.224
Effectively, if you wanna be
totally on the pure function,

17
00:00:57.224 --> 00:01:01.005
functional programming train, the second
you throw a console log in there,

18
00:01:01.005 --> 00:01:03.410
it's technically an impure function,
right?

19
00:01:03.410 --> 00:01:07.734
Cuz there's another thing happening
on top of two arguments coming in, or

20
00:01:07.734 --> 00:01:10.559
x number of arguments coming in and
one leaving.

21
00:01:10.559 --> 00:01:14.440
So this is a pure function.

22
00:01:14.440 --> 00:01:16.979
It takes a and b and returns a + b.

23
00:01:16.979 --> 00:01:21.952
An impure function is one that just hopes
that b is existing in the kind of closure

24
00:01:21.952 --> 00:01:24.230
scope or global scope, right?

25
00:01:24.230 --> 00:01:26.260
That involves things
outside of the function.

26
00:01:26.260 --> 00:01:28.810
That is enough to make something impure.

27
00:01:28.810 --> 00:01:33.054
As I mentioned before,
a console log makes it impure, right?

28
00:01:33.054 --> 00:01:38.534
And also, and this is important because
Redux only deals with pure functions.

29
00:01:38.534 --> 00:01:43.670
Doing a thing where you hit an API,
add a callback to the event

30
00:01:43.670 --> 00:01:48.329
queue that eventually gets
called is impure, right?

31
00:01:49.500 --> 00:01:51.294
Mostly, mutating arrays and

32
00:01:51.294 --> 00:01:55.752
objects is also impure cuz we're
changing stuff from the outside world.

33
00:01:55.752 --> 00:01:58.422
And this is tricky cuz
as I mentioned before,

34
00:01:58.422 --> 00:02:02.170
all of our data structures in
JavaScript are mutable, right?

35
00:02:02.170 --> 00:02:03.280
Except, I guess, strings.

