WEBVTT

1
00:00:00.370 --> 00:00:06.515
&gt;&gt; Steve Kinney: So let's go ahead and
we're going to try that out.

2
00:00:06.515 --> 00:00:14.584
We'll import set from lodash/fp/set.

3
00:00:14.584 --> 00:00:18.183
So you'll need the functional
programming version, for

4
00:00:18.183 --> 00:00:23.544
reasons of backwards compatibility, the
regular version of set mutates the object,

5
00:00:23.544 --> 00:00:25.908
so it's not acceptable for our uses.

6
00:00:25.908 --> 00:00:28.476
You could also write this
yourself from scratch, it's just,

7
00:00:28.476 --> 00:00:32.622
since it's not totally on topic I'm not
going to, I'm just gonna use this helper.

8
00:00:32.622 --> 00:00:38.260
And so the set takes a kind of,
this is pseudo-code,

9
00:00:38.260 --> 00:00:43.380
chain of properties, cuz we need lists,
and we need the list,

10
00:00:43.380 --> 00:00:47.590
then the entities, then the list ID we're
looking for, then the cards, right?

11
00:00:47.590 --> 00:00:49.138
So it takes the chain of properties.

12
00:00:51.664 --> 00:00:59.471
&gt;&gt; Steve Kinney: It will take then what
you're trying to replace, so in this case.

13
00:01:01.323 --> 00:01:03.655
&gt;&gt; Steve Kinney: And
then the object you wanna replace it on.

14
00:01:03.655 --> 00:01:05.911
And the cool thing about, so like.

15
00:01:11.088 --> 00:01:12.160
&gt;&gt; Steve Kinney: Then the object.

16
00:01:12.160 --> 00:01:15.760
The cool thing about this is, you can
with, load as the functional programing

17
00:01:15.760 --> 00:01:20.140
one, you can only give it one argument and
it'll return you a function, waiting for

18
00:01:20.140 --> 00:01:23.440
the second argument, which will return
you a function, waiting for the third, or

19
00:01:23.440 --> 00:01:25.320
you can give it all
three arguments at once.

20
00:01:25.320 --> 00:01:28.916
So if there's a piece you're constantly
typing over and over again, just give

21
00:01:28.916 --> 00:01:32.673
it that first argument, and it'll give you
a function, waiting for the second and

22
00:01:32.673 --> 00:01:36.560
the third, functional programming is fun,
you should watch the other course on it.

23
00:01:36.560 --> 00:01:41.875
We're just gonna have you use
the simplest version right now,

24
00:01:41.875 --> 00:01:46.685
which is, we can basically say that,
const cards is this

25
00:01:46.685 --> 00:01:51.820
list.entities, with the listId
that we're looking for.

26
00:01:53.410 --> 00:01:55.826
This is effectively what I have
on what's on currently line 14.

27
00:02:03.275 --> 00:02:05.070
&gt;&gt; Steve Kinney: So list, plural.

28
00:02:05.070 --> 00:02:07.600
So this will go ahead and
give me back a new array,

29
00:02:07.600 --> 00:02:12.990
which was all of the cardIds for
that list with our new additional one.

30
00:02:12.990 --> 00:02:17.200
And then what we can do is, we can just
basically return, I can store this in

31
00:02:17.200 --> 00:02:22.168
a variable too, the set helper, and
we'll say, okay, I need the entities,

32
00:02:22.168 --> 00:02:27.024
cuz it's list.entities, and we'll pass
in the listId that we're looking for.

33
00:02:28.310 --> 00:02:30.050
And then we'll pass in the cards.

34
00:02:32.130 --> 00:02:36.670
And then the new cards we just created,
and the overall state of our object.

35
00:02:36.670 --> 00:02:39.368
We can get rid of all of this.

36
00:02:43.973 --> 00:02:46.465
&gt;&gt; Steve Kinney: So far a lot cleaner,
it's three lines of code.

37
00:02:46.465 --> 00:02:50.632
Guys, I'll leave this is
an excercise to the reader,

38
00:02:50.632 --> 00:02:55.615
you could take this one step farther,
you could either create a,

39
00:02:55.615 --> 00:03:00.076
add car to list function and
never think about this again.

40
00:03:00.076 --> 00:03:05.502
Or even, you can create a add entities and
add child ID, which is just gonna ask for,

41
00:03:05.502 --> 00:03:10.320
effectively, what's the property you
wanna change, any of that stuff,

42
00:03:10.320 --> 00:03:14.270
but you can continue
building abstractions here.

43
00:03:14.270 --> 00:03:18.353
I would probably, yeah,
I might make a reusable add entity and

44
00:03:18.353 --> 00:03:20.518
add child ID to entity function.

45
00:03:20.518 --> 00:03:24.664
And then I might take the versions
of that, that are ready for

46
00:03:24.664 --> 00:03:29.538
just the list object, I might say like,
add list, add card ID to list,

47
00:03:29.538 --> 00:03:33.004
and unit test it, and
never think about it again.

48
00:03:33.004 --> 00:03:37.580
Cuz then, the hard part of the of
the Redux reducer here was not necessarily

49
00:03:37.580 --> 00:03:41.160
Redux, it was trying to
create a new object.

50
00:03:41.160 --> 00:03:44.060
If we can just abstract that away,
it's even better.

51
00:03:44.060 --> 00:03:47.300
So we'll actually pull out an add entity,
like I'll pull one out that we can look

52
00:03:47.300 --> 00:03:50.978
at in a little bit, and it's just
going to be waiting for this property.

53
00:03:50.978 --> 00:03:54.839
And these two kind of fill in the rest for
us.

54
00:03:54.839 --> 00:03:59.419
So definitely have an eye on taking the
parts of your code that make you the most

55
00:03:59.419 --> 00:04:02.110
sad, and thinking, can you abstract them?

56
00:04:03.440 --> 00:04:04.320
So I can do this.

57
00:04:06.953 --> 00:04:07.853
&gt;&gt; Steve Kinney: And let's go take it for

58
00:04:07.853 --> 00:04:09.930
a spin to make sure I haven't
made any fatal mistakes.

59
00:04:11.830 --> 00:04:13.040
And it's added as well.

60
00:04:13.040 --> 00:04:16.190
So we took an otherwise gnarly function,
made it three lines,

61
00:04:16.190 --> 00:04:20.040
figured out a way that we could probably,
we're not gonna make it fewer lines, but

62
00:04:20.040 --> 00:04:23.880
we can make future us understand what
this line does by calling a function like

63
00:04:23.880 --> 00:04:25.285
add card ID to list.

64
00:04:25.285 --> 00:04:26.656
[LAUGH] Right?

65
00:04:26.656 --> 00:04:29.890
The act of naming the function
will make it a little bit easier.

66
00:04:31.210 --> 00:04:34.765
So, effectively, adding a list and

67
00:04:34.765 --> 00:04:39.620
an user is even simpler, because instead
of having to do it, the way we just added

68
00:04:39.620 --> 00:04:45.110
a card in the card reducer, is effectively
the same code that we're gonna write.

69
00:04:45.110 --> 00:04:48.855
And we could use a helper here as well, as
the same code that we're gonna write for

70
00:04:48.855 --> 00:04:49.920
users and list.

71
00:04:49.920 --> 00:04:51.999
So I'm gonna kind of pull those out, so

72
00:04:51.999 --> 00:04:54.585
we don't watch me do
the same thing three times.

73
00:04:54.585 --> 00:04:56.360
And then, once we have that in place,

74
00:04:56.360 --> 00:04:58.750
we should have an interesting
challenge to solve.

