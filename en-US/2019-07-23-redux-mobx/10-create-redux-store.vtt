WEBVTT

1
00:00:03.037 --> 00:00:06.180
&gt;&gt; Steve Kinney: We got a chance to
just play around with Redux by itself.

2
00:00:06.180 --> 00:00:08.534
And Redux is again, separate from React.

3
00:00:08.534 --> 00:00:11.500
You can use it on the server,
you can use it in any framework you want.

4
00:00:11.500 --> 00:00:16.412
It's just a convenient way to
manage some form of state like in

5
00:00:16.412 --> 00:00:19.770
JavaScript agnostically, right?

6
00:00:19.770 --> 00:00:23.930
But I think it's be more useful rather
than kind of just looking at the methods

7
00:00:23.930 --> 00:00:26.192
to actually see it with a user interface.

8
00:00:26.192 --> 00:00:30.504
So [INAUDIBLE] I'm gonna basically take
a very simple counter where we can see it

9
00:00:30.504 --> 00:00:31.365
in isolation.

10
00:00:31.365 --> 00:00:34.140
I'll have the ability to increment,
you'll implement the ability to decrement.

11
00:00:34.140 --> 00:00:34.970
We'll kinda see it there.

12
00:00:34.970 --> 00:00:39.203
And then we'll start building a little bit
more complicated application once we've

13
00:00:39.203 --> 00:00:42.037
kind of just looked at some
of the concepts in isolation.

14
00:00:42.037 --> 00:00:44.037
After we've coded a little bit,

15
00:00:44.037 --> 00:00:47.979
then I'll kind of explain the concepts
a little bit more deeply.

16
00:00:47.979 --> 00:00:52.921
All right, so
here we've got a very simple counter.

17
00:00:52.921 --> 00:00:56.013
And this is, it doesn't do anything,
it doesn't have any state.

18
00:00:56.013 --> 00:00:57.984
And we don't need it to have any state.

19
00:00:57.984 --> 00:01:01.751
We have two libraries
that we're going to use.

20
00:01:01.751 --> 00:01:05.204
We're going to need to use Redux, right?

21
00:01:05.204 --> 00:01:09.714
And then there is a library,
we saw it before, we have dispatch,

22
00:01:09.714 --> 00:01:12.256
we could say on component did mount,

23
00:01:12.256 --> 00:01:16.608
subscribe and set state in this component,
so on and so forth.

24
00:01:16.608 --> 00:01:23.637
We could theoretically just use Redux and
React and wire it all up ourselves.

25
00:01:23.637 --> 00:01:26.857
But we could also just use the library,

26
00:01:26.857 --> 00:01:31.061
which is very conveniently
called React-Redux.

27
00:01:31.061 --> 00:01:35.480
Again, it is not unlike some of
those functions we saw earlier.

28
00:01:35.480 --> 00:01:37.876
It does what it says on the tin.

29
00:01:41.118 --> 00:01:44.973
&gt;&gt; Steve Kinney: Import redux from Redux.

30
00:01:44.973 --> 00:01:48.132
We'll probably actually
pull off createStore,

31
00:01:48.132 --> 00:01:51.900
which is really the only one we
need right now, in a second.

32
00:01:51.900 --> 00:01:56.106
And React-Redux actually only has two

33
00:01:56.106 --> 00:02:00.826
methods that it provides for
the most part.

34
00:02:00.826 --> 00:02:03.567
Connect and Provider.

35
00:02:03.567 --> 00:02:07.439
Provider, if you've ever used
like the Context API before,

36
00:02:07.439 --> 00:02:12.352
it's just basically a way to pass the kind
of reference to the store that we're

37
00:02:12.352 --> 00:02:15.121
going to create to your React application.

38
00:02:15.121 --> 00:02:18.990
React-Redux, cool.

39
00:02:18.990 --> 00:02:21.734
And here we'll just grab createStore for
now.

40
00:02:25.718 --> 00:02:26.325
&gt;&gt; Steve Kinney: All right.

41
00:02:26.325 --> 00:02:28.225
We're going to do this all in this file,
right.

42
00:02:28.225 --> 00:02:33.848
One of the one of the criticisms of Redux
is that there is a lot of boilerplate,

43
00:02:33.848 --> 00:02:34.464
right?

44
00:02:34.464 --> 00:02:37.598
And usually it involves
like making many files.

45
00:02:37.598 --> 00:02:41.720
Now, in a decent sized application,
like, that is smart, right.

46
00:02:41.720 --> 00:02:44.900
For any of the complaints about
there being too much boilerplate,

47
00:02:44.900 --> 00:02:48.930
to be honest, you are generally creating
those files at the beginning of a project,

48
00:02:48.930 --> 00:02:52.705
and then you are living with that code
base for the next several years, right?

49
00:02:52.705 --> 00:02:56.000
It's not too terrible, right.

50
00:02:56.000 --> 00:02:58.236
And once you kind of get into the flow,
it's not too bad.

51
00:02:58.236 --> 00:03:00.071
But for now, just to kind of
see everything in one place,

52
00:03:00.071 --> 00:03:01.612
we're gonna do everything
in this index.js.

53
00:03:01.612 --> 00:03:03.823
When we get to a more
complicated application,

54
00:03:03.823 --> 00:03:05.604
we'll begin to pull everything out.

55
00:03:05.604 --> 00:03:07.201
All right, cool.

56
00:03:07.201 --> 00:03:09.675
So we've got the ability
to create a store.

57
00:03:09.675 --> 00:03:11.691
We know that we need to have a reducer,

58
00:03:11.691 --> 00:03:15.163
but we also know that reducers
are just kind of normal functions.

59
00:03:15.163 --> 00:03:18.597
So I'll start with my reducer.

60
00:03:18.597 --> 00:03:26.841
And that's gonna take the state of
the world and the action again.

61
00:03:30.970 --> 00:03:32.912
&gt;&gt; Steve Kinney: We'll make like
an initial state object up here so

62
00:03:32.912 --> 00:03:34.356
I don't have to put in the function.

63
00:03:34.356 --> 00:03:38.396
And we'll say like,

64
00:03:38.396 --> 00:03:42.442
count is 0, right?

65
00:03:42.442 --> 00:03:45.455
And so we'll make a reducer.

66
00:03:45.455 --> 00:03:46.880
Default set initial state.

67
00:03:46.880 --> 00:03:50.986
All right, so now,
things are going to happen in here.

68
00:03:50.986 --> 00:03:52.269
And no matter what,

69
00:03:52.269 --> 00:03:57.330
you wanna make sure you return some state
if everything falls through, right?

70
00:03:57.330 --> 00:04:01.715
The reason we return state at the end is,
as I mentioned earlier,

71
00:04:01.715 --> 00:04:04.766
every action will go
through every reducer.

72
00:04:04.766 --> 00:04:07.217
There's really only one reducer,
but the combined reducers.

73
00:04:07.217 --> 00:04:11.937
So, if a given reducer does not
care about an action, cool,

74
00:04:11.937 --> 00:04:16.486
just return that same piece of
the tree that we had before.

75
00:04:16.486 --> 00:04:20.139
Like, totally fine, not every reducer's
gonna care about every action.

76
00:04:20.139 --> 00:04:22.678
But we do need to make sure
that as it flows through,

77
00:04:22.678 --> 00:04:25.351
that then we're then returning
the same object out.

78
00:04:25.351 --> 00:04:27.255
All right, neat.

79
00:04:27.255 --> 00:04:30.665
So there's two ways to do this.

80
00:04:30.665 --> 00:04:33.356
A lot of times you'll
see switch statements,

81
00:04:33.356 --> 00:04:35.360
I don't like switch statements.

82
00:04:35.360 --> 00:04:36.850
That's just a personal preference.

83
00:04:38.200 --> 00:04:39.850
They're like harder for me to refactor.

84
00:04:39.850 --> 00:04:40.350
I don't know.

85
00:04:41.380 --> 00:04:46.674
So, what I'll do is usually just have
a if the action type is increment.

86
00:04:49.239 --> 00:04:52.173
&gt;&gt; Steve Kinney: Right,
we will then return.

87
00:05:04.002 --> 00:05:05.082
&gt;&gt; Steve Kinney: Plus one right?

88
00:05:05.082 --> 00:05:08.989
And this will work for us for now.

89
00:05:08.989 --> 00:05:11.533
We'll have to get a little bit more
complicated with some of that stuff we saw

90
00:05:11.533 --> 00:05:14.065
at the beginning of this workshop,
when we have multiple things going on.

91
00:05:14.065 --> 00:05:16.875
Because it's like, yeah,
I'm like replacing the only object,

92
00:05:16.875 --> 00:05:18.339
the only property on this object.

93
00:05:18.339 --> 00:05:22.943
When we get to the point where I'm trying
to, I have a much more complicated tree,

94
00:05:22.943 --> 00:05:26.908
we're gonna have to spreading stuff and
figuring out immutability.

95
00:05:26.908 --> 00:05:30.085
But let's kick that down the curve for
a little bit and

96
00:05:30.085 --> 00:05:32.705
just kind of see this all together, right.

97
00:05:32.705 --> 00:05:35.514
So if the action is the type increment,

98
00:05:35.514 --> 00:05:39.611
then what we'll do is we'll
return state.count + 1.

99
00:05:39.611 --> 00:05:44.134
Another pattern that you'll
see is this string is yet

100
00:05:44.134 --> 00:05:49.274
another opportunity for
you to mistype something, right.

101
00:05:49.274 --> 00:05:52.895
If you all of a sudden,
it's like increment, right,

102
00:05:52.895 --> 00:05:57.228
like it's basically,
that conditional is never gonna get hit,

103
00:05:57.228 --> 00:06:01.991
your state is never going to change,
you're not going to get an error.

104
00:06:01.991 --> 00:06:04.646
And you're basically gonna have to go
through the application looking for

105
00:06:04.646 --> 00:06:07.020
what happened, again,
with a trail of console logs in your wake.

106
00:06:08.410 --> 00:06:13.220
So that's what you'll see is these
getting pulled out into constants.

107
00:06:13.220 --> 00:06:16.800
Like I literally, as I was talking,
left it misspelled.

108
00:06:16.800 --> 00:06:21.210
[LAUGH] I literally just committed
the mistake that I was talking about.

109
00:06:21.210 --> 00:06:23.410
So you'll see something along these lines.

110
00:06:24.930 --> 00:06:27.980
And then we'll use this
constant without the quotes.

111
00:06:27.980 --> 00:06:32.216
And why this is nice is that,
should you misspell it now,

112
00:06:32.216 --> 00:06:34.610
your code will blow up, right?

113
00:06:34.610 --> 00:06:37.970
It will not make it through CI,
it will not go to production, right?

114
00:06:37.970 --> 00:06:41.870
Sometimes code blowing up is a good thing,
right?

115
00:06:41.870 --> 00:06:43.680
So cool.

116
00:06:43.680 --> 00:06:48.070
We've got our reducer here as well,
we've got our constant.

117
00:06:48.070 --> 00:06:52.185
If we wanted to, we could also make
an action creator here, right?

118
00:06:52.185 --> 00:06:53.458
So we could say const.

119
00:06:57.470 --> 00:06:58.415
&gt;&gt; Steve Kinney: incrementValue.

120
00:07:01.402 --> 00:07:05.356
&gt;&gt; Steve Kinney: We'll make
an action of the type increment.

121
00:07:05.356 --> 00:07:07.762
That's really all we need, right?

122
00:07:07.762 --> 00:07:10.783
Before, we were actually
passing a payload,

123
00:07:10.783 --> 00:07:13.266
this is a relatively simple version.

124
00:07:13.266 --> 00:07:18.246
I just gotta be sure that I'm
actually returning an object, cool.

125
00:07:18.246 --> 00:07:22.434
And now we can call this and
we're gonna get our object created.

126
00:07:22.434 --> 00:07:24.867
Now, it could take arguments and
add it to the payload.

127
00:07:24.867 --> 00:07:26.072
We'll see all of that in a little bit.

128
00:07:26.072 --> 00:07:28.342
But let's look at stuff
in isolation first.

129
00:07:28.342 --> 00:07:31.163
So we have the ability to
create one of these actions.

130
00:07:31.163 --> 00:07:34.940
We have the ability to modify the state or
return new state based on that action.

131
00:07:34.940 --> 00:07:38.310
We do need to go ahead and
create a store, right.

132
00:07:38.310 --> 00:07:40.430
So we'll say const store

133
00:07:42.600 --> 00:07:47.470
is createStore and
we hand it that reducer, right.

134
00:07:47.470 --> 00:07:52.330
So now we've got,
that is our Redux implementation, right?

135
00:07:52.330 --> 00:07:57.594
We could theoretically grab that store and
we could go ahead and

136
00:07:57.594 --> 00:08:03.563
dispatch a bunch of increment value
actions.w That is Redux, right?

137
00:08:03.563 --> 00:08:07.050
We'll get more nuanced and
more complicated, but that is it.

