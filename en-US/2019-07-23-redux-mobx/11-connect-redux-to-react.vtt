WEBVTT

1
00:00:00.000 --> 00:00:05.360
&gt;&gt; Steve Kinney: The next thing that
we need to do is hook it up to React.

2
00:00:05.360 --> 00:00:07.607
So the first thing I'm gonna do,
go down here, and

3
00:00:07.607 --> 00:00:11.200
I need to wrap the application in
that provider that we saw before.

4
00:00:11.200 --> 00:00:14.633
This allows React to be
able to reach into Redux,

5
00:00:14.633 --> 00:00:17.404
it basically connects the two of them.

6
00:00:17.404 --> 00:00:22.511
And we'll say Provider,
&gt;&gt; Steve Kinney: Provider

7
00:00:22.511 --> 00:00:26.069
does need a prop, anyone wanna venture
a guess as to what that prop is?

8
00:00:28.285 --> 00:00:35.834
&gt;&gt; Steve Kinney: You wanna hook it
up to a Redux store, exactly, right.

9
00:00:35.834 --> 00:00:40.721
So now the we can theoretically
hook up any component

10
00:00:40.721 --> 00:00:43.729
in this tree to our Redux store.

11
00:00:43.729 --> 00:00:47.166
Right, we are most of
the way there at this point.

12
00:00:47.166 --> 00:00:52.147
Now, this component, we're using Redux for
all of our state management, right?

13
00:00:52.147 --> 00:00:56.598
Which means we are not going
to be using React state.

14
00:00:56.598 --> 00:01:01.557
Which means everything that's
gonna come into this counter is

15
00:01:01.557 --> 00:01:06.139
going to come in as a prop,
including the current count and

16
00:01:06.139 --> 00:01:09.796
the ability to dispatch that action,
right?

17
00:01:09.796 --> 00:01:14.174
And so how do we connect a React

18
00:01:14.174 --> 00:01:18.736
component to our Redux store?

19
00:01:18.736 --> 00:01:24.551
Again, you gotta give the API
designers some credit here for

20
00:01:24.551 --> 00:01:29.579
having a series of well-named functions,
right?

21
00:01:29.579 --> 00:01:34.167
So we could say connect,
connection's a little bit of an oddball,

22
00:01:34.167 --> 00:01:35.783
we'll see in a second.

23
00:01:38.356 --> 00:01:42.451
&gt;&gt; Steve Kinney: connect itself
returns a function waiting for

24
00:01:42.451 --> 00:01:45.706
a React component that says, okay,

25
00:01:45.706 --> 00:01:50.730
what am I connecting and
then what am I connecting it to?

26
00:01:50.730 --> 00:01:54.924
So it means theoretically, if you wanna
have multiple components that we're gonna

27
00:01:54.924 --> 00:01:58.540
take our actions and the store that
we're gonna use, you could do that.

28
00:01:58.540 --> 00:02:03.249
A lot of times you'll see them together,
right, so you've got connect,

29
00:02:03.249 --> 00:02:05.790
and connect takes a few arguments.

30
00:02:05.790 --> 00:02:10.847
The most common two that you're gonna
see are some function that maps

31
00:02:10.847 --> 00:02:15.990
some state of our Redux store to
the component, so there's props that

32
00:02:15.990 --> 00:02:21.330
are getting passed in, and
something that maps the actions in, right?

33
00:02:21.330 --> 00:02:26.413
You don't have to call them this, but they
are frequently called mapStateToProps,

34
00:02:31.670 --> 00:02:34.856
&gt;&gt; Steve Kinney: And mapDispatchToProps.

35
00:02:37.329 --> 00:02:39.914
&gt;&gt; Steve Kinney: You can call them
sandwich and taco, it doesn't matter,

36
00:02:39.914 --> 00:02:42.250
right, it's just the first and
second arguments.

37
00:02:42.250 --> 00:02:43.590
This is just the convention, and

38
00:02:43.590 --> 00:02:47.280
I would totally argue that you
stick with the convention.

39
00:02:47.280 --> 00:02:54.190
And what mapStateToProps does is,
remember, we talked about that giant tree.

40
00:02:55.620 --> 00:03:02.491
Not every component is gonna care
about every piece of that tree, right?

41
00:03:02.491 --> 00:03:07.995
We can have other stuff in here, like an
error state, current user, all this stuff.

42
00:03:07.995 --> 00:03:10.038
This kinda doesn't care about any of it.

43
00:03:10.038 --> 00:03:11.510
So what mapStateToProps does is,

44
00:03:11.510 --> 00:03:16.482
it takes the entire state of your
application, that entire Redux state.

45
00:03:16.482 --> 00:03:19.439
And it allows you to pick off
the things that you want,

46
00:03:19.439 --> 00:03:22.282
that we're gonna pass as
props to that component.

47
00:03:22.282 --> 00:03:27.028
Because if we passed the entire state
into that component, that means that,

48
00:03:27.028 --> 00:03:31.555
even if stuff in the state changed
that the component didn't care about,

49
00:03:31.555 --> 00:03:33.570
we would trigger a re-render.

50
00:03:33.570 --> 00:03:34.670
Right, we don't wanna do that,

51
00:03:34.670 --> 00:03:37.760
we wanna basically say,
here are the things that you care about.

52
00:03:37.760 --> 00:03:41.051
I will pick them off the tree for
you, and I will hand them down.

53
00:03:41.051 --> 00:03:45.757
So mapStateToProps takes one or
two arguments,

54
00:03:45.757 --> 00:03:51.736
the first one is the entire state tree,
everything, right?

55
00:03:51.736 --> 00:03:54.168
And you could theoretically
just return it,

56
00:03:54.168 --> 00:03:57.075
and that will pass the entire
state of the world down.

57
00:03:57.075 --> 00:03:58.412
Right, that will actually work for

58
00:03:58.412 --> 00:04:00.384
our purposes right now cuz
there's only one thing.

59
00:04:00.384 --> 00:04:03.697
But when we build our larger applications,
that's not going to work.

60
00:04:03.697 --> 00:04:07.334
Basically, you take the entire tree,
return just the things that your component

61
00:04:07.334 --> 00:04:09.838
needs, maybe format it
as your component needs.

62
00:04:09.838 --> 00:04:14.454
One of the things we talked about in the
prequel to this workshop on React state

63
00:04:14.454 --> 00:04:19.428
was that sometimes you have to derive
additional properties from existing state,

64
00:04:19.428 --> 00:04:19.938
right?

65
00:04:19.938 --> 00:04:24.075
And so if you had done to-dos and
undone to-dos, right,

66
00:04:24.075 --> 00:04:28.730
you might wanna split them up
into two different arrays, right?

67
00:04:28.730 --> 00:04:35.403
You might wanna total stuff up and count
it, that you can also do in this function.

68
00:04:35.403 --> 00:04:38.376
So in this case, we could return
the entire state of the world,

69
00:04:38.376 --> 00:04:41.980
which is going to be effectively
this object on through.

70
00:04:41.980 --> 00:04:45.910
And we'll get a little more nuanced
in a little bit on how to do that.

71
00:04:45.910 --> 00:04:52.158
The other one is mapDispatchToProps,
which is, it takes this dispatch argument,

72
00:04:52.158 --> 00:04:56.740
which is effectively pointing
to store.dispatch, right?

73
00:04:56.740 --> 00:05:01.270
This gives you the ability to go ahead and
dispatch those

74
00:05:01.270 --> 00:05:05.590
actions to change that state, which will
then pass those new prompts into Redux.

75
00:05:05.590 --> 00:05:08.624
So what we'll do here is,
this returns an object,

76
00:05:08.624 --> 00:05:11.032
they both effectively return objects.

77
00:05:11.032 --> 00:05:15.492
This one returns objects,
we'll call this one increment, and

78
00:05:15.492 --> 00:05:20.420
that is going to dispatch, right,
the same as store.dispatch.

79
00:05:20.420 --> 00:05:22.589
And you could write your
object in here with a type and

80
00:05:22.589 --> 00:05:23.955
everything along those lines.

81
00:05:23.955 --> 00:05:28.458
But we made this helper here,
incrementValue, so

82
00:05:28.458 --> 00:05:31.713
we'll pass it in and we'll call it.

83
00:05:31.713 --> 00:05:38.735
Right, so now, our counter component
is going to get two props, right?

84
00:05:38.735 --> 00:05:43.324
It's gonna get that entire state of
the world, right, with that count on it,

85
00:05:43.324 --> 00:05:45.626
and it's gonna get an increment prop.

86
00:05:45.626 --> 00:05:49.113
The object that gets returned
out of mapStateToProps, and

87
00:05:49.113 --> 00:05:52.601
the object that gets returned
out of mapDispatchToProps,

88
00:05:52.601 --> 00:05:56.870
are combined into the props,
[LAUGH] right, that go into the component.

89
00:05:58.770 --> 00:06:04.070
So for instance,
we can actually say in this case

90
00:06:04.070 --> 00:06:09.254
const { count, increment } = this.props.

91
00:06:09.254 --> 00:06:12.397
And I'm gonna start just by console
logging to make sure we've got,

92
00:06:12.397 --> 00:06:13.425
we do a lot of talking,

93
00:06:13.425 --> 00:06:19.366
make sure that we've got,
&gt;&gt; Steve Kinney: Cool,

94
00:06:19.366 --> 00:06:22.455
also start up the application.

95
00:06:31.048 --> 00:06:34.601
&gt;&gt; Steve Kinney: Cool, unexpected token,
cuz I didn't put in the render method,

96
00:06:34.601 --> 00:06:36.701
good thing we started this up, right?

97
00:06:45.441 --> 00:06:46.680
&gt;&gt; Steve Kinney: Cool, the other one is,

98
00:06:46.680 --> 00:06:50.580
I'm getting yelled at because I have
an import, they want them all at the top.

99
00:06:54.489 --> 00:06:58.449
&gt;&gt; Steve Kinney: It gets very angry,
so I just switched versions of Node.

100
00:06:58.449 --> 00:07:00.131
Node-sass is a C++ library, so

101
00:07:00.131 --> 00:07:02.802
it has to get compiled against
a given version of Node.

102
00:07:02.802 --> 00:07:05.418
And if you are on a wrong version
of Node from when it was compiled,

103
00:07:05.418 --> 00:07:06.282
things don't work.

104
00:07:08.010 --> 00:07:11.875
&gt;&gt; Steve Kinney: Cool, so
we've got this object here.

105
00:07:11.875 --> 00:07:16.313
All right, one thing we didn't do earlier
is, we made these mapStateToProps and

106
00:07:16.313 --> 00:07:19.030
mapDispatchToProps, but
they are not magical.

107
00:07:19.030 --> 00:07:24.659
We do need to pass them in, so
the first one is mapStateToProps,

108
00:07:24.659 --> 00:07:28.118
the other one is mapDispatchToProps.

109
00:07:31.627 --> 00:07:32.761
&gt;&gt; Steve Kinney: All right, great.

110
00:07:35.433 --> 00:07:37.933
&gt;&gt; Steve Kinney: Next thing
that we have problem with is,

111
00:07:37.933 --> 00:07:40.586
this does not mutate the counter, right?

112
00:07:40.586 --> 00:07:45.499
It returns a brand new component,
so we need to store that.

113
00:07:49.732 --> 00:07:52.930
&gt;&gt; Steve Kinney: Typically,
in the kind of prequel to this workshop,

114
00:07:52.930 --> 00:07:54.787
we saw the container pattern.

115
00:07:54.787 --> 00:07:58.106
Which is, take the state on
a higher order component,

116
00:07:58.106 --> 00:08:01.130
pass it in to
the presentational component.

117
00:08:01.130 --> 00:08:04.874
This is an implementation of that
pattern that is just handled for us.

118
00:08:04.874 --> 00:08:08.856
All connect does is, it takes the two
functions to figure out, hey,

119
00:08:08.856 --> 00:08:12.578
what actions do I need to pass in,
what state do I need to pass in?

120
00:08:12.578 --> 00:08:15.369
I'll make those props and
I'll give them to this component,

121
00:08:15.369 --> 00:08:18.011
it creates one of those
higher-order components for us.

122
00:08:18.011 --> 00:08:18.740
Neat, and

123
00:08:18.740 --> 00:08:23.769
then all we need to do now is use that
new higher-order component in here.

124
00:08:23.769 --> 00:08:26.159
We should get everything we want now.

125
00:08:26.159 --> 00:08:31.764
Cool, perfect, so we've got the zero, and
we've got this function to increment.

126
00:08:31.764 --> 00:08:35.951
These are now props that are getting
passed in, and so really,

127
00:08:35.951 --> 00:08:40.383
I can now replace this one,
&gt;&gt; Steve Kinney: With count,

128
00:08:41.936 --> 00:08:45.329
&gt;&gt; Steve Kinney: And we can say onClick,

129
00:08:49.109 --> 00:08:50.126
&gt;&gt; Steve Kinney: increment.

130
00:08:54.583 --> 00:08:55.797
&gt;&gt; Steve Kinney: And up we go, right,

131
00:08:55.797 --> 00:08:59.380
we have now taken state that we
normally like putting this out.

132
00:08:59.380 --> 00:09:03.290
So state made some methods on
the class object or used hooks or

133
00:09:03.290 --> 00:09:07.380
something along those lines and
cast them in, we've separated out.

134
00:09:07.380 --> 00:09:09.890
None of React knows
anything about the state.

135
00:09:09.890 --> 00:09:13.690
This is kind of like, for me, like we
were talking about in the very beginning,

136
00:09:13.690 --> 00:09:15.301
you can take a state of the world.

137
00:09:15.301 --> 00:09:18.963
Your React application becomes
declarative, you're just saying,

138
00:09:18.963 --> 00:09:21.391
hey, show these props, fire these actions.

139
00:09:21.391 --> 00:09:26.420
Redux handles it all separately, so your
React to application is deterministic.

140
00:09:26.420 --> 00:09:30.113
If this object comes in,
the application will look like this,

141
00:09:30.113 --> 00:09:31.931
which is really kind of great.

142
00:09:31.931 --> 00:09:35.210
We'll see some other interesting
things you can do here as well.

