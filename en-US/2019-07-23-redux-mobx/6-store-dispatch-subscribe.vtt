WEBVTT

1
00:00:00.170 --> 00:00:05.203
&gt;&gt; Steve Kinney: We have getState,
we saw dispatch, right?

2
00:00:05.203 --> 00:00:07.397
Let's put a console log
inside our reducer,

3
00:00:10.476 --> 00:00:12.477
&gt;&gt; Steve Kinney: That will just console

4
00:00:12.477 --> 00:00:17.119
log our action, we'll say,
something happened.

5
00:00:19.479 --> 00:00:20.934
&gt;&gt; Steve Kinney: And
then we'll take our store,

6
00:00:24.207 --> 00:00:27.120
&gt;&gt; Steve Kinney: We'll dispatch,

7
00:00:28.863 --> 00:00:29.552
&gt;&gt; Steve Kinney: Hi.

8
00:00:34.891 --> 00:00:37.348
&gt;&gt; Steve Kinney: It needs
to be a plain object, so,

9
00:00:45.478 --> 00:00:46.358
&gt;&gt; Steve Kinney: Cool,

10
00:00:46.358 --> 00:00:50.861
Redux has some rules to it,
right, so let's read this one.

11
00:00:50.861 --> 00:00:54.801
All right, needs to have a type property,
why would it need to have a type property?

12
00:00:57.977 --> 00:01:00.097
&gt;&gt; Speaker 2: So
that it knows which reducer to use.

13
00:01:00.097 --> 00:01:02.158
&gt;&gt; Steve Kinney: Yeah,
all right, what happened, right,

14
00:01:02.158 --> 00:01:04.810
you're saying something happened, right?

15
00:01:04.810 --> 00:01:07.930
One of the things that
Redux does really well is,

16
00:01:07.930 --> 00:01:11.800
it adds some amount of structure and
rules, right?

17
00:01:11.800 --> 00:01:14.240
And structure and rules is good,
[LAUGH] right, for

18
00:01:14.240 --> 00:01:16.701
the maintained ability of your code base,
right?

19
00:01:16.701 --> 00:01:20.574
And luckily, as we can see, this is
helpful, did you misspell a constant, so

20
00:01:20.574 --> 00:01:21.434
on and so forth.

21
00:01:21.434 --> 00:01:23.320
All right, so
we know that strings don't work,

22
00:01:23.320 --> 00:01:26.975
we found that out with a pretty
helpful error message that I cleared.

23
00:01:26.975 --> 00:01:30.145
It was like, hey, it needs to be
an object, cool, so we given an object.

24
00:01:30.145 --> 00:01:33.750
Next helpful error message, yeah,
I need to have a type, okay.

25
00:01:35.964 --> 00:01:37.824
&gt;&gt; Steve Kinney: A type is
effectively just a string,

26
00:01:37.824 --> 00:01:41.450
it's just saying what happened
in our application, right?

27
00:01:41.450 --> 00:01:44.882
The user requested data, they logged out,
something along those lines,

28
00:01:44.882 --> 00:01:46.851
that's the type of action that happened.

29
00:01:46.851 --> 00:01:51.762
So we'll say type is,
&gt;&gt; Steve Kinney: Cool,

30
00:01:51.762 --> 00:01:55.650
and we'll fire that around, and
you see now everything works.

31
00:01:55.650 --> 00:01:58.788
Let's do that one more time so
we can actually see it.

32
00:01:58.788 --> 00:02:01.530
There was this action that fired
when the store was created,

33
00:02:01.530 --> 00:02:05.220
which is kind of an internal one,
which is just initializing everything.

34
00:02:05.220 --> 00:02:10.220
That prefix would not smash into
any of yours unless you have

35
00:02:10.220 --> 00:02:14.730
an action called @@redux/INIT,
don't do that.

36
00:02:14.730 --> 00:02:19.273
And then you can see that we hit
the console log where something happened,

37
00:02:19.273 --> 00:02:22.203
the first time with that
Redux init action, and

38
00:02:22.203 --> 00:02:24.999
the second time with our ADD object,
right?

39
00:02:24.999 --> 00:02:30.341
Now it seemed like Redux
had a lot of rules.

40
00:02:30.341 --> 00:02:36.230
Really, beyond it being an object and
having a type, that's really about it.

41
00:02:36.230 --> 00:02:42.840
Everything else is kind of up to you and
up to your team, right?

42
00:02:42.840 --> 00:02:45.733
However, if I may make some
recommendations on how you should

43
00:02:45.733 --> 00:02:49.418
structure your actions that we're gonna
just do for the remainder of the day.

44
00:02:49.418 --> 00:02:52.731
There's this pattern called
the Redux standard actions,

45
00:02:52.731 --> 00:02:57.247
right, which is type, we know we have
to have, right, we got yelled at, fine.

46
00:02:57.247 --> 00:03:01.961
Then the other one is, just to make
sure that things are consistent,

47
00:03:01.961 --> 00:03:04.330
you'll see sometimes a payload.

48
00:03:04.330 --> 00:03:08.591
Which will be effectively all the data
that comes along with that action.

49
00:03:08.591 --> 00:03:11.077
So all right,
we heard back from the API, cool,

50
00:03:11.077 --> 00:03:13.270
the payload is obviously the API results.

51
00:03:14.500 --> 00:03:19.240
Or the user changed an input field
that we need to store in Redux, cool,

52
00:03:19.240 --> 00:03:21.461
we might put that in the payload.

53
00:03:21.461 --> 00:03:25.912
The other one's optional,
and at my company,

54
00:03:25.912 --> 00:03:29.816
we tend to try to avoid it, which is meta.

55
00:03:29.816 --> 00:03:34.650
Which is just other data that isn't
important for doing the action.

56
00:03:34.650 --> 00:03:37.820
We will use this occasionally for
analytics and

57
00:03:37.820 --> 00:03:40.175
stuff along those lines,
other things that we need to know.

58
00:03:40.175 --> 00:03:45.765
But you get some side eye because we're
trying to like stay relatively consistent.

59
00:03:45.765 --> 00:03:49.162
And at the end of the day, one of the
things that I liked is, we got errors when

60
00:03:49.162 --> 00:03:53.180
we just started throwing strings, we got
errors when we didn't have a type, right?

61
00:03:53.180 --> 00:03:57.372
Consistency is really important, and
one of the nice things that Redux brings

62
00:03:57.372 --> 00:04:00.947
to the table, cuz with the context
API in React, you do whatever.

63
00:04:00.947 --> 00:04:04.404
Right, there's no rules,
which is kind of great,

64
00:04:04.404 --> 00:04:07.712
but having some amount of
rules is super helpful.

65
00:04:07.712 --> 00:04:10.864
Cool, so we have the ability
to send an action through.

66
00:04:12.974 --> 00:04:16.929
&gt;&gt; Steve Kinney: So what would this look
like, let's actually give it a payload.

67
00:04:22.292 --> 00:04:25.031
&gt;&gt; Steve Kinney: We'll give it,
sorry, payload, and

68
00:04:25.031 --> 00:04:28.856
we'll give that,
that doesn't have to be an object.

69
00:04:28.856 --> 00:04:33.093
But trust me,
the consistency is nice, basically,

70
00:04:33.093 --> 00:04:36.116
my rule is that it should be an object.

71
00:04:36.116 --> 00:04:40.253
All right, we'll say that the amount,

72
00:04:40.253 --> 00:04:44.277
just to give it a separate name, is 2.

73
00:04:44.277 --> 00:04:46.210
[LAUGH] It was gonna be 3,
but I missed the 3 button.

74
00:04:47.920 --> 00:04:52.535
Cool, so now you can see that we've
got this type of ADD and amount of 2,

75
00:04:52.535 --> 00:04:53.905
great, killing it.

76
00:04:53.905 --> 00:04:57.180
We're most of the way
through understanding Redux,

77
00:04:57.180 --> 00:04:59.870
even if it doesn't feel like that.

78
00:04:59.870 --> 00:05:01.440
In here, we can then say,

79
00:05:01.440 --> 00:05:04.300
all right, we've got the state of
the world, we've got the action.

80
00:05:04.300 --> 00:05:05.860
How do we figure out what happened here?

81
00:05:05.860 --> 00:05:10.664
So it's basically,
look at the action type.

82
00:05:10.664 --> 00:05:17.111
If the action.type,
&gt;&gt; Steve Kinney: Is ADD,

83
00:05:19.438 --> 00:05:21.006
&gt;&gt; Steve Kinney: Right, what should we do,

84
00:05:21.006 --> 00:05:26.708
we should take the,
&gt;&gt; Steve Kinney: Value,

85
00:05:26.708 --> 00:05:28.717
which is state.value.

86
00:05:28.717 --> 00:05:32.206
This is a small important
part coming here.

87
00:05:32.206 --> 00:05:35.277
We'll take the amount,

88
00:05:37.697 --> 00:05:41.275
&gt;&gt; Steve Kinney: action.payload.amount,

89
00:05:41.275 --> 00:05:45.856
and then we want to add them together.

90
00:05:45.856 --> 00:05:50.902
Now, you might be tempted to do

91
00:05:50.902 --> 00:05:59.066
something like state.value
= value + amount.

92
00:05:59.066 --> 00:06:03.391
Seems reasonable, right, that will get
you the correct number, and really, here,

93
00:06:03.391 --> 00:06:04.589
it'll probably work.

94
00:06:08.629 --> 00:06:13.575
&gt;&gt; Steve Kinney: We took out the console
log there, so we'll just do a,

95
00:06:17.238 --> 00:06:19.794
&gt;&gt; Steve Kinney: store.getState.

96
00:06:24.121 --> 00:06:27.659
&gt;&gt; Steve Kinney: All right,
we get the 3, the problem here is,

97
00:06:27.659 --> 00:06:30.057
we mutated the object, right?

98
00:06:30.057 --> 00:06:35.021
We just did the thing I told us not to do,
right,

99
00:06:35.021 --> 00:06:38.134
which makes it very unclear.

100
00:06:38.134 --> 00:06:45.606
So if we did a,
&gt;&gt; Steve Kinney: store.getState,

101
00:06:45.606 --> 00:06:50.620
we'll call this first, and we'll dispatch.

102
00:06:52.325 --> 00:06:56.924
&gt;&gt; Steve Kinney: Second is store.getState.

103
00:06:59.315 --> 00:07:02.032
&gt;&gt; Steve Kinney: Run that,
and we'll say first.

104
00:07:03.999 --> 00:07:06.350
&gt;&gt; Steve Kinney: They're the same
object cuz we mutated it, right?

105
00:07:06.350 --> 00:07:10.609
Which means React cannot tell that
we need to re-render anything.

106
00:07:10.609 --> 00:07:14.532
It's like, yeah, same thing as before,
when we had a 1.

107
00:07:14.532 --> 00:07:20.360
Except it's not, right, so we do need
to immutably change the objects, right?

108
00:07:20.360 --> 00:07:24.282
So for instance, we could theoretically,

109
00:07:24.282 --> 00:07:29.158
the easiest way to do this is
to make the object by hand.

110
00:07:29.158 --> 00:07:32.360
Right, so
we say value is now a new object,

111
00:07:35.273 --> 00:07:36.721
&gt;&gt; Steve Kinney: value + amount.

112
00:07:45.023 --> 00:07:47.669
&gt;&gt; Steve Kinney: Right,
now they're false, right, and

113
00:07:47.669 --> 00:07:52.580
that means that we will actually
re-render everything in React, right?

114
00:07:52.580 --> 00:07:55.693
The reason that everything's gotta be
immutable is not a Redux rule per se.

115
00:07:55.693 --> 00:08:00.116
It's a Redux best practice, obviously,
but it's not a Redux rule per se.

116
00:08:00.116 --> 00:08:06.056
It is, how do any of your frameworks
know that anything changed, right?

117
00:08:06.056 --> 00:08:09.867
And so if it gets a little hairy at
times when we're implementing a larger

118
00:08:09.867 --> 00:08:14.381
application, it's not necessarily
Redux's fault, it's JavaScript's fault.

119
00:08:14.381 --> 00:08:18.395
Sorry, that's where we are on the web,
bummer.

120
00:08:18.395 --> 00:08:25.679
All right, so at this point, we've used
createStore, we've used compose, right?

121
00:08:25.679 --> 00:08:28.677
The store we saw had a bunch of methods,
real quick,

122
00:08:28.677 --> 00:08:33.611
we'll just,
&gt;&gt; Steve Kinney: We'll

123
00:08:33.611 --> 00:08:35.248
get rid of these for a second here.

124
00:08:35.248 --> 00:08:39.924
And we'll say store.subscribe.

125
00:08:50.661 --> 00:08:53.629
&gt;&gt; Steve Kinney: Cool, and
we'll do this a few times, right?

126
00:08:59.382 --> 00:09:01.130
&gt;&gt; Steve Kinney: Not go back and
forth in my browser.

127
00:09:01.130 --> 00:09:04.777
So store.subscribe will now trigger
something every time it happens.

128
00:09:04.777 --> 00:09:10.524
Right, we give it a function,
store.subscribe also returns a value,

129
00:09:10.524 --> 00:09:14.586
which is much like a lot
of event emitters, right?

130
00:09:14.586 --> 00:09:23.015
It gives you effectively a,
&gt;&gt; Steve Kinney: Whenever

131
00:09:23.015 --> 00:09:26.736
you call store.subscribe, it will give
you a function that will go ahead and

132
00:09:26.736 --> 00:09:28.990
give you the ability to unsubscribe,
right?

133
00:09:28.990 --> 00:09:31.672
Otherwise you have a giant memory
leak when that component unmounts or

134
00:09:31.672 --> 00:09:32.859
something along those lines.

135
00:09:32.859 --> 00:09:36.733
Right, so we could, for instance,
let's actually change this,

136
00:09:39.960 --> 00:09:44.507
&gt;&gt; Steve Kinney: To console.log,

137
00:09:47.030 --> 00:09:49.002
&gt;&gt; Steve Kinney: store.getState,

138
00:09:52.917 --> 00:09:54.278
&gt;&gt; Steve Kinney: value, right?

139
00:10:01.810 --> 00:10:04.676
&gt;&gt; Steve Kinney: Be cool if we
ran the most recent code, right,

140
00:10:04.676 --> 00:10:06.670
we're adding 3, 5, and 7.

141
00:10:06.670 --> 00:10:11.438
Here we'll just call,
&gt;&gt; Steve Kinney: Unsubscribe.

142
00:10:14.058 --> 00:10:15.874
&gt;&gt; Steve Kinney: 3 and 5,
right, so we stopped listening.

143
00:10:15.874 --> 00:10:18.639
So this gives us the ability,
if this component unmounts,

144
00:10:18.639 --> 00:10:21.311
that we're not still listening
to changes to the store.

