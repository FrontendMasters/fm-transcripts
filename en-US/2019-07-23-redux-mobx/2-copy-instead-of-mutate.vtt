WEBVTT

1
00:00:00.090 --> 00:00:04.640
&gt;&gt; Steve Kinney: And so we do need some
approaches for not mutating objects and

2
00:00:04.640 --> 00:00:05.540
arrays.

3
00:00:05.540 --> 00:00:08.600
To be clear, there are libraries
like Immutable JS, Mori, and

4
00:00:08.600 --> 00:00:11.811
a whole bunch of other ones that will
give you immutable data structures.

5
00:00:14.170 --> 00:00:15.699
I've played with all of those,

6
00:00:15.699 --> 00:00:19.280
I am usually skeptical to bring them
into a large production application.

7
00:00:19.280 --> 00:00:23.160
For the reason, basically, that you're
adding a layer of complexity, right?

8
00:00:23.160 --> 00:00:26.995
Now, there are some things that we're
gonna do today that will be a lot easier

9
00:00:26.995 --> 00:00:31.070
if we didn't have to de-structure every
object and spread every array, right?

10
00:00:31.070 --> 00:00:35.952
What we do at Twilio SendGrid is we write
some helpers that would do this reliably,

11
00:00:35.952 --> 00:00:38.160
cover them with unit tests, right?

12
00:00:38.160 --> 00:00:41.328
Because these libraries like Immutable and
Mori,

13
00:00:41.328 --> 00:00:44.060
they're great every time I've used them.

14
00:00:44.060 --> 00:00:47.836
But yeah, having things where now you're
dealing with regular JavaScript data

15
00:00:47.836 --> 00:00:48.900
structures, right?

16
00:00:48.900 --> 00:00:52.750
If we ever wanted to change that,
that's probably an impossibly heavy lift.

17
00:00:52.750 --> 00:00:56.102
And if you already have an app in
production, it is probably not

18
00:00:56.102 --> 00:01:00.800
particularly feasible to go to product and
be like, listen, instead of new features.

19
00:01:00.800 --> 00:01:05.270
I was thinking, I would change all of
the data structures in our database to use

20
00:01:05.270 --> 00:01:06.910
this Immutable JS library.

21
00:01:06.910 --> 00:01:09.990
If you can swing it, cool, [LAUGH] right?

22
00:01:09.990 --> 00:01:12.700
You're starting a new project,
neat, right?

23
00:01:12.700 --> 00:01:13.390
But maybe you can't, right?

24
00:01:13.390 --> 00:01:16.477
And so knowing these approaches with
the kind of like vanilla JavaScript,

25
00:01:16.477 --> 00:01:17.510
I think is super useful.

26
00:01:19.280 --> 00:01:22.250
So yeah, we know how to maintain objects,
generally speaking,

27
00:01:22.250 --> 00:01:24.130
just add a new property to an object.

28
00:01:24.130 --> 00:01:27.975
Or use the delete keyword, and
delete a property, so on and so forth.

29
00:01:27.975 --> 00:01:32.933
Object.assign is pretty reliable,
it basically allows you to give it

30
00:01:32.933 --> 00:01:38.150
some number of arguments and it'll
basically merge all of those objects.

31
00:01:38.150 --> 00:01:42.010
So if you start out with a brand new empty
object and then the second argument is

32
00:01:42.010 --> 00:01:45.620
your existing object,
you will effectively get a copy, right?

33
00:01:45.620 --> 00:01:50.620
And this is important cuz the way that
React, actually most libraries check to

34
00:01:50.620 --> 00:01:54.840
see if they need to re-render stuff as
they compare the two objects, right?

35
00:01:56.460 --> 00:01:59.790
Like an object, if you mutate it,
it's the same reference in memory.

36
00:01:59.790 --> 00:02:02.763
And so it'll compare it
even if you've mutated it,

37
00:02:02.763 --> 00:02:05.950
it's like yeah,
it's the same object from last time.

38
00:02:05.950 --> 00:02:09.212
And so if you do that,
you basically, it's really hard for

39
00:02:09.212 --> 00:02:10.850
these frameworks to render.

40
00:02:10.850 --> 00:02:14.090
So we always have to return new
objects to basically tell React or

41
00:02:14.090 --> 00:02:16.860
any other framework that
we wanna re-render the DOM.

42
00:02:16.860 --> 00:02:18.860
So this will give you a copy of an object.

43
00:02:18.860 --> 00:02:22.721
If you're either using Babel or
targeting modern browsers,

44
00:02:22.721 --> 00:02:27.810
arguably using Babel or TypeScript,
you can also use this spread operator.

45
00:02:27.810 --> 00:02:29.850
Which effectively creates a new object,

46
00:02:29.850 --> 00:02:32.260
if you look at that copy
with the curly braces.

47
00:02:32.260 --> 00:02:35.068
And takes all of the properties
of the original object and

48
00:02:35.068 --> 00:02:36.540
adds them to that new object.

49
00:02:36.540 --> 00:02:37.695
If you pop this into Babel,

50
00:02:37.695 --> 00:02:40.820
you're probably gonna get an object
assigned out the other end, right?

51
00:02:40.820 --> 00:02:43.570
These are effectively the same.

52
00:02:43.570 --> 00:02:48.170
This is just a nicer syntax, but you can
use whichever one makes you happier.

53
00:02:48.170 --> 00:02:51.340
You can also combine multiple objects.

54
00:02:51.340 --> 00:02:54.627
So if you wanna have an object that
is the original and the extension,

55
00:02:54.627 --> 00:02:57.700
you can pass them to Object.assign or
you can spread them both.

56
00:02:57.700 --> 00:03:01.590
And you'll see us doing this
throughout the course of the workshop.

57
00:03:01.590 --> 00:03:02.982
Copying an array.

58
00:03:02.982 --> 00:03:06.068
You can theoretically call slice and
give it no arguments and

59
00:03:06.068 --> 00:03:07.590
you'll get back a new array.

60
00:03:07.590 --> 00:03:10.200
Or you can use the same
kind of spread syntax.

61
00:03:10.200 --> 00:03:12.440
I like this for its consistency.

62
00:03:12.440 --> 00:03:17.210
Also array.push will add stuff to
an array but it mutates the array.

63
00:03:17.210 --> 00:03:20.320
So you will suddenly
find a bug in your UI.

64
00:03:20.320 --> 00:03:23.740
Array.concat returns a brand new array.

65
00:03:23.740 --> 00:03:26.390
It can also take an array and
kind of combine them together.

66
00:03:26.390 --> 00:03:30.791
There was a recent blog post that says
array.push is 945 times faster than

67
00:03:30.791 --> 00:03:32.090
array.concat.

68
00:03:32.090 --> 00:03:34.380
But tough,
we need immutable data structures.

69
00:03:35.840 --> 00:03:40.270
Again, you can use the same syntax for
extending an array with this

70
00:03:40.270 --> 00:03:43.400
spread operator, which I will mostly
be using throughout this workshop.

