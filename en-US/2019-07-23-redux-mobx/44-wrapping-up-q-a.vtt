WEBVTT

1
00:00:00.322 --> 00:00:04.820
&gt;&gt; Steve Kinney: And so there's a lot
of things for you to kinda think about.

2
00:00:04.820 --> 00:00:09.420
Can you combine these two,
which approach is right for you?

3
00:00:09.420 --> 00:00:13.245
And I think it matters, you can use both
in different parts of your application,

4
00:00:13.245 --> 00:00:16.540
right?

5
00:00:16.540 --> 00:00:19.840
You don't necessarily have to choose one.

6
00:00:19.840 --> 00:00:24.730
In either of these, we use both
basic React component state as well

7
00:00:24.730 --> 00:00:29.620
as the ability to put
stuff in either Redux, or

8
00:00:29.620 --> 00:00:32.660
MobX, or
something along those lines, right?

9
00:00:32.660 --> 00:00:34.330
You can put all of that in place.

10
00:00:34.330 --> 00:00:37.530
Do you maybe wanna have
the ability to have actions and

11
00:00:37.530 --> 00:00:40.230
reducers that modify MobX objects

12
00:00:42.090 --> 00:00:47.100
instead of doing it by calling back and
forth?

13
00:00:47.100 --> 00:00:49.070
You could totally do that as well, right?

14
00:00:49.070 --> 00:00:51.575
You can mix it up with React hooks.

15
00:00:51.575 --> 00:00:54.630
There's a whole bunch of really
interesting ways you can take these

16
00:00:54.630 --> 00:00:56.790
different things in place, right?

17
00:00:56.790 --> 00:01:00.657
Couldn't you make middleware that uses
like async/await to do stuff instead?

18
00:01:00.657 --> 00:01:02.844
Maybe, yeah.

19
00:01:02.844 --> 00:01:05.984
Could you have the ability to
roll back an API request, right?

20
00:01:05.984 --> 00:01:08.750
Like in how you do stuff with epics,
right?

21
00:01:08.750 --> 00:01:12.500
There's a bunch of interesting ways
that you can mix and match these ideas.

22
00:01:12.500 --> 00:01:15.070
And some of them,
we could go into them here,

23
00:01:15.070 --> 00:01:19.100
but some of them will be very unique
to what you need to do your app, right?

24
00:01:19.100 --> 00:01:22.495
And so I think that between Redux and
some of the different ways of dealing with

25
00:01:22.495 --> 00:01:26.280
asynchronous code,
I think Redux Observer was super cool.

26
00:01:26.280 --> 00:01:27.860
We use MobX in smaller parts.

27
00:01:27.860 --> 00:01:30.050
If I'm starting a prototype,
I'm probably doing it in MobX.

28
00:01:30.050 --> 00:01:36.591
The reason that we chose Redux is
because we understood it at scale,

29
00:01:36.591 --> 00:01:43.272
and making those changes are scary,
and I'm risk adverse, right?

30
00:01:43.272 --> 00:01:45.759
So we went with the kinda path
that we felt more confident in.

31
00:01:45.759 --> 00:01:49.451
We didn't wanna get to a point where we
messed up our dependency graph, right?

32
00:01:49.451 --> 00:01:50.949
Have you go, hey Product,

33
00:01:50.949 --> 00:01:54.500
we need a few sprints to undo
some poor choices that we made.

34
00:01:54.500 --> 00:01:58.991
I knew the patterns with Redux really
well, and so despite the fact that we do

35
00:01:58.991 --> 00:02:03.291
use MobX in places of our application,
and I'm a huge fan of it, right?

36
00:02:03.291 --> 00:02:06.455
And we were very much on the cusp,
it was a debate.

37
00:02:06.455 --> 00:02:10.260
But just basically safety in
shipping our product was part of it.

38
00:02:10.260 --> 00:02:14.904
And that's not to say MobX isn't safe,
it was just that nobody had done a very

39
00:02:14.904 --> 00:02:17.983
large application with it,
so we went with Redux.

40
00:02:17.983 --> 00:02:22.277
But like I said, we still use MobX in
certain portions where doing that whole

41
00:02:22.277 --> 00:02:24.510
flow doesn't make sense.

42
00:02:24.510 --> 00:02:29.056
And the context API that
is in basic pure React

43
00:02:29.056 --> 00:02:32.820
was only a month old when
we had to make the choice.

44
00:02:32.820 --> 00:02:35.340
So it was one of those things where
we didn't know at the time, right?

45
00:02:35.340 --> 00:02:37.820
I think the context API is also great,

46
00:02:37.820 --> 00:02:42.950
but the time-space continuum
is also an issue that informs.

47
00:02:42.950 --> 00:02:46.759
You're gonna make a choice, and maybe
some hot, new library comes out tomorrow.

48
00:02:46.759 --> 00:02:50.090
I think that as long as you understand
some of the trade-offs on some of

49
00:02:50.090 --> 00:02:54.050
the approaches for doing these things, you
can begin to mix and match some of them.

50
00:02:54.050 --> 00:02:57.509
The kind of word of caution that I'll give
is, you know the kind of lay of the land,

51
00:02:57.509 --> 00:02:59.026
you know some of the trade-offs.

52
00:02:59.026 --> 00:03:02.970
When possible, giving yourself really good
abstractions, right, and giving it so

53
00:03:02.970 --> 00:03:06.830
that you call this method that's
gonna say, add an item to the list.

54
00:03:06.830 --> 00:03:10.100
You use that function, add an item to
the list, all over your code base.

55
00:03:10.100 --> 00:03:13.560
If you need to change the fundamental
way that an item gets added to a list,

56
00:03:13.560 --> 00:03:15.480
you change that one function, right?

57
00:03:15.480 --> 00:03:18.132
The second you find yourself
repeating yourself and kind of doing

58
00:03:18.132 --> 00:03:23.040
squirrelly things all over the code base,
it becomes a lot harder for you, right?

59
00:03:23.040 --> 00:03:26.414
So if you give yourself just functions
that you call that do things with

60
00:03:26.414 --> 00:03:28.600
the data, you can make these refactorings.

61
00:03:28.600 --> 00:03:32.500
You can change your mind
a lot more easily, right?

62
00:03:32.500 --> 00:03:37.360
But if you hard code a lot of the stuff
in, you're kinda stuck with it, right?

63
00:03:37.360 --> 00:03:41.845
So the way that you think about these
things can greatly impact your ability to

64
00:03:41.845 --> 00:03:43.302
change your mind later.

65
00:03:43.302 --> 00:03:47.549
I think I mentioned this earlier, we
basically do all of our normalization in

66
00:03:47.549 --> 00:03:51.750
an adapter layer as the API requests come
in, and we turn them on the way out.

67
00:03:51.750 --> 00:03:56.460
We did that actually not cuz we're
smart about state management, we are.

68
00:03:56.460 --> 00:03:59.240
We did it because the APIs
weren't solid yet, right?

69
00:03:59.240 --> 00:04:00.540
And we knew they were
gonna change all the time.

70
00:04:00.540 --> 00:04:03.000
And I wanted the actual
application to know nothing

71
00:04:03.000 --> 00:04:04.660
about the data we got back from the API.

72
00:04:04.660 --> 00:04:07.190
Cuz we were using brand
new back-end technologies.

73
00:04:07.190 --> 00:04:10.780
We were switching from on-prem MySQL
databases to stuff like Dynamo.

74
00:04:10.780 --> 00:04:13.965
And we knew that there were
gonna be different trade-offs,

75
00:04:13.965 --> 00:04:16.030
you can't do pagination the same way.

76
00:04:16.030 --> 00:04:18.574
So we had this pattern that
actually has helped us a lot.

77
00:04:18.574 --> 00:04:19.270
APIs change,

78
00:04:19.270 --> 00:04:23.440
we tweak one place about how we normalize
our data, everything just works.

79
00:04:23.440 --> 00:04:26.850
We could switch to something totally
different tomorrow, and it would all.

80
00:04:26.850 --> 00:04:29.670
I mean, it wouldn't be fine,
we'd have to do some amount of work.

81
00:04:29.670 --> 00:04:32.130
But we would not have to rewrite the app,
right, and

82
00:04:32.130 --> 00:04:36.050
that is,
I can't sell that one again, right?

83
00:04:36.050 --> 00:04:39.598
So kind of understanding the concepts and
being able to kinda mix and

84
00:04:39.598 --> 00:04:41.972
match them I think is
incredibly important.

85
00:04:41.972 --> 00:04:43.192
All right, any questions?

86
00:04:45.283 --> 00:04:46.522
&gt;&gt; Speaker 2: Yeah.
&gt;&gt; Steve Kinney: Yeah?

87
00:04:46.522 --> 00:04:50.341
&gt;&gt; Speaker 2: So about structuring the
data, you really stressed the importance

88
00:04:50.341 --> 00:04:53.570
of normalizing when you're
talking about Redux.

89
00:04:53.570 --> 00:04:56.854
Would you say in the MobX side it's
sort of completely unnecessary, or

90
00:04:56.854 --> 00:04:58.290
would you, what do you think?

91
00:04:58.290 --> 00:05:02.860
&gt;&gt; Steve Kinney: Depends, if you're cool
with the dependency graph, fine, right?

92
00:05:02.860 --> 00:05:08.910
But in a relatively small application,
that's the problem with scale, right?

93
00:05:08.910 --> 00:05:12.720
Relatively small application, no thing you
do is really gonna bite you in the butt.

94
00:05:12.720 --> 00:05:17.640
But as it gets larger and larger,
if you're not thinking about it, right?

95
00:05:17.640 --> 00:05:20.880
And so the bigger your team is, the
scarier those things get for me, right?

96
00:05:22.140 --> 00:05:27.496
Having those guardrails allows me to
give juniors a lot of autonomy, right?

97
00:05:27.496 --> 00:05:30.640
Versus, in a code review,
it's really tough, right?

98
00:05:30.640 --> 00:05:35.090
You look at that code review, and
I've been the looks good to me

99
00:05:35.090 --> 00:05:38.510
on a code review that bit us in
the butt three months later, right?

100
00:05:38.510 --> 00:05:39.477
I have done it.

101
00:05:39.477 --> 00:05:43.416
If you look at that code review, you look
at the changes, this seems fine, but

102
00:05:43.416 --> 00:05:45.698
there's like cumulatively little things.

103
00:05:45.698 --> 00:05:48.790
This is where MobX State Tree becomes
a thing that you can like, all right,

104
00:05:48.790 --> 00:05:50.930
I want the safety of
an immutable state tree.

105
00:05:50.930 --> 00:05:55.570
I want a lot of the good stuff that
MobX gives me, you can kind of mix and

106
00:05:55.570 --> 00:05:57.660
match those things.

107
00:05:57.660 --> 00:05:58.291
But yeah,

108
00:05:58.291 --> 00:06:02.794
the reason we went with Redux is because
we knew we were really comfortable.

109
00:06:02.794 --> 00:06:05.765
We had been using effectively Flux for
a really long time.

110
00:06:05.765 --> 00:06:10.040
We had been using a lot of stuff,
so we knew it really well.

111
00:06:10.040 --> 00:06:12.710
So you're still normalizing
your data to a sense.

112
00:06:12.710 --> 00:06:14.085
You're getting stuff into the API.

113
00:06:14.085 --> 00:06:18.770
That might not be how the MobX
class looks like, right?

114
00:06:18.770 --> 00:06:20.122
So you're still gonna
pull stuff from the API,

115
00:06:20.122 --> 00:06:21.950
you still might have to
transform it in some way.

116
00:06:23.410 --> 00:06:26.380
And we even made a lot of
computed properties, right?

117
00:06:26.380 --> 00:06:29.410
A lot of normalization is
the ability to derive state.

118
00:06:29.410 --> 00:06:32.290
In Redux,
that might happen in mapStateToProps.

119
00:06:32.290 --> 00:06:37.340
In MobX, a lot of the kind of
rehydrating information was happening

120
00:06:37.340 --> 00:06:39.420
in those computed properties, right?

121
00:06:39.420 --> 00:06:42.707
So kind of where you do it kinda
changes as well, if that makes sense.

122
00:06:42.707 --> 00:06:45.859
&gt;&gt; Speaker 2: Yep, and
then one other that's kinda

123
00:06:45.859 --> 00:06:50.600
going back to the basic React
state that we talked about.

124
00:06:50.600 --> 00:06:55.552
So I know that you mentioned in
the past that your app has undo,

125
00:06:55.552 --> 00:07:02.930
redo features, and that you use Redux,
and it's really easy to undo and redo.

126
00:07:02.930 --> 00:07:07.988
But you also mentioned that you were
thinking about maybe using context API.

127
00:07:07.988 --> 00:07:09.820
Wouldn't that make that difficult?

128
00:07:09.820 --> 00:07:12.140
&gt;&gt; Steve Kinney: So actually,
I think we kind of missed it.

129
00:07:12.140 --> 00:07:15.270
I'm actually gonna go, and let me see if I
can find the slide where we talk a little

130
00:07:15.270 --> 00:07:18.090
bit about what undo,
redo looks like in Redux.

131
00:07:18.090 --> 00:07:23.055
And what we're gonna find out is that
as long as you're kind of using,

132
00:07:23.055 --> 00:07:27.349
particularly in an immutable
state tree kind of structure,

133
00:07:27.349 --> 00:07:30.730
it's actually pretty
similar no matter what.

134
00:07:30.730 --> 00:07:31.920
Just give me one second.

135
00:07:32.950 --> 00:07:36.920
So the way that you might implement undo
and redo, and undo and redo is scary,

136
00:07:36.920 --> 00:07:39.870
cuz what are you undoing and
redoing, right?

137
00:07:39.870 --> 00:07:44.470
The way that you might implement undo and
redo, and you can do this in Redux, right?

138
00:07:44.470 --> 00:07:48.235
Theoretically, we can talk about whether
you might even do it in MobX, right?

139
00:07:48.235 --> 00:07:52.509
It's if you hold onto the past,
and you hold onto the future, and

140
00:07:52.509 --> 00:07:56.411
then you just kind of move stuff up and
down a stack, right?

141
00:07:58.120 --> 00:08:03.231
The one meme of the course,
right, is from Kylo Ren,

142
00:08:03.231 --> 00:08:07.104
let the past die, kill it if you have to.

143
00:08:07.104 --> 00:08:08.904
At this point,
we're gonna do the exact opposite.

144
00:08:08.904 --> 00:08:11.280
We're gonna hold on to all
past versions of the state.

145
00:08:11.280 --> 00:08:15.456
So one of the things that I said
was really great about Redux and

146
00:08:15.456 --> 00:08:20.438
immutable state trees is the ability
to kind of serialize the entire state

147
00:08:20.438 --> 00:08:21.984
of the world, right?

148
00:08:21.984 --> 00:08:23.148
And having that and

149
00:08:23.148 --> 00:08:27.750
being able to just completely replace
something is incredibly powerful.

150
00:08:27.750 --> 00:08:30.545
So this is, again,
if we were using maybe a to-do list or

151
00:08:30.545 --> 00:08:32.077
something along those lines.

152
00:08:32.077 --> 00:08:39.160
Well, when we might have otherwise
just popped the item onto an array.

153
00:08:39.160 --> 00:08:44.650
Basically we can keep an array of
all of the past states, right?

154
00:08:44.650 --> 00:08:48.146
That object of state,
you pop it onto the past ones,

155
00:08:48.146 --> 00:08:53.440
you can kinda take the kinda present and
be the what you return out right now.

156
00:08:53.440 --> 00:08:58.380
And if they did undo, you can take
the current present becomes the future.

157
00:08:58.380 --> 00:09:00.100
Time travel is hard, right?

158
00:09:01.212 --> 00:09:06.586
Any time you have an action come into
your reducer, do the context API, right?

159
00:09:06.586 --> 00:09:10.790
Context API, React nowadays has
a hook called useReducer as well, so

160
00:09:10.790 --> 00:09:13.948
you can actually legitimately
do this the same way.

161
00:09:13.948 --> 00:09:17.313
But any time you're calling the method,
if you give yourself a good method, you

162
00:09:17.313 --> 00:09:20.849
can just, I'm gonna take the serialized
object that's the state of the world now.

163
00:09:20.849 --> 00:09:23.699
I'm gonna put it on an array
of past states, and

164
00:09:23.699 --> 00:09:28.352
I'm going to set the new state as it
should be, and maybe future as whatever.

165
00:09:28.352 --> 00:09:32.090
Maybe it's an empty array.

166
00:09:32.090 --> 00:09:34.156
Should they undo, right?

167
00:09:34.156 --> 00:09:37.700
You take the current present, and
you put it on the future array.

168
00:09:37.700 --> 00:09:41.916
You take the front of the past and
make it the current.

169
00:09:41.916 --> 00:09:42.656
[LAUGH] And

170
00:09:42.656 --> 00:09:48.124
then you make the second-to-most
recent past the most recent past.

171
00:09:48.124 --> 00:09:49.899
You're basically moving along.

172
00:09:49.899 --> 00:09:51.640
You could also do this with indexes.

173
00:09:51.640 --> 00:09:54.994
You can just basically move an index
back on the array, or forward,

174
00:09:54.994 --> 00:09:59.280
depending on how you structured it,
and play back and forth through it.

175
00:09:59.280 --> 00:10:03.559
So it's really actually about how
you structure your data, again,

176
00:10:03.559 --> 00:10:07.707
like most things, and you can store
all previous and past states.

177
00:10:07.707 --> 00:10:10.623
You need to probably figure out when they.

178
00:10:10.623 --> 00:10:14.790
I think the hard part of undo and redo,
and just to show you what redo looks like.

179
00:10:14.790 --> 00:10:19.990
You're taking whatever is the most
recent future that was the present,

180
00:10:19.990 --> 00:10:22.260
and putting it back, and
just moving everything where it was.

181
00:10:23.620 --> 00:10:26.140
The trickiest part of
implementing undo and

182
00:10:26.140 --> 00:10:29.270
redo is not the state management piece,
it's the UX piece.

183
00:10:30.950 --> 00:10:35.526
What did they want to undo, right?

184
00:10:35.526 --> 00:10:37.610
Anything, right?

185
00:10:37.610 --> 00:10:39.180
How do they access it, right?

186
00:10:40.360 --> 00:10:42.762
Depending on what you need to undo and
redo,

187
00:10:42.762 --> 00:10:48.740
it becomes slightly tricky,
right, on a UX level.

188
00:10:48.740 --> 00:10:50.846
On a state management level, you can just,

189
00:10:50.846 --> 00:10:55.160
especially easy in Redux, a little bit
less easy using pure React because you

190
00:10:55.160 --> 00:10:57.130
don't necessarily have
the reducer pattern.

191
00:10:57.130 --> 00:11:00.290
But that context, when we looked at
it in the prequel to this course,

192
00:11:00.290 --> 00:11:03.640
the React state course, right,
we were using useState.

193
00:11:03.640 --> 00:11:05.080
But you could use a useReducer in there.

194
00:11:05.080 --> 00:11:08.240
You could mix having reducers and
using the context API.

195
00:11:08.240 --> 00:11:10.240
These are not mutually exclusive, right?

196
00:11:10.240 --> 00:11:14.342
And arguably, you can implement your
own versions of any of these, right?

197
00:11:14.342 --> 00:11:18.011
But yeah, having this thing where an
action comes in, we return a new state of

198
00:11:18.011 --> 00:11:21.920
the world, allows us, gives us a hook to
keep track of the last state of the world.

199
00:11:21.920 --> 00:11:24.080
And the state before that,
and we just swap them out.

200
00:11:25.110 --> 00:11:28.017
It's actually shockingly simple, right?

201
00:11:28.017 --> 00:11:30.674
And that's effectively,
we saw really briefly,

202
00:11:30.674 --> 00:11:33.219
I showed you the timeline
in the Redux Dev Tools.

203
00:11:33.219 --> 00:11:37.000
It's basically behind your back,
saving the previous versions and

204
00:11:37.000 --> 00:11:39.360
letting you step back through it, right?

205
00:11:39.360 --> 00:11:41.409
And so it's effectively
an implementation of that.

206
00:11:45.535 --> 00:11:46.282
&gt;&gt; Steve Kinney: Anything else?

207
00:11:48.532 --> 00:11:49.223
&gt;&gt; Steve Kinney: That's a good one.

208
00:11:49.223 --> 00:11:53.308
[LAUGH]
&gt;&gt; Steve Kinney: Great,

209
00:11:53.308 --> 00:11:58.204
thank you so much, and good luck.

210
00:11:58.204 --> 00:11:58.704
&gt;&gt; [APPLAUSE]

