WEBVTT

1
00:00:00.060 --> 00:00:01.810
&gt;&gt; Steve Kinney: So
we have this default state.

2
00:00:01.810 --> 00:00:06.750
What we're gonna do is we're gonna
use normalizer to go ahead and

3
00:00:06.750 --> 00:00:13.360
figure out how to turn it into
the data that we deserve, all right?

4
00:00:13.360 --> 00:00:15.750
So actually go instead of looking at it,
we'll go ahead and implement it.

5
00:00:15.750 --> 00:00:24.072
I'm gonna create a new file,
called normalized-state.js.

6
00:00:24.072 --> 00:00:24.990
Cool.

7
00:00:24.990 --> 00:00:30.640
And now we'll go ahead,
and we'll pull it in,

8
00:00:30.640 --> 00:00:35.314
we saw before, schema and normalize.

9
00:00:37.971 --> 00:00:41.780
&gt;&gt; Steve Kinney: From
this normalizer library.

10
00:00:41.780 --> 00:00:43.100
And we'll pull in that default state.

11
00:00:44.200 --> 00:00:48.700
Yeah and you might choose,
do this as API results come in.

12
00:00:48.700 --> 00:00:50.016
That's totally cool.

13
00:00:55.907 --> 00:00:57.210
&gt;&gt; Steve Kinney: I'll
pull that in as well.

14
00:00:58.730 --> 00:01:00.880
And now we saw before,
we can create schema.

15
00:01:00.880 --> 00:01:02.226
So we'll say, a user

16
00:01:09.792 --> 00:01:12.242
&gt;&gt; Steve Kinney: schema.Entity and

17
00:01:12.242 --> 00:01:15.999
we'll just say this is users.

18
00:01:15.999 --> 00:01:21.952
A card we saw before, is a new schema.

19
00:01:24.843 --> 00:01:29.510
&gt;&gt; Steve Kinney: With the entity of cards,
and it points to a user.

20
00:01:29.510 --> 00:01:32.290
Now you notice that the reason I had to
define user first is because this one's

21
00:01:32.290 --> 00:01:33.650
gonna have to reference the user schema.

22
00:01:33.650 --> 00:01:36.630
So there's a little bit of thinking here,
but

23
00:01:36.630 --> 00:01:39.130
it's mostly just
rearranging lines of code.

24
00:01:39.130 --> 00:01:41.180
All right, so we have a user, schema.

25
00:01:41.180 --> 00:01:47.400
I have a card that has an assigned past
tense, assigned to a particular user.

26
00:01:47.400 --> 00:01:52.177
So these, it'll figure this all out as
it gets this data structure in here and

27
00:01:52.177 --> 00:01:53.731
then we'll have a list.

28
00:01:57.794 --> 00:02:00.490
&gt;&gt; Steve Kinney: Which we'll go ahead and
we'll call it list, right?

29
00:02:02.060 --> 00:02:07.912
And it will have cards that will be an
array of this card schema that we defined.

30
00:02:09.947 --> 00:02:12.840
&gt;&gt; Steve Kinney: All right, so
we're at this point most of the way there.

31
00:02:12.840 --> 00:02:17.110
What I'm gonna do now is
I'm just gonna run it.

32
00:02:17.110 --> 00:02:20.750
Now that I've defined the schema I'm just
gonna run it through the normalization.

33
00:02:20.750 --> 00:02:27.545
So I'll say normalizedLists = normalize,

34
00:02:27.545 --> 00:02:33.480
I'll give the defaultState.lists.

35
00:02:33.480 --> 00:02:36.950
And we'll say that you're gonna
get an array of list objects,

36
00:02:36.950 --> 00:02:38.374
cuz that's the way it was in my state.

37
00:02:38.374 --> 00:02:40.890
We're going to pull the list,
which was an array.

38
00:02:40.890 --> 00:02:41.660
And we'll be like,

39
00:02:41.660 --> 00:02:45.830
hey, I've kind of told you that what
you're about to get is an array of lists.

40
00:02:45.830 --> 00:02:48.360
And you know that each list
has an array of cards.

41
00:02:48.360 --> 00:02:50.980
Can you go ahead and
just figure this all out for me?

42
00:02:52.070 --> 00:02:55.990
This is not technically anything
that you couldn't write normally

43
00:02:55.990 --> 00:02:57.140
in standard JavaScript.

44
00:02:57.140 --> 00:03:01.222
It's just that watching me do that
is not the best use of your time.

45
00:03:01.222 --> 00:03:05.476
And arguably, having a library
doing it consistently and stably,

46
00:03:05.476 --> 00:03:09.067
if you have a big enough team,
is also probably helpful.

47
00:03:13.784 --> 00:03:16.379
&gt;&gt; Steve Kinney: Which
will be an array of users.

48
00:03:17.570 --> 00:03:21.800
All right, and now what we're gonna
do is just kind of export our data.

49
00:03:21.800 --> 00:03:24.183
I can even console log if we wanna see,
but

50
00:03:24.183 --> 00:03:27.932
it's going to give me that data
structure we saw in that run book,

51
00:03:27.932 --> 00:03:31.954
which there will be cards,
which will have entities and IDs, lists,

52
00:03:31.954 --> 00:03:37.030
which will have the entities and the IDs,
users, which will have entities and IDs.

53
00:03:37.030 --> 00:03:38.647
Those entities will be objects.

54
00:03:38.647 --> 00:03:42.140
With the ID being the key,
and the data being the value.

55
00:03:42.140 --> 00:03:45.275
This will be really useful when
we go to pull it out of Redux.

56
00:03:45.275 --> 00:03:49.329
We'll export const

57
00:03:49.329 --> 00:03:53.987
lists,
&gt;&gt; Steve Kinney: To do

58
00:03:53.987 --> 00:03:58.086
a little bit extra reformatting
to get it fully the way I

59
00:03:58.086 --> 00:04:06.187
want
&gt;&gt; Steve Kinney: Lists,

60
00:04:06.187 --> 00:04:09.807
what's the chance I've misspelled
entities at some point?

61
00:04:17.082 --> 00:04:21.016
&gt;&gt; Steve Kinney: Cool, it actually puts
the IDs in a array called result which,

62
00:04:21.016 --> 00:04:23.230
it's just confusing for us.

63
00:04:23.230 --> 00:04:24.770
If you're cool with that that's fine.

64
00:04:24.770 --> 00:04:28.492
But I think as we talk about it to
remember that result is an array of IDs is

65
00:04:28.492 --> 00:04:29.270
problematic.

66
00:04:29.270 --> 00:04:33.400
So I've chosen to rename it
ids as we're talking about it.

67
00:04:33.400 --> 00:04:34.585
It's more clear for you.

68
00:04:39.727 --> 00:04:43.224
&gt;&gt; Steve Kinney: So users will be.

69
00:04:47.800 --> 00:04:49.865
&gt;&gt; Steve Kinney: Normalizing as users,
sweet.

70
00:04:56.354 --> 00:04:58.045
&gt;&gt; Steve Kinney: Entities.

71
00:05:06.873 --> 00:05:11.806
&gt;&gt; Steve Kinney: This one
was a little bit different.

72
00:05:11.806 --> 00:05:15.334
We'll actually pull the ones
from the giving cards.

73
00:05:15.334 --> 00:05:17.200
We didn't get it,
we didn't find a schema for that.

74
00:05:17.200 --> 00:05:18.761
So we'll just do it ourselves.

75
00:05:24.984 --> 00:05:27.394
&gt;&gt; Steve Kinney: This will give me
the data structure that I need.

76
00:05:27.394 --> 00:05:28.870
Again, we talked about it.

77
00:05:32.504 --> 00:05:34.207
&gt;&gt; Steve Kinney: And
we'll just export default all three.

78
00:05:38.982 --> 00:05:40.631
&gt;&gt; Steve Kinney: Cool.

