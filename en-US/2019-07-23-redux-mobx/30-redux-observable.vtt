WEBVTT

1
00:00:00.180 --> 00:00:04.530
&gt;&gt; Steve Kinney: Redux Observable is
effectively binding Redux to RxJS

2
00:00:04.530 --> 00:00:09.140
in the same way that React Redux
binds Redux to React.

3
00:00:09.140 --> 00:00:14.608
I'm pretty sure we have full
courses on Observables,

4
00:00:14.608 --> 00:00:18.536
so I will not go all
the way into Observables.

5
00:00:18.536 --> 00:00:23.440
This is kinda again beyond the scope of
this, we use a very limited set of RxJS.

6
00:00:23.440 --> 00:00:27.218
I think we aspire to use more, there's
a lot more that we want to use, but

7
00:00:27.218 --> 00:00:30.830
currently, baby steps.

8
00:00:30.830 --> 00:00:33.906
So we'll talk about enough
RxJS to be dangerous,

9
00:00:33.906 --> 00:00:36.404
without getting kinda too deep into it.

10
00:00:36.404 --> 00:00:41.391
So Redux Observable, we should be
pretty clear on the Redux part, but

11
00:00:41.391 --> 00:00:43.530
what is this observable?

12
00:00:43.530 --> 00:00:46.540
And observable you can
think about as a stream,

13
00:00:46.540 --> 00:00:49.300
think about an array over
the dimension of time.

14
00:00:51.090 --> 00:00:54.618
Where things are coming in, and
this could be, for instance,

15
00:00:54.618 --> 00:00:59.360
things streaming in,
when we hear back from the API.

16
00:00:59.360 --> 00:01:02.657
It could be stuff off our website,
it could be mouse movements, right?

17
00:01:02.657 --> 00:01:06.526
Anything that happens over the course of
time is probably a good candidate for

18
00:01:06.526 --> 00:01:07.550
an observable.

19
00:01:07.550 --> 00:01:10.620
And then the cool thing about
stream is that it's cancelable.

20
00:01:10.620 --> 00:01:13.744
You can start listening to
the series of events, and

21
00:01:13.744 --> 00:01:17.943
much like an eventometer,
you can stop listening when you're done.

22
00:01:17.943 --> 00:01:18.606
Great, so

23
00:01:18.606 --> 00:01:23.560
the interesting thing is all of our Redux
Observable has a thing called an epic.

24
00:01:24.810 --> 00:01:29.100
There's a bunch of fun words for all these
libraries, like Redux Saga, Users Saga,

25
00:01:29.100 --> 00:01:30.305
as in like what is that?

26
00:01:30.305 --> 00:01:35.724
It's a term from the '80s, again, like
a lot of front-end thought leadership.

27
00:01:35.724 --> 00:01:39.416
Is taking things that we were doing 30,
40 years ago, and

28
00:01:39.416 --> 00:01:42.650
building libraries around
our modern frameworks.

29
00:01:42.650 --> 00:01:44.756
So it uses this idea of an epic,

30
00:01:44.756 --> 00:01:48.897
which obviously raises the next question,
what is an epic?

31
00:01:48.897 --> 00:01:53.190
An epic is actually bizarrely simple,

32
00:01:53.190 --> 00:01:55.875
even though when we look at
some of the code, it's not.

33
00:01:55.875 --> 00:01:57.491
It doesn't seem that way,

34
00:01:57.491 --> 00:02:01.020
because a lot of the complexity
when we see the code is RxJS.

35
00:02:01.020 --> 00:02:03.653
Which again,
I'm not gonna go all the way into,

36
00:02:03.653 --> 00:02:06.012
I will leave it as an exercise for you.

37
00:02:06.012 --> 00:02:09.761
But I'll show you how we can
hook it up all together.

38
00:02:09.761 --> 00:02:14.852
And so, an epic is a function that
takes a stream of actions dispatched,

39
00:02:14.852 --> 00:02:17.446
and returns a new stream of actions.

40
00:02:17.446 --> 00:02:21.760
So a way to think about it is you've
got an action, it goes into the epic.

41
00:02:21.760 --> 00:02:27.559
Another action spits out the other end,
which is weirdly great.

42
00:02:27.559 --> 00:02:31.870
Because it means that when they hit
the button saying like load the tweets.

43
00:02:31.870 --> 00:02:36.071
That will fire an action saying load
the tweets which Redux can deal with,

44
00:02:36.071 --> 00:02:37.850
you can put up a loading thing.

45
00:02:37.850 --> 00:02:39.784
It goes through the normal flow,

46
00:02:39.784 --> 00:02:43.824
the epic can then go like I'm making
an AJAX request, and I get that.

47
00:02:43.824 --> 00:02:47.040
I'm gonna figure out all this other
stuff and then I will fire a new action.

48
00:02:47.040 --> 00:02:50.350
I will take that read the tweets action,
do some stuff,

49
00:02:50.350 --> 00:02:53.820
and I will transform it into a new
action that has some tweets.

50
00:02:53.820 --> 00:02:57.640
And so all of your Redux-base
stays completely unaware, but

51
00:02:57.640 --> 00:03:00.160
it's effectively all of your React and
your Dispatch.

52
00:03:00.160 --> 00:03:05.099
Is dispatching normal Redux actions
that are going through the normal flow.

53
00:03:05.099 --> 00:03:09.140
Your whole React Redux application really
doesn't deal with any of this stuff.

54
00:03:09.140 --> 00:03:13.020
The epics are just quietly listening to
all of the actions that flow through,

55
00:03:13.020 --> 00:03:14.735
that's were the Observable comes in.

56
00:03:14.735 --> 00:03:18.046
To all of the actions that
are flowing through the system, and

57
00:03:18.046 --> 00:03:21.302
occasionally they'll be like,
I care about that one.

58
00:03:21.302 --> 00:03:23.423
Let me go make a AJAX request,
then I'll fire another one and

59
00:03:23.423 --> 00:03:24.850
I'll transform that into a new action.

60
00:03:26.590 --> 00:03:28.340
But I want to point this out again,

61
00:03:28.340 --> 00:03:32.000
which is the actions still
go to their normal way.

62
00:03:32.000 --> 00:03:33.291
So if you fire a [INAUDIBLE] of tweets,

63
00:03:33.291 --> 00:03:34.967
that's still going
through all the reducers.

64
00:03:34.967 --> 00:03:37.553
The reducers can choose
not to listen to it, but

65
00:03:37.553 --> 00:03:40.670
this middle work kinda sits
outside of your normal flow.

66
00:03:40.670 --> 00:03:43.155
And it's just listening to every
action that comes through,

67
00:03:43.155 --> 00:03:46.170
if it's an action that you
decided that you care about.

68
00:03:46.170 --> 00:03:51.760
It pays attention to it, it transforms it,
and it does kind of the next thing.

69
00:03:51.760 --> 00:03:55.040
So here's the default
Redux Observable example.

70
00:03:56.390 --> 00:04:01.760
This is a normal thing,

71
00:04:01.760 --> 00:04:05.960
which is like, hey, if we get the action
type PING, return Pong, right?

72
00:04:05.960 --> 00:04:09.750
So listen for every action, this
theoretically is not really a reducer,

73
00:04:09.750 --> 00:04:11.080
this is a regular JavaScript.

74
00:04:11.080 --> 00:04:16.236
This is not an epic,
this is what it looks like in an epic.

75
00:04:16.236 --> 00:04:20.199
So listen for all the actions and
that dollar sign is a same way like we use

76
00:04:20.199 --> 00:04:23.714
a dollar sign in front of variables
that are wrapped in jQuery.

77
00:04:23.714 --> 00:04:27.150
It's just a way for
us to know that this is an observable.

78
00:04:27.150 --> 00:04:32.220
For every action that comes in,
all of them, if it's

79
00:04:32.220 --> 00:04:37.680
an action of the Type( 'PING' ) map it in
the same way you would map over an array.

80
00:04:37.680 --> 00:04:41.054
Cuz again an Observable is an array
over the dimension of time.

81
00:04:41.054 --> 00:04:42.902
Crazy, right?

82
00:04:42.902 --> 00:04:49.049
Everyone that comes in if you have
the Type( 'PING' ) map it to PONG.

83
00:04:49.049 --> 00:04:53.776
And so what that basically does,
is it just transforms actions as they come

84
00:04:53.776 --> 00:04:56.937
through, and
it's just constantly listening.

85
00:04:56.937 --> 00:05:01.461
That's great to talk about, we're
going to look at that second example.

86
00:05:01.461 --> 00:05:05.178
With the Star Wars Autocomplete,
cuz that does a bunch of things.

87
00:05:05.178 --> 00:05:10.478
There's a definite case where we
want to cancel an AJAX request.

88
00:05:10.478 --> 00:05:13.587
You won't necessarily stop
the browser from sending that out.

89
00:05:13.587 --> 00:05:16.709
You're just being like, yo, browser,

90
00:05:16.709 --> 00:05:20.553
I've moved on,
I think we should do other things.

91
00:05:20.553 --> 00:05:23.047
So an Autocomplete is a good example,
it's just,

92
00:05:23.047 --> 00:05:25.773
you might fire off an AJAX request for
every key stroke.

93
00:05:25.773 --> 00:05:31.466
But you only care about the most recent
one, you don't care about all of them.

94
00:05:31.466 --> 00:05:34.829
You just care about the last one
that happened, so basically,

95
00:05:34.829 --> 00:05:36.292
you wanna stop listening.

96
00:05:36.292 --> 00:05:39.899
Cuz what will happen is,
let's say, generally speaking,

97
00:05:39.899 --> 00:05:41.464
we have an Autocomplete.

98
00:05:41.464 --> 00:05:43.462
You're gonna fire them off
after every keystroke.

99
00:05:43.462 --> 00:05:45.598
And given normal network conditions,

100
00:05:45.598 --> 00:05:48.453
they're gonna come back in
roughly the same order.

101
00:05:48.453 --> 00:05:51.514
That's not actually true, right?

102
00:05:51.514 --> 00:05:55.798
With intermittent network connection,
you might have your last one not show up.

103
00:05:55.798 --> 00:05:59.758
And then a previous one come back slowly,
and stuff like that, and

104
00:05:59.758 --> 00:06:00.970
it could get weird.

105
00:06:00.970 --> 00:06:03.130
So you might be like,
I only care about the most recent one.

106
00:06:03.130 --> 00:06:05.280
And that's the problem that
we're gonna try to solve for.

