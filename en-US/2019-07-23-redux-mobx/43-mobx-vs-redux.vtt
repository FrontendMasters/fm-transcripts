WEBVTT

1
00:00:03.412 --> 00:00:07.477
&gt;&gt; Steve Kinney: MobX seems great,
Redux seems great, right?

2
00:00:07.477 --> 00:00:11.154
They are different solutions
to the same problem.

3
00:00:11.154 --> 00:00:16.971
But as I kind of opened this course with,
it is not about the library.

4
00:00:16.971 --> 00:00:23.293
It is about the different approaches,
right?

5
00:00:23.293 --> 00:00:26.566
Our MobX app was still relatively simple,
right?

6
00:00:26.566 --> 00:00:29.629
There was just one level of dependency.

7
00:00:29.629 --> 00:00:35.502
And we had the individual item
talking to the list of items so

8
00:00:35.502 --> 00:00:37.977
on and so forth, right?

9
00:00:37.977 --> 00:00:40.503
But it's not really
about MobX versus Redux,

10
00:00:40.503 --> 00:00:45.336
it's about dependency graphs versus
immutable state trees, right?

11
00:00:45.336 --> 00:00:49.590
Redux is effectively an immutable state
tree, at the end of the day, right?

12
00:00:49.590 --> 00:00:53.064
You go, these actions come in,
they are easily testable.

13
00:00:53.064 --> 00:00:56.649
You don't have to wire up an entire
dependency graph, you can basically

14
00:00:56.649 --> 00:00:59.841
create a plain old JavaScript object,
throw it into a reducer.

15
00:00:59.841 --> 00:01:05.991
Throw an action in, test it, you can know
all these things are going on, right?

16
00:01:05.991 --> 00:01:10.303
With your MobX implementation,
if you're not careful, right,

17
00:01:10.303 --> 00:01:14.769
you can kind of see one of my belief
systems playing out here in the same

18
00:01:14.769 --> 00:01:19.555
reason that we opted for
Redux-Observable over Redux-Thunk, right?

19
00:01:19.555 --> 00:01:23.153
Cuz Redux-Observable had a lot of rules,
a lot of structure, and

20
00:01:23.153 --> 00:01:24.895
my team keeps growing, right?

21
00:01:24.895 --> 00:01:27.690
We were four people when
I started on that team.

22
00:01:27.690 --> 00:01:30.406
We are, I think,
11 frontend engineers now and

23
00:01:30.406 --> 00:01:32.808
we just hired a whole bunch of more,
right?

24
00:01:32.808 --> 00:01:35.870
I have to keep getting bigger rooms for
the frontend architecture guild.

25
00:01:35.870 --> 00:01:39.151
So having some consistency
instead of rules and

26
00:01:39.151 --> 00:01:44.987
deterministic ways of doing things are I
think really, really important, right?

27
00:01:44.987 --> 00:01:46.672
So there are advantages and disadvantages,

28
00:01:46.672 --> 00:01:48.406
some of the advantages
of a dependency graph.

29
00:01:48.406 --> 00:01:52.329
It's super easy to update,
it was really easy to implement that,

30
00:01:52.329 --> 00:01:55.424
the different objects can
just point to each other.

31
00:01:55.424 --> 00:01:58.474
It's not like, all right, I need to
find the one with the ID of this.

32
00:01:58.474 --> 00:02:01.363
Well, arrays are stinky for this,
so I'm actually gonna have to use.

33
00:02:01.363 --> 00:02:04.570
I mean I could just literally say, hey,
are you the object I'm looking for?

34
00:02:04.570 --> 00:02:06.720
I don't have to find the ID,
so on and so forth.

35
00:02:06.720 --> 00:02:11.525
The actions are simpler and
they're co-located with the data, right?

36
00:02:11.525 --> 00:02:13.093
We wrote a bunch of computer properties.

37
00:02:13.093 --> 00:02:15.608
We had the observable
properties in the constructor,

38
00:02:15.608 --> 00:02:17.911
we could toggle them right then in there,
right?

39
00:02:17.911 --> 00:02:22.336
We didn't have to separate, all right,
actions over here, producers over there,

40
00:02:22.336 --> 00:02:25.297
or initial state,
separating out the ability to fetch.

41
00:02:25.297 --> 00:02:29.761
If you needed to fire an AJAX call, right,
we didn't do this, but you can say, hey,

42
00:02:29.761 --> 00:02:32.994
if I don't listen,
you need to talk to an API, totally cool.

43
00:02:32.994 --> 00:02:37.941
The constructor can say, hey, when this
object is created, go make the API call,

44
00:02:37.941 --> 00:02:41.208
and then update this property
on this object, right?

45
00:02:41.208 --> 00:02:44.043
You could create a method called reload,
all right,

46
00:02:44.043 --> 00:02:46.696
[LAUGH] that will then fire
off that request again.

47
00:02:46.696 --> 00:02:50.018
You can have a loading equals
false that's observable, and

48
00:02:50.018 --> 00:02:53.811
you can set it to true as you're
loading and turn it back off to false.

49
00:02:53.811 --> 00:02:55.659
It's really easy to have
these things there.

50
00:02:55.659 --> 00:02:59.680
And like we said, we are able to just
point out, are you the item, right?

51
00:02:59.680 --> 00:03:02.509
We could pass the item
list down to the item,

52
00:03:02.509 --> 00:03:05.880
it could talk back up to the item,
so on and so forth.

53
00:03:05.880 --> 00:03:08.178
Immutable state trees have advantages,
too.

54
00:03:08.178 --> 00:03:12.327
Doing a snapshot of that entire plain old
JavaScript object like I was talking about

55
00:03:12.327 --> 00:03:13.819
and getting it from support.

56
00:03:13.819 --> 00:03:17.526
Or setting up as your debugging,
and just saying, hey,

57
00:03:17.526 --> 00:03:22.254
at the end of the day, your Redux
state is one giant JSON object, right?

58
00:03:22.254 --> 00:03:28.066
The ability to just rehydrate based off
of that is incredibly powerful, right?

59
00:03:28.066 --> 00:03:29.955
It's a simple tree structure, right?

60
00:03:29.955 --> 00:03:35.002
The dom's a tree structure, my React
hierarchy is a tree structure, right?

61
00:03:35.002 --> 00:03:39.200
We use a lot of ASTs and
run a lot of our HTML through

62
00:03:39.200 --> 00:03:43.100
hand-built parser's and stuff like that.

63
00:03:43.100 --> 00:03:46.547
It is a skill set that was very good for
us to navigate trees.

64
00:03:46.547 --> 00:03:50.327
We're doing it in other parts of our
code base that are not state management.

65
00:03:50.327 --> 00:03:53.450
We have a bunch of helper
functions that we've written for

66
00:03:53.450 --> 00:03:55.179
navigating all sorts of trees.

67
00:03:55.179 --> 00:04:01.192
It was easy for
us to re-leverage those tools.

68
00:04:01.192 --> 00:04:05.167
All you need to know is the string of
the ID and you can find the thing.

69
00:04:05.167 --> 00:04:08.341
Yeah, like I said, you can serialize it,
get it from support, so on and so forth.

70
00:04:08.341 --> 00:04:13.117
Turns out if you're interested, you can
have your cake and eat it too, right?

71
00:04:13.117 --> 00:04:18.544
There is a library called MobX state tree,
which is giving you MobX,

72
00:04:18.544 --> 00:04:23.890
and then also a tree-like data
structure where you manipulate it.

73
00:04:23.890 --> 00:04:28.877
And so instead of maybe arrays,
it enforces kind of a normalization

74
00:04:28.877 --> 00:04:34.050
that we saw in Redux, right,
where we have this tree, all the items.

75
00:04:34.050 --> 00:04:36.309
Whenever you're dealing with a tree,

76
00:04:36.309 --> 00:04:39.121
prefer objects over
arrays whenever possible.

77
00:04:39.121 --> 00:04:41.319
So this is pure objects all the way down.

78
00:04:41.319 --> 00:04:45.618
So you can say items 1 value and
you're gonna get everything you need,

79
00:04:45.618 --> 00:04:46.990
right then and there.

