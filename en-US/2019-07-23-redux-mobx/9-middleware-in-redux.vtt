WEBVTT

1
00:00:00.760 --> 00:00:05.768
&gt;&gt; Steve Kinney: So there is one more
that we're gonna kinda take a look at,

2
00:00:05.768 --> 00:00:08.643
which is this apply middleware.

3
00:00:08.643 --> 00:00:16.460
Apply middleware is basically in between
that action and it hitting the reducer.

4
00:00:16.460 --> 00:00:18.670
You can do other stuff.

5
00:00:18.670 --> 00:00:21.160
We will see this other stuff later today.

6
00:00:21.160 --> 00:00:26.070
We'll see this other stuff later today
when we need to fire an API call or

7
00:00:26.070 --> 00:00:27.850
something along those lines.

8
00:00:27.850 --> 00:00:31.215
Because this is all just really simple,
pure JavaScript,

9
00:00:31.215 --> 00:00:34.983
where we're just mutating an object,
or not mutating an object,

10
00:00:34.983 --> 00:00:39.550
replacing an object, right,
careful with my words there, right?

11
00:00:39.550 --> 00:00:41.720
So if we wanna fire an API call, or

12
00:00:41.720 --> 00:00:45.880
do other stuff, have side effects,
right, that doesn't happen.

13
00:00:45.880 --> 00:00:48.030
Everything's gotta be pure in
that cycle that I showed you.

14
00:00:48.030 --> 00:00:53.500
Applied middleware gives us
an opportunity to interject ourselves,

15
00:00:53.500 --> 00:00:56.240
and to be able to have some thoughts and
opinions, right?

16
00:00:56.240 --> 00:00:59.660
And so
we could write just some middleware,

17
00:00:59.660 --> 00:01:05.648
that's a simple JavaScript function just
like everything else in Redux, right?

18
00:01:05.648 --> 00:01:09.480
So we can say logger ,for instance, right?

19
00:01:09.480 --> 00:01:14.860
And one of the things that gets passed
in is the ability to get the current

20
00:01:14.860 --> 00:01:17.140
state of the store, right?

21
00:01:17.140 --> 00:01:20.790
The current, we say the store is this
object that's holding everything,

22
00:01:20.790 --> 00:01:23.690
it's got the ability to dispatch action,
so on and so forth.

23
00:01:23.690 --> 00:01:30.470
The snapshot of what that object is
at that moment, we call state, right.

24
00:01:30.470 --> 00:01:34.953
And so at any given point, we can get
the current state of the store, and

25
00:01:34.953 --> 00:01:40.730
the middleware is a function that
returns another function, right?

26
00:01:40.730 --> 00:01:44.000
And there's a little bit of
functional programming in here,

27
00:01:44.000 --> 00:01:47.220
like functional programming warning,

28
00:01:47.220 --> 00:01:52.130
where we return a new function,
it takes the argument called next.

29
00:01:53.540 --> 00:01:57.920
All right, so this, we're returning
a function that returns another function.

30
00:01:59.820 --> 00:02:01.862
And we'll do whatever
we need to do in here.

31
00:02:01.862 --> 00:02:07.070
So console log, MIDDLEWARE,

32
00:02:07.070 --> 00:02:11.470
and we could go ahead and get the state
of the store and do something to it.

33
00:02:11.470 --> 00:02:15.120
Or make an AJAX request or
something along those lines.

34
00:02:15.120 --> 00:02:17.474
And then you can see the action.

35
00:02:20.470 --> 00:02:26.570
&gt;&gt; Steve Kinney: All right,
we use middleware a few places.

36
00:02:26.570 --> 00:02:31.840
One is we use it with libraries like
Redux and Redux Observable, right?

37
00:02:31.840 --> 00:02:35.760
We also use it for analytics, right?

38
00:02:35.760 --> 00:02:38.680
Instead of going throughout our code base,
and finding

39
00:02:38.680 --> 00:02:42.730
all of the times they did a certain
action and doing a react application.

40
00:02:42.730 --> 00:02:45.890
We listen for all of the actions
that are coming through.

41
00:02:45.890 --> 00:02:49.070
It's a hey, it's an upload users,
right, action.

42
00:02:49.070 --> 00:02:52.221
We will then send that the segment IO,
right, or something along those lines.

43
00:02:52.221 --> 00:02:56.218
And we have one common place in our
code base that is listening for

44
00:02:56.218 --> 00:03:00.990
every action firing through and
then can make those analytics calls.

45
00:03:00.990 --> 00:03:03.790
Right, and all of that kind of stuff so
that we can debug and

46
00:03:03.790 --> 00:03:06.550
stuff along those lines and
see usage of the application, right.

47
00:03:06.550 --> 00:03:12.270
So it's a place to hook into that
entire cycle that we saw earlier and

48
00:03:12.270 --> 00:03:14.140
have opinions about what we're doing.

49
00:03:15.190 --> 00:03:23.319
The one thing that you need to do is you
do need to call Next at some point, right?

50
00:03:26.372 --> 00:03:29.600
&gt;&gt; Steve Kinney: Because you can chain
multiple middleware together, right?

51
00:03:29.600 --> 00:03:33.246
Just because we have a middleware
that's sending analytics to segment IO

52
00:03:33.246 --> 00:03:36.849
does not mean that I don't want to
have Redux Observable, too, right.

53
00:03:36.849 --> 00:03:39.590
The idea of middleware is
you chain them together.

54
00:03:39.590 --> 00:03:41.900
You can do multiple things along the way.

55
00:03:41.900 --> 00:03:44.256
And then have something that
comes out the other end, right,

56
00:03:44.256 --> 00:03:45.806
that will eventually go to the reducer.

57
00:03:50.454 --> 00:03:55.049
&gt;&gt; Steve Kinney: Right, so this will
create our entire flow in this case,

58
00:03:55.049 --> 00:03:55.750
right.

59
00:03:55.750 --> 00:03:58.831
And all that we need to do
is when we create a store,

60
00:04:02.343 --> 00:04:03.713
&gt;&gt; Steve Kinney: Give us some space.

61
00:04:08.529 --> 00:04:10.474
&gt;&gt; Steve Kinney: We can give it a reducer,
and

62
00:04:10.474 --> 00:04:14.673
we can also,
&gt;&gt; Steve Kinney: Use this

63
00:04:14.673 --> 00:04:16.509
applyMiddleware helper function.

64
00:04:24.632 --> 00:04:25.442
&gt;&gt; Steve Kinney: And it will go ahead,

65
00:04:25.442 --> 00:04:27.559
and we can then kinda compose
that chain for ourselves.

66
00:04:30.010 --> 00:04:34.750
All right, so we can applyMiddleware,
we'll start with our logger, right.

67
00:04:34.750 --> 00:04:37.564
And I can do additional ones in here and
basically,

68
00:04:37.564 --> 00:04:40.902
this could be then redux thunk,
an observable, a logger and

69
00:04:40.902 --> 00:04:44.610
basically those actions will flow
through each of them, right.

70
00:04:44.610 --> 00:04:46.624
So we can kinda hook in there and
do additional stuff.

71
00:04:46.624 --> 00:04:49.779
Generally speaking, to be really honest,

72
00:04:53.770 --> 00:04:58.670
for us the analytics tool was the first
custom middleware we ever had to write.

73
00:04:58.670 --> 00:05:01.450
We've used middleware, right, and
we'll see that a little bit, right?

74
00:05:01.450 --> 00:05:07.350
Again, redux thunk, redux observable,
so on and so forth, redux promise.

75
00:05:07.350 --> 00:05:10.631
But the fact of the matter is
the analytics, when we were, hey,

76
00:05:10.631 --> 00:05:13.180
someone was like, I'm gonna have
to spend a week going through all

77
00:05:13.180 --> 00:05:14.990
the code base to do all
these analytics functions.

78
00:05:14.990 --> 00:05:17.869
And I was like,
what if we did this, right,

79
00:05:17.869 --> 00:05:19.450
it was the very first
time we had to write it.

80
00:05:19.450 --> 00:05:21.760
As long as you understand
the kind of basic flow and

81
00:05:21.760 --> 00:05:27.055
the idea that a lot of this is
functions and modifying objects,

82
00:05:27.055 --> 00:05:31.850
effectively, that is redux,
right, at this point.

83
00:05:31.850 --> 00:05:33.690
We'll actually see it as we
build some applications and

84
00:05:33.690 --> 00:05:38.900
get a little more into the leaves, but
that is the scope of it and all of it.

85
00:05:38.900 --> 00:05:42.940
&gt;&gt; Speaker 2: Quick point on the last
line, did you mean to call create store?

86
00:05:42.940 --> 00:05:43.750
Is that what that is?

87
00:05:43.750 --> 00:05:44.946
&gt;&gt; Steve Kinney: I did.
&gt;&gt; Speaker 2: Okay.

88
00:05:44.946 --> 00:05:45.824
&gt;&gt; Steve Kinney: Thank you.

89
00:05:48.430 --> 00:05:49.710
&gt;&gt; Steve Kinney: Okay,
thank you very much.

