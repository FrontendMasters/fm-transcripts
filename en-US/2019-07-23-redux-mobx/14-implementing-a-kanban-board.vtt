WEBVTT

1
00:00:00.000 --> 00:00:03.609
&gt;&gt; Steve Kinney: So we're gonna
implement this application, we're gonna

2
00:00:03.609 --> 00:00:08.239
do a kinda simplified version of the
Kanban board that we did in the prequel.

3
00:00:08.239 --> 00:00:10.018
We're going to, this time do it in Redux.

4
00:00:10.018 --> 00:00:14.896
And there'll be no prop generally, cuz we
have the ability to keep all of our states

5
00:00:14.896 --> 00:00:18.671
very separate and pass it into
just the components that we need.

6
00:00:18.671 --> 00:00:23.164
So we're gonna start,
there's a branch called Redux-basis, and

7
00:00:23.164 --> 00:00:24.564
we will start there.

8
00:00:38.175 --> 00:00:42.291
&gt;&gt; Steve Kinney: Cool, for those of
you unfamiliar with the application,

9
00:00:42.291 --> 00:00:45.406
if you are, there's a few little changes.

10
00:00:45.406 --> 00:00:48.611
We've got the application component,
which has the ability to create a list and

11
00:00:48.611 --> 00:00:51.550
shows us all of our lists,
those will eventually show the cards.

12
00:00:51.550 --> 00:00:55.480
We've got our users, right now this is a
completely, there's no concept of state in

13
00:00:55.480 --> 00:00:58.260
it, there's also just no state in it,
cuz we haven't hooked Redux up yet.

14
00:01:01.420 --> 00:01:05.768
So this is the kind of default
data of our application, and

15
00:01:05.768 --> 00:01:09.335
it's not what we say normalized,
like cards.

16
00:01:09.335 --> 00:01:12.578
There's a separate set of cards for every
list, which means to change a given card

17
00:01:12.578 --> 00:01:15.774
we're gonna have to go through all the
list, find the right list, go through all

18
00:01:15.774 --> 00:01:18.850
the cards, find the right card,
it's a series, it's arrays upon arrays.

19
00:01:20.310 --> 00:01:23.460
We also have this ID of users,
users have IDs, but

20
00:01:23.460 --> 00:01:27.677
then if we wanna assign a card to an user,
it might be problematic.

21
00:01:27.677 --> 00:01:32.027
So one of the things that we do at
Sungrade is, that we will go ahead and

22
00:01:32.027 --> 00:01:36.310
we'll take the data as we get it
from the API, and kind of change it.

23
00:01:36.310 --> 00:01:40.109
We do this by hand, but there is
a great library that we'll use for

24
00:01:40.109 --> 00:01:44.341
a second, to just kind of restructure
our data in a way that makes sense.

25
00:01:44.341 --> 00:01:49.950
So this is called Normalizr, and
it's kinda like the 90s, or not the 90s,

26
00:01:49.950 --> 00:01:55.006
my God, it's more like 2010,
where everything was taken, so you took

27
00:01:55.006 --> 00:02:00.345
the E out, when you had like Tumblr, and
Flickr, and stuff along those lines.

28
00:02:00.345 --> 00:02:04.220
And this allows you to kind
of take some state, so

29
00:02:04.220 --> 00:02:05.880
this is the same one I
showed you a second ago.

30
00:02:07.370 --> 00:02:09.480
And you can define a schema.

31
00:02:10.600 --> 00:02:12.830
And so we look at what we
can pull in from Normalizr,

32
00:02:12.830 --> 00:02:18.080
you can see that there is a normalize
method and the schema object, right?

33
00:02:18.080 --> 00:02:21.000
And what this does, you can do this
all by hand, we do it by hand.

34
00:02:21.000 --> 00:02:25.022
But for our purposes today, just so you
don't have to watch me write all this code

35
00:02:25.022 --> 00:02:28.652
by hand, we'll actually use a helper
library, which I think is great.

36
00:02:28.652 --> 00:02:30.625
There's not a particularly good reason,

37
00:02:30.625 --> 00:02:34.184
we actually have it installed in our
package JSON with the intent of using it,

38
00:02:34.184 --> 00:02:37.288
and then we just wrote them
all by hand for reasons.

39
00:02:37.288 --> 00:02:42.429
And so, Normalizr itself gives
you functions for normalizing and

40
00:02:42.429 --> 00:02:48.778
denormalizing data, cuz you might need to
change it back to send it to the server.

41
00:02:48.778 --> 00:02:52.906
What we do is, we have an adapter layer
where we intercept, basically every Ajax

42
00:02:52.906 --> 00:02:56.913
request on the way in, change the data
structure to be something that works for

43
00:02:56.913 --> 00:03:00.678
our UI, and then when we're sending
post-requests back to the server,

44
00:03:00.678 --> 00:03:03.550
we will change it back for
the way the API likes it.

45
00:03:03.550 --> 00:03:06.550
And for us, just some of the nuances there
meant that we had to do it by hand, but

46
00:03:06.550 --> 00:03:07.820
we're pretty free at this point.

47
00:03:09.770 --> 00:03:13.880
So, you basically can define
a bunch of schemas, so

48
00:03:13.880 --> 00:03:18.610
here we have an user schema which is just,
you're giving it a name, and

49
00:03:18.610 --> 00:03:21.860
then you can say, normalize our users.

50
00:03:21.860 --> 00:03:22.819
And if we look at this object,

51
00:03:24.400 --> 00:03:27.700
you can see that it took that
array of users that we had,

52
00:03:27.700 --> 00:03:31.010
where it's just an array, there's these
objects in it, and it gave me two things.

53
00:03:31.010 --> 00:03:33.620
It gave me this entities object,
where I'm getting,

54
00:03:33.620 --> 00:03:38.050
just like I was trying to sell
you on before, keys, and values.

55
00:03:38.050 --> 00:03:41.400
So now if I need to remove the second one,
I don't have to iterate through.

56
00:03:41.400 --> 00:03:45.883
Two is not hard, but
there's like a thousand, that's a pain.

57
00:03:45.883 --> 00:03:49.707
You don't necessarily want to,
returning that brand new array will also,

58
00:03:49.707 --> 00:03:52.454
theoretically trigger a bunch
of rerenders in React,

59
00:03:52.454 --> 00:03:55.230
which we don't wanna do
if we don't have to.

60
00:03:55.230 --> 00:04:01.050
And it also gives me this
array of all of the IDs.

61
00:04:01.050 --> 00:04:04.200
This is incredibly useful,
that we're gonna use later on which is,

62
00:04:04.200 --> 00:04:07.719
instead of, hey,
here's an array of all of the users,

63
00:04:09.150 --> 00:04:11.970
iterate through them to make
your independent user objects.

64
00:04:11.970 --> 00:04:15.650
Well, now if an user changes,
I don't wanna take that list and

65
00:04:15.650 --> 00:04:18.340
have to rerender it,
cuz it will be a brand new array.

66
00:04:18.340 --> 00:04:20.189
I can change just that object and

67
00:04:20.189 --> 00:04:24.950
the kind of container object that is
the users, plural, won't have to change,

68
00:04:24.950 --> 00:04:28.120
cuz it's only getting this, and
this will be the same array.

69
00:04:28.120 --> 00:04:31.476
Yeah, I'm gonna make you a Redux container
with the one with the idea of one.

70
00:04:31.476 --> 00:04:35.520
We use mapStateToProps to figure
out which one number 1 is,

71
00:04:35.520 --> 00:04:37.430
in a second we'll figure all of that out,
but

72
00:04:37.430 --> 00:04:40.430
it gives you basically a more
sustainable way to manage your state.

73
00:04:40.430 --> 00:04:44.330
There'll still be some tricks that we have
to pull with the, a mutable state that we

74
00:04:44.330 --> 00:04:48.000
saw in the very beginning, but
it's definitely a nicer way to do this.

75
00:04:48.000 --> 00:04:51.410
You can also define relations, so

76
00:04:51.410 --> 00:04:56.480
we can say that a card, we can say that
our schema for cards, cards exists,

77
00:04:56.480 --> 00:05:00.430
but they will be assigned to an user.

78
00:05:00.430 --> 00:05:03.925
And so this will, instead of having
the total version of user object,

79
00:05:03.925 --> 00:05:07.301
you'll have an assign to property
which will point to just that ID,

80
00:05:07.301 --> 00:05:11.060
which then we could go to that other
user schema and pull out just that user.

81
00:05:11.060 --> 00:05:14.684
And then this works the other way too,

82
00:05:14.684 --> 00:05:18.880
you can say that a list
has an array of cards.

83
00:05:18.880 --> 00:05:22.972
And before, when all of our cards, that
each set of cards for a list were nested

84
00:05:22.972 --> 00:05:27.230
all together, you'd have a list and
its cards, another list and its cards.

85
00:05:27.230 --> 00:05:30.890
This makes it hard to define the card
that you're trying to remove or move, or

86
00:05:30.890 --> 00:05:32.460
something along those lines.

87
00:05:32.460 --> 00:05:35.980
We'll see the kind of data structure
that we get in a second, and

88
00:05:35.980 --> 00:05:37.640
it will work out a lot better for us.

89
00:05:37.640 --> 00:05:42.409
So again, you'll see we have
the entities here, where I'm gonna

90
00:05:42.409 --> 00:05:47.263
have a collection of cards, and
that card will be assigned to one for

91
00:05:47.263 --> 00:05:51.115
instance, we'll see the rest
of those properties.

92
00:05:51.115 --> 00:05:56.089
The list, on the other hand, no longer
have all the information for every card,

93
00:05:56.089 --> 00:06:00.790
it just has the IDs, which we can then
quickly look up in this object as well.

94
00:06:02.340 --> 00:06:06.707
And users is pretty much the same, so it
gives us this ability to kind of structure

95
00:06:06.707 --> 00:06:09.677
our data, so
we're doing quick look ups on an object.

96
00:06:09.677 --> 00:06:10.937
Each one just points to the ID,

97
00:06:10.937 --> 00:06:13.956
we don't have to go through all this
data structure and figure stuff out.

98
00:06:13.956 --> 00:06:17.781
If an user changes its name,
the card doesn't care,

99
00:06:17.781 --> 00:06:21.617
it's just pointing to the ID
that it's assigned to.

100
00:06:21.617 --> 00:06:24.463
If a card has to change its description,

101
00:06:24.463 --> 00:06:29.672
the list doesn't need to get updated,
cuz it's just pointing to the ID.

102
00:06:29.672 --> 00:06:34.280
So, this saves us a bunch of work,
it saves a bunch of performance work,

103
00:06:34.280 --> 00:06:36.786
everyone is a lot happier in this case.

104
00:06:36.786 --> 00:06:40.307
So we can kinda, go through and
see everything, let's actually go head and

105
00:06:40.307 --> 00:06:41.140
implement this.

