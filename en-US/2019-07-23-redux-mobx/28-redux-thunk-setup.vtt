WEBVTT

1
00:00:00.460 --> 00:00:02.420
So talking about thunks is fun.

2
00:00:02.420 --> 00:00:05.106
But what do you say we implement one?

3
00:00:05.106 --> 00:00:08.354
All right, cool.

4
00:00:13.548 --> 00:00:17.853
So we'll kinda go in here, and

5
00:00:17.853 --> 00:00:22.160
so tweet-stream, ideally,

6
00:00:22.160 --> 00:00:28.463
should basically,
I have a very simple API.

7
00:00:28.463 --> 00:00:30.905
We actually check it out.

8
00:00:33.387 --> 00:00:38.280
So we do need to kick it off, right?

9
00:00:38.280 --> 00:00:40.290
And so
this tweet-stream here will basically,

10
00:00:40.290 --> 00:00:43.980
I have a little node server that is
listening to the Twitter live stream for

11
00:00:43.980 --> 00:00:45.840
anything with the word JavaScript.

12
00:00:45.840 --> 00:00:50.450
Apparently, it is all do you like
a desktop, or a notebook computer, and

13
00:00:50.450 --> 00:00:52.000
some jobs?

14
00:00:52.000 --> 00:00:55.860
There is nothing more terrifying than
revolving on a Twitter live stream.

15
00:00:55.860 --> 00:00:56.640
But here we are.

16
00:00:56.640 --> 00:01:00.380
That way, we could have some
some new data along the way.

17
00:01:00.380 --> 00:01:05.140
And so the tweet-stream will basically
have an API that we can hit up, and

18
00:01:05.140 --> 00:01:06.720
we can do stuff with.

19
00:01:06.720 --> 00:01:15.530
Let's actually fire it up, With npm start.

20
00:01:15.530 --> 00:01:17.501
And as we do that,
we'll kinda take a tour of the code.

21
00:01:20.433 --> 00:01:23.955
All right, so index isn't
anything really all that special.

22
00:01:23.955 --> 00:01:27.122
It's some basic Redux boilerplate.

23
00:01:27.122 --> 00:01:32.150
We're gonna need to modify this to use
the Redux thunk middleware at some point.

24
00:01:32.150 --> 00:01:34.640
An empty actions file,

25
00:01:36.160 --> 00:01:41.640
a reducer that we're gonna
need to put some stuff in.

26
00:01:41.640 --> 00:01:44.500
We're using a function here,
and combining it immediately.

27
00:01:44.500 --> 00:01:48.481
And we've got some react
components that we can use.

28
00:01:48.481 --> 00:01:53.111
So first thing we need to do,
is we need to pull in the middleware.

29
00:01:53.111 --> 00:01:57.620
And then we saw earlier that apply
middleware function that comes with Redux.

30
00:01:57.620 --> 00:02:01.150
That will give us the ability
to pop that piece of middleware

31
00:02:01.150 --> 00:02:06.180
into the middle of our
flow that we saw earlier.

32
00:02:06.180 --> 00:02:08.404
So we'll go in, and
we'll go into index.js.

33
00:02:10.430 --> 00:02:12.178
And we'll kinda pull in.

34
00:02:12.178 --> 00:02:14.803
So createStore, we need createStore.

35
00:02:14.803 --> 00:02:16.742
We're gonna need applyMiddleware.

36
00:02:16.742 --> 00:02:20.880
And then okay,
what middleware do you wanna apply?

37
00:02:20.880 --> 00:02:27.162
So import thunk from redux-thunk.

38
00:02:28.480 --> 00:02:31.571
Now, the other thing is
when we create the store,

39
00:02:31.571 --> 00:02:35.779
we're gonna say applyMiddleware,
and we'll give it that thunk.

40
00:02:39.220 --> 00:02:43.708
Cool, so now we've effectively
installed Redux thunk.

41
00:02:43.708 --> 00:02:51.050
Now, what we need to do is create
a action creator, I use air quotes there.

42
00:02:51.050 --> 00:02:51.892
An action creator,

43
00:02:51.892 --> 00:02:55.271
that's gonna return a function that is
eventually going to dispatch an action.

44
00:02:55.271 --> 00:02:56.897
Redux wants to stay.

45
00:02:56.897 --> 00:02:58.510
Redux wants no business in your async.

46
00:02:58.510 --> 00:03:01.020
It's trying to stay in
a world of pure functions.

47
00:03:01.020 --> 00:03:04.350
All that stuff should be
isolated out to middleware,

48
00:03:04.350 --> 00:03:08.198
should not happen in your reducer,
should ideally not have in

49
00:03:08.198 --> 00:03:11.986
your map dispatch to props, or
anything along those lines.

50
00:03:11.986 --> 00:03:17.700
So actions, we'll go ahead,
we'll say export const fetchTweets.

51
00:03:22.500 --> 00:03:24.843
And this now needs to return a function.

52
00:03:32.330 --> 00:03:34.202
Which will go ahead, and it will fetch.

53
00:03:35.342 --> 00:03:38.110
I will go back over here.

54
00:03:40.110 --> 00:03:41.310
We'll deal with that momentarily.

55
00:03:43.021 --> 00:03:44.410
We've got this tweet stream.

56
00:03:44.410 --> 00:03:49.406
And if we go to api/tweets there,
it's a giant JSON

57
00:03:49.406 --> 00:03:54.526
mess of all the data you get
back from the Twitter API.

58
00:03:57.640 --> 00:03:59.356
We can just paste it in there.

59
00:03:59.356 --> 00:04:05.450
So it's just
tweet-stream.glitch.me/api/tweets.

60
00:04:07.976 --> 00:04:10.826
So we'll fetch that, and
we're just using a fetch API, right?

61
00:04:10.826 --> 00:04:12.207
You can use anything you want.

62
00:04:12.207 --> 00:04:14.446
You don't have to use a fetch API.

63
00:04:14.446 --> 00:04:16.554
If you wanna use axios, use axios.

64
00:04:16.554 --> 00:04:18.410
If you wanna use jquery.ajx,
use jquery.ajax, right?

65
00:04:18.410 --> 00:04:21.650
Use whatever way you like to hit APIs.

66
00:04:21.650 --> 00:04:24.540
I'm just gonna go with the built-in one,
mostly.

67
00:04:24.540 --> 00:04:27.070
I don't wanna play favorites here.

68
00:04:27.070 --> 00:04:27.720
So the fetch API,

69
00:04:27.720 --> 00:04:31.480
you basically have to say whatever it is,
how do you wanna parse it, right?

70
00:04:31.480 --> 00:04:35.065
And so we know that it's JSON,
cuz the fetch API is super flexible.

71
00:04:35.065 --> 00:04:36.593
It can fetch your images.

72
00:04:36.593 --> 00:04:38.400
It can fetch you blobs,
so on and so forth.

73
00:04:38.400 --> 00:04:40.290
We're saying this is JSON.

74
00:04:40.290 --> 00:04:44.960
And then we'll just say turn into JSON,
we'll say response.

75
00:04:47.460 --> 00:04:48.615
We'll just console log it for now.

76
00:04:50.598 --> 00:04:52.750
We'll console log this dispatch, right?

77
00:04:52.750 --> 00:04:53.890
Which is just gonna be a function.

78
00:04:53.890 --> 00:04:55.944
It won't be anything truly surprising.

79
00:04:55.944 --> 00:04:58.560
But this is it, right?

80
00:04:58.560 --> 00:05:01.260
This is how you can add a synchronous
code to your Redux store.

81
00:05:01.260 --> 00:05:06.630
Now, if you're like, I think it's
generally a good idea to have a belief

82
00:05:06.630 --> 00:05:13.780
system that if something seems easy,
it is probably a foot gun, right?

83
00:05:13.780 --> 00:05:20.382
Anything that's easy means that
let's say you had hit multiple APIs.

84
00:05:20.382 --> 00:05:22.030
It's again, it's just JavaScript.

85
00:05:23.560 --> 00:05:27.115
And you're gonna end up in callback hell,
right?

86
00:05:27.115 --> 00:05:31.740
And coordinating a bunch of stuff,
because there is no abstraction.

87
00:05:31.740 --> 00:05:34.764
When we saw editing,
objects immutably was hard.

88
00:05:34.764 --> 00:05:36.438
We made an abstraction,
and made it easier, right?

89
00:05:36.438 --> 00:05:40.200
With that kinda add entity,
and stuff along those lines.

90
00:05:40.200 --> 00:05:43.870
Because this is so transparent and simple,
it means that you're on the hook for

91
00:05:43.870 --> 00:05:44.830
dealing with.

92
00:05:44.830 --> 00:05:47.050
Okay, what if something happened?

93
00:05:47.050 --> 00:05:48.180
What if a user hit cancel, and

94
00:05:48.180 --> 00:05:51.650
we don't actually want to do
the thing when this promise resolves?

95
00:05:51.650 --> 00:05:52.720
We'll deal with that in a little bit.

96
00:05:52.720 --> 00:05:55.110
So it is simple, but

97
00:05:55.110 --> 00:06:00.005
simple means that all the stuff that
it doesn't do, you're on the hook for.

98
00:06:00.005 --> 00:06:03.120
So if I'm doing a small project,
we'll absolutely reach for

99
00:06:03.120 --> 00:06:05.770
this, because it's a very
easy way to do it.

100
00:06:05.770 --> 00:06:09.696
But if things get more complicated,
you will be on the hook to deal with that.

101
00:06:09.696 --> 00:06:12.475
So let's go into this fetchTweets.

102
00:06:17.200 --> 00:06:20.880
Basically, go ahead, and
we have this, we're going ahead.

103
00:06:20.880 --> 00:06:23.379
It's calling this function
that doesn't exist.

104
00:06:23.379 --> 00:06:24.613
Unclick, right?

105
00:06:24.613 --> 00:06:25.470
I can go over.

106
00:06:28.550 --> 00:06:33.026
Oop, I gotta fix SASS, so we'll fix.

107
00:06:33.026 --> 00:06:37.093
While SASS rebuilds, I'll implement this.

108
00:06:37.093 --> 00:06:42.190
So yeah, right now,
hitting that fetchTweets button.

109
00:06:42.190 --> 00:06:44.100
It's a button that says fetchTweets.

110
00:06:44.100 --> 00:06:46.860
We'll see in a second,
doesn't do anything.

111
00:06:46.860 --> 00:06:48.400
Now, I could create a container.

112
00:06:48.400 --> 00:06:49.340
I could do all that stuff we did before.

113
00:06:49.340 --> 00:06:51.940
I'm just going to keep it simple for now.

114
00:06:51.940 --> 00:06:55.610
This is mostly to get
a sense of Redux thunk.

115
00:06:55.610 --> 00:07:02.770
So what we'll do is we'll pull
in connect from react-redux.

116
00:07:07.330 --> 00:07:11.180
And we remember that we made that
action creator called fetchTweets.

117
00:07:11.180 --> 00:07:11.950
Let's grab that too.

118
00:07:11.950 --> 00:07:13.859
Let me make sure I exported it.

119
00:07:13.859 --> 00:07:16.050
I did.

120
00:07:16.050 --> 00:07:21.346
So I'll import fetchTweets

121
00:07:21.346 --> 00:07:25.110
from ./actions.

122
00:07:25.110 --> 00:07:28.010
And we'll just connect it right here.

123
00:07:28.010 --> 00:07:32.280
So we'll export default connect.

124
00:07:34.070 --> 00:07:36.750
We're not mapping a state to that button.

125
00:07:36.750 --> 00:07:39.450
We're just gonna pass in
the fetchTweets as our dispatch.

126
00:07:43.160 --> 00:07:45.872
And they'll give it that
fetchTweets component.

127
00:07:45.872 --> 00:07:53.315
Right, I mean, the hard work has already
been done in that action creator.

128
00:07:53.315 --> 00:07:55.480
Let's just check out.

129
00:07:58.550 --> 00:07:59.890
Got the fetchTweets in here.

130
00:07:59.890 --> 00:08:02.500
That's the right one, perfect.

131
00:08:02.500 --> 00:08:05.272
And then the tweets we're
gonna need to hook up to,

132
00:08:05.272 --> 00:08:07.952
cuz fetchTweets is going
to get the tweets.

133
00:08:07.952 --> 00:08:09.490
It's gonna put it into Redux.

134
00:08:09.490 --> 00:08:12.340
But then the tweets component still
needs to read that state, and

135
00:08:12.340 --> 00:08:13.880
be able to map it out.

136
00:08:13.880 --> 00:08:14.880
So we'll go in there.

137
00:08:16.920 --> 00:08:18.300
Right now, it's just a dumb component.

138
00:08:18.300 --> 00:08:24.127
We'll do something very similar to what we
did before, which is, we'll import connect

139
00:08:24.127 --> 00:08:30.423
from react-redux, great.

140
00:08:32.080 --> 00:08:34.870
And then we'll just export
default that as well.

141
00:08:34.870 --> 00:08:36.790
We'll give ourselves a MapStateToProps.

142
00:08:36.790 --> 00:08:37.802
It's a pretty easy one.

143
00:08:41.590 --> 00:08:46.070
That'll take state.

144
00:08:46.070 --> 00:08:48.201
In fact, really, we just wanna
pull the tweets off that object.

145
00:08:53.764 --> 00:08:56.300
I could just hand this as
the first argument to connect.

146
00:08:56.300 --> 00:08:58.386
I don't need to put it in a variable.

147
00:09:01.549 --> 00:09:02.980
He says,
as he decides to put in a variable.

148
00:09:04.800 --> 00:09:09.822
So MapStateToProps around
the tweets component.

