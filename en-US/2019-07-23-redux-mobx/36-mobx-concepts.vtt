WEBVTT

1
00:00:00.080 --> 00:00:03.210
&gt;&gt; Steve Kinney: So do we have the
observable state, we have these actions,

2
00:00:03.210 --> 00:00:06.041
which are maybe methods that
might change the state.

3
00:00:06.041 --> 00:00:07.406
And then we have these derivations.

4
00:00:07.406 --> 00:00:09.840
We had computer properties and reactions.

5
00:00:09.840 --> 00:00:16.830
That auto run was a reaction, saying,
hey, I saw that text value changed.

6
00:00:16.830 --> 00:00:18.950
I do stuff on text I value changed.

7
00:00:18.950 --> 00:00:20.549
I changed the damn.

8
00:00:20.549 --> 00:00:25.115
We used this in a prototype of our
upcoming code editor where the context API

9
00:00:25.115 --> 00:00:29.897
wasn't fully out yet so I used MobX inside
the code editor cuz I wanted to keep it

10
00:00:29.897 --> 00:00:32.790
totally separate from our Redux store.

11
00:00:32.790 --> 00:00:37.350
And I basically had MobX managing all
the internal state of this effectively

12
00:00:37.350 --> 00:00:38.340
text editor.

13
00:00:38.340 --> 00:00:42.080
But then also, hey, anytime any these
properties change, I want you to call

14
00:00:42.080 --> 00:00:46.100
the on change and the unsafe hooks
that we passed into the components.

15
00:00:46.100 --> 00:00:50.491
So we used Redux,
we also used MobX as well to

16
00:00:50.491 --> 00:00:54.630
kinda like together to do different
things, I think especially for

17
00:00:54.630 --> 00:00:59.030
like stuff like our editors,
I'm very cool with.

18
00:00:59.030 --> 00:01:02.260
Our ads product also, at this point,
uses MobX internally as well.

19
00:01:04.240 --> 00:01:07.530
So computer properties update
their value based on the data,

20
00:01:07.530 --> 00:01:09.790
reactions produce side effects, right?

21
00:01:09.790 --> 00:01:13.680
So a computer property is a full name
changing, or the uppercase changing.

22
00:01:13.680 --> 00:01:17.364
That side effect was, and
then you also go and manipulate the DOM.

23
00:01:17.364 --> 00:01:20.685
That's kinda the the differences
we've seen before.

24
00:01:20.685 --> 00:01:24.933
So here, we do something with
like a pizza calculator.

25
00:01:24.933 --> 00:01:28.681
In this case,
this is a plain old ES6 class.

26
00:01:28.681 --> 00:01:32.759
Number of people slices per person, we can
get the slices needed the pies needed,

27
00:01:32.759 --> 00:01:33.715
we can add a guest.

28
00:01:33.715 --> 00:01:39.512
If we wanted to make this an observable
using the decorator syntax,

29
00:01:39.512 --> 00:01:42.700
is just effectively annotating it.

30
00:01:42.700 --> 00:01:47.290
It's the same code, I'm doing
something like console logs in there.

31
00:01:47.290 --> 00:01:51.060
And I'll tell you about the console
logs in a second, don't do those.

32
00:01:51.060 --> 00:01:55.580
They're to make a point which is that

33
00:01:55.580 --> 00:01:58.280
we're pulling an action observable on
the computer which are all decorators.

34
00:01:58.280 --> 00:02:02.690
We're saying, hey,
I want to observe the number of people.

35
00:02:02.690 --> 00:02:05.380
I wanna observe the slicesPerPerson
because if those change,

36
00:02:05.380 --> 00:02:07.770
I need to update these
computed properties.

37
00:02:09.800 --> 00:02:14.536
So like slices needed is basically derived
from number of people on slicesPerPerson,

38
00:02:14.536 --> 00:02:18.790
pie's needed is derived from the slices
needed, and the slices per pie.

39
00:02:18.790 --> 00:02:24.540
So we're watching, if any of these other
values change, I care and I need to know,

40
00:02:24.540 --> 00:02:29.077
and then an action is saying like
this is a method that we can call.

41
00:02:29.077 --> 00:02:31.575
It's predominantly
there's a strict mode and

42
00:02:31.575 --> 00:02:35.820
call backs where you have to denote
all these actions with that action.

43
00:02:35.820 --> 00:02:40.030
Without the strict mode,
you don't necessarily need to, but

44
00:02:40.030 --> 00:02:43.120
I like the documentation portion of it.

45
00:02:43.120 --> 00:02:46.220
So I would recommend them.

46
00:02:46.220 --> 00:02:49.430
The reason that the console
log is super cool

47
00:02:49.430 --> 00:02:53.640
is I talked about before we talked
a little bit about memorization and

48
00:02:53.640 --> 00:02:56.360
selectors and
why this is really important.

49
00:02:56.360 --> 00:03:01.530
One of the things that MobX will do for
you under the hood is if you call

50
00:03:01.530 --> 00:03:06.701
slices needed, it will the first
time you call it, it will this case

51
00:03:06.701 --> 00:03:11.782
do the very simple multiplication
If you call it a second time, and

52
00:03:11.782 --> 00:03:17.081
neither the number of people nor
the slices per person have changed.

53
00:03:17.081 --> 00:03:19.520
It will give you the cached version.

54
00:03:22.060 --> 00:03:25.210
And it's lazy if either one of those
changes that won't go recomputing

55
00:03:25.210 --> 00:03:28.489
everything, it will compete for the first
time the first time you asked for it.

56
00:03:29.510 --> 00:03:32.250
If none of the properties that
it relies on have changed,

57
00:03:32.250 --> 00:03:34.110
it will give you back that cash version.

58
00:03:35.110 --> 00:03:37.970
And then should either one of those
change, it won't do any of the computation

59
00:03:37.970 --> 00:03:40.900
until the next time you ask for
that computed property.

60
00:03:40.900 --> 00:03:45.596
So a lot of the stuff we kinda
implemented, we get for free.

61
00:03:45.596 --> 00:03:51.059
One of the really cool things is
Mendix which is the M in MobX,

62
00:03:51.059 --> 00:03:58.155
it is the company where the Michel
Weststrate who wrote the library works.

63
00:03:58.155 --> 00:04:01.679
They don't have a single should
component update in their code base

64
00:04:03.220 --> 00:04:06.040
because effectively,
these values don't change

65
00:04:06.040 --> 00:04:10.730
unless they need to actually trigger and
change.

66
00:04:10.730 --> 00:04:14.635
So if you want it like classes are the
easiest to use for this cuz you can use

67
00:04:14.635 --> 00:04:18.440
decorators, you can use decorators on top
of just plain old JavaScript functions or

68
00:04:18.440 --> 00:04:19.970
JavaScript objects.

69
00:04:19.970 --> 00:04:22.181
You can use them in classes.

70
00:04:22.181 --> 00:04:27.270
That said, we kinda pointed
out in the very beginning that

71
00:04:31.860 --> 00:04:35.390
decorators were just functions
with syntactic sugar.

72
00:04:35.390 --> 00:04:39.010
Which means if you hate this decorator
stuff, turns out observable,

73
00:04:39.010 --> 00:04:40.210
it's a decorator.

74
00:04:40.210 --> 00:04:44.710
It's also just a function that can
wrap things so you can use it.

75
00:04:44.710 --> 00:04:46.430
I like this, as well.

76
00:04:46.430 --> 00:04:48.130
There is one piece of advice.

77
00:04:48.130 --> 00:04:50.120
You notice that I included maps here.

78
00:04:50.120 --> 00:04:55.050
I really like ES6 maps and stats and
I don't think they used often enough.

79
00:04:55.050 --> 00:04:56.620
They're also mutable again.

80
00:04:56.620 --> 00:04:58.960
So I have all the same problems and
react with them.

81
00:05:00.430 --> 00:05:04.740
But the one thing why you might
consider using a map is that

82
00:05:04.740 --> 00:05:10.470
when you pass a plain old
JavaScript object to observable,

83
00:05:10.470 --> 00:05:15.210
it's only watching the properties
of the object when you pass it in

84
00:05:16.410 --> 00:05:20.580
if you add a new property to that
object that is not being passed in.

85
00:05:23.230 --> 00:05:26.500
So, like that's generally
speaking not a problem.

86
00:05:26.500 --> 00:05:29.880
We're generally not adding new
properties to an object but

87
00:05:29.880 --> 00:05:31.790
if you do, that will not be wrapped in.

88
00:05:31.790 --> 00:05:35.307
Cuz all it does is it iterates
over the key of the object and

89
00:05:35.307 --> 00:05:37.368
wraps each value in observable.

90
00:05:37.368 --> 00:05:40.490
And so if you add a new one,
it's a plain old JavaScript property.

91
00:05:40.490 --> 00:05:44.560
A map, you have a set function
where it can intercept that and

92
00:05:44.560 --> 00:05:45.890
add the ability to observe it.

93
00:05:45.890 --> 00:05:51.091
So you might wanna consider using a map
If you are gonna be adding keys later on.

