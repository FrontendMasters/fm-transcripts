WEBVTT

1
00:00:00.095 --> 00:00:05.015
&gt;&gt; Steve Kinney: Is another
place that we can use reselect.

2
00:00:05.015 --> 00:00:07.555
Any time a new list gets created,

3
00:00:07.555 --> 00:00:12.830
we don't need to fetch all the users
again, they haven't changed.

4
00:00:14.270 --> 00:00:17.356
So we can implement pretty much
the same pattern, which is,

5
00:00:17.356 --> 00:00:21.109
hey, if the state.users hasn't changed,
cuz anything that happens in

6
00:00:21.109 --> 00:00:25.670
the list.Reducer and the card.Reducer
isn't even touching the user.Reducer.

7
00:00:25.670 --> 00:00:29.690
We can use reselect to like,
hey, get me all those user.ids.

8
00:00:29.690 --> 00:00:33.020
If that hasn't changed,
give me back that same array,

9
00:00:33.020 --> 00:00:37.680
which will not actually call any of this,
which is super cool.

10
00:00:37.680 --> 00:00:39.809
There are some testing notes
that you need to remember.

11
00:00:39.809 --> 00:00:43.821
This comes from real world experience,

12
00:00:43.821 --> 00:00:49.440
we got very happy to use
reselect all over the place.

13
00:00:49.440 --> 00:00:53.490
But, it's kind of like a running theme,
which is,

14
00:00:53.490 --> 00:00:57.550
if in any of these functions you
are creating a new array, so

15
00:00:57.550 --> 00:01:02.310
if we did object.values inside
of one of the checks to see,

16
00:01:02.310 --> 00:01:06.890
well, that's gonna be a new array, and
you will always opt out of the caching.

17
00:01:07.920 --> 00:01:12.820
So we actually, occasionally we
do six sprints in a row, and

18
00:01:12.820 --> 00:01:15.570
then we have,
innovation sprint, or whatever.

19
00:01:15.570 --> 00:01:18.089
And one of our engineers two weeks ago,

20
00:01:18.089 --> 00:01:23.129
basically audited the application and
found out all the places where we just,

21
00:01:23.129 --> 00:01:27.079
a lot of times it was like no
individual person's fault.

22
00:01:27.079 --> 00:01:31.338
I have this thing, I'll move this code
over here, I'll use the selector,

23
00:01:31.338 --> 00:01:34.269
and we had a few where we
were generating new arrays in

24
00:01:34.269 --> 00:01:36.760
the ones that would use
these kinda checks.

25
00:01:36.760 --> 00:01:41.730
And so, we were always regenerating, so
basically the selector was a no opt.

26
00:01:41.730 --> 00:01:46.569
And, one thing about a lot of these
performance improvements is that,

27
00:01:46.569 --> 00:01:50.130
if you do them wrong,
a lot of times they're worse.

28
00:01:50.130 --> 00:01:54.593
If you throw should component update
in every single react component, well,

29
00:01:54.593 --> 00:01:57.712
calling should phone update
costs you stuff, right?

30
00:01:57.712 --> 00:02:02.487
And so, a create selector and
a selector check that isn't

31
00:02:02.487 --> 00:02:06.784
working is worse than not
having a create selector.

32
00:02:06.784 --> 00:02:10.019
One of the ones that
we'll kind of look at is,

33
00:02:10.019 --> 00:02:14.100
what happens if you have
to pass something in?

34
00:02:14.100 --> 00:02:19.902
Well, the act of passing something
in would basically go ahead and

35
00:02:19.902 --> 00:02:24.572
make sure that you would have
a new result every time.

36
00:02:24.572 --> 00:02:28.540
If we had to pass in the cardId, well,

37
00:02:28.540 --> 00:02:33.883
that's gonna be different for
every single card.

38
00:02:33.883 --> 00:02:37.253
And so, you're not gonna actually,

39
00:02:37.253 --> 00:02:43.270
your selector will work great,
it will just never be called twice.

40
00:02:43.270 --> 00:02:48.175
And so, this is really good for seeing
if the result of a function is the same,

41
00:02:48.175 --> 00:02:51.205
but you kinda have to
combine some strategies.

42
00:02:51.205 --> 00:02:55.802
So, selectors are effectively using
memoization, lodash also has a memoize

43
00:02:55.802 --> 00:03:01.290
function, which is, hey, if it's the same
cardId, Give us back the same selector.

44
00:03:01.290 --> 00:03:05.680
So this now gives you a memoization on
the given cardId to give an argument,

45
00:03:05.680 --> 00:03:08.000
and then a selector for all of the list.

46
00:03:08.000 --> 00:03:12.570
So now, both would effectively
have to change before you.

47
00:03:12.570 --> 00:03:15.240
So if it's the same cardId and
the same list,

48
00:03:15.240 --> 00:03:18.812
you'll actually get back the same
selector that you had the first time.

49
00:03:18.812 --> 00:03:21.210
Same cardId,
you'll get back the same selector,

50
00:03:21.210 --> 00:03:24.278
that same selector will check to
see if there's multiple lists,

51
00:03:24.278 --> 00:03:28.330
any changes to the list, you'll
basically have multiple checks in here.

52
00:03:28.330 --> 00:03:33.170
But I do wanna give a word of advice,
like I said, poorly implemented

53
00:03:33.170 --> 00:03:38.300
performance improvements can
sometimes be worse for performance.

54
00:03:38.300 --> 00:03:41.544
So I would always argue,
open up your Chrome DevTools,

55
00:03:41.544 --> 00:03:45.754
this application isn't big enough to
get to the point where we have truly

56
00:03:45.754 --> 00:03:47.911
horrendous performance anywhere.

57
00:03:47.911 --> 00:03:51.567
It is death by 1000 cuts, but
also trying to put band aids

58
00:03:51.567 --> 00:03:55.480
when you don't have a wound
is also problematic as well.

59
00:03:55.480 --> 00:04:00.462
So just try to make sure that you're being
very careful, that you're measuring and

60
00:04:00.462 --> 00:04:05.022
seeing what the problems are first, or
at least you're measuring before and

61
00:04:05.022 --> 00:04:07.076
after, like in science, right?

62
00:04:07.076 --> 00:04:09.790
Take the control, do the experiment,

63
00:04:09.790 --> 00:04:14.739
look at the result, and see that
you've actually improved anything.

64
00:04:14.739 --> 00:04:20.298
We have courses on performance,
you can definitely check those out, and

65
00:04:20.298 --> 00:04:25.500
there's more about that, but
this is a tool for stopping needlessly

66
00:04:25.500 --> 00:04:30.899
doing more expensive tasks, but
it should be used incredibly wisely.

67
00:04:30.899 --> 00:04:34.681
All right, so next what we're
gonna end up talking about is,

68
00:04:34.681 --> 00:04:36.320
how do we deal with async?

69
00:04:36.320 --> 00:04:38.110
All of this has happened internally.

70
00:04:39.840 --> 00:04:42.610
So we're gonna need to think
about that a little bit.

