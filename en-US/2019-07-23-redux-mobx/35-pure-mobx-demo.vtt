WEBVTT

1
00:00:00.296 --> 00:00:02.930
&gt;&gt; Steve Kinney: So
we're gonna follow one of our themes,

2
00:00:02.930 --> 00:00:08.320
which is to look at this library
in isolation of react first,

3
00:00:08.320 --> 00:00:11.320
and then figuring out how
to tie it into react.

4
00:00:11.320 --> 00:00:14.300
So this is like vanilla
JavaScript DOM manipulation.

5
00:00:14.300 --> 00:00:17.420
All I've done so far is I've got

6
00:00:17.420 --> 00:00:21.320
this input field that I will
eventually be able to type into it now.

7
00:00:21.320 --> 00:00:25.450
And I'll have these two fields
which will show me the text

8
00:00:25.450 --> 00:00:30.560
that I wrote in the input field and
also show it to me in uppercase as well.

9
00:00:30.560 --> 00:00:33.738
Right, and what I wanna have
happen is we're just gonna use

10
00:00:33.738 --> 00:00:37.450
the vanilla JavaScript and mob X first
to kind of see some of these things.

11
00:00:37.450 --> 00:00:41.473
And then we'll tie it into react.

12
00:00:41.473 --> 00:00:45.597
I put these console.logs in here
because I have a type a personality and

13
00:00:45.597 --> 00:00:49.515
the esLint error is saying like,
hey, you have these variables and

14
00:00:49.515 --> 00:00:53.870
you're not using them was a little much
for me so we can get rid of that line.

15
00:00:53.870 --> 00:00:55.389
Like that was enough to drive me nuts.

16
00:00:57.030 --> 00:01:00.760
So we've got these and so
we can create some object, right?

17
00:01:00.760 --> 00:01:05.840
You can see we've got we're pulling in
two things from our backs Observable and

18
00:01:05.840 --> 00:01:08.040
Auto Run, right?

19
00:01:08.040 --> 00:01:11.870
Observable is we wanna say, hey,
this object, we wanna to look and

20
00:01:11.870 --> 00:01:16.420
feel like a regular JavaScript object, but
we need to know when it changes, right.

21
00:01:16.420 --> 00:01:20.330
And we're gonna do stuff
based on that change, right?

22
00:01:20.330 --> 00:01:21.946
And so we can for instance.

23
00:01:21.946 --> 00:01:25.000
[SOUND] Say text.

24
00:01:25.000 --> 00:01:27.098
And we're doing this without
decorators at first.

25
00:01:27.098 --> 00:01:31.091
Let's say, observable.

26
00:01:34.240 --> 00:01:38.509
&gt;&gt; Steve Kinney: Right, and we'll say,
all right, this thing has got a value.

27
00:01:41.160 --> 00:01:45.114
Hello world, and
we'll give it one of those get_uppercase,

28
00:01:45.114 --> 00:01:47.507
we'll give you one of those getters.

29
00:01:51.154 --> 00:01:53.744
&gt;&gt; Steve Kinney: Too much cards and
less and

30
00:01:53.744 --> 00:01:58.462
that will return this.value.to uppercase.

31
00:02:03.986 --> 00:02:07.179
&gt;&gt; Steve Kinney: And
like if we didn't wrap it in observable,

32
00:02:07.179 --> 00:02:11.967
we'd still get an object that had
a value of hello world and we said,

33
00:02:11.967 --> 00:02:16.757
text.uppercase, we would get
the uppercase version of that, but

34
00:02:16.757 --> 00:02:19.380
we would never know when it changed.

35
00:02:20.470 --> 00:02:23.778
Right, and that's the whole problem
with figuring out when we need to

36
00:02:23.778 --> 00:02:24.490
re-render the down.

37
00:02:24.490 --> 00:02:28.780
When the state has changed,
update the UI to reflect that state.

38
00:02:28.780 --> 00:02:30.290
How do you know the state has changed,
right?

39
00:02:30.290 --> 00:02:34.600
We saw problems with this before we
had referentially equal arrays, or

40
00:02:34.600 --> 00:02:36.910
like sometimes with
the reactor form it is,

41
00:02:36.910 --> 00:02:40.146
referentially different functions
that trigger a rerun, right?

42
00:02:40.146 --> 00:02:45.060
This whole super-like great
part of JavaScript is also

43
00:02:45.060 --> 00:02:50.320
sometimes problematic for us, and
a lot of these are ways to handle this.

44
00:02:50.320 --> 00:02:54.869
So also, let's make an EventListener,
&gt;&gt; Steve Kinney: addEventListener,

45
00:02:54.869 --> 00:03:01.044
add a 'keyup',
&gt;&gt; Steve Kinney: We'll take the event and

46
00:03:01.044 --> 00:03:04.565
that text object that we just created,
we're gonna reassign it's value.

47
00:03:08.609 --> 00:03:10.975
&gt;&gt; Steve Kinney: event.target.value.

48
00:03:13.766 --> 00:03:16.255
&gt;&gt; Steve Kinney: Cool,
now what happens is,

49
00:03:16.255 --> 00:03:21.354
every time this object changes,
I want to update the DOM.

50
00:03:22.680 --> 00:03:27.430
We're having like a almost
a dumb lee sample version of

51
00:03:27.430 --> 00:03:29.410
react that is no different anything.

52
00:03:29.410 --> 00:03:34.370
Anytime the text up value changes
which will happen whenever I type

53
00:03:34.370 --> 00:03:38.740
in this input field, go and
do some stuff right.

54
00:03:38.740 --> 00:03:39.770
And I can just treat this like.

55
00:03:39.770 --> 00:03:40.860
You notice I'm not doing anything.

56
00:03:40.860 --> 00:03:42.000
I'm not using a function.

57
00:03:42.000 --> 00:03:43.180
I'm not making a call back.

58
00:03:43.180 --> 00:03:44.710
I'm not using a ventimeter.

59
00:03:44.710 --> 00:03:47.810
I'm just saying, hey, that object
I wanna reassign your property.

60
00:03:47.810 --> 00:03:50.148
So we'll go ahead and
we'll say this autorun.

61
00:03:53.804 --> 00:03:54.790
&gt;&gt; Steve Kinney: Takes a function.

62
00:03:56.960 --> 00:04:00.400
And any observable that comes in
there it kind of looks through them.

63
00:04:00.400 --> 00:04:02.400
Says like, cool.

64
00:04:02.400 --> 00:04:06.000
I wanna do some stuff, right?

65
00:04:06.000 --> 00:04:07.570
So we could say like textDisplay.

66
00:04:08.850 --> 00:04:13.456
We might actually like do
the input field like reactive, but

67
00:04:13.456 --> 00:04:18.890
we'll try it out textDisplay.textContent
= text.value, right?

68
00:04:20.910 --> 00:04:25.737
Soon as that all that it's
doing is it is saying hey,

69
00:04:25.737 --> 00:04:28.700
this is going to run whenever and

70
00:04:28.700 --> 00:04:33.441
observed object inside of
it is changed in any way.

71
00:04:40.212 --> 00:04:40.903
&gt;&gt; Steve Kinney: Right, and

72
00:04:40.903 --> 00:04:44.650
all I'm doing this event
listener is I'm not firing event.

73
00:04:44.650 --> 00:04:46.540
There's no, again,
there's no eventimeters.

74
00:04:46.540 --> 00:04:49.080
There's nothing I'm just
mutating an object.

75
00:04:49.080 --> 00:04:52.470
And like, hey, Steve, didn't you
spend like a good few hours telling

76
00:04:52.470 --> 00:04:55.050
me one does that simply mutate objects?

77
00:04:55.050 --> 00:04:59.070
I did say that it was technically true,
right?

78
00:04:59.070 --> 00:05:02.660
Again, really cool abstractions make
really awesome stuff be able to

79
00:05:02.660 --> 00:05:03.600
happen, right?

80
00:05:03.600 --> 00:05:10.681
And so I can also say the like,

81
00:05:10.681 --> 00:05:14.370
loudDisplay.

82
00:05:16.800 --> 00:05:21.755
&gt;&gt; Steve Kinney: Equals text.uppercase,
right.

83
00:05:21.755 --> 00:05:25.432
And like that, I'm just using it's
technically calling a function that's

84
00:05:25.432 --> 00:05:29.337
taking that value and doing stuff, but you
can see that it just pretty much works,

85
00:05:29.337 --> 00:05:31.391
it gives us these very nice subtractions.

86
00:05:31.391 --> 00:05:34.535
And when we get these into
like a React application,

87
00:05:34.535 --> 00:05:37.970
the autorun part will even
be hidden from us, right?

88
00:05:37.970 --> 00:05:41.460
We're just gonna go mutating some objects,
and

89
00:05:41.460 --> 00:05:45.489
our DOM is gonna re-render, and
it's all gonna be magical and wonderful.

90
00:05:47.330 --> 00:05:53.913
Which it's pretty,
pretty neat in this case.

91
00:05:53.913 --> 00:05:54.966
All right, cool.

92
00:05:54.966 --> 00:05:58.293
So, let's go back for a second.

93
00:06:05.230 --> 00:06:06.130
&gt;&gt; Steve Kinney: I'll show you one more.

94
00:06:09.550 --> 00:06:11.180
This is where the class.

95
00:06:14.520 --> 00:06:18.213
Where I can also like decorate it as such.

96
00:06:18.213 --> 00:06:20.670
Well actually look at this when
we look at the react version.

97
00:06:20.670 --> 00:06:22.470
This is using react but there are ways to.

98
00:06:22.470 --> 00:06:23.830
I showed you with an object literal.

99
00:06:23.830 --> 00:06:26.710
I also just wanted to
show you with a class and

100
00:06:26.710 --> 00:06:29.850
we'll see what the decorators in,
in a few seconds.

101
00:06:30.940 --> 00:06:33.743
So what could this begin to look like?

102
00:06:35.479 --> 00:06:39.340
&gt;&gt; Steve Kinney: When we start
to use the decorator syntax,

103
00:06:39.340 --> 00:06:43.533
it's gonna be pretty, pretty interesting.

104
00:06:46.663 --> 00:06:50.310
&gt;&gt; Steve Kinney: Like this is effectively
a kind of a version of what we had.

105
00:06:50.310 --> 00:06:52.460
That isn't totally real.

106
00:06:52.460 --> 00:06:55.410
That kind of shows like
what's kind of happening.

107
00:06:55.410 --> 00:06:59.700
This is what it begins to look
like when you use the decorators.

108
00:06:59.700 --> 00:07:02.159
You can basically say these
properties on this class,

109
00:07:03.680 --> 00:07:05.870
these are the ones that I am observing.

110
00:07:05.870 --> 00:07:10.300
These are the ones that when they change,
I want to know more about them.

111
00:07:10.300 --> 00:07:13.920
And like if you can't use the decorators
you could do something like this.

112
00:07:13.920 --> 00:07:17.271
You saw the other decorate
one that I had before.

113
00:07:17.271 --> 00:07:21.101
And you could theoretically
write some of this stuff.

114
00:07:21.101 --> 00:07:21.911
This stresses you out.

115
00:07:21.911 --> 00:07:23.711
Don't worry about it cuz
you don't have to do this.

116
00:07:23.711 --> 00:07:28.031
It's given to you by the library,
so on and so forth.

