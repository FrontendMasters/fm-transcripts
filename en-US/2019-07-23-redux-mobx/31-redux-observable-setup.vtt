WEBVTT

1
00:00:00.580 --> 00:00:01.710
&gt;&gt; Steve Kinney: We've
got our create store,

2
00:00:01.710 --> 00:00:03.060
we do need to pull in our middleware.

3
00:00:03.060 --> 00:00:04.510
This one's gonna be
a little bit different.

4
00:00:06.250 --> 00:00:09.530
Which is like before,
we just grabbed the thunk middleware,

5
00:00:09.530 --> 00:00:11.360
and we just pulled it in.

6
00:00:11.360 --> 00:00:16.412
This one, we're going to need to
basically create an instance and

7
00:00:16.412 --> 00:00:19.840
start it listening because it
kind of sits aside everything.

8
00:00:19.840 --> 00:00:22.330
So we'll get to that in a second.

9
00:00:22.330 --> 00:00:27.090
But the apply middleware will create
effectively an epic listener, if you will.

10
00:00:27.090 --> 00:00:29.550
And then we'll go through and
we'll kind of pull it in.

11
00:00:29.550 --> 00:00:34.032
So instead of just being the thunk,
we actually need to bring in import,

12
00:00:36.598 --> 00:00:40.382
&gt;&gt; Steve Kinney: This create, I love this

13
00:00:40.382 --> 00:00:45.428
name, create epic middleware,

14
00:00:45.428 --> 00:00:50.490
right, from Redux observable.

15
00:00:50.490 --> 00:00:52.100
Seems really cool, right?

16
00:00:52.100 --> 00:00:54.004
And so on top of your reducers,

17
00:00:54.004 --> 00:00:58.220
you're also gonna have this idea of a,
you had a root reducer.

18
00:00:58.220 --> 00:01:02.890
We're also gonna have this
idea of a root epic, right?

19
00:01:02.890 --> 00:01:04.440
And so the reducers will be listening and

20
00:01:04.440 --> 00:01:08.144
the epics will also be listening, in order
to go ahead and create more of them.

21
00:01:08.144 --> 00:01:10.800
I'm gonna just comment this out for
a second,

22
00:01:10.800 --> 00:01:14.550
cuz we're gonna go implement this epic,
cuz we need to have that route epic.

23
00:01:14.550 --> 00:01:20.130
Otherwise this doesn't really do a lot,
so we'll go ahead and we'll write that.

24
00:01:20.130 --> 00:01:21.012
Let's go ahead and

25
00:01:21.012 --> 00:01:26.871
set up some of our actions
&gt;&gt; Steve Kinney: So

26
00:01:26.871 --> 00:01:31.716
we're gonna import search from the,

27
00:01:40.113 --> 00:01:41.046
&gt;&gt; Steve Kinney: ./api,

28
00:01:41.046 --> 00:01:44.573
which we'll need to deal with a second.

29
00:01:50.458 --> 00:01:53.949
&gt;&gt; Steve Kinney: And,
&gt;&gt; Steve Kinney: What we're gonna do is

30
00:01:53.949 --> 00:01:55.984
we're gonna have the ability
to fetch our characters.

31
00:01:55.984 --> 00:01:58.734
So we have an event that gets fired
when the user wants to fetch some

32
00:01:58.734 --> 00:01:59.693
characters, right.

33
00:01:59.693 --> 00:02:02.325
And this will happen on a keystroke
in that input field, right.

34
00:02:02.325 --> 00:02:05.700
So every time they make a keystroke,
we're gonna go ahead, we're gonna fire it.

35
00:02:05.700 --> 00:02:09.550
But then the epic is gonna fire a new
action saying, I got the thing, right.

36
00:02:09.550 --> 00:02:13.170
And so Redux, completely unaware
of any side effects happening.

37
00:02:13.170 --> 00:02:16.630
This epic is kind of sitting over on
the sidelines and doing it for us.

38
00:02:16.630 --> 00:02:22.291
So we'll make some of these export consts,
fetch characters.

39
00:02:29.463 --> 00:02:34.040
&gt;&gt; Steve Kinney: Right, and we'll do
an export const, fetch characters.

40
00:02:34.040 --> 00:02:39.890
And you can call it fetch
characters fulfilled, right?

41
00:02:39.890 --> 00:02:41.910
One, were we asked to do it?

42
00:02:41.910 --> 00:02:46.688
Now this is great because we don't have to
dispatch multiple actions for, all right,

43
00:02:46.688 --> 00:02:48.070
they're gonna load it.

44
00:02:48.070 --> 00:02:54.513
We know that if fetch characters has fired
and fetch characters fulfilled has not,

45
00:02:54.513 --> 00:02:58.830
right, then we know that we're loading,
right.

46
00:02:58.830 --> 00:03:03.095
And we actually have kind of
a middleware that looks for

47
00:03:03.095 --> 00:03:06.710
anything with fetch in it,
and will fire off,

48
00:03:06.710 --> 00:03:12.100
will set us up actions for
loading and error states, right.

49
00:03:12.100 --> 00:03:14.980
But that's kind of a little bit
bespoke and out of the ordinary.

50
00:03:16.710 --> 00:03:18.540
So we'll do this export const.

51
00:03:22.220 --> 00:03:26.180
So when we did it with thunk
we had we did a we had

52
00:03:26.180 --> 00:03:30.579
a weird action creator
that returned a function.

53
00:03:30.579 --> 00:03:35.206
We're not doing that anymore, everything
is going to be just regular old,

54
00:03:41.841 --> 00:03:43.764
&gt;&gt; Steve Kinney: Regular old actions as

55
00:03:43.764 --> 00:03:47.110
we've seen and loved before, right?

56
00:03:47.110 --> 00:03:54.132
Which is we'll just return,
something of the type, fetch characters,

57
00:03:54.132 --> 00:03:58.890
and payload will be whatever search
term we were looking for, right,

58
00:03:58.890 --> 00:04:00.330
whatever is currently in that input field.

59
00:04:02.200 --> 00:04:05.232
All right, neat, and
then fetch characters fulfill is again,

60
00:04:05.232 --> 00:04:08.447
just a normal action creator,
there's nothing special about it.

61
00:04:17.884 --> 00:04:20.521
&gt;&gt; Steve Kinney: We'll get some payload
whatever we hear back from the API,

62
00:04:20.521 --> 00:04:22.673
I could call it API result,
I can call it whatever I want.

63
00:04:25.170 --> 00:04:28.564
&gt;&gt; Steve Kinney: Type :
FETCH_CHARACTERS_FULFILLED and

64
00:04:28.564 --> 00:04:32.420
whatever that payload is,
just pass it through.

65
00:04:32.420 --> 00:04:33.670
I'm just mostly being lazy.

66
00:04:34.730 --> 00:04:35.530
I'm sorry.

67
00:04:35.530 --> 00:04:38.100
What is the famous Larry Wall thing?

68
00:04:38.100 --> 00:04:42.774
Programming is laziness, hubris,
and something along those lines and

69
00:04:42.774 --> 00:04:43.870
impatience.

70
00:04:43.870 --> 00:04:45.390
Are they hallmarks of a great programmer?

71
00:04:46.390 --> 00:04:51.150
Cool, all right, so let's write the epic.

72
00:04:51.150 --> 00:04:55.950
Were gonna have to get to that
API helper in a second but

73
00:04:55.950 --> 00:04:57.520
we'll deal with this momentarily.

74
00:04:58.960 --> 00:05:06.859
Let's make a, I don't know,
let's call it fetch-character-epic.js.

75
00:05:08.300 --> 00:05:12.770
So again, the squirreliest parts
of this are going to be RXJS.

76
00:05:12.770 --> 00:05:17.420
And we're gonna have to pull in a bunch
of different helpers in this case.

77
00:05:17.420 --> 00:05:22.450
So we'll have this import Ajax,
which is from RXJS,

78
00:05:22.450 --> 00:05:26.893
because everything's got to be hooked
in and knowing about observables.

79
00:05:26.893 --> 00:05:29.041
So RXJS/ajax.

80
00:05:31.169 --> 00:05:34.695
&gt;&gt; Steve Kinney: This next one,
this of type, is a redux observable one,

81
00:05:34.695 --> 00:05:39.542
because redux observable is again, in
the same way we had some helpers in react

82
00:05:39.542 --> 00:05:44.760
redux that knew about find action creators
and connect to stuff along those lines.

83
00:05:44.760 --> 00:05:46.419
These are the things
that help us out here.

84
00:05:47.730 --> 00:05:50.510
We'll bring it in from redux-observable.

85
00:05:50.510 --> 00:05:54.160
And then,
the things that we need to do, right?

86
00:05:54.160 --> 00:05:58.070
So map and merge map,
we'll talk about those in a second.

87
00:05:59.110 --> 00:06:04.070
From rxjs/operators.

88
00:06:04.070 --> 00:06:08.430
And then, we're gonna pull in both
the action that's gonna kick things off,

89
00:06:08.430 --> 00:06:09.970
which is fetch characters and

90
00:06:09.970 --> 00:06:15.670
the action creator that is going to
happen when we're all done here.

91
00:06:17.320 --> 00:06:21.917
Right, so
we will import the fetch characters type,

92
00:06:21.917 --> 00:06:26.290
because we have that of
type helper online, too.

93
00:06:26.290 --> 00:06:30.180
So we're gonna look at all the actions to
come through, let's see if I get some.

94
00:06:32.280 --> 00:06:33.780
Yeah, there we go.

95
00:06:33.780 --> 00:06:40.640
And we'll have this,
&gt;&gt; Steve Kinney: Those two, all right.

96
00:06:40.640 --> 00:06:43.430
So we're gonna have the ability fire off
AJAX, the ability to look at the type of

97
00:06:43.430 --> 00:06:47.490
an action, some mapping to
transform the action, right.

98
00:06:47.490 --> 00:06:51.700
So anytime a fetch characters comes
through, we do some Ajax and we take that

99
00:06:51.700 --> 00:06:55.390
action and transform it into the hey,
we've got all the characters action.

100
00:06:55.390 --> 00:06:57.300
And then the things that we
need to actually send that

101
00:06:57.300 --> 00:06:59.290
to regular old Redux, cool.

102
00:06:59.290 --> 00:07:03.445
And we'll make this fetch characters epic.

103
00:07:08.285 --> 00:07:11.808
&gt;&gt; Steve Kinney: And before when I showed
you the example, this takes two arguments,

104
00:07:11.808 --> 00:07:13.874
it takes the action we're looking at and

105
00:07:13.874 --> 00:07:16.990
it will actually take the current
state of the entire store.

106
00:07:16.990 --> 00:07:20.730
So if you need other things, if you need
to know other things that are happening

107
00:07:20.730 --> 00:07:23.780
in the store in order to figure out
what to do, you have access to it.

108
00:07:23.780 --> 00:07:27.229
We don't need it in this case, but
it is available to you if you do.

109
00:07:29.176 --> 00:07:30.350
&gt;&gt; Steve Kinney: And then we'll return.

110
00:07:31.390 --> 00:07:36.660
For every action that comes through,
we used pipe and redux composed before.

111
00:07:36.660 --> 00:07:42.440
We're gonna run it through
a series of functions, right.

112
00:07:42.440 --> 00:07:48.830
And so first of all,
we're gonna do this of Type.

113
00:07:48.830 --> 00:07:53.020
So figure out, take that action and pump
it into this first function that is gonna

114
00:07:53.020 --> 00:07:55.780
figure out,
are you of the type FETCH_CHARACTERS?

115
00:07:55.780 --> 00:07:58.030
That will either return true or false.

116
00:07:58.030 --> 00:08:01.641
It is either action of the type
FETCH_CHARACTERS or it's not.

117
00:08:01.641 --> 00:08:05.692
And then we're gonna do this merge map
because we're gonna need to do is a few

118
00:08:05.692 --> 00:08:07.530
other things in here.

119
00:08:07.530 --> 00:08:13.510
A merge map is very similar to flat map,
which is, it's a radar prototype map,

120
00:08:13.510 --> 00:08:17.340
but it will also take nested things and
bring them all up to the top level.

121
00:08:19.040 --> 00:08:20.450
Cool.

122
00:08:20.450 --> 00:08:25.830
So we'll just kind of take our Ajax and
it has a method called get JSON.

123
00:08:27.480 --> 00:08:29.885
And now you could just pull that off
directly, if you wanted to, that's fine.

124
00:08:31.540 --> 00:08:38.998
Cool, and we'll say,
&gt;&gt; Steve Kinney: I

125
00:08:38.998 --> 00:08:41.430
think search is just
gonna be our endpoint.

126
00:08:41.430 --> 00:08:44.211
So I'll actually just pull that in,

127
00:08:44.211 --> 00:08:48.350
because I need to fire up Glitch anyway,
characters.

128
00:08:49.354 --> 00:08:50.800
&gt;&gt; Steve Kinney: All right,
I'm gonna wake that up.

129
00:08:50.800 --> 00:08:54.150
And you can see, it's got a few different
endpoints, I can get all the characters,

130
00:08:54.150 --> 00:08:57.440
I get an individual and
this is from the Star Wars API, open API.

131
00:08:57.440 --> 00:09:02.690
I just kind of modified a little bit so
I can actually go ahead and do a query.

132
00:09:04.980 --> 00:09:08.841
Cool.
So we'll actually say,

133
00:09:14.518 --> 00:09:17.083
&gt;&gt; Steve Kinney: Endpoint API, just for

134
00:09:17.083 --> 00:09:21.450
the letter L, we'll say slash search.

135
00:09:23.490 --> 00:09:24.945
So take that endpoint.

136
00:09:27.187 --> 00:09:29.400
&gt;&gt; Steve Kinney: And
we'll add whatever the search term is.

137
00:09:29.400 --> 00:09:32.568
I'm just gonna put have
a trailing slash there.

138
00:09:32.568 --> 00:09:36.620
And so remember,
when we dispatch that action,

139
00:09:36.620 --> 00:09:39.490
we had the search term in the payload?

140
00:09:39.490 --> 00:09:41.886
So we'll take a look at the action.

141
00:09:41.886 --> 00:09:47.570
We'll say action.payload.searchterm.

142
00:09:49.476 --> 00:09:50.442
&gt;&gt; Steve Kinney: Cool.

