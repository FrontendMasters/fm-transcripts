WEBVTT

1
00:00:00.030 --> 00:00:03.196
&gt;&gt; Steve Kinney: So go ahead,
we need to do more now.

2
00:00:03.196 --> 00:00:05.893
All right, so
we'll go ahead and we'll, yeah,

3
00:00:05.893 --> 00:00:08.154
finally make that AJAX request, right.

4
00:00:08.154 --> 00:00:14.380
But we have to say what happens next,
and so we'll take that result.

5
00:00:14.380 --> 00:00:17.680
And so this is why we need the merge map,
right, cuz we're taking the result and

6
00:00:17.680 --> 00:00:19.579
we're piping that through
a series of functions.

7
00:00:20.890 --> 00:00:23.851
Which is basically,
cool, you got an action,

8
00:00:23.851 --> 00:00:27.860
it's of the type FETCH_CHARACTER,
fire off an AJAX request.

9
00:00:27.860 --> 00:00:29.180
Well, what you wanna do with that result?

10
00:00:29.180 --> 00:00:31.390
If you remember when we did the thunks,
we had the .then.

11
00:00:31.390 --> 00:00:34.700
As we were like, okay,
get the response, make sure it's JSON,

12
00:00:34.700 --> 00:00:38.300
right, this is the .getJSON, so
we'll be a little bit better off there.

13
00:00:38.300 --> 00:00:42.188
So we'll get the response, but
then we need to take that response and map

14
00:00:42.188 --> 00:00:46.733
it into the action that we want, right,
which is this fetchCharactersFulfilled.

15
00:00:50.089 --> 00:00:51.239
&gt;&gt; Steve Kinney: Right,
so then we'll map it.

16
00:00:55.707 --> 00:00:58.060
&gt;&gt; Steve Kinney: Cuz we need to
put the type and stuff on it.

17
00:00:58.060 --> 00:01:05.742
We'll take the response, we'll use our
action creator with the response.result.

18
00:01:05.742 --> 00:01:08.930
All right, prettier, do your thing, cool.

19
00:01:08.930 --> 00:01:12.833
So if it's type FETCH_CHARACTER,
fire off the AJAX,

20
00:01:12.833 --> 00:01:16.581
take that AJAX request,
run it through its own pipe.

21
00:01:16.581 --> 00:01:19.170
And then transform it into the action and

22
00:01:19.170 --> 00:01:22.610
then get it back up to the top
level cuz we're nested.

23
00:01:22.610 --> 00:01:26.740
There's a learning curve, [LAUGH] right,
there's an absolute learning curve.

24
00:01:26.740 --> 00:01:30.507
Hopefully that the power is, is like,

25
00:01:30.507 --> 00:01:36.683
it's not terrible to think about
RXJS as like Lodash for async.

26
00:01:36.683 --> 00:01:39.572
Right, so there's a whole bunch of
functions, you want it to bounce, cool.

27
00:01:39.572 --> 00:01:43.416
You wanna make it so you're not,
if there's already a request in flight,

28
00:01:43.416 --> 00:01:45.807
you don't wanna fire off another one,
neat.

29
00:01:45.807 --> 00:01:49.070
You wanna wait a certain amount of time,
awesome, right?

30
00:01:49.070 --> 00:01:53.016
You can do all sorts of stuff that,
if you did this in Redux Thunk by hand,

31
00:01:53.016 --> 00:01:54.908
would be really, really tricky.

32
00:01:54.908 --> 00:01:58.558
Right, you'd end up writing half
of RXJS yourself, probably, so

33
00:01:58.558 --> 00:02:00.990
there definitely is a learning curve.

34
00:02:00.990 --> 00:02:04.612
But we found,
even when we bring on junior engineers,

35
00:02:04.612 --> 00:02:08.255
they are able to pretty much
pick it up pretty quickly.

36
00:02:08.255 --> 00:02:14.271
Cuz there's not too many
things that we end up doing.

37
00:02:14.271 --> 00:02:18.511
Predominantly, we're doing something
very similar to this, right,

38
00:02:18.511 --> 00:02:21.370
which we then wrap up in an abstraction,
right?

39
00:02:22.400 --> 00:02:25.280
Mostly, we're making AJAX calls, right?

40
00:02:25.280 --> 00:02:27.440
We might check to see if we
already have some data and

41
00:02:27.440 --> 00:02:31.230
do something different,
we might try to throttle some of them.

42
00:02:31.230 --> 00:02:37.600
But in our decently large app,
we're not doing all that much.

43
00:02:37.600 --> 00:02:39.230
So while this seems
a little bit intimidating,

44
00:02:39.230 --> 00:02:43.450
one of the things I like is that
actions come in, actions come out.

45
00:02:43.450 --> 00:02:46.447
I've taken all of this kind
of strange complexity, and

46
00:02:46.447 --> 00:02:48.249
I've moved it kinda to the side.

47
00:02:48.249 --> 00:02:53.500
And I've kept a purity to my Redux
in my React application, right?

48
00:02:53.500 --> 00:02:58.162
And the Redux observable part is small,
the RXJS part is like, okay,

49
00:02:58.162 --> 00:03:00.224
what is going on here, right?

50
00:03:00.224 --> 00:03:03.803
It's because RXJS is incredibly
powerful and does a lot for you, but

51
00:03:03.803 --> 00:03:06.100
that means it has a learning curve, right?

52
00:03:06.100 --> 00:03:08.816
Redux Thunk, super simple, man,
I just match a function, and

53
00:03:08.816 --> 00:03:10.742
that dispatches the action when it's done.

54
00:03:10.742 --> 00:03:12.817
But you're on your own, and
that's a kind of trade off,

55
00:03:12.817 --> 00:03:14.570
I don't have a right answer for
you, right?

56
00:03:14.570 --> 00:03:16.590
We made the choice that
in the application,

57
00:03:16.590 --> 00:03:19.190
we're trying to set the foundation for
the next three to five years.

58
00:03:19.190 --> 00:03:23.136
We made the choice that we
decided to have patterns and

59
00:03:23.136 --> 00:03:28.144
complexity that we are willing to
deal with for stability, right?

60
00:03:28.144 --> 00:03:31.515
And to know that we weren't gonna
have to massively rework stuff later.

61
00:03:31.515 --> 00:03:36.314
That's the decision that we made, but
it might be very different for you.

62
00:03:36.314 --> 00:03:37.806
All right,
let's actually get that hooked up now.

63
00:03:40.077 --> 00:03:42.540
&gt;&gt; Steve Kinney: I could've just
called that epic.js, but here we are.

64
00:03:43.750 --> 00:03:50.946
So we've got this create middleware,
which is cool.

65
00:03:50.946 --> 00:03:53.910
We're gonna import the rootEpic,
or just the epic, but

66
00:03:53.910 --> 00:03:56.394
the same way we called it
a root reducer before.

67
00:04:00.984 --> 00:04:03.548
&gt;&gt; Steve Kinney: From this
fetch-character-epic.

68
00:04:03.548 --> 00:04:07.953
So now we need to, a little bit lower,

69
00:04:07.953 --> 00:04:11.672
we'll go ahead and we'll say,

70
00:04:11.672 --> 00:04:17.478
epicMiddleware = createEpicMiddleware().

71
00:04:17.478 --> 00:04:22.969
That will create us a new instance, and
then we can pass that to the store.

72
00:04:22.969 --> 00:04:27.120
And the same way we did with the thunk,
applyMiddleware(epicMiddleware).

73
00:04:27.120 --> 00:04:29.174
I don't know why I get so
much enjoyment out of doing that.

74
00:04:31.935 --> 00:04:34.178
&gt;&gt; Steve Kinney: And then we do need
to do one thing, it's the same.

75
00:04:34.178 --> 00:04:38.870
Redux Saga comes with the same advantages,
where its actions async

76
00:04:38.870 --> 00:04:43.810
stuff just using ESX generators instead,
and it's true for both of these.

77
00:04:43.810 --> 00:04:49.685
We do epicMiddleware, sorry,
with that root and you have to run it.

78
00:04:51.820 --> 00:04:55.276
&gt;&gt; Steve Kinney: Right, and what this
will do is, so we give it the store,

79
00:04:55.276 --> 00:04:57.232
we put the middleware in place.

80
00:04:57.232 --> 00:05:00.937
I've said this a few times now,
it sits along the side listening for

81
00:05:00.937 --> 00:05:04.610
the stream of actions, and
transforming them as needed.

82
00:05:04.610 --> 00:05:09.217
So we just have to be like,
hey, start listening,

83
00:05:09.217 --> 00:05:14.589
we're gonna have some actions
flow through here, right?

84
00:05:14.589 --> 00:05:16.459
So we've got these actions in place,

85
00:05:16.459 --> 00:05:21.820
actually don't need this,
&gt;&gt; Steve Kinney: Up here.

86
00:05:21.820 --> 00:05:28.630
So we have the searchTerm in there,
and we have the ability here.

87
00:05:28.630 --> 00:05:31.350
We've got an individual character,
that's a kinda stateless prop,

88
00:05:31.350 --> 00:05:34.120
it's got this kinda
hardcoded URL in there.

89
00:05:35.530 --> 00:05:39.375
We just need to kinda map this together,
so we'll go ahead and we'll do that.

90
00:05:41.741 --> 00:05:45.630
&gt;&gt; Steve Kinney: And this is gonna to be
kind of we have that fetchCharacters,

91
00:05:45.630 --> 00:05:48.771
remember, that we created
the very beginning.

92
00:05:48.771 --> 00:05:55.088
And we're just going to,
&gt;&gt; Steve Kinney: Nope, good try.

93
00:06:00.557 --> 00:06:02.103
&gt;&gt; Steve Kinney: Gotta connect,
and we're just gonna say, hey.

94
00:06:04.525 --> 00:06:06.235
&gt;&gt; Steve Kinney: Well just connect
it in here like we did before.

95
00:06:08.410 --> 00:06:09.810
&gt;&gt; Steve Kinney: null for
the map state to prop.

96
00:06:12.210 --> 00:06:12.982
&gt;&gt; Steve Kinney: And,

97
00:06:27.020 --> 00:06:30.184
&gt;&gt; Steve Kinney: This fetchCharacters.

98
00:06:35.200 --> 00:06:37.503
&gt;&gt; Steve Kinney: All right,
take a look in that reducer.

99
00:06:40.915 --> 00:06:44.203
&gt;&gt; Steve Kinney: All right, so
what is it gonna be, it's if,

100
00:06:44.203 --> 00:06:46.719
now it's gonna be action.type.

101
00:06:46.719 --> 00:06:48.284
We only care about when it's,

102
00:06:48.284 --> 00:06:51.600
we could show a loading indicator
if we get the first one through.

103
00:06:51.600 --> 00:06:54.160
But right now,
we mostly care about the second one.

104
00:06:55.470 --> 00:06:59.200
So we could listen for FETCH_CHARACTERS,
cuz even though the epic is receiving it

105
00:06:59.200 --> 00:07:02.927
and transforming it, we still get it in
our regular reducer, so we could do stuff,

106
00:07:02.927 --> 00:07:04.710
we want actually fulfilled, hold on.

107
00:07:08.883 --> 00:07:14.888
&gt;&gt; Steve Kinney: Cool, and we'll say
return this action.payload.characters.

108
00:07:18.304 --> 00:07:22.565
&gt;&gt; Steve Kinney: All right, so we'll have
it in place, this little fly-through,

109
00:07:22.565 --> 00:07:26.250
when we get some characters in place,
we should see that.

110
00:07:26.250 --> 00:07:29.100
The other thing we're gonna need to do is,

111
00:07:29.100 --> 00:07:32.820
let's just take a look at
the actual characters component.

112
00:07:32.820 --> 00:07:39.327
It's receiving all the characters as well,
so we're gonna need to get those in place.

113
00:07:39.327 --> 00:07:42.085
Cool, this will be pretty easy to do,

114
00:07:42.085 --> 00:07:48.280
we'll just say,
&gt;&gt; Steve Kinney: Pull

115
00:07:48.280 --> 00:07:54.616
the characters off,
&gt;&gt; Steve Kinney: Of state.

116
00:07:58.164 --> 00:08:02.279
&gt;&gt; Steve Kinney: All right, so
this should have everything we need,

117
00:08:02.279 --> 00:08:04.624
now let's fire it up and see.

118
00:08:04.624 --> 00:08:06.175
We did a decent amount of coding there.

119
00:08:09.150 --> 00:08:10.536
&gt;&gt; Steve Kinney: Nothing's not compiling,
though.

120
00:08:18.254 --> 00:08:21.645
&gt;&gt; Steve Kinney: All right, so let's take
a look and we'll see what we're missing.

121
00:08:21.645 --> 00:08:22.822
Give me one second just to look, and

122
00:08:22.822 --> 00:08:24.444
then we'll round back and
see what the issue is.

123
00:08:27.920 --> 00:08:31.388
&gt;&gt; Steve Kinney: So I made a rookie
mistake, I was trying to code and

124
00:08:31.388 --> 00:08:35.614
talk at the same time, and
I'm half good at either of those.

125
00:08:35.614 --> 00:08:39.035
I'm very good at talking [LAUGH].

126
00:08:39.035 --> 00:08:42.128
What I did was,
I passed the dispatch to the characters,

127
00:08:42.128 --> 00:08:44.650
when I should have given
it to the input field.

128
00:08:45.740 --> 00:08:49.728
So I don't need to pass the dispatch
there, I just had to put it in,

129
00:08:49.728 --> 00:08:54.574
the thing that's doing the fetching of
the characters needed to know how to fetch

130
00:08:54.574 --> 00:08:55.447
characters.

131
00:08:55.447 --> 00:08:59.308
So just a silly mistake where I
put it on the wrong component.

132
00:08:59.308 --> 00:09:05.216
But that led me to some interesting
kind of tidbits on debugging.

133
00:09:05.216 --> 00:09:12.257
Which is, in that stream where like it's
a function returning another function,

134
00:09:12.257 --> 00:09:17.187
it can be a little tricky to
figure out how to console log and

135
00:09:17.187 --> 00:09:18.910
to be able to debug.

136
00:09:18.910 --> 00:09:23.134
So one trick that I like,
it's really simple, and

137
00:09:23.134 --> 00:09:26.671
I'm almost borderline glad this came up,

138
00:09:26.671 --> 00:09:30.715
is that if you need to do
stuff in the actual epic.

139
00:09:30.715 --> 00:09:32.878
So I also made the mistake of,

140
00:09:32.878 --> 00:09:38.518
I had result singular instead of result
plural, which is my MO at this point.

141
00:09:38.518 --> 00:09:42.951
One of the things that you can do is,
hey, I want to interject but

142
00:09:42.951 --> 00:09:46.010
I don't wanna interrupt the flow, right?

143
00:09:46.010 --> 00:09:49.300
We know that console log returns
undefined, it's all weird.

144
00:09:49.300 --> 00:09:53.670
We wanna say, hey, I wanna tap
into the stream, do a thing, but

145
00:09:53.670 --> 00:09:55.810
I wanna take the same value and
keep it going.

146
00:09:55.810 --> 00:09:58.936
Right, I don't wanna interrupt
the stream of events.

147
00:09:58.936 --> 00:10:02.152
And so there's a function called tap,

148
00:10:02.152 --> 00:10:06.941
tap exists in Lodash too, and
it exists actually in Ruby.

149
00:10:06.941 --> 00:10:11.275
tap is basically a method or
a function that, you do some stuff, and

150
00:10:11.275 --> 00:10:15.180
you return whatever object
it was originally, right?

151
00:10:15.180 --> 00:10:19.670
So in Ruby, if you call as, I wish that
JavaScript had it on the object, right?

152
00:10:19.670 --> 00:10:23.071
Which is, you call tap,
you have some functionality, but

153
00:10:23.071 --> 00:10:26.552
then you get the return value
is that original object again.

154
00:10:26.552 --> 00:10:30.503
Lodash takes an object and a function, you
can do a bunch of stuff with that object,

155
00:10:30.503 --> 00:10:32.379
but you'll get back the object again.

156
00:10:32.379 --> 00:10:36.092
jQuery kind of does this as a default,
you can do whatever you want,

157
00:10:36.092 --> 00:10:39.000
you're gonna get another jQuery object.

158
00:10:39.000 --> 00:10:44.670
So you can actually use, there's a tap
operator, which allows you to do a thing.

159
00:10:46.090 --> 00:10:50.568
So we'll just say tap, and
then what we'll return the value out.

160
00:10:50.568 --> 00:10:55.740
So you can say something like value,
console.log(value), and

161
00:10:55.740 --> 00:11:02.104
again, console log returns undefined,
which normally would break your stream.

162
00:11:02.104 --> 00:11:06.809
But it'll actually allow you to do
a thing, tap into the stream, if you will.

163
00:11:06.809 --> 00:11:09.442
Console log or do whatever other
things you need to do, and

164
00:11:09.442 --> 00:11:13.720
then return that initial value back,
right, so it's a great way to debug.

165
00:11:13.720 --> 00:11:18.685
Turns out, we can also do some
other interesting things in here,

166
00:11:18.685 --> 00:11:21.677
which is, we can keep it there as well.

167
00:11:21.677 --> 00:11:26.560
We can also, cancel, right, which is
a thing that Redux observable gives us.

168
00:11:26.560 --> 00:11:31.103
It's one of the reasons why you might
wanna pay the complexity cost for

169
00:11:31.103 --> 00:11:32.952
Redux observable, right?

170
00:11:32.952 --> 00:11:37.023
RXJS comes with a lot of power tools to do
things like, I mean, if you did this in

171
00:11:37.023 --> 00:11:40.634
Redux Sonic, you might have to fire
a new action that said canceled.

172
00:11:40.634 --> 00:11:46.349
That then we need to know to
ignore the next fulfilled event,

173
00:11:46.349 --> 00:11:49.499
I don't want to do that, right?

174
00:11:49.499 --> 00:11:54.932
I would rather, I tend to prefer
battle-tested libraries rather

175
00:11:54.932 --> 00:12:00.371
than my own bespoke solution that's
never been out into the wild.

176
00:12:00.371 --> 00:12:03.697
So what we wanna do is,
if we wanted to implement cancellation,

177
00:12:03.697 --> 00:12:05.800
i do wanna show it to you fully working.

178
00:12:05.800 --> 00:12:07.155
We'll see it with the tap in place.

179
00:12:09.707 --> 00:12:14.879
&gt;&gt; Steve Kinney: Which is, I can begin,
&gt;&gt; Steve Kinney: And

180
00:12:14.879 --> 00:12:17.248
this API has some delay on it on purpose.

181
00:12:21.020 --> 00:12:24.029
&gt;&gt; Steve Kinney: It did fix it,
let's see, then I typed a bunch more and

182
00:12:24.029 --> 00:12:26.392
did some random things, so that's fine.

183
00:12:31.434 --> 00:12:35.515
&gt;&gt; Steve Kinney: Launch the reducer,
&gt;&gt; Steve Kinney: So

184
00:12:35.515 --> 00:12:39.793
it says the FETCH_CHARACTER_FULFILLED,
reducer characters returned undefined.

185
00:12:39.793 --> 00:12:45.358
Let's just check that out for a second,
should I have that action there?

186
00:12:48.730 --> 00:12:50.880
&gt;&gt; Steve Kinney: It's just the payload,
it's not payload.characters.

