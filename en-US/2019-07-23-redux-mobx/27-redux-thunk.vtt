WEBVTT

1
00:00:00.280 --> 00:00:03.540
&gt;&gt; Steve Kinney: So we're gonna look at
two strategies for dealing with aync.

2
00:00:03.540 --> 00:00:06.020
Redux Thunk is easy, right.

3
00:00:06.020 --> 00:00:09.266
It is pretty straight forward,
but has some foot guns,

4
00:00:09.266 --> 00:00:13.480
which is the kind of argument that we
had was, we had a developer saying,

5
00:00:13.480 --> 00:00:15.230
man I can do anything with it.

6
00:00:15.230 --> 00:00:16.070
It's super flexible.

7
00:00:16.070 --> 00:00:18.680
And my problem was, yeah,
we can do anything with it.

8
00:00:18.680 --> 00:00:19.770
It's super flexible, right?

9
00:00:19.770 --> 00:00:24.690
It's very, I believe there's
a Dan tweet that I have seen,

10
00:00:24.690 --> 00:00:27.850
where he basically says, I wrote it as
an example of how we might do stuff.

11
00:00:27.850 --> 00:00:30.130
I didn't actually expect
it to get fully adopted.

12
00:00:30.130 --> 00:00:32.950
Which is the story of most
of my successes in life.

13
00:00:32.950 --> 00:00:35.220
[LAUGH] Which is, I didn't think this.

14
00:00:35.220 --> 00:00:38.950
I wasn't taking this super seriously,
and it took off.

15
00:00:38.950 --> 00:00:41.690
So we'll talk a little bit
about what a thunk is.

16
00:00:41.690 --> 00:00:44.980
A thunk is, again,
it's a just JavaScript thing.

17
00:00:44.980 --> 00:00:46.990
It's a function returned
from another function.

18
00:00:46.990 --> 00:00:49.430
And what does that mean, right?

19
00:00:49.430 --> 00:00:51.140
The first one is a regular function.

20
00:00:51.140 --> 00:00:53.690
The second one is another
function that we return.

21
00:00:53.690 --> 00:00:56.100
All right.
So why is this important right?

22
00:00:56.100 --> 00:01:00.462
When we're using it with Redux,
we have the idea of, hey,

23
00:01:00.462 --> 00:01:02.390
we maybe need to make an Ajax call.

24
00:01:04.000 --> 00:01:06.814
And yeah, we need to do that.

25
00:01:06.814 --> 00:01:11.150
And then, we'll dispatch
the action when we're done, right.

26
00:01:11.150 --> 00:01:13.855
And so
the thunk gives us the function to do,

27
00:01:13.855 --> 00:01:19.000
it's effectively, you are not wrong for
thinking about it like a callback.

28
00:01:19.000 --> 00:01:21.590
Right, it's syntactically
a little different, but

29
00:01:21.590 --> 00:01:26.850
I think the callback is a great metaphor
to use to wrap your head around it.

30
00:01:26.850 --> 00:01:30.220
The problem with callbacks,
callbacks are functions.

31
00:01:30.220 --> 00:01:32.810
And Redux doesn't deal with functions.

32
00:01:32.810 --> 00:01:35.440
You remember when we tried to,
in the very beginning of this course,

33
00:01:35.440 --> 00:01:39.430
we tried to pass a string as an action and
it got very upset with us.

34
00:01:39.430 --> 00:01:41.120
It's like, I'm sorry only objects.

35
00:01:41.120 --> 00:01:42.200
So we're like here, here's an object.

36
00:01:42.200 --> 00:01:43.830
It's like, no, no, no, no.

37
00:01:43.830 --> 00:01:45.430
Only objects with a type property, right?

38
00:01:45.430 --> 00:01:49.910
Redux has, it's pretty light weight but
it does have some opinions.

39
00:01:49.910 --> 00:01:53.550
So we can't give the Redux
store a callback.

40
00:01:53.550 --> 00:01:55.860
We can't even give it a promise, right?

41
00:01:55.860 --> 00:01:59.470
And a lot of this is side effects,
which are against the rules anyway.

42
00:01:59.470 --> 00:02:00.889
So a redux-thunk is a middleware.

43
00:02:01.920 --> 00:02:05.270
And what it does is allows us
to dispatch a function, right?

44
00:02:05.270 --> 00:02:07.130
The middleware will catch it.

45
00:02:07.130 --> 00:02:11.925
And then when we run the function,
when we call the dispatch from

46
00:02:11.925 --> 00:02:16.970
that function,
that action will then get handed to Redux.

47
00:02:16.970 --> 00:02:20.210
So effectively, Redux doesn't know
anything about these functions,

48
00:02:20.210 --> 00:02:24.940
or any of this async, it's saying like,
hey, the middleware catches this function.

49
00:02:24.940 --> 00:02:28.940
I will do the thing, and you tell me
when to go dispatch that action, right?

50
00:02:28.940 --> 00:02:31.870
So it gives an ability
effectively to wait, right?

51
00:02:31.870 --> 00:02:33.610
Wait until we hear back from the network.

52
00:02:33.610 --> 00:02:34.830
Wait until whatever it is.

53
00:02:34.830 --> 00:02:37.920
Wait until something comes
over our web socket, whatever.

54
00:02:39.090 --> 00:02:45.580
So it kinda looks like here we might have
just a regular action creator, right?

55
00:02:45.580 --> 00:02:48.190
But okay, how do we know when
we heard back from the API?

56
00:02:49.410 --> 00:02:51.760
This is what it would look
like with redux-thunk.

57
00:02:51.760 --> 00:02:56.940
The fake API would use Api.getAll,
when that promise returns we'll dispatch.

58
00:02:56.940 --> 00:03:01.868
So, instead of having the action
creator as we saw before that just

59
00:03:01.868 --> 00:03:04.508
creates the object and off it goes,

60
00:03:04.508 --> 00:03:10.510
we have an action creator that
returns a function, right, a thunk.

61
00:03:10.510 --> 00:03:16.480
And that will then wait for the promise
to resolve and do all of those things.

62
00:03:16.480 --> 00:03:17.540
And I mean, theoretically,

63
00:03:17.540 --> 00:03:21.220
you could get really fancy in your
mapDispatchToProps and do it all there.

64
00:03:21.220 --> 00:03:22.570
But that's kind of gnarly.

65
00:03:22.570 --> 00:03:24.030
And it means you would
have to implement it

66
00:03:24.030 --> 00:03:25.980
everywhere that was hitting the same API.

67
00:03:25.980 --> 00:03:31.154
Here, you can basically use this action
creator, it will do all the stuff and

68
00:03:31.154 --> 00:03:35.864
it will fire a real deal Redux action
when all things are said and done.

