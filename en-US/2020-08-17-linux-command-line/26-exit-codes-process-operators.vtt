WEBVTT

1
00:00:00.000 --> 00:00:06.505
Let's talk about exit codes and
process operators and subcommands.

2
00:00:08.634 --> 00:00:12.815
So, every time that your program finishes,

3
00:00:12.815 --> 00:00:18.876
it returns a exit code,
like how the previous process finished.

4
00:00:20.481 --> 00:00:22.087
So if I say date, right,

5
00:00:22.087 --> 00:00:26.686
this is a very simple program that
just returns to you the current date.

6
00:00:26.686 --> 00:00:34.585
If I say echo $?, it'll actually give me
back how did the last command finish?

7
00:00:34.585 --> 00:00:39.221
This one in this particular case, it
finished successfully so it returned zero.

8
00:00:39.221 --> 00:00:42.765
Any process that return
that finishes successfully,

9
00:00:42.765 --> 00:00:46.240
whatever it defines a success
returns with the zero.

10
00:00:46.240 --> 00:00:50.983
Anything that returns with anything other
than zero did not finish successfully.

11
00:00:52.486 --> 00:00:55.063
So basically, for the most part, the only

12
00:00:55.063 --> 00:00:59.726
thing that you need to worry about is
the number zero or is the number not zero.

13
00:00:59.726 --> 00:01:02.675
If it's not zero,
it did not finish successfully.

14
00:01:02.675 --> 00:01:06.542
If it's zero,
then it finished successfully.

15
00:01:06.542 --> 00:01:10.574
So a good example of this,
if I type yes, right, and

16
00:01:10.574 --> 00:01:15.707
then I stop it, and then I hit echo $?,
it finished with 130,

17
00:01:15.707 --> 00:01:19.218
which means it did not
finish successfully.

18
00:01:19.218 --> 00:01:22.752
Now you might answer what does it
mean if yes finishes successfully?

19
00:01:22.752 --> 00:01:28.064
It never does, because it never finishes,
it will never return to zero.

20
00:01:28.064 --> 00:01:34.018
So that's the only exit code that it
could possibly have is something nonzero.

21
00:01:34.018 --> 00:01:38.874
Now the question might be asking is
like what does 130 actually mean?

22
00:01:38.874 --> 00:01:43.560
And my first answer to that
question is it doesn't matter.

23
00:01:43.560 --> 00:01:46.503
It's not zero and that's really
all you ever have to care about.

24
00:01:46.503 --> 00:01:50.795
But I know some of you are still curious
as I was so I went looked it up.

25
00:01:50.795 --> 00:01:55.691
And there are some, General rules

26
00:01:55.691 --> 00:02:00.456
of thumb of how things should exit
if they don't exit successfully.

27
00:02:00.456 --> 00:02:03.783
But again, it's up to the program of what
they choose to do with about those things

28
00:02:03.783 --> 00:02:05.147
and it's not enforced by batch.

29
00:02:05.147 --> 00:02:09.030
So it depends program by program.

30
00:02:09.030 --> 00:02:13.314
However, there are some numbers
that generally people use.

31
00:02:13.314 --> 00:02:16.362
So here, I wrote something down here.

32
00:02:16.362 --> 00:02:17.925
0 means it's successful.

33
00:02:17.925 --> 00:02:22.769
1, which is one you'll probably see
the most, just means there was an error of

34
00:02:22.769 --> 00:02:26.838
some variety, I did not finish
successfully because of an error.

35
00:02:26.838 --> 00:02:30.742
2 usually means that bash failed but
not the program failed.

36
00:02:30.742 --> 00:02:33.311
Usually won't see that because
bash doesn't fail a whole lot.

37
00:02:33.311 --> 00:02:38.209
The one that you just saw here,
130, means the user used Ctrl+C.

38
00:02:43.078 --> 00:02:50.053
Then from 137 to 165 or something like
that there's some special combination.

39
00:02:50.053 --> 00:02:52.870
So those ones are generally
not used by users.

40
00:02:58.263 --> 00:03:01.763
You have 128 means that the exit command
failed like there's there's a bunch of

41
00:03:01.763 --> 00:03:03.463
them out here and I just wrote down some.

42
00:03:03.463 --> 00:03:08.216
But again, suffice to say,
you'll either see 0, you'll see 1, or

43
00:03:08.216 --> 00:03:13.891
you'll probably see, 130,

44
00:03:13.891 --> 00:03:16.582
cuz that means you stopped the program.

45
00:03:16.582 --> 00:03:23.374
Another one is interesting here, is 126
means the file wasn't actually executable.

46
00:03:23.374 --> 00:03:28.445
But anyway, suffice to say,
zero or nonzero.

47
00:03:30.633 --> 00:03:32.144
So why am I talking about this?

48
00:03:32.144 --> 00:03:35.496
Well, there's a thing called operators.

49
00:03:36.817 --> 00:03:39.629
So let's say I wanted to do something, and

50
00:03:39.629 --> 00:03:44.333
I only wanted to do a second thing
if the first thing completed, right?

51
00:03:44.333 --> 00:03:48.405
So if I said touch status.txt, and

52
00:03:48.405 --> 00:03:55.207
I only wanna run the second
thing if status.txt succeeds.

53
00:03:55.207 --> 00:04:01.556
I can do &amp;&amp;, if you've programmed
JavaScript, this looks very familiar.

54
00:04:01.556 --> 00:04:08.560
This works relatively the same way,
then I'll run date into status.txt.

55
00:04:08.560 --> 00:04:11.256
And if that's successful,

56
00:04:11.256 --> 00:04:16.655
then I'm going to also append
up time into status.txt.

57
00:04:18.730 --> 00:04:20.403
So this will run.

58
00:04:20.403 --> 00:04:23.452
If it returns a zero, then this will run.

59
00:04:23.452 --> 00:04:26.267
And if that returns a zero,
then this will run.

60
00:04:26.267 --> 00:04:29.283
Since all of those I intend on working,
it should all work.

61
00:04:31.125 --> 00:04:32.862
So if I cat status.txt,

62
00:04:32.862 --> 00:04:37.266
you'll see here the date, right,
which is what we saw there.

63
00:04:37.266 --> 00:04:41.733
And this automatically puts a new line at
the end, so you don't have to do that.

64
00:04:41.733 --> 00:04:44.110
And then uptime is a fun command.

65
00:04:44.110 --> 00:04:47.284
It tells you how long this
computer has been up.

66
00:04:47.284 --> 00:04:50.354
So my computer since I think it restarted,

67
00:04:53.378 --> 00:04:58.329
Has been up for almost 2 hours.

68
00:04:58.329 --> 00:05:02.578
Looks like it has one user logged in,
which makes sense because this is

69
00:05:02.578 --> 00:05:06.482
the uptime not for my Mac,
this is not the uptime for multipass.

70
00:05:08.936 --> 00:05:11.957
Has one user connected and
it has no load right now, but

71
00:05:11.957 --> 00:05:16.700
it'll tell you like I've had 50% CPU usage
over the past couple hours bah bah bah.

72
00:05:20.700 --> 00:05:23.100
Okay, so that's what the ampersand is.

73
00:05:23.100 --> 00:05:26.476
You'll probably see that a lot in like
bash commands like that you copy and

74
00:05:26.476 --> 00:05:29.524
paste from Stack Overflow is a bunch
of ampersand so you can do one or

75
00:05:29.524 --> 00:05:32.040
you can do like five commands
with just one copy paste.

76
00:05:32.040 --> 00:05:34.874
That's what that end end is useful for.

77
00:05:34.874 --> 00:05:40.075
But keep in mind if you fail any one of
those, it will not run the second command.

78
00:05:40.075 --> 00:05:43.687
So if I say false, actually,
let's just run false.

79
00:05:43.687 --> 00:05:48.606
And then echo $?, you'll see that false.

80
00:05:48.606 --> 00:05:50.613
All false does is return an error.

81
00:05:50.613 --> 00:05:54.576
That's its entire existence
is to not return zero.

82
00:05:54.576 --> 00:05:58.281
By the same virtue, you have true as well,
and all it does is return zero.

83
00:05:58.281 --> 00:06:04.114
So, if I say false, and echo hi,
what do you think it's gonna do?

84
00:06:06.219 --> 00:06:09.835
Nothing, it's not gonna do anything
because this returns one and so

85
00:06:09.835 --> 00:06:12.400
therefore it doesn't
reach the second clause.

86
00:06:12.400 --> 00:06:19.977
They say true and echo hi, lo and
behold, it echoes hi, okay?

87
00:06:19.977 --> 00:06:22.921
So I wanted to show you
as well there is an or

88
00:06:22.921 --> 00:06:28.007
operator, Which is again
more like JavaScript.

89
00:06:28.007 --> 00:06:29.863
It's two pipes next to each other.

90
00:06:29.863 --> 00:06:35.120
So this runs only if
this was not successful.

91
00:06:35.120 --> 00:06:38.293
So, as you may imagine,
this could be like, hey, do this and

92
00:06:38.293 --> 00:06:42.445
if you were not successful, then run
the second thing that cleans up basically,

93
00:06:42.445 --> 00:06:44.177
that would be a use case for that.

94
00:06:45.931 --> 00:06:51.487
Same case, if I say true here, it won't
run that because it was successful.

95
00:06:55.460 --> 00:06:59.754
Okay, now what if you wanna
run something no matter what?

96
00:06:59.754 --> 00:07:04.582
You can say true, and then you put a space

97
00:07:04.582 --> 00:07:08.704
semicolon space, false echo hi.

98
00:07:08.704 --> 00:07:10.935
So it goes through both of these.

99
00:07:10.935 --> 00:07:12.316
It runs both of them.

100
00:07:12.316 --> 00:07:15.939
It doesn't actually care
what that code is, and so

101
00:07:15.939 --> 00:07:20.762
it ends up running echo hi cuz it's
just gonna truck on no matter what

