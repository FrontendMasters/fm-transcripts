WEBVTT

1
00:00:00.000 --> 00:00:03.373
So signals are a particular
construct within bash, so

2
00:00:03.373 --> 00:00:07.712
you can send basically a programme
of signal to do something, right?

3
00:00:07.712 --> 00:00:12.411
So you can have a programme that's
running and it takes 10 minutes to run.

4
00:00:12.411 --> 00:00:17.407
And let's say that programme needs to end
early, you can send it a signal that hey

5
00:00:17.407 --> 00:00:20.880
programme, me the user,
I'm asking you to end early.

6
00:00:20.880 --> 00:00:22.459
Can you handle that?

7
00:00:22.459 --> 00:00:26.057
So it doesn't force
the program to do anything.

8
00:00:26.057 --> 00:00:30.350
It just tells the program,
here's a signal of my intent,

9
00:00:30.350 --> 00:00:33.338
it's up to you to do something about it.

10
00:00:33.338 --> 00:00:37.792
Like a good example of that would
be if someone calls you right,

11
00:00:37.792 --> 00:00:41.238
that's a signal for
them to want to talk to you but

12
00:00:41.238 --> 00:00:45.209
you the program don't have
to answer the call, right?

13
00:00:45.209 --> 00:00:48.233
That's kinda what signals are as
you're calling the program,

14
00:00:48.233 --> 00:00:50.650
it's up to the program how
it wants to answer that.

15
00:00:53.917 --> 00:00:56.842
Just kind of like best practices
of like how to handle signal so

16
00:00:56.842 --> 00:01:00.629
relatively most programs will handle
signals in a relatively consistent way.

17
00:01:00.629 --> 00:01:04.109
But again, it's up to
the programme to implement signals.

18
00:01:04.109 --> 00:01:07.727
Some of them just choose not to.

19
00:01:07.727 --> 00:01:12.503
So the first one that you will use all
the time perhaps the most is SIGINT.

20
00:01:12.503 --> 00:01:16.165
So, SIG, signal, INT, interrupt.

21
00:01:16.165 --> 00:01:18.443
So you're telling it,
the programme please interrupt.

22
00:01:18.443 --> 00:01:20.790
A lot of times,
that just means stop running.

23
00:01:20.790 --> 00:01:26.891
So if I do for example,
if I go back to the terminal here.

24
00:01:26.891 --> 00:01:31.975
If I do tail and I'm gonna do -f,
which means continue to tail and

25
00:01:31.975 --> 00:01:35.224
I do bash_history like this, history.

26
00:01:35.224 --> 00:01:38.279
Notice this program is still running.

27
00:01:38.279 --> 00:01:42.456
What tail-f does is like,
watch this file and if anything gets new,

28
00:01:42.456 --> 00:01:43.689
it gets added to it.

29
00:01:43.689 --> 00:01:45.488
Show me those things as
they're being added, right?

30
00:01:45.488 --> 00:01:48.602
It's anticipating that
things will be added to it.

31
00:01:48.602 --> 00:01:52.050
But let's say I'm done now and
I want the program to end.

32
00:01:52.050 --> 00:01:57.565
If I don't do anything right now,
it's just gonna keep running forever,

33
00:01:57.565 --> 00:02:00.377
right cuz that's what that -f does.

34
00:02:00.377 --> 00:02:04.408
So in order for me to get the program
to stop, I have to send it as SIGINT,

35
00:02:04.408 --> 00:02:05.495
as SIG interrupt.

36
00:02:05.495 --> 00:02:09.600
So if I hit Ctrl and C, it says,
please stop and then have like,

37
00:02:09.600 --> 00:02:14.250
the tail-f is waiting for that signal and
once it catches that SIGINT,

38
00:02:14.250 --> 00:02:19.006
it's like cool, I'm gonna stop and
that's when it stops right there.

39
00:02:19.006 --> 00:02:22.481
So you'll see this.

40
00:02:22.481 --> 00:02:27.626
What is that, it's not a circumflex.

41
00:02:27.626 --> 00:02:29.238
That's what it's called in language.

42
00:02:29.238 --> 00:02:30.816
I can't remember the name of
that character right now.

43
00:02:30.816 --> 00:02:35.253
Anyway, so you'll see this character right
here if you'd like to shift six character

44
00:02:35.253 --> 00:02:35.999
right there.

45
00:02:35.999 --> 00:02:43.591
You'll see that a lot that
represents control, right?

46
00:02:43.591 --> 00:02:48.538
So, when I did this,
you see that the circumflex and

47
00:02:48.538 --> 00:02:51.697
C, that is me pressing Ctrl+C.

48
00:02:51.697 --> 00:02:54.297
So just be aware that if you see that,
in fact,

49
00:02:54.297 --> 00:02:57.577
if you're on a Mac keyboard,
that's what it looks like.

50
00:02:57.577 --> 00:02:59.799
So just be aware of that.

51
00:02:59.799 --> 00:03:02.566
Okay.

52
00:03:02.566 --> 00:03:08.143
Yeah, here's another one of my
favorite programs is called yes.

53
00:03:08.143 --> 00:03:11.591
So, a lot of these programs like in
the early days were interactive and

54
00:03:11.591 --> 00:03:13.821
you had to answer yes to
a bunch of questions.

55
00:03:13.821 --> 00:03:17.020
Some computer scientists got
real sick of answering yes, so

56
00:03:17.020 --> 00:03:18.660
he wrote a program called Yes.

57
00:03:18.660 --> 00:03:22.101
And all it does is spam the character
why and indefinitely and

58
00:03:22.101 --> 00:03:25.149
it just answers yes to every
question that you ask it.

59
00:03:25.149 --> 00:03:28.372
But it will do that
infinitely until you stop it.

60
00:03:28.372 --> 00:03:31.179
So I have to Ctrl+C and then it stops.

61
00:03:36.185 --> 00:03:36.997
Okay.

62
00:03:36.997 --> 00:03:41.474
So, that's SIGINT.

63
00:03:41.474 --> 00:03:42.590
That's a good one to know.

64
00:03:42.590 --> 00:03:46.405
There's another one called SIGQUIT.

65
00:03:46.405 --> 00:03:49.899
So interrupt is a like a less powerful,
it's more it's more like hey,

66
00:03:49.899 --> 00:03:54.169
stop doing what you're doing but SIGQUIT's
like, shut it down, I'm done with you.

67
00:03:54.169 --> 00:03:58.869
In fact, if I'd just hit Ctrl+D right now,
don't, but if you did,

68
00:03:58.869 --> 00:04:00.793
well, I'll just show you.

69
00:04:00.793 --> 00:04:03.954
It'll actually end my
terminal sessions like,

70
00:04:03.954 --> 00:04:06.735
you told me to quit, I'm quitting right?

71
00:04:06.735 --> 00:04:09.368
So now this is actually done
I can't even restart this, so

72
00:04:09.368 --> 00:04:10.725
I have to reopen my shell now.

73
00:04:13.595 --> 00:04:14.381
Just close that old one.

74
00:04:14.381 --> 00:04:19.369
That's what SIGQUIT is, it's a strong
signal, it's like quit the entire program.

75
00:04:19.369 --> 00:04:24.455
So like a good example of this,
if I say Python3 and I get popped into

76
00:04:24.455 --> 00:04:30.627
the Python3 repl, it actually doesn't
respect keyboard interrupts, right?

77
00:04:30.627 --> 00:04:35.713
So it's not going to end it if I tell
it that so you actually have to send

78
00:04:35.713 --> 00:04:40.799
Python three a SIGQUIT, for it to say,
okay, you wanted me to stop so

79
00:04:40.799 --> 00:04:45.833
I hit Ctrl+D and that's how I quit
Python3, the repl for Python.

80
00:04:45.833 --> 00:04:50.674
So let's get to like generally
my progression of things

81
00:04:50.674 --> 00:04:54.079
is I'll try Ctrl+C to see if it stops.

82
00:04:54.079 --> 00:04:58.021
If it doesn't stop, then I'll try
Ctrl+D to see if that makes it stop and

83
00:04:58.021 --> 00:05:00.452
usually one of the two
will quit any program.

84
00:05:00.452 --> 00:05:04.053
So, just keep those in mind.

85
00:05:04.053 --> 00:05:07.296
Try Ctrl+C first if that doesn't work,
then try Ctrl+D.

86
00:05:12.095 --> 00:05:15.609
Okay, for this next one here SIGTERM.

87
00:05:18.717 --> 00:05:21.063
SIGTERM is, I think it's terminate.

88
00:05:21.063 --> 00:05:24.258
But this happens when your computer's
like shutting down, right?

89
00:05:24.258 --> 00:05:28.328
It'll actually send SIGTERMs
to all of your programs and

90
00:05:28.328 --> 00:05:31.888
say like, hey,
we're shutting down everyone,

91
00:05:31.888 --> 00:05:36.153
you get your opportunity right
now to shut your stuff down.

92
00:05:36.153 --> 00:05:40.375
I'm gonna give you a bit of time,
here's your SIGTERM.

93
00:05:40.375 --> 00:05:43.962
And then once you're all done,
then it shuts the entire terminal down.

94
00:05:43.962 --> 00:05:48.728
So you don't send send SIGTERMs typically
through computer sending SIGTERMs to

95
00:05:48.728 --> 00:05:50.766
the various different programs.

96
00:05:50.766 --> 00:05:55.478
You can send SIGTERMs yourself but
that's not what it's meant for.

97
00:05:55.478 --> 00:06:00.358
It's meant to be from the operating
system itself because it's shutting down.

98
00:06:00.358 --> 00:06:05.128
And then everyone's favorite at
the end is SIGKILL which is like,

99
00:06:05.128 --> 00:06:09.147
you're done,
it's program assassination, right?

100
00:06:09.147 --> 00:06:11.511
It gets shut down immediately.

101
00:06:11.511 --> 00:06:14.810
You don't get to clean up,
you don't get any options, it's just done.

102
00:06:14.810 --> 00:06:19.624
All right, so if I look at my programs
now you can see where's the yes,

103
00:06:19.624 --> 00:06:21.018
I had a yes running.

104
00:06:25.263 --> 00:06:25.987
No I don't.

105
00:06:30.677 --> 00:06:33.645
So, I'll show you how to
do this in a second but

106
00:06:33.645 --> 00:06:37.165
I'm gonna start a program
running in the background.

107
00:06:37.165 --> 00:06:40.287
And I'm going to have it just
infinitely go in the background.

108
00:06:47.001 --> 00:06:49.581
All right, so now you can see here,

109
00:06:49.581 --> 00:06:55.706
I have this yes running in the background
which is infinitely spanning why, right?

110
00:06:55.706 --> 00:06:56.731
And it's just running in
the background taking up CPU.

111
00:06:56.731 --> 00:06:59.902
It's not doing anything useful.

112
00:06:59.902 --> 00:07:01.695
So I wanna kill this program.

113
00:07:01.695 --> 00:07:05.868
Now I can give it like a soft SIGINT and
it would totally respect that but

114
00:07:05.868 --> 00:07:09.688
just to show you how to do a SIGKILL
like immediately kill this and

115
00:07:09.688 --> 00:07:11.701
don't clean up after yourself.

116
00:07:11.701 --> 00:07:16.636
And that's like really the big difference
here is things that are sent to SIGTERM,

117
00:07:16.636 --> 00:07:18.270
and SIGQUIT, and SIGINT.

118
00:07:18.270 --> 00:07:22.514
We'll get an opportunity to wrap
things up, write some files out,

119
00:07:22.514 --> 00:07:26.168
clear out the logs,
send out something off to the server.

120
00:07:26.168 --> 00:07:28.363
SIGKILL will not allow it to do that.

121
00:07:28.363 --> 00:07:31.445
So you can use something called kill.

122
00:07:31.445 --> 00:07:32.808
And if I do kill.

123
00:07:38.693 --> 00:07:44.860
And actually I think I might have a,
Yeah, okay.

124
00:07:44.860 --> 00:07:48.116
And then I'm going to give
it this process ID 1465.

125
00:07:48.116 --> 00:07:56.273
So the -9 represents SIGKILL.

126
00:07:56.273 --> 00:08:00.364
And the way you can actually
tell that is you can see

127
00:08:00.364 --> 00:08:03.294
number nine right here is SIGKILL.

128
00:08:03.294 --> 00:08:06.507
So kill-l will show you all the various
different signals that are possible.

129
00:08:06.507 --> 00:08:11.363
And most of these I don't even know what
they do and I never use them like, well,

130
00:08:11.363 --> 00:08:12.885
let's see like SIGPWR or

131
00:08:12.885 --> 00:08:17.526
I guess it's probably power SIGIO SIG
[INAUDIBLE] I don't know some of these I

132
00:08:17.526 --> 00:08:22.483
just don't even know what they do and you
never have to really use them directly.

133
00:08:22.483 --> 00:08:25.190
There's SIGALARM which is like
sound the alarm on the computer.

134
00:08:25.190 --> 00:08:28.974
There's a bunch of these,
but the -9 here says,

135
00:08:28.974 --> 00:08:33.814
send signal number nine,
which is SIGKILL to process 1465,

136
00:08:33.814 --> 00:08:38.830
and we'll get into like the process
stuff here in just a little bit,

137
00:08:38.830 --> 00:08:42.003
but I wanted you to
know what SIGKILL does.

138
00:08:42.003 --> 00:08:46.324
And also I wanted you to know
like what the ejector button is,

139
00:08:46.324 --> 00:08:50.659
which is kill -9 process ID
will just destroy any process.

140
00:08:50.659 --> 00:08:54.930
You can also do, yeah, like this.

141
00:08:54.930 --> 00:08:59.007
You can do -SIGKILL like this.

142
00:08:59.007 --> 00:09:01.969
And I know this just just has one dash but
that's how kill works.

143
00:09:01.969 --> 00:09:07.387
Like I said it's up to every
program to implement flags however

144
00:09:07.387 --> 00:09:12.412
they want to, but
-SIGKILL would have done that as well.

145
00:09:12.412 --> 00:09:17.180
Like if I do 1467 here,
which I know doesn't exist, but

146
00:09:17.180 --> 00:09:20.557
that would have sent SIGKILL to 1467.

147
00:09:24.254 --> 00:09:24.837
And again,

148
00:09:24.837 --> 00:09:28.751
kill -l will show you all of the possible
signals that you can send to programs.

