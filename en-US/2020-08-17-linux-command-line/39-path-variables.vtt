WEBVTT

1
00:00:00.000 --> 00:00:04.108
All right, so let's talk about path.

2
00:00:04.108 --> 00:00:06.494
I actually got a question about
this earlier in the class.

3
00:00:06.494 --> 00:00:10.265
So this is actually what I'll talk about
so that you have a thing called your path.

4
00:00:10.265 --> 00:00:12.596
So if you say echo $PATH right now,

5
00:00:12.596 --> 00:00:17.182
you can see that you get this really
long string of like paths, right,

6
00:00:17.182 --> 00:00:21.248
various different paths,
like locations on your computer.

7
00:00:21.248 --> 00:00:26.329
This is where all of your programs are.

8
00:00:26.329 --> 00:00:30.158
So you can see here,
if I say ls usr/local/sbin,

9
00:00:30.158 --> 00:00:33.640
actually it doesn't
have anything in there.

10
00:00:33.640 --> 00:00:37.160
I know usr/local/games has
logcat in it right, or

11
00:00:37.160 --> 00:00:39.640
it should, looks like it doesn't.

12
00:00:39.640 --> 00:00:42.774
All right, how about snap/bin?

13
00:00:42.774 --> 00:00:44.572
Some of these are open.

14
00:00:44.572 --> 00:00:50.960
So you can see here this has all my
various different snap binaries and

15
00:00:50.960 --> 00:00:56.482
this is how Bash figures out
where all of your programs are.

16
00:00:56.482 --> 00:00:58.217
So it goes from left to right.

17
00:00:58.217 --> 00:00:59.211
So it's going to first check
if I say run node, right?

18
00:00:59.211 --> 00:01:04.868
So if I say here, run node,
it's going to check is there a node here?

19
00:01:04.868 --> 00:01:05.394
No.

20
00:01:05.394 --> 00:01:08.663
Here, here, here, until eventually it
gets to the snap, then I was like cool.

21
00:01:08.663 --> 00:01:13.096
I found something called node,
I can invoke it from here.

22
00:01:13.096 --> 00:01:17.750
So notice what I'm running gen_files or
node_test, right, I have to say

23
00:01:17.750 --> 00:01:22.492
.slash to let Bash knows I'm not reaching
for something that's in my path.

24
00:01:22.492 --> 00:01:24.840
I'm actually wanting to run something
that's in this directory and

25
00:01:24.840 --> 00:01:25.778
it's called node_test.

26
00:01:25.778 --> 00:01:27.729
That's what the .slash means.

27
00:01:27.729 --> 00:01:34.443
But what happens if I wanted to run
something like gen_files like this, right?

28
00:01:34.443 --> 00:01:38.907
Without any sort of prefix to run it as
if it was like a system wide command.

29
00:01:38.907 --> 00:01:44.617
Well, let's make our own
directory called my_bin.

30
00:01:44.617 --> 00:01:51.296
And I'm gonna move,
we'll move node_test into my_bin.

31
00:01:51.296 --> 00:01:59.282
And we'll move gen_files
into my_bin as well.

32
00:01:59.282 --> 00:02:02.977
So if I look in my_bin, you should see
I have gen_files and node_test and

33
00:02:02.977 --> 00:02:04.923
now we just have to put that on our path.

34
00:02:04.923 --> 00:02:10.061
So the way that we would do that is
we're going to vi into our bash RC.

35
00:02:10.061 --> 00:02:15.179
And just down here at the end,
I'm going to add another line under our

36
00:02:15.179 --> 00:02:21.091
another variable and I'm gonna say export
PATH =, you need a full path there,

37
00:02:21.091 --> 00:02:25.856
so I'm gonna put the tilda and
then under my_bin like this, and

38
00:02:25.856 --> 00:02:31.239
then I'm going to put colon, the colon
is what separates all the various

39
00:02:31.239 --> 00:02:36.035
different things on the path and
then I'm gonna put PATH there.

40
00:02:36.035 --> 00:02:38.555
Okay, so I have my_bin on there and

41
00:02:38.555 --> 00:02:42.765
then it's going to reattach like
the rest of the path on it.

42
00:02:42.765 --> 00:02:43.374
So I'm not overriding the path.

43
00:02:43.374 --> 00:02:47.183
If I didn't put this :$PATH on there,
it would overwrite everything that's in

44
00:02:47.183 --> 00:02:51.062
the path, and all I'm trying to do is add
something on the beginning of it, right?

45
00:02:51.062 --> 00:02:55.520
So now if I write, oops,
write quit, actually,

46
00:02:55.520 --> 00:03:02.112
just a funny side note about VI again
because I love making jokes about VI.

47
00:03:02.112 --> 00:03:04.611
If you search for :wq inside of files,

48
00:03:04.611 --> 00:03:09.382
it's a bunch of people that have been
meaning to write quit out of them, but

49
00:03:09.382 --> 00:03:13.570
didn't word in the proper mode,
and it's just all over GitHub.

50
00:03:13.570 --> 00:03:17.431
It's hilarious, anyway.

51
00:03:17.431 --> 00:03:22.055
So if I echo my path again,
you can see here that my_bin is on there.

52
00:03:22.055 --> 00:03:25.115
And if I look inside of my_bin, right,

53
00:03:25.115 --> 00:03:29.528
you can see that I got gen_files and
node_test in there.

54
00:03:29.528 --> 00:03:35.641
So now, hopefully I should be able
to just say node_test, like that.

55
00:03:35.641 --> 00:03:36.581
And there you go.

56
00:03:36.581 --> 00:03:40.181
Now that that's on my path it's like,
I can see that and I can run it.

57
00:03:40.181 --> 00:03:45.902
Or if I say gen_files, just like that,
it runs my program that I put in there.

58
00:03:45.902 --> 00:03:49.070
So this is a really useful thing for you
to know how to do, because you can create

59
00:03:49.070 --> 00:03:52.143
a bunch of your own personal Bash scripts
that you can use whenever you want.

60
00:03:52.143 --> 00:03:53.915
And then you can put them on your path and

61
00:03:53.915 --> 00:03:57.142
you can run them as if they were just
normal commands for your computer.

62
00:03:57.142 --> 00:04:00.112
So I mean, it'll even autocomplete, right?

63
00:04:00.112 --> 00:04:05.619
So I put gen_ and if I hit tab,
files will show up So

64
00:04:05.619 --> 00:04:08.626
that is how you use Shibang and

65
00:04:08.626 --> 00:04:13.685
that's how you put things
onto your path as well.

66
00:04:13.685 --> 00:04:18.956
One thing I was going to throw
in here which is useful for

67
00:04:18.956 --> 00:04:25.726
you, if I go back into something
like my_bin, gen_files, right?

68
00:04:25.726 --> 00:04:28.313
A lot of times it's useful
to put comments and things,

69
00:04:28.313 --> 00:04:32.306
like we're supposed to comment our code,
you can do that with Bash scripts as well,

70
00:04:32.306 --> 00:04:33.783
if you just put a hash, right?

71
00:04:33.783 --> 00:04:36.811
So this is a comment.

72
00:04:36.811 --> 00:04:38.596
In fact,
technically this first thing up here,

73
00:04:38.596 --> 00:04:41.346
the reason why it doesn't get run is
it's technically a comment, right?

74
00:04:41.346 --> 00:04:44.146
It's just a special comment.

75
00:04:44.146 --> 00:04:49.454
But you'll see all over my notes I have,
you can put comments at the ends here.

76
00:04:49.454 --> 00:04:53.238
I can say, this is an echo, right.

77
00:04:53.238 --> 00:04:57.380
So that's how you do comments right?

78
00:04:57.380 --> 00:05:01.834
So this will still get run because on the
left side of the hash but everything after

79
00:05:01.834 --> 00:05:05.586
here, this is just a comment,
you can put whatever you want there.

80
00:05:07.694 --> 00:05:08.585
Cool.

81
00:05:15.468 --> 00:05:18.111
All right, so
let's talk about variables and

82
00:05:18.111 --> 00:05:20.629
how to do variables
inside of Bash scripts.

83
00:05:20.629 --> 00:05:24.770
So let's go back into gen_files.

84
00:05:27.606 --> 00:05:31.854
Okay, and we're using this
path in multiple places, so

85
00:05:31.854 --> 00:05:37.974
it'd be cool if that was a variable, and
then we could set that variable, right?

86
00:05:37.974 --> 00:05:39.519
So let's go do that.

87
00:05:39.519 --> 00:05:44.345
We're gonna say, DESTINATION= our

88
00:05:44.345 --> 00:05:48.273
path that we're using there.

89
00:05:48.273 --> 00:05:50.944
You can put quotes here as well,
that's optional,

90
00:05:50.944 --> 00:05:53.628
because there's no spaces
here you don't have to.

91
00:05:53.628 --> 00:05:56.602
So up to you if you
want to put that there.

92
00:05:56.602 --> 00:06:02.899
And then here we can just refer to
this as DESTINATION, like this.

93
00:06:02.899 --> 00:06:05.813
Same here DESTINATION.

94
00:06:11.741 --> 00:06:13.662
Okay?

95
00:06:13.662 --> 00:06:15.680
So this should feel
relatively familiar for

96
00:06:15.680 --> 00:06:19.289
you because this looks like what we
were doing with environmental variables.

97
00:06:19.289 --> 00:06:22.019
And that's because it's
literally the same process,

98
00:06:22.019 --> 00:06:24.000
the same thing that's been doing that.

99
00:06:24.000 --> 00:06:25.504
So it works just as well.

100
00:06:25.504 --> 00:06:28.987
Let's say we wanted to put file
here into its own variables, so

101
00:06:28.987 --> 00:06:30.445
we can have a file prefix.

102
00:06:30.445 --> 00:06:37.853
So let's do that,
we're going to say FILE_PREFIX= file.

103
00:06:40.979 --> 00:06:45.484
By the way, these don't necessarily
have to be screaming cases,

104
00:06:45.484 --> 00:06:47.341
as people often call that.

105
00:06:47.341 --> 00:06:49.489
It just frequently is for Bash.

106
00:06:49.489 --> 00:06:51.428
I don't know if there's even
necessarily a good reason for that.

107
00:06:51.428 --> 00:06:54.863
I just always see it that way,
so I always just do.

108
00:06:54.863 --> 00:06:56.814
But you could absolutely
make it lowercase.

109
00:06:56.814 --> 00:07:00.930
And I'll see, inside of Bash scripts,

110
00:07:00.930 --> 00:07:08.194
I will see people use Pascal case or,
I don't see as much camel casing,

111
00:07:08.194 --> 00:07:12.915
but I will see people do
file prefix like this,

112
00:07:12.915 --> 00:07:16.322
up to you, whatever you decide.

113
00:07:19.266 --> 00:07:26.953
But I always see environmental variables
written as screaming case always.

114
00:07:28.013 --> 00:07:29.788
Okay, so this one's a little bit weirder.

115
00:07:29.788 --> 00:07:33.067
We can't just say $FILE_PREFIX like this,

116
00:07:33.067 --> 00:07:38.029
because then it makes it ambiguous
is what this curly brace refers to,

117
00:07:38.029 --> 00:07:41.576
because that could be
accessing an array as well.

118
00:07:41.576 --> 00:07:45.008
So we have to put curly
braces around this as well.

119
00:07:47.370 --> 00:07:50.149
So anywhere that you do
destination right here,

120
00:07:50.149 --> 00:07:53.215
I could technically put curly
braces on this as well.

121
00:07:53.215 --> 00:07:57.408
They're just unnecessary so
people don't always put them there.

122
00:07:57.408 --> 00:08:01.078
But down here I'm doing the touch
command that's actually necessary, so

123
00:08:01.078 --> 00:08:02.835
I have to put those curly braces on.

124
00:08:02.835 --> 00:08:03.984
So just be aware of that.

125
00:08:03.984 --> 00:08:06.641
And now this should work exactly
the same way as it did before.

126
00:08:06.641 --> 00:08:08.726
So if I write quit and run gen_files,

127
00:08:08.726 --> 00:08:11.802
everything still works the way
that we anticipated it.

128
00:08:11.802 --> 00:08:15.315
And something to keep in mind is,
notice that we're using curly braces here.

129
00:08:15.315 --> 00:08:18.926
So curly brace is important
because that means get a variable,

130
00:08:18.926 --> 00:08:23.366
if I put parentheses around it,
you remember that's running a sub command.

131
00:08:23.366 --> 00:08:25.374
And it's yet
different if you use square brackets.

132
00:08:25.374 --> 00:08:30.122
I know it's confusing but just keep in
mind that curly braces with the dollar

133
00:08:30.122 --> 00:08:33.096
sign that's going to be
accessing a variable.

