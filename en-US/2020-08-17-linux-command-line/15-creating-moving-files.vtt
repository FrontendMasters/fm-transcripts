WEBVTT

1
00:00:00.093 --> 00:00:03.731
All of these programs I'm showing
you have so many flags and

2
00:00:03.731 --> 00:00:06.435
so many different ways
you can use the tool.

3
00:00:06.435 --> 00:00:11.755
And I am showing you the 1% of
the surfaces of these tools, right?

4
00:00:11.755 --> 00:00:15.122
So I'm sure if I go in here to make,
let say help,

5
00:00:15.122 --> 00:00:20.150
there's a bunch of different things
that I'm not showing you, right?

6
00:00:20.150 --> 00:00:25.296
So I showed you the -p1 cuz that's what
I use a lot but I'm not showing you

7
00:00:25.296 --> 00:00:30.285
verbose mode, I'm not showing you
all these different modes as well.

8
00:00:30.285 --> 00:00:34.714
So keep in mind that all these
different tools have more

9
00:00:34.714 --> 00:00:37.517
power than what I'm showing you.

10
00:00:44.956 --> 00:00:46.158
So let's talk about touch.

11
00:00:46.158 --> 00:00:52.360
So this is everything I have
in here in this directory.

12
00:00:52.360 --> 00:01:00.753
I'm gonna say touch my-new-file.txt.

13
00:01:00.753 --> 00:01:04.481
And what touch does is if the file
doesn't exist, it creates it.

14
00:01:04.481 --> 00:01:08.667
So if I go in here and look now,
you could see I have a my-new-file.

15
00:01:08.667 --> 00:01:12.844
And this was created at 13:42,
right there, right?

16
00:01:12.844 --> 00:01:17.738
Now, If the file already exists,
it updates its last modified time.

17
00:01:17.738 --> 00:01:20.850
So I don't know if it's been enough time,
it hasn't.

18
00:01:20.850 --> 00:01:25.446
So, but if I waited another minute or two,
and I did touch again on the same file,

19
00:01:25.446 --> 00:01:28.639
what it would do is,
it would change the modified time.

20
00:01:28.639 --> 00:01:33.545
It doesn't do anything else to the file,
it just updates the modified time.

21
00:01:33.545 --> 00:01:36.121
That can be useful sometimes, cuz you
have scripts that go in and say, hey,

22
00:01:36.121 --> 00:01:38.711
if this file's been modified, it means
it's time to run the script again.

23
00:01:38.711 --> 00:01:43.260
So you can kinda use that as like
a time check, you'll see that a lot.

24
00:01:43.260 --> 00:01:47.504
So let's see if I can do that again and
say, you can see right there,

25
00:01:47.504 --> 00:01:51.992
this is now 13:43, whereas up here,
it was 13:42, right?

26
00:01:51.992 --> 00:01:53.802
So it changes that modified time.

27
00:02:00.062 --> 00:02:01.491
Okay, so that's touch.

28
00:02:01.491 --> 00:02:06.605
Now let's say we wanted to get rid of
my-new-file, how would we do that?

29
00:02:06.605 --> 00:02:10.914
One of them is remove, so

30
00:02:10.914 --> 00:02:16.462
rm my new text file, like that.

31
00:02:16.462 --> 00:02:19.956
And now if you go in here and
look, it's not there anymore.

32
00:02:19.956 --> 00:02:25.203
So that's what rm is, remove,
be extremely careful with

33
00:02:25.203 --> 00:02:30.234
how you use rm because if you
use rm in the incorrect way,

34
00:02:30.234 --> 00:02:33.679
you can delete your entire computer.

35
00:02:33.679 --> 00:02:36.399
Or you can at least delete Linux
until it deletes something so

36
00:02:36.399 --> 00:02:38.116
critical that it can't run anymore.

37
00:02:38.116 --> 00:02:42.261
Let's say I wanted to remove my folder,
if I say remove my new folder,

38
00:02:42.261 --> 00:02:46.223
it's gonna say it's a directory,
I don't remove directories.

39
00:02:46.223 --> 00:02:50.620
So in order to remove a directory,
you have to say rm-r my new folder.

40
00:02:50.620 --> 00:02:53.743
And that's how you remove it.

41
00:02:53.743 --> 00:03:00.456
But if I say make directory lol,
and I touch a file in here,

42
00:03:04.123 --> 00:03:08.339
And I say rm-r now of lol, it's gonna,

43
00:03:08.339 --> 00:03:12.194
it didn't have a problem with that.

44
00:03:23.779 --> 00:03:24.587
Interesting, okay.

45
00:03:24.587 --> 00:03:29.901
So frequently it'll ask you,
it cuz they're empty files.

46
00:03:29.901 --> 00:03:35.828
So anyway frequently you'll see f put on
here as well, which stands for force.

47
00:03:35.828 --> 00:03:39.953
And it's basically saying, hey,
I'm about to move a bunch of files and

48
00:03:39.953 --> 00:03:42.469
I don't want you to ask me about it,
right?

49
00:03:42.469 --> 00:03:45.810
Otherwise it'll go through and it's like,
are you sure you want to delete this file?

50
00:03:45.810 --> 00:03:46.960
Do you wanna delete this file?

51
00:03:46.960 --> 00:03:47.954
Do you wanna delete this file?

52
00:03:47.954 --> 00:03:49.744
And if you're trying to
remove a node modules,

53
00:03:49.744 --> 00:03:53.299
which has like 10,000 files in it, you
don't wanna be asked that 10,000 times.

54
00:03:53.299 --> 00:03:57.437
So that's why people
will put the f in there.

55
00:03:57.437 --> 00:03:59.857
And the -r allows you to delete
directories which stands for

56
00:03:59.857 --> 00:04:00.671
recursive delete.

57
00:04:03.241 --> 00:04:07.773
So a lot of times you'll see people just
say rm-rf whatever they're trying to

58
00:04:07.773 --> 00:04:08.330
delete.

59
00:04:08.330 --> 00:04:12.059
I just want to again throw out,
this is a scary command to run because

60
00:04:12.059 --> 00:04:14.939
unlike when you move things
to like the recycle bin,

61
00:04:14.939 --> 00:04:18.944
if you make a mistake with then you can
just pull it out of the recycle bin.

62
00:04:18.944 --> 00:04:22.232
When you rm something, it's gone.

63
00:04:22.232 --> 00:04:24.675
It's legitimately gone,
you cannot recover from it.

64
00:04:24.675 --> 00:04:30.289
Just be aware that you
are permanently deleting something.

65
00:04:30.289 --> 00:04:35.678
There is a package which I'll show
you how to install packages later,

66
00:04:35.678 --> 00:04:39.802
called trash and
a lot of people will switch to trash.

67
00:04:39.802 --> 00:04:44.697
And that way, it works more similar to
how your operating system like MacOs or

68
00:04:44.697 --> 00:04:49.445
Windows works, where there is a temporary
trash directory that is emptied

69
00:04:49.445 --> 00:04:52.175
every 30 days, or something like that.

70
00:04:52.175 --> 00:04:55.416
It's a good idea to install that when I
remember to try and do that but yeah,

71
00:04:55.416 --> 00:04:57.687
just be aware you
are permanently deleting things.

72
00:05:03.508 --> 00:05:07.403
And I'm just gonna throw
out there rm -rf star,

73
00:05:07.403 --> 00:05:10.644
we'll talk about star here in a second.

74
00:05:10.644 --> 00:05:13.975
This is gonna delete everything, right?

75
00:05:13.975 --> 00:05:19.697
Or slash, right?

76
00:05:19.697 --> 00:05:24.413
Just be aware of, I haven't done that but
there's plenty of funny stories out

77
00:05:24.413 --> 00:05:27.700
there of engineers that have
accidentally run that and

78
00:05:27.700 --> 00:05:30.356
it starts deleting their entire computer.

79
00:05:30.356 --> 00:05:31.966
Linux is gonna do exactly
what you tell it to do.

80
00:05:31.966 --> 00:05:34.682
If you tell it to delete everything, it's
gonna be like, okay, and it'll go try and

81
00:05:34.682 --> 00:05:35.233
delete itself.

82
00:05:35.233 --> 00:05:37.194
So just be aware of that.

83
00:05:41.823 --> 00:05:45.547
Cool, So that's rm,

84
00:05:45.547 --> 00:05:49.454
that's another useful command for
you to have in your toolbelt.

85
00:05:49.454 --> 00:05:54.237
And again there's a lot more stuff
to rm than just what I've shown you,

86
00:05:54.237 --> 00:05:56.403
there's the interactive one.

87
00:05:56.403 --> 00:06:00.522
There's, yeah, there's a bunch of stuff.

88
00:06:04.062 --> 00:06:07.622
Cool, let's talk about copy.

89
00:06:07.622 --> 00:06:09.118
So I have txtfile.txt there.

90
00:06:09.118 --> 00:06:11.463
If I want a copy, I can say cp txtfile,
so the source file to destination file.

91
00:06:11.463 --> 00:06:15.701
And now you'll see I have two files,

92
00:06:15.701 --> 00:06:20.762
txtfile.txt and destination file.txt,

93
00:06:20.762 --> 00:06:25.411
that's what copy does, is it copies for

94
00:06:25.411 --> 00:06:29.255
you, I use that one all the time.

95
00:06:29.255 --> 00:06:32.351
And by the same thing if I say copy

96
00:06:34.181 --> 00:06:40.444
What is it?

97
00:06:40.444 --> 00:06:44.169
R, -R hi to bye, right?

98
00:06:44.169 --> 00:06:49.417
Now, if I look inside of here, I have
a bye directory and inside of that bye

99
00:06:49.417 --> 00:06:56.754
directory, Right, now I have a directory

100
00:06:56.754 --> 00:07:02.624
called bye with my name is Brian side of
it cuz it copied everything inside of hi.

101
00:07:02.624 --> 00:07:06.646
So that -R for
copy means recursive as well.

102
00:07:06.646 --> 00:07:11.680
So normally -R or either lowercase or
uppercase R means recursive,

103
00:07:11.680 --> 00:07:15.859
it means to not only this file but
every file inside of it.

104
00:07:15.859 --> 00:07:17.687
That's not always true, but

105
00:07:17.687 --> 00:07:21.135
it's kinda rule of thumb that
people kind of adhere to.

106
00:07:27.229 --> 00:07:28.311
And let's talk about move.

107
00:07:28.311 --> 00:07:33.569
So there's mv, which stands for
move and it that make sense

108
00:07:33.569 --> 00:07:38.417
that it's called move but
for me, it's more rename.

109
00:07:38.417 --> 00:07:43.187
That's cuz I think of things more in terms
of like I want to rename this from this

110
00:07:43.187 --> 00:07:46.462
thing to this other thing,
and so you use mv for that.

111
00:07:46.462 --> 00:07:50.470
So I'm gonna move,
let's say I'm gonna move bye to,

112
00:07:56.100 --> 00:07:56.879
Something else.

113
00:07:58.711 --> 00:08:01.339
And so now you'll notice that
I don't have bye anymore,

114
00:08:01.339 --> 00:08:03.760
I've renamed the bye
directory to something else.

115
00:08:08.521 --> 00:08:10.740
And this works just as well for
files as well.

116
00:08:10.740 --> 00:08:14.952
So if I move destination
file to another file,

117
00:08:20.418 --> 00:08:21.596
There you go.

118
00:08:21.596 --> 00:08:23.380
So mv, that's another one to keep in mind.

119
00:08:26.573 --> 00:08:30.547
And then let's get into tar.

120
00:08:30.547 --> 00:08:33.411
So frequently, you wanna move
a bunch of files all at once,

121
00:08:33.411 --> 00:08:35.990
whether that's like uploading
a file to the server or

122
00:08:35.990 --> 00:08:38.416
really anything that you
would use a zip file for.

123
00:08:38.416 --> 00:08:42.264
Linux has a file format called tar,

124
00:08:42.264 --> 00:08:46.375
which is kind of similar to zip files.

125
00:08:46.375 --> 00:08:48.390
Zip files are inherently compressed,

126
00:08:48.390 --> 00:08:51.634
whereas a tar file is not
necessarily inherently compressed.

127
00:08:51.634 --> 00:08:55.159
A tar file can just be a bunch
of files kind of glob together

128
00:08:55.159 --> 00:08:57.514
that's meant to be extracted later.

129
00:08:57.514 --> 00:09:02.267
And yeah,

130
00:09:04.561 --> 00:09:07.441
Tar is one of those things
that I always have to look up

131
00:09:07.441 --> 00:09:10.523
cuz I can never remember all
the flags that I need for it.

132
00:09:10.523 --> 00:09:14.811
But let's just make a directory,
call it folder1.

133
00:09:14.811 --> 00:09:21.661
I'm gonna go and type to folder1 and
I'm going to make a bunch of files.

134
00:09:21.661 --> 00:09:26.648
So I'm gonna touch file1, file1.txt,

135
00:09:26.648 --> 00:09:31.917
file2.txt, file3.txt, file4.txt.

136
00:09:31.917 --> 00:09:38.422
That's the thing about touches,
you can use them many times at once.

137
00:09:40.748 --> 00:09:47.008
Okay, so
now I have multiple files in here, And

138
00:09:47.008 --> 00:09:51.999
let's say I have folder1 and
txt file that I wanted

139
00:09:51.999 --> 00:09:57.003
to put into one file so
that I can move them, right?

140
00:09:57.003 --> 00:10:00.405
I can move them from this computer to
this computer or something like that.

141
00:10:00.405 --> 00:10:06.933
I can do tar -cf archive or
whatever you wanna call it .tar,

142
00:10:06.933 --> 00:10:10.901
and I'm gonna add textfile.txt and

143
00:10:10.901 --> 00:10:14.870
I am gonna add folder1 to it as well.

144
00:10:18.740 --> 00:10:23.264
And now if you look in here,
I have this archive.tar and

145
00:10:23.264 --> 00:10:27.596
it is 12 kilobytes and
that's because I put three 4

146
00:10:27.596 --> 00:10:32.238
kilobyte files into it, so
it is one 12 kilobyte file.

147
00:10:32.238 --> 00:10:39.327
So I did see an f and that puts
all the things into a single file.

148
00:10:39.327 --> 00:10:41.363
However, it's not compressed, right?

149
00:10:41.363 --> 00:10:45.845
So for the most part,
when you put things into an archive,

150
00:10:45.845 --> 00:10:49.606
you want them to be compressed so
it's smaller.

151
00:10:49.606 --> 00:10:53.731
The trade off being that you have
to process it so it's small, but

152
00:10:53.731 --> 00:10:55.764
at this point, that's cheap.

153
00:10:55.764 --> 00:10:57.056
You always wanna compress your files.

154
00:10:57.056 --> 00:11:02.325
So if I do the same command, and I'm
gonna put a z at the end of this, so cfz,

155
00:11:02.325 --> 00:11:07.546
and then at the end of the tar,
I'm gonna put .gz, that stands for gzip.

156
00:11:07.546 --> 00:11:11.986
So sometimes, these flags are important
and what order you get them as well.

157
00:11:11.986 --> 00:11:15.126
So in this particular case,
I had to get the z flag first.

158
00:11:15.126 --> 00:11:18.448
But now, if I go look at,
I have archive.tar,

159
00:11:18.448 --> 00:11:23.265
this one has not been compressed,
12 kilobytes, and then this one

160
00:11:23.265 --> 00:11:29.023
archive.tar.gz has been compressed,
and you can see that it's 4 kilobytes.

161
00:11:29.023 --> 00:11:34.015
So in other words, as you can see here,
I can never remember all the flags and

162
00:11:34.015 --> 00:11:37.058
what order they're supposed to go in for
tar.

163
00:11:37.058 --> 00:11:38.511
So I always have to look this up.

164
00:11:38.511 --> 00:11:43.710
But now I have this tar file, and
I can extract it whenever I want.

165
00:11:43.710 --> 00:11:49.188
So I'm gonna, oops, make a directory here,

166
00:11:49.188 --> 00:11:57.764
extracted, and I'm gonna move my
archive.gz into extracted, okay?

167
00:11:57.764 --> 00:12:05.167
So now, I'm gonna go into extracted and

168
00:12:05.167 --> 00:12:09.957
I'm gonna say tar -xcf,

169
00:12:09.957 --> 00:12:16.290
the archive file and some folder.

170
00:12:22.350 --> 00:12:24.236
This part needs to be first.

171
00:12:33.345 --> 00:12:34.593
What went on with this?

172
00:12:34.593 --> 00:12:37.689
So I have my archive file,

173
00:12:45.670 --> 00:12:54.463
-c into destination, Mkdir destination.

174
00:13:00.236 --> 00:13:04.435
Okay, again, this is a tool that I
always have to fight with cuz there's so

175
00:13:04.435 --> 00:13:08.299
many files and you have to get them
all right, so I had to do tar -xzf,

176
00:13:08.299 --> 00:13:10.787
this is how you extract an archive, right?

177
00:13:10.787 --> 00:13:14.487
And you have to tell which archive to
extract and then you have to do a -C to

178
00:13:14.487 --> 00:13:17.592
let you know a destination and
the destination has to exist.

179
00:13:17.592 --> 00:13:19.577
If it doesn't exist,
it will not create it for you.

180
00:13:19.577 --> 00:13:23.001
But now if you look inside
the destination, you can see

181
00:13:23.001 --> 00:13:27.933
that I have the folder there, the text
file and it's all there and ready to go.

182
00:13:30.781 --> 00:13:33.465
So again, why tars are useful.

183
00:13:33.465 --> 00:13:36.385
It's the same reason that you
would ever use a zip file, whether

184
00:13:36.385 --> 00:13:39.861
that's to compress a bunch of files
down into one archive that you can move.

185
00:13:39.861 --> 00:13:42.807
Or if you just need to zip something for
some reason, and

186
00:13:42.807 --> 00:13:50.220
then you can use both the tar, Command
to also extract these archives as well.

187
00:13:50.220 --> 00:13:54.827
So that's more or less what you need to do
to interact with various different files.

188
00:13:58.663 --> 00:13:59.475
It's a lot of touching.

189
00:13:59.475 --> 00:14:01.090
It's a lot of cat.

190
00:14:01.090 --> 00:14:05.299
It's a lot of, I know, touching,
you can touch all the files.

191
00:14:08.271 --> 00:14:12.113
There's a lot of,
I'm not even gonna go there.

192
00:14:12.113 --> 00:14:14.842
But there's a lot of jokes that people
like to make about various different

193
00:14:14.842 --> 00:14:16.618
command line tools and
how to use them together,

194
00:14:16.618 --> 00:14:17.933
none of which I'm going to repeat.

