WEBVTT

1
00:00:00.000 --> 00:00:03.844
So a conditional is another fancy way
of saying an if statement, right?

2
00:00:03.844 --> 00:00:11.067
So if this is true, do this,
if this is false, then do this, right?

3
00:00:11.067 --> 00:00:16.475
So let's go back and edit our vi
file again, or our gen_files again.

4
00:00:19.505 --> 00:00:23.528
So the first thing I want to do, I want to
make sure that the user gave an argument,

5
00:00:23.528 --> 00:00:27.494
if they didn't give an argument then I
wanted to error out because then we don't

6
00:00:27.494 --> 00:00:29.647
have enough information to run a program.

7
00:00:29.647 --> 00:00:35.327
So what we're gonna do under this,
right here,

8
00:00:35.327 --> 00:00:41.975
the first before we read destination for
the first time,

9
00:00:41.975 --> 00:00:46.823
we're gonna do if then square bracket -z

10
00:00:46.823 --> 00:00:52.517
$DESTINATION like that,
and square bracket.

11
00:00:52.517 --> 00:00:56.969
Then you have to put a ; then and

12
00:00:56.969 --> 00:01:03.492
then we're gonna say
echo No path provided,

13
00:01:05.959 --> 00:01:09.683
Defaulting to ~/temp.

14
00:01:15.099 --> 00:01:21.657
And we're going to say DESTINATION=temp.

15
00:01:21.657 --> 00:01:26.055
And then you say, this is
the funniest thing to me about bash,

16
00:01:26.055 --> 00:01:32.163
when you're finishing an if statement,
you say fi, which is if backwards, right?

17
00:01:32.163 --> 00:01:34.638
And it's like that for all of them.

18
00:01:34.638 --> 00:01:39.028
Note the way that you finish case
statements is with E-S-A-C, right?

19
00:01:39.028 --> 00:01:40.169
So you just reverse it.

20
00:01:40.169 --> 00:01:43.063
I don't know why they did that,
if they thought they were clever or

21
00:01:43.063 --> 00:01:45.194
something like that, but
that's the way it is.

22
00:01:45.194 --> 00:01:49.871
So let's break this down for just
a second because this should work as is.

23
00:01:49.871 --> 00:01:52.169
So, inside of this if statement,

24
00:01:52.169 --> 00:01:56.229
there's a bunch of different
flags you can provide to this.

25
00:01:56.229 --> 00:02:00.382
The -z flag is this string is empty.

26
00:02:00.382 --> 00:02:04.997
So if DESTINATION is an empty string,
then it's gonna say no path provided,

27
00:02:04.997 --> 00:02:08.910
defaulting to ~/temp and
it sets DESTINATION to temp, right?

28
00:02:08.910 --> 00:02:10.288
And then it finishes.

29
00:02:12.889 --> 00:02:16.144
Does that make sense?

30
00:02:16.144 --> 00:02:21.001
This is kind of a weird, the way this
works, so if you put square brackets here,

31
00:02:21.001 --> 00:02:25.426
what it's actually doing is it's
rearranging what you put in there into

32
00:02:25.426 --> 00:02:26.603
a test statement.

33
00:02:26.603 --> 00:02:29.817
So let me show you what I mean.

34
00:02:29.817 --> 00:02:34.163
What this is actually running
underneath the hood is test -z and

35
00:02:34.163 --> 00:02:37.393
then I'll just put like
an empty string there.

36
00:02:37.393 --> 00:02:41.039
And then I can say echo $?.

37
00:02:41.039 --> 00:02:45.797
And this is either returning 0 or 1, so
it's actually invoking a command and

38
00:02:45.797 --> 00:02:48.405
then it's checking the status code of it.

39
00:02:48.405 --> 00:02:51.936
So if I come in here and
say lol and then I echo that again,

40
00:02:51.936 --> 00:02:56.842
you can see that this actually returns
1 now because it's not true, right?

41
00:02:56.842 --> 00:03:00.392
So test -z lol, that is a real statement.

42
00:03:00.392 --> 00:03:05.256
It's not an empty string, so
this is going to return false, which is 1.

43
00:03:05.256 --> 00:03:09.455
Now the reason why that's useful for
you to know is if I say test --help,

44
00:03:09.455 --> 00:03:11.893
or actually you have
to do man test rather,

45
00:03:11.893 --> 00:03:16.324
this will give you everything that you
need to know about these expressions.

46
00:03:16.324 --> 00:03:20.240
So you can test equals,
you can test empty strings,

47
00:03:20.240 --> 00:03:23.800
you can test if something is empty or
not empty.

48
00:03:23.800 --> 00:03:28.745
You can see if they're equal or
not equal, there's a bunch of stuff and

49
00:03:28.745 --> 00:03:30.321
it's all using test.

50
00:03:30.321 --> 00:03:34.966
So the way that you can remember
all these different things is all

51
00:03:34.966 --> 00:03:37.383
you have to do is man test, okay?

52
00:03:37.383 --> 00:03:42.732
So if we go back to our file here,
that's what these square brackets is doing

53
00:03:42.732 --> 00:03:48.101
is bash, underneath the hood, is
rearranging this to be a test statement.

54
00:03:48.101 --> 00:03:53.759
So this is useful for me to know because
then I can say test -samples -z and

55
00:03:53.759 --> 00:03:58.158
I can test things before I put
them into my if statements.

56
00:03:58.158 --> 00:03:59.963
Does that make sense?

57
00:03:59.963 --> 00:04:04.331
It's just some,
you would call syntax sugar, right?

58
00:04:04.331 --> 00:04:09.531
This is syntax sugar for testings.

59
00:04:09.531 --> 00:04:15.067
And that's what those square brackets
with the semicolon at the end means.

60
00:04:17.957 --> 00:04:20.158
Okay, cool.

61
00:04:20.158 --> 00:04:21.095
So let's test it.

62
00:04:21.095 --> 00:04:23.492
I mean, let's make sure that
I'm not just making stuff up,

63
00:04:23.492 --> 00:04:25.289
high probability that
I do things like that.

64
00:04:25.289 --> 00:04:26.717
So if I say gen_files.

65
00:04:29.851 --> 00:04:33.637
So it says no path provided here,
default into ~/temp,

66
00:04:33.637 --> 00:04:36.495
and if I go look inside
of my temp directory,

67
00:04:36.495 --> 00:04:41.007
you can see here that I have all
the lol files that I was talking about.

68
00:04:41.007 --> 00:04:45.419
So just to show you a couple more of these
cuz you probably will want to know them.

69
00:04:45.419 --> 00:04:49.913
You can say test

70
00:04:49.913 --> 00:04:54.757
15 -= 15.

71
00:04:57.354 --> 00:05:02.488
Probably the way to do this is test 15 =,
yeah.

72
00:05:02.488 --> 00:05:08.569
And then we'll do echo $?, right?

73
00:05:08.569 --> 00:05:10.699
So, 15 is equal to 15, right?

74
00:05:10.699 --> 00:05:15.419
So that returns 0 which
means that that is a true

75
00:05:15.419 --> 00:05:20.711
statement And
you can see there, that's one.

76
00:05:20.711 --> 00:05:24.814
I guess another way to do
this is &amp;&amp; echo is true,

77
00:05:24.814 --> 00:05:30.678
which this won't run because it's not
true but if I come back in here and

78
00:05:30.678 --> 00:05:36.388
say 15, it will echo is true because
it is right, that make sense?

79
00:05:39.050 --> 00:05:43.516
Then, so this is how you
do numbers with this equal.

80
00:05:43.516 --> 00:05:46.863
But if I want to do strings,
you can use an equal sign.

81
00:05:46.863 --> 00:05:51.902
So Brian = Brian, that's true.

82
00:05:51.902 --> 00:05:56.621
But if you say Brian = Mark, not true.

83
00:05:59.279 --> 00:06:04.188
And a couple more of these,
there is greater than so

84
00:06:04.188 --> 00:06:08.995
if I do 15 -gt 10, is 15 greater than 10?

85
00:06:08.995 --> 00:06:11.637
Yep.

86
00:06:11.637 --> 00:06:14.946
As you might imagine, lt is less than.

87
00:06:14.946 --> 00:06:19.837
There's also ge which I think is
greater than or equal to, right?

88
00:06:19.837 --> 00:06:21.496
As is there le.

89
00:06:23.972 --> 00:06:28.522
Another one that's really useful
that I end up using is -e.

90
00:06:30.380 --> 00:06:33.399
Which tests if a file exists.

91
00:06:33.399 --> 00:06:37.652
So if I put like, output.txt,
which I'm pretty sure exists, right?

92
00:06:37.652 --> 00:06:41.348
So that file exists so we can test to see,
does that file exist that's

93
00:06:41.348 --> 00:06:45.646
often useful is like do I need to create
this file to check if something's in it.

94
00:06:45.646 --> 00:06:50.043
Whereas if I put it in like made-up,
that doesn't exist, so

95
00:06:50.043 --> 00:06:52.759
it doesn't echo it's true, right?

96
00:06:52.759 --> 00:06:54.472
So that's super useful.

97
00:06:56.091 --> 00:07:02.524
Another one that's useful too is -w.

98
00:07:02.524 --> 00:07:07.566
So if I put output.txt there,
-w checks to see does that file exist,

99
00:07:07.566 --> 00:07:10.566
and can I write to it
as this current user?

100
00:07:10.566 --> 00:07:16.359
Whereas if I check like when I
wouldn't be able to write to /bin /LS,

101
00:07:16.359 --> 00:07:20.679
that's not going to be true
because it does exist but

102
00:07:20.679 --> 00:07:24.229
I can't, as Ubuntu, write to that file.

103
00:07:24.229 --> 00:07:28.198
So and again, just check out man tests,
there's a bunch more, but I just wanted to

104
00:07:28.198 --> 00:07:31.907
show you some of the more common ones
that you'll probably end up having to use

