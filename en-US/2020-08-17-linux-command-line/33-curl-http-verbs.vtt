WEBVTT

1
00:00:00.000 --> 00:00:02.969
I wanna show you now,
we can come back over to our primary.

2
00:00:02.969 --> 00:00:07.794
If you want to, we'll just do this,
I'll separate this out into

3
00:00:07.794 --> 00:00:12.469
two different terminals so
you can kinda see them side by side.

4
00:00:17.764 --> 00:00:20.356
This is one reason I do
like Windows Snap Manager.

5
00:00:20.356 --> 00:00:22.703
So you drag it to the side and
it snaps to the side.

6
00:00:22.703 --> 00:00:29.636
I think you can do that as well with Mac,
I'm too lazy to have enabled it.

7
00:00:29.636 --> 00:00:34.613
So now I can come over here and
I can say curl that address,

8
00:00:34.613 --> 00:00:38.574
put http in front of it, ://:8000.

9
00:00:38.574 --> 00:00:41.509
And if I do that, you can see here,

10
00:00:41.509 --> 00:00:47.094
it sends me back that same HTML
document that I got in the browser.

11
00:00:47.094 --> 00:00:51.190
And you can see it hitting here,
and it looks pretty much the same.

12
00:00:51.190 --> 00:00:56.160
The only thing that changed is the IP
address, .the 1 is the host machine,

13
00:00:56.160 --> 00:00:59.357
right, my Mac, and
the .2 is itself, right?

14
00:00:59.357 --> 00:01:01.023
So this is actually
requesting against itself.

15
00:01:03.656 --> 00:01:06.668
And then it's doing it over HTTP 1.1 200,
right,

16
00:01:06.668 --> 00:01:09.071
everything else looks relatively the same.

17
00:01:13.006 --> 00:01:16.776
So again, this is just putting
it out to standard out, right?

18
00:01:16.776 --> 00:01:20.084
But if I say the same thing, and

19
00:01:20.084 --> 00:01:25.184
I put that into res.txt,
does the same thing.

20
00:01:25.184 --> 00:01:30.358
You can see the request happened over
here, but now it goes into res.txt, right?

21
00:01:30.358 --> 00:01:35.605
So that's how you would do that same
sort of wget sort of behavior, right?

22
00:01:39.279 --> 00:01:46.252
And another way to do that, You can
also just do dash, I think capital O?

23
00:01:46.252 --> 00:01:51.156
Yeah -O res2.txt.

24
00:01:54.312 --> 00:01:55.673
And you can see here I now have.

25
00:01:58.846 --> 00:02:02.055
Did that not work?

26
00:02:02.055 --> 00:02:02.999
It didn't, was it lowercase o?

27
00:02:06.045 --> 00:02:12.914
Yeah, okay, sorry res lowercase o,
that'll output it to res.txt.

28
00:02:12.914 --> 00:02:17.192
So that way you don't have to pipe it,
it just ends up in that file.

29
00:02:17.192 --> 00:02:23.075
And then if I do -O with no file name,
it'll just keep the same file name.

30
00:02:23.075 --> 00:02:28.295
So let's say I was doing
it to /output.txt.

31
00:02:32.166 --> 00:02:33.870
You can see here,
it actually overwrote it.

32
00:02:33.870 --> 00:02:37.617
Cuz it's requesting from
the same directory, right?

33
00:02:37.617 --> 00:02:43.037
You can see here it hit output.txt,
it got a 200, so on and so forth.

34
00:02:46.262 --> 00:02:47.198
Good so far, make sense?

35
00:02:47.198 --> 00:02:48.675
All right.

36
00:02:48.675 --> 00:02:52.769
So let's say I'm doing an API endpoint,
and

37
00:02:52.769 --> 00:02:57.413
it's something you need to POST against,
right?

38
00:02:57.413 --> 00:03:01.788
Well, that's really easy
to do just to curl -X POST.

39
00:03:01.788 --> 00:03:04.841
And this changes the HTTP verb.

40
00:03:04.841 --> 00:03:08.301
If you're not from the HTTP verbs,
just go look it up on the Wikipedia,

41
00:03:08.301 --> 00:03:10.215
the Wikipedia article is great for it.

42
00:03:10.215 --> 00:03:13.516
But there's GET, we've been doing
GET requests this entire time.

43
00:03:13.516 --> 00:03:16.274
There's POST requests, PUT requests,

44
00:03:16.274 --> 00:03:21.098
PATCH requests, DELETE request,
OPTIONS requests, HEAD requests.

45
00:03:21.098 --> 00:03:23.988
And there's more, but those
are the primary ones you would ever see.

46
00:03:23.988 --> 00:03:28.218
But anyway, you can do curl -X, and then
you can put whatever verb you want there.

47
00:03:28.218 --> 00:03:32.964
You can even do made up verb, and
it's like, okay, I can do that.

48
00:03:32.964 --> 00:03:35.312
I don't know what it does,
but you can totally do that.

49
00:03:35.312 --> 00:03:36.859
Let's do POST for right now.

50
00:03:36.859 --> 00:03:42.601
And then against the same http:,

51
00:03:42.601 --> 00:03:51.711
what is it, 192.168.64.2:8000.

52
00:03:57.831 --> 00:03:59.862
And you can see here it
actually responds with HTML,

53
00:03:59.862 --> 00:04:02.509
it says we don't know what to do
with a POST, which is fine, right?

54
00:04:02.509 --> 00:04:04.668
We don't expect Python to
be able to deal with it.

55
00:04:04.668 --> 00:04:10.162
But you can see over here,
we were doing a GET request before, right?

56
00:04:10.162 --> 00:04:12.137
And here,
it's now changed to a POST request, right?

57
00:04:12.137 --> 00:04:18.683
And in this case, it gave you a 501, 501s
mean that there was a server error, right?

58
00:04:18.683 --> 00:04:21.152
In this particular case,
the server's like,

59
00:04:21.152 --> 00:04:24.806
I don't know what to do with POST
requests,so you messed up, right?

60
00:04:28.712 --> 00:04:29.407
Okay.

61
00:04:34.348 --> 00:04:35.395
Good so far, make sense?

62
00:04:35.395 --> 00:04:39.536
All right, so let's move on the next one.

63
00:04:42.066 --> 00:04:43.453
Let's say you wanna send a POST body.

64
00:04:43.453 --> 00:04:48.623
So if I do dash -d, and
then here I can say,

65
00:04:48.623 --> 00:04:51.369
this is the post body.

66
00:04:51.369 --> 00:04:55.232
And I send that across here,
notice that this is still a POST request.

67
00:04:55.232 --> 00:05:01.625
And it's a POST request because GET
requests don't have bodies, right?

68
00:05:01.625 --> 00:05:03.423
So put only POST requests have bodies.

69
00:05:03.423 --> 00:05:06.676
And so implicitly by giving it a body,
it's like, okay, cool,

70
00:05:06.676 --> 00:05:08.522
I'm gonna make this a POST request.

71
00:05:08.522 --> 00:05:11.606
So yeah, just know if you do
a lowercase d like this and

72
00:05:11.606 --> 00:05:15.602
you send a POST body along with it,
it's gonna implicitly do a POST.

73
00:05:15.602 --> 00:05:18.997
If you wanted to,
you can do a -X PUT here.

74
00:05:18.997 --> 00:05:22.074
And you can see, it'll send that along.

75
00:05:22.074 --> 00:05:25.559
It is a PUT request, but it's also
sending a body with it as well, right?

76
00:05:25.559 --> 00:05:27.957
So you can kind of mix and
match those options as you need to.

77
00:05:33.222 --> 00:05:37.542
And yeah, I mean, you can come in here and
you can do wherever you want.

78
00:05:37.542 --> 00:05:40.808
I can do curl -X DELETE.

79
00:05:43.320 --> 00:05:44.436
Do I have that here?

80
00:05:44.436 --> 00:05:45.129
Good.

81
00:05:51.514 --> 00:05:55.130
Let me just copy that so that I don't have
to keep writing it every single time.

82
00:05:55.130 --> 00:05:57.000
You can see there DELETE work.

83
00:05:57.000 --> 00:06:02.204
And again, just to prove my point
is you can put LOL_ANYTHING here,

84
00:06:02.204 --> 00:06:04.817
and it'll go ahead and send that.

85
00:06:04.817 --> 00:06:07.786
And it'll show up here as
an HTTP verb over there.

86
00:06:07.786 --> 00:06:10.790
So hopefully you're starting to
see this can be really useful for

87
00:06:10.790 --> 00:06:11.834
testing out your API.

88
00:06:11.834 --> 00:06:15.685
So you don't have to have some
sort of fancy Postman client or

89
00:06:15.685 --> 00:06:18.489
anything like that, you can just use curl.

90
00:06:20.766 --> 00:06:25.095
Another thing that's really common is you
need to send cookies with it as well.

91
00:06:25.095 --> 00:06:27.284
That's something you can
definitely do here as well.

92
00:06:27.284 --> 00:06:31.750
You can say curl -b, and
you say "name=brian", and

93
00:06:31.750 --> 00:06:34.136
that will be sent as a cookie.

94
00:06:34.136 --> 00:06:36.801
And I can then add like -X PATCH.

95
00:06:40.002 --> 00:06:43.122
And this doesn't show it here, but

96
00:06:43.122 --> 00:06:48.532
it's also sending whatever I put
in the -b as a cookie along.

97
00:06:51.028 --> 00:06:53.502
Something I'll frequently do is
I'll actually go start a session in

98
00:06:53.502 --> 00:06:54.879
the browser, get all my cookies set.

99
00:06:54.879 --> 00:06:58.551
I will then copy everything that the
browser's outputting for those cookies,

100
00:06:58.551 --> 00:07:00.101
and then I'll put it into a file.

101
00:07:00.101 --> 00:07:02.535
And then you can use something
called a cookie jar.

102
00:07:02.535 --> 00:07:05.617
Not making this up,
that's actually what it's called.

103
00:07:05.617 --> 00:07:07.530
And I think it's -B.

104
00:07:11.073 --> 00:07:14.418
You can see here curl has an enormous
amount of options as well.

105
00:07:14.418 --> 00:07:20.347
So one of these in here,
so that's cookie, it's -c.

106
00:07:20.347 --> 00:07:22.780
So if you put -c,
you can give it a cookie jar file,

107
00:07:22.780 --> 00:07:26.185
which is just a file that contains
all of your cookie information in it.

108
00:07:26.185 --> 00:07:29.586
Cuz normally you have long things that
have session IDs and stuff like that.

109
00:07:32.319 --> 00:07:33.238
So that's useful to do as well.

110
00:07:35.772 --> 00:07:37.901
And yeah, cool.

111
00:07:37.901 --> 00:07:41.559
You can have it follow redirects.

112
00:07:41.559 --> 00:07:44.661
By default, curl won't follow redirects.

113
00:07:44.661 --> 00:07:46.744
So I have a short link for

114
00:07:46.744 --> 00:07:52.475
this course that if you go
to https://bit.ly/linux-cli,

115
00:07:52.475 --> 00:07:58.842
it's gonna say this file is actually
a redirect that goes here, right?

116
00:07:58.842 --> 00:08:06.136
And it's also sending, I think that's
gonna be probably a 302 redirect.

117
00:08:06.136 --> 00:08:13.036
So if you give it a -L,
it'll follow the redirect.

118
00:08:13.036 --> 00:08:16.926
You can see now if I put the -L,
it actually sends literally everything for

119
00:08:16.926 --> 00:08:19.041
that course website along for the ride.

120
00:08:23.631 --> 00:08:25.336
Typically, that's not
something you have to do, but

121
00:08:25.336 --> 00:08:26.980
it's good to know that it
won't follow redirects.

122
00:08:26.980 --> 00:08:29.054
You have to tell it, yes,
I do want you to follow the redirects.

123
00:08:32.592 --> 00:08:34.433
You can send headers as well.

124
00:08:34.433 --> 00:08:42.113
So curl -H "accept-language:

125
00:08:42.113 --> 00:08:44.766
EN-US".

126
00:08:44.766 --> 00:08:48.629
And if you wanna send multiple headers,
you just give multiple -Hs.

127
00:08:48.629 --> 00:08:55.455
So you could give it like
an Authorization header Bearer: 12345.

128
00:08:57.602 --> 00:09:00.495
Http:, yeah.

129
00:09:03.024 --> 00:09:06.232
Okay, and
that's how you would send this here,

130
00:09:06.232 --> 00:09:09.295
just use capital H
multiple different times.

131
00:09:11.925 --> 00:09:16.598
And then I'm gonna show you something that
this is probably one of the things I do

132
00:09:16.598 --> 00:09:17.244
the most.

133
00:09:17.244 --> 00:09:19.794
So let's say I come back
over here to my browser.

134
00:09:19.794 --> 00:09:24.567
And let's just go to my website,

135
00:09:24.567 --> 00:09:28.491
so bit-ly, this is fine.

136
00:09:28.491 --> 00:09:31.767
Okay, so this is in Firefox,
what I'm showing you right now, but

137
00:09:31.767 --> 00:09:34.235
this will work in Chrome,
this will work in Edge.

138
00:09:34.235 --> 00:09:37.202
And I imagine all of you
are using at least one of those.

139
00:09:37.202 --> 00:09:39.937
I imagine it works in Safari,
I honestly didn't check.

140
00:09:39.937 --> 00:09:44.334
Okay, so
I'm gonna come in here to the Dev Tools,

141
00:09:44.334 --> 00:09:47.698
which I opened with Cmd+Option+I.

142
00:09:47.698 --> 00:09:50.152
And I'm gonna refresh the page here so

143
00:09:50.152 --> 00:09:53.150
I can find all of the network
requests in here.

144
00:09:53.150 --> 00:09:59.054
And let's say I wanted to get this one,
right?

145
00:09:59.054 --> 00:10:01.415
So I'll click on this network request.

146
00:10:01.415 --> 00:10:06.202
You can right-click on it, and
you can say Copy as cURL in here.

147
00:10:08.667 --> 00:10:12.162
And again, I checked this with Edge and
Chrome, and

148
00:10:12.162 --> 00:10:14.634
it should work exactly the same way.

149
00:10:14.634 --> 00:10:16.501
So Copy as cURL, okay?

150
00:10:16.501 --> 00:10:19.919
So I'm gonna click that,
and then I'm going to open,

151
00:10:23.760 --> 00:10:25.754
This again, and
then I'm just going to paste.

152
00:10:25.754 --> 00:10:29.660
And you can see here it copies this
as a perfectly formed curl request.

153
00:10:29.660 --> 00:10:33.442
So imagine that you're on your website,
and you're browsing around, and

154
00:10:33.442 --> 00:10:36.584
one of your network requests
doesn't work the way you expect.

155
00:10:36.584 --> 00:10:39.492
You can just right-click, copy that as
curl, and then you can replay it again and

156
00:10:39.492 --> 00:10:40.599
again from your command line.

157
00:10:40.599 --> 00:10:44.611
So you can see it's sending
to the same URL -H,

158
00:10:44.611 --> 00:10:50.743
we know that that's a header, so
it's giving it the same User-Agent.

159
00:10:50.743 --> 00:10:53.218
This is the same Accept header,
Accept-Language,

160
00:10:53.218 --> 00:10:55.145
it's sending it as compressed, right?

161
00:10:55.145 --> 00:10:58.288
So it's gonna actually compress it and
GZIP it,

162
00:10:58.288 --> 00:11:01.670
Connection: keep-alive,
and some other stuff.

163
00:11:01.670 --> 00:11:04.567
And also,
if you do it with a POST request,

164
00:11:04.567 --> 00:11:09.566
it'll copy all of the request body and
the verbs and all that kinda stuff.

165
00:11:09.566 --> 00:11:14.269
So now if I run this again, you'll see
that it gets the exact same request,

166
00:11:14.269 --> 00:11:14.800
right?

167
00:11:14.800 --> 00:11:19.738
So again, this is super useful if you have
something not working the way that you

168
00:11:19.738 --> 00:11:24.174
anticipated, you can go and copy it and
run it over and again and again.

169
00:11:24.174 --> 00:11:25.689
Does it makes sense?

170
00:11:25.689 --> 00:11:27.630
It's cool.

171
00:11:27.630 --> 00:11:30.071
Again, honestly,
if you're a web developer,

172
00:11:30.071 --> 00:11:33.056
that might be one of the most
useful things I tell you today.

173
00:11:36.860 --> 00:11:37.940
All right, and

174
00:11:37.940 --> 00:11:42.855
then one more thing about curl that
I want you to be very careful about.

175
00:11:42.855 --> 00:11:50.371
So if you go to nvm, which is the tool
that I use for managing my Node version,

176
00:11:50.371 --> 00:11:55.432
and you go down to
the installation instructions,

177
00:12:01.051 --> 00:12:02.473
It has this right there.

178
00:12:02.473 --> 00:12:08.392
Let me make that a bit bigger so you can
see it, as the installation instructions.

179
00:12:08.392 --> 00:12:12.960
So you do a curl request, and then we
know what this is, this pipe, right?

180
00:12:12.960 --> 00:12:15.580
So this is going to feed
it into something right?

181
00:12:15.580 --> 00:12:17.318
And this is going to feed it into bash.

182
00:12:20.097 --> 00:12:22.393
Why does this maybe give
you a bit of pause?

183
00:12:22.393 --> 00:12:27.516
Cuz you need to really trust what
is ever in this file, right?

184
00:12:27.516 --> 00:12:29.598
So if I go look at this,

185
00:12:29.598 --> 00:12:35.647
it's a long Bash script that does
a lot of stuff to set up your nvm.

186
00:12:35.647 --> 00:12:39.848
Which is a great tool, it's what I use for
installing all of my Node stuff.

187
00:12:39.848 --> 00:12:44.689
But this is really scary, because whatever
goes into this, it's going to execute,

188
00:12:44.689 --> 00:12:47.530
and you don't actually
know what it's gonna do.

189
00:12:47.530 --> 00:12:50.563
So it could totally just dump all
of your environmental variables and

190
00:12:50.563 --> 00:12:53.610
send them off to a remote server,
and you would have no idea, right?

191
00:12:53.610 --> 00:12:57.977
So I just wanna give you a huge red
flag whenever you see pipe into Bash,

192
00:12:57.977 --> 00:13:00.881
that this could be very catastrophic for
you.

193
00:13:00.881 --> 00:13:04.943
Now, if you asked me well, Brian,
then how do I install nvm?

194
00:13:04.943 --> 00:13:07.867
It's like, I do this,
to be honest with you, I do this.

195
00:13:07.867 --> 00:13:11.475
Because I know that GitHub is not going
to replace it underneath the hood.

196
00:13:11.475 --> 00:13:12.989
I personally trust GitHub.

197
00:13:12.989 --> 00:13:15.407
I also work for
the parent company of GitHub, so

198
00:13:15.407 --> 00:13:19.468
if they did something nefarious, I would
be the first to be very upset about it.

199
00:13:19.468 --> 00:13:21.255
But if this is Joe's blog,

200
00:13:21.255 --> 00:13:26.331
I absolutely will not pipe anything from
a domain that I do not trust, right?

201
00:13:26.331 --> 00:13:31.058
So what you should
definitely do then in that

202
00:13:31.058 --> 00:13:35.401
particular case is you can come in here,

203
00:13:35.401 --> 00:13:41.432
you can say curl blah, and
into my-file.sh, right?

204
00:13:41.432 --> 00:13:46.807
And then I will run it from my-file.sh,
right?

205
00:13:46.807 --> 00:13:50.982
But this way I can verify that I got the
same file that I thought I was gonna get

206
00:13:50.982 --> 00:13:51.585
,right?

207
00:13:51.585 --> 00:13:54.971
Because again, the server can
be smart enough to tell that

208
00:13:54.971 --> 00:13:59.893
you are downloading something, and it can
switch the file underneath you, right?

209
00:13:59.893 --> 00:14:02.456
So you can open it in the browser,
it'll show you one thing.

210
00:14:02.456 --> 00:14:06.255
And then you can go to curl, and it will
change the file to be something else.

211
00:14:06.255 --> 00:14:11.970
It's actually even possible for it to
detect that you are curl into Bash, right?

212
00:14:11.970 --> 00:14:14.638
So it can actually detect that it's
being piped by the way that the network

213
00:14:14.638 --> 00:14:15.551
traffic looks, right?

214
00:14:15.551 --> 00:14:17.795
And I left an article down
at the bottom of the notes,

215
00:14:17.795 --> 00:14:19.328
it's really interesting to read.

216
00:14:19.328 --> 00:14:22.901
Of how you can actually detect not
only that you're curling it, but

217
00:14:22.901 --> 00:14:24.788
you're also curling it into Bash.

218
00:14:24.788 --> 00:14:30.226
And so they can only switch it when you're
doing curl Bash, which is wild, right?

219
00:14:30.226 --> 00:14:31.591
It's some crazy stuff.

220
00:14:31.591 --> 00:14:36.429
So suffice to say, curl it into a file,
read the file, then execute it.

221
00:14:36.429 --> 00:14:41.176
Unless you really trust, it's coming from
GitHub, it's coming from, I don't know,

222
00:14:41.176 --> 00:14:43.344
Stack Overflow or something like that.

223
00:14:43.344 --> 00:14:46.062
But in any case,
always read the file too, right?

224
00:14:46.062 --> 00:14:49.585
Okay, so
I just wanted to throw that out there.

225
00:14:49.585 --> 00:14:52.193
That's a really huge vulnerability

226
00:14:52.193 --> 00:14:56.828
that you're opening yourself up
to whenever you curl into Bash.

227
00:14:56.828 --> 00:14:59.405
&gt;&gt; Does the curl request
itself change when you pipe?

228
00:14:59.405 --> 00:15:02.574
&gt;&gt; That's a valid question.

229
00:15:02.574 --> 00:15:07.763
So does the curl request
itself change when it's piped?

230
00:15:07.763 --> 00:15:11.642
There's kind of two
answers to that question.

231
00:15:11.642 --> 00:15:18.031
99.999% of the time no, it doesn't.

232
00:15:18.031 --> 00:15:20.541
And it's just requesting something and

233
00:15:20.541 --> 00:15:25.205
then putting that into a stream that
can be read from or written to, right?

234
00:15:25.205 --> 00:15:28.220
As we have seen with other Linux programs.

235
00:15:28.220 --> 00:15:33.326
However, that article that I dropped at
the bottom of the notes will actually show

236
00:15:33.326 --> 00:15:38.440
you it's possible to detect the network
pattern of piping something using curl.

237
00:15:38.440 --> 00:15:41.370
And so it can actually
detect that on a server and

238
00:15:41.370 --> 00:15:43.943
switch the file out from underneath you.

239
00:15:43.943 --> 00:15:46.827
So it does have a distinct
network pattern, I guess,

240
00:15:46.827 --> 00:15:48.760
is the the answer to that question.

241
00:15:50.954 --> 00:15:54.713
But that requires some
real nefarious actions.

242
00:15:54.713 --> 00:16:00.541
And something like GitHub's
just not gonna do that to you.

