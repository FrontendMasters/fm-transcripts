WEBVTT

1
00:00:00.000 --> 00:00:02.183
Everything that I've been talking about so

2
00:00:02.183 --> 00:00:05.432
far has been specifically dealing
with going in and out to files.

3
00:00:05.432 --> 00:00:09.232
But what if you wanna go
from program to program?

4
00:00:09.232 --> 00:00:10.447
That's called a pipe, right?

5
00:00:10.447 --> 00:00:11.660
So we're piping one thing to another.

6
00:00:14.122 --> 00:00:18.937
So if I cat ls.txt, right,
this takes whatever is in ls.txt,

7
00:00:18.937 --> 00:00:22.516
and then it puts it onto the next thing,
right?

8
00:00:22.516 --> 00:00:26.063
But the next thing in this particular
case is just displaying, and so

9
00:00:26.063 --> 00:00:27.233
that's what it does.

10
00:00:27.233 --> 00:00:31.498
But let's say instead of,
How we did it before,

11
00:00:31.498 --> 00:00:34.829
I could say cat ls.txt and
I want to feed this into grep, right?

12
00:00:34.829 --> 00:00:39.595
So I can do pipe, which is that
vertical bar above your Enter key.

13
00:00:41.528 --> 00:00:45.922
And then I do grep "ls-error.txt".

14
00:00:48.393 --> 00:00:53.650
So this is taking the output
of cat ls.txt [COUGH] and

15
00:00:53.650 --> 00:01:00.261
then it's piping that into
grep "ls-error.txt", right?

16
00:01:04.248 --> 00:01:05.904
So this is connecting
cat together with grep.

17
00:01:05.904 --> 00:01:10.596
And you can pipe this as many times,
I can,

18
00:01:12.138 --> 00:01:16.500
I guess they're the same thing, but

19
00:01:16.500 --> 00:01:20.024
let's just echo hey into ls,

20
00:01:24.319 --> 00:01:28.587
.txt like this.

21
00:01:28.587 --> 00:01:35.909
And if I say cat ls.txt,
Then I have here down at the end.

22
00:01:35.909 --> 00:01:41.621
Now we have the ability to input
from one thing to another.

23
00:01:41.621 --> 00:01:42.925
So let me show you another little thing.

24
00:01:42.925 --> 00:01:44.142
We're gonna talk about
processes here in a little bit.

25
00:01:44.142 --> 00:01:52.464
But if you say ps aux,
This is running quite a bit.

26
00:01:52.464 --> 00:01:56.846
What this does is it outputs all of
the currently running processes on your

27
00:01:56.846 --> 00:01:59.470
computer, which you can
see is quite a lot.

28
00:02:02.840 --> 00:02:04.949
So what if I wanted to run this?

29
00:02:04.949 --> 00:02:12.351
And I only wanted to find the actual
process of finding itself, right?

30
00:02:12.351 --> 00:02:15.790
So if I say ps aux, all grep does
is it takes a list of text and

31
00:02:15.790 --> 00:02:17.346
finds something in that.

32
00:02:17.346 --> 00:02:23.402
So if I say grep for ps aux, it's going
to find the process of finding itself.

33
00:02:26.711 --> 00:02:31.759
So as you can see here, it found this one
right here, the process of finding itself.

34
00:02:31.759 --> 00:02:38.451
And then it also found the grep,
which is it took the input as ps aux.

35
00:02:38.451 --> 00:02:41.884
So that's what this is doing
is it's taking ps aux,

36
00:02:41.884 --> 00:02:47.204
this super long wall of text and then it's
feeding that into grep to find things.

37
00:02:47.204 --> 00:02:50.916
So you'll find that grep is frequently one
of the things you're gonna be piping into

38
00:02:50.916 --> 00:02:54.751
because you'll get 10,000 lines of text
and you wanna find two of them, right?

39
00:02:54.751 --> 00:02:56.739
I find myself frequently grepping for

40
00:02:56.739 --> 00:02:59.479
Node .js because I wanna kill the process,
right?

41
00:02:59.479 --> 00:03:01.544
And that's a really good way of doing it.

42
00:03:05.248 --> 00:03:11.356
So actually, a really good way of
demonstrating this is that yes program.

43
00:03:11.356 --> 00:03:15.418
So let's say I have yes and

44
00:03:15.418 --> 00:03:20.782
I pipe the output to /dev/null.

45
00:03:20.782 --> 00:03:21.949
And then we'll talk about
this in a little bit.

46
00:03:21.949 --> 00:03:23.766
But if you put this
ampersand in the background,

47
00:03:23.766 --> 00:03:26.532
it means it's running in the background,
don't run in the foreground.

48
00:03:26.532 --> 00:03:30.671
And so now I have process here, 1224.

49
00:03:32.224 --> 00:03:34.045
But now I just have that yes
running in the background and

50
00:03:34.045 --> 00:03:35.732
it's not doing anything
other than just running.

51
00:03:35.732 --> 00:03:42.196
If I say ps aux,
this is an overwhelming wall of text.

52
00:03:42.196 --> 00:03:43.288
Luckily, this is here.

53
00:03:43.288 --> 00:03:46.744
But if you're running
a real production server,

54
00:03:46.744 --> 00:03:50.871
you can have thousands and
tens of thousands of processes.

55
00:03:50.871 --> 00:03:52.111
It can be pretty difficult to find things.

56
00:03:52.111 --> 00:03:57.622
So if I say ps aux and then I grep for
yes, I'll find it immediately,

57
00:03:57.622 --> 00:04:00.838
and I found the process id right there.

58
00:04:00.838 --> 00:04:06.116
So that's a time that I use the piping
a lot is to try and find rogue processes.

59
00:04:06.116 --> 00:04:12.011
And then we can use our kill skills
that we found before, kill -9 yes,

60
00:04:12.011 --> 00:04:17.133
or not yes, but 1224,
which is this number right there.

61
00:04:19.715 --> 00:04:20.488
And there you go.

62
00:04:20.488 --> 00:04:23.667
Now if I run ps aux grep "yes",
you'll find it didn't find anything and

63
00:04:23.667 --> 00:04:27.174
it also just lets you know, it's like,
by the way, I killed this just now.

64
00:04:37.487 --> 00:04:39.995
Or let's do something kind of fun here.

65
00:04:39.995 --> 00:04:42.777
Let's go into, what was it, folder3.

66
00:04:46.923 --> 00:04:48.955
So in here, I have a lot of files.

67
00:04:48.955 --> 00:04:55.097
And let's say I wanted to delete
all of them, but you can do rm -i,

68
00:04:55.097 --> 00:05:00.272
which is going to force it to
ask you yes or no questions.

69
00:05:00.272 --> 00:05:02.337
Yes, I wanna remove all these.

70
00:05:02.337 --> 00:05:05.864
And I do file*, like this.

71
00:05:05.864 --> 00:05:07.508
It's like,
do you wanna remove file cool.txt?

72
00:05:07.508 --> 00:05:11.951
Yes, do you wanna remove file1?

73
00:05:11.951 --> 00:05:13.498
Yes, do you wanna file10?

74
00:05:13.498 --> 00:05:16.533
No, I'm gonna hit Ctrl+C, I wanna exit.

75
00:05:16.533 --> 00:05:17.656
I don't wanna do that, right?

76
00:05:17.656 --> 00:05:21.357
So this is what I was telling you
that yes was actually written for.

77
00:05:21.357 --> 00:05:26.339
If I do yes, and then I pipe that

78
00:05:26.339 --> 00:05:31.516
into rm -i file*, it's going

79
00:05:31.516 --> 00:05:37.665
to answer yes to all those questions.

80
00:05:37.665 --> 00:05:40.500
So just for fun right now, I'm gonna
answer no to all the questions, but

81
00:05:40.500 --> 00:05:41.162
check this out.

82
00:05:41.162 --> 00:05:44.456
It asked me a bunch of times,
do you wanna remove this file?

83
00:05:44.456 --> 00:05:45.828
Do you wanna remove this file?

84
00:05:45.828 --> 00:05:47.428
And I answered no to every one of them.

85
00:05:52.402 --> 00:05:55.319
So they're all still here.

86
00:05:57.577 --> 00:06:01.098
But what happens if I say
yes with the y instead?

87
00:06:01.098 --> 00:06:04.087
Now if you look in here,
it's empty cuz it went through and

88
00:06:04.087 --> 00:06:06.041
answered yes to all those questions.

89
00:06:06.041 --> 00:06:09.760
So that's why yes exist and so
you can answer yes to all those questions.

90
00:06:09.760 --> 00:06:10.970
Makes sense?

91
00:06:18.377 --> 00:06:19.223
Kind of a fun trick.

92
00:06:25.326 --> 00:06:27.857
So yeah, piping and streams and
all that kinds of stuff,

93
00:06:27.857 --> 00:06:29.821
that's a positively core concept to bash.

94
00:06:29.821 --> 00:06:32.027
And if you get a little
bit of a grasp on it,

95
00:06:32.027 --> 00:06:35.951
it's gonna go a long way in helping
you be a more professional developer.

96
00:06:35.951 --> 00:06:40.756
&gt;&gt; It was a question about
somebody did cat file.txt and

97
00:06:40.756 --> 00:06:45.911
then, Greater than greater than echo.

98
00:06:45.911 --> 00:06:49.619
Why doesn't that work?

99
00:06:49.619 --> 00:06:51.789
&gt;&gt; So okay, that's a good question.

100
00:06:51.789 --> 00:06:56.671
So let's say I say echo lollerskates.

101
00:06:56.671 --> 00:07:01.233
I don't know why that came to mind,
but that's what came to mind,

102
00:07:01.233 --> 00:07:03.028
into file.txt, right?

103
00:07:03.028 --> 00:07:05.770
So now if I cat file.txt,

104
00:07:05.770 --> 00:07:10.881
I believe the question is
if I say cat file.txt,

105
00:07:10.881 --> 00:07:15.736
and then I, Wait,
ask me the question one more time.

106
00:07:15.736 --> 00:07:17.398
&gt;&gt; Trying to push that in echo.

107
00:07:17.398 --> 00:07:19.355
&gt;&gt; Like this, right?

108
00:07:19.355 --> 00:07:25.503
So this doesn't work because this is
actually going to make a file called echo.

109
00:07:28.094 --> 00:07:32.759
So when you put these right here,
that means it's going into a file, right?

110
00:07:32.759 --> 00:07:38.182
Whereas if I do,
I think if you just do pipe like this,

111
00:07:38.182 --> 00:07:41.206
I think it won't do it at all.

112
00:07:41.206 --> 00:07:44.688
Okay, so
echo doesn't read from standard in.

113
00:07:44.688 --> 00:07:48.112
So if you wanted it to go to the output,

114
00:07:48.112 --> 00:07:52.080
what you would actually
pipe it into is cat.

115
00:07:52.080 --> 00:07:55.655
So you would have cat piping into cat,
which doesn't make a ton of sense, but

116
00:07:55.655 --> 00:07:56.701
it does work, right?

117
00:07:56.701 --> 00:08:00.404
So echo doesn't read from standard in.

118
00:08:00.404 --> 00:08:04.165
I mean, you can do this and say echo hi.

119
00:08:04.165 --> 00:08:07.617
And it's just going to ignore
all this because echo doesn't

120
00:08:07.617 --> 00:08:08.976
read from standard in.

121
00:08:08.976 --> 00:08:12.317
And whereas that's what
cat is specifically for

122
00:08:12.317 --> 00:08:14.686
is from reading from standard in.

123
00:08:17.265 --> 00:08:18.433
That makes sense?

124
00:08:18.433 --> 00:08:23.046
It's a little split hairy,
but all echo does is it just

125
00:08:23.046 --> 00:08:27.871
takes in something and
spits it back out to standard out.

126
00:08:27.871 --> 00:08:32.480
&gt;&gt; Why did two processes show up for
yes in the ps aux?

127
00:08:34.838 --> 00:08:35.481
&gt;&gt; All right.

128
00:08:42.103 --> 00:08:47.937
So I ran this one here, so
now this is running in the background.

129
00:08:47.937 --> 00:08:51.417
And this is the actual process
running right here, right, 1257,

130
00:08:51.417 --> 00:08:52.872
which matched up to this one.

131
00:08:52.872 --> 00:08:54.678
I think the question is
why is this one here?

132
00:08:54.678 --> 00:08:56.847
Because when you grep for something,

133
00:08:56.847 --> 00:08:59.978
grep also shows up in the list
that returns back to you.

134
00:08:59.978 --> 00:09:01.511
So grep detects itself.

135
00:09:01.511 --> 00:09:03.047
So in this particular case,

136
00:09:03.047 --> 00:09:06.311
the yes that it's detecting is
the search string from grep.

137
00:09:06.311 --> 00:09:08.150
That makes sense?

138
00:09:08.150 --> 00:09:11.265
So it's detecting itself is the answer.

139
00:09:11.265 --> 00:09:13.585
The search is detecting itself.

