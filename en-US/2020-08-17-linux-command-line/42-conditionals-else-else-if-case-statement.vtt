WEBVTT

1
00:00:00.000 --> 00:00:06.543
&gt;&gt; So I'm gonna make another
file here inside of my bin and

2
00:00:06.543 --> 00:00:11.662
this is going to just
be called like check or

3
00:00:11.662 --> 00:00:14.381
we'll just do touch.

4
00:00:14.381 --> 00:00:20.821
Check number and
we'll do a CH plus x of check number and

5
00:00:20.821 --> 00:00:25.441
then we're going to vi check number and

6
00:00:25.441 --> 00:00:33.298
then we'll do our little hash bang
at the top slash bin slash bash.

7
00:00:33.298 --> 00:00:37.875
Okay and then we're going to say if.

8
00:00:39.289 --> 00:00:41.780
Dollar sign 1.

9
00:00:43.618 --> 00:00:50.549
Space is a little bit more
readable is greater than 10 then.

10
00:00:52.497 --> 00:00:59.907
Echo greater than 10.

11
00:00:59.907 --> 00:01:05.428
Else if that's how you write
an else if is elif, write that.

12
00:01:05.428 --> 00:01:07.135
We can write another test in here.

13
00:01:07.135 --> 00:01:13.228
Dollar sign one is less

14
00:01:13.228 --> 00:01:18.682
than ten then echo.

15
00:01:21.090 --> 00:01:22.350
Less than 10.

16
00:01:24.267 --> 00:01:29.067
And then finally you can do else, echo.

17
00:01:33.539 --> 00:01:35.533
Equals 10.

18
00:01:35.533 --> 00:01:38.539
And then again,
always at the end, i I like that.

19
00:01:41.665 --> 00:01:45.012
Okay, so now I can write quit here.

20
00:01:45.012 --> 00:01:48.959
And I can say, check.

21
00:01:48.959 --> 00:01:51.070
Number 10.

22
00:01:51.070 --> 00:01:54.447
All right, so check number.

23
00:01:54.447 --> 00:01:59.122
So if I put 10 it says, equals 10
if I put 11 it's greater than 10.

24
00:01:59.122 --> 00:02:04.645
And if I put 9, it is less than 10.

25
00:02:04.645 --> 00:02:07.691
So that's how you do if elsif else and

26
00:02:07.691 --> 00:02:11.435
then you always have to
finish with the ephi.

27
00:02:11.435 --> 00:02:15.170
Okay, let's do one more.

28
00:02:15.170 --> 00:02:17.525
We'll make another file here.

29
00:02:17.525 --> 00:02:18.093
We're going to call it smiley.

30
00:02:18.093 --> 00:02:24.180
So touch smiley and
we're going to chmod+x smiley and

31
00:02:24.180 --> 00:02:28.027
then we're going to vi on smiley.

32
00:02:28.027 --> 00:02:30.272
I'm going to do a case
statement really quick.

33
00:02:30.272 --> 00:02:35.027
So we're going to say case, $1.

34
00:02:35.027 --> 00:02:39.331
This is like a switch
statement in JavaScript.

35
00:02:39.331 --> 00:02:41.163
And I have to put my bin bash in there.

36
00:02:46.101 --> 00:02:50.174
/bin/bash, also kind of a tip here.

37
00:02:50.174 --> 00:02:51.057
I don't know how to do this.

38
00:02:51.057 --> 00:02:53.000
I'm sure there's a special
way to do this with the vi.

39
00:02:53.000 --> 00:02:55.670
But if I just right-click quit and
then reopen again.

40
00:02:55.670 --> 00:02:59.617
It'll use this to interpret,
okay, this is a bash file.

41
00:02:59.617 --> 00:03:02.762
I will give you bash highlighting now.

42
00:03:02.762 --> 00:03:05.429
I'm sure someone in the chat
is immediately gonna say,

43
00:03:05.429 --> 00:03:06.800
this is how you do it with vi.

44
00:03:06.800 --> 00:03:08.503
That's fine.

45
00:03:08.503 --> 00:03:12.805
Anyway, case $1 in, and then here.

46
00:03:12.805 --> 00:03:16.089
It's gonna just be a matching statement.

47
00:03:16.089 --> 00:03:19.974
So if the user input smile here in quotes,

48
00:03:19.974 --> 00:03:24.747
I'm gonna put the string
that it's looking for and

49
00:03:24.747 --> 00:03:30.870
then you put an end parenthesis to
signify this is the first case.

50
00:03:30.870 --> 00:03:32.931
And I'm going to say echo.

51
00:03:35.307 --> 00:03:40.697
Our little smiley face there and
then the way that

52
00:03:40.697 --> 00:03:46.496
you end a particular cases
to semi colons like that.

53
00:03:46.496 --> 00:03:52.089
Okay, we'll do the next one here,
sad echo,

54
00:03:53.959 --> 00:03:59.154
Sad face and then we'll do laugh.

55
00:04:02.893 --> 00:04:09.811
And I have more of these in my notes but
you get the point, echo and okay.

56
00:04:09.811 --> 00:04:15.358
And in order to finish that is you do and
then the last one that's good to

57
00:04:15.358 --> 00:04:21.298
know is like if it doesn't match any of
these to put the wildcard at the end.

58
00:04:21.298 --> 00:04:23.501
You say this will only get hit.

59
00:04:23.501 --> 00:04:27.758
If it doesn't match anything else,
then you say I don't know that one yet.

60
00:04:30.985 --> 00:04:31.637
Okay.

61
00:04:34.073 --> 00:04:39.337
And then again,
the way that you finish a case statement

62
00:04:39.337 --> 00:04:44.272
is with case backwards which is esac,
esac, okay?

63
00:04:44.272 --> 00:04:48.263
And then we'll write- quit there and

64
00:04:48.263 --> 00:04:53.501
then we can run smiley with laugh and
I'll put that

65
00:04:53.501 --> 00:04:58.624
smiley smile and
smile something else, right?

66
00:04:58.624 --> 00:05:05.307
And it's gonna say, oops,
you need to put smiley.

67
00:05:05.307 --> 00:05:08.148
I don't know that one yet.

68
00:05:08.148 --> 00:05:09.618
What did I mess up in there?

69
00:05:12.396 --> 00:05:14.382
I didn't put an echo.

70
00:05:18.248 --> 00:05:20.640
Right there echo.

71
00:05:26.364 --> 00:05:29.413
There you go,
then it says it don't know that one yet.

72
00:05:29.413 --> 00:05:33.674
But you can see that that block code
wasn't being executed on the previous

73
00:05:33.674 --> 00:05:37.532
ones it wasn't erroring out,
because they're being executed.

74
00:05:37.532 --> 00:05:40.211
So the switch statements here
can be get pretty fancy and

75
00:05:40.211 --> 00:05:42.271
I'm not gonna really get into it too much.

76
00:05:42.271 --> 00:05:46.889
But suffice it like you now have the tools
that if you need to get more fancy with

77
00:05:46.889 --> 00:05:49.890
switch statements,
you know how to Google that.

78
00:05:49.890 --> 00:05:54.368
&gt;&gt; Is there a concept of Local
scope with bash scripts?

79
00:05:54.368 --> 00:05:55.334
&gt;&gt; There is.

80
00:05:55.334 --> 00:05:59.456
So anything that I set inside of my bash
script is not going to be exported outside

81
00:05:59.456 --> 00:06:02.715
of that bash script,
unless you explicitly say export this and

82
00:06:02.715 --> 00:06:06.309
then that will be exported to
the global scope like the global scope.

83
00:06:06.309 --> 00:06:11.341
Meaning that it will
survive beyond the bash

84
00:06:11.341 --> 00:06:17.063
script as far as like
scoping within like blocks.

85
00:06:17.063 --> 00:06:19.865
I don't actually know what the block
scope of bash scripting is.

86
00:06:19.865 --> 00:06:23.853
My intuition tells me that there's no
block scope, but you'd have to look it up.

87
00:06:23.853 --> 00:06:25.313
I don't actually know.

88
00:06:25.313 --> 00:06:30.716
Do I think programming with bash
is a different mind set than

89
00:06:30.716 --> 00:06:36.132
programming with like a different
programming language?

90
00:06:36.132 --> 00:06:40.611
I guess, I mean, programming is
programming is programming and

91
00:06:40.611 --> 00:06:45.009
I would loop bash in as a traditional
programming language, but

92
00:06:45.009 --> 00:06:50.483
I wouldn't like go write like a web server
in bash like it's totally possible.

93
00:06:50.483 --> 00:06:53.450
It's absolutely possible
to be able to do that.

94
00:06:53.450 --> 00:06:59.372
I use bash much more as a utilitarian
language like I'm trying to do a one off

95
00:06:59.372 --> 00:07:05.581
scripts and I wanted to do one thing, and
I wanted to be done with it after that.

96
00:07:05.581 --> 00:07:09.687
So in that sense,
I'm probably a little less

97
00:07:09.687 --> 00:07:13.479
diligent about making super clean code.

98
00:07:13.479 --> 00:07:18.821
It's much more procedural, I think that's
probably one of the biggest things

99
00:07:18.821 --> 00:07:24.018
about it is when I write my node code,
I tend more towards a functional style.

100
00:07:24.018 --> 00:07:29.680
I tend to have a lot more functions and
classes, and objects and things like that.

101
00:07:29.680 --> 00:07:33.682
Whereas bash, it's very much reads this
line, then this line, then this line,

102
00:07:33.682 --> 00:07:35.309
then this line, then this line.

103
00:07:35.309 --> 00:07:39.187
And anything that's much
more complicated than that,

104
00:07:39.187 --> 00:07:43.818
I will probably reach for note or
I'll probably reach for Python.

105
00:07:43.818 --> 00:07:46.823
Whereas I treat bash much more
procedurally and I think that's common,

106
00:07:46.823 --> 00:07:48.854
it's not necessarily you
have to do it that way.

107
00:07:48.854 --> 00:07:50.632
So one thing I'm not gonna show you, but

108
00:07:50.632 --> 00:07:54.094
is possible with bash scripting is you
can write functions with bash scripts.

109
00:07:54.094 --> 00:07:57.282
The reason why I'm not showing is like I
just don't anytime that I need to write

110
00:07:57.282 --> 00:08:00.003
functions, I'm getting into
something a bit more complicated.

111
00:08:00.003 --> 00:08:02.268
And I would probably reach for Python,

112
00:08:02.268 --> 00:08:06.263
because Python also is very good at
doing the similar things to bash.

113
00:08:06.263 --> 00:08:09.569
But I know plenty of people
that would write that in bash.

114
00:08:09.569 --> 00:08:13.622
So that's probably a pretty roundabout
answer of like the way that I treat bash,

115
00:08:13.622 --> 00:08:16.380
yes, but there's no reason
that it has to be that way.

116
00:08:16.380 --> 00:08:19.561
It's good question.

