WEBVTT

1
00:00:00.000 --> 00:00:04.960
So we've already looked a little bit at
processes cuz I showed you the PS AUX,

2
00:00:04.960 --> 00:00:05.505
right?

3
00:00:05.505 --> 00:00:07.805
And I showed you all the running
processes on a computer.

4
00:00:07.805 --> 00:00:10.009
Now, we're gonna get a little
bit more in depth into that.

5
00:00:12.159 --> 00:00:15.220
So just like everything
is a file in Linux,

6
00:00:15.220 --> 00:00:18.293
everything that's running is a process.

7
00:00:18.293 --> 00:00:22.226
And this might not be too unfamiliar for
you if you've run Windows or

8
00:00:22.226 --> 00:00:26.849
Mac before because you have your process
manager or your application monitor,

9
00:00:26.849 --> 00:00:29.408
I think is what it's called in Mac, right?

10
00:00:29.408 --> 00:00:31.296
It's that same idea.

11
00:00:31.296 --> 00:00:37.648
And that's what we're doing here every
time that we say PS here in Linux.

12
00:00:37.648 --> 00:00:40.523
We're saying, if you type ps,

13
00:00:40.523 --> 00:00:45.541
which I cannot remember what
that actually stands for.

14
00:00:45.541 --> 00:00:49.501
I think I have it in here,
process something or

15
00:00:49.501 --> 00:00:54.098
other Anyway, it doesn't matter.

16
00:00:58.421 --> 00:00:59.926
So if you run just ps,

17
00:00:59.926 --> 00:01:04.880
that's going to look at what just
you as Ubuntu is currently running.

18
00:01:04.880 --> 00:01:09.272
And right now, I'm not running anything,
I'm running just bash, and then the ps

19
00:01:09.272 --> 00:01:13.500
itself, like the actual command that I
ran to find what processes are running.

20
00:01:13.500 --> 00:01:15.749
So let's go ahead and run one.

21
00:01:15.749 --> 00:01:19.390
There's another command here called sleep
and all it does is wait, just waits for

22
00:01:19.390 --> 00:01:20.357
that amount of time.

23
00:01:20.357 --> 00:01:23.567
So if I say sleep 1, it'll wait for
a second and that's done.

24
00:01:23.567 --> 00:01:28.927
If I say sleep 2, waits for
two seconds and then it's done.

25
00:01:28.927 --> 00:01:32.927
So if I say sleep 10 and
then if I put an ampersand,

26
00:01:32.927 --> 00:01:37.578
which means run in the background,
so if I put sleep 10 and

27
00:01:37.578 --> 00:01:44.022
then I say ps immediately, you'll see
that that sleep command comes up, right?

28
00:01:44.022 --> 00:01:47.822
That's because I, Ubuntu,
spawned the process that's doing sleep and

29
00:01:47.822 --> 00:01:48.996
then it's gonna run.

30
00:01:48.996 --> 00:01:52.895
And if I run this again after 10 seconds,
it's gonna say, hey,

31
00:01:52.895 --> 00:01:55.974
by the way since you last ran me,
this one finished.

32
00:01:55.974 --> 00:01:58.725
And now,
I'm just back to the two commands.

33
00:02:02.081 --> 00:02:06.922
So, That's what that ends up doing.

34
00:02:09.882 --> 00:02:15.368
Let's do a sleep 100 in the background,
that's too long.

35
00:02:15.368 --> 00:02:19.627
What happens if I wanna kill,
oops, not that one ps.

36
00:02:19.627 --> 00:02:22.004
We saw how to do this before.

37
00:02:22.004 --> 00:02:24.931
So this is a PID right here, this PID.

38
00:02:24.931 --> 00:02:28.123
This stands for
process ID as you might imagine and

39
00:02:28.123 --> 00:02:31.020
it's how I can refer to
processes in flight.

40
00:02:31.020 --> 00:02:38.192
If I wanted to kill that,
if you remember kill- 9 or

41
00:02:38.192 --> 00:02:43.572
kill- SIGKILL 1783 right there.

42
00:02:43.572 --> 00:02:45.340
Now, if I go back and look at that again,

43
00:02:45.340 --> 00:02:47.327
you can see here that
the process was killed.

44
00:02:49.135 --> 00:02:53.104
So that's why these PIDs will end up
being really useful to how you can refer

45
00:02:53.104 --> 00:02:55.438
to processes that are currently in flight.

46
00:02:59.289 --> 00:03:02.503
Okay, so
that's what just ps by itself does.

47
00:03:02.503 --> 00:03:06.874
Now, you notice that by just muscle
memory, I almost always put aux because

48
00:03:06.874 --> 00:03:12.083
normally, I don't care what I, the user,
am running, I care what everybody's using.

49
00:03:12.083 --> 00:03:15.054
So that's what that aux
does is it just tells me,

50
00:03:15.054 --> 00:03:18.759
here's everything that everyone
on the system is running.

51
00:03:18.759 --> 00:03:22.731
And you can see here Ubuntu
has these ones down here,

52
00:03:22.731 --> 00:03:28.159
roots running some stuff,
roots running some other stuff, systemd.

53
00:03:28.159 --> 00:03:31.126
They're all running various
different things and

54
00:03:31.126 --> 00:03:34.841
you can see here all the various
different processes running.

55
00:03:34.841 --> 00:03:40.088
So this ends up being usually
such a long list that I'll

56
00:03:40.088 --> 00:03:45.577
either do ps aux and
you can actually see that in the less.

57
00:03:45.577 --> 00:03:48.298
And you can scroll through
here using less like this or

58
00:03:48.298 --> 00:03:52.241
you'll see me often doing the grep
stuff that we're talking about earlier.

59
00:03:52.241 --> 00:03:54.252
So grep ps, right?

60
00:03:54.252 --> 00:03:58.523
And then I can find just the thing
that I'm looking for there.

61
00:04:00.636 --> 00:04:04.439
So that's how I end up usually
navigating around this process list.

62
00:04:04.439 --> 00:04:08.206
All right, let's talk about background and
foreground.

63
00:04:10.933 --> 00:04:14.843
So let's say I have a process that's gonna
be running a really long time, right?

64
00:04:14.843 --> 00:04:17.934
Like I'm gonna put in here sleep 1000.

65
00:04:17.934 --> 00:04:21.431
But you could imagine this maybe this
is like a thing that goes through and

66
00:04:21.431 --> 00:04:23.333
processes all of your images, right?

67
00:04:23.333 --> 00:04:28.210
That can take a really long time or maybe
you're running a machine learning model

68
00:04:28.210 --> 00:04:32.673
and it has to run and do all that
backward propagation that takes forever.

69
00:04:32.673 --> 00:04:34.572
So I ran this process sleep 1000.

70
00:04:34.572 --> 00:04:37.875
I don't wanna sit here and wait for
1000 seconds for this to finish.

71
00:04:37.875 --> 00:04:40.954
So what I can actually do
is I can do Ctrl z and

72
00:04:40.954 --> 00:04:46.961
what that does is it stops the process and
it puts me back into my interactive shell.

73
00:04:46.961 --> 00:04:52.509
But what you can actually
do is I can say jobs, And

74
00:04:52.509 --> 00:04:54.414
you can see here that
I have this one here.

75
00:04:54.414 --> 00:04:56.737
It's been stopped sleep 1000.

76
00:04:56.737 --> 00:05:01.844
And I can actually say bg 1,
which refers to this one right here.

77
00:05:01.844 --> 00:05:05.630
And what this actually does is it
resumes the process in the background.

78
00:05:05.630 --> 00:05:10.322
So if I look here at jobs again, you can
see the sleep 1000 is actually running in

79
00:05:10.322 --> 00:05:13.619
the background, but
I'm still in my interactive shell.

80
00:05:13.619 --> 00:05:15.882
So I don't actually have to wait for it.

81
00:05:15.882 --> 00:05:20.140
This is really essential for me because
I do like a lot of long-running jobs,

82
00:05:20.140 --> 00:05:22.447
like npm install, for example, right?

83
00:05:22.447 --> 00:05:26.980
If you run npm install,
that can end up taking several minutes and

84
00:05:26.980 --> 00:05:31.762
I sure as hell am either gonna go joust
like that other xkcd comic if nmp

85
00:05:31.762 --> 00:05:35.080
is installing or
my machine code is compiling.

86
00:05:35.080 --> 00:05:37.467
Or I can just have it run in the
background and not have to wait for it.

87
00:05:40.038 --> 00:05:42.967
And if you're curious what's happening,
I can say jobs again,

88
00:05:42.967 --> 00:05:44.255
you can see this is running.

89
00:05:44.255 --> 00:05:48.830
And I can say fg, which stands for
foreground 1, and this will actually put

90
00:05:48.830 --> 00:05:52.639
me back into the process and
I'll resume watching the output.

91
00:05:52.639 --> 00:05:57.936
And same thing, Ctrl z,
jobs 1, or bg 1 rather,

92
00:05:57.936 --> 00:06:02.394
and this will resume it in the background.

93
00:06:02.394 --> 00:06:06.193
So it's how you can move processes
to the background or the foreground.

94
00:06:06.193 --> 00:06:09.355
Again, that's very helpful to me because
I don't always wanna sit there and

95
00:06:09.355 --> 00:06:09.900
wait for it.

96
00:06:09.900 --> 00:06:14.966
Now, something that I'm not talking about
that I know someone on the stream is

97
00:06:14.966 --> 00:06:20.288
probably thinking about right now is,
why aren't you teaching me tmx or screen?

98
00:06:20.288 --> 00:06:24.137
So there's two things, there's two other
programs out there that I'm not gonna

99
00:06:24.137 --> 00:06:27.055
teach you today because I don't
end up using them a whole lot.

100
00:06:27.055 --> 00:06:28.708
One is called screen,

101
00:06:28.708 --> 00:06:34.631
which allows you to have basically
multiple shells within one session, right?

102
00:06:34.631 --> 00:06:38.132
So I can actually say switch from this one
that I'm looking at right now to switch to

103
00:06:38.132 --> 00:06:40.569
like basically another window,
but it's not a window,

104
00:06:40.569 --> 00:06:42.112
it's within the terminal itself.

105
00:06:42.112 --> 00:06:44.972
And that's what screen
will allow to do for you.

106
00:06:44.972 --> 00:06:47.840
I sometimes use screen,
but usually not very much.

107
00:06:47.840 --> 00:06:52.175
But the nice thing about screen is it
allows me to run things in the background

108
00:06:52.175 --> 00:06:55.509
and switch to another shell or
another window basically.

109
00:06:55.509 --> 00:06:57.812
I'll let you look it up if
you're interested in doing that.

110
00:06:57.812 --> 00:07:01.295
And then if you wanna get really advanced,
there's one called tmux,

111
00:07:01.295 --> 00:07:03.657
which allows you to
basically split screens and

112
00:07:03.657 --> 00:07:06.449
have one running on one side and
one running on another.

113
00:07:06.449 --> 00:07:10.876
You can split in multiple ways,
do all this kind of stuff.

114
00:07:10.876 --> 00:07:15.049
Again, I don't end up using it
because I used to use it a lot and

115
00:07:15.049 --> 00:07:18.743
I had some problems with it
that some commands would run

116
00:07:18.743 --> 00:07:23.338
slightly different inside of tmux
than they would outside of tmux.

117
00:07:23.338 --> 00:07:28.247
And once I had that problem, I was like,
I am never using this again, this was such

118
00:07:28.247 --> 00:07:32.747
a weird bug that I lost a day or two that
I just quit cold turkey on using tmux.

119
00:07:32.747 --> 00:07:36.471
So I'm sure I'm offending someone who
might say that their favorite program is

120
00:07:36.471 --> 00:07:38.428
probably tmux, but I'm okay with that.

121
00:07:38.428 --> 00:07:42.126
It's probably the same crowd that's upset
that I work for vs code and not on vi.

122
00:07:42.126 --> 00:07:47.835
So, Anyway,
if you're not gonna use screen and

123
00:07:47.835 --> 00:07:52.897
you're not gonna use tmux, then go ahead
and use foreground and background.

124
00:07:54.818 --> 00:08:00.427
One thing that does bear mentioning,
So let's see,

125
00:08:00.427 --> 00:08:05.335
jobs, there's a way you can
display the pid as well, I think.

126
00:08:05.335 --> 00:08:08.781
Yeah, jobs- l.

127
00:08:08.781 --> 00:08:11.212
So I can see here, this is 1793.

128
00:08:11.212 --> 00:08:12.967
I can now just come in here and

129
00:08:12.967 --> 00:08:17.292
say kill- 9 1793 if I just wanna
kill that job in the background.

130
00:08:17.292 --> 00:08:21.333
If I say jobs now, then it'll tell
you it's like that was killed.

131
00:08:21.333 --> 00:08:23.596
So that's how you would kill it as well.

132
00:08:27.476 --> 00:08:29.426
This is more than sufficient for my needs.

133
00:08:29.426 --> 00:08:32.635
You can learn screen and you can tmux,
but jobs works really well.

134
00:08:36.968 --> 00:08:40.435
Cool, any questions about that,
about processes, or pids, or jobs, or

135
00:08:40.435 --> 00:08:42.039
foregrounds, and backgrounds?

136
00:08:44.558 --> 00:08:47.091
Cool, so yeah,
that was one thing I was gonna mention.

137
00:08:47.091 --> 00:08:49.771
If you put that ampersand on there, it
automatically sends it to the background.

138
00:08:49.771 --> 00:08:55.242
So if I say asleep 1000, And

139
00:08:55.242 --> 00:08:57.343
I put that ampersand,
that just sends it to the background.

140
00:08:59.461 --> 00:09:02.539
The one thing to be careful with that is
it doesn't necessarily send the output to

141
00:09:02.539 --> 00:09:03.228
the background.

142
00:09:03.228 --> 00:09:08.758
So if you're gonna do that, you're gonna
have to redirect the output, right?

143
00:09:08.758 --> 00:09:12.518
But we didn't feel like with the,
let's kill that.

144
00:09:14.927 --> 00:09:18.031
What you would have to
do here is like one or

145
00:09:18.031 --> 00:09:21.865
just send that all to output.txt and
then do that.

146
00:09:21.865 --> 00:09:24.821
Otherwise, you're gonna still get
the output to your screen despite the fact

147
00:09:24.821 --> 00:09:26.677
that your screen is still
gonna be interactive.

148
00:09:26.677 --> 00:09:30.554
So here, I can say jobs- l and

149
00:09:30.554 --> 00:09:34.588
I can just kill- 9 1796,

150
00:09:34.588 --> 00:09:41.277
I think I can kill 1797 sometimes, 1797.

151
00:09:42.892 --> 00:09:44.115
Cool, and those are both killed.

