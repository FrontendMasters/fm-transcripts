WEBVTT

1
00:00:00.000 --> 00:00:02.147
So now we have a secondary user.

2
00:00:02.147 --> 00:00:08.041
So we're gonna connect to our
secondary from our primary, right?

3
00:00:08.041 --> 00:00:13.204
So the secondary is gonna be
the target machine and the primary

4
00:00:13.204 --> 00:00:19.671
is gonna Is gonna be the machine that
we're going to connect to from primary.

5
00:00:19.671 --> 00:00:22.364
So the next thing that we need to do
is we need to come over to primary.

6
00:00:22.364 --> 00:00:27.980
And we're gonna do it from Ubuntu,
and the first thing we're

7
00:00:27.980 --> 00:00:33.166
gonna do right now is we're
gonna say SSH key Gen-TRSA.

8
00:00:33.166 --> 00:00:37.662
So if you have ever done,
like SSH keys for GitHub,

9
00:00:37.662 --> 00:00:40.702
this is the same process, right?

10
00:00:40.702 --> 00:00:41.909
Why would you do this?

11
00:00:41.909 --> 00:00:42.525
Well, or

12
00:00:42.525 --> 00:00:47.611
why does Get do that is because Get is
using SSH underneath the hood to connect.

13
00:00:47.611 --> 00:00:49.221
So what is an SSH key then?

14
00:00:49.221 --> 00:00:53.362
An SSH key is this like cryptographic
key that basically creates

15
00:00:53.362 --> 00:00:56.282
a private version and
a public version of it.

16
00:00:56.282 --> 00:01:00.319
The private version you never reveal
to anyone, that's like kinda like your

17
00:01:00.319 --> 00:01:03.376
secret, and then you give your
public version to people.

18
00:01:03.376 --> 00:01:05.577
And then using the private version and

19
00:01:05.577 --> 00:01:09.574
public version it allows services
to do a handshake with each other.

20
00:01:09.574 --> 00:01:12.214
That they never have to
reveal their private keys but

21
00:01:12.214 --> 00:01:16.248
they can verify that the other party has
the private key that they say they have.

22
00:01:16.248 --> 00:01:20.562
I'm not gonna get a lot more into
the cryptography of it because frankly,

23
00:01:20.562 --> 00:01:22.727
I don't understand that much math.

24
00:01:22.727 --> 00:01:26.524
But it's very interesting,
it's actually worth looking into.

25
00:01:26.524 --> 00:01:31.509
Actually left a link there so you can
look into the Diffie–Hellman algorithm

26
00:01:31.509 --> 00:01:36.493
which is kind of like the first asymmetric
cryptographic algorithm that came

27
00:01:36.493 --> 00:01:39.728
about in the 70s from
two computer scientists.

28
00:01:39.728 --> 00:01:46.416
I think they were at Berkeley, most things
come out of Berkeley, and Diffie–Hellman,

29
00:01:46.416 --> 00:01:51.421
that kind of revolutionized how
we do cryptographic handshakes.

30
00:01:51.421 --> 00:01:54.060
There's like yes, it's super interesting.

31
00:01:54.060 --> 00:01:58.689
So, that's what this is, is we're gonna
generate that private and public key,

32
00:01:58.689 --> 00:02:01.709
this public key we're gonna
give to the secondary and

33
00:02:01.709 --> 00:02:04.279
then the private key
remains on the primary.

34
00:02:04.279 --> 00:02:09.081
Or the private key remains the primary and
we never reveal that to anybody.

35
00:02:09.081 --> 00:02:15.424
And then RSA is just like the particular
flavor of key that we're gonna generate.

36
00:02:15.424 --> 00:02:18.427
Okay, so we're gonna generate a public and
private key.

37
00:02:18.427 --> 00:02:22.302
It's gonna say this in SSH ID RSA.

38
00:02:22.302 --> 00:02:23.418
That's exactly what we wanted.

39
00:02:23.418 --> 00:02:25.492
So you're just gonna hit Enter.

40
00:02:25.492 --> 00:02:27.584
You could put a passphrase here, for

41
00:02:27.584 --> 00:02:31.567
our simplicity's sake right now
we're not gonna put a passphrase cuz

42
00:02:31.567 --> 00:02:35.165
it would require you to enter
a passphrase to ever use this key.

43
00:02:35.165 --> 00:02:36.929
Typically you should do that.

44
00:02:36.929 --> 00:02:39.687
Like for example, if you're on
Mac you should generate that and

45
00:02:39.687 --> 00:02:43.075
then you could add it to your key chain
that automatically goes in afterwards.

46
00:02:43.075 --> 00:02:46.515
For now, let's just not put one.

47
00:02:47.560 --> 00:02:51.318
Okay, so now, we have this key.

48
00:02:51.318 --> 00:02:56.181
So if I go into my .ssh folder and

49
00:02:56.181 --> 00:03:03.216
I look in here,
I have an RDSA and an RDF SA pub.

50
00:03:03.216 --> 00:03:04.958
This one is the private one,

51
00:03:04.958 --> 00:03:08.232
the ID_RSA and
one with pub with it is the public one.

52
00:03:08.232 --> 00:03:11.776
So never reveal the private one to anyone.

53
00:03:11.776 --> 00:03:14.593
And this is the pub one is one that
you give away to other people.

54
00:03:14.593 --> 00:03:17.995
If you accidentally reveal your
private one, delete the file,

55
00:03:17.995 --> 00:03:22.096
regenerate them because at that point
you can just consider it compromised.

56
00:03:22.096 --> 00:03:24.807
And it's also really, as it should,

57
00:03:24.807 --> 00:03:29.997
it's very easy to regenerate them,
so don't worry about that, okay?

58
00:03:32.156 --> 00:03:35.524
So let's go back to secondary.

59
00:03:35.524 --> 00:03:40.306
If you're not already logged in as your
secondary, like Brian's a switch user,

60
00:03:40.306 --> 00:03:42.612
Brian or whatever you named your user.

61
00:03:42.612 --> 00:03:46.399
I'm already logged in as Brian so,
I don't need to do that.

62
00:03:46.399 --> 00:03:51.833
And I'm gonna make a directory of .ssh.

63
00:03:51.833 --> 00:03:57.148
So now if I look here in my home directory
you see have the .ssh directory,

64
00:03:57.148 --> 00:03:59.141
so I'm gonna cd into that.

65
00:04:01.365 --> 00:04:04.179
And what I'm gonna do
now is I'm going to vi,

66
00:04:09.095 --> 00:04:13.490
A file called authorized_keys.

67
00:04:16.861 --> 00:04:22.000
Okay, I'm gonna come
back over to this one,

68
00:04:22.000 --> 00:04:27.005
and I'm going to cat out my ID Rsa.pub,
and

69
00:04:27.005 --> 00:04:31.877
you're gonna copy everything from this,

70
00:04:31.877 --> 00:04:36.773
including the Ubuntu a primary part of it.

71
00:04:39.191 --> 00:04:45.602
Okay, Now we're gonna go back over
to this one where I have it in vi.

72
00:04:45.602 --> 00:04:48.272
I'm going to insert and
paste that in here.

73
00:04:48.272 --> 00:04:53.365
And this is basically going to say,
here is a public SSH key that if someone

74
00:04:53.365 --> 00:04:58.542
can verify that this is their key that
they have with their own private key,

75
00:04:58.542 --> 00:05:01.196
allow them to log into this computer.

76
00:05:01.196 --> 00:05:06.285
So it's like the username and
password for this user.

77
00:05:06.285 --> 00:05:07.876
Okay, so I'm gonna write-quit that.

78
00:05:10.385 --> 00:05:14.649
I'm going to have to sudo chmod this,
to be,

79
00:05:18.083 --> 00:05:25.102
And I'm gonna do it for the directory so,
And put in the password.

80
00:05:25.102 --> 00:05:30.369
Brian's on it,
Ccan I just do this without ch or sudo?

81
00:05:30.369 --> 00:05:31.569
I can, cool.

82
00:05:36.373 --> 00:05:37.413
Cool.

83
00:05:37.413 --> 00:05:41.762
So I made that SSH1 rewrite and

84
00:05:41.762 --> 00:05:46.446
execution for just the user, and

85
00:05:46.446 --> 00:05:50.471
I'm going to ch mod 600,

86
00:05:52.443 --> 00:05:56.419
SSH/authorized keys.

87
00:05:58.728 --> 00:06:03.336
So now just it's locked down to just
this user, it's not anyone can go in and

88
00:06:03.336 --> 00:06:06.375
read these keys which is
also good to have as well.

89
00:06:08.332 --> 00:06:12.419
Okay, so what we've done so far is we
generated SSH keys on the primary so

90
00:06:12.419 --> 00:06:15.576
that the primary can connect
to the secondary, right?

91
00:06:15.576 --> 00:06:18.847
And that we took the keys from
the primary, the public key, and

92
00:06:18.847 --> 00:06:20.836
we move that to the secondary server.

93
00:06:20.836 --> 00:06:24.656
So that when this primary and
secondary handshake with each other they

94
00:06:24.656 --> 00:06:28.353
can verify to each other is like,
you have the same key set, right?

95
00:06:28.353 --> 00:06:32.870
That's kind of what's going on here.

96
00:06:34.353 --> 00:06:38.304
I guess you can kind of think of it as
like the private key being like an actual

97
00:06:38.304 --> 00:06:42.319
key, and you can think of the public key
being like handing someone a lock and

98
00:06:42.319 --> 00:06:43.909
saying I have the key to this.

99
00:06:43.909 --> 00:06:48.233
You can display this lock on your front
door that everyone can see that lock,

100
00:06:48.233 --> 00:06:52.709
but only the person with the key can
unlock it with that with their key, right?

101
00:06:52.709 --> 00:06:54.253
That's, I think mostly analogous.

102
00:06:54.253 --> 00:06:56.947
I'm sure someone's sitting there thinking,
well, actually,

103
00:06:56.947 --> 00:06:58.159
it's not that which is fine.

104
00:06:58.159 --> 00:07:03.218
You can tell me in the chat or
tweet me or something.

105
00:07:03.218 --> 00:07:05.309
Okay, so that's where we're at right now.

106
00:07:05.309 --> 00:07:06.956
So we everything is all set up now.

107
00:07:06.956 --> 00:07:10.172
Now, we need to get an IP
address from the secondary so

108
00:07:10.172 --> 00:07:13.039
that the primary can
connect to the secondary.

109
00:07:13.039 --> 00:07:18.873
So if I say I IF Config here, IF Config, I
actually end up using this command a lot.

110
00:07:18.873 --> 00:07:23.366
This actually will just show you a bunch
of information about the computers placed

111
00:07:23.366 --> 00:07:24.288
on the network.

112
00:07:24.288 --> 00:07:28.623
So you can see here, it prints out
a bunch of numbers and broadcasts and

113
00:07:28.623 --> 00:07:30.619
netmask and that kind of stuff.

114
00:07:30.619 --> 00:07:32.687
I don't know what half of these means.

115
00:07:32.687 --> 00:07:38.241
But the one that we're looking for
is actually this one, 192168643.

116
00:07:38.241 --> 00:07:43.419
So this is my network address on this
network that I'm on at the moment.

117
00:07:43.419 --> 00:07:46.235
And the network in this
particular case is just,

118
00:07:46.235 --> 00:07:50.844
it's a fabricated virtual network on
my computer that multipass has created.

119
00:07:50.844 --> 00:07:54.566
It's not even multipass,
I can actually access this from Mac OS,

120
00:07:54.566 --> 00:07:57.701
right so it's actually
the the network on my computer.

121
00:07:57.701 --> 00:08:02.346
This one down here you can see
this i-net here, this 127.0.0.1.

122
00:08:02.346 --> 00:08:06.022
That's a special address
that's called the loopback, so

123
00:08:06.022 --> 00:08:08.453
it's how a computer refers to itself.

124
00:08:08.453 --> 00:08:13.617
So you've probably seen those mugs,
there's no place like 127.0.0.1,

125
00:08:13.617 --> 00:08:15.954
that would be like your home, right?

126
00:08:15.954 --> 00:08:19.172
So you can even see it says right here,
Local Loopback.

127
00:08:19.172 --> 00:08:22.883
So it's how a computer can
refer to itself as an address.

128
00:08:22.883 --> 00:08:26.764
This one here you can
see this says Ethernet.

129
00:08:26.764 --> 00:08:28.135
This is actually like
the real network address.

130
00:08:28.135 --> 00:08:34.918
So suffice to say, the one that we're
looking for here is 192.168.64.3.

131
00:08:34.918 --> 00:08:36.785
Makes sense?

132
00:08:36.785 --> 00:08:41.153
This one's interesting as well,
the netmask is 255255255,

133
00:08:41.153 --> 00:08:44.303
means that these first three
numbers are locked in,

134
00:08:44.303 --> 00:08:48.183
like they actually can't change for
this particular network.

135
00:08:48.183 --> 00:08:51.610
And you can see
the broadcast is 192.168.64.

136
00:08:51.610 --> 00:08:54.857
That means that's going to be those
numbers that are locked in that won't vary

137
00:08:54.857 --> 00:08:58.219
for this network, and a .255 here means
that this is the number that varies.

138
00:08:58.219 --> 00:09:00.049
So if we look at the various
different numbers,

139
00:09:00.049 --> 00:09:01.619
it's only varying on that last number.

140
00:09:04.284 --> 00:09:09.513
And then I think this
i-net is the ipv6 of it.

141
00:09:09.513 --> 00:09:12.554
I never used those so I actually,
really not totally sure.

142
00:09:12.554 --> 00:09:14.099
Anyway, here we go.

143
00:09:14.099 --> 00:09:19.269
So, grab this i-net, this 192.168.64,
yours might be different than mine.

144
00:09:19.269 --> 00:09:21.691
It might be the same, I'm not sure, but

145
00:09:21.691 --> 00:09:25.060
this is the number that you're looking for
right here.

146
00:09:25.060 --> 00:09:25.726
Okay?

147
00:09:28.933 --> 00:09:33.770
And now, let's see,

148
00:09:39.675 --> 00:09:42.073
What should work now?

149
00:09:42.073 --> 00:09:46.418
So that's this was on secondary so
I got the IP off of secondary.

150
00:09:46.418 --> 00:09:51.669
I'm gonna come back to my primary and
I'm gonna say ssh

151
00:09:51.669 --> 00:09:58.436
brian@ that number,
It's gonna ask you is Are you sure?

152
00:09:58.436 --> 00:10:02.987
The reason why it does this is if
the computer like the actual physical

153
00:10:02.987 --> 00:10:06.212
server changes underneath you,
you'll know.

154
00:10:06.212 --> 00:10:09.482
So this key is actually exchanges
like hey, I'm this server,

155
00:10:09.482 --> 00:10:11.529
do you know that you trust this server?

156
00:10:11.529 --> 00:10:14.099
And if you say yes, it's going to
store that on your computer and

157
00:10:14.099 --> 00:10:17.192
say in the future it's gonna check that
every single time to make sure you're

158
00:10:17.192 --> 00:10:18.490
connecting to the same server.

159
00:10:18.490 --> 00:10:21.644
And if that server changes,
it's like, hey, something changed.

160
00:10:21.644 --> 00:10:25.209
This is not the same computer
I was connecting to before and

161
00:10:25.209 --> 00:10:28.480
it won't let you until you
resolve that situation.

162
00:10:28.480 --> 00:10:32.915
And you can see here,
by doing that, I have now SSH.

163
00:10:32.915 --> 00:10:36.795
So I have my primary computer
that's going over the network and

164
00:10:36.795 --> 00:10:38.632
connected to the secondary.

165
00:10:38.632 --> 00:10:42.484
And now we have set it up SSH.

166
00:10:42.484 --> 00:10:47.558
So again, I can just say Exit, and
that will drop me back to Ubuntu,

167
00:10:47.558 --> 00:10:50.332
and I can reconnect as much as I want.

168
00:10:51.605 --> 00:10:53.725
Pretty cool, right?

169
00:10:53.725 --> 00:10:55.182
So that's how you set up SSH.

170
00:10:55.182 --> 00:10:58.394
It's actually quite easy for
the most part.

171
00:10:58.394 --> 00:11:00.742
Our Ubuntu is already
running the SSH agent, so

172
00:11:00.742 --> 00:11:04.808
there has to be something running in the
background that accepts these requests.

173
00:11:04.808 --> 00:11:08.937
And by default, I think Ubuntu in
general just runs that by default.

174
00:11:08.937 --> 00:11:11.793
But sometimes in some distributions,
you have to go and

175
00:11:11.793 --> 00:11:15.217
install the correct SSH agent stuff and
get that started running.

176
00:11:15.217 --> 00:11:20.110
I'm gonna show you how to do that, you
could very easily Google how to do that.

177
00:11:20.110 --> 00:11:24.106
But it's cool because we don't have to
know the password or anything like that,

178
00:11:24.106 --> 00:11:27.718
just by virtue of having those keys we
can set it up and it's really easy.

179
00:11:27.718 --> 00:11:31.183
So like I do this stuff all the time
whenever I need to connect to a VM.

180
00:11:31.183 --> 00:11:34.437
So here in secondary,
if I go into my .ssh folder,

181
00:11:34.437 --> 00:11:38.086
you can see I created this
authorized keys file, right?

182
00:11:38.086 --> 00:11:40.775
And if i vi this Authorized Keys file,

183
00:11:40.775 --> 00:11:44.230
this is the public key from the primary,
right?

184
00:11:44.230 --> 00:11:47.028
So I pasted that in
there from the primary,

185
00:11:47.028 --> 00:11:49.763
like I generated that key on the primary.

186
00:11:49.763 --> 00:11:55.220
I copied it, and then I pasted that into
the Authorized Keys on the secondary.

187
00:11:55.220 --> 00:12:00.006
So now, this key,
whoever has the private version of this

188
00:12:00.006 --> 00:12:03.042
key can log in as this user using SSH.

189
00:12:03.042 --> 00:12:07.845
So the reason why this is Authorized Keys
is cuz you can have multiple different

190
00:12:07.845 --> 00:12:12.499
users being able to connect to it so
I could create a tertiary, right, VM and

191
00:12:12.499 --> 00:12:14.272
also paste its keys in here.

192
00:12:14.272 --> 00:12:19.662
And it could also log into this as
long as its public key was in here,

193
00:12:19.662 --> 00:12:21.701
if that makes any sense.

194
00:12:21.701 --> 00:12:26.398
And that's really as complicated as it is,
there's nothing more to it.

195
00:12:29.351 --> 00:12:33.706
&gt;&gt; Can you set up a third computer
to also SSH into secondary?

196
00:12:33.706 --> 00:12:36.457
Would you just add another public key and
authorize?

197
00:12:36.457 --> 00:12:37.146
&gt;&gt; Yes.

198
00:12:41.334 --> 00:12:42.191
Cool.

199
00:12:42.191 --> 00:12:45.858
&gt;&gt; Is the process the same
if I want to connect to a VM

200
00:12:45.858 --> 00:12:50.468
running on VirtualBox while
I'm running Linux natively?

201
00:12:50.468 --> 00:12:53.674
&gt;&gt; The process will be the same.

202
00:12:53.674 --> 00:12:58.070
If you're doing this through VirtualBox,
you would stand up a second VM, so

203
00:12:58.070 --> 00:13:01.061
like a second window that's
running a separate VM.

204
00:13:01.061 --> 00:13:05.655
The only thing I'm not positive about and
I haven't tried, I think it should work is

205
00:13:05.655 --> 00:13:09.681
you have to make sure that those two
VMs end up on the same network, right?

206
00:13:09.681 --> 00:13:11.996
They need to be connected to
each other in some capacity.

207
00:13:11.996 --> 00:13:15.408
I think VirtualBox does that by
default but I'd really have to check.

208
00:13:21.145 --> 00:13:23.784
Yeah, you can also do this with Docker,
right?

209
00:13:23.784 --> 00:13:29.132
And in some capacity, Docker kinda
does some of this stuff for you.

210
00:13:29.132 --> 00:13:32.534
But you need to make sure that they
ended up on the same virtual network.

211
00:13:35.324 --> 00:13:39.558
So yeah, that's the only thing to double
check, if you wanna do this using

212
00:13:39.558 --> 00:13:43.477
VirtualBox, just make sure that
everything is on the same network.

