WEBVTT

1
00:00:00.000 --> 00:00:02.055
Let's talk about standard in.

2
00:00:02.055 --> 00:00:04.841
So the two that we've talked about so
far are standard out and

3
00:00:04.841 --> 00:00:07.310
standard error,
those are output streams, right?

4
00:00:07.310 --> 00:00:09.299
There's something flowing
out of an output.

5
00:00:09.299 --> 00:00:13.936
You can also feed things into standard in.

6
00:00:13.936 --> 00:00:18.470
So cat has a fun ability that
not only can it read files,

7
00:00:18.470 --> 00:00:21.140
it can have files inputed to it.

8
00:00:21.140 --> 00:00:24.886
So, if I put a angle bracket
in the other direction,

9
00:00:24.886 --> 00:00:28.903
I can actually read out of a file and
throw that into cat.

10
00:00:28.903 --> 00:00:34.179
So, if I put,
what files do I have in here?

11
00:00:34.179 --> 00:00:34.915
New-file.

12
00:00:40.103 --> 00:00:43.206
So this is actually going
to read out of new-file and

13
00:00:43.206 --> 00:00:45.120
throw that as an input into cat.

14
00:00:45.120 --> 00:00:49.791
And cat is basically just going
to output whatever it gets.

15
00:00:49.791 --> 00:00:51.021
So in this particular case,

16
00:00:51.021 --> 00:00:54.785
this isn't very interesting because if I
just do this, it's the same thing, right?

17
00:00:54.785 --> 00:00:57.704
Cuz that's what it does,
is it reads a file.

18
00:00:57.704 --> 00:01:02.158
But that actually does end up working.

19
00:01:03.922 --> 00:01:10.838
But let's say here, what's in my ls.txt?

20
00:01:14.021 --> 00:01:18.196
Yeah, so I have this in here where
it's just two outputs of an LS, right?

21
00:01:18.196 --> 00:01:22.687
Let's say I wanted to read from
this file and find something in it.

22
00:01:22.687 --> 00:01:27.196
So you can actually do something kind
of interesting here, where I can say,

23
00:01:27.196 --> 00:01:28.754
let's look for ls error.

24
00:01:28.754 --> 00:01:35.327
So I'm going to say grep, which we'll talk
about here towards the end of the class,

25
00:01:35.327 --> 00:01:39.597
grep is just like a thing to like look for
other things.

26
00:01:39.597 --> 00:01:45.454
So I'm gonna say grep for ls error.txt.

27
00:01:45.454 --> 00:01:49.468
And then I'm going to

28
00:01:49.468 --> 00:01:54.380
input into that ls.txt.

29
00:01:56.698 --> 00:02:00.352
So what this did Is it read
from the file ls.txt and

30
00:02:00.352 --> 00:02:06.106
then it fed that into standard in which
then connected into this grep program.

31
00:02:06.106 --> 00:02:11.696
And grep looks for this line of
text right here, ls error.txt.

32
00:02:11.696 --> 00:02:15.889
So this is really great, if you have
a program that you're gonna be giving it

33
00:02:15.889 --> 00:02:20.539
like a consistent amount of input, and you
get sick of typing it over and over again,

34
00:02:20.539 --> 00:02:24.894
you can use this to just write to a file
and then you can feed that into a program.

35
00:02:29.387 --> 00:02:32.358
I don't end up using it a lot,
I'll be honest with you, but

36
00:02:32.358 --> 00:02:34.451
it's just good to know that that exists.

37
00:02:34.451 --> 00:02:38.924
More importantly, it's good to know what
you can pipe from one program to another,

38
00:02:38.924 --> 00:02:41.261
which we'll get into
here in just a second.

39
00:02:41.261 --> 00:02:48.093
Let's put this all together now.

40
00:02:48.093 --> 00:02:53.152
I'm gonna go into my Streams folder and

41
00:02:53.152 --> 00:02:58.069
I'm going to grep for ls error.txt.

42
00:02:58.069 --> 00:03:02.693
Oops, And

43
00:03:02.693 --> 00:03:07.487
I'm going to input into that ls.txt and

44
00:03:07.487 --> 00:03:13.691
then I'm going to pipe
the output into grep.txt and

45
00:03:13.691 --> 00:03:18.272
I'm going to ignore the errors.

46
00:03:18.272 --> 00:03:24.814
Okay, so
what the hell just happened, right?

47
00:03:24.814 --> 00:03:28.881
It's a little dense, but we know
everything that went into this, right?

48
00:03:28.881 --> 00:03:33.768
So we have ls.txt, this is being read and
put into standard in.

49
00:03:33.768 --> 00:03:37.986
That's being fed into grep,
which is looking for ls error.txt.

50
00:03:37.986 --> 00:03:42.786
It's then outputting
the standard out into grep.txt,

51
00:03:42.786 --> 00:03:46.516
and it's ignoring all of the errors.

52
00:03:46.516 --> 00:03:51.832
So if I cat grep.txt,
what do you expect to find in there?

53
00:03:51.832 --> 00:03:53.585
The two found ls errors.

54
00:03:57.728 --> 00:04:01.299
Make sense?

55
00:04:01.299 --> 00:04:05.500
Now again, something interesting,

56
00:04:05.500 --> 00:04:10.094
notice that this ls error is not colorized

57
00:04:10.094 --> 00:04:14.436
whereas if I do this, it is colorized.

58
00:04:14.436 --> 00:04:19.234
That's because grep is smart enough to
say, you're running this through a pipe

59
00:04:19.234 --> 00:04:23.611
and I'm not gonna put any colors onto
this because that makes it harder for

60
00:04:23.611 --> 00:04:24.826
machines to parse.

61
00:04:24.826 --> 00:04:27.265
And that's just for human benefit.

62
00:04:27.265 --> 00:04:31.314
So it'll mix all the colors to make it
more easy for the next thing to read.

63
00:04:36.358 --> 00:04:39.922
And order is not important here for this
particular command that we wrote here.

64
00:04:39.922 --> 00:04:42.744
So you could put the standard in and
standard out and

65
00:04:42.744 --> 00:04:45.245
standard error in any
order that you want to.

66
00:04:45.245 --> 00:04:50.551
&gt;&gt; Questions about that one character
before the redirection operator.

67
00:04:50.551 --> 00:04:52.936
&gt;&gt; All the one character, this one.

68
00:04:52.936 --> 00:04:55.563
I thought you'd talk about
the one character, right?

69
00:04:55.563 --> 00:04:56.741
That one.

70
00:04:56.741 --> 00:04:57.433
&gt;&gt; Yeah.

71
00:04:57.433 --> 00:05:03.076
&gt;&gt; Yes, so if you put a one there,
you're redirecting standard out and

72
00:05:03.076 --> 00:05:08.149
if you put a two there,
you're redirecting standard error.

73
00:05:08.149 --> 00:05:09.652
Why is it a one?.

74
00:05:09.652 --> 00:05:10.627
Cuz it's the first.

75
00:05:10.627 --> 00:05:12.731
I don't know if there's
a really good reason to it.

76
00:05:12.731 --> 00:05:14.879
It's just the way that they wrote Bash.

77
00:05:14.879 --> 00:05:19.268
And then again, if you leave it out
it redirects both standard error and

78
00:05:19.268 --> 00:05:20.227
standard out.

