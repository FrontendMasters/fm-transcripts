WEBVTT

1
00:00:00.000 --> 00:00:01.916
So let's touch another file here,
file.txt.

2
00:00:07.962 --> 00:00:12.969
Something you'll see people
do is they'll say sudo chmod,

3
00:00:12.969 --> 00:00:17.386
and then you'll see 777,
which is super random,

4
00:00:17.386 --> 00:00:21.433
I understand that but
let's talk about 777.

5
00:00:21.433 --> 00:00:23.577
I'm not encouraging you to do it this way.

6
00:00:23.577 --> 00:00:26.437
I'm just going to tell you that
you're going to find a lot of stack

7
00:00:26.437 --> 00:00:30.295
overflow answers that have people that
tell you that yeah, just to put 777 there.

8
00:00:30.295 --> 00:00:36.015
It's a very shorthand way of
doing what I showed you before,

9
00:00:36.015 --> 00:00:42.199
which is u equals rgw or was it,
rwx, g equals rwx, o equals rwx.

10
00:00:42.199 --> 00:00:50.635
These two lines are totally equivalent.

11
00:00:50.635 --> 00:00:54.164
So what this number represents,
each number represents,

12
00:00:54.164 --> 00:00:58.755
the first one represents the users,
the second one represents the groups and

13
00:00:58.755 --> 00:01:02.583
the last one represents the o
the other people and they use math.

14
00:01:02.583 --> 00:01:07.440
So let me just check here, I have to
look at the math every single time.

15
00:01:07.440 --> 00:01:11.750
You add four to the number if
you want read permissions,

16
00:01:11.750 --> 00:01:15.602
you add two to the number for
write permissions and

17
00:01:15.602 --> 00:01:19.010
one to the number for execute permissions.

18
00:01:19.010 --> 00:01:24.018
So if I went in here and
did 66, I'm not gonna do 667,

19
00:01:24.018 --> 00:01:29.653
some people have a problem with
that number, what would this be?

20
00:01:29.653 --> 00:01:34.885
This would be the user can read and
write, the group can read and

21
00:01:34.885 --> 00:01:38.736
write, and
everyone else can read, write and

22
00:01:38.736 --> 00:01:43.405
execute which basically
means everyone else, right?

23
00:01:43.405 --> 00:01:47.602
Or if I did 700,
that's one that you'll actually will see.

24
00:01:47.602 --> 00:01:49.717
It means that just the user can read,

25
00:01:49.717 --> 00:01:52.798
write and execute and
no one else has any permission.

26
00:01:52.798 --> 00:01:54.617
So let's let's just do that and
see what that looks like.

27
00:01:54.617 --> 00:01:59.278
So notice file.txt here can be read,
written or

28
00:01:59.278 --> 00:02:05.189
executed by Ubuntu and
no one else can do anything to the file,

29
00:02:05.189 --> 00:02:08.843
not even people in the group, right?

30
00:02:08.843 --> 00:02:14.241
Or if I did 600,
that would be just the user can read and

31
00:02:14.241 --> 00:02:18.306
write, cuz a text file is not executable.

32
00:02:18.306 --> 00:02:22.257
So they have read write or 640,

33
00:02:22.257 --> 00:02:27.039
that's another one you'll see as well.

34
00:02:31.506 --> 00:02:36.778
The group can read but
can't write it, or 664,

35
00:02:36.778 --> 00:02:42.305
I think you're getting the point,
though, right?

36
00:02:42.305 --> 00:02:44.828
That you use that kind of like
math to to set the permissions.

37
00:02:44.828 --> 00:02:46.623
Now, why did they do that?

38
00:02:46.623 --> 00:02:49.990
It's because computer scientists are lazy
and I guess have good memories and

39
00:02:49.990 --> 00:02:51.924
wanted to do a little bit more math,
right?

40
00:02:51.924 --> 00:02:57.198
Because I guess it's too burdensome
to write out u equals rg or whatever.

41
00:02:57.198 --> 00:03:00.679
I guess that's the point is I can't even
remember and I was just talking about it.

42
00:03:00.679 --> 00:03:02.557
So that's why you see 777.

43
00:03:02.557 --> 00:03:06.906
That's basically saying anyone
can do anything to this file

44
00:03:06.906 --> 00:03:08.618
whenever they want to.

45
00:03:08.618 --> 00:03:13.521
So it's not usually the best idea to
say 777 on a file because that's a very

46
00:03:13.521 --> 00:03:16.927
insecure practice, but
that's why you'll see it.

47
00:03:16.927 --> 00:03:21.277
It's because it's the easy thing to do,
even if it's not the right thing to do.

48
00:03:24.880 --> 00:03:31.252
And then the last one that you'll
see sometimes is let's say we had a,

49
00:03:31.252 --> 00:03:35.907
I'm gonna touch a file
called my-new-program.

50
00:03:35.907 --> 00:03:40.439
Let's say I wanna make
that file executable.

51
00:03:40.439 --> 00:03:49.089
What you can do is sudo chmod +x,
my-new-program, like that.

52
00:03:49.089 --> 00:03:51.392
And it's just going to go ahead and

53
00:03:51.392 --> 00:03:55.215
add the executable ability
to all permissions, right?

54
00:03:55.215 --> 00:04:00.649
So now if I go in here, you'll see that my
new program here has an x permission for

55
00:04:00.649 --> 00:04:04.480
each one of those so it makes it so
anyone can execute it.

56
00:04:04.480 --> 00:04:08.536
By the same token,
I can come in here and say -x and

57
00:04:08.536 --> 00:04:11.734
it'll take away that x for everybody.

58
00:04:11.734 --> 00:04:17.278
And same diff with like you
could do maybe like +w for

59
00:04:17.278 --> 00:04:21.569
everybody and now everybody can write.

60
00:04:24.586 --> 00:04:25.260
Where did I go?

61
00:04:32.022 --> 00:04:32.934
I guess that just adds it for
the user in the group, but there you go.

62
00:04:32.934 --> 00:04:36.688
So mostly you'll see a pro plus x, right,

63
00:04:36.688 --> 00:04:42.020
to add executable permissions
to something or take it away.

64
00:04:42.020 --> 00:04:48.672
For the most part, I just do the the one
that I was showing you before sudo chmod,

65
00:04:48.672 --> 00:04:53.737
our user equals blah blah blah
because I can remember that and

66
00:04:53.737 --> 00:04:58.730
I don't have to go look up the math for
it every single time.

67
00:04:58.730 --> 00:05:03.038
But I wanted to show you the other
ways because you will definitely

68
00:05:03.038 --> 00:05:05.476
see them in Stack Overflow answers.

69
00:05:10.886 --> 00:05:11.661
Questions?

70
00:05:11.661 --> 00:05:14.860
Permissions makes sense?

71
00:05:18.047 --> 00:05:20.561
Cool.
It's something like that knowledge I

72
00:05:20.561 --> 00:05:25.258
showed you, if I was able to teach it
to you in I don't know 30 minutes or

73
00:05:25.258 --> 00:05:26.730
something like that.

74
00:05:26.730 --> 00:05:30.780
That's probably taken me like
seven years to really understand

75
00:05:30.780 --> 00:05:35.505
everything that I taught you which is
just positively shameful to admit but

76
00:05:35.505 --> 00:05:37.839
I just never went and researched it.

77
00:05:37.839 --> 00:05:40.160
I just kind of like osmosed
it over seven years.

78
00:05:40.160 --> 00:05:47.517
So you're already way ahead of where
I was about, I don't know last week.

79
00:05:47.517 --> 00:05:48.626
No, I'm just kidding.

80
00:05:48.626 --> 00:05:50.870
Maybe like I said,
like seven years in my career.

81
00:05:50.870 --> 00:05:55.356
The question is,
is when you cat out this Etsy password,

82
00:05:55.356 --> 00:05:58.815
what are all the various different values?

83
00:05:58.815 --> 00:06:02.461
So let's talk about you
have your Ubuntu here.

84
00:06:02.461 --> 00:06:08.693
I think one of these this 1000 and
this 1001 I think these are user IDs,

85
00:06:08.693 --> 00:06:13.792
right, because you can refer to
a user by their ID or by the name,

86
00:06:13.792 --> 00:06:20.515
by the same token, I think the 1000 and
the 1001 I think those are group IDs.

87
00:06:20.515 --> 00:06:24.385
I don't know what this Ubuntu is honestly.

88
00:06:24.385 --> 00:06:28.551
You can see there that
Brian doesn't have one.

89
00:06:28.551 --> 00:06:30.946
I don't know what the x is.

90
00:06:30.946 --> 00:06:35.687
This one is their home
directory /home/ubuntu and

91
00:06:35.687 --> 00:06:39.034
the /bin/bash is the login shell.

92
00:06:39.034 --> 00:06:44.597
So like whenever you say,
hey log me in as Ubuntu, run this.

93
00:06:44.597 --> 00:06:50.151
So for example,
you'll notice that Brian's login shell

94
00:06:50.151 --> 00:06:55.260
is a different shell it's I
think this is called ash.

95
00:06:55.260 --> 00:07:01.961
I wonder if I can, man sh, it's dash,

96
00:07:01.961 --> 00:07:07.110
see I don't even know what that is.

97
00:07:07.110 --> 00:07:09.977
So it's a different shell still.

98
00:07:09.977 --> 00:07:10.910
So for example,

99
00:07:10.910 --> 00:07:14.917
you'll notice that your tab completions
we're not working as Brian.

100
00:07:14.917 --> 00:07:17.069
That's because you're actually
running a different shell.

101
00:07:17.069 --> 00:07:20.376
It's very, very similar but it's stripped
down and less powerful than bash.

102
00:07:23.416 --> 00:07:28.325
So that's why some of these have like
false and no login is won't allow you to

103
00:07:28.325 --> 00:07:32.019
log in as these users,
they're not interactive users.

104
00:07:32.019 --> 00:07:33.684
For that x and for the Ubuntu here,

105
00:07:33.684 --> 00:07:37.140
you'd have to go look up that cuz I
don't actually know what those are.

