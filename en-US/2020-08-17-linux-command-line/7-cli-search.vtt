WEBVTT

1
00:00:00.000 --> 00:00:02.536
So let's get on to some common tips and

2
00:00:02.536 --> 00:00:06.200
tricks of command like going
around the command line.

3
00:00:06.200 --> 00:00:10.750
You've probably already see me use some of
these because they're so ingrained in my

4
00:00:10.750 --> 00:00:15.120
usage of the command line that I literally
cannot separate them from my fingers.

5
00:00:15.120 --> 00:00:18.127
So, let's just yeah, let's get into it.

6
00:00:18.127 --> 00:00:20.717
So right now I'm inside of Ubuntu.

7
00:00:20.717 --> 00:00:22.679
Let's say I'm in the root directory,
right,

8
00:00:22.679 --> 00:00:26.126
which I'm in the root directory now, pwd,
you can see I'm in the root directory.

9
00:00:26.126 --> 00:00:33.013
Let's say I wanted to get to Ubuntu's
home directory, which is /home/Ubuntu.

10
00:00:33.013 --> 00:00:35.343
That's the directory that
belongs just to Ubuntu and

11
00:00:35.343 --> 00:00:37.060
not anyone else on the system, right?

12
00:00:37.060 --> 00:00:38.673
So if I have like ten users,

13
00:00:38.673 --> 00:00:42.191
each one of those users will
have their own home directory.

14
00:00:42.191 --> 00:00:48.188
So you can say, hey, take me to my home
directory by saying cd and then ~.

15
00:00:48.188 --> 00:00:51.090
So that's the tilda key,
which is next to your 1 key.

16
00:00:51.090 --> 00:00:54.833
It's also on the same key as the backtick.

17
00:00:54.833 --> 00:01:01.756
So if I say cd ~ and I hit pwd,
I'm now in my home directory, right?

18
00:01:01.756 --> 00:01:04.653
So that's what tilda represents.

19
00:01:04.653 --> 00:01:07.401
It represents your own home directory.

20
00:01:07.401 --> 00:01:11.921
And that's just really useful to make sure
that you're always going to your home

21
00:01:11.921 --> 00:01:12.660
directory.

22
00:01:12.660 --> 00:01:14.732
And you can also do
relative paths off of it.

23
00:01:14.732 --> 00:01:17.610
So if I say cd ~/snap, right,

24
00:01:17.610 --> 00:01:23.168
you'll see here that it takes
me to home Ubuntu snap, right?

25
00:01:23.168 --> 00:01:28.655
And that's another thing to worth noting
that I haven't really called out yet.

26
00:01:28.655 --> 00:01:31.874
So I have this, it's called a prompt here,

27
00:01:31.874 --> 00:01:35.797
this little thing that comes
before the dollar sign.

28
00:01:35.797 --> 00:01:40.793
So after the colon here, it's actually
showing me all the time my current path,

29
00:01:40.793 --> 00:01:42.640
where I am in the file system.

30
00:01:42.640 --> 00:01:44.471
But it's using tilda right?

31
00:01:44.471 --> 00:01:50.492
So if I see tilda here,
this means I'm in my home directory, but

32
00:01:50.492 --> 00:01:56.638
if I go up one, it will give me /home,
/~, ~/snap, right?

33
00:01:56.638 --> 00:01:59.511
So it's actually changing that every
single time inside of my prompt, and

34
00:01:59.511 --> 00:02:01.532
I'll show you at the end how
to set your own prompts.

35
00:02:01.532 --> 00:02:03.511
You can mess with that however you want.

36
00:02:06.752 --> 00:02:08.566
Okay, so that's tilda.

37
00:02:08.566 --> 00:02:11.705
We talked about slashes well already,
so if I just say cd/,

38
00:02:11.705 --> 00:02:14.784
that's going to take me all
the way to my home directory, or

39
00:02:14.784 --> 00:02:17.940
not my home directory but
the root directory of the project.

40
00:02:17.940 --> 00:02:20.643
So that's what slash does for you.

41
00:02:27.904 --> 00:02:29.714
So some people get nitpicky about this.

42
00:02:29.714 --> 00:02:33.036
People want to call this forward
slash because this is backslash.

43
00:02:33.036 --> 00:02:36.630
It's actually technically just slash and
backslash.

44
00:02:36.630 --> 00:02:39.893
I don't know why people get all
bent out of shape about it.

45
00:02:39.893 --> 00:02:43.846
If you call it a forward slash,
I know exactly what you're talking about.

46
00:02:43.846 --> 00:02:45.874
I just hate people that are nitpicky for
dumb reasons.

47
00:02:45.874 --> 00:02:51.302
So yes, it is redundant if you call it
forward slash and no, no one should care.

48
00:02:51.302 --> 00:02:53.426
So that's my mini forward slash rant.

49
00:02:56.763 --> 00:03:00.928
In particular, computer scientists are the
people that just love to be just retentive

50
00:03:00.928 --> 00:03:02.249
about the dumbest things.

51
00:03:05.723 --> 00:03:06.923
And no, I'm not upset about it.

52
00:03:06.923 --> 00:03:10.230
Okay, so
I'm gonna go back to my home directory.

53
00:03:10.230 --> 00:03:12.224
The next thing I want to show you again,

54
00:03:12.224 --> 00:03:15.125
this is one that I use all
the time is your up and down keys.

55
00:03:15.125 --> 00:03:17.120
So if I start hitting up on my keyboard,

56
00:03:17.120 --> 00:03:21.472
it's gonna start cycling back through my
history of keys of commands that I've run.

57
00:03:21.472 --> 00:03:26.379
So this is really useful if I wanna go
back and say, what did I run ls with,

58
00:03:26.379 --> 00:03:26.948
right?

59
00:03:26.948 --> 00:03:30.694
So if I go back here it's like,
I always run it with lsah, right?

60
00:03:30.694 --> 00:03:34.173
So I can kind of like scroll
backwards through my history and

61
00:03:34.173 --> 00:03:36.198
I could run it again if I wanted to.

62
00:03:36.198 --> 00:03:41.696
And up will take you previous commands,
down will take you forward in commands.

63
00:03:44.212 --> 00:03:48.883
But another thing to keep in mind is that
means that all of your commands are being

64
00:03:48.883 --> 00:03:50.917
stored on your computer, right?

65
00:03:50.917 --> 00:03:54.827
So it actually keeps track
of your bash history.

66
00:03:54.827 --> 00:03:58.461
So if you're putting passwords
into your command line,

67
00:03:58.461 --> 00:04:03.250
those will get stored in your bash
history if you're not careful about it.

68
00:04:03.250 --> 00:04:08.061
Which is a bad thing cuz that means anyone
that can see your bash history can see

69
00:04:08.061 --> 00:04:09.098
your password.

70
00:04:09.098 --> 00:04:11.642
And if you're on a multi user server,

71
00:04:11.642 --> 00:04:15.865
that's a bad thing cuz people
will be able to see your secrets.

72
00:04:15.865 --> 00:04:20.035
So I call that out just so you're aware
that whatever you put in the command line

73
00:04:20.035 --> 00:04:24.267
is gonna be saved in your bash history,
and you can go modify your bash history,

74
00:04:24.267 --> 00:04:25.992
just be aware that it's there.

75
00:04:28.656 --> 00:04:32.942
Okay, so let's do the next one.

76
00:04:32.942 --> 00:04:36.024
We're gonna do tab completions,
you probably see me do this because I

77
00:04:36.024 --> 00:04:39.120
literally cannot, I physically
cannot stop myself from doing this.

78
00:04:39.120 --> 00:04:44.381
So I'm gonna type cd and
I wanna go into the home directory.

79
00:04:44.381 --> 00:04:49.317
So if I type cd and
then I type h, then I hit tab.

80
00:04:49.317 --> 00:04:56.363
[SOUND] I'm not in the root directory,
I wanna be in the root directory.

81
00:04:56.363 --> 00:04:58.497
And I type h and I hit tab.

82
00:04:58.497 --> 00:05:00.657
Notice it just finished it for me.

83
00:05:00.657 --> 00:05:03.925
So again, I'm gonna hit cd and
then h and then tab.

84
00:05:03.925 --> 00:05:05.868
And it finishes out home for me.

85
00:05:05.868 --> 00:05:09.432
The way it does that is it looks and
says, all right,

86
00:05:09.432 --> 00:05:12.930
what could you possibly be talking about,
right?

87
00:05:12.930 --> 00:05:14.448
So you've kind of limited down,

88
00:05:14.448 --> 00:05:17.049
there's only one directory in
here that starts with h and

89
00:05:17.049 --> 00:05:20.970
it's like, there's only one possibility
here, I'm gonna finish it for you.

90
00:05:20.970 --> 00:05:25.240
So that's called tab completion, and
I literally cannot stop doing it.

91
00:05:27.433 --> 00:05:29.720
And then now, it knows that
I'm inside of this directory.

92
00:05:29.720 --> 00:05:32.380
And let's say I don't remember
what's actually in here.

93
00:05:32.380 --> 00:05:33.459
If I hit tab twice.

94
00:05:33.459 --> 00:05:38.350
Actually, there's only one directory in
here, so I don't have to type anything.

95
00:05:38.350 --> 00:05:41.698
So it already knows you could
only possibly go to one place,

96
00:05:41.698 --> 00:05:43.623
I'm just gonna finish that for you.

97
00:05:43.623 --> 00:05:48.770
And then here if I hit tab twice,
it'll show me all of the possibilities.

98
00:05:48.770 --> 00:05:51.673
So those are the only directories
that exists in this and

99
00:05:51.673 --> 00:05:55.587
it's actually smart enough to know
it's like files versus directories.

100
00:05:55.587 --> 00:05:58.389
It's like okay,
I wanna go to the snap directory.

101
00:05:58.389 --> 00:06:03.535
There's only one thing in there and
now there's three things in here,

102
00:06:03.535 --> 00:06:07.329
so you can keep doing this so
on and so forth, right?

103
00:06:07.329 --> 00:06:09.150
So that's very useful as well.

104
00:06:11.555 --> 00:06:14.523
This will also work for
things like ls, so a cd,

105
00:06:14.523 --> 00:06:17.436
it's smart enough to
know just directories.

106
00:06:17.436 --> 00:06:22.487
But if I do ls,
notice it's showing me files as well.

107
00:06:22.487 --> 00:06:26.141
And that's because ls can
be used just with files and

108
00:06:26.141 --> 00:06:28.640
not just with directories as well.

109
00:06:28.640 --> 00:06:31.565
So it actually in that case, it's not
filtering out all the directories.

110
00:06:31.565 --> 00:06:35.614
Cool.

111
00:06:35.614 --> 00:06:38.935
So that's part of tab completion,
that's tab completions for paths.

112
00:06:38.935 --> 00:06:42.490
But let's say I wanted
to do it with programs.

113
00:06:42.490 --> 00:06:47.089
If I type py, and then I hit tab,
it'll show me actually all of

114
00:06:47.089 --> 00:06:52.317
the potential programs that are available
to me that I can run with py.

115
00:06:52.317 --> 00:06:53.804
So in this particular case,
I can run python3, right?

116
00:06:53.804 --> 00:06:56.017
So let's say that's
what I wanted to write.

117
00:06:56.017 --> 00:07:00.700
So I put pyt, and then tab,

118
00:07:00.700 --> 00:07:04.990
and then I get python3.

119
00:07:04.990 --> 00:07:10.029
And it stops there because it knows like,
alright, if you put pyt, you could be

120
00:07:10.029 --> 00:07:15.469
running Python 3, you could be running or
Python 3.6 or Python 3.6m, right?

121
00:07:15.469 --> 00:07:18.354
It knows that there's
a couple possibilities there.

122
00:07:18.354 --> 00:07:20.583
So it'll complete as
much as it can as well.

123
00:07:24.471 --> 00:07:25.304
Cool.

124
00:07:25.304 --> 00:07:26.678
So that's tab completions.

125
00:07:26.678 --> 00:07:31.638
Some programs are smart enough to have
their own tab completions as well,

126
00:07:31.638 --> 00:07:32.924
Git is one of them.

127
00:07:32.924 --> 00:07:38.431
Some programs have their own
tab completions as well and

128
00:07:38.431 --> 00:07:41.367
Git is a good example of that.

129
00:07:41.367 --> 00:07:44.100
I'm not gonna be going into Git
at all in this particular course.

130
00:07:44.100 --> 00:07:48.860
The first reason being is there's
already a fantastic in depth course for

131
00:07:48.860 --> 00:07:51.711
the masters on Git from Nina Zakharchenko.

132
00:07:51.711 --> 00:07:54.396
So you should watch that if
you want to get into Git.

133
00:07:54.396 --> 00:07:57.902
But I do want to show you
an example that if I say git, and

134
00:07:57.902 --> 00:08:00.809
then Git has a bunch of sub commands,
right?

135
00:08:00.809 --> 00:08:02.630
So one of them is describe.

136
00:08:02.630 --> 00:08:07.827
If I type des and I type tab,
it actually knows that Git has

137
00:08:07.827 --> 00:08:12.822
another thing called describe
that I can put in there.

138
00:08:12.822 --> 00:08:17.531
So not everything has tabs completions,
not all programs have tab completions.

139
00:08:17.531 --> 00:08:22.884
The program has to provide those tab
completions to bash before those work.

140
00:08:22.884 --> 00:08:27.545
So I'll just tell you that I almost
never use them for programs because

141
00:08:27.545 --> 00:08:32.378
I can never remember which one has tab
completion and which one does not.

142
00:08:32.378 --> 00:08:35.962
I will use it for Git because
I'm positive that Git has it but

143
00:08:35.962 --> 00:08:40.275
I would venture to say that most
programs don't have tab completions.

144
00:08:45.126 --> 00:08:45.864
Cool.

145
00:08:45.864 --> 00:08:51.350
So let's talk about reverse search.

146
00:08:51.350 --> 00:08:55.354
This is another one that when
my coworker at Reddit showed me,

147
00:08:55.354 --> 00:09:00.060
it actually might have even been Nina
when we worked together at Reddit.

148
00:09:00.060 --> 00:09:04.157
Showed me how to search
my bash history quickly.

149
00:09:04.157 --> 00:09:07.595
If you hit Ctrl+R.

150
00:09:07.595 --> 00:09:10.775
It does this reverse I search here and
I started typing,

151
00:09:10.775 --> 00:09:14.036
let's say I wanted to find
the last ls command that I ran.

152
00:09:14.036 --> 00:09:18.760
I just start typing something and
it's going to start completing based on

153
00:09:18.760 --> 00:09:23.337
things in my bash history So

154
00:09:23.337 --> 00:09:26.690
you can see here, I've typed in ls space,
that's what I've put in there.

155
00:09:26.690 --> 00:09:30.140
And this is the last thing
that I ran that matches that.

156
00:09:30.140 --> 00:09:34.415
And so if I just hit Enter now,
it'll run that from my Bash history.

157
00:09:34.415 --> 00:09:39.403
I use that constantly as well, because my
Bash history is 10 million miles long,

158
00:09:39.403 --> 00:09:42.699
because I've been running
the command line forever.

159
00:09:42.699 --> 00:09:45.646
And this will allow me to
search back through and

160
00:09:45.646 --> 00:09:49.773
find really long complicated
commands that I've run that I don't

161
00:09:49.773 --> 00:09:53.620
want to just hit up to scroll
through until I eventually find.

162
00:09:53.620 --> 00:09:57.650
So another thing to know about the reverse
search, so if I hit Ctrl+R again,

163
00:09:57.650 --> 00:10:01.060
ls space and let's say,
it was another thing that was ls space and

164
00:10:01.060 --> 00:10:04.222
wasn't this one, so
I wanna go further back in the history.

165
00:10:04.222 --> 00:10:08.145
You just hit Ctrl+R again and you'll keep
going back through your history as long as

166
00:10:08.145 --> 00:10:09.424
you keep hitting Ctrl+R.

167
00:10:15.323 --> 00:10:18.469
If you just hit like right or
left on your keyboard,

168
00:10:18.469 --> 00:10:22.581
it'll just drop you into the normal
terminal with that pasted in.

169
00:10:22.581 --> 00:10:28.007
So another one that I just
use absolutely constantly.

