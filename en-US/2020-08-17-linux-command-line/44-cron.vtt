WEBVTT

1
00:00:00.000 --> 00:00:02.689
So you've probably heard me refer to this.

2
00:00:02.689 --> 00:00:03.863
I've said jobs, right?

3
00:00:03.863 --> 00:00:06.732
Like you wanna run this job later or
something like that.

4
00:00:06.732 --> 00:00:10.241
That term refers refers to cron jobs.

5
00:00:10.241 --> 00:00:12.751
And so I don't actually really
know why it's called cron.

6
00:00:12.751 --> 00:00:15.035
I assume it's something to
do with like chronological.

7
00:00:15.035 --> 00:00:17.577
But the idea of cron is that
you have some tasks and

8
00:00:17.577 --> 00:00:19.999
you want it to be run at some interval,
right?

9
00:00:19.999 --> 00:00:24.932
So maybe I have like a logs folder and
I want that logs folder to take all

10
00:00:24.932 --> 00:00:29.119
those logs, upload them to a server and
then delete them.

11
00:00:29.119 --> 00:00:31.377
And I want that to happen every hour,
right?

12
00:00:31.377 --> 00:00:34.202
You can use cron to do that.

13
00:00:34.202 --> 00:00:35.566
So how do you do that?

14
00:00:35.566 --> 00:00:36.884
Well, there's a couple ways of doing it.

15
00:00:36.884 --> 00:00:40.453
One, which works for Ubuntu but
doesn't necessarily work for

16
00:00:40.453 --> 00:00:43.953
every distribution of Linux,
there is a etc/cron folder and

17
00:00:43.953 --> 00:00:47.738
then etc/cron .daily, .hourly,
.monthly, and .weekly.

18
00:00:47.738 --> 00:00:51.404
If you put a script in there,
it will just run daily.

19
00:00:51.404 --> 00:00:53.990
I don't actually know
what time it runs at but

20
00:00:53.990 --> 00:00:57.539
you can be guaranteed that that
task's going to be run daily.

21
00:00:57.539 --> 00:01:02.233
So if we come back over
here to my shell here.

22
00:01:02.233 --> 00:01:04.153
Just close that one.

23
00:01:04.153 --> 00:01:09.961
And I go to etc/cron and I hit Tab.

24
00:01:09.961 --> 00:01:13.141
You can see that there is a cron daily,
a cron hourly, a cron month, and

25
00:01:13.141 --> 00:01:13.831
a cron weekly.

26
00:01:13.831 --> 00:01:16.911
As long as it has the correct
permissions and everything set, and

27
00:01:16.911 --> 00:01:20.215
that it's an executable file,
it will run that every hour every month

28
00:01:20.215 --> 00:01:22.456
as long as that script is
inside of that folder.

29
00:01:22.456 --> 00:01:26.519
So I don't think any of these
will have anything in them.

30
00:01:26.519 --> 00:01:34.811
I mean, we can check etc/cron .hourly or
monthly?

31
00:01:34.811 --> 00:01:37.294
Nope, so these are empty.

32
00:01:37.294 --> 00:01:38.709
Look, there's some for daily.

33
00:01:38.709 --> 00:01:42.153
So you can see here aptitude
has one that's run,

34
00:01:42.153 --> 00:01:47.277
password has something that it's running,
a port app compatibility,

35
00:01:47.277 --> 00:01:51.057
these things have put things
into this cron folder for

36
00:01:51.057 --> 00:01:54.172
them to be run every looks like day,
right?

37
00:01:54.172 --> 00:01:57.646
So these are all running daily.

38
00:01:57.646 --> 00:02:00.765
And keep in mind your computer has to be
running for the cron job to run, right?

39
00:02:00.765 --> 00:02:04.556
It doesn't run while it's off,
I think that makes sense, but

40
00:02:04.556 --> 00:02:06.426
sometimes bears mentioning.

41
00:02:06.426 --> 00:02:10.909
So, this is this works,
this is a totally valid way to do it.

42
00:02:10.909 --> 00:02:13.360
Sometimes you need a bit
more granular control,

43
00:02:13.360 --> 00:02:16.785
like maybe you need something to
run during off peaks hour, right?

44
00:02:16.785 --> 00:02:19.692
So if you're going to be transferring
a bunch of data off your server and

45
00:02:19.692 --> 00:02:22.703
into your database, you don't want
to do that during peak traffic hour.

46
00:02:22.703 --> 00:02:27.742
You want to do that like 2 A.M when
most of your users are sleeping.

47
00:02:27.742 --> 00:02:36.232
So that's when cron is
gonna come in handy.

48
00:02:36.232 --> 00:02:37.980
Yeah.
So just the one thing to make sure

49
00:02:37.980 --> 00:02:40.742
if you're putting something
inside of these cron folders,

50
00:02:40.742 --> 00:02:42.378
make sure you give it the chmod +x.

51
00:02:42.378 --> 00:02:44.730
It must be an executable file right?

52
00:02:44.730 --> 00:02:47.322
That's one thing I'll tell you.

53
00:02:47.322 --> 00:02:52.743
All right, so, let's go into

54
00:02:52.743 --> 00:02:57.954
our my bin again, my bin, and

55
00:02:57.954 --> 00:03:03.388
let's make a new file in here.

56
00:03:03.388 --> 00:03:07.942
We'll call it vi make

57
00:03:07.942 --> 00:03:12.247
new file like that.

58
00:03:12.247 --> 00:03:20.216
And I'm going to put in here
my hash bangs /bin/bash and

59
00:03:20.216 --> 00:03:25.540
I'm going to chmod +x make new file.

60
00:03:25.540 --> 00:03:31.932
Okay, so now I have this make new file And

61
00:03:31.932 --> 00:03:36.985
I'm going to vi make new file, and

62
00:03:36.985 --> 00:03:44.495
I'm gonna put in here,
make dir-p temp-files.

63
00:03:44.495 --> 00:03:50.918
I'm gonna cd into the temp-files,

64
00:03:50.918 --> 00:03:56.718
and I'm going to touch file- and

65
00:03:56.718 --> 00:04:03.970
then I'm going to do a subcommand here for

66
00:04:03.970 --> 00:04:09.164
the date, date+%s.txt.

67
00:04:09.164 --> 00:04:10.276
So what does this do?

68
00:04:10.276 --> 00:04:13.063
Remember dollar signs, parentheses,
that does a subcommand.

69
00:04:13.063 --> 00:04:14.969
So this is going to run
some sort of command and

70
00:04:14.969 --> 00:04:16.837
whatever it returns is
going to put in here.

71
00:04:16.837 --> 00:04:21.586
The plus is telling it what
format you want the date in and

72
00:04:21.586 --> 00:04:26.858
the %s is the Linux timestamp or
the Unix timestamp, right?

73
00:04:26.858 --> 00:04:33.151
So it's how many seconds have
elapsed since January 1, 1970?

74
00:04:33.151 --> 00:04:38.378
Okay, so all this is gonna do is it's
going to create the file of the folder, cd

75
00:04:38.378 --> 00:04:44.186
into the folder, and it's going to create
a new file with the file-timestamp.txt.

76
00:04:44.186 --> 00:04:46.865
That's all it does.

77
00:04:46.865 --> 00:04:51.399
So actually, just to show you,
I'll show you how to run this as well.

78
00:04:51.399 --> 00:04:53.016
Okay, so I'm gonna write and quit here.

79
00:04:53.016 --> 00:04:57.316
If I run this date plus that, right,
it'll just be a long number, right?

80
00:04:57.316 --> 00:05:03.639
So this is how many seconds have
elapsed since January 1, 1970.

81
00:05:03.639 --> 00:05:09.760
Okay, now if I run make
new file like that and

82
00:05:09.760 --> 00:05:15.723
I go into what did I call that,
temp files?

83
00:05:15.723 --> 00:05:19.810
You can see here it created that.

84
00:05:19.810 --> 00:05:23.580
But let's say I want this
to be run every minute.

85
00:05:23.580 --> 00:05:25.890
Well, let's go do that.

86
00:05:25.890 --> 00:05:31.226
I'm going to say crontab -e and
then it's going to ask

87
00:05:31.226 --> 00:05:36.336
you what editor you want to
use to edit your crontab.

88
00:05:36.336 --> 00:05:39.954
And you can use nano that's where as you
can see there it says points of this being

89
00:05:39.954 --> 00:05:40.602
the easiest.

90
00:05:40.602 --> 00:05:43.760
And definitely do not say for.

91
00:05:43.760 --> 00:05:46.388
We learned that ed is not
the one that you want to choose.

92
00:05:46.388 --> 00:05:49.535
And you can see, I actually don't know
the difference between vim.basic and

93
00:05:49.535 --> 00:05:52.028
vim.tiny, but I'm gonna go with 2,
cuz that's just vim.

94
00:05:52.028 --> 00:05:57.321
But feel free to use nano if you want to,
okay?

95
00:05:57.321 --> 00:05:58.296
Notice, these are all comments.

96
00:05:58.296 --> 00:06:01.338
This is kind of leaving you some helpful
comments of how to interact with this.

97
00:06:01.338 --> 00:06:04.226
But I'm gonna show you.

98
00:06:04.226 --> 00:06:11.326
So the first thing we're gonna do is
there's how many stars here, five?

99
00:06:11.326 --> 00:06:15.832
Yeah, so star star star star star.

100
00:06:15.832 --> 00:06:21.039
And then you want to put
the thing that you want to run.

101
00:06:21.039 --> 00:06:26.587
So in my case,
I want it to run the command that

102
00:06:26.587 --> 00:06:32.573
I want to run which is making
file which is going to

103
00:06:32.573 --> 00:06:39.290
be in /home/ubuntu/my_bin/make_new_file.

104
00:06:39.290 --> 00:06:42.406
Okay, so
it's going to run this command right,

105
00:06:42.406 --> 00:06:47.279
which we made sure that has the right
execute permissions, which is great.

106
00:06:47.279 --> 00:06:49.790
So let's talk about these stars for
a second.

107
00:06:49.790 --> 00:06:54.276
This stars is letting Linux know, or

108
00:06:54.276 --> 00:06:59.917
cron rather,
I want this to run on if this is for

109
00:06:59.917 --> 00:07:03.547
minutes, this is for hours.

110
00:07:03.547 --> 00:07:08.456
Let's say I have minutes,
hours, day of the week,

111
00:07:08.456 --> 00:07:12.036
the month, sorry, day of the month.

112
00:07:12.036 --> 00:07:13.166
So this is the date.

113
00:07:13.166 --> 00:07:15.917
So this would be like, let me start over.

114
00:07:15.917 --> 00:07:19.388
This is minutes, hours,
day of the month, so

115
00:07:19.388 --> 00:07:24.382
this will be the 25th day of the month or
the 3rd day of the month.

116
00:07:24.382 --> 00:07:28.646
This is which month to run, and so you can
say like only run this every December.

117
00:07:28.646 --> 00:07:30.322
And then the day of the week is here.

118
00:07:30.322 --> 00:07:36.751
So this is like run only on Sundays or
run every on Tuesdays, okay?

119
00:07:36.751 --> 00:07:39.057
So let's let's just go and
do an example here.

120
00:07:39.057 --> 00:07:42.286
If I'd replaced this with 5,

121
00:07:42.286 --> 00:07:48.256
this would run every hour on
the fifth minute of the hour.

122
00:07:48.256 --> 00:07:52.867
Or if I did this, 25, this would run every
hour on the 25th minute of the hour.

123
00:07:52.867 --> 00:07:57.428
Or I could do 5, 25 and
this will run on the 5th and

124
00:07:57.428 --> 00:08:00.454
the 25th minutes of every hour.

125
00:08:02.745 --> 00:08:06.195
If I do this and
change this instead, this will run,

126
00:08:11.287 --> 00:08:15.916
Every 12th hour, right?

127
00:08:18.635 --> 00:08:21.616
Yeah, So

128
00:08:21.616 --> 00:08:26.682
as you can see here I get
wildly confused because when I

129
00:08:26.682 --> 00:08:31.645
think about crontabs, and
thank God for cron guru.

130
00:08:31.645 --> 00:08:36.171
I this is what exactly what I do every
single time is I come to this lovely

131
00:08:36.171 --> 00:08:41.158
website, crontab.guru, and I just enter
this in until I get what I actually

132
00:08:41.158 --> 00:08:45.403
expect so this will take translate
crontab speak into Brian speak

133
00:08:48.257 --> 00:08:53.629
So, if I do this, That's okay.

134
00:08:53.629 --> 00:08:58.565
So, that's what this does is it's
gonna run every minute past hour 12.

135
00:08:58.565 --> 00:09:01.933
So it's gonna run for
one hour basically every day.

136
00:09:01.933 --> 00:09:06.246
But if I do this it's gonna run
at 12:05 exactly every day.

137
00:09:07.937 --> 00:09:10.587
Does that kinda makes sense?

138
00:09:10.587 --> 00:09:13.090
Yeah, it's It's confusing, but

139
00:09:13.090 --> 00:09:18.521
it's also powerful enough that you can
refer to what you actually need to do.

140
00:09:18.521 --> 00:09:23.994
So this runs every minute if I do it this
way, or here it'll run at minute one every

141
00:09:23.994 --> 00:09:29.405
single hour, or if I put here at the end,
this will run every minute on Mondays.

142
00:09:32.198 --> 00:09:40.425
This will run every minute of every Monday
that is the first day of the month.

143
00:09:40.425 --> 00:09:45.187
So not frequently I think is
the answer to that question.

144
00:09:45.187 --> 00:09:51.257
All right, so most of the time I'm not
really in here messing too much with it.

145
00:09:51.257 --> 00:09:55.075
I'll either come in here and say,
I want this to run every hour,

146
00:09:55.075 --> 00:09:57.849
which will be like
something like that right?

147
00:09:57.849 --> 00:10:00.577
Or you can do this like I want
this to run every 30 minutes.

148
00:10:00.577 --> 00:10:04.224
If you put the /30,
that means I want this to run every,

149
00:10:04.224 --> 00:10:06.764
whatever this is divisible by, right?

150
00:10:06.764 --> 00:10:10.065
So if I do this, this would be every
second minute, every fifth minute.

151
00:10:10.065 --> 00:10:14.309
Every ten minutes, so
on and so forth, right?

152
00:10:14.309 --> 00:10:18.633
And there's also a couple that
you can do what like this daily.

153
00:10:18.633 --> 00:10:22.021
This would be every day at
midnight this would run.

154
00:10:22.021 --> 00:10:23.911
Another useful one is reboot.

155
00:10:23.911 --> 00:10:26.387
This will run every single time
that you reboot the computer.

156
00:10:26.387 --> 00:10:27.297
It'll rerun it.

157
00:10:27.297 --> 00:10:31.977
You could also do that from your bash/rc
if you're doing it from interactive

158
00:10:31.977 --> 00:10:32.555
shells.

159
00:10:32.555 --> 00:10:35.395
So anyway crontab.guru, just go in there,

160
00:10:35.395 --> 00:10:39.672
mess with it until it says the English
that you anticipated saying.

161
00:10:39.672 --> 00:10:41.490
That's exactly what I do.

162
00:10:41.490 --> 00:10:46.498
So for hours, I want it to run,
let's say every

163
00:10:46.498 --> 00:10:51.141
two minutes, so I'm gonna put /2 there.

164
00:10:51.141 --> 00:10:53.931
And I'm going to write quit.

165
00:10:53.931 --> 00:10:56.480
And then if you're doing
it through crontab -e,

166
00:10:56.480 --> 00:11:00.076
it'll automatically restart
the crontab and it'll start running.

167
00:11:00.076 --> 00:11:00.628
So, right now we have just
the one file in there.

168
00:11:00.628 --> 00:11:05.126
So eventually within
the next couple of minutes,

169
00:11:05.126 --> 00:11:11.239
hopefully we'll see it create
another file and it'll keep going.

170
00:11:11.239 --> 00:11:12.903
And keep in mind if you leave it there,

171
00:11:12.903 --> 00:11:16.134
it will continue running every two
minutes as long as your computer is up.

172
00:11:19.567 --> 00:11:23.481
Another thing to keep in mind while we're
waiting for this is I put this in, so

173
00:11:23.481 --> 00:11:26.086
this is actually going to
run this as root, right?

174
00:11:26.086 --> 00:11:29.842
Because I didn't specify user and
by default, it will run as root.

175
00:11:29.842 --> 00:11:32.295
Again, not something I would
typically suggest you doing.

176
00:11:32.295 --> 00:11:36.408
I would suggest you do
this as crontab -u Ubuntu.

177
00:11:36.408 --> 00:11:41.599
So run it as you or create a new user and
run it as the user and then do this.

178
00:11:41.599 --> 00:11:47.304
So you can see here, yeah,
it's still in there.

179
00:11:51.175 --> 00:11:53.180
Yeah.
So yeah, that's good.

180
00:11:53.180 --> 00:11:55.699
And you can see there, it created a file.

181
00:11:55.699 --> 00:11:56.915
I didn't actually run it.

182
00:11:56.915 --> 00:11:59.242
That was the crontab that actually ran it.

183
00:11:59.242 --> 00:12:03.177
And by default,
I guess it does run it as you so

184
00:12:03.177 --> 00:12:08.250
I guess I could come in here and
say, run this as root if I had

185
00:12:08.250 --> 00:12:13.762
something that had to be run as root and
then you have to do sudo.

186
00:12:13.762 --> 00:12:18.020
So now, I would be doing this and this
would be running as root, but in general

187
00:12:18.020 --> 00:12:22.362
you want to run it as yourself or another
user with less permissions than root.

