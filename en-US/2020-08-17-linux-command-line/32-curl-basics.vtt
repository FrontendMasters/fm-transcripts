WEBVTT

1
00:00:00.225 --> 00:00:03.924
Okay, so we just went over Wget,
which is a fine and great program, but

2
00:00:03.924 --> 00:00:07.635
I wanna get you into cURL, which is
actually what I use most of the time.

3
00:00:07.635 --> 00:00:11.831
I find like cURL fits better into kind
of like the greater Unix ecosystem, so

4
00:00:11.831 --> 00:00:13.419
I think it's easier to use.

5
00:00:13.419 --> 00:00:18.176
And easier to use,
I'm not gonna say even easier to use,

6
00:00:18.176 --> 00:00:23.150
it fits better my use case for
what that program needs to do.

7
00:00:23.150 --> 00:00:30.558
So everything that I've showed you
with Wget, you can do with cURL.

8
00:00:30.558 --> 00:00:34.109
In fact, let's just go ahead and take
a look at how you would do that, right?

9
00:00:34.109 --> 00:00:40.102
So here, I'm gonna go out and
grab this same URL, right, the 2048 game.

10
00:00:40.102 --> 00:00:44.775
And I'm gonna come over here and say curl,
which is gonna go out to the Internet and

11
00:00:44.775 --> 00:00:46.691
grab this file, paste that URL.

12
00:00:46.691 --> 00:00:50.420
And if I just run it without anything
else, it's going to go get that and

13
00:00:50.420 --> 00:00:52.719
it's going to print it
out to standard out,

14
00:00:52.719 --> 00:00:55.105
which is not what you normally want,
right?

15
00:00:55.105 --> 00:00:56.902
You want it to actually go into a file.

16
00:00:56.902 --> 00:01:02.914
So you just do it the normal Linux way and
I'm just gonna put an angle bracket,

17
00:01:02.914 --> 00:01:06.626
and I'm gonna put that into game.sh,
right?

18
00:01:10.979 --> 00:01:15.688
Yeah, sorry,
you have to put the curl in front, curl,

19
00:01:15.688 --> 00:01:18.808
URL, angle bracket into game.sh.

20
00:01:21.461 --> 00:01:27.332
Right, and so now you can see here
I have whatever game was, game.sh.

21
00:01:27.332 --> 00:01:30.523
And if I cut game.sh,
you can see it's the file, right?

22
00:01:30.523 --> 00:01:35.504
So that's how you would do it with using
cURL, how you would normally do with Wget,

23
00:01:35.504 --> 00:01:36.013
right?

24
00:01:36.013 --> 00:01:37.206
So again, personal preference.

25
00:01:37.206 --> 00:01:38.845
I see people who use both of them.

26
00:01:38.845 --> 00:01:42.384
I just kind of forget that Wget exists and
always use cURL.

27
00:01:46.485 --> 00:01:50.185
And I guess the thing to say
is wherever Wget's available,

28
00:01:50.185 --> 00:01:52.634
almost always cURL is also available.

29
00:01:52.634 --> 00:01:58.044
I think there's one distro of Linux,
maybe BusyBox Linux or Alpine or

30
00:01:58.044 --> 00:02:02.997
something like that,
one of those super minimalistic Alpine or

31
00:02:02.997 --> 00:02:06.956
Linux distributions omits cURL and
just has Wget.

32
00:02:06.956 --> 00:02:11.825
But like that's the only case
that I've ever run into that,

33
00:02:11.825 --> 00:02:15.462
and you can always
install cURL very easily.

34
00:02:15.462 --> 00:02:19.715
So what I'm saying is you can focus on
one and forget about the other, and

35
00:02:19.715 --> 00:02:21.127
that's totally okay.

36
00:02:21.127 --> 00:02:25.449
Okay, so now what I wanna show you to
do is what I primarily use cURL for,

37
00:02:25.449 --> 00:02:29.648
I don't frequently download files
from the Internet into my shell.

38
00:02:29.648 --> 00:02:33.269
I mean that does happen maybe once
a month, once every other month.

39
00:02:33.269 --> 00:02:36.853
But I do a lot of API development
since I'm a Node.js developer.

40
00:02:36.853 --> 00:02:42.007
And when you're doing API development,
you frequently want to hit an endpoint and

41
00:02:42.007 --> 00:02:45.908
see if it's responding the way
that you want it to, right, and

42
00:02:45.908 --> 00:02:47.542
cURL is perfect for that.

43
00:02:47.542 --> 00:02:50.960
So I'm gonna show you how to do that, you
would do this instead of using something

44
00:02:50.960 --> 00:02:53.372
like Postman or Insomnia, or
something like like that,

45
00:02:53.372 --> 00:02:55.963
you can do all this stuff just
using good old fashioned cURL.

46
00:02:55.963 --> 00:03:04.068
So what we're gonna do is we're gonna
start an API server on our local VM,

47
00:03:04.068 --> 00:03:08.532
and then we're gonna use cURL to hit it.

48
00:03:08.532 --> 00:03:11.680
So what I want you to do is I want
you to open another tab here.

49
00:03:11.680 --> 00:03:15.960
So again,
this is gonna drop me into Mac, and

50
00:03:15.960 --> 00:03:20.138
I'm going to say multipass shell primary.

51
00:03:20.138 --> 00:03:24.862
And again, you can do this with
PowerShell to get into it as well.

52
00:03:24.862 --> 00:03:29.660
Okay, so now I have two open windows and
they're both connected primary,

53
00:03:29.660 --> 00:03:34.168
it's not two different VM to this,
both are connected to the same VM.

54
00:03:34.168 --> 00:03:39.034
And we're gonna use Python to start
just a super quick server, right?

55
00:03:39.034 --> 00:03:42.540
So go to your home directory, right,
so I'm in my home directory here.

56
00:03:42.540 --> 00:03:47.745
And I'm gonna say python3

57
00:03:47.745 --> 00:03:54.308
-m http.server 8000 dash,

58
00:03:54.308 --> 00:04:01.556
dash bind, 0.0.0.0, okay?

59
00:04:01.556 --> 00:04:08.949
So now this is going to start running
a python3 static web server, right?

60
00:04:08.949 --> 00:04:13.063
So this would be analogous
to something like Nginx,

61
00:04:13.063 --> 00:04:16.615
it'd be analogous to Apache, or PHP -S, or

62
00:04:16.615 --> 00:04:21.674
Node.js is like HTTP or server,
something like that, right?

63
00:04:21.674 --> 00:04:25.045
So it's just gonna serve files
from your local directory.

64
00:04:25.045 --> 00:04:29.823
And we're gonna do this to kind of emulate
what an API server would look like.

65
00:04:29.823 --> 00:04:34.732
So just to show you how this works,
if I come over here to the other one,

66
00:04:34.732 --> 00:04:39.741
I'm gonna hit ifconfig just to get
the same Internet address, right?

67
00:04:39.741 --> 00:04:44.836
So this one's 192.168.64.2,
I'm going to grab that.

68
00:04:44.836 --> 00:04:50.032
I'm gonna come over here and I'm gonna
open a new tab just in my local browser,

69
00:04:50.032 --> 00:04:53.281
paste that in there and
then put colon 8000.

70
00:04:53.281 --> 00:04:58.933
And you can see here this is running
a local server from that home directory,

71
00:04:58.933 --> 00:05:04.076
so you can see these are all the files
that I have in my home directory.

72
00:05:04.076 --> 00:05:07.244
Mind you, don't necessarily run a server
like this is, this is just purely for

73
00:05:07.244 --> 00:05:08.254
development purposes.

74
00:05:08.254 --> 00:05:11.582
But the reason why I'm doing this with
you right now, if we look back over our

75
00:05:11.582 --> 00:05:15.338
server, it's going to show you all the
traffic that it's gonna be getting, right?

76
00:05:15.338 --> 00:05:20.068
So it means someone from this IP address,
my IP address,

77
00:05:20.068 --> 00:05:26.081
at this time made a GET request to
the root directory using HTTP 1.1 and

78
00:05:26.081 --> 00:05:29.448
it gave back a 200 response, right?

79
00:05:29.448 --> 00:05:34.395
So we're gonna be doing some cURL requests
to show you how this is going to be

80
00:05:34.395 --> 00:05:35.818
hitting the server.

81
00:05:35.818 --> 00:05:37.515
Makes sense so far?

82
00:05:37.515 --> 00:05:41.638
So I'm showing you with Python just
because Python I know was installed on

83
00:05:41.638 --> 00:05:42.714
every Ubuntu box.

84
00:05:42.714 --> 00:05:46.571
Well, it's like we would have
to go install Node to use Node,

85
00:05:46.571 --> 00:05:48.954
you do not wanna learn Python from me.

86
00:05:48.954 --> 00:05:52.280
There's still Reddit code in
production that runs my Python,

87
00:05:52.280 --> 00:05:56.999
and I'm surprised that it's still standing
up if we're being totally honest about it.

88
00:05:56.999 --> 00:06:03.354
I wrote Python for like six months and so
it was okay, it was an interesting time.

89
00:06:03.354 --> 00:06:05.522
Most of Python I learned
from Nina Zakharenko,

90
00:06:05.522 --> 00:06:07.752
who has a Python course
now in Frontend Masters.

91
00:06:07.752 --> 00:06:10.428
We used to work together at Reddit.

