WEBVTT

1
00:00:00.000 --> 00:00:05.275
Let's go ahead and
get into wildcards and replacements.

2
00:00:07.899 --> 00:00:12.391
So I showed you before,
if we go into folder1, right?

3
00:00:12.391 --> 00:00:17.800
That you can touch file1,
file2, file3, file4.

4
00:00:17.800 --> 00:00:18.603
Right?

5
00:00:18.603 --> 00:00:25.715
Well, let's go back in here and
let's make a folder2 go into folder2.

6
00:00:25.715 --> 00:00:27.582
Let's do this a quicker way.

7
00:00:27.582 --> 00:00:30.632
So I'm gonna do touch, file, folder.

8
00:00:30.632 --> 00:00:31.725
Wow, file.

9
00:00:31.725 --> 00:00:35.415
Then I'm gonna put a curly brace and

10
00:00:35.415 --> 00:00:39.850
I'll do 1,2,3,4 like that .txt.

11
00:00:39.850 --> 00:00:45.111
And now if you look in here,
I made file1, file2, file3, and file4.

12
00:00:45.111 --> 00:00:50.027
So what this curly brace does is
it's a replacement and I'm saying,

13
00:00:50.027 --> 00:00:53.517
for every option in here,
repeat that, right?

14
00:00:53.517 --> 00:00:56.955
So this actually expands out
to the exact same thing.

15
00:00:56.955 --> 00:01:02.539
Touch file1.txt, touch file2.txt,
so on and so forth.

16
00:01:02.539 --> 00:01:05.970
But it allows me to write
that in a shorter way.

17
00:01:05.970 --> 00:01:10.988
Now what's nice about this is it's
actually bash that does this and

18
00:01:10.988 --> 00:01:12.320
it's not touch.

19
00:01:12.320 --> 00:01:16.411
So, the final command that touch
receives is touch file1.txt,

20
00:01:16.411 --> 00:01:19.269
touch file2 or touch file1.txt, file2.

21
00:01:19.269 --> 00:01:24.245
So, it's expanded out before it gets
into the program, which is good,

22
00:01:24.245 --> 00:01:28.280
because it means the program
doesn't have to support it.

23
00:01:28.280 --> 00:01:31.786
Bash just does that for you automatically.

24
00:01:31.786 --> 00:01:34.820
And this doesn't just apply to numbers,
right?

25
00:01:34.820 --> 00:01:36.955
So I could say touch.

26
00:01:41.782 --> 00:01:42.839
Let's do this.

27
00:01:42.839 --> 00:01:48.145
mn, wa, mt, ut, like that.

28
00:01:48.145 --> 00:01:52.071
And you can see there, it expanded all

29
00:01:52.071 --> 00:01:56.989
that stuff out as well
with texts there as well.

30
00:01:56.989 --> 00:02:00.096
So that's called expansion.

31
00:02:00.096 --> 00:02:04.017
There's a lot of fanciness
that you can do with this, and

32
00:02:04.017 --> 00:02:07.545
I'm not really gonna show
you much more than that.

33
00:02:07.545 --> 00:02:12.336
I think the last thing maybe I'll
show you here is let's say I was

34
00:02:12.336 --> 00:02:14.300
going to do like ca and ny.

35
00:02:14.300 --> 00:02:18.952
Let's say I wanted to have one that was
just file dash and so it actually didn't

36
00:02:18.952 --> 00:02:22.831
have anything, if I just put a comma
there with nothing after it,

37
00:02:22.831 --> 00:02:26.171
that's actually a third
entry in there that's empty.

38
00:02:26.171 --> 00:02:30.707
So one of these files would be called
file-.txt, right, which is this one.

39
00:02:30.707 --> 00:02:35.632
And that's because they have that extra
comma there at the end which can be useful

40
00:02:35.632 --> 00:02:36.436
sometimes.

41
00:02:40.891 --> 00:02:41.631
Okay.

42
00:02:41.631 --> 00:02:44.314
So that's expansion or

43
00:02:44.314 --> 00:02:49.819
at least that's basic expansion for
right now.

44
00:02:49.819 --> 00:02:53.572
Let's put another one in here.

45
00:02:53.572 --> 00:02:58.248
I'm gonna put file10.txt.

46
00:02:58.248 --> 00:03:02.632
Let's say I wanted to find all of the
files in here that didn't have the dash in

47
00:03:02.632 --> 00:03:04.667
here, that were just the numbers.

48
00:03:04.667 --> 00:03:08.596
I could say Well hold on,

49
00:03:08.596 --> 00:03:13.446
let's do ls first, File-.

50
00:03:13.446 --> 00:03:17.395
And I wanted to find everything
that had the file- in it.

51
00:03:17.395 --> 00:03:22.236
If I put that star right there
that's called a wildcard, right?

52
00:03:22.236 --> 00:03:27.572
And it's only gonna match things that
have thing before it plus stuff after it.

53
00:03:27.572 --> 00:03:29.984
Right?

54
00:03:29.984 --> 00:03:33.941
So you can see here,
it found all the file dashes but

55
00:03:33.941 --> 00:03:37.542
didn't find anything
with the numbers in it.

56
00:03:37.542 --> 00:03:39.480
So that's again an expansion.

57
00:03:39.480 --> 00:03:42.146
And that's something that
bash is doing for us.

58
00:03:42.146 --> 00:03:47.857
So what the ls command finally ends up
seeing is file-ca, file-mn, file-nt,

59
00:03:47.857 --> 00:03:52.932
and so it's actually doing all that
expansion for you, that matching.

60
00:03:52.932 --> 00:03:57.623
So it's actually looking at its own
file system to figure that out for you.

61
00:03:57.623 --> 00:04:02.412
What happens if I do file* like that,

62
00:04:02.412 --> 00:04:07.928
that's gonna find,
Basically everything, right?

63
00:04:12.001 --> 00:04:12.831
Let's make another one.

64
00:04:12.831 --> 00:04:15.887
So if I say touchFile.txt.

65
00:04:19.800 --> 00:04:24.896
So if I put file* here, it can go in
the middle as well, or maybe it can't.

66
00:04:24.896 --> 00:04:30.522
I'm doing touch that's why.

67
00:04:33.419 --> 00:04:38.238
So if I do ls file*.txt, notice it's

68
00:04:38.238 --> 00:04:43.211
still finding relatively everything.

69
00:04:43.211 --> 00:04:47.863
But notice here that it is find file.txt.

70
00:04:47.863 --> 00:04:50.204
What if I wanted to match
at least one thing right?

71
00:04:50.204 --> 00:04:52.893
So something has to be there,
star will match nothing and

72
00:04:52.893 --> 00:04:55.312
it will match anything that matches that,
right?

73
00:04:55.312 --> 00:04:57.611
So if you put question mark there,

74
00:04:57.611 --> 00:05:02.141
so question mark actually is going
to match exactly one character.

75
00:05:02.141 --> 00:05:08.542
So notice that it dropped all the -mn,
the -nt, the 10, right, 10 didn't show up.

76
00:05:08.542 --> 00:05:10.993
And also file.txt didn't show up either.

77
00:05:10.993 --> 00:05:15.938
So things that have in there
two characters match there.

78
00:05:15.938 --> 00:05:20.590
So by the same token, I could do And

79
00:05:20.590 --> 00:05:23.337
notice that it found only ones
that have States after them.

80
00:05:23.337 --> 00:05:25.741
Frankly, I don't use the question
mark a whole lot, but

81
00:05:25.741 --> 00:05:27.055
I use the star one all the time.

82
00:05:27.055 --> 00:05:31.077
So I'm going to go ahead and
create another folder here, mkdir folder3.

83
00:05:31.077 --> 00:05:38.624
Going into folder3, and I wanna come in
here and I wanna make file 1 through 30.

84
00:05:38.624 --> 00:05:45.190
I can actually do touch file1..30
using curly braces here and .txt.

85
00:05:45.190 --> 00:05:51.831
And if you look here, it actually
goes out and expands 1 through 30.

86
00:05:51.831 --> 00:05:53.128
And so that can be useful as well.

87
00:05:53.128 --> 00:05:58.890
And it's not just useful for numbers, you
can actually do it for letters as well.

88
00:05:58.890 --> 00:06:07.402
So if I do a..z like that,
it actually went through and created all.

89
00:06:07.402 --> 00:06:11.200
You know, file A, file B, file C,
file D, so on and so forth.

90
00:06:11.200 --> 00:06:17.178
Let's just do it with Echo, because
I'm creating a lot of files right now.

91
00:06:17.178 --> 00:06:21.574
But if I do a..z like that,
notice that it does that.

92
00:06:21.574 --> 00:06:23.035
But you can also go backwards.

93
00:06:23.035 --> 00:06:24.988
Z..A.

94
00:06:24.988 --> 00:06:31.488
And you can even skip with ..2, and
it will do every odd one right?

95
00:06:31.488 --> 00:06:34.795
Or every five.

96
00:06:34.795 --> 00:06:38.586
And you can do echo,

97
00:06:38.586 --> 00:06:43.047
1 to 100..10.

98
00:06:45.545 --> 00:06:48.260
It's probably more useful if you
do it from 0 or more interesting.

99
00:06:52.017 --> 00:06:55.066
So, there's some pretty
fun stuff with that.

100
00:06:55.066 --> 00:06:58.002
I mean, you can go, it's actually
just doing ranges of characters.

101
00:06:58.002 --> 00:07:01.729
So that works with capital A's, but

102
00:07:01.729 --> 00:07:07.269
if I do like lowercase a,
those are next to each other.

103
00:07:07.269 --> 00:07:11.940
So let's do capital

104
00:07:11.940 --> 00:07:16.892
A to the lowercase c.

105
00:07:16.892 --> 00:07:20.974
There you go, anyway,
I was escaping every time.

106
00:07:20.974 --> 00:07:24.010
There's a whole range of
things that you wanna do, for

107
00:07:24.010 --> 00:07:28.168
the most part you're not gonna use
ranges to do crazy things like that, but

108
00:07:28.168 --> 00:07:31.140
I will find myself doing it
with the numbers for sure.

109
00:07:34.789 --> 00:07:39.553
There's also some fanciness you can do
with like using them next to each other.

110
00:07:39.553 --> 00:07:45.729
So I can do a to z and
I can also do 1 to 5.

111
00:07:45.729 --> 00:07:52.472
It'll actually give me every permutation
of that, a1, a2, a3, a4, a5, b1, right?

112
00:07:52.472 --> 00:07:54.274
And you can start getting like,

113
00:07:54.274 --> 00:07:57.823
pretty insane with how much you
want to put in there, right?.

114
00:07:57.823 --> 00:08:02.816
But that's also how you can do that.

115
00:08:02.816 --> 00:08:07.649
Again, that's not terribly useful all
the time, but there's going to be like one

116
00:08:07.649 --> 00:08:12.290
occasion like, hey, I needed to create
like so many of these files all at once.

117
00:08:12.290 --> 00:08:13.290
How am I going to do that?

118
00:08:13.290 --> 00:08:14.439
This is a useful way of doing that.

119
00:08:14.439 --> 00:08:19.284
&gt;&gt; What if your file contains a star or
a question mark?

120
00:08:19.284 --> 00:08:22.129
&gt;&gt; I'm not sure that's a valid path.

121
00:08:22.129 --> 00:08:25.873
So it actually might not even be valid for
Linux to do that, but

122
00:08:25.873 --> 00:08:28.469
normally the way you
can do that is with \.

123
00:08:28.469 --> 00:08:30.936
So let's try, file,

124
00:08:42.748 --> 00:08:43.929
Yeah, no it is, right there.

125
00:08:43.929 --> 00:08:45.036
You can see it.

126
00:08:45.036 --> 00:08:49.715
So the way I did it right there,
this is called an escape character,

127
00:08:49.715 --> 00:08:54.558
which I imagine many of you if you've
been programming have seen how to

128
00:08:54.558 --> 00:08:55.722
do that before.

129
00:08:55.722 --> 00:08:59.980
The backslash means like, the next
character that you're about to see I want

130
00:08:59.980 --> 00:09:02.810
literally this character and
not something else.

131
00:09:02.810 --> 00:09:07.018
Like you'll see it with spaces, so

132
00:09:07.018 --> 00:09:13.066
I can make touch a file,
and then backslash space.

133
00:09:17.512 --> 00:09:23.310
And now that you can see right there,
this one right here.

134
00:09:23.310 --> 00:09:26.923
It actually literally put the space
character into my file name.

135
00:09:26.923 --> 00:09:29.661
So yeah, use the backslash.

136
00:09:29.661 --> 00:09:35.133
And I imagine someone's asking
themselves questions like well then

137
00:09:35.133 --> 00:09:41.827
how do I do backsplash, or backsplash,
backslash, you just put two backslashes,

138
00:09:41.827 --> 00:09:46.188
so if I do touchFile and
then I'd put two backslashes.

139
00:09:47.425 --> 00:09:50.586
You can see right there I have
the backslash in it right there.

