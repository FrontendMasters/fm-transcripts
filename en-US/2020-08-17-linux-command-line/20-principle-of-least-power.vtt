WEBVTT

1
00:00:00.000 --> 00:00:05.161
Linux is a multi-user operating system
by default, meaning that you can have

2
00:00:05.161 --> 00:00:10.960
multiple people logged in, but users don't
even necessarily have to be other people.

3
00:00:10.960 --> 00:00:12.751
It can be other programs.

4
00:00:12.751 --> 00:00:17.347
It can be temporary users.

5
00:00:17.347 --> 00:00:19.819
There's a bunch of stuff
that you can use users for.

6
00:00:19.819 --> 00:00:25.539
In our case,
if we go back to our command line here,

7
00:00:30.455 --> 00:00:35.824
You can see here I have ubuntu,
that's actually the name of my user.

8
00:00:35.824 --> 00:00:41.340
So by default, Multipass setting up for
us a user named ubuntu.

9
00:00:41.340 --> 00:00:45.744
So it's always useful to know that you
can say, who am I, just like that.

10
00:00:45.744 --> 00:00:48.483
It's a program that just goes and
finds out who you are.

11
00:00:48.483 --> 00:00:53.683
It's not even necessarily
an existential question of, who am I?

12
00:00:53.683 --> 00:00:57.779
It's not gonna tell you,
you are as strong and independent person,

13
00:00:57.779 --> 00:00:59.694
unless that's your username.

14
00:00:59.694 --> 00:01:02.221
That's actually might be a good one.

15
00:01:02.221 --> 00:01:05.489
But anyway, when you ask,
who am I, it's gonna say ubuntu.

16
00:01:05.489 --> 00:01:11.514
And ubuntu, sorry, you just say ubuntu.

17
00:01:15.394 --> 00:01:19.058
Yeah, so that is the default user just for
Multipass.

18
00:01:19.058 --> 00:01:22.548
That's not necessarily the default
user for Ubuntu in general or Linux or

19
00:01:22.548 --> 00:01:23.571
anything like that.

20
00:01:23.571 --> 00:01:25.920
It's just for this one.

21
00:01:25.920 --> 00:01:31.474
But we can see, if we say, cat etc/passwd,
like that, we can actually

22
00:01:31.474 --> 00:01:37.595
see the name of all of the users on our
computer at this particular time, right?

23
00:01:37.595 --> 00:01:42.432
So cat passwd is actually a file that
exists in your computer that keeps track

24
00:01:42.432 --> 00:01:45.014
of all of your various different users.

25
00:01:45.014 --> 00:01:50.898
So we we have daemon, bin,
sys, sync, man, lp, mail.

26
00:01:50.898 --> 00:01:54.418
You can see that there is actually quite
a few users set up by default on ubuntu

27
00:01:54.418 --> 00:01:56.076
without us ever having to doing it.

28
00:01:56.076 --> 00:01:59.265
The only one that we actually
know anything about is ubuntu.

29
00:02:01.221 --> 00:02:04.028
But there's a bunch of them, right,

30
00:02:04.028 --> 00:02:08.078
like nobody,
nobody has an account on your computer.

31
00:02:08.078 --> 00:02:11.561
I don't remember what
the rest of these are.

32
00:02:11.561 --> 00:02:15.326
I know this one here,
this is the home directory that they have,

33
00:02:15.326 --> 00:02:18.699
because each one of them has
a different home directory.

34
00:02:18.699 --> 00:02:22.367
And then this one right here
is called their login shell.

35
00:02:22.367 --> 00:02:27.596
So if you log in as ubuntu, it's
automatically going to log you into bash,

36
00:02:27.596 --> 00:02:32.578
but for example, something here like lxd,
that's a different user.

37
00:02:32.578 --> 00:02:36.304
Their login shell is false, which is
a program that just returns false.

38
00:02:36.304 --> 00:02:40.995
So it means that they actually can't
log in interactively, which you can,

39
00:02:40.995 --> 00:02:42.911
right, cuz yours is bin bash.

40
00:02:46.530 --> 00:02:47.137
So why do we have all these users?

41
00:02:47.137 --> 00:02:49.584
Why don't we just run everything
as root and call it good?

42
00:02:49.584 --> 00:02:53.229
Well, if that question doesn't make you
a little uncomfortable, it's cuz you don't

43
00:02:53.229 --> 00:02:56.592
necessarily understand yet what I'm
getting at, but hopefully soon you will.

44
00:02:56.592 --> 00:02:59.693
This is kinda the principle
of least power, and

45
00:02:59.693 --> 00:03:04.358
I've actually talked about this
before in some of my other workshops.

46
00:03:04.358 --> 00:03:06.352
In particular,
in the containers one I talk about it.

47
00:03:06.352 --> 00:03:09.679
You want each user to have
the least amount of power possible.

48
00:03:09.679 --> 00:03:12.512
Now, why is that?

49
00:03:12.512 --> 00:03:14.583
Let's say, for example, someone for

50
00:03:14.583 --> 00:03:18.532
for some reason is able to get a hold
of the password for the, I don't know,

51
00:03:18.532 --> 00:03:23.072
news user, I don't know how they would but
let's pretend for a second that they did.

52
00:03:23.072 --> 00:03:26.557
If they tried to log in as the news user,
they would end up logging in as a no

53
00:03:26.557 --> 00:03:30.386
login, which would basically just kick
them out, so you can actually log in and

54
00:03:30.386 --> 00:03:31.152
kick them out.

55
00:03:31.152 --> 00:03:35.937
So it means that user actually has
no power to accomplish anything

56
00:03:35.937 --> 00:03:39.162
via an interactive shell, which is great.

57
00:03:39.162 --> 00:03:45.110
It means it's not gonna allow them to
like log in, doing conventional things.

58
00:03:45.110 --> 00:03:49.863
So that's the principle of least power in
effect here, that you've actually kind of

59
00:03:49.863 --> 00:03:53.837
shut down one vector of attack for
attackers to get into your computer.

60
00:03:53.837 --> 00:03:57.153
Now, I'm running Multipass
here on my local computer.

61
00:03:57.153 --> 00:04:00.807
It's not really that big of a deal
if someone gets into it, but

62
00:04:00.807 --> 00:04:04.817
if you're running a server on
production that's running Ubuntu,

63
00:04:04.817 --> 00:04:08.571
you don't want people to be able
to attack your your computer.

64
00:04:08.571 --> 00:04:12.639
So all this to say is if you have
some sort of job that needs to

65
00:04:12.639 --> 00:04:17.373
run on your computer, you want to
run it as an unprivileged user, so

66
00:04:17.373 --> 00:04:22.691
that if someone gets a hold of the login
credentials for that unprivileged,

67
00:04:22.691 --> 00:04:26.627
they're not able to blow things up or
exfiltrate data.

68
00:04:26.627 --> 00:04:31.302
By the same token, you're afraid of
nefarious actors out there that are trying

69
00:04:31.302 --> 00:04:35.999
to get into your computer, but you also
should have a healthy fear of yourself.

70
00:04:35.999 --> 00:04:42.261
Maybe you try and run a script and
it has an rm -rf * star on it.

71
00:04:42.261 --> 00:04:46.623
I don't know, it's happened before,
weirder things have happened.

72
00:04:46.623 --> 00:04:50.398
But if it's an unprivileged user that
can't delete files, then you've already

73
00:04:50.398 --> 00:04:53.970
saved yourself just by the permissions
that the user is allowed to do things.

74
00:04:53.970 --> 00:04:56.182
So that's the idea of users here,

75
00:04:56.182 --> 00:05:00.609
cuz you want to give these accounts
the least amount of privilege that

76
00:05:00.609 --> 00:05:05.595
they can have to be able to make changes
that still allows them to do their job.

77
00:05:08.252 --> 00:05:14.251
Okay, so again here, if I say,
whoami, I am ubuntu.

78
00:05:14.251 --> 00:05:19.051
But now, if I go to the root directory and
I try and make a directory here,

79
00:05:19.051 --> 00:05:23.851
and say, call it hi, it's gonna say,
hey, ubuntu you can't make hi,

80
00:05:23.851 --> 00:05:25.861
permission denied, right?

81
00:05:25.861 --> 00:05:29.070
I don't actually have permissions to
do anything in that root directory.

82
00:05:29.070 --> 00:05:29.900
Why is that?

83
00:05:29.900 --> 00:05:34.661
Well, the only user that has inherent
privilege to be able to create things in

84
00:05:34.661 --> 00:05:37.824
that root directory is root,
root is the only one.

85
00:05:37.824 --> 00:05:43.106
So if you just say ls -lsa,
notice everything here is from root root.

86
00:05:43.106 --> 00:05:47.289
The second one is the group, and
we'll talk about that a little bit,

87
00:05:47.289 --> 00:05:51.279
in a little bit, but
right now we're focused on root, the user.

88
00:05:51.279 --> 00:05:56.218
The root user is the only one that has any
sort of privilege in this root directory

89
00:05:56.218 --> 00:05:58.290
to be able to do anything, okay?

90
00:05:58.290 --> 00:06:05.886
Whereas if I go into home, you'll notice
here that there's a ubuntu directory,

91
00:06:05.886 --> 00:06:10.509
that's my home directory
as the ubuntu user, and

92
00:06:10.509 --> 00:06:13.825
that directory is owned by ubuntu.

93
00:06:13.825 --> 00:06:19.162
That means me, ubuntu, can do anything
that I want inside of that directory.

94
00:06:19.162 --> 00:06:21.276
So it's kind of containing that chaos,
right?

95
00:06:21.276 --> 00:06:26.088
So I can't, as the ubuntu user,
I can't actually run rm,

96
00:06:26.088 --> 00:06:28.410
I can't actually run this.

97
00:06:28.410 --> 00:06:32.358
I'm almost scared to run it
because you really shouldn't, but

98
00:06:32.358 --> 00:06:33.974
I know that I can't do it.

99
00:06:39.206 --> 00:06:41.396
That's funny.

100
00:06:41.396 --> 00:06:44.935
So rm actually, so don't do this,
what I actually just did,

101
00:06:44.935 --> 00:06:48.080
please don't because it's
probably not gonna work.

102
00:06:48.080 --> 00:06:50.512
But it actually has a failsafe,
and it was like, wait, no,

103
00:06:50.512 --> 00:06:52.110
don't you're not allowed to do that.

104
00:06:52.110 --> 00:06:54.696
But I think even if I did that, it
wouldn't allow me to do it because ubuntu

105
00:06:54.696 --> 00:06:56.770
doesn't have permission to
delete that root directory.

106
00:06:56.770 --> 00:06:58.149
Don't try it, just believe me.

107
00:06:58.149 --> 00:07:04.231
[LAUGH] However, as ubuntu,
I could totally say rm -rf ubuntu,

108
00:07:04.231 --> 00:07:10.893
and that would absolutely work
because I have permissions to do that.

