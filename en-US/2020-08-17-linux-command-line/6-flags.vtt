WEBVTT

1
00:00:00.000 --> 00:00:03.601
So let's get into something called flags.

2
00:00:03.601 --> 00:00:07.946
So I've already shown you one flag,
kind of unintentionally and that's help.

3
00:00:07.946 --> 00:00:15.797
So if I say ls,
let's do pwd again, -- help.

4
00:00:15.797 --> 00:00:18.363
This -- help is actually
what's called a flag.

5
00:00:18.363 --> 00:00:22.666
It's saying turn this thing on or
off, right?

6
00:00:22.666 --> 00:00:26.402
So in this particular case,
I'm saying I want to run pwd but

7
00:00:26.402 --> 00:00:28.287
I want to run pwd in help mode.

8
00:00:28.287 --> 00:00:31.803
And help mode just spew out
all of your help information,

9
00:00:31.803 --> 00:00:33.715
that's all helped mode does.

10
00:00:33.715 --> 00:00:37.103
Let's talk about one that's a little
bit more interesting than that.

11
00:00:37.103 --> 00:00:41.837
One thing I'm gonna say, people
are probably going to try an echo --

12
00:00:41.837 --> 00:00:45.384
help right now and
it's just going to echo out help.

13
00:00:45.384 --> 00:00:50.242
That's to be expected because
echo is just trying to output

14
00:00:50.242 --> 00:00:55.694
literally everything in there and
I think, there is a way to do it.

15
00:00:57.893 --> 00:01:02.139
Anyway, if you're trying to run echo help,

16
00:01:02.139 --> 00:01:07.389
you're going to see that and
there is a way to run the echo

17
00:01:07.389 --> 00:01:12.111
in help mode but
we won't talk about it right now.

18
00:01:12.111 --> 00:01:17.105
So, going back to flags,
you have ls, right?

19
00:01:17.105 --> 00:01:21.841
And ls just shows you everything in
the directory but you can actually say

20
00:01:21.841 --> 00:01:25.968
I want to see more information
than what I'm seeing right now.

21
00:01:25.968 --> 00:01:32.089
So if I say ls-l,
it'll actually give me more information.

22
00:01:32.089 --> 00:01:35.029
So this -l is another kind of flag.

23
00:01:35.029 --> 00:01:42.566
And this is telling me here is
the long form output of this.

24
00:01:42.566 --> 00:01:43.461
So you can see here,

25
00:01:43.461 --> 00:01:46.470
this isn't super interesting because
I only have one file in here.

26
00:01:46.470 --> 00:01:50.910
But it tells me this is from
the ubuntu user from the ubuntu group.

27
00:01:50.910 --> 00:01:57.737
You can tell see that this is 4096
bytes big, aka four kilobytes,

28
00:01:57.737 --> 00:02:02.493
and this was created on June 30 at 10:45.

29
00:02:02.493 --> 00:02:04.669
It's a directory called Ubuntu.

30
00:02:04.669 --> 00:02:08.929
Okay, and then we'll get into these
are the permissions right here but

31
00:02:08.929 --> 00:02:10.633
we'll get into that later.

32
00:02:10.633 --> 00:02:15.709
So -l is another flag that just tells
you here is the long form output.

33
00:02:19.208 --> 00:02:25.322
Okay, so now what happens if we
wanna have two different flags?

34
00:02:25.322 --> 00:02:28.152
Well, we can do -l and
then we can do an ls-a.

35
00:02:28.152 --> 00:02:33.867
And what -a does is it says show
me hidden files and directories.

36
00:02:33.867 --> 00:02:38.611
So in this particular case, it'll show you
the relative path of the [INAUDIBLE] is

37
00:02:38.611 --> 00:02:40.934
actually represents this directory.

38
00:02:40.934 --> 00:02:42.343
So this directory is 4 kilobytes big,

39
00:02:42.343 --> 00:02:44.187
which is the minimum size
in this particular case.

40
00:02:44.187 --> 00:02:46.876
And dot dot is shows you to go up but

41
00:02:46.876 --> 00:02:51.216
that's the -a does is show
me all the hidden things.

42
00:02:51.216 --> 00:02:57.587
So just for fun,
let's create an extra hidden file.

43
00:02:57.587 --> 00:03:00.672
So I'm gonna use a file
program called Touch.

44
00:03:00.672 --> 00:03:04.261
And this is gonna be called .hidden-file.

45
00:03:04.261 --> 00:03:08.479
No, sorry,
I need to do that inside of Ubuntu.

46
00:03:08.479 --> 00:03:13.475
So now I'm inside of the Ubuntu directory.

47
00:03:13.475 --> 00:03:17.966
Touch.hidden-file and
the dot means it's a hidden file, and

48
00:03:17.966 --> 00:03:22.304
touch just creates a file,
we'll go over that later as well.

49
00:03:22.304 --> 00:03:26.783
And you can see now there's
actually a bunch of stuff in here.

50
00:03:26.783 --> 00:03:32.152
One of which is hidden file that
I just created right there.

51
00:03:32.152 --> 00:03:34.980
But there's a bunch of
hidden files in here.

52
00:03:34.980 --> 00:03:37.883
But now if I run this again,
without the -a,

53
00:03:37.883 --> 00:03:42.926
you'll see all of that stuff is hidden and
all I can see is the home directory and

54
00:03:42.926 --> 00:03:46.231
the snap directory inside
of my Ubuntu directory.

55
00:03:46.231 --> 00:03:53.185
So, that is what flags are.

56
00:03:53.185 --> 00:03:55.611
We've talked about two different kinds.

57
00:03:55.611 --> 00:04:01.356
One is the long flags and that's
gonna be something like help, right?

58
00:04:01.356 --> 00:04:05.819
So the two dashes means
that I'm doing one flag and

59
00:04:05.819 --> 00:04:08.908
it's a long way of writing it out.

60
00:04:08.908 --> 00:04:11.601
So another way of doing that,
I think, would be -h maybe.

61
00:04:11.601 --> 00:04:16.744
Nope, so let's do ls--help.

62
00:04:16.744 --> 00:04:22.211
Help, and that's what all of
these things are is telling you,

63
00:04:22.211 --> 00:04:28.162
what all of its flags are, so
let's see if we can find help here.

64
00:04:28.162 --> 00:04:34.166
No, doesn't even exist, but
Let's take a look at -a.

65
00:04:34.166 --> 00:04:38.109
So -a is that one that we're looking at,

66
00:04:38.109 --> 00:04:44.879
it says show me the hidden files,
but you can also write -a as --all.

67
00:04:44.879 --> 00:04:47.958
So --all so if I do ls-all and

68
00:04:47.958 --> 00:04:52.937
ls-a, you can notice those
are the same output.

69
00:04:52.937 --> 00:05:00.734
That's because -a is just
the shorter way of writing --all.

70
00:05:00.734 --> 00:05:06.107
So, the one dash is the shorthand, the two
dashes is the long way of doing it.

71
00:05:08.390 --> 00:05:10.903
Now, why do they have different dashes?

72
00:05:10.903 --> 00:05:17.135
Well, if I have ls-a-l, right,
where I have two different flags here.

73
00:05:17.135 --> 00:05:22.411
The way I can actually rewrite
that is just -al or -la.

74
00:05:22.411 --> 00:05:26.272
So the one dash means I'm gonna
give you a bunch of flags all at

75
00:05:26.272 --> 00:05:28.407
once just right in a row, right?

76
00:05:28.407 --> 00:05:33.377
So I don't have to write -l -a,
I can just write -la, so

77
00:05:33.377 --> 00:05:36.224
that's why it's just one dash.

78
00:05:36.224 --> 00:05:39.113
It's letting you know a bunch
of flags are coming in here.

79
00:05:39.113 --> 00:05:41.181
If I did -help like this,

80
00:05:41.181 --> 00:05:46.268
it would think that I'm passing
in four flags of -h -e -l -p.

81
00:05:46.268 --> 00:05:47.688
That's all you have to do --help.

82
00:05:47.688 --> 00:05:53.046
And you can mix and match too,
right, I could do -a or

83
00:05:53.046 --> 00:05:57.463
ls--all -l, it would be the same thing.

84
00:06:05.426 --> 00:06:07.705
Questions about flags so far?

85
00:06:07.705 --> 00:06:10.932
I know I'm going really into depth
on flags, but they're so important.

86
00:06:10.932 --> 00:06:11.557
They're so

87
00:06:11.557 --> 00:06:15.878
core to running stuff in the command line
that you kinda need to know how they work.

88
00:06:20.336 --> 00:06:25.149
And I'll be honest, I didn't really
know why there was one dash and

89
00:06:25.149 --> 00:06:29.301
why there's two dashes until
halfway through my career.

90
00:06:29.301 --> 00:06:32.145
That's probably shameful to admit out
loud but I know it now, all right.

91
00:06:32.145 --> 00:06:38.036
So, one more thing about

92
00:06:38.036 --> 00:06:42.804
flags as you can also

93
00:06:42.804 --> 00:06:48.414
pass things to the flags

94
00:06:48.414 --> 00:06:52.910
directly as well.

95
00:06:52.910 --> 00:06:57.848
So if I come in here and I have a snap
directory, right, let's say for

96
00:06:57.848 --> 00:07:01.254
a second I wanted to
ignore the snap directory.

97
00:07:01.254 --> 00:07:07.557
Well, there is a flag that says --ignore,
right, which is what I would want to do.

98
00:07:07.557 --> 00:07:11.374
And I can just say --ignore=snap.

99
00:07:11.374 --> 00:07:14.186
And you can see here that
it just ignores that but

100
00:07:14.186 --> 00:07:18.488
that's what that dash dash equals,
this tells me I want to ignore this.

101
00:07:23.189 --> 00:07:25.218
And I think you can
probably do this as well.

102
00:07:25.218 --> 00:07:28.657
Oops, so often,
that equals is optional as well and

103
00:07:28.657 --> 00:07:31.861
not always,
which is kind of annoying as well and

104
00:07:31.861 --> 00:07:36.173
that's kind of what you're going
to find with the command line.

105
00:07:36.173 --> 00:07:41.022
Every program works a little bit
differently because they were

106
00:07:41.022 --> 00:07:45.972
written by different people in
different decades frequently.

107
00:07:45.972 --> 00:07:49.563
So some of them will respect this
equal signs and some of them won't.

108
00:07:49.563 --> 00:07:51.946
Some of them require it, right?

109
00:07:51.946 --> 00:07:55.002
It's wild which ones work and
which ones don't.

110
00:07:55.002 --> 00:07:58.305
Sometimes you just kinda
have to remember it.

111
00:07:58.305 --> 00:08:02.056
I think with this one as well,
you can also give it multiple times.

112
00:08:02.056 --> 00:08:06.208
So let's say I wanted
to ignore home as well.

113
00:08:06.208 --> 00:08:10.493
And you can see there now
I can't see anything.

114
00:08:10.493 --> 00:08:12.042
That makes sense, right?

115
00:08:12.042 --> 00:08:18.343
If you want to ignore multiple things you
can pass in the same flag multiple times.

116
00:08:18.343 --> 00:08:23.176
But again, the way that flags are handled
is actually not native to [INAUDIBLE],

117
00:08:23.176 --> 00:08:26.364
it's actually native to
how programs are written.

118
00:08:26.364 --> 00:08:28.852
So it depends on how each
one of these is written.

119
00:08:28.852 --> 00:08:29.612
Now luckily,

120
00:08:29.612 --> 00:08:33.741
most of these computer scientists have
been working in concert for decades.

121
00:08:33.741 --> 00:08:36.448
So they work for the most part
in ways that you would expect.

122
00:08:36.448 --> 00:08:40.569
But if you'll find that if this one works
one way, sometimes another one won't work

123
00:08:40.569 --> 00:08:43.310
the same way and
you kind of just have to know sometimes.

124
00:08:49.123 --> 00:08:54.282
So last thing I'll leave you here is every
time that I run ls, I always run it with

125
00:08:54.282 --> 00:08:59.675
-lsah and I actually don't even remember
most of the time, what those stand for.

126
00:08:59.675 --> 00:09:03.681
But it actually gives you this full output
and that's why I use most of the time.

127
00:09:03.681 --> 00:09:09.056
It gives you the size in kilobytes,
megabytes, which is useful.

128
00:09:09.056 --> 00:09:10.446
It's a little bit more human readable.

129
00:09:10.446 --> 00:09:12.460
It shows you all the hidden files.

130
00:09:12.460 --> 00:09:13.755
What is s?

131
00:09:13.755 --> 00:09:14.797
I can't even remember.

132
00:09:14.797 --> 00:09:17.316
See, I mean this is
exactly I'm talking about.

133
00:09:17.316 --> 00:09:18.851
It's just it's second nature.

134
00:09:18.851 --> 00:09:22.281
-S is for, so

135
00:09:22.281 --> 00:09:26.946
that's the size one.

136
00:09:26.946 --> 00:09:32.637
So that's what shows you kilobytes instead
of bytes, and then H is human readable.

137
00:09:32.637 --> 00:09:35.045
I guess that's what that one is so

138
00:09:35.045 --> 00:09:39.700
S is it's just show the size in
general like how big files are.

139
00:09:43.836 --> 00:09:48.960
I've actually seen some people will
actually, yeah, modify the their

140
00:09:48.960 --> 00:09:54.766
[INAUDIBLE] so that when they run ls, it
actually automatically runs it with lsah.

141
00:09:54.766 --> 00:10:02.005
Cool, I think that's it.

142
00:10:02.005 --> 00:10:10.689
Yeah, that's the last thing I
was going to show you as well.

143
00:10:10.689 --> 00:10:16.672
We were doing ignore, right,
ls-ignore snap, right?

144
00:10:16.672 --> 00:10:21.205
You can also do ls-capital I snap as well,
right?

145
00:10:21.205 --> 00:10:24.853
Most of the long form ones also
have short hands and vice versa.

146
00:10:24.853 --> 00:10:29.571
So and it's always case sensitive.

147
00:10:29.571 --> 00:10:33.583
So if I do lowercase i that's going to
be a different flag than dash capital I.

148
00:10:33.583 --> 00:10:38.520
And again, you just have to know or
you have to look it up every single time.

149
00:10:38.520 --> 00:10:44.543
And in particular, something like
ls where it's such a flexible tool.

150
00:10:44.543 --> 00:10:49.077
You can see it has 30
flags that you can get it.

151
00:10:56.363 --> 00:11:00.421
All right, how are we feeling about
command lines so far is it going okay?

152
00:11:02.651 --> 00:11:03.497
Awesome.

153
00:11:03.497 --> 00:11:04.525
Thumbs up is exactly what I wanna see.

154
00:11:08.530 --> 00:11:10.449
All right, let's keep going.

155
00:11:20.083 --> 00:11:24.062
So now you should be feeling a bit more
comfortable with how to run commands with

156
00:11:24.062 --> 00:11:25.517
the command lines, right?

157
00:11:25.517 --> 00:11:29.244
You have to run the command,
you have to give it its parameters,

158
00:11:29.244 --> 00:11:31.252
you have to give it its flags.

159
00:11:31.252 --> 00:11:33.807
Something else I will
tell you about flags.

160
00:11:33.807 --> 00:11:37.640
Some programs care where you put them and
some of them don't, and

161
00:11:37.640 --> 00:11:39.529
that's also kind of annoying.

162
00:11:39.529 --> 00:11:42.432
Let's just see with ls here for
just a second if I say ls, where am I?

163
00:11:42.432 --> 00:11:49.439
Okay, so if I say ls snap, right, which
will have some stuff in there, right?

164
00:11:49.439 --> 00:11:51.033
It has one folder in there.

165
00:11:51.033 --> 00:11:52.870
If I say ls-lsah snap.

166
00:11:52.870 --> 00:11:57.409
Okay, that works.

167
00:11:57.409 --> 00:11:59.947
What happens if I say ls snap-la.

168
00:11:59.947 --> 00:12:02.937
It works, right?

169
00:12:02.937 --> 00:12:07.090
So, this one is a good one that it
doesn't care what order I give it, right?

170
00:12:07.090 --> 00:12:08.792
It just knows that, okay.

171
00:12:13.283 --> 00:12:15.300
If I see the dash and it's a flag and

172
00:12:15.300 --> 00:12:19.627
it can handle that some programs
profoundly care where you put the flags.

173
00:12:19.627 --> 00:12:23.603
So I will say the standard place to put
the flags is immediately after the command

174
00:12:23.603 --> 00:12:24.622
so it would be here.

175
00:12:29.918 --> 00:12:33.700
But there's a bunch of programs
that you can put it afterwards.

176
00:12:33.700 --> 00:12:36.520
Just be aware that sometimes
that that order matters and

177
00:12:36.520 --> 00:12:38.924
is just depends on how
the program was written.

178
00:12:43.364 --> 00:12:45.348
That's a good one to know,
that trips me up all the time.

179
00:12:45.348 --> 00:12:49.378
So I would just say get used to putting
them first because you'll just save

180
00:12:49.378 --> 00:12:50.880
yourself some heartache.

