WEBVTT

1
00:00:00.000 --> 00:00:03.472
This is kind of a fundamental concept,
and we've been using them without

2
00:00:03.472 --> 00:00:06.277
you necessarily understanding
that they're being used.

3
00:00:09.235 --> 00:00:13.160
So, I eluded to this in the very beginning
when I'm talking about the Unix philosophy

4
00:00:13.160 --> 00:00:16.866
that you have to assume that the output of
any program could be the input to another

5
00:00:16.866 --> 00:00:17.371
program.

6
00:00:17.371 --> 00:00:21.128
And the way that this is accomplish
lead us to things to kinda

7
00:00:21.128 --> 00:00:25.577
like connected together through
something called streams in pipes.

8
00:00:25.577 --> 00:00:30.182
So, you'll have this one
stream of characters and

9
00:00:30.182 --> 00:00:35.122
you'll pipe that into
another stream of characters.

10
00:00:35.122 --> 00:00:39.974
So, a good example of that is,
I'm gonna make another folder.

11
00:00:39.974 --> 00:00:42.156
We'll just call this like streams.

12
00:00:42.156 --> 00:00:43.992
Let me go into streams.

13
00:00:43.992 --> 00:00:51.383
And let's say I have a string of text and
I want that to be output to another file.

14
00:00:51.383 --> 00:00:56.856
What I can do is I can say echo,
this is my text, right?

15
00:00:56.856 --> 00:00:59.254
So, if I say that, right?

16
00:00:59.254 --> 00:01:05.826
This just that outputs it to
the standard out pipe, right?

17
00:01:05.826 --> 00:01:08.579
Or to the stream, the standard out stream.

18
00:01:08.579 --> 00:01:11.995
So, now notice first of all,
it didn't output that to my screen so

19
00:01:11.995 --> 00:01:13.403
it never echoed anything.

20
00:01:13.403 --> 00:01:14.847
I'm just gonna output that to the user,
right?

21
00:01:14.847 --> 00:01:17.009
So, now notice first of all,
it didn't output that to my screen so

22
00:01:17.009 --> 00:01:17.908
it never echoed anything.

23
00:01:17.908 --> 00:01:20.062
So, now notice first of all,
it didn't output that to my screen so

24
00:01:20.062 --> 00:01:20.952
it never echoed anything.

25
00:01:20.952 --> 00:01:22.935
So now notice first of all,
it didn't output that to my screen so

26
00:01:22.935 --> 00:01:23.790
it never echoed anything.

27
00:01:23.790 --> 00:01:26.428
So, now notice first of all,
it didn't output that to my screen so

28
00:01:26.428 --> 00:01:27.523
it never echoed anything.

29
00:01:27.523 --> 00:01:30.356
So, now notice first of all,
it didn't output that to my screen so

30
00:01:30.356 --> 00:01:31.529
it never echoed anything.

31
00:01:31.529 --> 00:01:37.365
So, now notice first of all,
it didn't output that to my screen so

32
00:01:37.365 --> 00:01:43.007
it never echoed anything, but
now I have this new-file.txt.

33
00:01:43.007 --> 00:01:46.892
And if I cat that file,
you'll see that my text went into that.

34
00:01:46.892 --> 00:01:49.803
That's pretty cool, right?

35
00:01:49.803 --> 00:01:54.011
So, I'm redirecting that output from
hitting the screen to going into a file.

36
00:01:54.011 --> 00:01:56.212
This is the standard out.

37
00:01:56.212 --> 00:02:02.214
So 1 and then angle bracket,
redirects just standard out.

38
00:02:02.214 --> 00:02:04.878
It doesn't redirect anything else
it just redirect standard out.

39
00:02:08.862 --> 00:02:11.703
So, what happens if I do cat new-file.txt?

40
00:02:11.703 --> 00:02:16.522
But instead of letting that go
to my screen, I redirect that to

41
00:02:16.522 --> 00:02:21.917
another-file.txt, what do you
think that's gonna happen then?

42
00:02:27.053 --> 00:02:28.699
I just copied the file, right?

43
00:02:28.699 --> 00:02:31.162
Like I basically, just did copy.

44
00:02:31.162 --> 00:02:36.275
So, if I cat another file now,
it's this is my text, but I just

45
00:02:36.275 --> 00:02:42.851
redirected that from standard out from
going to the screen into another-file.

46
00:02:42.851 --> 00:02:46.402
So, it's basically,
a poor man's copy, okay?

47
00:02:46.402 --> 00:02:50.761
So, if I do this again,
I have new-file.txt.

48
00:02:50.761 --> 00:02:54.829
But if I put a second angle bracket there,

49
00:02:54.829 --> 00:03:02.283
what it does instead of replacing
the file, it appends to the file, right?

50
00:03:02.283 --> 00:03:05.245
So, now if I look inside
of another-file.txt,

51
00:03:05.245 --> 00:03:07.579
this is my text shows up in there twice.

52
00:03:07.579 --> 00:03:09.354
Whereas if I did it
with just one of these,

53
00:03:13.589 --> 00:03:16.936
It's just once now because
what I actually did is I said,

54
00:03:16.936 --> 00:03:20.658
throw everything out you had
before replace it with new stuff.

55
00:03:20.658 --> 00:03:24.145
So, two of them adds and
one of them replaces.

56
00:03:29.112 --> 00:03:30.350
Okay?

57
00:03:30.350 --> 00:03:31.792
So that is standard out.

58
00:03:31.792 --> 00:03:35.200
Everything that I've shown you so
far is you're

59
00:03:35.200 --> 00:03:40.112
basically redirecting the output of
a file or the output of a program.

60
00:03:40.112 --> 00:03:41.492
And you can do with anything right?

61
00:03:41.492 --> 00:03:44.932
So, I can do ls -lsah, and

62
00:03:44.932 --> 00:03:50.472
I want to redirect that to ls.txt, right?

63
00:03:50.472 --> 00:03:57.975
And now if I go into ls.txt,
it's just the output of that.

64
00:03:57.975 --> 00:04:03.640
Something that's kind of
interesting if I just do cat or

65
00:04:03.640 --> 00:04:08.942
sorry if I do ls into ls.txt,
so if I do ls right now,

66
00:04:08.942 --> 00:04:14.865
it does it this way where it's
just like one file per line.

67
00:04:14.865 --> 00:04:18.719
If there's a directory in there,
it'll actually colorize that for me, but

68
00:04:18.719 --> 00:04:20.095
right now if I cat ls.txt.

69
00:04:20.095 --> 00:04:24.323
Notice that there are new lines, and there
are no color would ever show up here.

70
00:04:24.323 --> 00:04:28.702
That's because a program can
detect that it's being redirected.

71
00:04:28.702 --> 00:04:33.368
And it can actually, like reformat itself
to be more machine friendly, right?

72
00:04:33.368 --> 00:04:37.531
And, so this is a more machine
friendly where it's one file per line.

73
00:04:37.531 --> 00:04:38.439
Just kind of interesting.

74
00:04:44.390 --> 00:04:46.824
So, let's talk about standard error for
just a second.

75
00:04:46.824 --> 00:04:50.379
So, we've been just been looking at
standard out which is like output of

76
00:04:50.379 --> 00:04:51.560
a particular program.

77
00:04:51.560 --> 00:04:56.519
There's another stream that we're
also reading from at the same time

78
00:04:56.519 --> 00:04:58.293
called standard error.

79
00:04:58.293 --> 00:05:01.982
So, let's try this again.

80
00:05:01.982 --> 00:05:07.094
Let's say,
if I say cat non-existent-file.txt,

81
00:05:07.094 --> 00:05:12.660
I get, hey, that thing that you asked for
doesn't exist.

82
00:05:12.660 --> 00:05:17.930
But what happens if I try and redirect
the standard out of that to cat.txt?

83
00:05:17.930 --> 00:05:23.632
Well, notice that I still
see the error message and

84
00:05:23.632 --> 00:05:26.690
nothing went to cat.txt.

85
00:05:26.690 --> 00:05:27.406
Why is that?

86
00:05:27.406 --> 00:05:31.250
Well, we directed standard out,
which is where all the output goes, and

87
00:05:31.250 --> 00:05:33.988
there was no output because
that was not a real file.

88
00:05:33.988 --> 00:05:37.941
It does create the file because it assumes
that stuff is gonna end up going there.

89
00:05:37.941 --> 00:05:45.510
But we still saw the error output come
out here, wherever that was here.

90
00:05:45.510 --> 00:05:49.958
That's because standard out, and
standard error are different.

91
00:05:49.958 --> 00:05:53.733
Standard error is just for
errors and like things like that,

92
00:05:53.733 --> 00:05:58.410
so it's actually frequently useful
to redirect standard out somewhere.

93
00:05:58.410 --> 00:06:02.379
This will be like all of your reporting
and metrics and all that kind of stuff,

94
00:06:02.379 --> 00:06:05.861
maybe for like your server if you're
running a server that way, and

95
00:06:05.861 --> 00:06:07.594
then you can redirect standard.

96
00:06:07.594 --> 00:06:09.403
And it airs somewhere else and
this will be like your airlocks, right?

97
00:06:09.403 --> 00:06:12.016
That's why they kind of
separate those two things out.

98
00:06:12.016 --> 00:06:15.394
So, if I can do this now.

99
00:06:15.394 --> 00:06:17.747
So, instead of being a one here,

100
00:06:17.747 --> 00:06:22.213
I can redirect this to be a two
which is gonna be standard error.

101
00:06:22.213 --> 00:06:24.535
And then all of a sudden
this to error.txt.

102
00:06:28.849 --> 00:06:32.676
So, now I have error.txt,
and if I cat error.txt,

103
00:06:32.676 --> 00:06:37.445
you'll see that the error message
actually ended up going there.

104
00:06:37.445 --> 00:06:40.800
Makes sense.

105
00:06:40.800 --> 00:06:47.012
So, again one angle bracket
redirects standard out,

106
00:06:47.012 --> 00:06:52.287
two angle bracket
redirects standard error.

107
00:06:52.287 --> 00:06:57.777
And yeah, so actually that's a good point

108
00:06:57.777 --> 00:07:03.427
is you can actually do
both at the same time.

109
00:07:03.427 --> 00:07:08.087
So, if I do ls -lsah, like that, and

110
00:07:08.087 --> 00:07:15.096
I can do 1&gt; ls.txt and
I can do, 2&gt; ls -error.txt.

111
00:07:15.096 --> 00:07:16.601
That's frequently all you'll see,

112
00:07:16.601 --> 00:07:19.468
is you'll redirect standard out one
place to redirect standard error,

113
00:07:19.468 --> 00:07:22.067
a different place, and
they just go to the kind of separate ways.

114
00:07:22.067 --> 00:07:25.928
Well, labs that I want him
to go to the same place.

115
00:07:25.928 --> 00:07:30.262
You can actually just leave
the number off like that, and

116
00:07:30.262 --> 00:07:35.960
that will redirect both standard out and
standard error to the same place.

117
00:07:35.960 --> 00:07:41.020
So, unless I am doing something where
I specifically want to separate

118
00:07:41.020 --> 00:07:47.129
the streams I usually just do this, and
I'll just redirect everything to one file.

119
00:07:47.129 --> 00:07:51.181
Keep in mind that the if I
wanted to append to that,

120
00:07:51.181 --> 00:07:53.502
that's how I would do that.

121
00:07:53.502 --> 00:07:56.003
You can also do that with two as well,

122
00:07:56.003 --> 00:07:59.242
where you can append to the error file,
right?

123
00:07:59.242 --> 00:08:00.939
So, the multiple error
brackets always works.

124
00:08:00.939 --> 00:08:05.030
So, let's say I was doing something and

125
00:08:05.030 --> 00:08:10.325
I only cared about the standard out and
I just didn't

126
00:08:10.325 --> 00:08:15.517
care what was happening
in the errors whatsoever.

127
00:08:15.517 --> 00:08:21.688
You can do ls -lsah, and I can just
redirect the errors to /dev/null.

128
00:08:21.688 --> 00:08:26.130
This is a special file here that
basically says, I'm gonna throw it in.

129
00:08:26.130 --> 00:08:27.725
It's just a black hole of stuff in.

130
00:08:27.725 --> 00:08:31.407
Stuff is gonna go into it and
like don't save it, don't care about it.

131
00:08:31.407 --> 00:08:33.038
It's just into oblivion.

132
00:08:36.642 --> 00:08:39.667
So if I did this, if there was any errors,
I wouldn't see them.

133
00:08:39.667 --> 00:08:43.167
And by the same token, if I wanna run a
program and I don't care about the output,

134
00:08:43.167 --> 00:08:45.038
I just want to know if
there was any errors.

135
00:08:45.038 --> 00:08:49.321
Same thing here, I can redirect
standard out to /dev/null and

136
00:08:49.321 --> 00:08:51.391
only errors will show up here.

137
00:08:51.391 --> 00:08:55.277
So, let's see if I did here, cat.

138
00:08:57.893 --> 00:08:59.604
Some file.txt.

139
00:08:59.604 --> 00:09:04.875
I did see the error here and
that's how I know an error happened.

140
00:09:04.875 --> 00:09:07.780
The same thing here, if I change this too,

141
00:09:07.780 --> 00:09:12.642
I'm just not gonna see anything cuz
it's gonna ignore all the errors.

142
00:09:12.642 --> 00:09:15.760
So that's what dev/null is for,
dev/null is specifically for,

143
00:09:15.760 --> 00:09:18.015
I don't care about whatever
is going into here.

