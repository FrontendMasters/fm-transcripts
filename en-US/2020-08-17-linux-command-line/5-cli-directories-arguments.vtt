WEBVTT

1
00:00:00.000 --> 00:00:01.948
All right, so
I'm gonna go up one directory now.

2
00:00:01.948 --> 00:00:03.370
So now I am in home.

3
00:00:03.370 --> 00:00:07.014
And now I want to know
what's inside of home.

4
00:00:07.014 --> 00:00:08.028
So I'm gonna clear again here.

5
00:00:08.028 --> 00:00:11.715
So I'm gonna type ls and
I run that and now ls is going to tell

6
00:00:11.715 --> 00:00:15.946
me here is everything that's inside
of this directory right now.

7
00:00:15.946 --> 00:00:20.854
So now I can see I have one folder
inside of the home directory and

8
00:00:20.854 --> 00:00:22.623
it's called Ubuntu.

9
00:00:22.623 --> 00:00:26.477
Or if I go up one, and
now I am in root, right?

10
00:00:26.477 --> 00:00:30.595
And if I type ls here, you can see
that there's a bunch of stuff in here.

11
00:00:30.595 --> 00:00:34.331
So that's what ls does for you.

12
00:00:34.331 --> 00:00:35.931
It stands for list, right?

13
00:00:35.931 --> 00:00:39.477
It's just saying list everything
that I have in here right now.

14
00:00:43.790 --> 00:00:47.451
Cool, so those are two of the again,
most useful things.

15
00:00:47.451 --> 00:00:50.789
I use ls so much that it's almost
a nervous tic at this point,

16
00:00:50.789 --> 00:00:53.737
that I'll just change
directories into something,

17
00:00:53.737 --> 00:00:57.749
even if I know everything that's
inside of that directory beforehand.

18
00:00:57.749 --> 00:01:01.929
I just immediately type ls from
just muscle memory, right?

19
00:01:01.929 --> 00:01:04.933
It's like running my hands through
my hair, like picking your teeth, or

20
00:01:04.933 --> 00:01:06.834
I don't know, or biting your nails, right?

21
00:01:06.834 --> 00:01:08.197
You can just run ls immediately.

22
00:01:12.072 --> 00:01:15.451
The nice thing about ls as well is
right now, you can see I'm in the root

23
00:01:15.451 --> 00:01:19.430
directory, but let's say I wanted to know
what was inside of the home directory.

24
00:01:19.430 --> 00:01:23.149
I can say ls and
then I can give it a path to look inside.

25
00:01:23.149 --> 00:01:28.856
So, if I say ls home, it's going to tell
me what's inside of the home directory.

26
00:01:28.856 --> 00:01:31.922
So, this is called an argument or
parameters,

27
00:01:31.922 --> 00:01:34.690
you can call it either
one of those things.

28
00:01:34.690 --> 00:01:36.819
Tends to get called arguments
in this particular case,

29
00:01:36.819 --> 00:01:38.142
that's what I'm gonna stick to.

30
00:01:38.142 --> 00:01:42.736
And here I'm telling it,
not only do I want to list something, but

31
00:01:42.736 --> 00:01:47.988
I'm telling you where I want the list to
be ran and this is going to change from

32
00:01:47.988 --> 00:01:53.268
program to program what kind of arguments
that you are going to give into it.

33
00:01:53.268 --> 00:01:57.157
And again, this --help is
gonna be immense help to you.

34
00:01:57.157 --> 00:02:02.108
This is actually quite long, but you
can see up here it's telling you ls and

35
00:02:02.108 --> 00:02:05.107
it is telling you,
this is how you can run ls.

36
00:02:05.107 --> 00:02:10.408
So that's something to
keep in mind as well.

37
00:02:15.606 --> 00:02:16.214
Okay.

38
00:02:19.031 --> 00:02:22.483
Another one that I wanted to go over
is something that I'll be using all

39
00:02:22.483 --> 00:02:23.897
the time is one called echo.

40
00:02:23.897 --> 00:02:26.357
So if I say echo and I say hi.

41
00:02:26.357 --> 00:02:29.690
Surprise, surprise,
it just says hi, right?

42
00:02:29.690 --> 00:02:33.196
So you're just telling it to output
whatever I say put in there.

43
00:02:33.196 --> 00:02:36.647
So if I say,
echo welcome to frontend masters,

44
00:02:36.647 --> 00:02:40.198
it's going to say welcome
to frontend masters.

45
00:02:43.115 --> 00:02:47.974
Now obviously this is not incredibly
useful for what we're doing right now, but

46
00:02:47.974 --> 00:02:51.120
it will be useful when you're
inside of programs and

47
00:02:51.120 --> 00:02:53.637
you're doing things one after another.

48
00:02:53.637 --> 00:02:57.977
It will be useful so
that you can display steps along the way.

49
00:02:57.977 --> 00:03:01.487
So this is basically like your console.log
if you're a JavaScript developer,

50
00:03:01.487 --> 00:03:02.477
that's what echo is.

51
00:03:02.477 --> 00:03:08.397
Echo works different for
every single shell that you're doing.

52
00:03:08.397 --> 00:03:12.308
So in this particular shell, in this
bash shell that we're using right now,

53
00:03:12.308 --> 00:03:16.158
you can give it as many parameters and
it'll just keep outputting them, but

54
00:03:16.158 --> 00:03:18.828
many of them you actually
have to put inside a quote.

55
00:03:18.828 --> 00:03:22.690
So I would have to say echo
"welcome to frontend masters" or

56
00:03:22.690 --> 00:03:24.297
else it wouldn't work.

57
00:03:24.297 --> 00:03:26.679
So sometimes you have
to put that in quotes.

58
00:03:26.679 --> 00:03:28.018
Just be aware of that.

59
00:03:28.018 --> 00:03:29.494
Here's another good one.

60
00:03:29.494 --> 00:03:31.830
There's another one called which, so

61
00:03:31.830 --> 00:03:36.164
which will tell you what the path is
to the program that you're running.

62
00:03:36.164 --> 00:03:42.044
So if I say which and I say,
let's say ls for example,

63
00:03:42.044 --> 00:03:48.080
it's gonna tell me the ls
program lives in /bin/ls.

64
00:03:48.080 --> 00:03:51.404
So you could actually change
directory into the /bindirectory and

65
00:03:51.404 --> 00:03:52.750
you could find ls in there.

66
00:03:52.750 --> 00:03:53.676
If you run ls in here,

67
00:03:53.676 --> 00:03:56.517
you can see there's actually a lot
of stuff in the bin directory.

68
00:03:56.517 --> 00:03:58.131
Bin stands for binary.

69
00:03:58.131 --> 00:04:00.324
It's where you keep all of
your runnable programs.

70
00:04:02.313 --> 00:04:05.478
But you can see here,
ls should be in here.

71
00:04:05.478 --> 00:04:07.870
Here it is, it's right there.

72
00:04:07.870 --> 00:04:14.419
But here is just some of the very great
many programs that you can run with Linux.

73
00:04:17.206 --> 00:04:20.352
All right, so
I'm gonna go back to my home directory.

74
00:04:27.312 --> 00:04:30.042
All right, so that's kind of arguments.

75
00:04:30.042 --> 00:04:34.427
Some programs take one argument, some
programs take no arguments, like pwd for

76
00:04:34.427 --> 00:04:36.180
example, takes no arguments.

77
00:04:36.180 --> 00:04:38.407
ls optionally takes an argument.

78
00:04:38.407 --> 00:04:41.544
Some programs take many arguments.

79
00:04:41.544 --> 00:04:43.986
So it just depends on which program and

80
00:04:43.986 --> 00:04:47.507
you'll see that kind of as
we're going through here.

81
00:04:47.507 --> 00:04:52.262
But argument is just textual information
that you're providing to a program.

82
00:04:52.262 --> 00:04:54.569
That's the idea of what an argument is.

