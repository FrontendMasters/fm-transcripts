WEBVTT

1
00:00:00.000 --> 00:00:03.859
We are gonna get ourselves
into writing your own scripts.

2
00:00:03.859 --> 00:00:08.635
This is probably one of the, again,
more useful things for you to do.

3
00:00:08.635 --> 00:00:13.172
Like if you find yourself writing, like
doing the same tasks over and over again,

4
00:00:13.172 --> 00:00:14.240
the command line.

5
00:00:14.240 --> 00:00:17.168
Whether that's like downloading a file,
executing it, and

6
00:00:17.168 --> 00:00:21.125
moving that storage to a different area,
like you can put those into like scripts.

7
00:00:21.125 --> 00:00:24.374
And then, you can run just like a script
instead having to run like a bunch of

8
00:00:24.374 --> 00:00:27.225
commands in a row, you can just go and
run a whole script, right?

9
00:00:27.225 --> 00:00:28.727
I think that makes sense.

10
00:00:28.727 --> 00:00:33.103
And luckily like, you've kinda already
know how to do this because, you and

11
00:00:33.103 --> 00:00:37.163
I have been programming this entire
time just interactively, right?

12
00:00:37.163 --> 00:00:40.059
We've been doing, running one command and
waiting for the result.

13
00:00:40.059 --> 00:00:43.991
With this, you can just use Bash script
to run many commands in a row, and

14
00:00:43.991 --> 00:00:45.812
it's all using the same syntax.

15
00:00:45.812 --> 00:00:48.126
Okay, so we're in the shell scripts and

16
00:00:48.126 --> 00:00:50.653
then writing your own
scripts part of this.

17
00:00:50.653 --> 00:00:55.824
So let's go ahead and go and
make our very own my first Bash script.

18
00:00:57.031 --> 00:00:59.643
So we're going to do this all in vi,
cuz it's a lot of fun, right?

19
00:00:59.643 --> 00:01:05.427
So we're gonna come back over
to our command line here, and

20
00:01:05.427 --> 00:01:11.450
we're here in my home directory,
and I'm just gonna say vi.

21
00:01:11.450 --> 00:01:15.217
And you could also do this
with Nano if you want to.

22
00:01:17.243 --> 00:01:20.836
So make a file, what are we gonna call it?

23
00:01:20.836 --> 00:01:23.731
Gen files, underscore genfiles.sh.

24
00:01:25.813 --> 00:01:30.357
Okay, I'm going to put myself
in insert mode with I, and

25
00:01:30.357 --> 00:01:34.537
I'm gonna say the first one
is going to be mk dir-p.

26
00:01:34.537 --> 00:01:41.252
Till the slash temp, okay?

27
00:01:41.252 --> 00:01:45.741
So this -p means if the file or the folder

28
00:01:45.741 --> 00:01:50.768
already exists, don't error out, right?

29
00:01:50.768 --> 00:01:54.290
Cuz otherwise if you just do mk
dir without the dash capital or

30
00:01:54.290 --> 00:01:58.848
the -p, if temp already exists as a K
that already exists, I'm not going to,

31
00:01:58.848 --> 00:02:01.909
I'm gonna error out and
now your script would fail.

32
00:02:01.909 --> 00:02:05.745
So the -p means, if it's already
exist great, just don't do anything.

33
00:02:05.745 --> 00:02:11.984
Okay, then we're going to cd into that
temp directory that we just created.

34
00:02:14.529 --> 00:02:19.053
So the nice thing about doing CD this
way is it's only going to last for

35
00:02:19.053 --> 00:02:22.335
the duration of this script invocation,
right?

36
00:02:22.335 --> 00:02:27.062
So it's not like it's going to if I run
this folder is not going to transport me

37
00:02:27.062 --> 00:02:30.499
into temp, it's just for
the duration of this script.

38
00:02:30.499 --> 00:02:33.957
Okay, then I'm going to do touch file, and

39
00:02:33.957 --> 00:02:39.097
then we're going to do that range
thing that we saw before .txt,

40
00:02:39.097 --> 00:02:42.188
and then we're going to say echo done.

41
00:02:42.188 --> 00:02:45.323
So as you might imagine,
this is going to create a directory,

42
00:02:45.323 --> 00:02:47.450
it's going to change directory into it.

43
00:02:47.450 --> 00:02:49.862
It's going to create a bunch of files and
then it's going to echo done.

44
00:02:49.862 --> 00:02:52.936
Pretty simple,
pretty straightforward from there.

45
00:02:52.936 --> 00:02:56.599
Okay, so I'm going to hit escape,
and write, and quit.

46
00:02:59.437 --> 00:03:02.659
Okay, and then I can just say, source.

47
00:03:05.942 --> 00:03:07.943
What did we call it, gen_ files, right?

48
00:03:10.005 --> 00:03:11.945
And then you can see there,
it just says done.

49
00:03:11.945 --> 00:03:16.647
So sources when we can do that,
I can also do that with .gen files.

50
00:03:16.647 --> 00:03:21.470
So I have to get back out of
this .gen_files like that.

51
00:03:21.470 --> 00:03:26.508
Totally equivalent,
I would say that the dot notation there,

52
00:03:26.508 --> 00:03:32.608
that works in more distributions of
Linux source only works in some of them.

53
00:03:32.608 --> 00:03:37.474
And you can also say Bash
gen _files like that.

54
00:03:37.474 --> 00:03:40.530
And that's the part so here's why,

55
00:03:40.530 --> 00:03:46.160
notice that this did not change
my directory, whereas source did.

56
00:03:46.160 --> 00:03:49.761
That's because Bash actually
creating a sub process, and so

57
00:03:49.761 --> 00:03:52.264
the sub process will change directories.

58
00:03:52.264 --> 00:03:55.072
But once that finishes,
it goes back to my parent process.

59
00:03:55.072 --> 00:03:58.389
Whereas sources running
this in the same process,

60
00:03:58.389 --> 00:04:03.493
which is why it's changing our directory,
kinda a weird hair to split there.

61
00:04:03.493 --> 00:04:05.857
But, that's a, I guess first of all,

62
00:04:05.857 --> 00:04:10.018
is anyone have any questions about
that seems like it's a relatively

63
00:04:10.018 --> 00:04:14.552
straightforward application of things
that we've already done before.

64
00:04:14.552 --> 00:04:16.735
It's just putting everything into a file,
and

65
00:04:16.735 --> 00:04:19.694
it's just nice because you don't
have to remember how to do it.

66
00:04:19.694 --> 00:04:23.629
You just say like, I'm going to create
this script file is gonna do one thing for

67
00:04:23.629 --> 00:04:24.936
me, and then it's done.

68
00:04:24.936 --> 00:04:27.227
Kinda like what we did with
the bash 2048 there as well, right?

69
00:04:27.227 --> 00:04:30.705
That's the same idea,
that's just someone's very long game,

70
00:04:30.705 --> 00:04:32.356
they put it into a script file.

