WEBVTT

1
00:00:00.000 --> 00:00:02.386
So, let's make another file.

2
00:00:02.386 --> 00:00:06.735
So make another file called friends, and

3
00:00:06.735 --> 00:00:13.832
we're gonna chmod +x friends,
and then we're gonna vi friends.

4
00:00:15.686 --> 00:00:20.005
And then I'm gonna put in here /bin/bash.

5
00:00:20.005 --> 00:00:23.722
And then I'm gonna write and
quit and open that again, so

6
00:00:23.722 --> 00:00:25.669
this is open now in bash mode.

7
00:00:25.669 --> 00:00:30.373
And I'm gonna say friends= and
I'm gonna put a parenthesis there,

8
00:00:30.373 --> 00:00:34.926
which is how you signify to bash
that I'm about to create an array.

9
00:00:34.926 --> 00:00:41.051
And then I'm gonna put Kyle, Mark, Jim,
and I'm gonna put my name in quotes

10
00:00:41.051 --> 00:00:46.909
"Brian Holt" cuz I wanna put my full
name in there and Sarah, like that.

11
00:00:50.434 --> 00:00:54.369
So this is how you do an array,
the parentheses and

12
00:00:54.369 --> 00:00:57.473
then you just put spaces between them.

13
00:00:57.473 --> 00:01:01.198
And if you wanna have something that
has a space in it like Brian Holt,

14
00:01:01.198 --> 00:01:03.140
you just put that inside of quotes.

15
00:01:04.991 --> 00:01:12.333
And then the way you access that is
you say echo My second friend is,

16
00:01:12.333 --> 00:01:18.497
and you put dollar sign and
then curly brace, friends,

17
00:01:18.497 --> 00:01:23.636
and then you do square bracket 1,
like that.

18
00:01:25.847 --> 00:01:30.745
So it's all be the first event using
arrays and bash it's a little clumsy in

19
00:01:30.745 --> 00:01:35.273
terms of like the how it looks but
that's how you do it, right there.

20
00:01:37.593 --> 00:01:40.861
And then let's do a for-loop, so

21
00:01:40.861 --> 00:01:45.258
we're gonna say for
friend in $friends, and

22
00:01:45.258 --> 00:01:50.780
then you have to tell it how much
of friends that you want and

23
00:01:50.780 --> 00:01:56.325
I want all of it so
I'm gonna put star in there, like that.

24
00:01:56.325 --> 00:02:00.440
And that will give me all
of the friends and friend.

25
00:02:00.440 --> 00:02:04.486
Then you have to tell it to do something,
so I'm gonna say do,

26
00:02:05.549 --> 00:02:11.226
Echo friend; friends like this.

27
00:02:13.299 --> 00:02:16.524
So that will refer to this friend
because it's gonna do like a for

28
00:02:16.524 --> 00:02:18.805
in loop,
those exist in JavaScript as well.

29
00:02:18.805 --> 00:02:20.324
So I'm sure many of you
have probably seen that.

30
00:02:20.324 --> 00:02:23.744
And then after you do that,

31
00:02:23.744 --> 00:02:28.985
you just say I'm done, like that.

32
00:02:28.985 --> 00:02:33.982
And then here,
if you wanna get the length of an array,

33
00:02:33.982 --> 00:02:38.076
this is again, super odd as I have a list.

34
00:02:38.076 --> 00:02:43.232
Yeah, I have dollar sign curly and
then you put a pound or

35
00:02:43.232 --> 00:02:48.390
hash friends and
then you have to tell how much of friends

36
00:02:48.390 --> 00:02:52.804
that you want the link to,
so I want all of them.

37
00:02:54.719 --> 00:02:58.577
Friends, like that.

38
00:02:58.577 --> 00:03:00.209
And those quotes are probably optional.

39
00:03:03.728 --> 00:03:08.278
So as you can see,
a kind of a clumsy way of doing arrays.

40
00:03:08.278 --> 00:03:10.930
The way that it works underneath the hood
is even more clumsy in my opinion.

41
00:03:10.930 --> 00:03:16.102
It's actually like converting them
to strings and back to arrays and

42
00:03:16.102 --> 00:03:20.483
in odd ways, but
that's actually how you end up doing it.

43
00:03:20.483 --> 00:03:25.410
So let's make sure that this runs,
friends, there you go.

44
00:03:25.410 --> 00:03:27.359
So my second friend is Mark,
which is expect.

45
00:03:27.359 --> 00:03:29.800
This looped over and
printed all of my friends.

46
00:03:29.800 --> 00:03:39.372
You can see it actually split even
Brian Holt apart, Which is fun.

47
00:03:39.372 --> 00:03:41.731
And then it says I have 5 friends.

48
00:03:48.351 --> 00:03:51.072
Yeah, and there is a way to
not split Brian Hold apart.

49
00:03:51.072 --> 00:03:54.495
The questions I can't remember exactly
off the top of my head how to do it.

50
00:03:54.495 --> 00:03:57.791
But suffice to say that
that is a possibility.

51
00:03:57.791 --> 00:04:00.810
But it's actually only storing
five things in the array.

52
00:04:00.810 --> 00:04:07.383
So like for example,
if I vi in that again.

53
00:04:07.383 --> 00:04:13.882
I think if I accessed, this would be 0123.

54
00:04:13.882 --> 00:04:15.733
See what it says if I do that?

55
00:04:16.819 --> 00:04:23.987
Yeah, so it does actually give
you that holistically as that.

56
00:04:23.987 --> 00:04:27.322
But the for in loop is actually
breaking that part by the space.

57
00:04:29.190 --> 00:04:30.328
It's kind of wild, right?

58
00:04:34.181 --> 00:04:36.623
So I'll just throw out there.

59
00:04:36.623 --> 00:04:41.543
I am typically not creating and destroying
arrays when I'm creating bash scripts,

60
00:04:41.543 --> 00:04:44.602
it's not something that's
typically I need to do.

61
00:04:44.602 --> 00:04:48.714
I'll consume other programs that use
arrays but not necessarily myself.

62
00:04:54.112 --> 00:04:57.120
Okay, let's make one more.

63
00:04:57.120 --> 00:05:01.472
We're gonna do a while loop and there
are more types of loops just as you might

64
00:05:01.472 --> 00:05:04.473
imagine, there's like do loops and
other things.

65
00:05:04.473 --> 00:05:05.725
Just gonna show you two of them and

66
00:05:05.725 --> 00:05:07.567
the other one I'm gonna
show you is a while loop.

67
00:05:07.567 --> 00:05:12.271
And then if you need a different sort
of loop, feel free to go look for them.

68
00:05:12.271 --> 00:05:14.297
So let's make another one called guess.

69
00:05:17.758 --> 00:05:22.528
And let's actually touch

70
00:05:22.528 --> 00:05:27.514
guests chmod +x guests and

71
00:05:27.514 --> 00:05:32.933
vi guess and we'll insert our

72
00:05:32.933 --> 00:05:39.001
hash bang in bash, right quit and

73
00:05:39.001 --> 00:05:44.435
oops, now we can write this.

74
00:05:44.435 --> 00:05:48.160
So, the first thing we create is
a number to guess, num to guess.

75
00:05:48.160 --> 00:05:50.204
I'm gonna create this variable.

76
00:05:50.204 --> 00:05:56.587
And then we're going to do dollar
sign parentheses, parentheses.

77
00:05:58.904 --> 00:06:03.625
Dollar sign random, which $random
is always gonna be a random number

78
00:06:03.625 --> 00:06:08.202
between zero and things like 32,000 or
something like that.

79
00:06:08.202 --> 00:06:14.589
It's like 2 to the 12th divided by 2 or
something like that,

80
00:06:14.589 --> 00:06:18.746
that's some specific number like that.

81
00:06:18.746 --> 00:06:25.565
$random and then you can do modulus 10 cuz
we want it to be between 0 and 9, right,

82
00:06:25.565 --> 00:06:32.041
which is what the modular does, it's
like the remainder of a division, right?

83
00:06:32.041 --> 00:06:36.423
You've probably seen
that in other languages.

84
00:06:36.423 --> 00:06:43.604
And then after you do that, we're gonna do
+ 1 cuzwe want it to be between 1 and 10.

85
00:06:43.604 --> 00:06:46.135
Let's talk about the double
parentheses for just a second.

86
00:06:46.135 --> 00:06:51.109
Do you remember like when we were
doing the if statements that

87
00:06:51.109 --> 00:06:54.816
converts that to test
the double parentheses

88
00:06:54.816 --> 00:06:59.513
with the dollar sign converts to,
which one is it, let.

89
00:07:01.381 --> 00:07:07.381
It converts to another program called let,
and let let's you do basic arithmetic.

90
00:07:07.381 --> 00:07:12.091
So when you do these double parentheses,
it's like, hey, I'm about to do some math.

91
00:07:12.091 --> 00:07:16.707
And you're gonna give it some numbers and
then expect some number back from it.

92
00:07:16.707 --> 00:07:20.306
So that's what this is doing this
versatile to a let which allows you to do

93
00:07:20.306 --> 00:07:20.839
modulus.

94
00:07:20.839 --> 00:07:25.710
Because modulus does not typically work or
not not modulus, modular.

95
00:07:25.710 --> 00:07:29.597
Modular does not work in bash script,
you have to pass it to let and

96
00:07:29.597 --> 00:07:31.231
then get that number back.

97
00:07:33.724 --> 00:07:38.119
Okay, so suffice it says after
this num to guest is gonna be

98
00:07:38.119 --> 00:07:40.909
a random number between 1 and 10.

99
00:07:40.909 --> 00:07:45.305
Then we're gonna get a guest, Num.

100
00:07:45.305 --> 00:07:47.812
And that's gonna be initially equal to 0,

101
00:07:47.812 --> 00:07:51.143
which is gonna be outside
of the possibility.

102
00:07:51.143 --> 00:07:56.728
When I say echo guests
a number between 1 and 10.

103
00:07:58.573 --> 00:08:02.974
And then I'm gonna say, while,

104
00:08:05.166 --> 00:08:10.466
$NUM_TO_GUESS is not equal

105
00:08:10.466 --> 00:08:14.831
to, GUESSED_,

106
00:08:20.436 --> 00:08:26.005
NUM, Do, Read -p your

107
00:08:26.005 --> 00:08:33.136
guess, GUESS_NUM.

108
00:08:35.367 --> 00:08:39.742
Done, then after they're done,
they're gonna say you got it.

109
00:08:42.351 --> 00:08:45.307
All right, so let's break this
down just kind of bit by bit.

110
00:08:45.307 --> 00:08:49.211
Number guess, this is gonna be some
random number between 1 and 10.

111
00:08:49.211 --> 00:08:52.303
This isn't gonna change, this is only
get set once at the very beginning.

112
00:08:52.303 --> 00:08:56.602
And then guess number is 0,
which is not a number between 1 and 10.

113
00:08:56.602 --> 00:08:58.575
Okay, then we're gonna
echo guess a number.

114
00:08:58.575 --> 00:09:03.137
And the first time this runs, obviously
zeros outside of the boundaries, so

115
00:09:03.137 --> 00:09:05.819
it's always gonna run at least once, okay?

116
00:09:05.819 --> 00:09:08.807
And then this square bracket
notation should look familiar too,

117
00:09:08.807 --> 00:09:11.480
this is also works with test,
right, so the same with it.

118
00:09:11.480 --> 00:09:15.175
If statement works, this also works for
while loops as well.

119
00:09:15.175 --> 00:09:18.915
So this is going to test every
single loop is the statement true.

120
00:09:18.915 --> 00:09:23.709
And then eventually, when num guess
is equal to guessed num when they've

121
00:09:23.709 --> 00:09:28.040
actually guessed the number correctly,
this is gonna be false and

122
00:09:28.040 --> 00:09:31.546
it's gonna break out of the loop,
that makes sense?

123
00:09:31.546 --> 00:09:37.260
Okay, and then here in the middle, we're
gonna be reading from the user, numbers.

124
00:09:37.260 --> 00:09:39.780
It's gonna pause here until this happens,
and

125
00:09:39.780 --> 00:09:43.826
then it's gonna run the loop again if
they don't guess the correct number.

126
00:09:43.826 --> 00:09:47.396
Eventually, this is gonna finish once
they guess they correct number, and

127
00:09:47.396 --> 00:09:50.265
it's gonna echo, you got it,
and then it's gonna be done.

128
00:09:51.524 --> 00:09:53.874
So let's see if it works.

129
00:09:53.874 --> 00:09:58.532
Guess, so
it gets a number between 1 and 10,

130
00:09:58.532 --> 00:10:02.266
1, 2, 3, 4, the answer's 4.

131
00:10:02.266 --> 00:10:03.531
That one's a little bit more opaque.

132
00:10:03.531 --> 00:10:06.337
So I'm just gonna make
sure that we got it.

133
00:10:06.337 --> 00:10:09.059
This read statement here is gonna pause.

134
00:10:09.059 --> 00:10:12.544
It pauses the execution of the entire
bash script until it happens, right,

135
00:10:12.544 --> 00:10:15.111
which is why this doesn't
keep looping indefinitely.

136
00:10:15.111 --> 00:10:18.250
But as long as you did not
guess the correct number,

137
00:10:18.250 --> 00:10:20.225
this would loop indefinitely.

138
00:10:20.225 --> 00:10:22.329
It loops until this is not true.

139
00:10:23.833 --> 00:10:27.887
Here on this line, why is there
no dollar sign for GUESSED_NUM?

140
00:10:27.887 --> 00:10:33.996
And the reason why,
you're giving guess num to read.

141
00:10:33.996 --> 00:10:37.168
So this is actually an argument
that's being fed into read and

142
00:10:37.168 --> 00:10:40.096
then read is using that to set
a variable for you, right?

143
00:10:40.096 --> 00:10:42.915
If I put the dollar sign guess num,
what would happen?

144
00:10:42.915 --> 00:10:44.735
It would actually put zero here.

145
00:10:44.735 --> 00:10:50.211
So the thing that read would receive would
be 0, it would be the value of this.

146
00:10:50.211 --> 00:10:54.190
So cuz whenever you do the dollar sign
there, bash is gonna go and replace it for

147
00:10:54.190 --> 00:10:56.500
you before it gets made
fed into the program.

148
00:10:56.500 --> 00:11:00.818
We don't want the value of guess num, we
wanna string guests num fed into read so

149
00:11:00.818 --> 00:11:02.826
that it can set that variable for us.

150
00:11:02.826 --> 00:11:04.727
Does that make sense?

151
00:11:04.727 --> 00:11:06.788
Yeah, that's a great question.

