WEBVTT

1
00:00:00.000 --> 00:00:01.036
Last thing to talk about here.

2
00:00:01.036 --> 00:00:04.800
Let's talk about sub
commands really quick.

3
00:00:04.800 --> 00:00:12.204
Let's say, I wanna know,
I have the string that I wanna output.

4
00:00:12.204 --> 00:00:14.980
Let's just do what I have right there.

5
00:00:14.980 --> 00:00:20.920
I can say echo, I think and then I wanna
run who am I in the middle of here.

6
00:00:20.920 --> 00:00:25.672
So if I put dollar sign, and
then I put parentheses here,

7
00:00:25.672 --> 00:00:30.029
and I put who am I right there,
is a really cool user.

8
00:00:30.029 --> 00:00:35.511
It's actually going to go in and
it's going to run a sub Command here.

9
00:00:35.511 --> 00:00:39.117
So it's actually going to execute
a separate command here and

10
00:00:39.117 --> 00:00:42.932
run whatever between the parentheses,
whatever that returns,

11
00:00:42.932 --> 00:00:45.289
whatever that returns to standard out.

12
00:00:45.289 --> 00:00:49.240
It's going to put that there, or
whatever we would have piped right?

13
00:00:49.240 --> 00:00:50.380
That makes sense.

14
00:00:50.380 --> 00:00:51.784
So this is a subcommand.

15
00:00:51.784 --> 00:00:58.322
So I can do echo the current
date is $(date), right?

16
00:00:58.322 --> 00:01:02.698
So that's really useful, it's useful for

17
00:01:02.698 --> 00:01:09.675
doing something in a subcommand,
getting all that information, and

18
00:01:09.675 --> 00:01:15.126
returning it back up to
the higher process basically.

19
00:01:15.126 --> 00:01:17.012
So let's say you had a job or

20
00:01:17.012 --> 00:01:21.768
like a some sort of task that's running
every day that just goes in and

21
00:01:21.768 --> 00:01:26.442
checks the date and it checks
the uptime and attaches that to a file.

22
00:01:26.442 --> 00:01:29.236
The way you could do that is echo Date and

23
00:01:29.236 --> 00:01:34.390
then you can do plus percent x and
that'll just give you the date.

24
00:01:34.390 --> 00:01:37.857
It won't give you like
the rest of the time.

25
00:01:37.857 --> 00:01:41.512
I just found that from
the man from the manual.

26
00:01:41.512 --> 00:01:46.040
And then I can do a second sub
command here for the uptime.

27
00:01:46.040 --> 00:01:50.765
And I can run that and
put that into log.txt like that.

28
00:01:50.765 --> 00:01:56.516
And now if I look at log.txt,
you can see here, here's the date.

29
00:01:56.516 --> 00:02:00.831
Here's the dash that we put right there,
right?

30
00:02:00.831 --> 00:02:03.708
And here's the uptime, right?

31
00:02:03.708 --> 00:02:06.225
And I can run that a bunch of times.

32
00:02:09.492 --> 00:02:14.876
And if I look at log.txt, you can see
here, this was what your lot like

33
00:02:14.876 --> 00:02:20.103
each line would be like one entry
in your log or something like that.

34
00:02:20.103 --> 00:02:25.355
So how often do I use sub commands,
once every 3 months like I don't

35
00:02:25.355 --> 00:02:30.515
use them that often but the times
that they end up coming in useful,

36
00:02:30.515 --> 00:02:33.947
like, I'm very happy I know what they are.

37
00:02:33.947 --> 00:02:39.651
Yeah, anything inside of that dollar sign,
parentheses there, it can be anything.

38
00:02:39.651 --> 00:02:40.874
It could be echo.

39
00:02:45.629 --> 00:02:46.903
You could be.

40
00:02:51.865 --> 00:02:53.830
Did not like that.

41
00:02:57.263 --> 00:03:01.826
Yeah, cuz it was trying to anyway, trying
to tab completion was not something where

42
00:03:01.826 --> 00:03:04.341
you wanna be doing that cat log.txt,
right?

43
00:03:04.341 --> 00:03:09.326
So I was able to read in the file
to standard in and then cat that.

44
00:03:09.326 --> 00:03:15.112
And then have that return from the
subprocess and then have that return here.

45
00:03:15.112 --> 00:03:20.063
So that's why it says hi and
then user at the end, and then,

46
00:03:20.063 --> 00:03:22.256
all of log.txt in there.

47
00:03:25.864 --> 00:03:31.263
One last thing here, you will see
another older way of doing this and

48
00:03:31.263 --> 00:03:34.491
say hi, and then you can put backticks.

49
00:03:37.823 --> 00:03:41.070
And you'll notice that that
actually ends up working as well.

50
00:03:41.070 --> 00:03:43.161
This is the old way of doing it.

51
00:03:43.161 --> 00:03:48.291
In fact, I was reading that it's
like very old, like it hasn't been,

52
00:03:48.291 --> 00:03:52.412
like the primary way of doing that for
many, many years.

53
00:03:52.412 --> 00:03:57.890
But they still include it for backwards
compatibility purposes.Always just

54
00:03:57.890 --> 00:04:03.540
do the dollar sign parentheses because
it's it's a superior way of doing that.

55
00:04:03.540 --> 00:04:05.188
For one, you can nest them.

56
00:04:05.188 --> 00:04:08.421
So you can actually have
multiple sub commands nested,

57
00:04:08.421 --> 00:04:12.135
whereas with backticks,
that wouldn't, that does not work.

58
00:04:12.135 --> 00:04:13.717
And it's less ambiguous.

59
00:04:13.717 --> 00:04:15.023
It's easier to read.

60
00:04:15.023 --> 00:04:21.015
It's just a better way of doing it and
there's more options of what you can do.

61
00:04:21.015 --> 00:04:27.116
But I include the backticks just so that
so, if you read in like a Stack Overflow

62
00:04:27.116 --> 00:04:32.108
answer backticks also will execute
something as a sub command.

63
00:04:32.108 --> 00:04:37.822
&gt;&gt; Can you discuss the other
columns of ps aux.

64
00:04:37.822 --> 00:04:42.187
&gt;&gt; Maybe, I ignore most of them so
alright so

65
00:04:42.187 --> 00:04:45.694
user that will make sense right?

66
00:04:45.694 --> 00:04:50.687
PID, CPU percentage usage, right.

67
00:04:50.687 --> 00:04:55.655
So you can, [COUGH] I think you
can actually sort this, and so

68
00:04:55.655 --> 00:04:59.176
you can see if you have something
that's pegging your CPU,

69
00:04:59.176 --> 00:05:02.134
you can figure out what that is and
you can kill it.

70
00:05:02.134 --> 00:05:03.967
Same with percentage memory.

71
00:05:03.967 --> 00:05:08.616
I do not know what VSZ,
I don't know what any of these are, TTY.

72
00:05:08.616 --> 00:05:12.702
STAT, START, obviously START is
when you start it, TIME is how long

73
00:05:12.702 --> 00:05:17.100
it's been running, and the COMMAND
is obviously what you're running.

74
00:05:17.100 --> 00:05:22.654
But for these ones in the middle, I would
just have to go look up what they are.

75
00:05:22.654 --> 00:05:25.817
But suffice to say
they're not important or

76
00:05:25.817 --> 00:05:29.236
I haven't had to know
them in my entire career.

77
00:05:29.236 --> 00:05:32.228
So they're not important for me to know.

78
00:05:32.228 --> 00:05:35.561
If I don't know what it's not important,
but

79
00:05:35.561 --> 00:05:39.235
I'm just gonna I just I've
never had to look it up.

80
00:05:39.235 --> 00:05:45.219
&gt;&gt; Speaking of environments Pass and
putting them in your profile.

81
00:05:45.219 --> 00:05:51.631
How do you know which file your
computer is actually running,

82
00:05:51.631 --> 00:05:56.580
if it's a profile or
a batch profile or bash RC?

83
00:05:56.580 --> 00:05:58.582
&gt;&gt; That's a good question.

84
00:05:58.582 --> 00:06:03.587
Your login shell like whenever you
log into a new session of bash,

85
00:06:03.587 --> 00:06:07.318
it will always read bash
RC 100% of the time.

86
00:06:07.318 --> 00:06:12.232
I believe it should read read bash
RC bash profile will only run on

87
00:06:12.232 --> 00:06:15.986
the First interactive shell
that's invoked that day.

88
00:06:15.986 --> 00:06:20.486
And then different shells have
different files names, but

89
00:06:20.486 --> 00:06:25.710
they usually kind of follow the same
thing like ZSH is ZSHRC, Right.

90
00:06:25.710 --> 00:06:28.266
I don't think they have a ZSH profile.

91
00:06:28.266 --> 00:06:29.500
I think they just have ZSH.

92
00:06:29.500 --> 00:06:33.900
RRC same with fish cell it's dot fish RC.

93
00:06:33.900 --> 00:06:39.055
So,just stick to the dot
name of the shell RC file

94
00:06:39.055 --> 00:06:43.726
in your home directory and
you'll be golden

