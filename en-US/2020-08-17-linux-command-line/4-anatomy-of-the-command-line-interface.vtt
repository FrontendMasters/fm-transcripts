WEBVTT

1
00:00:00.000 --> 00:00:03.140
So hopefully all of you
got multipass running.

2
00:00:03.140 --> 00:00:07.760
&gt;&gt; Again, multipass will be kind of
the easiest way cuz that's how I wrote

3
00:00:07.760 --> 00:00:09.848
the course was with multipass.

4
00:00:09.848 --> 00:00:15.260
But again WSL would work fine, VirtualBox,
VMware Fusion, Parallels, all.

5
00:00:15.260 --> 00:00:18.759
Any sort of virtualization
software works great, or

6
00:00:18.759 --> 00:00:22.501
just installing Linux directly
would work great, too.

7
00:00:22.501 --> 00:00:26.337
I'm gonna call it that
we are using Ubuntu 18,

8
00:00:26.337 --> 00:00:31.017
18.04 which is Bionic,
I believe, the name Bionic,

9
00:00:31.017 --> 00:00:36.275
I don't remember what the animal is,
but anyway, it's Bionic.

10
00:00:36.275 --> 00:00:40.857
As of today, 20.04 is out and
I think you could use 20.04, but

11
00:00:40.857 --> 00:00:44.312
if you see any oddities and
you're using 20.04,

12
00:00:44.312 --> 00:00:48.537
just maybe suspect that something
changed in the Ubuntu version.

13
00:00:48.537 --> 00:00:53.910
So again, we're using 18 for this course.

14
00:00:53.910 --> 00:00:54.410
Okay.

15
00:00:55.633 --> 00:01:00.219
So, again, this course assumes no
necessarily any prior experience with

16
00:01:00.219 --> 00:01:01.618
using a command line.

17
00:01:01.618 --> 00:01:04.121
So if you have some experience
using command line,

18
00:01:04.121 --> 00:01:05.642
just bear with me a little bit.

19
00:01:05.642 --> 00:01:07.030
We'll get through it pretty quickly.

20
00:01:07.030 --> 00:01:10.964
But I just want to make sure that everyone
starts in this kind of base level page of

21
00:01:10.964 --> 00:01:13.976
what's it like to actually
interact with the command line.

22
00:01:13.976 --> 00:01:19.462
So, bash is actually a programming
language that you run interactively.

23
00:01:19.462 --> 00:01:23.704
So you can actually program entire
programs using just bash, or bash scripts,

24
00:01:23.704 --> 00:01:26.317
or shell scripts or
whatever you want to call it.

25
00:01:26.317 --> 00:01:29.943
And when you're dropped into
an interactive shell, that's what's

26
00:01:29.943 --> 00:01:34.320
called a REPL, R-E-P-L, which stands for
read, evaluate, print, and loop.

27
00:01:34.320 --> 00:01:37.127
And it's an interactive
way of programming.

28
00:01:37.127 --> 00:01:38.461
When you're in a shell,

29
00:01:38.461 --> 00:01:43.110
you're actually just programming one line
at a time waiting for the results, right?

30
00:01:43.110 --> 00:01:45.095
So that's what a REPL is.

31
00:01:45.095 --> 00:01:49.831
And you can actually run node and
Python as a REPL as well, right?

32
00:01:49.831 --> 00:01:55.400
So if I open my shell here, And

33
00:01:55.400 --> 00:01:59.562
I run something, well if I run python3,
which is installed here, you can see I'm

34
00:01:59.562 --> 00:02:03.084
actually in a different REPL now for
Python, so that's what this is.

35
00:02:03.084 --> 00:02:07.660
You can see here that I have
a programming prompt that I'm able to

36
00:02:07.660 --> 00:02:10.133
program one single line at a time.

37
00:02:16.266 --> 00:02:22.699
Cool, so
Linux is very file system oriented, right?

38
00:02:22.699 --> 00:02:25.108
So that's what everything is,
basically everything is a file in Linux.

39
00:02:25.108 --> 00:02:30.360
Suze Hinton asked me to say that on air so
that's why I'm saying that.

40
00:02:30.360 --> 00:02:31.413
So thanks, Suze.

41
00:02:31.413 --> 00:02:36.811
[COUGH] So yes,
everything is a file on Linux.

42
00:02:36.811 --> 00:02:42.389
And so it's kind of like Finder on your
Mac or Explorer on your Windows machine,

43
00:02:42.389 --> 00:02:47.239
where you're always somewhere in
the file system at any given time.

44
00:02:47.239 --> 00:02:52.150
So if I write pwd, you can see
right now I am in /home/ubuntu,

45
00:02:52.150 --> 00:02:55.130
so I'm inside of the home directory.

46
00:02:55.130 --> 00:03:00.230
And inside of that home directory,
there's another directory called ubuntu.

47
00:03:00.230 --> 00:03:04.481
And you'll notice that I use the term
directory and folder a lot, and

48
00:03:04.481 --> 00:03:07.205
I'm using them totally interchangeably.

49
00:03:07.205 --> 00:03:11.044
They might have different meanings,
but I don't know what they are.

50
00:03:11.044 --> 00:03:12.515
So I use them totally interchangeably.

51
00:03:12.515 --> 00:03:17.946
So if I say directory I mean folder,
and if I say folder I mean directory.

52
00:03:17.946 --> 00:03:19.702
Okay, so that's what this is.

53
00:03:19.702 --> 00:03:23.160
I'm always somewhere inside of
the file system at any given time, and

54
00:03:23.160 --> 00:03:25.455
you can always see where
you are by typing pwd.

55
00:03:25.455 --> 00:03:29.555
Which stands for
present working directory, I think.

56
00:03:33.746 --> 00:03:35.129
Okay, so.

57
00:03:35.129 --> 00:03:40.094
And let's talk for
a second about shells versus emulators.

58
00:03:40.094 --> 00:03:43.683
So right now I have the Terminal up app,
right?

59
00:03:43.683 --> 00:03:47.871
And the Terminal app inside
of Mac is called an emulator.

60
00:03:47.871 --> 00:03:51.442
That's actually what's
running bash inside of it.

61
00:03:51.442 --> 00:03:54.343
Your emulator can run
any number of shells.

62
00:03:54.343 --> 00:03:57.921
In fact,
if I just open another tab here right now,

63
00:03:57.921 --> 00:04:01.594
you'll see here this actually
dropped me into Mac.

64
00:04:01.594 --> 00:04:07.517
So, This tab right now is
running bash inside of Linux,

65
00:04:07.517 --> 00:04:10.897
and this tab is running
zsh inside of macOS.

66
00:04:10.897 --> 00:04:13.825
So that's why an emulator
is different from a shell,

67
00:04:13.825 --> 00:04:17.152
because the emulator contains
the shells that are running.

68
00:04:17.152 --> 00:04:20.732
And there are multiple different
sorts of emulators that you can use.

69
00:04:20.732 --> 00:04:23.610
I'm just using the Terminal one directly,
the default one for

70
00:04:23.610 --> 00:04:26.443
Mac because it's actually pretty good,
it's pretty fast.

71
00:04:26.443 --> 00:04:29.342
A lot of people use iterm,
which is another really great one.

72
00:04:29.342 --> 00:04:31.290
For the longest time, that's what I used.

73
00:04:31.290 --> 00:04:34.787
Until Terminal.app kind of
improved a lot with Catalina.

74
00:04:34.787 --> 00:04:39.454
If you're on Windows, there's a bunch
of different choices as well.

75
00:04:39.454 --> 00:04:43.896
The one that I obviously I'm a little
biased towards is Windows Terminal.

76
00:04:43.896 --> 00:04:46.613
It's a new one that
Microsoft is putting out.

77
00:04:46.613 --> 00:04:47.438
I think it's pretty good.

78
00:04:47.438 --> 00:04:52.008
There's also Hyper and
a bunch of other stuff as well.

79
00:04:52.008 --> 00:04:53.508
So that's your emulator.

80
00:04:53.508 --> 00:04:58.849
And then inside of your emulator,
you're gonna have a shell running.

81
00:04:58.849 --> 00:05:02.792
So your shell is gonna be bash
in this particular case, and

82
00:05:02.792 --> 00:05:05.770
everyone should be running bash right now.

83
00:05:05.770 --> 00:05:08.525
I will say that if you're running zsh,

84
00:05:08.525 --> 00:05:12.880
you're probably okay to run zsh
because they are so similar.

85
00:05:12.880 --> 00:05:16.872
But pretty much everything else
is gonna be too different for

86
00:05:16.872 --> 00:05:18.602
this course to work with.

87
00:05:18.602 --> 00:05:20.382
Okay, so your shell is bash.

88
00:05:20.382 --> 00:05:24.968
Bash stands for Bourne-Again Shell, which
is meant to be a kind of a funny pun,

89
00:05:24.968 --> 00:05:27.991
which computer scientists
love mildly funny puns.

90
00:05:27.991 --> 00:05:32.440
The previous shell before
bash was called Bourne shell.

91
00:05:32.440 --> 00:05:35.591
And so to make fun of it,
they made the Bourne-Again Shell.

92
00:05:35.591 --> 00:05:38.123
And Bourne was the name of the last
guy that invented the Bourne Shell.

93
00:05:38.123 --> 00:05:43.683
And then it just stuck forever
because that was the better shell.

94
00:05:43.683 --> 00:05:47.259
So bash is about 30ish years old.

95
00:05:47.259 --> 00:05:51.542
It's great, people still really like it,

96
00:05:51.542 --> 00:05:54.909
it belongs to the GNU Foundation.

97
00:05:54.909 --> 00:06:00.808
So it's free and open source,
it will forever be free and open source.

98
00:06:00.808 --> 00:06:03.738
It's actually has copyleft on it.

99
00:06:03.738 --> 00:06:08.320
So any improvements you
make on bash have to be

100
00:06:08.320 --> 00:06:12.790
open sourced, which is why macOS uses zsh.

101
00:06:12.790 --> 00:06:15.288
There are other shells.

102
00:06:15.288 --> 00:06:18.318
And again, what I'm going to teach
you today mostly applies to them.

103
00:06:18.318 --> 00:06:22.416
So if you're talking about ash or
zsh, or cmd.exe, or PowerShell,

104
00:06:22.416 --> 00:06:26.797
a lot of the stuff will apply to it but
they'll just be slightly different.

105
00:06:26.797 --> 00:06:30.574
I'll be honest with you, actually,
my favorite shell is fish shell.

106
00:06:30.574 --> 00:06:34.317
But it's different enough that you
have to do some different things.

107
00:06:34.317 --> 00:06:35.520
Going back to our shell.

108
00:06:35.520 --> 00:06:42.066
You're always somewhere inside of,
when you have a session running,

109
00:06:42.066 --> 00:06:45.882
right, so I have one session right here,

110
00:06:45.882 --> 00:06:50.367
it's running, and you're always somewhere.

111
00:06:50.367 --> 00:06:52.009
And again, you can type pwd,

112
00:06:52.009 --> 00:06:55.303
which is a command in Linux that
will tell you where you are.

113
00:06:55.303 --> 00:06:59.115
So that's the first thing to know
when you're running bash commands.

114
00:06:59.115 --> 00:07:02.086
Is the first thing you put in
there is going to be what command

115
00:07:02.086 --> 00:07:03.520
you're actually running.

116
00:07:03.520 --> 00:07:08.440
So we're just running pwd with
nothing else fed into it,

117
00:07:08.440 --> 00:07:12.860
which is going to give you
where you currently are.

118
00:07:12.860 --> 00:07:15.506
Okay, actually, let me fix my notes here.

119
00:07:27.738 --> 00:07:30.847
Okay, and then you have folders
that are nested within folders.

120
00:07:30.847 --> 00:07:35.483
And there's actually a root
directory here which is called root,

121
00:07:35.483 --> 00:07:37.901
right, and that's just a slash.

122
00:07:37.901 --> 00:07:42.056
So you would,
you would represent that as just a slash.

123
00:07:46.561 --> 00:07:50.041
And by running pwd inside
of your shell here,

124
00:07:50.041 --> 00:07:54.081
you've run your first basically program,
right?

125
00:07:54.081 --> 00:07:55.546
Your first bash command there.

126
00:07:55.546 --> 00:08:00.325
One thing I'm gonna throw out here
just really early in the course is,

127
00:08:00.325 --> 00:08:04.393
every command within the command
line works differently.

128
00:08:04.393 --> 00:08:06.906
It does different things,
it has different options.

129
00:08:06.906 --> 00:08:12.051
And I could never keep them all straight
because there are so many of them.

130
00:08:12.051 --> 00:08:18.019
So if I do --help on the end of basically
anything, it'll tell you how to use it.

131
00:08:18.019 --> 00:08:22.263
Now in this particular case,
this might not be that useful for pwd, but

132
00:08:22.263 --> 00:08:24.191
I just want you to know up front.

133
00:08:24.191 --> 00:08:27.452
If you're ever getting confused
of how something works or

134
00:08:27.452 --> 00:08:31.442
how you're supposed to use it,
you can always just tack on a --help,

135
00:08:31.442 --> 00:08:35.251
and it will tell you, here's how
you use this particular command.

136
00:08:38.288 --> 00:08:39.072
Cool.

137
00:08:41.744 --> 00:08:45.458
And then just know that every time that I
type clear, all I'm doing is just clearing

138
00:08:45.458 --> 00:08:47.706
all the stuff off the screen so
I can keep writing.

139
00:08:47.706 --> 00:08:53.118
But if you scroll up here, you can
see that it still retains all of it.

140
00:08:53.118 --> 00:08:56.999
Okay, so now I'm inside of /home/ubuntu,

141
00:08:56.999 --> 00:09:01.683
which is the home directory
of the Ubuntu user, right?

142
00:09:01.683 --> 00:09:05.249
You can see right now
I'm logged in as ubuntu.

143
00:09:05.249 --> 00:09:11.734
If I wanna go to the home directory,
I'm gonna say cd /home.

144
00:09:11.734 --> 00:09:18.017
And you'll see now if I type pwd, I'm no
longer in the /home/ubuntu directory.

145
00:09:18.017 --> 00:09:20.310
I'm inside of the home directory, right?

146
00:09:20.310 --> 00:09:25.764
So imagine if you're in Finder or
if you're inside of your file explorer,

147
00:09:25.764 --> 00:09:28.721
this is like clicking up one directory.

148
00:09:28.721 --> 00:09:30.620
So now I'm in the home directory.

149
00:09:30.620 --> 00:09:34.504
And if I wanted to go back
to the Ubuntu directory,

150
00:09:34.504 --> 00:09:37.747
I could say cd /home/ubuntu like that.

151
00:09:37.747 --> 00:09:40.666
So cd stands for change directory, and

152
00:09:40.666 --> 00:09:44.473
this allows you to navigate
around your computer.

153
00:09:44.473 --> 00:09:47.499
You'll find it's probably the most
used command that you're gonna have.

154
00:09:47.499 --> 00:09:51.201
Now, I know some of you
are sitting there thinking, wait,

155
00:09:51.201 --> 00:09:55.866
I can do this faster like I don't have
to type out the whole qualified path or

156
00:09:55.866 --> 00:09:58.254
the absolute path every single time.

157
00:09:58.254 --> 00:10:00.231
That's true.

158
00:10:00.231 --> 00:10:05.923
So let's say if I just wanted to go up one
directory instead of just being where I am

159
00:10:05.923 --> 00:10:11.217
right now, I can type cd .., and
dot-dot represents go up one, right.

160
00:10:11.217 --> 00:10:16.191
So if I do that, and I do pwd again,
you'll notice I'm in home.

161
00:10:16.191 --> 00:10:21.520
And if I do it again, you'll notice
that I'm in the root directory.

162
00:10:21.520 --> 00:10:26.738
Right, or I can go into cd /home/ubuntu.

163
00:10:26.738 --> 00:10:32.257
And if I want to go up all
the way to the root directory,

164
00:10:32.257 --> 00:10:35.703
you can actually do CD ../..

165
00:10:35.703 --> 00:10:39.767
And you'll notice now that I'm
in the slash directory as well.

166
00:10:39.767 --> 00:10:43.590
So that's what that dot dot means.

167
00:10:43.590 --> 00:10:50.566
It's called a relative path, right, where
I'm telling you to go up one directory.

168
00:10:50.566 --> 00:10:51.450
Any questions about that?

169
00:10:51.450 --> 00:10:54.004
Make sense so far?

170
00:10:54.004 --> 00:10:56.658
I imagine many of you
have seen this before.

171
00:11:01.145 --> 00:11:05.670
Okay, so let's go into,
where am I right now,

172
00:11:05.670 --> 00:11:08.964
pwd, I'm in the root directory.

173
00:11:08.964 --> 00:11:11.949
I'm gonna go into home.

174
00:11:11.949 --> 00:11:15.255
And another thing that
I meant to tell you is,

175
00:11:15.255 --> 00:11:20.487
I've been doing cd /home/ubuntu,
which is a qualified directory.

176
00:11:20.487 --> 00:11:24.687
But if I go into cd home without
the slash, it's relative to where I am.

177
00:11:24.687 --> 00:11:28.387
So here I'm saying, I know inside of here,
there's something called home.

178
00:11:28.387 --> 00:11:32.970
Same thing here,
I know there's something called ubuntu.

179
00:11:32.970 --> 00:11:36.973
So I don't need to put /home/ubuntu,
I can do it relative to where I am.

180
00:11:36.973 --> 00:11:38.476
And that works as well.

181
00:11:41.426 --> 00:11:45.109
Okay, so
I'm gonna go up one more directory here.

182
00:11:45.109 --> 00:11:49.273
And one more thing I'm going to show you.

183
00:11:49.273 --> 00:11:53.585
So if I go back in here to Ubuntu,
you can go ../ and

184
00:11:53.585 --> 00:11:57.715
then I can do things relative
to where I am in here.

185
00:11:57.715 --> 00:12:02.513
So if I wanted to go from here into
ubuntu again, which would be pointless,

186
00:12:02.513 --> 00:12:05.342
could be going out and
in, that would work.

187
00:12:05.342 --> 00:12:10.803
You can get wild here, though, right, so

188
00:12:10.803 --> 00:12:16.126
I can say ../ubuntu/../ubuntu.

189
00:12:16.126 --> 00:12:17.575
Right, so I can go out and
in and out and in.

190
00:12:17.575 --> 00:12:18.665
That's how it works.

191
00:12:18.665 --> 00:12:23.016
Again, I don't know why you would want
to do that, but totally possible.

