WEBVTT

1
00:00:00.000 --> 00:00:04.095
So whether or not you realize that at any
given time your bash shell actually has

2
00:00:04.095 --> 00:00:07.026
a lot of environmental
variables that are already set.

3
00:00:08.398 --> 00:00:10.539
And if you wanna see those
environment variables,

4
00:00:10.539 --> 00:00:13.722
if you just come in here and say printenv,
this is actually going to print out

5
00:00:13.722 --> 00:00:16.693
literally all of the environmental
variables that are set right now.

6
00:00:16.693 --> 00:00:20.879
So you can see things I have in here,
like my path,

7
00:00:20.879 --> 00:00:27.888
the mail client that I prefer to use, the
user, the pwd, the home, the LS colors.

8
00:00:27.888 --> 00:00:34.167
This is all the colors that if you do
ls-lash, like what color is used where.

9
00:00:34.167 --> 00:00:36.968
I don't know the syntax,
you'd have to Google that.

10
00:00:36.968 --> 00:00:40.050
And so what we can do now, we can say,

11
00:00:40.050 --> 00:00:44.540
we can actually use those
environmental variables.

12
00:00:44.540 --> 00:00:50.132
So if I say echo user,
it's gonna echo Ubuntu or echo-

13
00:00:50.132 --> 00:00:55.018
Hello, my name is user, right,
it's gonna say, hello, my name is Ubuntu.

14
00:00:55.018 --> 00:00:58.883
So when it does this dollar sign user,
it's interpreting that or

15
00:00:58.883 --> 00:01:02.273
it's gonna go out and
find that variable and replace it.

16
00:01:02.273 --> 00:01:05.672
So it's actually bash that's doing that,
not echo.

17
00:01:05.672 --> 00:01:10.997
So it's actually done
when the command is run.

18
00:01:10.997 --> 00:01:14.625
So let's say if in this particular case,
I just wanted to change what user was,

19
00:01:14.625 --> 00:01:16.859
I can actually come in and
say USER equals Brian.

20
00:01:16.859 --> 00:01:21.257
And I say echo, same command, right?

21
00:01:21.257 --> 00:01:22.822
But now there's a different
variable in there.

22
00:01:22.822 --> 00:01:24.812
It should say, hello my name is Brian.

23
00:01:24.812 --> 00:01:30.698
Now keep in mind this is actually gonna be
for just this particular session, right?

24
00:01:30.698 --> 00:01:35.674
So as soon as I log out and log back in,
it's gonna drop that variable, but

25
00:01:35.674 --> 00:01:38.423
it is sticky for the rest of the session.

26
00:01:38.423 --> 00:01:42.400
So if I come back in here and
say Ubuntu again,

27
00:01:42.400 --> 00:01:47.041
it's gonna say, hello, my name is Ubuntu.

28
00:01:47.041 --> 00:01:49.268
Or let's say we want to
do one with greeting.

29
00:01:49.268 --> 00:01:56.518
So I can say, echo GREETING USER,

30
00:01:56.518 --> 00:01:59.270
how are you?

31
00:01:59.270 --> 00:02:04.969
So there's nothing here for greeting, so
it doesn't know what to do about that.

32
00:02:04.969 --> 00:02:13.529
So let's make a greeting equal to Hello.

33
00:02:13.529 --> 00:02:16.176
You don't have to put the quotes there
in that particular case because there's

34
00:02:16.176 --> 00:02:16.738
no space there.

35
00:02:16.738 --> 00:02:21.239
So if I run that same thing again,
what do you think is gonna happen?

36
00:02:21.239 --> 00:02:22.142
It's gonna say,

37
00:02:22.142 --> 00:02:26.603
hello Ubuntu cuz it's gonna be all one
word cuz there's not enough spaces there.

38
00:02:26.603 --> 00:02:29.323
Wait, no, it actually did space them out.

39
00:02:29.323 --> 00:02:33.025
Every time the sync surprises me with
how the sentence ends up working, but

40
00:02:33.025 --> 00:02:36.162
in any case, so now I can actually
come back here and say hello.

41
00:02:36.162 --> 00:02:39.614
I can change this to greetings.

42
00:02:39.614 --> 00:02:45.271
Run this again and
it says greetings Ubuntu, how are you?

43
00:02:45.271 --> 00:02:49.062
So these are like variables and the reason
why these are like variables is because

44
00:02:49.062 --> 00:02:52.257
they are literally variables and
so you can use these as variables.

45
00:02:53.650 --> 00:02:57.175
Now what happens if I wanna
make some of these permanent,

46
00:02:57.175 --> 00:03:01.004
right, like let's say I have
some sort of preferences here.

47
00:03:01.004 --> 00:03:08.032
The first thing you can do is you
can sudo vi /etc/environment.

48
00:03:08.032 --> 00:03:13.082
So anything that I put in here,

49
00:03:13.082 --> 00:03:19.307
let's say TEST_THING=blah blah.

50
00:03:19.307 --> 00:03:24.734
So now if I write and quit here, And

51
00:03:24.734 --> 00:03:28.457
I don't think it'll work on this one.

52
00:03:28.457 --> 00:03:32.771
What did I call it, test thing?

53
00:03:34.628 --> 00:03:39.780
But if I quit, And open shell again,

54
00:03:42.882 --> 00:03:47.244
Now, if I say echo TEST_THING,
every time that my

55
00:03:47.244 --> 00:03:52.223
bash session starts up,
it's going to reread from that.

56
00:03:52.223 --> 00:03:57.148
But the interesting part of what
I've done here is if I sudo su, or

57
00:03:57.148 --> 00:04:02.163
if I, yeah, switch users to Brian
like I had in previous ones, and

58
00:04:02.163 --> 00:04:07.111
I say echo TEST_THING,
looks like Brian has it as well, right?

59
00:04:07.111 --> 00:04:11.399
Because that etc/environment is shared
by every single user on the computer,

60
00:04:11.399 --> 00:04:13.578
which is not necessarily what you want.

61
00:04:13.578 --> 00:04:16.747
Usually when you are setting environment
variables like that, you want it just for

62
00:04:16.747 --> 00:04:17.659
that particular user.

63
00:04:20.799 --> 00:04:23.490
This is similar with like, etc profile and

64
00:04:23.490 --> 00:04:27.162
etc bash RC like that's
actually system wide resources.

65
00:04:27.162 --> 00:04:30.798
So you can actually set the bash RC, we'll
talk about bash RC in a little bit, but

66
00:04:30.798 --> 00:04:33.276
you can actually set it for
every user on the computer.

67
00:04:33.276 --> 00:04:37.875
Most of time you just don't want to,
you want to set it just for your user.

68
00:04:39.294 --> 00:04:42.164
So let's go ahead and see how to do that.

69
00:04:42.164 --> 00:04:44.188
We're actually going to do
that right now with bash RC.

70
00:04:45.773 --> 00:04:52.905
So I want you to say vi
tilde slash.bash_rc.

71
00:04:56.391 --> 00:04:58.754
Sorry, not underscore rc,
that's not the one you want.

72
00:05:03.462 --> 00:05:05.126
And also I don't want
to be as Brian anymore.

73
00:05:05.126 --> 00:05:11.615
I wanna be back as Ubuntu, so
I'm gonna say clear LS, and who am I?

74
00:05:11.615 --> 00:05:14.786
So you can see that I'm Ubuntu,

75
00:05:14.786 --> 00:05:20.666
I'm gonna say vi to my dot bash RC,
not no underscore here.

76
00:05:20.666 --> 00:05:24.021
And you can see here there's actually
quite a bit already in here.

77
00:05:24.021 --> 00:05:28.922
Normally that's not necessarily gonna be
the case when you're running Ubuntu but

78
00:05:28.922 --> 00:05:30.602
because this is multipass,

79
00:05:30.602 --> 00:05:34.887
multipass gives you a bunch of very
good defaults that you can fall onto.

80
00:05:36.207 --> 00:05:40.923
So I'm just gonna go down here to the end,
and I'm gonna add a new line here.

81
00:05:40.923 --> 00:05:48.098
And I'm gonna say export another
variable equals something cool.

82
00:05:49.917 --> 00:05:52.410
And I'm gonna write and quit from here.

83
00:05:52.410 --> 00:05:58.181
And now that's gonna be run every single
time that I start up this particular user,

84
00:05:58.181 --> 00:05:58.765
right?

85
00:05:58.765 --> 00:06:01.487
But I can never remember what I called it.

86
00:06:01.487 --> 00:06:03.449
What did I put,
I called it another variable.

87
00:06:03.449 --> 00:06:05.234
It's a great name, Brian.

88
00:06:05.234 --> 00:06:10.265
All right, so right now if I say echo,
another variable,

89
00:06:10.265 --> 00:06:18.562
we're gonna have the same problem,
That it's not gonna work.

90
00:06:18.562 --> 00:06:22.104
And actually, that wouldn't work
then anyway, because, well, it did.

91
00:06:22.104 --> 00:06:24.352
So that's what that export
name right there means.

92
00:06:24.352 --> 00:06:28.775
It means I want to export this
out to the general environment.

93
00:06:28.775 --> 00:06:32.350
What I can do is,
I can say source -/ bashrc as well,

94
00:06:32.350 --> 00:06:37.198
that actually goes and reruns it cuz
that bash RC is actually just a script

95
00:06:37.198 --> 00:06:40.867
that it runs at the beginning
of every single session.

96
00:06:40.867 --> 00:06:47.661
So now if I do this echo again, now it's
there because that bash RC has been run.

97
00:06:47.661 --> 00:06:51.500
So we'll get more into bash RC
at the very end of the course.

98
00:06:51.500 --> 00:06:54.339
But suffice to say it's where you're
gonna do all your customizations, right?

99
00:06:54.339 --> 00:06:58.995
It's gonna be where you change your
prompt, it's gonna where you set up

100
00:06:58.995 --> 00:07:03.802
scripts to use, there's a bunch of stuff
you can do with all the colors that

101
00:07:03.802 --> 00:07:07.724
you wanna use, and
then set up variables for just your user.

102
00:07:10.489 --> 00:07:13.249
And that all goes in bash RC,
you wanna put all that stuff in bash RC.

103
00:07:13.249 --> 00:07:16.093
Now, a thing that people always ask me is,

104
00:07:16.093 --> 00:07:20.761
what's the difference between bash RC and
bash underscore profile?

105
00:07:20.761 --> 00:07:23.361
I had to look it up for
this course cuz I can never remember,

106
00:07:23.361 --> 00:07:26.350
all I can always remember is use bash RC,
don't use bash profile.

107
00:07:26.350 --> 00:07:32.213
One's a relic of the past,
which is the bash RC,

108
00:07:32.213 --> 00:07:35.649
so the bash RC is always run.

109
00:07:35.649 --> 00:07:39.874
And what I'll actually end up putting in
the bash profile which is only run at

110
00:07:39.874 --> 00:07:40.873
the first login.

111
00:07:40.873 --> 00:07:44.240
So the first time you
open bash interactively,

112
00:07:44.240 --> 00:07:46.603
that's when bash profiles run.

113
00:07:46.603 --> 00:07:53.000
So in 100% of my bash profiles,

114
00:07:53.000 --> 00:07:58.331
so bash underscore profile,

115
00:07:58.331 --> 00:08:03.448
we'll open in VI, I just put

116
00:08:03.448 --> 00:08:08.780
this particular statement,

117
00:08:08.780 --> 00:08:13.470
if dash f Bash RC then, and

118
00:08:13.470 --> 00:08:19.252
I'll put source bash RC and FI.

119
00:08:19.252 --> 00:08:23.944
Well, oops, we'll get into what this
actual syntax means with the if statement

120
00:08:23.944 --> 00:08:27.401
and all that kind of stuff and
how to do more bash scripting.

121
00:08:27.401 --> 00:08:30.944
But all this thing does is it says,
if a bash RC exists,

122
00:08:30.944 --> 00:08:33.190
run that, otherwise do nothing.

123
00:08:33.190 --> 00:08:37.857
And that way you can be assured
that every single time that your

124
00:08:37.857 --> 00:08:41.827
Bash session opens,
that your Bash RC is being run.

125
00:08:41.827 --> 00:08:45.405
And that way you can put everything in
Bash RC and not worry about Bash profile.

126
00:08:45.405 --> 00:08:49.131
Again, if you needed something to only run
on the first interactive log in shell,

127
00:08:49.131 --> 00:08:52.317
which I really cannot imagine what
that is, but if you have that need,

128
00:08:52.317 --> 00:08:53.728
you can put it in Bash Profile.

129
00:08:53.728 --> 00:08:56.651
Otherwise, just put it in bash RC.

130
00:08:56.651 --> 00:08:59.191
Does that makes sense?

131
00:08:59.191 --> 00:09:05.751
So yeah, I keep all my
environmental variables in bash RC.

132
00:09:09.697 --> 00:09:14.424
Cool, does anyone have
any questions about that?

133
00:09:14.424 --> 00:09:18.734
So every user has their own bash RC.

134
00:09:18.734 --> 00:09:21.337
You can see here I have mine right there.

135
00:09:21.337 --> 00:09:24.266
That was created for me,
I didn't have to do anything for it.

136
00:09:24.266 --> 00:09:29.045
Brian would have their own bash RC,
so every user has their own.

137
00:09:29.045 --> 00:09:33.787
There is the one in, so
if I say sudo vi /etc/bashrc

138
00:09:35.912 --> 00:09:39.101
If I put something here,
this would be a bash RC for everybody.

139
00:09:39.101 --> 00:09:44.865
I really don't know why you would ever do
that, but that's where you would put it.

