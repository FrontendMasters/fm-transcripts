WEBVTT

1
00:00:00.000 --> 00:00:05.025
Let's go and let's talk about hashbang,
which is a term that I did not make up,

2
00:00:05.025 --> 00:00:08.035
but it's kinda fun to say out loud,
hashbang.

3
00:00:08.035 --> 00:00:11.834
Or it's often called shebang,
and I'm not making these up,

4
00:00:11.834 --> 00:00:14.393
that's actually what they're called.

5
00:00:14.393 --> 00:00:19.085
So open your gen_files again,

6
00:00:19.085 --> 00:00:23.788
and at the very top line, oops.

7
00:00:23.788 --> 00:00:29.749
We're going to put a hash and
a bang or hash an exclamation point.

8
00:00:29.749 --> 00:00:32.670
And then you say slash bin slash bash.

9
00:00:32.670 --> 00:00:37.973
And that there can be a space there,
or not a space there, up to you.

10
00:00:39.544 --> 00:00:42.955
So what is this part up here?

11
00:00:42.955 --> 00:00:48.163
This first line is going to be read
by bash, which is going to say,

12
00:00:48.163 --> 00:00:53.305
here's the thing that you need
to interpret this file, right?

13
00:00:53.305 --> 00:00:55.611
So in this particular case, we're saying,

14
00:00:55.611 --> 00:00:59.083
this is a shell script, so
use bash to interpret this shell script.

15
00:00:59.083 --> 00:01:02.888
And the reason why this is interesting is
because let's say this was a Python file.

16
00:01:02.888 --> 00:01:06.163
You could actually say like,
this is a Python file, please interpret

17
00:01:06.163 --> 00:01:09.675
this as a Python file and then you
wouldn't have to use Python to invoke it.

18
00:01:09.675 --> 00:01:11.690
You just say, hey bash, run this file.

19
00:01:11.690 --> 00:01:13.488
I don't know how to invoke it and

20
00:01:13.488 --> 00:01:17.958
then bash using this shebang at the top
would say, I use Python to run this file.

21
00:01:17.958 --> 00:01:19.339
Does that make sense?

22
00:01:19.339 --> 00:01:20.033
Right?

23
00:01:20.033 --> 00:01:23.847
So it's kinda giving a clue to bash.

24
00:01:23.847 --> 00:01:25.593
Here's how you run this file.

25
00:01:25.593 --> 00:01:31.235
So in this case, we're saying to bash,
use bash to interpret this.

26
00:01:31.235 --> 00:01:32.391
Now, why is this interesting?

27
00:01:32.391 --> 00:01:36.802
So I saved this I'm
going to quit out of it.

28
00:01:36.802 --> 00:01:41.719
Let's move gen_files to gen_files but

29
00:01:41.719 --> 00:01:45.654
with without the.sh at the end.

30
00:01:45.654 --> 00:01:51.276
Okay, so now if you look in here,
it has no file extension gen_files,

31
00:01:51.276 --> 00:01:55.888
and then I'm going to say ch
mod plus x on that gen_files.

32
00:02:00.197 --> 00:02:03.443
Okay, so now if you look in here
you can see that it's a green,

33
00:02:03.443 --> 00:02:06.075
which in my LS colors
means that it's invocable.

34
00:02:06.075 --> 00:02:11.165
Or if you look at it with the permissions,
you can see here that it

35
00:02:11.165 --> 00:02:16.846
has write permissions, or sorry,
these x permissions for everyone.

36
00:02:16.846 --> 00:02:22.904
Now what I can say is ./gen_files,
and it still works.

37
00:02:22.904 --> 00:02:25.948
Which is pretty cool cuz now
it's an executable file,

38
00:02:25.948 --> 00:02:29.269
that thanks to that shebang,
it knows how to run that file.

39
00:02:29.269 --> 00:02:35.237
So notice that I'm not using source,
I'm not using dot, I'm not using bash.

40
00:02:35.237 --> 00:02:37.701
I'm just saying, run this file, and

41
00:02:37.701 --> 00:02:41.098
it figures out how to do
that from the shebang right?

42
00:02:41.098 --> 00:02:46.027
So to kind of prove my point here,
we can actually do this like we can define

43
00:02:46.027 --> 00:02:49.060
it as a different
interpreter besides bash.

44
00:02:49.060 --> 00:02:51.254
Let's like write a really quick node one.

45
00:02:51.254 --> 00:02:54.196
So I'm going to say first which
node to find out where the path to

46
00:02:54.196 --> 00:02:56.926
the node is because you have
to get a fully qualified path.

47
00:02:56.926 --> 00:03:00.590
So snap in node, that's where my node is.

48
00:03:00.590 --> 00:03:06.361
So I'm gonna copy that and I'm gonna say
vi node test with no file extension.

49
00:03:06.361 --> 00:03:10.262
I'm going to give it
a shebang of snap bin node.

50
00:03:10.262 --> 00:03:13.890
And then I'm just gonna say console.log.

51
00:03:13.890 --> 00:03:22.448
This is running from node.js, okay?

52
00:03:22.448 --> 00:03:25.049
I'm gonna right click that.

53
00:03:25.049 --> 00:03:29.850
And then I'm gonna say chmod + x node_test

54
00:03:29.850 --> 00:03:34.014
I'm going to say dot slash node test.

55
00:03:34.014 --> 00:03:36.133
And you can say this is
running from node.js.

56
00:03:36.133 --> 00:03:39.900
So it actually loaded up node.js,
ran it, and then work from there.

57
00:03:39.900 --> 00:03:42.565
So you can actually do
that with any program.

58
00:03:42.565 --> 00:03:45.909
You can kind of say, hey,
go use this to run this file.

59
00:03:45.909 --> 00:03:47.437
That's what the point of this shebang.

60
00:03:47.437 --> 00:03:50.410
So if I left that line out, it'd be like,
I don't know what any of this is,

61
00:03:50.410 --> 00:03:51.608
I don't know how to run this.

62
00:03:51.608 --> 00:03:52.971
And so it wouldn't work.

63
00:03:52.971 --> 00:03:55.120
Does that make sense?

64
00:03:55.120 --> 00:03:56.021
Cool.

65
00:03:57.806 --> 00:04:00.929
So that's the point of the hash, bang,
shebang, whatever you want to call it.

66
00:04:03.245 --> 00:04:06.771
It's a good idea if you're writing bash
scripts to just always put bin bash at

67
00:04:06.771 --> 00:04:09.766
the top there because that's
that's how that's going to work.

68
00:04:09.766 --> 00:04:13.009
And the other part that's really
nice about using shebangs like this,

69
00:04:13.009 --> 00:04:14.576
is you can write a bash script, and

70
00:04:14.576 --> 00:04:17.244
then you can share that bash
script with like your friend.

71
00:04:17.244 --> 00:04:18.948
And your friend could be using zsh.

72
00:04:18.948 --> 00:04:20.330
They could be using fish.

73
00:04:20.330 --> 00:04:24.789
You can kind of guarantee that it's gonna
work the way that you anticipate because

74
00:04:24.789 --> 00:04:29.440
even if you're running it from fish shell
or from PowerShell or something like that,

75
00:04:29.440 --> 00:04:32.627
it's going to go out and
find the correct bash to run that.

76
00:04:32.627 --> 00:04:35.901
And then it's going to work
the way that you anticipate

77
00:04:35.901 --> 00:04:40.400
it without them having to like rewrite
your entire script for their shell.

78
00:04:40.400 --> 00:04:43.864
If that makes sense.

