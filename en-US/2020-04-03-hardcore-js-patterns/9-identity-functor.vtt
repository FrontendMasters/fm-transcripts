WEBVTT

1
00:00:00.440 --> 00:00:02.058
So next steps here.

2
00:00:02.058 --> 00:00:05.845
We're going to look at functors.

3
00:00:05.845 --> 00:00:11.175
So let's jump over to, let's save that and

4
00:00:11.175 --> 00:00:17.957
go to monoids 2, monoids 1,
0 indexed, of course.

5
00:00:17.957 --> 00:00:22.304
So functors are monoids.

6
00:00:22.304 --> 00:00:26.613
All right, I'm gonna be using monoids and
semigroups kind of interchangeably.

7
00:00:26.613 --> 00:00:29.650
I'm really getting at
the concatenation behavior.

8
00:00:29.650 --> 00:00:35.786
And identity comes as a very nice
property that follows from that.

9
00:00:35.786 --> 00:00:39.040
But most of the time we care
very much about concating.

10
00:00:39.040 --> 00:00:41.965
Not as much about identity.

11
00:00:41.965 --> 00:00:43.871
But it does pay off.

12
00:00:43.871 --> 00:00:44.976
So it's good to know.

13
00:00:44.976 --> 00:00:46.420
But I'm gonna use it interchangeably.

14
00:00:46.420 --> 00:00:50.262
So we have these functors here, ID.

15
00:00:50.262 --> 00:00:54.750
This was box in the functional
programming class.

16
00:00:54.750 --> 00:00:56.008
It's the identity functor.

17
00:00:56.008 --> 00:00:57.669
It just does nothing.

18
00:00:57.669 --> 00:00:58.894
Task capture the async.

19
00:00:58.894 --> 00:01:03.820
Either captures the you'll have a left or
a right, usually errors.

20
00:01:04.820 --> 00:01:09.300
So if I put a task,
I'll start with the ID.

21
00:01:09.300 --> 00:01:12.240
ID's easy to look at.

22
00:01:12.240 --> 00:01:17.629
And let's grab some of these some of these
fun monoids that we've defined over here.

23
00:01:17.629 --> 00:01:19.987
So we've got any and
all and empty and whatnot.

24
00:01:19.987 --> 00:01:22.453
We're gonna just throw them up there.

25
00:01:22.453 --> 00:01:24.085
And there we go.

26
00:01:24.085 --> 00:01:28.443
So we have an ID of a sum of 2.

27
00:01:28.443 --> 00:01:35.029
And I can actually concat
that with an ID of sum of 3.

28
00:01:35.029 --> 00:01:38.410
And we should get an ID
of the sum of five.

29
00:01:39.790 --> 00:01:45.814
So ID is a monoid if what
it's holding is a monoid.

30
00:01:45.814 --> 00:01:48.384
Like to say a butter fingered hang glider.

31
00:01:48.384 --> 00:01:50.690
It is one whilst it holds one.

32
00:01:50.690 --> 00:01:55.680
So via the fact is that
If it's just a semigroup,

33
00:01:55.680 --> 00:01:58.735
then ID would be a semigroup.

34
00:01:58.735 --> 00:02:02.121
Right, it's whatever it's
holding defines its behavior.

35
00:02:02.121 --> 00:02:05.738
So we could say let's go ahead and
see if this actually works.

36
00:02:05.738 --> 00:02:09.164
Fingers crossed y'all.

37
00:02:09.164 --> 00:02:13.757
And I think I have to call extract
to get it out of the ID for now.

38
00:02:13.757 --> 00:02:15.424
So let's look at that.

39
00:02:15.424 --> 00:02:19.520
Or in fact, let's not call extract and
see what it gives me.

40
00:02:21.000 --> 00:02:23.401
Node monoids one.

41
00:02:23.401 --> 00:02:27.597
Yeah, so we get this kind of thing,
which is an identity functor.

42
00:02:27.597 --> 00:02:28.810
It's just hard to look at.

43
00:02:28.810 --> 00:02:31.403
So we'll call extract.

44
00:02:31.403 --> 00:02:35.390
&gt;&gt; And in this case extract is
the same as full in the last class?

45
00:02:35.390 --> 00:02:37.223
&gt;&gt; That's exactly right.

46
00:02:37.223 --> 00:02:42.180
And what we've got is an object,
which is probably wrong.

47
00:02:43.670 --> 00:02:45.565
So let's look at that.

48
00:02:45.565 --> 00:02:50.998
And let's just see if I got my
implementation wrong of either or

49
00:02:50.998 --> 00:02:54.060
if it's just not looking right.

50
00:02:54.060 --> 00:02:55.113
Let's do fold.

51
00:02:55.113 --> 00:02:59.109
Hey, let's bring in that fun identity
function to fold it out right?

52
00:02:59.109 --> 00:03:00.361
We'll call it ID.

53
00:03:00.361 --> 00:03:04.020
We'll do x and x, cool.

54
00:03:04.020 --> 00:03:06.194
Fold ID, ID.

55
00:03:06.194 --> 00:03:08.040
All right, let's see if this one works.

56
00:03:08.040 --> 00:03:09.263
Okay, this one works.

57
00:03:09.263 --> 00:03:10.768
I just messed up my identity function.

58
00:03:10.768 --> 00:03:13.253
Actually, this will be kind of fun
to see how this is implemented.

59
00:03:13.253 --> 00:03:15.964
Let's go over to our types.

60
00:03:15.964 --> 00:03:20.998
Now, let's find identity in this chaos.

61
00:03:20.998 --> 00:03:27.210
And we're saying,
we hold something, x, look at that.

62
00:03:27.210 --> 00:03:29.847
I didn't program to the interface.

63
00:03:29.847 --> 00:03:34.420
[LAUGH] That's why, here we go, cool.

64
00:03:34.420 --> 00:03:36.185
So as we can see here,

65
00:03:36.185 --> 00:03:41.302
we have an ID concating its
innards with another one, right?

66
00:03:41.302 --> 00:03:44.667
So what it's doing is saying
whatever I'm holding,

67
00:03:44.667 --> 00:03:49.095
have that concat with the other one,
and extract that out to get its x.

68
00:03:49.095 --> 00:03:50.752
And then we'll go ahead and

69
00:03:50.752 --> 00:03:54.580
keep it inside the ID because
it's closed under composition.

70
00:03:54.580 --> 00:03:59.320
So let's put it back into ID, ID and

71
00:03:59.320 --> 00:04:05.330
then we should be able
to extract out of here.

72
00:04:05.330 --> 00:04:07.580
There we go, cool.

73
00:04:07.580 --> 00:04:11.395
So that's the benefit of programming
through an interface if you

74
00:04:11.395 --> 00:04:12.374
actually do it.

75
00:04:12.374 --> 00:04:20.360
So, one other thing we can do here is,
so these stack as much as we want.

76
00:04:20.360 --> 00:04:28.997
Right, we can put an ID of
a right of a task [LAUGH].

77
00:04:28.997 --> 00:04:30.840
And it just composes.

78
00:04:30.840 --> 00:04:33.283
It just straight up will cascade,

79
00:04:33.283 --> 00:04:38.100
concating whatever this is holding
with whatever this is holding.

80
00:04:38.100 --> 00:04:41.743
The point is, as long as I'm concating
something with the same shape,

81
00:04:41.743 --> 00:04:45.873
if we go back to that gobstopper example,
we took all these different effects and

82
00:04:45.873 --> 00:04:47.735
we made it into the same shape.

83
00:04:47.735 --> 00:04:51.272
It's kind of this layered type.

84
00:04:51.272 --> 00:04:54.647
And I can actually concat
that with another thing.

85
00:04:54.647 --> 00:04:58.806
And it will open up the ID,
open up the right, open up the task and

86
00:04:58.806 --> 00:05:00.515
concat the sun together.

