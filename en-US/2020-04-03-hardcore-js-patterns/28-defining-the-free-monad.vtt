WEBVTT

1
00:00:00.510 --> 00:00:02.970
This is where things go
a little off the rails.

2
00:00:02.970 --> 00:00:05.919
We're going to talk about Free.

3
00:00:05.919 --> 00:00:13.041
And full disclosure, Free Monads
are usually not what you want [LAUGH] but

4
00:00:13.041 --> 00:00:19.462
they solve a very specific problem and
it's good to know about and

5
00:00:19.462 --> 00:00:24.900
when we're talking about
functional architecture.

6
00:00:24.900 --> 00:00:28.320
We talked about monad transformer
stacks and we talked about free monads.

7
00:00:28.320 --> 00:00:31.290
And we talked about like
these reader type injections.

8
00:00:31.290 --> 00:00:36.610
We saw reader injection through ask or
dependency injection through ask.

9
00:00:36.610 --> 00:00:40.110
And I just wanna show you
an example of using Free.

10
00:00:40.110 --> 00:00:41.850
And it actually turns out,

11
00:00:41.850 --> 00:00:45.380
it was the best solution to the first
app that I wanted to build.

12
00:00:45.380 --> 00:00:47.270
So it's worthwhile to know.

13
00:00:48.440 --> 00:00:52.090
So, what is free, the free monad?

14
00:00:52.090 --> 00:00:59.930
The free monad is a is a way to take your
functions and treat them like data types.

15
00:00:59.930 --> 00:01:05.010
So if I have a function like HTTP GET and
it takes some

16
00:01:05.010 --> 00:01:10.190
arguments like a URL,
instead of it going and

17
00:01:10.190 --> 00:01:16.490
making a task and trying to like,
go do this function right now,

18
00:01:16.490 --> 00:01:22.450
we can actually return a data type,
like HttpGet holding the URL.

19
00:01:22.450 --> 00:01:27.630
So you have a data type now that
represents going to get a URL.

20
00:01:27.630 --> 00:01:33.000
And the reason we want it to be
a monad is because we want to say,

21
00:01:33.000 --> 00:01:37.040
well, I have this data type,
and I want to chain, right?

22
00:01:39.090 --> 00:01:40.880
As if it actually did it.

23
00:01:40.880 --> 00:01:44.115
And I want to get
the contents of that URL, and

24
00:01:44.115 --> 00:01:46.065
I could use something like an HTTP POST.

25
00:01:46.065 --> 00:01:51.560
And we'll do some other
URL like analytics,

26
00:01:53.360 --> 00:01:58.170
with the contents, all right?

27
00:01:58.170 --> 00:02:03.720
And then, what I should end up with
is a data structure representing

28
00:02:03.720 --> 00:02:07.790
the nested tree of computation.

29
00:02:07.790 --> 00:02:09.870
You're basically building an AST.

30
00:02:09.870 --> 00:02:13.600
You're lifting your
functions into datatypes,

31
00:02:13.600 --> 00:02:19.600
treating them as if they're running and
then you're able to interpret them later.

32
00:02:19.600 --> 00:02:21.600
So now we have to create
what we call an interpreter

33
00:02:23.430 --> 00:02:28.670
interpret over here to actually
interpret the status structure.

34
00:02:28.670 --> 00:02:30.970
So we're actually gonna
build this right here.

35
00:02:32.920 --> 00:02:38.495
And what I wanna do is actually
bringing in a new library.

36
00:02:38.495 --> 00:02:39.755
It's called daggy.

37
00:02:39.755 --> 00:02:45.175
We're gonna bring in tag some,
great library, highly recommended.

38
00:02:45.175 --> 00:02:51.615
Daggy, all it does is this whole entire
class I was making stuff like HTTP GET,

39
00:02:51.615 --> 00:02:55.840
it takes some value, take some x and
returns as a data type.

40
00:02:55.840 --> 00:02:58.070
We have methods on it.

41
00:02:58.070 --> 00:03:03.310
This just allows us to, it's in a shorter
syntax for defining these objects.

42
00:03:03.310 --> 00:03:09.140
And then it gives me a function to kind
of decompose a set of different types and

43
00:03:09.140 --> 00:03:10.162
we'll see that in a second.

44
00:03:10.162 --> 00:03:16.940
So the way Daggy works is I'll say,
we have http and we'll call it tag sum.

45
00:03:16.940 --> 00:03:19.740
So it's like a sum type,
it's like a type definition.

46
00:03:19.740 --> 00:03:23.130
Say HTTP is the name of
the superclass kind of thing.

47
00:03:23.130 --> 00:03:30.110
Then we're gonna say we have a get,
and the arguments get has is x.

48
00:03:30.110 --> 00:03:32.170
How about URL?

49
00:03:32.170 --> 00:03:34.160
And then we have a post.

50
00:03:34.160 --> 00:03:36.160
And we'll have the URL and the body.

51
00:03:37.720 --> 00:03:45.000
So, what we've done here is say,
I've defined two data types GET and POST.

52
00:03:45.000 --> 00:03:48.679
And actually let's just take a look
at that before we go any further.

53
00:03:48.679 --> 00:03:54.729
So, if I say Http, Get, whatever, home.

54
00:03:54.729 --> 00:03:58.890
You can console.log this thing.

55
00:03:58.890 --> 00:04:02.776
And it's just like a little data type for

56
00:04:02.776 --> 00:04:07.480
my, Own usage.

57
00:04:07.480 --> 00:04:10.550
See?
It's got a little url home.

58
00:04:10.550 --> 00:04:15.420
So it's a shorter syntax for
those big object literals I was creating.

59
00:04:15.420 --> 00:04:21.570
But what's cool about it is I'm able
to say, if I have a get of home

60
00:04:23.010 --> 00:04:27.676
and I can call Cata on that and
it's a short for Catamorphism.

61
00:04:27.676 --> 00:04:32.580
I can do a pattern matching to say,
well if it's a get, get the URL out and

62
00:04:32.580 --> 00:04:34.480
do something, hi.

63
00:04:34.480 --> 00:04:37.645
And if it's a post, I have the URL and

64
00:04:37.645 --> 00:04:43.020
the body at my disposal,
I'll say, post whatever.

65
00:04:43.020 --> 00:04:46.550
These two functions, so I can
actually run a catamorphism on it and

66
00:04:46.550 --> 00:04:48.930
it will pattern match on what type it is.

67
00:04:48.930 --> 00:04:51.660
And then allow me to destructure
the type and do something to it.

68
00:04:51.660 --> 00:04:56.820
So these two things together will be
using, to kinda short cut this little type

69
00:04:56.820 --> 00:05:01.810
of creation library and
it allows me to easily digest and

70
00:05:01.810 --> 00:05:05.450
match rather than being like, do you have.

71
00:05:05.450 --> 00:05:09.190
Otherwise, I would have to say like,
I don't know what X is, right?

72
00:05:09.190 --> 00:05:11.300
Is this a get or a post?

73
00:05:11.300 --> 00:05:12.738
I'm not sure.

74
00:05:12.738 --> 00:05:18.480
Without Cata I would have to be like,
you know, does x have a body and

75
00:05:18.480 --> 00:05:23.160
it's probably again, so it makes it nice
to be able to pattern match on the type.

76
00:05:24.710 --> 00:05:25.430
All right, cool.

77
00:05:25.430 --> 00:05:29.510
So we've done is taken our
functions get with a URL and

78
00:05:29.510 --> 00:05:32.160
post with the URL and
body and made it a data type.

79
00:05:32.160 --> 00:05:37.800
Then we have this little helper function
called lift f, it lifts it into free.

80
00:05:39.370 --> 00:05:44.500
So if I say httpGet, I can't.

81
00:05:44.500 --> 00:05:48.320
What I can do is make these things
into monads, just by calling lift F.

82
00:05:50.210 --> 00:05:52.040
That's why it's the free monad.

83
00:05:52.040 --> 00:05:55.660
It just lifts the type right in,
just like an array is the free monoid or

84
00:05:55.660 --> 00:05:57.590
you can just throw anything in it.

85
00:05:57.590 --> 00:06:03.490
We can do that with lift F,
can we have this Get, httpGet.

86
00:06:04.870 --> 00:06:11.330
And then we have an httpPost,
and it takes the URL in the body.

87
00:06:12.910 --> 00:06:15.270
And this can certainly be automated.

88
00:06:15.270 --> 00:06:18.860
All we're doing is running the constructor
and then calling lift F right afterwards.

89
00:06:18.860 --> 00:06:19.800
It's just composition.

90
00:06:21.150 --> 00:06:25.190
But just trying to be complete and
show you how this works.

91
00:06:25.190 --> 00:06:30.530
Okay, so
now let's actually run a little app here.

92
00:06:30.530 --> 00:06:37.050
So like app is,
we'll say first get the httpGet on home.

93
00:06:37.050 --> 00:06:39.730
And then we're gonna chain
that with the contents.

94
00:06:40.740 --> 00:06:44.510
And yeah,
we'll do this post with the contents.

95
00:06:44.510 --> 00:06:46.850
And that's not httpPost, httpPost.

96
00:06:48.300 --> 00:06:53.060
So just just so we're aware, these
little helper functions are literally

97
00:06:53.060 --> 00:06:55.337
just the constructors and
I'm throwing them into lift F.

98
00:06:58.000 --> 00:07:04.660
So what we're getting is
a free of httpGet, and

99
00:07:04.660 --> 00:07:11.300
a free of httpPost here, so
that's how I can call chain.

100
00:07:11.300 --> 00:07:14.580
So when I call this function, I can get
a free monad, I can chain the free monad.

101
00:07:14.580 --> 00:07:18.163
What's really nice about this is free
monads aren't anything but data,

102
00:07:18.163 --> 00:07:21.166
they're just a data type and
it just normalizes everything,

103
00:07:21.166 --> 00:07:23.842
and I can just chain and
compose and do whatever I want.

104
00:07:23.842 --> 00:07:30.300
So recall result is going up.

105
00:07:30.300 --> 00:07:32.456
Let's console.log what we have here.

106
00:07:32.456 --> 00:07:36.600
What's going on here?

107
00:07:36.600 --> 00:07:39.070
So this is a little weird.

108
00:07:39.070 --> 00:07:44.400
We have a free monad that has
a property x is holding our get object.

109
00:07:44.400 --> 00:07:47.050
And then, we have this kind
of continuation function.

110
00:07:48.430 --> 00:07:52.290
So we're going to do here is
pass this into an interpreter.

111
00:07:53.590 --> 00:07:56.270
And the way we do that, it's kind of fun.

112
00:07:56.270 --> 00:08:01.196
If you have a free, free holding some

113
00:08:01.196 --> 00:08:06.070
stuff, we can fold map
that out of the free, and

114
00:08:07.090 --> 00:08:12.960
map it into some other type before that
out of this and into something else.

115
00:08:12.960 --> 00:08:14.700
So that's what we'll do.

116
00:08:14.700 --> 00:08:15.950
We're gonna make a little interpreter.

117
00:08:17.040 --> 00:08:22.420
So we have the app, and we're gonna
fold map the app into interpret, and

118
00:08:22.420 --> 00:08:25.870
let's make a little task, right?

119
00:08:25.870 --> 00:08:29.350
We'll make a new task because these things
are gonna go do serious stuff, right?

120
00:08:29.350 --> 00:08:33.231
Actually, you know, I'm just gonna
use ID to stub it out, honestly,

121
00:08:33.231 --> 00:08:36.596
ID is typically what I do when I'm,
kinda architecting, and

122
00:08:36.596 --> 00:08:40.673
then when I've got all my types in order,
I'll just swap out ID with task,

123
00:08:40.673 --> 00:08:44.913
this way I can actually look at what's
going on instead of having it in a task.

124
00:08:44.913 --> 00:08:47.999
So we have our interpret,
let's write that.

125
00:08:52.124 --> 00:08:55.320
Now takes our type x.

126
00:08:55.320 --> 00:09:00.840
And again, we gonna call our Catamorphism
on that, and if it's a get, we get a URL.

127
00:09:00.840 --> 00:09:06.140
Why don't we do like, you know,
got your URL and put this in that.

128
00:09:06.140 --> 00:09:13.220
This will be the contents for

129
00:09:13.220 --> 00:09:18.430
this url, and we have a post,
and it takes a url and a body

130
00:09:19.810 --> 00:09:27.084
and we'll say, posted body to this url.

131
00:09:28.500 --> 00:09:30.160
So, this is interesting.

132
00:09:30.160 --> 00:09:34.614
What we've just done is we've written
an app entirely with data, and

133
00:09:34.614 --> 00:09:39.650
then we've decided at the calling
time which interpreter we wanna use.

134
00:09:39.650 --> 00:09:43.660
This interpreter will
interpret it into strings.

135
00:09:43.660 --> 00:09:48.502
It has to be an ID,
we have to have a target monad here

136
00:09:48.502 --> 00:09:53.620
cuz we're calling full map and
we want to be able to put it into another.

137
00:09:53.620 --> 00:09:55.291
So its Id.of.

138
00:09:55.291 --> 00:09:56.580
Should have mentioned that,

139
00:09:56.580 --> 00:09:59.900
we should usually have a target monad,
it's almost always task.

140
00:09:59.900 --> 00:10:03.820
But if you're doing something like these
little like, log kind of interpreters,

141
00:10:03.820 --> 00:10:06.740
test interpreters, then we can do that.

142
00:10:06.740 --> 00:10:07.478
And now let's run it.

143
00:10:07.478 --> 00:10:09.350
And what do we get?

144
00:10:09.350 --> 00:10:11.530
We get our idea out so
we could just call extract.

145
00:10:14.080 --> 00:10:14.790
Look at that.

146
00:10:14.790 --> 00:10:17.750
It posted the contents for
home to analytics.

147
00:10:17.750 --> 00:10:21.790
So we've we've created a data structure,
we could write more on that,

148
00:10:21.790 --> 00:10:25.060
I think we could do like chain we
are gonna make more get calls and

149
00:10:25.060 --> 00:10:26.840
whatever and
it's just the data structure and

150
00:10:26.840 --> 00:10:30.110
then we interpret that data
structure using foldMap, which just

151
00:10:30.110 --> 00:10:35.230
cascades down and runs each instruction
and interprets it, that's great.

152
00:10:35.230 --> 00:10:36.179
Any questions, yes.

153
00:10:37.200 --> 00:10:43.290
&gt;&gt; So we're using the Catamorphism
as a switch statement.

154
00:10:43.290 --> 00:10:44.830
&gt;&gt; Yeah.
&gt;&gt; There's a lot more going on under

155
00:10:44.830 --> 00:10:49.630
the hood, I know what the monad is but
I'm curious if you comment on that.

156
00:10:49.630 --> 00:10:53.520
We're essentially using it as
a way of doing a bunch of ifs.

157
00:10:53.520 --> 00:10:55.420
&gt;&gt; That's totally right.

158
00:10:55.420 --> 00:11:01.500
We're saying like this x could be a get,
or it could be a post.

159
00:11:01.500 --> 00:11:06.690
And JavaScript doesn't give me
the tools out of the box to say like,

160
00:11:06.690 --> 00:11:08.690
what kind of constructor do I have?

161
00:11:08.690 --> 00:11:10.070
I'll do this and that and this and that.

162
00:11:10.070 --> 00:11:12.960
So it's exactly what it's just
saying like, if you're get do this,

163
00:11:12.960 --> 00:11:14.950
if you're post do that.

164
00:11:14.950 --> 00:11:19.150
Reads really nice and this is really
short so I didn't want to fill up half

165
00:11:19.150 --> 00:11:22.840
the screen with like classes or types and
then try to like write an interpreter.

166
00:11:22.840 --> 00:11:27.030
So that's why we brought doggy in and
I highly recommend it.

167
00:11:27.030 --> 00:11:30.970
It's great if I actually miss
this before it even gets there,

168
00:11:30.970 --> 00:11:33.195
I think daggy will tell me.

169
00:11:33.195 --> 00:11:38.734
Hey, you gave me some stuff and
you didn't have post in there.

170
00:11:38.734 --> 00:11:39.720
That's really nice.

171
00:11:39.720 --> 00:11:43.424
[LAUGH] Like I tried to interpret your
type that said ahead get and post and

172
00:11:43.424 --> 00:11:44.760
you missed a case.

173
00:11:44.760 --> 00:11:46.964
So that's pretty cool.

174
00:11:46.964 --> 00:11:51.040
All right, so
that's free monads in two seconds.

175
00:11:51.040 --> 00:11:52.840
We're actually gonna use that for
the first app.

176
00:11:52.840 --> 00:11:58.420
I really wanna drive
home that this is useful,

177
00:11:58.420 --> 00:12:02.290
I find it very useful when
we did an app where we were

178
00:12:02.290 --> 00:12:07.860
pushing the NPM back when we had Bower,
y'all remember Bower, what a world.

179
00:12:07.860 --> 00:12:12.970
Anyway, [LAUGH] We're like posting like
GitHub packages and all this stuff and

180
00:12:12.970 --> 00:12:19.220
we're doing all this like really nasty
processes with all these side effects and

181
00:12:19.220 --> 00:12:22.880
it was almost impossible to separate
the logic from the side effects.

182
00:12:22.880 --> 00:12:25.430
Cuz it was literally all side effects.

183
00:12:25.430 --> 00:12:27.170
So it was like, how do we test this thing?

184
00:12:27.170 --> 00:12:28.470
How do we work with this thing?

185
00:12:28.470 --> 00:12:32.490
How do we make it so like,
I'm not posting to NPM every time I run

186
00:12:32.490 --> 00:12:35.480
it like that sucks, like I really
want to build this app out, but

187
00:12:35.480 --> 00:12:38.210
I don't want to like
accidentally publish things.

188
00:12:38.210 --> 00:12:40.800
And this was a great solution for that.

189
00:12:40.800 --> 00:12:45.201
And it came in handy then and
then I haven't had to use it since.

190
00:12:45.201 --> 00:12:49.350
[LAUGH] So like, it's there for
you if you need it and it's really useful.

