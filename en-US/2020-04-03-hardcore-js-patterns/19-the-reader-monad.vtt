WEBVTT

1
00:00:00.030 --> 00:00:06.745
What it's done is unnested it by taking
a second argument and passing it in.

2
00:00:06.745 --> 00:00:10.830
And if the second argument here
is just high again, right, but

3
00:00:10.830 --> 00:00:14.623
it's the original high,
which is kind of weird, right?

4
00:00:14.623 --> 00:00:19.930
We gave it this x, and this one processed
it and passed in the transformed x.

5
00:00:19.930 --> 00:00:22.460
This one's running
the original x on the outside.

6
00:00:22.460 --> 00:00:26.139
So we get this kind of like x hat or
something.

7
00:00:26.139 --> 00:00:27.588
It's like the original x.

8
00:00:27.588 --> 00:00:30.700
So the exclaim that we would
get the lowercase one right?

9
00:00:31.720 --> 00:00:34.025
Do that up cuz it's x hat, of course.

10
00:00:34.025 --> 00:00:37.657
[LAUGH] let's just go back to x.

11
00:00:37.657 --> 00:00:40.172
So we get the original x.

12
00:00:40.172 --> 00:00:44.451
Let's put this in an array that
has the upper one and that one, so

13
00:00:44.451 --> 00:00:46.598
we can see both at the same time.

14
00:00:46.598 --> 00:00:48.345
Let me get both here.

15
00:00:48.345 --> 00:00:53.248
So this behavior doesn't seem very
useful upfront, but it will allows us

16
00:00:53.248 --> 00:00:58.171
to do is thread kind of invisible
environment through our whole program.

17
00:00:58.171 --> 00:01:01.576
That's why we call this reader,
is because x wasn't transformed.

18
00:01:01.576 --> 00:01:05.820
x is just kinda carried through and I can
just gain access to it whenever I want.

19
00:01:05.820 --> 00:01:12.396
So as I start transforming, my input can
still get back to this kind of original.

20
00:01:12.396 --> 00:01:17.594
Something else that's interesting is
we can make a function of, takes x, and

21
00:01:17.594 --> 00:01:22.970
we'll just return a function that takes
whatever, and just puts the x in there.

22
00:01:24.580 --> 00:01:27.140
So we can start with a function of Hello.

23
00:01:28.600 --> 00:01:30.680
And then we can map to upper on that.

24
00:01:30.680 --> 00:01:34.423
Let's do this so we can get some room.

25
00:01:34.423 --> 00:01:35.554
What's happening now?

26
00:01:35.554 --> 00:01:38.296
This is kind of weird, right?

27
00:01:38.296 --> 00:01:41.842
It's going to be hi or hello.

28
00:01:41.842 --> 00:01:47.940
We have two arguments now, we got Hello
and hi', so what's happening here?

29
00:01:47.940 --> 00:01:53.290
We're starting with a function with
the argument here x as its result,

30
00:01:53.290 --> 00:01:55.740
and we're gonna map over that.

31
00:01:55.740 --> 00:01:57.472
We can map over it all day long.

32
00:01:57.472 --> 00:02:02.180
We can ignore this hi thing, right,
this will just be uppercase tillow.

33
00:02:02.180 --> 00:02:04.990
But if we want to access
the second argument,

34
00:02:04.990 --> 00:02:06.280
let's make it a little bit more formal.

35
00:02:06.280 --> 00:02:08.620
Let's say this is the port 3000, right?

36
00:02:08.620 --> 00:02:11.205
If I wanna access my config,

37
00:02:11.205 --> 00:02:16.718
all of a sudden I can make
a function here inside my function.

38
00:02:16.718 --> 00:02:18.980
And that gives me the config.

39
00:02:18.980 --> 00:02:25.620
So let's just show, we've got our
upper and our config at the same time.

40
00:02:27.700 --> 00:02:31.900
Sweet, we're pulling stuff
out of thin air, and

41
00:02:31.900 --> 00:02:36.300
typically you'll see this
kind of framed this way,

42
00:02:36.300 --> 00:02:39.904
where we have a function running through.

43
00:02:39.904 --> 00:02:42.950
And then somewhere in the middle of this
this app, I just wanna grab my config and

44
00:02:42.950 --> 00:02:44.141
there it comes out of nowhere.

45
00:02:44.141 --> 00:02:46.580
I don't know how that works, it's amazing.

46
00:02:46.580 --> 00:02:51.489
So let's make one more function to make
this a little bit more convenient.

47
00:02:51.489 --> 00:02:55.030
And we'll say Fn.ask.

48
00:02:55.030 --> 00:03:00.283
And Fn.ask is just already
a function that says,

49
00:03:00.283 --> 00:03:06.421
okay, I'm going to just give
you whatever I'm holding.

50
00:03:06.421 --> 00:03:08.300
Just like config to config, right?

51
00:03:09.870 --> 00:03:14.020
So this is a convenience function that
says instead of this bizarre function

52
00:03:14.020 --> 00:03:17.950
constructor in the middle of my stuff,
I'm able to say,

53
00:03:19.610 --> 00:03:22.700
ask, and then I get my config out.

54
00:03:23.760 --> 00:03:28.280
And I can return upper in
config at the same time.

55
00:03:28.280 --> 00:03:32.050
And notice we're doing chain, right,
because ask is another function.

56
00:03:32.050 --> 00:03:36.253
And then we can run it with config and
and we blow up, see?

57
00:03:36.253 --> 00:03:36.795
Done.

58
00:03:36.795 --> 00:03:40.750
[LAUGH] No, what's happening here?

59
00:03:40.750 --> 00:03:42.934
ask is not defined, it's Fn.ask.

60
00:03:42.934 --> 00:03:46.010
There we go and there we go.

61
00:03:46.010 --> 00:03:47.600
This is the reader monad.

62
00:03:47.600 --> 00:03:51.290
It's insanely helpful during
function architecture.

63
00:03:51.290 --> 00:03:56.644
Lately, libraries have started to work
way more on this signature of Zio or Rio.

64
00:03:56.644 --> 00:04:00.113
The idea is that you can do
dependency injection in here.

65
00:04:00.113 --> 00:04:02.919
I could have not just my configuration but

66
00:04:02.919 --> 00:04:06.053
all of my dependencies
like my db connection.

67
00:04:06.053 --> 00:04:10.930
And whatever my strategy for whatever
I wanna use in my local storage or

68
00:04:10.930 --> 00:04:14.745
whatever, and
then I can just get my environment out.

69
00:04:14.745 --> 00:04:16.330
And now I have all my my effects.

70
00:04:16.330 --> 00:04:19.490
I've just kind of passed
in those out of nowhere.

71
00:04:20.630 --> 00:04:26.860
So this is a really useful technique
that we can use, but that's reader.

72
00:04:26.860 --> 00:04:28.226
Super cool.

73
00:04:28.226 --> 00:04:31.690
I'm not gonna talk about state,
but state is exactly this.

74
00:04:31.690 --> 00:04:34.770
It's like the same exact thing, except
we're able to thread a state through and

75
00:04:34.770 --> 00:04:36.480
modify it.

76
00:04:36.480 --> 00:04:39.472
And this one doesn't let you modify it.

77
00:04:39.472 --> 00:04:43.990
I just don't find it as useful
maybe in JavaScript as others do.

78
00:04:43.990 --> 00:04:45.710
But we can talk about that later.

