WEBVTT

1
00:00:00.260 --> 00:00:03.070
Over here on the left, we have a bunch
of pieces that we're going to assemble,

2
00:00:03.070 --> 00:00:05.560
little Legos that we're
exposing to the user.

3
00:00:05.560 --> 00:00:07.330
On the right, we have a purple box.

4
00:00:08.620 --> 00:00:12.770
And so this is kind of trying to capture
the idea of a little, bunch of little

5
00:00:12.770 --> 00:00:16.350
functions that you compose versus one
big function that does all the work.

6
00:00:17.870 --> 00:00:22.790
And one of the benefits here of
the little functions that we're composing

7
00:00:24.280 --> 00:00:27.440
is we get infinite use cases
like the combinatorics of

8
00:00:27.440 --> 00:00:30.510
all the ways you can compose the functions
to create new functionality.

9
00:00:30.510 --> 00:00:34.050
We're just giving those to the user and
say, you know, saying go, go nuts.

10
00:00:34.050 --> 00:00:37.329
Have fun with these these functions and
make your own apps.

11
00:00:38.410 --> 00:00:41.950
We end up with little simple,
understandable pieces,

12
00:00:41.950 --> 00:00:47.050
often highly reusable, lots of,
lots of goodness here.

13
00:00:47.050 --> 00:00:49.760
But it's also hard to
change the implementation.

14
00:00:49.760 --> 00:00:51.210
It's harder.

15
00:00:51.210 --> 00:00:55.100
And if we're gonna try this,

16
00:00:55.100 --> 00:01:00.100
the way we get flexibility when we
give all the pieces to our users

17
00:01:00.100 --> 00:01:05.470
to compose is by enforcing that each of
these pieces compose in a principled way.

18
00:01:05.470 --> 00:01:08.610
And we can change the implementation
all we want as long as they still hold

19
00:01:08.610 --> 00:01:12.920
the contracts that we're defining.

20
00:01:12.920 --> 00:01:18.520
So this is largely how algebra, abstract
algebra works is you have these pieces

21
00:01:18.520 --> 00:01:24.190
that you can pose in many different ways,
but those pieces have laws of composition,

22
00:01:24.190 --> 00:01:26.330
and you can implement them
in many different ways.

23
00:01:26.330 --> 00:01:29.560
So that gives you a lot of flexibility but
you have to really work at that.

24
00:01:31.400 --> 00:01:33.240
And it's also harder for
the user to compose, right?

25
00:01:33.240 --> 00:01:35.991
They have to go like, put all these
pieces together all the time.

26
00:01:37.472 --> 00:01:42.584
Getting into the other side of things, the
extreme other side where we have a box,

27
00:01:42.584 --> 00:01:47.890
you give me input, I'll give you output,
and it does everything for you.

28
00:01:47.890 --> 00:01:51.320
While we have a lot of flexibility and
implementation changes we can

29
00:01:51.320 --> 00:01:55.020
take a value and do whatever we want
as long as it returns the same output.

30
00:01:55.020 --> 00:01:58.240
We can we can change this all day long.

31
00:01:58.240 --> 00:02:01.380
But there's less use cases
out there to support and

32
00:02:01.380 --> 00:02:04.740
they only can kind of do one
thing with this function.

33
00:02:04.740 --> 00:02:08.870
But if we're capturing this procedure
with a name and contract, and

34
00:02:08.870 --> 00:02:11.930
we're representing out in the world
to be composed with other

35
00:02:11.930 --> 00:02:13.020
parts of every other program.

36
00:02:14.510 --> 00:02:19.110
Essentially, you're gonna inevitably
run into a case where you

37
00:02:19.110 --> 00:02:24.570
pass in an if else or some kind of flag,
or something if you wanna reuse this unit

38
00:02:24.570 --> 00:02:28.900
in different ways, so
those conditionals get pushed into

39
00:02:28.900 --> 00:02:31.850
the box rather than being out when
we compose in different ways.

40
00:02:31.850 --> 00:02:33.710
Does that make sense?

41
00:02:33.710 --> 00:02:35.515
I'm talking pretty abstract right now.

42
00:02:35.515 --> 00:02:40.170
[LAUGH] But the idea is that if
we write one giant function,

43
00:02:40.170 --> 00:02:44.079
and we need to use it in different places,
inevitably if else is within the function.

44
00:02:45.610 --> 00:02:48.022
We can't satisfy all the cases
with few if else's, right?

45
00:02:48.022 --> 00:02:53.680
The is minimal compared to providing
a bunch of functions for composing.

46
00:02:53.680 --> 00:02:59.500
You get way less so
sometimes this is the right decision.

47
00:02:59.500 --> 00:03:01.650
And sometimes this is the right decision.

48
00:03:01.650 --> 00:03:05.270
But we're going to focus
on this decision today.

49
00:03:05.270 --> 00:03:06.650
And that's because,

50
00:03:06.650 --> 00:03:11.890
most of the time this will pay off
in your application development.

51
00:03:11.890 --> 00:03:15.090
This one over here will pay
off much more when you're

52
00:03:15.090 --> 00:03:17.560
developing a library that does one thing.

53
00:03:19.390 --> 00:03:24.600
So just as a quick example of
the abstract algebra stuff, this is

54
00:03:24.600 --> 00:03:30.120
the definition of group from Wikipedia,
and we can define so many groups.

55
00:03:30.120 --> 00:03:35.579
If you look at like instances of groups,
they're just like everywhere and they're

56
00:03:35.579 --> 00:03:40.670
free to implement in different ways,
as long as they satisfy these properties.

57
00:03:40.670 --> 00:03:42.720
This is what your
documentation can look like.

58
00:03:42.720 --> 00:03:47.430
Versus, you know, it's called this and
take this and put to that output and

59
00:03:47.430 --> 00:03:49.550
you don't know anything else
about how you can compose it.

60
00:03:51.020 --> 00:03:55.470
So one last note on that is sometimes
you build an app and its like this and

61
00:03:55.470 --> 00:03:56.260
its wonderful.

62
00:03:56.260 --> 00:03:58.760
Like, this is, you know,
my library, this is my application.

63
00:03:58.760 --> 00:04:01.840
We have all these little functions and
you compose them, it's great.

64
00:04:01.840 --> 00:04:03.530
And sometimes it's like this.

65
00:04:03.530 --> 00:04:07.330
And composition doesn't really buy much.

66
00:04:07.330 --> 00:04:13.020
You really gonna have an awesome like one
of those, called car cruiser fighters?

67
00:04:13.020 --> 00:04:16.820
No, I'm going to be in so
much trouble with the internet.

68
00:04:16.820 --> 00:04:17.950
&gt;&gt; X wing
&gt;&gt; X wing.

69
00:04:17.950 --> 00:04:19.200
I guess it makes an X.

70
00:04:19.200 --> 00:04:23.240
Yeah, well,
anyway Star Wars battle flyer thing,

71
00:04:23.240 --> 00:04:26.280
you're gonna have one or
you're not gonna have it, right?

72
00:04:26.280 --> 00:04:30.915
It's not going to be very useful for the
user to have to recompose this thing every

73
00:04:30.915 --> 00:04:33.588
time unless it's a fun game for
the children.

74
00:04:33.588 --> 00:04:38.091
So we're gonna favor composable functions,
mostly.

75
00:04:38.091 --> 00:04:41.996
I just wanted to call out that caveat
like if you're if you're always you know,

76
00:04:41.996 --> 00:04:45.570
abiding by these these principles,
you might make the wrong decision.

77
00:04:45.570 --> 00:04:51.100
Sometimes it's just a good guiding light
into the right solution most of the time.

