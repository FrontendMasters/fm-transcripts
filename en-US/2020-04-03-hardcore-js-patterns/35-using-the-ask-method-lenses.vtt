WEBVTT

1
00:00:00.210 --> 00:00:02.963
Lenses y'all, right?

2
00:00:02.963 --> 00:00:03.580
Let's bring those in.

3
00:00:04.830 --> 00:00:10.767
So bring in a lens prop, And

4
00:00:10.767 --> 00:00:16.212
over of n, let's also get removed for
destroy because I like,

5
00:00:16.212 --> 00:00:20.748
I don't have to do these weird splices and
whatnot.

6
00:00:20.748 --> 00:00:25.125
We'll come we'll get that from lamda, so

7
00:00:25.125 --> 00:00:29.753
now on create we can say,
fact append array.

8
00:00:29.753 --> 00:00:35.990
So we can do over state and we need
to make a lens prop for the habits.

9
00:00:35.990 --> 00:00:41.387
That's what we want to change right
elda habits, overhead habits.

10
00:00:41.387 --> 00:00:45.940
We want to sorry states the last argument.

11
00:00:45.940 --> 00:00:50.750
We want to append the habit.

12
00:00:50.750 --> 00:00:54.011
Cool, forgot a little.

13
00:00:54.011 --> 00:00:56.921
And let's go ahead and
make our little lens namespace and

14
00:00:56.921 --> 00:00:59.670
we could probably just do this in mind.

15
00:00:59.670 --> 00:01:07.181
Yet habits and
that will be lensProp, Habit.

16
00:01:08.904 --> 00:01:12.242
Cool, one thing about this
little autocomplete thing,

17
00:01:12.242 --> 00:01:16.570
it tells me I actually imported it right,
so that's nice.

18
00:01:16.570 --> 00:01:19.512
Cool, so we all see how that works.

19
00:01:19.512 --> 00:01:24.834
Let's see if that goes through a,
b not working at all.

20
00:01:24.834 --> 00:01:27.432
[LAUGH] All right, what's happening here?

21
00:01:27.432 --> 00:01:32.094
So we're saying over the habits,
append the habit.

22
00:01:32.094 --> 00:01:36.846
And do you believe that should work, so

23
00:01:36.846 --> 00:01:39.875
anybody see any issues?

24
00:01:39.875 --> 00:01:41.734
&gt;&gt; Structure the habit.

25
00:01:41.734 --> 00:01:44.476
&gt;&gt; Habits in your own lensprop.

26
00:01:44.476 --> 00:01:46.811
&gt;&gt; Thank you that's it.

27
00:01:46.811 --> 00:01:52.555
Good i b, c it's so nice.

28
00:01:52.555 --> 00:01:57.481
All right and if I destroy let's get
rid of cleared the whole thing out,

29
00:01:57.481 --> 00:01:59.055
I did that on purpose.

30
00:01:59.055 --> 00:02:01.051
[LAUGH] All right.

31
00:02:01.051 --> 00:02:05.804
So let's do the same
thing with lenses why not

32
00:02:05.804 --> 00:02:10.683
over habits remove the ID
x remove one is remove

33
00:02:10.683 --> 00:02:15.700
is basically like splice or
the state traffic.

34
00:02:15.700 --> 00:02:21.288
And then were run this a,
b and c the actual property,

35
00:02:21.288 --> 00:02:26.679
cool letter b, so we're doing great,
we're very happy.

36
00:02:26.679 --> 00:02:31.076
We're using Montes,
we got all the stuffs but

37
00:02:31.076 --> 00:02:35.585
one thing that kind annoying
me is that each time

38
00:02:35.585 --> 00:02:39.772
we're having to kind of,
how do I say this?

39
00:02:39.772 --> 00:02:45.060
We have to deal with this state and
managing, like adding to it.

40
00:02:45.060 --> 00:02:48.934
What if instead, we actually returned,

41
00:02:48.934 --> 00:02:53.813
we just returned a state and
it just merged it for us.

42
00:02:53.813 --> 00:02:57.260
We didn't have to deal with
merging this stuff, right?

43
00:02:58.800 --> 00:03:03.864
So this object assign for
instance is saying I have a state and

44
00:03:03.864 --> 00:03:08.728
it's on you as a developer of our app,
as we add new actions

45
00:03:08.728 --> 00:03:13.517
over time to always make sure
you merge the state back in.

46
00:03:13.517 --> 00:03:20.820
What if you could just return merge and
it's a monoid.

47
00:03:20.820 --> 00:03:23.555
Right, monoids for the wind, so

48
00:03:23.555 --> 00:03:29.233
now I don't have to worry about
actually object assigning my state.

49
00:03:29.233 --> 00:03:30.740
Let's make a monoid there.

50
00:03:30.740 --> 00:03:35.970
We do the same thing here,
just emerge and emerge here.

51
00:03:35.970 --> 00:03:40.890
And so what this is gonna do is just
merge, with the lenses, not such a big

52
00:03:40.890 --> 00:03:43.510
deal where we're just opening up
the state changing something and

53
00:03:43.510 --> 00:03:46.700
returning a whole state back so the merge
doesn't buy as much here, but down here,

54
00:03:46.700 --> 00:03:50.300
it does a lot like we're just
turning a little bit of state.

55
00:03:50.300 --> 00:03:52.550
It will merge that back into the state for
us.

56
00:03:52.550 --> 00:03:55.380
And as we build more,
we don't have to worry about always

57
00:03:55.380 --> 00:03:58.280
managing this whole state structure and
not breaking it.

58
00:03:58.280 --> 00:04:02.487
We could just return the little
piece that we care about

59
00:04:02.487 --> 00:04:05.238
everybody on board with this idea.

60
00:04:05.238 --> 00:04:06.719
All right, let's go ahead and
make a merge.

61
00:04:07.880 --> 00:04:13.038
Back to our very first
thing of the day monoids.

62
00:04:13.038 --> 00:04:17.637
And we'll just say I will expose the X and
we'll concat that by saying,

63
00:04:17.637 --> 00:04:18.952
get another merge.

64
00:04:18.952 --> 00:04:24.890
We always stay closed, object assign, make
a nice copy, so we don't break anything.

65
00:04:24.890 --> 00:04:28.620
Maybe we can go back and try to check and
make sure it's super performing and

66
00:04:28.620 --> 00:04:32.240
get rid of this but at the moment,
we're just gonna be on the safe side and

67
00:04:32.240 --> 00:04:33.630
make a nice little copy.

68
00:04:33.630 --> 00:04:38.740
And we'll say other .x,
so we're merging our x

69
00:04:38.740 --> 00:04:43.593
with another x meaning plus a merge a 1,

70
00:04:43.593 --> 00:04:50.060
concat merge a 2,

71
00:04:50.060 --> 00:04:54.180
I think I want the right one to win,
so that makes sense.

72
00:04:54.180 --> 00:04:58.360
This one's gonna overwrite this one,
just how we're defining it, so work.

73
00:04:59.470 --> 00:05:05.835
See what happens, maybe we'll flip that,
but there we go, so we get a merge.

74
00:05:05.835 --> 00:05:12.323
Now I have to go update our
main app loop now, right?

75
00:05:12.323 --> 00:05:16.310
Let's go ahead and just get rid
of these curly braces killing me.

76
00:05:16.310 --> 00:05:21.033
[LAUGH] If you ever see me write curly
braces and a function and return,

77
00:05:21.033 --> 00:05:23.078
I'm in a bad space mentally.

78
00:05:23.078 --> 00:05:26.516
[LAUGH] So, here we are,
we're in this event loop and

79
00:05:26.516 --> 00:05:30.830
as we call these functions now
the returning a submerge, right.

80
00:05:32.130 --> 00:05:39.630
So what we'll have to do is get the state
we wanna start with emerge of state

81
00:05:39.630 --> 00:05:44.730
working concat that with whatever
this returns which is emerge.

82
00:05:46.110 --> 00:05:49.560
And then okay that concats
It there's the whole thing,

83
00:05:49.560 --> 00:05:52.610
and we're not gonna pass a merge here.

84
00:05:52.610 --> 00:05:54.230
So let's just pop it out of the merge,

85
00:05:54.230 --> 00:05:59.080
just get it out, get it out of the type
of the x after we do the operation.

86
00:05:59.080 --> 00:06:01.887
Everybody see how that works?

87
00:06:01.887 --> 00:06:04.691
We're gonna merge the two states, so

88
00:06:04.691 --> 00:06:09.560
this returns a merge on each of these and
then we take it out.

89
00:06:09.560 --> 00:06:13.170
Great, it's still working.

90
00:06:13.170 --> 00:06:14.090
How about that?

91
00:06:14.090 --> 00:06:16.960
And we click B, and
it's showing B, hooray.

92
00:06:16.960 --> 00:06:21.840
One thing I don't like already is that
I have to call merge everywhere, so

93
00:06:21.840 --> 00:06:22.840
let's factor that out.

94
00:06:22.840 --> 00:06:27.977
Let's put that back down into our
event loop will get it out of these

95
00:06:27.977 --> 00:06:33.760
these little functions that are just
returning little bits of state now and

96
00:06:33.760 --> 00:06:37.271
they're all being merged, not super nice.

97
00:06:37.271 --> 00:06:41.400
So we'll just put this in
a merge down here, cool.

98
00:06:41.400 --> 00:06:44.424
It's getting a little bit out of control.

99
00:06:44.424 --> 00:06:48.320
Let's go ahead [LAUGH] and do that or
something for the time being.

100
00:06:49.390 --> 00:06:51.300
All right, and
we'll concat these two right here,

101
00:06:51.300 --> 00:06:55.120
and we'll get the x, there we go.

102
00:06:55.120 --> 00:06:58.970
So it's a little bit ugly,
I'm not gonna lie, but that's fine.

103
00:06:58.970 --> 00:07:02.848
Not ugly conceptually,
that's a lot of nesting.

104
00:07:02.848 --> 00:07:07.042
But up here, when we're actually defining
our functions, look how clean this is.

105
00:07:07.042 --> 00:07:10.082
I don't know if you've ever used redox,
but

106
00:07:10.082 --> 00:07:14.644
there's the littered with switch
statements and what not, okay?

107
00:07:14.644 --> 00:07:19.704
We know that state gets
passed in each time.

108
00:07:19.704 --> 00:07:21.506
And we know we can flip
arguments around and

109
00:07:21.506 --> 00:07:23.420
we can use readers to
kind of factor that out.

110
00:07:23.420 --> 00:07:26.516
And I noticed,
I'm not using state down here, right?

111
00:07:26.516 --> 00:07:30.330
I'm just ignoring it, so
why do I have to pass it in every time?

112
00:07:30.330 --> 00:07:31.970
Why do I have to deal with it?

113
00:07:31.970 --> 00:07:34.274
Now they just returned
a little bits of state.

114
00:07:34.274 --> 00:07:40.055
How do I how about we only ask for
it when we want to map over the state and

115
00:07:40.055 --> 00:07:44.620
then we'll do look how
nice this worked out.

116
00:07:44.620 --> 00:07:50.580
I can cancel out the state's boom, boom.

117
00:07:50.580 --> 00:07:54.744
So it's just a first class
function that passes in the state.

118
00:07:54.744 --> 00:07:58.260
All right, that's neat and now this is
just a function that takes a habit.

119
00:07:59.520 --> 00:08:03.391
Hey look,
that function is like a normal function.

120
00:08:03.391 --> 00:08:06.273
[LAUGH] It's not a reducer anymore.

121
00:08:06.273 --> 00:08:11.107
So let's go ahead and do that for
these let's get rid of the state here and

122
00:08:11.107 --> 00:08:15.863
we'll do the exact same pattern here,
we'll map over, we'll ask for

123
00:08:15.863 --> 00:08:18.096
the state and we'll get it back.

124
00:08:18.096 --> 00:08:22.825
And then down here we get rid of the state
all together, we don't even have to ask

125
00:08:22.825 --> 00:08:27.490
for it, we're fine, okay,
how do we how do we implement that, right?

126
00:08:27.490 --> 00:08:31.360
Well, we have to go get
asked right off the bat, so

127
00:08:31.360 --> 00:08:37.500
let's get a function from our lib types,

128
00:08:39.300 --> 00:08:43.390
and function has asked so
just ask from function.

129
00:08:44.550 --> 00:08:49.640
Great, and then we'll use functions
down here to model our stuff.

130
00:08:49.640 --> 00:08:53.917
Now I could wrap this in a function and
all that, but

131
00:08:53.917 --> 00:08:59.505
I'm gonna say this is a function
that returns the FN type, right?

132
00:08:59.505 --> 00:09:04.381
And this one I guess I could just put
that right there just for now and

133
00:09:04.381 --> 00:09:07.790
say, okay, well,
I have a function of that.

134
00:09:08.930 --> 00:09:15.270
I believe we can factor this out again to
get back to that or not, I'm not sure yet.

135
00:09:15.270 --> 00:09:19.560
We'll figure it out, so, where are we?

136
00:09:19.560 --> 00:09:22.160
Instead of calling our
function a state now,

137
00:09:22.160 --> 00:09:25.560
we're just caught with the payload, right?

138
00:09:25.560 --> 00:09:30.150
But then we run that thing with
the state and it can choose whether or

139
00:09:30.150 --> 00:09:32.210
not it wants to use it.

140
00:09:33.460 --> 00:09:36.540
All right, compiled successfully,
look at that.

141
00:09:36.540 --> 00:09:40.910
Going over here, a,
b look how nice that is.

142
00:09:40.910 --> 00:09:43.919
I could delete it, yep,
I can show it, yep.

143
00:09:43.919 --> 00:09:48.556
Cool, all right, so now we're able
to just pull state out of nowhere.

144
00:09:48.556 --> 00:09:53.940
[LAUGH] And, in return little
bits we're gonna do here is say,

145
00:09:53.940 --> 00:10:00.710
all right again, the structure of this
application can be different, right?

146
00:10:00.710 --> 00:10:03.950
We can pull this out into our app loop.

147
00:10:05.160 --> 00:10:08.110
We can pull all this stuff
out into our controller.

148
00:10:09.170 --> 00:10:13.504
We can move this into a library and so

149
00:10:13.504 --> 00:10:18.170
we don't have to here.

150
00:10:18.170 --> 00:10:21.544
And honestly,
I don't care that we are, you know,

151
00:10:21.544 --> 00:10:26.377
hit a point where I want to move those
into a controller and a little model and

152
00:10:26.377 --> 00:10:31.008
utility libraries and my little main
function, which is the app loop.

153
00:10:31.008 --> 00:10:34.060
But you typically see a lot of
functional programs like this,

154
00:10:34.060 --> 00:10:36.490
because it just doesn't matter.

155
00:10:36.490 --> 00:10:40.430
And so I think it eventually matters and
that's when you do it.

