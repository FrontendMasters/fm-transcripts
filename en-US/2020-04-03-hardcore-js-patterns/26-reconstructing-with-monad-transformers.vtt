WEBVTT

1
00:00:00.000 --> 00:00:03.260
This is where things get
a little bit intense.

2
00:00:03.260 --> 00:00:07.860
So I can say I have a function transformer

3
00:00:08.920 --> 00:00:12.860
of, let's say, a task, all right.

4
00:00:12.860 --> 00:00:15.020
And we'll call this a function task.

5
00:00:16.880 --> 00:00:21.756
Then I could say I have an either
transformer, well let's do, yeah,

6
00:00:21.756 --> 00:00:24.164
let's do an either transformer.

7
00:00:26.763 --> 00:00:31.309
Either transformer of function task,

8
00:00:31.309 --> 00:00:35.311
[LAUGH] and we'll call that my app.

9
00:00:35.311 --> 00:00:37.320
All right, what's happening here?

10
00:00:37.320 --> 00:00:42.222
Well, I have a transformer stack inside
a transformer stack inside a transformer

11
00:00:42.222 --> 00:00:44.361
stack inside a transformer stack.

12
00:00:44.361 --> 00:00:49.374
So my app type really is,
probably should be expressed without all

13
00:00:49.374 --> 00:00:54.568
these kind of transformers,
as I haven't either holding a function

14
00:00:54.568 --> 00:00:59.060
holding a task, and
I'd like to just continue that shape.

15
00:00:59.060 --> 00:01:02.720
Let's say my app just continually
might have an error, and

16
00:01:02.720 --> 00:01:04.310
if it does we just wanna stop.

17
00:01:04.310 --> 00:01:08.275
But if it doesn't keep going and then it
has a function inside that which holds

18
00:01:08.275 --> 00:01:11.448
a task, cuz all these functions
just do side effecty things,

19
00:01:11.448 --> 00:01:13.356
so we're gonna side circuit early.

20
00:01:13.356 --> 00:01:16.240
We have a bunch of functions and
each of them is running a task.

21
00:01:16.240 --> 00:01:19.485
Cuz that's a type of my app right there,
right.

22
00:01:19.485 --> 00:01:24.478
And this is kind of what you're gonna
see with these Monad transformer based

23
00:01:24.478 --> 00:01:25.415
libraries and

24
00:01:25.415 --> 00:01:30.577
functional programming is that you get
these kind of stacks of transformers.

25
00:01:30.577 --> 00:01:34.900
And you have to kind of figure out how to
get your stuff in the right spot and lift.

26
00:01:36.760 --> 00:01:39.723
So let's let's see how this works.

27
00:01:39.723 --> 00:01:43.071
Actually haven't tried either T,
[LAUGH] so let's go ahead and

28
00:01:43.071 --> 00:01:44.910
see what's happening here.

29
00:01:44.910 --> 00:01:46.330
I might have to swap that one out.

30
00:01:47.400 --> 00:01:54.800
Console that log, res,
see if we're just level on the original.

31
00:01:54.800 --> 00:01:57.323
Yeah, it's not working, all right,
let's see what happens.

32
00:01:57.323 --> 00:02:01.060
It's just not the right path, all righty.

33
00:02:03.030 --> 00:02:05.250
Okay, so that seems happy.

34
00:02:05.250 --> 00:02:09.510
so I have app of two, map x x plus one.

35
00:02:09.510 --> 00:02:11.684
Okay, so this should be three,
I have an app of three.

36
00:02:14.064 --> 00:02:17.050
All right, but what is an app?

37
00:02:17.050 --> 00:02:20.620
Remember, it's an either holding
a function holding a task.

38
00:02:20.620 --> 00:02:24.350
So let's try to get at this value.

39
00:02:24.350 --> 00:02:27.522
So we'll start with rez.fold.

40
00:02:27.522 --> 00:02:29.150
I'll do just an error if we get one.

41
00:02:29.150 --> 00:02:33.390
Otherwise we get a function out,
all right.

42
00:02:33.390 --> 00:02:37.650
Let's run that function with
some perceived environment.

43
00:02:37.650 --> 00:02:39.181
Myenv, true.

44
00:02:39.181 --> 00:02:41.880
All right, which gives me a task.

45
00:02:41.880 --> 00:02:44.260
[LAUGH] Let's give ourself some room here.

46
00:02:45.680 --> 00:02:49.460
Right, so we've got our function,
I'm sorry, we have to run it, and

47
00:02:49.460 --> 00:02:50.980
then I get a task out of that.

48
00:02:50.980 --> 00:02:56.432
So I can fork that task, I'll
console.error, and then we'll console.log.

49
00:02:59.388 --> 00:03:04.260
Okay, so we have this thing here
that it can map over all I want, and

50
00:03:04.260 --> 00:03:07.404
when I tried to run it and
see what happens.

51
00:03:07.404 --> 00:03:08.470
Do we get a value?

52
00:03:08.470 --> 00:03:09.650
We get three out, terrific.

53
00:03:10.970 --> 00:03:14.760
So that's just working with app.

54
00:03:14.760 --> 00:03:19.220
And the challenges come from when
we start to return eithers or

55
00:03:19.220 --> 00:03:24.270
functions or
tasks within these things if we chain.

56
00:03:24.270 --> 00:03:26.920
So I put three cases in here of chain.

57
00:03:26.920 --> 00:03:31.013
Map is awesome, right, I just do stuff and

58
00:03:31.013 --> 00:03:38.543
I don't have to worry about anything,
it just bottles it right back up for me.

59
00:03:38.543 --> 00:03:40.578
As soon as I start using chain,

60
00:03:40.578 --> 00:03:44.111
I have to figure out what is
my function gonna return.

61
00:03:44.111 --> 00:03:47.949
We're not usually writing this,
right, we're usually saying,

62
00:03:47.949 --> 00:03:50.010
chain do DB thing, right.

63
00:03:50.010 --> 00:03:53.270
That might return a task, for instance.

64
00:03:53.270 --> 00:03:58.050
Now I have to figure out how to get my
task inside a function, inside a task,

65
00:03:58.050 --> 00:04:01.010
either have it either inside that task and
so on.

66
00:04:01.010 --> 00:04:03.920
You're gonna have to manually
put these shapes together.

67
00:04:03.920 --> 00:04:06.390
So part of the reason I'm
showing you this is because

68
00:04:06.390 --> 00:04:09.190
I don't love Monad transformers.

69
00:04:09.190 --> 00:04:12.510
Sometimes they're useful and
they're around and it's good to know, and

70
00:04:12.510 --> 00:04:14.880
if you keep them shallow
they can be helpful,

71
00:04:14.880 --> 00:04:19.210
as we saw with the other example,
but it's not my favorite technique.

72
00:04:19.210 --> 00:04:21.080
So let's just walk
through the first thing.

73
00:04:21.080 --> 00:04:27.330
So this function returns a task either of
two two, and we have to lift into our app.

74
00:04:28.910 --> 00:04:34.360
This next function returns an either,
which then I have to put inside

75
00:04:34.360 --> 00:04:39.300
a task either, I have to lift it into
that, and then lift that into app, right.

76
00:04:39.300 --> 00:04:44.160
So the idea is that my shape
I'm trying to get out is an app

77
00:04:44.160 --> 00:04:46.710
holding a task holding an either.

78
00:04:46.710 --> 00:04:51.312
And since this function returns an either,
I'll lift it into the task either and

79
00:04:51.312 --> 00:04:52.607
lift that into an app.

80
00:04:52.607 --> 00:04:57.008
Next we go into this thing here, and

81
00:04:57.008 --> 00:05:02.160
I'm returning a task, whoops, a task.

82
00:05:02.160 --> 00:05:06.120
And now I have to map over that task and
put it in an either, so I get a task

83
00:05:06.120 --> 00:05:10.640
holding an either of four, and
then I lift that into the app, and so on.

84
00:05:10.640 --> 00:05:12.830
There's different approaches, right,

85
00:05:12.830 --> 00:05:17.360
we can map to get inside the type to put
another type inside it, and so on, etc.

86
00:05:17.360 --> 00:05:21.610
But this is where things
get really tricky.

87
00:05:21.610 --> 00:05:27.070
And we just, it's best to stay shallow
in my opinion without tons of type help.

88
00:05:27.070 --> 00:05:29.070
There's also a thing called liftIO.

89
00:05:29.070 --> 00:05:32.520
I'm not gonna even go into it, but
that can kind of mechanically push you all

90
00:05:32.520 --> 00:05:35.680
the way to the bottom of the stack,
but we're not gonna deal with that.

