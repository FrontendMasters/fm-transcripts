WEBVTT

1
00:00:00.070 --> 00:00:05.250
So this is the beginning of a pretty,
pretty strong validation library that we

2
00:00:05.250 --> 00:00:08.800
can make better, and
we're using fail and success.

3
00:00:08.800 --> 00:00:12.907
I want to do one last thing to this
library, just to make it a little cooler.

4
00:00:12.907 --> 00:00:19.895
Is we wanna say,
instead of just concatenating the results.

5
00:00:19.895 --> 00:00:26.170
We could actually concat
the entire validation itself.

6
00:00:27.185 --> 00:00:31.073
Now, I can make a couple decisions here.

7
00:00:31.073 --> 00:00:34.530
I can put a validation around this.

8
00:00:35.740 --> 00:00:38.140
So I have to have something to combine,
right?

9
00:00:39.150 --> 00:00:42.574
So instead of just having a function,
I have a validation holding the function.

10
00:00:42.574 --> 00:00:45.159
And now I can combine these things.

11
00:00:46.160 --> 00:00:48.050
So that's one decision I can make.

12
00:00:48.050 --> 00:00:49.730
Another one could be,

13
00:00:49.730 --> 00:00:55.220
I can demand that this function
return me a success or a failure.

14
00:00:55.220 --> 00:00:59.513
So I can say well, all right, let's do,
if it's actually there, we'll keep you,

15
00:00:59.513 --> 00:01:01.392
otherwise, we'll see you a failure.

16
00:01:01.392 --> 00:01:05.767
And now I can actually embed a message
instead of just key is bad, right?

17
00:01:05.767 --> 00:01:10.128
And I can do a message saying,

18
00:01:10.128 --> 00:01:14.500
needs to be present, right?

19
00:01:16.230 --> 00:01:21.080
So that's nice, but then,
we're missing the key here.

20
00:01:21.080 --> 00:01:28.700
So these are things I'm making decisions
right now considering my options.

21
00:01:28.700 --> 00:01:35.800
So, I think what I'm gonna do,
let's say a validation takes in a key and

22
00:01:35.800 --> 00:01:40.876
an x, and we're gonna be able to say,
construct our message saying the key here.

23
00:01:40.876 --> 00:01:47.050
And then,
we can run our validation with the x.

24
00:01:47.050 --> 00:01:52.748
So this is the shape of a validation
that I'm going to define.

25
00:01:52.748 --> 00:01:57.210
And that kinda has some
architectural implications.

26
00:01:57.210 --> 00:01:58.810
Notice also I'm putting this in an array.

27
00:02:00.140 --> 00:02:02.795
Because I just won't fail to
concat whatever it's holding,

28
00:02:02.795 --> 00:02:04.999
I can concat a bunch of strings,
that still works.

29
00:02:04.999 --> 00:02:09.345
But then I would need to have these
spaces in here to make it look nice and

30
00:02:09.345 --> 00:02:12.374
I just rather have an array of results,
so cool.

31
00:02:12.374 --> 00:02:17.197
So we can go make a validation monoid now,
let's go.

32
00:02:17.197 --> 00:02:20.548
So we have two things to do,
we have to do a validation monoid and

33
00:02:20.548 --> 00:02:23.290
we have to update this
little slow part down there.

34
00:02:25.450 --> 00:02:30.749
So, what's happening here is we
could run the validation right here.

35
00:02:30.749 --> 00:02:33.580
But that's no longer a function, right?

36
00:02:33.580 --> 00:02:36.688
It's gonna be a validation function,
validation object.

37
00:02:36.688 --> 00:02:40.299
So we'll give that a run method, run.

38
00:02:40.299 --> 00:02:45.178
And then that will return me a success or
a fail.

39
00:02:45.178 --> 00:02:50.620
So I could actually just get rid of that,
right.

40
00:02:50.620 --> 00:02:54.123
And I told it that I would
give it a key and the value.

41
00:02:54.123 --> 00:02:56.180
So that's pretty nice.

42
00:02:56.180 --> 00:02:59.450
Does everybody see how that works?

43
00:02:59.450 --> 00:03:03.657
I haven't made validation yet, but this is
kind of what I'm sketching out to make,

44
00:03:03.657 --> 00:03:06.518
is that validation will return
me a success or a failure.

45
00:03:06.518 --> 00:03:11.004
And when I run the validation, I'm gonna
combine a bunch of validations by probably

46
00:03:11.004 --> 00:03:13.860
effectively combining
their failures underneath.

47
00:03:15.780 --> 00:03:21.420
And this gives me the ability to combine.

48
00:03:21.420 --> 00:03:25.950
This is present now with
a maybe concat isEmail.

49
00:03:27.870 --> 00:03:31.309
So let's go ahead and
get through writing this.

50
00:03:31.309 --> 00:03:36.225
So make a little easy mail validation
to go along with isPresent, and

51
00:03:36.225 --> 00:03:40.124
let's do the exact same
thing like isEmail, whoops,

52
00:03:40.124 --> 00:03:44.045
isEmail will be a validation,
we'll just say like x.

53
00:03:44.045 --> 00:03:49.816
About at testX, there we go [LAUGH].

54
00:03:49.816 --> 00:03:56.429
So if it has an add sign,
we'll believe it's an email,

55
00:03:56.429 --> 00:04:00.670
otherwise must be an email, cool.

56
00:04:00.670 --> 00:04:04.113
And let's go ahead and
write validation, so

57
00:04:04.113 --> 00:04:07.470
we'll do that up here, const validation.

58
00:04:07.470 --> 00:04:08.226
That takes an F.

59
00:04:08.226 --> 00:04:14.130
We'll just call that run, so
we can do punting, we'll say run.

60
00:04:14.130 --> 00:04:18.977
Right, and if I was gonna combine
two validations, we'll say well,

61
00:04:18.977 --> 00:04:22.033
were always gonna return a new validation.

62
00:04:22.033 --> 00:04:28.710
That validation takes a key,
and an x, and we'll run.

63
00:04:28.710 --> 00:04:34.020
Let's see, we'll run our
validation on the key and the x.

64
00:04:34.020 --> 00:04:39.970
And we'll concat the result which is
going to be a fail or a success with

65
00:04:41.180 --> 00:04:47.250
the result of running the others, or
the other validation on the key in the x.

66
00:04:49.200 --> 00:04:50.165
How cool is that?

67
00:04:50.165 --> 00:04:52.748
[LAUGH] so
what we're doing here is saying,

68
00:04:52.748 --> 00:04:57.631
we have this validation that we can
combine altogether with other validations,

69
00:04:57.631 --> 00:05:00.528
and when we run it,
it's gonna run all of them.

70
00:05:00.528 --> 00:05:04.897
And it's gonna combine all the results and
they're gonna combine their results and

71
00:05:04.897 --> 00:05:06.137
[INAUDIBLE] so on, etc.

72
00:05:06.137 --> 00:05:09.437
Let's see if this works,
I'm sure I'm gonna hit a bug.

73
00:05:09.437 --> 00:05:11.926
&gt;&gt; [INAUDIBLE] key in your fail cases.

74
00:05:11.926 --> 00:05:14.861
&gt;&gt; Thank you, where is that?

75
00:05:14.861 --> 00:05:17.134
&gt;&gt; IsEmail,
&gt;&gt; IsEmail got the key,

76
00:05:17.134 --> 00:05:20.320
it's even telling me,
it say you're not using key.

77
00:05:20.320 --> 00:05:24.140
All right, cool, and it's probably
the same in success, yeah, thank you.

78
00:05:25.540 --> 00:05:27.419
Appreciate the second pair of Is.

79
00:05:27.419 --> 00:05:29.217
So let's see if this works.

80
00:05:29.217 --> 00:05:32.340
I don't wanna spend too much time on it,
all right?

81
00:05:32.340 --> 00:05:34.530
So it got through that.
Let's get rid of the email.

82
00:05:34.530 --> 00:05:36.490
See if it gets through that.

83
00:05:36.490 --> 00:05:38.069
Email must be an email, that's for sure.

84
00:05:38.069 --> 00:05:40.200
What if I take this out?

85
00:05:41.380 --> 00:05:45.500
Name needs to be present, email must
be email, and this is pretty cool.

86
00:05:45.500 --> 00:05:47.967
If I do Brian and
I get rid of this altogether.

87
00:05:47.967 --> 00:05:51.930
The email needs to be present and
must be an email so it's working.

88
00:05:51.930 --> 00:05:56.299
It's working well.
Let's just quickly look over this code for

89
00:05:56.299 --> 00:06:00.080
a minute, and see what we've done.

90
00:06:00.080 --> 00:06:01.179
We can actually keep going.

91
00:06:01.179 --> 00:06:03.958
[LAUGH] More and more intense, right?

92
00:06:03.958 --> 00:06:08.622
Like what if,
one thing that would be fun is to define

93
00:06:08.622 --> 00:06:13.040
a validation that is,
if I'm gonna combine it.

94
00:06:13.040 --> 00:06:18.680
What if I do or [LAUGH] Or
this or that, right?

95
00:06:20.770 --> 00:06:24.808
Or alternatively I could say, instead
of just combining them I could say or

96
00:06:24.808 --> 00:06:28.077
right there, but
that wouldn't be working with monoids and

97
00:06:28.077 --> 00:06:31.237
these abstract interfaces that
know how to concat stuff.

98
00:06:31.237 --> 00:06:37.440
So we can keep building this up and
it turns out and an order form this nice.

99
00:06:37.440 --> 00:06:40.950
It will be called semi ring
where they interact and

100
00:06:40.950 --> 00:06:46.400
distribute over each other and create
a really, really nice way to say like.

101
00:06:46.400 --> 00:06:50.620
I'm gonna combine all these validations in
a way that's, a mixture of ANDs and ORs.

102
00:06:50.620 --> 00:06:53.980
So I can say, well, if you do give me an
email to make sure it looks like an email,

103
00:06:53.980 --> 00:06:56.650
but you don't have to,
right, that kind of stuff.

104
00:06:56.650 --> 00:06:59.680
And that can get really efficient as well.

105
00:06:59.680 --> 00:07:05.113
So, cool, any questions on validations
before we kind of button this up,

106
00:07:05.113 --> 00:07:09.515
we're actually going to use this later so
let's go ahead and

107
00:07:09.515 --> 00:07:11.866
just export, validate [LAUGH].

108
00:07:11.866 --> 00:07:16.156
Whoops, export, validate and actually I
think I have to do module export sequels

109
00:07:16.156 --> 00:07:18.970
because we're not gonna be
using packages and such.

