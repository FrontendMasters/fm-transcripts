WEBVTT

1
00:00:00.000 --> 00:00:01.680
Let's go through these examples.

2
00:00:01.680 --> 00:00:04.310
We'll circle back, it turns out,
it's right here on the screen.

3
00:00:04.310 --> 00:00:05.830
This is the proper endo.

4
00:00:05.830 --> 00:00:08.020
I got a little confused before.

5
00:00:08.020 --> 00:00:12.180
The reason was, if,
we'll circle back afterwards, but

6
00:00:12.180 --> 00:00:15.310
I'll show you why I got confused and
why this works.

7
00:00:15.310 --> 00:00:20.250
So let's go down to our first exercise,

8
00:00:20.250 --> 00:00:25.830
we're gonna turn normal HTML
into the JSX style HTML.

9
00:00:25.830 --> 00:00:27.100
We're gonna cheat on this one.

10
00:00:27.100 --> 00:00:30.970
It's not actually gonna work right but
it's just for example purposes here.

11
00:00:30.970 --> 00:00:37.250
So, we have endo, we have a bunch of
functions from string to string, terrific.

12
00:00:37.250 --> 00:00:40.110
We can rewrite this using endo.

13
00:00:40.110 --> 00:00:44.223
Did anybody have any questions or
snags on this one before I dive in,

14
00:00:44.223 --> 00:00:46.110
I could address while we do it.

15
00:00:47.558 --> 00:00:48.952
All good?
All right, so,

16
00:00:48.952 --> 00:00:54.100
well the first thing we do is
just put these in endos, right?

17
00:00:54.100 --> 00:00:57.427
I can say endo of HTML for,

18
00:00:57.427 --> 00:01:03.175
we'll concat that with
the endo of this one,

19
00:01:03.175 --> 00:01:10.459
and we'll concat that at
the endo of this one, and so on.

20
00:01:10.459 --> 00:01:12.940
And what's happening here?

21
00:01:12.940 --> 00:01:16.980
This is one way, we'll redo it another
way, but we haven't run it yet.

22
00:01:16.980 --> 00:01:20.840
So we have to run it on the HTML and
see if that passes.

23
00:01:20.840 --> 00:01:22.250
It does, terrific.

24
00:01:22.250 --> 00:01:27.020
So it's just capturing function
composition via monoids.

25
00:01:27.020 --> 00:01:30.600
Since the functions always return the same
inputs type and same output type,

26
00:01:30.600 --> 00:01:35.680
we can effortlessly compose the types,
never had a type error.

27
00:01:35.680 --> 00:01:41.212
So we also alternatively say, if we're
gonna throw this on a list, right?

28
00:01:41.212 --> 00:01:44.460
List of, bam.

29
00:01:44.460 --> 00:01:49.510
And also it kind of doesn't
really matter on the full map is.

30
00:01:49.510 --> 00:01:54.564
Kinda ahead of myself sort of,
for map endo,

31
00:01:54.564 --> 00:02:02.145
and we'll give it the endo.empty and
finally run it with the HTML.

32
00:02:04.816 --> 00:02:06.736
How's that?

33
00:02:06.736 --> 00:02:08.760
Didn't work, list is not defined.

34
00:02:08.760 --> 00:02:10.170
Did I prompt, didn't bring in list.

35
00:02:10.170 --> 00:02:10.970
Okay, that's fine.

36
00:02:10.970 --> 00:02:12.830
[LAUGH] We could do it a different way,

37
00:02:12.830 --> 00:02:15.310
we can just throw it in an array and
reduce it.

38
00:02:15.310 --> 00:02:21.080
If we don't have full map at our disposal,
we could just do a reduce, all right?

39
00:02:21.080 --> 00:02:22.580
An acc and an x.

40
00:02:22.580 --> 00:02:28.645
We'll put the x in the endo and
there's a something

41
00:02:28.645 --> 00:02:34.350
reminds us that like a bloodhound
gang line, put the x in the endo.

42
00:02:34.350 --> 00:02:37.975
[LAUGH] l concat that.

43
00:02:37.975 --> 00:02:39.935
So what's happening here?

44
00:02:39.935 --> 00:02:42.555
&gt;&gt; You've given extra parentheses.

45
00:02:42.555 --> 00:02:43.182
&gt;&gt; Yes.

46
00:02:43.182 --> 00:02:44.585
&gt;&gt; Opening one.

47
00:02:44.585 --> 00:02:45.735
&gt;&gt; There it is.

48
00:02:45.735 --> 00:02:47.940
Bam, all right.

49
00:02:47.940 --> 00:02:49.810
And there we go, passes.

50
00:02:49.810 --> 00:02:52.480
So, again,
this is all fold map took away, right?

51
00:02:52.480 --> 00:02:53.270
It's like a one line.

52
00:02:53.270 --> 00:02:54.940
I didn't have to import a library for
that.

53
00:02:54.940 --> 00:02:57.530
I just do because really need
to promote my libraries.

54
00:02:57.530 --> 00:02:58.760
Yeah, I'm just getting it.

55
00:02:58.760 --> 00:03:02.380
It's just what you're gonna see
in other languages all the time.

56
00:03:02.380 --> 00:03:03.370
So I wanted to mimic that.

57
00:03:03.370 --> 00:03:05.140
That's it's really not about the library.

58
00:03:05.140 --> 00:03:11.060
It's about common Interfaces,
so cool, done.

59
00:03:11.060 --> 00:03:13.405
And it turned this thing into this thing.

60
00:03:13.405 --> 00:03:16.870
[LAUGH] And if you notice the order
doesn't really matter, does it?

61
00:03:16.870 --> 00:03:23.420
And that's kind of part of the contract
you're kinda signing up for a little bit.

62
00:03:23.420 --> 00:03:29.884
It is composing them, but it's,
since it's always the same type,

63
00:03:29.884 --> 00:03:34.015
I mean the order tends to not matter,
okay.

64
00:03:34.015 --> 00:03:36.040
Let's go into predicates.

65
00:03:36.040 --> 00:03:39.463
Now, so this,
we're gonna get into some cool stuff here.

66
00:03:39.463 --> 00:03:45.297
We're gonna contra map as we left
off in the last example of reducers.

67
00:03:45.297 --> 00:03:50.014
So let's go ahead and write predicate,
we'll take in a function,

68
00:03:50.014 --> 00:03:53.260
predicate function,
tend to call these run.

69
00:03:55.730 --> 00:04:00.160
And follow the same kind of pattern
we've been doing for expose run.

70
00:04:01.740 --> 00:04:05.830
And what we'll do here is just say,
contra map.

71
00:04:05.830 --> 00:04:10.760
Since predicate is a, it takes a function
that returns a Boolean, right?

72
00:04:10.760 --> 00:04:11.890
So I cannot map it.

73
00:04:11.890 --> 00:04:13.880
I can't turn the Boolean
into another thing.

74
00:04:13.880 --> 00:04:15.430
It wouldn't be a predicate
function anymore.

75
00:04:15.430 --> 00:04:18.596
That would just ruin the whole
idea of modeling predicates.

76
00:04:18.596 --> 00:04:24.460
So what I'm gonna do is I'm gonna contra
map, and give myself an opportunity,

77
00:04:24.460 --> 00:04:30.440
a little hook beforehand
to hit our value coming in,

78
00:04:30.440 --> 00:04:36.590
x with the f, before it actually runs.

79
00:04:38.120 --> 00:04:40.090
So let's see what's happening here.

80
00:04:44.913 --> 00:04:49.700
So we have a contra map,
and we need to concat too.

81
00:04:49.700 --> 00:04:50.520
That's fine.

82
00:04:50.520 --> 00:04:52.740
How do we concat two predicates?

83
00:04:53.980 --> 00:04:56.550
Concat, we take another one.

84
00:04:57.560 --> 00:05:01.052
And, so we have a predicate here.

85
00:05:01.052 --> 00:05:06.170
And we could, sorry,
this is contra map, forgot to run.

86
00:05:06.170 --> 00:05:08.240
So something's wrong here.

87
00:05:08.240 --> 00:05:10.550
I will run the value of that.

88
00:05:10.550 --> 00:05:11.940
Okay, cool.

89
00:05:11.940 --> 00:05:13.310
Do you see how I missed that.

90
00:05:13.310 --> 00:05:14.870
We're gonna hit the f on the x and

91
00:05:14.870 --> 00:05:18.140
transform the value before
we actually run it.

92
00:05:18.140 --> 00:05:21.340
All right, in concat here,
what we're gonna do here is say,

93
00:05:21.340 --> 00:05:26.600
well, if I run this, so it'll give me
a Boolean and we have another one, right?

94
00:05:26.600 --> 00:05:30.930
I don't know why that's passing
[LAUGH] that's probably not good, but

95
00:05:30.930 --> 00:05:33.930
let me do this anyway.

96
00:05:33.930 --> 00:05:37.879
We're gonna say we have some
other one with a run function and

97
00:05:37.879 --> 00:05:40.720
we can just concat that other run.

98
00:05:40.720 --> 00:05:43.720
And I think we have to
decide right now whether or

99
00:05:43.720 --> 00:05:49.540
not we wanna return any or all within
our predicate functions are free.

100
00:05:49.540 --> 00:05:51.190
We just wanna fix one.

101
00:05:51.190 --> 00:05:52.641
Why don't we just say and.

102
00:05:55.480 --> 00:05:58.480
This, did people see how that works?

103
00:05:58.480 --> 00:06:02.250
Basically, if I run my predicate function
is gonna return a true or false.

104
00:06:02.250 --> 00:06:04.266
If I run the other one,
it's gonna return a true or false.

105
00:06:04.266 --> 00:06:08.630
And now I have a predicate function that
tells me they're both true or both false.

106
00:06:08.630 --> 00:06:10.045
I could decide to make it an or.

107
00:06:11.470 --> 00:06:15.860
Or I can actually say no,
it returns me another monoid inside.

108
00:06:15.860 --> 00:06:21.160
And now I concat those two but
we didn't really set this up to do that.

109
00:06:21.160 --> 00:06:24.970
So let's just fix it to and it passes.

110
00:06:24.970 --> 00:06:29.030
It was a little worrying
that it passed this way.

111
00:06:29.030 --> 00:06:32.685
So I probably just wrote a bad example,
but this is what it should look like.

112
00:06:32.685 --> 00:06:35.660
[LAUGH] But yeah,
if you look at the example here,

113
00:06:35.660 --> 00:06:38.700
we're grabbing the length
of x before it gets here.

114
00:06:38.700 --> 00:06:43.980
And then we're asking,
if it starts with s.

115
00:06:43.980 --> 00:06:49.990
So we're transforming each of these into,
all right, looks like,

116
00:06:49.990 --> 00:06:55.270
is that we're asking about the entire
arrays length not each one's length.

117
00:06:55.270 --> 00:06:56.640
Is that why it was wrong?

118
00:06:56.640 --> 00:07:00.140
Well, in any case,
that's predicate looks great.

119
00:07:00.140 --> 00:07:03.300
We can dig in further
into why that passed.

120
00:07:04.430 --> 00:07:04.980
Yeah.

121
00:07:04.980 --> 00:07:09.945
&gt;&gt; Could you just give like the high level
definition of contra map again with the-

122
00:07:09.945 --> 00:07:12.180
&gt;&gt; Yeah, so here's the idea,

123
00:07:12.180 --> 00:07:14.820
is that like, I have this predicate right?

124
00:07:14.820 --> 00:07:16.500
Here, look at this one, right?

125
00:07:16.500 --> 00:07:21.640
I've got this predicate that says,

126
00:07:21.640 --> 00:07:24.640
let's call it greater than four.

127
00:07:26.350 --> 00:07:31.960
And this predicate function
takes a number, right.

128
00:07:31.960 --> 00:07:36.577
And I have this other predicate function

129
00:07:36.577 --> 00:07:40.799
that takes a string, const sStart.

130
00:07:40.799 --> 00:07:43.705
[LAUGH] So it starts with s, okay cool.

131
00:07:43.705 --> 00:07:45.550
So I have two predicate functions.

132
00:07:45.550 --> 00:07:47.490
This one takes a string,
this one takes a number.

133
00:07:48.800 --> 00:07:52.160
And what I wanted to do is
run through my results and

134
00:07:52.160 --> 00:07:57.810
filter all these strings that
satisfy both predicates.

135
00:07:57.810 --> 00:08:01.690
But I don't want to pass a string to
the thing that takes a number, right?

136
00:08:01.690 --> 00:08:09.470
So what I can do is contra map that it,
we transform it into its length.

137
00:08:09.470 --> 00:08:11.490
But I don't want to do
that in the definition.

138
00:08:11.490 --> 00:08:16.410
I can do that at the calling function
when I'm combining the two to say like,

139
00:08:16.410 --> 00:08:16.980
you know what?

140
00:08:16.980 --> 00:08:20.210
I have a hook to be able to

141
00:08:21.580 --> 00:08:27.460
actually change this function and
still pass it into the same filter.

142
00:08:27.460 --> 00:08:32.260
And then that gives me the ability to
write one filter that just kind of

143
00:08:32.260 --> 00:08:36.200
combines all these predicates and
transforms them before they get there.

144
00:08:36.200 --> 00:08:38.390
So that's the specific case, but

145
00:08:38.390 --> 00:08:42.380
the general case is that typically when
you're combining these functions into one,

146
00:08:42.380 --> 00:08:45.705
they might take different arguments and
it gives you a hook to kind of change it.

147
00:08:45.705 --> 00:08:47.090
And this is the use case, right?

148
00:08:47.090 --> 00:08:50.750
Like this is predefined in a library and
I want to use that there.

149
00:08:50.750 --> 00:08:52.345
Did that answer the question or
are you still have some-

150
00:08:52.345 --> 00:08:53.811
&gt;&gt; No no, that's that's pretty clear.

151
00:08:53.811 --> 00:08:55.265
&gt;&gt; Cool.

152
00:08:55.265 --> 00:08:59.537
Just if, we just so we're aware it's
called a contravariant functor if you

153
00:08:59.537 --> 00:09:02.910
have contra map,
contravariant, contra map.

154
00:09:02.910 --> 00:09:06.280
If we have contra map and map,
it's called a profunctor.

155
00:09:06.280 --> 00:09:07.860
You can change the input and the output.

156
00:09:07.860 --> 00:09:10.020
It's kind of like
a little connector thing.

157
00:09:10.020 --> 00:09:16.090
And so profunctors define both,
contravariant functors does one and

158
00:09:16.090 --> 00:09:22.872
just functors or the other just map
We have this little fun graphic.

159
00:09:22.872 --> 00:09:26.108
[LAUGH] If anybody wants to spend a night,

160
00:09:26.108 --> 00:09:30.024
pour yourself stiff drink,
read through that.

161
00:09:30.024 --> 00:09:32.600
But that's there.

162
00:09:32.600 --> 00:09:37.010
It's in the fantasy land figures
if you want to take a look there.

163
00:09:37.010 --> 00:09:40.750
Okay, back to our our example.

164
00:09:41.770 --> 00:09:45.170
So on exercise three,
which is the last exercise.

165
00:09:45.170 --> 00:09:47.690
What we're gonna do here is say,

166
00:09:47.690 --> 00:09:52.550
rewrite using the matchesAny predicate,
so it builds on the previous one.

167
00:09:52.550 --> 00:09:54.320
So if you didn't get the previous one,
this one will be harder.

168
00:09:55.670 --> 00:10:00.290
The idea is that we have matchesAny,
which is just a normal string match and

169
00:10:00.290 --> 00:10:04.070
then we have matching IP,
the predicate version of that.

170
00:10:04.070 --> 00:10:08.740
We just wrapped matchesAny and
put it in a predicate.

171
00:10:08.740 --> 00:10:12.560
So now predicate is a function
which takes, when you call run,

172
00:10:12.560 --> 00:10:13.630
it takes that string.

173
00:10:13.630 --> 00:10:17.230
So you wanna run these with matchesAny IP.

174
00:10:17.230 --> 00:10:22.728
And since we wanna take advantage
of concat and contra map, we can,

175
00:10:22.728 --> 00:10:29.396
kind of give us a hint as to, let's just
give a quick idea of what's happening is.

176
00:10:29.396 --> 00:10:32.377
I'm calling the extension
on the file here, and

177
00:10:32.377 --> 00:10:34.930
I'm calling contents on the file there.

178
00:10:34.930 --> 00:10:39.720
And combine them with and so
let's leave that alone for a second and

179
00:10:39.720 --> 00:10:45.480
just write the same thing
under it with matchesAny IP.

180
00:10:45.480 --> 00:10:54.410
So now that I have that, I can
actually contra map extension, right?

181
00:10:54.410 --> 00:11:00.270
And then I can concat instead of
calling and, with another predicate and

182
00:11:00.270 --> 00:11:08.798
this one takes contents so
I can contra map that one x.contents.

183
00:11:08.798 --> 00:11:16.520
So I guess the file, file the contents and
then we have to run it.

184
00:11:16.520 --> 00:11:17.760
Run it with the file.

185
00:11:18.840 --> 00:11:20.190
See if that passes.

186
00:11:20.190 --> 00:11:23.950
It does not,
probably have a argument syntax error.

187
00:11:23.950 --> 00:11:24.450
There we go.

188
00:11:26.660 --> 00:11:30.670
And almost there,
split of undefined on extension.

189
00:11:30.670 --> 00:11:33.680
So let's see what happened there.

190
00:11:33.680 --> 00:11:36.320
Extension takes the file,
what does extension look like?.

191
00:11:36.320 --> 00:11:39.160
File.name.split, all right.

192
00:11:39.160 --> 00:11:40.990
Each file has a name.

193
00:11:40.990 --> 00:11:42.190
Anybody see any issues?

194
00:11:43.540 --> 00:11:47.050
We're contra mapping the extension
concacting it with this one.

195
00:11:47.050 --> 00:11:51.790
So here I closed the concat and
I'm conra mapping the contents.

196
00:11:51.790 --> 00:11:57.130
If I move this on the outside,
now it should work.

197
00:11:57.130 --> 00:12:00.300
So let's take a look, allow me, just kind
of break this down a little bit to that.

198
00:12:01.780 --> 00:12:05.820
So, are we seeing we
have this function and

199
00:12:05.820 --> 00:12:09.290
then concatenate it with that function,
and then we're running it.

200
00:12:09.290 --> 00:12:12.310
I made a mistake where I can
concated it with that and

201
00:12:12.310 --> 00:12:14.390
then contra map the whole thing.

202
00:12:14.390 --> 00:12:18.470
Because every time I concat two things,
I get a new thing back, right?

203
00:12:18.470 --> 00:12:24.250
This actually has big,
big implications for architecture.

204
00:12:24.250 --> 00:12:28.644
Which is that if you look at
a normal app that's normal,

205
00:12:28.644 --> 00:12:33.414
a typical everyday JavaScript
application or Ruby or Java or

206
00:12:33.414 --> 00:12:39.508
whatever you want to look at, its gonna
have a lot of types and a lot of values.

207
00:12:39.508 --> 00:12:43.205
And you end up with adapters and
type transformations and

208
00:12:43.205 --> 00:12:47.440
a lot of stuff that you have to do
to kind of plug things together.

209
00:12:47.440 --> 00:12:51.950
And yet a lot of pieces they just kind of,
it's this additive flow where you keep

210
00:12:51.950 --> 00:12:55.970
adding new pieces to the system and
then you kind of have to deal with them.

211
00:12:55.970 --> 00:13:00.920
With monoid, you have one piece and
you just combine them into the same piece.

212
00:13:00.920 --> 00:13:05.918
And so you don't need adapters, you just
keep combining and you get one thing back

213
00:13:05.918 --> 00:13:11.350
instead of this composite thing or new
types that kind of latch things together.

214
00:13:11.350 --> 00:13:16.510
So, by normalizing our types into
predicates and saying we're gonna get,

215
00:13:16.510 --> 00:13:19.700
provide a bunch of compasable
predicates and then combine them.

216
00:13:19.700 --> 00:13:22.440
You're not introducing any
new concepts in your system,

217
00:13:22.440 --> 00:13:25.720
you're just continually smashing
it back into one thing.

218
00:13:25.720 --> 00:13:31.630
Okay, yeah, let's take a look
back at my little issue here.

219
00:13:31.630 --> 00:13:36.430
We're just trying to do, let's say,
I wanna provide endo with an empty string.

220
00:13:36.430 --> 00:13:38.840
I was very like, stuck on that, right?

221
00:13:38.840 --> 00:13:41.776
I was like, I,
these are string functions and

222
00:13:41.776 --> 00:13:44.800
I need to do empty endo and
I didn't have empty.

223
00:13:44.800 --> 00:13:47.150
So why wouldn't it work
with an empty string?

224
00:13:47.150 --> 00:13:51.597
Well, it turns out that endo
gets its argument later.

225
00:13:51.597 --> 00:13:53.902
Endo was a function
that when you call run,

226
00:13:53.902 --> 00:13:56.950
that's when it gets its argument, right?

227
00:13:56.950 --> 00:14:01.020
And the identity function, since it's
a function from the same type to

228
00:14:01.020 --> 00:14:05.510
the same type, here it is,
again, identity function.

229
00:14:05.510 --> 00:14:06.970
It's coming in handy, right?

230
00:14:06.970 --> 00:14:10.000
And it says, okay, well,
we'll just take what you started with and

231
00:14:10.000 --> 00:14:12.640
make, effectively make
that the empty value.

232
00:14:13.660 --> 00:14:14.860
So it comes later.

233
00:14:14.860 --> 00:14:16.830
That's where I got little tripped up.

234
00:14:16.830 --> 00:14:19.070
So there, so endo empty is totally fine.

235
00:14:19.070 --> 00:14:21.940
It's holding a function
not an empty string.

236
00:14:21.940 --> 00:14:26.880
So, and then if we look at all this,
it works out just fine if I run

237
00:14:26.880 --> 00:14:32.360
node function modeling zero,
we get this our Hello thing.

238
00:14:32.360 --> 00:14:35.713
I'm gonna talk about this in a second but
yeah, totally works.

