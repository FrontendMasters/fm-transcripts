WEBVTT

1
00:00:00.280 --> 00:00:05.550
Let's just quickly look at what it
looks like to concat a couple of

2
00:00:05.550 --> 00:00:06.310
functors together.

3
00:00:06.310 --> 00:00:12.551
So if I have a write of Hello,
concat it with array of world.

4
00:00:13.810 --> 00:00:16.682
I shall have rows that
fold log console.log.

5
00:00:16.682 --> 00:00:22.043
I should have a write of or
I will just get

6
00:00:22.043 --> 00:00:27.740
hello world because I'm folding it out.

7
00:00:28.770 --> 00:00:35.096
But what it is is actually
a write of Hello world.

8
00:00:35.096 --> 00:00:38.133
Does everybody see that?

9
00:00:38.133 --> 00:00:45.860
What if I have a left of
ahhhrgghghhhh [LAUGH].

10
00:00:45.860 --> 00:00:50.390
Does anybody have a guess of what's gonna
happen here given either's behaviour?

11
00:00:50.390 --> 00:00:51.560
&gt;&gt; Just to get a left.

12
00:00:51.560 --> 00:00:52.660
&gt;&gt; That's right.

13
00:00:52.660 --> 00:00:54.500
It will short circuit everything.

14
00:00:54.500 --> 00:00:57.490
If you hit a left anywhere in
this giant associative concat,

15
00:00:57.490 --> 00:01:01.550
if we're gonna fold a giant list of
left's or rights a bunch of ethers.

16
00:01:01.550 --> 00:01:02.870
If you hit a left,

17
00:01:02.870 --> 00:01:06.130
it's just going to return that as an error
like, we got an error we better tell you.

18
00:01:06.130 --> 00:01:07.238
So let's see that.

19
00:01:07.238 --> 00:01:11.030
I got our.

20
00:01:11.030 --> 00:01:12.640
So that's pretty neat.

21
00:01:12.640 --> 00:01:17.360
We can do this with task,
right, task of Hello

22
00:01:17.360 --> 00:01:22.910
cat task of, cruel world.

23
00:01:22.910 --> 00:01:26.020
And then we can forge that.

24
00:01:27.850 --> 00:01:33.940
And then we'll still get in parallel in,
we're saying we have two tasks.

25
00:01:33.940 --> 00:01:35.790
They're both running,
they're both gonna finish.

26
00:01:35.790 --> 00:01:38.930
They're both doing a sync things and
when you're done, concat the results.

27
00:01:39.980 --> 00:01:44.130
What if we put that in an array
instead of concating the string.

28
00:01:44.130 --> 00:01:47.130
You can concat the array inside the task,
right?

29
00:01:48.270 --> 00:01:49.760
So that gives us different behavior.

30
00:01:51.190 --> 00:01:55.930
But it's still concating and so then
we can, we have a right of an array and

31
00:01:55.930 --> 00:01:57.890
we have a left or whatever.

32
00:01:57.890 --> 00:02:00.580
If we have a rejected task.

33
00:02:00.580 --> 00:02:03.650
Rejected, it acts like left.

34
00:02:03.650 --> 00:02:08.698
So if any of the tasks fail, oops,
these aren't the same data type and

35
00:02:08.698 --> 00:02:13.576
that's fine because this is a different
output should just give you

36
00:02:13.576 --> 00:02:17.104
the error on the task if
you have a rejected task.

37
00:02:17.104 --> 00:02:19.867
So that way if you're out there
running a bunch of a sync stuff and

38
00:02:19.867 --> 00:02:23.140
one of them fails,
you'll get that back as the the answer.

39
00:02:23.140 --> 00:02:25.940
It won't concat, so very much like
right or left behavior there.

40
00:02:27.140 --> 00:02:32.470
There's more but I want to stop here for
any questions on what we're doing.

41
00:02:32.470 --> 00:02:32.970
[LAUGH] yeah.

42
00:02:34.000 --> 00:02:39.618
&gt;&gt; Is this the same behavior promise.all,
where we have a single

43
00:02:39.618 --> 00:02:45.648
failure in the chain and
the result is just, it's discarded.

44
00:02:45.648 --> 00:02:46.536
&gt;&gt; That's right,

45
00:02:46.536 --> 00:02:51.290
if we have a single failure now, we'll
talk about what to do here in a second.

46
00:02:51.290 --> 00:02:52.350
I'll do that next.

47
00:02:52.350 --> 00:02:56.260
If we want to be a little
bit more lenient on that.

48
00:02:56.260 --> 00:02:59.565
But, that is exactly and
it's kind of interesting.

49
00:02:59.565 --> 00:03:01.096
If you think about promise.all,

50
00:03:01.096 --> 00:03:04.640
you're saying I have a bunch of
promises that are running in a list.

51
00:03:04.640 --> 00:03:09.470
And really what I want at the end is,
instead of a list of promises,

52
00:03:09.470 --> 00:03:12.900
a promise of a list, and we can think
of that in terms of traversable.

53
00:03:12.900 --> 00:03:17.220
We could say like flip the list on
the outside of the promise or vice versa.

54
00:03:17.220 --> 00:03:18.120
And there we go,

55
00:03:18.120 --> 00:03:22.640
we get a bunch of results in one promise
instead of a list of a bunch of promises.

56
00:03:22.640 --> 00:03:25.950
Here, we're saying,
I want to actually fold all those down.

57
00:03:25.950 --> 00:03:27.670
I wanna take this list of promises and

58
00:03:27.670 --> 00:03:31.990
I wanna combine them all and
it's the same exact effect.

59
00:03:31.990 --> 00:03:35.430
So what's happening here is, but
it's a little bit more powerful, right?

60
00:03:35.430 --> 00:03:36.680
Because we're not just
gonna get a list and

61
00:03:36.680 --> 00:03:39.370
we're gonna concat them
however we see fit.

62
00:03:39.370 --> 00:03:44.180
So you can frame your problem in terms
of monads, almost always, it's like

63
00:03:44.180 --> 00:03:48.780
the closest thing to a silver bullet in
functional programming as you can get.

64
00:03:48.780 --> 00:03:49.770
To quote Chris Penner [LAUGH].

65
00:03:51.230 --> 00:03:57.300
So let's attack that case of,
all right, I'm programming.

66
00:03:57.300 --> 00:03:59.780
I'm gonna combine a bunch of stuff.

67
00:03:59.780 --> 00:04:05.740
And while I'm combining, I would rather,
let's see, we're reading a bunch of files.

68
00:04:05.740 --> 00:04:10.580
And all my files I want to,
if one is missing and

69
00:04:10.580 --> 00:04:13.740
it blows up,
I just want to discard it, right?

70
00:04:13.740 --> 00:04:16.320
So we can say,

71
00:04:16.320 --> 00:04:22.249
we have our try catch here that returns
us the read file sync or whatever.

72
00:04:23.700 --> 00:04:28.110
And this is gonna return us a right or
left.

73
00:04:28.110 --> 00:04:31.393
And I don't want it to just short circuit
it if I'm reading a whole bunch of files

74
00:04:31.393 --> 00:04:33.010
and I'm concting all their contents,

75
00:04:33.010 --> 00:04:34.881
I don't want it to just
stop if I hit an error.

76
00:04:34.881 --> 00:04:37.930
I just want it to be graceful and
just forget about it.

77
00:04:37.930 --> 00:04:42.150
That's graceful but,
[LAUGH] forget about it.

78
00:04:42.150 --> 00:04:44.490
So let's go ahead and do this.

79
00:04:44.490 --> 00:04:49.550
Let's say, well, instead of right
combining with another right or

80
00:04:49.550 --> 00:04:55.010
left, there you go and
give me a left or buy.

81
00:04:56.470 --> 00:04:59.630
I'm gonna, I want to keep the right.

82
00:04:59.630 --> 00:05:01.260
So we can do this a couple different ways.

83
00:05:01.260 --> 00:05:04.680
There's an interface called
alternative the captures choice.

84
00:05:04.680 --> 00:05:06.630
Mono is capture choice, right?

85
00:05:06.630 --> 00:05:10.990
You can say maximum right is a monoid,
where you can keep one or

86
00:05:10.990 --> 00:05:13.930
the other identity being infinity or
negative infinity.

87
00:05:15.570 --> 00:05:19.580
But the idea of the interface of
alternative is that we're gonna choose

88
00:05:19.580 --> 00:05:20.810
this or that one.

89
00:05:20.810 --> 00:05:25.943
But we can do this with semigroups by
saying or monoids by saying, let's just

90
00:05:25.943 --> 00:05:31.690
make, let's just wrap it in another type,
let's call it alternative.

91
00:05:31.690 --> 00:05:33.640
All right, so we have this alternative.

92
00:05:33.640 --> 00:05:39.129
And this is gonna be holding
an either x not just an x, all right.

93
00:05:39.129 --> 00:05:41.868
The jewel is called ex to remind us, and

94
00:05:41.868 --> 00:05:46.970
we'll concat that by saying,
all right, well, let's just cheat.

95
00:05:46.970 --> 00:05:52.600
If it is the left, I know they have
that function on my either class.

96
00:05:52.600 --> 00:05:57.180
We will end up keeping the other one or
I guess us.

97
00:05:57.180 --> 00:05:59.170
Because if we are left and they are left,

98
00:05:59.170 --> 00:06:00.900
it really doesn't matter
which left we keep, right?

99
00:06:00.900 --> 00:06:03.250
We're just gonna keep the first one,
so skip ourselves.

100
00:06:05.070 --> 00:06:08.000
So, are we, can keep, oops, this is other.

101
00:06:09.490 --> 00:06:15.240
So if the other one is left,
let's just keep ourselves otherwise,

102
00:06:15.240 --> 00:06:19.562
we're going to say let's say

103
00:06:19.562 --> 00:06:25.730
ex.concat other.ex, put that all
into inside an alternative, right?

104
00:06:25.730 --> 00:06:29.380
Because we can't ever, it's closed,
we shouldn't ever escape in a concat.

105
00:06:29.380 --> 00:06:30.670
That's the first thing you should do.

106
00:06:30.670 --> 00:06:31.970
Whenever you're ready to concat functions,

107
00:06:31.970 --> 00:06:35.330
make sure you're not falling out of
the type, because that is error,

108
00:06:35.330 --> 00:06:36.670
like what just happened.

109
00:06:36.670 --> 00:06:39.029
So let me see if my logic is correct.

110
00:06:39.029 --> 00:06:42.480
If we've got a left over here,
we're gonna keep it.

111
00:06:42.480 --> 00:06:44.120
It does, we're gonna keep ourselves.

112
00:06:45.530 --> 00:06:49.880
Otherwise, we're going
to concat the insides.

113
00:06:49.880 --> 00:06:55.700
Now we can actually decide whether or
not to concat the insides of the two or

114
00:06:55.700 --> 00:07:01.220
just keep the outer one, right,
we can keep the first success.

115
00:07:01.220 --> 00:07:04.640
So these are choices that
are still satisfy the interface.

116
00:07:06.400 --> 00:07:11.487
But in keeping with the kind of
intuition of these functor monoids,

117
00:07:11.487 --> 00:07:14.800
we're gonna concat the insides of the two.

118
00:07:14.800 --> 00:07:19.360
See if I get this right, I may not have,
if anybody sees any problems shout it out.

119
00:07:22.020 --> 00:07:26.680
We got off the program
it's a anybody's guess.

120
00:07:26.680 --> 00:07:29.566
So get this x out of there and
folde ID, all right.

121
00:07:29.566 --> 00:07:34.870
Add by blue where

122
00:07:34.870 --> 00:07:39.410
we got can't read is
left of the other one.

123
00:07:39.410 --> 00:07:44.859
That's because I don't have
an alternative here, to alternative

124
00:07:46.601 --> 00:07:50.380
All right, so, how's that?

125
00:07:50.380 --> 00:07:52.310
Okay, so it keeps the high, cool.

126
00:07:52.310 --> 00:07:59.160
What if I concat an alternative of
this with concat an alternative?

127
00:08:00.700 --> 00:08:04.500
Another bunch of explanations.

128
00:08:04.500 --> 00:08:08.922
Now concat at that with the by,
hey, did it, right.

129
00:08:08.922 --> 00:08:11.520
And so every,

130
00:08:11.520 --> 00:08:15.710
it just ignores the left here it doesn't,
it doesn't do anything, which is nice.

131
00:08:15.710 --> 00:08:21.810
So if we're taking advantage of these kind
of like this cascading kind of nesting,

132
00:08:21.810 --> 00:08:25.660
where everything concats down, at some
point in the nesting you can say, you know

133
00:08:25.660 --> 00:08:31.230
what, I'm not going to continue to concat
inward and be a nice nested citizen.

134
00:08:31.230 --> 00:08:33.728
I'm going to make a decision here and
choose one or

135
00:08:33.728 --> 00:08:36.058
the other kind of branch
my code effectively.

136
00:08:36.058 --> 00:08:38.482
Or I can do both as we're doing here,

137
00:08:38.482 --> 00:08:42.170
we're only going to concat
the inside if it's a right.

138
00:08:42.170 --> 00:08:46.880
I want to rewrite this as a fold
map real quick and then we'll jump

139
00:08:46.880 --> 00:08:51.270
into some exercises and we'll come back
and build a little validation library.

140
00:08:51.270 --> 00:08:57.090
But, yeah, so I want you to get some
more experience with full map here.

141
00:08:57.090 --> 00:08:59.630
Turns out, this is a lot of code, right?

142
00:08:59.630 --> 00:09:00.400
It's kind of annoying.

143
00:09:01.420 --> 00:09:07.410
So what we could do is, I'm gonna
go ahead and put this into a list.

144
00:09:07.410 --> 00:09:14.610
They have my list don't get from
the first thing and just import it, okay?

145
00:09:14.610 --> 00:09:17.865
So we'll have a list of Hi.

146
00:09:17.865 --> 00:09:22.294
And how would

147
00:09:22.294 --> 00:09:28.330
just a, b,c.

148
00:09:28.330 --> 00:09:35.780
And what we're gonna do is put
those I guess we can't do that.

149
00:09:35.780 --> 00:09:40.437
We have to do a right a, right b,

150
00:09:40.437 --> 00:09:45.454
and a right of c, okay, left of c.

151
00:09:45.454 --> 00:09:51.620
And now we'll just go ahead and
foldMap into alternative and

152
00:09:51.620 --> 00:09:54.780
we can choose just like reduce
to ignore the initial value.

153
00:09:54.780 --> 00:09:58.930
But oftentimes at the calling site,
you know what the initial value is.

154
00:09:58.930 --> 00:10:02.870
So you want to keep it safe and
provide initial value.

155
00:10:02.870 --> 00:10:05.460
So my initial value,

156
00:10:05.460 --> 00:10:10.940
if I have a bunch of strings my
empty element is an empty string.

157
00:10:10.940 --> 00:10:14.936
And either my empty element is a right and
or

158
00:10:14.936 --> 00:10:20.500
I guess my neutral and
then alternative holding that.

159
00:10:20.500 --> 00:10:23.290
So we'll fold map all these
into an alternative and

160
00:10:23.290 --> 00:10:25.270
then hopefully this will work.

161
00:10:26.830 --> 00:10:30.090
And we got a and b,
it concats the insides, hooray.

162
00:10:30.090 --> 00:10:30.700
It works.

163
00:10:30.700 --> 00:10:33.084
If I make this left here,
we'll get a and c.

164
00:10:37.037 --> 00:10:39.740
So you'll end up actually making
your own monoids quite a bit.

165
00:10:39.740 --> 00:10:42.920
But the idea is that you'll
end up making your own monoids

166
00:10:42.920 --> 00:10:47.370
a lot more than you are gonna
make your own fanctors and such.

167
00:10:47.370 --> 00:10:50.240
So there, it's good to know
how to make these things.

168
00:10:50.240 --> 00:10:51.940
And of course you can
make it with a class.

169
00:10:51.940 --> 00:10:54.330
You don't have to make it
in these little functions,

170
00:10:54.330 --> 00:10:56.820
you can make it more efficient or
whatever.

171
00:10:57.840 --> 00:10:59.750
There's a dozen ways to do it.

172
00:10:59.750 --> 00:11:02.380
Okay, so let's go to.

173
00:11:02.380 --> 00:11:07.040
&gt;&gt; Following your pattern you would make
like an MD and that would be a right?

174
00:11:07.040 --> 00:11:12.240
&gt;&gt; That, yeah, you'd create a, if you want
to make a monoid you have to have concat.

175
00:11:12.240 --> 00:11:13.520
And for semigroup,

176
00:11:13.520 --> 00:11:19.040
you just have to define a concat method
empty is like a class method usually,

177
00:11:19.040 --> 00:11:22.990
because why would you have an instance
if it is an instance of that class.

178
00:11:22.990 --> 00:11:26.370
So usually that's why I'm kind of
putting empty on the class itself.

179
00:11:29.530 --> 00:11:33.810
So that way it gives me my
initial value of whatever.

180
00:11:33.810 --> 00:11:35.681
So there we go.

