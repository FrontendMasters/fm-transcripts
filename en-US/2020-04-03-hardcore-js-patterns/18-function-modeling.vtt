WEBVTT

1
00:00:00.012 --> 00:00:02.470
We're gonna talk a little
bit about function modeling.

2
00:00:02.470 --> 00:00:05.350
Let's hop over to functions.

3
00:00:06.720 --> 00:00:09.390
Doo doo doo doo doo doo.

4
00:00:09.390 --> 00:00:11.210
Let's see what to get myself to start.

5
00:00:11.210 --> 00:00:11.830
Thank you, Brian.

6
00:00:11.830 --> 00:00:15.576
That's very nice to
start off with nothing.

7
00:00:15.576 --> 00:00:20.940
Okay, so [LAUGH] so we just did
function modeling with validations.

8
00:00:20.940 --> 00:00:22.630
Did anybody catch that?

9
00:00:22.630 --> 00:00:27.090
We said, I'm going to,
instead of modeling a type of data and

10
00:00:27.090 --> 00:00:30.410
the data inside that type,
I'm gonna model a function.

11
00:00:30.410 --> 00:00:34.720
We're gonna call it run, and
then we're able to combine functions.

12
00:00:35.920 --> 00:00:37.560
So let's talk about
that a little bit more.

13
00:00:37.560 --> 00:00:42.740
Let's give ourself some functions, my
favorite ones, toUpper, actually I should

14
00:00:42.740 --> 00:00:47.865
probably just bring in rammed or
something but it's fine, x to UpperCase.

15
00:00:48.890 --> 00:00:55.083
All right, and other favorite function
exclaimed we'll just do x concat,

16
00:00:55.083 --> 00:00:59.346
[LAUGH]
there we go.

17
00:00:59.346 --> 00:01:03.713
And then let's see what else,
should be fine.

18
00:01:03.713 --> 00:01:09.803
Okay, so what we're trying to do
here is take these functions and

19
00:01:09.803 --> 00:01:16.240
let's say I want to combine them and
compose them in different ways.

20
00:01:16.240 --> 00:01:19.210
I want to model them and
do interesting things with them.

21
00:01:19.210 --> 00:01:21.490
Function doesn't give
you any methods on it.

22
00:01:21.490 --> 00:01:23.490
So what we could do is
actually make function.

23
00:01:24.600 --> 00:01:32.190
And that takes some, which I'm gonna
call run and run we'll expose that.

24
00:01:32.190 --> 00:01:34.320
So we can actually run it.

25
00:01:34.320 --> 00:01:36.580
Let's just start by doing a concat.

26
00:01:36.580 --> 00:01:38.050
Because we've just worked with monoids.

27
00:01:38.050 --> 00:01:39.510
We're just fresh from that.

28
00:01:39.510 --> 00:01:44.540
So if I want to concat two functions,
how would I do that?

29
00:01:44.540 --> 00:01:46.730
Well, I have another function.

30
00:01:46.730 --> 00:01:49.310
And I'll call other.run.

31
00:01:49.310 --> 00:01:51.220
And I know I have my run.

32
00:01:51.220 --> 00:01:55.140
And I have to run the function
to get the value out.

33
00:01:55.140 --> 00:01:58.570
And then I concat the value that
the other one gave me, right?

34
00:01:59.735 --> 00:02:01.861
But it have to be closed,
I have to return new function,

35
00:02:01.861 --> 00:02:04.185
if I'm combining two functions
I have to return a function.

36
00:02:04.185 --> 00:02:06.765
So we'll start there,
we'll start with function.

37
00:02:06.765 --> 00:02:09.615
And hey, look, function takes an argument.

38
00:02:09.615 --> 00:02:10.743
Now all of a sudden have an x,

39
00:02:10.743 --> 00:02:14.845
out of nowhere, we just have an x now,
isn't that neat?

40
00:02:14.845 --> 00:02:16.275
I get that passed in.

41
00:02:16.275 --> 00:02:18.830
So now I can run my other one with x.

42
00:02:18.830 --> 00:02:22.950
Remember my function with x,
and I can concat the results.

43
00:02:24.640 --> 00:02:25.440
That is cool.

44
00:02:25.440 --> 00:02:26.640
Does anybody have any questions on that?

45
00:02:26.640 --> 00:02:29.070
That's exactly what we
just did with validations.

46
00:02:30.540 --> 00:02:34.680
And what's interesting
about this is concating

47
00:02:34.680 --> 00:02:38.670
two functions says I have two boxes.

48
00:02:38.670 --> 00:02:42.135
You can think of functions as a factor,
I think we can formally make it a factor,

49
00:02:42.135 --> 00:02:42.880
let's do that.

50
00:02:44.070 --> 00:02:47.130
Now, let's map f over our function.

51
00:02:47.130 --> 00:02:53.025
So you always keep it back in the box,
get an x, run it on the x, we get a value.

52
00:02:53.025 --> 00:02:54.890
And we run f on that value.

53
00:02:56.270 --> 00:02:58.140
And now we have a factor, right?

54
00:02:58.140 --> 00:03:02.690
Run is gonna return us a value,
function you can think of as a box holding

55
00:03:02.690 --> 00:03:06.200
a value and you have to run it to get
the value and then we run f on it.

56
00:03:07.260 --> 00:03:12.070
So where I was going
with that is is we have

57
00:03:12.070 --> 00:03:17.470
these ways to combine functions,
map is just a composition on a function.

58
00:03:17.470 --> 00:03:20.420
And concat says run both and
then combine the results.

59
00:03:20.420 --> 00:03:24.190
I'm holding this thing and just like
the intuition says from all the other

60
00:03:24.190 --> 00:03:29.960
examples, I'll open up my box and
concat what's inside.

61
00:03:29.960 --> 00:03:34.040
So, the box example kind of breaks down
when we're talking about functions because

62
00:03:34.040 --> 00:03:38.610
you don't really think of functions
as a box but, you can I guess.

63
00:03:38.610 --> 00:03:41.720
So let's do function to upper and

64
00:03:41.720 --> 00:03:46.440
we'll concat that with
its function exclaim.

65
00:03:50.070 --> 00:03:50.930
All right, great.

66
00:03:50.930 --> 00:03:57.507
And then we'll run that with a fp sux.

67
00:03:57.507 --> 00:03:58.679
All right [LAUGH].

68
00:03:58.679 --> 00:04:05.990
All right, no function modelling zero.

69
00:04:05.990 --> 00:04:10.310
Okay, so what happened here?

70
00:04:10.310 --> 00:04:14.290
The first one UpperCase
it returned a string.

71
00:04:14.290 --> 00:04:18.344
And since strings a semigroup or
a monoid, we concat it.

72
00:04:18.344 --> 00:04:23.410
We concatt it with the result
of running the other one.

73
00:04:23.410 --> 00:04:24.480
Interesting.

74
00:04:24.480 --> 00:04:27.730
So we've run two functions and
we've concacted the results.

75
00:04:29.002 --> 00:04:33.290
I could do something where
we put them in an arrays and

76
00:04:33.290 --> 00:04:37.310
we'll get the arrays of the results and
so on.

77
00:04:38.800 --> 00:04:43.590
But this is starting to form the basis
of what we call the reader monad.

78
00:04:43.590 --> 00:04:51.070
We're actually modeling a function itself
and if we map over it, let's do this.

79
00:04:51.070 --> 00:04:56.140
Let's map over the result,
which is this pull number now, right?

80
00:04:56.140 --> 00:05:03.590
And then we'll whatever, take a slice
of the first couple slice, three.

81
00:05:03.590 --> 00:05:04.691
Does that work?

82
00:05:07.394 --> 00:05:09.140
All right, cool.

83
00:05:09.140 --> 00:05:13.220
So we're able to map over the result
of combining these two functions.

84
00:05:14.320 --> 00:05:16.885
And then, we run it on that.

85
00:05:16.885 --> 00:05:18.380
So, what is it?

86
00:05:18.380 --> 00:05:22.160
What does it mean to
make function a monad?

87
00:05:22.160 --> 00:05:24.740
What would that mean?

88
00:05:24.740 --> 00:05:27.310
Monads talk about nesting, right?

89
00:05:27.310 --> 00:05:31.620
So we'd say, I have a function
within a function, right?

90
00:05:33.500 --> 00:05:36.937
Each function takes some argument,
right, and this takes a y.

91
00:05:36.937 --> 00:05:40.670
We have an x and a y here now.

92
00:05:40.670 --> 00:05:44.220
We wanna flatten these
two into one function.

93
00:05:44.220 --> 00:05:45.530
That's what monads do.

94
00:05:46.810 --> 00:05:49.350
So, let's write that.

95
00:05:49.350 --> 00:05:50.380
See what happens here.

96
00:05:50.380 --> 00:05:53.790
So we have chain to chain F.

97
00:05:53.790 --> 00:06:01.980
And what's gonna happen is we need
to return a function on the outside.

98
00:06:01.980 --> 00:06:07.770
And the reason for that is well,
we could just see, if I just decided

99
00:06:07.770 --> 00:06:13.850
to run my function,
I don't even have an x to run it with.

100
00:06:13.850 --> 00:06:14.855
That doesn't work.

101
00:06:14.855 --> 00:06:20.663
[LAUGH] So I have to start by saying okay,
but function it's gonna take an x, right.

102
00:06:20.663 --> 00:06:22.898
And then I'll run my function with the x.

103
00:06:22.898 --> 00:06:27.724
And we are saying okay, just like map,

104
00:06:27.724 --> 00:06:31.900
I want to call f on that, right.

105
00:06:31.900 --> 00:06:35.490
Pass the value of running my
function into the next function.

106
00:06:35.490 --> 00:06:40.440
Maybe it's helpful before we go
any further to see what it means.

107
00:06:40.440 --> 00:06:45.590
So let's say I am going to chain
to upper with another function, so

108
00:06:45.590 --> 00:06:51.470
we get our UpperCase upper, and then I'm
gonna return another function, right?

109
00:06:51.470 --> 00:06:57.210
That does exclaim on, oops,
I spelled it wrong on the upper.

110
00:06:58.240 --> 00:07:01.740
And let's see, this takes a y and

111
00:07:01.740 --> 00:07:04.640
I guess it just doesn't do
anything with it right now.

112
00:07:04.640 --> 00:07:06.300
We'll figure out what
to do with this y but

113
00:07:06.300 --> 00:07:09.330
we have another argument,
that's kind of the point.

114
00:07:09.330 --> 00:07:12.270
We just have this y out of nowhere.

115
00:07:12.270 --> 00:07:16.466
So let's get this to work and then we'll
kind of look at what's happening here.

116
00:07:16.466 --> 00:07:21.360
So high, all right, so

117
00:07:21.360 --> 00:07:25.050
we're in this thing, we ran the function,
we got another function out and

118
00:07:25.050 --> 00:07:29.440
we actually have to run that function now,
right?

119
00:07:29.440 --> 00:07:33.900
With, say the x again and
see what happens there.

120
00:07:35.190 --> 00:07:37.100
So let's go ahead and
play through this one.

121
00:07:37.100 --> 00:07:40.980
See what happens and we get high cool,

