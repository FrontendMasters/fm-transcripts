WEBVTT

1
00:00:00.180 --> 00:00:04.980
Monad transformers are not the prettiest
thing they don't have a well

2
00:00:04.980 --> 00:00:09.708
founded theory and math are just like
a way to get through this problem.

3
00:00:09.708 --> 00:00:14.303
And we're gonna look at free monads
which do have a well founded theory.

4
00:00:14.303 --> 00:00:16.291
But this is one compose,

5
00:00:16.291 --> 00:00:22.360
I just wanted to show that functors
compose, but monads do not.

6
00:00:22.360 --> 00:00:25.952
So let's jump into transformers here.

7
00:00:25.952 --> 00:00:26.629
All right,

8
00:00:26.629 --> 00:00:30.910
let's get into a situation where it
would be useful to have a transformer.

9
00:00:30.910 --> 00:00:35.813
[LAUGH] So let's go ahead and
say, we have an app,

10
00:00:35.813 --> 00:00:39.410
and this app is gonna be super cool.

11
00:00:40.700 --> 00:00:44.440
Very similar to what we were doing before,
we have these nested types

12
00:00:44.440 --> 00:00:47.310
inside other types and we run into
these problems because of that.

13
00:00:47.310 --> 00:00:50.752
So I have a task and an Either
whenever I try to find something,

14
00:00:50.752 --> 00:00:55.750
it's gonna try to find something in
the table given my query is gonna put it

15
00:00:55.750 --> 00:00:59.560
in an either saying I might not have
found it, we're gonna put that in a task.

16
00:00:59.560 --> 00:01:03.870
Because we're trying to model
a database kind of interaction.

17
00:01:03.870 --> 00:01:07.660
So what we'll do here is say I'm going to

18
00:01:07.660 --> 00:01:11.902
find the users where ID is 1,
so that's me.

19
00:01:11.902 --> 00:01:13.570
All right, Mark's over here.

20
00:01:13.570 --> 00:01:19.190
And it looks like I'm following

21
00:01:19.190 --> 00:01:23.280
this person over there, and I'm
following Mark, and Mark's following me.

22
00:01:24.560 --> 00:01:28.720
Cool, so what we're gonna try to do
is all right let's map over this.

23
00:01:28.720 --> 00:01:31.230
What I wanna do is find my follower.

24
00:01:32.320 --> 00:01:36.225
So it's actually a chain because
we're gonna do another find, right?

25
00:01:36.225 --> 00:01:37.660
Give myself some room.

26
00:01:40.810 --> 00:01:43.760
All right, so we get this,
Either user, right?

27
00:01:45.230 --> 00:01:48.146
And with the Either user in
the hardcore functional class,

28
00:01:48.146 --> 00:01:51.299
whatever you're doing was running
natural transformations to

29
00:01:51.299 --> 00:01:55.106
turn the Either into a task so we can kind
of crunch them down each time as we go.

30
00:01:55.106 --> 00:01:57.320
Here we're gonna take
a different approach.

31
00:01:57.320 --> 00:02:02.430
We're gonna make this kind of monstrosity,
this task Either using monad transformers.

32
00:02:02.430 --> 00:02:07.230
But let me demonstrate a little bit
further on why we wanna do this.

33
00:02:07.230 --> 00:02:11.440
So because I have an Either user,
I can't, I don't have a user.

34
00:02:11.440 --> 00:02:14.357
And because I'm calling chain,
I have to return another task, right?

35
00:02:14.357 --> 00:02:16.765
This is a task and Either the user and

36
00:02:16.765 --> 00:02:20.470
if I'm gonna chain that I
have to return another task.

37
00:02:20.470 --> 00:02:25.366
So what I'll do is fold out the Either I
don't even know how to do tasks get

38
00:02:25.366 --> 00:02:27.145
rejected here, I guess.

39
00:02:27.145 --> 00:02:32.202
And then over here, we've got a user,

40
00:02:32.202 --> 00:02:38.791
okay, now we wanna find
from the following table,

41
00:02:38.791 --> 00:02:43.890
where the user_id is my u.id, okay?

42
00:02:43.890 --> 00:02:49.525
All right, so find, actually I think
it is follow_id is my user id,

43
00:02:49.525 --> 00:02:55.450
follow_id, doesn't really matter.

44
00:02:55.450 --> 00:02:59.660
This is just just to demonstrate
I wanna get this correct.

45
00:02:59.660 --> 00:03:01.610
We're gonna find the wrong followers.

46
00:03:01.610 --> 00:03:03.860
All right, so cool.

47
00:03:03.860 --> 00:03:06.660
But now we have another Either user,
right?

48
00:03:06.660 --> 00:03:10.460
It's a pain in the butt,
we keep running into these Either users.

49
00:03:10.460 --> 00:03:12.338
And now we have to fold that.

50
00:03:12.338 --> 00:03:18.120
[LAUGH] All right another rejected here,
and then

51
00:03:18.120 --> 00:03:23.360
now we have our like following.

52
00:03:23.360 --> 00:03:27.910
Let's call it fo for now, and
I wanna find from the users table,

53
00:03:27.910 --> 00:03:33.330
the actual user with ID that comes
from the followings user ID.

54
00:03:33.330 --> 00:03:37.160
Okay, you see what's happening here, I'm
trying to use this link table to find who

55
00:03:37.160 --> 00:03:41.480
are my followers and then go back to
the user table to find that user.

56
00:03:41.480 --> 00:03:45.404
And it's just a disaster I just keep
running into these tasks Either and

57
00:03:45.404 --> 00:03:47.910
they have to keep folding them out.

58
00:03:47.910 --> 00:03:49.866
Let's see what we get as an answer.

59
00:03:49.866 --> 00:03:57.860
So what I'm gonna do is fork that error,
console.log.

60
00:03:57.860 --> 00:04:00.370
And because I ended on a find here.

61
00:04:00.370 --> 00:04:02.910
[LAUGH] Or I can another Either, right?

62
00:04:02.910 --> 00:04:07.060
So you get a Either user again,
once again and

63
00:04:07.060 --> 00:04:14.020
then right here we'll fold out either
user to a console.error, or console.log.

64
00:04:14.020 --> 00:04:14.815
And let's call up.

65
00:04:14.815 --> 00:04:18.190
And we have to fork it wait
we fork it there that's fine.

66
00:04:18.190 --> 00:04:19.790
Just fork it there call it app.

67
00:04:19.790 --> 00:04:24.309
Normally you want to fork outside but

68
00:04:24.309 --> 00:04:29.140
whatever, c lear Transformers/1.

69
00:04:29.140 --> 00:04:35.913
Cool we found Mark so we gave it my ID,
and then we found the follower ID.

70
00:04:35.913 --> 00:04:39.449
And then we found from the users
that user ID from the following and

71
00:04:39.449 --> 00:04:40.810
then we get Mark, cool.

72
00:04:42.070 --> 00:04:45.520
So how do we solve this
with monad transformers?

73
00:04:45.520 --> 00:04:48.244
Does everybody understand the problem,
like how much this sucks.

74
00:04:48.244 --> 00:04:52.676
[LAUGH] All right,
the reason why this sucks.

75
00:04:52.676 --> 00:04:54.380
[LAUGH] So

76
00:04:54.380 --> 00:04:59.140
what we can do is is say, all right, I'm
gonna make a new thing called TaskEither.

77
00:04:59.140 --> 00:05:05.636
So I'll say task transformer and we're
gonna feed it either call that TaskEither.

78
00:05:05.636 --> 00:05:10.720
All right, what that did is task
transformer created a new task much

79
00:05:10.720 --> 00:05:15.620
like compose,
created a new type that knew how to map.

80
00:05:16.650 --> 00:05:18.915
This thing knows how to change chain.

81
00:05:18.915 --> 00:05:22.643
[LAUGH] But it's specific to each monad.

82
00:05:22.643 --> 00:05:29.170
So each monad should have,
there's an EitherT, and an IdT and so on.

83
00:05:29.170 --> 00:05:33.490
So because each monad can only know how to

84
00:05:33.490 --> 00:05:37.940
deal with some its own effects, and then
just call chain on whatever it has inside.

85
00:05:37.940 --> 00:05:41.240
It's like generic to this point,
but it's specific here.

86
00:05:41.240 --> 00:05:46.337
If I wanna recover task interestingly I
can just give an Id now I have tasks back,

87
00:05:46.337 --> 00:05:47.820
just kinda neat.

88
00:05:47.820 --> 00:05:50.294
That's a little bit of a beautiful
property that carries through.

89
00:05:50.294 --> 00:05:52.978
So you can define just the transformer and

90
00:05:52.978 --> 00:05:57.591
recover the original type just by
applying it to the identity functor.

91
00:05:57.591 --> 00:06:02.205
But what we're interested
here is TaskT(Either).

92
00:06:03.740 --> 00:06:05.830
So how do I work with this thing?

93
00:06:05.830 --> 00:06:07.310
Let me show you what problem it solves.

94
00:06:07.310 --> 00:06:12.340
And then we'll kinda dig in play
with the API of transformers here.

95
00:06:12.340 --> 00:06:19.400
So we're gonna say TaskEither, and
here's something that's a problem.

96
00:06:19.400 --> 00:06:21.890
TaskEither will take, if I say of,

97
00:06:21.890 --> 00:06:26.460
of on TaskEither will give me a task
of an either have an x, right?

98
00:06:26.460 --> 00:06:31.123
Task either, and I have an Either here so
that would give me

99
00:06:31.123 --> 00:06:36.850
a TaskEither(Either(x),
they'll see that that's what up does.

100
00:06:36.850 --> 00:06:44.430
It puts a value in both types now and
I'm trying to put a Either they're not.

101
00:06:44.430 --> 00:06:47.322
So what I'm gonna try to do,
what I'm gonna do instead is called lift.

102
00:06:47.322 --> 00:06:51.730
I wanna lift my Either
into the TaskEither, so

103
00:06:51.730 --> 00:06:54.790
it's just like of, but
it won't duplicate that inner type.

104
00:06:56.130 --> 00:06:56.830
Does everybody see that?

105
00:06:56.830 --> 00:07:01.810
So of would have given
me Either(Either (x).

106
00:07:01.810 --> 00:07:07.270
But lift just puts it one level in so

107
00:07:07.270 --> 00:07:11.130
that's something that we're
gonna look at in a minute again.

108
00:07:11.130 --> 00:07:13.110
But that is a thing.

109
00:07:13.110 --> 00:07:20.220
So now, if I run this and
the ghost of life coding

110
00:07:20.220 --> 00:07:25.550
is kind, we will be able to say,
all right, well now I

111
00:07:25.550 --> 00:07:29.880
don't get an Either user because it knows
how to chain correctly over both types.

112
00:07:29.880 --> 00:07:33.060
So I'll just get a user, how nice is that?

113
00:07:33.060 --> 00:07:34.720
Now we could just find stuff, right?

114
00:07:34.720 --> 00:07:40.920
And again, if I chain that,
I just get a another user, right?

115
00:07:40.920 --> 00:07:42.335
Well, I guess this is up, fo.

116
00:07:46.598 --> 00:07:50.064
But yeah, so what's happened here,
is now I had a Task(Either) and

117
00:07:50.064 --> 00:07:53.026
I've changed it so
I still have Task(Either(User)).

118
00:07:53.026 --> 00:07:58.750
And again, I've chained that,
and I get a Task(Either(User)).

119
00:07:58.750 --> 00:08:03.250
And finally, we .fork the task, we still
haven't Either user inside the task,

120
00:08:03.250 --> 00:08:08.370
that's an important distinction is
that task either knows how to chain.

121
00:08:08.370 --> 00:08:10.640
But at the end of the day,
it's still a task holding an either.

122
00:08:10.640 --> 00:08:15.880
So when I fork the task, I get the Either,
it's not just gonna give me the user out.

123
00:08:15.880 --> 00:08:18.030
It just defines chain on that thing.

124
00:08:19.150 --> 00:08:20.710
So now if we run it.

125
00:08:20.710 --> 00:08:23.655
All right, it works great.

126
00:08:23.655 --> 00:08:28.327
[LAUGH] For
change this to user id, we'll get

127
00:08:28.327 --> 00:08:33.810
a different user out,
yeah let me back out, cool.

128
00:08:33.810 --> 00:08:39.768
So questions on monad transformers, we are
gonna talk a little bit more about it but

129
00:08:39.768 --> 00:08:43.518
I just don't wanna leave this
example of what it's solving for,

130
00:08:43.518 --> 00:08:45.688
and then we'll play around with
more about the mechanics of them.

