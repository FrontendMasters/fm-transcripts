WEBVTT

1
00:00:00.050 --> 00:00:03.939
I will spend one more second
before I shift this thing and

2
00:00:03.939 --> 00:00:05.600
move on to the next one.

3
00:00:05.600 --> 00:00:10.640
Unless you have any wishes
here before we move on.

4
00:00:10.640 --> 00:00:17.444
But what else we can do here we
can actually step this out, right?

5
00:00:17.444 --> 00:00:19.050
So we can interpreter test.

6
00:00:20.480 --> 00:00:24.170
Could do interpretTest here, and

7
00:00:24.170 --> 00:00:29.040
instead of dbToTask what about dbToId,
right?

8
00:00:29.040 --> 00:00:31.399
Instead of consoleToTask,
what about consoleToId?

9
00:00:31.399 --> 00:00:37.310
And we could write a little
couple functions here.

10
00:00:37.310 --> 00:00:43.581
So we have consoleToTask,
where Instead of actually params ID,

11
00:00:43.581 --> 00:00:49.509
instead of actually reading
the question getting the input,

12
00:00:49.509 --> 00:00:54.411
we can say Id of,
it's going to be a function here of

13
00:00:54.411 --> 00:00:58.645
whatever the question
was q say answer to q.

14
00:01:01.360 --> 00:01:04.510
All right, get this out of my way.

15
00:01:05.790 --> 00:01:07.980
It's gotta be horribly frustrating for
people online.

16
00:01:07.980 --> 00:01:12.580
Sorry about these pop-ups everywhere cool.

17
00:01:12.580 --> 00:01:13.930
So there is question.

18
00:01:13.930 --> 00:01:19.995
Let me actually break this out in other
word [LAUGH] rating some actual stuff.

19
00:01:19.995 --> 00:01:25.239
And what's gonna happen here for
the output,

20
00:01:25.239 --> 00:01:30.885
this well, I've got some,
I've got a string and

21
00:01:30.885 --> 00:01:34.952
I can do Id of writing the string as.

22
00:01:34.952 --> 00:01:39.330
All right keep doing that,
remember I'm gonna be interpolating so

23
00:01:39.330 --> 00:01:41.520
you could see what's going on.

24
00:01:41.520 --> 00:01:46.330
Cool, so what we're doing is, returning
an ID that kind of logs what's happening.

25
00:01:46.330 --> 00:01:48.140
And it's not actually
writing to the screen.

26
00:01:48.140 --> 00:01:49.430
We're getting data back.

27
00:01:49.430 --> 00:01:55.451
If we do DB to Id, we can do the same

28
00:01:55.451 --> 00:02:00.850
thing on save and an all oops.

29
00:02:00.850 --> 00:02:03.429
And that takes our table both times.

30
00:02:05.970 --> 00:02:07.182
Tip on a record query.

31
00:02:07.182 --> 00:02:10.295
And again,

32
00:02:10.295 --> 00:02:15.282
saving our table.

33
00:02:15.282 --> 00:02:20.238
And here we'll finding all

34
00:02:20.238 --> 00:02:24.984
in the table with a query.

35
00:02:24.984 --> 00:02:30.868
Great, see what happens here
with our test interpreter.

36
00:02:30.868 --> 00:02:33.969
Just blows up.

37
00:02:33.969 --> 00:02:37.970
[LAUGH] I'm still forking it.

38
00:02:37.970 --> 00:02:41.030
[LAUGH] So Id and
we're just going to extract.

39
00:02:42.110 --> 00:02:45.860
And then from there,
we're going to run our recursively

40
00:02:45.860 --> 00:02:50.120
on that and see what happens.

41
00:02:50.120 --> 00:02:52.037
Eddie's not fine, I gotta bring it in.

42
00:02:52.037 --> 00:02:54.490
Boo Boo.

43
00:02:54.490 --> 00:03:00.956
This is about the time of the day where
this is just gonna be air after after air.

44
00:03:00.956 --> 00:03:07.980
F is not a function and interpretTest,
just don't even know where f is.

45
00:03:07.980 --> 00:03:10.850
So we're gonna run that.

46
00:03:10.850 --> 00:03:15.210
Are we back to,
&gt;&gt; Ruby start and data function.

47
00:03:15.210 --> 00:03:19.400
&gt;&gt; So
we're extracting whatever is in the Id.

48
00:03:19.400 --> 00:03:23.700
And remember before we made this promise
that these things were going to be

49
00:03:23.700 --> 00:03:30.450
returning like, well, I think they're
returning tasks of the continuation.

50
00:03:30.450 --> 00:03:33.390
And as we run these things and

51
00:03:33.390 --> 00:03:38.940
chain these things, we're actually
running and chaining the free mon ad,

52
00:03:38.940 --> 00:03:44.230
which is being interpreted into
a different kind of result.

53
00:03:44.230 --> 00:03:46.900
So that should still hold like dbSave and

54
00:03:46.900 --> 00:03:51.110
all that is just turning
them into Ids now.

55
00:03:51.110 --> 00:03:53.770
I think I'm just,
I'm confused what f is right now.

56
00:03:54.820 --> 00:03:58.200
This will be the last little thing.

57
00:03:58.200 --> 00:04:01.850
Just look at this console.logf.

58
00:04:01.850 --> 00:04:07.482
Once again, back to I should just
left this in the first place, right?

59
00:04:07.482 --> 00:04:08.626
[SOUND] Okay, what is f?

60
00:04:08.626 --> 00:04:13.230
F is undefined router route.

61
00:04:13.230 --> 00:04:14.330
There we go.

62
00:04:14.330 --> 00:04:15.117
See what happened.

63
00:04:15.117 --> 00:04:19.691
I didn't interpret correctly on
my question is the answer to and

64
00:04:19.691 --> 00:04:21.900
it's supposed to be a route.

65
00:04:21.900 --> 00:04:24.504
Just for fun let's just do
right let's see what happens.

66
00:04:24.504 --> 00:04:29.267
[SOUND] [LAUGH] Blew the stack.

67
00:04:29.267 --> 00:04:34.560
[LAUGH] But you can see,
it is indeed interpreting it.

68
00:04:34.560 --> 00:04:37.270
We just have to do a little
bit more work arounds.

69
00:04:37.270 --> 00:04:41.380
Okay, now that we're not going to task and
doing this question answer interface,

70
00:04:41.380 --> 00:04:42.268
how do I mock out.

71
00:04:42.268 --> 00:04:46.819
I think what I would do next before
we shut this is to say well,

72
00:04:46.819 --> 00:04:52.354
I have a answer to every question,
kinda pre canned in my test framework,

73
00:04:52.354 --> 00:04:56.220
and I'll just look up my
answers table to the cube.

74
00:04:57.220 --> 00:05:00.230
Then what's happening is we're actually

75
00:05:00.230 --> 00:05:05.570
writing the valid route back when
I asked the right questions.

76
00:05:05.570 --> 00:05:10.480
Printing should work and
then it's interesting,

77
00:05:10.480 --> 00:05:15.450
something we may not have noticed is
the fixed data point is a recursive data

78
00:05:15.450 --> 00:05:17.480
structure as we see it
just blew this deck.

79
00:05:17.480 --> 00:05:20.820
We just call this again and
again and again right?

80
00:05:20.820 --> 00:05:25.834
And the way to stop a free mon ad,
you have a few constructors

81
00:05:25.834 --> 00:05:30.566
in here lift f puts you in a free,
but you also have pure.

82
00:05:30.566 --> 00:05:36.440
And pure is a way to make your constructor
that's the end and it will just stop.

83
00:05:36.440 --> 00:05:40.970
So we could do that, but
we wont, you know, it's there.

84
00:05:40.970 --> 00:05:42.860
And this is a cool way to do it.

85
00:05:42.860 --> 00:05:46.110
We've written an app and
we've written it in terms of free monads.

86
00:05:46.110 --> 00:05:48.440
And we've made multiple interpreters.

87
00:05:48.440 --> 00:05:50.020
So all as well.

88
00:05:50.020 --> 00:05:52.072
Okay, do we have any questions on this?

89
00:05:52.072 --> 00:05:53.642
&gt;&gt; Can you scroll back up to the top?

90
00:05:53.642 --> 00:05:58.710
I'm sure I just, it was triggered by
the one of the last things that we added.

91
00:05:58.710 --> 00:06:04.900
We had to pull in what was the Id monad.

92
00:06:04.900 --> 00:06:06.900
Yes, the fixed points type.

93
00:06:06.900 --> 00:06:10.172
Essentially, we have to have
some sort of exit condition.

94
00:06:10.172 --> 00:06:11.360
&gt;&gt; Yes.
&gt;&gt; The loops.

95
00:06:11.360 --> 00:06:16.840
So whether that's a type or
it's a logical construction or

96
00:06:16.840 --> 00:06:20.490
something, we need to have some
way of cueing the recursion to.

97
00:06:20.490 --> 00:06:22.911
&gt;&gt; Exactly, and actually that's exactly.

98
00:06:22.911 --> 00:06:25.160
So you start with fix.

99
00:06:26.210 --> 00:06:31.750
And we have these functors have either
have a fixed point functor or you don't.

100
00:06:31.750 --> 00:06:33.185
A list is a fixed point functor,

101
00:06:33.185 --> 00:06:37.190
cuz it will have a list inside a list
inside a list until you hit null, right?

102
00:06:37.190 --> 00:06:39.383
And null is the fixed point.

103
00:06:39.383 --> 00:06:43.630
The way fix works is it injects itself
in between each of these things.

104
00:06:44.870 --> 00:06:49.700
And free does the exact same thing
just provides you with pure to stop.

105
00:06:49.700 --> 00:06:52.420
So you have your functor and then you
go to free you're going to functor and

106
00:06:52.420 --> 00:06:54.960
get free and then you finally
hit your pure and you stop.

107
00:06:54.960 --> 00:06:58.580
So it gives you it's just
fixed with an endpoint to it.

