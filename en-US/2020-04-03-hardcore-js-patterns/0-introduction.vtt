WEBVTT

1
00:00:00.240 --> 00:00:02.640
Okay, welcome to functional architecture.

2
00:00:02.640 --> 00:00:05.110
I'm Brian Lonsdorf, I'll be your teacher.

3
00:00:05.110 --> 00:00:08.970
And we're gonna learn about architecture
and functional programming today.

4
00:00:08.970 --> 00:00:12.350
So, there's this issue with
teaching architecture.

5
00:00:12.350 --> 00:00:15.731
Its always happens where you
try to teach architecture and

6
00:00:15.731 --> 00:00:17.941
it's gonna have all these benefits.

7
00:00:17.941 --> 00:00:22.239
But you can't actually show them in the
class when you're teaching it because you

8
00:00:22.239 --> 00:00:26.440
want the examples to be simple enough
to consume and understand in a day.

9
00:00:26.440 --> 00:00:29.900
And architecture really only pays off
once you hit this kind of breaking point.

10
00:00:29.900 --> 00:00:32.380
There's enough complexity and
your app gets big enough.

11
00:00:32.380 --> 00:00:37.630
So we're gonna try to balance
that line and look at how we can

12
00:00:37.630 --> 00:00:42.270
apply this architecture to get benefits
once the app gets kind of big enough.

13
00:00:42.270 --> 00:00:44.650
So, what is our goal?

14
00:00:44.650 --> 00:00:45.920
Why, why are we doing this?

15
00:00:45.920 --> 00:00:48.300
Do we want our apps to be more modular or

16
00:00:48.300 --> 00:00:53.350
the, do we need them to be more extensible
or performance or maintainable?

17
00:00:53.350 --> 00:00:57.645
Each app has a different kind of set
of values that you wanna go after.

18
00:00:57.645 --> 00:01:02.835
And so for our compass today and
in general I think, we can establish

19
00:01:02.835 --> 00:01:07.275
a good goal for functional
architecture that you start with.

20
00:01:07.275 --> 00:01:12.285
And as you have different requirements,
you can focus on different goals.

21
00:01:12.285 --> 00:01:13.135
So what is that goal?

22
00:01:13.135 --> 00:01:13.845
What can we do here?

23
00:01:14.980 --> 00:01:17.540
Let's just take a step back and
look at this code.

24
00:01:17.540 --> 00:01:19.680
It's a long procedure,
you don't have to read it.

25
00:01:19.680 --> 00:01:23.000
But what we're really doing when we do
architecture is we just kind of group

26
00:01:23.000 --> 00:01:24.220
things.

27
00:01:24.220 --> 00:01:25.220
And then we give them a name.

28
00:01:25.220 --> 00:01:29.170
So we have these named
procedures that we've grouped.

29
00:01:29.170 --> 00:01:32.790
And then we group those procedures
with names into more groups,

30
00:01:32.790 --> 00:01:35.719
and we call this modulars,
modules or classes.

31
00:01:36.730 --> 00:01:39.330
And then those get names.

32
00:01:39.330 --> 00:01:40.900
And then we have datatypes.

33
00:01:40.900 --> 00:01:42.930
And we group data into
these little bundles.

34
00:01:42.930 --> 00:01:43.810
And then we give those names.

35
00:01:43.810 --> 00:01:48.600
We have names on tops of names on tops
of names, this giant cloud of names.

36
00:01:48.600 --> 00:01:50.300
Thank you to Joe Nelson for the slide.

37
00:01:50.300 --> 00:01:52.590
Just wanna call that out.

38
00:01:52.590 --> 00:01:55.160
So, Domain Driven Design is a great book.

39
00:01:55.160 --> 00:01:59.670
It really, really tells you how coding
by metaphor and using these names and

40
00:01:59.670 --> 00:02:03.750
really getting into the zone
of of using ubiquitous,

41
00:02:03.750 --> 00:02:07.260
ubiquitous language to
model the real world.

42
00:02:07.260 --> 00:02:12.370
And really, really hammering on that until
you distill it into the perfect metaphors.

43
00:02:12.370 --> 00:02:15.680
And we kind of have a problem
with metaphors here.

44
00:02:15.680 --> 00:02:18.670
One you have to know about the domain and
context.

45
00:02:18.670 --> 00:02:19.885
You can't just jump into an app.

46
00:02:19.885 --> 00:02:23.922
You have to know everything about what's
not in the code itself to understand

47
00:02:23.922 --> 00:02:24.970
the code.

48
00:02:24.970 --> 00:02:28.680
And then we end up with like these
things like processor and converter.

49
00:02:28.680 --> 00:02:29.750
That's not real world,

50
00:02:29.750 --> 00:02:33.725
like raise your hand if you've
ever written a processor class.

51
00:02:33.725 --> 00:02:37.560
So you're, you end up with these
mixed metaphors of computer stuff and

52
00:02:37.560 --> 00:02:40.940
real world stuff and
things evolve over time and blur and

53
00:02:40.940 --> 00:02:43.150
you end up with this
hodgepodge of functionality.

54
00:02:43.150 --> 00:02:45.510
There's all kind of grouped by name, but

55
00:02:45.510 --> 00:02:48.510
the functionality may be
grouped in different ways.

56
00:02:48.510 --> 00:02:55.070
So, right off the bat,
if we're gonna be capturing procedures for

57
00:02:55.070 --> 00:03:00.395
reuse and we're just depending on a name,
we don't know what we can do with that,

58
00:03:00.395 --> 00:03:03.215
really, there's no actual
rules of composition.

59
00:03:03.215 --> 00:03:07.945
If we're planning on recomposing this
after grouping it and naming it,

60
00:03:07.945 --> 00:03:10.205
we don't know if we can
run it more than once.

61
00:03:10.205 --> 00:03:12.145
Can we run it in different orders?

62
00:03:12.145 --> 00:03:14.365
is it changing other parts of our program?

63
00:03:14.365 --> 00:03:16.225
How does it interact?

64
00:03:16.225 --> 00:03:21.680
So these things that we
are actually defining don't really

65
00:03:21.680 --> 00:03:24.260
become knowledge in our program.

66
00:03:24.260 --> 00:03:28.600
So we want to focus on these
properties here, right?

67
00:03:28.600 --> 00:03:32.070
Whenever we develop a stored procedure,

68
00:03:32.070 --> 00:03:34.540
we want to have properties
around composition.

69
00:03:34.540 --> 00:03:36.400
After all, we're reusing these things.

70
00:03:36.400 --> 00:03:38.930
We're gonna be composing them
in different situations.

71
00:03:38.930 --> 00:03:44.697
And these laws are what protect us from
just the confusion of the name alone.

72
00:03:44.697 --> 00:03:48.338
So our first goal is to
find functions with defined

73
00:03:48.338 --> 00:03:52.334
contracts,mainly those
mathematical properties.

74
00:03:52.334 --> 00:03:56.106
So we are gonna look at
this class ,that's user and

75
00:03:56.106 --> 00:04:00.330
we have a full name here.,and
yhis is perfect, right?

76
00:04:00.330 --> 00:04:03.190
We have a full name function,
works just fine.

77
00:04:03.190 --> 00:04:05.590
We have Bobby Fischer, comes right out.

78
00:04:05.590 --> 00:04:10.330
So, another thing we're gonna do here is
try to break this down and generalize it.

79
00:04:10.330 --> 00:04:11.820
Let's see how that process works.

80
00:04:12.970 --> 00:04:17.540
So we have a user type and
a full name function.

81
00:04:17.540 --> 00:04:20.760
And here we're joining the same
thing as the class effectively.

82
00:04:21.820 --> 00:04:23.830
And it ends up with the same result.

83
00:04:23.830 --> 00:04:27.440
But what if we generalize it further,
I mean, we're just passing first name and

84
00:04:27.440 --> 00:04:27.981
last name.

85
00:04:27.981 --> 00:04:31.760
Why don't we create a join
with spaces function?

86
00:04:31.760 --> 00:04:34.180
We don't have to call it first or
last name, and

87
00:04:34.180 --> 00:04:39.100
ends up being the same exact function,
but it's much more generic and reusable.

88
00:04:39.100 --> 00:04:41.950
And look, we have properties,
it's associative.

89
00:04:41.950 --> 00:04:45.720
Turns out, we can call
jonWithSpace in any nested order.

90
00:04:45.720 --> 00:04:47.281
As long as it's all called,

91
00:04:47.281 --> 00:04:52.107
it doesn't matter how we associate the
parentheses, that's what associated means.

92
00:04:52.107 --> 00:04:56.310
And that's a composable contract for
this generic function.

93
00:04:56.310 --> 00:05:01.720
I'm gonna hammer on generic functions for
a little while longer.

94
00:05:01.720 --> 00:05:06.020
Here with joinWithSpaces, we could take
it a step further and call it joinable.

95
00:05:06.020 --> 00:05:11.050
We'll take any joinable and called join
on it and then we'll pass in the array.

96
00:05:11.050 --> 00:05:14.720
And literally,
there's nothing joinWithSpaces can do

97
00:05:14.720 --> 00:05:18.670
other than call join, because it
knows nothing about its data type.

98
00:05:18.670 --> 00:05:24.280
So by generalizing, we're making less
possibility, simpler implementations,

99
00:05:24.280 --> 00:05:29.250
more reuse, and it becomes a more
generic generalized function.

100
00:05:29.250 --> 00:05:34.360
And we actually gather what
we recover encapsulation.

101
00:05:34.360 --> 00:05:37.620
Objects give us encapsulation
through information hiding, but

102
00:05:37.620 --> 00:05:40.470
this effectively is information hiding.

103
00:05:40.470 --> 00:05:43.040
If we only know we can
call join on our objects,

104
00:05:43.040 --> 00:05:45.990
we know nothing else about it,
we're hiding information.

105
00:05:45.990 --> 00:05:49.260
And we can take that to its logical end
and just define this identity function.

106
00:05:49.260 --> 00:05:52.920
And this identity function,
it knows nothing of this a,

107
00:05:52.920 --> 00:05:56.580
it's just gonna take an a and return an a.

108
00:05:56.580 --> 00:06:00.220
And if it called anything on it or
did anything to it, I mean,

109
00:06:00.220 --> 00:06:04.050
it would break that contract of taking
anything at all and returning it back.

110
00:06:04.050 --> 00:06:09.030
So by not knowing anything about this and
generalizing it to its logical end,

111
00:06:09.030 --> 00:06:12.960
as much as we can make it general, we're
actually doing information hiding and

112
00:06:12.960 --> 00:06:16.340
protecting ourselves from rippling
changes across our application.

