WEBVTT

1
00:00:00.100 --> 00:00:03.400
The only point that I want you to take
from this is there are properties, and

2
00:00:03.400 --> 00:00:05.430
that's why we we strive to do this stuff.

3
00:00:05.430 --> 00:00:09.247
We have associativity, we have identity.

4
00:00:09.247 --> 00:00:14.605
There's a thing called a homomorphism,
where we can actually take a monoid in and

5
00:00:14.605 --> 00:00:17.570
do a type transformation
to another monoid.

6
00:00:17.570 --> 00:00:22.103
And the properties would still hold.

7
00:00:22.103 --> 00:00:26.820
And here's a just an example
of a monoidal homomorphism.

8
00:00:26.820 --> 00:00:29.510
Where here we have a message.

9
00:00:29.510 --> 00:00:34.000
And then we're gonna parse that message
from a string, and then we call MergeFrom.

10
00:00:34.000 --> 00:00:38.090
So it looks like what's happening here is,

11
00:00:38.090 --> 00:00:44.020
we can actually parse the message, and
parse the other message and merge it.

12
00:00:44.020 --> 00:00:48.475
Or we can combine the messages and
then parse it, and both are monoids.

13
00:00:48.475 --> 00:00:53.630
And we're able to make decisions
on making things more efficient.

14
00:00:53.630 --> 00:00:58.760
By first combining them and then doing
the type transformation, or combining

15
00:00:58.760 --> 00:01:02.090
them all, or doing the type transformation
first and then combining them.

16
00:01:03.560 --> 00:01:07.130
Okay, Cayley's Theorem is pretty great,
but we're not gonna deal with it.

17
00:01:07.130 --> 00:01:10.523
And monads are monoids in
the category of endofunctors,

18
00:01:10.523 --> 00:01:14.270
you can think of chain as in nesting.

19
00:01:14.270 --> 00:01:16.290
So if I have a type within a type and

20
00:01:16.290 --> 00:01:19.170
I can flatten that type,
that's a monoidal operation.

21
00:01:19.170 --> 00:01:20.620
We're combining them.

22
00:01:20.620 --> 00:01:26.258
So that's how hand wavy, kinda
nutshell way, the monads are monoids.

