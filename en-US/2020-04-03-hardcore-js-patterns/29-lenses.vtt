WEBVTT

1
00:00:00.150 --> 00:00:05.710
I've set us up already, and
this is because lenses are so simple.

2
00:00:06.750 --> 00:00:11.203
They're so complex,
it's like a really deep subject,

3
00:00:11.203 --> 00:00:15.017
you can do anything and
everything with lenses.

4
00:00:15.017 --> 00:00:20.701
You can do everything you can with
functors with lenses which are built

5
00:00:20.701 --> 00:00:26.479
on functors, and the way we're gonna
just use lenses is pretty light,

6
00:00:26.479 --> 00:00:30.427
but know that you can do
the most amazing things,

7
00:00:30.427 --> 00:00:33.880
you can rewrite every app in just lenses.

8
00:00:33.880 --> 00:00:39.197
[LAUGH] Although, I think that a lot of
people have push back because Haskell and

9
00:00:39.197 --> 00:00:44.840
other lens libraries defined it in terms
of all these little squiggly operators and

10
00:00:44.840 --> 00:00:46.870
it's just like what is this?

11
00:00:46.870 --> 00:00:53.150
It doesn't read right, so that's one
drawback of lenses in those languages.

12
00:00:53.150 --> 00:00:58.175
Here we just have functions and
they're fine, but you can define a lens

13
00:00:58.175 --> 00:01:02.889
that maps over things, you can
define a lens, so take a step back.

14
00:01:02.889 --> 00:01:06.838
So what I've done here is I brought
in the lens library from Lambda,

15
00:01:06.838 --> 00:01:08.300
it's a fairly naive.

16
00:01:08.300 --> 00:01:13.696
If you're gonna use a lens library and
like really commit to lenses,

17
00:01:13.696 --> 00:01:19.744
I would highly recommend looking around
there's one called optica I think,

18
00:01:19.744 --> 00:01:23.298
and then there's a few
other ones out there.

19
00:01:23.298 --> 00:01:27.851
But definitely wanna focus
on [LAUGH] no pun intended,

20
00:01:27.851 --> 00:01:33.025
the top parts, the top level,
simple stuff for this class.

21
00:01:34.220 --> 00:01:37.336
So I usually define
a little namespaced object,

22
00:01:37.336 --> 00:01:41.599
because my lenses tend to be the same
names as the things in the app.

23
00:01:41.599 --> 00:01:46.386
So I like to namespace it with L,
[LAUGH] and what we've done is we've said

24
00:01:46.386 --> 00:01:52.136
LensProp('name'), and that'll be the name
lens, and we have lensProp Street.

25
00:01:52.136 --> 00:01:55.575
And that's the street lens lensProp
address, that's the address lens,

26
00:01:55.575 --> 00:01:56.567
how would I use that?

27
00:01:56.567 --> 00:02:00.678
Well, we have view and
over to view one of these things,

28
00:02:00.678 --> 00:02:05.050
I have this nested object and
if I wanna view the street say,

29
00:02:05.050 --> 00:02:09.670
I'll just call view,
I'll pass it the lens that I want.

30
00:02:09.670 --> 00:02:17.110
Street, and
street takes an address, right?

31
00:02:17.110 --> 00:02:21.688
So I have to actually compose[(L.address,
L.street,

32
00:02:21.688 --> 00:02:27.612
)] lenses composed like functions, and
they let me jump into the address and

33
00:02:27.612 --> 00:02:32.160
into the street and
I can just view that on this user.

34
00:02:32.160 --> 00:02:36.857
So let's do that was console.res,

35
00:02:36.857 --> 00:02:40.191
console.log(res) and

36
00:02:40.191 --> 00:02:46.110
let's node lenses 0
there is is named maple.

37
00:02:46.110 --> 00:02:53.110
Let's get the name L.name, Is maple.

38
00:02:53.110 --> 00:02:57.957
So I was able to jump in to
the steeply nested structure

39
00:02:57.957 --> 00:03:02.819
through composition of properties,
that's cool.

40
00:03:02.819 --> 00:03:08.768
What if do over,
over allows me to modify that toUpper,

41
00:03:08.768 --> 00:03:14.083
so I can say hey,
jump into the name, name part and

42
00:03:14.083 --> 00:03:22.480
let's just pull this out into a street
addrStreetName [LAUGH] that I lost it.

43
00:03:22.480 --> 00:03:23.612
That's fine, did I copy it?

44
00:03:23.612 --> 00:03:27.807
I copied it sweet all
right addrStreetName, and

45
00:03:27.807 --> 00:03:34.460
we're just gonna say over this lens,
we're gonna turn it to upper.

46
00:03:34.460 --> 00:03:39.173
And what's interesting to me
is that this provides a very,

47
00:03:39.173 --> 00:03:43.793
very clean way to jump all
the way down there, change it and

48
00:03:43.793 --> 00:03:47.490
get the whole thing back and
it's immutable.

49
00:03:47.490 --> 00:03:54.500
It made a copy of it along the way, and
it can do so in a very efficient way.

50
00:03:54.500 --> 00:03:58.622
And if we're thinking about functors, and
we're thinking about these properties as

51
00:03:58.622 --> 00:04:01.276
kind of like opening up a box and
getting the next thing,

52
00:04:01.276 --> 00:04:05.139
and opening up that box and getting the
next thing, then boxing them all back up.

53
00:04:05.139 --> 00:04:07.070
That's how maps work, right?

54
00:04:07.070 --> 00:04:10.342
You're mapping over these things and
getting out of target and

55
00:04:10.342 --> 00:04:12.141
then putting more back together.

56
00:04:12.141 --> 00:04:17.548
And that's largely how these
are implemented under the hood,

57
00:04:17.548 --> 00:04:23.771
also means that we can start to make,
I don't think this has L.mapped,

58
00:04:23.771 --> 00:04:29.130
but if I had a Either.of this
name I could totally do that.

59
00:04:29.130 --> 00:04:32.774
I could totally say, jump in and
go over my either, and

60
00:04:32.774 --> 00:04:35.720
then get to the name,
turn it to uppercase.

61
00:04:35.720 --> 00:04:40.260
So this could be inside a task,
and we can jump inside of functors

62
00:04:40.260 --> 00:04:45.224
inside of properties inside of
different parts of a giant structure,

63
00:04:45.224 --> 00:04:48.945
hit that one piece and
then put it all back together.

64
00:04:48.945 --> 00:04:53.588
And that's map by definition, open stuff
up, let's get it out and change it and

65
00:04:53.588 --> 00:04:55.650
then puts it back together for you.

66
00:04:55.650 --> 00:04:58.448
So this stuff gets really,
really powerful,

67
00:04:58.448 --> 00:05:03.396
we're not gonna do that right here, but I
do have a lens package that does do that,

68
00:05:03.396 --> 00:05:05.280
if you wanna look at my GitHub.

69
00:05:05.280 --> 00:05:08.484
It was just porting Edward
commits lens library and

70
00:05:08.484 --> 00:05:12.219
most people these days are using
pro functor lenses, yes.

71
00:05:12.219 --> 00:05:17.529
&gt;&gt; Are these explicitly using
something like an observer pattern,

72
00:05:17.529 --> 00:05:21.600
or is this more like
a reader mode documentation?

73
00:05:21.600 --> 00:05:26.997
&gt;&gt; That's a great question,
so we're not holding

74
00:05:26.997 --> 00:05:32.270
on to a ref and
having any kind of wired changes.

75
00:05:32.270 --> 00:05:36.015
This is very similar to
closures ref stuff, or

76
00:05:36.015 --> 00:05:41.103
they had that view library that's
a little out of date now, but

77
00:05:41.103 --> 00:05:46.690
it was similar to this stuff where
they kinda treated it like lenses.

78
00:05:48.920 --> 00:05:52.287
This is different, it's literally like
treating properties as a functor and

79
00:05:52.287 --> 00:05:55.398
there's a Pumping them up and
changing stuff and putting them back, and

80
00:05:55.398 --> 00:05:58.715
profunctor, lenses are implemented
a little bit different give you the same

81
00:05:58.715 --> 00:06:00.060
power, probably more power.

82
00:06:00.060 --> 00:06:04.421
And you could jump through functors and
all sorts of stuff in properties,

83
00:06:04.421 --> 00:06:08.600
you could also do this with like
a lens that says, hey, you know what?

84
00:06:08.600 --> 00:06:12.191
I'm gonna grab the first or
the zeroth right?

85
00:06:12.191 --> 00:06:16.033
Should be Lens prop, whoops, 0,

86
00:06:16.033 --> 00:06:20.771
then we could say, yeah, we have users,

87
00:06:20.771 --> 00:06:25.405
right, and we'll just start with L.0.

88
00:06:25.405 --> 00:06:28.076
And we could pass in users,

89
00:06:28.076 --> 00:06:33.068
now we're jumping through the array,
of all the,

90
00:06:33.068 --> 00:06:38.310
I guess have to grab the first
one out now to look at it.

91
00:06:38.310 --> 00:06:42.764
But look, we jumped through the array
of users grab the first one, and

92
00:06:42.764 --> 00:06:44.490
then change maple.

93
00:06:44.490 --> 00:06:48.691
And again if I was to call mapped on a
different lens library that supported that

94
00:06:48.691 --> 00:06:52.780
it would run through everyone and change
every name and do it all on mutable.

95
00:06:52.780 --> 00:06:57.306
So these are really, really powerful,
they're really just getters and

96
00:06:57.306 --> 00:07:01.250
setters that are unmutable and
let you compose like functions.

97
00:07:02.550 --> 00:07:06.440
You're kinda like I have this ref to the
street name now, as you kinda mentioned.

98
00:07:06.440 --> 00:07:09.877
It's almost like a reference to a big spot
in a big structure and you're able to just

99
00:07:09.877 --> 00:07:13.230
get in there and change it, and
come back out without loosing your data.

100
00:07:13.230 --> 00:07:16.706
Which is really nice, especially if you're
doing this really nice composition, and

101
00:07:16.706 --> 00:07:18.848
you're just like in the middle
of your composition,

102
00:07:18.848 --> 00:07:20.292
you wanna change one little value.

103
00:07:20.292 --> 00:07:24.309
But typically with a setter, you would
throw away the entire structure, change

104
00:07:24.309 --> 00:07:28.990
the value and then as your composition
goes, you've lost the entire structure.

105
00:07:28.990 --> 00:07:33.240
Lenses preserve the structure, so as you
run through your pipeline of functions,

106
00:07:33.240 --> 00:07:36.290
the structure is maintained,
you just changed one piece.

107
00:07:36.290 --> 00:07:40.208
&gt;&gt; This person said worth mentioning
lenses composed backwards, but

108
00:07:40.208 --> 00:07:43.842
you already covered that earlier
&gt;&gt; That is worth mentioning yes for sure,

109
00:07:43.842 --> 00:07:46.740
normally composition would run name,
street, address, bomp.

110
00:07:46.740 --> 00:07:48.280
It would go right to left,

111
00:07:48.280 --> 00:07:52.760
this actually goes left to right yeah
that's good mention, good call out.

112
00:07:52.760 --> 00:07:56.517
Lenses composed backwards for if you
start to see how it's implemented you

113
00:07:56.517 --> 00:08:00.569
see why but it's weird to see that there
are composed like left to right instead of

114
00:08:00.569 --> 00:08:02.370
right to left where you always see.

115
00:08:02.370 --> 00:08:04.690
But this is a standard
function composition,

116
00:08:04.690 --> 00:08:06.720
this is not a special lens composition.

