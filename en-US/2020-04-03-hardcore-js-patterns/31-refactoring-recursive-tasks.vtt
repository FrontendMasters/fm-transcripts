WEBVTT

1
00:00:00.605 --> 00:00:04.290
This is our sketch, and
let's look at the type of these functions.

2
00:00:04.290 --> 00:00:09.111
So now I have a thing that's a function,
it returns a task,

3
00:00:09.111 --> 00:00:12.109
it takes nothing and returns a task.

4
00:00:12.109 --> 00:00:16.908
Holding another function that
takes a task, holding another

5
00:00:16.908 --> 00:00:22.089
function that takes a task,
we've got this recursive type here.

6
00:00:22.089 --> 00:00:26.218
So that's interesting, how about this one?

7
00:00:26.218 --> 00:00:31.630
Same exact thing,
it's a function that returns a task that's

8
00:00:31.630 --> 00:00:37.056
holding a function returning a task,
same with start, okay?

9
00:00:37.056 --> 00:00:40.580
What if we decide to call these things.

10
00:00:40.580 --> 00:00:44.611
Now, we know what happens.

11
00:00:44.611 --> 00:00:50.632
Now it's a function that returns a task.

12
00:00:50.632 --> 00:00:54.800
I'm omitting the error side.

13
00:00:54.800 --> 00:00:56.798
Like task is like error and sum value.

14
00:00:56.798 --> 00:01:00.818
So let's just focus on what the task is
holding though, task is holding another

15
00:01:00.818 --> 00:01:04.428
task, which is holding another task,
which is holding another task.

16
00:01:04.428 --> 00:01:11.276
But this is menu, when we call it in the
function, yeah, becomes the task, right?

17
00:01:11.276 --> 00:01:16.910
So it's a recursive data
structure of test holding tasks.

18
00:01:16.910 --> 00:01:22.854
So I happen to know if we specialize task,
that's one thing.

19
00:01:22.854 --> 00:01:27.035
But if we turn this into any old monad,
we get we get that right?

20
00:01:27.035 --> 00:01:32.370
And if we take unit and
say it takes any a returns that,

21
00:01:32.370 --> 00:01:38.430
we can start to look at thes
types in different ways, right?

22
00:01:39.750 --> 00:01:45.668
There's a type called Fix.

23
00:01:45.668 --> 00:01:52.062
Let's see if we can, well,
the type of fix is like Fix f,

24
00:01:52.062 --> 00:01:57.939
f (Fix f), so we can do and
say, f is some functor.

25
00:01:57.939 --> 00:02:00.072
So in this case, it's like Task.

26
00:02:00.072 --> 00:02:04.318
And then it would be Task (Fix Task).

27
00:02:04.318 --> 00:02:12.175
And the fix point just kinda promises
we're gonna hit a end at some point.

28
00:02:12.175 --> 00:02:17.850
We'll hit a fix point of this functor.

29
00:02:17.850 --> 00:02:18.913
You can keep recursing down
until it finally ends.

30
00:02:18.913 --> 00:02:20.394
So that's an option.

31
00:02:20.394 --> 00:02:27.465
But one thing I do know about fix
is we didn't talk about this today.

32
00:02:27.465 --> 00:02:28.351
I'm just looking at the types.

33
00:02:28.351 --> 00:02:33.464
But the reason I'm gonna rule
out fix right now is because it

34
00:02:33.464 --> 00:02:40.017
must hold a traversable to be able to
do some actual monadic stuff inside it.

35
00:02:40.017 --> 00:02:42.156
And since task is a monad and
not a functor,

36
00:02:42.156 --> 00:02:44.290
we're gonna be using it as a monad.

37
00:02:44.290 --> 00:02:50.810
I'm gonna back away, but turns out fix
has a very close relative called free.

38
00:02:52.010 --> 00:02:53.910
And that is a monad.

39
00:02:53.910 --> 00:02:56.513
And it's very happy to be a monad.

40
00:02:56.513 --> 00:02:58.138
And it's this recursive type.

41
00:02:58.138 --> 00:03:03.850
And so it's either this recursive
type of a free monad or pure.

42
00:03:03.850 --> 00:03:09.839
So right off the bat,
looking at the type of the function,

43
00:03:09.839 --> 00:03:13.749
I can just realize that if I go look up,

44
00:03:13.749 --> 00:03:17.674
let's go look at type of fix functor.

45
00:03:17.674 --> 00:03:20.819
We're gonna look at Haskell for this one.

46
00:03:20.819 --> 00:03:21.998
Sorry, Elle, select this one data fix.

47
00:03:21.998 --> 00:03:23.425
Yeah.

48
00:03:23.425 --> 00:03:26.260
So it's just a recursive function.

49
00:03:26.260 --> 00:03:30.006
And we just slap this fixed constructor
on the outside each time, so

50
00:03:30.006 --> 00:03:31.855
that we can continue to recurse.

51
00:03:31.855 --> 00:03:36.253
And we actually write catamorphism
that just like runs our app for us.

52
00:03:36.253 --> 00:03:41.913
And if I look at the free
monads in Haskell,

53
00:03:41.913 --> 00:03:46.945
I don't know where the control free,

54
00:03:46.945 --> 00:03:50.731
it's a very similar thing.

55
00:03:50.731 --> 00:03:55.463
They brought it out into a generalized,
forget it.

56
00:03:55.463 --> 00:03:58.510
It's the same type, though.

57
00:03:58.510 --> 00:04:03.310
It's got this recursive structure, they've
just made monad free in interface so

58
00:04:03.310 --> 00:04:04.680
it's hard to see.

59
00:04:04.680 --> 00:04:05.300
Okay.

60
00:04:05.300 --> 00:04:07.510
So let's get back to our types.

61
00:04:07.510 --> 00:04:09.039
So I know that right off the bat,

62
00:04:09.039 --> 00:04:11.596
I have a type that's compatible
with the free monad.

63
00:04:11.596 --> 00:04:15.768
But let's just stick
with task right now for

64
00:04:15.768 --> 00:04:19.726
funsies and build out the initial stuff.

65
00:04:19.726 --> 00:04:23.054
I don't even know, maybe this works.

66
00:04:23.054 --> 00:04:26.422
Let's give it a shot.
[LAUGH] We have to run our app somehow,

67
00:04:26.422 --> 00:04:27.077
right?

68
00:04:27.077 --> 00:04:30.412
So let's build a little runApp function.

69
00:04:30.412 --> 00:04:38.004
And the way we would run this is we would
say, runApp(start) as our initial point.

70
00:04:39.005 --> 00:04:42.200
Now we're making a decision whether or
not we wanna call these tasks or

71
00:04:42.200 --> 00:04:43.619
pass the continuations here.

72
00:04:43.619 --> 00:04:45.434
Let's go ahead and
start with the continuations.

73
00:04:45.434 --> 00:04:47.184
I think that's a little bit more fun.

74
00:04:47.184 --> 00:04:50.432
I don't really know what
the difference is at the moment.

75
00:04:50.432 --> 00:04:54.648
But we're just gonna be passing
continuations instead of the actual tasks.

76
00:04:54.648 --> 00:05:00.042
So that way I get this function,
if I call the function outcomes a task, so

77
00:05:00.042 --> 00:05:05.786
f().fork(console.error) or
what we're gonna get is a continuation.

78
00:05:05.786 --> 00:05:10.472
So you can run the app with that.

79
00:05:11.550 --> 00:05:14.270
Well I'll pass it right into runApp.

80
00:05:14.270 --> 00:05:15.490
There we go.

81
00:05:15.490 --> 00:05:16.120
So there's a loop.

82
00:05:16.120 --> 00:05:19.490
So anytime anything happens,
it'll fork the task and

83
00:05:19.490 --> 00:05:22.429
run the app again with
whatever it was holding.

84
00:05:22.429 --> 00:05:26.355
So let's try that out node

85
00:05:26.355 --> 00:05:31.180
blog/index.js, of course.

86
00:05:31.180 --> 00:05:38.288
[LAUGH] My first step in all of this
is to blow up, if you haven't noticed.

87
00:05:38.288 --> 00:05:45.009
[LAUGH] So it'sooking for
types I got a path situation, and db.

88
00:05:45.009 --> 00:05:51.898
So just working in that thing itself.

89
00:05:51.898 --> 00:05:55.230
All right, cool.
Nevermind that.

90
00:05:55.230 --> 00:05:56.710
So here we are asked for my name.

91
00:05:56.710 --> 00:06:00.255
Brian, where do you wanna go today?

92
00:06:00.255 --> 00:06:02.870
This is nice.

93
00:06:02.870 --> 00:06:03.710
CreateAuthor.

94
00:06:05.090 --> 00:06:06.554
That's her name, Brian.

95
00:06:06.554 --> 00:06:07.423
[LAUGH] All right, great.

96
00:06:07.423 --> 00:06:09.377
I mean, it's working.

97
00:06:09.377 --> 00:06:13.153
Let's write a little
bit more of this thing.

98
00:06:16.388 --> 00:06:23.321
Let's say, let's do our write function.

99
00:06:23.321 --> 00:06:24.728
Well, we'll do write, all.

100
00:06:24.728 --> 00:06:28.809
We'll finish those two out so we can
actually make a little blog post and

101
00:06:28.809 --> 00:06:30.657
actually let's do the latest.

102
00:06:30.657 --> 00:06:33.325
Let's not do all, so latest and write.

103
00:06:33.325 --> 00:06:36.253
So what does write looks like?

104
00:06:39.527 --> 00:06:43.408
Your write is gonna ask for

105
00:06:43.408 --> 00:06:47.646
the title, maybe, right?

106
00:06:47.646 --> 00:06:51.863
And then after we give it the title,

107
00:06:51.863 --> 00:06:55.385
we have to kinda skip to that.

108
00:06:55.385 --> 00:06:58.760
We have to ask it again.
So I'm gonna chain, I'm wanna ask for

109
00:06:58.760 --> 00:06:59.553
the body.

110
00:06:59.553 --> 00:07:05.009
And then from there,
we can chain over and we have the body.

111
00:07:05.009 --> 00:07:11.965
Excuse me, and then we'll have
the title and the body all wrapped up.

112
00:07:11.965 --> 00:07:15.383
Let's put that into a constructor
again composed, maybe,

113
00:07:15.383 --> 00:07:18.943
instead of having just creating
data types on the fly in there.

114
00:07:18.943 --> 00:07:21.229
All right, neat.

115
00:07:21.229 --> 00:07:25.838
And then we just chain over that where
we actually map over it cuz we will be

116
00:07:25.838 --> 00:07:27.662
holding the continuation.

117
00:07:27.662 --> 00:07:29.730
So now we have a post.

118
00:07:29.730 --> 00:07:30.527
I'm sorry, I forgot to save the post.

119
00:07:30.527 --> 00:07:32.022
Let's go ahead and save this post.

120
00:07:34.253 --> 00:07:38.916
So save PostTable and we're

121
00:07:38.916 --> 00:07:43.971
gonna pass in the post to that.

122
00:07:43.971 --> 00:07:45.637
And then we don't care about the post.

123
00:07:45.637 --> 00:07:48.002
We're just gonna go what
happens after write.

124
00:07:48.002 --> 00:07:49.850
So latest.

125
00:07:49.850 --> 00:07:51.923
Okay, great, latest.

126
00:07:51.923 --> 00:07:55.048
Now again, I don't know if this works.

127
00:07:55.048 --> 00:07:55.746
I hope it works.

128
00:07:55.746 --> 00:07:56.850
I think it works.

129
00:07:56.850 --> 00:07:57.906
We have to probably make this.

130
00:07:57.906 --> 00:07:58.877
Let's make that.

131
00:07:58.877 --> 00:08:02.347
So we need a PostTable.

132
00:08:02.347 --> 00:08:04.732
I could just give it strings, but

133
00:08:04.732 --> 00:08:09.417
we're kinda wanna define some
changeable table names in one spot

134
00:08:09.417 --> 00:08:14.202
instead of having to change them
all over the place, the updates.

135
00:08:14.202 --> 00:08:16.074
And we ever title in our body and

136
00:08:16.074 --> 00:08:19.900
we'll just again just wrap
it in a title and body.

137
00:08:19.900 --> 00:08:24.684
And I think one of our next steps
after this we have some time was

138
00:08:24.684 --> 00:08:29.379
validate it with our fun little
validation library we made.

139
00:08:29.379 --> 00:08:32.491
Great.
But I'm more concerned about turning

140
00:08:32.491 --> 00:08:36.139
this thing into the best architected app,
right?

141
00:08:36.139 --> 00:08:38.685
I don't really care so much about
the little details at the moment.

142
00:08:38.685 --> 00:08:41.410
So latest, what does latest look like?

143
00:08:41.410 --> 00:08:43.902
This one's interesting.

144
00:08:43.902 --> 00:08:48.506
I guess we have to get all everytime.

145
00:08:48.506 --> 00:08:49.409
That's a little interesting.

146
00:08:49.409 --> 00:08:54.020
We might have to like cache the results or
pass something into it.

147
00:08:54.020 --> 00:08:54.970
Let's look at that.

148
00:08:54.970 --> 00:08:57.875
We'll start by saying
we'll get all(PostTable).

149
00:08:59.170 --> 00:09:05.110
And then I'll just get the last
cuz we're cheap [LAUGH].

150
00:09:05.110 --> 00:09:07.301
Posts and then I don't know.

151
00:09:07.301 --> 00:09:10.214
Let's just bring in randa for
that [LAUGH].

152
00:09:10.214 --> 00:09:12.253
Last from randa, why not?

153
00:09:12.253 --> 00:09:16.099
Why isn't it available
to us in JavaScript?

154
00:09:16.099 --> 00:09:18.567
I'm not sure.

155
00:09:18.567 --> 00:09:19.451
Okay.

156
00:09:19.451 --> 00:09:22.177
We're not gonna chain,
we're gonna map get the last post.

157
00:09:22.177 --> 00:09:28.287
And then I guess we wanna format that's
for the screen in one way or another.

158
00:09:28.287 --> 00:09:29.841
And we're gonna go ahead and print that.

159
00:09:29.841 --> 00:09:34.948
All right, so
it's print(formatPost) you know what?

160
00:09:34.948 --> 00:09:36.527
First we'll map format,
then we'll map print.

161
00:09:36.527 --> 00:09:39.682
And actually if you wanna chain the print,

162
00:09:39.682 --> 00:09:43.287
cuz prints a function
that will be destructive.

163
00:09:43.287 --> 00:09:47.829
And finally,
we have to map the continuation.

164
00:09:47.829 --> 00:09:50.768
What happens after our latest?

165
00:09:50.768 --> 00:09:51.718
I guess we go back to menu.
Cool.

166
00:09:51.718 --> 00:09:52.798
Functional programming,
y'all it's no hard.

167
00:09:52.798 --> 00:09:57.574
[LAUGH] So let's go ahead and
finish the formatPost and

168
00:09:57.574 --> 00:10:03.000
the print function and
I think we might have a thing working.

169
00:10:04.610 --> 00:10:09.155
Cons formatPost.

170
00:10:09.155 --> 00:10:11.479
Now, this does not belong here.

171
00:10:11.479 --> 00:10:13.039
We're kind of in a controller, right?

172
00:10:13.039 --> 00:10:15.314
I don't wanna be formatting posts
in the middle of my controller.

173
00:10:15.314 --> 00:10:18.187
I'm just gonna write it here and
then we'll move it.

174
00:10:18.187 --> 00:10:20.442
But moving stuff is cheap.

175
00:10:20.442 --> 00:10:28.190
People get so into architecting their
folder structures and objects and stuff.

176
00:10:28.190 --> 00:10:31.670
And I have a suspicion it's because
they're not making anything portable.

177
00:10:31.670 --> 00:10:34.487
All of our stuff is portable, you just
copy and paste and move it and whatever.

178
00:10:34.487 --> 00:10:38.510
So it's much less of an issue for
us to just throw everything here and

179
00:10:38.510 --> 00:10:42.053
then organize it later and
hindsight is 2020, right?

180
00:10:42.053 --> 00:10:47.102
All right, formatPost takes a post and

181
00:10:47.102 --> 00:10:54.140
let's just go ahead and
just it's the post.title and

182
00:10:54.140 --> 00:10:57.511
the post.body a little.

183
00:10:57.511 --> 00:11:01.590
I little bit like title new line body.

184
00:11:01.590 --> 00:11:02.260
Cool?

185
00:11:02.260 --> 00:11:03.910
We cool with that, we're good?

186
00:11:04.980 --> 00:11:06.317
Anybody?

187
00:11:06.317 --> 00:11:08.091
[LAUGH] All right, last one is print.

188
00:11:08.091 --> 00:11:09.375
Let's make print.

189
00:11:09.375 --> 00:11:14.169
And that will take some string.

190
00:11:14.169 --> 00:11:18.831
And we're just gonna make a Task(rej,
res) and

191
00:11:18.831 --> 00:11:23.604
res(console.log), which is nothing string.

192
00:11:23.604 --> 00:11:24.766
Terrific.

193
00:11:24.766 --> 00:11:30.178
Okay, copy that.

194
00:11:30.178 --> 00:11:32.467
I know, I know.
There, there.

195
00:11:32.467 --> 00:11:35.030
Cool, so see what happens.

196
00:11:35.030 --> 00:11:38.331
Name?

197
00:11:38.331 --> 00:11:40.270
Brian.

198
00:11:40.270 --> 00:11:41.110
Where do you wanna go?

199
00:11:41.110 --> 00:11:41.643
Where do you wanna go today?

200
00:11:41.643 --> 00:11:43.176
How about we write.

201
00:11:43.176 --> 00:11:44.756
Title.

202
00:11:44.756 --> 00:11:47.625
Okay, First Post.

203
00:11:47.625 --> 00:11:49.292
Body.

204
00:11:49.292 --> 00:11:56.824
Hello y'all, I'm so excited,
this is my blog [LAUGH].

205
00:11:56.824 --> 00:11:58.978
So I'm just gonna have fun with this.

206
00:11:58.978 --> 00:12:06.017
Okay, and yeah, I think it works.

207
00:12:06.017 --> 00:12:09.350
So it asks for the title,
asks for the body.

208
00:12:09.350 --> 00:12:12.980
And then it wrote the title and
the body, the new line.

209
00:12:12.980 --> 00:12:14.161
It’s just hard to tell
[LAUGH] what happened.

210
00:12:14.161 --> 00:12:17.904
So maybe we will work a little
bit more on our formatting.

211
00:12:17.904 --> 00:12:19.524
But it’s all going.

212
00:12:19.524 --> 00:12:20.024
All right.

