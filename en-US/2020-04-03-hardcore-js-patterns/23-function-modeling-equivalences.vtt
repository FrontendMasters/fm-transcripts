WEBVTT

1
00:00:00.030 --> 00:00:03.120
Let's do one more thing before we
move on from function modelling.

2
00:00:04.320 --> 00:00:06.710
We have here a reducer.

3
00:00:06.710 --> 00:00:13.665
And I defined contramap where we hit
the x with the f before it goes in.

4
00:00:13.665 --> 00:00:15.192
And we have a concat.

5
00:00:15.192 --> 00:00:17.030
This one's kinda interesting.

6
00:00:17.030 --> 00:00:23.355
This says, well, I have another reducer,
right, and I have my reducer.

7
00:00:23.355 --> 00:00:26.784
And what I'm gonna do is I'm
gonna run my accumulator an X and

8
00:00:26.784 --> 00:00:28.610
get a new accumulator, right?

9
00:00:28.610 --> 00:00:33.630
That's what this returns me, which can
be the accumulator of the next reducer.

10
00:00:33.630 --> 00:00:37.540
So by running my reducer,
with that same accumulator in value,

11
00:00:37.540 --> 00:00:41.150
I get a new accumulator which
gets passed to the next one.

12
00:00:41.150 --> 00:00:44.971
So it is much more like a composition.

13
00:00:44.971 --> 00:00:51.609
And if we dig in a little bit deeper,
let me first show how this,

14
00:00:51.609 --> 00:00:55.510
I wanna set this up for a second here.

15
00:00:55.510 --> 00:00:59.220
So I'm kind of modeling a little
like Redux c style app.

16
00:00:59.220 --> 00:01:04.630
You don't need to know what Redux is,
but it is a common architecture, and

17
00:01:04.630 --> 00:01:07.630
so I just wanna like walk through this for
a second.

18
00:01:08.810 --> 00:01:14.493
So we have a login reducer, so
our accumulator state, our values payload.

19
00:01:14.493 --> 00:01:19.035
And we're saying, if we have an email,
we'll try to login.

20
00:01:19.035 --> 00:01:23.570
I'll check the credentials for admin and
123 and said, logged in is true or not.

21
00:01:23.570 --> 00:01:26.530
Otherwise we'll just return state back cuz
they always have to return an accumulator.

22
00:01:28.360 --> 00:01:30.630
Set preferences will just
if you've got preferences,

23
00:01:30.630 --> 00:01:32.970
we'll actually set them
otherwise return state.

24
00:01:32.970 --> 00:01:35.190
Okay, cool, so we have two reducers.

25
00:01:35.190 --> 00:01:35.820
Now we're gonna do,

26
00:01:35.820 --> 00:01:41.570
is I'm gonna throw them in reducer kind
of official function modelling reducers.

27
00:01:41.570 --> 00:01:44.685
So I can combine them.

28
00:01:44.685 --> 00:01:49.403
And then, I'm gonna run the loggedIn:
false, preferences, and

29
00:01:49.403 --> 00:01:53.610
you've got my username and
password are correct.

30
00:01:53.610 --> 00:01:58.170
If I run that, just save this and run it.

31
00:01:58.170 --> 00:02:00.998
I get logged in true, and
it's at the preps, great.

32
00:02:00.998 --> 00:02:05.726
If I mess up the name,
doesn't get logged in, while false,

33
00:02:05.726 --> 00:02:08.616
cool, so it's the prefs over here.

34
00:02:08.616 --> 00:02:11.738
All right, everybody's happy.

35
00:02:11.738 --> 00:02:13.240
Now, I can play around
with the types here.

36
00:02:13.240 --> 00:02:18.381
And this is kinda getting down to
the meat of why we're starting

37
00:02:18.381 --> 00:02:22.844
to model functions is,
here we have an accumulator and

38
00:02:22.844 --> 00:02:26.349
an a and we return an accumulator, right?

39
00:02:26.349 --> 00:02:33.260
And we know that if we flip the types
here, that's the same function, right?

40
00:02:33.260 --> 00:02:39.469
If I have both of these up front, I could
just flip them around, same function.

41
00:02:39.469 --> 00:02:43.346
What happens if I give it one at a time?

42
00:02:43.346 --> 00:02:50.130
I can provide an isomorphism proof that
says, I can curry and uncurry a function.

43
00:02:50.130 --> 00:02:53.980
So I can easily take
one argument at a time.

44
00:02:55.040 --> 00:02:56.100
And now what's happening?

45
00:02:56.100 --> 00:02:56.987
What it is?

46
00:02:56.987 --> 00:02:58.170
Is that endo?

47
00:02:58.170 --> 00:02:59.436
What's endo right there?

48
00:02:59.436 --> 00:03:02.350
Okay, what if we turned A into endo?

49
00:03:03.490 --> 00:03:06.437
Okay, it's getting interesting.

50
00:03:06.437 --> 00:03:11.262
And what if, and
this is just a function, right?

51
00:03:11.262 --> 00:03:15.810
I want to combine these functions.

52
00:03:15.810 --> 00:03:17.630
So I'll put that into a function.

53
00:03:17.630 --> 00:03:21.470
Now instead of a reducer, I just walked
through the types I played around with

54
00:03:21.470 --> 00:03:24.090
equivalent types, and
I've ended up at this type.

55
00:03:25.580 --> 00:03:26.531
That's kind of fun.

56
00:03:26.531 --> 00:03:30.652
[LAUGH] Let's see, and
I know it's equivalent.

57
00:03:30.652 --> 00:03:36.008
This is a deeper subject that
I'm not gonna go too deep into.

58
00:03:36.008 --> 00:03:40.823
But looking at playing around with
argument types, moving them around, carry,

59
00:03:40.823 --> 00:03:46.200
uncarrying, packaging things up, kind of
leads you into some of these solutions.

60
00:03:46.200 --> 00:03:49.543
Where you can say I have my own function,
I'm gonna model it, it's gonna be great.

61
00:03:49.543 --> 00:03:51.524
And you write all this code and
you're like, wait,

62
00:03:51.524 --> 00:03:53.270
that's just equivalent to this other type.

63
00:03:53.270 --> 00:03:56.570
[LAUGH] But I just played around
with the arguments a little bit.

64
00:03:56.570 --> 00:03:59.322
So a lot of this is almost
always kind of done for

65
00:03:59.322 --> 00:04:01.803
you if you kind of investigate the types.

66
00:04:01.803 --> 00:04:04.763
But let's go ahead, let's go right this,
we already have a function and

67
00:04:04.763 --> 00:04:05.400
endo defined.

68
00:04:06.720 --> 00:04:10.717
So instead of saying, I have a login and

69
00:04:10.717 --> 00:04:14.846
I'm gonna concat that with this thing.

70
00:04:14.846 --> 00:04:20.872
I'm gonna do this right here,
we'll say of a function of login.

71
00:04:20.872 --> 00:04:24.090
We can concat that with
a function of set prefs.

72
00:04:24.090 --> 00:04:28.710
And we just said, we're gonna flip
these around take one at a time, right?

73
00:04:28.710 --> 00:04:35.401
So let's do that state, payload and state.

74
00:04:35.401 --> 00:04:38.030
Now of course,
we wanna put this into endo.

75
00:04:39.910 --> 00:04:43.351
And do that, as we said.

76
00:04:43.351 --> 00:04:48.850
And actually, this is kind of a weird API.

77
00:04:48.850 --> 00:04:52.730
Why don't,
I just map this an endo, or sorry,

78
00:04:52.730 --> 00:04:57.106
you can map the function into endo,
that could work.

79
00:04:57.106 --> 00:04:59.372
Let me see if I can get this to
work first before I try that.

80
00:04:59.372 --> 00:05:04.050
[LAUGH] But the the idea is I can
kind of push this out over here or

81
00:05:04.050 --> 00:05:05.970
embed it in my function definition itself.

82
00:05:05.970 --> 00:05:08.560
I could have put a function
right here if I wanted to.

83
00:05:08.560 --> 00:05:11.964
These are decisions about my API,
whether I wanna try to lift

84
00:05:11.964 --> 00:05:15.635
all these things into the right type,
kind of in the background or

85
00:05:15.635 --> 00:05:18.930
if I wanna expose,
that's how you make these functions.

86
00:05:19.960 --> 00:05:23.101
Okay, so now how do I work with this?

87
00:05:23.101 --> 00:05:32.290
Well, now state doesn't get given to it
right off the bat, and a payload does.

88
00:05:32.290 --> 00:05:35.950
And that returns me an endo and
then I'll run that with state.

89
00:05:35.950 --> 00:05:43.010
So we've separated these two, and
still works, if I get the password wrong.

90
00:05:43.010 --> 00:05:45.465
Logged out false, me.

91
00:05:45.465 --> 00:05:50.658
Let's see if I can pull this one off and
put it into an endo here.

92
00:05:50.658 --> 00:05:53.230
I don't wanna spend too much time on this.

93
00:05:53.230 --> 00:06:00.823
So I just wanted to kinda show you,
this is pretty interesting stuff.

94
00:06:00.823 --> 00:06:03.358
So, is this work?

95
00:06:03.358 --> 00:06:09.379
Yeah, it works,
you change the logged out false.

96
00:06:09.379 --> 00:06:13.822
Cool, so
in my reducer combination function,

97
00:06:13.822 --> 00:06:19.152
I have actually mapped over
the output of the function and

98
00:06:19.152 --> 00:06:26.162
put it in an endo, and now my function
definition API's the same as it was.

99
00:06:26.162 --> 00:06:33.176
But I was able to change how this works.

100
00:06:33.176 --> 00:06:37.301
Another thing that's really interesting
is if I don't need state here,

101
00:06:37.301 --> 00:06:40.703
we'll see this later on the day,
but we can factor this out.

102
00:06:40.703 --> 00:06:45.465
And really, really play around with
the types as we solve the functions we can

103
00:06:45.465 --> 00:06:49.213
kind of like magically appear
new arguments out of nowhere.

104
00:06:49.213 --> 00:06:51.660
So we can use that as well.

105
00:06:51.660 --> 00:06:58.550
Modeling functions has many,
many outcomes, many possibilities.

106
00:06:58.550 --> 00:07:03.770
Then there's a bunch of equivalent
ways to model a function.

107
00:07:03.770 --> 00:07:06.949
So by playing around with argument types.

108
00:07:08.710 --> 00:07:13.184
We can discover equivalent ways
to model the same function.

109
00:07:13.184 --> 00:07:18.039
So these function equivalences, function
modeling equivalences [LAUGH] I don't

110
00:07:18.039 --> 00:07:20.440
know, and I think that's pretty cool.

111
00:07:21.660 --> 00:07:25.911
One of the reasons I think that's
pretty cool is that, when we did

112
00:07:25.911 --> 00:07:30.723
the reducer we had these, we can do
stuff like contramap and everything.

113
00:07:30.723 --> 00:07:34.863
And when we're starting to move these
types around and change things,

114
00:07:34.863 --> 00:07:38.452
like maybe function doesn't have
contramap and I want that so

115
00:07:38.452 --> 00:07:41.505
I can model it at a different
way to get that and so on.

116
00:07:41.505 --> 00:07:44.818
It's kinda hard to get from here
back to reduce was easy to kind

117
00:07:44.818 --> 00:07:48.270
of follow this to there,
a little bit harder to go the other way.

