WEBVTT

1
00:00:00.370 --> 00:00:07.004
So semi groups are everywhere,
like, everywhere.

2
00:00:07.004 --> 00:00:11.380
And so the main thing you have to kind of
think about when you're defining a semi

3
00:00:11.380 --> 00:00:15.622
group is what if we make this operator
this kind of like special operator here

4
00:00:15.622 --> 00:00:20.000
and we're going to overload it with
plus union intersection, disjunction,

5
00:00:20.000 --> 00:00:22.497
conjunction and pretty much any operator.

6
00:00:22.497 --> 00:00:28.380
We can do max and min in the same way
with min greater than and less than.

7
00:00:28.380 --> 00:00:33.520
So if I said one greater than
three greater than seven or

8
00:00:33.520 --> 00:00:40.570
zero, whatever, we can do that
associatively and it's closed.

9
00:00:40.570 --> 00:00:42.910
So semigroups are everywhere.

10
00:00:42.910 --> 00:00:46.670
And we're going to define them
in programming as a datatype.

11
00:00:46.670 --> 00:00:47.580
So let's do Sum.

12
00:00:47.580 --> 00:00:52.420
And we're going to call that special
operator, we're just going to have

13
00:00:52.420 --> 00:00:54.950
a method because we don't want to do
operator overloading in JavaScript.

14
00:00:54.950 --> 00:00:58.160
It's a pain in the butt gives
like value of tricks and whatnot.

15
00:00:58.160 --> 00:01:00.810
So we're going to go ahead and
just do it this way.

16
00:01:00.810 --> 00:01:04.710
So if I'm gonna concat
a sum with another sum,

17
00:01:04.710 --> 00:01:09.210
well let's actually start
with what we gonna write so

18
00:01:09.210 --> 00:01:14.620
we'll say 3 concat sum of 5, and
what we want is the sum eight.

19
00:01:15.710 --> 00:01:17.342
Now that's a weird thing to do.

20
00:01:17.342 --> 00:01:21.840
[LAUGH] What we're trying to do is make an
interface that we're programming to that

21
00:01:21.840 --> 00:01:26.100
captures all those examples that I was
just talking about with the semi groups.

22
00:01:26.100 --> 00:01:30.810
So we have these binary operators that can
be implemented in many different ways and

23
00:01:30.810 --> 00:01:32.930
they're associative and closed.

24
00:01:32.930 --> 00:01:35.870
We can make an interface on an object and

25
00:01:35.870 --> 00:01:39.928
say around a type and
just say concat is that operator, right?

26
00:01:39.928 --> 00:01:44.430
It concats the thing on the left with
the right and it's associative and

27
00:01:44.430 --> 00:01:50.180
it's closed, meaning I will always
get a sum out if I concat two sums.

28
00:01:50.180 --> 00:01:53.620
So let's go ahead and implement this.

29
00:01:53.620 --> 00:02:01.160
Sum we're always going to return a sum and
we have to expose this x here.

30
00:02:01.160 --> 00:02:02.490
So I can get the x off the other.

31
00:02:02.490 --> 00:02:08.322
So we'll say sum x plus other.x,
so everybody see how that works.

32
00:02:08.322 --> 00:02:11.540
That's a it's a bit of
an interesting syntax.

33
00:02:11.540 --> 00:02:13.570
You don't see it very often.

34
00:02:13.570 --> 00:02:16.516
With these little factory functions,
I just,

35
00:02:16.516 --> 00:02:21.169
it's the slimmest way to define this
kind of stuff and I just stick with it.

36
00:02:21.169 --> 00:02:25.157
But is anybody getting hung up on this?

37
00:02:27.153 --> 00:02:31.761
Okay, so
we're going to do is hopefully this

38
00:02:31.761 --> 00:02:36.384
will say sum of eight,
I think monoids zero.

39
00:02:36.384 --> 00:02:40.770
It's not really going to say sum of eight,
but x is eight, and it's got a concat.

40
00:02:40.770 --> 00:02:42.690
So that's our sum.

41
00:02:42.690 --> 00:02:44.150
We can define a two string on it.

42
00:02:45.280 --> 00:02:48.950
That would be nice, but
let's not go through that.

43
00:02:48.950 --> 00:02:50.314
So we can do this with products.

44
00:02:50.314 --> 00:02:51.785
Let's go ahead and do this with products.

45
00:02:55.185 --> 00:02:57.960
And that would be just multiplication,
right?

46
00:02:59.110 --> 00:03:01.290
Instead of plus, cool.

47
00:03:02.870 --> 00:03:05.420
So let's change sum to product.

48
00:03:05.420 --> 00:03:08.540
Three times five and
we should get the products.

49
00:03:11.430 --> 00:03:12.685
There we go.

50
00:03:12.685 --> 00:03:14.150
Oops products.

51
00:03:14.150 --> 00:03:14.810
Sum five.

52
00:03:14.810 --> 00:03:15.420
What did I do here?

53
00:03:15.420 --> 00:03:20.065
There we go.

54
00:03:20.065 --> 00:03:20.816
And there we are.

55
00:03:20.816 --> 00:03:25.373
15 how about let's do any,

56
00:03:25.373 --> 00:03:30.670
which is the name for this or that.

57
00:03:30.670 --> 00:03:36.290
So let's say any is x for the other one.

58
00:03:36.290 --> 00:03:42.480
I could say any true concat any false.

59
00:03:42.480 --> 00:03:47.710
Okay, and so if either of these are true,
we'll get an any true and

60
00:03:47.710 --> 00:03:50.650
if either, so
we can just run that real quick.

61
00:03:52.760 --> 00:03:53.660
Get true.

62
00:03:53.660 --> 00:03:55.970
They're both false, we'll get false.

63
00:03:55.970 --> 00:04:01.840
This kind of captures that idea
of running through an array and

64
00:04:01.840 --> 00:04:03.470
seeing if anything is true or false.

65
00:04:03.470 --> 00:04:07.720
It combines everything and tells you
the answer of if you had a true or

66
00:04:07.720 --> 00:04:11.140
false, so we can see we're going
to see some of these in action.

67
00:04:11.140 --> 00:04:13.470
But I just want you to get a feel for
what's happening.

68
00:04:13.470 --> 00:04:16.540
We're lifting this
operation into a type so

69
00:04:16.540 --> 00:04:19.720
we can program to
the interface called concat.

70
00:04:19.720 --> 00:04:21.670
And then we can swap these types out.

71
00:04:21.670 --> 00:04:24.640
But concat always behaves the same way.

72
00:04:24.640 --> 00:04:27.816
Perhaps the interesting
the simplest one is just strings.

73
00:04:27.816 --> 00:04:35.520
Say hi [LAUGH] concat it's already
built in got an explanation.

74
00:04:35.520 --> 00:04:36.236
And bam.

75
00:04:36.236 --> 00:04:37.010
We get hi.

