WEBVTT

1
00:00:00.500 --> 00:00:03.550
Okay, let's get through these together.

2
00:00:03.550 --> 00:00:06.518
We're in this together y'all.

3
00:00:06.518 --> 00:00:11.078
So, once I bring you all over to
the dark side, we all have to know how

4
00:00:11.078 --> 00:00:16.000
to do this together so
we can convince others that it's good.

5
00:00:16.000 --> 00:00:18.030
So there's this.

6
00:00:18.030 --> 00:00:23.520
I wanted to call out lists from
immutable Js it does not have foldMap.

7
00:00:23.520 --> 00:00:26.650
So we're using immutable extensions,
which is just I took a mutable and

8
00:00:26.650 --> 00:00:28.150
added foldMap to it.

9
00:00:28.150 --> 00:00:33.180
But there's like 50 different libraries
that implement it exactly the same way.

10
00:00:33.180 --> 00:00:37.189
So we're just using this one just
to demonstrate it, but you saw,

11
00:00:37.189 --> 00:00:40.064
it's just reduce and
you just pass in the type.

12
00:00:40.064 --> 00:00:45.100
Okay, so it says to re implement some
using fold map and the sum monoid.

13
00:00:45.100 --> 00:00:47.790
Okay, let's use foldMap here.

14
00:00:47.790 --> 00:00:53.140
So we have list of x's and we're going to
hit instead of calling this accumulator

15
00:00:53.140 --> 00:00:59.280
and the x 0, we'll start with the Sum(0),
or how about just Sum.empty?

16
00:00:59.280 --> 00:01:02.740
And Pass in Sum and foldMap.

17
00:01:02.740 --> 00:01:08.270
So we're gonna take this list of xs,
turn them into sums, starting with empty.

18
00:01:08.270 --> 00:01:14.040
Now, since xs, there's actually stuff
there, it's not gonna break if I don't.

19
00:01:14.040 --> 00:01:16.359
No, I guess it is gonna break,
all right, that's fine.

20
00:01:16.359 --> 00:01:19.450
[LAUGH] I've updated the library so
it works more like reduce.

21
00:01:19.450 --> 00:01:24.692
It doesn't break if it's not there, but
It should be there, so deal with it.

22
00:01:24.692 --> 00:01:28.220
But foldMap can work on semigroups,
it's just an unsafe operation.

23
00:01:30.470 --> 00:01:34.000
So there's that one,
any questions on that?

24
00:01:34.000 --> 00:01:36.440
Did anybody have any struggles?

25
00:01:36.440 --> 00:01:38.630
And maybe this was a little too ambiguous.

26
00:01:40.508 --> 00:01:44.480
&gt;&gt; [LAUGH] All right, great question.

27
00:01:44.480 --> 00:01:46.600
How does this work, exactly?

28
00:01:46.600 --> 00:01:49.830
So what's happening is,
we have this 123, right?

29
00:01:49.830 --> 00:01:53.830
What's going on with foldMap actually is.

30
00:01:53.830 --> 00:01:56.096
Let's let's go ahead and
write foldMap in a different way.

31
00:01:56.096 --> 00:02:01.650
FoldMap takes a type, right?

32
00:02:01.650 --> 00:02:06.220
Let's call that t so we don't have
some weird like your keyword air and

33
00:02:06.220 --> 00:02:08.176
a bunch of x's.

34
00:02:08.176 --> 00:02:13.690
We'll say xs reduce will take
you accumulator and each x,

35
00:02:13.690 --> 00:02:17.930
and we're gonna put was this it
takes actually three arguments.

36
00:02:17.930 --> 00:02:20.420
This first one,
we're gonna push over here, right?

37
00:02:20.420 --> 00:02:25.420
So it's t then of empty,
all right, and the x's.

38
00:02:26.550 --> 00:02:29.140
So we can start with empty here

39
00:02:30.250 --> 00:02:35.220
as our initial accumulator
will just do aq concat x.

40
00:02:35.220 --> 00:02:40.770
So this is how foldMap is implemented
under the hood, it's just a reduce.

41
00:02:41.770 --> 00:02:45.940
So what's happening here is if we go
ahead and stead and call foldMap,

42
00:02:45.940 --> 00:02:51.100
some some of the empty and
our xs that should hopefully still pass.

43
00:02:52.130 --> 00:02:54.820
We get a Nan, Nan.

44
00:02:54.820 --> 00:02:56.170
How's that looking?

45
00:02:56.170 --> 00:03:01.690
We got this type some,
which is t I didn't put it in the t.

46
00:03:01.690 --> 00:03:06.980
That's the that's kind of the crux of
this right is that and now it's passing

47
00:03:06.980 --> 00:03:11.810
is that when we say foldMap, we're saying
we want to fold this list down 123.

48
00:03:11.810 --> 00:03:16.730
But first we want to map it into
the subtype, that's this map, proportion,

49
00:03:16.730 --> 00:03:17.690
a portion here.

50
00:03:17.690 --> 00:03:20.020
So we could alternatively
instead of putting the t here,

51
00:03:20.020 --> 00:03:24.050
we could actually say,
first map, put it in the type,

52
00:03:24.050 --> 00:03:29.100
then reduce it down just by calling
concat on everything, and we still pass.

53
00:03:29.100 --> 00:03:32.570
So this is kind of how
it works under the hood.

54
00:03:32.570 --> 00:03:36.200
If we go back to the other syntax
where we've just got a list of xs and

55
00:03:36.200 --> 00:03:38.200
we're going to foldMap that into a sum.

56
00:03:39.280 --> 00:03:43.350
We can expand this by saying
we've got each x and we're gonna

57
00:03:43.350 --> 00:03:47.850
put that in the sum type and then it
just knows how to combine them all.

58
00:03:49.300 --> 00:03:53.700
So there is another function that it
didn't mention which is just full.

59
00:03:55.330 --> 00:03:58.850
So let's say I have and it ticks an empty.

60
00:03:58.850 --> 00:04:02.970
Let's say I have a list and we map
over it and we put that into a sum and

61
00:04:02.970 --> 00:04:05.045
we just fold down that list.

62
00:04:05.045 --> 00:04:08.110
FoldMap is just first map it then fold it,

63
00:04:08.110 --> 00:04:10.820
fold being this this part where
we just concat everything.

64
00:04:12.110 --> 00:04:14.880
So, that's where the name
fold map comes from.

65
00:04:14.880 --> 00:04:17.700
Fold is just concat
everything into my list

66
00:04:19.050 --> 00:04:21.470
because everything in my
list has a concat method.

67
00:04:21.470 --> 00:04:26.530
And we would just end up with one thing,
we fold the structure down into one value.

68
00:04:26.530 --> 00:04:31.700
And fold and
map are not specialized to list.

69
00:04:31.700 --> 00:04:34.580
We can do this on trees,
we can do this on events stream,

70
00:04:34.580 --> 00:04:40.310
we can do this on many different data
structures that hold collections even

71
00:04:40.310 --> 00:04:43.529
either you would be able to fold
map it out of the either, right?

72
00:04:44.910 --> 00:04:48.350
So foldMap is very useful,
fold is very useful.

73
00:04:48.350 --> 00:04:52.340
Its from an interface called foldable and

74
00:04:52.340 --> 00:04:56.620
if we have monoids and
semi groups at our disposal,

75
00:04:56.620 --> 00:05:00.970
its one of the most useful methods
in functional programming.

76
00:05:03.040 --> 00:05:04.220
Okay, let's move on.

77
00:05:04.220 --> 00:05:07.690
I hope that answered your question,
did it a little bit more, okay.

78
00:05:07.690 --> 00:05:12.552
&gt;&gt; This may be an implementation
issue with lists,

79
00:05:12.552 --> 00:05:17.810
but I got hung up trying
to pass xs to list.of.

80
00:05:17.810 --> 00:05:20.700
&gt;&gt; Yes, so that's great.

81
00:05:20.700 --> 00:05:24.900
So Mutable JS does create
pointers functions.

82
00:05:24.900 --> 00:05:30.980
And I could say a list of two,
and that would put me in a list.

83
00:05:30.980 --> 00:05:35.230
But if I said list of an array of two,

84
00:05:35.230 --> 00:05:39.290
that would put a list of a list of two.

85
00:05:39.290 --> 00:05:40.560
We're lifting that in.

86
00:05:40.560 --> 00:05:45.770
And if I just call a list of two,
it's like, hey, you're not an array so,

87
00:05:45.770 --> 00:05:49.390
this would work for that case,
this would work for this case.

88
00:05:49.390 --> 00:05:52.110
So this one's coercing it's kind

89
00:05:52.110 --> 00:05:55.170
of a bunch of is kind of
probably the the proper way.

90
00:05:55.170 --> 00:05:57.700
It's just down here,
I have a list, passing into it.

91
00:05:57.700 --> 00:05:59.540
So cool.

92
00:06:00.940 --> 00:06:04.470
Anything less than zero or
any less than zero.

93
00:06:04.470 --> 00:06:07.530
So this says, okay,
we're trying to program the foldMap and

94
00:06:07.530 --> 00:06:12.270
we're trying to see,
some of its utility here like this.

95
00:06:12.270 --> 00:06:16.635
These examples are kinda toy examples,
getting the ergonomics around how to call

96
00:06:16.635 --> 00:06:19.180
foldMap and put things into types and
take them out.

97
00:06:19.180 --> 00:06:22.450
But when you start to do some
of the architectural stuff, and

98
00:06:22.450 --> 00:06:27.510
we'll see some examples following this and
build a little library, what happens here

99
00:06:27.510 --> 00:06:33.100
is that the types cascade, right?

100
00:06:33.100 --> 00:06:37.350
So you're actually combining effects and
values and making branching decisions and

101
00:06:37.350 --> 00:06:42.990
doing all this really intense
computation with a full foldMap and

102
00:06:42.990 --> 00:06:44.100
it's capturing it intuitively.

103
00:06:44.100 --> 00:06:48.990
So these are really small, easy examples,
but you can imagine this is like I've

104
00:06:48.990 --> 00:06:53.940
got a list of Async, error, filled,

105
00:06:53.940 --> 00:06:59.580
like whatever decision making values and
then we kinda go down the right path.

106
00:07:00.960 --> 00:07:03.620
So let's go ahead and write foldMap here.

107
00:07:03.620 --> 00:07:08.432
And just like before,
we're just gonna do foldMap any,

108
00:07:08.432 --> 00:07:11.350
and any.empty, does that work?

109
00:07:12.646 --> 00:07:13.460
It does work.

110
00:07:13.460 --> 00:07:15.910
What happened there?

111
00:07:15.910 --> 00:07:18.550
You get negative two.

112
00:07:18.550 --> 00:07:19.910
What is that?

113
00:07:19.910 --> 00:07:22.680
This is less than zero, sorry my bad.

114
00:07:22.680 --> 00:07:25.190
It says re-implemented that
using the any mono-id.

115
00:07:25.190 --> 00:07:26.540
Okay, that's fine.

116
00:07:26.540 --> 00:07:27.400
We're fine.

117
00:07:27.400 --> 00:07:32.560
So a fold Map and if this is less than
zero, we're gonna return true, all right.

118
00:07:32.560 --> 00:07:34.300
Any true.

119
00:07:34.300 --> 00:07:35.270
There we go.

120
00:07:35.270 --> 00:07:43.230
Otherwise any false and
we'll start with any empty.

121
00:07:44.250 --> 00:07:44.820
How does that go?

122
00:07:44.820 --> 00:07:48.080
All right now it's passing
you see how that works.

123
00:07:48.080 --> 00:07:51.600
I got confused because I was just
following my template without thinking.

124
00:07:51.600 --> 00:07:54.900
But the idea is that any doesn't
take a zero It takes a number.

125
00:07:54.900 --> 00:07:58.390
It takes a Boolean so we can do
our Boolean, then return the any.

126
00:07:58.390 --> 00:08:00.490
And then I'll just combine all of them.

127
00:08:00.490 --> 00:08:05.290
&gt;&gt; Just to make sure that I'm not making
a naive technical switch in my own code.

128
00:08:05.290 --> 00:08:09.720
I put a lambda function in and
then passed in any

129
00:08:09.720 --> 00:08:14.710
with x less than zero and
that also comes through.

130
00:08:14.710 --> 00:08:17.980
That checks but architecturally.

131
00:08:17.980 --> 00:08:18.800
&gt;&gt; Anything.

132
00:08:18.800 --> 00:08:21.640
&gt;&gt; I did the comparison inside of one any.

133
00:08:21.640 --> 00:08:22.140
&gt;&gt; Like that?

134
00:08:23.240 --> 00:08:26.230
&gt;&gt; Getting there but
you just used the x not the accumulator.

135
00:08:27.240 --> 00:08:28.730
&gt;&gt; Just using.

136
00:08:28.730 --> 00:08:33.260
&gt;&gt; Yeah, if you take out the accumulator,
put x less than 0.

137
00:08:33.260 --> 00:08:36.320
And then take out anything
after the question mark,

138
00:08:36.320 --> 00:08:38.958
because that's implicit in that operation.

139
00:08:38.958 --> 00:08:45.840
Is that, that is passing,
but am I changing anything?

140
00:08:45.840 --> 00:08:48.870
I think you've got to take
out an ACC thank you.

141
00:08:49.980 --> 00:08:50.880
That's right.

142
00:08:50.880 --> 00:08:52.008
Thank you.

143
00:08:52.008 --> 00:08:54.480
That's right, foldMap doesn't take in.

144
00:08:54.480 --> 00:08:57.090
Sorry, I had this wrong, foldMap
doesn't take an accumulator, right?

145
00:08:57.090 --> 00:08:59.970
The accumulator is now gone.

146
00:08:59.970 --> 00:09:03.360
So it's just going to hold that
accumulator in the background.

147
00:09:03.360 --> 00:09:05.920
All you're concerned about
here is just keeping one.

148
00:09:05.920 --> 00:09:08.300
So this is actually a much simpler way
to write the same thing, thank you.

149
00:09:08.300 --> 00:09:09.070
&gt;&gt; Okay, thank you.

150
00:09:09.070 --> 00:09:11.180
&gt;&gt; So what we're doing is saying.

151
00:09:11.180 --> 00:09:16.220
I need to take a list of numbers and
turn them into a list of entities and

152
00:09:16.220 --> 00:09:19.140
to turn them into a list
I'm given a function and

153
00:09:19.140 --> 00:09:21.730
now I have a list of entities,
anything less than zero, cool.

154
00:09:21.730 --> 00:09:23.860
&gt;&gt; I did it a little bit differently too,

155
00:09:23.860 --> 00:09:28.760
I called map first to turn the numbers
into Bolivians Cool, and then

156
00:09:28.760 --> 00:09:32.430
called fold map to put the Booleans in
&gt;&gt; Yeah, sounds great.

157
00:09:32.430 --> 00:09:36.800
So something like this where you map
each x, and say x less than zero.

158
00:09:36.800 --> 00:09:39.280
So another trues and falses,
and give you any here.

159
00:09:40.540 --> 00:09:41.630
Yeah, that's nice.

160
00:09:41.630 --> 00:09:44.140
It's good way to do that.

161
00:09:44.140 --> 00:09:50.079
You could also do any here and
then just fold it down.

162
00:09:50.079 --> 00:09:56.230
And so
foldMap just combines the folder and

163
00:09:56.230 --> 00:10:00.745
the map into one thing for
efficiency when it almost never matters.

164
00:10:00.745 --> 00:10:04.450
[LAUGH] Sorry I'm never gonna
stop saying that [LAUGH].

165
00:10:04.450 --> 00:10:06.740
Okay, so let's do this.

166
00:10:08.110 --> 00:10:09.760
We have the max.

167
00:10:09.760 --> 00:10:18.120
So there's two more left here we'll get
through these, max is pretty sweet monoid.

168
00:10:18.120 --> 00:10:21.230
We can actually look at this one yet,
but we start with negative infinity.

169
00:10:21.230 --> 00:10:25.080
My favorite value and
we say, all right, well,

170
00:10:25.080 --> 00:10:27.070
the accumulator greater than x or not.

171
00:10:27.070 --> 00:10:29.370
So it says rewrite it with a max monoid.

172
00:10:29.370 --> 00:10:34.250
And it says it says to actually make
a max monoid using these templates above.

173
00:10:34.250 --> 00:10:39.070
I'm just going to copy this,
bring it down here into this part.

174
00:10:39.070 --> 00:10:40.190
Did anybody get this one?

175
00:10:40.190 --> 00:10:41.330
This one's a little bit tricky.

176
00:10:41.330 --> 00:10:44.300
Didn't really feel like they
got stuck on the shortcut.

177
00:10:46.330 --> 00:10:51.950
It’s really just a matter of swapping
out this operator with the max operator.

178
00:10:51.950 --> 00:10:59.100
We don’t need the, I guess we can do
the max x negative infinity, right?

179
00:10:59.100 --> 00:11:02.980
So that’s the empty value over here
corresponding with the second argument.

180
00:11:02.980 --> 00:11:06.040
This is corresponding to the first
argument where we're saying is it greater

181
00:11:06.040 --> 00:11:10.540
than x or actually looks like
this is what we need to do.

182
00:11:10.540 --> 00:11:12.410
We can just grab in.

183
00:11:12.410 --> 00:11:15.670
We'd say, A, is x greater than o x?

184
00:11:15.670 --> 00:11:16.990
Well, then we'll keep x.

185
00:11:16.990 --> 00:11:19.110
Otherwise we'll keep o x.

186
00:11:19.110 --> 00:11:22.110
Meaning the other other Mac's
that we're trying to compare to.

187
00:11:22.110 --> 00:11:27.107
And then we'll go ahead and
rewrite this as

188
00:11:27.107 --> 00:11:31.910
a foldMmap with Max and

189
00:11:31.910 --> 00:11:36.560
Max, empty passing.

190
00:11:36.560 --> 00:11:39.873
Yeah, we're passing.

191
00:11:39.873 --> 00:11:41.740
So, questions on this one?

192
00:11:41.740 --> 00:11:45.500
This one's a little bit you know,
you're making a monoid

193
00:11:45.500 --> 00:11:49.440
kind of following the pattern above but
this was a little different, right?

194
00:11:49.440 --> 00:11:52.800
I was initially like, let's swap out
the operator but that's not how it works.

195
00:11:52.800 --> 00:11:54.720
You're making a choice here you
have to choose one or the other.

196
00:11:56.470 --> 00:11:59.860
So the greater than or
less than just give me a Boolean, and so

197
00:11:59.860 --> 00:12:01.920
I would have had a problem.

198
00:12:03.980 --> 00:12:09.085
Finally, we're gonna write concat here for
tuple or tuple however, you say it.

199
00:12:10.715 --> 00:12:13.135
And this one's kinda cool.

200
00:12:13.135 --> 00:12:17.695
Just like we said functors and
other, actually,

201
00:12:17.695 --> 00:12:21.625
this is a functor if we write map on it,
which tap to pick one to map over.

202
00:12:21.625 --> 00:12:23.525
It's bi-functor if you
want to map over both.

203
00:12:23.525 --> 00:12:28.315
But the point is,
we want to make tuple as a type into

204
00:12:28.315 --> 00:12:33.670
a monoid or
semi-group by giving it a concat method.

205
00:12:33.670 --> 00:12:38.712
So if I have another tuple.

206
00:12:38.712 --> 00:12:43.769
I could say one concat well concat

207
00:12:43.769 --> 00:12:47.760
my one with 0.1 right?

208
00:12:47.760 --> 00:12:49.420
We'll keep it in the table.

209
00:12:49.420 --> 00:12:51.230
It's always closed, right?

210
00:12:51.230 --> 00:12:55.190
And then we have my to look at it
concat it with the other ones.

211
00:12:55.190 --> 00:13:00.250
Two and fine, I'm okay.

212
00:13:00.250 --> 00:13:02.637
Code pen you don't have to warn me,
got it.

213
00:13:02.637 --> 00:13:08.850
[LAUGH] I feel ike a surly teenager and
Code pen is my parent.

214
00:13:08.850 --> 00:13:15.390
So this is how that works,
we're saying, I'm holding two values.

215
00:13:15.390 --> 00:13:20.350
And if I can concat everything I'm
holding, then I, myself can be concated.

216
00:13:20.350 --> 00:13:25.350
And that just awaits holds, so
I have a type that's entirely built of

217
00:13:25.350 --> 00:13:30.255
concatable things, I can just concat all
the stuff I'm holding and there we are.

218
00:13:30.255 --> 00:13:33.345
So now I can put anything into a tuple or
a tuple.

219
00:13:33.345 --> 00:13:35.575
I haven't fixed which way
I'm gonna say it yet.

220
00:13:35.575 --> 00:13:39.095
So both [LAUGH] which is ironic
because it holds two things.

