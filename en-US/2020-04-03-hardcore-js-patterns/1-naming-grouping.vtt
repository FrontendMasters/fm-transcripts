WEBVTT

1
00:00:00.140 --> 00:00:01.610
Here's a user class.

2
00:00:01.610 --> 00:00:05.420
We have a constructor,
and we've got first name,

3
00:00:05.420 --> 00:00:08.900
last name,
makes a full name down there, cool.

4
00:00:08.900 --> 00:00:09.700
Job well done.

5
00:00:09.700 --> 00:00:13.397
We have a user and it works.

6
00:00:13.397 --> 00:00:15.060
We tried a different way.

7
00:00:15.060 --> 00:00:17.050
We have a user data type.

8
00:00:17.050 --> 00:00:18.530
And we have full name.

9
00:00:18.530 --> 00:00:21.406
This time we're using joins, same thing.

10
00:00:21.406 --> 00:00:25.240
But down there,
works exactly the same as it did before.

11
00:00:26.320 --> 00:00:32.530
There's a difference here,
we can actually rename

12
00:00:32.530 --> 00:00:39.120
this full name here where we join the
first and last to join with space, right?

13
00:00:39.120 --> 00:00:43.630
Now, let's try to join the firstName and
the lastName with a space.

14
00:00:43.630 --> 00:00:47.640
And all of the sudden,
emerges these properties.

15
00:00:47.640 --> 00:00:51.794
If we start to generalize,
if we start to try to work with

16
00:00:53.575 --> 00:00:58.595
these properties, we end up noticing that
joinWithSpace is associative down there.

17
00:00:58.595 --> 00:01:01.425
It doesn't matter how I group them.

18
00:01:01.425 --> 00:01:05.600
Therefore, I can join as many as I want,
and I end up with these

19
00:01:05.600 --> 00:01:10.300
roles of composition, which is nice I
didn't have that with for full name.

20
00:01:10.300 --> 00:01:16.696
In fact in joinWitSpaces,
reusable utility now that's not buried and

21
00:01:16.696 --> 00:01:22.036
stuck and tied to an object to
be rewritten again and again.

22
00:01:22.036 --> 00:01:25.179
Or you can take it a step further and
say joinWithSpaces,

23
00:01:25.179 --> 00:01:27.155
we're going to take any joinable.

24
00:01:27.155 --> 00:01:29.300
So we're going to program
to the interface joinable.

25
00:01:29.300 --> 00:01:32.330
And then we'll pass in an array,
which is joinable.

26
00:01:32.330 --> 00:01:35.590
But it could be other things,
could be a tree,

27
00:01:35.590 --> 00:01:38.362
could be objects with keys and values.

28
00:01:38.362 --> 00:01:42.720
So we'll pass in a joinable and
there we get joinWithSpaces again.

29
00:01:44.320 --> 00:01:48.500
And this is the same
thing as encapsulation.

30
00:01:48.500 --> 00:01:53.168
So the only thing joinWithSpaces
can do is called join.

31
00:01:53.168 --> 00:01:55.655
It knows nothing else.

32
00:01:55.655 --> 00:02:00.434
It gets a joinable it can't
decide to look at the object.

33
00:02:00.434 --> 00:02:05.552
And if you think back to that user class
where we had, let me go back up here,

34
00:02:05.552 --> 00:02:10.220
we have the entire user at our
disposal and all the other methods.

35
00:02:10.220 --> 00:02:12.070
We have this in here.

36
00:02:12.070 --> 00:02:15.449
So we can do a lot of stuff.

37
00:02:15.449 --> 00:02:20.310
But over here, there's literally one
thing we can do, we can call join.

38
00:02:20.310 --> 00:02:21.115
And that's it.

39
00:02:21.115 --> 00:02:25.260
So it's really just the argument
that makes this special.

40
00:02:25.260 --> 00:02:30.230
To take it a step further, if we have
the identity function, it takes some a and

41
00:02:30.230 --> 00:02:33.170
returns it back.

42
00:02:33.170 --> 00:02:35.267
There's nothing it can do with that value.

43
00:02:35.267 --> 00:02:36.600
It knows nothing about it.

44
00:02:36.600 --> 00:02:37.815
It can't call any methods.

45
00:02:37.815 --> 00:02:40.184
It can't do anything to it.

46
00:02:40.184 --> 00:02:44.115
And so this is how we get encapsulation
with functional programming.

47
00:02:44.115 --> 00:02:45.383
Does anybody have any
questions on that one?

48
00:02:45.383 --> 00:02:47.110
Cuz it's a weird concept.

49
00:02:47.110 --> 00:02:49.337
The encapsulation is
the dual of abstraction and

50
00:02:49.337 --> 00:02:53.151
this is kind of the abstraction side of it
is that you don't know anything about it.

51
00:02:53.151 --> 00:02:54.897
So I can't actually touch it.

52
00:02:54.897 --> 00:02:57.065
So therefore I get information on it.

53
00:02:57.065 --> 00:02:59.083
&gt;&gt; What's the value of that function?

54
00:02:59.083 --> 00:03:04.990
&gt;&gt; If we jump into Run dev.

55
00:03:04.990 --> 00:03:09.975
So, let's see if I have {Either}

56
00:03:09.975 --> 00:03:13.971
= require('types').

57
00:03:13.971 --> 00:03:18.597
Cool, let's first say Either.of(2).fold.

58
00:03:18.597 --> 00:03:23.129
Let's go ahead and make identity.

59
00:03:23.129 --> 00:03:26.430
And it takes an a, returns an a.

60
00:03:26.430 --> 00:03:30.298
I can actually fold out
the value by saying I have

61
00:03:30.298 --> 00:03:35.243
a function that takes that value and
spits it back out at you.

62
00:03:35.243 --> 00:03:39.095
Instead of having to write a handler
that takes the number two and

63
00:03:39.095 --> 00:03:43.290
then returns the number two,
that's the same as this, right?

64
00:03:43.290 --> 00:03:46.877
I can just call identity.

65
00:03:46.877 --> 00:03:48.969
That will come in handy more and

66
00:03:48.969 --> 00:03:52.994
more throughout your functional
programming career, but

67
00:03:52.994 --> 00:03:58.643
it's it's a little weird to see off the
bat but eventually it it's a good utility.

68
00:03:58.643 --> 00:03:59.570
Yeah, what's up?

69
00:03:59.570 --> 00:04:04.791
&gt;&gt; Would it be fair to say that a lot of
things in functional programming rely

70
00:04:04.791 --> 00:04:09.756
on the identity mode, but
we're as programmers not gonna be putting

71
00:04:09.756 --> 00:04:14.568
it to use as frequently as it's
used by the structures that we use?

72
00:04:14.568 --> 00:04:16.085
&gt;&gt; That's fair to say.

73
00:04:16.085 --> 00:04:20.055
We'll actually see that in mono
transformers supplying the identity

74
00:04:20.055 --> 00:04:23.745
functor to a transformer which
recovers the original type.

75
00:04:23.745 --> 00:04:29.164
It's a great utility to have and
it's founded in theory.

76
00:04:29.164 --> 00:04:36.440
We have composition which takes f and
g, and we have an identity.

77
00:04:36.440 --> 00:04:40.410
And actually, it turns out that those
are the two things that you need to define

78
00:04:40.410 --> 00:04:42.930
a category, and category theory and
they're pervasive.

79
00:04:42.930 --> 00:04:47.700
And we'll see some of that in a minute
here when we talk about monoids.

80
00:04:47.700 --> 00:04:51.982
Identity on functions just
takes a value transfer.

81
00:04:51.982 --> 00:04:58.260
Let's go to, okay, so
we want highly generalized functions.

82
00:04:58.260 --> 00:05:01.870
That's not a hard rule.

83
00:05:01.870 --> 00:05:06.570
It's just a good guiding principle.

84
00:05:06.570 --> 00:05:11.030
To say I'm just going to keep abstracting
away until I'm programming to the most

85
00:05:11.030 --> 00:05:12.800
minimal interface.

86
00:05:12.800 --> 00:05:16.990
Then I get the maximum reuse,
and I get information hiding.

87
00:05:16.990 --> 00:05:20.920
And if I change my program here there,
it's not gonna ripple.

88
00:05:20.920 --> 00:05:24.660
So we keep working on these higher
highly generalized functions

89
00:05:24.660 --> 00:05:26.370
until we hit a nice balance.

