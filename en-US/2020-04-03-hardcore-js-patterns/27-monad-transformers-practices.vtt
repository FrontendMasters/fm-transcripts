WEBVTT

1
00:00:00.000 --> 00:00:02.232
Let's go through these exercises.

2
00:00:02.232 --> 00:00:05.677
And we'll talk about free monads, lenses
and getting to app building with whatever

3
00:00:05.677 --> 00:00:07.730
time we have left for
a couple of apps we can build.

4
00:00:08.810 --> 00:00:13.300
So I'm just gonna go through this a little
quickly but definitely stop me and

5
00:00:13.300 --> 00:00:14.760
I'll answer any questions as we go.

6
00:00:16.500 --> 00:00:18.990
So we use function either ask.

7
00:00:18.990 --> 00:00:20.270
Since we're in the function type,

8
00:00:20.270 --> 00:00:25.060
we have a ask method we saw earlier
to get at this configuration.

9
00:00:25.060 --> 00:00:28.000
And then return the port, okay?

10
00:00:28.000 --> 00:00:34.310
So I'll say function either.ask, and
that is an actual function type.

11
00:00:34.310 --> 00:00:40.111
So now I can map over that and
get to the config, get to config.port.

12
00:00:41.230 --> 00:00:45.180
And it works, cool.

13
00:00:45.180 --> 00:00:48.704
Not too hard, but
I just pull the config out of thin air.

14
00:00:48.704 --> 00:00:50.147
It's pretty sweet.

15
00:00:50.147 --> 00:00:54.282
Let's take it a little further.

16
00:00:54.282 --> 00:00:59.730
Now it says, use example one to get
the port and connect to the db.

17
00:00:59.730 --> 00:01:03.770
And then we're gonna find
whatever this idea is.

18
00:01:03.770 --> 00:01:08.850
So, just use example one here,
call that, it'll give me

19
00:01:08.850 --> 00:01:14.355
the port to get the- so this,
of course is not the port number.

20
00:01:14.355 --> 00:01:17.873
I shouldn't say of course, but this is
still inside a function either, right?

21
00:01:17.873 --> 00:01:22.900
We just mapped it and
changed the value inside to hold the port.

22
00:01:22.900 --> 00:01:24.720
So we have a function
either holding a port.

23
00:01:26.010 --> 00:01:29.269
So we call that to map
over that to get the port.

24
00:01:29.269 --> 00:01:33.760
Neat, and then from there,
what do we have to do?

25
00:01:35.467 --> 00:01:41.823
We want to connect to the db, so
we have connect to db, that takes a port.

26
00:01:41.823 --> 00:01:44.500
And then that returns me in either.

27
00:01:47.320 --> 00:01:52.480
Of the fakeDb or
left to failed to connect.

28
00:01:53.680 --> 00:02:00.327
I have a function either, and I'm trying
to map over that and return an either.

29
00:02:00.327 --> 00:02:03.092
So then I'll have
a function either either.

30
00:02:03.092 --> 00:02:07.620
So we don't wanna do that,
we wanna chain and then we wanna lift,

31
00:02:10.374 --> 00:02:16.680
This either into the function either,
see if that's going all right?

32
00:02:16.680 --> 00:02:19.520
And the last thing is find the id.

33
00:02:19.520 --> 00:02:25.112
We have the id, we have a fakeDb.

34
00:02:25.112 --> 00:02:28.596
Now that we have that,
we should have a db.

35
00:02:28.596 --> 00:02:34.108
And then, we wanna find db.find(id).

36
00:02:34.108 --> 00:02:35.653
Crap, it's got another either.

37
00:02:35.653 --> 00:02:39.402
[LAUGH] Part of the chain.

38
00:02:39.402 --> 00:02:42.005
And we'll have to lift.

39
00:02:42.005 --> 00:02:43.709
Let's see if that did it.

40
00:02:43.709 --> 00:02:45.744
Hey, that passed.

41
00:02:45.744 --> 00:02:49.340
Are people seeing why I don't
like monad transformers?

42
00:02:49.340 --> 00:02:52.777
[LAUGH] But they're everywhere and

43
00:02:52.777 --> 00:02:57.050
they're- perhaps they make more sense.

44
00:02:57.050 --> 00:03:04.034
I might be making an unfair judgement
based on this stuff is fine.

45
00:03:04.034 --> 00:03:07.344
Unfair judgement based
on factor in Javascript.

46
00:03:07.344 --> 00:03:11.633
And we don't have a lot of type help and
stuff like that,

47
00:03:11.633 --> 00:03:15.211
but they're pretty
painful in any language.

48
00:03:15.211 --> 00:03:18.744
Exercise two.

49
00:03:18.744 --> 00:03:20.376
Let's go into ReaderTask, fun.

50
00:03:20.376 --> 00:03:22.875
We have a function, holding a task.

51
00:03:22.875 --> 00:03:25.840
I just called it reader here because
that's usually what you call function.

52
00:03:27.875 --> 00:03:35.573
And we're gonna ask again to
get the server for the postUrl.

53
00:03:35.573 --> 00:03:39.618
And get the server
variable from ReaderTask.

54
00:03:39.618 --> 00:03:41.263
Boy, what's even happening here?

55
00:03:41.263 --> 00:03:44.680
[LAUGH] Really sets us up for
success y'all.

56
00:03:44.680 --> 00:03:47.883
So it looks like server is not defined.

57
00:03:47.883 --> 00:03:51.020
We need to get the server.

58
00:03:51.020 --> 00:03:56.512
So I call ReaderTask.ask, and
we'll chain over that to get the server.

59
00:03:58.564 --> 00:04:00.840
And I could have mapped.

60
00:04:00.840 --> 00:04:04.870
But I know right off the bat
that this thing inside,

61
00:04:04.870 --> 00:04:08.840
it's doing a fetch, it's gonna be a task.

62
00:04:08.840 --> 00:04:13.031
So I'll probably have to just loop
through ReaderTask that lift this thing.

63
00:04:13.031 --> 00:04:13.787
Does that work?

64
00:04:13.787 --> 00:04:18.493
There it is, cool, so,
that is a little bit of a- we're talking

65
00:04:18.493 --> 00:04:21.747
about getting stuff out
of the reader monad,

66
00:04:21.747 --> 00:04:25.959
we're trying to put stuff in and
we're staying shallow.

67
00:04:25.959 --> 00:04:31.120
So it's not as bad here
as what we saw over here.

68
00:04:31.120 --> 00:04:35.037
But I just wanna get a little bit
of a feel to use these things.

69
00:04:35.037 --> 00:04:39.980
And so we can use this as a tool to
build apps when we have very rigid-

70
00:04:39.980 --> 00:04:43.158
there's another one, look at that [LAUGH].

71
00:04:43.158 --> 00:04:44.495
Looks like it's already passing.

72
00:04:46.344 --> 00:04:52.390
In the interest of time, I don't wanna
do this, I just skipped this one.

73
00:04:52.390 --> 00:04:55.060
I could post the answer later.

74
00:04:55.060 --> 00:04:59.200
But what this is trying to
explain is what we did together.

75
00:04:59.200 --> 00:05:01.620
It's got these either posts,
then we're folding.

76
00:05:01.620 --> 00:05:06.876
And what we'd rather do is use Api2,
which returns us a TaskEither and

77
00:05:06.876 --> 00:05:09.864
it would just clean this whole thing up.

78
00:05:09.864 --> 00:05:13.261
So it shows where they actually shine.

79
00:05:13.261 --> 00:05:14.834
Let's do it, why not?

80
00:05:14.834 --> 00:05:17.540
[LAUGH] You pulled my leg.

81
00:05:17.540 --> 00:05:18.960
So here we just get the post.

82
00:05:18.960 --> 00:05:22.375
Wait, does that dot sting make
sense [LAUGH] in this context?

83
00:05:22.375 --> 00:05:27.566
[LAUGH] Made me pull my arm.

84
00:05:27.566 --> 00:05:35.140
And we have Api2 get post.

85
00:05:35.140 --> 00:05:37.530
And then we get a post out.

86
00:05:37.530 --> 00:05:43.562
Instead of all this, we could just get
the post title and be done with it.

87
00:05:43.562 --> 00:05:45.212
Does that work?

88
00:05:45.212 --> 00:05:46.677
It works, cool.

89
00:05:46.677 --> 00:05:51.856
So you can see Api2 is much nicer because
as I map and chain, I get at the post or

90
00:05:51.856 --> 00:05:56.830
whatever it's holding,
not the intermediate types in between.

91
00:05:56.830 --> 00:06:00.320
And if you do have a type,
like a database thing and

92
00:06:00.320 --> 00:06:04.930
you make a TaskEither, they do have
a place where they're not so bad.

93
00:06:04.930 --> 00:06:07.630
It's really when you start to have four or
five types, you're returning different

94
00:06:07.630 --> 00:06:09.830
types and you have to put them
in the right slots and so on.

