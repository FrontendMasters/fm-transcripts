WEBVTT

1
00:00:00.020 --> 00:00:02.210
Let's do a different type of function.

2
00:00:02.210 --> 00:00:07.369
Get rid of this stuff and focus on,
what if we would rather instead of

3
00:00:07.369 --> 00:00:12.710
combining functions by running both and
then combining the results,

4
00:00:12.710 --> 00:00:18.073
which is kind of the normal intuition
behind concatenating factors.

5
00:00:18.073 --> 00:00:23.295
We can do is make a composition like
function composition as concatenation.

6
00:00:23.295 --> 00:00:30.191
So I have like a thing where I want
to go to upper and exclaim, right?

7
00:00:30.191 --> 00:00:35.351
And I just wanna like fold map that and
I want to combine.

8
00:00:35.351 --> 00:00:37.613
I want it to do both of those things.

9
00:00:37.613 --> 00:00:39.345
So let's do that.

10
00:00:39.345 --> 00:00:42.204
And for that,
we're gonna make a type called Endo.

11
00:00:42.204 --> 00:00:47.819
That was if anybody saw my
Snoop Dogg slide earlier,

12
00:00:47.819 --> 00:00:51.297
but [LAUGH] we have Endo.empty.

13
00:00:51.297 --> 00:00:53.910
All right, so what would that do?

14
00:00:53.910 --> 00:00:59.430
That would provide me a function that
when I run it with my string hello,

15
00:00:59.430 --> 00:01:03.450
I should get HELLO all capital.

16
00:01:03.450 --> 00:01:05.745
It's got a first to operate and
then explain.

17
00:01:05.745 --> 00:01:09.000
It;s just gonna run through a pipeline
of functions and new composition.

18
00:01:09.000 --> 00:01:14.590
Now, the reason it's called
Endo which is weird is because

19
00:01:14.590 --> 00:01:21.260
this only works with endomorphisms
meaning it only works from types a to a,

20
00:01:21.260 --> 00:01:25.890
in this case string to string or
task to task or

21
00:01:25.890 --> 00:01:30.290
whatever to whatever it has this have
the same type of input as output.

22
00:01:30.290 --> 00:01:34.570
And the reason for
that is because now we know we can just

23
00:01:34.570 --> 00:01:38.850
compose them without running into any type
problems where they don't compose [LAUGH].

24
00:01:38.850 --> 00:01:42.250
So this just kinda skirts that and says,
okay, if they're always the type, same

25
00:01:42.250 --> 00:01:45.860
type of input is output, we'll just thread
it through and they'll always compose.

26
00:01:45.860 --> 00:01:47.259
Let's write Endo.

27
00:01:50.665 --> 00:01:52.395
Doo doo doo doo doo doo.

28
00:01:52.395 --> 00:01:57.179
And if we have time we'll
talk about one more.

29
00:01:57.179 --> 00:02:01.260
But this should be fine for now.

30
00:02:01.260 --> 00:02:07.828
So we have Endo, let's not worry
about mapping chain and anything.

31
00:02:07.828 --> 00:02:12.281
In fact, you can't map Endo, endo is a
function from string to string or a day or

32
00:02:12.281 --> 00:02:15.320
into int or
whatever it's always the same type.

33
00:02:15.320 --> 00:02:19.840
If I tried to change the second type with
map if I returned my value in the map over

34
00:02:19.840 --> 00:02:23.370
it then it would break everything I
would have it would not be Endo anymore.

35
00:02:23.370 --> 00:02:24.605
So it is not a functor.

36
00:02:27.311 --> 00:02:30.114
I do have to talk about
one thing after this.

37
00:02:30.114 --> 00:02:32.822
Don't let me forget.

38
00:02:32.822 --> 00:02:39.090
[LAUGH] We're talking about contra map and
contravariant functors.

39
00:02:39.090 --> 00:02:43.150
So, we don't have map on Endo, but
we can say, just like the other ones we'll

40
00:02:43.150 --> 00:02:48.300
say with Endo and x instead of running
both and concatenate the results.

41
00:02:48.300 --> 00:02:54.190
I will run the other one and then run
mine with the result of the other one.

42
00:02:54.190 --> 00:02:57.090
Cool.
We'll have to throw this

43
00:02:57.090 --> 00:02:59.425
in a little list Wow.

44
00:02:59.425 --> 00:03:05.086
[LAUGH] .List list from
immutable j s are extensions and

45
00:03:05.086 --> 00:03:10.995
we'll foldMap down Endo,
we don't have Endo.empty,

46
00:03:10.995 --> 00:03:14.700
what would Endo.empty look like?

47
00:03:14.700 --> 00:03:18.660
We have an Endo, what's next?

48
00:03:20.560 --> 00:03:23.010
X be Id, does that work?

49
00:03:23.010 --> 00:03:23.510
So what happens?

50
00:03:25.059 --> 00:03:29.295
[SOUND] Op, and I'm gonna show you
the result, but also it should say Endo,

51
00:03:29.295 --> 00:03:31.460
it should have a string in it, right?

52
00:03:31.460 --> 00:03:33.588
Do you do that?

53
00:03:33.588 --> 00:03:37.070
There we go.

54
00:03:37.070 --> 00:03:37.625
That looks better.

55
00:03:37.625 --> 00:03:41.090
[LAUGH] All right, so we have a result.

56
00:03:41.090 --> 00:03:43.650
And we'll fold map this thing down.

57
00:03:44.840 --> 00:03:48.510
And then we'll run it.

58
00:03:48.510 --> 00:03:49.600
Yeah, right down here.

59
00:03:51.840 --> 00:03:53.540
And we'll console that log.

60
00:03:53.540 --> 00:03:54.040
The result.

61
00:03:56.391 --> 00:04:00.821
Don't know how to do this efficiently and
we get nothing.

62
00:04:00.821 --> 00:04:03.060
Goodness, that's not good.

63
00:04:03.060 --> 00:04:04.690
What's happening here?

64
00:04:04.690 --> 00:04:09.210
So the original empty,
I'm suspecting is our problem.

65
00:04:10.660 --> 00:04:13.820
Let's go ahead and focus on that.

66
00:04:13.820 --> 00:04:18.930
So it takes an empty string original
Endo takes an empty string.

67
00:04:18.930 --> 00:04:22.430
And then when we run it on this thing,

68
00:04:22.430 --> 00:04:26.130
I think it ignores its argument right
here and just returns an empty string.

69
00:04:26.130 --> 00:04:29.660
So perhaps, that was wrong and

70
00:04:29.660 --> 00:04:33.480
we'll say empty takes this and
we'll see what happens there, okay.

71
00:04:33.480 --> 00:04:36.104
That works.
I have to clarify this one and

72
00:04:36.104 --> 00:04:42.019
come back to you because I'm getting
confused, but at least it's working.

73
00:04:42.019 --> 00:04:47.750
So the point here is that we're
combining all these by composition.

74
00:04:47.750 --> 00:04:51.610
And it kind of doesn't matter that we're
running the other one inside ours are ours

75
00:04:51.610 --> 00:04:52.810
inside the other.

76
00:04:52.810 --> 00:04:54.970
Like if we did it this way.

77
00:04:57.430 --> 00:05:00.160
The order kinda doesn't matter.

78
00:05:00.160 --> 00:05:03.530
But then we go back to our empty method,
right?

79
00:05:04.820 --> 00:05:09.410
Where we do that I'm trying to make of
that's why empty takes no arguments.

80
00:05:09.410 --> 00:05:10.380
That makes a lot of sense.

81
00:05:10.380 --> 00:05:11.450
There we go.
So that clears that up.

