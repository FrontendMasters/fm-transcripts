WEBVTT

1
00:00:00.275 --> 00:00:05.053
Now that we've defined a few of these,
I'm gonna go

2
00:00:05.053 --> 00:00:10.171
a little further and
explain how this works as a monoid.

3
00:00:10.171 --> 00:00:12.389
And then we'll see how
it applies to functors.

4
00:00:12.389 --> 00:00:15.999
And then we'll do some exercises and
build a little library on them.

5
00:00:15.999 --> 00:00:21.154
But monoids are just a semigroup,

6
00:00:21.154 --> 00:00:24.353
with an identity, so

7
00:00:24.353 --> 00:00:29.507
a monoid is a semigroup, monoid,

8
00:00:29.507 --> 00:00:35.397
semigroup, plus an identity, okay?

9
00:00:35.397 --> 00:00:38.488
And you asked about the identity function.

10
00:00:38.488 --> 00:00:40.439
Here's an identity function.

11
00:00:40.439 --> 00:00:43.354
We're going to call this one
empty in the interface, but

12
00:00:43.354 --> 00:00:45.126
it's just an identity function.

13
00:00:45.126 --> 00:00:50.381
So products,
if I call it empty will be one.

14
00:00:50.381 --> 00:00:51.332
And the reason for

15
00:00:51.332 --> 00:00:55.017
that is if I multiply anything plus
one I get that thing back, right?

16
00:00:55.017 --> 00:00:57.782
I have to put it in a product.

17
00:00:57.782 --> 00:00:58.765
There we go.

18
00:00:58.765 --> 00:01:01.807
Let's see how that works down here.

19
00:01:01.807 --> 00:01:07.283
So if I have my products,
concat products 10,

20
00:01:07.283 --> 00:01:11.032
I'm gonna get product 10 out.

21
00:01:11.032 --> 00:01:14.996
It's just an identity function.

22
00:01:14.996 --> 00:01:22.411
And so instead of being specialized to 1,
I can say product.empty.

23
00:01:22.411 --> 00:01:25.342
Now, I can concat that with 10 and

24
00:01:25.342 --> 00:01:30.043
I am programming to an interface,
not a specific value.

25
00:01:30.043 --> 00:01:31.387
Let's do the same thing for sum.

26
00:01:31.387 --> 00:01:33.986
What's the identity for sum?

27
00:01:33.986 --> 00:01:39.763
I'll say sums.empty function
is sum of zero, right?

28
00:01:39.763 --> 00:01:41.046
So that'll be the identity.

29
00:01:41.046 --> 00:01:43.390
If I concat that with any other sum,
I get zero.

30
00:01:43.390 --> 00:01:44.534
Why does this matter?

31
00:01:44.534 --> 00:01:48.468
Does anybody have any guesses on
why the identity matters here?

32
00:01:48.468 --> 00:01:49.798
&gt;&gt; Null values.

33
00:01:49.798 --> 00:01:51.449
&gt;&gt; That's exactly right.

34
00:01:51.449 --> 00:01:55.032
There's some cool stuff with Kaylee's
theorem where you can partially apply

35
00:01:55.032 --> 00:01:58.575
everything with his identity and
get these cool lazy functions and whatnot.

36
00:01:58.575 --> 00:02:04.975
But mainly In our day to day, if I was to
run through a list and reduce it down,

37
00:02:04.975 --> 00:02:11.082
if I don't have a starting value,
I'm gonna get a null or an undefined.

38
00:02:11.082 --> 00:02:16.456
But if I have a starting value,
these these two correspond to reduce.

39
00:02:16.456 --> 00:02:18.063
So let's take a look at that.

40
00:02:18.063 --> 00:02:21.461
So we have a list of 1, 2, 3, 4, 5.

41
00:02:21.461 --> 00:02:24.346
And we reduce that.

42
00:02:24.346 --> 00:02:28.764
And we get the accumulator and
each number.

43
00:02:28.764 --> 00:02:34.162
And let's just go ahead and
say I will put the number in a sum.

44
00:02:34.162 --> 00:02:36.682
And I'm going to concat that with,

45
00:02:36.682 --> 00:02:40.637
I'll start with the accumulator
concat number there.

46
00:02:40.637 --> 00:02:42.073
Okay, great.

47
00:02:42.073 --> 00:02:48.581
So what's gonna happen here is hopefully,
we'll get the sum of all these numbers.

48
00:02:48.581 --> 00:02:51.465
And let's run that.

49
00:02:51.465 --> 00:02:52.652
All right, we won't.

50
00:02:52.652 --> 00:02:56.263
[LAUGH] See at.concat is not a function.

51
00:02:56.263 --> 00:02:58.302
All right, I guess it doesn't start.

52
00:02:58.302 --> 00:03:01.629
&gt;&gt; You gottta put sum as
the secondary argument and reduce.

53
00:03:01.629 --> 00:03:03.664
Yeah, it's not gonna work.

54
00:03:03.664 --> 00:03:05.331
Well, let's do it.

55
00:03:05.331 --> 00:03:06.235
Let's put them all over here.

56
00:03:06.235 --> 00:03:08.555
Let's just map them into a sum.

57
00:03:08.555 --> 00:03:10.320
And then we'll reduce them all.

58
00:03:10.320 --> 00:03:11.852
That makes a lot of sense.

59
00:03:11.852 --> 00:03:15.535
Okay, so now we have a bunch of sums.

60
00:03:15.535 --> 00:03:17.066
Everybody's happy.

61
00:03:17.066 --> 00:03:21.866
But we'll see here that we're not
giving reduce its empty value.

62
00:03:21.866 --> 00:03:24.287
We're just giving it a list.

63
00:03:24.287 --> 00:03:26.407
So a list of sums in this case.

64
00:03:26.407 --> 00:03:27.655
And we get 15.

65
00:03:27.655 --> 00:03:32.242
But if we give it an empty list,
what's gonna happen?

66
00:03:32.242 --> 00:03:35.631
It's just gonna blow up.

67
00:03:35.631 --> 00:03:42.367
And the reason for that is reduce of
an empty array with no initial value.

68
00:03:42.367 --> 00:03:43.787
So we have nothing to return.

69
00:03:43.787 --> 00:03:46.420
If we give it a list of nothing,
we have nothing in return.

70
00:03:46.420 --> 00:03:50.008
But if we give it a list,
we start with sum.empty.

71
00:03:50.008 --> 00:03:50.652
There we go.

72
00:03:50.652 --> 00:03:53.548
We can actually get 0 back.

73
00:03:53.548 --> 00:03:59.413
So we have a way to proceed in our program
with an initial value that says okay,

74
00:03:59.413 --> 00:04:03.836
even though we didn't have any
data to process right now,

75
00:04:03.836 --> 00:04:07.199
we can still provide
you some kind of value.

76
00:04:07.199 --> 00:04:08.472
And you can continue on.

77
00:04:08.472 --> 00:04:11.586
So just blowing up being
like here's a null.

78
00:04:11.586 --> 00:04:16.568
So, one thing we can do here,
this actually happens

79
00:04:16.568 --> 00:04:21.563
quite a bit is that we want
to put stuff into a monoid.

80
00:04:21.563 --> 00:04:23.279
And then call concat.

81
00:04:23.279 --> 00:04:24.543
And start with empty.

82
00:04:24.543 --> 00:04:28.823
This whole thing is almost redundant.

83
00:04:28.823 --> 00:04:31.931
This is actually how I would
sum up a whole list, right?

84
00:04:31.931 --> 00:04:35.043
Here's how I would get
the products of a whole list.

85
00:04:35.043 --> 00:04:36.928
I just put it all into a product.

86
00:04:36.928 --> 00:04:38.874
And then I'd run through a list and
get the product of them.

87
00:04:38.874 --> 00:04:42.942
What if I have a bunch of true,
false, true?

88
00:04:42.942 --> 00:04:46.791
Let me break this onto the next line so
you can see what's going on.

89
00:04:46.791 --> 00:04:50.022
But all right, let's go ahead and

90
00:04:50.022 --> 00:04:55.159
put those into an any and
say hey does any have an empty?

91
00:04:55.159 --> 00:04:56.549
Let's see.

92
00:04:56.549 --> 00:04:58.946
What would act as identity for any?

93
00:04:58.946 --> 00:05:03.317
If I said any true concat any false,

94
00:05:03.317 --> 00:05:06.826
that would return any true.

95
00:05:06.826 --> 00:05:10.409
All right, so that acts kind of like
an identity on the right side, any false.

96
00:05:10.409 --> 00:05:16.655
If I said any false concat any true that
would be any true on the right side.

97
00:05:16.655 --> 00:05:21.129
Okay, so what about any false any false?

98
00:05:21.129 --> 00:05:22.238
&gt;&gt; That would be false.

99
00:05:22.238 --> 00:05:23.192
&gt;&gt; That would be false.

100
00:05:23.192 --> 00:05:27.884
Okay, so therefore, if this was

101
00:05:27.884 --> 00:05:33.089
empty I would get any false, false.

102
00:05:33.089 --> 00:05:35.159
Yep, true and false.

103
00:05:35.159 --> 00:05:38.532
Sorry, I'm just working this
truth tables out in my head.

104
00:05:38.532 --> 00:05:39.665
So let's try that.

105
00:05:39.665 --> 00:05:47.337
I would say any.empty is
a function plus any false.

106
00:05:47.337 --> 00:05:52.523
So if you hit any trues along the way,
it'll return it back.

107
00:05:52.523 --> 00:05:54.339
But this acts as an identity.

108
00:05:54.339 --> 00:05:56.660
If I give it any true and
false again any true back.

109
00:05:56.660 --> 00:06:00.050
If I give it any false false
get any false back, identity.

110
00:06:00.050 --> 00:06:02.702
Cool, so we have that.

111
00:06:02.702 --> 00:06:08.630
We can alternatively do all with the and.

112
00:06:08.630 --> 00:06:13.605
Create, and then this will be all.

113
00:06:13.605 --> 00:06:17.919
Let's go ahead and
define an empty for all.

114
00:06:17.919 --> 00:06:21.329
And that would just be opposite.,
all true.

115
00:06:21.329 --> 00:06:24.897
And if anything is false,
it will just flip the switch and be false.

116
00:06:24.897 --> 00:06:28.663
So now we can reduce this,
say are any of these true?

117
00:06:28.663 --> 00:06:31.814
And this is the same exact template
again and again and again, right?

118
00:06:31.814 --> 00:06:37.050
If we run this,
we get true because any of them are true.

119
00:06:37.050 --> 00:06:37.990
How about all of them?

120
00:06:37.990 --> 00:06:39.674
Are all of them true?

121
00:06:39.674 --> 00:06:41.930
That's not true.

122
00:06:41.930 --> 00:06:42.812
That's false.

123
00:06:42.812 --> 00:06:44.007
There's a false in there.

124
00:06:44.007 --> 00:06:44.885
We get rid of it.

125
00:06:44.885 --> 00:06:46.714
Then they will all be true.

126
00:06:46.714 --> 00:06:47.214
Great.

