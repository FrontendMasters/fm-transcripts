WEBVTT

1
00:00:00.060 --> 00:00:07.310
I wanna show you some examples from
a talk I gave that never got recorded.

2
00:00:07.310 --> 00:00:09.364
And I think this is kinda cool to see.

3
00:00:09.364 --> 00:00:12.559
Instead of me sitting here at a screen and
writing all these out,

4
00:00:12.559 --> 00:00:15.000
I'm just gonna point out
some actual use cases.

5
00:00:16.320 --> 00:00:18.100
So here, we have getAppAlerts, right?

6
00:00:18.100 --> 00:00:19.400
And getDirectMessages.

7
00:00:19.400 --> 00:00:25.000
They're both returning the arrays
of alerts and messages like JSON.

8
00:00:25.000 --> 00:00:30.900
And I can actually just combine
all those promises, responses.

9
00:00:30.900 --> 00:00:34.584
In a pure functional setting,
you'd be using task instead of promise.

10
00:00:34.584 --> 00:00:37.483
We can easily write concat on
promise by just saying concat

11
00:00:37.483 --> 00:00:41.450
whatever this promise is holding
with whatever that one's holding.

12
00:00:41.450 --> 00:00:45.720
And then, we get the ability
to combine two API calls and

13
00:00:45.720 --> 00:00:47.920
get can collect all their results.

14
00:00:47.920 --> 00:00:48.550
We can do that.

15
00:00:48.550 --> 00:00:51.460
It's associative, and it's closed,
so we can do that in parallel.

16
00:00:51.460 --> 00:00:53.730
We can chunk it,
we can hit a bunch of servers at once and

17
00:00:53.730 --> 00:00:55.440
come back with all the results.

18
00:00:55.440 --> 00:00:55.940
MapReduce.

19
00:00:58.463 --> 00:01:03.259
In the same vein,
I didn't mention this earlier,

20
00:01:03.259 --> 00:01:09.220
but map is a way to define a semi-group or
on a object.

21
00:01:09.220 --> 00:01:14.870
And the way it would work is if you
look here, weâ€™re gonna go get a post.

22
00:01:14.870 --> 00:01:18.200
We did this example on the hardcore
functional programming class where we

23
00:01:19.760 --> 00:01:22.210
went and got a post from the server,
we got it back, and

24
00:01:22.210 --> 00:01:25.520
then we got comments from the server and
we wanted to assign them to the post.

25
00:01:25.520 --> 00:01:27.290
Well, this is going that in one line.

26
00:01:28.445 --> 00:01:32.540
getPost returns JSON as a map instance,
right?

27
00:01:32.540 --> 00:01:38.002
So it's like map is an object and
it will merge as a concat.

28
00:01:38.002 --> 00:01:42.560
And if it hits a merge conflict on a key,
it'll just concat the merge conflict.

29
00:01:42.560 --> 00:01:47.460
So what you end up having is this
kind of map merge situation where we

30
00:01:47.460 --> 00:01:52.201
just assigned comments to our
blog post just by calling concat.

31
00:01:53.441 --> 00:01:55.311
Does everybody see how that works?

32
00:01:55.311 --> 00:01:58.400
I mean, I'm just kinda gonna glaze
over a bunch of these little examples.

33
00:01:58.400 --> 00:02:03.560
But it's pretty useful if you ask me and
everyone else.

34
00:02:03.560 --> 00:02:05.820
So here's a tryCatch.

35
00:02:05.820 --> 00:02:08.180
We saw this in the hardcore
functional programming class.

36
00:02:08.180 --> 00:02:09.740
We're gonna read file sync.

37
00:02:09.740 --> 00:02:13.482
This isn't pure, to be fair, but

38
00:02:13.482 --> 00:02:19.557
it shows the example of we're
gonna say readFileSync.

39
00:02:19.557 --> 00:02:25.159
And it's gonna just concat all their
contents here with the full map.

40
00:02:25.159 --> 00:02:28.281
It'll read all these files and
concat all the contents, awesome.

41
00:02:28.281 --> 00:02:32.940
And if any of them blow up,
we will just get the left.

42
00:02:32.940 --> 00:02:34.450
I don't have that example.

43
00:02:34.450 --> 00:02:35.900
It'll just show you the error.

44
00:02:35.900 --> 00:02:36.760
And as we saw before,

45
00:02:36.760 --> 00:02:42.540
we can wrap either in another type to
kinda gracefully make different decisions.

46
00:02:42.540 --> 00:02:48.830
So here's the same thing, async,
and almost nothing changes, right?

47
00:02:48.830 --> 00:02:53.373
We just said promisify the read file,
and since we're saying promise here,

48
00:02:53.373 --> 00:02:56.360
it has a concat method, it will do
the exact same thing, but async.

49
00:02:56.360 --> 00:03:01.405
And I changed nothing other than the
monoid or semi-group I provided it with.

50
00:03:01.405 --> 00:03:05.523
And you can see the empty,
it's just Promise.resolve empty string.

51
00:03:05.523 --> 00:03:10.519
So therefore, we have a monoid in
the situation, empty string, and a promise

52
00:03:10.519 --> 00:03:15.458
holding empty string would be the empty
method of this particular workflow.

53
00:03:17.442 --> 00:03:25.660
Here, we have, let's see,
read a file and get an array.

54
00:03:25.660 --> 00:03:27.440
Works the exact same way as the strings.

55
00:03:27.440 --> 00:03:28.969
It'll just combine all the arrays.

56
00:03:31.470 --> 00:03:33.992
Here's an example of doing a null check.

57
00:03:33.992 --> 00:03:36.480
So now,
we're cascading these things, right?

58
00:03:36.480 --> 00:03:40.760
We're saying okay, I wanna go in there,
I wanna read all these files, async.

59
00:03:40.760 --> 00:03:43.450
I wanna get all their contents,
I wanna split them into words.

60
00:03:43.450 --> 00:03:45.612
So we have all these arrays,
I'm gonna concat all those arrays.

61
00:03:45.612 --> 00:03:50.180
But if I get a null, I just wanna stop.

62
00:03:50.180 --> 00:03:54.710
[LAUGH] Otherwise, everything
worked out and everything's good.

63
00:03:55.710 --> 00:03:58.060
That's powerful.

64
00:03:58.060 --> 00:03:58.775
This is power.

65
00:03:58.775 --> 00:04:06.560
[LAUGH] So let's see couple more examples,
and then we'll build some stuff.

66
00:04:06.560 --> 00:04:12.340
Here, we have getting a bunch of
configs and combining them from files.

67
00:04:13.450 --> 00:04:14.360
Here's a good one.

68
00:04:14.360 --> 00:04:17.160
So this is kind of
a typical use case here.

69
00:04:17.160 --> 00:04:19.960
So we're gonna do is we're
gonna walk over the DOM tree.

70
00:04:19.960 --> 00:04:26.710
I made a tree functor
slash foldable monoid.

71
00:04:26.710 --> 00:04:33.320
And what I've done is say my report is a
map, and it's gonna get the element count.

72
00:04:33.320 --> 00:04:37.210
And this is playing off the fact that
if I'm a type and I'm holding entirely

73
00:04:37.210 --> 00:04:43.450
monoids, then I can concat just because
all my pieces are also monoids.

74
00:04:43.450 --> 00:04:46.220
So what map does is just merge, right?

75
00:04:46.220 --> 00:04:51.340
And if it hits the same key, it combines
those as the merge conflict resolution.

76
00:04:51.340 --> 00:04:55.247
So what it's gonna do is run
through the entire DOM tree and

77
00:04:55.247 --> 00:04:59.331
get every element, every class name,
every tag, and max.

78
00:04:59.331 --> 00:05:01.851
And each one has a different
way to combine, and

79
00:05:01.851 --> 00:05:05.266
it will give me an entire report
in one loop over the entire tree.

80
00:05:05.266 --> 00:05:10.205
Which rules [LAUGH], right?

81
00:05:10.205 --> 00:05:14.511
I've done this a few different times for
DOM tree processing.

82
00:05:14.511 --> 00:05:18.347
And if we wanna get super fancy,
what if I have a bunch of documents and

83
00:05:18.347 --> 00:05:21.206
I wanna fold down that list and
get reports on that?

84
00:05:21.206 --> 00:05:23.280
There's one extra layer, right?

85
00:05:23.280 --> 00:05:27.630
I'm not just doing one DOM tree, I'm doing
the entire site now and getting a report

86
00:05:27.630 --> 00:05:32.280
on all the elements, classes, tags, and
the max height of the bounding regs.

87
00:05:32.280 --> 00:05:35.360
So that is, again, super powerful.

