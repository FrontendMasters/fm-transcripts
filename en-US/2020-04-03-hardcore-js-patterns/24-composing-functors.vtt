WEBVTT

1
00:00:00.240 --> 00:00:04.560
I wanna start off talking
about function or

2
00:00:04.560 --> 00:00:09.380
Mona Transformers by talking
about functor composition.

3
00:00:10.900 --> 00:00:13.780
So what we have here is
a type that says compose.

4
00:00:13.780 --> 00:00:19.590
I'm gonna take two other types F and
G and I'm gonna return you a new type M.

5
00:00:20.830 --> 00:00:25.610
And if I wanna put something in M, we'll
put it in the G, in the F, and in the M.

6
00:00:26.740 --> 00:00:29.590
And if I wanna map, I'll map over the g,
and map over the f,

7
00:00:29.590 --> 00:00:31.740
and keep that in the M.

8
00:00:31.740 --> 00:00:34.660
Cool, all right, let's see how this works.

9
00:00:34.660 --> 00:00:39.225
I can say, well,
I have let's call a TaskEither.

10
00:00:40.380 --> 00:00:42.230
And I'll make a compose.

11
00:00:42.230 --> 00:00:45.541
And I'll Compose(Task, Either), okay?

12
00:00:45.541 --> 00:00:47.970
I wanna put something in a TaskEither.

13
00:00:47.970 --> 00:00:51.390
So it's a task on the outside
either on the inside.

14
00:00:51.390 --> 00:00:52.000
That's right.

15
00:00:52.000 --> 00:00:58.110
So then we'll say TaskEither of, to.

16
00:00:58.110 --> 00:01:04.931
Give myself some space will map
over that we have a to two times,

17
00:01:04.931 --> 00:01:12.023
10 will map over it again just for
funsies two or this 10 20.

18
00:01:12.023 --> 00:01:15.080
[LAUGH] Goodness.

19
00:01:15.080 --> 00:01:17.280
So we got twenty &lt;&gt; twenty + 1.

20
00:01:18.738 --> 00:01:25.050
All right, and then we're going to fork
this, because it is not a task either.

21
00:01:25.050 --> 00:01:26.790
It's a compose of TaskEither.

22
00:01:26.790 --> 00:01:31.572
So we actually have to get
it out of the the compose.

23
00:01:31.572 --> 00:01:33.970
Now I've shown extract a few times.

24
00:01:33.970 --> 00:01:38.364
And for those of you who new fold and
such, extract is coming from,

25
00:01:38.364 --> 00:01:42.622
it does not take the function and
then pass that to the function.

26
00:01:42.622 --> 00:01:47.552
You just get it out and
it's part of the common ad

27
00:01:47.552 --> 00:01:52.370
interface, but
it's only one piece of that.

28
00:01:53.420 --> 00:01:59.660
Okay, so we can extract out of
the compose to get our TaskEither.

29
00:01:59.660 --> 00:02:06.327
And once we call this console.error and
then we get the either in there,

30
00:02:06.327 --> 00:02:12.690
then we could fold out the either
to a console.log, console.log.

31
00:02:12.690 --> 00:02:16.310
All right, terrific.

32
00:02:16.310 --> 00:02:17.840
People see how this is working.

33
00:02:17.840 --> 00:02:21.940
I have a task of either of mapping
over the value inside of it and

34
00:02:21.940 --> 00:02:25.270
to take out of the compose.

35
00:02:25.270 --> 00:02:28.940
So I get my task, and then I run that,
and the task is holding either, so

36
00:02:28.940 --> 00:02:30.580
then I get my either.

37
00:02:30.580 --> 00:02:33.370
But during my whole computation,

38
00:02:33.370 --> 00:02:37.380
I didn't really have to care, I didn't
have to map map all over the place.

39
00:02:37.380 --> 00:02:39.730
My one map just did both maps for me.

40
00:02:41.450 --> 00:02:46.500
So if I run it transformers/0,
we got 21, perfect.

41
00:02:47.680 --> 00:02:51.133
And so functors compose effortlessly.

42
00:02:51.133 --> 00:02:52.840
Any functor just composes with others.

43
00:02:52.840 --> 00:02:54.900
In fact, you can compose it with compose,

44
00:02:54.900 --> 00:02:58.960
I could say I could compose identity with
that and so on, and it's associative.

45
00:02:58.960 --> 00:03:01.520
And we actually have
an identity functor don't we?

46
00:03:01.520 --> 00:03:06.760
So actually functors themselves for form
category where they act like functions.

47
00:03:06.760 --> 00:03:08.740
You can compose them and
you have an identity and

48
00:03:08.740 --> 00:03:14.500
then they provide this whole kind
of one click up from functions.

49
00:03:14.500 --> 00:03:18.197
It's a whole composition toolkit.

50
00:03:18.197 --> 00:03:23.200
But we're not gonna go too far into it,
where things get hairy.

51
00:03:23.200 --> 00:03:28.550
If I do chain I have to
somehow provide a TaskEither.

52
00:03:28.550 --> 00:03:30.790
So I get into this too and

53
00:03:30.790 --> 00:03:36.560
I have to deal with creating
another task either to chain that.

54
00:03:36.560 --> 00:03:39.940
And that is not mechanical.

55
00:03:39.940 --> 00:03:40.920
That doesn't always work.

56
00:03:40.920 --> 00:03:43.030
You can't just compose two mon ads.

57
00:03:43.030 --> 00:03:45.060
And just expect it to chain for us.

58
00:03:45.060 --> 00:03:49.938
We can't write a chain that
makes sense here, in compose.

59
00:03:49.938 --> 00:03:54.596
Does everybody understand that fact,
maybe not why but at least

60
00:03:54.596 --> 00:04:00.252
there's a fact that says we cannot
write a flat map or a chain in here.

61
00:04:00.252 --> 00:04:07.020
And we make sense like for
each montaic, kind of each type

62
00:04:07.020 --> 00:04:13.490
has its own way to specify map and chain
if you're gonna fall out of the type.

63
00:04:13.490 --> 00:04:16.580
You have to know about the details and
this you just it just

64
00:04:16.580 --> 00:04:19.740
bottles it right back up for you so
you can always map map and you're fine.

65
00:04:20.790 --> 00:04:24.820
So we cannot chain these these things.

66
00:04:24.820 --> 00:04:26.350
So what are we gonna do?

67
00:04:26.350 --> 00:04:32.020
We saw we could, we can kind of combine
task and either into a monoid and

68
00:04:32.020 --> 00:04:35.480
just say like, I'm just gonna keep
combining my map my task eaters and

69
00:04:35.480 --> 00:04:39.110
work with the stuff inside
it through concatenation.

70
00:04:39.110 --> 00:04:43.850
But typically you're going to want
to map and chain, so you could run

71
00:04:43.850 --> 00:04:49.261
a composition of functions over it
instead of just combining their insights.

