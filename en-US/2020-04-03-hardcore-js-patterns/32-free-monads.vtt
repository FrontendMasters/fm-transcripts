WEBVTT

1
00:00:00.000 --> 00:00:06.369
Before we go too much further into this
whole thing, this is all well and good.

2
00:00:06.369 --> 00:00:08.521
But how do you test this?

3
00:00:08.521 --> 00:00:13.860
[LAUGH] I mean,
like it's just a bunch of tasks, right?

4
00:00:13.860 --> 00:00:20.890
And they're literally reading
the standard out, and that's not great.

5
00:00:22.670 --> 00:00:28.540
And so, for this,
I feel like we just learned free monads.

6
00:00:28.540 --> 00:00:33.667
And I felt like that was a great
solution to this particular app.

7
00:00:33.667 --> 00:00:37.151
So that we can treat these
interactions as data structures and

8
00:00:37.151 --> 00:00:40.371
then interpret them with
whatever interpreter we want.

9
00:00:40.371 --> 00:00:46.461
Via either a test interpreter or
a live console interpreter.

10
00:00:46.461 --> 00:00:51.554
So that'll gain us testability and
portability in environments.

11
00:00:51.554 --> 00:00:55.770
Okay, so to do this,
we have to make some changes.

12
00:00:57.660 --> 00:01:00.043
These changes are,
we have to think about the effects.

13
00:01:00.043 --> 00:01:03.387
Now we're not just throwing
everything in task, right?

14
00:01:03.387 --> 00:01:06.820
Everything here is just
task task task task task.

15
00:01:06.820 --> 00:01:11.568
And what would be better is if we
had these specific actions that

16
00:01:11.568 --> 00:01:15.428
we're capturing,
just like we did with HTTP GET.

17
00:01:15.428 --> 00:01:17.005
Those could just be task, but

18
00:01:17.005 --> 00:01:21.182
what we're gonna do is turn those into
data types that represent the actions.

19
00:01:21.182 --> 00:01:24.887
So what we'll do here with print.

20
00:01:24.887 --> 00:01:28.326
I wanna change the word print, but

21
00:01:28.326 --> 00:01:32.722
let's first bring in liftF, we need that.

22
00:01:32.722 --> 00:01:35.978
So we'll do that from free,

23
00:01:35.978 --> 00:01:40.460
liftF comes from free, are you there?

24
00:01:42.490 --> 00:01:43.160
Are you there free?

25
00:01:43.160 --> 00:01:46.896
It's me, Brian.

26
00:01:46.896 --> 00:01:48.662
Somewhere in here, we'll figure it out.

27
00:01:48.662 --> 00:01:52.232
I probably have to jump out
of a folder to get to it.

28
00:01:52.232 --> 00:01:54.130
Are you there?

29
00:01:54.130 --> 00:01:57.130
I probably ruined my suggestions,
we'll find out.

30
00:01:57.130 --> 00:02:01.489
Okay, might be in lib,
I'm assuming it's in lib.

31
00:02:01.489 --> 00:02:03.848
But so we have liftF.

32
00:02:03.848 --> 00:02:05.847
Note, turn things into free monads.

33
00:02:05.847 --> 00:02:08.045
Let's bring in our daggy or taggedSum.

34
00:02:11.420 --> 00:02:16.937
Great, so we'll make type for
reading and writing to the console.

35
00:02:16.937 --> 00:02:19.280
We'll call it Console, right?

36
00:02:19.280 --> 00:02:21.700
And this will be interpreted
in different ways.

37
00:02:21.700 --> 00:02:23.985
And we'll do another one for the database.

38
00:02:23.985 --> 00:02:27.880
Those are two primary
effects in this program.

39
00:02:27.880 --> 00:02:34.780
And instead of having to worry
about that in our code and

40
00:02:34.780 --> 00:02:38.640
just throw everything tasks, we're
gonna treat it like a data structure.

41
00:02:38.640 --> 00:02:43.020
So taggedSum and we'll call this Console.

42
00:02:43.020 --> 00:02:47.735
taggedSum takes it's name here
instead of trying to infer it, so

43
00:02:47.735 --> 00:02:49.470
as the first argument.

44
00:02:49.470 --> 00:02:53.649
And then we'll say we have a question,
perhaps.

45
00:02:53.649 --> 00:02:57.035
That takes the string or how about a q.

46
00:02:57.035 --> 00:03:00.611
Turns out these don't really matter,
these names.

47
00:03:00.611 --> 00:03:03.374
I mean, it's good for inspection,
but when you do your catamorphism,

48
00:03:03.374 --> 00:03:06.135
they just destructure the type and
you can name this whatever you want.

49
00:03:06.135 --> 00:03:09.950
So don't lose too much sleep over that.

50
00:03:09.950 --> 00:03:14.340
And then we'll do print and
print will take a string, terrific.

51
00:03:14.340 --> 00:03:20.810
q and s, true functional programmers write
impossible variables, just so you know.

52
00:03:20.810 --> 00:03:25.699
[LAUGH] If I was doing this at work,
I would write it all out.

53
00:03:25.699 --> 00:03:29.707
[LAUGH] So Db, we'll do Db and

54
00:03:29.707 --> 00:03:33.720
where we get a Save, right?

55
00:03:33.720 --> 00:03:41.510
And that takes a table and a record.

56
00:03:41.510 --> 00:03:45.365
And All, get out of here,

57
00:03:45.365 --> 00:03:50.104
All takes the table and a query.

58
00:03:50.104 --> 00:03:54.648
I made it optional to pass the where
clause in so we didn't see that earlier,

59
00:03:54.648 --> 00:03:55.429
but it does.

60
00:03:56.600 --> 00:03:58.460
Okay, cool, so we have these two.

61
00:03:58.460 --> 00:04:01.320
One thing I didn't mention
about a free monad is that

62
00:04:01.320 --> 00:04:04.311
it actually expects functors
[LAUGH] to be passed to it.

63
00:04:04.311 --> 00:04:06.360
We should be making these functors.

64
00:04:06.360 --> 00:04:10.303
But you can actually make anything
into a functor with whole thing,

65
00:04:10.303 --> 00:04:11.546
don't worry about it.

66
00:04:11.546 --> 00:04:12.493
I just want to call it out.

67
00:04:12.493 --> 00:04:19.990
[LAUGH] All right, so, Console, Db, two
data types gonna represent our functions.

68
00:04:19.990 --> 00:04:24.593
So now we have to go into our
functions where we have print.

69
00:04:24.593 --> 00:04:30.648
And instead of actually printing,
let's do realPrint here, right?

70
00:04:30.648 --> 00:04:36.025
And we'll make a print function that
simply does that liftF nonsense, right?

71
00:04:36.025 --> 00:04:41.270
liftF and
we'll construct our Console.Print and

72
00:04:41.270 --> 00:04:44.070
we'll pass the string to it.

73
00:04:44.070 --> 00:04:47.067
Likewise with our question function.

74
00:04:47.067 --> 00:04:49.589
I think we called it getInput here.

75
00:04:49.589 --> 00:04:55.681
So we're just gonna call print and
question here to make the data types.

76
00:04:55.681 --> 00:04:58.553
And then when we interpret it,
we'll call the real functions.

77
00:04:58.553 --> 00:05:04.210
So we could put those together
with realPrint and getInput.

78
00:05:04.210 --> 00:05:11.758
Maybe we call it write output, I don't
know, writeOutput [LAUGH] looks great.

79
00:05:11.758 --> 00:05:14.231
Does anybody have any
questions at this point?

80
00:05:14.231 --> 00:05:17.357
We're just going through the motions
of putting stuff in free.

81
00:05:17.357 --> 00:05:19.741
But now we have these two.

82
00:05:19.741 --> 00:05:24.708
We've got to do the exact same thing for
All,

83
00:05:24.708 --> 00:05:28.377
we'll call it dbAll and dbSave.

84
00:05:28.377 --> 00:05:33.734
This will be Db.All,
this is rather boring.

85
00:05:33.734 --> 00:05:36.884
Most of this stuff just follows
from the definitions and

86
00:05:36.884 --> 00:05:39.441
you're just filling in the blanks, right?

87
00:05:39.441 --> 00:05:43.949
Table, query, table, query.

88
00:05:43.949 --> 00:05:50.440
Then you have Db.Save(table, record).

89
00:05:50.440 --> 00:05:52.067
And we take our table and our record.

90
00:05:52.067 --> 00:05:55.620
And again,
I could have automated all of this.

91
00:05:55.620 --> 00:06:01.020
It's just composition of the type,
this is literally just

92
00:06:01.020 --> 00:06:06.810
composed dbAll and liftF, right?

93
00:06:06.810 --> 00:06:10.550
And even then I don't have to
write that out every time.

94
00:06:10.550 --> 00:06:11.462
But I'm doing this for

95
00:06:11.462 --> 00:06:14.500
completeness' sake and so you can see
cuz a lot of this is kinda confusing.

96
00:06:15.970 --> 00:06:17.677
All right, great, now what happens?

97
00:06:17.677 --> 00:06:25.033
[LAUGH] Well we gotta switch this to
dbAll and dbSave in these places.

98
00:06:25.033 --> 00:06:29.967
I probably should have just renamed
the originals, but you live, you learn.

99
00:06:29.967 --> 00:06:37.140
And this is now going to be question,
question, question.

100
00:06:37.140 --> 00:06:44.045
If I miss any, I'm going real fast,
[LAUGH] so let's see.

101
00:06:44.045 --> 00:06:48.848
Cuz this is not interesting,
I'm just updating the functions

102
00:06:48.848 --> 00:06:52.665
that I should not have
renamed in the first place.

103
00:06:52.665 --> 00:06:56.780
dbAll, cool, think we did it.

104
00:06:56.780 --> 00:07:01.290
Did we do it, dbSave, dbAll, great.

105
00:07:03.110 --> 00:07:05.972
So, now that we're doing this,
what's gonna happen?

106
00:07:05.972 --> 00:07:13.553
Well f returns returns a free monad,
not a task.

107
00:07:13.553 --> 00:07:19.473
So we have interpret,
we have to foldMap(interpret) on the free,

108
00:07:19.473 --> 00:07:22.955
and we're gonna interpret it to a task.

109
00:07:22.955 --> 00:07:28.490
Interpet, interpet, interpret,
how do we interpret it?

110
00:07:28.490 --> 00:07:31.370
Well just like we did before,
we'll write a little interpreter.

111
00:07:32.910 --> 00:07:37.298
And this is where if you ever do free
monad stuff like looking this up online,

112
00:07:37.298 --> 00:07:40.042
you're trying to get
really into free monads,

113
00:07:40.042 --> 00:07:42.940
you start to deal with
composable interpreters.

114
00:07:42.940 --> 00:07:45.586
Like I have this interpreter and
that interpreter and

115
00:07:45.586 --> 00:07:47.599
I want to kind of compose them together.

116
00:07:47.599 --> 00:07:50.460
And as I'm composing all
my effects into free, which

117
00:07:50.460 --> 00:07:55.720
I've just normalized all my effects into
this one monad so they just all chain.

118
00:07:55.720 --> 00:07:59.910
Now my problem becomes, how do I break
down and pass in different interpreters?

119
00:08:01.710 --> 00:08:05.320
For the time being right now,
I have two effects.

120
00:08:05.320 --> 00:08:07.900
And I'm not gonna bring in co-products and

121
00:08:07.900 --> 00:08:10.695
all this stuff to try to
compose interpreters.

122
00:08:10.695 --> 00:08:13.836
So what we're gonna do is I'm gonna say,
I take this, take this thing.

123
00:08:13.836 --> 00:08:18.710
I don't know if this thing's a console or
a DB right now, I'm not sure.

124
00:08:18.710 --> 00:08:22.148
And instead of trying to formalize and
make this a little nicer,

125
00:08:22.148 --> 00:08:25.344
I'm just gonna go ahead and
say, hey, do you have a table?

126
00:08:25.344 --> 00:08:28.697
Because I know that both
of these have table.

127
00:08:28.697 --> 00:08:30.607
So this is, I'm just cheating,

128
00:08:30.607 --> 00:08:33.760
because I don't want to go
through all that right now.

129
00:08:33.760 --> 00:08:37.789
And honestly, I think that stuff
is much nicer when you have types.

130
00:08:37.789 --> 00:08:41.954
And there's probably better solutions
in an untyped language to compose

131
00:08:41.954 --> 00:08:43.560
interpreters.

132
00:08:43.560 --> 00:08:48.663
All right, so if you've got
a table then we'll interpret,

133
00:08:48.663 --> 00:08:54.840
here call dbToTask, otherwise,
we'll call consoleToTask.

134
00:08:54.840 --> 00:08:55.841
So these are the two.

135
00:08:55.841 --> 00:08:57.676
And we'll pass in our x.

136
00:08:57.676 --> 00:08:59.060
Does everybody see?

137
00:08:59.060 --> 00:09:01.285
Wow, does everybody see all those x's?

138
00:09:01.285 --> 00:09:05.192
[LAUGH] So obviously,
why I'm doing this and what that's for,

139
00:09:05.192 --> 00:09:08.670
it's like I've got an x,
I don't know which one it is.

140
00:09:08.670 --> 00:09:15.280
I have to turn this data type that's just
raw data into an actual running task.

141
00:09:15.280 --> 00:09:18.941
And instead of doing anything fancier,
I'll just do that.

142
00:09:18.941 --> 00:09:24.391
So dbToTask takes our x, and
we'll do that nice little

143
00:09:24.391 --> 00:09:29.854
catamorphism where if we have a save,
we take a table.

144
00:09:29.854 --> 00:09:35.360
And literally it's just dbSave
[LAUGH] right, or it's just Save.

145
00:09:35.360 --> 00:09:38.728
Where we have an All, it's just All.

146
00:09:38.728 --> 00:09:45.480
We went through and renamed our types but
Save is holding the same arguments.

147
00:09:45.480 --> 00:09:47.568
So it's just gonna pass its
arguments into the save function.

148
00:09:47.568 --> 00:09:52.928
So normally you'd say like,
it takes a table and a record.

149
00:09:52.928 --> 00:09:56.780
And then we'll go ahead and
call save with the table and record and

150
00:09:56.780 --> 00:09:58.191
that returns as a task.

151
00:09:58.191 --> 00:10:01.444
So I could just pass it save.

152
00:10:01.444 --> 00:10:02.812
See how that works?

153
00:10:02.812 --> 00:10:06.692
Same thing with All, I get the table and
a query and then it just calls all(table,

154
00:10:06.692 --> 00:10:07.210
query).

155
00:10:07.210 --> 00:10:12.830
Let's do the same thing
with the consoleToTask.

156
00:10:12.830 --> 00:10:19.044
And what's gonna happen here is if I have
a question, I'm just gonna call getInput.

157
00:10:19.044 --> 00:10:24.260
And if we have a print,
we'll call writeOutput, excellent.

158
00:10:24.260 --> 00:10:27.890
So we're just mapping our
datatypes holding our arguments

159
00:10:27.890 --> 00:10:32.450
into actual functions
that will run with this.

160
00:10:32.450 --> 00:10:33.739
So that's cool, let's see what happens.

161
00:10:33.739 --> 00:10:36.610
I'm highly doubtful this is gonna work.

162
00:10:37.628 --> 00:10:39.623
All right, I'm Brian.

163
00:10:39.623 --> 00:10:45.460
[LAUGH] All right, what happens here?

164
00:10:45.460 --> 00:10:46.865
I got the first one.

165
00:10:46.865 --> 00:10:50.739
Blah blah blah,
.foldMap is not a function, okay.

166
00:10:50.739 --> 00:10:53.250
So what's happening here?

167
00:10:53.250 --> 00:10:56.114
So we turned it into a task and we ran it.

168
00:10:56.114 --> 00:10:57.640
We saw that happen with start.

169
00:10:57.640 --> 00:11:01.930
We ran f, it did nothing but
return us a free monad.

170
00:11:01.930 --> 00:11:07.579
Then we interpreted that free monad
which actually ran the question,

171
00:11:07.579 --> 00:11:09.117
which is awesome.

172
00:11:09.117 --> 00:11:12.593
And then we forked that so
it actually ran the task and

173
00:11:12.593 --> 00:11:15.780
what it returned should
be passed in to runApp.

174
00:11:15.780 --> 00:11:21.140
So the question is,
what did getInput return?

175
00:11:21.140 --> 00:11:25.685
Or sorry, not what did getInput return,
it's what did start return?

176
00:11:25.685 --> 00:11:28.545
We'll return menu or getAuthor.

177
00:11:32.342 --> 00:11:39.028
And I have a suspicion that menu,
these are functions,

178
00:11:39.028 --> 00:11:45.750
so they have to be called and
then they're free monads.

179
00:11:45.750 --> 00:11:48.165
But here we're calling it,
let's just see what f is.

180
00:11:52.521 --> 00:11:58.330
We're real close though, and
we're almost out of time for this one.

181
00:11:58.330 --> 00:12:02.710
We spent a little bit longer debugging
this so we can figure out what's going on.

182
00:12:04.290 --> 00:12:08.330
Maybe we can take a second to
write our other interpreter.

183
00:12:09.760 --> 00:12:13.160
So it says the first f is this thing,
okay?

184
00:12:13.160 --> 00:12:17.032
It's a function, okay, and
we call that function and

185
00:12:17.032 --> 00:12:19.732
we get this free, cuz it calls dbAll.

186
00:12:19.732 --> 00:12:24.623
The second one is a function,

187
00:12:24.623 --> 00:12:29.515
it's interesting it already

188
00:12:29.515 --> 00:12:34.455
called this twice, right?

189
00:12:34.455 --> 00:12:37.910
What happened, is it called start,
it didn't have any authors.

190
00:12:37.910 --> 00:12:42.643
So then it went over and
called createAuthor, and

191
00:12:42.643 --> 00:12:49.505
then it's ending up calling,
does dbSave and then goes to menu.

192
00:12:49.505 --> 00:12:52.472
Is dbSave the thing that
we wanted it to do?

193
00:12:52.472 --> 00:12:54.502
Is that what we called it, dbSave?

194
00:12:54.502 --> 00:12:57.509
Yeah, liftF, Save, Db.

195
00:12:57.509 --> 00:13:02.160
All right, let's just try this again,
now what do we get, what is f in here?

196
00:13:04.120 --> 00:13:06.710
f is getInput, we screwed up.

197
00:13:06.710 --> 00:13:08.640
We left the getInput in here.

198
00:13:08.640 --> 00:13:09.640
Where did that come from?

199
00:13:11.410 --> 00:13:13.790
I forgot, it was way up there,
there you go.

200
00:13:13.790 --> 00:13:15.360
So that's what's going on.

201
00:13:15.360 --> 00:13:19.730
So what happened here is that
we didn't return the right type.

202
00:13:19.730 --> 00:13:23.000
We don't have a type checker,
I didn't update that, there we go.

203
00:13:23.000 --> 00:13:25.194
All right, so let's see what happens.

204
00:13:25.194 --> 00:13:30.524
I can clear all these logs now.

205
00:13:30.524 --> 00:13:33.410
All right, so run that, I am Brian.

206
00:13:33.410 --> 00:13:34.450
Where do you want to go today?

207
00:13:34.450 --> 00:13:35.640
I want to write.

208
00:13:35.640 --> 00:13:37.725
Whew, go to Title: Hi.

209
00:13:37.725 --> 00:13:40.990
So that's it, kick ass.

210
00:13:40.990 --> 00:13:42.580
All right, so we're doing free monads.

