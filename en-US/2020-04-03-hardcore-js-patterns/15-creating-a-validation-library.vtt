WEBVTT

1
00:00:00.122 --> 00:00:02.645
All right, so
we're gonna go to validation,

2
00:00:02.645 --> 00:00:05.566
we're gonna make a validation
library right quick.

3
00:00:05.566 --> 00:00:10.311
[LAUGH] So I just kind of pummeled
you with all these monoids.

4
00:00:10.311 --> 00:00:12.040
But you can see how it hints
at architecture, right?

5
00:00:12.040 --> 00:00:14.254
We're able to start to say like,

6
00:00:14.254 --> 00:00:19.870
our type of app is an async error handling
thing or it's a report like thing.

7
00:00:19.870 --> 00:00:22.469
And in this case, we're gonna do
architecture around validation.

8
00:00:22.469 --> 00:00:25.880
So we're gonna say validations
are a thing that combined.

9
00:00:25.880 --> 00:00:31.433
Fundamentally, if I have a validation and

10
00:00:31.433 --> 00:00:37.295
let's say, isPresent and
I do that check and

11
00:00:37.295 --> 00:00:43.937
I wanna concat that with
another one like isEmail.

12
00:00:43.937 --> 00:00:50.511
We take some objects and we'll take
say object.name and object.email.

13
00:00:50.511 --> 00:00:55.746
What I should get is,
either the combined errors or

14
00:00:55.746 --> 00:01:00.278
the original object, right, the choice.

15
00:01:00.278 --> 00:01:05.276
So, we wanna build something that combines
a bunch of validations and presents

16
00:01:05.276 --> 00:01:10.211
me with all their errors or a successful
object that got through the gauntlet.

17
00:01:10.211 --> 00:01:13.441
So let's try to build this,

18
00:01:13.441 --> 00:01:18.294
and I'm going to go slow, ask questions.

19
00:01:18.294 --> 00:01:25.510
But, we're already gonna kind of start
with, what do we want to end up with?

20
00:01:26.560 --> 00:01:28.922
And I think a nice API would be this.

21
00:01:28.922 --> 00:01:35.316
We'll say validations is this
thing where we have name

22
00:01:35.316 --> 00:01:41.250
isPresent, an email, isEmail, and so on.

23
00:01:41.250 --> 00:01:45.837
So we'll say like we'll take it further.

24
00:01:45.837 --> 00:01:51.889
We could say, well, I wanna concat
that with also isPresent, right?

25
00:01:51.889 --> 00:01:55.319
We'll do that before the end.

26
00:01:55.319 --> 00:01:59.681
But the idea is that we provide an object
key value and I want the validation to

27
00:01:59.681 --> 00:02:04.132
correspond to the key and I wanna be
able to combine and compose validations.

28
00:02:04.132 --> 00:02:07.745
Is everybody understand the framing of
the problem, what we are trying to do?

29
00:02:07.745 --> 00:02:10.160
Any questions on that, yep?

30
00:02:10.160 --> 00:02:14.220
&gt;&gt; This, if we were to take
it into different language,

31
00:02:14.220 --> 00:02:17.710
would just be a different type of objects,
right?

32
00:02:17.710 --> 00:02:18.309
&gt;&gt; Yeah, exactly.

33
00:02:18.309 --> 00:02:18.887
&gt;&gt; Okay.

34
00:02:18.887 --> 00:02:22.215
&gt;&gt; It could just be named Paris,
I just wanna be able to provide,

35
00:02:22.215 --> 00:02:25.860
this is the attribute I wanna
run this validation on.

36
00:02:25.860 --> 00:02:29.400
And we wanna do something maybe
like validate validations.

37
00:02:29.400 --> 00:02:34.386
[LAUGH] And
then we'll give it some object and

38
00:02:34.386 --> 00:02:40.950
we hope to get our object back or
a bunch of errors.

39
00:02:40.950 --> 00:02:44.487
All right, so let's go ahead and
write isPresent.

40
00:02:46.354 --> 00:02:49.020
And, actually you know what, nevermind.

41
00:02:49.020 --> 00:02:52.690
Let's go ahead and write this validate
first before we do anything else.

42
00:02:52.690 --> 00:02:55.954
I like to start at the color, right?

43
00:02:55.954 --> 00:03:00.480
So I'm gonna create, so
we already have this thing.

44
00:03:00.480 --> 00:03:02.975
Let's simplify it for
now and we'll do this later.

45
00:03:02.975 --> 00:03:06.180
But we say, in fact,
let's just start with isPresent on both.

46
00:03:07.430 --> 00:03:10.440
So we have a very simple use case, we're
gonna start with the calling code and

47
00:03:10.440 --> 00:03:12.720
kind of work our way back up.

48
00:03:12.720 --> 00:03:15.760
So we have our object that has a name.

49
00:03:15.760 --> 00:03:19.237
And, brian and an email, and

50
00:03:19.237 --> 00:03:23.417
that would be brian@brian.com.

51
00:03:23.417 --> 00:03:25.091
All right, great.

52
00:03:25.091 --> 00:03:26.853
And we'll validate that.

53
00:03:26.853 --> 00:03:31.135
So it will be our response and
we'll go ahead and

54
00:03:31.135 --> 00:03:34.999
console.log whatever that response is.

55
00:03:34.999 --> 00:03:36.440
All right, great.

56
00:03:37.460 --> 00:03:43.555
So we have to go write validate,
so let's do that.

57
00:03:43.555 --> 00:03:50.270
And validations is the specification
of key values, right?

58
00:03:51.310 --> 00:03:55.820
So that'll be like our spec object,
I guess, I don't know.

59
00:03:55.820 --> 00:03:59.233
I'm terrible at names,
just called our spec.

60
00:03:59.233 --> 00:04:02.300
[LAUGH] And then we have an object.

61
00:04:03.800 --> 00:04:05.920
We call it a record or whatever.

62
00:04:05.920 --> 00:04:10.230
And then what we wanna do is
say object.keys on the spec.

63
00:04:10.230 --> 00:04:17.766
So for each of these names, well,
what if we foldMap that, right?

64
00:04:17.766 --> 00:04:23.600
We're gonna be combining everything, so
start that in a list and foldMap here.

65
00:04:23.600 --> 00:04:27.910
We're fairly certain we're gonna foldMap
right now is why I'm doing this.

66
00:04:27.910 --> 00:04:28.800
So bring in list.

67
00:04:30.840 --> 00:04:37.619
List=require immutable-ext.

68
00:04:37.619 --> 00:04:41.410
And what are we folding mapping them into?

69
00:04:41.410 --> 00:04:43.700
Well, why don't we start with an either,
right,

70
00:04:43.700 --> 00:04:45.210
either kind of already does this for us.

71
00:04:45.210 --> 00:04:46.790
We don't have to write anything.

72
00:04:46.790 --> 00:04:49.521
So let's go bring in
either from our types.

73
00:04:53.747 --> 00:04:55.042
I do love this behavior,

74
00:04:55.042 --> 00:04:59.040
it's like tells me exactly where
I am in the folder structure.

75
00:04:59.040 --> 00:05:00.990
It's worth the pain.

76
00:05:00.990 --> 00:05:02.610
So, okay, so

77
00:05:02.610 --> 00:05:07.740
we have an either and we'll pull out
the left in the right from the either.

78
00:05:07.740 --> 00:05:10.190
So we have those at our disposal.

79
00:05:10.190 --> 00:05:16.068
Great, so we're gonna do is say we're
start with either of right as our empty.

80
00:05:16.068 --> 00:05:21.046
And then we'll start with either
of the object as our initial

81
00:05:21.046 --> 00:05:25.542
initial object, right, and
then our initial empty.

82
00:05:25.542 --> 00:05:30.116
Because we wanna either return
the right of the object or

83
00:05:30.116 --> 00:05:35.579
a left of a bunch of errors, and
then we're gonna take in each key.

84
00:05:35.579 --> 00:05:39.337
Let's just kind of expand this out for
a second, get rid of the curlies,

85
00:05:39.337 --> 00:05:40.147
don't worry.

86
00:05:40.147 --> 00:05:46.646
[LAUGH] And then what we'll do here
is say, so if we call the spec key,

87
00:05:46.646 --> 00:05:51.680
that will get this thing
out of that object, right?

88
00:05:51.680 --> 00:05:57.530
The spec keys are the names and I can get
the value which is the validation out.

89
00:05:57.530 --> 00:06:02.330
And we'll run the validation
on the object key, right?

90
00:06:02.330 --> 00:06:06.450
Cool, and that should return us.

91
00:06:06.450 --> 00:06:08.400
We could say something like,
well, if it's true,

92
00:06:08.400 --> 00:06:12.750
we'll return a Right of this value, right?

93
00:06:12.750 --> 00:06:15.370
So right of the object,
everybody's good, it worked.

94
00:06:15.370 --> 00:06:22.168
Otherwise, we'll return you a left of hey,
let's just for

95
00:06:22.168 --> 00:06:28.049
the screen sake,
we'll say key, boy, key bad.

96
00:06:28.049 --> 00:06:32.266
[LAUGH] Here we go.

97
00:06:32.266 --> 00:06:34.487
We're gonna start with that,
see where it ends up.

98
00:06:34.487 --> 00:06:35.760
Okay, I'm gonna get rid of these.

99
00:06:35.760 --> 00:06:41.919
So now we're returning an either and
you either can cats so things are good.

100
00:06:41.919 --> 00:06:45.796
And I'll write isPresent, we'll say,
I don't know it takes an x and

101
00:06:45.796 --> 00:06:47.120
it's just not X-ray.

102
00:06:48.920 --> 00:06:51.610
Cool, life is good.

103
00:06:51.610 --> 00:06:53.480
Let's see what happens.

104
00:06:53.480 --> 00:06:58.160
If I run this, node lib validations,

105
00:06:58.160 --> 00:07:01.970
of course I'm already in lib.

106
00:07:01.970 --> 00:07:03.982
Why would I leave lib and come back?

107
00:07:03.982 --> 00:07:05.145
It's already right here.

108
00:07:05.145 --> 00:07:06.021
All right, cool.

109
00:07:06.021 --> 00:07:07.260
But what happened here?

110
00:07:07.260 --> 00:07:07.760
Why is it man?

111
00:07:09.618 --> 00:07:12.151
[SOUND] Concat is not a function,

112
00:07:12.151 --> 00:07:16.478
right must be holding something
that must be concatenate.

113
00:07:16.478 --> 00:07:17.740
That's not we want.

114
00:07:17.740 --> 00:07:20.830
We don't wanna concatenate objects
with objects wiht objects, right?

115
00:07:22.170 --> 00:07:25.490
So we have a few decisions here to make,
we can actually

116
00:07:25.490 --> 00:07:30.830
use another monoid that I didn't mention
called first, [LAUGH] or as a semigroup.

117
00:07:30.830 --> 00:07:32.708
Because we can't make that monoid.

118
00:07:32.708 --> 00:07:35.863
But we could say,
we'll use this object first,

119
00:07:35.863 --> 00:07:38.121
that always just takes the first one.

120
00:07:38.121 --> 00:07:39.708
And then my work.

121
00:07:39.708 --> 00:07:43.050
I can go ahead and make that so
it always keep the first thing.

122
00:07:43.050 --> 00:07:47.001
But I'll tell you right off the bat,
what's happening here is Left is just

123
00:07:47.001 --> 00:07:50.550
gonna short circuit when it
hits the first validation.

124
00:07:50.550 --> 00:07:51.470
And we don't want that.

125
00:07:51.470 --> 00:07:54.350
We want it to collect the errors, right?

126
00:07:54.350 --> 00:07:59.703
Even if we put an array here, And

127
00:07:59.703 --> 00:08:03.206
we can actually demonstrate
this instead of using First,

128
00:08:03.206 --> 00:08:06.530
I'll just put this in array
because an array concats.

129
00:08:06.530 --> 00:08:09.200
In fact,
it's called the free monoids because you

130
00:08:09.200 --> 00:08:10.830
can always slap something in there.

131
00:08:12.910 --> 00:08:21.770
So, it does end up giving us a either and
if we stop doing this, just fold it out.

132
00:08:21.770 --> 00:08:25.693
Give it, I'll write any functions.

133
00:08:25.693 --> 00:08:29.196
We would get the console.log, sorry.

134
00:08:33.814 --> 00:08:36.600
So we get a bunch of successes here.

135
00:08:36.600 --> 00:08:40.702
If I remove one, say name bad.

136
00:08:40.702 --> 00:08:44.441
[LAUGH] But if I remove both,
we won't get named bad and

137
00:08:44.441 --> 00:08:47.528
email bad we just get the first one,
right?

138
00:08:47.528 --> 00:08:49.818
And if I get the other
one will get email bad.

