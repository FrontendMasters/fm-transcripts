WEBVTT

1
00:00:00.000 --> 00:00:04.200
&gt;&gt; Brian Holt: Okay, so
lets talk about Context.

2
00:00:04.200 --> 00:00:10.670
You're gonna find Context as
a similar field to scope.

3
00:00:10.670 --> 00:00:16.138
They are different but
you apply a lot of the same thinking.

4
00:00:16.138 --> 00:00:22.950
Okay, so I have this me object,
it has a name, it has a location.

5
00:00:22.950 --> 00:00:28.928
And then it has a getAddress
function associated with it.

6
00:00:28.928 --> 00:00:33.873
It would be really nice if this
getAddress function could reference other

7
00:00:33.873 --> 00:00:36.993
pieces of data attached to my object,
right?

8
00:00:36.993 --> 00:00:38.417
That would make sense,

9
00:00:38.417 --> 00:00:42.132
because I wanna be able to return
to a well formatted address.

10
00:00:42.132 --> 00:00:44.429
So that's what the getAddress does,

11
00:00:44.429 --> 00:00:47.888
it does something that you
could put like on a post label.

12
00:00:47.888 --> 00:00:53.249
So the way that you do that is
you use something called this.

13
00:00:53.249 --> 00:00:56.735
And this refers to
whatever object it's on.

14
00:00:56.735 --> 00:01:02.173
So when I use this instead of getAddress,
it refers to me, right?

15
00:01:02.173 --> 00:01:04.146
Because that's what it's on.

16
00:01:04.146 --> 00:01:08.786
If I had a function inside a location.

17
00:01:08.786 --> 00:01:16.818
I could even do like I don't
know getCityAndState function.

18
00:01:21.126 --> 00:01:22.668
&gt;&gt; Brian Holt: And I return.

19
00:01:26.310 --> 00:01:34.125
&gt;&gt; Brian Holt: This.city,
&gt;&gt; Brian Holt: And comma.

20
00:01:37.839 --> 00:01:40.051
&gt;&gt; Brian Holt: This.state.

21
00:01:43.554 --> 00:01:45.985
&gt;&gt; Brian Holt: Right,
cuz what's this doing?

22
00:01:45.985 --> 00:01:53.467
This refers to, so this, this,
[LAUGH] this, this refers to location.

23
00:01:53.467 --> 00:01:56.906
Cuz that function is on
the location object here, so

24
00:01:56.906 --> 00:01:59.182
it refers to not the whole object.

25
00:01:59.182 --> 00:02:04.584
It refers to just the location object.

26
00:02:04.584 --> 00:02:09.174
The general rule of thumb,
which this is an imperfect rule,

27
00:02:09.174 --> 00:02:12.063
is it's the closest object, right?

28
00:02:12.063 --> 00:02:15.303
Or the nearest object that it's within.

29
00:02:15.303 --> 00:02:18.117
So that's what this refers to.

30
00:02:18.117 --> 00:02:20.831
Now, that's not always true.

31
00:02:23.052 --> 00:02:27.778
&gt;&gt; Brian Holt: I will invite you
to take Kyle Simpson's courses.

32
00:02:27.778 --> 00:02:30.518
He explains this really well for
Frontend Masters.

33
00:02:30.518 --> 00:02:33.110
He also has a book series called
You Don't Know JavaScript, and

34
00:02:33.110 --> 00:02:34.361
it goes into that really well.

35
00:02:34.361 --> 00:02:39.425
It's free on GitHub, or
you can buy it from O'Reilly.

36
00:02:39.425 --> 00:02:41.458
And he really gets deep into this.

37
00:02:41.458 --> 00:02:44.402
Context in JavaScript,
it's a deep rabbit hole.

38
00:02:44.402 --> 00:02:47.361
It's a really deep rabbit hole.

39
00:02:47.361 --> 00:02:50.961
But suffice to say,
in this particular thing,

40
00:02:50.961 --> 00:02:56.633
your intuition here is going to be
correct, that this refers to me up here.

41
00:02:58.607 --> 00:02:59.391
&gt;&gt; Brian Holt: We follow so far?

42
00:03:01.333 --> 00:03:01.979
&gt;&gt; Brian Holt: Okay.

43
00:03:04.162 --> 00:03:08.526
&gt;&gt; Brian Holt: So what happens if I refer
to this outside of an object, right?

44
00:03:08.526 --> 00:03:11.826
So right here,
on line 1 where I just refer to this,

45
00:03:11.826 --> 00:03:13.787
it's not inside of an object.

46
00:03:13.787 --> 00:03:18.906
Well, JavaScript executes in what's
called a global scope, right?

47
00:03:18.906 --> 00:03:22.730
If you're in a browser,
the name of that is window.

48
00:03:22.730 --> 00:03:27.492
That's just what it happens to be called,
it refers to the entire window.

49
00:03:27.492 --> 00:03:31.532
If I'm in here and I say window, right?

50
00:03:31.532 --> 00:03:37.122
Window is the entire window that I'm
inside of, it's the global context.

51
00:03:37.122 --> 00:03:40.068
If I do this, notice that it's the same.

52
00:03:40.068 --> 00:03:44.919
In fact, I can say this === window,
and it's gonna say

53
00:03:44.919 --> 00:03:49.979
true,
&gt;&gt; Brian Holt: Okay,

54
00:03:49.979 --> 00:03:54.683
so the global context in this
particular case is window.

55
00:03:54.683 --> 00:03:59.967
We're gonna get into Node at the end
of the course today in a couple hours.

56
00:03:59.967 --> 00:04:04.619
And in that case it's not called window,
it's called global.

57
00:04:04.619 --> 00:04:08.751
But it depends on where you're running,
and everything we've done so far has so

58
00:04:08.751 --> 00:04:10.291
far been inside of a browser.

59
00:04:10.291 --> 00:04:15.291
So window has been the global
context this entire time.

60
00:04:15.291 --> 00:04:20.254
So window has like a bunch
of stuff on it for you.

61
00:04:20.254 --> 00:04:23.366
It has more of these kind
of quote unquote built-ins.

62
00:04:23.366 --> 00:04:26.170
So for example, it has this scrollY.

63
00:04:26.170 --> 00:04:29.328
When you're scrolling up and
down on a browser,

64
00:04:29.328 --> 00:04:34.191
it has your scroll position, and
you can actually ask the window for that.

65
00:04:34.191 --> 00:04:37.225
So this execute as soon
as I open the page, so

66
00:04:37.225 --> 00:04:40.105
when I first open the page it's a 0, 0.

67
00:04:40.105 --> 00:04:43.076
If I change this right now it's
going to rerun the code, and

68
00:04:43.076 --> 00:04:46.950
this is gonna be a different number,
it's gonna be how far down the page I am.

69
00:04:46.950 --> 00:04:51.534
So if I hit delete notice that
a lot further down the page now.

70
00:04:51.534 --> 00:04:57.823
Now, if I change this right now it still
says that because I haven't scrolled any.

71
00:04:57.823 --> 00:05:00.036
If I scroll a little bit more and
I change it again,

72
00:05:00.036 --> 00:05:02.004
it's gonna be a different number, right?

73
00:05:02.004 --> 00:05:04.554
So it's my scroll position on the page,

74
00:05:04.554 --> 00:05:07.488
that's how many pixels
I'm down on the page.

75
00:05:07.488 --> 00:05:10.611
There's also scrollX as well,
as you might imagine, and

76
00:05:10.611 --> 00:05:13.363
that's how far I've been
scrolling side to side.

77
00:05:13.363 --> 00:05:17.235
If you notice, I actually have disallowed
you from scrolling side to side, so

78
00:05:17.235 --> 00:05:19.238
that's why it's always going to be 0.

79
00:05:19.238 --> 00:05:20.858
But if I didn't disallow that,

80
00:05:20.858 --> 00:05:24.342
it would also tell you where you're
scroll is on the x-axis as well.

81
00:05:25.909 --> 00:05:27.587
&gt;&gt; Brian Holt: Make sense?

82
00:05:27.587 --> 00:05:29.462
So there's a bunch of stuff like this.

83
00:05:29.462 --> 00:05:33.920
If you come in here again,
if you say window.,

84
00:05:33.920 --> 00:05:38.832
you can see here it's got
a ton of stuff on it, a ton.

85
00:05:40.944 --> 00:05:45.124
&gt;&gt; Brian Holt: Okay, I don't even
know what a fifth of those are.

86
00:05:45.124 --> 00:05:48.084
So you don't have to know what they are.

87
00:05:48.084 --> 00:05:51.476
Context is hard, and it gets harder,

88
00:05:51.476 --> 00:05:57.106
because when Context breaks down,
it's really not obvious.

89
00:05:59.676 --> 00:06:03.010
&gt;&gt; Brian Holt: So
the deeper rule of thumb is that it

90
00:06:03.010 --> 00:06:06.575
matters where a function's called.

91
00:06:06.575 --> 00:06:09.534
And in what context a function is called.

92
00:06:09.534 --> 00:06:11.676
And how a function's called.

93
00:06:11.676 --> 00:06:14.292
So there's a bunch of
ways you can fiddle with,

94
00:06:16.432 --> 00:06:17.429
&gt;&gt; Brian Holt: Context, and

95
00:06:17.429 --> 00:06:19.509
it's subtle and insidious.

96
00:06:19.509 --> 00:06:25.090
And so, my advice to you is as much
as possible do not rely on this and

97
00:06:25.090 --> 00:06:26.199
in context.

98
00:06:26.199 --> 00:06:30.671
Rather, pass those things in as variables,
right?

99
00:06:30.671 --> 00:06:33.221
So what I could have done here for
this getAddress?

100
00:06:33.221 --> 00:06:38.049
I could have made getAddress a function
that you passed in an object to

101
00:06:38.049 --> 00:06:41.138
that read things off of the object, right?

102
00:06:41.138 --> 00:06:46.096
So I would've pulled getAddress
totally off as its own

103
00:06:46.096 --> 00:06:51.176
function that took in some
sort of like person, right?

104
00:06:51.176 --> 00:06:53.927
And then it returned this for
that person, right?

105
00:06:53.927 --> 00:06:57.372
This is when we get far
better design pattern than

106
00:06:57.372 --> 00:07:00.995
just putting a getAddress
function on the person.

107
00:07:00.995 --> 00:07:04.375
Personal opinion, but I also,
it's right so just do that.

108
00:07:04.375 --> 00:07:05.893
[LAUGH] Just kidding.

109
00:07:05.893 --> 00:07:10.013
[LAUGH] Cool, does that make sense?

110
00:07:10.013 --> 00:07:14.095
It's just a better programming
practice for JavaScript,

111
00:07:14.095 --> 00:07:16.797
because this is really easy to mess up.

