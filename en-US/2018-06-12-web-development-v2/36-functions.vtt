WEBVTT

1
00:00:00.000 --> 00:00:05.371
&gt;&gt; Brian Holt: So far, we've just kinda
been executing just little statements.

2
00:00:05.371 --> 00:00:08.126
If we had to do everything like this,
this is actually, there's a term for

3
00:00:08.126 --> 00:00:08.885
what we're doing.

4
00:00:08.885 --> 00:00:10.418
It's called procedural programming.

5
00:00:10.418 --> 00:00:15.898
Again, one of those words that you do not
have to remember, it's just kinda FYI.

6
00:00:15.898 --> 00:00:20.433
If we had to do everything this way,
it would be kinda crappy, right?

7
00:00:20.433 --> 00:00:24.957
Cuz we'd have to write our programs
just entirely like a procedure,

8
00:00:24.957 --> 00:00:26.679
and that's far less fun.

9
00:00:26.679 --> 00:00:29.541
There's a thing in
JavaScript called functions.

10
00:00:29.541 --> 00:00:33.166
Which is pretty common,
most programming languages have them.

11
00:00:33.166 --> 00:00:37.878
And they basically encapsulate little
pieces of logic that you can reuse all

12
00:00:37.878 --> 00:00:38.913
over the place.

13
00:00:38.913 --> 00:00:42.560
So let's just dive right into it and
see what it looks like.

14
00:00:42.560 --> 00:00:49.701
So I have a function here called
addTwo that accepts a number, right?

15
00:00:49.701 --> 00:00:51.885
So inside of these parentheses,

16
00:00:51.885 --> 00:00:55.947
this is all the input that this
function would accept, okay?

17
00:00:55.947 --> 00:01:02.150
So this one accepts one number, and
then it returns that number + 2.

18
00:01:02.150 --> 00:01:06.418
So as you might imagine,
if I do addTwo(5),

19
00:01:06.418 --> 00:01:12.304
what do you think I'm going to get
down here for the finalAnswer?

20
00:01:12.304 --> 00:01:13.801
&gt;&gt; Speaker 2: 7.
&gt;&gt; Brian Holt: 7, right?

21
00:01:13.801 --> 00:01:17.486
Cuz it takes 5,
5 then becomes the number right here.

22
00:01:17.486 --> 00:01:24.930
So then it returns 5 plus 2,
you get 7, right?

23
00:01:24.930 --> 00:01:28.344
I can go down here and say console.log,

24
00:01:30.448 --> 00:01:34.478
&gt;&gt; Brian Holt: addTwo(100).

25
00:01:37.670 --> 00:01:40.000
&gt;&gt; Brian Holt: So
what's cool about addTwo now is,

26
00:01:40.000 --> 00:01:43.543
I have this function that I
can reuse all over the place.

27
00:01:43.543 --> 00:01:47.549
I write it once, and I get to reuse this
function over, and over, and over again.

28
00:01:47.549 --> 00:01:48.701
Which is really nice,

29
00:01:48.701 --> 00:01:52.290
because then I don't have to rewrite
this a bunch of different times.

30
00:01:52.290 --> 00:01:55.435
Now, this is totally worthless.

31
00:01:55.435 --> 00:01:57.712
There's absolutely no reason
that I would write addTwo.

32
00:01:57.712 --> 00:02:00.968
I would just normally add two to
something, that's not really that useful.

33
00:02:00.968 --> 00:02:05.166
But you can make these functions quite
involved, that do a lot of things.

34
00:02:09.353 --> 00:02:10.327
&gt;&gt; Brian Holt: So
here's a really good one.

35
00:02:10.327 --> 00:02:14.970
I wrote this function called greet
that takes in a firstName, a lastName,

36
00:02:14.970 --> 00:02:15.937
an honorific.

37
00:02:15.937 --> 00:02:21.412
That's the term for Mr.,
Mrs., Ms., all those things,

38
00:02:21.412 --> 00:02:25.215
Dr., that's considered an honorific.

39
00:02:25.215 --> 00:02:30.558
And a greeting, and then I return
this really long string here, right?

40
00:02:30.558 --> 00:02:34.505
So I console.log down here,
(greet('Brian', 'Holt', 'Lord',

41
00:02:34.505 --> 00:02:35.798
'Salutations')).

42
00:02:35.798 --> 00:02:38.838
And so you can see down here,
Salutations Lord Holt!

43
00:02:38.838 --> 00:02:39.910
I was having fun.

44
00:02:39.910 --> 00:02:43.131
[LAUGH] I'm extremely that
pleased you could join us, Brian!

45
00:02:43.131 --> 00:02:46.962
I hope you enjoy it, Lord Holt, okay?

46
00:02:46.962 --> 00:02:50.788
And then down here, I do it with Jack,
Sparrow, Captain, and A-hoy.

47
00:02:50.788 --> 00:02:53.597
And it says, A-hoy, Captain Sparrow!

48
00:02:53.597 --> 00:02:55.999
I feel ridiculous reading this out loud.

49
00:02:55.999 --> 00:02:57.064
It doesn't matter, I'm still doing it.

50
00:02:57.064 --> 00:02:59.262
&gt;&gt; [LAUGH]
&gt;&gt; Brian Holt: A-hoy, Captain Sparrow!

51
00:02:59.262 --> 00:03:03.131
I'm extremely pleased you could join us,
Jack!

52
00:03:03.131 --> 00:03:04.820
I hope you enjoy your stay,
Captain Sparrow.

53
00:03:04.820 --> 00:03:06.133
But you can see that here,

54
00:03:06.133 --> 00:03:09.309
I didn't have to rewrite that
whole string every single time.

55
00:03:09.309 --> 00:03:13.550
I was able to use template strings and
just plug in the various variables, right?

56
00:03:15.655 --> 00:03:17.163
&gt;&gt; Brian Holt: So does that make sense?

57
00:03:17.163 --> 00:03:19.335
See a little bit more how
functions can be useful?

58
00:03:19.335 --> 00:03:21.202
And they get even more involved than this.

59
00:03:21.202 --> 00:03:23.050
You can start doing some
really cool stuff with them.

60
00:03:23.050 --> 00:03:26.579
So let's just kinda brief mechanics.

61
00:03:26.579 --> 00:03:30.155
This is, you say function to declare
that you're making a new function.

62
00:03:30.155 --> 00:03:31.797
This is the name of
the function right here.

63
00:03:31.797 --> 00:03:33.895
So this is something that you name.

64
00:03:33.895 --> 00:03:38.596
And again, try and
give this a really descriptive name.

65
00:03:38.596 --> 00:03:42.151
So greet is a pretty good one,
because you know that whatever comes back

66
00:03:42.151 --> 00:03:44.892
out of greet is gonna be some
sort of greeting, right?

67
00:03:44.892 --> 00:03:48.210
Also kind of a rule of thumb,
this is not a hard and fast rule, but

68
00:03:48.210 --> 00:03:49.632
it's kind of a useful one.

69
00:03:49.632 --> 00:03:52.455
Generally, function names are verbs, so,

70
00:03:52.455 --> 00:03:55.437
because the function does something,
right?

71
00:03:55.437 --> 00:03:56.860
So greet is a verb.

72
00:03:56.860 --> 00:03:59.849
addTwo, you're doing something
to something, right?

73
00:03:59.849 --> 00:04:01.396
So a function is generally a verb.

74
00:04:01.396 --> 00:04:05.852
Whereas variable names are typically
nouns, because it represents a thing.

75
00:04:05.852 --> 00:04:10.004
So firstName is a thing,
lastName is a thing, honorific is a thing.

76
00:04:10.004 --> 00:04:13.896
So generally, variables are nouns.

77
00:04:13.896 --> 00:04:15.790
Generally, functions are verbs.

78
00:04:18.925 --> 00:04:19.775
&gt;&gt; Brian Holt: There's no one,

79
00:04:19.775 --> 00:04:22.444
there's nothing that's gonna
make you do it that way.

80
00:04:22.444 --> 00:04:25.349
It's just a useful practice to get into.

81
00:04:27.998 --> 00:04:31.166
&gt;&gt; Brian Holt: Let's talk
about how you call functions.

82
00:04:31.166 --> 00:04:35.464
So whenever you invoke a function,
whenever you're using a function,

83
00:04:35.464 --> 00:04:38.717
the way that you say that is
you are calling a function.

84
00:04:38.717 --> 00:04:41.390
I don't actually really
know where that came from.

85
00:04:41.390 --> 00:04:43.521
That's just the name for it.

86
00:04:43.521 --> 00:04:46.688
Or you can say invoke, but
generally, people say call.

87
00:04:46.688 --> 00:04:51.586
The way you do that is you
put parentheses after it.

88
00:04:51.586 --> 00:04:57.641
So even if this took in nothing,
&gt;&gt; Brian Holt: You would just do this.

89
00:04:59.914 --> 00:05:01.880
&gt;&gt; Brian Holt: Let's just say this is 5.

90
00:05:01.880 --> 00:05:06.546
So even if I'm not giving it anything,
you just put empty parentheses at

91
00:05:06.546 --> 00:05:10.000
the end to signify that you
are calling the function.

92
00:05:10.000 --> 00:05:12.345
So that's what those
parentheses at the end mean.

93
00:05:12.345 --> 00:05:16.040
It means that a function is being invoked.

94
00:05:16.040 --> 00:05:18.437
That make sense?

95
00:05:18.437 --> 00:05:20.959
Okay, that'll become important later,

96
00:05:20.959 --> 00:05:24.328
because you can actually pass
around functions as well.

97
00:05:24.328 --> 00:05:26.463
We'll see how that works in a bit.

98
00:05:26.463 --> 00:05:29.672
But you do need to put the parentheses
there if you're intending to call it.

99
00:05:29.672 --> 00:05:34.672
If I just put addTwo right here,
this is not useful.

100
00:05:34.672 --> 00:05:36.475
Because actually what happens is,

101
00:05:36.475 --> 00:05:39.671
now finalAnswer actually
represents the function, addTwo.

102
00:05:39.671 --> 00:05:41.770
And it's not actually
invoking the function.

103
00:05:41.770 --> 00:05:45.836
It's a little confusing, but
now finalAnswer is actually the function.

104
00:05:45.836 --> 00:05:51.054
So I can call finalAnswer,
which then will call the function.

105
00:05:51.054 --> 00:05:52.099
Again, we'll get there.

106
00:05:52.099 --> 00:05:55.217
If that doesn't make a ton of sense,
I have a section on this.

107
00:05:55.217 --> 00:05:57.717
So make sure you're putting parentheses.

108
00:06:01.750 --> 00:06:02.451
&gt;&gt; Brian Holt: Okay.

109
00:06:07.758 --> 00:06:10.342
&gt;&gt; Brian Holt: Call, yeah,
that's called calling a function.

110
00:06:10.342 --> 00:06:11.950
And just look out for parentheses.

111
00:06:11.950 --> 00:06:17.540
Anytime you see parentheses, you know that
functions are being invoked somewhere.

112
00:06:17.540 --> 00:06:21.920
For example, notice that console.log here,
right, you put parentheses there.

113
00:06:21.920 --> 00:06:26.251
Log is a function,
it's a function that's being called.

114
00:06:28.987 --> 00:06:33.256
&gt;&gt; Brian Holt: Okay, so logOutYourHome,
this is another function that I wrote.

115
00:06:33.256 --> 00:06:36.758
I put my HomeCity, HomeState, HomeCountry.

116
00:06:36.758 --> 00:06:38.701
And then I call logOutYourHome here.

117
00:06:38.701 --> 00:06:42.000
I call it with myHomeCity,
myHomeState, and myHomeCountry, right?

118
00:06:42.000 --> 00:06:46.157
And then this gets passed
into logOutYourHome, right,

119
00:06:46.157 --> 00:06:48.504
as city, state, and country.

120
00:06:48.504 --> 00:06:51.595
I'm calling console.log here.

121
00:06:51.595 --> 00:06:56.989
But I could have just as easily said

122
00:06:56.989 --> 00:07:03.127
logOutYourHome with, I don't know,

123
00:07:03.127 --> 00:07:07.591
you could have said Torino,

124
00:07:07.591 --> 00:07:12.993
which is in Piemonte, and Italy.

125
00:07:16.672 --> 00:07:19.770
&gt;&gt; Brian Holt: You are from Torino,
Piemonte Italy.

126
00:07:19.770 --> 00:07:23.459
I guess, make that Italia,
cuz I did it in Italian.

127
00:07:24.941 --> 00:07:25.638
&gt;&gt; Brian Holt: Right?

128
00:07:27.105 --> 00:07:29.883
&gt;&gt; Brian Holt: So you can either pass
variables into there, that works, or

129
00:07:29.883 --> 00:07:31.690
you can put strings directly in there.

130
00:07:31.690 --> 00:07:36.007
Both of those things work,
because myHomeCity represents a string.

131
00:07:36.007 --> 00:07:39.869
So that these things, you can put
either the representation of it, or

132
00:07:39.869 --> 00:07:42.103
you can put the direct raw data in there.

133
00:07:42.103 --> 00:07:43.399
Both of those work.

