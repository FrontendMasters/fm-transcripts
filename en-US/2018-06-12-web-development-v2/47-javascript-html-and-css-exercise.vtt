WEBVTT

1
00:00:00.160 --> 00:00:03.440
&gt;&gt; Brian Holt: We are in Chrome and
we're gonna build an HTML, CSS,

2
00:00:03.440 --> 00:00:07.560
and JavaScript calculator, so
you're gonna have to use EventListeners.

3
00:00:07.560 --> 00:00:08.254
You're gonna have to use HTML.

4
00:00:08.254 --> 00:00:09.950
You're gonna have to use CSS, JavaScript.

5
00:00:11.410 --> 00:00:14.700
For me, personally, the way that
I did this is I built the HTML,

6
00:00:14.700 --> 00:00:17.890
CSS first to make it
look like the calculator.

7
00:00:17.890 --> 00:00:19.853
And then, I went back into the JavaScript.

8
00:00:19.853 --> 00:00:21.980
It's probably generally gonna
be a pretty successful strategy.

9
00:00:21.980 --> 00:00:25.295
I would suggest that.

10
00:00:25.295 --> 00:00:26.920
Notice, they have nice hover states.

11
00:00:26.920 --> 00:00:28.710
You probably can't really see
that on the projector, but

12
00:00:28.710 --> 00:00:30.590
it has nice little hover states.

13
00:00:30.590 --> 00:00:36.835
And then, active states, when you press
it, the button gets a little bit darker.

14
00:00:36.835 --> 00:00:41.941
And if I do 25 plus 2 equals 27,

15
00:00:41.941 --> 00:00:48.071
minus 5 equals that times 6 equals that,

16
00:00:48.071 --> 00:00:54.736
divided by 3 equals that,
so on and so forth.

17
00:00:54.736 --> 00:00:58.293
There's a ton of edge cases here for
the calculator,

18
00:00:58.293 --> 00:01:04.040
if someone just types equal bunch of
times don't bother worrying about that.

19
00:01:04.040 --> 00:01:07.010
Or if they hit backspace when
they're not supposed to, or clear,

20
00:01:07.010 --> 00:01:09.590
whatever, you don't have
to worry about that.

21
00:01:11.280 --> 00:01:12.810
This is the backspace by the way.

22
00:01:12.810 --> 00:01:18.090
I also, I told you that JavaScript
is not good about numbers.

23
00:01:18.090 --> 00:01:22.600
So just assume everything is an integer,

24
00:01:22.600 --> 00:01:25.980
everything is a whole number,
don't worry about decimals.

25
00:01:25.980 --> 00:01:28.250
You can if you want to,
you're just gonna have a bad time.

26
00:01:30.240 --> 00:01:33.810
Because I can divide by 2 and
it'll do 2.5 here, but

27
00:01:33.810 --> 00:01:39.380
then I think what my calculator
does it a plus 2 is it rounds down.

28
00:01:39.380 --> 00:01:42.327
So I wouldn't mind use just
use math that floor and

29
00:01:42.327 --> 00:01:44.650
just assume everything is an integer.

30
00:01:46.600 --> 00:01:51.138
The C stands for clear that's just
clear the calculator and start again.

31
00:01:51.138 --> 00:01:55.460
25 times minus 3 equals 0 so
on and so forth.

32
00:01:55.460 --> 00:01:58.350
I think you understand how
a calculator works hopefully.

33
00:02:00.270 --> 00:02:07.733
So our calculator should
look more less like this.

34
00:02:07.733 --> 00:02:09.800
The calculator should function
like a normal calculator.

35
00:02:12.370 --> 00:02:15.509
And don't implement any
of the other things so

36
00:02:15.509 --> 00:02:20.499
this is a little bit of the deviation
from a normal IOS calculator I didn't

37
00:02:20.499 --> 00:02:25.660
do percentages I didn't do the period or
anything like that.

38
00:02:25.660 --> 00:02:26.300
C means clear.

39
00:02:26.300 --> 00:02:27.850
When he clicks it,
he should clear everything and

40
00:02:27.850 --> 00:02:31.240
go back to where it was previously.

41
00:02:32.960 --> 00:02:34.437
Doing the back gets us extra credit so

42
00:02:34.437 --> 00:02:40.830
maybe do that last.
&gt;&gt; Brian Holt: Don't

43
00:02:40.830 --> 00:02:42.540
worry if the number is too long for
the screen.

44
00:02:42.540 --> 00:02:43.660
Just overflow.

45
00:02:43.660 --> 00:02:45.020
That's fine.

46
00:02:45.020 --> 00:02:51.529
Or however you want to handle it.
&gt;&gt; Brian Holt: I don't,

47
00:02:51.529 --> 00:02:55.040
when someone hits equal, I don't
really care what you do afterwards.

48
00:02:55.040 --> 00:02:56.070
You can clear it.

49
00:02:56.070 --> 00:02:59.568
You can do it whatever you want,
do whatever easiest for you,

50
00:02:59.568 --> 00:03:02.610
that's not what I'm testing you on.

51
00:03:02.610 --> 00:03:07.350
So let's go through just this
some hints and some tips.

52
00:03:10.470 --> 00:03:13.759
Break this into smaller problems,
create the additional CSS.

53
00:03:13.759 --> 00:03:17.468
First, I just used monospaced for
this font up here, and

54
00:03:17.468 --> 00:03:21.360
I think the rest of it is arial or
something like that.

55
00:03:21.360 --> 00:03:23.750
Doesn't really matter feel free to choose.

56
00:03:23.750 --> 00:03:27.550
There are so many ways to do this,
so, so, so many ways.

57
00:03:27.550 --> 00:03:32.935
Do the way that makes sense to you.
&gt;&gt; Brian Holt: I use Flexbox

58
00:03:32.935 --> 00:03:39.740
to do the rows, you could do this
all in one div using Flex wrap.

59
00:03:39.740 --> 00:03:44.562
That's totally up to you.
&gt;&gt; Brian Holt: The secret to getting equal

60
00:03:44.562 --> 00:03:45.100
gutters.

61
00:03:45.100 --> 00:03:48.510
So these little black lines between each
other, you could do this with borders.

62
00:03:48.510 --> 00:03:51.300
I did it with, they're kind of gutters,
so it's a black background and

63
00:03:51.300 --> 00:03:52.730
they're just a little bit spaced apart.

64
00:03:52.730 --> 00:03:56.078
[COUGH] and I give them a half
percent space between them and

65
00:03:56.078 --> 00:03:59.915
that's how I was able to get that
nice little even spacing between

66
00:03:59.915 --> 00:04:03.640
them.
&gt;&gt; Brian Holt: That's a good

67
00:04:03.640 --> 00:04:06.170
way to do it and then you can
use space between to space them

68
00:04:06.170 --> 00:04:11.059
out.
&gt;&gt; Brian Holt: Just kind of a pro tip in

69
00:04:11.059 --> 00:04:16.460
general with CSS, it's hard to get
equal horizontal and vertical spacing.

70
00:04:16.460 --> 00:04:20.511
And the easiest way to do that is,
if you do margin-left and

71
00:04:20.511 --> 00:04:24.082
margin-right at 0.5% or
something like that.

72
00:04:24.082 --> 00:04:27.640
Margin-bottom and
margin-top are calculated in terms not of

73
00:04:27.640 --> 00:04:30.900
vertical spacing, but
of horizontal spacing.

74
00:04:30.900 --> 00:04:32.469
Which is counter intuitive but

75
00:04:32.469 --> 00:04:35.856
also very helpful right because
I can say margin bottom 0.5%.

76
00:04:35.856 --> 00:04:40.965
That's calculated in terms
of horizontal space,

77
00:04:40.965 --> 00:04:47.077
so you can make them equal by
using margins and percentages.

78
00:04:47.077 --> 00:04:52.030
I used last child to get these buttons
to give them different classes too and

79
00:04:52.030 --> 00:04:52.690
I will be fine.

80
00:04:59.570 --> 00:05:04.300
Sometimes I just kind of eyeball it a
little bit as well, or rather very often.

81
00:05:04.300 --> 00:05:05.750
Do I just kind of look at things and say,

82
00:05:05.750 --> 00:05:09.050
does that look evenly spaced close enough,
right.

83
00:05:11.300 --> 00:05:12.820
JavaScript tips.

84
00:05:12.820 --> 00:05:17.130
There's no wrong ways to do this If
you're writing over 200 lines of code,

85
00:05:17.130 --> 00:05:19.590
you're probably writing too much code.

86
00:05:19.590 --> 00:05:23.261
I think I did it in about 80 lines of
code including all the extra white

87
00:05:23.261 --> 00:05:26.811
space.
&gt;&gt; Brian Holt: I use console.log a lot

88
00:05:26.811 --> 00:05:30.261
when I'm writing code, so
feel free to just throw a console.log and

89
00:05:30.261 --> 00:05:33.959
see what's happening.
&gt;&gt; Brian Holt: You'll

90
00:05:33.959 --> 00:05:35.460
need to keep track of a lot of variables.

91
00:05:35.460 --> 00:05:36.810
Just kind of do that.

92
00:05:36.810 --> 00:05:38.680
Be aware that you need to do that.

93
00:05:38.680 --> 00:05:42.530
I like to break functions, or
problems down into small functions.

94
00:05:42.530 --> 00:05:45.480
I wanna have one function that
does one thing really well.

95
00:05:45.480 --> 00:05:49.560
That's kind of like just a good
tip in general for programming.

96
00:05:49.560 --> 00:05:53.150
So in this particular example I
wrote eight different functions and

97
00:05:53.150 --> 00:05:54.430
that's kind of how I handled it.

98
00:05:55.820 --> 00:05:59.120
And you can also add an event list
node to each button individually.

99
00:05:59.120 --> 00:06:03.615
As you may imagine, I just wrote
one that lists the top level and

100
00:06:03.615 --> 00:06:05.450
then does delegation from there.

101
00:06:08.920 --> 00:06:11.570
And we talked about type and
coercion, stuff like that.

102
00:06:13.010 --> 00:06:17.430
Anything that goes into the DOM
is inherently a string, right.

103
00:06:17.430 --> 00:06:20.900
So this 85 right here is a string.

104
00:06:20.900 --> 00:06:23.390
Everything that's on the DOM is a string,
there's no numbers on the DOM.

105
00:06:23.390 --> 00:06:26.100
Everything gets turned into a string.

106
00:06:26.100 --> 00:06:27.910
So if I'm trying to add numbers to this,

107
00:06:29.020 --> 00:06:32.460
I have to turn it into a number first
before I turn it back into a string.

108
00:06:32.460 --> 00:06:38.284
Because if I do 85 plus 8 when
they're strings, I get 858.

109
00:06:38.284 --> 00:06:40.070
So make sure you're aware of that.

110
00:06:40.070 --> 00:06:42.759
Down here I have a little
demo to show you how to do

111
00:06:42.759 --> 00:06:47.650
that.
&gt;&gt; Brian Holt: So I have const number

112
00:06:47.650 --> 00:06:52.436
equals 10, and then I have number
target which is just gonna be some div.

113
00:06:52.436 --> 00:06:54.530
Actually, it's this div
if we're being honest.

114
00:06:56.370 --> 00:07:01.620
And then I do console.log num,
type of num, so

115
00:07:01.620 --> 00:07:06.240
a num, which is this one,
we do type of type of gives you back what

116
00:07:06.240 --> 00:07:10.680
the type of that thing is, so if I do
type of num it gives me number, right?

117
00:07:10.680 --> 00:07:12.880
Because num ten is a number.

118
00:07:14.310 --> 00:07:18.650
Then here I take that numb and
I put it into a DOM and then I ask

119
00:07:18.650 --> 00:07:23.190
what is the type of innerText you probably
guess what the name like innerText?

120
00:07:23.190 --> 00:07:25.000
It's gonna get me that string.

121
00:07:26.620 --> 00:07:30.030
So you have to sure that things
end up being both numbers.

122
00:07:30.030 --> 00:07:32.810
The way that you do that is with
a function called parseInt.

123
00:07:33.902 --> 00:07:37.300
You're saying here is a string, I'm giving
you a string, I want you to try and

124
00:07:37.300 --> 00:07:39.230
give me back a number of that.

125
00:07:39.230 --> 00:07:43.010
So if I came in here and said, notice
that this has quotes around it right

126
00:07:43.010 --> 00:07:46.317
now.
&gt;&gt; Brian Holt: Let's make this

127
00:07:46.317 --> 00:07:46.910
a little bigger.

128
00:07:48.040 --> 00:07:56.784
If I said parseInt
&gt;&gt; Brian Holt: Notice now it's a number,

129
00:07:56.784 --> 00:08:04.273
when I say here, parseInt.
&gt;&gt; Brian Holt: It

130
00:08:04.273 --> 00:08:06.070
gives me back number as well, right?

131
00:08:06.070 --> 00:08:09.080
So that's what parseInt does, it's like I
have a string here, please give me back

132
00:08:09.080 --> 00:08:13.727
the number representation of that.
&gt;&gt; Brian Holt: I

133
00:08:13.727 --> 00:08:17.540
hesitantly show you typeof.

134
00:08:17.540 --> 00:08:22.860
Typeof is a strange beast, so
be careful how much you use typeof.

135
00:08:22.860 --> 00:08:26.080
It's very useful for
telling numbers and strings apart.

136
00:08:26.080 --> 00:08:30.770
So if you're using just numbers and just
strings, use typeof to your heart content.

137
00:08:30.770 --> 00:08:35.480
If your getting into
things like other types,

138
00:08:35.480 --> 00:08:41.560
then type level will give you some weird
stuff back, so be aware of that okay,

139
00:08:41.560 --> 00:08:44.820
so take a shot at this exercise.

