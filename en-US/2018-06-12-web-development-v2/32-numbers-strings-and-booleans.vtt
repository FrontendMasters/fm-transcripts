WEBVTT

1
00:00:00.070 --> 00:00:01.860
&gt;&gt; Marc: So,
you wrote your first JavaScript.

2
00:00:01.860 --> 00:00:06.496
You wrote your first programming,
possibly.

3
00:00:06.496 --> 00:00:10.650
Pretty cool.

4
00:00:10.650 --> 00:00:12.890
So numbers, strings, and booleans.

5
00:00:12.890 --> 00:00:14.880
These are called types.

6
00:00:14.880 --> 00:00:18.070
You don't really have to care
a whole lot about that but

7
00:00:18.070 --> 00:00:21.890
just know that there are multiple
different kinds of variables.

8
00:00:21.890 --> 00:00:25.930
So whereas before we were dealing with
numbers, right, I think this makes sense,

9
00:00:25.930 --> 00:00:27.740
that monthlyRent = 500.

10
00:00:27.740 --> 00:00:32.790
By the way, if you have like 1500,
do not put commas between numbers.

11
00:00:32.790 --> 00:00:33.770
That doesn't work.

12
00:00:33.770 --> 00:00:34.560
Just so you know.

13
00:00:36.240 --> 00:00:38.310
Actually, pretty soon you'll be
able to put underscores there.

14
00:00:39.390 --> 00:00:43.160
That's a new part of JavaScript,
people wanted it, I don't care.

15
00:00:43.160 --> 00:00:44.050
Anyway, not today.

16
00:00:44.050 --> 00:00:45.670
You can't do that today.

17
00:00:45.670 --> 00:00:48.250
But don't separate numbers,
I guess that's what I'm trying to say.

18
00:00:50.290 --> 00:00:55.270
So we're going to be dealing
with something called strings.

19
00:00:55.270 --> 00:01:00.660
So they're called strings because they are
a string of characters strung together,

20
00:01:00.660 --> 00:01:04.120
think like Cheerios on a string, right.

21
00:01:04.120 --> 00:01:07.650
Same thing, this is a bunch
of characters put together.

22
00:01:07.650 --> 00:01:13.350
And they're either between single quotes,
double quotes, or back ticks.

23
00:01:13.350 --> 00:01:15.660
Back ticks are the ones that
are on the same key as the tilde,

24
00:01:15.660 --> 00:01:18.510
which is the left of one, right.

25
00:01:18.510 --> 00:01:21.000
It looks like that.

26
00:01:21.000 --> 00:01:23.150
It's probably really hard to see but
that's back tick.

27
00:01:24.170 --> 00:01:26.760
So you can also use that
instead of double quotes.

28
00:01:26.760 --> 00:01:29.260
You can put a back tick here as well and

29
00:01:29.260 --> 00:01:34.481
that works just fine.
&gt;&gt; Marc: So again this

30
00:01:34.481 --> 00:01:38.920
is called a string which is basically like
words and character and stuff like that.

31
00:01:41.900 --> 00:01:45.740
So now my name is being stored
inside of this variable and

32
00:01:45.740 --> 00:01:47.760
then I console logged out my name.

33
00:01:47.760 --> 00:01:51.560
And you see down here,
it's logging out the string, Bryan Holt.

34
00:01:51.560 --> 00:01:54.230
The word string is really important,
it's something that you should remember.

35
00:01:54.230 --> 00:01:57.805
It's important across all programming
languages, all them column strings, so

36
00:01:57.805 --> 00:02:05.861
it's just what you need to know.
&gt;&gt; Marc: Questions about strings so

37
00:02:05.861 --> 00:02:09.498
far?
&gt;&gt; Marc: Okay.

38
00:02:12.299 --> 00:02:13.145
&gt;&gt; Marc: They're everywhere

39
00:02:13.145 --> 00:02:15.100
in programming as you might imagine.

40
00:02:15.100 --> 00:02:18.480
We're constantly keeping track of
things like address, names of products,

41
00:02:18.480 --> 00:02:22.860
cities, anything you can think of,
we use strings everywhere.

42
00:02:22.860 --> 00:02:27.491
So they are quite important.
&gt;&gt; Marc: We can

43
00:02:27.491 --> 00:02:30.320
connect strings together using plus signs.

44
00:02:30.320 --> 00:02:32.420
We are basically almost
doing like string math.

45
00:02:33.620 --> 00:02:37.920
So if I have sentence right here
with the first name and last name.

46
00:02:37.920 --> 00:02:40.370
And I do console.log(sentence).

47
00:02:40.370 --> 00:02:41.060
I have hello.

48
00:02:42.490 --> 00:02:44.060
Notice that there is a space there.

49
00:02:45.480 --> 00:02:49.690
firstname space, because I want a space
between my first name and my last name.

50
00:02:49.690 --> 00:02:51.550
And it says, How are you?

51
00:02:51.550 --> 00:02:53.970
So it says, Hello Brian Holt How are you?

52
00:02:53.970 --> 00:02:59.040
Right, if we're looking at this?
&gt;&gt; Marc: Right

53
00:02:59.040 --> 00:03:03.860
there?
&gt;&gt; Marc: Make sense?

54
00:03:03.860 --> 00:03:07.740
That's called string concatenation because
we're just connecting strings together to

55
00:03:07.740 --> 00:03:08.710
make a larger string.

56
00:03:10.580 --> 00:03:13.570
Now, again, you need spaces here.

57
00:03:13.570 --> 00:03:14.529
Otherwise, if you look,

58
00:03:14.529 --> 00:03:19.649
if I got rid of all of these.
&gt;&gt; Marc: It

59
00:03:19.649 --> 00:03:21.440
would mush it all together, right?

60
00:03:21.440 --> 00:03:25.090
You actually have to tell it, please
put spaces here or it does not do it.

61
00:03:25.090 --> 00:03:29.490
Cuz the computer does exactly what you
tell to do which is both a good and

62
00:03:29.490 --> 00:03:30.600
a very terrible thing.

63
00:03:32.320 --> 00:03:34.980
So, that's why you need to spaces
there as you get the spaces between

64
00:03:34.980 --> 00:03:35.700
Hello Brian Holt.

65
00:03:37.470 --> 00:03:38.970
So, this is the old way of doing this.

66
00:03:38.970 --> 00:03:42.430
It's tedious as you can see, you have
to put a lot of plus signs in here.

67
00:03:42.430 --> 00:03:44.740
It'd be better if we
didn't do have that way.

68
00:03:44.740 --> 00:03:48.010
So you can do these with what
are called template strings.

69
00:03:48.010 --> 00:03:52.190
Template strings are brand new, as of
2015 which is quite new for JavaScript.

70
00:03:53.480 --> 00:03:55.080
By now it's like a 30 year old language.

71
00:03:57.070 --> 00:04:01.660
So if I put back ticks,
notice this one is using double quotes and

72
00:04:01.660 --> 00:04:04.340
I could've just as easily put
single quotes here as well.

73
00:04:04.340 --> 00:04:07.930
If you put back ticks this
is called a template string.

74
00:04:07.930 --> 00:04:12.120
So again, that's one of next
the one key to left key,

75
00:04:12.120 --> 00:04:14.040
the left of the one key on your keyboard.

76
00:04:15.900 --> 00:04:19.589
Put it back and I say,
Hello firstname Lastname, How are you and

77
00:04:19.589 --> 00:04:21.726
you get the exactly the same effect.

78
00:04:21.726 --> 00:04:25.640
You have this $ sign curly brace.

79
00:04:26.760 --> 00:04:31.040
And then you have something inside of
here and then end curly brace over here.

80
00:04:31.040 --> 00:04:33.440
That's how you basically tell
JavaScript to like, hey,

81
00:04:33.440 --> 00:04:35.370
I want to a put a variable here.

82
00:04:35.370 --> 00:04:38.366
So I have my first name
being stored here and

83
00:04:38.366 --> 00:04:44.457
then I'm putting that out here with hello
first name, there's a space here, right?

84
00:04:44.457 --> 00:04:51.303
But I could have just as easily
put a bunch of spaces there,

85
00:04:51.303 --> 00:04:56.354
and you can see that it moves over.
&gt;&gt; Marc: So

86
00:04:56.354 --> 00:05:00.363
${variable}, and you can do that as many
times as you want inside of your template

87
00:05:00.363 --> 00:05:05.026
stream.
&gt;&gt; Marc: Any

88
00:05:05.026 --> 00:05:10.216
questions?
&gt;&gt; Marc: So

89
00:05:10.216 --> 00:05:13.290
it's very key that you're
using back ticks here.

90
00:05:13.290 --> 00:05:16.330
I just wanna like emphasize
that a couple of times.

91
00:05:16.330 --> 00:05:19.670
In order to use the template
functionalities,

92
00:05:19.670 --> 00:05:24.450
you must be using back ticks.
&gt;&gt; Male: That only works with,

93
00:05:24.450 --> 00:05:29.550
that new, with those new
features that you're referencing.

94
00:05:31.040 --> 00:05:31.740
&gt;&gt; Marc: Which new features?

95
00:05:31.740 --> 00:05:32.450
&gt;&gt; Male: The sentence

96
00:05:32.450 --> 00:05:34.060
with template.

97
00:05:34.060 --> 00:05:35.060
&gt;&gt; Marc: Yeah.
&gt;&gt; Male: Okay.

98
00:05:35.060 --> 00:05:35.800
&gt;&gt; Marc: Yeah, so

99
00:05:35.800 --> 00:05:38.559
if you wanna use the new features,
you have to be using the back ticks.

100
00:05:39.790 --> 00:05:41.960
If I put single quotes or

101
00:05:41.960 --> 00:05:45.970
double quotes here I would actually
literally get that outputted right?

102
00:05:45.970 --> 00:05:47.970
Which is probably not
what you're going for.

103
00:05:49.540 --> 00:05:52.340
Now by the same token up here
I don't actually have to use

104
00:05:52.340 --> 00:05:53.230
double quotes up here.

105
00:05:53.230 --> 00:05:56.550
First of all you can use single
quotes that works fine and

106
00:05:56.550 --> 00:05:59.230
you can even use back ticks up here.

107
00:05:59.230 --> 00:06:01.210
And that works as well.

108
00:06:03.270 --> 00:06:06.532
The key with back ticks is that if
you want to use the template strings,

109
00:06:06.532 --> 00:06:07.986
you have to use the back ticks.

110
00:06:07.986 --> 00:06:13.532
That's the only extra thing.

111
00:06:15.778 --> 00:06:18.850
&gt;&gt; Marc: Okay.

112
00:06:20.950 --> 00:06:22.362
&gt;&gt; Marc: Any questions about back ticks or

113
00:06:22.362 --> 00:06:26.230
anything like that?
&gt;&gt; Marc: Yes?

114
00:06:26.230 --> 00:06:27.490
&gt;&gt; Male 2: I think I have kind of

115
00:06:27.490 --> 00:06:29.260
a basic question but I just wanna see,

116
00:06:29.260 --> 00:06:32.980
so we dealt with numbers and
then we brought in variables.

117
00:06:32.980 --> 00:06:35.940
And so
if you brought numbers into variables,

118
00:06:35.940 --> 00:06:40.890
we just lose any ability to do
mathematical computations on that because,

119
00:06:40.890 --> 00:06:43.610
or is that still possible?
&gt;&gt; Marc: That's a great question.

120
00:06:43.610 --> 00:06:46.700
So if I start bringing in
numbers to my strings and

121
00:06:46.700 --> 00:06:49.810
start mixing the two together,
what happens?

122
00:06:49.810 --> 00:06:51.130
What properties does that have?

123
00:06:52.610 --> 00:06:58.360
So actually let me make sure.

124
00:06:58.360 --> 00:06:59.310
Down here somewhere.

125
00:07:01.190 --> 00:07:04.060
I do have an entire section about
talking about this coercion.

126
00:07:06.290 --> 00:07:09.980
We will get to the section on
coercion here in just a second.

127
00:07:09.980 --> 00:07:13.890
But you can use numbers inside of strings,
right.

128
00:07:13.890 --> 00:07:15.560
They're considered just another character.

129
00:07:15.560 --> 00:07:19.140
So I could put 5 here,
something like that.

130
00:07:19.140 --> 00:07:20.740
That works totally fine.

131
00:07:20.740 --> 00:07:23.040
But once it's a string,
you can't really do math with it.

132
00:07:23.040 --> 00:07:28.340
So if I do const five = "5",

133
00:07:28.340 --> 00:07:31.880
and notice that this is inside of quotes.

134
00:07:31.880 --> 00:07:33.870
So now, this is a string 5.

135
00:07:33.870 --> 00:07:39.728
If I do console.log five + five,

136
00:07:39.728 --> 00:07:44.780
it's not gonna give you ten.

137
00:07:44.780 --> 00:07:48.800
You get 55 because it's
concatenating the strings together.

138
00:07:50.510 --> 00:07:52.600
So that's what you would actually expect.

139
00:07:52.600 --> 00:07:55.088
Now, I will talk about how to
get around that a bit later.

140
00:07:57.870 --> 00:07:59.110
&gt;&gt; Marc: But yeah that's a great question.

141
00:08:00.810 --> 00:08:01.700
Any other questions?

142
00:08:01.700 --> 00:08:05.076
Please.
&gt;&gt; Male 3: Is there [COUGH] a unique

143
00:08:05.076 --> 00:08:11.100
convention for adding notes in JavaScript?
&gt;&gt; Marc: Yep.

144
00:08:11.100 --> 00:08:13.540
&gt;&gt; Male 3: That don't write into the code?

145
00:08:13.540 --> 00:08:14.660
&gt;&gt; Marc: So a thing called comments.

146
00:08:17.739 --> 00:08:18.960
&gt;&gt; Male 3: Use the slash.

147
00:08:18.960 --> 00:08:19.910
&gt;&gt; Marc: Slash slash.

148
00:08:19.910 --> 00:08:21.973
&gt;&gt; Male 3: Slash slash.

149
00:08:21.973 --> 00:08:23.606
&gt;&gt; Marc: There's two ways to it actually.

150
00:08:23.606 --> 00:08:27.870
You can also use the same that
you did with CSS and do */.

151
00:08:27.870 --> 00:08:32.180
The difference is // is gonna
do it just on one line.

152
00:08:32.180 --> 00:08:37.680
So now this is another,
&gt;&gt; Marc: Right?

153
00:08:37.680 --> 00:08:42.650
This will execute here but if I do /*,

154
00:08:42.650 --> 00:08:46.630
anything until I close it,
this is still a comment.

155
00:08:46.630 --> 00:08:50.409
Does it makes sense?
&gt;&gt; Male 3: Yes.

156
00:08:50.409 --> 00:08:52.849
&gt;&gt; Marc: Cool, good question.

157
00:08:58.030 --> 00:08:58.920
&gt;&gt; Marc: Other questions?

158
00:09:02.215 --> 00:09:04.033
&gt;&gt; Marc: All right.

159
00:09:08.418 --> 00:09:12.138
&gt;&gt; Marc: Booleans, booleans are true or

160
00:09:12.138 --> 00:09:13.109
false.

161
00:09:14.150 --> 00:09:15.840
I think it's named after Bool?

162
00:09:15.840 --> 00:09:17.530
[LAUGH] Who I think was a mathematician.

163
00:09:18.590 --> 00:09:23.150
Like if I was doing some sort of
like smart home technology and I was

164
00:09:23.150 --> 00:09:26.610
just trying to check if he light is on or
off, I would represent that as a Boolean.

165
00:09:26.610 --> 00:09:31.740
And I would say, lightIsOn = true and
if the lights were on then I would set it

166
00:09:31.740 --> 00:09:37.890
to true and then if they were not on,
then const lightIsOn = false.

167
00:09:37.890 --> 00:09:40.090
Booleans, Booleans are true and false.

168
00:09:40.090 --> 00:09:45.068
You're gonna use them all over the place,
Booleans are quite useful, and

169
00:09:45.068 --> 00:09:50.282
you just write const lights equals true
for true and you do false for false, and

170
00:09:50.282 --> 00:09:56.332
that's really all there is to Booleans.
&gt;&gt; Marc: Numbers are a type,

171
00:09:56.332 --> 00:09:59.190
we've kind of already dealt
with them a little bit.

172
00:09:59.190 --> 00:10:03.180
Some languages separate numbers
into multiple different types.

173
00:10:03.180 --> 00:10:07.670
Usually integers and floats but
we do not do that in JavaScript.

174
00:10:07.670 --> 00:10:11.126
We have one number type and
it's called number.

175
00:10:11.126 --> 00:10:17.407
[LAUGH] Surprise, so whether it's a whole
number like, one, two, three, four,

176
00:10:17.407 --> 00:10:23.170
five, 10,000, 50,000,
5,005, whatever it is.

177
00:10:23.170 --> 00:10:24.360
Or if it's a decimal number,

178
00:10:24.360 --> 00:10:29.026
which is what other languages
would normally call a float like,

179
00:10:29.026 --> 00:10:33.320
1.2, pi, whatever, those are represented
as the same thing in JavaScript.

180
00:10:33.320 --> 00:10:35.450
So you do not have to separate
those out in your head.

181
00:10:39.730 --> 00:10:42.440
That being said, it kind of makes painful

182
00:10:42.440 --> 00:10:47.193
because if you're trying to do precise
math like very precise math trying to

183
00:10:47.193 --> 00:10:51.820
measure very small distances or
currencies can also be a problem.

184
00:10:52.930 --> 00:10:57.155
JavaScript math can be quite inexact
to the point that it's quite annoying.

185
00:10:57.155 --> 00:11:00.640
[LAUGH] So be careful about doing
precise math in JavaScript,

186
00:11:00.640 --> 00:11:07.580
you will have problems.
&gt;&gt; Marc: Questions about that?

187
00:11:07.580 --> 00:11:10.230
It's kind of high level, I think that's
something you kinda just have to

188
00:11:10.230 --> 00:11:12.810
experience and then we'll kinda get
going and you'll understand that.

