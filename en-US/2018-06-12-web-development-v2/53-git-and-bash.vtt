WEBVTT

1
00:00:03.880 --> 00:00:05.690
&gt;&gt; Brian Holt: Welcome back, friends.

2
00:00:05.690 --> 00:00:09.658
You survived this far,
we have a few fallen amongst us.

3
00:00:09.658 --> 00:00:12.480
[LAUGH] That trying to be for
sticking it out.

4
00:00:14.060 --> 00:00:20.890
So we're gonna take a brief
detour from Java Script.

5
00:00:20.890 --> 00:00:25.550
What we're about to talk about right now
has nothing to do with Java Script, or

6
00:00:25.550 --> 00:00:27.810
maybe better I say that it has
to do with all programming.

7
00:00:29.150 --> 00:00:33.409
So when we back into our command line
we're gonna be using something called Git.

8
00:00:33.409 --> 00:00:37.149
And we're going to be interacting
with git being a command line,

9
00:00:37.149 --> 00:00:41.569
and the way that we're doing that is with
Bash which is the shell so we kinda get

10
00:00:41.569 --> 00:00:46.070
a little bit of the preview before when
we were messing up with node and parcel.

11
00:00:46.070 --> 00:00:48.720
But now,
we're gonna be messing around with Git.

12
00:00:49.970 --> 00:00:53.850
Unless you're on Windows,
Git is already on your computer.

13
00:00:53.850 --> 00:00:55.490
I guarantee you that Git is on Mac and

14
00:00:55.490 --> 00:00:58.300
I guarantee you that Git
is already in Linux.

15
00:00:58.300 --> 00:01:01.100
I don't think it's already on Windows.

16
00:01:01.100 --> 00:01:04.180
So I gave you a link here,
right, for Git for Windows.

17
00:01:05.920 --> 00:01:11.350
And you should just come down here and
you download this and this is Bash-like,

18
00:01:11.350 --> 00:01:17.860
it's not totally Bash, but
it's very, very similar to Bash.

19
00:01:19.090 --> 00:01:20.880
So go down on that if you're on Windows.

20
00:01:23.255 --> 00:01:26.752
&gt;&gt; Brian Holt: The first thing I want
to tell you is that you never have

21
00:01:26.752 --> 00:01:29.410
to use the command line as a programmer.

22
00:01:31.080 --> 00:01:34.340
That being said,
it's kind of a super power,

23
00:01:34.340 --> 00:01:38.260
it's gonna make you a better developer if
you spend the time to learn the shell.

24
00:01:38.260 --> 00:01:42.030
But I have worked with developers that
have been developers for a decade, and

25
00:01:42.030 --> 00:01:43.940
have not learned the command line.

26
00:01:45.270 --> 00:01:46.400
But, that being said, do.

27
00:01:46.400 --> 00:01:48.830
Please do.

28
00:01:48.830 --> 00:01:52.495
Git in particular,
GitHub has a really nice GitHub GUI.

29
00:01:52.495 --> 00:01:57.070
Yeah, desktop.github.com.

30
00:01:57.070 --> 00:02:01.190
They have a really nice client that you
can interact with GitHub and Git and

31
00:02:01.190 --> 00:02:02.520
all these kind of things.

32
00:02:02.520 --> 00:02:07.360
Just using this program, right?

33
00:02:07.360 --> 00:02:11.920
GUI stands for Graphical User Interface,
you will see that it refer to it was GUI

34
00:02:11.920 --> 00:02:17.360
or GUI, that's just the fancy way
of saying this application, okay?

35
00:02:17.360 --> 00:02:21.440
See, you can use Git this way, there's
another one called Sourcetree as well,

36
00:02:21.440 --> 00:02:23.066
that's really quite popular.

37
00:02:27.090 --> 00:02:28.792
&gt;&gt; Brian Holt: And
that's from our friends at Atlassian,

38
00:02:28.792 --> 00:02:29.990
and they make that one as well.

39
00:02:32.000 --> 00:02:34.390
So you are welcome to use those.

40
00:02:34.390 --> 00:02:38.430
I would invite you to
actually go ahead and

41
00:02:38.430 --> 00:02:40.800
learn how to use Git
using the command line.

42
00:02:40.800 --> 00:02:42.520
I think it's a good idea.

43
00:02:42.520 --> 00:02:44.630
That's how I do it personally.

44
00:02:44.630 --> 00:02:46.460
And many developers are now
do it that way as well.

45
00:02:48.540 --> 00:02:51.350
So what we're gonna do is
we're gonna come to here or

46
00:02:51.350 --> 00:02:53.290
something I have not taught you yet.

47
00:02:53.290 --> 00:02:55.440
This is a program and
it's still running, right?

48
00:02:55.440 --> 00:02:57.404
But I want it to stop, right?

49
00:02:57.404 --> 00:03:00.360
Cuz I'm not using my
development server anymore.

50
00:03:00.360 --> 00:03:04.910
The way you do that is Ctrl+C and
that's the same across Windows,

51
00:03:04.910 --> 00:03:07.660
Linux and Mac as well.

52
00:03:07.660 --> 00:03:11.560
So if I hit Ctrl+C, it stops.

53
00:03:11.560 --> 00:03:14.240
And that's just kinda
the universal way with Bash and

54
00:03:14.240 --> 00:03:18.270
general, please stop doing
whatever you're doing, right?

55
00:03:18.270 --> 00:03:22.420
So for example if I say,
ping www.google.com.

56
00:03:22.420 --> 00:03:25.790
This is going to keep hitting the Google
service to say, are you there?

57
00:03:25.790 --> 00:03:27.720
And Google is gonna say, yes, I'm there.

58
00:03:27.720 --> 00:03:29.650
Right, so that's what this does.

59
00:03:29.650 --> 00:03:32.030
And it's going to keep doing
until I tell it to stop.

60
00:03:32.030 --> 00:03:33.899
So the way it tells to stop is Ctrl+C.

61
00:03:35.985 --> 00:03:36.619
&gt;&gt; Brian Holt: So.

62
00:03:39.057 --> 00:03:39.689
&gt;&gt; Brian Holt: Make sense?

63
00:03:39.689 --> 00:03:41.955
Ctrl+C is something you
definitely need to know.

64
00:03:44.320 --> 00:03:48.070
&gt;&gt; Brian Holt: So
we're gonna work a little bit with Bash.

65
00:03:48.070 --> 00:03:52.680
So you've seen cd and ls,
so cd is change directory.

66
00:03:54.620 --> 00:03:57.870
So, if I'm in popdemo for
example right now.

67
00:03:57.870 --> 00:04:01.810
Let's say I wanna get backup to desktop,
so what I'm gonna do is say cd,

68
00:04:01.810 --> 00:04:06.660
change directory, space That means go up.

69
00:04:08.510 --> 00:04:14.398
Okay, so you can see here, now it was
on popdemo, now I'm back on desktop.

70
00:04:14.398 --> 00:04:16.640
I wanna see what's on my desktop,
so I hit ls.

71
00:04:18.640 --> 00:04:24.172
You can see that I have animation,
I have all these folders on here,

72
00:04:24.172 --> 00:04:27.291
right, I wanna go back into popdemo.

73
00:04:27.291 --> 00:04:29.580
Hit ls and you can see everything
that's in there right?

74
00:04:29.580 --> 00:04:33.385
So you can kind of get them
like navigating around,

75
00:04:33.385 --> 00:04:37.544
this is exactly analogous to
if I was here in my Finder and

76
00:04:37.544 --> 00:04:43.051
I want to among my desktop and I go to
popdemo and click into there, right.

77
00:04:43.051 --> 00:04:46.690
Same thing, this is just a graphical
user interface for what I was doing.

78
00:04:49.000 --> 00:04:49.570
Makes sense?

79
00:04:50.680 --> 00:04:53.380
I'm gonna type clear which
clears everything off.

80
00:04:53.380 --> 00:04:59.680
If you hit pwd, you'll see where you are.

81
00:04:59.680 --> 00:05:05.480
It's basically like asking,
where am I, to Bash.

82
00:05:05.480 --> 00:05:08.360
I think it stands for
present working directory.

83
00:05:12.380 --> 00:05:15.605
&gt;&gt; Brian Holt: Print Work Directory,
Print Working Directory rather.

84
00:05:17.360 --> 00:05:21.029
&gt;&gt; Brian Holt: So for the most part,
let's see if I go here,

85
00:05:21.029 --> 00:05:25.965
if I pwd Users and the name of my
user on my computer is btholt.

86
00:05:29.093 --> 00:05:31.659
&gt;&gt; Brian Holt: So
if I go back here to the Desktop, and

87
00:05:31.659 --> 00:05:34.480
do take note that this is case sensitive.

88
00:05:36.540 --> 00:05:39.120
It is on Linux it's not on Mac, actually.

89
00:05:39.120 --> 00:05:40.190
I think that's the case.

90
00:05:40.190 --> 00:05:41.789
So if I hit cd desktop.

91
00:05:43.723 --> 00:05:45.050
&gt;&gt; Brian Holt: It does work.

92
00:05:45.050 --> 00:05:47.360
Which is unfortunate
cuz it causes problems.

93
00:05:47.360 --> 00:05:51.486
Anyways every user on Linux and
Mac, cuz Linux and

94
00:05:51.486 --> 00:05:55.920
Mac share a common ancestor
which is called the Unix.

95
00:05:56.970 --> 00:06:00.287
So they work relatively the same way
when it comes to the command line.

96
00:06:00.287 --> 00:06:00.952
They work the same way,

97
00:06:00.952 --> 00:06:02.950
that's why if you're on Linux
you're able to follow along.

98
00:06:02.950 --> 00:06:03.990
Windows works a different way,

99
00:06:03.990 --> 00:06:07.710
it has a different thing that
is based on Windows, follows.

100
00:06:08.860 --> 00:06:13.030
However, Windows does now have
something called the Linux sub system,

101
00:06:13.030 --> 00:06:16.740
that you can actually use directly
on Windows, only on Windows 10.

102
00:06:16.740 --> 00:06:20.600
I put directions to do that on
the tools section of this workshop,

103
00:06:20.600 --> 00:06:22.013
if you want to try that.

104
00:06:23.810 --> 00:06:29.523
&gt;&gt; Brian Holt: Okay, so
I'm on desktop, I go into popdemo.

105
00:06:29.523 --> 00:06:32.150
I was talking about home directories,
every user has a home directory.

106
00:06:32.150 --> 00:06:36.100
So you can see here /Users/btholt,
that is my personal home directory.

107
00:06:36.100 --> 00:06:39.734
That's most of the time you're gonna be
working out of your own home directory,

108
00:06:39.734 --> 00:06:42.220
unless you're doing some crazy stuff.

109
00:06:42.220 --> 00:06:43.860
Which don't do too much crazy stuff.

110
00:06:45.940 --> 00:06:49.750
But that's what this tilde means,
this little squiggly,

111
00:06:49.750 --> 00:06:55.200
which is the key right next to one if you
hit shift, that's a tilde right there.

112
00:06:55.200 --> 00:06:57.730
Tilde is just a shortcut to
mean your home directory.

113
00:06:57.730 --> 00:07:01.690
So if I hit cd ~ it means go to
my home directory immediately.

114
00:07:01.690 --> 00:07:05.999
So I'm gonna go from desktop/popdemo
directly to my home directory which is

115
00:07:05.999 --> 00:07:07.600
what that tilde is, right?

116
00:07:09.750 --> 00:07:13.449
Okay, so
I'm gonna go now to desktop/popdemo.

117
00:07:13.449 --> 00:07:18.160
Let's talk about what else,
I'll talk about ls a little bit.

118
00:07:18.160 --> 00:07:20.840
So ls shows you what's in your directory,
it stands for

119
00:07:20.840 --> 00:07:26.400
list I can also pass it a flag to say,
hey show me hidden files.

120
00:07:26.400 --> 00:07:30.810
So if I've put -a, it's gonna show me
all the hidden files in there as well.

121
00:07:30.810 --> 00:07:34.440
Which you can see that there's .cache,
that's new as well.

122
00:07:34.440 --> 00:07:39.214
Like that's hidden up here whereas and
dot and you can ignore those top two but.

123
00:07:39.214 --> 00:07:44.890
Anything that's preceded
by a dot is hidden and

124
00:07:44.890 --> 00:07:48.260
the reason that I hide .cache is
like it's not actually very useful.

125
00:07:48.260 --> 00:07:54.510
It's a tool for parsel, parselUsers.cash.

126
00:07:54.510 --> 00:07:56.070
So that it can rebuild
things more quickly.

127
00:07:57.260 --> 00:07:59.930
So that's what -a means.

128
00:07:59.930 --> 00:08:05.690
If I put- or ls -lah,
I get this nice big list, right?

129
00:08:05.690 --> 00:08:07.810
It's the same things, right?

130
00:08:07.810 --> 00:08:09.730
But the a represents show it all,

131
00:08:09.730 --> 00:08:11.840
everything, so
that's why you still see cache.

132
00:08:13.460 --> 00:08:16.670
-l means show it in this list style,
right?

133
00:08:17.730 --> 00:08:23.008
And h means show these, so
this is like 352 bytes.

134
00:08:23.008 --> 00:08:25.422
1.7 kilobytes.

135
00:08:25.422 --> 00:08:27.560
1.3 kilobytes.

136
00:08:27.560 --> 00:08:28.890
Where's node modules?

137
00:08:28.890 --> 00:08:29.850
So if I, yeah, anyway.

138
00:08:31.380 --> 00:08:34.430
That's what that does,
is it shows it in a more useful way.

139
00:08:34.430 --> 00:08:35.615
If I did ls-la,

140
00:08:35.615 --> 00:08:40.793
you would notice that these sizes
are decidedly harder to read, right?

141
00:08:40.793 --> 00:08:43.310
This said 1.7 kilobytes.

142
00:08:43.310 --> 00:08:47.068
Now, it's 1760 bytes.

143
00:08:47.068 --> 00:08:50.150
So anyway, this makes it a little
bit more usable if you put -h.

144
00:08:50.150 --> 00:08:53.207
Those are called flags.

145
00:08:53.207 --> 00:08:56.233
You would just have to know what
they are [LAUGH] unfortunately, and

146
00:08:56.233 --> 00:08:58.290
it's different for every program.

147
00:08:58.290 --> 00:09:01.750
So there are literally hundreds of them,
and

148
00:09:01.750 --> 00:09:05.180
I only know maybe a small set of them, so.

149
00:09:06.390 --> 00:09:09.910
In fact let's take a look at
how you can find more out.

150
00:09:09.910 --> 00:09:14.960
If I put man.ls,
it's gonna pop up this thing

151
00:09:14.960 --> 00:09:18.980
that I can actually browse through and
see the documentation for LS.

152
00:09:18.980 --> 00:09:22.104
You can see that it's quite long.

153
00:09:26.387 --> 00:09:31.535
&gt;&gt; Brian Holt: Really, really,
really, really long [LAUGH] But,

154
00:09:31.535 --> 00:09:35.520
that's how you look at documentation.

155
00:09:35.520 --> 00:09:39.380
To be honest, I don't really look at
the main pages very much, mans stands for

156
00:09:39.380 --> 00:09:41.430
manual as you might have guessed.

157
00:09:41.430 --> 00:09:48.900
When you wanna get out of man pages you
just hit Q, which stands for quit, okay.

158
00:09:49.920 --> 00:09:51.200
That'll take you out of a man page.

159
00:09:54.520 --> 00:10:00.195
What's actually a little bit more useful
is there's this thing called explainshell,

160
00:10:00.195 --> 00:10:01.429
that if I click on.

161
00:10:01.429 --> 00:10:06.335
If I put in ln-lah then it'll actually
explain to me what each one of

162
00:10:06.335 --> 00:10:08.220
those things does.

163
00:10:08.220 --> 00:10:13.270
So h stands for human readable, I didn't
know that, I just knew that I had put lah.

164
00:10:13.270 --> 00:10:15.120
But I can put anything in there.

165
00:10:15.120 --> 00:10:20.070
If I put node-v, it figures out that node,
and doesn't know what -v is but

166
00:10:20.070 --> 00:10:21.060
it means version.

167
00:10:22.300 --> 00:10:24.380
maybe like git-v.

168
00:10:26.570 --> 00:10:27.810
The stupid contract.

169
00:10:27.810 --> 00:10:29.720
It doesn't know what a dash is either.

170
00:10:29.720 --> 00:10:34.250
Anyway, it knows about
a bunch of these things like

171
00:10:35.500 --> 00:10:38.790
if I put pwd in there it knows print
name of current working directory.

172
00:10:40.090 --> 00:10:45.881
Or SFTP, Secure File Transfer Program.

173
00:10:45.881 --> 00:10:50.430
So, explainshell is very, very useful for
trying to figure out what shit does.

174
00:10:52.070 --> 00:10:54.080
&gt;&gt; Speaker 2: There's no life page?

175
00:10:54.080 --> 00:10:54.890
&gt;&gt; Brian Holt: There's no what?

176
00:10:54.890 --> 00:10:55.920
&gt;&gt; Speaker 2: Life page.

177
00:10:55.920 --> 00:10:56.520
&gt;&gt; Brian Holt: Life page?

178
00:10:56.520 --> 00:10:57.734
&gt;&gt; Speaker 2: You searched for it.

179
00:10:57.734 --> 00:11:02.509
&gt;&gt; Brian Holt: [LAUGH] What is life?

180
00:11:04.830 --> 00:11:06.340
No man page for life, unfortunately.

181
00:11:07.780 --> 00:11:13.200
It will all explain everything to you.

182
00:11:13.200 --> 00:11:13.837
Where was I?

183
00:11:25.384 --> 00:11:27.490
&gt;&gt; Brian Holt: Go back
through these a little bit.

184
00:11:27.490 --> 00:11:28.220
Okay.

185
00:11:28.220 --> 00:11:28.765
Back in Git.

186
00:11:28.765 --> 00:11:35.123
So, just to kind of give you an example,

187
00:11:35.123 --> 00:11:40.736
I'm gonna go back up to my desktop.

188
00:11:40.736 --> 00:11:46.013
I'm going to say,
make a new directory, which is mkdir,

189
00:11:46.013 --> 00:11:50.990
and it's gonna be called Some-cool-thing,
okay.

190
00:11:50.990 --> 00:11:53.300
So now if I look at here,
I have a thing called some-cool-thing.

191
00:11:53.300 --> 00:11:55.080
It's a new folder.

192
00:11:55.080 --> 00:11:57.330
I can do cd.

193
00:11:57.330 --> 00:12:00.057
Some cool thing is really burdensome for
me to type, and

194
00:12:00.057 --> 00:12:02.190
you all know by now that I'm quite lazy.

195
00:12:02.190 --> 00:12:06.713
So if I do so, sl and if I hit Tab,
because nothing else starts with sl,

196
00:12:06.713 --> 00:12:10.428
it's like cool,
I'm just gonna complete that for you.

197
00:12:13.383 --> 00:12:17.097
&gt;&gt; Brian Holt: Or if I come back in here
and you can see that there are nothing

198
00:12:17.097 --> 00:12:20.830
sort of the same thing,
that's usually doesn't happen.

199
00:12:20.830 --> 00:12:23.410
If I go up one more, right?

200
00:12:23.410 --> 00:12:27.030
If I do d, there are three
things that start with d, right?

201
00:12:27.030 --> 00:12:28.610
Documents, Downloads and Desktop.

202
00:12:28.610 --> 00:12:33.310
There are three things that
start with document or

203
00:12:33.310 --> 00:12:36.360
with d, Documents, Downloads and Desktop.

204
00:12:36.360 --> 00:12:39.150
So if I do cd capital D and I hit Tab.

205
00:12:39.150 --> 00:12:42.640
It's gonna say, no, I'm not gonna do that.

206
00:12:42.640 --> 00:12:47.220
If you hit Tab twice, it'll actually
show you, here are your three options.

207
00:12:47.220 --> 00:12:49.710
I need you to keep typing, okay?

208
00:12:49.710 --> 00:12:53.350
So, if I do, Do, it still says, no.

209
00:12:53.350 --> 00:12:55.220
You still got Documents and Downloads.

210
00:12:55.220 --> 00:13:00.000
If I could see this, then it's like, okay,
I will auto-complete that for you, okay?

211
00:13:00.000 --> 00:13:02.340
So that's how tab completion works.

212
00:13:02.340 --> 00:13:05.600
I'm gonna go back into Desktop.

213
00:13:07.840 --> 00:13:10.140
And I'm gonna go into some-cool-thing.

214
00:13:10.140 --> 00:13:11.510
I'm gonna use touch.

215
00:13:12.720 --> 00:13:15.590
So, let's clear also the top.

216
00:13:15.590 --> 00:13:20.430
I say touch index.html.

217
00:13:20.430 --> 00:13:22.020
Then it's going to create a new file.

218
00:13:22.020 --> 00:13:28.670
So If I click in here, now I have
new empty file called index.html.

219
00:13:28.670 --> 00:13:33.445
If I wanted to just put like an h1,
Hi this is cool.

220
00:13:36.050 --> 00:13:38.693
&gt;&gt; Brian Holt: So I can actually like,
and I'm gonna put that inside of quotes.

221
00:13:40.600 --> 00:13:43.694
&gt;&gt; Brian Holt: I can then
say with the angle bracket,

222
00:13:43.694 --> 00:13:46.409
put that inside of index.html.

223
00:13:49.631 --> 00:13:51.335
&gt;&gt; Brian Holt: Or no,
you have have to echo, rather.

224
00:13:51.335 --> 00:13:56.860
So echo that into index.html.

225
00:13:56.860 --> 00:13:59.640
So now if I look at index.html,

226
00:13:59.640 --> 00:14:04.009
I can look at what's inside of it
by saying more, more index.html.

227
00:14:06.240 --> 00:14:07.370
I can see that it's in there.

228
00:14:07.370 --> 00:14:09.730
You can also say cat, that one is for

229
00:14:09.730 --> 00:14:14.410
you, cat index.html it
will also print that out.

230
00:14:14.410 --> 00:14:21.201
What is cat even stand for,
I don't even know, concatenate and print.

231
00:14:21.201 --> 00:14:22.800
What stands for cat, I'm not sure.

232
00:14:23.820 --> 00:14:26.130
So, that's an interesting thing as well,

233
00:14:26.130 --> 00:14:28.380
like a really interesting
thing that you can do as well.

234
00:14:28.380 --> 00:14:33.114
Let's say I wanted to copy everything
that's inside of index.html

235
00:14:33.114 --> 00:14:34.590
into my pasteboard.

236
00:14:34.590 --> 00:14:37.670
So like I copy it as in like copy/paste,
right.

237
00:14:37.670 --> 00:14:42.080
What I can do is I can say cat index.html,

238
00:14:42.080 --> 00:14:45.740
then you can put a pipe which is like
pipe this into something else, so

239
00:14:45.740 --> 00:14:49.390
take the output of this one and
put it into the next thing.

240
00:14:49.390 --> 00:14:52.160
And I can say, pbcopy,
which is pasteboard copy.

241
00:14:53.180 --> 00:14:58.490
So now if I paste, it's actually in there,
it pastes it out, which is pretty cool.

242
00:15:00.110 --> 00:15:02.232
Or it copies it, anyway.

243
00:15:04.492 --> 00:15:06.698
&gt;&gt; Brian Holt: Little bit more
advanced use cases of Bash, but

244
00:15:06.698 --> 00:15:10.240
hopefully I'm showing you that there's
a lot of stuff you can do with Bash.

245
00:15:10.240 --> 00:15:12.140
I'm just really scratching
the surface here.

246
00:15:13.370 --> 00:15:17.840
If you come into VSCode in particular,
if I hit Shift+Cmd+P,

247
00:15:17.840 --> 00:15:22.180
it brings up what's called
the Command Palette.

248
00:15:22.180 --> 00:15:26.610
And if I say,
install is you can do this top one,

249
00:15:26.610 --> 00:15:29.580
it says shell command
install code command.

250
00:15:30.790 --> 00:15:33.170
So this will install
a Bash program basically,

251
00:15:33.170 --> 00:15:37.770
that you can call a code from the command
line, which is very, very useful.

252
00:15:39.160 --> 00:15:43.090
So if I come back here, let's say
I wanna edit that index.html file,

253
00:15:43.090 --> 00:15:46.310
I can just say code index.html.

254
00:15:46.310 --> 00:15:52.741
And it's gonna open this and I can now
edit it over here, very convenient.

255
00:15:55.507 --> 00:15:58.596
&gt;&gt; Brian Holt: The last thing I'm gonna
show you is I'm going to show you how to

256
00:15:58.596 --> 00:15:59.240
exit them.

257
00:15:59.240 --> 00:16:04.460
[LAUGH] Cuz at some point somewhere
you're gonna be thrown into vim and

258
00:16:04.460 --> 00:16:07.425
you're gonna be like, how the hell
do I get out of this hellscape?

259
00:16:07.425 --> 00:16:12.590
[LAUGH] Literally the most
Googled thing on stock overflows,

260
00:16:12.590 --> 00:16:15.330
how the hell do I get out of them,
it's like,

261
00:16:16.680 --> 00:16:20.890
at any given time like 4% of their traffic
or something ridiculous like that.

262
00:16:20.890 --> 00:16:23.610
So I'm gonna say vi index.html and

263
00:16:23.610 --> 00:16:27.180
I'm suddenly put into this program
that I have no idea how to get out of.

264
00:16:27.180 --> 00:16:33.670
Typically, I would say Ctrl+C but it says
your Ctrl+C powers have no power here.

265
00:16:33.670 --> 00:16:34.530
Right?

266
00:16:34.530 --> 00:16:35.680
You're stuck here forever.

267
00:16:38.160 --> 00:16:43.250
So I'm in this editor and
like I don't know how to get out, right?

268
00:16:43.250 --> 00:16:44.720
Sometimes Git will throw you in tears.

269
00:16:44.720 --> 00:16:46.776
So this just kinda happens to people.

270
00:16:46.776 --> 00:16:50.785
I don't know what to do they just kinda
close the window [LAUGH] That's what I did

271
00:16:50.785 --> 00:16:51.652
for a long time.

272
00:16:51.652 --> 00:16:55.116
So this is a text editor,
so you can, if I hit I,

273
00:16:55.116 --> 00:17:00.440
I will go into insert mode and
I can actually edit things in here.

274
00:17:00.440 --> 00:17:09.170
Hi this is from vim,
please help me, I'm so scared.

275
00:17:11.360 --> 00:17:12.458
I've been here too long.

276
00:17:15.341 --> 00:17:19.880
&gt;&gt; Brian Holt: Okay, if I hit Escape,
then I get out of insertion mode, right?

277
00:17:19.880 --> 00:17:22.170
And I get back into what's
called command mode.

278
00:17:22.170 --> 00:17:25.090
And what I'm gonna type now is,
if I hit :q,

279
00:17:25.090 --> 00:17:27.520
which is the way that
I would normally quit.

280
00:17:27.520 --> 00:17:30.450
It's gonna say, not so fast [LAUGH].

281
00:17:30.450 --> 00:17:34.260
You have unsaved changes, I'm not gonna
let you quit with unsaved changes.

282
00:17:34.260 --> 00:17:35.290
Now I could do one of two things.

283
00:17:35.290 --> 00:17:39.300
I can hit :w, which will save it,
it will write it.

284
00:17:41.170 --> 00:17:45.160
Or I can hit colon Q exclamation point,
which is like, I don't care.

285
00:17:45.160 --> 00:17:46.960
Get me out of here.

286
00:17:46.960 --> 00:17:50.700
So what I'm gonna do is, I'm gonna do :wq,
which is going to both write and quit.

287
00:17:50.700 --> 00:17:52.080
And then I am out.

288
00:17:53.210 --> 00:17:56.581
So just remember :q gets you out of vim.

289
00:18:01.705 --> 00:18:02.205
&gt;&gt; Brian Holt: Okay?

290
00:18:04.860 --> 00:18:10.369
I think Jem's course goes a little
bit more into more vim magic.

291
00:18:10.369 --> 00:18:12.635
I don't,
honestly I don't know much more than that.

292
00:18:12.635 --> 00:18:14.520
I know just like a bare minimum now.

293
00:18:14.520 --> 00:18:16.800
The reason why it's useful
to know like this much vim,

294
00:18:16.800 --> 00:18:19.360
is like if you ever remote
into someone else's server and

295
00:18:19.360 --> 00:18:24.190
you need to edit a file, you can't use
code to edit files on a remote server,

296
00:18:24.190 --> 00:18:27.300
you need to use something that's on
a server, so vim is on every server.

297
00:18:27.300 --> 00:18:30.632
So you can just open vim up, make your
bare minimum changes, and then get out.

298
00:18:34.216 --> 00:18:36.898
&gt;&gt; Brian Holt: Yeah, and if you want
more Bash skills, definitely check

299
00:18:36.898 --> 00:18:40.360
out Jem Young's course, he has
Full Stack and Full Stack 2, good stuff.

