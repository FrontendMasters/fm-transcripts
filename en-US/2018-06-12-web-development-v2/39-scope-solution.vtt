WEBVTT

1
00:00:00.750 --> 00:00:01.992
&gt;&gt; Brian Holt: Let's go ahead and
go through this.

2
00:00:01.992 --> 00:00:03.489
So I have const A right here.

3
00:00:03.489 --> 00:00:04.720
This is gonna be in the global scope.

4
00:00:04.720 --> 00:00:08.599
So no matter where this gets logged,
it's definitely gonna survive, okay.

5
00:00:08.599 --> 00:00:10.080
And then, I have let F.

6
00:00:10.080 --> 00:00:12.670
Even though,
it's gonna be modified somewhere else,

7
00:00:12.670 --> 00:00:14.166
it's also in the global scope.

8
00:00:14.166 --> 00:00:16.720
So anywhere that you reference F,
it's gonna survive.

9
00:00:16.720 --> 00:00:19.567
It's never gonna go out of scope.

10
00:00:19.567 --> 00:00:22.220
Okay, I got a function called
doStuff that takes in B.

11
00:00:23.730 --> 00:00:27.051
So let's just go through this and
figure out where all the console logs are.

12
00:00:27.051 --> 00:00:29.698
Where we have E.

13
00:00:29.698 --> 00:00:31.655
So let E = 0.

14
00:00:31.655 --> 00:00:34.218
This is also in the global scope,
gonna survive.

15
00:00:34.218 --> 00:00:39.330
So E++; whatever console.log(A).

16
00:00:39.330 --> 00:00:42.325
A is in the global scope up here,
this works.

17
00:00:42.325 --> 00:00:43.700
This one works, okay?

18
00:00:44.810 --> 00:00:49.282
E, E is also in the global scope,
this one's gonna work.

19
00:00:49.282 --> 00:00:53.700
G, G is inside of the while loop,
not gonna work.

20
00:00:56.160 --> 00:01:00.699
doStuff, I pass in the letter B.

21
00:01:00.699 --> 00:01:03.684
And this becomes B the parameter up here.

22
00:01:03.684 --> 00:01:06.820
Console.log(B), this came in from here.

23
00:01:06.820 --> 00:01:08.434
So this is gonna survive.

24
00:01:08.434 --> 00:01:09.670
So if this is gonna work.

25
00:01:10.740 --> 00:01:12.254
C is declared right there.

26
00:01:12.254 --> 00:01:13.200
H is declared.

27
00:01:14.300 --> 00:01:15.307
D right there.

28
00:01:15.307 --> 00:01:18.283
H is something else.

29
00:01:18.283 --> 00:01:22.130
Console.log(D); D is right here.

30
00:01:22.130 --> 00:01:25.682
This is inside of the if statement,
this is outside of the if statement.

31
00:01:25.682 --> 00:01:27.240
Therefore, D is not going to work.

32
00:01:28.610 --> 00:01:30.642
H, H is declared here.

33
00:01:30.642 --> 00:01:34.690
Even though it's changed here,
it was declared up here.

34
00:01:34.690 --> 00:01:38.360
Therefore, this is gonna work, yeah.

35
00:01:39.510 --> 00:01:41.321
F is changed.

36
00:01:41.321 --> 00:01:43.130
But that doesn't matter,
it's in the global scope.

37
00:01:44.590 --> 00:01:48.047
So when it come down here and
do console.log(B).

38
00:01:48.047 --> 00:01:50.030
That's the name of the parameter up here.

39
00:01:50.030 --> 00:01:51.317
So that's not gonna work.

40
00:01:51.317 --> 00:01:53.245
This one's not gonna work.

41
00:01:53.245 --> 00:01:57.299
C, it's declared inside of doStuff.

42
00:01:58.520 --> 00:02:03.448
So that's not gonna work, that's
gonna be out of scope as well and F.

43
00:02:03.448 --> 00:02:07.310
F is declared in the global scope and
is changed inside of doStuff.

44
00:02:07.310 --> 00:02:10.949
But because it's declared
in the global scope, so

45
00:02:10.949 --> 00:02:16.566
it is going to work.
&gt;&gt; Brian Holt: So let's see how we did.

46
00:02:16.566 --> 00:02:23.606
This works, does not work, works, works.

47
00:02:23.606 --> 00:02:26.640
So you can see here,
I kinda left you a bunch of notes that you

48
00:02:26.640 --> 00:02:30.112
can see go back and review and
see what works and what doesn't work.

49
00:02:30.112 --> 00:02:34.018
And you can see here that it
actually errors out on G.

50
00:02:34.018 --> 00:02:36.020
Cuz it's G, G breaks it right there.

