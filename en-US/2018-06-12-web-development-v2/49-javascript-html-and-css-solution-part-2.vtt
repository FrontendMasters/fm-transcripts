WEBVTT

1
00:00:00.000 --> 00:00:07.292
&gt;&gt; Brian Holt: Calculator.js, so next
we're gonna come into this index.html.

2
00:00:07.292 --> 00:00:14.563
Shut up, yarn, I don't care, okay.
&gt;&gt; Brian Holt: I'm gonna come in here and

3
00:00:14.563 --> 00:00:19.350
say at the bottom, right before the end
of the body, I'm gonna put script.

4
00:00:19.350 --> 00:00:26.860
And src = './calculator.js', like that.

5
00:00:26.860 --> 00:00:30.572
Now, you might ask,
why am I putting my script tag there?

6
00:00:30.572 --> 00:00:35.480
Always put your script tags at the end,
right before the end of body.

7
00:00:35.480 --> 00:00:40.190
The reason why is you want everything
to load, you want all of your CSS and

8
00:00:40.190 --> 00:00:42.430
all of your HTML to load first.

9
00:00:42.430 --> 00:00:44.412
And then you wanna load your JavaScript.

10
00:00:44.412 --> 00:00:47.948
If I put this at the top,
it's gonna make everything else wait for

11
00:00:47.948 --> 00:00:50.800
my JavaScript to load,
and that's not necessary.

12
00:00:50.800 --> 00:00:53.930
You wanna show your users
something as fast as possible so

13
00:00:53.930 --> 00:00:56.690
that your website feels faster.

14
00:00:56.690 --> 00:00:59.524
Despite the fact that it would load in
exactly the same amount of time, or

15
00:00:59.524 --> 00:01:01.344
at least a relatively
similar amount of time.

16
00:01:01.344 --> 00:01:04.768
You want them to see something first,
because if they see something,

17
00:01:04.768 --> 00:01:06.330
then it feels fast to them.

18
00:01:06.330 --> 00:01:10.605
And this is as much a psychology
game as it is a technical game,

19
00:01:10.605 --> 00:01:12.588
to make your site load fast.

20
00:01:12.588 --> 00:01:15.294
Cuz imagine I'm on like
some really slow phone,

21
00:01:15.294 --> 00:01:19.890
out in the middle of the Australian bush,
and I'm trying to like load this.

22
00:01:19.890 --> 00:01:22.489
It'll load this page and
I can see the calculator.

23
00:01:22.489 --> 00:01:26.093
Despite the fact that the calculator
has not actually finished loading its

24
00:01:26.093 --> 00:01:27.705
JavaScript first, I can see it.

25
00:01:27.705 --> 00:01:32.000
And I can start making a decision
in my brain what I wanna do next.

26
00:01:32.000 --> 00:01:38.294
By the time I actually, okay, I'm gonna
type, I forgot a row in here [LAUGH].

27
00:01:38.294 --> 00:01:42.031
Yeah, we just don't need 1, 2, and 3.
&gt;&gt; Speaker 2: [LAUGH]

28
00:01:42.031 --> 00:01:42.732
&gt;&gt; Brian Holt: Anyway,

29
00:01:42.732 --> 00:01:45.721
I'm gonna finish my spiel first.
&gt;&gt; Speaker 2: Or

30
00:01:45.721 --> 00:01:50.475
the plus sign.
&gt;&gt; Brian Holt: Plus, not important.

31
00:01:50.475 --> 00:01:51.199
&gt;&gt; Speaker 2: [LAUGH]

32
00:01:51.199 --> 00:01:52.808
&gt;&gt; Brian Holt: Least important part of

33
00:01:52.808 --> 00:01:55.146
HTML, just kidding, or of math.

34
00:01:55.146 --> 00:01:59.592
Anyway, so I'm looking at this,
I've decided that I wanna press 2,

35
00:01:59.592 --> 00:02:01.350
which is not there.

36
00:02:01.350 --> 00:02:05.032
And by the time I make that decision and
I go to press it, by that time,

37
00:02:05.032 --> 00:02:08.032
the JavaScript will have loaded,
right, hopefully.

38
00:02:08.032 --> 00:02:10.780
So I click on it and
then it will happen, right?

39
00:02:10.780 --> 00:02:14.113
Whereas doing the inverse,
I have to wait for the JavaScript.

40
00:02:14.113 --> 00:02:18.290
When I load the page, it will be
perfectly interactive and ready to go.

41
00:02:18.290 --> 00:02:21.724
But it'll take me that much longer
cuz I have to wait for it to load and

42
00:02:21.724 --> 00:02:24.460
then I have to make the decision and
press the button.

43
00:02:24.460 --> 00:02:28.699
So that's why you load in that order.

44
00:02:28.699 --> 00:02:32.167
The reason why you load CSS first
is because you don't want it

45
00:02:32.167 --> 00:02:34.799
to load this.
&gt;&gt; Brian Holt: I wonder if I could just

46
00:02:34.799 --> 00:02:40.818
show you what that would look like?
&gt;&gt; Brian Holt: If I do this,

47
00:02:40.818 --> 00:02:46.657
when I come in here and
I say, let's do that,

48
00:02:46.657 --> 00:02:52.827
and then we wanna do
this like low-end mobile.

49
00:02:52.827 --> 00:02:58.131
And I refresh my page, no,
it's not gonna really show you,

50
00:02:58.131 --> 00:03:04.538
okay.
&gt;&gt; Brian Holt: Network,

51
00:03:04.538 --> 00:03:08.720
okay, gotta remember how to do this,
it's been a while since I've done

52
00:03:08.720 --> 00:03:13.116
this.
&gt;&gt; Brian Holt: No,

53
00:03:13.116 --> 00:03:16.070
I don't wanna do that either,
okay, doesn't matter.

54
00:03:16.070 --> 00:03:20.655
So anyway, it would load bare HTML,
so it'd be white and black text,

55
00:03:20.655 --> 00:03:23.628
right, like what we
were looking at before.

56
00:03:23.628 --> 00:03:26.333
Before we loaded our CSS,
and then it would flash and

57
00:03:26.333 --> 00:03:28.374
upgrade to this nice-looking style.

58
00:03:28.374 --> 00:03:33.840
That's called FOUT, flash of
unstyled content, or FOUC, rather.

59
00:03:33.840 --> 00:03:38.370
And you generally try to avoid that,
you wanna just load the first time

60
00:03:38.370 --> 00:03:42.801
something nice to look at.
&gt;&gt; Brian Holt: Great class by

61
00:03:42.801 --> 00:03:46.587
Steve Kinney on more performance-oriented
things for JavaScript and

62
00:03:46.587 --> 00:03:49.500
frontend development in general,
so check that out.

63
00:03:50.610 --> 00:03:56.230
Okay, let's go back to, there we go,
so where did I go wrong?

64
00:03:56.230 --> 00:03:59.562
I thought I had enough of everything but
I guess I don't, so

65
00:03:59.562 --> 00:04:03.928
let's just add one more of these.
&gt;&gt; Brian Holt: And

66
00:04:03.928 --> 00:04:09.294
we're gonna do 1, 2, 3, and

67
00:04:09.294 --> 00:04:16.454
+.
&gt;&gt; Brian Holt: So what is nice

68
00:04:16.454 --> 00:04:21.930
about the way that we did this, I just
added another row of HTML, and guess what?

69
00:04:21.930 --> 00:04:25.330
It was already styled, it already worked,
I didn't have to do anything else, and

70
00:04:25.330 --> 00:04:27.190
I think that's a pretty big win.

71
00:04:28.680 --> 00:04:31.530
So when they invent new numbers,
they can put another row in there and

72
00:04:31.530 --> 00:04:34.220
it's gonna be great.

73
00:04:34.220 --> 00:04:37.274
I mean, I guess you could just make
this a hexadecimal calculator,

74
00:04:37.274 --> 00:04:39.755
I don't know why you'd want to,
but you could [LAUGH].

75
00:04:39.755 --> 00:04:41.420
And then you have more rows.

76
00:04:43.550 --> 00:04:49.380
Okay, we're back to base ten math now,

77
00:04:49.380 --> 00:04:53.847
so I have to make a calculator.

78
00:04:53.847 --> 00:04:56.157
And the way I'm gonna
make a calculator is,

79
00:04:56.157 --> 00:04:58.980
I'm gonna have kind of three
things going on at once.

80
00:04:58.980 --> 00:05:01.430
I'm gonna have some sort of running total,
cuz that's the way a calculator works.

81
00:05:01.430 --> 00:05:05.065
Right, I add a bunch of numbers together,
I subtract things and

82
00:05:05.065 --> 00:05:08.110
multiply things,
I have some sort of running total.

83
00:05:08.110 --> 00:05:12.492
So I'm gonna say let runningTotal
at the beginning = 0.

84
00:05:12.492 --> 00:05:15.688
Right, then as a user types in numbers,

85
00:05:15.688 --> 00:05:19.542
I have to keep a track of
what they're typing in.

86
00:05:19.542 --> 00:05:24.311
Okay, so that's going to be, let buffer,
that's what I'm gonna call that,

87
00:05:24.311 --> 00:05:27.530
like a buffer that's kind of waiting for
user input.

88
00:05:27.530 --> 00:05:29.990
And that's gonna be string 0.

89
00:05:29.990 --> 00:05:34.138
And the reason why is,
what's out here is a string, right, so

90
00:05:34.138 --> 00:05:37.209
I'm just gonna make it
a string to begin with.

91
00:05:37.209 --> 00:05:42.020
Okay, then I'm gonna have
something called previousOperator,

92
00:05:45.229 --> 00:05:47.143
&gt;&gt; Brian Holt: What that's gonna be is,

93
00:05:47.143 --> 00:05:51.933
if I do 12 and I hit plus, right,
the user hit plus previously.

94
00:05:51.933 --> 00:05:56.453
And I have to keep track on
what they previously pressed.

95
00:05:56.453 --> 00:06:00.191
Right, so I hit 12,
then I hit plus, 15, equals,

96
00:06:00.191 --> 00:06:04.664
I have to keep track that the last
thing that they pressed was plus.

97
00:06:04.664 --> 00:06:08.073
Right, cuz I'm gonna display to them 27,
but

98
00:06:08.073 --> 00:06:13.490
I have to keep track that the last thing
that they pressed is plus, we follow?

99
00:06:13.490 --> 00:06:14.880
So that's what previousOperator's gonna

100
00:06:14.880 --> 00:06:18.278
be.
&gt;&gt; Brian Holt: So

101
00:06:18.278 --> 00:06:21.940
first thing I'm gonna do is,
I'm gonna bind up my event listener.

102
00:06:25.882 --> 00:06:29.206
&gt;&gt; Brian Holt: Which is going to be,

103
00:06:29.206 --> 00:06:34.175
where do I have it on here?
&gt;&gt; Brian Holt: I'm

104
00:06:34.175 --> 00:06:36.964
gonna have a document.querySelector.

105
00:06:40.085 --> 00:06:43.551
&gt;&gt; Brian Holt: .calc-buttons.

106
00:06:43.551 --> 00:06:50.670
So I'm gonna listen at the top
level at the container level.

107
00:06:50.670 --> 00:06:55.848
And then I'm gonna say, addEventListener,

108
00:06:55.848 --> 00:07:00.625
it's gonna be click, and get rid of that,

109
00:07:00.625 --> 00:07:03.812
function, it's gonna take

110
00:07:03.812 --> 00:07:10.792
in.
&gt;&gt; Brian Holt: That's

111
00:07:10.792 --> 00:07:17.160
why that probably doesn't work,
event, that's actually exactly.

112
00:07:17.160 --> 00:07:24.285
I have no idea how this is working.
&gt;&gt; Brian Holt: That is fascinating,

113
00:07:24.285 --> 00:07:29.630
so I don't know how this is working
right here because that is wrong.

114
00:07:29.630 --> 00:07:34.750
Okay, cool, it fixed itself.
&gt;&gt; Speaker 2: What's wrong with it?

115
00:07:34.750 --> 00:07:36.060
&gt;&gt; Brian Holt: So if we go in here and

116
00:07:36.060 --> 00:07:39.465
look at my HTML or my,
let's go through all of them.

117
00:07:39.465 --> 00:07:43.099
If we go and look at my JavaScript,
inspect, and

118
00:07:43.099 --> 00:07:49.103
look at the JavaScript.
&gt;&gt; Brian Holt: Network,

119
00:07:49.103 --> 00:07:51.105
you look at this calculator.js,

120
00:07:51.105 --> 00:07:57.059
wherever that comes in.
&gt;&gt; Brian Holt: calculator.js.

121
00:08:01.620 --> 00:08:02.589
&gt;&gt; Brian Holt: I guess I can click up here

122
00:08:02.589 --> 00:08:03.380
on the JavaScript.

123
00:08:07.950 --> 00:08:11.360
Well, let's just look at,
it's right there.

124
00:08:11.360 --> 00:08:14.240
404, remember you can't refresh.

125
00:08:14.240 --> 00:08:17.822
That's a fun bug, so

126
00:08:17.822 --> 00:08:22.952
Project.
&gt;&gt; Brian Holt: Go

127
00:08:22.952 --> 00:08:28.939
down here to calculator.
&gt;&gt; Brian Holt: This one,

128
00:08:28.939 --> 00:08:32.008
response, whatever.

129
00:08:32.008 --> 00:08:34.256
Let's just do,

130
00:08:34.256 --> 00:08:40.669
calculator.js,
&gt;&gt; Brian Holt: Right

131
00:08:40.669 --> 00:08:45.402
here.
&gt;&gt; Brian Holt: So, it does click here

132
00:08:45.402 --> 00:08:51.130
right button click
event.target.enter text, right?

133
00:08:51.130 --> 00:08:54.010
That makes sense, but
I am not tracking the event,

134
00:08:54.010 --> 00:08:57.270
like I did not accept the event
parameter right there.

135
00:08:57.270 --> 00:09:01.660
I have no idea how that's working,
that is mysterious.

136
00:09:01.660 --> 00:09:06.050
[LAUGH] It works, and it works in Chrome,
it does not work in Firefox, and

137
00:09:06.050 --> 00:09:10.819
I'm sure that's breaking in Firefox.
&gt;&gt; Speaker 3: Something built-in

138
00:09:10.819 --> 00:09:14.390
that's figuring out.
&gt;&gt; Brian Holt: You probably a moron,

139
00:09:14.390 --> 00:09:16.360
so this is what we're doing.

140
00:09:16.360 --> 00:09:18.140
Thanks, Chrome, you are right.

141
00:09:18.140 --> 00:09:23.460
So I can not argue with that.

142
00:09:23.460 --> 00:09:26.110
Okay, use event there,
I guess it does work.

143
00:09:26.110 --> 00:09:28.100
It's optional, just kidding, it's not.

144
00:09:28.100 --> 00:09:30.810
Okay, absolutely not optional,
you have to put it in there.

145
00:09:31.870 --> 00:09:36.971
Okay, so I'm gonna call a function

146
00:09:36.971 --> 00:09:44.293
called ButtonClick{event.target.value).

147
00:09:49.226 --> 00:09:50.234
&gt;&gt; Brian Holt: Okay,, and then I'm gonna

148
00:09:50.234 --> 00:09:55.309
write a function called button click.
&gt;&gt; Brian Holt: It

149
00:09:55.309 --> 00:09:59.830
doesn't really matter whether you put
this in function, buttonClick and

150
00:09:59.830 --> 00:10:09.581
this takes in some sort of value.
&gt;&gt; Brian Holt: So

151
00:10:09.581 --> 00:10:16.658
I wanna do two different things.
&gt;&gt; Brian Holt: If it's a number,

152
00:10:16.658 --> 00:10:19.580
I wanna go down a different code path.

153
00:10:19.580 --> 00:10:23.050
If it's a symbol, I want to go down
a different code path, right?.

154
00:10:23.050 --> 00:10:25.840
So, I need to ask,
is value a number or not?

155
00:10:25.840 --> 00:10:26.910
And how can I do that?

156
00:10:28.020 --> 00:10:33.191
There's several ways,
there's a function called isNotANumber.

157
00:10:35.446 --> 00:10:37.856
&gt;&gt; Brian Holt: So if I do isNaN,

158
00:10:37.856 --> 00:10:43.570
like that,
&gt;&gt; Brian Holt: Let's see.

159
00:10:43.570 --> 00:10:46.976
Let's show you here in the browser,
and then you can kinda see how this

160
00:10:46.976 --> 00:10:52.490
works.
&gt;&gt; Brian Holt: Let's

161
00:10:52.490 --> 00:10:56.370
get rid of the filter, filter go away.

162
00:10:56.370 --> 00:11:01.985
Clear, and there we go, okay?

163
00:11:01.985 --> 00:11:05.192
So, you remember our friend parseInt?

164
00:11:05.192 --> 00:11:07.450
If I give it 5, it gives me 5.

165
00:11:07.450 --> 00:11:11.610
If I give it C, it gives me Nan.

166
00:11:13.600 --> 00:11:17.210
Which is a specific in JavaScript
which means not a number.

167
00:11:17.210 --> 00:11:19.030
The thing that you gave
me is not a number.

168
00:11:20.680 --> 00:11:25.120
Or if I do like five divided by zero,
it's infinity.

169
00:11:25.120 --> 00:11:29.680
Okay so there's a couple of them,
how do you get that to work?

170
00:11:29.680 --> 00:11:35.460
Or like c plus five, edit five plus c.

171
00:11:38.540 --> 00:11:40.870
It's gonna do coercion, anyway.

172
00:11:40.870 --> 00:11:44.780
Nonetheless not a number, so
you get not a number out of paseInt.

173
00:11:47.600 --> 00:11:51.105
So I can ask, is not a number,
and another thing,

174
00:11:51.105 --> 00:11:54.374
this is a weird thing about JavaScript,
so NaN,

175
00:11:54.374 --> 00:11:59.356
not a number.
&gt;&gt; Brian Holt: Not

176
00:11:59.356 --> 00:12:01.280
a number is not equal to not a number.

177
00:12:03.090 --> 00:12:07.473
Which like through the mathematics of it
like two not a number, are could very

178
00:12:07.473 --> 00:12:13.020
definitely be very different things.
&gt;&gt; Brian Holt: So

179
00:12:13.020 --> 00:12:16.030
they could be separate
types of not a number.

180
00:12:16.030 --> 00:12:19.000
So that's why there's
a function of is not a number.

181
00:12:19.000 --> 00:12:21.690
It's nonsensical like let's
not get too much into it but

182
00:12:23.950 --> 00:12:27.630
We can take advantage of this
fact to say is parseInt value.

183
00:12:29.130 --> 00:12:31.620
So if this is not a number,
it's a symbol, right?

184
00:12:31.620 --> 00:12:39.100
So right here I can say,
handleSymbol with value and

185
00:12:39.100 --> 00:12:46.330
here I can say handleNumber With value,
okay?

186
00:12:46.330 --> 00:12:48.176
Does that kind of make sense
how I broke that down into two

187
00:12:48.176 --> 00:12:50.891
different things?
&gt;&gt; Brian Holt: So

188
00:12:50.891 --> 00:12:56.805
now I'm gonna write two functions here.
&gt;&gt; Brian Holt: handleNumber,

189
00:12:56.805 --> 00:12:59.240
which is going to take in value.

190
00:13:01.090 --> 00:13:02.220
And function.

191
00:13:04.810 --> 00:13:06.953
handleSymbol, which is gonna
take in a value as well.

192
00:13:14.522 --> 00:13:15.276
&gt;&gt; Brian Holt: So hopefully,

193
00:13:15.276 --> 00:13:19.162
you're kind of starting to see my thought
process of decomposing this larger,

194
00:13:19.162 --> 00:13:21.666
gross problem into smaller,
solvable problems.

195
00:13:27.343 --> 00:13:28.860
&gt;&gt; Brian Holt: So numbers is pretty easy.

196
00:13:30.690 --> 00:13:39.830
If the buffer is triple equal to zero,
&gt;&gt; Brian Holt: You replace it, right.

197
00:13:39.830 --> 00:13:43.798
Because of it's zero, do I have it
up here so you can actually see it.

198
00:13:43.798 --> 00:13:45.585
Clear.

199
00:13:45.585 --> 00:13:49.270
If I hit 5 while the buffer is 0,
then it just turns into 5, right?

200
00:13:49.270 --> 00:13:51.790
You don't append,
otherwise you start appending.

201
00:13:52.900 --> 00:13:56.300
So what that means is, if that didn't
buffer it's just equal to value.

202
00:13:59.177 --> 00:14:02.604
&gt;&gt; Brian Holt: Else, buffer You're going

203
00:14:02.604 --> 00:14:07.740
to append on the end of it,
so I'm gonna say

204
00:14:07.740 --> 00:14:13.490
+= value.
&gt;&gt; Brian Holt: Right?

205
00:14:13.490 --> 00:14:16.700
So again, if someone hits 7 and
then you hit 5,

206
00:14:16.700 --> 00:14:19.060
you expect that 5 to go on the end of it,
right?

207
00:14:19.060 --> 00:14:24.166
So that's what that += is doing.
&gt;&gt; Brian Holt: Then,

208
00:14:24.166 --> 00:14:28.040
down here at the bottom,
I need to write buffer out to here, right?

209
00:14:28.040 --> 00:14:29.360
It needs to be written out there.

210
00:14:29.360 --> 00:14:31.410
If I don't write it,
then it's not gonna get out there.

211
00:14:31.410 --> 00:14:33.260
So I'm gonna make
a function called rerender.

212
00:14:35.483 --> 00:14:36.628
&gt;&gt; Brian Holt: I'm just gonna call that

213
00:14:36.628 --> 00:14:39.466
any time that anything's changed
that I need to rerender, so

214
00:14:39.466 --> 00:14:44.368
function rerender is gonna be really easy.
&gt;&gt; Brian Holt: All

215
00:14:44.368 --> 00:14:48.787
it's gonna do,
let me just make sure I get this right.

216
00:14:48.787 --> 00:14:54.368
Yeah, I'm gonna write something
like screen.innerText

217
00:14:54.368 --> 00:14:58.445
= buffer,
&gt;&gt; Brian Holt: And

218
00:14:58.445 --> 00:15:01.816
I'm gonna say const screen.

219
00:15:01.816 --> 00:15:07.285
This is a signed document that

220
00:15:07.285 --> 00:15:12.381
queryselector.screen.

221
00:15:12.381 --> 00:15:16.890
Okay, I have a code formatted that every

222
00:15:16.890 --> 00:15:19.530
time I click save it just reformats
my code to be a little nicer.

223
00:15:20.920 --> 00:15:25.720
I quite like it, because then I don't have
to think about formatting very much, but

224
00:15:25.720 --> 00:15:28.160
if that's what, if you see code shifting
around, that's what's happening.

225
00:15:29.420 --> 00:15:33.490
It's called Prettier,
if you're interested in it, okay?

226
00:15:33.490 --> 00:15:36.658
So now at least, I think if I hit 2,

227
00:15:36.658 --> 00:15:42.270
nothing will happen.
&gt;&gt; Brian Holt: Let's get rid of that.

228
00:15:44.470 --> 00:15:48.348
Smaller and
make this go to the bottom, and

229
00:15:48.348 --> 00:15:51.903
please make this not be a mobile phone,

230
00:15:51.903 --> 00:15:56.709
okay.
&gt;&gt; Brian Holt: Have you gotten this

231
00:15:56.709 --> 00:16:01.856
far?
&gt;&gt; Brian Holt: handleNumber(value)function

232
00:16:01.856 --> 00:16:06.300
value, handleNumber, and
I'm including this at the bottom, right?

233
00:16:06.300 --> 00:16:06.800
Okay,

234
00:16:16.183 --> 00:16:19.522
&gt;&gt; Brian Holt: Screen.

235
00:16:19.522 --> 00:16:22.840
At the top I'm doing
the document chris calc buttons.

236
00:16:22.840 --> 00:16:23.950
That's what that's called, right?

237
00:16:27.380 --> 00:16:29.290
Calc buttons, yeah, should be.

238
00:16:34.280 --> 00:16:38.374
Just console log here, console.log here.

239
00:16:38.374 --> 00:16:40.690
I do this all the time, console.log here.

240
00:16:40.690 --> 00:16:42.080
I think every web developer does.

241
00:16:43.510 --> 00:16:46.400
Just to make sure like stuff is, so
you can see down here it's happening.

242
00:16:46.400 --> 00:16:52.180
It says here down there, so
that function is happening, okay?

243
00:16:53.920 --> 00:16:54.880
It's calling button click.

244
00:16:54.880 --> 00:16:55.680
So if I get down here,

245
00:16:55.680 --> 00:17:01.164
is it going to in to handle number?
&gt;&gt; Brian Holt: It's not getting the handle

246
00:17:01.164 --> 00:17:09.312
number, okay?
&gt;&gt; Brian Holt: So why is that?

247
00:17:18.513 --> 00:17:20.098
&gt;&gt; Brian Holt: console.log value, and

248
00:17:20.098 --> 00:17:27.211
we'll see what's being passed in here.
&gt;&gt; Brian Holt: Nothing

249
00:17:27.211 --> 00:17:30.060
is being passed in there,
that is a problem.

250
00:17:30.060 --> 00:17:31.419
So why is that happening?

251
00:17:31.419 --> 00:17:34.320
event.target.value, so

252
00:17:34.320 --> 00:17:43.701
what is console.log(event.target.value)?
&gt;&gt; Brian Holt: Nothing,

253
00:17:43.701 --> 00:17:50.990
what's event.target?
&gt;&gt; Brian Holt: I

254
00:17:50.990 --> 00:17:55.683
don't want value,
I want event.target.innerText, don't I?

255
00:17:55.683 --> 00:18:01.280
I do, value.innerText.

256
00:18:01.280 --> 00:18:02.410
That's what I'm interested in, right?

257
00:18:02.410 --> 00:18:10.835
I'm interested what the button is.
&gt;&gt; Brian Holt: Now you can

258
00:18:10.835 --> 00:18:15.601
see it's adding things to my buffer at the
top and its re-rendering correctly, but

259
00:18:15.601 --> 00:18:20.051
I'm so used to typing event.target.value
cuz that's usually what you do.

260
00:18:20.051 --> 00:18:22.583
You're usually not reading
from the inner text,

261
00:18:22.583 --> 00:18:25.730
you're usually reading from an input and
you get with value.

262
00:18:25.730 --> 00:18:30.438
So that's an easy thing to mess up, but

263
00:18:30.438 --> 00:18:37.012
now the numbers work,
that's a plus, pun intended.

264
00:18:37.012 --> 00:18:38.429
I didn't even get a laugh.

265
00:18:38.429 --> 00:18:42.060
[LAUGH] That was bad, okay?

266
00:18:42.060 --> 00:18:43.886
I'm sorry, so

267
00:18:43.886 --> 00:18:52.663
handleSymbol.
&gt;&gt; Brian Holt: So

268
00:18:52.663 --> 00:18:57.057
what I could do here is I could
do a bunch of if this, then this,

269
00:18:57.057 --> 00:19:00.430
else if this, else if this, else if this.

270
00:19:00.430 --> 00:19:02.570
There's a thing that's even better for
that.

271
00:19:02.570 --> 00:19:07.490
It's called a switch statement,
so I'm gonna say switch Value.

272
00:19:07.490 --> 00:19:12.626
So I'm gonna switch different
code blocks based on value,

273
00:19:12.626 --> 00:19:17.555
and the first one I'm gonna
be worried about, is case C,

274
00:19:17.555 --> 00:19:20.753
so if it's equal to C, then do this.

275
00:19:20.753 --> 00:19:24.713
Buffer is assigned zero,

276
00:19:24.713 --> 00:19:29.396
runningTotal Is assigned 0.

277
00:19:29.396 --> 00:19:34.956
This should be a string,
&gt;&gt; Brian Holt: And break.

278
00:19:34.956 --> 00:19:37.617
Break, you do have to put break;,

279
00:19:37.617 --> 00:19:41.710
that basically means I'm
the end of this case, okay?

280
00:19:41.710 --> 00:19:46.692
Then I'm gonna do case equals,
so if its equal to that, if, so

281
00:19:46.692 --> 00:19:52.690
what the switch is saying is like,
take this expression, so value.

282
00:19:52.690 --> 00:19:55.594
If it's equal to C, then do this,

283
00:19:55.594 --> 00:20:00.419
if it's equal to equals then do this,
so on and so forth.

284
00:20:00.419 --> 00:20:04.419
So first you need to say, if there is
nothing, if there is no previous operator

285
00:20:10.660 --> 00:20:12.790
&gt;&gt; Brian Holt: Yeah, so let's do this.

286
00:20:12.790 --> 00:20:15.920
If previous operator is assigned to null,
you need to know about null.

287
00:20:15.920 --> 00:20:19.560
I was trying to kinda not talk about it
but it is a useful thing to talk about.

288
00:20:20.560 --> 00:20:23.720
So null is different than zero.

289
00:20:23.720 --> 00:20:26.550
Null is the absence of anything, right?

290
00:20:26.550 --> 00:20:27.850
So in this case,

291
00:20:27.850 --> 00:20:31.060
we're actually gonna make previous
operator up here initially signed a null.

292
00:20:31.060 --> 00:20:33.432
It means nothing has been
previously assigned here.

293
00:20:35.251 --> 00:20:37.087
&gt;&gt; Brian Holt: So if nothing has been

294
00:20:37.087 --> 00:20:43.209
previously assigned, previous
operator here should as well be null.

295
00:20:43.209 --> 00:20:47.600
When you're clearing everything out
&gt;&gt; Brian Holt: So that's what null is.

296
00:20:47.600 --> 00:20:49.560
Null is just like the black hole.

297
00:20:49.560 --> 00:20:51.080
Nothing has been there.

298
00:20:51.080 --> 00:20:52.540
It's not zero, it's null.

299
00:20:53.920 --> 00:20:57.460
Other languages call this other things,
like I think Ruby calls it nil.

300
00:20:57.460 --> 00:20:58.940
There's other names for it.

301
00:20:58.940 --> 00:20:59.930
Here it is called null.

302
00:21:02.580 --> 00:21:09.580
So if a previous operator is null, it
means that you should do nothing, right?

303
00:21:09.580 --> 00:21:12.770
If you just keep pressing equals
on a calculator it does nothing.

304
00:21:12.770 --> 00:21:14.770
So what you're going to do here
is you just say, hey, return.

305
00:21:14.770 --> 00:21:18.480
Like skip the rest of this function,
just get out of here.

306
00:21:18.480 --> 00:21:23.384
That's what return is going to do here.
&gt;&gt; Brian Holt: Otherwise you're gonna

307
00:21:23.384 --> 00:21:26.988
do something, I'm gonna call it flush
operation, which is gonna mean,

308
00:21:26.988 --> 00:21:30.140
I have some sort of previous operator,
I want you to now do that.

309
00:21:30.140 --> 00:21:34.150
I want you to commit to that operation
that you were holding onto, okay?

310
00:21:34.150 --> 00:21:37.940
So flush operation with parseInt buffer.

311
00:21:39.240 --> 00:21:43.720
So I'm gonna turn buffer into a number and
pass it into flushOperation.

312
00:21:43.720 --> 00:21:48.856
I'm gonna set previousOperator = null.

313
00:21:48.856 --> 00:21:58.105
I'm gonna set buffer =
&gt;&gt; Brian Holt: runningTotal.

314
00:22:04.677 --> 00:22:07.221
&gt;&gt; Brian Holt: And I'm gonna start running

315
00:22:07.221 --> 00:22:08.921
total equal to 0.

316
00:22:08.921 --> 00:22:09.421
Break.

317
00:22:10.450 --> 00:22:14.849
So I'm gonna set buffer
equal to running totals so

318
00:22:14.849 --> 00:22:19.876
that next time that I call re
render that buffer is going to

319
00:22:19.876 --> 00:22:25.009
be Actually even better than making that,
I'm gonna make

320
00:22:25.009 --> 00:22:30.211
this.
&gt;&gt; Brian Holt: So

321
00:22:30.211 --> 00:22:35.040
if I put these double quotes here, and
this is doing string concatenation.

322
00:22:35.040 --> 00:22:37.970
So I'm gonna turn running total
into a string by doing it.

323
00:22:37.970 --> 00:22:38.820
This way right.
And

324
00:22:38.820 --> 00:22:40.890
we're keeping offer
a string the entire time.

325
00:22:40.890 --> 00:22:42.540
So it's a good idea to keep
something the same type.

326
00:22:42.540 --> 00:22:45.190
You don't wanna be switching types
back and fort really don't you.

327
00:22:49.660 --> 00:22:51.010
Okay and then break that we're done.

328
00:22:52.040 --> 00:22:56.406
Then I'm gonna do case back arrow

329
00:23:08.543 --> 00:23:11.130
&gt;&gt; Brian Holt: Back arrow.

330
00:23:11.130 --> 00:23:16.000
Maybe it's left arrow.
&gt;&gt; Brian Holt: Just called arrow.

331
00:23:16.000 --> 00:23:17.210
Let's see what happens.

332
00:23:22.180 --> 00:23:23.730
And which one did I use?

333
00:23:24.810 --> 00:23:26.446
This is a problem?

334
00:23:26.446 --> 00:23:31.580
I think that's the one.
&gt;&gt; Brian Holt: Even

335
00:23:31.580 --> 00:23:33.830
better we'll just copy
from the index additional.

336
00:23:33.830 --> 00:23:34.950
Then we definitely get the right arrow.

337
00:23:37.590 --> 00:23:43.263
It was up here.
&gt;&gt; Brian Holt: So

338
00:23:43.263 --> 00:23:49.236
that case we're gonna call,
if (buffer === 1),

339
00:23:49.236 --> 00:23:58.540
buffer that length rather.
&gt;&gt; Brian Holt: So,

340
00:23:58.540 --> 00:24:01.188
if it's 5, then it's gonna be 0.

341
00:24:01.188 --> 00:24:04.701
If it's 0, it's still gonna be 0
whenever someone does a backspace.

342
00:24:04.701 --> 00:24:10.356
The buffer is going to be assigned just 0,

343
00:24:10.356 --> 00:24:16.178
else buffer is going
to be assigned buffer.

344
00:24:16.178 --> 00:24:20.358
We've talked about substring a little bit,

345
00:24:20.358 --> 00:24:27.212
0 to buffer.length minus 1.
&gt;&gt; Brian Holt: So

346
00:24:27.212 --> 00:24:30.858
you're gonna take one off of it, and

347
00:24:30.858 --> 00:24:35.081
then break.
&gt;&gt; Brian Holt: Lastly,

348
00:24:35.081 --> 00:24:39.094
we're gonna default which is the default
thing that you want it do if none of these

349
00:24:39.094 --> 00:24:42.831
other cases match, which means it's
some sort of operator at this point.

350
00:24:42.831 --> 00:24:50.146
We've covered every other case, so
we're gonna say handleMath(value) break.

351
00:24:55.052 --> 00:24:57.670
&gt;&gt; Brian Holt: Okay, good so far?

352
00:24:57.670 --> 00:25:01.123
Please.
&gt;&gt; Speaker 4: When you do the 0.

353
00:25:04.620 --> 00:25:05.190
&gt;&gt; Speaker 4: Type,

354
00:25:05.190 --> 00:25:10.810
isn't that supposed to be buffered out,
length equals to one?

355
00:25:10.810 --> 00:25:13.330
Okay, got it.

356
00:25:13.330 --> 00:25:15.319
You just said like buffer length,
so it doesn't matter.

357
00:25:15.319 --> 00:25:16.019
Got it.
&gt;&gt; Brian Holt: Yep.

358
00:25:19.958 --> 00:25:20.460
&gt;&gt; Brian Holt: Good question though.

359
00:25:22.700 --> 00:25:25.960
So, 35 now, I can hit clear and
nothing happens.

360
00:25:25.960 --> 00:25:27.410
Neat, why is that?

361
00:25:28.430 --> 00:25:29.470
Clear.

362
00:25:29.470 --> 00:25:31.590
You have to call rerender
after all of this, right?

363
00:25:33.330 --> 00:25:35.136
Where do I call rerender in here?

364
00:25:48.200 --> 00:25:50.809
&gt;&gt; Brian Holt: Yeah, I call it in button
clicks, so let's just move this from

365
00:25:50.809 --> 00:25:54.170
handleNumber up here, cuz you should
always rerender after every single time.

366
00:25:57.080 --> 00:26:00.939
So now if I refresh and say 28 and
I say clear, it goes back to 0.

367
00:26:03.250 --> 00:26:06.120
Or 36 and I hit delete,
it knocks off the 3.

368
00:26:06.120 --> 00:26:08.319
If I hit delete again, it hits 0.

369
00:26:08.319 --> 00:26:11.884
And I can hit backspace as much as I
want now, because 0 is length 1 so

370
00:26:11.884 --> 00:26:13.250
it does nothing, right?

371
00:26:15.870 --> 00:26:17.020
Okay.

372
00:26:17.020 --> 00:26:23.712
Now down to the handleMath part.
&gt;&gt; Brian Holt: So

373
00:26:23.712 --> 00:26:29.391
handleMath, function handleMath

374
00:26:29.391 --> 00:26:35.480
with value.
&gt;&gt; Brian Holt: So

375
00:26:35.480 --> 00:26:39.410
const intBuffer,
I'm gonna now coerce this into a number.

376
00:26:39.410 --> 00:26:41.470
So I'm gonna say parse.

377
00:26:41.470 --> 00:26:45.170
Int value, sorry not value, but buffer.

378
00:26:46.920 --> 00:26:49.271
This is a representation of
what's on the screen now.

379
00:26:56.790 --> 00:26:57.787
&gt;&gt; Brian Holt: Okay,

380
00:26:57.787 --> 00:27:02.251
and.
&gt;&gt; Brian Holt: If runningTotal,

381
00:27:04.513 --> 00:27:05.652
&gt;&gt; Brian Holt: What am I doing, not there.

382
00:27:10.408 --> 00:27:14.810
&gt;&gt; Brian Holt: If (runningTotal === 0)

383
00:27:14.810 --> 00:27:19.726
then runningTotal = intBuffer;

384
00:27:22.786 --> 00:27:27.774
&gt;&gt; Brian Holt: Else FlushOperation

385
00:27:27.774 --> 00:27:33.042
of intBuffer, okay?

386
00:27:33.042 --> 00:27:37.836
So if someone does a math operation,
and, so

387
00:27:37.836 --> 00:27:42.755
if I come in here and
I say clear 25 times, and

388
00:27:42.755 --> 00:27:47.190
I click times, I should be storing 25.

389
00:27:47.190 --> 00:27:49.640
That's actually now my new running total.

390
00:27:49.640 --> 00:27:52.730
So that's why I keep that
inside of running total.

391
00:27:52.730 --> 00:27:57.470
Otherwise, I have to go do some sort
of mathematics to get the new value.

392
00:27:57.470 --> 00:28:01.640
So that's why I'm gonna do
flushOperation there, okay?

393
00:28:01.640 --> 00:28:04.318
Then previousOperation,
we know if we're in handleMath,

394
00:28:04.318 --> 00:28:06.920
that previousOperation is
some sort of operator.

395
00:28:06.920 --> 00:28:08.610
So, we're going to store
our value in there.

396
00:28:10.210 --> 00:28:14.034
And then buffer, is assigned 0, right?

397
00:28:14.034 --> 00:28:16.240
Because we're ready for
the next number to come in.

398
00:28:16.240 --> 00:28:18.303
So that's how handleMath is happening

399
00:28:18.303 --> 00:28:22.758
here.
&gt;&gt; Brian Holt: Okay,

400
00:28:22.758 --> 00:28:26.458
I think the last thing we need to do now,
is the committing of math, right?

401
00:28:26.458 --> 00:28:31.569
So, function, flushOperation,
it's gonna have some

402
00:28:31.569 --> 00:28:36.363
sort of IntBuffer in here,
that's going to take in.

403
00:28:36.363 --> 00:28:38.114
And in other words we could do
this with a switch statement or

404
00:28:38.114 --> 00:28:39.281
you could do this with an if statement.

405
00:28:39.281 --> 00:28:44.988
Let's do it with an if statement just so
you know what that looks like,

406
00:28:44.988 --> 00:28:51.023
previousOperator === +.
&gt;&gt; Brian Holt: And

407
00:28:51.023 --> 00:28:57.070
we're gonna say runningTotal += intBuffer.

408
00:28:57.070 --> 00:29:01.406
And the rest of these
look exactly the same.

409
00:29:01.406 --> 00:29:07.280
So else, and
we can even just copy and paste this.

410
00:29:09.650 --> 00:29:14.718
If it's equal to minus, right,
then you minus equal into

411
00:29:14.718 --> 00:29:21.146
buffer.
&gt;&gt; Brian Holt: And

412
00:29:21.146 --> 00:29:26.050
if it's equal to,
I'm gonna just copy this out of here,

413
00:29:26.050 --> 00:29:32.400
if it's equal to multiplication,
then you're going to times equal it.

414
00:29:35.940 --> 00:29:39.380
And you could say else equals to this.

415
00:29:39.380 --> 00:29:42.420
But we're just gonna say else cuz
everything else would be division, right?

416
00:29:46.960 --> 00:29:53.488
So divide equals.
&gt;&gt; Brian Holt: Refresh.

417
00:29:53.488 --> 00:29:59.490
Now let's try 25 plus 5 equals nothing,
shit.

418
00:30:02.060 --> 00:30:02.760
Did I not?

419
00:30:02.760 --> 00:30:06.600
I just didn't handle
the equals case did I?

420
00:30:06.600 --> 00:30:08.160
I did, it should work.

421
00:30:10.990 --> 00:30:11.926
Case equals.

422
00:30:15.586 --> 00:30:17.597
&gt;&gt; Brian Holt:
FlushOperation(parseInt(buffer))

423
00:30:17.597 --> 00:30:18.939
previousOperator = null.

424
00:30:18.939 --> 00:30:22.227
Buffer = "", runningTotal's that.

425
00:30:29.087 --> 00:30:29.870
&gt;&gt; Brian Holt: What did I have in here?

426
00:30:29.870 --> 00:30:38.580
I think I had this.
&gt;&gt; Brian Holt: Interesting, okay.

427
00:30:38.580 --> 00:30:40.730
So let's see what's going on here.

428
00:30:40.730 --> 00:30:44.493
Case, so let's make sure we're
actually getting into this

429
00:30:44.493 --> 00:30:50.483
case.
&gt;&gt; Brian Holt: So

430
00:30:50.483 --> 00:30:55.560
I'm not, I see, +3 =,
and I am getting there.

431
00:30:55.560 --> 00:30:56.600
So that's good.

432
00:31:01.690 --> 00:31:04.280
So we get down to flushOperation.

433
00:31:09.350 --> 00:31:11.376
Make sure we're getting into that.

434
00:31:25.847 --> 00:31:27.494
&gt;&gt; Brian Holt: So we're never getting into

435
00:31:27.494 --> 00:31:31.271
flushOperations, let's figure
out why we're not getting into

436
00:31:31.271 --> 00:31:36.539
flushOperation.
&gt;&gt; Brian Holt: Where

437
00:31:36.539 --> 00:31:38.510
is the other console.log,
let's get rid of that, it's kind of noisy.

438
00:31:39.870 --> 00:31:46.850
Okay, so handleSymbol,
case here, so we're getting

439
00:31:46.850 --> 00:31:56.249
here.
&gt;&gt; Brian Holt: And

440
00:31:56.249 --> 00:32:05.921
the math const intBuffer here,
&gt;&gt; Brian Holt: So

441
00:32:05.921 --> 00:32:11.884
let's make sure that this,
&gt;&gt; Brian Holt: console.log,

442
00:32:18.330 --> 00:32:20.245
&gt;&gt; Brian Holt: previousOperation,

443
00:32:20.245 --> 00:32:22.060
previousOperator.

444
00:32:25.422 --> 00:32:26.990
That's probably right there,

445
00:32:26.990 --> 00:32:31.226
previousOperator.
&gt;&gt; Brian Holt: And

446
00:32:31.226 --> 00:32:38.196
this should be previousOperator,
previousOperator right here.

447
00:32:38.196 --> 00:32:40.483
So I had this as previousOperation,

448
00:32:40.483 --> 00:32:46.229
it needs to be previousOperator.
&gt;&gt; Brian Holt: Easy to mess up.

449
00:32:46.229 --> 00:32:50.743
25 plus 3 equals 28,

450
00:32:50.743 --> 00:32:54.640
hooray, times by 6,

451
00:32:54.640 --> 00:32:58.947
divide by 2, minus 6,

452
00:32:58.947 --> 00:33:03.916
awesome, any questions?
&gt;&gt; Speaker 4: Why

453
00:33:03.916 --> 00:33:06.220
does it keep turning to zero?
&gt;&gt; Brian Holt: Sorry?

454
00:33:06.220 --> 00:33:07.310
&gt;&gt; Speaker 4: Why does it keep on turning

455
00:33:07.310 --> 00:33:09.480
to zero?
&gt;&gt; Brian Holt: When I hit like minus,

456
00:33:09.480 --> 00:33:10.480
I did that on purpose.

457
00:33:12.920 --> 00:33:15.486
The reason being, let's get rid of that,

458
00:33:15.486 --> 00:33:17.690
is cuz I set the buffer
to zero right there.

459
00:33:20.250 --> 00:33:24.658
I had pulled out my calculator and that's
what it does, so that's what I emulated.

460
00:33:24.658 --> 00:33:29.971
You could totally,
&gt;&gt; Brian Holt: So

461
00:33:29.971 --> 00:33:36.745
if I did that 65 plus 3,
I gotta refresh the page, 65 plus,

462
00:33:36.745 --> 00:33:42.514
and it just stays like that,
right, 3, equals.

463
00:33:42.514 --> 00:33:48.160
You kinda need to because on the next
time when someone clicks something.

464
00:33:48.160 --> 00:33:50.490
So 65 plus,
right now it's in plus mode, but

465
00:33:50.490 --> 00:33:53.580
I'd have to otherwise delete
the number to enter a new number so

466
00:33:53.580 --> 00:33:58.521
that's why I did that.
&gt;&gt; Brian Holt: Laziness,

467
00:33:58.521 --> 00:34:01.400
I think the answer to your
question is laziness,

468
00:34:01.400 --> 00:34:08.493
any other questions?
&gt;&gt; Brian Holt: Do you understand,

469
00:34:08.493 --> 00:34:11.510
do you feel you understand
what happened there?

470
00:34:12.650 --> 00:34:16.310
I think it's pretty cool,
you now have the skill set after a day and

471
00:34:16.310 --> 00:34:21.114
a half of working at this to build
a functional, nice-looking calculator.

472
00:34:21.114 --> 00:34:24.760
Most JavaScript applications
can be a lot simpler than this.

473
00:34:24.760 --> 00:34:26.750
Building a website can
definitely be simpler than this.

