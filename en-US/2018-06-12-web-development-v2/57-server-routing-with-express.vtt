WEBVTT

1
00:00:00.030 --> 00:00:02.650
&gt;&gt; Brian Holt: So now we're gonna use
a framework very quick to build just

2
00:00:02.650 --> 00:00:03.740
a really quick API.

3
00:00:05.650 --> 00:00:12.290
So we're gonna go and
we're going to come to iterm,

4
00:00:12.290 --> 00:00:17.190
gonna stop this server, and
just like we did before with parcels and

5
00:00:17.190 --> 00:00:21.854
such, and
pop motion when npm install express.

6
00:00:21.854 --> 00:00:27.100
Express is a really simple
server framework for note.

7
00:00:28.520 --> 00:00:30.070
The most popular definitely.

8
00:00:31.490 --> 00:00:37.200
If you go to expressjs.com,
does also the documentation for it.

9
00:00:37.200 --> 00:00:40.380
Really, really good stuff.
&gt;&gt; Speaker 2: What is

10
00:00:40.380 --> 00:00:42.789
a framework?
&gt;&gt; Brian Holt: So

11
00:00:42.789 --> 00:00:46.522
when we use HTTP directly,
it's really low level.

12
00:00:46.522 --> 00:00:49.552
Like, it doesn't provide
much convenience for us, so

13
00:00:49.552 --> 00:00:52.910
we would have to build like
a big thing to make it work.

14
00:00:52.910 --> 00:00:56.310
Express is someone smarter than me,
went out and thought through this already.

15
00:00:56.310 --> 00:01:00.067
As like, here is a bunch of very
useful methods on top of HTTP.

16
00:01:00.067 --> 00:01:03.140
So you don't have to use that,
you just use Express.

17
00:01:03.140 --> 00:01:06.468
So its code somewhere else is written,
it's probably the best answer for it.

18
00:01:06.468 --> 00:01:07.941
Makes sense?

19
00:01:07.941 --> 00:01:09.292
Okay.

20
00:01:09.292 --> 00:01:13.870
That's a good question.
&gt;&gt; Brian Holt: Okay,

21
00:01:13.870 --> 00:01:18.790
I'm gonna come in here to
my web server really quick.

22
00:01:20.040 --> 00:01:23.981
And I'm just gonna copy and
paste this really quick,

23
00:01:23.981 --> 00:01:28.898
copy in here.
&gt;&gt; Brian Holt: So express,

24
00:01:28.898 --> 00:01:34.393
I'm inquiring that from that package
that I just downloaded from npm, okay.

25
00:01:34.393 --> 00:01:37.515
I'm gonna create a new application,
that's how you do that is you

26
00:01:37.515 --> 00:01:40.550
run the function and you get an app,
which is one server, okay.

27
00:01:41.930 --> 00:01:44.790
Then, I come down here, and
these are called routes.

28
00:01:44.790 --> 00:01:49.560
So any time that someone goes and
calls a get on slash,

29
00:01:49.560 --> 00:01:54.720
anyone, anytime someone navigates through
this, send them welcome to my site.

30
00:01:54.720 --> 00:02:01.805
So let's actually test that out,
if I go to 3000, you're gonna see,

31
00:02:01.805 --> 00:02:07.750
I need to run it, fair.
&gt;&gt; Brian Holt: Not magical.

32
00:02:07.750 --> 00:02:16.570
So node server.
&gt;&gt; Brian Holt: Do I not save this either?

33
00:02:16.570 --> 00:02:22.146
No, you gotta save it too, also important.
&gt;&gt; Brian Holt: So

34
00:02:22.146 --> 00:02:25.090
now it's on 3000, come back here, refresh.

35
00:02:25.090 --> 00:02:27.620
It says, welcome to my site, right.

36
00:02:27.620 --> 00:02:32.212
So that works relatively the same way.
&gt;&gt; Brian Holt: Okay, and

37
00:02:32.212 --> 00:02:34.960
then I wrote another
thing called complement.

38
00:02:34.960 --> 00:02:39.810
So if you come over here and
say /complement,

39
00:02:39.810 --> 00:02:43.870
it says you look nice today,
it's a very nice server, okay.

40
00:02:45.880 --> 00:02:49.668
And so, you can just kinda like write
these paths all over the place to

41
00:02:49.668 --> 00:02:52.096
accommodate all of this different routes.

42
00:02:52.096 --> 00:02:53.870
So this is how you write a web server.

43
00:02:53.870 --> 00:02:55.552
And a web server is
nothing more than lots and

44
00:02:55.552 --> 00:02:59.703
lots of these routes.
&gt;&gt; Brian Holt: Now you can get

45
00:02:59.703 --> 00:03:03.025
fancier than this, you can like read from
databases, you can do all sorts of crazy

46
00:03:03.025 --> 00:03:05.690
stuff, but we're not gonna do
anything much crazier than that.

47
00:03:07.610 --> 00:03:12.641
So if we come back here, to our thing.
&gt;&gt; Brian Holt: We

48
00:03:12.641 --> 00:03:19.550
talked about all of that.
&gt;&gt; Brian Holt: So

49
00:03:19.550 --> 00:03:21.870
this is how you will connect
it to your own page.

50
00:03:22.900 --> 00:03:25.969
So I'm gonna come back in here,

51
00:03:25.969 --> 00:03:30.856
and I'm gonna create a new index.html,
save it,

52
00:03:30.856 --> 00:03:35.869
index.html.
&gt;&gt; Brian Holt: Delete that and

53
00:03:35.869 --> 00:03:41.120
I'm gonna put html:5 and I'm going

54
00:03:41.120 --> 00:03:48.354
to put a script tag that
loads from complement.js.

55
00:03:49.796 --> 00:03:52.510
Let me create a new file here,

56
00:03:52.510 --> 00:03:58.900
it's gonna be called complement.j or
I need to create a new directory, don't I?

57
00:03:58.900 --> 00:04:04.285
New folder, call it public.
&gt;&gt; Brian Holt: Inside

58
00:04:04.285 --> 00:04:07.759
of public I'm gonna put complement.js.

59
00:04:09.070 --> 00:04:11.472
And now this is going to be code
that you've seen before, right.

60
00:04:11.472 --> 00:04:13.930
In course sector, it's gonna be a button.

61
00:04:13.930 --> 00:04:16.400
It's gonna add the vet
list from the button and

62
00:04:16.400 --> 00:04:20.717
then it's going to fetch from complement
and it's going to put that on the page.

63
00:04:20.717 --> 00:04:25.168
So all this is gonna do.
&gt;&gt; Brian Holt: And

64
00:04:25.168 --> 00:04:29.675
this has to come from public/complement,

65
00:04:29.675 --> 00:04:34.358
okay.
&gt;&gt; Brian Holt: And

66
00:04:34.358 --> 00:04:35.950
well, yeah, there we go.

67
00:04:35.950 --> 00:04:36.786
I'm gonna come in and

68
00:04:36.786 --> 00:04:41.338
put this as the HTML.
&gt;&gt; Brian Holt: Okay, so

69
00:04:41.338 --> 00:04:43.030
HTML you've seen before.

70
00:04:43.030 --> 00:04:44.802
It's got a p, it's got an h1.

71
00:04:44.802 --> 00:04:47.407
It's got a button that says request and
complement, and

72
00:04:47.407 --> 00:04:49.120
it gets that from complements.js.

73
00:04:49.120 --> 00:04:50.844
I need to change that
to be the same thing.

74
00:04:50.844 --> 00:04:57.968
Rename,
&gt;&gt; Brian Holt: Complements.js,

75
00:04:57.968 --> 00:05:01.730
okay?
&gt;&gt; Brian Holt: Now I'm gonna make

76
00:05:01.730 --> 00:05:05.510
my server accommodate requests from this.

77
00:05:05.510 --> 00:05:06.738
So let's copy and paste this and

78
00:05:06.738 --> 00:05:11.959
we'll break it apart.
&gt;&gt; Brian Holt: So when I go to my server

79
00:05:11.959 --> 00:05:16.828
js and replace this.
&gt;&gt; Brian Holt: So

80
00:05:16.828 --> 00:05:20.750
first thing is I got a bunch of
complements that it could send back, okay?

81
00:05:21.910 --> 00:05:25.650
Building an express path is
something that comes from node,

82
00:05:25.650 --> 00:05:28.990
and it just helps you deal with paths,
right?

83
00:05:28.990 --> 00:05:34.220
So you don't have to go from like,
directory to directory using bash.

84
00:05:34.220 --> 00:05:38.180
And you use like cd.., right,
to go backup something like that.

85
00:05:38.180 --> 00:05:45.075
Path handles those kind of relative paths.
&gt;&gt; Brian Holt: getRandomComplement, it's

86
00:05:45.075 --> 00:05:52.090
going to do a Math.random to get a random
index out of complement and return that.

87
00:05:52.090 --> 00:05:54.986
So this just returns a random
complement from complements.

88
00:05:56.544 --> 00:05:58.373
&gt;&gt; Brian Holt: app = express() creates

89
00:05:58.373 --> 00:06:00.200
a new server.

90
00:06:00.200 --> 00:06:05.390
So whenever someone asks for /, we're
going to send them index.html, right?

91
00:06:05.390 --> 00:06:10.630
Makes sense that they get the html,
when they request the homepage.

92
00:06:10.630 --> 00:06:13.380
Then we're gonna make a complement
endpoint that someone can ask for

93
00:06:13.380 --> 00:06:14.140
a complement.

94
00:06:14.140 --> 00:06:15.534
So it's going to be complement as an API.

95
00:06:15.534 --> 00:06:18.930
Remember from doc.ceo,
we were getting dog pictures?

96
00:06:18.930 --> 00:06:22.520
This is going to be sending complements,
okay.

97
00:06:23.860 --> 00:06:28.974
This is just going to res.json,
it's going to send a JSON object, right.

98
00:06:28.974 --> 00:06:32.900
So like we were getting JSON doc.ceo,
we're going to get this, and

99
00:06:32.900 --> 00:06:37.792
it's gonna have one key complement and
it's gonna be one RandomComplement, okay.

100
00:06:37.792 --> 00:06:42.031
The last thing that we're gonna do is,
we say anything that's in public,

101
00:06:42.031 --> 00:06:45.760
serve publicly, right,
that's what express.static means.

102
00:06:45.760 --> 00:06:50.350
So if you look inside of public, we have
this clients side JavaScript, right.

103
00:06:50.350 --> 00:06:55.790
So any time that they wanna
request /public/complements.js,

104
00:06:55.790 --> 00:06:58.940
they're going to get
the file complement.js.

105
00:06:58.940 --> 00:07:02.490
If we put out CSS in there and
called it complement.css,

106
00:07:02.490 --> 00:07:06.540
then anytime that someone requested
/public/complement.css, they would get it.

107
00:07:07.590 --> 00:07:10.110
So you have to be careful that
anything that gets put inside public

108
00:07:10.110 --> 00:07:12.400
is literally going to be
public to the entire world.

109
00:07:12.400 --> 00:07:15.034
So don't put user data in there,
for example, right?

110
00:07:15.034 --> 00:07:22.389
Make sure that any thing that's in there
you are comfortable everyone seeing, okay?

111
00:07:22.389 --> 00:07:24.501
How do we fill that up?

112
00:07:24.501 --> 00:07:26.125
Pretty good?

113
00:07:26.125 --> 00:07:31.472
So let's go restart our server.
&gt;&gt; Brian Holt: Stop this,

114
00:07:31.472 --> 00:07:36.388
rerun it.
&gt;&gt; Brian Holt: Now if I come back here and

115
00:07:36.388 --> 00:07:46.028
if I refresh this, it's gonna give me,
&gt;&gt; Brian Holt: Why is this not,

116
00:07:46.028 --> 00:07:48.700
I have to save it.

117
00:07:48.700 --> 00:07:52.927
Also important, make sure you save things.
&gt;&gt; Brian Holt: Okay,

118
00:07:52.927 --> 00:07:56.790
now if I come here,
I get a nice index.html, right?

119
00:07:56.790 --> 00:07:59.120
That's being served from my server.

120
00:07:59.120 --> 00:08:01.990
I haven't loaded a complement yet,
but if I click request and complement.

121
00:08:03.430 --> 00:08:08.844
Nothing happens, what?
&gt;&gt; Brian Holt: QuerySelector,

122
00:08:08.844 --> 00:08:12.139
so my selector is wrong.
&gt;&gt; Brian Holt: So

123
00:08:12.139 --> 00:08:14.916
here I did request-complement, e,

124
00:08:14.916 --> 00:08:21.640
complement.
&gt;&gt; Brian Holt: There you go.

125
00:08:21.640 --> 00:08:24.250
Now every time you click it,
you get a new response from the API.

126
00:08:25.610 --> 00:08:27.900
You can actually look
here in your network,

127
00:08:27.900 --> 00:08:30.380
this is what's coming over the network for
you.

128
00:08:31.990 --> 00:08:33.610
Okay, so let's clear this out.

129
00:08:33.610 --> 00:08:36.010
Every time I click request-complement,

130
00:08:36.010 --> 00:08:39.010
you can see here that it's
going out to the network and

131
00:08:39.010 --> 00:08:46.522
getting a fresh complement.
&gt;&gt; Brian Holt: Pretty cool,

132
00:08:46.522 --> 00:08:52.530
right?
&gt;&gt; Brian Holt: Any

133
00:08:52.530 --> 00:08:59.253
questions about what we've done?
&gt;&gt; Brian Holt: So

134
00:08:59.253 --> 00:09:01.200
this is node in the nutshell, right?

135
00:09:01.200 --> 00:09:05.419
You are now equipped to go out and
write your own server side code, right?

136
00:09:06.480 --> 00:09:09.890
You can store these complements inside
of a database, something like Mongo or

137
00:09:09.890 --> 00:09:13.750
MySQL, and
then you could have people add to them.

138
00:09:13.750 --> 00:09:15.800
You could have thousands of complements.

139
00:09:15.800 --> 00:09:17.140
You could have multiple kinds.

140
00:09:17.140 --> 00:09:19.790
You can go in and make insults
as well as complements, right?

141
00:09:20.900 --> 00:09:26.968
The world is your oyster.
&gt;&gt; Brian Holt: All right,

142
00:09:26.968 --> 00:09:30.300
so that is node in a nutshell.

143
00:09:30.300 --> 00:09:31.670
So this is writing JavaScript.

144
00:09:31.670 --> 00:09:34.100
This is the same language that
your browser's executing, but

145
00:09:34.100 --> 00:09:37.820
now your computer, like your server
is executing the same sort of code.

146
00:09:39.820 --> 00:09:42.610
But the nice thing about this is that,
if you don't like writing JavaScript,

147
00:09:42.610 --> 00:09:46.440
which I don't know who you are, but
you're not my friend, just kidding.

148
00:09:46.440 --> 00:09:51.122
You could write this in Ruby,
you could write this in Python, Java,

149
00:09:51.122 --> 00:09:53.544
Scheme, LISP, COBOL, Fortran,

150
00:09:53.544 --> 00:09:58.886
you could write them whatever you want.
&gt;&gt; Brian Holt: Also,

151
00:09:58.886 --> 00:10:04.531
they're coming out with Fortran Masters,
so keep an eye on that.

152
00:10:04.531 --> 00:10:08.100
My dad was a Fortran programmer
once upon a time, true story.

153
00:10:08.100 --> 00:10:12.310
Okay, so we kind of explained all that,
if you want more explanation,

154
00:10:12.310 --> 00:10:13.490
you can find that in here.

155
00:10:14.940 --> 00:10:19.426
So I invite you to extend this problem,
just if you want to play around,

156
00:10:19.426 --> 00:10:23.340
put it in its own GitHub repo.

157
00:10:23.340 --> 00:10:27.602
Add an insult endpoint, and
then make it so you can request insults or

158
00:10:27.602 --> 00:10:31.741
complements.
&gt;&gt; Brian Holt: Make this a parcel project,

159
00:10:31.741 --> 00:10:33.150
that would be really cool.

160
00:10:33.150 --> 00:10:35.601
So you could like,
maybe bring in like pop motion,

161
00:10:35.601 --> 00:10:37.778
you could animate in
this different things.

162
00:10:37.778 --> 00:10:39.700
And then style the whole thing using CSS.

163
00:10:39.700 --> 00:10:43.220
So that's kind of ways you could extend
this project and learn more about stuff.

