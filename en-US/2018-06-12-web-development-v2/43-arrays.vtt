WEBVTT

1
00:00:00.000 --> 00:00:02.540
&gt;&gt; Brian Holt: Let's go on to arrays.

2
00:00:05.009 --> 00:00:11.462
&gt;&gt; Brian Holt: Arrays are an ordered
list of something or anything.

3
00:00:11.462 --> 00:00:18.067
So here I have daysOfTheWeek,
and I have them in order here.

4
00:00:18.067 --> 00:00:22.224
So that's the big key about Arrays
is there's order to an array, right.

5
00:00:22.224 --> 00:00:26.019
This the first thing, this is the second
thing, this is the third thing,

6
00:00:26.019 --> 00:00:28.117
right, whereas objects have no order.

7
00:00:28.117 --> 00:00:31.605
Despite the fact that I
declared these in some order,

8
00:00:31.605 --> 00:00:35.335
inside of that object they're
not stored in that order.

9
00:00:35.335 --> 00:00:39.631
Right so, once it's declared in that order
I can't get them back out in that order,

10
00:00:39.631 --> 00:00:42.366
there's no guarantee of
order at all with an object.

11
00:00:42.366 --> 00:00:46.950
Whereas with arrays it's very ordered,
so I can be guaranteed that if this

12
00:00:46.950 --> 00:00:51.854
is the first thing here, this is the first
thing I'm gonna get out of it as well.

13
00:00:51.854 --> 00:00:55.183
So if I looked down here,
when I console.log that,

14
00:00:55.183 --> 00:00:57.917
I get this array back
that looks like that.

15
00:00:59.256 --> 00:01:01.243
&gt;&gt; Brian Holt: Arrays start at zero.

16
00:01:01.243 --> 00:01:04.299
Okay, so when I say daysOfTheweek(0),

17
00:01:04.299 --> 00:01:07.445
index zero is the first
element in the array.

18
00:01:07.445 --> 00:01:12.161
I know that's a little weird, but
programmers always start at zero.

19
00:01:12.161 --> 00:01:16.979
If you remember, when I was doing my for
loop, I said let i equal zero,

20
00:01:16.979 --> 00:01:21.961
just in general everyone starts at zero,
and that's just the way it is,

21
00:01:21.961 --> 00:01:23.286
and get used to it.

22
00:01:23.286 --> 00:01:27.634
There's like one programming
language that starts at one and

23
00:01:27.634 --> 00:01:29.478
everyone makes fun of it.

24
00:01:29.478 --> 00:01:34.050
[LAUGH] So, anyway, just get used to
that the zero index is the first state.

25
00:01:34.050 --> 00:01:37.603
Which makes index 1, as you can see here,

26
00:01:37.603 --> 00:01:41.274
index 1 is the second
element in the array.

27
00:01:41.274 --> 00:01:43.656
So if I asked for index 1,
I'm getting Tuesday.

28
00:01:46.424 --> 00:01:48.644
&gt;&gt; Brian Holt: This actually makes
a lot of the math easier, so

29
00:01:48.644 --> 00:01:50.986
in the end you'll end up
being grateful for this.

30
00:01:50.986 --> 00:01:54.741
But just be aware that indexes start at 0,
okay?

31
00:01:54.741 --> 00:01:58.626
So index 6 is the last element to
the array, it's the seventh thing, so

32
00:01:58.626 --> 00:01:59.849
that would be Sunday.

33
00:02:03.862 --> 00:02:04.362
&gt;&gt; Brian Holt: Questions?

34
00:02:09.356 --> 00:02:13.568
&gt;&gt; Brian Holt: Okay, so this is how
you access something in the array.

35
00:02:13.568 --> 00:02:17.707
You use these square brackets,
and you put a number in there.

36
00:02:21.618 --> 00:02:22.435
&gt;&gt; Brian Holt: That's just how it works.

37
00:02:26.210 --> 00:02:30.269
&gt;&gt; Brian Holt: So that's what those square
brackets are for, anything between square

38
00:02:30.269 --> 00:02:34.273
brackets you'll notice that we
declare these using square brackets.

39
00:02:34.273 --> 00:02:37.580
Those are gonna be arrays,
notice they don't have a key,

40
00:02:37.580 --> 00:02:39.479
they actually are getting a key.

41
00:02:39.479 --> 00:02:43.346
The key for
this one It's implied by the order, so

42
00:02:43.346 --> 00:02:47.965
I gave this as the first thing,
so its key is actually zero.

43
00:02:47.965 --> 00:02:50.544
This one gets one, this one gets two, but

44
00:02:50.544 --> 00:02:53.564
I don't actually have to
declare those things,

45
00:02:53.564 --> 00:02:59.578
they just get put there depending on what
order I put them in, so it's implicit.

46
00:02:59.578 --> 00:03:03.319
&gt;&gt; Brian Holt: So, arrays have a bunch of
additional pieces of information another

47
00:03:03.319 --> 00:03:07.638
bunch of function other built in all right
that we were talking about before they

48
00:03:07.638 --> 00:03:08.619
have bunch from.

49
00:03:08.619 --> 00:03:13.546
So for
example I can ask how many are there?

50
00:03:13.546 --> 00:03:19.512
So I can say primenumbers.length and
I get 8, there are 8 thing in this array,

51
00:03:19.512 --> 00:03:24.981
so that means it goes from 0 to 7 cuz
7 will be the last thing of length 8.

52
00:03:26.640 --> 00:03:30.923
&gt;&gt; Brian Holt: You can count one, two,
three, four, five, six, seven, eight.

53
00:03:33.438 --> 00:03:35.017
&gt;&gt; Brian Holt: So that's what length
we'll give you, it's a property.

54
00:03:35.017 --> 00:03:38.720
So note this is not a function,
right, this is a property,

55
00:03:38.720 --> 00:03:41.031
there's no parentheses at the end.

56
00:03:41.031 --> 00:03:42.775
It's not calling a function,

57
00:03:42.775 --> 00:03:46.338
it's just a property that's set
on it that's called length.

58
00:03:46.338 --> 00:03:49.981
Now there is a function called join,
if you wanna take an entire array and

59
00:03:49.981 --> 00:03:52.624
you wanna make one string
out of it you can call join.

60
00:03:52.624 --> 00:03:57.334
And what join does, you give it
some sort of what are they called?

61
00:03:57.334 --> 00:03:59.610
Delimiter is what it's technically called,

62
00:03:59.610 --> 00:04:03.006
but it's whatever I'm gonna put
between each element in the array.

63
00:04:03.006 --> 00:04:08.342
So I gave it this space pipe space, right?

64
00:04:08.342 --> 00:04:13.363
So you can see here, between each one
of these there's a space pipe space.

65
00:04:13.363 --> 00:04:16.659
I could have easily put,
I don't know, asterisks between it.

66
00:04:21.107 --> 00:04:23.685
&gt;&gt; Brian Holt: I didn't know my font
did that, [LAUGH] that's my font

67
00:04:23.685 --> 00:04:27.430
that makes it like the cute little
wreath looking thing, that's adorable.

68
00:04:27.430 --> 00:04:29.192
&gt;&gt; [LAUGH]
&gt;&gt; Brian Holt: But

69
00:04:29.192 --> 00:04:31.512
you can put whatever you want in here.

70
00:04:31.512 --> 00:04:36.715
If I was super vain I could put my name or
something like that, right?

71
00:04:36.715 --> 00:04:38.329
[LAUGH] That's how it joins them together.

72
00:04:38.329 --> 00:04:41.157
I'm not vain though, right?

73
00:04:41.157 --> 00:04:43.939
No, not at all.

74
00:04:43.939 --> 00:04:45.305
Okay, questions?

75
00:04:47.420 --> 00:04:48.460
&gt;&gt; Brian Holt: Okay.

76
00:04:50.494 --> 00:04:52.777
&gt;&gt; Brian Holt: So, what happens if
I wanna add an element to an array?

77
00:04:52.777 --> 00:04:57.022
So, I've created this array and
I wanna start putting things into it,

78
00:04:57.022 --> 00:04:58.879
there's a thing called push.

79
00:04:58.879 --> 00:05:03.129
And what push does is it puts another
element on the end of the array.

80
00:05:03.129 --> 00:05:06.068
So I have these courses right here, right,

81
00:05:06.068 --> 00:05:11.072
a bunch of courses that are on Front
End Masters, and then what I'll do is,

82
00:05:11.072 --> 00:05:15.054
I'll do Courses.Push and
then I'll push another one on.

83
00:05:15.054 --> 00:05:18.240
So I give it another object
to put on there, and

84
00:05:18.240 --> 00:05:23.797
then if I look down here you'll see that
Sean Larkin's course is on the end here,

85
00:05:23.797 --> 00:05:26.353
and that's the one I pushed on here.

86
00:05:26.353 --> 00:05:30.599
So that's what push does,
it just shoves another one on the end.

87
00:05:31.830 --> 00:05:35.964
&gt;&gt; Brian Holt: You might ask, what
happens if I want to put it on the front?

88
00:05:35.964 --> 00:05:41.603
[LAUGH] There is a function,
I'm not kidding Unshift, I think it is.

89
00:05:41.603 --> 00:05:47.412
Is the literally the worst name for
that, why is it called unshift?

90
00:05:47.412 --> 00:05:51.933
Well if you wanna remove something from
the front of the array it's called shift,

91
00:05:51.933 --> 00:05:56.335
and I'm sure in the room someone is like
well what's the opposite of shifting?

92
00:05:56.335 --> 00:05:58.702
Unshifting, [LAUGH] and
so they called it that.

93
00:05:58.702 --> 00:06:03.268
[LAUGH] Anyway, you never use it, but
just so you know, it's out there.

94
00:06:03.268 --> 00:06:06.248
You use push quite a bit, cuz it's
just putting something on the end.

95
00:06:08.010 --> 00:06:10.964
&gt;&gt; Brian Holt: Okay, what happens
if I want to overwrite something?

96
00:06:10.964 --> 00:06:14.278
So on here, I have my course here,
Complete intro to React.

97
00:06:14.278 --> 00:06:17.701
I'm about to come back and
do v4 of it, so what I can do here,

98
00:06:17.701 --> 00:06:20.051
is I can reference courses2 =, right,

99
00:06:20.051 --> 00:06:23.967
so is assigned if you remember
that's what we said that's gonna be.

100
00:06:23.967 --> 00:06:28.714
And so if I look down here,
you can see it's overwritten that one and

101
00:06:28.714 --> 00:06:33.724
yeah, by setting that to be
something else, make sense?

102
00:06:33.724 --> 00:06:38.059
&gt;&gt; Brian Holt: I actually could've
even gone in here and done this.

103
00:06:38.059 --> 00:06:43.055
So rather than assigning that,
I could've said course2, and

104
00:06:43.055 --> 00:06:47.970
then I could've said .course and
then just change that part.

105
00:06:51.549 --> 00:06:52.806
&gt;&gt; Brian Holt: So
the only thing that I change,

106
00:06:52.806 --> 00:06:54.494
because the teacher name didn't change.

107
00:06:54.494 --> 00:06:57.762
I have not changed my name since last
time I was here, as far as I know.

108
00:06:57.762 --> 00:07:03.809
And now I can say course2.course = this,
and if you go down here and

109
00:07:03.809 --> 00:07:08.720
look, sure enough,
just the course name has changed.

110
00:07:08.720 --> 00:07:09.923
Does that make sense?

111
00:07:14.128 --> 00:07:16.712
&gt;&gt; Brian Holt: Cool,
cuz course two is an object, right?

112
00:07:16.712 --> 00:07:24.410
Maybe it will make more sense
of like Brian's course.

113
00:07:28.160 --> 00:07:31.859
&gt;&gt; Brian Holt: Courses is 2,
&gt;&gt; Brian Holt: And

114
00:07:31.859 --> 00:07:35.643
then done Brian'sCourse.

115
00:07:40.859 --> 00:07:43.843
&gt;&gt; Brian Holt: Sometimes like if that
helps you to separate it into two lines to

116
00:07:43.843 --> 00:07:47.294
pull out in one line, and then second
line to modify it, go right ahead.

117
00:07:49.379 --> 00:07:51.291
&gt;&gt; Brian Holt: Make your code as
readable as possible for yourself,

118
00:07:51.291 --> 00:07:53.129
you can see it down here it
still looks the same way.

119
00:07:58.456 --> 00:08:00.231
&gt;&gt; Brian Holt: So we talked about push,

120
00:08:00.231 --> 00:08:04.213
we talked about overrinding,
that's a good one.

121
00:08:04.213 --> 00:08:08.885
[LAUGH] Yeah, if you override something,
it'll throw away what was there before,

122
00:08:08.885 --> 00:08:11.366
and it'll replace it with something else.

123
00:08:16.783 --> 00:08:18.465
&gt;&gt; Brian Holt: So
what happens if I wanted to go through and

124
00:08:18.465 --> 00:08:20.068
individual log something in the array?

125
00:08:20.068 --> 00:08:24.653
Well I've actually already given
you all the tools to do this,

126
00:08:24.653 --> 00:08:26.738
we can use a for loop to do it.

127
00:08:26.738 --> 00:08:33.360
So if you go right here and I say for
(let i = 0; i &lt; cities.length; right?

128
00:08:33.360 --> 00:08:37.738
Because cities.length in this
particular case is five, right,

129
00:08:37.738 --> 00:08:41.890
that means the last element in
the array is index four, right?

130
00:08:41.890 --> 00:08:45.728
Cuz it's always length minus one
is the last element in the array.

131
00:08:45.728 --> 00:08:51.964
So, don't go past cities.length, i++, and
then I can do console.log cities of i,

132
00:08:51.964 --> 00:08:56.804
right, cuz it's gonna change every
single iteration of the array.

133
00:08:56.804 --> 00:09:00.745
So it's gonna do it on index 0,
then index 1, then index 2, 3, 4, and

134
00:09:00.745 --> 00:09:01.870
it's gonna finish.

135
00:09:01.870 --> 00:09:06.657
So that's how you get down
here the first ones, Seattle,

136
00:09:06.657 --> 00:09:11.165
San Francisco, Salt Lake,
Amsterdam and Hong Kong.

137
00:09:13.076 --> 00:09:14.317
&gt;&gt; Brian Holt: Any questions
about method 1 here?

138
00:09:20.434 --> 00:09:22.390
&gt;&gt; Brian Holt: Trying to
decide if people are asleep or

139
00:09:22.390 --> 00:09:24.592
if this is just being perfectly explained.

140
00:09:24.592 --> 00:09:27.359
&gt;&gt; [LAUGH]
&gt;&gt; Speaker 2: I just don't,

141
00:09:27.359 --> 00:09:33.674
[COUGH] I guess I don't understand
why fully or how you utilize that.

142
00:09:33.674 --> 00:09:41.831
Are you just saying to pull one of
those items out of the list, or to add?

143
00:09:41.831 --> 00:09:43.731
&gt;&gt; Brian Holt: Like,
why are we doing this?

144
00:09:43.731 --> 00:09:45.421
&gt;&gt; Speaker 2: Yeah, that part.

145
00:09:45.421 --> 00:09:50.049
Method 1 versus method 2,
maybe I just missed it.

146
00:09:50.049 --> 00:09:51.871
&gt;&gt; Brian Holt: Yeah,
ignore method 2 for the moment.

147
00:09:51.871 --> 00:09:52.981
&gt;&gt; Speaker 2: Okay.

148
00:09:52.981 --> 00:10:00.379
&gt;&gt; Brian Holt: So const city = cities [i],
so this is one individual city right now,

149
00:10:00.379 --> 00:10:04.264
I'm doing console.log[city] and

150
00:10:04.264 --> 00:10:08.633
say like city.toupperCase there you go,

151
00:10:08.633 --> 00:10:11.934
and you can see the difference.

152
00:10:11.934 --> 00:10:16.790
So this little bit right here pulls
out for one iteration, one loop,

153
00:10:16.790 --> 00:10:21.913
right, it pulls out the city that's
at that particular index, right?

154
00:10:21.913 --> 00:10:25.999
So, for city of zero,
it pulls out Seattle, right?

155
00:10:25.999 --> 00:10:29.460
So now city is Seattle and
the console.logs city or

156
00:10:29.460 --> 00:10:33.979
Seattle to uppercase, so
that's why you get SEATTLE right here.

157
00:10:33.979 --> 00:10:38.587
That loop finishes, this gets i++,
right, so now it's index 1, right?

158
00:10:38.587 --> 00:10:42.768
We go back again, cities of i,
this is gonna be cities of 1, right?

159
00:10:42.768 --> 00:10:47.284
So it pulls out San Francisco
then it's gonna do console.log.

160
00:10:47.284 --> 00:10:51.906
San Francisco two upper case and
that's how we get San Francisco down here.

161
00:10:51.906 --> 00:10:53.106
&gt;&gt; Speaker 2: Okay.
&gt;&gt; Brian Holt: Make sense?

162
00:10:53.106 --> 00:10:53.606
&gt;&gt; Speaker 2: Yep.
&gt;&gt; Brian Holt: Cool.

163
00:10:53.606 --> 00:10:57.908
So, that's that, you can shortcut that by

164
00:10:57.908 --> 00:11:03.144
just saying cities(i) right here,
cities(i),

165
00:11:03.144 --> 00:11:10.175
and then we can cut this out right here.
It's just a little bit more compressed,

166
00:11:10.175 --> 00:11:15.175
but if you find it more readable
to do it the other way, please do.

167
00:11:17.226 --> 00:11:20.418
&gt;&gt; Brian Holt: Okay, so that is using
a for loop, this is something that

168
00:11:20.418 --> 00:11:25.023
we've used before, we're used to seeing
i and for loops, and things like that.

169
00:11:25.023 --> 00:11:28.801
Let's talk about method 2,
method 2 is a thing called ForEach.

170
00:11:28.801 --> 00:11:33.581
This is a function that's
built into arrays,

171
00:11:33.581 --> 00:11:37.881
right, so every array has a method on it.

172
00:11:37.881 --> 00:11:40.762
Let's talk about the word method for
just a second,

173
00:11:40.762 --> 00:11:43.261
I've probably have been using that before.

174
00:11:43.261 --> 00:11:47.169
A function is just a function,
we've talked about that,

175
00:11:47.169 --> 00:11:49.580
a method is a function on an object.

176
00:11:49.580 --> 00:11:54.668
Or you can also just use method, to mean
pretty much function, technically it's

177
00:11:54.668 --> 00:11:59.622
a function on an object, but I hear people
use the word method just all the time.

178
00:11:59.622 --> 00:12:03.947
So, more or less when I say the words
method just assume that I mean function.

179
00:12:03.947 --> 00:12:08.670
There's also like procedure,
there's a bunch of words for functions.

180
00:12:08.670 --> 00:12:11.189
Most of the time people either
say function or method,

181
00:12:11.189 --> 00:12:12.737
it varies language by language.

182
00:12:12.737 --> 00:12:16.350
There's some languages that
use the word like method more.

183
00:12:16.350 --> 00:12:17.603
Does that make sense?

184
00:12:17.603 --> 00:12:24.615
Okay, sometimes it's just that vocabulary,
sometimes I have a hard time unraveling.

185
00:12:24.615 --> 00:12:29.047
Okay, forEach() is technically a method,
it's a function,

186
00:12:29.047 --> 00:12:34.297
[LAUGH] okay, and it's a function that
you give another function to, right.

187
00:12:34.297 --> 00:12:39.565
So, this is what we would
call an anonymous function.

188
00:12:39.565 --> 00:12:45.243
And this function is going to be run
once in every item in the array, right?

189
00:12:45.243 --> 00:12:50.931
So this method, in fact,
let's just do this,

190
00:12:50.931 --> 00:12:54.915
if I do, let numberOfTimesRan,

191
00:12:54.915 --> 00:13:01.196
right now it's been done 0 times and
I'm gonna do.

192
00:13:01.196 --> 00:13:03.261
NumberOfTimesRan ++, so

193
00:13:03.261 --> 00:13:07.998
every time this function gets run
this is gonna get incremented.

194
00:13:07.998 --> 00:13:13.451
So if I come down here at the bottom and
I say console.log

195
00:13:13.451 --> 00:13:18.565
numberOfTimesRan, what's
that number gonna be?

196
00:13:18.565 --> 00:13:20.942
How many items are in the array?

197
00:13:20.942 --> 00:13:24.435
Five, so, down here, 5, right?

198
00:13:24.435 --> 00:13:30.328
So, this function gets run five times,
one time for each item in the array.

199
00:13:30.328 --> 00:13:33.387
And then, down here,
I'm seeing console.logcity,

200
00:13:33.387 --> 00:13:36.195
city is being injected as
a parameter from cities.

201
00:13:36.195 --> 00:13:42.148
And that's what for reach does for
you, that's the point of for each.

202
00:13:42.148 --> 00:13:45.981
So, that's why you're able to see Seattle,
San Francisco,

203
00:13:45.981 --> 00:13:48.816
let's just make this to
make it more clearer.

204
00:13:48.816 --> 00:13:56.569
toLowerCase,
&gt;&gt; Brian Holt: And

205
00:13:56.569 --> 00:13:59.714
you can see here, these are the ones
being logged out by forEach.

206
00:13:59.714 --> 00:14:04.105
This is two different ways to accomplish
the same goal, and this is what for

207
00:14:04.105 --> 00:14:05.227
each does for you.

208
00:14:05.227 --> 00:14:08.060
Questions about for each?

209
00:14:08.060 --> 00:14:13.044
&gt;&gt; Speaker 2: Is there a preferred method
when you're programming to use the for

210
00:14:13.044 --> 00:14:14.205
each or a loop?

211
00:14:14.205 --> 00:14:15.878
&gt;&gt; Brian Holt: It depends
on who you ask for sure,

212
00:14:15.878 --> 00:14:17.972
it's definitely a matter of preference.

213
00:14:17.972 --> 00:14:21.914
I use for each constantly and use for

214
00:14:21.914 --> 00:14:27.309
loops far less,
this is a personal preference.

215
00:14:27.309 --> 00:14:31.342
This is more towards what they
call functional programming,

216
00:14:31.342 --> 00:14:32.899
which I'm a big fan of.

217
00:14:32.899 --> 00:14:35.132
And there are other people that
don't like it quite as much.

218
00:14:35.132 --> 00:14:38.044
If you ask, for example,
a hard-core Java developer,

219
00:14:38.044 --> 00:14:40.725
probably far less a fan of
functional programming.

220
00:14:40.725 --> 00:14:45.719
But if you ask someone that's like
a Haskell programmer, or something like

221
00:14:45.719 --> 00:14:50.648
that, they would laugh at you for
using a for loop because they're a jerk.

222
00:14:50.648 --> 00:14:57.274
[LAUGH] So, do what works for you,
if one of these methods feels better or

223
00:14:57.274 --> 00:15:01.813
looks better to you then
absolutely do that one.

224
00:15:01.813 --> 00:15:03.465
In fact, I'm curious,
who prefers method one?

225
00:15:03.465 --> 00:15:05.530
Just a raise of hands here in the room.

226
00:15:05.530 --> 00:15:09.311
And who here prefers method two?

227
00:15:09.311 --> 00:15:14.443
All right, so actually what you can do,
there's a phantom other

228
00:15:14.443 --> 00:15:19.969
parameter here that it's also
injecting and I hereto been ignoring.

229
00:15:19.969 --> 00:15:24.072
And this index,
if I just did index, comma, space,

230
00:15:24.072 --> 00:15:28.830
you can see here it actually is
injecting the index, as well.

231
00:15:30.321 --> 00:15:35.315
&gt;&gt; Brian Holt: This is like the tip of
an iceberg of functional programming.

232
00:15:35.315 --> 00:15:40.340
There is another Kyle Simpson course
called Functional Programming Lite,

233
00:15:40.340 --> 00:15:43.087
there's also Brian Lonstor's course,

234
00:15:43.087 --> 00:15:46.947
which is on both Phenomenal
courses on Front End Masters.

235
00:15:46.947 --> 00:15:49.607
Brian Longworth also has a book so
does Kyle,

236
00:15:49.607 --> 00:15:53.877
they're all really good ways of
getting into functional programming,

237
00:15:53.877 --> 00:15:57.029
it's more stuff like this,
like method two up here.

238
00:15:57.029 --> 00:16:01.166
I will say that I've never taught this to
developers on the first time that they're

239
00:16:01.166 --> 00:16:02.300
learning to program.

240
00:16:02.300 --> 00:16:05.818
And it's because I used to be
scared of functional programming.

241
00:16:05.818 --> 00:16:09.193
And at some point, I realized this
is actually a really good way for

242
00:16:09.193 --> 00:16:11.797
people to get into it and
to get exposed to it early.

243
00:16:11.797 --> 00:16:15.734
Because, it took me probably five years
into my career before I started doing

244
00:16:15.734 --> 00:16:17.015
programming like this.

245
00:16:17.015 --> 00:16:18.987
And my code is much better now, I think.

246
00:16:18.987 --> 00:16:22.620
&gt;&gt; Speaker 2: That's why I'd actually
recommend Bianca's fundamentals

247
00:16:22.620 --> 00:16:24.722
to functional JavaScript course.

248
00:16:24.722 --> 00:16:28.427
&gt;&gt; Brian Holt: Okay she has us [CROSSTALK]
&gt;&gt; Speaker 2: Cover that bridge between

249
00:16:28.427 --> 00:16:32.591
the basics of JavaScript to
starting to use functional methods.

250
00:16:32.591 --> 00:16:36.083
&gt;&gt; Brian Holt: Totally, so
yeah definitely check out Bianca's course.

251
00:16:36.083 --> 00:16:39.598
I definitely endorse Bianca
as a teacher in general,

252
00:16:39.598 --> 00:16:42.416
a lot of my teaching
style is based on hers.

253
00:16:42.416 --> 00:16:46.940
So, I'd like to say I borrowed it but
I definitely just stole it,

254
00:16:46.940 --> 00:16:48.845
[LAUGH] she's phenomenal.

255
00:16:51.710 --> 00:16:52.526
&gt;&gt; Brian Holt: Questions about this?

256
00:16:52.526 --> 00:16:56.730
I don't really test you on this,
there's a lot more deeper

257
00:16:56.730 --> 00:17:01.617
rabbit hole to go down here,
I just wanted to expose it to you ealier.

258
00:17:01.617 --> 00:17:04.853
So the journey will feel
impossible sometimes, so

259
00:17:04.853 --> 00:17:07.721
if this feels hard, it's cuz that's okay.

260
00:17:07.721 --> 00:17:12.451
But Jerome's a really awesome guy,
that is objects in a arrays.

