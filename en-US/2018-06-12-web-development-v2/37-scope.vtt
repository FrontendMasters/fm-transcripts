WEBVTT

1
00:00:00.160 --> 00:00:02.720
&gt;&gt; Brian Holt: All right,
let's talk about scope.

2
00:00:02.720 --> 00:00:05.503
This is another one of those things,
when I was explaining the cascade,

3
00:00:05.503 --> 00:00:08.649
that I just don't really like to explain,
because when you have scope problems,

4
00:00:08.649 --> 00:00:14.990
you have big problems.
&gt;&gt; Brian Holt: So let's talk about scope.

5
00:00:14.990 --> 00:00:18.980
And this is also a really difficult
thing for newbies to get started with,

6
00:00:18.980 --> 00:00:22.270
because you get these problems and they're
really difficult to wrap your mind around.

7
00:00:22.270 --> 00:00:25.570
So if this seems hard,
it's because it's hard, and

8
00:00:25.570 --> 00:00:29.970
it's also just like problems that you're
probably gonna have kind of forever.

9
00:00:29.970 --> 00:00:35.528
Cuz like scope problems can end up
being a bit of a rat's nest to unravel.

10
00:00:35.528 --> 00:00:38.670
Anyway, so look at this right here.

11
00:00:40.720 --> 00:00:46.300
I have this function called addFive,
and inside of addFive I create this

12
00:00:46.300 --> 00:00:50.290
variable called someVariable and it says
you can't see me outside this function,

13
00:00:50.290 --> 00:00:52.250
that's the value of this variable.

14
00:00:52.250 --> 00:00:55.370
So here I call addFive,
which invokes this function, right, so

15
00:00:55.370 --> 00:00:56.920
this is getting called.

16
00:00:56.920 --> 00:01:01.890
And I add ten, so
let's just do this right here.

17
00:01:01.890 --> 00:01:02.900
It works, right?

18
00:01:02.900 --> 00:01:03.621
You call 15.

19
00:01:03.621 --> 00:01:06.820
You call it and 15 gets logged out, right?

20
00:01:08.840 --> 00:01:10.020
Now I'm gonna come down here and

21
00:01:10.020 --> 00:01:13.005
say console.log someVariable,
which is referencing this variable.

22
00:01:13.005 --> 00:01:16.460
But it's gonna say reference area
someVariable is not defined.

23
00:01:16.460 --> 00:01:21.111
This is an error right here.
&gt;&gt; Brian Holt: Because

24
00:01:21.111 --> 00:01:24.870
some variable is inside of addFive, right?

25
00:01:24.870 --> 00:01:30.160
And I can't reference that because now
this is what's called out of scope.

26
00:01:30.160 --> 00:01:32.450
Basically, it doesn't exist anymore,

27
00:01:32.450 --> 00:01:35.520
there's nothing in this scope
that's called someVariable.

28
00:01:35.520 --> 00:01:40.906
Whereas, inside of here
if I put console.log

29
00:01:40.906 --> 00:01:45.270
someVariable, it does work, right?

30
00:01:45.270 --> 00:01:48.860
Because now inside of the function
it's in scope, right?

31
00:01:48.860 --> 00:01:49.750
It's visible.

32
00:01:49.750 --> 00:01:50.810
It exists.

33
00:01:53.140 --> 00:01:57.850
So I'm gonna give you a general rule
of thumb that is imperfect, right?

34
00:01:57.850 --> 00:02:01.160
So it's useful to kind
of think of it this way.

35
00:02:01.160 --> 00:02:03.960
But just be aware that
it's not always true.

36
00:02:03.960 --> 00:02:09.870
Look for curly braces, this is considered
a scope, between the curly braces, right.

37
00:02:09.870 --> 00:02:13.590
So inside of the function, inside of
an if statement, inside of a for loop,

38
00:02:13.590 --> 00:02:16.129
inside of a while,
they each have their own level of scope.

39
00:02:18.400 --> 00:02:21.660
So if I say, if(true),

40
00:02:21.660 --> 00:02:26.255
inside of here and say console., or

41
00:02:26.255 --> 00:02:31.145
I have a variable say const thing = 5,

42
00:02:31.145 --> 00:02:36.650
and I say here console.log(thing).

43
00:02:36.650 --> 00:02:38.900
In scope,
it's gonna work right here, right?

44
00:02:38.900 --> 00:02:42.084
But what happens if I come
right underneath this and

45
00:02:42.084 --> 00:02:44.016
say console.log(thing).

46
00:02:44.016 --> 00:02:48.900
Thing is not defined here, right.

47
00:02:48.900 --> 00:02:52.150
Because now I've gone
outside of this scope.

48
00:02:52.150 --> 00:02:57.280
Right, so basically thing is only
defined inside of the scope.

49
00:02:57.280 --> 00:03:02.060
Once that scope ends, it expires
everything that was declared inside of it.

50
00:03:02.060 --> 00:03:06.120
And this is the key, is look for
where the variable is defined, right?

51
00:03:06.120 --> 00:03:09.630
So I have some variable right here
that's defined inside of the function.

52
00:03:09.630 --> 00:03:13.200
As soon as the function ends,
it's gone, right?

53
00:03:13.200 --> 00:03:14.649
It just disappears.

54
00:03:16.460 --> 00:03:21.420
So that's kinda the key with scope.

55
00:03:22.600 --> 00:03:25.960
Now what can be a little
bit even more confusing.

56
00:03:25.960 --> 00:03:31.657
What happens if I say console.log
some variable right here?

57
00:03:31.657 --> 00:03:33.710
What would you expect?

58
00:03:35.540 --> 00:03:38.817
We're still inside of that function scope,
so it does work.

59
00:03:38.817 --> 00:03:43.937
This is defined basically in a higher
scope than the if statement right here,

60
00:03:43.937 --> 00:03:45.840
so someVariable does work.

61
00:03:45.840 --> 00:03:50.740
You can see right here that it gets
defined or it gets logged out right here.

62
00:03:50.740 --> 00:03:55.380
So it does work because this is
still in scope, this still exists.

63
00:03:57.450 --> 00:03:59.810
How do we feel about this so far?

64
00:03:59.810 --> 00:04:00.980
Make sense mostly?

65
00:04:02.190 --> 00:04:05.278
Okay, I'm gonna make it even more
screwed up for you, so buckle up.

66
00:04:05.278 --> 00:04:07.692
&gt;&gt; Speaker 2: [LAUGH]

67
00:04:07.692 --> 00:04:09.239
&gt;&gt; Brian Holt: So, let's get rid of this,

68
00:04:09.239 --> 00:04:10.149
get rid of that.

69
00:04:10.149 --> 00:04:18.139
We can get rid of the if statement.
&gt;&gt; Brian Holt: All right,

70
00:04:18.139 --> 00:04:21.890
we'll just comment this out for a second.

71
00:04:24.190 --> 00:04:29.286
What happens if I come up here and say,
&gt;&gt; Brian Holt: Const

72
00:04:29.286 --> 00:04:35.968
otherThing = something, okay.

73
00:04:35.968 --> 00:04:38.360
I have this variable up here.

74
00:04:38.360 --> 00:04:42.726
If I go inside of addFive and
say console.log otherThing,

75
00:04:42.726 --> 00:04:44.480
what would you expect?

76
00:04:46.230 --> 00:04:47.610
It does work.

77
00:04:47.610 --> 00:04:50.820
This is called the global scope, right?

78
00:04:50.820 --> 00:04:54.450
The global scope is basically like
the most root scope that exists.

79
00:04:54.450 --> 00:04:58.940
It's the highest level scope, it's
basically it's not inside of anything.

80
00:04:58.940 --> 00:05:01.800
In other words, if you declare
anything in the global scope,

81
00:05:01.800 --> 00:05:03.590
it never goes out of scope.

82
00:05:04.760 --> 00:05:07.720
You don't wanna put things in
the global scope if you can help it.

83
00:05:07.720 --> 00:05:09.130
Just in general it's a bad idea.

84
00:05:09.130 --> 00:05:12.576
You wanna keep the global scope
what we would call unpolluted.

85
00:05:12.576 --> 00:05:15.350
You just don't wanna put too
much stuff into it because

86
00:05:17.120 --> 00:05:20.120
the problem with that is now
everything can see this.

87
00:05:20.120 --> 00:05:22.750
Everything can also change this.

88
00:05:22.750 --> 00:05:26.160
And that leads to some
really subtle terrible bugs.

89
00:05:26.160 --> 00:05:29.750
So you should have a healthy
fear of the global scope.

90
00:05:29.750 --> 00:05:31.500
This is very powerful, right?

91
00:05:31.500 --> 00:05:35.560
And we adhere to the power or
the principle of least power.

92
00:05:35.560 --> 00:05:37.760
And it's a very powerful thing.

93
00:05:37.760 --> 00:05:41.370
So, just so you know.

94
00:05:44.110 --> 00:05:47.740
Any questions about what we've done so
far?

95
00:05:47.740 --> 00:05:50.910
Yes.
&gt;&gt; Speaker 2: So question from chat room.

96
00:05:50.910 --> 00:05:53.648
Samantha asks, is scope problems
are mainly for functions.

97
00:05:53.648 --> 00:05:55.654
Scope, you're talking about scope,

98
00:05:55.654 --> 00:05:59.121
you're talking about functions
where the variables are located,

99
00:05:59.121 --> 00:06:01.250
does that remain like that?
&gt;&gt; Brian Holt: Yeah.

100
00:06:01.250 --> 00:06:05.160
Functions are generally where you can,
like invoking functions,

101
00:06:05.160 --> 00:06:06.624
declaring variables
inside of functions and

102
00:06:06.624 --> 00:06:08.860
then trying to reference them
outside of those functions.

103
00:06:08.860 --> 00:06:11.650
It's where you're gonna have a bad time,
for sure.

104
00:06:14.320 --> 00:06:16.170
And here we like go
through a little bit more.

105
00:06:16.170 --> 00:06:17.560
Like we have the for loop here.

106
00:06:19.780 --> 00:06:20.850
Even i, right?

107
00:06:20.850 --> 00:06:22.157
So, let i = 0.

108
00:06:22.157 --> 00:06:24.140
Once this for loop is over,

109
00:06:24.140 --> 00:06:28.630
you can't reference i anymore,
it dies after that for loop.

110
00:06:36.380 --> 00:06:37.930
So, scope is hard.

111
00:06:37.930 --> 00:06:40.220
If this feels hard, it's cuz it is hard.

112
00:06:40.220 --> 00:06:42.930
And there's even more subtleties
that I'm not going over here.

113
00:06:45.490 --> 00:06:48.150
The last one I wanted to talk
a little bit about here.

114
00:06:49.390 --> 00:06:55.150
If I come up here and say, let globalVar

115
00:06:57.760 --> 00:07:04.455
and then here I say globalVar

116
00:07:04.455 --> 00:07:09.700
= 'changed'.

117
00:07:09.700 --> 00:07:11.450
And here let's just say this is unchanged.

118
00:07:15.070 --> 00:07:18.170
So the first thing I wanna do
before here is I'm gonna say

119
00:07:18.170 --> 00:07:22.620
before addFive I'm gonna
say counsel.log(globalVar).

120
00:07:25.580 --> 00:07:28.450
Makes sense, I declared it up here and
I reference it down here.

121
00:07:28.450 --> 00:07:29.220
That follows, right?

122
00:07:29.220 --> 00:07:30.700
It's unchanged.

123
00:07:30.700 --> 00:07:36.795
But then if I go underneath addFive
here and I say console.log(globalVar).

124
00:07:41.338 --> 00:07:45.170
&gt;&gt; Brian Holt: Global changed.

125
00:07:47.260 --> 00:07:50.124
So here,
this got changed inside of addFive, right?

126
00:07:51.490 --> 00:07:54.800
The thing I need you to look for
is where was it declared.

127
00:07:54.800 --> 00:07:56.540
That's the part that's the most important.

128
00:07:56.540 --> 00:07:58.260
Where does it say let or const?

129
00:07:58.260 --> 00:07:59.920
That's what you're looking for.

130
00:07:59.920 --> 00:08:05.880
So here you see let is up here, so
therefore this is in the global scope.

131
00:08:05.880 --> 00:08:10.830
Even though it's changed here inside of
addFive, it's still in the global scope.

132
00:08:10.830 --> 00:08:14.010
So it got changed here, and
then yeah, that's fine.

133
00:08:15.060 --> 00:08:17.800
Even if I delete this and

134
00:08:17.800 --> 00:08:22.409
it's just declared and nothing happens
to it, it still sticks in this scope.

135
00:08:23.720 --> 00:08:27.820
Let's get rid of that so you can see it.
&gt;&gt; Brian Holt: So there you go.

136
00:08:29.940 --> 00:08:35.298
Even though that this is where it's kinda
first, what you would may be initialize

137
00:08:35.298 --> 00:08:40.050
it to some variable, or to some string
because it's declared out here.

138
00:08:40.050 --> 00:08:42.520
It still survives in the global scope.

139
00:08:42.520 --> 00:08:43.602
So look for where it's declared,

140
00:08:43.602 --> 00:08:47.362
that's what you need to do.
&gt;&gt; Brian Holt: Questions about that?

141
00:08:49.151 --> 00:08:49.958
&gt;&gt; Brian Holt: Okay,

142
00:08:49.958 --> 00:08:53.305
cool.
&gt;&gt; Brian Holt: Even if I put a function

143
00:08:53.305 --> 00:08:57.736
inside of here, generally you don't want
to declare functions inside of functions,

144
00:08:57.736 --> 00:09:03.162
but it is possible.
&gt;&gt; Brian Holt: X,

145
00:09:03.162 --> 00:09:09.233
y.
&gt;&gt; Brian Holt: Return

146
00:09:09.233 --> 00:09:14.044
x + y.
&gt;&gt; Brian Holt: If I try and

147
00:09:14.044 --> 00:09:22.824
call add out here, not defined.
&gt;&gt; Brian Holt: So

148
00:09:22.824 --> 00:09:26.695
even functions are only scoped to
whatever scope that they're inside of.

149
00:09:29.056 --> 00:09:30.230
&gt;&gt; Brian Holt: This is strange.

150
00:09:30.230 --> 00:09:32.400
You would not typically do this,
just so you know.

151
00:09:32.400 --> 00:09:34.130
I just wanted to demonstrate a point.

152
00:09:34.130 --> 00:09:39.494
Even functions observe these rules.
&gt;&gt; Brian Holt: Okay,

153
00:09:39.494 --> 00:09:41.490
any questions about that so far?

154
00:09:42.520 --> 00:09:45.322
It's weird, but
if you start seeing reference error,

155
00:09:45.322 --> 00:09:49.497
this is where you need to start thinking
like, I might have a scope problem here,

156
00:09:49.497 --> 00:09:52.313
so.
&gt;&gt; Brian Holt: That's what I wanted

157
00:09:52.313 --> 00:09:52.850
to drive home.

