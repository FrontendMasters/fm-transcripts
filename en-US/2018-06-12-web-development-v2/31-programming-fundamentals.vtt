WEBVTT

1
00:00:00.150 --> 00:00:03.330
&gt;&gt; Brian Holt: We are gonna
move on to programming now.

2
00:00:04.340 --> 00:00:06.970
So actually writing JavaScript.

3
00:00:06.970 --> 00:00:12.510
So I would say for the next,
maybe hour or two, if you already

4
00:00:12.510 --> 00:00:15.920
know how to program on another language,
this is gonna be a lot of review for you.

5
00:00:15.920 --> 00:00:22.210
Because we're gonna go over very, very
base level proficiencies with programming,

6
00:00:22.210 --> 00:00:25.820
like if statements and for loops and
variables and things like that.

7
00:00:25.820 --> 00:00:30.410
But if you do not know how to program at
all, this is exactly tailored to you.

8
00:00:30.410 --> 00:00:33.840
So,
&gt;&gt; Brian Holt: It's gonna be fun.

9
00:00:35.600 --> 00:00:39.520
So also, this is tough section to teach
because students very, very widely here.

10
00:00:39.520 --> 00:00:43.300
If you're coming from another language,
this tends to be a little bit of review.

11
00:00:43.300 --> 00:00:47.937
If you're brand new then this is gonna
be a whole lot to take in all at once.

12
00:00:47.937 --> 00:00:52.992
But, I made the comparison here,
if you know Spanish already,

13
00:00:52.992 --> 00:00:59.077
if you go to learn Italian you already
have like 50 to 60% of the grammar,

14
00:00:59.077 --> 00:01:01.340
you understand all of that.

15
00:01:01.340 --> 00:01:04.023
It's kinda the same thing here
if you're coming from Go,

16
00:01:04.023 --> 00:01:07.745
you're going to learn some new things, but
a lot of it's gonna be some review for

17
00:01:07.745 --> 00:01:12.340
you.
&gt;&gt; Brian Holt: So, just stick with me,

18
00:01:12.340 --> 00:01:17.322
skim, that kind of stuff.
&gt;&gt; Brian Holt: So,

19
00:01:17.322 --> 00:01:21.420
I'm going to wax philosophical for
a moment.

20
00:01:21.420 --> 00:01:22.880
What is code?

21
00:01:22.880 --> 00:01:24.330
Who am I?

22
00:01:24.330 --> 00:01:25.020
Why am I here?

23
00:01:25.020 --> 00:01:25.730
No, I'm just kidding.

24
00:01:25.730 --> 00:01:27.290
We're just gonna ask you what is code?

25
00:01:27.290 --> 00:01:28.590
What is code?

26
00:01:28.590 --> 00:01:33.240
It might surprise you, but code is
actually meant more for humans than it is

27
00:01:33.240 --> 00:01:38.560
for computers, and a lot of people
are like, well why am I writing code then?

28
00:01:38.560 --> 00:01:43.050
If code was just for computers,
we'd all be writing assembly directly.

29
00:01:43.050 --> 00:01:47.510
So that's why we end up writing code,
because code is something that we as

30
00:01:47.510 --> 00:01:52.120
humans can read and understand and update
and maintain and these kinda things.

31
00:01:52.120 --> 00:01:56.080
And a very junior level

32
00:01:56.080 --> 00:02:01.090
mistake to make is to write code that
you never intend on maintaining.

33
00:02:01.090 --> 00:02:03.866
Because it's really easy to
write code the first time, and

34
00:02:03.866 --> 00:02:05.983
it's really difficult
to come back to code.

35
00:02:05.983 --> 00:02:08.869
So you actually don't wanna optimize for
writing code, you wanna optimize for

36
00:02:08.869 --> 00:02:09.660
maintaining code.

37
00:02:09.660 --> 00:02:13.770
So everything that you can do to make your
code more readable, more understandable,

38
00:02:13.770 --> 00:02:17.570
less clever, more slick,
just more plain, right?

39
00:02:17.570 --> 00:02:22.950
So that you can go back an read it, and
say okay, this is exactly what this does.

40
00:02:22.950 --> 00:02:28.080
So you should write more code rather than
less code if it makes it more readable.

41
00:02:28.080 --> 00:02:32.140
And a lot of people are like, I wanna
make the most clever, terse, crazy stuff.

42
00:02:32.140 --> 00:02:37.200
They basically wanna write Haskell,
that would be a funny joke if any

43
00:02:37.200 --> 00:02:40.975
of you knew functional programming,
people that are Haskell are jerks.

44
00:02:40.975 --> 00:02:45.650
[LAUGH] That's also a joke,
I quit like Haskell,

45
00:02:45.650 --> 00:02:49.580
but for me personally it's hard to read or
it can be.

46
00:02:50.690 --> 00:02:55.530
So that's my plea to you, is try and
write code that's very readable.

47
00:02:55.530 --> 00:02:59.960
Be thinking about if I had to
come back five years later and

48
00:02:59.960 --> 00:03:03.120
try and read this code and
understand what it does, how would I do?

49
00:03:03.120 --> 00:03:06.941
You should be asking that to
yourself that constantly.

50
00:03:06.941 --> 00:03:11.683
So yeah, be deliberate, be explicit,
try not to be clever and

51
00:03:11.683 --> 00:03:18.655
just remember that code is communication.
&gt;&gt; Brian Holt: So,

52
00:03:18.655 --> 00:03:25.600
let's frame how code works on.
&gt;&gt; Brian Holt: So when you write code,

53
00:03:25.600 --> 00:03:29.272
the code is basically parsed in to pieces
that's broken down in to something that

54
00:03:29.272 --> 00:03:34.244
a computer can understand.
&gt;&gt; Brian Holt: JavaScript is what we've

55
00:03:34.244 --> 00:03:38.820
call single threaded, that means that only
one thing is ever happening at a time.

56
00:03:38.820 --> 00:03:42.250
So if you're coming from
something like Java or Go or

57
00:03:42.250 --> 00:03:46.430
something else that they have
these features called concurrency.

58
00:03:46.430 --> 00:03:48.970
That they can do multiple things at once,

59
00:03:48.970 --> 00:03:52.010
JavaScript has no way
of doing concurrency.

60
00:03:52.010 --> 00:03:57.502
It has doing things out of order which is
different from doing things concurrently.

61
00:03:57.502 --> 00:04:01.785
So, that's good for you because it's a lot
easier to understand single threaded code,

62
00:04:01.785 --> 00:04:04.942
it's really easy to understand
the order that things happen in.

63
00:04:07.370 --> 00:04:08.448
&gt;&gt; Brian Holt: In general,

64
00:04:08.448 --> 00:04:14.650
going down to this code here,
let's make this a tiny bit bigger.

65
00:04:14.650 --> 00:04:17.145
This is your first bit of JavaScript
right here that we're gonna talk about.

66
00:04:19.724 --> 00:04:20.302
&gt;&gt; Brian Holt: Generally,

67
00:04:20.302 --> 00:04:23.449
it reads how you would expect it,
that it does line one, then line two,

68
00:04:23.449 --> 00:04:25.570
then line three, then line four, right?

69
00:04:25.570 --> 00:04:28.110
It executes in order, so
it's gonna run this line.

70
00:04:28.110 --> 00:04:31.300
It's going to complete, then it's gonna
do line two, and then line three, and

71
00:04:31.300 --> 00:04:31.830
then line four.

72
00:04:32.860 --> 00:04:36.320
So let's talk about this particular
piece of code right here.

73
00:04:36.320 --> 00:04:40.937
We're saying const monthlyRent equals 500.

74
00:04:40.937 --> 00:04:44.093
Now even if you don't know coding before,

75
00:04:44.093 --> 00:04:47.730
I think this should
make some sense to you.

76
00:04:47.730 --> 00:04:52.560
That monthly rent is a variable that
is being assigned the value of 500.

77
00:04:52.560 --> 00:05:00.005
So if I come here on the next line and
say console.log(monthlyRent),

78
00:05:00.005 --> 00:05:04.650
you might expect that I'm gonna get 500.

79
00:05:04.650 --> 00:05:08.010
monthlyRent is basically now
a symbol that represents 500.

80
00:05:08.010 --> 00:05:12.907
Now, the const here means that
this is an unchanging value,

81
00:05:12.907 --> 00:05:18.968
that I can't come in here on the next
line and say, monthlyRent = 600.

82
00:05:18.968 --> 00:05:23.766
It's gonna say, hey, you already assigned
monthly rents to be something else,

83
00:05:23.766 --> 00:05:27.633
you can't do that.
&gt;&gt; Brian Holt: That's what const means,

84
00:05:27.633 --> 00:05:29.500
we'll get into let later.

85
00:05:29.500 --> 00:05:33.543
But let allows you to change that,
the const does allow changer.

86
00:05:33.543 --> 00:05:36.889
Anytime you see console.log here,
that's basically,

87
00:05:36.889 --> 00:05:41.405
gonna say, I'm gonna write down here
in the result, that's all that means.

88
00:05:41.405 --> 00:05:45.762
So anything that gets put
inside the parenthesis here is

89
00:05:45.762 --> 00:05:51.130
instead of console log is gonna
get written down here, okay?

90
00:05:51.130 --> 00:05:55.000
In JavaScript, you can have as many
empty lines as you want, so I could put

91
00:05:56.070 --> 00:06:00.870
five here and JavaScript is happy to just
skip as many empty lines as it wants.

92
00:06:00.870 --> 00:06:05.850
So in other words, use empty lines as
much as you need to separate things

93
00:06:05.850 --> 00:06:10.480
logically so that it's easy to skip around
and see what's happening in your code.

94
00:06:10.480 --> 00:06:11.690
It's a useful device for

95
00:06:11.690 --> 00:06:17.510
breaking things up,
just like writing a paragraph in an essay.

96
00:06:19.310 --> 00:06:24.160
Okay, so now we yearlyRent here, and
I'm saying const yearlyRent is being

97
00:06:24.160 --> 00:06:29.150
assigned monthlyRent times, that's what
this asterisk means, it means multiplied.

98
00:06:29.150 --> 00:06:31.760
Because we don't write x,
that doesn't make any sense.

99
00:06:31.760 --> 00:06:36.460
We use the star to represent
multiplication, times 12,

100
00:06:36.460 --> 00:06:37.940
right, 12 months in a year.

101
00:06:37.940 --> 00:06:41.871
So 12 times the monthly rent is
going to give you the yearly rent.

102
00:06:41.871 --> 00:06:45.967
And then I assign that to this and
then I log that out and

103
00:06:45.967 --> 00:06:50.940
I get 6,000.
&gt;&gt; Brian Holt: Any questions about that?

104
00:06:52.670 --> 00:06:57.717
Is your first JavaScript program.
&gt;&gt; Brian Holt: Then

105
00:06:57.717 --> 00:06:59.060
you see down here undefined.

106
00:06:59.060 --> 00:07:03.820
So just the way that this
particular little thing works,

107
00:07:03.820 --> 00:07:05.990
it's not that it's important for
you to know.

108
00:07:05.990 --> 00:07:09.991
If I just put 500 here,
whatever the last thing returns,

109
00:07:09.991 --> 00:07:12.275
we'll talk about returns later.

110
00:07:12.275 --> 00:07:14.560
But right now, nothing is being returned.

111
00:07:14.560 --> 00:07:16.635
So it says, hey,
you didn't return anything, so

112
00:07:16.635 --> 00:07:20.775
your return is undefined.
&gt;&gt; Brian Holt: So or

113
00:07:20.775 --> 00:07:24.794
you could just put
literally yearly rent here,

114
00:07:24.794 --> 00:07:29.854
yearlyRent, and
it would return 6,000 here as well.

115
00:07:29.854 --> 00:07:34.071
So,
&gt;&gt; Brian Holt: Anyway,

116
00:07:38.091 --> 00:07:40.760
&gt;&gt; Brian Holt: That's worth talking about.

117
00:07:40.760 --> 00:07:43.780
There can't be any spaces
in variable names.

118
00:07:44.810 --> 00:07:48.040
So, we need some way of doing
multiple words together.

119
00:07:48.040 --> 00:07:52.160
And if you put monthly rent like this,
it's kind of hard to read.

120
00:07:52.160 --> 00:07:55.040
All lower case things shoved together,

121
00:07:55.040 --> 00:07:57.250
particularly when it starts
getting really long.

122
00:07:57.250 --> 00:08:00.640
So we need some way of doing,
separating of words.

123
00:08:00.640 --> 00:08:05.280
Now technically you could do underscore
here, this is a valid JavaScript name and

124
00:08:05.280 --> 00:08:08.820
this is more like how Python looks for
example.

125
00:08:08.820 --> 00:08:11.500
It's not how we do it in JavaScript.

126
00:08:11.500 --> 00:08:15.130
JavaScript, just because there's
not really a good reason, but

127
00:08:15.130 --> 00:08:18.190
in JavaScript we have chosen to
do what's called camel casing.

128
00:08:18.190 --> 00:08:22.714
So when you have words you're gonna do
camel casing to make it just more readable

129
00:08:22.714 --> 00:08:28.716
for you.
&gt;&gt; Brian Holt: It's

130
00:08:28.716 --> 00:08:30.990
called camel casing cuz it
looks like a hump, right?

131
00:08:30.990 --> 00:08:39.455
It's like in the middle of the word.
&gt;&gt; Brian Holt: There's

132
00:08:39.455 --> 00:08:42.310
no reason your JavaScript
code would not execute.

133
00:08:42.310 --> 00:08:45.570
But as soon as I see someone do this,
in an interview or something like that,

134
00:08:45.570 --> 00:08:47.560
I'm like this person doesn't
write a lot of JavaScript,

135
00:08:48.890 --> 00:08:52.230
because everything is done
camel casing in JavaScript

136
00:08:59.446 --> 00:09:01.712
&gt;&gt; Brian Holt: Notice the semicolons.

137
00:09:01.712 --> 00:09:06.252
Remember in CSS you have to put the
semicolon at the end of every statement,

138
00:09:06.252 --> 00:09:08.210
the same is true of JavaScript.

139
00:09:09.660 --> 00:09:17.470
Technically, you can omit them,
&gt;&gt; Brian Holt: And it does still work.

140
00:09:18.760 --> 00:09:23.460
JavaScript has what's called ASI,
automatic semicolon insertion.

141
00:09:25.250 --> 00:09:27.776
So it does technically let you do that,
and there are people that choose to write

142
00:09:27.776 --> 00:09:31.584
their JavaScript that way.
&gt;&gt; Brian Holt: I don't care,

143
00:09:31.584 --> 00:09:33.250
I really don't.

144
00:09:33.250 --> 00:09:35.936
If I never have that conversation
with someone ever again,

145
00:09:35.936 --> 00:09:37.502
I'm perfectly happy about that.

146
00:09:37.502 --> 00:09:39.796
I just hate arguing about stupid stuff,
and

147
00:09:39.796 --> 00:09:42.338
this definitely qualifies
under stupid stuff.

148
00:09:42.338 --> 00:09:45.043
So, do whatever you want,
just don't tell me about what you're

149
00:09:45.043 --> 00:09:50.391
doing.
&gt;&gt; Brian Holt: In any case,

150
00:09:50.391 --> 00:09:54.006
if you don't put the semicolons there,
the computer will put them there for

151
00:09:54.006 --> 00:10:00.461
you when it goes to execute them.
&gt;&gt; Brian Holt: Okay.,

152
00:10:00.461 --> 00:10:06.840
variables can be called almost anything,
you can't use what are called keywords.

153
00:10:06.840 --> 00:10:13.430
So for example, I can't say, const const
= 5, because const is a keyword, right?

154
00:10:13.430 --> 00:10:15.400
It means something in JavaScript.

155
00:10:15.400 --> 00:10:19.480
So you cannot use const, you can't
use function, you can't use default,

156
00:10:19.480 --> 00:10:22.050
there's a bunch of things
that you can't use.

157
00:10:23.240 --> 00:10:25.980
And believe me it will tell
you what you can't use.

158
00:10:27.520 --> 00:10:30.410
So it's gonna say, hey you're missing
a variable name or if I try and do it like

159
00:10:31.980 --> 00:10:36.630
function, it's gonna be all weird and say,
it's hey, you're missing a variable name.

160
00:10:38.570 --> 00:10:41.628
it's just not gonna understand what you're
trying to do, cuz it thinks you're trying

161
00:10:41.628 --> 00:10:49.378
to declare a function there.
&gt;&gt; Brian Holt: But other than that,

162
00:10:49.378 --> 00:10:51.498
if you're missing all the keywords,
you can call it whatever you want.

163
00:10:51.498 --> 00:10:58.764
What else?
&gt;&gt; Brian Holt: Just

164
00:10:58.764 --> 00:11:02.997
to show you, so,
these are my developer tools.

165
00:11:02.997 --> 00:11:07.540
When we're doing console.log here and

166
00:11:07.540 --> 00:11:11.960
its logging on this little thing on the
page for you, which is just a convenience.

167
00:11:11.960 --> 00:11:16.618
If you actually go into your console here,
you'll see that it is actually logging out

168
00:11:16.618 --> 00:11:23.055
here as well.
&gt;&gt; Brian Holt: I think,

169
00:11:23.055 --> 00:11:26.172
maybe it's not, it might be blocking it.

170
00:11:26.172 --> 00:11:29.440
Anyway normally,
let's just trash all that.

171
00:11:29.440 --> 00:11:31.900
There's a bunch of stuff coming
from the plugin that I'm using so

172
00:11:31.900 --> 00:11:36.300
you can ignore that,
just gonna make this bigger, I can, cool.

173
00:11:37.320 --> 00:11:42.316
Normally, you can actually just write
directly here to your console, and

174
00:11:42.316 --> 00:11:47.954
say like console.log,
&gt;&gt; Brian Holt: 5+5 or

175
00:11:47.954 --> 00:11:57.444
something like that
&gt;&gt; Brian Holt: Look,

176
00:11:57.444 --> 00:12:00.890
it's actually putting it out there,
that's really funny.

177
00:12:00.890 --> 00:12:05.490
So don't do it on this page,
let's just open a new tab and do that,

178
00:12:05.490 --> 00:12:08.780
so console.log(5).

179
00:12:08.780 --> 00:12:11.500
There you go, so
it's logging it right there.

180
00:12:11.500 --> 00:12:16.280
So you can actually just use this kind
of as what we'd call a REPL, R-E-P-L.

181
00:12:16.280 --> 00:12:20.055
Read, evaluate, print, I don't know,
now I'm making this stuff up.

182
00:12:20.055 --> 00:12:23.560
It stands for something that I
don't care what it stands for, but

183
00:12:23.560 --> 00:12:26.954
you can just type commands in,
mess around, test things out.

184
00:12:26.954 --> 00:12:31.218
I can say, x = 5, 5 * 25,
it will just print that stuff out so

185
00:12:31.218 --> 00:12:36.107
you can actually just program directly
in here and mess around with stuff,

186
00:12:36.107 --> 00:12:39.362
I do it all the time.
&gt;&gt; Brian Holt: And

187
00:12:39.362 --> 00:12:41.894
anytime you would normally
write console.log,

188
00:12:41.894 --> 00:12:45.823
instead of your JavaScript file,
this is where it gets written out, right?

189
00:12:45.823 --> 00:12:52.130
So questions about that?
&gt;&gt; Brian Holt: Where am I?

190
00:12:52.130 --> 00:12:56.703
I'm in here.
&gt;&gt; Brian Holt: This side happens to be

191
00:12:56.703 --> 00:13:01.035
a little screwed up because we overrode
the console.log to write to this

192
00:13:01.035 --> 00:13:04.982
thing right here.
&gt;&gt; Brian Holt: Okay.

193
00:13:09.265 --> 00:13:10.295
&gt;&gt; Brian Holt: I've put a link here if

194
00:13:10.295 --> 00:13:13.279
you're having trouble finding
in developer tools right there,

195
00:13:13.279 --> 00:13:16.500
that'll show you how to do it in
multiple different browsers as well.

196
00:13:16.500 --> 00:13:23.035
So there's a link there if you need help.
&gt;&gt; Brian Holt: Okay,

197
00:13:23.035 --> 00:13:27.437
we're gonna do it now inside of VS code,
so you can see what that looks like, so

198
00:13:27.437 --> 00:13:31.136
you can figure out kind of how you
connect those things together.

199
00:13:31.136 --> 00:13:34.042
So just copy this bit of HTML right here,

200
00:13:34.042 --> 00:13:38.749
we already learnt HTML,
we're not gonna spend too time on that.

201
00:13:38.749 --> 00:13:43.580
Here, I'm just gonna close this project,
I'm gonna say new folder on my desktop,

202
00:13:43.580 --> 00:13:47.680
this I'm gonna call it experiment,
you can call it whatever you want.

203
00:13:48.970 --> 00:13:51.730
And then I'm going to open this folder,
you can drag and

204
00:13:51.730 --> 00:13:55.551
drop them onto Visual Studio code and
Visual Studio code will open that folder

205
00:13:55.551 --> 00:14:00.346
inside of Visual Studio code.
&gt;&gt; Brian Holt: You can

206
00:14:00.346 --> 00:14:03.164
also just do Cmd + Open here as well and
just find experiments and

207
00:14:03.164 --> 00:14:07.509
click on that as well, that would be fine.
&gt;&gt; Brian Holt: So

208
00:14:07.509 --> 00:14:12.239
in here I'm gonna put a new file,
so I did Cmd+N,

209
00:14:12.239 --> 00:14:15.630
Cmd+S, so New File and then Save.

210
00:14:15.630 --> 00:14:22.260
Or you can also do New File and then you
can do save from here as well, from File.

211
00:14:22.260 --> 00:14:25.403
That works as well, and that should
work both in Windows and in Mac,

212
00:14:25.403 --> 00:14:30.405
as well as probably in Linux, I assume.
&gt;&gt; Brian Holt: Okay,

213
00:14:30.405 --> 00:14:36.263
so, new file index.html,
paste all that stuff.

214
00:14:36.263 --> 00:14:39.282
So we're going to bring
in an experiments.js,

215
00:14:39.282 --> 00:14:41.878
so we're going to make another new file.

216
00:14:41.878 --> 00:14:50.030
And we're gonna save that
as well in experiments.js.

217
00:14:50.030 --> 00:14:52.040
So now we have a JavaScript file
that we're gonna be working

218
00:14:52.040 --> 00:14:56.434
with.
&gt;&gt; Brian Holt: You can ignore my

219
00:14:56.434 --> 00:14:58.085
ESLint stuff, no one cares.

220
00:14:58.085 --> 00:15:03.434
[LAUGH] So this script tag is going
to load that experiments file that

221
00:15:03.434 --> 00:15:10.843
we just put there.
&gt;&gt; Brian Holt: And now I'm gonna copy and

222
00:15:10.843 --> 00:15:16.770
paste that code that we were just
playing with right there and save that.

223
00:15:16.770 --> 00:15:21.905
So now this is my experiments.js file,
and now I'm gonna open this in

224
00:15:21.905 --> 00:15:29.949
my browser just like I had done before
&gt;&gt; Brian Holt: On my desktop,

225
00:15:29.949 --> 00:15:32.460
experiments &gt; index.html.

226
00:15:32.460 --> 00:15:35.170
You'll get a blank page, no,
it says JavaScript Experiments.

227
00:15:36.200 --> 00:15:40.300
But now if I look in my console, you'll
see that 6,000 is being logged out here

228
00:15:40.300 --> 00:15:47.350
inside of my console.
&gt;&gt; Brian Holt: Yeah

229
00:15:47.350 --> 00:15:50.201
this is yelling at me because I didn't
put stuff in my head but whatever,

230
00:15:50.201 --> 00:15:51.525
screw you Firefox I don't care.

231
00:15:58.767 --> 00:16:01.779
&gt;&gt; Brian Holt: Any question about this?

232
00:16:03.020 --> 00:16:04.130
Is it working for most people?

233
00:16:06.440 --> 00:16:08.800
So I just wanted you to establish,

234
00:16:08.800 --> 00:16:12.330
how do I start a new project if I'm
gonna write a JavaScript project?

235
00:16:12.330 --> 00:16:15.900
So you need an index file to load your
JavaScript file, and then you need to

236
00:16:15.900 --> 00:16:21.700
connect it using this source tag right
here, so source equals eperiments.js.

237
00:16:21.700 --> 00:16:24.850
Remember the dot slash means
in the same directory,

238
00:16:24.850 --> 00:16:26.880
it goes over to this directory file.

239
00:16:26.880 --> 00:16:29.920
And then it's going to download
this file separately and

240
00:16:29.920 --> 00:16:32.810
then immediately run the code, right?

241
00:16:32.810 --> 00:16:34.790
So it's just gonna start
running this by itself.

242
00:16:34.790 --> 00:16:36.810
You don't have to do anything,
you just say,

243
00:16:36.810 --> 00:16:39.360
as long as it downloads it,
it's just gonna run it.

244
00:16:39.360 --> 00:16:40.070
That's how it works.

