WEBVTT

1
00:00:00.150 --> 00:00:01.991
&gt;&gt; Brian Holt: So we're still talking
a little bit about functions.

2
00:00:01.991 --> 00:00:06.922
The last thing I wanted to talk about
is JavaScript has a bunch of stuff

3
00:00:06.922 --> 00:00:09.400
already kind of prebuilt for you.

4
00:00:09.400 --> 00:00:12.670
We're going to call these built ins,
but that's not necessarily like,

5
00:00:12.670 --> 00:00:13.420
a canonical name.

6
00:00:13.420 --> 00:00:16.150
It's just what I'm using right now.

7
00:00:16.150 --> 00:00:19.740
For example, strings have a bunch
of functions kind of built into it.

8
00:00:19.740 --> 00:00:24.630
So you don't have to write these yourself.

9
00:00:25.630 --> 00:00:29.039
So I have this string
has weird casing in it,

10
00:00:29.039 --> 00:00:33.385
the Spongebob cases as we
were alluding to previously.

11
00:00:33.385 --> 00:00:37.580
And then you can say,
sentence.toLowerCase, right?

12
00:00:37.580 --> 00:00:41.760
I didn't write this toLowerCase,
this is built into the string itself.

13
00:00:41.760 --> 00:00:45.850
So that's why I can say
sentence.toLowerCase.

14
00:00:45.850 --> 00:00:50.660
And I just want you to know that those
are coming from the JavaScript language.

15
00:00:50.660 --> 00:00:53.820
That's actually written as
part of the specification for

16
00:00:53.820 --> 00:00:55.690
JavaScript that it has
to be able to do that.

17
00:00:55.690 --> 00:00:58.590
And you can see here,
this has weird casing.

18
00:00:58.590 --> 00:01:00.460
It has just lower case.

19
00:01:00.460 --> 00:01:05.440
And just as you might imagine
there is also toUpperCase if

20
00:01:05.440 --> 00:01:10.140
you can spell uppercase,
right, and that works as well.

21
00:01:11.830 --> 00:01:15.730
An easy way to kind of explore this
is one definitely check out the MDN

22
00:01:15.730 --> 00:01:20.440
that has very exhaustive everything for
it.

23
00:01:22.050 --> 00:01:24.490
But I can also come down
here to my DEV tools.

24
00:01:24.490 --> 00:01:25.770
Let me make that a little bit bigger for
you.

25
00:01:25.770 --> 00:01:28.816
And then I have like some string.

26
00:01:28.816 --> 00:01:33.950
I can hit dot and
it brings up this like pop up right here.

27
00:01:33.950 --> 00:01:38.510
And I can actually go through and see,
it's like hey look it has a slice method.

28
00:01:38.510 --> 00:01:40.460
It has a startsWith method.

29
00:01:40.460 --> 00:01:44.283
It has a substring, blah blah blah,
all those different things and

30
00:01:44.283 --> 00:01:46.644
you can just kind of explore right there.

31
00:01:46.644 --> 00:01:50.057
Same thing with code if
we go over to our editor.

32
00:01:50.057 --> 00:01:53.717
If I come in her and say bla.,

33
00:01:53.717 --> 00:01:59.141
this is actually built
into VS code as well.

34
00:01:59.141 --> 00:02:03.783
VS code actually does do some,
this is called type checking.

35
00:02:03.783 --> 00:02:06.370
So it's actually aware
that this is a string.

36
00:02:06.370 --> 00:02:09.670
So it brings up everything that strings
have on it, and that's a really,

37
00:02:09.670 --> 00:02:13.730
really cool feature of VS code.

38
00:02:13.730 --> 00:02:17.890
Again, check out Mike North's VS Code
course on Frontend masters.

39
00:02:17.890 --> 00:02:20.808
It's really good.
It goes through a lot of this stuff.

40
00:02:20.808 --> 00:02:26.182
And this is actually, just as an FYI
tied to a thing called TypeScript,

41
00:02:26.182 --> 00:02:32.630
which is a flavor of JavaScript that
has more strong type checking in it.

42
00:02:32.630 --> 00:02:36.995
I don't wanna get too much into it,
but it's worth investigation if you're

43
00:02:36.995 --> 00:02:39.895
really into these kind of type things,
which I am.

44
00:02:39.895 --> 00:02:45.655
I'm quite fascinated by them.
&gt;&gt; Brian Holt: See

45
00:02:45.655 --> 00:02:48.640
if I have any other, right.

46
00:02:48.640 --> 00:02:51.380
So like, there is a Math object.

47
00:02:51.380 --> 00:02:53.620
So, if I do Math.round,

48
00:02:53.620 --> 00:02:56.580
it is going to round that number
to the nearest number, right?

49
00:02:56.580 --> 00:03:01.710
So, if I do Math.round(5.1), I get 5.

50
00:03:01.710 --> 00:03:02.660
That follows.

51
00:03:02.660 --> 00:03:07.900
There is also Math.floor,
which means round down.

52
00:03:07.900 --> 00:03:13.350
So even if I put 5.99999,
if I do Math.floor, guess what it does.

53
00:03:13.350 --> 00:03:15.580
It rounds all the way down to 5.

54
00:03:15.580 --> 00:03:20.280
And there's also ceil, C-E-I-L.

55
00:03:20.280 --> 00:03:22.300
I didn't write this,
that's actually what it is.

56
00:03:22.300 --> 00:03:24.150
It means always round up.

57
00:03:24.150 --> 00:03:29.514
So if I do like
&gt;&gt; Brian Holt: 6.1,

58
00:03:29.514 --> 00:03:33.106
it's gonna round up to 7, right.

59
00:03:33.106 --> 00:03:41.900
So the Math object, as it's called,
has a bunch of methods on it.

60
00:03:41.900 --> 00:03:46.200
Again, I can come in here to my Visual
Studio Code and I can say Math., stop and

61
00:03:46.200 --> 00:03:48.050
it has everything on here.

62
00:03:48.050 --> 00:03:55.230
It does logarithms, it does powers, it
does sine and cosine and stuff like that.

63
00:03:55.230 --> 00:03:58.920
So it's just an object full of all
these different math methods for you.

64
00:04:00.150 --> 00:04:04.470
It's all in the MDN, but
just be aware that those things exist.

65
00:04:04.470 --> 00:04:06.570
So if you start seeing
things like that come out,

66
00:04:06.570 --> 00:04:10.000
you can assume they're
a built-in of some sort.

67
00:04:11.260 --> 00:04:15.425
Again here I have name,
name = "Brian Holt".

68
00:04:15.425 --> 00:04:19.540
I do name.substr,

69
00:04:19.540 --> 00:04:24.230
and the way that this one
particularly works is,

70
00:04:24.230 --> 00:04:27.930
I'm saying please start
from the sixth character.

71
00:04:27.930 --> 00:04:29.160
Actually it's the seventh character.

72
00:04:29.160 --> 00:04:31.020
It's the sixth index.

73
00:04:31.020 --> 00:04:39.200
So, zero, one, two, three, four,
five, six, which means start here.

74
00:04:39.200 --> 00:04:41.780
Or you can see my cursor flashing.

75
00:04:41.780 --> 00:04:44.770
And then, it says grab three characters.

76
00:04:44.770 --> 00:04:51.020
So it's one, two, three, and then,
you can see here, it's returning Hol.

77
00:04:52.270 --> 00:04:59.180
So if I do like 4, it's gonna do n H,
right, because it grabs three characters.

78
00:04:59.180 --> 00:05:01.870
The space does count as a character.

79
00:05:01.870 --> 00:05:06.810
Or if I said 4,
it would grab an additional character.

80
00:05:06.810 --> 00:05:12.201
Or if I just didn't give it a number,
it would give me all the way to the end.

81
00:05:12.201 --> 00:05:15.184
So, that's what substr does.

82
00:05:15.184 --> 00:05:18.844
The reason why I don't call that substring
is cuz there's actually one called

83
00:05:18.844 --> 00:05:21.348
substring that does something
entirely different.

84
00:05:21.348 --> 00:05:27.490
[LAUGH] I don't actually remember,
you end up using substring as much.

85
00:05:27.490 --> 00:05:29.350
I end up using this one more.

86
00:05:29.350 --> 00:05:30.794
But it's all in MDN, so if you're curious,

87
00:05:30.794 --> 00:05:35.536
check it out.
&gt;&gt; Brian Holt: And

88
00:05:35.536 --> 00:05:38.401
you can see I have indexToStart,
howManyCharactersToInclude.

89
00:05:43.038 --> 00:05:44.702
&gt;&gt; Brian Holt: There are a lot of these.

90
00:05:44.702 --> 00:05:49.120
So just Look at them in the MDN, I guess.

91
00:05:49.120 --> 00:05:51.635
And there's no reason you
need to memorize them either.

92
00:05:51.635 --> 00:05:52.135
So

