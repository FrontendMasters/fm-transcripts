WEBVTT

1
00:00:00.310 --> 00:00:04.327
&gt;&gt; Brian Holt: So what happens if I have
these friends at my party, and more people

2
00:00:04.327 --> 00:00:09.690
show up, and I wanna keep adding one for
every person who shows up to my party?

3
00:00:09.690 --> 00:00:12.995
I could do something like this,
so first of all,

4
00:00:12.995 --> 00:00:16.555
notice that we're using
let here instead of const.

5
00:00:16.555 --> 00:00:20.105
If I said const here, it's gonna say, hey,
you already had friends at your party,

6
00:00:20.105 --> 00:00:22.014
you can't assign that
to be something else.

7
00:00:22.014 --> 00:00:25.291
So if you know that friends at your
party is going to change down the road,

8
00:00:25.291 --> 00:00:32.290
you say let.
&gt;&gt; Brian Holt: Some of you might ask,

9
00:00:32.290 --> 00:00:36.830
why don't I just always use lets, then I
never have to worry about these errors?

10
00:00:36.830 --> 00:00:41.990
And there are people that do that, so that
is a valid thing to say, but I do not.

11
00:00:41.990 --> 00:00:47.580
I like const, there's a thing called
the principle of least power.

12
00:00:47.580 --> 00:00:50.350
That you use the most
simple thing possible,

13
00:00:50.350 --> 00:00:54.040
so const does not have
the power to change.

14
00:00:54.040 --> 00:00:58.019
Therefore, if I look way down in the code
and I see friends at your party again,

15
00:00:58.019 --> 00:01:01.504
I know that that is not changing
because I knew it was a const before.

16
00:01:01.504 --> 00:01:05.200
So there's an assumption i get to
make about code that I wrote, and

17
00:01:05.200 --> 00:01:07.130
I think that's a really good thing,
personally.

18
00:01:07.130 --> 00:01:10.870
And there are people who will disagree
with me and I disagree with them.

19
00:01:10.870 --> 00:01:13.120
So screw you guys, I'm the one teaching.

20
00:01:15.160 --> 00:01:17.944
So this one does have to change,
so that's why I say let.

21
00:01:17.944 --> 00:01:21.310
Right, so let friendsAtYourParty = 0, and

22
00:01:21.310 --> 00:01:26.690
then I say friendsAtYourParty is
reassigned friendsAtYourParty + 1.

23
00:01:26.690 --> 00:01:29.390
Right, so
whatever friendsAtYourParty was before

24
00:01:29.390 --> 00:01:33.930
is now assigned whatever it was + 1,
and I can do that.

25
00:01:33.930 --> 00:01:36.540
I can reference friendsAtYourParty when
I'm reassigning friendsAtYourParty,

26
00:01:36.540 --> 00:01:40.960
because this gets run first, and
then it gets assigned to this,

27
00:01:40.960 --> 00:01:43.090
does that make sense?

28
00:01:44.910 --> 00:01:48.220
So I can reference in here,
because here, at this particular moment,

29
00:01:48.220 --> 00:01:52.160
it's gonna be 0, because that's
what it is, so it's gonna be 0 + 1.

30
00:01:52.160 --> 00:01:55.680
And then this is going to be the answer
of 1 and it's gonna be reassigned here.

31
00:01:55.680 --> 00:02:00.556
So this is now 1, then 2, then 3, so
on and so forth until you get down to

32
00:02:00.556 --> 00:02:06.362
the bottom and you have 10, make sense?
&gt;&gt; Brian Holt: So

33
00:02:06.362 --> 00:02:11.053
it'd be nice if there was a better way
to do this so I didn't have to copy and

34
00:02:11.053 --> 00:02:15.005
paste this every time that I
wanted to add someone to my party.

35
00:02:15.005 --> 00:02:18.420
There is, luckily,

36
00:02:18.420 --> 00:02:22.984
talked about let and const.

37
00:02:22.984 --> 00:02:28.288
Something that you will see that,
this is old JavaScript, you will see var,

38
00:02:28.288 --> 00:02:32.629
V-A-R, I'm not gonna talk about
it today because it is old.

39
00:02:32.629 --> 00:02:35.437
And you really shouldn't be using var,
I'm gonna say ever,

40
00:02:35.437 --> 00:02:37.220
I don't think you should ever use var.

41
00:02:37.220 --> 00:02:42.300
I know Kyle Simpson would disagree
with me, and again, he's in Texas,

42
00:02:42.300 --> 00:02:45.260
I am here, so I get to say what I want.

43
00:02:45.260 --> 00:02:46.410
var is the old way of doing it,

44
00:02:46.410 --> 00:02:48.630
I don't think it's good anymore,
you should use let.

45
00:02:50.610 --> 00:02:53.830
There are some differences there,
and they're not worth discussing.

46
00:02:53.830 --> 00:02:59.190
If you'd like to look at it, there's
good blog posts on it, just Google it.

47
00:02:59.190 --> 00:03:02.000
So we're gonna do what's called a loop.

48
00:03:03.000 --> 00:03:05.939
Now, a loop allows us to execute
something multiple times.

49
00:03:06.960 --> 00:03:10.160
So the first one that we're gonna
learn here is called a while loop,

50
00:03:10.160 --> 00:03:13.550
which is really,
really similar to an if statement.

51
00:03:13.550 --> 00:03:17.090
So I'm gonna say let
friendsAtYourParty = 0.

52
00:03:18.500 --> 00:03:23.301
I'll say while friendsAtYourParty &lt; 10,
so as long as this statement is true,

53
00:03:23.301 --> 00:03:26.410
it's gonna keep doing whatever it's doing.

54
00:03:26.410 --> 00:03:31.018
So here I'm gonna say, friendsAtYourParty
= friendsAtYourParty + 1,

55
00:03:31.018 --> 00:03:34.687
right?
&gt;&gt; Brian Holt: As long as that's true,

56
00:03:34.687 --> 00:03:36.928
then it's gonna keep adding something,

57
00:03:36.928 --> 00:03:40.078
eventually this is going to
get bigger than 10, right?

58
00:03:40.078 --> 00:03:43.696
Eventually this is going to become false,
and then it's gonna console.log,

59
00:03:43.696 --> 00:03:46.295
it's gonna break out of that and
it's gonna keep going.

60
00:03:46.295 --> 00:03:51.304
Right, so it's actually gonna run this
statement here on line 3, the one

61
00:03:51.304 --> 00:03:56.566
between the curly braces, ten times,
and then it's going to break out of it.

62
00:03:56.566 --> 00:04:00.066
It's actually gonna run it 11 times,
technically, and

63
00:04:00.066 --> 00:04:04.550
then it's gonna log it out here,
which is why you're able to see 10 here.

64
00:04:04.550 --> 00:04:08.528
Does that make sense, so
while this is true, do this.

65
00:04:08.528 --> 00:04:14.501
Now what happens if I made this 15?
&gt;&gt; Brian Holt: It doesn't even

66
00:04:14.501 --> 00:04:19.410
ever get run, because it's gonna ask us
first, hey, while friendsAtYourParty &lt; 10,

67
00:04:19.410 --> 00:04:24.120
well, 15 is never less than 10, so
it's just gonna not ever run it.

68
00:04:24.120 --> 00:04:28.935
Now if I get down here and say negative
100, this is gonna get run 110

69
00:04:28.935 --> 00:04:33.828
times until it's less than 10, and
then it finishes, then it's done,

70
00:04:33.828 --> 00:04:39.571
right?
&gt;&gt; Brian Holt: Make sense?

71
00:04:39.571 --> 00:04:44.528
So this is a while loop, I will say that
you do use while loops, I don't think I

72
00:04:44.528 --> 00:04:50.127
use them, I wouldn't say maybe daily, but
maybe weekly, so they are useful to know.

73
00:04:50.127 --> 00:04:53.135
We're gonna get down and we're gonna
see another kind of loop, and I use for

74
00:04:53.135 --> 00:04:57.081
loops every day.
&gt;&gt; Brian Holt: But

75
00:04:57.081 --> 00:05:01.317
I teach you this one first because it
looks really similar to an if statement,

76
00:05:01.317 --> 00:05:04.918
right, and it functions relatively
similar to an if statement.

77
00:05:10.561 --> 00:05:11.391
&gt;&gt; Brian Holt: There's another,

78
00:05:11.391 --> 00:05:14.706
we're not gonna talk about it today, but
there's another one called a do loop,

79
00:05:14.706 --> 00:05:18.020
it's really similar to a while loop,
it works almost the same.

80
00:05:18.020 --> 00:05:20.170
The only difference between a do loop and
a while loop is,

81
00:05:20.170 --> 00:05:22.450
a do loop is gonna happen at least once.

82
00:05:22.450 --> 00:05:25.090
A do loop will guarantee,
I'm gonna run the body at least once and

83
00:05:25.090 --> 00:05:28.076
then I'm gonna ask the while question,
whereas while loops just ask it.

84
00:05:28.076 --> 00:05:29.615
I never see do loops, but

85
00:05:29.615 --> 00:05:34.999
just know that they exist.
&gt;&gt; Brian Holt: Any questions

86
00:05:34.999 --> 00:05:39.553
about while loops before I move on?
&gt;&gt; Brian Holt: If you put a bad

87
00:05:39.553 --> 00:05:40.331
thing here,

88
00:05:40.331 --> 00:05:44.866
I'm not gonna do it right now because
it's gonna crash my browser if I do it.

89
00:05:44.866 --> 00:05:50.550
But let's say, I'm just gonna,

90
00:05:50.550 --> 00:05:55.450
while friendsAtYourParty,

91
00:05:58.148 --> 00:06:01.078
&gt;&gt; Brian Holt: Is greater than 10, so

92
00:06:01.078 --> 00:06:07.748
if I did this,
&gt;&gt; Brian Holt: And

93
00:06:07.748 --> 00:06:10.332
I made this equal to 10.

94
00:06:10.332 --> 00:06:14.596
If I uncommented this line and
then commented the line underneath it out,

95
00:06:14.596 --> 00:06:19.655
what would happen?
&gt;&gt; Brian Holt: You're gonna get

96
00:06:19.655 --> 00:06:24.530
what's called an infinite loop, because
this is never ever going to be false.

97
00:06:24.530 --> 00:06:28.637
It's cuz it's just gonna keep
adding itself because, while 10 is,

98
00:06:28.637 --> 00:06:32.751
is 11 greater than 10, yep,
is 12, is 13, is 14, is 15?

99
00:06:32.751 --> 00:06:35.840
And it's just gonna keep going forever and
ever until eventually it's gonna crash.

100
00:06:35.840 --> 00:06:39.310
It's gonna crash the browser,
this is called an infinite loop.

101
00:06:39.310 --> 00:06:41.316
They're very easy to do,
it will crash your program.

102
00:06:41.316 --> 00:06:45.344
And that's fine,
we all do it, but actually,

103
00:06:45.344 --> 00:06:51.333
I would have to make this 11 anyway.
&gt;&gt; Brian Holt: Or

104
00:06:51.333 --> 00:06:56.410
the infamous while true
loop [LAUGH] right.

105
00:06:56.410 --> 00:06:58.750
This is just gonna keep running
forever and ever and ever.

106
00:06:58.750 --> 00:07:03.130
So be aware that there's a thing called
an infinite loop, it's really easy to do.

107
00:07:03.130 --> 00:07:06.202
I don't wanna crash my browser right now,
cuz I'm teaching you things, but

108
00:07:06.202 --> 00:07:11.740
that's what it would do.
&gt;&gt; Brian Holt: Questions about that?

109
00:07:11.740 --> 00:07:15.551
If you ever see your browser lock up,
it's probably an infinite loop.

110
00:07:15.551 --> 00:07:18.700
That's the most common reason
that if I wrote code that.

111
00:07:18.700 --> 00:07:22.942
I guess we can just do it in here,
it wouldn't be very hard.

112
00:07:22.942 --> 00:07:27.826
So while true,

113
00:07:27.826 --> 00:07:36.093
console.log(i), and

114
00:07:36.093 --> 00:07:39.850
then here,

115
00:07:39.850 --> 00:07:45.492
I said let i = 0.

116
00:07:45.492 --> 00:07:48.792
It's good to see what it looks
like when it crashes, okay?

117
00:07:48.792 --> 00:07:53.216
So I save this,
this is gonna be an infinite loop, right?

118
00:07:53.216 --> 00:07:56.037
I'm gonna come over here and just,

119
00:07:56.037 --> 00:08:00.190
you can see that it's really
locking up my browser.

120
00:08:01.750 --> 00:08:05.196
It's really unresponsive right now,
you can see I'm beach balling.

121
00:08:10.954 --> 00:08:13.792
&gt;&gt; Brian Holt: At some point it's gonna

122
00:08:13.792 --> 00:08:19.204
say, hey,
I think something's wrong [LAUGH].

123
00:08:19.204 --> 00:08:24.817
Eventually Firefox will just kill the tab.
&gt;&gt; Brian Holt: Right,

124
00:08:24.817 --> 00:08:26.690
but this is not responding.

125
00:08:26.690 --> 00:08:28.583
I can't scroll, I can't do anything.

126
00:08:28.583 --> 00:08:35.544
I'm just gonna close the tab.
&gt;&gt; Brian Holt: Okay,

127
00:08:35.544 --> 00:08:39.133
this is not what I wanted to do [LAUGH].

128
00:08:39.133 --> 00:08:44.863
I have made a mistake [LAUGH].
&gt;&gt; Brian Holt: Anyway,

129
00:08:44.863 --> 00:08:48.714
if this happens to you,
you've probably got an infinite

130
00:08:48.714 --> 00:08:53.259
loop.
&gt;&gt; Brian Holt: Yeah,

131
00:08:53.259 --> 00:08:59.397
this is right gone.
&gt;&gt; Brian Holt: Okay,

132
00:08:59.397 --> 00:09:04.578
so please close, there we go, thank god.

133
00:09:04.578 --> 00:09:09.110
[LAUGH] Any questions while

134
00:09:09.110 --> 00:09:14.882
Firefox puts its shit together?

135
00:09:20.984 --> 00:09:22.328
&gt;&gt; Brian Holt: Yeah.

136
00:09:22.328 --> 00:09:23.895
&gt;&gt; Speaker 2: We have a question from

137
00:09:23.895 --> 00:09:24.971
the chatroom.

138
00:09:24.971 --> 00:09:28.043
What is the difference between

139
00:09:28.043 --> 00:09:30.553
var and let?
&gt;&gt; Brian Holt: I will give you the one

140
00:09:30.553 --> 00:09:34.171
sentence answer to that question
cuz I don't wanna get in to it.

141
00:09:34.171 --> 00:09:38.129
It's a lengthy explanation,
and the difference is scope,

142
00:09:38.129 --> 00:09:40.621
it's the way that they handle scope.

143
00:09:40.621 --> 00:09:44.680
Let has block level scope and
var has function level scope.

144
00:09:44.680 --> 00:09:47.690
If you are unsatisfied with that answer,
then I would invite you to Google it.

145
00:09:50.390 --> 00:09:53.161
Something that I did wanna show you for
just a little bit,

146
00:09:53.161 --> 00:09:56.109
there's these things that
are are called unary operators,

147
00:09:56.109 --> 00:10:00.014
which is not something you need to know,
but I'm just gonna throw it out there.

148
00:10:00.014 --> 00:10:03.652
Unary is in contrast to binary, right,

149
00:10:03.652 --> 00:10:08.798
binary has two options or
two things, and unary has one.

150
00:10:08.798 --> 00:10:12.964
So I have this first line right here,
friends = friendsAtYourParty + 1.

151
00:10:12.964 --> 00:10:16.852
Right, plus would be what's called
a binary operator because it

152
00:10:16.852 --> 00:10:19.621
requires one on this side and
one on this side.

153
00:10:19.621 --> 00:10:23.795
Whereas here, you only need one thing.

154
00:10:23.795 --> 00:10:28.063
Again, that's not really that useful
a distinction to know, it's just FYI.

155
00:10:28.063 --> 00:10:34.970
So these four lines of code right here,
2 through 5, do exactly the same thing.

156
00:10:36.630 --> 00:10:41.177
This adds 1 to friendsAtYourParty,
this adds 1 to friendsAtYourParty.

157
00:10:41.177 --> 00:10:45.266
This adds 1 to friendsAtYourParty,
and so does this.

158
00:10:45.266 --> 00:10:50.047
So you can see down here when
I console.log that, it's 4.

159
00:10:50.047 --> 00:10:53.670
Now you might ask, why is there so
many ways to add 1 to something?

160
00:10:53.670 --> 00:10:56.605
I think part of it's just legacy,

161
00:10:56.605 --> 00:11:02.593
JavaScript is based in the language C,
C is a language from the 70s.

162
00:11:02.593 --> 00:11:06.125
And C has all these features and
JavaScript just kind of adopted them.

163
00:11:06.125 --> 00:11:11.658
And most languages that are C based,
like Java and Go and

164
00:11:11.658 --> 00:11:17.804
a lot of these have legacy that
comes from C, and that's why.

165
00:11:17.804 --> 00:11:24.730
So += right here is going
to add 1 back into this.

166
00:11:24.730 --> 00:11:28.020
And so for example, I could put 5 here,
and it would add 5.

167
00:11:28.020 --> 00:11:33.911
Right, so it's just going to add
whatever this number is to this total.

168
00:11:33.911 --> 00:11:38.427
And I think down here,
I don't show it, but

169
00:11:38.427 --> 00:11:43.321
there is also -=, so
that would subtract 5.

170
00:11:43.321 --> 00:11:49.870
*=, /=, by the way, that's the way you
do divide in JavaScript, is slash.

171
00:11:52.520 --> 00:11:57.546
And there's even, I'm gonna make this 2,

172
00:11:57.546 --> 00:12:01.260
**, I think that should work.

173
00:12:03.050 --> 00:12:08.306
It's one, so ** is exponent, so

174
00:12:08.306 --> 00:12:14.261
if I have, I don't need to do it up here,

175
00:12:14.261 --> 00:12:18.819
console.log(5 ** 2),

176
00:12:18.819 --> 00:12:24.449
that is 5 squared, just so you know.

177
00:12:24.449 --> 00:12:29.514
5 times 5, or cubed, 5 times 5

178
00:12:29.514 --> 00:12:34.765
times 5, so that's what ** is.

179
00:12:34.765 --> 00:12:37.065
Anyway let's go back to += 1,

180
00:12:37.065 --> 00:12:40.934
just wanted you to see that
pattern cuz it does get used.

181
00:12:40.934 --> 00:12:45.480
++, this is one that you'll see
a lot in conjunction with for loops.

182
00:12:45.480 --> 00:12:48.576
It just means increment it by 1.

183
00:12:48.576 --> 00:12:53.810
There is also, as you might imagine,
--, which is subtract 1.

184
00:12:53.810 --> 00:12:58.775
There is no **, it's just ++ and
So that's why if you've ever

185
00:12:58.775 --> 00:13:03.083
heard of the language C++.
&gt;&gt; Brian Holt: It's C

186
00:13:03.083 --> 00:13:04.773
incremented by 1, right?

187
00:13:04.773 --> 00:13:09.125
That's kind of the joke, anyway,
it wasn't funny then, it's not funny now.

188
00:13:09.125 --> 00:13:13.988
[LAUGH] And then also,
you can put the ++ on the front, and

189
00:13:13.988 --> 00:13:16.676
you can put the ++ on the back.

190
00:13:16.676 --> 00:13:19.121
There is a minor difference
between the two,

191
00:13:19.121 --> 00:13:23.655
it is not important.
&gt;&gt; Brian Holt: The difference

192
00:13:23.655 --> 00:13:27.160
is when it gets incremented,
which in these two cases,

193
00:13:27.160 --> 00:13:31.574
because it's the only thing on the line,
doesn't actually matter.

194
00:13:31.574 --> 00:13:34.096
In JavaScript, you will always
see people put it on the end,

195
00:13:34.096 --> 00:13:36.477
I don't think I've ever seen
anyone put it on the front.

196
00:13:36.477 --> 00:13:39.685
I would even venture to say most
JavaScript developers don't know you can

197
00:13:39.685 --> 00:13:44.555
put it on the front.
&gt;&gt; Brian Holt: But if you're writing C,

198
00:13:44.555 --> 00:13:47.140
I guess in C best practices,
it's on the front.

199
00:13:47.140 --> 00:13:51.230
I'm not a C developer, so don't believe
me, but that's what I've heard.

200
00:13:52.360 --> 00:13:56.662
Okay, any questions about
incrementing things, make sense?

201
00:13:56.662 --> 00:14:03.350
Okay, the reason why I show you this is,
you don't really see ++ a ton.

202
00:14:03.350 --> 00:14:10.461
Did I use ++ when I did my code thing,
where's my code?

203
00:14:10.461 --> 00:14:13.582
I did, right there,
it's one of those things that's so

204
00:14:13.582 --> 00:14:15.999
automatic that I just
forget to explain it.

205
00:14:15.999 --> 00:14:19.406
So, sorry, now hopefully I've
explained it so you get it.

206
00:14:19.406 --> 00:14:24.291
[LAUGH] So going down here,
friendsAtYourParty = 0.

207
00:14:24.291 --> 00:14:29.058
We're gonna talk about this kind of loop
right here, which is called a for loop.

208
00:14:29.058 --> 00:14:34.090
Okay, obviously named after the for,
right here.

209
00:14:34.090 --> 00:14:37.957
So you're gonna have three parts to a for
loop.

210
00:14:37.957 --> 00:14:43.430
Okay, the first part is, you declare
what's called your control variable.

211
00:14:43.430 --> 00:14:48.058
For whatever reason, since the beginning
of time, the control variable for a for

212
00:14:48.058 --> 00:14:49.408
loop has always been i.

213
00:14:49.408 --> 00:14:53.824
I don't know what it stands for,
I don't think it stands for anything, but

214
00:14:53.824 --> 00:14:54.726
it is always i.

215
00:14:54.726 --> 00:14:57.290
You can put on the things,
there's no reason it wouldn't work.

216
00:14:57.290 --> 00:15:00.930
It's just that everyone calls it i,
so you will always see that called i.

217
00:15:00.930 --> 00:15:02.298
If I have a for loop within a for loop,

218
00:15:02.298 --> 00:15:03.944
then they just start
going up the alphabet.

219
00:15:03.944 --> 00:15:08.364
So, the next one will be j, the next one
will be k, the next one will be l, m, n.

220
00:15:08.364 --> 00:15:12.150
If you're going past n,
you have serious problems.

221
00:15:12.150 --> 00:15:14.409
Honestly, if you're going past maybe k,

222
00:15:14.409 --> 00:15:19.448
you're gonna have some real big problems.
&gt;&gt; Brian Holt: Anyway,

223
00:15:19.448 --> 00:15:23.182
so this is always called i,
it needs to be let, right,

224
00:15:23.182 --> 00:15:28.240
because if it's const, const can't change,
you can't change const.

225
00:15:28.240 --> 00:15:33.364
So it's gonna be let i = 0,
the second part

226
00:15:33.364 --> 00:15:38.084
is the condition, like the while loop.

227
00:15:38.084 --> 00:15:41.035
As long as i &lt;= 10, right,
so as long as this is true,

228
00:15:41.035 --> 00:15:45.095
it's gonna keep doing it, as soon as this
is false, it breaks out of the loop.

229
00:15:45.095 --> 00:15:50.230
And the last thing here is, what do
I do at the end of every loop, right?

230
00:15:51.620 --> 00:15:55.010
So when it gets down here to the bottom,
it's gonna run whatever is here.

231
00:15:55.010 --> 00:16:02.170
So here, I'm gonna run i++,
I'm gonna increment i by 1,

232
00:16:02.170 --> 00:16:06.035
that's what I'm trying to say.

233
00:16:06.035 --> 00:16:12.322
Now you absolutely could say,
let's just break this,

234
00:16:12.322 --> 00:16:18.894
so I could totally make this 0,
I can make this part 10.

235
00:16:24.083 --> 00:16:26.881
&gt;&gt; Brian Holt: And as long as i &gt;=, shit,

236
00:16:26.881 --> 00:16:32.870
I broke it, this is exactly what
I was trying to avoid doing.

237
00:16:32.870 --> 00:16:34.993
Because every time it runs my
code as soon as I type it,

238
00:16:34.993 --> 00:16:36.422
now I'm stuck in an infinite loop.

239
00:16:36.422 --> 00:16:39.649
It's gonna say, hey, your web page is
slowing down, what would you like to do?

240
00:16:39.649 --> 00:16:42.750
Stop it, thank you, refresh the page,

241
00:16:42.750 --> 00:16:47.600
that's exactly what I was trying
to avoid doing, and I did it.

242
00:16:49.670 --> 00:16:53.496
And now everything's back to
FiraCode again, whatever.

243
00:16:53.496 --> 00:16:56.061
We're just gonna deal with this
being FiraCode for the moment, and

244
00:16:56.061 --> 00:16:57.510
during the next break, I will fix it.

245
00:17:00.080 --> 00:17:03.340
So just so you know, this little
character right here, the less than or

246
00:17:03.340 --> 00:17:05.460
equal to, is two separate characters.

247
00:17:06.540 --> 00:17:10.668
It's less than and equal, but
when I put them together,

248
00:17:10.668 --> 00:17:13.427
my font combines them into one thing.

249
00:17:13.427 --> 00:17:16.752
This is called a ligature,
if you wanna do that for your own code,

250
00:17:16.752 --> 00:17:18.900
there's a thing called FiraCode.

251
00:17:18.900 --> 00:17:21.880
There's also Operator,
which is what everyone swears by.

252
00:17:21.880 --> 00:17:24.304
You have to pay $200 to use Operator.

253
00:17:24.304 --> 00:17:31.695
It's a stupid font for $200,
don't buy it [LAUGH] it's dumb.

254
00:17:31.695 --> 00:17:37.080
Anyway, FiraCode is free and
it's from Firefox, or Mozilla, rather.

255
00:17:39.730 --> 00:17:41.759
Anyway, that's what's happening there.

256
00:17:42.960 --> 00:17:47.530
What I was trying to demonstrate to you,
let's just do this like this.

257
00:17:49.544 --> 00:17:54.695
&gt;&gt; Brian Holt: For let i = 10,

258
00:17:54.695 --> 00:17:59.463
i &gt;=,
&gt;&gt; Brian Holt: 0,

259
00:17:59.463 --> 00:18:04.340
i--, so you can have it go
the other way too, right.

260
00:18:06.400 --> 00:18:10.437
So now I can do this and
not break everything, and

261
00:18:10.437 --> 00:18:13.207
this works exactly the same way.

262
00:18:13.207 --> 00:18:19.211
Because now it's, rather than counting
up to ten, it's counting down to zero.

263
00:18:19.211 --> 00:18:24.521
And if I wanted to make that even bigger,
I could start from a greater number and

264
00:18:24.521 --> 00:18:28.948
it would come down even more,
even more, even more, even more,

265
00:18:28.948 --> 00:18:33.826
right, make sense?
&gt;&gt; Brian Holt: Now

266
00:18:33.826 --> 00:18:36.548
why would I use this over a while loop?

267
00:18:36.548 --> 00:18:37.418
In this particular case,

268
00:18:37.418 --> 00:18:39.520
a while loop actually would
probably work a little bit better.

269
00:18:40.600 --> 00:18:45.516
But the reason why for loops end up being
really useful is, this i variable ends

270
00:18:45.516 --> 00:18:49.705
up being useful because on every loop,
it's a different number.

271
00:18:49.705 --> 00:18:53.920
And so sometimes that's useful, that's
kind of abstract for me to say right now.

272
00:18:53.920 --> 00:18:58.489
But we'll see examples of that of where
that i variable becomes very useful to

273
00:18:58.489 --> 00:19:02.580
use, particularly with arrays,
that we will get to in a little bit.

