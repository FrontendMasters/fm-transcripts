WEBVTT

1
00:00:00.000 --> 00:00:02.273
&gt;&gt; Brian Holt: So let's get into
something called control flow.

2
00:00:02.273 --> 00:00:04.434
You don't really have to
remember the word control flow.

3
00:00:04.434 --> 00:00:08.908
It is what it's called, but
it's not really important.

4
00:00:08.908 --> 00:00:13.165
More commonly it's just
called if statements, so

5
00:00:13.165 --> 00:00:16.237
here's a really really simple one.

6
00:00:16.237 --> 00:00:21.764
So I have this const called skyIsBlue,
and I set it to true.

7
00:00:21.764 --> 00:00:24.131
So then I say here, I ask a question.

8
00:00:24.131 --> 00:00:25.973
That's what if statements allow you to do.

9
00:00:25.973 --> 00:00:30.659
They're called conditionals, because if
something is true then it'll do one thing,

10
00:00:30.659 --> 00:00:33.399
if something is not true
it will do something else.

11
00:00:33.399 --> 00:00:35.591
I think it follows, right?

12
00:00:35.591 --> 00:00:41.297
So if, and then I ask is skyIsBlue,
and skyIsBlue is true,

13
00:00:41.297 --> 00:00:45.648
right, so
it's going to do the first block.

14
00:00:45.648 --> 00:00:51.070
So it's gonna go into here and say,
console.log("The sky is blue").

15
00:00:51.070 --> 00:00:56.850
Otherwise it's gonna say,
console.log("The sky is _ not blue?").

16
00:00:56.850 --> 00:01:00.658
And it's gonna ask a question, because
you have problems, but that's not true.

17
00:01:00.658 --> 00:01:04.445
So you can see here only one thing
is logged, only this first block,

18
00:01:04.445 --> 00:01:09.112
that is a word that you should probably
remember, block, this first block is run.

19
00:01:09.112 --> 00:01:10.833
So everything between the curly braces.

20
00:01:10.833 --> 00:01:12.292
I could have multiple things here, too.

21
00:01:12.292 --> 00:01:15.912
So if I have five of those, you notice
it's gonna log out a bunch of those, and

22
00:01:15.912 --> 00:01:18.049
it doesn't log out anything there, right?

23
00:01:18.049 --> 00:01:19.745
How do we feel about that so far?

24
00:01:22.401 --> 00:01:24.771
&gt;&gt; Brian Holt: So
nothing in the else block gets run, so

25
00:01:24.771 --> 00:01:26.803
that's what the else block does.

26
00:01:26.803 --> 00:01:29.680
It says,
if this thing is not true then do this.

27
00:01:31.556 --> 00:01:35.611
&gt;&gt; Brian Holt: Now, if I change skyIsBlue
to false, what do you expect to happen?

28
00:01:40.865 --> 00:01:42.443
&gt;&gt; Brian Holt: It doesn't run this block,
and

29
00:01:42.443 --> 00:01:46.959
it only runs this block
&gt;&gt; Brian Holt: So that's

30
00:01:46.959 --> 00:01:50.868
what conditionals are for, for doing
something given some sort of condition.

31
00:01:53.672 --> 00:01:56.811
&gt;&gt; Brian Holt: You can have anything
in here that evaluates to true or

32
00:01:56.811 --> 00:01:58.498
false in some ways, right?

33
00:01:58.498 --> 00:02:03.574
Whatever happens inside the parentheses,
the condition as you would probably

34
00:02:03.574 --> 00:02:08.132
call it, has to eventually come down to,
is this true or is this false?

35
00:02:08.132 --> 00:02:12.361
So you might imagine what happens if you
were trying to log out for temperatures.

36
00:02:15.623 --> 00:02:17.754
&gt;&gt; Brian Holt: Sure, whatever
we're just gonna do it right here.

37
00:02:17.754 --> 00:02:22.622
So if I had const temperatureToday =,

38
00:02:22.622 --> 00:02:27.490
I think I saw in Minneapolis it's gonna

39
00:02:27.490 --> 00:02:31.778
get to 86, which is way too hot.

40
00:02:31.778 --> 00:02:41.773
[LAUGH] So if temperatureToday,
&gt;&gt; Brian Holt: ===,

41
00:02:41.773 --> 00:02:46.726
that's annoying,
I should probably change the font on this.

42
00:02:46.726 --> 00:02:53.866
So I have a special font that works here,
If I put three equal signs together.

43
00:02:53.866 --> 00:02:55.646
So these are three equal signs, right?

44
00:02:55.646 --> 00:02:59.661
It combines them into this
special triple-equals thing.

45
00:02:59.661 --> 00:03:02.901
Let me just change this,
cuz this is gonna confuse people.

46
00:03:02.901 --> 00:03:05.165
Now you can see it's three equal signs.

47
00:03:05.165 --> 00:03:11.173
[LAUGH] My special font combines them into
that one glyph that's three equal signs.

48
00:03:11.173 --> 00:03:14.830
It's really nice for me, but
it's probably terrible to teach with.

49
00:03:14.830 --> 00:03:18.247
[LAUGH] So just so you know,
this is three equal signs.

50
00:03:18.247 --> 00:03:24.009
So if temperature === 86,
then I'm gonna console.log,

51
00:03:28.053 --> 00:03:31.353
&gt;&gt; Brian Holt: Let's do double quotes,

52
00:03:31.353 --> 00:03:34.810
("it's too damn hot".

53
00:03:43.209 --> 00:03:48.426
&gt;&gt; Brian Holt: Okay, so
triple equals is asking the question,

54
00:03:48.426 --> 00:03:52.887
is this temperatureToday equal to this?

55
00:03:52.887 --> 00:03:55.899
Is it equal to that?

56
00:03:55.899 --> 00:03:59.719
Yes, what is it saying here?

57
00:03:59.719 --> 00:04:01.389
Yeah, you need to close that.

58
00:04:03.499 --> 00:04:06.101
&gt;&gt; Brian Holt: So now here it's saying,
it's too damn hot.

59
00:04:06.101 --> 00:04:08.524
That backslash, don't worry about it,

60
00:04:08.524 --> 00:04:12.896
it's escaping the variable to make
sure that it doesn't break anything.

61
00:04:12.896 --> 00:04:14.244
But suffice to say,

62
00:04:14.244 --> 00:04:19.253
it's not really something you need to
care about at this junction in time.

63
00:04:20.293 --> 00:04:22.451
&gt;&gt; Brian Holt: You know what, now you
definitely don't have to worry about it.

64
00:04:22.451 --> 00:04:26.643
[LAUGH]
&gt;&gt; Brian Holt: Now,

65
00:04:26.643 --> 00:04:31.695
this isn't really terribly useful, because
this only works in one temperature,

66
00:04:31.695 --> 00:04:34.375
which it can be any
number of temperatures.

67
00:04:37.267 --> 00:04:40.692
&gt;&gt; Brian Holt: So
what would actually be useful is,

68
00:04:40.692 --> 00:04:45.001
if it is &gt;= to let's say 80, then it says,

69
00:04:45.001 --> 00:04:49.975
it's too damn hot,
otherwise it says, it's fine.

70
00:04:53.377 --> 00:04:54.278
&gt;&gt; Brian Holt: Does that make sense?

71
00:04:54.278 --> 00:04:57.924
So you can do comparisons inside of here.

72
00:04:57.924 --> 00:05:00.666
Let's talk about triple
equals just a second longer.

73
00:05:00.666 --> 00:05:04.720
So you might be asking,

74
00:05:04.720 --> 00:05:08.582
why is it just = 80?

75
00:05:08.582 --> 00:05:16.896
I don't want you to actually think about
a single equal signs being equal to.

76
00:05:16.896 --> 00:05:23.175
Think of this as is assigned, so
temperatureToday is assigned 80.

77
00:05:23.175 --> 00:05:25.624
So when you see one equal signs,

78
00:05:25.624 --> 00:05:29.903
mentally replace that in your head with,
is assigned.

79
00:05:29.903 --> 00:05:34.066
And then when you see double or
triple equals you're gonna say,

80
00:05:34.066 --> 00:05:36.080
is temperature equal to 80?

81
00:05:38.437 --> 00:05:41.672
&gt;&gt; Speaker 2: Is there a difference
between the double and

82
00:05:41.672 --> 00:05:43.950
triple equals in JavaScript?

83
00:05:43.950 --> 00:05:44.897
&gt;&gt; Brian Holt: There is.

84
00:05:44.897 --> 00:05:48.540
So in this particular case,
you would see no difference.

85
00:05:50.984 --> 00:05:52.873
&gt;&gt; Brian Holt: You can see it
does exactly the same thing.

86
00:05:52.873 --> 00:05:54.720
I want you to always use triple equals.

87
00:05:54.720 --> 00:05:58.845
I will explain to you why
they are different, but

88
00:05:58.845 --> 00:06:04.694
just know that the one that you're
supposed to use is triple equals.

89
00:06:04.694 --> 00:06:07.998
There's a thing in
JavaScript called coercion.

90
00:06:07.998 --> 00:06:12.079
So let's just, I will show you.

91
00:06:15.292 --> 00:06:20.843
&gt;&gt; Brian Holt: Let's just say that
this was string 86 instead of 86.

92
00:06:20.843 --> 00:06:23.461
So I put quotes around this, so

93
00:06:23.461 --> 00:06:28.518
now this is equal to a string,
and this is a number, right?

94
00:06:28.518 --> 00:06:32.491
So it's asking, is this number
86 triple equals to string 86?

95
00:06:32.491 --> 00:06:34.995
And obviously they are not, right?

96
00:06:34.995 --> 00:06:38.187
But if I did double equals,
then they are equal.

97
00:06:38.187 --> 00:06:42.163
So double equals does this thing called
coercion, that if you're trying to compare

98
00:06:42.163 --> 00:06:45.819
a number against a string it's gonna try
and make it work as much as possible.

99
00:06:45.819 --> 00:06:49.303
And then if you do triple equals, it's
gonna say, if you're not the same type,

100
00:06:49.303 --> 00:06:52.140
if you're not both numbers,
I don't care, you are not equals.

101
00:06:52.140 --> 00:06:56.624
And I will promise you that if you do
triple equals you will save hours and

102
00:06:56.624 --> 00:06:58.503
hours and hours of your life.

103
00:06:58.503 --> 00:07:01.724
I know that because it has
happened to me [LAUGH].

104
00:07:01.724 --> 00:07:07.362
So please just take my wisdom from me,
cuz it's just not a fun bug to find.

105
00:07:07.362 --> 00:07:08.915
Cuz it's very subtle right?

106
00:07:08.915 --> 00:07:13.174
Trying to figure out that these
two things are different.

107
00:07:13.174 --> 00:07:16.699
Imagine that those things
are hundreds of lines apart,

108
00:07:16.699 --> 00:07:20.603
it's pretty subtle and
pretty difficult to figure that out.

109
00:07:20.603 --> 00:07:24.521
So just always use ===.

110
00:07:28.935 --> 00:07:29.913
&gt;&gt; Brian Holt: Questions?

111
00:07:32.064 --> 00:07:33.219
&gt;&gt; Brian Holt: You feel okay about that?

112
00:07:35.481 --> 00:07:36.299
&gt;&gt; Brian Holt: Okay.

113
00:07:38.210 --> 00:07:42.064
&gt;&gt; Brian Holt: So this is more
talking about triple, or quadruple, or

114
00:07:42.064 --> 00:07:45.350
there is no quadruple equals,
triple equals.

115
00:07:45.350 --> 00:07:48.287
If you do 2 + 2 === 4 it says, Thank God,

116
00:07:48.287 --> 00:07:52.045
the fundamental principles of
mathematics still hold true.

117
00:07:52.045 --> 00:07:54.524
You can tell how late at night
I was writing some of these.

118
00:07:54.524 --> 00:07:57.278
[LAUGH]
&gt;&gt; Brian Holt: So

119
00:07:57.278 --> 00:07:58.976
you can see here this is how that works.

120
00:07:58.976 --> 00:08:04.616
Or if I made this string 4, this would
not be true, it would tell you to panic.

121
00:08:07.130 --> 00:08:14.526
&gt;&gt; Brian Holt: Here I tell you about,
is Brian cool?

122
00:08:14.526 --> 00:08:16.844
That's assigned true,
because it's definitely true.

123
00:08:16.844 --> 00:08:19.456
Sunglasses, just kidding.

124
00:08:21.486 --> 00:08:23.738
&gt;&gt; Brian Holt: So yeah,
just think of that, is assigned to true.

125
00:08:26.600 --> 00:08:30.833
&gt;&gt; Brian Holt: And so if you want to
ask the question, is not equal to,

126
00:08:30.833 --> 00:08:33.871
that's also a question you can ask.

127
00:08:33.871 --> 00:08:35.249
And here I also talk about coercion.

128
00:08:40.502 --> 00:08:44.317
&gt;&gt; Brian Holt: So let's go up here,
there's another thing you can do.

129
00:08:44.317 --> 00:08:49.317
If you replace the first equals
here with an exclamation point,

130
00:08:49.317 --> 00:08:53.862
like that, this is asking the question,
is not equal to?

131
00:08:53.862 --> 00:08:55.982
So if 2 + 2 is not equal to 4,

132
00:08:55.982 --> 00:08:59.990
then you would probably want
to move this up here, right?

133
00:08:59.990 --> 00:09:04.625
But this is how you ask, is not equals 2.

134
00:09:04.625 --> 00:09:09.924
There's that as well, but again,
you want to use !== always.

135
00:09:14.312 --> 00:09:17.101
&gt;&gt; Brian Holt: So
that is something else you can do, and

136
00:09:17.101 --> 00:09:21.464
then you have the ability to ask
more than one question as well.

137
00:09:21.464 --> 00:09:26.667
So if you have friendsAtYourParty =,
is assigned 10, so if friendsAtYourParty

138
00:09:26.667 --> 00:09:30.644
=== 0, it says, Cool,
now I have a lot of nachos to myself.

139
00:09:30.644 --> 00:09:32.885
I was hungry when I wrote this one.

140
00:09:32.885 --> 00:09:37.149
[LAUGH] I also wanted nachos,
which is usually true.

141
00:09:39.339 --> 00:09:43.606
&gt;&gt; Brian Holt: If
friendsAtYourParty is &gt;= 4,

142
00:09:43.606 --> 00:09:48.450
it is Perfect amount to play Mario Kart.

143
00:09:51.720 --> 00:09:56.059
&gt;&gt; Brian Holt: Let's see,
I probably meant to do this, &lt;=, oops.

144
00:10:00.633 --> 00:10:07.034
&gt;&gt; Brian Holt: So if you have &lt;= 4, I get
these mixed up all the time by the way.

145
00:10:07.034 --> 00:10:11.488
[LAUGH] So if this was 3, then I will say,

146
00:10:11.488 --> 00:10:15.942
Perfect amount to play some Mario Kart.

147
00:10:15.942 --> 00:10:21.644
And then if I change this to be 10, then
it says, Wooooo turn on the dance music!

148
00:10:26.588 --> 00:10:29.901
&gt;&gt; Brian Holt: But I kinda want it to be
0 right now, cuz I want nachos to myself.

149
00:10:33.320 --> 00:10:34.911
&gt;&gt; Brian Holt: Any questions about that?

150
00:10:34.911 --> 00:10:37.819
So you use else if to
ask another question.

151
00:10:41.681 --> 00:10:45.869
&gt;&gt; Brian Holt: So it's gonna say,
if this part's true do this,

152
00:10:45.869 --> 00:10:50.370
if this part is true then do this,
otherwise do this.

153
00:10:50.370 --> 00:10:52.492
That's kind of the logical
progression here,

154
00:10:55.015 --> 00:10:55.584
&gt;&gt; Brian Holt: Makes sense?

155
00:10:57.546 --> 00:10:58.259
&gt;&gt; Brian Holt: Please.

156
00:10:58.259 --> 00:11:01.781
&gt;&gt; Speaker 2: I know you said
that it's not necessary, but

157
00:11:01.781 --> 00:11:05.590
is it standard to use
semicolons in JavaScript?

158
00:11:05.590 --> 00:11:10.692
&gt;&gt; Brian Holt: I would say, on the whole,
most people write their semicolons.

159
00:11:10.692 --> 00:11:14.850
If you wanna know what actually
in practice happens for me,

160
00:11:14.850 --> 00:11:20.769
if I have this code over here, I actually
don't usually hit the semicolons myself.

161
00:11:20.769 --> 00:11:24.256
So I'm gonna hit Cmd+Save right now,
and watch the semicolons.

162
00:11:26.359 --> 00:11:28.510
&gt;&gt; Brian Holt: My editor
actually puts them in for me.

163
00:11:30.714 --> 00:11:34.031
&gt;&gt; Brian Holt: And that way I don't have
to write them, [LAUGH] cuz I'm all about

164
00:11:34.031 --> 00:11:38.654
saving that keystroke economy, which is a
term that people use, and it's ridiculous.

165
00:11:38.654 --> 00:11:44.013
[LAUGH] But they get put in there so
everyone's happy, I think.

166
00:11:44.013 --> 00:11:46.999
Or no one's happy, and I also don't care.

167
00:11:50.117 --> 00:11:52.059
&gt;&gt; Brian Holt: In the end,
it doesn't particularly matter.

168
00:11:56.072 --> 00:11:57.498
&gt;&gt; Brian Holt: I guess
what I should say is,

169
00:11:57.498 --> 00:12:01.137
there's some very strong held opinions
by some people on this subject.

170
00:12:01.137 --> 00:12:05.233
And actually one of the workshops
that I teach for Frontend Masters,

171
00:12:05.233 --> 00:12:08.351
it was the first version
of Complete Intro to React.

172
00:12:08.351 --> 00:12:11.081
I did not use semicolons at
all during that workshop.

173
00:12:11.081 --> 00:12:13.953
So even myself,
I've kinda gone back and forth.

174
00:12:13.953 --> 00:12:17.723
I don't like writing semicolon,
that's the fundamental premise.

175
00:12:17.723 --> 00:12:20.668
But when they came out with the thing
called Prettier, that just does it for

176
00:12:20.668 --> 00:12:21.647
you, I was like, cool,

177
00:12:21.647 --> 00:12:24.289
I never have to think about this again or
have this argument again.

178
00:12:25.938 --> 00:12:28.392
&gt;&gt; Brian Holt: So I don't care, yeah.

179
00:12:28.392 --> 00:12:30.234
&gt;&gt; Speaker 2: We have
a question from the chatroom.

180
00:12:30.234 --> 00:12:35.215
If we use three equal signs,
why don't we use less

181
00:12:35.215 --> 00:12:39.256
than equals to and then two equal signs?

182
00:12:44.174 --> 00:12:46.638
&gt;&gt; Brian Holt: It doesn't work,
I think is the answer.

183
00:12:46.638 --> 00:12:52.096
That's a good question, I think
the answer to that question would be,

184
00:12:59.609 --> 00:13:00.357
&gt;&gt; Brian Holt: I'm gonna say, first,

185
00:13:00.357 --> 00:13:01.577
I don't know, I don't actually know.

186
00:13:01.577 --> 00:13:05.139
If I were to speculate,
it's because this has to be a number.

187
00:13:05.139 --> 00:13:08.607
The only way that this works is
it's called a comparator, so

188
00:13:08.607 --> 00:13:10.992
this is comparing one thing to the other.

189
00:13:10.992 --> 00:13:14.000
It has to be a number, so
no matter what it's going to be coerced,

190
00:13:14.000 --> 00:13:16.790
which is what you call it when you
change a string to a number or

191
00:13:16.790 --> 00:13:20.264
a number to a string, when you're
changing types it's called coercion.

192
00:13:20.264 --> 00:13:22.761
So it has to be coerced to
a number no matter what.

193
00:13:22.761 --> 00:13:27.421
So if this is not a number, it's got to
be a number, so it's gonna try anyway.

194
00:13:27.421 --> 00:13:28.639
That would be my guess.

195
00:13:28.639 --> 00:13:31.986
The person to ask would
probably be Brendan Eich,

196
00:13:31.986 --> 00:13:34.704
the person that wrote JavaScript, so.

197
00:13:37.439 --> 00:13:38.422
&gt;&gt; Brian Holt: Good question, though.

198
00:13:44.964 --> 00:13:46.673
&gt;&gt; Brian Holt: Cool,
now I have a lot of nachos to myself.

