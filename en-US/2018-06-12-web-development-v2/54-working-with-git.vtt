WEBVTT

1
00:00:00.000 --> 00:00:02.911
&gt;&gt; Brian Holt: We're gonna
work with Git just a tiny bit.

2
00:00:02.911 --> 00:00:06.999
So if you have a bunch of people
all working on one project,

3
00:00:06.999 --> 00:00:09.425
you need some way to collaborate.

4
00:00:09.425 --> 00:00:12.302
And it's not like Google Docs where
we just all open the same file and

5
00:00:12.302 --> 00:00:13.120
start editing it.

6
00:00:13.120 --> 00:00:15.710
That would be absolute pandemonium.

7
00:00:15.710 --> 00:00:21.259
So what we do is we have this thing called
a source control management system.

8
00:00:21.259 --> 00:00:25.988
There's quite a few of them, there's CVS,

9
00:00:25.988 --> 00:00:31.969
there's Mercurial,
there's Git, there's Bazaar.

10
00:00:31.969 --> 00:00:33.857
And there's other ones that
I'm not thinking of, nor

11
00:00:33.857 --> 00:00:35.360
do I particularly care about.

12
00:00:35.360 --> 00:00:38.180
Git is the one that everyone uses, and
particularly in the friend world I don't

13
00:00:38.180 --> 00:00:40.440
know anyone that uses
anything other than Git.

14
00:00:40.440 --> 00:00:43.760
Except maybe Facebook, Facebook for
whatever reason decided to use Mercurial.

15
00:00:45.270 --> 00:00:50.600
Git is written by the same guy
that wrote Linux, Linus Torvalds.

16
00:00:50.600 --> 00:00:54.839
He said he named it after himself, because
git is a British slang word for an idiot.

17
00:00:57.190 --> 00:00:57.960
His words, not mine.

18
00:00:59.410 --> 00:01:01.740
So what we're gonna do is I have this,

19
00:01:01.740 --> 00:01:03.950
let's go back into one
of our other projects.

20
00:01:03.950 --> 00:01:10.490
Like we were doing the popdemo one,
this is actually, let's do the calculator.

21
00:01:10.490 --> 00:01:13.950
So cd calculator,
I have three files in here and

22
00:01:13.950 --> 00:01:19.760
let's say I wanna put this up on GitHub so
that I can share with other people.

23
00:01:19.760 --> 00:01:23.030
GitHub is where you can share
a code with other people, that's,

24
00:01:23.030 --> 00:01:25.410
it's the hub of git follows, right?

25
00:01:25.410 --> 00:01:28.610
Fist thing I'm gonna just like I
did MPM I'm gonna say git init.

26
00:01:30.100 --> 00:01:33.130
So, now I begin an empty directory,
you can ignore these three things.

27
00:01:33.130 --> 00:01:37.980
This is, my computer freaks
out when there's no commits.

28
00:01:37.980 --> 00:01:39.340
Yours won't, just mine.

29
00:01:41.020 --> 00:01:44.012
So what I'm gonna do.
&gt;&gt; Brian Holt: git init,

30
00:01:44.012 --> 00:01:46.380
like it doesn't really do much else.

31
00:01:46.380 --> 00:01:51.831
If I hit ls -lsa, you can see here that
there is a new git directory here.

32
00:01:51.831 --> 00:01:53.549
This is how Git keeps track of everything.

33
00:01:54.960 --> 00:02:00.028
So don't delete your .git folder, you
will delete all of your source control.

34
00:02:00.028 --> 00:02:07.839
So here I'm gonna say git add.
&gt;&gt; Brian Holt: Is this I what do next?

35
00:02:07.839 --> 00:02:10.610
I gotta make sure I stay on track,
git add.

36
00:02:11.820 --> 00:02:15.620
So there's kinda two stages to
something being add to git,

37
00:02:15.620 --> 00:02:18.211
there's staging and there is a commit.

38
00:02:18.211 --> 00:02:21.940
Okay, so when you add things to stage,
you stage a bunch of files and

39
00:02:21.940 --> 00:02:23.910
then you create one atomic commit.

40
00:02:23.910 --> 00:02:30.060
Which is like one update, one patch
that you send over to your server.

41
00:02:30.060 --> 00:02:32.173
So what I'm gonna do,
is I'm gonna add everything, but

42
00:02:32.173 --> 00:02:33.459
you can add things individually.

43
00:02:33.459 --> 00:02:38.392
I could just add calculator.css
individually and calculator.js but

44
00:02:38.392 --> 00:02:40.320
that's burdensome.

45
00:02:40.320 --> 00:02:43.530
So you can either say, git add.

46
00:02:43.530 --> 00:02:46.780
So now I have things and
if I hit git status.

47
00:02:46.780 --> 00:02:49.698
Sorry, again ignore all
this error messages.

48
00:02:49.698 --> 00:02:54.485
git status,
&gt;&gt; Brian Holt: You can see it

49
00:02:54.485 --> 00:02:58.440
here that I have these three files that
are being, they're ready to be staged.

50
00:02:58.440 --> 00:03:03.647
So changes to be committed.
&gt;&gt; Brian Holt: Okay,

51
00:03:03.647 --> 00:03:08.647
so now if I say, git commit -m "initial

52
00:03:08.647 --> 00:03:12.940
commit for the calculator".

53
00:03:12.940 --> 00:03:16.192
You want to make this some sort of useful
error message to your future self.

54
00:03:16.192 --> 00:03:20.071
That's like, I added this feature or
I fixed this bug or something

55
00:03:20.071 --> 00:03:25.140
that you can look at in the future and
say okay, that's what this commit did.

56
00:03:25.140 --> 00:03:26.975
Okay, so I'm gonna say,
this is the original commit.

57
00:03:26.975 --> 00:03:29.782
That's usually enough for
the first commit.

58
00:03:29.782 --> 00:03:33.130
And then now, my error messages stopped,
which is nice.

59
00:03:33.130 --> 00:03:35.430
And now I have commit, right?

60
00:03:35.430 --> 00:03:38.880
So now I have one,
I've started tracking my project.

61
00:03:40.540 --> 00:03:45.030
So if I hit git status now,
nothing has changed since the last commit.

62
00:03:46.460 --> 00:03:51.210
So now if I made another change to it,
let's just code.

63
00:03:55.663 --> 00:03:57.442
&gt;&gt; Brian Holt: And I come in here and

64
00:03:57.442 --> 00:04:05.222
I change maybe like, maybe I change the
title of this to be Calculatorv2.0, right?

65
00:04:05.222 --> 00:04:09.249
And I save that, and
I hit git status, it's gonna say,

66
00:04:09.249 --> 00:04:13.205
hey index.html has been
changed since I last seen it.

67
00:04:13.205 --> 00:04:16.680
So this is a new change that if
you wanna commit it, you can.

68
00:04:19.530 --> 00:04:22.368
And actually I can say git diff,
please show me what has changed.

69
00:04:22.368 --> 00:04:29.520
And it's gonna say, you took this out and
you added this, which is cool, right?

70
00:04:31.180 --> 00:04:35.550
So now I wanna add that, so
I'm gonna say git add index.html, and

71
00:04:35.550 --> 00:04:40.160
if I hit git status again I can
that it's ready to be committed.

72
00:04:40.160 --> 00:04:45.961
So I'm gonna say git commit -m "updated

73
00:04:45.961 --> 00:04:51.120
the title of index.html", okay?

74
00:04:51.120 --> 00:04:54.430
And so now I have nothing to commit.

75
00:04:54.430 --> 00:04:56.490
And I can look at my git log and

76
00:04:56.490 --> 00:05:02.380
see the last commit was updating
the title of index.html.

77
00:05:02.380 --> 00:05:05.160
It was at this time by this programmer.

78
00:05:05.160 --> 00:05:06.678
And you can see down here
was the initial commit.

79
00:05:06.678 --> 00:05:08.900
So you can see all
the past commits as well.

80
00:05:10.612 --> 00:05:12.181
&gt;&gt; Brian Holt: Make sense?

81
00:05:15.982 --> 00:05:17.483
&gt;&gt; Brian Holt: If you want more commit,

82
00:05:17.483 --> 00:05:21.700
there's a lot of important parts
of git that I did not talk about.

83
00:05:21.700 --> 00:05:25.581
I did not talk about pulling, or cloning,
or merging, or rebasing, or stashing, or

84
00:05:25.581 --> 00:05:26.658
checkout, or branch.

85
00:05:26.658 --> 00:05:28.880
And these are all commands that
you probably need to know.

86
00:05:31.010 --> 00:05:35.262
My coworker also works at Microsoft with
me, and she also worked with me at Reddit,

87
00:05:35.262 --> 00:05:36.555
and she's super smart.

88
00:05:36.555 --> 00:05:40.340
Nina Zakharenko, teaches a course
on Git that is worth your time.

89
00:05:42.190 --> 00:05:45.697
And Git is definitely a tool
that is not very fun to use, but

90
00:05:45.697 --> 00:05:48.427
is very much worth
investing your time into.

91
00:05:48.427 --> 00:05:53.043
Because If you mess up Git,
you delete everything, right?

92
00:05:53.043 --> 00:05:57.200
You lose changes and things like that,
and it's quite disastrous.

93
00:05:57.200 --> 00:06:01.760
But the cool thing about Git,
it's really hard to permanently screw up.

94
00:06:01.760 --> 00:06:05.930
So if you screw something up, I guarantee
you can get back to where you were,

95
00:06:05.930 --> 00:06:07.840
if you know the right Git commands.

96
00:06:07.840 --> 00:06:13.047
So it's worth your time to figure out,
like how do I un-shoot myself?

97
00:06:13.047 --> 00:06:19.237
There's a site called ohshitgit.
&gt;&gt; Brian Holt: So,

98
00:06:19.237 --> 00:06:25.320
it goes through a bunch of [LAUGH],
fuck this noise, I give up.

99
00:06:25.320 --> 00:06:26.620
That's hilarious.

100
00:06:26.620 --> 00:06:27.927
It's a bunch of shit things.

101
00:06:27.927 --> 00:06:32.004
Things like, shit I did this and
it tells you how to get out of these,

102
00:06:32.004 --> 00:06:36.421
so.
&gt;&gt; Brian Holt: Really easy to screw up

103
00:06:36.421 --> 00:06:37.750
Git, just so you know.

104
00:06:39.670 --> 00:06:42.315
And you also would definitely not be
the first and you will not be the last.

105
00:06:42.315 --> 00:06:43.002
[LAUGH]

