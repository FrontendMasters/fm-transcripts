WEBVTT

1
00:00:00.160 --> 00:00:03.100
&gt;&gt; Brian Holt: Let's go
to talk about the DOM.

2
00:00:06.154 --> 00:00:08.906
&gt;&gt; Brian Holt: And I promise you,

3
00:00:08.906 --> 00:00:16.082
after the DOM I will give you all a break.
&gt;&gt; Brian Holt: [LAUGH] The DOM.

4
00:00:16.082 --> 00:00:18.880
The DOM stands for document object model.

5
00:00:18.880 --> 00:00:21.870
I think, doesn't matter,
everyone calls it the DOM,

6
00:00:21.870 --> 00:00:24.590
no one will reference what
it actually stands for.

7
00:00:24.590 --> 00:00:29.370
The DOM is the way that JavaScript
interacts with HTML and CSS.

8
00:00:29.370 --> 00:00:32.730
It's kind of like
the bridge between the two.

9
00:00:33.860 --> 00:00:38.404
So that window thing that we were talking
about before, the global context, that is

10
00:00:38.404 --> 00:00:42.372
more or less what the DOM how you're
going to be interacting with the DOM,

11
00:00:42.372 --> 00:00:45.536
it's own Window.
&gt;&gt; Brian Holt: In fact,

12
00:00:45.536 --> 00:00:48.965
console.log is actually technically
a part of this document object

13
00:00:48.965 --> 00:00:53.886
model.
&gt;&gt; Brian Holt: So

14
00:00:57.078 --> 00:00:58.782
&gt;&gt; Brian Holt: Let's just kinda take

15
00:00:58.782 --> 00:01:04.440
a side step here for just a second to
understand how a browser kind of works.

16
00:01:04.440 --> 00:01:09.344
And I think that's kinda helpful to
illustrate why the need for the DOM and

17
00:01:09.344 --> 00:01:10.714
why we have the DOM.

18
00:01:10.714 --> 00:01:13.810
So I'm gonna talk about
just the normal process of

19
00:01:13.810 --> 00:01:16.910
going from writing code to actually
interacting with your browser.

20
00:01:16.910 --> 00:01:21.150
So you write code in your editor,
like VSCode for example, or Sublime, or

21
00:01:21.150 --> 00:01:22.470
whatever you're writing it in.

22
00:01:23.630 --> 00:01:27.530
You then, at some point,
put your code out onto a server.

23
00:01:27.530 --> 00:01:31.820
This server could be something like
Microsoft Azure, it could be AWS, which is

24
00:01:31.820 --> 00:01:35.840
Amazon Web Services, or it could be
something like a shared hosting provider,

25
00:01:35.840 --> 00:01:40.290
like Bluehost, or 1and1, or HostGator,
or GoDaddy, or something like that.

26
00:01:40.290 --> 00:01:43.870
It could be like a VPS, like DigitalOcean,

27
00:01:43.870 --> 00:01:46.780
which is a virtual private server,
I think, yeah.

28
00:01:46.780 --> 00:01:49.370
It could be any number of these.

29
00:01:49.370 --> 00:01:53.494
These are all just servers out there on
the Internet that you can put stuff on and

30
00:01:53.494 --> 00:01:59.250
then people can ask for things from.
&gt;&gt; Brian Holt: So I put it out.

31
00:01:59.250 --> 00:02:01.510
Let's say it's on my Cloud provider.

32
00:02:01.510 --> 00:02:04.200
So it's out on Microsoft Azure.

33
00:02:04.200 --> 00:02:09.990
And someone types in
www.bryanholdsamazingwebsite.party,

34
00:02:09.990 --> 00:02:10.800
I don't know.

35
00:02:10.800 --> 00:02:13.690
Don't go there,
it's not a real website, pretty sure.

36
00:02:13.690 --> 00:02:16.995
Someone's going to buy it now,
it's gonna be porn.

37
00:02:16.995 --> 00:02:17.880
[LAUGH] Don't go there.

38
00:02:17.880 --> 00:02:19.080
Don't go to that website.

39
00:02:19.080 --> 00:02:23.997
But if someone types in www.example.com,
I know that ones okay.

40
00:02:23.997 --> 00:02:27.850
[LAUGH] It then get routed
through a bunch of magic,

41
00:02:27.850 --> 00:02:30.170
which I'm not going to
talk about right now.

42
00:02:30.170 --> 00:02:33.130
But it lands on my server, right?

43
00:02:33.130 --> 00:02:35.340
My server receives this request,

44
00:02:35.340 --> 00:02:37.880
it then serves back to you
the code that I wrote, right?

45
00:02:37.880 --> 00:02:40.805
It serves back to the index.html
that I wrote back to

46
00:02:40.805 --> 00:02:43.405
you.
&gt;&gt; Brian Holt: So

47
00:02:43.405 --> 00:02:47.300
the server sends a copy of the HTML,
the browser then reads the HTML, right?

48
00:02:47.300 --> 00:02:51.090
So it has this engine inside
of it that reads the HTML.

49
00:02:52.360 --> 00:02:55.140
And it sees in there that I
have a script tag on there,

50
00:02:55.140 --> 00:02:59.320
and says like you have my script.js, cool.

51
00:02:59.320 --> 00:03:01.390
It then makes another
request back to the server.

52
00:03:01.390 --> 00:03:03.910
The server says, cool,
you're asking for my script.js.

53
00:03:03.910 --> 00:03:04.735
It gives you back that.

54
00:03:04.735 --> 00:03:08.637
It then starts reading that JavaScript and
executing that JavaScript.

55
00:03:08.637 --> 00:03:13.604
This is the exact same
process that happens with

56
00:03:13.604 --> 00:03:16.588
CSS as well, okay?
&gt;&gt; Brian Holt: So

57
00:03:16.588 --> 00:03:20.100
that's the way that this
ends up on your computer.

58
00:03:20.100 --> 00:03:21.380
Yeah?
&gt;&gt; Student: So,

59
00:03:21.380 --> 00:03:23.770
I don't personally have a server at home.

60
00:03:23.770 --> 00:03:27.850
Would that, your server, is that gonna be

61
00:03:27.850 --> 00:03:32.490
what we're [INAUDIBLE] host your website?
&gt;&gt; Brian Holt: Yep, yep, exactly.

62
00:03:32.490 --> 00:03:36.506
So you would put it on something
like Azure or AWS or Bluehost or

63
00:03:36.506 --> 00:03:41.356
something like that.
&gt;&gt; Brian Holt: So

64
00:03:41.356 --> 00:03:46.200
we've been able to open it on
our local computer, right?

65
00:03:46.200 --> 00:03:47.780
So I've been able to use File:///.

66
00:03:47.780 --> 00:03:53.830
That's your computer acting as if
it was a server to itself, right?

67
00:03:53.830 --> 00:03:57.461
So it's pretending that it's
a server out there in the Cloud.

68
00:03:57.461 --> 00:03:59.956
But in reality,
it's making a request to itself, and

69
00:03:59.956 --> 00:04:02.790
it's then it's serving its own
request back to the browser.

70
00:04:04.240 --> 00:04:08.544
That's the way that that's working.
&gt;&gt; Brian Holt: So that kinda means that

71
00:04:08.544 --> 00:04:13.650
JavaScript is interacting inside
some sort of HTML environment.

72
00:04:13.650 --> 00:04:22.670
So if I'm gonna bring this up again.
&gt;&gt; Brian Holt: clear(), there we go.

73
00:04:22.670 --> 00:04:27.347
So I can start looking at something
on here called window, and window has

74
00:04:27.347 --> 00:04:32.410
something on it called document.
&gt;&gt; Brian Holt: Document

75
00:04:32.410 --> 00:04:35.049
refers to the HTML page that I'm on.

76
00:04:35.049 --> 00:04:40.540
And I can start manipulating this
via a number of different APIs.

77
00:04:41.590 --> 00:04:42.740
So that's what the DOM is.

78
00:04:42.740 --> 00:04:46.186
The DOM is this ability to
interact with your HTML

79
00:04:46.186 --> 00:04:49.525
page.
&gt;&gt; Brian Holt: So

80
00:04:49.525 --> 00:04:53.026
just like I've been telling you
not to use style like this,

81
00:04:53.026 --> 00:04:56.230
I'm also going to start
using script like this.

82
00:04:56.230 --> 00:04:59.410
But typically, you do not wanna have your
HTML and your scripts shoved together.

83
00:04:59.410 --> 00:05:02.960
You wanna have a separate file
that you'll load differently.

84
00:05:02.960 --> 00:05:06.478
But for illustrations purposes that I
want you to be able to see how we're

85
00:05:06.478 --> 00:05:09.305
interacting with our JavaScript and
our HTML all at once,

86
00:05:09.305 --> 00:05:11.336
I'm gonna put them inside of each other.

87
00:05:11.336 --> 00:05:16.562
So technically, you can put JavaScript
inside of script tags like this,

88
00:05:16.562 --> 00:05:18.100
just don't, okay?

89
00:05:18.100 --> 00:05:19.270
But for the purpose of this class, so

90
00:05:19.270 --> 00:05:23.010
you can see that I have a red
square right here, right?

91
00:05:23.010 --> 00:05:25.450
So I have CSS here that
makes this square red.

92
00:05:25.450 --> 00:05:26.890
Background color crimson.

93
00:05:26.890 --> 00:05:28.330
It's a shade of red.

94
00:05:28.330 --> 00:05:33.580
And then here, using script,
I'm coming in and saying const redSquare =

95
00:05:33.580 --> 00:05:38.797
document.querySelector('.red-square').

96
00:05:38.797 --> 00:05:40.900
Okay?
So that's what querySelector does.

97
00:05:40.900 --> 00:05:42.680
You give it a CSS selector.

98
00:05:44.280 --> 00:05:45.990
So .red-square.

99
00:05:45.990 --> 00:05:47.220
That's a class, right?

100
00:05:47.220 --> 00:05:48.090
If you remember from your CSS.

101
00:05:48.090 --> 00:05:50.450
It looks exactly like this one.

102
00:05:50.450 --> 00:05:52.670
It's going to go select
this one on the page.

103
00:05:53.720 --> 00:05:57.960
So now, red square is this div, okay?

104
00:05:57.960 --> 00:05:59.160
Do we follow so far?

105
00:06:00.230 --> 00:06:01.520
That's what query selector does.

106
00:06:01.520 --> 00:06:04.670
It gets the first instance
of that on the page.

107
00:06:04.670 --> 00:06:07.683
Most of these methods that you're gonna be
interacting with the DOM with are on this

108
00:06:07.683 --> 00:06:08.780
document object.

109
00:06:08.780 --> 00:06:12.250
So get used to interacting the document.

110
00:06:12.250 --> 00:06:13.720
So we use querySelector.

111
00:06:13.720 --> 00:06:17.450
You give it a CSS selector,
and it gives you back

112
00:06:17.450 --> 00:06:20.480
the first instance of that on the page,
the first one that it finds.

113
00:06:20.480 --> 00:06:23.900
There is also querySelector all.

114
00:06:23.900 --> 00:06:30.089
So just add all here
&gt;&gt; Brian Holt: Wonder if I did that,

115
00:06:30.089 --> 00:06:37.620
what would it do?
&gt;&gt; Brian Holt: RedSquare.

116
00:06:39.865 --> 00:06:42.180
&gt;&gt; Brian Holt: Nope, still doesn't care.

117
00:06:42.180 --> 00:06:43.050
Cool, anyways,

118
00:06:43.050 --> 00:06:46.140
querySelector All will select every
one of those on the page, right?

119
00:06:46.140 --> 00:06:49.080
And it will give you back an array
of all those on the page.

120
00:06:49.080 --> 00:06:50.121
So if you wanna get all of them,

121
00:06:50.121 --> 00:06:55.967
you'll use querySelector All.
&gt;&gt; Brian Holt: So

122
00:06:55.967 --> 00:06:59.830
from here,
red-square represents this HTML element.

123
00:06:59.830 --> 00:07:01.800
So you're storing that in the variable.

124
00:07:01.800 --> 00:07:03.370
It's an object, as you might imagine.

125
00:07:04.730 --> 00:07:07.348
Here, we set background color.
&gt;&gt; Brian Holt: So

126
00:07:07.348 --> 00:07:12.264
you might be a little mystified that
this is background dash color in CSS,

127
00:07:12.264 --> 00:07:16.165
but in JavaScript it's background color,
camel cased.

128
00:07:17.540 --> 00:07:19.290
They did that on purpose.

129
00:07:19.290 --> 00:07:22.110
So anything that you use dashes here for
in CSS,

130
00:07:22.110 --> 00:07:25.300
you'll just change that to
camel case in your head.

131
00:07:25.300 --> 00:07:29.905
So if I wanted to do padding left
I will do paddingLeft equals that,

132
00:07:29.905 --> 00:07:34.214
right?
&gt;&gt; Brian Holt: So

133
00:07:34.214 --> 00:07:37.389
yeah, you change that to camel
case when you're interacting with

134
00:07:37.389 --> 00:07:41.444
CSS.
&gt;&gt; Brian Holt: And then,

135
00:07:41.444 --> 00:07:43.220
we we assign it to whatever value we want.

136
00:07:43.220 --> 00:07:45.909
So if we were doing paddingLeft,
you can set it to 50 pixels, and

137
00:07:45.909 --> 00:07:52.386
that's how you would do that.
&gt;&gt; Brian Holt: Questions

138
00:07:52.386 --> 00:07:58.568
about that?
&gt;&gt; Brian Holt: There's

139
00:07:58.568 --> 00:08:01.314
tons more you can do with
just changing its style.

140
00:08:01.314 --> 00:08:04.258
You can change its inner HTML,
you can change its inner text,

141
00:08:04.258 --> 00:08:06.749
you can find out where it's
positioned on the page,

142
00:08:06.749 --> 00:08:09.651
you can find out if it's visible
to the user right now or not.

143
00:08:09.651 --> 00:08:12.740
There's a bunch of,
you can find out the scroll position.

144
00:08:12.740 --> 00:08:15.996
We saw what scroll position looks like.
&gt;&gt; Brian Holt: Tons and

145
00:08:15.996 --> 00:08:23.751
tons of stuff that you're able to do.
&gt;&gt; Brian Holt: So

146
00:08:23.751 --> 00:08:27.230
what happens if I wanted
to change more than one?

147
00:08:28.840 --> 00:08:33.550
So lets say I have this ul right here,

148
00:08:33.550 --> 00:08:39.960
full of lis, and I wanted to change
some of these and not all of these.

149
00:08:39.960 --> 00:08:44.765
So I gave the ones that I wanted
to changed this js-target class.

150
00:08:44.765 --> 00:08:46.470
And these ones I didn't
give a class at all.

151
00:08:47.530 --> 00:08:52.912
So this ones Unchanged, Unchanged
&gt;&gt; Brian Holt: And

152
00:08:52.912 --> 00:09:01.710
that one broke.
&gt;&gt; Brian Holt: Okay, there we go.

153
00:09:01.710 --> 00:09:03.130
Unchanged, unchanged, unchanged, right?

154
00:09:03.130 --> 00:09:04.940
And this one's won't change.

155
00:09:04.940 --> 00:09:05.780
So here, I said,

156
00:09:05.780 --> 00:09:09.157
now you say querySelectorAll,
which is the one we're talking about.

157
00:09:09.157 --> 00:09:12.885
It finds everything that's a js-target,

158
00:09:12.885 --> 00:09:18.760
which gives me back an array of
&gt;&gt; Brian Holt: Elements, right?

159
00:09:18.760 --> 00:09:20.340
Of these various lis.

160
00:09:21.710 --> 00:09:23.660
Then, I use a for loop.

161
00:09:23.660 --> 00:09:24.580
Go over these.

162
00:09:25.590 --> 00:09:27.290
And this is the current element.

163
00:09:27.290 --> 00:09:28.540
And then,

164
00:09:28.540 --> 00:09:33.610
I say currentElement.innerText, which is
how you modify the text of something.

165
00:09:33.610 --> 00:09:34.940
And I set it to be something else.

166
00:09:34.940 --> 00:09:36.050
Modified by JavaScript.

167
00:09:36.050 --> 00:09:38.960
So you can see here,
none of these are unchanged.

168
00:09:38.960 --> 00:09:41.230
It's either Modified by JavaScript or
Won't Change.

