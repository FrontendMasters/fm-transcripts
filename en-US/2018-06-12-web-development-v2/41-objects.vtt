WEBVTT

1
00:00:00.330 --> 00:00:01.720
&gt;&gt; Brian Holt: Objects and Arrays.

2
00:00:03.520 --> 00:00:08.520
So so far we've been talking about numbers
and strings and booleans and functions.

3
00:00:08.520 --> 00:00:12.091
So those are the kind of four
things that we've gone over.

4
00:00:12.091 --> 00:00:15.790
I would say these ones are also super,
super important.

5
00:00:15.790 --> 00:00:20.430
Objects and arrays, but what objects and
arrays are, is they're kind of collections

6
00:00:20.430 --> 00:00:22.510
of the other things that
we've been talking about.

7
00:00:22.510 --> 00:00:26.760
They're collections of numbers and

8
00:00:26.760 --> 00:00:31.680
strings and booleans and other objects and
other arrays and other functions, right?

9
00:00:31.680 --> 00:00:35.680
They're kinda like these masses that
you can conglomerate together and

10
00:00:35.680 --> 00:00:37.169
we will talk about that as we go through.

11
00:00:38.950 --> 00:00:41.940
So I have this const person equals and

12
00:00:41.940 --> 00:00:45.830
then curly brace this
curly brace means object.

13
00:00:47.510 --> 00:00:52.780
Okay, so it goes from this curly
brace to that curly brace down there,

14
00:00:52.780 --> 00:00:57.260
and everything in between is going
to be part of this object, okay?

15
00:00:57.260 --> 00:01:01.390
And then objects are keys and values.

16
00:01:01.390 --> 00:01:04.830
So the first part here, name,
this is the name of the key and

17
00:01:04.830 --> 00:01:09.020
the value that's associated
with this key is Brian Holt.

18
00:01:09.020 --> 00:01:15.000
So if I ask for a person dot name,
I'm asking for Brian Holt, right?

19
00:01:15.000 --> 00:01:22.530
Or if I have person dot state, then I get
Washington, or favorite food taco emoji.

20
00:01:23.840 --> 00:01:26.230
I think I was writing this the same
time I was doing the nachos, as well.

21
00:01:26.230 --> 00:01:29.526
So I was in Australia, and
I really wanted Mexican food, and

22
00:01:29.526 --> 00:01:31.023
there was none to be found.

23
00:01:31.023 --> 00:01:35.602
[LAUGH]
&gt;&gt; Brian Holt: So

24
00:01:35.602 --> 00:01:38.110
console.log.person, you get
the whole object, right?

25
00:01:38.110 --> 00:01:41.570
So you can see here that it's
logging out the entire object.

26
00:01:41.570 --> 00:01:44.143
If I do console.logperson.name,

27
00:01:44.143 --> 00:01:48.470
then I get just as you might imagine,
Brian Holt, right?

28
00:01:48.470 --> 00:01:53.930
Or if I do person.favoritefood,
you get taco, right?

29
00:01:53.930 --> 00:01:55.190
So that's what that dot means.

30
00:01:55.190 --> 00:01:58.970
It's like, inside of the person object,
I want this key.

31
00:01:58.970 --> 00:01:59.629
That make sense?

32
00:02:01.970 --> 00:02:07.450
You can also do it this way, with a square
brackets and then a string provided here.

33
00:02:07.450 --> 00:02:08.450
I give this to you for

34
00:02:08.450 --> 00:02:12.400
informational purposes, not because you
necessarily are going to do it that way.

35
00:02:12.400 --> 00:02:16.420
But just so you know, if you see that,
that's what it means, right.

36
00:02:17.820 --> 00:02:18.950
It does work.

37
00:02:18.950 --> 00:02:20.390
This is preferred.

38
00:02:20.390 --> 00:02:21.710
So let's just put this as name.

39
00:02:23.980 --> 00:02:30.186
The reason why you would occasionally
use something like that, if I did

40
00:02:30.186 --> 00:02:35.769
something like const propName = name,
&gt;&gt; Brian Holt: And

41
00:02:35.769 --> 00:02:38.730
then here I could put propName.

42
00:02:42.651 --> 00:02:44.980
&gt;&gt; Brian Holt: Right, so propName is name.

43
00:02:44.980 --> 00:02:48.020
And so here, I'm actually asking for
a name, right.

44
00:02:49.740 --> 00:02:51.226
Or this could be state.

45
00:02:54.609 --> 00:02:56.430
&gt;&gt; Brian Holt: Make sense?

46
00:02:58.080 --> 00:02:58.580
Cool.

47
00:03:02.271 --> 00:03:04.460
&gt;&gt; Brian Holt: So those are objects.

48
00:03:06.010 --> 00:03:09.160
Take this even further,
you can have objects within objects.

49
00:03:09.160 --> 00:03:15.597
So if I, yeah, I think I do it down here.

50
00:03:15.597 --> 00:03:18.160
&gt;&gt; Brian Holt: We'll just do it right now
and I think we'll eventually get there.

51
00:03:18.160 --> 00:03:23.060
Whether the case, I could say,
I have to be up here.

52
00:03:25.337 --> 00:03:27.976
Make sure you have commas
between each particular thing.

53
00:03:27.976 --> 00:03:33.770
Those are required, it's not like semi
colons, these actually are required.

54
00:03:35.400 --> 00:03:40.480
So if I had address, then I could
have another object within this.

55
00:03:42.535 --> 00:03:49.179
&gt;&gt; Brian Holt: And
we'll have street is, oops,

56
00:03:50.696 --> 00:03:55.979
&gt;&gt; Brian Holt: Street 1234 Place.

57
00:03:57.610 --> 00:03:58.687
Come on, geez.

58
00:04:07.180 --> 00:04:12.460
&gt;&gt; Brian Holt: And
we'll have apartment 123, okay.

59
00:04:14.090 --> 00:04:20.095
So now as you might guess, the way that
I get to street, is I will console

60
00:04:20.095 --> 00:04:25.664
out person.address,street, right?

61
00:04:25.664 --> 00:04:28.783
So you can have multiple ones
of those chain together.

62
00:04:32.283 --> 00:04:33.073
&gt;&gt; Brian Holt: Make sense?

63
00:04:35.697 --> 00:04:36.404
&gt;&gt; Brian Holt: Okay.

64
00:04:39.608 --> 00:04:42.970
&gt;&gt; Brian Holt: So
why would you want to use objects?

65
00:04:42.970 --> 00:04:45.705
In reality, you could just have these all
separated out into their own variables.

66
00:04:45.705 --> 00:04:49.601
While in conjunction with functions,
which rhymes and it's really great and

67
00:04:49.601 --> 00:04:51.051
I did not do that on purpose.

68
00:04:51.051 --> 00:04:54.700
[LAUGH] They end up being
really powerful things right?

69
00:04:54.700 --> 00:04:59.160
So functions suggest music and
you pass in a person, right.

70
00:04:59.160 --> 00:05:02.110
So I suggest music to
person one who is myself.

71
00:05:03.400 --> 00:05:06.280
And so
if you age range is 25 to 35 then I say,

72
00:05:06.280 --> 00:05:09.602
we think you're like deaf
punk you crazy millennial.

73
00:05:09.602 --> 00:05:13.524
[LAUGH] Otherwise,
if your age range is this one, Jack,

74
00:05:13.524 --> 00:05:17.871
who is my father,
you're obviously gonna like Johnny Cash.

75
00:05:17.871 --> 00:05:19.730
Which my dad does like Johnny Cash.

76
00:05:19.730 --> 00:05:21.200
So that's what it does there.

77
00:05:21.200 --> 00:05:23.790
And then otherwise it says,
maybe try David Bowie or

78
00:05:23.790 --> 00:05:26.810
something like that, I don't know [LAUGH].

79
00:05:26.810 --> 00:05:29.600
So hopefully you can
kind of start seeing as,

80
00:05:29.600 --> 00:05:31.970
you can use these different
functions together.

81
00:05:31.970 --> 00:05:33.394
Functions and objects and

82
00:05:33.394 --> 00:05:37.671
if statements to kind of get these really
cool synergies of functionalities.

83
00:05:37.671 --> 00:05:39.801
Does that make sense?

84
00:05:44.094 --> 00:05:44.967
&gt;&gt; Brian Holt: Okay.

85
00:05:48.124 --> 00:05:51.383
&gt;&gt; Brian Holt: So I guess kind of, it's
easy to keep all this information kind of

86
00:05:51.383 --> 00:05:53.650
together as one atomic unit and
pass around.

87
00:05:53.650 --> 00:05:56.140
You don't have to pass around
13 different variables,

88
00:05:56.140 --> 00:05:58.849
you can pass around one variable that
contains a bunch of different stuff.

89
00:06:02.120 --> 00:06:05.920
So objects can even have
functions associated with them.

90
00:06:05.920 --> 00:06:08.680
So I have here a dog object.

91
00:06:08.680 --> 00:06:11.430
And I have here a speak method.

92
00:06:11.430 --> 00:06:13.950
You can tell that by the parentheses here.

93
00:06:13.950 --> 00:06:16.780
And so I can call dog dot speak, right?

94
00:06:16.780 --> 00:06:19.430
And it has a function that
works with that as well.

95
00:06:23.420 --> 00:06:26.780
Just so you know, you can write
this a bunch of different ways.

96
00:06:26.780 --> 00:06:29.470
I could also have put here,
colon function.

97
00:06:31.010 --> 00:06:34.621
And that also is equivalent, but
this is the new way of doing it, so

98
00:06:34.621 --> 00:06:38.181
I always write it this way because
there are far less keystrokes.

99
00:06:43.037 --> 00:06:44.455
&gt;&gt; Brian Holt: But
those two are exactly the same,

100
00:06:44.455 --> 00:06:45.830
they work precisely the same way.

101
00:06:47.790 --> 00:06:49.862
There is one difference,
it doesn't matter.

102
00:06:49.862 --> 00:06:55.510
[LAUGH]
&gt;&gt; Brian Holt: Questions about that?

103
00:06:55.510 --> 00:07:00.414
About having functions on objects?

104
00:07:02.560 --> 00:07:03.097
&gt;&gt; Brian Holt: Okay.

105
00:07:05.199 --> 00:07:06.360
&gt;&gt; Brian Holt: So we did nested objects.

106
00:07:06.360 --> 00:07:07.220
We talked about that.

107
00:07:07.220 --> 00:07:09.610
So I have me, and I have a name, right?

108
00:07:09.610 --> 00:07:11.400
So I console.log that.

109
00:07:12.410 --> 00:07:17.810
And you can also say console.log.

110
00:07:17.810 --> 00:07:23.090
And we'll say, me.location.city,

111
00:07:23.090 --> 00:07:26.660
right and I'll get out of that, Seattle.

112
00:07:28.360 --> 00:07:31.140
So that's how you access nested ones.

113
00:07:31.140 --> 00:07:37.429
And you can keep nesting, right.

114
00:07:37.429 --> 00:07:40.451
I could have, I don't know,
thing which is another object and

115
00:07:40.451 --> 00:07:44.230
that contains another object and another
object you can just keep going down.

116
00:07:49.278 --> 00:07:52.677
&gt;&gt; Brian Holt: Okay,
questions about objects?

117
00:07:57.759 --> 00:08:02.452
&gt;&gt; Brian Holt: Great, so
the one thing I wanna say about objects,

118
00:08:02.452 --> 00:08:05.300
the keys all have to be unique.

119
00:08:07.270 --> 00:08:10.848
So if I have name up here,
I also can't have name down here.

120
00:08:17.207 --> 00:08:20.771
&gt;&gt; Brian Holt: So what technically happens
here is I have name right here, and

121
00:08:20.771 --> 00:08:23.675
then it immediately gets
over written right here.

122
00:08:25.505 --> 00:08:31.485
So keys are unique,
whereas values do not have to be, right?

123
00:08:31.485 --> 00:08:37.723
So I could have another thing here called,
let's just say this was San Francisco.

124
00:08:41.653 --> 00:08:45.740
&gt;&gt; Brian Holt: And I put county here.

125
00:08:45.740 --> 00:08:50.330
The county that San Francisco
is in is San Francisco County.

126
00:08:50.330 --> 00:08:53.640
So if I put San Francisco here,
this is fine.

127
00:08:53.640 --> 00:08:56.160
So you can have multiple
things have the same values,

128
00:08:56.160 --> 00:08:57.740
it's just that they can't
have keys repeated.

