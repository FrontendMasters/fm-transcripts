WEBVTT

1
00:00:00.470 --> 00:00:03.520
&gt;&gt; Brian Holt: We're gonna do Node,
and I think what I'll do is I will

2
00:00:03.520 --> 00:00:06.950
leave the deployment part of this to you,
because this is quite a few steps.

3
00:00:06.950 --> 00:00:11.272
This is gonna show you how to put your
web server out into the world, and

4
00:00:11.272 --> 00:00:13.844
I show you how to do
it on Microsoft Azure.

5
00:00:15.524 --> 00:00:18.110
&gt;&gt; Brian Holt: We're gonna write
a little bit of Node real quick.

6
00:00:18.110 --> 00:00:21.110
So node.js, we've kind of been dancing
around and using it a little bit, but

7
00:00:21.110 --> 00:00:22.889
we're gonna write a web
server really quick.

8
00:00:24.812 --> 00:00:27.399
&gt;&gt; Brian Holt: So historically
JavaScript has been on the client,

9
00:00:27.399 --> 00:00:29.790
it's been a more client oriented thing.

10
00:00:29.790 --> 00:00:34.557
There's a guy names Ryan Dahl that
took Google's Chrome engine, so

11
00:00:34.557 --> 00:00:39.749
they took V8 which is the name of
the thing that actually runs JavaScript.

12
00:00:39.749 --> 00:00:46.412
And they wrapped it and
they connected to a thing called libuv.

13
00:00:46.412 --> 00:00:50.185
They created this thing called Node that
basically allows you to run JavaScript as

14
00:00:50.185 --> 00:00:53.535
a server-side language as opposed
to a client-side language, okay?

15
00:00:53.535 --> 00:01:00.360
So, going, hearkening back to our
example of the pizza place, right?

16
00:01:00.360 --> 00:01:03.419
This allows you to create your own pizza
place that you can serve all these

17
00:01:03.419 --> 00:01:04.334
different clients.

18
00:01:06.556 --> 00:01:08.777
&gt;&gt; Brian Holt: So
one server serves many clients,

19
00:01:08.777 --> 00:01:11.080
that's a good thing to keep in mind.

20
00:01:11.080 --> 00:01:15.177
So what we're gonna do right now is I'm
gonna copy and paste this into a project.

21
00:01:19.186 --> 00:01:21.620
&gt;&gt; Brian Holt: Let's create a new folder.

22
00:01:21.620 --> 00:01:27.130
Node example, and
I'm gonna open this in code.

23
00:01:30.077 --> 00:01:34.364
&gt;&gt; Brian Holt: I'm gonna create a new
file, call it sometimes like server.js.

24
00:01:34.364 --> 00:01:37.648
And I'm gonna paste that in here and
we'll talk about it.

25
00:01:41.880 --> 00:01:46.020
&gt;&gt; Brian Holt: Okay, close that stuff.

26
00:01:46.020 --> 00:01:51.510
First thing to do here, is I'm going to
bring in a things that's called http.

27
00:01:52.690 --> 00:01:57.090
Which is the library inside of Node for
handling connections, right?

28
00:01:57.090 --> 00:02:01.020
So a client reached out to me,
is like, hey I need this thing.

29
00:02:01.020 --> 00:02:04.180
This is the library that
actually is the wiring, right?

30
00:02:04.180 --> 00:02:09.360
Like if this is a pizza place,
this is the telephone, right?

31
00:02:09.360 --> 00:02:12.930
So this is the thing that
people connect to, okay?

32
00:02:12.930 --> 00:02:14.590
Here I go in here and I create a server.

33
00:02:16.560 --> 00:02:20.944
And this function is going to get run
every single time someone calls, right?

34
00:02:20.944 --> 00:02:23.629
This is like the pick up of the phone,
right?

35
00:02:23.629 --> 00:02:25.140
So that's what create server does.

36
00:02:27.040 --> 00:02:32.000
And every time that someone calls I'm
gonna say, hey someone visited this URL.

37
00:02:32.000 --> 00:02:35.696
And, then I'm gonna send back to them
just saying hello, and that's it, and

38
00:02:35.696 --> 00:02:36.767
then it's gonna end.

39
00:02:36.767 --> 00:02:40.088
And, that's gonna start
listening on port 3000,

40
00:02:40.088 --> 00:02:44.764
I'll talk about port just a second but,
let's actually start running this.

41
00:02:44.764 --> 00:02:46.567
Where is my terminal?

42
00:02:50.101 --> 00:02:51.630
&gt;&gt; Brian Holt: Actually,
lets even do this.

43
00:02:51.630 --> 00:02:54.890
So, code has a terminal built into it.

44
00:02:54.890 --> 00:03:01.240
So if I hit Ctrl+Back tick, it pops
up this little thing on the bottom.

45
00:03:01.240 --> 00:03:04.929
This is actually just this the same
terminal that I've been using before.

46
00:03:04.929 --> 00:03:06.248
Wait, can I make this a little bigger?

47
00:03:11.287 --> 00:03:13.849
&gt;&gt; Brian Holt: Okay, yeah, I can't so
I'm gonna make to the terminal but

48
00:03:13.849 --> 00:03:14.935
you could run this here.

49
00:03:14.935 --> 00:03:18.083
I could say node server.js,
that's just too small to read.

50
00:03:21.165 --> 00:03:24.817
&gt;&gt; Brian Holt: So coming back over
here to iTerm, I'm gonna go up one,

51
00:03:24.817 --> 00:03:27.010
I'm gonna go into node example.

52
00:03:28.270 --> 00:03:30.710
And now I'm in here, so
I'm gonna say node server.js and

53
00:03:30.710 --> 00:03:35.360
it's gonna say listening
on http://localhost:3000.

54
00:03:35.360 --> 00:03:40.290
If I open that in my browser, you can
here very small it says hello up there.

55
00:03:40.290 --> 00:03:42.850
So you can see it's actually working,
it's calling my server.

56
00:03:42.850 --> 00:03:45.580
So let's talk about localhost:3000.

57
00:03:45.580 --> 00:03:48.820
Localhost is a alias for
your own computer, right.

58
00:03:48.820 --> 00:03:53.250
So it's saying, please connect to myself,
that's what localhost means.

59
00:03:53.250 --> 00:03:56.660
The :3000 is the port to connect on.

60
00:03:56.660 --> 00:04:00.503
The best analogy that I can make here for
the :3000,

61
00:04:00.503 --> 00:04:05.487
it's like on your TV, where you have
to watching HDMI3 to play the PS4.

62
00:04:05.487 --> 00:04:09.290
Or to be on HDM 4 to be
on the Blu Ray player.

63
00:04:09.290 --> 00:04:11.960
It's like the channel
that you have to be on or

64
00:04:11.960 --> 00:04:14.600
you have to be like on channel
five to watch NBC, right?

65
00:04:16.120 --> 00:04:20.500
:3000 is, there are thousands
of ports on your computer, and

66
00:04:20.500 --> 00:04:23.740
you have to be tuning into the right
one to get the correct one.

67
00:04:23.740 --> 00:04:25.480
Right, does that make sense?

68
00:04:25.480 --> 00:04:29.820
So I could come back over here
to wherever my server is,

69
00:04:29.820 --> 00:04:33.349
and I could say 5500, right, and save.

70
00:04:34.790 --> 00:04:35.740
I have to change that as well.

71
00:04:37.570 --> 00:04:39.845
If I come back over here,
if I refresh this.

72
00:04:39.845 --> 00:04:41.738
Sorry, now I have to restart my server.

73
00:04:44.196 --> 00:04:46.596
&gt;&gt; Brian Holt: Where is my iTerm?

74
00:04:51.615 --> 00:04:54.390
&gt;&gt; Brian Holt: So I come back here,
now this is broken, right?

75
00:04:54.390 --> 00:04:57.643
Because I changed it from
port 3000 to 5500, so

76
00:04:57.643 --> 00:05:00.285
I'd have to come back
over here to change it.

77
00:05:00.285 --> 00:05:03.317
So that's what ports are, okay?

78
00:05:06.612 --> 00:05:09.360
&gt;&gt; Brian Holt: Coming
back here to Node.js,

79
00:05:09.360 --> 00:05:13.910
no one writes Node.js by
using the HTTP directly.

80
00:05:13.910 --> 00:05:15.910
We always do some sort of
framework on top of it.

81
00:05:15.910 --> 00:05:19.830
I don't know anyone that's
writing it directly on top of it.

82
00:05:19.830 --> 00:05:22.330
Typically what we do,
I didn't talk about this either.

83
00:05:22.330 --> 00:05:24.538
If you come here you can see people, or

84
00:05:24.538 --> 00:05:27.298
what URLs are visiting on your server,
right.

85
00:05:27.298 --> 00:05:31.197
So if I come back over here and
say, local host 500.

86
00:05:31.197 --> 00:05:34.870
And I come back and say, some path, right.

87
00:05:36.250 --> 00:05:38.080
It still gets the same response,
but if I come over here,

88
00:05:38.080 --> 00:05:41.520
you can see that the person
visited some path, right?

89
00:05:41.520 --> 00:05:43.700
That's what the URL is.

90
00:05:43.700 --> 00:05:46.310
But what's this strange favicon thing?

91
00:05:47.360 --> 00:05:51.700
Well, the browser every single time that

92
00:05:53.540 --> 00:05:56.110
connects to a web server,
it always requests the favicon.

93
00:05:56.110 --> 00:06:01.210
And the favicon is actually, you see how
there's a little Firefox guy right there?

94
00:06:01.210 --> 00:06:03.560
Or girl, I have no idea,
what the gender is.

95
00:06:03.560 --> 00:06:05.260
Stop gendering me, anyway.

96
00:06:05.260 --> 00:06:10.900
That's what a favicon is,
it's the little tiny thing right there.

97
00:06:10.900 --> 00:06:13.930
So that's what it's requesting and
it's not getting that back, so

98
00:06:13.930 --> 00:06:14.940
it doesn't put anything there.

99
00:06:14.940 --> 00:06:16.790
So that's why there's nothing there.

100
00:06:16.790 --> 00:06:18.160
That's what a favicon is.

101
00:06:18.160 --> 00:06:19.708
That's why you'll see
a bunch of those requests.

102
00:06:22.467 --> 00:06:26.332
&gt;&gt; Brian Holt: Node still uses CommonJS,
that's why I had to do requires http,

103
00:06:26.332 --> 00:06:28.170
import wouldn't work there.

104
00:06:31.084 --> 00:06:32.479
And we didn't talk about req and res.

105
00:06:32.479 --> 00:06:33.981
Let's talk about req and res real quick.

106
00:06:36.549 --> 00:06:41.365
&gt;&gt; Brian Holt: Req, which is short for
request, and Res is short for response.

107
00:06:41.365 --> 00:06:42.465
So req represents,

108
00:06:42.465 --> 00:06:46.161
it's an object representing
everything coming from the request.

109
00:06:46.161 --> 00:06:49.601
And res is everything that you're
going to send back to the user.

110
00:06:49.601 --> 00:06:52.804
Okay and there's just like
a bunch of objects on there.

111
00:06:52.804 --> 00:06:54.134
In fact I think, yeah,

112
00:06:54.134 --> 00:06:58.630
you can see here that code is actually
quite smart about what's on there.

113
00:06:58.630 --> 00:07:02.640
There's a bunch of methods, there's
a bunch of headers that you can see.

114
00:07:02.640 --> 00:07:06.424
Just a ton of stuff that you
can see off of it, okay?

115
00:07:06.424 --> 00:07:10.876
So here I'm getting the req.url,
I'm getting the URL that they visited and

116
00:07:10.876 --> 00:07:12.255
I'm saying res.end.

117
00:07:12.255 --> 00:07:15.071
You have to end your
request to the user and

118
00:07:15.071 --> 00:07:18.301
I'm sending them back
some text saying hello.

119
00:07:18.301 --> 00:07:19.030
Make sense?

120
00:07:20.050 --> 00:07:22.560
So that's where, and req and
res is coming from HTTP.

