WEBVTT

1
00:00:00.990 --> 00:00:02.920
&gt;&gt; Brian Holt: Web Development
is full of stupid acronyms.

2
00:00:02.920 --> 00:00:06.300
AJAX is perhaps the stupidest of them.

3
00:00:06.300 --> 00:00:10.666
It used to stand for something,
Asynchronous JavaScript and XML, but

4
00:00:10.666 --> 00:00:15.418
what's funny about that is we don't use
the and XML part of it anymore [LAUGH].

5
00:00:15.418 --> 00:00:17.500
Or I'm sorry if you have to.

6
00:00:17.500 --> 00:00:24.490
XML is kind of, it's not a data format
that we use with JavaScript anymore.

7
00:00:24.490 --> 00:00:26.400
We use something else called JSON,

8
00:00:26.400 --> 00:00:28.910
which you are about to see
here in just a second.

9
00:00:30.320 --> 00:00:35.505
So you use AJAX to request
information from an API,

10
00:00:35.505 --> 00:00:38.767
which is another dumb acronym.

11
00:00:38.767 --> 00:00:42.840
API stands for application programming
interface, but no one can remember that.

12
00:00:42.840 --> 00:00:47.800
Everyone just uses the acronym, API, which
is just somewhere to request data from,

13
00:00:47.800 --> 00:00:49.600
from a server of some sort, right?

14
00:00:49.600 --> 00:00:51.080
That's what AJAX does.

15
00:00:51.080 --> 00:00:55.201
You load a page, and then you make another
request while you have not refreshed

16
00:00:55.201 --> 00:00:57.836
the page to a server to
get more data back, right?

17
00:00:57.836 --> 00:01:02.105
Like if you are on your Gmail,
right, and you are waiting for

18
00:01:02.105 --> 00:01:06.544
more email and you click the button
to like request more email,

19
00:01:06.544 --> 00:01:10.251
that's done by AJAX,
that's referred to as AJAX.

20
00:01:10.251 --> 00:01:13.848
We are having discussion,
is AJAX still all caps?

21
00:01:13.848 --> 00:01:18.482
I've no idea, I've seen it written both
ways, I still write it in all caps because

22
00:01:18.482 --> 00:01:23.822
it was an acronym, but who knows?
&gt;&gt; Brian Holt: Cool,

23
00:01:23.822 --> 00:01:28.650
most of the time, you'll be
requesting stuff from your own API.

24
00:01:28.650 --> 00:01:32.580
But there are bunch of open source ones,
or like not open source but

25
00:01:32.580 --> 00:01:33.530
open APIs rather.

26
00:01:35.300 --> 00:01:40.363
One of our friends, Todd Motto,
has this GitHub just full of Public APIs

27
00:01:40.363 --> 00:01:45.090
that you can get data from.
&gt;&gt; Brian Holt: Me,

28
00:01:45.090 --> 00:01:50.100
being who I am, want to get dog pictures.

29
00:01:50.100 --> 00:01:54.327
So, there is dog pictures as a service
[LAUGH] from this guy that wrote this

30
00:01:54.327 --> 00:01:58.786
website called dog.ceo, which I think
is the greatest name for a website.

31
00:01:58.786 --> 00:02:02.730
And you can request random images of dogs,
which just makes me happy.

32
00:02:02.730 --> 00:02:04.600
It just gives me all sorts
of happy feelings inside.

33
00:02:04.600 --> 00:02:05.905
So that is exactly what
we're gonna do right

34
00:02:05.905 --> 00:02:09.804
now.
&gt;&gt; Brian Holt: So

35
00:02:09.804 --> 00:02:14.220
we're gonna walk through
this code really quick.

36
00:02:14.220 --> 00:02:17.740
And you should you definitely go home and
do this in your VS Code.

37
00:02:17.740 --> 00:02:23.040
So using this HTML right here,
nothing really special, has a title, and

38
00:02:23.040 --> 00:02:28.680
has a place to put doggos
inside of this div, okay?

39
00:02:28.680 --> 00:02:30.950
You make a file called doggo.js.

40
00:02:30.950 --> 00:02:32.920
It's gonna have some sort of URL.

41
00:02:32.920 --> 00:02:35.990
You haven't seen me use this
casing before right there.

42
00:02:35.990 --> 00:02:40.397
This is called, I've heard people
call it screaming case, [LAUGH].

43
00:02:40.397 --> 00:02:43.385
And this is just kind of
a symbol to future people,

44
00:02:43.385 --> 00:02:46.888
is like this is a constant
that will never change, right?

45
00:02:46.888 --> 00:02:50.556
So in this case, it's a URL,
this URL should never change, right, so

46
00:02:50.556 --> 00:02:54.070
it's something that I've hard
coded in here to use later.

47
00:02:54.070 --> 00:02:57.395
So I don't actually have to use this,
it's easier to just say,

48
00:02:57.395 --> 00:02:59.189
hey fetch this from the DOG_URL.

49
00:02:59.189 --> 00:03:01.504
I did not put it together that
we're doing fetch with DOG_URL and

50
00:03:01.504 --> 00:03:03.286
that's the greatest thing
that I've ever done.

51
00:03:03.286 --> 00:03:04.613
[LAUGH]
&gt;&gt; [SOUND]

52
00:03:04.613 --> 00:03:07.006
&gt;&gt; Brian Holt: That was unintentional.

53
00:03:07.006 --> 00:03:09.696
Okay, so this is an API that we're
gonna request something from,

54
00:03:09.696 --> 00:03:11.080
it's a font of data.

55
00:03:11.080 --> 00:03:13.090
In fact, let's just copy and paste this,

56
00:03:13.090 --> 00:03:17.290
right here into our,
you can't really see that.

57
00:03:18.870 --> 00:03:19.650
This is what you get.

58
00:03:19.650 --> 00:03:23.442
You get back a little JavaScript
object from the API, right?

59
00:03:23.442 --> 00:03:25.550
And it has a status and a message.

60
00:03:25.550 --> 00:03:27.090
You can ignore the status.

61
00:03:27.090 --> 00:03:32.058
But the message is what?
&gt;&gt; Brian Holt: It's a dog,

62
00:03:32.058 --> 00:03:34.910
and it's awesome [LAUGH].

63
00:03:34.910 --> 00:03:37.150
Okay, so that's what this does.

64
00:03:37.150 --> 00:03:40.080
You request information from it,
it gives you back dog pictures.

65
00:03:40.080 --> 00:03:42.970
It's the greatest contract ever, okay?

66
00:03:44.610 --> 00:03:47.410
So we're gonna use something called fetch.

67
00:03:47.410 --> 00:03:50.150
Fetch is a way to do AJAX.

68
00:03:50.150 --> 00:03:51.300
This is the newer way of doing it.

69
00:03:51.300 --> 00:03:52.780
The old way sucked.

70
00:03:52.780 --> 00:03:54.270
This is way better.

71
00:03:54.270 --> 00:03:57.940
So you call fetch with the DOG_URL,
which is this URL, right?

72
00:03:57.940 --> 00:04:00.890
And you get back that, right?

73
00:04:02.070 --> 00:04:04.740
Fetch gives you back
something called a promise.

74
00:04:04.740 --> 00:04:08.460
A promise is very similar to
a function that gets run later, but

75
00:04:08.460 --> 00:04:10.950
it's actually an object
that you call .thenOn.

76
00:04:10.950 --> 00:04:13.910
So I do promise .then.

77
00:04:13.910 --> 00:04:18.220
So whenever this fetch comes back, because
it takes time to request something from

78
00:04:18.220 --> 00:04:20.500
the Internet and for
it to come back to you, right?

79
00:04:20.500 --> 00:04:26.520
That's called asynchronous, yes?
&gt;&gt; Speaker 2: Why is it BREEDS_URL,

80
00:04:26.520 --> 00:04:27.760
and then DOG_URL?

81
00:04:27.760 --> 00:04:30.533
Shouldn't it be the same thing?
&gt;&gt; Brian Holt: It should.

82
00:04:30.533 --> 00:04:31.470
&gt;&gt; Speaker 2: Okay.

83
00:04:31.470 --> 00:04:32.410
&gt;&gt; Brian Holt: Yeah, I should go fix

84
00:04:32.410 --> 00:04:33.180
that, sorry.

85
00:04:33.180 --> 00:04:36.030
I've fixed that down here.

86
00:04:36.030 --> 00:04:37.440
But yes, that's true.

87
00:04:37.440 --> 00:04:43.446
This should be the same thing.
&gt;&gt; Brian Holt: Thank you.

88
00:04:43.446 --> 00:04:45.816
So you call .then on the promise, and

89
00:04:45.816 --> 00:04:50.938
you give it a function to run whenever
that promise completes or succeeds rather.

90
00:04:50.938 --> 00:04:52.670
Resolves is the technical term.

91
00:04:52.670 --> 00:04:54.230
Whenever it resolves, right?

92
00:04:54.230 --> 00:04:58.706
So this is going to get called
whenever this comes back, this fetch,

93
00:04:58.706 --> 00:05:02.810
okay?
&gt;&gt; Brian Holt: So it comes back.

94
00:05:02.810 --> 00:05:05.718
And it comes back with just
like a blob of text and

95
00:05:05.718 --> 00:05:09.080
you need to process it
into a useful thing.

96
00:05:09.080 --> 00:05:11.740
So what you're gonna do
is call response.json,

97
00:05:11.740 --> 00:05:13.850
response is the thing that
came back from the URL.

98
00:05:13.850 --> 00:05:17.180
This is going to parse it into
an object that you can use.

99
00:05:17.180 --> 00:05:19.360
This gives you back another promise, so

100
00:05:19.360 --> 00:05:23.530
what you do is return the promise here and
this is called promise chaining.

101
00:05:23.530 --> 00:05:25.650
So I'm chaining multiple
promises together.

102
00:05:26.930 --> 00:05:31.200
So after this promise completes,
after it finishes processing this into

103
00:05:31.200 --> 00:05:35.520
an object that we can use,
then we have their processedResponse here.

104
00:05:35.520 --> 00:05:39.920
So here I just call console.log(breeds).

105
00:05:39.920 --> 00:05:43.427
Why did I, whatever, processedResponse,

106
00:05:43.427 --> 00:05:46.501
this is all wrong.
&gt;&gt; Brian Holt: Then

107
00:05:46.501 --> 00:05:49.910
function(processedResponse), console.log,
processedResponse,

108
00:05:49.910 --> 00:05:51.140
what you would see is this.

109
00:05:51.140 --> 00:05:55.658
You would see this in your console.
&gt;&gt; Brian Holt: Okay?

110
00:05:56.900 --> 00:05:58.700
&gt;&gt; Brian Holt: So that's what fetch does.

111
00:05:58.700 --> 00:06:01.830
Here's a recap of that if you need
to go back and look at that later.

112
00:06:01.830 --> 00:06:04.170
The processedResponse looks
like something like this.

113
00:06:06.716 --> 00:06:07.232
&gt;&gt; Brian Holt: And again,

114
00:06:07.232 --> 00:06:10.340
you might say this like,
this looks like JavaScript.

115
00:06:10.340 --> 00:06:13.100
Because that is technically
valid JavaScript.

116
00:06:13.100 --> 00:06:17.790
But it's a subset of JavaScript
called JSON, J-S-O-N.

117
00:06:17.790 --> 00:06:19.926
Everyone says it like the name Jason.

118
00:06:19.926 --> 00:06:23.934
[LAUGH] And it stands for
JavaScript object notation.

119
00:06:23.934 --> 00:06:27.536
And it's really convenient to use with
JavaScript because you can parse it like

120
00:06:27.536 --> 00:06:28.190
JavaScript.

121
00:06:29.420 --> 00:06:37.497
JSON, more acronyms, LOL.
&gt;&gt; Brian Holt: Now you might ask,

122
00:06:37.497 --> 00:06:39.820
how do I know it's in JSON?

123
00:06:39.820 --> 00:06:41.740
Because I know that's what
comes back from the API.

124
00:06:41.740 --> 00:06:46.210
So, I have to know how the API is gonna
respond to me, that's really important.

125
00:06:46.210 --> 00:06:49.958
And I know this API cuz I looked at
the documentation, which is here.

126
00:06:49.958 --> 00:06:54.814
I know that it comes back in,
&gt;&gt; Brian Holt: I

127
00:06:54.814 --> 00:06:58.634
know that it comes back in JSON.
&gt;&gt; Brian Holt: Okay,

128
00:06:58.634 --> 00:07:04.349
we talked about promise chaining
&gt;&gt; Brian Holt: So

129
00:07:04.349 --> 00:07:08.780
now what we wanna do is we wanna make
a picture of a random doggo on the page.

130
00:07:08.780 --> 00:07:12.850
That's the appropriate name,
the scientific name, if you will, of dogs.

131
00:07:12.850 --> 00:07:15.510
Doggos, doggos and puppers.

132
00:07:15.510 --> 00:07:23.060
Okay, so I request the URL, I then
grab the doggos element on the page.

133
00:07:23.060 --> 00:07:24.790
I fetch that from the API.

134
00:07:24.790 --> 00:07:29.429
I then process that,
like the blob into a JSON object.

135
00:07:29.429 --> 00:07:34.289
And then here with the processedResponse,
I grab the image here, or I,

136
00:07:34.289 --> 00:07:36.370
rather I create a new element.

137
00:07:36.370 --> 00:07:39.252
This is how you create
elements programmatically,

138
00:07:39.252 --> 00:07:43.191
is you do document.createElement,
img, it's gonna be new img tag.

139
00:07:43.191 --> 00:07:48.879
I set the source to be
processedResponse.message.

140
00:07:50.930 --> 00:07:52.250
&gt;&gt; Brian Holt: Get message cuz that's

141
00:07:52.250 --> 00:07:54.960
where it comes in right there as message,
okay?

142
00:07:54.960 --> 00:07:58.730
And then I do give it
an alt text of Cute doggo,

143
00:07:58.730 --> 00:08:00.870
cuz you have to give images alt text.

144
00:08:00.870 --> 00:08:02.279
And then you appendChild.

145
00:08:03.670 --> 00:08:07.620
So inside of doggos,
it's going to add to the end a new child.

146
00:08:08.940 --> 00:08:13.597
Which is going to be this image tag.
&gt;&gt; Brian Holt: Makes sense?

147
00:08:13.597 --> 00:08:15.857
Okay.
&gt;&gt; Brian Holt: So

148
00:08:15.857 --> 00:08:17.040
putting that all together,

149
00:08:17.040 --> 00:08:22.064
you end up with something like this.
&gt;&gt; Brian Holt: So

150
00:08:22.064 --> 00:08:24.780
now this is what it actually will be.

151
00:08:24.780 --> 00:08:27.690
So, I have this Doggos title and
I click Add Doggo.

152
00:08:28.940 --> 00:08:31.369
And I get Doggos.

153
00:08:31.369 --> 00:08:34.750
And it's just gonna keep sticking
them on there to my heart's content.

154
00:08:34.750 --> 00:08:35.971
And I am so happy right now.

155
00:08:42.755 --> 00:08:45.716
&gt;&gt; Brian Holt: It's dog butt, okay.

156
00:08:45.716 --> 00:08:48.632
You come to learn JavaScript and
you get to look at dog pictures,

157
00:08:48.632 --> 00:08:53.969
you're welcome.
&gt;&gt; Brian Holt: Cool, any questions about

158
00:08:53.969 --> 00:08:58.901
AJAX?
&gt;&gt; Brian Holt: So if you want to like

159
00:08:58.901 --> 00:09:03.190
go and play with this a little bit more,
here are some extended things you can do.

160
00:09:03.190 --> 00:09:04.540
You can add it to your GitHub,

161
00:09:04.540 --> 00:09:06.500
you can make this own project,
put it on your own GitHub.

162
00:09:06.500 --> 00:09:09.030
We're gonna talk about how to
do that here in just a sec.

163
00:09:09.030 --> 00:09:12.060
Make it look nice using CSS.

164
00:09:12.060 --> 00:09:13.225
You can show a loading GIF,

165
00:09:13.225 --> 00:09:16.540
like you know those spinners on
a page when something is loading?

166
00:09:16.540 --> 00:09:21.140
You could go do that, so that when you
click request, it shows a loading GIF.

167
00:09:21.140 --> 00:09:25.780
When it finishes, you can replace
the loading GIF with the actual picture.

168
00:09:25.780 --> 00:09:28.527
So that's something else you
can do on your own time.

169
00:09:28.527 --> 00:09:31.046
And then if you wanna
get even more technical,

170
00:09:31.046 --> 00:09:34.160
dog.ceo will allow you to
request a list of breeds.

171
00:09:34.160 --> 00:09:37.138
You could turn that into a select
with all the various options that

172
00:09:37.138 --> 00:09:38.250
are various breeds.

173
00:09:38.250 --> 00:09:41.514
And then whenever someone selects
one of the options then you

174
00:09:41.514 --> 00:09:44.150
could request a picture
of that specific breed.

175
00:09:44.150 --> 00:09:46.040
You could do that all
using their documentation.

176
00:09:47.680 --> 00:09:50.239
And I gave you links to those URLs.

177
00:09:51.330 --> 00:09:53.910
So that's a good project as well if
you wanted to go like go deep in your

178
00:09:53.910 --> 00:09:56.330
understanding of dog.ceo.

179
00:09:56.330 --> 00:09:57.950
Also, very grateful to
the person that runs it.

180
00:09:57.950 --> 00:10:01.150
I asked him beforehand if
it's okay if we use this API.

181
00:10:01.150 --> 00:10:02.774
And he was very happy about it.

182
00:10:02.774 --> 00:10:05.230
So that's awesome.

183
00:10:05.230 --> 00:10:07.830
Last time we taught this class,
it was in jQuery.

184
00:10:07.830 --> 00:10:09.190
So it's been a while.

185
00:10:09.190 --> 00:10:10.830
It's been a hot minute.

186
00:10:10.830 --> 00:10:12.790
I am very happy that you
never have to learn jQuery,

187
00:10:12.790 --> 00:10:15.840
I think that's great.
&gt;&gt; Speaker 2: Is it outdated?

188
00:10:17.040 --> 00:10:17.770
&gt;&gt; Brian Holt: It's just not

189
00:10:17.770 --> 00:10:19.120
necessary anymore.

190
00:10:19.120 --> 00:10:20.894
jQuery is an awesome library.

191
00:10:20.894 --> 00:10:26.082
But like all old websites from,
let me guess, like early 2000s

192
00:10:26.082 --> 00:10:31.290
to like 2010, were all written
in this library called jQuery.

193
00:10:31.290 --> 00:10:35.040
And it's cuz JavaScript was really hard
to use and they have improved it so

194
00:10:35.040 --> 00:10:37.140
much that you don't really
need jQuery anymore.

