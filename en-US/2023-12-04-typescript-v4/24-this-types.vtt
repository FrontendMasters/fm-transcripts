WEBVTT

1
00:00:00.440 --> 00:00:05.350
All right, part of functions
is the concept of this, right?

2
00:00:07.620 --> 00:00:12.184
So if anyone's written something
like a mouse click handler or

3
00:00:12.184 --> 00:00:17.262
a DOM event handler, you know that
sometimes, like if you hook things

4
00:00:17.262 --> 00:00:22.171
up the vanilla JavaScript way with
addEventListener in a browser,

5
00:00:22.171 --> 00:00:26.690
this will be the DOM element
that fired the event.

6
00:00:26.690 --> 00:00:30.896
So if we wanted to have
a click handler like this and

7
00:00:30.896 --> 00:00:36.405
pass it a click event,
we wanted to rely on this being something,

8
00:00:36.405 --> 00:00:41.628
like this being something,
we need to provide it with a type.

9
00:00:41.628 --> 00:00:46.638
So here's a more involved example here.

10
00:00:50.117 --> 00:00:51.937
So here we're getting a button.

11
00:00:51.937 --> 00:00:57.225
We're literally getting the first button
in a document, like in an HTML page.

12
00:00:57.225 --> 00:01:05.198
We can create a boundHandler
that tries to take myButton and

13
00:01:05.198 --> 00:01:09.509
bind its context to undefined.

14
00:01:09.509 --> 00:01:13.040
Well, let's sort this top piece out first.

15
00:01:13.040 --> 00:01:17.600
So what we're seeing here
is that this cannot be

16
00:01:17.600 --> 00:01:22.507
depended on unless we
provide it a specific thing.

17
00:01:24.637 --> 00:01:27.410
So what we'll wanna do is the following.

18
00:01:32.650 --> 00:01:35.238
All right,
it kind of looks like an argument.

19
00:01:35.238 --> 00:01:39.033
You might look at this and say,
have we just made a two-argument function?

20
00:01:39.033 --> 00:01:40.766
But it disappears.

21
00:01:40.766 --> 00:01:43.080
This is still a one-argument function.

22
00:01:43.080 --> 00:01:49.197
We're sort of using the arguments
list as a place to put a type for

23
00:01:49.197 --> 00:01:54.080
this, but note,
now we get the correct type here.

24
00:01:54.080 --> 00:01:59.342
So if you ever want to build functions
that need a this to be a particular

25
00:01:59.342 --> 00:02:04.338
thing outside the context of class
methods where it's handled for

26
00:02:04.338 --> 00:02:08.550
you behind the scenes,
this is what you'll need to do.

27
00:02:08.550 --> 00:02:12.495
Note that if we just tried
to invoke myClickHandler and

28
00:02:12.495 --> 00:02:16.430
pass it an event,
this is not going to work.

29
00:02:16.430 --> 00:02:19.575
We don't have the correct this type.

30
00:02:19.575 --> 00:02:22.729
It says this context of type void,
there's void again,

31
00:02:22.729 --> 00:02:27.669
it's like, don't use this, ignore it,
you shouldn't be sensitive to this, right?

32
00:02:27.669 --> 00:02:29.000
That's what void means here.

33
00:02:31.620 --> 00:02:34.394
It's telling us this is not safe,
you shouldn't do this,

34
00:02:34.394 --> 00:02:37.710
you can't do this, because you
need to create the proper type.

35
00:02:37.710 --> 00:02:39.690
So what we're doing here
is we're creating a button.

36
00:02:41.030 --> 00:02:46.831
We're then saying, I want to create
a copy of myClickHandler and

37
00:02:46.831 --> 00:02:49.940
I want to bind it to my button.

38
00:02:49.940 --> 00:02:52.120
Does everyone in here knows what bind is?

39
00:02:53.680 --> 00:02:58.646
So you're almost creating
a copy of this function

40
00:02:58.646 --> 00:03:03.729
that's sort of packaged
with a this applied to it,

41
00:03:03.729 --> 00:03:08.579
and now anybody can invoke
this without worrying

42
00:03:08.579 --> 00:03:13.564
about what to set this to,
it's just ready to go.

43
00:03:13.564 --> 00:03:17.960
So now we've created
this new function here.

44
00:03:17.960 --> 00:03:20.978
boundHandler is of type any.

45
00:03:20.978 --> 00:03:23.094
This is a good little segue here.

46
00:03:23.094 --> 00:03:27.853
We're gonna need to go to,
you can do this with me here.

47
00:03:27.853 --> 00:03:30.370
We're gonna need to go
to the package.json.

48
00:03:30.370 --> 00:03:35.400
No, not the package.json,
the tsconfig of this notes project.

49
00:03:35.400 --> 00:03:40.780
So it's in the ts-fundamentals-v4 folder,
get the tsconfig.

50
00:03:40.780 --> 00:03:42.560
So we've got no implicit this.

51
00:03:42.560 --> 00:03:47.490
That's why it was lighting up here
before we added a type for this.

52
00:03:47.490 --> 00:03:52.530
And now we're gonna add strict,
bind, call, apply.

53
00:03:54.470 --> 00:03:55.363
Set it to true.

54
00:03:58.751 --> 00:04:00.073
And look at that.

55
00:04:00.073 --> 00:04:01.810
So strict, bind, call, apply.

56
00:04:03.240 --> 00:04:07.740
This used to be any, but
now it's of a particular type.

57
00:04:07.740 --> 00:04:12.665
And if we look at the type of the click
handler to begin with, see this piece?

58
00:04:14.496 --> 00:04:20.738
And now when we have the boundHandler,
we've sort of taken the requirement for

59
00:04:20.738 --> 00:04:25.415
explicitly providing a this
a way as part of what bind does.

60
00:04:25.415 --> 00:04:28.220
So it's giving us a bound
version of the function.

61
00:04:29.550 --> 00:04:34.363
Now that lets us just directly
invoke this function.

62
00:04:34.363 --> 00:04:39.673
This is already sort of glued to
the boundHandler copy of the function.

63
00:04:39.673 --> 00:04:45.681
Alternatively, we could
invoke the original function,

64
00:04:45.681 --> 00:04:51.318
which still has a this type in it,
and we could call it,

65
00:04:51.318 --> 00:04:56.340
but we have to pass it
this button as the this.

66
00:04:56.340 --> 00:05:02.431
These are sort of like
meta function methods,

67
00:05:02.431 --> 00:05:08.520
a way to invoke a function
a different way.

68
00:05:08.520 --> 00:05:13.752
So if we were to open this up,
you can see it's like, it's demanding

69
00:05:13.752 --> 00:05:19.180
that we provide an HTML button element,
cuz that's what we need here.

70
00:05:20.440 --> 00:05:22.101
So it's only happy if we put in myButton.

71
00:05:25.468 --> 00:05:28.227
It's kind of rare to deal with this types.

72
00:05:28.227 --> 00:05:31.121
If you're using them in a class, great.

73
00:05:31.121 --> 00:05:35.903
Where it becomes particularly
important is listening to DOM events,

74
00:05:35.903 --> 00:05:39.000
that's the most frequent case.

75
00:05:39.000 --> 00:05:44.625
Or if you're building React components and
you're kind of mixing top-level functions

76
00:05:44.625 --> 00:05:50.110
with methods, that's where depending
on which of those two you're choosing.

77
00:05:50.110 --> 00:05:55.020
One, the top-level scope freestanding
functions should not care about this.

78
00:05:55.020 --> 00:05:59.911
Methods already have the instance
of the class as this.

79
00:05:59.911 --> 00:06:05.332
&gt;&gt; So could you still call
the function on line 82 and

80
00:06:05.332 --> 00:06:08.114
pass our first argument?

81
00:06:08.114 --> 00:06:09.213
&gt;&gt; You can't.

82
00:06:09.213 --> 00:06:13.078
When you invoke a function
in this fashion,

83
00:06:13.078 --> 00:06:17.988
I'm trying to not use the word
this in my explanations,

84
00:06:17.988 --> 00:06:23.326
desperately, you don't get to
explicitly provide a this.

85
00:06:23.326 --> 00:06:27.030
This .call, that's what you need.

86
00:06:27.030 --> 00:06:28.683
This is the way you would do this.

87
00:06:28.683 --> 00:06:32.453
Or function.apply is
another way of doing it.

88
00:06:32.453 --> 00:06:36.185
Apply, call, and
bind are kind of ways to sort of.

89
00:06:36.185 --> 00:06:40.028
Apply and
call are ways to invoke the function and

90
00:06:40.028 --> 00:06:42.942
pass it arguments, but also a this.

91
00:06:42.942 --> 00:06:48.243
Bind is the one that sort of bakes
a this in to a copy of the function and

92
00:06:48.243 --> 00:06:50.382
gives you that copy which,

93
00:06:50.382 --> 00:06:55.318
at that point can be directly invoked,
just like you see here.

94
00:06:55.318 --> 00:06:55.890
Yes, sir?

95
00:06:55.890 --> 00:06:59.613
&gt;&gt; Is there something specific
happening with the word this,

96
00:06:59.613 --> 00:07:02.900
if you change that first
argument to just element?

97
00:07:02.900 --> 00:07:03.900
&gt;&gt; Very special.

98
00:07:03.900 --> 00:07:07.350
&gt;&gt; Okay.
&gt;&gt; This is a special Javascript concept.

99
00:07:07.350 --> 00:07:08.310
&gt;&gt; Okay.

100
00:07:08.310 --> 00:07:10.460
&gt;&gt; Not something TypeScript invented.

101
00:07:10.460 --> 00:07:14.109
&gt;&gt; Okay, but if you name that
first argument just element,

102
00:07:14.109 --> 00:07:17.769
you could still say
element.disabled = true, right?

103
00:07:17.769 --> 00:07:20.813
&gt;&gt; Yep, but that would require
that you explicitly pass it in.

104
00:07:20.813 --> 00:07:21.454
&gt;&gt; Every time, yeah.

105
00:07:21.454 --> 00:07:24.394
&gt;&gt; So you could do it like this.

106
00:07:24.394 --> 00:07:28.490
This is why you don't see it so
frequently cuz this is wiser.

107
00:07:28.490 --> 00:07:35.160
And if we were to just move, select down,
out of the temporal dead zone.

108
00:07:37.150 --> 00:07:37.810
There you go.

109
00:07:39.150 --> 00:07:42.240
So it's almost like an implicit argument.

110
00:07:42.240 --> 00:07:46.868
This is why if you're making
a freestanding function,

111
00:07:46.868 --> 00:07:49.380
you wanna do it that way.

112
00:07:49.380 --> 00:07:54.362
Now, if you're attaching an event
listener to a DOM element,

113
00:07:54.362 --> 00:07:57.610
you don't really have a choice there.

114
00:07:57.610 --> 00:08:01.480
You can't tell a DOM element
how to invoke your function.

115
00:08:01.480 --> 00:08:07.520
It has defined the way it invokes your
function, and it will set a this.

116
00:08:07.520 --> 00:08:11.332
And if you want to write a TypeScript
function that can take advantage of this,

117
00:08:11.332 --> 00:08:13.140
you will need to provide a this type.

