WEBVTT

1
00:00:00.000 --> 00:00:03.283
Thanks for spending time with us
learning about TypeScript fundamentals.

2
00:00:03.283 --> 00:00:06.761
Just to recap what we've covered
since the beginning of the course.

3
00:00:06.761 --> 00:00:10.839
We built a small TypeScript program and
use the TypeScript CLI.

4
00:00:10.839 --> 00:00:15.608
We talked about variables and values,
the differences between let and

5
00:00:15.608 --> 00:00:19.583
const declarations and
started to develop an intuition for

6
00:00:19.583 --> 00:00:23.969
how to think about types as
representing sets of allowed values.

7
00:00:23.969 --> 00:00:28.830
We discussed object, arrays and tuples,
and how tuples could be used in a read

8
00:00:28.830 --> 00:00:33.339
only mode where we get much better
inference when initializing tuples.

9
00:00:33.339 --> 00:00:37.185
We discussed the differences between
structural and nominal type systems.

10
00:00:37.185 --> 00:00:40.033
TypeScript of course is
a structural type system.

11
00:00:40.033 --> 00:00:44.351
And we talked about how type
equivalence is performed in these

12
00:00:44.351 --> 00:00:47.009
different kinds of type systems, and

13
00:00:47.009 --> 00:00:52.255
hopefully this helps bolster your
mental model for how TypeScript works.

14
00:00:52.255 --> 00:00:57.103
We went on to discuss union and
intersection types using a nice Venn

15
00:00:57.103 --> 00:01:02.039
diagram model where we compared
the concepts of what kinds of values

16
00:01:02.039 --> 00:01:06.561
is a type able to accept versus
what assumptions can you make?

17
00:01:06.561 --> 00:01:10.246
What guarantees do you have
about any member of a set.

18
00:01:10.246 --> 00:01:14.518
And we saw there was sort of
an asymmetric relationship there where,

19
00:01:14.518 --> 00:01:17.979
you can be very flexible and
allow a bunch of values, but

20
00:01:17.979 --> 00:01:22.695
then, you sort of have to narrow down
before you can do much because there's

21
00:01:22.695 --> 00:01:25.589
a lot of things that
something could be there.

22
00:01:25.589 --> 00:01:28.036
We talked about interfaces and
type aliases.

23
00:01:28.036 --> 00:01:33.263
We compared and contrasted them and
discussed, open interfaces and

24
00:01:33.263 --> 00:01:37.329
how type aliases are basically
variables for types.

25
00:01:37.329 --> 00:01:41.793
We went through an exercise where
we made types for JSON values,

26
00:01:41.793 --> 00:01:43.701
any allowable JSON value.

27
00:01:43.701 --> 00:01:46.560
And then went on to discuss type queries,

28
00:01:46.560 --> 00:01:51.958
which are ways of obtaining types from
values that we may already have in hand.

29
00:01:51.958 --> 00:01:55.855
We talked about callables and
constructables, call signatures and

30
00:01:55.855 --> 00:01:58.946
construct signatures as
well as function overloads,

31
00:01:58.946 --> 00:02:03.600
which allow us to have multiple function
heads and one function implementation.

32
00:02:03.600 --> 00:02:08.979
We went on to talk about classes,
including static fields,

33
00:02:08.979 --> 00:02:14.682
static blocks, private fields,
which are actually private.

34
00:02:14.682 --> 00:02:18.173
Then we we had a discussion
about type guards and narrowing,

35
00:02:18.173 --> 00:02:20.369
including user defined type guards.

36
00:02:20.369 --> 00:02:25.237
We talked a little bit about how
we could implement type guards in

37
00:02:25.237 --> 00:02:28.224
a nominal way versus a structural way.

38
00:02:28.224 --> 00:02:31.347
Finally, the last topic we
talked about was generics,

39
00:02:31.347 --> 00:02:33.744
which allow us to write parametric types.

40
00:02:33.744 --> 00:02:37.470
Types that are described
in terms of a type param,

41
00:02:37.470 --> 00:02:43.964
which often is something that's inferred
when callers invoke the generic function.

42
00:02:43.964 --> 00:02:48.245
And we talked a little bit about
an exercise we'll leave for

43
00:02:48.245 --> 00:02:52.353
you all to do at home,
writing your own map, filter, and

44
00:02:52.353 --> 00:02:56.902
reduce utility functions which
can operate on dictionaries.

45
00:02:56.902 --> 00:03:00.973
I hope you found this course
interesting and useful.

46
00:03:00.973 --> 00:03:04.905
Please remember that there's an
intermediate TypeScript course that picks

47
00:03:04.905 --> 00:03:06.299
up right where we left off.

48
00:03:06.299 --> 00:03:09.430
So if you'd like to learn
more about TypeScript,

49
00:03:09.430 --> 00:03:11.521
I'll see you in the next course.

50
00:03:11.521 --> 00:03:12.021
[APPLAUSE]

