WEBVTT

1
00:00:00.390 --> 00:00:02.689
Here is my advice.

2
00:00:02.689 --> 00:00:05.549
Actually, I already did
this step on the fly

3
00:00:05.549 --> 00:00:08.500
here where I fixed
the listToDict function.

4
00:00:10.104 --> 00:00:13.789
Here's my advice when it
comes to best practices here.

5
00:00:13.789 --> 00:00:18.620
You want to make sure that
type params are used more than

6
00:00:18.620 --> 00:00:21.361
once in a function signature.

7
00:00:23.646 --> 00:00:31.147
Here's a case where it's not, where we're
creating a function called returnAs and

8
00:00:31.147 --> 00:00:35.949
we take in an argument,
that's an any, we return a T.

9
00:00:35.949 --> 00:00:37.989
And first off,

10
00:00:44.688 --> 00:00:49.129
It's gonna default to something
that's not very useful.

11
00:00:49.129 --> 00:00:52.984
It'll force us to explicitly
provide a type param here.

12
00:00:52.984 --> 00:00:57.219
Yeah, okay, this will be a number,
we could do this too.

13
00:00:57.219 --> 00:01:00.084
It's just not a very safe, right?

14
00:01:00.084 --> 00:01:01.779
All we're doing here is casting.

15
00:01:01.779 --> 00:01:07.574
This is literally, the way we would
describe this is convenient casting.

16
00:01:07.574 --> 00:01:12.959
And I don't consider this to
be a valid use of generics.

17
00:01:12.959 --> 00:01:20.021
Generics, these type params, need to show
up more than once in a function signature.

18
00:01:20.021 --> 00:01:23.897
Because essentially what we're doing
is we're describing relationships

19
00:01:23.897 --> 00:01:24.810
between things.

20
00:01:24.810 --> 00:01:29.633
For example, here we're saying
there is a relationship between

21
00:01:29.633 --> 00:01:34.557
the type of the argument you pass me and
the type of what I returned.

22
00:01:34.557 --> 00:01:38.145
Now, it's not exactly the same type, but

23
00:01:38.145 --> 00:01:43.039
I'm using the type you gave me
to create that return type.

24
00:01:43.039 --> 00:01:48.549
If you look at our listToDict function,
look how many relationships there are.

25
00:01:48.549 --> 00:01:51.955
There's the array of
things that we pass in.

26
00:01:51.955 --> 00:01:56.908
That has to align with the callback
that we use to determine the ID

27
00:01:56.908 --> 00:01:59.949
of each item in the list of PhoneInfos.

28
00:01:59.949 --> 00:02:04.459
And that all is used to create
the right return type, here.

29
00:02:04.459 --> 00:02:08.763
So these are places where there are clear
relationships between the things.

30
00:02:08.763 --> 00:02:12.129
That's the point of the type param,
effectively.

31
00:02:12.129 --> 00:02:15.559
It's to connect all of
these things together and

32
00:02:15.559 --> 00:02:18.580
still give you that level of flexibility.

33
00:02:18.580 --> 00:02:23.128
Whereas, and you'll note,
it's not a coincidence,

34
00:02:23.128 --> 00:02:26.139
inference is doing a lot for us here.

35
00:02:26.139 --> 00:02:27.802
It's doing nothing for

36
00:02:27.802 --> 00:02:32.297
us down here because there are no
relationships to define here.

37
00:02:32.297 --> 00:02:36.039
The type parameter is just
used as a return type.

38
00:02:36.039 --> 00:02:40.482
I'm not doing this, right?

39
00:02:40.482 --> 00:02:41.979
Like here, okay, it's trying.

40
00:02:41.979 --> 00:02:43.730
Now it's saying, all right, string.

41
00:02:43.730 --> 00:02:45.397
You thought this was a string, right?

42
00:02:45.397 --> 00:02:46.187
But it's not.

43
00:02:46.187 --> 00:02:49.198
Here it's trying to infer.

44
00:02:49.198 --> 00:02:50.442
It's just passing it straight through.

45
00:02:50.442 --> 00:02:54.518
This is like the identity function,
f of x equals x.

46
00:02:54.518 --> 00:02:59.207
So just try to make sure that
you are using type params

47
00:02:59.207 --> 00:03:02.840
more than once in a function signature.

48
00:03:02.840 --> 00:03:07.337
And if you wanna learn more,
take intermediate TypeScript,

49
00:03:07.337 --> 00:03:11.586
because we will pick up right
where we left off right here.

50
00:03:11.586 --> 00:03:19.569
So Luis asks is it, can we show
an example of two generic types?

51
00:03:19.569 --> 00:03:21.589
Sure, here we go.

52
00:03:54.890 --> 00:03:57.149
So look at that, makeTuple.

53
00:03:57.149 --> 00:03:58.666
There's a number, number.

54
00:03:58.666 --> 00:04:04.163
There's a string and window
intersected with type of global this.

55
00:04:04.163 --> 00:04:06.893
And you can see I have to type params.

56
00:04:06.893 --> 00:04:10.210
Inference is working on both T and U.

57
00:04:10.210 --> 00:04:13.860
We're using both type params twice,
once in the arguments list,

58
00:04:13.860 --> 00:04:15.239
once in the return type.

59
00:04:15.239 --> 00:04:18.912
Here's how inference is working for
us, check that out, number number.

60
00:04:18.912 --> 00:04:20.463
Here it's string.

61
00:04:20.463 --> 00:04:23.656
And then there's our window and
type of globalThis.

62
00:04:23.656 --> 00:04:28.756
So there's an example using to
two type params, two generics.

63
00:04:28.756 --> 00:04:29.698
I assume that's what you meant.

64
00:04:29.698 --> 00:04:36.080
Generics described as the kind of
code you can write with type params.

65
00:04:36.080 --> 00:04:41.775
Cuz it's generic, right, we have a
reusable listToDict function now that can

66
00:04:41.775 --> 00:04:47.048
be used without losing type information
on a variety of different lists.

