WEBVTT

1
00:00:00.000 --> 00:00:04.816
I promised you at the beginning
that we would have

2
00:00:04.816 --> 00:00:08.339
a way to take that very wordy way of,

3
00:00:08.339 --> 00:00:14.462
you know having all of these
different class fields, right?

4
00:00:14.462 --> 00:00:18.380
Remember we had like make model and
year each written four times.

5
00:00:18.380 --> 00:00:22.988
The answer here is something
called param properties and

6
00:00:22.988 --> 00:00:28.172
I'll show you a freestanding
example because that the car class

7
00:00:28.172 --> 00:00:33.262
up top is getting a little big and
cumbersome and complicated.

8
00:00:33.262 --> 00:00:35.496
I haven't make property here and

9
00:00:35.496 --> 00:00:39.162
you have to imagine we can add
model in near here but so,

10
00:00:39.162 --> 00:00:44.534
this is this is interesting, we have
the word public here in an arguments list.

11
00:00:44.534 --> 00:00:48.178
Seems weird,
you can't do this with functions,

12
00:00:48.178 --> 00:00:53.136
you can't do this with methods
only with a constructor signature.

13
00:00:53.136 --> 00:00:56.749
And what this is
constructor signature for,

14
00:00:56.749 --> 00:01:02.737
is actually the easiest way for me to
cover this is Let me go to the example and

15
00:01:02.737 --> 00:01:06.083
jump to the TypeScript playground here.

16
00:01:10.042 --> 00:01:13.370
And we can see the compiled
output really quick.

17
00:01:13.370 --> 00:01:17.533
So here's public make, model, and year,

18
00:01:17.533 --> 00:01:22.035
here's the JavaScript, this.make = make,

19
00:01:22.035 --> 00:01:26.319
this.model = model, this.year = year.

20
00:01:26.319 --> 00:01:31.652
What it's doing is it's creating
class fields, make model and

21
00:01:31.652 --> 00:01:37.586
year of the correct types of identical
names of these parameters here.

22
00:01:37.586 --> 00:01:40.771
And then it's doing
the assignment of the constructor,

23
00:01:40.771 --> 00:01:42.839
ARGs to those class fields, right?

24
00:01:42.839 --> 00:01:46.745
So it's taking these and it's putting
them in the respective fields, and

25
00:01:46.745 --> 00:01:50.468
of course it's also setting up
the appropriate types on those fields.

26
00:01:50.468 --> 00:01:54.775
So if we look back in here,
we can do this.make and

27
00:01:54.775 --> 00:01:58.888
something's there and
its value has been set.

28
00:01:58.888 --> 00:02:02.353
So this is the abbreviated syntax,

29
00:02:02.353 --> 00:02:07.209
we can go back up to
the complicated example here.

30
00:02:07.209 --> 00:02:12.765
We could delete this,
and we could just here,

31
00:02:12.765 --> 00:02:18.757
write public,
we could this other format there.

32
00:02:18.757 --> 00:02:23.620
There you go, that's our constructor, it
does exactly what the old constructor did,

33
00:02:23.620 --> 00:02:27.580
just much more abbreviated syntax
because this is such a common thing.

34
00:02:27.580 --> 00:02:29.299
And to have class fields and

35
00:02:29.299 --> 00:02:33.261
constructor parameters of the same
names in that assignment,

36
00:02:33.261 --> 00:02:38.290
it's such a common thing that it's worth
it to have some special syntax for it.

37
00:02:38.290 --> 00:02:42.599
Just to reduce the noise in every
kind of class that you might have.

38
00:02:46.003 --> 00:02:50.530
I see a question in the chat
that I wanna address real quick,

39
00:02:50.530 --> 00:02:55.980
it's about this static block,
which we dealt with a little while ago.

40
00:02:55.980 --> 00:03:00.474
So the question from Alexandria is
you can't really use this class until

41
00:03:00.474 --> 00:03:05.188
the static block completes how would you
ensure that new is not called before

42
00:03:05.188 --> 00:03:06.603
the block completes.

43
00:03:06.603 --> 00:03:09.095
Honestly what I do is something like this.

44
00:03:19.855 --> 00:03:23.649
And then before invoking the constructor,

45
00:03:23.649 --> 00:03:28.569
I would check to see if the class
is ready or I might wait for

46
00:03:28.569 --> 00:03:33.388
this to indicate that it's
ready before I like booted my

47
00:03:33.388 --> 00:03:37.204
application and started calling any code.

48
00:03:37.204 --> 00:03:42.278
That might instantiate cars but
you do need a piece of data there that

49
00:03:42.278 --> 00:03:47.084
that lets you have some signal as
to whether the data is landed and

50
00:03:47.084 --> 00:03:50.571
whether this initialization has completed.

51
00:03:50.571 --> 00:03:53.305
That is work you have to do there,

52
00:03:53.305 --> 00:03:58.000
only if you're doing async
stuff in your static blocks.

53
00:03:58.000 --> 00:04:01.854
Sorry for the little tangent there, but
I think that's worth looping back for.

54
00:04:06.979 --> 00:04:10.414
All right, keep going onward.

55
00:04:10.414 --> 00:04:15.513
Overrides, so
this just recently landed in TypeScript,

56
00:04:15.513 --> 00:04:19.579
I think it's a TypeScript
five feature here.

57
00:04:19.579 --> 00:04:24.962
And I wanna first illustrate the need for
this with an example,

58
00:04:24.962 --> 00:04:30.866
so if you remember we had a class car
has a does it have a honk property?

59
00:04:30.866 --> 00:04:35.662
Yep, there's the honk property,
and so if we go down,

60
00:04:35.662 --> 00:04:41.699
we have added an extra O in here,
we've misspelled this method name.

61
00:04:41.699 --> 00:04:47.615
And this is a truck, it's honking
in all caps because it's truck and

62
00:04:47.615 --> 00:04:53.327
not much is helping us here,
I think I have a just a spelling error,

63
00:04:53.327 --> 00:04:57.509
so this is TypeScript not
helping us at all here.

64
00:04:57.509 --> 00:05:02.310
And, so if we do this,
we instantiate this truck,

65
00:05:02.310 --> 00:05:07.583
we're gonna get the hunk
method on the base class.

66
00:05:07.583 --> 00:05:11.599
I got a hug for five seconds or something.

67
00:05:11.599 --> 00:05:15.799
So the problem here is
this is very common,

68
00:05:15.799 --> 00:05:20.123
long method names, misspellings happen.

69
00:05:20.123 --> 00:05:25.776
The only thing that's even remotely
catching this is a spell checker,

70
00:05:25.776 --> 00:05:32.179
and if I just had You know, a word here,
a misspelling that happened to be a word,

71
00:05:32.179 --> 00:05:36.064
I'd have nothing warning
me of this situation.

72
00:05:36.064 --> 00:05:43.018
So TypeScript introduces
a keyword here called override.

73
00:05:43.018 --> 00:05:48.173
Override is it is you
expressing the intent,

74
00:05:48.173 --> 00:05:53.736
that this should override
a base class method and

75
00:05:53.736 --> 00:05:59.719
thus a base class method
must exist of the same name.

76
00:05:59.719 --> 00:06:04.537
And here we go, member cannot have
an override modifier cuz it's not

77
00:06:04.537 --> 00:06:07.871
declared in the base class,
did you mean honk?

78
00:06:07.871 --> 00:06:12.716
If I delete this that works or
should, sorry, I have to take in.

79
00:06:14.754 --> 00:06:15.857
Something like that.

80
00:06:15.857 --> 00:06:17.532
Is that what the problem was?

81
00:06:22.553 --> 00:06:25.178
I have to return beep, my bad.

82
00:06:28.849 --> 00:06:31.260
There, now it's happy.

83
00:06:31.260 --> 00:06:37.102
So override is great, it helps to
helps like keep that linkage in place.

84
00:06:37.102 --> 00:06:41.704
The thing you'd want watch out for
if you didn't have this, of course,

85
00:06:41.704 --> 00:06:46.458
is you're not really overriding the base
method and so your custom code for

86
00:06:46.458 --> 00:06:48.883
your subclass is not being run it all.

87
00:06:48.883 --> 00:06:52.594
There's another problem
that this helps with, and

88
00:06:52.594 --> 00:06:55.978
that is if the base
method's name has changed.

89
00:06:55.978 --> 00:07:04.461
So if we go up here we were like I
really want honk there we should see.

90
00:07:04.461 --> 00:07:10.803
Yeah, we see an indication that all right,
my subclasses are lighting up,

91
00:07:10.803 --> 00:07:15.361
that linkage,
that refactoring is not complete and,

92
00:07:15.361 --> 00:07:19.643
it's gonna tell me that I
need to take care of that.

93
00:07:19.643 --> 00:07:25.158
Now, what happens if you're
not super vigilant here?

94
00:07:25.158 --> 00:07:31.085
Well, sometimes you forget to put the
override, I mean, it'd be easy to forget.

95
00:07:33.525 --> 00:07:36.670
Especially, let's say initially,

96
00:07:36.670 --> 00:07:41.097
there was no honk in car,
and then it was added later.

97
00:07:41.097 --> 00:07:46.299
What we can do in our tsconfig
is say noImplicitOverride,

98
00:07:46.299 --> 00:07:49.494
so I'm gonna add that to our notes.

99
00:07:52.311 --> 00:07:53.810
Notes/tsconfig.

100
00:07:55.816 --> 00:08:01.178
Let's add noImplicitOverride: true, save.

101
00:08:01.178 --> 00:08:06.765
And what happens here is if we're
lucky enough to not make the typo,

102
00:08:06.765 --> 00:08:13.055
we're prompted to add the override
modifier, We're told, hook this up.

103
00:08:13.055 --> 00:08:18.357
It's useful, it's here to help you,
it doesn't let you override unless

104
00:08:18.357 --> 00:08:24.266
you use this keyword, which is a great way
to ensure that it's consistently used.

105
00:08:24.266 --> 00:08:29.280
Now, you can always fat-finger
a method name from the start,

106
00:08:29.280 --> 00:08:33.632
and it's tough to help you
there like there's nothing

107
00:08:33.632 --> 00:08:38.663
TypeScript can do to understand
whether that was your intent.

108
00:08:38.663 --> 00:08:42.611
Or maybe you did want a method with
a different name, but once you get this

109
00:08:42.611 --> 00:08:46.909
right you can kind of establish it and
this will catch a lot of the other places.

110
00:08:46.909 --> 00:08:51.317
This is an amazing tool to help with
refactoring to make refactoring a lot

111
00:08:51.317 --> 00:08:51.906
easier.

