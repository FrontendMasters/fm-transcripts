WEBVTT

1
00:00:00.340 --> 00:00:03.830
All right, let's talk a little
bit about index signatures.

2
00:00:03.830 --> 00:00:07.060
So, and I like to start with
a motivating use case here.

3
00:00:08.350 --> 00:00:13.700
We have a hash or an object that contains
a variety of different phone numbers.

4
00:00:13.700 --> 00:00:16.810
We have home, we have work,
and we have fax.

5
00:00:16.810 --> 00:00:18.690
Let's imagine the app we're building.

6
00:00:18.690 --> 00:00:21.330
And this is the data for the app.

7
00:00:21.330 --> 00:00:25.350
We have an address book application where
you can have multiple phone numbers.

8
00:00:25.350 --> 00:00:28.045
Some of these we know the name of,
like home phone number,

9
00:00:28.045 --> 00:00:30.410
maybe you have a predefined slot for that.

10
00:00:30.410 --> 00:00:33.419
But perhaps you allow arbitrary
phone numbers to be added and

11
00:00:33.419 --> 00:00:35.430
you can choose whatever label you want.

12
00:00:35.430 --> 00:00:39.070
So there are some fixed things
that we expect to be there.

13
00:00:39.070 --> 00:00:42.568
But we want the capability to sort of add

14
00:00:42.568 --> 00:00:47.450
other things of a similar
shape to this phones object.

15
00:00:48.940 --> 00:00:52.760
So an index signature
lets us do just that.

16
00:00:54.590 --> 00:00:58.431
And I'm just gonna comment
this out real quick, and

17
00:00:58.431 --> 00:01:02.100
we'll put it all together in a moment.

18
00:01:02.100 --> 00:01:05.309
So what we're saying, so
here's the syntax for an index signature.

19
00:01:05.309 --> 00:01:10.437
In fact, I'm gonna make

20
00:01:10.437 --> 00:01:18.010
a even simpler version of it up here.

21
00:01:19.268 --> 00:01:23.492
So what we're saying here is that we have

22
00:01:23.492 --> 00:01:28.470
an arbitrary property key,
which is a string.

23
00:01:28.470 --> 00:01:31.890
So that's this part in
the square brackets.

24
00:01:34.100 --> 00:01:35.400
And its value is a string.

25
00:01:35.400 --> 00:01:41.513
So we could do, You could do that.

26
00:01:41.513 --> 00:01:43.085
But you couldn't do this.

27
00:01:44.662 --> 00:01:48.390
Cuz it's saying, Look, I want a string.

28
00:01:48.390 --> 00:01:50.450
You're giving me a number I want a string.

29
00:01:50.450 --> 00:01:54.210
We've built something kind of like
a dictionary here a little bit.

30
00:01:54.210 --> 00:01:57.953
An index signature is necessary in
order to define a dictionary right?

31
00:01:57.953 --> 00:02:02.786
Meaning a dictionary would be something
that it's a data structure that allows you

32
00:02:02.786 --> 00:02:06.388
to hold arbitrary values each
listed under a particular key.

33
00:02:10.080 --> 00:02:12.743
So, if we put this together.

34
00:02:13.952 --> 00:02:20.260
We can grab this type just like that,
get rid of that.

35
00:02:20.260 --> 00:02:24.963
Let's put it up here next to phones,
and now we can see,

36
00:02:27.230 --> 00:02:31.857
We could have phones.home and
look at that,

37
00:02:31.857 --> 00:02:36.374
country, area and number, we do this fax.

38
00:02:38.583 --> 00:02:39.820
And there it is.

39
00:02:39.820 --> 00:02:43.159
You could also do custom1.

40
00:02:44.290 --> 00:02:47.984
Now nowhere have I defined a field
like a property called custom1, but

41
00:02:47.984 --> 00:02:50.650
the index signature allows me to do this.

42
00:02:50.650 --> 00:02:54.340
You can actually combine
this with known properties.

43
00:02:54.340 --> 00:02:58.670
So if we were to do this I'm
gonna grab this type here.

44
00:03:00.150 --> 00:03:04.678
And let's say we always have mobile.

45
00:03:04.678 --> 00:03:06.646
We always have a mobile number.

46
00:03:08.701 --> 00:03:10.247
Actually, I'm gonna change this.

47
00:03:10.247 --> 00:03:12.098
No, I'll change the value here.

48
00:03:14.690 --> 00:03:18.130
Well, let's examine this error first.

49
00:03:18.130 --> 00:03:22.614
So what we're seeing is mobile
is missing in type, and

50
00:03:22.614 --> 00:03:29.070
then it lists the type of the value
on the right-hand side of equals.

51
00:03:29.070 --> 00:03:30.770
It's like what we're initializing this to.

52
00:03:32.010 --> 00:03:35.721
And it's saying, but
it's required in type, and

53
00:03:35.721 --> 00:03:39.100
then it lists the explicit
type declaration.

54
00:03:39.100 --> 00:03:40.610
How do I know which is which?

55
00:03:40.610 --> 00:03:42.300
Well, here's the word mobile.

56
00:03:42.300 --> 00:03:43.980
And it's nowhere in this type.

57
00:03:43.980 --> 00:03:47.180
There's home, work, and
fax, but no mobile.

58
00:03:47.180 --> 00:03:51.512
And so if we were to go down here, And

59
00:03:51.512 --> 00:03:54.150
change that to mobile,
now look what we get.

60
00:03:55.250 --> 00:04:00.374
Well, there's a mobile,
a known property there,

61
00:04:00.374 --> 00:04:05.990
but just as well,
we can do work, and there it is.

62
00:04:05.990 --> 00:04:10.748
So you can have an index signature on
top of explicitly defined fields and

63
00:04:10.748 --> 00:04:12.330
they both work.

64
00:04:12.330 --> 00:04:17.281
Now a convention I like to use when I'm
dealing with something like an index

65
00:04:17.281 --> 00:04:18.931
signature, I will, and

66
00:04:18.931 --> 00:04:24.740
there are some great TypeScript compiler
settings that will enforce this.

67
00:04:24.740 --> 00:04:30.110
When I'm reaching for a known property,
I will use dot notation.

68
00:04:30.110 --> 00:04:31.941
When I'm reaching into a dictionary.

69
00:04:31.941 --> 00:04:35.519
I will do something like this,
just to make it super clear.

70
00:04:38.436 --> 00:04:42.785
We'll talk more about those
compiler settings later but

71
00:04:42.785 --> 00:04:45.420
it's unchecked indexed access.

72
00:04:45.420 --> 00:04:48.101
And that would also that would account for

73
00:04:48.101 --> 00:04:51.559
the work phone number being
potentially undefined.

74
00:04:51.559 --> 00:04:56.248
I mean, it's here when we initialize it,

75
00:04:56.248 --> 00:05:01.340
but I can also reach for like this like.

76
00:05:01.340 --> 00:05:05.063
Right And

77
00:05:05.063 --> 00:05:09.890
we know that nothing's there for
aaaaa, right?

78
00:05:09.890 --> 00:05:13.648
There is no phone number here, but
TypeScript's acting like there is,

79
00:05:13.648 --> 00:05:17.100
because that's what our index
signature says is possible.

80
00:05:17.100 --> 00:05:21.371
So you kind of wanna do something
like this just to allow for

81
00:05:21.371 --> 00:05:24.610
the possibility that
it might not be there.

82
00:05:24.610 --> 00:05:28.535
But again this compiler setting
which is no unchecked index access,

83
00:05:28.535 --> 00:05:32.134
if you went into your TS config,
it would convert this for you.

84
00:05:32.134 --> 00:05:39.040
It would make sure that you you kind of
stick to this convention .notation for

85
00:05:39.040 --> 00:05:43.398
known properties,
square bracket notation for

86
00:05:43.398 --> 00:05:49.370
index field access, Gitano asks,
can we do the string or mobile?

87
00:05:50.440 --> 00:05:55.369
I mean we could, we'll talk more about
like union and intersection types,

88
00:05:55.369 --> 00:05:57.430
which is what this is.

89
00:05:57.430 --> 00:06:01.989
When we say String or mobile,
we're really just saying string.

90
00:06:03.540 --> 00:06:09.850
It could be the specific string mobile,
or it could be any string at all.

91
00:06:09.850 --> 00:06:12.630
Well, we're kind of back
to any string at all.

92
00:06:12.630 --> 00:06:14.660
It's almost like a multiply by zero thing.

93
00:06:14.660 --> 00:06:19.919
Mobile just sort of falls away,
cuz it's it is a subtype of string, so

94
00:06:19.919 --> 00:06:25.897
you end up with just string Yeah,

95
00:06:25.897 --> 00:06:31.070
LJ asks in chat,
why would we have square bracket notation?

96
00:06:31.070 --> 00:06:34.446
Why would we have index fields when
they're not easily accessible using

97
00:06:34.446 --> 00:06:35.550
.notation?

98
00:06:35.550 --> 00:06:39.290
LJ, really it's a data modeling need.

99
00:06:39.290 --> 00:06:45.690
Sometimes you have a need to
define a dictionary like this.

100
00:06:45.690 --> 00:06:50.739
So at Stripe for example,
in our API you would see things like

101
00:06:50.739 --> 00:06:56.283
currencies represented using
an object where you might see USD and

102
00:06:56.283 --> 00:07:01.332
then a number and then JPY for
Japanese yen and then a number or

103
00:07:01.332 --> 00:07:05.096
something representing a currency amount.

104
00:07:05.096 --> 00:07:07.581
And you might have a bunch of these, and

105
00:07:07.581 --> 00:07:11.057
you want to be able to reference
them by a name, right?

106
00:07:11.057 --> 00:07:15.706
As opposed to like an array of objects and
searching, ffilter for

107
00:07:15.706 --> 00:07:18.420
the one with type equals JPY, right?

108
00:07:18.420 --> 00:07:20.820
That's, it doesn't really add any value.

109
00:07:20.820 --> 00:07:23.960
And there's no value in ordering them,
which is what an array is all about.

110
00:07:23.960 --> 00:07:29.160
There's some positioning implication
there that's not meaningful.

111
00:07:29.160 --> 00:07:32.737
So sometimes it makes sense
to model things this way, but

112
00:07:32.737 --> 00:07:37.820
you need to be prepared for a variety of
different keys and values to be present.

113
00:07:37.820 --> 00:07:41.490
It's really just a different
collection type.

114
00:07:41.490 --> 00:07:46.630
Ilka asks, how do we tackle JSON
types that come with an API call?

115
00:07:46.630 --> 00:07:48.240
We'll talk a little bit about that later.

116
00:07:49.980 --> 00:07:54.097
And in particular, you should check
out my full-stack TypeScript course,

117
00:07:54.097 --> 00:07:58.560
where we actually have strongly-typed
contracts between frontend and backend.

118
00:07:58.560 --> 00:08:03.237
Yeah, Enrique, you're mentioning unknown
type, that's part of it, but also type

119
00:08:03.237 --> 00:08:07.220
guards that help you get from unknown
type down to something more useful.

