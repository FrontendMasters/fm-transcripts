WEBVTT

1
00:00:00.370 --> 00:00:02.540
All right,
let's talk a little bit about interfaces.

2
00:00:02.540 --> 00:00:06.460
This is the other option here for
giving your type a name.

3
00:00:06.460 --> 00:00:10.954
And we can do something very similar here,
in the sense that we can make our

4
00:00:10.954 --> 00:00:15.450
printAmount function, and if we look
at amt, we've got the currency and

5
00:00:15.450 --> 00:00:19.050
the value in there, so
we are giving a type a name.

6
00:00:19.050 --> 00:00:21.336
Note that there's no equals sign here,

7
00:00:21.336 --> 00:00:24.642
this would be invalid syntax
if we put an equals sign here.

8
00:00:24.642 --> 00:00:27.840
We would say this is
an interface declaration.

9
00:00:27.840 --> 00:00:34.880
Interfaces cannot model every possible
type that TypeScript can create.

10
00:00:34.880 --> 00:00:39.010
So for example, I can't do this, I cannot.

11
00:00:39.010 --> 00:00:42.436
I can't create a union
type in an interface,

12
00:00:42.436 --> 00:00:45.750
at least not on this outer object.

13
00:00:45.750 --> 00:00:53.252
I could do like this, but we've got to
make sure that this thing is object-ish.

14
00:00:55.346 --> 00:01:01.327
And part of that has to do with one of
the key reasons that you would reach for

15
00:01:01.327 --> 00:01:02.591
an interface.

16
00:01:06.121 --> 00:01:10.067
So, that is for inheritance.

17
00:01:11.130 --> 00:01:16.640
So the first thing we're going to talk
about is the extends keyword, right?

18
00:01:16.640 --> 00:01:22.040
So this is one of the two heritage
clauses that TypeScript allows.

19
00:01:22.040 --> 00:01:27.100
Extends is one, implements is the other,
but they both describe inheritance.

20
00:01:27.100 --> 00:01:32.960
So first I wanna remind you of the regular
JavaScript extends behavior, right?

21
00:01:32.960 --> 00:01:38.040
We've got a base class AnimalThatEats,
it takes in a food.

22
00:01:38.040 --> 00:01:42.040
Let's say that's a string
representing the type of food,

23
00:01:42.040 --> 00:01:44.520
just make those type errors go away.

24
00:01:46.030 --> 00:01:51.224
And then we can create a Cat
that extends AnimalThatEats,

25
00:01:51.224 --> 00:01:56.080
and we get a new method
on there where it meows.

26
00:01:56.080 --> 00:01:59.260
So if we create the Cat, it can eat.

27
00:02:00.800 --> 00:02:03.077
I mean, we haven't invoked.

28
00:02:03.077 --> 00:02:05.650
I guess, cats eat cat food.

29
00:02:05.650 --> 00:02:08.100
And then we can make it meow.

30
00:02:08.100 --> 00:02:11.040
So this is just JavaScript
classes at work here.

31
00:02:12.360 --> 00:02:14.434
Here's how it works with interfaces.

32
00:02:19.078 --> 00:02:22.800
All right, we're gonna define
an interface called Animal.

33
00:02:22.800 --> 00:02:27.748
Now note, interfaces don't have a body,
I couldn't implement a method here,

34
00:02:27.748 --> 00:02:29.450
they're just types.

35
00:02:29.450 --> 00:02:32.741
They kind of look like
classes a little bit, but

36
00:02:32.741 --> 00:02:36.128
it's like a class without
the implementation.

37
00:02:36.128 --> 00:02:38.370
You can't instantiate an interface.

38
00:02:38.370 --> 00:02:42.500
You're just kind of describing fields and
methods, things of that nature.

39
00:02:42.500 --> 00:02:44.597
So we can create one that's Animal,

40
00:02:44.597 --> 00:02:48.390
we can create another interface
that sort of extends Animal.

41
00:02:48.390 --> 00:02:55.409
So mammals, they are alive,
they have fur or hair color.

42
00:02:55.409 --> 00:02:57.968
I don't know if all mammals have fur or
hair, but.

43
00:02:57.968 --> 00:03:01.370
And then a Hamster is a mammal,
and a hamster squeaks, and so

44
00:03:01.370 --> 00:03:04.588
we can extend it one more time,
and look at what we can do.

45
00:03:04.588 --> 00:03:09.873
We've got careForHamster, and I've got
all of that functionality on here.

46
00:03:12.158 --> 00:03:14.040
So that's extends.

47
00:03:14.040 --> 00:03:19.024
And the mental model here is, in classes,

48
00:03:19.024 --> 00:03:23.875
you can have a class that extends a class.

49
00:03:23.875 --> 00:03:27.453
And you can have an interface
that extends an interface.

50
00:03:27.453 --> 00:03:31.109
So extends is for like things.

51
00:03:31.109 --> 00:03:34.930
We're gonna talk about
implements in a second,

52
00:03:34.930 --> 00:03:38.970
which allows a class to
implement an interface.

53
00:03:38.970 --> 00:03:43.827
But extends is the one you reach for
when it's like things, class for

54
00:03:43.827 --> 00:03:46.350
class, interface for interface.

55
00:03:47.773 --> 00:03:51.070
All right, let's talk about implements.

56
00:03:51.070 --> 00:03:54.952
So, here we've got
an interface AnimalLike,

57
00:03:54.952 --> 00:04:01.162
we'll make this string again, and
we've got Dog implements AnimalLike,

58
00:04:01.162 --> 00:04:05.250
and we've got the Dog barks,
what's the error?

59
00:04:06.680 --> 00:04:11.090
Dog incorrectly implements interface,
AnimalLike.

60
00:04:11.090 --> 00:04:16.560
Property eat is missing in type Dog but
required in type AnimalLike.

61
00:04:16.560 --> 00:04:21.318
So what we're seeing here is
that an interface represents

62
00:04:21.318 --> 00:04:24.870
a contract that Dog must adhere to.

63
00:04:24.870 --> 00:04:30.135
If you implement AnimalLike,
you gotta flesh out eat,

64
00:04:30.135 --> 00:04:33.920
we gotta create a method in there.

65
00:04:33.920 --> 00:04:37.344
So we could explicitly create it or
I'm sure VS Code, yep,

66
00:04:37.344 --> 00:04:40.231
there you go,
implement interface and all like.

67
00:04:40.231 --> 00:04:43.102
So it'll create this for us, right?

68
00:04:43.102 --> 00:04:48.380
Anything that you're missing,
VS Code will populate that for you.

69
00:04:48.380 --> 00:04:53.347
And it's gonna start with
"Method- not- implemented",

70
00:04:53.347 --> 00:04:57.941
but I think we had a function,
consumeFood will do that.

71
00:04:59.876 --> 00:05:02.993
And so now Dog is happy.

72
00:05:02.993 --> 00:05:07.226
Implements is about using
an interface to define

73
00:05:07.226 --> 00:05:11.040
a contract that a class must adhere to.

74
00:05:11.040 --> 00:05:15.389
Now I'm gonna loop back to when I said,
interfaces can't be used

75
00:05:15.389 --> 00:05:19.880
to describe any old type that
you can create in TypeScript.

76
00:05:19.880 --> 00:05:24.373
Well, what would it mean to
have something like this?

77
00:05:31.693 --> 00:05:32.996
Something like that,

78
00:05:32.996 --> 00:05:36.779
it starts to get really confusing
as to what this sorta even mean.

79
00:05:36.779 --> 00:05:40.729
Dog implements null, can we do that?

80
00:05:41.920 --> 00:05:45.990
What does it mean for
an instance of this class to be a null?

81
00:05:45.990 --> 00:05:47.480
It doesn't make any sense.

82
00:05:47.480 --> 00:05:50.361
There are certain minimum
requirements we have for like,

83
00:05:50.361 --> 00:05:52.960
what does an instance
of a class look like?

84
00:05:52.960 --> 00:05:56.450
And that requires that it
is an object type, right?

85
00:05:56.450 --> 00:05:59.510
So there are some things
that an interface can't do.

86
00:05:59.510 --> 00:06:01.544
Let's put all of this together.

87
00:06:01.544 --> 00:06:05.110
So we've got a living organism.

88
00:06:05.110 --> 00:06:07.191
It's just another version
of our AnimalLike.

89
00:06:07.191 --> 00:06:12.625
We've got CanBark, And here we go.

90
00:06:12.625 --> 00:06:17.280
But we can have Dog2, it's another class,
just so I don't collide with my first one.

91
00:06:17.280 --> 00:06:20.329
But we can extend LivingOrganism,
which is a base class.

92
00:06:20.329 --> 00:06:24.229
Remember extends,
classes extend other classes.

93
00:06:24.229 --> 00:06:29.140
And then we can have it implement
two interfaces if we like.

94
00:06:30.630 --> 00:06:36.550
And we've got bark, we've got eat,
make that a string again.

95
00:06:37.580 --> 00:06:42.522
So if we break this down, so
we extend LivingOrganism,

96
00:06:42.522 --> 00:06:46.106
so we get isAlive, we get that for free.

97
00:06:46.106 --> 00:06:50.291
isAlive is not in this class specifically,
it's in the base class,

98
00:06:50.291 --> 00:06:52.537
we get it cuz it's in the base class.

99
00:06:52.537 --> 00:06:57.865
AnimalLike is an interface that
requires an isAlive method.

100
00:06:57.865 --> 00:07:00.229
There it is, no, sorry, it's eat.

101
00:07:04.536 --> 00:07:08.277
Yeah, it's eat, so we get isAlive.

102
00:07:10.423 --> 00:07:12.996
Did we have another interface
up here that was isAlive?

103
00:07:12.996 --> 00:07:20.051
Animal, we could add that one too, Right?

104
00:07:20.051 --> 00:07:24.135
Yeah, we make Animal happy
because this base class, I mean,

105
00:07:24.135 --> 00:07:27.761
we already have the method
that Animal wants, right?

106
00:07:27.761 --> 00:07:34.712
AnimalLike requires us to have,
what was it?

107
00:07:34.712 --> 00:07:39.575
Eat, and we have our eat.

108
00:07:39.575 --> 00:07:43.557
CanBark requires the bark,
and so it's there.

109
00:07:43.557 --> 00:07:47.766
So these all represent kind of
contracts that this class and

110
00:07:47.766 --> 00:07:50.720
its base classes must live up to, right?

111
00:07:50.720 --> 00:07:54.109
Whatever the reified class is,
when you flatten out the class,

112
00:07:54.109 --> 00:07:57.058
what methods are on this,
what properties are on this,

113
00:07:57.058 --> 00:08:00.472
regardless of where they came from,
a base class or this class.

114
00:08:00.472 --> 00:08:04.792
And then this is where we're actually
building on top of a fully-defined class

115
00:08:04.792 --> 00:08:09.470
that has methods and has class fields and
has those kinds of things.

116
00:08:09.470 --> 00:08:14.298
But you can use them all together,
these are both kinds of heritage clauses,

117
00:08:14.298 --> 00:08:19.360
just meaning it has to do with inheritance
that are supported in TypeScript.

118
00:08:19.360 --> 00:08:24.138
And Michael asks, could we use extends
instead of implements for the Dog2?

119
00:08:26.902 --> 00:08:32.729
Michael, what would you have
me extend here or implement?

120
00:08:32.729 --> 00:08:38.830
This here is a list of interfaces,
and this is a class.

121
00:08:38.830 --> 00:08:44.150
So if we put an interface up here, Well,

122
00:08:44.150 --> 00:08:49.390
first you can't because TypeScript
doesn't allow true multiple

123
00:08:49.390 --> 00:08:54.890
inheritance, which would be like
I have multiple base things.

124
00:08:54.890 --> 00:08:58.770
So even if it allowed that,
AnimalLike is not a class, and so

125
00:08:58.770 --> 00:09:00.683
we couldn't put it up there.

126
00:09:00.683 --> 00:09:05.763
So at most you can have one extends,
but you can have as many

127
00:09:05.763 --> 00:09:10.855
implements as you like, and
they must all be interfaces.

128
00:09:10.855 --> 00:09:14.620
So you couldn't do,
I don't think you could do this.

129
00:09:16.060 --> 00:09:18.728
I can think of a way it
could possibly work.

130
00:09:24.673 --> 00:09:27.850
Yeah, it is working here.

131
00:09:27.850 --> 00:09:32.140
What's happening here is,
classes are two things.

132
00:09:33.240 --> 00:09:38.178
There's a class which has a value,
the function that you call new on, and

133
00:09:38.178 --> 00:09:44.300
then there's an interface, which is what
is the shape of an instance of the class?

134
00:09:44.300 --> 00:09:47.990
It's actually both things
sandwiched on top of each other.

135
00:09:47.990 --> 00:09:51.850
So when you're using living
organism in this position here,

136
00:09:51.850 --> 00:09:55.430
you're using the interface
side of the class.

137
00:09:55.430 --> 00:09:59.782
If you want to learn more about this,
take the intermediate TypeScript course,

138
00:09:59.782 --> 00:10:02.670
where we will discuss declaration merging.

139
00:10:02.670 --> 00:10:05.900
And that's where we can learn how
are these things sandwiched on top of

140
00:10:05.900 --> 00:10:06.510
each other.

141
00:10:07.860 --> 00:10:11.409
Just know that what we're seeing here,
though,

142
00:10:11.409 --> 00:10:15.890
is we incorrectly implement
the interface here.

143
00:10:15.890 --> 00:10:19.530
isAlive is missing, why is it missing?

144
00:10:19.530 --> 00:10:21.948
All that LivingOrganism is giving us,

145
00:10:21.948 --> 00:10:26.990
it's basically giving us just the isAlive
function that returns a Boolean.

146
00:10:26.990 --> 00:10:30.656
It doesn't give us the implementation
function, it kinda just gives us this.

147
00:10:33.936 --> 00:10:40.860
So, this isAlive thing, it's not giving
us functionality from LivingOrganism.

148
00:10:40.860 --> 00:10:46.324
It's imposing a new requirement on us
to implement our own isAlive function,

149
00:10:46.324 --> 00:10:50.401
which returns a Boolean,
it would be equivalent to this.

150
00:10:50.401 --> 00:10:55.895
That's effectively what's happening here,
it's now being used.

151
00:10:55.895 --> 00:11:01.045
The type of the class is being used as
an interface as opposed to using it

152
00:11:01.045 --> 00:11:06.896
as a base class, which gives us real
object-oriented inheritance with like,

153
00:11:06.896 --> 00:11:12.079
the method is there, if you trace
prototypes back, you would see it.

154
00:11:15.337 --> 00:11:17.673
A nuanced question, I thought it might or

155
00:11:17.673 --> 00:11:21.750
might not work cuz I could think of
good reasons for both, but yeah.

156
00:11:21.750 --> 00:11:26.918
&gt;&gt; So
would you wanna make an interface for

157
00:11:26.918 --> 00:11:33.181
Dog that just combines those three,
and then,

158
00:11:33.181 --> 00:11:38.958
rather than implements a list of three-
&gt;&gt; You could.

159
00:11:38.958 --> 00:11:41.823
&gt;&gt; Is there a point to doing that,
or was it just-

160
00:11:41.823 --> 00:11:42.739
&gt;&gt; Sometimes.

161
00:11:42.739 --> 00:11:45.255
&gt;&gt; Okay.
&gt;&gt; So we would do this.

162
00:11:49.554 --> 00:11:50.976
Something like that.

163
00:11:54.446 --> 00:11:59.460
But, because it's like, right,
interfaces don't implement interfaces.

164
00:11:59.460 --> 00:12:01.600
Interfaces have no implementation.

165
00:12:03.327 --> 00:12:07.404
So we'd use extenss, now we've got
DogLike, and we could do this.

166
00:12:10.223 --> 00:12:11.870
Now, why might we do this?

167
00:12:11.870 --> 00:12:16.890
Well, it's conceivable that
there could be other things

168
00:12:16.890 --> 00:12:22.115
that are Dog-shaped and
we want people to be able to use those

169
00:12:22.115 --> 00:12:26.940
in ways that don't require
it to be specifically a dog.

170
00:12:28.210 --> 00:12:29.850
I'll show you an example, and

171
00:12:29.850 --> 00:12:33.078
we're gonna look at some really
narrowly TypeScript code.

172
00:12:33.078 --> 00:12:35.320
There's our interface for Promise.

173
00:12:35.320 --> 00:12:39.217
I've got my dot then, I've got my catch,

174
00:12:39.217 --> 00:12:43.416
we also have PromiseLike,
which is just dot then.

175
00:12:45.153 --> 00:12:48.889
So sometimes you wanna say,
look, all I need for

176
00:12:48.889 --> 00:12:54.650
Promise chaining is then, I can actually
await something with a dot then.

177
00:12:56.300 --> 00:12:58.285
I don't need the dot catch to be there.

178
00:12:58.285 --> 00:13:01.190
I may not need the dot
finally to be there.

179
00:13:02.510 --> 00:13:06.888
So this is an example of teasing
out the very essence of something,

180
00:13:06.888 --> 00:13:11.190
even though any given real promise
that you're passing around,

181
00:13:11.190 --> 00:13:16.586
be it a native promise that's part of what
the JavaScript language now provides,

182
00:13:16.586 --> 00:13:20.860
or there used to be libraries
you'd bring in for promises.

183
00:13:20.860 --> 00:13:24.123
They could all conform to this, and
it didn't matter if you were using

184
00:13:24.123 --> 00:13:27.883
like some libraries promise or a native
promise or whatever, as long as they're

185
00:13:27.883 --> 00:13:32.020
all promise-like, you can sort of
interchange them for each other, right?

186
00:13:32.020 --> 00:13:35.094
That's when you would wanna tease
out an interface like this,

187
00:13:35.094 --> 00:13:37.140
that would be the benefit, right?

188
00:13:37.140 --> 00:13:41.454
Let's say you're like, look, I've got
a bunch of different libraries that do dog

189
00:13:41.454 --> 00:13:44.675
things, they have different ways
of modeling them maybe, but

190
00:13:44.675 --> 00:13:47.320
they all have to conform to this.

191
00:13:47.320 --> 00:13:51.360
And maybe this is my dog,
the way I think about dog.

192
00:13:51.360 --> 00:13:53.909
And as long as it implements DogLike,

193
00:13:53.909 --> 00:13:59.100
I can have a bunch of functions out there
that just require a dog-like thing.

194
00:14:00.170 --> 00:14:03.161
And they'll work with anybody
who conforms to that interface.

195
00:14:03.161 --> 00:14:06.630
That's one of the powers of
structural typing, right?

196
00:14:06.630 --> 00:14:09.441
It doesn't have to come
from this constructor,

197
00:14:09.441 --> 00:14:12.950
it can be anything that
describes the right shape.

198
00:14:12.950 --> 00:14:18.490
And this is an example of sort of
flattening a bunch of interfaces together.

199
00:14:18.490 --> 00:14:24.880
And you could expose that outside of this
library, nobody needs to worry about this.

200
00:14:24.880 --> 00:14:26.540
They just know it's a DogLike thing.

201
00:14:26.540 --> 00:14:29.180
And these could be a bunch of
very granular little things

202
00:14:29.180 --> 00:14:31.770
that you're sorta stacking up one by one.

203
00:14:31.770 --> 00:14:35.512
But they're just gonna grab DogLike,
does that make sense?

204
00:14:35.512 --> 00:14:36.489
&gt;&gt; Yeah.

205
00:14:41.114 --> 00:14:47.624
&gt;&gt; Mohd, M-O-H-D, you're asking, can we
do class extends class extends class?

206
00:14:47.624 --> 00:14:49.780
That's a good question.

207
00:14:49.780 --> 00:14:51.609
Technically, yes, I think.

208
00:15:02.552 --> 00:15:06.045
Not allowed in the same, yeah, see.

209
00:15:08.162 --> 00:15:10.716
You can create anonymous classes.

210
00:15:13.156 --> 00:15:18.113
You could do that, [LAUGH], but this is
some weird code here that technically

211
00:15:18.113 --> 00:15:22.840
works, cuz this is just an expression
here that gives you a class.

212
00:15:22.840 --> 00:15:27.778
And then this is another
expression that gives you a class,

213
00:15:27.778 --> 00:15:33.281
effectively, but, I wouldn't.

214
00:15:35.263 --> 00:15:41.442
Many things are possible,
let's talk about advisable things [LAUGH].

215
00:15:41.442 --> 00:15:44.259
All right, okay moving on.

216
00:15:44.259 --> 00:15:48.095
Let's talk a little bit
about type aliases, again,

217
00:15:48.095 --> 00:15:50.403
and how they work with classes.

218
00:15:50.403 --> 00:15:55.507
So we'll have a type alias called
CanJump and we'll say we can jump to

219
00:15:55.507 --> 00:16:01.053
a height that is a number, let's say
in inches or meters or whatever it is.

220
00:16:01.053 --> 00:16:06.346
And we've got another Dog class,
Dog3, it's gonna eat food,

221
00:16:06.346 --> 00:16:12.423
that's a string, and jump to height,
it's always gonna return 1.7.

222
00:16:12.423 --> 00:16:20.275
That's great, and if we were to introduce
this, I think everything's still okay.

223
00:16:25.224 --> 00:16:29.443
And this is because we're
introducing a union type that,

224
00:16:29.443 --> 00:16:33.243
well, first off,
we're conforming to this type.

225
00:16:33.243 --> 00:16:38.940
jumpToHeight must return either
a number or a tuple of two numbers.

226
00:16:38.940 --> 00:16:40.550
We're being a little more specific here.

227
00:16:40.550 --> 00:16:43.193
We only return a number from this class,

228
00:16:43.193 --> 00:16:46.700
but it's enough to conform
to this interface.

229
00:16:46.700 --> 00:16:50.140
We're not obligated to
handle all possibilities.

230
00:16:50.140 --> 00:16:54.494
All that matters is the return
type of this function,

231
00:16:54.494 --> 00:17:01.090
is the set of all numbers allowed in the
set represented by this, and yes, it is.

232
00:17:02.170 --> 00:17:06.937
It's a specific set, doesn't include
any of the tuples, but it's in there,

233
00:17:06.937 --> 00:17:08.660
all numbers are in that set.

234
00:17:09.680 --> 00:17:13.756
All right, so
let's replace that type, CanBark.

235
00:17:17.205 --> 00:17:23.861
Sorry, CanJump, We'll add this,
this is a new type alias.

236
00:17:29.274 --> 00:17:33.404
I'm gonna call it CanBark2,
and let's try this.

237
00:17:37.960 --> 00:17:42.242
So, what we've got here,
CanBark2 is a number,

238
00:17:42.242 --> 00:17:48.129
think of it that way, although adding
that first pipe is not harmful.

239
00:17:49.130 --> 00:17:53.140
It's a number or this object,
and we're having a problem here.

240
00:17:53.140 --> 00:17:55.705
A class can only implement
an object type or

241
00:17:55.705 --> 00:17:59.930
intersection of object types
with statically known members.

242
00:17:59.930 --> 00:18:02.400
So number is not an object type,

243
00:18:02.400 --> 00:18:06.891
we can't have a class that extends or
implements number.

244
00:18:08.512 --> 00:18:13.810
This is why I wouldn't advise using
type aliases this way, you can use them.

245
00:18:13.810 --> 00:18:17.170
You can get lucky or be careful,
however you wanna think about it.

246
00:18:17.170 --> 00:18:20.300
CanJump is not causing us any problems.

247
00:18:20.300 --> 00:18:23.970
We could just as easily create
an interface called CanJump with the same

248
00:18:23.970 --> 00:18:25.310
method in it.

249
00:18:25.310 --> 00:18:27.270
It's an object type either way.

250
00:18:27.270 --> 00:18:30.955
TypeScript actually doesn't
care where these come from,

251
00:18:30.955 --> 00:18:34.170
whether they're interfaces or
type aliases.

252
00:18:34.170 --> 00:18:35.992
But when it resolves them,

253
00:18:35.992 --> 00:18:40.780
they must be the kind of thing that
can model an instance of a class.

254
00:18:40.780 --> 00:18:44.853
And having the possibility that
the instance of a class is a number,

255
00:18:44.853 --> 00:18:47.060
that's off, that's weird.

256
00:18:47.060 --> 00:18:48.912
We won't allow that.

257
00:18:48.912 --> 00:18:52.852
So this is why,
if you intend to use it, type this way,

258
00:18:52.852 --> 00:18:58.342
I would advise making it an interface
because it'll appropriately bust you

259
00:18:58.342 --> 00:19:05.090
if you start doing things that are just
incompatible with the implements keyword.

260
00:19:05.090 --> 00:19:09.430
Interfaces will always be compatible
with the implements keyword.

261
00:19:09.430 --> 00:19:13.670
The rules you have for
what you can use interfaces to describe,

262
00:19:13.670 --> 00:19:19.010
inherently, it is like exactly what
can be on an instance of a class.

263
00:19:19.010 --> 00:19:24.789
LJ says, basically don't use type for
what you would use interfaces for.

264
00:19:24.789 --> 00:19:29.335
Yeah, I think that's another way
of saying what I'm saying here,

265
00:19:29.335 --> 00:19:32.385
if you're gonna do this, use an interface.

