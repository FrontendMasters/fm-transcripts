WEBVTT

1
00:00:00.120 --> 00:00:05.660
All right, the last thing I want to wrap
up with here is just best practices for

2
00:00:05.660 --> 00:00:06.990
functions.

3
00:00:06.990 --> 00:00:13.258
So first, I feel like I have
some dead code in there.

4
00:00:13.258 --> 00:00:18.010
I do, this shouldn't be in here,
sorry, folks.

5
00:00:21.192 --> 00:00:26.641
So here's an example that illustrates why

6
00:00:26.641 --> 00:00:32.910
having explicit return types is valuable.

7
00:00:32.910 --> 00:00:38.110
So let's say that we have
a function as follows.

8
00:00:38.110 --> 00:00:42.258
And here, we're sort of like awaiting a
response to come back from the fetch that

9
00:00:42.258 --> 00:00:43.113
we're making.

10
00:00:43.113 --> 00:00:46.241
And then here, we're saying,
okay, let's wait for

11
00:00:46.241 --> 00:00:49.982
the last byte of the response to come in,
serialize it into JSON.

12
00:00:49.982 --> 00:00:52.370
So wait for all of that to happen.

13
00:00:52.370 --> 00:00:56.860
And get the data here,
properties, it's a string array.

14
00:00:56.860 --> 00:01:01.650
And here we're gonna load the data,
which is calling this getData function.

15
00:01:01.650 --> 00:01:04.773
So what if we were to add a branch or

16
00:01:04.773 --> 00:01:10.462
a condition around this that says okay,
I only wanna wait for

17
00:01:10.462 --> 00:01:16.510
the data to come in and
to return it if the response is okay?

18
00:01:16.510 --> 00:01:21.853
If I have a status code that is below 400,
right?

19
00:01:23.762 --> 00:01:28.930
So I get an error here,
says result is possibly undefined.

20
00:01:31.060 --> 00:01:38.730
And this is where I would say the error's
popping up in the wrong place.

21
00:01:38.730 --> 00:01:41.500
It's not an ideal place for
the error to pop up.

22
00:01:41.500 --> 00:01:46.759
Because, imagine that getData is used in
100 places throughout a piece of code.

23
00:01:46.759 --> 00:01:51.490
And we just added that little change, and
now errors light up all over the place.

24
00:01:51.490 --> 00:01:55.879
We're gonna have to go to those call
sites and track down what's going on.

25
00:01:57.160 --> 00:01:58.810
Figure out what's happening here.

26
00:01:58.810 --> 00:02:00.912
If we have an explicit return type,

27
00:02:00.912 --> 00:02:04.286
we could surface an error
right at the declaration site.

28
00:02:04.286 --> 00:02:05.647
And what it would look
like is the following.

29
00:02:08.125 --> 00:02:14.101
It's a promise, and
we'll talk about this syntax in a bit.

30
00:02:14.101 --> 00:02:16.157
It's a promise that resolves to,

31
00:02:21.781 --> 00:02:28.141
An object containing
a properties field and a string.

32
00:02:28.141 --> 00:02:31.850
If you look down here,
error is not popping up here anymore.

33
00:02:31.850 --> 00:02:35.454
So we're effectively saying we have
an upfront commitment to return

34
00:02:35.454 --> 00:02:37.410
a particular thing.

35
00:02:37.410 --> 00:02:40.050
And we have not lived
up to that commitment.

36
00:02:40.050 --> 00:02:44.691
And now we've got not 100 errors,
we've got one error,

37
00:02:44.691 --> 00:02:47.430
and that one error is actionable.

38
00:02:47.430 --> 00:02:51.009
It's in the place where
a fix needs to happen.

39
00:02:51.009 --> 00:02:55.307
I mean, if you wanted to intentionally
return an undefined, I would advise

40
00:02:55.307 --> 00:03:00.050
that you explicitly state so here, and
then go and fix all of the call sites.

41
00:03:00.050 --> 00:03:03.750
But to me, this is a lot more useful.

42
00:03:03.750 --> 00:03:09.730
And it's why I sort of have a bias
towards explicit function return types.

43
00:03:09.730 --> 00:03:13.200
I've just gone on the wild
goose chase too many times.

44
00:03:13.200 --> 00:03:17.351
And this is just,
regardless of what your preference is,

45
00:03:17.351 --> 00:03:22.870
I think there's a point where searching
around for the source of a bug.

46
00:03:22.870 --> 00:03:26.252
Like there's a point where
this kind of pays for itself,

47
00:03:26.252 --> 00:03:30.555
even if it looks ugly to you and
feels like it's extra typing to provide.

