WEBVTT

1
00:00:00.310 --> 00:00:02.583
Interfaces are open.

2
00:00:02.583 --> 00:00:06.145
You may have heard this before if
you've read a TypeScript book or

3
00:00:06.145 --> 00:00:07.261
something like it.

4
00:00:07.261 --> 00:00:10.170
So let's explore what that means.

5
00:00:11.310 --> 00:00:17.365
So we've got a function called feed,
and we feed an animal.

6
00:00:17.365 --> 00:00:22.951
And in our case,
AnimalLike just has this eat method on it,

7
00:00:22.951 --> 00:00:26.430
but let's say that we wanna do this.

8
00:00:26.430 --> 00:00:28.419
This is a little morbid, sorry.

9
00:00:33.688 --> 00:00:35.352
Something like that.

10
00:00:38.960 --> 00:00:41.729
We have no isAlive method here.

11
00:00:42.870 --> 00:00:49.899
And let's say we were importing this alias
from a library where we can't go and

12
00:00:49.899 --> 00:00:55.850
change it, necessarily, but
we wanna sort of augment it.

13
00:00:55.850 --> 00:01:00.283
Well, the fact that interfaces
are open means that we can have

14
00:01:00.283 --> 00:01:03.020
a second declaration here.

15
00:01:03.020 --> 00:01:05.712
You know how if we were to
create a variable x and

16
00:01:05.712 --> 00:01:10.337
then another variable x right below it,
another declaration of the same name,

17
00:01:10.337 --> 00:01:15.210
JavaScript, ESLint would bark at you for
that, TypeScript certainly will.

18
00:01:15.210 --> 00:01:20.830
You're not allowed to redeclare most
things, but you can redeclare interfaces.

19
00:01:20.830 --> 00:01:25.404
And what ends up happening is all of
the interface declarations kind of get

20
00:01:25.404 --> 00:01:26.670
smushed together.

21
00:01:27.690 --> 00:01:31.646
And it's important to understand
that when we do this,

22
00:01:31.646 --> 00:01:36.276
we're doing this everywhere
the AnimalLike interface is used,

23
00:01:36.276 --> 00:01:41.970
meaning, because this is now in this
file and TypeScript has read this.

24
00:01:41.970 --> 00:01:46.269
If we go back up here to our other
AnimalLike stuff, we've got Dog2.

25
00:01:48.670 --> 00:01:52.130
Oops, I think we had
isAlive in there as it was.

26
00:01:52.130 --> 00:01:56.695
But just the way I want you to think
about it is there's one place where

27
00:01:56.695 --> 00:02:01.820
the compiler is keeping track of
what does it mean to be AnimalLike.

28
00:02:01.820 --> 00:02:04.755
And what we've done here is effectively,

29
00:02:04.755 --> 00:02:08.515
we have modified that
everywhere AnimalLike is used.

30
00:02:08.515 --> 00:02:13.461
It's this one central thing, and
everywhere we see AnimalLike,

31
00:02:13.461 --> 00:02:15.410
it now has isAlive.

32
00:02:15.410 --> 00:02:19.230
This is useful because sometimes
you get a type from a library or

33
00:02:19.230 --> 00:02:23.700
a type from the built-in things,
the types that describe the JavaScript

34
00:02:23.700 --> 00:02:28.407
programming language, like that promise
type that we were just looking at.

35
00:02:28.407 --> 00:02:31.100
And maybe you wanna add something to it.

36
00:02:31.100 --> 00:02:33.790
Well, you can do that
with open interfaces.

37
00:02:33.790 --> 00:02:37.941
You can kind of stack things on
top of an existing interface.

38
00:02:41.685 --> 00:02:45.894
So let's look at that use case where
we're augmenting existing types.

39
00:02:47.349 --> 00:02:51.934
So here we've got window,
which is if you're writing code for

40
00:02:51.934 --> 00:02:56.434
a browser, like window.cookie here,
window.document,

41
00:02:56.434 --> 00:03:01.480
right, it's this global object
that's available to you.

42
00:03:01.480 --> 00:03:06.574
And if we wanted to add a property
to window, I wouldn't advise

43
00:03:06.574 --> 00:03:11.571
doing this too much like globals
programming is fraught, but

44
00:03:11.571 --> 00:03:16.684
say you wanted to do something here,
add an example property.

45
00:03:16.684 --> 00:03:20.973
Well, we could do this, and there's some
syntax here we haven't explained yet, but

46
00:03:20.973 --> 00:03:22.600
I'll walk through it.

47
00:03:22.600 --> 00:03:27.200
What we're saying here is we
want to make a declaration

48
00:03:27.200 --> 00:03:31.001
of an interface in the global scope,
right?

49
00:03:31.001 --> 00:03:34.725
This is not just in this one file,

50
00:03:34.725 --> 00:03:40.582
we want to add some types
to the scope called global.

51
00:03:40.582 --> 00:03:43.505
Well, it's where setTimeout lives or

52
00:03:43.505 --> 00:03:47.880
the promise constructor,
things that are available.

53
00:03:47.880 --> 00:03:52.267
Any module you write, you always have
these things at your fingertips, right?

54
00:03:53.895 --> 00:03:58.724
Right, setTimeout, setImmediate,
they are in a global scope.

55
00:04:01.059 --> 00:04:08.570
In fact, they're on, They're on Window or
on global if you're in Window.

56
00:04:08.570 --> 00:04:11.446
So now we're saying, all right, Window,

57
00:04:11.446 --> 00:04:15.879
the interface Window has a property
on it called exampleProperty,

58
00:04:15.879 --> 00:04:21.250
which is a number, and look, that type
error we had here before, it went away.

59
00:04:21.250 --> 00:04:26.003
So if we comment this line out, it's like,
exampleProperty does not exist.

60
00:04:26.003 --> 00:04:28.290
Well, we can make it exist.

61
00:04:28.290 --> 00:04:30.574
We can say, look,
I'm gonna put something here.

62
00:04:30.574 --> 00:04:31.831
Let me put it there.

63
00:04:31.831 --> 00:04:34.500
Let me tell you what the type is.

64
00:04:34.500 --> 00:04:41.679
So we're using open interfaces to augment
an existing type, which is pretty cool.

65
00:04:41.679 --> 00:04:44.405
You cannot do this with a type alias.

66
00:04:44.405 --> 00:04:47.509
Interfaces are open, type aliases are not.

67
00:04:47.509 --> 00:04:50.547
If we were to go back to,
where's the type alias here?

68
00:04:50.547 --> 00:04:51.882
Here.

69
00:04:55.513 --> 00:04:59.602
It's a duplicate identifier,
we're not allowed.

70
00:04:59.602 --> 00:05:02.795
So it's a special feature
of interfaces and

71
00:05:02.795 --> 00:05:06.169
it's very, very useful for
cases like this.

72
00:05:11.594 --> 00:05:15.857
All right, last thing we're gonna
describe here, which we'll need for

73
00:05:15.857 --> 00:05:20.350
our exercise, which is coming
up in a moment, recursive types.

74
00:05:20.350 --> 00:05:24.610
So let's say we have a data structure
that we wanna represent here, and

75
00:05:24.610 --> 00:05:29.590
let's call it NestedNumbers, which can be
a number or an array of nested numbers.

76
00:05:29.590 --> 00:05:31.506
There's your recursion right there.

77
00:05:31.506 --> 00:05:35.249
&gt;&gt; Is there a way to see the full
implementation of an interface locally?

78
00:05:35.249 --> 00:05:36.532
&gt;&gt; Yes.
&gt;&gt; Do you have to track down

79
00:05:36.532 --> 00:05:39.202
all the instances of the interface and
keep a mental model?

80
00:05:39.202 --> 00:05:43.159
&gt;&gt; Okay, good question, so
Anthony asks, can we see the full

81
00:05:43.159 --> 00:05:47.920
implementation of an interface or
do we have to track everything down?

82
00:05:47.920 --> 00:05:50.355
The answer is sort of in between.

83
00:05:50.355 --> 00:05:53.274
It's not as bad as you'd think, promise.

84
00:05:59.861 --> 00:06:02.185
Yeah, maybe there's something
weird with globals.

85
00:06:02.185 --> 00:06:05.506
All right, so
I just Cmd clicked on promise, and

86
00:06:05.506 --> 00:06:08.185
look at what's open here on the right.

87
00:06:08.185 --> 00:06:13.485
I have a bunch of different
files that describe interfaces.

88
00:06:13.485 --> 00:06:16.979
And look at this, I've got 2015,
there's something.

89
00:06:16.979 --> 00:06:19.109
There's es5, there's a promise.

90
00:06:19.109 --> 00:06:21.268
And there's something in 2018.

91
00:06:21.268 --> 00:06:26.682
It's almost like different releases
of the JavaScript programming

92
00:06:26.682 --> 00:06:31.450
language might layer more and
more things on top of promise.

93
00:06:31.450 --> 00:06:35.121
So if we look at 2018,
there's the finally.

94
00:06:35.121 --> 00:06:38.775
Finally came with es2018,

95
00:06:38.775 --> 00:06:44.125
so, To kinda answer your question, yes,

96
00:06:44.125 --> 00:06:49.650
it's true that there are multiple
declarations of an interface.

97
00:06:49.650 --> 00:06:54.427
But VS Code in particular has done
a pretty great job at letting you quickly

98
00:06:54.427 --> 00:06:58.587
find all of those declarations and
sort of cycle through them and

99
00:06:58.587 --> 00:07:02.381
see if that's the one you want,
or you go look at this one.

100
00:07:02.381 --> 00:07:05.880
This is the variable for promise, right?

101
00:07:05.880 --> 00:07:12.994
It's a promise constructor that kind
of describes this promise, right?

102
00:07:12.994 --> 00:07:17.487
It's the promise that I'm invoking,
not the instance that comes back.

103
00:07:17.487 --> 00:07:19.817
It's a class, right, the constructor.

104
00:07:19.817 --> 00:07:25.047
So yeah, things are separated
into different declarations,

105
00:07:25.047 --> 00:07:29.130
but they're all there if you Cmd click.

106
00:07:29.130 --> 00:07:32.189
&gt;&gt; Since the interfaces are open, will
it throw an error in other files, too?

107
00:07:32.189 --> 00:07:34.200
&gt;&gt; Yeah, that's a very good question.

108
00:07:34.200 --> 00:07:36.476
So Luis asks, since interfaces are open,

109
00:07:36.476 --> 00:07:38.824
will it throw an error in other files,
too?

110
00:07:38.824 --> 00:07:43.354
It will, that is a corollary that falls
out of what I was saying where there's

111
00:07:43.354 --> 00:07:47.820
one place where TypeScript keeps
track of what these interfaces are.

112
00:07:47.820 --> 00:07:52.104
So in the case of promise, right,
where we saw all of those declarations,

113
00:07:52.104 --> 00:07:56.660
every promise, including everything in
your Node modules that deals with this

114
00:07:56.660 --> 00:07:59.799
concept of promise,
they all have .finally on them.

115
00:07:59.799 --> 00:08:03.640
They're all working with the same type.

116
00:08:03.640 --> 00:08:08.700
Type checking is a holistic operation
that happens on your entire program.

117
00:08:08.700 --> 00:08:12.140
You could think of it, it's like
happening at once at the same time.

118
00:08:12.140 --> 00:08:17.330
It's kind of hard to imagine, but we don't
have a debugger that we can put in there.

119
00:08:17.330 --> 00:08:20.303
It's just type checking happens,
it's evaluated, and

120
00:08:20.303 --> 00:08:22.570
it either works or doesn't work.

121
00:08:22.570 --> 00:08:27.118
And there's one definition
of each type in memory.

122
00:08:27.118 --> 00:08:28.690
It's like a source of truth.

123
00:08:28.690 --> 00:08:33.446
And when we use interfaces,
we are kind of updating or

124
00:08:33.446 --> 00:08:38.740
adding to that single source of truth for
each type.

125
00:08:38.740 --> 00:08:43.812
So yeah,
if you augment an interface in a way that

126
00:08:43.812 --> 00:08:50.540
is unfriendly to other code,
it could cause problems.

127
00:08:50.540 --> 00:08:56.082
But it's additive,
I don't think that we could do this.

128
00:09:00.970 --> 00:09:02.581
Yeah, we can't do this.

129
00:09:02.581 --> 00:09:06.601
There is already a declaration for
a document.

130
00:09:06.601 --> 00:09:08.328
So we can't override document and

131
00:09:08.328 --> 00:09:12.560
make everybody think it's a number
instead of the document object.

132
00:09:12.560 --> 00:09:18.885
So you can't really stomp on things that
already exist, but you can add to them.

133
00:09:18.885 --> 00:09:24.385
And so it doesn't really result in
that much breakage in practice.

134
00:09:24.385 --> 00:09:29.213
But it could, if you were checking for the
presence of this property on Window and

135
00:09:29.213 --> 00:09:32.905
you always relied on it not being there,
and now it's there,

136
00:09:32.905 --> 00:09:35.682
a typeguard could flip
in another direction.

