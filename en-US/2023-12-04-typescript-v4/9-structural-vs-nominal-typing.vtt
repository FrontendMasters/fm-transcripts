WEBVTT

1
00:00:00.640 --> 00:00:05.130
First, let's talk a little bit
about what type checking is.

2
00:00:05.130 --> 00:00:09.928
And type checking happens whenever we're
trying to assign a value to a variable,

3
00:00:09.928 --> 00:00:13.420
when we're passing
an argument to a function.

4
00:00:13.420 --> 00:00:18.603
A function returning a value, right,
remember our number return type,

5
00:00:18.603 --> 00:00:21.624
and we were playing with undefined there.

6
00:00:21.624 --> 00:00:24.576
It's seeing what you're
actually returning,

7
00:00:24.576 --> 00:00:28.630
how does that compare to what
you've stated you'll return?

8
00:00:28.630 --> 00:00:33.818
So that's another place where
TypeScript is asking the question

9
00:00:33.818 --> 00:00:38.530
of type equivalence,
is type y equivalent to type x?

10
00:00:38.530 --> 00:00:42.106
And it's really,
this question comes down to like,

11
00:00:42.106 --> 00:00:45.260
does the type of y fit
within the type of x?

12
00:00:45.260 --> 00:00:48.177
So if you're returning
a number from a function,

13
00:00:48.177 --> 00:00:53.038
if that's what you say you're going to
return, and you return 43, always, for

14
00:00:53.038 --> 00:00:57.380
43 fits within set of numbers,
that's perfectly fine.

15
00:00:57.380 --> 00:01:00.730
But if you say you're going
to return the number 43 and

16
00:01:00.730 --> 00:01:04.770
you return some other random number,
that doesn't fit.

17
00:01:04.770 --> 00:01:10.870
It's really, if we think about our mental
model of sets, it's a question of subsets.

18
00:01:12.260 --> 00:01:17.530
Is one type a subset of the other type?

19
00:01:17.530 --> 00:01:22.550
So, in this case, this is very similar to
what we had in our add function, right?

20
00:01:22.550 --> 00:01:27.857
We flipped a coin, math that random,
see if it's greater than 0.5,

21
00:01:27.857 --> 00:01:33.870
and we said we would return an array of
strings, but we're returning undefined.

22
00:01:35.900 --> 00:01:38.900
We're returning a value of type undefined.

23
00:01:40.920 --> 00:01:43.603
And that is nowhere in
the set of string arrays,

24
00:01:43.603 --> 00:01:48.750
the set of all possible string arrays that
could exist, undefined is not in there.

25
00:01:48.750 --> 00:01:53.776
And so, we would say, well,
our return value here,

26
00:01:53.776 --> 00:01:57.812
it is not type equivalent to string array.

27
00:01:57.812 --> 00:02:01.979
Because that value undefined
cannot be found in the set of all

28
00:02:01.979 --> 00:02:05.502
possible string arrays
that we could ever create.

29
00:02:08.948 --> 00:02:14.931
So, this question of type equivalence or
if we think about type systems,

30
00:02:14.931 --> 00:02:18.540
we can sort them in
a couple different ways.

31
00:02:18.540 --> 00:02:21.800
First, we have static versus dynamic.

32
00:02:21.800 --> 00:02:25.869
So, dynamic types, you can think of
those as like the way JavaScript works,

33
00:02:25.869 --> 00:02:28.070
sometimes people call this duck typing.

34
00:02:28.070 --> 00:02:31.296
And that means we try to
proceed as far as we can,

35
00:02:31.296 --> 00:02:36.070
if some function is available and
that's all I need, I will use that.

36
00:02:36.070 --> 00:02:39.525
If it quacks like a duck,
I will consider it to be a duck,

37
00:02:39.525 --> 00:02:41.920
that's what duck typing means.

38
00:02:41.920 --> 00:02:45.721
That's dynamic typing, we try to do the
best we can with values at runtime, and

39
00:02:45.721 --> 00:02:47.730
JavaScript behaves that way.

40
00:02:47.730 --> 00:02:52.070
Static types are types that
are defined in your code.

41
00:02:52.070 --> 00:02:57.149
They're an analyzable at build time,
they're explicit.

42
00:02:57.149 --> 00:03:00.670
And that's part of what TypeScript
adds to JavaScript, right?

43
00:03:00.670 --> 00:03:02.690
We're writing in colon string.

44
00:03:02.690 --> 00:03:05.190
We're saying this function
returns a number.

45
00:03:05.190 --> 00:03:07.030
That's those are static types.

46
00:03:08.090 --> 00:03:13.635
Static meaning they don't change
over the duration of the program,

47
00:03:13.635 --> 00:03:18.139
that's kind of how to think
about the word static here.

48
00:03:18.139 --> 00:03:22.515
So other common programming
languages are Java, C#, and C++,

49
00:03:22.515 --> 00:03:24.600
they all involve static types.

50
00:03:24.600 --> 00:03:29.270
Many other languages do as well, but
these are really, really popular ones.

51
00:03:30.890 --> 00:03:35.673
And dynamic typed languages
include Python, Ruby,

52
00:03:35.673 --> 00:03:40.563
Perl, and PHP, although,
there are sorbet types for

53
00:03:40.563 --> 00:03:44.190
Ruby and I think, Python has TypeShed.

54
00:03:44.190 --> 00:03:48.645
There are ways to add some level
of typing to these languages, but

55
00:03:48.645 --> 00:03:52.690
at their core,
they are dynamically typed languages.

56
00:03:52.690 --> 00:03:58.311
Duck typing is very
similar to dynamic typing,

57
00:03:58.311 --> 00:04:05.610
and we'll talk a little bit
more about that in a second.

58
00:04:05.610 --> 00:04:11.332
So, you may see the term strong versus
weak types, this really strong and

59
00:04:11.332 --> 00:04:16.236
it's not really a spectrum that
makes sense for type systems.

60
00:04:16.236 --> 00:04:22.030
Although people treat the static types
as strong because they're more explicit.

61
00:04:22.030 --> 00:04:26.777
They usually allow you to articulate
more interesting things, but

62
00:04:26.777 --> 00:04:31.780
there is no consensus definition
of what strong means or weak.

63
00:04:31.780 --> 00:04:34.272
But these terms are test around a lot.

64
00:04:34.272 --> 00:04:37.250
All right,
this is kind of the interesting part.

65
00:04:37.250 --> 00:04:40.610
What is a nominal type system
versus a structural one?

66
00:04:40.610 --> 00:04:43.330
So this is a piece of Java code.

67
00:04:43.330 --> 00:04:47.672
And you'll notice it's Java code
because we've got like this public

68
00:04:47.672 --> 00:04:50.700
word before the class and
public static string.

69
00:04:51.710 --> 00:04:57.210
So, we've got our car here with make,
model, and year.

70
00:04:58.310 --> 00:05:01.965
And we've got another class
here that is a car checker.

71
00:05:01.965 --> 00:05:04.300
And it checks a car and
it returns a string.

72
00:05:04.300 --> 00:05:06.420
This is where you put
the return type in Java.

73
00:05:07.660 --> 00:05:09.080
And we could create a car.

74
00:05:10.490 --> 00:05:16.970
And if we do CarChecker.checkcar, we don't
see the implementation of this function.

75
00:05:16.970 --> 00:05:21.620
But if this were a type equivalence check,
what Java's really

76
00:05:21.620 --> 00:05:27.070
gonna be asking is, are you
an instance of the class called car?

77
00:05:27.070 --> 00:05:30.317
It doesn't matter what
properties you have,

78
00:05:30.317 --> 00:05:33.800
you have to be an instance
of a class named car.

79
00:05:33.800 --> 00:05:39.380
This class, that's what nominal means
when we say a nominal type system.

80
00:05:39.380 --> 00:05:42.870
All that matters is your constructor.

81
00:05:42.870 --> 00:05:43.713
Where did you come from?

82
00:05:46.697 --> 00:05:49.900
Typescripts type system is structural.

83
00:05:49.900 --> 00:05:53.849
So here's an example of, we have
a class car, we have a class truck,

84
00:05:53.849 --> 00:05:58.570
we have an object we've created,
which has some inference, right?

85
00:05:58.570 --> 00:06:04.990
It's gotta make model in here,
we've been dealing this all morning.

86
00:06:04.990 --> 00:06:08.110
And when we've got our printCar function,

87
00:06:08.110 --> 00:06:11.988
it's happy to take the car,
the truck, the vehicle,

88
00:06:11.988 --> 00:06:18.170
all that matters is that we meet the
requirements of what the argument wants.

89
00:06:18.170 --> 00:06:20.840
We don't have to have come
from a particular constructor.

90
00:06:20.840 --> 00:06:23.009
We just have to have the same structure.

91
00:06:24.160 --> 00:06:28.069
We have to have the right properties,
that's basically the right shape.

92
00:06:28.069 --> 00:06:29.390
It's not just properties, right?

93
00:06:29.390 --> 00:06:35.710
Cuz we could need a method to be
present on the argument passed to us.

94
00:06:35.710 --> 00:06:40.121
So, I mean, it's still a property,
it values function, but

95
00:06:40.121 --> 00:06:43.881
we could require that an index
signature be present.

96
00:06:43.881 --> 00:06:47.943
It's just a comparison of these
two structures without regard for

97
00:06:47.943 --> 00:06:51.061
where that object came from,
it doesn't matter,

98
00:06:51.061 --> 00:06:56.010
like car and truck, there's no parent
class here they're not related.

99
00:06:56.010 --> 00:07:00.435
They just happen to have fields
that meet the requirement,

100
00:07:00.435 --> 00:07:03.009
this is a structural type system.

101
00:07:04.400 --> 00:07:07.189
It is incredibly flexible,
and it needs to be,

102
00:07:07.189 --> 00:07:11.748
because part of the goal of TypeScript
is to layer types on top of JavaScript.

103
00:07:11.748 --> 00:07:16.131
And there's a whole lot of JavaScript
code out there that needs a great deal of

104
00:07:16.131 --> 00:07:19.449
flexibility in terms of
articulating how the types work.

105
00:07:22.328 --> 00:07:27.227
This is what lets you type just about
anything, anything that you can

106
00:07:27.227 --> 00:07:32.220
do in JavaScript is pretty much type,
like you can write types for it.

107
00:07:35.260 --> 00:07:40.135
I'm sure someone can create an example
where it's impossible, but 99.9%

108
00:07:44.992 --> 00:07:49.672
So, here's an example, just going
back to our set theory example, or

109
00:07:49.672 --> 00:07:53.970
sorry, let me not toss around
like complicated terms like that.

110
00:07:53.970 --> 00:07:59.180
Thinking of types as representing
a set of allowed values.

111
00:07:59.180 --> 00:08:02.420
If we think about the print car argument,
here's the set.

112
00:08:03.710 --> 00:08:08.810
All values which contain a make property,
which is a string, a model property,

113
00:08:08.810 --> 00:08:14.090
which is a string, a year property,
which is a number, that's the set.

114
00:08:14.090 --> 00:08:18.519
Anything you can create,
any possible thing that you could make in

115
00:08:18.519 --> 00:08:22.554
the JavaScript language that
conforms to this definition,

116
00:08:22.554 --> 00:08:25.610
printCar is more than happy to accept.

117
00:08:25.610 --> 00:08:31.002
So because Car and Truck instances and
cars set, if you looked at the type car,

118
00:08:31.002 --> 00:08:36.005
it's like all possible Car instances,
all possible Truck instances.

119
00:08:36.005 --> 00:08:39.076
They're each subsets of this setup here,

120
00:08:39.076 --> 00:08:43.880
every single one of those instances
will meet this condition.

121
00:08:43.880 --> 00:08:48.984
So let's go back to the big
question of type equivalence,

122
00:08:48.984 --> 00:08:51.702
is y type equivalent to type x?

123
00:08:51.702 --> 00:08:56.390
It's really, does the type of
y fit within the type of x?

124
00:08:56.390 --> 00:08:59.600
Or is the set represented by y?

125
00:08:59.600 --> 00:09:03.580
A subset of the set represented by x.

126
00:09:03.580 --> 00:09:06.020
Caitlin asks a good question here.

127
00:09:06.020 --> 00:09:08.155
What if the object has more properties?

128
00:09:08.155 --> 00:09:11.038
So I'll go back up to the example here.

129
00:09:11.038 --> 00:09:14.348
What if the object has more
properties than are needed?

130
00:09:14.348 --> 00:09:15.400
Will it still work?

131
00:09:15.400 --> 00:09:20.145
It'll absolutely still work, here on truck
we've got towing capacity on electric,

132
00:09:20.145 --> 00:09:23.130
sorry, on car we've got is electric.

133
00:09:23.130 --> 00:09:29.128
Those sort of paths straight through,
the function is more than happy to work.

134
00:09:29.128 --> 00:09:33.064
This kind of relates a little bit
to the access property checking,

135
00:09:33.064 --> 00:09:37.914
where we had that color red and remember
that was like an inaccessible property and

136
00:09:37.914 --> 00:09:39.966
TypeScript was warning us about.

137
00:09:39.966 --> 00:09:46.870
But the function is perfectly happy to
take anything that meets this condition.

138
00:09:46.870 --> 00:09:51.506
This set of allowed values, you could
have like an object with a thousand

139
00:09:51.506 --> 00:09:54.853
properties that the function
doesn't care about.

140
00:09:54.853 --> 00:09:58.139
But as long as it has make, model,
and year of the right types,

141
00:09:58.139 --> 00:10:00.440
printCar is totally happy to receive that.

142
00:10:02.520 --> 00:10:06.956
So what this lets you do is, instead
of having to have this big ontology of

143
00:10:06.956 --> 00:10:12.199
different objects, right, these modeling
everything in your program as instances

144
00:10:12.199 --> 00:10:17.200
of a class, and you can just say, all
right, here are the requirements I have.

145
00:10:17.200 --> 00:10:21.568
I'm building this print car function,
maybe you start with this line and

146
00:10:21.568 --> 00:10:23.686
you're like, I wanna print this.

147
00:10:23.686 --> 00:10:27.550
What do I need to be true in
order to safely print this?

148
00:10:27.550 --> 00:10:32.430
Well, I just need to have a variable,
which has make model and year on it.

149
00:10:32.430 --> 00:10:36.560
Willis asks, what if you use
constructor in the car or truck?

150
00:10:36.560 --> 00:10:37.949
would print car still work?

151
00:10:37.949 --> 00:10:44.868
I'm just gonna point out these two lines
here, I think that's what you're asking.

152
00:10:44.868 --> 00:10:49.563
So an instance of a car instance
of a truck works just fine.

153
00:10:49.563 --> 00:10:54.268
Okay, Samuel asks a good question here,
I think he's just saying

154
00:10:54.268 --> 00:10:59.810
structural typing is different than
any language you've worked with.

155
00:10:59.810 --> 00:11:01.910
So what does typeof really mean?

156
00:11:01.910 --> 00:11:03.660
Is it just the name of the class?

157
00:11:03.660 --> 00:11:07.457
Typeof in TypeScript means the same
thing it does in JavaScript,

158
00:11:07.457 --> 00:11:09.880
that is the Typeof you're used to using.

159
00:11:10.980 --> 00:11:15.030
Instanceof might be what
you're you're looking for.

160
00:11:15.030 --> 00:11:18.841
Like, if,

161
00:11:25.879 --> 00:11:30.455
Something like that without this extra if.

162
00:11:30.455 --> 00:11:35.082
This is how you would sort of determine
whether something's an instance of date,

163
00:11:35.082 --> 00:11:38.110
but it's important to know
what you're doing here.

164
00:11:38.110 --> 00:11:44.353
It's a little bit like nominal types,
so if you think about it,

165
00:11:44.353 --> 00:11:51.194
you can define a nominal type system
within a structural type system.

166
00:11:51.194 --> 00:11:52.810
Structural-type systems are,

167
00:11:52.810 --> 00:11:56.280
they include everything that you
can do in nominal type systems.

168
00:11:56.280 --> 00:11:58.730
Like this, right, here we're not saying,

169
00:11:58.730 --> 00:12:01.573
does x include a specific
set of properties on date.

170
00:12:01.573 --> 00:12:04.420
We're saying,
did this come from the date constructor?

171
00:12:04.420 --> 00:12:08.645
So this is a very nominal-ish thing to do,
but that's okay.

172
00:12:08.645 --> 00:12:12.003
Structural-type systems
are about allowing that and

173
00:12:12.003 --> 00:12:16.529
a greater set of capabilities,
such as the flexibility of just stating,

174
00:12:16.529 --> 00:12:21.210
give me a thing that has these fields
on it, I don't care where it came from.

