WEBVTT

1
00:00:00.550 --> 00:00:06.602
We've dealt with function types and
class types already to some extent.

2
00:00:06.602 --> 00:00:11.580
Let's take a step back and think
about how we would type these things.

3
00:00:11.580 --> 00:00:15.893
Not how would we type a specific function,
but

4
00:00:15.893 --> 00:00:19.328
how would we create a function type?

5
00:00:19.328 --> 00:00:23.190
How would we type a variable that
is designed to hold a function?

6
00:00:25.180 --> 00:00:28.700
And I call these callables
cuz we can call functions.

7
00:00:29.830 --> 00:00:35.200
So here's an example of a type,
we're using an interface for this.

8
00:00:35.200 --> 00:00:38.959
It's a type that has a call signature.

9
00:00:38.959 --> 00:00:43.480
Look at these parentheses instead
of square brackets, as we saw for

10
00:00:43.480 --> 00:00:44.840
index signatures.

11
00:00:44.840 --> 00:00:49.676
What we're saying here is we
take two arguments, x and y,

12
00:00:49.676 --> 00:00:55.640
both numbers, and we return a number,
it's almost like that.

13
00:00:55.640 --> 00:01:00.594
Just delete the word function and
delete the name of the function,

14
00:01:00.594 --> 00:01:02.720
so this is a call signature.

15
00:01:03.890 --> 00:01:07.310
You can see here TwoNumberCalc, and

16
00:01:07.310 --> 00:01:11.740
we can define this with
the type alias as well.

17
00:01:11.740 --> 00:01:15.699
The key thing to look out for,
which it takes forever for

18
00:01:15.699 --> 00:01:17.813
muscle memory to set in here.

19
00:01:17.813 --> 00:01:20.972
It's a fat arrow when
you're doing a type alias,

20
00:01:20.972 --> 00:01:24.973
because that's kind of valid
syntax on the right-hand side.

21
00:01:24.973 --> 00:01:30.111
And then of course, in an interface, use
a colon, TypeScript will yell at you and

22
00:01:30.111 --> 00:01:33.999
help you get it right, but
don't feel bad if you mix these up.

23
00:01:35.810 --> 00:01:39.471
So here we've got add and subtract,
they're both two number calculations,

24
00:01:39.471 --> 00:01:42.880
cuz these types are equivalent,
they're the same thing.

25
00:01:42.880 --> 00:01:49.170
And you see here,
we don't have to type x and y, Right?

26
00:01:49.170 --> 00:01:50.950
They are numbers.

27
00:01:50.950 --> 00:01:54.655
This is effectively now,
we can use this as a type annotation for

28
00:01:54.655 --> 00:01:55.855
an arrow function.

29
00:01:55.855 --> 00:02:01.240
TwoNumberCalculation, and then the
right-hand side, we don't need any types.

30
00:02:02.430 --> 00:02:07.112
If you were going to type a callback that
you pass to a function, you would use

31
00:02:07.112 --> 00:02:12.630
a similar technique cuz you wanna define
that this argument is of type function.

32
00:02:12.630 --> 00:02:15.500
Here are the parameters
the function takes.

33
00:02:15.500 --> 00:02:18.830
Here's what the function must return,
and you could use this.

34
00:02:18.830 --> 00:02:23.180
You could say, alright, I take as
an argument a TwoNumberCalculation.

35
00:02:23.180 --> 00:02:27.291
Of course, you do get the type checking
you'd hope to get, like, you've got to

36
00:02:27.291 --> 00:02:31.349
return a number here because it's part
of this type, TwoNumberCalculation.

37
00:02:33.060 --> 00:02:34.726
Yes, sir.
&gt;&gt; You had sort of alluded

38
00:02:34.726 --> 00:02:38.660
to it back when we were talking about
classes and inheritance and extends,

39
00:02:38.660 --> 00:02:40.500
versus implements.

40
00:02:40.500 --> 00:02:45.689
That is an interface that syntactically

41
00:02:45.689 --> 00:02:49.658
cannot be implemented because

42
00:02:49.658 --> 00:02:54.278
there's no name to sign that-
&gt;&gt; That's-

43
00:02:54.278 --> 00:02:55.901
&gt;&gt; Indication.

44
00:02:55.901 --> 00:03:02.010
&gt;&gt; Wow, that is a totally valid point and
good insight there.

45
00:03:02.010 --> 00:03:07.194
Earlier I did say interfaces describe
like an interface gives you the exact

46
00:03:07.194 --> 00:03:12.623
same constraints that, you would need to
use an interface to define a class and

47
00:03:12.623 --> 00:03:15.770
like there is no way to
make a class callable.

48
00:03:17.300 --> 00:03:22.530
Sorry, classes are callable, they just
must be used with the new keyword.

49
00:03:23.540 --> 00:03:26.925
And we'll see that, but
it would not be the signature,

50
00:03:26.925 --> 00:03:31.050
it would be something slightly different,
trivially different.

51
00:03:31.050 --> 00:03:36.760
But yes, you cannot implement this
interface, that's a very good insight.

52
00:03:38.960 --> 00:03:41.341
I'm not aware of other
cases where that's true.

53
00:03:41.341 --> 00:03:45.050
&gt;&gt; I think you may be able to
technically implemented in JavaScript.

54
00:03:45.050 --> 00:03:49.811
I don't know if there's a way to describe
the type information with TypeScript at

55
00:03:49.811 --> 00:03:52.370
all [LAUGH] cuz I think from a-
&gt;&gt; You totally can.

56
00:03:52.370 --> 00:03:57.215
&gt;&gt; You can return some callable,
invocable thing from

57
00:03:57.215 --> 00:04:02.392
the constructor, which is gross, but,
&gt;&gt; You used to be able to call

58
00:04:02.392 --> 00:04:06.841
constructors without the new keyword very
easily, and there was no disambiguation

59
00:04:06.841 --> 00:04:10.928
between callable and constructable,
this is purely a TypeScript concept.

60
00:04:15.020 --> 00:04:19.912
&gt;&gt; And this might have kind
of been addressed there, or

61
00:04:19.912 --> 00:04:24.802
you might be getting to it,
but could you explain why

62
00:04:24.802 --> 00:04:29.490
to use an interface versus
a type with callables.

63
00:04:29.490 --> 00:04:34.845
&gt;&gt; Yeah, that's a good question,
I don't think there are clear advantages

64
00:04:34.845 --> 00:04:39.870
to using an interface or a type alias,
beyond interfaces being open.

65
00:04:39.870 --> 00:04:44.310
Where if you want to describe like,
I don't know,

66
00:04:44.310 --> 00:04:51.539
a function with some things dangling off
of it, I think you can still do this, yep,

67
00:04:51.539 --> 00:04:56.621
but now, this isn't gonna work,
you'd have to do this.

68
00:05:00.200 --> 00:05:03.386
Yay, and all your inference
is gone when you do this.

69
00:05:05.830 --> 00:05:10.928
So yeah, technically, I mean, you could
do that with a type alias as well.

70
00:05:10.928 --> 00:05:13.539
I would say it just comes down
to the open interface issue,

71
00:05:13.539 --> 00:05:17.490
which is rarely something you think
about in a situation like this.

72
00:05:17.490 --> 00:05:20.159
If I were writing a library,
I would always err on

73
00:05:20.159 --> 00:05:24.570
the side of interfaces to allow my
downstream consumers little flexibility.

74
00:05:24.570 --> 00:05:29.330
&gt;&gt; Yep, and that was another comment
was types for normal projects,

75
00:05:29.330 --> 00:05:31.375
interfaces for libraries.

76
00:05:31.375 --> 00:05:34.080
&gt;&gt; Sort of, yeah, in a lot of cases.

77
00:05:34.080 --> 00:05:38.521
Sometimes you write a library, and
you want to make really sure that nobody

78
00:05:38.521 --> 00:05:42.273
messes with a particular type,
then you do want to type alias.

79
00:05:42.273 --> 00:05:45.990
I would say, it's more about you allow for
modification or

80
00:05:45.990 --> 00:05:50.745
not, and you sort of, in libraries
default to allowing modification, but

81
00:05:50.745 --> 00:05:53.100
there are valid exceptions.

82
00:05:53.100 --> 00:05:57.649
And same on the app side, I would say
it just matters less on the app side,

83
00:05:57.649 --> 00:06:00.798
you can go and
mess with these types if you need to.

84
00:06:00.798 --> 00:06:06.470
So yeah, there are lots of places where
an interface or a type alias will do.

